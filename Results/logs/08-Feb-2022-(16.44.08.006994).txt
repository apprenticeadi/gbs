INFO 2022-02-08 16:44:08,006 Testing how to add k-th order approx to chain rule method, date: 08-02-2022
INFO 2022-02-08 16:44:08,006 M=2, r=1.55, alpha=2, num_coh=0, cutoff=10
INFO 2022-02-08 16:44:08,006 U=[[-0.51479159+0.20802274j  0.05758598-0.82969875j]
 [ 0.14827197+0.8183713j   0.53450764+0.15028445j]]
INFO 2022-02-08 16:44:08,006 mu=[-0.  0.  0.  0.], cov=[[16.25374012  1.00904297  3.43076169  9.14109337]
 [ 1.00904297 15.38187991  9.14109337 -4.46756948]
 [ 3.43076169  9.14109337  5.98926036 -1.00904297]
 [ 9.14109337 -4.46756948 -1.00904297  6.86112057]]
INFO 2022-02-08 16:44:08,307 det_pattern=[0 0], Jake_prob=0.011129712244606, k_prob=5.833245466137472e-13, equal = False
INFO 2022-02-08 16:44:08,307 det_pattern=[1 0], Jake_prob=0.02698299694245612, k_prob=5.007699666927561e-12, equal = False
INFO 2022-02-08 16:44:08,323 det_pattern=[2 0], Jake_prob=0.04777293928727632, k_prob=5.734331770271315e-11, equal = False
INFO 2022-02-08 16:44:08,323 det_pattern=[3 0], Jake_prob=0.06995332082576516, k_prob=7.703809251918485e-10, equal = False
INFO 2022-02-08 16:44:08,329 det_pattern=[4 0], Jake_prob=0.09117489124580724, k_prob=1.1747506815513698e-08, equal = False
INFO 2022-02-08 16:44:08,329 det_pattern=[5 0], Jake_prob=0.10913662330748533, k_prob=1.9941508366187676e-07, equal = False
INFO 2022-02-08 16:44:08,329 det_pattern=[6 0], Jake_prob=0.12248924527938089, k_prob=3.7173109147573203e-06, equal = False
INFO 2022-02-08 16:44:08,329 det_pattern=[7 0], Jake_prob=0.1305681211210316, k_prob=7.531843065815596e-05, equal = False
INFO 2022-02-08 16:44:08,345 det_pattern=[8 0], Jake_prob=0.13341667337106383, k_prob=0.001645379763800196, equal = False
INFO 2022-02-08 16:44:08,345 det_pattern=[9 0], Jake_prob=0.1315554123110551, k_prob=0.03850138979006198, equal = False
INFO 2022-02-08 16:44:08,345 det_pattern=[10  0], Jake_prob=0.12582006406407237, k_prob=0.9597739827086592, equal = False
INFO 2022-02-08 16:44:09,735 det_pattern=[4 0], Jake_prob=0.06633476524514981, k_prob=2.2235334348318563e-13, equal = False
INFO 2022-02-08 16:44:09,735 det_pattern=[4 1], Jake_prob=8.350488026736784e-32, k_prob=1.6189371995441305e-11, equal = False
INFO 2022-02-08 16:44:09,743 det_pattern=[4 2], Jake_prob=0.5338062646437232, k_prob=1.3208130405726372e-10, equal = False
INFO 2022-02-08 16:44:09,743 det_pattern=[4 3], Jake_prob=4.1220956377295674e-32, k_prob=2.847358349445921e-10, equal = False
INFO 2022-02-08 16:44:09,753 det_pattern=[4 4], Jake_prob=0.021933406574164586, k_prob=2.145549473916214e-09, equal = False
INFO 2022-02-08 16:44:09,753 det_pattern=[4 5], Jake_prob=2.966820606065728e-32, k_prob=1.265808723573756e-07, equal = False
INFO 2022-02-08 16:44:09,753 det_pattern=[4 6], Jake_prob=0.06859505303199061, k_prob=1.5530840843005792e-06, equal = False
INFO 2022-02-08 16:44:09,753 det_pattern=[4 7], Jake_prob=1.4282491377541132e-31, k_prob=4.309240808303192e-06, equal = False
INFO 2022-02-08 16:44:09,769 det_pattern=[4 8], Jake_prob=0.1610783284574588, k_prob=9.008706410588218e-05, equal = False
INFO 2022-02-08 16:44:09,769 det_pattern=[4 9], Jake_prob=1.948352992681656e-31, k_prob=0.01711043360838511, equal = False
INFO 2022-02-08 16:44:09,769 det_pattern=[ 4 10], Jake_prob=0.14825218204751295, k_prob=0.9827934878429657, equal = False
INFO 2022-02-08 16:44:09,769 Final det pattern = [4 2], with overall Jake prob = 0.04866972812522206
INFO 2022-02-08 16:44:09,769 k-th order approx gives prob = 0.6187542871047014 for k=2N
INFO 2022-02-08 16:44:09,769 Are they equal= False
DEBUG 2022-02-08 17:11:33,470 bytecode dump:
>          0	NOP(arg=None, lineno=20)
           2	LOAD_FAST(arg=0, lineno=20)
           4	LOAD_ATTR(arg=0, lineno=20)
           6	LOAD_CONST(arg=1, lineno=20)
           8	BINARY_SUBSCR(arg=None, lineno=20)
          10	STORE_FAST(arg=8, lineno=20)
          12	LOAD_CONST(arg=2, lineno=21)
          14	LOAD_FAST(arg=2, lineno=21)
          16	LOAD_METHOD(arg=1, lineno=21)
          18	CALL_METHOD(arg=0, lineno=21)
          20	BINARY_MULTIPLY(arg=None, lineno=21)
          22	STORE_FAST(arg=9, lineno=21)
          24	LOAD_FAST(arg=3, lineno=22)
          26	LOAD_CONST(arg=0, lineno=22)
          28	IS_OP(arg=1, lineno=22)
          30	POP_JUMP_IF_FALSE(arg=40, lineno=22)
          32	LOAD_FAST(arg=9, lineno=23)
          34	LOAD_CONST(arg=3, lineno=23)
          36	INPLACE_ADD(arg=None, lineno=23)
          38	STORE_FAST(arg=9, lineno=23)
>         40	LOAD_FAST(arg=7, lineno=24)
          42	POP_JUMP_IF_FALSE(arg=92, lineno=24)
          44	LOAD_FAST(arg=3, lineno=24)
          46	LOAD_CONST(arg=0, lineno=24)
          48	IS_OP(arg=0, lineno=24)
          50	POP_JUMP_IF_FALSE(arg=92, lineno=24)
          52	LOAD_FAST(arg=2, lineno=25)
          54	LOAD_CONST(arg=1, lineno=25)
          56	BINARY_SUBSCR(arg=None, lineno=25)
          58	LOAD_CONST(arg=2, lineno=25)
          60	BINARY_ADD(arg=None, lineno=25)
          62	LOAD_CONST(arg=2, lineno=25)
          64	BINARY_FLOOR_DIVIDE(arg=None, lineno=25)
          66	LOAD_GLOBAL(arg=2, lineno=25)
          68	LOAD_METHOD(arg=3, lineno=25)
          70	LOAD_FAST(arg=2, lineno=25)
          72	LOAD_CONST(arg=3, lineno=25)
          74	LOAD_CONST(arg=0, lineno=25)
          76	BUILD_SLICE(arg=2, lineno=25)
          78	BINARY_SUBSCR(arg=None, lineno=25)
          80	LOAD_CONST(arg=3, lineno=25)
          82	BINARY_ADD(arg=None, lineno=25)
          84	CALL_METHOD(arg=1, lineno=25)
          86	BINARY_MULTIPLY(arg=None, lineno=25)
          88	STORE_FAST(arg=10, lineno=25)
          90	JUMP_FORWARD(arg=14, lineno=25)
>         92	LOAD_GLOBAL(arg=2, lineno=27)
          94	LOAD_METHOD(arg=3, lineno=27)
          96	LOAD_FAST(arg=2, lineno=27)
          98	LOAD_CONST(arg=3, lineno=27)
         100	BINARY_ADD(arg=None, lineno=27)
         102	CALL_METHOD(arg=1, lineno=27)
         104	STORE_FAST(arg=10, lineno=27)
>        106	LOAD_FAST(arg=2, lineno=29)
         108	LOAD_METHOD(arg=4, lineno=29)
         110	CALL_METHOD(arg=0, lineno=29)
         112	LOAD_CONST(arg=3, lineno=29)
         114	BINARY_ADD(arg=None, lineno=29)
         116	STORE_FAST(arg=11, lineno=29)
         118	LOAD_GLOBAL(arg=5, lineno=30)
         120	LOAD_FAST(arg=11, lineno=30)
         122	CALL_FUNCTION(arg=1, lineno=30)
         124	STORE_FAST(arg=12, lineno=30)
         126	LOAD_CONST(arg=1, lineno=32)
         128	STORE_FAST(arg=13, lineno=32)
         130	LOAD_GLOBAL(arg=6, lineno=34)
         132	LOAD_FAST(arg=5, lineno=34)
         134	LOAD_FAST(arg=10, lineno=34)
         136	LOAD_FAST(arg=6, lineno=34)
         138	CALL_FUNCTION(arg=3, lineno=34)
         140	GET_ITER(arg=None, lineno=34)
>        142	FOR_ITER(arg=238, lineno=34)
         144	STORE_FAST(arg=14, lineno=34)
         146	LOAD_GLOBAL(arg=7, lineno=36)
         148	LOAD_FAST(arg=14, lineno=36)
         150	LOAD_FAST(arg=2, lineno=36)
         152	CALL_FUNCTION(arg=2, lineno=36)
         154	STORE_FAST(arg=15, lineno=36)
         156	LOAD_FAST(arg=15, lineno=37)
         158	LOAD_METHOD(arg=1, lineno=37)
         160	CALL_METHOD(arg=0, lineno=37)
         162	STORE_FAST(arg=16, lineno=37)
         164	LOAD_CONST(arg=4, lineno=39)
         166	STORE_FAST(arg=17, lineno=39)
         168	LOAD_GLOBAL(arg=6, lineno=40)
         170	LOAD_FAST(arg=8, lineno=40)
         172	LOAD_CONST(arg=2, lineno=40)
         174	BINARY_FLOOR_DIVIDE(arg=None, lineno=40)
         176	CALL_FUNCTION(arg=1, lineno=40)
         178	GET_ITER(arg=None, lineno=40)
>        180	FOR_ITER(arg=28, lineno=40)
         182	STORE_FAST(arg=18, lineno=40)
         184	LOAD_FAST(arg=17, lineno=41)
         186	LOAD_FAST(arg=12, lineno=41)
         188	LOAD_FAST(arg=2, lineno=41)
         190	LOAD_FAST(arg=18, lineno=41)
         192	BINARY_SUBSCR(arg=None, lineno=41)
         194	LOAD_FAST(arg=15, lineno=41)
         196	LOAD_FAST(arg=18, lineno=41)
         198	BINARY_SUBSCR(arg=None, lineno=41)
         200	BUILD_TUPLE(arg=2, lineno=41)
         202	BINARY_SUBSCR(arg=None, lineno=41)
         204	INPLACE_MULTIPLY(arg=None, lineno=41)
         206	STORE_FAST(arg=17, lineno=41)
         208	JUMP_ABSOLUTE(arg=180, lineno=41)
>        210	LOAD_FAST(arg=7, lineno=43)
         212	POP_JUMP_IF_FALSE(arg=226, lineno=43)
         214	LOAD_CONST(arg=2, lineno=44)
         216	LOAD_FAST(arg=15, lineno=44)
         218	BINARY_MULTIPLY(arg=None, lineno=44)
         220	LOAD_FAST(arg=2, lineno=44)
         222	BINARY_SUBTRACT(arg=None, lineno=44)
         224	STORE_FAST(arg=15, lineno=44)
>        226	LOAD_GLOBAL(arg=8, lineno=46)
         228	LOAD_FAST(arg=15, lineno=46)
         230	LOAD_FAST(arg=0, lineno=46)
         232	LOAD_FAST(arg=1, lineno=46)
         234	LOAD_FAST(arg=4, lineno=46)
         236	CALL_FUNCTION(arg=4, lineno=46)
         238	UNPACK_SEQUENCE(arg=4, lineno=46)
         240	STORE_FAST(arg=19, lineno=46)
         242	STORE_FAST(arg=20, lineno=46)
         244	STORE_FAST(arg=21, lineno=46)
         246	STORE_FAST(arg=22, lineno=46)
         248	LOAD_GLOBAL(arg=9, lineno=48)
         250	LOAD_FAST(arg=19, lineno=48)
         252	CALL_FUNCTION(arg=1, lineno=48)
         254	STORE_FAST(arg=23, lineno=48)
         256	LOAD_CONST(arg=5, lineno=50)
         258	LOAD_FAST(arg=9, lineno=50)
         260	LOAD_CONST(arg=2, lineno=50)
         262	BINARY_FLOOR_DIVIDE(arg=None, lineno=50)
         264	LOAD_FAST(arg=16, lineno=50)
         266	BINARY_SUBTRACT(arg=None, lineno=50)
         268	BINARY_POWER(arg=None, lineno=50)
         270	LOAD_FAST(arg=17, lineno=50)
         272	BINARY_MULTIPLY(arg=None, lineno=50)
         274	STORE_FAST(arg=24, lineno=50)
         276	LOAD_FAST(arg=3, lineno=52)
         278	LOAD_CONST(arg=0, lineno=52)
         280	IS_OP(arg=1, lineno=52)
         282	POP_JUMP_IF_FALSE(arg=320, lineno=52)
         286	LOAD_FAST(arg=13, lineno=53)
         288	LOAD_FAST(arg=24, lineno=53)
         290	LOAD_GLOBAL(arg=10, lineno=53)
         292	LOAD_FAST(arg=23, lineno=53)
         294	LOAD_FAST(arg=19, lineno=53)
         296	LOAD_FAST(arg=20, lineno=53)
         298	LOAD_FAST(arg=21, lineno=53)
         300	LOAD_FAST(arg=9, lineno=53)
         302	LOAD_FAST(arg=3, lineno=53)
         304	LOAD_FAST(arg=22, lineno=53)
         306	CALL_FUNCTION(arg=7, lineno=53)
         308	LOAD_FAST(arg=9, lineno=53)
         310	BINARY_SUBSCR(arg=None, lineno=53)
         312	BINARY_MULTIPLY(arg=None, lineno=53)
         314	INPLACE_ADD(arg=None, lineno=53)
         316	STORE_FAST(arg=13, lineno=53)
         318	JUMP_ABSOLUTE(arg=142, lineno=53)
>        320	LOAD_FAST(arg=7, lineno=55)
         322	POP_JUMP_IF_FALSE(arg=348, lineno=55)
         326	LOAD_FAST(arg=15, lineno=55)
         328	LOAD_CONST(arg=1, lineno=55)
         330	BINARY_SUBSCR(arg=None, lineno=55)
         332	LOAD_CONST(arg=1, lineno=55)
         334	COMPARE_OP(arg=2, lineno=55)
         336	POP_JUMP_IF_FALSE(arg=348, lineno=55)
         340	LOAD_FAST(arg=24, lineno=56)
         342	LOAD_CONST(arg=6, lineno=56)
         344	INPLACE_MULTIPLY(arg=None, lineno=56)
         346	STORE_FAST(arg=24, lineno=56)
>        348	LOAD_FAST(arg=13, lineno=57)
         350	LOAD_FAST(arg=24, lineno=57)
         352	LOAD_GLOBAL(arg=11, lineno=57)
         354	LOAD_FAST(arg=23, lineno=57)
         356	LOAD_FAST(arg=19, lineno=57)
         358	LOAD_FAST(arg=20, lineno=57)
         360	LOAD_FAST(arg=21, lineno=57)
         362	LOAD_FAST(arg=9, lineno=57)
         364	CALL_FUNCTION(arg=5, lineno=57)
         366	LOAD_FAST(arg=9, lineno=57)
         368	LOAD_CONST(arg=2, lineno=57)
         370	BINARY_FLOOR_DIVIDE(arg=None, lineno=57)
         372	BINARY_SUBSCR(arg=None, lineno=57)
         374	BINARY_MULTIPLY(arg=None, lineno=57)
         376	INPLACE_ADD(arg=None, lineno=57)
         378	STORE_FAST(arg=13, lineno=57)
         380	JUMP_ABSOLUTE(arg=142, lineno=57)
>        382	LOAD_FAST(arg=7, lineno=59)
         384	POP_JUMP_IF_FALSE(arg=436, lineno=59)
         388	LOAD_FAST(arg=3, lineno=60)
         390	LOAD_CONST(arg=0, lineno=60)
         392	IS_OP(arg=0, lineno=60)
         394	POP_JUMP_IF_FALSE(arg=420, lineno=60)
         398	LOAD_FAST(arg=13, lineno=61)
         400	LOAD_CONST(arg=6, lineno=61)
         402	LOAD_FAST(arg=9, lineno=61)
         404	LOAD_CONST(arg=2, lineno=61)
         406	BINARY_FLOOR_DIVIDE(arg=None, lineno=61)
         408	LOAD_CONST(arg=3, lineno=61)
         410	BINARY_SUBTRACT(arg=None, lineno=61)
         412	BINARY_POWER(arg=None, lineno=61)
         414	BINARY_MULTIPLY(arg=None, lineno=61)
         416	STORE_FAST(arg=13, lineno=61)
         418	JUMP_FORWARD(arg=16, lineno=61)
>        420	LOAD_FAST(arg=13, lineno=63)
         422	LOAD_CONST(arg=6, lineno=63)
         424	LOAD_FAST(arg=9, lineno=63)
         426	LOAD_CONST(arg=2, lineno=63)
         428	BINARY_FLOOR_DIVIDE(arg=None, lineno=63)
         430	BINARY_POWER(arg=None, lineno=63)
         432	BINARY_MULTIPLY(arg=None, lineno=63)
         434	STORE_FAST(arg=13, lineno=63)
>        436	LOAD_FAST(arg=13, lineno=64)
         438	RETURN_VALUE(arg=None, lineno=64)
DEBUG 2022-02-08 17:11:33,470 pending: deque([State(pc_initial=0 nstack_initial=0)])
DEBUG 2022-02-08 17:11:33,470 stack: []
DEBUG 2022-02-08 17:11:33,470 dispatch pc=0, inst=NOP(arg=None, lineno=20)
DEBUG 2022-02-08 17:11:33,470 stack []
DEBUG 2022-02-08 17:11:33,470 dispatch pc=2, inst=LOAD_FAST(arg=0, lineno=20)
DEBUG 2022-02-08 17:11:33,470 stack []
DEBUG 2022-02-08 17:11:33,470 dispatch pc=4, inst=LOAD_ATTR(arg=0, lineno=20)
DEBUG 2022-02-08 17:11:33,470 stack ['$A2.0']
DEBUG 2022-02-08 17:11:33,470 dispatch pc=6, inst=LOAD_CONST(arg=1, lineno=20)
DEBUG 2022-02-08 17:11:33,470 stack ['$4load_attr.1']
DEBUG 2022-02-08 17:11:33,470 dispatch pc=8, inst=BINARY_SUBSCR(arg=None, lineno=20)
DEBUG 2022-02-08 17:11:33,470 stack ['$4load_attr.1', '$const6.2']
DEBUG 2022-02-08 17:11:33,470 dispatch pc=10, inst=STORE_FAST(arg=8, lineno=20)
DEBUG 2022-02-08 17:11:33,470 stack ['$8binary_subscr.3']
DEBUG 2022-02-08 17:11:33,470 dispatch pc=12, inst=LOAD_CONST(arg=2, lineno=21)
DEBUG 2022-02-08 17:11:33,470 stack []
DEBUG 2022-02-08 17:11:33,470 dispatch pc=14, inst=LOAD_FAST(arg=2, lineno=21)
DEBUG 2022-02-08 17:11:33,470 stack ['$const12.4']
DEBUG 2022-02-08 17:11:33,470 dispatch pc=16, inst=LOAD_METHOD(arg=1, lineno=21)
DEBUG 2022-02-08 17:11:33,470 stack ['$const12.4', '$edge_reps14.5']
DEBUG 2022-02-08 17:11:33,470 dispatch pc=18, inst=CALL_METHOD(arg=0, lineno=21)
DEBUG 2022-02-08 17:11:33,470 stack ['$const12.4', '$16load_method.6']
DEBUG 2022-02-08 17:11:33,470 dispatch pc=20, inst=BINARY_MULTIPLY(arg=None, lineno=21)
DEBUG 2022-02-08 17:11:33,470 stack ['$const12.4', '$18call_method.7']
DEBUG 2022-02-08 17:11:33,470 dispatch pc=22, inst=STORE_FAST(arg=9, lineno=21)
DEBUG 2022-02-08 17:11:33,470 stack ['$20binary_multiply.8']
DEBUG 2022-02-08 17:11:33,470 dispatch pc=24, inst=LOAD_FAST(arg=3, lineno=22)
DEBUG 2022-02-08 17:11:33,485 stack []
DEBUG 2022-02-08 17:11:33,485 dispatch pc=26, inst=LOAD_CONST(arg=0, lineno=22)
DEBUG 2022-02-08 17:11:33,485 stack ['$oddloop24.9']
DEBUG 2022-02-08 17:11:33,485 dispatch pc=28, inst=IS_OP(arg=1, lineno=22)
DEBUG 2022-02-08 17:11:33,485 stack ['$oddloop24.9', '$const26.10']
DEBUG 2022-02-08 17:11:33,485 dispatch pc=30, inst=POP_JUMP_IF_FALSE(arg=40, lineno=22)
DEBUG 2022-02-08 17:11:33,485 stack ['$28is_op.11']
DEBUG 2022-02-08 17:11:33,485 end state. edges=[Edge(pc=32, stack=(), blockstack=(), npush=0), Edge(pc=40, stack=(), blockstack=(), npush=0)]
DEBUG 2022-02-08 17:11:33,485 pending: deque([State(pc_initial=32 nstack_initial=0), State(pc_initial=40 nstack_initial=0)])
DEBUG 2022-02-08 17:11:33,485 stack: []
DEBUG 2022-02-08 17:11:33,485 dispatch pc=32, inst=LOAD_FAST(arg=9, lineno=23)
DEBUG 2022-02-08 17:11:33,485 stack []
DEBUG 2022-02-08 17:11:33,485 dispatch pc=34, inst=LOAD_CONST(arg=3, lineno=23)
DEBUG 2022-02-08 17:11:33,485 stack ['$N32.0']
DEBUG 2022-02-08 17:11:33,485 dispatch pc=36, inst=INPLACE_ADD(arg=None, lineno=23)
DEBUG 2022-02-08 17:11:33,485 stack ['$N32.0', '$const34.1']
DEBUG 2022-02-08 17:11:33,485 dispatch pc=38, inst=STORE_FAST(arg=9, lineno=23)
DEBUG 2022-02-08 17:11:33,485 stack ['$36inplace_add.2']
DEBUG 2022-02-08 17:11:33,485 end state. edges=[Edge(pc=40, stack=(), blockstack=(), npush=0)]
DEBUG 2022-02-08 17:11:33,485 pending: deque([State(pc_initial=40 nstack_initial=0), State(pc_initial=40 nstack_initial=0)])
DEBUG 2022-02-08 17:11:33,485 stack: []
DEBUG 2022-02-08 17:11:33,485 dispatch pc=40, inst=LOAD_FAST(arg=7, lineno=24)
DEBUG 2022-02-08 17:11:33,485 stack []
DEBUG 2022-02-08 17:11:33,485 dispatch pc=42, inst=POP_JUMP_IF_FALSE(arg=92, lineno=24)
DEBUG 2022-02-08 17:11:33,485 stack ['$glynn40.0']
DEBUG 2022-02-08 17:11:33,485 end state. edges=[Edge(pc=44, stack=(), blockstack=(), npush=0), Edge(pc=92, stack=(), blockstack=(), npush=0)]
DEBUG 2022-02-08 17:11:33,485 pending: deque([State(pc_initial=40 nstack_initial=0), State(pc_initial=44 nstack_initial=0), State(pc_initial=92 nstack_initial=0)])
DEBUG 2022-02-08 17:11:33,485 pending: deque([State(pc_initial=44 nstack_initial=0), State(pc_initial=92 nstack_initial=0)])
DEBUG 2022-02-08 17:11:33,485 stack: []
DEBUG 2022-02-08 17:11:33,485 dispatch pc=44, inst=LOAD_FAST(arg=3, lineno=24)
DEBUG 2022-02-08 17:11:33,485 stack []
DEBUG 2022-02-08 17:11:33,485 dispatch pc=46, inst=LOAD_CONST(arg=0, lineno=24)
DEBUG 2022-02-08 17:11:33,485 stack ['$oddloop44.0']
DEBUG 2022-02-08 17:11:33,485 dispatch pc=48, inst=IS_OP(arg=0, lineno=24)
DEBUG 2022-02-08 17:11:33,485 stack ['$oddloop44.0', '$const46.1']
DEBUG 2022-02-08 17:11:33,485 dispatch pc=50, inst=POP_JUMP_IF_FALSE(arg=92, lineno=24)
DEBUG 2022-02-08 17:11:33,485 stack ['$48is_op.2']
DEBUG 2022-02-08 17:11:33,485 end state. edges=[Edge(pc=52, stack=(), blockstack=(), npush=0), Edge(pc=92, stack=(), blockstack=(), npush=0)]
DEBUG 2022-02-08 17:11:33,485 pending: deque([State(pc_initial=92 nstack_initial=0), State(pc_initial=52 nstack_initial=0), State(pc_initial=92 nstack_initial=0)])
DEBUG 2022-02-08 17:11:33,485 stack: []
DEBUG 2022-02-08 17:11:33,485 dispatch pc=92, inst=LOAD_GLOBAL(arg=2, lineno=27)
DEBUG 2022-02-08 17:11:33,485 stack []
DEBUG 2022-02-08 17:11:33,485 dispatch pc=94, inst=LOAD_METHOD(arg=3, lineno=27)
DEBUG 2022-02-08 17:11:33,485 stack ['$92load_global.0']
DEBUG 2022-02-08 17:11:33,485 dispatch pc=96, inst=LOAD_FAST(arg=2, lineno=27)
DEBUG 2022-02-08 17:11:33,485 stack ['$94load_method.1']
DEBUG 2022-02-08 17:11:33,485 dispatch pc=98, inst=LOAD_CONST(arg=3, lineno=27)
DEBUG 2022-02-08 17:11:33,485 stack ['$94load_method.1', '$edge_reps96.2']
DEBUG 2022-02-08 17:11:33,485 dispatch pc=100, inst=BINARY_ADD(arg=None, lineno=27)
DEBUG 2022-02-08 17:11:33,485 stack ['$94load_method.1', '$edge_reps96.2', '$const98.3']
DEBUG 2022-02-08 17:11:33,485 dispatch pc=102, inst=CALL_METHOD(arg=1, lineno=27)
DEBUG 2022-02-08 17:11:33,485 stack ['$94load_method.1', '$100binary_add.4']
DEBUG 2022-02-08 17:11:33,485 dispatch pc=104, inst=STORE_FAST(arg=10, lineno=27)
DEBUG 2022-02-08 17:11:33,485 stack ['$102call_method.5']
DEBUG 2022-02-08 17:11:33,485 end state. edges=[Edge(pc=106, stack=(), blockstack=(), npush=0)]
DEBUG 2022-02-08 17:11:33,485 pending: deque([State(pc_initial=52 nstack_initial=0), State(pc_initial=92 nstack_initial=0), State(pc_initial=106 nstack_initial=0)])
DEBUG 2022-02-08 17:11:33,485 stack: []
DEBUG 2022-02-08 17:11:33,485 dispatch pc=52, inst=LOAD_FAST(arg=2, lineno=25)
DEBUG 2022-02-08 17:11:33,485 stack []
DEBUG 2022-02-08 17:11:33,485 dispatch pc=54, inst=LOAD_CONST(arg=1, lineno=25)
DEBUG 2022-02-08 17:11:33,485 stack ['$edge_reps52.0']
DEBUG 2022-02-08 17:11:33,485 dispatch pc=56, inst=BINARY_SUBSCR(arg=None, lineno=25)
DEBUG 2022-02-08 17:11:33,485 stack ['$edge_reps52.0', '$const54.1']
DEBUG 2022-02-08 17:11:33,485 dispatch pc=58, inst=LOAD_CONST(arg=2, lineno=25)
DEBUG 2022-02-08 17:11:33,485 stack ['$56binary_subscr.2']
DEBUG 2022-02-08 17:11:33,485 dispatch pc=60, inst=BINARY_ADD(arg=None, lineno=25)
DEBUG 2022-02-08 17:11:33,485 stack ['$56binary_subscr.2', '$const58.3']
DEBUG 2022-02-08 17:11:33,485 dispatch pc=62, inst=LOAD_CONST(arg=2, lineno=25)
DEBUG 2022-02-08 17:11:33,485 stack ['$60binary_add.4']
DEBUG 2022-02-08 17:11:33,485 dispatch pc=64, inst=BINARY_FLOOR_DIVIDE(arg=None, lineno=25)
DEBUG 2022-02-08 17:11:33,485 stack ['$60binary_add.4', '$const62.5']
DEBUG 2022-02-08 17:11:33,485 dispatch pc=66, inst=LOAD_GLOBAL(arg=2, lineno=25)
DEBUG 2022-02-08 17:11:33,485 stack ['$64binary_floor_divide.6']
DEBUG 2022-02-08 17:11:33,485 dispatch pc=68, inst=LOAD_METHOD(arg=3, lineno=25)
DEBUG 2022-02-08 17:11:33,485 stack ['$64binary_floor_divide.6', '$66load_global.7']
DEBUG 2022-02-08 17:11:33,485 dispatch pc=70, inst=LOAD_FAST(arg=2, lineno=25)
DEBUG 2022-02-08 17:11:33,485 stack ['$64binary_floor_divide.6', '$68load_method.8']
DEBUG 2022-02-08 17:11:33,485 dispatch pc=72, inst=LOAD_CONST(arg=3, lineno=25)
DEBUG 2022-02-08 17:11:33,485 stack ['$64binary_floor_divide.6', '$68load_method.8', '$edge_reps70.9']
DEBUG 2022-02-08 17:11:33,485 dispatch pc=74, inst=LOAD_CONST(arg=0, lineno=25)
DEBUG 2022-02-08 17:11:33,485 stack ['$64binary_floor_divide.6', '$68load_method.8', '$edge_reps70.9', '$const72.10']
DEBUG 2022-02-08 17:11:33,485 dispatch pc=76, inst=BUILD_SLICE(arg=2, lineno=25)
DEBUG 2022-02-08 17:11:33,485 stack ['$64binary_floor_divide.6', '$68load_method.8', '$edge_reps70.9', '$const72.10', '$const74.11']
DEBUG 2022-02-08 17:11:33,485 dispatch pc=78, inst=BINARY_SUBSCR(arg=None, lineno=25)
DEBUG 2022-02-08 17:11:33,485 stack ['$64binary_floor_divide.6', '$68load_method.8', '$edge_reps70.9', '$76build_slice.13']
DEBUG 2022-02-08 17:11:33,485 dispatch pc=80, inst=LOAD_CONST(arg=3, lineno=25)
DEBUG 2022-02-08 17:11:33,485 stack ['$64binary_floor_divide.6', '$68load_method.8', '$78binary_subscr.14']
DEBUG 2022-02-08 17:11:33,485 dispatch pc=82, inst=BINARY_ADD(arg=None, lineno=25)
DEBUG 2022-02-08 17:11:33,485 stack ['$64binary_floor_divide.6', '$68load_method.8', '$78binary_subscr.14', '$const80.15']
DEBUG 2022-02-08 17:11:33,485 dispatch pc=84, inst=CALL_METHOD(arg=1, lineno=25)
DEBUG 2022-02-08 17:11:33,485 stack ['$64binary_floor_divide.6', '$68load_method.8', '$82binary_add.16']
DEBUG 2022-02-08 17:11:33,485 dispatch pc=86, inst=BINARY_MULTIPLY(arg=None, lineno=25)
DEBUG 2022-02-08 17:11:33,485 stack ['$64binary_floor_divide.6', '$84call_method.17']
DEBUG 2022-02-08 17:11:33,485 dispatch pc=88, inst=STORE_FAST(arg=10, lineno=25)
DEBUG 2022-02-08 17:11:33,485 stack ['$86binary_multiply.18']
DEBUG 2022-02-08 17:11:33,485 dispatch pc=90, inst=JUMP_FORWARD(arg=14, lineno=25)
DEBUG 2022-02-08 17:11:33,485 stack []
DEBUG 2022-02-08 17:11:33,485 end state. edges=[Edge(pc=106, stack=(), blockstack=(), npush=0)]
DEBUG 2022-02-08 17:11:33,485 pending: deque([State(pc_initial=92 nstack_initial=0), State(pc_initial=106 nstack_initial=0), State(pc_initial=106 nstack_initial=0)])
DEBUG 2022-02-08 17:11:33,485 pending: deque([State(pc_initial=106 nstack_initial=0), State(pc_initial=106 nstack_initial=0)])
DEBUG 2022-02-08 17:11:33,485 stack: []
DEBUG 2022-02-08 17:11:33,485 dispatch pc=106, inst=LOAD_FAST(arg=2, lineno=29)
DEBUG 2022-02-08 17:11:33,485 stack []
DEBUG 2022-02-08 17:11:33,485 dispatch pc=108, inst=LOAD_METHOD(arg=4, lineno=29)
DEBUG 2022-02-08 17:11:33,485 stack ['$edge_reps106.0']
DEBUG 2022-02-08 17:11:33,485 dispatch pc=110, inst=CALL_METHOD(arg=0, lineno=29)
DEBUG 2022-02-08 17:11:33,485 stack ['$108load_method.1']
DEBUG 2022-02-08 17:11:33,485 dispatch pc=112, inst=LOAD_CONST(arg=3, lineno=29)
DEBUG 2022-02-08 17:11:33,485 stack ['$110call_method.2']
DEBUG 2022-02-08 17:11:33,485 dispatch pc=114, inst=BINARY_ADD(arg=None, lineno=29)
DEBUG 2022-02-08 17:11:33,485 stack ['$110call_method.2', '$const112.3']
DEBUG 2022-02-08 17:11:33,485 dispatch pc=116, inst=STORE_FAST(arg=11, lineno=29)
DEBUG 2022-02-08 17:11:33,485 stack ['$114binary_add.4']
DEBUG 2022-02-08 17:11:33,485 dispatch pc=118, inst=LOAD_GLOBAL(arg=5, lineno=30)
DEBUG 2022-02-08 17:11:33,485 stack []
DEBUG 2022-02-08 17:11:33,485 dispatch pc=120, inst=LOAD_FAST(arg=11, lineno=30)
DEBUG 2022-02-08 17:11:33,485 stack ['$118load_global.5']
DEBUG 2022-02-08 17:11:33,485 dispatch pc=122, inst=CALL_FUNCTION(arg=1, lineno=30)
DEBUG 2022-02-08 17:11:33,485 stack ['$118load_global.5', '$max_binom120.6']
DEBUG 2022-02-08 17:11:33,485 dispatch pc=124, inst=STORE_FAST(arg=12, lineno=30)
DEBUG 2022-02-08 17:11:33,485 stack ['$122call_function.7']
DEBUG 2022-02-08 17:11:33,485 dispatch pc=126, inst=LOAD_CONST(arg=1, lineno=32)
DEBUG 2022-02-08 17:11:33,485 stack []
DEBUG 2022-02-08 17:11:33,485 dispatch pc=128, inst=STORE_FAST(arg=13, lineno=32)
DEBUG 2022-02-08 17:11:33,485 stack ['$const126.8']
DEBUG 2022-02-08 17:11:33,485 dispatch pc=130, inst=LOAD_GLOBAL(arg=6, lineno=34)
DEBUG 2022-02-08 17:11:33,485 stack []
DEBUG 2022-02-08 17:11:33,485 dispatch pc=132, inst=LOAD_FAST(arg=5, lineno=34)
DEBUG 2022-02-08 17:11:33,485 stack ['$130load_global.9']
DEBUG 2022-02-08 17:11:33,485 dispatch pc=134, inst=LOAD_FAST(arg=10, lineno=34)
DEBUG 2022-02-08 17:11:33,485 stack ['$130load_global.9', '$rank132.10']
DEBUG 2022-02-08 17:11:33,485 dispatch pc=136, inst=LOAD_FAST(arg=6, lineno=34)
DEBUG 2022-02-08 17:11:33,485 stack ['$130load_global.9', '$rank132.10', '$steps134.11']
DEBUG 2022-02-08 17:11:33,485 dispatch pc=138, inst=CALL_FUNCTION(arg=3, lineno=34)
DEBUG 2022-02-08 17:11:33,485 stack ['$130load_global.9', '$rank132.10', '$steps134.11', '$size136.12']
DEBUG 2022-02-08 17:11:33,485 dispatch pc=140, inst=GET_ITER(arg=None, lineno=34)
DEBUG 2022-02-08 17:11:33,485 stack ['$138call_function.13']
DEBUG 2022-02-08 17:11:33,485 end state. edges=[Edge(pc=142, stack=('$140get_iter.14',), blockstack=(), npush=0)]
DEBUG 2022-02-08 17:11:33,485 pending: deque([State(pc_initial=106 nstack_initial=0), State(pc_initial=142 nstack_initial=1)])
DEBUG 2022-02-08 17:11:33,485 pending: deque([State(pc_initial=142 nstack_initial=1)])
DEBUG 2022-02-08 17:11:33,485 stack: ['$phi142.0']
DEBUG 2022-02-08 17:11:33,485 dispatch pc=142, inst=FOR_ITER(arg=238, lineno=34)
DEBUG 2022-02-08 17:11:33,485 stack ['$phi142.0']
DEBUG 2022-02-08 17:11:33,485 end state. edges=[Edge(pc=382, stack=(), blockstack=(), npush=0), Edge(pc=144, stack=('$phi142.0', '$142for_iter.2'), blockstack=(), npush=0)]
DEBUG 2022-02-08 17:11:33,485 pending: deque([State(pc_initial=382 nstack_initial=0), State(pc_initial=144 nstack_initial=2)])
DEBUG 2022-02-08 17:11:33,485 stack: []
DEBUG 2022-02-08 17:11:33,485 dispatch pc=382, inst=LOAD_FAST(arg=7, lineno=59)
DEBUG 2022-02-08 17:11:33,485 stack []
DEBUG 2022-02-08 17:11:33,485 dispatch pc=384, inst=POP_JUMP_IF_FALSE(arg=436, lineno=59)
DEBUG 2022-02-08 17:11:33,485 stack ['$glynn382.0']
DEBUG 2022-02-08 17:11:33,485 end state. edges=[Edge(pc=388, stack=(), blockstack=(), npush=0), Edge(pc=436, stack=(), blockstack=(), npush=0)]
DEBUG 2022-02-08 17:11:33,485 pending: deque([State(pc_initial=144 nstack_initial=2), State(pc_initial=388 nstack_initial=0), State(pc_initial=436 nstack_initial=0)])
DEBUG 2022-02-08 17:11:33,485 stack: ['$phi144.0', '$phi144.1']
DEBUG 2022-02-08 17:11:33,485 dispatch pc=144, inst=STORE_FAST(arg=14, lineno=34)
DEBUG 2022-02-08 17:11:33,485 stack ['$phi144.0', '$phi144.1']
DEBUG 2022-02-08 17:11:33,485 dispatch pc=146, inst=LOAD_GLOBAL(arg=7, lineno=36)
DEBUG 2022-02-08 17:11:33,485 stack ['$phi144.0']
DEBUG 2022-02-08 17:11:33,485 dispatch pc=148, inst=LOAD_FAST(arg=14, lineno=36)
DEBUG 2022-02-08 17:11:33,485 stack ['$phi144.0', '$146load_global.2']
DEBUG 2022-02-08 17:11:33,501 dispatch pc=150, inst=LOAD_FAST(arg=2, lineno=36)
DEBUG 2022-02-08 17:11:33,501 stack ['$phi144.0', '$146load_global.2', '$j148.3']
DEBUG 2022-02-08 17:11:33,501 dispatch pc=152, inst=CALL_FUNCTION(arg=2, lineno=36)
DEBUG 2022-02-08 17:11:33,501 stack ['$phi144.0', '$146load_global.2', '$j148.3', '$edge_reps150.4']
DEBUG 2022-02-08 17:11:33,501 dispatch pc=154, inst=STORE_FAST(arg=15, lineno=36)
DEBUG 2022-02-08 17:11:33,501 stack ['$phi144.0', '$152call_function.5']
DEBUG 2022-02-08 17:11:33,501 dispatch pc=156, inst=LOAD_FAST(arg=15, lineno=37)
DEBUG 2022-02-08 17:11:33,501 stack ['$phi144.0']
DEBUG 2022-02-08 17:11:33,501 dispatch pc=158, inst=LOAD_METHOD(arg=1, lineno=37)
DEBUG 2022-02-08 17:11:33,501 stack ['$phi144.0', '$kept_edges156.6']
DEBUG 2022-02-08 17:11:33,501 dispatch pc=160, inst=CALL_METHOD(arg=0, lineno=37)
DEBUG 2022-02-08 17:11:33,501 stack ['$phi144.0', '$158load_method.7']
DEBUG 2022-02-08 17:11:33,501 dispatch pc=162, inst=STORE_FAST(arg=16, lineno=37)
DEBUG 2022-02-08 17:11:33,501 stack ['$phi144.0', '$160call_method.8']
DEBUG 2022-02-08 17:11:33,501 dispatch pc=164, inst=LOAD_CONST(arg=4, lineno=39)
DEBUG 2022-02-08 17:11:33,501 stack ['$phi144.0']
DEBUG 2022-02-08 17:11:33,501 dispatch pc=166, inst=STORE_FAST(arg=17, lineno=39)
DEBUG 2022-02-08 17:11:33,501 stack ['$phi144.0', '$const164.9']
DEBUG 2022-02-08 17:11:33,501 dispatch pc=168, inst=LOAD_GLOBAL(arg=6, lineno=40)
DEBUG 2022-02-08 17:11:33,501 stack ['$phi144.0']
DEBUG 2022-02-08 17:11:33,501 dispatch pc=170, inst=LOAD_FAST(arg=8, lineno=40)
DEBUG 2022-02-08 17:11:33,501 stack ['$phi144.0', '$168load_global.10']
DEBUG 2022-02-08 17:11:33,501 dispatch pc=172, inst=LOAD_CONST(arg=2, lineno=40)
DEBUG 2022-02-08 17:11:33,501 stack ['$phi144.0', '$168load_global.10', '$n170.11']
DEBUG 2022-02-08 17:11:33,501 dispatch pc=174, inst=BINARY_FLOOR_DIVIDE(arg=None, lineno=40)
DEBUG 2022-02-08 17:11:33,501 stack ['$phi144.0', '$168load_global.10', '$n170.11', '$const172.12']
DEBUG 2022-02-08 17:11:33,501 dispatch pc=176, inst=CALL_FUNCTION(arg=1, lineno=40)
DEBUG 2022-02-08 17:11:33,501 stack ['$phi144.0', '$168load_global.10', '$174binary_floor_divide.13']
DEBUG 2022-02-08 17:11:33,501 dispatch pc=178, inst=GET_ITER(arg=None, lineno=40)
DEBUG 2022-02-08 17:11:33,501 stack ['$phi144.0', '$176call_function.14']
DEBUG 2022-02-08 17:11:33,501 end state. edges=[Edge(pc=180, stack=('$phi144.0', '$178get_iter.15'), blockstack=(), npush=0)]
DEBUG 2022-02-08 17:11:33,501 pending: deque([State(pc_initial=388 nstack_initial=0), State(pc_initial=436 nstack_initial=0), State(pc_initial=180 nstack_initial=2)])
DEBUG 2022-02-08 17:11:33,501 stack: []
DEBUG 2022-02-08 17:11:33,501 dispatch pc=388, inst=LOAD_FAST(arg=3, lineno=60)
DEBUG 2022-02-08 17:11:33,501 stack []
DEBUG 2022-02-08 17:11:33,501 dispatch pc=390, inst=LOAD_CONST(arg=0, lineno=60)
DEBUG 2022-02-08 17:11:33,501 stack ['$oddloop388.0']
DEBUG 2022-02-08 17:11:33,501 dispatch pc=392, inst=IS_OP(arg=0, lineno=60)
DEBUG 2022-02-08 17:11:33,501 stack ['$oddloop388.0', '$const390.1']
DEBUG 2022-02-08 17:11:33,501 dispatch pc=394, inst=POP_JUMP_IF_FALSE(arg=420, lineno=60)
DEBUG 2022-02-08 17:11:33,501 stack ['$392is_op.2']
DEBUG 2022-02-08 17:11:33,501 end state. edges=[Edge(pc=398, stack=(), blockstack=(), npush=0), Edge(pc=420, stack=(), blockstack=(), npush=0)]
DEBUG 2022-02-08 17:11:33,501 pending: deque([State(pc_initial=436 nstack_initial=0), State(pc_initial=180 nstack_initial=2), State(pc_initial=398 nstack_initial=0), State(pc_initial=420 nstack_initial=0)])
DEBUG 2022-02-08 17:11:33,501 stack: []
DEBUG 2022-02-08 17:11:33,501 dispatch pc=436, inst=LOAD_FAST(arg=13, lineno=64)
DEBUG 2022-02-08 17:11:33,501 stack []
DEBUG 2022-02-08 17:11:33,501 dispatch pc=438, inst=RETURN_VALUE(arg=None, lineno=64)
DEBUG 2022-02-08 17:11:33,501 stack ['$H436.0']
DEBUG 2022-02-08 17:11:33,501 end state. edges=[]
DEBUG 2022-02-08 17:11:33,501 pending: deque([State(pc_initial=180 nstack_initial=2), State(pc_initial=398 nstack_initial=0), State(pc_initial=420 nstack_initial=0)])
DEBUG 2022-02-08 17:11:33,501 stack: ['$phi180.0', '$phi180.1']
DEBUG 2022-02-08 17:11:33,501 dispatch pc=180, inst=FOR_ITER(arg=28, lineno=40)
DEBUG 2022-02-08 17:11:33,501 stack ['$phi180.0', '$phi180.1']
DEBUG 2022-02-08 17:11:33,501 end state. edges=[Edge(pc=210, stack=('$phi180.0',), blockstack=(), npush=0), Edge(pc=182, stack=('$phi180.0', '$phi180.1', '$180for_iter.3'), blockstack=(), npush=0)]
DEBUG 2022-02-08 17:11:33,501 pending: deque([State(pc_initial=398 nstack_initial=0), State(pc_initial=420 nstack_initial=0), State(pc_initial=210 nstack_initial=1), State(pc_initial=182 nstack_initial=3)])
DEBUG 2022-02-08 17:11:33,501 stack: []
DEBUG 2022-02-08 17:11:33,501 dispatch pc=398, inst=LOAD_FAST(arg=13, lineno=61)
DEBUG 2022-02-08 17:11:33,501 stack []
DEBUG 2022-02-08 17:11:33,501 dispatch pc=400, inst=LOAD_CONST(arg=6, lineno=61)
DEBUG 2022-02-08 17:11:33,501 stack ['$H398.0']
DEBUG 2022-02-08 17:11:33,501 dispatch pc=402, inst=LOAD_FAST(arg=9, lineno=61)
DEBUG 2022-02-08 17:11:33,501 stack ['$H398.0', '$const400.1']
DEBUG 2022-02-08 17:11:33,501 dispatch pc=404, inst=LOAD_CONST(arg=2, lineno=61)
DEBUG 2022-02-08 17:11:33,501 stack ['$H398.0', '$const400.1', '$N402.2']
DEBUG 2022-02-08 17:11:33,501 dispatch pc=406, inst=BINARY_FLOOR_DIVIDE(arg=None, lineno=61)
DEBUG 2022-02-08 17:11:33,501 stack ['$H398.0', '$const400.1', '$N402.2', '$const404.3']
DEBUG 2022-02-08 17:11:33,501 dispatch pc=408, inst=LOAD_CONST(arg=3, lineno=61)
DEBUG 2022-02-08 17:11:33,501 stack ['$H398.0', '$const400.1', '$406binary_floor_divide.4']
DEBUG 2022-02-08 17:11:33,501 dispatch pc=410, inst=BINARY_SUBTRACT(arg=None, lineno=61)
DEBUG 2022-02-08 17:11:33,501 stack ['$H398.0', '$const400.1', '$406binary_floor_divide.4', '$const408.5']
DEBUG 2022-02-08 17:11:33,501 dispatch pc=412, inst=BINARY_POWER(arg=None, lineno=61)
DEBUG 2022-02-08 17:11:33,501 stack ['$H398.0', '$const400.1', '$410binary_subtract.6']
DEBUG 2022-02-08 17:11:33,501 dispatch pc=414, inst=BINARY_MULTIPLY(arg=None, lineno=61)
DEBUG 2022-02-08 17:11:33,501 stack ['$H398.0', '$412binary_power.7']
DEBUG 2022-02-08 17:11:33,501 dispatch pc=416, inst=STORE_FAST(arg=13, lineno=61)
DEBUG 2022-02-08 17:11:33,501 stack ['$414binary_multiply.8']
DEBUG 2022-02-08 17:11:33,501 dispatch pc=418, inst=JUMP_FORWARD(arg=16, lineno=61)
DEBUG 2022-02-08 17:11:33,501 stack []
DEBUG 2022-02-08 17:11:33,501 end state. edges=[Edge(pc=436, stack=(), blockstack=(), npush=0)]
DEBUG 2022-02-08 17:11:33,501 pending: deque([State(pc_initial=420 nstack_initial=0), State(pc_initial=210 nstack_initial=1), State(pc_initial=182 nstack_initial=3), State(pc_initial=436 nstack_initial=0)])
DEBUG 2022-02-08 17:11:33,501 stack: []
DEBUG 2022-02-08 17:11:33,501 dispatch pc=420, inst=LOAD_FAST(arg=13, lineno=63)
DEBUG 2022-02-08 17:11:33,501 stack []
DEBUG 2022-02-08 17:11:33,501 dispatch pc=422, inst=LOAD_CONST(arg=6, lineno=63)
DEBUG 2022-02-08 17:11:33,501 stack ['$H420.0']
DEBUG 2022-02-08 17:11:33,501 dispatch pc=424, inst=LOAD_FAST(arg=9, lineno=63)
DEBUG 2022-02-08 17:11:33,501 stack ['$H420.0', '$const422.1']
DEBUG 2022-02-08 17:11:33,501 dispatch pc=426, inst=LOAD_CONST(arg=2, lineno=63)
DEBUG 2022-02-08 17:11:33,501 stack ['$H420.0', '$const422.1', '$N424.2']
DEBUG 2022-02-08 17:11:33,501 dispatch pc=428, inst=BINARY_FLOOR_DIVIDE(arg=None, lineno=63)
DEBUG 2022-02-08 17:11:33,501 stack ['$H420.0', '$const422.1', '$N424.2', '$const426.3']
DEBUG 2022-02-08 17:11:33,501 dispatch pc=430, inst=BINARY_POWER(arg=None, lineno=63)
DEBUG 2022-02-08 17:11:33,501 stack ['$H420.0', '$const422.1', '$428binary_floor_divide.4']
DEBUG 2022-02-08 17:11:33,501 dispatch pc=432, inst=BINARY_MULTIPLY(arg=None, lineno=63)
DEBUG 2022-02-08 17:11:33,501 stack ['$H420.0', '$430binary_power.5']
DEBUG 2022-02-08 17:11:33,501 dispatch pc=434, inst=STORE_FAST(arg=13, lineno=63)
DEBUG 2022-02-08 17:11:33,501 stack ['$432binary_multiply.6']
DEBUG 2022-02-08 17:11:33,501 end state. edges=[Edge(pc=436, stack=(), blockstack=(), npush=0)]
DEBUG 2022-02-08 17:11:33,501 pending: deque([State(pc_initial=210 nstack_initial=1), State(pc_initial=182 nstack_initial=3), State(pc_initial=436 nstack_initial=0), State(pc_initial=436 nstack_initial=0)])
DEBUG 2022-02-08 17:11:33,501 stack: ['$phi210.0']
DEBUG 2022-02-08 17:11:33,501 dispatch pc=210, inst=LOAD_FAST(arg=7, lineno=43)
DEBUG 2022-02-08 17:11:33,501 stack ['$phi210.0']
DEBUG 2022-02-08 17:11:33,501 dispatch pc=212, inst=POP_JUMP_IF_FALSE(arg=226, lineno=43)
DEBUG 2022-02-08 17:11:33,501 stack ['$phi210.0', '$glynn210.1']
DEBUG 2022-02-08 17:11:33,501 end state. edges=[Edge(pc=214, stack=('$phi210.0',), blockstack=(), npush=0), Edge(pc=226, stack=('$phi210.0',), blockstack=(), npush=0)]
DEBUG 2022-02-08 17:11:33,501 pending: deque([State(pc_initial=182 nstack_initial=3), State(pc_initial=436 nstack_initial=0), State(pc_initial=436 nstack_initial=0), State(pc_initial=214 nstack_initial=1), State(pc_initial=226 nstack_initial=1)])
DEBUG 2022-02-08 17:11:33,501 stack: ['$phi182.0', '$phi182.1', '$phi182.2']
DEBUG 2022-02-08 17:11:33,501 dispatch pc=182, inst=STORE_FAST(arg=18, lineno=40)
DEBUG 2022-02-08 17:11:33,501 stack ['$phi182.0', '$phi182.1', '$phi182.2']
DEBUG 2022-02-08 17:11:33,501 dispatch pc=184, inst=LOAD_FAST(arg=17, lineno=41)
DEBUG 2022-02-08 17:11:33,501 stack ['$phi182.0', '$phi182.1']
DEBUG 2022-02-08 17:11:33,501 dispatch pc=186, inst=LOAD_FAST(arg=12, lineno=41)
DEBUG 2022-02-08 17:11:33,501 stack ['$phi182.0', '$phi182.1', '$binom_prod184.3']
DEBUG 2022-02-08 17:11:33,501 dispatch pc=188, inst=LOAD_FAST(arg=2, lineno=41)
DEBUG 2022-02-08 17:11:33,501 stack ['$phi182.0', '$phi182.1', '$binom_prod184.3', '$binoms186.4']
DEBUG 2022-02-08 17:11:33,501 dispatch pc=190, inst=LOAD_FAST(arg=18, lineno=41)
DEBUG 2022-02-08 17:11:33,501 stack ['$phi182.0', '$phi182.1', '$binom_prod184.3', '$binoms186.4', '$edge_reps188.5']
DEBUG 2022-02-08 17:11:33,501 dispatch pc=192, inst=BINARY_SUBSCR(arg=None, lineno=41)
DEBUG 2022-02-08 17:11:33,501 stack ['$phi182.0', '$phi182.1', '$binom_prod184.3', '$binoms186.4', '$edge_reps188.5', '$i190.6']
DEBUG 2022-02-08 17:11:33,501 dispatch pc=194, inst=LOAD_FAST(arg=15, lineno=41)
DEBUG 2022-02-08 17:11:33,501 stack ['$phi182.0', '$phi182.1', '$binom_prod184.3', '$binoms186.4', '$192binary_subscr.7']
DEBUG 2022-02-08 17:11:33,501 dispatch pc=196, inst=LOAD_FAST(arg=18, lineno=41)
DEBUG 2022-02-08 17:11:33,501 stack ['$phi182.0', '$phi182.1', '$binom_prod184.3', '$binoms186.4', '$192binary_subscr.7', '$kept_edges194.8']
DEBUG 2022-02-08 17:11:33,501 dispatch pc=198, inst=BINARY_SUBSCR(arg=None, lineno=41)
DEBUG 2022-02-08 17:11:33,501 stack ['$phi182.0', '$phi182.1', '$binom_prod184.3', '$binoms186.4', '$192binary_subscr.7', '$kept_edges194.8', '$i196.9']
DEBUG 2022-02-08 17:11:33,501 dispatch pc=200, inst=BUILD_TUPLE(arg=2, lineno=41)
DEBUG 2022-02-08 17:11:33,501 stack ['$phi182.0', '$phi182.1', '$binom_prod184.3', '$binoms186.4', '$192binary_subscr.7', '$198binary_subscr.10']
DEBUG 2022-02-08 17:11:33,501 dispatch pc=202, inst=BINARY_SUBSCR(arg=None, lineno=41)
DEBUG 2022-02-08 17:11:33,501 stack ['$phi182.0', '$phi182.1', '$binom_prod184.3', '$binoms186.4', '$200build_tuple.11']
DEBUG 2022-02-08 17:11:33,501 dispatch pc=204, inst=INPLACE_MULTIPLY(arg=None, lineno=41)
DEBUG 2022-02-08 17:11:33,501 stack ['$phi182.0', '$phi182.1', '$binom_prod184.3', '$202binary_subscr.12']
DEBUG 2022-02-08 17:11:33,501 dispatch pc=206, inst=STORE_FAST(arg=17, lineno=41)
DEBUG 2022-02-08 17:11:33,501 stack ['$phi182.0', '$phi182.1', '$204inplace_multiply.13']
DEBUG 2022-02-08 17:11:33,501 dispatch pc=208, inst=JUMP_ABSOLUTE(arg=180, lineno=41)
DEBUG 2022-02-08 17:11:33,501 stack ['$phi182.0', '$phi182.1']
DEBUG 2022-02-08 17:11:33,501 end state. edges=[Edge(pc=180, stack=('$phi182.0', '$phi182.1'), blockstack=(), npush=0)]
DEBUG 2022-02-08 17:11:33,501 pending: deque([State(pc_initial=436 nstack_initial=0), State(pc_initial=436 nstack_initial=0), State(pc_initial=214 nstack_initial=1), State(pc_initial=226 nstack_initial=1), State(pc_initial=180 nstack_initial=2)])
DEBUG 2022-02-08 17:11:33,501 pending: deque([State(pc_initial=436 nstack_initial=0), State(pc_initial=214 nstack_initial=1), State(pc_initial=226 nstack_initial=1), State(pc_initial=180 nstack_initial=2)])
DEBUG 2022-02-08 17:11:33,501 pending: deque([State(pc_initial=214 nstack_initial=1), State(pc_initial=226 nstack_initial=1), State(pc_initial=180 nstack_initial=2)])
DEBUG 2022-02-08 17:11:33,501 stack: ['$phi214.0']
DEBUG 2022-02-08 17:11:33,501 dispatch pc=214, inst=LOAD_CONST(arg=2, lineno=44)
DEBUG 2022-02-08 17:11:33,501 stack ['$phi214.0']
DEBUG 2022-02-08 17:11:33,501 dispatch pc=216, inst=LOAD_FAST(arg=15, lineno=44)
DEBUG 2022-02-08 17:11:33,501 stack ['$phi214.0', '$const214.1']
DEBUG 2022-02-08 17:11:33,501 dispatch pc=218, inst=BINARY_MULTIPLY(arg=None, lineno=44)
DEBUG 2022-02-08 17:11:33,501 stack ['$phi214.0', '$const214.1', '$kept_edges216.2']
DEBUG 2022-02-08 17:11:33,501 dispatch pc=220, inst=LOAD_FAST(arg=2, lineno=44)
DEBUG 2022-02-08 17:11:33,501 stack ['$phi214.0', '$218binary_multiply.3']
DEBUG 2022-02-08 17:11:33,501 dispatch pc=222, inst=BINARY_SUBTRACT(arg=None, lineno=44)
DEBUG 2022-02-08 17:11:33,501 stack ['$phi214.0', '$218binary_multiply.3', '$edge_reps220.4']
DEBUG 2022-02-08 17:11:33,501 dispatch pc=224, inst=STORE_FAST(arg=15, lineno=44)
DEBUG 2022-02-08 17:11:33,501 stack ['$phi214.0', '$222binary_subtract.5']
DEBUG 2022-02-08 17:11:33,501 end state. edges=[Edge(pc=226, stack=('$phi214.0',), blockstack=(), npush=0)]
DEBUG 2022-02-08 17:11:33,501 pending: deque([State(pc_initial=226 nstack_initial=1), State(pc_initial=180 nstack_initial=2), State(pc_initial=226 nstack_initial=1)])
DEBUG 2022-02-08 17:11:33,501 stack: ['$phi226.0']
DEBUG 2022-02-08 17:11:33,501 dispatch pc=226, inst=LOAD_GLOBAL(arg=8, lineno=46)
DEBUG 2022-02-08 17:11:33,501 stack ['$phi226.0']
DEBUG 2022-02-08 17:11:33,501 dispatch pc=228, inst=LOAD_FAST(arg=15, lineno=46)
DEBUG 2022-02-08 17:11:33,501 stack ['$phi226.0', '$226load_global.1']
DEBUG 2022-02-08 17:11:33,501 dispatch pc=230, inst=LOAD_FAST(arg=0, lineno=46)
DEBUG 2022-02-08 17:11:33,501 stack ['$phi226.0', '$226load_global.1', '$kept_edges228.2']
DEBUG 2022-02-08 17:11:33,501 dispatch pc=232, inst=LOAD_FAST(arg=1, lineno=46)
DEBUG 2022-02-08 17:11:33,501 stack ['$phi226.0', '$226load_global.1', '$kept_edges228.2', '$A230.3']
DEBUG 2022-02-08 17:11:33,501 dispatch pc=234, inst=LOAD_FAST(arg=4, lineno=46)
DEBUG 2022-02-08 17:11:33,501 stack ['$phi226.0', '$226load_global.1', '$kept_edges228.2', '$A230.3', '$D232.4']
DEBUG 2022-02-08 17:11:33,501 dispatch pc=236, inst=CALL_FUNCTION(arg=4, lineno=46)
DEBUG 2022-02-08 17:11:33,501 stack ['$phi226.0', '$226load_global.1', '$kept_edges228.2', '$A230.3', '$D232.4', '$oddV234.5']
DEBUG 2022-02-08 17:11:33,501 dispatch pc=238, inst=UNPACK_SEQUENCE(arg=4, lineno=46)
DEBUG 2022-02-08 17:11:33,501 stack ['$phi226.0', '$236call_function.6']
DEBUG 2022-02-08 17:11:33,501 dispatch pc=240, inst=STORE_FAST(arg=19, lineno=46)
DEBUG 2022-02-08 17:11:33,501 stack ['$phi226.0', '$238unpack_sequence.10', '$238unpack_sequence.9', '$238unpack_sequence.8', '$238unpack_sequence.7']
DEBUG 2022-02-08 17:11:33,501 dispatch pc=242, inst=STORE_FAST(arg=20, lineno=46)
DEBUG 2022-02-08 17:11:33,501 stack ['$phi226.0', '$238unpack_sequence.10', '$238unpack_sequence.9', '$238unpack_sequence.8']
DEBUG 2022-02-08 17:11:33,501 dispatch pc=244, inst=STORE_FAST(arg=21, lineno=46)
DEBUG 2022-02-08 17:11:33,501 stack ['$phi226.0', '$238unpack_sequence.10', '$238unpack_sequence.9']
DEBUG 2022-02-08 17:11:33,501 dispatch pc=246, inst=STORE_FAST(arg=22, lineno=46)
DEBUG 2022-02-08 17:11:33,501 stack ['$phi226.0', '$238unpack_sequence.10']
DEBUG 2022-02-08 17:11:33,501 dispatch pc=248, inst=LOAD_GLOBAL(arg=9, lineno=48)
DEBUG 2022-02-08 17:11:33,501 stack ['$phi226.0']
DEBUG 2022-02-08 17:11:33,501 dispatch pc=250, inst=LOAD_FAST(arg=19, lineno=48)
DEBUG 2022-02-08 17:11:33,501 stack ['$phi226.0', '$248load_global.12']
DEBUG 2022-02-08 17:11:33,501 dispatch pc=252, inst=CALL_FUNCTION(arg=1, lineno=48)
DEBUG 2022-02-08 17:11:33,501 stack ['$phi226.0', '$248load_global.12', '$AX_S250.13']
DEBUG 2022-02-08 17:11:33,501 dispatch pc=254, inst=STORE_FAST(arg=23, lineno=48)
DEBUG 2022-02-08 17:11:33,501 stack ['$phi226.0', '$252call_function.14']
DEBUG 2022-02-08 17:11:33,501 dispatch pc=256, inst=LOAD_CONST(arg=5, lineno=50)
DEBUG 2022-02-08 17:11:33,501 stack ['$phi226.0']
DEBUG 2022-02-08 17:11:33,501 dispatch pc=258, inst=LOAD_FAST(arg=9, lineno=50)
DEBUG 2022-02-08 17:11:33,501 stack ['$phi226.0', '$const256.15']
DEBUG 2022-02-08 17:11:33,501 dispatch pc=260, inst=LOAD_CONST(arg=2, lineno=50)
DEBUG 2022-02-08 17:11:33,501 stack ['$phi226.0', '$const256.15', '$N258.16']
DEBUG 2022-02-08 17:11:33,501 dispatch pc=262, inst=BINARY_FLOOR_DIVIDE(arg=None, lineno=50)
DEBUG 2022-02-08 17:11:33,501 stack ['$phi226.0', '$const256.15', '$N258.16', '$const260.17']
DEBUG 2022-02-08 17:11:33,501 dispatch pc=264, inst=LOAD_FAST(arg=16, lineno=50)
DEBUG 2022-02-08 17:11:33,501 stack ['$phi226.0', '$const256.15', '$262binary_floor_divide.18']
DEBUG 2022-02-08 17:11:33,501 dispatch pc=266, inst=BINARY_SUBTRACT(arg=None, lineno=50)
DEBUG 2022-02-08 17:11:33,501 stack ['$phi226.0', '$const256.15', '$262binary_floor_divide.18', '$edge_sum264.19']
DEBUG 2022-02-08 17:11:33,501 dispatch pc=268, inst=BINARY_POWER(arg=None, lineno=50)
DEBUG 2022-02-08 17:11:33,501 stack ['$phi226.0', '$const256.15', '$266binary_subtract.20']
DEBUG 2022-02-08 17:11:33,517 dispatch pc=270, inst=LOAD_FAST(arg=17, lineno=50)
DEBUG 2022-02-08 17:11:33,517 stack ['$phi226.0', '$268binary_power.21']
DEBUG 2022-02-08 17:11:33,517 dispatch pc=272, inst=BINARY_MULTIPLY(arg=None, lineno=50)
DEBUG 2022-02-08 17:11:33,517 stack ['$phi226.0', '$268binary_power.21', '$binom_prod270.22']
DEBUG 2022-02-08 17:11:33,517 dispatch pc=274, inst=STORE_FAST(arg=24, lineno=50)
DEBUG 2022-02-08 17:11:33,517 stack ['$phi226.0', '$272binary_multiply.23']
DEBUG 2022-02-08 17:11:33,517 dispatch pc=276, inst=LOAD_FAST(arg=3, lineno=52)
DEBUG 2022-02-08 17:11:33,517 stack ['$phi226.0']
DEBUG 2022-02-08 17:11:33,517 dispatch pc=278, inst=LOAD_CONST(arg=0, lineno=52)
DEBUG 2022-02-08 17:11:33,517 stack ['$phi226.0', '$oddloop276.24']
DEBUG 2022-02-08 17:11:33,517 dispatch pc=280, inst=IS_OP(arg=1, lineno=52)
DEBUG 2022-02-08 17:11:33,517 stack ['$phi226.0', '$oddloop276.24', '$const278.25']
DEBUG 2022-02-08 17:11:33,517 dispatch pc=282, inst=POP_JUMP_IF_FALSE(arg=320, lineno=52)
DEBUG 2022-02-08 17:11:33,517 stack ['$phi226.0', '$280is_op.26']
DEBUG 2022-02-08 17:11:33,517 end state. edges=[Edge(pc=286, stack=('$phi226.0',), blockstack=(), npush=0), Edge(pc=320, stack=('$phi226.0',), blockstack=(), npush=0)]
DEBUG 2022-02-08 17:11:33,517 pending: deque([State(pc_initial=180 nstack_initial=2), State(pc_initial=226 nstack_initial=1), State(pc_initial=286 nstack_initial=1), State(pc_initial=320 nstack_initial=1)])
DEBUG 2022-02-08 17:11:33,517 pending: deque([State(pc_initial=226 nstack_initial=1), State(pc_initial=286 nstack_initial=1), State(pc_initial=320 nstack_initial=1)])
DEBUG 2022-02-08 17:11:33,517 pending: deque([State(pc_initial=286 nstack_initial=1), State(pc_initial=320 nstack_initial=1)])
DEBUG 2022-02-08 17:11:33,517 stack: ['$phi286.0']
DEBUG 2022-02-08 17:11:33,517 dispatch pc=286, inst=LOAD_FAST(arg=13, lineno=53)
DEBUG 2022-02-08 17:11:33,517 stack ['$phi286.0']
DEBUG 2022-02-08 17:11:33,517 dispatch pc=288, inst=LOAD_FAST(arg=24, lineno=53)
DEBUG 2022-02-08 17:11:33,517 stack ['$phi286.0', '$H286.1']
DEBUG 2022-02-08 17:11:33,517 dispatch pc=290, inst=LOAD_GLOBAL(arg=10, lineno=53)
DEBUG 2022-02-08 17:11:33,517 stack ['$phi286.0', '$H286.1', '$prefac288.2']
DEBUG 2022-02-08 17:11:33,517 dispatch pc=292, inst=LOAD_FAST(arg=23, lineno=53)
DEBUG 2022-02-08 17:11:33,517 stack ['$phi286.0', '$H286.1', '$prefac288.2', '$290load_global.3']
DEBUG 2022-02-08 17:11:33,517 dispatch pc=294, inst=LOAD_FAST(arg=19, lineno=53)
DEBUG 2022-02-08 17:11:33,517 stack ['$phi286.0', '$H286.1', '$prefac288.2', '$290load_global.3', '$E292.4']
DEBUG 2022-02-08 17:11:33,517 dispatch pc=296, inst=LOAD_FAST(arg=20, lineno=53)
DEBUG 2022-02-08 17:11:33,517 stack ['$phi286.0', '$H286.1', '$prefac288.2', '$290load_global.3', '$E292.4', '$AX_S294.5']
DEBUG 2022-02-08 17:11:33,517 dispatch pc=298, inst=LOAD_FAST(arg=21, lineno=53)
DEBUG 2022-02-08 17:11:33,517 stack ['$phi286.0', '$H286.1', '$prefac288.2', '$290load_global.3', '$E292.4', '$AX_S294.5', '$XD_S296.6']
DEBUG 2022-02-08 17:11:33,517 dispatch pc=300, inst=LOAD_FAST(arg=9, lineno=53)
DEBUG 2022-02-08 17:11:33,517 stack ['$phi286.0', '$H286.1', '$prefac288.2', '$290load_global.3', '$E292.4', '$AX_S294.5', '$XD_S296.6', '$D_S298.7']
DEBUG 2022-02-08 17:11:33,517 dispatch pc=302, inst=LOAD_FAST(arg=3, lineno=53)
DEBUG 2022-02-08 17:11:33,517 stack ['$phi286.0', '$H286.1', '$prefac288.2', '$290load_global.3', '$E292.4', '$AX_S294.5', '$XD_S296.6', '$D_S298.7', '$N300.8']
DEBUG 2022-02-08 17:11:33,517 dispatch pc=304, inst=LOAD_FAST(arg=22, lineno=53)
DEBUG 2022-02-08 17:11:33,517 stack ['$phi286.0', '$H286.1', '$prefac288.2', '$290load_global.3', '$E292.4', '$AX_S294.5', '$XD_S296.6', '$D_S298.7', '$N300.8', '$oddloop302.9']
DEBUG 2022-02-08 17:11:33,517 dispatch pc=306, inst=CALL_FUNCTION(arg=7, lineno=53)
DEBUG 2022-02-08 17:11:33,517 stack ['$phi286.0', '$H286.1', '$prefac288.2', '$290load_global.3', '$E292.4', '$AX_S294.5', '$XD_S296.6', '$D_S298.7', '$N300.8', '$oddloop302.9', '$oddVX_S304.10']
DEBUG 2022-02-08 17:11:33,517 dispatch pc=308, inst=LOAD_FAST(arg=9, lineno=53)
DEBUG 2022-02-08 17:11:33,517 stack ['$phi286.0', '$H286.1', '$prefac288.2', '$306call_function.11']
DEBUG 2022-02-08 17:11:33,517 dispatch pc=310, inst=BINARY_SUBSCR(arg=None, lineno=53)
DEBUG 2022-02-08 17:11:33,517 stack ['$phi286.0', '$H286.1', '$prefac288.2', '$306call_function.11', '$N308.12']
DEBUG 2022-02-08 17:11:33,517 dispatch pc=312, inst=BINARY_MULTIPLY(arg=None, lineno=53)
DEBUG 2022-02-08 17:11:33,517 stack ['$phi286.0', '$H286.1', '$prefac288.2', '$310binary_subscr.13']
DEBUG 2022-02-08 17:11:33,517 dispatch pc=314, inst=INPLACE_ADD(arg=None, lineno=53)
DEBUG 2022-02-08 17:11:33,517 stack ['$phi286.0', '$H286.1', '$312binary_multiply.14']
DEBUG 2022-02-08 17:11:33,517 dispatch pc=316, inst=STORE_FAST(arg=13, lineno=53)
DEBUG 2022-02-08 17:11:33,517 stack ['$phi286.0', '$314inplace_add.15']
DEBUG 2022-02-08 17:11:33,517 dispatch pc=318, inst=JUMP_ABSOLUTE(arg=142, lineno=53)
DEBUG 2022-02-08 17:11:33,517 stack ['$phi286.0']
DEBUG 2022-02-08 17:11:33,517 end state. edges=[Edge(pc=142, stack=('$phi286.0',), blockstack=(), npush=0)]
DEBUG 2022-02-08 17:11:33,517 pending: deque([State(pc_initial=320 nstack_initial=1), State(pc_initial=142 nstack_initial=1)])
DEBUG 2022-02-08 17:11:33,517 stack: ['$phi320.0']
DEBUG 2022-02-08 17:11:33,517 dispatch pc=320, inst=LOAD_FAST(arg=7, lineno=55)
DEBUG 2022-02-08 17:11:33,517 stack ['$phi320.0']
DEBUG 2022-02-08 17:11:33,517 dispatch pc=322, inst=POP_JUMP_IF_FALSE(arg=348, lineno=55)
DEBUG 2022-02-08 17:11:33,517 stack ['$phi320.0', '$glynn320.1']
DEBUG 2022-02-08 17:11:33,517 end state. edges=[Edge(pc=326, stack=('$phi320.0',), blockstack=(), npush=0), Edge(pc=348, stack=('$phi320.0',), blockstack=(), npush=0)]
DEBUG 2022-02-08 17:11:33,517 pending: deque([State(pc_initial=142 nstack_initial=1), State(pc_initial=326 nstack_initial=1), State(pc_initial=348 nstack_initial=1)])
DEBUG 2022-02-08 17:11:33,517 pending: deque([State(pc_initial=326 nstack_initial=1), State(pc_initial=348 nstack_initial=1)])
DEBUG 2022-02-08 17:11:33,517 stack: ['$phi326.0']
DEBUG 2022-02-08 17:11:33,517 dispatch pc=326, inst=LOAD_FAST(arg=15, lineno=55)
DEBUG 2022-02-08 17:11:33,517 stack ['$phi326.0']
DEBUG 2022-02-08 17:11:33,517 dispatch pc=328, inst=LOAD_CONST(arg=1, lineno=55)
DEBUG 2022-02-08 17:11:33,517 stack ['$phi326.0', '$kept_edges326.1']
DEBUG 2022-02-08 17:11:33,517 dispatch pc=330, inst=BINARY_SUBSCR(arg=None, lineno=55)
DEBUG 2022-02-08 17:11:33,517 stack ['$phi326.0', '$kept_edges326.1', '$const328.2']
DEBUG 2022-02-08 17:11:33,517 dispatch pc=332, inst=LOAD_CONST(arg=1, lineno=55)
DEBUG 2022-02-08 17:11:33,517 stack ['$phi326.0', '$330binary_subscr.3']
DEBUG 2022-02-08 17:11:33,517 dispatch pc=334, inst=COMPARE_OP(arg=2, lineno=55)
DEBUG 2022-02-08 17:11:33,517 stack ['$phi326.0', '$330binary_subscr.3', '$const332.4']
DEBUG 2022-02-08 17:11:33,517 dispatch pc=336, inst=POP_JUMP_IF_FALSE(arg=348, lineno=55)
DEBUG 2022-02-08 17:11:33,517 stack ['$phi326.0', '$334compare_op.5']
DEBUG 2022-02-08 17:11:33,517 end state. edges=[Edge(pc=340, stack=('$phi326.0',), blockstack=(), npush=0), Edge(pc=348, stack=('$phi326.0',), blockstack=(), npush=0)]
DEBUG 2022-02-08 17:11:33,517 pending: deque([State(pc_initial=348 nstack_initial=1), State(pc_initial=340 nstack_initial=1), State(pc_initial=348 nstack_initial=1)])
DEBUG 2022-02-08 17:11:33,517 stack: ['$phi348.0']
DEBUG 2022-02-08 17:11:33,517 dispatch pc=348, inst=LOAD_FAST(arg=13, lineno=57)
DEBUG 2022-02-08 17:11:33,517 stack ['$phi348.0']
DEBUG 2022-02-08 17:11:33,517 dispatch pc=350, inst=LOAD_FAST(arg=24, lineno=57)
DEBUG 2022-02-08 17:11:33,517 stack ['$phi348.0', '$H348.1']
DEBUG 2022-02-08 17:11:33,517 dispatch pc=352, inst=LOAD_GLOBAL(arg=11, lineno=57)
DEBUG 2022-02-08 17:11:33,517 stack ['$phi348.0', '$H348.1', '$prefac350.2']
DEBUG 2022-02-08 17:11:33,517 dispatch pc=354, inst=LOAD_FAST(arg=23, lineno=57)
DEBUG 2022-02-08 17:11:33,517 stack ['$phi348.0', '$H348.1', '$prefac350.2', '$352load_global.3']
DEBUG 2022-02-08 17:11:33,517 dispatch pc=356, inst=LOAD_FAST(arg=19, lineno=57)
DEBUG 2022-02-08 17:11:33,517 stack ['$phi348.0', '$H348.1', '$prefac350.2', '$352load_global.3', '$E354.4']
DEBUG 2022-02-08 17:11:33,517 dispatch pc=358, inst=LOAD_FAST(arg=20, lineno=57)
DEBUG 2022-02-08 17:11:33,517 stack ['$phi348.0', '$H348.1', '$prefac350.2', '$352load_global.3', '$E354.4', '$AX_S356.5']
DEBUG 2022-02-08 17:11:33,517 dispatch pc=360, inst=LOAD_FAST(arg=21, lineno=57)
DEBUG 2022-02-08 17:11:33,517 stack ['$phi348.0', '$H348.1', '$prefac350.2', '$352load_global.3', '$E354.4', '$AX_S356.5', '$XD_S358.6']
DEBUG 2022-02-08 17:11:33,517 dispatch pc=362, inst=LOAD_FAST(arg=9, lineno=57)
DEBUG 2022-02-08 17:11:33,517 stack ['$phi348.0', '$H348.1', '$prefac350.2', '$352load_global.3', '$E354.4', '$AX_S356.5', '$XD_S358.6', '$D_S360.7']
DEBUG 2022-02-08 17:11:33,517 dispatch pc=364, inst=CALL_FUNCTION(arg=5, lineno=57)
DEBUG 2022-02-08 17:11:33,517 stack ['$phi348.0', '$H348.1', '$prefac350.2', '$352load_global.3', '$E354.4', '$AX_S356.5', '$XD_S358.6', '$D_S360.7', '$N362.8']
DEBUG 2022-02-08 17:11:33,517 dispatch pc=366, inst=LOAD_FAST(arg=9, lineno=57)
DEBUG 2022-02-08 17:11:33,517 stack ['$phi348.0', '$H348.1', '$prefac350.2', '$364call_function.9']
DEBUG 2022-02-08 17:11:33,517 dispatch pc=368, inst=LOAD_CONST(arg=2, lineno=57)
DEBUG 2022-02-08 17:11:33,517 stack ['$phi348.0', '$H348.1', '$prefac350.2', '$364call_function.9', '$N366.10']
DEBUG 2022-02-08 17:11:33,517 dispatch pc=370, inst=BINARY_FLOOR_DIVIDE(arg=None, lineno=57)
DEBUG 2022-02-08 17:11:33,517 stack ['$phi348.0', '$H348.1', '$prefac350.2', '$364call_function.9', '$N366.10', '$const368.11']
DEBUG 2022-02-08 17:11:33,517 dispatch pc=372, inst=BINARY_SUBSCR(arg=None, lineno=57)
DEBUG 2022-02-08 17:11:33,517 stack ['$phi348.0', '$H348.1', '$prefac350.2', '$364call_function.9', '$370binary_floor_divide.12']
DEBUG 2022-02-08 17:11:33,517 dispatch pc=374, inst=BINARY_MULTIPLY(arg=None, lineno=57)
DEBUG 2022-02-08 17:11:33,517 stack ['$phi348.0', '$H348.1', '$prefac350.2', '$372binary_subscr.13']
DEBUG 2022-02-08 17:11:33,517 dispatch pc=376, inst=INPLACE_ADD(arg=None, lineno=57)
DEBUG 2022-02-08 17:11:33,517 stack ['$phi348.0', '$H348.1', '$374binary_multiply.14']
DEBUG 2022-02-08 17:11:33,517 dispatch pc=378, inst=STORE_FAST(arg=13, lineno=57)
DEBUG 2022-02-08 17:11:33,517 stack ['$phi348.0', '$376inplace_add.15']
DEBUG 2022-02-08 17:11:33,517 dispatch pc=380, inst=JUMP_ABSOLUTE(arg=142, lineno=57)
DEBUG 2022-02-08 17:11:33,517 stack ['$phi348.0']
DEBUG 2022-02-08 17:11:33,517 end state. edges=[Edge(pc=142, stack=('$phi348.0',), blockstack=(), npush=0)]
DEBUG 2022-02-08 17:11:33,517 pending: deque([State(pc_initial=340 nstack_initial=1), State(pc_initial=348 nstack_initial=1), State(pc_initial=142 nstack_initial=1)])
DEBUG 2022-02-08 17:11:33,517 stack: ['$phi340.0']
DEBUG 2022-02-08 17:11:33,517 dispatch pc=340, inst=LOAD_FAST(arg=24, lineno=56)
DEBUG 2022-02-08 17:11:33,517 stack ['$phi340.0']
DEBUG 2022-02-08 17:11:33,517 dispatch pc=342, inst=LOAD_CONST(arg=6, lineno=56)
DEBUG 2022-02-08 17:11:33,517 stack ['$phi340.0', '$prefac340.1']
DEBUG 2022-02-08 17:11:33,517 dispatch pc=344, inst=INPLACE_MULTIPLY(arg=None, lineno=56)
DEBUG 2022-02-08 17:11:33,517 stack ['$phi340.0', '$prefac340.1', '$const342.2']
DEBUG 2022-02-08 17:11:33,517 dispatch pc=346, inst=STORE_FAST(arg=24, lineno=56)
DEBUG 2022-02-08 17:11:33,517 stack ['$phi340.0', '$344inplace_multiply.3']
DEBUG 2022-02-08 17:11:33,517 end state. edges=[Edge(pc=348, stack=('$phi340.0',), blockstack=(), npush=0)]
DEBUG 2022-02-08 17:11:33,517 pending: deque([State(pc_initial=348 nstack_initial=1), State(pc_initial=142 nstack_initial=1), State(pc_initial=348 nstack_initial=1)])
DEBUG 2022-02-08 17:11:33,517 pending: deque([State(pc_initial=142 nstack_initial=1), State(pc_initial=348 nstack_initial=1)])
DEBUG 2022-02-08 17:11:33,517 pending: deque([State(pc_initial=348 nstack_initial=1)])
DEBUG 2022-02-08 17:11:33,517 -------------------------Prune PHIs-------------------------
DEBUG 2022-02-08 17:11:33,517 Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=32 nstack_initial=0): set(),
             State(pc_initial=40 nstack_initial=0): set(),
             State(pc_initial=44 nstack_initial=0): set(),
             State(pc_initial=52 nstack_initial=0): set(),
             State(pc_initial=92 nstack_initial=0): set(),
             State(pc_initial=106 nstack_initial=0): set(),
             State(pc_initial=142 nstack_initial=1): {'$phi142.0'},
             State(pc_initial=144 nstack_initial=2): {'$phi144.1'},
             State(pc_initial=180 nstack_initial=2): {'$phi180.1'},
             State(pc_initial=182 nstack_initial=3): {'$phi182.2'},
             State(pc_initial=210 nstack_initial=1): set(),
             State(pc_initial=214 nstack_initial=1): set(),
             State(pc_initial=226 nstack_initial=1): set(),
             State(pc_initial=286 nstack_initial=1): set(),
             State(pc_initial=320 nstack_initial=1): set(),
             State(pc_initial=326 nstack_initial=1): set(),
             State(pc_initial=340 nstack_initial=1): set(),
             State(pc_initial=348 nstack_initial=1): set(),
             State(pc_initial=382 nstack_initial=0): set(),
             State(pc_initial=388 nstack_initial=0): set(),
             State(pc_initial=398 nstack_initial=0): set(),
             State(pc_initial=420 nstack_initial=0): set(),
             State(pc_initial=436 nstack_initial=0): set()})
DEBUG 2022-02-08 17:11:33,517 defmap: {'$phi142.0': State(pc_initial=106 nstack_initial=0),
 '$phi144.1': State(pc_initial=142 nstack_initial=1),
 '$phi180.1': State(pc_initial=144 nstack_initial=2),
 '$phi182.2': State(pc_initial=180 nstack_initial=2)}
DEBUG 2022-02-08 17:11:33,517 phismap: defaultdict(<class 'set'>,
            {'$phi142.0': {('$140get_iter.14',
                            State(pc_initial=106 nstack_initial=0)),
                           ('$phi286.0',
                            State(pc_initial=286 nstack_initial=1)),
                           ('$phi348.0',
                            State(pc_initial=348 nstack_initial=1))},
             '$phi144.0': {('$phi142.0',
                            State(pc_initial=142 nstack_initial=1))},
             '$phi144.1': {('$142for_iter.2',
                            State(pc_initial=142 nstack_initial=1))},
             '$phi180.0': {('$phi144.0',
                            State(pc_initial=144 nstack_initial=2)),
                           ('$phi182.0',
                            State(pc_initial=182 nstack_initial=3))},
             '$phi180.1': {('$178get_iter.15',
                            State(pc_initial=144 nstack_initial=2)),
                           ('$phi182.1',
                            State(pc_initial=182 nstack_initial=3))},
             '$phi182.0': {('$phi180.0',
                            State(pc_initial=180 nstack_initial=2))},
             '$phi182.1': {('$phi180.1',
                            State(pc_initial=180 nstack_initial=2))},
             '$phi182.2': {('$180for_iter.3',
                            State(pc_initial=180 nstack_initial=2))},
             '$phi210.0': {('$phi180.0',
                            State(pc_initial=180 nstack_initial=2))},
             '$phi214.0': {('$phi210.0',
                            State(pc_initial=210 nstack_initial=1))},
             '$phi226.0': {('$phi210.0',
                            State(pc_initial=210 nstack_initial=1)),
                           ('$phi214.0',
                            State(pc_initial=214 nstack_initial=1))},
             '$phi286.0': {('$phi226.0',
                            State(pc_initial=226 nstack_initial=1))},
             '$phi320.0': {('$phi226.0',
                            State(pc_initial=226 nstack_initial=1))},
             '$phi326.0': {('$phi320.0',
                            State(pc_initial=320 nstack_initial=1))},
             '$phi340.0': {('$phi326.0',
                            State(pc_initial=326 nstack_initial=1))},
             '$phi348.0': {('$phi320.0',
                            State(pc_initial=320 nstack_initial=1)),
                           ('$phi326.0',
                            State(pc_initial=326 nstack_initial=1)),
                           ('$phi340.0',
                            State(pc_initial=340 nstack_initial=1))}})
DEBUG 2022-02-08 17:11:33,517 changing phismap: defaultdict(<class 'set'>,
            {'$phi142.0': {('$140get_iter.14',
                            State(pc_initial=106 nstack_initial=0)),
                           ('$phi226.0',
                            State(pc_initial=226 nstack_initial=1)),
                           ('$phi320.0',
                            State(pc_initial=320 nstack_initial=1)),
                           ('$phi326.0',
                            State(pc_initial=326 nstack_initial=1)),
                           ('$phi340.0',
                            State(pc_initial=340 nstack_initial=1))},
             '$phi144.0': {('$140get_iter.14',
                            State(pc_initial=106 nstack_initial=0)),
                           ('$phi226.0',
                            State(pc_initial=226 nstack_initial=1)),
                           ('$phi320.0',
                            State(pc_initial=320 nstack_initial=1)),
                           ('$phi326.0',
                            State(pc_initial=326 nstack_initial=1)),
                           ('$phi340.0',
                            State(pc_initial=340 nstack_initial=1))},
             '$phi144.1': {('$142for_iter.2',
                            State(pc_initial=142 nstack_initial=1))},
             '$phi180.0': {('$140get_iter.14',
                            State(pc_initial=106 nstack_initial=0)),
                           ('$phi180.0',
                            State(pc_initial=180 nstack_initial=2)),
                           ('$phi226.0',
                            State(pc_initial=226 nstack_initial=1)),
                           ('$phi320.0',
                            State(pc_initial=320 nstack_initial=1)),
                           ('$phi326.0',
                            State(pc_initial=326 nstack_initial=1)),
                           ('$phi340.0',
                            State(pc_initial=340 nstack_initial=1))},
             '$phi180.1': {('$178get_iter.15',
                            State(pc_initial=144 nstack_initial=2)),
                           ('$phi180.1',
                            State(pc_initial=180 nstack_initial=2))},
             '$phi182.0': {('$140get_iter.14',
                            State(pc_initial=106 nstack_initial=0)),
                           ('$phi226.0',
                            State(pc_initial=226 nstack_initial=1)),
                           ('$phi320.0',
                            State(pc_initial=320 nstack_initial=1)),
                           ('$phi326.0',
                            State(pc_initial=326 nstack_initial=1)),
                           ('$phi340.0',
                            State(pc_initial=340 nstack_initial=1))},
             '$phi182.1': {('$178get_iter.15',
                            State(pc_initial=144 nstack_initial=2))},
             '$phi182.2': {('$180for_iter.3',
                            State(pc_initial=180 nstack_initial=2))},
             '$phi210.0': {('$140get_iter.14',
                            State(pc_initial=106 nstack_initial=0)),
                           ('$phi226.0',
                            State(pc_initial=226 nstack_initial=1)),
                           ('$phi320.0',
                            State(pc_initial=320 nstack_initial=1)),
                           ('$phi326.0',
                            State(pc_initial=326 nstack_initial=1)),
                           ('$phi340.0',
                            State(pc_initial=340 nstack_initial=1))},
             '$phi214.0': {('$140get_iter.14',
                            State(pc_initial=106 nstack_initial=0)),
                           ('$phi226.0',
                            State(pc_initial=226 nstack_initial=1)),
                           ('$phi320.0',
                            State(pc_initial=320 nstack_initial=1)),
                           ('$phi326.0',
                            State(pc_initial=326 nstack_initial=1)),
                           ('$phi340.0',
                            State(pc_initial=340 nstack_initial=1))},
             '$phi226.0': {('$140get_iter.14',
                            State(pc_initial=106 nstack_initial=0)),
                           ('$phi226.0',
                            State(pc_initial=226 nstack_initial=1)),
                           ('$phi320.0',
                            State(pc_initial=320 nstack_initial=1)),
                           ('$phi326.0',
                            State(pc_initial=326 nstack_initial=1)),
                           ('$phi340.0',
                            State(pc_initial=340 nstack_initial=1))},
             '$phi286.0': {('$140get_iter.14',
                            State(pc_initial=106 nstack_initial=0)),
                           ('$phi320.0',
                            State(pc_initial=320 nstack_initial=1)),
                           ('$phi326.0',
                            State(pc_initial=326 nstack_initial=1)),
                           ('$phi340.0',
                            State(pc_initial=340 nstack_initial=1))},
             '$phi320.0': {('$140get_iter.14',
                            State(pc_initial=106 nstack_initial=0)),
                           ('$phi320.0',
                            State(pc_initial=320 nstack_initial=1)),
                           ('$phi326.0',
                            State(pc_initial=326 nstack_initial=1)),
                           ('$phi340.0',
                            State(pc_initial=340 nstack_initial=1))},
             '$phi326.0': {('$140get_iter.14',
                            State(pc_initial=106 nstack_initial=0)),
                           ('$phi326.0',
                            State(pc_initial=326 nstack_initial=1)),
                           ('$phi340.0',
                            State(pc_initial=340 nstack_initial=1))},
             '$phi340.0': {('$140get_iter.14',
                            State(pc_initial=106 nstack_initial=0)),
                           ('$phi340.0',
                            State(pc_initial=340 nstack_initial=1))},
             '$phi348.0': {('$140get_iter.14',
                            State(pc_initial=106 nstack_initial=0))}})
DEBUG 2022-02-08 17:11:33,532 changing phismap: defaultdict(<class 'set'>,
            {'$phi142.0': {('$140get_iter.14',
                            State(pc_initial=106 nstack_initial=0))},
             '$phi144.0': {('$140get_iter.14',
                            State(pc_initial=106 nstack_initial=0))},
             '$phi144.1': {('$142for_iter.2',
                            State(pc_initial=142 nstack_initial=1))},
             '$phi180.0': {('$140get_iter.14',
                            State(pc_initial=106 nstack_initial=0))},
             '$phi180.1': {('$178get_iter.15',
                            State(pc_initial=144 nstack_initial=2))},
             '$phi182.0': {('$140get_iter.14',
                            State(pc_initial=106 nstack_initial=0))},
             '$phi182.1': {('$178get_iter.15',
                            State(pc_initial=144 nstack_initial=2))},
             '$phi182.2': {('$180for_iter.3',
                            State(pc_initial=180 nstack_initial=2))},
             '$phi210.0': {('$140get_iter.14',
                            State(pc_initial=106 nstack_initial=0))},
             '$phi214.0': {('$140get_iter.14',
                            State(pc_initial=106 nstack_initial=0))},
             '$phi226.0': {('$140get_iter.14',
                            State(pc_initial=106 nstack_initial=0))},
             '$phi286.0': {('$140get_iter.14',
                            State(pc_initial=106 nstack_initial=0))},
             '$phi320.0': {('$140get_iter.14',
                            State(pc_initial=106 nstack_initial=0))},
             '$phi326.0': {('$140get_iter.14',
                            State(pc_initial=106 nstack_initial=0))},
             '$phi340.0': {('$140get_iter.14',
                            State(pc_initial=106 nstack_initial=0))},
             '$phi348.0': {('$140get_iter.14',
                            State(pc_initial=106 nstack_initial=0))}})
DEBUG 2022-02-08 17:11:33,532 changing phismap: defaultdict(<class 'set'>,
            {'$phi142.0': {('$140get_iter.14',
                            State(pc_initial=106 nstack_initial=0))},
             '$phi144.0': {('$140get_iter.14',
                            State(pc_initial=106 nstack_initial=0))},
             '$phi144.1': {('$142for_iter.2',
                            State(pc_initial=142 nstack_initial=1))},
             '$phi180.0': {('$140get_iter.14',
                            State(pc_initial=106 nstack_initial=0))},
             '$phi180.1': {('$178get_iter.15',
                            State(pc_initial=144 nstack_initial=2))},
             '$phi182.0': {('$140get_iter.14',
                            State(pc_initial=106 nstack_initial=0))},
             '$phi182.1': {('$178get_iter.15',
                            State(pc_initial=144 nstack_initial=2))},
             '$phi182.2': {('$180for_iter.3',
                            State(pc_initial=180 nstack_initial=2))},
             '$phi210.0': {('$140get_iter.14',
                            State(pc_initial=106 nstack_initial=0))},
             '$phi214.0': {('$140get_iter.14',
                            State(pc_initial=106 nstack_initial=0))},
             '$phi226.0': {('$140get_iter.14',
                            State(pc_initial=106 nstack_initial=0))},
             '$phi286.0': {('$140get_iter.14',
                            State(pc_initial=106 nstack_initial=0))},
             '$phi320.0': {('$140get_iter.14',
                            State(pc_initial=106 nstack_initial=0))},
             '$phi326.0': {('$140get_iter.14',
                            State(pc_initial=106 nstack_initial=0))},
             '$phi340.0': {('$140get_iter.14',
                            State(pc_initial=106 nstack_initial=0))},
             '$phi348.0': {('$140get_iter.14',
                            State(pc_initial=106 nstack_initial=0))}})
DEBUG 2022-02-08 17:11:33,532 keep phismap: {'$phi142.0': {('$140get_iter.14', State(pc_initial=106 nstack_initial=0))},
 '$phi144.1': {('$142for_iter.2', State(pc_initial=142 nstack_initial=1))},
 '$phi180.1': {('$178get_iter.15', State(pc_initial=144 nstack_initial=2))},
 '$phi182.2': {('$180for_iter.3', State(pc_initial=180 nstack_initial=2))}}
DEBUG 2022-02-08 17:11:33,532 new_out: defaultdict(<class 'dict'>,
            {State(pc_initial=106 nstack_initial=0): {'$phi142.0': '$140get_iter.14'},
             State(pc_initial=142 nstack_initial=1): {'$phi144.1': '$142for_iter.2'},
             State(pc_initial=144 nstack_initial=2): {'$phi180.1': '$178get_iter.15'},
             State(pc_initial=180 nstack_initial=2): {'$phi182.2': '$180for_iter.3'}})
DEBUG 2022-02-08 17:11:33,532 ----------------------DONE Prune PHIs-----------------------
DEBUG 2022-02-08 17:11:33,532 block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$A2.0'}), (4, {'item': '$A2.0', 'res': '$4load_attr.1'}), (6, {'res': '$const6.2'}), (8, {'index': '$const6.2', 'target': '$4load_attr.1', 'res': '$8binary_subscr.3'}), (10, {'value': '$8binary_subscr.3'}), (12, {'res': '$const12.4'}), (14, {'res': '$edge_reps14.5'}), (16, {'item': '$edge_reps14.5', 'res': '$16load_method.6'}), (18, {'func': '$16load_method.6', 'args': [], 'res': '$18call_method.7'}), (20, {'lhs': '$const12.4', 'rhs': '$18call_method.7', 'res': '$20binary_multiply.8'}), (22, {'value': '$20binary_multiply.8'}), (24, {'res': '$oddloop24.9'}), (26, {'res': '$const26.10'}), (28, {'lhs': '$oddloop24.9', 'rhs': '$const26.10', 'res': '$28is_op.11'}), (30, {'pred': '$28is_op.11'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={32: (), 40: ()})
DEBUG 2022-02-08 17:11:33,532 block_infos State(pc_initial=32 nstack_initial=0):
AdaptBlockInfo(insts=((32, {'res': '$N32.0'}), (34, {'res': '$const34.1'}), (36, {'lhs': '$N32.0', 'rhs': '$const34.1', 'res': '$36inplace_add.2'}), (38, {'value': '$36inplace_add.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={40: ()})
DEBUG 2022-02-08 17:11:33,532 block_infos State(pc_initial=40 nstack_initial=0):
AdaptBlockInfo(insts=((40, {'res': '$glynn40.0'}), (42, {'pred': '$glynn40.0'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={44: (), 92: ()})
DEBUG 2022-02-08 17:11:33,532 block_infos State(pc_initial=44 nstack_initial=0):
AdaptBlockInfo(insts=((44, {'res': '$oddloop44.0'}), (46, {'res': '$const46.1'}), (48, {'lhs': '$oddloop44.0', 'rhs': '$const46.1', 'res': '$48is_op.2'}), (50, {'pred': '$48is_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={52: (), 92: ()})
DEBUG 2022-02-08 17:11:33,532 block_infos State(pc_initial=52 nstack_initial=0):
AdaptBlockInfo(insts=((52, {'res': '$edge_reps52.0'}), (54, {'res': '$const54.1'}), (56, {'index': '$const54.1', 'target': '$edge_reps52.0', 'res': '$56binary_subscr.2'}), (58, {'res': '$const58.3'}), (60, {'lhs': '$56binary_subscr.2', 'rhs': '$const58.3', 'res': '$60binary_add.4'}), (62, {'res': '$const62.5'}), (64, {'lhs': '$60binary_add.4', 'rhs': '$const62.5', 'res': '$64binary_floor_divide.6'}), (66, {'res': '$66load_global.7'}), (68, {'item': '$66load_global.7', 'res': '$68load_method.8'}), (70, {'res': '$edge_reps70.9'}), (72, {'res': '$const72.10'}), (74, {'res': '$const74.11'}), (76, {'start': '$const72.10', 'stop': '$const74.11', 'step': None, 'res': '$76build_slice.13', 'slicevar': '$76build_slice.12'}), (78, {'index': '$76build_slice.13', 'target': '$edge_reps70.9', 'res': '$78binary_subscr.14'}), (80, {'res': '$const80.15'}), (82, {'lhs': '$78binary_subscr.14', 'rhs': '$const80.15', 'res': '$82binary_add.16'}), (84, {'func': '$68load_method.8', 'args': ['$82binary_add.16'], 'res': '$84call_method.17'}), (86, {'lhs': '$64binary_floor_divide.6', 'rhs': '$84call_method.17', 'res': '$86binary_multiply.18'}), (88, {'value': '$86binary_multiply.18'}), (90, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={106: ()})
DEBUG 2022-02-08 17:11:33,532 block_infos State(pc_initial=92 nstack_initial=0):
AdaptBlockInfo(insts=((92, {'res': '$92load_global.0'}), (94, {'item': '$92load_global.0', 'res': '$94load_method.1'}), (96, {'res': '$edge_reps96.2'}), (98, {'res': '$const98.3'}), (100, {'lhs': '$edge_reps96.2', 'rhs': '$const98.3', 'res': '$100binary_add.4'}), (102, {'func': '$94load_method.1', 'args': ['$100binary_add.4'], 'res': '$102call_method.5'}), (104, {'value': '$102call_method.5'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={106: ()})
DEBUG 2022-02-08 17:11:33,532 block_infos State(pc_initial=106 nstack_initial=0):
AdaptBlockInfo(insts=((106, {'res': '$edge_reps106.0'}), (108, {'item': '$edge_reps106.0', 'res': '$108load_method.1'}), (110, {'func': '$108load_method.1', 'args': [], 'res': '$110call_method.2'}), (112, {'res': '$const112.3'}), (114, {'lhs': '$110call_method.2', 'rhs': '$const112.3', 'res': '$114binary_add.4'}), (116, {'value': '$114binary_add.4'}), (118, {'res': '$118load_global.5'}), (120, {'res': '$max_binom120.6'}), (122, {'func': '$118load_global.5', 'args': ['$max_binom120.6'], 'res': '$122call_function.7'}), (124, {'value': '$122call_function.7'}), (126, {'res': '$const126.8'}), (128, {'value': '$const126.8'}), (130, {'res': '$130load_global.9'}), (132, {'res': '$rank132.10'}), (134, {'res': '$steps134.11'}), (136, {'res': '$size136.12'}), (138, {'func': '$130load_global.9', 'args': ['$rank132.10', '$steps134.11', '$size136.12'], 'res': '$138call_function.13'}), (140, {'value': '$138call_function.13', 'res': '$140get_iter.14'})), outgoing_phis={'$phi142.0': '$140get_iter.14'}, blockstack=(), active_try_block=None, outgoing_edgepushed={142: ('$140get_iter.14',)})
DEBUG 2022-02-08 17:11:33,532 block_infos State(pc_initial=142 nstack_initial=1):
AdaptBlockInfo(insts=((142, {'iterator': '$phi142.0', 'pair': '$142for_iter.1', 'indval': '$142for_iter.2', 'pred': '$142for_iter.3'}),), outgoing_phis={'$phi144.1': '$142for_iter.2'}, blockstack=(), active_try_block=None, outgoing_edgepushed={382: (), 144: ('$phi142.0', '$142for_iter.2')})
DEBUG 2022-02-08 17:11:33,532 block_infos State(pc_initial=144 nstack_initial=2):
AdaptBlockInfo(insts=((144, {'value': '$phi144.1'}), (146, {'res': '$146load_global.2'}), (148, {'res': '$j148.3'}), (150, {'res': '$edge_reps150.4'}), (152, {'func': '$146load_global.2', 'args': ['$j148.3', '$edge_reps150.4'], 'res': '$152call_function.5'}), (154, {'value': '$152call_function.5'}), (156, {'res': '$kept_edges156.6'}), (158, {'item': '$kept_edges156.6', 'res': '$158load_method.7'}), (160, {'func': '$158load_method.7', 'args': [], 'res': '$160call_method.8'}), (162, {'value': '$160call_method.8'}), (164, {'res': '$const164.9'}), (166, {'value': '$const164.9'}), (168, {'res': '$168load_global.10'}), (170, {'res': '$n170.11'}), (172, {'res': '$const172.12'}), (174, {'lhs': '$n170.11', 'rhs': '$const172.12', 'res': '$174binary_floor_divide.13'}), (176, {'func': '$168load_global.10', 'args': ['$174binary_floor_divide.13'], 'res': '$176call_function.14'}), (178, {'value': '$176call_function.14', 'res': '$178get_iter.15'})), outgoing_phis={'$phi180.1': '$178get_iter.15'}, blockstack=(), active_try_block=None, outgoing_edgepushed={180: ('$phi144.0', '$178get_iter.15')})
DEBUG 2022-02-08 17:11:33,532 block_infos State(pc_initial=180 nstack_initial=2):
AdaptBlockInfo(insts=((180, {'iterator': '$phi180.1', 'pair': '$180for_iter.2', 'indval': '$180for_iter.3', 'pred': '$180for_iter.4'}),), outgoing_phis={'$phi182.2': '$180for_iter.3'}, blockstack=(), active_try_block=None, outgoing_edgepushed={210: ('$phi180.0',), 182: ('$phi180.0', '$phi180.1', '$180for_iter.3')})
DEBUG 2022-02-08 17:11:33,532 block_infos State(pc_initial=182 nstack_initial=3):
AdaptBlockInfo(insts=((182, {'value': '$phi182.2'}), (184, {'res': '$binom_prod184.3'}), (186, {'res': '$binoms186.4'}), (188, {'res': '$edge_reps188.5'}), (190, {'res': '$i190.6'}), (192, {'index': '$i190.6', 'target': '$edge_reps188.5', 'res': '$192binary_subscr.7'}), (194, {'res': '$kept_edges194.8'}), (196, {'res': '$i196.9'}), (198, {'index': '$i196.9', 'target': '$kept_edges194.8', 'res': '$198binary_subscr.10'}), (200, {'items': ['$192binary_subscr.7', '$198binary_subscr.10'], 'res': '$200build_tuple.11'}), (202, {'index': '$200build_tuple.11', 'target': '$binoms186.4', 'res': '$202binary_subscr.12'}), (204, {'lhs': '$binom_prod184.3', 'rhs': '$202binary_subscr.12', 'res': '$204inplace_multiply.13'}), (206, {'value': '$204inplace_multiply.13'}), (208, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={180: ('$phi182.0', '$phi182.1')})
DEBUG 2022-02-08 17:11:33,532 block_infos State(pc_initial=210 nstack_initial=1):
AdaptBlockInfo(insts=((210, {'res': '$glynn210.1'}), (212, {'pred': '$glynn210.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={214: ('$phi210.0',), 226: ('$phi210.0',)})
DEBUG 2022-02-08 17:11:33,532 block_infos State(pc_initial=214 nstack_initial=1):
AdaptBlockInfo(insts=((214, {'res': '$const214.1'}), (216, {'res': '$kept_edges216.2'}), (218, {'lhs': '$const214.1', 'rhs': '$kept_edges216.2', 'res': '$218binary_multiply.3'}), (220, {'res': '$edge_reps220.4'}), (222, {'lhs': '$218binary_multiply.3', 'rhs': '$edge_reps220.4', 'res': '$222binary_subtract.5'}), (224, {'value': '$222binary_subtract.5'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={226: ('$phi214.0',)})
DEBUG 2022-02-08 17:11:33,532 block_infos State(pc_initial=226 nstack_initial=1):
AdaptBlockInfo(insts=((226, {'res': '$226load_global.1'}), (228, {'res': '$kept_edges228.2'}), (230, {'res': '$A230.3'}), (232, {'res': '$D232.4'}), (234, {'res': '$oddV234.5'}), (236, {'func': '$226load_global.1', 'args': ['$kept_edges228.2', '$A230.3', '$D232.4', '$oddV234.5'], 'res': '$236call_function.6'}), (238, {'iterable': '$236call_function.6', 'stores': ['$238unpack_sequence.7', '$238unpack_sequence.8', '$238unpack_sequence.9', '$238unpack_sequence.10'], 'tupleobj': '$238unpack_sequence.11'}), (240, {'value': '$238unpack_sequence.7'}), (242, {'value': '$238unpack_sequence.8'}), (244, {'value': '$238unpack_sequence.9'}), (246, {'value': '$238unpack_sequence.10'}), (248, {'res': '$248load_global.12'}), (250, {'res': '$AX_S250.13'}), (252, {'func': '$248load_global.12', 'args': ['$AX_S250.13'], 'res': '$252call_function.14'}), (254, {'value': '$252call_function.14'}), (256, {'res': '$const256.15'}), (258, {'res': '$N258.16'}), (260, {'res': '$const260.17'}), (262, {'lhs': '$N258.16', 'rhs': '$const260.17', 'res': '$262binary_floor_divide.18'}), (264, {'res': '$edge_sum264.19'}), (266, {'lhs': '$262binary_floor_divide.18', 'rhs': '$edge_sum264.19', 'res': '$266binary_subtract.20'}), (268, {'lhs': '$const256.15', 'rhs': '$266binary_subtract.20', 'res': '$268binary_power.21'}), (270, {'res': '$binom_prod270.22'}), (272, {'lhs': '$268binary_power.21', 'rhs': '$binom_prod270.22', 'res': '$272binary_multiply.23'}), (274, {'value': '$272binary_multiply.23'}), (276, {'res': '$oddloop276.24'}), (278, {'res': '$const278.25'}), (280, {'lhs': '$oddloop276.24', 'rhs': '$const278.25', 'res': '$280is_op.26'}), (282, {'pred': '$280is_op.26'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={286: ('$phi226.0',), 320: ('$phi226.0',)})
DEBUG 2022-02-08 17:11:33,532 block_infos State(pc_initial=286 nstack_initial=1):
AdaptBlockInfo(insts=((286, {'res': '$H286.1'}), (288, {'res': '$prefac288.2'}), (290, {'res': '$290load_global.3'}), (292, {'res': '$E292.4'}), (294, {'res': '$AX_S294.5'}), (296, {'res': '$XD_S296.6'}), (298, {'res': '$D_S298.7'}), (300, {'res': '$N300.8'}), (302, {'res': '$oddloop302.9'}), (304, {'res': '$oddVX_S304.10'}), (306, {'func': '$290load_global.3', 'args': ['$E292.4', '$AX_S294.5', '$XD_S296.6', '$D_S298.7', '$N300.8', '$oddloop302.9', '$oddVX_S304.10'], 'res': '$306call_function.11'}), (308, {'res': '$N308.12'}), (310, {'index': '$N308.12', 'target': '$306call_function.11', 'res': '$310binary_subscr.13'}), (312, {'lhs': '$prefac288.2', 'rhs': '$310binary_subscr.13', 'res': '$312binary_multiply.14'}), (314, {'lhs': '$H286.1', 'rhs': '$312binary_multiply.14', 'res': '$314inplace_add.15'}), (316, {'value': '$314inplace_add.15'}), (318, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={142: ('$phi286.0',)})
DEBUG 2022-02-08 17:11:33,532 block_infos State(pc_initial=320 nstack_initial=1):
AdaptBlockInfo(insts=((320, {'res': '$glynn320.1'}), (322, {'pred': '$glynn320.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={326: ('$phi320.0',), 348: ('$phi320.0',)})
DEBUG 2022-02-08 17:11:33,532 block_infos State(pc_initial=326 nstack_initial=1):
AdaptBlockInfo(insts=((326, {'res': '$kept_edges326.1'}), (328, {'res': '$const328.2'}), (330, {'index': '$const328.2', 'target': '$kept_edges326.1', 'res': '$330binary_subscr.3'}), (332, {'res': '$const332.4'}), (334, {'lhs': '$330binary_subscr.3', 'rhs': '$const332.4', 'res': '$334compare_op.5'}), (336, {'pred': '$334compare_op.5'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={340: ('$phi326.0',), 348: ('$phi326.0',)})
DEBUG 2022-02-08 17:11:33,532 block_infos State(pc_initial=340 nstack_initial=1):
AdaptBlockInfo(insts=((340, {'res': '$prefac340.1'}), (342, {'res': '$const342.2'}), (344, {'lhs': '$prefac340.1', 'rhs': '$const342.2', 'res': '$344inplace_multiply.3'}), (346, {'value': '$344inplace_multiply.3'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={348: ('$phi340.0',)})
DEBUG 2022-02-08 17:11:33,532 block_infos State(pc_initial=348 nstack_initial=1):
AdaptBlockInfo(insts=((348, {'res': '$H348.1'}), (350, {'res': '$prefac350.2'}), (352, {'res': '$352load_global.3'}), (354, {'res': '$E354.4'}), (356, {'res': '$AX_S356.5'}), (358, {'res': '$XD_S358.6'}), (360, {'res': '$D_S360.7'}), (362, {'res': '$N362.8'}), (364, {'func': '$352load_global.3', 'args': ['$E354.4', '$AX_S356.5', '$XD_S358.6', '$D_S360.7', '$N362.8'], 'res': '$364call_function.9'}), (366, {'res': '$N366.10'}), (368, {'res': '$const368.11'}), (370, {'lhs': '$N366.10', 'rhs': '$const368.11', 'res': '$370binary_floor_divide.12'}), (372, {'index': '$370binary_floor_divide.12', 'target': '$364call_function.9', 'res': '$372binary_subscr.13'}), (374, {'lhs': '$prefac350.2', 'rhs': '$372binary_subscr.13', 'res': '$374binary_multiply.14'}), (376, {'lhs': '$H348.1', 'rhs': '$374binary_multiply.14', 'res': '$376inplace_add.15'}), (378, {'value': '$376inplace_add.15'}), (380, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={142: ('$phi348.0',)})
DEBUG 2022-02-08 17:11:33,532 block_infos State(pc_initial=382 nstack_initial=0):
AdaptBlockInfo(insts=((382, {'res': '$glynn382.0'}), (384, {'pred': '$glynn382.0'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={388: (), 436: ()})
DEBUG 2022-02-08 17:11:33,532 block_infos State(pc_initial=388 nstack_initial=0):
AdaptBlockInfo(insts=((388, {'res': '$oddloop388.0'}), (390, {'res': '$const390.1'}), (392, {'lhs': '$oddloop388.0', 'rhs': '$const390.1', 'res': '$392is_op.2'}), (394, {'pred': '$392is_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={398: (), 420: ()})
DEBUG 2022-02-08 17:11:33,532 block_infos State(pc_initial=398 nstack_initial=0):
AdaptBlockInfo(insts=((398, {'res': '$H398.0'}), (400, {'res': '$const400.1'}), (402, {'res': '$N402.2'}), (404, {'res': '$const404.3'}), (406, {'lhs': '$N402.2', 'rhs': '$const404.3', 'res': '$406binary_floor_divide.4'}), (408, {'res': '$const408.5'}), (410, {'lhs': '$406binary_floor_divide.4', 'rhs': '$const408.5', 'res': '$410binary_subtract.6'}), (412, {'lhs': '$const400.1', 'rhs': '$410binary_subtract.6', 'res': '$412binary_power.7'}), (414, {'lhs': '$H398.0', 'rhs': '$412binary_power.7', 'res': '$414binary_multiply.8'}), (416, {'value': '$414binary_multiply.8'}), (418, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={436: ()})
DEBUG 2022-02-08 17:11:33,532 block_infos State(pc_initial=420 nstack_initial=0):
AdaptBlockInfo(insts=((420, {'res': '$H420.0'}), (422, {'res': '$const422.1'}), (424, {'res': '$N424.2'}), (426, {'res': '$const426.3'}), (428, {'lhs': '$N424.2', 'rhs': '$const426.3', 'res': '$428binary_floor_divide.4'}), (430, {'lhs': '$const422.1', 'rhs': '$428binary_floor_divide.4', 'res': '$430binary_power.5'}), (432, {'lhs': '$H420.0', 'rhs': '$430binary_power.5', 'res': '$432binary_multiply.6'}), (434, {'value': '$432binary_multiply.6'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={436: ()})
DEBUG 2022-02-08 17:11:33,532 block_infos State(pc_initial=436 nstack_initial=0):
AdaptBlockInfo(insts=((436, {'res': '$H436.0'}), (438, {'retval': '$H436.0', 'castval': '$438return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG 2022-02-08 17:11:33,532 label 0:
    A = arg(0, name=A)                       ['A']
    D = arg(1, name=D)                       ['D']
    edge_reps = arg(2, name=edge_reps)       ['edge_reps']
    oddloop = arg(3, name=oddloop)           ['oddloop']
    oddV = arg(4, name=oddV)                 ['oddV']
    rank = arg(5, name=rank)                 ['rank']
    size = arg(6, name=size)                 ['size']
    glynn = arg(7, name=glynn)               ['glynn']
    $4load_attr.1 = getattr(value=A, attr=shape) ['$4load_attr.1', 'A']
    $const6.2 = const(int, 0)                ['$const6.2']
    n = getitem(value=$4load_attr.1, index=$const6.2, fn=<built-in function getitem>) ['$4load_attr.1', '$const6.2', 'n']
    $const12.4 = const(int, 2)               ['$const12.4']
    $16load_method.6 = getattr(value=edge_reps, attr=sum) ['$16load_method.6', 'edge_reps']
    $18call_method.7 = call $16load_method.6(func=$16load_method.6, args=[], kws=(), vararg=None, target=None) ['$16load_method.6', '$18call_method.7']
    N = $const12.4 * $18call_method.7        ['$18call_method.7', '$const12.4', 'N']
    $const26.10 = const(NoneType, None)      ['$const26.10']
    $28is_op.11 = oddloop is not $const26.10 ['$28is_op.11', '$const26.10', 'oddloop']
    bool30 = global(bool: <class 'bool'>)    ['bool30']
    $30pred = call bool30($28is_op.11, func=bool30, args=(Var($28is_op.11, loop_hafnian.py:22),), kws=(), vararg=None, target=None) ['$28is_op.11', '$30pred', 'bool30']
    branch $30pred, 32, 40                   ['$30pred']
label 32:
    $const34.1 = const(int, 1)               ['$const34.1']
    $36inplace_add.2 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=N, rhs=$const34.1, static_lhs=Undefined, static_rhs=Undefined) ['$36inplace_add.2', '$const34.1', 'N']
    N = $36inplace_add.2                     ['$36inplace_add.2', 'N']
    jump 40                                  []
label 40:
    bool42 = global(bool: <class 'bool'>)    ['bool42']
    $42pred = call bool42(glynn, func=bool42, args=(Var(glynn, loop_hafnian.py:20),), kws=(), vararg=None, target=None) ['$42pred', 'bool42', 'glynn']
    branch $42pred, 44, 92                   ['$42pred']
label 44:
    $const46.1 = const(NoneType, None)       ['$const46.1']
    $48is_op.2 = oddloop is $const46.1       ['$48is_op.2', '$const46.1', 'oddloop']
    bool50 = global(bool: <class 'bool'>)    ['bool50']
    $50pred = call bool50($48is_op.2, func=bool50, args=(Var($48is_op.2, loop_hafnian.py:24),), kws=(), vararg=None, target=None) ['$48is_op.2', '$50pred', 'bool50']
    branch $50pred, 52, 92                   ['$50pred']
label 52:
    $const54.1 = const(int, 0)               ['$const54.1']
    $56binary_subscr.2 = getitem(value=edge_reps, index=$const54.1, fn=<built-in function getitem>) ['$56binary_subscr.2', '$const54.1', 'edge_reps']
    $const58.3 = const(int, 2)               ['$const58.3']
    $60binary_add.4 = $56binary_subscr.2 + $const58.3 ['$56binary_subscr.2', '$60binary_add.4', '$const58.3']
    $const62.5 = const(int, 2)               ['$const62.5']
    $64binary_floor_divide.6 = $60binary_add.4 // $const62.5 ['$60binary_add.4', '$64binary_floor_divide.6', '$const62.5']
    $66load_global.7 = global(np: <module 'numpy' from 'C:\\Users\\zl4821\\Anaconda3\\envs\\GBS\\lib\\site-packages\\numpy\\__init__.py'>) ['$66load_global.7']
    $68load_method.8 = getattr(value=$66load_global.7, attr=prod) ['$66load_global.7', '$68load_method.8']
    $const72.10 = const(int, 1)              ['$const72.10']
    $const74.11 = const(NoneType, None)      ['$const74.11']
    $76build_slice.12 = global(slice: <class 'slice'>) ['$76build_slice.12']
    $76build_slice.13 = call $76build_slice.12($const72.10, $const74.11, func=$76build_slice.12, args=(Var($const72.10, loop_hafnian.py:25), Var($const74.11, loop_hafnian.py:25)), kws=(), vararg=None, target=None) ['$76build_slice.12', '$76build_slice.13', '$const72.10', '$const74.11']
    $78binary_subscr.14 = getitem(value=edge_reps, index=$76build_slice.13, fn=<built-in function getitem>) ['$76build_slice.13', '$78binary_subscr.14', 'edge_reps']
    $const80.15 = const(int, 1)              ['$const80.15']
    $82binary_add.16 = $78binary_subscr.14 + $const80.15 ['$78binary_subscr.14', '$82binary_add.16', '$const80.15']
    $84call_method.17 = call $68load_method.8($82binary_add.16, func=$68load_method.8, args=[Var($82binary_add.16, loop_hafnian.py:25)], kws=(), vararg=None, target=None) ['$68load_method.8', '$82binary_add.16', '$84call_method.17']
    steps = $64binary_floor_divide.6 * $84call_method.17 ['$64binary_floor_divide.6', '$84call_method.17', 'steps']
    jump 106                                 []
label 92:
    $92load_global.0 = global(np: <module 'numpy' from 'C:\\Users\\zl4821\\Anaconda3\\envs\\GBS\\lib\\site-packages\\numpy\\__init__.py'>) ['$92load_global.0']
    $94load_method.1 = getattr(value=$92load_global.0, attr=prod) ['$92load_global.0', '$94load_method.1']
    $const98.3 = const(int, 1)               ['$const98.3']
    $100binary_add.4 = edge_reps + $const98.3 ['$100binary_add.4', '$const98.3', 'edge_reps']
    steps = call $94load_method.1($100binary_add.4, func=$94load_method.1, args=[Var($100binary_add.4, loop_hafnian.py:27)], kws=(), vararg=None, target=None) ['$100binary_add.4', '$94load_method.1', 'steps']
    jump 106                                 []
label 106:
    $108load_method.1 = getattr(value=edge_reps, attr=max) ['$108load_method.1', 'edge_reps']
    $110call_method.2 = call $108load_method.1(func=$108load_method.1, args=[], kws=(), vararg=None, target=None) ['$108load_method.1', '$110call_method.2']
    $const112.3 = const(int, 1)              ['$const112.3']
    max_binom = $110call_method.2 + $const112.3 ['$110call_method.2', '$const112.3', 'max_binom']
    $118load_global.5 = global(precompute_binoms: CPUDispatcher(<function precompute_binoms at 0x000001E9ECB30160>)) ['$118load_global.5']
    binoms = call $118load_global.5(max_binom, func=$118load_global.5, args=[Var(max_binom, loop_hafnian.py:29)], kws=(), vararg=None, target=None) ['$118load_global.5', 'binoms', 'max_binom']
    H = const(int, 0)                        ['H']
    $130load_global.9 = global(range: <class 'range'>) ['$130load_global.9']
    $138call_function.13 = call $130load_global.9(rank, steps, size, func=$130load_global.9, args=[Var(rank, loop_hafnian.py:20), Var(steps, loop_hafnian.py:25), Var(size, loop_hafnian.py:20)], kws=(), vararg=None, target=None) ['$130load_global.9', '$138call_function.13', 'rank', 'size', 'steps']
    $140get_iter.14 = getiter(value=$138call_function.13) ['$138call_function.13', '$140get_iter.14']
    $phi142.0 = $140get_iter.14              ['$140get_iter.14', '$phi142.0']
    jump 142                                 []
label 142:
    $142for_iter.1 = iternext(value=$phi142.0) ['$142for_iter.1', '$phi142.0']
    $142for_iter.2 = pair_first(value=$142for_iter.1) ['$142for_iter.1', '$142for_iter.2']
    $142for_iter.3 = pair_second(value=$142for_iter.1) ['$142for_iter.1', '$142for_iter.3']
    $phi144.1 = $142for_iter.2               ['$142for_iter.2', '$phi144.1']
    branch $142for_iter.3, 144, 382          ['$142for_iter.3']
label 144:
    j = $phi144.1                            ['$phi144.1', 'j']
    $146load_global.2 = global(find_kept_edges: CPUDispatcher(<function find_kept_edges at 0x000001E9ECB305E0>)) ['$146load_global.2']
    kept_edges = call $146load_global.2(j, edge_reps, func=$146load_global.2, args=[Var(j, loop_hafnian.py:34), Var(edge_reps, loop_hafnian.py:20)], kws=(), vararg=None, target=None) ['$146load_global.2', 'edge_reps', 'j', 'kept_edges']
    $158load_method.7 = getattr(value=kept_edges, attr=sum) ['$158load_method.7', 'kept_edges']
    edge_sum = call $158load_method.7(func=$158load_method.7, args=[], kws=(), vararg=None, target=None) ['$158load_method.7', 'edge_sum']
    binom_prod = const(float, 1.0)           ['binom_prod']
    $168load_global.10 = global(range: <class 'range'>) ['$168load_global.10']
    $const172.12 = const(int, 2)             ['$const172.12']
    $174binary_floor_divide.13 = n // $const172.12 ['$174binary_floor_divide.13', '$const172.12', 'n']
    $176call_function.14 = call $168load_global.10($174binary_floor_divide.13, func=$168load_global.10, args=[Var($174binary_floor_divide.13, loop_hafnian.py:40)], kws=(), vararg=None, target=None) ['$168load_global.10', '$174binary_floor_divide.13', '$176call_function.14']
    $178get_iter.15 = getiter(value=$176call_function.14) ['$176call_function.14', '$178get_iter.15']
    $phi180.1 = $178get_iter.15              ['$178get_iter.15', '$phi180.1']
    jump 180                                 []
label 180:
    $180for_iter.2 = iternext(value=$phi180.1) ['$180for_iter.2', '$phi180.1']
    $180for_iter.3 = pair_first(value=$180for_iter.2) ['$180for_iter.2', '$180for_iter.3']
    $180for_iter.4 = pair_second(value=$180for_iter.2) ['$180for_iter.2', '$180for_iter.4']
    $phi182.2 = $180for_iter.3               ['$180for_iter.3', '$phi182.2']
    branch $180for_iter.4, 182, 210          ['$180for_iter.4']
label 182:
    i = $phi182.2                            ['$phi182.2', 'i']
    $192binary_subscr.7 = getitem(value=edge_reps, index=i, fn=<built-in function getitem>) ['$192binary_subscr.7', 'edge_reps', 'i']
    $198binary_subscr.10 = getitem(value=kept_edges, index=i, fn=<built-in function getitem>) ['$198binary_subscr.10', 'i', 'kept_edges']
    $200build_tuple.11 = build_tuple(items=[Var($192binary_subscr.7, loop_hafnian.py:41), Var($198binary_subscr.10, loop_hafnian.py:41)]) ['$192binary_subscr.7', '$198binary_subscr.10', '$200build_tuple.11']
    $202binary_subscr.12 = getitem(value=binoms, index=$200build_tuple.11, fn=<built-in function getitem>) ['$200build_tuple.11', '$202binary_subscr.12', 'binoms']
    $204inplace_multiply.13 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=binom_prod, rhs=$202binary_subscr.12, static_lhs=Undefined, static_rhs=Undefined) ['$202binary_subscr.12', '$204inplace_multiply.13', 'binom_prod']
    binom_prod = $204inplace_multiply.13     ['$204inplace_multiply.13', 'binom_prod']
    jump 180                                 []
label 210:
    bool212 = global(bool: <class 'bool'>)   ['bool212']
    $212pred = call bool212(glynn, func=bool212, args=(Var(glynn, loop_hafnian.py:20),), kws=(), vararg=None, target=None) ['$212pred', 'bool212', 'glynn']
    branch $212pred, 214, 226                ['$212pred']
label 214:
    $const214.1 = const(int, 2)              ['$const214.1']
    $218binary_multiply.3 = $const214.1 * kept_edges ['$218binary_multiply.3', '$const214.1', 'kept_edges']
    kept_edges = $218binary_multiply.3 - edge_reps ['$218binary_multiply.3', 'edge_reps', 'kept_edges']
    jump 226                                 []
label 226:
    $226load_global.1 = global(get_submatrices: CPUDispatcher(<function get_submatrices at 0x000001E9ECB30AF0>)) ['$226load_global.1']
    $236call_function.6 = call $226load_global.1(kept_edges, A, D, oddV, func=$226load_global.1, args=[Var(kept_edges, loop_hafnian.py:36), Var(A, loop_hafnian.py:20), Var(D, loop_hafnian.py:20), Var(oddV, loop_hafnian.py:20)], kws=(), vararg=None, target=None) ['$226load_global.1', '$236call_function.6', 'A', 'D', 'kept_edges', 'oddV']
    $238unpack_sequence.11 = exhaust_iter(value=$236call_function.6, count=4) ['$236call_function.6', '$238unpack_sequence.11']
    $238unpack_sequence.7 = static_getitem(value=$238unpack_sequence.11, index=0, index_var=None, fn=<built-in function getitem>) ['$238unpack_sequence.11', '$238unpack_sequence.7']
    $238unpack_sequence.8 = static_getitem(value=$238unpack_sequence.11, index=1, index_var=None, fn=<built-in function getitem>) ['$238unpack_sequence.11', '$238unpack_sequence.8']
    $238unpack_sequence.9 = static_getitem(value=$238unpack_sequence.11, index=2, index_var=None, fn=<built-in function getitem>) ['$238unpack_sequence.11', '$238unpack_sequence.9']
    $238unpack_sequence.10 = static_getitem(value=$238unpack_sequence.11, index=3, index_var=None, fn=<built-in function getitem>) ['$238unpack_sequence.10', '$238unpack_sequence.11']
    AX_S = $238unpack_sequence.7             ['$238unpack_sequence.7', 'AX_S']
    XD_S = $238unpack_sequence.8             ['$238unpack_sequence.8', 'XD_S']
    D_S = $238unpack_sequence.9              ['$238unpack_sequence.9', 'D_S']
    oddVX_S = $238unpack_sequence.10         ['$238unpack_sequence.10', 'oddVX_S']
    $248load_global.12 = global(eigvals: CPUDispatcher(<function eigvals at 0x000001E9ECB4E040>)) ['$248load_global.12']
    E = call $248load_global.12(AX_S, func=$248load_global.12, args=[Var(AX_S, loop_hafnian.py:46)], kws=(), vararg=None, target=None) ['$248load_global.12', 'AX_S', 'E']
    $const256.15 = const(float, -1.0)        ['$const256.15']
    $const260.17 = const(int, 2)             ['$const260.17']
    $262binary_floor_divide.18 = N // $const260.17 ['$262binary_floor_divide.18', '$const260.17', 'N']
    $266binary_subtract.20 = $262binary_floor_divide.18 - edge_sum ['$262binary_floor_divide.18', '$266binary_subtract.20', 'edge_sum']
    $268binary_power.21 = $const256.15 ** $266binary_subtract.20 ['$266binary_subtract.20', '$268binary_power.21', '$const256.15']
    prefac = $268binary_power.21 * binom_prod ['$268binary_power.21', 'binom_prod', 'prefac']
    $const278.25 = const(NoneType, None)     ['$const278.25']
    $280is_op.26 = oddloop is not $const278.25 ['$280is_op.26', '$const278.25', 'oddloop']
    bool282 = global(bool: <class 'bool'>)   ['bool282']
    $282pred = call bool282($280is_op.26, func=bool282, args=(Var($280is_op.26, loop_hafnian.py:52),), kws=(), vararg=None, target=None) ['$280is_op.26', '$282pred', 'bool282']
    branch $282pred, 286, 320                ['$282pred']
label 286:
    $290load_global.3 = global(f_loop_odd: CPUDispatcher(<function f_loop_odd at 0x000001E9ECB30940>)) ['$290load_global.3']
    $306call_function.11 = call $290load_global.3(E, AX_S, XD_S, D_S, N, oddloop, oddVX_S, func=$290load_global.3, args=[Var(E, loop_hafnian.py:48), Var(AX_S, loop_hafnian.py:46), Var(XD_S, loop_hafnian.py:46), Var(D_S, loop_hafnian.py:46), Var(N, loop_hafnian.py:21), Var(oddloop, loop_hafnian.py:20), Var(oddVX_S, loop_hafnian.py:46)], kws=(), vararg=None, target=None) ['$290load_global.3', '$306call_function.11', 'AX_S', 'D_S', 'E', 'N', 'XD_S', 'oddVX_S', 'oddloop']
    $310binary_subscr.13 = getitem(value=$306call_function.11, index=N, fn=<built-in function getitem>) ['$306call_function.11', '$310binary_subscr.13', 'N']
    $312binary_multiply.14 = prefac * $310binary_subscr.13 ['$310binary_subscr.13', '$312binary_multiply.14', 'prefac']
    $314inplace_add.15 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=H, rhs=$312binary_multiply.14, static_lhs=Undefined, static_rhs=Undefined) ['$312binary_multiply.14', '$314inplace_add.15', 'H']
    H = $314inplace_add.15                   ['$314inplace_add.15', 'H']
    jump 142                                 []
label 320:
    bool322 = global(bool: <class 'bool'>)   ['bool322']
    $322pred = call bool322(glynn, func=bool322, args=(Var(glynn, loop_hafnian.py:20),), kws=(), vararg=None, target=None) ['$322pred', 'bool322', 'glynn']
    branch $322pred, 326, 348                ['$322pred']
label 326:
    $const328.2 = const(int, 0)              ['$const328.2']
    $330binary_subscr.3 = getitem(value=kept_edges, index=$const328.2, fn=<built-in function getitem>) ['$330binary_subscr.3', '$const328.2', 'kept_edges']
    $const332.4 = const(int, 0)              ['$const332.4']
    $334compare_op.5 = $330binary_subscr.3 == $const332.4 ['$330binary_subscr.3', '$334compare_op.5', '$const332.4']
    bool336 = global(bool: <class 'bool'>)   ['bool336']
    $336pred = call bool336($334compare_op.5, func=bool336, args=(Var($334compare_op.5, loop_hafnian.py:55),), kws=(), vararg=None, target=None) ['$334compare_op.5', '$336pred', 'bool336']
    branch $336pred, 340, 348                ['$336pred']
label 340:
    $const342.2 = const(float, 0.5)          ['$const342.2']
    $344inplace_multiply.3 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=prefac, rhs=$const342.2, static_lhs=Undefined, static_rhs=Undefined) ['$344inplace_multiply.3', '$const342.2', 'prefac']
    prefac = $344inplace_multiply.3          ['$344inplace_multiply.3', 'prefac']
    jump 348                                 []
label 348:
    $352load_global.3 = global(f_loop: CPUDispatcher(<function f_loop at 0x000001E9ECB30790>)) ['$352load_global.3']
    $364call_function.9 = call $352load_global.3(E, AX_S, XD_S, D_S, N, func=$352load_global.3, args=[Var(E, loop_hafnian.py:48), Var(AX_S, loop_hafnian.py:46), Var(XD_S, loop_hafnian.py:46), Var(D_S, loop_hafnian.py:46), Var(N, loop_hafnian.py:21)], kws=(), vararg=None, target=None) ['$352load_global.3', '$364call_function.9', 'AX_S', 'D_S', 'E', 'N', 'XD_S']
    $const368.11 = const(int, 2)             ['$const368.11']
    $370binary_floor_divide.12 = N // $const368.11 ['$370binary_floor_divide.12', '$const368.11', 'N']
    $372binary_subscr.13 = getitem(value=$364call_function.9, index=$370binary_floor_divide.12, fn=<built-in function getitem>) ['$364call_function.9', '$370binary_floor_divide.12', '$372binary_subscr.13']
    $374binary_multiply.14 = prefac * $372binary_subscr.13 ['$372binary_subscr.13', '$374binary_multiply.14', 'prefac']
    $376inplace_add.15 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=H, rhs=$374binary_multiply.14, static_lhs=Undefined, static_rhs=Undefined) ['$374binary_multiply.14', '$376inplace_add.15', 'H']
    H = $376inplace_add.15                   ['$376inplace_add.15', 'H']
    jump 142                                 []
label 382:
    bool384 = global(bool: <class 'bool'>)   ['bool384']
    $384pred = call bool384(glynn, func=bool384, args=(Var(glynn, loop_hafnian.py:20),), kws=(), vararg=None, target=None) ['$384pred', 'bool384', 'glynn']
    branch $384pred, 388, 436                ['$384pred']
label 388:
    $const390.1 = const(NoneType, None)      ['$const390.1']
    $392is_op.2 = oddloop is $const390.1     ['$392is_op.2', '$const390.1', 'oddloop']
    bool394 = global(bool: <class 'bool'>)   ['bool394']
    $394pred = call bool394($392is_op.2, func=bool394, args=(Var($392is_op.2, loop_hafnian.py:60),), kws=(), vararg=None, target=None) ['$392is_op.2', '$394pred', 'bool394']
    branch $394pred, 398, 420                ['$394pred']
label 398:
    $const400.1 = const(float, 0.5)          ['$const400.1']
    $const404.3 = const(int, 2)              ['$const404.3']
    $406binary_floor_divide.4 = N // $const404.3 ['$406binary_floor_divide.4', '$const404.3', 'N']
    $const408.5 = const(int, 1)              ['$const408.5']
    $410binary_subtract.6 = $406binary_floor_divide.4 - $const408.5 ['$406binary_floor_divide.4', '$410binary_subtract.6', '$const408.5']
    $412binary_power.7 = $const400.1 ** $410binary_subtract.6 ['$410binary_subtract.6', '$412binary_power.7', '$const400.1']
    $414binary_multiply.8 = H * $412binary_power.7 ['$412binary_power.7', '$414binary_multiply.8', 'H']
    H = $414binary_multiply.8                ['$414binary_multiply.8', 'H']
    jump 436                                 []
label 420:
    $const422.1 = const(float, 0.5)          ['$const422.1']
    $const426.3 = const(int, 2)              ['$const426.3']
    $428binary_floor_divide.4 = N // $const426.3 ['$428binary_floor_divide.4', '$const426.3', 'N']
    $430binary_power.5 = $const422.1 ** $428binary_floor_divide.4 ['$428binary_floor_divide.4', '$430binary_power.5', '$const422.1']
    $432binary_multiply.6 = H * $430binary_power.5 ['$430binary_power.5', '$432binary_multiply.6', 'H']
    H = $432binary_multiply.6                ['$432binary_multiply.6', 'H']
    jump 436                                 []
label 436:
    $438return_value.1 = cast(value=H)       ['$438return_value.1', 'H']
    return $438return_value.1                ['$438return_value.1']

DEBUG 2022-02-08 17:11:33,570 ==== SSA block analysis pass on 0
DEBUG 2022-02-08 17:11:33,570 Running <numba.core.ssa._GatherDefsHandler object at 0x000001E9F64F0CA0>
DEBUG 2022-02-08 17:11:33,570 on stmt: A = arg(0, name=A)
DEBUG 2022-02-08 17:11:33,570 on stmt: D = arg(1, name=D)
DEBUG 2022-02-08 17:11:33,570 on stmt: edge_reps = arg(2, name=edge_reps)
DEBUG 2022-02-08 17:11:33,570 on stmt: oddloop = arg(3, name=oddloop)
DEBUG 2022-02-08 17:11:33,570 on stmt: oddV = arg(4, name=oddV)
DEBUG 2022-02-08 17:11:33,570 on stmt: rank = arg(5, name=rank)
DEBUG 2022-02-08 17:11:33,570 on stmt: size = arg(6, name=size)
DEBUG 2022-02-08 17:11:33,570 on stmt: glynn = arg(7, name=glynn)
DEBUG 2022-02-08 17:11:33,570 on stmt: $4load_attr.1 = getattr(value=A, attr=shape)
DEBUG 2022-02-08 17:11:33,570 on stmt: $const6.2 = const(int, 0)
DEBUG 2022-02-08 17:11:33,570 on stmt: n = static_getitem(value=$4load_attr.1, index=0, index_var=$const6.2, fn=<built-in function getitem>)
DEBUG 2022-02-08 17:11:33,570 on stmt: $const12.4 = const(int, 2)
DEBUG 2022-02-08 17:11:33,570 on stmt: $16load_method.6 = getattr(value=edge_reps, attr=sum)
DEBUG 2022-02-08 17:11:33,570 on stmt: $18call_method.7 = call $16load_method.6(func=$16load_method.6, args=[], kws=(), vararg=None, target=None)
DEBUG 2022-02-08 17:11:33,570 on stmt: N = $const12.4 * $18call_method.7
DEBUG 2022-02-08 17:11:33,570 on stmt: $const26.10 = const(NoneType, None)
DEBUG 2022-02-08 17:11:33,570 on stmt: $28is_op.11 = const(int, 0)
DEBUG 2022-02-08 17:11:33,570 on stmt: bool30 = global(bool: <class 'bool'>)
DEBUG 2022-02-08 17:11:33,570 on stmt: $30pred = call bool30($28is_op.11, func=bool30, args=(Var($28is_op.11, loop_hafnian.py:22),), kws=(), vararg=None, target=None)
DEBUG 2022-02-08 17:11:33,570 on stmt: jump 40
DEBUG 2022-02-08 17:11:33,570 ==== SSA block analysis pass on 40
DEBUG 2022-02-08 17:11:33,570 Running <numba.core.ssa._GatherDefsHandler object at 0x000001E9F64F0CA0>
DEBUG 2022-02-08 17:11:33,570 on stmt: bool42 = global(bool: <class 'bool'>)
DEBUG 2022-02-08 17:11:33,570 on stmt: $42pred = call bool42(glynn, func=bool42, args=(Var(glynn, loop_hafnian.py:20),), kws=(), vararg=None, target=None)
DEBUG 2022-02-08 17:11:33,570 on stmt: branch $42pred, 44, 92
DEBUG 2022-02-08 17:11:33,570 ==== SSA block analysis pass on 44
DEBUG 2022-02-08 17:11:33,570 Running <numba.core.ssa._GatherDefsHandler object at 0x000001E9F64F0CA0>
DEBUG 2022-02-08 17:11:33,570 on stmt: $const46.1 = const(NoneType, None)
DEBUG 2022-02-08 17:11:33,570 on stmt: $48is_op.2 = const(int, 1)
DEBUG 2022-02-08 17:11:33,570 on stmt: bool50 = global(bool: <class 'bool'>)
DEBUG 2022-02-08 17:11:33,570 on stmt: $50pred = call bool50($48is_op.2, func=bool50, args=(Var($48is_op.2, loop_hafnian.py:24),), kws=(), vararg=None, target=None)
DEBUG 2022-02-08 17:11:33,570 on stmt: jump 52
DEBUG 2022-02-08 17:11:33,570 ==== SSA block analysis pass on 52
DEBUG 2022-02-08 17:11:33,570 Running <numba.core.ssa._GatherDefsHandler object at 0x000001E9F64F0CA0>
DEBUG 2022-02-08 17:11:33,570 on stmt: $const54.1 = const(int, 0)
DEBUG 2022-02-08 17:11:33,570 on stmt: $56binary_subscr.2 = static_getitem(value=edge_reps, index=0, index_var=$const54.1, fn=<built-in function getitem>)
DEBUG 2022-02-08 17:11:33,570 on stmt: $const58.3 = const(int, 2)
DEBUG 2022-02-08 17:11:33,570 on stmt: $60binary_add.4 = $56binary_subscr.2 + $const58.3
DEBUG 2022-02-08 17:11:33,570 on stmt: $const62.5 = const(int, 2)
DEBUG 2022-02-08 17:11:33,570 on stmt: $64binary_floor_divide.6 = $60binary_add.4 // $const62.5
DEBUG 2022-02-08 17:11:33,570 on stmt: $66load_global.7 = global(np: <module 'numpy' from 'C:\\Users\\zl4821\\Anaconda3\\envs\\GBS\\lib\\site-packages\\numpy\\__init__.py'>)
DEBUG 2022-02-08 17:11:33,570 on stmt: $68load_method.8 = getattr(value=$66load_global.7, attr=prod)
DEBUG 2022-02-08 17:11:33,570 on stmt: $const72.10 = const(int, 1)
DEBUG 2022-02-08 17:11:33,570 on stmt: $const74.11 = const(NoneType, None)
DEBUG 2022-02-08 17:11:33,570 on stmt: $76build_slice.12 = global(slice: <class 'slice'>)
DEBUG 2022-02-08 17:11:33,570 on stmt: $76build_slice.13 = call $76build_slice.12($const72.10, $const74.11, func=$76build_slice.12, args=(Var($const72.10, loop_hafnian.py:25), Var($const74.11, loop_hafnian.py:25)), kws=(), vararg=None, target=None)
DEBUG 2022-02-08 17:11:33,570 on stmt: $78binary_subscr.14 = static_getitem(value=edge_reps, index=slice(1, None, None), index_var=$76build_slice.13, fn=<built-in function getitem>)
DEBUG 2022-02-08 17:11:33,570 on stmt: $const80.15 = const(int, 1)
DEBUG 2022-02-08 17:11:33,570 on stmt: $82binary_add.16 = $78binary_subscr.14 + $const80.15
DEBUG 2022-02-08 17:11:33,570 on stmt: $84call_method.17 = call $68load_method.8($82binary_add.16, func=$68load_method.8, args=[Var($82binary_add.16, loop_hafnian.py:25)], kws=(), vararg=None, target=None)
DEBUG 2022-02-08 17:11:33,570 on stmt: steps = $64binary_floor_divide.6 * $84call_method.17
DEBUG 2022-02-08 17:11:33,570 on stmt: jump 106
DEBUG 2022-02-08 17:11:33,570 ==== SSA block analysis pass on 92
DEBUG 2022-02-08 17:11:33,570 Running <numba.core.ssa._GatherDefsHandler object at 0x000001E9F64F0CA0>
DEBUG 2022-02-08 17:11:33,570 on stmt: $92load_global.0 = global(np: <module 'numpy' from 'C:\\Users\\zl4821\\Anaconda3\\envs\\GBS\\lib\\site-packages\\numpy\\__init__.py'>)
DEBUG 2022-02-08 17:11:33,570 on stmt: $94load_method.1 = getattr(value=$92load_global.0, attr=prod)
DEBUG 2022-02-08 17:11:33,570 on stmt: $const98.3 = const(int, 1)
DEBUG 2022-02-08 17:11:33,570 on stmt: $100binary_add.4 = edge_reps + $const98.3
DEBUG 2022-02-08 17:11:33,570 on stmt: steps = call $94load_method.1($100binary_add.4, func=$94load_method.1, args=[Var($100binary_add.4, loop_hafnian.py:27)], kws=(), vararg=None, target=None)
DEBUG 2022-02-08 17:11:33,570 on stmt: jump 106
DEBUG 2022-02-08 17:11:33,570 ==== SSA block analysis pass on 106
DEBUG 2022-02-08 17:11:33,570 Running <numba.core.ssa._GatherDefsHandler object at 0x000001E9F64F0CA0>
DEBUG 2022-02-08 17:11:33,570 on stmt: $108load_method.1 = getattr(value=edge_reps, attr=max)
DEBUG 2022-02-08 17:11:33,570 on stmt: $110call_method.2 = call $108load_method.1(func=$108load_method.1, args=[], kws=(), vararg=None, target=None)
DEBUG 2022-02-08 17:11:33,570 on stmt: $const112.3 = const(int, 1)
DEBUG 2022-02-08 17:11:33,570 on stmt: max_binom = $110call_method.2 + $const112.3
DEBUG 2022-02-08 17:11:33,570 on stmt: $118load_global.5 = global(precompute_binoms: CPUDispatcher(<function precompute_binoms at 0x000001E9ECB30160>))
DEBUG 2022-02-08 17:11:33,570 on stmt: binoms = call $118load_global.5(max_binom, func=$118load_global.5, args=[Var(max_binom, loop_hafnian.py:29)], kws=(), vararg=None, target=None)
DEBUG 2022-02-08 17:11:33,570 on stmt: H = const(int, 0)
DEBUG 2022-02-08 17:11:33,570 on stmt: $130load_global.9 = global(range: <class 'range'>)
DEBUG 2022-02-08 17:11:33,570 on stmt: $138call_function.13 = call $130load_global.9(rank, steps, size, func=$130load_global.9, args=[Var(rank, loop_hafnian.py:20), Var(steps, loop_hafnian.py:25), Var(size, loop_hafnian.py:20)], kws=(), vararg=None, target=None)
DEBUG 2022-02-08 17:11:33,570 on stmt: $140get_iter.14 = getiter(value=$138call_function.13)
DEBUG 2022-02-08 17:11:33,570 on stmt: $phi142.0 = $140get_iter.14
DEBUG 2022-02-08 17:11:33,570 on stmt: jump 142
DEBUG 2022-02-08 17:11:33,570 ==== SSA block analysis pass on 142
DEBUG 2022-02-08 17:11:33,570 Running <numba.core.ssa._GatherDefsHandler object at 0x000001E9F64F0CA0>
DEBUG 2022-02-08 17:11:33,570 on stmt: $142for_iter.1 = iternext(value=$phi142.0)
DEBUG 2022-02-08 17:11:33,570 on stmt: $142for_iter.2 = pair_first(value=$142for_iter.1)
DEBUG 2022-02-08 17:11:33,570 on stmt: $142for_iter.3 = pair_second(value=$142for_iter.1)
DEBUG 2022-02-08 17:11:33,570 on stmt: $phi144.1 = $142for_iter.2
DEBUG 2022-02-08 17:11:33,570 on stmt: branch $142for_iter.3, 144, 382
DEBUG 2022-02-08 17:11:33,570 ==== SSA block analysis pass on 144
DEBUG 2022-02-08 17:11:33,570 Running <numba.core.ssa._GatherDefsHandler object at 0x000001E9F64F0CA0>
DEBUG 2022-02-08 17:11:33,570 on stmt: j = $phi144.1
DEBUG 2022-02-08 17:11:33,570 on stmt: $146load_global.2 = global(find_kept_edges: CPUDispatcher(<function find_kept_edges at 0x000001E9ECB305E0>))
DEBUG 2022-02-08 17:11:33,570 on stmt: kept_edges = call $146load_global.2(j, edge_reps, func=$146load_global.2, args=[Var(j, loop_hafnian.py:34), Var(edge_reps, loop_hafnian.py:20)], kws=(), vararg=None, target=None)
DEBUG 2022-02-08 17:11:33,570 on stmt: $158load_method.7 = getattr(value=kept_edges, attr=sum)
DEBUG 2022-02-08 17:11:33,570 on stmt: edge_sum = call $158load_method.7(func=$158load_method.7, args=[], kws=(), vararg=None, target=None)
DEBUG 2022-02-08 17:11:33,570 on stmt: binom_prod = const(float, 1.0)
DEBUG 2022-02-08 17:11:33,570 on stmt: $168load_global.10 = global(range: <class 'range'>)
DEBUG 2022-02-08 17:11:33,570 on stmt: $const172.12 = const(int, 2)
DEBUG 2022-02-08 17:11:33,570 on stmt: $174binary_floor_divide.13 = n // $const172.12
DEBUG 2022-02-08 17:11:33,570 on stmt: $176call_function.14 = call $168load_global.10($174binary_floor_divide.13, func=$168load_global.10, args=[Var($174binary_floor_divide.13, loop_hafnian.py:40)], kws=(), vararg=None, target=None)
DEBUG 2022-02-08 17:11:33,570 on stmt: $178get_iter.15 = getiter(value=$176call_function.14)
DEBUG 2022-02-08 17:11:33,570 on stmt: $phi180.1 = $178get_iter.15
DEBUG 2022-02-08 17:11:33,570 on stmt: jump 180
DEBUG 2022-02-08 17:11:33,570 ==== SSA block analysis pass on 180
DEBUG 2022-02-08 17:11:33,570 Running <numba.core.ssa._GatherDefsHandler object at 0x000001E9F64F0CA0>
DEBUG 2022-02-08 17:11:33,570 on stmt: $180for_iter.2 = iternext(value=$phi180.1)
DEBUG 2022-02-08 17:11:33,570 on stmt: $180for_iter.3 = pair_first(value=$180for_iter.2)
DEBUG 2022-02-08 17:11:33,570 on stmt: $180for_iter.4 = pair_second(value=$180for_iter.2)
DEBUG 2022-02-08 17:11:33,570 on stmt: $phi182.2 = $180for_iter.3
DEBUG 2022-02-08 17:11:33,570 on stmt: branch $180for_iter.4, 182, 210
DEBUG 2022-02-08 17:11:33,570 ==== SSA block analysis pass on 182
DEBUG 2022-02-08 17:11:33,570 Running <numba.core.ssa._GatherDefsHandler object at 0x000001E9F64F0CA0>
DEBUG 2022-02-08 17:11:33,570 on stmt: i = $phi182.2
DEBUG 2022-02-08 17:11:33,570 on stmt: $192binary_subscr.7 = getitem(value=edge_reps, index=i, fn=<built-in function getitem>)
DEBUG 2022-02-08 17:11:33,586 on stmt: $198binary_subscr.10 = getitem(value=kept_edges, index=i, fn=<built-in function getitem>)
DEBUG 2022-02-08 17:11:33,586 on stmt: $200build_tuple.11 = build_tuple(items=[Var($192binary_subscr.7, loop_hafnian.py:41), Var($198binary_subscr.10, loop_hafnian.py:41)])
DEBUG 2022-02-08 17:11:33,586 on stmt: $202binary_subscr.12 = getitem(value=binoms, index=$200build_tuple.11, fn=<built-in function getitem>)
DEBUG 2022-02-08 17:11:33,586 on stmt: $204inplace_multiply.13 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=binom_prod, rhs=$202binary_subscr.12, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-08 17:11:33,586 on stmt: binom_prod = $204inplace_multiply.13
DEBUG 2022-02-08 17:11:33,586 on stmt: jump 180
DEBUG 2022-02-08 17:11:33,586 ==== SSA block analysis pass on 210
DEBUG 2022-02-08 17:11:33,586 Running <numba.core.ssa._GatherDefsHandler object at 0x000001E9F64F0CA0>
DEBUG 2022-02-08 17:11:33,586 on stmt: bool212 = global(bool: <class 'bool'>)
DEBUG 2022-02-08 17:11:33,586 on stmt: $212pred = call bool212(glynn, func=bool212, args=(Var(glynn, loop_hafnian.py:20),), kws=(), vararg=None, target=None)
DEBUG 2022-02-08 17:11:33,586 on stmt: branch $212pred, 214, 226
DEBUG 2022-02-08 17:11:33,586 ==== SSA block analysis pass on 214
DEBUG 2022-02-08 17:11:33,586 Running <numba.core.ssa._GatherDefsHandler object at 0x000001E9F64F0CA0>
DEBUG 2022-02-08 17:11:33,586 on stmt: $const214.1 = const(int, 2)
DEBUG 2022-02-08 17:11:33,586 on stmt: $218binary_multiply.3 = $const214.1 * kept_edges
DEBUG 2022-02-08 17:11:33,586 on stmt: kept_edges = $218binary_multiply.3 - edge_reps
DEBUG 2022-02-08 17:11:33,586 on stmt: jump 226
DEBUG 2022-02-08 17:11:33,586 ==== SSA block analysis pass on 226
DEBUG 2022-02-08 17:11:33,586 Running <numba.core.ssa._GatherDefsHandler object at 0x000001E9F64F0CA0>
DEBUG 2022-02-08 17:11:33,586 on stmt: $226load_global.1 = global(get_submatrices: CPUDispatcher(<function get_submatrices at 0x000001E9ECB30AF0>))
DEBUG 2022-02-08 17:11:33,586 on stmt: $236call_function.6 = call $226load_global.1(kept_edges, A, D, oddV, func=$226load_global.1, args=[Var(kept_edges, loop_hafnian.py:36), Var(A, loop_hafnian.py:20), Var(D, loop_hafnian.py:20), Var(oddV, loop_hafnian.py:20)], kws=(), vararg=None, target=None)
DEBUG 2022-02-08 17:11:33,586 on stmt: $238unpack_sequence.11 = exhaust_iter(value=$236call_function.6, count=4)
DEBUG 2022-02-08 17:11:33,586 on stmt: $238unpack_sequence.7 = static_getitem(value=$238unpack_sequence.11, index=0, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-02-08 17:11:33,586 on stmt: $238unpack_sequence.8 = static_getitem(value=$238unpack_sequence.11, index=1, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-02-08 17:11:33,586 on stmt: $238unpack_sequence.9 = static_getitem(value=$238unpack_sequence.11, index=2, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-02-08 17:11:33,586 on stmt: $238unpack_sequence.10 = static_getitem(value=$238unpack_sequence.11, index=3, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-02-08 17:11:33,586 on stmt: AX_S = $238unpack_sequence.7
DEBUG 2022-02-08 17:11:33,586 on stmt: XD_S = $238unpack_sequence.8
DEBUG 2022-02-08 17:11:33,586 on stmt: D_S = $238unpack_sequence.9
DEBUG 2022-02-08 17:11:33,586 on stmt: oddVX_S = $238unpack_sequence.10
DEBUG 2022-02-08 17:11:33,586 on stmt: $248load_global.12 = global(eigvals: CPUDispatcher(<function eigvals at 0x000001E9ECB4E040>))
DEBUG 2022-02-08 17:11:33,586 on stmt: E = call $248load_global.12(AX_S, func=$248load_global.12, args=[Var(AX_S, loop_hafnian.py:46)], kws=(), vararg=None, target=None)
DEBUG 2022-02-08 17:11:33,586 on stmt: $const256.15 = const(float, -1.0)
DEBUG 2022-02-08 17:11:33,586 on stmt: $const260.17 = const(int, 2)
DEBUG 2022-02-08 17:11:33,586 on stmt: $262binary_floor_divide.18 = N // $const260.17
DEBUG 2022-02-08 17:11:33,586 on stmt: $266binary_subtract.20 = $262binary_floor_divide.18 - edge_sum
DEBUG 2022-02-08 17:11:33,586 on stmt: $268binary_power.21 = $const256.15 ** $266binary_subtract.20
DEBUG 2022-02-08 17:11:33,586 on stmt: prefac = $268binary_power.21 * binom_prod
DEBUG 2022-02-08 17:11:33,586 on stmt: $const278.25 = const(NoneType, None)
DEBUG 2022-02-08 17:11:33,586 on stmt: $280is_op.26 = const(int, 0)
DEBUG 2022-02-08 17:11:33,586 on stmt: bool282 = global(bool: <class 'bool'>)
DEBUG 2022-02-08 17:11:33,586 on stmt: $282pred = call bool282($280is_op.26, func=bool282, args=(Var($280is_op.26, loop_hafnian.py:52),), kws=(), vararg=None, target=None)
DEBUG 2022-02-08 17:11:33,586 on stmt: jump 320
DEBUG 2022-02-08 17:11:33,586 ==== SSA block analysis pass on 320
DEBUG 2022-02-08 17:11:33,586 Running <numba.core.ssa._GatherDefsHandler object at 0x000001E9F64F0CA0>
DEBUG 2022-02-08 17:11:33,586 on stmt: bool322 = global(bool: <class 'bool'>)
DEBUG 2022-02-08 17:11:33,586 on stmt: $322pred = call bool322(glynn, func=bool322, args=(Var(glynn, loop_hafnian.py:20),), kws=(), vararg=None, target=None)
DEBUG 2022-02-08 17:11:33,586 on stmt: branch $322pred, 326, 348
DEBUG 2022-02-08 17:11:33,586 ==== SSA block analysis pass on 326
DEBUG 2022-02-08 17:11:33,586 Running <numba.core.ssa._GatherDefsHandler object at 0x000001E9F64F0CA0>
DEBUG 2022-02-08 17:11:33,586 on stmt: $const328.2 = const(int, 0)
DEBUG 2022-02-08 17:11:33,586 on stmt: $330binary_subscr.3 = static_getitem(value=kept_edges, index=0, index_var=$const328.2, fn=<built-in function getitem>)
DEBUG 2022-02-08 17:11:33,586 on stmt: $const332.4 = const(int, 0)
DEBUG 2022-02-08 17:11:33,586 on stmt: $334compare_op.5 = $330binary_subscr.3 == $const332.4
DEBUG 2022-02-08 17:11:33,586 on stmt: bool336 = global(bool: <class 'bool'>)
DEBUG 2022-02-08 17:11:33,586 on stmt: $336pred = call bool336($334compare_op.5, func=bool336, args=(Var($334compare_op.5, loop_hafnian.py:55),), kws=(), vararg=None, target=None)
DEBUG 2022-02-08 17:11:33,586 on stmt: branch $336pred, 340, 348
DEBUG 2022-02-08 17:11:33,586 ==== SSA block analysis pass on 340
DEBUG 2022-02-08 17:11:33,586 Running <numba.core.ssa._GatherDefsHandler object at 0x000001E9F64F0CA0>
DEBUG 2022-02-08 17:11:33,586 on stmt: $const342.2 = const(float, 0.5)
DEBUG 2022-02-08 17:11:33,586 on stmt: $344inplace_multiply.3 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=prefac, rhs=$const342.2, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-08 17:11:33,586 on stmt: prefac = $344inplace_multiply.3
DEBUG 2022-02-08 17:11:33,586 on stmt: jump 348
DEBUG 2022-02-08 17:11:33,586 ==== SSA block analysis pass on 348
DEBUG 2022-02-08 17:11:33,586 Running <numba.core.ssa._GatherDefsHandler object at 0x000001E9F64F0CA0>
DEBUG 2022-02-08 17:11:33,586 on stmt: $352load_global.3 = global(f_loop: CPUDispatcher(<function f_loop at 0x000001E9ECB30790>))
DEBUG 2022-02-08 17:11:33,586 on stmt: $364call_function.9 = call $352load_global.3(E, AX_S, XD_S, D_S, N, func=$352load_global.3, args=[Var(E, loop_hafnian.py:48), Var(AX_S, loop_hafnian.py:46), Var(XD_S, loop_hafnian.py:46), Var(D_S, loop_hafnian.py:46), Var(N, loop_hafnian.py:21)], kws=(), vararg=None, target=None)
DEBUG 2022-02-08 17:11:33,586 on stmt: $const368.11 = const(int, 2)
DEBUG 2022-02-08 17:11:33,586 on stmt: $370binary_floor_divide.12 = N // $const368.11
DEBUG 2022-02-08 17:11:33,586 on stmt: $372binary_subscr.13 = getitem(value=$364call_function.9, index=$370binary_floor_divide.12, fn=<built-in function getitem>)
DEBUG 2022-02-08 17:11:33,586 on stmt: $374binary_multiply.14 = prefac * $372binary_subscr.13
DEBUG 2022-02-08 17:11:33,586 on stmt: $376inplace_add.15 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=H, rhs=$374binary_multiply.14, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-08 17:11:33,586 on stmt: H = $376inplace_add.15
DEBUG 2022-02-08 17:11:33,586 on stmt: jump 437
DEBUG 2022-02-08 17:11:33,586 ==== SSA block analysis pass on 382
DEBUG 2022-02-08 17:11:33,586 Running <numba.core.ssa._GatherDefsHandler object at 0x000001E9F64F0CA0>
DEBUG 2022-02-08 17:11:33,586 on stmt: bool384 = global(bool: <class 'bool'>)
DEBUG 2022-02-08 17:11:33,586 on stmt: $384pred = call bool384(glynn, func=bool384, args=(Var(glynn, loop_hafnian.py:20),), kws=(), vararg=None, target=None)
DEBUG 2022-02-08 17:11:33,586 on stmt: branch $384pred, 388, 436
DEBUG 2022-02-08 17:11:33,586 ==== SSA block analysis pass on 388
DEBUG 2022-02-08 17:11:33,586 Running <numba.core.ssa._GatherDefsHandler object at 0x000001E9F64F0CA0>
DEBUG 2022-02-08 17:11:33,586 on stmt: $const390.1 = const(NoneType, None)
DEBUG 2022-02-08 17:11:33,586 on stmt: $392is_op.2 = const(int, 1)
DEBUG 2022-02-08 17:11:33,586 on stmt: bool394 = global(bool: <class 'bool'>)
DEBUG 2022-02-08 17:11:33,586 on stmt: $394pred = call bool394($392is_op.2, func=bool394, args=(Var($392is_op.2, loop_hafnian.py:60),), kws=(), vararg=None, target=None)
DEBUG 2022-02-08 17:11:33,586 on stmt: jump 398
DEBUG 2022-02-08 17:11:33,586 ==== SSA block analysis pass on 398
DEBUG 2022-02-08 17:11:33,586 Running <numba.core.ssa._GatherDefsHandler object at 0x000001E9F64F0CA0>
DEBUG 2022-02-08 17:11:33,586 on stmt: $const400.1 = const(float, 0.5)
DEBUG 2022-02-08 17:11:33,586 on stmt: $const404.3 = const(int, 2)
DEBUG 2022-02-08 17:11:33,586 on stmt: $406binary_floor_divide.4 = N // $const404.3
DEBUG 2022-02-08 17:11:33,586 on stmt: $const408.5 = const(int, 1)
DEBUG 2022-02-08 17:11:33,586 on stmt: $410binary_subtract.6 = $406binary_floor_divide.4 - $const408.5
DEBUG 2022-02-08 17:11:33,586 on stmt: $412binary_power.7 = $const400.1 ** $410binary_subtract.6
DEBUG 2022-02-08 17:11:33,586 on stmt: $414binary_multiply.8 = H * $412binary_power.7
DEBUG 2022-02-08 17:11:33,586 on stmt: H = $414binary_multiply.8
DEBUG 2022-02-08 17:11:33,586 on stmt: jump 436
DEBUG 2022-02-08 17:11:33,586 ==== SSA block analysis pass on 436
DEBUG 2022-02-08 17:11:33,586 Running <numba.core.ssa._GatherDefsHandler object at 0x000001E9F64F0CA0>
DEBUG 2022-02-08 17:11:33,586 on stmt: $438return_value.1 = cast(value=H)
DEBUG 2022-02-08 17:11:33,586 on stmt: return $438return_value.1
DEBUG 2022-02-08 17:11:33,586 ==== SSA block analysis pass on 437
DEBUG 2022-02-08 17:11:33,586 Running <numba.core.ssa._GatherDefsHandler object at 0x000001E9F64F0CA0>
DEBUG 2022-02-08 17:11:33,586 on stmt: jump 142
DEBUG 2022-02-08 17:11:33,586 defs defaultdict(<class 'list'>,
            {'$100binary_add.4': [<numba.core.ir.Assign object at 0x000001E9F64CEEE0>],
             '$108load_method.1': [<numba.core.ir.Assign object at 0x000001E9F64D03D0>],
             '$110call_method.2': [<numba.core.ir.Assign object at 0x000001E9F64D05E0>],
             '$118load_global.5': [<numba.core.ir.Assign object at 0x000001E9F64D0AF0>],
             '$130load_global.9': [<numba.core.ir.Assign object at 0x000001E9F64D2310>],
             '$138call_function.13': [<numba.core.ir.Assign object at 0x000001E9F64D2850>],
             '$140get_iter.14': [<numba.core.ir.Assign object at 0x000001E9F64D2970>],
             '$142for_iter.1': [<numba.core.ir.Assign object at 0x000001E9F64D29D0>],
             '$142for_iter.2': [<numba.core.ir.Assign object at 0x000001E9F64D2B20>],
             '$142for_iter.3': [<numba.core.ir.Assign object at 0x000001E9F64D2C40>],
             '$146load_global.2': [<numba.core.ir.Assign object at 0x000001E9F64D50D0>],
             '$158load_method.7': [<numba.core.ir.Assign object at 0x000001E9F64D5850>],
             '$168load_global.10': [<numba.core.ir.Assign object at 0x000001E9F64D5F10>],
             '$16load_method.6': [<numba.core.ir.Assign object at 0x000001E9F64768B0>],
             '$174binary_floor_divide.13': [<numba.core.ir.Assign object at 0x000001E9F64D73A0>],
             '$176call_function.14': [<numba.core.ir.Assign object at 0x000001E9F64D7550>],
             '$178get_iter.15': [<numba.core.ir.Assign object at 0x000001E9F64D7670>],
             '$180for_iter.2': [<numba.core.ir.Assign object at 0x000001E9F64D7760>],
             '$180for_iter.3': [<numba.core.ir.Assign object at 0x000001E9F64D7880>],
             '$180for_iter.4': [<numba.core.ir.Assign object at 0x000001E9F64D79A0>],
             '$18call_method.7': [<numba.core.ir.Assign object at 0x000001E9F64C6040>],
             '$192binary_subscr.7': [<numba.core.ir.Assign object at 0x000001E9F64DA2E0>],
             '$198binary_subscr.10': [<numba.core.ir.Assign object at 0x000001E9F64DA6A0>],
             '$200build_tuple.11': [<numba.core.ir.Assign object at 0x000001E9F64DA820>],
             '$202binary_subscr.12': [<numba.core.ir.Assign object at 0x000001E9F64DA9A0>],
             '$204inplace_multiply.13': [<numba.core.ir.Assign object at 0x000001E9F64DAB20>],
             '$212pred': [<numba.core.ir.Assign object at 0x000001E9F64DAEB0>],
             '$218binary_multiply.3': [<numba.core.ir.Assign object at 0x000001E9F64DD400>],
             '$226load_global.1': [<numba.core.ir.Assign object at 0x000001E9F64DD850>],
             '$236call_function.6': [<numba.core.ir.Assign object at 0x000001E9F64DDEB0>],
             '$238unpack_sequence.10': [<numba.core.ir.Assign object at 0x000001E9F64DF4F0>],
             '$238unpack_sequence.11': [<numba.core.ir.Assign object at 0x000001E9F64DF040>],
             '$238unpack_sequence.7': [<numba.core.ir.Assign object at 0x000001E9F64DF190>],
             '$238unpack_sequence.8': [<numba.core.ir.Assign object at 0x000001E9F64DF2B0>],
             '$238unpack_sequence.9': [<numba.core.ir.Assign object at 0x000001E9F64DF3D0>],
             '$248load_global.12': [<numba.core.ir.Assign object at 0x000001E9F64DFA90>],
             '$262binary_floor_divide.18': [<numba.core.ir.Assign object at 0x000001E9F64E0460>],
             '$266binary_subtract.20': [<numba.core.ir.Assign object at 0x000001E9F64E0700>],
             '$268binary_power.21': [<numba.core.ir.Assign object at 0x000001E9F64E0880>],
             '$280is_op.26': [<numba.core.ir.Assign object at 0x000001E9F64E20A0>],
             '$282pred': [<numba.core.ir.Assign object at 0x000001E9F64E2310>],
             '$28is_op.11': [<numba.core.ir.Assign object at 0x000001E9F64C66A0>],
             '$30pred': [<numba.core.ir.Assign object at 0x000001E9F64C6910>],
             '$322pred': [<numba.core.ir.Assign object at 0x000001E9F64E5550>],
             '$330binary_subscr.3': [<numba.core.ir.Assign object at 0x000001E9F64EB1F0>],
             '$334compare_op.5': [<numba.core.ir.Assign object at 0x000001E9F64E5D60>],
             '$336pred': [<numba.core.ir.Assign object at 0x000001E9F64E5FD0>],
             '$344inplace_multiply.3': [<numba.core.ir.Assign object at 0x000001E9F64E7520>],
             '$352load_global.3': [<numba.core.ir.Assign object at 0x000001E9F64E7A30>],
             '$364call_function.9': [<numba.core.ir.Assign object at 0x000001E9F64E91F0>],
             '$370binary_floor_divide.12': [<numba.core.ir.Assign object at 0x000001E9F64E95E0>],
             '$372binary_subscr.13': [<numba.core.ir.Assign object at 0x000001E9F64E9760>],
             '$374binary_multiply.14': [<numba.core.ir.Assign object at 0x000001E9F64E98E0>],
             '$376inplace_add.15': [<numba.core.ir.Assign object at 0x000001E9F64E9A60>],
             '$384pred': [<numba.core.ir.Assign object at 0x000001E9F64E9D30>],
             '$392is_op.2': [<numba.core.ir.Assign object at 0x000001E9F64EB280>],
             '$394pred': [<numba.core.ir.Assign object at 0x000001E9F64EB4F0>],
             '$406binary_floor_divide.4': [<numba.core.ir.Assign object at 0x000001E9F64EBCA0>],
             '$410binary_subtract.6': [<numba.core.ir.Assign object at 0x000001E9F64EBFA0>],
             '$412binary_power.7': [<numba.core.ir.Assign object at 0x000001E9F64ED160>],
             '$414binary_multiply.8': [<numba.core.ir.Assign object at 0x000001E9F64ED2E0>],
             '$42pred': [<numba.core.ir.Assign object at 0x000001E9F64C91F0>],
             '$438return_value.1': [<numba.core.ir.Assign object at 0x000001E9F64F01F0>],
             '$48is_op.2': [<numba.core.ir.Assign object at 0x000001E9F64C9700>],
             '$4load_attr.1': [<numba.core.ir.Assign object at 0x000001E9F6476B50>],
             '$50pred': [<numba.core.ir.Assign object at 0x000001E9F64C9970>],
             '$56binary_subscr.2': [<numba.core.ir.Assign object at 0x000001E9F64C96A0>],
             '$60binary_add.4': [<numba.core.ir.Assign object at 0x000001E9F64CB1C0>],
             '$64binary_floor_divide.6': [<numba.core.ir.Assign object at 0x000001E9F64CB4C0>],
             '$66load_global.7': [<numba.core.ir.Assign object at 0x000001E9F64CB610>],
             '$68load_method.8': [<numba.core.ir.Assign object at 0x000001E9F64CB790>],
             '$76build_slice.12': [<numba.core.ir.Assign object at 0x000001E9F64CBD30>],
             '$76build_slice.13': [<numba.core.ir.Assign object at 0x000001E9F64CBE50>],
             '$78binary_subscr.14': [<numba.core.ir.Assign object at 0x000001E9F64E9C10>],
             '$82binary_add.16': [<numba.core.ir.Assign object at 0x000001E9F64CE340>],
             '$84call_method.17': [<numba.core.ir.Assign object at 0x000001E9F64CE520>],
             '$92load_global.0': [<numba.core.ir.Assign object at 0x000001E9F64CE910>],
             '$94load_method.1': [<numba.core.ir.Assign object at 0x000001E9F64CEA90>],
             '$const112.3': [<numba.core.ir.Assign object at 0x000001E9F64D06D0>],
             '$const12.4': [<numba.core.ir.Assign object at 0x000001E9F6476B80>],
             '$const172.12': [<numba.core.ir.Assign object at 0x000001E9F64D71F0>],
             '$const214.1': [<numba.core.ir.Assign object at 0x000001E9F64DD130>],
             '$const256.15': [<numba.core.ir.Assign object at 0x000001E9F64DFFD0>],
             '$const26.10': [<numba.core.ir.Assign object at 0x000001E9F64C64F0>],
             '$const260.17': [<numba.core.ir.Assign object at 0x000001E9F64E02B0>],
             '$const278.25': [<numba.core.ir.Assign object at 0x000001E9F64E0EB0>],
             '$const328.2': [<numba.core.ir.Assign object at 0x000001E9F64E58B0>],
             '$const332.4': [<numba.core.ir.Assign object at 0x000001E9F64E5BB0>],
             '$const342.2': [<numba.core.ir.Assign object at 0x000001E9F64E7370>],
             '$const368.11': [<numba.core.ir.Assign object at 0x000001E9F64E9430>],
             '$const390.1': [<numba.core.ir.Assign object at 0x000001E9F64EB0D0>],
             '$const400.1': [<numba.core.ir.Assign object at 0x000001E9F64EB850>],
             '$const404.3': [<numba.core.ir.Assign object at 0x000001E9F64EBAF0>],
             '$const408.5': [<numba.core.ir.Assign object at 0x000001E9F64EBDF0>],
             '$const46.1': [<numba.core.ir.Assign object at 0x000001E9F64C9550>],
             '$const54.1': [<numba.core.ir.Assign object at 0x000001E9F64C9CD0>],
             '$const58.3': [<numba.core.ir.Assign object at 0x000001E9F64C9FD0>],
             '$const6.2': [<numba.core.ir.Assign object at 0x000001E9F6476E50>],
             '$const62.5': [<numba.core.ir.Assign object at 0x000001E9F64CB310>],
             '$const72.10': [<numba.core.ir.Assign object at 0x000001E9F64CBA30>],
             '$const74.11': [<numba.core.ir.Assign object at 0x000001E9F64CBBB0>],
             '$const80.15': [<numba.core.ir.Assign object at 0x000001E9F64CE190>],
             '$const98.3': [<numba.core.ir.Assign object at 0x000001E9F64CED30>],
             '$phi142.0': [<numba.core.ir.Assign object at 0x000001E9F64D02E0>],
             '$phi144.1': [<numba.core.ir.Assign object at 0x000001E9F64D2550>],
             '$phi180.1': [<numba.core.ir.Assign object at 0x000001E9F64D5280>],
             '$phi182.2': [<numba.core.ir.Assign object at 0x000001E9F64D7070>],
             'A': [<numba.core.ir.Assign object at 0x000001E9F644C670>],
             'AX_S': [<numba.core.ir.Assign object at 0x000001E9F64DF5B0>],
             'D': [<numba.core.ir.Assign object at 0x000001E9F644CCD0>],
             'D_S': [<numba.core.ir.Assign object at 0x000001E9F64DF7F0>],
             'E': [<numba.core.ir.Assign object at 0x000001E9F64DFD90>],
             'H': [<numba.core.ir.Assign object at 0x000001E9F64D2070>,
                   <numba.core.ir.Assign object at 0x000001E9F64E9B20>,
                   <numba.core.ir.Assign object at 0x000001E9F64ED3A0>],
             'N': [<numba.core.ir.Assign object at 0x000001E9F64C6160>],
             'XD_S': [<numba.core.ir.Assign object at 0x000001E9F64DF6D0>],
             'binom_prod': [<numba.core.ir.Assign object at 0x000001E9F64D5C70>,
                            <numba.core.ir.Assign object at 0x000001E9F64DABE0>],
             'binoms': [<numba.core.ir.Assign object at 0x000001E9F64D0DF0>],
             'bool212': [<numba.core.ir.Assign object at 0x000001E9F64DAD90>],
             'bool282': [<numba.core.ir.Assign object at 0x000001E9F64E21F0>],
             'bool30': [<numba.core.ir.Assign object at 0x000001E9F64C67F0>],
             'bool322': [<numba.core.ir.Assign object at 0x000001E9F64E2E50>],
             'bool336': [<numba.core.ir.Assign object at 0x000001E9F64E5EB0>],
             'bool384': [<numba.core.ir.Assign object at 0x000001E9F64E9340>],
             'bool394': [<numba.core.ir.Assign object at 0x000001E9F64EB3D0>],
             'bool42': [<numba.core.ir.Assign object at 0x000001E9F64C90D0>],
             'bool50': [<numba.core.ir.Assign object at 0x000001E9F64C9850>],
             'edge_reps': [<numba.core.ir.Assign object at 0x000001E9F644CD90>],
             'edge_sum': [<numba.core.ir.Assign object at 0x000001E9F64D5A60>],
             'glynn': [<numba.core.ir.Assign object at 0x000001E9F6476550>],
             'i': [<numba.core.ir.Assign object at 0x000001E9F64D7C70>],
             'j': [<numba.core.ir.Assign object at 0x000001E9F64D2F10>],
             'kept_edges': [<numba.core.ir.Assign object at 0x000001E9F64D54F0>,
                            <numba.core.ir.Assign object at 0x000001E9F64DD6A0>],
             'max_binom': [<numba.core.ir.Assign object at 0x000001E9F64D0880>],
             'n': [<numba.core.ir.Assign object at 0x000001E9F64F0EE0>],
             'oddV': [<numba.core.ir.Assign object at 0x000001E9F6476520>],
             'oddVX_S': [<numba.core.ir.Assign object at 0x000001E9F64DF910>],
             'oddloop': [<numba.core.ir.Assign object at 0x000001E9F644CFA0>],
             'prefac': [<numba.core.ir.Assign object at 0x000001E9F64E0B20>,
                        <numba.core.ir.Assign object at 0x000001E9F64E75E0>],
             'rank': [<numba.core.ir.Assign object at 0x000001E9F6476340>],
             'size': [<numba.core.ir.Assign object at 0x000001E9F6476430>],
             'steps': [<numba.core.ir.Assign object at 0x000001E9F64CE640>,
                       <numba.core.ir.Assign object at 0x000001E9F64D0100>]})
DEBUG 2022-02-08 17:11:33,586 SSA violators {'steps', 'binom_prod', 'prefac', 'kept_edges', 'H'}
DEBUG 2022-02-08 17:11:33,586 Fix SSA violator on var steps
DEBUG 2022-02-08 17:11:33,586 ==== SSA block rewrite pass on 0
DEBUG 2022-02-08 17:11:33,586 Running <numba.core.ssa._FreshVarHandler object at 0x000001E9F644CEE0>
DEBUG 2022-02-08 17:11:33,586 on stmt: A = arg(0, name=A)
DEBUG 2022-02-08 17:11:33,586 on stmt: D = arg(1, name=D)
DEBUG 2022-02-08 17:11:33,586 on stmt: edge_reps = arg(2, name=edge_reps)
DEBUG 2022-02-08 17:11:33,586 on stmt: oddloop = arg(3, name=oddloop)
DEBUG 2022-02-08 17:11:33,586 on stmt: oddV = arg(4, name=oddV)
DEBUG 2022-02-08 17:11:33,586 on stmt: rank = arg(5, name=rank)
DEBUG 2022-02-08 17:11:33,586 on stmt: size = arg(6, name=size)
DEBUG 2022-02-08 17:11:33,586 on stmt: glynn = arg(7, name=glynn)
DEBUG 2022-02-08 17:11:33,586 on stmt: $4load_attr.1 = getattr(value=A, attr=shape)
DEBUG 2022-02-08 17:11:33,586 on stmt: $const6.2 = const(int, 0)
DEBUG 2022-02-08 17:11:33,586 on stmt: n = static_getitem(value=$4load_attr.1, index=0, index_var=$const6.2, fn=<built-in function getitem>)
DEBUG 2022-02-08 17:11:33,586 on stmt: $const12.4 = const(int, 2)
DEBUG 2022-02-08 17:11:33,586 on stmt: $16load_method.6 = getattr(value=edge_reps, attr=sum)
DEBUG 2022-02-08 17:11:33,586 on stmt: $18call_method.7 = call $16load_method.6(func=$16load_method.6, args=[], kws=(), vararg=None, target=None)
DEBUG 2022-02-08 17:11:33,586 on stmt: N = $const12.4 * $18call_method.7
DEBUG 2022-02-08 17:11:33,586 on stmt: $const26.10 = const(NoneType, None)
DEBUG 2022-02-08 17:11:33,586 on stmt: $28is_op.11 = const(int, 0)
DEBUG 2022-02-08 17:11:33,586 on stmt: bool30 = global(bool: <class 'bool'>)
DEBUG 2022-02-08 17:11:33,586 on stmt: $30pred = call bool30($28is_op.11, func=bool30, args=(Var($28is_op.11, loop_hafnian.py:22),), kws=(), vararg=None, target=None)
DEBUG 2022-02-08 17:11:33,586 on stmt: jump 40
DEBUG 2022-02-08 17:11:33,586 ==== SSA block rewrite pass on 40
DEBUG 2022-02-08 17:11:33,586 Running <numba.core.ssa._FreshVarHandler object at 0x000001E9F644CEE0>
DEBUG 2022-02-08 17:11:33,586 on stmt: bool42 = global(bool: <class 'bool'>)
DEBUG 2022-02-08 17:11:33,586 on stmt: $42pred = call bool42(glynn, func=bool42, args=(Var(glynn, loop_hafnian.py:20),), kws=(), vararg=None, target=None)
DEBUG 2022-02-08 17:11:33,586 on stmt: branch $42pred, 44, 92
DEBUG 2022-02-08 17:11:33,586 ==== SSA block rewrite pass on 44
DEBUG 2022-02-08 17:11:33,586 Running <numba.core.ssa._FreshVarHandler object at 0x000001E9F644CEE0>
DEBUG 2022-02-08 17:11:33,586 on stmt: $const46.1 = const(NoneType, None)
DEBUG 2022-02-08 17:11:33,586 on stmt: $48is_op.2 = const(int, 1)
DEBUG 2022-02-08 17:11:33,586 on stmt: bool50 = global(bool: <class 'bool'>)
DEBUG 2022-02-08 17:11:33,586 on stmt: $50pred = call bool50($48is_op.2, func=bool50, args=(Var($48is_op.2, loop_hafnian.py:24),), kws=(), vararg=None, target=None)
DEBUG 2022-02-08 17:11:33,586 on stmt: jump 52
DEBUG 2022-02-08 17:11:33,586 ==== SSA block rewrite pass on 52
DEBUG 2022-02-08 17:11:33,586 Running <numba.core.ssa._FreshVarHandler object at 0x000001E9F644CEE0>
DEBUG 2022-02-08 17:11:33,586 on stmt: $const54.1 = const(int, 0)
DEBUG 2022-02-08 17:11:33,586 on stmt: $56binary_subscr.2 = static_getitem(value=edge_reps, index=0, index_var=$const54.1, fn=<built-in function getitem>)
DEBUG 2022-02-08 17:11:33,586 on stmt: $const58.3 = const(int, 2)
DEBUG 2022-02-08 17:11:33,586 on stmt: $60binary_add.4 = $56binary_subscr.2 + $const58.3
DEBUG 2022-02-08 17:11:33,586 on stmt: $const62.5 = const(int, 2)
DEBUG 2022-02-08 17:11:33,586 on stmt: $64binary_floor_divide.6 = $60binary_add.4 // $const62.5
DEBUG 2022-02-08 17:11:33,586 on stmt: $66load_global.7 = global(np: <module 'numpy' from 'C:\\Users\\zl4821\\Anaconda3\\envs\\GBS\\lib\\site-packages\\numpy\\__init__.py'>)
DEBUG 2022-02-08 17:11:33,586 on stmt: $68load_method.8 = getattr(value=$66load_global.7, attr=prod)
DEBUG 2022-02-08 17:11:33,601 on stmt: $const72.10 = const(int, 1)
DEBUG 2022-02-08 17:11:33,601 on stmt: $const74.11 = const(NoneType, None)
DEBUG 2022-02-08 17:11:33,601 on stmt: $76build_slice.12 = global(slice: <class 'slice'>)
DEBUG 2022-02-08 17:11:33,601 on stmt: $76build_slice.13 = call $76build_slice.12($const72.10, $const74.11, func=$76build_slice.12, args=(Var($const72.10, loop_hafnian.py:25), Var($const74.11, loop_hafnian.py:25)), kws=(), vararg=None, target=None)
DEBUG 2022-02-08 17:11:33,601 on stmt: $78binary_subscr.14 = static_getitem(value=edge_reps, index=slice(1, None, None), index_var=$76build_slice.13, fn=<built-in function getitem>)
DEBUG 2022-02-08 17:11:33,601 on stmt: $const80.15 = const(int, 1)
DEBUG 2022-02-08 17:11:33,601 on stmt: $82binary_add.16 = $78binary_subscr.14 + $const80.15
DEBUG 2022-02-08 17:11:33,601 on stmt: $84call_method.17 = call $68load_method.8($82binary_add.16, func=$68load_method.8, args=[Var($82binary_add.16, loop_hafnian.py:25)], kws=(), vararg=None, target=None)
DEBUG 2022-02-08 17:11:33,601 on stmt: steps = $64binary_floor_divide.6 * $84call_method.17
DEBUG 2022-02-08 17:11:33,601 first assign: steps
DEBUG 2022-02-08 17:11:33,601 replaced with: steps = $64binary_floor_divide.6 * $84call_method.17
DEBUG 2022-02-08 17:11:33,601 on stmt: jump 106
DEBUG 2022-02-08 17:11:33,601 ==== SSA block rewrite pass on 92
DEBUG 2022-02-08 17:11:33,601 Running <numba.core.ssa._FreshVarHandler object at 0x000001E9F644CEE0>
DEBUG 2022-02-08 17:11:33,601 on stmt: $92load_global.0 = global(np: <module 'numpy' from 'C:\\Users\\zl4821\\Anaconda3\\envs\\GBS\\lib\\site-packages\\numpy\\__init__.py'>)
DEBUG 2022-02-08 17:11:33,601 on stmt: $94load_method.1 = getattr(value=$92load_global.0, attr=prod)
DEBUG 2022-02-08 17:11:33,601 on stmt: $const98.3 = const(int, 1)
DEBUG 2022-02-08 17:11:33,601 on stmt: $100binary_add.4 = edge_reps + $const98.3
DEBUG 2022-02-08 17:11:33,601 on stmt: steps = call $94load_method.1($100binary_add.4, func=$94load_method.1, args=[Var($100binary_add.4, loop_hafnian.py:27)], kws=(), vararg=None, target=None)
DEBUG 2022-02-08 17:11:33,601 replaced with: steps.1 = call $94load_method.1($100binary_add.4, func=$94load_method.1, args=[Var($100binary_add.4, loop_hafnian.py:27)], kws=(), vararg=None, target=None)
DEBUG 2022-02-08 17:11:33,601 on stmt: jump 106
DEBUG 2022-02-08 17:11:33,601 ==== SSA block rewrite pass on 106
DEBUG 2022-02-08 17:11:33,601 Running <numba.core.ssa._FreshVarHandler object at 0x000001E9F644CEE0>
DEBUG 2022-02-08 17:11:33,601 on stmt: $108load_method.1 = getattr(value=edge_reps, attr=max)
DEBUG 2022-02-08 17:11:33,601 on stmt: $110call_method.2 = call $108load_method.1(func=$108load_method.1, args=[], kws=(), vararg=None, target=None)
DEBUG 2022-02-08 17:11:33,601 on stmt: $const112.3 = const(int, 1)
DEBUG 2022-02-08 17:11:33,601 on stmt: max_binom = $110call_method.2 + $const112.3
DEBUG 2022-02-08 17:11:33,601 on stmt: $118load_global.5 = global(precompute_binoms: CPUDispatcher(<function precompute_binoms at 0x000001E9ECB30160>))
DEBUG 2022-02-08 17:11:33,601 on stmt: binoms = call $118load_global.5(max_binom, func=$118load_global.5, args=[Var(max_binom, loop_hafnian.py:29)], kws=(), vararg=None, target=None)
DEBUG 2022-02-08 17:11:33,601 on stmt: H = const(int, 0)
DEBUG 2022-02-08 17:11:33,601 on stmt: $130load_global.9 = global(range: <class 'range'>)
DEBUG 2022-02-08 17:11:33,601 on stmt: $138call_function.13 = call $130load_global.9(rank, steps, size, func=$130load_global.9, args=[Var(rank, loop_hafnian.py:20), Var(steps, loop_hafnian.py:25), Var(size, loop_hafnian.py:20)], kws=(), vararg=None, target=None)
DEBUG 2022-02-08 17:11:33,601 on stmt: $140get_iter.14 = getiter(value=$138call_function.13)
DEBUG 2022-02-08 17:11:33,601 on stmt: $phi142.0 = $140get_iter.14
DEBUG 2022-02-08 17:11:33,601 on stmt: jump 142
DEBUG 2022-02-08 17:11:33,601 ==== SSA block rewrite pass on 142
DEBUG 2022-02-08 17:11:33,601 Running <numba.core.ssa._FreshVarHandler object at 0x000001E9F644CEE0>
DEBUG 2022-02-08 17:11:33,601 on stmt: $142for_iter.1 = iternext(value=$phi142.0)
DEBUG 2022-02-08 17:11:33,601 on stmt: $142for_iter.2 = pair_first(value=$142for_iter.1)
DEBUG 2022-02-08 17:11:33,601 on stmt: $142for_iter.3 = pair_second(value=$142for_iter.1)
DEBUG 2022-02-08 17:11:33,601 on stmt: $phi144.1 = $142for_iter.2
DEBUG 2022-02-08 17:11:33,601 on stmt: branch $142for_iter.3, 144, 382
DEBUG 2022-02-08 17:11:33,601 ==== SSA block rewrite pass on 144
DEBUG 2022-02-08 17:11:33,601 Running <numba.core.ssa._FreshVarHandler object at 0x000001E9F644CEE0>
DEBUG 2022-02-08 17:11:33,601 on stmt: j = $phi144.1
DEBUG 2022-02-08 17:11:33,601 on stmt: $146load_global.2 = global(find_kept_edges: CPUDispatcher(<function find_kept_edges at 0x000001E9ECB305E0>))
DEBUG 2022-02-08 17:11:33,601 on stmt: kept_edges = call $146load_global.2(j, edge_reps, func=$146load_global.2, args=[Var(j, loop_hafnian.py:34), Var(edge_reps, loop_hafnian.py:20)], kws=(), vararg=None, target=None)
DEBUG 2022-02-08 17:11:33,601 on stmt: $158load_method.7 = getattr(value=kept_edges, attr=sum)
DEBUG 2022-02-08 17:11:33,601 on stmt: edge_sum = call $158load_method.7(func=$158load_method.7, args=[], kws=(), vararg=None, target=None)
DEBUG 2022-02-08 17:11:33,601 on stmt: binom_prod = const(float, 1.0)
DEBUG 2022-02-08 17:11:33,601 on stmt: $168load_global.10 = global(range: <class 'range'>)
DEBUG 2022-02-08 17:11:33,601 on stmt: $const172.12 = const(int, 2)
DEBUG 2022-02-08 17:11:33,601 on stmt: $174binary_floor_divide.13 = n // $const172.12
DEBUG 2022-02-08 17:11:33,601 on stmt: $176call_function.14 = call $168load_global.10($174binary_floor_divide.13, func=$168load_global.10, args=[Var($174binary_floor_divide.13, loop_hafnian.py:40)], kws=(), vararg=None, target=None)
DEBUG 2022-02-08 17:11:33,601 on stmt: $178get_iter.15 = getiter(value=$176call_function.14)
DEBUG 2022-02-08 17:11:33,601 on stmt: $phi180.1 = $178get_iter.15
DEBUG 2022-02-08 17:11:33,601 on stmt: jump 180
DEBUG 2022-02-08 17:11:33,601 ==== SSA block rewrite pass on 180
DEBUG 2022-02-08 17:11:33,601 Running <numba.core.ssa._FreshVarHandler object at 0x000001E9F644CEE0>
DEBUG 2022-02-08 17:11:33,601 on stmt: $180for_iter.2 = iternext(value=$phi180.1)
DEBUG 2022-02-08 17:11:33,601 on stmt: $180for_iter.3 = pair_first(value=$180for_iter.2)
DEBUG 2022-02-08 17:11:33,601 on stmt: $180for_iter.4 = pair_second(value=$180for_iter.2)
DEBUG 2022-02-08 17:11:33,601 on stmt: $phi182.2 = $180for_iter.3
DEBUG 2022-02-08 17:11:33,601 on stmt: branch $180for_iter.4, 182, 210
DEBUG 2022-02-08 17:11:33,601 ==== SSA block rewrite pass on 182
DEBUG 2022-02-08 17:11:33,601 Running <numba.core.ssa._FreshVarHandler object at 0x000001E9F644CEE0>
DEBUG 2022-02-08 17:11:33,601 on stmt: i = $phi182.2
DEBUG 2022-02-08 17:11:33,601 on stmt: $192binary_subscr.7 = getitem(value=edge_reps, index=i, fn=<built-in function getitem>)
DEBUG 2022-02-08 17:11:33,601 on stmt: $198binary_subscr.10 = getitem(value=kept_edges, index=i, fn=<built-in function getitem>)
DEBUG 2022-02-08 17:11:33,601 on stmt: $200build_tuple.11 = build_tuple(items=[Var($192binary_subscr.7, loop_hafnian.py:41), Var($198binary_subscr.10, loop_hafnian.py:41)])
DEBUG 2022-02-08 17:11:33,601 on stmt: $202binary_subscr.12 = getitem(value=binoms, index=$200build_tuple.11, fn=<built-in function getitem>)
DEBUG 2022-02-08 17:11:33,601 on stmt: $204inplace_multiply.13 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=binom_prod, rhs=$202binary_subscr.12, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-08 17:11:33,601 on stmt: binom_prod = $204inplace_multiply.13
DEBUG 2022-02-08 17:11:33,601 on stmt: jump 180
DEBUG 2022-02-08 17:11:33,601 ==== SSA block rewrite pass on 210
DEBUG 2022-02-08 17:11:33,601 Running <numba.core.ssa._FreshVarHandler object at 0x000001E9F644CEE0>
DEBUG 2022-02-08 17:11:33,601 on stmt: bool212 = global(bool: <class 'bool'>)
DEBUG 2022-02-08 17:11:33,601 on stmt: $212pred = call bool212(glynn, func=bool212, args=(Var(glynn, loop_hafnian.py:20),), kws=(), vararg=None, target=None)
DEBUG 2022-02-08 17:11:33,601 on stmt: branch $212pred, 214, 226
DEBUG 2022-02-08 17:11:33,601 ==== SSA block rewrite pass on 214
DEBUG 2022-02-08 17:11:33,601 Running <numba.core.ssa._FreshVarHandler object at 0x000001E9F644CEE0>
DEBUG 2022-02-08 17:11:33,601 on stmt: $const214.1 = const(int, 2)
DEBUG 2022-02-08 17:11:33,601 on stmt: $218binary_multiply.3 = $const214.1 * kept_edges
DEBUG 2022-02-08 17:11:33,601 on stmt: kept_edges = $218binary_multiply.3 - edge_reps
DEBUG 2022-02-08 17:11:33,601 on stmt: jump 226
DEBUG 2022-02-08 17:11:33,601 ==== SSA block rewrite pass on 226
DEBUG 2022-02-08 17:11:33,601 Running <numba.core.ssa._FreshVarHandler object at 0x000001E9F644CEE0>
DEBUG 2022-02-08 17:11:33,601 on stmt: $226load_global.1 = global(get_submatrices: CPUDispatcher(<function get_submatrices at 0x000001E9ECB30AF0>))
DEBUG 2022-02-08 17:11:33,601 on stmt: $236call_function.6 = call $226load_global.1(kept_edges, A, D, oddV, func=$226load_global.1, args=[Var(kept_edges, loop_hafnian.py:36), Var(A, loop_hafnian.py:20), Var(D, loop_hafnian.py:20), Var(oddV, loop_hafnian.py:20)], kws=(), vararg=None, target=None)
DEBUG 2022-02-08 17:11:33,601 on stmt: $238unpack_sequence.11 = exhaust_iter(value=$236call_function.6, count=4)
DEBUG 2022-02-08 17:11:33,601 on stmt: $238unpack_sequence.7 = static_getitem(value=$238unpack_sequence.11, index=0, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-02-08 17:11:33,601 on stmt: $238unpack_sequence.8 = static_getitem(value=$238unpack_sequence.11, index=1, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-02-08 17:11:33,601 on stmt: $238unpack_sequence.9 = static_getitem(value=$238unpack_sequence.11, index=2, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-02-08 17:11:33,601 on stmt: $238unpack_sequence.10 = static_getitem(value=$238unpack_sequence.11, index=3, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-02-08 17:11:33,601 on stmt: AX_S = $238unpack_sequence.7
DEBUG 2022-02-08 17:11:33,601 on stmt: XD_S = $238unpack_sequence.8
DEBUG 2022-02-08 17:11:33,601 on stmt: D_S = $238unpack_sequence.9
DEBUG 2022-02-08 17:11:33,601 on stmt: oddVX_S = $238unpack_sequence.10
DEBUG 2022-02-08 17:11:33,601 on stmt: $248load_global.12 = global(eigvals: CPUDispatcher(<function eigvals at 0x000001E9ECB4E040>))
DEBUG 2022-02-08 17:11:33,601 on stmt: E = call $248load_global.12(AX_S, func=$248load_global.12, args=[Var(AX_S, loop_hafnian.py:46)], kws=(), vararg=None, target=None)
DEBUG 2022-02-08 17:11:33,601 on stmt: $const256.15 = const(float, -1.0)
DEBUG 2022-02-08 17:11:33,601 on stmt: $const260.17 = const(int, 2)
DEBUG 2022-02-08 17:11:33,601 on stmt: $262binary_floor_divide.18 = N // $const260.17
DEBUG 2022-02-08 17:11:33,601 on stmt: $266binary_subtract.20 = $262binary_floor_divide.18 - edge_sum
DEBUG 2022-02-08 17:11:33,601 on stmt: $268binary_power.21 = $const256.15 ** $266binary_subtract.20
DEBUG 2022-02-08 17:11:33,601 on stmt: prefac = $268binary_power.21 * binom_prod
DEBUG 2022-02-08 17:11:33,601 on stmt: $const278.25 = const(NoneType, None)
DEBUG 2022-02-08 17:11:33,601 on stmt: $280is_op.26 = const(int, 0)
DEBUG 2022-02-08 17:11:33,601 on stmt: bool282 = global(bool: <class 'bool'>)
DEBUG 2022-02-08 17:11:33,601 on stmt: $282pred = call bool282($280is_op.26, func=bool282, args=(Var($280is_op.26, loop_hafnian.py:52),), kws=(), vararg=None, target=None)
DEBUG 2022-02-08 17:11:33,601 on stmt: jump 320
DEBUG 2022-02-08 17:11:33,601 ==== SSA block rewrite pass on 320
DEBUG 2022-02-08 17:11:33,601 Running <numba.core.ssa._FreshVarHandler object at 0x000001E9F644CEE0>
DEBUG 2022-02-08 17:11:33,601 on stmt: bool322 = global(bool: <class 'bool'>)
DEBUG 2022-02-08 17:11:33,601 on stmt: $322pred = call bool322(glynn, func=bool322, args=(Var(glynn, loop_hafnian.py:20),), kws=(), vararg=None, target=None)
DEBUG 2022-02-08 17:11:33,601 on stmt: branch $322pred, 326, 348
DEBUG 2022-02-08 17:11:33,601 ==== SSA block rewrite pass on 326
DEBUG 2022-02-08 17:11:33,601 Running <numba.core.ssa._FreshVarHandler object at 0x000001E9F644CEE0>
DEBUG 2022-02-08 17:11:33,601 on stmt: $const328.2 = const(int, 0)
DEBUG 2022-02-08 17:11:33,601 on stmt: $330binary_subscr.3 = static_getitem(value=kept_edges, index=0, index_var=$const328.2, fn=<built-in function getitem>)
DEBUG 2022-02-08 17:11:33,601 on stmt: $const332.4 = const(int, 0)
DEBUG 2022-02-08 17:11:33,601 on stmt: $334compare_op.5 = $330binary_subscr.3 == $const332.4
DEBUG 2022-02-08 17:11:33,601 on stmt: bool336 = global(bool: <class 'bool'>)
DEBUG 2022-02-08 17:11:33,601 on stmt: $336pred = call bool336($334compare_op.5, func=bool336, args=(Var($334compare_op.5, loop_hafnian.py:55),), kws=(), vararg=None, target=None)
DEBUG 2022-02-08 17:11:33,601 on stmt: branch $336pred, 340, 348
DEBUG 2022-02-08 17:11:33,601 ==== SSA block rewrite pass on 340
DEBUG 2022-02-08 17:11:33,601 Running <numba.core.ssa._FreshVarHandler object at 0x000001E9F644CEE0>
DEBUG 2022-02-08 17:11:33,601 on stmt: $const342.2 = const(float, 0.5)
DEBUG 2022-02-08 17:11:33,601 on stmt: $344inplace_multiply.3 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=prefac, rhs=$const342.2, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-08 17:11:33,601 on stmt: prefac = $344inplace_multiply.3
DEBUG 2022-02-08 17:11:33,601 on stmt: jump 348
DEBUG 2022-02-08 17:11:33,601 ==== SSA block rewrite pass on 348
DEBUG 2022-02-08 17:11:33,601 Running <numba.core.ssa._FreshVarHandler object at 0x000001E9F644CEE0>
DEBUG 2022-02-08 17:11:33,601 on stmt: $352load_global.3 = global(f_loop: CPUDispatcher(<function f_loop at 0x000001E9ECB30790>))
DEBUG 2022-02-08 17:11:33,601 on stmt: $364call_function.9 = call $352load_global.3(E, AX_S, XD_S, D_S, N, func=$352load_global.3, args=[Var(E, loop_hafnian.py:48), Var(AX_S, loop_hafnian.py:46), Var(XD_S, loop_hafnian.py:46), Var(D_S, loop_hafnian.py:46), Var(N, loop_hafnian.py:21)], kws=(), vararg=None, target=None)
DEBUG 2022-02-08 17:11:33,601 on stmt: $const368.11 = const(int, 2)
DEBUG 2022-02-08 17:11:33,601 on stmt: $370binary_floor_divide.12 = N // $const368.11
DEBUG 2022-02-08 17:11:33,601 on stmt: $372binary_subscr.13 = getitem(value=$364call_function.9, index=$370binary_floor_divide.12, fn=<built-in function getitem>)
DEBUG 2022-02-08 17:11:33,601 on stmt: $374binary_multiply.14 = prefac * $372binary_subscr.13
DEBUG 2022-02-08 17:11:33,601 on stmt: $376inplace_add.15 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=H, rhs=$374binary_multiply.14, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-08 17:11:33,601 on stmt: H = $376inplace_add.15
DEBUG 2022-02-08 17:11:33,601 on stmt: jump 437
DEBUG 2022-02-08 17:11:33,601 ==== SSA block rewrite pass on 382
DEBUG 2022-02-08 17:11:33,601 Running <numba.core.ssa._FreshVarHandler object at 0x000001E9F644CEE0>
DEBUG 2022-02-08 17:11:33,601 on stmt: bool384 = global(bool: <class 'bool'>)
DEBUG 2022-02-08 17:11:33,601 on stmt: $384pred = call bool384(glynn, func=bool384, args=(Var(glynn, loop_hafnian.py:20),), kws=(), vararg=None, target=None)
DEBUG 2022-02-08 17:11:33,601 on stmt: branch $384pred, 388, 436
DEBUG 2022-02-08 17:11:33,601 ==== SSA block rewrite pass on 388
DEBUG 2022-02-08 17:11:33,601 Running <numba.core.ssa._FreshVarHandler object at 0x000001E9F644CEE0>
DEBUG 2022-02-08 17:11:33,601 on stmt: $const390.1 = const(NoneType, None)
DEBUG 2022-02-08 17:11:33,601 on stmt: $392is_op.2 = const(int, 1)
DEBUG 2022-02-08 17:11:33,601 on stmt: bool394 = global(bool: <class 'bool'>)
DEBUG 2022-02-08 17:11:33,601 on stmt: $394pred = call bool394($392is_op.2, func=bool394, args=(Var($392is_op.2, loop_hafnian.py:60),), kws=(), vararg=None, target=None)
DEBUG 2022-02-08 17:11:33,601 on stmt: jump 398
DEBUG 2022-02-08 17:11:33,601 ==== SSA block rewrite pass on 398
DEBUG 2022-02-08 17:11:33,601 Running <numba.core.ssa._FreshVarHandler object at 0x000001E9F644CEE0>
DEBUG 2022-02-08 17:11:33,601 on stmt: $const400.1 = const(float, 0.5)
DEBUG 2022-02-08 17:11:33,601 on stmt: $const404.3 = const(int, 2)
DEBUG 2022-02-08 17:11:33,601 on stmt: $406binary_floor_divide.4 = N // $const404.3
DEBUG 2022-02-08 17:11:33,601 on stmt: $const408.5 = const(int, 1)
DEBUG 2022-02-08 17:11:33,601 on stmt: $410binary_subtract.6 = $406binary_floor_divide.4 - $const408.5
DEBUG 2022-02-08 17:11:33,601 on stmt: $412binary_power.7 = $const400.1 ** $410binary_subtract.6
DEBUG 2022-02-08 17:11:33,601 on stmt: $414binary_multiply.8 = H * $412binary_power.7
DEBUG 2022-02-08 17:11:33,601 on stmt: H = $414binary_multiply.8
DEBUG 2022-02-08 17:11:33,601 on stmt: jump 436
DEBUG 2022-02-08 17:11:33,601 ==== SSA block rewrite pass on 436
DEBUG 2022-02-08 17:11:33,601 Running <numba.core.ssa._FreshVarHandler object at 0x000001E9F644CEE0>
DEBUG 2022-02-08 17:11:33,617 on stmt: $438return_value.1 = cast(value=H)
DEBUG 2022-02-08 17:11:33,617 on stmt: return $438return_value.1
DEBUG 2022-02-08 17:11:33,617 ==== SSA block rewrite pass on 437
DEBUG 2022-02-08 17:11:33,617 Running <numba.core.ssa._FreshVarHandler object at 0x000001E9F644CEE0>
DEBUG 2022-02-08 17:11:33,617 on stmt: jump 142
DEBUG 2022-02-08 17:11:33,617 Replaced assignments: defaultdict(<class 'list'>,
            {52: [<numba.core.ir.Assign object at 0x000001E9F64F05E0>],
             92: [<numba.core.ir.Assign object at 0x000001E9F64F0D00>]})
DEBUG 2022-02-08 17:11:33,617 ==== SSA block rewrite pass on 0
DEBUG 2022-02-08 17:11:33,617 Running <numba.core.ssa._FixSSAVars object at 0x000001E9F644CEE0>
DEBUG 2022-02-08 17:11:33,617 on stmt: A = arg(0, name=A)
DEBUG 2022-02-08 17:11:33,617 on stmt: D = arg(1, name=D)
DEBUG 2022-02-08 17:11:33,617 on stmt: edge_reps = arg(2, name=edge_reps)
DEBUG 2022-02-08 17:11:33,617 on stmt: oddloop = arg(3, name=oddloop)
DEBUG 2022-02-08 17:11:33,617 on stmt: oddV = arg(4, name=oddV)
DEBUG 2022-02-08 17:11:33,617 on stmt: rank = arg(5, name=rank)
DEBUG 2022-02-08 17:11:33,617 on stmt: size = arg(6, name=size)
DEBUG 2022-02-08 17:11:33,617 on stmt: glynn = arg(7, name=glynn)
DEBUG 2022-02-08 17:11:33,617 on stmt: $4load_attr.1 = getattr(value=A, attr=shape)
DEBUG 2022-02-08 17:11:33,617 on stmt: $const6.2 = const(int, 0)
DEBUG 2022-02-08 17:11:33,617 on stmt: n = static_getitem(value=$4load_attr.1, index=0, index_var=$const6.2, fn=<built-in function getitem>)
DEBUG 2022-02-08 17:11:33,617 on stmt: $const12.4 = const(int, 2)
DEBUG 2022-02-08 17:11:33,617 on stmt: $16load_method.6 = getattr(value=edge_reps, attr=sum)
DEBUG 2022-02-08 17:11:33,617 on stmt: $18call_method.7 = call $16load_method.6(func=$16load_method.6, args=[], kws=(), vararg=None, target=None)
DEBUG 2022-02-08 17:11:33,617 on stmt: N = $const12.4 * $18call_method.7
DEBUG 2022-02-08 17:11:33,617 on stmt: $const26.10 = const(NoneType, None)
DEBUG 2022-02-08 17:11:33,617 on stmt: $28is_op.11 = const(int, 0)
DEBUG 2022-02-08 17:11:33,617 on stmt: bool30 = global(bool: <class 'bool'>)
DEBUG 2022-02-08 17:11:33,617 on stmt: $30pred = call bool30($28is_op.11, func=bool30, args=(Var($28is_op.11, loop_hafnian.py:22),), kws=(), vararg=None, target=None)
DEBUG 2022-02-08 17:11:33,617 on stmt: jump 40
DEBUG 2022-02-08 17:11:33,617 ==== SSA block rewrite pass on 40
DEBUG 2022-02-08 17:11:33,617 Running <numba.core.ssa._FixSSAVars object at 0x000001E9F644CEE0>
DEBUG 2022-02-08 17:11:33,617 on stmt: bool42 = global(bool: <class 'bool'>)
DEBUG 2022-02-08 17:11:33,617 on stmt: $42pred = call bool42(glynn, func=bool42, args=(Var(glynn, loop_hafnian.py:20),), kws=(), vararg=None, target=None)
DEBUG 2022-02-08 17:11:33,617 on stmt: branch $42pred, 44, 92
DEBUG 2022-02-08 17:11:33,617 ==== SSA block rewrite pass on 44
DEBUG 2022-02-08 17:11:33,617 Running <numba.core.ssa._FixSSAVars object at 0x000001E9F644CEE0>
DEBUG 2022-02-08 17:11:33,617 on stmt: $const46.1 = const(NoneType, None)
DEBUG 2022-02-08 17:11:33,617 on stmt: $48is_op.2 = const(int, 1)
DEBUG 2022-02-08 17:11:33,617 on stmt: bool50 = global(bool: <class 'bool'>)
DEBUG 2022-02-08 17:11:33,617 on stmt: $50pred = call bool50($48is_op.2, func=bool50, args=(Var($48is_op.2, loop_hafnian.py:24),), kws=(), vararg=None, target=None)
DEBUG 2022-02-08 17:11:33,617 on stmt: jump 52
DEBUG 2022-02-08 17:11:33,617 ==== SSA block rewrite pass on 52
DEBUG 2022-02-08 17:11:33,617 Running <numba.core.ssa._FixSSAVars object at 0x000001E9F644CEE0>
DEBUG 2022-02-08 17:11:33,617 on stmt: $const54.1 = const(int, 0)
DEBUG 2022-02-08 17:11:33,617 on stmt: $56binary_subscr.2 = static_getitem(value=edge_reps, index=0, index_var=$const54.1, fn=<built-in function getitem>)
DEBUG 2022-02-08 17:11:33,617 on stmt: $const58.3 = const(int, 2)
DEBUG 2022-02-08 17:11:33,617 on stmt: $60binary_add.4 = $56binary_subscr.2 + $const58.3
DEBUG 2022-02-08 17:11:33,617 on stmt: $const62.5 = const(int, 2)
DEBUG 2022-02-08 17:11:33,617 on stmt: $64binary_floor_divide.6 = $60binary_add.4 // $const62.5
DEBUG 2022-02-08 17:11:33,617 on stmt: $66load_global.7 = global(np: <module 'numpy' from 'C:\\Users\\zl4821\\Anaconda3\\envs\\GBS\\lib\\site-packages\\numpy\\__init__.py'>)
DEBUG 2022-02-08 17:11:33,617 on stmt: $68load_method.8 = getattr(value=$66load_global.7, attr=prod)
DEBUG 2022-02-08 17:11:33,617 on stmt: $const72.10 = const(int, 1)
DEBUG 2022-02-08 17:11:33,617 on stmt: $const74.11 = const(NoneType, None)
DEBUG 2022-02-08 17:11:33,617 on stmt: $76build_slice.12 = global(slice: <class 'slice'>)
DEBUG 2022-02-08 17:11:33,617 on stmt: $76build_slice.13 = call $76build_slice.12($const72.10, $const74.11, func=$76build_slice.12, args=(Var($const72.10, loop_hafnian.py:25), Var($const74.11, loop_hafnian.py:25)), kws=(), vararg=None, target=None)
DEBUG 2022-02-08 17:11:33,617 on stmt: $78binary_subscr.14 = static_getitem(value=edge_reps, index=slice(1, None, None), index_var=$76build_slice.13, fn=<built-in function getitem>)
DEBUG 2022-02-08 17:11:33,617 on stmt: $const80.15 = const(int, 1)
DEBUG 2022-02-08 17:11:33,617 on stmt: $82binary_add.16 = $78binary_subscr.14 + $const80.15
DEBUG 2022-02-08 17:11:33,617 on stmt: $84call_method.17 = call $68load_method.8($82binary_add.16, func=$68load_method.8, args=[Var($82binary_add.16, loop_hafnian.py:25)], kws=(), vararg=None, target=None)
DEBUG 2022-02-08 17:11:33,617 on stmt: steps = $64binary_floor_divide.6 * $84call_method.17
DEBUG 2022-02-08 17:11:33,617 on stmt: jump 106
DEBUG 2022-02-08 17:11:33,617 ==== SSA block rewrite pass on 92
DEBUG 2022-02-08 17:11:33,617 Running <numba.core.ssa._FixSSAVars object at 0x000001E9F644CEE0>
DEBUG 2022-02-08 17:11:33,617 on stmt: $92load_global.0 = global(np: <module 'numpy' from 'C:\\Users\\zl4821\\Anaconda3\\envs\\GBS\\lib\\site-packages\\numpy\\__init__.py'>)
DEBUG 2022-02-08 17:11:33,617 on stmt: $94load_method.1 = getattr(value=$92load_global.0, attr=prod)
DEBUG 2022-02-08 17:11:33,617 on stmt: $const98.3 = const(int, 1)
DEBUG 2022-02-08 17:11:33,617 on stmt: $100binary_add.4 = edge_reps + $const98.3
DEBUG 2022-02-08 17:11:33,617 on stmt: steps.1 = call $94load_method.1($100binary_add.4, func=$94load_method.1, args=[Var($100binary_add.4, loop_hafnian.py:27)], kws=(), vararg=None, target=None)
DEBUG 2022-02-08 17:11:33,617 on stmt: jump 106
DEBUG 2022-02-08 17:11:33,617 ==== SSA block rewrite pass on 106
DEBUG 2022-02-08 17:11:33,617 Running <numba.core.ssa._FixSSAVars object at 0x000001E9F644CEE0>
DEBUG 2022-02-08 17:11:33,617 on stmt: $108load_method.1 = getattr(value=edge_reps, attr=max)
DEBUG 2022-02-08 17:11:33,617 on stmt: $110call_method.2 = call $108load_method.1(func=$108load_method.1, args=[], kws=(), vararg=None, target=None)
DEBUG 2022-02-08 17:11:33,617 on stmt: $const112.3 = const(int, 1)
DEBUG 2022-02-08 17:11:33,617 on stmt: max_binom = $110call_method.2 + $const112.3
DEBUG 2022-02-08 17:11:33,617 on stmt: $118load_global.5 = global(precompute_binoms: CPUDispatcher(<function precompute_binoms at 0x000001E9ECB30160>))
DEBUG 2022-02-08 17:11:33,617 on stmt: binoms = call $118load_global.5(max_binom, func=$118load_global.5, args=[Var(max_binom, loop_hafnian.py:29)], kws=(), vararg=None, target=None)
DEBUG 2022-02-08 17:11:33,617 on stmt: H = const(int, 0)
DEBUG 2022-02-08 17:11:33,617 on stmt: $130load_global.9 = global(range: <class 'range'>)
DEBUG 2022-02-08 17:11:33,617 on stmt: $138call_function.13 = call $130load_global.9(rank, steps, size, func=$130load_global.9, args=[Var(rank, loop_hafnian.py:20), Var(steps, loop_hafnian.py:25), Var(size, loop_hafnian.py:20)], kws=(), vararg=None, target=None)
DEBUG 2022-02-08 17:11:33,617 find_def var='steps' stmt=$138call_function.13 = call $130load_global.9(rank, steps, size, func=$130load_global.9, args=[Var(rank, loop_hafnian.py:20), Var(steps, loop_hafnian.py:25), Var(size, loop_hafnian.py:20)], kws=(), vararg=None, target=None)
DEBUG 2022-02-08 17:11:33,617 find_def_from_top label 106
DEBUG 2022-02-08 17:11:33,617 insert phi node steps.2 = phi(incoming_values=[], incoming_blocks=[]) at 106
DEBUG 2022-02-08 17:11:33,617 find_def_from_bottom label 52
DEBUG 2022-02-08 17:11:33,617 incoming_def steps = $64binary_floor_divide.6 * $84call_method.17
DEBUG 2022-02-08 17:11:33,617 find_def_from_bottom label 92
DEBUG 2022-02-08 17:11:33,617 incoming_def steps.1 = call $94load_method.1($100binary_add.4, func=$94load_method.1, args=[Var($100binary_add.4, loop_hafnian.py:27)], kws=(), vararg=None, target=None)
DEBUG 2022-02-08 17:11:33,617 replaced with: $138call_function.13 = call $130load_global.9(rank, steps.2, size, func=$130load_global.9, args=[Var(rank, loop_hafnian.py:20), Var(steps.2, loop_hafnian.py:29), Var(size, loop_hafnian.py:20)], kws=(), vararg=None, target=None)
DEBUG 2022-02-08 17:11:33,617 on stmt: $140get_iter.14 = getiter(value=$138call_function.13)
DEBUG 2022-02-08 17:11:33,617 on stmt: $phi142.0 = $140get_iter.14
DEBUG 2022-02-08 17:11:33,617 on stmt: jump 142
DEBUG 2022-02-08 17:11:33,617 ==== SSA block rewrite pass on 142
DEBUG 2022-02-08 17:11:33,617 Running <numba.core.ssa._FixSSAVars object at 0x000001E9F644CEE0>
DEBUG 2022-02-08 17:11:33,617 on stmt: $142for_iter.1 = iternext(value=$phi142.0)
DEBUG 2022-02-08 17:11:33,617 on stmt: $142for_iter.2 = pair_first(value=$142for_iter.1)
DEBUG 2022-02-08 17:11:33,617 on stmt: $142for_iter.3 = pair_second(value=$142for_iter.1)
DEBUG 2022-02-08 17:11:33,617 on stmt: $phi144.1 = $142for_iter.2
DEBUG 2022-02-08 17:11:33,617 on stmt: branch $142for_iter.3, 144, 382
DEBUG 2022-02-08 17:11:33,617 ==== SSA block rewrite pass on 144
DEBUG 2022-02-08 17:11:33,617 Running <numba.core.ssa._FixSSAVars object at 0x000001E9F644CEE0>
DEBUG 2022-02-08 17:11:33,617 on stmt: j = $phi144.1
DEBUG 2022-02-08 17:11:33,617 on stmt: $146load_global.2 = global(find_kept_edges: CPUDispatcher(<function find_kept_edges at 0x000001E9ECB305E0>))
DEBUG 2022-02-08 17:11:33,617 on stmt: kept_edges = call $146load_global.2(j, edge_reps, func=$146load_global.2, args=[Var(j, loop_hafnian.py:34), Var(edge_reps, loop_hafnian.py:20)], kws=(), vararg=None, target=None)
DEBUG 2022-02-08 17:11:33,617 on stmt: $158load_method.7 = getattr(value=kept_edges, attr=sum)
DEBUG 2022-02-08 17:11:33,617 on stmt: edge_sum = call $158load_method.7(func=$158load_method.7, args=[], kws=(), vararg=None, target=None)
DEBUG 2022-02-08 17:11:33,617 on stmt: binom_prod = const(float, 1.0)
DEBUG 2022-02-08 17:11:33,617 on stmt: $168load_global.10 = global(range: <class 'range'>)
DEBUG 2022-02-08 17:11:33,617 on stmt: $const172.12 = const(int, 2)
DEBUG 2022-02-08 17:11:33,617 on stmt: $174binary_floor_divide.13 = n // $const172.12
DEBUG 2022-02-08 17:11:33,617 on stmt: $176call_function.14 = call $168load_global.10($174binary_floor_divide.13, func=$168load_global.10, args=[Var($174binary_floor_divide.13, loop_hafnian.py:40)], kws=(), vararg=None, target=None)
DEBUG 2022-02-08 17:11:33,617 on stmt: $178get_iter.15 = getiter(value=$176call_function.14)
DEBUG 2022-02-08 17:11:33,617 on stmt: $phi180.1 = $178get_iter.15
DEBUG 2022-02-08 17:11:33,617 on stmt: jump 180
DEBUG 2022-02-08 17:11:33,617 ==== SSA block rewrite pass on 180
DEBUG 2022-02-08 17:11:33,617 Running <numba.core.ssa._FixSSAVars object at 0x000001E9F644CEE0>
DEBUG 2022-02-08 17:11:33,617 on stmt: $180for_iter.2 = iternext(value=$phi180.1)
DEBUG 2022-02-08 17:11:33,617 on stmt: $180for_iter.3 = pair_first(value=$180for_iter.2)
DEBUG 2022-02-08 17:11:33,617 on stmt: $180for_iter.4 = pair_second(value=$180for_iter.2)
DEBUG 2022-02-08 17:11:33,617 on stmt: $phi182.2 = $180for_iter.3
DEBUG 2022-02-08 17:11:33,617 on stmt: branch $180for_iter.4, 182, 210
DEBUG 2022-02-08 17:11:33,617 ==== SSA block rewrite pass on 182
DEBUG 2022-02-08 17:11:33,617 Running <numba.core.ssa._FixSSAVars object at 0x000001E9F644CEE0>
DEBUG 2022-02-08 17:11:33,617 on stmt: i = $phi182.2
DEBUG 2022-02-08 17:11:33,617 on stmt: $192binary_subscr.7 = getitem(value=edge_reps, index=i, fn=<built-in function getitem>)
DEBUG 2022-02-08 17:11:33,617 on stmt: $198binary_subscr.10 = getitem(value=kept_edges, index=i, fn=<built-in function getitem>)
DEBUG 2022-02-08 17:11:33,617 on stmt: $200build_tuple.11 = build_tuple(items=[Var($192binary_subscr.7, loop_hafnian.py:41), Var($198binary_subscr.10, loop_hafnian.py:41)])
DEBUG 2022-02-08 17:11:33,617 on stmt: $202binary_subscr.12 = getitem(value=binoms, index=$200build_tuple.11, fn=<built-in function getitem>)
DEBUG 2022-02-08 17:11:33,617 on stmt: $204inplace_multiply.13 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=binom_prod, rhs=$202binary_subscr.12, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-08 17:11:33,617 on stmt: binom_prod = $204inplace_multiply.13
DEBUG 2022-02-08 17:11:33,617 on stmt: jump 180
DEBUG 2022-02-08 17:11:33,617 ==== SSA block rewrite pass on 210
DEBUG 2022-02-08 17:11:33,617 Running <numba.core.ssa._FixSSAVars object at 0x000001E9F644CEE0>
DEBUG 2022-02-08 17:11:33,617 on stmt: bool212 = global(bool: <class 'bool'>)
DEBUG 2022-02-08 17:11:33,617 on stmt: $212pred = call bool212(glynn, func=bool212, args=(Var(glynn, loop_hafnian.py:20),), kws=(), vararg=None, target=None)
DEBUG 2022-02-08 17:11:33,617 on stmt: branch $212pred, 214, 226
DEBUG 2022-02-08 17:11:33,617 ==== SSA block rewrite pass on 214
DEBUG 2022-02-08 17:11:33,617 Running <numba.core.ssa._FixSSAVars object at 0x000001E9F644CEE0>
DEBUG 2022-02-08 17:11:33,617 on stmt: $const214.1 = const(int, 2)
DEBUG 2022-02-08 17:11:33,617 on stmt: $218binary_multiply.3 = $const214.1 * kept_edges
DEBUG 2022-02-08 17:11:33,617 on stmt: kept_edges = $218binary_multiply.3 - edge_reps
DEBUG 2022-02-08 17:11:33,617 on stmt: jump 226
DEBUG 2022-02-08 17:11:33,617 ==== SSA block rewrite pass on 226
DEBUG 2022-02-08 17:11:33,617 Running <numba.core.ssa._FixSSAVars object at 0x000001E9F644CEE0>
DEBUG 2022-02-08 17:11:33,617 on stmt: $226load_global.1 = global(get_submatrices: CPUDispatcher(<function get_submatrices at 0x000001E9ECB30AF0>))
DEBUG 2022-02-08 17:11:33,617 on stmt: $236call_function.6 = call $226load_global.1(kept_edges, A, D, oddV, func=$226load_global.1, args=[Var(kept_edges, loop_hafnian.py:36), Var(A, loop_hafnian.py:20), Var(D, loop_hafnian.py:20), Var(oddV, loop_hafnian.py:20)], kws=(), vararg=None, target=None)
DEBUG 2022-02-08 17:11:33,617 on stmt: $238unpack_sequence.11 = exhaust_iter(value=$236call_function.6, count=4)
DEBUG 2022-02-08 17:11:33,617 on stmt: $238unpack_sequence.7 = static_getitem(value=$238unpack_sequence.11, index=0, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-02-08 17:11:33,617 on stmt: $238unpack_sequence.8 = static_getitem(value=$238unpack_sequence.11, index=1, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-02-08 17:11:33,617 on stmt: $238unpack_sequence.9 = static_getitem(value=$238unpack_sequence.11, index=2, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-02-08 17:11:33,617 on stmt: $238unpack_sequence.10 = static_getitem(value=$238unpack_sequence.11, index=3, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-02-08 17:11:33,617 on stmt: AX_S = $238unpack_sequence.7
DEBUG 2022-02-08 17:11:33,617 on stmt: XD_S = $238unpack_sequence.8
DEBUG 2022-02-08 17:11:33,617 on stmt: D_S = $238unpack_sequence.9
DEBUG 2022-02-08 17:11:33,617 on stmt: oddVX_S = $238unpack_sequence.10
DEBUG 2022-02-08 17:11:33,617 on stmt: $248load_global.12 = global(eigvals: CPUDispatcher(<function eigvals at 0x000001E9ECB4E040>))
DEBUG 2022-02-08 17:11:33,617 on stmt: E = call $248load_global.12(AX_S, func=$248load_global.12, args=[Var(AX_S, loop_hafnian.py:46)], kws=(), vararg=None, target=None)
DEBUG 2022-02-08 17:11:33,617 on stmt: $const256.15 = const(float, -1.0)
DEBUG 2022-02-08 17:11:33,617 on stmt: $const260.17 = const(int, 2)
DEBUG 2022-02-08 17:11:33,617 on stmt: $262binary_floor_divide.18 = N // $const260.17
DEBUG 2022-02-08 17:11:33,617 on stmt: $266binary_subtract.20 = $262binary_floor_divide.18 - edge_sum
DEBUG 2022-02-08 17:11:33,617 on stmt: $268binary_power.21 = $const256.15 ** $266binary_subtract.20
DEBUG 2022-02-08 17:11:33,617 on stmt: prefac = $268binary_power.21 * binom_prod
DEBUG 2022-02-08 17:11:33,617 on stmt: $const278.25 = const(NoneType, None)
DEBUG 2022-02-08 17:11:33,633 on stmt: $280is_op.26 = const(int, 0)
DEBUG 2022-02-08 17:11:33,633 on stmt: bool282 = global(bool: <class 'bool'>)
DEBUG 2022-02-08 17:11:33,633 on stmt: $282pred = call bool282($280is_op.26, func=bool282, args=(Var($280is_op.26, loop_hafnian.py:52),), kws=(), vararg=None, target=None)
DEBUG 2022-02-08 17:11:33,633 on stmt: jump 320
DEBUG 2022-02-08 17:11:33,633 ==== SSA block rewrite pass on 320
DEBUG 2022-02-08 17:11:33,633 Running <numba.core.ssa._FixSSAVars object at 0x000001E9F644CEE0>
DEBUG 2022-02-08 17:11:33,633 on stmt: bool322 = global(bool: <class 'bool'>)
DEBUG 2022-02-08 17:11:33,633 on stmt: $322pred = call bool322(glynn, func=bool322, args=(Var(glynn, loop_hafnian.py:20),), kws=(), vararg=None, target=None)
DEBUG 2022-02-08 17:11:33,633 on stmt: branch $322pred, 326, 348
DEBUG 2022-02-08 17:11:33,633 ==== SSA block rewrite pass on 326
DEBUG 2022-02-08 17:11:33,633 Running <numba.core.ssa._FixSSAVars object at 0x000001E9F644CEE0>
DEBUG 2022-02-08 17:11:33,633 on stmt: $const328.2 = const(int, 0)
DEBUG 2022-02-08 17:11:33,633 on stmt: $330binary_subscr.3 = static_getitem(value=kept_edges, index=0, index_var=$const328.2, fn=<built-in function getitem>)
DEBUG 2022-02-08 17:11:33,633 on stmt: $const332.4 = const(int, 0)
DEBUG 2022-02-08 17:11:33,633 on stmt: $334compare_op.5 = $330binary_subscr.3 == $const332.4
DEBUG 2022-02-08 17:11:33,633 on stmt: bool336 = global(bool: <class 'bool'>)
DEBUG 2022-02-08 17:11:33,633 on stmt: $336pred = call bool336($334compare_op.5, func=bool336, args=(Var($334compare_op.5, loop_hafnian.py:55),), kws=(), vararg=None, target=None)
DEBUG 2022-02-08 17:11:33,633 on stmt: branch $336pred, 340, 348
DEBUG 2022-02-08 17:11:33,633 ==== SSA block rewrite pass on 340
DEBUG 2022-02-08 17:11:33,633 Running <numba.core.ssa._FixSSAVars object at 0x000001E9F644CEE0>
DEBUG 2022-02-08 17:11:33,633 on stmt: $const342.2 = const(float, 0.5)
DEBUG 2022-02-08 17:11:33,633 on stmt: $344inplace_multiply.3 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=prefac, rhs=$const342.2, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-08 17:11:33,633 on stmt: prefac = $344inplace_multiply.3
DEBUG 2022-02-08 17:11:33,633 on stmt: jump 348
DEBUG 2022-02-08 17:11:33,633 ==== SSA block rewrite pass on 348
DEBUG 2022-02-08 17:11:33,633 Running <numba.core.ssa._FixSSAVars object at 0x000001E9F644CEE0>
DEBUG 2022-02-08 17:11:33,633 on stmt: $352load_global.3 = global(f_loop: CPUDispatcher(<function f_loop at 0x000001E9ECB30790>))
DEBUG 2022-02-08 17:11:33,633 on stmt: $364call_function.9 = call $352load_global.3(E, AX_S, XD_S, D_S, N, func=$352load_global.3, args=[Var(E, loop_hafnian.py:48), Var(AX_S, loop_hafnian.py:46), Var(XD_S, loop_hafnian.py:46), Var(D_S, loop_hafnian.py:46), Var(N, loop_hafnian.py:21)], kws=(), vararg=None, target=None)
DEBUG 2022-02-08 17:11:33,633 on stmt: $const368.11 = const(int, 2)
DEBUG 2022-02-08 17:11:33,633 on stmt: $370binary_floor_divide.12 = N // $const368.11
DEBUG 2022-02-08 17:11:33,633 on stmt: $372binary_subscr.13 = getitem(value=$364call_function.9, index=$370binary_floor_divide.12, fn=<built-in function getitem>)
DEBUG 2022-02-08 17:11:33,633 on stmt: $374binary_multiply.14 = prefac * $372binary_subscr.13
DEBUG 2022-02-08 17:11:33,633 on stmt: $376inplace_add.15 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=H, rhs=$374binary_multiply.14, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-08 17:11:33,633 on stmt: H = $376inplace_add.15
DEBUG 2022-02-08 17:11:33,633 on stmt: jump 437
DEBUG 2022-02-08 17:11:33,633 ==== SSA block rewrite pass on 382
DEBUG 2022-02-08 17:11:33,633 Running <numba.core.ssa._FixSSAVars object at 0x000001E9F644CEE0>
DEBUG 2022-02-08 17:11:33,633 on stmt: bool384 = global(bool: <class 'bool'>)
DEBUG 2022-02-08 17:11:33,633 on stmt: $384pred = call bool384(glynn, func=bool384, args=(Var(glynn, loop_hafnian.py:20),), kws=(), vararg=None, target=None)
DEBUG 2022-02-08 17:11:33,633 on stmt: branch $384pred, 388, 436
DEBUG 2022-02-08 17:11:33,633 ==== SSA block rewrite pass on 388
DEBUG 2022-02-08 17:11:33,633 Running <numba.core.ssa._FixSSAVars object at 0x000001E9F644CEE0>
DEBUG 2022-02-08 17:11:33,633 on stmt: $const390.1 = const(NoneType, None)
DEBUG 2022-02-08 17:11:33,633 on stmt: $392is_op.2 = const(int, 1)
DEBUG 2022-02-08 17:11:33,633 on stmt: bool394 = global(bool: <class 'bool'>)
DEBUG 2022-02-08 17:11:33,633 on stmt: $394pred = call bool394($392is_op.2, func=bool394, args=(Var($392is_op.2, loop_hafnian.py:60),), kws=(), vararg=None, target=None)
DEBUG 2022-02-08 17:11:33,633 on stmt: jump 398
DEBUG 2022-02-08 17:11:33,633 ==== SSA block rewrite pass on 398
DEBUG 2022-02-08 17:11:33,633 Running <numba.core.ssa._FixSSAVars object at 0x000001E9F644CEE0>
DEBUG 2022-02-08 17:11:33,633 on stmt: $const400.1 = const(float, 0.5)
DEBUG 2022-02-08 17:11:33,633 on stmt: $const404.3 = const(int, 2)
DEBUG 2022-02-08 17:11:33,633 on stmt: $406binary_floor_divide.4 = N // $const404.3
DEBUG 2022-02-08 17:11:33,633 on stmt: $const408.5 = const(int, 1)
DEBUG 2022-02-08 17:11:33,633 on stmt: $410binary_subtract.6 = $406binary_floor_divide.4 - $const408.5
DEBUG 2022-02-08 17:11:33,633 on stmt: $412binary_power.7 = $const400.1 ** $410binary_subtract.6
DEBUG 2022-02-08 17:11:33,633 on stmt: $414binary_multiply.8 = H * $412binary_power.7
DEBUG 2022-02-08 17:11:33,633 on stmt: H = $414binary_multiply.8
DEBUG 2022-02-08 17:11:33,633 on stmt: jump 436
DEBUG 2022-02-08 17:11:33,633 ==== SSA block rewrite pass on 436
DEBUG 2022-02-08 17:11:33,633 Running <numba.core.ssa._FixSSAVars object at 0x000001E9F644CEE0>
DEBUG 2022-02-08 17:11:33,633 on stmt: $438return_value.1 = cast(value=H)
DEBUG 2022-02-08 17:11:33,633 on stmt: return $438return_value.1
DEBUG 2022-02-08 17:11:33,633 ==== SSA block rewrite pass on 437
DEBUG 2022-02-08 17:11:33,633 Running <numba.core.ssa._FixSSAVars object at 0x000001E9F644CEE0>
DEBUG 2022-02-08 17:11:33,633 on stmt: jump 142
DEBUG 2022-02-08 17:11:33,633 Fix SSA violator on var binom_prod
DEBUG 2022-02-08 17:11:33,633 ==== SSA block rewrite pass on 0
DEBUG 2022-02-08 17:11:33,633 Running <numba.core.ssa._FreshVarHandler object at 0x000001E9F64E7610>
DEBUG 2022-02-08 17:11:33,633 on stmt: A = arg(0, name=A)
DEBUG 2022-02-08 17:11:33,633 on stmt: D = arg(1, name=D)
DEBUG 2022-02-08 17:11:33,633 on stmt: edge_reps = arg(2, name=edge_reps)
DEBUG 2022-02-08 17:11:33,633 on stmt: oddloop = arg(3, name=oddloop)
DEBUG 2022-02-08 17:11:33,633 on stmt: oddV = arg(4, name=oddV)
DEBUG 2022-02-08 17:11:33,633 on stmt: rank = arg(5, name=rank)
DEBUG 2022-02-08 17:11:33,633 on stmt: size = arg(6, name=size)
DEBUG 2022-02-08 17:11:33,633 on stmt: glynn = arg(7, name=glynn)
DEBUG 2022-02-08 17:11:33,633 on stmt: $4load_attr.1 = getattr(value=A, attr=shape)
DEBUG 2022-02-08 17:11:33,633 on stmt: $const6.2 = const(int, 0)
DEBUG 2022-02-08 17:11:33,633 on stmt: n = static_getitem(value=$4load_attr.1, index=0, index_var=$const6.2, fn=<built-in function getitem>)
DEBUG 2022-02-08 17:11:33,633 on stmt: $const12.4 = const(int, 2)
DEBUG 2022-02-08 17:11:33,633 on stmt: $16load_method.6 = getattr(value=edge_reps, attr=sum)
DEBUG 2022-02-08 17:11:33,633 on stmt: $18call_method.7 = call $16load_method.6(func=$16load_method.6, args=[], kws=(), vararg=None, target=None)
DEBUG 2022-02-08 17:11:33,633 on stmt: N = $const12.4 * $18call_method.7
DEBUG 2022-02-08 17:11:33,633 on stmt: $const26.10 = const(NoneType, None)
DEBUG 2022-02-08 17:11:33,633 on stmt: $28is_op.11 = const(int, 0)
DEBUG 2022-02-08 17:11:33,633 on stmt: bool30 = global(bool: <class 'bool'>)
DEBUG 2022-02-08 17:11:33,633 on stmt: $30pred = call bool30($28is_op.11, func=bool30, args=(Var($28is_op.11, loop_hafnian.py:22),), kws=(), vararg=None, target=None)
DEBUG 2022-02-08 17:11:33,633 on stmt: jump 40
DEBUG 2022-02-08 17:11:33,633 ==== SSA block rewrite pass on 40
DEBUG 2022-02-08 17:11:33,633 Running <numba.core.ssa._FreshVarHandler object at 0x000001E9F64E7610>
DEBUG 2022-02-08 17:11:33,633 on stmt: bool42 = global(bool: <class 'bool'>)
DEBUG 2022-02-08 17:11:33,633 on stmt: $42pred = call bool42(glynn, func=bool42, args=(Var(glynn, loop_hafnian.py:20),), kws=(), vararg=None, target=None)
DEBUG 2022-02-08 17:11:33,633 on stmt: branch $42pred, 44, 92
DEBUG 2022-02-08 17:11:33,633 ==== SSA block rewrite pass on 44
DEBUG 2022-02-08 17:11:33,633 Running <numba.core.ssa._FreshVarHandler object at 0x000001E9F64E7610>
DEBUG 2022-02-08 17:11:33,633 on stmt: $const46.1 = const(NoneType, None)
DEBUG 2022-02-08 17:11:33,633 on stmt: $48is_op.2 = const(int, 1)
DEBUG 2022-02-08 17:11:33,633 on stmt: bool50 = global(bool: <class 'bool'>)
DEBUG 2022-02-08 17:11:33,633 on stmt: $50pred = call bool50($48is_op.2, func=bool50, args=(Var($48is_op.2, loop_hafnian.py:24),), kws=(), vararg=None, target=None)
DEBUG 2022-02-08 17:11:33,633 on stmt: jump 52
DEBUG 2022-02-08 17:11:33,633 ==== SSA block rewrite pass on 52
DEBUG 2022-02-08 17:11:33,633 Running <numba.core.ssa._FreshVarHandler object at 0x000001E9F64E7610>
DEBUG 2022-02-08 17:11:33,633 on stmt: $const54.1 = const(int, 0)
DEBUG 2022-02-08 17:11:33,633 on stmt: $56binary_subscr.2 = static_getitem(value=edge_reps, index=0, index_var=$const54.1, fn=<built-in function getitem>)
DEBUG 2022-02-08 17:11:33,633 on stmt: $const58.3 = const(int, 2)
DEBUG 2022-02-08 17:11:33,633 on stmt: $60binary_add.4 = $56binary_subscr.2 + $const58.3
DEBUG 2022-02-08 17:11:33,633 on stmt: $const62.5 = const(int, 2)
DEBUG 2022-02-08 17:11:33,633 on stmt: $64binary_floor_divide.6 = $60binary_add.4 // $const62.5
DEBUG 2022-02-08 17:11:33,633 on stmt: $66load_global.7 = global(np: <module 'numpy' from 'C:\\Users\\zl4821\\Anaconda3\\envs\\GBS\\lib\\site-packages\\numpy\\__init__.py'>)
DEBUG 2022-02-08 17:11:33,633 on stmt: $68load_method.8 = getattr(value=$66load_global.7, attr=prod)
DEBUG 2022-02-08 17:11:33,633 on stmt: $const72.10 = const(int, 1)
DEBUG 2022-02-08 17:11:33,633 on stmt: $const74.11 = const(NoneType, None)
DEBUG 2022-02-08 17:11:33,633 on stmt: $76build_slice.12 = global(slice: <class 'slice'>)
DEBUG 2022-02-08 17:11:33,633 on stmt: $76build_slice.13 = call $76build_slice.12($const72.10, $const74.11, func=$76build_slice.12, args=(Var($const72.10, loop_hafnian.py:25), Var($const74.11, loop_hafnian.py:25)), kws=(), vararg=None, target=None)
DEBUG 2022-02-08 17:11:33,633 on stmt: $78binary_subscr.14 = static_getitem(value=edge_reps, index=slice(1, None, None), index_var=$76build_slice.13, fn=<built-in function getitem>)
DEBUG 2022-02-08 17:11:33,633 on stmt: $const80.15 = const(int, 1)
DEBUG 2022-02-08 17:11:33,633 on stmt: $82binary_add.16 = $78binary_subscr.14 + $const80.15
DEBUG 2022-02-08 17:11:33,633 on stmt: $84call_method.17 = call $68load_method.8($82binary_add.16, func=$68load_method.8, args=[Var($82binary_add.16, loop_hafnian.py:25)], kws=(), vararg=None, target=None)
DEBUG 2022-02-08 17:11:33,633 on stmt: steps = $64binary_floor_divide.6 * $84call_method.17
DEBUG 2022-02-08 17:11:33,633 on stmt: jump 106
DEBUG 2022-02-08 17:11:33,633 ==== SSA block rewrite pass on 92
DEBUG 2022-02-08 17:11:33,633 Running <numba.core.ssa._FreshVarHandler object at 0x000001E9F64E7610>
DEBUG 2022-02-08 17:11:33,633 on stmt: $92load_global.0 = global(np: <module 'numpy' from 'C:\\Users\\zl4821\\Anaconda3\\envs\\GBS\\lib\\site-packages\\numpy\\__init__.py'>)
DEBUG 2022-02-08 17:11:33,633 on stmt: $94load_method.1 = getattr(value=$92load_global.0, attr=prod)
DEBUG 2022-02-08 17:11:33,633 on stmt: $const98.3 = const(int, 1)
DEBUG 2022-02-08 17:11:33,633 on stmt: $100binary_add.4 = edge_reps + $const98.3
DEBUG 2022-02-08 17:11:33,633 on stmt: steps.1 = call $94load_method.1($100binary_add.4, func=$94load_method.1, args=[Var($100binary_add.4, loop_hafnian.py:27)], kws=(), vararg=None, target=None)
DEBUG 2022-02-08 17:11:33,633 on stmt: jump 106
DEBUG 2022-02-08 17:11:33,633 ==== SSA block rewrite pass on 106
DEBUG 2022-02-08 17:11:33,633 Running <numba.core.ssa._FreshVarHandler object at 0x000001E9F64E7610>
DEBUG 2022-02-08 17:11:33,633 on stmt: steps.2 = phi(incoming_values=[Var(steps, loop_hafnian.py:25), Var(steps.1, loop_hafnian.py:27)], incoming_blocks=[52, 92])
DEBUG 2022-02-08 17:11:33,633 on stmt: $108load_method.1 = getattr(value=edge_reps, attr=max)
DEBUG 2022-02-08 17:11:33,633 on stmt: $110call_method.2 = call $108load_method.1(func=$108load_method.1, args=[], kws=(), vararg=None, target=None)
DEBUG 2022-02-08 17:11:33,633 on stmt: $const112.3 = const(int, 1)
DEBUG 2022-02-08 17:11:33,633 on stmt: max_binom = $110call_method.2 + $const112.3
DEBUG 2022-02-08 17:11:33,633 on stmt: $118load_global.5 = global(precompute_binoms: CPUDispatcher(<function precompute_binoms at 0x000001E9ECB30160>))
DEBUG 2022-02-08 17:11:33,633 on stmt: binoms = call $118load_global.5(max_binom, func=$118load_global.5, args=[Var(max_binom, loop_hafnian.py:29)], kws=(), vararg=None, target=None)
DEBUG 2022-02-08 17:11:33,633 on stmt: H = const(int, 0)
DEBUG 2022-02-08 17:11:33,633 on stmt: $130load_global.9 = global(range: <class 'range'>)
DEBUG 2022-02-08 17:11:33,633 on stmt: $138call_function.13 = call $130load_global.9(rank, steps.2, size, func=$130load_global.9, args=[Var(rank, loop_hafnian.py:20), Var(steps.2, loop_hafnian.py:29), Var(size, loop_hafnian.py:20)], kws=(), vararg=None, target=None)
DEBUG 2022-02-08 17:11:33,633 on stmt: $140get_iter.14 = getiter(value=$138call_function.13)
DEBUG 2022-02-08 17:11:33,633 on stmt: $phi142.0 = $140get_iter.14
DEBUG 2022-02-08 17:11:33,633 on stmt: jump 142
DEBUG 2022-02-08 17:11:33,633 ==== SSA block rewrite pass on 142
DEBUG 2022-02-08 17:11:33,633 Running <numba.core.ssa._FreshVarHandler object at 0x000001E9F64E7610>
DEBUG 2022-02-08 17:11:33,633 on stmt: $142for_iter.1 = iternext(value=$phi142.0)
DEBUG 2022-02-08 17:11:33,633 on stmt: $142for_iter.2 = pair_first(value=$142for_iter.1)
DEBUG 2022-02-08 17:11:33,633 on stmt: $142for_iter.3 = pair_second(value=$142for_iter.1)
DEBUG 2022-02-08 17:11:33,633 on stmt: $phi144.1 = $142for_iter.2
DEBUG 2022-02-08 17:11:33,633 on stmt: branch $142for_iter.3, 144, 382
DEBUG 2022-02-08 17:11:33,633 ==== SSA block rewrite pass on 144
DEBUG 2022-02-08 17:11:33,633 Running <numba.core.ssa._FreshVarHandler object at 0x000001E9F64E7610>
DEBUG 2022-02-08 17:11:33,633 on stmt: j = $phi144.1
DEBUG 2022-02-08 17:11:33,633 on stmt: $146load_global.2 = global(find_kept_edges: CPUDispatcher(<function find_kept_edges at 0x000001E9ECB305E0>))
DEBUG 2022-02-08 17:11:33,633 on stmt: kept_edges = call $146load_global.2(j, edge_reps, func=$146load_global.2, args=[Var(j, loop_hafnian.py:34), Var(edge_reps, loop_hafnian.py:20)], kws=(), vararg=None, target=None)
DEBUG 2022-02-08 17:11:33,633 on stmt: $158load_method.7 = getattr(value=kept_edges, attr=sum)
DEBUG 2022-02-08 17:11:33,633 on stmt: edge_sum = call $158load_method.7(func=$158load_method.7, args=[], kws=(), vararg=None, target=None)
DEBUG 2022-02-08 17:11:33,633 on stmt: binom_prod = const(float, 1.0)
DEBUG 2022-02-08 17:11:33,633 first assign: binom_prod
DEBUG 2022-02-08 17:11:33,633 replaced with: binom_prod = const(float, 1.0)
DEBUG 2022-02-08 17:11:33,633 on stmt: $168load_global.10 = global(range: <class 'range'>)
DEBUG 2022-02-08 17:11:33,633 on stmt: $const172.12 = const(int, 2)
DEBUG 2022-02-08 17:11:33,633 on stmt: $174binary_floor_divide.13 = n // $const172.12
DEBUG 2022-02-08 17:11:33,633 on stmt: $176call_function.14 = call $168load_global.10($174binary_floor_divide.13, func=$168load_global.10, args=[Var($174binary_floor_divide.13, loop_hafnian.py:40)], kws=(), vararg=None, target=None)
DEBUG 2022-02-08 17:11:33,633 on stmt: $178get_iter.15 = getiter(value=$176call_function.14)
DEBUG 2022-02-08 17:11:33,633 on stmt: $phi180.1 = $178get_iter.15
DEBUG 2022-02-08 17:11:33,633 on stmt: jump 180
DEBUG 2022-02-08 17:11:33,633 ==== SSA block rewrite pass on 180
DEBUG 2022-02-08 17:11:33,633 Running <numba.core.ssa._FreshVarHandler object at 0x000001E9F64E7610>
DEBUG 2022-02-08 17:11:33,648 on stmt: $180for_iter.2 = iternext(value=$phi180.1)
DEBUG 2022-02-08 17:11:33,648 on stmt: $180for_iter.3 = pair_first(value=$180for_iter.2)
DEBUG 2022-02-08 17:11:33,648 on stmt: $180for_iter.4 = pair_second(value=$180for_iter.2)
DEBUG 2022-02-08 17:11:33,648 on stmt: $phi182.2 = $180for_iter.3
DEBUG 2022-02-08 17:11:33,648 on stmt: branch $180for_iter.4, 182, 210
DEBUG 2022-02-08 17:11:33,648 ==== SSA block rewrite pass on 182
DEBUG 2022-02-08 17:11:33,648 Running <numba.core.ssa._FreshVarHandler object at 0x000001E9F64E7610>
DEBUG 2022-02-08 17:11:33,648 on stmt: i = $phi182.2
DEBUG 2022-02-08 17:11:33,648 on stmt: $192binary_subscr.7 = getitem(value=edge_reps, index=i, fn=<built-in function getitem>)
DEBUG 2022-02-08 17:11:33,648 on stmt: $198binary_subscr.10 = getitem(value=kept_edges, index=i, fn=<built-in function getitem>)
DEBUG 2022-02-08 17:11:33,648 on stmt: $200build_tuple.11 = build_tuple(items=[Var($192binary_subscr.7, loop_hafnian.py:41), Var($198binary_subscr.10, loop_hafnian.py:41)])
DEBUG 2022-02-08 17:11:33,648 on stmt: $202binary_subscr.12 = getitem(value=binoms, index=$200build_tuple.11, fn=<built-in function getitem>)
DEBUG 2022-02-08 17:11:33,648 on stmt: $204inplace_multiply.13 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=binom_prod, rhs=$202binary_subscr.12, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-08 17:11:33,648 on stmt: binom_prod = $204inplace_multiply.13
DEBUG 2022-02-08 17:11:33,648 replaced with: binom_prod.1 = $204inplace_multiply.13
DEBUG 2022-02-08 17:11:33,648 on stmt: jump 180
DEBUG 2022-02-08 17:11:33,648 ==== SSA block rewrite pass on 210
DEBUG 2022-02-08 17:11:33,648 Running <numba.core.ssa._FreshVarHandler object at 0x000001E9F64E7610>
DEBUG 2022-02-08 17:11:33,648 on stmt: bool212 = global(bool: <class 'bool'>)
DEBUG 2022-02-08 17:11:33,648 on stmt: $212pred = call bool212(glynn, func=bool212, args=(Var(glynn, loop_hafnian.py:20),), kws=(), vararg=None, target=None)
DEBUG 2022-02-08 17:11:33,648 on stmt: branch $212pred, 214, 226
DEBUG 2022-02-08 17:11:33,648 ==== SSA block rewrite pass on 214
DEBUG 2022-02-08 17:11:33,648 Running <numba.core.ssa._FreshVarHandler object at 0x000001E9F64E7610>
DEBUG 2022-02-08 17:11:33,648 on stmt: $const214.1 = const(int, 2)
DEBUG 2022-02-08 17:11:33,648 on stmt: $218binary_multiply.3 = $const214.1 * kept_edges
DEBUG 2022-02-08 17:11:33,648 on stmt: kept_edges = $218binary_multiply.3 - edge_reps
DEBUG 2022-02-08 17:11:33,648 on stmt: jump 226
DEBUG 2022-02-08 17:11:33,648 ==== SSA block rewrite pass on 226
DEBUG 2022-02-08 17:11:33,648 Running <numba.core.ssa._FreshVarHandler object at 0x000001E9F64E7610>
DEBUG 2022-02-08 17:11:33,648 on stmt: $226load_global.1 = global(get_submatrices: CPUDispatcher(<function get_submatrices at 0x000001E9ECB30AF0>))
DEBUG 2022-02-08 17:11:33,648 on stmt: $236call_function.6 = call $226load_global.1(kept_edges, A, D, oddV, func=$226load_global.1, args=[Var(kept_edges, loop_hafnian.py:36), Var(A, loop_hafnian.py:20), Var(D, loop_hafnian.py:20), Var(oddV, loop_hafnian.py:20)], kws=(), vararg=None, target=None)
DEBUG 2022-02-08 17:11:33,648 on stmt: $238unpack_sequence.11 = exhaust_iter(value=$236call_function.6, count=4)
DEBUG 2022-02-08 17:11:33,648 on stmt: $238unpack_sequence.7 = static_getitem(value=$238unpack_sequence.11, index=0, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-02-08 17:11:33,648 on stmt: $238unpack_sequence.8 = static_getitem(value=$238unpack_sequence.11, index=1, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-02-08 17:11:33,648 on stmt: $238unpack_sequence.9 = static_getitem(value=$238unpack_sequence.11, index=2, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-02-08 17:11:33,648 on stmt: $238unpack_sequence.10 = static_getitem(value=$238unpack_sequence.11, index=3, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-02-08 17:11:33,648 on stmt: AX_S = $238unpack_sequence.7
DEBUG 2022-02-08 17:11:33,648 on stmt: XD_S = $238unpack_sequence.8
DEBUG 2022-02-08 17:11:33,648 on stmt: D_S = $238unpack_sequence.9
DEBUG 2022-02-08 17:11:33,648 on stmt: oddVX_S = $238unpack_sequence.10
DEBUG 2022-02-08 17:11:33,648 on stmt: $248load_global.12 = global(eigvals: CPUDispatcher(<function eigvals at 0x000001E9ECB4E040>))
DEBUG 2022-02-08 17:11:33,648 on stmt: E = call $248load_global.12(AX_S, func=$248load_global.12, args=[Var(AX_S, loop_hafnian.py:46)], kws=(), vararg=None, target=None)
DEBUG 2022-02-08 17:11:33,648 on stmt: $const256.15 = const(float, -1.0)
DEBUG 2022-02-08 17:11:33,648 on stmt: $const260.17 = const(int, 2)
DEBUG 2022-02-08 17:11:33,648 on stmt: $262binary_floor_divide.18 = N // $const260.17
DEBUG 2022-02-08 17:11:33,648 on stmt: $266binary_subtract.20 = $262binary_floor_divide.18 - edge_sum
DEBUG 2022-02-08 17:11:33,648 on stmt: $268binary_power.21 = $const256.15 ** $266binary_subtract.20
DEBUG 2022-02-08 17:11:33,648 on stmt: prefac = $268binary_power.21 * binom_prod
DEBUG 2022-02-08 17:11:33,648 on stmt: $const278.25 = const(NoneType, None)
DEBUG 2022-02-08 17:11:33,648 on stmt: $280is_op.26 = const(int, 0)
DEBUG 2022-02-08 17:11:33,648 on stmt: bool282 = global(bool: <class 'bool'>)
DEBUG 2022-02-08 17:11:33,648 on stmt: $282pred = call bool282($280is_op.26, func=bool282, args=(Var($280is_op.26, loop_hafnian.py:52),), kws=(), vararg=None, target=None)
DEBUG 2022-02-08 17:11:33,648 on stmt: jump 320
DEBUG 2022-02-08 17:11:33,648 ==== SSA block rewrite pass on 320
DEBUG 2022-02-08 17:11:33,648 Running <numba.core.ssa._FreshVarHandler object at 0x000001E9F64E7610>
DEBUG 2022-02-08 17:11:33,648 on stmt: bool322 = global(bool: <class 'bool'>)
DEBUG 2022-02-08 17:11:33,648 on stmt: $322pred = call bool322(glynn, func=bool322, args=(Var(glynn, loop_hafnian.py:20),), kws=(), vararg=None, target=None)
DEBUG 2022-02-08 17:11:33,648 on stmt: branch $322pred, 326, 348
DEBUG 2022-02-08 17:11:33,648 ==== SSA block rewrite pass on 326
DEBUG 2022-02-08 17:11:33,648 Running <numba.core.ssa._FreshVarHandler object at 0x000001E9F64E7610>
DEBUG 2022-02-08 17:11:33,648 on stmt: $const328.2 = const(int, 0)
DEBUG 2022-02-08 17:11:33,648 on stmt: $330binary_subscr.3 = static_getitem(value=kept_edges, index=0, index_var=$const328.2, fn=<built-in function getitem>)
DEBUG 2022-02-08 17:11:33,648 on stmt: $const332.4 = const(int, 0)
DEBUG 2022-02-08 17:11:33,648 on stmt: $334compare_op.5 = $330binary_subscr.3 == $const332.4
DEBUG 2022-02-08 17:11:33,648 on stmt: bool336 = global(bool: <class 'bool'>)
DEBUG 2022-02-08 17:11:33,648 on stmt: $336pred = call bool336($334compare_op.5, func=bool336, args=(Var($334compare_op.5, loop_hafnian.py:55),), kws=(), vararg=None, target=None)
DEBUG 2022-02-08 17:11:33,648 on stmt: branch $336pred, 340, 348
DEBUG 2022-02-08 17:11:33,648 ==== SSA block rewrite pass on 340
DEBUG 2022-02-08 17:11:33,655 Running <numba.core.ssa._FreshVarHandler object at 0x000001E9F64E7610>
DEBUG 2022-02-08 17:11:33,655 on stmt: $const342.2 = const(float, 0.5)
DEBUG 2022-02-08 17:11:33,655 on stmt: $344inplace_multiply.3 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=prefac, rhs=$const342.2, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-08 17:11:33,655 on stmt: prefac = $344inplace_multiply.3
DEBUG 2022-02-08 17:11:33,655 on stmt: jump 348
DEBUG 2022-02-08 17:11:33,655 ==== SSA block rewrite pass on 348
DEBUG 2022-02-08 17:11:33,655 Running <numba.core.ssa._FreshVarHandler object at 0x000001E9F64E7610>
DEBUG 2022-02-08 17:11:33,655 on stmt: $352load_global.3 = global(f_loop: CPUDispatcher(<function f_loop at 0x000001E9ECB30790>))
DEBUG 2022-02-08 17:11:33,655 on stmt: $364call_function.9 = call $352load_global.3(E, AX_S, XD_S, D_S, N, func=$352load_global.3, args=[Var(E, loop_hafnian.py:48), Var(AX_S, loop_hafnian.py:46), Var(XD_S, loop_hafnian.py:46), Var(D_S, loop_hafnian.py:46), Var(N, loop_hafnian.py:21)], kws=(), vararg=None, target=None)
DEBUG 2022-02-08 17:11:33,655 on stmt: $const368.11 = const(int, 2)
DEBUG 2022-02-08 17:11:33,655 on stmt: $370binary_floor_divide.12 = N // $const368.11
DEBUG 2022-02-08 17:11:33,655 on stmt: $372binary_subscr.13 = getitem(value=$364call_function.9, index=$370binary_floor_divide.12, fn=<built-in function getitem>)
DEBUG 2022-02-08 17:11:33,655 on stmt: $374binary_multiply.14 = prefac * $372binary_subscr.13
DEBUG 2022-02-08 17:11:33,655 on stmt: $376inplace_add.15 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=H, rhs=$374binary_multiply.14, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-08 17:11:33,655 on stmt: H = $376inplace_add.15
DEBUG 2022-02-08 17:11:33,655 on stmt: jump 437
DEBUG 2022-02-08 17:11:33,655 ==== SSA block rewrite pass on 382
DEBUG 2022-02-08 17:11:33,655 Running <numba.core.ssa._FreshVarHandler object at 0x000001E9F64E7610>
DEBUG 2022-02-08 17:11:33,655 on stmt: bool384 = global(bool: <class 'bool'>)
DEBUG 2022-02-08 17:11:33,655 on stmt: $384pred = call bool384(glynn, func=bool384, args=(Var(glynn, loop_hafnian.py:20),), kws=(), vararg=None, target=None)
DEBUG 2022-02-08 17:11:33,655 on stmt: branch $384pred, 388, 436
DEBUG 2022-02-08 17:11:33,655 ==== SSA block rewrite pass on 388
DEBUG 2022-02-08 17:11:33,655 Running <numba.core.ssa._FreshVarHandler object at 0x000001E9F64E7610>
DEBUG 2022-02-08 17:11:33,655 on stmt: $const390.1 = const(NoneType, None)
DEBUG 2022-02-08 17:11:33,655 on stmt: $392is_op.2 = const(int, 1)
DEBUG 2022-02-08 17:11:33,655 on stmt: bool394 = global(bool: <class 'bool'>)
DEBUG 2022-02-08 17:11:33,655 on stmt: $394pred = call bool394($392is_op.2, func=bool394, args=(Var($392is_op.2, loop_hafnian.py:60),), kws=(), vararg=None, target=None)
DEBUG 2022-02-08 17:11:33,655 on stmt: jump 398
DEBUG 2022-02-08 17:11:33,655 ==== SSA block rewrite pass on 398
DEBUG 2022-02-08 17:11:33,655 Running <numba.core.ssa._FreshVarHandler object at 0x000001E9F64E7610>
DEBUG 2022-02-08 17:11:33,655 on stmt: $const400.1 = const(float, 0.5)
DEBUG 2022-02-08 17:11:33,655 on stmt: $const404.3 = const(int, 2)
DEBUG 2022-02-08 17:11:33,655 on stmt: $406binary_floor_divide.4 = N // $const404.3
DEBUG 2022-02-08 17:11:33,655 on stmt: $const408.5 = const(int, 1)
DEBUG 2022-02-08 17:11:33,655 on stmt: $410binary_subtract.6 = $406binary_floor_divide.4 - $const408.5
DEBUG 2022-02-08 17:11:33,655 on stmt: $412binary_power.7 = $const400.1 ** $410binary_subtract.6
DEBUG 2022-02-08 17:11:33,655 on stmt: $414binary_multiply.8 = H * $412binary_power.7
DEBUG 2022-02-08 17:11:33,655 on stmt: H = $414binary_multiply.8
DEBUG 2022-02-08 17:11:33,655 on stmt: jump 436
DEBUG 2022-02-08 17:11:33,655 ==== SSA block rewrite pass on 436
DEBUG 2022-02-08 17:11:33,655 Running <numba.core.ssa._FreshVarHandler object at 0x000001E9F64E7610>
DEBUG 2022-02-08 17:11:33,655 on stmt: $438return_value.1 = cast(value=H)
DEBUG 2022-02-08 17:11:33,655 on stmt: return $438return_value.1
DEBUG 2022-02-08 17:11:33,655 ==== SSA block rewrite pass on 437
DEBUG 2022-02-08 17:11:33,655 Running <numba.core.ssa._FreshVarHandler object at 0x000001E9F64E7610>
DEBUG 2022-02-08 17:11:33,655 on stmt: jump 142
DEBUG 2022-02-08 17:11:33,655 Replaced assignments: defaultdict(<class 'list'>,
            {144: [<numba.core.ir.Assign object at 0x000001E9F64F0340>],
             182: [<numba.core.ir.Assign object at 0x000001E9F64F0A60>]})
DEBUG 2022-02-08 17:11:33,655 ==== SSA block rewrite pass on 0
DEBUG 2022-02-08 17:11:33,655 Running <numba.core.ssa._FixSSAVars object at 0x000001E9F64F0AF0>
DEBUG 2022-02-08 17:11:33,655 on stmt: A = arg(0, name=A)
DEBUG 2022-02-08 17:11:33,655 on stmt: D = arg(1, name=D)
DEBUG 2022-02-08 17:11:33,655 on stmt: edge_reps = arg(2, name=edge_reps)
DEBUG 2022-02-08 17:11:33,655 on stmt: oddloop = arg(3, name=oddloop)
DEBUG 2022-02-08 17:11:33,655 on stmt: oddV = arg(4, name=oddV)
DEBUG 2022-02-08 17:11:33,655 on stmt: rank = arg(5, name=rank)
DEBUG 2022-02-08 17:11:33,655 on stmt: size = arg(6, name=size)
DEBUG 2022-02-08 17:11:33,655 on stmt: glynn = arg(7, name=glynn)
DEBUG 2022-02-08 17:11:33,655 on stmt: $4load_attr.1 = getattr(value=A, attr=shape)
DEBUG 2022-02-08 17:11:33,655 on stmt: $const6.2 = const(int, 0)
DEBUG 2022-02-08 17:11:33,655 on stmt: n = static_getitem(value=$4load_attr.1, index=0, index_var=$const6.2, fn=<built-in function getitem>)
DEBUG 2022-02-08 17:11:33,655 on stmt: $const12.4 = const(int, 2)
DEBUG 2022-02-08 17:11:33,655 on stmt: $16load_method.6 = getattr(value=edge_reps, attr=sum)
DEBUG 2022-02-08 17:11:33,655 on stmt: $18call_method.7 = call $16load_method.6(func=$16load_method.6, args=[], kws=(), vararg=None, target=None)
DEBUG 2022-02-08 17:11:33,655 on stmt: N = $const12.4 * $18call_method.7
DEBUG 2022-02-08 17:11:33,655 on stmt: $const26.10 = const(NoneType, None)
DEBUG 2022-02-08 17:11:33,655 on stmt: $28is_op.11 = const(int, 0)
DEBUG 2022-02-08 17:11:33,655 on stmt: bool30 = global(bool: <class 'bool'>)
DEBUG 2022-02-08 17:11:33,655 on stmt: $30pred = call bool30($28is_op.11, func=bool30, args=(Var($28is_op.11, loop_hafnian.py:22),), kws=(), vararg=None, target=None)
DEBUG 2022-02-08 17:11:33,655 on stmt: jump 40
DEBUG 2022-02-08 17:11:33,655 ==== SSA block rewrite pass on 40
DEBUG 2022-02-08 17:11:33,655 Running <numba.core.ssa._FixSSAVars object at 0x000001E9F64F0AF0>
DEBUG 2022-02-08 17:11:33,655 on stmt: bool42 = global(bool: <class 'bool'>)
DEBUG 2022-02-08 17:11:33,655 on stmt: $42pred = call bool42(glynn, func=bool42, args=(Var(glynn, loop_hafnian.py:20),), kws=(), vararg=None, target=None)
DEBUG 2022-02-08 17:11:33,655 on stmt: branch $42pred, 44, 92
DEBUG 2022-02-08 17:11:33,655 ==== SSA block rewrite pass on 44
DEBUG 2022-02-08 17:11:33,655 Running <numba.core.ssa._FixSSAVars object at 0x000001E9F64F0AF0>
DEBUG 2022-02-08 17:11:33,655 on stmt: $const46.1 = const(NoneType, None)
DEBUG 2022-02-08 17:11:33,655 on stmt: $48is_op.2 = const(int, 1)
DEBUG 2022-02-08 17:11:33,655 on stmt: bool50 = global(bool: <class 'bool'>)
DEBUG 2022-02-08 17:11:33,655 on stmt: $50pred = call bool50($48is_op.2, func=bool50, args=(Var($48is_op.2, loop_hafnian.py:24),), kws=(), vararg=None, target=None)
DEBUG 2022-02-08 17:11:33,655 on stmt: jump 52
DEBUG 2022-02-08 17:11:33,655 ==== SSA block rewrite pass on 52
DEBUG 2022-02-08 17:11:33,655 Running <numba.core.ssa._FixSSAVars object at 0x000001E9F64F0AF0>
DEBUG 2022-02-08 17:11:33,655 on stmt: $const54.1 = const(int, 0)
DEBUG 2022-02-08 17:11:33,655 on stmt: $56binary_subscr.2 = static_getitem(value=edge_reps, index=0, index_var=$const54.1, fn=<built-in function getitem>)
DEBUG 2022-02-08 17:11:33,655 on stmt: $const58.3 = const(int, 2)
DEBUG 2022-02-08 17:11:33,655 on stmt: $60binary_add.4 = $56binary_subscr.2 + $const58.3
DEBUG 2022-02-08 17:11:33,655 on stmt: $const62.5 = const(int, 2)
DEBUG 2022-02-08 17:11:33,655 on stmt: $64binary_floor_divide.6 = $60binary_add.4 // $const62.5
DEBUG 2022-02-08 17:11:33,655 on stmt: $66load_global.7 = global(np: <module 'numpy' from 'C:\\Users\\zl4821\\Anaconda3\\envs\\GBS\\lib\\site-packages\\numpy\\__init__.py'>)
DEBUG 2022-02-08 17:11:33,655 on stmt: $68load_method.8 = getattr(value=$66load_global.7, attr=prod)
DEBUG 2022-02-08 17:11:33,655 on stmt: $const72.10 = const(int, 1)
DEBUG 2022-02-08 17:11:33,655 on stmt: $const74.11 = const(NoneType, None)
DEBUG 2022-02-08 17:11:33,655 on stmt: $76build_slice.12 = global(slice: <class 'slice'>)
DEBUG 2022-02-08 17:11:33,655 on stmt: $76build_slice.13 = call $76build_slice.12($const72.10, $const74.11, func=$76build_slice.12, args=(Var($const72.10, loop_hafnian.py:25), Var($const74.11, loop_hafnian.py:25)), kws=(), vararg=None, target=None)
DEBUG 2022-02-08 17:11:33,655 on stmt: $78binary_subscr.14 = static_getitem(value=edge_reps, index=slice(1, None, None), index_var=$76build_slice.13, fn=<built-in function getitem>)
DEBUG 2022-02-08 17:11:33,655 on stmt: $const80.15 = const(int, 1)
DEBUG 2022-02-08 17:11:33,655 on stmt: $82binary_add.16 = $78binary_subscr.14 + $const80.15
DEBUG 2022-02-08 17:11:33,655 on stmt: $84call_method.17 = call $68load_method.8($82binary_add.16, func=$68load_method.8, args=[Var($82binary_add.16, loop_hafnian.py:25)], kws=(), vararg=None, target=None)
DEBUG 2022-02-08 17:11:33,655 on stmt: steps = $64binary_floor_divide.6 * $84call_method.17
DEBUG 2022-02-08 17:11:33,655 on stmt: jump 106
DEBUG 2022-02-08 17:11:33,655 ==== SSA block rewrite pass on 92
DEBUG 2022-02-08 17:11:33,655 Running <numba.core.ssa._FixSSAVars object at 0x000001E9F64F0AF0>
DEBUG 2022-02-08 17:11:33,655 on stmt: $92load_global.0 = global(np: <module 'numpy' from 'C:\\Users\\zl4821\\Anaconda3\\envs\\GBS\\lib\\site-packages\\numpy\\__init__.py'>)
DEBUG 2022-02-08 17:11:33,655 on stmt: $94load_method.1 = getattr(value=$92load_global.0, attr=prod)
DEBUG 2022-02-08 17:11:33,655 on stmt: $const98.3 = const(int, 1)
DEBUG 2022-02-08 17:11:33,655 on stmt: $100binary_add.4 = edge_reps + $const98.3
DEBUG 2022-02-08 17:11:33,655 on stmt: steps.1 = call $94load_method.1($100binary_add.4, func=$94load_method.1, args=[Var($100binary_add.4, loop_hafnian.py:27)], kws=(), vararg=None, target=None)
DEBUG 2022-02-08 17:11:33,655 on stmt: jump 106
DEBUG 2022-02-08 17:11:33,655 ==== SSA block rewrite pass on 106
DEBUG 2022-02-08 17:11:33,655 Running <numba.core.ssa._FixSSAVars object at 0x000001E9F64F0AF0>
DEBUG 2022-02-08 17:11:33,655 on stmt: steps.2 = phi(incoming_values=[Var(steps, loop_hafnian.py:25), Var(steps.1, loop_hafnian.py:27)], incoming_blocks=[52, 92])
DEBUG 2022-02-08 17:11:33,655 on stmt: $108load_method.1 = getattr(value=edge_reps, attr=max)
DEBUG 2022-02-08 17:11:33,655 on stmt: $110call_method.2 = call $108load_method.1(func=$108load_method.1, args=[], kws=(), vararg=None, target=None)
DEBUG 2022-02-08 17:11:33,655 on stmt: $const112.3 = const(int, 1)
DEBUG 2022-02-08 17:11:33,655 on stmt: max_binom = $110call_method.2 + $const112.3
DEBUG 2022-02-08 17:11:33,655 on stmt: $118load_global.5 = global(precompute_binoms: CPUDispatcher(<function precompute_binoms at 0x000001E9ECB30160>))
DEBUG 2022-02-08 17:11:33,655 on stmt: binoms = call $118load_global.5(max_binom, func=$118load_global.5, args=[Var(max_binom, loop_hafnian.py:29)], kws=(), vararg=None, target=None)
DEBUG 2022-02-08 17:11:33,655 on stmt: H = const(int, 0)
DEBUG 2022-02-08 17:11:33,655 on stmt: $130load_global.9 = global(range: <class 'range'>)
DEBUG 2022-02-08 17:11:33,655 on stmt: $138call_function.13 = call $130load_global.9(rank, steps.2, size, func=$130load_global.9, args=[Var(rank, loop_hafnian.py:20), Var(steps.2, loop_hafnian.py:29), Var(size, loop_hafnian.py:20)], kws=(), vararg=None, target=None)
DEBUG 2022-02-08 17:11:33,655 on stmt: $140get_iter.14 = getiter(value=$138call_function.13)
DEBUG 2022-02-08 17:11:33,655 on stmt: $phi142.0 = $140get_iter.14
DEBUG 2022-02-08 17:11:33,655 on stmt: jump 142
DEBUG 2022-02-08 17:11:33,655 ==== SSA block rewrite pass on 142
DEBUG 2022-02-08 17:11:33,655 Running <numba.core.ssa._FixSSAVars object at 0x000001E9F64F0AF0>
DEBUG 2022-02-08 17:11:33,655 on stmt: $142for_iter.1 = iternext(value=$phi142.0)
DEBUG 2022-02-08 17:11:33,655 on stmt: $142for_iter.2 = pair_first(value=$142for_iter.1)
DEBUG 2022-02-08 17:11:33,655 on stmt: $142for_iter.3 = pair_second(value=$142for_iter.1)
DEBUG 2022-02-08 17:11:33,655 on stmt: $phi144.1 = $142for_iter.2
DEBUG 2022-02-08 17:11:33,655 on stmt: branch $142for_iter.3, 144, 382
DEBUG 2022-02-08 17:11:33,655 ==== SSA block rewrite pass on 144
DEBUG 2022-02-08 17:11:33,655 Running <numba.core.ssa._FixSSAVars object at 0x000001E9F64F0AF0>
DEBUG 2022-02-08 17:11:33,655 on stmt: j = $phi144.1
DEBUG 2022-02-08 17:11:33,655 on stmt: $146load_global.2 = global(find_kept_edges: CPUDispatcher(<function find_kept_edges at 0x000001E9ECB305E0>))
DEBUG 2022-02-08 17:11:33,655 on stmt: kept_edges = call $146load_global.2(j, edge_reps, func=$146load_global.2, args=[Var(j, loop_hafnian.py:34), Var(edge_reps, loop_hafnian.py:20)], kws=(), vararg=None, target=None)
DEBUG 2022-02-08 17:11:33,655 on stmt: $158load_method.7 = getattr(value=kept_edges, attr=sum)
DEBUG 2022-02-08 17:11:33,655 on stmt: edge_sum = call $158load_method.7(func=$158load_method.7, args=[], kws=(), vararg=None, target=None)
DEBUG 2022-02-08 17:11:33,655 on stmt: binom_prod = const(float, 1.0)
DEBUG 2022-02-08 17:11:33,655 on stmt: $168load_global.10 = global(range: <class 'range'>)
DEBUG 2022-02-08 17:11:33,655 on stmt: $const172.12 = const(int, 2)
DEBUG 2022-02-08 17:11:33,655 on stmt: $174binary_floor_divide.13 = n // $const172.12
DEBUG 2022-02-08 17:11:33,655 on stmt: $176call_function.14 = call $168load_global.10($174binary_floor_divide.13, func=$168load_global.10, args=[Var($174binary_floor_divide.13, loop_hafnian.py:40)], kws=(), vararg=None, target=None)
DEBUG 2022-02-08 17:11:33,655 on stmt: $178get_iter.15 = getiter(value=$176call_function.14)
DEBUG 2022-02-08 17:11:33,655 on stmt: $phi180.1 = $178get_iter.15
DEBUG 2022-02-08 17:11:33,655 on stmt: jump 180
DEBUG 2022-02-08 17:11:33,655 ==== SSA block rewrite pass on 180
DEBUG 2022-02-08 17:11:33,655 Running <numba.core.ssa._FixSSAVars object at 0x000001E9F64F0AF0>
DEBUG 2022-02-08 17:11:33,655 on stmt: $180for_iter.2 = iternext(value=$phi180.1)
DEBUG 2022-02-08 17:11:33,655 on stmt: $180for_iter.3 = pair_first(value=$180for_iter.2)
DEBUG 2022-02-08 17:11:33,655 on stmt: $180for_iter.4 = pair_second(value=$180for_iter.2)
DEBUG 2022-02-08 17:11:33,655 on stmt: $phi182.2 = $180for_iter.3
DEBUG 2022-02-08 17:11:33,655 on stmt: branch $180for_iter.4, 182, 210
DEBUG 2022-02-08 17:11:33,655 ==== SSA block rewrite pass on 182
DEBUG 2022-02-08 17:11:33,655 Running <numba.core.ssa._FixSSAVars object at 0x000001E9F64F0AF0>
DEBUG 2022-02-08 17:11:33,655 on stmt: i = $phi182.2
DEBUG 2022-02-08 17:11:33,655 on stmt: $192binary_subscr.7 = getitem(value=edge_reps, index=i, fn=<built-in function getitem>)
DEBUG 2022-02-08 17:11:33,655 on stmt: $198binary_subscr.10 = getitem(value=kept_edges, index=i, fn=<built-in function getitem>)
DEBUG 2022-02-08 17:11:33,655 on stmt: $200build_tuple.11 = build_tuple(items=[Var($192binary_subscr.7, loop_hafnian.py:41), Var($198binary_subscr.10, loop_hafnian.py:41)])
DEBUG 2022-02-08 17:11:33,655 on stmt: $202binary_subscr.12 = getitem(value=binoms, index=$200build_tuple.11, fn=<built-in function getitem>)
DEBUG 2022-02-08 17:11:33,655 on stmt: $204inplace_multiply.13 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=binom_prod, rhs=$202binary_subscr.12, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-08 17:11:33,655 find_def var='binom_prod' stmt=$204inplace_multiply.13 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=binom_prod, rhs=$202binary_subscr.12, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-08 17:11:33,655 find_def_from_top label 182
DEBUG 2022-02-08 17:11:33,655 idom 180 from label 182
DEBUG 2022-02-08 17:11:33,655 find_def_from_bottom label 180
DEBUG 2022-02-08 17:11:33,655 find_def_from_top label 180
DEBUG 2022-02-08 17:11:33,655 insert phi node binom_prod.2 = phi(incoming_values=[], incoming_blocks=[]) at 180
DEBUG 2022-02-08 17:11:33,655 find_def_from_bottom label 144
DEBUG 2022-02-08 17:11:33,655 incoming_def binom_prod = const(float, 1.0)
DEBUG 2022-02-08 17:11:33,655 find_def_from_bottom label 182
DEBUG 2022-02-08 17:11:33,655 incoming_def binom_prod.1 = $204inplace_multiply.13
DEBUG 2022-02-08 17:11:33,655 replaced with: $204inplace_multiply.13 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=binom_prod.2, rhs=$202binary_subscr.12, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-08 17:11:33,655 on stmt: binom_prod.1 = $204inplace_multiply.13
DEBUG 2022-02-08 17:11:33,670 on stmt: jump 180
DEBUG 2022-02-08 17:11:33,670 ==== SSA block rewrite pass on 210
DEBUG 2022-02-08 17:11:33,670 Running <numba.core.ssa._FixSSAVars object at 0x000001E9F64F0AF0>
DEBUG 2022-02-08 17:11:33,670 on stmt: bool212 = global(bool: <class 'bool'>)
DEBUG 2022-02-08 17:11:33,670 on stmt: $212pred = call bool212(glynn, func=bool212, args=(Var(glynn, loop_hafnian.py:20),), kws=(), vararg=None, target=None)
DEBUG 2022-02-08 17:11:33,670 on stmt: branch $212pred, 214, 226
DEBUG 2022-02-08 17:11:33,670 ==== SSA block rewrite pass on 214
DEBUG 2022-02-08 17:11:33,670 Running <numba.core.ssa._FixSSAVars object at 0x000001E9F64F0AF0>
DEBUG 2022-02-08 17:11:33,670 on stmt: $const214.1 = const(int, 2)
DEBUG 2022-02-08 17:11:33,670 on stmt: $218binary_multiply.3 = $const214.1 * kept_edges
DEBUG 2022-02-08 17:11:33,670 on stmt: kept_edges = $218binary_multiply.3 - edge_reps
DEBUG 2022-02-08 17:11:33,670 on stmt: jump 226
DEBUG 2022-02-08 17:11:33,670 ==== SSA block rewrite pass on 226
DEBUG 2022-02-08 17:11:33,670 Running <numba.core.ssa._FixSSAVars object at 0x000001E9F64F0AF0>
DEBUG 2022-02-08 17:11:33,670 on stmt: $226load_global.1 = global(get_submatrices: CPUDispatcher(<function get_submatrices at 0x000001E9ECB30AF0>))
DEBUG 2022-02-08 17:11:33,670 on stmt: $236call_function.6 = call $226load_global.1(kept_edges, A, D, oddV, func=$226load_global.1, args=[Var(kept_edges, loop_hafnian.py:36), Var(A, loop_hafnian.py:20), Var(D, loop_hafnian.py:20), Var(oddV, loop_hafnian.py:20)], kws=(), vararg=None, target=None)
DEBUG 2022-02-08 17:11:33,670 on stmt: $238unpack_sequence.11 = exhaust_iter(value=$236call_function.6, count=4)
DEBUG 2022-02-08 17:11:33,670 on stmt: $238unpack_sequence.7 = static_getitem(value=$238unpack_sequence.11, index=0, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-02-08 17:11:33,670 on stmt: $238unpack_sequence.8 = static_getitem(value=$238unpack_sequence.11, index=1, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-02-08 17:11:33,670 on stmt: $238unpack_sequence.9 = static_getitem(value=$238unpack_sequence.11, index=2, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-02-08 17:11:33,670 on stmt: $238unpack_sequence.10 = static_getitem(value=$238unpack_sequence.11, index=3, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-02-08 17:11:33,670 on stmt: AX_S = $238unpack_sequence.7
DEBUG 2022-02-08 17:11:33,670 on stmt: XD_S = $238unpack_sequence.8
DEBUG 2022-02-08 17:11:33,670 on stmt: D_S = $238unpack_sequence.9
DEBUG 2022-02-08 17:11:33,670 on stmt: oddVX_S = $238unpack_sequence.10
DEBUG 2022-02-08 17:11:33,670 on stmt: $248load_global.12 = global(eigvals: CPUDispatcher(<function eigvals at 0x000001E9ECB4E040>))
DEBUG 2022-02-08 17:11:33,670 on stmt: E = call $248load_global.12(AX_S, func=$248load_global.12, args=[Var(AX_S, loop_hafnian.py:46)], kws=(), vararg=None, target=None)
DEBUG 2022-02-08 17:11:33,670 on stmt: $const256.15 = const(float, -1.0)
DEBUG 2022-02-08 17:11:33,670 on stmt: $const260.17 = const(int, 2)
DEBUG 2022-02-08 17:11:33,670 on stmt: $262binary_floor_divide.18 = N // $const260.17
DEBUG 2022-02-08 17:11:33,670 on stmt: $266binary_subtract.20 = $262binary_floor_divide.18 - edge_sum
DEBUG 2022-02-08 17:11:33,670 on stmt: $268binary_power.21 = $const256.15 ** $266binary_subtract.20
DEBUG 2022-02-08 17:11:33,670 on stmt: prefac = $268binary_power.21 * binom_prod
DEBUG 2022-02-08 17:11:33,670 find_def var='binom_prod' stmt=prefac = $268binary_power.21 * binom_prod
DEBUG 2022-02-08 17:11:33,670 find_def_from_top label 226
DEBUG 2022-02-08 17:11:33,670 idom 210 from label 226
DEBUG 2022-02-08 17:11:33,670 find_def_from_bottom label 210
DEBUG 2022-02-08 17:11:33,670 find_def_from_top label 210
DEBUG 2022-02-08 17:11:33,670 idom 180 from label 210
DEBUG 2022-02-08 17:11:33,670 find_def_from_bottom label 180
DEBUG 2022-02-08 17:11:33,670 replaced with: prefac = $268binary_power.21 * binom_prod.2
DEBUG 2022-02-08 17:11:33,670 on stmt: $const278.25 = const(NoneType, None)
DEBUG 2022-02-08 17:11:33,670 on stmt: $280is_op.26 = const(int, 0)
DEBUG 2022-02-08 17:11:33,670 on stmt: bool282 = global(bool: <class 'bool'>)
DEBUG 2022-02-08 17:11:33,670 on stmt: $282pred = call bool282($280is_op.26, func=bool282, args=(Var($280is_op.26, loop_hafnian.py:52),), kws=(), vararg=None, target=None)
DEBUG 2022-02-08 17:11:33,670 on stmt: jump 320
DEBUG 2022-02-08 17:11:33,670 ==== SSA block rewrite pass on 320
DEBUG 2022-02-08 17:11:33,670 Running <numba.core.ssa._FixSSAVars object at 0x000001E9F64F0AF0>
DEBUG 2022-02-08 17:11:33,670 on stmt: bool322 = global(bool: <class 'bool'>)
DEBUG 2022-02-08 17:11:33,670 on stmt: $322pred = call bool322(glynn, func=bool322, args=(Var(glynn, loop_hafnian.py:20),), kws=(), vararg=None, target=None)
DEBUG 2022-02-08 17:11:33,670 on stmt: branch $322pred, 326, 348
DEBUG 2022-02-08 17:11:33,670 ==== SSA block rewrite pass on 326
DEBUG 2022-02-08 17:11:33,670 Running <numba.core.ssa._FixSSAVars object at 0x000001E9F64F0AF0>
DEBUG 2022-02-08 17:11:33,670 on stmt: $const328.2 = const(int, 0)
DEBUG 2022-02-08 17:11:33,670 on stmt: $330binary_subscr.3 = static_getitem(value=kept_edges, index=0, index_var=$const328.2, fn=<built-in function getitem>)
DEBUG 2022-02-08 17:11:33,670 on stmt: $const332.4 = const(int, 0)
DEBUG 2022-02-08 17:11:33,670 on stmt: $334compare_op.5 = $330binary_subscr.3 == $const332.4
DEBUG 2022-02-08 17:11:33,670 on stmt: bool336 = global(bool: <class 'bool'>)
DEBUG 2022-02-08 17:11:33,670 on stmt: $336pred = call bool336($334compare_op.5, func=bool336, args=(Var($334compare_op.5, loop_hafnian.py:55),), kws=(), vararg=None, target=None)
DEBUG 2022-02-08 17:11:33,670 on stmt: branch $336pred, 340, 348
DEBUG 2022-02-08 17:11:33,670 ==== SSA block rewrite pass on 340
DEBUG 2022-02-08 17:11:33,670 Running <numba.core.ssa._FixSSAVars object at 0x000001E9F64F0AF0>
DEBUG 2022-02-08 17:11:33,670 on stmt: $const342.2 = const(float, 0.5)
DEBUG 2022-02-08 17:11:33,670 on stmt: $344inplace_multiply.3 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=prefac, rhs=$const342.2, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-08 17:11:33,670 on stmt: prefac = $344inplace_multiply.3
DEBUG 2022-02-08 17:11:33,670 on stmt: jump 348
DEBUG 2022-02-08 17:11:33,670 ==== SSA block rewrite pass on 348
DEBUG 2022-02-08 17:11:33,670 Running <numba.core.ssa._FixSSAVars object at 0x000001E9F64F0AF0>
DEBUG 2022-02-08 17:11:33,670 on stmt: $352load_global.3 = global(f_loop: CPUDispatcher(<function f_loop at 0x000001E9ECB30790>))
DEBUG 2022-02-08 17:11:33,670 on stmt: $364call_function.9 = call $352load_global.3(E, AX_S, XD_S, D_S, N, func=$352load_global.3, args=[Var(E, loop_hafnian.py:48), Var(AX_S, loop_hafnian.py:46), Var(XD_S, loop_hafnian.py:46), Var(D_S, loop_hafnian.py:46), Var(N, loop_hafnian.py:21)], kws=(), vararg=None, target=None)
DEBUG 2022-02-08 17:11:33,670 on stmt: $const368.11 = const(int, 2)
DEBUG 2022-02-08 17:11:33,670 on stmt: $370binary_floor_divide.12 = N // $const368.11
DEBUG 2022-02-08 17:11:33,670 on stmt: $372binary_subscr.13 = getitem(value=$364call_function.9, index=$370binary_floor_divide.12, fn=<built-in function getitem>)
DEBUG 2022-02-08 17:11:33,670 on stmt: $374binary_multiply.14 = prefac * $372binary_subscr.13
DEBUG 2022-02-08 17:11:33,670 on stmt: $376inplace_add.15 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=H, rhs=$374binary_multiply.14, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-08 17:11:33,670 on stmt: H = $376inplace_add.15
DEBUG 2022-02-08 17:11:33,670 on stmt: jump 437
DEBUG 2022-02-08 17:11:33,670 ==== SSA block rewrite pass on 382
DEBUG 2022-02-08 17:11:33,670 Running <numba.core.ssa._FixSSAVars object at 0x000001E9F64F0AF0>
DEBUG 2022-02-08 17:11:33,670 on stmt: bool384 = global(bool: <class 'bool'>)
DEBUG 2022-02-08 17:11:33,670 on stmt: $384pred = call bool384(glynn, func=bool384, args=(Var(glynn, loop_hafnian.py:20),), kws=(), vararg=None, target=None)
DEBUG 2022-02-08 17:11:33,670 on stmt: branch $384pred, 388, 436
DEBUG 2022-02-08 17:11:33,670 ==== SSA block rewrite pass on 388
DEBUG 2022-02-08 17:11:33,670 Running <numba.core.ssa._FixSSAVars object at 0x000001E9F64F0AF0>
DEBUG 2022-02-08 17:11:33,670 on stmt: $const390.1 = const(NoneType, None)
DEBUG 2022-02-08 17:11:33,670 on stmt: $392is_op.2 = const(int, 1)
DEBUG 2022-02-08 17:11:33,670 on stmt: bool394 = global(bool: <class 'bool'>)
DEBUG 2022-02-08 17:11:33,670 on stmt: $394pred = call bool394($392is_op.2, func=bool394, args=(Var($392is_op.2, loop_hafnian.py:60),), kws=(), vararg=None, target=None)
DEBUG 2022-02-08 17:11:33,670 on stmt: jump 398
DEBUG 2022-02-08 17:11:33,670 ==== SSA block rewrite pass on 398
DEBUG 2022-02-08 17:11:33,670 Running <numba.core.ssa._FixSSAVars object at 0x000001E9F64F0AF0>
DEBUG 2022-02-08 17:11:33,670 on stmt: $const400.1 = const(float, 0.5)
DEBUG 2022-02-08 17:11:33,670 on stmt: $const404.3 = const(int, 2)
DEBUG 2022-02-08 17:11:33,670 on stmt: $406binary_floor_divide.4 = N // $const404.3
DEBUG 2022-02-08 17:11:33,670 on stmt: $const408.5 = const(int, 1)
DEBUG 2022-02-08 17:11:33,670 on stmt: $410binary_subtract.6 = $406binary_floor_divide.4 - $const408.5
DEBUG 2022-02-08 17:11:33,670 on stmt: $412binary_power.7 = $const400.1 ** $410binary_subtract.6
DEBUG 2022-02-08 17:11:33,670 on stmt: $414binary_multiply.8 = H * $412binary_power.7
DEBUG 2022-02-08 17:11:33,670 on stmt: H = $414binary_multiply.8
DEBUG 2022-02-08 17:11:33,670 on stmt: jump 436
DEBUG 2022-02-08 17:11:33,670 ==== SSA block rewrite pass on 436
DEBUG 2022-02-08 17:11:33,670 Running <numba.core.ssa._FixSSAVars object at 0x000001E9F64F0AF0>
DEBUG 2022-02-08 17:11:33,670 on stmt: $438return_value.1 = cast(value=H)
DEBUG 2022-02-08 17:11:33,670 on stmt: return $438return_value.1
DEBUG 2022-02-08 17:11:33,670 ==== SSA block rewrite pass on 437
DEBUG 2022-02-08 17:11:33,670 Running <numba.core.ssa._FixSSAVars object at 0x000001E9F64F0AF0>
DEBUG 2022-02-08 17:11:33,670 on stmt: jump 142
DEBUG 2022-02-08 17:11:33,670 Fix SSA violator on var prefac
DEBUG 2022-02-08 17:11:33,670 ==== SSA block rewrite pass on 0
DEBUG 2022-02-08 17:11:33,670 Running <numba.core.ssa._FreshVarHandler object at 0x000001E9F64E7280>
DEBUG 2022-02-08 17:11:33,670 on stmt: A = arg(0, name=A)
DEBUG 2022-02-08 17:11:33,670 on stmt: D = arg(1, name=D)
DEBUG 2022-02-08 17:11:33,670 on stmt: edge_reps = arg(2, name=edge_reps)
DEBUG 2022-02-08 17:11:33,670 on stmt: oddloop = arg(3, name=oddloop)
DEBUG 2022-02-08 17:11:33,670 on stmt: oddV = arg(4, name=oddV)
DEBUG 2022-02-08 17:11:33,670 on stmt: rank = arg(5, name=rank)
DEBUG 2022-02-08 17:11:33,670 on stmt: size = arg(6, name=size)
DEBUG 2022-02-08 17:11:33,670 on stmt: glynn = arg(7, name=glynn)
DEBUG 2022-02-08 17:11:33,670 on stmt: $4load_attr.1 = getattr(value=A, attr=shape)
DEBUG 2022-02-08 17:11:33,670 on stmt: $const6.2 = const(int, 0)
DEBUG 2022-02-08 17:11:33,670 on stmt: n = static_getitem(value=$4load_attr.1, index=0, index_var=$const6.2, fn=<built-in function getitem>)
DEBUG 2022-02-08 17:11:33,670 on stmt: $const12.4 = const(int, 2)
DEBUG 2022-02-08 17:11:33,670 on stmt: $16load_method.6 = getattr(value=edge_reps, attr=sum)
DEBUG 2022-02-08 17:11:33,670 on stmt: $18call_method.7 = call $16load_method.6(func=$16load_method.6, args=[], kws=(), vararg=None, target=None)
DEBUG 2022-02-08 17:11:33,670 on stmt: N = $const12.4 * $18call_method.7
DEBUG 2022-02-08 17:11:33,670 on stmt: $const26.10 = const(NoneType, None)
DEBUG 2022-02-08 17:11:33,670 on stmt: $28is_op.11 = const(int, 0)
DEBUG 2022-02-08 17:11:33,670 on stmt: bool30 = global(bool: <class 'bool'>)
DEBUG 2022-02-08 17:11:33,670 on stmt: $30pred = call bool30($28is_op.11, func=bool30, args=(Var($28is_op.11, loop_hafnian.py:22),), kws=(), vararg=None, target=None)
DEBUG 2022-02-08 17:11:33,670 on stmt: jump 40
DEBUG 2022-02-08 17:11:33,670 ==== SSA block rewrite pass on 40
DEBUG 2022-02-08 17:11:33,670 Running <numba.core.ssa._FreshVarHandler object at 0x000001E9F64E7280>
DEBUG 2022-02-08 17:11:33,670 on stmt: bool42 = global(bool: <class 'bool'>)
DEBUG 2022-02-08 17:11:33,670 on stmt: $42pred = call bool42(glynn, func=bool42, args=(Var(glynn, loop_hafnian.py:20),), kws=(), vararg=None, target=None)
DEBUG 2022-02-08 17:11:33,670 on stmt: branch $42pred, 44, 92
DEBUG 2022-02-08 17:11:33,670 ==== SSA block rewrite pass on 44
DEBUG 2022-02-08 17:11:33,670 Running <numba.core.ssa._FreshVarHandler object at 0x000001E9F64E7280>
DEBUG 2022-02-08 17:11:33,670 on stmt: $const46.1 = const(NoneType, None)
DEBUG 2022-02-08 17:11:33,670 on stmt: $48is_op.2 = const(int, 1)
DEBUG 2022-02-08 17:11:33,670 on stmt: bool50 = global(bool: <class 'bool'>)
DEBUG 2022-02-08 17:11:33,670 on stmt: $50pred = call bool50($48is_op.2, func=bool50, args=(Var($48is_op.2, loop_hafnian.py:24),), kws=(), vararg=None, target=None)
DEBUG 2022-02-08 17:11:33,670 on stmt: jump 52
DEBUG 2022-02-08 17:11:33,670 ==== SSA block rewrite pass on 52
DEBUG 2022-02-08 17:11:33,670 Running <numba.core.ssa._FreshVarHandler object at 0x000001E9F64E7280>
DEBUG 2022-02-08 17:11:33,670 on stmt: $const54.1 = const(int, 0)
DEBUG 2022-02-08 17:11:33,670 on stmt: $56binary_subscr.2 = static_getitem(value=edge_reps, index=0, index_var=$const54.1, fn=<built-in function getitem>)
DEBUG 2022-02-08 17:11:33,670 on stmt: $const58.3 = const(int, 2)
DEBUG 2022-02-08 17:11:33,670 on stmt: $60binary_add.4 = $56binary_subscr.2 + $const58.3
DEBUG 2022-02-08 17:11:33,670 on stmt: $const62.5 = const(int, 2)
DEBUG 2022-02-08 17:11:33,670 on stmt: $64binary_floor_divide.6 = $60binary_add.4 // $const62.5
DEBUG 2022-02-08 17:11:33,670 on stmt: $66load_global.7 = global(np: <module 'numpy' from 'C:\\Users\\zl4821\\Anaconda3\\envs\\GBS\\lib\\site-packages\\numpy\\__init__.py'>)
DEBUG 2022-02-08 17:11:33,670 on stmt: $68load_method.8 = getattr(value=$66load_global.7, attr=prod)
DEBUG 2022-02-08 17:11:33,670 on stmt: $const72.10 = const(int, 1)
DEBUG 2022-02-08 17:11:33,670 on stmt: $const74.11 = const(NoneType, None)
DEBUG 2022-02-08 17:11:33,670 on stmt: $76build_slice.12 = global(slice: <class 'slice'>)
DEBUG 2022-02-08 17:11:33,670 on stmt: $76build_slice.13 = call $76build_slice.12($const72.10, $const74.11, func=$76build_slice.12, args=(Var($const72.10, loop_hafnian.py:25), Var($const74.11, loop_hafnian.py:25)), kws=(), vararg=None, target=None)
DEBUG 2022-02-08 17:11:33,670 on stmt: $78binary_subscr.14 = static_getitem(value=edge_reps, index=slice(1, None, None), index_var=$76build_slice.13, fn=<built-in function getitem>)
DEBUG 2022-02-08 17:11:33,670 on stmt: $const80.15 = const(int, 1)
DEBUG 2022-02-08 17:11:33,670 on stmt: $82binary_add.16 = $78binary_subscr.14 + $const80.15
DEBUG 2022-02-08 17:11:33,670 on stmt: $84call_method.17 = call $68load_method.8($82binary_add.16, func=$68load_method.8, args=[Var($82binary_add.16, loop_hafnian.py:25)], kws=(), vararg=None, target=None)
DEBUG 2022-02-08 17:11:33,670 on stmt: steps = $64binary_floor_divide.6 * $84call_method.17
DEBUG 2022-02-08 17:11:33,670 on stmt: jump 106
DEBUG 2022-02-08 17:11:33,670 ==== SSA block rewrite pass on 92
DEBUG 2022-02-08 17:11:33,670 Running <numba.core.ssa._FreshVarHandler object at 0x000001E9F64E7280>
DEBUG 2022-02-08 17:11:33,670 on stmt: $92load_global.0 = global(np: <module 'numpy' from 'C:\\Users\\zl4821\\Anaconda3\\envs\\GBS\\lib\\site-packages\\numpy\\__init__.py'>)
DEBUG 2022-02-08 17:11:33,670 on stmt: $94load_method.1 = getattr(value=$92load_global.0, attr=prod)
DEBUG 2022-02-08 17:11:33,670 on stmt: $const98.3 = const(int, 1)
DEBUG 2022-02-08 17:11:33,670 on stmt: $100binary_add.4 = edge_reps + $const98.3
DEBUG 2022-02-08 17:11:33,670 on stmt: steps.1 = call $94load_method.1($100binary_add.4, func=$94load_method.1, args=[Var($100binary_add.4, loop_hafnian.py:27)], kws=(), vararg=None, target=None)
DEBUG 2022-02-08 17:11:33,686 on stmt: jump 106
DEBUG 2022-02-08 17:11:33,686 ==== SSA block rewrite pass on 106
DEBUG 2022-02-08 17:11:33,686 Running <numba.core.ssa._FreshVarHandler object at 0x000001E9F64E7280>
DEBUG 2022-02-08 17:11:33,686 on stmt: steps.2 = phi(incoming_values=[Var(steps, loop_hafnian.py:25), Var(steps.1, loop_hafnian.py:27)], incoming_blocks=[52, 92])
DEBUG 2022-02-08 17:11:33,686 on stmt: $108load_method.1 = getattr(value=edge_reps, attr=max)
DEBUG 2022-02-08 17:11:33,686 on stmt: $110call_method.2 = call $108load_method.1(func=$108load_method.1, args=[], kws=(), vararg=None, target=None)
DEBUG 2022-02-08 17:11:33,686 on stmt: $const112.3 = const(int, 1)
DEBUG 2022-02-08 17:11:33,686 on stmt: max_binom = $110call_method.2 + $const112.3
DEBUG 2022-02-08 17:11:33,686 on stmt: $118load_global.5 = global(precompute_binoms: CPUDispatcher(<function precompute_binoms at 0x000001E9ECB30160>))
DEBUG 2022-02-08 17:11:33,686 on stmt: binoms = call $118load_global.5(max_binom, func=$118load_global.5, args=[Var(max_binom, loop_hafnian.py:29)], kws=(), vararg=None, target=None)
DEBUG 2022-02-08 17:11:33,686 on stmt: H = const(int, 0)
DEBUG 2022-02-08 17:11:33,686 on stmt: $130load_global.9 = global(range: <class 'range'>)
DEBUG 2022-02-08 17:11:33,686 on stmt: $138call_function.13 = call $130load_global.9(rank, steps.2, size, func=$130load_global.9, args=[Var(rank, loop_hafnian.py:20), Var(steps.2, loop_hafnian.py:29), Var(size, loop_hafnian.py:20)], kws=(), vararg=None, target=None)
DEBUG 2022-02-08 17:11:33,686 on stmt: $140get_iter.14 = getiter(value=$138call_function.13)
DEBUG 2022-02-08 17:11:33,686 on stmt: $phi142.0 = $140get_iter.14
DEBUG 2022-02-08 17:11:33,686 on stmt: jump 142
DEBUG 2022-02-08 17:11:33,686 ==== SSA block rewrite pass on 142
DEBUG 2022-02-08 17:11:33,686 Running <numba.core.ssa._FreshVarHandler object at 0x000001E9F64E7280>
DEBUG 2022-02-08 17:11:33,686 on stmt: $142for_iter.1 = iternext(value=$phi142.0)
DEBUG 2022-02-08 17:11:33,686 on stmt: $142for_iter.2 = pair_first(value=$142for_iter.1)
DEBUG 2022-02-08 17:11:33,686 on stmt: $142for_iter.3 = pair_second(value=$142for_iter.1)
DEBUG 2022-02-08 17:11:33,686 on stmt: $phi144.1 = $142for_iter.2
DEBUG 2022-02-08 17:11:33,686 on stmt: branch $142for_iter.3, 144, 382
DEBUG 2022-02-08 17:11:33,686 ==== SSA block rewrite pass on 144
DEBUG 2022-02-08 17:11:33,686 Running <numba.core.ssa._FreshVarHandler object at 0x000001E9F64E7280>
DEBUG 2022-02-08 17:11:33,686 on stmt: j = $phi144.1
DEBUG 2022-02-08 17:11:33,686 on stmt: $146load_global.2 = global(find_kept_edges: CPUDispatcher(<function find_kept_edges at 0x000001E9ECB305E0>))
DEBUG 2022-02-08 17:11:33,686 on stmt: kept_edges = call $146load_global.2(j, edge_reps, func=$146load_global.2, args=[Var(j, loop_hafnian.py:34), Var(edge_reps, loop_hafnian.py:20)], kws=(), vararg=None, target=None)
DEBUG 2022-02-08 17:11:33,686 on stmt: $158load_method.7 = getattr(value=kept_edges, attr=sum)
DEBUG 2022-02-08 17:11:33,686 on stmt: edge_sum = call $158load_method.7(func=$158load_method.7, args=[], kws=(), vararg=None, target=None)
DEBUG 2022-02-08 17:11:33,686 on stmt: binom_prod = const(float, 1.0)
DEBUG 2022-02-08 17:11:33,686 on stmt: $168load_global.10 = global(range: <class 'range'>)
DEBUG 2022-02-08 17:11:33,686 on stmt: $const172.12 = const(int, 2)
DEBUG 2022-02-08 17:11:33,686 on stmt: $174binary_floor_divide.13 = n // $const172.12
DEBUG 2022-02-08 17:11:33,686 on stmt: $176call_function.14 = call $168load_global.10($174binary_floor_divide.13, func=$168load_global.10, args=[Var($174binary_floor_divide.13, loop_hafnian.py:40)], kws=(), vararg=None, target=None)
DEBUG 2022-02-08 17:11:33,686 on stmt: $178get_iter.15 = getiter(value=$176call_function.14)
DEBUG 2022-02-08 17:11:33,686 on stmt: $phi180.1 = $178get_iter.15
DEBUG 2022-02-08 17:11:33,686 on stmt: jump 180
DEBUG 2022-02-08 17:11:33,686 ==== SSA block rewrite pass on 180
DEBUG 2022-02-08 17:11:33,686 Running <numba.core.ssa._FreshVarHandler object at 0x000001E9F64E7280>
DEBUG 2022-02-08 17:11:33,686 on stmt: binom_prod.2 = phi(incoming_values=[Var(binom_prod, loop_hafnian.py:39), Var(binom_prod.1, loop_hafnian.py:41)], incoming_blocks=[144, 182])
DEBUG 2022-02-08 17:11:33,686 on stmt: $180for_iter.2 = iternext(value=$phi180.1)
DEBUG 2022-02-08 17:11:33,686 on stmt: $180for_iter.3 = pair_first(value=$180for_iter.2)
DEBUG 2022-02-08 17:11:33,686 on stmt: $180for_iter.4 = pair_second(value=$180for_iter.2)
DEBUG 2022-02-08 17:11:33,686 on stmt: $phi182.2 = $180for_iter.3
DEBUG 2022-02-08 17:11:33,686 on stmt: branch $180for_iter.4, 182, 210
DEBUG 2022-02-08 17:11:33,686 ==== SSA block rewrite pass on 182
DEBUG 2022-02-08 17:11:33,686 Running <numba.core.ssa._FreshVarHandler object at 0x000001E9F64E7280>
DEBUG 2022-02-08 17:11:33,686 on stmt: i = $phi182.2
DEBUG 2022-02-08 17:11:33,686 on stmt: $192binary_subscr.7 = getitem(value=edge_reps, index=i, fn=<built-in function getitem>)
DEBUG 2022-02-08 17:11:33,686 on stmt: $198binary_subscr.10 = getitem(value=kept_edges, index=i, fn=<built-in function getitem>)
DEBUG 2022-02-08 17:11:33,686 on stmt: $200build_tuple.11 = build_tuple(items=[Var($192binary_subscr.7, loop_hafnian.py:41), Var($198binary_subscr.10, loop_hafnian.py:41)])
DEBUG 2022-02-08 17:11:33,686 on stmt: $202binary_subscr.12 = getitem(value=binoms, index=$200build_tuple.11, fn=<built-in function getitem>)
DEBUG 2022-02-08 17:11:33,686 on stmt: $204inplace_multiply.13 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=binom_prod.2, rhs=$202binary_subscr.12, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-08 17:11:33,686 on stmt: binom_prod.1 = $204inplace_multiply.13
DEBUG 2022-02-08 17:11:33,686 on stmt: jump 180
DEBUG 2022-02-08 17:11:33,686 ==== SSA block rewrite pass on 210
DEBUG 2022-02-08 17:11:33,686 Running <numba.core.ssa._FreshVarHandler object at 0x000001E9F64E7280>
DEBUG 2022-02-08 17:11:33,686 on stmt: bool212 = global(bool: <class 'bool'>)
DEBUG 2022-02-08 17:11:33,686 on stmt: $212pred = call bool212(glynn, func=bool212, args=(Var(glynn, loop_hafnian.py:20),), kws=(), vararg=None, target=None)
DEBUG 2022-02-08 17:11:33,686 on stmt: branch $212pred, 214, 226
DEBUG 2022-02-08 17:11:33,686 ==== SSA block rewrite pass on 214
DEBUG 2022-02-08 17:11:33,686 Running <numba.core.ssa._FreshVarHandler object at 0x000001E9F64E7280>
DEBUG 2022-02-08 17:11:33,686 on stmt: $const214.1 = const(int, 2)
DEBUG 2022-02-08 17:11:33,686 on stmt: $218binary_multiply.3 = $const214.1 * kept_edges
DEBUG 2022-02-08 17:11:33,686 on stmt: kept_edges = $218binary_multiply.3 - edge_reps
DEBUG 2022-02-08 17:11:33,686 on stmt: jump 226
DEBUG 2022-02-08 17:11:33,686 ==== SSA block rewrite pass on 226
DEBUG 2022-02-08 17:11:33,686 Running <numba.core.ssa._FreshVarHandler object at 0x000001E9F64E7280>
DEBUG 2022-02-08 17:11:33,686 on stmt: $226load_global.1 = global(get_submatrices: CPUDispatcher(<function get_submatrices at 0x000001E9ECB30AF0>))
DEBUG 2022-02-08 17:11:33,686 on stmt: $236call_function.6 = call $226load_global.1(kept_edges, A, D, oddV, func=$226load_global.1, args=[Var(kept_edges, loop_hafnian.py:36), Var(A, loop_hafnian.py:20), Var(D, loop_hafnian.py:20), Var(oddV, loop_hafnian.py:20)], kws=(), vararg=None, target=None)
DEBUG 2022-02-08 17:11:33,686 on stmt: $238unpack_sequence.11 = exhaust_iter(value=$236call_function.6, count=4)
DEBUG 2022-02-08 17:11:33,686 on stmt: $238unpack_sequence.7 = static_getitem(value=$238unpack_sequence.11, index=0, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-02-08 17:11:33,686 on stmt: $238unpack_sequence.8 = static_getitem(value=$238unpack_sequence.11, index=1, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-02-08 17:11:33,686 on stmt: $238unpack_sequence.9 = static_getitem(value=$238unpack_sequence.11, index=2, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-02-08 17:11:33,686 on stmt: $238unpack_sequence.10 = static_getitem(value=$238unpack_sequence.11, index=3, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-02-08 17:11:33,686 on stmt: AX_S = $238unpack_sequence.7
DEBUG 2022-02-08 17:11:33,686 on stmt: XD_S = $238unpack_sequence.8
DEBUG 2022-02-08 17:11:33,686 on stmt: D_S = $238unpack_sequence.9
DEBUG 2022-02-08 17:11:33,686 on stmt: oddVX_S = $238unpack_sequence.10
DEBUG 2022-02-08 17:11:33,686 on stmt: $248load_global.12 = global(eigvals: CPUDispatcher(<function eigvals at 0x000001E9ECB4E040>))
DEBUG 2022-02-08 17:11:33,686 on stmt: E = call $248load_global.12(AX_S, func=$248load_global.12, args=[Var(AX_S, loop_hafnian.py:46)], kws=(), vararg=None, target=None)
DEBUG 2022-02-08 17:11:33,686 on stmt: $const256.15 = const(float, -1.0)
DEBUG 2022-02-08 17:11:33,686 on stmt: $const260.17 = const(int, 2)
DEBUG 2022-02-08 17:11:33,686 on stmt: $262binary_floor_divide.18 = N // $const260.17
DEBUG 2022-02-08 17:11:33,686 on stmt: $266binary_subtract.20 = $262binary_floor_divide.18 - edge_sum
DEBUG 2022-02-08 17:11:33,686 on stmt: $268binary_power.21 = $const256.15 ** $266binary_subtract.20
DEBUG 2022-02-08 17:11:33,686 on stmt: prefac = $268binary_power.21 * binom_prod.2
DEBUG 2022-02-08 17:11:33,686 first assign: prefac
DEBUG 2022-02-08 17:11:33,686 replaced with: prefac = $268binary_power.21 * binom_prod.2
DEBUG 2022-02-08 17:11:33,686 on stmt: $const278.25 = const(NoneType, None)
DEBUG 2022-02-08 17:11:33,686 on stmt: $280is_op.26 = const(int, 0)
DEBUG 2022-02-08 17:11:33,686 on stmt: bool282 = global(bool: <class 'bool'>)
DEBUG 2022-02-08 17:11:33,686 on stmt: $282pred = call bool282($280is_op.26, func=bool282, args=(Var($280is_op.26, loop_hafnian.py:52),), kws=(), vararg=None, target=None)
DEBUG 2022-02-08 17:11:33,686 on stmt: jump 320
DEBUG 2022-02-08 17:11:33,686 ==== SSA block rewrite pass on 320
DEBUG 2022-02-08 17:11:33,686 Running <numba.core.ssa._FreshVarHandler object at 0x000001E9F64E7280>
DEBUG 2022-02-08 17:11:33,686 on stmt: bool322 = global(bool: <class 'bool'>)
DEBUG 2022-02-08 17:11:33,686 on stmt: $322pred = call bool322(glynn, func=bool322, args=(Var(glynn, loop_hafnian.py:20),), kws=(), vararg=None, target=None)
DEBUG 2022-02-08 17:11:33,686 on stmt: branch $322pred, 326, 348
DEBUG 2022-02-08 17:11:33,686 ==== SSA block rewrite pass on 326
DEBUG 2022-02-08 17:11:33,686 Running <numba.core.ssa._FreshVarHandler object at 0x000001E9F64E7280>
DEBUG 2022-02-08 17:11:33,686 on stmt: $const328.2 = const(int, 0)
DEBUG 2022-02-08 17:11:33,686 on stmt: $330binary_subscr.3 = static_getitem(value=kept_edges, index=0, index_var=$const328.2, fn=<built-in function getitem>)
DEBUG 2022-02-08 17:11:33,686 on stmt: $const332.4 = const(int, 0)
DEBUG 2022-02-08 17:11:33,686 on stmt: $334compare_op.5 = $330binary_subscr.3 == $const332.4
DEBUG 2022-02-08 17:11:33,686 on stmt: bool336 = global(bool: <class 'bool'>)
DEBUG 2022-02-08 17:11:33,686 on stmt: $336pred = call bool336($334compare_op.5, func=bool336, args=(Var($334compare_op.5, loop_hafnian.py:55),), kws=(), vararg=None, target=None)
DEBUG 2022-02-08 17:11:33,686 on stmt: branch $336pred, 340, 348
DEBUG 2022-02-08 17:11:33,686 ==== SSA block rewrite pass on 340
DEBUG 2022-02-08 17:11:33,686 Running <numba.core.ssa._FreshVarHandler object at 0x000001E9F64E7280>
DEBUG 2022-02-08 17:11:33,686 on stmt: $const342.2 = const(float, 0.5)
DEBUG 2022-02-08 17:11:33,686 on stmt: $344inplace_multiply.3 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=prefac, rhs=$const342.2, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-08 17:11:33,686 on stmt: prefac = $344inplace_multiply.3
DEBUG 2022-02-08 17:11:33,686 replaced with: prefac.1 = $344inplace_multiply.3
DEBUG 2022-02-08 17:11:33,686 on stmt: jump 348
DEBUG 2022-02-08 17:11:33,686 ==== SSA block rewrite pass on 348
DEBUG 2022-02-08 17:11:33,686 Running <numba.core.ssa._FreshVarHandler object at 0x000001E9F64E7280>
DEBUG 2022-02-08 17:11:33,686 on stmt: $352load_global.3 = global(f_loop: CPUDispatcher(<function f_loop at 0x000001E9ECB30790>))
DEBUG 2022-02-08 17:11:33,686 on stmt: $364call_function.9 = call $352load_global.3(E, AX_S, XD_S, D_S, N, func=$352load_global.3, args=[Var(E, loop_hafnian.py:48), Var(AX_S, loop_hafnian.py:46), Var(XD_S, loop_hafnian.py:46), Var(D_S, loop_hafnian.py:46), Var(N, loop_hafnian.py:21)], kws=(), vararg=None, target=None)
DEBUG 2022-02-08 17:11:33,686 on stmt: $const368.11 = const(int, 2)
DEBUG 2022-02-08 17:11:33,686 on stmt: $370binary_floor_divide.12 = N // $const368.11
DEBUG 2022-02-08 17:11:33,686 on stmt: $372binary_subscr.13 = getitem(value=$364call_function.9, index=$370binary_floor_divide.12, fn=<built-in function getitem>)
DEBUG 2022-02-08 17:11:33,686 on stmt: $374binary_multiply.14 = prefac * $372binary_subscr.13
DEBUG 2022-02-08 17:11:33,686 on stmt: $376inplace_add.15 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=H, rhs=$374binary_multiply.14, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-08 17:11:33,686 on stmt: H = $376inplace_add.15
DEBUG 2022-02-08 17:11:33,686 on stmt: jump 437
DEBUG 2022-02-08 17:11:33,686 ==== SSA block rewrite pass on 382
DEBUG 2022-02-08 17:11:33,686 Running <numba.core.ssa._FreshVarHandler object at 0x000001E9F64E7280>
DEBUG 2022-02-08 17:11:33,686 on stmt: bool384 = global(bool: <class 'bool'>)
DEBUG 2022-02-08 17:11:33,686 on stmt: $384pred = call bool384(glynn, func=bool384, args=(Var(glynn, loop_hafnian.py:20),), kws=(), vararg=None, target=None)
DEBUG 2022-02-08 17:11:33,686 on stmt: branch $384pred, 388, 436
DEBUG 2022-02-08 17:11:33,686 ==== SSA block rewrite pass on 388
DEBUG 2022-02-08 17:11:33,686 Running <numba.core.ssa._FreshVarHandler object at 0x000001E9F64E7280>
DEBUG 2022-02-08 17:11:33,686 on stmt: $const390.1 = const(NoneType, None)
DEBUG 2022-02-08 17:11:33,686 on stmt: $392is_op.2 = const(int, 1)
DEBUG 2022-02-08 17:11:33,686 on stmt: bool394 = global(bool: <class 'bool'>)
DEBUG 2022-02-08 17:11:33,686 on stmt: $394pred = call bool394($392is_op.2, func=bool394, args=(Var($392is_op.2, loop_hafnian.py:60),), kws=(), vararg=None, target=None)
DEBUG 2022-02-08 17:11:33,686 on stmt: jump 398
DEBUG 2022-02-08 17:11:33,686 ==== SSA block rewrite pass on 398
DEBUG 2022-02-08 17:11:33,686 Running <numba.core.ssa._FreshVarHandler object at 0x000001E9F64E7280>
DEBUG 2022-02-08 17:11:33,686 on stmt: $const400.1 = const(float, 0.5)
DEBUG 2022-02-08 17:11:33,686 on stmt: $const404.3 = const(int, 2)
DEBUG 2022-02-08 17:11:33,686 on stmt: $406binary_floor_divide.4 = N // $const404.3
DEBUG 2022-02-08 17:11:33,686 on stmt: $const408.5 = const(int, 1)
DEBUG 2022-02-08 17:11:33,686 on stmt: $410binary_subtract.6 = $406binary_floor_divide.4 - $const408.5
DEBUG 2022-02-08 17:11:33,686 on stmt: $412binary_power.7 = $const400.1 ** $410binary_subtract.6
DEBUG 2022-02-08 17:11:33,686 on stmt: $414binary_multiply.8 = H * $412binary_power.7
DEBUG 2022-02-08 17:11:33,686 on stmt: H = $414binary_multiply.8
DEBUG 2022-02-08 17:11:33,686 on stmt: jump 436
DEBUG 2022-02-08 17:11:33,686 ==== SSA block rewrite pass on 436
DEBUG 2022-02-08 17:11:33,686 Running <numba.core.ssa._FreshVarHandler object at 0x000001E9F64E7280>
DEBUG 2022-02-08 17:11:33,702 on stmt: $438return_value.1 = cast(value=H)
DEBUG 2022-02-08 17:11:33,702 on stmt: return $438return_value.1
DEBUG 2022-02-08 17:11:33,702 ==== SSA block rewrite pass on 437
DEBUG 2022-02-08 17:11:33,702 Running <numba.core.ssa._FreshVarHandler object at 0x000001E9F64E7280>
DEBUG 2022-02-08 17:11:33,702 on stmt: jump 142
DEBUG 2022-02-08 17:11:33,702 Replaced assignments: defaultdict(<class 'list'>,
            {226: [<numba.core.ir.Assign object at 0x000001E9F64F0B50>],
             340: [<numba.core.ir.Assign object at 0x000001E9F64F0820>]})
DEBUG 2022-02-08 17:11:33,702 ==== SSA block rewrite pass on 0
DEBUG 2022-02-08 17:11:33,702 Running <numba.core.ssa._FixSSAVars object at 0x000001E9F64F0AF0>
DEBUG 2022-02-08 17:11:33,702 on stmt: A = arg(0, name=A)
DEBUG 2022-02-08 17:11:33,702 on stmt: D = arg(1, name=D)
DEBUG 2022-02-08 17:11:33,702 on stmt: edge_reps = arg(2, name=edge_reps)
DEBUG 2022-02-08 17:11:33,702 on stmt: oddloop = arg(3, name=oddloop)
DEBUG 2022-02-08 17:11:33,702 on stmt: oddV = arg(4, name=oddV)
DEBUG 2022-02-08 17:11:33,702 on stmt: rank = arg(5, name=rank)
DEBUG 2022-02-08 17:11:33,702 on stmt: size = arg(6, name=size)
DEBUG 2022-02-08 17:11:33,702 on stmt: glynn = arg(7, name=glynn)
DEBUG 2022-02-08 17:11:33,702 on stmt: $4load_attr.1 = getattr(value=A, attr=shape)
DEBUG 2022-02-08 17:11:33,702 on stmt: $const6.2 = const(int, 0)
DEBUG 2022-02-08 17:11:33,702 on stmt: n = static_getitem(value=$4load_attr.1, index=0, index_var=$const6.2, fn=<built-in function getitem>)
DEBUG 2022-02-08 17:11:33,702 on stmt: $const12.4 = const(int, 2)
DEBUG 2022-02-08 17:11:33,702 on stmt: $16load_method.6 = getattr(value=edge_reps, attr=sum)
DEBUG 2022-02-08 17:11:33,702 on stmt: $18call_method.7 = call $16load_method.6(func=$16load_method.6, args=[], kws=(), vararg=None, target=None)
DEBUG 2022-02-08 17:11:33,702 on stmt: N = $const12.4 * $18call_method.7
DEBUG 2022-02-08 17:11:33,702 on stmt: $const26.10 = const(NoneType, None)
DEBUG 2022-02-08 17:11:33,702 on stmt: $28is_op.11 = const(int, 0)
DEBUG 2022-02-08 17:11:33,702 on stmt: bool30 = global(bool: <class 'bool'>)
DEBUG 2022-02-08 17:11:33,702 on stmt: $30pred = call bool30($28is_op.11, func=bool30, args=(Var($28is_op.11, loop_hafnian.py:22),), kws=(), vararg=None, target=None)
DEBUG 2022-02-08 17:11:33,702 on stmt: jump 40
DEBUG 2022-02-08 17:11:33,702 ==== SSA block rewrite pass on 40
DEBUG 2022-02-08 17:11:33,702 Running <numba.core.ssa._FixSSAVars object at 0x000001E9F64F0AF0>
DEBUG 2022-02-08 17:11:33,702 on stmt: bool42 = global(bool: <class 'bool'>)
DEBUG 2022-02-08 17:11:33,702 on stmt: $42pred = call bool42(glynn, func=bool42, args=(Var(glynn, loop_hafnian.py:20),), kws=(), vararg=None, target=None)
DEBUG 2022-02-08 17:11:33,702 on stmt: branch $42pred, 44, 92
DEBUG 2022-02-08 17:11:33,702 ==== SSA block rewrite pass on 44
DEBUG 2022-02-08 17:11:33,702 Running <numba.core.ssa._FixSSAVars object at 0x000001E9F64F0AF0>
DEBUG 2022-02-08 17:11:33,702 on stmt: $const46.1 = const(NoneType, None)
DEBUG 2022-02-08 17:11:33,702 on stmt: $48is_op.2 = const(int, 1)
DEBUG 2022-02-08 17:11:33,702 on stmt: bool50 = global(bool: <class 'bool'>)
DEBUG 2022-02-08 17:11:33,702 on stmt: $50pred = call bool50($48is_op.2, func=bool50, args=(Var($48is_op.2, loop_hafnian.py:24),), kws=(), vararg=None, target=None)
DEBUG 2022-02-08 17:11:33,702 on stmt: jump 52
DEBUG 2022-02-08 17:11:33,702 ==== SSA block rewrite pass on 52
DEBUG 2022-02-08 17:11:33,702 Running <numba.core.ssa._FixSSAVars object at 0x000001E9F64F0AF0>
DEBUG 2022-02-08 17:11:33,702 on stmt: $const54.1 = const(int, 0)
DEBUG 2022-02-08 17:11:33,702 on stmt: $56binary_subscr.2 = static_getitem(value=edge_reps, index=0, index_var=$const54.1, fn=<built-in function getitem>)
DEBUG 2022-02-08 17:11:33,702 on stmt: $const58.3 = const(int, 2)
DEBUG 2022-02-08 17:11:33,702 on stmt: $60binary_add.4 = $56binary_subscr.2 + $const58.3
DEBUG 2022-02-08 17:11:33,702 on stmt: $const62.5 = const(int, 2)
DEBUG 2022-02-08 17:11:33,702 on stmt: $64binary_floor_divide.6 = $60binary_add.4 // $const62.5
DEBUG 2022-02-08 17:11:33,702 on stmt: $66load_global.7 = global(np: <module 'numpy' from 'C:\\Users\\zl4821\\Anaconda3\\envs\\GBS\\lib\\site-packages\\numpy\\__init__.py'>)
DEBUG 2022-02-08 17:11:33,702 on stmt: $68load_method.8 = getattr(value=$66load_global.7, attr=prod)
DEBUG 2022-02-08 17:11:33,702 on stmt: $const72.10 = const(int, 1)
DEBUG 2022-02-08 17:11:33,702 on stmt: $const74.11 = const(NoneType, None)
DEBUG 2022-02-08 17:11:33,702 on stmt: $76build_slice.12 = global(slice: <class 'slice'>)
DEBUG 2022-02-08 17:11:33,702 on stmt: $76build_slice.13 = call $76build_slice.12($const72.10, $const74.11, func=$76build_slice.12, args=(Var($const72.10, loop_hafnian.py:25), Var($const74.11, loop_hafnian.py:25)), kws=(), vararg=None, target=None)
DEBUG 2022-02-08 17:11:33,702 on stmt: $78binary_subscr.14 = static_getitem(value=edge_reps, index=slice(1, None, None), index_var=$76build_slice.13, fn=<built-in function getitem>)
DEBUG 2022-02-08 17:11:33,702 on stmt: $const80.15 = const(int, 1)
DEBUG 2022-02-08 17:11:33,702 on stmt: $82binary_add.16 = $78binary_subscr.14 + $const80.15
DEBUG 2022-02-08 17:11:33,702 on stmt: $84call_method.17 = call $68load_method.8($82binary_add.16, func=$68load_method.8, args=[Var($82binary_add.16, loop_hafnian.py:25)], kws=(), vararg=None, target=None)
DEBUG 2022-02-08 17:11:33,702 on stmt: steps = $64binary_floor_divide.6 * $84call_method.17
DEBUG 2022-02-08 17:11:33,702 on stmt: jump 106
DEBUG 2022-02-08 17:11:33,702 ==== SSA block rewrite pass on 92
DEBUG 2022-02-08 17:11:33,702 Running <numba.core.ssa._FixSSAVars object at 0x000001E9F64F0AF0>
DEBUG 2022-02-08 17:11:33,702 on stmt: $92load_global.0 = global(np: <module 'numpy' from 'C:\\Users\\zl4821\\Anaconda3\\envs\\GBS\\lib\\site-packages\\numpy\\__init__.py'>)
DEBUG 2022-02-08 17:11:33,702 on stmt: $94load_method.1 = getattr(value=$92load_global.0, attr=prod)
DEBUG 2022-02-08 17:11:33,702 on stmt: $const98.3 = const(int, 1)
DEBUG 2022-02-08 17:11:33,702 on stmt: $100binary_add.4 = edge_reps + $const98.3
DEBUG 2022-02-08 17:11:33,702 on stmt: steps.1 = call $94load_method.1($100binary_add.4, func=$94load_method.1, args=[Var($100binary_add.4, loop_hafnian.py:27)], kws=(), vararg=None, target=None)
DEBUG 2022-02-08 17:11:33,702 on stmt: jump 106
DEBUG 2022-02-08 17:11:33,702 ==== SSA block rewrite pass on 106
DEBUG 2022-02-08 17:11:33,702 Running <numba.core.ssa._FixSSAVars object at 0x000001E9F64F0AF0>
DEBUG 2022-02-08 17:11:33,702 on stmt: steps.2 = phi(incoming_values=[Var(steps, loop_hafnian.py:25), Var(steps.1, loop_hafnian.py:27)], incoming_blocks=[52, 92])
DEBUG 2022-02-08 17:11:33,702 on stmt: $108load_method.1 = getattr(value=edge_reps, attr=max)
DEBUG 2022-02-08 17:11:33,702 on stmt: $110call_method.2 = call $108load_method.1(func=$108load_method.1, args=[], kws=(), vararg=None, target=None)
DEBUG 2022-02-08 17:11:33,702 on stmt: $const112.3 = const(int, 1)
DEBUG 2022-02-08 17:11:33,702 on stmt: max_binom = $110call_method.2 + $const112.3
DEBUG 2022-02-08 17:11:33,702 on stmt: $118load_global.5 = global(precompute_binoms: CPUDispatcher(<function precompute_binoms at 0x000001E9ECB30160>))
DEBUG 2022-02-08 17:11:33,702 on stmt: binoms = call $118load_global.5(max_binom, func=$118load_global.5, args=[Var(max_binom, loop_hafnian.py:29)], kws=(), vararg=None, target=None)
DEBUG 2022-02-08 17:11:33,702 on stmt: H = const(int, 0)
DEBUG 2022-02-08 17:11:33,702 on stmt: $130load_global.9 = global(range: <class 'range'>)
DEBUG 2022-02-08 17:11:33,702 on stmt: $138call_function.13 = call $130load_global.9(rank, steps.2, size, func=$130load_global.9, args=[Var(rank, loop_hafnian.py:20), Var(steps.2, loop_hafnian.py:29), Var(size, loop_hafnian.py:20)], kws=(), vararg=None, target=None)
DEBUG 2022-02-08 17:11:33,702 on stmt: $140get_iter.14 = getiter(value=$138call_function.13)
DEBUG 2022-02-08 17:11:33,702 on stmt: $phi142.0 = $140get_iter.14
DEBUG 2022-02-08 17:11:33,702 on stmt: jump 142
DEBUG 2022-02-08 17:11:33,702 ==== SSA block rewrite pass on 142
DEBUG 2022-02-08 17:11:33,702 Running <numba.core.ssa._FixSSAVars object at 0x000001E9F64F0AF0>
DEBUG 2022-02-08 17:11:33,702 on stmt: $142for_iter.1 = iternext(value=$phi142.0)
DEBUG 2022-02-08 17:11:33,702 on stmt: $142for_iter.2 = pair_first(value=$142for_iter.1)
DEBUG 2022-02-08 17:11:33,702 on stmt: $142for_iter.3 = pair_second(value=$142for_iter.1)
DEBUG 2022-02-08 17:11:33,702 on stmt: $phi144.1 = $142for_iter.2
DEBUG 2022-02-08 17:11:33,702 on stmt: branch $142for_iter.3, 144, 382
DEBUG 2022-02-08 17:11:33,702 ==== SSA block rewrite pass on 144
DEBUG 2022-02-08 17:11:33,702 Running <numba.core.ssa._FixSSAVars object at 0x000001E9F64F0AF0>
DEBUG 2022-02-08 17:11:33,702 on stmt: j = $phi144.1
DEBUG 2022-02-08 17:11:33,702 on stmt: $146load_global.2 = global(find_kept_edges: CPUDispatcher(<function find_kept_edges at 0x000001E9ECB305E0>))
DEBUG 2022-02-08 17:11:33,702 on stmt: kept_edges = call $146load_global.2(j, edge_reps, func=$146load_global.2, args=[Var(j, loop_hafnian.py:34), Var(edge_reps, loop_hafnian.py:20)], kws=(), vararg=None, target=None)
DEBUG 2022-02-08 17:11:33,702 on stmt: $158load_method.7 = getattr(value=kept_edges, attr=sum)
DEBUG 2022-02-08 17:11:33,702 on stmt: edge_sum = call $158load_method.7(func=$158load_method.7, args=[], kws=(), vararg=None, target=None)
DEBUG 2022-02-08 17:11:33,702 on stmt: binom_prod = const(float, 1.0)
DEBUG 2022-02-08 17:11:33,702 on stmt: $168load_global.10 = global(range: <class 'range'>)
DEBUG 2022-02-08 17:11:33,702 on stmt: $const172.12 = const(int, 2)
DEBUG 2022-02-08 17:11:33,702 on stmt: $174binary_floor_divide.13 = n // $const172.12
DEBUG 2022-02-08 17:11:33,702 on stmt: $176call_function.14 = call $168load_global.10($174binary_floor_divide.13, func=$168load_global.10, args=[Var($174binary_floor_divide.13, loop_hafnian.py:40)], kws=(), vararg=None, target=None)
DEBUG 2022-02-08 17:11:33,702 on stmt: $178get_iter.15 = getiter(value=$176call_function.14)
DEBUG 2022-02-08 17:11:33,702 on stmt: $phi180.1 = $178get_iter.15
DEBUG 2022-02-08 17:11:33,702 on stmt: jump 180
DEBUG 2022-02-08 17:11:33,702 ==== SSA block rewrite pass on 180
DEBUG 2022-02-08 17:11:33,702 Running <numba.core.ssa._FixSSAVars object at 0x000001E9F64F0AF0>
DEBUG 2022-02-08 17:11:33,702 on stmt: binom_prod.2 = phi(incoming_values=[Var(binom_prod, loop_hafnian.py:39), Var(binom_prod.1, loop_hafnian.py:41)], incoming_blocks=[144, 182])
DEBUG 2022-02-08 17:11:33,702 on stmt: $180for_iter.2 = iternext(value=$phi180.1)
DEBUG 2022-02-08 17:11:33,702 on stmt: $180for_iter.3 = pair_first(value=$180for_iter.2)
DEBUG 2022-02-08 17:11:33,702 on stmt: $180for_iter.4 = pair_second(value=$180for_iter.2)
DEBUG 2022-02-08 17:11:33,702 on stmt: $phi182.2 = $180for_iter.3
DEBUG 2022-02-08 17:11:33,702 on stmt: branch $180for_iter.4, 182, 210
DEBUG 2022-02-08 17:11:33,702 ==== SSA block rewrite pass on 182
DEBUG 2022-02-08 17:11:33,702 Running <numba.core.ssa._FixSSAVars object at 0x000001E9F64F0AF0>
DEBUG 2022-02-08 17:11:33,702 on stmt: i = $phi182.2
DEBUG 2022-02-08 17:11:33,702 on stmt: $192binary_subscr.7 = getitem(value=edge_reps, index=i, fn=<built-in function getitem>)
DEBUG 2022-02-08 17:11:33,702 on stmt: $198binary_subscr.10 = getitem(value=kept_edges, index=i, fn=<built-in function getitem>)
DEBUG 2022-02-08 17:11:33,702 on stmt: $200build_tuple.11 = build_tuple(items=[Var($192binary_subscr.7, loop_hafnian.py:41), Var($198binary_subscr.10, loop_hafnian.py:41)])
DEBUG 2022-02-08 17:11:33,702 on stmt: $202binary_subscr.12 = getitem(value=binoms, index=$200build_tuple.11, fn=<built-in function getitem>)
DEBUG 2022-02-08 17:11:33,702 on stmt: $204inplace_multiply.13 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=binom_prod.2, rhs=$202binary_subscr.12, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-08 17:11:33,702 on stmt: binom_prod.1 = $204inplace_multiply.13
DEBUG 2022-02-08 17:11:33,702 on stmt: jump 180
DEBUG 2022-02-08 17:11:33,702 ==== SSA block rewrite pass on 210
DEBUG 2022-02-08 17:11:33,702 Running <numba.core.ssa._FixSSAVars object at 0x000001E9F64F0AF0>
DEBUG 2022-02-08 17:11:33,702 on stmt: bool212 = global(bool: <class 'bool'>)
DEBUG 2022-02-08 17:11:33,702 on stmt: $212pred = call bool212(glynn, func=bool212, args=(Var(glynn, loop_hafnian.py:20),), kws=(), vararg=None, target=None)
DEBUG 2022-02-08 17:11:33,702 on stmt: branch $212pred, 214, 226
DEBUG 2022-02-08 17:11:33,702 ==== SSA block rewrite pass on 214
DEBUG 2022-02-08 17:11:33,702 Running <numba.core.ssa._FixSSAVars object at 0x000001E9F64F0AF0>
DEBUG 2022-02-08 17:11:33,702 on stmt: $const214.1 = const(int, 2)
DEBUG 2022-02-08 17:11:33,702 on stmt: $218binary_multiply.3 = $const214.1 * kept_edges
DEBUG 2022-02-08 17:11:33,702 on stmt: kept_edges = $218binary_multiply.3 - edge_reps
DEBUG 2022-02-08 17:11:33,702 on stmt: jump 226
DEBUG 2022-02-08 17:11:33,702 ==== SSA block rewrite pass on 226
DEBUG 2022-02-08 17:11:33,702 Running <numba.core.ssa._FixSSAVars object at 0x000001E9F64F0AF0>
DEBUG 2022-02-08 17:11:33,702 on stmt: $226load_global.1 = global(get_submatrices: CPUDispatcher(<function get_submatrices at 0x000001E9ECB30AF0>))
DEBUG 2022-02-08 17:11:33,702 on stmt: $236call_function.6 = call $226load_global.1(kept_edges, A, D, oddV, func=$226load_global.1, args=[Var(kept_edges, loop_hafnian.py:36), Var(A, loop_hafnian.py:20), Var(D, loop_hafnian.py:20), Var(oddV, loop_hafnian.py:20)], kws=(), vararg=None, target=None)
DEBUG 2022-02-08 17:11:33,702 on stmt: $238unpack_sequence.11 = exhaust_iter(value=$236call_function.6, count=4)
DEBUG 2022-02-08 17:11:33,702 on stmt: $238unpack_sequence.7 = static_getitem(value=$238unpack_sequence.11, index=0, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-02-08 17:11:33,702 on stmt: $238unpack_sequence.8 = static_getitem(value=$238unpack_sequence.11, index=1, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-02-08 17:11:33,702 on stmt: $238unpack_sequence.9 = static_getitem(value=$238unpack_sequence.11, index=2, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-02-08 17:11:33,702 on stmt: $238unpack_sequence.10 = static_getitem(value=$238unpack_sequence.11, index=3, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-02-08 17:11:33,702 on stmt: AX_S = $238unpack_sequence.7
DEBUG 2022-02-08 17:11:33,702 on stmt: XD_S = $238unpack_sequence.8
DEBUG 2022-02-08 17:11:33,702 on stmt: D_S = $238unpack_sequence.9
DEBUG 2022-02-08 17:11:33,702 on stmt: oddVX_S = $238unpack_sequence.10
DEBUG 2022-02-08 17:11:33,702 on stmt: $248load_global.12 = global(eigvals: CPUDispatcher(<function eigvals at 0x000001E9ECB4E040>))
DEBUG 2022-02-08 17:11:33,702 on stmt: E = call $248load_global.12(AX_S, func=$248load_global.12, args=[Var(AX_S, loop_hafnian.py:46)], kws=(), vararg=None, target=None)
DEBUG 2022-02-08 17:11:33,702 on stmt: $const256.15 = const(float, -1.0)
DEBUG 2022-02-08 17:11:33,702 on stmt: $const260.17 = const(int, 2)
DEBUG 2022-02-08 17:11:33,702 on stmt: $262binary_floor_divide.18 = N // $const260.17
DEBUG 2022-02-08 17:11:33,702 on stmt: $266binary_subtract.20 = $262binary_floor_divide.18 - edge_sum
DEBUG 2022-02-08 17:11:33,702 on stmt: $268binary_power.21 = $const256.15 ** $266binary_subtract.20
DEBUG 2022-02-08 17:11:33,702 on stmt: prefac = $268binary_power.21 * binom_prod.2
DEBUG 2022-02-08 17:11:33,702 on stmt: $const278.25 = const(NoneType, None)
DEBUG 2022-02-08 17:11:33,702 on stmt: $280is_op.26 = const(int, 0)
DEBUG 2022-02-08 17:11:33,717 on stmt: bool282 = global(bool: <class 'bool'>)
DEBUG 2022-02-08 17:11:33,717 on stmt: $282pred = call bool282($280is_op.26, func=bool282, args=(Var($280is_op.26, loop_hafnian.py:52),), kws=(), vararg=None, target=None)
DEBUG 2022-02-08 17:11:33,717 on stmt: jump 320
DEBUG 2022-02-08 17:11:33,717 ==== SSA block rewrite pass on 320
DEBUG 2022-02-08 17:11:33,717 Running <numba.core.ssa._FixSSAVars object at 0x000001E9F64F0AF0>
DEBUG 2022-02-08 17:11:33,717 on stmt: bool322 = global(bool: <class 'bool'>)
DEBUG 2022-02-08 17:11:33,717 on stmt: $322pred = call bool322(glynn, func=bool322, args=(Var(glynn, loop_hafnian.py:20),), kws=(), vararg=None, target=None)
DEBUG 2022-02-08 17:11:33,717 on stmt: branch $322pred, 326, 348
DEBUG 2022-02-08 17:11:33,717 ==== SSA block rewrite pass on 326
DEBUG 2022-02-08 17:11:33,717 Running <numba.core.ssa._FixSSAVars object at 0x000001E9F64F0AF0>
DEBUG 2022-02-08 17:11:33,717 on stmt: $const328.2 = const(int, 0)
DEBUG 2022-02-08 17:11:33,717 on stmt: $330binary_subscr.3 = static_getitem(value=kept_edges, index=0, index_var=$const328.2, fn=<built-in function getitem>)
DEBUG 2022-02-08 17:11:33,717 on stmt: $const332.4 = const(int, 0)
DEBUG 2022-02-08 17:11:33,717 on stmt: $334compare_op.5 = $330binary_subscr.3 == $const332.4
DEBUG 2022-02-08 17:11:33,717 on stmt: bool336 = global(bool: <class 'bool'>)
DEBUG 2022-02-08 17:11:33,717 on stmt: $336pred = call bool336($334compare_op.5, func=bool336, args=(Var($334compare_op.5, loop_hafnian.py:55),), kws=(), vararg=None, target=None)
DEBUG 2022-02-08 17:11:33,717 on stmt: branch $336pred, 340, 348
DEBUG 2022-02-08 17:11:33,717 ==== SSA block rewrite pass on 340
DEBUG 2022-02-08 17:11:33,717 Running <numba.core.ssa._FixSSAVars object at 0x000001E9F64F0AF0>
DEBUG 2022-02-08 17:11:33,717 on stmt: $const342.2 = const(float, 0.5)
DEBUG 2022-02-08 17:11:33,717 on stmt: $344inplace_multiply.3 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=prefac, rhs=$const342.2, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-08 17:11:33,717 find_def var='prefac' stmt=$344inplace_multiply.3 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=prefac, rhs=$const342.2, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-08 17:11:33,717 find_def_from_top label 340
DEBUG 2022-02-08 17:11:33,717 idom 326 from label 340
DEBUG 2022-02-08 17:11:33,717 find_def_from_bottom label 326
DEBUG 2022-02-08 17:11:33,717 find_def_from_top label 326
DEBUG 2022-02-08 17:11:33,717 idom 320 from label 326
DEBUG 2022-02-08 17:11:33,717 find_def_from_bottom label 320
DEBUG 2022-02-08 17:11:33,717 find_def_from_top label 320
DEBUG 2022-02-08 17:11:33,717 idom 226 from label 320
DEBUG 2022-02-08 17:11:33,717 find_def_from_bottom label 226
DEBUG 2022-02-08 17:11:33,717 on stmt: prefac.1 = $344inplace_multiply.3
DEBUG 2022-02-08 17:11:33,717 on stmt: jump 348
DEBUG 2022-02-08 17:11:33,717 ==== SSA block rewrite pass on 348
DEBUG 2022-02-08 17:11:33,717 Running <numba.core.ssa._FixSSAVars object at 0x000001E9F64F0AF0>
DEBUG 2022-02-08 17:11:33,717 on stmt: $352load_global.3 = global(f_loop: CPUDispatcher(<function f_loop at 0x000001E9ECB30790>))
DEBUG 2022-02-08 17:11:33,717 on stmt: $364call_function.9 = call $352load_global.3(E, AX_S, XD_S, D_S, N, func=$352load_global.3, args=[Var(E, loop_hafnian.py:48), Var(AX_S, loop_hafnian.py:46), Var(XD_S, loop_hafnian.py:46), Var(D_S, loop_hafnian.py:46), Var(N, loop_hafnian.py:21)], kws=(), vararg=None, target=None)
DEBUG 2022-02-08 17:11:33,717 on stmt: $const368.11 = const(int, 2)
DEBUG 2022-02-08 17:11:33,717 on stmt: $370binary_floor_divide.12 = N // $const368.11
DEBUG 2022-02-08 17:11:33,717 on stmt: $372binary_subscr.13 = getitem(value=$364call_function.9, index=$370binary_floor_divide.12, fn=<built-in function getitem>)
DEBUG 2022-02-08 17:11:33,717 on stmt: $374binary_multiply.14 = prefac * $372binary_subscr.13
DEBUG 2022-02-08 17:11:33,717 find_def var='prefac' stmt=$374binary_multiply.14 = prefac * $372binary_subscr.13
DEBUG 2022-02-08 17:11:33,717 find_def_from_top label 348
DEBUG 2022-02-08 17:11:33,717 insert phi node prefac.2 = phi(incoming_values=[], incoming_blocks=[]) at 348
DEBUG 2022-02-08 17:11:33,717 find_def_from_bottom label 320
DEBUG 2022-02-08 17:11:33,717 find_def_from_top label 320
DEBUG 2022-02-08 17:11:33,717 idom 226 from label 320
DEBUG 2022-02-08 17:11:33,717 find_def_from_bottom label 226
DEBUG 2022-02-08 17:11:33,717 incoming_def prefac = $268binary_power.21 * binom_prod.2
DEBUG 2022-02-08 17:11:33,717 find_def_from_bottom label 340
DEBUG 2022-02-08 17:11:33,717 incoming_def prefac.1 = $344inplace_multiply.3
DEBUG 2022-02-08 17:11:33,717 find_def_from_bottom label 326
DEBUG 2022-02-08 17:11:33,717 find_def_from_top label 326
DEBUG 2022-02-08 17:11:33,717 idom 320 from label 326
DEBUG 2022-02-08 17:11:33,717 find_def_from_bottom label 320
DEBUG 2022-02-08 17:11:33,717 find_def_from_top label 320
DEBUG 2022-02-08 17:11:33,717 idom 226 from label 320
DEBUG 2022-02-08 17:11:33,717 find_def_from_bottom label 226
DEBUG 2022-02-08 17:11:33,717 incoming_def prefac = $268binary_power.21 * binom_prod.2
DEBUG 2022-02-08 17:11:33,717 replaced with: $374binary_multiply.14 = prefac.2 * $372binary_subscr.13
DEBUG 2022-02-08 17:11:33,717 on stmt: $376inplace_add.15 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=H, rhs=$374binary_multiply.14, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-08 17:11:33,717 on stmt: H = $376inplace_add.15
DEBUG 2022-02-08 17:11:33,717 on stmt: jump 437
DEBUG 2022-02-08 17:11:33,717 ==== SSA block rewrite pass on 382
DEBUG 2022-02-08 17:11:33,717 Running <numba.core.ssa._FixSSAVars object at 0x000001E9F64F0AF0>
DEBUG 2022-02-08 17:11:33,717 on stmt: bool384 = global(bool: <class 'bool'>)
DEBUG 2022-02-08 17:11:33,717 on stmt: $384pred = call bool384(glynn, func=bool384, args=(Var(glynn, loop_hafnian.py:20),), kws=(), vararg=None, target=None)
DEBUG 2022-02-08 17:11:33,717 on stmt: branch $384pred, 388, 436
DEBUG 2022-02-08 17:11:33,717 ==== SSA block rewrite pass on 388
DEBUG 2022-02-08 17:11:33,717 Running <numba.core.ssa._FixSSAVars object at 0x000001E9F64F0AF0>
DEBUG 2022-02-08 17:11:33,717 on stmt: $const390.1 = const(NoneType, None)
DEBUG 2022-02-08 17:11:33,717 on stmt: $392is_op.2 = const(int, 1)
DEBUG 2022-02-08 17:11:33,717 on stmt: bool394 = global(bool: <class 'bool'>)
DEBUG 2022-02-08 17:11:33,717 on stmt: $394pred = call bool394($392is_op.2, func=bool394, args=(Var($392is_op.2, loop_hafnian.py:60),), kws=(), vararg=None, target=None)
DEBUG 2022-02-08 17:11:33,717 on stmt: jump 398
DEBUG 2022-02-08 17:11:33,717 ==== SSA block rewrite pass on 398
DEBUG 2022-02-08 17:11:33,717 Running <numba.core.ssa._FixSSAVars object at 0x000001E9F64F0AF0>
DEBUG 2022-02-08 17:11:33,717 on stmt: $const400.1 = const(float, 0.5)
DEBUG 2022-02-08 17:11:33,717 on stmt: $const404.3 = const(int, 2)
DEBUG 2022-02-08 17:11:33,717 on stmt: $406binary_floor_divide.4 = N // $const404.3
DEBUG 2022-02-08 17:11:33,717 on stmt: $const408.5 = const(int, 1)
DEBUG 2022-02-08 17:11:33,717 on stmt: $410binary_subtract.6 = $406binary_floor_divide.4 - $const408.5
DEBUG 2022-02-08 17:11:33,717 on stmt: $412binary_power.7 = $const400.1 ** $410binary_subtract.6
DEBUG 2022-02-08 17:11:33,717 on stmt: $414binary_multiply.8 = H * $412binary_power.7
DEBUG 2022-02-08 17:11:33,717 on stmt: H = $414binary_multiply.8
DEBUG 2022-02-08 17:11:33,717 on stmt: jump 436
DEBUG 2022-02-08 17:11:33,717 ==== SSA block rewrite pass on 436
DEBUG 2022-02-08 17:11:33,717 Running <numba.core.ssa._FixSSAVars object at 0x000001E9F64F0AF0>
DEBUG 2022-02-08 17:11:33,717 on stmt: $438return_value.1 = cast(value=H)
DEBUG 2022-02-08 17:11:33,717 on stmt: return $438return_value.1
DEBUG 2022-02-08 17:11:33,717 ==== SSA block rewrite pass on 437
DEBUG 2022-02-08 17:11:33,717 Running <numba.core.ssa._FixSSAVars object at 0x000001E9F64F0AF0>
DEBUG 2022-02-08 17:11:33,717 on stmt: jump 142
DEBUG 2022-02-08 17:11:33,717 Fix SSA violator on var kept_edges
DEBUG 2022-02-08 17:11:33,717 ==== SSA block rewrite pass on 0
DEBUG 2022-02-08 17:11:33,717 Running <numba.core.ssa._FreshVarHandler object at 0x000001E9F644CEE0>
DEBUG 2022-02-08 17:11:33,717 on stmt: A = arg(0, name=A)
DEBUG 2022-02-08 17:11:33,717 on stmt: D = arg(1, name=D)
DEBUG 2022-02-08 17:11:33,717 on stmt: edge_reps = arg(2, name=edge_reps)
DEBUG 2022-02-08 17:11:33,717 on stmt: oddloop = arg(3, name=oddloop)
DEBUG 2022-02-08 17:11:33,717 on stmt: oddV = arg(4, name=oddV)
DEBUG 2022-02-08 17:11:33,717 on stmt: rank = arg(5, name=rank)
DEBUG 2022-02-08 17:11:33,717 on stmt: size = arg(6, name=size)
DEBUG 2022-02-08 17:11:33,717 on stmt: glynn = arg(7, name=glynn)
DEBUG 2022-02-08 17:11:33,717 on stmt: $4load_attr.1 = getattr(value=A, attr=shape)
DEBUG 2022-02-08 17:11:33,717 on stmt: $const6.2 = const(int, 0)
DEBUG 2022-02-08 17:11:33,717 on stmt: n = static_getitem(value=$4load_attr.1, index=0, index_var=$const6.2, fn=<built-in function getitem>)
DEBUG 2022-02-08 17:11:33,717 on stmt: $const12.4 = const(int, 2)
DEBUG 2022-02-08 17:11:33,717 on stmt: $16load_method.6 = getattr(value=edge_reps, attr=sum)
DEBUG 2022-02-08 17:11:33,717 on stmt: $18call_method.7 = call $16load_method.6(func=$16load_method.6, args=[], kws=(), vararg=None, target=None)
DEBUG 2022-02-08 17:11:33,717 on stmt: N = $const12.4 * $18call_method.7
DEBUG 2022-02-08 17:11:33,717 on stmt: $const26.10 = const(NoneType, None)
DEBUG 2022-02-08 17:11:33,717 on stmt: $28is_op.11 = const(int, 0)
DEBUG 2022-02-08 17:11:33,717 on stmt: bool30 = global(bool: <class 'bool'>)
DEBUG 2022-02-08 17:11:33,717 on stmt: $30pred = call bool30($28is_op.11, func=bool30, args=(Var($28is_op.11, loop_hafnian.py:22),), kws=(), vararg=None, target=None)
DEBUG 2022-02-08 17:11:33,717 on stmt: jump 40
DEBUG 2022-02-08 17:11:33,717 ==== SSA block rewrite pass on 40
DEBUG 2022-02-08 17:11:33,717 Running <numba.core.ssa._FreshVarHandler object at 0x000001E9F644CEE0>
DEBUG 2022-02-08 17:11:33,717 on stmt: bool42 = global(bool: <class 'bool'>)
DEBUG 2022-02-08 17:11:33,717 on stmt: $42pred = call bool42(glynn, func=bool42, args=(Var(glynn, loop_hafnian.py:20),), kws=(), vararg=None, target=None)
DEBUG 2022-02-08 17:11:33,717 on stmt: branch $42pred, 44, 92
DEBUG 2022-02-08 17:11:33,717 ==== SSA block rewrite pass on 44
DEBUG 2022-02-08 17:11:33,717 Running <numba.core.ssa._FreshVarHandler object at 0x000001E9F644CEE0>
DEBUG 2022-02-08 17:11:33,717 on stmt: $const46.1 = const(NoneType, None)
DEBUG 2022-02-08 17:11:33,717 on stmt: $48is_op.2 = const(int, 1)
DEBUG 2022-02-08 17:11:33,717 on stmt: bool50 = global(bool: <class 'bool'>)
DEBUG 2022-02-08 17:11:33,717 on stmt: $50pred = call bool50($48is_op.2, func=bool50, args=(Var($48is_op.2, loop_hafnian.py:24),), kws=(), vararg=None, target=None)
DEBUG 2022-02-08 17:11:33,717 on stmt: jump 52
DEBUG 2022-02-08 17:11:33,717 ==== SSA block rewrite pass on 52
DEBUG 2022-02-08 17:11:33,717 Running <numba.core.ssa._FreshVarHandler object at 0x000001E9F644CEE0>
DEBUG 2022-02-08 17:11:33,717 on stmt: $const54.1 = const(int, 0)
DEBUG 2022-02-08 17:11:33,717 on stmt: $56binary_subscr.2 = static_getitem(value=edge_reps, index=0, index_var=$const54.1, fn=<built-in function getitem>)
DEBUG 2022-02-08 17:11:33,717 on stmt: $const58.3 = const(int, 2)
DEBUG 2022-02-08 17:11:33,717 on stmt: $60binary_add.4 = $56binary_subscr.2 + $const58.3
DEBUG 2022-02-08 17:11:33,717 on stmt: $const62.5 = const(int, 2)
DEBUG 2022-02-08 17:11:33,717 on stmt: $64binary_floor_divide.6 = $60binary_add.4 // $const62.5
DEBUG 2022-02-08 17:11:33,717 on stmt: $66load_global.7 = global(np: <module 'numpy' from 'C:\\Users\\zl4821\\Anaconda3\\envs\\GBS\\lib\\site-packages\\numpy\\__init__.py'>)
DEBUG 2022-02-08 17:11:33,717 on stmt: $68load_method.8 = getattr(value=$66load_global.7, attr=prod)
DEBUG 2022-02-08 17:11:33,717 on stmt: $const72.10 = const(int, 1)
DEBUG 2022-02-08 17:11:33,717 on stmt: $const74.11 = const(NoneType, None)
DEBUG 2022-02-08 17:11:33,717 on stmt: $76build_slice.12 = global(slice: <class 'slice'>)
DEBUG 2022-02-08 17:11:33,717 on stmt: $76build_slice.13 = call $76build_slice.12($const72.10, $const74.11, func=$76build_slice.12, args=(Var($const72.10, loop_hafnian.py:25), Var($const74.11, loop_hafnian.py:25)), kws=(), vararg=None, target=None)
DEBUG 2022-02-08 17:11:33,717 on stmt: $78binary_subscr.14 = static_getitem(value=edge_reps, index=slice(1, None, None), index_var=$76build_slice.13, fn=<built-in function getitem>)
DEBUG 2022-02-08 17:11:33,717 on stmt: $const80.15 = const(int, 1)
DEBUG 2022-02-08 17:11:33,717 on stmt: $82binary_add.16 = $78binary_subscr.14 + $const80.15
DEBUG 2022-02-08 17:11:33,717 on stmt: $84call_method.17 = call $68load_method.8($82binary_add.16, func=$68load_method.8, args=[Var($82binary_add.16, loop_hafnian.py:25)], kws=(), vararg=None, target=None)
DEBUG 2022-02-08 17:11:33,717 on stmt: steps = $64binary_floor_divide.6 * $84call_method.17
DEBUG 2022-02-08 17:11:33,717 on stmt: jump 106
DEBUG 2022-02-08 17:11:33,717 ==== SSA block rewrite pass on 92
DEBUG 2022-02-08 17:11:33,717 Running <numba.core.ssa._FreshVarHandler object at 0x000001E9F644CEE0>
DEBUG 2022-02-08 17:11:33,717 on stmt: $92load_global.0 = global(np: <module 'numpy' from 'C:\\Users\\zl4821\\Anaconda3\\envs\\GBS\\lib\\site-packages\\numpy\\__init__.py'>)
DEBUG 2022-02-08 17:11:33,717 on stmt: $94load_method.1 = getattr(value=$92load_global.0, attr=prod)
DEBUG 2022-02-08 17:11:33,717 on stmt: $const98.3 = const(int, 1)
DEBUG 2022-02-08 17:11:33,717 on stmt: $100binary_add.4 = edge_reps + $const98.3
DEBUG 2022-02-08 17:11:33,717 on stmt: steps.1 = call $94load_method.1($100binary_add.4, func=$94load_method.1, args=[Var($100binary_add.4, loop_hafnian.py:27)], kws=(), vararg=None, target=None)
DEBUG 2022-02-08 17:11:33,717 on stmt: jump 106
DEBUG 2022-02-08 17:11:33,717 ==== SSA block rewrite pass on 106
DEBUG 2022-02-08 17:11:33,717 Running <numba.core.ssa._FreshVarHandler object at 0x000001E9F644CEE0>
DEBUG 2022-02-08 17:11:33,717 on stmt: steps.2 = phi(incoming_values=[Var(steps, loop_hafnian.py:25), Var(steps.1, loop_hafnian.py:27)], incoming_blocks=[52, 92])
DEBUG 2022-02-08 17:11:33,717 on stmt: $108load_method.1 = getattr(value=edge_reps, attr=max)
DEBUG 2022-02-08 17:11:33,717 on stmt: $110call_method.2 = call $108load_method.1(func=$108load_method.1, args=[], kws=(), vararg=None, target=None)
DEBUG 2022-02-08 17:11:33,717 on stmt: $const112.3 = const(int, 1)
DEBUG 2022-02-08 17:11:33,717 on stmt: max_binom = $110call_method.2 + $const112.3
DEBUG 2022-02-08 17:11:33,717 on stmt: $118load_global.5 = global(precompute_binoms: CPUDispatcher(<function precompute_binoms at 0x000001E9ECB30160>))
DEBUG 2022-02-08 17:11:33,717 on stmt: binoms = call $118load_global.5(max_binom, func=$118load_global.5, args=[Var(max_binom, loop_hafnian.py:29)], kws=(), vararg=None, target=None)
DEBUG 2022-02-08 17:11:33,717 on stmt: H = const(int, 0)
DEBUG 2022-02-08 17:11:33,717 on stmt: $130load_global.9 = global(range: <class 'range'>)
DEBUG 2022-02-08 17:11:33,733 on stmt: $138call_function.13 = call $130load_global.9(rank, steps.2, size, func=$130load_global.9, args=[Var(rank, loop_hafnian.py:20), Var(steps.2, loop_hafnian.py:29), Var(size, loop_hafnian.py:20)], kws=(), vararg=None, target=None)
DEBUG 2022-02-08 17:11:33,733 on stmt: $140get_iter.14 = getiter(value=$138call_function.13)
DEBUG 2022-02-08 17:11:33,733 on stmt: $phi142.0 = $140get_iter.14
DEBUG 2022-02-08 17:11:33,733 on stmt: jump 142
DEBUG 2022-02-08 17:11:33,733 ==== SSA block rewrite pass on 142
DEBUG 2022-02-08 17:11:33,733 Running <numba.core.ssa._FreshVarHandler object at 0x000001E9F644CEE0>
DEBUG 2022-02-08 17:11:33,733 on stmt: $142for_iter.1 = iternext(value=$phi142.0)
DEBUG 2022-02-08 17:11:33,733 on stmt: $142for_iter.2 = pair_first(value=$142for_iter.1)
DEBUG 2022-02-08 17:11:33,733 on stmt: $142for_iter.3 = pair_second(value=$142for_iter.1)
DEBUG 2022-02-08 17:11:33,733 on stmt: $phi144.1 = $142for_iter.2
DEBUG 2022-02-08 17:11:33,733 on stmt: branch $142for_iter.3, 144, 382
DEBUG 2022-02-08 17:11:33,733 ==== SSA block rewrite pass on 144
DEBUG 2022-02-08 17:11:33,733 Running <numba.core.ssa._FreshVarHandler object at 0x000001E9F644CEE0>
DEBUG 2022-02-08 17:11:33,733 on stmt: j = $phi144.1
DEBUG 2022-02-08 17:11:33,733 on stmt: $146load_global.2 = global(find_kept_edges: CPUDispatcher(<function find_kept_edges at 0x000001E9ECB305E0>))
DEBUG 2022-02-08 17:11:33,733 on stmt: kept_edges = call $146load_global.2(j, edge_reps, func=$146load_global.2, args=[Var(j, loop_hafnian.py:34), Var(edge_reps, loop_hafnian.py:20)], kws=(), vararg=None, target=None)
DEBUG 2022-02-08 17:11:33,733 first assign: kept_edges
DEBUG 2022-02-08 17:11:33,733 replaced with: kept_edges = call $146load_global.2(j, edge_reps, func=$146load_global.2, args=[Var(j, loop_hafnian.py:34), Var(edge_reps, loop_hafnian.py:20)], kws=(), vararg=None, target=None)
DEBUG 2022-02-08 17:11:33,733 on stmt: $158load_method.7 = getattr(value=kept_edges, attr=sum)
DEBUG 2022-02-08 17:11:33,733 on stmt: edge_sum = call $158load_method.7(func=$158load_method.7, args=[], kws=(), vararg=None, target=None)
DEBUG 2022-02-08 17:11:33,733 on stmt: binom_prod = const(float, 1.0)
DEBUG 2022-02-08 17:11:33,733 on stmt: $168load_global.10 = global(range: <class 'range'>)
DEBUG 2022-02-08 17:11:33,733 on stmt: $const172.12 = const(int, 2)
DEBUG 2022-02-08 17:11:33,733 on stmt: $174binary_floor_divide.13 = n // $const172.12
DEBUG 2022-02-08 17:11:33,733 on stmt: $176call_function.14 = call $168load_global.10($174binary_floor_divide.13, func=$168load_global.10, args=[Var($174binary_floor_divide.13, loop_hafnian.py:40)], kws=(), vararg=None, target=None)
DEBUG 2022-02-08 17:11:33,733 on stmt: $178get_iter.15 = getiter(value=$176call_function.14)
DEBUG 2022-02-08 17:11:33,733 on stmt: $phi180.1 = $178get_iter.15
DEBUG 2022-02-08 17:11:33,733 on stmt: jump 180
DEBUG 2022-02-08 17:11:33,733 ==== SSA block rewrite pass on 180
DEBUG 2022-02-08 17:11:33,733 Running <numba.core.ssa._FreshVarHandler object at 0x000001E9F644CEE0>
DEBUG 2022-02-08 17:11:33,733 on stmt: binom_prod.2 = phi(incoming_values=[Var(binom_prod, loop_hafnian.py:39), Var(binom_prod.1, loop_hafnian.py:41)], incoming_blocks=[144, 182])
DEBUG 2022-02-08 17:11:33,733 on stmt: $180for_iter.2 = iternext(value=$phi180.1)
DEBUG 2022-02-08 17:11:33,733 on stmt: $180for_iter.3 = pair_first(value=$180for_iter.2)
DEBUG 2022-02-08 17:11:33,733 on stmt: $180for_iter.4 = pair_second(value=$180for_iter.2)
DEBUG 2022-02-08 17:11:33,733 on stmt: $phi182.2 = $180for_iter.3
DEBUG 2022-02-08 17:11:33,733 on stmt: branch $180for_iter.4, 182, 210
DEBUG 2022-02-08 17:11:33,733 ==== SSA block rewrite pass on 182
DEBUG 2022-02-08 17:11:33,733 Running <numba.core.ssa._FreshVarHandler object at 0x000001E9F644CEE0>
DEBUG 2022-02-08 17:11:33,733 on stmt: i = $phi182.2
DEBUG 2022-02-08 17:11:33,733 on stmt: $192binary_subscr.7 = getitem(value=edge_reps, index=i, fn=<built-in function getitem>)
DEBUG 2022-02-08 17:11:33,733 on stmt: $198binary_subscr.10 = getitem(value=kept_edges, index=i, fn=<built-in function getitem>)
DEBUG 2022-02-08 17:11:33,733 on stmt: $200build_tuple.11 = build_tuple(items=[Var($192binary_subscr.7, loop_hafnian.py:41), Var($198binary_subscr.10, loop_hafnian.py:41)])
DEBUG 2022-02-08 17:11:33,733 on stmt: $202binary_subscr.12 = getitem(value=binoms, index=$200build_tuple.11, fn=<built-in function getitem>)
DEBUG 2022-02-08 17:11:33,733 on stmt: $204inplace_multiply.13 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=binom_prod.2, rhs=$202binary_subscr.12, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-08 17:11:33,733 on stmt: binom_prod.1 = $204inplace_multiply.13
DEBUG 2022-02-08 17:11:33,733 on stmt: jump 180
DEBUG 2022-02-08 17:11:33,733 ==== SSA block rewrite pass on 210
DEBUG 2022-02-08 17:11:33,733 Running <numba.core.ssa._FreshVarHandler object at 0x000001E9F644CEE0>
DEBUG 2022-02-08 17:11:33,733 on stmt: bool212 = global(bool: <class 'bool'>)
DEBUG 2022-02-08 17:11:33,733 on stmt: $212pred = call bool212(glynn, func=bool212, args=(Var(glynn, loop_hafnian.py:20),), kws=(), vararg=None, target=None)
DEBUG 2022-02-08 17:11:33,733 on stmt: branch $212pred, 214, 226
DEBUG 2022-02-08 17:11:33,733 ==== SSA block rewrite pass on 214
DEBUG 2022-02-08 17:11:33,733 Running <numba.core.ssa._FreshVarHandler object at 0x000001E9F644CEE0>
DEBUG 2022-02-08 17:11:33,733 on stmt: $const214.1 = const(int, 2)
DEBUG 2022-02-08 17:11:33,733 on stmt: $218binary_multiply.3 = $const214.1 * kept_edges
DEBUG 2022-02-08 17:11:33,733 on stmt: kept_edges = $218binary_multiply.3 - edge_reps
DEBUG 2022-02-08 17:11:33,733 replaced with: kept_edges.1 = $218binary_multiply.3 - edge_reps
DEBUG 2022-02-08 17:11:33,733 on stmt: jump 226
DEBUG 2022-02-08 17:11:33,733 ==== SSA block rewrite pass on 226
DEBUG 2022-02-08 17:11:33,733 Running <numba.core.ssa._FreshVarHandler object at 0x000001E9F644CEE0>
DEBUG 2022-02-08 17:11:33,733 on stmt: $226load_global.1 = global(get_submatrices: CPUDispatcher(<function get_submatrices at 0x000001E9ECB30AF0>))
DEBUG 2022-02-08 17:11:33,733 on stmt: $236call_function.6 = call $226load_global.1(kept_edges, A, D, oddV, func=$226load_global.1, args=[Var(kept_edges, loop_hafnian.py:36), Var(A, loop_hafnian.py:20), Var(D, loop_hafnian.py:20), Var(oddV, loop_hafnian.py:20)], kws=(), vararg=None, target=None)
DEBUG 2022-02-08 17:11:33,733 on stmt: $238unpack_sequence.11 = exhaust_iter(value=$236call_function.6, count=4)
DEBUG 2022-02-08 17:11:33,733 on stmt: $238unpack_sequence.7 = static_getitem(value=$238unpack_sequence.11, index=0, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-02-08 17:11:33,733 on stmt: $238unpack_sequence.8 = static_getitem(value=$238unpack_sequence.11, index=1, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-02-08 17:11:33,733 on stmt: $238unpack_sequence.9 = static_getitem(value=$238unpack_sequence.11, index=2, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-02-08 17:11:33,733 on stmt: $238unpack_sequence.10 = static_getitem(value=$238unpack_sequence.11, index=3, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-02-08 17:11:33,733 on stmt: AX_S = $238unpack_sequence.7
DEBUG 2022-02-08 17:11:33,733 on stmt: XD_S = $238unpack_sequence.8
DEBUG 2022-02-08 17:11:33,733 on stmt: D_S = $238unpack_sequence.9
DEBUG 2022-02-08 17:11:33,733 on stmt: oddVX_S = $238unpack_sequence.10
DEBUG 2022-02-08 17:11:33,733 on stmt: $248load_global.12 = global(eigvals: CPUDispatcher(<function eigvals at 0x000001E9ECB4E040>))
DEBUG 2022-02-08 17:11:33,733 on stmt: E = call $248load_global.12(AX_S, func=$248load_global.12, args=[Var(AX_S, loop_hafnian.py:46)], kws=(), vararg=None, target=None)
DEBUG 2022-02-08 17:11:33,733 on stmt: $const256.15 = const(float, -1.0)
DEBUG 2022-02-08 17:11:33,733 on stmt: $const260.17 = const(int, 2)
DEBUG 2022-02-08 17:11:33,733 on stmt: $262binary_floor_divide.18 = N // $const260.17
DEBUG 2022-02-08 17:11:33,733 on stmt: $266binary_subtract.20 = $262binary_floor_divide.18 - edge_sum
DEBUG 2022-02-08 17:11:33,733 on stmt: $268binary_power.21 = $const256.15 ** $266binary_subtract.20
DEBUG 2022-02-08 17:11:33,733 on stmt: prefac = $268binary_power.21 * binom_prod.2
DEBUG 2022-02-08 17:11:33,733 on stmt: $const278.25 = const(NoneType, None)
DEBUG 2022-02-08 17:11:33,733 on stmt: $280is_op.26 = const(int, 0)
DEBUG 2022-02-08 17:11:33,733 on stmt: bool282 = global(bool: <class 'bool'>)
DEBUG 2022-02-08 17:11:33,733 on stmt: $282pred = call bool282($280is_op.26, func=bool282, args=(Var($280is_op.26, loop_hafnian.py:52),), kws=(), vararg=None, target=None)
DEBUG 2022-02-08 17:11:33,733 on stmt: jump 320
DEBUG 2022-02-08 17:11:33,733 ==== SSA block rewrite pass on 320
DEBUG 2022-02-08 17:11:33,733 Running <numba.core.ssa._FreshVarHandler object at 0x000001E9F644CEE0>
DEBUG 2022-02-08 17:11:33,733 on stmt: bool322 = global(bool: <class 'bool'>)
DEBUG 2022-02-08 17:11:33,733 on stmt: $322pred = call bool322(glynn, func=bool322, args=(Var(glynn, loop_hafnian.py:20),), kws=(), vararg=None, target=None)
DEBUG 2022-02-08 17:11:33,733 on stmt: branch $322pred, 326, 348
DEBUG 2022-02-08 17:11:33,733 ==== SSA block rewrite pass on 326
DEBUG 2022-02-08 17:11:33,733 Running <numba.core.ssa._FreshVarHandler object at 0x000001E9F644CEE0>
DEBUG 2022-02-08 17:11:33,733 on stmt: $const328.2 = const(int, 0)
DEBUG 2022-02-08 17:11:33,733 on stmt: $330binary_subscr.3 = static_getitem(value=kept_edges, index=0, index_var=$const328.2, fn=<built-in function getitem>)
DEBUG 2022-02-08 17:11:33,733 on stmt: $const332.4 = const(int, 0)
DEBUG 2022-02-08 17:11:33,733 on stmt: $334compare_op.5 = $330binary_subscr.3 == $const332.4
DEBUG 2022-02-08 17:11:33,733 on stmt: bool336 = global(bool: <class 'bool'>)
DEBUG 2022-02-08 17:11:33,733 on stmt: $336pred = call bool336($334compare_op.5, func=bool336, args=(Var($334compare_op.5, loop_hafnian.py:55),), kws=(), vararg=None, target=None)
DEBUG 2022-02-08 17:11:33,733 on stmt: branch $336pred, 340, 348
DEBUG 2022-02-08 17:11:33,733 ==== SSA block rewrite pass on 340
DEBUG 2022-02-08 17:11:33,733 Running <numba.core.ssa._FreshVarHandler object at 0x000001E9F644CEE0>
DEBUG 2022-02-08 17:11:33,733 on stmt: $const342.2 = const(float, 0.5)
DEBUG 2022-02-08 17:11:33,733 on stmt: $344inplace_multiply.3 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=prefac, rhs=$const342.2, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-08 17:11:33,733 on stmt: prefac.1 = $344inplace_multiply.3
DEBUG 2022-02-08 17:11:33,733 on stmt: jump 348
DEBUG 2022-02-08 17:11:33,733 ==== SSA block rewrite pass on 348
DEBUG 2022-02-08 17:11:33,733 Running <numba.core.ssa._FreshVarHandler object at 0x000001E9F644CEE0>
DEBUG 2022-02-08 17:11:33,733 on stmt: prefac.2 = phi(incoming_values=[Var(prefac, loop_hafnian.py:50), Var(prefac.1, loop_hafnian.py:56), Var(prefac, loop_hafnian.py:50)], incoming_blocks=[320, 340, 326])
DEBUG 2022-02-08 17:11:33,733 on stmt: $352load_global.3 = global(f_loop: CPUDispatcher(<function f_loop at 0x000001E9ECB30790>))
DEBUG 2022-02-08 17:11:33,733 on stmt: $364call_function.9 = call $352load_global.3(E, AX_S, XD_S, D_S, N, func=$352load_global.3, args=[Var(E, loop_hafnian.py:48), Var(AX_S, loop_hafnian.py:46), Var(XD_S, loop_hafnian.py:46), Var(D_S, loop_hafnian.py:46), Var(N, loop_hafnian.py:21)], kws=(), vararg=None, target=None)
DEBUG 2022-02-08 17:11:33,733 on stmt: $const368.11 = const(int, 2)
DEBUG 2022-02-08 17:11:33,733 on stmt: $370binary_floor_divide.12 = N // $const368.11
DEBUG 2022-02-08 17:11:33,733 on stmt: $372binary_subscr.13 = getitem(value=$364call_function.9, index=$370binary_floor_divide.12, fn=<built-in function getitem>)
DEBUG 2022-02-08 17:11:33,733 on stmt: $374binary_multiply.14 = prefac.2 * $372binary_subscr.13
DEBUG 2022-02-08 17:11:33,733 on stmt: $376inplace_add.15 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=H, rhs=$374binary_multiply.14, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-08 17:11:33,733 on stmt: H = $376inplace_add.15
DEBUG 2022-02-08 17:11:33,733 on stmt: jump 437
DEBUG 2022-02-08 17:11:33,733 ==== SSA block rewrite pass on 382
DEBUG 2022-02-08 17:11:33,733 Running <numba.core.ssa._FreshVarHandler object at 0x000001E9F644CEE0>
DEBUG 2022-02-08 17:11:33,733 on stmt: bool384 = global(bool: <class 'bool'>)
DEBUG 2022-02-08 17:11:33,733 on stmt: $384pred = call bool384(glynn, func=bool384, args=(Var(glynn, loop_hafnian.py:20),), kws=(), vararg=None, target=None)
DEBUG 2022-02-08 17:11:33,733 on stmt: branch $384pred, 388, 436
DEBUG 2022-02-08 17:11:33,733 ==== SSA block rewrite pass on 388
DEBUG 2022-02-08 17:11:33,733 Running <numba.core.ssa._FreshVarHandler object at 0x000001E9F644CEE0>
DEBUG 2022-02-08 17:11:33,733 on stmt: $const390.1 = const(NoneType, None)
DEBUG 2022-02-08 17:11:33,733 on stmt: $392is_op.2 = const(int, 1)
DEBUG 2022-02-08 17:11:33,733 on stmt: bool394 = global(bool: <class 'bool'>)
DEBUG 2022-02-08 17:11:33,733 on stmt: $394pred = call bool394($392is_op.2, func=bool394, args=(Var($392is_op.2, loop_hafnian.py:60),), kws=(), vararg=None, target=None)
DEBUG 2022-02-08 17:11:33,733 on stmt: jump 398
DEBUG 2022-02-08 17:11:33,733 ==== SSA block rewrite pass on 398
DEBUG 2022-02-08 17:11:33,733 Running <numba.core.ssa._FreshVarHandler object at 0x000001E9F644CEE0>
DEBUG 2022-02-08 17:11:33,733 on stmt: $const400.1 = const(float, 0.5)
DEBUG 2022-02-08 17:11:33,733 on stmt: $const404.3 = const(int, 2)
DEBUG 2022-02-08 17:11:33,733 on stmt: $406binary_floor_divide.4 = N // $const404.3
DEBUG 2022-02-08 17:11:33,733 on stmt: $const408.5 = const(int, 1)
DEBUG 2022-02-08 17:11:33,733 on stmt: $410binary_subtract.6 = $406binary_floor_divide.4 - $const408.5
DEBUG 2022-02-08 17:11:33,733 on stmt: $412binary_power.7 = $const400.1 ** $410binary_subtract.6
DEBUG 2022-02-08 17:11:33,733 on stmt: $414binary_multiply.8 = H * $412binary_power.7
DEBUG 2022-02-08 17:11:33,733 on stmt: H = $414binary_multiply.8
DEBUG 2022-02-08 17:11:33,733 on stmt: jump 436
DEBUG 2022-02-08 17:11:33,733 ==== SSA block rewrite pass on 436
DEBUG 2022-02-08 17:11:33,733 Running <numba.core.ssa._FreshVarHandler object at 0x000001E9F644CEE0>
DEBUG 2022-02-08 17:11:33,733 on stmt: $438return_value.1 = cast(value=H)
DEBUG 2022-02-08 17:11:33,733 on stmt: return $438return_value.1
DEBUG 2022-02-08 17:11:33,733 ==== SSA block rewrite pass on 437
DEBUG 2022-02-08 17:11:33,733 Running <numba.core.ssa._FreshVarHandler object at 0x000001E9F644CEE0>
DEBUG 2022-02-08 17:11:33,733 on stmt: jump 142
DEBUG 2022-02-08 17:11:33,733 Replaced assignments: defaultdict(<class 'list'>,
            {144: [<numba.core.ir.Assign object at 0x000001E9F64F0970>],
             214: [<numba.core.ir.Assign object at 0x000001E9F64F0610>]})
DEBUG 2022-02-08 17:11:33,733 ==== SSA block rewrite pass on 0
DEBUG 2022-02-08 17:11:33,733 Running <numba.core.ssa._FixSSAVars object at 0x000001E9F652B3D0>
DEBUG 2022-02-08 17:11:33,733 on stmt: A = arg(0, name=A)
DEBUG 2022-02-08 17:11:33,733 on stmt: D = arg(1, name=D)
DEBUG 2022-02-08 17:11:33,733 on stmt: edge_reps = arg(2, name=edge_reps)
DEBUG 2022-02-08 17:11:33,733 on stmt: oddloop = arg(3, name=oddloop)
DEBUG 2022-02-08 17:11:33,733 on stmt: oddV = arg(4, name=oddV)
DEBUG 2022-02-08 17:11:33,733 on stmt: rank = arg(5, name=rank)
DEBUG 2022-02-08 17:11:33,733 on stmt: size = arg(6, name=size)
DEBUG 2022-02-08 17:11:33,733 on stmt: glynn = arg(7, name=glynn)
DEBUG 2022-02-08 17:11:33,733 on stmt: $4load_attr.1 = getattr(value=A, attr=shape)
DEBUG 2022-02-08 17:11:33,733 on stmt: $const6.2 = const(int, 0)
DEBUG 2022-02-08 17:11:33,733 on stmt: n = static_getitem(value=$4load_attr.1, index=0, index_var=$const6.2, fn=<built-in function getitem>)
DEBUG 2022-02-08 17:11:33,733 on stmt: $const12.4 = const(int, 2)
DEBUG 2022-02-08 17:11:33,733 on stmt: $16load_method.6 = getattr(value=edge_reps, attr=sum)
DEBUG 2022-02-08 17:11:33,733 on stmt: $18call_method.7 = call $16load_method.6(func=$16load_method.6, args=[], kws=(), vararg=None, target=None)
DEBUG 2022-02-08 17:11:33,733 on stmt: N = $const12.4 * $18call_method.7
DEBUG 2022-02-08 17:11:33,733 on stmt: $const26.10 = const(NoneType, None)
DEBUG 2022-02-08 17:11:33,733 on stmt: $28is_op.11 = const(int, 0)
DEBUG 2022-02-08 17:11:33,733 on stmt: bool30 = global(bool: <class 'bool'>)
DEBUG 2022-02-08 17:11:33,733 on stmt: $30pred = call bool30($28is_op.11, func=bool30, args=(Var($28is_op.11, loop_hafnian.py:22),), kws=(), vararg=None, target=None)
DEBUG 2022-02-08 17:11:33,733 on stmt: jump 40
DEBUG 2022-02-08 17:11:33,733 ==== SSA block rewrite pass on 40
DEBUG 2022-02-08 17:11:33,733 Running <numba.core.ssa._FixSSAVars object at 0x000001E9F652B3D0>
DEBUG 2022-02-08 17:11:33,733 on stmt: bool42 = global(bool: <class 'bool'>)
DEBUG 2022-02-08 17:11:33,733 on stmt: $42pred = call bool42(glynn, func=bool42, args=(Var(glynn, loop_hafnian.py:20),), kws=(), vararg=None, target=None)
DEBUG 2022-02-08 17:11:33,733 on stmt: branch $42pred, 44, 92
DEBUG 2022-02-08 17:11:33,733 ==== SSA block rewrite pass on 44
DEBUG 2022-02-08 17:11:33,733 Running <numba.core.ssa._FixSSAVars object at 0x000001E9F652B3D0>
DEBUG 2022-02-08 17:11:33,733 on stmt: $const46.1 = const(NoneType, None)
DEBUG 2022-02-08 17:11:33,733 on stmt: $48is_op.2 = const(int, 1)
DEBUG 2022-02-08 17:11:33,733 on stmt: bool50 = global(bool: <class 'bool'>)
DEBUG 2022-02-08 17:11:33,733 on stmt: $50pred = call bool50($48is_op.2, func=bool50, args=(Var($48is_op.2, loop_hafnian.py:24),), kws=(), vararg=None, target=None)
DEBUG 2022-02-08 17:11:33,733 on stmt: jump 52
DEBUG 2022-02-08 17:11:33,733 ==== SSA block rewrite pass on 52
DEBUG 2022-02-08 17:11:33,733 Running <numba.core.ssa._FixSSAVars object at 0x000001E9F652B3D0>
DEBUG 2022-02-08 17:11:33,733 on stmt: $const54.1 = const(int, 0)
DEBUG 2022-02-08 17:11:33,748 on stmt: $56binary_subscr.2 = static_getitem(value=edge_reps, index=0, index_var=$const54.1, fn=<built-in function getitem>)
DEBUG 2022-02-08 17:11:33,748 on stmt: $const58.3 = const(int, 2)
DEBUG 2022-02-08 17:11:33,748 on stmt: $60binary_add.4 = $56binary_subscr.2 + $const58.3
DEBUG 2022-02-08 17:11:33,748 on stmt: $const62.5 = const(int, 2)
DEBUG 2022-02-08 17:11:33,748 on stmt: $64binary_floor_divide.6 = $60binary_add.4 // $const62.5
DEBUG 2022-02-08 17:11:33,748 on stmt: $66load_global.7 = global(np: <module 'numpy' from 'C:\\Users\\zl4821\\Anaconda3\\envs\\GBS\\lib\\site-packages\\numpy\\__init__.py'>)
DEBUG 2022-02-08 17:11:33,748 on stmt: $68load_method.8 = getattr(value=$66load_global.7, attr=prod)
DEBUG 2022-02-08 17:11:33,748 on stmt: $const72.10 = const(int, 1)
DEBUG 2022-02-08 17:11:33,748 on stmt: $const74.11 = const(NoneType, None)
DEBUG 2022-02-08 17:11:33,748 on stmt: $76build_slice.12 = global(slice: <class 'slice'>)
DEBUG 2022-02-08 17:11:33,748 on stmt: $76build_slice.13 = call $76build_slice.12($const72.10, $const74.11, func=$76build_slice.12, args=(Var($const72.10, loop_hafnian.py:25), Var($const74.11, loop_hafnian.py:25)), kws=(), vararg=None, target=None)
DEBUG 2022-02-08 17:11:33,748 on stmt: $78binary_subscr.14 = static_getitem(value=edge_reps, index=slice(1, None, None), index_var=$76build_slice.13, fn=<built-in function getitem>)
DEBUG 2022-02-08 17:11:33,748 on stmt: $const80.15 = const(int, 1)
DEBUG 2022-02-08 17:11:33,748 on stmt: $82binary_add.16 = $78binary_subscr.14 + $const80.15
DEBUG 2022-02-08 17:11:33,748 on stmt: $84call_method.17 = call $68load_method.8($82binary_add.16, func=$68load_method.8, args=[Var($82binary_add.16, loop_hafnian.py:25)], kws=(), vararg=None, target=None)
DEBUG 2022-02-08 17:11:33,748 on stmt: steps = $64binary_floor_divide.6 * $84call_method.17
DEBUG 2022-02-08 17:11:33,748 on stmt: jump 106
DEBUG 2022-02-08 17:11:33,748 ==== SSA block rewrite pass on 92
DEBUG 2022-02-08 17:11:33,748 Running <numba.core.ssa._FixSSAVars object at 0x000001E9F652B3D0>
DEBUG 2022-02-08 17:11:33,748 on stmt: $92load_global.0 = global(np: <module 'numpy' from 'C:\\Users\\zl4821\\Anaconda3\\envs\\GBS\\lib\\site-packages\\numpy\\__init__.py'>)
DEBUG 2022-02-08 17:11:33,748 on stmt: $94load_method.1 = getattr(value=$92load_global.0, attr=prod)
DEBUG 2022-02-08 17:11:33,748 on stmt: $const98.3 = const(int, 1)
DEBUG 2022-02-08 17:11:33,748 on stmt: $100binary_add.4 = edge_reps + $const98.3
DEBUG 2022-02-08 17:11:33,748 on stmt: steps.1 = call $94load_method.1($100binary_add.4, func=$94load_method.1, args=[Var($100binary_add.4, loop_hafnian.py:27)], kws=(), vararg=None, target=None)
DEBUG 2022-02-08 17:11:33,748 on stmt: jump 106
DEBUG 2022-02-08 17:11:33,748 ==== SSA block rewrite pass on 106
DEBUG 2022-02-08 17:11:33,748 Running <numba.core.ssa._FixSSAVars object at 0x000001E9F652B3D0>
DEBUG 2022-02-08 17:11:33,748 on stmt: steps.2 = phi(incoming_values=[Var(steps, loop_hafnian.py:25), Var(steps.1, loop_hafnian.py:27)], incoming_blocks=[52, 92])
DEBUG 2022-02-08 17:11:33,748 on stmt: $108load_method.1 = getattr(value=edge_reps, attr=max)
DEBUG 2022-02-08 17:11:33,748 on stmt: $110call_method.2 = call $108load_method.1(func=$108load_method.1, args=[], kws=(), vararg=None, target=None)
DEBUG 2022-02-08 17:11:33,748 on stmt: $const112.3 = const(int, 1)
DEBUG 2022-02-08 17:11:33,748 on stmt: max_binom = $110call_method.2 + $const112.3
DEBUG 2022-02-08 17:11:33,748 on stmt: $118load_global.5 = global(precompute_binoms: CPUDispatcher(<function precompute_binoms at 0x000001E9ECB30160>))
DEBUG 2022-02-08 17:11:33,748 on stmt: binoms = call $118load_global.5(max_binom, func=$118load_global.5, args=[Var(max_binom, loop_hafnian.py:29)], kws=(), vararg=None, target=None)
DEBUG 2022-02-08 17:11:33,748 on stmt: H = const(int, 0)
DEBUG 2022-02-08 17:11:33,748 on stmt: $130load_global.9 = global(range: <class 'range'>)
DEBUG 2022-02-08 17:11:33,748 on stmt: $138call_function.13 = call $130load_global.9(rank, steps.2, size, func=$130load_global.9, args=[Var(rank, loop_hafnian.py:20), Var(steps.2, loop_hafnian.py:29), Var(size, loop_hafnian.py:20)], kws=(), vararg=None, target=None)
DEBUG 2022-02-08 17:11:33,748 on stmt: $140get_iter.14 = getiter(value=$138call_function.13)
DEBUG 2022-02-08 17:11:33,748 on stmt: $phi142.0 = $140get_iter.14
DEBUG 2022-02-08 17:11:33,748 on stmt: jump 142
DEBUG 2022-02-08 17:11:33,748 ==== SSA block rewrite pass on 142
DEBUG 2022-02-08 17:11:33,748 Running <numba.core.ssa._FixSSAVars object at 0x000001E9F652B3D0>
DEBUG 2022-02-08 17:11:33,748 on stmt: $142for_iter.1 = iternext(value=$phi142.0)
DEBUG 2022-02-08 17:11:33,748 on stmt: $142for_iter.2 = pair_first(value=$142for_iter.1)
DEBUG 2022-02-08 17:11:33,748 on stmt: $142for_iter.3 = pair_second(value=$142for_iter.1)
DEBUG 2022-02-08 17:11:33,748 on stmt: $phi144.1 = $142for_iter.2
DEBUG 2022-02-08 17:11:33,748 on stmt: branch $142for_iter.3, 144, 382
DEBUG 2022-02-08 17:11:33,748 ==== SSA block rewrite pass on 144
DEBUG 2022-02-08 17:11:33,748 Running <numba.core.ssa._FixSSAVars object at 0x000001E9F652B3D0>
DEBUG 2022-02-08 17:11:33,748 on stmt: j = $phi144.1
DEBUG 2022-02-08 17:11:33,748 on stmt: $146load_global.2 = global(find_kept_edges: CPUDispatcher(<function find_kept_edges at 0x000001E9ECB305E0>))
DEBUG 2022-02-08 17:11:33,748 on stmt: kept_edges = call $146load_global.2(j, edge_reps, func=$146load_global.2, args=[Var(j, loop_hafnian.py:34), Var(edge_reps, loop_hafnian.py:20)], kws=(), vararg=None, target=None)
DEBUG 2022-02-08 17:11:33,748 on stmt: $158load_method.7 = getattr(value=kept_edges, attr=sum)
DEBUG 2022-02-08 17:11:33,748 find_def var='kept_edges' stmt=$158load_method.7 = getattr(value=kept_edges, attr=sum)
DEBUG 2022-02-08 17:11:33,748 on stmt: edge_sum = call $158load_method.7(func=$158load_method.7, args=[], kws=(), vararg=None, target=None)
DEBUG 2022-02-08 17:11:33,748 on stmt: binom_prod = const(float, 1.0)
DEBUG 2022-02-08 17:11:33,748 on stmt: $168load_global.10 = global(range: <class 'range'>)
DEBUG 2022-02-08 17:11:33,748 on stmt: $const172.12 = const(int, 2)
DEBUG 2022-02-08 17:11:33,748 on stmt: $174binary_floor_divide.13 = n // $const172.12
DEBUG 2022-02-08 17:11:33,748 on stmt: $176call_function.14 = call $168load_global.10($174binary_floor_divide.13, func=$168load_global.10, args=[Var($174binary_floor_divide.13, loop_hafnian.py:40)], kws=(), vararg=None, target=None)
DEBUG 2022-02-08 17:11:33,748 on stmt: $178get_iter.15 = getiter(value=$176call_function.14)
DEBUG 2022-02-08 17:11:33,748 on stmt: $phi180.1 = $178get_iter.15
DEBUG 2022-02-08 17:11:33,748 on stmt: jump 180
DEBUG 2022-02-08 17:11:33,755 ==== SSA block rewrite pass on 180
DEBUG 2022-02-08 17:11:33,755 Running <numba.core.ssa._FixSSAVars object at 0x000001E9F652B3D0>
DEBUG 2022-02-08 17:11:33,755 on stmt: binom_prod.2 = phi(incoming_values=[Var(binom_prod, loop_hafnian.py:39), Var(binom_prod.1, loop_hafnian.py:41)], incoming_blocks=[144, 182])
DEBUG 2022-02-08 17:11:33,755 on stmt: $180for_iter.2 = iternext(value=$phi180.1)
DEBUG 2022-02-08 17:11:33,755 on stmt: $180for_iter.3 = pair_first(value=$180for_iter.2)
DEBUG 2022-02-08 17:11:33,755 on stmt: $180for_iter.4 = pair_second(value=$180for_iter.2)
DEBUG 2022-02-08 17:11:33,755 on stmt: $phi182.2 = $180for_iter.3
DEBUG 2022-02-08 17:11:33,755 on stmt: branch $180for_iter.4, 182, 210
DEBUG 2022-02-08 17:11:33,755 ==== SSA block rewrite pass on 182
DEBUG 2022-02-08 17:11:33,755 Running <numba.core.ssa._FixSSAVars object at 0x000001E9F652B3D0>
DEBUG 2022-02-08 17:11:33,755 on stmt: i = $phi182.2
DEBUG 2022-02-08 17:11:33,755 on stmt: $192binary_subscr.7 = getitem(value=edge_reps, index=i, fn=<built-in function getitem>)
DEBUG 2022-02-08 17:11:33,755 on stmt: $198binary_subscr.10 = getitem(value=kept_edges, index=i, fn=<built-in function getitem>)
DEBUG 2022-02-08 17:11:33,755 find_def var='kept_edges' stmt=$198binary_subscr.10 = getitem(value=kept_edges, index=i, fn=<built-in function getitem>)
DEBUG 2022-02-08 17:11:33,755 find_def_from_top label 182
DEBUG 2022-02-08 17:11:33,755 idom 180 from label 182
DEBUG 2022-02-08 17:11:33,755 find_def_from_bottom label 180
DEBUG 2022-02-08 17:11:33,755 find_def_from_top label 180
DEBUG 2022-02-08 17:11:33,755 idom 144 from label 180
DEBUG 2022-02-08 17:11:33,755 find_def_from_bottom label 144
DEBUG 2022-02-08 17:11:33,755 on stmt: $200build_tuple.11 = build_tuple(items=[Var($192binary_subscr.7, loop_hafnian.py:41), Var($198binary_subscr.10, loop_hafnian.py:41)])
DEBUG 2022-02-08 17:11:33,755 on stmt: $202binary_subscr.12 = getitem(value=binoms, index=$200build_tuple.11, fn=<built-in function getitem>)
DEBUG 2022-02-08 17:11:33,755 on stmt: $204inplace_multiply.13 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=binom_prod.2, rhs=$202binary_subscr.12, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-08 17:11:33,755 on stmt: binom_prod.1 = $204inplace_multiply.13
DEBUG 2022-02-08 17:11:33,755 on stmt: jump 180
DEBUG 2022-02-08 17:11:33,755 ==== SSA block rewrite pass on 210
DEBUG 2022-02-08 17:11:33,755 Running <numba.core.ssa._FixSSAVars object at 0x000001E9F652B3D0>
DEBUG 2022-02-08 17:11:33,755 on stmt: bool212 = global(bool: <class 'bool'>)
DEBUG 2022-02-08 17:11:33,755 on stmt: $212pred = call bool212(glynn, func=bool212, args=(Var(glynn, loop_hafnian.py:20),), kws=(), vararg=None, target=None)
DEBUG 2022-02-08 17:11:33,755 on stmt: branch $212pred, 214, 226
DEBUG 2022-02-08 17:11:33,755 ==== SSA block rewrite pass on 214
DEBUG 2022-02-08 17:11:33,755 Running <numba.core.ssa._FixSSAVars object at 0x000001E9F652B3D0>
DEBUG 2022-02-08 17:11:33,755 on stmt: $const214.1 = const(int, 2)
DEBUG 2022-02-08 17:11:33,755 on stmt: $218binary_multiply.3 = $const214.1 * kept_edges
DEBUG 2022-02-08 17:11:33,755 find_def var='kept_edges' stmt=$218binary_multiply.3 = $const214.1 * kept_edges
DEBUG 2022-02-08 17:11:33,755 find_def_from_top label 214
DEBUG 2022-02-08 17:11:33,755 idom 210 from label 214
DEBUG 2022-02-08 17:11:33,755 find_def_from_bottom label 210
DEBUG 2022-02-08 17:11:33,755 find_def_from_top label 210
DEBUG 2022-02-08 17:11:33,755 idom 180 from label 210
DEBUG 2022-02-08 17:11:33,755 find_def_from_bottom label 180
DEBUG 2022-02-08 17:11:33,755 find_def_from_top label 180
DEBUG 2022-02-08 17:11:33,755 idom 144 from label 180
DEBUG 2022-02-08 17:11:33,755 find_def_from_bottom label 144
DEBUG 2022-02-08 17:11:33,755 on stmt: kept_edges.1 = $218binary_multiply.3 - edge_reps
DEBUG 2022-02-08 17:11:33,755 on stmt: jump 226
DEBUG 2022-02-08 17:11:33,755 ==== SSA block rewrite pass on 226
DEBUG 2022-02-08 17:11:33,755 Running <numba.core.ssa._FixSSAVars object at 0x000001E9F652B3D0>
DEBUG 2022-02-08 17:11:33,755 on stmt: $226load_global.1 = global(get_submatrices: CPUDispatcher(<function get_submatrices at 0x000001E9ECB30AF0>))
DEBUG 2022-02-08 17:11:33,755 on stmt: $236call_function.6 = call $226load_global.1(kept_edges, A, D, oddV, func=$226load_global.1, args=[Var(kept_edges, loop_hafnian.py:36), Var(A, loop_hafnian.py:20), Var(D, loop_hafnian.py:20), Var(oddV, loop_hafnian.py:20)], kws=(), vararg=None, target=None)
DEBUG 2022-02-08 17:11:33,755 find_def var='kept_edges' stmt=$236call_function.6 = call $226load_global.1(kept_edges, A, D, oddV, func=$226load_global.1, args=[Var(kept_edges, loop_hafnian.py:36), Var(A, loop_hafnian.py:20), Var(D, loop_hafnian.py:20), Var(oddV, loop_hafnian.py:20)], kws=(), vararg=None, target=None)
DEBUG 2022-02-08 17:11:33,755 find_def_from_top label 226
DEBUG 2022-02-08 17:11:33,755 insert phi node kept_edges.2 = phi(incoming_values=[], incoming_blocks=[]) at 226
DEBUG 2022-02-08 17:11:33,755 find_def_from_bottom label 210
DEBUG 2022-02-08 17:11:33,755 find_def_from_top label 210
DEBUG 2022-02-08 17:11:33,755 idom 180 from label 210
DEBUG 2022-02-08 17:11:33,755 find_def_from_bottom label 180
DEBUG 2022-02-08 17:11:33,755 find_def_from_top label 180
DEBUG 2022-02-08 17:11:33,755 idom 144 from label 180
DEBUG 2022-02-08 17:11:33,755 find_def_from_bottom label 144
DEBUG 2022-02-08 17:11:33,755 incoming_def kept_edges = call $146load_global.2(j, edge_reps, func=$146load_global.2, args=[Var(j, loop_hafnian.py:34), Var(edge_reps, loop_hafnian.py:20)], kws=(), vararg=None, target=None)
DEBUG 2022-02-08 17:11:33,755 find_def_from_bottom label 214
DEBUG 2022-02-08 17:11:33,755 incoming_def kept_edges.1 = $218binary_multiply.3 - edge_reps
DEBUG 2022-02-08 17:11:33,755 replaced with: $236call_function.6 = call $226load_global.1(kept_edges.2, A, D, oddV, func=$226load_global.1, args=[Var(kept_edges.2, loop_hafnian.py:46), Var(A, loop_hafnian.py:20), Var(D, loop_hafnian.py:20), Var(oddV, loop_hafnian.py:20)], kws=(), vararg=None, target=None)
DEBUG 2022-02-08 17:11:33,755 on stmt: $238unpack_sequence.11 = exhaust_iter(value=$236call_function.6, count=4)
DEBUG 2022-02-08 17:11:33,755 on stmt: $238unpack_sequence.7 = static_getitem(value=$238unpack_sequence.11, index=0, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-02-08 17:11:33,755 on stmt: $238unpack_sequence.8 = static_getitem(value=$238unpack_sequence.11, index=1, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-02-08 17:11:33,755 on stmt: $238unpack_sequence.9 = static_getitem(value=$238unpack_sequence.11, index=2, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-02-08 17:11:33,755 on stmt: $238unpack_sequence.10 = static_getitem(value=$238unpack_sequence.11, index=3, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-02-08 17:11:33,755 on stmt: AX_S = $238unpack_sequence.7
DEBUG 2022-02-08 17:11:33,755 on stmt: XD_S = $238unpack_sequence.8
DEBUG 2022-02-08 17:11:33,755 on stmt: D_S = $238unpack_sequence.9
DEBUG 2022-02-08 17:11:33,755 on stmt: oddVX_S = $238unpack_sequence.10
DEBUG 2022-02-08 17:11:33,755 on stmt: $248load_global.12 = global(eigvals: CPUDispatcher(<function eigvals at 0x000001E9ECB4E040>))
DEBUG 2022-02-08 17:11:33,755 on stmt: E = call $248load_global.12(AX_S, func=$248load_global.12, args=[Var(AX_S, loop_hafnian.py:46)], kws=(), vararg=None, target=None)
DEBUG 2022-02-08 17:11:33,755 on stmt: $const256.15 = const(float, -1.0)
DEBUG 2022-02-08 17:11:33,755 on stmt: $const260.17 = const(int, 2)
DEBUG 2022-02-08 17:11:33,755 on stmt: $262binary_floor_divide.18 = N // $const260.17
DEBUG 2022-02-08 17:11:33,755 on stmt: $266binary_subtract.20 = $262binary_floor_divide.18 - edge_sum
DEBUG 2022-02-08 17:11:33,755 on stmt: $268binary_power.21 = $const256.15 ** $266binary_subtract.20
DEBUG 2022-02-08 17:11:33,755 on stmt: prefac = $268binary_power.21 * binom_prod.2
DEBUG 2022-02-08 17:11:33,755 on stmt: $const278.25 = const(NoneType, None)
DEBUG 2022-02-08 17:11:33,755 on stmt: $280is_op.26 = const(int, 0)
DEBUG 2022-02-08 17:11:33,755 on stmt: bool282 = global(bool: <class 'bool'>)
DEBUG 2022-02-08 17:11:33,755 on stmt: $282pred = call bool282($280is_op.26, func=bool282, args=(Var($280is_op.26, loop_hafnian.py:52),), kws=(), vararg=None, target=None)
DEBUG 2022-02-08 17:11:33,755 on stmt: jump 320
DEBUG 2022-02-08 17:11:33,755 ==== SSA block rewrite pass on 320
DEBUG 2022-02-08 17:11:33,755 Running <numba.core.ssa._FixSSAVars object at 0x000001E9F652B3D0>
DEBUG 2022-02-08 17:11:33,755 on stmt: bool322 = global(bool: <class 'bool'>)
DEBUG 2022-02-08 17:11:33,755 on stmt: $322pred = call bool322(glynn, func=bool322, args=(Var(glynn, loop_hafnian.py:20),), kws=(), vararg=None, target=None)
DEBUG 2022-02-08 17:11:33,755 on stmt: branch $322pred, 326, 348
DEBUG 2022-02-08 17:11:33,755 ==== SSA block rewrite pass on 326
DEBUG 2022-02-08 17:11:33,755 Running <numba.core.ssa._FixSSAVars object at 0x000001E9F652B3D0>
DEBUG 2022-02-08 17:11:33,755 on stmt: $const328.2 = const(int, 0)
DEBUG 2022-02-08 17:11:33,755 on stmt: $330binary_subscr.3 = static_getitem(value=kept_edges, index=0, index_var=$const328.2, fn=<built-in function getitem>)
DEBUG 2022-02-08 17:11:33,755 find_def var='kept_edges' stmt=$330binary_subscr.3 = static_getitem(value=kept_edges, index=0, index_var=$const328.2, fn=<built-in function getitem>)
DEBUG 2022-02-08 17:11:33,755 find_def_from_top label 326
DEBUG 2022-02-08 17:11:33,755 idom 320 from label 326
DEBUG 2022-02-08 17:11:33,755 find_def_from_bottom label 320
DEBUG 2022-02-08 17:11:33,755 find_def_from_top label 320
DEBUG 2022-02-08 17:11:33,755 idom 226 from label 320
DEBUG 2022-02-08 17:11:33,755 find_def_from_bottom label 226
DEBUG 2022-02-08 17:11:33,755 replaced with: $330binary_subscr.3 = static_getitem(value=kept_edges.2, index=0, index_var=$const328.2, fn=<built-in function getitem>)
DEBUG 2022-02-08 17:11:33,755 on stmt: $const332.4 = const(int, 0)
DEBUG 2022-02-08 17:11:33,755 on stmt: $334compare_op.5 = $330binary_subscr.3 == $const332.4
DEBUG 2022-02-08 17:11:33,755 on stmt: bool336 = global(bool: <class 'bool'>)
DEBUG 2022-02-08 17:11:33,755 on stmt: $336pred = call bool336($334compare_op.5, func=bool336, args=(Var($334compare_op.5, loop_hafnian.py:55),), kws=(), vararg=None, target=None)
DEBUG 2022-02-08 17:11:33,755 on stmt: branch $336pred, 340, 348
DEBUG 2022-02-08 17:11:33,755 ==== SSA block rewrite pass on 340
DEBUG 2022-02-08 17:11:33,755 Running <numba.core.ssa._FixSSAVars object at 0x000001E9F652B3D0>
DEBUG 2022-02-08 17:11:33,755 on stmt: $const342.2 = const(float, 0.5)
DEBUG 2022-02-08 17:11:33,755 on stmt: $344inplace_multiply.3 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=prefac, rhs=$const342.2, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-08 17:11:33,755 on stmt: prefac.1 = $344inplace_multiply.3
DEBUG 2022-02-08 17:11:33,755 on stmt: jump 348
DEBUG 2022-02-08 17:11:33,755 ==== SSA block rewrite pass on 348
DEBUG 2022-02-08 17:11:33,755 Running <numba.core.ssa._FixSSAVars object at 0x000001E9F652B3D0>
DEBUG 2022-02-08 17:11:33,755 on stmt: prefac.2 = phi(incoming_values=[Var(prefac, loop_hafnian.py:50), Var(prefac.1, loop_hafnian.py:56), Var(prefac, loop_hafnian.py:50)], incoming_blocks=[320, 340, 326])
DEBUG 2022-02-08 17:11:33,755 on stmt: $352load_global.3 = global(f_loop: CPUDispatcher(<function f_loop at 0x000001E9ECB30790>))
DEBUG 2022-02-08 17:11:33,755 on stmt: $364call_function.9 = call $352load_global.3(E, AX_S, XD_S, D_S, N, func=$352load_global.3, args=[Var(E, loop_hafnian.py:48), Var(AX_S, loop_hafnian.py:46), Var(XD_S, loop_hafnian.py:46), Var(D_S, loop_hafnian.py:46), Var(N, loop_hafnian.py:21)], kws=(), vararg=None, target=None)
DEBUG 2022-02-08 17:11:33,755 on stmt: $const368.11 = const(int, 2)
DEBUG 2022-02-08 17:11:33,755 on stmt: $370binary_floor_divide.12 = N // $const368.11
DEBUG 2022-02-08 17:11:33,755 on stmt: $372binary_subscr.13 = getitem(value=$364call_function.9, index=$370binary_floor_divide.12, fn=<built-in function getitem>)
DEBUG 2022-02-08 17:11:33,755 on stmt: $374binary_multiply.14 = prefac.2 * $372binary_subscr.13
DEBUG 2022-02-08 17:11:33,755 on stmt: $376inplace_add.15 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=H, rhs=$374binary_multiply.14, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-08 17:11:33,755 on stmt: H = $376inplace_add.15
DEBUG 2022-02-08 17:11:33,755 on stmt: jump 437
DEBUG 2022-02-08 17:11:33,755 ==== SSA block rewrite pass on 382
DEBUG 2022-02-08 17:11:33,755 Running <numba.core.ssa._FixSSAVars object at 0x000001E9F652B3D0>
DEBUG 2022-02-08 17:11:33,755 on stmt: bool384 = global(bool: <class 'bool'>)
DEBUG 2022-02-08 17:11:33,755 on stmt: $384pred = call bool384(glynn, func=bool384, args=(Var(glynn, loop_hafnian.py:20),), kws=(), vararg=None, target=None)
DEBUG 2022-02-08 17:11:33,755 on stmt: branch $384pred, 388, 436
DEBUG 2022-02-08 17:11:33,755 ==== SSA block rewrite pass on 388
DEBUG 2022-02-08 17:11:33,755 Running <numba.core.ssa._FixSSAVars object at 0x000001E9F652B3D0>
DEBUG 2022-02-08 17:11:33,755 on stmt: $const390.1 = const(NoneType, None)
DEBUG 2022-02-08 17:11:33,755 on stmt: $392is_op.2 = const(int, 1)
DEBUG 2022-02-08 17:11:33,755 on stmt: bool394 = global(bool: <class 'bool'>)
DEBUG 2022-02-08 17:11:33,755 on stmt: $394pred = call bool394($392is_op.2, func=bool394, args=(Var($392is_op.2, loop_hafnian.py:60),), kws=(), vararg=None, target=None)
DEBUG 2022-02-08 17:11:33,755 on stmt: jump 398
DEBUG 2022-02-08 17:11:33,755 ==== SSA block rewrite pass on 398
DEBUG 2022-02-08 17:11:33,755 Running <numba.core.ssa._FixSSAVars object at 0x000001E9F652B3D0>
DEBUG 2022-02-08 17:11:33,755 on stmt: $const400.1 = const(float, 0.5)
DEBUG 2022-02-08 17:11:33,755 on stmt: $const404.3 = const(int, 2)
DEBUG 2022-02-08 17:11:33,755 on stmt: $406binary_floor_divide.4 = N // $const404.3
DEBUG 2022-02-08 17:11:33,755 on stmt: $const408.5 = const(int, 1)
DEBUG 2022-02-08 17:11:33,755 on stmt: $410binary_subtract.6 = $406binary_floor_divide.4 - $const408.5
DEBUG 2022-02-08 17:11:33,755 on stmt: $412binary_power.7 = $const400.1 ** $410binary_subtract.6
DEBUG 2022-02-08 17:11:33,755 on stmt: $414binary_multiply.8 = H * $412binary_power.7
DEBUG 2022-02-08 17:11:33,755 on stmt: H = $414binary_multiply.8
DEBUG 2022-02-08 17:11:33,755 on stmt: jump 436
DEBUG 2022-02-08 17:11:33,755 ==== SSA block rewrite pass on 436
DEBUG 2022-02-08 17:11:33,755 Running <numba.core.ssa._FixSSAVars object at 0x000001E9F652B3D0>
DEBUG 2022-02-08 17:11:33,755 on stmt: $438return_value.1 = cast(value=H)
DEBUG 2022-02-08 17:11:33,755 on stmt: return $438return_value.1
DEBUG 2022-02-08 17:11:33,755 ==== SSA block rewrite pass on 437
DEBUG 2022-02-08 17:11:33,755 Running <numba.core.ssa._FixSSAVars object at 0x000001E9F652B3D0>
DEBUG 2022-02-08 17:11:33,755 on stmt: jump 142
DEBUG 2022-02-08 17:11:33,755 Fix SSA violator on var H
DEBUG 2022-02-08 17:11:33,755 ==== SSA block rewrite pass on 0
DEBUG 2022-02-08 17:11:33,755 Running <numba.core.ssa._FreshVarHandler object at 0x000001E9F64F09D0>
DEBUG 2022-02-08 17:11:33,755 on stmt: A = arg(0, name=A)
DEBUG 2022-02-08 17:11:33,755 on stmt: D = arg(1, name=D)
DEBUG 2022-02-08 17:11:33,755 on stmt: edge_reps = arg(2, name=edge_reps)
DEBUG 2022-02-08 17:11:33,755 on stmt: oddloop = arg(3, name=oddloop)
DEBUG 2022-02-08 17:11:33,755 on stmt: oddV = arg(4, name=oddV)
DEBUG 2022-02-08 17:11:33,755 on stmt: rank = arg(5, name=rank)
DEBUG 2022-02-08 17:11:33,755 on stmt: size = arg(6, name=size)
DEBUG 2022-02-08 17:11:33,755 on stmt: glynn = arg(7, name=glynn)
DEBUG 2022-02-08 17:11:33,755 on stmt: $4load_attr.1 = getattr(value=A, attr=shape)
DEBUG 2022-02-08 17:11:33,771 on stmt: $const6.2 = const(int, 0)
DEBUG 2022-02-08 17:11:33,771 on stmt: n = static_getitem(value=$4load_attr.1, index=0, index_var=$const6.2, fn=<built-in function getitem>)
DEBUG 2022-02-08 17:11:33,771 on stmt: $const12.4 = const(int, 2)
DEBUG 2022-02-08 17:11:33,771 on stmt: $16load_method.6 = getattr(value=edge_reps, attr=sum)
DEBUG 2022-02-08 17:11:33,771 on stmt: $18call_method.7 = call $16load_method.6(func=$16load_method.6, args=[], kws=(), vararg=None, target=None)
DEBUG 2022-02-08 17:11:33,771 on stmt: N = $const12.4 * $18call_method.7
DEBUG 2022-02-08 17:11:33,771 on stmt: $const26.10 = const(NoneType, None)
DEBUG 2022-02-08 17:11:33,771 on stmt: $28is_op.11 = const(int, 0)
DEBUG 2022-02-08 17:11:33,771 on stmt: bool30 = global(bool: <class 'bool'>)
DEBUG 2022-02-08 17:11:33,771 on stmt: $30pred = call bool30($28is_op.11, func=bool30, args=(Var($28is_op.11, loop_hafnian.py:22),), kws=(), vararg=None, target=None)
DEBUG 2022-02-08 17:11:33,771 on stmt: jump 40
DEBUG 2022-02-08 17:11:33,771 ==== SSA block rewrite pass on 40
DEBUG 2022-02-08 17:11:33,771 Running <numba.core.ssa._FreshVarHandler object at 0x000001E9F64F09D0>
DEBUG 2022-02-08 17:11:33,771 on stmt: bool42 = global(bool: <class 'bool'>)
DEBUG 2022-02-08 17:11:33,771 on stmt: $42pred = call bool42(glynn, func=bool42, args=(Var(glynn, loop_hafnian.py:20),), kws=(), vararg=None, target=None)
DEBUG 2022-02-08 17:11:33,771 on stmt: branch $42pred, 44, 92
DEBUG 2022-02-08 17:11:33,771 ==== SSA block rewrite pass on 44
DEBUG 2022-02-08 17:11:33,771 Running <numba.core.ssa._FreshVarHandler object at 0x000001E9F64F09D0>
DEBUG 2022-02-08 17:11:33,771 on stmt: $const46.1 = const(NoneType, None)
DEBUG 2022-02-08 17:11:33,771 on stmt: $48is_op.2 = const(int, 1)
DEBUG 2022-02-08 17:11:33,771 on stmt: bool50 = global(bool: <class 'bool'>)
DEBUG 2022-02-08 17:11:33,771 on stmt: $50pred = call bool50($48is_op.2, func=bool50, args=(Var($48is_op.2, loop_hafnian.py:24),), kws=(), vararg=None, target=None)
DEBUG 2022-02-08 17:11:33,771 on stmt: jump 52
DEBUG 2022-02-08 17:11:33,771 ==== SSA block rewrite pass on 52
DEBUG 2022-02-08 17:11:33,771 Running <numba.core.ssa._FreshVarHandler object at 0x000001E9F64F09D0>
DEBUG 2022-02-08 17:11:33,771 on stmt: $const54.1 = const(int, 0)
DEBUG 2022-02-08 17:11:33,771 on stmt: $56binary_subscr.2 = static_getitem(value=edge_reps, index=0, index_var=$const54.1, fn=<built-in function getitem>)
DEBUG 2022-02-08 17:11:33,771 on stmt: $const58.3 = const(int, 2)
DEBUG 2022-02-08 17:11:33,771 on stmt: $60binary_add.4 = $56binary_subscr.2 + $const58.3
DEBUG 2022-02-08 17:11:33,771 on stmt: $const62.5 = const(int, 2)
DEBUG 2022-02-08 17:11:33,771 on stmt: $64binary_floor_divide.6 = $60binary_add.4 // $const62.5
DEBUG 2022-02-08 17:11:33,771 on stmt: $66load_global.7 = global(np: <module 'numpy' from 'C:\\Users\\zl4821\\Anaconda3\\envs\\GBS\\lib\\site-packages\\numpy\\__init__.py'>)
DEBUG 2022-02-08 17:11:33,771 on stmt: $68load_method.8 = getattr(value=$66load_global.7, attr=prod)
DEBUG 2022-02-08 17:11:33,771 on stmt: $const72.10 = const(int, 1)
DEBUG 2022-02-08 17:11:33,771 on stmt: $const74.11 = const(NoneType, None)
DEBUG 2022-02-08 17:11:33,771 on stmt: $76build_slice.12 = global(slice: <class 'slice'>)
DEBUG 2022-02-08 17:11:33,771 on stmt: $76build_slice.13 = call $76build_slice.12($const72.10, $const74.11, func=$76build_slice.12, args=(Var($const72.10, loop_hafnian.py:25), Var($const74.11, loop_hafnian.py:25)), kws=(), vararg=None, target=None)
DEBUG 2022-02-08 17:11:33,771 on stmt: $78binary_subscr.14 = static_getitem(value=edge_reps, index=slice(1, None, None), index_var=$76build_slice.13, fn=<built-in function getitem>)
DEBUG 2022-02-08 17:11:33,771 on stmt: $const80.15 = const(int, 1)
DEBUG 2022-02-08 17:11:33,771 on stmt: $82binary_add.16 = $78binary_subscr.14 + $const80.15
DEBUG 2022-02-08 17:11:33,771 on stmt: $84call_method.17 = call $68load_method.8($82binary_add.16, func=$68load_method.8, args=[Var($82binary_add.16, loop_hafnian.py:25)], kws=(), vararg=None, target=None)
DEBUG 2022-02-08 17:11:33,771 on stmt: steps = $64binary_floor_divide.6 * $84call_method.17
DEBUG 2022-02-08 17:11:33,771 on stmt: jump 106
DEBUG 2022-02-08 17:11:33,771 ==== SSA block rewrite pass on 92
DEBUG 2022-02-08 17:11:33,771 Running <numba.core.ssa._FreshVarHandler object at 0x000001E9F64F09D0>
DEBUG 2022-02-08 17:11:33,771 on stmt: $92load_global.0 = global(np: <module 'numpy' from 'C:\\Users\\zl4821\\Anaconda3\\envs\\GBS\\lib\\site-packages\\numpy\\__init__.py'>)
DEBUG 2022-02-08 17:11:33,771 on stmt: $94load_method.1 = getattr(value=$92load_global.0, attr=prod)
DEBUG 2022-02-08 17:11:33,771 on stmt: $const98.3 = const(int, 1)
DEBUG 2022-02-08 17:11:33,771 on stmt: $100binary_add.4 = edge_reps + $const98.3
DEBUG 2022-02-08 17:11:33,771 on stmt: steps.1 = call $94load_method.1($100binary_add.4, func=$94load_method.1, args=[Var($100binary_add.4, loop_hafnian.py:27)], kws=(), vararg=None, target=None)
DEBUG 2022-02-08 17:11:33,771 on stmt: jump 106
DEBUG 2022-02-08 17:11:33,771 ==== SSA block rewrite pass on 106
DEBUG 2022-02-08 17:11:33,771 Running <numba.core.ssa._FreshVarHandler object at 0x000001E9F64F09D0>
DEBUG 2022-02-08 17:11:33,771 on stmt: steps.2 = phi(incoming_values=[Var(steps, loop_hafnian.py:25), Var(steps.1, loop_hafnian.py:27)], incoming_blocks=[52, 92])
DEBUG 2022-02-08 17:11:33,771 on stmt: $108load_method.1 = getattr(value=edge_reps, attr=max)
DEBUG 2022-02-08 17:11:33,771 on stmt: $110call_method.2 = call $108load_method.1(func=$108load_method.1, args=[], kws=(), vararg=None, target=None)
DEBUG 2022-02-08 17:11:33,771 on stmt: $const112.3 = const(int, 1)
DEBUG 2022-02-08 17:11:33,771 on stmt: max_binom = $110call_method.2 + $const112.3
DEBUG 2022-02-08 17:11:33,771 on stmt: $118load_global.5 = global(precompute_binoms: CPUDispatcher(<function precompute_binoms at 0x000001E9ECB30160>))
DEBUG 2022-02-08 17:11:33,771 on stmt: binoms = call $118load_global.5(max_binom, func=$118load_global.5, args=[Var(max_binom, loop_hafnian.py:29)], kws=(), vararg=None, target=None)
DEBUG 2022-02-08 17:11:33,771 on stmt: H = const(int, 0)
DEBUG 2022-02-08 17:11:33,771 first assign: H
DEBUG 2022-02-08 17:11:33,771 replaced with: H = const(int, 0)
DEBUG 2022-02-08 17:11:33,771 on stmt: $130load_global.9 = global(range: <class 'range'>)
DEBUG 2022-02-08 17:11:33,771 on stmt: $138call_function.13 = call $130load_global.9(rank, steps.2, size, func=$130load_global.9, args=[Var(rank, loop_hafnian.py:20), Var(steps.2, loop_hafnian.py:29), Var(size, loop_hafnian.py:20)], kws=(), vararg=None, target=None)
DEBUG 2022-02-08 17:11:33,771 on stmt: $140get_iter.14 = getiter(value=$138call_function.13)
DEBUG 2022-02-08 17:11:33,771 on stmt: $phi142.0 = $140get_iter.14
DEBUG 2022-02-08 17:11:33,771 on stmt: jump 142
DEBUG 2022-02-08 17:11:33,771 ==== SSA block rewrite pass on 142
DEBUG 2022-02-08 17:11:33,771 Running <numba.core.ssa._FreshVarHandler object at 0x000001E9F64F09D0>
DEBUG 2022-02-08 17:11:33,771 on stmt: $142for_iter.1 = iternext(value=$phi142.0)
DEBUG 2022-02-08 17:11:33,771 on stmt: $142for_iter.2 = pair_first(value=$142for_iter.1)
DEBUG 2022-02-08 17:11:33,771 on stmt: $142for_iter.3 = pair_second(value=$142for_iter.1)
DEBUG 2022-02-08 17:11:33,771 on stmt: $phi144.1 = $142for_iter.2
DEBUG 2022-02-08 17:11:33,771 on stmt: branch $142for_iter.3, 144, 382
DEBUG 2022-02-08 17:11:33,771 ==== SSA block rewrite pass on 144
DEBUG 2022-02-08 17:11:33,771 Running <numba.core.ssa._FreshVarHandler object at 0x000001E9F64F09D0>
DEBUG 2022-02-08 17:11:33,771 on stmt: j = $phi144.1
DEBUG 2022-02-08 17:11:33,771 on stmt: $146load_global.2 = global(find_kept_edges: CPUDispatcher(<function find_kept_edges at 0x000001E9ECB305E0>))
DEBUG 2022-02-08 17:11:33,771 on stmt: kept_edges = call $146load_global.2(j, edge_reps, func=$146load_global.2, args=[Var(j, loop_hafnian.py:34), Var(edge_reps, loop_hafnian.py:20)], kws=(), vararg=None, target=None)
DEBUG 2022-02-08 17:11:33,771 on stmt: $158load_method.7 = getattr(value=kept_edges, attr=sum)
DEBUG 2022-02-08 17:11:33,771 on stmt: edge_sum = call $158load_method.7(func=$158load_method.7, args=[], kws=(), vararg=None, target=None)
DEBUG 2022-02-08 17:11:33,771 on stmt: binom_prod = const(float, 1.0)
DEBUG 2022-02-08 17:11:33,771 on stmt: $168load_global.10 = global(range: <class 'range'>)
DEBUG 2022-02-08 17:11:33,771 on stmt: $const172.12 = const(int, 2)
DEBUG 2022-02-08 17:11:33,771 on stmt: $174binary_floor_divide.13 = n // $const172.12
DEBUG 2022-02-08 17:11:33,771 on stmt: $176call_function.14 = call $168load_global.10($174binary_floor_divide.13, func=$168load_global.10, args=[Var($174binary_floor_divide.13, loop_hafnian.py:40)], kws=(), vararg=None, target=None)
DEBUG 2022-02-08 17:11:33,771 on stmt: $178get_iter.15 = getiter(value=$176call_function.14)
DEBUG 2022-02-08 17:11:33,771 on stmt: $phi180.1 = $178get_iter.15
DEBUG 2022-02-08 17:11:33,771 on stmt: jump 180
DEBUG 2022-02-08 17:11:33,771 ==== SSA block rewrite pass on 180
DEBUG 2022-02-08 17:11:33,771 Running <numba.core.ssa._FreshVarHandler object at 0x000001E9F64F09D0>
DEBUG 2022-02-08 17:11:33,771 on stmt: binom_prod.2 = phi(incoming_values=[Var(binom_prod, loop_hafnian.py:39), Var(binom_prod.1, loop_hafnian.py:41)], incoming_blocks=[144, 182])
DEBUG 2022-02-08 17:11:33,771 on stmt: $180for_iter.2 = iternext(value=$phi180.1)
DEBUG 2022-02-08 17:11:33,771 on stmt: $180for_iter.3 = pair_first(value=$180for_iter.2)
DEBUG 2022-02-08 17:11:33,771 on stmt: $180for_iter.4 = pair_second(value=$180for_iter.2)
DEBUG 2022-02-08 17:11:33,771 on stmt: $phi182.2 = $180for_iter.3
DEBUG 2022-02-08 17:11:33,771 on stmt: branch $180for_iter.4, 182, 210
DEBUG 2022-02-08 17:11:33,771 ==== SSA block rewrite pass on 182
DEBUG 2022-02-08 17:11:33,771 Running <numba.core.ssa._FreshVarHandler object at 0x000001E9F64F09D0>
DEBUG 2022-02-08 17:11:33,771 on stmt: i = $phi182.2
DEBUG 2022-02-08 17:11:33,771 on stmt: $192binary_subscr.7 = getitem(value=edge_reps, index=i, fn=<built-in function getitem>)
DEBUG 2022-02-08 17:11:33,771 on stmt: $198binary_subscr.10 = getitem(value=kept_edges, index=i, fn=<built-in function getitem>)
DEBUG 2022-02-08 17:11:33,771 on stmt: $200build_tuple.11 = build_tuple(items=[Var($192binary_subscr.7, loop_hafnian.py:41), Var($198binary_subscr.10, loop_hafnian.py:41)])
DEBUG 2022-02-08 17:11:33,771 on stmt: $202binary_subscr.12 = getitem(value=binoms, index=$200build_tuple.11, fn=<built-in function getitem>)
DEBUG 2022-02-08 17:11:33,771 on stmt: $204inplace_multiply.13 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=binom_prod.2, rhs=$202binary_subscr.12, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-08 17:11:33,771 on stmt: binom_prod.1 = $204inplace_multiply.13
DEBUG 2022-02-08 17:11:33,771 on stmt: jump 180
DEBUG 2022-02-08 17:11:33,771 ==== SSA block rewrite pass on 210
DEBUG 2022-02-08 17:11:33,771 Running <numba.core.ssa._FreshVarHandler object at 0x000001E9F64F09D0>
DEBUG 2022-02-08 17:11:33,771 on stmt: bool212 = global(bool: <class 'bool'>)
DEBUG 2022-02-08 17:11:33,771 on stmt: $212pred = call bool212(glynn, func=bool212, args=(Var(glynn, loop_hafnian.py:20),), kws=(), vararg=None, target=None)
DEBUG 2022-02-08 17:11:33,771 on stmt: branch $212pred, 214, 226
DEBUG 2022-02-08 17:11:33,771 ==== SSA block rewrite pass on 214
DEBUG 2022-02-08 17:11:33,771 Running <numba.core.ssa._FreshVarHandler object at 0x000001E9F64F09D0>
DEBUG 2022-02-08 17:11:33,771 on stmt: $const214.1 = const(int, 2)
DEBUG 2022-02-08 17:11:33,771 on stmt: $218binary_multiply.3 = $const214.1 * kept_edges
DEBUG 2022-02-08 17:11:33,771 on stmt: kept_edges.1 = $218binary_multiply.3 - edge_reps
DEBUG 2022-02-08 17:11:33,771 on stmt: jump 226
DEBUG 2022-02-08 17:11:33,771 ==== SSA block rewrite pass on 226
DEBUG 2022-02-08 17:11:33,771 Running <numba.core.ssa._FreshVarHandler object at 0x000001E9F64F09D0>
DEBUG 2022-02-08 17:11:33,771 on stmt: kept_edges.2 = phi(incoming_values=[Var(kept_edges, loop_hafnian.py:36), Var(kept_edges.1, loop_hafnian.py:44)], incoming_blocks=[210, 214])
DEBUG 2022-02-08 17:11:33,771 on stmt: $226load_global.1 = global(get_submatrices: CPUDispatcher(<function get_submatrices at 0x000001E9ECB30AF0>))
DEBUG 2022-02-08 17:11:33,771 on stmt: $236call_function.6 = call $226load_global.1(kept_edges.2, A, D, oddV, func=$226load_global.1, args=[Var(kept_edges.2, loop_hafnian.py:46), Var(A, loop_hafnian.py:20), Var(D, loop_hafnian.py:20), Var(oddV, loop_hafnian.py:20)], kws=(), vararg=None, target=None)
DEBUG 2022-02-08 17:11:33,771 on stmt: $238unpack_sequence.11 = exhaust_iter(value=$236call_function.6, count=4)
DEBUG 2022-02-08 17:11:33,771 on stmt: $238unpack_sequence.7 = static_getitem(value=$238unpack_sequence.11, index=0, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-02-08 17:11:33,771 on stmt: $238unpack_sequence.8 = static_getitem(value=$238unpack_sequence.11, index=1, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-02-08 17:11:33,771 on stmt: $238unpack_sequence.9 = static_getitem(value=$238unpack_sequence.11, index=2, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-02-08 17:11:33,771 on stmt: $238unpack_sequence.10 = static_getitem(value=$238unpack_sequence.11, index=3, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-02-08 17:11:33,771 on stmt: AX_S = $238unpack_sequence.7
DEBUG 2022-02-08 17:11:33,771 on stmt: XD_S = $238unpack_sequence.8
DEBUG 2022-02-08 17:11:33,771 on stmt: D_S = $238unpack_sequence.9
DEBUG 2022-02-08 17:11:33,771 on stmt: oddVX_S = $238unpack_sequence.10
DEBUG 2022-02-08 17:11:33,771 on stmt: $248load_global.12 = global(eigvals: CPUDispatcher(<function eigvals at 0x000001E9ECB4E040>))
DEBUG 2022-02-08 17:11:33,771 on stmt: E = call $248load_global.12(AX_S, func=$248load_global.12, args=[Var(AX_S, loop_hafnian.py:46)], kws=(), vararg=None, target=None)
DEBUG 2022-02-08 17:11:33,771 on stmt: $const256.15 = const(float, -1.0)
DEBUG 2022-02-08 17:11:33,771 on stmt: $const260.17 = const(int, 2)
DEBUG 2022-02-08 17:11:33,771 on stmt: $262binary_floor_divide.18 = N // $const260.17
DEBUG 2022-02-08 17:11:33,771 on stmt: $266binary_subtract.20 = $262binary_floor_divide.18 - edge_sum
DEBUG 2022-02-08 17:11:33,771 on stmt: $268binary_power.21 = $const256.15 ** $266binary_subtract.20
DEBUG 2022-02-08 17:11:33,771 on stmt: prefac = $268binary_power.21 * binom_prod.2
DEBUG 2022-02-08 17:11:33,771 on stmt: $const278.25 = const(NoneType, None)
DEBUG 2022-02-08 17:11:33,771 on stmt: $280is_op.26 = const(int, 0)
DEBUG 2022-02-08 17:11:33,771 on stmt: bool282 = global(bool: <class 'bool'>)
DEBUG 2022-02-08 17:11:33,771 on stmt: $282pred = call bool282($280is_op.26, func=bool282, args=(Var($280is_op.26, loop_hafnian.py:52),), kws=(), vararg=None, target=None)
DEBUG 2022-02-08 17:11:33,771 on stmt: jump 320
DEBUG 2022-02-08 17:11:33,771 ==== SSA block rewrite pass on 320
DEBUG 2022-02-08 17:11:33,771 Running <numba.core.ssa._FreshVarHandler object at 0x000001E9F64F09D0>
DEBUG 2022-02-08 17:11:33,771 on stmt: bool322 = global(bool: <class 'bool'>)
DEBUG 2022-02-08 17:11:33,771 on stmt: $322pred = call bool322(glynn, func=bool322, args=(Var(glynn, loop_hafnian.py:20),), kws=(), vararg=None, target=None)
DEBUG 2022-02-08 17:11:33,771 on stmt: branch $322pred, 326, 348
DEBUG 2022-02-08 17:11:33,771 ==== SSA block rewrite pass on 326
DEBUG 2022-02-08 17:11:33,771 Running <numba.core.ssa._FreshVarHandler object at 0x000001E9F64F09D0>
DEBUG 2022-02-08 17:11:33,771 on stmt: $const328.2 = const(int, 0)
DEBUG 2022-02-08 17:11:33,771 on stmt: $330binary_subscr.3 = static_getitem(value=kept_edges.2, index=0, index_var=$const328.2, fn=<built-in function getitem>)
DEBUG 2022-02-08 17:11:33,771 on stmt: $const332.4 = const(int, 0)
DEBUG 2022-02-08 17:11:33,771 on stmt: $334compare_op.5 = $330binary_subscr.3 == $const332.4
DEBUG 2022-02-08 17:11:33,771 on stmt: bool336 = global(bool: <class 'bool'>)
DEBUG 2022-02-08 17:11:33,771 on stmt: $336pred = call bool336($334compare_op.5, func=bool336, args=(Var($334compare_op.5, loop_hafnian.py:55),), kws=(), vararg=None, target=None)
DEBUG 2022-02-08 17:11:33,786 on stmt: branch $336pred, 340, 348
DEBUG 2022-02-08 17:11:33,786 ==== SSA block rewrite pass on 340
DEBUG 2022-02-08 17:11:33,786 Running <numba.core.ssa._FreshVarHandler object at 0x000001E9F64F09D0>
DEBUG 2022-02-08 17:11:33,786 on stmt: $const342.2 = const(float, 0.5)
DEBUG 2022-02-08 17:11:33,786 on stmt: $344inplace_multiply.3 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=prefac, rhs=$const342.2, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-08 17:11:33,786 on stmt: prefac.1 = $344inplace_multiply.3
DEBUG 2022-02-08 17:11:33,786 on stmt: jump 348
DEBUG 2022-02-08 17:11:33,786 ==== SSA block rewrite pass on 348
DEBUG 2022-02-08 17:11:33,786 Running <numba.core.ssa._FreshVarHandler object at 0x000001E9F64F09D0>
DEBUG 2022-02-08 17:11:33,786 on stmt: prefac.2 = phi(incoming_values=[Var(prefac, loop_hafnian.py:50), Var(prefac.1, loop_hafnian.py:56), Var(prefac, loop_hafnian.py:50)], incoming_blocks=[320, 340, 326])
DEBUG 2022-02-08 17:11:33,786 on stmt: $352load_global.3 = global(f_loop: CPUDispatcher(<function f_loop at 0x000001E9ECB30790>))
DEBUG 2022-02-08 17:11:33,786 on stmt: $364call_function.9 = call $352load_global.3(E, AX_S, XD_S, D_S, N, func=$352load_global.3, args=[Var(E, loop_hafnian.py:48), Var(AX_S, loop_hafnian.py:46), Var(XD_S, loop_hafnian.py:46), Var(D_S, loop_hafnian.py:46), Var(N, loop_hafnian.py:21)], kws=(), vararg=None, target=None)
DEBUG 2022-02-08 17:11:33,786 on stmt: $const368.11 = const(int, 2)
DEBUG 2022-02-08 17:11:33,786 on stmt: $370binary_floor_divide.12 = N // $const368.11
DEBUG 2022-02-08 17:11:33,786 on stmt: $372binary_subscr.13 = getitem(value=$364call_function.9, index=$370binary_floor_divide.12, fn=<built-in function getitem>)
DEBUG 2022-02-08 17:11:33,786 on stmt: $374binary_multiply.14 = prefac.2 * $372binary_subscr.13
DEBUG 2022-02-08 17:11:33,786 on stmt: $376inplace_add.15 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=H, rhs=$374binary_multiply.14, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-08 17:11:33,786 on stmt: H = $376inplace_add.15
DEBUG 2022-02-08 17:11:33,786 replaced with: H.1 = $376inplace_add.15
DEBUG 2022-02-08 17:11:33,786 on stmt: jump 437
DEBUG 2022-02-08 17:11:33,786 ==== SSA block rewrite pass on 382
DEBUG 2022-02-08 17:11:33,786 Running <numba.core.ssa._FreshVarHandler object at 0x000001E9F64F09D0>
DEBUG 2022-02-08 17:11:33,786 on stmt: bool384 = global(bool: <class 'bool'>)
DEBUG 2022-02-08 17:11:33,786 on stmt: $384pred = call bool384(glynn, func=bool384, args=(Var(glynn, loop_hafnian.py:20),), kws=(), vararg=None, target=None)
DEBUG 2022-02-08 17:11:33,786 on stmt: branch $384pred, 388, 436
DEBUG 2022-02-08 17:11:33,786 ==== SSA block rewrite pass on 388
DEBUG 2022-02-08 17:11:33,786 Running <numba.core.ssa._FreshVarHandler object at 0x000001E9F64F09D0>
DEBUG 2022-02-08 17:11:33,786 on stmt: $const390.1 = const(NoneType, None)
DEBUG 2022-02-08 17:11:33,786 on stmt: $392is_op.2 = const(int, 1)
DEBUG 2022-02-08 17:11:33,786 on stmt: bool394 = global(bool: <class 'bool'>)
DEBUG 2022-02-08 17:11:33,786 on stmt: $394pred = call bool394($392is_op.2, func=bool394, args=(Var($392is_op.2, loop_hafnian.py:60),), kws=(), vararg=None, target=None)
DEBUG 2022-02-08 17:11:33,786 on stmt: jump 398
DEBUG 2022-02-08 17:11:33,786 ==== SSA block rewrite pass on 398
DEBUG 2022-02-08 17:11:33,786 Running <numba.core.ssa._FreshVarHandler object at 0x000001E9F64F09D0>
DEBUG 2022-02-08 17:11:33,786 on stmt: $const400.1 = const(float, 0.5)
DEBUG 2022-02-08 17:11:33,786 on stmt: $const404.3 = const(int, 2)
DEBUG 2022-02-08 17:11:33,786 on stmt: $406binary_floor_divide.4 = N // $const404.3
DEBUG 2022-02-08 17:11:33,786 on stmt: $const408.5 = const(int, 1)
DEBUG 2022-02-08 17:11:33,786 on stmt: $410binary_subtract.6 = $406binary_floor_divide.4 - $const408.5
DEBUG 2022-02-08 17:11:33,786 on stmt: $412binary_power.7 = $const400.1 ** $410binary_subtract.6
DEBUG 2022-02-08 17:11:33,786 on stmt: $414binary_multiply.8 = H * $412binary_power.7
DEBUG 2022-02-08 17:11:33,786 on stmt: H = $414binary_multiply.8
DEBUG 2022-02-08 17:11:33,786 replaced with: H.2 = $414binary_multiply.8
DEBUG 2022-02-08 17:11:33,786 on stmt: jump 436
DEBUG 2022-02-08 17:11:33,786 ==== SSA block rewrite pass on 436
DEBUG 2022-02-08 17:11:33,786 Running <numba.core.ssa._FreshVarHandler object at 0x000001E9F64F09D0>
DEBUG 2022-02-08 17:11:33,786 on stmt: $438return_value.1 = cast(value=H)
DEBUG 2022-02-08 17:11:33,786 on stmt: return $438return_value.1
DEBUG 2022-02-08 17:11:33,786 ==== SSA block rewrite pass on 437
DEBUG 2022-02-08 17:11:33,786 Running <numba.core.ssa._FreshVarHandler object at 0x000001E9F64F09D0>
DEBUG 2022-02-08 17:11:33,786 on stmt: jump 142
DEBUG 2022-02-08 17:11:33,786 Replaced assignments: defaultdict(<class 'list'>,
            {106: [<numba.core.ir.Assign object at 0x000001E9F64F0490>],
             348: [<numba.core.ir.Assign object at 0x000001E9F6534370>],
             398: [<numba.core.ir.Assign object at 0x000001E9F65347C0>]})
DEBUG 2022-02-08 17:11:33,786 ==== SSA block rewrite pass on 0
DEBUG 2022-02-08 17:11:33,786 Running <numba.core.ssa._FixSSAVars object at 0x000001E9F644CEE0>
DEBUG 2022-02-08 17:11:33,786 on stmt: A = arg(0, name=A)
DEBUG 2022-02-08 17:11:33,786 on stmt: D = arg(1, name=D)
DEBUG 2022-02-08 17:11:33,786 on stmt: edge_reps = arg(2, name=edge_reps)
DEBUG 2022-02-08 17:11:33,786 on stmt: oddloop = arg(3, name=oddloop)
DEBUG 2022-02-08 17:11:33,786 on stmt: oddV = arg(4, name=oddV)
DEBUG 2022-02-08 17:11:33,786 on stmt: rank = arg(5, name=rank)
DEBUG 2022-02-08 17:11:33,786 on stmt: size = arg(6, name=size)
DEBUG 2022-02-08 17:11:33,786 on stmt: glynn = arg(7, name=glynn)
DEBUG 2022-02-08 17:11:33,786 on stmt: $4load_attr.1 = getattr(value=A, attr=shape)
DEBUG 2022-02-08 17:11:33,786 on stmt: $const6.2 = const(int, 0)
DEBUG 2022-02-08 17:11:33,786 on stmt: n = static_getitem(value=$4load_attr.1, index=0, index_var=$const6.2, fn=<built-in function getitem>)
DEBUG 2022-02-08 17:11:33,786 on stmt: $const12.4 = const(int, 2)
DEBUG 2022-02-08 17:11:33,786 on stmt: $16load_method.6 = getattr(value=edge_reps, attr=sum)
DEBUG 2022-02-08 17:11:33,786 on stmt: $18call_method.7 = call $16load_method.6(func=$16load_method.6, args=[], kws=(), vararg=None, target=None)
DEBUG 2022-02-08 17:11:33,786 on stmt: N = $const12.4 * $18call_method.7
DEBUG 2022-02-08 17:11:33,786 on stmt: $const26.10 = const(NoneType, None)
DEBUG 2022-02-08 17:11:33,786 on stmt: $28is_op.11 = const(int, 0)
DEBUG 2022-02-08 17:11:33,786 on stmt: bool30 = global(bool: <class 'bool'>)
DEBUG 2022-02-08 17:11:33,786 on stmt: $30pred = call bool30($28is_op.11, func=bool30, args=(Var($28is_op.11, loop_hafnian.py:22),), kws=(), vararg=None, target=None)
DEBUG 2022-02-08 17:11:33,786 on stmt: jump 40
DEBUG 2022-02-08 17:11:33,786 ==== SSA block rewrite pass on 40
DEBUG 2022-02-08 17:11:33,786 Running <numba.core.ssa._FixSSAVars object at 0x000001E9F644CEE0>
DEBUG 2022-02-08 17:11:33,786 on stmt: bool42 = global(bool: <class 'bool'>)
DEBUG 2022-02-08 17:11:33,786 on stmt: $42pred = call bool42(glynn, func=bool42, args=(Var(glynn, loop_hafnian.py:20),), kws=(), vararg=None, target=None)
DEBUG 2022-02-08 17:11:33,786 on stmt: branch $42pred, 44, 92
DEBUG 2022-02-08 17:11:33,786 ==== SSA block rewrite pass on 44
DEBUG 2022-02-08 17:11:33,786 Running <numba.core.ssa._FixSSAVars object at 0x000001E9F644CEE0>
DEBUG 2022-02-08 17:11:33,786 on stmt: $const46.1 = const(NoneType, None)
DEBUG 2022-02-08 17:11:33,786 on stmt: $48is_op.2 = const(int, 1)
DEBUG 2022-02-08 17:11:33,786 on stmt: bool50 = global(bool: <class 'bool'>)
DEBUG 2022-02-08 17:11:33,786 on stmt: $50pred = call bool50($48is_op.2, func=bool50, args=(Var($48is_op.2, loop_hafnian.py:24),), kws=(), vararg=None, target=None)
DEBUG 2022-02-08 17:11:33,786 on stmt: jump 52
DEBUG 2022-02-08 17:11:33,786 ==== SSA block rewrite pass on 52
DEBUG 2022-02-08 17:11:33,786 Running <numba.core.ssa._FixSSAVars object at 0x000001E9F644CEE0>
DEBUG 2022-02-08 17:11:33,786 on stmt: $const54.1 = const(int, 0)
DEBUG 2022-02-08 17:11:33,786 on stmt: $56binary_subscr.2 = static_getitem(value=edge_reps, index=0, index_var=$const54.1, fn=<built-in function getitem>)
DEBUG 2022-02-08 17:11:33,786 on stmt: $const58.3 = const(int, 2)
DEBUG 2022-02-08 17:11:33,786 on stmt: $60binary_add.4 = $56binary_subscr.2 + $const58.3
DEBUG 2022-02-08 17:11:33,786 on stmt: $const62.5 = const(int, 2)
DEBUG 2022-02-08 17:11:33,786 on stmt: $64binary_floor_divide.6 = $60binary_add.4 // $const62.5
DEBUG 2022-02-08 17:11:33,786 on stmt: $66load_global.7 = global(np: <module 'numpy' from 'C:\\Users\\zl4821\\Anaconda3\\envs\\GBS\\lib\\site-packages\\numpy\\__init__.py'>)
DEBUG 2022-02-08 17:11:33,786 on stmt: $68load_method.8 = getattr(value=$66load_global.7, attr=prod)
DEBUG 2022-02-08 17:11:33,786 on stmt: $const72.10 = const(int, 1)
DEBUG 2022-02-08 17:11:33,786 on stmt: $const74.11 = const(NoneType, None)
DEBUG 2022-02-08 17:11:33,786 on stmt: $76build_slice.12 = global(slice: <class 'slice'>)
DEBUG 2022-02-08 17:11:33,786 on stmt: $76build_slice.13 = call $76build_slice.12($const72.10, $const74.11, func=$76build_slice.12, args=(Var($const72.10, loop_hafnian.py:25), Var($const74.11, loop_hafnian.py:25)), kws=(), vararg=None, target=None)
DEBUG 2022-02-08 17:11:33,786 on stmt: $78binary_subscr.14 = static_getitem(value=edge_reps, index=slice(1, None, None), index_var=$76build_slice.13, fn=<built-in function getitem>)
DEBUG 2022-02-08 17:11:33,786 on stmt: $const80.15 = const(int, 1)
DEBUG 2022-02-08 17:11:33,786 on stmt: $82binary_add.16 = $78binary_subscr.14 + $const80.15
DEBUG 2022-02-08 17:11:33,786 on stmt: $84call_method.17 = call $68load_method.8($82binary_add.16, func=$68load_method.8, args=[Var($82binary_add.16, loop_hafnian.py:25)], kws=(), vararg=None, target=None)
DEBUG 2022-02-08 17:11:33,786 on stmt: steps = $64binary_floor_divide.6 * $84call_method.17
DEBUG 2022-02-08 17:11:33,786 on stmt: jump 106
DEBUG 2022-02-08 17:11:33,786 ==== SSA block rewrite pass on 92
DEBUG 2022-02-08 17:11:33,786 Running <numba.core.ssa._FixSSAVars object at 0x000001E9F644CEE0>
DEBUG 2022-02-08 17:11:33,786 on stmt: $92load_global.0 = global(np: <module 'numpy' from 'C:\\Users\\zl4821\\Anaconda3\\envs\\GBS\\lib\\site-packages\\numpy\\__init__.py'>)
DEBUG 2022-02-08 17:11:33,786 on stmt: $94load_method.1 = getattr(value=$92load_global.0, attr=prod)
DEBUG 2022-02-08 17:11:33,786 on stmt: $const98.3 = const(int, 1)
DEBUG 2022-02-08 17:11:33,786 on stmt: $100binary_add.4 = edge_reps + $const98.3
DEBUG 2022-02-08 17:11:33,786 on stmt: steps.1 = call $94load_method.1($100binary_add.4, func=$94load_method.1, args=[Var($100binary_add.4, loop_hafnian.py:27)], kws=(), vararg=None, target=None)
DEBUG 2022-02-08 17:11:33,786 on stmt: jump 106
DEBUG 2022-02-08 17:11:33,786 ==== SSA block rewrite pass on 106
DEBUG 2022-02-08 17:11:33,786 Running <numba.core.ssa._FixSSAVars object at 0x000001E9F644CEE0>
DEBUG 2022-02-08 17:11:33,786 on stmt: steps.2 = phi(incoming_values=[Var(steps, loop_hafnian.py:25), Var(steps.1, loop_hafnian.py:27)], incoming_blocks=[52, 92])
DEBUG 2022-02-08 17:11:33,786 on stmt: $108load_method.1 = getattr(value=edge_reps, attr=max)
DEBUG 2022-02-08 17:11:33,786 on stmt: $110call_method.2 = call $108load_method.1(func=$108load_method.1, args=[], kws=(), vararg=None, target=None)
DEBUG 2022-02-08 17:11:33,786 on stmt: $const112.3 = const(int, 1)
DEBUG 2022-02-08 17:11:33,786 on stmt: max_binom = $110call_method.2 + $const112.3
DEBUG 2022-02-08 17:11:33,786 on stmt: $118load_global.5 = global(precompute_binoms: CPUDispatcher(<function precompute_binoms at 0x000001E9ECB30160>))
DEBUG 2022-02-08 17:11:33,786 on stmt: binoms = call $118load_global.5(max_binom, func=$118load_global.5, args=[Var(max_binom, loop_hafnian.py:29)], kws=(), vararg=None, target=None)
DEBUG 2022-02-08 17:11:33,786 on stmt: H = const(int, 0)
DEBUG 2022-02-08 17:11:33,786 on stmt: $130load_global.9 = global(range: <class 'range'>)
DEBUG 2022-02-08 17:11:33,786 on stmt: $138call_function.13 = call $130load_global.9(rank, steps.2, size, func=$130load_global.9, args=[Var(rank, loop_hafnian.py:20), Var(steps.2, loop_hafnian.py:29), Var(size, loop_hafnian.py:20)], kws=(), vararg=None, target=None)
DEBUG 2022-02-08 17:11:33,786 on stmt: $140get_iter.14 = getiter(value=$138call_function.13)
DEBUG 2022-02-08 17:11:33,786 on stmt: $phi142.0 = $140get_iter.14
DEBUG 2022-02-08 17:11:33,786 on stmt: jump 142
DEBUG 2022-02-08 17:11:33,786 ==== SSA block rewrite pass on 142
DEBUG 2022-02-08 17:11:33,786 Running <numba.core.ssa._FixSSAVars object at 0x000001E9F644CEE0>
DEBUG 2022-02-08 17:11:33,786 on stmt: $142for_iter.1 = iternext(value=$phi142.0)
DEBUG 2022-02-08 17:11:33,786 on stmt: $142for_iter.2 = pair_first(value=$142for_iter.1)
DEBUG 2022-02-08 17:11:33,786 on stmt: $142for_iter.3 = pair_second(value=$142for_iter.1)
DEBUG 2022-02-08 17:11:33,786 on stmt: $phi144.1 = $142for_iter.2
DEBUG 2022-02-08 17:11:33,786 on stmt: branch $142for_iter.3, 144, 382
DEBUG 2022-02-08 17:11:33,786 ==== SSA block rewrite pass on 144
DEBUG 2022-02-08 17:11:33,786 Running <numba.core.ssa._FixSSAVars object at 0x000001E9F644CEE0>
DEBUG 2022-02-08 17:11:33,786 on stmt: j = $phi144.1
DEBUG 2022-02-08 17:11:33,786 on stmt: $146load_global.2 = global(find_kept_edges: CPUDispatcher(<function find_kept_edges at 0x000001E9ECB305E0>))
DEBUG 2022-02-08 17:11:33,786 on stmt: kept_edges = call $146load_global.2(j, edge_reps, func=$146load_global.2, args=[Var(j, loop_hafnian.py:34), Var(edge_reps, loop_hafnian.py:20)], kws=(), vararg=None, target=None)
DEBUG 2022-02-08 17:11:33,786 on stmt: $158load_method.7 = getattr(value=kept_edges, attr=sum)
DEBUG 2022-02-08 17:11:33,786 on stmt: edge_sum = call $158load_method.7(func=$158load_method.7, args=[], kws=(), vararg=None, target=None)
DEBUG 2022-02-08 17:11:33,786 on stmt: binom_prod = const(float, 1.0)
DEBUG 2022-02-08 17:11:33,786 on stmt: $168load_global.10 = global(range: <class 'range'>)
DEBUG 2022-02-08 17:11:33,802 on stmt: $const172.12 = const(int, 2)
DEBUG 2022-02-08 17:11:33,802 on stmt: $174binary_floor_divide.13 = n // $const172.12
DEBUG 2022-02-08 17:11:33,802 on stmt: $176call_function.14 = call $168load_global.10($174binary_floor_divide.13, func=$168load_global.10, args=[Var($174binary_floor_divide.13, loop_hafnian.py:40)], kws=(), vararg=None, target=None)
DEBUG 2022-02-08 17:11:33,802 on stmt: $178get_iter.15 = getiter(value=$176call_function.14)
DEBUG 2022-02-08 17:11:33,802 on stmt: $phi180.1 = $178get_iter.15
DEBUG 2022-02-08 17:11:33,802 on stmt: jump 180
DEBUG 2022-02-08 17:11:33,802 ==== SSA block rewrite pass on 180
DEBUG 2022-02-08 17:11:33,802 Running <numba.core.ssa._FixSSAVars object at 0x000001E9F644CEE0>
DEBUG 2022-02-08 17:11:33,802 on stmt: binom_prod.2 = phi(incoming_values=[Var(binom_prod, loop_hafnian.py:39), Var(binom_prod.1, loop_hafnian.py:41)], incoming_blocks=[144, 182])
DEBUG 2022-02-08 17:11:33,802 on stmt: $180for_iter.2 = iternext(value=$phi180.1)
DEBUG 2022-02-08 17:11:33,802 on stmt: $180for_iter.3 = pair_first(value=$180for_iter.2)
DEBUG 2022-02-08 17:11:33,802 on stmt: $180for_iter.4 = pair_second(value=$180for_iter.2)
DEBUG 2022-02-08 17:11:33,802 on stmt: $phi182.2 = $180for_iter.3
DEBUG 2022-02-08 17:11:33,802 on stmt: branch $180for_iter.4, 182, 210
DEBUG 2022-02-08 17:11:33,802 ==== SSA block rewrite pass on 182
DEBUG 2022-02-08 17:11:33,802 Running <numba.core.ssa._FixSSAVars object at 0x000001E9F644CEE0>
DEBUG 2022-02-08 17:11:33,802 on stmt: i = $phi182.2
DEBUG 2022-02-08 17:11:33,802 on stmt: $192binary_subscr.7 = getitem(value=edge_reps, index=i, fn=<built-in function getitem>)
DEBUG 2022-02-08 17:11:33,802 on stmt: $198binary_subscr.10 = getitem(value=kept_edges, index=i, fn=<built-in function getitem>)
DEBUG 2022-02-08 17:11:33,802 on stmt: $200build_tuple.11 = build_tuple(items=[Var($192binary_subscr.7, loop_hafnian.py:41), Var($198binary_subscr.10, loop_hafnian.py:41)])
DEBUG 2022-02-08 17:11:33,802 on stmt: $202binary_subscr.12 = getitem(value=binoms, index=$200build_tuple.11, fn=<built-in function getitem>)
DEBUG 2022-02-08 17:11:33,802 on stmt: $204inplace_multiply.13 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=binom_prod.2, rhs=$202binary_subscr.12, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-08 17:11:33,802 on stmt: binom_prod.1 = $204inplace_multiply.13
DEBUG 2022-02-08 17:11:33,802 on stmt: jump 180
DEBUG 2022-02-08 17:11:33,802 ==== SSA block rewrite pass on 210
DEBUG 2022-02-08 17:11:33,802 Running <numba.core.ssa._FixSSAVars object at 0x000001E9F644CEE0>
DEBUG 2022-02-08 17:11:33,802 on stmt: bool212 = global(bool: <class 'bool'>)
DEBUG 2022-02-08 17:11:33,802 on stmt: $212pred = call bool212(glynn, func=bool212, args=(Var(glynn, loop_hafnian.py:20),), kws=(), vararg=None, target=None)
DEBUG 2022-02-08 17:11:33,802 on stmt: branch $212pred, 214, 226
DEBUG 2022-02-08 17:11:33,802 ==== SSA block rewrite pass on 214
DEBUG 2022-02-08 17:11:33,802 Running <numba.core.ssa._FixSSAVars object at 0x000001E9F644CEE0>
DEBUG 2022-02-08 17:11:33,802 on stmt: $const214.1 = const(int, 2)
DEBUG 2022-02-08 17:11:33,802 on stmt: $218binary_multiply.3 = $const214.1 * kept_edges
DEBUG 2022-02-08 17:11:33,802 on stmt: kept_edges.1 = $218binary_multiply.3 - edge_reps
DEBUG 2022-02-08 17:11:33,802 on stmt: jump 226
DEBUG 2022-02-08 17:11:33,802 ==== SSA block rewrite pass on 226
DEBUG 2022-02-08 17:11:33,802 Running <numba.core.ssa._FixSSAVars object at 0x000001E9F644CEE0>
DEBUG 2022-02-08 17:11:33,802 on stmt: kept_edges.2 = phi(incoming_values=[Var(kept_edges, loop_hafnian.py:36), Var(kept_edges.1, loop_hafnian.py:44)], incoming_blocks=[210, 214])
DEBUG 2022-02-08 17:11:33,802 on stmt: $226load_global.1 = global(get_submatrices: CPUDispatcher(<function get_submatrices at 0x000001E9ECB30AF0>))
DEBUG 2022-02-08 17:11:33,802 on stmt: $236call_function.6 = call $226load_global.1(kept_edges.2, A, D, oddV, func=$226load_global.1, args=[Var(kept_edges.2, loop_hafnian.py:46), Var(A, loop_hafnian.py:20), Var(D, loop_hafnian.py:20), Var(oddV, loop_hafnian.py:20)], kws=(), vararg=None, target=None)
DEBUG 2022-02-08 17:11:33,802 on stmt: $238unpack_sequence.11 = exhaust_iter(value=$236call_function.6, count=4)
DEBUG 2022-02-08 17:11:33,802 on stmt: $238unpack_sequence.7 = static_getitem(value=$238unpack_sequence.11, index=0, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-02-08 17:11:33,802 on stmt: $238unpack_sequence.8 = static_getitem(value=$238unpack_sequence.11, index=1, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-02-08 17:11:33,802 on stmt: $238unpack_sequence.9 = static_getitem(value=$238unpack_sequence.11, index=2, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-02-08 17:11:33,802 on stmt: $238unpack_sequence.10 = static_getitem(value=$238unpack_sequence.11, index=3, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-02-08 17:11:33,802 on stmt: AX_S = $238unpack_sequence.7
DEBUG 2022-02-08 17:11:33,802 on stmt: XD_S = $238unpack_sequence.8
DEBUG 2022-02-08 17:11:33,802 on stmt: D_S = $238unpack_sequence.9
DEBUG 2022-02-08 17:11:33,802 on stmt: oddVX_S = $238unpack_sequence.10
DEBUG 2022-02-08 17:11:33,802 on stmt: $248load_global.12 = global(eigvals: CPUDispatcher(<function eigvals at 0x000001E9ECB4E040>))
DEBUG 2022-02-08 17:11:33,802 on stmt: E = call $248load_global.12(AX_S, func=$248load_global.12, args=[Var(AX_S, loop_hafnian.py:46)], kws=(), vararg=None, target=None)
DEBUG 2022-02-08 17:11:33,802 on stmt: $const256.15 = const(float, -1.0)
DEBUG 2022-02-08 17:11:33,802 on stmt: $const260.17 = const(int, 2)
DEBUG 2022-02-08 17:11:33,802 on stmt: $262binary_floor_divide.18 = N // $const260.17
DEBUG 2022-02-08 17:11:33,802 on stmt: $266binary_subtract.20 = $262binary_floor_divide.18 - edge_sum
DEBUG 2022-02-08 17:11:33,802 on stmt: $268binary_power.21 = $const256.15 ** $266binary_subtract.20
DEBUG 2022-02-08 17:11:33,802 on stmt: prefac = $268binary_power.21 * binom_prod.2
DEBUG 2022-02-08 17:11:33,802 on stmt: $const278.25 = const(NoneType, None)
DEBUG 2022-02-08 17:11:33,802 on stmt: $280is_op.26 = const(int, 0)
DEBUG 2022-02-08 17:11:33,802 on stmt: bool282 = global(bool: <class 'bool'>)
DEBUG 2022-02-08 17:11:33,802 on stmt: $282pred = call bool282($280is_op.26, func=bool282, args=(Var($280is_op.26, loop_hafnian.py:52),), kws=(), vararg=None, target=None)
DEBUG 2022-02-08 17:11:33,802 on stmt: jump 320
DEBUG 2022-02-08 17:11:33,802 ==== SSA block rewrite pass on 320
DEBUG 2022-02-08 17:11:33,802 Running <numba.core.ssa._FixSSAVars object at 0x000001E9F644CEE0>
DEBUG 2022-02-08 17:11:33,802 on stmt: bool322 = global(bool: <class 'bool'>)
DEBUG 2022-02-08 17:11:33,802 on stmt: $322pred = call bool322(glynn, func=bool322, args=(Var(glynn, loop_hafnian.py:20),), kws=(), vararg=None, target=None)
DEBUG 2022-02-08 17:11:33,802 on stmt: branch $322pred, 326, 348
DEBUG 2022-02-08 17:11:33,802 ==== SSA block rewrite pass on 326
DEBUG 2022-02-08 17:11:33,802 Running <numba.core.ssa._FixSSAVars object at 0x000001E9F644CEE0>
DEBUG 2022-02-08 17:11:33,802 on stmt: $const328.2 = const(int, 0)
DEBUG 2022-02-08 17:11:33,802 on stmt: $330binary_subscr.3 = static_getitem(value=kept_edges.2, index=0, index_var=$const328.2, fn=<built-in function getitem>)
DEBUG 2022-02-08 17:11:33,802 on stmt: $const332.4 = const(int, 0)
DEBUG 2022-02-08 17:11:33,802 on stmt: $334compare_op.5 = $330binary_subscr.3 == $const332.4
DEBUG 2022-02-08 17:11:33,802 on stmt: bool336 = global(bool: <class 'bool'>)
DEBUG 2022-02-08 17:11:33,802 on stmt: $336pred = call bool336($334compare_op.5, func=bool336, args=(Var($334compare_op.5, loop_hafnian.py:55),), kws=(), vararg=None, target=None)
DEBUG 2022-02-08 17:11:33,802 on stmt: branch $336pred, 340, 348
DEBUG 2022-02-08 17:11:33,802 ==== SSA block rewrite pass on 340
DEBUG 2022-02-08 17:11:33,802 Running <numba.core.ssa._FixSSAVars object at 0x000001E9F644CEE0>
DEBUG 2022-02-08 17:11:33,802 on stmt: $const342.2 = const(float, 0.5)
DEBUG 2022-02-08 17:11:33,802 on stmt: $344inplace_multiply.3 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=prefac, rhs=$const342.2, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-08 17:11:33,802 on stmt: prefac.1 = $344inplace_multiply.3
DEBUG 2022-02-08 17:11:33,802 on stmt: jump 348
DEBUG 2022-02-08 17:11:33,802 ==== SSA block rewrite pass on 348
DEBUG 2022-02-08 17:11:33,802 Running <numba.core.ssa._FixSSAVars object at 0x000001E9F644CEE0>
DEBUG 2022-02-08 17:11:33,802 on stmt: prefac.2 = phi(incoming_values=[Var(prefac, loop_hafnian.py:50), Var(prefac.1, loop_hafnian.py:56), Var(prefac, loop_hafnian.py:50)], incoming_blocks=[320, 340, 326])
DEBUG 2022-02-08 17:11:33,802 on stmt: $352load_global.3 = global(f_loop: CPUDispatcher(<function f_loop at 0x000001E9ECB30790>))
DEBUG 2022-02-08 17:11:33,802 on stmt: $364call_function.9 = call $352load_global.3(E, AX_S, XD_S, D_S, N, func=$352load_global.3, args=[Var(E, loop_hafnian.py:48), Var(AX_S, loop_hafnian.py:46), Var(XD_S, loop_hafnian.py:46), Var(D_S, loop_hafnian.py:46), Var(N, loop_hafnian.py:21)], kws=(), vararg=None, target=None)
DEBUG 2022-02-08 17:11:33,802 on stmt: $const368.11 = const(int, 2)
DEBUG 2022-02-08 17:11:33,802 on stmt: $370binary_floor_divide.12 = N // $const368.11
DEBUG 2022-02-08 17:11:33,802 on stmt: $372binary_subscr.13 = getitem(value=$364call_function.9, index=$370binary_floor_divide.12, fn=<built-in function getitem>)
DEBUG 2022-02-08 17:11:33,802 on stmt: $374binary_multiply.14 = prefac.2 * $372binary_subscr.13
DEBUG 2022-02-08 17:11:33,802 on stmt: $376inplace_add.15 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=H, rhs=$374binary_multiply.14, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-08 17:11:33,802 find_def var='H' stmt=$376inplace_add.15 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=H, rhs=$374binary_multiply.14, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-08 17:11:33,802 find_def_from_top label 348
DEBUG 2022-02-08 17:11:33,802 idom 320 from label 348
DEBUG 2022-02-08 17:11:33,802 find_def_from_bottom label 320
DEBUG 2022-02-08 17:11:33,802 find_def_from_top label 320
DEBUG 2022-02-08 17:11:33,802 idom 226 from label 320
DEBUG 2022-02-08 17:11:33,802 find_def_from_bottom label 226
DEBUG 2022-02-08 17:11:33,802 find_def_from_top label 226
DEBUG 2022-02-08 17:11:33,802 idom 210 from label 226
DEBUG 2022-02-08 17:11:33,802 find_def_from_bottom label 210
DEBUG 2022-02-08 17:11:33,802 find_def_from_top label 210
DEBUG 2022-02-08 17:11:33,802 idom 180 from label 210
DEBUG 2022-02-08 17:11:33,802 find_def_from_bottom label 180
DEBUG 2022-02-08 17:11:33,802 find_def_from_top label 180
DEBUG 2022-02-08 17:11:33,802 idom 144 from label 180
DEBUG 2022-02-08 17:11:33,802 find_def_from_bottom label 144
DEBUG 2022-02-08 17:11:33,802 find_def_from_top label 144
DEBUG 2022-02-08 17:11:33,802 idom 142 from label 144
DEBUG 2022-02-08 17:11:33,802 find_def_from_bottom label 142
DEBUG 2022-02-08 17:11:33,802 find_def_from_top label 142
DEBUG 2022-02-08 17:11:33,802 insert phi node H.3 = phi(incoming_values=[], incoming_blocks=[]) at 142
DEBUG 2022-02-08 17:11:33,802 find_def_from_bottom label 106
DEBUG 2022-02-08 17:11:33,802 incoming_def H = const(int, 0)
DEBUG 2022-02-08 17:11:33,802 find_def_from_bottom label 437
DEBUG 2022-02-08 17:11:33,802 find_def_from_top label 437
DEBUG 2022-02-08 17:11:33,802 idom 348 from label 437
DEBUG 2022-02-08 17:11:33,802 find_def_from_bottom label 348
DEBUG 2022-02-08 17:11:33,802 incoming_def H.1 = $376inplace_add.15
DEBUG 2022-02-08 17:11:33,802 replaced with: $376inplace_add.15 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=H.3, rhs=$374binary_multiply.14, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-08 17:11:33,802 on stmt: H.1 = $376inplace_add.15
DEBUG 2022-02-08 17:11:33,802 on stmt: jump 437
DEBUG 2022-02-08 17:11:33,802 ==== SSA block rewrite pass on 382
DEBUG 2022-02-08 17:11:33,802 Running <numba.core.ssa._FixSSAVars object at 0x000001E9F644CEE0>
DEBUG 2022-02-08 17:11:33,802 on stmt: bool384 = global(bool: <class 'bool'>)
DEBUG 2022-02-08 17:11:33,802 on stmt: $384pred = call bool384(glynn, func=bool384, args=(Var(glynn, loop_hafnian.py:20),), kws=(), vararg=None, target=None)
DEBUG 2022-02-08 17:11:33,802 on stmt: branch $384pred, 388, 436
DEBUG 2022-02-08 17:11:33,802 ==== SSA block rewrite pass on 388
DEBUG 2022-02-08 17:11:33,802 Running <numba.core.ssa._FixSSAVars object at 0x000001E9F644CEE0>
DEBUG 2022-02-08 17:11:33,802 on stmt: $const390.1 = const(NoneType, None)
DEBUG 2022-02-08 17:11:33,802 on stmt: $392is_op.2 = const(int, 1)
DEBUG 2022-02-08 17:11:33,802 on stmt: bool394 = global(bool: <class 'bool'>)
DEBUG 2022-02-08 17:11:33,802 on stmt: $394pred = call bool394($392is_op.2, func=bool394, args=(Var($392is_op.2, loop_hafnian.py:60),), kws=(), vararg=None, target=None)
DEBUG 2022-02-08 17:11:33,802 on stmt: jump 398
DEBUG 2022-02-08 17:11:33,802 ==== SSA block rewrite pass on 398
DEBUG 2022-02-08 17:11:33,802 Running <numba.core.ssa._FixSSAVars object at 0x000001E9F644CEE0>
DEBUG 2022-02-08 17:11:33,802 on stmt: $const400.1 = const(float, 0.5)
DEBUG 2022-02-08 17:11:33,802 on stmt: $const404.3 = const(int, 2)
DEBUG 2022-02-08 17:11:33,802 on stmt: $406binary_floor_divide.4 = N // $const404.3
DEBUG 2022-02-08 17:11:33,802 on stmt: $const408.5 = const(int, 1)
DEBUG 2022-02-08 17:11:33,802 on stmt: $410binary_subtract.6 = $406binary_floor_divide.4 - $const408.5
DEBUG 2022-02-08 17:11:33,802 on stmt: $412binary_power.7 = $const400.1 ** $410binary_subtract.6
DEBUG 2022-02-08 17:11:33,802 on stmt: $414binary_multiply.8 = H * $412binary_power.7
DEBUG 2022-02-08 17:11:33,802 find_def var='H' stmt=$414binary_multiply.8 = H * $412binary_power.7
DEBUG 2022-02-08 17:11:33,802 find_def_from_top label 398
DEBUG 2022-02-08 17:11:33,802 idom 388 from label 398
DEBUG 2022-02-08 17:11:33,802 find_def_from_bottom label 388
DEBUG 2022-02-08 17:11:33,802 find_def_from_top label 388
DEBUG 2022-02-08 17:11:33,802 idom 382 from label 388
DEBUG 2022-02-08 17:11:33,802 find_def_from_bottom label 382
DEBUG 2022-02-08 17:11:33,802 find_def_from_top label 382
DEBUG 2022-02-08 17:11:33,802 idom 142 from label 382
DEBUG 2022-02-08 17:11:33,802 find_def_from_bottom label 142
DEBUG 2022-02-08 17:11:33,802 replaced with: $414binary_multiply.8 = H.3 * $412binary_power.7
DEBUG 2022-02-08 17:11:33,802 on stmt: H.2 = $414binary_multiply.8
DEBUG 2022-02-08 17:11:33,802 on stmt: jump 436
DEBUG 2022-02-08 17:11:33,802 ==== SSA block rewrite pass on 436
DEBUG 2022-02-08 17:11:33,802 Running <numba.core.ssa._FixSSAVars object at 0x000001E9F644CEE0>
DEBUG 2022-02-08 17:11:33,802 on stmt: $438return_value.1 = cast(value=H)
DEBUG 2022-02-08 17:11:33,802 find_def var='H' stmt=$438return_value.1 = cast(value=H)
DEBUG 2022-02-08 17:11:33,802 find_def_from_top label 436
DEBUG 2022-02-08 17:11:33,802 insert phi node H.4 = phi(incoming_values=[], incoming_blocks=[]) at 436
DEBUG 2022-02-08 17:11:33,802 find_def_from_bottom label 398
DEBUG 2022-02-08 17:11:33,802 incoming_def H.2 = $414binary_multiply.8
DEBUG 2022-02-08 17:11:33,802 find_def_from_bottom label 382
DEBUG 2022-02-08 17:11:33,802 find_def_from_top label 382
DEBUG 2022-02-08 17:11:33,802 idom 142 from label 382
DEBUG 2022-02-08 17:11:33,818 find_def_from_bottom label 142
DEBUG 2022-02-08 17:11:33,818 incoming_def H.3 = phi(incoming_values=[Var(H, loop_hafnian.py:32), Var(H.1, loop_hafnian.py:57)], incoming_blocks=[106, 437])
DEBUG 2022-02-08 17:11:33,818 replaced with: $438return_value.1 = cast(value=H.4)
DEBUG 2022-02-08 17:11:33,818 on stmt: return $438return_value.1
DEBUG 2022-02-08 17:11:33,818 ==== SSA block rewrite pass on 437
DEBUG 2022-02-08 17:11:33,818 Running <numba.core.ssa._FixSSAVars object at 0x000001E9F644CEE0>
DEBUG 2022-02-08 17:11:33,818 on stmt: jump 142
DEBUG 2022-02-08 17:11:33,933 bytecode dump:
>          0	NOP(arg=None, lineno=187)
           2	LOAD_GLOBAL(arg=0, lineno=187)
           4	LOAD_METHOD(arg=1, lineno=187)
           6	LOAD_FAST(arg=0, lineno=187)
           8	LOAD_FAST(arg=0, lineno=187)
          10	BUILD_TUPLE(arg=2, lineno=187)
          12	CALL_METHOD(arg=1, lineno=187)
          14	STORE_FAST(arg=4, lineno=187)
          16	LOAD_GLOBAL(arg=0, lineno=188)
          18	LOAD_METHOD(arg=2, lineno=188)
          20	LOAD_FAST(arg=4, lineno=188)
          22	LOAD_CONST(arg=1, lineno=188)
          24	COMPARE_OP(arg=3, lineno=188)
          26	CALL_METHOD(arg=1, lineno=188)
          28	LOAD_CONST(arg=1, lineno=188)
          30	BINARY_SUBSCR(arg=None, lineno=188)
          32	STORE_FAST(arg=5, lineno=188)
          34	LOAD_GLOBAL(arg=3, lineno=189)
          36	LOAD_FAST(arg=5, lineno=189)
          38	CALL_FUNCTION(arg=1, lineno=189)
          40	LOAD_CONST(arg=2, lineno=189)
          42	BINARY_FLOOR_DIVIDE(arg=None, lineno=189)
          44	STORE_FAST(arg=6, lineno=189)
          46	LOAD_FAST(arg=0, lineno=191)
          48	LOAD_GLOBAL(arg=0, lineno=191)
          50	LOAD_METHOD(arg=2, lineno=191)
          52	LOAD_FAST(arg=0, lineno=191)
          54	LOAD_CONST(arg=1, lineno=191)
          56	COMPARE_OP(arg=3, lineno=191)
          58	CALL_METHOD(arg=1, lineno=191)
          60	BINARY_SUBSCR(arg=None, lineno=191)
          62	STORE_FAST(arg=7, lineno=191)
          64	LOAD_GLOBAL(arg=4, lineno=193)
          66	LOAD_FAST(arg=1, lineno=193)
          68	LOAD_FAST(arg=5, lineno=193)
          70	LOAD_FAST(arg=5, lineno=193)
          72	CALL_FUNCTION(arg=3, lineno=193)
          74	STORE_FAST(arg=8, lineno=193)
          76	LOAD_GLOBAL(arg=0, lineno=195)
          78	LOAD_ATTR(arg=5, lineno=195)
          80	LOAD_FAST(arg=8, lineno=195)
          82	LOAD_GLOBAL(arg=0, lineno=195)
          84	LOAD_ATTR(arg=6, lineno=195)
          86	LOAD_CONST(arg=3, lineno=195)
          88	CALL_FUNCTION_KW(arg=2, lineno=195)
          90	STORE_FAST(arg=9, lineno=195)
          92	LOAD_FAST(arg=7, lineno=196)
          94	LOAD_FAST(arg=8, lineno=196)
          96	LOAD_CONST(arg=0, lineno=196)
          98	LOAD_CONST(arg=0, lineno=196)
         100	BUILD_SLICE(arg=2, lineno=196)
         102	LOAD_FAST(arg=6, lineno=196)
         104	LOAD_CONST(arg=0, lineno=196)
         106	BUILD_SLICE(arg=2, lineno=196)
         108	BUILD_TUPLE(arg=2, lineno=196)
         110	BINARY_SUBSCR(arg=None, lineno=196)
         112	BINARY_MULTIPLY(arg=None, lineno=196)
         114	LOAD_FAST(arg=9, lineno=196)
         116	LOAD_CONST(arg=0, lineno=196)
         118	LOAD_CONST(arg=0, lineno=196)
         120	BUILD_SLICE(arg=2, lineno=196)
         122	LOAD_CONST(arg=0, lineno=196)
         124	LOAD_FAST(arg=6, lineno=196)
         126	BUILD_SLICE(arg=2, lineno=196)
         128	BUILD_TUPLE(arg=2, lineno=196)
         130	STORE_SUBSCR(arg=None, lineno=196)
         132	LOAD_FAST(arg=7, lineno=197)
         134	LOAD_FAST(arg=8, lineno=197)
         136	LOAD_CONST(arg=0, lineno=197)
         138	LOAD_CONST(arg=0, lineno=197)
         140	BUILD_SLICE(arg=2, lineno=197)
         142	LOAD_CONST(arg=0, lineno=197)
         144	LOAD_FAST(arg=6, lineno=197)
         146	BUILD_SLICE(arg=2, lineno=197)
         148	BUILD_TUPLE(arg=2, lineno=197)
         150	BINARY_SUBSCR(arg=None, lineno=197)
         152	BINARY_MULTIPLY(arg=None, lineno=197)
         154	LOAD_FAST(arg=9, lineno=197)
         156	LOAD_CONST(arg=0, lineno=197)
         158	LOAD_CONST(arg=0, lineno=197)
         160	BUILD_SLICE(arg=2, lineno=197)
         162	LOAD_FAST(arg=6, lineno=197)
         164	LOAD_CONST(arg=0, lineno=197)
         166	BUILD_SLICE(arg=2, lineno=197)
         168	BUILD_TUPLE(arg=2, lineno=197)
         170	STORE_SUBSCR(arg=None, lineno=197)
         172	LOAD_FAST(arg=2, lineno=199)
         174	LOAD_FAST(arg=5, lineno=199)
         176	BINARY_SUBSCR(arg=None, lineno=199)
         178	STORE_FAST(arg=10, lineno=199)
         180	LOAD_GLOBAL(arg=0, lineno=201)
         182	LOAD_ATTR(arg=5, lineno=201)
         184	LOAD_FAST(arg=10, lineno=201)
         186	LOAD_GLOBAL(arg=0, lineno=201)
         188	LOAD_ATTR(arg=6, lineno=201)
         190	LOAD_CONST(arg=3, lineno=201)
         192	CALL_FUNCTION_KW(arg=2, lineno=201)
         194	STORE_FAST(arg=11, lineno=201)
         196	LOAD_FAST(arg=7, lineno=202)
         198	LOAD_FAST(arg=10, lineno=202)
         200	LOAD_FAST(arg=6, lineno=202)
         202	LOAD_CONST(arg=0, lineno=202)
         204	BUILD_SLICE(arg=2, lineno=202)
         206	BINARY_SUBSCR(arg=None, lineno=202)
         208	BINARY_MULTIPLY(arg=None, lineno=202)
         210	LOAD_FAST(arg=11, lineno=202)
         212	LOAD_CONST(arg=0, lineno=202)
         214	LOAD_FAST(arg=6, lineno=202)
         216	BUILD_SLICE(arg=2, lineno=202)
         218	STORE_SUBSCR(arg=None, lineno=202)
         220	LOAD_FAST(arg=7, lineno=203)
         222	LOAD_FAST(arg=10, lineno=203)
         224	LOAD_CONST(arg=0, lineno=203)
         226	LOAD_FAST(arg=6, lineno=203)
         228	BUILD_SLICE(arg=2, lineno=203)
         230	BINARY_SUBSCR(arg=None, lineno=203)
         232	BINARY_MULTIPLY(arg=None, lineno=203)
         234	LOAD_FAST(arg=11, lineno=203)
         236	LOAD_FAST(arg=6, lineno=203)
         238	LOAD_CONST(arg=0, lineno=203)
         240	BUILD_SLICE(arg=2, lineno=203)
         242	STORE_SUBSCR(arg=None, lineno=203)
         244	LOAD_FAST(arg=3, lineno=205)
         246	LOAD_CONST(arg=0, lineno=205)
         248	IS_OP(arg=1, lineno=205)
         250	POP_JUMP_IF_FALSE(arg=328, lineno=205)
         254	LOAD_FAST(arg=3, lineno=206)
         256	LOAD_FAST(arg=5, lineno=206)
         258	BINARY_SUBSCR(arg=None, lineno=206)
         260	STORE_FAST(arg=12, lineno=206)
         262	LOAD_GLOBAL(arg=0, lineno=207)
         264	LOAD_ATTR(arg=5, lineno=207)
         266	LOAD_FAST(arg=12, lineno=207)
         268	LOAD_GLOBAL(arg=0, lineno=207)
         270	LOAD_ATTR(arg=6, lineno=207)
         272	LOAD_CONST(arg=3, lineno=207)
         274	CALL_FUNCTION_KW(arg=2, lineno=207)
         276	STORE_FAST(arg=13, lineno=207)
         278	LOAD_FAST(arg=7, lineno=208)
         280	LOAD_FAST(arg=12, lineno=208)
         282	LOAD_FAST(arg=6, lineno=208)
         284	LOAD_CONST(arg=0, lineno=208)
         286	BUILD_SLICE(arg=2, lineno=208)
         288	BINARY_SUBSCR(arg=None, lineno=208)
         290	BINARY_MULTIPLY(arg=None, lineno=208)
         292	LOAD_FAST(arg=13, lineno=208)
         294	LOAD_CONST(arg=0, lineno=208)
         296	LOAD_FAST(arg=6, lineno=208)
         298	BUILD_SLICE(arg=2, lineno=208)
         300	STORE_SUBSCR(arg=None, lineno=208)
         302	LOAD_FAST(arg=7, lineno=209)
         304	LOAD_FAST(arg=12, lineno=209)
         306	LOAD_CONST(arg=0, lineno=209)
         308	LOAD_FAST(arg=6, lineno=209)
         310	BUILD_SLICE(arg=2, lineno=209)
         312	BINARY_SUBSCR(arg=None, lineno=209)
         314	BINARY_MULTIPLY(arg=None, lineno=209)
         316	LOAD_FAST(arg=13, lineno=209)
         318	LOAD_FAST(arg=6, lineno=209)
         320	LOAD_CONST(arg=0, lineno=209)
         322	BUILD_SLICE(arg=2, lineno=209)
         324	STORE_SUBSCR(arg=None, lineno=209)
         326	JUMP_FORWARD(arg=4, lineno=209)
>        328	LOAD_CONST(arg=0, lineno=211)
         330	STORE_FAST(arg=13, lineno=211)
>        332	LOAD_FAST(arg=9, lineno=213)
         334	LOAD_FAST(arg=11, lineno=213)
         336	LOAD_FAST(arg=10, lineno=213)
         338	LOAD_FAST(arg=13, lineno=213)
         340	BUILD_TUPLE(arg=4, lineno=213)
         342	RETURN_VALUE(arg=None, lineno=213)
DEBUG 2022-02-08 17:11:33,933 pending: deque([State(pc_initial=0 nstack_initial=0)])
DEBUG 2022-02-08 17:11:33,933 stack: []
DEBUG 2022-02-08 17:11:33,933 dispatch pc=0, inst=NOP(arg=None, lineno=187)
DEBUG 2022-02-08 17:11:33,933 stack []
DEBUG 2022-02-08 17:11:33,933 dispatch pc=2, inst=LOAD_GLOBAL(arg=0, lineno=187)
DEBUG 2022-02-08 17:11:33,949 stack []
DEBUG 2022-02-08 17:11:33,949 dispatch pc=4, inst=LOAD_METHOD(arg=1, lineno=187)
DEBUG 2022-02-08 17:11:33,949 stack ['$2load_global.0']
DEBUG 2022-02-08 17:11:33,949 dispatch pc=6, inst=LOAD_FAST(arg=0, lineno=187)
DEBUG 2022-02-08 17:11:33,949 stack ['$4load_method.1']
DEBUG 2022-02-08 17:11:33,949 dispatch pc=8, inst=LOAD_FAST(arg=0, lineno=187)
DEBUG 2022-02-08 17:11:33,949 stack ['$4load_method.1', '$kept_edges6.2']
DEBUG 2022-02-08 17:11:33,949 dispatch pc=10, inst=BUILD_TUPLE(arg=2, lineno=187)
DEBUG 2022-02-08 17:11:33,949 stack ['$4load_method.1', '$kept_edges6.2', '$kept_edges8.3']
DEBUG 2022-02-08 17:11:33,949 dispatch pc=12, inst=CALL_METHOD(arg=1, lineno=187)
DEBUG 2022-02-08 17:11:33,949 stack ['$4load_method.1', '$10build_tuple.4']
DEBUG 2022-02-08 17:11:33,949 dispatch pc=14, inst=STORE_FAST(arg=4, lineno=187)
DEBUG 2022-02-08 17:11:33,949 stack ['$12call_method.5']
DEBUG 2022-02-08 17:11:33,949 dispatch pc=16, inst=LOAD_GLOBAL(arg=0, lineno=188)
DEBUG 2022-02-08 17:11:33,949 stack []
DEBUG 2022-02-08 17:11:33,949 dispatch pc=18, inst=LOAD_METHOD(arg=2, lineno=188)
DEBUG 2022-02-08 17:11:33,949 stack ['$16load_global.6']
DEBUG 2022-02-08 17:11:33,949 dispatch pc=20, inst=LOAD_FAST(arg=4, lineno=188)
DEBUG 2022-02-08 17:11:33,949 stack ['$18load_method.7']
DEBUG 2022-02-08 17:11:33,949 dispatch pc=22, inst=LOAD_CONST(arg=1, lineno=188)
DEBUG 2022-02-08 17:11:33,949 stack ['$18load_method.7', '$z20.8']
DEBUG 2022-02-08 17:11:33,949 dispatch pc=24, inst=COMPARE_OP(arg=3, lineno=188)
DEBUG 2022-02-08 17:11:33,949 stack ['$18load_method.7', '$z20.8', '$const22.9']
DEBUG 2022-02-08 17:11:33,949 dispatch pc=26, inst=CALL_METHOD(arg=1, lineno=188)
DEBUG 2022-02-08 17:11:33,949 stack ['$18load_method.7', '$24compare_op.10']
DEBUG 2022-02-08 17:11:33,949 dispatch pc=28, inst=LOAD_CONST(arg=1, lineno=188)
DEBUG 2022-02-08 17:11:33,949 stack ['$26call_method.11']
DEBUG 2022-02-08 17:11:33,949 dispatch pc=30, inst=BINARY_SUBSCR(arg=None, lineno=188)
DEBUG 2022-02-08 17:11:33,949 stack ['$26call_method.11', '$const28.12']
DEBUG 2022-02-08 17:11:33,949 dispatch pc=32, inst=STORE_FAST(arg=5, lineno=188)
DEBUG 2022-02-08 17:11:33,949 stack ['$30binary_subscr.13']
DEBUG 2022-02-08 17:11:33,949 dispatch pc=34, inst=LOAD_GLOBAL(arg=3, lineno=189)
DEBUG 2022-02-08 17:11:33,949 stack []
DEBUG 2022-02-08 17:11:33,949 dispatch pc=36, inst=LOAD_FAST(arg=5, lineno=189)
DEBUG 2022-02-08 17:11:33,949 stack ['$34load_global.14']
DEBUG 2022-02-08 17:11:33,949 dispatch pc=38, inst=CALL_FUNCTION(arg=1, lineno=189)
DEBUG 2022-02-08 17:11:33,949 stack ['$34load_global.14', '$nonzero_rows36.15']
DEBUG 2022-02-08 17:11:33,949 dispatch pc=40, inst=LOAD_CONST(arg=2, lineno=189)
DEBUG 2022-02-08 17:11:33,949 stack ['$38call_function.16']
DEBUG 2022-02-08 17:11:33,949 dispatch pc=42, inst=BINARY_FLOOR_DIVIDE(arg=None, lineno=189)
DEBUG 2022-02-08 17:11:33,949 stack ['$38call_function.16', '$const40.17']
DEBUG 2022-02-08 17:11:33,949 dispatch pc=44, inst=STORE_FAST(arg=6, lineno=189)
DEBUG 2022-02-08 17:11:33,949 stack ['$42binary_floor_divide.18']
DEBUG 2022-02-08 17:11:33,949 dispatch pc=46, inst=LOAD_FAST(arg=0, lineno=191)
DEBUG 2022-02-08 17:11:33,949 stack []
DEBUG 2022-02-08 17:11:33,949 dispatch pc=48, inst=LOAD_GLOBAL(arg=0, lineno=191)
DEBUG 2022-02-08 17:11:33,949 stack ['$kept_edges46.19']
DEBUG 2022-02-08 17:11:33,949 dispatch pc=50, inst=LOAD_METHOD(arg=2, lineno=191)
DEBUG 2022-02-08 17:11:33,949 stack ['$kept_edges46.19', '$48load_global.20']
DEBUG 2022-02-08 17:11:33,949 dispatch pc=52, inst=LOAD_FAST(arg=0, lineno=191)
DEBUG 2022-02-08 17:11:33,949 stack ['$kept_edges46.19', '$50load_method.21']
DEBUG 2022-02-08 17:11:33,949 dispatch pc=54, inst=LOAD_CONST(arg=1, lineno=191)
DEBUG 2022-02-08 17:11:33,949 stack ['$kept_edges46.19', '$50load_method.21', '$kept_edges52.22']
DEBUG 2022-02-08 17:11:33,949 dispatch pc=56, inst=COMPARE_OP(arg=3, lineno=191)
DEBUG 2022-02-08 17:11:33,949 stack ['$kept_edges46.19', '$50load_method.21', '$kept_edges52.22', '$const54.23']
DEBUG 2022-02-08 17:11:33,949 dispatch pc=58, inst=CALL_METHOD(arg=1, lineno=191)
DEBUG 2022-02-08 17:11:33,949 stack ['$kept_edges46.19', '$50load_method.21', '$56compare_op.24']
DEBUG 2022-02-08 17:11:33,949 dispatch pc=60, inst=BINARY_SUBSCR(arg=None, lineno=191)
DEBUG 2022-02-08 17:11:33,949 stack ['$kept_edges46.19', '$58call_method.25']
DEBUG 2022-02-08 17:11:33,956 dispatch pc=62, inst=STORE_FAST(arg=7, lineno=191)
DEBUG 2022-02-08 17:11:33,956 stack ['$60binary_subscr.26']
DEBUG 2022-02-08 17:11:33,956 dispatch pc=64, inst=LOAD_GLOBAL(arg=4, lineno=193)
DEBUG 2022-02-08 17:11:33,956 stack []
DEBUG 2022-02-08 17:11:33,956 dispatch pc=66, inst=LOAD_FAST(arg=1, lineno=193)
DEBUG 2022-02-08 17:11:33,956 stack ['$64load_global.27']
DEBUG 2022-02-08 17:11:33,956 dispatch pc=68, inst=LOAD_FAST(arg=5, lineno=193)
DEBUG 2022-02-08 17:11:33,956 stack ['$64load_global.27', '$A66.28']
DEBUG 2022-02-08 17:11:33,956 dispatch pc=70, inst=LOAD_FAST(arg=5, lineno=193)
DEBUG 2022-02-08 17:11:33,956 stack ['$64load_global.27', '$A66.28', '$nonzero_rows68.29']
DEBUG 2022-02-08 17:11:33,956 dispatch pc=72, inst=CALL_FUNCTION(arg=3, lineno=193)
DEBUG 2022-02-08 17:11:33,956 stack ['$64load_global.27', '$A66.28', '$nonzero_rows68.29', '$nonzero_rows70.30']
DEBUG 2022-02-08 17:11:33,956 dispatch pc=74, inst=STORE_FAST(arg=8, lineno=193)
DEBUG 2022-02-08 17:11:33,956 stack ['$72call_function.31']
DEBUG 2022-02-08 17:11:33,956 dispatch pc=76, inst=LOAD_GLOBAL(arg=0, lineno=195)
DEBUG 2022-02-08 17:11:33,956 stack []
DEBUG 2022-02-08 17:11:33,956 dispatch pc=78, inst=LOAD_ATTR(arg=5, lineno=195)
DEBUG 2022-02-08 17:11:33,956 stack ['$76load_global.32']
DEBUG 2022-02-08 17:11:33,956 dispatch pc=80, inst=LOAD_FAST(arg=8, lineno=195)
DEBUG 2022-02-08 17:11:33,956 stack ['$78load_attr.33']
DEBUG 2022-02-08 17:11:33,956 dispatch pc=82, inst=LOAD_GLOBAL(arg=0, lineno=195)
DEBUG 2022-02-08 17:11:33,956 stack ['$78load_attr.33', '$A_nonzero80.34']
DEBUG 2022-02-08 17:11:33,956 dispatch pc=84, inst=LOAD_ATTR(arg=6, lineno=195)
DEBUG 2022-02-08 17:11:33,956 stack ['$78load_attr.33', '$A_nonzero80.34', '$82load_global.35']
DEBUG 2022-02-08 17:11:33,956 dispatch pc=86, inst=LOAD_CONST(arg=3, lineno=195)
DEBUG 2022-02-08 17:11:33,956 stack ['$78load_attr.33', '$A_nonzero80.34', '$84load_attr.36']
DEBUG 2022-02-08 17:11:33,956 dispatch pc=88, inst=CALL_FUNCTION_KW(arg=2, lineno=195)
DEBUG 2022-02-08 17:11:33,956 stack ['$78load_attr.33', '$A_nonzero80.34', '$84load_attr.36', '$const86.37']
DEBUG 2022-02-08 17:11:33,956 dispatch pc=90, inst=STORE_FAST(arg=9, lineno=195)
DEBUG 2022-02-08 17:11:33,956 stack ['$88call_function_kw.38']
DEBUG 2022-02-08 17:11:33,956 dispatch pc=92, inst=LOAD_FAST(arg=7, lineno=196)
DEBUG 2022-02-08 17:11:33,956 stack []
DEBUG 2022-02-08 17:11:33,956 dispatch pc=94, inst=LOAD_FAST(arg=8, lineno=196)
DEBUG 2022-02-08 17:11:33,956 stack ['$kept_edges_nonzero92.39']
DEBUG 2022-02-08 17:11:33,956 dispatch pc=96, inst=LOAD_CONST(arg=0, lineno=196)
DEBUG 2022-02-08 17:11:33,956 stack ['$kept_edges_nonzero92.39', '$A_nonzero94.40']
DEBUG 2022-02-08 17:11:33,956 dispatch pc=98, inst=LOAD_CONST(arg=0, lineno=196)
DEBUG 2022-02-08 17:11:33,956 stack ['$kept_edges_nonzero92.39', '$A_nonzero94.40', '$const96.41']
DEBUG 2022-02-08 17:11:33,956 dispatch pc=100, inst=BUILD_SLICE(arg=2, lineno=196)
DEBUG 2022-02-08 17:11:33,956 stack ['$kept_edges_nonzero92.39', '$A_nonzero94.40', '$const96.41', '$const98.42']
DEBUG 2022-02-08 17:11:33,956 dispatch pc=102, inst=LOAD_FAST(arg=6, lineno=196)
DEBUG 2022-02-08 17:11:33,956 stack ['$kept_edges_nonzero92.39', '$A_nonzero94.40', '$100build_slice.44']
DEBUG 2022-02-08 17:11:33,956 dispatch pc=104, inst=LOAD_CONST(arg=0, lineno=196)
DEBUG 2022-02-08 17:11:33,956 stack ['$kept_edges_nonzero92.39', '$A_nonzero94.40', '$100build_slice.44', '$n_nonzero_edges102.45']
DEBUG 2022-02-08 17:11:33,956 dispatch pc=106, inst=BUILD_SLICE(arg=2, lineno=196)
DEBUG 2022-02-08 17:11:33,956 stack ['$kept_edges_nonzero92.39', '$A_nonzero94.40', '$100build_slice.44', '$n_nonzero_edges102.45', '$const104.46']
DEBUG 2022-02-08 17:11:33,956 dispatch pc=108, inst=BUILD_TUPLE(arg=2, lineno=196)
DEBUG 2022-02-08 17:11:33,956 stack ['$kept_edges_nonzero92.39', '$A_nonzero94.40', '$100build_slice.44', '$106build_slice.48']
DEBUG 2022-02-08 17:11:33,956 dispatch pc=110, inst=BINARY_SUBSCR(arg=None, lineno=196)
DEBUG 2022-02-08 17:11:33,956 stack ['$kept_edges_nonzero92.39', '$A_nonzero94.40', '$108build_tuple.49']
DEBUG 2022-02-08 17:11:33,956 dispatch pc=112, inst=BINARY_MULTIPLY(arg=None, lineno=196)
DEBUG 2022-02-08 17:11:33,956 stack ['$kept_edges_nonzero92.39', '$110binary_subscr.50']
DEBUG 2022-02-08 17:11:33,956 dispatch pc=114, inst=LOAD_FAST(arg=9, lineno=196)
DEBUG 2022-02-08 17:11:33,956 stack ['$112binary_multiply.51']
DEBUG 2022-02-08 17:11:33,956 dispatch pc=116, inst=LOAD_CONST(arg=0, lineno=196)
DEBUG 2022-02-08 17:11:33,956 stack ['$112binary_multiply.51', '$AX_nonzero114.52']
DEBUG 2022-02-08 17:11:33,956 dispatch pc=118, inst=LOAD_CONST(arg=0, lineno=196)
DEBUG 2022-02-08 17:11:33,956 stack ['$112binary_multiply.51', '$AX_nonzero114.52', '$const116.53']
DEBUG 2022-02-08 17:11:33,956 dispatch pc=120, inst=BUILD_SLICE(arg=2, lineno=196)
DEBUG 2022-02-08 17:11:33,956 stack ['$112binary_multiply.51', '$AX_nonzero114.52', '$const116.53', '$const118.54']
DEBUG 2022-02-08 17:11:33,956 dispatch pc=122, inst=LOAD_CONST(arg=0, lineno=196)
DEBUG 2022-02-08 17:11:33,956 stack ['$112binary_multiply.51', '$AX_nonzero114.52', '$120build_slice.56']
DEBUG 2022-02-08 17:11:33,956 dispatch pc=124, inst=LOAD_FAST(arg=6, lineno=196)
DEBUG 2022-02-08 17:11:33,956 stack ['$112binary_multiply.51', '$AX_nonzero114.52', '$120build_slice.56', '$const122.57']
DEBUG 2022-02-08 17:11:33,956 dispatch pc=126, inst=BUILD_SLICE(arg=2, lineno=196)
DEBUG 2022-02-08 17:11:33,956 stack ['$112binary_multiply.51', '$AX_nonzero114.52', '$120build_slice.56', '$const122.57', '$n_nonzero_edges124.58']
DEBUG 2022-02-08 17:11:33,956 dispatch pc=128, inst=BUILD_TUPLE(arg=2, lineno=196)
DEBUG 2022-02-08 17:11:33,956 stack ['$112binary_multiply.51', '$AX_nonzero114.52', '$120build_slice.56', '$126build_slice.60']
DEBUG 2022-02-08 17:11:33,956 dispatch pc=130, inst=STORE_SUBSCR(arg=None, lineno=196)
DEBUG 2022-02-08 17:11:33,956 stack ['$112binary_multiply.51', '$AX_nonzero114.52', '$128build_tuple.61']
DEBUG 2022-02-08 17:11:33,956 dispatch pc=132, inst=LOAD_FAST(arg=7, lineno=197)
DEBUG 2022-02-08 17:11:33,956 stack []
DEBUG 2022-02-08 17:11:33,956 dispatch pc=134, inst=LOAD_FAST(arg=8, lineno=197)
DEBUG 2022-02-08 17:11:33,956 stack ['$kept_edges_nonzero132.62']
DEBUG 2022-02-08 17:11:33,956 dispatch pc=136, inst=LOAD_CONST(arg=0, lineno=197)
DEBUG 2022-02-08 17:11:33,956 stack ['$kept_edges_nonzero132.62', '$A_nonzero134.63']
DEBUG 2022-02-08 17:11:33,956 dispatch pc=138, inst=LOAD_CONST(arg=0, lineno=197)
DEBUG 2022-02-08 17:11:33,956 stack ['$kept_edges_nonzero132.62', '$A_nonzero134.63', '$const136.64']
DEBUG 2022-02-08 17:11:33,956 dispatch pc=140, inst=BUILD_SLICE(arg=2, lineno=197)
DEBUG 2022-02-08 17:11:33,956 stack ['$kept_edges_nonzero132.62', '$A_nonzero134.63', '$const136.64', '$const138.65']
DEBUG 2022-02-08 17:11:33,956 dispatch pc=142, inst=LOAD_CONST(arg=0, lineno=197)
DEBUG 2022-02-08 17:11:33,956 stack ['$kept_edges_nonzero132.62', '$A_nonzero134.63', '$140build_slice.67']
DEBUG 2022-02-08 17:11:33,956 dispatch pc=144, inst=LOAD_FAST(arg=6, lineno=197)
DEBUG 2022-02-08 17:11:33,956 stack ['$kept_edges_nonzero132.62', '$A_nonzero134.63', '$140build_slice.67', '$const142.68']
DEBUG 2022-02-08 17:11:33,956 dispatch pc=146, inst=BUILD_SLICE(arg=2, lineno=197)
DEBUG 2022-02-08 17:11:33,956 stack ['$kept_edges_nonzero132.62', '$A_nonzero134.63', '$140build_slice.67', '$const142.68', '$n_nonzero_edges144.69']
DEBUG 2022-02-08 17:11:33,956 dispatch pc=148, inst=BUILD_TUPLE(arg=2, lineno=197)
DEBUG 2022-02-08 17:11:33,956 stack ['$kept_edges_nonzero132.62', '$A_nonzero134.63', '$140build_slice.67', '$146build_slice.71']
DEBUG 2022-02-08 17:11:33,956 dispatch pc=150, inst=BINARY_SUBSCR(arg=None, lineno=197)
DEBUG 2022-02-08 17:11:33,956 stack ['$kept_edges_nonzero132.62', '$A_nonzero134.63', '$148build_tuple.72']
DEBUG 2022-02-08 17:11:33,956 dispatch pc=152, inst=BINARY_MULTIPLY(arg=None, lineno=197)
DEBUG 2022-02-08 17:11:33,956 stack ['$kept_edges_nonzero132.62', '$150binary_subscr.73']
DEBUG 2022-02-08 17:11:33,956 dispatch pc=154, inst=LOAD_FAST(arg=9, lineno=197)
DEBUG 2022-02-08 17:11:33,956 stack ['$152binary_multiply.74']
DEBUG 2022-02-08 17:11:33,956 dispatch pc=156, inst=LOAD_CONST(arg=0, lineno=197)
DEBUG 2022-02-08 17:11:33,956 stack ['$152binary_multiply.74', '$AX_nonzero154.75']
DEBUG 2022-02-08 17:11:33,956 dispatch pc=158, inst=LOAD_CONST(arg=0, lineno=197)
DEBUG 2022-02-08 17:11:33,956 stack ['$152binary_multiply.74', '$AX_nonzero154.75', '$const156.76']
DEBUG 2022-02-08 17:11:33,956 dispatch pc=160, inst=BUILD_SLICE(arg=2, lineno=197)
DEBUG 2022-02-08 17:11:33,956 stack ['$152binary_multiply.74', '$AX_nonzero154.75', '$const156.76', '$const158.77']
DEBUG 2022-02-08 17:11:33,956 dispatch pc=162, inst=LOAD_FAST(arg=6, lineno=197)
DEBUG 2022-02-08 17:11:33,956 stack ['$152binary_multiply.74', '$AX_nonzero154.75', '$160build_slice.79']
DEBUG 2022-02-08 17:11:33,956 dispatch pc=164, inst=LOAD_CONST(arg=0, lineno=197)
DEBUG 2022-02-08 17:11:33,956 stack ['$152binary_multiply.74', '$AX_nonzero154.75', '$160build_slice.79', '$n_nonzero_edges162.80']
DEBUG 2022-02-08 17:11:33,956 dispatch pc=166, inst=BUILD_SLICE(arg=2, lineno=197)
DEBUG 2022-02-08 17:11:33,956 stack ['$152binary_multiply.74', '$AX_nonzero154.75', '$160build_slice.79', '$n_nonzero_edges162.80', '$const164.81']
DEBUG 2022-02-08 17:11:33,956 dispatch pc=168, inst=BUILD_TUPLE(arg=2, lineno=197)
DEBUG 2022-02-08 17:11:33,956 stack ['$152binary_multiply.74', '$AX_nonzero154.75', '$160build_slice.79', '$166build_slice.83']
DEBUG 2022-02-08 17:11:33,956 dispatch pc=170, inst=STORE_SUBSCR(arg=None, lineno=197)
DEBUG 2022-02-08 17:11:33,956 stack ['$152binary_multiply.74', '$AX_nonzero154.75', '$168build_tuple.84']
DEBUG 2022-02-08 17:11:33,956 dispatch pc=172, inst=LOAD_FAST(arg=2, lineno=199)
DEBUG 2022-02-08 17:11:33,956 stack []
DEBUG 2022-02-08 17:11:33,956 dispatch pc=174, inst=LOAD_FAST(arg=5, lineno=199)
DEBUG 2022-02-08 17:11:33,956 stack ['$D172.85']
DEBUG 2022-02-08 17:11:33,956 dispatch pc=176, inst=BINARY_SUBSCR(arg=None, lineno=199)
DEBUG 2022-02-08 17:11:33,956 stack ['$D172.85', '$nonzero_rows174.86']
DEBUG 2022-02-08 17:11:33,956 dispatch pc=178, inst=STORE_FAST(arg=10, lineno=199)
DEBUG 2022-02-08 17:11:33,956 stack ['$176binary_subscr.87']
DEBUG 2022-02-08 17:11:33,956 dispatch pc=180, inst=LOAD_GLOBAL(arg=0, lineno=201)
DEBUG 2022-02-08 17:11:33,956 stack []
DEBUG 2022-02-08 17:11:33,956 dispatch pc=182, inst=LOAD_ATTR(arg=5, lineno=201)
DEBUG 2022-02-08 17:11:33,956 stack ['$180load_global.88']
DEBUG 2022-02-08 17:11:33,956 dispatch pc=184, inst=LOAD_FAST(arg=10, lineno=201)
DEBUG 2022-02-08 17:11:33,956 stack ['$182load_attr.89']
DEBUG 2022-02-08 17:11:33,956 dispatch pc=186, inst=LOAD_GLOBAL(arg=0, lineno=201)
DEBUG 2022-02-08 17:11:33,956 stack ['$182load_attr.89', '$D_nonzero184.90']
DEBUG 2022-02-08 17:11:33,956 dispatch pc=188, inst=LOAD_ATTR(arg=6, lineno=201)
DEBUG 2022-02-08 17:11:33,956 stack ['$182load_attr.89', '$D_nonzero184.90', '$186load_global.91']
DEBUG 2022-02-08 17:11:33,956 dispatch pc=190, inst=LOAD_CONST(arg=3, lineno=201)
DEBUG 2022-02-08 17:11:33,956 stack ['$182load_attr.89', '$D_nonzero184.90', '$188load_attr.92']
DEBUG 2022-02-08 17:11:33,956 dispatch pc=192, inst=CALL_FUNCTION_KW(arg=2, lineno=201)
DEBUG 2022-02-08 17:11:33,956 stack ['$182load_attr.89', '$D_nonzero184.90', '$188load_attr.92', '$const190.93']
DEBUG 2022-02-08 17:11:33,956 dispatch pc=194, inst=STORE_FAST(arg=11, lineno=201)
DEBUG 2022-02-08 17:11:33,956 stack ['$192call_function_kw.94']
DEBUG 2022-02-08 17:11:33,956 dispatch pc=196, inst=LOAD_FAST(arg=7, lineno=202)
DEBUG 2022-02-08 17:11:33,956 stack []
DEBUG 2022-02-08 17:11:33,956 dispatch pc=198, inst=LOAD_FAST(arg=10, lineno=202)
DEBUG 2022-02-08 17:11:33,956 stack ['$kept_edges_nonzero196.95']
DEBUG 2022-02-08 17:11:33,956 dispatch pc=200, inst=LOAD_FAST(arg=6, lineno=202)
DEBUG 2022-02-08 17:11:33,956 stack ['$kept_edges_nonzero196.95', '$D_nonzero198.96']
DEBUG 2022-02-08 17:11:33,956 dispatch pc=202, inst=LOAD_CONST(arg=0, lineno=202)
DEBUG 2022-02-08 17:11:33,956 stack ['$kept_edges_nonzero196.95', '$D_nonzero198.96', '$n_nonzero_edges200.97']
DEBUG 2022-02-08 17:11:33,956 dispatch pc=204, inst=BUILD_SLICE(arg=2, lineno=202)
DEBUG 2022-02-08 17:11:33,956 stack ['$kept_edges_nonzero196.95', '$D_nonzero198.96', '$n_nonzero_edges200.97', '$const202.98']
DEBUG 2022-02-08 17:11:33,956 dispatch pc=206, inst=BINARY_SUBSCR(arg=None, lineno=202)
DEBUG 2022-02-08 17:11:33,956 stack ['$kept_edges_nonzero196.95', '$D_nonzero198.96', '$204build_slice.100']
DEBUG 2022-02-08 17:11:33,956 dispatch pc=208, inst=BINARY_MULTIPLY(arg=None, lineno=202)
DEBUG 2022-02-08 17:11:33,956 stack ['$kept_edges_nonzero196.95', '$206binary_subscr.101']
DEBUG 2022-02-08 17:11:33,956 dispatch pc=210, inst=LOAD_FAST(arg=11, lineno=202)
DEBUG 2022-02-08 17:11:33,956 stack ['$208binary_multiply.102']
DEBUG 2022-02-08 17:11:33,956 dispatch pc=212, inst=LOAD_CONST(arg=0, lineno=202)
DEBUG 2022-02-08 17:11:33,956 stack ['$208binary_multiply.102', '$XD_nonzero210.103']
DEBUG 2022-02-08 17:11:33,956 dispatch pc=214, inst=LOAD_FAST(arg=6, lineno=202)
DEBUG 2022-02-08 17:11:33,956 stack ['$208binary_multiply.102', '$XD_nonzero210.103', '$const212.104']
DEBUG 2022-02-08 17:11:33,956 dispatch pc=216, inst=BUILD_SLICE(arg=2, lineno=202)
DEBUG 2022-02-08 17:11:33,956 stack ['$208binary_multiply.102', '$XD_nonzero210.103', '$const212.104', '$n_nonzero_edges214.105']
DEBUG 2022-02-08 17:11:33,956 dispatch pc=218, inst=STORE_SUBSCR(arg=None, lineno=202)
DEBUG 2022-02-08 17:11:33,956 stack ['$208binary_multiply.102', '$XD_nonzero210.103', '$216build_slice.107']
DEBUG 2022-02-08 17:11:33,956 dispatch pc=220, inst=LOAD_FAST(arg=7, lineno=203)
DEBUG 2022-02-08 17:11:33,956 stack []
DEBUG 2022-02-08 17:11:33,956 dispatch pc=222, inst=LOAD_FAST(arg=10, lineno=203)
DEBUG 2022-02-08 17:11:33,956 stack ['$kept_edges_nonzero220.108']
DEBUG 2022-02-08 17:11:33,956 dispatch pc=224, inst=LOAD_CONST(arg=0, lineno=203)
DEBUG 2022-02-08 17:11:33,956 stack ['$kept_edges_nonzero220.108', '$D_nonzero222.109']
DEBUG 2022-02-08 17:11:33,956 dispatch pc=226, inst=LOAD_FAST(arg=6, lineno=203)
DEBUG 2022-02-08 17:11:33,956 stack ['$kept_edges_nonzero220.108', '$D_nonzero222.109', '$const224.110']
DEBUG 2022-02-08 17:11:33,956 dispatch pc=228, inst=BUILD_SLICE(arg=2, lineno=203)
DEBUG 2022-02-08 17:11:33,956 stack ['$kept_edges_nonzero220.108', '$D_nonzero222.109', '$const224.110', '$n_nonzero_edges226.111']
DEBUG 2022-02-08 17:11:33,956 dispatch pc=230, inst=BINARY_SUBSCR(arg=None, lineno=203)
DEBUG 2022-02-08 17:11:33,956 stack ['$kept_edges_nonzero220.108', '$D_nonzero222.109', '$228build_slice.113']
DEBUG 2022-02-08 17:11:33,956 dispatch pc=232, inst=BINARY_MULTIPLY(arg=None, lineno=203)
DEBUG 2022-02-08 17:11:33,971 stack ['$kept_edges_nonzero220.108', '$230binary_subscr.114']
DEBUG 2022-02-08 17:11:33,971 dispatch pc=234, inst=LOAD_FAST(arg=11, lineno=203)
DEBUG 2022-02-08 17:11:33,971 stack ['$232binary_multiply.115']
DEBUG 2022-02-08 17:11:33,971 dispatch pc=236, inst=LOAD_FAST(arg=6, lineno=203)
DEBUG 2022-02-08 17:11:33,971 stack ['$232binary_multiply.115', '$XD_nonzero234.116']
DEBUG 2022-02-08 17:11:33,971 dispatch pc=238, inst=LOAD_CONST(arg=0, lineno=203)
DEBUG 2022-02-08 17:11:33,971 stack ['$232binary_multiply.115', '$XD_nonzero234.116', '$n_nonzero_edges236.117']
DEBUG 2022-02-08 17:11:33,971 dispatch pc=240, inst=BUILD_SLICE(arg=2, lineno=203)
DEBUG 2022-02-08 17:11:33,971 stack ['$232binary_multiply.115', '$XD_nonzero234.116', '$n_nonzero_edges236.117', '$const238.118']
DEBUG 2022-02-08 17:11:33,971 dispatch pc=242, inst=STORE_SUBSCR(arg=None, lineno=203)
DEBUG 2022-02-08 17:11:33,971 stack ['$232binary_multiply.115', '$XD_nonzero234.116', '$240build_slice.120']
DEBUG 2022-02-08 17:11:33,971 dispatch pc=244, inst=LOAD_FAST(arg=3, lineno=205)
DEBUG 2022-02-08 17:11:33,971 stack []
DEBUG 2022-02-08 17:11:33,971 dispatch pc=246, inst=LOAD_CONST(arg=0, lineno=205)
DEBUG 2022-02-08 17:11:33,971 stack ['$oddV244.121']
DEBUG 2022-02-08 17:11:33,971 dispatch pc=248, inst=IS_OP(arg=1, lineno=205)
DEBUG 2022-02-08 17:11:33,971 stack ['$oddV244.121', '$const246.122']
DEBUG 2022-02-08 17:11:33,971 dispatch pc=250, inst=POP_JUMP_IF_FALSE(arg=328, lineno=205)
DEBUG 2022-02-08 17:11:33,971 stack ['$248is_op.123']
DEBUG 2022-02-08 17:11:33,971 end state. edges=[Edge(pc=254, stack=(), blockstack=(), npush=0), Edge(pc=328, stack=(), blockstack=(), npush=0)]
DEBUG 2022-02-08 17:11:33,971 pending: deque([State(pc_initial=254 nstack_initial=0), State(pc_initial=328 nstack_initial=0)])
DEBUG 2022-02-08 17:11:33,971 stack: []
DEBUG 2022-02-08 17:11:33,971 dispatch pc=254, inst=LOAD_FAST(arg=3, lineno=206)
DEBUG 2022-02-08 17:11:33,971 stack []
DEBUG 2022-02-08 17:11:33,971 dispatch pc=256, inst=LOAD_FAST(arg=5, lineno=206)
DEBUG 2022-02-08 17:11:33,971 stack ['$oddV254.0']
DEBUG 2022-02-08 17:11:33,971 dispatch pc=258, inst=BINARY_SUBSCR(arg=None, lineno=206)
DEBUG 2022-02-08 17:11:33,971 stack ['$oddV254.0', '$nonzero_rows256.1']
DEBUG 2022-02-08 17:11:33,971 dispatch pc=260, inst=STORE_FAST(arg=12, lineno=206)
DEBUG 2022-02-08 17:11:33,971 stack ['$258binary_subscr.2']
DEBUG 2022-02-08 17:11:33,971 dispatch pc=262, inst=LOAD_GLOBAL(arg=0, lineno=207)
DEBUG 2022-02-08 17:11:33,971 stack []
DEBUG 2022-02-08 17:11:33,971 dispatch pc=264, inst=LOAD_ATTR(arg=5, lineno=207)
DEBUG 2022-02-08 17:11:33,971 stack ['$262load_global.3']
DEBUG 2022-02-08 17:11:33,971 dispatch pc=266, inst=LOAD_FAST(arg=12, lineno=207)
DEBUG 2022-02-08 17:11:33,971 stack ['$264load_attr.4']
DEBUG 2022-02-08 17:11:33,971 dispatch pc=268, inst=LOAD_GLOBAL(arg=0, lineno=207)
DEBUG 2022-02-08 17:11:33,971 stack ['$264load_attr.4', '$oddV_nonzero266.5']
DEBUG 2022-02-08 17:11:33,971 dispatch pc=270, inst=LOAD_ATTR(arg=6, lineno=207)
DEBUG 2022-02-08 17:11:33,971 stack ['$264load_attr.4', '$oddV_nonzero266.5', '$268load_global.6']
DEBUG 2022-02-08 17:11:33,971 dispatch pc=272, inst=LOAD_CONST(arg=3, lineno=207)
DEBUG 2022-02-08 17:11:33,971 stack ['$264load_attr.4', '$oddV_nonzero266.5', '$270load_attr.7']
DEBUG 2022-02-08 17:11:33,971 dispatch pc=274, inst=CALL_FUNCTION_KW(arg=2, lineno=207)
DEBUG 2022-02-08 17:11:33,971 stack ['$264load_attr.4', '$oddV_nonzero266.5', '$270load_attr.7', '$const272.8']
DEBUG 2022-02-08 17:11:33,971 dispatch pc=276, inst=STORE_FAST(arg=13, lineno=207)
DEBUG 2022-02-08 17:11:33,971 stack ['$274call_function_kw.9']
DEBUG 2022-02-08 17:11:33,971 dispatch pc=278, inst=LOAD_FAST(arg=7, lineno=208)
DEBUG 2022-02-08 17:11:33,971 stack []
DEBUG 2022-02-08 17:11:33,971 dispatch pc=280, inst=LOAD_FAST(arg=12, lineno=208)
DEBUG 2022-02-08 17:11:33,971 stack ['$kept_edges_nonzero278.10']
DEBUG 2022-02-08 17:11:33,971 dispatch pc=282, inst=LOAD_FAST(arg=6, lineno=208)
DEBUG 2022-02-08 17:11:33,971 stack ['$kept_edges_nonzero278.10', '$oddV_nonzero280.11']
DEBUG 2022-02-08 17:11:33,971 dispatch pc=284, inst=LOAD_CONST(arg=0, lineno=208)
DEBUG 2022-02-08 17:11:33,971 stack ['$kept_edges_nonzero278.10', '$oddV_nonzero280.11', '$n_nonzero_edges282.12']
DEBUG 2022-02-08 17:11:33,971 dispatch pc=286, inst=BUILD_SLICE(arg=2, lineno=208)
DEBUG 2022-02-08 17:11:33,971 stack ['$kept_edges_nonzero278.10', '$oddV_nonzero280.11', '$n_nonzero_edges282.12', '$const284.13']
DEBUG 2022-02-08 17:11:33,971 dispatch pc=288, inst=BINARY_SUBSCR(arg=None, lineno=208)
DEBUG 2022-02-08 17:11:33,971 stack ['$kept_edges_nonzero278.10', '$oddV_nonzero280.11', '$286build_slice.15']
DEBUG 2022-02-08 17:11:33,971 dispatch pc=290, inst=BINARY_MULTIPLY(arg=None, lineno=208)
DEBUG 2022-02-08 17:11:33,971 stack ['$kept_edges_nonzero278.10', '$288binary_subscr.16']
DEBUG 2022-02-08 17:11:33,971 dispatch pc=292, inst=LOAD_FAST(arg=13, lineno=208)
DEBUG 2022-02-08 17:11:33,971 stack ['$290binary_multiply.17']
DEBUG 2022-02-08 17:11:33,971 dispatch pc=294, inst=LOAD_CONST(arg=0, lineno=208)
DEBUG 2022-02-08 17:11:33,971 stack ['$290binary_multiply.17', '$oddVX_nonzero292.18']
DEBUG 2022-02-08 17:11:33,971 dispatch pc=296, inst=LOAD_FAST(arg=6, lineno=208)
DEBUG 2022-02-08 17:11:33,971 stack ['$290binary_multiply.17', '$oddVX_nonzero292.18', '$const294.19']
DEBUG 2022-02-08 17:11:33,971 dispatch pc=298, inst=BUILD_SLICE(arg=2, lineno=208)
DEBUG 2022-02-08 17:11:33,971 stack ['$290binary_multiply.17', '$oddVX_nonzero292.18', '$const294.19', '$n_nonzero_edges296.20']
DEBUG 2022-02-08 17:11:33,971 dispatch pc=300, inst=STORE_SUBSCR(arg=None, lineno=208)
DEBUG 2022-02-08 17:11:33,971 stack ['$290binary_multiply.17', '$oddVX_nonzero292.18', '$298build_slice.22']
DEBUG 2022-02-08 17:11:33,971 dispatch pc=302, inst=LOAD_FAST(arg=7, lineno=209)
DEBUG 2022-02-08 17:11:33,971 stack []
DEBUG 2022-02-08 17:11:33,971 dispatch pc=304, inst=LOAD_FAST(arg=12, lineno=209)
DEBUG 2022-02-08 17:11:33,971 stack ['$kept_edges_nonzero302.23']
DEBUG 2022-02-08 17:11:33,971 dispatch pc=306, inst=LOAD_CONST(arg=0, lineno=209)
DEBUG 2022-02-08 17:11:33,971 stack ['$kept_edges_nonzero302.23', '$oddV_nonzero304.24']
DEBUG 2022-02-08 17:11:33,971 dispatch pc=308, inst=LOAD_FAST(arg=6, lineno=209)
DEBUG 2022-02-08 17:11:33,971 stack ['$kept_edges_nonzero302.23', '$oddV_nonzero304.24', '$const306.25']
DEBUG 2022-02-08 17:11:33,971 dispatch pc=310, inst=BUILD_SLICE(arg=2, lineno=209)
DEBUG 2022-02-08 17:11:33,971 stack ['$kept_edges_nonzero302.23', '$oddV_nonzero304.24', '$const306.25', '$n_nonzero_edges308.26']
DEBUG 2022-02-08 17:11:33,971 dispatch pc=312, inst=BINARY_SUBSCR(arg=None, lineno=209)
DEBUG 2022-02-08 17:11:33,971 stack ['$kept_edges_nonzero302.23', '$oddV_nonzero304.24', '$310build_slice.28']
DEBUG 2022-02-08 17:11:33,971 dispatch pc=314, inst=BINARY_MULTIPLY(arg=None, lineno=209)
DEBUG 2022-02-08 17:11:33,971 stack ['$kept_edges_nonzero302.23', '$312binary_subscr.29']
DEBUG 2022-02-08 17:11:33,971 dispatch pc=316, inst=LOAD_FAST(arg=13, lineno=209)
DEBUG 2022-02-08 17:11:33,971 stack ['$314binary_multiply.30']
DEBUG 2022-02-08 17:11:33,971 dispatch pc=318, inst=LOAD_FAST(arg=6, lineno=209)
DEBUG 2022-02-08 17:11:33,971 stack ['$314binary_multiply.30', '$oddVX_nonzero316.31']
DEBUG 2022-02-08 17:11:33,971 dispatch pc=320, inst=LOAD_CONST(arg=0, lineno=209)
DEBUG 2022-02-08 17:11:33,971 stack ['$314binary_multiply.30', '$oddVX_nonzero316.31', '$n_nonzero_edges318.32']
DEBUG 2022-02-08 17:11:33,971 dispatch pc=322, inst=BUILD_SLICE(arg=2, lineno=209)
DEBUG 2022-02-08 17:11:33,971 stack ['$314binary_multiply.30', '$oddVX_nonzero316.31', '$n_nonzero_edges318.32', '$const320.33']
DEBUG 2022-02-08 17:11:33,971 dispatch pc=324, inst=STORE_SUBSCR(arg=None, lineno=209)
DEBUG 2022-02-08 17:11:33,971 stack ['$314binary_multiply.30', '$oddVX_nonzero316.31', '$322build_slice.35']
DEBUG 2022-02-08 17:11:33,971 dispatch pc=326, inst=JUMP_FORWARD(arg=4, lineno=209)
DEBUG 2022-02-08 17:11:33,971 stack []
DEBUG 2022-02-08 17:11:33,971 end state. edges=[Edge(pc=332, stack=(), blockstack=(), npush=0)]
DEBUG 2022-02-08 17:11:33,971 pending: deque([State(pc_initial=328 nstack_initial=0), State(pc_initial=332 nstack_initial=0)])
DEBUG 2022-02-08 17:11:33,971 stack: []
DEBUG 2022-02-08 17:11:33,971 dispatch pc=328, inst=LOAD_CONST(arg=0, lineno=211)
DEBUG 2022-02-08 17:11:33,971 stack []
DEBUG 2022-02-08 17:11:33,971 dispatch pc=330, inst=STORE_FAST(arg=13, lineno=211)
DEBUG 2022-02-08 17:11:33,971 stack ['$const328.0']
DEBUG 2022-02-08 17:11:33,987 end state. edges=[Edge(pc=332, stack=(), blockstack=(), npush=0)]
DEBUG 2022-02-08 17:11:33,987 pending: deque([State(pc_initial=332 nstack_initial=0), State(pc_initial=332 nstack_initial=0)])
DEBUG 2022-02-08 17:11:33,987 stack: []
DEBUG 2022-02-08 17:11:33,987 dispatch pc=332, inst=LOAD_FAST(arg=9, lineno=213)
DEBUG 2022-02-08 17:11:33,987 stack []
DEBUG 2022-02-08 17:11:33,987 dispatch pc=334, inst=LOAD_FAST(arg=11, lineno=213)
DEBUG 2022-02-08 17:11:33,987 stack ['$AX_nonzero332.0']
DEBUG 2022-02-08 17:11:33,987 dispatch pc=336, inst=LOAD_FAST(arg=10, lineno=213)
DEBUG 2022-02-08 17:11:33,987 stack ['$AX_nonzero332.0', '$XD_nonzero334.1']
DEBUG 2022-02-08 17:11:33,987 dispatch pc=338, inst=LOAD_FAST(arg=13, lineno=213)
DEBUG 2022-02-08 17:11:33,987 stack ['$AX_nonzero332.0', '$XD_nonzero334.1', '$D_nonzero336.2']
DEBUG 2022-02-08 17:11:33,987 dispatch pc=340, inst=BUILD_TUPLE(arg=4, lineno=213)
DEBUG 2022-02-08 17:11:33,987 stack ['$AX_nonzero332.0', '$XD_nonzero334.1', '$D_nonzero336.2', '$oddVX_nonzero338.3']
DEBUG 2022-02-08 17:11:33,987 dispatch pc=342, inst=RETURN_VALUE(arg=None, lineno=213)
DEBUG 2022-02-08 17:11:33,987 stack ['$340build_tuple.4']
DEBUG 2022-02-08 17:11:33,987 end state. edges=[]
DEBUG 2022-02-08 17:11:33,987 pending: deque([State(pc_initial=332 nstack_initial=0)])
DEBUG 2022-02-08 17:11:33,987 -------------------------Prune PHIs-------------------------
DEBUG 2022-02-08 17:11:33,987 Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=254 nstack_initial=0): set(),
             State(pc_initial=328 nstack_initial=0): set(),
             State(pc_initial=332 nstack_initial=0): set()})
DEBUG 2022-02-08 17:11:33,987 defmap: {}
DEBUG 2022-02-08 17:11:33,987 phismap: defaultdict(<class 'set'>, {})
DEBUG 2022-02-08 17:11:33,987 changing phismap: defaultdict(<class 'set'>, {})
DEBUG 2022-02-08 17:11:33,987 keep phismap: {}
DEBUG 2022-02-08 17:11:33,987 new_out: defaultdict(<class 'dict'>, {})
DEBUG 2022-02-08 17:11:33,987 ----------------------DONE Prune PHIs-----------------------
DEBUG 2022-02-08 17:11:33,987 block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$2load_global.0'}), (4, {'item': '$2load_global.0', 'res': '$4load_method.1'}), (6, {'res': '$kept_edges6.2'}), (8, {'res': '$kept_edges8.3'}), (10, {'items': ['$kept_edges6.2', '$kept_edges8.3'], 'res': '$10build_tuple.4'}), (12, {'func': '$4load_method.1', 'args': ['$10build_tuple.4'], 'res': '$12call_method.5'}), (14, {'value': '$12call_method.5'}), (16, {'res': '$16load_global.6'}), (18, {'item': '$16load_global.6', 'res': '$18load_method.7'}), (20, {'res': '$z20.8'}), (22, {'res': '$const22.9'}), (24, {'lhs': '$z20.8', 'rhs': '$const22.9', 'res': '$24compare_op.10'}), (26, {'func': '$18load_method.7', 'args': ['$24compare_op.10'], 'res': '$26call_method.11'}), (28, {'res': '$const28.12'}), (30, {'index': '$const28.12', 'target': '$26call_method.11', 'res': '$30binary_subscr.13'}), (32, {'value': '$30binary_subscr.13'}), (34, {'res': '$34load_global.14'}), (36, {'res': '$nonzero_rows36.15'}), (38, {'func': '$34load_global.14', 'args': ['$nonzero_rows36.15'], 'res': '$38call_function.16'}), (40, {'res': '$const40.17'}), (42, {'lhs': '$38call_function.16', 'rhs': '$const40.17', 'res': '$42binary_floor_divide.18'}), (44, {'value': '$42binary_floor_divide.18'}), (46, {'res': '$kept_edges46.19'}), (48, {'res': '$48load_global.20'}), (50, {'item': '$48load_global.20', 'res': '$50load_method.21'}), (52, {'res': '$kept_edges52.22'}), (54, {'res': '$const54.23'}), (56, {'lhs': '$kept_edges52.22', 'rhs': '$const54.23', 'res': '$56compare_op.24'}), (58, {'func': '$50load_method.21', 'args': ['$56compare_op.24'], 'res': '$58call_method.25'}), (60, {'index': '$58call_method.25', 'target': '$kept_edges46.19', 'res': '$60binary_subscr.26'}), (62, {'value': '$60binary_subscr.26'}), (64, {'res': '$64load_global.27'}), (66, {'res': '$A66.28'}), (68, {'res': '$nonzero_rows68.29'}), (70, {'res': '$nonzero_rows70.30'}), (72, {'func': '$64load_global.27', 'args': ['$A66.28', '$nonzero_rows68.29', '$nonzero_rows70.30'], 'res': '$72call_function.31'}), (74, {'value': '$72call_function.31'}), (76, {'res': '$76load_global.32'}), (78, {'item': '$76load_global.32', 'res': '$78load_attr.33'}), (80, {'res': '$A_nonzero80.34'}), (82, {'res': '$82load_global.35'}), (84, {'item': '$82load_global.35', 'res': '$84load_attr.36'}), (86, {'res': '$const86.37'}), (88, {'func': '$78load_attr.33', 'args': ['$A_nonzero80.34', '$84load_attr.36'], 'names': '$const86.37', 'res': '$88call_function_kw.38'}), (90, {'value': '$88call_function_kw.38'}), (92, {'res': '$kept_edges_nonzero92.39'}), (94, {'res': '$A_nonzero94.40'}), (96, {'res': '$const96.41'}), (98, {'res': '$const98.42'}), (100, {'start': '$const96.41', 'stop': '$const98.42', 'step': None, 'res': '$100build_slice.44', 'slicevar': '$100build_slice.43'}), (102, {'res': '$n_nonzero_edges102.45'}), (104, {'res': '$const104.46'}), (106, {'start': '$n_nonzero_edges102.45', 'stop': '$const104.46', 'step': None, 'res': '$106build_slice.48', 'slicevar': '$106build_slice.47'}), (108, {'items': ['$100build_slice.44', '$106build_slice.48'], 'res': '$108build_tuple.49'}), (110, {'index': '$108build_tuple.49', 'target': '$A_nonzero94.40', 'res': '$110binary_subscr.50'}), (112, {'lhs': '$kept_edges_nonzero92.39', 'rhs': '$110binary_subscr.50', 'res': '$112binary_multiply.51'}), (114, {'res': '$AX_nonzero114.52'}), (116, {'res': '$const116.53'}), (118, {'res': '$const118.54'}), (120, {'start': '$const116.53', 'stop': '$const118.54', 'step': None, 'res': '$120build_slice.56', 'slicevar': '$120build_slice.55'}), (122, {'res': '$const122.57'}), (124, {'res': '$n_nonzero_edges124.58'}), (126, {'start': '$const122.57', 'stop': '$n_nonzero_edges124.58', 'step': None, 'res': '$126build_slice.60', 'slicevar': '$126build_slice.59'}), (128, {'items': ['$120build_slice.56', '$126build_slice.60'], 'res': '$128build_tuple.61'}), (130, {'target': '$AX_nonzero114.52', 'index': '$128build_tuple.61', 'value': '$112binary_multiply.51'}), (132, {'res': '$kept_edges_nonzero132.62'}), (134, {'res': '$A_nonzero134.63'}), (136, {'res': '$const136.64'}), (138, {'res': '$const138.65'}), (140, {'start': '$const136.64', 'stop': '$const138.65', 'step': None, 'res': '$140build_slice.67', 'slicevar': '$140build_slice.66'}), (142, {'res': '$const142.68'}), (144, {'res': '$n_nonzero_edges144.69'}), (146, {'start': '$const142.68', 'stop': '$n_nonzero_edges144.69', 'step': None, 'res': '$146build_slice.71', 'slicevar': '$146build_slice.70'}), (148, {'items': ['$140build_slice.67', '$146build_slice.71'], 'res': '$148build_tuple.72'}), (150, {'index': '$148build_tuple.72', 'target': '$A_nonzero134.63', 'res': '$150binary_subscr.73'}), (152, {'lhs': '$kept_edges_nonzero132.62', 'rhs': '$150binary_subscr.73', 'res': '$152binary_multiply.74'}), (154, {'res': '$AX_nonzero154.75'}), (156, {'res': '$const156.76'}), (158, {'res': '$const158.77'}), (160, {'start': '$const156.76', 'stop': '$const158.77', 'step': None, 'res': '$160build_slice.79', 'slicevar': '$160build_slice.78'}), (162, {'res': '$n_nonzero_edges162.80'}), (164, {'res': '$const164.81'}), (166, {'start': '$n_nonzero_edges162.80', 'stop': '$const164.81', 'step': None, 'res': '$166build_slice.83', 'slicevar': '$166build_slice.82'}), (168, {'items': ['$160build_slice.79', '$166build_slice.83'], 'res': '$168build_tuple.84'}), (170, {'target': '$AX_nonzero154.75', 'index': '$168build_tuple.84', 'value': '$152binary_multiply.74'}), (172, {'res': '$D172.85'}), (174, {'res': '$nonzero_rows174.86'}), (176, {'index': '$nonzero_rows174.86', 'target': '$D172.85', 'res': '$176binary_subscr.87'}), (178, {'value': '$176binary_subscr.87'}), (180, {'res': '$180load_global.88'}), (182, {'item': '$180load_global.88', 'res': '$182load_attr.89'}), (184, {'res': '$D_nonzero184.90'}), (186, {'res': '$186load_global.91'}), (188, {'item': '$186load_global.91', 'res': '$188load_attr.92'}), (190, {'res': '$const190.93'}), (192, {'func': '$182load_attr.89', 'args': ['$D_nonzero184.90', '$188load_attr.92'], 'names': '$const190.93', 'res': '$192call_function_kw.94'}), (194, {'value': '$192call_function_kw.94'}), (196, {'res': '$kept_edges_nonzero196.95'}), (198, {'res': '$D_nonzero198.96'}), (200, {'res': '$n_nonzero_edges200.97'}), (202, {'res': '$const202.98'}), (204, {'start': '$n_nonzero_edges200.97', 'stop': '$const202.98', 'step': None, 'res': '$204build_slice.100', 'slicevar': '$204build_slice.99'}), (206, {'index': '$204build_slice.100', 'target': '$D_nonzero198.96', 'res': '$206binary_subscr.101'}), (208, {'lhs': '$kept_edges_nonzero196.95', 'rhs': '$206binary_subscr.101', 'res': '$208binary_multiply.102'}), (210, {'res': '$XD_nonzero210.103'}), (212, {'res': '$const212.104'}), (214, {'res': '$n_nonzero_edges214.105'}), (216, {'start': '$const212.104', 'stop': '$n_nonzero_edges214.105', 'step': None, 'res': '$216build_slice.107', 'slicevar': '$216build_slice.106'}), (218, {'target': '$XD_nonzero210.103', 'index': '$216build_slice.107', 'value': '$208binary_multiply.102'}), (220, {'res': '$kept_edges_nonzero220.108'}), (222, {'res': '$D_nonzero222.109'}), (224, {'res': '$const224.110'}), (226, {'res': '$n_nonzero_edges226.111'}), (228, {'start': '$const224.110', 'stop': '$n_nonzero_edges226.111', 'step': None, 'res': '$228build_slice.113', 'slicevar': '$228build_slice.112'}), (230, {'index': '$228build_slice.113', 'target': '$D_nonzero222.109', 'res': '$230binary_subscr.114'}), (232, {'lhs': '$kept_edges_nonzero220.108', 'rhs': '$230binary_subscr.114', 'res': '$232binary_multiply.115'}), (234, {'res': '$XD_nonzero234.116'}), (236, {'res': '$n_nonzero_edges236.117'}), (238, {'res': '$const238.118'}), (240, {'start': '$n_nonzero_edges236.117', 'stop': '$const238.118', 'step': None, 'res': '$240build_slice.120', 'slicevar': '$240build_slice.119'}), (242, {'target': '$XD_nonzero234.116', 'index': '$240build_slice.120', 'value': '$232binary_multiply.115'}), (244, {'res': '$oddV244.121'}), (246, {'res': '$const246.122'}), (248, {'lhs': '$oddV244.121', 'rhs': '$const246.122', 'res': '$248is_op.123'}), (250, {'pred': '$248is_op.123'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={254: (), 328: ()})
DEBUG 2022-02-08 17:11:33,987 block_infos State(pc_initial=254 nstack_initial=0):
AdaptBlockInfo(insts=((254, {'res': '$oddV254.0'}), (256, {'res': '$nonzero_rows256.1'}), (258, {'index': '$nonzero_rows256.1', 'target': '$oddV254.0', 'res': '$258binary_subscr.2'}), (260, {'value': '$258binary_subscr.2'}), (262, {'res': '$262load_global.3'}), (264, {'item': '$262load_global.3', 'res': '$264load_attr.4'}), (266, {'res': '$oddV_nonzero266.5'}), (268, {'res': '$268load_global.6'}), (270, {'item': '$268load_global.6', 'res': '$270load_attr.7'}), (272, {'res': '$const272.8'}), (274, {'func': '$264load_attr.4', 'args': ['$oddV_nonzero266.5', '$270load_attr.7'], 'names': '$const272.8', 'res': '$274call_function_kw.9'}), (276, {'value': '$274call_function_kw.9'}), (278, {'res': '$kept_edges_nonzero278.10'}), (280, {'res': '$oddV_nonzero280.11'}), (282, {'res': '$n_nonzero_edges282.12'}), (284, {'res': '$const284.13'}), (286, {'start': '$n_nonzero_edges282.12', 'stop': '$const284.13', 'step': None, 'res': '$286build_slice.15', 'slicevar': '$286build_slice.14'}), (288, {'index': '$286build_slice.15', 'target': '$oddV_nonzero280.11', 'res': '$288binary_subscr.16'}), (290, {'lhs': '$kept_edges_nonzero278.10', 'rhs': '$288binary_subscr.16', 'res': '$290binary_multiply.17'}), (292, {'res': '$oddVX_nonzero292.18'}), (294, {'res': '$const294.19'}), (296, {'res': '$n_nonzero_edges296.20'}), (298, {'start': '$const294.19', 'stop': '$n_nonzero_edges296.20', 'step': None, 'res': '$298build_slice.22', 'slicevar': '$298build_slice.21'}), (300, {'target': '$oddVX_nonzero292.18', 'index': '$298build_slice.22', 'value': '$290binary_multiply.17'}), (302, {'res': '$kept_edges_nonzero302.23'}), (304, {'res': '$oddV_nonzero304.24'}), (306, {'res': '$const306.25'}), (308, {'res': '$n_nonzero_edges308.26'}), (310, {'start': '$const306.25', 'stop': '$n_nonzero_edges308.26', 'step': None, 'res': '$310build_slice.28', 'slicevar': '$310build_slice.27'}), (312, {'index': '$310build_slice.28', 'target': '$oddV_nonzero304.24', 'res': '$312binary_subscr.29'}), (314, {'lhs': '$kept_edges_nonzero302.23', 'rhs': '$312binary_subscr.29', 'res': '$314binary_multiply.30'}), (316, {'res': '$oddVX_nonzero316.31'}), (318, {'res': '$n_nonzero_edges318.32'}), (320, {'res': '$const320.33'}), (322, {'start': '$n_nonzero_edges318.32', 'stop': '$const320.33', 'step': None, 'res': '$322build_slice.35', 'slicevar': '$322build_slice.34'}), (324, {'target': '$oddVX_nonzero316.31', 'index': '$322build_slice.35', 'value': '$314binary_multiply.30'}), (326, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={332: ()})
DEBUG 2022-02-08 17:11:33,987 block_infos State(pc_initial=328 nstack_initial=0):
AdaptBlockInfo(insts=((328, {'res': '$const328.0'}), (330, {'value': '$const328.0'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={332: ()})
DEBUG 2022-02-08 17:11:33,987 block_infos State(pc_initial=332 nstack_initial=0):
AdaptBlockInfo(insts=((332, {'res': '$AX_nonzero332.0'}), (334, {'res': '$XD_nonzero334.1'}), (336, {'res': '$D_nonzero336.2'}), (338, {'res': '$oddVX_nonzero338.3'}), (340, {'items': ['$AX_nonzero332.0', '$XD_nonzero334.1', '$D_nonzero336.2', '$oddVX_nonzero338.3'], 'res': '$340build_tuple.4'}), (342, {'retval': '$340build_tuple.4', 'castval': '$342return_value.5'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG 2022-02-08 17:11:33,987 label 0:
    kept_edges = arg(0, name=kept_edges)     ['kept_edges']
    A = arg(1, name=A)                       ['A']
    D = arg(2, name=D)                       ['D']
    oddV = arg(3, name=oddV)                 ['oddV']
    $2load_global.0 = global(np: <module 'numpy' from 'C:\\Users\\zl4821\\Anaconda3\\envs\\GBS\\lib\\site-packages\\numpy\\__init__.py'>) ['$2load_global.0']
    $4load_method.1 = getattr(value=$2load_global.0, attr=concatenate) ['$2load_global.0', '$4load_method.1']
    $10build_tuple.4 = build_tuple(items=[Var(kept_edges, _loop_hafnian_subroutines.py:187), Var(kept_edges, _loop_hafnian_subroutines.py:187)]) ['$10build_tuple.4', 'kept_edges', 'kept_edges']
    z = call $4load_method.1($10build_tuple.4, func=$4load_method.1, args=[Var($10build_tuple.4, _loop_hafnian_subroutines.py:187)], kws=(), vararg=None, target=None) ['$10build_tuple.4', '$4load_method.1', 'z']
    $16load_global.6 = global(np: <module 'numpy' from 'C:\\Users\\zl4821\\Anaconda3\\envs\\GBS\\lib\\site-packages\\numpy\\__init__.py'>) ['$16load_global.6']
    $18load_method.7 = getattr(value=$16load_global.6, attr=where) ['$16load_global.6', '$18load_method.7']
    $const22.9 = const(int, 0)               ['$const22.9']
    $24compare_op.10 = z != $const22.9       ['$24compare_op.10', '$const22.9', 'z']
    $26call_method.11 = call $18load_method.7($24compare_op.10, func=$18load_method.7, args=[Var($24compare_op.10, _loop_hafnian_subroutines.py:188)], kws=(), vararg=None, target=None) ['$18load_method.7', '$24compare_op.10', '$26call_method.11']
    $const28.12 = const(int, 0)              ['$const28.12']
    nonzero_rows = getitem(value=$26call_method.11, index=$const28.12, fn=<built-in function getitem>) ['$26call_method.11', '$const28.12', 'nonzero_rows']
    $34load_global.14 = global(len: <built-in function len>) ['$34load_global.14']
    $38call_function.16 = call $34load_global.14(nonzero_rows, func=$34load_global.14, args=[Var(nonzero_rows, _loop_hafnian_subroutines.py:188)], kws=(), vararg=None, target=None) ['$34load_global.14', '$38call_function.16', 'nonzero_rows']
    $const40.17 = const(int, 2)              ['$const40.17']
    n_nonzero_edges = $38call_function.16 // $const40.17 ['$38call_function.16', '$const40.17', 'n_nonzero_edges']
    $48load_global.20 = global(np: <module 'numpy' from 'C:\\Users\\zl4821\\Anaconda3\\envs\\GBS\\lib\\site-packages\\numpy\\__init__.py'>) ['$48load_global.20']
    $50load_method.21 = getattr(value=$48load_global.20, attr=where) ['$48load_global.20', '$50load_method.21']
    $const54.23 = const(int, 0)              ['$const54.23']
    $56compare_op.24 = kept_edges != $const54.23 ['$56compare_op.24', '$const54.23', 'kept_edges']
    $58call_method.25 = call $50load_method.21($56compare_op.24, func=$50load_method.21, args=[Var($56compare_op.24, _loop_hafnian_subroutines.py:191)], kws=(), vararg=None, target=None) ['$50load_method.21', '$56compare_op.24', '$58call_method.25']
    kept_edges_nonzero = getitem(value=kept_edges, index=$58call_method.25, fn=<built-in function getitem>) ['$58call_method.25', 'kept_edges', 'kept_edges_nonzero']
    $64load_global.27 = global(nb_ix: CPUDispatcher(<function nb_ix at 0x000001E9ECB30310>)) ['$64load_global.27']
    A_nonzero = call $64load_global.27(A, nonzero_rows, nonzero_rows, func=$64load_global.27, args=[Var(A, _loop_hafnian_subroutines.py:187), Var(nonzero_rows, _loop_hafnian_subroutines.py:188), Var(nonzero_rows, _loop_hafnian_subroutines.py:188)], kws=(), vararg=None, target=None) ['$64load_global.27', 'A', 'A_nonzero', 'nonzero_rows', 'nonzero_rows']
    $76load_global.32 = global(np: <module 'numpy' from 'C:\\Users\\zl4821\\Anaconda3\\envs\\GBS\\lib\\site-packages\\numpy\\__init__.py'>) ['$76load_global.32']
    $78load_attr.33 = getattr(value=$76load_global.32, attr=empty_like) ['$76load_global.32', '$78load_attr.33']
    $82load_global.35 = global(np: <module 'numpy' from 'C:\\Users\\zl4821\\Anaconda3\\envs\\GBS\\lib\\site-packages\\numpy\\__init__.py'>) ['$82load_global.35']
    $84load_attr.36 = getattr(value=$82load_global.35, attr=complex128) ['$82load_global.35', '$84load_attr.36']
    AX_nonzero = call $78load_attr.33(A_nonzero, func=$78load_attr.33, args=[Var(A_nonzero, _loop_hafnian_subroutines.py:193)], kws=[('dtype', Var($84load_attr.36, _loop_hafnian_subroutines.py:195))], vararg=None, target=None) ['$78load_attr.33', '$84load_attr.36', 'AX_nonzero', 'A_nonzero']
    $const96.41 = const(NoneType, None)      ['$const96.41']
    $const98.42 = const(NoneType, None)      ['$const98.42']
    $100build_slice.43 = global(slice: <class 'slice'>) ['$100build_slice.43']
    $100build_slice.44 = call $100build_slice.43($const96.41, $const98.42, func=$100build_slice.43, args=(Var($const96.41, _loop_hafnian_subroutines.py:196), Var($const98.42, _loop_hafnian_subroutines.py:196)), kws=(), vararg=None, target=None) ['$100build_slice.43', '$100build_slice.44', '$const96.41', '$const98.42']
    $const104.46 = const(NoneType, None)     ['$const104.46']
    $106build_slice.47 = global(slice: <class 'slice'>) ['$106build_slice.47']
    $106build_slice.48 = call $106build_slice.47(n_nonzero_edges, $const104.46, func=$106build_slice.47, args=(Var(n_nonzero_edges, _loop_hafnian_subroutines.py:189), Var($const104.46, _loop_hafnian_subroutines.py:196)), kws=(), vararg=None, target=None) ['$106build_slice.47', '$106build_slice.48', '$const104.46', 'n_nonzero_edges']
    $108build_tuple.49 = build_tuple(items=[Var($100build_slice.44, _loop_hafnian_subroutines.py:196), Var($106build_slice.48, _loop_hafnian_subroutines.py:196)]) ['$100build_slice.44', '$106build_slice.48', '$108build_tuple.49']
    $110binary_subscr.50 = getitem(value=A_nonzero, index=$108build_tuple.49, fn=<built-in function getitem>) ['$108build_tuple.49', '$110binary_subscr.50', 'A_nonzero']
    $112binary_multiply.51 = kept_edges_nonzero * $110binary_subscr.50 ['$110binary_subscr.50', '$112binary_multiply.51', 'kept_edges_nonzero']
    $const116.53 = const(NoneType, None)     ['$const116.53']
    $const118.54 = const(NoneType, None)     ['$const118.54']
    $120build_slice.55 = global(slice: <class 'slice'>) ['$120build_slice.55']
    $120build_slice.56 = call $120build_slice.55($const116.53, $const118.54, func=$120build_slice.55, args=(Var($const116.53, _loop_hafnian_subroutines.py:196), Var($const118.54, _loop_hafnian_subroutines.py:196)), kws=(), vararg=None, target=None) ['$120build_slice.55', '$120build_slice.56', '$const116.53', '$const118.54']
    $const122.57 = const(NoneType, None)     ['$const122.57']
    $126build_slice.59 = global(slice: <class 'slice'>) ['$126build_slice.59']
    $126build_slice.60 = call $126build_slice.59($const122.57, n_nonzero_edges, func=$126build_slice.59, args=(Var($const122.57, _loop_hafnian_subroutines.py:196), Var(n_nonzero_edges, _loop_hafnian_subroutines.py:189)), kws=(), vararg=None, target=None) ['$126build_slice.59', '$126build_slice.60', '$const122.57', 'n_nonzero_edges']
    $128build_tuple.61 = build_tuple(items=[Var($120build_slice.56, _loop_hafnian_subroutines.py:196), Var($126build_slice.60, _loop_hafnian_subroutines.py:196)]) ['$120build_slice.56', '$126build_slice.60', '$128build_tuple.61']
    AX_nonzero[$128build_tuple.61] = $112binary_multiply.51 ['$112binary_multiply.51', '$128build_tuple.61', 'AX_nonzero']
    $const136.64 = const(NoneType, None)     ['$const136.64']
    $const138.65 = const(NoneType, None)     ['$const138.65']
    $140build_slice.66 = global(slice: <class 'slice'>) ['$140build_slice.66']
    $140build_slice.67 = call $140build_slice.66($const136.64, $const138.65, func=$140build_slice.66, args=(Var($const136.64, _loop_hafnian_subroutines.py:197), Var($const138.65, _loop_hafnian_subroutines.py:197)), kws=(), vararg=None, target=None) ['$140build_slice.66', '$140build_slice.67', '$const136.64', '$const138.65']
    $const142.68 = const(NoneType, None)     ['$const142.68']
    $146build_slice.70 = global(slice: <class 'slice'>) ['$146build_slice.70']
    $146build_slice.71 = call $146build_slice.70($const142.68, n_nonzero_edges, func=$146build_slice.70, args=(Var($const142.68, _loop_hafnian_subroutines.py:197), Var(n_nonzero_edges, _loop_hafnian_subroutines.py:189)), kws=(), vararg=None, target=None) ['$146build_slice.70', '$146build_slice.71', '$const142.68', 'n_nonzero_edges']
    $148build_tuple.72 = build_tuple(items=[Var($140build_slice.67, _loop_hafnian_subroutines.py:197), Var($146build_slice.71, _loop_hafnian_subroutines.py:197)]) ['$140build_slice.67', '$146build_slice.71', '$148build_tuple.72']
    $150binary_subscr.73 = getitem(value=A_nonzero, index=$148build_tuple.72, fn=<built-in function getitem>) ['$148build_tuple.72', '$150binary_subscr.73', 'A_nonzero']
    $152binary_multiply.74 = kept_edges_nonzero * $150binary_subscr.73 ['$150binary_subscr.73', '$152binary_multiply.74', 'kept_edges_nonzero']
    $const156.76 = const(NoneType, None)     ['$const156.76']
    $const158.77 = const(NoneType, None)     ['$const158.77']
    $160build_slice.78 = global(slice: <class 'slice'>) ['$160build_slice.78']
    $160build_slice.79 = call $160build_slice.78($const156.76, $const158.77, func=$160build_slice.78, args=(Var($const156.76, _loop_hafnian_subroutines.py:197), Var($const158.77, _loop_hafnian_subroutines.py:197)), kws=(), vararg=None, target=None) ['$160build_slice.78', '$160build_slice.79', '$const156.76', '$const158.77']
    $const164.81 = const(NoneType, None)     ['$const164.81']
    $166build_slice.82 = global(slice: <class 'slice'>) ['$166build_slice.82']
    $166build_slice.83 = call $166build_slice.82(n_nonzero_edges, $const164.81, func=$166build_slice.82, args=(Var(n_nonzero_edges, _loop_hafnian_subroutines.py:189), Var($const164.81, _loop_hafnian_subroutines.py:197)), kws=(), vararg=None, target=None) ['$166build_slice.82', '$166build_slice.83', '$const164.81', 'n_nonzero_edges']
    $168build_tuple.84 = build_tuple(items=[Var($160build_slice.79, _loop_hafnian_subroutines.py:197), Var($166build_slice.83, _loop_hafnian_subroutines.py:197)]) ['$160build_slice.79', '$166build_slice.83', '$168build_tuple.84']
    AX_nonzero[$168build_tuple.84] = $152binary_multiply.74 ['$152binary_multiply.74', '$168build_tuple.84', 'AX_nonzero']
    D_nonzero = getitem(value=D, index=nonzero_rows, fn=<built-in function getitem>) ['D', 'D_nonzero', 'nonzero_rows']
    $180load_global.88 = global(np: <module 'numpy' from 'C:\\Users\\zl4821\\Anaconda3\\envs\\GBS\\lib\\site-packages\\numpy\\__init__.py'>) ['$180load_global.88']
    $182load_attr.89 = getattr(value=$180load_global.88, attr=empty_like) ['$180load_global.88', '$182load_attr.89']
    $186load_global.91 = global(np: <module 'numpy' from 'C:\\Users\\zl4821\\Anaconda3\\envs\\GBS\\lib\\site-packages\\numpy\\__init__.py'>) ['$186load_global.91']
    $188load_attr.92 = getattr(value=$186load_global.91, attr=complex128) ['$186load_global.91', '$188load_attr.92']
    XD_nonzero = call $182load_attr.89(D_nonzero, func=$182load_attr.89, args=[Var(D_nonzero, _loop_hafnian_subroutines.py:199)], kws=[('dtype', Var($188load_attr.92, _loop_hafnian_subroutines.py:201))], vararg=None, target=None) ['$182load_attr.89', '$188load_attr.92', 'D_nonzero', 'XD_nonzero']
    $const202.98 = const(NoneType, None)     ['$const202.98']
    $204build_slice.99 = global(slice: <class 'slice'>) ['$204build_slice.99']
    $204build_slice.100 = call $204build_slice.99(n_nonzero_edges, $const202.98, func=$204build_slice.99, args=(Var(n_nonzero_edges, _loop_hafnian_subroutines.py:189), Var($const202.98, _loop_hafnian_subroutines.py:202)), kws=(), vararg=None, target=None) ['$204build_slice.100', '$204build_slice.99', '$const202.98', 'n_nonzero_edges']
    $206binary_subscr.101 = getitem(value=D_nonzero, index=$204build_slice.100, fn=<built-in function getitem>) ['$204build_slice.100', '$206binary_subscr.101', 'D_nonzero']
    $208binary_multiply.102 = kept_edges_nonzero * $206binary_subscr.101 ['$206binary_subscr.101', '$208binary_multiply.102', 'kept_edges_nonzero']
    $const212.104 = const(NoneType, None)    ['$const212.104']
    $216build_slice.106 = global(slice: <class 'slice'>) ['$216build_slice.106']
    $216build_slice.107 = call $216build_slice.106($const212.104, n_nonzero_edges, func=$216build_slice.106, args=(Var($const212.104, _loop_hafnian_subroutines.py:202), Var(n_nonzero_edges, _loop_hafnian_subroutines.py:189)), kws=(), vararg=None, target=None) ['$216build_slice.106', '$216build_slice.107', '$const212.104', 'n_nonzero_edges']
    XD_nonzero[$216build_slice.107] = $208binary_multiply.102 ['$208binary_multiply.102', '$216build_slice.107', 'XD_nonzero']
    $const224.110 = const(NoneType, None)    ['$const224.110']
    $228build_slice.112 = global(slice: <class 'slice'>) ['$228build_slice.112']
    $228build_slice.113 = call $228build_slice.112($const224.110, n_nonzero_edges, func=$228build_slice.112, args=(Var($const224.110, _loop_hafnian_subroutines.py:203), Var(n_nonzero_edges, _loop_hafnian_subroutines.py:189)), kws=(), vararg=None, target=None) ['$228build_slice.112', '$228build_slice.113', '$const224.110', 'n_nonzero_edges']
    $230binary_subscr.114 = getitem(value=D_nonzero, index=$228build_slice.113, fn=<built-in function getitem>) ['$228build_slice.113', '$230binary_subscr.114', 'D_nonzero']
    $232binary_multiply.115 = kept_edges_nonzero * $230binary_subscr.114 ['$230binary_subscr.114', '$232binary_multiply.115', 'kept_edges_nonzero']
    $const238.118 = const(NoneType, None)    ['$const238.118']
    $240build_slice.119 = global(slice: <class 'slice'>) ['$240build_slice.119']
    $240build_slice.120 = call $240build_slice.119(n_nonzero_edges, $const238.118, func=$240build_slice.119, args=(Var(n_nonzero_edges, _loop_hafnian_subroutines.py:189), Var($const238.118, _loop_hafnian_subroutines.py:203)), kws=(), vararg=None, target=None) ['$240build_slice.119', '$240build_slice.120', '$const238.118', 'n_nonzero_edges']
    XD_nonzero[$240build_slice.120] = $232binary_multiply.115 ['$232binary_multiply.115', '$240build_slice.120', 'XD_nonzero']
    $const246.122 = const(NoneType, None)    ['$const246.122']
    $248is_op.123 = oddV is not $const246.122 ['$248is_op.123', '$const246.122', 'oddV']
    bool250 = global(bool: <class 'bool'>)   ['bool250']
    $250pred = call bool250($248is_op.123, func=bool250, args=(Var($248is_op.123, _loop_hafnian_subroutines.py:205),), kws=(), vararg=None, target=None) ['$248is_op.123', '$250pred', 'bool250']
    branch $250pred, 254, 328                ['$250pred']
label 254:
    oddV_nonzero = getitem(value=oddV, index=nonzero_rows, fn=<built-in function getitem>) ['nonzero_rows', 'oddV', 'oddV_nonzero']
    $262load_global.3 = global(np: <module 'numpy' from 'C:\\Users\\zl4821\\Anaconda3\\envs\\GBS\\lib\\site-packages\\numpy\\__init__.py'>) ['$262load_global.3']
    $264load_attr.4 = getattr(value=$262load_global.3, attr=empty_like) ['$262load_global.3', '$264load_attr.4']
    $268load_global.6 = global(np: <module 'numpy' from 'C:\\Users\\zl4821\\Anaconda3\\envs\\GBS\\lib\\site-packages\\numpy\\__init__.py'>) ['$268load_global.6']
    $270load_attr.7 = getattr(value=$268load_global.6, attr=complex128) ['$268load_global.6', '$270load_attr.7']
    oddVX_nonzero = call $264load_attr.4(oddV_nonzero, func=$264load_attr.4, args=[Var(oddV_nonzero, _loop_hafnian_subroutines.py:206)], kws=[('dtype', Var($270load_attr.7, _loop_hafnian_subroutines.py:207))], vararg=None, target=None) ['$264load_attr.4', '$270load_attr.7', 'oddVX_nonzero', 'oddV_nonzero']
    $const284.13 = const(NoneType, None)     ['$const284.13']
    $286build_slice.14 = global(slice: <class 'slice'>) ['$286build_slice.14']
    $286build_slice.15 = call $286build_slice.14(n_nonzero_edges, $const284.13, func=$286build_slice.14, args=(Var(n_nonzero_edges, _loop_hafnian_subroutines.py:189), Var($const284.13, _loop_hafnian_subroutines.py:208)), kws=(), vararg=None, target=None) ['$286build_slice.14', '$286build_slice.15', '$const284.13', 'n_nonzero_edges']
    $288binary_subscr.16 = getitem(value=oddV_nonzero, index=$286build_slice.15, fn=<built-in function getitem>) ['$286build_slice.15', '$288binary_subscr.16', 'oddV_nonzero']
    $290binary_multiply.17 = kept_edges_nonzero * $288binary_subscr.16 ['$288binary_subscr.16', '$290binary_multiply.17', 'kept_edges_nonzero']
    $const294.19 = const(NoneType, None)     ['$const294.19']
    $298build_slice.21 = global(slice: <class 'slice'>) ['$298build_slice.21']
    $298build_slice.22 = call $298build_slice.21($const294.19, n_nonzero_edges, func=$298build_slice.21, args=(Var($const294.19, _loop_hafnian_subroutines.py:208), Var(n_nonzero_edges, _loop_hafnian_subroutines.py:189)), kws=(), vararg=None, target=None) ['$298build_slice.21', '$298build_slice.22', '$const294.19', 'n_nonzero_edges']
    oddVX_nonzero[$298build_slice.22] = $290binary_multiply.17 ['$290binary_multiply.17', '$298build_slice.22', 'oddVX_nonzero']
    $const306.25 = const(NoneType, None)     ['$const306.25']
    $310build_slice.27 = global(slice: <class 'slice'>) ['$310build_slice.27']
    $310build_slice.28 = call $310build_slice.27($const306.25, n_nonzero_edges, func=$310build_slice.27, args=(Var($const306.25, _loop_hafnian_subroutines.py:209), Var(n_nonzero_edges, _loop_hafnian_subroutines.py:189)), kws=(), vararg=None, target=None) ['$310build_slice.27', '$310build_slice.28', '$const306.25', 'n_nonzero_edges']
    $312binary_subscr.29 = getitem(value=oddV_nonzero, index=$310build_slice.28, fn=<built-in function getitem>) ['$310build_slice.28', '$312binary_subscr.29', 'oddV_nonzero']
    $314binary_multiply.30 = kept_edges_nonzero * $312binary_subscr.29 ['$312binary_subscr.29', '$314binary_multiply.30', 'kept_edges_nonzero']
    $const320.33 = const(NoneType, None)     ['$const320.33']
    $322build_slice.34 = global(slice: <class 'slice'>) ['$322build_slice.34']
    $322build_slice.35 = call $322build_slice.34(n_nonzero_edges, $const320.33, func=$322build_slice.34, args=(Var(n_nonzero_edges, _loop_hafnian_subroutines.py:189), Var($const320.33, _loop_hafnian_subroutines.py:209)), kws=(), vararg=None, target=None) ['$322build_slice.34', '$322build_slice.35', '$const320.33', 'n_nonzero_edges']
    oddVX_nonzero[$322build_slice.35] = $314binary_multiply.30 ['$314binary_multiply.30', '$322build_slice.35', 'oddVX_nonzero']
    jump 332                                 []
label 328:
    oddVX_nonzero = const(NoneType, None)    ['oddVX_nonzero']
    jump 332                                 []
label 332:
    $340build_tuple.4 = build_tuple(items=[Var(AX_nonzero, _loop_hafnian_subroutines.py:195), Var(XD_nonzero, _loop_hafnian_subroutines.py:201), Var(D_nonzero, _loop_hafnian_subroutines.py:199), Var(oddVX_nonzero, _loop_hafnian_subroutines.py:207)]) ['$340build_tuple.4', 'AX_nonzero', 'D_nonzero', 'XD_nonzero', 'oddVX_nonzero']
    $342return_value.5 = cast(value=$340build_tuple.4) ['$340build_tuple.4', '$342return_value.5']
    return $342return_value.5                ['$342return_value.5']

DEBUG 2022-02-08 17:11:34,018 ==== SSA block analysis pass on 0
DEBUG 2022-02-08 17:11:34,018 Running <numba.core.ssa._GatherDefsHandler object at 0x000001E9F65CF5B0>
DEBUG 2022-02-08 17:11:34,018 on stmt: kept_edges = arg(0, name=kept_edges)
DEBUG 2022-02-08 17:11:34,018 on stmt: A = arg(1, name=A)
DEBUG 2022-02-08 17:11:34,018 on stmt: D = arg(2, name=D)
DEBUG 2022-02-08 17:11:34,018 on stmt: oddV = arg(3, name=oddV)
DEBUG 2022-02-08 17:11:34,018 on stmt: $2load_global.0 = global(np: <module 'numpy' from 'C:\\Users\\zl4821\\Anaconda3\\envs\\GBS\\lib\\site-packages\\numpy\\__init__.py'>)
DEBUG 2022-02-08 17:11:34,018 on stmt: $4load_method.1 = getattr(value=$2load_global.0, attr=concatenate)
DEBUG 2022-02-08 17:11:34,018 on stmt: $10build_tuple.4 = build_tuple(items=[Var(kept_edges, _loop_hafnian_subroutines.py:187), Var(kept_edges, _loop_hafnian_subroutines.py:187)])
DEBUG 2022-02-08 17:11:34,018 on stmt: z = call $4load_method.1($10build_tuple.4, func=$4load_method.1, args=[Var($10build_tuple.4, _loop_hafnian_subroutines.py:187)], kws=(), vararg=None, target=None)
DEBUG 2022-02-08 17:11:34,018 on stmt: $16load_global.6 = global(np: <module 'numpy' from 'C:\\Users\\zl4821\\Anaconda3\\envs\\GBS\\lib\\site-packages\\numpy\\__init__.py'>)
DEBUG 2022-02-08 17:11:34,018 on stmt: $18load_method.7 = getattr(value=$16load_global.6, attr=where)
DEBUG 2022-02-08 17:11:34,018 on stmt: $const22.9 = const(int, 0)
DEBUG 2022-02-08 17:11:34,018 on stmt: $24compare_op.10 = z != $const22.9
DEBUG 2022-02-08 17:11:34,018 on stmt: $26call_method.11 = call $18load_method.7($24compare_op.10, func=$18load_method.7, args=[Var($24compare_op.10, _loop_hafnian_subroutines.py:188)], kws=(), vararg=None, target=None)
DEBUG 2022-02-08 17:11:34,018 on stmt: $const28.12 = const(int, 0)
DEBUG 2022-02-08 17:11:34,018 on stmt: nonzero_rows = static_getitem(value=$26call_method.11, index=0, index_var=$const28.12, fn=<built-in function getitem>)
DEBUG 2022-02-08 17:11:34,018 on stmt: $34load_global.14 = global(len: <built-in function len>)
DEBUG 2022-02-08 17:11:34,018 on stmt: $38call_function.16 = call $34load_global.14(nonzero_rows, func=$34load_global.14, args=[Var(nonzero_rows, _loop_hafnian_subroutines.py:188)], kws=(), vararg=None, target=None)
DEBUG 2022-02-08 17:11:34,018 on stmt: $const40.17 = const(int, 2)
DEBUG 2022-02-08 17:11:34,018 on stmt: n_nonzero_edges = $38call_function.16 // $const40.17
DEBUG 2022-02-08 17:11:34,018 on stmt: $48load_global.20 = global(np: <module 'numpy' from 'C:\\Users\\zl4821\\Anaconda3\\envs\\GBS\\lib\\site-packages\\numpy\\__init__.py'>)
DEBUG 2022-02-08 17:11:34,018 on stmt: $50load_method.21 = getattr(value=$48load_global.20, attr=where)
DEBUG 2022-02-08 17:11:34,018 on stmt: $const54.23 = const(int, 0)
DEBUG 2022-02-08 17:11:34,018 on stmt: $56compare_op.24 = kept_edges != $const54.23
DEBUG 2022-02-08 17:11:34,018 on stmt: $58call_method.25 = call $50load_method.21($56compare_op.24, func=$50load_method.21, args=[Var($56compare_op.24, _loop_hafnian_subroutines.py:191)], kws=(), vararg=None, target=None)
DEBUG 2022-02-08 17:11:34,018 on stmt: kept_edges_nonzero = getitem(value=kept_edges, index=$58call_method.25, fn=<built-in function getitem>)
DEBUG 2022-02-08 17:11:34,018 on stmt: $64load_global.27 = global(nb_ix: CPUDispatcher(<function nb_ix at 0x000001E9ECB30310>))
DEBUG 2022-02-08 17:11:34,018 on stmt: A_nonzero = call $64load_global.27(A, nonzero_rows, nonzero_rows, func=$64load_global.27, args=[Var(A, _loop_hafnian_subroutines.py:187), Var(nonzero_rows, _loop_hafnian_subroutines.py:188), Var(nonzero_rows, _loop_hafnian_subroutines.py:188)], kws=(), vararg=None, target=None)
DEBUG 2022-02-08 17:11:34,018 on stmt: $76load_global.32 = global(np: <module 'numpy' from 'C:\\Users\\zl4821\\Anaconda3\\envs\\GBS\\lib\\site-packages\\numpy\\__init__.py'>)
DEBUG 2022-02-08 17:11:34,018 on stmt: $78load_attr.33 = getattr(value=$76load_global.32, attr=empty_like)
DEBUG 2022-02-08 17:11:34,018 on stmt: $82load_global.35 = global(np: <module 'numpy' from 'C:\\Users\\zl4821\\Anaconda3\\envs\\GBS\\lib\\site-packages\\numpy\\__init__.py'>)
DEBUG 2022-02-08 17:11:34,018 on stmt: $84load_attr.36 = getattr(value=$82load_global.35, attr=complex128)
DEBUG 2022-02-08 17:11:34,018 on stmt: AX_nonzero = call $78load_attr.33(A_nonzero, func=$78load_attr.33, args=[Var(A_nonzero, _loop_hafnian_subroutines.py:193)], kws=[('dtype', Var($84load_attr.36, _loop_hafnian_subroutines.py:195))], vararg=None, target=None)
DEBUG 2022-02-08 17:11:34,018 on stmt: $const96.41 = const(NoneType, None)
DEBUG 2022-02-08 17:11:34,018 on stmt: $const98.42 = const(NoneType, None)
DEBUG 2022-02-08 17:11:34,018 on stmt: $100build_slice.43 = global(slice: <class 'slice'>)
DEBUG 2022-02-08 17:11:34,018 on stmt: $100build_slice.44 = call $100build_slice.43($const96.41, $const98.42, func=$100build_slice.43, args=(Var($const96.41, _loop_hafnian_subroutines.py:196), Var($const98.42, _loop_hafnian_subroutines.py:196)), kws=(), vararg=None, target=None)
DEBUG 2022-02-08 17:11:34,018 on stmt: $const104.46 = const(NoneType, None)
DEBUG 2022-02-08 17:11:34,018 on stmt: $106build_slice.47 = global(slice: <class 'slice'>)
DEBUG 2022-02-08 17:11:34,018 on stmt: $106build_slice.48 = call $106build_slice.47(n_nonzero_edges, $const104.46, func=$106build_slice.47, args=(Var(n_nonzero_edges, _loop_hafnian_subroutines.py:189), Var($const104.46, _loop_hafnian_subroutines.py:196)), kws=(), vararg=None, target=None)
DEBUG 2022-02-08 17:11:34,018 on stmt: $108build_tuple.49 = build_tuple(items=[Var($100build_slice.44, _loop_hafnian_subroutines.py:196), Var($106build_slice.48, _loop_hafnian_subroutines.py:196)])
DEBUG 2022-02-08 17:11:34,018 on stmt: $110binary_subscr.50 = getitem(value=A_nonzero, index=$108build_tuple.49, fn=<built-in function getitem>)
DEBUG 2022-02-08 17:11:34,018 on stmt: $112binary_multiply.51 = kept_edges_nonzero * $110binary_subscr.50
DEBUG 2022-02-08 17:11:34,018 on stmt: $const116.53 = const(NoneType, None)
DEBUG 2022-02-08 17:11:34,018 on stmt: $const118.54 = const(NoneType, None)
DEBUG 2022-02-08 17:11:34,018 on stmt: $120build_slice.55 = global(slice: <class 'slice'>)
DEBUG 2022-02-08 17:11:34,018 on stmt: $120build_slice.56 = call $120build_slice.55($const116.53, $const118.54, func=$120build_slice.55, args=(Var($const116.53, _loop_hafnian_subroutines.py:196), Var($const118.54, _loop_hafnian_subroutines.py:196)), kws=(), vararg=None, target=None)
DEBUG 2022-02-08 17:11:34,018 on stmt: $const122.57 = const(NoneType, None)
DEBUG 2022-02-08 17:11:34,018 on stmt: $126build_slice.59 = global(slice: <class 'slice'>)
DEBUG 2022-02-08 17:11:34,018 on stmt: $126build_slice.60 = call $126build_slice.59($const122.57, n_nonzero_edges, func=$126build_slice.59, args=(Var($const122.57, _loop_hafnian_subroutines.py:196), Var(n_nonzero_edges, _loop_hafnian_subroutines.py:189)), kws=(), vararg=None, target=None)
DEBUG 2022-02-08 17:11:34,018 on stmt: $128build_tuple.61 = build_tuple(items=[Var($120build_slice.56, _loop_hafnian_subroutines.py:196), Var($126build_slice.60, _loop_hafnian_subroutines.py:196)])
DEBUG 2022-02-08 17:11:34,018 on stmt: AX_nonzero[$128build_tuple.61] = $112binary_multiply.51
DEBUG 2022-02-08 17:11:34,018 on stmt: $const136.64 = const(NoneType, None)
DEBUG 2022-02-08 17:11:34,018 on stmt: $const138.65 = const(NoneType, None)
DEBUG 2022-02-08 17:11:34,018 on stmt: $140build_slice.66 = global(slice: <class 'slice'>)
DEBUG 2022-02-08 17:11:34,018 on stmt: $140build_slice.67 = call $140build_slice.66($const136.64, $const138.65, func=$140build_slice.66, args=(Var($const136.64, _loop_hafnian_subroutines.py:197), Var($const138.65, _loop_hafnian_subroutines.py:197)), kws=(), vararg=None, target=None)
DEBUG 2022-02-08 17:11:34,018 on stmt: $const142.68 = const(NoneType, None)
DEBUG 2022-02-08 17:11:34,018 on stmt: $146build_slice.70 = global(slice: <class 'slice'>)
DEBUG 2022-02-08 17:11:34,018 on stmt: $146build_slice.71 = call $146build_slice.70($const142.68, n_nonzero_edges, func=$146build_slice.70, args=(Var($const142.68, _loop_hafnian_subroutines.py:197), Var(n_nonzero_edges, _loop_hafnian_subroutines.py:189)), kws=(), vararg=None, target=None)
DEBUG 2022-02-08 17:11:34,018 on stmt: $148build_tuple.72 = build_tuple(items=[Var($140build_slice.67, _loop_hafnian_subroutines.py:197), Var($146build_slice.71, _loop_hafnian_subroutines.py:197)])
DEBUG 2022-02-08 17:11:34,018 on stmt: $150binary_subscr.73 = getitem(value=A_nonzero, index=$148build_tuple.72, fn=<built-in function getitem>)
DEBUG 2022-02-08 17:11:34,018 on stmt: $152binary_multiply.74 = kept_edges_nonzero * $150binary_subscr.73
DEBUG 2022-02-08 17:11:34,018 on stmt: $const156.76 = const(NoneType, None)
DEBUG 2022-02-08 17:11:34,018 on stmt: $const158.77 = const(NoneType, None)
DEBUG 2022-02-08 17:11:34,018 on stmt: $160build_slice.78 = global(slice: <class 'slice'>)
DEBUG 2022-02-08 17:11:34,018 on stmt: $160build_slice.79 = call $160build_slice.78($const156.76, $const158.77, func=$160build_slice.78, args=(Var($const156.76, _loop_hafnian_subroutines.py:197), Var($const158.77, _loop_hafnian_subroutines.py:197)), kws=(), vararg=None, target=None)
DEBUG 2022-02-08 17:11:34,018 on stmt: $const164.81 = const(NoneType, None)
DEBUG 2022-02-08 17:11:34,018 on stmt: $166build_slice.82 = global(slice: <class 'slice'>)
DEBUG 2022-02-08 17:11:34,018 on stmt: $166build_slice.83 = call $166build_slice.82(n_nonzero_edges, $const164.81, func=$166build_slice.82, args=(Var(n_nonzero_edges, _loop_hafnian_subroutines.py:189), Var($const164.81, _loop_hafnian_subroutines.py:197)), kws=(), vararg=None, target=None)
DEBUG 2022-02-08 17:11:34,018 on stmt: $168build_tuple.84 = build_tuple(items=[Var($160build_slice.79, _loop_hafnian_subroutines.py:197), Var($166build_slice.83, _loop_hafnian_subroutines.py:197)])
DEBUG 2022-02-08 17:11:34,018 on stmt: AX_nonzero[$168build_tuple.84] = $152binary_multiply.74
DEBUG 2022-02-08 17:11:34,018 on stmt: D_nonzero = getitem(value=D, index=nonzero_rows, fn=<built-in function getitem>)
DEBUG 2022-02-08 17:11:34,018 on stmt: $180load_global.88 = global(np: <module 'numpy' from 'C:\\Users\\zl4821\\Anaconda3\\envs\\GBS\\lib\\site-packages\\numpy\\__init__.py'>)
DEBUG 2022-02-08 17:11:34,018 on stmt: $182load_attr.89 = getattr(value=$180load_global.88, attr=empty_like)
DEBUG 2022-02-08 17:11:34,018 on stmt: $186load_global.91 = global(np: <module 'numpy' from 'C:\\Users\\zl4821\\Anaconda3\\envs\\GBS\\lib\\site-packages\\numpy\\__init__.py'>)
DEBUG 2022-02-08 17:11:34,018 on stmt: $188load_attr.92 = getattr(value=$186load_global.91, attr=complex128)
DEBUG 2022-02-08 17:11:34,018 on stmt: XD_nonzero = call $182load_attr.89(D_nonzero, func=$182load_attr.89, args=[Var(D_nonzero, _loop_hafnian_subroutines.py:199)], kws=[('dtype', Var($188load_attr.92, _loop_hafnian_subroutines.py:201))], vararg=None, target=None)
DEBUG 2022-02-08 17:11:34,018 on stmt: $const202.98 = const(NoneType, None)
DEBUG 2022-02-08 17:11:34,018 on stmt: $204build_slice.99 = global(slice: <class 'slice'>)
DEBUG 2022-02-08 17:11:34,018 on stmt: $204build_slice.100 = call $204build_slice.99(n_nonzero_edges, $const202.98, func=$204build_slice.99, args=(Var(n_nonzero_edges, _loop_hafnian_subroutines.py:189), Var($const202.98, _loop_hafnian_subroutines.py:202)), kws=(), vararg=None, target=None)
DEBUG 2022-02-08 17:11:34,018 on stmt: $206binary_subscr.101 = getitem(value=D_nonzero, index=$204build_slice.100, fn=<built-in function getitem>)
DEBUG 2022-02-08 17:11:34,018 on stmt: $208binary_multiply.102 = kept_edges_nonzero * $206binary_subscr.101
DEBUG 2022-02-08 17:11:34,018 on stmt: $const212.104 = const(NoneType, None)
DEBUG 2022-02-08 17:11:34,018 on stmt: $216build_slice.106 = global(slice: <class 'slice'>)
DEBUG 2022-02-08 17:11:34,018 on stmt: $216build_slice.107 = call $216build_slice.106($const212.104, n_nonzero_edges, func=$216build_slice.106, args=(Var($const212.104, _loop_hafnian_subroutines.py:202), Var(n_nonzero_edges, _loop_hafnian_subroutines.py:189)), kws=(), vararg=None, target=None)
DEBUG 2022-02-08 17:11:34,018 on stmt: XD_nonzero[$216build_slice.107] = $208binary_multiply.102
DEBUG 2022-02-08 17:11:34,018 on stmt: $const224.110 = const(NoneType, None)
DEBUG 2022-02-08 17:11:34,018 on stmt: $228build_slice.112 = global(slice: <class 'slice'>)
DEBUG 2022-02-08 17:11:34,018 on stmt: $228build_slice.113 = call $228build_slice.112($const224.110, n_nonzero_edges, func=$228build_slice.112, args=(Var($const224.110, _loop_hafnian_subroutines.py:203), Var(n_nonzero_edges, _loop_hafnian_subroutines.py:189)), kws=(), vararg=None, target=None)
DEBUG 2022-02-08 17:11:34,018 on stmt: $230binary_subscr.114 = getitem(value=D_nonzero, index=$228build_slice.113, fn=<built-in function getitem>)
DEBUG 2022-02-08 17:11:34,018 on stmt: $232binary_multiply.115 = kept_edges_nonzero * $230binary_subscr.114
DEBUG 2022-02-08 17:11:34,018 on stmt: $const238.118 = const(NoneType, None)
DEBUG 2022-02-08 17:11:34,018 on stmt: $240build_slice.119 = global(slice: <class 'slice'>)
DEBUG 2022-02-08 17:11:34,018 on stmt: $240build_slice.120 = call $240build_slice.119(n_nonzero_edges, $const238.118, func=$240build_slice.119, args=(Var(n_nonzero_edges, _loop_hafnian_subroutines.py:189), Var($const238.118, _loop_hafnian_subroutines.py:203)), kws=(), vararg=None, target=None)
DEBUG 2022-02-08 17:11:34,018 on stmt: XD_nonzero[$240build_slice.120] = $232binary_multiply.115
DEBUG 2022-02-08 17:11:34,018 on stmt: $const246.122 = const(NoneType, None)
DEBUG 2022-02-08 17:11:34,018 on stmt: $248is_op.123 = const(int, 0)
DEBUG 2022-02-08 17:11:34,018 on stmt: bool250 = global(bool: <class 'bool'>)
DEBUG 2022-02-08 17:11:34,018 on stmt: $250pred = call bool250($248is_op.123, func=bool250, args=(Var($248is_op.123, _loop_hafnian_subroutines.py:205),), kws=(), vararg=None, target=None)
DEBUG 2022-02-08 17:11:34,018 on stmt: jump 328
DEBUG 2022-02-08 17:11:34,018 ==== SSA block analysis pass on 328
DEBUG 2022-02-08 17:11:34,018 Running <numba.core.ssa._GatherDefsHandler object at 0x000001E9F65CF5B0>
DEBUG 2022-02-08 17:11:34,018 on stmt: oddVX_nonzero = const(NoneType, None)
DEBUG 2022-02-08 17:11:34,018 on stmt: jump 332
DEBUG 2022-02-08 17:11:34,018 ==== SSA block analysis pass on 332
DEBUG 2022-02-08 17:11:34,018 Running <numba.core.ssa._GatherDefsHandler object at 0x000001E9F65CF5B0>
DEBUG 2022-02-08 17:11:34,018 on stmt: $340build_tuple.4 = build_tuple(items=[Var(AX_nonzero, _loop_hafnian_subroutines.py:195), Var(XD_nonzero, _loop_hafnian_subroutines.py:201), Var(D_nonzero, _loop_hafnian_subroutines.py:199), Var(oddVX_nonzero, _loop_hafnian_subroutines.py:207)])
DEBUG 2022-02-08 17:11:34,034 on stmt: $342return_value.5 = cast(value=$340build_tuple.4)
DEBUG 2022-02-08 17:11:34,034 on stmt: return $342return_value.5
DEBUG 2022-02-08 17:11:34,034 defs defaultdict(<class 'list'>,
            {'$100build_slice.43': [<numba.core.ir.Assign object at 0x000001E9F65BE0D0>],
             '$100build_slice.44': [<numba.core.ir.Assign object at 0x000001E9F65BE1F0>],
             '$106build_slice.47': [<numba.core.ir.Assign object at 0x000001E9F65BE610>],
             '$106build_slice.48': [<numba.core.ir.Assign object at 0x000001E9F65BE730>],
             '$108build_tuple.49': [<numba.core.ir.Assign object at 0x000001E9F65BE8E0>],
             '$10build_tuple.4': [<numba.core.ir.Assign object at 0x000001E9F65B1220>],
             '$110binary_subscr.50': [<numba.core.ir.Assign object at 0x000001E9F65BEA60>],
             '$112binary_multiply.51': [<numba.core.ir.Assign object at 0x000001E9F65BEBE0>],
             '$120build_slice.55': [<numba.core.ir.Assign object at 0x000001E9F65BF190>],
             '$120build_slice.56': [<numba.core.ir.Assign object at 0x000001E9F65BF2B0>],
             '$126build_slice.59': [<numba.core.ir.Assign object at 0x000001E9F65BF6D0>],
             '$126build_slice.60': [<numba.core.ir.Assign object at 0x000001E9F65BF7F0>],
             '$128build_tuple.61': [<numba.core.ir.Assign object at 0x000001E9F65BF9A0>],
             '$140build_slice.66': [<numba.core.ir.Assign object at 0x000001E9F65C2130>],
             '$140build_slice.67': [<numba.core.ir.Assign object at 0x000001E9F65C2250>],
             '$146build_slice.70': [<numba.core.ir.Assign object at 0x000001E9F65C2670>],
             '$146build_slice.71': [<numba.core.ir.Assign object at 0x000001E9F65C2790>],
             '$148build_tuple.72': [<numba.core.ir.Assign object at 0x000001E9F65C2940>],
             '$150binary_subscr.73': [<numba.core.ir.Assign object at 0x000001E9F65C2AC0>],
             '$152binary_multiply.74': [<numba.core.ir.Assign object at 0x000001E9F65C2C40>],
             '$160build_slice.78': [<numba.core.ir.Assign object at 0x000001E9F65C31F0>],
             '$160build_slice.79': [<numba.core.ir.Assign object at 0x000001E9F65C3310>],
             '$166build_slice.82': [<numba.core.ir.Assign object at 0x000001E9F65C3730>],
             '$166build_slice.83': [<numba.core.ir.Assign object at 0x000001E9F65C3850>],
             '$168build_tuple.84': [<numba.core.ir.Assign object at 0x000001E9F65C3A00>],
             '$16load_global.6': [<numba.core.ir.Assign object at 0x000001E9F65B1610>],
             '$180load_global.88': [<numba.core.ir.Assign object at 0x000001E9F65C4130>],
             '$182load_attr.89': [<numba.core.ir.Assign object at 0x000001E9F65C42B0>],
             '$186load_global.91': [<numba.core.ir.Assign object at 0x000001E9F65C4550>],
             '$188load_attr.92': [<numba.core.ir.Assign object at 0x000001E9F65C46D0>],
             '$18load_method.7': [<numba.core.ir.Assign object at 0x000001E9F65B1790>],
             '$204build_slice.100': [<numba.core.ir.Assign object at 0x000001E9F65C7310>],
             '$204build_slice.99': [<numba.core.ir.Assign object at 0x000001E9F65C71F0>],
             '$206binary_subscr.101': [<numba.core.ir.Assign object at 0x000001E9F65C74C0>],
             '$208binary_multiply.102': [<numba.core.ir.Assign object at 0x000001E9F65C7640>],
             '$216build_slice.106': [<numba.core.ir.Assign object at 0x000001E9F65C7B50>],
             '$216build_slice.107': [<numba.core.ir.Assign object at 0x000001E9F65C7C70>],
             '$228build_slice.112': [<numba.core.ir.Assign object at 0x000001E9F65C93D0>],
             '$228build_slice.113': [<numba.core.ir.Assign object at 0x000001E9F65C94F0>],
             '$230binary_subscr.114': [<numba.core.ir.Assign object at 0x000001E9F65C96A0>],
             '$232binary_multiply.115': [<numba.core.ir.Assign object at 0x000001E9F65C9820>],
             '$240build_slice.119': [<numba.core.ir.Assign object at 0x000001E9F65C9D30>],
             '$240build_slice.120': [<numba.core.ir.Assign object at 0x000001E9F65C9E50>],
             '$248is_op.123': [<numba.core.ir.Assign object at 0x000001E9F65CA3A0>],
             '$24compare_op.10': [<numba.core.ir.Assign object at 0x000001E9F65B1BE0>],
             '$250pred': [<numba.core.ir.Assign object at 0x000001E9F65CA610>],
             '$26call_method.11': [<numba.core.ir.Assign object at 0x000001E9F65B1DC0>],
             '$2load_global.0': [<numba.core.ir.Assign object at 0x000001E9F65A5370>],
             '$340build_tuple.4': [<numba.core.ir.Assign object at 0x000001E9F65CF0A0>],
             '$342return_value.5': [<numba.core.ir.Assign object at 0x000001E9F65CF1F0>],
             '$34load_global.14': [<numba.core.ir.Assign object at 0x000001E9F65B5310>],
             '$38call_function.16': [<numba.core.ir.Assign object at 0x000001E9F65B5610>],
             '$48load_global.20': [<numba.core.ir.Assign object at 0x000001E9F65B5C70>],
             '$4load_method.1': [<numba.core.ir.Assign object at 0x000001E9F65A51F0>],
             '$50load_method.21': [<numba.core.ir.Assign object at 0x000001E9F65B5DF0>],
             '$56compare_op.24': [<numba.core.ir.Assign object at 0x000001E9F65B9280>],
             '$58call_method.25': [<numba.core.ir.Assign object at 0x000001E9F65B9460>],
             '$64load_global.27': [<numba.core.ir.Assign object at 0x000001E9F65B97F0>],
             '$76load_global.32': [<numba.core.ir.Assign object at 0x000001E9F65B9F70>],
             '$78load_attr.33': [<numba.core.ir.Assign object at 0x000001E9F65BB130>],
             '$82load_global.35': [<numba.core.ir.Assign object at 0x000001E9F65BB3D0>],
             '$84load_attr.36': [<numba.core.ir.Assign object at 0x000001E9F65BB550>],
             '$const104.46': [<numba.core.ir.Assign object at 0x000001E9F65BE490>],
             '$const116.53': [<numba.core.ir.Assign object at 0x000001E9F65BEE50>],
             '$const118.54': [<numba.core.ir.Assign object at 0x000001E9F65BEFD0>],
             '$const122.57': [<numba.core.ir.Assign object at 0x000001E9F65BF430>],
             '$const136.64': [<numba.core.ir.Assign object at 0x000001E9F65BFDF0>],
             '$const138.65': [<numba.core.ir.Assign object at 0x000001E9F65BFF70>],
             '$const142.68': [<numba.core.ir.Assign object at 0x000001E9F65C23D0>],
             '$const156.76': [<numba.core.ir.Assign object at 0x000001E9F65C2EB0>],
             '$const158.77': [<numba.core.ir.Assign object at 0x000001E9F65C3070>],
             '$const164.81': [<numba.core.ir.Assign object at 0x000001E9F65C35B0>],
             '$const202.98': [<numba.core.ir.Assign object at 0x000001E9F65C7070>],
             '$const212.104': [<numba.core.ir.Assign object at 0x000001E9F65C78B0>],
             '$const22.9': [<numba.core.ir.Assign object at 0x000001E9F65B1A30>],
             '$const224.110': [<numba.core.ir.Assign object at 0x000001E9F65C9130>],
             '$const238.118': [<numba.core.ir.Assign object at 0x000001E9F65C9BB0>],
             '$const246.122': [<numba.core.ir.Assign object at 0x000001E9F65CA1F0>],
             '$const28.12': [<numba.core.ir.Assign object at 0x000001E9F65B1EB0>],
             '$const40.17': [<numba.core.ir.Assign object at 0x000001E9F65B5730>],
             '$const54.23': [<numba.core.ir.Assign object at 0x000001E9F65B90D0>],
             '$const96.41': [<numba.core.ir.Assign object at 0x000001E9F65BBD90>],
             '$const98.42': [<numba.core.ir.Assign object at 0x000001E9F65BBF10>],
             'A': [<numba.core.ir.Assign object at 0x000001E9F65A5D30>],
             'AX_nonzero': [<numba.core.ir.Assign object at 0x000001E9F65BB9D0>],
             'A_nonzero': [<numba.core.ir.Assign object at 0x000001E9F65B9D30>],
             'D': [<numba.core.ir.Assign object at 0x000001E9F65A5AF0>],
             'D_nonzero': [<numba.core.ir.Assign object at 0x000001E9F65C3E80>],
             'XD_nonzero': [<numba.core.ir.Assign object at 0x000001E9F65C4B50>],
             'bool250': [<numba.core.ir.Assign object at 0x000001E9F65CA4F0>],
             'kept_edges': [<numba.core.ir.Assign object at 0x000001E9F65A5F70>],
             'kept_edges_nonzero': [<numba.core.ir.Assign object at 0x000001E9F65B9580>],
             'n_nonzero_edges': [<numba.core.ir.Assign object at 0x000001E9F65B58E0>],
             'nonzero_rows': [<numba.core.ir.Assign object at 0x000001E9F65CA310>],
             'oddV': [<numba.core.ir.Assign object at 0x000001E9F65A58B0>],
             'oddVX_nonzero': [<numba.core.ir.Assign object at 0x000001E9F65CA910>],
             'z': [<numba.core.ir.Assign object at 0x000001E9F65B1400>]})
DEBUG 2022-02-08 17:11:34,034 SSA violators set()
DEBUG 2022-02-08 17:11:34,034 bytecode dump:
>          0	NOP(arg=None, lineno=3)
           2	LOAD_GLOBAL(arg=0, lineno=3)
           4	LOAD_FAST(arg=0, lineno=3)
           6	CALL_FUNCTION(arg=1, lineno=3)
           8	RETURN_VALUE(arg=None, lineno=3)
DEBUG 2022-02-08 17:11:34,034 pending: deque([State(pc_initial=0 nstack_initial=0)])
DEBUG 2022-02-08 17:11:34,034 stack: []
DEBUG 2022-02-08 17:11:34,034 dispatch pc=0, inst=NOP(arg=None, lineno=3)
DEBUG 2022-02-08 17:11:34,034 stack []
DEBUG 2022-02-08 17:11:34,034 dispatch pc=2, inst=LOAD_GLOBAL(arg=0, lineno=3)
DEBUG 2022-02-08 17:11:34,034 stack []
DEBUG 2022-02-08 17:11:34,034 dispatch pc=4, inst=LOAD_FAST(arg=0, lineno=3)
DEBUG 2022-02-08 17:11:34,034 stack ['$2load_global.0']
DEBUG 2022-02-08 17:11:34,034 dispatch pc=6, inst=CALL_FUNCTION(arg=1, lineno=3)
DEBUG 2022-02-08 17:11:34,034 stack ['$2load_global.0', '$tmp04.1']
DEBUG 2022-02-08 17:11:34,034 dispatch pc=8, inst=RETURN_VALUE(arg=None, lineno=3)
DEBUG 2022-02-08 17:11:34,034 stack ['$6call_function.2']
DEBUG 2022-02-08 17:11:34,034 end state. edges=[]
DEBUG 2022-02-08 17:11:34,034 -------------------------Prune PHIs-------------------------
DEBUG 2022-02-08 17:11:34,034 Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
DEBUG 2022-02-08 17:11:34,034 defmap: {}
DEBUG 2022-02-08 17:11:34,034 phismap: defaultdict(<class 'set'>, {})
DEBUG 2022-02-08 17:11:34,034 changing phismap: defaultdict(<class 'set'>, {})
DEBUG 2022-02-08 17:11:34,034 keep phismap: {}
DEBUG 2022-02-08 17:11:34,034 new_out: defaultdict(<class 'dict'>, {})
DEBUG 2022-02-08 17:11:34,034 ----------------------DONE Prune PHIs-----------------------
DEBUG 2022-02-08 17:11:34,034 block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$2load_global.0'}), (4, {'res': '$tmp04.1'}), (6, {'func': '$2load_global.0', 'args': ['$tmp04.1'], 'res': '$6call_function.2'}), (8, {'retval': '$6call_function.2', 'castval': '$8return_value.3'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG 2022-02-08 17:11:34,034 label 0:
    tmp0 = arg(0, name=tmp0)                 ['tmp0']
    $2load_global.0 = global(intrin: <intrinsic stub>) ['$2load_global.0']
    $6call_function.2 = call $2load_global.0(tmp0, func=$2load_global.0, args=[Var(tmp0, <string>:3)], kws=(), vararg=None, target=None) ['$2load_global.0', '$6call_function.2', 'tmp0']
    $8return_value.3 = cast(value=$6call_function.2) ['$6call_function.2', '$8return_value.3']
    return $8return_value.3                  ['$8return_value.3']

DEBUG 2022-02-08 17:11:34,034 ==== SSA block analysis pass on 0
DEBUG 2022-02-08 17:11:34,034 Running <numba.core.ssa._GatherDefsHandler object at 0x000001E9F65E6430>
DEBUG 2022-02-08 17:11:34,034 on stmt: tmp0 = arg(0, name=tmp0)
DEBUG 2022-02-08 17:11:34,034 on stmt: $2load_global.0 = global(intrin: <intrinsic stub>)
DEBUG 2022-02-08 17:11:34,034 on stmt: $6call_function.2 = call $2load_global.0(tmp0, func=$2load_global.0, args=[Var(tmp0, <string>:3)], kws=(), vararg=None, target=None)
DEBUG 2022-02-08 17:11:34,034 on stmt: $8return_value.3 = cast(value=$6call_function.2)
DEBUG 2022-02-08 17:11:34,034 on stmt: return $8return_value.3
DEBUG 2022-02-08 17:11:34,034 defs defaultdict(<class 'list'>,
            {'$2load_global.0': [<numba.core.ir.Assign object at 0x000001E9F65E7100>],
             '$6call_function.2': [<numba.core.ir.Assign object at 0x000001E9F65E7400>],
             '$8return_value.3': [<numba.core.ir.Assign object at 0x000001E9F65E7520>],
             'tmp0': [<numba.core.ir.Assign object at 0x000001E9F65E60D0>]})
DEBUG 2022-02-08 17:11:34,034 SSA violators set()
DEBUG 2022-02-08 17:11:34,056 bytecode dump:
>          0	NOP(arg=None, lineno=3543)
           2	LOAD_FAST(arg=0, lineno=3543)
           4	LOAD_METHOD(arg=0, lineno=3543)
           6	LOAD_FAST(arg=1, lineno=3543)
           8	LOAD_FAST(arg=2, lineno=3543)
          10	CALL_METHOD(arg=2, lineno=3543)
          12	RETURN_VALUE(arg=None, lineno=3543)
DEBUG 2022-02-08 17:11:34,056 pending: deque([State(pc_initial=0 nstack_initial=0)])
DEBUG 2022-02-08 17:11:34,056 stack: []
DEBUG 2022-02-08 17:11:34,056 dispatch pc=0, inst=NOP(arg=None, lineno=3543)
DEBUG 2022-02-08 17:11:34,056 stack []
DEBUG 2022-02-08 17:11:34,056 dispatch pc=2, inst=LOAD_FAST(arg=0, lineno=3543)
DEBUG 2022-02-08 17:11:34,056 stack []
DEBUG 2022-02-08 17:11:34,056 dispatch pc=4, inst=LOAD_METHOD(arg=0, lineno=3543)
DEBUG 2022-02-08 17:11:34,056 stack ['$arrtype2.0']
DEBUG 2022-02-08 17:11:34,056 dispatch pc=6, inst=LOAD_FAST(arg=1, lineno=3543)
DEBUG 2022-02-08 17:11:34,056 stack ['$4load_method.1']
DEBUG 2022-02-08 17:11:34,056 dispatch pc=8, inst=LOAD_FAST(arg=2, lineno=3543)
DEBUG 2022-02-08 17:11:34,056 stack ['$4load_method.1', '$size6.2']
DEBUG 2022-02-08 17:11:34,056 dispatch pc=10, inst=CALL_METHOD(arg=2, lineno=3543)
DEBUG 2022-02-08 17:11:34,056 stack ['$4load_method.1', '$size6.2', '$align8.3']
DEBUG 2022-02-08 17:11:34,056 dispatch pc=12, inst=RETURN_VALUE(arg=None, lineno=3543)
DEBUG 2022-02-08 17:11:34,056 stack ['$10call_method.4']
DEBUG 2022-02-08 17:11:34,056 end state. edges=[]
DEBUG 2022-02-08 17:11:34,056 -------------------------Prune PHIs-------------------------
DEBUG 2022-02-08 17:11:34,056 Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
DEBUG 2022-02-08 17:11:34,056 defmap: {}
DEBUG 2022-02-08 17:11:34,056 phismap: defaultdict(<class 'set'>, {})
DEBUG 2022-02-08 17:11:34,056 changing phismap: defaultdict(<class 'set'>, {})
DEBUG 2022-02-08 17:11:34,056 keep phismap: {}
DEBUG 2022-02-08 17:11:34,056 new_out: defaultdict(<class 'dict'>, {})
DEBUG 2022-02-08 17:11:34,056 ----------------------DONE Prune PHIs-----------------------
DEBUG 2022-02-08 17:11:34,056 block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$arrtype2.0'}), (4, {'item': '$arrtype2.0', 'res': '$4load_method.1'}), (6, {'res': '$size6.2'}), (8, {'res': '$align8.3'}), (10, {'func': '$4load_method.1', 'args': ['$size6.2', '$align8.3'], 'res': '$10call_method.4'}), (12, {'retval': '$10call_method.4', 'castval': '$12return_value.5'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG 2022-02-08 17:11:34,056 label 0:
    arrtype = arg(0, name=arrtype)           ['arrtype']
    size = arg(1, name=size)                 ['size']
    align = arg(2, name=align)               ['align']
    $4load_method.1 = getattr(value=arrtype, attr=_allocate) ['$4load_method.1', 'arrtype']
    $10call_method.4 = call $4load_method.1(size, align, func=$4load_method.1, args=[Var(size, arrayobj.py:3543), Var(align, arrayobj.py:3543)], kws=(), vararg=None, target=None) ['$10call_method.4', '$4load_method.1', 'align', 'size']
    $12return_value.5 = cast(value=$10call_method.4) ['$10call_method.4', '$12return_value.5']
    return $12return_value.5                 ['$12return_value.5']

DEBUG 2022-02-08 17:11:34,056 ==== SSA block analysis pass on 0
DEBUG 2022-02-08 17:11:34,056 Running <numba.core.ssa._GatherDefsHandler object at 0x000001E9F66471F0>
DEBUG 2022-02-08 17:11:34,056 on stmt: arrtype = arg(0, name=arrtype)
DEBUG 2022-02-08 17:11:34,056 on stmt: size = arg(1, name=size)
DEBUG 2022-02-08 17:11:34,056 on stmt: align = arg(2, name=align)
DEBUG 2022-02-08 17:11:34,056 on stmt: $4load_method.1 = getattr(value=arrtype, attr=_allocate)
DEBUG 2022-02-08 17:11:34,056 on stmt: $10call_method.4 = call $4load_method.1(size, align, func=$4load_method.1, args=[Var(size, arrayobj.py:3543), Var(align, arrayobj.py:3543)], kws=(), vararg=None, target=None)
DEBUG 2022-02-08 17:11:34,056 on stmt: $12return_value.5 = cast(value=$10call_method.4)
DEBUG 2022-02-08 17:11:34,056 on stmt: return $12return_value.5
DEBUG 2022-02-08 17:11:34,056 defs defaultdict(<class 'list'>,
            {'$10call_method.4': [<numba.core.ir.Assign object at 0x000001E9F6643C40>],
             '$12return_value.5': [<numba.core.ir.Assign object at 0x000001E9F6643D30>],
             '$4load_method.1': [<numba.core.ir.Assign object at 0x000001E9F66437F0>],
             'align': [<numba.core.ir.Assign object at 0x000001E9F6643550>],
             'arrtype': [<numba.core.ir.Assign object at 0x000001E9F663C610>],
             'size': [<numba.core.ir.Assign object at 0x000001E9F663C730>]})
DEBUG 2022-02-08 17:11:34,056 SSA violators set()
DEBUG 2022-02-08 17:11:34,056 bytecode dump:
>          0	NOP(arg=None, lineno=3536)
           2	LOAD_GLOBAL(arg=0, lineno=3536)
           4	LOAD_FAST(arg=1, lineno=3536)
           6	LOAD_FAST(arg=2, lineno=3536)
           8	CALL_FUNCTION(arg=2, lineno=3536)
          10	RETURN_VALUE(arg=None, lineno=3536)
DEBUG 2022-02-08 17:11:34,056 pending: deque([State(pc_initial=0 nstack_initial=0)])
DEBUG 2022-02-08 17:11:34,056 stack: []
DEBUG 2022-02-08 17:11:34,056 dispatch pc=0, inst=NOP(arg=None, lineno=3536)
DEBUG 2022-02-08 17:11:34,056 stack []
DEBUG 2022-02-08 17:11:34,056 dispatch pc=2, inst=LOAD_GLOBAL(arg=0, lineno=3536)
DEBUG 2022-02-08 17:11:34,056 stack []
DEBUG 2022-02-08 17:11:34,056 dispatch pc=4, inst=LOAD_FAST(arg=1, lineno=3536)
DEBUG 2022-02-08 17:11:34,056 stack ['$2load_global.0']
DEBUG 2022-02-08 17:11:34,056 dispatch pc=6, inst=LOAD_FAST(arg=2, lineno=3536)
DEBUG 2022-02-08 17:11:34,056 stack ['$2load_global.0', '$allocsize4.1']
DEBUG 2022-02-08 17:11:34,056 dispatch pc=8, inst=CALL_FUNCTION(arg=2, lineno=3536)
DEBUG 2022-02-08 17:11:34,056 stack ['$2load_global.0', '$allocsize4.1', '$align6.2']
DEBUG 2022-02-08 17:11:34,056 dispatch pc=10, inst=RETURN_VALUE(arg=None, lineno=3536)
DEBUG 2022-02-08 17:11:34,056 stack ['$8call_function.3']
DEBUG 2022-02-08 17:11:34,056 end state. edges=[]
DEBUG 2022-02-08 17:11:34,056 -------------------------Prune PHIs-------------------------
DEBUG 2022-02-08 17:11:34,056 Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
DEBUG 2022-02-08 17:11:34,056 defmap: {}
DEBUG 2022-02-08 17:11:34,056 phismap: defaultdict(<class 'set'>, {})
DEBUG 2022-02-08 17:11:34,056 changing phismap: defaultdict(<class 'set'>, {})
DEBUG 2022-02-08 17:11:34,056 keep phismap: {}
DEBUG 2022-02-08 17:11:34,056 new_out: defaultdict(<class 'dict'>, {})
DEBUG 2022-02-08 17:11:34,056 ----------------------DONE Prune PHIs-----------------------
DEBUG 2022-02-08 17:11:34,056 block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$2load_global.0'}), (4, {'res': '$allocsize4.1'}), (6, {'res': '$align6.2'}), (8, {'func': '$2load_global.0', 'args': ['$allocsize4.1', '$align6.2'], 'res': '$8call_function.3'}), (10, {'retval': '$8call_function.3', 'castval': '$10return_value.4'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG 2022-02-08 17:11:34,056 label 0:
    cls = arg(0, name=cls)                   ['cls']
    allocsize = arg(1, name=allocsize)       ['allocsize']
    align = arg(2, name=align)               ['align']
    $2load_global.0 = global(intrin_alloc: <intrinsic intrin_alloc>) ['$2load_global.0']
    $8call_function.3 = call $2load_global.0(allocsize, align, func=$2load_global.0, args=[Var(allocsize, arrayobj.py:3536), Var(align, arrayobj.py:3536)], kws=(), vararg=None, target=None) ['$2load_global.0', '$8call_function.3', 'align', 'allocsize']
    $10return_value.4 = cast(value=$8call_function.3) ['$10return_value.4', '$8call_function.3']
    return $10return_value.4                 ['$10return_value.4']

DEBUG 2022-02-08 17:11:34,056 ==== SSA block analysis pass on 0
DEBUG 2022-02-08 17:11:34,056 Running <numba.core.ssa._GatherDefsHandler object at 0x000001E9F663C8B0>
DEBUG 2022-02-08 17:11:34,056 on stmt: cls = arg(0, name=cls)
DEBUG 2022-02-08 17:11:34,056 on stmt: allocsize = arg(1, name=allocsize)
DEBUG 2022-02-08 17:11:34,056 on stmt: align = arg(2, name=align)
DEBUG 2022-02-08 17:11:34,056 on stmt: $2load_global.0 = global(intrin_alloc: <intrinsic intrin_alloc>)
DEBUG 2022-02-08 17:11:34,056 on stmt: $8call_function.3 = call $2load_global.0(allocsize, align, func=$2load_global.0, args=[Var(allocsize, arrayobj.py:3536), Var(align, arrayobj.py:3536)], kws=(), vararg=None, target=None)
DEBUG 2022-02-08 17:11:34,071 on stmt: $10return_value.4 = cast(value=$8call_function.3)
DEBUG 2022-02-08 17:11:34,071 on stmt: return $10return_value.4
DEBUG 2022-02-08 17:11:34,071 defs defaultdict(<class 'list'>,
            {'$10return_value.4': [<numba.core.ir.Assign object at 0x000001E9F66C76D0>],
             '$2load_global.0': [<numba.core.ir.Assign object at 0x000001E9F66C7190>],
             '$8call_function.3': [<numba.core.ir.Assign object at 0x000001E9F66C75B0>],
             'align': [<numba.core.ir.Assign object at 0x000001E9F66BDFD0>],
             'allocsize': [<numba.core.ir.Assign object at 0x000001E9F66BD700>],
             'cls': [<numba.core.ir.Assign object at 0x000001E9F66BD820>]})
DEBUG 2022-02-08 17:11:34,071 SSA violators set()
DEBUG 2022-02-08 17:11:34,187 bytecode dump:
>          0	NOP(arg=None, lineno=3)
           2	LOAD_GLOBAL(arg=0, lineno=3)
           4	LOAD_FAST(arg=0, lineno=3)
           6	CALL_FUNCTION(arg=1, lineno=3)
           8	RETURN_VALUE(arg=None, lineno=3)
DEBUG 2022-02-08 17:11:34,187 pending: deque([State(pc_initial=0 nstack_initial=0)])
DEBUG 2022-02-08 17:11:34,187 stack: []
DEBUG 2022-02-08 17:11:34,187 dispatch pc=0, inst=NOP(arg=None, lineno=3)
DEBUG 2022-02-08 17:11:34,187 stack []
DEBUG 2022-02-08 17:11:34,187 dispatch pc=2, inst=LOAD_GLOBAL(arg=0, lineno=3)
DEBUG 2022-02-08 17:11:34,187 stack []
DEBUG 2022-02-08 17:11:34,187 dispatch pc=4, inst=LOAD_FAST(arg=0, lineno=3)
DEBUG 2022-02-08 17:11:34,187 stack ['$2load_global.0']
DEBUG 2022-02-08 17:11:34,187 dispatch pc=6, inst=CALL_FUNCTION(arg=1, lineno=3)
DEBUG 2022-02-08 17:11:34,187 stack ['$2load_global.0', '$tmp04.1']
DEBUG 2022-02-08 17:11:34,187 dispatch pc=8, inst=RETURN_VALUE(arg=None, lineno=3)
DEBUG 2022-02-08 17:11:34,187 stack ['$6call_function.2']
DEBUG 2022-02-08 17:11:34,187 end state. edges=[]
DEBUG 2022-02-08 17:11:34,187 -------------------------Prune PHIs-------------------------
DEBUG 2022-02-08 17:11:34,187 Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
DEBUG 2022-02-08 17:11:34,187 defmap: {}
DEBUG 2022-02-08 17:11:34,187 phismap: defaultdict(<class 'set'>, {})
DEBUG 2022-02-08 17:11:34,187 changing phismap: defaultdict(<class 'set'>, {})
DEBUG 2022-02-08 17:11:34,187 keep phismap: {}
DEBUG 2022-02-08 17:11:34,187 new_out: defaultdict(<class 'dict'>, {})
DEBUG 2022-02-08 17:11:34,187 ----------------------DONE Prune PHIs-----------------------
DEBUG 2022-02-08 17:11:34,187 block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$2load_global.0'}), (4, {'res': '$tmp04.1'}), (6, {'func': '$2load_global.0', 'args': ['$tmp04.1'], 'res': '$6call_function.2'}), (8, {'retval': '$6call_function.2', 'castval': '$8return_value.3'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG 2022-02-08 17:11:34,187 label 0:
    tmp0 = arg(0, name=tmp0)                 ['tmp0']
    $2load_global.0 = global(intrin: <intrinsic stub>) ['$2load_global.0']
    $6call_function.2 = call $2load_global.0(tmp0, func=$2load_global.0, args=[Var(tmp0, <string>:3)], kws=(), vararg=None, target=None) ['$2load_global.0', '$6call_function.2', 'tmp0']
    $8return_value.3 = cast(value=$6call_function.2) ['$6call_function.2', '$8return_value.3']
    return $8return_value.3                  ['$8return_value.3']

DEBUG 2022-02-08 17:11:34,187 ==== SSA block analysis pass on 0
DEBUG 2022-02-08 17:11:34,187 Running <numba.core.ssa._GatherDefsHandler object at 0x000001E9F673E820>
DEBUG 2022-02-08 17:11:34,187 on stmt: tmp0 = arg(0, name=tmp0)
DEBUG 2022-02-08 17:11:34,187 on stmt: $2load_global.0 = global(intrin: <intrinsic stub>)
DEBUG 2022-02-08 17:11:34,187 on stmt: $6call_function.2 = call $2load_global.0(tmp0, func=$2load_global.0, args=[Var(tmp0, <string>:3)], kws=(), vararg=None, target=None)
DEBUG 2022-02-08 17:11:34,187 on stmt: $8return_value.3 = cast(value=$6call_function.2)
DEBUG 2022-02-08 17:11:34,187 on stmt: return $8return_value.3
DEBUG 2022-02-08 17:11:34,187 defs defaultdict(<class 'list'>,
            {'$2load_global.0': [<numba.core.ir.Assign object at 0x000001E9F661CA30>],
             '$6call_function.2': [<numba.core.ir.Assign object at 0x000001E9F66E22B0>],
             '$8return_value.3': [<numba.core.ir.Assign object at 0x000001E9F66E2A30>],
             'tmp0': [<numba.core.ir.Assign object at 0x000001E9F661C9A0>]})
DEBUG 2022-02-08 17:11:34,187 SSA violators set()
DEBUG 2022-02-08 17:11:34,272 bytecode dump:
>          0	NOP(arg=None, lineno=41)
           2	LOAD_FAST(arg=0, lineno=41)
           4	LOAD_FAST(arg=1, lineno=41)
           6	BINARY_SUBSCR(arg=None, lineno=41)
           8	LOAD_CONST(arg=1, lineno=41)
          10	LOAD_CONST(arg=1, lineno=41)
          12	BUILD_SLICE(arg=2, lineno=41)
          14	LOAD_FAST(arg=2, lineno=41)
          16	BUILD_TUPLE(arg=2, lineno=41)
          18	BINARY_SUBSCR(arg=None, lineno=41)
          20	RETURN_VALUE(arg=None, lineno=41)
DEBUG 2022-02-08 17:11:34,272 pending: deque([State(pc_initial=0 nstack_initial=0)])
DEBUG 2022-02-08 17:11:34,272 stack: []
DEBUG 2022-02-08 17:11:34,272 dispatch pc=0, inst=NOP(arg=None, lineno=41)
DEBUG 2022-02-08 17:11:34,272 stack []
DEBUG 2022-02-08 17:11:34,272 dispatch pc=2, inst=LOAD_FAST(arg=0, lineno=41)
DEBUG 2022-02-08 17:11:34,272 stack []
DEBUG 2022-02-08 17:11:34,272 dispatch pc=4, inst=LOAD_FAST(arg=1, lineno=41)
DEBUG 2022-02-08 17:11:34,272 stack ['$arr2.0']
DEBUG 2022-02-08 17:11:34,272 dispatch pc=6, inst=BINARY_SUBSCR(arg=None, lineno=41)
DEBUG 2022-02-08 17:11:34,272 stack ['$arr2.0', '$rows4.1']
DEBUG 2022-02-08 17:11:34,272 dispatch pc=8, inst=LOAD_CONST(arg=1, lineno=41)
DEBUG 2022-02-08 17:11:34,272 stack ['$6binary_subscr.2']
DEBUG 2022-02-08 17:11:34,272 dispatch pc=10, inst=LOAD_CONST(arg=1, lineno=41)
DEBUG 2022-02-08 17:11:34,272 stack ['$6binary_subscr.2', '$const8.3']
DEBUG 2022-02-08 17:11:34,272 dispatch pc=12, inst=BUILD_SLICE(arg=2, lineno=41)
DEBUG 2022-02-08 17:11:34,272 stack ['$6binary_subscr.2', '$const8.3', '$const10.4']
DEBUG 2022-02-08 17:11:34,272 dispatch pc=14, inst=LOAD_FAST(arg=2, lineno=41)
DEBUG 2022-02-08 17:11:34,272 stack ['$6binary_subscr.2', '$12build_slice.6']
DEBUG 2022-02-08 17:11:34,272 dispatch pc=16, inst=BUILD_TUPLE(arg=2, lineno=41)
DEBUG 2022-02-08 17:11:34,272 stack ['$6binary_subscr.2', '$12build_slice.6', '$cols14.7']
DEBUG 2022-02-08 17:11:34,272 dispatch pc=18, inst=BINARY_SUBSCR(arg=None, lineno=41)
DEBUG 2022-02-08 17:11:34,272 stack ['$6binary_subscr.2', '$16build_tuple.8']
DEBUG 2022-02-08 17:11:34,272 dispatch pc=20, inst=RETURN_VALUE(arg=None, lineno=41)
DEBUG 2022-02-08 17:11:34,272 stack ['$18binary_subscr.9']
DEBUG 2022-02-08 17:11:34,272 end state. edges=[]
DEBUG 2022-02-08 17:11:34,272 -------------------------Prune PHIs-------------------------
DEBUG 2022-02-08 17:11:34,272 Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
DEBUG 2022-02-08 17:11:34,272 defmap: {}
DEBUG 2022-02-08 17:11:34,272 phismap: defaultdict(<class 'set'>, {})
DEBUG 2022-02-08 17:11:34,272 changing phismap: defaultdict(<class 'set'>, {})
DEBUG 2022-02-08 17:11:34,272 keep phismap: {}
DEBUG 2022-02-08 17:11:34,272 new_out: defaultdict(<class 'dict'>, {})
DEBUG 2022-02-08 17:11:34,272 ----------------------DONE Prune PHIs-----------------------
DEBUG 2022-02-08 17:11:34,272 block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$arr2.0'}), (4, {'res': '$rows4.1'}), (6, {'index': '$rows4.1', 'target': '$arr2.0', 'res': '$6binary_subscr.2'}), (8, {'res': '$const8.3'}), (10, {'res': '$const10.4'}), (12, {'start': '$const8.3', 'stop': '$const10.4', 'step': None, 'res': '$12build_slice.6', 'slicevar': '$12build_slice.5'}), (14, {'res': '$cols14.7'}), (16, {'items': ['$12build_slice.6', '$cols14.7'], 'res': '$16build_tuple.8'}), (18, {'index': '$16build_tuple.8', 'target': '$6binary_subscr.2', 'res': '$18binary_subscr.9'}), (20, {'retval': '$18binary_subscr.9', 'castval': '$20return_value.10'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG 2022-02-08 17:11:34,272 label 0:
    arr = arg(0, name=arr)                   ['arr']
    rows = arg(1, name=rows)                 ['rows']
    cols = arg(2, name=cols)                 ['cols']
    $6binary_subscr.2 = getitem(value=arr, index=rows, fn=<built-in function getitem>) ['$6binary_subscr.2', 'arr', 'rows']
    $const8.3 = const(NoneType, None)        ['$const8.3']
    $const10.4 = const(NoneType, None)       ['$const10.4']
    $12build_slice.5 = global(slice: <class 'slice'>) ['$12build_slice.5']
    $12build_slice.6 = call $12build_slice.5($const8.3, $const10.4, func=$12build_slice.5, args=(Var($const8.3, _loop_hafnian_subroutines.py:41), Var($const10.4, _loop_hafnian_subroutines.py:41)), kws=(), vararg=None, target=None) ['$12build_slice.5', '$12build_slice.6', '$const10.4', '$const8.3']
    $16build_tuple.8 = build_tuple(items=[Var($12build_slice.6, _loop_hafnian_subroutines.py:41), Var(cols, _loop_hafnian_subroutines.py:41)]) ['$12build_slice.6', '$16build_tuple.8', 'cols']
    $18binary_subscr.9 = getitem(value=$6binary_subscr.2, index=$16build_tuple.8, fn=<built-in function getitem>) ['$16build_tuple.8', '$18binary_subscr.9', '$6binary_subscr.2']
    $20return_value.10 = cast(value=$18binary_subscr.9) ['$18binary_subscr.9', '$20return_value.10']
    return $20return_value.10                ['$20return_value.10']

DEBUG 2022-02-08 17:11:34,272 ==== SSA block analysis pass on 0
DEBUG 2022-02-08 17:11:34,272 Running <numba.core.ssa._GatherDefsHandler object at 0x000001E9F7756580>
DEBUG 2022-02-08 17:11:34,272 on stmt: arr = arg(0, name=arr)
DEBUG 2022-02-08 17:11:34,272 on stmt: rows = arg(1, name=rows)
DEBUG 2022-02-08 17:11:34,272 on stmt: cols = arg(2, name=cols)
DEBUG 2022-02-08 17:11:34,272 on stmt: $6binary_subscr.2 = getitem(value=arr, index=rows, fn=<built-in function getitem>)
DEBUG 2022-02-08 17:11:34,272 on stmt: $const8.3 = const(NoneType, None)
DEBUG 2022-02-08 17:11:34,272 on stmt: $const10.4 = const(NoneType, None)
DEBUG 2022-02-08 17:11:34,272 on stmt: $12build_slice.5 = global(slice: <class 'slice'>)
DEBUG 2022-02-08 17:11:34,272 on stmt: $12build_slice.6 = call $12build_slice.5($const8.3, $const10.4, func=$12build_slice.5, args=(Var($const8.3, _loop_hafnian_subroutines.py:41), Var($const10.4, _loop_hafnian_subroutines.py:41)), kws=(), vararg=None, target=None)
DEBUG 2022-02-08 17:11:34,272 on stmt: $16build_tuple.8 = build_tuple(items=[Var($12build_slice.6, _loop_hafnian_subroutines.py:41), Var(cols, _loop_hafnian_subroutines.py:41)])
DEBUG 2022-02-08 17:11:34,272 on stmt: $18binary_subscr.9 = getitem(value=$6binary_subscr.2, index=$16build_tuple.8, fn=<built-in function getitem>)
DEBUG 2022-02-08 17:11:34,272 on stmt: $20return_value.10 = cast(value=$18binary_subscr.9)
DEBUG 2022-02-08 17:11:34,272 on stmt: return $20return_value.10
DEBUG 2022-02-08 17:11:34,272 defs defaultdict(<class 'list'>,
            {'$12build_slice.5': [<numba.core.ir.Assign object at 0x000001E9F775B280>],
             '$12build_slice.6': [<numba.core.ir.Assign object at 0x000001E9F775B3A0>],
             '$16build_tuple.8': [<numba.core.ir.Assign object at 0x000001E9F775B670>],
             '$18binary_subscr.9': [<numba.core.ir.Assign object at 0x000001E9F775B7F0>],
             '$20return_value.10': [<numba.core.ir.Assign object at 0x000001E9F775B940>],
             '$6binary_subscr.2': [<numba.core.ir.Assign object at 0x000001E9F7756DF0>],
             '$const10.4': [<numba.core.ir.Assign object at 0x000001E9F775B100>],
             '$const8.3': [<numba.core.ir.Assign object at 0x000001E9F7756F40>],
             'arr': [<numba.core.ir.Assign object at 0x000001E9F7756190>],
             'cols': [<numba.core.ir.Assign object at 0x000001E9F7756A00>],
             'rows': [<numba.core.ir.Assign object at 0x000001E9F7756040>]})
DEBUG 2022-02-08 17:11:34,272 SSA violators set()
DEBUG 2022-02-08 17:11:34,473 bytecode dump:
>          0	NOP(arg=None, lineno=3)
           2	LOAD_GLOBAL(arg=0, lineno=3)
           4	LOAD_FAST(arg=0, lineno=3)
           6	LOAD_FAST(arg=1, lineno=3)
           8	CALL_FUNCTION(arg=2, lineno=3)
          10	RETURN_VALUE(arg=None, lineno=3)
DEBUG 2022-02-08 17:11:34,473 pending: deque([State(pc_initial=0 nstack_initial=0)])
DEBUG 2022-02-08 17:11:34,473 stack: []
DEBUG 2022-02-08 17:11:34,473 dispatch pc=0, inst=NOP(arg=None, lineno=3)
DEBUG 2022-02-08 17:11:34,473 stack []
DEBUG 2022-02-08 17:11:34,473 dispatch pc=2, inst=LOAD_GLOBAL(arg=0, lineno=3)
DEBUG 2022-02-08 17:11:34,473 stack []
DEBUG 2022-02-08 17:11:34,473 dispatch pc=4, inst=LOAD_FAST(arg=0, lineno=3)
DEBUG 2022-02-08 17:11:34,473 stack ['$2load_global.0']
DEBUG 2022-02-08 17:11:34,473 dispatch pc=6, inst=LOAD_FAST(arg=1, lineno=3)
DEBUG 2022-02-08 17:11:34,473 stack ['$2load_global.0', '$tmp04.1']
DEBUG 2022-02-08 17:11:34,473 dispatch pc=8, inst=CALL_FUNCTION(arg=2, lineno=3)
DEBUG 2022-02-08 17:11:34,473 stack ['$2load_global.0', '$tmp04.1', '$dtype6.2']
DEBUG 2022-02-08 17:11:34,473 dispatch pc=10, inst=RETURN_VALUE(arg=None, lineno=3)
DEBUG 2022-02-08 17:11:34,473 stack ['$8call_function.3']
DEBUG 2022-02-08 17:11:34,473 end state. edges=[]
DEBUG 2022-02-08 17:11:34,473 -------------------------Prune PHIs-------------------------
DEBUG 2022-02-08 17:11:34,473 Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
DEBUG 2022-02-08 17:11:34,473 defmap: {}
DEBUG 2022-02-08 17:11:34,473 phismap: defaultdict(<class 'set'>, {})
DEBUG 2022-02-08 17:11:34,473 changing phismap: defaultdict(<class 'set'>, {})
DEBUG 2022-02-08 17:11:34,473 keep phismap: {}
DEBUG 2022-02-08 17:11:34,473 new_out: defaultdict(<class 'dict'>, {})
DEBUG 2022-02-08 17:11:34,473 ----------------------DONE Prune PHIs-----------------------
DEBUG 2022-02-08 17:11:34,473 block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$2load_global.0'}), (4, {'res': '$tmp04.1'}), (6, {'res': '$dtype6.2'}), (8, {'func': '$2load_global.0', 'args': ['$tmp04.1', '$dtype6.2'], 'res': '$8call_function.3'}), (10, {'retval': '$8call_function.3', 'castval': '$10return_value.4'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG 2022-02-08 17:11:34,473 label 0:
    tmp0 = arg(0, name=tmp0)                 ['tmp0']
    dtype = arg(1, name=dtype)               ['dtype']
    $2load_global.0 = global(intrin: <intrinsic stub>) ['$2load_global.0']
    $8call_function.3 = call $2load_global.0(tmp0, dtype, func=$2load_global.0, args=[Var(tmp0, <string>:3), Var(dtype, <string>:3)], kws=(), vararg=None, target=None) ['$2load_global.0', '$8call_function.3', 'dtype', 'tmp0']
    $10return_value.4 = cast(value=$8call_function.3) ['$10return_value.4', '$8call_function.3']
    return $10return_value.4                 ['$10return_value.4']

DEBUG 2022-02-08 17:11:34,473 ==== SSA block analysis pass on 0
DEBUG 2022-02-08 17:11:34,473 Running <numba.core.ssa._GatherDefsHandler object at 0x000001E9F78448E0>
DEBUG 2022-02-08 17:11:34,473 on stmt: tmp0 = arg(0, name=tmp0)
DEBUG 2022-02-08 17:11:34,473 on stmt: dtype = arg(1, name=dtype)
DEBUG 2022-02-08 17:11:34,473 on stmt: $2load_global.0 = global(intrin: <intrinsic stub>)
DEBUG 2022-02-08 17:11:34,473 on stmt: $8call_function.3 = call $2load_global.0(tmp0, dtype, func=$2load_global.0, args=[Var(tmp0, <string>:3), Var(dtype, <string>:3)], kws=(), vararg=None, target=None)
DEBUG 2022-02-08 17:11:34,473 on stmt: $10return_value.4 = cast(value=$8call_function.3)
DEBUG 2022-02-08 17:11:34,473 on stmt: return $10return_value.4
DEBUG 2022-02-08 17:11:34,473 defs defaultdict(<class 'list'>,
            {'$10return_value.4': [<numba.core.ir.Assign object at 0x000001E9F7854CA0>],
             '$2load_global.0': [<numba.core.ir.Assign object at 0x000001E9F7854760>],
             '$8call_function.3': [<numba.core.ir.Assign object at 0x000001E9F7854B80>],
             'dtype': [<numba.core.ir.Assign object at 0x000001E9F7854070>],
             'tmp0': [<numba.core.ir.Assign object at 0x000001E9F7854190>]})
DEBUG 2022-02-08 17:11:34,473 SSA violators set()
DEBUG 2022-02-08 17:11:34,535 bytecode dump:
>          0	NOP(arg=None, lineno=3)
           2	LOAD_GLOBAL(arg=0, lineno=3)
           4	LOAD_FAST(arg=0, lineno=3)
           6	LOAD_FAST(arg=1, lineno=3)
           8	CALL_FUNCTION(arg=2, lineno=3)
          10	RETURN_VALUE(arg=None, lineno=3)
DEBUG 2022-02-08 17:11:34,535 pending: deque([State(pc_initial=0 nstack_initial=0)])
DEBUG 2022-02-08 17:11:34,535 stack: []
DEBUG 2022-02-08 17:11:34,535 dispatch pc=0, inst=NOP(arg=None, lineno=3)
DEBUG 2022-02-08 17:11:34,535 stack []
DEBUG 2022-02-08 17:11:34,535 dispatch pc=2, inst=LOAD_GLOBAL(arg=0, lineno=3)
DEBUG 2022-02-08 17:11:34,535 stack []
DEBUG 2022-02-08 17:11:34,535 dispatch pc=4, inst=LOAD_FAST(arg=0, lineno=3)
DEBUG 2022-02-08 17:11:34,535 stack ['$2load_global.0']
DEBUG 2022-02-08 17:11:34,535 dispatch pc=6, inst=LOAD_FAST(arg=1, lineno=3)
DEBUG 2022-02-08 17:11:34,535 stack ['$2load_global.0', '$tmp04.1']
DEBUG 2022-02-08 17:11:34,535 dispatch pc=8, inst=CALL_FUNCTION(arg=2, lineno=3)
DEBUG 2022-02-08 17:11:34,535 stack ['$2load_global.0', '$tmp04.1', '$dtype6.2']
DEBUG 2022-02-08 17:11:34,535 dispatch pc=10, inst=RETURN_VALUE(arg=None, lineno=3)
DEBUG 2022-02-08 17:11:34,535 stack ['$8call_function.3']
DEBUG 2022-02-08 17:11:34,535 end state. edges=[]
DEBUG 2022-02-08 17:11:34,535 -------------------------Prune PHIs-------------------------
DEBUG 2022-02-08 17:11:34,535 Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
DEBUG 2022-02-08 17:11:34,535 defmap: {}
DEBUG 2022-02-08 17:11:34,535 phismap: defaultdict(<class 'set'>, {})
DEBUG 2022-02-08 17:11:34,535 changing phismap: defaultdict(<class 'set'>, {})
DEBUG 2022-02-08 17:11:34,535 keep phismap: {}
DEBUG 2022-02-08 17:11:34,535 new_out: defaultdict(<class 'dict'>, {})
DEBUG 2022-02-08 17:11:34,535 ----------------------DONE Prune PHIs-----------------------
DEBUG 2022-02-08 17:11:34,535 block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$2load_global.0'}), (4, {'res': '$tmp04.1'}), (6, {'res': '$dtype6.2'}), (8, {'func': '$2load_global.0', 'args': ['$tmp04.1', '$dtype6.2'], 'res': '$8call_function.3'}), (10, {'retval': '$8call_function.3', 'castval': '$10return_value.4'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG 2022-02-08 17:11:34,535 label 0:
    tmp0 = arg(0, name=tmp0)                 ['tmp0']
    dtype = arg(1, name=dtype)               ['dtype']
    $2load_global.0 = global(intrin: <intrinsic stub>) ['$2load_global.0']
    $8call_function.3 = call $2load_global.0(tmp0, dtype, func=$2load_global.0, args=[Var(tmp0, <string>:3), Var(dtype, <string>:3)], kws=(), vararg=None, target=None) ['$2load_global.0', '$8call_function.3', 'dtype', 'tmp0']
    $10return_value.4 = cast(value=$8call_function.3) ['$10return_value.4', '$8call_function.3']
    return $10return_value.4                 ['$10return_value.4']

DEBUG 2022-02-08 17:11:34,535 ==== SSA block analysis pass on 0
DEBUG 2022-02-08 17:11:34,535 Running <numba.core.ssa._GatherDefsHandler object at 0x000001E9F7814340>
DEBUG 2022-02-08 17:11:34,535 on stmt: tmp0 = arg(0, name=tmp0)
DEBUG 2022-02-08 17:11:34,535 on stmt: dtype = arg(1, name=dtype)
DEBUG 2022-02-08 17:11:34,535 on stmt: $2load_global.0 = global(intrin: <intrinsic stub>)
DEBUG 2022-02-08 17:11:34,535 on stmt: $8call_function.3 = call $2load_global.0(tmp0, dtype, func=$2load_global.0, args=[Var(tmp0, <string>:3), Var(dtype, <string>:3)], kws=(), vararg=None, target=None)
DEBUG 2022-02-08 17:11:34,535 on stmt: $10return_value.4 = cast(value=$8call_function.3)
DEBUG 2022-02-08 17:11:34,535 on stmt: return $10return_value.4
DEBUG 2022-02-08 17:11:34,535 defs defaultdict(<class 'list'>,
            {'$10return_value.4': [<numba.core.ir.Assign object at 0x000001E9F774A430>],
             '$2load_global.0': [<numba.core.ir.Assign object at 0x000001E9F78147F0>],
             '$8call_function.3': [<numba.core.ir.Assign object at 0x000001E9F774A370>],
             'dtype': [<numba.core.ir.Assign object at 0x000001E9F7814E50>],
             'tmp0': [<numba.core.ir.Assign object at 0x000001E9F7814EE0>]})
DEBUG 2022-02-08 17:11:34,535 SSA violators set()
DEBUG 2022-02-08 17:11:34,620 bytecode dump:
>          0	NOP(arg=None, lineno=187)
           2	LOAD_FAST(arg=0, lineno=187)
           4	LOAD_CONST(arg=1, lineno=1)
           6	COMPARE_OP(arg=3, lineno=1)
           8	RETURN_VALUE(arg=None, lineno=1)
DEBUG 2022-02-08 17:11:34,620 pending: deque([State(pc_initial=0 nstack_initial=0)])
DEBUG 2022-02-08 17:11:34,620 stack: []
DEBUG 2022-02-08 17:11:34,620 dispatch pc=0, inst=NOP(arg=None, lineno=187)
DEBUG 2022-02-08 17:11:34,620 stack []
DEBUG 2022-02-08 17:11:34,620 dispatch pc=2, inst=LOAD_FAST(arg=0, lineno=187)
DEBUG 2022-02-08 17:11:34,620 stack []
DEBUG 2022-02-08 17:11:34,620 dispatch pc=4, inst=LOAD_CONST(arg=1, lineno=1)
DEBUG 2022-02-08 17:11:34,620 stack ['$z_12.0']
DEBUG 2022-02-08 17:11:34,620 dispatch pc=6, inst=COMPARE_OP(arg=3, lineno=1)
DEBUG 2022-02-08 17:11:34,620 stack ['$z_12.0', '$const4.1']
DEBUG 2022-02-08 17:11:34,620 dispatch pc=8, inst=RETURN_VALUE(arg=None, lineno=1)
DEBUG 2022-02-08 17:11:34,620 stack ['$6compare_op.2']
DEBUG 2022-02-08 17:11:34,620 end state. edges=[]
DEBUG 2022-02-08 17:11:34,620 -------------------------Prune PHIs-------------------------
DEBUG 2022-02-08 17:11:34,620 Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
DEBUG 2022-02-08 17:11:34,620 defmap: {}
DEBUG 2022-02-08 17:11:34,620 phismap: defaultdict(<class 'set'>, {})
DEBUG 2022-02-08 17:11:34,620 changing phismap: defaultdict(<class 'set'>, {})
DEBUG 2022-02-08 17:11:34,620 keep phismap: {}
DEBUG 2022-02-08 17:11:34,620 new_out: defaultdict(<class 'dict'>, {})
DEBUG 2022-02-08 17:11:34,620 ----------------------DONE Prune PHIs-----------------------
DEBUG 2022-02-08 17:11:34,620 block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$z_12.0'}), (4, {'res': '$const4.1'}), (6, {'lhs': '$z_12.0', 'rhs': '$const4.1', 'res': '$6compare_op.2'}), (8, {'retval': '$6compare_op.2', 'castval': '$8return_value.3'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG 2022-02-08 17:11:34,620 label 0:
    z_1 = arg(0, name=z_1)                   ['z_1']
    $const4.1 = const(int, 0)                ['$const4.1']
    $6compare_op.2 = z_1 != $const4.1        ['$6compare_op.2', '$const4.1', 'z_1']
    $8return_value.3 = cast(value=$6compare_op.2) ['$6compare_op.2', '$8return_value.3']
    return $8return_value.3                  ['$8return_value.3']

DEBUG 2022-02-08 17:11:34,620 ==== SSA block analysis pass on 0
DEBUG 2022-02-08 17:11:34,620 Running <numba.core.ssa._GatherDefsHandler object at 0x000001E9F78BABB0>
DEBUG 2022-02-08 17:11:34,620 on stmt: z_1 = arg(0, name=z_1)
DEBUG 2022-02-08 17:11:34,620 on stmt: $const4.1 = const(int, 0)
DEBUG 2022-02-08 17:11:34,620 on stmt: $6compare_op.2 = z_1 != $const4.1
DEBUG 2022-02-08 17:11:34,620 on stmt: $8return_value.3 = cast(value=$6compare_op.2)
DEBUG 2022-02-08 17:11:34,620 on stmt: return $8return_value.3
DEBUG 2022-02-08 17:11:34,620 defs defaultdict(<class 'list'>,
            {'$6compare_op.2': [<numba.core.ir.Assign object at 0x000001E9F78C1850>],
             '$8return_value.3': [<numba.core.ir.Assign object at 0x000001E9F78C19A0>],
             '$const4.1': [<numba.core.ir.Assign object at 0x000001E9F78C16A0>],
             'z_1': [<numba.core.ir.Assign object at 0x000001E9F78BA5B0>]})
DEBUG 2022-02-08 17:11:34,620 SSA violators set()
DEBUG 2022-02-08 17:11:34,635 bytecode dump:
>          0	NOP(arg=None, lineno=205)
           2	LOAD_FAST(arg=0, lineno=205)
           4	LOAD_FAST(arg=2, lineno=205)
           6	COMPARE_OP(arg=4, lineno=205)
           8	POP_JUMP_IF_FALSE(arg=14, lineno=205)
          10	LOAD_CONST(arg=1, lineno=208)
          12	RETURN_VALUE(arg=None, lineno=208)
>         14	LOAD_CONST(arg=1, lineno=210)
          16	STORE_FAST(arg=4, lineno=210)
          18	LOAD_FAST(arg=2, lineno=211)
          20	LOAD_FAST(arg=0, lineno=211)
          22	BINARY_SUBTRACT(arg=None, lineno=211)
          24	STORE_FAST(arg=5, lineno=211)
>         26	LOAD_FAST(arg=4, lineno=212)
          28	LOAD_FAST(arg=0, lineno=212)
          30	COMPARE_OP(arg=0, lineno=212)
          32	POP_JUMP_IF_FALSE(arg=120, lineno=212)
          34	LOAD_FAST(arg=1, lineno=213)
          36	LOAD_FAST(arg=4, lineno=213)
          38	BINARY_SUBSCR(arg=None, lineno=213)
          40	STORE_FAST(arg=6, lineno=213)
          42	LOAD_FAST(arg=3, lineno=214)
          44	LOAD_FAST(arg=5, lineno=214)
          46	BINARY_SUBSCR(arg=None, lineno=214)
          48	STORE_FAST(arg=7, lineno=214)
          50	LOAD_FAST(arg=7, lineno=217)
          52	LOAD_CONST(arg=2, lineno=217)
          54	COMPARE_OP(arg=3, lineno=217)
          56	POP_JUMP_IF_FALSE(arg=86, lineno=217)
          58	LOAD_FAST(arg=6, lineno=221)
          60	LOAD_FAST(arg=7, lineno=221)
          62	COMPARE_OP(arg=3, lineno=221)
          64	POP_JUMP_IF_FALSE(arg=102, lineno=221)
          66	LOAD_FAST(arg=6, lineno=221)
          68	LOAD_CONST(arg=2, lineno=221)
          70	COMPARE_OP(arg=3, lineno=221)
          72	POP_JUMP_IF_FALSE(arg=102, lineno=221)
          74	LOAD_FAST(arg=5, lineno=222)
          76	LOAD_CONST(arg=2, lineno=222)
          78	BINARY_ADD(arg=None, lineno=222)
          80	UNARY_NEGATIVE(arg=None, lineno=222)
          82	RETURN_VALUE(arg=None, lineno=222)
          84	JUMP_FORWARD(arg=16, lineno=222)
>         86	LOAD_FAST(arg=6, lineno=223)
          88	LOAD_CONST(arg=2, lineno=223)
          90	COMPARE_OP(arg=3, lineno=223)
          92	POP_JUMP_IF_FALSE(arg=102, lineno=223)
          94	LOAD_FAST(arg=6, lineno=225)
          96	LOAD_FAST(arg=3, lineno=225)
          98	LOAD_FAST(arg=5, lineno=225)
         100	STORE_SUBSCR(arg=None, lineno=225)
>        102	LOAD_FAST(arg=4, lineno=226)
         104	LOAD_CONST(arg=2, lineno=226)
         106	INPLACE_ADD(arg=None, lineno=226)
         108	STORE_FAST(arg=4, lineno=226)
         110	LOAD_FAST(arg=5, lineno=227)
         112	LOAD_CONST(arg=2, lineno=227)
         114	INPLACE_ADD(arg=None, lineno=227)
         116	STORE_FAST(arg=5, lineno=227)
         118	JUMP_ABSOLUTE(arg=26, lineno=227)
>        120	LOAD_FAST(arg=5, lineno=228)
         122	RETURN_VALUE(arg=None, lineno=228)
DEBUG 2022-02-08 17:11:34,635 pending: deque([State(pc_initial=0 nstack_initial=0)])
DEBUG 2022-02-08 17:11:34,635 stack: []
DEBUG 2022-02-08 17:11:34,635 dispatch pc=0, inst=NOP(arg=None, lineno=205)
DEBUG 2022-02-08 17:11:34,635 stack []
DEBUG 2022-02-08 17:11:34,635 dispatch pc=2, inst=LOAD_FAST(arg=0, lineno=205)
DEBUG 2022-02-08 17:11:34,635 stack []
DEBUG 2022-02-08 17:11:34,635 dispatch pc=4, inst=LOAD_FAST(arg=2, lineno=205)
DEBUG 2022-02-08 17:11:34,635 stack ['$src_ndim2.0']
DEBUG 2022-02-08 17:11:34,635 dispatch pc=6, inst=COMPARE_OP(arg=4, lineno=205)
DEBUG 2022-02-08 17:11:34,635 stack ['$src_ndim2.0', '$dest_ndim4.1']
DEBUG 2022-02-08 17:11:34,635 dispatch pc=8, inst=POP_JUMP_IF_FALSE(arg=14, lineno=205)
DEBUG 2022-02-08 17:11:34,635 stack ['$6compare_op.2']
DEBUG 2022-02-08 17:11:34,635 end state. edges=[Edge(pc=10, stack=(), blockstack=(), npush=0), Edge(pc=14, stack=(), blockstack=(), npush=0)]
DEBUG 2022-02-08 17:11:34,635 pending: deque([State(pc_initial=10 nstack_initial=0), State(pc_initial=14 nstack_initial=0)])
DEBUG 2022-02-08 17:11:34,635 stack: []
DEBUG 2022-02-08 17:11:34,635 dispatch pc=10, inst=LOAD_CONST(arg=1, lineno=208)
DEBUG 2022-02-08 17:11:34,635 stack []
DEBUG 2022-02-08 17:11:34,635 dispatch pc=12, inst=RETURN_VALUE(arg=None, lineno=208)
DEBUG 2022-02-08 17:11:34,635 stack ['$const10.0']
DEBUG 2022-02-08 17:11:34,635 end state. edges=[]
DEBUG 2022-02-08 17:11:34,635 pending: deque([State(pc_initial=14 nstack_initial=0)])
DEBUG 2022-02-08 17:11:34,635 stack: []
DEBUG 2022-02-08 17:11:34,635 dispatch pc=14, inst=LOAD_CONST(arg=1, lineno=210)
DEBUG 2022-02-08 17:11:34,635 stack []
DEBUG 2022-02-08 17:11:34,635 dispatch pc=16, inst=STORE_FAST(arg=4, lineno=210)
DEBUG 2022-02-08 17:11:34,635 stack ['$const14.0']
DEBUG 2022-02-08 17:11:34,635 dispatch pc=18, inst=LOAD_FAST(arg=2, lineno=211)
DEBUG 2022-02-08 17:11:34,635 stack []
DEBUG 2022-02-08 17:11:34,635 dispatch pc=20, inst=LOAD_FAST(arg=0, lineno=211)
DEBUG 2022-02-08 17:11:34,635 stack ['$dest_ndim18.1']
DEBUG 2022-02-08 17:11:34,635 dispatch pc=22, inst=BINARY_SUBTRACT(arg=None, lineno=211)
DEBUG 2022-02-08 17:11:34,635 stack ['$dest_ndim18.1', '$src_ndim20.2']
DEBUG 2022-02-08 17:11:34,635 dispatch pc=24, inst=STORE_FAST(arg=5, lineno=211)
DEBUG 2022-02-08 17:11:34,635 stack ['$22binary_subtract.3']
DEBUG 2022-02-08 17:11:34,635 end state. edges=[Edge(pc=26, stack=(), blockstack=(), npush=0)]
DEBUG 2022-02-08 17:11:34,635 pending: deque([State(pc_initial=26 nstack_initial=0)])
DEBUG 2022-02-08 17:11:34,635 stack: []
DEBUG 2022-02-08 17:11:34,635 dispatch pc=26, inst=LOAD_FAST(arg=4, lineno=212)
DEBUG 2022-02-08 17:11:34,635 stack []
DEBUG 2022-02-08 17:11:34,635 dispatch pc=28, inst=LOAD_FAST(arg=0, lineno=212)
DEBUG 2022-02-08 17:11:34,635 stack ['$src_index26.0']
DEBUG 2022-02-08 17:11:34,635 dispatch pc=30, inst=COMPARE_OP(arg=0, lineno=212)
DEBUG 2022-02-08 17:11:34,635 stack ['$src_index26.0', '$src_ndim28.1']
DEBUG 2022-02-08 17:11:34,635 dispatch pc=32, inst=POP_JUMP_IF_FALSE(arg=120, lineno=212)
DEBUG 2022-02-08 17:11:34,635 stack ['$30compare_op.2']
DEBUG 2022-02-08 17:11:34,635 end state. edges=[Edge(pc=34, stack=(), blockstack=(), npush=0), Edge(pc=120, stack=(), blockstack=(), npush=0)]
DEBUG 2022-02-08 17:11:34,635 pending: deque([State(pc_initial=34 nstack_initial=0), State(pc_initial=120 nstack_initial=0)])
DEBUG 2022-02-08 17:11:34,635 stack: []
DEBUG 2022-02-08 17:11:34,635 dispatch pc=34, inst=LOAD_FAST(arg=1, lineno=213)
DEBUG 2022-02-08 17:11:34,635 stack []
DEBUG 2022-02-08 17:11:34,635 dispatch pc=36, inst=LOAD_FAST(arg=4, lineno=213)
DEBUG 2022-02-08 17:11:34,635 stack ['$src_shape34.0']
DEBUG 2022-02-08 17:11:34,635 dispatch pc=38, inst=BINARY_SUBSCR(arg=None, lineno=213)
DEBUG 2022-02-08 17:11:34,635 stack ['$src_shape34.0', '$src_index36.1']
DEBUG 2022-02-08 17:11:34,635 dispatch pc=40, inst=STORE_FAST(arg=6, lineno=213)
DEBUG 2022-02-08 17:11:34,635 stack ['$38binary_subscr.2']
DEBUG 2022-02-08 17:11:34,635 dispatch pc=42, inst=LOAD_FAST(arg=3, lineno=214)
DEBUG 2022-02-08 17:11:34,635 stack []
DEBUG 2022-02-08 17:11:34,635 dispatch pc=44, inst=LOAD_FAST(arg=5, lineno=214)
DEBUG 2022-02-08 17:11:34,635 stack ['$dest_shape42.3']
DEBUG 2022-02-08 17:11:34,635 dispatch pc=46, inst=BINARY_SUBSCR(arg=None, lineno=214)
DEBUG 2022-02-08 17:11:34,635 stack ['$dest_shape42.3', '$dest_index44.4']
DEBUG 2022-02-08 17:11:34,635 dispatch pc=48, inst=STORE_FAST(arg=7, lineno=214)
DEBUG 2022-02-08 17:11:34,635 stack ['$46binary_subscr.5']
DEBUG 2022-02-08 17:11:34,635 dispatch pc=50, inst=LOAD_FAST(arg=7, lineno=217)
DEBUG 2022-02-08 17:11:34,635 stack []
DEBUG 2022-02-08 17:11:34,635 dispatch pc=52, inst=LOAD_CONST(arg=2, lineno=217)
DEBUG 2022-02-08 17:11:34,635 stack ['$dest_dim_size50.6']
DEBUG 2022-02-08 17:11:34,635 dispatch pc=54, inst=COMPARE_OP(arg=3, lineno=217)
DEBUG 2022-02-08 17:11:34,635 stack ['$dest_dim_size50.6', '$const52.7']
DEBUG 2022-02-08 17:11:34,635 dispatch pc=56, inst=POP_JUMP_IF_FALSE(arg=86, lineno=217)
DEBUG 2022-02-08 17:11:34,635 stack ['$54compare_op.8']
DEBUG 2022-02-08 17:11:34,635 end state. edges=[Edge(pc=58, stack=(), blockstack=(), npush=0), Edge(pc=86, stack=(), blockstack=(), npush=0)]
DEBUG 2022-02-08 17:11:34,635 pending: deque([State(pc_initial=120 nstack_initial=0), State(pc_initial=58 nstack_initial=0), State(pc_initial=86 nstack_initial=0)])
DEBUG 2022-02-08 17:11:34,635 stack: []
DEBUG 2022-02-08 17:11:34,635 dispatch pc=120, inst=LOAD_FAST(arg=5, lineno=228)
DEBUG 2022-02-08 17:11:34,635 stack []
DEBUG 2022-02-08 17:11:34,635 dispatch pc=122, inst=RETURN_VALUE(arg=None, lineno=228)
DEBUG 2022-02-08 17:11:34,635 stack ['$dest_index120.0']
DEBUG 2022-02-08 17:11:34,635 end state. edges=[]
DEBUG 2022-02-08 17:11:34,635 pending: deque([State(pc_initial=58 nstack_initial=0), State(pc_initial=86 nstack_initial=0)])
DEBUG 2022-02-08 17:11:34,635 stack: []
DEBUG 2022-02-08 17:11:34,635 dispatch pc=58, inst=LOAD_FAST(arg=6, lineno=221)
DEBUG 2022-02-08 17:11:34,635 stack []
DEBUG 2022-02-08 17:11:34,635 dispatch pc=60, inst=LOAD_FAST(arg=7, lineno=221)
DEBUG 2022-02-08 17:11:34,635 stack ['$src_dim_size58.0']
DEBUG 2022-02-08 17:11:34,635 dispatch pc=62, inst=COMPARE_OP(arg=3, lineno=221)
DEBUG 2022-02-08 17:11:34,635 stack ['$src_dim_size58.0', '$dest_dim_size60.1']
DEBUG 2022-02-08 17:11:34,635 dispatch pc=64, inst=POP_JUMP_IF_FALSE(arg=102, lineno=221)
DEBUG 2022-02-08 17:11:34,635 stack ['$62compare_op.2']
DEBUG 2022-02-08 17:11:34,635 end state. edges=[Edge(pc=66, stack=(), blockstack=(), npush=0), Edge(pc=102, stack=(), blockstack=(), npush=0)]
DEBUG 2022-02-08 17:11:34,635 pending: deque([State(pc_initial=86 nstack_initial=0), State(pc_initial=66 nstack_initial=0), State(pc_initial=102 nstack_initial=0)])
DEBUG 2022-02-08 17:11:34,635 stack: []
DEBUG 2022-02-08 17:11:34,635 dispatch pc=86, inst=LOAD_FAST(arg=6, lineno=223)
DEBUG 2022-02-08 17:11:34,635 stack []
DEBUG 2022-02-08 17:11:34,635 dispatch pc=88, inst=LOAD_CONST(arg=2, lineno=223)
DEBUG 2022-02-08 17:11:34,635 stack ['$src_dim_size86.0']
DEBUG 2022-02-08 17:11:34,635 dispatch pc=90, inst=COMPARE_OP(arg=3, lineno=223)
DEBUG 2022-02-08 17:11:34,635 stack ['$src_dim_size86.0', '$const88.1']
DEBUG 2022-02-08 17:11:34,635 dispatch pc=92, inst=POP_JUMP_IF_FALSE(arg=102, lineno=223)
DEBUG 2022-02-08 17:11:34,635 stack ['$90compare_op.2']
DEBUG 2022-02-08 17:11:34,635 end state. edges=[Edge(pc=94, stack=(), blockstack=(), npush=0), Edge(pc=102, stack=(), blockstack=(), npush=0)]
DEBUG 2022-02-08 17:11:34,635 pending: deque([State(pc_initial=66 nstack_initial=0), State(pc_initial=102 nstack_initial=0), State(pc_initial=94 nstack_initial=0), State(pc_initial=102 nstack_initial=0)])
DEBUG 2022-02-08 17:11:34,635 stack: []
DEBUG 2022-02-08 17:11:34,635 dispatch pc=66, inst=LOAD_FAST(arg=6, lineno=221)
DEBUG 2022-02-08 17:11:34,635 stack []
DEBUG 2022-02-08 17:11:34,635 dispatch pc=68, inst=LOAD_CONST(arg=2, lineno=221)
DEBUG 2022-02-08 17:11:34,635 stack ['$src_dim_size66.0']
DEBUG 2022-02-08 17:11:34,635 dispatch pc=70, inst=COMPARE_OP(arg=3, lineno=221)
DEBUG 2022-02-08 17:11:34,635 stack ['$src_dim_size66.0', '$const68.1']
DEBUG 2022-02-08 17:11:34,635 dispatch pc=72, inst=POP_JUMP_IF_FALSE(arg=102, lineno=221)
DEBUG 2022-02-08 17:11:34,635 stack ['$70compare_op.2']
DEBUG 2022-02-08 17:11:34,635 end state. edges=[Edge(pc=74, stack=(), blockstack=(), npush=0), Edge(pc=102, stack=(), blockstack=(), npush=0)]
DEBUG 2022-02-08 17:11:34,635 pending: deque([State(pc_initial=102 nstack_initial=0), State(pc_initial=94 nstack_initial=0), State(pc_initial=102 nstack_initial=0), State(pc_initial=74 nstack_initial=0), State(pc_initial=102 nstack_initial=0)])
DEBUG 2022-02-08 17:11:34,635 stack: []
DEBUG 2022-02-08 17:11:34,635 dispatch pc=102, inst=LOAD_FAST(arg=4, lineno=226)
DEBUG 2022-02-08 17:11:34,635 stack []
DEBUG 2022-02-08 17:11:34,635 dispatch pc=104, inst=LOAD_CONST(arg=2, lineno=226)
DEBUG 2022-02-08 17:11:34,635 stack ['$src_index102.0']
DEBUG 2022-02-08 17:11:34,635 dispatch pc=106, inst=INPLACE_ADD(arg=None, lineno=226)
DEBUG 2022-02-08 17:11:34,635 stack ['$src_index102.0', '$const104.1']
DEBUG 2022-02-08 17:11:34,635 dispatch pc=108, inst=STORE_FAST(arg=4, lineno=226)
DEBUG 2022-02-08 17:11:34,635 stack ['$106inplace_add.2']
DEBUG 2022-02-08 17:11:34,635 dispatch pc=110, inst=LOAD_FAST(arg=5, lineno=227)
DEBUG 2022-02-08 17:11:34,635 stack []
DEBUG 2022-02-08 17:11:34,635 dispatch pc=112, inst=LOAD_CONST(arg=2, lineno=227)
DEBUG 2022-02-08 17:11:34,635 stack ['$dest_index110.3']
DEBUG 2022-02-08 17:11:34,635 dispatch pc=114, inst=INPLACE_ADD(arg=None, lineno=227)
DEBUG 2022-02-08 17:11:34,635 stack ['$dest_index110.3', '$const112.4']
DEBUG 2022-02-08 17:11:34,635 dispatch pc=116, inst=STORE_FAST(arg=5, lineno=227)
DEBUG 2022-02-08 17:11:34,635 stack ['$114inplace_add.5']
DEBUG 2022-02-08 17:11:34,635 dispatch pc=118, inst=JUMP_ABSOLUTE(arg=26, lineno=227)
DEBUG 2022-02-08 17:11:34,635 stack []
DEBUG 2022-02-08 17:11:34,635 end state. edges=[Edge(pc=26, stack=(), blockstack=(), npush=0)]
DEBUG 2022-02-08 17:11:34,635 pending: deque([State(pc_initial=94 nstack_initial=0), State(pc_initial=102 nstack_initial=0), State(pc_initial=74 nstack_initial=0), State(pc_initial=102 nstack_initial=0), State(pc_initial=26 nstack_initial=0)])
DEBUG 2022-02-08 17:11:34,635 stack: []
DEBUG 2022-02-08 17:11:34,635 dispatch pc=94, inst=LOAD_FAST(arg=6, lineno=225)
DEBUG 2022-02-08 17:11:34,635 stack []
DEBUG 2022-02-08 17:11:34,635 dispatch pc=96, inst=LOAD_FAST(arg=3, lineno=225)
DEBUG 2022-02-08 17:11:34,635 stack ['$src_dim_size94.0']
DEBUG 2022-02-08 17:11:34,635 dispatch pc=98, inst=LOAD_FAST(arg=5, lineno=225)
DEBUG 2022-02-08 17:11:34,635 stack ['$src_dim_size94.0', '$dest_shape96.1']
DEBUG 2022-02-08 17:11:34,635 dispatch pc=100, inst=STORE_SUBSCR(arg=None, lineno=225)
DEBUG 2022-02-08 17:11:34,635 stack ['$src_dim_size94.0', '$dest_shape96.1', '$dest_index98.2']
DEBUG 2022-02-08 17:11:34,635 end state. edges=[Edge(pc=102, stack=(), blockstack=(), npush=0)]
DEBUG 2022-02-08 17:11:34,635 pending: deque([State(pc_initial=102 nstack_initial=0), State(pc_initial=74 nstack_initial=0), State(pc_initial=102 nstack_initial=0), State(pc_initial=26 nstack_initial=0), State(pc_initial=102 nstack_initial=0)])
DEBUG 2022-02-08 17:11:34,635 pending: deque([State(pc_initial=74 nstack_initial=0), State(pc_initial=102 nstack_initial=0), State(pc_initial=26 nstack_initial=0), State(pc_initial=102 nstack_initial=0)])
DEBUG 2022-02-08 17:11:34,635 stack: []
DEBUG 2022-02-08 17:11:34,635 dispatch pc=74, inst=LOAD_FAST(arg=5, lineno=222)
DEBUG 2022-02-08 17:11:34,651 stack []
DEBUG 2022-02-08 17:11:34,651 dispatch pc=76, inst=LOAD_CONST(arg=2, lineno=222)
DEBUG 2022-02-08 17:11:34,651 stack ['$dest_index74.0']
DEBUG 2022-02-08 17:11:34,651 dispatch pc=78, inst=BINARY_ADD(arg=None, lineno=222)
DEBUG 2022-02-08 17:11:34,651 stack ['$dest_index74.0', '$const76.1']
DEBUG 2022-02-08 17:11:34,651 dispatch pc=80, inst=UNARY_NEGATIVE(arg=None, lineno=222)
DEBUG 2022-02-08 17:11:34,651 stack ['$78binary_add.2']
DEBUG 2022-02-08 17:11:34,651 dispatch pc=82, inst=RETURN_VALUE(arg=None, lineno=222)
DEBUG 2022-02-08 17:11:34,651 stack ['$80unary_negative.3']
DEBUG 2022-02-08 17:11:34,651 end state. edges=[]
DEBUG 2022-02-08 17:11:34,651 pending: deque([State(pc_initial=102 nstack_initial=0), State(pc_initial=26 nstack_initial=0), State(pc_initial=102 nstack_initial=0)])
DEBUG 2022-02-08 17:11:34,651 pending: deque([State(pc_initial=26 nstack_initial=0), State(pc_initial=102 nstack_initial=0)])
DEBUG 2022-02-08 17:11:34,651 pending: deque([State(pc_initial=102 nstack_initial=0)])
DEBUG 2022-02-08 17:11:34,651 -------------------------Prune PHIs-------------------------
DEBUG 2022-02-08 17:11:34,651 Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=10 nstack_initial=0): set(),
             State(pc_initial=14 nstack_initial=0): set(),
             State(pc_initial=26 nstack_initial=0): set(),
             State(pc_initial=34 nstack_initial=0): set(),
             State(pc_initial=58 nstack_initial=0): set(),
             State(pc_initial=66 nstack_initial=0): set(),
             State(pc_initial=74 nstack_initial=0): set(),
             State(pc_initial=86 nstack_initial=0): set(),
             State(pc_initial=94 nstack_initial=0): set(),
             State(pc_initial=102 nstack_initial=0): set(),
             State(pc_initial=120 nstack_initial=0): set()})
DEBUG 2022-02-08 17:11:34,651 defmap: {}
DEBUG 2022-02-08 17:11:34,651 phismap: defaultdict(<class 'set'>, {})
DEBUG 2022-02-08 17:11:34,651 changing phismap: defaultdict(<class 'set'>, {})
DEBUG 2022-02-08 17:11:34,651 keep phismap: {}
DEBUG 2022-02-08 17:11:34,651 new_out: defaultdict(<class 'dict'>, {})
DEBUG 2022-02-08 17:11:34,651 ----------------------DONE Prune PHIs-----------------------
DEBUG 2022-02-08 17:11:34,651 block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$src_ndim2.0'}), (4, {'res': '$dest_ndim4.1'}), (6, {'lhs': '$src_ndim2.0', 'rhs': '$dest_ndim4.1', 'res': '$6compare_op.2'}), (8, {'pred': '$6compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={10: (), 14: ()})
DEBUG 2022-02-08 17:11:34,651 block_infos State(pc_initial=10 nstack_initial=0):
AdaptBlockInfo(insts=((10, {'res': '$const10.0'}), (12, {'retval': '$const10.0', 'castval': '$12return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG 2022-02-08 17:11:34,651 block_infos State(pc_initial=14 nstack_initial=0):
AdaptBlockInfo(insts=((14, {'res': '$const14.0'}), (16, {'value': '$const14.0'}), (18, {'res': '$dest_ndim18.1'}), (20, {'res': '$src_ndim20.2'}), (22, {'lhs': '$dest_ndim18.1', 'rhs': '$src_ndim20.2', 'res': '$22binary_subtract.3'}), (24, {'value': '$22binary_subtract.3'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={26: ()})
DEBUG 2022-02-08 17:11:34,651 block_infos State(pc_initial=26 nstack_initial=0):
AdaptBlockInfo(insts=((26, {'res': '$src_index26.0'}), (28, {'res': '$src_ndim28.1'}), (30, {'lhs': '$src_index26.0', 'rhs': '$src_ndim28.1', 'res': '$30compare_op.2'}), (32, {'pred': '$30compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={34: (), 120: ()})
DEBUG 2022-02-08 17:11:34,651 block_infos State(pc_initial=34 nstack_initial=0):
AdaptBlockInfo(insts=((34, {'res': '$src_shape34.0'}), (36, {'res': '$src_index36.1'}), (38, {'index': '$src_index36.1', 'target': '$src_shape34.0', 'res': '$38binary_subscr.2'}), (40, {'value': '$38binary_subscr.2'}), (42, {'res': '$dest_shape42.3'}), (44, {'res': '$dest_index44.4'}), (46, {'index': '$dest_index44.4', 'target': '$dest_shape42.3', 'res': '$46binary_subscr.5'}), (48, {'value': '$46binary_subscr.5'}), (50, {'res': '$dest_dim_size50.6'}), (52, {'res': '$const52.7'}), (54, {'lhs': '$dest_dim_size50.6', 'rhs': '$const52.7', 'res': '$54compare_op.8'}), (56, {'pred': '$54compare_op.8'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={58: (), 86: ()})
DEBUG 2022-02-08 17:11:34,651 block_infos State(pc_initial=58 nstack_initial=0):
AdaptBlockInfo(insts=((58, {'res': '$src_dim_size58.0'}), (60, {'res': '$dest_dim_size60.1'}), (62, {'lhs': '$src_dim_size58.0', 'rhs': '$dest_dim_size60.1', 'res': '$62compare_op.2'}), (64, {'pred': '$62compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={66: (), 102: ()})
DEBUG 2022-02-08 17:11:34,651 block_infos State(pc_initial=66 nstack_initial=0):
AdaptBlockInfo(insts=((66, {'res': '$src_dim_size66.0'}), (68, {'res': '$const68.1'}), (70, {'lhs': '$src_dim_size66.0', 'rhs': '$const68.1', 'res': '$70compare_op.2'}), (72, {'pred': '$70compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={74: (), 102: ()})
DEBUG 2022-02-08 17:11:34,651 block_infos State(pc_initial=74 nstack_initial=0):
AdaptBlockInfo(insts=((74, {'res': '$dest_index74.0'}), (76, {'res': '$const76.1'}), (78, {'lhs': '$dest_index74.0', 'rhs': '$const76.1', 'res': '$78binary_add.2'}), (80, {'value': '$78binary_add.2', 'res': '$80unary_negative.3'}), (82, {'retval': '$80unary_negative.3', 'castval': '$82return_value.4'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG 2022-02-08 17:11:34,651 block_infos State(pc_initial=86 nstack_initial=0):
AdaptBlockInfo(insts=((86, {'res': '$src_dim_size86.0'}), (88, {'res': '$const88.1'}), (90, {'lhs': '$src_dim_size86.0', 'rhs': '$const88.1', 'res': '$90compare_op.2'}), (92, {'pred': '$90compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={94: (), 102: ()})
DEBUG 2022-02-08 17:11:34,651 block_infos State(pc_initial=94 nstack_initial=0):
AdaptBlockInfo(insts=((94, {'res': '$src_dim_size94.0'}), (96, {'res': '$dest_shape96.1'}), (98, {'res': '$dest_index98.2'}), (100, {'target': '$dest_shape96.1', 'index': '$dest_index98.2', 'value': '$src_dim_size94.0'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={102: ()})
DEBUG 2022-02-08 17:11:34,651 block_infos State(pc_initial=102 nstack_initial=0):
AdaptBlockInfo(insts=((102, {'res': '$src_index102.0'}), (104, {'res': '$const104.1'}), (106, {'lhs': '$src_index102.0', 'rhs': '$const104.1', 'res': '$106inplace_add.2'}), (108, {'value': '$106inplace_add.2'}), (110, {'res': '$dest_index110.3'}), (112, {'res': '$const112.4'}), (114, {'lhs': '$dest_index110.3', 'rhs': '$const112.4', 'res': '$114inplace_add.5'}), (116, {'value': '$114inplace_add.5'}), (118, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={26: ()})
DEBUG 2022-02-08 17:11:34,651 block_infos State(pc_initial=120 nstack_initial=0):
AdaptBlockInfo(insts=((120, {'res': '$dest_index120.0'}), (122, {'retval': '$dest_index120.0', 'castval': '$122return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG 2022-02-08 17:11:34,651 label 0:
    src_ndim = arg(0, name=src_ndim)         ['src_ndim']
    src_shape = arg(1, name=src_shape)       ['src_shape']
    dest_ndim = arg(2, name=dest_ndim)       ['dest_ndim']
    dest_shape = arg(3, name=dest_shape)     ['dest_shape']
    $6compare_op.2 = src_ndim > dest_ndim    ['$6compare_op.2', 'dest_ndim', 'src_ndim']
    bool8 = global(bool: <class 'bool'>)     ['bool8']
    $8pred = call bool8($6compare_op.2, func=bool8, args=(Var($6compare_op.2, npyimpl.py:205),), kws=(), vararg=None, target=None) ['$6compare_op.2', '$8pred', 'bool8']
    branch $8pred, 10, 14                    ['$8pred']
label 10:
    $const10.0 = const(int, 0)               ['$const10.0']
    $12return_value.1 = cast(value=$const10.0) ['$12return_value.1', '$const10.0']
    return $12return_value.1                 ['$12return_value.1']
label 14:
    src_index = const(int, 0)                ['src_index']
    dest_index = dest_ndim - src_ndim        ['dest_index', 'dest_ndim', 'src_ndim']
    jump 26                                  []
label 26:
    $30compare_op.2 = src_index < src_ndim   ['$30compare_op.2', 'src_index', 'src_ndim']
    bool32 = global(bool: <class 'bool'>)    ['bool32']
    $32pred = call bool32($30compare_op.2, func=bool32, args=(Var($30compare_op.2, npyimpl.py:212),), kws=(), vararg=None, target=None) ['$30compare_op.2', '$32pred', 'bool32']
    branch $32pred, 34, 120                  ['$32pred']
label 34:
    src_dim_size = getitem(value=src_shape, index=src_index, fn=<built-in function getitem>) ['src_dim_size', 'src_index', 'src_shape']
    dest_dim_size = getitem(value=dest_shape, index=dest_index, fn=<built-in function getitem>) ['dest_dim_size', 'dest_index', 'dest_shape']
    $const52.7 = const(int, 1)               ['$const52.7']
    $54compare_op.8 = dest_dim_size != $const52.7 ['$54compare_op.8', '$const52.7', 'dest_dim_size']
    bool56 = global(bool: <class 'bool'>)    ['bool56']
    $56pred = call bool56($54compare_op.8, func=bool56, args=(Var($54compare_op.8, npyimpl.py:217),), kws=(), vararg=None, target=None) ['$54compare_op.8', '$56pred', 'bool56']
    branch $56pred, 58, 86                   ['$56pred']
label 58:
    $62compare_op.2 = src_dim_size != dest_dim_size ['$62compare_op.2', 'dest_dim_size', 'src_dim_size']
    bool64 = global(bool: <class 'bool'>)    ['bool64']
    $64pred = call bool64($62compare_op.2, func=bool64, args=(Var($62compare_op.2, npyimpl.py:221),), kws=(), vararg=None, target=None) ['$62compare_op.2', '$64pred', 'bool64']
    branch $64pred, 66, 102                  ['$64pred']
label 66:
    $const68.1 = const(int, 1)               ['$const68.1']
    $70compare_op.2 = src_dim_size != $const68.1 ['$70compare_op.2', '$const68.1', 'src_dim_size']
    bool72 = global(bool: <class 'bool'>)    ['bool72']
    $72pred = call bool72($70compare_op.2, func=bool72, args=(Var($70compare_op.2, npyimpl.py:221),), kws=(), vararg=None, target=None) ['$70compare_op.2', '$72pred', 'bool72']
    branch $72pred, 74, 102                  ['$72pred']
label 74:
    $const76.1 = const(int, 1)               ['$const76.1']
    $78binary_add.2 = dest_index + $const76.1 ['$78binary_add.2', '$const76.1', 'dest_index']
    $80unary_negative.3 = unary(fn=<built-in function neg>, value=$78binary_add.2) ['$78binary_add.2', '$80unary_negative.3']
    $82return_value.4 = cast(value=$80unary_negative.3) ['$80unary_negative.3', '$82return_value.4']
    return $82return_value.4                 ['$82return_value.4']
label 86:
    $const88.1 = const(int, 1)               ['$const88.1']
    $90compare_op.2 = src_dim_size != $const88.1 ['$90compare_op.2', '$const88.1', 'src_dim_size']
    bool92 = global(bool: <class 'bool'>)    ['bool92']
    $92pred = call bool92($90compare_op.2, func=bool92, args=(Var($90compare_op.2, npyimpl.py:223),), kws=(), vararg=None, target=None) ['$90compare_op.2', '$92pred', 'bool92']
    branch $92pred, 94, 102                  ['$92pred']
label 94:
    dest_shape[dest_index] = src_dim_size    ['dest_index', 'dest_shape', 'src_dim_size']
    jump 102                                 []
label 102:
    $const104.1 = const(int, 1)              ['$const104.1']
    $106inplace_add.2 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=src_index, rhs=$const104.1, static_lhs=Undefined, static_rhs=Undefined) ['$106inplace_add.2', '$const104.1', 'src_index']
    src_index = $106inplace_add.2            ['$106inplace_add.2', 'src_index']
    $const112.4 = const(int, 1)              ['$const112.4']
    $114inplace_add.5 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=dest_index, rhs=$const112.4, static_lhs=Undefined, static_rhs=Undefined) ['$114inplace_add.5', '$const112.4', 'dest_index']
    dest_index = $114inplace_add.5           ['$114inplace_add.5', 'dest_index']
    jump 26                                  []
label 120:
    $122return_value.1 = cast(value=dest_index) ['$122return_value.1', 'dest_index']
    return $122return_value.1                ['$122return_value.1']

DEBUG 2022-02-08 17:11:34,657 ==== SSA block analysis pass on 0
DEBUG 2022-02-08 17:11:34,657 Running <numba.core.ssa._GatherDefsHandler object at 0x000001E9F78E7C70>
DEBUG 2022-02-08 17:11:34,657 on stmt: src_ndim = arg(0, name=src_ndim)
DEBUG 2022-02-08 17:11:34,657 on stmt: src_shape = arg(1, name=src_shape)
DEBUG 2022-02-08 17:11:34,657 on stmt: dest_ndim = arg(2, name=dest_ndim)
DEBUG 2022-02-08 17:11:34,657 on stmt: dest_shape = arg(3, name=dest_shape)
DEBUG 2022-02-08 17:11:34,657 on stmt: $6compare_op.2 = src_ndim > dest_ndim
DEBUG 2022-02-08 17:11:34,657 on stmt: bool8 = global(bool: <class 'bool'>)
DEBUG 2022-02-08 17:11:34,657 on stmt: $8pred = call bool8($6compare_op.2, func=bool8, args=(Var($6compare_op.2, npyimpl.py:205),), kws=(), vararg=None, target=None)
DEBUG 2022-02-08 17:11:34,657 on stmt: branch $8pred, 10, 14
DEBUG 2022-02-08 17:11:34,657 ==== SSA block analysis pass on 10
DEBUG 2022-02-08 17:11:34,657 Running <numba.core.ssa._GatherDefsHandler object at 0x000001E9F78E7C70>
DEBUG 2022-02-08 17:11:34,657 on stmt: $const10.0 = const(int, 0)
DEBUG 2022-02-08 17:11:34,657 on stmt: $12return_value.1 = cast(value=$const10.0)
DEBUG 2022-02-08 17:11:34,657 on stmt: return $12return_value.1
DEBUG 2022-02-08 17:11:34,657 ==== SSA block analysis pass on 14
DEBUG 2022-02-08 17:11:34,657 Running <numba.core.ssa._GatherDefsHandler object at 0x000001E9F78E7C70>
DEBUG 2022-02-08 17:11:34,657 on stmt: src_index = const(int, 0)
DEBUG 2022-02-08 17:11:34,657 on stmt: dest_index = dest_ndim - src_ndim
DEBUG 2022-02-08 17:11:34,657 on stmt: jump 26
DEBUG 2022-02-08 17:11:34,657 ==== SSA block analysis pass on 26
DEBUG 2022-02-08 17:11:34,657 Running <numba.core.ssa._GatherDefsHandler object at 0x000001E9F78E7C70>
DEBUG 2022-02-08 17:11:34,657 on stmt: $30compare_op.2 = src_index < src_ndim
DEBUG 2022-02-08 17:11:34,657 on stmt: bool32 = global(bool: <class 'bool'>)
DEBUG 2022-02-08 17:11:34,657 on stmt: $32pred = call bool32($30compare_op.2, func=bool32, args=(Var($30compare_op.2, npyimpl.py:212),), kws=(), vararg=None, target=None)
DEBUG 2022-02-08 17:11:34,657 on stmt: branch $32pred, 34, 120
DEBUG 2022-02-08 17:11:34,657 ==== SSA block analysis pass on 34
DEBUG 2022-02-08 17:11:34,657 Running <numba.core.ssa._GatherDefsHandler object at 0x000001E9F78E7C70>
DEBUG 2022-02-08 17:11:34,657 on stmt: src_dim_size = getitem(value=src_shape, index=src_index, fn=<built-in function getitem>)
DEBUG 2022-02-08 17:11:34,657 on stmt: dest_dim_size = getitem(value=dest_shape, index=dest_index, fn=<built-in function getitem>)
DEBUG 2022-02-08 17:11:34,657 on stmt: $const52.7 = const(int, 1)
DEBUG 2022-02-08 17:11:34,657 on stmt: $54compare_op.8 = dest_dim_size != $const52.7
DEBUG 2022-02-08 17:11:34,657 on stmt: bool56 = global(bool: <class 'bool'>)
DEBUG 2022-02-08 17:11:34,657 on stmt: $56pred = call bool56($54compare_op.8, func=bool56, args=(Var($54compare_op.8, npyimpl.py:217),), kws=(), vararg=None, target=None)
DEBUG 2022-02-08 17:11:34,657 on stmt: branch $56pred, 58, 86
DEBUG 2022-02-08 17:11:34,657 ==== SSA block analysis pass on 58
DEBUG 2022-02-08 17:11:34,657 Running <numba.core.ssa._GatherDefsHandler object at 0x000001E9F78E7C70>
DEBUG 2022-02-08 17:11:34,657 on stmt: $62compare_op.2 = src_dim_size != dest_dim_size
DEBUG 2022-02-08 17:11:34,657 on stmt: bool64 = global(bool: <class 'bool'>)
DEBUG 2022-02-08 17:11:34,657 on stmt: $64pred = call bool64($62compare_op.2, func=bool64, args=(Var($62compare_op.2, npyimpl.py:221),), kws=(), vararg=None, target=None)
DEBUG 2022-02-08 17:11:34,657 on stmt: branch $64pred, 66, 102
DEBUG 2022-02-08 17:11:34,657 ==== SSA block analysis pass on 66
DEBUG 2022-02-08 17:11:34,657 Running <numba.core.ssa._GatherDefsHandler object at 0x000001E9F78E7C70>
DEBUG 2022-02-08 17:11:34,657 on stmt: $const68.1 = const(int, 1)
DEBUG 2022-02-08 17:11:34,657 on stmt: $70compare_op.2 = src_dim_size != $const68.1
DEBUG 2022-02-08 17:11:34,657 on stmt: bool72 = global(bool: <class 'bool'>)
DEBUG 2022-02-08 17:11:34,657 on stmt: $72pred = call bool72($70compare_op.2, func=bool72, args=(Var($70compare_op.2, npyimpl.py:221),), kws=(), vararg=None, target=None)
DEBUG 2022-02-08 17:11:34,657 on stmt: branch $72pred, 74, 102
DEBUG 2022-02-08 17:11:34,657 ==== SSA block analysis pass on 74
DEBUG 2022-02-08 17:11:34,657 Running <numba.core.ssa._GatherDefsHandler object at 0x000001E9F78E7C70>
DEBUG 2022-02-08 17:11:34,657 on stmt: $const76.1 = const(int, 1)
DEBUG 2022-02-08 17:11:34,657 on stmt: $78binary_add.2 = dest_index + $const76.1
DEBUG 2022-02-08 17:11:34,657 on stmt: $80unary_negative.3 = unary(fn=<built-in function neg>, value=$78binary_add.2)
DEBUG 2022-02-08 17:11:34,657 on stmt: $82return_value.4 = cast(value=$80unary_negative.3)
DEBUG 2022-02-08 17:11:34,657 on stmt: return $82return_value.4
DEBUG 2022-02-08 17:11:34,657 ==== SSA block analysis pass on 86
DEBUG 2022-02-08 17:11:34,657 Running <numba.core.ssa._GatherDefsHandler object at 0x000001E9F78E7C70>
DEBUG 2022-02-08 17:11:34,657 on stmt: $const88.1 = const(int, 1)
DEBUG 2022-02-08 17:11:34,657 on stmt: $90compare_op.2 = src_dim_size != $const88.1
DEBUG 2022-02-08 17:11:34,657 on stmt: bool92 = global(bool: <class 'bool'>)
DEBUG 2022-02-08 17:11:34,657 on stmt: $92pred = call bool92($90compare_op.2, func=bool92, args=(Var($90compare_op.2, npyimpl.py:223),), kws=(), vararg=None, target=None)
DEBUG 2022-02-08 17:11:34,657 on stmt: branch $92pred, 94, 102
DEBUG 2022-02-08 17:11:34,657 ==== SSA block analysis pass on 94
DEBUG 2022-02-08 17:11:34,657 Running <numba.core.ssa._GatherDefsHandler object at 0x000001E9F78E7C70>
DEBUG 2022-02-08 17:11:34,657 on stmt: dest_shape[dest_index] = src_dim_size
DEBUG 2022-02-08 17:11:34,657 on stmt: jump 102
DEBUG 2022-02-08 17:11:34,657 ==== SSA block analysis pass on 102
DEBUG 2022-02-08 17:11:34,657 Running <numba.core.ssa._GatherDefsHandler object at 0x000001E9F78E7C70>
DEBUG 2022-02-08 17:11:34,657 on stmt: $const104.1 = const(int, 1)
DEBUG 2022-02-08 17:11:34,657 on stmt: $106inplace_add.2 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=src_index, rhs=$const104.1, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-08 17:11:34,657 on stmt: src_index = $106inplace_add.2
DEBUG 2022-02-08 17:11:34,657 on stmt: $const112.4 = const(int, 1)
DEBUG 2022-02-08 17:11:34,657 on stmt: $114inplace_add.5 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=dest_index, rhs=$const112.4, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-08 17:11:34,657 on stmt: dest_index = $114inplace_add.5
DEBUG 2022-02-08 17:11:34,657 on stmt: jump 26
DEBUG 2022-02-08 17:11:34,657 ==== SSA block analysis pass on 120
DEBUG 2022-02-08 17:11:34,657 Running <numba.core.ssa._GatherDefsHandler object at 0x000001E9F78E7C70>
DEBUG 2022-02-08 17:11:34,657 on stmt: $122return_value.1 = cast(value=dest_index)
DEBUG 2022-02-08 17:11:34,657 on stmt: return $122return_value.1
DEBUG 2022-02-08 17:11:34,657 defs defaultdict(<class 'list'>,
            {'$106inplace_add.2': [<numba.core.ir.Assign object at 0x000001E9F78E4F40>],
             '$114inplace_add.5': [<numba.core.ir.Assign object at 0x000001E9F78E7460>],
             '$122return_value.1': [<numba.core.ir.Assign object at 0x000001E9F78E7850>],
             '$12return_value.1': [<numba.core.ir.Assign object at 0x000001E9F78C1D00>],
             '$30compare_op.2': [<numba.core.ir.Assign object at 0x000001E9F78D9AF0>],
             '$32pred': [<numba.core.ir.Assign object at 0x000001E9F78D9D60>],
             '$54compare_op.8': [<numba.core.ir.Assign object at 0x000001E9F78DFC10>],
             '$56pred': [<numba.core.ir.Assign object at 0x000001E9F78DFE80>],
             '$62compare_op.2': [<numba.core.ir.Assign object at 0x000001E9F78E2130>],
             '$64pred': [<numba.core.ir.Assign object at 0x000001E9F78E23A0>],
             '$6compare_op.2': [<numba.core.ir.Assign object at 0x000001E9F78BE310>],
             '$70compare_op.2': [<numba.core.ir.Assign object at 0x000001E9F78E2850>],
             '$72pred': [<numba.core.ir.Assign object at 0x000001E9F78E2AC0>],
             '$78binary_add.2': [<numba.core.ir.Assign object at 0x000001E9F78E2FD0>],
             '$80unary_negative.3': [<numba.core.ir.Assign object at 0x000001E9F78E4160>],
             '$82return_value.4': [<numba.core.ir.Assign object at 0x000001E9F78E42E0>],
             '$8pred': [<numba.core.ir.Assign object at 0x000001E9F78BA8E0>],
             '$90compare_op.2': [<numba.core.ir.Assign object at 0x000001E9F78E47F0>],
             '$92pred': [<numba.core.ir.Assign object at 0x000001E9F78E4A60>],
             '$const10.0': [<numba.core.ir.Assign object at 0x000001E9F78BA730>],
             '$const104.1': [<numba.core.ir.Assign object at 0x000001E9F78E4DF0>],
             '$const112.4': [<numba.core.ir.Assign object at 0x000001E9F78E72B0>],
             '$const52.7': [<numba.core.ir.Assign object at 0x000001E9F78DFA60>],
             '$const68.1': [<numba.core.ir.Assign object at 0x000001E9F78E26A0>],
             '$const76.1': [<numba.core.ir.Assign object at 0x000001E9F78E2E20>],
             '$const88.1': [<numba.core.ir.Assign object at 0x000001E9F78E4640>],
             'bool32': [<numba.core.ir.Assign object at 0x000001E9F78D9C40>],
             'bool56': [<numba.core.ir.Assign object at 0x000001E9F78DFD60>],
             'bool64': [<numba.core.ir.Assign object at 0x000001E9F78E2280>],
             'bool72': [<numba.core.ir.Assign object at 0x000001E9F78E29A0>],
             'bool8': [<numba.core.ir.Assign object at 0x000001E9F78BE220>],
             'bool92': [<numba.core.ir.Assign object at 0x000001E9F78E4940>],
             'dest_dim_size': [<numba.core.ir.Assign object at 0x000001E9F78DF6D0>],
             'dest_index': [<numba.core.ir.Assign object at 0x000001E9F78D9670>,
                            <numba.core.ir.Assign object at 0x000001E9F78E7520>],
             'dest_ndim': [<numba.core.ir.Assign object at 0x000001E9F78BE850>],
             'dest_shape': [<numba.core.ir.Assign object at 0x000001E9F78BE6A0>],
             'src_dim_size': [<numba.core.ir.Assign object at 0x000001E9F78DF1F0>],
             'src_index': [<numba.core.ir.Assign object at 0x000001E9F78D9160>,
                           <numba.core.ir.Assign object at 0x000001E9F78E7040>],
             'src_ndim': [<numba.core.ir.Assign object at 0x000001E9F78BECA0>],
             'src_shape': [<numba.core.ir.Assign object at 0x000001E9F78BE9D0>]})
DEBUG 2022-02-08 17:11:34,657 SSA violators {'dest_index', 'src_index'}
DEBUG 2022-02-08 17:11:34,657 Fix SSA violator on var dest_index
DEBUG 2022-02-08 17:11:34,657 ==== SSA block rewrite pass on 0
DEBUG 2022-02-08 17:11:34,657 Running <numba.core.ssa._FreshVarHandler object at 0x000001E9F78D16D0>
DEBUG 2022-02-08 17:11:34,657 on stmt: src_ndim = arg(0, name=src_ndim)
DEBUG 2022-02-08 17:11:34,657 on stmt: src_shape = arg(1, name=src_shape)
DEBUG 2022-02-08 17:11:34,657 on stmt: dest_ndim = arg(2, name=dest_ndim)
DEBUG 2022-02-08 17:11:34,657 on stmt: dest_shape = arg(3, name=dest_shape)
DEBUG 2022-02-08 17:11:34,657 on stmt: $6compare_op.2 = src_ndim > dest_ndim
DEBUG 2022-02-08 17:11:34,657 on stmt: bool8 = global(bool: <class 'bool'>)
DEBUG 2022-02-08 17:11:34,657 on stmt: $8pred = call bool8($6compare_op.2, func=bool8, args=(Var($6compare_op.2, npyimpl.py:205),), kws=(), vararg=None, target=None)
DEBUG 2022-02-08 17:11:34,657 on stmt: branch $8pred, 10, 14
DEBUG 2022-02-08 17:11:34,657 ==== SSA block rewrite pass on 10
DEBUG 2022-02-08 17:11:34,657 Running <numba.core.ssa._FreshVarHandler object at 0x000001E9F78D16D0>
DEBUG 2022-02-08 17:11:34,657 on stmt: $const10.0 = const(int, 0)
DEBUG 2022-02-08 17:11:34,657 on stmt: $12return_value.1 = cast(value=$const10.0)
DEBUG 2022-02-08 17:11:34,657 on stmt: return $12return_value.1
DEBUG 2022-02-08 17:11:34,657 ==== SSA block rewrite pass on 14
DEBUG 2022-02-08 17:11:34,657 Running <numba.core.ssa._FreshVarHandler object at 0x000001E9F78D16D0>
DEBUG 2022-02-08 17:11:34,657 on stmt: src_index = const(int, 0)
DEBUG 2022-02-08 17:11:34,657 on stmt: dest_index = dest_ndim - src_ndim
DEBUG 2022-02-08 17:11:34,657 first assign: dest_index
DEBUG 2022-02-08 17:11:34,657 replaced with: dest_index = dest_ndim - src_ndim
DEBUG 2022-02-08 17:11:34,657 on stmt: jump 26
DEBUG 2022-02-08 17:11:34,657 ==== SSA block rewrite pass on 26
DEBUG 2022-02-08 17:11:34,657 Running <numba.core.ssa._FreshVarHandler object at 0x000001E9F78D16D0>
DEBUG 2022-02-08 17:11:34,657 on stmt: $30compare_op.2 = src_index < src_ndim
DEBUG 2022-02-08 17:11:34,657 on stmt: bool32 = global(bool: <class 'bool'>)
DEBUG 2022-02-08 17:11:34,657 on stmt: $32pred = call bool32($30compare_op.2, func=bool32, args=(Var($30compare_op.2, npyimpl.py:212),), kws=(), vararg=None, target=None)
DEBUG 2022-02-08 17:11:34,657 on stmt: branch $32pred, 34, 120
DEBUG 2022-02-08 17:11:34,657 ==== SSA block rewrite pass on 34
DEBUG 2022-02-08 17:11:34,657 Running <numba.core.ssa._FreshVarHandler object at 0x000001E9F78D16D0>
DEBUG 2022-02-08 17:11:34,657 on stmt: src_dim_size = getitem(value=src_shape, index=src_index, fn=<built-in function getitem>)
DEBUG 2022-02-08 17:11:34,657 on stmt: dest_dim_size = getitem(value=dest_shape, index=dest_index, fn=<built-in function getitem>)
DEBUG 2022-02-08 17:11:34,657 on stmt: $const52.7 = const(int, 1)
DEBUG 2022-02-08 17:11:34,657 on stmt: $54compare_op.8 = dest_dim_size != $const52.7
DEBUG 2022-02-08 17:11:34,657 on stmt: bool56 = global(bool: <class 'bool'>)
DEBUG 2022-02-08 17:11:34,657 on stmt: $56pred = call bool56($54compare_op.8, func=bool56, args=(Var($54compare_op.8, npyimpl.py:217),), kws=(), vararg=None, target=None)
DEBUG 2022-02-08 17:11:34,673 on stmt: branch $56pred, 58, 86
DEBUG 2022-02-08 17:11:34,673 ==== SSA block rewrite pass on 58
DEBUG 2022-02-08 17:11:34,673 Running <numba.core.ssa._FreshVarHandler object at 0x000001E9F78D16D0>
DEBUG 2022-02-08 17:11:34,673 on stmt: $62compare_op.2 = src_dim_size != dest_dim_size
DEBUG 2022-02-08 17:11:34,673 on stmt: bool64 = global(bool: <class 'bool'>)
DEBUG 2022-02-08 17:11:34,673 on stmt: $64pred = call bool64($62compare_op.2, func=bool64, args=(Var($62compare_op.2, npyimpl.py:221),), kws=(), vararg=None, target=None)
DEBUG 2022-02-08 17:11:34,673 on stmt: branch $64pred, 66, 102
DEBUG 2022-02-08 17:11:34,673 ==== SSA block rewrite pass on 66
DEBUG 2022-02-08 17:11:34,673 Running <numba.core.ssa._FreshVarHandler object at 0x000001E9F78D16D0>
DEBUG 2022-02-08 17:11:34,673 on stmt: $const68.1 = const(int, 1)
DEBUG 2022-02-08 17:11:34,673 on stmt: $70compare_op.2 = src_dim_size != $const68.1
DEBUG 2022-02-08 17:11:34,673 on stmt: bool72 = global(bool: <class 'bool'>)
DEBUG 2022-02-08 17:11:34,673 on stmt: $72pred = call bool72($70compare_op.2, func=bool72, args=(Var($70compare_op.2, npyimpl.py:221),), kws=(), vararg=None, target=None)
DEBUG 2022-02-08 17:11:34,673 on stmt: branch $72pred, 74, 102
DEBUG 2022-02-08 17:11:34,673 ==== SSA block rewrite pass on 74
DEBUG 2022-02-08 17:11:34,673 Running <numba.core.ssa._FreshVarHandler object at 0x000001E9F78D16D0>
DEBUG 2022-02-08 17:11:34,673 on stmt: $const76.1 = const(int, 1)
DEBUG 2022-02-08 17:11:34,673 on stmt: $78binary_add.2 = dest_index + $const76.1
DEBUG 2022-02-08 17:11:34,673 on stmt: $80unary_negative.3 = unary(fn=<built-in function neg>, value=$78binary_add.2)
DEBUG 2022-02-08 17:11:34,673 on stmt: $82return_value.4 = cast(value=$80unary_negative.3)
DEBUG 2022-02-08 17:11:34,673 on stmt: return $82return_value.4
DEBUG 2022-02-08 17:11:34,673 ==== SSA block rewrite pass on 86
DEBUG 2022-02-08 17:11:34,673 Running <numba.core.ssa._FreshVarHandler object at 0x000001E9F78D16D0>
DEBUG 2022-02-08 17:11:34,673 on stmt: $const88.1 = const(int, 1)
DEBUG 2022-02-08 17:11:34,673 on stmt: $90compare_op.2 = src_dim_size != $const88.1
DEBUG 2022-02-08 17:11:34,673 on stmt: bool92 = global(bool: <class 'bool'>)
DEBUG 2022-02-08 17:11:34,673 on stmt: $92pred = call bool92($90compare_op.2, func=bool92, args=(Var($90compare_op.2, npyimpl.py:223),), kws=(), vararg=None, target=None)
DEBUG 2022-02-08 17:11:34,673 on stmt: branch $92pred, 94, 102
DEBUG 2022-02-08 17:11:34,673 ==== SSA block rewrite pass on 94
DEBUG 2022-02-08 17:11:34,673 Running <numba.core.ssa._FreshVarHandler object at 0x000001E9F78D16D0>
DEBUG 2022-02-08 17:11:34,673 on stmt: dest_shape[dest_index] = src_dim_size
DEBUG 2022-02-08 17:11:34,673 on stmt: jump 102
DEBUG 2022-02-08 17:11:34,673 ==== SSA block rewrite pass on 102
DEBUG 2022-02-08 17:11:34,673 Running <numba.core.ssa._FreshVarHandler object at 0x000001E9F78D16D0>
DEBUG 2022-02-08 17:11:34,673 on stmt: $const104.1 = const(int, 1)
DEBUG 2022-02-08 17:11:34,673 on stmt: $106inplace_add.2 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=src_index, rhs=$const104.1, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-08 17:11:34,673 on stmt: src_index = $106inplace_add.2
DEBUG 2022-02-08 17:11:34,673 on stmt: $const112.4 = const(int, 1)
DEBUG 2022-02-08 17:11:34,673 on stmt: $114inplace_add.5 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=dest_index, rhs=$const112.4, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-08 17:11:34,673 on stmt: dest_index = $114inplace_add.5
DEBUG 2022-02-08 17:11:34,673 replaced with: dest_index.1 = $114inplace_add.5
DEBUG 2022-02-08 17:11:34,673 on stmt: jump 26
DEBUG 2022-02-08 17:11:34,673 ==== SSA block rewrite pass on 120
DEBUG 2022-02-08 17:11:34,673 Running <numba.core.ssa._FreshVarHandler object at 0x000001E9F78D16D0>
DEBUG 2022-02-08 17:11:34,673 on stmt: $122return_value.1 = cast(value=dest_index)
DEBUG 2022-02-08 17:11:34,673 on stmt: return $122return_value.1
DEBUG 2022-02-08 17:11:34,673 Replaced assignments: defaultdict(<class 'list'>,
            {14: [<numba.core.ir.Assign object at 0x000001E9F78D1460>],
             102: [<numba.core.ir.Assign object at 0x000001E9F78D1DF0>]})
DEBUG 2022-02-08 17:11:34,673 ==== SSA block rewrite pass on 0
DEBUG 2022-02-08 17:11:34,673 Running <numba.core.ssa._FixSSAVars object at 0x000001E9F78D16D0>
DEBUG 2022-02-08 17:11:34,673 on stmt: src_ndim = arg(0, name=src_ndim)
DEBUG 2022-02-08 17:11:34,673 on stmt: src_shape = arg(1, name=src_shape)
DEBUG 2022-02-08 17:11:34,673 on stmt: dest_ndim = arg(2, name=dest_ndim)
DEBUG 2022-02-08 17:11:34,673 on stmt: dest_shape = arg(3, name=dest_shape)
DEBUG 2022-02-08 17:11:34,673 on stmt: $6compare_op.2 = src_ndim > dest_ndim
DEBUG 2022-02-08 17:11:34,673 on stmt: bool8 = global(bool: <class 'bool'>)
DEBUG 2022-02-08 17:11:34,673 on stmt: $8pred = call bool8($6compare_op.2, func=bool8, args=(Var($6compare_op.2, npyimpl.py:205),), kws=(), vararg=None, target=None)
DEBUG 2022-02-08 17:11:34,673 on stmt: branch $8pred, 10, 14
DEBUG 2022-02-08 17:11:34,673 ==== SSA block rewrite pass on 10
DEBUG 2022-02-08 17:11:34,673 Running <numba.core.ssa._FixSSAVars object at 0x000001E9F78D16D0>
DEBUG 2022-02-08 17:11:34,673 on stmt: $const10.0 = const(int, 0)
DEBUG 2022-02-08 17:11:34,673 on stmt: $12return_value.1 = cast(value=$const10.0)
DEBUG 2022-02-08 17:11:34,673 on stmt: return $12return_value.1
DEBUG 2022-02-08 17:11:34,673 ==== SSA block rewrite pass on 14
DEBUG 2022-02-08 17:11:34,673 Running <numba.core.ssa._FixSSAVars object at 0x000001E9F78D16D0>
DEBUG 2022-02-08 17:11:34,673 on stmt: src_index = const(int, 0)
DEBUG 2022-02-08 17:11:34,673 on stmt: dest_index = dest_ndim - src_ndim
DEBUG 2022-02-08 17:11:34,673 on stmt: jump 26
DEBUG 2022-02-08 17:11:34,673 ==== SSA block rewrite pass on 26
DEBUG 2022-02-08 17:11:34,673 Running <numba.core.ssa._FixSSAVars object at 0x000001E9F78D16D0>
DEBUG 2022-02-08 17:11:34,673 on stmt: $30compare_op.2 = src_index < src_ndim
DEBUG 2022-02-08 17:11:34,673 on stmt: bool32 = global(bool: <class 'bool'>)
DEBUG 2022-02-08 17:11:34,673 on stmt: $32pred = call bool32($30compare_op.2, func=bool32, args=(Var($30compare_op.2, npyimpl.py:212),), kws=(), vararg=None, target=None)
DEBUG 2022-02-08 17:11:34,673 on stmt: branch $32pred, 34, 120
DEBUG 2022-02-08 17:11:34,673 ==== SSA block rewrite pass on 34
DEBUG 2022-02-08 17:11:34,673 Running <numba.core.ssa._FixSSAVars object at 0x000001E9F78D16D0>
DEBUG 2022-02-08 17:11:34,673 on stmt: src_dim_size = getitem(value=src_shape, index=src_index, fn=<built-in function getitem>)
DEBUG 2022-02-08 17:11:34,673 on stmt: dest_dim_size = getitem(value=dest_shape, index=dest_index, fn=<built-in function getitem>)
DEBUG 2022-02-08 17:11:34,673 find_def var='dest_index' stmt=dest_dim_size = getitem(value=dest_shape, index=dest_index, fn=<built-in function getitem>)
DEBUG 2022-02-08 17:11:34,673 find_def_from_top label 34
DEBUG 2022-02-08 17:11:34,673 idom 26 from label 34
DEBUG 2022-02-08 17:11:34,673 find_def_from_bottom label 26
DEBUG 2022-02-08 17:11:34,673 find_def_from_top label 26
DEBUG 2022-02-08 17:11:34,673 insert phi node dest_index.2 = phi(incoming_values=[], incoming_blocks=[]) at 26
DEBUG 2022-02-08 17:11:34,673 find_def_from_bottom label 102
DEBUG 2022-02-08 17:11:34,673 incoming_def dest_index.1 = $114inplace_add.5
DEBUG 2022-02-08 17:11:34,673 find_def_from_bottom label 14
DEBUG 2022-02-08 17:11:34,673 incoming_def dest_index = dest_ndim - src_ndim
DEBUG 2022-02-08 17:11:34,673 replaced with: dest_dim_size = getitem(value=dest_shape, index=dest_index.2, fn=<built-in function getitem>)
DEBUG 2022-02-08 17:11:34,673 on stmt: $const52.7 = const(int, 1)
DEBUG 2022-02-08 17:11:34,673 on stmt: $54compare_op.8 = dest_dim_size != $const52.7
DEBUG 2022-02-08 17:11:34,673 on stmt: bool56 = global(bool: <class 'bool'>)
DEBUG 2022-02-08 17:11:34,673 on stmt: $56pred = call bool56($54compare_op.8, func=bool56, args=(Var($54compare_op.8, npyimpl.py:217),), kws=(), vararg=None, target=None)
DEBUG 2022-02-08 17:11:34,673 on stmt: branch $56pred, 58, 86
DEBUG 2022-02-08 17:11:34,673 ==== SSA block rewrite pass on 58
DEBUG 2022-02-08 17:11:34,673 Running <numba.core.ssa._FixSSAVars object at 0x000001E9F78D16D0>
DEBUG 2022-02-08 17:11:34,673 on stmt: $62compare_op.2 = src_dim_size != dest_dim_size
DEBUG 2022-02-08 17:11:34,673 on stmt: bool64 = global(bool: <class 'bool'>)
DEBUG 2022-02-08 17:11:34,673 on stmt: $64pred = call bool64($62compare_op.2, func=bool64, args=(Var($62compare_op.2, npyimpl.py:221),), kws=(), vararg=None, target=None)
DEBUG 2022-02-08 17:11:34,673 on stmt: branch $64pred, 66, 102
DEBUG 2022-02-08 17:11:34,673 ==== SSA block rewrite pass on 66
DEBUG 2022-02-08 17:11:34,673 Running <numba.core.ssa._FixSSAVars object at 0x000001E9F78D16D0>
DEBUG 2022-02-08 17:11:34,673 on stmt: $const68.1 = const(int, 1)
DEBUG 2022-02-08 17:11:34,673 on stmt: $70compare_op.2 = src_dim_size != $const68.1
DEBUG 2022-02-08 17:11:34,673 on stmt: bool72 = global(bool: <class 'bool'>)
DEBUG 2022-02-08 17:11:34,673 on stmt: $72pred = call bool72($70compare_op.2, func=bool72, args=(Var($70compare_op.2, npyimpl.py:221),), kws=(), vararg=None, target=None)
DEBUG 2022-02-08 17:11:34,673 on stmt: branch $72pred, 74, 102
DEBUG 2022-02-08 17:11:34,673 ==== SSA block rewrite pass on 74
DEBUG 2022-02-08 17:11:34,673 Running <numba.core.ssa._FixSSAVars object at 0x000001E9F78D16D0>
DEBUG 2022-02-08 17:11:34,673 on stmt: $const76.1 = const(int, 1)
DEBUG 2022-02-08 17:11:34,673 on stmt: $78binary_add.2 = dest_index + $const76.1
DEBUG 2022-02-08 17:11:34,673 find_def var='dest_index' stmt=$78binary_add.2 = dest_index + $const76.1
DEBUG 2022-02-08 17:11:34,673 find_def_from_top label 74
DEBUG 2022-02-08 17:11:34,673 idom 66 from label 74
DEBUG 2022-02-08 17:11:34,673 find_def_from_bottom label 66
DEBUG 2022-02-08 17:11:34,673 find_def_from_top label 66
DEBUG 2022-02-08 17:11:34,673 idom 58 from label 66
DEBUG 2022-02-08 17:11:34,673 find_def_from_bottom label 58
DEBUG 2022-02-08 17:11:34,673 find_def_from_top label 58
DEBUG 2022-02-08 17:11:34,673 idom 34 from label 58
DEBUG 2022-02-08 17:11:34,673 find_def_from_bottom label 34
DEBUG 2022-02-08 17:11:34,673 find_def_from_top label 34
DEBUG 2022-02-08 17:11:34,673 idom 26 from label 34
DEBUG 2022-02-08 17:11:34,673 find_def_from_bottom label 26
DEBUG 2022-02-08 17:11:34,673 replaced with: $78binary_add.2 = dest_index.2 + $const76.1
DEBUG 2022-02-08 17:11:34,673 on stmt: $80unary_negative.3 = unary(fn=<built-in function neg>, value=$78binary_add.2)
DEBUG 2022-02-08 17:11:34,673 on stmt: $82return_value.4 = cast(value=$80unary_negative.3)
DEBUG 2022-02-08 17:11:34,673 on stmt: return $82return_value.4
DEBUG 2022-02-08 17:11:34,673 ==== SSA block rewrite pass on 86
DEBUG 2022-02-08 17:11:34,673 Running <numba.core.ssa._FixSSAVars object at 0x000001E9F78D16D0>
DEBUG 2022-02-08 17:11:34,673 on stmt: $const88.1 = const(int, 1)
DEBUG 2022-02-08 17:11:34,673 on stmt: $90compare_op.2 = src_dim_size != $const88.1
DEBUG 2022-02-08 17:11:34,673 on stmt: bool92 = global(bool: <class 'bool'>)
DEBUG 2022-02-08 17:11:34,689 on stmt: $92pred = call bool92($90compare_op.2, func=bool92, args=(Var($90compare_op.2, npyimpl.py:223),), kws=(), vararg=None, target=None)
DEBUG 2022-02-08 17:11:34,689 on stmt: branch $92pred, 94, 102
DEBUG 2022-02-08 17:11:34,689 ==== SSA block rewrite pass on 94
DEBUG 2022-02-08 17:11:34,689 Running <numba.core.ssa._FixSSAVars object at 0x000001E9F78D16D0>
DEBUG 2022-02-08 17:11:34,689 on stmt: dest_shape[dest_index] = src_dim_size
DEBUG 2022-02-08 17:11:34,689 find_def var='dest_index' stmt=dest_shape[dest_index] = src_dim_size
DEBUG 2022-02-08 17:11:34,689 find_def_from_top label 94
DEBUG 2022-02-08 17:11:34,689 idom 86 from label 94
DEBUG 2022-02-08 17:11:34,689 find_def_from_bottom label 86
DEBUG 2022-02-08 17:11:34,689 find_def_from_top label 86
DEBUG 2022-02-08 17:11:34,689 idom 34 from label 86
DEBUG 2022-02-08 17:11:34,689 find_def_from_bottom label 34
DEBUG 2022-02-08 17:11:34,689 find_def_from_top label 34
DEBUG 2022-02-08 17:11:34,689 idom 26 from label 34
DEBUG 2022-02-08 17:11:34,689 find_def_from_bottom label 26
DEBUG 2022-02-08 17:11:34,689 replaced with: dest_shape[dest_index.2] = src_dim_size
DEBUG 2022-02-08 17:11:34,689 on stmt: jump 102
DEBUG 2022-02-08 17:11:34,689 ==== SSA block rewrite pass on 102
DEBUG 2022-02-08 17:11:34,689 Running <numba.core.ssa._FixSSAVars object at 0x000001E9F78D16D0>
DEBUG 2022-02-08 17:11:34,689 on stmt: $const104.1 = const(int, 1)
DEBUG 2022-02-08 17:11:34,689 on stmt: $106inplace_add.2 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=src_index, rhs=$const104.1, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-08 17:11:34,689 on stmt: src_index = $106inplace_add.2
DEBUG 2022-02-08 17:11:34,689 on stmt: $const112.4 = const(int, 1)
DEBUG 2022-02-08 17:11:34,689 on stmt: $114inplace_add.5 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=dest_index, rhs=$const112.4, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-08 17:11:34,689 find_def var='dest_index' stmt=$114inplace_add.5 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=dest_index, rhs=$const112.4, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-08 17:11:34,689 find_def_from_top label 102
DEBUG 2022-02-08 17:11:34,689 idom 34 from label 102
DEBUG 2022-02-08 17:11:34,689 find_def_from_bottom label 34
DEBUG 2022-02-08 17:11:34,689 find_def_from_top label 34
DEBUG 2022-02-08 17:11:34,689 idom 26 from label 34
DEBUG 2022-02-08 17:11:34,689 find_def_from_bottom label 26
DEBUG 2022-02-08 17:11:34,689 replaced with: $114inplace_add.5 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=dest_index.2, rhs=$const112.4, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-08 17:11:34,689 on stmt: dest_index.1 = $114inplace_add.5
DEBUG 2022-02-08 17:11:34,689 on stmt: jump 26
DEBUG 2022-02-08 17:11:34,689 ==== SSA block rewrite pass on 120
DEBUG 2022-02-08 17:11:34,689 Running <numba.core.ssa._FixSSAVars object at 0x000001E9F78D16D0>
DEBUG 2022-02-08 17:11:34,689 on stmt: $122return_value.1 = cast(value=dest_index)
DEBUG 2022-02-08 17:11:34,689 find_def var='dest_index' stmt=$122return_value.1 = cast(value=dest_index)
DEBUG 2022-02-08 17:11:34,689 find_def_from_top label 120
DEBUG 2022-02-08 17:11:34,689 idom 26 from label 120
DEBUG 2022-02-08 17:11:34,689 find_def_from_bottom label 26
DEBUG 2022-02-08 17:11:34,689 replaced with: $122return_value.1 = cast(value=dest_index.2)
DEBUG 2022-02-08 17:11:34,689 on stmt: return $122return_value.1
DEBUG 2022-02-08 17:11:34,689 Fix SSA violator on var src_index
DEBUG 2022-02-08 17:11:34,689 ==== SSA block rewrite pass on 0
DEBUG 2022-02-08 17:11:34,689 Running <numba.core.ssa._FreshVarHandler object at 0x000001E9F78D1D00>
DEBUG 2022-02-08 17:11:34,689 on stmt: src_ndim = arg(0, name=src_ndim)
DEBUG 2022-02-08 17:11:34,689 on stmt: src_shape = arg(1, name=src_shape)
DEBUG 2022-02-08 17:11:34,689 on stmt: dest_ndim = arg(2, name=dest_ndim)
DEBUG 2022-02-08 17:11:34,689 on stmt: dest_shape = arg(3, name=dest_shape)
DEBUG 2022-02-08 17:11:34,689 on stmt: $6compare_op.2 = src_ndim > dest_ndim
DEBUG 2022-02-08 17:11:34,689 on stmt: bool8 = global(bool: <class 'bool'>)
DEBUG 2022-02-08 17:11:34,689 on stmt: $8pred = call bool8($6compare_op.2, func=bool8, args=(Var($6compare_op.2, npyimpl.py:205),), kws=(), vararg=None, target=None)
DEBUG 2022-02-08 17:11:34,689 on stmt: branch $8pred, 10, 14
DEBUG 2022-02-08 17:11:34,689 ==== SSA block rewrite pass on 10
DEBUG 2022-02-08 17:11:34,689 Running <numba.core.ssa._FreshVarHandler object at 0x000001E9F78D1D00>
DEBUG 2022-02-08 17:11:34,689 on stmt: $const10.0 = const(int, 0)
DEBUG 2022-02-08 17:11:34,689 on stmt: $12return_value.1 = cast(value=$const10.0)
DEBUG 2022-02-08 17:11:34,689 on stmt: return $12return_value.1
DEBUG 2022-02-08 17:11:34,689 ==== SSA block rewrite pass on 14
DEBUG 2022-02-08 17:11:34,689 Running <numba.core.ssa._FreshVarHandler object at 0x000001E9F78D1D00>
DEBUG 2022-02-08 17:11:34,689 on stmt: src_index = const(int, 0)
DEBUG 2022-02-08 17:11:34,689 first assign: src_index
DEBUG 2022-02-08 17:11:34,689 replaced with: src_index = const(int, 0)
DEBUG 2022-02-08 17:11:34,689 on stmt: dest_index = dest_ndim - src_ndim
DEBUG 2022-02-08 17:11:34,689 on stmt: jump 26
DEBUG 2022-02-08 17:11:34,689 ==== SSA block rewrite pass on 26
DEBUG 2022-02-08 17:11:34,689 Running <numba.core.ssa._FreshVarHandler object at 0x000001E9F78D1D00>
DEBUG 2022-02-08 17:11:34,689 on stmt: dest_index.2 = phi(incoming_values=[Var(dest_index.1, npyimpl.py:227), Var(dest_index, npyimpl.py:211)], incoming_blocks=[102, 14])
DEBUG 2022-02-08 17:11:34,689 on stmt: $30compare_op.2 = src_index < src_ndim
DEBUG 2022-02-08 17:11:34,689 on stmt: bool32 = global(bool: <class 'bool'>)
DEBUG 2022-02-08 17:11:34,689 on stmt: $32pred = call bool32($30compare_op.2, func=bool32, args=(Var($30compare_op.2, npyimpl.py:212),), kws=(), vararg=None, target=None)
DEBUG 2022-02-08 17:11:34,689 on stmt: branch $32pred, 34, 120
DEBUG 2022-02-08 17:11:34,689 ==== SSA block rewrite pass on 34
DEBUG 2022-02-08 17:11:34,689 Running <numba.core.ssa._FreshVarHandler object at 0x000001E9F78D1D00>
DEBUG 2022-02-08 17:11:34,689 on stmt: src_dim_size = getitem(value=src_shape, index=src_index, fn=<built-in function getitem>)
DEBUG 2022-02-08 17:11:34,689 on stmt: dest_dim_size = getitem(value=dest_shape, index=dest_index.2, fn=<built-in function getitem>)
DEBUG 2022-02-08 17:11:34,689 on stmt: $const52.7 = const(int, 1)
DEBUG 2022-02-08 17:11:34,689 on stmt: $54compare_op.8 = dest_dim_size != $const52.7
DEBUG 2022-02-08 17:11:34,689 on stmt: bool56 = global(bool: <class 'bool'>)
DEBUG 2022-02-08 17:11:34,689 on stmt: $56pred = call bool56($54compare_op.8, func=bool56, args=(Var($54compare_op.8, npyimpl.py:217),), kws=(), vararg=None, target=None)
DEBUG 2022-02-08 17:11:34,689 on stmt: branch $56pred, 58, 86
DEBUG 2022-02-08 17:11:34,689 ==== SSA block rewrite pass on 58
DEBUG 2022-02-08 17:11:34,689 Running <numba.core.ssa._FreshVarHandler object at 0x000001E9F78D1D00>
DEBUG 2022-02-08 17:11:34,689 on stmt: $62compare_op.2 = src_dim_size != dest_dim_size
DEBUG 2022-02-08 17:11:34,689 on stmt: bool64 = global(bool: <class 'bool'>)
DEBUG 2022-02-08 17:11:34,689 on stmt: $64pred = call bool64($62compare_op.2, func=bool64, args=(Var($62compare_op.2, npyimpl.py:221),), kws=(), vararg=None, target=None)
DEBUG 2022-02-08 17:11:34,689 on stmt: branch $64pred, 66, 102
DEBUG 2022-02-08 17:11:34,689 ==== SSA block rewrite pass on 66
DEBUG 2022-02-08 17:11:34,689 Running <numba.core.ssa._FreshVarHandler object at 0x000001E9F78D1D00>
DEBUG 2022-02-08 17:11:34,689 on stmt: $const68.1 = const(int, 1)
DEBUG 2022-02-08 17:11:34,689 on stmt: $70compare_op.2 = src_dim_size != $const68.1
DEBUG 2022-02-08 17:11:34,689 on stmt: bool72 = global(bool: <class 'bool'>)
DEBUG 2022-02-08 17:11:34,689 on stmt: $72pred = call bool72($70compare_op.2, func=bool72, args=(Var($70compare_op.2, npyimpl.py:221),), kws=(), vararg=None, target=None)
DEBUG 2022-02-08 17:11:34,689 on stmt: branch $72pred, 74, 102
DEBUG 2022-02-08 17:11:34,689 ==== SSA block rewrite pass on 74
DEBUG 2022-02-08 17:11:34,689 Running <numba.core.ssa._FreshVarHandler object at 0x000001E9F78D1D00>
DEBUG 2022-02-08 17:11:34,689 on stmt: $const76.1 = const(int, 1)
DEBUG 2022-02-08 17:11:34,689 on stmt: $78binary_add.2 = dest_index.2 + $const76.1
DEBUG 2022-02-08 17:11:34,689 on stmt: $80unary_negative.3 = unary(fn=<built-in function neg>, value=$78binary_add.2)
DEBUG 2022-02-08 17:11:34,689 on stmt: $82return_value.4 = cast(value=$80unary_negative.3)
DEBUG 2022-02-08 17:11:34,689 on stmt: return $82return_value.4
DEBUG 2022-02-08 17:11:34,689 ==== SSA block rewrite pass on 86
DEBUG 2022-02-08 17:11:34,689 Running <numba.core.ssa._FreshVarHandler object at 0x000001E9F78D1D00>
DEBUG 2022-02-08 17:11:34,689 on stmt: $const88.1 = const(int, 1)
DEBUG 2022-02-08 17:11:34,689 on stmt: $90compare_op.2 = src_dim_size != $const88.1
DEBUG 2022-02-08 17:11:34,689 on stmt: bool92 = global(bool: <class 'bool'>)
DEBUG 2022-02-08 17:11:34,689 on stmt: $92pred = call bool92($90compare_op.2, func=bool92, args=(Var($90compare_op.2, npyimpl.py:223),), kws=(), vararg=None, target=None)
DEBUG 2022-02-08 17:11:34,689 on stmt: branch $92pred, 94, 102
DEBUG 2022-02-08 17:11:34,689 ==== SSA block rewrite pass on 94
DEBUG 2022-02-08 17:11:34,689 Running <numba.core.ssa._FreshVarHandler object at 0x000001E9F78D1D00>
DEBUG 2022-02-08 17:11:34,689 on stmt: dest_shape[dest_index.2] = src_dim_size
DEBUG 2022-02-08 17:11:34,689 on stmt: jump 102
DEBUG 2022-02-08 17:11:34,689 ==== SSA block rewrite pass on 102
DEBUG 2022-02-08 17:11:34,689 Running <numba.core.ssa._FreshVarHandler object at 0x000001E9F78D1D00>
DEBUG 2022-02-08 17:11:34,689 on stmt: $const104.1 = const(int, 1)
DEBUG 2022-02-08 17:11:34,689 on stmt: $106inplace_add.2 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=src_index, rhs=$const104.1, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-08 17:11:34,689 on stmt: src_index = $106inplace_add.2
DEBUG 2022-02-08 17:11:34,689 replaced with: src_index.1 = $106inplace_add.2
DEBUG 2022-02-08 17:11:34,689 on stmt: $const112.4 = const(int, 1)
DEBUG 2022-02-08 17:11:34,689 on stmt: $114inplace_add.5 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=dest_index.2, rhs=$const112.4, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-08 17:11:34,689 on stmt: dest_index.1 = $114inplace_add.5
DEBUG 2022-02-08 17:11:34,689 on stmt: jump 26
DEBUG 2022-02-08 17:11:34,689 ==== SSA block rewrite pass on 120
DEBUG 2022-02-08 17:11:34,689 Running <numba.core.ssa._FreshVarHandler object at 0x000001E9F78D1D00>
DEBUG 2022-02-08 17:11:34,689 on stmt: $122return_value.1 = cast(value=dest_index.2)
DEBUG 2022-02-08 17:11:34,689 on stmt: return $122return_value.1
DEBUG 2022-02-08 17:11:34,689 Replaced assignments: defaultdict(<class 'list'>,
            {14: [<numba.core.ir.Assign object at 0x000001E9F78D1CA0>],
             102: [<numba.core.ir.Assign object at 0x000001E9F78F56A0>]})
DEBUG 2022-02-08 17:11:34,689 ==== SSA block rewrite pass on 0
DEBUG 2022-02-08 17:11:34,689 Running <numba.core.ssa._FixSSAVars object at 0x000001E9F78E7A00>
DEBUG 2022-02-08 17:11:34,689 on stmt: src_ndim = arg(0, name=src_ndim)
DEBUG 2022-02-08 17:11:34,689 on stmt: src_shape = arg(1, name=src_shape)
DEBUG 2022-02-08 17:11:34,689 on stmt: dest_ndim = arg(2, name=dest_ndim)
DEBUG 2022-02-08 17:11:34,689 on stmt: dest_shape = arg(3, name=dest_shape)
DEBUG 2022-02-08 17:11:34,689 on stmt: $6compare_op.2 = src_ndim > dest_ndim
DEBUG 2022-02-08 17:11:34,689 on stmt: bool8 = global(bool: <class 'bool'>)
DEBUG 2022-02-08 17:11:34,689 on stmt: $8pred = call bool8($6compare_op.2, func=bool8, args=(Var($6compare_op.2, npyimpl.py:205),), kws=(), vararg=None, target=None)
DEBUG 2022-02-08 17:11:34,689 on stmt: branch $8pred, 10, 14
DEBUG 2022-02-08 17:11:34,689 ==== SSA block rewrite pass on 10
DEBUG 2022-02-08 17:11:34,689 Running <numba.core.ssa._FixSSAVars object at 0x000001E9F78E7A00>
DEBUG 2022-02-08 17:11:34,689 on stmt: $const10.0 = const(int, 0)
DEBUG 2022-02-08 17:11:34,689 on stmt: $12return_value.1 = cast(value=$const10.0)
DEBUG 2022-02-08 17:11:34,689 on stmt: return $12return_value.1
DEBUG 2022-02-08 17:11:34,689 ==== SSA block rewrite pass on 14
DEBUG 2022-02-08 17:11:34,689 Running <numba.core.ssa._FixSSAVars object at 0x000001E9F78E7A00>
DEBUG 2022-02-08 17:11:34,689 on stmt: src_index = const(int, 0)
DEBUG 2022-02-08 17:11:34,689 on stmt: dest_index = dest_ndim - src_ndim
DEBUG 2022-02-08 17:11:34,689 on stmt: jump 26
DEBUG 2022-02-08 17:11:34,689 ==== SSA block rewrite pass on 26
DEBUG 2022-02-08 17:11:34,689 Running <numba.core.ssa._FixSSAVars object at 0x000001E9F78E7A00>
DEBUG 2022-02-08 17:11:34,689 on stmt: dest_index.2 = phi(incoming_values=[Var(dest_index.1, npyimpl.py:227), Var(dest_index, npyimpl.py:211)], incoming_blocks=[102, 14])
DEBUG 2022-02-08 17:11:34,689 on stmt: $30compare_op.2 = src_index < src_ndim
DEBUG 2022-02-08 17:11:34,689 find_def var='src_index' stmt=$30compare_op.2 = src_index < src_ndim
DEBUG 2022-02-08 17:11:34,689 find_def_from_top label 26
DEBUG 2022-02-08 17:11:34,689 insert phi node src_index.2 = phi(incoming_values=[], incoming_blocks=[]) at 26
DEBUG 2022-02-08 17:11:34,689 find_def_from_bottom label 102
DEBUG 2022-02-08 17:11:34,689 incoming_def src_index.1 = $106inplace_add.2
DEBUG 2022-02-08 17:11:34,689 find_def_from_bottom label 14
DEBUG 2022-02-08 17:11:34,689 incoming_def src_index = const(int, 0)
DEBUG 2022-02-08 17:11:34,689 replaced with: $30compare_op.2 = src_index.2 < src_ndim
DEBUG 2022-02-08 17:11:34,689 on stmt: bool32 = global(bool: <class 'bool'>)
DEBUG 2022-02-08 17:11:34,689 on stmt: $32pred = call bool32($30compare_op.2, func=bool32, args=(Var($30compare_op.2, npyimpl.py:212),), kws=(), vararg=None, target=None)
DEBUG 2022-02-08 17:11:34,689 on stmt: branch $32pred, 34, 120
DEBUG 2022-02-08 17:11:34,689 ==== SSA block rewrite pass on 34
DEBUG 2022-02-08 17:11:34,689 Running <numba.core.ssa._FixSSAVars object at 0x000001E9F78E7A00>
DEBUG 2022-02-08 17:11:34,689 on stmt: src_dim_size = getitem(value=src_shape, index=src_index, fn=<built-in function getitem>)
DEBUG 2022-02-08 17:11:34,689 find_def var='src_index' stmt=src_dim_size = getitem(value=src_shape, index=src_index, fn=<built-in function getitem>)
DEBUG 2022-02-08 17:11:34,689 find_def_from_top label 34
DEBUG 2022-02-08 17:11:34,689 idom 26 from label 34
DEBUG 2022-02-08 17:11:34,704 find_def_from_bottom label 26
DEBUG 2022-02-08 17:11:34,704 replaced with: src_dim_size = getitem(value=src_shape, index=src_index.2, fn=<built-in function getitem>)
DEBUG 2022-02-08 17:11:34,704 on stmt: dest_dim_size = getitem(value=dest_shape, index=dest_index.2, fn=<built-in function getitem>)
DEBUG 2022-02-08 17:11:34,704 on stmt: $const52.7 = const(int, 1)
DEBUG 2022-02-08 17:11:34,704 on stmt: $54compare_op.8 = dest_dim_size != $const52.7
DEBUG 2022-02-08 17:11:34,704 on stmt: bool56 = global(bool: <class 'bool'>)
DEBUG 2022-02-08 17:11:34,704 on stmt: $56pred = call bool56($54compare_op.8, func=bool56, args=(Var($54compare_op.8, npyimpl.py:217),), kws=(), vararg=None, target=None)
DEBUG 2022-02-08 17:11:34,704 on stmt: branch $56pred, 58, 86
DEBUG 2022-02-08 17:11:34,704 ==== SSA block rewrite pass on 58
DEBUG 2022-02-08 17:11:34,704 Running <numba.core.ssa._FixSSAVars object at 0x000001E9F78E7A00>
DEBUG 2022-02-08 17:11:34,704 on stmt: $62compare_op.2 = src_dim_size != dest_dim_size
DEBUG 2022-02-08 17:11:34,704 on stmt: bool64 = global(bool: <class 'bool'>)
DEBUG 2022-02-08 17:11:34,704 on stmt: $64pred = call bool64($62compare_op.2, func=bool64, args=(Var($62compare_op.2, npyimpl.py:221),), kws=(), vararg=None, target=None)
DEBUG 2022-02-08 17:11:34,704 on stmt: branch $64pred, 66, 102
DEBUG 2022-02-08 17:11:34,704 ==== SSA block rewrite pass on 66
DEBUG 2022-02-08 17:11:34,704 Running <numba.core.ssa._FixSSAVars object at 0x000001E9F78E7A00>
DEBUG 2022-02-08 17:11:34,704 on stmt: $const68.1 = const(int, 1)
DEBUG 2022-02-08 17:11:34,704 on stmt: $70compare_op.2 = src_dim_size != $const68.1
DEBUG 2022-02-08 17:11:34,704 on stmt: bool72 = global(bool: <class 'bool'>)
DEBUG 2022-02-08 17:11:34,704 on stmt: $72pred = call bool72($70compare_op.2, func=bool72, args=(Var($70compare_op.2, npyimpl.py:221),), kws=(), vararg=None, target=None)
DEBUG 2022-02-08 17:11:34,704 on stmt: branch $72pred, 74, 102
DEBUG 2022-02-08 17:11:34,704 ==== SSA block rewrite pass on 74
DEBUG 2022-02-08 17:11:34,704 Running <numba.core.ssa._FixSSAVars object at 0x000001E9F78E7A00>
DEBUG 2022-02-08 17:11:34,704 on stmt: $const76.1 = const(int, 1)
DEBUG 2022-02-08 17:11:34,704 on stmt: $78binary_add.2 = dest_index.2 + $const76.1
DEBUG 2022-02-08 17:11:34,704 on stmt: $80unary_negative.3 = unary(fn=<built-in function neg>, value=$78binary_add.2)
DEBUG 2022-02-08 17:11:34,704 on stmt: $82return_value.4 = cast(value=$80unary_negative.3)
DEBUG 2022-02-08 17:11:34,704 on stmt: return $82return_value.4
DEBUG 2022-02-08 17:11:34,704 ==== SSA block rewrite pass on 86
DEBUG 2022-02-08 17:11:34,704 Running <numba.core.ssa._FixSSAVars object at 0x000001E9F78E7A00>
DEBUG 2022-02-08 17:11:34,704 on stmt: $const88.1 = const(int, 1)
DEBUG 2022-02-08 17:11:34,704 on stmt: $90compare_op.2 = src_dim_size != $const88.1
DEBUG 2022-02-08 17:11:34,704 on stmt: bool92 = global(bool: <class 'bool'>)
DEBUG 2022-02-08 17:11:34,704 on stmt: $92pred = call bool92($90compare_op.2, func=bool92, args=(Var($90compare_op.2, npyimpl.py:223),), kws=(), vararg=None, target=None)
DEBUG 2022-02-08 17:11:34,704 on stmt: branch $92pred, 94, 102
DEBUG 2022-02-08 17:11:34,704 ==== SSA block rewrite pass on 94
DEBUG 2022-02-08 17:11:34,704 Running <numba.core.ssa._FixSSAVars object at 0x000001E9F78E7A00>
DEBUG 2022-02-08 17:11:34,704 on stmt: dest_shape[dest_index.2] = src_dim_size
DEBUG 2022-02-08 17:11:34,704 on stmt: jump 102
DEBUG 2022-02-08 17:11:34,704 ==== SSA block rewrite pass on 102
DEBUG 2022-02-08 17:11:34,704 Running <numba.core.ssa._FixSSAVars object at 0x000001E9F78E7A00>
DEBUG 2022-02-08 17:11:34,704 on stmt: $const104.1 = const(int, 1)
DEBUG 2022-02-08 17:11:34,704 on stmt: $106inplace_add.2 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=src_index, rhs=$const104.1, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-08 17:11:34,704 find_def var='src_index' stmt=$106inplace_add.2 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=src_index, rhs=$const104.1, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-08 17:11:34,704 find_def_from_top label 102
DEBUG 2022-02-08 17:11:34,704 idom 34 from label 102
DEBUG 2022-02-08 17:11:34,704 find_def_from_bottom label 34
DEBUG 2022-02-08 17:11:34,704 find_def_from_top label 34
DEBUG 2022-02-08 17:11:34,704 idom 26 from label 34
DEBUG 2022-02-08 17:11:34,704 find_def_from_bottom label 26
DEBUG 2022-02-08 17:11:34,704 replaced with: $106inplace_add.2 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=src_index.2, rhs=$const104.1, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-08 17:11:34,704 on stmt: src_index.1 = $106inplace_add.2
DEBUG 2022-02-08 17:11:34,704 on stmt: $const112.4 = const(int, 1)
DEBUG 2022-02-08 17:11:34,704 on stmt: $114inplace_add.5 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=dest_index.2, rhs=$const112.4, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-08 17:11:34,704 on stmt: dest_index.1 = $114inplace_add.5
DEBUG 2022-02-08 17:11:34,704 on stmt: jump 26
DEBUG 2022-02-08 17:11:34,704 ==== SSA block rewrite pass on 120
DEBUG 2022-02-08 17:11:34,704 Running <numba.core.ssa._FixSSAVars object at 0x000001E9F78E7A00>
DEBUG 2022-02-08 17:11:34,704 on stmt: $122return_value.1 = cast(value=dest_index.2)
DEBUG 2022-02-08 17:11:34,704 on stmt: return $122return_value.1
DEBUG 2022-02-08 17:11:34,820 bytecode dump:
>          0	NOP(arg=None, lineno=187)
           2	LOAD_FAST(arg=0, lineno=187)
           4	LOAD_CONST(arg=1, lineno=1)
           6	COMPARE_OP(arg=3, lineno=1)
           8	RETURN_VALUE(arg=None, lineno=1)
DEBUG 2022-02-08 17:11:34,820 pending: deque([State(pc_initial=0 nstack_initial=0)])
DEBUG 2022-02-08 17:11:34,820 stack: []
DEBUG 2022-02-08 17:11:34,820 dispatch pc=0, inst=NOP(arg=None, lineno=187)
DEBUG 2022-02-08 17:11:34,820 stack []
DEBUG 2022-02-08 17:11:34,820 dispatch pc=2, inst=LOAD_FAST(arg=0, lineno=187)
DEBUG 2022-02-08 17:11:34,820 stack []
DEBUG 2022-02-08 17:11:34,820 dispatch pc=4, inst=LOAD_CONST(arg=1, lineno=1)
DEBUG 2022-02-08 17:11:34,820 stack ['$kept_edges_12.0']
DEBUG 2022-02-08 17:11:34,820 dispatch pc=6, inst=COMPARE_OP(arg=3, lineno=1)
DEBUG 2022-02-08 17:11:34,820 stack ['$kept_edges_12.0', '$const4.1']
DEBUG 2022-02-08 17:11:34,820 dispatch pc=8, inst=RETURN_VALUE(arg=None, lineno=1)
DEBUG 2022-02-08 17:11:34,820 stack ['$6compare_op.2']
DEBUG 2022-02-08 17:11:34,820 end state. edges=[]
DEBUG 2022-02-08 17:11:34,820 -------------------------Prune PHIs-------------------------
DEBUG 2022-02-08 17:11:34,820 Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
DEBUG 2022-02-08 17:11:34,820 defmap: {}
DEBUG 2022-02-08 17:11:34,820 phismap: defaultdict(<class 'set'>, {})
DEBUG 2022-02-08 17:11:34,820 changing phismap: defaultdict(<class 'set'>, {})
DEBUG 2022-02-08 17:11:34,820 keep phismap: {}
DEBUG 2022-02-08 17:11:34,820 new_out: defaultdict(<class 'dict'>, {})
DEBUG 2022-02-08 17:11:34,820 ----------------------DONE Prune PHIs-----------------------
DEBUG 2022-02-08 17:11:34,820 block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$kept_edges_12.0'}), (4, {'res': '$const4.1'}), (6, {'lhs': '$kept_edges_12.0', 'rhs': '$const4.1', 'res': '$6compare_op.2'}), (8, {'retval': '$6compare_op.2', 'castval': '$8return_value.3'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG 2022-02-08 17:11:34,820 label 0:
    kept_edges_1 = arg(0, name=kept_edges_1) ['kept_edges_1']
    $const4.1 = const(int, 0)                ['$const4.1']
    $6compare_op.2 = kept_edges_1 != $const4.1 ['$6compare_op.2', '$const4.1', 'kept_edges_1']
    $8return_value.3 = cast(value=$6compare_op.2) ['$6compare_op.2', '$8return_value.3']
    return $8return_value.3                  ['$8return_value.3']

DEBUG 2022-02-08 17:11:34,820 ==== SSA block analysis pass on 0
DEBUG 2022-02-08 17:11:34,820 Running <numba.core.ssa._GatherDefsHandler object at 0x000001E9F7784040>
DEBUG 2022-02-08 17:11:34,820 on stmt: kept_edges_1 = arg(0, name=kept_edges_1)
DEBUG 2022-02-08 17:11:34,820 on stmt: $const4.1 = const(int, 0)
DEBUG 2022-02-08 17:11:34,820 on stmt: $6compare_op.2 = kept_edges_1 != $const4.1
DEBUG 2022-02-08 17:11:34,820 on stmt: $8return_value.3 = cast(value=$6compare_op.2)
DEBUG 2022-02-08 17:11:34,820 on stmt: return $8return_value.3
DEBUG 2022-02-08 17:11:34,820 defs defaultdict(<class 'list'>,
            {'$6compare_op.2': [<numba.core.ir.Assign object at 0x000001E9F77A20D0>],
             '$8return_value.3': [<numba.core.ir.Assign object at 0x000001E9F77A2610>],
             '$const4.1': [<numba.core.ir.Assign object at 0x000001E9F77A2220>],
             'kept_edges_1': [<numba.core.ir.Assign object at 0x000001E9F7784400>]})
DEBUG 2022-02-08 17:11:34,820 SSA violators set()
DEBUG 2022-02-08 17:11:34,858 bytecode dump:
>          0	NOP(arg=None, lineno=191)
           2	LOAD_FAST(arg=1, lineno=191)
           4	LOAD_FAST(arg=0, lineno=196)
           6	BINARY_MULTIPLY(arg=None, lineno=1)
           8	RETURN_VALUE(arg=None, lineno=1)
DEBUG 2022-02-08 17:11:34,858 pending: deque([State(pc_initial=0 nstack_initial=0)])
DEBUG 2022-02-08 17:11:34,858 stack: []
DEBUG 2022-02-08 17:11:34,858 dispatch pc=0, inst=NOP(arg=None, lineno=191)
DEBUG 2022-02-08 17:11:34,858 stack []
DEBUG 2022-02-08 17:11:34,858 dispatch pc=2, inst=LOAD_FAST(arg=1, lineno=191)
DEBUG 2022-02-08 17:11:34,858 stack []
DEBUG 2022-02-08 17:11:34,858 dispatch pc=4, inst=LOAD_FAST(arg=0, lineno=196)
DEBUG 2022-02-08 17:11:34,858 stack ['$kept_edges_nonzero_12.0']
DEBUG 2022-02-08 17:11:34,858 dispatch pc=6, inst=BINARY_MULTIPLY(arg=None, lineno=1)
DEBUG 2022-02-08 17:11:34,858 stack ['$kept_edges_nonzero_12.0', '$_110binary_subscr_50_14.1']
DEBUG 2022-02-08 17:11:34,858 dispatch pc=8, inst=RETURN_VALUE(arg=None, lineno=1)
DEBUG 2022-02-08 17:11:34,858 stack ['$6binary_multiply.2']
DEBUG 2022-02-08 17:11:34,858 end state. edges=[]
DEBUG 2022-02-08 17:11:34,858 -------------------------Prune PHIs-------------------------
DEBUG 2022-02-08 17:11:34,858 Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
DEBUG 2022-02-08 17:11:34,858 defmap: {}
DEBUG 2022-02-08 17:11:34,858 phismap: defaultdict(<class 'set'>, {})
DEBUG 2022-02-08 17:11:34,858 changing phismap: defaultdict(<class 'set'>, {})
DEBUG 2022-02-08 17:11:34,858 keep phismap: {}
DEBUG 2022-02-08 17:11:34,858 new_out: defaultdict(<class 'dict'>, {})
DEBUG 2022-02-08 17:11:34,858 ----------------------DONE Prune PHIs-----------------------
DEBUG 2022-02-08 17:11:34,858 block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$kept_edges_nonzero_12.0'}), (4, {'res': '$_110binary_subscr_50_14.1'}), (6, {'lhs': '$kept_edges_nonzero_12.0', 'rhs': '$_110binary_subscr_50_14.1', 'res': '$6binary_multiply.2'}), (8, {'retval': '$6binary_multiply.2', 'castval': '$8return_value.3'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG 2022-02-08 17:11:34,858 label 0:
    _110binary_subscr_50_1 = arg(0, name=_110binary_subscr_50_1) ['_110binary_subscr_50_1']
    kept_edges_nonzero_1 = arg(1, name=kept_edges_nonzero_1) ['kept_edges_nonzero_1']
    $6binary_multiply.2 = kept_edges_nonzero_1 * _110binary_subscr_50_1 ['$6binary_multiply.2', '_110binary_subscr_50_1', 'kept_edges_nonzero_1']
    $8return_value.3 = cast(value=$6binary_multiply.2) ['$6binary_multiply.2', '$8return_value.3']
    return $8return_value.3                  ['$8return_value.3']

DEBUG 2022-02-08 17:11:34,858 ==== SSA block analysis pass on 0
DEBUG 2022-02-08 17:11:34,858 Running <numba.core.ssa._GatherDefsHandler object at 0x000001E9F675D640>
DEBUG 2022-02-08 17:11:34,858 on stmt: _110binary_subscr_50_1 = arg(0, name=_110binary_subscr_50_1)
DEBUG 2022-02-08 17:11:34,858 on stmt: kept_edges_nonzero_1 = arg(1, name=kept_edges_nonzero_1)
DEBUG 2022-02-08 17:11:34,858 on stmt: $6binary_multiply.2 = kept_edges_nonzero_1 * _110binary_subscr_50_1
DEBUG 2022-02-08 17:11:34,858 on stmt: $8return_value.3 = cast(value=$6binary_multiply.2)
DEBUG 2022-02-08 17:11:34,858 on stmt: return $8return_value.3
DEBUG 2022-02-08 17:11:34,858 defs defaultdict(<class 'list'>,
            {'$6binary_multiply.2': [<numba.core.ir.Assign object at 0x000001E9F675DF10>],
             '$8return_value.3': [<numba.core.ir.Assign object at 0x000001E9F67500A0>],
             '_110binary_subscr_50_1': [<numba.core.ir.Assign object at 0x000001E9F675D160>],
             'kept_edges_nonzero_1': [<numba.core.ir.Assign object at 0x000001E9F675D1C0>]})
DEBUG 2022-02-08 17:11:34,858 SSA violators set()
DEBUG 2022-02-08 17:11:34,889 bytecode dump:
>          0	NOP(arg=None, lineno=191)
           2	LOAD_FAST(arg=1, lineno=191)
           4	LOAD_FAST(arg=0, lineno=197)
           6	BINARY_MULTIPLY(arg=None, lineno=1)
           8	RETURN_VALUE(arg=None, lineno=1)
DEBUG 2022-02-08 17:11:34,889 pending: deque([State(pc_initial=0 nstack_initial=0)])
DEBUG 2022-02-08 17:11:34,889 stack: []
DEBUG 2022-02-08 17:11:34,889 dispatch pc=0, inst=NOP(arg=None, lineno=191)
DEBUG 2022-02-08 17:11:34,889 stack []
DEBUG 2022-02-08 17:11:34,889 dispatch pc=2, inst=LOAD_FAST(arg=1, lineno=191)
DEBUG 2022-02-08 17:11:34,889 stack []
DEBUG 2022-02-08 17:11:34,905 dispatch pc=4, inst=LOAD_FAST(arg=0, lineno=197)
DEBUG 2022-02-08 17:11:34,905 stack ['$kept_edges_nonzero_22.0']
DEBUG 2022-02-08 17:11:34,905 dispatch pc=6, inst=BINARY_MULTIPLY(arg=None, lineno=1)
DEBUG 2022-02-08 17:11:34,905 stack ['$kept_edges_nonzero_22.0', '$_150binary_subscr_73_14.1']
DEBUG 2022-02-08 17:11:34,905 dispatch pc=8, inst=RETURN_VALUE(arg=None, lineno=1)
DEBUG 2022-02-08 17:11:34,905 stack ['$6binary_multiply.2']
DEBUG 2022-02-08 17:11:34,905 end state. edges=[]
DEBUG 2022-02-08 17:11:34,905 -------------------------Prune PHIs-------------------------
DEBUG 2022-02-08 17:11:34,905 Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
DEBUG 2022-02-08 17:11:34,905 defmap: {}
DEBUG 2022-02-08 17:11:34,905 phismap: defaultdict(<class 'set'>, {})
DEBUG 2022-02-08 17:11:34,905 changing phismap: defaultdict(<class 'set'>, {})
DEBUG 2022-02-08 17:11:34,905 keep phismap: {}
DEBUG 2022-02-08 17:11:34,905 new_out: defaultdict(<class 'dict'>, {})
DEBUG 2022-02-08 17:11:34,905 ----------------------DONE Prune PHIs-----------------------
DEBUG 2022-02-08 17:11:34,905 block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$kept_edges_nonzero_22.0'}), (4, {'res': '$_150binary_subscr_73_14.1'}), (6, {'lhs': '$kept_edges_nonzero_22.0', 'rhs': '$_150binary_subscr_73_14.1', 'res': '$6binary_multiply.2'}), (8, {'retval': '$6binary_multiply.2', 'castval': '$8return_value.3'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG 2022-02-08 17:11:34,905 label 0:
    _150binary_subscr_73_1 = arg(0, name=_150binary_subscr_73_1) ['_150binary_subscr_73_1']
    kept_edges_nonzero_2 = arg(1, name=kept_edges_nonzero_2) ['kept_edges_nonzero_2']
    $6binary_multiply.2 = kept_edges_nonzero_2 * _150binary_subscr_73_1 ['$6binary_multiply.2', '_150binary_subscr_73_1', 'kept_edges_nonzero_2']
    $8return_value.3 = cast(value=$6binary_multiply.2) ['$6binary_multiply.2', '$8return_value.3']
    return $8return_value.3                  ['$8return_value.3']

DEBUG 2022-02-08 17:11:34,905 ==== SSA block analysis pass on 0
DEBUG 2022-02-08 17:11:34,905 Running <numba.core.ssa._GatherDefsHandler object at 0x000001E9F7988760>
DEBUG 2022-02-08 17:11:34,905 on stmt: _150binary_subscr_73_1 = arg(0, name=_150binary_subscr_73_1)
DEBUG 2022-02-08 17:11:34,905 on stmt: kept_edges_nonzero_2 = arg(1, name=kept_edges_nonzero_2)
DEBUG 2022-02-08 17:11:34,905 on stmt: $6binary_multiply.2 = kept_edges_nonzero_2 * _150binary_subscr_73_1
DEBUG 2022-02-08 17:11:34,905 on stmt: $8return_value.3 = cast(value=$6binary_multiply.2)
DEBUG 2022-02-08 17:11:34,905 on stmt: return $8return_value.3
DEBUG 2022-02-08 17:11:34,905 defs defaultdict(<class 'list'>,
            {'$6binary_multiply.2': [<numba.core.ir.Assign object at 0x000001E9F798D1C0>],
             '$8return_value.3': [<numba.core.ir.Assign object at 0x000001E9F798D310>],
             '_150binary_subscr_73_1': [<numba.core.ir.Assign object at 0x000001E9F7988460>],
             'kept_edges_nonzero_2': [<numba.core.ir.Assign object at 0x000001E9F7988040>]})
DEBUG 2022-02-08 17:11:34,905 SSA violators set()
DEBUG 2022-02-08 17:11:34,936 bytecode dump:
>          0	NOP(arg=None, lineno=191)
           2	LOAD_FAST(arg=1, lineno=191)
           4	LOAD_FAST(arg=0, lineno=202)
           6	BINARY_MULTIPLY(arg=None, lineno=1)
           8	RETURN_VALUE(arg=None, lineno=1)
DEBUG 2022-02-08 17:11:34,936 pending: deque([State(pc_initial=0 nstack_initial=0)])
DEBUG 2022-02-08 17:11:34,936 stack: []
DEBUG 2022-02-08 17:11:34,936 dispatch pc=0, inst=NOP(arg=None, lineno=191)
DEBUG 2022-02-08 17:11:34,936 stack []
DEBUG 2022-02-08 17:11:34,936 dispatch pc=2, inst=LOAD_FAST(arg=1, lineno=191)
DEBUG 2022-02-08 17:11:34,936 stack []
DEBUG 2022-02-08 17:11:34,936 dispatch pc=4, inst=LOAD_FAST(arg=0, lineno=202)
DEBUG 2022-02-08 17:11:34,936 stack ['$kept_edges_nonzero_32.0']
DEBUG 2022-02-08 17:11:34,936 dispatch pc=6, inst=BINARY_MULTIPLY(arg=None, lineno=1)
DEBUG 2022-02-08 17:11:34,936 stack ['$kept_edges_nonzero_32.0', '$_206binary_subscr_101_14.1']
DEBUG 2022-02-08 17:11:34,936 dispatch pc=8, inst=RETURN_VALUE(arg=None, lineno=1)
DEBUG 2022-02-08 17:11:34,936 stack ['$6binary_multiply.2']
DEBUG 2022-02-08 17:11:34,936 end state. edges=[]
DEBUG 2022-02-08 17:11:34,936 -------------------------Prune PHIs-------------------------
DEBUG 2022-02-08 17:11:34,936 Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
DEBUG 2022-02-08 17:11:34,936 defmap: {}
DEBUG 2022-02-08 17:11:34,936 phismap: defaultdict(<class 'set'>, {})
DEBUG 2022-02-08 17:11:34,936 changing phismap: defaultdict(<class 'set'>, {})
DEBUG 2022-02-08 17:11:34,936 keep phismap: {}
DEBUG 2022-02-08 17:11:34,936 new_out: defaultdict(<class 'dict'>, {})
DEBUG 2022-02-08 17:11:34,936 ----------------------DONE Prune PHIs-----------------------
DEBUG 2022-02-08 17:11:34,936 block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$kept_edges_nonzero_32.0'}), (4, {'res': '$_206binary_subscr_101_14.1'}), (6, {'lhs': '$kept_edges_nonzero_32.0', 'rhs': '$_206binary_subscr_101_14.1', 'res': '$6binary_multiply.2'}), (8, {'retval': '$6binary_multiply.2', 'castval': '$8return_value.3'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG 2022-02-08 17:11:34,952 label 0:
    _206binary_subscr_101_1 = arg(0, name=_206binary_subscr_101_1) ['_206binary_subscr_101_1']
    kept_edges_nonzero_3 = arg(1, name=kept_edges_nonzero_3) ['kept_edges_nonzero_3']
    $6binary_multiply.2 = kept_edges_nonzero_3 * _206binary_subscr_101_1 ['$6binary_multiply.2', '_206binary_subscr_101_1', 'kept_edges_nonzero_3']
    $8return_value.3 = cast(value=$6binary_multiply.2) ['$6binary_multiply.2', '$8return_value.3']
    return $8return_value.3                  ['$8return_value.3']

DEBUG 2022-02-08 17:11:34,952 ==== SSA block analysis pass on 0
DEBUG 2022-02-08 17:11:34,952 Running <numba.core.ssa._GatherDefsHandler object at 0x000001E9F7AB2BB0>
DEBUG 2022-02-08 17:11:34,952 on stmt: _206binary_subscr_101_1 = arg(0, name=_206binary_subscr_101_1)
DEBUG 2022-02-08 17:11:34,952 on stmt: kept_edges_nonzero_3 = arg(1, name=kept_edges_nonzero_3)
DEBUG 2022-02-08 17:11:34,952 on stmt: $6binary_multiply.2 = kept_edges_nonzero_3 * _206binary_subscr_101_1
DEBUG 2022-02-08 17:11:34,952 on stmt: $8return_value.3 = cast(value=$6binary_multiply.2)
DEBUG 2022-02-08 17:11:34,952 on stmt: return $8return_value.3
DEBUG 2022-02-08 17:11:34,952 defs defaultdict(<class 'list'>,
            {'$6binary_multiply.2': [<numba.core.ir.Assign object at 0x000001E9F7AB77F0>],
             '$8return_value.3': [<numba.core.ir.Assign object at 0x000001E9F7AB7940>],
             '_206binary_subscr_101_1': [<numba.core.ir.Assign object at 0x000001E9F7AB2520>],
             'kept_edges_nonzero_3': [<numba.core.ir.Assign object at 0x000001E9F7A8F5B0>]})
DEBUG 2022-02-08 17:11:34,952 SSA violators set()
DEBUG 2022-02-08 17:11:34,974 bytecode dump:
>          0	NOP(arg=None, lineno=191)
           2	LOAD_FAST(arg=1, lineno=191)
           4	LOAD_FAST(arg=0, lineno=203)
           6	BINARY_MULTIPLY(arg=None, lineno=1)
           8	RETURN_VALUE(arg=None, lineno=1)
DEBUG 2022-02-08 17:11:34,974 pending: deque([State(pc_initial=0 nstack_initial=0)])
DEBUG 2022-02-08 17:11:34,974 stack: []
DEBUG 2022-02-08 17:11:34,974 dispatch pc=0, inst=NOP(arg=None, lineno=191)
DEBUG 2022-02-08 17:11:34,974 stack []
DEBUG 2022-02-08 17:11:34,974 dispatch pc=2, inst=LOAD_FAST(arg=1, lineno=191)
DEBUG 2022-02-08 17:11:34,974 stack []
DEBUG 2022-02-08 17:11:34,974 dispatch pc=4, inst=LOAD_FAST(arg=0, lineno=203)
DEBUG 2022-02-08 17:11:34,974 stack ['$kept_edges_nonzero_42.0']
DEBUG 2022-02-08 17:11:34,974 dispatch pc=6, inst=BINARY_MULTIPLY(arg=None, lineno=1)
DEBUG 2022-02-08 17:11:34,974 stack ['$kept_edges_nonzero_42.0', '$_230binary_subscr_114_14.1']
DEBUG 2022-02-08 17:11:34,974 dispatch pc=8, inst=RETURN_VALUE(arg=None, lineno=1)
DEBUG 2022-02-08 17:11:34,974 stack ['$6binary_multiply.2']
DEBUG 2022-02-08 17:11:34,974 end state. edges=[]
DEBUG 2022-02-08 17:11:34,974 -------------------------Prune PHIs-------------------------
DEBUG 2022-02-08 17:11:34,974 Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
DEBUG 2022-02-08 17:11:34,974 defmap: {}
DEBUG 2022-02-08 17:11:34,974 phismap: defaultdict(<class 'set'>, {})
DEBUG 2022-02-08 17:11:34,974 changing phismap: defaultdict(<class 'set'>, {})
DEBUG 2022-02-08 17:11:34,974 keep phismap: {}
DEBUG 2022-02-08 17:11:34,974 new_out: defaultdict(<class 'dict'>, {})
DEBUG 2022-02-08 17:11:34,974 ----------------------DONE Prune PHIs-----------------------
DEBUG 2022-02-08 17:11:34,974 block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$kept_edges_nonzero_42.0'}), (4, {'res': '$_230binary_subscr_114_14.1'}), (6, {'lhs': '$kept_edges_nonzero_42.0', 'rhs': '$_230binary_subscr_114_14.1', 'res': '$6binary_multiply.2'}), (8, {'retval': '$6binary_multiply.2', 'castval': '$8return_value.3'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG 2022-02-08 17:11:34,974 label 0:
    _230binary_subscr_114_1 = arg(0, name=_230binary_subscr_114_1) ['_230binary_subscr_114_1']
    kept_edges_nonzero_4 = arg(1, name=kept_edges_nonzero_4) ['kept_edges_nonzero_4']
    $6binary_multiply.2 = kept_edges_nonzero_4 * _230binary_subscr_114_1 ['$6binary_multiply.2', '_230binary_subscr_114_1', 'kept_edges_nonzero_4']
    $8return_value.3 = cast(value=$6binary_multiply.2) ['$6binary_multiply.2', '$8return_value.3']
    return $8return_value.3                  ['$8return_value.3']

DEBUG 2022-02-08 17:11:34,974 ==== SSA block analysis pass on 0
DEBUG 2022-02-08 17:11:34,974 Running <numba.core.ssa._GatherDefsHandler object at 0x000001E9F7B68880>
DEBUG 2022-02-08 17:11:34,974 on stmt: _230binary_subscr_114_1 = arg(0, name=_230binary_subscr_114_1)
DEBUG 2022-02-08 17:11:34,974 on stmt: kept_edges_nonzero_4 = arg(1, name=kept_edges_nonzero_4)
DEBUG 2022-02-08 17:11:34,974 on stmt: $6binary_multiply.2 = kept_edges_nonzero_4 * _230binary_subscr_114_1
DEBUG 2022-02-08 17:11:34,974 on stmt: $8return_value.3 = cast(value=$6binary_multiply.2)
DEBUG 2022-02-08 17:11:34,974 on stmt: return $8return_value.3
DEBUG 2022-02-08 17:11:34,974 defs defaultdict(<class 'list'>,
            {'$6binary_multiply.2': [<numba.core.ir.Assign object at 0x000001E9F7B68C10>],
             '$8return_value.3': [<numba.core.ir.Assign object at 0x000001E9F7B68D60>],
             '_230binary_subscr_114_1': [<numba.core.ir.Assign object at 0x000001E9F7B68190>],
             'kept_edges_nonzero_4': [<numba.core.ir.Assign object at 0x000001E9F7B68070>]})
DEBUG 2022-02-08 17:11:34,974 SSA violators set()
DEBUG 2022-02-08 17:11:36,162 bytecode dump:
>          0	NOP(arg=None, lineno=169)
           2	LOAD_DEREF(arg=0, lineno=169)
           4	STORE_FAST(arg=1, lineno=169)
           6	LOAD_GLOBAL(arg=0, lineno=170)
           8	LOAD_METHOD(arg=1, lineno=170)
          10	LOAD_FAST(arg=0, lineno=170)
          12	CALL_METHOD(arg=1, lineno=170)
          14	GET_ITER(arg=None, lineno=170)
>         16	FOR_ITER(arg=16, lineno=170)
          18	STORE_FAST(arg=2, lineno=170)
          20	LOAD_FAST(arg=1, lineno=171)
          22	LOAD_FAST(arg=2, lineno=171)
          24	LOAD_METHOD(arg=2, lineno=171)
          26	CALL_METHOD(arg=0, lineno=171)
          28	INPLACE_ADD(arg=None, lineno=171)
          30	STORE_FAST(arg=1, lineno=171)
          32	JUMP_ABSOLUTE(arg=16, lineno=171)
>         34	LOAD_FAST(arg=1, lineno=172)
          36	RETURN_VALUE(arg=None, lineno=172)
DEBUG 2022-02-08 17:11:36,162 pending: deque([State(pc_initial=0 nstack_initial=0)])
DEBUG 2022-02-08 17:11:36,162 stack: []
DEBUG 2022-02-08 17:11:36,162 dispatch pc=0, inst=NOP(arg=None, lineno=169)
DEBUG 2022-02-08 17:11:36,162 stack []
DEBUG 2022-02-08 17:11:36,162 dispatch pc=2, inst=LOAD_DEREF(arg=0, lineno=169)
DEBUG 2022-02-08 17:11:36,162 stack []
DEBUG 2022-02-08 17:11:36,162 dispatch pc=4, inst=STORE_FAST(arg=1, lineno=169)
DEBUG 2022-02-08 17:11:36,162 stack ['$2load_deref.0']
DEBUG 2022-02-08 17:11:36,162 dispatch pc=6, inst=LOAD_GLOBAL(arg=0, lineno=170)
DEBUG 2022-02-08 17:11:36,162 stack []
DEBUG 2022-02-08 17:11:36,162 dispatch pc=8, inst=LOAD_METHOD(arg=1, lineno=170)
DEBUG 2022-02-08 17:11:36,162 stack ['$6load_global.1']
DEBUG 2022-02-08 17:11:36,162 dispatch pc=10, inst=LOAD_FAST(arg=0, lineno=170)
DEBUG 2022-02-08 17:11:36,162 stack ['$8load_method.2']
DEBUG 2022-02-08 17:11:36,162 dispatch pc=12, inst=CALL_METHOD(arg=1, lineno=170)
DEBUG 2022-02-08 17:11:36,162 stack ['$8load_method.2', '$arr10.3']
DEBUG 2022-02-08 17:11:36,162 dispatch pc=14, inst=GET_ITER(arg=None, lineno=170)
DEBUG 2022-02-08 17:11:36,162 stack ['$12call_method.4']
DEBUG 2022-02-08 17:11:36,162 end state. edges=[Edge(pc=16, stack=('$14get_iter.5',), blockstack=(), npush=0)]
DEBUG 2022-02-08 17:11:36,162 pending: deque([State(pc_initial=16 nstack_initial=1)])
DEBUG 2022-02-08 17:11:36,162 stack: ['$phi16.0']
DEBUG 2022-02-08 17:11:36,162 dispatch pc=16, inst=FOR_ITER(arg=16, lineno=170)
DEBUG 2022-02-08 17:11:36,170 stack ['$phi16.0']
DEBUG 2022-02-08 17:11:36,170 end state. edges=[Edge(pc=34, stack=(), blockstack=(), npush=0), Edge(pc=18, stack=('$phi16.0', '$16for_iter.2'), blockstack=(), npush=0)]
DEBUG 2022-02-08 17:11:36,170 pending: deque([State(pc_initial=34 nstack_initial=0), State(pc_initial=18 nstack_initial=2)])
DEBUG 2022-02-08 17:11:36,170 stack: []
DEBUG 2022-02-08 17:11:36,170 dispatch pc=34, inst=LOAD_FAST(arg=1, lineno=172)
DEBUG 2022-02-08 17:11:36,170 stack []
DEBUG 2022-02-08 17:11:36,170 dispatch pc=36, inst=RETURN_VALUE(arg=None, lineno=172)
DEBUG 2022-02-08 17:11:36,170 stack ['$c34.0']
DEBUG 2022-02-08 17:11:36,170 end state. edges=[]
DEBUG 2022-02-08 17:11:36,170 pending: deque([State(pc_initial=18 nstack_initial=2)])
DEBUG 2022-02-08 17:11:36,170 stack: ['$phi18.0', '$phi18.1']
DEBUG 2022-02-08 17:11:36,170 dispatch pc=18, inst=STORE_FAST(arg=2, lineno=170)
DEBUG 2022-02-08 17:11:36,170 stack ['$phi18.0', '$phi18.1']
DEBUG 2022-02-08 17:11:36,170 dispatch pc=20, inst=LOAD_FAST(arg=1, lineno=171)
DEBUG 2022-02-08 17:11:36,170 stack ['$phi18.0']
DEBUG 2022-02-08 17:11:36,170 dispatch pc=22, inst=LOAD_FAST(arg=2, lineno=171)
DEBUG 2022-02-08 17:11:36,170 stack ['$phi18.0', '$c20.2']
DEBUG 2022-02-08 17:11:36,170 dispatch pc=24, inst=LOAD_METHOD(arg=2, lineno=171)
DEBUG 2022-02-08 17:11:36,170 stack ['$phi18.0', '$c20.2', '$v22.3']
DEBUG 2022-02-08 17:11:36,170 dispatch pc=26, inst=CALL_METHOD(arg=0, lineno=171)
DEBUG 2022-02-08 17:11:36,170 stack ['$phi18.0', '$c20.2', '$24load_method.4']
DEBUG 2022-02-08 17:11:36,170 dispatch pc=28, inst=INPLACE_ADD(arg=None, lineno=171)
DEBUG 2022-02-08 17:11:36,173 stack ['$phi18.0', '$c20.2', '$26call_method.5']
DEBUG 2022-02-08 17:11:36,173 dispatch pc=30, inst=STORE_FAST(arg=1, lineno=171)
DEBUG 2022-02-08 17:11:36,173 stack ['$phi18.0', '$28inplace_add.6']
DEBUG 2022-02-08 17:11:36,173 dispatch pc=32, inst=JUMP_ABSOLUTE(arg=16, lineno=171)
DEBUG 2022-02-08 17:11:36,173 stack ['$phi18.0']
DEBUG 2022-02-08 17:11:36,173 end state. edges=[Edge(pc=16, stack=('$phi18.0',), blockstack=(), npush=0)]
DEBUG 2022-02-08 17:11:36,173 pending: deque([State(pc_initial=16 nstack_initial=1)])
DEBUG 2022-02-08 17:11:36,173 -------------------------Prune PHIs-------------------------
DEBUG 2022-02-08 17:11:36,173 Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=16 nstack_initial=1): {'$phi16.0'},
             State(pc_initial=18 nstack_initial=2): {'$phi18.1'},
             State(pc_initial=34 nstack_initial=0): set()})
DEBUG 2022-02-08 17:11:36,173 defmap: {'$phi16.0': State(pc_initial=0 nstack_initial=0),
 '$phi18.1': State(pc_initial=16 nstack_initial=1)}
DEBUG 2022-02-08 17:11:36,173 phismap: defaultdict(<class 'set'>,
            {'$phi16.0': {('$14get_iter.5',
                           State(pc_initial=0 nstack_initial=0)),
                          ('$phi18.0', State(pc_initial=18 nstack_initial=2))},
             '$phi18.0': {('$phi16.0', State(pc_initial=16 nstack_initial=1))},
             '$phi18.1': {('$16for_iter.2',
                           State(pc_initial=16 nstack_initial=1))}})
DEBUG 2022-02-08 17:11:36,173 changing phismap: defaultdict(<class 'set'>,
            {'$phi16.0': {('$14get_iter.5',
                           State(pc_initial=0 nstack_initial=0)),
                          ('$phi16.0', State(pc_initial=16 nstack_initial=1))},
             '$phi18.0': {('$14get_iter.5',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi18.1': {('$16for_iter.2',
                           State(pc_initial=16 nstack_initial=1))}})
DEBUG 2022-02-08 17:11:36,173 changing phismap: defaultdict(<class 'set'>,
            {'$phi16.0': {('$14get_iter.5',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi18.0': {('$14get_iter.5',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi18.1': {('$16for_iter.2',
                           State(pc_initial=16 nstack_initial=1))}})
DEBUG 2022-02-08 17:11:36,173 changing phismap: defaultdict(<class 'set'>,
            {'$phi16.0': {('$14get_iter.5',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi18.0': {('$14get_iter.5',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi18.1': {('$16for_iter.2',
                           State(pc_initial=16 nstack_initial=1))}})
DEBUG 2022-02-08 17:11:36,173 keep phismap: {'$phi16.0': {('$14get_iter.5', State(pc_initial=0 nstack_initial=0))},
 '$phi18.1': {('$16for_iter.2', State(pc_initial=16 nstack_initial=1))}}
DEBUG 2022-02-08 17:11:36,173 new_out: defaultdict(<class 'dict'>,
            {State(pc_initial=0 nstack_initial=0): {'$phi16.0': '$14get_iter.5'},
             State(pc_initial=16 nstack_initial=1): {'$phi18.1': '$16for_iter.2'}})
DEBUG 2022-02-08 17:11:36,173 ----------------------DONE Prune PHIs-----------------------
DEBUG 2022-02-08 17:11:36,173 block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$2load_deref.0'}), (4, {'value': '$2load_deref.0'}), (6, {'res': '$6load_global.1'}), (8, {'item': '$6load_global.1', 'res': '$8load_method.2'}), (10, {'res': '$arr10.3'}), (12, {'func': '$8load_method.2', 'args': ['$arr10.3'], 'res': '$12call_method.4'}), (14, {'value': '$12call_method.4', 'res': '$14get_iter.5'})), outgoing_phis={'$phi16.0': '$14get_iter.5'}, blockstack=(), active_try_block=None, outgoing_edgepushed={16: ('$14get_iter.5',)})
DEBUG 2022-02-08 17:11:36,173 block_infos State(pc_initial=16 nstack_initial=1):
AdaptBlockInfo(insts=((16, {'iterator': '$phi16.0', 'pair': '$16for_iter.1', 'indval': '$16for_iter.2', 'pred': '$16for_iter.3'}),), outgoing_phis={'$phi18.1': '$16for_iter.2'}, blockstack=(), active_try_block=None, outgoing_edgepushed={34: (), 18: ('$phi16.0', '$16for_iter.2')})
DEBUG 2022-02-08 17:11:36,173 block_infos State(pc_initial=18 nstack_initial=2):
AdaptBlockInfo(insts=((18, {'value': '$phi18.1'}), (20, {'res': '$c20.2'}), (22, {'res': '$v22.3'}), (24, {'item': '$v22.3', 'res': '$24load_method.4'}), (26, {'func': '$24load_method.4', 'args': [], 'res': '$26call_method.5'}), (28, {'lhs': '$c20.2', 'rhs': '$26call_method.5', 'res': '$28inplace_add.6'}), (30, {'value': '$28inplace_add.6'}), (32, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={16: ('$phi18.0',)})
DEBUG 2022-02-08 17:11:36,173 block_infos State(pc_initial=34 nstack_initial=0):
AdaptBlockInfo(insts=((34, {'res': '$c34.0'}), (36, {'retval': '$c34.0', 'castval': '$36return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG 2022-02-08 17:11:36,173 label 0:
    arr = arg(0, name=arr)                   ['arr']
    c = freevar(zero: 0)                     ['c']
    $6load_global.1 = global(np: <module 'numpy' from 'C:\\Users\\zl4821\\Anaconda3\\envs\\GBS\\lib\\site-packages\\numpy\\__init__.py'>) ['$6load_global.1']
    $8load_method.2 = getattr(value=$6load_global.1, attr=nditer) ['$6load_global.1', '$8load_method.2']
    $12call_method.4 = call $8load_method.2(arr, func=$8load_method.2, args=[Var(arr, arraymath.py:169)], kws=(), vararg=None, target=None) ['$12call_method.4', '$8load_method.2', 'arr']
    $14get_iter.5 = getiter(value=$12call_method.4) ['$12call_method.4', '$14get_iter.5']
    $phi16.0 = $14get_iter.5                 ['$14get_iter.5', '$phi16.0']
    jump 16                                  []
label 16:
    $16for_iter.1 = iternext(value=$phi16.0) ['$16for_iter.1', '$phi16.0']
    $16for_iter.2 = pair_first(value=$16for_iter.1) ['$16for_iter.1', '$16for_iter.2']
    $16for_iter.3 = pair_second(value=$16for_iter.1) ['$16for_iter.1', '$16for_iter.3']
    $phi18.1 = $16for_iter.2                 ['$16for_iter.2', '$phi18.1']
    branch $16for_iter.3, 18, 34             ['$16for_iter.3']
label 18:
    v = $phi18.1                             ['$phi18.1', 'v']
    $24load_method.4 = getattr(value=v, attr=item) ['$24load_method.4', 'v']
    $26call_method.5 = call $24load_method.4(func=$24load_method.4, args=[], kws=(), vararg=None, target=None) ['$24load_method.4', '$26call_method.5']
    $28inplace_add.6 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=c, rhs=$26call_method.5, static_lhs=Undefined, static_rhs=Undefined) ['$26call_method.5', '$28inplace_add.6', 'c']
    c = $28inplace_add.6                     ['$28inplace_add.6', 'c']
    jump 16                                  []
label 34:
    $36return_value.1 = cast(value=c)        ['$36return_value.1', 'c']
    return $36return_value.1                 ['$36return_value.1']

DEBUG 2022-02-08 17:11:36,183 ==== SSA block analysis pass on 0
DEBUG 2022-02-08 17:11:36,183 Running <numba.core.ssa._GatherDefsHandler object at 0x000001E9F7C0E850>
DEBUG 2022-02-08 17:11:36,183 on stmt: arr = arg(0, name=arr)
DEBUG 2022-02-08 17:11:36,183 on stmt: c = freevar(zero: 0)
DEBUG 2022-02-08 17:11:36,183 on stmt: $6load_global.1 = global(np: <module 'numpy' from 'C:\\Users\\zl4821\\Anaconda3\\envs\\GBS\\lib\\site-packages\\numpy\\__init__.py'>)
DEBUG 2022-02-08 17:11:36,183 on stmt: $8load_method.2 = getattr(value=$6load_global.1, attr=nditer)
DEBUG 2022-02-08 17:11:36,183 on stmt: $12call_method.4 = call $8load_method.2(arr, func=$8load_method.2, args=[Var(arr, arraymath.py:169)], kws=(), vararg=None, target=None)
DEBUG 2022-02-08 17:11:36,183 on stmt: $14get_iter.5 = getiter(value=$12call_method.4)
DEBUG 2022-02-08 17:11:36,183 on stmt: $phi16.0 = $14get_iter.5
DEBUG 2022-02-08 17:11:36,183 on stmt: jump 16
DEBUG 2022-02-08 17:11:36,183 ==== SSA block analysis pass on 16
DEBUG 2022-02-08 17:11:36,183 Running <numba.core.ssa._GatherDefsHandler object at 0x000001E9F7C0E850>
DEBUG 2022-02-08 17:11:36,183 on stmt: $16for_iter.1 = iternext(value=$phi16.0)
DEBUG 2022-02-08 17:11:36,183 on stmt: $16for_iter.2 = pair_first(value=$16for_iter.1)
DEBUG 2022-02-08 17:11:36,191 on stmt: $16for_iter.3 = pair_second(value=$16for_iter.1)
DEBUG 2022-02-08 17:11:36,191 on stmt: $phi18.1 = $16for_iter.2
DEBUG 2022-02-08 17:11:36,191 on stmt: branch $16for_iter.3, 18, 34
DEBUG 2022-02-08 17:11:36,191 ==== SSA block analysis pass on 18
DEBUG 2022-02-08 17:11:36,191 Running <numba.core.ssa._GatherDefsHandler object at 0x000001E9F7C0E850>
DEBUG 2022-02-08 17:11:36,191 on stmt: v = $phi18.1
DEBUG 2022-02-08 17:11:36,191 on stmt: $24load_method.4 = getattr(value=v, attr=item)
DEBUG 2022-02-08 17:11:36,191 on stmt: $26call_method.5 = call $24load_method.4(func=$24load_method.4, args=[], kws=(), vararg=None, target=None)
DEBUG 2022-02-08 17:11:36,191 on stmt: $28inplace_add.6 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=c, rhs=$26call_method.5, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-08 17:11:36,191 on stmt: c = $28inplace_add.6
DEBUG 2022-02-08 17:11:36,191 on stmt: jump 16
DEBUG 2022-02-08 17:11:36,191 ==== SSA block analysis pass on 34
DEBUG 2022-02-08 17:11:36,191 Running <numba.core.ssa._GatherDefsHandler object at 0x000001E9F7C0E850>
DEBUG 2022-02-08 17:11:36,191 on stmt: $36return_value.1 = cast(value=c)
DEBUG 2022-02-08 17:11:36,191 on stmt: return $36return_value.1
DEBUG 2022-02-08 17:11:36,191 defs defaultdict(<class 'list'>,
            {'$12call_method.4': [<numba.core.ir.Assign object at 0x000001E9F7C10550>],
             '$14get_iter.5': [<numba.core.ir.Assign object at 0x000001E9F7C10640>],
             '$16for_iter.1': [<numba.core.ir.Assign object at 0x000001E9F7C10910>],
             '$16for_iter.2': [<numba.core.ir.Assign object at 0x000001E9F7C10A30>],
             '$16for_iter.3': [<numba.core.ir.Assign object at 0x000001E9F7C10B50>],
             '$24load_method.4': [<numba.core.ir.Assign object at 0x000001E9F7E2D220>],
             '$26call_method.5': [<numba.core.ir.Assign object at 0x000001E9F7E2D430>],
             '$28inplace_add.6': [<numba.core.ir.Assign object at 0x000001E9F7E2D550>],
             '$36return_value.1': [<numba.core.ir.Assign object at 0x000001E9F7E2D940>],
             '$6load_global.1': [<numba.core.ir.Assign object at 0x000001E9F7C100A0>],
             '$8load_method.2': [<numba.core.ir.Assign object at 0x000001E9F7C10220>],
             '$phi16.0': [<numba.core.ir.Assign object at 0x000001E9F7C0EF70>],
             '$phi18.1': [<numba.core.ir.Assign object at 0x000001E9F7C10850>],
             'arr': [<numba.core.ir.Assign object at 0x000001E9F7C0E3A0>],
             'c': [<numba.core.ir.Assign object at 0x000001E9F7C0EDC0>,
                   <numba.core.ir.Assign object at 0x000001E9F7E2D610>],
             'v': [<numba.core.ir.Assign object at 0x000001E9F7C10E20>]})
DEBUG 2022-02-08 17:11:36,191 SSA violators {'c'}
DEBUG 2022-02-08 17:11:36,191 Fix SSA violator on var c
DEBUG 2022-02-08 17:11:36,191 ==== SSA block rewrite pass on 0
DEBUG 2022-02-08 17:11:36,191 Running <numba.core.ssa._FreshVarHandler object at 0x000001E9F7C0EA30>
DEBUG 2022-02-08 17:11:36,191 on stmt: arr = arg(0, name=arr)
DEBUG 2022-02-08 17:11:36,191 on stmt: c = freevar(zero: 0)
DEBUG 2022-02-08 17:11:36,191 first assign: c
DEBUG 2022-02-08 17:11:36,191 replaced with: c = freevar(zero: 0)
DEBUG 2022-02-08 17:11:36,191 on stmt: $6load_global.1 = global(np: <module 'numpy' from 'C:\\Users\\zl4821\\Anaconda3\\envs\\GBS\\lib\\site-packages\\numpy\\__init__.py'>)
DEBUG 2022-02-08 17:11:36,191 on stmt: $8load_method.2 = getattr(value=$6load_global.1, attr=nditer)
DEBUG 2022-02-08 17:11:36,191 on stmt: $12call_method.4 = call $8load_method.2(arr, func=$8load_method.2, args=[Var(arr, arraymath.py:169)], kws=(), vararg=None, target=None)
DEBUG 2022-02-08 17:11:36,191 on stmt: $14get_iter.5 = getiter(value=$12call_method.4)
DEBUG 2022-02-08 17:11:36,191 on stmt: $phi16.0 = $14get_iter.5
DEBUG 2022-02-08 17:11:36,191 on stmt: jump 16
DEBUG 2022-02-08 17:11:36,191 ==== SSA block rewrite pass on 16
DEBUG 2022-02-08 17:11:36,191 Running <numba.core.ssa._FreshVarHandler object at 0x000001E9F7C0EA30>
DEBUG 2022-02-08 17:11:36,191 on stmt: $16for_iter.1 = iternext(value=$phi16.0)
DEBUG 2022-02-08 17:11:36,191 on stmt: $16for_iter.2 = pair_first(value=$16for_iter.1)
DEBUG 2022-02-08 17:11:36,191 on stmt: $16for_iter.3 = pair_second(value=$16for_iter.1)
DEBUG 2022-02-08 17:11:36,191 on stmt: $phi18.1 = $16for_iter.2
DEBUG 2022-02-08 17:11:36,191 on stmt: branch $16for_iter.3, 18, 34
DEBUG 2022-02-08 17:11:36,191 ==== SSA block rewrite pass on 18
DEBUG 2022-02-08 17:11:36,191 Running <numba.core.ssa._FreshVarHandler object at 0x000001E9F7C0EA30>
DEBUG 2022-02-08 17:11:36,191 on stmt: v = $phi18.1
DEBUG 2022-02-08 17:11:36,191 on stmt: $24load_method.4 = getattr(value=v, attr=item)
DEBUG 2022-02-08 17:11:36,191 on stmt: $26call_method.5 = call $24load_method.4(func=$24load_method.4, args=[], kws=(), vararg=None, target=None)
DEBUG 2022-02-08 17:11:36,191 on stmt: $28inplace_add.6 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=c, rhs=$26call_method.5, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-08 17:11:36,191 on stmt: c = $28inplace_add.6
DEBUG 2022-02-08 17:11:36,191 replaced with: c.1 = $28inplace_add.6
DEBUG 2022-02-08 17:11:36,191 on stmt: jump 16
DEBUG 2022-02-08 17:11:36,191 ==== SSA block rewrite pass on 34
DEBUG 2022-02-08 17:11:36,191 Running <numba.core.ssa._FreshVarHandler object at 0x000001E9F7C0EA30>
DEBUG 2022-02-08 17:11:36,191 on stmt: $36return_value.1 = cast(value=c)
DEBUG 2022-02-08 17:11:36,191 on stmt: return $36return_value.1
DEBUG 2022-02-08 17:11:36,191 Replaced assignments: defaultdict(<class 'list'>,
            {0: [<numba.core.ir.Assign object at 0x000001E9F7C0E6A0>],
             18: [<numba.core.ir.Assign object at 0x000001E9F7C0E5B0>]})
DEBUG 2022-02-08 17:11:36,191 ==== SSA block rewrite pass on 0
DEBUG 2022-02-08 17:11:36,191 Running <numba.core.ssa._FixSSAVars object at 0x000001E9F7C0EA30>
DEBUG 2022-02-08 17:11:36,191 on stmt: arr = arg(0, name=arr)
DEBUG 2022-02-08 17:11:36,191 on stmt: c = freevar(zero: 0)
DEBUG 2022-02-08 17:11:36,191 on stmt: $6load_global.1 = global(np: <module 'numpy' from 'C:\\Users\\zl4821\\Anaconda3\\envs\\GBS\\lib\\site-packages\\numpy\\__init__.py'>)
DEBUG 2022-02-08 17:11:36,191 on stmt: $8load_method.2 = getattr(value=$6load_global.1, attr=nditer)
DEBUG 2022-02-08 17:11:36,191 on stmt: $12call_method.4 = call $8load_method.2(arr, func=$8load_method.2, args=[Var(arr, arraymath.py:169)], kws=(), vararg=None, target=None)
DEBUG 2022-02-08 17:11:36,191 on stmt: $14get_iter.5 = getiter(value=$12call_method.4)
DEBUG 2022-02-08 17:11:36,191 on stmt: $phi16.0 = $14get_iter.5
DEBUG 2022-02-08 17:11:36,191 on stmt: jump 16
DEBUG 2022-02-08 17:11:36,191 ==== SSA block rewrite pass on 16
DEBUG 2022-02-08 17:11:36,191 Running <numba.core.ssa._FixSSAVars object at 0x000001E9F7C0EA30>
DEBUG 2022-02-08 17:11:36,191 on stmt: $16for_iter.1 = iternext(value=$phi16.0)
DEBUG 2022-02-08 17:11:36,191 on stmt: $16for_iter.2 = pair_first(value=$16for_iter.1)
DEBUG 2022-02-08 17:11:36,191 on stmt: $16for_iter.3 = pair_second(value=$16for_iter.1)
DEBUG 2022-02-08 17:11:36,191 on stmt: $phi18.1 = $16for_iter.2
DEBUG 2022-02-08 17:11:36,191 on stmt: branch $16for_iter.3, 18, 34
DEBUG 2022-02-08 17:11:36,191 ==== SSA block rewrite pass on 18
DEBUG 2022-02-08 17:11:36,191 Running <numba.core.ssa._FixSSAVars object at 0x000001E9F7C0EA30>
DEBUG 2022-02-08 17:11:36,191 on stmt: v = $phi18.1
DEBUG 2022-02-08 17:11:36,191 on stmt: $24load_method.4 = getattr(value=v, attr=item)
DEBUG 2022-02-08 17:11:36,191 on stmt: $26call_method.5 = call $24load_method.4(func=$24load_method.4, args=[], kws=(), vararg=None, target=None)
DEBUG 2022-02-08 17:11:36,191 on stmt: $28inplace_add.6 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=c, rhs=$26call_method.5, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-08 17:11:36,191 find_def var='c' stmt=$28inplace_add.6 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=c, rhs=$26call_method.5, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-08 17:11:36,191 find_def_from_top label 18
DEBUG 2022-02-08 17:11:36,191 idom 16 from label 18
DEBUG 2022-02-08 17:11:36,191 find_def_from_bottom label 16
DEBUG 2022-02-08 17:11:36,191 find_def_from_top label 16
DEBUG 2022-02-08 17:11:36,191 insert phi node c.2 = phi(incoming_values=[], incoming_blocks=[]) at 16
DEBUG 2022-02-08 17:11:36,191 find_def_from_bottom label 0
DEBUG 2022-02-08 17:11:36,191 incoming_def c = freevar(zero: 0)
DEBUG 2022-02-08 17:11:36,191 find_def_from_bottom label 18
DEBUG 2022-02-08 17:11:36,191 incoming_def c.1 = $28inplace_add.6
DEBUG 2022-02-08 17:11:36,191 replaced with: $28inplace_add.6 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=c.2, rhs=$26call_method.5, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-08 17:11:36,191 on stmt: c.1 = $28inplace_add.6
DEBUG 2022-02-08 17:11:36,191 on stmt: jump 16
DEBUG 2022-02-08 17:11:36,191 ==== SSA block rewrite pass on 34
DEBUG 2022-02-08 17:11:36,191 Running <numba.core.ssa._FixSSAVars object at 0x000001E9F7C0EA30>
DEBUG 2022-02-08 17:11:36,191 on stmt: $36return_value.1 = cast(value=c)
DEBUG 2022-02-08 17:11:36,191 find_def var='c' stmt=$36return_value.1 = cast(value=c)
DEBUG 2022-02-08 17:11:36,191 find_def_from_top label 34
DEBUG 2022-02-08 17:11:36,191 idom 16 from label 34
DEBUG 2022-02-08 17:11:36,191 find_def_from_bottom label 16
DEBUG 2022-02-08 17:11:36,191 replaced with: $36return_value.1 = cast(value=c.2)
DEBUG 2022-02-08 17:11:36,191 on stmt: return $36return_value.1
DEBUG 2022-02-08 17:11:36,203 bytecode dump:
>          0	NOP(arg=None, lineno=2820)
           2	LOAD_GLOBAL(arg=0, lineno=2820)
           4	LOAD_FAST(arg=0, lineno=2820)
           6	CALL_FUNCTION(arg=1, lineno=2820)
           8	STORE_FAST(arg=2, lineno=2820)
          10	LOAD_GLOBAL(arg=1, lineno=2821)
          12	LOAD_FAST(arg=2, lineno=2821)
          14	CALL_FUNCTION(arg=1, lineno=2821)
          16	GET_ITER(arg=None, lineno=2821)
>         18	FOR_ITER(arg=40, lineno=2821)
          20	STORE_FAST(arg=3, lineno=2821)
          22	LOAD_FAST(arg=0, lineno=2822)
          24	LOAD_FAST(arg=3, lineno=2822)
          26	BINARY_SUBSCR(arg=None, lineno=2822)
          28	LOAD_FAST(arg=1, lineno=2822)
          30	LOAD_GLOBAL(arg=0, lineno=2822)
          32	LOAD_FAST(arg=1, lineno=2822)
          34	CALL_FUNCTION(arg=1, lineno=2822)
          36	LOAD_FAST(arg=2, lineno=2822)
          38	BINARY_SUBTRACT(arg=None, lineno=2822)
          40	LOAD_FAST(arg=3, lineno=2822)
          42	BINARY_ADD(arg=None, lineno=2822)
          44	BINARY_SUBSCR(arg=None, lineno=2822)
          46	COMPARE_OP(arg=3, lineno=2822)
          48	POP_JUMP_IF_FALSE(arg=18, lineno=2822)
          50	LOAD_GLOBAL(arg=2, lineno=2823)
          52	LOAD_CONST(arg=1, lineno=2823)
          54	CALL_FUNCTION(arg=1, lineno=2823)
          56	RAISE_VARARGS(arg=1, lineno=2823)
          58	JUMP_ABSOLUTE(arg=18, lineno=2823)
>         60	LOAD_CONST(arg=0, lineno=2823)
          62	RETURN_VALUE(arg=None, lineno=2823)
DEBUG 2022-02-08 17:11:36,203 pending: deque([State(pc_initial=0 nstack_initial=0)])
DEBUG 2022-02-08 17:11:36,203 stack: []
DEBUG 2022-02-08 17:11:36,203 dispatch pc=0, inst=NOP(arg=None, lineno=2820)
DEBUG 2022-02-08 17:11:36,203 stack []
DEBUG 2022-02-08 17:11:36,203 dispatch pc=2, inst=LOAD_GLOBAL(arg=0, lineno=2820)
DEBUG 2022-02-08 17:11:36,203 stack []
DEBUG 2022-02-08 17:11:36,203 dispatch pc=4, inst=LOAD_FAST(arg=0, lineno=2820)
DEBUG 2022-02-08 17:11:36,203 stack ['$2load_global.0']
DEBUG 2022-02-08 17:11:36,203 dispatch pc=6, inst=CALL_FUNCTION(arg=1, lineno=2820)
DEBUG 2022-02-08 17:11:36,203 stack ['$2load_global.0', '$shape4.1']
DEBUG 2022-02-08 17:11:36,203 dispatch pc=8, inst=STORE_FAST(arg=2, lineno=2820)
DEBUG 2022-02-08 17:11:36,203 stack ['$6call_function.2']
DEBUG 2022-02-08 17:11:36,203 dispatch pc=10, inst=LOAD_GLOBAL(arg=1, lineno=2821)
DEBUG 2022-02-08 17:11:36,203 stack []
DEBUG 2022-02-08 17:11:36,211 dispatch pc=12, inst=LOAD_FAST(arg=2, lineno=2821)
DEBUG 2022-02-08 17:11:36,211 stack ['$10load_global.3']
DEBUG 2022-02-08 17:11:36,211 dispatch pc=14, inst=CALL_FUNCTION(arg=1, lineno=2821)
DEBUG 2022-02-08 17:11:36,211 stack ['$10load_global.3', '$n12.4']
DEBUG 2022-02-08 17:11:36,211 dispatch pc=16, inst=GET_ITER(arg=None, lineno=2821)
DEBUG 2022-02-08 17:11:36,211 stack ['$14call_function.5']
DEBUG 2022-02-08 17:11:36,211 end state. edges=[Edge(pc=18, stack=('$16get_iter.6',), blockstack=(), npush=0)]
DEBUG 2022-02-08 17:11:36,211 pending: deque([State(pc_initial=18 nstack_initial=1)])
DEBUG 2022-02-08 17:11:36,211 stack: ['$phi18.0']
DEBUG 2022-02-08 17:11:36,211 dispatch pc=18, inst=FOR_ITER(arg=40, lineno=2821)
DEBUG 2022-02-08 17:11:36,211 stack ['$phi18.0']
DEBUG 2022-02-08 17:11:36,211 end state. edges=[Edge(pc=60, stack=(), blockstack=(), npush=0), Edge(pc=20, stack=('$phi18.0', '$18for_iter.2'), blockstack=(), npush=0)]
DEBUG 2022-02-08 17:11:36,211 pending: deque([State(pc_initial=60 nstack_initial=0), State(pc_initial=20 nstack_initial=2)])
DEBUG 2022-02-08 17:11:36,211 stack: []
DEBUG 2022-02-08 17:11:36,211 dispatch pc=60, inst=LOAD_CONST(arg=0, lineno=2823)
DEBUG 2022-02-08 17:11:36,211 stack []
DEBUG 2022-02-08 17:11:36,211 dispatch pc=62, inst=RETURN_VALUE(arg=None, lineno=2823)
DEBUG 2022-02-08 17:11:36,211 stack ['$const60.0']
DEBUG 2022-02-08 17:11:36,211 end state. edges=[]
DEBUG 2022-02-08 17:11:36,211 pending: deque([State(pc_initial=20 nstack_initial=2)])
DEBUG 2022-02-08 17:11:36,211 stack: ['$phi20.0', '$phi20.1']
DEBUG 2022-02-08 17:11:36,211 dispatch pc=20, inst=STORE_FAST(arg=3, lineno=2821)
DEBUG 2022-02-08 17:11:36,211 stack ['$phi20.0', '$phi20.1']
DEBUG 2022-02-08 17:11:36,213 dispatch pc=22, inst=LOAD_FAST(arg=0, lineno=2822)
DEBUG 2022-02-08 17:11:36,213 stack ['$phi20.0']
DEBUG 2022-02-08 17:11:36,213 dispatch pc=24, inst=LOAD_FAST(arg=3, lineno=2822)
DEBUG 2022-02-08 17:11:36,213 stack ['$phi20.0', '$shape22.2']
DEBUG 2022-02-08 17:11:36,213 dispatch pc=26, inst=BINARY_SUBSCR(arg=None, lineno=2822)
DEBUG 2022-02-08 17:11:36,213 stack ['$phi20.0', '$shape22.2', '$i24.3']
DEBUG 2022-02-08 17:11:36,213 dispatch pc=28, inst=LOAD_FAST(arg=1, lineno=2822)
DEBUG 2022-02-08 17:11:36,213 stack ['$phi20.0', '$26binary_subscr.4']
DEBUG 2022-02-08 17:11:36,213 dispatch pc=30, inst=LOAD_GLOBAL(arg=0, lineno=2822)
DEBUG 2022-02-08 17:11:36,213 stack ['$phi20.0', '$26binary_subscr.4', '$main_shape28.5']
DEBUG 2022-02-08 17:11:36,213 dispatch pc=32, inst=LOAD_FAST(arg=1, lineno=2822)
DEBUG 2022-02-08 17:11:36,213 stack ['$phi20.0', '$26binary_subscr.4', '$main_shape28.5', '$30load_global.6']
DEBUG 2022-02-08 17:11:36,213 dispatch pc=34, inst=CALL_FUNCTION(arg=1, lineno=2822)
DEBUG 2022-02-08 17:11:36,213 stack ['$phi20.0', '$26binary_subscr.4', '$main_shape28.5', '$30load_global.6', '$main_shape32.7']
DEBUG 2022-02-08 17:11:36,213 dispatch pc=36, inst=LOAD_FAST(arg=2, lineno=2822)
DEBUG 2022-02-08 17:11:36,213 stack ['$phi20.0', '$26binary_subscr.4', '$main_shape28.5', '$34call_function.8']
DEBUG 2022-02-08 17:11:36,213 dispatch pc=38, inst=BINARY_SUBTRACT(arg=None, lineno=2822)
DEBUG 2022-02-08 17:11:36,213 stack ['$phi20.0', '$26binary_subscr.4', '$main_shape28.5', '$34call_function.8', '$n36.9']
DEBUG 2022-02-08 17:11:36,213 dispatch pc=40, inst=LOAD_FAST(arg=3, lineno=2822)
DEBUG 2022-02-08 17:11:36,213 stack ['$phi20.0', '$26binary_subscr.4', '$main_shape28.5', '$38binary_subtract.10']
DEBUG 2022-02-08 17:11:36,213 dispatch pc=42, inst=BINARY_ADD(arg=None, lineno=2822)
DEBUG 2022-02-08 17:11:36,213 stack ['$phi20.0', '$26binary_subscr.4', '$main_shape28.5', '$38binary_subtract.10', '$i40.11']
DEBUG 2022-02-08 17:11:36,213 dispatch pc=44, inst=BINARY_SUBSCR(arg=None, lineno=2822)
DEBUG 2022-02-08 17:11:36,213 stack ['$phi20.0', '$26binary_subscr.4', '$main_shape28.5', '$42binary_add.12']
DEBUG 2022-02-08 17:11:36,213 dispatch pc=46, inst=COMPARE_OP(arg=3, lineno=2822)
DEBUG 2022-02-08 17:11:36,213 stack ['$phi20.0', '$26binary_subscr.4', '$44binary_subscr.13']
DEBUG 2022-02-08 17:11:36,213 dispatch pc=48, inst=POP_JUMP_IF_FALSE(arg=18, lineno=2822)
DEBUG 2022-02-08 17:11:36,213 stack ['$phi20.0', '$46compare_op.14']
DEBUG 2022-02-08 17:11:36,213 end state. edges=[Edge(pc=50, stack=('$phi20.0',), blockstack=(), npush=0), Edge(pc=18, stack=('$phi20.0',), blockstack=(), npush=0)]
DEBUG 2022-02-08 17:11:36,213 pending: deque([State(pc_initial=50 nstack_initial=1), State(pc_initial=18 nstack_initial=1)])
DEBUG 2022-02-08 17:11:36,213 stack: ['$phi50.0']
DEBUG 2022-02-08 17:11:36,213 dispatch pc=50, inst=LOAD_GLOBAL(arg=2, lineno=2823)
DEBUG 2022-02-08 17:11:36,213 stack ['$phi50.0']
DEBUG 2022-02-08 17:11:36,213 dispatch pc=52, inst=LOAD_CONST(arg=1, lineno=2823)
DEBUG 2022-02-08 17:11:36,213 stack ['$phi50.0', '$50load_global.1']
DEBUG 2022-02-08 17:11:36,213 dispatch pc=54, inst=CALL_FUNCTION(arg=1, lineno=2823)
DEBUG 2022-02-08 17:11:36,213 stack ['$phi50.0', '$50load_global.1', '$const52.2']
DEBUG 2022-02-08 17:11:36,213 dispatch pc=56, inst=RAISE_VARARGS(arg=1, lineno=2823)
DEBUG 2022-02-08 17:11:36,213 stack ['$phi50.0', '$54call_function.3']
DEBUG 2022-02-08 17:11:36,213 end state. edges=[]
DEBUG 2022-02-08 17:11:36,213 pending: deque([State(pc_initial=18 nstack_initial=1)])
DEBUG 2022-02-08 17:11:36,213 -------------------------Prune PHIs-------------------------
DEBUG 2022-02-08 17:11:36,213 Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=18 nstack_initial=1): {'$phi18.0'},
             State(pc_initial=20 nstack_initial=2): {'$phi20.1'},
             State(pc_initial=50 nstack_initial=1): set(),
             State(pc_initial=60 nstack_initial=0): set()})
DEBUG 2022-02-08 17:11:36,213 defmap: {'$phi18.0': State(pc_initial=0 nstack_initial=0),
 '$phi20.1': State(pc_initial=18 nstack_initial=1)}
DEBUG 2022-02-08 17:11:36,213 phismap: defaultdict(<class 'set'>,
            {'$phi18.0': {('$16get_iter.6',
                           State(pc_initial=0 nstack_initial=0)),
                          ('$phi20.0', State(pc_initial=20 nstack_initial=2))},
             '$phi20.0': {('$phi18.0', State(pc_initial=18 nstack_initial=1))},
             '$phi20.1': {('$18for_iter.2',
                           State(pc_initial=18 nstack_initial=1))},
             '$phi50.0': {('$phi20.0', State(pc_initial=20 nstack_initial=2))}})
DEBUG 2022-02-08 17:11:36,213 changing phismap: defaultdict(<class 'set'>,
            {'$phi18.0': {('$16get_iter.6',
                           State(pc_initial=0 nstack_initial=0)),
                          ('$phi18.0', State(pc_initial=18 nstack_initial=1))},
             '$phi20.0': {('$16get_iter.6',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi20.1': {('$18for_iter.2',
                           State(pc_initial=18 nstack_initial=1))},
             '$phi50.0': {('$16get_iter.6',
                           State(pc_initial=0 nstack_initial=0))}})
DEBUG 2022-02-08 17:11:36,213 changing phismap: defaultdict(<class 'set'>,
            {'$phi18.0': {('$16get_iter.6',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi20.0': {('$16get_iter.6',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi20.1': {('$18for_iter.2',
                           State(pc_initial=18 nstack_initial=1))},
             '$phi50.0': {('$16get_iter.6',
                           State(pc_initial=0 nstack_initial=0))}})
DEBUG 2022-02-08 17:11:36,213 changing phismap: defaultdict(<class 'set'>,
            {'$phi18.0': {('$16get_iter.6',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi20.0': {('$16get_iter.6',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi20.1': {('$18for_iter.2',
                           State(pc_initial=18 nstack_initial=1))},
             '$phi50.0': {('$16get_iter.6',
                           State(pc_initial=0 nstack_initial=0))}})
DEBUG 2022-02-08 17:11:36,213 keep phismap: {'$phi18.0': {('$16get_iter.6', State(pc_initial=0 nstack_initial=0))},
 '$phi20.1': {('$18for_iter.2', State(pc_initial=18 nstack_initial=1))}}
DEBUG 2022-02-08 17:11:36,213 new_out: defaultdict(<class 'dict'>,
            {State(pc_initial=0 nstack_initial=0): {'$phi18.0': '$16get_iter.6'},
             State(pc_initial=18 nstack_initial=1): {'$phi20.1': '$18for_iter.2'}})
DEBUG 2022-02-08 17:11:36,213 ----------------------DONE Prune PHIs-----------------------
DEBUG 2022-02-08 17:11:36,213 block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$2load_global.0'}), (4, {'res': '$shape4.1'}), (6, {'func': '$2load_global.0', 'args': ['$shape4.1'], 'res': '$6call_function.2'}), (8, {'value': '$6call_function.2'}), (10, {'res': '$10load_global.3'}), (12, {'res': '$n12.4'}), (14, {'func': '$10load_global.3', 'args': ['$n12.4'], 'res': '$14call_function.5'}), (16, {'value': '$14call_function.5', 'res': '$16get_iter.6'})), outgoing_phis={'$phi18.0': '$16get_iter.6'}, blockstack=(), active_try_block=None, outgoing_edgepushed={18: ('$16get_iter.6',)})
DEBUG 2022-02-08 17:11:36,213 block_infos State(pc_initial=18 nstack_initial=1):
AdaptBlockInfo(insts=((18, {'iterator': '$phi18.0', 'pair': '$18for_iter.1', 'indval': '$18for_iter.2', 'pred': '$18for_iter.3'}),), outgoing_phis={'$phi20.1': '$18for_iter.2'}, blockstack=(), active_try_block=None, outgoing_edgepushed={60: (), 20: ('$phi18.0', '$18for_iter.2')})
DEBUG 2022-02-08 17:11:36,213 block_infos State(pc_initial=20 nstack_initial=2):
AdaptBlockInfo(insts=((20, {'value': '$phi20.1'}), (22, {'res': '$shape22.2'}), (24, {'res': '$i24.3'}), (26, {'index': '$i24.3', 'target': '$shape22.2', 'res': '$26binary_subscr.4'}), (28, {'res': '$main_shape28.5'}), (30, {'res': '$30load_global.6'}), (32, {'res': '$main_shape32.7'}), (34, {'func': '$30load_global.6', 'args': ['$main_shape32.7'], 'res': '$34call_function.8'}), (36, {'res': '$n36.9'}), (38, {'lhs': '$34call_function.8', 'rhs': '$n36.9', 'res': '$38binary_subtract.10'}), (40, {'res': '$i40.11'}), (42, {'lhs': '$38binary_subtract.10', 'rhs': '$i40.11', 'res': '$42binary_add.12'}), (44, {'index': '$42binary_add.12', 'target': '$main_shape28.5', 'res': '$44binary_subscr.13'}), (46, {'lhs': '$26binary_subscr.4', 'rhs': '$44binary_subscr.13', 'res': '$46compare_op.14'}), (48, {'pred': '$46compare_op.14'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={50: ('$phi20.0',), 18: ('$phi20.0',)})
DEBUG 2022-02-08 17:11:36,213 block_infos State(pc_initial=50 nstack_initial=1):
AdaptBlockInfo(insts=((50, {'res': '$50load_global.1'}), (52, {'res': '$const52.2'}), (54, {'func': '$50load_global.1', 'args': ['$const52.2'], 'res': '$54call_function.3'}), (56, {'exc': '$54call_function.3'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG 2022-02-08 17:11:36,213 block_infos State(pc_initial=60 nstack_initial=0):
AdaptBlockInfo(insts=((60, {'res': '$const60.0'}), (62, {'retval': '$const60.0', 'castval': '$62return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG 2022-02-08 17:11:36,213 label 0:
    shape = arg(0, name=shape)               ['shape']
    main_shape = arg(1, name=main_shape)     ['main_shape']
    $2load_global.0 = global(len: <built-in function len>) ['$2load_global.0']
    n = call $2load_global.0(shape, func=$2load_global.0, args=[Var(shape, arrayobj.py:2820)], kws=(), vararg=None, target=None) ['$2load_global.0', 'n', 'shape']
    $10load_global.3 = global(range: <class 'range'>) ['$10load_global.3']
    $14call_function.5 = call $10load_global.3(n, func=$10load_global.3, args=[Var(n, arrayobj.py:2820)], kws=(), vararg=None, target=None) ['$10load_global.3', '$14call_function.5', 'n']
    $16get_iter.6 = getiter(value=$14call_function.5) ['$14call_function.5', '$16get_iter.6']
    $phi18.0 = $16get_iter.6                 ['$16get_iter.6', '$phi18.0']
    jump 18                                  []
label 18:
    $18for_iter.1 = iternext(value=$phi18.0) ['$18for_iter.1', '$phi18.0']
    $18for_iter.2 = pair_first(value=$18for_iter.1) ['$18for_iter.1', '$18for_iter.2']
    $18for_iter.3 = pair_second(value=$18for_iter.1) ['$18for_iter.1', '$18for_iter.3']
    $phi20.1 = $18for_iter.2                 ['$18for_iter.2', '$phi20.1']
    branch $18for_iter.3, 20, 60             ['$18for_iter.3']
label 20:
    i = $phi20.1                             ['$phi20.1', 'i']
    $26binary_subscr.4 = getitem(value=shape, index=i, fn=<built-in function getitem>) ['$26binary_subscr.4', 'i', 'shape']
    $30load_global.6 = global(len: <built-in function len>) ['$30load_global.6']
    $34call_function.8 = call $30load_global.6(main_shape, func=$30load_global.6, args=[Var(main_shape, arrayobj.py:2820)], kws=(), vararg=None, target=None) ['$30load_global.6', '$34call_function.8', 'main_shape']
    $38binary_subtract.10 = $34call_function.8 - n ['$34call_function.8', '$38binary_subtract.10', 'n']
    $42binary_add.12 = $38binary_subtract.10 + i ['$38binary_subtract.10', '$42binary_add.12', 'i']
    $44binary_subscr.13 = getitem(value=main_shape, index=$42binary_add.12, fn=<built-in function getitem>) ['$42binary_add.12', '$44binary_subscr.13', 'main_shape']
    $46compare_op.14 = $26binary_subscr.4 != $44binary_subscr.13 ['$26binary_subscr.4', '$44binary_subscr.13', '$46compare_op.14']
    bool48 = global(bool: <class 'bool'>)    ['bool48']
    $48pred = call bool48($46compare_op.14, func=bool48, args=(Var($46compare_op.14, arrayobj.py:2822),), kws=(), vararg=None, target=None) ['$46compare_op.14', '$48pred', 'bool48']
    branch $48pred, 50, 18                   ['$48pred']
label 50:
    $50load_global.1 = global(ValueError: <class 'ValueError'>) ['$50load_global.1']
    $const52.2 = const(str, nditer(): operands could not be broadcast together) ['$const52.2']
    $54call_function.3 = call $50load_global.1($const52.2, func=$50load_global.1, args=[Var($const52.2, arrayobj.py:2823)], kws=(), vararg=None, target=None) ['$50load_global.1', '$54call_function.3', '$const52.2']
    raise $54call_function.3                 ['$54call_function.3']
label 60:
    $const60.0 = const(NoneType, None)       ['$const60.0']
    $62return_value.1 = cast(value=$const60.0) ['$62return_value.1', '$const60.0']
    return $62return_value.1                 ['$62return_value.1']

DEBUG 2022-02-08 17:11:36,223 ==== SSA block analysis pass on 0
DEBUG 2022-02-08 17:11:36,223 Running <numba.core.ssa._GatherDefsHandler object at 0x000001E9F7EB3B80>
DEBUG 2022-02-08 17:11:36,223 on stmt: shape = arg(0, name=shape)
DEBUG 2022-02-08 17:11:36,223 on stmt: main_shape = arg(1, name=main_shape)
DEBUG 2022-02-08 17:11:36,223 on stmt: $2load_global.0 = global(len: <built-in function len>)
DEBUG 2022-02-08 17:11:36,223 on stmt: n = const(int, 1)
DEBUG 2022-02-08 17:11:36,223 on stmt: $10load_global.3 = global(range: <class 'range'>)
DEBUG 2022-02-08 17:11:36,223 on stmt: $14call_function.5 = call $10load_global.3(n, func=$10load_global.3, args=[Var(n, arrayobj.py:2820)], kws=(), vararg=None, target=None)
DEBUG 2022-02-08 17:11:36,223 on stmt: $16get_iter.6 = getiter(value=$14call_function.5)
DEBUG 2022-02-08 17:11:36,223 on stmt: $phi18.0 = $16get_iter.6
DEBUG 2022-02-08 17:11:36,223 on stmt: jump 18
DEBUG 2022-02-08 17:11:36,223 ==== SSA block analysis pass on 18
DEBUG 2022-02-08 17:11:36,223 Running <numba.core.ssa._GatherDefsHandler object at 0x000001E9F7EB3B80>
DEBUG 2022-02-08 17:11:36,223 on stmt: $18for_iter.1 = iternext(value=$phi18.0)
DEBUG 2022-02-08 17:11:36,223 on stmt: $18for_iter.2 = pair_first(value=$18for_iter.1)
DEBUG 2022-02-08 17:11:36,223 on stmt: $18for_iter.3 = pair_second(value=$18for_iter.1)
DEBUG 2022-02-08 17:11:36,223 on stmt: $phi20.1 = $18for_iter.2
DEBUG 2022-02-08 17:11:36,223 on stmt: branch $18for_iter.3, 20, 60
DEBUG 2022-02-08 17:11:36,223 ==== SSA block analysis pass on 20
DEBUG 2022-02-08 17:11:36,223 Running <numba.core.ssa._GatherDefsHandler object at 0x000001E9F7EB3B80>
DEBUG 2022-02-08 17:11:36,223 on stmt: i = $phi20.1
DEBUG 2022-02-08 17:11:36,223 on stmt: $26binary_subscr.4 = getitem(value=shape, index=i, fn=<built-in function getitem>)
DEBUG 2022-02-08 17:11:36,223 on stmt: $30load_global.6 = global(len: <built-in function len>)
DEBUG 2022-02-08 17:11:36,223 on stmt: $34call_function.8 = const(int, 1)
DEBUG 2022-02-08 17:11:36,223 on stmt: $38binary_subtract.10 = $34call_function.8 - n
DEBUG 2022-02-08 17:11:36,223 on stmt: $42binary_add.12 = $38binary_subtract.10 + i
DEBUG 2022-02-08 17:11:36,223 on stmt: $44binary_subscr.13 = getitem(value=main_shape, index=$42binary_add.12, fn=<built-in function getitem>)
DEBUG 2022-02-08 17:11:36,223 on stmt: $46compare_op.14 = $26binary_subscr.4 != $44binary_subscr.13
DEBUG 2022-02-08 17:11:36,223 on stmt: bool48 = global(bool: <class 'bool'>)
DEBUG 2022-02-08 17:11:36,223 on stmt: $48pred = call bool48($46compare_op.14, func=bool48, args=(Var($46compare_op.14, arrayobj.py:2822),), kws=(), vararg=None, target=None)
DEBUG 2022-02-08 17:11:36,223 on stmt: branch $48pred, 50, 18
DEBUG 2022-02-08 17:11:36,223 ==== SSA block analysis pass on 50
DEBUG 2022-02-08 17:11:36,223 Running <numba.core.ssa._GatherDefsHandler object at 0x000001E9F7EB3B80>
DEBUG 2022-02-08 17:11:36,223 on stmt: $50load_global.1 = global(ValueError: <class 'ValueError'>)
DEBUG 2022-02-08 17:11:36,223 on stmt: $const52.2 = const(str, nditer(): operands could not be broadcast together)
DEBUG 2022-02-08 17:11:36,223 on stmt: $54call_function.3 = call $50load_global.1($const52.2, func=$50load_global.1, args=[Var($const52.2, arrayobj.py:2823)], kws=(), vararg=None, target=None)
DEBUG 2022-02-08 17:11:36,223 on stmt: <static> raise <class 'ValueError'>('nditer(): operands could not be broadcast together')
DEBUG 2022-02-08 17:11:36,223 ==== SSA block analysis pass on 60
DEBUG 2022-02-08 17:11:36,223 Running <numba.core.ssa._GatherDefsHandler object at 0x000001E9F7EB3B80>
DEBUG 2022-02-08 17:11:36,223 on stmt: $const60.0 = const(NoneType, None)
DEBUG 2022-02-08 17:11:36,223 on stmt: $62return_value.1 = cast(value=$const60.0)
DEBUG 2022-02-08 17:11:36,223 on stmt: return $62return_value.1
DEBUG 2022-02-08 17:11:36,223 defs defaultdict(<class 'list'>,
            {'$10load_global.3': [<numba.core.ir.Assign object at 0x000001E9F7EADEB0>],
             '$14call_function.5': [<numba.core.ir.Assign object at 0x000001E9F7EB11F0>],
             '$16get_iter.6': [<numba.core.ir.Assign object at 0x000001E9F7EB1310>],
             '$18for_iter.1': [<numba.core.ir.Assign object at 0x000001E9F7EB1580>],
             '$18for_iter.2': [<numba.core.ir.Assign object at 0x000001E9F7EB16A0>],
             '$18for_iter.3': [<numba.core.ir.Assign object at 0x000001E9F7EB17C0>],
             '$26binary_subscr.4': [<numba.core.ir.Assign object at 0x000001E9F7EB1E80>],
             '$2load_global.0': [<numba.core.ir.Assign object at 0x000001E9F7EAD970>],
             '$30load_global.6': [<numba.core.ir.Assign object at 0x000001E9F7EB3130>],
             '$34call_function.8': [<numba.core.ir.Assign object at 0x000001E9F7EB3430>],
             '$38binary_subtract.10': [<numba.core.ir.Assign object at 0x000001E9F7EAD580>],
             '$42binary_add.12': [<numba.core.ir.Assign object at 0x000001E9F7EAD2E0>],
             '$44binary_subscr.13': [<numba.core.ir.Assign object at 0x000001E9F7EA7730>],
             '$46compare_op.14': [<numba.core.ir.Assign object at 0x000001E9F7EA7B80>],
             '$48pred': [<numba.core.ir.Assign object at 0x000001E9F7EB3610>],
             '$50load_global.1': [<numba.core.ir.Assign object at 0x000001E9F7EB32E0>],
             '$54call_function.3': [<numba.core.ir.Assign object at 0x000001E9F7EB39D0>],
             '$62return_value.1': [<numba.core.ir.Assign object at 0x000001E9F7EB3DF0>],
             '$const52.2': [<numba.core.ir.Assign object at 0x000001E9F7EB37F0>],
             '$const60.0': [<numba.core.ir.Assign object at 0x000001E9F7EB3C70>],
             '$phi18.0': [<numba.core.ir.Assign object at 0x000001E9F7EADB20>],
             '$phi20.1': [<numba.core.ir.Assign object at 0x000001E9F7EB14C0>],
             'bool48': [<numba.core.ir.Assign object at 0x000001E9F7EA7A30>],
             'i': [<numba.core.ir.Assign object at 0x000001E9F7EB1A90>],
             'main_shape': [<numba.core.ir.Assign object at 0x000001E9F7EAD7F0>],
             'n': [<numba.core.ir.Assign object at 0x000001E9F7EADC70>],
             'shape': [<numba.core.ir.Assign object at 0x000001E9F7EAD6D0>]})
DEBUG 2022-02-08 17:11:36,223 SSA violators set()
DEBUG 2022-02-08 17:11:36,295 bytecode dump:
>          0	NOP(arg=None, lineno=25)
           2	LOAD_FAST(arg=0, lineno=25)
           4	LOAD_CONST(arg=1, lineno=1)
           6	BINARY_ADD(arg=None, lineno=1)
           8	RETURN_VALUE(arg=None, lineno=1)
DEBUG 2022-02-08 17:11:36,295 pending: deque([State(pc_initial=0 nstack_initial=0)])
DEBUG 2022-02-08 17:11:36,295 stack: []
DEBUG 2022-02-08 17:11:36,295 dispatch pc=0, inst=NOP(arg=None, lineno=25)
DEBUG 2022-02-08 17:11:36,295 stack []
DEBUG 2022-02-08 17:11:36,295 dispatch pc=2, inst=LOAD_FAST(arg=0, lineno=25)
DEBUG 2022-02-08 17:11:36,295 stack []
DEBUG 2022-02-08 17:11:36,295 dispatch pc=4, inst=LOAD_CONST(arg=1, lineno=1)
DEBUG 2022-02-08 17:11:36,295 stack ['$_78binary_subscr_14_12.0']
DEBUG 2022-02-08 17:11:36,295 dispatch pc=6, inst=BINARY_ADD(arg=None, lineno=1)
DEBUG 2022-02-08 17:11:36,295 stack ['$_78binary_subscr_14_12.0', '$const4.1']
DEBUG 2022-02-08 17:11:36,295 dispatch pc=8, inst=RETURN_VALUE(arg=None, lineno=1)
DEBUG 2022-02-08 17:11:36,295 stack ['$6binary_add.2']
DEBUG 2022-02-08 17:11:36,295 end state. edges=[]
DEBUG 2022-02-08 17:11:36,295 -------------------------Prune PHIs-------------------------
DEBUG 2022-02-08 17:11:36,295 Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
DEBUG 2022-02-08 17:11:36,295 defmap: {}
DEBUG 2022-02-08 17:11:36,303 phismap: defaultdict(<class 'set'>, {})
DEBUG 2022-02-08 17:11:36,303 changing phismap: defaultdict(<class 'set'>, {})
DEBUG 2022-02-08 17:11:36,303 keep phismap: {}
DEBUG 2022-02-08 17:11:36,303 new_out: defaultdict(<class 'dict'>, {})
DEBUG 2022-02-08 17:11:36,303 ----------------------DONE Prune PHIs-----------------------
DEBUG 2022-02-08 17:11:36,303 block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$_78binary_subscr_14_12.0'}), (4, {'res': '$const4.1'}), (6, {'lhs': '$_78binary_subscr_14_12.0', 'rhs': '$const4.1', 'res': '$6binary_add.2'}), (8, {'retval': '$6binary_add.2', 'castval': '$8return_value.3'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG 2022-02-08 17:11:36,303 label 0:
    _78binary_subscr_14_1 = arg(0, name=_78binary_subscr_14_1) ['_78binary_subscr_14_1']
    $const4.1 = const(int, 1)                ['$const4.1']
    $6binary_add.2 = _78binary_subscr_14_1 + $const4.1 ['$6binary_add.2', '$const4.1', '_78binary_subscr_14_1']
    $8return_value.3 = cast(value=$6binary_add.2) ['$6binary_add.2', '$8return_value.3']
    return $8return_value.3                  ['$8return_value.3']

DEBUG 2022-02-08 17:11:36,305 ==== SSA block analysis pass on 0
DEBUG 2022-02-08 17:11:36,305 Running <numba.core.ssa._GatherDefsHandler object at 0x000001E9F7F37C40>
DEBUG 2022-02-08 17:11:36,305 on stmt: _78binary_subscr_14_1 = arg(0, name=_78binary_subscr_14_1)
DEBUG 2022-02-08 17:11:36,305 on stmt: $const4.1 = const(int, 1)
DEBUG 2022-02-08 17:11:36,305 on stmt: $6binary_add.2 = _78binary_subscr_14_1 + $const4.1
DEBUG 2022-02-08 17:11:36,305 on stmt: $8return_value.3 = cast(value=$6binary_add.2)
DEBUG 2022-02-08 17:11:36,305 on stmt: return $8return_value.3
DEBUG 2022-02-08 17:11:36,305 defs defaultdict(<class 'list'>,
            {'$6binary_add.2': [<numba.core.ir.Assign object at 0x000001E9F7F3ABE0>],
             '$8return_value.3': [<numba.core.ir.Assign object at 0x000001E9F7F3AD30>],
             '$const4.1': [<numba.core.ir.Assign object at 0x000001E9F7F3AA30>],
             '_78binary_subscr_14_1': [<numba.core.ir.Assign object at 0x000001E9F7F3A1F0>]})
DEBUG 2022-02-08 17:11:36,305 SSA violators set()
DEBUG 2022-02-08 17:11:36,315 bytecode dump:
>          0	NOP(arg=None, lineno=356)
           2	LOAD_CONST(arg=1, lineno=356)
           4	STORE_FAST(arg=1, lineno=356)
           6	LOAD_GLOBAL(arg=0, lineno=357)
           8	LOAD_METHOD(arg=1, lineno=357)
          10	LOAD_FAST(arg=0, lineno=357)
          12	CALL_METHOD(arg=1, lineno=357)
          14	GET_ITER(arg=None, lineno=357)
>         16	FOR_ITER(arg=16, lineno=357)
          18	STORE_FAST(arg=2, lineno=357)
          20	LOAD_FAST(arg=1, lineno=358)
          22	LOAD_FAST(arg=2, lineno=358)
          24	LOAD_METHOD(arg=2, lineno=358)
          26	CALL_METHOD(arg=0, lineno=358)
          28	INPLACE_MULTIPLY(arg=None, lineno=358)
          30	STORE_FAST(arg=1, lineno=358)
          32	JUMP_ABSOLUTE(arg=16, lineno=358)
>         34	LOAD_FAST(arg=1, lineno=359)
          36	RETURN_VALUE(arg=None, lineno=359)
DEBUG 2022-02-08 17:11:36,315 pending: deque([State(pc_initial=0 nstack_initial=0)])
DEBUG 2022-02-08 17:11:36,315 stack: []
DEBUG 2022-02-08 17:11:36,315 dispatch pc=0, inst=NOP(arg=None, lineno=356)
DEBUG 2022-02-08 17:11:36,315 stack []
DEBUG 2022-02-08 17:11:36,315 dispatch pc=2, inst=LOAD_CONST(arg=1, lineno=356)
DEBUG 2022-02-08 17:11:36,315 stack []
DEBUG 2022-02-08 17:11:36,315 dispatch pc=4, inst=STORE_FAST(arg=1, lineno=356)
DEBUG 2022-02-08 17:11:36,315 stack ['$const2.0']
DEBUG 2022-02-08 17:11:36,315 dispatch pc=6, inst=LOAD_GLOBAL(arg=0, lineno=357)
DEBUG 2022-02-08 17:11:36,315 stack []
DEBUG 2022-02-08 17:11:36,315 dispatch pc=8, inst=LOAD_METHOD(arg=1, lineno=357)
DEBUG 2022-02-08 17:11:36,315 stack ['$6load_global.1']
DEBUG 2022-02-08 17:11:36,315 dispatch pc=10, inst=LOAD_FAST(arg=0, lineno=357)
DEBUG 2022-02-08 17:11:36,315 stack ['$8load_method.2']
DEBUG 2022-02-08 17:11:36,315 dispatch pc=12, inst=CALL_METHOD(arg=1, lineno=357)
DEBUG 2022-02-08 17:11:36,315 stack ['$8load_method.2', '$arr10.3']
DEBUG 2022-02-08 17:11:36,315 dispatch pc=14, inst=GET_ITER(arg=None, lineno=357)
DEBUG 2022-02-08 17:11:36,315 stack ['$12call_method.4']
DEBUG 2022-02-08 17:11:36,315 end state. edges=[Edge(pc=16, stack=('$14get_iter.5',), blockstack=(), npush=0)]
DEBUG 2022-02-08 17:11:36,315 pending: deque([State(pc_initial=16 nstack_initial=1)])
DEBUG 2022-02-08 17:11:36,315 stack: ['$phi16.0']
DEBUG 2022-02-08 17:11:36,315 dispatch pc=16, inst=FOR_ITER(arg=16, lineno=357)
DEBUG 2022-02-08 17:11:36,315 stack ['$phi16.0']
DEBUG 2022-02-08 17:11:36,315 end state. edges=[Edge(pc=34, stack=(), blockstack=(), npush=0), Edge(pc=18, stack=('$phi16.0', '$16for_iter.2'), blockstack=(), npush=0)]
DEBUG 2022-02-08 17:11:36,315 pending: deque([State(pc_initial=34 nstack_initial=0), State(pc_initial=18 nstack_initial=2)])
DEBUG 2022-02-08 17:11:36,315 stack: []
DEBUG 2022-02-08 17:11:36,315 dispatch pc=34, inst=LOAD_FAST(arg=1, lineno=359)
DEBUG 2022-02-08 17:11:36,315 stack []
DEBUG 2022-02-08 17:11:36,315 dispatch pc=36, inst=RETURN_VALUE(arg=None, lineno=359)
DEBUG 2022-02-08 17:11:36,315 stack ['$c34.0']
DEBUG 2022-02-08 17:11:36,315 end state. edges=[]
DEBUG 2022-02-08 17:11:36,315 pending: deque([State(pc_initial=18 nstack_initial=2)])
DEBUG 2022-02-08 17:11:36,315 stack: ['$phi18.0', '$phi18.1']
DEBUG 2022-02-08 17:11:36,315 dispatch pc=18, inst=STORE_FAST(arg=2, lineno=357)
DEBUG 2022-02-08 17:11:36,315 stack ['$phi18.0', '$phi18.1']
DEBUG 2022-02-08 17:11:36,315 dispatch pc=20, inst=LOAD_FAST(arg=1, lineno=358)
DEBUG 2022-02-08 17:11:36,315 stack ['$phi18.0']
DEBUG 2022-02-08 17:11:36,315 dispatch pc=22, inst=LOAD_FAST(arg=2, lineno=358)
DEBUG 2022-02-08 17:11:36,315 stack ['$phi18.0', '$c20.2']
DEBUG 2022-02-08 17:11:36,315 dispatch pc=24, inst=LOAD_METHOD(arg=2, lineno=358)
DEBUG 2022-02-08 17:11:36,315 stack ['$phi18.0', '$c20.2', '$v22.3']
DEBUG 2022-02-08 17:11:36,315 dispatch pc=26, inst=CALL_METHOD(arg=0, lineno=358)
DEBUG 2022-02-08 17:11:36,315 stack ['$phi18.0', '$c20.2', '$24load_method.4']
DEBUG 2022-02-08 17:11:36,315 dispatch pc=28, inst=INPLACE_MULTIPLY(arg=None, lineno=358)
DEBUG 2022-02-08 17:11:36,323 stack ['$phi18.0', '$c20.2', '$26call_method.5']
DEBUG 2022-02-08 17:11:36,323 dispatch pc=30, inst=STORE_FAST(arg=1, lineno=358)
DEBUG 2022-02-08 17:11:36,323 stack ['$phi18.0', '$28inplace_multiply.6']
DEBUG 2022-02-08 17:11:36,323 dispatch pc=32, inst=JUMP_ABSOLUTE(arg=16, lineno=358)
DEBUG 2022-02-08 17:11:36,323 stack ['$phi18.0']
DEBUG 2022-02-08 17:11:36,323 end state. edges=[Edge(pc=16, stack=('$phi18.0',), blockstack=(), npush=0)]
DEBUG 2022-02-08 17:11:36,323 pending: deque([State(pc_initial=16 nstack_initial=1)])
DEBUG 2022-02-08 17:11:36,323 -------------------------Prune PHIs-------------------------
DEBUG 2022-02-08 17:11:36,323 Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=16 nstack_initial=1): {'$phi16.0'},
             State(pc_initial=18 nstack_initial=2): {'$phi18.1'},
             State(pc_initial=34 nstack_initial=0): set()})
DEBUG 2022-02-08 17:11:36,323 defmap: {'$phi16.0': State(pc_initial=0 nstack_initial=0),
 '$phi18.1': State(pc_initial=16 nstack_initial=1)}
DEBUG 2022-02-08 17:11:36,323 phismap: defaultdict(<class 'set'>,
            {'$phi16.0': {('$14get_iter.5',
                           State(pc_initial=0 nstack_initial=0)),
                          ('$phi18.0', State(pc_initial=18 nstack_initial=2))},
             '$phi18.0': {('$phi16.0', State(pc_initial=16 nstack_initial=1))},
             '$phi18.1': {('$16for_iter.2',
                           State(pc_initial=16 nstack_initial=1))}})
DEBUG 2022-02-08 17:11:36,323 changing phismap: defaultdict(<class 'set'>,
            {'$phi16.0': {('$14get_iter.5',
                           State(pc_initial=0 nstack_initial=0)),
                          ('$phi16.0', State(pc_initial=16 nstack_initial=1))},
             '$phi18.0': {('$14get_iter.5',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi18.1': {('$16for_iter.2',
                           State(pc_initial=16 nstack_initial=1))}})
DEBUG 2022-02-08 17:11:36,323 changing phismap: defaultdict(<class 'set'>,
            {'$phi16.0': {('$14get_iter.5',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi18.0': {('$14get_iter.5',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi18.1': {('$16for_iter.2',
                           State(pc_initial=16 nstack_initial=1))}})
DEBUG 2022-02-08 17:11:36,325 changing phismap: defaultdict(<class 'set'>,
            {'$phi16.0': {('$14get_iter.5',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi18.0': {('$14get_iter.5',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi18.1': {('$16for_iter.2',
                           State(pc_initial=16 nstack_initial=1))}})
DEBUG 2022-02-08 17:11:36,325 keep phismap: {'$phi16.0': {('$14get_iter.5', State(pc_initial=0 nstack_initial=0))},
 '$phi18.1': {('$16for_iter.2', State(pc_initial=16 nstack_initial=1))}}
DEBUG 2022-02-08 17:11:36,325 new_out: defaultdict(<class 'dict'>,
            {State(pc_initial=0 nstack_initial=0): {'$phi16.0': '$14get_iter.5'},
             State(pc_initial=16 nstack_initial=1): {'$phi18.1': '$16for_iter.2'}})
DEBUG 2022-02-08 17:11:36,325 ----------------------DONE Prune PHIs-----------------------
DEBUG 2022-02-08 17:11:36,325 block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$const2.0'}), (4, {'value': '$const2.0'}), (6, {'res': '$6load_global.1'}), (8, {'item': '$6load_global.1', 'res': '$8load_method.2'}), (10, {'res': '$arr10.3'}), (12, {'func': '$8load_method.2', 'args': ['$arr10.3'], 'res': '$12call_method.4'}), (14, {'value': '$12call_method.4', 'res': '$14get_iter.5'})), outgoing_phis={'$phi16.0': '$14get_iter.5'}, blockstack=(), active_try_block=None, outgoing_edgepushed={16: ('$14get_iter.5',)})
DEBUG 2022-02-08 17:11:36,325 block_infos State(pc_initial=16 nstack_initial=1):
AdaptBlockInfo(insts=((16, {'iterator': '$phi16.0', 'pair': '$16for_iter.1', 'indval': '$16for_iter.2', 'pred': '$16for_iter.3'}),), outgoing_phis={'$phi18.1': '$16for_iter.2'}, blockstack=(), active_try_block=None, outgoing_edgepushed={34: (), 18: ('$phi16.0', '$16for_iter.2')})
DEBUG 2022-02-08 17:11:36,325 block_infos State(pc_initial=18 nstack_initial=2):
AdaptBlockInfo(insts=((18, {'value': '$phi18.1'}), (20, {'res': '$c20.2'}), (22, {'res': '$v22.3'}), (24, {'item': '$v22.3', 'res': '$24load_method.4'}), (26, {'func': '$24load_method.4', 'args': [], 'res': '$26call_method.5'}), (28, {'lhs': '$c20.2', 'rhs': '$26call_method.5', 'res': '$28inplace_multiply.6'}), (30, {'value': '$28inplace_multiply.6'}), (32, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={16: ('$phi18.0',)})
DEBUG 2022-02-08 17:11:36,325 block_infos State(pc_initial=34 nstack_initial=0):
AdaptBlockInfo(insts=((34, {'res': '$c34.0'}), (36, {'retval': '$c34.0', 'castval': '$36return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG 2022-02-08 17:11:36,325 label 0:
    arr = arg(0, name=arr)                   ['arr']
    c = const(int, 1)                        ['c']
    $6load_global.1 = global(np: <module 'numpy' from 'C:\\Users\\zl4821\\Anaconda3\\envs\\GBS\\lib\\site-packages\\numpy\\__init__.py'>) ['$6load_global.1']
    $8load_method.2 = getattr(value=$6load_global.1, attr=nditer) ['$6load_global.1', '$8load_method.2']
    $12call_method.4 = call $8load_method.2(arr, func=$8load_method.2, args=[Var(arr, arraymath.py:356)], kws=(), vararg=None, target=None) ['$12call_method.4', '$8load_method.2', 'arr']
    $14get_iter.5 = getiter(value=$12call_method.4) ['$12call_method.4', '$14get_iter.5']
    $phi16.0 = $14get_iter.5                 ['$14get_iter.5', '$phi16.0']
    jump 16                                  []
label 16:
    $16for_iter.1 = iternext(value=$phi16.0) ['$16for_iter.1', '$phi16.0']
    $16for_iter.2 = pair_first(value=$16for_iter.1) ['$16for_iter.1', '$16for_iter.2']
    $16for_iter.3 = pair_second(value=$16for_iter.1) ['$16for_iter.1', '$16for_iter.3']
    $phi18.1 = $16for_iter.2                 ['$16for_iter.2', '$phi18.1']
    branch $16for_iter.3, 18, 34             ['$16for_iter.3']
label 18:
    v = $phi18.1                             ['$phi18.1', 'v']
    $24load_method.4 = getattr(value=v, attr=item) ['$24load_method.4', 'v']
    $26call_method.5 = call $24load_method.4(func=$24load_method.4, args=[], kws=(), vararg=None, target=None) ['$24load_method.4', '$26call_method.5']
    $28inplace_multiply.6 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=c, rhs=$26call_method.5, static_lhs=Undefined, static_rhs=Undefined) ['$26call_method.5', '$28inplace_multiply.6', 'c']
    c = $28inplace_multiply.6                ['$28inplace_multiply.6', 'c']
    jump 16                                  []
label 34:
    $36return_value.1 = cast(value=c)        ['$36return_value.1', 'c']
    return $36return_value.1                 ['$36return_value.1']

DEBUG 2022-02-08 17:11:36,325 ==== SSA block analysis pass on 0
DEBUG 2022-02-08 17:11:36,325 Running <numba.core.ssa._GatherDefsHandler object at 0x000001E9F7F6DE20>
DEBUG 2022-02-08 17:11:36,325 on stmt: arr = arg(0, name=arr)
DEBUG 2022-02-08 17:11:36,325 on stmt: c = const(int, 1)
DEBUG 2022-02-08 17:11:36,325 on stmt: $6load_global.1 = global(np: <module 'numpy' from 'C:\\Users\\zl4821\\Anaconda3\\envs\\GBS\\lib\\site-packages\\numpy\\__init__.py'>)
DEBUG 2022-02-08 17:11:36,325 on stmt: $8load_method.2 = getattr(value=$6load_global.1, attr=nditer)
DEBUG 2022-02-08 17:11:36,325 on stmt: $12call_method.4 = call $8load_method.2(arr, func=$8load_method.2, args=[Var(arr, arraymath.py:356)], kws=(), vararg=None, target=None)
DEBUG 2022-02-08 17:11:36,325 on stmt: $14get_iter.5 = getiter(value=$12call_method.4)
DEBUG 2022-02-08 17:11:36,325 on stmt: $phi16.0 = $14get_iter.5
DEBUG 2022-02-08 17:11:36,325 on stmt: jump 16
DEBUG 2022-02-08 17:11:36,325 ==== SSA block analysis pass on 16
DEBUG 2022-02-08 17:11:36,325 Running <numba.core.ssa._GatherDefsHandler object at 0x000001E9F7F6DE20>
DEBUG 2022-02-08 17:11:36,325 on stmt: $16for_iter.1 = iternext(value=$phi16.0)
DEBUG 2022-02-08 17:11:36,325 on stmt: $16for_iter.2 = pair_first(value=$16for_iter.1)
DEBUG 2022-02-08 17:11:36,325 on stmt: $16for_iter.3 = pair_second(value=$16for_iter.1)
DEBUG 2022-02-08 17:11:36,325 on stmt: $phi18.1 = $16for_iter.2
DEBUG 2022-02-08 17:11:36,325 on stmt: branch $16for_iter.3, 18, 34
DEBUG 2022-02-08 17:11:36,325 ==== SSA block analysis pass on 18
DEBUG 2022-02-08 17:11:36,325 Running <numba.core.ssa._GatherDefsHandler object at 0x000001E9F7F6DE20>
DEBUG 2022-02-08 17:11:36,325 on stmt: v = $phi18.1
DEBUG 2022-02-08 17:11:36,325 on stmt: $24load_method.4 = getattr(value=v, attr=item)
DEBUG 2022-02-08 17:11:36,325 on stmt: $26call_method.5 = call $24load_method.4(func=$24load_method.4, args=[], kws=(), vararg=None, target=None)
DEBUG 2022-02-08 17:11:36,325 on stmt: $28inplace_multiply.6 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=c, rhs=$26call_method.5, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-08 17:11:36,325 on stmt: c = $28inplace_multiply.6
DEBUG 2022-02-08 17:11:36,325 on stmt: jump 16
DEBUG 2022-02-08 17:11:36,325 ==== SSA block analysis pass on 34
DEBUG 2022-02-08 17:11:36,325 Running <numba.core.ssa._GatherDefsHandler object at 0x000001E9F7F6DE20>
DEBUG 2022-02-08 17:11:36,325 on stmt: $36return_value.1 = cast(value=c)
DEBUG 2022-02-08 17:11:36,325 on stmt: return $36return_value.1
DEBUG 2022-02-08 17:11:36,325 defs defaultdict(<class 'list'>,
            {'$12call_method.4': [<numba.core.ir.Assign object at 0x000001E9F7F69520>],
             '$14get_iter.5': [<numba.core.ir.Assign object at 0x000001E9F7F69610>],
             '$16for_iter.1': [<numba.core.ir.Assign object at 0x000001E9F7F698E0>],
             '$16for_iter.2': [<numba.core.ir.Assign object at 0x000001E9F7F69A00>],
             '$16for_iter.3': [<numba.core.ir.Assign object at 0x000001E9F7F69B20>],
             '$24load_method.4': [<numba.core.ir.Assign object at 0x000001E9F7F6D1F0>],
             '$26call_method.5': [<numba.core.ir.Assign object at 0x000001E9F7F6D400>],
             '$28inplace_multiply.6': [<numba.core.ir.Assign object at 0x000001E9F7F6D520>],
             '$36return_value.1': [<numba.core.ir.Assign object at 0x000001E9F7F6D910>],
             '$6load_global.1': [<numba.core.ir.Assign object at 0x000001E9F7F69070>],
             '$8load_method.2': [<numba.core.ir.Assign object at 0x000001E9F7F691F0>],
             '$phi16.0': [<numba.core.ir.Assign object at 0x000001E9F7F5F9D0>],
             '$phi18.1': [<numba.core.ir.Assign object at 0x000001E9F7F69820>],
             'arr': [<numba.core.ir.Assign object at 0x000001E9F7F5F940>],
             'c': [<numba.core.ir.Assign object at 0x000001E9F7F5FB50>,
                   <numba.core.ir.Assign object at 0x000001E9F7F6D5E0>],
             'v': [<numba.core.ir.Assign object at 0x000001E9F7F69DF0>]})
DEBUG 2022-02-08 17:11:36,333 SSA violators {'c'}
DEBUG 2022-02-08 17:11:36,333 Fix SSA violator on var c
DEBUG 2022-02-08 17:11:36,333 ==== SSA block rewrite pass on 0
DEBUG 2022-02-08 17:11:36,333 Running <numba.core.ssa._FreshVarHandler object at 0x000001E9F7F6DEB0>
DEBUG 2022-02-08 17:11:36,333 on stmt: arr = arg(0, name=arr)
DEBUG 2022-02-08 17:11:36,333 on stmt: c = const(int, 1)
DEBUG 2022-02-08 17:11:36,333 first assign: c
DEBUG 2022-02-08 17:11:36,333 replaced with: c = const(int, 1)
DEBUG 2022-02-08 17:11:36,333 on stmt: $6load_global.1 = global(np: <module 'numpy' from 'C:\\Users\\zl4821\\Anaconda3\\envs\\GBS\\lib\\site-packages\\numpy\\__init__.py'>)
DEBUG 2022-02-08 17:11:36,333 on stmt: $8load_method.2 = getattr(value=$6load_global.1, attr=nditer)
DEBUG 2022-02-08 17:11:36,333 on stmt: $12call_method.4 = call $8load_method.2(arr, func=$8load_method.2, args=[Var(arr, arraymath.py:356)], kws=(), vararg=None, target=None)
DEBUG 2022-02-08 17:11:36,333 on stmt: $14get_iter.5 = getiter(value=$12call_method.4)
DEBUG 2022-02-08 17:11:36,333 on stmt: $phi16.0 = $14get_iter.5
DEBUG 2022-02-08 17:11:36,333 on stmt: jump 16
DEBUG 2022-02-08 17:11:36,333 ==== SSA block rewrite pass on 16
DEBUG 2022-02-08 17:11:36,333 Running <numba.core.ssa._FreshVarHandler object at 0x000001E9F7F6DEB0>
DEBUG 2022-02-08 17:11:36,333 on stmt: $16for_iter.1 = iternext(value=$phi16.0)
DEBUG 2022-02-08 17:11:36,333 on stmt: $16for_iter.2 = pair_first(value=$16for_iter.1)
DEBUG 2022-02-08 17:11:36,333 on stmt: $16for_iter.3 = pair_second(value=$16for_iter.1)
DEBUG 2022-02-08 17:11:36,333 on stmt: $phi18.1 = $16for_iter.2
DEBUG 2022-02-08 17:11:36,333 on stmt: branch $16for_iter.3, 18, 34
DEBUG 2022-02-08 17:11:36,333 ==== SSA block rewrite pass on 18
DEBUG 2022-02-08 17:11:36,333 Running <numba.core.ssa._FreshVarHandler object at 0x000001E9F7F6DEB0>
DEBUG 2022-02-08 17:11:36,333 on stmt: v = $phi18.1
DEBUG 2022-02-08 17:11:36,335 on stmt: $24load_method.4 = getattr(value=v, attr=item)
DEBUG 2022-02-08 17:11:36,335 on stmt: $26call_method.5 = call $24load_method.4(func=$24load_method.4, args=[], kws=(), vararg=None, target=None)
DEBUG 2022-02-08 17:11:36,335 on stmt: $28inplace_multiply.6 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=c, rhs=$26call_method.5, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-08 17:11:36,335 on stmt: c = $28inplace_multiply.6
DEBUG 2022-02-08 17:11:36,335 replaced with: c.1 = $28inplace_multiply.6
DEBUG 2022-02-08 17:11:36,335 on stmt: jump 16
DEBUG 2022-02-08 17:11:36,335 ==== SSA block rewrite pass on 34
DEBUG 2022-02-08 17:11:36,335 Running <numba.core.ssa._FreshVarHandler object at 0x000001E9F7F6DEB0>
DEBUG 2022-02-08 17:11:36,335 on stmt: $36return_value.1 = cast(value=c)
DEBUG 2022-02-08 17:11:36,335 on stmt: return $36return_value.1
DEBUG 2022-02-08 17:11:36,335 Replaced assignments: defaultdict(<class 'list'>,
            {0: [<numba.core.ir.Assign object at 0x000001E9F7F6DE80>],
             18: [<numba.core.ir.Assign object at 0x000001E9F7F6DBE0>]})
DEBUG 2022-02-08 17:11:36,335 ==== SSA block rewrite pass on 0
DEBUG 2022-02-08 17:11:36,335 Running <numba.core.ssa._FixSSAVars object at 0x000001E9F7F6DEB0>
DEBUG 2022-02-08 17:11:36,335 on stmt: arr = arg(0, name=arr)
DEBUG 2022-02-08 17:11:36,335 on stmt: c = const(int, 1)
DEBUG 2022-02-08 17:11:36,335 on stmt: $6load_global.1 = global(np: <module 'numpy' from 'C:\\Users\\zl4821\\Anaconda3\\envs\\GBS\\lib\\site-packages\\numpy\\__init__.py'>)
DEBUG 2022-02-08 17:11:36,335 on stmt: $8load_method.2 = getattr(value=$6load_global.1, attr=nditer)
DEBUG 2022-02-08 17:11:36,335 on stmt: $12call_method.4 = call $8load_method.2(arr, func=$8load_method.2, args=[Var(arr, arraymath.py:356)], kws=(), vararg=None, target=None)
DEBUG 2022-02-08 17:11:36,335 on stmt: $14get_iter.5 = getiter(value=$12call_method.4)
DEBUG 2022-02-08 17:11:36,335 on stmt: $phi16.0 = $14get_iter.5
DEBUG 2022-02-08 17:11:36,335 on stmt: jump 16
DEBUG 2022-02-08 17:11:36,335 ==== SSA block rewrite pass on 16
DEBUG 2022-02-08 17:11:36,335 Running <numba.core.ssa._FixSSAVars object at 0x000001E9F7F6DEB0>
DEBUG 2022-02-08 17:11:36,335 on stmt: $16for_iter.1 = iternext(value=$phi16.0)
DEBUG 2022-02-08 17:11:36,335 on stmt: $16for_iter.2 = pair_first(value=$16for_iter.1)
DEBUG 2022-02-08 17:11:36,335 on stmt: $16for_iter.3 = pair_second(value=$16for_iter.1)
DEBUG 2022-02-08 17:11:36,335 on stmt: $phi18.1 = $16for_iter.2
DEBUG 2022-02-08 17:11:36,335 on stmt: branch $16for_iter.3, 18, 34
DEBUG 2022-02-08 17:11:36,335 ==== SSA block rewrite pass on 18
DEBUG 2022-02-08 17:11:36,335 Running <numba.core.ssa._FixSSAVars object at 0x000001E9F7F6DEB0>
DEBUG 2022-02-08 17:11:36,335 on stmt: v = $phi18.1
DEBUG 2022-02-08 17:11:36,335 on stmt: $24load_method.4 = getattr(value=v, attr=item)
DEBUG 2022-02-08 17:11:36,335 on stmt: $26call_method.5 = call $24load_method.4(func=$24load_method.4, args=[], kws=(), vararg=None, target=None)
DEBUG 2022-02-08 17:11:36,335 on stmt: $28inplace_multiply.6 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=c, rhs=$26call_method.5, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-08 17:11:36,335 find_def var='c' stmt=$28inplace_multiply.6 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=c, rhs=$26call_method.5, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-08 17:11:36,335 find_def_from_top label 18
DEBUG 2022-02-08 17:11:36,335 idom 16 from label 18
DEBUG 2022-02-08 17:11:36,335 find_def_from_bottom label 16
DEBUG 2022-02-08 17:11:36,335 find_def_from_top label 16
DEBUG 2022-02-08 17:11:36,335 insert phi node c.2 = phi(incoming_values=[], incoming_blocks=[]) at 16
DEBUG 2022-02-08 17:11:36,335 find_def_from_bottom label 0
DEBUG 2022-02-08 17:11:36,335 incoming_def c = const(int, 1)
DEBUG 2022-02-08 17:11:36,335 find_def_from_bottom label 18
DEBUG 2022-02-08 17:11:36,335 incoming_def c.1 = $28inplace_multiply.6
DEBUG 2022-02-08 17:11:36,335 replaced with: $28inplace_multiply.6 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=c.2, rhs=$26call_method.5, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-08 17:11:36,335 on stmt: c.1 = $28inplace_multiply.6
DEBUG 2022-02-08 17:11:36,335 on stmt: jump 16
DEBUG 2022-02-08 17:11:36,335 ==== SSA block rewrite pass on 34
DEBUG 2022-02-08 17:11:36,335 Running <numba.core.ssa._FixSSAVars object at 0x000001E9F7F6DEB0>
DEBUG 2022-02-08 17:11:36,335 on stmt: $36return_value.1 = cast(value=c)
DEBUG 2022-02-08 17:11:36,335 find_def var='c' stmt=$36return_value.1 = cast(value=c)
DEBUG 2022-02-08 17:11:36,335 find_def_from_top label 34
DEBUG 2022-02-08 17:11:36,335 idom 16 from label 34
DEBUG 2022-02-08 17:11:36,335 find_def_from_bottom label 16
DEBUG 2022-02-08 17:11:36,335 replaced with: $36return_value.1 = cast(value=c.2)
DEBUG 2022-02-08 17:11:36,335 on stmt: return $36return_value.1
DEBUG 2022-02-08 17:11:36,384 bytecode dump:
>          0	NOP(arg=None, lineno=20)
           2	LOAD_FAST(arg=0, lineno=20)
           4	LOAD_CONST(arg=1, lineno=1)
           6	BINARY_ADD(arg=None, lineno=1)
           8	RETURN_VALUE(arg=None, lineno=1)
DEBUG 2022-02-08 17:11:36,384 pending: deque([State(pc_initial=0 nstack_initial=0)])
DEBUG 2022-02-08 17:11:36,384 stack: []
DEBUG 2022-02-08 17:11:36,384 dispatch pc=0, inst=NOP(arg=None, lineno=20)
DEBUG 2022-02-08 17:11:36,384 stack []
DEBUG 2022-02-08 17:11:36,384 dispatch pc=2, inst=LOAD_FAST(arg=0, lineno=20)
DEBUG 2022-02-08 17:11:36,384 stack []
DEBUG 2022-02-08 17:11:36,384 dispatch pc=4, inst=LOAD_CONST(arg=1, lineno=1)
DEBUG 2022-02-08 17:11:36,384 stack ['$edge_reps_12.0']
DEBUG 2022-02-08 17:11:36,384 dispatch pc=6, inst=BINARY_ADD(arg=None, lineno=1)
DEBUG 2022-02-08 17:11:36,384 stack ['$edge_reps_12.0', '$const4.1']
DEBUG 2022-02-08 17:11:36,386 dispatch pc=8, inst=RETURN_VALUE(arg=None, lineno=1)
DEBUG 2022-02-08 17:11:36,386 stack ['$6binary_add.2']
DEBUG 2022-02-08 17:11:36,386 end state. edges=[]
DEBUG 2022-02-08 17:11:36,386 -------------------------Prune PHIs-------------------------
DEBUG 2022-02-08 17:11:36,386 Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
DEBUG 2022-02-08 17:11:36,386 defmap: {}
DEBUG 2022-02-08 17:11:36,386 phismap: defaultdict(<class 'set'>, {})
DEBUG 2022-02-08 17:11:36,386 changing phismap: defaultdict(<class 'set'>, {})
DEBUG 2022-02-08 17:11:36,386 keep phismap: {}
DEBUG 2022-02-08 17:11:36,386 new_out: defaultdict(<class 'dict'>, {})
DEBUG 2022-02-08 17:11:36,386 ----------------------DONE Prune PHIs-----------------------
DEBUG 2022-02-08 17:11:36,386 block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$edge_reps_12.0'}), (4, {'res': '$const4.1'}), (6, {'lhs': '$edge_reps_12.0', 'rhs': '$const4.1', 'res': '$6binary_add.2'}), (8, {'retval': '$6binary_add.2', 'castval': '$8return_value.3'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG 2022-02-08 17:11:36,386 label 0:
    edge_reps_1 = arg(0, name=edge_reps_1)   ['edge_reps_1']
    $const4.1 = const(int, 1)                ['$const4.1']
    $6binary_add.2 = edge_reps_1 + $const4.1 ['$6binary_add.2', '$const4.1', 'edge_reps_1']
    $8return_value.3 = cast(value=$6binary_add.2) ['$6binary_add.2', '$8return_value.3']
    return $8return_value.3                  ['$8return_value.3']

DEBUG 2022-02-08 17:11:36,386 ==== SSA block analysis pass on 0
DEBUG 2022-02-08 17:11:36,386 Running <numba.core.ssa._GatherDefsHandler object at 0x000001E9F7FD2C10>
DEBUG 2022-02-08 17:11:36,386 on stmt: edge_reps_1 = arg(0, name=edge_reps_1)
DEBUG 2022-02-08 17:11:36,386 on stmt: $const4.1 = const(int, 1)
DEBUG 2022-02-08 17:11:36,386 on stmt: $6binary_add.2 = edge_reps_1 + $const4.1
DEBUG 2022-02-08 17:11:36,386 on stmt: $8return_value.3 = cast(value=$6binary_add.2)
DEBUG 2022-02-08 17:11:36,386 on stmt: return $8return_value.3
DEBUG 2022-02-08 17:11:36,386 defs defaultdict(<class 'list'>,
            {'$6binary_add.2': [<numba.core.ir.Assign object at 0x000001E9F7FD8880>],
             '$8return_value.3': [<numba.core.ir.Assign object at 0x000001E9F7FD89D0>],
             '$const4.1': [<numba.core.ir.Assign object at 0x000001E9F7FD86D0>],
             'edge_reps_1': [<numba.core.ir.Assign object at 0x000001E9F7FD2850>]})
DEBUG 2022-02-08 17:11:36,386 SSA violators set()
DEBUG 2022-02-08 17:11:36,405 bytecode dump:
>          0	NOP(arg=None, lineno=619)
           2	LOAD_FAST(arg=0, lineno=619)
           4	LOAD_ATTR(arg=0, lineno=619)
           6	LOAD_CONST(arg=1, lineno=619)
           8	COMPARE_OP(arg=2, lineno=619)
          10	POP_JUMP_IF_FALSE(arg=20, lineno=619)
          12	LOAD_GLOBAL(arg=1, lineno=620)
          14	LOAD_DEREF(arg=0, lineno=620)
          16	CALL_FUNCTION(arg=1, lineno=620)
          18	RAISE_VARARGS(arg=1, lineno=620)
>         20	LOAD_GLOBAL(arg=2, lineno=622)
          22	LOAD_METHOD(arg=3, lineno=622)
          24	LOAD_FAST(arg=0, lineno=622)
          26	CALL_METHOD(arg=1, lineno=622)
          28	STORE_FAST(arg=1, lineno=622)
          30	LOAD_GLOBAL(arg=4, lineno=623)
          32	LOAD_FAST(arg=1, lineno=623)
          34	CALL_FUNCTION(arg=1, lineno=623)
          36	LOAD_METHOD(arg=5, lineno=623)
          38	LOAD_CONST(arg=1, lineno=623)
          40	CALL_METHOD(arg=1, lineno=623)
          42	STORE_FAST(arg=2, lineno=623)
          44	LOAD_FAST(arg=1, lineno=625)
          46	GET_ITER(arg=None, lineno=625)
>         48	FOR_ITER(arg=24, lineno=625)
          50	STORE_FAST(arg=3, lineno=625)
          52	LOAD_FAST(arg=3, lineno=626)
          54	LOAD_METHOD(arg=6, lineno=626)
          56	CALL_METHOD(arg=0, lineno=626)
          58	STORE_FAST(arg=4, lineno=626)
          60	LOAD_FAST(arg=4, lineno=627)
          62	LOAD_FAST(arg=2, lineno=627)
          64	COMPARE_OP(arg=4, lineno=627)
          66	POP_JUMP_IF_FALSE(arg=48, lineno=627)
          68	LOAD_FAST(arg=4, lineno=628)
          70	STORE_FAST(arg=2, lineno=628)
          72	JUMP_ABSOLUTE(arg=48, lineno=628)
>         74	LOAD_FAST(arg=2, lineno=629)
          76	RETURN_VALUE(arg=None, lineno=629)
DEBUG 2022-02-08 17:11:36,405 pending: deque([State(pc_initial=0 nstack_initial=0)])
DEBUG 2022-02-08 17:11:36,405 stack: []
DEBUG 2022-02-08 17:11:36,405 dispatch pc=0, inst=NOP(arg=None, lineno=619)
DEBUG 2022-02-08 17:11:36,405 stack []
DEBUG 2022-02-08 17:11:36,405 dispatch pc=2, inst=LOAD_FAST(arg=0, lineno=619)
DEBUG 2022-02-08 17:11:36,405 stack []
DEBUG 2022-02-08 17:11:36,407 dispatch pc=4, inst=LOAD_ATTR(arg=0, lineno=619)
DEBUG 2022-02-08 17:11:36,407 stack ['$arry2.0']
DEBUG 2022-02-08 17:11:36,407 dispatch pc=6, inst=LOAD_CONST(arg=1, lineno=619)
DEBUG 2022-02-08 17:11:36,407 stack ['$4load_attr.1']
DEBUG 2022-02-08 17:11:36,407 dispatch pc=8, inst=COMPARE_OP(arg=2, lineno=619)
DEBUG 2022-02-08 17:11:36,407 stack ['$4load_attr.1', '$const6.2']
DEBUG 2022-02-08 17:11:36,407 dispatch pc=10, inst=POP_JUMP_IF_FALSE(arg=20, lineno=619)
DEBUG 2022-02-08 17:11:36,407 stack ['$8compare_op.3']
DEBUG 2022-02-08 17:11:36,407 end state. edges=[Edge(pc=12, stack=(), blockstack=(), npush=0), Edge(pc=20, stack=(), blockstack=(), npush=0)]
DEBUG 2022-02-08 17:11:36,407 pending: deque([State(pc_initial=12 nstack_initial=0), State(pc_initial=20 nstack_initial=0)])
DEBUG 2022-02-08 17:11:36,407 stack: []
DEBUG 2022-02-08 17:11:36,407 dispatch pc=12, inst=LOAD_GLOBAL(arg=1, lineno=620)
DEBUG 2022-02-08 17:11:36,407 stack []
DEBUG 2022-02-08 17:11:36,407 dispatch pc=14, inst=LOAD_DEREF(arg=0, lineno=620)
DEBUG 2022-02-08 17:11:36,407 stack ['$12load_global.0']
DEBUG 2022-02-08 17:11:36,407 dispatch pc=16, inst=CALL_FUNCTION(arg=1, lineno=620)
DEBUG 2022-02-08 17:11:36,407 stack ['$12load_global.0', '$14load_deref.1']
DEBUG 2022-02-08 17:11:36,407 dispatch pc=18, inst=RAISE_VARARGS(arg=1, lineno=620)
DEBUG 2022-02-08 17:11:36,407 stack ['$16call_function.2']
DEBUG 2022-02-08 17:11:36,407 end state. edges=[]
DEBUG 2022-02-08 17:11:36,407 pending: deque([State(pc_initial=20 nstack_initial=0)])
DEBUG 2022-02-08 17:11:36,407 stack: []
DEBUG 2022-02-08 17:11:36,407 dispatch pc=20, inst=LOAD_GLOBAL(arg=2, lineno=622)
DEBUG 2022-02-08 17:11:36,407 stack []
DEBUG 2022-02-08 17:11:36,407 dispatch pc=22, inst=LOAD_METHOD(arg=3, lineno=622)
DEBUG 2022-02-08 17:11:36,407 stack ['$20load_global.0']
DEBUG 2022-02-08 17:11:36,407 dispatch pc=24, inst=LOAD_FAST(arg=0, lineno=622)
DEBUG 2022-02-08 17:11:36,407 stack ['$22load_method.1']
DEBUG 2022-02-08 17:11:36,407 dispatch pc=26, inst=CALL_METHOD(arg=1, lineno=622)
DEBUG 2022-02-08 17:11:36,407 stack ['$22load_method.1', '$arry24.2']
DEBUG 2022-02-08 17:11:36,407 dispatch pc=28, inst=STORE_FAST(arg=1, lineno=622)
DEBUG 2022-02-08 17:11:36,407 stack ['$26call_method.3']
DEBUG 2022-02-08 17:11:36,407 dispatch pc=30, inst=LOAD_GLOBAL(arg=4, lineno=623)
DEBUG 2022-02-08 17:11:36,407 stack []
DEBUG 2022-02-08 17:11:36,407 dispatch pc=32, inst=LOAD_FAST(arg=1, lineno=623)
DEBUG 2022-02-08 17:11:36,407 stack ['$30load_global.4']
DEBUG 2022-02-08 17:11:36,407 dispatch pc=34, inst=CALL_FUNCTION(arg=1, lineno=623)
DEBUG 2022-02-08 17:11:36,407 stack ['$30load_global.4', '$it32.5']
DEBUG 2022-02-08 17:11:36,407 dispatch pc=36, inst=LOAD_METHOD(arg=5, lineno=623)
DEBUG 2022-02-08 17:11:36,407 stack ['$34call_function.6']
DEBUG 2022-02-08 17:11:36,407 dispatch pc=38, inst=LOAD_CONST(arg=1, lineno=623)
DEBUG 2022-02-08 17:11:36,407 stack ['$36load_method.7']
DEBUG 2022-02-08 17:11:36,407 dispatch pc=40, inst=CALL_METHOD(arg=1, lineno=623)
DEBUG 2022-02-08 17:11:36,407 stack ['$36load_method.7', '$const38.8']
DEBUG 2022-02-08 17:11:36,407 dispatch pc=42, inst=STORE_FAST(arg=2, lineno=623)
DEBUG 2022-02-08 17:11:36,407 stack ['$40call_method.9']
DEBUG 2022-02-08 17:11:36,407 dispatch pc=44, inst=LOAD_FAST(arg=1, lineno=625)
DEBUG 2022-02-08 17:11:36,407 stack []
DEBUG 2022-02-08 17:11:36,407 dispatch pc=46, inst=GET_ITER(arg=None, lineno=625)
DEBUG 2022-02-08 17:11:36,407 stack ['$it44.10']
DEBUG 2022-02-08 17:11:36,407 end state. edges=[Edge(pc=48, stack=('$46get_iter.11',), blockstack=(), npush=0)]
DEBUG 2022-02-08 17:11:36,407 pending: deque([State(pc_initial=48 nstack_initial=1)])
DEBUG 2022-02-08 17:11:36,407 stack: ['$phi48.0']
DEBUG 2022-02-08 17:11:36,407 dispatch pc=48, inst=FOR_ITER(arg=24, lineno=625)
DEBUG 2022-02-08 17:11:36,407 stack ['$phi48.0']
DEBUG 2022-02-08 17:11:36,407 end state. edges=[Edge(pc=74, stack=(), blockstack=(), npush=0), Edge(pc=50, stack=('$phi48.0', '$48for_iter.2'), blockstack=(), npush=0)]
DEBUG 2022-02-08 17:11:36,407 pending: deque([State(pc_initial=74 nstack_initial=0), State(pc_initial=50 nstack_initial=2)])
DEBUG 2022-02-08 17:11:36,407 stack: []
DEBUG 2022-02-08 17:11:36,407 dispatch pc=74, inst=LOAD_FAST(arg=2, lineno=629)
DEBUG 2022-02-08 17:11:36,407 stack []
DEBUG 2022-02-08 17:11:36,407 dispatch pc=76, inst=RETURN_VALUE(arg=None, lineno=629)
DEBUG 2022-02-08 17:11:36,407 stack ['$max_value74.0']
DEBUG 2022-02-08 17:11:36,407 end state. edges=[]
DEBUG 2022-02-08 17:11:36,407 pending: deque([State(pc_initial=50 nstack_initial=2)])
DEBUG 2022-02-08 17:11:36,407 stack: ['$phi50.0', '$phi50.1']
DEBUG 2022-02-08 17:11:36,407 dispatch pc=50, inst=STORE_FAST(arg=3, lineno=625)
DEBUG 2022-02-08 17:11:36,407 stack ['$phi50.0', '$phi50.1']
DEBUG 2022-02-08 17:11:36,407 dispatch pc=52, inst=LOAD_FAST(arg=3, lineno=626)
DEBUG 2022-02-08 17:11:36,407 stack ['$phi50.0']
DEBUG 2022-02-08 17:11:36,407 dispatch pc=54, inst=LOAD_METHOD(arg=6, lineno=626)
DEBUG 2022-02-08 17:11:36,407 stack ['$phi50.0', '$view52.2']
DEBUG 2022-02-08 17:11:36,407 dispatch pc=56, inst=CALL_METHOD(arg=0, lineno=626)
DEBUG 2022-02-08 17:11:36,407 stack ['$phi50.0', '$54load_method.3']
DEBUG 2022-02-08 17:11:36,407 dispatch pc=58, inst=STORE_FAST(arg=4, lineno=626)
DEBUG 2022-02-08 17:11:36,407 stack ['$phi50.0', '$56call_method.4']
DEBUG 2022-02-08 17:11:36,407 dispatch pc=60, inst=LOAD_FAST(arg=4, lineno=627)
DEBUG 2022-02-08 17:11:36,407 stack ['$phi50.0']
DEBUG 2022-02-08 17:11:36,407 dispatch pc=62, inst=LOAD_FAST(arg=2, lineno=627)
DEBUG 2022-02-08 17:11:36,407 stack ['$phi50.0', '$v60.5']
DEBUG 2022-02-08 17:11:36,407 dispatch pc=64, inst=COMPARE_OP(arg=4, lineno=627)
DEBUG 2022-02-08 17:11:36,407 stack ['$phi50.0', '$v60.5', '$max_value62.6']
DEBUG 2022-02-08 17:11:36,407 dispatch pc=66, inst=POP_JUMP_IF_FALSE(arg=48, lineno=627)
DEBUG 2022-02-08 17:11:36,407 stack ['$phi50.0', '$64compare_op.7']
DEBUG 2022-02-08 17:11:36,407 end state. edges=[Edge(pc=68, stack=('$phi50.0',), blockstack=(), npush=0), Edge(pc=48, stack=('$phi50.0',), blockstack=(), npush=0)]
DEBUG 2022-02-08 17:11:36,407 pending: deque([State(pc_initial=68 nstack_initial=1), State(pc_initial=48 nstack_initial=1)])
DEBUG 2022-02-08 17:11:36,407 stack: ['$phi68.0']
DEBUG 2022-02-08 17:11:36,407 dispatch pc=68, inst=LOAD_FAST(arg=4, lineno=628)
DEBUG 2022-02-08 17:11:36,407 stack ['$phi68.0']
DEBUG 2022-02-08 17:11:36,407 dispatch pc=70, inst=STORE_FAST(arg=2, lineno=628)
DEBUG 2022-02-08 17:11:36,407 stack ['$phi68.0', '$v68.1']
DEBUG 2022-02-08 17:11:36,407 dispatch pc=72, inst=JUMP_ABSOLUTE(arg=48, lineno=628)
DEBUG 2022-02-08 17:11:36,407 stack ['$phi68.0']
DEBUG 2022-02-08 17:11:36,407 end state. edges=[Edge(pc=48, stack=('$phi68.0',), blockstack=(), npush=0)]
DEBUG 2022-02-08 17:11:36,407 pending: deque([State(pc_initial=48 nstack_initial=1), State(pc_initial=48 nstack_initial=1)])
DEBUG 2022-02-08 17:11:36,407 pending: deque([State(pc_initial=48 nstack_initial=1)])
DEBUG 2022-02-08 17:11:36,407 -------------------------Prune PHIs-------------------------
DEBUG 2022-02-08 17:11:36,407 Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=12 nstack_initial=0): set(),
             State(pc_initial=20 nstack_initial=0): set(),
             State(pc_initial=48 nstack_initial=1): {'$phi48.0'},
             State(pc_initial=50 nstack_initial=2): {'$phi50.1'},
             State(pc_initial=68 nstack_initial=1): set(),
             State(pc_initial=74 nstack_initial=0): set()})
DEBUG 2022-02-08 17:11:36,407 defmap: {'$phi48.0': State(pc_initial=20 nstack_initial=0),
 '$phi50.1': State(pc_initial=48 nstack_initial=1)}
DEBUG 2022-02-08 17:11:36,415 phismap: defaultdict(<class 'set'>,
            {'$phi48.0': {('$46get_iter.11',
                           State(pc_initial=20 nstack_initial=0)),
                          ('$phi50.0', State(pc_initial=50 nstack_initial=2)),
                          ('$phi68.0', State(pc_initial=68 nstack_initial=1))},
             '$phi50.0': {('$phi48.0', State(pc_initial=48 nstack_initial=1))},
             '$phi50.1': {('$48for_iter.2',
                           State(pc_initial=48 nstack_initial=1))},
             '$phi68.0': {('$phi50.0', State(pc_initial=50 nstack_initial=2))}})
DEBUG 2022-02-08 17:11:36,415 changing phismap: defaultdict(<class 'set'>,
            {'$phi48.0': {('$46get_iter.11',
                           State(pc_initial=20 nstack_initial=0)),
                          ('$phi48.0', State(pc_initial=48 nstack_initial=1))},
             '$phi50.0': {('$46get_iter.11',
                           State(pc_initial=20 nstack_initial=0))},
             '$phi50.1': {('$48for_iter.2',
                           State(pc_initial=48 nstack_initial=1))},
             '$phi68.0': {('$46get_iter.11',
                           State(pc_initial=20 nstack_initial=0))}})
DEBUG 2022-02-08 17:11:36,415 changing phismap: defaultdict(<class 'set'>,
            {'$phi48.0': {('$46get_iter.11',
                           State(pc_initial=20 nstack_initial=0))},
             '$phi50.0': {('$46get_iter.11',
                           State(pc_initial=20 nstack_initial=0))},
             '$phi50.1': {('$48for_iter.2',
                           State(pc_initial=48 nstack_initial=1))},
             '$phi68.0': {('$46get_iter.11',
                           State(pc_initial=20 nstack_initial=0))}})
DEBUG 2022-02-08 17:11:36,415 changing phismap: defaultdict(<class 'set'>,
            {'$phi48.0': {('$46get_iter.11',
                           State(pc_initial=20 nstack_initial=0))},
             '$phi50.0': {('$46get_iter.11',
                           State(pc_initial=20 nstack_initial=0))},
             '$phi50.1': {('$48for_iter.2',
                           State(pc_initial=48 nstack_initial=1))},
             '$phi68.0': {('$46get_iter.11',
                           State(pc_initial=20 nstack_initial=0))}})
DEBUG 2022-02-08 17:11:36,415 keep phismap: {'$phi48.0': {('$46get_iter.11', State(pc_initial=20 nstack_initial=0))},
 '$phi50.1': {('$48for_iter.2', State(pc_initial=48 nstack_initial=1))}}
DEBUG 2022-02-08 17:11:36,415 new_out: defaultdict(<class 'dict'>,
            {State(pc_initial=20 nstack_initial=0): {'$phi48.0': '$46get_iter.11'},
             State(pc_initial=48 nstack_initial=1): {'$phi50.1': '$48for_iter.2'}})
DEBUG 2022-02-08 17:11:36,415 ----------------------DONE Prune PHIs-----------------------
DEBUG 2022-02-08 17:11:36,415 block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$arry2.0'}), (4, {'item': '$arry2.0', 'res': '$4load_attr.1'}), (6, {'res': '$const6.2'}), (8, {'lhs': '$4load_attr.1', 'rhs': '$const6.2', 'res': '$8compare_op.3'}), (10, {'pred': '$8compare_op.3'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={12: (), 20: ()})
DEBUG 2022-02-08 17:11:36,415 block_infos State(pc_initial=12 nstack_initial=0):
AdaptBlockInfo(insts=((12, {'res': '$12load_global.0'}), (14, {'res': '$14load_deref.1'}), (16, {'func': '$12load_global.0', 'args': ['$14load_deref.1'], 'res': '$16call_function.2'}), (18, {'exc': '$16call_function.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG 2022-02-08 17:11:36,415 block_infos State(pc_initial=20 nstack_initial=0):
AdaptBlockInfo(insts=((20, {'res': '$20load_global.0'}), (22, {'item': '$20load_global.0', 'res': '$22load_method.1'}), (24, {'res': '$arry24.2'}), (26, {'func': '$22load_method.1', 'args': ['$arry24.2'], 'res': '$26call_method.3'}), (28, {'value': '$26call_method.3'}), (30, {'res': '$30load_global.4'}), (32, {'res': '$it32.5'}), (34, {'func': '$30load_global.4', 'args': ['$it32.5'], 'res': '$34call_function.6'}), (36, {'item': '$34call_function.6', 'res': '$36load_method.7'}), (38, {'res': '$const38.8'}), (40, {'func': '$36load_method.7', 'args': ['$const38.8'], 'res': '$40call_method.9'}), (42, {'value': '$40call_method.9'}), (44, {'res': '$it44.10'}), (46, {'value': '$it44.10', 'res': '$46get_iter.11'})), outgoing_phis={'$phi48.0': '$46get_iter.11'}, blockstack=(), active_try_block=None, outgoing_edgepushed={48: ('$46get_iter.11',)})
DEBUG 2022-02-08 17:11:36,417 block_infos State(pc_initial=48 nstack_initial=1):
AdaptBlockInfo(insts=((48, {'iterator': '$phi48.0', 'pair': '$48for_iter.1', 'indval': '$48for_iter.2', 'pred': '$48for_iter.3'}),), outgoing_phis={'$phi50.1': '$48for_iter.2'}, blockstack=(), active_try_block=None, outgoing_edgepushed={74: (), 50: ('$phi48.0', '$48for_iter.2')})
DEBUG 2022-02-08 17:11:36,417 block_infos State(pc_initial=50 nstack_initial=2):
AdaptBlockInfo(insts=((50, {'value': '$phi50.1'}), (52, {'res': '$view52.2'}), (54, {'item': '$view52.2', 'res': '$54load_method.3'}), (56, {'func': '$54load_method.3', 'args': [], 'res': '$56call_method.4'}), (58, {'value': '$56call_method.4'}), (60, {'res': '$v60.5'}), (62, {'res': '$max_value62.6'}), (64, {'lhs': '$v60.5', 'rhs': '$max_value62.6', 'res': '$64compare_op.7'}), (66, {'pred': '$64compare_op.7'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={68: ('$phi50.0',), 48: ('$phi50.0',)})
DEBUG 2022-02-08 17:11:36,417 block_infos State(pc_initial=68 nstack_initial=1):
AdaptBlockInfo(insts=((68, {'res': '$v68.1'}), (70, {'value': '$v68.1'}), (72, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={48: ('$phi68.0',)})
DEBUG 2022-02-08 17:11:36,417 block_infos State(pc_initial=74 nstack_initial=0):
AdaptBlockInfo(insts=((74, {'res': '$max_value74.0'}), (76, {'retval': '$max_value74.0', 'castval': '$76return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG 2022-02-08 17:11:36,417 label 0:
    arry = arg(0, name=arry)                 ['arry']
    $4load_attr.1 = getattr(value=arry, attr=size) ['$4load_attr.1', 'arry']
    $const6.2 = const(int, 0)                ['$const6.2']
    $8compare_op.3 = $4load_attr.1 == $const6.2 ['$4load_attr.1', '$8compare_op.3', '$const6.2']
    bool10 = global(bool: <class 'bool'>)    ['bool10']
    $10pred = call bool10($8compare_op.3, func=bool10, args=(Var($8compare_op.3, arraymath.py:619),), kws=(), vararg=None, target=None) ['$10pred', '$8compare_op.3', 'bool10']
    branch $10pred, 12, 20                   ['$10pred']
label 12:
    $12load_global.0 = global(ValueError: <class 'ValueError'>) ['$12load_global.0']
    $14load_deref.1 = freevar(MSG: zero-size array to reduction operation maximum which has no identity) ['$14load_deref.1']
    $16call_function.2 = call $12load_global.0($14load_deref.1, func=$12load_global.0, args=[Var($14load_deref.1, arraymath.py:620)], kws=(), vararg=None, target=None) ['$12load_global.0', '$14load_deref.1', '$16call_function.2']
    raise $16call_function.2                 ['$16call_function.2']
label 20:
    $20load_global.0 = global(np: <module 'numpy' from 'C:\\Users\\zl4821\\Anaconda3\\envs\\GBS\\lib\\site-packages\\numpy\\__init__.py'>) ['$20load_global.0']
    $22load_method.1 = getattr(value=$20load_global.0, attr=nditer) ['$20load_global.0', '$22load_method.1']
    it = call $22load_method.1(arry, func=$22load_method.1, args=[Var(arry, arraymath.py:619)], kws=(), vararg=None, target=None) ['$22load_method.1', 'arry', 'it']
    $30load_global.4 = global(next: <built-in function next>) ['$30load_global.4']
    $34call_function.6 = call $30load_global.4(it, func=$30load_global.4, args=[Var(it, arraymath.py:622)], kws=(), vararg=None, target=None) ['$30load_global.4', '$34call_function.6', 'it']
    $36load_method.7 = getattr(value=$34call_function.6, attr=take) ['$34call_function.6', '$36load_method.7']
    $const38.8 = const(int, 0)               ['$const38.8']
    max_value = call $36load_method.7($const38.8, func=$36load_method.7, args=[Var($const38.8, arraymath.py:623)], kws=(), vararg=None, target=None) ['$36load_method.7', '$const38.8', 'max_value']
    $46get_iter.11 = getiter(value=it)       ['$46get_iter.11', 'it']
    $phi48.0 = $46get_iter.11                ['$46get_iter.11', '$phi48.0']
    jump 48                                  []
label 48:
    $48for_iter.1 = iternext(value=$phi48.0) ['$48for_iter.1', '$phi48.0']
    $48for_iter.2 = pair_first(value=$48for_iter.1) ['$48for_iter.1', '$48for_iter.2']
    $48for_iter.3 = pair_second(value=$48for_iter.1) ['$48for_iter.1', '$48for_iter.3']
    $phi50.1 = $48for_iter.2                 ['$48for_iter.2', '$phi50.1']
    branch $48for_iter.3, 50, 74             ['$48for_iter.3']
label 50:
    view = $phi50.1                          ['$phi50.1', 'view']
    $54load_method.3 = getattr(value=view, attr=item) ['$54load_method.3', 'view']
    v = call $54load_method.3(func=$54load_method.3, args=[], kws=(), vararg=None, target=None) ['$54load_method.3', 'v']
    $64compare_op.7 = v > max_value          ['$64compare_op.7', 'max_value', 'v']
    bool66 = global(bool: <class 'bool'>)    ['bool66']
    $66pred = call bool66($64compare_op.7, func=bool66, args=(Var($64compare_op.7, arraymath.py:627),), kws=(), vararg=None, target=None) ['$64compare_op.7', '$66pred', 'bool66']
    branch $66pred, 68, 48                   ['$66pred']
label 68:
    max_value = v                            ['max_value', 'v']
    jump 48                                  []
label 74:
    $76return_value.1 = cast(value=max_value) ['$76return_value.1', 'max_value']
    return $76return_value.1                 ['$76return_value.1']

DEBUG 2022-02-08 17:11:36,417 ==== SSA block analysis pass on 0
DEBUG 2022-02-08 17:11:36,417 Running <numba.core.ssa._GatherDefsHandler object at 0x000001E9F8018CA0>
DEBUG 2022-02-08 17:11:36,417 on stmt: arry = arg(0, name=arry)
DEBUG 2022-02-08 17:11:36,417 on stmt: $4load_attr.1 = getattr(value=arry, attr=size)
DEBUG 2022-02-08 17:11:36,417 on stmt: $const6.2 = const(int, 0)
DEBUG 2022-02-08 17:11:36,417 on stmt: $8compare_op.3 = $4load_attr.1 == $const6.2
DEBUG 2022-02-08 17:11:36,417 on stmt: bool10 = global(bool: <class 'bool'>)
DEBUG 2022-02-08 17:11:36,417 on stmt: $10pred = call bool10($8compare_op.3, func=bool10, args=(Var($8compare_op.3, arraymath.py:619),), kws=(), vararg=None, target=None)
DEBUG 2022-02-08 17:11:36,417 on stmt: branch $10pred, 12, 20
DEBUG 2022-02-08 17:11:36,417 ==== SSA block analysis pass on 12
DEBUG 2022-02-08 17:11:36,417 Running <numba.core.ssa._GatherDefsHandler object at 0x000001E9F8018CA0>
DEBUG 2022-02-08 17:11:36,417 on stmt: $12load_global.0 = global(ValueError: <class 'ValueError'>)
DEBUG 2022-02-08 17:11:36,417 on stmt: $14load_deref.1 = freevar(MSG: zero-size array to reduction operation maximum which has no identity)
DEBUG 2022-02-08 17:11:36,417 on stmt: $16call_function.2 = call $12load_global.0($14load_deref.1, func=$12load_global.0, args=[Var($14load_deref.1, arraymath.py:620)], kws=(), vararg=None, target=None)
DEBUG 2022-02-08 17:11:36,417 on stmt: <static> raise <class 'ValueError'>('zero-size array to reduction operation maximum which has no identity')
DEBUG 2022-02-08 17:11:36,417 ==== SSA block analysis pass on 20
DEBUG 2022-02-08 17:11:36,417 Running <numba.core.ssa._GatherDefsHandler object at 0x000001E9F8018CA0>
DEBUG 2022-02-08 17:11:36,417 on stmt: $20load_global.0 = global(np: <module 'numpy' from 'C:\\Users\\zl4821\\Anaconda3\\envs\\GBS\\lib\\site-packages\\numpy\\__init__.py'>)
DEBUG 2022-02-08 17:11:36,417 on stmt: $22load_method.1 = getattr(value=$20load_global.0, attr=nditer)
DEBUG 2022-02-08 17:11:36,417 on stmt: it = call $22load_method.1(arry, func=$22load_method.1, args=[Var(arry, arraymath.py:619)], kws=(), vararg=None, target=None)
DEBUG 2022-02-08 17:11:36,417 on stmt: $30load_global.4 = global(next: <built-in function next>)
DEBUG 2022-02-08 17:11:36,417 on stmt: $34call_function.6 = call $30load_global.4(it, func=$30load_global.4, args=[Var(it, arraymath.py:622)], kws=(), vararg=None, target=None)
DEBUG 2022-02-08 17:11:36,417 on stmt: $36load_method.7 = getattr(value=$34call_function.6, attr=take)
DEBUG 2022-02-08 17:11:36,425 on stmt: $const38.8 = const(int, 0)
DEBUG 2022-02-08 17:11:36,425 on stmt: max_value = call $36load_method.7($const38.8, func=$36load_method.7, args=[Var($const38.8, arraymath.py:623)], kws=(), vararg=None, target=None)
DEBUG 2022-02-08 17:11:36,425 on stmt: $46get_iter.11 = getiter(value=it)
DEBUG 2022-02-08 17:11:36,425 on stmt: $phi48.0 = $46get_iter.11
DEBUG 2022-02-08 17:11:36,425 on stmt: jump 48
DEBUG 2022-02-08 17:11:36,425 ==== SSA block analysis pass on 48
DEBUG 2022-02-08 17:11:36,425 Running <numba.core.ssa._GatherDefsHandler object at 0x000001E9F8018CA0>
DEBUG 2022-02-08 17:11:36,425 on stmt: $48for_iter.1 = iternext(value=$phi48.0)
DEBUG 2022-02-08 17:11:36,425 on stmt: $48for_iter.2 = pair_first(value=$48for_iter.1)
DEBUG 2022-02-08 17:11:36,425 on stmt: $48for_iter.3 = pair_second(value=$48for_iter.1)
DEBUG 2022-02-08 17:11:36,425 on stmt: $phi50.1 = $48for_iter.2
DEBUG 2022-02-08 17:11:36,425 on stmt: branch $48for_iter.3, 50, 74
DEBUG 2022-02-08 17:11:36,425 ==== SSA block analysis pass on 50
DEBUG 2022-02-08 17:11:36,425 Running <numba.core.ssa._GatherDefsHandler object at 0x000001E9F8018CA0>
DEBUG 2022-02-08 17:11:36,425 on stmt: view = $phi50.1
DEBUG 2022-02-08 17:11:36,425 on stmt: $54load_method.3 = getattr(value=view, attr=item)
DEBUG 2022-02-08 17:11:36,425 on stmt: v = call $54load_method.3(func=$54load_method.3, args=[], kws=(), vararg=None, target=None)
DEBUG 2022-02-08 17:11:36,425 on stmt: $64compare_op.7 = v > max_value
DEBUG 2022-02-08 17:11:36,427 on stmt: bool66 = global(bool: <class 'bool'>)
DEBUG 2022-02-08 17:11:36,427 on stmt: $66pred = call bool66($64compare_op.7, func=bool66, args=(Var($64compare_op.7, arraymath.py:627),), kws=(), vararg=None, target=None)
DEBUG 2022-02-08 17:11:36,427 on stmt: branch $66pred, 68, 75
DEBUG 2022-02-08 17:11:36,427 ==== SSA block analysis pass on 68
DEBUG 2022-02-08 17:11:36,427 Running <numba.core.ssa._GatherDefsHandler object at 0x000001E9F8018CA0>
DEBUG 2022-02-08 17:11:36,427 on stmt: max_value = v
DEBUG 2022-02-08 17:11:36,427 on stmt: jump 75
DEBUG 2022-02-08 17:11:36,427 ==== SSA block analysis pass on 74
DEBUG 2022-02-08 17:11:36,427 Running <numba.core.ssa._GatherDefsHandler object at 0x000001E9F8018CA0>
DEBUG 2022-02-08 17:11:36,427 on stmt: $76return_value.1 = cast(value=max_value)
DEBUG 2022-02-08 17:11:36,427 on stmt: return $76return_value.1
DEBUG 2022-02-08 17:11:36,427 ==== SSA block analysis pass on 75
DEBUG 2022-02-08 17:11:36,427 Running <numba.core.ssa._GatherDefsHandler object at 0x000001E9F8018CA0>
DEBUG 2022-02-08 17:11:36,427 on stmt: jump 48
DEBUG 2022-02-08 17:11:36,427 defs defaultdict(<class 'list'>,
            {'$10pred': [<numba.core.ir.Assign object at 0x000001E9F800D040>],
             '$12load_global.0': [<numba.core.ir.Assign object at 0x000001E9F800D280>],
             '$14load_deref.1': [<numba.core.ir.Assign object at 0x000001E9F800D400>],
             '$16call_function.2': [<numba.core.ir.Assign object at 0x000001E9F800D5E0>],
             '$20load_global.0': [<numba.core.ir.Assign object at 0x000001E9F800D880>],
             '$22load_method.1': [<numba.core.ir.Assign object at 0x000001E9F800DA00>],
             '$30load_global.4': [<numba.core.ir.Assign object at 0x000001E9F800DF40>],
             '$34call_function.6': [<numba.core.ir.Assign object at 0x000001E9F8014280>],
             '$36load_method.7': [<numba.core.ir.Assign object at 0x000001E9F80143A0>],
             '$46get_iter.11': [<numba.core.ir.Assign object at 0x000001E9F8014A60>],
             '$48for_iter.1': [<numba.core.ir.Assign object at 0x000001E9F8014C10>],
             '$48for_iter.2': [<numba.core.ir.Assign object at 0x000001E9F8014D30>],
             '$48for_iter.3': [<numba.core.ir.Assign object at 0x000001E9F8014E50>],
             '$4load_attr.1': [<numba.core.ir.Assign object at 0x000001E9F8004C70>],
             '$54load_method.3': [<numba.core.ir.Assign object at 0x000001E9F8016400>],
             '$64compare_op.7': [<numba.core.ir.Assign object at 0x000001E9F8016A90>],
             '$66pred': [<numba.core.ir.Assign object at 0x000001E9F8016D00>],
             '$76return_value.1': [<numba.core.ir.Assign object at 0x000001E9F8018280>],
             '$8compare_op.3': [<numba.core.ir.Assign object at 0x000001E9F8004490>],
             '$const38.8': [<numba.core.ir.Assign object at 0x000001E9F8014520>],
             '$const6.2': [<numba.core.ir.Assign object at 0x000001E9F8004130>],
             '$phi48.0': [<numba.core.ir.Assign object at 0x000001E9F800DBB0>],
             '$phi50.1': [<numba.core.ir.Assign object at 0x000001E9F8014B50>],
             'arry': [<numba.core.ir.Assign object at 0x000001E9F8004F10>],
             'bool10': [<numba.core.ir.Assign object at 0x000001E9F8004340>],
             'bool66': [<numba.core.ir.Assign object at 0x000001E9F8016BE0>],
             'it': [<numba.core.ir.Assign object at 0x000001E9F800DD30>],
             'max_value': [<numba.core.ir.Assign object at 0x000001E9F8014730>,
                           <numba.core.ir.Assign object at 0x000001E9F8016EB0>],
             'v': [<numba.core.ir.Assign object at 0x000001E9F8016610>],
             'view': [<numba.core.ir.Assign object at 0x000001E9F8016160>]})
DEBUG 2022-02-08 17:11:36,427 SSA violators {'max_value'}
DEBUG 2022-02-08 17:11:36,427 Fix SSA violator on var max_value
DEBUG 2022-02-08 17:11:36,427 ==== SSA block rewrite pass on 0
DEBUG 2022-02-08 17:11:36,427 Running <numba.core.ssa._FreshVarHandler object at 0x000001E9F80047C0>
DEBUG 2022-02-08 17:11:36,427 on stmt: arry = arg(0, name=arry)
DEBUG 2022-02-08 17:11:36,427 on stmt: $4load_attr.1 = getattr(value=arry, attr=size)
DEBUG 2022-02-08 17:11:36,427 on stmt: $const6.2 = const(int, 0)
DEBUG 2022-02-08 17:11:36,427 on stmt: $8compare_op.3 = $4load_attr.1 == $const6.2
DEBUG 2022-02-08 17:11:36,427 on stmt: bool10 = global(bool: <class 'bool'>)
DEBUG 2022-02-08 17:11:36,427 on stmt: $10pred = call bool10($8compare_op.3, func=bool10, args=(Var($8compare_op.3, arraymath.py:619),), kws=(), vararg=None, target=None)
DEBUG 2022-02-08 17:11:36,427 on stmt: branch $10pred, 12, 20
DEBUG 2022-02-08 17:11:36,427 ==== SSA block rewrite pass on 12
DEBUG 2022-02-08 17:11:36,427 Running <numba.core.ssa._FreshVarHandler object at 0x000001E9F80047C0>
DEBUG 2022-02-08 17:11:36,427 on stmt: $12load_global.0 = global(ValueError: <class 'ValueError'>)
DEBUG 2022-02-08 17:11:36,427 on stmt: $14load_deref.1 = freevar(MSG: zero-size array to reduction operation maximum which has no identity)
DEBUG 2022-02-08 17:11:36,427 on stmt: $16call_function.2 = call $12load_global.0($14load_deref.1, func=$12load_global.0, args=[Var($14load_deref.1, arraymath.py:620)], kws=(), vararg=None, target=None)
DEBUG 2022-02-08 17:11:36,427 on stmt: <static> raise <class 'ValueError'>('zero-size array to reduction operation maximum which has no identity')
DEBUG 2022-02-08 17:11:36,427 ==== SSA block rewrite pass on 20
DEBUG 2022-02-08 17:11:36,427 Running <numba.core.ssa._FreshVarHandler object at 0x000001E9F80047C0>
DEBUG 2022-02-08 17:11:36,427 on stmt: $20load_global.0 = global(np: <module 'numpy' from 'C:\\Users\\zl4821\\Anaconda3\\envs\\GBS\\lib\\site-packages\\numpy\\__init__.py'>)
DEBUG 2022-02-08 17:11:36,427 on stmt: $22load_method.1 = getattr(value=$20load_global.0, attr=nditer)
DEBUG 2022-02-08 17:11:36,427 on stmt: it = call $22load_method.1(arry, func=$22load_method.1, args=[Var(arry, arraymath.py:619)], kws=(), vararg=None, target=None)
DEBUG 2022-02-08 17:11:36,427 on stmt: $30load_global.4 = global(next: <built-in function next>)
DEBUG 2022-02-08 17:11:36,427 on stmt: $34call_function.6 = call $30load_global.4(it, func=$30load_global.4, args=[Var(it, arraymath.py:622)], kws=(), vararg=None, target=None)
DEBUG 2022-02-08 17:11:36,427 on stmt: $36load_method.7 = getattr(value=$34call_function.6, attr=take)
DEBUG 2022-02-08 17:11:36,427 on stmt: $const38.8 = const(int, 0)
DEBUG 2022-02-08 17:11:36,427 on stmt: max_value = call $36load_method.7($const38.8, func=$36load_method.7, args=[Var($const38.8, arraymath.py:623)], kws=(), vararg=None, target=None)
DEBUG 2022-02-08 17:11:36,427 first assign: max_value
DEBUG 2022-02-08 17:11:36,427 replaced with: max_value = call $36load_method.7($const38.8, func=$36load_method.7, args=[Var($const38.8, arraymath.py:623)], kws=(), vararg=None, target=None)
DEBUG 2022-02-08 17:11:36,427 on stmt: $46get_iter.11 = getiter(value=it)
DEBUG 2022-02-08 17:11:36,427 on stmt: $phi48.0 = $46get_iter.11
DEBUG 2022-02-08 17:11:36,427 on stmt: jump 48
DEBUG 2022-02-08 17:11:36,427 ==== SSA block rewrite pass on 48
DEBUG 2022-02-08 17:11:36,427 Running <numba.core.ssa._FreshVarHandler object at 0x000001E9F80047C0>
DEBUG 2022-02-08 17:11:36,427 on stmt: $48for_iter.1 = iternext(value=$phi48.0)
DEBUG 2022-02-08 17:11:36,427 on stmt: $48for_iter.2 = pair_first(value=$48for_iter.1)
DEBUG 2022-02-08 17:11:36,427 on stmt: $48for_iter.3 = pair_second(value=$48for_iter.1)
DEBUG 2022-02-08 17:11:36,427 on stmt: $phi50.1 = $48for_iter.2
DEBUG 2022-02-08 17:11:36,427 on stmt: branch $48for_iter.3, 50, 74
DEBUG 2022-02-08 17:11:36,427 ==== SSA block rewrite pass on 50
DEBUG 2022-02-08 17:11:36,427 Running <numba.core.ssa._FreshVarHandler object at 0x000001E9F80047C0>
DEBUG 2022-02-08 17:11:36,427 on stmt: view = $phi50.1
DEBUG 2022-02-08 17:11:36,427 on stmt: $54load_method.3 = getattr(value=view, attr=item)
DEBUG 2022-02-08 17:11:36,427 on stmt: v = call $54load_method.3(func=$54load_method.3, args=[], kws=(), vararg=None, target=None)
DEBUG 2022-02-08 17:11:36,427 on stmt: $64compare_op.7 = v > max_value
DEBUG 2022-02-08 17:11:36,427 on stmt: bool66 = global(bool: <class 'bool'>)
DEBUG 2022-02-08 17:11:36,427 on stmt: $66pred = call bool66($64compare_op.7, func=bool66, args=(Var($64compare_op.7, arraymath.py:627),), kws=(), vararg=None, target=None)
DEBUG 2022-02-08 17:11:36,427 on stmt: branch $66pred, 68, 75
DEBUG 2022-02-08 17:11:36,427 ==== SSA block rewrite pass on 68
DEBUG 2022-02-08 17:11:36,427 Running <numba.core.ssa._FreshVarHandler object at 0x000001E9F80047C0>
DEBUG 2022-02-08 17:11:36,427 on stmt: max_value = v
DEBUG 2022-02-08 17:11:36,427 replaced with: max_value.1 = v
DEBUG 2022-02-08 17:11:36,427 on stmt: jump 75
DEBUG 2022-02-08 17:11:36,427 ==== SSA block rewrite pass on 74
DEBUG 2022-02-08 17:11:36,427 Running <numba.core.ssa._FreshVarHandler object at 0x000001E9F80047C0>
DEBUG 2022-02-08 17:11:36,427 on stmt: $76return_value.1 = cast(value=max_value)
DEBUG 2022-02-08 17:11:36,427 on stmt: return $76return_value.1
DEBUG 2022-02-08 17:11:36,427 ==== SSA block rewrite pass on 75
DEBUG 2022-02-08 17:11:36,427 Running <numba.core.ssa._FreshVarHandler object at 0x000001E9F80047C0>
DEBUG 2022-02-08 17:11:36,427 on stmt: jump 48
DEBUG 2022-02-08 17:11:36,427 Replaced assignments: defaultdict(<class 'list'>,
            {20: [<numba.core.ir.Assign object at 0x000001E9F8018BE0>],
             68: [<numba.core.ir.Assign object at 0x000001E9F8018A00>]})
DEBUG 2022-02-08 17:11:36,427 ==== SSA block rewrite pass on 0
DEBUG 2022-02-08 17:11:36,427 Running <numba.core.ssa._FixSSAVars object at 0x000001E9F80047C0>
DEBUG 2022-02-08 17:11:36,427 on stmt: arry = arg(0, name=arry)
DEBUG 2022-02-08 17:11:36,427 on stmt: $4load_attr.1 = getattr(value=arry, attr=size)
DEBUG 2022-02-08 17:11:36,427 on stmt: $const6.2 = const(int, 0)
DEBUG 2022-02-08 17:11:36,427 on stmt: $8compare_op.3 = $4load_attr.1 == $const6.2
DEBUG 2022-02-08 17:11:36,435 on stmt: bool10 = global(bool: <class 'bool'>)
DEBUG 2022-02-08 17:11:36,435 on stmt: $10pred = call bool10($8compare_op.3, func=bool10, args=(Var($8compare_op.3, arraymath.py:619),), kws=(), vararg=None, target=None)
DEBUG 2022-02-08 17:11:36,435 on stmt: branch $10pred, 12, 20
DEBUG 2022-02-08 17:11:36,435 ==== SSA block rewrite pass on 12
DEBUG 2022-02-08 17:11:36,435 Running <numba.core.ssa._FixSSAVars object at 0x000001E9F80047C0>
DEBUG 2022-02-08 17:11:36,435 on stmt: $12load_global.0 = global(ValueError: <class 'ValueError'>)
DEBUG 2022-02-08 17:11:36,435 on stmt: $14load_deref.1 = freevar(MSG: zero-size array to reduction operation maximum which has no identity)
DEBUG 2022-02-08 17:11:36,435 on stmt: $16call_function.2 = call $12load_global.0($14load_deref.1, func=$12load_global.0, args=[Var($14load_deref.1, arraymath.py:620)], kws=(), vararg=None, target=None)
DEBUG 2022-02-08 17:11:36,435 on stmt: <static> raise <class 'ValueError'>('zero-size array to reduction operation maximum which has no identity')
DEBUG 2022-02-08 17:11:36,435 ==== SSA block rewrite pass on 20
DEBUG 2022-02-08 17:11:36,435 Running <numba.core.ssa._FixSSAVars object at 0x000001E9F80047C0>
DEBUG 2022-02-08 17:11:36,435 on stmt: $20load_global.0 = global(np: <module 'numpy' from 'C:\\Users\\zl4821\\Anaconda3\\envs\\GBS\\lib\\site-packages\\numpy\\__init__.py'>)
DEBUG 2022-02-08 17:11:36,435 on stmt: $22load_method.1 = getattr(value=$20load_global.0, attr=nditer)
DEBUG 2022-02-08 17:11:36,435 on stmt: it = call $22load_method.1(arry, func=$22load_method.1, args=[Var(arry, arraymath.py:619)], kws=(), vararg=None, target=None)
DEBUG 2022-02-08 17:11:36,435 on stmt: $30load_global.4 = global(next: <built-in function next>)
DEBUG 2022-02-08 17:11:36,435 on stmt: $34call_function.6 = call $30load_global.4(it, func=$30load_global.4, args=[Var(it, arraymath.py:622)], kws=(), vararg=None, target=None)
DEBUG 2022-02-08 17:11:36,435 on stmt: $36load_method.7 = getattr(value=$34call_function.6, attr=take)
DEBUG 2022-02-08 17:11:36,435 on stmt: $const38.8 = const(int, 0)
DEBUG 2022-02-08 17:11:36,435 on stmt: max_value = call $36load_method.7($const38.8, func=$36load_method.7, args=[Var($const38.8, arraymath.py:623)], kws=(), vararg=None, target=None)
DEBUG 2022-02-08 17:11:36,435 on stmt: $46get_iter.11 = getiter(value=it)
DEBUG 2022-02-08 17:11:36,435 on stmt: $phi48.0 = $46get_iter.11
DEBUG 2022-02-08 17:11:36,437 on stmt: jump 48
DEBUG 2022-02-08 17:11:36,437 ==== SSA block rewrite pass on 48
DEBUG 2022-02-08 17:11:36,437 Running <numba.core.ssa._FixSSAVars object at 0x000001E9F80047C0>
DEBUG 2022-02-08 17:11:36,437 on stmt: $48for_iter.1 = iternext(value=$phi48.0)
DEBUG 2022-02-08 17:11:36,437 on stmt: $48for_iter.2 = pair_first(value=$48for_iter.1)
DEBUG 2022-02-08 17:11:36,437 on stmt: $48for_iter.3 = pair_second(value=$48for_iter.1)
DEBUG 2022-02-08 17:11:36,437 on stmt: $phi50.1 = $48for_iter.2
DEBUG 2022-02-08 17:11:36,437 on stmt: branch $48for_iter.3, 50, 74
DEBUG 2022-02-08 17:11:36,437 ==== SSA block rewrite pass on 50
DEBUG 2022-02-08 17:11:36,437 Running <numba.core.ssa._FixSSAVars object at 0x000001E9F80047C0>
DEBUG 2022-02-08 17:11:36,437 on stmt: view = $phi50.1
DEBUG 2022-02-08 17:11:36,437 on stmt: $54load_method.3 = getattr(value=view, attr=item)
DEBUG 2022-02-08 17:11:36,437 on stmt: v = call $54load_method.3(func=$54load_method.3, args=[], kws=(), vararg=None, target=None)
DEBUG 2022-02-08 17:11:36,437 on stmt: $64compare_op.7 = v > max_value
DEBUG 2022-02-08 17:11:36,437 find_def var='max_value' stmt=$64compare_op.7 = v > max_value
DEBUG 2022-02-08 17:11:36,437 find_def_from_top label 50
DEBUG 2022-02-08 17:11:36,437 idom 48 from label 50
DEBUG 2022-02-08 17:11:36,437 find_def_from_bottom label 48
DEBUG 2022-02-08 17:11:36,437 find_def_from_top label 48
DEBUG 2022-02-08 17:11:36,437 insert phi node max_value.2 = phi(incoming_values=[], incoming_blocks=[]) at 48
DEBUG 2022-02-08 17:11:36,437 find_def_from_bottom label 75
DEBUG 2022-02-08 17:11:36,437 find_def_from_top label 75
DEBUG 2022-02-08 17:11:36,437 insert phi node max_value.3 = phi(incoming_values=[], incoming_blocks=[]) at 75
DEBUG 2022-02-08 17:11:36,437 find_def_from_bottom label 50
DEBUG 2022-02-08 17:11:36,437 find_def_from_top label 50
DEBUG 2022-02-08 17:11:36,437 idom 48 from label 50
DEBUG 2022-02-08 17:11:36,437 find_def_from_bottom label 48
DEBUG 2022-02-08 17:11:36,437 incoming_def max_value.2 = phi(incoming_values=[], incoming_blocks=[])
DEBUG 2022-02-08 17:11:36,437 find_def_from_bottom label 68
DEBUG 2022-02-08 17:11:36,437 incoming_def max_value.1 = v
DEBUG 2022-02-08 17:11:36,437 incoming_def max_value.3 = phi(incoming_values=[Var(max_value.2, arraymath.py:625), Var(max_value.1, arraymath.py:628)], incoming_blocks=[50, 68])
DEBUG 2022-02-08 17:11:36,437 find_def_from_bottom label 20
DEBUG 2022-02-08 17:11:36,437 incoming_def max_value = call $36load_method.7($const38.8, func=$36load_method.7, args=[Var($const38.8, arraymath.py:623)], kws=(), vararg=None, target=None)
DEBUG 2022-02-08 17:11:36,437 replaced with: $64compare_op.7 = v > max_value.2
DEBUG 2022-02-08 17:11:36,437 on stmt: bool66 = global(bool: <class 'bool'>)
DEBUG 2022-02-08 17:11:36,437 on stmt: $66pred = call bool66($64compare_op.7, func=bool66, args=(Var($64compare_op.7, arraymath.py:627),), kws=(), vararg=None, target=None)
DEBUG 2022-02-08 17:11:36,437 on stmt: branch $66pred, 68, 75
DEBUG 2022-02-08 17:11:36,437 ==== SSA block rewrite pass on 68
DEBUG 2022-02-08 17:11:36,437 Running <numba.core.ssa._FixSSAVars object at 0x000001E9F80047C0>
DEBUG 2022-02-08 17:11:36,437 on stmt: max_value.1 = v
DEBUG 2022-02-08 17:11:36,437 on stmt: jump 75
DEBUG 2022-02-08 17:11:36,437 ==== SSA block rewrite pass on 74
DEBUG 2022-02-08 17:11:36,437 Running <numba.core.ssa._FixSSAVars object at 0x000001E9F80047C0>
DEBUG 2022-02-08 17:11:36,437 on stmt: $76return_value.1 = cast(value=max_value)
DEBUG 2022-02-08 17:11:36,437 find_def var='max_value' stmt=$76return_value.1 = cast(value=max_value)
DEBUG 2022-02-08 17:11:36,437 find_def_from_top label 74
DEBUG 2022-02-08 17:11:36,437 idom 48 from label 74
DEBUG 2022-02-08 17:11:36,437 find_def_from_bottom label 48
DEBUG 2022-02-08 17:11:36,437 replaced with: $76return_value.1 = cast(value=max_value.2)
DEBUG 2022-02-08 17:11:36,437 on stmt: return $76return_value.1
DEBUG 2022-02-08 17:11:36,437 ==== SSA block rewrite pass on 75
DEBUG 2022-02-08 17:11:36,437 Running <numba.core.ssa._FixSSAVars object at 0x000001E9F80047C0>
DEBUG 2022-02-08 17:11:36,437 on stmt: jump 48
DEBUG 2022-02-08 17:11:36,466 bytecode dump:
>          0	NOP(arg=None, lineno=3907)
           2	LOAD_FAST(arg=1, lineno=3907)
           4	LOAD_FAST(arg=0, lineno=3907)
           6	LOAD_ATTR(arg=0, lineno=3907)
           8	LOAD_CONST(arg=1, lineno=3907)
          10	BINARY_SUBTRACT(arg=None, lineno=3907)
          12	COMPARE_OP(arg=4, lineno=3907)
          14	POP_JUMP_IF_TRUE(arg=28, lineno=3907)
          16	LOAD_FAST(arg=1, lineno=3907)
          18	LOAD_FAST(arg=0, lineno=3907)
          20	LOAD_ATTR(arg=0, lineno=3907)
          22	UNARY_NEGATIVE(arg=None, lineno=3907)
          24	COMPARE_OP(arg=0, lineno=3907)
          26	POP_JUMP_IF_FALSE(arg=36, lineno=3907)
>         28	LOAD_GLOBAL(arg=1, lineno=3908)
          30	LOAD_CONST(arg=2, lineno=3908)
          32	CALL_FUNCTION(arg=1, lineno=3908)
          34	RAISE_VARARGS(arg=1, lineno=3908)
>         36	LOAD_FAST(arg=0, lineno=3909)
          38	LOAD_METHOD(arg=2, lineno=3909)
          40	CALL_METHOD(arg=0, lineno=3909)
          42	LOAD_FAST(arg=1, lineno=3909)
          44	BINARY_SUBSCR(arg=None, lineno=3909)
          46	RETURN_VALUE(arg=None, lineno=3909)
DEBUG 2022-02-08 17:11:36,466 pending: deque([State(pc_initial=0 nstack_initial=0)])
DEBUG 2022-02-08 17:11:36,468 stack: []
DEBUG 2022-02-08 17:11:36,468 dispatch pc=0, inst=NOP(arg=None, lineno=3907)
DEBUG 2022-02-08 17:11:36,468 stack []
DEBUG 2022-02-08 17:11:36,468 dispatch pc=2, inst=LOAD_FAST(arg=1, lineno=3907)
DEBUG 2022-02-08 17:11:36,468 stack []
DEBUG 2022-02-08 17:11:36,468 dispatch pc=4, inst=LOAD_FAST(arg=0, lineno=3907)
DEBUG 2022-02-08 17:11:36,468 stack ['$indices2.0']
DEBUG 2022-02-08 17:11:36,468 dispatch pc=6, inst=LOAD_ATTR(arg=0, lineno=3907)
DEBUG 2022-02-08 17:11:36,468 stack ['$indices2.0', '$a4.1']
DEBUG 2022-02-08 17:11:36,468 dispatch pc=8, inst=LOAD_CONST(arg=1, lineno=3907)
DEBUG 2022-02-08 17:11:36,468 stack ['$indices2.0', '$6load_attr.2']
DEBUG 2022-02-08 17:11:36,468 dispatch pc=10, inst=BINARY_SUBTRACT(arg=None, lineno=3907)
DEBUG 2022-02-08 17:11:36,468 stack ['$indices2.0', '$6load_attr.2', '$const8.3']
DEBUG 2022-02-08 17:11:36,468 dispatch pc=12, inst=COMPARE_OP(arg=4, lineno=3907)
DEBUG 2022-02-08 17:11:36,468 stack ['$indices2.0', '$10binary_subtract.4']
DEBUG 2022-02-08 17:11:36,468 dispatch pc=14, inst=POP_JUMP_IF_TRUE(arg=28, lineno=3907)
DEBUG 2022-02-08 17:11:36,468 stack ['$12compare_op.5']
DEBUG 2022-02-08 17:11:36,468 end state. edges=[Edge(pc=16, stack=(), blockstack=(), npush=0), Edge(pc=28, stack=(), blockstack=(), npush=0)]
DEBUG 2022-02-08 17:11:36,468 pending: deque([State(pc_initial=16 nstack_initial=0), State(pc_initial=28 nstack_initial=0)])
DEBUG 2022-02-08 17:11:36,468 stack: []
DEBUG 2022-02-08 17:11:36,468 dispatch pc=16, inst=LOAD_FAST(arg=1, lineno=3907)
DEBUG 2022-02-08 17:11:36,468 stack []
DEBUG 2022-02-08 17:11:36,468 dispatch pc=18, inst=LOAD_FAST(arg=0, lineno=3907)
DEBUG 2022-02-08 17:11:36,468 stack ['$indices16.0']
DEBUG 2022-02-08 17:11:36,468 dispatch pc=20, inst=LOAD_ATTR(arg=0, lineno=3907)
DEBUG 2022-02-08 17:11:36,468 stack ['$indices16.0', '$a18.1']
DEBUG 2022-02-08 17:11:36,468 dispatch pc=22, inst=UNARY_NEGATIVE(arg=None, lineno=3907)
DEBUG 2022-02-08 17:11:36,468 stack ['$indices16.0', '$20load_attr.2']
DEBUG 2022-02-08 17:11:36,468 dispatch pc=24, inst=COMPARE_OP(arg=0, lineno=3907)
DEBUG 2022-02-08 17:11:36,468 stack ['$indices16.0', '$22unary_negative.3']
DEBUG 2022-02-08 17:11:36,468 dispatch pc=26, inst=POP_JUMP_IF_FALSE(arg=36, lineno=3907)
DEBUG 2022-02-08 17:11:36,468 stack ['$24compare_op.4']
DEBUG 2022-02-08 17:11:36,468 end state. edges=[Edge(pc=28, stack=(), blockstack=(), npush=0), Edge(pc=36, stack=(), blockstack=(), npush=0)]
DEBUG 2022-02-08 17:11:36,468 pending: deque([State(pc_initial=28 nstack_initial=0), State(pc_initial=28 nstack_initial=0), State(pc_initial=36 nstack_initial=0)])
DEBUG 2022-02-08 17:11:36,468 stack: []
DEBUG 2022-02-08 17:11:36,468 dispatch pc=28, inst=LOAD_GLOBAL(arg=1, lineno=3908)
DEBUG 2022-02-08 17:11:36,468 stack []
DEBUG 2022-02-08 17:11:36,468 dispatch pc=30, inst=LOAD_CONST(arg=2, lineno=3908)
DEBUG 2022-02-08 17:11:36,468 stack ['$28load_global.0']
DEBUG 2022-02-08 17:11:36,468 dispatch pc=32, inst=CALL_FUNCTION(arg=1, lineno=3908)
DEBUG 2022-02-08 17:11:36,468 stack ['$28load_global.0', '$const30.1']
DEBUG 2022-02-08 17:11:36,468 dispatch pc=34, inst=RAISE_VARARGS(arg=1, lineno=3908)
DEBUG 2022-02-08 17:11:36,468 stack ['$32call_function.2']
DEBUG 2022-02-08 17:11:36,468 end state. edges=[]
DEBUG 2022-02-08 17:11:36,468 pending: deque([State(pc_initial=28 nstack_initial=0), State(pc_initial=36 nstack_initial=0)])
DEBUG 2022-02-08 17:11:36,468 pending: deque([State(pc_initial=36 nstack_initial=0)])
DEBUG 2022-02-08 17:11:36,468 stack: []
DEBUG 2022-02-08 17:11:36,468 dispatch pc=36, inst=LOAD_FAST(arg=0, lineno=3909)
DEBUG 2022-02-08 17:11:36,468 stack []
DEBUG 2022-02-08 17:11:36,468 dispatch pc=38, inst=LOAD_METHOD(arg=2, lineno=3909)
DEBUG 2022-02-08 17:11:36,468 stack ['$a36.0']
DEBUG 2022-02-08 17:11:36,468 dispatch pc=40, inst=CALL_METHOD(arg=0, lineno=3909)
DEBUG 2022-02-08 17:11:36,468 stack ['$38load_method.1']
DEBUG 2022-02-08 17:11:36,468 dispatch pc=42, inst=LOAD_FAST(arg=1, lineno=3909)
DEBUG 2022-02-08 17:11:36,468 stack ['$40call_method.2']
DEBUG 2022-02-08 17:11:36,468 dispatch pc=44, inst=BINARY_SUBSCR(arg=None, lineno=3909)
DEBUG 2022-02-08 17:11:36,468 stack ['$40call_method.2', '$indices42.3']
DEBUG 2022-02-08 17:11:36,468 dispatch pc=46, inst=RETURN_VALUE(arg=None, lineno=3909)
DEBUG 2022-02-08 17:11:36,468 stack ['$44binary_subscr.4']
DEBUG 2022-02-08 17:11:36,468 end state. edges=[]
DEBUG 2022-02-08 17:11:36,468 -------------------------Prune PHIs-------------------------
DEBUG 2022-02-08 17:11:36,468 Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=16 nstack_initial=0): set(),
             State(pc_initial=28 nstack_initial=0): set(),
             State(pc_initial=36 nstack_initial=0): set()})
DEBUG 2022-02-08 17:11:36,468 defmap: {}
DEBUG 2022-02-08 17:11:36,468 phismap: defaultdict(<class 'set'>, {})
DEBUG 2022-02-08 17:11:36,468 changing phismap: defaultdict(<class 'set'>, {})
DEBUG 2022-02-08 17:11:36,468 keep phismap: {}
DEBUG 2022-02-08 17:11:36,468 new_out: defaultdict(<class 'dict'>, {})
DEBUG 2022-02-08 17:11:36,468 ----------------------DONE Prune PHIs-----------------------
DEBUG 2022-02-08 17:11:36,468 block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$indices2.0'}), (4, {'res': '$a4.1'}), (6, {'item': '$a4.1', 'res': '$6load_attr.2'}), (8, {'res': '$const8.3'}), (10, {'lhs': '$6load_attr.2', 'rhs': '$const8.3', 'res': '$10binary_subtract.4'}), (12, {'lhs': '$indices2.0', 'rhs': '$10binary_subtract.4', 'res': '$12compare_op.5'}), (14, {'pred': '$12compare_op.5'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={16: (), 28: ()})
DEBUG 2022-02-08 17:11:36,468 block_infos State(pc_initial=16 nstack_initial=0):
AdaptBlockInfo(insts=((16, {'res': '$indices16.0'}), (18, {'res': '$a18.1'}), (20, {'item': '$a18.1', 'res': '$20load_attr.2'}), (22, {'value': '$20load_attr.2', 'res': '$22unary_negative.3'}), (24, {'lhs': '$indices16.0', 'rhs': '$22unary_negative.3', 'res': '$24compare_op.4'}), (26, {'pred': '$24compare_op.4'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={28: (), 36: ()})
DEBUG 2022-02-08 17:11:36,468 block_infos State(pc_initial=28 nstack_initial=0):
AdaptBlockInfo(insts=((28, {'res': '$28load_global.0'}), (30, {'res': '$const30.1'}), (32, {'func': '$28load_global.0', 'args': ['$const30.1'], 'res': '$32call_function.2'}), (34, {'exc': '$32call_function.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG 2022-02-08 17:11:36,468 block_infos State(pc_initial=36 nstack_initial=0):
AdaptBlockInfo(insts=((36, {'res': '$a36.0'}), (38, {'item': '$a36.0', 'res': '$38load_method.1'}), (40, {'func': '$38load_method.1', 'args': [], 'res': '$40call_method.2'}), (42, {'res': '$indices42.3'}), (44, {'index': '$indices42.3', 'target': '$40call_method.2', 'res': '$44binary_subscr.4'}), (46, {'retval': '$44binary_subscr.4', 'castval': '$46return_value.5'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG 2022-02-08 17:11:36,468 label 0:
    a = arg(0, name=a)                       ['a']
    indices = arg(1, name=indices)           ['indices']
    $6load_attr.2 = getattr(value=a, attr=size) ['$6load_attr.2', 'a']
    $const8.3 = const(int, 1)                ['$const8.3']
    $10binary_subtract.4 = $6load_attr.2 - $const8.3 ['$10binary_subtract.4', '$6load_attr.2', '$const8.3']
    $12compare_op.5 = indices > $10binary_subtract.4 ['$10binary_subtract.4', '$12compare_op.5', 'indices']
    bool14 = global(bool: <class 'bool'>)    ['bool14']
    $14pred = call bool14($12compare_op.5, func=bool14, args=(Var($12compare_op.5, arrayobj.py:3907),), kws=(), vararg=None, target=None) ['$12compare_op.5', '$14pred', 'bool14']
    branch $14pred, 28, 16                   ['$14pred']
label 16:
    $20load_attr.2 = getattr(value=a, attr=size) ['$20load_attr.2', 'a']
    $22unary_negative.3 = unary(fn=<built-in function neg>, value=$20load_attr.2) ['$20load_attr.2', '$22unary_negative.3']
    $24compare_op.4 = indices < $22unary_negative.3 ['$22unary_negative.3', '$24compare_op.4', 'indices']
    bool26 = global(bool: <class 'bool'>)    ['bool26']
    $26pred = call bool26($24compare_op.4, func=bool26, args=(Var($24compare_op.4, arrayobj.py:3907),), kws=(), vararg=None, target=None) ['$24compare_op.4', '$26pred', 'bool26']
    branch $26pred, 28, 36                   ['$26pred']
label 28:
    $28load_global.0 = global(IndexError: <class 'IndexError'>) ['$28load_global.0']
    $const30.1 = const(str, Index out of bounds) ['$const30.1']
    $32call_function.2 = call $28load_global.0($const30.1, func=$28load_global.0, args=[Var($const30.1, arrayobj.py:3908)], kws=(), vararg=None, target=None) ['$28load_global.0', '$32call_function.2', '$const30.1']
    raise $32call_function.2                 ['$32call_function.2']
label 36:
    $38load_method.1 = getattr(value=a, attr=ravel) ['$38load_method.1', 'a']
    $40call_method.2 = call $38load_method.1(func=$38load_method.1, args=[], kws=(), vararg=None, target=None) ['$38load_method.1', '$40call_method.2']
    $44binary_subscr.4 = getitem(value=$40call_method.2, index=indices, fn=<built-in function getitem>) ['$40call_method.2', '$44binary_subscr.4', 'indices']
    $46return_value.5 = cast(value=$44binary_subscr.4) ['$44binary_subscr.4', '$46return_value.5']
    return $46return_value.5                 ['$46return_value.5']

DEBUG 2022-02-08 17:11:36,478 ==== SSA block analysis pass on 0
DEBUG 2022-02-08 17:11:36,478 Running <numba.core.ssa._GatherDefsHandler object at 0x000001E9F7FCDE50>
DEBUG 2022-02-08 17:11:36,478 on stmt: a = arg(0, name=a)
DEBUG 2022-02-08 17:11:36,478 on stmt: indices = arg(1, name=indices)
DEBUG 2022-02-08 17:11:36,478 on stmt: $6load_attr.2 = getattr(value=a, attr=size)
DEBUG 2022-02-08 17:11:36,478 on stmt: $const8.3 = const(int, 1)
DEBUG 2022-02-08 17:11:36,478 on stmt: $10binary_subtract.4 = $6load_attr.2 - $const8.3
DEBUG 2022-02-08 17:11:36,478 on stmt: $12compare_op.5 = indices > $10binary_subtract.4
DEBUG 2022-02-08 17:11:36,478 on stmt: bool14 = global(bool: <class 'bool'>)
DEBUG 2022-02-08 17:11:36,478 on stmt: $14pred = call bool14($12compare_op.5, func=bool14, args=(Var($12compare_op.5, arrayobj.py:3907),), kws=(), vararg=None, target=None)
DEBUG 2022-02-08 17:11:36,478 on stmt: branch $14pred, 28, 16
DEBUG 2022-02-08 17:11:36,478 ==== SSA block analysis pass on 16
DEBUG 2022-02-08 17:11:36,478 Running <numba.core.ssa._GatherDefsHandler object at 0x000001E9F7FCDE50>
DEBUG 2022-02-08 17:11:36,478 on stmt: $20load_attr.2 = getattr(value=a, attr=size)
DEBUG 2022-02-08 17:11:36,478 on stmt: $22unary_negative.3 = unary(fn=<built-in function neg>, value=$20load_attr.2)
DEBUG 2022-02-08 17:11:36,478 on stmt: $24compare_op.4 = indices < $22unary_negative.3
DEBUG 2022-02-08 17:11:36,478 on stmt: bool26 = global(bool: <class 'bool'>)
DEBUG 2022-02-08 17:11:36,478 on stmt: $26pred = call bool26($24compare_op.4, func=bool26, args=(Var($24compare_op.4, arrayobj.py:3907),), kws=(), vararg=None, target=None)
DEBUG 2022-02-08 17:11:36,478 on stmt: branch $26pred, 28, 36
DEBUG 2022-02-08 17:11:36,478 ==== SSA block analysis pass on 28
DEBUG 2022-02-08 17:11:36,478 Running <numba.core.ssa._GatherDefsHandler object at 0x000001E9F7FCDE50>
DEBUG 2022-02-08 17:11:36,478 on stmt: $28load_global.0 = global(IndexError: <class 'IndexError'>)
DEBUG 2022-02-08 17:11:36,478 on stmt: $const30.1 = const(str, Index out of bounds)
DEBUG 2022-02-08 17:11:36,478 on stmt: $32call_function.2 = call $28load_global.0($const30.1, func=$28load_global.0, args=[Var($const30.1, arrayobj.py:3908)], kws=(), vararg=None, target=None)
DEBUG 2022-02-08 17:11:36,478 on stmt: <static> raise <class 'IndexError'>('Index out of bounds')
DEBUG 2022-02-08 17:11:36,478 ==== SSA block analysis pass on 36
DEBUG 2022-02-08 17:11:36,478 Running <numba.core.ssa._GatherDefsHandler object at 0x000001E9F7FCDE50>
DEBUG 2022-02-08 17:11:36,478 on stmt: $38load_method.1 = getattr(value=a, attr=ravel)
DEBUG 2022-02-08 17:11:36,478 on stmt: $40call_method.2 = call $38load_method.1(func=$38load_method.1, args=[], kws=(), vararg=None, target=None)
DEBUG 2022-02-08 17:11:36,478 on stmt: $44binary_subscr.4 = getitem(value=$40call_method.2, index=indices, fn=<built-in function getitem>)
DEBUG 2022-02-08 17:11:36,478 on stmt: $46return_value.5 = cast(value=$44binary_subscr.4)
DEBUG 2022-02-08 17:11:36,478 on stmt: return $46return_value.5
DEBUG 2022-02-08 17:11:36,478 defs defaultdict(<class 'list'>,
            {'$10binary_subtract.4': [<numba.core.ir.Assign object at 0x000001E9F7FCC5E0>],
             '$12compare_op.5': [<numba.core.ir.Assign object at 0x000001E9F7FCCF10>],
             '$14pred': [<numba.core.ir.Assign object at 0x000001E9F7FC91C0>],
             '$20load_attr.2': [<numba.core.ir.Assign object at 0x000001E9F7FC95E0>],
             '$22unary_negative.3': [<numba.core.ir.Assign object at 0x000001E9F7FC9760>],
             '$24compare_op.4': [<numba.core.ir.Assign object at 0x000001E9F7FC9910>],
             '$26pred': [<numba.core.ir.Assign object at 0x000001E9F7FC9B80>],
             '$28load_global.0': [<numba.core.ir.Assign object at 0x000001E9F7FC9D60>],
             '$32call_function.2': [<numba.core.ir.Assign object at 0x000001E9F802A100>],
             '$38load_method.1': [<numba.core.ir.Assign object at 0x000001E9F802A4C0>],
             '$40call_method.2': [<numba.core.ir.Assign object at 0x000001E9F802A6D0>],
             '$44binary_subscr.4': [<numba.core.ir.Assign object at 0x000001E9F802A910>],
             '$46return_value.5': [<numba.core.ir.Assign object at 0x000001E9F802AA60>],
             '$6load_attr.2': [<numba.core.ir.Assign object at 0x000001E9F7FCC400>],
             '$const30.1': [<numba.core.ir.Assign object at 0x000001E9F7FC9EE0>],
             '$const8.3': [<numba.core.ir.Assign object at 0x000001E9F7FCC280>],
             'a': [<numba.core.ir.Assign object at 0x000001E9F7FCCE50>],
             'bool14': [<numba.core.ir.Assign object at 0x000001E9F7FC90A0>],
             'bool26': [<numba.core.ir.Assign object at 0x000001E9F7FC9A60>],
             'indices': [<numba.core.ir.Assign object at 0x000001E9F7FCCD30>]})
DEBUG 2022-02-08 17:11:36,478 SSA violators set()
DEBUG 2022-02-08 17:11:36,498 bytecode dump:
>          0	NOP(arg=None, lineno=1768)
           2	LOAD_FAST(arg=0, lineno=1768)
           4	LOAD_METHOD(arg=0, lineno=1768)
           6	LOAD_FAST(arg=0, lineno=1768)
           8	LOAD_ATTR(arg=1, lineno=1768)
          10	CALL_METHOD(arg=1, lineno=1768)
          12	RETURN_VALUE(arg=None, lineno=1768)
DEBUG 2022-02-08 17:11:36,498 pending: deque([State(pc_initial=0 nstack_initial=0)])
DEBUG 2022-02-08 17:11:36,498 stack: []
DEBUG 2022-02-08 17:11:36,498 dispatch pc=0, inst=NOP(arg=None, lineno=1768)
DEBUG 2022-02-08 17:11:36,498 stack []
DEBUG 2022-02-08 17:11:36,498 dispatch pc=2, inst=LOAD_FAST(arg=0, lineno=1768)
DEBUG 2022-02-08 17:11:36,498 stack []
DEBUG 2022-02-08 17:11:36,498 dispatch pc=4, inst=LOAD_METHOD(arg=0, lineno=1768)
DEBUG 2022-02-08 17:11:36,498 stack ['$ary2.0']
DEBUG 2022-02-08 17:11:36,498 dispatch pc=6, inst=LOAD_FAST(arg=0, lineno=1768)
DEBUG 2022-02-08 17:11:36,498 stack ['$4load_method.1']
DEBUG 2022-02-08 17:11:36,498 dispatch pc=8, inst=LOAD_ATTR(arg=1, lineno=1768)
DEBUG 2022-02-08 17:11:36,498 stack ['$4load_method.1', '$ary6.2']
DEBUG 2022-02-08 17:11:36,498 dispatch pc=10, inst=CALL_METHOD(arg=1, lineno=1768)
DEBUG 2022-02-08 17:11:36,498 stack ['$4load_method.1', '$8load_attr.3']
DEBUG 2022-02-08 17:11:36,498 dispatch pc=12, inst=RETURN_VALUE(arg=None, lineno=1768)
DEBUG 2022-02-08 17:11:36,498 stack ['$10call_method.4']
DEBUG 2022-02-08 17:11:36,498 end state. edges=[]
DEBUG 2022-02-08 17:11:36,498 -------------------------Prune PHIs-------------------------
DEBUG 2022-02-08 17:11:36,498 Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
DEBUG 2022-02-08 17:11:36,498 defmap: {}
DEBUG 2022-02-08 17:11:36,498 phismap: defaultdict(<class 'set'>, {})
DEBUG 2022-02-08 17:11:36,498 changing phismap: defaultdict(<class 'set'>, {})
DEBUG 2022-02-08 17:11:36,498 keep phismap: {}
DEBUG 2022-02-08 17:11:36,498 new_out: defaultdict(<class 'dict'>, {})
DEBUG 2022-02-08 17:11:36,498 ----------------------DONE Prune PHIs-----------------------
DEBUG 2022-02-08 17:11:36,498 block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$ary2.0'}), (4, {'item': '$ary2.0', 'res': '$4load_method.1'}), (6, {'res': '$ary6.2'}), (8, {'item': '$ary6.2', 'res': '$8load_attr.3'}), (10, {'func': '$4load_method.1', 'args': ['$8load_attr.3'], 'res': '$10call_method.4'}), (12, {'retval': '$10call_method.4', 'castval': '$12return_value.5'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG 2022-02-08 17:11:36,498 label 0:
    ary = arg(0, name=ary)                   ['ary']
    $4load_method.1 = getattr(value=ary, attr=reshape) ['$4load_method.1', 'ary']
    $8load_attr.3 = getattr(value=ary, attr=size) ['$8load_attr.3', 'ary']
    $10call_method.4 = call $4load_method.1($8load_attr.3, func=$4load_method.1, args=[Var($8load_attr.3, arrayobj.py:1768)], kws=(), vararg=None, target=None) ['$10call_method.4', '$4load_method.1', '$8load_attr.3']
    $12return_value.5 = cast(value=$10call_method.4) ['$10call_method.4', '$12return_value.5']
    return $12return_value.5                 ['$12return_value.5']

DEBUG 2022-02-08 17:11:36,498 ==== SSA block analysis pass on 0
DEBUG 2022-02-08 17:11:36,498 Running <numba.core.ssa._GatherDefsHandler object at 0x000001E9F7F82BE0>
DEBUG 2022-02-08 17:11:36,498 on stmt: ary = arg(0, name=ary)
DEBUG 2022-02-08 17:11:36,498 on stmt: $4load_method.1 = getattr(value=ary, attr=reshape)
DEBUG 2022-02-08 17:11:36,498 on stmt: $8load_attr.3 = getattr(value=ary, attr=size)
DEBUG 2022-02-08 17:11:36,498 on stmt: $10call_method.4 = call $4load_method.1($8load_attr.3, func=$4load_method.1, args=[Var($8load_attr.3, arrayobj.py:1768)], kws=(), vararg=None, target=None)
DEBUG 2022-02-08 17:11:36,498 on stmt: $12return_value.5 = cast(value=$10call_method.4)
DEBUG 2022-02-08 17:11:36,498 on stmt: return $12return_value.5
DEBUG 2022-02-08 17:11:36,498 defs defaultdict(<class 'list'>,
            {'$10call_method.4': [<numba.core.ir.Assign object at 0x000001E9F7F879D0>],
             '$12return_value.5': [<numba.core.ir.Assign object at 0x000001E9F7F87AC0>],
             '$4load_method.1': [<numba.core.ir.Assign object at 0x000001E9F7F87520>],
             '$8load_attr.3': [<numba.core.ir.Assign object at 0x000001E9F7F877C0>],
             'ary': [<numba.core.ir.Assign object at 0x000001E9F7F822E0>]})
DEBUG 2022-02-08 17:11:36,498 SSA violators set()
DEBUG 2022-02-08 17:11:36,508 bytecode dump:
>          0	NOP(arg=None, lineno=1630)
           2	LOAD_CONST(arg=1, lineno=1630)
           4	STORE_FAST(arg=2, lineno=1630)
           6	LOAD_CONST(arg=2, lineno=1631)
           8	STORE_FAST(arg=3, lineno=1631)
          10	LOAD_GLOBAL(arg=0, lineno=1632)
          12	LOAD_FAST(arg=1, lineno=1632)
          14	CALL_FUNCTION(arg=1, lineno=1632)
          16	GET_ITER(arg=None, lineno=1632)
>         18	FOR_ITER(arg=38, lineno=1632)
          20	UNPACK_SEQUENCE(arg=2, lineno=1632)
          22	STORE_FAST(arg=4, lineno=1632)
          24	STORE_FAST(arg=5, lineno=1632)
          26	LOAD_FAST(arg=5, lineno=1633)
          28	LOAD_CONST(arg=1, lineno=1633)
          30	COMPARE_OP(arg=0, lineno=1633)
          32	POP_JUMP_IF_FALSE(arg=48, lineno=1633)
          34	LOAD_FAST(arg=2, lineno=1634)
          36	LOAD_CONST(arg=2, lineno=1634)
          38	INPLACE_ADD(arg=None, lineno=1634)
          40	STORE_FAST(arg=2, lineno=1634)
          42	LOAD_FAST(arg=4, lineno=1635)
          44	STORE_FAST(arg=6, lineno=1635)
          46	JUMP_ABSOLUTE(arg=18, lineno=1635)
>         48	LOAD_FAST(arg=3, lineno=1637)
          50	LOAD_FAST(arg=5, lineno=1637)
          52	INPLACE_MULTIPLY(arg=None, lineno=1637)
          54	STORE_FAST(arg=3, lineno=1637)
          56	JUMP_ABSOLUTE(arg=18, lineno=1637)
>         58	LOAD_FAST(arg=2, lineno=1639)
          60	LOAD_CONST(arg=1, lineno=1639)
          62	COMPARE_OP(arg=2, lineno=1639)
          64	POP_JUMP_IF_FALSE(arg=84, lineno=1639)
          66	LOAD_FAST(arg=0, lineno=1640)
          68	LOAD_FAST(arg=3, lineno=1640)
          70	COMPARE_OP(arg=3, lineno=1640)
          72	POP_JUMP_IF_FALSE(arg=164, lineno=1640)
          74	LOAD_GLOBAL(arg=1, lineno=1641)
          76	LOAD_CONST(arg=3, lineno=1641)
          78	CALL_FUNCTION(arg=1, lineno=1641)
          80	RAISE_VARARGS(arg=1, lineno=1641)
          82	JUMP_FORWARD(arg=80, lineno=1641)
>         84	LOAD_FAST(arg=2, lineno=1643)
          86	LOAD_CONST(arg=2, lineno=1643)
          88	COMPARE_OP(arg=2, lineno=1643)
          90	POP_JUMP_IF_FALSE(arg=156, lineno=1643)
          92	LOAD_FAST(arg=3, lineno=1645)
          94	LOAD_CONST(arg=1, lineno=1645)
          96	COMPARE_OP(arg=2, lineno=1645)
          98	POP_JUMP_IF_FALSE(arg=114, lineno=1645)
         100	LOAD_CONST(arg=1, lineno=1646)
         102	STORE_FAST(arg=7, lineno=1646)
         104	LOAD_FAST(arg=0, lineno=1647)
         106	LOAD_CONST(arg=1, lineno=1647)
         108	COMPARE_OP(arg=2, lineno=1647)
         110	STORE_FAST(arg=8, lineno=1647)
         112	JUMP_FORWARD(arg=20, lineno=1647)
>        114	LOAD_FAST(arg=0, lineno=1649)
         116	LOAD_FAST(arg=3, lineno=1649)
         118	BINARY_FLOOR_DIVIDE(arg=None, lineno=1649)
         120	STORE_FAST(arg=7, lineno=1649)
         122	LOAD_FAST(arg=0, lineno=1650)
         124	LOAD_FAST(arg=3, lineno=1650)
         126	BINARY_MODULO(arg=None, lineno=1650)
         128	LOAD_CONST(arg=1, lineno=1650)
         130	COMPARE_OP(arg=2, lineno=1650)
         132	STORE_FAST(arg=8, lineno=1650)
>        134	LOAD_FAST(arg=8, lineno=1651)
         136	POP_JUMP_IF_TRUE(arg=146, lineno=1651)
         138	LOAD_GLOBAL(arg=1, lineno=1652)
         140	LOAD_CONST(arg=3, lineno=1652)
         142	CALL_FUNCTION(arg=1, lineno=1652)
         144	RAISE_VARARGS(arg=1, lineno=1652)
>        146	LOAD_FAST(arg=7, lineno=1653)
         148	LOAD_FAST(arg=1, lineno=1653)
         150	LOAD_FAST(arg=6, lineno=1653)
         152	STORE_SUBSCR(arg=None, lineno=1653)
         154	JUMP_FORWARD(arg=8, lineno=1653)
>        156	LOAD_GLOBAL(arg=1, lineno=1656)
         158	LOAD_CONST(arg=4, lineno=1656)
         160	CALL_FUNCTION(arg=1, lineno=1656)
         162	RAISE_VARARGS(arg=1, lineno=1656)
>        164	LOAD_CONST(arg=0, lineno=1656)
         166	RETURN_VALUE(arg=None, lineno=1656)
DEBUG 2022-02-08 17:11:36,508 pending: deque([State(pc_initial=0 nstack_initial=0)])
DEBUG 2022-02-08 17:11:36,508 stack: []
DEBUG 2022-02-08 17:11:36,508 dispatch pc=0, inst=NOP(arg=None, lineno=1630)
DEBUG 2022-02-08 17:11:36,508 stack []
DEBUG 2022-02-08 17:11:36,508 dispatch pc=2, inst=LOAD_CONST(arg=1, lineno=1630)
DEBUG 2022-02-08 17:11:36,508 stack []
DEBUG 2022-02-08 17:11:36,508 dispatch pc=4, inst=STORE_FAST(arg=2, lineno=1630)
DEBUG 2022-02-08 17:11:36,508 stack ['$const2.0']
DEBUG 2022-02-08 17:11:36,508 dispatch pc=6, inst=LOAD_CONST(arg=2, lineno=1631)
DEBUG 2022-02-08 17:11:36,508 stack []
DEBUG 2022-02-08 17:11:36,508 dispatch pc=8, inst=STORE_FAST(arg=3, lineno=1631)
DEBUG 2022-02-08 17:11:36,508 stack ['$const6.1']
DEBUG 2022-02-08 17:11:36,508 dispatch pc=10, inst=LOAD_GLOBAL(arg=0, lineno=1632)
DEBUG 2022-02-08 17:11:36,508 stack []
DEBUG 2022-02-08 17:11:36,508 dispatch pc=12, inst=LOAD_FAST(arg=1, lineno=1632)
DEBUG 2022-02-08 17:11:36,508 stack ['$10load_global.2']
DEBUG 2022-02-08 17:11:36,508 dispatch pc=14, inst=CALL_FUNCTION(arg=1, lineno=1632)
DEBUG 2022-02-08 17:11:36,508 stack ['$10load_global.2', '$shape12.3']
DEBUG 2022-02-08 17:11:36,508 dispatch pc=16, inst=GET_ITER(arg=None, lineno=1632)
DEBUG 2022-02-08 17:11:36,508 stack ['$14call_function.4']
DEBUG 2022-02-08 17:11:36,508 end state. edges=[Edge(pc=18, stack=('$16get_iter.5',), blockstack=(), npush=0)]
DEBUG 2022-02-08 17:11:36,508 pending: deque([State(pc_initial=18 nstack_initial=1)])
DEBUG 2022-02-08 17:11:36,508 stack: ['$phi18.0']
DEBUG 2022-02-08 17:11:36,508 dispatch pc=18, inst=FOR_ITER(arg=38, lineno=1632)
DEBUG 2022-02-08 17:11:36,508 stack ['$phi18.0']
DEBUG 2022-02-08 17:11:36,508 end state. edges=[Edge(pc=58, stack=(), blockstack=(), npush=0), Edge(pc=20, stack=('$phi18.0', '$18for_iter.2'), blockstack=(), npush=0)]
DEBUG 2022-02-08 17:11:36,508 pending: deque([State(pc_initial=58 nstack_initial=0), State(pc_initial=20 nstack_initial=2)])
DEBUG 2022-02-08 17:11:36,508 stack: []
DEBUG 2022-02-08 17:11:36,508 dispatch pc=58, inst=LOAD_FAST(arg=2, lineno=1639)
DEBUG 2022-02-08 17:11:36,508 stack []
DEBUG 2022-02-08 17:11:36,508 dispatch pc=60, inst=LOAD_CONST(arg=1, lineno=1639)
DEBUG 2022-02-08 17:11:36,508 stack ['$num_neg_value58.0']
DEBUG 2022-02-08 17:11:36,508 dispatch pc=62, inst=COMPARE_OP(arg=2, lineno=1639)
DEBUG 2022-02-08 17:11:36,508 stack ['$num_neg_value58.0', '$const60.1']
DEBUG 2022-02-08 17:11:36,508 dispatch pc=64, inst=POP_JUMP_IF_FALSE(arg=84, lineno=1639)
DEBUG 2022-02-08 17:11:36,508 stack ['$62compare_op.2']
DEBUG 2022-02-08 17:11:36,508 end state. edges=[Edge(pc=66, stack=(), blockstack=(), npush=0), Edge(pc=84, stack=(), blockstack=(), npush=0)]
DEBUG 2022-02-08 17:11:36,508 pending: deque([State(pc_initial=20 nstack_initial=2), State(pc_initial=66 nstack_initial=0), State(pc_initial=84 nstack_initial=0)])
DEBUG 2022-02-08 17:11:36,508 stack: ['$phi20.0', '$phi20.1']
DEBUG 2022-02-08 17:11:36,508 dispatch pc=20, inst=UNPACK_SEQUENCE(arg=2, lineno=1632)
DEBUG 2022-02-08 17:11:36,508 stack ['$phi20.0', '$phi20.1']
DEBUG 2022-02-08 17:11:36,508 dispatch pc=22, inst=STORE_FAST(arg=4, lineno=1632)
DEBUG 2022-02-08 17:11:36,508 stack ['$phi20.0', '$20unpack_sequence.3', '$20unpack_sequence.2']
DEBUG 2022-02-08 17:11:36,508 dispatch pc=24, inst=STORE_FAST(arg=5, lineno=1632)
DEBUG 2022-02-08 17:11:36,508 stack ['$phi20.0', '$20unpack_sequence.3']
DEBUG 2022-02-08 17:11:36,508 dispatch pc=26, inst=LOAD_FAST(arg=5, lineno=1633)
DEBUG 2022-02-08 17:11:36,508 stack ['$phi20.0']
DEBUG 2022-02-08 17:11:36,508 dispatch pc=28, inst=LOAD_CONST(arg=1, lineno=1633)
DEBUG 2022-02-08 17:11:36,508 stack ['$phi20.0', '$s26.5']
DEBUG 2022-02-08 17:11:36,508 dispatch pc=30, inst=COMPARE_OP(arg=0, lineno=1633)
DEBUG 2022-02-08 17:11:36,508 stack ['$phi20.0', '$s26.5', '$const28.6']
DEBUG 2022-02-08 17:11:36,516 dispatch pc=32, inst=POP_JUMP_IF_FALSE(arg=48, lineno=1633)
DEBUG 2022-02-08 17:11:36,516 stack ['$phi20.0', '$30compare_op.7']
DEBUG 2022-02-08 17:11:36,516 end state. edges=[Edge(pc=34, stack=('$phi20.0',), blockstack=(), npush=0), Edge(pc=48, stack=('$phi20.0',), blockstack=(), npush=0)]
DEBUG 2022-02-08 17:11:36,516 pending: deque([State(pc_initial=66 nstack_initial=0), State(pc_initial=84 nstack_initial=0), State(pc_initial=34 nstack_initial=1), State(pc_initial=48 nstack_initial=1)])
DEBUG 2022-02-08 17:11:36,516 stack: []
DEBUG 2022-02-08 17:11:36,516 dispatch pc=66, inst=LOAD_FAST(arg=0, lineno=1640)
DEBUG 2022-02-08 17:11:36,516 stack []
DEBUG 2022-02-08 17:11:36,516 dispatch pc=68, inst=LOAD_FAST(arg=3, lineno=1640)
DEBUG 2022-02-08 17:11:36,516 stack ['$origsize66.0']
DEBUG 2022-02-08 17:11:36,516 dispatch pc=70, inst=COMPARE_OP(arg=3, lineno=1640)
DEBUG 2022-02-08 17:11:36,516 stack ['$origsize66.0', '$known_size68.1']
DEBUG 2022-02-08 17:11:36,516 dispatch pc=72, inst=POP_JUMP_IF_FALSE(arg=164, lineno=1640)
DEBUG 2022-02-08 17:11:36,516 stack ['$70compare_op.2']
DEBUG 2022-02-08 17:11:36,516 end state. edges=[Edge(pc=74, stack=(), blockstack=(), npush=0), Edge(pc=164, stack=(), blockstack=(), npush=0)]
DEBUG 2022-02-08 17:11:36,516 pending: deque([State(pc_initial=84 nstack_initial=0), State(pc_initial=34 nstack_initial=1), State(pc_initial=48 nstack_initial=1), State(pc_initial=74 nstack_initial=0), State(pc_initial=164 nstack_initial=0)])
DEBUG 2022-02-08 17:11:36,516 stack: []
DEBUG 2022-02-08 17:11:36,516 dispatch pc=84, inst=LOAD_FAST(arg=2, lineno=1643)
DEBUG 2022-02-08 17:11:36,516 stack []
DEBUG 2022-02-08 17:11:36,516 dispatch pc=86, inst=LOAD_CONST(arg=2, lineno=1643)
DEBUG 2022-02-08 17:11:36,516 stack ['$num_neg_value84.0']
DEBUG 2022-02-08 17:11:36,516 dispatch pc=88, inst=COMPARE_OP(arg=2, lineno=1643)
DEBUG 2022-02-08 17:11:36,516 stack ['$num_neg_value84.0', '$const86.1']
DEBUG 2022-02-08 17:11:36,516 dispatch pc=90, inst=POP_JUMP_IF_FALSE(arg=156, lineno=1643)
DEBUG 2022-02-08 17:11:36,518 stack ['$88compare_op.2']
DEBUG 2022-02-08 17:11:36,518 end state. edges=[Edge(pc=92, stack=(), blockstack=(), npush=0), Edge(pc=156, stack=(), blockstack=(), npush=0)]
DEBUG 2022-02-08 17:11:36,518 pending: deque([State(pc_initial=34 nstack_initial=1), State(pc_initial=48 nstack_initial=1), State(pc_initial=74 nstack_initial=0), State(pc_initial=164 nstack_initial=0), State(pc_initial=92 nstack_initial=0), State(pc_initial=156 nstack_initial=0)])
DEBUG 2022-02-08 17:11:36,518 stack: ['$phi34.0']
DEBUG 2022-02-08 17:11:36,518 dispatch pc=34, inst=LOAD_FAST(arg=2, lineno=1634)
DEBUG 2022-02-08 17:11:36,518 stack ['$phi34.0']
DEBUG 2022-02-08 17:11:36,518 dispatch pc=36, inst=LOAD_CONST(arg=2, lineno=1634)
DEBUG 2022-02-08 17:11:36,518 stack ['$phi34.0', '$num_neg_value34.1']
DEBUG 2022-02-08 17:11:36,518 dispatch pc=38, inst=INPLACE_ADD(arg=None, lineno=1634)
DEBUG 2022-02-08 17:11:36,518 stack ['$phi34.0', '$num_neg_value34.1', '$const36.2']
DEBUG 2022-02-08 17:11:36,518 dispatch pc=40, inst=STORE_FAST(arg=2, lineno=1634)
DEBUG 2022-02-08 17:11:36,518 stack ['$phi34.0', '$38inplace_add.3']
DEBUG 2022-02-08 17:11:36,518 dispatch pc=42, inst=LOAD_FAST(arg=4, lineno=1635)
DEBUG 2022-02-08 17:11:36,518 stack ['$phi34.0']
DEBUG 2022-02-08 17:11:36,518 dispatch pc=44, inst=STORE_FAST(arg=6, lineno=1635)
DEBUG 2022-02-08 17:11:36,518 stack ['$phi34.0', '$ax42.4']
DEBUG 2022-02-08 17:11:36,518 dispatch pc=46, inst=JUMP_ABSOLUTE(arg=18, lineno=1635)
DEBUG 2022-02-08 17:11:36,518 stack ['$phi34.0']
DEBUG 2022-02-08 17:11:36,518 end state. edges=[Edge(pc=18, stack=('$phi34.0',), blockstack=(), npush=0)]
DEBUG 2022-02-08 17:11:36,518 pending: deque([State(pc_initial=48 nstack_initial=1), State(pc_initial=74 nstack_initial=0), State(pc_initial=164 nstack_initial=0), State(pc_initial=92 nstack_initial=0), State(pc_initial=156 nstack_initial=0), State(pc_initial=18 nstack_initial=1)])
DEBUG 2022-02-08 17:11:36,518 stack: ['$phi48.0']
DEBUG 2022-02-08 17:11:36,518 dispatch pc=48, inst=LOAD_FAST(arg=3, lineno=1637)
DEBUG 2022-02-08 17:11:36,518 stack ['$phi48.0']
DEBUG 2022-02-08 17:11:36,518 dispatch pc=50, inst=LOAD_FAST(arg=5, lineno=1637)
DEBUG 2022-02-08 17:11:36,518 stack ['$phi48.0', '$known_size48.1']
DEBUG 2022-02-08 17:11:36,518 dispatch pc=52, inst=INPLACE_MULTIPLY(arg=None, lineno=1637)
DEBUG 2022-02-08 17:11:36,518 stack ['$phi48.0', '$known_size48.1', '$s50.2']
DEBUG 2022-02-08 17:11:36,518 dispatch pc=54, inst=STORE_FAST(arg=3, lineno=1637)
DEBUG 2022-02-08 17:11:36,518 stack ['$phi48.0', '$52inplace_multiply.3']
DEBUG 2022-02-08 17:11:36,518 dispatch pc=56, inst=JUMP_ABSOLUTE(arg=18, lineno=1637)
DEBUG 2022-02-08 17:11:36,518 stack ['$phi48.0']
DEBUG 2022-02-08 17:11:36,518 end state. edges=[Edge(pc=18, stack=('$phi48.0',), blockstack=(), npush=0)]
DEBUG 2022-02-08 17:11:36,518 pending: deque([State(pc_initial=74 nstack_initial=0), State(pc_initial=164 nstack_initial=0), State(pc_initial=92 nstack_initial=0), State(pc_initial=156 nstack_initial=0), State(pc_initial=18 nstack_initial=1), State(pc_initial=18 nstack_initial=1)])
DEBUG 2022-02-08 17:11:36,518 stack: []
DEBUG 2022-02-08 17:11:36,518 dispatch pc=74, inst=LOAD_GLOBAL(arg=1, lineno=1641)
DEBUG 2022-02-08 17:11:36,518 stack []
DEBUG 2022-02-08 17:11:36,518 dispatch pc=76, inst=LOAD_CONST(arg=3, lineno=1641)
DEBUG 2022-02-08 17:11:36,518 stack ['$74load_global.0']
DEBUG 2022-02-08 17:11:36,518 dispatch pc=78, inst=CALL_FUNCTION(arg=1, lineno=1641)
DEBUG 2022-02-08 17:11:36,518 stack ['$74load_global.0', '$const76.1']
DEBUG 2022-02-08 17:11:36,518 dispatch pc=80, inst=RAISE_VARARGS(arg=1, lineno=1641)
DEBUG 2022-02-08 17:11:36,518 stack ['$78call_function.2']
DEBUG 2022-02-08 17:11:36,518 end state. edges=[]
DEBUG 2022-02-08 17:11:36,518 pending: deque([State(pc_initial=164 nstack_initial=0), State(pc_initial=92 nstack_initial=0), State(pc_initial=156 nstack_initial=0), State(pc_initial=18 nstack_initial=1), State(pc_initial=18 nstack_initial=1)])
DEBUG 2022-02-08 17:11:36,518 stack: []
DEBUG 2022-02-08 17:11:36,518 dispatch pc=164, inst=LOAD_CONST(arg=0, lineno=1656)
DEBUG 2022-02-08 17:11:36,518 stack []
DEBUG 2022-02-08 17:11:36,518 dispatch pc=166, inst=RETURN_VALUE(arg=None, lineno=1656)
DEBUG 2022-02-08 17:11:36,518 stack ['$const164.0']
DEBUG 2022-02-08 17:11:36,518 end state. edges=[]
DEBUG 2022-02-08 17:11:36,518 pending: deque([State(pc_initial=92 nstack_initial=0), State(pc_initial=156 nstack_initial=0), State(pc_initial=18 nstack_initial=1), State(pc_initial=18 nstack_initial=1)])
DEBUG 2022-02-08 17:11:36,518 stack: []
DEBUG 2022-02-08 17:11:36,518 dispatch pc=92, inst=LOAD_FAST(arg=3, lineno=1645)
DEBUG 2022-02-08 17:11:36,518 stack []
DEBUG 2022-02-08 17:11:36,518 dispatch pc=94, inst=LOAD_CONST(arg=1, lineno=1645)
DEBUG 2022-02-08 17:11:36,518 stack ['$known_size92.0']
DEBUG 2022-02-08 17:11:36,518 dispatch pc=96, inst=COMPARE_OP(arg=2, lineno=1645)
DEBUG 2022-02-08 17:11:36,518 stack ['$known_size92.0', '$const94.1']
DEBUG 2022-02-08 17:11:36,518 dispatch pc=98, inst=POP_JUMP_IF_FALSE(arg=114, lineno=1645)
DEBUG 2022-02-08 17:11:36,518 stack ['$96compare_op.2']
DEBUG 2022-02-08 17:11:36,518 end state. edges=[Edge(pc=100, stack=(), blockstack=(), npush=0), Edge(pc=114, stack=(), blockstack=(), npush=0)]
DEBUG 2022-02-08 17:11:36,518 pending: deque([State(pc_initial=156 nstack_initial=0), State(pc_initial=18 nstack_initial=1), State(pc_initial=18 nstack_initial=1), State(pc_initial=100 nstack_initial=0), State(pc_initial=114 nstack_initial=0)])
DEBUG 2022-02-08 17:11:36,518 stack: []
DEBUG 2022-02-08 17:11:36,518 dispatch pc=156, inst=LOAD_GLOBAL(arg=1, lineno=1656)
DEBUG 2022-02-08 17:11:36,518 stack []
DEBUG 2022-02-08 17:11:36,518 dispatch pc=158, inst=LOAD_CONST(arg=4, lineno=1656)
DEBUG 2022-02-08 17:11:36,518 stack ['$156load_global.0']
DEBUG 2022-02-08 17:11:36,518 dispatch pc=160, inst=CALL_FUNCTION(arg=1, lineno=1656)
DEBUG 2022-02-08 17:11:36,518 stack ['$156load_global.0', '$const158.1']
DEBUG 2022-02-08 17:11:36,518 dispatch pc=162, inst=RAISE_VARARGS(arg=1, lineno=1656)
DEBUG 2022-02-08 17:11:36,518 stack ['$160call_function.2']
DEBUG 2022-02-08 17:11:36,518 end state. edges=[]
DEBUG 2022-02-08 17:11:36,518 pending: deque([State(pc_initial=18 nstack_initial=1), State(pc_initial=18 nstack_initial=1), State(pc_initial=100 nstack_initial=0), State(pc_initial=114 nstack_initial=0)])
DEBUG 2022-02-08 17:11:36,518 pending: deque([State(pc_initial=18 nstack_initial=1), State(pc_initial=100 nstack_initial=0), State(pc_initial=114 nstack_initial=0)])
DEBUG 2022-02-08 17:11:36,518 pending: deque([State(pc_initial=100 nstack_initial=0), State(pc_initial=114 nstack_initial=0)])
DEBUG 2022-02-08 17:11:36,518 stack: []
DEBUG 2022-02-08 17:11:36,518 dispatch pc=100, inst=LOAD_CONST(arg=1, lineno=1646)
DEBUG 2022-02-08 17:11:36,518 stack []
DEBUG 2022-02-08 17:11:36,518 dispatch pc=102, inst=STORE_FAST(arg=7, lineno=1646)
DEBUG 2022-02-08 17:11:36,518 stack ['$const100.0']
DEBUG 2022-02-08 17:11:36,518 dispatch pc=104, inst=LOAD_FAST(arg=0, lineno=1647)
DEBUG 2022-02-08 17:11:36,518 stack []
DEBUG 2022-02-08 17:11:36,518 dispatch pc=106, inst=LOAD_CONST(arg=1, lineno=1647)
DEBUG 2022-02-08 17:11:36,518 stack ['$origsize104.1']
DEBUG 2022-02-08 17:11:36,518 dispatch pc=108, inst=COMPARE_OP(arg=2, lineno=1647)
DEBUG 2022-02-08 17:11:36,518 stack ['$origsize104.1', '$const106.2']
DEBUG 2022-02-08 17:11:36,518 dispatch pc=110, inst=STORE_FAST(arg=8, lineno=1647)
DEBUG 2022-02-08 17:11:36,518 stack ['$108compare_op.3']
DEBUG 2022-02-08 17:11:36,518 dispatch pc=112, inst=JUMP_FORWARD(arg=20, lineno=1647)
DEBUG 2022-02-08 17:11:36,518 stack []
DEBUG 2022-02-08 17:11:36,527 end state. edges=[Edge(pc=134, stack=(), blockstack=(), npush=0)]
DEBUG 2022-02-08 17:11:36,527 pending: deque([State(pc_initial=114 nstack_initial=0), State(pc_initial=134 nstack_initial=0)])
DEBUG 2022-02-08 17:11:36,527 stack: []
DEBUG 2022-02-08 17:11:36,527 dispatch pc=114, inst=LOAD_FAST(arg=0, lineno=1649)
DEBUG 2022-02-08 17:11:36,527 stack []
DEBUG 2022-02-08 17:11:36,527 dispatch pc=116, inst=LOAD_FAST(arg=3, lineno=1649)
DEBUG 2022-02-08 17:11:36,527 stack ['$origsize114.0']
DEBUG 2022-02-08 17:11:36,527 dispatch pc=118, inst=BINARY_FLOOR_DIVIDE(arg=None, lineno=1649)
DEBUG 2022-02-08 17:11:36,527 stack ['$origsize114.0', '$known_size116.1']
DEBUG 2022-02-08 17:11:36,527 dispatch pc=120, inst=STORE_FAST(arg=7, lineno=1649)
DEBUG 2022-02-08 17:11:36,527 stack ['$118binary_floor_divide.2']
DEBUG 2022-02-08 17:11:36,527 dispatch pc=122, inst=LOAD_FAST(arg=0, lineno=1650)
DEBUG 2022-02-08 17:11:36,527 stack []
DEBUG 2022-02-08 17:11:36,527 dispatch pc=124, inst=LOAD_FAST(arg=3, lineno=1650)
DEBUG 2022-02-08 17:11:36,527 stack ['$origsize122.3']
DEBUG 2022-02-08 17:11:36,527 dispatch pc=126, inst=BINARY_MODULO(arg=None, lineno=1650)
DEBUG 2022-02-08 17:11:36,527 stack ['$origsize122.3', '$known_size124.4']
DEBUG 2022-02-08 17:11:36,529 dispatch pc=128, inst=LOAD_CONST(arg=1, lineno=1650)
DEBUG 2022-02-08 17:11:36,529 stack ['$126binary_modulo.5']
DEBUG 2022-02-08 17:11:36,529 dispatch pc=130, inst=COMPARE_OP(arg=2, lineno=1650)
DEBUG 2022-02-08 17:11:36,529 stack ['$126binary_modulo.5', '$const128.6']
DEBUG 2022-02-08 17:11:36,529 dispatch pc=132, inst=STORE_FAST(arg=8, lineno=1650)
DEBUG 2022-02-08 17:11:36,529 stack ['$130compare_op.7']
DEBUG 2022-02-08 17:11:36,529 end state. edges=[Edge(pc=134, stack=(), blockstack=(), npush=0)]
DEBUG 2022-02-08 17:11:36,529 pending: deque([State(pc_initial=134 nstack_initial=0), State(pc_initial=134 nstack_initial=0)])
DEBUG 2022-02-08 17:11:36,529 stack: []
DEBUG 2022-02-08 17:11:36,529 dispatch pc=134, inst=LOAD_FAST(arg=8, lineno=1651)
DEBUG 2022-02-08 17:11:36,529 stack []
DEBUG 2022-02-08 17:11:36,529 dispatch pc=136, inst=POP_JUMP_IF_TRUE(arg=146, lineno=1651)
DEBUG 2022-02-08 17:11:36,529 stack ['$ok134.0']
DEBUG 2022-02-08 17:11:36,529 end state. edges=[Edge(pc=138, stack=(), blockstack=(), npush=0), Edge(pc=146, stack=(), blockstack=(), npush=0)]
DEBUG 2022-02-08 17:11:36,529 pending: deque([State(pc_initial=134 nstack_initial=0), State(pc_initial=138 nstack_initial=0), State(pc_initial=146 nstack_initial=0)])
DEBUG 2022-02-08 17:11:36,529 pending: deque([State(pc_initial=138 nstack_initial=0), State(pc_initial=146 nstack_initial=0)])
DEBUG 2022-02-08 17:11:36,529 stack: []
DEBUG 2022-02-08 17:11:36,529 dispatch pc=138, inst=LOAD_GLOBAL(arg=1, lineno=1652)
DEBUG 2022-02-08 17:11:36,529 stack []
DEBUG 2022-02-08 17:11:36,529 dispatch pc=140, inst=LOAD_CONST(arg=3, lineno=1652)
DEBUG 2022-02-08 17:11:36,529 stack ['$138load_global.0']
DEBUG 2022-02-08 17:11:36,529 dispatch pc=142, inst=CALL_FUNCTION(arg=1, lineno=1652)
DEBUG 2022-02-08 17:11:36,529 stack ['$138load_global.0', '$const140.1']
DEBUG 2022-02-08 17:11:36,529 dispatch pc=144, inst=RAISE_VARARGS(arg=1, lineno=1652)
DEBUG 2022-02-08 17:11:36,529 stack ['$142call_function.2']
DEBUG 2022-02-08 17:11:36,529 end state. edges=[]
DEBUG 2022-02-08 17:11:36,529 pending: deque([State(pc_initial=146 nstack_initial=0)])
DEBUG 2022-02-08 17:11:36,529 stack: []
DEBUG 2022-02-08 17:11:36,529 dispatch pc=146, inst=LOAD_FAST(arg=7, lineno=1653)
DEBUG 2022-02-08 17:11:36,529 stack []
DEBUG 2022-02-08 17:11:36,529 dispatch pc=148, inst=LOAD_FAST(arg=1, lineno=1653)
DEBUG 2022-02-08 17:11:36,529 stack ['$inferred146.0']
DEBUG 2022-02-08 17:11:36,529 dispatch pc=150, inst=LOAD_FAST(arg=6, lineno=1653)
DEBUG 2022-02-08 17:11:36,529 stack ['$inferred146.0', '$shape148.1']
DEBUG 2022-02-08 17:11:36,529 dispatch pc=152, inst=STORE_SUBSCR(arg=None, lineno=1653)
DEBUG 2022-02-08 17:11:36,529 stack ['$inferred146.0', '$shape148.1', '$neg_ax150.2']
DEBUG 2022-02-08 17:11:36,529 dispatch pc=154, inst=JUMP_FORWARD(arg=8, lineno=1653)
DEBUG 2022-02-08 17:11:36,529 stack []
DEBUG 2022-02-08 17:11:36,529 end state. edges=[Edge(pc=164, stack=(), blockstack=(), npush=0)]
DEBUG 2022-02-08 17:11:36,529 pending: deque([State(pc_initial=164 nstack_initial=0)])
DEBUG 2022-02-08 17:11:36,529 -------------------------Prune PHIs-------------------------
DEBUG 2022-02-08 17:11:36,529 Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=18 nstack_initial=1): {'$phi18.0'},
             State(pc_initial=20 nstack_initial=2): {'$phi20.1'},
             State(pc_initial=34 nstack_initial=1): set(),
             State(pc_initial=48 nstack_initial=1): set(),
             State(pc_initial=58 nstack_initial=0): set(),
             State(pc_initial=66 nstack_initial=0): set(),
             State(pc_initial=74 nstack_initial=0): set(),
             State(pc_initial=84 nstack_initial=0): set(),
             State(pc_initial=92 nstack_initial=0): set(),
             State(pc_initial=100 nstack_initial=0): set(),
             State(pc_initial=114 nstack_initial=0): set(),
             State(pc_initial=134 nstack_initial=0): set(),
             State(pc_initial=138 nstack_initial=0): set(),
             State(pc_initial=146 nstack_initial=0): set(),
             State(pc_initial=156 nstack_initial=0): set(),
             State(pc_initial=164 nstack_initial=0): set()})
DEBUG 2022-02-08 17:11:36,529 defmap: {'$phi18.0': State(pc_initial=0 nstack_initial=0),
 '$phi20.1': State(pc_initial=18 nstack_initial=1)}
DEBUG 2022-02-08 17:11:36,529 phismap: defaultdict(<class 'set'>,
            {'$phi18.0': {('$16get_iter.5',
                           State(pc_initial=0 nstack_initial=0)),
                          ('$phi34.0', State(pc_initial=34 nstack_initial=1)),
                          ('$phi48.0', State(pc_initial=48 nstack_initial=1))},
             '$phi20.0': {('$phi18.0', State(pc_initial=18 nstack_initial=1))},
             '$phi20.1': {('$18for_iter.2',
                           State(pc_initial=18 nstack_initial=1))},
             '$phi34.0': {('$phi20.0', State(pc_initial=20 nstack_initial=2))},
             '$phi48.0': {('$phi20.0', State(pc_initial=20 nstack_initial=2))}})
DEBUG 2022-02-08 17:11:36,529 changing phismap: defaultdict(<class 'set'>,
            {'$phi18.0': {('$16get_iter.5',
                           State(pc_initial=0 nstack_initial=0)),
                          ('$phi20.0', State(pc_initial=20 nstack_initial=2))},
             '$phi20.0': {('$16get_iter.5',
                           State(pc_initial=0 nstack_initial=0)),
                          ('$phi20.0', State(pc_initial=20 nstack_initial=2))},
             '$phi20.1': {('$18for_iter.2',
                           State(pc_initial=18 nstack_initial=1))},
             '$phi34.0': {('$16get_iter.5',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi48.0': {('$16get_iter.5',
                           State(pc_initial=0 nstack_initial=0))}})
DEBUG 2022-02-08 17:11:36,529 changing phismap: defaultdict(<class 'set'>,
            {'$phi18.0': {('$16get_iter.5',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi20.0': {('$16get_iter.5',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi20.1': {('$18for_iter.2',
                           State(pc_initial=18 nstack_initial=1))},
             '$phi34.0': {('$16get_iter.5',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi48.0': {('$16get_iter.5',
                           State(pc_initial=0 nstack_initial=0))}})
DEBUG 2022-02-08 17:11:36,529 changing phismap: defaultdict(<class 'set'>,
            {'$phi18.0': {('$16get_iter.5',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi20.0': {('$16get_iter.5',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi20.1': {('$18for_iter.2',
                           State(pc_initial=18 nstack_initial=1))},
             '$phi34.0': {('$16get_iter.5',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi48.0': {('$16get_iter.5',
                           State(pc_initial=0 nstack_initial=0))}})
DEBUG 2022-02-08 17:11:36,529 keep phismap: {'$phi18.0': {('$16get_iter.5', State(pc_initial=0 nstack_initial=0))},
 '$phi20.1': {('$18for_iter.2', State(pc_initial=18 nstack_initial=1))}}
DEBUG 2022-02-08 17:11:36,529 new_out: defaultdict(<class 'dict'>,
            {State(pc_initial=0 nstack_initial=0): {'$phi18.0': '$16get_iter.5'},
             State(pc_initial=18 nstack_initial=1): {'$phi20.1': '$18for_iter.2'}})
DEBUG 2022-02-08 17:11:36,529 ----------------------DONE Prune PHIs-----------------------
DEBUG 2022-02-08 17:11:36,529 block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$const2.0'}), (4, {'value': '$const2.0'}), (6, {'res': '$const6.1'}), (8, {'value': '$const6.1'}), (10, {'res': '$10load_global.2'}), (12, {'res': '$shape12.3'}), (14, {'func': '$10load_global.2', 'args': ['$shape12.3'], 'res': '$14call_function.4'}), (16, {'value': '$14call_function.4', 'res': '$16get_iter.5'})), outgoing_phis={'$phi18.0': '$16get_iter.5'}, blockstack=(), active_try_block=None, outgoing_edgepushed={18: ('$16get_iter.5',)})
DEBUG 2022-02-08 17:11:36,529 block_infos State(pc_initial=18 nstack_initial=1):
AdaptBlockInfo(insts=((18, {'iterator': '$phi18.0', 'pair': '$18for_iter.1', 'indval': '$18for_iter.2', 'pred': '$18for_iter.3'}),), outgoing_phis={'$phi20.1': '$18for_iter.2'}, blockstack=(), active_try_block=None, outgoing_edgepushed={58: (), 20: ('$phi18.0', '$18for_iter.2')})
DEBUG 2022-02-08 17:11:36,529 block_infos State(pc_initial=20 nstack_initial=2):
AdaptBlockInfo(insts=((20, {'iterable': '$phi20.1', 'stores': ['$20unpack_sequence.2', '$20unpack_sequence.3'], 'tupleobj': '$20unpack_sequence.4'}), (22, {'value': '$20unpack_sequence.2'}), (24, {'value': '$20unpack_sequence.3'}), (26, {'res': '$s26.5'}), (28, {'res': '$const28.6'}), (30, {'lhs': '$s26.5', 'rhs': '$const28.6', 'res': '$30compare_op.7'}), (32, {'pred': '$30compare_op.7'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={34: ('$phi20.0',), 48: ('$phi20.0',)})
DEBUG 2022-02-08 17:11:36,529 block_infos State(pc_initial=34 nstack_initial=1):
AdaptBlockInfo(insts=((34, {'res': '$num_neg_value34.1'}), (36, {'res': '$const36.2'}), (38, {'lhs': '$num_neg_value34.1', 'rhs': '$const36.2', 'res': '$38inplace_add.3'}), (40, {'value': '$38inplace_add.3'}), (42, {'res': '$ax42.4'}), (44, {'value': '$ax42.4'}), (46, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={18: ('$phi34.0',)})
DEBUG 2022-02-08 17:11:36,529 block_infos State(pc_initial=48 nstack_initial=1):
AdaptBlockInfo(insts=((48, {'res': '$known_size48.1'}), (50, {'res': '$s50.2'}), (52, {'lhs': '$known_size48.1', 'rhs': '$s50.2', 'res': '$52inplace_multiply.3'}), (54, {'value': '$52inplace_multiply.3'}), (56, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={18: ('$phi48.0',)})
DEBUG 2022-02-08 17:11:36,529 block_infos State(pc_initial=58 nstack_initial=0):
AdaptBlockInfo(insts=((58, {'res': '$num_neg_value58.0'}), (60, {'res': '$const60.1'}), (62, {'lhs': '$num_neg_value58.0', 'rhs': '$const60.1', 'res': '$62compare_op.2'}), (64, {'pred': '$62compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={66: (), 84: ()})
DEBUG 2022-02-08 17:11:36,529 block_infos State(pc_initial=66 nstack_initial=0):
AdaptBlockInfo(insts=((66, {'res': '$origsize66.0'}), (68, {'res': '$known_size68.1'}), (70, {'lhs': '$origsize66.0', 'rhs': '$known_size68.1', 'res': '$70compare_op.2'}), (72, {'pred': '$70compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={74: (), 164: ()})
DEBUG 2022-02-08 17:11:36,529 block_infos State(pc_initial=74 nstack_initial=0):
AdaptBlockInfo(insts=((74, {'res': '$74load_global.0'}), (76, {'res': '$const76.1'}), (78, {'func': '$74load_global.0', 'args': ['$const76.1'], 'res': '$78call_function.2'}), (80, {'exc': '$78call_function.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG 2022-02-08 17:11:36,529 block_infos State(pc_initial=84 nstack_initial=0):
AdaptBlockInfo(insts=((84, {'res': '$num_neg_value84.0'}), (86, {'res': '$const86.1'}), (88, {'lhs': '$num_neg_value84.0', 'rhs': '$const86.1', 'res': '$88compare_op.2'}), (90, {'pred': '$88compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={92: (), 156: ()})
DEBUG 2022-02-08 17:11:36,529 block_infos State(pc_initial=92 nstack_initial=0):
AdaptBlockInfo(insts=((92, {'res': '$known_size92.0'}), (94, {'res': '$const94.1'}), (96, {'lhs': '$known_size92.0', 'rhs': '$const94.1', 'res': '$96compare_op.2'}), (98, {'pred': '$96compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={100: (), 114: ()})
DEBUG 2022-02-08 17:11:36,529 block_infos State(pc_initial=100 nstack_initial=0):
AdaptBlockInfo(insts=((100, {'res': '$const100.0'}), (102, {'value': '$const100.0'}), (104, {'res': '$origsize104.1'}), (106, {'res': '$const106.2'}), (108, {'lhs': '$origsize104.1', 'rhs': '$const106.2', 'res': '$108compare_op.3'}), (110, {'value': '$108compare_op.3'}), (112, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={134: ()})
DEBUG 2022-02-08 17:11:36,529 block_infos State(pc_initial=114 nstack_initial=0):
AdaptBlockInfo(insts=((114, {'res': '$origsize114.0'}), (116, {'res': '$known_size116.1'}), (118, {'lhs': '$origsize114.0', 'rhs': '$known_size116.1', 'res': '$118binary_floor_divide.2'}), (120, {'value': '$118binary_floor_divide.2'}), (122, {'res': '$origsize122.3'}), (124, {'res': '$known_size124.4'}), (126, {'lhs': '$origsize122.3', 'rhs': '$known_size124.4', 'res': '$126binary_modulo.5'}), (128, {'res': '$const128.6'}), (130, {'lhs': '$126binary_modulo.5', 'rhs': '$const128.6', 'res': '$130compare_op.7'}), (132, {'value': '$130compare_op.7'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={134: ()})
DEBUG 2022-02-08 17:11:36,529 block_infos State(pc_initial=134 nstack_initial=0):
AdaptBlockInfo(insts=((134, {'res': '$ok134.0'}), (136, {'pred': '$ok134.0'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={138: (), 146: ()})
DEBUG 2022-02-08 17:11:36,529 block_infos State(pc_initial=138 nstack_initial=0):
AdaptBlockInfo(insts=((138, {'res': '$138load_global.0'}), (140, {'res': '$const140.1'}), (142, {'func': '$138load_global.0', 'args': ['$const140.1'], 'res': '$142call_function.2'}), (144, {'exc': '$142call_function.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG 2022-02-08 17:11:36,537 block_infos State(pc_initial=146 nstack_initial=0):
AdaptBlockInfo(insts=((146, {'res': '$inferred146.0'}), (148, {'res': '$shape148.1'}), (150, {'res': '$neg_ax150.2'}), (152, {'target': '$shape148.1', 'index': '$neg_ax150.2', 'value': '$inferred146.0'}), (154, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={164: ()})
DEBUG 2022-02-08 17:11:36,537 block_infos State(pc_initial=156 nstack_initial=0):
AdaptBlockInfo(insts=((156, {'res': '$156load_global.0'}), (158, {'res': '$const158.1'}), (160, {'func': '$156load_global.0', 'args': ['$const158.1'], 'res': '$160call_function.2'}), (162, {'exc': '$160call_function.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG 2022-02-08 17:11:36,537 block_infos State(pc_initial=164 nstack_initial=0):
AdaptBlockInfo(insts=((164, {'res': '$const164.0'}), (166, {'retval': '$const164.0', 'castval': '$166return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG 2022-02-08 17:11:36,539 label 0:
    origsize = arg(0, name=origsize)         ['origsize']
    shape = arg(1, name=shape)               ['shape']
    num_neg_value = const(int, 0)            ['num_neg_value']
    known_size = const(int, 1)               ['known_size']
    $10load_global.2 = global(enumerate: <class 'enumerate'>) ['$10load_global.2']
    $14call_function.4 = call $10load_global.2(shape, func=$10load_global.2, args=[Var(shape, arrayobj.py:1630)], kws=(), vararg=None, target=None) ['$10load_global.2', '$14call_function.4', 'shape']
    $16get_iter.5 = getiter(value=$14call_function.4) ['$14call_function.4', '$16get_iter.5']
    $phi18.0 = $16get_iter.5                 ['$16get_iter.5', '$phi18.0']
    jump 18                                  []
label 18:
    $18for_iter.1 = iternext(value=$phi18.0) ['$18for_iter.1', '$phi18.0']
    $18for_iter.2 = pair_first(value=$18for_iter.1) ['$18for_iter.1', '$18for_iter.2']
    $18for_iter.3 = pair_second(value=$18for_iter.1) ['$18for_iter.1', '$18for_iter.3']
    $phi20.1 = $18for_iter.2                 ['$18for_iter.2', '$phi20.1']
    branch $18for_iter.3, 20, 58             ['$18for_iter.3']
label 20:
    $20unpack_sequence.4 = exhaust_iter(value=$phi20.1, count=2) ['$20unpack_sequence.4', '$phi20.1']
    $20unpack_sequence.2 = static_getitem(value=$20unpack_sequence.4, index=0, index_var=None, fn=<built-in function getitem>) ['$20unpack_sequence.2', '$20unpack_sequence.4']
    $20unpack_sequence.3 = static_getitem(value=$20unpack_sequence.4, index=1, index_var=None, fn=<built-in function getitem>) ['$20unpack_sequence.3', '$20unpack_sequence.4']
    ax = $20unpack_sequence.2                ['$20unpack_sequence.2', 'ax']
    s = $20unpack_sequence.3                 ['$20unpack_sequence.3', 's']
    $const28.6 = const(int, 0)               ['$const28.6']
    $30compare_op.7 = s < $const28.6         ['$30compare_op.7', '$const28.6', 's']
    bool32 = global(bool: <class 'bool'>)    ['bool32']
    $32pred = call bool32($30compare_op.7, func=bool32, args=(Var($30compare_op.7, arrayobj.py:1633),), kws=(), vararg=None, target=None) ['$30compare_op.7', '$32pred', 'bool32']
    branch $32pred, 34, 48                   ['$32pred']
label 34:
    $const36.2 = const(int, 1)               ['$const36.2']
    $38inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=num_neg_value, rhs=$const36.2, static_lhs=Undefined, static_rhs=Undefined) ['$38inplace_add.3', '$const36.2', 'num_neg_value']
    num_neg_value = $38inplace_add.3         ['$38inplace_add.3', 'num_neg_value']
    neg_ax = ax                              ['ax', 'neg_ax']
    jump 18                                  []
label 48:
    $52inplace_multiply.3 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=known_size, rhs=s, static_lhs=Undefined, static_rhs=Undefined) ['$52inplace_multiply.3', 'known_size', 's']
    known_size = $52inplace_multiply.3       ['$52inplace_multiply.3', 'known_size']
    jump 18                                  []
label 58:
    $const60.1 = const(int, 0)               ['$const60.1']
    $62compare_op.2 = num_neg_value == $const60.1 ['$62compare_op.2', '$const60.1', 'num_neg_value']
    bool64 = global(bool: <class 'bool'>)    ['bool64']
    $64pred = call bool64($62compare_op.2, func=bool64, args=(Var($62compare_op.2, arrayobj.py:1639),), kws=(), vararg=None, target=None) ['$62compare_op.2', '$64pred', 'bool64']
    branch $64pred, 66, 84                   ['$64pred']
label 66:
    $70compare_op.2 = origsize != known_size ['$70compare_op.2', 'known_size', 'origsize']
    bool72 = global(bool: <class 'bool'>)    ['bool72']
    $72pred = call bool72($70compare_op.2, func=bool72, args=(Var($70compare_op.2, arrayobj.py:1640),), kws=(), vararg=None, target=None) ['$70compare_op.2', '$72pred', 'bool72']
    branch $72pred, 74, 164                  ['$72pred']
label 74:
    $74load_global.0 = global(ValueError: <class 'ValueError'>) ['$74load_global.0']
    $const76.1 = const(str, total size of new array must be unchanged) ['$const76.1']
    $78call_function.2 = call $74load_global.0($const76.1, func=$74load_global.0, args=[Var($const76.1, arrayobj.py:1641)], kws=(), vararg=None, target=None) ['$74load_global.0', '$78call_function.2', '$const76.1']
    raise $78call_function.2                 ['$78call_function.2']
label 84:
    $const86.1 = const(int, 1)               ['$const86.1']
    $88compare_op.2 = num_neg_value == $const86.1 ['$88compare_op.2', '$const86.1', 'num_neg_value']
    bool90 = global(bool: <class 'bool'>)    ['bool90']
    $90pred = call bool90($88compare_op.2, func=bool90, args=(Var($88compare_op.2, arrayobj.py:1643),), kws=(), vararg=None, target=None) ['$88compare_op.2', '$90pred', 'bool90']
    branch $90pred, 92, 156                  ['$90pred']
label 92:
    $const94.1 = const(int, 0)               ['$const94.1']
    $96compare_op.2 = known_size == $const94.1 ['$96compare_op.2', '$const94.1', 'known_size']
    bool98 = global(bool: <class 'bool'>)    ['bool98']
    $98pred = call bool98($96compare_op.2, func=bool98, args=(Var($96compare_op.2, arrayobj.py:1645),), kws=(), vararg=None, target=None) ['$96compare_op.2', '$98pred', 'bool98']
    branch $98pred, 100, 114                 ['$98pred']
label 100:
    inferred = const(int, 0)                 ['inferred']
    $const106.2 = const(int, 0)              ['$const106.2']
    ok = origsize == $const106.2             ['$const106.2', 'ok', 'origsize']
    jump 134                                 []
label 114:
    inferred = origsize // known_size        ['inferred', 'known_size', 'origsize']
    $126binary_modulo.5 = origsize % known_size ['$126binary_modulo.5', 'known_size', 'origsize']
    $const128.6 = const(int, 0)              ['$const128.6']
    ok = $126binary_modulo.5 == $const128.6  ['$126binary_modulo.5', '$const128.6', 'ok']
    jump 134                                 []
label 134:
    bool136 = global(bool: <class 'bool'>)   ['bool136']
    $136pred = call bool136(ok, func=bool136, args=(Var(ok, arrayobj.py:1647),), kws=(), vararg=None, target=None) ['$136pred', 'bool136', 'ok']
    branch $136pred, 146, 138                ['$136pred']
label 138:
    $138load_global.0 = global(ValueError: <class 'ValueError'>) ['$138load_global.0']
    $const140.1 = const(str, total size of new array must be unchanged) ['$const140.1']
    $142call_function.2 = call $138load_global.0($const140.1, func=$138load_global.0, args=[Var($const140.1, arrayobj.py:1652)], kws=(), vararg=None, target=None) ['$138load_global.0', '$142call_function.2', '$const140.1']
    raise $142call_function.2                ['$142call_function.2']
label 146:
    shape[neg_ax] = inferred                 ['inferred', 'neg_ax', 'shape']
    jump 164                                 []
label 156:
    $156load_global.0 = global(ValueError: <class 'ValueError'>) ['$156load_global.0']
    $const158.1 = const(str, multiple negative shape values) ['$const158.1']
    $160call_function.2 = call $156load_global.0($const158.1, func=$156load_global.0, args=[Var($const158.1, arrayobj.py:1656)], kws=(), vararg=None, target=None) ['$156load_global.0', '$160call_function.2', '$const158.1']
    raise $160call_function.2                ['$160call_function.2']
label 164:
    $const164.0 = const(NoneType, None)      ['$const164.0']
    $166return_value.1 = cast(value=$const164.0) ['$166return_value.1', '$const164.0']
    return $166return_value.1                ['$166return_value.1']

DEBUG 2022-02-08 17:11:36,547 ==== SSA block analysis pass on 0
DEBUG 2022-02-08 17:11:36,547 Running <numba.core.ssa._GatherDefsHandler object at 0x000001E9F8070D90>
DEBUG 2022-02-08 17:11:36,547 on stmt: origsize = arg(0, name=origsize)
DEBUG 2022-02-08 17:11:36,547 on stmt: shape = arg(1, name=shape)
DEBUG 2022-02-08 17:11:36,547 on stmt: num_neg_value = const(int, 0)
DEBUG 2022-02-08 17:11:36,547 on stmt: known_size = const(int, 1)
DEBUG 2022-02-08 17:11:36,547 on stmt: $10load_global.2 = global(enumerate: <class 'enumerate'>)
DEBUG 2022-02-08 17:11:36,547 on stmt: $14call_function.4 = call $10load_global.2(shape, func=$10load_global.2, args=[Var(shape, arrayobj.py:1630)], kws=(), vararg=None, target=None)
DEBUG 2022-02-08 17:11:36,549 on stmt: $16get_iter.5 = getiter(value=$14call_function.4)
DEBUG 2022-02-08 17:11:36,549 on stmt: $phi18.0 = $16get_iter.5
DEBUG 2022-02-08 17:11:36,549 on stmt: jump 18
DEBUG 2022-02-08 17:11:36,549 ==== SSA block analysis pass on 18
DEBUG 2022-02-08 17:11:36,549 Running <numba.core.ssa._GatherDefsHandler object at 0x000001E9F8070D90>
DEBUG 2022-02-08 17:11:36,549 on stmt: $18for_iter.1 = iternext(value=$phi18.0)
DEBUG 2022-02-08 17:11:36,549 on stmt: $18for_iter.2 = pair_first(value=$18for_iter.1)
DEBUG 2022-02-08 17:11:36,549 on stmt: $18for_iter.3 = pair_second(value=$18for_iter.1)
DEBUG 2022-02-08 17:11:36,549 on stmt: $phi20.1 = $18for_iter.2
DEBUG 2022-02-08 17:11:36,549 on stmt: branch $18for_iter.3, 20, 58
DEBUG 2022-02-08 17:11:36,549 ==== SSA block analysis pass on 20
DEBUG 2022-02-08 17:11:36,549 Running <numba.core.ssa._GatherDefsHandler object at 0x000001E9F8070D90>
DEBUG 2022-02-08 17:11:36,549 on stmt: $20unpack_sequence.4 = exhaust_iter(value=$phi20.1, count=2)
DEBUG 2022-02-08 17:11:36,549 on stmt: $20unpack_sequence.2 = static_getitem(value=$20unpack_sequence.4, index=0, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-02-08 17:11:36,549 on stmt: $20unpack_sequence.3 = static_getitem(value=$20unpack_sequence.4, index=1, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-02-08 17:11:36,549 on stmt: ax = $20unpack_sequence.2
DEBUG 2022-02-08 17:11:36,549 on stmt: s = $20unpack_sequence.3
DEBUG 2022-02-08 17:11:36,549 on stmt: $const28.6 = const(int, 0)
DEBUG 2022-02-08 17:11:36,549 on stmt: $30compare_op.7 = s < $const28.6
DEBUG 2022-02-08 17:11:36,549 on stmt: bool32 = global(bool: <class 'bool'>)
DEBUG 2022-02-08 17:11:36,549 on stmt: $32pred = call bool32($30compare_op.7, func=bool32, args=(Var($30compare_op.7, arrayobj.py:1633),), kws=(), vararg=None, target=None)
DEBUG 2022-02-08 17:11:36,549 on stmt: branch $32pred, 34, 48
DEBUG 2022-02-08 17:11:36,549 ==== SSA block analysis pass on 34
DEBUG 2022-02-08 17:11:36,549 Running <numba.core.ssa._GatherDefsHandler object at 0x000001E9F8070D90>
DEBUG 2022-02-08 17:11:36,549 on stmt: $const36.2 = const(int, 1)
DEBUG 2022-02-08 17:11:36,549 on stmt: $38inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=num_neg_value, rhs=$const36.2, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-08 17:11:36,549 on stmt: num_neg_value = $38inplace_add.3
DEBUG 2022-02-08 17:11:36,549 on stmt: neg_ax = ax
DEBUG 2022-02-08 17:11:36,549 on stmt: jump 165
DEBUG 2022-02-08 17:11:36,549 ==== SSA block analysis pass on 48
DEBUG 2022-02-08 17:11:36,549 Running <numba.core.ssa._GatherDefsHandler object at 0x000001E9F8070D90>
DEBUG 2022-02-08 17:11:36,549 on stmt: $52inplace_multiply.3 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=known_size, rhs=s, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-08 17:11:36,549 on stmt: known_size = $52inplace_multiply.3
DEBUG 2022-02-08 17:11:36,549 on stmt: jump 165
DEBUG 2022-02-08 17:11:36,549 ==== SSA block analysis pass on 58
DEBUG 2022-02-08 17:11:36,549 Running <numba.core.ssa._GatherDefsHandler object at 0x000001E9F8070D90>
DEBUG 2022-02-08 17:11:36,549 on stmt: $const60.1 = const(int, 0)
DEBUG 2022-02-08 17:11:36,549 on stmt: $62compare_op.2 = num_neg_value == $const60.1
DEBUG 2022-02-08 17:11:36,549 on stmt: bool64 = global(bool: <class 'bool'>)
DEBUG 2022-02-08 17:11:36,549 on stmt: $64pred = call bool64($62compare_op.2, func=bool64, args=(Var($62compare_op.2, arrayobj.py:1639),), kws=(), vararg=None, target=None)
DEBUG 2022-02-08 17:11:36,549 on stmt: branch $64pred, 66, 84
DEBUG 2022-02-08 17:11:36,549 ==== SSA block analysis pass on 66
DEBUG 2022-02-08 17:11:36,549 Running <numba.core.ssa._GatherDefsHandler object at 0x000001E9F8070D90>
DEBUG 2022-02-08 17:11:36,549 on stmt: $70compare_op.2 = origsize != known_size
DEBUG 2022-02-08 17:11:36,549 on stmt: bool72 = global(bool: <class 'bool'>)
DEBUG 2022-02-08 17:11:36,549 on stmt: $72pred = call bool72($70compare_op.2, func=bool72, args=(Var($70compare_op.2, arrayobj.py:1640),), kws=(), vararg=None, target=None)
DEBUG 2022-02-08 17:11:36,549 on stmt: branch $72pred, 74, 164
DEBUG 2022-02-08 17:11:36,549 ==== SSA block analysis pass on 74
DEBUG 2022-02-08 17:11:36,549 Running <numba.core.ssa._GatherDefsHandler object at 0x000001E9F8070D90>
DEBUG 2022-02-08 17:11:36,549 on stmt: $74load_global.0 = global(ValueError: <class 'ValueError'>)
DEBUG 2022-02-08 17:11:36,549 on stmt: $const76.1 = const(str, total size of new array must be unchanged)
DEBUG 2022-02-08 17:11:36,549 on stmt: $78call_function.2 = call $74load_global.0($const76.1, func=$74load_global.0, args=[Var($const76.1, arrayobj.py:1641)], kws=(), vararg=None, target=None)
DEBUG 2022-02-08 17:11:36,549 on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
DEBUG 2022-02-08 17:11:36,549 ==== SSA block analysis pass on 84
DEBUG 2022-02-08 17:11:36,549 Running <numba.core.ssa._GatherDefsHandler object at 0x000001E9F8070D90>
DEBUG 2022-02-08 17:11:36,549 on stmt: $const86.1 = const(int, 1)
DEBUG 2022-02-08 17:11:36,549 on stmt: $88compare_op.2 = num_neg_value == $const86.1
DEBUG 2022-02-08 17:11:36,549 on stmt: bool90 = global(bool: <class 'bool'>)
DEBUG 2022-02-08 17:11:36,549 on stmt: $90pred = call bool90($88compare_op.2, func=bool90, args=(Var($88compare_op.2, arrayobj.py:1643),), kws=(), vararg=None, target=None)
DEBUG 2022-02-08 17:11:36,549 on stmt: branch $90pred, 92, 156
DEBUG 2022-02-08 17:11:36,549 ==== SSA block analysis pass on 92
DEBUG 2022-02-08 17:11:36,549 Running <numba.core.ssa._GatherDefsHandler object at 0x000001E9F8070D90>
DEBUG 2022-02-08 17:11:36,549 on stmt: $const94.1 = const(int, 0)
DEBUG 2022-02-08 17:11:36,549 on stmt: $96compare_op.2 = known_size == $const94.1
DEBUG 2022-02-08 17:11:36,549 on stmt: bool98 = global(bool: <class 'bool'>)
DEBUG 2022-02-08 17:11:36,549 on stmt: $98pred = call bool98($96compare_op.2, func=bool98, args=(Var($96compare_op.2, arrayobj.py:1645),), kws=(), vararg=None, target=None)
DEBUG 2022-02-08 17:11:36,549 on stmt: branch $98pred, 100, 114
DEBUG 2022-02-08 17:11:36,549 ==== SSA block analysis pass on 100
DEBUG 2022-02-08 17:11:36,549 Running <numba.core.ssa._GatherDefsHandler object at 0x000001E9F8070D90>
DEBUG 2022-02-08 17:11:36,549 on stmt: inferred = const(int, 0)
DEBUG 2022-02-08 17:11:36,549 on stmt: $const106.2 = const(int, 0)
DEBUG 2022-02-08 17:11:36,549 on stmt: ok = origsize == $const106.2
DEBUG 2022-02-08 17:11:36,549 on stmt: jump 134
DEBUG 2022-02-08 17:11:36,549 ==== SSA block analysis pass on 114
DEBUG 2022-02-08 17:11:36,549 Running <numba.core.ssa._GatherDefsHandler object at 0x000001E9F8070D90>
DEBUG 2022-02-08 17:11:36,549 on stmt: inferred = origsize // known_size
DEBUG 2022-02-08 17:11:36,549 on stmt: $126binary_modulo.5 = origsize % known_size
DEBUG 2022-02-08 17:11:36,549 on stmt: $const128.6 = const(int, 0)
DEBUG 2022-02-08 17:11:36,549 on stmt: ok = $126binary_modulo.5 == $const128.6
DEBUG 2022-02-08 17:11:36,549 on stmt: jump 134
DEBUG 2022-02-08 17:11:36,549 ==== SSA block analysis pass on 134
DEBUG 2022-02-08 17:11:36,549 Running <numba.core.ssa._GatherDefsHandler object at 0x000001E9F8070D90>
DEBUG 2022-02-08 17:11:36,549 on stmt: bool136 = global(bool: <class 'bool'>)
DEBUG 2022-02-08 17:11:36,549 on stmt: $136pred = call bool136(ok, func=bool136, args=(Var(ok, arrayobj.py:1647),), kws=(), vararg=None, target=None)
DEBUG 2022-02-08 17:11:36,549 on stmt: branch $136pred, 146, 138
DEBUG 2022-02-08 17:11:36,549 ==== SSA block analysis pass on 138
DEBUG 2022-02-08 17:11:36,549 Running <numba.core.ssa._GatherDefsHandler object at 0x000001E9F8070D90>
DEBUG 2022-02-08 17:11:36,549 on stmt: $138load_global.0 = global(ValueError: <class 'ValueError'>)
DEBUG 2022-02-08 17:11:36,549 on stmt: $const140.1 = const(str, total size of new array must be unchanged)
DEBUG 2022-02-08 17:11:36,549 on stmt: $142call_function.2 = call $138load_global.0($const140.1, func=$138load_global.0, args=[Var($const140.1, arrayobj.py:1652)], kws=(), vararg=None, target=None)
DEBUG 2022-02-08 17:11:36,549 on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
DEBUG 2022-02-08 17:11:36,549 ==== SSA block analysis pass on 146
DEBUG 2022-02-08 17:11:36,557 Running <numba.core.ssa._GatherDefsHandler object at 0x000001E9F8070D90>
DEBUG 2022-02-08 17:11:36,557 on stmt: shape[neg_ax] = inferred
DEBUG 2022-02-08 17:11:36,557 on stmt: jump 164
DEBUG 2022-02-08 17:11:36,557 ==== SSA block analysis pass on 156
DEBUG 2022-02-08 17:11:36,557 Running <numba.core.ssa._GatherDefsHandler object at 0x000001E9F8070D90>
DEBUG 2022-02-08 17:11:36,557 on stmt: $156load_global.0 = global(ValueError: <class 'ValueError'>)
DEBUG 2022-02-08 17:11:36,557 on stmt: $const158.1 = const(str, multiple negative shape values)
DEBUG 2022-02-08 17:11:36,557 on stmt: $160call_function.2 = call $156load_global.0($const158.1, func=$156load_global.0, args=[Var($const158.1, arrayobj.py:1656)], kws=(), vararg=None, target=None)
DEBUG 2022-02-08 17:11:36,557 on stmt: <static> raise <class 'ValueError'>('multiple negative shape values')
DEBUG 2022-02-08 17:11:36,557 ==== SSA block analysis pass on 164
DEBUG 2022-02-08 17:11:36,557 Running <numba.core.ssa._GatherDefsHandler object at 0x000001E9F8070D90>
DEBUG 2022-02-08 17:11:36,557 on stmt: $const164.0 = const(NoneType, None)
DEBUG 2022-02-08 17:11:36,557 on stmt: $166return_value.1 = cast(value=$const164.0)
DEBUG 2022-02-08 17:11:36,557 on stmt: return $166return_value.1
DEBUG 2022-02-08 17:11:36,557 ==== SSA block analysis pass on 165
DEBUG 2022-02-08 17:11:36,557 Running <numba.core.ssa._GatherDefsHandler object at 0x000001E9F8070D90>
DEBUG 2022-02-08 17:11:36,557 on stmt: jump 18
DEBUG 2022-02-08 17:11:36,559 defs defaultdict(<class 'list'>,
            {'$10load_global.2': [<numba.core.ir.Assign object at 0x000001E9F8059580>],
             '$126binary_modulo.5': [<numba.core.ir.Assign object at 0x000001E9F806CFD0>],
             '$136pred': [<numba.core.ir.Assign object at 0x000001E9F806E580>],
             '$138load_global.0': [<numba.core.ir.Assign object at 0x000001E9F806E7C0>],
             '$142call_function.2': [<numba.core.ir.Assign object at 0x000001E9F806EB20>],
             '$14call_function.4': [<numba.core.ir.Assign object at 0x000001E9F8059880>],
             '$156load_global.0': [<numba.core.ir.Assign object at 0x000001E9F8070280>],
             '$160call_function.2': [<numba.core.ir.Assign object at 0x000001E9F80705E0>],
             '$166return_value.1': [<numba.core.ir.Assign object at 0x000001E9F8070A00>],
             '$16get_iter.5': [<numba.core.ir.Assign object at 0x000001E9F80599A0>],
             '$18for_iter.1': [<numba.core.ir.Assign object at 0x000001E9F8059C10>],
             '$18for_iter.2': [<numba.core.ir.Assign object at 0x000001E9F8059D30>],
             '$18for_iter.3': [<numba.core.ir.Assign object at 0x000001E9F8059E50>],
             '$20unpack_sequence.2': [<numba.core.ir.Assign object at 0x000001E9F805F340>],
             '$20unpack_sequence.3': [<numba.core.ir.Assign object at 0x000001E9F805F460>],
             '$20unpack_sequence.4': [<numba.core.ir.Assign object at 0x000001E9F805F1F0>],
             '$30compare_op.7': [<numba.core.ir.Assign object at 0x000001E9F805FA90>],
             '$32pred': [<numba.core.ir.Assign object at 0x000001E9F805FD00>],
             '$38inplace_add.3': [<numba.core.ir.Assign object at 0x000001E9F8066250>],
             '$52inplace_multiply.3': [<numba.core.ir.Assign object at 0x000001E9F80669D0>],
             '$62compare_op.2': [<numba.core.ir.Assign object at 0x000001E9F8066F70>],
             '$64pred': [<numba.core.ir.Assign object at 0x000001E9F8068220>],
             '$70compare_op.2': [<numba.core.ir.Assign object at 0x000001E9F80686D0>],
             '$72pred': [<numba.core.ir.Assign object at 0x000001E9F8068940>],
             '$74load_global.0': [<numba.core.ir.Assign object at 0x000001E9F8068B20>],
             '$78call_function.2': [<numba.core.ir.Assign object at 0x000001E9F8068E80>],
             '$88compare_op.2': [<numba.core.ir.Assign object at 0x000001E9F806A430>],
             '$90pred': [<numba.core.ir.Assign object at 0x000001E9F806A6A0>],
             '$96compare_op.2': [<numba.core.ir.Assign object at 0x000001E9F806ABB0>],
             '$98pred': [<numba.core.ir.Assign object at 0x000001E9F806AE20>],
             '$const106.2': [<numba.core.ir.Assign object at 0x000001E9F806C460>],
             '$const128.6': [<numba.core.ir.Assign object at 0x000001E9F806E160>],
             '$const140.1': [<numba.core.ir.Assign object at 0x000001E9F806E940>],
             '$const158.1': [<numba.core.ir.Assign object at 0x000001E9F8070400>],
             '$const164.0': [<numba.core.ir.Assign object at 0x000001E9F8070880>],
             '$const28.6': [<numba.core.ir.Assign object at 0x000001E9F805F8E0>],
             '$const36.2': [<numba.core.ir.Assign object at 0x000001E9F80660A0>],
             '$const60.1': [<numba.core.ir.Assign object at 0x000001E9F8066DC0>],
             '$const76.1': [<numba.core.ir.Assign object at 0x000001E9F8068CA0>],
             '$const86.1': [<numba.core.ir.Assign object at 0x000001E9F806A280>],
             '$const94.1': [<numba.core.ir.Assign object at 0x000001E9F806AA00>],
             '$phi18.0': [<numba.core.ir.Assign object at 0x000001E9F8059160>],
             '$phi20.1': [<numba.core.ir.Assign object at 0x000001E9F8059B50>],
             'ax': [<numba.core.ir.Assign object at 0x000001E9F805F520>],
             'bool136': [<numba.core.ir.Assign object at 0x000001E9F806E460>],
             'bool32': [<numba.core.ir.Assign object at 0x000001E9F805FBE0>],
             'bool64': [<numba.core.ir.Assign object at 0x000001E9F8068100>],
             'bool72': [<numba.core.ir.Assign object at 0x000001E9F8068820>],
             'bool90': [<numba.core.ir.Assign object at 0x000001E9F806A580>],
             'bool98': [<numba.core.ir.Assign object at 0x000001E9F806AD00>],
             'inferred': [<numba.core.ir.Assign object at 0x000001E9F806C0A0>,
                          <numba.core.ir.Assign object at 0x000001E9F806CB50>],
             'known_size': [<numba.core.ir.Assign object at 0x000001E9F80592E0>,
                            <numba.core.ir.Assign object at 0x000001E9F8066A90>],
             'neg_ax': [<numba.core.ir.Assign object at 0x000001E9F8066520>],
             'num_neg_value': [<numba.core.ir.Assign object at 0x000001E9F8059040>,
                               <numba.core.ir.Assign object at 0x000001E9F8066310>],
             'ok': [<numba.core.ir.Assign object at 0x000001E9F806C610>,
                    <numba.core.ir.Assign object at 0x000001E9F806E310>],
             'origsize': [<numba.core.ir.Assign object at 0x000001E9F80493D0>],
             's': [<numba.core.ir.Assign object at 0x000001E9F805F640>],
             'shape': [<numba.core.ir.Assign object at 0x000001E9F8049E50>]})
DEBUG 2022-02-08 17:11:36,559 SSA violators {'inferred', 'known_size', 'ok', 'num_neg_value'}
DEBUG 2022-02-08 17:11:36,559 Fix SSA violator on var inferred
DEBUG 2022-02-08 17:11:36,559 ==== SSA block rewrite pass on 0
DEBUG 2022-02-08 17:11:36,559 Running <numba.core.ssa._FreshVarHandler object at 0x000001E9F805F0A0>
DEBUG 2022-02-08 17:11:36,559 on stmt: origsize = arg(0, name=origsize)
DEBUG 2022-02-08 17:11:36,559 on stmt: shape = arg(1, name=shape)
DEBUG 2022-02-08 17:11:36,559 on stmt: num_neg_value = const(int, 0)
DEBUG 2022-02-08 17:11:36,559 on stmt: known_size = const(int, 1)
DEBUG 2022-02-08 17:11:36,559 on stmt: $10load_global.2 = global(enumerate: <class 'enumerate'>)
DEBUG 2022-02-08 17:11:36,559 on stmt: $14call_function.4 = call $10load_global.2(shape, func=$10load_global.2, args=[Var(shape, arrayobj.py:1630)], kws=(), vararg=None, target=None)
DEBUG 2022-02-08 17:11:36,559 on stmt: $16get_iter.5 = getiter(value=$14call_function.4)
DEBUG 2022-02-08 17:11:36,559 on stmt: $phi18.0 = $16get_iter.5
DEBUG 2022-02-08 17:11:36,559 on stmt: jump 18
DEBUG 2022-02-08 17:11:36,559 ==== SSA block rewrite pass on 18
DEBUG 2022-02-08 17:11:36,559 Running <numba.core.ssa._FreshVarHandler object at 0x000001E9F805F0A0>
DEBUG 2022-02-08 17:11:36,559 on stmt: $18for_iter.1 = iternext(value=$phi18.0)
DEBUG 2022-02-08 17:11:36,559 on stmt: $18for_iter.2 = pair_first(value=$18for_iter.1)
DEBUG 2022-02-08 17:11:36,559 on stmt: $18for_iter.3 = pair_second(value=$18for_iter.1)
DEBUG 2022-02-08 17:11:36,559 on stmt: $phi20.1 = $18for_iter.2
DEBUG 2022-02-08 17:11:36,559 on stmt: branch $18for_iter.3, 20, 58
DEBUG 2022-02-08 17:11:36,559 ==== SSA block rewrite pass on 20
DEBUG 2022-02-08 17:11:36,559 Running <numba.core.ssa._FreshVarHandler object at 0x000001E9F805F0A0>
DEBUG 2022-02-08 17:11:36,559 on stmt: $20unpack_sequence.4 = exhaust_iter(value=$phi20.1, count=2)
DEBUG 2022-02-08 17:11:36,559 on stmt: $20unpack_sequence.2 = static_getitem(value=$20unpack_sequence.4, index=0, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-02-08 17:11:36,559 on stmt: $20unpack_sequence.3 = static_getitem(value=$20unpack_sequence.4, index=1, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-02-08 17:11:36,559 on stmt: ax = $20unpack_sequence.2
DEBUG 2022-02-08 17:11:36,559 on stmt: s = $20unpack_sequence.3
DEBUG 2022-02-08 17:11:36,559 on stmt: $const28.6 = const(int, 0)
DEBUG 2022-02-08 17:11:36,559 on stmt: $30compare_op.7 = s < $const28.6
DEBUG 2022-02-08 17:11:36,559 on stmt: bool32 = global(bool: <class 'bool'>)
DEBUG 2022-02-08 17:11:36,559 on stmt: $32pred = call bool32($30compare_op.7, func=bool32, args=(Var($30compare_op.7, arrayobj.py:1633),), kws=(), vararg=None, target=None)
DEBUG 2022-02-08 17:11:36,559 on stmt: branch $32pred, 34, 48
DEBUG 2022-02-08 17:11:36,559 ==== SSA block rewrite pass on 34
DEBUG 2022-02-08 17:11:36,559 Running <numba.core.ssa._FreshVarHandler object at 0x000001E9F805F0A0>
DEBUG 2022-02-08 17:11:36,559 on stmt: $const36.2 = const(int, 1)
DEBUG 2022-02-08 17:11:36,559 on stmt: $38inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=num_neg_value, rhs=$const36.2, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-08 17:11:36,559 on stmt: num_neg_value = $38inplace_add.3
DEBUG 2022-02-08 17:11:36,559 on stmt: neg_ax = ax
DEBUG 2022-02-08 17:11:36,559 on stmt: jump 165
DEBUG 2022-02-08 17:11:36,559 ==== SSA block rewrite pass on 48
DEBUG 2022-02-08 17:11:36,559 Running <numba.core.ssa._FreshVarHandler object at 0x000001E9F805F0A0>
DEBUG 2022-02-08 17:11:36,559 on stmt: $52inplace_multiply.3 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=known_size, rhs=s, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-08 17:11:36,559 on stmt: known_size = $52inplace_multiply.3
DEBUG 2022-02-08 17:11:36,559 on stmt: jump 165
DEBUG 2022-02-08 17:11:36,559 ==== SSA block rewrite pass on 58
DEBUG 2022-02-08 17:11:36,559 Running <numba.core.ssa._FreshVarHandler object at 0x000001E9F805F0A0>
DEBUG 2022-02-08 17:11:36,559 on stmt: $const60.1 = const(int, 0)
DEBUG 2022-02-08 17:11:36,559 on stmt: $62compare_op.2 = num_neg_value == $const60.1
DEBUG 2022-02-08 17:11:36,559 on stmt: bool64 = global(bool: <class 'bool'>)
DEBUG 2022-02-08 17:11:36,559 on stmt: $64pred = call bool64($62compare_op.2, func=bool64, args=(Var($62compare_op.2, arrayobj.py:1639),), kws=(), vararg=None, target=None)
DEBUG 2022-02-08 17:11:36,559 on stmt: branch $64pred, 66, 84
DEBUG 2022-02-08 17:11:36,559 ==== SSA block rewrite pass on 66
DEBUG 2022-02-08 17:11:36,559 Running <numba.core.ssa._FreshVarHandler object at 0x000001E9F805F0A0>
DEBUG 2022-02-08 17:11:36,559 on stmt: $70compare_op.2 = origsize != known_size
DEBUG 2022-02-08 17:11:36,559 on stmt: bool72 = global(bool: <class 'bool'>)
DEBUG 2022-02-08 17:11:36,559 on stmt: $72pred = call bool72($70compare_op.2, func=bool72, args=(Var($70compare_op.2, arrayobj.py:1640),), kws=(), vararg=None, target=None)
DEBUG 2022-02-08 17:11:36,559 on stmt: branch $72pred, 74, 164
DEBUG 2022-02-08 17:11:36,559 ==== SSA block rewrite pass on 74
DEBUG 2022-02-08 17:11:36,559 Running <numba.core.ssa._FreshVarHandler object at 0x000001E9F805F0A0>
DEBUG 2022-02-08 17:11:36,559 on stmt: $74load_global.0 = global(ValueError: <class 'ValueError'>)
DEBUG 2022-02-08 17:11:36,559 on stmt: $const76.1 = const(str, total size of new array must be unchanged)
DEBUG 2022-02-08 17:11:36,559 on stmt: $78call_function.2 = call $74load_global.0($const76.1, func=$74load_global.0, args=[Var($const76.1, arrayobj.py:1641)], kws=(), vararg=None, target=None)
DEBUG 2022-02-08 17:11:36,559 on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
DEBUG 2022-02-08 17:11:36,559 ==== SSA block rewrite pass on 84
DEBUG 2022-02-08 17:11:36,559 Running <numba.core.ssa._FreshVarHandler object at 0x000001E9F805F0A0>
DEBUG 2022-02-08 17:11:36,559 on stmt: $const86.1 = const(int, 1)
DEBUG 2022-02-08 17:11:36,559 on stmt: $88compare_op.2 = num_neg_value == $const86.1
DEBUG 2022-02-08 17:11:36,559 on stmt: bool90 = global(bool: <class 'bool'>)
DEBUG 2022-02-08 17:11:36,559 on stmt: $90pred = call bool90($88compare_op.2, func=bool90, args=(Var($88compare_op.2, arrayobj.py:1643),), kws=(), vararg=None, target=None)
DEBUG 2022-02-08 17:11:36,559 on stmt: branch $90pred, 92, 156
DEBUG 2022-02-08 17:11:36,559 ==== SSA block rewrite pass on 92
DEBUG 2022-02-08 17:11:36,559 Running <numba.core.ssa._FreshVarHandler object at 0x000001E9F805F0A0>
DEBUG 2022-02-08 17:11:36,559 on stmt: $const94.1 = const(int, 0)
DEBUG 2022-02-08 17:11:36,559 on stmt: $96compare_op.2 = known_size == $const94.1
DEBUG 2022-02-08 17:11:36,559 on stmt: bool98 = global(bool: <class 'bool'>)
DEBUG 2022-02-08 17:11:36,559 on stmt: $98pred = call bool98($96compare_op.2, func=bool98, args=(Var($96compare_op.2, arrayobj.py:1645),), kws=(), vararg=None, target=None)
DEBUG 2022-02-08 17:11:36,559 on stmt: branch $98pred, 100, 114
DEBUG 2022-02-08 17:11:36,559 ==== SSA block rewrite pass on 100
DEBUG 2022-02-08 17:11:36,559 Running <numba.core.ssa._FreshVarHandler object at 0x000001E9F805F0A0>
DEBUG 2022-02-08 17:11:36,559 on stmt: inferred = const(int, 0)
DEBUG 2022-02-08 17:11:36,559 first assign: inferred
DEBUG 2022-02-08 17:11:36,559 replaced with: inferred = const(int, 0)
DEBUG 2022-02-08 17:11:36,559 on stmt: $const106.2 = const(int, 0)
DEBUG 2022-02-08 17:11:36,559 on stmt: ok = origsize == $const106.2
DEBUG 2022-02-08 17:11:36,559 on stmt: jump 134
DEBUG 2022-02-08 17:11:36,559 ==== SSA block rewrite pass on 114
DEBUG 2022-02-08 17:11:36,567 Running <numba.core.ssa._FreshVarHandler object at 0x000001E9F805F0A0>
DEBUG 2022-02-08 17:11:36,567 on stmt: inferred = origsize // known_size
DEBUG 2022-02-08 17:11:36,567 replaced with: inferred.1 = origsize // known_size
DEBUG 2022-02-08 17:11:36,567 on stmt: $126binary_modulo.5 = origsize % known_size
DEBUG 2022-02-08 17:11:36,567 on stmt: $const128.6 = const(int, 0)
DEBUG 2022-02-08 17:11:36,567 on stmt: ok = $126binary_modulo.5 == $const128.6
DEBUG 2022-02-08 17:11:36,567 on stmt: jump 134
DEBUG 2022-02-08 17:11:36,567 ==== SSA block rewrite pass on 134
DEBUG 2022-02-08 17:11:36,567 Running <numba.core.ssa._FreshVarHandler object at 0x000001E9F805F0A0>
DEBUG 2022-02-08 17:11:36,567 on stmt: bool136 = global(bool: <class 'bool'>)
DEBUG 2022-02-08 17:11:36,567 on stmt: $136pred = call bool136(ok, func=bool136, args=(Var(ok, arrayobj.py:1647),), kws=(), vararg=None, target=None)
DEBUG 2022-02-08 17:11:36,567 on stmt: branch $136pred, 146, 138
DEBUG 2022-02-08 17:11:36,567 ==== SSA block rewrite pass on 138
DEBUG 2022-02-08 17:11:36,567 Running <numba.core.ssa._FreshVarHandler object at 0x000001E9F805F0A0>
DEBUG 2022-02-08 17:11:36,567 on stmt: $138load_global.0 = global(ValueError: <class 'ValueError'>)
DEBUG 2022-02-08 17:11:36,567 on stmt: $const140.1 = const(str, total size of new array must be unchanged)
DEBUG 2022-02-08 17:11:36,567 on stmt: $142call_function.2 = call $138load_global.0($const140.1, func=$138load_global.0, args=[Var($const140.1, arrayobj.py:1652)], kws=(), vararg=None, target=None)
DEBUG 2022-02-08 17:11:36,567 on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
DEBUG 2022-02-08 17:11:36,567 ==== SSA block rewrite pass on 146
DEBUG 2022-02-08 17:11:36,567 Running <numba.core.ssa._FreshVarHandler object at 0x000001E9F805F0A0>
DEBUG 2022-02-08 17:11:36,567 on stmt: shape[neg_ax] = inferred
DEBUG 2022-02-08 17:11:36,569 on stmt: jump 164
DEBUG 2022-02-08 17:11:36,569 ==== SSA block rewrite pass on 156
DEBUG 2022-02-08 17:11:36,569 Running <numba.core.ssa._FreshVarHandler object at 0x000001E9F805F0A0>
DEBUG 2022-02-08 17:11:36,569 on stmt: $156load_global.0 = global(ValueError: <class 'ValueError'>)
DEBUG 2022-02-08 17:11:36,569 on stmt: $const158.1 = const(str, multiple negative shape values)
DEBUG 2022-02-08 17:11:36,569 on stmt: $160call_function.2 = call $156load_global.0($const158.1, func=$156load_global.0, args=[Var($const158.1, arrayobj.py:1656)], kws=(), vararg=None, target=None)
DEBUG 2022-02-08 17:11:36,569 on stmt: <static> raise <class 'ValueError'>('multiple negative shape values')
DEBUG 2022-02-08 17:11:36,569 ==== SSA block rewrite pass on 164
DEBUG 2022-02-08 17:11:36,569 Running <numba.core.ssa._FreshVarHandler object at 0x000001E9F805F0A0>
DEBUG 2022-02-08 17:11:36,569 on stmt: $const164.0 = const(NoneType, None)
DEBUG 2022-02-08 17:11:36,569 on stmt: $166return_value.1 = cast(value=$const164.0)
DEBUG 2022-02-08 17:11:36,569 on stmt: return $166return_value.1
DEBUG 2022-02-08 17:11:36,569 ==== SSA block rewrite pass on 165
DEBUG 2022-02-08 17:11:36,569 Running <numba.core.ssa._FreshVarHandler object at 0x000001E9F805F0A0>
DEBUG 2022-02-08 17:11:36,569 on stmt: jump 18
DEBUG 2022-02-08 17:11:36,569 Replaced assignments: defaultdict(<class 'list'>,
            {100: [<numba.core.ir.Assign object at 0x000001E9F8049FA0>],
             114: [<numba.core.ir.Assign object at 0x000001E9F8049340>]})
DEBUG 2022-02-08 17:11:36,569 ==== SSA block rewrite pass on 0
DEBUG 2022-02-08 17:11:36,569 Running <numba.core.ssa._FixSSAVars object at 0x000001E9F805F0A0>
DEBUG 2022-02-08 17:11:36,569 on stmt: origsize = arg(0, name=origsize)
DEBUG 2022-02-08 17:11:36,569 on stmt: shape = arg(1, name=shape)
DEBUG 2022-02-08 17:11:36,569 on stmt: num_neg_value = const(int, 0)
DEBUG 2022-02-08 17:11:36,569 on stmt: known_size = const(int, 1)
DEBUG 2022-02-08 17:11:36,569 on stmt: $10load_global.2 = global(enumerate: <class 'enumerate'>)
DEBUG 2022-02-08 17:11:36,569 on stmt: $14call_function.4 = call $10load_global.2(shape, func=$10load_global.2, args=[Var(shape, arrayobj.py:1630)], kws=(), vararg=None, target=None)
DEBUG 2022-02-08 17:11:36,569 on stmt: $16get_iter.5 = getiter(value=$14call_function.4)
DEBUG 2022-02-08 17:11:36,569 on stmt: $phi18.0 = $16get_iter.5
DEBUG 2022-02-08 17:11:36,569 on stmt: jump 18
DEBUG 2022-02-08 17:11:36,569 ==== SSA block rewrite pass on 18
DEBUG 2022-02-08 17:11:36,569 Running <numba.core.ssa._FixSSAVars object at 0x000001E9F805F0A0>
DEBUG 2022-02-08 17:11:36,569 on stmt: $18for_iter.1 = iternext(value=$phi18.0)
DEBUG 2022-02-08 17:11:36,569 on stmt: $18for_iter.2 = pair_first(value=$18for_iter.1)
DEBUG 2022-02-08 17:11:36,569 on stmt: $18for_iter.3 = pair_second(value=$18for_iter.1)
DEBUG 2022-02-08 17:11:36,569 on stmt: $phi20.1 = $18for_iter.2
DEBUG 2022-02-08 17:11:36,569 on stmt: branch $18for_iter.3, 20, 58
DEBUG 2022-02-08 17:11:36,569 ==== SSA block rewrite pass on 20
DEBUG 2022-02-08 17:11:36,569 Running <numba.core.ssa._FixSSAVars object at 0x000001E9F805F0A0>
DEBUG 2022-02-08 17:11:36,569 on stmt: $20unpack_sequence.4 = exhaust_iter(value=$phi20.1, count=2)
DEBUG 2022-02-08 17:11:36,569 on stmt: $20unpack_sequence.2 = static_getitem(value=$20unpack_sequence.4, index=0, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-02-08 17:11:36,569 on stmt: $20unpack_sequence.3 = static_getitem(value=$20unpack_sequence.4, index=1, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-02-08 17:11:36,569 on stmt: ax = $20unpack_sequence.2
DEBUG 2022-02-08 17:11:36,569 on stmt: s = $20unpack_sequence.3
DEBUG 2022-02-08 17:11:36,569 on stmt: $const28.6 = const(int, 0)
DEBUG 2022-02-08 17:11:36,569 on stmt: $30compare_op.7 = s < $const28.6
DEBUG 2022-02-08 17:11:36,569 on stmt: bool32 = global(bool: <class 'bool'>)
DEBUG 2022-02-08 17:11:36,569 on stmt: $32pred = call bool32($30compare_op.7, func=bool32, args=(Var($30compare_op.7, arrayobj.py:1633),), kws=(), vararg=None, target=None)
DEBUG 2022-02-08 17:11:36,569 on stmt: branch $32pred, 34, 48
DEBUG 2022-02-08 17:11:36,569 ==== SSA block rewrite pass on 34
DEBUG 2022-02-08 17:11:36,569 Running <numba.core.ssa._FixSSAVars object at 0x000001E9F805F0A0>
DEBUG 2022-02-08 17:11:36,569 on stmt: $const36.2 = const(int, 1)
DEBUG 2022-02-08 17:11:36,569 on stmt: $38inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=num_neg_value, rhs=$const36.2, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-08 17:11:36,569 on stmt: num_neg_value = $38inplace_add.3
DEBUG 2022-02-08 17:11:36,569 on stmt: neg_ax = ax
DEBUG 2022-02-08 17:11:36,569 on stmt: jump 165
DEBUG 2022-02-08 17:11:36,569 ==== SSA block rewrite pass on 48
DEBUG 2022-02-08 17:11:36,569 Running <numba.core.ssa._FixSSAVars object at 0x000001E9F805F0A0>
DEBUG 2022-02-08 17:11:36,569 on stmt: $52inplace_multiply.3 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=known_size, rhs=s, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-08 17:11:36,569 on stmt: known_size = $52inplace_multiply.3
DEBUG 2022-02-08 17:11:36,569 on stmt: jump 165
DEBUG 2022-02-08 17:11:36,569 ==== SSA block rewrite pass on 58
DEBUG 2022-02-08 17:11:36,569 Running <numba.core.ssa._FixSSAVars object at 0x000001E9F805F0A0>
DEBUG 2022-02-08 17:11:36,569 on stmt: $const60.1 = const(int, 0)
DEBUG 2022-02-08 17:11:36,569 on stmt: $62compare_op.2 = num_neg_value == $const60.1
DEBUG 2022-02-08 17:11:36,569 on stmt: bool64 = global(bool: <class 'bool'>)
DEBUG 2022-02-08 17:11:36,569 on stmt: $64pred = call bool64($62compare_op.2, func=bool64, args=(Var($62compare_op.2, arrayobj.py:1639),), kws=(), vararg=None, target=None)
DEBUG 2022-02-08 17:11:36,569 on stmt: branch $64pred, 66, 84
DEBUG 2022-02-08 17:11:36,569 ==== SSA block rewrite pass on 66
DEBUG 2022-02-08 17:11:36,569 Running <numba.core.ssa._FixSSAVars object at 0x000001E9F805F0A0>
DEBUG 2022-02-08 17:11:36,569 on stmt: $70compare_op.2 = origsize != known_size
DEBUG 2022-02-08 17:11:36,569 on stmt: bool72 = global(bool: <class 'bool'>)
DEBUG 2022-02-08 17:11:36,569 on stmt: $72pred = call bool72($70compare_op.2, func=bool72, args=(Var($70compare_op.2, arrayobj.py:1640),), kws=(), vararg=None, target=None)
DEBUG 2022-02-08 17:11:36,569 on stmt: branch $72pred, 74, 164
DEBUG 2022-02-08 17:11:36,569 ==== SSA block rewrite pass on 74
DEBUG 2022-02-08 17:11:36,569 Running <numba.core.ssa._FixSSAVars object at 0x000001E9F805F0A0>
DEBUG 2022-02-08 17:11:36,569 on stmt: $74load_global.0 = global(ValueError: <class 'ValueError'>)
DEBUG 2022-02-08 17:11:36,569 on stmt: $const76.1 = const(str, total size of new array must be unchanged)
DEBUG 2022-02-08 17:11:36,569 on stmt: $78call_function.2 = call $74load_global.0($const76.1, func=$74load_global.0, args=[Var($const76.1, arrayobj.py:1641)], kws=(), vararg=None, target=None)
DEBUG 2022-02-08 17:11:36,569 on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
DEBUG 2022-02-08 17:11:36,569 ==== SSA block rewrite pass on 84
DEBUG 2022-02-08 17:11:36,569 Running <numba.core.ssa._FixSSAVars object at 0x000001E9F805F0A0>
DEBUG 2022-02-08 17:11:36,569 on stmt: $const86.1 = const(int, 1)
DEBUG 2022-02-08 17:11:36,569 on stmt: $88compare_op.2 = num_neg_value == $const86.1
DEBUG 2022-02-08 17:11:36,569 on stmt: bool90 = global(bool: <class 'bool'>)
DEBUG 2022-02-08 17:11:36,569 on stmt: $90pred = call bool90($88compare_op.2, func=bool90, args=(Var($88compare_op.2, arrayobj.py:1643),), kws=(), vararg=None, target=None)
DEBUG 2022-02-08 17:11:36,569 on stmt: branch $90pred, 92, 156
DEBUG 2022-02-08 17:11:36,569 ==== SSA block rewrite pass on 92
DEBUG 2022-02-08 17:11:36,569 Running <numba.core.ssa._FixSSAVars object at 0x000001E9F805F0A0>
DEBUG 2022-02-08 17:11:36,569 on stmt: $const94.1 = const(int, 0)
DEBUG 2022-02-08 17:11:36,577 on stmt: $96compare_op.2 = known_size == $const94.1
DEBUG 2022-02-08 17:11:36,577 on stmt: bool98 = global(bool: <class 'bool'>)
DEBUG 2022-02-08 17:11:36,577 on stmt: $98pred = call bool98($96compare_op.2, func=bool98, args=(Var($96compare_op.2, arrayobj.py:1645),), kws=(), vararg=None, target=None)
DEBUG 2022-02-08 17:11:36,577 on stmt: branch $98pred, 100, 114
DEBUG 2022-02-08 17:11:36,577 ==== SSA block rewrite pass on 100
DEBUG 2022-02-08 17:11:36,577 Running <numba.core.ssa._FixSSAVars object at 0x000001E9F805F0A0>
DEBUG 2022-02-08 17:11:36,577 on stmt: inferred = const(int, 0)
DEBUG 2022-02-08 17:11:36,577 on stmt: $const106.2 = const(int, 0)
DEBUG 2022-02-08 17:11:36,577 on stmt: ok = origsize == $const106.2
DEBUG 2022-02-08 17:11:36,577 on stmt: jump 134
DEBUG 2022-02-08 17:11:36,577 ==== SSA block rewrite pass on 114
DEBUG 2022-02-08 17:11:36,577 Running <numba.core.ssa._FixSSAVars object at 0x000001E9F805F0A0>
DEBUG 2022-02-08 17:11:36,577 on stmt: inferred.1 = origsize // known_size
DEBUG 2022-02-08 17:11:36,577 on stmt: $126binary_modulo.5 = origsize % known_size
DEBUG 2022-02-08 17:11:36,577 on stmt: $const128.6 = const(int, 0)
DEBUG 2022-02-08 17:11:36,577 on stmt: ok = $126binary_modulo.5 == $const128.6
DEBUG 2022-02-08 17:11:36,577 on stmt: jump 134
DEBUG 2022-02-08 17:11:36,577 ==== SSA block rewrite pass on 134
DEBUG 2022-02-08 17:11:36,577 Running <numba.core.ssa._FixSSAVars object at 0x000001E9F805F0A0>
DEBUG 2022-02-08 17:11:36,577 on stmt: bool136 = global(bool: <class 'bool'>)
DEBUG 2022-02-08 17:11:36,577 on stmt: $136pred = call bool136(ok, func=bool136, args=(Var(ok, arrayobj.py:1647),), kws=(), vararg=None, target=None)
DEBUG 2022-02-08 17:11:36,577 on stmt: branch $136pred, 146, 138
DEBUG 2022-02-08 17:11:36,579 ==== SSA block rewrite pass on 138
DEBUG 2022-02-08 17:11:36,579 Running <numba.core.ssa._FixSSAVars object at 0x000001E9F805F0A0>
DEBUG 2022-02-08 17:11:36,579 on stmt: $138load_global.0 = global(ValueError: <class 'ValueError'>)
DEBUG 2022-02-08 17:11:36,579 on stmt: $const140.1 = const(str, total size of new array must be unchanged)
DEBUG 2022-02-08 17:11:36,579 on stmt: $142call_function.2 = call $138load_global.0($const140.1, func=$138load_global.0, args=[Var($const140.1, arrayobj.py:1652)], kws=(), vararg=None, target=None)
DEBUG 2022-02-08 17:11:36,579 on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
DEBUG 2022-02-08 17:11:36,579 ==== SSA block rewrite pass on 146
DEBUG 2022-02-08 17:11:36,579 Running <numba.core.ssa._FixSSAVars object at 0x000001E9F805F0A0>
DEBUG 2022-02-08 17:11:36,579 on stmt: shape[neg_ax] = inferred
DEBUG 2022-02-08 17:11:36,579 find_def var='inferred' stmt=shape[neg_ax] = inferred
DEBUG 2022-02-08 17:11:36,579 find_def_from_top label 146
DEBUG 2022-02-08 17:11:36,579 idom 134 from label 146
DEBUG 2022-02-08 17:11:36,579 find_def_from_bottom label 134
DEBUG 2022-02-08 17:11:36,579 find_def_from_top label 134
DEBUG 2022-02-08 17:11:36,579 insert phi node inferred.2 = phi(incoming_values=[], incoming_blocks=[]) at 134
DEBUG 2022-02-08 17:11:36,579 find_def_from_bottom label 114
DEBUG 2022-02-08 17:11:36,579 incoming_def inferred.1 = origsize // known_size
DEBUG 2022-02-08 17:11:36,579 find_def_from_bottom label 100
DEBUG 2022-02-08 17:11:36,579 incoming_def inferred = const(int, 0)
DEBUG 2022-02-08 17:11:36,579 replaced with: shape[neg_ax] = inferred.2
DEBUG 2022-02-08 17:11:36,579 on stmt: jump 164
DEBUG 2022-02-08 17:11:36,579 ==== SSA block rewrite pass on 156
DEBUG 2022-02-08 17:11:36,579 Running <numba.core.ssa._FixSSAVars object at 0x000001E9F805F0A0>
DEBUG 2022-02-08 17:11:36,579 on stmt: $156load_global.0 = global(ValueError: <class 'ValueError'>)
DEBUG 2022-02-08 17:11:36,579 on stmt: $const158.1 = const(str, multiple negative shape values)
DEBUG 2022-02-08 17:11:36,579 on stmt: $160call_function.2 = call $156load_global.0($const158.1, func=$156load_global.0, args=[Var($const158.1, arrayobj.py:1656)], kws=(), vararg=None, target=None)
DEBUG 2022-02-08 17:11:36,579 on stmt: <static> raise <class 'ValueError'>('multiple negative shape values')
DEBUG 2022-02-08 17:11:36,579 ==== SSA block rewrite pass on 164
DEBUG 2022-02-08 17:11:36,579 Running <numba.core.ssa._FixSSAVars object at 0x000001E9F805F0A0>
DEBUG 2022-02-08 17:11:36,579 on stmt: $const164.0 = const(NoneType, None)
DEBUG 2022-02-08 17:11:36,579 on stmt: $166return_value.1 = cast(value=$const164.0)
DEBUG 2022-02-08 17:11:36,579 on stmt: return $166return_value.1
DEBUG 2022-02-08 17:11:36,579 ==== SSA block rewrite pass on 165
DEBUG 2022-02-08 17:11:36,579 Running <numba.core.ssa._FixSSAVars object at 0x000001E9F805F0A0>
DEBUG 2022-02-08 17:11:36,579 on stmt: jump 18
DEBUG 2022-02-08 17:11:36,579 Fix SSA violator on var known_size
DEBUG 2022-02-08 17:11:36,579 ==== SSA block rewrite pass on 0
DEBUG 2022-02-08 17:11:36,579 Running <numba.core.ssa._FreshVarHandler object at 0x000001E9F8070F10>
DEBUG 2022-02-08 17:11:36,579 on stmt: origsize = arg(0, name=origsize)
DEBUG 2022-02-08 17:11:36,579 on stmt: shape = arg(1, name=shape)
DEBUG 2022-02-08 17:11:36,579 on stmt: num_neg_value = const(int, 0)
DEBUG 2022-02-08 17:11:36,579 on stmt: known_size = const(int, 1)
DEBUG 2022-02-08 17:11:36,579 first assign: known_size
DEBUG 2022-02-08 17:11:36,579 replaced with: known_size = const(int, 1)
DEBUG 2022-02-08 17:11:36,579 on stmt: $10load_global.2 = global(enumerate: <class 'enumerate'>)
DEBUG 2022-02-08 17:11:36,579 on stmt: $14call_function.4 = call $10load_global.2(shape, func=$10load_global.2, args=[Var(shape, arrayobj.py:1630)], kws=(), vararg=None, target=None)
DEBUG 2022-02-08 17:11:36,579 on stmt: $16get_iter.5 = getiter(value=$14call_function.4)
DEBUG 2022-02-08 17:11:36,579 on stmt: $phi18.0 = $16get_iter.5
DEBUG 2022-02-08 17:11:36,579 on stmt: jump 18
DEBUG 2022-02-08 17:11:36,579 ==== SSA block rewrite pass on 18
DEBUG 2022-02-08 17:11:36,579 Running <numba.core.ssa._FreshVarHandler object at 0x000001E9F8070F10>
DEBUG 2022-02-08 17:11:36,579 on stmt: $18for_iter.1 = iternext(value=$phi18.0)
DEBUG 2022-02-08 17:11:36,579 on stmt: $18for_iter.2 = pair_first(value=$18for_iter.1)
DEBUG 2022-02-08 17:11:36,579 on stmt: $18for_iter.3 = pair_second(value=$18for_iter.1)
DEBUG 2022-02-08 17:11:36,579 on stmt: $phi20.1 = $18for_iter.2
DEBUG 2022-02-08 17:11:36,579 on stmt: branch $18for_iter.3, 20, 58
DEBUG 2022-02-08 17:11:36,579 ==== SSA block rewrite pass on 20
DEBUG 2022-02-08 17:11:36,579 Running <numba.core.ssa._FreshVarHandler object at 0x000001E9F8070F10>
DEBUG 2022-02-08 17:11:36,579 on stmt: $20unpack_sequence.4 = exhaust_iter(value=$phi20.1, count=2)
DEBUG 2022-02-08 17:11:36,579 on stmt: $20unpack_sequence.2 = static_getitem(value=$20unpack_sequence.4, index=0, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-02-08 17:11:36,579 on stmt: $20unpack_sequence.3 = static_getitem(value=$20unpack_sequence.4, index=1, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-02-08 17:11:36,579 on stmt: ax = $20unpack_sequence.2
DEBUG 2022-02-08 17:11:36,579 on stmt: s = $20unpack_sequence.3
DEBUG 2022-02-08 17:11:36,579 on stmt: $const28.6 = const(int, 0)
DEBUG 2022-02-08 17:11:36,579 on stmt: $30compare_op.7 = s < $const28.6
DEBUG 2022-02-08 17:11:36,579 on stmt: bool32 = global(bool: <class 'bool'>)
DEBUG 2022-02-08 17:11:36,579 on stmt: $32pred = call bool32($30compare_op.7, func=bool32, args=(Var($30compare_op.7, arrayobj.py:1633),), kws=(), vararg=None, target=None)
DEBUG 2022-02-08 17:11:36,579 on stmt: branch $32pred, 34, 48
DEBUG 2022-02-08 17:11:36,579 ==== SSA block rewrite pass on 34
DEBUG 2022-02-08 17:11:36,579 Running <numba.core.ssa._FreshVarHandler object at 0x000001E9F8070F10>
DEBUG 2022-02-08 17:11:36,579 on stmt: $const36.2 = const(int, 1)
DEBUG 2022-02-08 17:11:36,579 on stmt: $38inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=num_neg_value, rhs=$const36.2, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-08 17:11:36,579 on stmt: num_neg_value = $38inplace_add.3
DEBUG 2022-02-08 17:11:36,579 on stmt: neg_ax = ax
DEBUG 2022-02-08 17:11:36,579 on stmt: jump 165
DEBUG 2022-02-08 17:11:36,579 ==== SSA block rewrite pass on 48
DEBUG 2022-02-08 17:11:36,579 Running <numba.core.ssa._FreshVarHandler object at 0x000001E9F8070F10>
DEBUG 2022-02-08 17:11:36,579 on stmt: $52inplace_multiply.3 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=known_size, rhs=s, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-08 17:11:36,579 on stmt: known_size = $52inplace_multiply.3
DEBUG 2022-02-08 17:11:36,579 replaced with: known_size.1 = $52inplace_multiply.3
DEBUG 2022-02-08 17:11:36,579 on stmt: jump 165
DEBUG 2022-02-08 17:11:36,579 ==== SSA block rewrite pass on 58
DEBUG 2022-02-08 17:11:36,579 Running <numba.core.ssa._FreshVarHandler object at 0x000001E9F8070F10>
DEBUG 2022-02-08 17:11:36,579 on stmt: $const60.1 = const(int, 0)
DEBUG 2022-02-08 17:11:36,579 on stmt: $62compare_op.2 = num_neg_value == $const60.1
DEBUG 2022-02-08 17:11:36,579 on stmt: bool64 = global(bool: <class 'bool'>)
DEBUG 2022-02-08 17:11:36,579 on stmt: $64pred = call bool64($62compare_op.2, func=bool64, args=(Var($62compare_op.2, arrayobj.py:1639),), kws=(), vararg=None, target=None)
DEBUG 2022-02-08 17:11:36,579 on stmt: branch $64pred, 66, 84
DEBUG 2022-02-08 17:11:36,579 ==== SSA block rewrite pass on 66
DEBUG 2022-02-08 17:11:36,579 Running <numba.core.ssa._FreshVarHandler object at 0x000001E9F8070F10>
DEBUG 2022-02-08 17:11:36,579 on stmt: $70compare_op.2 = origsize != known_size
DEBUG 2022-02-08 17:11:36,587 on stmt: bool72 = global(bool: <class 'bool'>)
DEBUG 2022-02-08 17:11:36,587 on stmt: $72pred = call bool72($70compare_op.2, func=bool72, args=(Var($70compare_op.2, arrayobj.py:1640),), kws=(), vararg=None, target=None)
DEBUG 2022-02-08 17:11:36,587 on stmt: branch $72pred, 74, 164
DEBUG 2022-02-08 17:11:36,587 ==== SSA block rewrite pass on 74
DEBUG 2022-02-08 17:11:36,587 Running <numba.core.ssa._FreshVarHandler object at 0x000001E9F8070F10>
DEBUG 2022-02-08 17:11:36,587 on stmt: $74load_global.0 = global(ValueError: <class 'ValueError'>)
DEBUG 2022-02-08 17:11:36,587 on stmt: $const76.1 = const(str, total size of new array must be unchanged)
DEBUG 2022-02-08 17:11:36,587 on stmt: $78call_function.2 = call $74load_global.0($const76.1, func=$74load_global.0, args=[Var($const76.1, arrayobj.py:1641)], kws=(), vararg=None, target=None)
DEBUG 2022-02-08 17:11:36,587 on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
DEBUG 2022-02-08 17:11:36,587 ==== SSA block rewrite pass on 84
DEBUG 2022-02-08 17:11:36,587 Running <numba.core.ssa._FreshVarHandler object at 0x000001E9F8070F10>
DEBUG 2022-02-08 17:11:36,587 on stmt: $const86.1 = const(int, 1)
DEBUG 2022-02-08 17:11:36,587 on stmt: $88compare_op.2 = num_neg_value == $const86.1
DEBUG 2022-02-08 17:11:36,587 on stmt: bool90 = global(bool: <class 'bool'>)
DEBUG 2022-02-08 17:11:36,587 on stmt: $90pred = call bool90($88compare_op.2, func=bool90, args=(Var($88compare_op.2, arrayobj.py:1643),), kws=(), vararg=None, target=None)
DEBUG 2022-02-08 17:11:36,587 on stmt: branch $90pred, 92, 156
DEBUG 2022-02-08 17:11:36,589 ==== SSA block rewrite pass on 92
DEBUG 2022-02-08 17:11:36,589 Running <numba.core.ssa._FreshVarHandler object at 0x000001E9F8070F10>
DEBUG 2022-02-08 17:11:36,589 on stmt: $const94.1 = const(int, 0)
DEBUG 2022-02-08 17:11:36,589 on stmt: $96compare_op.2 = known_size == $const94.1
DEBUG 2022-02-08 17:11:36,589 on stmt: bool98 = global(bool: <class 'bool'>)
DEBUG 2022-02-08 17:11:36,589 on stmt: $98pred = call bool98($96compare_op.2, func=bool98, args=(Var($96compare_op.2, arrayobj.py:1645),), kws=(), vararg=None, target=None)
DEBUG 2022-02-08 17:11:36,589 on stmt: branch $98pred, 100, 114
DEBUG 2022-02-08 17:11:36,589 ==== SSA block rewrite pass on 100
DEBUG 2022-02-08 17:11:36,589 Running <numba.core.ssa._FreshVarHandler object at 0x000001E9F8070F10>
DEBUG 2022-02-08 17:11:36,589 on stmt: inferred = const(int, 0)
DEBUG 2022-02-08 17:11:36,589 on stmt: $const106.2 = const(int, 0)
DEBUG 2022-02-08 17:11:36,589 on stmt: ok = origsize == $const106.2
DEBUG 2022-02-08 17:11:36,589 on stmt: jump 134
DEBUG 2022-02-08 17:11:36,589 ==== SSA block rewrite pass on 114
DEBUG 2022-02-08 17:11:36,589 Running <numba.core.ssa._FreshVarHandler object at 0x000001E9F8070F10>
DEBUG 2022-02-08 17:11:36,589 on stmt: inferred.1 = origsize // known_size
DEBUG 2022-02-08 17:11:36,589 on stmt: $126binary_modulo.5 = origsize % known_size
DEBUG 2022-02-08 17:11:36,589 on stmt: $const128.6 = const(int, 0)
DEBUG 2022-02-08 17:11:36,589 on stmt: ok = $126binary_modulo.5 == $const128.6
DEBUG 2022-02-08 17:11:36,589 on stmt: jump 134
DEBUG 2022-02-08 17:11:36,589 ==== SSA block rewrite pass on 134
DEBUG 2022-02-08 17:11:36,589 Running <numba.core.ssa._FreshVarHandler object at 0x000001E9F8070F10>
DEBUG 2022-02-08 17:11:36,589 on stmt: inferred.2 = phi(incoming_values=[Var(inferred.1, arrayobj.py:1649), Var(inferred, arrayobj.py:1646)], incoming_blocks=[114, 100])
DEBUG 2022-02-08 17:11:36,589 on stmt: bool136 = global(bool: <class 'bool'>)
DEBUG 2022-02-08 17:11:36,589 on stmt: $136pred = call bool136(ok, func=bool136, args=(Var(ok, arrayobj.py:1647),), kws=(), vararg=None, target=None)
DEBUG 2022-02-08 17:11:36,589 on stmt: branch $136pred, 146, 138
DEBUG 2022-02-08 17:11:36,589 ==== SSA block rewrite pass on 138
DEBUG 2022-02-08 17:11:36,589 Running <numba.core.ssa._FreshVarHandler object at 0x000001E9F8070F10>
DEBUG 2022-02-08 17:11:36,589 on stmt: $138load_global.0 = global(ValueError: <class 'ValueError'>)
DEBUG 2022-02-08 17:11:36,589 on stmt: $const140.1 = const(str, total size of new array must be unchanged)
DEBUG 2022-02-08 17:11:36,589 on stmt: $142call_function.2 = call $138load_global.0($const140.1, func=$138load_global.0, args=[Var($const140.1, arrayobj.py:1652)], kws=(), vararg=None, target=None)
DEBUG 2022-02-08 17:11:36,589 on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
DEBUG 2022-02-08 17:11:36,589 ==== SSA block rewrite pass on 146
DEBUG 2022-02-08 17:11:36,589 Running <numba.core.ssa._FreshVarHandler object at 0x000001E9F8070F10>
DEBUG 2022-02-08 17:11:36,589 on stmt: shape[neg_ax] = inferred.2
DEBUG 2022-02-08 17:11:36,589 on stmt: jump 164
DEBUG 2022-02-08 17:11:36,589 ==== SSA block rewrite pass on 156
DEBUG 2022-02-08 17:11:36,589 Running <numba.core.ssa._FreshVarHandler object at 0x000001E9F8070F10>
DEBUG 2022-02-08 17:11:36,589 on stmt: $156load_global.0 = global(ValueError: <class 'ValueError'>)
DEBUG 2022-02-08 17:11:36,589 on stmt: $const158.1 = const(str, multiple negative shape values)
DEBUG 2022-02-08 17:11:36,589 on stmt: $160call_function.2 = call $156load_global.0($const158.1, func=$156load_global.0, args=[Var($const158.1, arrayobj.py:1656)], kws=(), vararg=None, target=None)
DEBUG 2022-02-08 17:11:36,589 on stmt: <static> raise <class 'ValueError'>('multiple negative shape values')
DEBUG 2022-02-08 17:11:36,589 ==== SSA block rewrite pass on 164
DEBUG 2022-02-08 17:11:36,589 Running <numba.core.ssa._FreshVarHandler object at 0x000001E9F8070F10>
DEBUG 2022-02-08 17:11:36,589 on stmt: $const164.0 = const(NoneType, None)
DEBUG 2022-02-08 17:11:36,589 on stmt: $166return_value.1 = cast(value=$const164.0)
DEBUG 2022-02-08 17:11:36,589 on stmt: return $166return_value.1
DEBUG 2022-02-08 17:11:36,589 ==== SSA block rewrite pass on 165
DEBUG 2022-02-08 17:11:36,589 Running <numba.core.ssa._FreshVarHandler object at 0x000001E9F8070F10>
DEBUG 2022-02-08 17:11:36,589 on stmt: jump 18
DEBUG 2022-02-08 17:11:36,589 Replaced assignments: defaultdict(<class 'list'>,
            {0: [<numba.core.ir.Assign object at 0x000001E9F8070CD0>],
             48: [<numba.core.ir.Assign object at 0x000001E9F8049850>]})
DEBUG 2022-02-08 17:11:36,589 ==== SSA block rewrite pass on 0
DEBUG 2022-02-08 17:11:36,589 Running <numba.core.ssa._FixSSAVars object at 0x000001E9F8070F10>
DEBUG 2022-02-08 17:11:36,589 on stmt: origsize = arg(0, name=origsize)
DEBUG 2022-02-08 17:11:36,589 on stmt: shape = arg(1, name=shape)
DEBUG 2022-02-08 17:11:36,589 on stmt: num_neg_value = const(int, 0)
DEBUG 2022-02-08 17:11:36,589 on stmt: known_size = const(int, 1)
DEBUG 2022-02-08 17:11:36,589 on stmt: $10load_global.2 = global(enumerate: <class 'enumerate'>)
DEBUG 2022-02-08 17:11:36,589 on stmt: $14call_function.4 = call $10load_global.2(shape, func=$10load_global.2, args=[Var(shape, arrayobj.py:1630)], kws=(), vararg=None, target=None)
DEBUG 2022-02-08 17:11:36,589 on stmt: $16get_iter.5 = getiter(value=$14call_function.4)
DEBUG 2022-02-08 17:11:36,589 on stmt: $phi18.0 = $16get_iter.5
DEBUG 2022-02-08 17:11:36,589 on stmt: jump 18
DEBUG 2022-02-08 17:11:36,589 ==== SSA block rewrite pass on 18
DEBUG 2022-02-08 17:11:36,589 Running <numba.core.ssa._FixSSAVars object at 0x000001E9F8070F10>
DEBUG 2022-02-08 17:11:36,589 on stmt: $18for_iter.1 = iternext(value=$phi18.0)
DEBUG 2022-02-08 17:11:36,589 on stmt: $18for_iter.2 = pair_first(value=$18for_iter.1)
DEBUG 2022-02-08 17:11:36,589 on stmt: $18for_iter.3 = pair_second(value=$18for_iter.1)
DEBUG 2022-02-08 17:11:36,589 on stmt: $phi20.1 = $18for_iter.2
DEBUG 2022-02-08 17:11:36,589 on stmt: branch $18for_iter.3, 20, 58
DEBUG 2022-02-08 17:11:36,589 ==== SSA block rewrite pass on 20
DEBUG 2022-02-08 17:11:36,589 Running <numba.core.ssa._FixSSAVars object at 0x000001E9F8070F10>
DEBUG 2022-02-08 17:11:36,589 on stmt: $20unpack_sequence.4 = exhaust_iter(value=$phi20.1, count=2)
DEBUG 2022-02-08 17:11:36,589 on stmt: $20unpack_sequence.2 = static_getitem(value=$20unpack_sequence.4, index=0, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-02-08 17:11:36,589 on stmt: $20unpack_sequence.3 = static_getitem(value=$20unpack_sequence.4, index=1, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-02-08 17:11:36,589 on stmt: ax = $20unpack_sequence.2
DEBUG 2022-02-08 17:11:36,589 on stmt: s = $20unpack_sequence.3
DEBUG 2022-02-08 17:11:36,589 on stmt: $const28.6 = const(int, 0)
DEBUG 2022-02-08 17:11:36,589 on stmt: $30compare_op.7 = s < $const28.6
DEBUG 2022-02-08 17:11:36,589 on stmt: bool32 = global(bool: <class 'bool'>)
DEBUG 2022-02-08 17:11:36,589 on stmt: $32pred = call bool32($30compare_op.7, func=bool32, args=(Var($30compare_op.7, arrayobj.py:1633),), kws=(), vararg=None, target=None)
DEBUG 2022-02-08 17:11:36,589 on stmt: branch $32pred, 34, 48
DEBUG 2022-02-08 17:11:36,589 ==== SSA block rewrite pass on 34
DEBUG 2022-02-08 17:11:36,589 Running <numba.core.ssa._FixSSAVars object at 0x000001E9F8070F10>
DEBUG 2022-02-08 17:11:36,589 on stmt: $const36.2 = const(int, 1)
DEBUG 2022-02-08 17:11:36,589 on stmt: $38inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=num_neg_value, rhs=$const36.2, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-08 17:11:36,589 on stmt: num_neg_value = $38inplace_add.3
DEBUG 2022-02-08 17:11:36,589 on stmt: neg_ax = ax
DEBUG 2022-02-08 17:11:36,589 on stmt: jump 165
DEBUG 2022-02-08 17:11:36,597 ==== SSA block rewrite pass on 48
DEBUG 2022-02-08 17:11:36,597 Running <numba.core.ssa._FixSSAVars object at 0x000001E9F8070F10>
DEBUG 2022-02-08 17:11:36,597 on stmt: $52inplace_multiply.3 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=known_size, rhs=s, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-08 17:11:36,597 find_def var='known_size' stmt=$52inplace_multiply.3 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=known_size, rhs=s, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-08 17:11:36,597 find_def_from_top label 48
DEBUG 2022-02-08 17:11:36,597 idom 20 from label 48
DEBUG 2022-02-08 17:11:36,597 find_def_from_bottom label 20
DEBUG 2022-02-08 17:11:36,597 find_def_from_top label 20
DEBUG 2022-02-08 17:11:36,597 idom 18 from label 20
DEBUG 2022-02-08 17:11:36,597 find_def_from_bottom label 18
DEBUG 2022-02-08 17:11:36,597 find_def_from_top label 18
DEBUG 2022-02-08 17:11:36,597 insert phi node known_size.2 = phi(incoming_values=[], incoming_blocks=[]) at 18
DEBUG 2022-02-08 17:11:36,597 find_def_from_bottom label 0
DEBUG 2022-02-08 17:11:36,597 incoming_def known_size = const(int, 1)
DEBUG 2022-02-08 17:11:36,597 find_def_from_bottom label 165
DEBUG 2022-02-08 17:11:36,597 find_def_from_top label 165
DEBUG 2022-02-08 17:11:36,597 insert phi node known_size.3 = phi(incoming_values=[], incoming_blocks=[]) at 165
DEBUG 2022-02-08 17:11:36,597 find_def_from_bottom label 48
DEBUG 2022-02-08 17:11:36,597 incoming_def known_size.1 = $52inplace_multiply.3
DEBUG 2022-02-08 17:11:36,597 find_def_from_bottom label 34
DEBUG 2022-02-08 17:11:36,597 find_def_from_top label 34
DEBUG 2022-02-08 17:11:36,597 idom 20 from label 34
DEBUG 2022-02-08 17:11:36,597 find_def_from_bottom label 20
DEBUG 2022-02-08 17:11:36,599 find_def_from_top label 20
DEBUG 2022-02-08 17:11:36,599 idom 18 from label 20
DEBUG 2022-02-08 17:11:36,599 find_def_from_bottom label 18
DEBUG 2022-02-08 17:11:36,599 incoming_def known_size.2 = phi(incoming_values=[Var(known_size, arrayobj.py:1631)], incoming_blocks=[0])
DEBUG 2022-02-08 17:11:36,599 incoming_def known_size.3 = phi(incoming_values=[Var(known_size.1, arrayobj.py:1637), Var(known_size.2, arrayobj.py:1637)], incoming_blocks=[48, 34])
DEBUG 2022-02-08 17:11:36,599 replaced with: $52inplace_multiply.3 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=known_size.2, rhs=s, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-08 17:11:36,599 on stmt: known_size.1 = $52inplace_multiply.3
DEBUG 2022-02-08 17:11:36,599 on stmt: jump 165
DEBUG 2022-02-08 17:11:36,599 ==== SSA block rewrite pass on 58
DEBUG 2022-02-08 17:11:36,599 Running <numba.core.ssa._FixSSAVars object at 0x000001E9F8070F10>
DEBUG 2022-02-08 17:11:36,599 on stmt: $const60.1 = const(int, 0)
DEBUG 2022-02-08 17:11:36,599 on stmt: $62compare_op.2 = num_neg_value == $const60.1
DEBUG 2022-02-08 17:11:36,599 on stmt: bool64 = global(bool: <class 'bool'>)
DEBUG 2022-02-08 17:11:36,599 on stmt: $64pred = call bool64($62compare_op.2, func=bool64, args=(Var($62compare_op.2, arrayobj.py:1639),), kws=(), vararg=None, target=None)
DEBUG 2022-02-08 17:11:36,599 on stmt: branch $64pred, 66, 84
DEBUG 2022-02-08 17:11:36,599 ==== SSA block rewrite pass on 66
DEBUG 2022-02-08 17:11:36,599 Running <numba.core.ssa._FixSSAVars object at 0x000001E9F8070F10>
DEBUG 2022-02-08 17:11:36,599 on stmt: $70compare_op.2 = origsize != known_size
DEBUG 2022-02-08 17:11:36,599 find_def var='known_size' stmt=$70compare_op.2 = origsize != known_size
DEBUG 2022-02-08 17:11:36,599 find_def_from_top label 66
DEBUG 2022-02-08 17:11:36,599 idom 58 from label 66
DEBUG 2022-02-08 17:11:36,599 find_def_from_bottom label 58
DEBUG 2022-02-08 17:11:36,599 find_def_from_top label 58
DEBUG 2022-02-08 17:11:36,599 idom 18 from label 58
DEBUG 2022-02-08 17:11:36,599 find_def_from_bottom label 18
DEBUG 2022-02-08 17:11:36,599 replaced with: $70compare_op.2 = origsize != known_size.2
DEBUG 2022-02-08 17:11:36,599 on stmt: bool72 = global(bool: <class 'bool'>)
DEBUG 2022-02-08 17:11:36,599 on stmt: $72pred = call bool72($70compare_op.2, func=bool72, args=(Var($70compare_op.2, arrayobj.py:1640),), kws=(), vararg=None, target=None)
DEBUG 2022-02-08 17:11:36,599 on stmt: branch $72pred, 74, 164
DEBUG 2022-02-08 17:11:36,599 ==== SSA block rewrite pass on 74
DEBUG 2022-02-08 17:11:36,599 Running <numba.core.ssa._FixSSAVars object at 0x000001E9F8070F10>
DEBUG 2022-02-08 17:11:36,599 on stmt: $74load_global.0 = global(ValueError: <class 'ValueError'>)
DEBUG 2022-02-08 17:11:36,599 on stmt: $const76.1 = const(str, total size of new array must be unchanged)
DEBUG 2022-02-08 17:11:36,599 on stmt: $78call_function.2 = call $74load_global.0($const76.1, func=$74load_global.0, args=[Var($const76.1, arrayobj.py:1641)], kws=(), vararg=None, target=None)
DEBUG 2022-02-08 17:11:36,599 on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
DEBUG 2022-02-08 17:11:36,599 ==== SSA block rewrite pass on 84
DEBUG 2022-02-08 17:11:36,599 Running <numba.core.ssa._FixSSAVars object at 0x000001E9F8070F10>
DEBUG 2022-02-08 17:11:36,599 on stmt: $const86.1 = const(int, 1)
DEBUG 2022-02-08 17:11:36,599 on stmt: $88compare_op.2 = num_neg_value == $const86.1
DEBUG 2022-02-08 17:11:36,599 on stmt: bool90 = global(bool: <class 'bool'>)
DEBUG 2022-02-08 17:11:36,599 on stmt: $90pred = call bool90($88compare_op.2, func=bool90, args=(Var($88compare_op.2, arrayobj.py:1643),), kws=(), vararg=None, target=None)
DEBUG 2022-02-08 17:11:36,599 on stmt: branch $90pred, 92, 156
DEBUG 2022-02-08 17:11:36,599 ==== SSA block rewrite pass on 92
DEBUG 2022-02-08 17:11:36,599 Running <numba.core.ssa._FixSSAVars object at 0x000001E9F8070F10>
DEBUG 2022-02-08 17:11:36,599 on stmt: $const94.1 = const(int, 0)
DEBUG 2022-02-08 17:11:36,599 on stmt: $96compare_op.2 = known_size == $const94.1
DEBUG 2022-02-08 17:11:36,599 find_def var='known_size' stmt=$96compare_op.2 = known_size == $const94.1
DEBUG 2022-02-08 17:11:36,599 find_def_from_top label 92
DEBUG 2022-02-08 17:11:36,599 idom 84 from label 92
DEBUG 2022-02-08 17:11:36,599 find_def_from_bottom label 84
DEBUG 2022-02-08 17:11:36,599 find_def_from_top label 84
DEBUG 2022-02-08 17:11:36,599 idom 58 from label 84
DEBUG 2022-02-08 17:11:36,599 find_def_from_bottom label 58
DEBUG 2022-02-08 17:11:36,599 find_def_from_top label 58
DEBUG 2022-02-08 17:11:36,599 idom 18 from label 58
DEBUG 2022-02-08 17:11:36,599 find_def_from_bottom label 18
DEBUG 2022-02-08 17:11:36,599 replaced with: $96compare_op.2 = known_size.2 == $const94.1
DEBUG 2022-02-08 17:11:36,599 on stmt: bool98 = global(bool: <class 'bool'>)
DEBUG 2022-02-08 17:11:36,599 on stmt: $98pred = call bool98($96compare_op.2, func=bool98, args=(Var($96compare_op.2, arrayobj.py:1645),), kws=(), vararg=None, target=None)
DEBUG 2022-02-08 17:11:36,599 on stmt: branch $98pred, 100, 114
DEBUG 2022-02-08 17:11:36,599 ==== SSA block rewrite pass on 100
DEBUG 2022-02-08 17:11:36,599 Running <numba.core.ssa._FixSSAVars object at 0x000001E9F8070F10>
DEBUG 2022-02-08 17:11:36,599 on stmt: inferred = const(int, 0)
DEBUG 2022-02-08 17:11:36,599 on stmt: $const106.2 = const(int, 0)
DEBUG 2022-02-08 17:11:36,599 on stmt: ok = origsize == $const106.2
DEBUG 2022-02-08 17:11:36,599 on stmt: jump 134
DEBUG 2022-02-08 17:11:36,599 ==== SSA block rewrite pass on 114
DEBUG 2022-02-08 17:11:36,599 Running <numba.core.ssa._FixSSAVars object at 0x000001E9F8070F10>
DEBUG 2022-02-08 17:11:36,599 on stmt: inferred.1 = origsize // known_size
DEBUG 2022-02-08 17:11:36,599 find_def var='known_size' stmt=inferred.1 = origsize // known_size
DEBUG 2022-02-08 17:11:36,599 find_def_from_top label 114
DEBUG 2022-02-08 17:11:36,599 idom 92 from label 114
DEBUG 2022-02-08 17:11:36,599 find_def_from_bottom label 92
DEBUG 2022-02-08 17:11:36,599 find_def_from_top label 92
DEBUG 2022-02-08 17:11:36,599 idom 84 from label 92
DEBUG 2022-02-08 17:11:36,599 find_def_from_bottom label 84
DEBUG 2022-02-08 17:11:36,599 find_def_from_top label 84
DEBUG 2022-02-08 17:11:36,599 idom 58 from label 84
DEBUG 2022-02-08 17:11:36,599 find_def_from_bottom label 58
DEBUG 2022-02-08 17:11:36,599 find_def_from_top label 58
DEBUG 2022-02-08 17:11:36,599 idom 18 from label 58
DEBUG 2022-02-08 17:11:36,599 find_def_from_bottom label 18
DEBUG 2022-02-08 17:11:36,599 replaced with: inferred.1 = origsize // known_size.2
DEBUG 2022-02-08 17:11:36,599 on stmt: $126binary_modulo.5 = origsize % known_size
DEBUG 2022-02-08 17:11:36,599 find_def var='known_size' stmt=$126binary_modulo.5 = origsize % known_size
DEBUG 2022-02-08 17:11:36,599 find_def_from_top label 114
DEBUG 2022-02-08 17:11:36,599 idom 92 from label 114
DEBUG 2022-02-08 17:11:36,607 find_def_from_bottom label 92
DEBUG 2022-02-08 17:11:36,607 find_def_from_top label 92
DEBUG 2022-02-08 17:11:36,607 idom 84 from label 92
DEBUG 2022-02-08 17:11:36,607 find_def_from_bottom label 84
DEBUG 2022-02-08 17:11:36,607 find_def_from_top label 84
DEBUG 2022-02-08 17:11:36,607 idom 58 from label 84
DEBUG 2022-02-08 17:11:36,607 find_def_from_bottom label 58
DEBUG 2022-02-08 17:11:36,607 find_def_from_top label 58
DEBUG 2022-02-08 17:11:36,607 idom 18 from label 58
DEBUG 2022-02-08 17:11:36,607 find_def_from_bottom label 18
DEBUG 2022-02-08 17:11:36,607 replaced with: $126binary_modulo.5 = origsize % known_size.2
DEBUG 2022-02-08 17:11:36,607 on stmt: $const128.6 = const(int, 0)
DEBUG 2022-02-08 17:11:36,607 on stmt: ok = $126binary_modulo.5 == $const128.6
DEBUG 2022-02-08 17:11:36,607 on stmt: jump 134
DEBUG 2022-02-08 17:11:36,607 ==== SSA block rewrite pass on 134
DEBUG 2022-02-08 17:11:36,607 Running <numba.core.ssa._FixSSAVars object at 0x000001E9F8070F10>
DEBUG 2022-02-08 17:11:36,607 on stmt: inferred.2 = phi(incoming_values=[Var(inferred.1, arrayobj.py:1649), Var(inferred, arrayobj.py:1646)], incoming_blocks=[114, 100])
DEBUG 2022-02-08 17:11:36,609 on stmt: bool136 = global(bool: <class 'bool'>)
DEBUG 2022-02-08 17:11:36,609 on stmt: $136pred = call bool136(ok, func=bool136, args=(Var(ok, arrayobj.py:1647),), kws=(), vararg=None, target=None)
DEBUG 2022-02-08 17:11:36,609 on stmt: branch $136pred, 146, 138
DEBUG 2022-02-08 17:11:36,609 ==== SSA block rewrite pass on 138
DEBUG 2022-02-08 17:11:36,609 Running <numba.core.ssa._FixSSAVars object at 0x000001E9F8070F10>
DEBUG 2022-02-08 17:11:36,609 on stmt: $138load_global.0 = global(ValueError: <class 'ValueError'>)
DEBUG 2022-02-08 17:11:36,609 on stmt: $const140.1 = const(str, total size of new array must be unchanged)
DEBUG 2022-02-08 17:11:36,609 on stmt: $142call_function.2 = call $138load_global.0($const140.1, func=$138load_global.0, args=[Var($const140.1, arrayobj.py:1652)], kws=(), vararg=None, target=None)
DEBUG 2022-02-08 17:11:36,609 on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
DEBUG 2022-02-08 17:11:36,609 ==== SSA block rewrite pass on 146
DEBUG 2022-02-08 17:11:36,609 Running <numba.core.ssa._FixSSAVars object at 0x000001E9F8070F10>
DEBUG 2022-02-08 17:11:36,609 on stmt: shape[neg_ax] = inferred.2
DEBUG 2022-02-08 17:11:36,609 on stmt: jump 164
DEBUG 2022-02-08 17:11:36,609 ==== SSA block rewrite pass on 156
DEBUG 2022-02-08 17:11:36,609 Running <numba.core.ssa._FixSSAVars object at 0x000001E9F8070F10>
DEBUG 2022-02-08 17:11:36,609 on stmt: $156load_global.0 = global(ValueError: <class 'ValueError'>)
DEBUG 2022-02-08 17:11:36,609 on stmt: $const158.1 = const(str, multiple negative shape values)
DEBUG 2022-02-08 17:11:36,609 on stmt: $160call_function.2 = call $156load_global.0($const158.1, func=$156load_global.0, args=[Var($const158.1, arrayobj.py:1656)], kws=(), vararg=None, target=None)
DEBUG 2022-02-08 17:11:36,609 on stmt: <static> raise <class 'ValueError'>('multiple negative shape values')
DEBUG 2022-02-08 17:11:36,609 ==== SSA block rewrite pass on 164
DEBUG 2022-02-08 17:11:36,609 Running <numba.core.ssa._FixSSAVars object at 0x000001E9F8070F10>
DEBUG 2022-02-08 17:11:36,609 on stmt: $const164.0 = const(NoneType, None)
DEBUG 2022-02-08 17:11:36,609 on stmt: $166return_value.1 = cast(value=$const164.0)
DEBUG 2022-02-08 17:11:36,609 on stmt: return $166return_value.1
DEBUG 2022-02-08 17:11:36,609 ==== SSA block rewrite pass on 165
DEBUG 2022-02-08 17:11:36,609 Running <numba.core.ssa._FixSSAVars object at 0x000001E9F8070F10>
DEBUG 2022-02-08 17:11:36,609 on stmt: jump 18
DEBUG 2022-02-08 17:11:36,609 Fix SSA violator on var ok
DEBUG 2022-02-08 17:11:36,609 ==== SSA block rewrite pass on 0
DEBUG 2022-02-08 17:11:36,609 Running <numba.core.ssa._FreshVarHandler object at 0x000001E9F80838B0>
DEBUG 2022-02-08 17:11:36,609 on stmt: origsize = arg(0, name=origsize)
DEBUG 2022-02-08 17:11:36,609 on stmt: shape = arg(1, name=shape)
DEBUG 2022-02-08 17:11:36,609 on stmt: num_neg_value = const(int, 0)
DEBUG 2022-02-08 17:11:36,609 on stmt: known_size = const(int, 1)
DEBUG 2022-02-08 17:11:36,609 on stmt: $10load_global.2 = global(enumerate: <class 'enumerate'>)
DEBUG 2022-02-08 17:11:36,609 on stmt: $14call_function.4 = call $10load_global.2(shape, func=$10load_global.2, args=[Var(shape, arrayobj.py:1630)], kws=(), vararg=None, target=None)
DEBUG 2022-02-08 17:11:36,609 on stmt: $16get_iter.5 = getiter(value=$14call_function.4)
DEBUG 2022-02-08 17:11:36,609 on stmt: $phi18.0 = $16get_iter.5
DEBUG 2022-02-08 17:11:36,609 on stmt: jump 18
DEBUG 2022-02-08 17:11:36,609 ==== SSA block rewrite pass on 18
DEBUG 2022-02-08 17:11:36,609 Running <numba.core.ssa._FreshVarHandler object at 0x000001E9F80838B0>
DEBUG 2022-02-08 17:11:36,609 on stmt: known_size.2 = phi(incoming_values=[Var(known_size, arrayobj.py:1631), Var(known_size.3, arrayobj.py:1637)], incoming_blocks=[0, 165])
DEBUG 2022-02-08 17:11:36,609 on stmt: $18for_iter.1 = iternext(value=$phi18.0)
DEBUG 2022-02-08 17:11:36,609 on stmt: $18for_iter.2 = pair_first(value=$18for_iter.1)
DEBUG 2022-02-08 17:11:36,609 on stmt: $18for_iter.3 = pair_second(value=$18for_iter.1)
DEBUG 2022-02-08 17:11:36,609 on stmt: $phi20.1 = $18for_iter.2
DEBUG 2022-02-08 17:11:36,609 on stmt: branch $18for_iter.3, 20, 58
DEBUG 2022-02-08 17:11:36,609 ==== SSA block rewrite pass on 20
DEBUG 2022-02-08 17:11:36,609 Running <numba.core.ssa._FreshVarHandler object at 0x000001E9F80838B0>
DEBUG 2022-02-08 17:11:36,609 on stmt: $20unpack_sequence.4 = exhaust_iter(value=$phi20.1, count=2)
DEBUG 2022-02-08 17:11:36,609 on stmt: $20unpack_sequence.2 = static_getitem(value=$20unpack_sequence.4, index=0, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-02-08 17:11:36,609 on stmt: $20unpack_sequence.3 = static_getitem(value=$20unpack_sequence.4, index=1, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-02-08 17:11:36,609 on stmt: ax = $20unpack_sequence.2
DEBUG 2022-02-08 17:11:36,609 on stmt: s = $20unpack_sequence.3
DEBUG 2022-02-08 17:11:36,609 on stmt: $const28.6 = const(int, 0)
DEBUG 2022-02-08 17:11:36,609 on stmt: $30compare_op.7 = s < $const28.6
DEBUG 2022-02-08 17:11:36,609 on stmt: bool32 = global(bool: <class 'bool'>)
DEBUG 2022-02-08 17:11:36,609 on stmt: $32pred = call bool32($30compare_op.7, func=bool32, args=(Var($30compare_op.7, arrayobj.py:1633),), kws=(), vararg=None, target=None)
DEBUG 2022-02-08 17:11:36,609 on stmt: branch $32pred, 34, 48
DEBUG 2022-02-08 17:11:36,609 ==== SSA block rewrite pass on 34
DEBUG 2022-02-08 17:11:36,609 Running <numba.core.ssa._FreshVarHandler object at 0x000001E9F80838B0>
DEBUG 2022-02-08 17:11:36,609 on stmt: $const36.2 = const(int, 1)
DEBUG 2022-02-08 17:11:36,609 on stmt: $38inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=num_neg_value, rhs=$const36.2, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-08 17:11:36,609 on stmt: num_neg_value = $38inplace_add.3
DEBUG 2022-02-08 17:11:36,609 on stmt: neg_ax = ax
DEBUG 2022-02-08 17:11:36,609 on stmt: jump 165
DEBUG 2022-02-08 17:11:36,609 ==== SSA block rewrite pass on 48
DEBUG 2022-02-08 17:11:36,609 Running <numba.core.ssa._FreshVarHandler object at 0x000001E9F80838B0>
DEBUG 2022-02-08 17:11:36,609 on stmt: $52inplace_multiply.3 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=known_size.2, rhs=s, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-08 17:11:36,609 on stmt: known_size.1 = $52inplace_multiply.3
DEBUG 2022-02-08 17:11:36,609 on stmt: jump 165
DEBUG 2022-02-08 17:11:36,609 ==== SSA block rewrite pass on 58
DEBUG 2022-02-08 17:11:36,609 Running <numba.core.ssa._FreshVarHandler object at 0x000001E9F80838B0>
DEBUG 2022-02-08 17:11:36,609 on stmt: $const60.1 = const(int, 0)
DEBUG 2022-02-08 17:11:36,609 on stmt: $62compare_op.2 = num_neg_value == $const60.1
DEBUG 2022-02-08 17:11:36,609 on stmt: bool64 = global(bool: <class 'bool'>)
DEBUG 2022-02-08 17:11:36,609 on stmt: $64pred = call bool64($62compare_op.2, func=bool64, args=(Var($62compare_op.2, arrayobj.py:1639),), kws=(), vararg=None, target=None)
DEBUG 2022-02-08 17:11:36,609 on stmt: branch $64pred, 66, 84
DEBUG 2022-02-08 17:11:36,609 ==== SSA block rewrite pass on 66
DEBUG 2022-02-08 17:11:36,609 Running <numba.core.ssa._FreshVarHandler object at 0x000001E9F80838B0>
DEBUG 2022-02-08 17:11:36,609 on stmt: $70compare_op.2 = origsize != known_size.2
DEBUG 2022-02-08 17:11:36,609 on stmt: bool72 = global(bool: <class 'bool'>)
DEBUG 2022-02-08 17:11:36,609 on stmt: $72pred = call bool72($70compare_op.2, func=bool72, args=(Var($70compare_op.2, arrayobj.py:1640),), kws=(), vararg=None, target=None)
DEBUG 2022-02-08 17:11:36,609 on stmt: branch $72pred, 74, 164
DEBUG 2022-02-08 17:11:36,609 ==== SSA block rewrite pass on 74
DEBUG 2022-02-08 17:11:36,609 Running <numba.core.ssa._FreshVarHandler object at 0x000001E9F80838B0>
DEBUG 2022-02-08 17:11:36,609 on stmt: $74load_global.0 = global(ValueError: <class 'ValueError'>)
DEBUG 2022-02-08 17:11:36,609 on stmt: $const76.1 = const(str, total size of new array must be unchanged)
DEBUG 2022-02-08 17:11:36,609 on stmt: $78call_function.2 = call $74load_global.0($const76.1, func=$74load_global.0, args=[Var($const76.1, arrayobj.py:1641)], kws=(), vararg=None, target=None)
DEBUG 2022-02-08 17:11:36,609 on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
DEBUG 2022-02-08 17:11:36,609 ==== SSA block rewrite pass on 84
DEBUG 2022-02-08 17:11:36,609 Running <numba.core.ssa._FreshVarHandler object at 0x000001E9F80838B0>
DEBUG 2022-02-08 17:11:36,609 on stmt: $const86.1 = const(int, 1)
DEBUG 2022-02-08 17:11:36,609 on stmt: $88compare_op.2 = num_neg_value == $const86.1
DEBUG 2022-02-08 17:11:36,609 on stmt: bool90 = global(bool: <class 'bool'>)
DEBUG 2022-02-08 17:11:36,609 on stmt: $90pred = call bool90($88compare_op.2, func=bool90, args=(Var($88compare_op.2, arrayobj.py:1643),), kws=(), vararg=None, target=None)
DEBUG 2022-02-08 17:11:36,609 on stmt: branch $90pred, 92, 156
DEBUG 2022-02-08 17:11:36,609 ==== SSA block rewrite pass on 92
DEBUG 2022-02-08 17:11:36,609 Running <numba.core.ssa._FreshVarHandler object at 0x000001E9F80838B0>
DEBUG 2022-02-08 17:11:36,609 on stmt: $const94.1 = const(int, 0)
DEBUG 2022-02-08 17:11:36,609 on stmt: $96compare_op.2 = known_size.2 == $const94.1
DEBUG 2022-02-08 17:11:36,609 on stmt: bool98 = global(bool: <class 'bool'>)
DEBUG 2022-02-08 17:11:36,609 on stmt: $98pred = call bool98($96compare_op.2, func=bool98, args=(Var($96compare_op.2, arrayobj.py:1645),), kws=(), vararg=None, target=None)
DEBUG 2022-02-08 17:11:36,617 on stmt: branch $98pred, 100, 114
DEBUG 2022-02-08 17:11:36,617 ==== SSA block rewrite pass on 100
DEBUG 2022-02-08 17:11:36,617 Running <numba.core.ssa._FreshVarHandler object at 0x000001E9F80838B0>
DEBUG 2022-02-08 17:11:36,617 on stmt: inferred = const(int, 0)
DEBUG 2022-02-08 17:11:36,617 on stmt: $const106.2 = const(int, 0)
DEBUG 2022-02-08 17:11:36,617 on stmt: ok = origsize == $const106.2
DEBUG 2022-02-08 17:11:36,617 first assign: ok
DEBUG 2022-02-08 17:11:36,617 replaced with: ok = origsize == $const106.2
DEBUG 2022-02-08 17:11:36,617 on stmt: jump 134
DEBUG 2022-02-08 17:11:36,617 ==== SSA block rewrite pass on 114
DEBUG 2022-02-08 17:11:36,617 Running <numba.core.ssa._FreshVarHandler object at 0x000001E9F80838B0>
DEBUG 2022-02-08 17:11:36,617 on stmt: inferred.1 = origsize // known_size.2
DEBUG 2022-02-08 17:11:36,617 on stmt: $126binary_modulo.5 = origsize % known_size.2
DEBUG 2022-02-08 17:11:36,617 on stmt: $const128.6 = const(int, 0)
DEBUG 2022-02-08 17:11:36,617 on stmt: ok = $126binary_modulo.5 == $const128.6
DEBUG 2022-02-08 17:11:36,617 replaced with: ok.1 = $126binary_modulo.5 == $const128.6
DEBUG 2022-02-08 17:11:36,617 on stmt: jump 134
DEBUG 2022-02-08 17:11:36,617 ==== SSA block rewrite pass on 134
DEBUG 2022-02-08 17:11:36,617 Running <numba.core.ssa._FreshVarHandler object at 0x000001E9F80838B0>
DEBUG 2022-02-08 17:11:36,617 on stmt: inferred.2 = phi(incoming_values=[Var(inferred.1, arrayobj.py:1649), Var(inferred, arrayobj.py:1646)], incoming_blocks=[114, 100])
DEBUG 2022-02-08 17:11:36,617 on stmt: bool136 = global(bool: <class 'bool'>)
DEBUG 2022-02-08 17:11:36,617 on stmt: $136pred = call bool136(ok, func=bool136, args=(Var(ok, arrayobj.py:1647),), kws=(), vararg=None, target=None)
DEBUG 2022-02-08 17:11:36,617 on stmt: branch $136pred, 146, 138
DEBUG 2022-02-08 17:11:36,617 ==== SSA block rewrite pass on 138
DEBUG 2022-02-08 17:11:36,617 Running <numba.core.ssa._FreshVarHandler object at 0x000001E9F80838B0>
DEBUG 2022-02-08 17:11:36,617 on stmt: $138load_global.0 = global(ValueError: <class 'ValueError'>)
DEBUG 2022-02-08 17:11:36,617 on stmt: $const140.1 = const(str, total size of new array must be unchanged)
DEBUG 2022-02-08 17:11:36,617 on stmt: $142call_function.2 = call $138load_global.0($const140.1, func=$138load_global.0, args=[Var($const140.1, arrayobj.py:1652)], kws=(), vararg=None, target=None)
DEBUG 2022-02-08 17:11:36,620 on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
DEBUG 2022-02-08 17:11:36,620 ==== SSA block rewrite pass on 146
DEBUG 2022-02-08 17:11:36,620 Running <numba.core.ssa._FreshVarHandler object at 0x000001E9F80838B0>
DEBUG 2022-02-08 17:11:36,620 on stmt: shape[neg_ax] = inferred.2
DEBUG 2022-02-08 17:11:36,620 on stmt: jump 164
DEBUG 2022-02-08 17:11:36,620 ==== SSA block rewrite pass on 156
DEBUG 2022-02-08 17:11:36,620 Running <numba.core.ssa._FreshVarHandler object at 0x000001E9F80838B0>
DEBUG 2022-02-08 17:11:36,620 on stmt: $156load_global.0 = global(ValueError: <class 'ValueError'>)
DEBUG 2022-02-08 17:11:36,620 on stmt: $const158.1 = const(str, multiple negative shape values)
DEBUG 2022-02-08 17:11:36,620 on stmt: $160call_function.2 = call $156load_global.0($const158.1, func=$156load_global.0, args=[Var($const158.1, arrayobj.py:1656)], kws=(), vararg=None, target=None)
DEBUG 2022-02-08 17:11:36,620 on stmt: <static> raise <class 'ValueError'>('multiple negative shape values')
DEBUG 2022-02-08 17:11:36,620 ==== SSA block rewrite pass on 164
DEBUG 2022-02-08 17:11:36,620 Running <numba.core.ssa._FreshVarHandler object at 0x000001E9F80838B0>
DEBUG 2022-02-08 17:11:36,620 on stmt: $const164.0 = const(NoneType, None)
DEBUG 2022-02-08 17:11:36,620 on stmt: $166return_value.1 = cast(value=$const164.0)
DEBUG 2022-02-08 17:11:36,620 on stmt: return $166return_value.1
DEBUG 2022-02-08 17:11:36,620 ==== SSA block rewrite pass on 165
DEBUG 2022-02-08 17:11:36,620 Running <numba.core.ssa._FreshVarHandler object at 0x000001E9F80838B0>
DEBUG 2022-02-08 17:11:36,620 on stmt: known_size.3 = phi(incoming_values=[Var(known_size.1, arrayobj.py:1637), Var(known_size.2, arrayobj.py:1637)], incoming_blocks=[48, 34])
DEBUG 2022-02-08 17:11:36,620 on stmt: jump 18
DEBUG 2022-02-08 17:11:36,620 Replaced assignments: defaultdict(<class 'list'>,
            {100: [<numba.core.ir.Assign object at 0x000001E9F8049A30>],
             114: [<numba.core.ir.Assign object at 0x000001E9F8049A90>]})
DEBUG 2022-02-08 17:11:36,620 ==== SSA block rewrite pass on 0
DEBUG 2022-02-08 17:11:36,620 Running <numba.core.ssa._FixSSAVars object at 0x000001E9F8070F10>
DEBUG 2022-02-08 17:11:36,620 on stmt: origsize = arg(0, name=origsize)
DEBUG 2022-02-08 17:11:36,620 on stmt: shape = arg(1, name=shape)
DEBUG 2022-02-08 17:11:36,620 on stmt: num_neg_value = const(int, 0)
DEBUG 2022-02-08 17:11:36,620 on stmt: known_size = const(int, 1)
DEBUG 2022-02-08 17:11:36,620 on stmt: $10load_global.2 = global(enumerate: <class 'enumerate'>)
DEBUG 2022-02-08 17:11:36,620 on stmt: $14call_function.4 = call $10load_global.2(shape, func=$10load_global.2, args=[Var(shape, arrayobj.py:1630)], kws=(), vararg=None, target=None)
DEBUG 2022-02-08 17:11:36,620 on stmt: $16get_iter.5 = getiter(value=$14call_function.4)
DEBUG 2022-02-08 17:11:36,620 on stmt: $phi18.0 = $16get_iter.5
DEBUG 2022-02-08 17:11:36,620 on stmt: jump 18
DEBUG 2022-02-08 17:11:36,620 ==== SSA block rewrite pass on 18
DEBUG 2022-02-08 17:11:36,620 Running <numba.core.ssa._FixSSAVars object at 0x000001E9F8070F10>
DEBUG 2022-02-08 17:11:36,620 on stmt: known_size.2 = phi(incoming_values=[Var(known_size, arrayobj.py:1631), Var(known_size.3, arrayobj.py:1637)], incoming_blocks=[0, 165])
DEBUG 2022-02-08 17:11:36,620 on stmt: $18for_iter.1 = iternext(value=$phi18.0)
DEBUG 2022-02-08 17:11:36,620 on stmt: $18for_iter.2 = pair_first(value=$18for_iter.1)
DEBUG 2022-02-08 17:11:36,620 on stmt: $18for_iter.3 = pair_second(value=$18for_iter.1)
DEBUG 2022-02-08 17:11:36,620 on stmt: $phi20.1 = $18for_iter.2
DEBUG 2022-02-08 17:11:36,620 on stmt: branch $18for_iter.3, 20, 58
DEBUG 2022-02-08 17:11:36,620 ==== SSA block rewrite pass on 20
DEBUG 2022-02-08 17:11:36,620 Running <numba.core.ssa._FixSSAVars object at 0x000001E9F8070F10>
DEBUG 2022-02-08 17:11:36,620 on stmt: $20unpack_sequence.4 = exhaust_iter(value=$phi20.1, count=2)
DEBUG 2022-02-08 17:11:36,620 on stmt: $20unpack_sequence.2 = static_getitem(value=$20unpack_sequence.4, index=0, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-02-08 17:11:36,620 on stmt: $20unpack_sequence.3 = static_getitem(value=$20unpack_sequence.4, index=1, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-02-08 17:11:36,620 on stmt: ax = $20unpack_sequence.2
DEBUG 2022-02-08 17:11:36,620 on stmt: s = $20unpack_sequence.3
DEBUG 2022-02-08 17:11:36,620 on stmt: $const28.6 = const(int, 0)
DEBUG 2022-02-08 17:11:36,620 on stmt: $30compare_op.7 = s < $const28.6
DEBUG 2022-02-08 17:11:36,620 on stmt: bool32 = global(bool: <class 'bool'>)
DEBUG 2022-02-08 17:11:36,620 on stmt: $32pred = call bool32($30compare_op.7, func=bool32, args=(Var($30compare_op.7, arrayobj.py:1633),), kws=(), vararg=None, target=None)
DEBUG 2022-02-08 17:11:36,620 on stmt: branch $32pred, 34, 48
DEBUG 2022-02-08 17:11:36,620 ==== SSA block rewrite pass on 34
DEBUG 2022-02-08 17:11:36,620 Running <numba.core.ssa._FixSSAVars object at 0x000001E9F8070F10>
DEBUG 2022-02-08 17:11:36,620 on stmt: $const36.2 = const(int, 1)
DEBUG 2022-02-08 17:11:36,620 on stmt: $38inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=num_neg_value, rhs=$const36.2, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-08 17:11:36,620 on stmt: num_neg_value = $38inplace_add.3
DEBUG 2022-02-08 17:11:36,620 on stmt: neg_ax = ax
DEBUG 2022-02-08 17:11:36,620 on stmt: jump 165
DEBUG 2022-02-08 17:11:36,620 ==== SSA block rewrite pass on 48
DEBUG 2022-02-08 17:11:36,620 Running <numba.core.ssa._FixSSAVars object at 0x000001E9F8070F10>
DEBUG 2022-02-08 17:11:36,620 on stmt: $52inplace_multiply.3 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=known_size.2, rhs=s, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-08 17:11:36,620 on stmt: known_size.1 = $52inplace_multiply.3
DEBUG 2022-02-08 17:11:36,620 on stmt: jump 165
DEBUG 2022-02-08 17:11:36,620 ==== SSA block rewrite pass on 58
DEBUG 2022-02-08 17:11:36,620 Running <numba.core.ssa._FixSSAVars object at 0x000001E9F8070F10>
DEBUG 2022-02-08 17:11:36,620 on stmt: $const60.1 = const(int, 0)
DEBUG 2022-02-08 17:11:36,620 on stmt: $62compare_op.2 = num_neg_value == $const60.1
DEBUG 2022-02-08 17:11:36,620 on stmt: bool64 = global(bool: <class 'bool'>)
DEBUG 2022-02-08 17:11:36,620 on stmt: $64pred = call bool64($62compare_op.2, func=bool64, args=(Var($62compare_op.2, arrayobj.py:1639),), kws=(), vararg=None, target=None)
DEBUG 2022-02-08 17:11:36,620 on stmt: branch $64pred, 66, 84
DEBUG 2022-02-08 17:11:36,620 ==== SSA block rewrite pass on 66
DEBUG 2022-02-08 17:11:36,620 Running <numba.core.ssa._FixSSAVars object at 0x000001E9F8070F10>
DEBUG 2022-02-08 17:11:36,620 on stmt: $70compare_op.2 = origsize != known_size.2
DEBUG 2022-02-08 17:11:36,620 on stmt: bool72 = global(bool: <class 'bool'>)
DEBUG 2022-02-08 17:11:36,620 on stmt: $72pred = call bool72($70compare_op.2, func=bool72, args=(Var($70compare_op.2, arrayobj.py:1640),), kws=(), vararg=None, target=None)
DEBUG 2022-02-08 17:11:36,620 on stmt: branch $72pred, 74, 164
DEBUG 2022-02-08 17:11:36,620 ==== SSA block rewrite pass on 74
DEBUG 2022-02-08 17:11:36,620 Running <numba.core.ssa._FixSSAVars object at 0x000001E9F8070F10>
DEBUG 2022-02-08 17:11:36,620 on stmt: $74load_global.0 = global(ValueError: <class 'ValueError'>)
DEBUG 2022-02-08 17:11:36,620 on stmt: $const76.1 = const(str, total size of new array must be unchanged)
DEBUG 2022-02-08 17:11:36,620 on stmt: $78call_function.2 = call $74load_global.0($const76.1, func=$74load_global.0, args=[Var($const76.1, arrayobj.py:1641)], kws=(), vararg=None, target=None)
DEBUG 2022-02-08 17:11:36,620 on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
DEBUG 2022-02-08 17:11:36,620 ==== SSA block rewrite pass on 84
DEBUG 2022-02-08 17:11:36,620 Running <numba.core.ssa._FixSSAVars object at 0x000001E9F8070F10>
DEBUG 2022-02-08 17:11:36,620 on stmt: $const86.1 = const(int, 1)
DEBUG 2022-02-08 17:11:36,620 on stmt: $88compare_op.2 = num_neg_value == $const86.1
DEBUG 2022-02-08 17:11:36,620 on stmt: bool90 = global(bool: <class 'bool'>)
DEBUG 2022-02-08 17:11:36,620 on stmt: $90pred = call bool90($88compare_op.2, func=bool90, args=(Var($88compare_op.2, arrayobj.py:1643),), kws=(), vararg=None, target=None)
DEBUG 2022-02-08 17:11:36,620 on stmt: branch $90pred, 92, 156
DEBUG 2022-02-08 17:11:36,620 ==== SSA block rewrite pass on 92
DEBUG 2022-02-08 17:11:36,620 Running <numba.core.ssa._FixSSAVars object at 0x000001E9F8070F10>
DEBUG 2022-02-08 17:11:36,620 on stmt: $const94.1 = const(int, 0)
DEBUG 2022-02-08 17:11:36,620 on stmt: $96compare_op.2 = known_size.2 == $const94.1
DEBUG 2022-02-08 17:11:36,620 on stmt: bool98 = global(bool: <class 'bool'>)
DEBUG 2022-02-08 17:11:36,620 on stmt: $98pred = call bool98($96compare_op.2, func=bool98, args=(Var($96compare_op.2, arrayobj.py:1645),), kws=(), vararg=None, target=None)
DEBUG 2022-02-08 17:11:36,620 on stmt: branch $98pred, 100, 114
DEBUG 2022-02-08 17:11:36,620 ==== SSA block rewrite pass on 100
DEBUG 2022-02-08 17:11:36,620 Running <numba.core.ssa._FixSSAVars object at 0x000001E9F8070F10>
DEBUG 2022-02-08 17:11:36,620 on stmt: inferred = const(int, 0)
DEBUG 2022-02-08 17:11:36,620 on stmt: $const106.2 = const(int, 0)
DEBUG 2022-02-08 17:11:36,628 on stmt: ok = origsize == $const106.2
DEBUG 2022-02-08 17:11:36,628 on stmt: jump 134
DEBUG 2022-02-08 17:11:36,628 ==== SSA block rewrite pass on 114
DEBUG 2022-02-08 17:11:36,628 Running <numba.core.ssa._FixSSAVars object at 0x000001E9F8070F10>
DEBUG 2022-02-08 17:11:36,628 on stmt: inferred.1 = origsize // known_size.2
DEBUG 2022-02-08 17:11:36,628 on stmt: $126binary_modulo.5 = origsize % known_size.2
DEBUG 2022-02-08 17:11:36,628 on stmt: $const128.6 = const(int, 0)
DEBUG 2022-02-08 17:11:36,628 on stmt: ok.1 = $126binary_modulo.5 == $const128.6
DEBUG 2022-02-08 17:11:36,628 on stmt: jump 134
DEBUG 2022-02-08 17:11:36,628 ==== SSA block rewrite pass on 134
DEBUG 2022-02-08 17:11:36,628 Running <numba.core.ssa._FixSSAVars object at 0x000001E9F8070F10>
DEBUG 2022-02-08 17:11:36,628 on stmt: inferred.2 = phi(incoming_values=[Var(inferred.1, arrayobj.py:1649), Var(inferred, arrayobj.py:1646)], incoming_blocks=[114, 100])
DEBUG 2022-02-08 17:11:36,628 on stmt: bool136 = global(bool: <class 'bool'>)
DEBUG 2022-02-08 17:11:36,628 on stmt: $136pred = call bool136(ok, func=bool136, args=(Var(ok, arrayobj.py:1647),), kws=(), vararg=None, target=None)
DEBUG 2022-02-08 17:11:36,628 find_def var='ok' stmt=$136pred = call bool136(ok, func=bool136, args=(Var(ok, arrayobj.py:1647),), kws=(), vararg=None, target=None)
DEBUG 2022-02-08 17:11:36,628 find_def_from_top label 134
DEBUG 2022-02-08 17:11:36,628 insert phi node ok.2 = phi(incoming_values=[], incoming_blocks=[]) at 134
DEBUG 2022-02-08 17:11:36,628 find_def_from_bottom label 114
DEBUG 2022-02-08 17:11:36,628 incoming_def ok.1 = $126binary_modulo.5 == $const128.6
DEBUG 2022-02-08 17:11:36,630 find_def_from_bottom label 100
DEBUG 2022-02-08 17:11:36,630 incoming_def ok = origsize == $const106.2
DEBUG 2022-02-08 17:11:36,630 replaced with: $136pred = call bool136(ok.2, func=bool136, args=(Var(ok.2, arrayobj.py:1651),), kws=(), vararg=None, target=None)
DEBUG 2022-02-08 17:11:36,630 on stmt: branch $136pred, 146, 138
DEBUG 2022-02-08 17:11:36,630 ==== SSA block rewrite pass on 138
DEBUG 2022-02-08 17:11:36,630 Running <numba.core.ssa._FixSSAVars object at 0x000001E9F8070F10>
DEBUG 2022-02-08 17:11:36,630 on stmt: $138load_global.0 = global(ValueError: <class 'ValueError'>)
DEBUG 2022-02-08 17:11:36,630 on stmt: $const140.1 = const(str, total size of new array must be unchanged)
DEBUG 2022-02-08 17:11:36,630 on stmt: $142call_function.2 = call $138load_global.0($const140.1, func=$138load_global.0, args=[Var($const140.1, arrayobj.py:1652)], kws=(), vararg=None, target=None)
DEBUG 2022-02-08 17:11:36,630 on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
DEBUG 2022-02-08 17:11:36,630 ==== SSA block rewrite pass on 146
DEBUG 2022-02-08 17:11:36,630 Running <numba.core.ssa._FixSSAVars object at 0x000001E9F8070F10>
DEBUG 2022-02-08 17:11:36,630 on stmt: shape[neg_ax] = inferred.2
DEBUG 2022-02-08 17:11:36,630 on stmt: jump 164
DEBUG 2022-02-08 17:11:36,630 ==== SSA block rewrite pass on 156
DEBUG 2022-02-08 17:11:36,630 Running <numba.core.ssa._FixSSAVars object at 0x000001E9F8070F10>
DEBUG 2022-02-08 17:11:36,630 on stmt: $156load_global.0 = global(ValueError: <class 'ValueError'>)
DEBUG 2022-02-08 17:11:36,630 on stmt: $const158.1 = const(str, multiple negative shape values)
DEBUG 2022-02-08 17:11:36,630 on stmt: $160call_function.2 = call $156load_global.0($const158.1, func=$156load_global.0, args=[Var($const158.1, arrayobj.py:1656)], kws=(), vararg=None, target=None)
DEBUG 2022-02-08 17:11:36,630 on stmt: <static> raise <class 'ValueError'>('multiple negative shape values')
DEBUG 2022-02-08 17:11:36,630 ==== SSA block rewrite pass on 164
DEBUG 2022-02-08 17:11:36,630 Running <numba.core.ssa._FixSSAVars object at 0x000001E9F8070F10>
DEBUG 2022-02-08 17:11:36,630 on stmt: $const164.0 = const(NoneType, None)
DEBUG 2022-02-08 17:11:36,630 on stmt: $166return_value.1 = cast(value=$const164.0)
DEBUG 2022-02-08 17:11:36,630 on stmt: return $166return_value.1
DEBUG 2022-02-08 17:11:36,630 ==== SSA block rewrite pass on 165
DEBUG 2022-02-08 17:11:36,630 Running <numba.core.ssa._FixSSAVars object at 0x000001E9F8070F10>
DEBUG 2022-02-08 17:11:36,630 on stmt: known_size.3 = phi(incoming_values=[Var(known_size.1, arrayobj.py:1637), Var(known_size.2, arrayobj.py:1637)], incoming_blocks=[48, 34])
DEBUG 2022-02-08 17:11:36,630 on stmt: jump 18
DEBUG 2022-02-08 17:11:36,630 Fix SSA violator on var num_neg_value
DEBUG 2022-02-08 17:11:36,630 ==== SSA block rewrite pass on 0
DEBUG 2022-02-08 17:11:36,630 Running <numba.core.ssa._FreshVarHandler object at 0x000001E9F8070FA0>
DEBUG 2022-02-08 17:11:36,630 on stmt: origsize = arg(0, name=origsize)
DEBUG 2022-02-08 17:11:36,630 on stmt: shape = arg(1, name=shape)
DEBUG 2022-02-08 17:11:36,630 on stmt: num_neg_value = const(int, 0)
DEBUG 2022-02-08 17:11:36,630 first assign: num_neg_value
DEBUG 2022-02-08 17:11:36,630 replaced with: num_neg_value = const(int, 0)
DEBUG 2022-02-08 17:11:36,630 on stmt: known_size = const(int, 1)
DEBUG 2022-02-08 17:11:36,630 on stmt: $10load_global.2 = global(enumerate: <class 'enumerate'>)
DEBUG 2022-02-08 17:11:36,630 on stmt: $14call_function.4 = call $10load_global.2(shape, func=$10load_global.2, args=[Var(shape, arrayobj.py:1630)], kws=(), vararg=None, target=None)
DEBUG 2022-02-08 17:11:36,630 on stmt: $16get_iter.5 = getiter(value=$14call_function.4)
DEBUG 2022-02-08 17:11:36,630 on stmt: $phi18.0 = $16get_iter.5
DEBUG 2022-02-08 17:11:36,630 on stmt: jump 18
DEBUG 2022-02-08 17:11:36,630 ==== SSA block rewrite pass on 18
DEBUG 2022-02-08 17:11:36,630 Running <numba.core.ssa._FreshVarHandler object at 0x000001E9F8070FA0>
DEBUG 2022-02-08 17:11:36,630 on stmt: known_size.2 = phi(incoming_values=[Var(known_size, arrayobj.py:1631), Var(known_size.3, arrayobj.py:1637)], incoming_blocks=[0, 165])
DEBUG 2022-02-08 17:11:36,630 on stmt: $18for_iter.1 = iternext(value=$phi18.0)
DEBUG 2022-02-08 17:11:36,630 on stmt: $18for_iter.2 = pair_first(value=$18for_iter.1)
DEBUG 2022-02-08 17:11:36,630 on stmt: $18for_iter.3 = pair_second(value=$18for_iter.1)
DEBUG 2022-02-08 17:11:36,630 on stmt: $phi20.1 = $18for_iter.2
DEBUG 2022-02-08 17:11:36,630 on stmt: branch $18for_iter.3, 20, 58
DEBUG 2022-02-08 17:11:36,630 ==== SSA block rewrite pass on 20
DEBUG 2022-02-08 17:11:36,630 Running <numba.core.ssa._FreshVarHandler object at 0x000001E9F8070FA0>
DEBUG 2022-02-08 17:11:36,630 on stmt: $20unpack_sequence.4 = exhaust_iter(value=$phi20.1, count=2)
DEBUG 2022-02-08 17:11:36,630 on stmt: $20unpack_sequence.2 = static_getitem(value=$20unpack_sequence.4, index=0, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-02-08 17:11:36,630 on stmt: $20unpack_sequence.3 = static_getitem(value=$20unpack_sequence.4, index=1, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-02-08 17:11:36,630 on stmt: ax = $20unpack_sequence.2
DEBUG 2022-02-08 17:11:36,630 on stmt: s = $20unpack_sequence.3
DEBUG 2022-02-08 17:11:36,630 on stmt: $const28.6 = const(int, 0)
DEBUG 2022-02-08 17:11:36,630 on stmt: $30compare_op.7 = s < $const28.6
DEBUG 2022-02-08 17:11:36,630 on stmt: bool32 = global(bool: <class 'bool'>)
DEBUG 2022-02-08 17:11:36,630 on stmt: $32pred = call bool32($30compare_op.7, func=bool32, args=(Var($30compare_op.7, arrayobj.py:1633),), kws=(), vararg=None, target=None)
DEBUG 2022-02-08 17:11:36,630 on stmt: branch $32pred, 34, 48
DEBUG 2022-02-08 17:11:36,630 ==== SSA block rewrite pass on 34
DEBUG 2022-02-08 17:11:36,630 Running <numba.core.ssa._FreshVarHandler object at 0x000001E9F8070FA0>
DEBUG 2022-02-08 17:11:36,630 on stmt: $const36.2 = const(int, 1)
DEBUG 2022-02-08 17:11:36,630 on stmt: $38inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=num_neg_value, rhs=$const36.2, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-08 17:11:36,630 on stmt: num_neg_value = $38inplace_add.3
DEBUG 2022-02-08 17:11:36,630 replaced with: num_neg_value.1 = $38inplace_add.3
DEBUG 2022-02-08 17:11:36,630 on stmt: neg_ax = ax
DEBUG 2022-02-08 17:11:36,630 on stmt: jump 165
DEBUG 2022-02-08 17:11:36,630 ==== SSA block rewrite pass on 48
DEBUG 2022-02-08 17:11:36,630 Running <numba.core.ssa._FreshVarHandler object at 0x000001E9F8070FA0>
DEBUG 2022-02-08 17:11:36,630 on stmt: $52inplace_multiply.3 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=known_size.2, rhs=s, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-08 17:11:36,630 on stmt: known_size.1 = $52inplace_multiply.3
DEBUG 2022-02-08 17:11:36,630 on stmt: jump 165
DEBUG 2022-02-08 17:11:36,630 ==== SSA block rewrite pass on 58
DEBUG 2022-02-08 17:11:36,630 Running <numba.core.ssa._FreshVarHandler object at 0x000001E9F8070FA0>
DEBUG 2022-02-08 17:11:36,630 on stmt: $const60.1 = const(int, 0)
DEBUG 2022-02-08 17:11:36,630 on stmt: $62compare_op.2 = num_neg_value == $const60.1
DEBUG 2022-02-08 17:11:36,630 on stmt: bool64 = global(bool: <class 'bool'>)
DEBUG 2022-02-08 17:11:36,630 on stmt: $64pred = call bool64($62compare_op.2, func=bool64, args=(Var($62compare_op.2, arrayobj.py:1639),), kws=(), vararg=None, target=None)
DEBUG 2022-02-08 17:11:36,630 on stmt: branch $64pred, 66, 84
DEBUG 2022-02-08 17:11:36,630 ==== SSA block rewrite pass on 66
DEBUG 2022-02-08 17:11:36,630 Running <numba.core.ssa._FreshVarHandler object at 0x000001E9F8070FA0>
DEBUG 2022-02-08 17:11:36,630 on stmt: $70compare_op.2 = origsize != known_size.2
DEBUG 2022-02-08 17:11:36,630 on stmt: bool72 = global(bool: <class 'bool'>)
DEBUG 2022-02-08 17:11:36,630 on stmt: $72pred = call bool72($70compare_op.2, func=bool72, args=(Var($70compare_op.2, arrayobj.py:1640),), kws=(), vararg=None, target=None)
DEBUG 2022-02-08 17:11:36,630 on stmt: branch $72pred, 74, 164
DEBUG 2022-02-08 17:11:36,630 ==== SSA block rewrite pass on 74
DEBUG 2022-02-08 17:11:36,630 Running <numba.core.ssa._FreshVarHandler object at 0x000001E9F8070FA0>
DEBUG 2022-02-08 17:11:36,638 on stmt: $74load_global.0 = global(ValueError: <class 'ValueError'>)
DEBUG 2022-02-08 17:11:36,638 on stmt: $const76.1 = const(str, total size of new array must be unchanged)
DEBUG 2022-02-08 17:11:36,638 on stmt: $78call_function.2 = call $74load_global.0($const76.1, func=$74load_global.0, args=[Var($const76.1, arrayobj.py:1641)], kws=(), vararg=None, target=None)
DEBUG 2022-02-08 17:11:36,638 on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
DEBUG 2022-02-08 17:11:36,638 ==== SSA block rewrite pass on 84
DEBUG 2022-02-08 17:11:36,638 Running <numba.core.ssa._FreshVarHandler object at 0x000001E9F8070FA0>
DEBUG 2022-02-08 17:11:36,638 on stmt: $const86.1 = const(int, 1)
DEBUG 2022-02-08 17:11:36,638 on stmt: $88compare_op.2 = num_neg_value == $const86.1
DEBUG 2022-02-08 17:11:36,638 on stmt: bool90 = global(bool: <class 'bool'>)
DEBUG 2022-02-08 17:11:36,638 on stmt: $90pred = call bool90($88compare_op.2, func=bool90, args=(Var($88compare_op.2, arrayobj.py:1643),), kws=(), vararg=None, target=None)
DEBUG 2022-02-08 17:11:36,638 on stmt: branch $90pred, 92, 156
DEBUG 2022-02-08 17:11:36,638 ==== SSA block rewrite pass on 92
DEBUG 2022-02-08 17:11:36,638 Running <numba.core.ssa._FreshVarHandler object at 0x000001E9F8070FA0>
DEBUG 2022-02-08 17:11:36,638 on stmt: $const94.1 = const(int, 0)
DEBUG 2022-02-08 17:11:36,638 on stmt: $96compare_op.2 = known_size.2 == $const94.1
DEBUG 2022-02-08 17:11:36,638 on stmt: bool98 = global(bool: <class 'bool'>)
DEBUG 2022-02-08 17:11:36,638 on stmt: $98pred = call bool98($96compare_op.2, func=bool98, args=(Var($96compare_op.2, arrayobj.py:1645),), kws=(), vararg=None, target=None)
DEBUG 2022-02-08 17:11:36,638 on stmt: branch $98pred, 100, 114
DEBUG 2022-02-08 17:11:36,638 ==== SSA block rewrite pass on 100
DEBUG 2022-02-08 17:11:36,638 Running <numba.core.ssa._FreshVarHandler object at 0x000001E9F8070FA0>
DEBUG 2022-02-08 17:11:36,638 on stmt: inferred = const(int, 0)
DEBUG 2022-02-08 17:11:36,638 on stmt: $const106.2 = const(int, 0)
DEBUG 2022-02-08 17:11:36,638 on stmt: ok = origsize == $const106.2
DEBUG 2022-02-08 17:11:36,640 on stmt: jump 134
DEBUG 2022-02-08 17:11:36,640 ==== SSA block rewrite pass on 114
DEBUG 2022-02-08 17:11:36,640 Running <numba.core.ssa._FreshVarHandler object at 0x000001E9F8070FA0>
DEBUG 2022-02-08 17:11:36,640 on stmt: inferred.1 = origsize // known_size.2
DEBUG 2022-02-08 17:11:36,640 on stmt: $126binary_modulo.5 = origsize % known_size.2
DEBUG 2022-02-08 17:11:36,640 on stmt: $const128.6 = const(int, 0)
DEBUG 2022-02-08 17:11:36,640 on stmt: ok.1 = $126binary_modulo.5 == $const128.6
DEBUG 2022-02-08 17:11:36,640 on stmt: jump 134
DEBUG 2022-02-08 17:11:36,640 ==== SSA block rewrite pass on 134
DEBUG 2022-02-08 17:11:36,640 Running <numba.core.ssa._FreshVarHandler object at 0x000001E9F8070FA0>
DEBUG 2022-02-08 17:11:36,640 on stmt: ok.2 = phi(incoming_values=[Var(ok.1, arrayobj.py:1650), Var(ok, arrayobj.py:1647)], incoming_blocks=[114, 100])
DEBUG 2022-02-08 17:11:36,640 on stmt: inferred.2 = phi(incoming_values=[Var(inferred.1, arrayobj.py:1649), Var(inferred, arrayobj.py:1646)], incoming_blocks=[114, 100])
DEBUG 2022-02-08 17:11:36,640 on stmt: bool136 = global(bool: <class 'bool'>)
DEBUG 2022-02-08 17:11:36,640 on stmt: $136pred = call bool136(ok.2, func=bool136, args=(Var(ok.2, arrayobj.py:1651),), kws=(), vararg=None, target=None)
DEBUG 2022-02-08 17:11:36,640 on stmt: branch $136pred, 146, 138
DEBUG 2022-02-08 17:11:36,640 ==== SSA block rewrite pass on 138
DEBUG 2022-02-08 17:11:36,640 Running <numba.core.ssa._FreshVarHandler object at 0x000001E9F8070FA0>
DEBUG 2022-02-08 17:11:36,640 on stmt: $138load_global.0 = global(ValueError: <class 'ValueError'>)
DEBUG 2022-02-08 17:11:36,640 on stmt: $const140.1 = const(str, total size of new array must be unchanged)
DEBUG 2022-02-08 17:11:36,640 on stmt: $142call_function.2 = call $138load_global.0($const140.1, func=$138load_global.0, args=[Var($const140.1, arrayobj.py:1652)], kws=(), vararg=None, target=None)
DEBUG 2022-02-08 17:11:36,640 on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
DEBUG 2022-02-08 17:11:36,640 ==== SSA block rewrite pass on 146
DEBUG 2022-02-08 17:11:36,640 Running <numba.core.ssa._FreshVarHandler object at 0x000001E9F8070FA0>
DEBUG 2022-02-08 17:11:36,640 on stmt: shape[neg_ax] = inferred.2
DEBUG 2022-02-08 17:11:36,640 on stmt: jump 164
DEBUG 2022-02-08 17:11:36,640 ==== SSA block rewrite pass on 156
DEBUG 2022-02-08 17:11:36,640 Running <numba.core.ssa._FreshVarHandler object at 0x000001E9F8070FA0>
DEBUG 2022-02-08 17:11:36,640 on stmt: $156load_global.0 = global(ValueError: <class 'ValueError'>)
DEBUG 2022-02-08 17:11:36,640 on stmt: $const158.1 = const(str, multiple negative shape values)
DEBUG 2022-02-08 17:11:36,640 on stmt: $160call_function.2 = call $156load_global.0($const158.1, func=$156load_global.0, args=[Var($const158.1, arrayobj.py:1656)], kws=(), vararg=None, target=None)
DEBUG 2022-02-08 17:11:36,640 on stmt: <static> raise <class 'ValueError'>('multiple negative shape values')
DEBUG 2022-02-08 17:11:36,640 ==== SSA block rewrite pass on 164
DEBUG 2022-02-08 17:11:36,640 Running <numba.core.ssa._FreshVarHandler object at 0x000001E9F8070FA0>
DEBUG 2022-02-08 17:11:36,640 on stmt: $const164.0 = const(NoneType, None)
DEBUG 2022-02-08 17:11:36,640 on stmt: $166return_value.1 = cast(value=$const164.0)
DEBUG 2022-02-08 17:11:36,640 on stmt: return $166return_value.1
DEBUG 2022-02-08 17:11:36,640 ==== SSA block rewrite pass on 165
DEBUG 2022-02-08 17:11:36,640 Running <numba.core.ssa._FreshVarHandler object at 0x000001E9F8070FA0>
DEBUG 2022-02-08 17:11:36,640 on stmt: known_size.3 = phi(incoming_values=[Var(known_size.1, arrayobj.py:1637), Var(known_size.2, arrayobj.py:1637)], incoming_blocks=[48, 34])
DEBUG 2022-02-08 17:11:36,640 on stmt: jump 18
DEBUG 2022-02-08 17:11:36,640 Replaced assignments: defaultdict(<class 'list'>,
            {0: [<numba.core.ir.Assign object at 0x000001E9F8070F70>],
             34: [<numba.core.ir.Assign object at 0x000001E9F80499D0>]})
DEBUG 2022-02-08 17:11:36,640 ==== SSA block rewrite pass on 0
DEBUG 2022-02-08 17:11:36,640 Running <numba.core.ssa._FixSSAVars object at 0x000001E9F8083520>
DEBUG 2022-02-08 17:11:36,640 on stmt: origsize = arg(0, name=origsize)
DEBUG 2022-02-08 17:11:36,640 on stmt: shape = arg(1, name=shape)
DEBUG 2022-02-08 17:11:36,640 on stmt: num_neg_value = const(int, 0)
DEBUG 2022-02-08 17:11:36,640 on stmt: known_size = const(int, 1)
DEBUG 2022-02-08 17:11:36,640 on stmt: $10load_global.2 = global(enumerate: <class 'enumerate'>)
DEBUG 2022-02-08 17:11:36,640 on stmt: $14call_function.4 = call $10load_global.2(shape, func=$10load_global.2, args=[Var(shape, arrayobj.py:1630)], kws=(), vararg=None, target=None)
DEBUG 2022-02-08 17:11:36,640 on stmt: $16get_iter.5 = getiter(value=$14call_function.4)
DEBUG 2022-02-08 17:11:36,640 on stmt: $phi18.0 = $16get_iter.5
DEBUG 2022-02-08 17:11:36,640 on stmt: jump 18
DEBUG 2022-02-08 17:11:36,640 ==== SSA block rewrite pass on 18
DEBUG 2022-02-08 17:11:36,640 Running <numba.core.ssa._FixSSAVars object at 0x000001E9F8083520>
DEBUG 2022-02-08 17:11:36,640 on stmt: known_size.2 = phi(incoming_values=[Var(known_size, arrayobj.py:1631), Var(known_size.3, arrayobj.py:1637)], incoming_blocks=[0, 165])
DEBUG 2022-02-08 17:11:36,640 on stmt: $18for_iter.1 = iternext(value=$phi18.0)
DEBUG 2022-02-08 17:11:36,640 on stmt: $18for_iter.2 = pair_first(value=$18for_iter.1)
DEBUG 2022-02-08 17:11:36,640 on stmt: $18for_iter.3 = pair_second(value=$18for_iter.1)
DEBUG 2022-02-08 17:11:36,640 on stmt: $phi20.1 = $18for_iter.2
DEBUG 2022-02-08 17:11:36,640 on stmt: branch $18for_iter.3, 20, 58
DEBUG 2022-02-08 17:11:36,640 ==== SSA block rewrite pass on 20
DEBUG 2022-02-08 17:11:36,640 Running <numba.core.ssa._FixSSAVars object at 0x000001E9F8083520>
DEBUG 2022-02-08 17:11:36,640 on stmt: $20unpack_sequence.4 = exhaust_iter(value=$phi20.1, count=2)
DEBUG 2022-02-08 17:11:36,640 on stmt: $20unpack_sequence.2 = static_getitem(value=$20unpack_sequence.4, index=0, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-02-08 17:11:36,640 on stmt: $20unpack_sequence.3 = static_getitem(value=$20unpack_sequence.4, index=1, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-02-08 17:11:36,640 on stmt: ax = $20unpack_sequence.2
DEBUG 2022-02-08 17:11:36,640 on stmt: s = $20unpack_sequence.3
DEBUG 2022-02-08 17:11:36,640 on stmt: $const28.6 = const(int, 0)
DEBUG 2022-02-08 17:11:36,640 on stmt: $30compare_op.7 = s < $const28.6
DEBUG 2022-02-08 17:11:36,640 on stmt: bool32 = global(bool: <class 'bool'>)
DEBUG 2022-02-08 17:11:36,640 on stmt: $32pred = call bool32($30compare_op.7, func=bool32, args=(Var($30compare_op.7, arrayobj.py:1633),), kws=(), vararg=None, target=None)
DEBUG 2022-02-08 17:11:36,640 on stmt: branch $32pred, 34, 48
DEBUG 2022-02-08 17:11:36,640 ==== SSA block rewrite pass on 34
DEBUG 2022-02-08 17:11:36,640 Running <numba.core.ssa._FixSSAVars object at 0x000001E9F8083520>
DEBUG 2022-02-08 17:11:36,640 on stmt: $const36.2 = const(int, 1)
DEBUG 2022-02-08 17:11:36,640 on stmt: $38inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=num_neg_value, rhs=$const36.2, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-08 17:11:36,640 find_def var='num_neg_value' stmt=$38inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=num_neg_value, rhs=$const36.2, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-08 17:11:36,640 find_def_from_top label 34
DEBUG 2022-02-08 17:11:36,640 idom 20 from label 34
DEBUG 2022-02-08 17:11:36,640 find_def_from_bottom label 20
DEBUG 2022-02-08 17:11:36,640 find_def_from_top label 20
DEBUG 2022-02-08 17:11:36,640 idom 18 from label 20
DEBUG 2022-02-08 17:11:36,640 find_def_from_bottom label 18
DEBUG 2022-02-08 17:11:36,640 find_def_from_top label 18
DEBUG 2022-02-08 17:11:36,640 insert phi node num_neg_value.2 = phi(incoming_values=[], incoming_blocks=[]) at 18
DEBUG 2022-02-08 17:11:36,648 find_def_from_bottom label 0
DEBUG 2022-02-08 17:11:36,648 incoming_def num_neg_value = const(int, 0)
DEBUG 2022-02-08 17:11:36,648 find_def_from_bottom label 165
DEBUG 2022-02-08 17:11:36,648 find_def_from_top label 165
DEBUG 2022-02-08 17:11:36,648 insert phi node num_neg_value.3 = phi(incoming_values=[], incoming_blocks=[]) at 165
DEBUG 2022-02-08 17:11:36,648 find_def_from_bottom label 48
DEBUG 2022-02-08 17:11:36,648 find_def_from_top label 48
DEBUG 2022-02-08 17:11:36,648 idom 20 from label 48
DEBUG 2022-02-08 17:11:36,648 find_def_from_bottom label 20
DEBUG 2022-02-08 17:11:36,648 find_def_from_top label 20
DEBUG 2022-02-08 17:11:36,648 idom 18 from label 20
DEBUG 2022-02-08 17:11:36,648 find_def_from_bottom label 18
DEBUG 2022-02-08 17:11:36,648 incoming_def num_neg_value.2 = phi(incoming_values=[Var(num_neg_value, arrayobj.py:1630)], incoming_blocks=[0])
DEBUG 2022-02-08 17:11:36,648 find_def_from_bottom label 34
DEBUG 2022-02-08 17:11:36,648 incoming_def num_neg_value.1 = $38inplace_add.3
DEBUG 2022-02-08 17:11:36,648 incoming_def num_neg_value.3 = phi(incoming_values=[Var(num_neg_value.2, arrayobj.py:1634), Var(num_neg_value.1, arrayobj.py:1634)], incoming_blocks=[48, 34])
DEBUG 2022-02-08 17:11:36,648 replaced with: $38inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=num_neg_value.2, rhs=$const36.2, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-08 17:11:36,648 on stmt: num_neg_value.1 = $38inplace_add.3
DEBUG 2022-02-08 17:11:36,648 on stmt: neg_ax = ax
DEBUG 2022-02-08 17:11:36,648 on stmt: jump 165
DEBUG 2022-02-08 17:11:36,648 ==== SSA block rewrite pass on 48
DEBUG 2022-02-08 17:11:36,650 Running <numba.core.ssa._FixSSAVars object at 0x000001E9F8083520>
DEBUG 2022-02-08 17:11:36,650 on stmt: $52inplace_multiply.3 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=known_size.2, rhs=s, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-08 17:11:36,650 on stmt: known_size.1 = $52inplace_multiply.3
DEBUG 2022-02-08 17:11:36,650 on stmt: jump 165
DEBUG 2022-02-08 17:11:36,650 ==== SSA block rewrite pass on 58
DEBUG 2022-02-08 17:11:36,650 Running <numba.core.ssa._FixSSAVars object at 0x000001E9F8083520>
DEBUG 2022-02-08 17:11:36,650 on stmt: $const60.1 = const(int, 0)
DEBUG 2022-02-08 17:11:36,650 on stmt: $62compare_op.2 = num_neg_value == $const60.1
DEBUG 2022-02-08 17:11:36,650 find_def var='num_neg_value' stmt=$62compare_op.2 = num_neg_value == $const60.1
DEBUG 2022-02-08 17:11:36,650 find_def_from_top label 58
DEBUG 2022-02-08 17:11:36,650 idom 18 from label 58
DEBUG 2022-02-08 17:11:36,650 find_def_from_bottom label 18
DEBUG 2022-02-08 17:11:36,650 replaced with: $62compare_op.2 = num_neg_value.2 == $const60.1
DEBUG 2022-02-08 17:11:36,650 on stmt: bool64 = global(bool: <class 'bool'>)
DEBUG 2022-02-08 17:11:36,650 on stmt: $64pred = call bool64($62compare_op.2, func=bool64, args=(Var($62compare_op.2, arrayobj.py:1639),), kws=(), vararg=None, target=None)
DEBUG 2022-02-08 17:11:36,650 on stmt: branch $64pred, 66, 84
DEBUG 2022-02-08 17:11:36,650 ==== SSA block rewrite pass on 66
DEBUG 2022-02-08 17:11:36,650 Running <numba.core.ssa._FixSSAVars object at 0x000001E9F8083520>
DEBUG 2022-02-08 17:11:36,650 on stmt: $70compare_op.2 = origsize != known_size.2
DEBUG 2022-02-08 17:11:36,650 on stmt: bool72 = global(bool: <class 'bool'>)
DEBUG 2022-02-08 17:11:36,650 on stmt: $72pred = call bool72($70compare_op.2, func=bool72, args=(Var($70compare_op.2, arrayobj.py:1640),), kws=(), vararg=None, target=None)
DEBUG 2022-02-08 17:11:36,650 on stmt: branch $72pred, 74, 164
DEBUG 2022-02-08 17:11:36,650 ==== SSA block rewrite pass on 74
DEBUG 2022-02-08 17:11:36,650 Running <numba.core.ssa._FixSSAVars object at 0x000001E9F8083520>
DEBUG 2022-02-08 17:11:36,650 on stmt: $74load_global.0 = global(ValueError: <class 'ValueError'>)
DEBUG 2022-02-08 17:11:36,650 on stmt: $const76.1 = const(str, total size of new array must be unchanged)
DEBUG 2022-02-08 17:11:36,650 on stmt: $78call_function.2 = call $74load_global.0($const76.1, func=$74load_global.0, args=[Var($const76.1, arrayobj.py:1641)], kws=(), vararg=None, target=None)
DEBUG 2022-02-08 17:11:36,650 on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
DEBUG 2022-02-08 17:11:36,650 ==== SSA block rewrite pass on 84
DEBUG 2022-02-08 17:11:36,650 Running <numba.core.ssa._FixSSAVars object at 0x000001E9F8083520>
DEBUG 2022-02-08 17:11:36,650 on stmt: $const86.1 = const(int, 1)
DEBUG 2022-02-08 17:11:36,650 on stmt: $88compare_op.2 = num_neg_value == $const86.1
DEBUG 2022-02-08 17:11:36,650 find_def var='num_neg_value' stmt=$88compare_op.2 = num_neg_value == $const86.1
DEBUG 2022-02-08 17:11:36,650 find_def_from_top label 84
DEBUG 2022-02-08 17:11:36,650 idom 58 from label 84
DEBUG 2022-02-08 17:11:36,650 find_def_from_bottom label 58
DEBUG 2022-02-08 17:11:36,650 find_def_from_top label 58
DEBUG 2022-02-08 17:11:36,650 idom 18 from label 58
DEBUG 2022-02-08 17:11:36,650 find_def_from_bottom label 18
DEBUG 2022-02-08 17:11:36,650 replaced with: $88compare_op.2 = num_neg_value.2 == $const86.1
DEBUG 2022-02-08 17:11:36,650 on stmt: bool90 = global(bool: <class 'bool'>)
DEBUG 2022-02-08 17:11:36,650 on stmt: $90pred = call bool90($88compare_op.2, func=bool90, args=(Var($88compare_op.2, arrayobj.py:1643),), kws=(), vararg=None, target=None)
DEBUG 2022-02-08 17:11:36,650 on stmt: branch $90pred, 92, 156
DEBUG 2022-02-08 17:11:36,650 ==== SSA block rewrite pass on 92
DEBUG 2022-02-08 17:11:36,650 Running <numba.core.ssa._FixSSAVars object at 0x000001E9F8083520>
DEBUG 2022-02-08 17:11:36,650 on stmt: $const94.1 = const(int, 0)
DEBUG 2022-02-08 17:11:36,650 on stmt: $96compare_op.2 = known_size.2 == $const94.1
DEBUG 2022-02-08 17:11:36,650 on stmt: bool98 = global(bool: <class 'bool'>)
DEBUG 2022-02-08 17:11:36,650 on stmt: $98pred = call bool98($96compare_op.2, func=bool98, args=(Var($96compare_op.2, arrayobj.py:1645),), kws=(), vararg=None, target=None)
DEBUG 2022-02-08 17:11:36,650 on stmt: branch $98pred, 100, 114
DEBUG 2022-02-08 17:11:36,650 ==== SSA block rewrite pass on 100
DEBUG 2022-02-08 17:11:36,650 Running <numba.core.ssa._FixSSAVars object at 0x000001E9F8083520>
DEBUG 2022-02-08 17:11:36,650 on stmt: inferred = const(int, 0)
DEBUG 2022-02-08 17:11:36,650 on stmt: $const106.2 = const(int, 0)
DEBUG 2022-02-08 17:11:36,650 on stmt: ok = origsize == $const106.2
DEBUG 2022-02-08 17:11:36,650 on stmt: jump 134
DEBUG 2022-02-08 17:11:36,650 ==== SSA block rewrite pass on 114
DEBUG 2022-02-08 17:11:36,650 Running <numba.core.ssa._FixSSAVars object at 0x000001E9F8083520>
DEBUG 2022-02-08 17:11:36,650 on stmt: inferred.1 = origsize // known_size.2
DEBUG 2022-02-08 17:11:36,650 on stmt: $126binary_modulo.5 = origsize % known_size.2
DEBUG 2022-02-08 17:11:36,650 on stmt: $const128.6 = const(int, 0)
DEBUG 2022-02-08 17:11:36,650 on stmt: ok.1 = $126binary_modulo.5 == $const128.6
DEBUG 2022-02-08 17:11:36,650 on stmt: jump 134
DEBUG 2022-02-08 17:11:36,650 ==== SSA block rewrite pass on 134
DEBUG 2022-02-08 17:11:36,650 Running <numba.core.ssa._FixSSAVars object at 0x000001E9F8083520>
DEBUG 2022-02-08 17:11:36,650 on stmt: ok.2 = phi(incoming_values=[Var(ok.1, arrayobj.py:1650), Var(ok, arrayobj.py:1647)], incoming_blocks=[114, 100])
DEBUG 2022-02-08 17:11:36,650 on stmt: inferred.2 = phi(incoming_values=[Var(inferred.1, arrayobj.py:1649), Var(inferred, arrayobj.py:1646)], incoming_blocks=[114, 100])
DEBUG 2022-02-08 17:11:36,650 on stmt: bool136 = global(bool: <class 'bool'>)
DEBUG 2022-02-08 17:11:36,650 on stmt: $136pred = call bool136(ok.2, func=bool136, args=(Var(ok.2, arrayobj.py:1651),), kws=(), vararg=None, target=None)
DEBUG 2022-02-08 17:11:36,650 on stmt: branch $136pred, 146, 138
DEBUG 2022-02-08 17:11:36,650 ==== SSA block rewrite pass on 138
DEBUG 2022-02-08 17:11:36,650 Running <numba.core.ssa._FixSSAVars object at 0x000001E9F8083520>
DEBUG 2022-02-08 17:11:36,650 on stmt: $138load_global.0 = global(ValueError: <class 'ValueError'>)
DEBUG 2022-02-08 17:11:36,650 on stmt: $const140.1 = const(str, total size of new array must be unchanged)
DEBUG 2022-02-08 17:11:36,650 on stmt: $142call_function.2 = call $138load_global.0($const140.1, func=$138load_global.0, args=[Var($const140.1, arrayobj.py:1652)], kws=(), vararg=None, target=None)
DEBUG 2022-02-08 17:11:36,650 on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
DEBUG 2022-02-08 17:11:36,650 ==== SSA block rewrite pass on 146
DEBUG 2022-02-08 17:11:36,650 Running <numba.core.ssa._FixSSAVars object at 0x000001E9F8083520>
DEBUG 2022-02-08 17:11:36,650 on stmt: shape[neg_ax] = inferred.2
DEBUG 2022-02-08 17:11:36,650 on stmt: jump 164
DEBUG 2022-02-08 17:11:36,650 ==== SSA block rewrite pass on 156
DEBUG 2022-02-08 17:11:36,650 Running <numba.core.ssa._FixSSAVars object at 0x000001E9F8083520>
DEBUG 2022-02-08 17:11:36,650 on stmt: $156load_global.0 = global(ValueError: <class 'ValueError'>)
DEBUG 2022-02-08 17:11:36,650 on stmt: $const158.1 = const(str, multiple negative shape values)
DEBUG 2022-02-08 17:11:36,650 on stmt: $160call_function.2 = call $156load_global.0($const158.1, func=$156load_global.0, args=[Var($const158.1, arrayobj.py:1656)], kws=(), vararg=None, target=None)
DEBUG 2022-02-08 17:11:36,650 on stmt: <static> raise <class 'ValueError'>('multiple negative shape values')
DEBUG 2022-02-08 17:11:36,650 ==== SSA block rewrite pass on 164
DEBUG 2022-02-08 17:11:36,650 Running <numba.core.ssa._FixSSAVars object at 0x000001E9F8083520>
DEBUG 2022-02-08 17:11:36,650 on stmt: $const164.0 = const(NoneType, None)
DEBUG 2022-02-08 17:11:36,650 on stmt: $166return_value.1 = cast(value=$const164.0)
DEBUG 2022-02-08 17:11:36,658 on stmt: return $166return_value.1
DEBUG 2022-02-08 17:11:36,658 ==== SSA block rewrite pass on 165
DEBUG 2022-02-08 17:11:36,658 Running <numba.core.ssa._FixSSAVars object at 0x000001E9F8083520>
DEBUG 2022-02-08 17:11:36,658 on stmt: known_size.3 = phi(incoming_values=[Var(known_size.1, arrayobj.py:1637), Var(known_size.2, arrayobj.py:1637)], incoming_blocks=[48, 34])
DEBUG 2022-02-08 17:11:36,658 on stmt: jump 18
DEBUG 2022-02-08 17:11:36,945 bytecode dump:
>          0	NOP(arg=None, lineno=1)
           2	LOAD_CONST(arg=1, lineno=1)
           4	LOAD_FAST(arg=1, lineno=36)
           6	BINARY_MULTIPLY(arg=None, lineno=1)
           8	LOAD_FAST(arg=0, lineno=20)
          10	BINARY_SUBTRACT(arg=None, lineno=1)
          12	RETURN_VALUE(arg=None, lineno=1)
DEBUG 2022-02-08 17:11:36,945 pending: deque([State(pc_initial=0 nstack_initial=0)])
DEBUG 2022-02-08 17:11:36,945 stack: []
DEBUG 2022-02-08 17:11:36,945 dispatch pc=0, inst=NOP(arg=None, lineno=1)
DEBUG 2022-02-08 17:11:36,945 stack []
DEBUG 2022-02-08 17:11:36,945 dispatch pc=2, inst=LOAD_CONST(arg=1, lineno=1)
DEBUG 2022-02-08 17:11:36,945 stack []
DEBUG 2022-02-08 17:11:36,945 dispatch pc=4, inst=LOAD_FAST(arg=1, lineno=36)
DEBUG 2022-02-08 17:11:36,945 stack ['$const2.0']
DEBUG 2022-02-08 17:11:36,945 dispatch pc=6, inst=BINARY_MULTIPLY(arg=None, lineno=1)
DEBUG 2022-02-08 17:11:36,945 stack ['$const2.0', '$kept_edges_34.1']
DEBUG 2022-02-08 17:11:36,945 dispatch pc=8, inst=LOAD_FAST(arg=0, lineno=20)
DEBUG 2022-02-08 17:11:36,945 stack ['$6binary_multiply.2']
DEBUG 2022-02-08 17:11:36,945 dispatch pc=10, inst=BINARY_SUBTRACT(arg=None, lineno=1)
DEBUG 2022-02-08 17:11:36,945 stack ['$6binary_multiply.2', '$edge_reps_28.3']
DEBUG 2022-02-08 17:11:36,945 dispatch pc=12, inst=RETURN_VALUE(arg=None, lineno=1)
DEBUG 2022-02-08 17:11:36,945 stack ['$10binary_subtract.4']
DEBUG 2022-02-08 17:11:36,945 end state. edges=[]
DEBUG 2022-02-08 17:11:36,945 -------------------------Prune PHIs-------------------------
DEBUG 2022-02-08 17:11:36,945 Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
DEBUG 2022-02-08 17:11:36,945 defmap: {}
DEBUG 2022-02-08 17:11:36,945 phismap: defaultdict(<class 'set'>, {})
DEBUG 2022-02-08 17:11:36,945 changing phismap: defaultdict(<class 'set'>, {})
DEBUG 2022-02-08 17:11:36,945 keep phismap: {}
DEBUG 2022-02-08 17:11:36,945 new_out: defaultdict(<class 'dict'>, {})
DEBUG 2022-02-08 17:11:36,945 ----------------------DONE Prune PHIs-----------------------
DEBUG 2022-02-08 17:11:36,945 block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$const2.0'}), (4, {'res': '$kept_edges_34.1'}), (6, {'lhs': '$const2.0', 'rhs': '$kept_edges_34.1', 'res': '$6binary_multiply.2'}), (8, {'res': '$edge_reps_28.3'}), (10, {'lhs': '$6binary_multiply.2', 'rhs': '$edge_reps_28.3', 'res': '$10binary_subtract.4'}), (12, {'retval': '$10binary_subtract.4', 'castval': '$12return_value.5'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG 2022-02-08 17:11:36,945 label 0:
    edge_reps_2 = arg(0, name=edge_reps_2)   ['edge_reps_2']
    kept_edges_3 = arg(1, name=kept_edges_3) ['kept_edges_3']
    $const2.0 = const(int, 2)                ['$const2.0']
    $6binary_multiply.2 = $const2.0 * kept_edges_3 ['$6binary_multiply.2', '$const2.0', 'kept_edges_3']
    $10binary_subtract.4 = $6binary_multiply.2 - edge_reps_2 ['$10binary_subtract.4', '$6binary_multiply.2', 'edge_reps_2']
    $12return_value.5 = cast(value=$10binary_subtract.4) ['$10binary_subtract.4', '$12return_value.5']
    return $12return_value.5                 ['$12return_value.5']

DEBUG 2022-02-08 17:11:36,953 ==== SSA block analysis pass on 0
DEBUG 2022-02-08 17:11:36,953 Running <numba.core.ssa._GatherDefsHandler object at 0x000001E9F66D4550>
DEBUG 2022-02-08 17:11:36,953 on stmt: edge_reps_2 = arg(0, name=edge_reps_2)
DEBUG 2022-02-08 17:11:36,953 on stmt: kept_edges_3 = arg(1, name=kept_edges_3)
DEBUG 2022-02-08 17:11:36,953 on stmt: $const2.0 = const(int, 2)
DEBUG 2022-02-08 17:11:36,953 on stmt: $6binary_multiply.2 = $const2.0 * kept_edges_3
DEBUG 2022-02-08 17:11:36,955 on stmt: $10binary_subtract.4 = $6binary_multiply.2 - edge_reps_2
DEBUG 2022-02-08 17:11:36,955 on stmt: $12return_value.5 = cast(value=$10binary_subtract.4)
DEBUG 2022-02-08 17:11:36,955 on stmt: return $12return_value.5
DEBUG 2022-02-08 17:11:36,955 defs defaultdict(<class 'list'>,
            {'$10binary_subtract.4': [<numba.core.ir.Assign object at 0x000001E9F66BD340>],
             '$12return_value.5': [<numba.core.ir.Assign object at 0x000001E9F66BD220>],
             '$6binary_multiply.2': [<numba.core.ir.Assign object at 0x000001E9F66BDDF0>],
             '$const2.0': [<numba.core.ir.Assign object at 0x000001E9F66C79A0>],
             'edge_reps_2': [<numba.core.ir.Assign object at 0x000001E9F66C7AF0>],
             'kept_edges_3': [<numba.core.ir.Assign object at 0x000001E9F66C78E0>]})
DEBUG 2022-02-08 17:11:36,955 SSA violators set()
DEBUG 2022-02-08 17:11:36,976 bytecode dump:
>          0	NOP(arg=None, lineno=217)
           2	LOAD_DEREF(arg=1, lineno=217)
           4	LOAD_CONST(arg=1, lineno=217)
           6	CALL_FUNCTION(arg=1, lineno=217)
           8	STORE_FAST(arg=2, lineno=217)
          10	LOAD_DEREF(arg=1, lineno=218)
          12	LOAD_FAST(arg=0, lineno=218)
          14	CALL_FUNCTION(arg=1, lineno=218)
          16	STORE_FAST(arg=0, lineno=218)
          18	LOAD_FAST(arg=1, lineno=219)
          20	LOAD_CONST(arg=2, lineno=219)
          22	COMPARE_OP(arg=0, lineno=219)
          24	POP_JUMP_IF_FALSE(arg=98, lineno=219)
          26	LOAD_CONST(arg=3, lineno=220)
          28	STORE_FAST(arg=3, lineno=220)
          30	LOAD_FAST(arg=1, lineno=221)
          32	UNARY_NEGATIVE(arg=None, lineno=221)
          34	STORE_FAST(arg=4, lineno=221)
          36	LOAD_FAST(arg=4, lineno=222)
          38	LOAD_CONST(arg=2, lineno=222)
          40	COMPARE_OP(arg=0, lineno=222)
          42	POP_JUMP_IF_FALSE(arg=48, lineno=222)
          44	LOAD_GLOBAL(arg=0, lineno=223)
          46	RAISE_VARARGS(arg=1, lineno=223)
>         48	LOAD_DEREF(arg=0, lineno=224)
          50	POP_JUMP_IF_FALSE(arg=106, lineno=224)
          52	LOAD_FAST(arg=0, lineno=225)
          54	LOAD_CONST(arg=2, lineno=225)
          56	COMPARE_OP(arg=2, lineno=225)
          58	POP_JUMP_IF_FALSE(arg=76, lineno=225)
          60	LOAD_DEREF(arg=2, lineno=226)
          62	POP_JUMP_IF_FALSE(arg=68, lineno=226)
          64	LOAD_DEREF(arg=2, lineno=227)
          66	RETURN_VALUE(arg=None, lineno=227)
>         68	LOAD_GLOBAL(arg=1, lineno=229)
          70	LOAD_CONST(arg=4, lineno=229)
          72	CALL_FUNCTION(arg=1, lineno=229)
          74	RAISE_VARARGS(arg=1, lineno=229)
>         76	LOAD_FAST(arg=0, lineno=230)
          78	LOAD_CONST(arg=1, lineno=230)
          80	COMPARE_OP(arg=3, lineno=230)
          82	POP_JUMP_IF_FALSE(arg=106, lineno=230)
          84	LOAD_FAST(arg=0, lineno=230)
          86	LOAD_CONST(arg=5, lineno=230)
          88	COMPARE_OP(arg=3, lineno=230)
          90	POP_JUMP_IF_FALSE(arg=106, lineno=230)
          92	LOAD_CONST(arg=2, lineno=231)
          94	RETURN_VALUE(arg=None, lineno=231)
          96	JUMP_FORWARD(arg=8, lineno=231)
>         98	LOAD_CONST(arg=6, lineno=233)
         100	STORE_FAST(arg=3, lineno=233)
         102	LOAD_FAST(arg=1, lineno=234)
         104	STORE_FAST(arg=4, lineno=234)
>        106	LOAD_FAST(arg=4, lineno=235)
         108	LOAD_CONST(arg=7, lineno=235)
         110	COMPARE_OP(arg=4, lineno=235)
         112	POP_JUMP_IF_FALSE(arg=130, lineno=235)
         114	LOAD_GLOBAL(arg=2, lineno=237)
         116	LOAD_METHOD(arg=3, lineno=237)
         118	LOAD_FAST(arg=0, lineno=237)
         120	LOAD_GLOBAL(arg=4, lineno=237)
         122	LOAD_FAST(arg=1, lineno=237)
         124	CALL_FUNCTION(arg=1, lineno=237)
         126	CALL_METHOD(arg=2, lineno=237)
         128	RETURN_VALUE(arg=None, lineno=237)
>        130	LOAD_FAST(arg=4, lineno=238)
         132	LOAD_CONST(arg=2, lineno=238)
         134	COMPARE_OP(arg=3, lineno=238)
         136	POP_JUMP_IF_FALSE(arg=172, lineno=238)
         138	LOAD_FAST(arg=4, lineno=239)
         140	LOAD_CONST(arg=1, lineno=239)
         142	BINARY_AND(arg=None, lineno=239)
         144	POP_JUMP_IF_FALSE(arg=154, lineno=239)
         146	LOAD_FAST(arg=2, lineno=240)
         148	LOAD_FAST(arg=0, lineno=240)
         150	INPLACE_MULTIPLY(arg=None, lineno=240)
         152	STORE_FAST(arg=2, lineno=240)
>        154	LOAD_FAST(arg=4, lineno=241)
         156	LOAD_CONST(arg=1, lineno=241)
         158	INPLACE_RSHIFT(arg=None, lineno=241)
         160	STORE_FAST(arg=4, lineno=241)
         162	LOAD_FAST(arg=0, lineno=242)
         164	LOAD_FAST(arg=0, lineno=242)
         166	INPLACE_MULTIPLY(arg=None, lineno=242)
         168	STORE_FAST(arg=0, lineno=242)
         170	JUMP_ABSOLUTE(arg=130, lineno=242)
>        172	LOAD_FAST(arg=3, lineno=244)
         174	POP_JUMP_IF_FALSE(arg=184, lineno=244)
         176	LOAD_CONST(arg=8, lineno=244)
         178	LOAD_FAST(arg=2, lineno=244)
         180	BINARY_TRUE_DIVIDE(arg=None, lineno=244)
         182	RETURN_VALUE(arg=None, lineno=244)
>        184	LOAD_FAST(arg=2, lineno=244)
         186	RETURN_VALUE(arg=None, lineno=244)
DEBUG 2022-02-08 17:11:36,976 pending: deque([State(pc_initial=0 nstack_initial=0)])
DEBUG 2022-02-08 17:11:36,976 stack: []
DEBUG 2022-02-08 17:11:36,976 dispatch pc=0, inst=NOP(arg=None, lineno=217)
DEBUG 2022-02-08 17:11:36,976 stack []
DEBUG 2022-02-08 17:11:36,976 dispatch pc=2, inst=LOAD_DEREF(arg=1, lineno=217)
DEBUG 2022-02-08 17:11:36,976 stack []
DEBUG 2022-02-08 17:11:36,976 dispatch pc=4, inst=LOAD_CONST(arg=1, lineno=217)
DEBUG 2022-02-08 17:11:36,984 stack ['$2load_deref.0']
DEBUG 2022-02-08 17:11:36,984 dispatch pc=6, inst=CALL_FUNCTION(arg=1, lineno=217)
DEBUG 2022-02-08 17:11:36,984 stack ['$2load_deref.0', '$const4.1']
DEBUG 2022-02-08 17:11:36,984 dispatch pc=8, inst=STORE_FAST(arg=2, lineno=217)
DEBUG 2022-02-08 17:11:36,984 stack ['$6call_function.2']
DEBUG 2022-02-08 17:11:36,984 dispatch pc=10, inst=LOAD_DEREF(arg=1, lineno=218)
DEBUG 2022-02-08 17:11:36,984 stack []
DEBUG 2022-02-08 17:11:36,984 dispatch pc=12, inst=LOAD_FAST(arg=0, lineno=218)
DEBUG 2022-02-08 17:11:36,984 stack ['$10load_deref.3']
DEBUG 2022-02-08 17:11:36,984 dispatch pc=14, inst=CALL_FUNCTION(arg=1, lineno=218)
DEBUG 2022-02-08 17:11:36,984 stack ['$10load_deref.3', '$a12.4']
DEBUG 2022-02-08 17:11:36,984 dispatch pc=16, inst=STORE_FAST(arg=0, lineno=218)
DEBUG 2022-02-08 17:11:36,984 stack ['$14call_function.5']
DEBUG 2022-02-08 17:11:36,984 dispatch pc=18, inst=LOAD_FAST(arg=1, lineno=219)
DEBUG 2022-02-08 17:11:36,984 stack []
DEBUG 2022-02-08 17:11:36,984 dispatch pc=20, inst=LOAD_CONST(arg=2, lineno=219)
DEBUG 2022-02-08 17:11:36,984 stack ['$b18.6']
DEBUG 2022-02-08 17:11:36,984 dispatch pc=22, inst=COMPARE_OP(arg=0, lineno=219)
DEBUG 2022-02-08 17:11:36,984 stack ['$b18.6', '$const20.7']
DEBUG 2022-02-08 17:11:36,984 dispatch pc=24, inst=POP_JUMP_IF_FALSE(arg=98, lineno=219)
DEBUG 2022-02-08 17:11:36,984 stack ['$22compare_op.8']
DEBUG 2022-02-08 17:11:36,984 end state. edges=[Edge(pc=26, stack=(), blockstack=(), npush=0), Edge(pc=98, stack=(), blockstack=(), npush=0)]
DEBUG 2022-02-08 17:11:36,984 pending: deque([State(pc_initial=26 nstack_initial=0), State(pc_initial=98 nstack_initial=0)])
DEBUG 2022-02-08 17:11:36,986 stack: []
DEBUG 2022-02-08 17:11:36,986 dispatch pc=26, inst=LOAD_CONST(arg=3, lineno=220)
DEBUG 2022-02-08 17:11:36,986 stack []
DEBUG 2022-02-08 17:11:36,986 dispatch pc=28, inst=STORE_FAST(arg=3, lineno=220)
DEBUG 2022-02-08 17:11:36,986 stack ['$const26.0']
DEBUG 2022-02-08 17:11:36,986 dispatch pc=30, inst=LOAD_FAST(arg=1, lineno=221)
DEBUG 2022-02-08 17:11:36,986 stack []
DEBUG 2022-02-08 17:11:36,986 dispatch pc=32, inst=UNARY_NEGATIVE(arg=None, lineno=221)
DEBUG 2022-02-08 17:11:36,986 stack ['$b30.1']
DEBUG 2022-02-08 17:11:36,986 dispatch pc=34, inst=STORE_FAST(arg=4, lineno=221)
DEBUG 2022-02-08 17:11:36,986 stack ['$32unary_negative.2']
DEBUG 2022-02-08 17:11:36,986 dispatch pc=36, inst=LOAD_FAST(arg=4, lineno=222)
DEBUG 2022-02-08 17:11:36,986 stack []
DEBUG 2022-02-08 17:11:36,986 dispatch pc=38, inst=LOAD_CONST(arg=2, lineno=222)
DEBUG 2022-02-08 17:11:36,986 stack ['$exp36.3']
DEBUG 2022-02-08 17:11:36,986 dispatch pc=40, inst=COMPARE_OP(arg=0, lineno=222)
DEBUG 2022-02-08 17:11:36,986 stack ['$exp36.3', '$const38.4']
DEBUG 2022-02-08 17:11:36,986 dispatch pc=42, inst=POP_JUMP_IF_FALSE(arg=48, lineno=222)
DEBUG 2022-02-08 17:11:36,986 stack ['$40compare_op.5']
DEBUG 2022-02-08 17:11:36,986 end state. edges=[Edge(pc=44, stack=(), blockstack=(), npush=0), Edge(pc=48, stack=(), blockstack=(), npush=0)]
DEBUG 2022-02-08 17:11:36,986 pending: deque([State(pc_initial=98 nstack_initial=0), State(pc_initial=44 nstack_initial=0), State(pc_initial=48 nstack_initial=0)])
DEBUG 2022-02-08 17:11:36,986 stack: []
DEBUG 2022-02-08 17:11:36,986 dispatch pc=98, inst=LOAD_CONST(arg=6, lineno=233)
DEBUG 2022-02-08 17:11:36,986 stack []
DEBUG 2022-02-08 17:11:36,986 dispatch pc=100, inst=STORE_FAST(arg=3, lineno=233)
DEBUG 2022-02-08 17:11:36,986 stack ['$const98.0']
DEBUG 2022-02-08 17:11:36,986 dispatch pc=102, inst=LOAD_FAST(arg=1, lineno=234)
DEBUG 2022-02-08 17:11:36,986 stack []
DEBUG 2022-02-08 17:11:36,986 dispatch pc=104, inst=STORE_FAST(arg=4, lineno=234)
DEBUG 2022-02-08 17:11:36,986 stack ['$b102.1']
DEBUG 2022-02-08 17:11:36,986 end state. edges=[Edge(pc=106, stack=(), blockstack=(), npush=0)]
DEBUG 2022-02-08 17:11:36,986 pending: deque([State(pc_initial=44 nstack_initial=0), State(pc_initial=48 nstack_initial=0), State(pc_initial=106 nstack_initial=0)])
DEBUG 2022-02-08 17:11:36,986 stack: []
DEBUG 2022-02-08 17:11:36,986 dispatch pc=44, inst=LOAD_GLOBAL(arg=0, lineno=223)
DEBUG 2022-02-08 17:11:36,986 stack []
DEBUG 2022-02-08 17:11:36,986 dispatch pc=46, inst=RAISE_VARARGS(arg=1, lineno=223)
DEBUG 2022-02-08 17:11:36,986 stack ['$44load_global.0']
DEBUG 2022-02-08 17:11:36,986 end state. edges=[]
DEBUG 2022-02-08 17:11:36,986 pending: deque([State(pc_initial=48 nstack_initial=0), State(pc_initial=106 nstack_initial=0)])
DEBUG 2022-02-08 17:11:36,986 stack: []
DEBUG 2022-02-08 17:11:36,986 dispatch pc=48, inst=LOAD_DEREF(arg=0, lineno=224)
DEBUG 2022-02-08 17:11:36,986 stack []
DEBUG 2022-02-08 17:11:36,986 dispatch pc=50, inst=POP_JUMP_IF_FALSE(arg=106, lineno=224)
DEBUG 2022-02-08 17:11:36,986 stack ['$48load_deref.0']
DEBUG 2022-02-08 17:11:36,986 end state. edges=[Edge(pc=52, stack=(), blockstack=(), npush=0), Edge(pc=106, stack=(), blockstack=(), npush=0)]
DEBUG 2022-02-08 17:11:36,986 pending: deque([State(pc_initial=106 nstack_initial=0), State(pc_initial=52 nstack_initial=0), State(pc_initial=106 nstack_initial=0)])
DEBUG 2022-02-08 17:11:36,986 stack: []
DEBUG 2022-02-08 17:11:36,986 dispatch pc=106, inst=LOAD_FAST(arg=4, lineno=235)
DEBUG 2022-02-08 17:11:36,986 stack []
DEBUG 2022-02-08 17:11:36,986 dispatch pc=108, inst=LOAD_CONST(arg=7, lineno=235)
DEBUG 2022-02-08 17:11:36,986 stack ['$exp106.0']
DEBUG 2022-02-08 17:11:36,986 dispatch pc=110, inst=COMPARE_OP(arg=4, lineno=235)
DEBUG 2022-02-08 17:11:36,986 stack ['$exp106.0', '$const108.1']
DEBUG 2022-02-08 17:11:36,986 dispatch pc=112, inst=POP_JUMP_IF_FALSE(arg=130, lineno=235)
DEBUG 2022-02-08 17:11:36,986 stack ['$110compare_op.2']
DEBUG 2022-02-08 17:11:36,986 end state. edges=[Edge(pc=114, stack=(), blockstack=(), npush=0), Edge(pc=130, stack=(), blockstack=(), npush=0)]
DEBUG 2022-02-08 17:11:36,986 pending: deque([State(pc_initial=52 nstack_initial=0), State(pc_initial=106 nstack_initial=0), State(pc_initial=114 nstack_initial=0), State(pc_initial=130 nstack_initial=0)])
DEBUG 2022-02-08 17:11:36,986 stack: []
DEBUG 2022-02-08 17:11:36,986 dispatch pc=52, inst=LOAD_FAST(arg=0, lineno=225)
DEBUG 2022-02-08 17:11:36,986 stack []
DEBUG 2022-02-08 17:11:36,986 dispatch pc=54, inst=LOAD_CONST(arg=2, lineno=225)
DEBUG 2022-02-08 17:11:36,986 stack ['$a52.0']
DEBUG 2022-02-08 17:11:36,986 dispatch pc=56, inst=COMPARE_OP(arg=2, lineno=225)
DEBUG 2022-02-08 17:11:36,986 stack ['$a52.0', '$const54.1']
DEBUG 2022-02-08 17:11:36,986 dispatch pc=58, inst=POP_JUMP_IF_FALSE(arg=76, lineno=225)
DEBUG 2022-02-08 17:11:36,986 stack ['$56compare_op.2']
DEBUG 2022-02-08 17:11:36,986 end state. edges=[Edge(pc=60, stack=(), blockstack=(), npush=0), Edge(pc=76, stack=(), blockstack=(), npush=0)]
DEBUG 2022-02-08 17:11:36,986 pending: deque([State(pc_initial=106 nstack_initial=0), State(pc_initial=114 nstack_initial=0), State(pc_initial=130 nstack_initial=0), State(pc_initial=60 nstack_initial=0), State(pc_initial=76 nstack_initial=0)])
DEBUG 2022-02-08 17:11:36,986 pending: deque([State(pc_initial=114 nstack_initial=0), State(pc_initial=130 nstack_initial=0), State(pc_initial=60 nstack_initial=0), State(pc_initial=76 nstack_initial=0)])
DEBUG 2022-02-08 17:11:36,986 stack: []
DEBUG 2022-02-08 17:11:36,986 dispatch pc=114, inst=LOAD_GLOBAL(arg=2, lineno=237)
DEBUG 2022-02-08 17:11:36,986 stack []
DEBUG 2022-02-08 17:11:36,986 dispatch pc=116, inst=LOAD_METHOD(arg=3, lineno=237)
DEBUG 2022-02-08 17:11:36,986 stack ['$114load_global.0']
DEBUG 2022-02-08 17:11:36,986 dispatch pc=118, inst=LOAD_FAST(arg=0, lineno=237)
DEBUG 2022-02-08 17:11:36,986 stack ['$116load_method.1']
DEBUG 2022-02-08 17:11:36,986 dispatch pc=120, inst=LOAD_GLOBAL(arg=4, lineno=237)
DEBUG 2022-02-08 17:11:36,986 stack ['$116load_method.1', '$a118.2']
DEBUG 2022-02-08 17:11:36,986 dispatch pc=122, inst=LOAD_FAST(arg=1, lineno=237)
DEBUG 2022-02-08 17:11:36,986 stack ['$116load_method.1', '$a118.2', '$120load_global.3']
DEBUG 2022-02-08 17:11:36,986 dispatch pc=124, inst=CALL_FUNCTION(arg=1, lineno=237)
DEBUG 2022-02-08 17:11:36,986 stack ['$116load_method.1', '$a118.2', '$120load_global.3', '$b122.4']
DEBUG 2022-02-08 17:11:36,986 dispatch pc=126, inst=CALL_METHOD(arg=2, lineno=237)
DEBUG 2022-02-08 17:11:36,986 stack ['$116load_method.1', '$a118.2', '$124call_function.5']
DEBUG 2022-02-08 17:11:36,986 dispatch pc=128, inst=RETURN_VALUE(arg=None, lineno=237)
DEBUG 2022-02-08 17:11:36,986 stack ['$126call_method.6']
DEBUG 2022-02-08 17:11:36,986 end state. edges=[]
DEBUG 2022-02-08 17:11:36,986 pending: deque([State(pc_initial=130 nstack_initial=0), State(pc_initial=60 nstack_initial=0), State(pc_initial=76 nstack_initial=0)])
DEBUG 2022-02-08 17:11:36,994 stack: []
DEBUG 2022-02-08 17:11:36,994 dispatch pc=130, inst=LOAD_FAST(arg=4, lineno=238)
DEBUG 2022-02-08 17:11:36,994 stack []
DEBUG 2022-02-08 17:11:36,994 dispatch pc=132, inst=LOAD_CONST(arg=2, lineno=238)
DEBUG 2022-02-08 17:11:36,994 stack ['$exp130.0']
DEBUG 2022-02-08 17:11:36,994 dispatch pc=134, inst=COMPARE_OP(arg=3, lineno=238)
DEBUG 2022-02-08 17:11:36,994 stack ['$exp130.0', '$const132.1']
DEBUG 2022-02-08 17:11:36,994 dispatch pc=136, inst=POP_JUMP_IF_FALSE(arg=172, lineno=238)
DEBUG 2022-02-08 17:11:36,994 stack ['$134compare_op.2']
DEBUG 2022-02-08 17:11:36,994 end state. edges=[Edge(pc=138, stack=(), blockstack=(), npush=0), Edge(pc=172, stack=(), blockstack=(), npush=0)]
DEBUG 2022-02-08 17:11:36,994 pending: deque([State(pc_initial=60 nstack_initial=0), State(pc_initial=76 nstack_initial=0), State(pc_initial=138 nstack_initial=0), State(pc_initial=172 nstack_initial=0)])
DEBUG 2022-02-08 17:11:36,994 stack: []
DEBUG 2022-02-08 17:11:36,994 dispatch pc=60, inst=LOAD_DEREF(arg=2, lineno=226)
DEBUG 2022-02-08 17:11:36,994 stack []
DEBUG 2022-02-08 17:11:36,994 dispatch pc=62, inst=POP_JUMP_IF_FALSE(arg=68, lineno=226)
DEBUG 2022-02-08 17:11:36,994 stack ['$60load_deref.0']
DEBUG 2022-02-08 17:11:36,994 end state. edges=[Edge(pc=64, stack=(), blockstack=(), npush=0), Edge(pc=68, stack=(), blockstack=(), npush=0)]
DEBUG 2022-02-08 17:11:36,994 pending: deque([State(pc_initial=76 nstack_initial=0), State(pc_initial=138 nstack_initial=0), State(pc_initial=172 nstack_initial=0), State(pc_initial=64 nstack_initial=0), State(pc_initial=68 nstack_initial=0)])
DEBUG 2022-02-08 17:11:36,994 stack: []
DEBUG 2022-02-08 17:11:36,994 dispatch pc=76, inst=LOAD_FAST(arg=0, lineno=230)
DEBUG 2022-02-08 17:11:36,996 stack []
DEBUG 2022-02-08 17:11:36,996 dispatch pc=78, inst=LOAD_CONST(arg=1, lineno=230)
DEBUG 2022-02-08 17:11:36,996 stack ['$a76.0']
DEBUG 2022-02-08 17:11:36,996 dispatch pc=80, inst=COMPARE_OP(arg=3, lineno=230)
DEBUG 2022-02-08 17:11:36,996 stack ['$a76.0', '$const78.1']
DEBUG 2022-02-08 17:11:36,996 dispatch pc=82, inst=POP_JUMP_IF_FALSE(arg=106, lineno=230)
DEBUG 2022-02-08 17:11:36,996 stack ['$80compare_op.2']
DEBUG 2022-02-08 17:11:36,996 end state. edges=[Edge(pc=84, stack=(), blockstack=(), npush=0), Edge(pc=106, stack=(), blockstack=(), npush=0)]
DEBUG 2022-02-08 17:11:36,996 pending: deque([State(pc_initial=138 nstack_initial=0), State(pc_initial=172 nstack_initial=0), State(pc_initial=64 nstack_initial=0), State(pc_initial=68 nstack_initial=0), State(pc_initial=84 nstack_initial=0), State(pc_initial=106 nstack_initial=0)])
DEBUG 2022-02-08 17:11:36,996 stack: []
DEBUG 2022-02-08 17:11:36,996 dispatch pc=138, inst=LOAD_FAST(arg=4, lineno=239)
DEBUG 2022-02-08 17:11:36,996 stack []
DEBUG 2022-02-08 17:11:36,996 dispatch pc=140, inst=LOAD_CONST(arg=1, lineno=239)
DEBUG 2022-02-08 17:11:36,996 stack ['$exp138.0']
DEBUG 2022-02-08 17:11:36,996 dispatch pc=142, inst=BINARY_AND(arg=None, lineno=239)
DEBUG 2022-02-08 17:11:36,996 stack ['$exp138.0', '$const140.1']
DEBUG 2022-02-08 17:11:36,996 dispatch pc=144, inst=POP_JUMP_IF_FALSE(arg=154, lineno=239)
DEBUG 2022-02-08 17:11:36,996 stack ['$142binary_and.2']
DEBUG 2022-02-08 17:11:36,996 end state. edges=[Edge(pc=146, stack=(), blockstack=(), npush=0), Edge(pc=154, stack=(), blockstack=(), npush=0)]
DEBUG 2022-02-08 17:11:36,996 pending: deque([State(pc_initial=172 nstack_initial=0), State(pc_initial=64 nstack_initial=0), State(pc_initial=68 nstack_initial=0), State(pc_initial=84 nstack_initial=0), State(pc_initial=106 nstack_initial=0), State(pc_initial=146 nstack_initial=0), State(pc_initial=154 nstack_initial=0)])
DEBUG 2022-02-08 17:11:36,996 stack: []
DEBUG 2022-02-08 17:11:36,996 dispatch pc=172, inst=LOAD_FAST(arg=3, lineno=244)
DEBUG 2022-02-08 17:11:36,996 stack []
DEBUG 2022-02-08 17:11:36,996 dispatch pc=174, inst=POP_JUMP_IF_FALSE(arg=184, lineno=244)
DEBUG 2022-02-08 17:11:36,996 stack ['$invert172.0']
DEBUG 2022-02-08 17:11:36,996 end state. edges=[Edge(pc=176, stack=(), blockstack=(), npush=0), Edge(pc=184, stack=(), blockstack=(), npush=0)]
DEBUG 2022-02-08 17:11:36,996 pending: deque([State(pc_initial=64 nstack_initial=0), State(pc_initial=68 nstack_initial=0), State(pc_initial=84 nstack_initial=0), State(pc_initial=106 nstack_initial=0), State(pc_initial=146 nstack_initial=0), State(pc_initial=154 nstack_initial=0), State(pc_initial=176 nstack_initial=0), State(pc_initial=184 nstack_initial=0)])
DEBUG 2022-02-08 17:11:36,996 stack: []
DEBUG 2022-02-08 17:11:36,996 dispatch pc=64, inst=LOAD_DEREF(arg=2, lineno=227)
DEBUG 2022-02-08 17:11:36,996 stack []
DEBUG 2022-02-08 17:11:36,996 dispatch pc=66, inst=RETURN_VALUE(arg=None, lineno=227)
DEBUG 2022-02-08 17:11:36,996 stack ['$64load_deref.0']
DEBUG 2022-02-08 17:11:36,996 end state. edges=[]
DEBUG 2022-02-08 17:11:36,996 pending: deque([State(pc_initial=68 nstack_initial=0), State(pc_initial=84 nstack_initial=0), State(pc_initial=106 nstack_initial=0), State(pc_initial=146 nstack_initial=0), State(pc_initial=154 nstack_initial=0), State(pc_initial=176 nstack_initial=0), State(pc_initial=184 nstack_initial=0)])
DEBUG 2022-02-08 17:11:36,996 stack: []
DEBUG 2022-02-08 17:11:36,996 dispatch pc=68, inst=LOAD_GLOBAL(arg=1, lineno=229)
DEBUG 2022-02-08 17:11:36,996 stack []
DEBUG 2022-02-08 17:11:36,996 dispatch pc=70, inst=LOAD_CONST(arg=4, lineno=229)
DEBUG 2022-02-08 17:11:36,996 stack ['$68load_global.0']
DEBUG 2022-02-08 17:11:36,996 dispatch pc=72, inst=CALL_FUNCTION(arg=1, lineno=229)
DEBUG 2022-02-08 17:11:36,996 stack ['$68load_global.0', '$const70.1']
DEBUG 2022-02-08 17:11:36,996 dispatch pc=74, inst=RAISE_VARARGS(arg=1, lineno=229)
DEBUG 2022-02-08 17:11:36,996 stack ['$72call_function.2']
DEBUG 2022-02-08 17:11:36,996 end state. edges=[]
DEBUG 2022-02-08 17:11:36,996 pending: deque([State(pc_initial=84 nstack_initial=0), State(pc_initial=106 nstack_initial=0), State(pc_initial=146 nstack_initial=0), State(pc_initial=154 nstack_initial=0), State(pc_initial=176 nstack_initial=0), State(pc_initial=184 nstack_initial=0)])
DEBUG 2022-02-08 17:11:36,996 stack: []
DEBUG 2022-02-08 17:11:36,996 dispatch pc=84, inst=LOAD_FAST(arg=0, lineno=230)
DEBUG 2022-02-08 17:11:36,996 stack []
DEBUG 2022-02-08 17:11:36,996 dispatch pc=86, inst=LOAD_CONST(arg=5, lineno=230)
DEBUG 2022-02-08 17:11:36,996 stack ['$a84.0']
DEBUG 2022-02-08 17:11:36,996 dispatch pc=88, inst=COMPARE_OP(arg=3, lineno=230)
DEBUG 2022-02-08 17:11:36,996 stack ['$a84.0', '$const86.1']
DEBUG 2022-02-08 17:11:36,996 dispatch pc=90, inst=POP_JUMP_IF_FALSE(arg=106, lineno=230)
DEBUG 2022-02-08 17:11:36,996 stack ['$88compare_op.2']
DEBUG 2022-02-08 17:11:36,996 end state. edges=[Edge(pc=92, stack=(), blockstack=(), npush=0), Edge(pc=106, stack=(), blockstack=(), npush=0)]
DEBUG 2022-02-08 17:11:36,996 pending: deque([State(pc_initial=106 nstack_initial=0), State(pc_initial=146 nstack_initial=0), State(pc_initial=154 nstack_initial=0), State(pc_initial=176 nstack_initial=0), State(pc_initial=184 nstack_initial=0), State(pc_initial=92 nstack_initial=0), State(pc_initial=106 nstack_initial=0)])
DEBUG 2022-02-08 17:11:36,996 pending: deque([State(pc_initial=146 nstack_initial=0), State(pc_initial=154 nstack_initial=0), State(pc_initial=176 nstack_initial=0), State(pc_initial=184 nstack_initial=0), State(pc_initial=92 nstack_initial=0), State(pc_initial=106 nstack_initial=0)])
DEBUG 2022-02-08 17:11:36,996 stack: []
DEBUG 2022-02-08 17:11:36,996 dispatch pc=146, inst=LOAD_FAST(arg=2, lineno=240)
DEBUG 2022-02-08 17:11:36,996 stack []
DEBUG 2022-02-08 17:11:36,996 dispatch pc=148, inst=LOAD_FAST(arg=0, lineno=240)
DEBUG 2022-02-08 17:11:36,996 stack ['$r146.0']
DEBUG 2022-02-08 17:11:36,996 dispatch pc=150, inst=INPLACE_MULTIPLY(arg=None, lineno=240)
DEBUG 2022-02-08 17:11:36,996 stack ['$r146.0', '$a148.1']
DEBUG 2022-02-08 17:11:36,996 dispatch pc=152, inst=STORE_FAST(arg=2, lineno=240)
DEBUG 2022-02-08 17:11:36,996 stack ['$150inplace_multiply.2']
DEBUG 2022-02-08 17:11:36,996 end state. edges=[Edge(pc=154, stack=(), blockstack=(), npush=0)]
DEBUG 2022-02-08 17:11:36,996 pending: deque([State(pc_initial=154 nstack_initial=0), State(pc_initial=176 nstack_initial=0), State(pc_initial=184 nstack_initial=0), State(pc_initial=92 nstack_initial=0), State(pc_initial=106 nstack_initial=0), State(pc_initial=154 nstack_initial=0)])
DEBUG 2022-02-08 17:11:36,996 stack: []
DEBUG 2022-02-08 17:11:36,996 dispatch pc=154, inst=LOAD_FAST(arg=4, lineno=241)
DEBUG 2022-02-08 17:11:36,996 stack []
DEBUG 2022-02-08 17:11:36,996 dispatch pc=156, inst=LOAD_CONST(arg=1, lineno=241)
DEBUG 2022-02-08 17:11:36,996 stack ['$exp154.0']
DEBUG 2022-02-08 17:11:36,996 dispatch pc=158, inst=INPLACE_RSHIFT(arg=None, lineno=241)
DEBUG 2022-02-08 17:11:36,996 stack ['$exp154.0', '$const156.1']
DEBUG 2022-02-08 17:11:36,996 dispatch pc=160, inst=STORE_FAST(arg=4, lineno=241)
DEBUG 2022-02-08 17:11:36,996 stack ['$158inplace_rshift.2']
DEBUG 2022-02-08 17:11:36,996 dispatch pc=162, inst=LOAD_FAST(arg=0, lineno=242)
DEBUG 2022-02-08 17:11:36,996 stack []
DEBUG 2022-02-08 17:11:36,996 dispatch pc=164, inst=LOAD_FAST(arg=0, lineno=242)
DEBUG 2022-02-08 17:11:36,996 stack ['$a162.3']
DEBUG 2022-02-08 17:11:36,996 dispatch pc=166, inst=INPLACE_MULTIPLY(arg=None, lineno=242)
DEBUG 2022-02-08 17:11:36,996 stack ['$a162.3', '$a164.4']
DEBUG 2022-02-08 17:11:36,996 dispatch pc=168, inst=STORE_FAST(arg=0, lineno=242)
DEBUG 2022-02-08 17:11:36,996 stack ['$166inplace_multiply.5']
DEBUG 2022-02-08 17:11:36,996 dispatch pc=170, inst=JUMP_ABSOLUTE(arg=130, lineno=242)
DEBUG 2022-02-08 17:11:36,996 stack []
DEBUG 2022-02-08 17:11:36,996 end state. edges=[Edge(pc=130, stack=(), blockstack=(), npush=0)]
DEBUG 2022-02-08 17:11:36,996 pending: deque([State(pc_initial=176 nstack_initial=0), State(pc_initial=184 nstack_initial=0), State(pc_initial=92 nstack_initial=0), State(pc_initial=106 nstack_initial=0), State(pc_initial=154 nstack_initial=0), State(pc_initial=130 nstack_initial=0)])
DEBUG 2022-02-08 17:11:36,996 stack: []
DEBUG 2022-02-08 17:11:36,996 dispatch pc=176, inst=LOAD_CONST(arg=8, lineno=244)
DEBUG 2022-02-08 17:11:36,996 stack []
DEBUG 2022-02-08 17:11:37,004 dispatch pc=178, inst=LOAD_FAST(arg=2, lineno=244)
DEBUG 2022-02-08 17:11:37,004 stack ['$const176.0']
DEBUG 2022-02-08 17:11:37,004 dispatch pc=180, inst=BINARY_TRUE_DIVIDE(arg=None, lineno=244)
DEBUG 2022-02-08 17:11:37,004 stack ['$const176.0', '$r178.1']
DEBUG 2022-02-08 17:11:37,004 dispatch pc=182, inst=RETURN_VALUE(arg=None, lineno=244)
DEBUG 2022-02-08 17:11:37,004 stack ['$180binary_true_divide.2']
DEBUG 2022-02-08 17:11:37,004 end state. edges=[]
DEBUG 2022-02-08 17:11:37,004 pending: deque([State(pc_initial=184 nstack_initial=0), State(pc_initial=92 nstack_initial=0), State(pc_initial=106 nstack_initial=0), State(pc_initial=154 nstack_initial=0), State(pc_initial=130 nstack_initial=0)])
DEBUG 2022-02-08 17:11:37,004 stack: []
DEBUG 2022-02-08 17:11:37,004 dispatch pc=184, inst=LOAD_FAST(arg=2, lineno=244)
DEBUG 2022-02-08 17:11:37,004 stack []
DEBUG 2022-02-08 17:11:37,004 dispatch pc=186, inst=RETURN_VALUE(arg=None, lineno=244)
DEBUG 2022-02-08 17:11:37,004 stack ['$r184.0']
DEBUG 2022-02-08 17:11:37,004 end state. edges=[]
DEBUG 2022-02-08 17:11:37,004 pending: deque([State(pc_initial=92 nstack_initial=0), State(pc_initial=106 nstack_initial=0), State(pc_initial=154 nstack_initial=0), State(pc_initial=130 nstack_initial=0)])
DEBUG 2022-02-08 17:11:37,004 stack: []
DEBUG 2022-02-08 17:11:37,004 dispatch pc=92, inst=LOAD_CONST(arg=2, lineno=231)
DEBUG 2022-02-08 17:11:37,004 stack []
DEBUG 2022-02-08 17:11:37,004 dispatch pc=94, inst=RETURN_VALUE(arg=None, lineno=231)
DEBUG 2022-02-08 17:11:37,004 stack ['$const92.0']
DEBUG 2022-02-08 17:11:37,004 end state. edges=[]
DEBUG 2022-02-08 17:11:37,004 pending: deque([State(pc_initial=106 nstack_initial=0), State(pc_initial=154 nstack_initial=0), State(pc_initial=130 nstack_initial=0)])
DEBUG 2022-02-08 17:11:37,004 pending: deque([State(pc_initial=154 nstack_initial=0), State(pc_initial=130 nstack_initial=0)])
DEBUG 2022-02-08 17:11:37,006 pending: deque([State(pc_initial=130 nstack_initial=0)])
DEBUG 2022-02-08 17:11:37,006 -------------------------Prune PHIs-------------------------
DEBUG 2022-02-08 17:11:37,006 Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=26 nstack_initial=0): set(),
             State(pc_initial=44 nstack_initial=0): set(),
             State(pc_initial=48 nstack_initial=0): set(),
             State(pc_initial=52 nstack_initial=0): set(),
             State(pc_initial=60 nstack_initial=0): set(),
             State(pc_initial=64 nstack_initial=0): set(),
             State(pc_initial=68 nstack_initial=0): set(),
             State(pc_initial=76 nstack_initial=0): set(),
             State(pc_initial=84 nstack_initial=0): set(),
             State(pc_initial=92 nstack_initial=0): set(),
             State(pc_initial=98 nstack_initial=0): set(),
             State(pc_initial=106 nstack_initial=0): set(),
             State(pc_initial=114 nstack_initial=0): set(),
             State(pc_initial=130 nstack_initial=0): set(),
             State(pc_initial=138 nstack_initial=0): set(),
             State(pc_initial=146 nstack_initial=0): set(),
             State(pc_initial=154 nstack_initial=0): set(),
             State(pc_initial=172 nstack_initial=0): set(),
             State(pc_initial=176 nstack_initial=0): set(),
             State(pc_initial=184 nstack_initial=0): set()})
DEBUG 2022-02-08 17:11:37,006 defmap: {}
DEBUG 2022-02-08 17:11:37,006 phismap: defaultdict(<class 'set'>, {})
DEBUG 2022-02-08 17:11:37,006 changing phismap: defaultdict(<class 'set'>, {})
DEBUG 2022-02-08 17:11:37,006 keep phismap: {}
DEBUG 2022-02-08 17:11:37,006 new_out: defaultdict(<class 'dict'>, {})
DEBUG 2022-02-08 17:11:37,006 ----------------------DONE Prune PHIs-----------------------
DEBUG 2022-02-08 17:11:37,006 block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$2load_deref.0'}), (4, {'res': '$const4.1'}), (6, {'func': '$2load_deref.0', 'args': ['$const4.1'], 'res': '$6call_function.2'}), (8, {'value': '$6call_function.2'}), (10, {'res': '$10load_deref.3'}), (12, {'res': '$a12.4'}), (14, {'func': '$10load_deref.3', 'args': ['$a12.4'], 'res': '$14call_function.5'}), (16, {'value': '$14call_function.5'}), (18, {'res': '$b18.6'}), (20, {'res': '$const20.7'}), (22, {'lhs': '$b18.6', 'rhs': '$const20.7', 'res': '$22compare_op.8'}), (24, {'pred': '$22compare_op.8'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={26: (), 98: ()})
DEBUG 2022-02-08 17:11:37,006 block_infos State(pc_initial=26 nstack_initial=0):
AdaptBlockInfo(insts=((26, {'res': '$const26.0'}), (28, {'value': '$const26.0'}), (30, {'res': '$b30.1'}), (32, {'value': '$b30.1', 'res': '$32unary_negative.2'}), (34, {'value': '$32unary_negative.2'}), (36, {'res': '$exp36.3'}), (38, {'res': '$const38.4'}), (40, {'lhs': '$exp36.3', 'rhs': '$const38.4', 'res': '$40compare_op.5'}), (42, {'pred': '$40compare_op.5'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={44: (), 48: ()})
DEBUG 2022-02-08 17:11:37,006 block_infos State(pc_initial=44 nstack_initial=0):
AdaptBlockInfo(insts=((44, {'res': '$44load_global.0'}), (46, {'exc': '$44load_global.0'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG 2022-02-08 17:11:37,006 block_infos State(pc_initial=48 nstack_initial=0):
AdaptBlockInfo(insts=((48, {'res': '$48load_deref.0'}), (50, {'pred': '$48load_deref.0'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={52: (), 106: ()})
DEBUG 2022-02-08 17:11:37,006 block_infos State(pc_initial=52 nstack_initial=0):
AdaptBlockInfo(insts=((52, {'res': '$a52.0'}), (54, {'res': '$const54.1'}), (56, {'lhs': '$a52.0', 'rhs': '$const54.1', 'res': '$56compare_op.2'}), (58, {'pred': '$56compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={60: (), 76: ()})
DEBUG 2022-02-08 17:11:37,006 block_infos State(pc_initial=60 nstack_initial=0):
AdaptBlockInfo(insts=((60, {'res': '$60load_deref.0'}), (62, {'pred': '$60load_deref.0'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={64: (), 68: ()})
DEBUG 2022-02-08 17:11:37,006 block_infos State(pc_initial=64 nstack_initial=0):
AdaptBlockInfo(insts=((64, {'res': '$64load_deref.0'}), (66, {'retval': '$64load_deref.0', 'castval': '$66return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG 2022-02-08 17:11:37,006 block_infos State(pc_initial=68 nstack_initial=0):
AdaptBlockInfo(insts=((68, {'res': '$68load_global.0'}), (70, {'res': '$const70.1'}), (72, {'func': '$68load_global.0', 'args': ['$const70.1'], 'res': '$72call_function.2'}), (74, {'exc': '$72call_function.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG 2022-02-08 17:11:37,006 block_infos State(pc_initial=76 nstack_initial=0):
AdaptBlockInfo(insts=((76, {'res': '$a76.0'}), (78, {'res': '$const78.1'}), (80, {'lhs': '$a76.0', 'rhs': '$const78.1', 'res': '$80compare_op.2'}), (82, {'pred': '$80compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={84: (), 106: ()})
DEBUG 2022-02-08 17:11:37,006 block_infos State(pc_initial=84 nstack_initial=0):
AdaptBlockInfo(insts=((84, {'res': '$a84.0'}), (86, {'res': '$const86.1'}), (88, {'lhs': '$a84.0', 'rhs': '$const86.1', 'res': '$88compare_op.2'}), (90, {'pred': '$88compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={92: (), 106: ()})
DEBUG 2022-02-08 17:11:37,006 block_infos State(pc_initial=92 nstack_initial=0):
AdaptBlockInfo(insts=((92, {'res': '$const92.0'}), (94, {'retval': '$const92.0', 'castval': '$94return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG 2022-02-08 17:11:37,006 block_infos State(pc_initial=98 nstack_initial=0):
AdaptBlockInfo(insts=((98, {'res': '$const98.0'}), (100, {'value': '$const98.0'}), (102, {'res': '$b102.1'}), (104, {'value': '$b102.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={106: ()})
DEBUG 2022-02-08 17:11:37,006 block_infos State(pc_initial=106 nstack_initial=0):
AdaptBlockInfo(insts=((106, {'res': '$exp106.0'}), (108, {'res': '$const108.1'}), (110, {'lhs': '$exp106.0', 'rhs': '$const108.1', 'res': '$110compare_op.2'}), (112, {'pred': '$110compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={114: (), 130: ()})
DEBUG 2022-02-08 17:11:37,006 block_infos State(pc_initial=114 nstack_initial=0):
AdaptBlockInfo(insts=((114, {'res': '$114load_global.0'}), (116, {'item': '$114load_global.0', 'res': '$116load_method.1'}), (118, {'res': '$a118.2'}), (120, {'res': '$120load_global.3'}), (122, {'res': '$b122.4'}), (124, {'func': '$120load_global.3', 'args': ['$b122.4'], 'res': '$124call_function.5'}), (126, {'func': '$116load_method.1', 'args': ['$a118.2', '$124call_function.5'], 'res': '$126call_method.6'}), (128, {'retval': '$126call_method.6', 'castval': '$128return_value.7'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG 2022-02-08 17:11:37,006 block_infos State(pc_initial=130 nstack_initial=0):
AdaptBlockInfo(insts=((130, {'res': '$exp130.0'}), (132, {'res': '$const132.1'}), (134, {'lhs': '$exp130.0', 'rhs': '$const132.1', 'res': '$134compare_op.2'}), (136, {'pred': '$134compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={138: (), 172: ()})
DEBUG 2022-02-08 17:11:37,006 block_infos State(pc_initial=138 nstack_initial=0):
AdaptBlockInfo(insts=((138, {'res': '$exp138.0'}), (140, {'res': '$const140.1'}), (142, {'lhs': '$exp138.0', 'rhs': '$const140.1', 'res': '$142binary_and.2'}), (144, {'pred': '$142binary_and.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={146: (), 154: ()})
DEBUG 2022-02-08 17:11:37,006 block_infos State(pc_initial=146 nstack_initial=0):
AdaptBlockInfo(insts=((146, {'res': '$r146.0'}), (148, {'res': '$a148.1'}), (150, {'lhs': '$r146.0', 'rhs': '$a148.1', 'res': '$150inplace_multiply.2'}), (152, {'value': '$150inplace_multiply.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={154: ()})
DEBUG 2022-02-08 17:11:37,006 block_infos State(pc_initial=154 nstack_initial=0):
AdaptBlockInfo(insts=((154, {'res': '$exp154.0'}), (156, {'res': '$const156.1'}), (158, {'lhs': '$exp154.0', 'rhs': '$const156.1', 'res': '$158inplace_rshift.2'}), (160, {'value': '$158inplace_rshift.2'}), (162, {'res': '$a162.3'}), (164, {'res': '$a164.4'}), (166, {'lhs': '$a162.3', 'rhs': '$a164.4', 'res': '$166inplace_multiply.5'}), (168, {'value': '$166inplace_multiply.5'}), (170, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={130: ()})
DEBUG 2022-02-08 17:11:37,006 block_infos State(pc_initial=172 nstack_initial=0):
AdaptBlockInfo(insts=((172, {'res': '$invert172.0'}), (174, {'pred': '$invert172.0'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={176: (), 184: ()})
DEBUG 2022-02-08 17:11:37,006 block_infos State(pc_initial=176 nstack_initial=0):
AdaptBlockInfo(insts=((176, {'res': '$const176.0'}), (178, {'res': '$r178.1'}), (180, {'lhs': '$const176.0', 'rhs': '$r178.1', 'res': '$180binary_true_divide.2'}), (182, {'retval': '$180binary_true_divide.2', 'castval': '$182return_value.3'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG 2022-02-08 17:11:37,006 block_infos State(pc_initial=184 nstack_initial=0):
AdaptBlockInfo(insts=((184, {'res': '$r184.0'}), (186, {'retval': '$r184.0', 'castval': '$186return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG 2022-02-08 17:11:37,006 label 0:
    a = arg(0, name=a)                       ['a']
    b = arg(1, name=b)                       ['b']
    $2load_deref.0 = freevar(tp: float64)    ['$2load_deref.0']
    $const4.1 = const(int, 1)                ['$const4.1']
    r = call $2load_deref.0($const4.1, func=$2load_deref.0, args=[Var($const4.1, numbers.py:217)], kws=(), vararg=None, target=None) ['$2load_deref.0', '$const4.1', 'r']
    $10load_deref.3 = freevar(tp: float64)   ['$10load_deref.3']
    a.1 = call $10load_deref.3(a, func=$10load_deref.3, args=[Var(a, numbers.py:217)], kws=(), vararg=None, target=None) ['$10load_deref.3', 'a', 'a.1']
    $const20.7 = const(int, 0)               ['$const20.7']
    $22compare_op.8 = b < $const20.7         ['$22compare_op.8', '$const20.7', 'b']
    bool24 = global(bool: <class 'bool'>)    ['bool24']
    $24pred = call bool24($22compare_op.8, func=bool24, args=(Var($22compare_op.8, numbers.py:219),), kws=(), vararg=None, target=None) ['$22compare_op.8', '$24pred', 'bool24']
    branch $24pred, 26, 98                   ['$24pred']
label 26:
    invert = const(bool, True)               ['invert']
    exp = unary(fn=<built-in function neg>, value=b) ['b', 'exp']
    $const38.4 = const(int, 0)               ['$const38.4']
    $40compare_op.5 = exp < $const38.4       ['$40compare_op.5', '$const38.4', 'exp']
    bool42 = global(bool: <class 'bool'>)    ['bool42']
    $42pred = call bool42($40compare_op.5, func=bool42, args=(Var($40compare_op.5, numbers.py:222),), kws=(), vararg=None, target=None) ['$40compare_op.5', '$42pred', 'bool42']
    branch $42pred, 44, 48                   ['$42pred']
label 44:
    $44load_global.0 = global(OverflowError: <class 'OverflowError'>) ['$44load_global.0']
    raise $44load_global.0                   ['$44load_global.0']
label 48:
    $48load_deref.0 = freevar(is_integer: False) ['$48load_deref.0']
    bool50 = global(bool: <class 'bool'>)    ['bool50']
    $50pred = call bool50($48load_deref.0, func=bool50, args=(Var($48load_deref.0, numbers.py:224),), kws=(), vararg=None, target=None) ['$48load_deref.0', '$50pred', 'bool50']
    branch $50pred, 52, 106                  ['$50pred']
label 52:
    $const54.1 = const(int, 0)               ['$const54.1']
    $56compare_op.2 = a.1 == $const54.1      ['$56compare_op.2', '$const54.1', 'a.1']
    bool58 = global(bool: <class 'bool'>)    ['bool58']
    $58pred = call bool58($56compare_op.2, func=bool58, args=(Var($56compare_op.2, numbers.py:225),), kws=(), vararg=None, target=None) ['$56compare_op.2', '$58pred', 'bool58']
    branch $58pred, 60, 76                   ['$58pred']
label 60:
    $60load_deref.0 = freevar(zerodiv_return: False) ['$60load_deref.0']
    bool62 = global(bool: <class 'bool'>)    ['bool62']
    $62pred = call bool62($60load_deref.0, func=bool62, args=(Var($60load_deref.0, numbers.py:226),), kws=(), vararg=None, target=None) ['$60load_deref.0', '$62pred', 'bool62']
    branch $62pred, 64, 68                   ['$62pred']
label 64:
    $64load_deref.0 = freevar(zerodiv_return: False) ['$64load_deref.0']
    $66return_value.1 = cast(value=$64load_deref.0) ['$64load_deref.0', '$66return_value.1']
    return $66return_value.1                 ['$66return_value.1']
label 68:
    $68load_global.0 = global(ZeroDivisionError: <class 'ZeroDivisionError'>) ['$68load_global.0']
    $const70.1 = const(str, 0 cannot be raised to a negative power) ['$const70.1']
    $72call_function.2 = call $68load_global.0($const70.1, func=$68load_global.0, args=[Var($const70.1, numbers.py:229)], kws=(), vararg=None, target=None) ['$68load_global.0', '$72call_function.2', '$const70.1']
    raise $72call_function.2                 ['$72call_function.2']
label 76:
    $const78.1 = const(int, 1)               ['$const78.1']
    $80compare_op.2 = a.1 != $const78.1      ['$80compare_op.2', '$const78.1', 'a.1']
    bool82 = global(bool: <class 'bool'>)    ['bool82']
    $82pred = call bool82($80compare_op.2, func=bool82, args=(Var($80compare_op.2, numbers.py:230),), kws=(), vararg=None, target=None) ['$80compare_op.2', '$82pred', 'bool82']
    branch $82pred, 84, 106                  ['$82pred']
label 84:
    $const86.1 = const(int, -1)              ['$const86.1']
    $88compare_op.2 = a.1 != $const86.1      ['$88compare_op.2', '$const86.1', 'a.1']
    bool90 = global(bool: <class 'bool'>)    ['bool90']
    $90pred = call bool90($88compare_op.2, func=bool90, args=(Var($88compare_op.2, numbers.py:230),), kws=(), vararg=None, target=None) ['$88compare_op.2', '$90pred', 'bool90']
    branch $90pred, 92, 106                  ['$90pred']
label 92:
    $const92.0 = const(int, 0)               ['$const92.0']
    $94return_value.1 = cast(value=$const92.0) ['$94return_value.1', '$const92.0']
    return $94return_value.1                 ['$94return_value.1']
label 98:
    invert = const(bool, False)              ['invert']
    exp = b                                  ['b', 'exp']
    jump 106                                 []
label 106:
    $const108.1 = const(int, 65536)          ['$const108.1']
    $110compare_op.2 = exp > $const108.1     ['$110compare_op.2', '$const108.1', 'exp']
    bool112 = global(bool: <class 'bool'>)   ['bool112']
    $112pred = call bool112($110compare_op.2, func=bool112, args=(Var($110compare_op.2, numbers.py:235),), kws=(), vararg=None, target=None) ['$110compare_op.2', '$112pred', 'bool112']
    branch $112pred, 114, 130                ['$112pred']
label 114:
    $114load_global.0 = global(math: <module 'math' (built-in)>) ['$114load_global.0']
    $116load_method.1 = getattr(value=$114load_global.0, attr=pow) ['$114load_global.0', '$116load_method.1']
    $120load_global.3 = global(float: <class 'float'>) ['$120load_global.3']
    $124call_function.5 = call $120load_global.3(b, func=$120load_global.3, args=[Var(b, numbers.py:217)], kws=(), vararg=None, target=None) ['$120load_global.3', '$124call_function.5', 'b']
    $126call_method.6 = call $116load_method.1(a.1, $124call_function.5, func=$116load_method.1, args=[Var(a.1, numbers.py:218), Var($124call_function.5, numbers.py:237)], kws=(), vararg=None, target=None) ['$116load_method.1', '$124call_function.5', '$126call_method.6', 'a.1']
    $128return_value.7 = cast(value=$126call_method.6) ['$126call_method.6', '$128return_value.7']
    return $128return_value.7                ['$128return_value.7']
label 130:
    $const132.1 = const(int, 0)              ['$const132.1']
    $134compare_op.2 = exp != $const132.1    ['$134compare_op.2', '$const132.1', 'exp']
    bool136 = global(bool: <class 'bool'>)   ['bool136']
    $136pred = call bool136($134compare_op.2, func=bool136, args=(Var($134compare_op.2, numbers.py:238),), kws=(), vararg=None, target=None) ['$134compare_op.2', '$136pred', 'bool136']
    branch $136pred, 138, 172                ['$136pred']
label 138:
    $const140.1 = const(int, 1)              ['$const140.1']
    $142binary_and.2 = exp & $const140.1     ['$142binary_and.2', '$const140.1', 'exp']
    bool144 = global(bool: <class 'bool'>)   ['bool144']
    $144pred = call bool144($142binary_and.2, func=bool144, args=(Var($142binary_and.2, numbers.py:239),), kws=(), vararg=None, target=None) ['$142binary_and.2', '$144pred', 'bool144']
    branch $144pred, 146, 154                ['$144pred']
label 146:
    $150inplace_multiply.2 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=r, rhs=a.1, static_lhs=Undefined, static_rhs=Undefined) ['$150inplace_multiply.2', 'a.1', 'r']
    r = $150inplace_multiply.2               ['$150inplace_multiply.2', 'r']
    jump 154                                 []
label 154:
    $const156.1 = const(int, 1)              ['$const156.1']
    $158inplace_rshift.2 = inplace_binop(fn=<built-in function irshift>, immutable_fn=<built-in function rshift>, lhs=exp, rhs=$const156.1, static_lhs=Undefined, static_rhs=Undefined) ['$158inplace_rshift.2', '$const156.1', 'exp']
    exp = $158inplace_rshift.2               ['$158inplace_rshift.2', 'exp']
    $166inplace_multiply.5 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=a.1, rhs=a.1, static_lhs=Undefined, static_rhs=Undefined) ['$166inplace_multiply.5', 'a.1', 'a.1']
    a.1 = $166inplace_multiply.5             ['$166inplace_multiply.5', 'a.1']
    jump 130                                 []
label 172:
    bool174 = global(bool: <class 'bool'>)   ['bool174']
    $174pred = call bool174(invert, func=bool174, args=(Var(invert, numbers.py:220),), kws=(), vararg=None, target=None) ['$174pred', 'bool174', 'invert']
    branch $174pred, 176, 184                ['$174pred']
label 176:
    $const176.0 = const(float, 1.0)          ['$const176.0']
    $180binary_true_divide.2 = $const176.0 / r ['$180binary_true_divide.2', '$const176.0', 'r']
    $182return_value.3 = cast(value=$180binary_true_divide.2) ['$180binary_true_divide.2', '$182return_value.3']
    return $182return_value.3                ['$182return_value.3']
label 184:
    $186return_value.1 = cast(value=r)       ['$186return_value.1', 'r']
    return $186return_value.1                ['$186return_value.1']

DEBUG 2022-02-08 17:11:37,016 ==== SSA block analysis pass on 0
DEBUG 2022-02-08 17:11:37,016 Running <numba.core.ssa._GatherDefsHandler object at 0x000001E9F7BE2D00>
DEBUG 2022-02-08 17:11:37,016 on stmt: a = arg(0, name=a)
DEBUG 2022-02-08 17:11:37,016 on stmt: b = arg(1, name=b)
DEBUG 2022-02-08 17:11:37,016 on stmt: $2load_deref.0 = freevar(tp: float64)
DEBUG 2022-02-08 17:11:37,016 on stmt: $const4.1 = const(int, 1)
DEBUG 2022-02-08 17:11:37,016 on stmt: r = call $2load_deref.0($const4.1, func=$2load_deref.0, args=[Var($const4.1, numbers.py:217)], kws=(), vararg=None, target=None)
DEBUG 2022-02-08 17:11:37,016 on stmt: $10load_deref.3 = freevar(tp: float64)
DEBUG 2022-02-08 17:11:37,016 on stmt: a.1 = call $10load_deref.3(a, func=$10load_deref.3, args=[Var(a, numbers.py:217)], kws=(), vararg=None, target=None)
DEBUG 2022-02-08 17:11:37,016 on stmt: $const20.7 = const(int, 0)
DEBUG 2022-02-08 17:11:37,016 on stmt: $22compare_op.8 = b < $const20.7
DEBUG 2022-02-08 17:11:37,024 on stmt: bool24 = global(bool: <class 'bool'>)
DEBUG 2022-02-08 17:11:37,024 on stmt: $24pred = call bool24($22compare_op.8, func=bool24, args=(Var($22compare_op.8, numbers.py:219),), kws=(), vararg=None, target=None)
DEBUG 2022-02-08 17:11:37,024 on stmt: branch $24pred, 26, 98
DEBUG 2022-02-08 17:11:37,024 ==== SSA block analysis pass on 26
DEBUG 2022-02-08 17:11:37,024 Running <numba.core.ssa._GatherDefsHandler object at 0x000001E9F7BE2D00>
DEBUG 2022-02-08 17:11:37,024 on stmt: invert = const(bool, True)
DEBUG 2022-02-08 17:11:37,024 on stmt: exp = unary(fn=<built-in function neg>, value=b)
DEBUG 2022-02-08 17:11:37,024 on stmt: $const38.4 = const(int, 0)
DEBUG 2022-02-08 17:11:37,024 on stmt: $40compare_op.5 = exp < $const38.4
DEBUG 2022-02-08 17:11:37,024 on stmt: bool42 = global(bool: <class 'bool'>)
DEBUG 2022-02-08 17:11:37,024 on stmt: $42pred = call bool42($40compare_op.5, func=bool42, args=(Var($40compare_op.5, numbers.py:222),), kws=(), vararg=None, target=None)
DEBUG 2022-02-08 17:11:37,024 on stmt: branch $42pred, 44, 48
DEBUG 2022-02-08 17:11:37,024 ==== SSA block analysis pass on 44
DEBUG 2022-02-08 17:11:37,024 Running <numba.core.ssa._GatherDefsHandler object at 0x000001E9F7BE2D00>
DEBUG 2022-02-08 17:11:37,024 on stmt: $44load_global.0 = global(OverflowError: <class 'OverflowError'>)
DEBUG 2022-02-08 17:11:37,024 on stmt: <static> raise <class 'OverflowError'>
DEBUG 2022-02-08 17:11:37,024 ==== SSA block analysis pass on 48
DEBUG 2022-02-08 17:11:37,024 Running <numba.core.ssa._GatherDefsHandler object at 0x000001E9F7BE2D00>
DEBUG 2022-02-08 17:11:37,024 on stmt: $48load_deref.0 = freevar(is_integer: False)
DEBUG 2022-02-08 17:11:37,024 on stmt: bool50 = global(bool: <class 'bool'>)
DEBUG 2022-02-08 17:11:37,024 on stmt: $50pred = call bool50($48load_deref.0, func=bool50, args=(Var($48load_deref.0, numbers.py:224),), kws=(), vararg=None, target=None)
DEBUG 2022-02-08 17:11:37,024 on stmt: jump 106
DEBUG 2022-02-08 17:11:37,024 ==== SSA block analysis pass on 98
DEBUG 2022-02-08 17:11:37,024 Running <numba.core.ssa._GatherDefsHandler object at 0x000001E9F7BE2D00>
DEBUG 2022-02-08 17:11:37,024 on stmt: invert = const(bool, False)
DEBUG 2022-02-08 17:11:37,024 on stmt: exp = b
DEBUG 2022-02-08 17:11:37,024 on stmt: jump 106
DEBUG 2022-02-08 17:11:37,024 ==== SSA block analysis pass on 106
DEBUG 2022-02-08 17:11:37,024 Running <numba.core.ssa._GatherDefsHandler object at 0x000001E9F7BE2D00>
DEBUG 2022-02-08 17:11:37,024 on stmt: $const108.1 = const(int, 65536)
DEBUG 2022-02-08 17:11:37,024 on stmt: $110compare_op.2 = exp > $const108.1
DEBUG 2022-02-08 17:11:37,024 on stmt: bool112 = global(bool: <class 'bool'>)
DEBUG 2022-02-08 17:11:37,024 on stmt: $112pred = call bool112($110compare_op.2, func=bool112, args=(Var($110compare_op.2, numbers.py:235),), kws=(), vararg=None, target=None)
DEBUG 2022-02-08 17:11:37,024 on stmt: branch $112pred, 114, 130
DEBUG 2022-02-08 17:11:37,024 ==== SSA block analysis pass on 114
DEBUG 2022-02-08 17:11:37,024 Running <numba.core.ssa._GatherDefsHandler object at 0x000001E9F7BE2D00>
DEBUG 2022-02-08 17:11:37,024 on stmt: $114load_global.0 = global(math: <module 'math' (built-in)>)
DEBUG 2022-02-08 17:11:37,024 on stmt: $116load_method.1 = getattr(value=$114load_global.0, attr=pow)
DEBUG 2022-02-08 17:11:37,024 on stmt: $120load_global.3 = global(float: <class 'float'>)
DEBUG 2022-02-08 17:11:37,024 on stmt: $124call_function.5 = call $120load_global.3(b, func=$120load_global.3, args=[Var(b, numbers.py:217)], kws=(), vararg=None, target=None)
DEBUG 2022-02-08 17:11:37,024 on stmt: $126call_method.6 = call $116load_method.1(a.1, $124call_function.5, func=$116load_method.1, args=[Var(a.1, numbers.py:218), Var($124call_function.5, numbers.py:237)], kws=(), vararg=None, target=None)
DEBUG 2022-02-08 17:11:37,024 on stmt: $128return_value.7 = cast(value=$126call_method.6)
DEBUG 2022-02-08 17:11:37,024 on stmt: return $128return_value.7
DEBUG 2022-02-08 17:11:37,024 ==== SSA block analysis pass on 130
DEBUG 2022-02-08 17:11:37,024 Running <numba.core.ssa._GatherDefsHandler object at 0x000001E9F7BE2D00>
DEBUG 2022-02-08 17:11:37,024 on stmt: $const132.1 = const(int, 0)
DEBUG 2022-02-08 17:11:37,024 on stmt: $134compare_op.2 = exp != $const132.1
DEBUG 2022-02-08 17:11:37,024 on stmt: bool136 = global(bool: <class 'bool'>)
DEBUG 2022-02-08 17:11:37,024 on stmt: $136pred = call bool136($134compare_op.2, func=bool136, args=(Var($134compare_op.2, numbers.py:238),), kws=(), vararg=None, target=None)
DEBUG 2022-02-08 17:11:37,024 on stmt: branch $136pred, 138, 172
DEBUG 2022-02-08 17:11:37,024 ==== SSA block analysis pass on 138
DEBUG 2022-02-08 17:11:37,024 Running <numba.core.ssa._GatherDefsHandler object at 0x000001E9F7BE2D00>
DEBUG 2022-02-08 17:11:37,024 on stmt: $const140.1 = const(int, 1)
DEBUG 2022-02-08 17:11:37,024 on stmt: $142binary_and.2 = exp & $const140.1
DEBUG 2022-02-08 17:11:37,024 on stmt: bool144 = global(bool: <class 'bool'>)
DEBUG 2022-02-08 17:11:37,024 on stmt: $144pred = call bool144($142binary_and.2, func=bool144, args=(Var($142binary_and.2, numbers.py:239),), kws=(), vararg=None, target=None)
DEBUG 2022-02-08 17:11:37,024 on stmt: branch $144pred, 146, 154
DEBUG 2022-02-08 17:11:37,024 ==== SSA block analysis pass on 146
DEBUG 2022-02-08 17:11:37,024 Running <numba.core.ssa._GatherDefsHandler object at 0x000001E9F7BE2D00>
DEBUG 2022-02-08 17:11:37,024 on stmt: $150inplace_multiply.2 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=r, rhs=a.1, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-08 17:11:37,024 on stmt: r = $150inplace_multiply.2
DEBUG 2022-02-08 17:11:37,024 on stmt: jump 154
DEBUG 2022-02-08 17:11:37,024 ==== SSA block analysis pass on 154
DEBUG 2022-02-08 17:11:37,024 Running <numba.core.ssa._GatherDefsHandler object at 0x000001E9F7BE2D00>
DEBUG 2022-02-08 17:11:37,024 on stmt: $const156.1 = const(int, 1)
DEBUG 2022-02-08 17:11:37,024 on stmt: $158inplace_rshift.2 = inplace_binop(fn=<built-in function irshift>, immutable_fn=<built-in function rshift>, lhs=exp, rhs=$const156.1, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-08 17:11:37,024 on stmt: exp = $158inplace_rshift.2
DEBUG 2022-02-08 17:11:37,024 on stmt: $166inplace_multiply.5 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=a.1, rhs=a.1, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-08 17:11:37,024 on stmt: a.1 = $166inplace_multiply.5
DEBUG 2022-02-08 17:11:37,024 on stmt: jump 130
DEBUG 2022-02-08 17:11:37,024 ==== SSA block analysis pass on 172
DEBUG 2022-02-08 17:11:37,024 Running <numba.core.ssa._GatherDefsHandler object at 0x000001E9F7BE2D00>
DEBUG 2022-02-08 17:11:37,024 on stmt: bool174 = global(bool: <class 'bool'>)
DEBUG 2022-02-08 17:11:37,024 on stmt: $174pred = call bool174(invert, func=bool174, args=(Var(invert, numbers.py:220),), kws=(), vararg=None, target=None)
DEBUG 2022-02-08 17:11:37,024 on stmt: branch $174pred, 176, 184
DEBUG 2022-02-08 17:11:37,024 ==== SSA block analysis pass on 176
DEBUG 2022-02-08 17:11:37,024 Running <numba.core.ssa._GatherDefsHandler object at 0x000001E9F7BE2D00>
DEBUG 2022-02-08 17:11:37,024 on stmt: $const176.0 = const(float, 1.0)
DEBUG 2022-02-08 17:11:37,024 on stmt: $180binary_true_divide.2 = $const176.0 / r
DEBUG 2022-02-08 17:11:37,024 on stmt: $182return_value.3 = cast(value=$180binary_true_divide.2)
DEBUG 2022-02-08 17:11:37,024 on stmt: return $182return_value.3
DEBUG 2022-02-08 17:11:37,024 ==== SSA block analysis pass on 184
DEBUG 2022-02-08 17:11:37,024 Running <numba.core.ssa._GatherDefsHandler object at 0x000001E9F7BE2D00>
DEBUG 2022-02-08 17:11:37,024 on stmt: $186return_value.1 = cast(value=r)
DEBUG 2022-02-08 17:11:37,024 on stmt: return $186return_value.1
DEBUG 2022-02-08 17:11:37,024 defs defaultdict(<class 'list'>,
            {'$10load_deref.3': [<numba.core.ir.Assign object at 0x000001E9F7A8F5E0>],
             '$110compare_op.2': [<numba.core.ir.Assign object at 0x000001E9F7AC1220>],
             '$112pred': [<numba.core.ir.Assign object at 0x000001E9F7AC1100>],
             '$114load_global.0': [<numba.core.ir.Assign object at 0x000001E9F7AC1D00>],
             '$116load_method.1': [<numba.core.ir.Assign object at 0x000001E9F7AC16A0>],
             '$120load_global.3': [<numba.core.ir.Assign object at 0x000001E9F7B68E50>],
             '$124call_function.5': [<numba.core.ir.Assign object at 0x000001E9F7B68340>],
             '$126call_method.6': [<numba.core.ir.Assign object at 0x000001E9F7B68550>],
             '$128return_value.7': [<numba.core.ir.Assign object at 0x000001E9F7B68850>],
             '$134compare_op.2': [<numba.core.ir.Assign object at 0x000001E9F7B62130>],
             '$136pred': [<numba.core.ir.Assign object at 0x000001E9F7B629A0>],
             '$142binary_and.2': [<numba.core.ir.Assign object at 0x000001E9F7B6C250>],
             '$144pred': [<numba.core.ir.Assign object at 0x000001E9F7B6C2B0>],
             '$150inplace_multiply.2': [<numba.core.ir.Assign object at 0x000001E9F7B6C9A0>],
             '$158inplace_rshift.2': [<numba.core.ir.Assign object at 0x000001E9F7B6CA00>],
             '$166inplace_multiply.5': [<numba.core.ir.Assign object at 0x000001E9F7B7B760>],
             '$174pred': [<numba.core.ir.Assign object at 0x000001E9F7B7B280>],
             '$180binary_true_divide.2': [<numba.core.ir.Assign object at 0x000001E9F7B7B790>],
             '$182return_value.3': [<numba.core.ir.Assign object at 0x000001E9F7B7BEE0>],
             '$186return_value.1': [<numba.core.ir.Assign object at 0x000001E9F7B8BE80>],
             '$22compare_op.8': [<numba.core.ir.Assign object at 0x000001E9F7AB25B0>],
             '$24pred': [<numba.core.ir.Assign object at 0x000001E9F7AB22E0>],
             '$2load_deref.0': [<numba.core.ir.Assign object at 0x000001E9F7A8F880>],
             '$40compare_op.5': [<numba.core.ir.Assign object at 0x000001E9F7AE79D0>],
             '$42pred': [<numba.core.ir.Assign object at 0x000001E9F7AE74C0>],
             '$44load_global.0': [<numba.core.ir.Assign object at 0x000001E9F7AE7160>],
             '$48load_deref.0': [<numba.core.ir.Assign object at 0x000001E9F7AE7580>],
             '$50pred': [<numba.core.ir.Assign object at 0x000001E9F7AEBD00>],
             '$const108.1': [<numba.core.ir.Assign object at 0x000001E9F7AC1250>],
             '$const132.1': [<numba.core.ir.Assign object at 0x000001E9F7B629D0>],
             '$const140.1': [<numba.core.ir.Assign object at 0x000001E9F7B62610>],
             '$const156.1': [<numba.core.ir.Assign object at 0x000001E9F7B6CAF0>],
             '$const176.0': [<numba.core.ir.Assign object at 0x000001E9F7B7B070>],
             '$const20.7': [<numba.core.ir.Assign object at 0x000001E9F7AB27F0>],
             '$const38.4': [<numba.core.ir.Assign object at 0x000001E9F7AE7D60>],
             '$const4.1': [<numba.core.ir.Assign object at 0x000001E9F7A8F0A0>],
             'a': [<numba.core.ir.Assign object at 0x000001E9F7A8F4F0>],
             'a.1': [<numba.core.ir.Assign object at 0x000001E9F7A8FD30>,
                     <numba.core.ir.Assign object at 0x000001E9F7B7BC40>],
             'b': [<numba.core.ir.Assign object at 0x000001E9F7A8F4C0>],
             'bool112': [<numba.core.ir.Assign object at 0x000001E9F7AC1190>],
             'bool136': [<numba.core.ir.Assign object at 0x000001E9F7B623D0>],
             'bool144': [<numba.core.ir.Assign object at 0x000001E9F7B6C550>],
             'bool174': [<numba.core.ir.Assign object at 0x000001E9F7B7B580>],
             'bool24': [<numba.core.ir.Assign object at 0x000001E9F7AB2A30>],
             'bool42': [<numba.core.ir.Assign object at 0x000001E9F7AE7400>],
             'bool50': [<numba.core.ir.Assign object at 0x000001E9F7AEB370>],
             'exp': [<numba.core.ir.Assign object at 0x000001E9F7AE7F70>,
                     <numba.core.ir.Assign object at 0x000001E9F7AC1790>,
                     <numba.core.ir.Assign object at 0x000001E9F7B7B700>],
             'invert': [<numba.core.ir.Assign object at 0x000001E9F7AB22B0>,
                        <numba.core.ir.Assign object at 0x000001E9F7AC1AC0>],
             'r': [<numba.core.ir.Assign object at 0x000001E9F7A8F130>,
                   <numba.core.ir.Assign object at 0x000001E9F7B6CE80>]})
DEBUG 2022-02-08 17:11:37,024 SSA violators {'r', 'invert', 'a.1', 'exp'}
DEBUG 2022-02-08 17:11:37,024 Fix SSA violator on var r
DEBUG 2022-02-08 17:11:37,024 ==== SSA block rewrite pass on 0
DEBUG 2022-02-08 17:11:37,024 Running <numba.core.ssa._FreshVarHandler object at 0x000001E9F7BE23A0>
DEBUG 2022-02-08 17:11:37,024 on stmt: a = arg(0, name=a)
DEBUG 2022-02-08 17:11:37,024 on stmt: b = arg(1, name=b)
DEBUG 2022-02-08 17:11:37,024 on stmt: $2load_deref.0 = freevar(tp: float64)
DEBUG 2022-02-08 17:11:37,024 on stmt: $const4.1 = const(int, 1)
DEBUG 2022-02-08 17:11:37,024 on stmt: r = call $2load_deref.0($const4.1, func=$2load_deref.0, args=[Var($const4.1, numbers.py:217)], kws=(), vararg=None, target=None)
DEBUG 2022-02-08 17:11:37,024 first assign: r
DEBUG 2022-02-08 17:11:37,024 replaced with: r = call $2load_deref.0($const4.1, func=$2load_deref.0, args=[Var($const4.1, numbers.py:217)], kws=(), vararg=None, target=None)
DEBUG 2022-02-08 17:11:37,024 on stmt: $10load_deref.3 = freevar(tp: float64)
DEBUG 2022-02-08 17:11:37,024 on stmt: a.1 = call $10load_deref.3(a, func=$10load_deref.3, args=[Var(a, numbers.py:217)], kws=(), vararg=None, target=None)
DEBUG 2022-02-08 17:11:37,024 on stmt: $const20.7 = const(int, 0)
DEBUG 2022-02-08 17:11:37,024 on stmt: $22compare_op.8 = b < $const20.7
DEBUG 2022-02-08 17:11:37,024 on stmt: bool24 = global(bool: <class 'bool'>)
DEBUG 2022-02-08 17:11:37,034 on stmt: $24pred = call bool24($22compare_op.8, func=bool24, args=(Var($22compare_op.8, numbers.py:219),), kws=(), vararg=None, target=None)
DEBUG 2022-02-08 17:11:37,034 on stmt: branch $24pred, 26, 98
DEBUG 2022-02-08 17:11:37,034 ==== SSA block rewrite pass on 26
DEBUG 2022-02-08 17:11:37,034 Running <numba.core.ssa._FreshVarHandler object at 0x000001E9F7BE23A0>
DEBUG 2022-02-08 17:11:37,034 on stmt: invert = const(bool, True)
DEBUG 2022-02-08 17:11:37,034 on stmt: exp = unary(fn=<built-in function neg>, value=b)
DEBUG 2022-02-08 17:11:37,034 on stmt: $const38.4 = const(int, 0)
DEBUG 2022-02-08 17:11:37,034 on stmt: $40compare_op.5 = exp < $const38.4
DEBUG 2022-02-08 17:11:37,034 on stmt: bool42 = global(bool: <class 'bool'>)
DEBUG 2022-02-08 17:11:37,034 on stmt: $42pred = call bool42($40compare_op.5, func=bool42, args=(Var($40compare_op.5, numbers.py:222),), kws=(), vararg=None, target=None)
DEBUG 2022-02-08 17:11:37,034 on stmt: branch $42pred, 44, 48
DEBUG 2022-02-08 17:11:37,034 ==== SSA block rewrite pass on 44
DEBUG 2022-02-08 17:11:37,034 Running <numba.core.ssa._FreshVarHandler object at 0x000001E9F7BE23A0>
DEBUG 2022-02-08 17:11:37,034 on stmt: $44load_global.0 = global(OverflowError: <class 'OverflowError'>)
DEBUG 2022-02-08 17:11:37,034 on stmt: <static> raise <class 'OverflowError'>
DEBUG 2022-02-08 17:11:37,034 ==== SSA block rewrite pass on 48
DEBUG 2022-02-08 17:11:37,034 Running <numba.core.ssa._FreshVarHandler object at 0x000001E9F7BE23A0>
DEBUG 2022-02-08 17:11:37,034 on stmt: $48load_deref.0 = freevar(is_integer: False)
DEBUG 2022-02-08 17:11:37,036 on stmt: bool50 = global(bool: <class 'bool'>)
DEBUG 2022-02-08 17:11:37,036 on stmt: $50pred = call bool50($48load_deref.0, func=bool50, args=(Var($48load_deref.0, numbers.py:224),), kws=(), vararg=None, target=None)
DEBUG 2022-02-08 17:11:37,036 on stmt: jump 106
DEBUG 2022-02-08 17:11:37,036 ==== SSA block rewrite pass on 98
DEBUG 2022-02-08 17:11:37,036 Running <numba.core.ssa._FreshVarHandler object at 0x000001E9F7BE23A0>
DEBUG 2022-02-08 17:11:37,036 on stmt: invert = const(bool, False)
DEBUG 2022-02-08 17:11:37,036 on stmt: exp = b
DEBUG 2022-02-08 17:11:37,036 on stmt: jump 106
DEBUG 2022-02-08 17:11:37,036 ==== SSA block rewrite pass on 106
DEBUG 2022-02-08 17:11:37,036 Running <numba.core.ssa._FreshVarHandler object at 0x000001E9F7BE23A0>
DEBUG 2022-02-08 17:11:37,036 on stmt: $const108.1 = const(int, 65536)
DEBUG 2022-02-08 17:11:37,036 on stmt: $110compare_op.2 = exp > $const108.1
DEBUG 2022-02-08 17:11:37,036 on stmt: bool112 = global(bool: <class 'bool'>)
DEBUG 2022-02-08 17:11:37,036 on stmt: $112pred = call bool112($110compare_op.2, func=bool112, args=(Var($110compare_op.2, numbers.py:235),), kws=(), vararg=None, target=None)
DEBUG 2022-02-08 17:11:37,036 on stmt: branch $112pred, 114, 130
DEBUG 2022-02-08 17:11:37,036 ==== SSA block rewrite pass on 114
DEBUG 2022-02-08 17:11:37,036 Running <numba.core.ssa._FreshVarHandler object at 0x000001E9F7BE23A0>
DEBUG 2022-02-08 17:11:37,036 on stmt: $114load_global.0 = global(math: <module 'math' (built-in)>)
DEBUG 2022-02-08 17:11:37,036 on stmt: $116load_method.1 = getattr(value=$114load_global.0, attr=pow)
DEBUG 2022-02-08 17:11:37,036 on stmt: $120load_global.3 = global(float: <class 'float'>)
DEBUG 2022-02-08 17:11:37,036 on stmt: $124call_function.5 = call $120load_global.3(b, func=$120load_global.3, args=[Var(b, numbers.py:217)], kws=(), vararg=None, target=None)
DEBUG 2022-02-08 17:11:37,036 on stmt: $126call_method.6 = call $116load_method.1(a.1, $124call_function.5, func=$116load_method.1, args=[Var(a.1, numbers.py:218), Var($124call_function.5, numbers.py:237)], kws=(), vararg=None, target=None)
DEBUG 2022-02-08 17:11:37,036 on stmt: $128return_value.7 = cast(value=$126call_method.6)
DEBUG 2022-02-08 17:11:37,036 on stmt: return $128return_value.7
DEBUG 2022-02-08 17:11:37,036 ==== SSA block rewrite pass on 130
DEBUG 2022-02-08 17:11:37,036 Running <numba.core.ssa._FreshVarHandler object at 0x000001E9F7BE23A0>
DEBUG 2022-02-08 17:11:37,036 on stmt: $const132.1 = const(int, 0)
DEBUG 2022-02-08 17:11:37,036 on stmt: $134compare_op.2 = exp != $const132.1
DEBUG 2022-02-08 17:11:37,036 on stmt: bool136 = global(bool: <class 'bool'>)
DEBUG 2022-02-08 17:11:37,036 on stmt: $136pred = call bool136($134compare_op.2, func=bool136, args=(Var($134compare_op.2, numbers.py:238),), kws=(), vararg=None, target=None)
DEBUG 2022-02-08 17:11:37,036 on stmt: branch $136pred, 138, 172
DEBUG 2022-02-08 17:11:37,036 ==== SSA block rewrite pass on 138
DEBUG 2022-02-08 17:11:37,036 Running <numba.core.ssa._FreshVarHandler object at 0x000001E9F7BE23A0>
DEBUG 2022-02-08 17:11:37,036 on stmt: $const140.1 = const(int, 1)
DEBUG 2022-02-08 17:11:37,036 on stmt: $142binary_and.2 = exp & $const140.1
DEBUG 2022-02-08 17:11:37,036 on stmt: bool144 = global(bool: <class 'bool'>)
DEBUG 2022-02-08 17:11:37,036 on stmt: $144pred = call bool144($142binary_and.2, func=bool144, args=(Var($142binary_and.2, numbers.py:239),), kws=(), vararg=None, target=None)
DEBUG 2022-02-08 17:11:37,036 on stmt: branch $144pred, 146, 154
DEBUG 2022-02-08 17:11:37,036 ==== SSA block rewrite pass on 146
DEBUG 2022-02-08 17:11:37,036 Running <numba.core.ssa._FreshVarHandler object at 0x000001E9F7BE23A0>
DEBUG 2022-02-08 17:11:37,036 on stmt: $150inplace_multiply.2 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=r, rhs=a.1, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-08 17:11:37,036 on stmt: r = $150inplace_multiply.2
DEBUG 2022-02-08 17:11:37,036 replaced with: r.1 = $150inplace_multiply.2
DEBUG 2022-02-08 17:11:37,036 on stmt: jump 154
DEBUG 2022-02-08 17:11:37,036 ==== SSA block rewrite pass on 154
DEBUG 2022-02-08 17:11:37,036 Running <numba.core.ssa._FreshVarHandler object at 0x000001E9F7BE23A0>
DEBUG 2022-02-08 17:11:37,036 on stmt: $const156.1 = const(int, 1)
DEBUG 2022-02-08 17:11:37,036 on stmt: $158inplace_rshift.2 = inplace_binop(fn=<built-in function irshift>, immutable_fn=<built-in function rshift>, lhs=exp, rhs=$const156.1, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-08 17:11:37,036 on stmt: exp = $158inplace_rshift.2
DEBUG 2022-02-08 17:11:37,036 on stmt: $166inplace_multiply.5 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=a.1, rhs=a.1, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-08 17:11:37,036 on stmt: a.1 = $166inplace_multiply.5
DEBUG 2022-02-08 17:11:37,036 on stmt: jump 130
DEBUG 2022-02-08 17:11:37,036 ==== SSA block rewrite pass on 172
DEBUG 2022-02-08 17:11:37,036 Running <numba.core.ssa._FreshVarHandler object at 0x000001E9F7BE23A0>
DEBUG 2022-02-08 17:11:37,036 on stmt: bool174 = global(bool: <class 'bool'>)
DEBUG 2022-02-08 17:11:37,036 on stmt: $174pred = call bool174(invert, func=bool174, args=(Var(invert, numbers.py:220),), kws=(), vararg=None, target=None)
DEBUG 2022-02-08 17:11:37,036 on stmt: branch $174pred, 176, 184
DEBUG 2022-02-08 17:11:37,036 ==== SSA block rewrite pass on 176
DEBUG 2022-02-08 17:11:37,036 Running <numba.core.ssa._FreshVarHandler object at 0x000001E9F7BE23A0>
DEBUG 2022-02-08 17:11:37,036 on stmt: $const176.0 = const(float, 1.0)
DEBUG 2022-02-08 17:11:37,036 on stmt: $180binary_true_divide.2 = $const176.0 / r
DEBUG 2022-02-08 17:11:37,036 on stmt: $182return_value.3 = cast(value=$180binary_true_divide.2)
DEBUG 2022-02-08 17:11:37,036 on stmt: return $182return_value.3
DEBUG 2022-02-08 17:11:37,036 ==== SSA block rewrite pass on 184
DEBUG 2022-02-08 17:11:37,036 Running <numba.core.ssa._FreshVarHandler object at 0x000001E9F7BE23A0>
DEBUG 2022-02-08 17:11:37,036 on stmt: $186return_value.1 = cast(value=r)
DEBUG 2022-02-08 17:11:37,036 on stmt: return $186return_value.1
DEBUG 2022-02-08 17:11:37,036 Replaced assignments: defaultdict(<class 'list'>,
            {0: [<numba.core.ir.Assign object at 0x000001E9F7BE2820>],
             146: [<numba.core.ir.Assign object at 0x000001E9F7BE2760>]})
DEBUG 2022-02-08 17:11:37,036 ==== SSA block rewrite pass on 0
DEBUG 2022-02-08 17:11:37,036 Running <numba.core.ssa._FixSSAVars object at 0x000001E9F7BE23A0>
DEBUG 2022-02-08 17:11:37,036 on stmt: a = arg(0, name=a)
DEBUG 2022-02-08 17:11:37,036 on stmt: b = arg(1, name=b)
DEBUG 2022-02-08 17:11:37,036 on stmt: $2load_deref.0 = freevar(tp: float64)
DEBUG 2022-02-08 17:11:37,036 on stmt: $const4.1 = const(int, 1)
DEBUG 2022-02-08 17:11:37,036 on stmt: r = call $2load_deref.0($const4.1, func=$2load_deref.0, args=[Var($const4.1, numbers.py:217)], kws=(), vararg=None, target=None)
DEBUG 2022-02-08 17:11:37,036 on stmt: $10load_deref.3 = freevar(tp: float64)
DEBUG 2022-02-08 17:11:37,036 on stmt: a.1 = call $10load_deref.3(a, func=$10load_deref.3, args=[Var(a, numbers.py:217)], kws=(), vararg=None, target=None)
DEBUG 2022-02-08 17:11:37,036 on stmt: $const20.7 = const(int, 0)
DEBUG 2022-02-08 17:11:37,036 on stmt: $22compare_op.8 = b < $const20.7
DEBUG 2022-02-08 17:11:37,036 on stmt: bool24 = global(bool: <class 'bool'>)
DEBUG 2022-02-08 17:11:37,036 on stmt: $24pred = call bool24($22compare_op.8, func=bool24, args=(Var($22compare_op.8, numbers.py:219),), kws=(), vararg=None, target=None)
DEBUG 2022-02-08 17:11:37,036 on stmt: branch $24pred, 26, 98
DEBUG 2022-02-08 17:11:37,036 ==== SSA block rewrite pass on 26
DEBUG 2022-02-08 17:11:37,036 Running <numba.core.ssa._FixSSAVars object at 0x000001E9F7BE23A0>
DEBUG 2022-02-08 17:11:37,036 on stmt: invert = const(bool, True)
DEBUG 2022-02-08 17:11:37,036 on stmt: exp = unary(fn=<built-in function neg>, value=b)
DEBUG 2022-02-08 17:11:37,036 on stmt: $const38.4 = const(int, 0)
DEBUG 2022-02-08 17:11:37,036 on stmt: $40compare_op.5 = exp < $const38.4
DEBUG 2022-02-08 17:11:37,036 on stmt: bool42 = global(bool: <class 'bool'>)
DEBUG 2022-02-08 17:11:37,036 on stmt: $42pred = call bool42($40compare_op.5, func=bool42, args=(Var($40compare_op.5, numbers.py:222),), kws=(), vararg=None, target=None)
DEBUG 2022-02-08 17:11:37,044 on stmt: branch $42pred, 44, 48
DEBUG 2022-02-08 17:11:37,044 ==== SSA block rewrite pass on 44
DEBUG 2022-02-08 17:11:37,044 Running <numba.core.ssa._FixSSAVars object at 0x000001E9F7BE23A0>
DEBUG 2022-02-08 17:11:37,044 on stmt: $44load_global.0 = global(OverflowError: <class 'OverflowError'>)
DEBUG 2022-02-08 17:11:37,044 on stmt: <static> raise <class 'OverflowError'>
DEBUG 2022-02-08 17:11:37,044 ==== SSA block rewrite pass on 48
DEBUG 2022-02-08 17:11:37,044 Running <numba.core.ssa._FixSSAVars object at 0x000001E9F7BE23A0>
DEBUG 2022-02-08 17:11:37,044 on stmt: $48load_deref.0 = freevar(is_integer: False)
DEBUG 2022-02-08 17:11:37,044 on stmt: bool50 = global(bool: <class 'bool'>)
DEBUG 2022-02-08 17:11:37,044 on stmt: $50pred = call bool50($48load_deref.0, func=bool50, args=(Var($48load_deref.0, numbers.py:224),), kws=(), vararg=None, target=None)
DEBUG 2022-02-08 17:11:37,044 on stmt: jump 106
DEBUG 2022-02-08 17:11:37,044 ==== SSA block rewrite pass on 98
DEBUG 2022-02-08 17:11:37,044 Running <numba.core.ssa._FixSSAVars object at 0x000001E9F7BE23A0>
DEBUG 2022-02-08 17:11:37,044 on stmt: invert = const(bool, False)
DEBUG 2022-02-08 17:11:37,044 on stmt: exp = b
DEBUG 2022-02-08 17:11:37,044 on stmt: jump 106
DEBUG 2022-02-08 17:11:37,044 ==== SSA block rewrite pass on 106
DEBUG 2022-02-08 17:11:37,044 Running <numba.core.ssa._FixSSAVars object at 0x000001E9F7BE23A0>
DEBUG 2022-02-08 17:11:37,044 on stmt: $const108.1 = const(int, 65536)
DEBUG 2022-02-08 17:11:37,044 on stmt: $110compare_op.2 = exp > $const108.1
DEBUG 2022-02-08 17:11:37,044 on stmt: bool112 = global(bool: <class 'bool'>)
DEBUG 2022-02-08 17:11:37,044 on stmt: $112pred = call bool112($110compare_op.2, func=bool112, args=(Var($110compare_op.2, numbers.py:235),), kws=(), vararg=None, target=None)
DEBUG 2022-02-08 17:11:37,047 on stmt: branch $112pred, 114, 130
DEBUG 2022-02-08 17:11:37,047 ==== SSA block rewrite pass on 114
DEBUG 2022-02-08 17:11:37,047 Running <numba.core.ssa._FixSSAVars object at 0x000001E9F7BE23A0>
DEBUG 2022-02-08 17:11:37,047 on stmt: $114load_global.0 = global(math: <module 'math' (built-in)>)
DEBUG 2022-02-08 17:11:37,047 on stmt: $116load_method.1 = getattr(value=$114load_global.0, attr=pow)
DEBUG 2022-02-08 17:11:37,047 on stmt: $120load_global.3 = global(float: <class 'float'>)
DEBUG 2022-02-08 17:11:37,047 on stmt: $124call_function.5 = call $120load_global.3(b, func=$120load_global.3, args=[Var(b, numbers.py:217)], kws=(), vararg=None, target=None)
DEBUG 2022-02-08 17:11:37,047 on stmt: $126call_method.6 = call $116load_method.1(a.1, $124call_function.5, func=$116load_method.1, args=[Var(a.1, numbers.py:218), Var($124call_function.5, numbers.py:237)], kws=(), vararg=None, target=None)
DEBUG 2022-02-08 17:11:37,047 on stmt: $128return_value.7 = cast(value=$126call_method.6)
DEBUG 2022-02-08 17:11:37,047 on stmt: return $128return_value.7
DEBUG 2022-02-08 17:11:37,047 ==== SSA block rewrite pass on 130
DEBUG 2022-02-08 17:11:37,047 Running <numba.core.ssa._FixSSAVars object at 0x000001E9F7BE23A0>
DEBUG 2022-02-08 17:11:37,047 on stmt: $const132.1 = const(int, 0)
DEBUG 2022-02-08 17:11:37,047 on stmt: $134compare_op.2 = exp != $const132.1
DEBUG 2022-02-08 17:11:37,047 on stmt: bool136 = global(bool: <class 'bool'>)
DEBUG 2022-02-08 17:11:37,047 on stmt: $136pred = call bool136($134compare_op.2, func=bool136, args=(Var($134compare_op.2, numbers.py:238),), kws=(), vararg=None, target=None)
DEBUG 2022-02-08 17:11:37,047 on stmt: branch $136pred, 138, 172
DEBUG 2022-02-08 17:11:37,047 ==== SSA block rewrite pass on 138
DEBUG 2022-02-08 17:11:37,047 Running <numba.core.ssa._FixSSAVars object at 0x000001E9F7BE23A0>
DEBUG 2022-02-08 17:11:37,047 on stmt: $const140.1 = const(int, 1)
DEBUG 2022-02-08 17:11:37,047 on stmt: $142binary_and.2 = exp & $const140.1
DEBUG 2022-02-08 17:11:37,047 on stmt: bool144 = global(bool: <class 'bool'>)
DEBUG 2022-02-08 17:11:37,047 on stmt: $144pred = call bool144($142binary_and.2, func=bool144, args=(Var($142binary_and.2, numbers.py:239),), kws=(), vararg=None, target=None)
DEBUG 2022-02-08 17:11:37,047 on stmt: branch $144pred, 146, 154
DEBUG 2022-02-08 17:11:37,047 ==== SSA block rewrite pass on 146
DEBUG 2022-02-08 17:11:37,047 Running <numba.core.ssa._FixSSAVars object at 0x000001E9F7BE23A0>
DEBUG 2022-02-08 17:11:37,047 on stmt: $150inplace_multiply.2 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=r, rhs=a.1, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-08 17:11:37,047 find_def var='r' stmt=$150inplace_multiply.2 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=r, rhs=a.1, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-08 17:11:37,047 find_def_from_top label 146
DEBUG 2022-02-08 17:11:37,047 idom 138 from label 146
DEBUG 2022-02-08 17:11:37,047 find_def_from_bottom label 138
DEBUG 2022-02-08 17:11:37,047 find_def_from_top label 138
DEBUG 2022-02-08 17:11:37,047 idom 130 from label 138
DEBUG 2022-02-08 17:11:37,047 find_def_from_bottom label 130
DEBUG 2022-02-08 17:11:37,047 find_def_from_top label 130
DEBUG 2022-02-08 17:11:37,047 insert phi node r.2 = phi(incoming_values=[], incoming_blocks=[]) at 130
DEBUG 2022-02-08 17:11:37,047 find_def_from_bottom label 106
DEBUG 2022-02-08 17:11:37,047 find_def_from_top label 106
DEBUG 2022-02-08 17:11:37,047 idom 0 from label 106
DEBUG 2022-02-08 17:11:37,047 find_def_from_bottom label 0
DEBUG 2022-02-08 17:11:37,047 incoming_def r = call $2load_deref.0($const4.1, func=$2load_deref.0, args=[Var($const4.1, numbers.py:217)], kws=(), vararg=None, target=None)
DEBUG 2022-02-08 17:11:37,047 find_def_from_bottom label 154
DEBUG 2022-02-08 17:11:37,047 find_def_from_top label 154
DEBUG 2022-02-08 17:11:37,047 insert phi node r.3 = phi(incoming_values=[], incoming_blocks=[]) at 154
DEBUG 2022-02-08 17:11:37,047 find_def_from_bottom label 138
DEBUG 2022-02-08 17:11:37,047 find_def_from_top label 138
DEBUG 2022-02-08 17:11:37,047 idom 130 from label 138
DEBUG 2022-02-08 17:11:37,047 find_def_from_bottom label 130
DEBUG 2022-02-08 17:11:37,047 incoming_def r.2 = phi(incoming_values=[Var(r, numbers.py:217)], incoming_blocks=[106])
DEBUG 2022-02-08 17:11:37,047 find_def_from_bottom label 146
DEBUG 2022-02-08 17:11:37,047 incoming_def r.1 = $150inplace_multiply.2
DEBUG 2022-02-08 17:11:37,047 incoming_def r.3 = phi(incoming_values=[Var(r.2, numbers.py:240), Var(r.1, numbers.py:240)], incoming_blocks=[138, 146])
DEBUG 2022-02-08 17:11:37,047 replaced with: $150inplace_multiply.2 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=r.2, rhs=a.1, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-08 17:11:37,047 on stmt: r.1 = $150inplace_multiply.2
DEBUG 2022-02-08 17:11:37,047 on stmt: jump 154
DEBUG 2022-02-08 17:11:37,047 ==== SSA block rewrite pass on 154
DEBUG 2022-02-08 17:11:37,047 Running <numba.core.ssa._FixSSAVars object at 0x000001E9F7BE23A0>
DEBUG 2022-02-08 17:11:37,047 on stmt: $const156.1 = const(int, 1)
DEBUG 2022-02-08 17:11:37,047 on stmt: $158inplace_rshift.2 = inplace_binop(fn=<built-in function irshift>, immutable_fn=<built-in function rshift>, lhs=exp, rhs=$const156.1, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-08 17:11:37,047 on stmt: exp = $158inplace_rshift.2
DEBUG 2022-02-08 17:11:37,047 on stmt: $166inplace_multiply.5 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=a.1, rhs=a.1, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-08 17:11:37,047 on stmt: a.1 = $166inplace_multiply.5
DEBUG 2022-02-08 17:11:37,047 on stmt: jump 130
DEBUG 2022-02-08 17:11:37,047 ==== SSA block rewrite pass on 172
DEBUG 2022-02-08 17:11:37,047 Running <numba.core.ssa._FixSSAVars object at 0x000001E9F7BE23A0>
DEBUG 2022-02-08 17:11:37,047 on stmt: bool174 = global(bool: <class 'bool'>)
DEBUG 2022-02-08 17:11:37,047 on stmt: $174pred = call bool174(invert, func=bool174, args=(Var(invert, numbers.py:220),), kws=(), vararg=None, target=None)
DEBUG 2022-02-08 17:11:37,047 on stmt: branch $174pred, 176, 184
DEBUG 2022-02-08 17:11:37,047 ==== SSA block rewrite pass on 176
DEBUG 2022-02-08 17:11:37,047 Running <numba.core.ssa._FixSSAVars object at 0x000001E9F7BE23A0>
DEBUG 2022-02-08 17:11:37,047 on stmt: $const176.0 = const(float, 1.0)
DEBUG 2022-02-08 17:11:37,047 on stmt: $180binary_true_divide.2 = $const176.0 / r
DEBUG 2022-02-08 17:11:37,047 find_def var='r' stmt=$180binary_true_divide.2 = $const176.0 / r
DEBUG 2022-02-08 17:11:37,047 find_def_from_top label 176
DEBUG 2022-02-08 17:11:37,047 idom 172 from label 176
DEBUG 2022-02-08 17:11:37,047 find_def_from_bottom label 172
DEBUG 2022-02-08 17:11:37,047 find_def_from_top label 172
DEBUG 2022-02-08 17:11:37,047 idom 130 from label 172
DEBUG 2022-02-08 17:11:37,047 find_def_from_bottom label 130
DEBUG 2022-02-08 17:11:37,047 replaced with: $180binary_true_divide.2 = $const176.0 / r.2
DEBUG 2022-02-08 17:11:37,047 on stmt: $182return_value.3 = cast(value=$180binary_true_divide.2)
DEBUG 2022-02-08 17:11:37,047 on stmt: return $182return_value.3
DEBUG 2022-02-08 17:11:37,047 ==== SSA block rewrite pass on 184
DEBUG 2022-02-08 17:11:37,047 Running <numba.core.ssa._FixSSAVars object at 0x000001E9F7BE23A0>
DEBUG 2022-02-08 17:11:37,047 on stmt: $186return_value.1 = cast(value=r)
DEBUG 2022-02-08 17:11:37,047 find_def var='r' stmt=$186return_value.1 = cast(value=r)
DEBUG 2022-02-08 17:11:37,047 find_def_from_top label 184
DEBUG 2022-02-08 17:11:37,047 idom 172 from label 184
DEBUG 2022-02-08 17:11:37,047 find_def_from_bottom label 172
DEBUG 2022-02-08 17:11:37,047 find_def_from_top label 172
DEBUG 2022-02-08 17:11:37,055 idom 130 from label 172
DEBUG 2022-02-08 17:11:37,055 find_def_from_bottom label 130
DEBUG 2022-02-08 17:11:37,055 replaced with: $186return_value.1 = cast(value=r.2)
DEBUG 2022-02-08 17:11:37,055 on stmt: return $186return_value.1
DEBUG 2022-02-08 17:11:37,055 Fix SSA violator on var invert
DEBUG 2022-02-08 17:11:37,055 ==== SSA block rewrite pass on 0
DEBUG 2022-02-08 17:11:37,055 Running <numba.core.ssa._FreshVarHandler object at 0x000001E9F7BE2E20>
DEBUG 2022-02-08 17:11:37,055 on stmt: a = arg(0, name=a)
DEBUG 2022-02-08 17:11:37,055 on stmt: b = arg(1, name=b)
DEBUG 2022-02-08 17:11:37,055 on stmt: $2load_deref.0 = freevar(tp: float64)
DEBUG 2022-02-08 17:11:37,055 on stmt: $const4.1 = const(int, 1)
DEBUG 2022-02-08 17:11:37,055 on stmt: r = call $2load_deref.0($const4.1, func=$2load_deref.0, args=[Var($const4.1, numbers.py:217)], kws=(), vararg=None, target=None)
DEBUG 2022-02-08 17:11:37,055 on stmt: $10load_deref.3 = freevar(tp: float64)
DEBUG 2022-02-08 17:11:37,055 on stmt: a.1 = call $10load_deref.3(a, func=$10load_deref.3, args=[Var(a, numbers.py:217)], kws=(), vararg=None, target=None)
DEBUG 2022-02-08 17:11:37,055 on stmt: $const20.7 = const(int, 0)
DEBUG 2022-02-08 17:11:37,055 on stmt: $22compare_op.8 = b < $const20.7
DEBUG 2022-02-08 17:11:37,055 on stmt: bool24 = global(bool: <class 'bool'>)
DEBUG 2022-02-08 17:11:37,055 on stmt: $24pred = call bool24($22compare_op.8, func=bool24, args=(Var($22compare_op.8, numbers.py:219),), kws=(), vararg=None, target=None)
DEBUG 2022-02-08 17:11:37,055 on stmt: branch $24pred, 26, 98
DEBUG 2022-02-08 17:11:37,055 ==== SSA block rewrite pass on 26
DEBUG 2022-02-08 17:11:37,055 Running <numba.core.ssa._FreshVarHandler object at 0x000001E9F7BE2E20>
DEBUG 2022-02-08 17:11:37,055 on stmt: invert = const(bool, True)
DEBUG 2022-02-08 17:11:37,055 first assign: invert
DEBUG 2022-02-08 17:11:37,057 replaced with: invert = const(bool, True)
DEBUG 2022-02-08 17:11:37,057 on stmt: exp = unary(fn=<built-in function neg>, value=b)
DEBUG 2022-02-08 17:11:37,057 on stmt: $const38.4 = const(int, 0)
DEBUG 2022-02-08 17:11:37,057 on stmt: $40compare_op.5 = exp < $const38.4
DEBUG 2022-02-08 17:11:37,057 on stmt: bool42 = global(bool: <class 'bool'>)
DEBUG 2022-02-08 17:11:37,057 on stmt: $42pred = call bool42($40compare_op.5, func=bool42, args=(Var($40compare_op.5, numbers.py:222),), kws=(), vararg=None, target=None)
DEBUG 2022-02-08 17:11:37,057 on stmt: branch $42pred, 44, 48
DEBUG 2022-02-08 17:11:37,057 ==== SSA block rewrite pass on 44
DEBUG 2022-02-08 17:11:37,057 Running <numba.core.ssa._FreshVarHandler object at 0x000001E9F7BE2E20>
DEBUG 2022-02-08 17:11:37,057 on stmt: $44load_global.0 = global(OverflowError: <class 'OverflowError'>)
DEBUG 2022-02-08 17:11:37,057 on stmt: <static> raise <class 'OverflowError'>
DEBUG 2022-02-08 17:11:37,057 ==== SSA block rewrite pass on 48
DEBUG 2022-02-08 17:11:37,057 Running <numba.core.ssa._FreshVarHandler object at 0x000001E9F7BE2E20>
DEBUG 2022-02-08 17:11:37,057 on stmt: $48load_deref.0 = freevar(is_integer: False)
DEBUG 2022-02-08 17:11:37,057 on stmt: bool50 = global(bool: <class 'bool'>)
DEBUG 2022-02-08 17:11:37,057 on stmt: $50pred = call bool50($48load_deref.0, func=bool50, args=(Var($48load_deref.0, numbers.py:224),), kws=(), vararg=None, target=None)
DEBUG 2022-02-08 17:11:37,057 on stmt: jump 106
DEBUG 2022-02-08 17:11:37,057 ==== SSA block rewrite pass on 98
DEBUG 2022-02-08 17:11:37,057 Running <numba.core.ssa._FreshVarHandler object at 0x000001E9F7BE2E20>
DEBUG 2022-02-08 17:11:37,057 on stmt: invert = const(bool, False)
DEBUG 2022-02-08 17:11:37,057 replaced with: invert.1 = const(bool, False)
DEBUG 2022-02-08 17:11:37,057 on stmt: exp = b
DEBUG 2022-02-08 17:11:37,057 on stmt: jump 106
DEBUG 2022-02-08 17:11:37,057 ==== SSA block rewrite pass on 106
DEBUG 2022-02-08 17:11:37,057 Running <numba.core.ssa._FreshVarHandler object at 0x000001E9F7BE2E20>
DEBUG 2022-02-08 17:11:37,057 on stmt: $const108.1 = const(int, 65536)
DEBUG 2022-02-08 17:11:37,057 on stmt: $110compare_op.2 = exp > $const108.1
DEBUG 2022-02-08 17:11:37,057 on stmt: bool112 = global(bool: <class 'bool'>)
DEBUG 2022-02-08 17:11:37,057 on stmt: $112pred = call bool112($110compare_op.2, func=bool112, args=(Var($110compare_op.2, numbers.py:235),), kws=(), vararg=None, target=None)
DEBUG 2022-02-08 17:11:37,057 on stmt: branch $112pred, 114, 130
DEBUG 2022-02-08 17:11:37,057 ==== SSA block rewrite pass on 114
DEBUG 2022-02-08 17:11:37,057 Running <numba.core.ssa._FreshVarHandler object at 0x000001E9F7BE2E20>
DEBUG 2022-02-08 17:11:37,057 on stmt: $114load_global.0 = global(math: <module 'math' (built-in)>)
DEBUG 2022-02-08 17:11:37,057 on stmt: $116load_method.1 = getattr(value=$114load_global.0, attr=pow)
DEBUG 2022-02-08 17:11:37,057 on stmt: $120load_global.3 = global(float: <class 'float'>)
DEBUG 2022-02-08 17:11:37,057 on stmt: $124call_function.5 = call $120load_global.3(b, func=$120load_global.3, args=[Var(b, numbers.py:217)], kws=(), vararg=None, target=None)
DEBUG 2022-02-08 17:11:37,057 on stmt: $126call_method.6 = call $116load_method.1(a.1, $124call_function.5, func=$116load_method.1, args=[Var(a.1, numbers.py:218), Var($124call_function.5, numbers.py:237)], kws=(), vararg=None, target=None)
DEBUG 2022-02-08 17:11:37,057 on stmt: $128return_value.7 = cast(value=$126call_method.6)
DEBUG 2022-02-08 17:11:37,057 on stmt: return $128return_value.7
DEBUG 2022-02-08 17:11:37,057 ==== SSA block rewrite pass on 130
DEBUG 2022-02-08 17:11:37,057 Running <numba.core.ssa._FreshVarHandler object at 0x000001E9F7BE2E20>
DEBUG 2022-02-08 17:11:37,057 on stmt: r.2 = phi(incoming_values=[Var(r, numbers.py:217), Var(r.3, numbers.py:240)], incoming_blocks=[106, 154])
DEBUG 2022-02-08 17:11:37,057 on stmt: $const132.1 = const(int, 0)
DEBUG 2022-02-08 17:11:37,057 on stmt: $134compare_op.2 = exp != $const132.1
DEBUG 2022-02-08 17:11:37,057 on stmt: bool136 = global(bool: <class 'bool'>)
DEBUG 2022-02-08 17:11:37,057 on stmt: $136pred = call bool136($134compare_op.2, func=bool136, args=(Var($134compare_op.2, numbers.py:238),), kws=(), vararg=None, target=None)
DEBUG 2022-02-08 17:11:37,057 on stmt: branch $136pred, 138, 172
DEBUG 2022-02-08 17:11:37,057 ==== SSA block rewrite pass on 138
DEBUG 2022-02-08 17:11:37,057 Running <numba.core.ssa._FreshVarHandler object at 0x000001E9F7BE2E20>
DEBUG 2022-02-08 17:11:37,057 on stmt: $const140.1 = const(int, 1)
DEBUG 2022-02-08 17:11:37,057 on stmt: $142binary_and.2 = exp & $const140.1
DEBUG 2022-02-08 17:11:37,057 on stmt: bool144 = global(bool: <class 'bool'>)
DEBUG 2022-02-08 17:11:37,057 on stmt: $144pred = call bool144($142binary_and.2, func=bool144, args=(Var($142binary_and.2, numbers.py:239),), kws=(), vararg=None, target=None)
DEBUG 2022-02-08 17:11:37,057 on stmt: branch $144pred, 146, 154
DEBUG 2022-02-08 17:11:37,057 ==== SSA block rewrite pass on 146
DEBUG 2022-02-08 17:11:37,057 Running <numba.core.ssa._FreshVarHandler object at 0x000001E9F7BE2E20>
DEBUG 2022-02-08 17:11:37,057 on stmt: $150inplace_multiply.2 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=r.2, rhs=a.1, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-08 17:11:37,057 on stmt: r.1 = $150inplace_multiply.2
DEBUG 2022-02-08 17:11:37,057 on stmt: jump 154
DEBUG 2022-02-08 17:11:37,057 ==== SSA block rewrite pass on 154
DEBUG 2022-02-08 17:11:37,057 Running <numba.core.ssa._FreshVarHandler object at 0x000001E9F7BE2E20>
DEBUG 2022-02-08 17:11:37,057 on stmt: r.3 = phi(incoming_values=[Var(r.2, numbers.py:240), Var(r.1, numbers.py:240)], incoming_blocks=[138, 146])
DEBUG 2022-02-08 17:11:37,057 on stmt: $const156.1 = const(int, 1)
DEBUG 2022-02-08 17:11:37,057 on stmt: $158inplace_rshift.2 = inplace_binop(fn=<built-in function irshift>, immutable_fn=<built-in function rshift>, lhs=exp, rhs=$const156.1, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-08 17:11:37,057 on stmt: exp = $158inplace_rshift.2
DEBUG 2022-02-08 17:11:37,057 on stmt: $166inplace_multiply.5 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=a.1, rhs=a.1, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-08 17:11:37,057 on stmt: a.1 = $166inplace_multiply.5
DEBUG 2022-02-08 17:11:37,057 on stmt: jump 130
DEBUG 2022-02-08 17:11:37,057 ==== SSA block rewrite pass on 172
DEBUG 2022-02-08 17:11:37,057 Running <numba.core.ssa._FreshVarHandler object at 0x000001E9F7BE2E20>
DEBUG 2022-02-08 17:11:37,057 on stmt: bool174 = global(bool: <class 'bool'>)
DEBUG 2022-02-08 17:11:37,057 on stmt: $174pred = call bool174(invert, func=bool174, args=(Var(invert, numbers.py:220),), kws=(), vararg=None, target=None)
DEBUG 2022-02-08 17:11:37,057 on stmt: branch $174pred, 176, 184
DEBUG 2022-02-08 17:11:37,057 ==== SSA block rewrite pass on 176
DEBUG 2022-02-08 17:11:37,057 Running <numba.core.ssa._FreshVarHandler object at 0x000001E9F7BE2E20>
DEBUG 2022-02-08 17:11:37,057 on stmt: $const176.0 = const(float, 1.0)
DEBUG 2022-02-08 17:11:37,057 on stmt: $180binary_true_divide.2 = $const176.0 / r.2
DEBUG 2022-02-08 17:11:37,057 on stmt: $182return_value.3 = cast(value=$180binary_true_divide.2)
DEBUG 2022-02-08 17:11:37,057 on stmt: return $182return_value.3
DEBUG 2022-02-08 17:11:37,057 ==== SSA block rewrite pass on 184
DEBUG 2022-02-08 17:11:37,057 Running <numba.core.ssa._FreshVarHandler object at 0x000001E9F7BE2E20>
DEBUG 2022-02-08 17:11:37,057 on stmt: $186return_value.1 = cast(value=r.2)
DEBUG 2022-02-08 17:11:37,057 on stmt: return $186return_value.1
DEBUG 2022-02-08 17:11:37,057 Replaced assignments: defaultdict(<class 'list'>,
            {26: [<numba.core.ir.Assign object at 0x000001E9F7BE2880>],
             98: [<numba.core.ir.Assign object at 0x000001E9F7BE26A0>]})
DEBUG 2022-02-08 17:11:37,057 ==== SSA block rewrite pass on 0
DEBUG 2022-02-08 17:11:37,057 Running <numba.core.ssa._FixSSAVars object at 0x000001E9F7BE21F0>
DEBUG 2022-02-08 17:11:37,057 on stmt: a = arg(0, name=a)
DEBUG 2022-02-08 17:11:37,057 on stmt: b = arg(1, name=b)
DEBUG 2022-02-08 17:11:37,057 on stmt: $2load_deref.0 = freevar(tp: float64)
DEBUG 2022-02-08 17:11:37,057 on stmt: $const4.1 = const(int, 1)
DEBUG 2022-02-08 17:11:37,057 on stmt: r = call $2load_deref.0($const4.1, func=$2load_deref.0, args=[Var($const4.1, numbers.py:217)], kws=(), vararg=None, target=None)
DEBUG 2022-02-08 17:11:37,057 on stmt: $10load_deref.3 = freevar(tp: float64)
DEBUG 2022-02-08 17:11:37,057 on stmt: a.1 = call $10load_deref.3(a, func=$10load_deref.3, args=[Var(a, numbers.py:217)], kws=(), vararg=None, target=None)
DEBUG 2022-02-08 17:11:37,065 on stmt: $const20.7 = const(int, 0)
DEBUG 2022-02-08 17:11:37,065 on stmt: $22compare_op.8 = b < $const20.7
DEBUG 2022-02-08 17:11:37,065 on stmt: bool24 = global(bool: <class 'bool'>)
DEBUG 2022-02-08 17:11:37,065 on stmt: $24pred = call bool24($22compare_op.8, func=bool24, args=(Var($22compare_op.8, numbers.py:219),), kws=(), vararg=None, target=None)
DEBUG 2022-02-08 17:11:37,065 on stmt: branch $24pred, 26, 98
DEBUG 2022-02-08 17:11:37,065 ==== SSA block rewrite pass on 26
DEBUG 2022-02-08 17:11:37,065 Running <numba.core.ssa._FixSSAVars object at 0x000001E9F7BE21F0>
DEBUG 2022-02-08 17:11:37,065 on stmt: invert = const(bool, True)
DEBUG 2022-02-08 17:11:37,065 on stmt: exp = unary(fn=<built-in function neg>, value=b)
DEBUG 2022-02-08 17:11:37,065 on stmt: $const38.4 = const(int, 0)
DEBUG 2022-02-08 17:11:37,065 on stmt: $40compare_op.5 = exp < $const38.4
DEBUG 2022-02-08 17:11:37,065 on stmt: bool42 = global(bool: <class 'bool'>)
DEBUG 2022-02-08 17:11:37,065 on stmt: $42pred = call bool42($40compare_op.5, func=bool42, args=(Var($40compare_op.5, numbers.py:222),), kws=(), vararg=None, target=None)
DEBUG 2022-02-08 17:11:37,065 on stmt: branch $42pred, 44, 48
DEBUG 2022-02-08 17:11:37,065 ==== SSA block rewrite pass on 44
DEBUG 2022-02-08 17:11:37,065 Running <numba.core.ssa._FixSSAVars object at 0x000001E9F7BE21F0>
DEBUG 2022-02-08 17:11:37,065 on stmt: $44load_global.0 = global(OverflowError: <class 'OverflowError'>)
DEBUG 2022-02-08 17:11:37,065 on stmt: <static> raise <class 'OverflowError'>
DEBUG 2022-02-08 17:11:37,065 ==== SSA block rewrite pass on 48
DEBUG 2022-02-08 17:11:37,065 Running <numba.core.ssa._FixSSAVars object at 0x000001E9F7BE21F0>
DEBUG 2022-02-08 17:11:37,065 on stmt: $48load_deref.0 = freevar(is_integer: False)
DEBUG 2022-02-08 17:11:37,065 on stmt: bool50 = global(bool: <class 'bool'>)
DEBUG 2022-02-08 17:11:37,065 on stmt: $50pred = call bool50($48load_deref.0, func=bool50, args=(Var($48load_deref.0, numbers.py:224),), kws=(), vararg=None, target=None)
DEBUG 2022-02-08 17:11:37,067 on stmt: jump 106
DEBUG 2022-02-08 17:11:37,067 ==== SSA block rewrite pass on 98
DEBUG 2022-02-08 17:11:37,067 Running <numba.core.ssa._FixSSAVars object at 0x000001E9F7BE21F0>
DEBUG 2022-02-08 17:11:37,067 on stmt: invert.1 = const(bool, False)
DEBUG 2022-02-08 17:11:37,067 on stmt: exp = b
DEBUG 2022-02-08 17:11:37,067 on stmt: jump 106
DEBUG 2022-02-08 17:11:37,067 ==== SSA block rewrite pass on 106
DEBUG 2022-02-08 17:11:37,067 Running <numba.core.ssa._FixSSAVars object at 0x000001E9F7BE21F0>
DEBUG 2022-02-08 17:11:37,067 on stmt: $const108.1 = const(int, 65536)
DEBUG 2022-02-08 17:11:37,067 on stmt: $110compare_op.2 = exp > $const108.1
DEBUG 2022-02-08 17:11:37,067 on stmt: bool112 = global(bool: <class 'bool'>)
DEBUG 2022-02-08 17:11:37,067 on stmt: $112pred = call bool112($110compare_op.2, func=bool112, args=(Var($110compare_op.2, numbers.py:235),), kws=(), vararg=None, target=None)
DEBUG 2022-02-08 17:11:37,067 on stmt: branch $112pred, 114, 130
DEBUG 2022-02-08 17:11:37,067 ==== SSA block rewrite pass on 114
DEBUG 2022-02-08 17:11:37,067 Running <numba.core.ssa._FixSSAVars object at 0x000001E9F7BE21F0>
DEBUG 2022-02-08 17:11:37,067 on stmt: $114load_global.0 = global(math: <module 'math' (built-in)>)
DEBUG 2022-02-08 17:11:37,067 on stmt: $116load_method.1 = getattr(value=$114load_global.0, attr=pow)
DEBUG 2022-02-08 17:11:37,067 on stmt: $120load_global.3 = global(float: <class 'float'>)
DEBUG 2022-02-08 17:11:37,067 on stmt: $124call_function.5 = call $120load_global.3(b, func=$120load_global.3, args=[Var(b, numbers.py:217)], kws=(), vararg=None, target=None)
DEBUG 2022-02-08 17:11:37,067 on stmt: $126call_method.6 = call $116load_method.1(a.1, $124call_function.5, func=$116load_method.1, args=[Var(a.1, numbers.py:218), Var($124call_function.5, numbers.py:237)], kws=(), vararg=None, target=None)
DEBUG 2022-02-08 17:11:37,067 on stmt: $128return_value.7 = cast(value=$126call_method.6)
DEBUG 2022-02-08 17:11:37,067 on stmt: return $128return_value.7
DEBUG 2022-02-08 17:11:37,067 ==== SSA block rewrite pass on 130
DEBUG 2022-02-08 17:11:37,067 Running <numba.core.ssa._FixSSAVars object at 0x000001E9F7BE21F0>
DEBUG 2022-02-08 17:11:37,067 on stmt: r.2 = phi(incoming_values=[Var(r, numbers.py:217), Var(r.3, numbers.py:240)], incoming_blocks=[106, 154])
DEBUG 2022-02-08 17:11:37,067 on stmt: $const132.1 = const(int, 0)
DEBUG 2022-02-08 17:11:37,067 on stmt: $134compare_op.2 = exp != $const132.1
DEBUG 2022-02-08 17:11:37,067 on stmt: bool136 = global(bool: <class 'bool'>)
DEBUG 2022-02-08 17:11:37,067 on stmt: $136pred = call bool136($134compare_op.2, func=bool136, args=(Var($134compare_op.2, numbers.py:238),), kws=(), vararg=None, target=None)
DEBUG 2022-02-08 17:11:37,067 on stmt: branch $136pred, 138, 172
DEBUG 2022-02-08 17:11:37,067 ==== SSA block rewrite pass on 138
DEBUG 2022-02-08 17:11:37,067 Running <numba.core.ssa._FixSSAVars object at 0x000001E9F7BE21F0>
DEBUG 2022-02-08 17:11:37,067 on stmt: $const140.1 = const(int, 1)
DEBUG 2022-02-08 17:11:37,067 on stmt: $142binary_and.2 = exp & $const140.1
DEBUG 2022-02-08 17:11:37,067 on stmt: bool144 = global(bool: <class 'bool'>)
DEBUG 2022-02-08 17:11:37,067 on stmt: $144pred = call bool144($142binary_and.2, func=bool144, args=(Var($142binary_and.2, numbers.py:239),), kws=(), vararg=None, target=None)
DEBUG 2022-02-08 17:11:37,067 on stmt: branch $144pred, 146, 154
DEBUG 2022-02-08 17:11:37,067 ==== SSA block rewrite pass on 146
DEBUG 2022-02-08 17:11:37,067 Running <numba.core.ssa._FixSSAVars object at 0x000001E9F7BE21F0>
DEBUG 2022-02-08 17:11:37,067 on stmt: $150inplace_multiply.2 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=r.2, rhs=a.1, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-08 17:11:37,067 on stmt: r.1 = $150inplace_multiply.2
DEBUG 2022-02-08 17:11:37,067 on stmt: jump 154
DEBUG 2022-02-08 17:11:37,067 ==== SSA block rewrite pass on 154
DEBUG 2022-02-08 17:11:37,067 Running <numba.core.ssa._FixSSAVars object at 0x000001E9F7BE21F0>
DEBUG 2022-02-08 17:11:37,067 on stmt: r.3 = phi(incoming_values=[Var(r.2, numbers.py:240), Var(r.1, numbers.py:240)], incoming_blocks=[138, 146])
DEBUG 2022-02-08 17:11:37,067 on stmt: $const156.1 = const(int, 1)
DEBUG 2022-02-08 17:11:37,067 on stmt: $158inplace_rshift.2 = inplace_binop(fn=<built-in function irshift>, immutable_fn=<built-in function rshift>, lhs=exp, rhs=$const156.1, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-08 17:11:37,067 on stmt: exp = $158inplace_rshift.2
DEBUG 2022-02-08 17:11:37,067 on stmt: $166inplace_multiply.5 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=a.1, rhs=a.1, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-08 17:11:37,067 on stmt: a.1 = $166inplace_multiply.5
DEBUG 2022-02-08 17:11:37,067 on stmt: jump 130
DEBUG 2022-02-08 17:11:37,067 ==== SSA block rewrite pass on 172
DEBUG 2022-02-08 17:11:37,067 Running <numba.core.ssa._FixSSAVars object at 0x000001E9F7BE21F0>
DEBUG 2022-02-08 17:11:37,067 on stmt: bool174 = global(bool: <class 'bool'>)
DEBUG 2022-02-08 17:11:37,067 on stmt: $174pred = call bool174(invert, func=bool174, args=(Var(invert, numbers.py:220),), kws=(), vararg=None, target=None)
DEBUG 2022-02-08 17:11:37,067 find_def var='invert' stmt=$174pred = call bool174(invert, func=bool174, args=(Var(invert, numbers.py:220),), kws=(), vararg=None, target=None)
DEBUG 2022-02-08 17:11:37,067 find_def_from_top label 172
DEBUG 2022-02-08 17:11:37,067 idom 130 from label 172
DEBUG 2022-02-08 17:11:37,067 find_def_from_bottom label 130
DEBUG 2022-02-08 17:11:37,067 find_def_from_top label 130
DEBUG 2022-02-08 17:11:37,067 idom 106 from label 130
DEBUG 2022-02-08 17:11:37,067 find_def_from_bottom label 106
DEBUG 2022-02-08 17:11:37,067 find_def_from_top label 106
DEBUG 2022-02-08 17:11:37,067 insert phi node invert.2 = phi(incoming_values=[], incoming_blocks=[]) at 106
DEBUG 2022-02-08 17:11:37,067 find_def_from_bottom label 48
DEBUG 2022-02-08 17:11:37,067 find_def_from_top label 48
DEBUG 2022-02-08 17:11:37,067 idom 26 from label 48
DEBUG 2022-02-08 17:11:37,067 find_def_from_bottom label 26
DEBUG 2022-02-08 17:11:37,067 incoming_def invert = const(bool, True)
DEBUG 2022-02-08 17:11:37,067 find_def_from_bottom label 98
DEBUG 2022-02-08 17:11:37,067 incoming_def invert.1 = const(bool, False)
DEBUG 2022-02-08 17:11:37,067 replaced with: $174pred = call bool174(invert.2, func=bool174, args=(Var(invert.2, numbers.py:244),), kws=(), vararg=None, target=None)
DEBUG 2022-02-08 17:11:37,067 on stmt: branch $174pred, 176, 184
DEBUG 2022-02-08 17:11:37,067 ==== SSA block rewrite pass on 176
DEBUG 2022-02-08 17:11:37,067 Running <numba.core.ssa._FixSSAVars object at 0x000001E9F7BE21F0>
DEBUG 2022-02-08 17:11:37,067 on stmt: $const176.0 = const(float, 1.0)
DEBUG 2022-02-08 17:11:37,067 on stmt: $180binary_true_divide.2 = $const176.0 / r.2
DEBUG 2022-02-08 17:11:37,067 on stmt: $182return_value.3 = cast(value=$180binary_true_divide.2)
DEBUG 2022-02-08 17:11:37,067 on stmt: return $182return_value.3
DEBUG 2022-02-08 17:11:37,067 ==== SSA block rewrite pass on 184
DEBUG 2022-02-08 17:11:37,067 Running <numba.core.ssa._FixSSAVars object at 0x000001E9F7BE21F0>
DEBUG 2022-02-08 17:11:37,067 on stmt: $186return_value.1 = cast(value=r.2)
DEBUG 2022-02-08 17:11:37,067 on stmt: return $186return_value.1
DEBUG 2022-02-08 17:11:37,067 Fix SSA violator on var a.1
DEBUG 2022-02-08 17:11:37,067 ==== SSA block rewrite pass on 0
DEBUG 2022-02-08 17:11:37,067 Running <numba.core.ssa._FreshVarHandler object at 0x000001E9F7BE2790>
DEBUG 2022-02-08 17:11:37,067 on stmt: a = arg(0, name=a)
DEBUG 2022-02-08 17:11:37,067 on stmt: b = arg(1, name=b)
DEBUG 2022-02-08 17:11:37,067 on stmt: $2load_deref.0 = freevar(tp: float64)
DEBUG 2022-02-08 17:11:37,067 on stmt: $const4.1 = const(int, 1)
DEBUG 2022-02-08 17:11:37,067 on stmt: r = call $2load_deref.0($const4.1, func=$2load_deref.0, args=[Var($const4.1, numbers.py:217)], kws=(), vararg=None, target=None)
DEBUG 2022-02-08 17:11:37,075 on stmt: $10load_deref.3 = freevar(tp: float64)
DEBUG 2022-02-08 17:11:37,075 on stmt: a.1 = call $10load_deref.3(a, func=$10load_deref.3, args=[Var(a, numbers.py:217)], kws=(), vararg=None, target=None)
DEBUG 2022-02-08 17:11:37,075 first assign: a.1
DEBUG 2022-02-08 17:11:37,075 replaced with: a.1 = call $10load_deref.3(a, func=$10load_deref.3, args=[Var(a, numbers.py:217)], kws=(), vararg=None, target=None)
DEBUG 2022-02-08 17:11:37,075 on stmt: $const20.7 = const(int, 0)
DEBUG 2022-02-08 17:11:37,075 on stmt: $22compare_op.8 = b < $const20.7
DEBUG 2022-02-08 17:11:37,075 on stmt: bool24 = global(bool: <class 'bool'>)
DEBUG 2022-02-08 17:11:37,075 on stmt: $24pred = call bool24($22compare_op.8, func=bool24, args=(Var($22compare_op.8, numbers.py:219),), kws=(), vararg=None, target=None)
DEBUG 2022-02-08 17:11:37,075 on stmt: branch $24pred, 26, 98
DEBUG 2022-02-08 17:11:37,075 ==== SSA block rewrite pass on 26
DEBUG 2022-02-08 17:11:37,075 Running <numba.core.ssa._FreshVarHandler object at 0x000001E9F7BE2790>
DEBUG 2022-02-08 17:11:37,075 on stmt: invert = const(bool, True)
DEBUG 2022-02-08 17:11:37,075 on stmt: exp = unary(fn=<built-in function neg>, value=b)
DEBUG 2022-02-08 17:11:37,075 on stmt: $const38.4 = const(int, 0)
DEBUG 2022-02-08 17:11:37,075 on stmt: $40compare_op.5 = exp < $const38.4
DEBUG 2022-02-08 17:11:37,075 on stmt: bool42 = global(bool: <class 'bool'>)
DEBUG 2022-02-08 17:11:37,075 on stmt: $42pred = call bool42($40compare_op.5, func=bool42, args=(Var($40compare_op.5, numbers.py:222),), kws=(), vararg=None, target=None)
DEBUG 2022-02-08 17:11:37,075 on stmt: branch $42pred, 44, 48
DEBUG 2022-02-08 17:11:37,077 ==== SSA block rewrite pass on 44
DEBUG 2022-02-08 17:11:37,077 Running <numba.core.ssa._FreshVarHandler object at 0x000001E9F7BE2790>
DEBUG 2022-02-08 17:11:37,077 on stmt: $44load_global.0 = global(OverflowError: <class 'OverflowError'>)
DEBUG 2022-02-08 17:11:37,077 on stmt: <static> raise <class 'OverflowError'>
DEBUG 2022-02-08 17:11:37,077 ==== SSA block rewrite pass on 48
DEBUG 2022-02-08 17:11:37,077 Running <numba.core.ssa._FreshVarHandler object at 0x000001E9F7BE2790>
DEBUG 2022-02-08 17:11:37,077 on stmt: $48load_deref.0 = freevar(is_integer: False)
DEBUG 2022-02-08 17:11:37,077 on stmt: bool50 = global(bool: <class 'bool'>)
DEBUG 2022-02-08 17:11:37,077 on stmt: $50pred = call bool50($48load_deref.0, func=bool50, args=(Var($48load_deref.0, numbers.py:224),), kws=(), vararg=None, target=None)
DEBUG 2022-02-08 17:11:37,077 on stmt: jump 106
DEBUG 2022-02-08 17:11:37,077 ==== SSA block rewrite pass on 98
DEBUG 2022-02-08 17:11:37,077 Running <numba.core.ssa._FreshVarHandler object at 0x000001E9F7BE2790>
DEBUG 2022-02-08 17:11:37,077 on stmt: invert.1 = const(bool, False)
DEBUG 2022-02-08 17:11:37,077 on stmt: exp = b
DEBUG 2022-02-08 17:11:37,077 on stmt: jump 106
DEBUG 2022-02-08 17:11:37,077 ==== SSA block rewrite pass on 106
DEBUG 2022-02-08 17:11:37,077 Running <numba.core.ssa._FreshVarHandler object at 0x000001E9F7BE2790>
DEBUG 2022-02-08 17:11:37,077 on stmt: invert.2 = phi(incoming_values=[Var(invert, numbers.py:220), Var(invert.1, numbers.py:233)], incoming_blocks=[48, 98])
DEBUG 2022-02-08 17:11:37,077 on stmt: $const108.1 = const(int, 65536)
DEBUG 2022-02-08 17:11:37,077 on stmt: $110compare_op.2 = exp > $const108.1
DEBUG 2022-02-08 17:11:37,077 on stmt: bool112 = global(bool: <class 'bool'>)
DEBUG 2022-02-08 17:11:37,077 on stmt: $112pred = call bool112($110compare_op.2, func=bool112, args=(Var($110compare_op.2, numbers.py:235),), kws=(), vararg=None, target=None)
DEBUG 2022-02-08 17:11:37,077 on stmt: branch $112pred, 114, 130
DEBUG 2022-02-08 17:11:37,077 ==== SSA block rewrite pass on 114
DEBUG 2022-02-08 17:11:37,077 Running <numba.core.ssa._FreshVarHandler object at 0x000001E9F7BE2790>
DEBUG 2022-02-08 17:11:37,077 on stmt: $114load_global.0 = global(math: <module 'math' (built-in)>)
DEBUG 2022-02-08 17:11:37,077 on stmt: $116load_method.1 = getattr(value=$114load_global.0, attr=pow)
DEBUG 2022-02-08 17:11:37,077 on stmt: $120load_global.3 = global(float: <class 'float'>)
DEBUG 2022-02-08 17:11:37,077 on stmt: $124call_function.5 = call $120load_global.3(b, func=$120load_global.3, args=[Var(b, numbers.py:217)], kws=(), vararg=None, target=None)
DEBUG 2022-02-08 17:11:37,077 on stmt: $126call_method.6 = call $116load_method.1(a.1, $124call_function.5, func=$116load_method.1, args=[Var(a.1, numbers.py:218), Var($124call_function.5, numbers.py:237)], kws=(), vararg=None, target=None)
DEBUG 2022-02-08 17:11:37,077 on stmt: $128return_value.7 = cast(value=$126call_method.6)
DEBUG 2022-02-08 17:11:37,077 on stmt: return $128return_value.7
DEBUG 2022-02-08 17:11:37,077 ==== SSA block rewrite pass on 130
DEBUG 2022-02-08 17:11:37,077 Running <numba.core.ssa._FreshVarHandler object at 0x000001E9F7BE2790>
DEBUG 2022-02-08 17:11:37,077 on stmt: r.2 = phi(incoming_values=[Var(r, numbers.py:217), Var(r.3, numbers.py:240)], incoming_blocks=[106, 154])
DEBUG 2022-02-08 17:11:37,077 on stmt: $const132.1 = const(int, 0)
DEBUG 2022-02-08 17:11:37,077 on stmt: $134compare_op.2 = exp != $const132.1
DEBUG 2022-02-08 17:11:37,077 on stmt: bool136 = global(bool: <class 'bool'>)
DEBUG 2022-02-08 17:11:37,077 on stmt: $136pred = call bool136($134compare_op.2, func=bool136, args=(Var($134compare_op.2, numbers.py:238),), kws=(), vararg=None, target=None)
DEBUG 2022-02-08 17:11:37,077 on stmt: branch $136pred, 138, 172
DEBUG 2022-02-08 17:11:37,077 ==== SSA block rewrite pass on 138
DEBUG 2022-02-08 17:11:37,077 Running <numba.core.ssa._FreshVarHandler object at 0x000001E9F7BE2790>
DEBUG 2022-02-08 17:11:37,077 on stmt: $const140.1 = const(int, 1)
DEBUG 2022-02-08 17:11:37,077 on stmt: $142binary_and.2 = exp & $const140.1
DEBUG 2022-02-08 17:11:37,077 on stmt: bool144 = global(bool: <class 'bool'>)
DEBUG 2022-02-08 17:11:37,077 on stmt: $144pred = call bool144($142binary_and.2, func=bool144, args=(Var($142binary_and.2, numbers.py:239),), kws=(), vararg=None, target=None)
DEBUG 2022-02-08 17:11:37,077 on stmt: branch $144pred, 146, 154
DEBUG 2022-02-08 17:11:37,077 ==== SSA block rewrite pass on 146
DEBUG 2022-02-08 17:11:37,077 Running <numba.core.ssa._FreshVarHandler object at 0x000001E9F7BE2790>
DEBUG 2022-02-08 17:11:37,077 on stmt: $150inplace_multiply.2 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=r.2, rhs=a.1, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-08 17:11:37,077 on stmt: r.1 = $150inplace_multiply.2
DEBUG 2022-02-08 17:11:37,077 on stmt: jump 154
DEBUG 2022-02-08 17:11:37,077 ==== SSA block rewrite pass on 154
DEBUG 2022-02-08 17:11:37,077 Running <numba.core.ssa._FreshVarHandler object at 0x000001E9F7BE2790>
DEBUG 2022-02-08 17:11:37,077 on stmt: r.3 = phi(incoming_values=[Var(r.2, numbers.py:240), Var(r.1, numbers.py:240)], incoming_blocks=[138, 146])
DEBUG 2022-02-08 17:11:37,077 on stmt: $const156.1 = const(int, 1)
DEBUG 2022-02-08 17:11:37,077 on stmt: $158inplace_rshift.2 = inplace_binop(fn=<built-in function irshift>, immutable_fn=<built-in function rshift>, lhs=exp, rhs=$const156.1, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-08 17:11:37,077 on stmt: exp = $158inplace_rshift.2
DEBUG 2022-02-08 17:11:37,077 on stmt: $166inplace_multiply.5 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=a.1, rhs=a.1, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-08 17:11:37,077 on stmt: a.1 = $166inplace_multiply.5
DEBUG 2022-02-08 17:11:37,077 replaced with: a.1.1 = $166inplace_multiply.5
DEBUG 2022-02-08 17:11:37,077 on stmt: jump 130
DEBUG 2022-02-08 17:11:37,077 ==== SSA block rewrite pass on 172
DEBUG 2022-02-08 17:11:37,077 Running <numba.core.ssa._FreshVarHandler object at 0x000001E9F7BE2790>
DEBUG 2022-02-08 17:11:37,077 on stmt: bool174 = global(bool: <class 'bool'>)
DEBUG 2022-02-08 17:11:37,077 on stmt: $174pred = call bool174(invert.2, func=bool174, args=(Var(invert.2, numbers.py:244),), kws=(), vararg=None, target=None)
DEBUG 2022-02-08 17:11:37,077 on stmt: branch $174pred, 176, 184
DEBUG 2022-02-08 17:11:37,077 ==== SSA block rewrite pass on 176
DEBUG 2022-02-08 17:11:37,077 Running <numba.core.ssa._FreshVarHandler object at 0x000001E9F7BE2790>
DEBUG 2022-02-08 17:11:37,077 on stmt: $const176.0 = const(float, 1.0)
DEBUG 2022-02-08 17:11:37,077 on stmt: $180binary_true_divide.2 = $const176.0 / r.2
DEBUG 2022-02-08 17:11:37,077 on stmt: $182return_value.3 = cast(value=$180binary_true_divide.2)
DEBUG 2022-02-08 17:11:37,077 on stmt: return $182return_value.3
DEBUG 2022-02-08 17:11:37,077 ==== SSA block rewrite pass on 184
DEBUG 2022-02-08 17:11:37,077 Running <numba.core.ssa._FreshVarHandler object at 0x000001E9F7BE2790>
DEBUG 2022-02-08 17:11:37,077 on stmt: $186return_value.1 = cast(value=r.2)
DEBUG 2022-02-08 17:11:37,077 on stmt: return $186return_value.1
DEBUG 2022-02-08 17:11:37,077 Replaced assignments: defaultdict(<class 'list'>,
            {0: [<numba.core.ir.Assign object at 0x000001E9F7BE2F70>],
             154: [<numba.core.ir.Assign object at 0x000001E9F7B8BBB0>]})
DEBUG 2022-02-08 17:11:37,077 ==== SSA block rewrite pass on 0
DEBUG 2022-02-08 17:11:37,077 Running <numba.core.ssa._FixSSAVars object at 0x000001E9F7BE25E0>
DEBUG 2022-02-08 17:11:37,077 on stmt: a = arg(0, name=a)
DEBUG 2022-02-08 17:11:37,077 on stmt: b = arg(1, name=b)
DEBUG 2022-02-08 17:11:37,077 on stmt: $2load_deref.0 = freevar(tp: float64)
DEBUG 2022-02-08 17:11:37,077 on stmt: $const4.1 = const(int, 1)
DEBUG 2022-02-08 17:11:37,077 on stmt: r = call $2load_deref.0($const4.1, func=$2load_deref.0, args=[Var($const4.1, numbers.py:217)], kws=(), vararg=None, target=None)
DEBUG 2022-02-08 17:11:37,077 on stmt: $10load_deref.3 = freevar(tp: float64)
DEBUG 2022-02-08 17:11:37,077 on stmt: a.1 = call $10load_deref.3(a, func=$10load_deref.3, args=[Var(a, numbers.py:217)], kws=(), vararg=None, target=None)
DEBUG 2022-02-08 17:11:37,085 on stmt: $const20.7 = const(int, 0)
DEBUG 2022-02-08 17:11:37,085 on stmt: $22compare_op.8 = b < $const20.7
DEBUG 2022-02-08 17:11:37,085 on stmt: bool24 = global(bool: <class 'bool'>)
DEBUG 2022-02-08 17:11:37,085 on stmt: $24pred = call bool24($22compare_op.8, func=bool24, args=(Var($22compare_op.8, numbers.py:219),), kws=(), vararg=None, target=None)
DEBUG 2022-02-08 17:11:37,085 on stmt: branch $24pred, 26, 98
DEBUG 2022-02-08 17:11:37,085 ==== SSA block rewrite pass on 26
DEBUG 2022-02-08 17:11:37,085 Running <numba.core.ssa._FixSSAVars object at 0x000001E9F7BE25E0>
DEBUG 2022-02-08 17:11:37,085 on stmt: invert = const(bool, True)
DEBUG 2022-02-08 17:11:37,085 on stmt: exp = unary(fn=<built-in function neg>, value=b)
DEBUG 2022-02-08 17:11:37,085 on stmt: $const38.4 = const(int, 0)
DEBUG 2022-02-08 17:11:37,085 on stmt: $40compare_op.5 = exp < $const38.4
DEBUG 2022-02-08 17:11:37,085 on stmt: bool42 = global(bool: <class 'bool'>)
DEBUG 2022-02-08 17:11:37,085 on stmt: $42pred = call bool42($40compare_op.5, func=bool42, args=(Var($40compare_op.5, numbers.py:222),), kws=(), vararg=None, target=None)
DEBUG 2022-02-08 17:11:37,085 on stmt: branch $42pred, 44, 48
DEBUG 2022-02-08 17:11:37,085 ==== SSA block rewrite pass on 44
DEBUG 2022-02-08 17:11:37,085 Running <numba.core.ssa._FixSSAVars object at 0x000001E9F7BE25E0>
DEBUG 2022-02-08 17:11:37,085 on stmt: $44load_global.0 = global(OverflowError: <class 'OverflowError'>)
DEBUG 2022-02-08 17:11:37,085 on stmt: <static> raise <class 'OverflowError'>
DEBUG 2022-02-08 17:11:37,085 ==== SSA block rewrite pass on 48
DEBUG 2022-02-08 17:11:37,085 Running <numba.core.ssa._FixSSAVars object at 0x000001E9F7BE25E0>
DEBUG 2022-02-08 17:11:37,085 on stmt: $48load_deref.0 = freevar(is_integer: False)
DEBUG 2022-02-08 17:11:37,085 on stmt: bool50 = global(bool: <class 'bool'>)
DEBUG 2022-02-08 17:11:37,085 on stmt: $50pred = call bool50($48load_deref.0, func=bool50, args=(Var($48load_deref.0, numbers.py:224),), kws=(), vararg=None, target=None)
DEBUG 2022-02-08 17:11:37,085 on stmt: jump 106
DEBUG 2022-02-08 17:11:37,085 ==== SSA block rewrite pass on 98
DEBUG 2022-02-08 17:11:37,085 Running <numba.core.ssa._FixSSAVars object at 0x000001E9F7BE25E0>
DEBUG 2022-02-08 17:11:37,085 on stmt: invert.1 = const(bool, False)
DEBUG 2022-02-08 17:11:37,085 on stmt: exp = b
DEBUG 2022-02-08 17:11:37,085 on stmt: jump 106
DEBUG 2022-02-08 17:11:37,085 ==== SSA block rewrite pass on 106
DEBUG 2022-02-08 17:11:37,085 Running <numba.core.ssa._FixSSAVars object at 0x000001E9F7BE25E0>
DEBUG 2022-02-08 17:11:37,085 on stmt: invert.2 = phi(incoming_values=[Var(invert, numbers.py:220), Var(invert.1, numbers.py:233)], incoming_blocks=[48, 98])
DEBUG 2022-02-08 17:11:37,085 on stmt: $const108.1 = const(int, 65536)
DEBUG 2022-02-08 17:11:37,085 on stmt: $110compare_op.2 = exp > $const108.1
DEBUG 2022-02-08 17:11:37,085 on stmt: bool112 = global(bool: <class 'bool'>)
DEBUG 2022-02-08 17:11:37,085 on stmt: $112pred = call bool112($110compare_op.2, func=bool112, args=(Var($110compare_op.2, numbers.py:235),), kws=(), vararg=None, target=None)
DEBUG 2022-02-08 17:11:37,085 on stmt: branch $112pred, 114, 130
DEBUG 2022-02-08 17:11:37,085 ==== SSA block rewrite pass on 114
DEBUG 2022-02-08 17:11:37,085 Running <numba.core.ssa._FixSSAVars object at 0x000001E9F7BE25E0>
DEBUG 2022-02-08 17:11:37,085 on stmt: $114load_global.0 = global(math: <module 'math' (built-in)>)
DEBUG 2022-02-08 17:11:37,085 on stmt: $116load_method.1 = getattr(value=$114load_global.0, attr=pow)
DEBUG 2022-02-08 17:11:37,085 on stmt: $120load_global.3 = global(float: <class 'float'>)
DEBUG 2022-02-08 17:11:37,085 on stmt: $124call_function.5 = call $120load_global.3(b, func=$120load_global.3, args=[Var(b, numbers.py:217)], kws=(), vararg=None, target=None)
DEBUG 2022-02-08 17:11:37,085 on stmt: $126call_method.6 = call $116load_method.1(a.1, $124call_function.5, func=$116load_method.1, args=[Var(a.1, numbers.py:218), Var($124call_function.5, numbers.py:237)], kws=(), vararg=None, target=None)
DEBUG 2022-02-08 17:11:37,085 find_def var='a.1' stmt=$126call_method.6 = call $116load_method.1(a.1, $124call_function.5, func=$116load_method.1, args=[Var(a.1, numbers.py:218), Var($124call_function.5, numbers.py:237)], kws=(), vararg=None, target=None)
DEBUG 2022-02-08 17:11:37,085 find_def_from_top label 114
DEBUG 2022-02-08 17:11:37,085 idom 106 from label 114
DEBUG 2022-02-08 17:11:37,085 find_def_from_bottom label 106
DEBUG 2022-02-08 17:11:37,085 find_def_from_top label 106
DEBUG 2022-02-08 17:11:37,085 idom 0 from label 106
DEBUG 2022-02-08 17:11:37,085 find_def_from_bottom label 0
DEBUG 2022-02-08 17:11:37,085 on stmt: $128return_value.7 = cast(value=$126call_method.6)
DEBUG 2022-02-08 17:11:37,085 on stmt: return $128return_value.7
DEBUG 2022-02-08 17:11:37,085 ==== SSA block rewrite pass on 130
DEBUG 2022-02-08 17:11:37,085 Running <numba.core.ssa._FixSSAVars object at 0x000001E9F7BE25E0>
DEBUG 2022-02-08 17:11:37,085 on stmt: r.2 = phi(incoming_values=[Var(r, numbers.py:217), Var(r.3, numbers.py:240)], incoming_blocks=[106, 154])
DEBUG 2022-02-08 17:11:37,085 on stmt: $const132.1 = const(int, 0)
DEBUG 2022-02-08 17:11:37,085 on stmt: $134compare_op.2 = exp != $const132.1
DEBUG 2022-02-08 17:11:37,085 on stmt: bool136 = global(bool: <class 'bool'>)
DEBUG 2022-02-08 17:11:37,085 on stmt: $136pred = call bool136($134compare_op.2, func=bool136, args=(Var($134compare_op.2, numbers.py:238),), kws=(), vararg=None, target=None)
DEBUG 2022-02-08 17:11:37,085 on stmt: branch $136pred, 138, 172
DEBUG 2022-02-08 17:11:37,085 ==== SSA block rewrite pass on 138
DEBUG 2022-02-08 17:11:37,085 Running <numba.core.ssa._FixSSAVars object at 0x000001E9F7BE25E0>
DEBUG 2022-02-08 17:11:37,085 on stmt: $const140.1 = const(int, 1)
DEBUG 2022-02-08 17:11:37,085 on stmt: $142binary_and.2 = exp & $const140.1
DEBUG 2022-02-08 17:11:37,085 on stmt: bool144 = global(bool: <class 'bool'>)
DEBUG 2022-02-08 17:11:37,085 on stmt: $144pred = call bool144($142binary_and.2, func=bool144, args=(Var($142binary_and.2, numbers.py:239),), kws=(), vararg=None, target=None)
DEBUG 2022-02-08 17:11:37,085 on stmt: branch $144pred, 146, 154
DEBUG 2022-02-08 17:11:37,085 ==== SSA block rewrite pass on 146
DEBUG 2022-02-08 17:11:37,085 Running <numba.core.ssa._FixSSAVars object at 0x000001E9F7BE25E0>
DEBUG 2022-02-08 17:11:37,085 on stmt: $150inplace_multiply.2 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=r.2, rhs=a.1, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-08 17:11:37,085 find_def var='a.1' stmt=$150inplace_multiply.2 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=r.2, rhs=a.1, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-08 17:11:37,085 find_def_from_top label 146
DEBUG 2022-02-08 17:11:37,085 idom 138 from label 146
DEBUG 2022-02-08 17:11:37,085 find_def_from_bottom label 138
DEBUG 2022-02-08 17:11:37,085 find_def_from_top label 138
DEBUG 2022-02-08 17:11:37,085 idom 130 from label 138
DEBUG 2022-02-08 17:11:37,085 find_def_from_bottom label 130
DEBUG 2022-02-08 17:11:37,085 find_def_from_top label 130
DEBUG 2022-02-08 17:11:37,085 insert phi node a.1.2 = phi(incoming_values=[], incoming_blocks=[]) at 130
DEBUG 2022-02-08 17:11:37,085 find_def_from_bottom label 106
DEBUG 2022-02-08 17:11:37,085 find_def_from_top label 106
DEBUG 2022-02-08 17:11:37,085 idom 0 from label 106
DEBUG 2022-02-08 17:11:37,085 find_def_from_bottom label 0
DEBUG 2022-02-08 17:11:37,085 incoming_def a.1 = call $10load_deref.3(a, func=$10load_deref.3, args=[Var(a, numbers.py:217)], kws=(), vararg=None, target=None)
DEBUG 2022-02-08 17:11:37,085 find_def_from_bottom label 154
DEBUG 2022-02-08 17:11:37,085 incoming_def a.1.1 = $166inplace_multiply.5
DEBUG 2022-02-08 17:11:37,085 replaced with: $150inplace_multiply.2 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=r.2, rhs=a.1.2, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-08 17:11:37,085 on stmt: r.1 = $150inplace_multiply.2
DEBUG 2022-02-08 17:11:37,085 on stmt: jump 154
DEBUG 2022-02-08 17:11:37,085 ==== SSA block rewrite pass on 154
DEBUG 2022-02-08 17:11:37,085 Running <numba.core.ssa._FixSSAVars object at 0x000001E9F7BE25E0>
DEBUG 2022-02-08 17:11:37,085 on stmt: r.3 = phi(incoming_values=[Var(r.2, numbers.py:240), Var(r.1, numbers.py:240)], incoming_blocks=[138, 146])
DEBUG 2022-02-08 17:11:37,085 on stmt: $const156.1 = const(int, 1)
DEBUG 2022-02-08 17:11:37,085 on stmt: $158inplace_rshift.2 = inplace_binop(fn=<built-in function irshift>, immutable_fn=<built-in function rshift>, lhs=exp, rhs=$const156.1, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-08 17:11:37,085 on stmt: exp = $158inplace_rshift.2
DEBUG 2022-02-08 17:11:37,085 on stmt: $166inplace_multiply.5 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=a.1, rhs=a.1, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-08 17:11:37,085 find_def var='a.1' stmt=$166inplace_multiply.5 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=a.1, rhs=a.1, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-08 17:11:37,085 find_def_from_top label 154
DEBUG 2022-02-08 17:11:37,085 idom 138 from label 154
DEBUG 2022-02-08 17:11:37,085 find_def_from_bottom label 138
DEBUG 2022-02-08 17:11:37,085 find_def_from_top label 138
DEBUG 2022-02-08 17:11:37,085 idom 130 from label 138
DEBUG 2022-02-08 17:11:37,085 find_def_from_bottom label 130
DEBUG 2022-02-08 17:11:37,085 replaced with: $166inplace_multiply.5 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=a.1.2, rhs=a.1.2, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-08 17:11:37,085 on stmt: a.1.1 = $166inplace_multiply.5
DEBUG 2022-02-08 17:11:37,085 on stmt: jump 130
DEBUG 2022-02-08 17:11:37,085 ==== SSA block rewrite pass on 172
DEBUG 2022-02-08 17:11:37,085 Running <numba.core.ssa._FixSSAVars object at 0x000001E9F7BE25E0>
DEBUG 2022-02-08 17:11:37,085 on stmt: bool174 = global(bool: <class 'bool'>)
DEBUG 2022-02-08 17:11:37,085 on stmt: $174pred = call bool174(invert.2, func=bool174, args=(Var(invert.2, numbers.py:244),), kws=(), vararg=None, target=None)
DEBUG 2022-02-08 17:11:37,095 on stmt: branch $174pred, 176, 184
DEBUG 2022-02-08 17:11:37,095 ==== SSA block rewrite pass on 176
DEBUG 2022-02-08 17:11:37,095 Running <numba.core.ssa._FixSSAVars object at 0x000001E9F7BE25E0>
DEBUG 2022-02-08 17:11:37,095 on stmt: $const176.0 = const(float, 1.0)
DEBUG 2022-02-08 17:11:37,095 on stmt: $180binary_true_divide.2 = $const176.0 / r.2
DEBUG 2022-02-08 17:11:37,095 on stmt: $182return_value.3 = cast(value=$180binary_true_divide.2)
DEBUG 2022-02-08 17:11:37,095 on stmt: return $182return_value.3
DEBUG 2022-02-08 17:11:37,095 ==== SSA block rewrite pass on 184
DEBUG 2022-02-08 17:11:37,095 Running <numba.core.ssa._FixSSAVars object at 0x000001E9F7BE25E0>
DEBUG 2022-02-08 17:11:37,095 on stmt: $186return_value.1 = cast(value=r.2)
DEBUG 2022-02-08 17:11:37,095 on stmt: return $186return_value.1
DEBUG 2022-02-08 17:11:37,096 Fix SSA violator on var exp
DEBUG 2022-02-08 17:11:37,096 ==== SSA block rewrite pass on 0
DEBUG 2022-02-08 17:11:37,096 Running <numba.core.ssa._FreshVarHandler object at 0x000001E9F7B8BF10>
DEBUG 2022-02-08 17:11:37,096 on stmt: a = arg(0, name=a)
DEBUG 2022-02-08 17:11:37,096 on stmt: b = arg(1, name=b)
DEBUG 2022-02-08 17:11:37,096 on stmt: $2load_deref.0 = freevar(tp: float64)
DEBUG 2022-02-08 17:11:37,096 on stmt: $const4.1 = const(int, 1)
DEBUG 2022-02-08 17:11:37,096 on stmt: r = call $2load_deref.0($const4.1, func=$2load_deref.0, args=[Var($const4.1, numbers.py:217)], kws=(), vararg=None, target=None)
DEBUG 2022-02-08 17:11:37,097 on stmt: $10load_deref.3 = freevar(tp: float64)
DEBUG 2022-02-08 17:11:37,097 on stmt: a.1 = call $10load_deref.3(a, func=$10load_deref.3, args=[Var(a, numbers.py:217)], kws=(), vararg=None, target=None)
DEBUG 2022-02-08 17:11:37,097 on stmt: $const20.7 = const(int, 0)
DEBUG 2022-02-08 17:11:37,097 on stmt: $22compare_op.8 = b < $const20.7
DEBUG 2022-02-08 17:11:37,097 on stmt: bool24 = global(bool: <class 'bool'>)
DEBUG 2022-02-08 17:11:37,097 on stmt: $24pred = call bool24($22compare_op.8, func=bool24, args=(Var($22compare_op.8, numbers.py:219),), kws=(), vararg=None, target=None)
DEBUG 2022-02-08 17:11:37,097 on stmt: branch $24pred, 26, 98
DEBUG 2022-02-08 17:11:37,097 ==== SSA block rewrite pass on 26
DEBUG 2022-02-08 17:11:37,097 Running <numba.core.ssa._FreshVarHandler object at 0x000001E9F7B8BF10>
DEBUG 2022-02-08 17:11:37,097 on stmt: invert = const(bool, True)
DEBUG 2022-02-08 17:11:37,097 on stmt: exp = unary(fn=<built-in function neg>, value=b)
DEBUG 2022-02-08 17:11:37,097 first assign: exp
DEBUG 2022-02-08 17:11:37,097 replaced with: exp = unary(fn=<built-in function neg>, value=b)
DEBUG 2022-02-08 17:11:37,097 on stmt: $const38.4 = const(int, 0)
DEBUG 2022-02-08 17:11:37,097 on stmt: $40compare_op.5 = exp < $const38.4
DEBUG 2022-02-08 17:11:37,097 on stmt: bool42 = global(bool: <class 'bool'>)
DEBUG 2022-02-08 17:11:37,097 on stmt: $42pred = call bool42($40compare_op.5, func=bool42, args=(Var($40compare_op.5, numbers.py:222),), kws=(), vararg=None, target=None)
DEBUG 2022-02-08 17:11:37,097 on stmt: branch $42pred, 44, 48
DEBUG 2022-02-08 17:11:37,097 ==== SSA block rewrite pass on 44
DEBUG 2022-02-08 17:11:37,097 Running <numba.core.ssa._FreshVarHandler object at 0x000001E9F7B8BF10>
DEBUG 2022-02-08 17:11:37,097 on stmt: $44load_global.0 = global(OverflowError: <class 'OverflowError'>)
DEBUG 2022-02-08 17:11:37,097 on stmt: <static> raise <class 'OverflowError'>
DEBUG 2022-02-08 17:11:37,097 ==== SSA block rewrite pass on 48
DEBUG 2022-02-08 17:11:37,097 Running <numba.core.ssa._FreshVarHandler object at 0x000001E9F7B8BF10>
DEBUG 2022-02-08 17:11:37,097 on stmt: $48load_deref.0 = freevar(is_integer: False)
DEBUG 2022-02-08 17:11:37,097 on stmt: bool50 = global(bool: <class 'bool'>)
DEBUG 2022-02-08 17:11:37,097 on stmt: $50pred = call bool50($48load_deref.0, func=bool50, args=(Var($48load_deref.0, numbers.py:224),), kws=(), vararg=None, target=None)
DEBUG 2022-02-08 17:11:37,097 on stmt: jump 106
DEBUG 2022-02-08 17:11:37,097 ==== SSA block rewrite pass on 98
DEBUG 2022-02-08 17:11:37,097 Running <numba.core.ssa._FreshVarHandler object at 0x000001E9F7B8BF10>
DEBUG 2022-02-08 17:11:37,097 on stmt: invert.1 = const(bool, False)
DEBUG 2022-02-08 17:11:37,097 on stmt: exp = b
DEBUG 2022-02-08 17:11:37,097 replaced with: exp.1 = b
DEBUG 2022-02-08 17:11:37,097 on stmt: jump 106
DEBUG 2022-02-08 17:11:37,097 ==== SSA block rewrite pass on 106
DEBUG 2022-02-08 17:11:37,097 Running <numba.core.ssa._FreshVarHandler object at 0x000001E9F7B8BF10>
DEBUG 2022-02-08 17:11:37,097 on stmt: invert.2 = phi(incoming_values=[Var(invert, numbers.py:220), Var(invert.1, numbers.py:233)], incoming_blocks=[48, 98])
DEBUG 2022-02-08 17:11:37,097 on stmt: $const108.1 = const(int, 65536)
DEBUG 2022-02-08 17:11:37,097 on stmt: $110compare_op.2 = exp > $const108.1
DEBUG 2022-02-08 17:11:37,097 on stmt: bool112 = global(bool: <class 'bool'>)
DEBUG 2022-02-08 17:11:37,097 on stmt: $112pred = call bool112($110compare_op.2, func=bool112, args=(Var($110compare_op.2, numbers.py:235),), kws=(), vararg=None, target=None)
DEBUG 2022-02-08 17:11:37,097 on stmt: branch $112pred, 114, 130
DEBUG 2022-02-08 17:11:37,097 ==== SSA block rewrite pass on 114
DEBUG 2022-02-08 17:11:37,097 Running <numba.core.ssa._FreshVarHandler object at 0x000001E9F7B8BF10>
DEBUG 2022-02-08 17:11:37,097 on stmt: $114load_global.0 = global(math: <module 'math' (built-in)>)
DEBUG 2022-02-08 17:11:37,097 on stmt: $116load_method.1 = getattr(value=$114load_global.0, attr=pow)
DEBUG 2022-02-08 17:11:37,097 on stmt: $120load_global.3 = global(float: <class 'float'>)
DEBUG 2022-02-08 17:11:37,097 on stmt: $124call_function.5 = call $120load_global.3(b, func=$120load_global.3, args=[Var(b, numbers.py:217)], kws=(), vararg=None, target=None)
DEBUG 2022-02-08 17:11:37,097 on stmt: $126call_method.6 = call $116load_method.1(a.1, $124call_function.5, func=$116load_method.1, args=[Var(a.1, numbers.py:218), Var($124call_function.5, numbers.py:237)], kws=(), vararg=None, target=None)
DEBUG 2022-02-08 17:11:37,097 on stmt: $128return_value.7 = cast(value=$126call_method.6)
DEBUG 2022-02-08 17:11:37,097 on stmt: return $128return_value.7
DEBUG 2022-02-08 17:11:37,097 ==== SSA block rewrite pass on 130
DEBUG 2022-02-08 17:11:37,097 Running <numba.core.ssa._FreshVarHandler object at 0x000001E9F7B8BF10>
DEBUG 2022-02-08 17:11:37,097 on stmt: a.1.2 = phi(incoming_values=[Var(a.1, numbers.py:218), Var(a.1.1, numbers.py:242)], incoming_blocks=[106, 154])
DEBUG 2022-02-08 17:11:37,097 on stmt: r.2 = phi(incoming_values=[Var(r, numbers.py:217), Var(r.3, numbers.py:240)], incoming_blocks=[106, 154])
DEBUG 2022-02-08 17:11:37,097 on stmt: $const132.1 = const(int, 0)
DEBUG 2022-02-08 17:11:37,097 on stmt: $134compare_op.2 = exp != $const132.1
DEBUG 2022-02-08 17:11:37,097 on stmt: bool136 = global(bool: <class 'bool'>)
DEBUG 2022-02-08 17:11:37,097 on stmt: $136pred = call bool136($134compare_op.2, func=bool136, args=(Var($134compare_op.2, numbers.py:238),), kws=(), vararg=None, target=None)
DEBUG 2022-02-08 17:11:37,097 on stmt: branch $136pred, 138, 172
DEBUG 2022-02-08 17:11:37,097 ==== SSA block rewrite pass on 138
DEBUG 2022-02-08 17:11:37,097 Running <numba.core.ssa._FreshVarHandler object at 0x000001E9F7B8BF10>
DEBUG 2022-02-08 17:11:37,097 on stmt: $const140.1 = const(int, 1)
DEBUG 2022-02-08 17:11:37,097 on stmt: $142binary_and.2 = exp & $const140.1
DEBUG 2022-02-08 17:11:37,097 on stmt: bool144 = global(bool: <class 'bool'>)
DEBUG 2022-02-08 17:11:37,097 on stmt: $144pred = call bool144($142binary_and.2, func=bool144, args=(Var($142binary_and.2, numbers.py:239),), kws=(), vararg=None, target=None)
DEBUG 2022-02-08 17:11:37,097 on stmt: branch $144pred, 146, 154
DEBUG 2022-02-08 17:11:37,097 ==== SSA block rewrite pass on 146
DEBUG 2022-02-08 17:11:37,097 Running <numba.core.ssa._FreshVarHandler object at 0x000001E9F7B8BF10>
DEBUG 2022-02-08 17:11:37,097 on stmt: $150inplace_multiply.2 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=r.2, rhs=a.1.2, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-08 17:11:37,097 on stmt: r.1 = $150inplace_multiply.2
DEBUG 2022-02-08 17:11:37,097 on stmt: jump 154
DEBUG 2022-02-08 17:11:37,097 ==== SSA block rewrite pass on 154
DEBUG 2022-02-08 17:11:37,097 Running <numba.core.ssa._FreshVarHandler object at 0x000001E9F7B8BF10>
DEBUG 2022-02-08 17:11:37,097 on stmt: r.3 = phi(incoming_values=[Var(r.2, numbers.py:240), Var(r.1, numbers.py:240)], incoming_blocks=[138, 146])
DEBUG 2022-02-08 17:11:37,097 on stmt: $const156.1 = const(int, 1)
DEBUG 2022-02-08 17:11:37,097 on stmt: $158inplace_rshift.2 = inplace_binop(fn=<built-in function irshift>, immutable_fn=<built-in function rshift>, lhs=exp, rhs=$const156.1, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-08 17:11:37,097 on stmt: exp = $158inplace_rshift.2
DEBUG 2022-02-08 17:11:37,097 replaced with: exp.2 = $158inplace_rshift.2
DEBUG 2022-02-08 17:11:37,097 on stmt: $166inplace_multiply.5 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=a.1.2, rhs=a.1.2, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-08 17:11:37,097 on stmt: a.1.1 = $166inplace_multiply.5
DEBUG 2022-02-08 17:11:37,097 on stmt: jump 130
DEBUG 2022-02-08 17:11:37,097 ==== SSA block rewrite pass on 172
DEBUG 2022-02-08 17:11:37,097 Running <numba.core.ssa._FreshVarHandler object at 0x000001E9F7B8BF10>
DEBUG 2022-02-08 17:11:37,097 on stmt: bool174 = global(bool: <class 'bool'>)
DEBUG 2022-02-08 17:11:37,097 on stmt: $174pred = call bool174(invert.2, func=bool174, args=(Var(invert.2, numbers.py:244),), kws=(), vararg=None, target=None)
DEBUG 2022-02-08 17:11:37,097 on stmt: branch $174pred, 176, 184
DEBUG 2022-02-08 17:11:37,097 ==== SSA block rewrite pass on 176
DEBUG 2022-02-08 17:11:37,097 Running <numba.core.ssa._FreshVarHandler object at 0x000001E9F7B8BF10>
DEBUG 2022-02-08 17:11:37,097 on stmt: $const176.0 = const(float, 1.0)
DEBUG 2022-02-08 17:11:37,097 on stmt: $180binary_true_divide.2 = $const176.0 / r.2
DEBUG 2022-02-08 17:11:37,105 on stmt: $182return_value.3 = cast(value=$180binary_true_divide.2)
DEBUG 2022-02-08 17:11:37,105 on stmt: return $182return_value.3
DEBUG 2022-02-08 17:11:37,105 ==== SSA block rewrite pass on 184
DEBUG 2022-02-08 17:11:37,105 Running <numba.core.ssa._FreshVarHandler object at 0x000001E9F7B8BF10>
DEBUG 2022-02-08 17:11:37,105 on stmt: $186return_value.1 = cast(value=r.2)
DEBUG 2022-02-08 17:11:37,105 on stmt: return $186return_value.1
DEBUG 2022-02-08 17:11:37,105 Replaced assignments: defaultdict(<class 'list'>,
            {26: [<numba.core.ir.Assign object at 0x000001E9F7B8B460>],
             98: [<numba.core.ir.Assign object at 0x000001E9F7BE2EB0>],
             154: [<numba.core.ir.Assign object at 0x000001E9F7BE2E20>]})
DEBUG 2022-02-08 17:11:37,105 ==== SSA block rewrite pass on 0
DEBUG 2022-02-08 17:11:37,105 Running <numba.core.ssa._FixSSAVars object at 0x000001E9F7BE23A0>
DEBUG 2022-02-08 17:11:37,105 on stmt: a = arg(0, name=a)
DEBUG 2022-02-08 17:11:37,105 on stmt: b = arg(1, name=b)
DEBUG 2022-02-08 17:11:37,105 on stmt: $2load_deref.0 = freevar(tp: float64)
DEBUG 2022-02-08 17:11:37,105 on stmt: $const4.1 = const(int, 1)
DEBUG 2022-02-08 17:11:37,105 on stmt: r = call $2load_deref.0($const4.1, func=$2load_deref.0, args=[Var($const4.1, numbers.py:217)], kws=(), vararg=None, target=None)
DEBUG 2022-02-08 17:11:37,105 on stmt: $10load_deref.3 = freevar(tp: float64)
DEBUG 2022-02-08 17:11:37,105 on stmt: a.1 = call $10load_deref.3(a, func=$10load_deref.3, args=[Var(a, numbers.py:217)], kws=(), vararg=None, target=None)
DEBUG 2022-02-08 17:11:37,105 on stmt: $const20.7 = const(int, 0)
DEBUG 2022-02-08 17:11:37,105 on stmt: $22compare_op.8 = b < $const20.7
DEBUG 2022-02-08 17:11:37,105 on stmt: bool24 = global(bool: <class 'bool'>)
DEBUG 2022-02-08 17:11:37,105 on stmt: $24pred = call bool24($22compare_op.8, func=bool24, args=(Var($22compare_op.8, numbers.py:219),), kws=(), vararg=None, target=None)
DEBUG 2022-02-08 17:11:37,105 on stmt: branch $24pred, 26, 98
DEBUG 2022-02-08 17:11:37,105 ==== SSA block rewrite pass on 26
DEBUG 2022-02-08 17:11:37,107 Running <numba.core.ssa._FixSSAVars object at 0x000001E9F7BE23A0>
DEBUG 2022-02-08 17:11:37,107 on stmt: invert = const(bool, True)
DEBUG 2022-02-08 17:11:37,107 on stmt: exp = unary(fn=<built-in function neg>, value=b)
DEBUG 2022-02-08 17:11:37,107 on stmt: $const38.4 = const(int, 0)
DEBUG 2022-02-08 17:11:37,107 on stmt: $40compare_op.5 = exp < $const38.4
DEBUG 2022-02-08 17:11:37,107 find_def var='exp' stmt=$40compare_op.5 = exp < $const38.4
DEBUG 2022-02-08 17:11:37,107 on stmt: bool42 = global(bool: <class 'bool'>)
DEBUG 2022-02-08 17:11:37,107 on stmt: $42pred = call bool42($40compare_op.5, func=bool42, args=(Var($40compare_op.5, numbers.py:222),), kws=(), vararg=None, target=None)
DEBUG 2022-02-08 17:11:37,107 on stmt: branch $42pred, 44, 48
DEBUG 2022-02-08 17:11:37,107 ==== SSA block rewrite pass on 44
DEBUG 2022-02-08 17:11:37,107 Running <numba.core.ssa._FixSSAVars object at 0x000001E9F7BE23A0>
DEBUG 2022-02-08 17:11:37,107 on stmt: $44load_global.0 = global(OverflowError: <class 'OverflowError'>)
DEBUG 2022-02-08 17:11:37,107 on stmt: <static> raise <class 'OverflowError'>
DEBUG 2022-02-08 17:11:37,107 ==== SSA block rewrite pass on 48
DEBUG 2022-02-08 17:11:37,107 Running <numba.core.ssa._FixSSAVars object at 0x000001E9F7BE23A0>
DEBUG 2022-02-08 17:11:37,107 on stmt: $48load_deref.0 = freevar(is_integer: False)
DEBUG 2022-02-08 17:11:37,107 on stmt: bool50 = global(bool: <class 'bool'>)
DEBUG 2022-02-08 17:11:37,107 on stmt: $50pred = call bool50($48load_deref.0, func=bool50, args=(Var($48load_deref.0, numbers.py:224),), kws=(), vararg=None, target=None)
DEBUG 2022-02-08 17:11:37,107 on stmt: jump 106
DEBUG 2022-02-08 17:11:37,107 ==== SSA block rewrite pass on 98
DEBUG 2022-02-08 17:11:37,107 Running <numba.core.ssa._FixSSAVars object at 0x000001E9F7BE23A0>
DEBUG 2022-02-08 17:11:37,107 on stmt: invert.1 = const(bool, False)
DEBUG 2022-02-08 17:11:37,107 on stmt: exp.1 = b
DEBUG 2022-02-08 17:11:37,107 on stmt: jump 106
DEBUG 2022-02-08 17:11:37,107 ==== SSA block rewrite pass on 106
DEBUG 2022-02-08 17:11:37,107 Running <numba.core.ssa._FixSSAVars object at 0x000001E9F7BE23A0>
DEBUG 2022-02-08 17:11:37,107 on stmt: invert.2 = phi(incoming_values=[Var(invert, numbers.py:220), Var(invert.1, numbers.py:233)], incoming_blocks=[48, 98])
DEBUG 2022-02-08 17:11:37,107 on stmt: $const108.1 = const(int, 65536)
DEBUG 2022-02-08 17:11:37,107 on stmt: $110compare_op.2 = exp > $const108.1
DEBUG 2022-02-08 17:11:37,107 find_def var='exp' stmt=$110compare_op.2 = exp > $const108.1
DEBUG 2022-02-08 17:11:37,107 find_def_from_top label 106
DEBUG 2022-02-08 17:11:37,107 insert phi node exp.3 = phi(incoming_values=[], incoming_blocks=[]) at 106
DEBUG 2022-02-08 17:11:37,107 find_def_from_bottom label 48
DEBUG 2022-02-08 17:11:37,107 find_def_from_top label 48
DEBUG 2022-02-08 17:11:37,107 idom 26 from label 48
DEBUG 2022-02-08 17:11:37,107 find_def_from_bottom label 26
DEBUG 2022-02-08 17:11:37,107 incoming_def exp = unary(fn=<built-in function neg>, value=b)
DEBUG 2022-02-08 17:11:37,107 find_def_from_bottom label 98
DEBUG 2022-02-08 17:11:37,107 incoming_def exp.1 = b
DEBUG 2022-02-08 17:11:37,107 replaced with: $110compare_op.2 = exp.3 > $const108.1
DEBUG 2022-02-08 17:11:37,107 on stmt: bool112 = global(bool: <class 'bool'>)
DEBUG 2022-02-08 17:11:37,107 on stmt: $112pred = call bool112($110compare_op.2, func=bool112, args=(Var($110compare_op.2, numbers.py:235),), kws=(), vararg=None, target=None)
DEBUG 2022-02-08 17:11:37,107 on stmt: branch $112pred, 114, 130
DEBUG 2022-02-08 17:11:37,107 ==== SSA block rewrite pass on 114
DEBUG 2022-02-08 17:11:37,107 Running <numba.core.ssa._FixSSAVars object at 0x000001E9F7BE23A0>
DEBUG 2022-02-08 17:11:37,107 on stmt: $114load_global.0 = global(math: <module 'math' (built-in)>)
DEBUG 2022-02-08 17:11:37,107 on stmt: $116load_method.1 = getattr(value=$114load_global.0, attr=pow)
DEBUG 2022-02-08 17:11:37,107 on stmt: $120load_global.3 = global(float: <class 'float'>)
DEBUG 2022-02-08 17:11:37,107 on stmt: $124call_function.5 = call $120load_global.3(b, func=$120load_global.3, args=[Var(b, numbers.py:217)], kws=(), vararg=None, target=None)
DEBUG 2022-02-08 17:11:37,107 on stmt: $126call_method.6 = call $116load_method.1(a.1, $124call_function.5, func=$116load_method.1, args=[Var(a.1, numbers.py:218), Var($124call_function.5, numbers.py:237)], kws=(), vararg=None, target=None)
DEBUG 2022-02-08 17:11:37,107 on stmt: $128return_value.7 = cast(value=$126call_method.6)
DEBUG 2022-02-08 17:11:37,107 on stmt: return $128return_value.7
DEBUG 2022-02-08 17:11:37,107 ==== SSA block rewrite pass on 130
DEBUG 2022-02-08 17:11:37,107 Running <numba.core.ssa._FixSSAVars object at 0x000001E9F7BE23A0>
DEBUG 2022-02-08 17:11:37,107 on stmt: a.1.2 = phi(incoming_values=[Var(a.1, numbers.py:218), Var(a.1.1, numbers.py:242)], incoming_blocks=[106, 154])
DEBUG 2022-02-08 17:11:37,107 on stmt: r.2 = phi(incoming_values=[Var(r, numbers.py:217), Var(r.3, numbers.py:240)], incoming_blocks=[106, 154])
DEBUG 2022-02-08 17:11:37,107 on stmt: $const132.1 = const(int, 0)
DEBUG 2022-02-08 17:11:37,107 on stmt: $134compare_op.2 = exp != $const132.1
DEBUG 2022-02-08 17:11:37,107 find_def var='exp' stmt=$134compare_op.2 = exp != $const132.1
DEBUG 2022-02-08 17:11:37,107 find_def_from_top label 130
DEBUG 2022-02-08 17:11:37,107 insert phi node exp.4 = phi(incoming_values=[], incoming_blocks=[]) at 130
DEBUG 2022-02-08 17:11:37,107 find_def_from_bottom label 106
DEBUG 2022-02-08 17:11:37,107 incoming_def exp.3 = phi(incoming_values=[Var(exp, numbers.py:221), Var(exp.1, numbers.py:234)], incoming_blocks=[48, 98])
DEBUG 2022-02-08 17:11:37,107 find_def_from_bottom label 154
DEBUG 2022-02-08 17:11:37,107 incoming_def exp.2 = $158inplace_rshift.2
DEBUG 2022-02-08 17:11:37,107 replaced with: $134compare_op.2 = exp.4 != $const132.1
DEBUG 2022-02-08 17:11:37,107 on stmt: bool136 = global(bool: <class 'bool'>)
DEBUG 2022-02-08 17:11:37,107 on stmt: $136pred = call bool136($134compare_op.2, func=bool136, args=(Var($134compare_op.2, numbers.py:238),), kws=(), vararg=None, target=None)
DEBUG 2022-02-08 17:11:37,107 on stmt: branch $136pred, 138, 172
DEBUG 2022-02-08 17:11:37,107 ==== SSA block rewrite pass on 138
DEBUG 2022-02-08 17:11:37,107 Running <numba.core.ssa._FixSSAVars object at 0x000001E9F7BE23A0>
DEBUG 2022-02-08 17:11:37,107 on stmt: $const140.1 = const(int, 1)
DEBUG 2022-02-08 17:11:37,107 on stmt: $142binary_and.2 = exp & $const140.1
DEBUG 2022-02-08 17:11:37,107 find_def var='exp' stmt=$142binary_and.2 = exp & $const140.1
DEBUG 2022-02-08 17:11:37,107 find_def_from_top label 138
DEBUG 2022-02-08 17:11:37,107 idom 130 from label 138
DEBUG 2022-02-08 17:11:37,107 find_def_from_bottom label 130
DEBUG 2022-02-08 17:11:37,107 replaced with: $142binary_and.2 = exp.4 & $const140.1
DEBUG 2022-02-08 17:11:37,107 on stmt: bool144 = global(bool: <class 'bool'>)
DEBUG 2022-02-08 17:11:37,107 on stmt: $144pred = call bool144($142binary_and.2, func=bool144, args=(Var($142binary_and.2, numbers.py:239),), kws=(), vararg=None, target=None)
DEBUG 2022-02-08 17:11:37,107 on stmt: branch $144pred, 146, 154
DEBUG 2022-02-08 17:11:37,107 ==== SSA block rewrite pass on 146
DEBUG 2022-02-08 17:11:37,107 Running <numba.core.ssa._FixSSAVars object at 0x000001E9F7BE23A0>
DEBUG 2022-02-08 17:11:37,107 on stmt: $150inplace_multiply.2 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=r.2, rhs=a.1.2, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-08 17:11:37,107 on stmt: r.1 = $150inplace_multiply.2
DEBUG 2022-02-08 17:11:37,107 on stmt: jump 154
DEBUG 2022-02-08 17:11:37,107 ==== SSA block rewrite pass on 154
DEBUG 2022-02-08 17:11:37,107 Running <numba.core.ssa._FixSSAVars object at 0x000001E9F7BE23A0>
DEBUG 2022-02-08 17:11:37,107 on stmt: r.3 = phi(incoming_values=[Var(r.2, numbers.py:240), Var(r.1, numbers.py:240)], incoming_blocks=[138, 146])
DEBUG 2022-02-08 17:11:37,107 on stmt: $const156.1 = const(int, 1)
DEBUG 2022-02-08 17:11:37,115 on stmt: $158inplace_rshift.2 = inplace_binop(fn=<built-in function irshift>, immutable_fn=<built-in function rshift>, lhs=exp, rhs=$const156.1, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-08 17:11:37,115 find_def var='exp' stmt=$158inplace_rshift.2 = inplace_binop(fn=<built-in function irshift>, immutable_fn=<built-in function rshift>, lhs=exp, rhs=$const156.1, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-08 17:11:37,115 find_def_from_top label 154
DEBUG 2022-02-08 17:11:37,115 idom 138 from label 154
DEBUG 2022-02-08 17:11:37,115 find_def_from_bottom label 138
DEBUG 2022-02-08 17:11:37,115 find_def_from_top label 138
DEBUG 2022-02-08 17:11:37,115 idom 130 from label 138
DEBUG 2022-02-08 17:11:37,115 find_def_from_bottom label 130
DEBUG 2022-02-08 17:11:37,115 replaced with: $158inplace_rshift.2 = inplace_binop(fn=<built-in function irshift>, immutable_fn=<built-in function rshift>, lhs=exp.4, rhs=$const156.1, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-08 17:11:37,115 on stmt: exp.2 = $158inplace_rshift.2
DEBUG 2022-02-08 17:11:37,115 on stmt: $166inplace_multiply.5 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=a.1.2, rhs=a.1.2, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-08 17:11:37,115 on stmt: a.1.1 = $166inplace_multiply.5
DEBUG 2022-02-08 17:11:37,115 on stmt: jump 130
DEBUG 2022-02-08 17:11:37,115 ==== SSA block rewrite pass on 172
DEBUG 2022-02-08 17:11:37,115 Running <numba.core.ssa._FixSSAVars object at 0x000001E9F7BE23A0>
DEBUG 2022-02-08 17:11:37,115 on stmt: bool174 = global(bool: <class 'bool'>)
DEBUG 2022-02-08 17:11:37,115 on stmt: $174pred = call bool174(invert.2, func=bool174, args=(Var(invert.2, numbers.py:244),), kws=(), vararg=None, target=None)
DEBUG 2022-02-08 17:11:37,115 on stmt: branch $174pred, 176, 184
DEBUG 2022-02-08 17:11:37,117 ==== SSA block rewrite pass on 176
DEBUG 2022-02-08 17:11:37,117 Running <numba.core.ssa._FixSSAVars object at 0x000001E9F7BE23A0>
DEBUG 2022-02-08 17:11:37,117 on stmt: $const176.0 = const(float, 1.0)
DEBUG 2022-02-08 17:11:37,117 on stmt: $180binary_true_divide.2 = $const176.0 / r.2
DEBUG 2022-02-08 17:11:37,117 on stmt: $182return_value.3 = cast(value=$180binary_true_divide.2)
DEBUG 2022-02-08 17:11:37,117 on stmt: return $182return_value.3
DEBUG 2022-02-08 17:11:37,117 ==== SSA block rewrite pass on 184
DEBUG 2022-02-08 17:11:37,117 Running <numba.core.ssa._FixSSAVars object at 0x000001E9F7BE23A0>
DEBUG 2022-02-08 17:11:37,117 on stmt: $186return_value.1 = cast(value=r.2)
DEBUG 2022-02-08 17:11:37,117 on stmt: return $186return_value.1
