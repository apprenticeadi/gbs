DEBUG 2022-02-14 16:37:57,790 bytecode dump:
>          0	NOP(arg=None, lineno=20)
           2	LOAD_FAST(arg=1, lineno=20)
           4	LOAD_CONST(arg=1, lineno=20)
           6	BINARY_SUBSCR(arg=None, lineno=20)
           8	STORE_FAST(arg=6, lineno=20)
          10	LOAD_FAST(arg=0, lineno=21)
          12	LOAD_CONST(arg=1, lineno=21)
          14	LOAD_CONST(arg=0, lineno=21)
          16	LOAD_CONST(arg=0, lineno=21)
          18	BUILD_SLICE(arg=2, lineno=21)
          20	BUILD_TUPLE(arg=2, lineno=21)
          22	BINARY_SUBSCR(arg=None, lineno=21)
          24	STORE_FAST(arg=7, lineno=21)
          26	LOAD_FAST(arg=0, lineno=23)
          28	LOAD_ATTR(arg=0, lineno=23)
          30	LOAD_CONST(arg=1, lineno=23)
          32	BINARY_SUBSCR(arg=None, lineno=23)
          34	STORE_FAST(arg=8, lineno=23)
          36	LOAD_CONST(arg=2, lineno=24)
          38	LOAD_FAST(arg=2, lineno=24)
          40	LOAD_METHOD(arg=1, lineno=24)
          42	CALL_METHOD(arg=0, lineno=24)
          44	BINARY_MULTIPLY(arg=None, lineno=24)
          46	STORE_FAST(arg=9, lineno=24)
          48	LOAD_FAST(arg=9, lineno=26)
          50	LOAD_CONST(arg=2, lineno=26)
          52	LOAD_FAST(arg=3, lineno=26)
          54	BINARY_MULTIPLY(arg=None, lineno=26)
          56	BINARY_ADD(arg=None, lineno=26)
          58	LOAD_FAST(arg=4, lineno=26)
          60	BINARY_ADD(arg=None, lineno=26)
          62	STORE_FAST(arg=10, lineno=26)
          64	LOAD_GLOBAL(arg=2, lineno=28)
          66	LOAD_METHOD(arg=3, lineno=28)
          68	LOAD_GLOBAL(arg=2, lineno=28)
          70	LOAD_METHOD(arg=4, lineno=28)
          72	LOAD_FAST(arg=3, lineno=28)
          74	BUILD_LIST(arg=1, lineno=28)
          76	CALL_METHOD(arg=1, lineno=28)
          78	LOAD_FAST(arg=2, lineno=28)
          80	BUILD_TUPLE(arg=2, lineno=28)
          82	CALL_METHOD(arg=1, lineno=28)
          84	STORE_FAST(arg=11, lineno=28)
          86	LOAD_GLOBAL(arg=2, lineno=29)
          88	LOAD_METHOD(arg=5, lineno=29)
          90	LOAD_FAST(arg=11, lineno=29)
          92	LOAD_CONST(arg=3, lineno=29)
          94	BINARY_ADD(arg=None, lineno=29)
          96	CALL_METHOD(arg=1, lineno=29)
          98	STORE_FAST(arg=12, lineno=29)
         100	LOAD_FAST(arg=11, lineno=31)
         102	LOAD_METHOD(arg=6, lineno=31)
         104	CALL_METHOD(arg=0, lineno=31)
         106	LOAD_FAST(arg=4, lineno=31)
         108	BINARY_ADD(arg=None, lineno=31)
         110	STORE_FAST(arg=13, lineno=31)
         112	LOAD_GLOBAL(arg=7, lineno=32)
         114	LOAD_FAST(arg=13, lineno=32)
         116	CALL_FUNCTION(arg=1, lineno=32)
         118	STORE_FAST(arg=14, lineno=32)
         120	LOAD_GLOBAL(arg=2, lineno=34)
         122	LOAD_ATTR(arg=8, lineno=34)
         124	LOAD_CONST(arg=2, lineno=34)
         126	LOAD_FAST(arg=3, lineno=34)
         128	BINARY_MULTIPLY(arg=None, lineno=34)
         130	LOAD_FAST(arg=4, lineno=34)
         132	BINARY_ADD(arg=None, lineno=34)
         134	LOAD_CONST(arg=3, lineno=34)
         136	BINARY_ADD(arg=None, lineno=34)
         138	LOAD_GLOBAL(arg=2, lineno=34)
         140	LOAD_ATTR(arg=9, lineno=34)
         142	LOAD_CONST(arg=4, lineno=34)
         144	CALL_FUNCTION_KW(arg=2, lineno=34)
         146	STORE_FAST(arg=15, lineno=34)
         148	LOAD_GLOBAL(arg=10, lineno=35)
         150	LOAD_METHOD(arg=11, lineno=35)
         152	LOAD_FAST(arg=12, lineno=35)
         154	CALL_METHOD(arg=1, lineno=35)
         156	GET_ITER(arg=None, lineno=35)
>        158	FOR_ITER(arg=358, lineno=35)
         162	STORE_FAST(arg=16, lineno=35)
         164	LOAD_GLOBAL(arg=2, lineno=37)
         166	LOAD_ATTR(arg=8, lineno=37)
         168	LOAD_CONST(arg=2, lineno=37)
         170	LOAD_FAST(arg=3, lineno=37)
         172	BINARY_MULTIPLY(arg=None, lineno=37)
         174	LOAD_FAST(arg=4, lineno=37)
         176	BINARY_ADD(arg=None, lineno=37)
         178	LOAD_CONST(arg=3, lineno=37)
         180	BINARY_ADD(arg=None, lineno=37)
         182	LOAD_GLOBAL(arg=2, lineno=37)
         184	LOAD_ATTR(arg=9, lineno=37)
         186	LOAD_CONST(arg=4, lineno=37)
         188	CALL_FUNCTION_KW(arg=2, lineno=37)
         190	STORE_FAST(arg=17, lineno=37)
         192	LOAD_GLOBAL(arg=12, lineno=39)
         194	LOAD_FAST(arg=16, lineno=39)
         196	LOAD_FAST(arg=11, lineno=39)
         198	CALL_FUNCTION(arg=2, lineno=39)
         200	STORE_FAST(arg=18, lineno=39)
         202	LOAD_FAST(arg=18, lineno=40)
         204	LOAD_METHOD(arg=1, lineno=40)
         206	CALL_METHOD(arg=0, lineno=40)
         208	STORE_FAST(arg=19, lineno=40)
         210	LOAD_CONST(arg=5, lineno=42)
         212	STORE_FAST(arg=20, lineno=42)
         214	LOAD_GLOBAL(arg=13, lineno=43)
         216	LOAD_CONST(arg=3, lineno=43)
         218	LOAD_FAST(arg=8, lineno=43)
         220	LOAD_CONST(arg=2, lineno=43)
         222	BINARY_FLOOR_DIVIDE(arg=None, lineno=43)
         224	CALL_FUNCTION(arg=2, lineno=43)
         226	GET_ITER(arg=None, lineno=43)
>        228	FOR_ITER(arg=28, lineno=43)
         230	STORE_FAST(arg=21, lineno=43)
         232	LOAD_FAST(arg=20, lineno=44)
         234	LOAD_FAST(arg=14, lineno=44)
         236	LOAD_FAST(arg=11, lineno=44)
         238	LOAD_FAST(arg=21, lineno=44)
         240	BINARY_SUBSCR(arg=None, lineno=44)
         242	LOAD_FAST(arg=18, lineno=44)
         244	LOAD_FAST(arg=21, lineno=44)
         246	BINARY_SUBSCR(arg=None, lineno=44)
         248	BUILD_TUPLE(arg=2, lineno=44)
         250	BINARY_SUBSCR(arg=None, lineno=44)
         252	INPLACE_MULTIPLY(arg=None, lineno=44)
         254	STORE_FAST(arg=20, lineno=44)
         256	JUMP_ABSOLUTE(arg=228, lineno=44)
>        258	LOAD_FAST(arg=5, lineno=46)
         260	POP_JUMP_IF_FALSE(arg=278, lineno=46)
         264	LOAD_CONST(arg=2, lineno=47)
         266	LOAD_FAST(arg=18, lineno=47)
         268	BINARY_MULTIPLY(arg=None, lineno=47)
         270	LOAD_FAST(arg=11, lineno=47)
         272	BINARY_SUBTRACT(arg=None, lineno=47)
         274	STORE_FAST(arg=22, lineno=47)
         276	JUMP_FORWARD(arg=4, lineno=47)
>        278	LOAD_FAST(arg=18, lineno=49)
         280	STORE_FAST(arg=22, lineno=49)
>        282	LOAD_GLOBAL(arg=14, lineno=51)
         284	LOAD_FAST(arg=22, lineno=51)
         286	LOAD_FAST(arg=0, lineno=51)
         288	LOAD_FAST(arg=1, lineno=51)
         290	LOAD_FAST(arg=7, lineno=51)
         292	CALL_FUNCTION(arg=4, lineno=51)
         294	UNPACK_SEQUENCE(arg=4, lineno=51)
         296	STORE_FAST(arg=23, lineno=51)
         298	STORE_FAST(arg=24, lineno=51)
         300	STORE_FAST(arg=25, lineno=51)
         302	STORE_FAST(arg=26, lineno=51)
         304	LOAD_GLOBAL(arg=15, lineno=53)
         306	LOAD_FAST(arg=23, lineno=53)
         308	CALL_FUNCTION(arg=1, lineno=53)
         310	STORE_FAST(arg=27, lineno=53)
         312	LOAD_GLOBAL(arg=16, lineno=55)
         314	LOAD_FAST(arg=27, lineno=55)
         316	LOAD_FAST(arg=23, lineno=55)
         318	LOAD_FAST(arg=24, lineno=55)
         320	LOAD_FAST(arg=25, lineno=55)
         322	LOAD_FAST(arg=10, lineno=55)
         324	CALL_FUNCTION(arg=5, lineno=55)
         326	STORE_FAST(arg=28, lineno=55)
         328	LOAD_GLOBAL(arg=17, lineno=56)
         330	LOAD_FAST(arg=27, lineno=56)
         332	LOAD_FAST(arg=23, lineno=56)
         334	LOAD_FAST(arg=24, lineno=56)
         336	LOAD_FAST(arg=25, lineno=56)
         338	LOAD_FAST(arg=10, lineno=56)
         340	LOAD_FAST(arg=6, lineno=56)
         342	LOAD_FAST(arg=26, lineno=56)
         344	CALL_FUNCTION(arg=7, lineno=56)
         346	STORE_FAST(arg=29, lineno=56)
         348	LOAD_GLOBAL(arg=13, lineno=58)
         350	LOAD_CONST(arg=2, lineno=58)
         352	LOAD_FAST(arg=18, lineno=58)
         354	LOAD_CONST(arg=1, lineno=58)
         356	BINARY_SUBSCR(arg=None, lineno=58)
         358	BINARY_MULTIPLY(arg=None, lineno=58)
         360	LOAD_CONST(arg=2, lineno=58)
         362	LOAD_FAST(arg=3, lineno=58)
         364	BINARY_MULTIPLY(arg=None, lineno=58)
         366	LOAD_FAST(arg=4, lineno=58)
         368	BINARY_ADD(arg=None, lineno=58)
         370	LOAD_CONST(arg=3, lineno=58)
         372	BINARY_ADD(arg=None, lineno=58)
         374	CALL_FUNCTION(arg=2, lineno=58)
         376	GET_ITER(arg=None, lineno=58)
>        378	FOR_ITER(arg=130, lineno=58)
         380	STORE_FAST(arg=30, lineno=58)
         382	LOAD_FAST(arg=9, lineno=59)
         384	LOAD_FAST(arg=30, lineno=59)
         386	BINARY_ADD(arg=None, lineno=59)
         388	STORE_FAST(arg=31, lineno=59)
         390	LOAD_CONST(arg=6, lineno=60)
         392	LOAD_FAST(arg=31, lineno=60)
         394	LOAD_CONST(arg=2, lineno=60)
         396	BINARY_FLOOR_DIVIDE(arg=None, lineno=60)
         398	LOAD_FAST(arg=19, lineno=60)
         400	BINARY_SUBTRACT(arg=None, lineno=60)
         402	BINARY_POWER(arg=None, lineno=60)
         404	STORE_FAST(arg=32, lineno=60)
         406	LOAD_FAST(arg=14, lineno=62)
         408	LOAD_FAST(arg=30, lineno=62)
         410	LOAD_CONST(arg=2, lineno=62)
         412	BINARY_FLOOR_DIVIDE(arg=None, lineno=62)
         414	LOAD_FAST(arg=18, lineno=62)
         416	LOAD_CONST(arg=1, lineno=62)
         418	BINARY_SUBSCR(arg=None, lineno=62)
         420	BUILD_TUPLE(arg=2, lineno=62)
         422	BINARY_SUBSCR(arg=None, lineno=62)
         424	LOAD_FAST(arg=20, lineno=62)
         426	BINARY_MULTIPLY(arg=None, lineno=62)
         428	STORE_FAST(arg=33, lineno=62)
         430	LOAD_FAST(arg=30, lineno=64)
         432	LOAD_CONST(arg=2, lineno=64)
         434	BINARY_MODULO(arg=None, lineno=64)
         436	LOAD_CONST(arg=1, lineno=64)
         438	COMPARE_OP(arg=2, lineno=64)
         440	POP_JUMP_IF_FALSE(arg=478, lineno=64)
         444	LOAD_FAST(arg=17, lineno=65)
         446	LOAD_FAST(arg=30, lineno=65)
         448	DUP_TOP_TWO(arg=None, lineno=65)
         450	BINARY_SUBSCR(arg=None, lineno=65)
         452	LOAD_FAST(arg=33, lineno=65)
         454	LOAD_FAST(arg=32, lineno=65)
         456	BINARY_MULTIPLY(arg=None, lineno=65)
         458	LOAD_FAST(arg=28, lineno=65)
         460	LOAD_FAST(arg=31, lineno=65)
         462	LOAD_CONST(arg=2, lineno=65)
         464	BINARY_FLOOR_DIVIDE(arg=None, lineno=65)
         466	BINARY_SUBSCR(arg=None, lineno=65)
         468	BINARY_MULTIPLY(arg=None, lineno=65)
         470	INPLACE_ADD(arg=None, lineno=65)
         472	ROT_THREE(arg=None, lineno=65)
         474	STORE_SUBSCR(arg=None, lineno=65)
         476	JUMP_FORWARD(arg=28, lineno=65)
>        478	LOAD_FAST(arg=17, lineno=67)
         480	LOAD_FAST(arg=30, lineno=67)
         482	DUP_TOP_TWO(arg=None, lineno=67)
         484	BINARY_SUBSCR(arg=None, lineno=67)
         486	LOAD_FAST(arg=33, lineno=67)
         488	LOAD_FAST(arg=32, lineno=67)
         490	BINARY_MULTIPLY(arg=None, lineno=67)
         492	LOAD_FAST(arg=29, lineno=67)
         494	LOAD_FAST(arg=31, lineno=67)
         496	BINARY_SUBSCR(arg=None, lineno=67)
         498	BINARY_MULTIPLY(arg=None, lineno=67)
         500	INPLACE_ADD(arg=None, lineno=67)
         502	ROT_THREE(arg=None, lineno=67)
         504	STORE_SUBSCR(arg=None, lineno=67)
>        506	JUMP_ABSOLUTE(arg=378, lineno=67)
>        510	LOAD_FAST(arg=15, lineno=69)
         512	LOAD_FAST(arg=17, lineno=69)
         514	INPLACE_ADD(arg=None, lineno=69)
         516	STORE_FAST(arg=15, lineno=69)
         518	JUMP_ABSOLUTE(arg=158, lineno=69)
>        520	LOAD_FAST(arg=5, lineno=71)
         522	POP_JUMP_IF_FALSE(arg=580, lineno=71)
         526	LOAD_GLOBAL(arg=13, lineno=72)
         528	LOAD_FAST(arg=15, lineno=72)
         530	LOAD_ATTR(arg=0, lineno=72)
         532	LOAD_CONST(arg=1, lineno=72)
         534	BINARY_SUBSCR(arg=None, lineno=72)
         536	CALL_FUNCTION(arg=1, lineno=72)
         538	GET_ITER(arg=None, lineno=72)
>        540	FOR_ITER(arg=38, lineno=72)
         542	STORE_FAST(arg=16, lineno=72)
         544	LOAD_FAST(arg=9, lineno=73)
         546	LOAD_FAST(arg=16, lineno=73)
         548	BINARY_ADD(arg=None, lineno=73)
         550	STORE_FAST(arg=34, lineno=73)
         552	LOAD_FAST(arg=15, lineno=74)
         554	LOAD_FAST(arg=16, lineno=74)
         556	DUP_TOP_TWO(arg=None, lineno=74)
         558	BINARY_SUBSCR(arg=None, lineno=74)
         560	LOAD_CONST(arg=7, lineno=74)
         562	LOAD_FAST(arg=34, lineno=74)
         564	LOAD_CONST(arg=2, lineno=74)
         566	BINARY_FLOOR_DIVIDE(arg=None, lineno=74)
         568	BINARY_POWER(arg=None, lineno=74)
         570	INPLACE_MULTIPLY(arg=None, lineno=74)
         572	ROT_THREE(arg=None, lineno=74)
         574	STORE_SUBSCR(arg=None, lineno=74)
         576	JUMP_ABSOLUTE(arg=540, lineno=74)
>        580	LOAD_FAST(arg=15, lineno=76)
         582	RETURN_VALUE(arg=None, lineno=76)
DEBUG 2022-02-14 16:37:57,790 pending: deque([State(pc_initial=0 nstack_initial=0)])
DEBUG 2022-02-14 16:37:57,790 stack: []
DEBUG 2022-02-14 16:37:57,790 dispatch pc=0, inst=NOP(arg=None, lineno=20)
DEBUG 2022-02-14 16:37:57,790 stack []
DEBUG 2022-02-14 16:37:57,791 dispatch pc=2, inst=LOAD_FAST(arg=1, lineno=20)
DEBUG 2022-02-14 16:37:57,791 stack []
DEBUG 2022-02-14 16:37:57,791 dispatch pc=4, inst=LOAD_CONST(arg=1, lineno=20)
DEBUG 2022-02-14 16:37:57,791 stack ['$D2.0']
DEBUG 2022-02-14 16:37:57,791 dispatch pc=6, inst=BINARY_SUBSCR(arg=None, lineno=20)
DEBUG 2022-02-14 16:37:57,791 stack ['$D2.0', '$const4.1']
DEBUG 2022-02-14 16:37:57,791 dispatch pc=8, inst=STORE_FAST(arg=6, lineno=20)
DEBUG 2022-02-14 16:37:57,791 stack ['$6binary_subscr.2']
DEBUG 2022-02-14 16:37:57,791 dispatch pc=10, inst=LOAD_FAST(arg=0, lineno=21)
DEBUG 2022-02-14 16:37:57,791 stack []
DEBUG 2022-02-14 16:37:57,791 dispatch pc=12, inst=LOAD_CONST(arg=1, lineno=21)
DEBUG 2022-02-14 16:37:57,791 stack ['$A10.3']
DEBUG 2022-02-14 16:37:57,791 dispatch pc=14, inst=LOAD_CONST(arg=0, lineno=21)
DEBUG 2022-02-14 16:37:57,791 stack ['$A10.3', '$const12.4']
DEBUG 2022-02-14 16:37:57,791 dispatch pc=16, inst=LOAD_CONST(arg=0, lineno=21)
DEBUG 2022-02-14 16:37:57,791 stack ['$A10.3', '$const12.4', '$const14.5']
DEBUG 2022-02-14 16:37:57,791 dispatch pc=18, inst=BUILD_SLICE(arg=2, lineno=21)
DEBUG 2022-02-14 16:37:57,791 stack ['$A10.3', '$const12.4', '$const14.5', '$const16.6']
DEBUG 2022-02-14 16:37:57,791 dispatch pc=20, inst=BUILD_TUPLE(arg=2, lineno=21)
DEBUG 2022-02-14 16:37:57,791 stack ['$A10.3', '$const12.4', '$18build_slice.8']
DEBUG 2022-02-14 16:37:57,791 dispatch pc=22, inst=BINARY_SUBSCR(arg=None, lineno=21)
DEBUG 2022-02-14 16:37:57,791 stack ['$A10.3', '$20build_tuple.9']
DEBUG 2022-02-14 16:37:57,792 dispatch pc=24, inst=STORE_FAST(arg=7, lineno=21)
DEBUG 2022-02-14 16:37:57,792 stack ['$22binary_subscr.10']
DEBUG 2022-02-14 16:37:57,792 dispatch pc=26, inst=LOAD_FAST(arg=0, lineno=23)
DEBUG 2022-02-14 16:37:57,792 stack []
DEBUG 2022-02-14 16:37:57,792 dispatch pc=28, inst=LOAD_ATTR(arg=0, lineno=23)
DEBUG 2022-02-14 16:37:57,792 stack ['$A26.11']
DEBUG 2022-02-14 16:37:57,792 dispatch pc=30, inst=LOAD_CONST(arg=1, lineno=23)
DEBUG 2022-02-14 16:37:57,792 stack ['$28load_attr.12']
DEBUG 2022-02-14 16:37:57,792 dispatch pc=32, inst=BINARY_SUBSCR(arg=None, lineno=23)
DEBUG 2022-02-14 16:37:57,792 stack ['$28load_attr.12', '$const30.13']
DEBUG 2022-02-14 16:37:57,792 dispatch pc=34, inst=STORE_FAST(arg=8, lineno=23)
DEBUG 2022-02-14 16:37:57,792 stack ['$32binary_subscr.14']
DEBUG 2022-02-14 16:37:57,792 dispatch pc=36, inst=LOAD_CONST(arg=2, lineno=24)
DEBUG 2022-02-14 16:37:57,792 stack []
DEBUG 2022-02-14 16:37:57,792 dispatch pc=38, inst=LOAD_FAST(arg=2, lineno=24)
DEBUG 2022-02-14 16:37:57,792 stack ['$const36.15']
DEBUG 2022-02-14 16:37:57,792 dispatch pc=40, inst=LOAD_METHOD(arg=1, lineno=24)
DEBUG 2022-02-14 16:37:57,792 stack ['$const36.15', '$fixed_edge_reps38.16']
DEBUG 2022-02-14 16:37:57,792 dispatch pc=42, inst=CALL_METHOD(arg=0, lineno=24)
DEBUG 2022-02-14 16:37:57,792 stack ['$const36.15', '$40load_method.17']
DEBUG 2022-02-14 16:37:57,792 dispatch pc=44, inst=BINARY_MULTIPLY(arg=None, lineno=24)
DEBUG 2022-02-14 16:37:57,792 stack ['$const36.15', '$42call_method.18']
DEBUG 2022-02-14 16:37:57,792 dispatch pc=46, inst=STORE_FAST(arg=9, lineno=24)
DEBUG 2022-02-14 16:37:57,793 stack ['$44binary_multiply.19']
DEBUG 2022-02-14 16:37:57,793 dispatch pc=48, inst=LOAD_FAST(arg=9, lineno=26)
DEBUG 2022-02-14 16:37:57,793 stack []
DEBUG 2022-02-14 16:37:57,793 dispatch pc=50, inst=LOAD_CONST(arg=2, lineno=26)
DEBUG 2022-02-14 16:37:57,793 stack ['$N_fixed48.20']
DEBUG 2022-02-14 16:37:57,793 dispatch pc=52, inst=LOAD_FAST(arg=3, lineno=26)
DEBUG 2022-02-14 16:37:57,793 stack ['$N_fixed48.20', '$const50.21']
DEBUG 2022-02-14 16:37:57,793 dispatch pc=54, inst=BINARY_MULTIPLY(arg=None, lineno=26)
DEBUG 2022-02-14 16:37:57,793 stack ['$N_fixed48.20', '$const50.21', '$batch_max52.22']
DEBUG 2022-02-14 16:37:57,793 dispatch pc=56, inst=BINARY_ADD(arg=None, lineno=26)
DEBUG 2022-02-14 16:37:57,793 stack ['$N_fixed48.20', '$54binary_multiply.23']
DEBUG 2022-02-14 16:37:57,793 dispatch pc=58, inst=LOAD_FAST(arg=4, lineno=26)
DEBUG 2022-02-14 16:37:57,793 stack ['$56binary_add.24']
DEBUG 2022-02-14 16:37:57,793 dispatch pc=60, inst=BINARY_ADD(arg=None, lineno=26)
DEBUG 2022-02-14 16:37:57,793 stack ['$56binary_add.24', '$odd_cutoff58.25']
DEBUG 2022-02-14 16:37:57,793 dispatch pc=62, inst=STORE_FAST(arg=10, lineno=26)
DEBUG 2022-02-14 16:37:57,793 stack ['$60binary_add.26']
DEBUG 2022-02-14 16:37:57,793 dispatch pc=64, inst=LOAD_GLOBAL(arg=2, lineno=28)
DEBUG 2022-02-14 16:37:57,793 stack []
DEBUG 2022-02-14 16:37:57,793 dispatch pc=66, inst=LOAD_METHOD(arg=3, lineno=28)
DEBUG 2022-02-14 16:37:57,793 stack ['$64load_global.27']
DEBUG 2022-02-14 16:37:57,793 dispatch pc=68, inst=LOAD_GLOBAL(arg=2, lineno=28)
DEBUG 2022-02-14 16:37:57,793 stack ['$66load_method.28']
DEBUG 2022-02-14 16:37:57,794 dispatch pc=70, inst=LOAD_METHOD(arg=4, lineno=28)
DEBUG 2022-02-14 16:37:57,794 stack ['$66load_method.28', '$68load_global.29']
DEBUG 2022-02-14 16:37:57,794 dispatch pc=72, inst=LOAD_FAST(arg=3, lineno=28)
DEBUG 2022-02-14 16:37:57,794 stack ['$66load_method.28', '$70load_method.30']
DEBUG 2022-02-14 16:37:57,794 dispatch pc=74, inst=BUILD_LIST(arg=1, lineno=28)
DEBUG 2022-02-14 16:37:57,794 stack ['$66load_method.28', '$70load_method.30', '$batch_max72.31']
DEBUG 2022-02-14 16:37:57,794 dispatch pc=76, inst=CALL_METHOD(arg=1, lineno=28)
DEBUG 2022-02-14 16:37:57,794 stack ['$66load_method.28', '$70load_method.30', '$74build_list.32']
DEBUG 2022-02-14 16:37:57,794 dispatch pc=78, inst=LOAD_FAST(arg=2, lineno=28)
DEBUG 2022-02-14 16:37:57,794 stack ['$66load_method.28', '$76call_method.33']
DEBUG 2022-02-14 16:37:57,794 dispatch pc=80, inst=BUILD_TUPLE(arg=2, lineno=28)
DEBUG 2022-02-14 16:37:57,794 stack ['$66load_method.28', '$76call_method.33', '$fixed_edge_reps78.34']
DEBUG 2022-02-14 16:37:57,794 dispatch pc=82, inst=CALL_METHOD(arg=1, lineno=28)
DEBUG 2022-02-14 16:37:57,794 stack ['$66load_method.28', '$80build_tuple.35']
DEBUG 2022-02-14 16:37:57,794 dispatch pc=84, inst=STORE_FAST(arg=11, lineno=28)
DEBUG 2022-02-14 16:37:57,794 stack ['$82call_method.36']
DEBUG 2022-02-14 16:37:57,794 dispatch pc=86, inst=LOAD_GLOBAL(arg=2, lineno=29)
DEBUG 2022-02-14 16:37:57,794 stack []
DEBUG 2022-02-14 16:37:57,794 dispatch pc=88, inst=LOAD_METHOD(arg=5, lineno=29)
DEBUG 2022-02-14 16:37:57,794 stack ['$86load_global.37']
DEBUG 2022-02-14 16:37:57,794 dispatch pc=90, inst=LOAD_FAST(arg=11, lineno=29)
DEBUG 2022-02-14 16:37:57,795 stack ['$88load_method.38']
DEBUG 2022-02-14 16:37:57,795 dispatch pc=92, inst=LOAD_CONST(arg=3, lineno=29)
DEBUG 2022-02-14 16:37:57,795 stack ['$88load_method.38', '$edge_reps90.39']
DEBUG 2022-02-14 16:37:57,795 dispatch pc=94, inst=BINARY_ADD(arg=None, lineno=29)
DEBUG 2022-02-14 16:37:57,795 stack ['$88load_method.38', '$edge_reps90.39', '$const92.40']
DEBUG 2022-02-14 16:37:57,795 dispatch pc=96, inst=CALL_METHOD(arg=1, lineno=29)
DEBUG 2022-02-14 16:37:57,795 stack ['$88load_method.38', '$94binary_add.41']
DEBUG 2022-02-14 16:37:57,795 dispatch pc=98, inst=STORE_FAST(arg=12, lineno=29)
DEBUG 2022-02-14 16:37:57,795 stack ['$96call_method.42']
DEBUG 2022-02-14 16:37:57,795 dispatch pc=100, inst=LOAD_FAST(arg=11, lineno=31)
DEBUG 2022-02-14 16:37:57,795 stack []
DEBUG 2022-02-14 16:37:57,795 dispatch pc=102, inst=LOAD_METHOD(arg=6, lineno=31)
DEBUG 2022-02-14 16:37:57,795 stack ['$edge_reps100.43']
DEBUG 2022-02-14 16:37:57,795 dispatch pc=104, inst=CALL_METHOD(arg=0, lineno=31)
DEBUG 2022-02-14 16:37:57,795 stack ['$102load_method.44']
DEBUG 2022-02-14 16:37:57,795 dispatch pc=106, inst=LOAD_FAST(arg=4, lineno=31)
DEBUG 2022-02-14 16:37:57,795 stack ['$104call_method.45']
DEBUG 2022-02-14 16:37:57,795 dispatch pc=108, inst=BINARY_ADD(arg=None, lineno=31)
DEBUG 2022-02-14 16:37:57,795 stack ['$104call_method.45', '$odd_cutoff106.46']
DEBUG 2022-02-14 16:37:57,795 dispatch pc=110, inst=STORE_FAST(arg=13, lineno=31)
DEBUG 2022-02-14 16:37:57,795 stack ['$108binary_add.47']
DEBUG 2022-02-14 16:37:57,795 dispatch pc=112, inst=LOAD_GLOBAL(arg=7, lineno=32)
DEBUG 2022-02-14 16:37:57,795 stack []
DEBUG 2022-02-14 16:37:57,796 dispatch pc=114, inst=LOAD_FAST(arg=13, lineno=32)
DEBUG 2022-02-14 16:37:57,796 stack ['$112load_global.48']
DEBUG 2022-02-14 16:37:57,796 dispatch pc=116, inst=CALL_FUNCTION(arg=1, lineno=32)
DEBUG 2022-02-14 16:37:57,796 stack ['$112load_global.48', '$max_binom114.49']
DEBUG 2022-02-14 16:37:57,796 dispatch pc=118, inst=STORE_FAST(arg=14, lineno=32)
DEBUG 2022-02-14 16:37:57,796 stack ['$116call_function.50']
DEBUG 2022-02-14 16:37:57,796 dispatch pc=120, inst=LOAD_GLOBAL(arg=2, lineno=34)
DEBUG 2022-02-14 16:37:57,796 stack []
DEBUG 2022-02-14 16:37:57,796 dispatch pc=122, inst=LOAD_ATTR(arg=8, lineno=34)
DEBUG 2022-02-14 16:37:57,796 stack ['$120load_global.51']
DEBUG 2022-02-14 16:37:57,796 dispatch pc=124, inst=LOAD_CONST(arg=2, lineno=34)
DEBUG 2022-02-14 16:37:57,796 stack ['$122load_attr.52']
DEBUG 2022-02-14 16:37:57,796 dispatch pc=126, inst=LOAD_FAST(arg=3, lineno=34)
DEBUG 2022-02-14 16:37:57,796 stack ['$122load_attr.52', '$const124.53']
DEBUG 2022-02-14 16:37:57,796 dispatch pc=128, inst=BINARY_MULTIPLY(arg=None, lineno=34)
DEBUG 2022-02-14 16:37:57,796 stack ['$122load_attr.52', '$const124.53', '$batch_max126.54']
DEBUG 2022-02-14 16:37:57,796 dispatch pc=130, inst=LOAD_FAST(arg=4, lineno=34)
DEBUG 2022-02-14 16:37:57,796 stack ['$122load_attr.52', '$128binary_multiply.55']
DEBUG 2022-02-14 16:37:57,796 dispatch pc=132, inst=BINARY_ADD(arg=None, lineno=34)
DEBUG 2022-02-14 16:37:57,796 stack ['$122load_attr.52', '$128binary_multiply.55', '$odd_cutoff130.56']
DEBUG 2022-02-14 16:37:57,796 dispatch pc=134, inst=LOAD_CONST(arg=3, lineno=34)
DEBUG 2022-02-14 16:37:57,796 stack ['$122load_attr.52', '$132binary_add.57']
DEBUG 2022-02-14 16:37:57,796 dispatch pc=136, inst=BINARY_ADD(arg=None, lineno=34)
DEBUG 2022-02-14 16:37:57,796 stack ['$122load_attr.52', '$132binary_add.57', '$const134.58']
DEBUG 2022-02-14 16:37:57,797 dispatch pc=138, inst=LOAD_GLOBAL(arg=2, lineno=34)
DEBUG 2022-02-14 16:37:57,797 stack ['$122load_attr.52', '$136binary_add.59']
DEBUG 2022-02-14 16:37:57,797 dispatch pc=140, inst=LOAD_ATTR(arg=9, lineno=34)
DEBUG 2022-02-14 16:37:57,797 stack ['$122load_attr.52', '$136binary_add.59', '$138load_global.60']
DEBUG 2022-02-14 16:37:57,797 dispatch pc=142, inst=LOAD_CONST(arg=4, lineno=34)
DEBUG 2022-02-14 16:37:57,797 stack ['$122load_attr.52', '$136binary_add.59', '$140load_attr.61']
DEBUG 2022-02-14 16:37:57,797 dispatch pc=144, inst=CALL_FUNCTION_KW(arg=2, lineno=34)
DEBUG 2022-02-14 16:37:57,797 stack ['$122load_attr.52', '$136binary_add.59', '$140load_attr.61', '$const142.62']
DEBUG 2022-02-14 16:37:57,797 dispatch pc=146, inst=STORE_FAST(arg=15, lineno=34)
DEBUG 2022-02-14 16:37:57,797 stack ['$144call_function_kw.63']
DEBUG 2022-02-14 16:37:57,797 dispatch pc=148, inst=LOAD_GLOBAL(arg=10, lineno=35)
DEBUG 2022-02-14 16:37:57,797 stack []
DEBUG 2022-02-14 16:37:57,797 dispatch pc=150, inst=LOAD_METHOD(arg=11, lineno=35)
DEBUG 2022-02-14 16:37:57,797 stack ['$148load_global.64']
DEBUG 2022-02-14 16:37:57,797 dispatch pc=152, inst=LOAD_FAST(arg=12, lineno=35)
DEBUG 2022-02-14 16:37:57,797 stack ['$150load_method.65']
DEBUG 2022-02-14 16:37:57,797 dispatch pc=154, inst=CALL_METHOD(arg=1, lineno=35)
DEBUG 2022-02-14 16:37:57,797 stack ['$150load_method.65', '$steps152.66']
DEBUG 2022-02-14 16:37:57,797 dispatch pc=156, inst=GET_ITER(arg=None, lineno=35)
DEBUG 2022-02-14 16:37:57,797 stack ['$154call_method.67']
DEBUG 2022-02-14 16:37:57,797 end state. edges=[Edge(pc=158, stack=('$156get_iter.68',), blockstack=(), npush=0)]
DEBUG 2022-02-14 16:37:57,797 pending: deque([State(pc_initial=158 nstack_initial=1)])
DEBUG 2022-02-14 16:37:57,798 stack: ['$phi158.0']
DEBUG 2022-02-14 16:37:57,798 dispatch pc=158, inst=FOR_ITER(arg=358, lineno=35)
DEBUG 2022-02-14 16:37:57,798 stack ['$phi158.0']
DEBUG 2022-02-14 16:37:57,798 end state. edges=[Edge(pc=520, stack=(), blockstack=(), npush=0), Edge(pc=162, stack=('$phi158.0', '$158for_iter.2'), blockstack=(), npush=0)]
DEBUG 2022-02-14 16:37:57,798 pending: deque([State(pc_initial=520 nstack_initial=0), State(pc_initial=162 nstack_initial=2)])
DEBUG 2022-02-14 16:37:57,798 stack: []
DEBUG 2022-02-14 16:37:57,798 dispatch pc=520, inst=LOAD_FAST(arg=5, lineno=71)
DEBUG 2022-02-14 16:37:57,798 stack []
DEBUG 2022-02-14 16:37:57,798 dispatch pc=522, inst=POP_JUMP_IF_FALSE(arg=580, lineno=71)
DEBUG 2022-02-14 16:37:57,798 stack ['$glynn520.0']
DEBUG 2022-02-14 16:37:57,798 end state. edges=[Edge(pc=526, stack=(), blockstack=(), npush=0), Edge(pc=580, stack=(), blockstack=(), npush=0)]
DEBUG 2022-02-14 16:37:57,798 pending: deque([State(pc_initial=162 nstack_initial=2), State(pc_initial=526 nstack_initial=0), State(pc_initial=580 nstack_initial=0)])
DEBUG 2022-02-14 16:37:57,798 stack: ['$phi162.0', '$phi162.1']
DEBUG 2022-02-14 16:37:57,799 dispatch pc=162, inst=STORE_FAST(arg=16, lineno=35)
DEBUG 2022-02-14 16:37:57,799 stack ['$phi162.0', '$phi162.1']
DEBUG 2022-02-14 16:37:57,799 dispatch pc=164, inst=LOAD_GLOBAL(arg=2, lineno=37)
DEBUG 2022-02-14 16:37:57,799 stack ['$phi162.0']
DEBUG 2022-02-14 16:37:57,799 dispatch pc=166, inst=LOAD_ATTR(arg=8, lineno=37)
DEBUG 2022-02-14 16:37:57,799 stack ['$phi162.0', '$164load_global.2']
DEBUG 2022-02-14 16:37:57,799 dispatch pc=168, inst=LOAD_CONST(arg=2, lineno=37)
DEBUG 2022-02-14 16:37:57,799 stack ['$phi162.0', '$166load_attr.3']
DEBUG 2022-02-14 16:37:57,799 dispatch pc=170, inst=LOAD_FAST(arg=3, lineno=37)
DEBUG 2022-02-14 16:37:57,799 stack ['$phi162.0', '$166load_attr.3', '$const168.4']
DEBUG 2022-02-14 16:37:57,799 dispatch pc=172, inst=BINARY_MULTIPLY(arg=None, lineno=37)
DEBUG 2022-02-14 16:37:57,799 stack ['$phi162.0', '$166load_attr.3', '$const168.4', '$batch_max170.5']
DEBUG 2022-02-14 16:37:57,799 dispatch pc=174, inst=LOAD_FAST(arg=4, lineno=37)
DEBUG 2022-02-14 16:37:57,799 stack ['$phi162.0', '$166load_attr.3', '$172binary_multiply.6']
DEBUG 2022-02-14 16:37:57,800 dispatch pc=176, inst=BINARY_ADD(arg=None, lineno=37)
DEBUG 2022-02-14 16:37:57,800 stack ['$phi162.0', '$166load_attr.3', '$172binary_multiply.6', '$odd_cutoff174.7']
DEBUG 2022-02-14 16:37:57,800 dispatch pc=178, inst=LOAD_CONST(arg=3, lineno=37)
DEBUG 2022-02-14 16:37:57,800 stack ['$phi162.0', '$166load_attr.3', '$176binary_add.8']
DEBUG 2022-02-14 16:37:57,800 dispatch pc=180, inst=BINARY_ADD(arg=None, lineno=37)
DEBUG 2022-02-14 16:37:57,800 stack ['$phi162.0', '$166load_attr.3', '$176binary_add.8', '$const178.9']
DEBUG 2022-02-14 16:37:57,800 dispatch pc=182, inst=LOAD_GLOBAL(arg=2, lineno=37)
DEBUG 2022-02-14 16:37:57,800 stack ['$phi162.0', '$166load_attr.3', '$180binary_add.10']
DEBUG 2022-02-14 16:37:57,800 dispatch pc=184, inst=LOAD_ATTR(arg=9, lineno=37)
DEBUG 2022-02-14 16:37:57,800 stack ['$phi162.0', '$166load_attr.3', '$180binary_add.10', '$182load_global.11']
DEBUG 2022-02-14 16:37:57,800 dispatch pc=186, inst=LOAD_CONST(arg=4, lineno=37)
DEBUG 2022-02-14 16:37:57,800 stack ['$phi162.0', '$166load_attr.3', '$180binary_add.10', '$184load_attr.12']
DEBUG 2022-02-14 16:37:57,800 dispatch pc=188, inst=CALL_FUNCTION_KW(arg=2, lineno=37)
DEBUG 2022-02-14 16:37:57,800 stack ['$phi162.0', '$166load_attr.3', '$180binary_add.10', '$184load_attr.12', '$const186.13']
DEBUG 2022-02-14 16:37:57,800 dispatch pc=190, inst=STORE_FAST(arg=17, lineno=37)
DEBUG 2022-02-14 16:37:57,801 stack ['$phi162.0', '$188call_function_kw.14']
DEBUG 2022-02-14 16:37:57,801 dispatch pc=192, inst=LOAD_GLOBAL(arg=12, lineno=39)
DEBUG 2022-02-14 16:37:57,801 stack ['$phi162.0']
DEBUG 2022-02-14 16:37:57,801 dispatch pc=194, inst=LOAD_FAST(arg=16, lineno=39)
DEBUG 2022-02-14 16:37:57,801 stack ['$phi162.0', '$192load_global.15']
DEBUG 2022-02-14 16:37:57,801 dispatch pc=196, inst=LOAD_FAST(arg=11, lineno=39)
DEBUG 2022-02-14 16:37:57,801 stack ['$phi162.0', '$192load_global.15', '$j194.16']
DEBUG 2022-02-14 16:37:57,801 dispatch pc=198, inst=CALL_FUNCTION(arg=2, lineno=39)
DEBUG 2022-02-14 16:37:57,801 stack ['$phi162.0', '$192load_global.15', '$j194.16', '$edge_reps196.17']
DEBUG 2022-02-14 16:37:57,801 dispatch pc=200, inst=STORE_FAST(arg=18, lineno=39)
DEBUG 2022-02-14 16:37:57,801 stack ['$phi162.0', '$198call_function.18']
DEBUG 2022-02-14 16:37:57,801 dispatch pc=202, inst=LOAD_FAST(arg=18, lineno=40)
DEBUG 2022-02-14 16:37:57,801 stack ['$phi162.0']
DEBUG 2022-02-14 16:37:57,801 dispatch pc=204, inst=LOAD_METHOD(arg=1, lineno=40)
DEBUG 2022-02-14 16:37:57,801 stack ['$phi162.0', '$kept_edges202.19']
DEBUG 2022-02-14 16:37:57,801 dispatch pc=206, inst=CALL_METHOD(arg=0, lineno=40)
DEBUG 2022-02-14 16:37:57,801 stack ['$phi162.0', '$204load_method.20']
DEBUG 2022-02-14 16:37:57,801 dispatch pc=208, inst=STORE_FAST(arg=19, lineno=40)
DEBUG 2022-02-14 16:37:57,801 stack ['$phi162.0', '$206call_method.21']
DEBUG 2022-02-14 16:37:57,801 dispatch pc=210, inst=LOAD_CONST(arg=5, lineno=42)
DEBUG 2022-02-14 16:37:57,801 stack ['$phi162.0']
DEBUG 2022-02-14 16:37:57,801 dispatch pc=212, inst=STORE_FAST(arg=20, lineno=42)
DEBUG 2022-02-14 16:37:57,801 stack ['$phi162.0', '$const210.22']
DEBUG 2022-02-14 16:37:57,802 dispatch pc=214, inst=LOAD_GLOBAL(arg=13, lineno=43)
DEBUG 2022-02-14 16:37:57,802 stack ['$phi162.0']
DEBUG 2022-02-14 16:37:57,802 dispatch pc=216, inst=LOAD_CONST(arg=3, lineno=43)
DEBUG 2022-02-14 16:37:57,802 stack ['$phi162.0', '$214load_global.23']
DEBUG 2022-02-14 16:37:57,802 dispatch pc=218, inst=LOAD_FAST(arg=8, lineno=43)
DEBUG 2022-02-14 16:37:57,802 stack ['$phi162.0', '$214load_global.23', '$const216.24']
DEBUG 2022-02-14 16:37:57,802 dispatch pc=220, inst=LOAD_CONST(arg=2, lineno=43)
DEBUG 2022-02-14 16:37:57,802 stack ['$phi162.0', '$214load_global.23', '$const216.24', '$n218.25']
DEBUG 2022-02-14 16:37:57,802 dispatch pc=222, inst=BINARY_FLOOR_DIVIDE(arg=None, lineno=43)
DEBUG 2022-02-14 16:37:57,802 stack ['$phi162.0', '$214load_global.23', '$const216.24', '$n218.25', '$const220.26']
DEBUG 2022-02-14 16:37:57,802 dispatch pc=224, inst=CALL_FUNCTION(arg=2, lineno=43)
DEBUG 2022-02-14 16:37:57,802 stack ['$phi162.0', '$214load_global.23', '$const216.24', '$222binary_floor_divide.27']
DEBUG 2022-02-14 16:37:57,802 dispatch pc=226, inst=GET_ITER(arg=None, lineno=43)
DEBUG 2022-02-14 16:37:57,802 stack ['$phi162.0', '$224call_function.28']
DEBUG 2022-02-14 16:37:57,802 end state. edges=[Edge(pc=228, stack=('$phi162.0', '$226get_iter.29'), blockstack=(), npush=0)]
DEBUG 2022-02-14 16:37:57,802 pending: deque([State(pc_initial=526 nstack_initial=0), State(pc_initial=580 nstack_initial=0), State(pc_initial=228 nstack_initial=2)])
DEBUG 2022-02-14 16:37:57,802 stack: []
DEBUG 2022-02-14 16:37:57,802 dispatch pc=526, inst=LOAD_GLOBAL(arg=13, lineno=72)
DEBUG 2022-02-14 16:37:57,802 stack []
DEBUG 2022-02-14 16:37:57,802 dispatch pc=528, inst=LOAD_FAST(arg=15, lineno=72)
DEBUG 2022-02-14 16:37:57,803 stack ['$526load_global.0']
DEBUG 2022-02-14 16:37:57,803 dispatch pc=530, inst=LOAD_ATTR(arg=0, lineno=72)
DEBUG 2022-02-14 16:37:57,803 stack ['$526load_global.0', '$H_batch528.1']
DEBUG 2022-02-14 16:37:57,803 dispatch pc=532, inst=LOAD_CONST(arg=1, lineno=72)
DEBUG 2022-02-14 16:37:57,803 stack ['$526load_global.0', '$530load_attr.2']
DEBUG 2022-02-14 16:37:57,803 dispatch pc=534, inst=BINARY_SUBSCR(arg=None, lineno=72)
DEBUG 2022-02-14 16:37:57,803 stack ['$526load_global.0', '$530load_attr.2', '$const532.3']
DEBUG 2022-02-14 16:37:57,803 dispatch pc=536, inst=CALL_FUNCTION(arg=1, lineno=72)
DEBUG 2022-02-14 16:37:57,803 stack ['$526load_global.0', '$534binary_subscr.4']
DEBUG 2022-02-14 16:37:57,803 dispatch pc=538, inst=GET_ITER(arg=None, lineno=72)
DEBUG 2022-02-14 16:37:57,803 stack ['$536call_function.5']
DEBUG 2022-02-14 16:37:57,803 end state. edges=[Edge(pc=540, stack=('$538get_iter.6',), blockstack=(), npush=0)]
DEBUG 2022-02-14 16:37:57,803 pending: deque([State(pc_initial=580 nstack_initial=0), State(pc_initial=228 nstack_initial=2), State(pc_initial=540 nstack_initial=1)])
DEBUG 2022-02-14 16:37:57,803 stack: []
DEBUG 2022-02-14 16:37:57,803 dispatch pc=580, inst=LOAD_FAST(arg=15, lineno=76)
DEBUG 2022-02-14 16:37:57,803 stack []
DEBUG 2022-02-14 16:37:57,803 dispatch pc=582, inst=RETURN_VALUE(arg=None, lineno=76)
DEBUG 2022-02-14 16:37:57,803 stack ['$H_batch580.0']
DEBUG 2022-02-14 16:37:57,803 end state. edges=[]
DEBUG 2022-02-14 16:37:57,803 pending: deque([State(pc_initial=228 nstack_initial=2), State(pc_initial=540 nstack_initial=1)])
DEBUG 2022-02-14 16:37:57,803 stack: ['$phi228.0', '$phi228.1']
DEBUG 2022-02-14 16:37:57,804 dispatch pc=228, inst=FOR_ITER(arg=28, lineno=43)
DEBUG 2022-02-14 16:37:57,804 stack ['$phi228.0', '$phi228.1']
DEBUG 2022-02-14 16:37:57,804 end state. edges=[Edge(pc=258, stack=('$phi228.0',), blockstack=(), npush=0), Edge(pc=230, stack=('$phi228.0', '$phi228.1', '$228for_iter.3'), blockstack=(), npush=0)]
DEBUG 2022-02-14 16:37:57,804 pending: deque([State(pc_initial=540 nstack_initial=1), State(pc_initial=258 nstack_initial=1), State(pc_initial=230 nstack_initial=3)])
DEBUG 2022-02-14 16:37:57,804 stack: ['$phi540.0']
DEBUG 2022-02-14 16:37:57,804 dispatch pc=540, inst=FOR_ITER(arg=38, lineno=72)
DEBUG 2022-02-14 16:37:57,804 stack ['$phi540.0']
DEBUG 2022-02-14 16:37:57,804 end state. edges=[Edge(pc=580, stack=(), blockstack=(), npush=0), Edge(pc=542, stack=('$phi540.0', '$540for_iter.2'), blockstack=(), npush=0)]
DEBUG 2022-02-14 16:37:57,804 pending: deque([State(pc_initial=258 nstack_initial=1), State(pc_initial=230 nstack_initial=3), State(pc_initial=580 nstack_initial=0), State(pc_initial=542 nstack_initial=2)])
DEBUG 2022-02-14 16:37:57,804 stack: ['$phi258.0']
DEBUG 2022-02-14 16:37:57,804 dispatch pc=258, inst=LOAD_FAST(arg=5, lineno=46)
DEBUG 2022-02-14 16:37:57,804 stack ['$phi258.0']
DEBUG 2022-02-14 16:37:57,804 dispatch pc=260, inst=POP_JUMP_IF_FALSE(arg=278, lineno=46)
DEBUG 2022-02-14 16:37:57,804 stack ['$phi258.0', '$glynn258.1']
DEBUG 2022-02-14 16:37:57,804 end state. edges=[Edge(pc=264, stack=('$phi258.0',), blockstack=(), npush=0), Edge(pc=278, stack=('$phi258.0',), blockstack=(), npush=0)]
DEBUG 2022-02-14 16:37:57,804 pending: deque([State(pc_initial=230 nstack_initial=3), State(pc_initial=580 nstack_initial=0), State(pc_initial=542 nstack_initial=2), State(pc_initial=264 nstack_initial=1), State(pc_initial=278 nstack_initial=1)])
DEBUG 2022-02-14 16:37:57,804 stack: ['$phi230.0', '$phi230.1', '$phi230.2']
DEBUG 2022-02-14 16:37:57,805 dispatch pc=230, inst=STORE_FAST(arg=21, lineno=43)
DEBUG 2022-02-14 16:37:57,805 stack ['$phi230.0', '$phi230.1', '$phi230.2']
DEBUG 2022-02-14 16:37:57,805 dispatch pc=232, inst=LOAD_FAST(arg=20, lineno=44)
DEBUG 2022-02-14 16:37:57,805 stack ['$phi230.0', '$phi230.1']
DEBUG 2022-02-14 16:37:57,805 dispatch pc=234, inst=LOAD_FAST(arg=14, lineno=44)
DEBUG 2022-02-14 16:37:57,805 stack ['$phi230.0', '$phi230.1', '$binom_prod232.3']
DEBUG 2022-02-14 16:37:57,805 dispatch pc=236, inst=LOAD_FAST(arg=11, lineno=44)
DEBUG 2022-02-14 16:37:57,805 stack ['$phi230.0', '$phi230.1', '$binom_prod232.3', '$binoms234.4']
DEBUG 2022-02-14 16:37:57,805 dispatch pc=238, inst=LOAD_FAST(arg=21, lineno=44)
DEBUG 2022-02-14 16:37:57,805 stack ['$phi230.0', '$phi230.1', '$binom_prod232.3', '$binoms234.4', '$edge_reps236.5']
DEBUG 2022-02-14 16:37:57,805 dispatch pc=240, inst=BINARY_SUBSCR(arg=None, lineno=44)
DEBUG 2022-02-14 16:37:57,805 stack ['$phi230.0', '$phi230.1', '$binom_prod232.3', '$binoms234.4', '$edge_reps236.5', '$i238.6']
DEBUG 2022-02-14 16:37:57,805 dispatch pc=242, inst=LOAD_FAST(arg=18, lineno=44)
DEBUG 2022-02-14 16:37:57,805 stack ['$phi230.0', '$phi230.1', '$binom_prod232.3', '$binoms234.4', '$240binary_subscr.7']
DEBUG 2022-02-14 16:37:57,805 dispatch pc=244, inst=LOAD_FAST(arg=21, lineno=44)
DEBUG 2022-02-14 16:37:57,805 stack ['$phi230.0', '$phi230.1', '$binom_prod232.3', '$binoms234.4', '$240binary_subscr.7', '$kept_edges242.8']
DEBUG 2022-02-14 16:37:57,805 dispatch pc=246, inst=BINARY_SUBSCR(arg=None, lineno=44)
DEBUG 2022-02-14 16:37:57,805 stack ['$phi230.0', '$phi230.1', '$binom_prod232.3', '$binoms234.4', '$240binary_subscr.7', '$kept_edges242.8', '$i244.9']
DEBUG 2022-02-14 16:37:57,806 dispatch pc=248, inst=BUILD_TUPLE(arg=2, lineno=44)
DEBUG 2022-02-14 16:37:57,806 stack ['$phi230.0', '$phi230.1', '$binom_prod232.3', '$binoms234.4', '$240binary_subscr.7', '$246binary_subscr.10']
DEBUG 2022-02-14 16:37:57,806 dispatch pc=250, inst=BINARY_SUBSCR(arg=None, lineno=44)
DEBUG 2022-02-14 16:37:57,806 stack ['$phi230.0', '$phi230.1', '$binom_prod232.3', '$binoms234.4', '$248build_tuple.11']
DEBUG 2022-02-14 16:37:57,806 dispatch pc=252, inst=INPLACE_MULTIPLY(arg=None, lineno=44)
DEBUG 2022-02-14 16:37:57,806 stack ['$phi230.0', '$phi230.1', '$binom_prod232.3', '$250binary_subscr.12']
DEBUG 2022-02-14 16:37:57,806 dispatch pc=254, inst=STORE_FAST(arg=20, lineno=44)
DEBUG 2022-02-14 16:37:57,806 stack ['$phi230.0', '$phi230.1', '$252inplace_multiply.13']
DEBUG 2022-02-14 16:37:57,806 dispatch pc=256, inst=JUMP_ABSOLUTE(arg=228, lineno=44)
DEBUG 2022-02-14 16:37:57,806 stack ['$phi230.0', '$phi230.1']
DEBUG 2022-02-14 16:37:57,806 end state. edges=[Edge(pc=228, stack=('$phi230.0', '$phi230.1'), blockstack=(), npush=0)]
DEBUG 2022-02-14 16:37:57,806 pending: deque([State(pc_initial=580 nstack_initial=0), State(pc_initial=542 nstack_initial=2), State(pc_initial=264 nstack_initial=1), State(pc_initial=278 nstack_initial=1), State(pc_initial=228 nstack_initial=2)])
DEBUG 2022-02-14 16:37:57,806 pending: deque([State(pc_initial=542 nstack_initial=2), State(pc_initial=264 nstack_initial=1), State(pc_initial=278 nstack_initial=1), State(pc_initial=228 nstack_initial=2)])
DEBUG 2022-02-14 16:37:57,806 stack: ['$phi542.0', '$phi542.1']
DEBUG 2022-02-14 16:37:57,806 dispatch pc=542, inst=STORE_FAST(arg=16, lineno=72)
DEBUG 2022-02-14 16:37:57,806 stack ['$phi542.0', '$phi542.1']
DEBUG 2022-02-14 16:37:57,806 dispatch pc=544, inst=LOAD_FAST(arg=9, lineno=73)
DEBUG 2022-02-14 16:37:57,806 stack ['$phi542.0']
DEBUG 2022-02-14 16:37:57,806 dispatch pc=546, inst=LOAD_FAST(arg=16, lineno=73)
DEBUG 2022-02-14 16:37:57,806 stack ['$phi542.0', '$N_fixed544.2']
DEBUG 2022-02-14 16:37:57,806 dispatch pc=548, inst=BINARY_ADD(arg=None, lineno=73)
DEBUG 2022-02-14 16:37:57,807 stack ['$phi542.0', '$N_fixed544.2', '$j546.3']
DEBUG 2022-02-14 16:37:57,807 dispatch pc=550, inst=STORE_FAST(arg=34, lineno=73)
DEBUG 2022-02-14 16:37:57,807 stack ['$phi542.0', '$548binary_add.4']
DEBUG 2022-02-14 16:37:57,807 dispatch pc=552, inst=LOAD_FAST(arg=15, lineno=74)
DEBUG 2022-02-14 16:37:57,807 stack ['$phi542.0']
DEBUG 2022-02-14 16:37:57,807 dispatch pc=554, inst=LOAD_FAST(arg=16, lineno=74)
DEBUG 2022-02-14 16:37:57,807 stack ['$phi542.0', '$H_batch552.5']
DEBUG 2022-02-14 16:37:57,807 dispatch pc=556, inst=DUP_TOP_TWO(arg=None, lineno=74)
DEBUG 2022-02-14 16:37:57,807 stack ['$phi542.0', '$H_batch552.5', '$j554.6']
DEBUG 2022-02-14 16:37:57,807 dispatch pc=558, inst=BINARY_SUBSCR(arg=None, lineno=74)
DEBUG 2022-02-14 16:37:57,807 stack ['$phi542.0', '$H_batch552.5', '$j554.6', '$556dup_top_two.7', '$556dup_top_two.8']
DEBUG 2022-02-14 16:37:57,807 dispatch pc=560, inst=LOAD_CONST(arg=7, lineno=74)
DEBUG 2022-02-14 16:37:57,807 stack ['$phi542.0', '$H_batch552.5', '$j554.6', '$558binary_subscr.9']
DEBUG 2022-02-14 16:37:57,807 dispatch pc=562, inst=LOAD_FAST(arg=34, lineno=74)
DEBUG 2022-02-14 16:37:57,807 stack ['$phi542.0', '$H_batch552.5', '$j554.6', '$558binary_subscr.9', '$const560.10']
DEBUG 2022-02-14 16:37:57,807 dispatch pc=564, inst=LOAD_CONST(arg=2, lineno=74)
DEBUG 2022-02-14 16:37:57,807 stack ['$phi542.0', '$H_batch552.5', '$j554.6', '$558binary_subscr.9', '$const560.10', '$x562.11']
DEBUG 2022-02-14 16:37:57,807 dispatch pc=566, inst=BINARY_FLOOR_DIVIDE(arg=None, lineno=74)
DEBUG 2022-02-14 16:37:57,807 stack ['$phi542.0', '$H_batch552.5', '$j554.6', '$558binary_subscr.9', '$const560.10', '$x562.11', '$const564.12']
DEBUG 2022-02-14 16:37:57,807 dispatch pc=568, inst=BINARY_POWER(arg=None, lineno=74)
DEBUG 2022-02-14 16:37:57,807 stack ['$phi542.0', '$H_batch552.5', '$j554.6', '$558binary_subscr.9', '$const560.10', '$566binary_floor_divide.13']
DEBUG 2022-02-14 16:37:57,807 dispatch pc=570, inst=INPLACE_MULTIPLY(arg=None, lineno=74)
DEBUG 2022-02-14 16:37:57,807 stack ['$phi542.0', '$H_batch552.5', '$j554.6', '$558binary_subscr.9', '$568binary_power.14']
DEBUG 2022-02-14 16:37:57,808 dispatch pc=572, inst=ROT_THREE(arg=None, lineno=74)
DEBUG 2022-02-14 16:37:57,808 stack ['$phi542.0', '$H_batch552.5', '$j554.6', '$570inplace_multiply.15']
DEBUG 2022-02-14 16:37:57,808 dispatch pc=574, inst=STORE_SUBSCR(arg=None, lineno=74)
DEBUG 2022-02-14 16:37:57,808 stack ['$phi542.0', '$570inplace_multiply.15', '$H_batch552.5', '$j554.6']
DEBUG 2022-02-14 16:37:57,808 dispatch pc=576, inst=JUMP_ABSOLUTE(arg=540, lineno=74)
DEBUG 2022-02-14 16:37:57,808 stack ['$phi542.0']
DEBUG 2022-02-14 16:37:57,808 end state. edges=[Edge(pc=540, stack=('$phi542.0',), blockstack=(), npush=0)]
DEBUG 2022-02-14 16:37:57,808 pending: deque([State(pc_initial=264 nstack_initial=1), State(pc_initial=278 nstack_initial=1), State(pc_initial=228 nstack_initial=2), State(pc_initial=540 nstack_initial=1)])
DEBUG 2022-02-14 16:37:57,808 stack: ['$phi264.0']
DEBUG 2022-02-14 16:37:57,808 dispatch pc=264, inst=LOAD_CONST(arg=2, lineno=47)
DEBUG 2022-02-14 16:37:57,808 stack ['$phi264.0']
DEBUG 2022-02-14 16:37:57,808 dispatch pc=266, inst=LOAD_FAST(arg=18, lineno=47)
DEBUG 2022-02-14 16:37:57,808 stack ['$phi264.0', '$const264.1']
DEBUG 2022-02-14 16:37:57,808 dispatch pc=268, inst=BINARY_MULTIPLY(arg=None, lineno=47)
DEBUG 2022-02-14 16:37:57,808 stack ['$phi264.0', '$const264.1', '$kept_edges266.2']
DEBUG 2022-02-14 16:37:57,808 dispatch pc=270, inst=LOAD_FAST(arg=11, lineno=47)
DEBUG 2022-02-14 16:37:57,808 stack ['$phi264.0', '$268binary_multiply.3']
DEBUG 2022-02-14 16:37:57,808 dispatch pc=272, inst=BINARY_SUBTRACT(arg=None, lineno=47)
DEBUG 2022-02-14 16:37:57,808 stack ['$phi264.0', '$268binary_multiply.3', '$edge_reps270.4']
DEBUG 2022-02-14 16:37:57,808 dispatch pc=274, inst=STORE_FAST(arg=22, lineno=47)
DEBUG 2022-02-14 16:37:57,808 stack ['$phi264.0', '$272binary_subtract.5']
DEBUG 2022-02-14 16:37:57,808 dispatch pc=276, inst=JUMP_FORWARD(arg=4, lineno=47)
DEBUG 2022-02-14 16:37:57,808 stack ['$phi264.0']
DEBUG 2022-02-14 16:37:57,808 end state. edges=[Edge(pc=282, stack=('$phi264.0',), blockstack=(), npush=0)]
DEBUG 2022-02-14 16:37:57,809 pending: deque([State(pc_initial=278 nstack_initial=1), State(pc_initial=228 nstack_initial=2), State(pc_initial=540 nstack_initial=1), State(pc_initial=282 nstack_initial=1)])
DEBUG 2022-02-14 16:37:57,809 stack: ['$phi278.0']
DEBUG 2022-02-14 16:37:57,809 dispatch pc=278, inst=LOAD_FAST(arg=18, lineno=49)
DEBUG 2022-02-14 16:37:57,809 stack ['$phi278.0']
DEBUG 2022-02-14 16:37:57,809 dispatch pc=280, inst=STORE_FAST(arg=22, lineno=49)
DEBUG 2022-02-14 16:37:57,809 stack ['$phi278.0', '$kept_edges278.1']
DEBUG 2022-02-14 16:37:57,809 end state. edges=[Edge(pc=282, stack=('$phi278.0',), blockstack=(), npush=0)]
DEBUG 2022-02-14 16:37:57,809 pending: deque([State(pc_initial=228 nstack_initial=2), State(pc_initial=540 nstack_initial=1), State(pc_initial=282 nstack_initial=1), State(pc_initial=282 nstack_initial=1)])
DEBUG 2022-02-14 16:37:57,809 pending: deque([State(pc_initial=540 nstack_initial=1), State(pc_initial=282 nstack_initial=1), State(pc_initial=282 nstack_initial=1)])
DEBUG 2022-02-14 16:37:57,809 pending: deque([State(pc_initial=282 nstack_initial=1), State(pc_initial=282 nstack_initial=1)])
DEBUG 2022-02-14 16:37:57,809 stack: ['$phi282.0']
DEBUG 2022-02-14 16:37:57,809 dispatch pc=282, inst=LOAD_GLOBAL(arg=14, lineno=51)
DEBUG 2022-02-14 16:37:57,809 stack ['$phi282.0']
DEBUG 2022-02-14 16:37:57,809 dispatch pc=284, inst=LOAD_FAST(arg=22, lineno=51)
DEBUG 2022-02-14 16:37:57,809 stack ['$phi282.0', '$282load_global.1']
DEBUG 2022-02-14 16:37:57,809 dispatch pc=286, inst=LOAD_FAST(arg=0, lineno=51)
DEBUG 2022-02-14 16:37:57,809 stack ['$phi282.0', '$282load_global.1', '$delta284.2']
DEBUG 2022-02-14 16:37:57,809 dispatch pc=288, inst=LOAD_FAST(arg=1, lineno=51)
DEBUG 2022-02-14 16:37:57,809 stack ['$phi282.0', '$282load_global.1', '$delta284.2', '$A286.3']
DEBUG 2022-02-14 16:37:57,809 dispatch pc=290, inst=LOAD_FAST(arg=7, lineno=51)
DEBUG 2022-02-14 16:37:57,809 stack ['$phi282.0', '$282load_global.1', '$delta284.2', '$A286.3', '$D288.4']
DEBUG 2022-02-14 16:37:57,809 dispatch pc=292, inst=CALL_FUNCTION(arg=4, lineno=51)
DEBUG 2022-02-14 16:37:57,809 stack ['$phi282.0', '$282load_global.1', '$delta284.2', '$A286.3', '$D288.4', '$oddV290.5']
DEBUG 2022-02-14 16:37:57,810 dispatch pc=294, inst=UNPACK_SEQUENCE(arg=4, lineno=51)
DEBUG 2022-02-14 16:37:57,810 stack ['$phi282.0', '$292call_function.6']
DEBUG 2022-02-14 16:37:57,810 dispatch pc=296, inst=STORE_FAST(arg=23, lineno=51)
DEBUG 2022-02-14 16:37:57,810 stack ['$phi282.0', '$294unpack_sequence.10', '$294unpack_sequence.9', '$294unpack_sequence.8', '$294unpack_sequence.7']
DEBUG 2022-02-14 16:37:57,810 dispatch pc=298, inst=STORE_FAST(arg=24, lineno=51)
DEBUG 2022-02-14 16:37:57,810 stack ['$phi282.0', '$294unpack_sequence.10', '$294unpack_sequence.9', '$294unpack_sequence.8']
DEBUG 2022-02-14 16:37:57,810 dispatch pc=300, inst=STORE_FAST(arg=25, lineno=51)
DEBUG 2022-02-14 16:37:57,810 stack ['$phi282.0', '$294unpack_sequence.10', '$294unpack_sequence.9']
DEBUG 2022-02-14 16:37:57,810 dispatch pc=302, inst=STORE_FAST(arg=26, lineno=51)
DEBUG 2022-02-14 16:37:57,810 stack ['$phi282.0', '$294unpack_sequence.10']
DEBUG 2022-02-14 16:37:57,810 dispatch pc=304, inst=LOAD_GLOBAL(arg=15, lineno=53)
DEBUG 2022-02-14 16:37:57,810 stack ['$phi282.0']
DEBUG 2022-02-14 16:37:57,810 dispatch pc=306, inst=LOAD_FAST(arg=23, lineno=53)
DEBUG 2022-02-14 16:37:57,810 stack ['$phi282.0', '$304load_global.12']
DEBUG 2022-02-14 16:37:57,810 dispatch pc=308, inst=CALL_FUNCTION(arg=1, lineno=53)
DEBUG 2022-02-14 16:37:57,810 stack ['$phi282.0', '$304load_global.12', '$AX_S306.13']
DEBUG 2022-02-14 16:37:57,810 dispatch pc=310, inst=STORE_FAST(arg=27, lineno=53)
DEBUG 2022-02-14 16:37:57,810 stack ['$phi282.0', '$308call_function.14']
DEBUG 2022-02-14 16:37:57,810 dispatch pc=312, inst=LOAD_GLOBAL(arg=16, lineno=55)
DEBUG 2022-02-14 16:37:57,810 stack ['$phi282.0']
DEBUG 2022-02-14 16:37:57,810 dispatch pc=314, inst=LOAD_FAST(arg=27, lineno=55)
DEBUG 2022-02-14 16:37:57,810 stack ['$phi282.0', '$312load_global.15']
DEBUG 2022-02-14 16:37:57,810 dispatch pc=316, inst=LOAD_FAST(arg=23, lineno=55)
DEBUG 2022-02-14 16:37:57,810 stack ['$phi282.0', '$312load_global.15', '$E314.16']
DEBUG 2022-02-14 16:37:57,811 dispatch pc=318, inst=LOAD_FAST(arg=24, lineno=55)
DEBUG 2022-02-14 16:37:57,811 stack ['$phi282.0', '$312load_global.15', '$E314.16', '$AX_S316.17']
DEBUG 2022-02-14 16:37:57,811 dispatch pc=320, inst=LOAD_FAST(arg=25, lineno=55)
DEBUG 2022-02-14 16:37:57,811 stack ['$phi282.0', '$312load_global.15', '$E314.16', '$AX_S316.17', '$XD_S318.18']
DEBUG 2022-02-14 16:37:57,811 dispatch pc=322, inst=LOAD_FAST(arg=10, lineno=55)
DEBUG 2022-02-14 16:37:57,811 stack ['$phi282.0', '$312load_global.15', '$E314.16', '$AX_S316.17', '$XD_S318.18', '$D_S320.19']
DEBUG 2022-02-14 16:37:57,811 dispatch pc=324, inst=CALL_FUNCTION(arg=5, lineno=55)
DEBUG 2022-02-14 16:37:57,811 stack ['$phi282.0', '$312load_global.15', '$E314.16', '$AX_S316.17', '$XD_S318.18', '$D_S320.19', '$N_max322.20']
DEBUG 2022-02-14 16:37:57,811 dispatch pc=326, inst=STORE_FAST(arg=28, lineno=55)
DEBUG 2022-02-14 16:37:57,811 stack ['$phi282.0', '$324call_function.21']
DEBUG 2022-02-14 16:37:57,811 dispatch pc=328, inst=LOAD_GLOBAL(arg=17, lineno=56)
DEBUG 2022-02-14 16:37:57,811 stack ['$phi282.0']
DEBUG 2022-02-14 16:37:57,811 dispatch pc=330, inst=LOAD_FAST(arg=27, lineno=56)
DEBUG 2022-02-14 16:37:57,811 stack ['$phi282.0', '$328load_global.22']
DEBUG 2022-02-14 16:37:57,811 dispatch pc=332, inst=LOAD_FAST(arg=23, lineno=56)
DEBUG 2022-02-14 16:37:57,811 stack ['$phi282.0', '$328load_global.22', '$E330.23']
DEBUG 2022-02-14 16:37:57,811 dispatch pc=334, inst=LOAD_FAST(arg=24, lineno=56)
DEBUG 2022-02-14 16:37:57,811 stack ['$phi282.0', '$328load_global.22', '$E330.23', '$AX_S332.24']
DEBUG 2022-02-14 16:37:57,811 dispatch pc=336, inst=LOAD_FAST(arg=25, lineno=56)
DEBUG 2022-02-14 16:37:57,811 stack ['$phi282.0', '$328load_global.22', '$E330.23', '$AX_S332.24', '$XD_S334.25']
DEBUG 2022-02-14 16:37:57,811 dispatch pc=338, inst=LOAD_FAST(arg=10, lineno=56)
DEBUG 2022-02-14 16:37:57,811 stack ['$phi282.0', '$328load_global.22', '$E330.23', '$AX_S332.24', '$XD_S334.25', '$D_S336.26']
DEBUG 2022-02-14 16:37:57,811 dispatch pc=340, inst=LOAD_FAST(arg=6, lineno=56)
DEBUG 2022-02-14 16:37:57,811 stack ['$phi282.0', '$328load_global.22', '$E330.23', '$AX_S332.24', '$XD_S334.25', '$D_S336.26', '$N_max338.27']
DEBUG 2022-02-14 16:37:57,811 dispatch pc=342, inst=LOAD_FAST(arg=26, lineno=56)
DEBUG 2022-02-14 16:37:57,812 stack ['$phi282.0', '$328load_global.22', '$E330.23', '$AX_S332.24', '$XD_S334.25', '$D_S336.26', '$N_max338.27', '$oddloop340.28']
DEBUG 2022-02-14 16:37:57,812 dispatch pc=344, inst=CALL_FUNCTION(arg=7, lineno=56)
DEBUG 2022-02-14 16:37:57,812 stack ['$phi282.0', '$328load_global.22', '$E330.23', '$AX_S332.24', '$XD_S334.25', '$D_S336.26', '$N_max338.27', '$oddloop340.28', '$oddVX_S342.29']
DEBUG 2022-02-14 16:37:57,812 dispatch pc=346, inst=STORE_FAST(arg=29, lineno=56)
DEBUG 2022-02-14 16:37:57,812 stack ['$phi282.0', '$344call_function.30']
DEBUG 2022-02-14 16:37:57,812 dispatch pc=348, inst=LOAD_GLOBAL(arg=13, lineno=58)
DEBUG 2022-02-14 16:37:57,812 stack ['$phi282.0']
DEBUG 2022-02-14 16:37:57,812 dispatch pc=350, inst=LOAD_CONST(arg=2, lineno=58)
DEBUG 2022-02-14 16:37:57,812 stack ['$phi282.0', '$348load_global.31']
DEBUG 2022-02-14 16:37:57,812 dispatch pc=352, inst=LOAD_FAST(arg=18, lineno=58)
DEBUG 2022-02-14 16:37:57,812 stack ['$phi282.0', '$348load_global.31', '$const350.32']
DEBUG 2022-02-14 16:37:57,812 dispatch pc=354, inst=LOAD_CONST(arg=1, lineno=58)
DEBUG 2022-02-14 16:37:57,812 stack ['$phi282.0', '$348load_global.31', '$const350.32', '$kept_edges352.33']
DEBUG 2022-02-14 16:37:57,812 dispatch pc=356, inst=BINARY_SUBSCR(arg=None, lineno=58)
DEBUG 2022-02-14 16:37:57,812 stack ['$phi282.0', '$348load_global.31', '$const350.32', '$kept_edges352.33', '$const354.34']
DEBUG 2022-02-14 16:37:57,812 dispatch pc=358, inst=BINARY_MULTIPLY(arg=None, lineno=58)
DEBUG 2022-02-14 16:37:57,812 stack ['$phi282.0', '$348load_global.31', '$const350.32', '$356binary_subscr.35']
DEBUG 2022-02-14 16:37:57,812 dispatch pc=360, inst=LOAD_CONST(arg=2, lineno=58)
DEBUG 2022-02-14 16:37:57,812 stack ['$phi282.0', '$348load_global.31', '$358binary_multiply.36']
DEBUG 2022-02-14 16:37:57,812 dispatch pc=362, inst=LOAD_FAST(arg=3, lineno=58)
DEBUG 2022-02-14 16:37:57,812 stack ['$phi282.0', '$348load_global.31', '$358binary_multiply.36', '$const360.37']
DEBUG 2022-02-14 16:37:57,812 dispatch pc=364, inst=BINARY_MULTIPLY(arg=None, lineno=58)
DEBUG 2022-02-14 16:37:57,812 stack ['$phi282.0', '$348load_global.31', '$358binary_multiply.36', '$const360.37', '$batch_max362.38']
DEBUG 2022-02-14 16:37:57,812 dispatch pc=366, inst=LOAD_FAST(arg=4, lineno=58)
DEBUG 2022-02-14 16:37:57,812 stack ['$phi282.0', '$348load_global.31', '$358binary_multiply.36', '$364binary_multiply.39']
DEBUG 2022-02-14 16:37:57,813 dispatch pc=368, inst=BINARY_ADD(arg=None, lineno=58)
DEBUG 2022-02-14 16:37:57,813 stack ['$phi282.0', '$348load_global.31', '$358binary_multiply.36', '$364binary_multiply.39', '$odd_cutoff366.40']
DEBUG 2022-02-14 16:37:57,813 dispatch pc=370, inst=LOAD_CONST(arg=3, lineno=58)
DEBUG 2022-02-14 16:37:57,813 stack ['$phi282.0', '$348load_global.31', '$358binary_multiply.36', '$368binary_add.41']
DEBUG 2022-02-14 16:37:57,813 dispatch pc=372, inst=BINARY_ADD(arg=None, lineno=58)
DEBUG 2022-02-14 16:37:57,813 stack ['$phi282.0', '$348load_global.31', '$358binary_multiply.36', '$368binary_add.41', '$const370.42']
DEBUG 2022-02-14 16:37:57,813 dispatch pc=374, inst=CALL_FUNCTION(arg=2, lineno=58)
DEBUG 2022-02-14 16:37:57,813 stack ['$phi282.0', '$348load_global.31', '$358binary_multiply.36', '$372binary_add.43']
DEBUG 2022-02-14 16:37:57,813 dispatch pc=376, inst=GET_ITER(arg=None, lineno=58)
DEBUG 2022-02-14 16:37:57,813 stack ['$phi282.0', '$374call_function.44']
DEBUG 2022-02-14 16:37:57,813 end state. edges=[Edge(pc=378, stack=('$phi282.0', '$376get_iter.45'), blockstack=(), npush=0)]
DEBUG 2022-02-14 16:37:57,813 pending: deque([State(pc_initial=282 nstack_initial=1), State(pc_initial=378 nstack_initial=2)])
DEBUG 2022-02-14 16:37:57,813 pending: deque([State(pc_initial=378 nstack_initial=2)])
DEBUG 2022-02-14 16:37:57,813 stack: ['$phi378.0', '$phi378.1']
DEBUG 2022-02-14 16:37:57,813 dispatch pc=378, inst=FOR_ITER(arg=130, lineno=58)
DEBUG 2022-02-14 16:37:57,813 stack ['$phi378.0', '$phi378.1']
DEBUG 2022-02-14 16:37:57,813 end state. edges=[Edge(pc=510, stack=('$phi378.0',), blockstack=(), npush=0), Edge(pc=380, stack=('$phi378.0', '$phi378.1', '$378for_iter.3'), blockstack=(), npush=0)]
DEBUG 2022-02-14 16:37:57,813 pending: deque([State(pc_initial=510 nstack_initial=1), State(pc_initial=380 nstack_initial=3)])
DEBUG 2022-02-14 16:37:57,813 stack: ['$phi510.0']
DEBUG 2022-02-14 16:37:57,813 dispatch pc=510, inst=LOAD_FAST(arg=15, lineno=69)
DEBUG 2022-02-14 16:37:57,813 stack ['$phi510.0']
DEBUG 2022-02-14 16:37:57,813 dispatch pc=512, inst=LOAD_FAST(arg=17, lineno=69)
DEBUG 2022-02-14 16:37:57,813 stack ['$phi510.0', '$H_batch510.1']
DEBUG 2022-02-14 16:37:57,814 dispatch pc=514, inst=INPLACE_ADD(arg=None, lineno=69)
DEBUG 2022-02-14 16:37:57,814 stack ['$phi510.0', '$H_batch510.1', '$Hnew512.2']
DEBUG 2022-02-14 16:37:57,814 dispatch pc=516, inst=STORE_FAST(arg=15, lineno=69)
DEBUG 2022-02-14 16:37:57,814 stack ['$phi510.0', '$514inplace_add.3']
DEBUG 2022-02-14 16:37:57,814 dispatch pc=518, inst=JUMP_ABSOLUTE(arg=158, lineno=69)
DEBUG 2022-02-14 16:37:57,814 stack ['$phi510.0']
DEBUG 2022-02-14 16:37:57,814 end state. edges=[Edge(pc=158, stack=('$phi510.0',), blockstack=(), npush=0)]
DEBUG 2022-02-14 16:37:57,814 pending: deque([State(pc_initial=380 nstack_initial=3), State(pc_initial=158 nstack_initial=1)])
DEBUG 2022-02-14 16:37:57,814 stack: ['$phi380.0', '$phi380.1', '$phi380.2']
DEBUG 2022-02-14 16:37:57,814 dispatch pc=380, inst=STORE_FAST(arg=30, lineno=58)
DEBUG 2022-02-14 16:37:57,814 stack ['$phi380.0', '$phi380.1', '$phi380.2']
DEBUG 2022-02-14 16:37:57,814 dispatch pc=382, inst=LOAD_FAST(arg=9, lineno=59)
DEBUG 2022-02-14 16:37:57,814 stack ['$phi380.0', '$phi380.1']
DEBUG 2022-02-14 16:37:57,814 dispatch pc=384, inst=LOAD_FAST(arg=30, lineno=59)
DEBUG 2022-02-14 16:37:57,814 stack ['$phi380.0', '$phi380.1', '$N_fixed382.3']
DEBUG 2022-02-14 16:37:57,814 dispatch pc=386, inst=BINARY_ADD(arg=None, lineno=59)
DEBUG 2022-02-14 16:37:57,814 stack ['$phi380.0', '$phi380.1', '$N_fixed382.3', '$N_det384.4']
DEBUG 2022-02-14 16:37:57,814 dispatch pc=388, inst=STORE_FAST(arg=31, lineno=59)
DEBUG 2022-02-14 16:37:57,814 stack ['$phi380.0', '$phi380.1', '$386binary_add.5']
DEBUG 2022-02-14 16:37:57,814 dispatch pc=390, inst=LOAD_CONST(arg=6, lineno=60)
DEBUG 2022-02-14 16:37:57,814 stack ['$phi380.0', '$phi380.1']
DEBUG 2022-02-14 16:37:57,814 dispatch pc=392, inst=LOAD_FAST(arg=31, lineno=60)
DEBUG 2022-02-14 16:37:57,815 stack ['$phi380.0', '$phi380.1', '$const390.6']
DEBUG 2022-02-14 16:37:57,815 dispatch pc=394, inst=LOAD_CONST(arg=2, lineno=60)
DEBUG 2022-02-14 16:37:57,815 stack ['$phi380.0', '$phi380.1', '$const390.6', '$N392.7']
DEBUG 2022-02-14 16:37:57,815 dispatch pc=396, inst=BINARY_FLOOR_DIVIDE(arg=None, lineno=60)
DEBUG 2022-02-14 16:37:57,815 stack ['$phi380.0', '$phi380.1', '$const390.6', '$N392.7', '$const394.8']
DEBUG 2022-02-14 16:37:57,815 dispatch pc=398, inst=LOAD_FAST(arg=19, lineno=60)
DEBUG 2022-02-14 16:37:57,815 stack ['$phi380.0', '$phi380.1', '$const390.6', '$396binary_floor_divide.9']
DEBUG 2022-02-14 16:37:57,815 dispatch pc=400, inst=BINARY_SUBTRACT(arg=None, lineno=60)
DEBUG 2022-02-14 16:37:57,815 stack ['$phi380.0', '$phi380.1', '$const390.6', '$396binary_floor_divide.9', '$edges_sum398.10']
DEBUG 2022-02-14 16:37:57,815 dispatch pc=402, inst=BINARY_POWER(arg=None, lineno=60)
DEBUG 2022-02-14 16:37:57,815 stack ['$phi380.0', '$phi380.1', '$const390.6', '$400binary_subtract.11']
DEBUG 2022-02-14 16:37:57,815 dispatch pc=404, inst=STORE_FAST(arg=32, lineno=60)
DEBUG 2022-02-14 16:37:57,815 stack ['$phi380.0', '$phi380.1', '$402binary_power.12']
DEBUG 2022-02-14 16:37:57,815 dispatch pc=406, inst=LOAD_FAST(arg=14, lineno=62)
DEBUG 2022-02-14 16:37:57,815 stack ['$phi380.0', '$phi380.1']
DEBUG 2022-02-14 16:37:57,815 dispatch pc=408, inst=LOAD_FAST(arg=30, lineno=62)
DEBUG 2022-02-14 16:37:57,815 stack ['$phi380.0', '$phi380.1', '$binoms406.13']
DEBUG 2022-02-14 16:37:57,815 dispatch pc=410, inst=LOAD_CONST(arg=2, lineno=62)
DEBUG 2022-02-14 16:37:57,815 stack ['$phi380.0', '$phi380.1', '$binoms406.13', '$N_det408.14']
DEBUG 2022-02-14 16:37:57,816 dispatch pc=412, inst=BINARY_FLOOR_DIVIDE(arg=None, lineno=62)
DEBUG 2022-02-14 16:37:57,816 stack ['$phi380.0', '$phi380.1', '$binoms406.13', '$N_det408.14', '$const410.15']
DEBUG 2022-02-14 16:37:57,816 dispatch pc=414, inst=LOAD_FAST(arg=18, lineno=62)
DEBUG 2022-02-14 16:37:57,816 stack ['$phi380.0', '$phi380.1', '$binoms406.13', '$412binary_floor_divide.16']
DEBUG 2022-02-14 16:37:57,816 dispatch pc=416, inst=LOAD_CONST(arg=1, lineno=62)
DEBUG 2022-02-14 16:37:57,816 stack ['$phi380.0', '$phi380.1', '$binoms406.13', '$412binary_floor_divide.16', '$kept_edges414.17']
DEBUG 2022-02-14 16:37:57,816 dispatch pc=418, inst=BINARY_SUBSCR(arg=None, lineno=62)
DEBUG 2022-02-14 16:37:57,816 stack ['$phi380.0', '$phi380.1', '$binoms406.13', '$412binary_floor_divide.16', '$kept_edges414.17', '$const416.18']
DEBUG 2022-02-14 16:37:57,816 dispatch pc=420, inst=BUILD_TUPLE(arg=2, lineno=62)
DEBUG 2022-02-14 16:37:57,816 stack ['$phi380.0', '$phi380.1', '$binoms406.13', '$412binary_floor_divide.16', '$418binary_subscr.19']
DEBUG 2022-02-14 16:37:57,816 dispatch pc=422, inst=BINARY_SUBSCR(arg=None, lineno=62)
DEBUG 2022-02-14 16:37:57,816 stack ['$phi380.0', '$phi380.1', '$binoms406.13', '$420build_tuple.20']
DEBUG 2022-02-14 16:37:57,816 dispatch pc=424, inst=LOAD_FAST(arg=20, lineno=62)
DEBUG 2022-02-14 16:37:57,816 stack ['$phi380.0', '$phi380.1', '$422binary_subscr.21']
DEBUG 2022-02-14 16:37:57,816 dispatch pc=426, inst=BINARY_MULTIPLY(arg=None, lineno=62)
DEBUG 2022-02-14 16:37:57,816 stack ['$phi380.0', '$phi380.1', '$422binary_subscr.21', '$binom_prod424.22']
DEBUG 2022-02-14 16:37:57,816 dispatch pc=428, inst=STORE_FAST(arg=33, lineno=62)
DEBUG 2022-02-14 16:37:57,816 stack ['$phi380.0', '$phi380.1', '$426binary_multiply.23']
DEBUG 2022-02-14 16:37:57,816 dispatch pc=430, inst=LOAD_FAST(arg=30, lineno=64)
DEBUG 2022-02-14 16:37:57,816 stack ['$phi380.0', '$phi380.1']
DEBUG 2022-02-14 16:37:57,816 dispatch pc=432, inst=LOAD_CONST(arg=2, lineno=64)
DEBUG 2022-02-14 16:37:57,816 stack ['$phi380.0', '$phi380.1', '$N_det430.24']
DEBUG 2022-02-14 16:37:57,816 dispatch pc=434, inst=BINARY_MODULO(arg=None, lineno=64)
DEBUG 2022-02-14 16:37:57,817 stack ['$phi380.0', '$phi380.1', '$N_det430.24', '$const432.25']
DEBUG 2022-02-14 16:37:57,817 dispatch pc=436, inst=LOAD_CONST(arg=1, lineno=64)
DEBUG 2022-02-14 16:37:57,817 stack ['$phi380.0', '$phi380.1', '$434binary_modulo.26']
DEBUG 2022-02-14 16:37:57,817 dispatch pc=438, inst=COMPARE_OP(arg=2, lineno=64)
DEBUG 2022-02-14 16:37:57,817 stack ['$phi380.0', '$phi380.1', '$434binary_modulo.26', '$const436.27']
DEBUG 2022-02-14 16:37:57,817 dispatch pc=440, inst=POP_JUMP_IF_FALSE(arg=478, lineno=64)
DEBUG 2022-02-14 16:37:57,817 stack ['$phi380.0', '$phi380.1', '$438compare_op.28']
DEBUG 2022-02-14 16:37:57,817 end state. edges=[Edge(pc=444, stack=('$phi380.0', '$phi380.1'), blockstack=(), npush=0), Edge(pc=478, stack=('$phi380.0', '$phi380.1'), blockstack=(), npush=0)]
DEBUG 2022-02-14 16:37:57,817 pending: deque([State(pc_initial=158 nstack_initial=1), State(pc_initial=444 nstack_initial=2), State(pc_initial=478 nstack_initial=2)])
DEBUG 2022-02-14 16:37:57,817 pending: deque([State(pc_initial=444 nstack_initial=2), State(pc_initial=478 nstack_initial=2)])
DEBUG 2022-02-14 16:37:57,817 stack: ['$phi444.0', '$phi444.1']
DEBUG 2022-02-14 16:37:57,817 dispatch pc=444, inst=LOAD_FAST(arg=17, lineno=65)
DEBUG 2022-02-14 16:37:57,817 stack ['$phi444.0', '$phi444.1']
DEBUG 2022-02-14 16:37:57,817 dispatch pc=446, inst=LOAD_FAST(arg=30, lineno=65)
DEBUG 2022-02-14 16:37:57,817 stack ['$phi444.0', '$phi444.1', '$Hnew444.2']
DEBUG 2022-02-14 16:37:57,817 dispatch pc=448, inst=DUP_TOP_TWO(arg=None, lineno=65)
DEBUG 2022-02-14 16:37:57,817 stack ['$phi444.0', '$phi444.1', '$Hnew444.2', '$N_det446.3']
DEBUG 2022-02-14 16:37:57,817 dispatch pc=450, inst=BINARY_SUBSCR(arg=None, lineno=65)
DEBUG 2022-02-14 16:37:57,817 stack ['$phi444.0', '$phi444.1', '$Hnew444.2', '$N_det446.3', '$448dup_top_two.4', '$448dup_top_two.5']
DEBUG 2022-02-14 16:37:57,817 dispatch pc=452, inst=LOAD_FAST(arg=33, lineno=65)
DEBUG 2022-02-14 16:37:57,818 stack ['$phi444.0', '$phi444.1', '$Hnew444.2', '$N_det446.3', '$450binary_subscr.6']
DEBUG 2022-02-14 16:37:57,818 dispatch pc=454, inst=LOAD_FAST(arg=32, lineno=65)
DEBUG 2022-02-14 16:37:57,818 stack ['$phi444.0', '$phi444.1', '$Hnew444.2', '$N_det446.3', '$450binary_subscr.6', '$n_det_binom_prod452.7']
DEBUG 2022-02-14 16:37:57,818 dispatch pc=456, inst=BINARY_MULTIPLY(arg=None, lineno=65)
DEBUG 2022-02-14 16:37:57,818 stack ['$phi444.0', '$phi444.1', '$Hnew444.2', '$N_det446.3', '$450binary_subscr.6', '$n_det_binom_prod452.7', '$plus_minus454.8']
DEBUG 2022-02-14 16:37:57,818 dispatch pc=458, inst=LOAD_FAST(arg=28, lineno=65)
DEBUG 2022-02-14 16:37:57,818 stack ['$phi444.0', '$phi444.1', '$Hnew444.2', '$N_det446.3', '$450binary_subscr.6', '$456binary_multiply.9']
DEBUG 2022-02-14 16:37:57,818 dispatch pc=460, inst=LOAD_FAST(arg=31, lineno=65)
DEBUG 2022-02-14 16:37:57,818 stack ['$phi444.0', '$phi444.1', '$Hnew444.2', '$N_det446.3', '$450binary_subscr.6', '$456binary_multiply.9', '$f_even458.10']
DEBUG 2022-02-14 16:37:57,818 dispatch pc=462, inst=LOAD_CONST(arg=2, lineno=65)
DEBUG 2022-02-14 16:37:57,818 stack ['$phi444.0', '$phi444.1', '$Hnew444.2', '$N_det446.3', '$450binary_subscr.6', '$456binary_multiply.9', '$f_even458.10', '$N460.11']
DEBUG 2022-02-14 16:37:57,818 dispatch pc=464, inst=BINARY_FLOOR_DIVIDE(arg=None, lineno=65)
DEBUG 2022-02-14 16:37:57,818 stack ['$phi444.0', '$phi444.1', '$Hnew444.2', '$N_det446.3', '$450binary_subscr.6', '$456binary_multiply.9', '$f_even458.10', '$N460.11', '$const462.12']
DEBUG 2022-02-14 16:37:57,818 dispatch pc=466, inst=BINARY_SUBSCR(arg=None, lineno=65)
DEBUG 2022-02-14 16:37:57,818 stack ['$phi444.0', '$phi444.1', '$Hnew444.2', '$N_det446.3', '$450binary_subscr.6', '$456binary_multiply.9', '$f_even458.10', '$464binary_floor_divide.13']
DEBUG 2022-02-14 16:37:57,818 dispatch pc=468, inst=BINARY_MULTIPLY(arg=None, lineno=65)
DEBUG 2022-02-14 16:37:57,818 stack ['$phi444.0', '$phi444.1', '$Hnew444.2', '$N_det446.3', '$450binary_subscr.6', '$456binary_multiply.9', '$466binary_subscr.14']
DEBUG 2022-02-14 16:37:57,818 dispatch pc=470, inst=INPLACE_ADD(arg=None, lineno=65)
DEBUG 2022-02-14 16:37:57,818 stack ['$phi444.0', '$phi444.1', '$Hnew444.2', '$N_det446.3', '$450binary_subscr.6', '$468binary_multiply.15']
DEBUG 2022-02-14 16:37:57,818 dispatch pc=472, inst=ROT_THREE(arg=None, lineno=65)
DEBUG 2022-02-14 16:37:57,818 stack ['$phi444.0', '$phi444.1', '$Hnew444.2', '$N_det446.3', '$470inplace_add.16']
DEBUG 2022-02-14 16:37:57,818 dispatch pc=474, inst=STORE_SUBSCR(arg=None, lineno=65)
DEBUG 2022-02-14 16:37:57,819 stack ['$phi444.0', '$phi444.1', '$470inplace_add.16', '$Hnew444.2', '$N_det446.3']
DEBUG 2022-02-14 16:37:57,819 dispatch pc=476, inst=JUMP_FORWARD(arg=28, lineno=65)
DEBUG 2022-02-14 16:37:57,819 stack ['$phi444.0', '$phi444.1']
DEBUG 2022-02-14 16:37:57,819 end state. edges=[Edge(pc=506, stack=('$phi444.0', '$phi444.1'), blockstack=(), npush=0)]
DEBUG 2022-02-14 16:37:57,819 pending: deque([State(pc_initial=478 nstack_initial=2), State(pc_initial=506 nstack_initial=2)])
DEBUG 2022-02-14 16:37:57,819 stack: ['$phi478.0', '$phi478.1']
DEBUG 2022-02-14 16:37:57,819 dispatch pc=478, inst=LOAD_FAST(arg=17, lineno=67)
DEBUG 2022-02-14 16:37:57,819 stack ['$phi478.0', '$phi478.1']
DEBUG 2022-02-14 16:37:57,819 dispatch pc=480, inst=LOAD_FAST(arg=30, lineno=67)
DEBUG 2022-02-14 16:37:57,819 stack ['$phi478.0', '$phi478.1', '$Hnew478.2']
DEBUG 2022-02-14 16:37:57,819 dispatch pc=482, inst=DUP_TOP_TWO(arg=None, lineno=67)
DEBUG 2022-02-14 16:37:57,819 stack ['$phi478.0', '$phi478.1', '$Hnew478.2', '$N_det480.3']
DEBUG 2022-02-14 16:37:57,819 dispatch pc=484, inst=BINARY_SUBSCR(arg=None, lineno=67)
DEBUG 2022-02-14 16:37:57,819 stack ['$phi478.0', '$phi478.1', '$Hnew478.2', '$N_det480.3', '$482dup_top_two.4', '$482dup_top_two.5']
DEBUG 2022-02-14 16:37:57,819 dispatch pc=486, inst=LOAD_FAST(arg=33, lineno=67)
DEBUG 2022-02-14 16:37:57,819 stack ['$phi478.0', '$phi478.1', '$Hnew478.2', '$N_det480.3', '$484binary_subscr.6']
DEBUG 2022-02-14 16:37:57,819 dispatch pc=488, inst=LOAD_FAST(arg=32, lineno=67)
DEBUG 2022-02-14 16:37:57,819 stack ['$phi478.0', '$phi478.1', '$Hnew478.2', '$N_det480.3', '$484binary_subscr.6', '$n_det_binom_prod486.7']
DEBUG 2022-02-14 16:37:57,819 dispatch pc=490, inst=BINARY_MULTIPLY(arg=None, lineno=67)
DEBUG 2022-02-14 16:37:57,819 stack ['$phi478.0', '$phi478.1', '$Hnew478.2', '$N_det480.3', '$484binary_subscr.6', '$n_det_binom_prod486.7', '$plus_minus488.8']
DEBUG 2022-02-14 16:37:57,819 dispatch pc=492, inst=LOAD_FAST(arg=29, lineno=67)
DEBUG 2022-02-14 16:37:57,819 stack ['$phi478.0', '$phi478.1', '$Hnew478.2', '$N_det480.3', '$484binary_subscr.6', '$490binary_multiply.9']
DEBUG 2022-02-14 16:37:57,819 dispatch pc=494, inst=LOAD_FAST(arg=31, lineno=67)
DEBUG 2022-02-14 16:37:57,820 stack ['$phi478.0', '$phi478.1', '$Hnew478.2', '$N_det480.3', '$484binary_subscr.6', '$490binary_multiply.9', '$f_odd492.10']
DEBUG 2022-02-14 16:37:57,820 dispatch pc=496, inst=BINARY_SUBSCR(arg=None, lineno=67)
DEBUG 2022-02-14 16:37:57,820 stack ['$phi478.0', '$phi478.1', '$Hnew478.2', '$N_det480.3', '$484binary_subscr.6', '$490binary_multiply.9', '$f_odd492.10', '$N494.11']
DEBUG 2022-02-14 16:37:57,820 dispatch pc=498, inst=BINARY_MULTIPLY(arg=None, lineno=67)
DEBUG 2022-02-14 16:37:57,820 stack ['$phi478.0', '$phi478.1', '$Hnew478.2', '$N_det480.3', '$484binary_subscr.6', '$490binary_multiply.9', '$496binary_subscr.12']
DEBUG 2022-02-14 16:37:57,820 dispatch pc=500, inst=INPLACE_ADD(arg=None, lineno=67)
DEBUG 2022-02-14 16:37:57,820 stack ['$phi478.0', '$phi478.1', '$Hnew478.2', '$N_det480.3', '$484binary_subscr.6', '$498binary_multiply.13']
DEBUG 2022-02-14 16:37:57,820 dispatch pc=502, inst=ROT_THREE(arg=None, lineno=67)
DEBUG 2022-02-14 16:37:57,820 stack ['$phi478.0', '$phi478.1', '$Hnew478.2', '$N_det480.3', '$500inplace_add.14']
DEBUG 2022-02-14 16:37:57,820 dispatch pc=504, inst=STORE_SUBSCR(arg=None, lineno=67)
DEBUG 2022-02-14 16:37:57,820 stack ['$phi478.0', '$phi478.1', '$500inplace_add.14', '$Hnew478.2', '$N_det480.3']
DEBUG 2022-02-14 16:37:57,820 end state. edges=[Edge(pc=506, stack=('$phi478.0', '$phi478.1'), blockstack=(), npush=0)]
DEBUG 2022-02-14 16:37:57,820 pending: deque([State(pc_initial=506 nstack_initial=2), State(pc_initial=506 nstack_initial=2)])
DEBUG 2022-02-14 16:37:57,820 stack: ['$phi506.0', '$phi506.1']
DEBUG 2022-02-14 16:37:57,820 dispatch pc=506, inst=JUMP_ABSOLUTE(arg=378, lineno=67)
DEBUG 2022-02-14 16:37:57,820 stack ['$phi506.0', '$phi506.1']
DEBUG 2022-02-14 16:37:57,820 end state. edges=[Edge(pc=378, stack=('$phi506.0', '$phi506.1'), blockstack=(), npush=0)]
DEBUG 2022-02-14 16:37:57,820 pending: deque([State(pc_initial=506 nstack_initial=2), State(pc_initial=378 nstack_initial=2)])
DEBUG 2022-02-14 16:37:57,821 pending: deque([State(pc_initial=378 nstack_initial=2)])
DEBUG 2022-02-14 16:37:57,821 -------------------------Prune PHIs-------------------------
DEBUG 2022-02-14 16:37:57,821 Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=158 nstack_initial=1): {'$phi158.0'},
             State(pc_initial=162 nstack_initial=2): {'$phi162.1'},
             State(pc_initial=228 nstack_initial=2): {'$phi228.1'},
             State(pc_initial=230 nstack_initial=3): {'$phi230.2'},
             State(pc_initial=258 nstack_initial=1): set(),
             State(pc_initial=264 nstack_initial=1): set(),
             State(pc_initial=278 nstack_initial=1): set(),
             State(pc_initial=282 nstack_initial=1): set(),
             State(pc_initial=378 nstack_initial=2): {'$phi378.1'},
             State(pc_initial=380 nstack_initial=3): {'$phi380.2'},
             State(pc_initial=444 nstack_initial=2): set(),
             State(pc_initial=478 nstack_initial=2): set(),
             State(pc_initial=506 nstack_initial=2): set(),
             State(pc_initial=510 nstack_initial=1): set(),
             State(pc_initial=520 nstack_initial=0): set(),
             State(pc_initial=526 nstack_initial=0): set(),
             State(pc_initial=540 nstack_initial=1): {'$phi540.0'},
             State(pc_initial=542 nstack_initial=2): {'$phi542.1'},
             State(pc_initial=580 nstack_initial=0): set()})
DEBUG 2022-02-14 16:37:57,821 defmap: {'$phi158.0': State(pc_initial=0 nstack_initial=0),
 '$phi162.1': State(pc_initial=158 nstack_initial=1),
 '$phi228.1': State(pc_initial=162 nstack_initial=2),
 '$phi230.2': State(pc_initial=228 nstack_initial=2),
 '$phi378.1': State(pc_initial=282 nstack_initial=1),
 '$phi380.2': State(pc_initial=378 nstack_initial=2),
 '$phi540.0': State(pc_initial=526 nstack_initial=0),
 '$phi542.1': State(pc_initial=540 nstack_initial=1)}
DEBUG 2022-02-14 16:37:57,821 phismap: defaultdict(<class 'set'>,
            {'$phi158.0': {('$156get_iter.68',
                            State(pc_initial=0 nstack_initial=0)),
                           ('$phi510.0',
                            State(pc_initial=510 nstack_initial=1))},
             '$phi162.0': {('$phi158.0',
                            State(pc_initial=158 nstack_initial=1))},
             '$phi162.1': {('$158for_iter.2',
                            State(pc_initial=158 nstack_initial=1))},
             '$phi228.0': {('$phi162.0',
                            State(pc_initial=162 nstack_initial=2)),
                           ('$phi230.0',
                            State(pc_initial=230 nstack_initial=3))},
             '$phi228.1': {('$226get_iter.29',
                            State(pc_initial=162 nstack_initial=2)),
                           ('$phi230.1',
                            State(pc_initial=230 nstack_initial=3))},
             '$phi230.0': {('$phi228.0',
                            State(pc_initial=228 nstack_initial=2))},
             '$phi230.1': {('$phi228.1',
                            State(pc_initial=228 nstack_initial=2))},
             '$phi230.2': {('$228for_iter.3',
                            State(pc_initial=228 nstack_initial=2))},
             '$phi258.0': {('$phi228.0',
                            State(pc_initial=228 nstack_initial=2))},
             '$phi264.0': {('$phi258.0',
                            State(pc_initial=258 nstack_initial=1))},
             '$phi278.0': {('$phi258.0',
                            State(pc_initial=258 nstack_initial=1))},
             '$phi282.0': {('$phi264.0',
                            State(pc_initial=264 nstack_initial=1)),
                           ('$phi278.0',
                            State(pc_initial=278 nstack_initial=1))},
             '$phi378.0': {('$phi282.0',
                            State(pc_initial=282 nstack_initial=1)),
                           ('$phi506.0',
                            State(pc_initial=506 nstack_initial=2))},
             '$phi378.1': {('$376get_iter.45',
                            State(pc_initial=282 nstack_initial=1)),
                           ('$phi506.1',
                            State(pc_initial=506 nstack_initial=2))},
             '$phi380.0': {('$phi378.0',
                            State(pc_initial=378 nstack_initial=2))},
             '$phi380.1': {('$phi378.1',
                            State(pc_initial=378 nstack_initial=2))},
             '$phi380.2': {('$378for_iter.3',
                            State(pc_initial=378 nstack_initial=2))},
             '$phi444.0': {('$phi380.0',
                            State(pc_initial=380 nstack_initial=3))},
             '$phi444.1': {('$phi380.1',
                            State(pc_initial=380 nstack_initial=3))},
             '$phi478.0': {('$phi380.0',
                            State(pc_initial=380 nstack_initial=3))},
             '$phi478.1': {('$phi380.1',
                            State(pc_initial=380 nstack_initial=3))},
             '$phi506.0': {('$phi444.0',
                            State(pc_initial=444 nstack_initial=2)),
                           ('$phi478.0',
                            State(pc_initial=478 nstack_initial=2))},
             '$phi506.1': {('$phi444.1',
                            State(pc_initial=444 nstack_initial=2)),
                           ('$phi478.1',
                            State(pc_initial=478 nstack_initial=2))},
             '$phi510.0': {('$phi378.0',
                            State(pc_initial=378 nstack_initial=2))},
             '$phi540.0': {('$538get_iter.6',
                            State(pc_initial=526 nstack_initial=0)),
                           ('$phi542.0',
                            State(pc_initial=542 nstack_initial=2))},
             '$phi542.0': {('$phi540.0',
                            State(pc_initial=540 nstack_initial=1))},
             '$phi542.1': {('$540for_iter.2',
                            State(pc_initial=540 nstack_initial=1))}})
DEBUG 2022-02-14 16:37:57,823 changing phismap: defaultdict(<class 'set'>,
            {'$phi158.0': {('$156get_iter.68',
                            State(pc_initial=0 nstack_initial=0)),
                           ('$phi378.0',
                            State(pc_initial=378 nstack_initial=2))},
             '$phi162.0': {('$156get_iter.68',
                            State(pc_initial=0 nstack_initial=0)),
                           ('$phi378.0',
                            State(pc_initial=378 nstack_initial=2))},
             '$phi162.1': {('$158for_iter.2',
                            State(pc_initial=158 nstack_initial=1))},
             '$phi228.0': {('$156get_iter.68',
                            State(pc_initial=0 nstack_initial=0)),
                           ('$phi228.0',
                            State(pc_initial=228 nstack_initial=2)),
                           ('$phi378.0',
                            State(pc_initial=378 nstack_initial=2))},
             '$phi228.1': {('$226get_iter.29',
                            State(pc_initial=162 nstack_initial=2)),
                           ('$phi228.1',
                            State(pc_initial=228 nstack_initial=2))},
             '$phi230.0': {('$156get_iter.68',
                            State(pc_initial=0 nstack_initial=0)),
                           ('$phi378.0',
                            State(pc_initial=378 nstack_initial=2))},
             '$phi230.1': {('$226get_iter.29',
                            State(pc_initial=162 nstack_initial=2))},
             '$phi230.2': {('$228for_iter.3',
                            State(pc_initial=228 nstack_initial=2))},
             '$phi258.0': {('$156get_iter.68',
                            State(pc_initial=0 nstack_initial=0)),
                           ('$phi378.0',
                            State(pc_initial=378 nstack_initial=2))},
             '$phi264.0': {('$156get_iter.68',
                            State(pc_initial=0 nstack_initial=0)),
                           ('$phi378.0',
                            State(pc_initial=378 nstack_initial=2))},
             '$phi278.0': {('$156get_iter.68',
                            State(pc_initial=0 nstack_initial=0)),
                           ('$phi378.0',
                            State(pc_initial=378 nstack_initial=2))},
             '$phi282.0': {('$156get_iter.68',
                            State(pc_initial=0 nstack_initial=0)),
                           ('$phi378.0',
                            State(pc_initial=378 nstack_initial=2))},
             '$phi378.0': {('$156get_iter.68',
                            State(pc_initial=0 nstack_initial=0)),
                           ('$phi378.0',
                            State(pc_initial=378 nstack_initial=2)),
                           ('$phi444.0',
                            State(pc_initial=444 nstack_initial=2)),
                           ('$phi478.0',
                            State(pc_initial=478 nstack_initial=2))},
             '$phi378.1': {('$376get_iter.45',
                            State(pc_initial=282 nstack_initial=1)),
                           ('$phi444.1',
                            State(pc_initial=444 nstack_initial=2)),
                           ('$phi478.1',
                            State(pc_initial=478 nstack_initial=2))},
             '$phi380.0': {('$156get_iter.68',
                            State(pc_initial=0 nstack_initial=0)),
                           ('$phi444.0',
                            State(pc_initial=444 nstack_initial=2)),
                           ('$phi478.0',
                            State(pc_initial=478 nstack_initial=2))},
             '$phi380.1': {('$376get_iter.45',
                            State(pc_initial=282 nstack_initial=1)),
                           ('$phi444.1',
                            State(pc_initial=444 nstack_initial=2)),
                           ('$phi478.1',
                            State(pc_initial=478 nstack_initial=2))},
             '$phi380.2': {('$378for_iter.3',
                            State(pc_initial=378 nstack_initial=2))},
             '$phi444.0': {('$156get_iter.68',
                            State(pc_initial=0 nstack_initial=0)),
                           ('$phi444.0',
                            State(pc_initial=444 nstack_initial=2)),
                           ('$phi478.0',
                            State(pc_initial=478 nstack_initial=2))},
             '$phi444.1': {('$376get_iter.45',
                            State(pc_initial=282 nstack_initial=1)),
                           ('$phi444.1',
                            State(pc_initial=444 nstack_initial=2)),
                           ('$phi478.1',
                            State(pc_initial=478 nstack_initial=2))},
             '$phi478.0': {('$156get_iter.68',
                            State(pc_initial=0 nstack_initial=0)),
                           ('$phi444.0',
                            State(pc_initial=444 nstack_initial=2)),
                           ('$phi478.0',
                            State(pc_initial=478 nstack_initial=2))},
             '$phi478.1': {('$376get_iter.45',
                            State(pc_initial=282 nstack_initial=1)),
                           ('$phi444.1',
                            State(pc_initial=444 nstack_initial=2)),
                           ('$phi478.1',
                            State(pc_initial=478 nstack_initial=2))},
             '$phi506.0': {('$156get_iter.68',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi506.1': {('$376get_iter.45',
                            State(pc_initial=282 nstack_initial=1))},
             '$phi510.0': {('$156get_iter.68',
                            State(pc_initial=0 nstack_initial=0)),
                           ('$phi444.0',
                            State(pc_initial=444 nstack_initial=2)),
                           ('$phi478.0',
                            State(pc_initial=478 nstack_initial=2))},
             '$phi540.0': {('$538get_iter.6',
                            State(pc_initial=526 nstack_initial=0)),
                           ('$phi540.0',
                            State(pc_initial=540 nstack_initial=1))},
             '$phi542.0': {('$538get_iter.6',
                            State(pc_initial=526 nstack_initial=0))},
             '$phi542.1': {('$540for_iter.2',
                            State(pc_initial=540 nstack_initial=1))}})
DEBUG 2022-02-14 16:37:57,824 changing phismap: defaultdict(<class 'set'>,
            {'$phi158.0': {('$156get_iter.68',
                            State(pc_initial=0 nstack_initial=0)),
                           ('$phi444.0',
                            State(pc_initial=444 nstack_initial=2)),
                           ('$phi478.0',
                            State(pc_initial=478 nstack_initial=2))},
             '$phi162.0': {('$156get_iter.68',
                            State(pc_initial=0 nstack_initial=0)),
                           ('$phi444.0',
                            State(pc_initial=444 nstack_initial=2)),
                           ('$phi478.0',
                            State(pc_initial=478 nstack_initial=2))},
             '$phi162.1': {('$158for_iter.2',
                            State(pc_initial=158 nstack_initial=1))},
             '$phi228.0': {('$156get_iter.68',
                            State(pc_initial=0 nstack_initial=0)),
                           ('$phi444.0',
                            State(pc_initial=444 nstack_initial=2)),
                           ('$phi478.0',
                            State(pc_initial=478 nstack_initial=2))},
             '$phi228.1': {('$226get_iter.29',
                            State(pc_initial=162 nstack_initial=2))},
             '$phi230.0': {('$156get_iter.68',
                            State(pc_initial=0 nstack_initial=0)),
                           ('$phi444.0',
                            State(pc_initial=444 nstack_initial=2)),
                           ('$phi478.0',
                            State(pc_initial=478 nstack_initial=2))},
             '$phi230.1': {('$226get_iter.29',
                            State(pc_initial=162 nstack_initial=2))},
             '$phi230.2': {('$228for_iter.3',
                            State(pc_initial=228 nstack_initial=2))},
             '$phi258.0': {('$156get_iter.68',
                            State(pc_initial=0 nstack_initial=0)),
                           ('$phi444.0',
                            State(pc_initial=444 nstack_initial=2)),
                           ('$phi478.0',
                            State(pc_initial=478 nstack_initial=2))},
             '$phi264.0': {('$156get_iter.68',
                            State(pc_initial=0 nstack_initial=0)),
                           ('$phi444.0',
                            State(pc_initial=444 nstack_initial=2)),
                           ('$phi478.0',
                            State(pc_initial=478 nstack_initial=2))},
             '$phi278.0': {('$156get_iter.68',
                            State(pc_initial=0 nstack_initial=0)),
                           ('$phi444.0',
                            State(pc_initial=444 nstack_initial=2)),
                           ('$phi478.0',
                            State(pc_initial=478 nstack_initial=2))},
             '$phi282.0': {('$156get_iter.68',
                            State(pc_initial=0 nstack_initial=0)),
                           ('$phi444.0',
                            State(pc_initial=444 nstack_initial=2)),
                           ('$phi478.0',
                            State(pc_initial=478 nstack_initial=2))},
             '$phi378.0': {('$156get_iter.68',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi378.1': {('$376get_iter.45',
                            State(pc_initial=282 nstack_initial=1))},
             '$phi380.0': {('$156get_iter.68',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi380.1': {('$376get_iter.45',
                            State(pc_initial=282 nstack_initial=1))},
             '$phi380.2': {('$378for_iter.3',
                            State(pc_initial=378 nstack_initial=2))},
             '$phi444.0': {('$156get_iter.68',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi444.1': {('$376get_iter.45',
                            State(pc_initial=282 nstack_initial=1))},
             '$phi478.0': {('$156get_iter.68',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi478.1': {('$376get_iter.45',
                            State(pc_initial=282 nstack_initial=1))},
             '$phi506.0': {('$156get_iter.68',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi506.1': {('$376get_iter.45',
                            State(pc_initial=282 nstack_initial=1))},
             '$phi510.0': {('$156get_iter.68',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi540.0': {('$538get_iter.6',
                            State(pc_initial=526 nstack_initial=0))},
             '$phi542.0': {('$538get_iter.6',
                            State(pc_initial=526 nstack_initial=0))},
             '$phi542.1': {('$540for_iter.2',
                            State(pc_initial=540 nstack_initial=1))}})
DEBUG 2022-02-14 16:37:57,826 changing phismap: defaultdict(<class 'set'>,
            {'$phi158.0': {('$156get_iter.68',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi162.0': {('$156get_iter.68',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi162.1': {('$158for_iter.2',
                            State(pc_initial=158 nstack_initial=1))},
             '$phi228.0': {('$156get_iter.68',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi228.1': {('$226get_iter.29',
                            State(pc_initial=162 nstack_initial=2))},
             '$phi230.0': {('$156get_iter.68',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi230.1': {('$226get_iter.29',
                            State(pc_initial=162 nstack_initial=2))},
             '$phi230.2': {('$228for_iter.3',
                            State(pc_initial=228 nstack_initial=2))},
             '$phi258.0': {('$156get_iter.68',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi264.0': {('$156get_iter.68',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi278.0': {('$156get_iter.68',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi282.0': {('$156get_iter.68',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi378.0': {('$156get_iter.68',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi378.1': {('$376get_iter.45',
                            State(pc_initial=282 nstack_initial=1))},
             '$phi380.0': {('$156get_iter.68',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi380.1': {('$376get_iter.45',
                            State(pc_initial=282 nstack_initial=1))},
             '$phi380.2': {('$378for_iter.3',
                            State(pc_initial=378 nstack_initial=2))},
             '$phi444.0': {('$156get_iter.68',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi444.1': {('$376get_iter.45',
                            State(pc_initial=282 nstack_initial=1))},
             '$phi478.0': {('$156get_iter.68',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi478.1': {('$376get_iter.45',
                            State(pc_initial=282 nstack_initial=1))},
             '$phi506.0': {('$156get_iter.68',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi506.1': {('$376get_iter.45',
                            State(pc_initial=282 nstack_initial=1))},
             '$phi510.0': {('$156get_iter.68',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi540.0': {('$538get_iter.6',
                            State(pc_initial=526 nstack_initial=0))},
             '$phi542.0': {('$538get_iter.6',
                            State(pc_initial=526 nstack_initial=0))},
             '$phi542.1': {('$540for_iter.2',
                            State(pc_initial=540 nstack_initial=1))}})
DEBUG 2022-02-14 16:37:57,827 changing phismap: defaultdict(<class 'set'>,
            {'$phi158.0': {('$156get_iter.68',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi162.0': {('$156get_iter.68',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi162.1': {('$158for_iter.2',
                            State(pc_initial=158 nstack_initial=1))},
             '$phi228.0': {('$156get_iter.68',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi228.1': {('$226get_iter.29',
                            State(pc_initial=162 nstack_initial=2))},
             '$phi230.0': {('$156get_iter.68',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi230.1': {('$226get_iter.29',
                            State(pc_initial=162 nstack_initial=2))},
             '$phi230.2': {('$228for_iter.3',
                            State(pc_initial=228 nstack_initial=2))},
             '$phi258.0': {('$156get_iter.68',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi264.0': {('$156get_iter.68',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi278.0': {('$156get_iter.68',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi282.0': {('$156get_iter.68',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi378.0': {('$156get_iter.68',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi378.1': {('$376get_iter.45',
                            State(pc_initial=282 nstack_initial=1))},
             '$phi380.0': {('$156get_iter.68',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi380.1': {('$376get_iter.45',
                            State(pc_initial=282 nstack_initial=1))},
             '$phi380.2': {('$378for_iter.3',
                            State(pc_initial=378 nstack_initial=2))},
             '$phi444.0': {('$156get_iter.68',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi444.1': {('$376get_iter.45',
                            State(pc_initial=282 nstack_initial=1))},
             '$phi478.0': {('$156get_iter.68',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi478.1': {('$376get_iter.45',
                            State(pc_initial=282 nstack_initial=1))},
             '$phi506.0': {('$156get_iter.68',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi506.1': {('$376get_iter.45',
                            State(pc_initial=282 nstack_initial=1))},
             '$phi510.0': {('$156get_iter.68',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi540.0': {('$538get_iter.6',
                            State(pc_initial=526 nstack_initial=0))},
             '$phi542.0': {('$538get_iter.6',
                            State(pc_initial=526 nstack_initial=0))},
             '$phi542.1': {('$540for_iter.2',
                            State(pc_initial=540 nstack_initial=1))}})
DEBUG 2022-02-14 16:37:57,828 keep phismap: {'$phi158.0': {('$156get_iter.68', State(pc_initial=0 nstack_initial=0))},
 '$phi162.1': {('$158for_iter.2', State(pc_initial=158 nstack_initial=1))},
 '$phi228.1': {('$226get_iter.29', State(pc_initial=162 nstack_initial=2))},
 '$phi230.2': {('$228for_iter.3', State(pc_initial=228 nstack_initial=2))},
 '$phi378.1': {('$376get_iter.45', State(pc_initial=282 nstack_initial=1))},
 '$phi380.2': {('$378for_iter.3', State(pc_initial=378 nstack_initial=2))},
 '$phi540.0': {('$538get_iter.6', State(pc_initial=526 nstack_initial=0))},
 '$phi542.1': {('$540for_iter.2', State(pc_initial=540 nstack_initial=1))}}
DEBUG 2022-02-14 16:37:57,828 new_out: defaultdict(<class 'dict'>,
            {State(pc_initial=0 nstack_initial=0): {'$phi158.0': '$156get_iter.68'},
             State(pc_initial=158 nstack_initial=1): {'$phi162.1': '$158for_iter.2'},
             State(pc_initial=162 nstack_initial=2): {'$phi228.1': '$226get_iter.29'},
             State(pc_initial=228 nstack_initial=2): {'$phi230.2': '$228for_iter.3'},
             State(pc_initial=282 nstack_initial=1): {'$phi378.1': '$376get_iter.45'},
             State(pc_initial=378 nstack_initial=2): {'$phi380.2': '$378for_iter.3'},
             State(pc_initial=526 nstack_initial=0): {'$phi540.0': '$538get_iter.6'},
             State(pc_initial=540 nstack_initial=1): {'$phi542.1': '$540for_iter.2'}})
DEBUG 2022-02-14 16:37:57,829 ----------------------DONE Prune PHIs-----------------------
DEBUG 2022-02-14 16:37:57,829 block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$D2.0'}), (4, {'res': '$const4.1'}), (6, {'index': '$const4.1', 'target': '$D2.0', 'res': '$6binary_subscr.2'}), (8, {'value': '$6binary_subscr.2'}), (10, {'res': '$A10.3'}), (12, {'res': '$const12.4'}), (14, {'res': '$const14.5'}), (16, {'res': '$const16.6'}), (18, {'start': '$const14.5', 'stop': '$const16.6', 'step': None, 'res': '$18build_slice.8', 'slicevar': '$18build_slice.7'}), (20, {'items': ['$const12.4', '$18build_slice.8'], 'res': '$20build_tuple.9'}), (22, {'index': '$20build_tuple.9', 'target': '$A10.3', 'res': '$22binary_subscr.10'}), (24, {'value': '$22binary_subscr.10'}), (26, {'res': '$A26.11'}), (28, {'item': '$A26.11', 'res': '$28load_attr.12'}), (30, {'res': '$const30.13'}), (32, {'index': '$const30.13', 'target': '$28load_attr.12', 'res': '$32binary_subscr.14'}), (34, {'value': '$32binary_subscr.14'}), (36, {'res': '$const36.15'}), (38, {'res': '$fixed_edge_reps38.16'}), (40, {'item': '$fixed_edge_reps38.16', 'res': '$40load_method.17'}), (42, {'func': '$40load_method.17', 'args': [], 'res': '$42call_method.18'}), (44, {'lhs': '$const36.15', 'rhs': '$42call_method.18', 'res': '$44binary_multiply.19'}), (46, {'value': '$44binary_multiply.19'}), (48, {'res': '$N_fixed48.20'}), (50, {'res': '$const50.21'}), (52, {'res': '$batch_max52.22'}), (54, {'lhs': '$const50.21', 'rhs': '$batch_max52.22', 'res': '$54binary_multiply.23'}), (56, {'lhs': '$N_fixed48.20', 'rhs': '$54binary_multiply.23', 'res': '$56binary_add.24'}), (58, {'res': '$odd_cutoff58.25'}), (60, {'lhs': '$56binary_add.24', 'rhs': '$odd_cutoff58.25', 'res': '$60binary_add.26'}), (62, {'value': '$60binary_add.26'}), (64, {'res': '$64load_global.27'}), (66, {'item': '$64load_global.27', 'res': '$66load_method.28'}), (68, {'res': '$68load_global.29'}), (70, {'item': '$68load_global.29', 'res': '$70load_method.30'}), (72, {'res': '$batch_max72.31'}), (74, {'items': ['$batch_max72.31'], 'res': '$74build_list.32'}), (76, {'func': '$70load_method.30', 'args': ['$74build_list.32'], 'res': '$76call_method.33'}), (78, {'res': '$fixed_edge_reps78.34'}), (80, {'items': ['$76call_method.33', '$fixed_edge_reps78.34'], 'res': '$80build_tuple.35'}), (82, {'func': '$66load_method.28', 'args': ['$80build_tuple.35'], 'res': '$82call_method.36'}), (84, {'value': '$82call_method.36'}), (86, {'res': '$86load_global.37'}), (88, {'item': '$86load_global.37', 'res': '$88load_method.38'}), (90, {'res': '$edge_reps90.39'}), (92, {'res': '$const92.40'}), (94, {'lhs': '$edge_reps90.39', 'rhs': '$const92.40', 'res': '$94binary_add.41'}), (96, {'func': '$88load_method.38', 'args': ['$94binary_add.41'], 'res': '$96call_method.42'}), (98, {'value': '$96call_method.42'}), (100, {'res': '$edge_reps100.43'}), (102, {'item': '$edge_reps100.43', 'res': '$102load_method.44'}), (104, {'func': '$102load_method.44', 'args': [], 'res': '$104call_method.45'}), (106, {'res': '$odd_cutoff106.46'}), (108, {'lhs': '$104call_method.45', 'rhs': '$odd_cutoff106.46', 'res': '$108binary_add.47'}), (110, {'value': '$108binary_add.47'}), (112, {'res': '$112load_global.48'}), (114, {'res': '$max_binom114.49'}), (116, {'func': '$112load_global.48', 'args': ['$max_binom114.49'], 'res': '$116call_function.50'}), (118, {'value': '$116call_function.50'}), (120, {'res': '$120load_global.51'}), (122, {'item': '$120load_global.51', 'res': '$122load_attr.52'}), (124, {'res': '$const124.53'}), (126, {'res': '$batch_max126.54'}), (128, {'lhs': '$const124.53', 'rhs': '$batch_max126.54', 'res': '$128binary_multiply.55'}), (130, {'res': '$odd_cutoff130.56'}), (132, {'lhs': '$128binary_multiply.55', 'rhs': '$odd_cutoff130.56', 'res': '$132binary_add.57'}), (134, {'res': '$const134.58'}), (136, {'lhs': '$132binary_add.57', 'rhs': '$const134.58', 'res': '$136binary_add.59'}), (138, {'res': '$138load_global.60'}), (140, {'item': '$138load_global.60', 'res': '$140load_attr.61'}), (142, {'res': '$const142.62'}), (144, {'func': '$122load_attr.52', 'args': ['$136binary_add.59', '$140load_attr.61'], 'names': '$const142.62', 'res': '$144call_function_kw.63'}), (146, {'value': '$144call_function_kw.63'}), (148, {'res': '$148load_global.64'}), (150, {'item': '$148load_global.64', 'res': '$150load_method.65'}), (152, {'res': '$steps152.66'}), (154, {'func': '$150load_method.65', 'args': ['$steps152.66'], 'res': '$154call_method.67'}), (156, {'value': '$154call_method.67', 'res': '$156get_iter.68'})), outgoing_phis={'$phi158.0': '$156get_iter.68'}, blockstack=(), active_try_block=None, outgoing_edgepushed={158: ('$156get_iter.68',)})
DEBUG 2022-02-14 16:37:57,829 block_infos State(pc_initial=158 nstack_initial=1):
AdaptBlockInfo(insts=((158, {'iterator': '$phi158.0', 'pair': '$158for_iter.1', 'indval': '$158for_iter.2', 'pred': '$158for_iter.3'}),), outgoing_phis={'$phi162.1': '$158for_iter.2'}, blockstack=(), active_try_block=None, outgoing_edgepushed={520: (), 162: ('$phi158.0', '$158for_iter.2')})
DEBUG 2022-02-14 16:37:57,829 block_infos State(pc_initial=162 nstack_initial=2):
AdaptBlockInfo(insts=((162, {'value': '$phi162.1'}), (164, {'res': '$164load_global.2'}), (166, {'item': '$164load_global.2', 'res': '$166load_attr.3'}), (168, {'res': '$const168.4'}), (170, {'res': '$batch_max170.5'}), (172, {'lhs': '$const168.4', 'rhs': '$batch_max170.5', 'res': '$172binary_multiply.6'}), (174, {'res': '$odd_cutoff174.7'}), (176, {'lhs': '$172binary_multiply.6', 'rhs': '$odd_cutoff174.7', 'res': '$176binary_add.8'}), (178, {'res': '$const178.9'}), (180, {'lhs': '$176binary_add.8', 'rhs': '$const178.9', 'res': '$180binary_add.10'}), (182, {'res': '$182load_global.11'}), (184, {'item': '$182load_global.11', 'res': '$184load_attr.12'}), (186, {'res': '$const186.13'}), (188, {'func': '$166load_attr.3', 'args': ['$180binary_add.10', '$184load_attr.12'], 'names': '$const186.13', 'res': '$188call_function_kw.14'}), (190, {'value': '$188call_function_kw.14'}), (192, {'res': '$192load_global.15'}), (194, {'res': '$j194.16'}), (196, {'res': '$edge_reps196.17'}), (198, {'func': '$192load_global.15', 'args': ['$j194.16', '$edge_reps196.17'], 'res': '$198call_function.18'}), (200, {'value': '$198call_function.18'}), (202, {'res': '$kept_edges202.19'}), (204, {'item': '$kept_edges202.19', 'res': '$204load_method.20'}), (206, {'func': '$204load_method.20', 'args': [], 'res': '$206call_method.21'}), (208, {'value': '$206call_method.21'}), (210, {'res': '$const210.22'}), (212, {'value': '$const210.22'}), (214, {'res': '$214load_global.23'}), (216, {'res': '$const216.24'}), (218, {'res': '$n218.25'}), (220, {'res': '$const220.26'}), (222, {'lhs': '$n218.25', 'rhs': '$const220.26', 'res': '$222binary_floor_divide.27'}), (224, {'func': '$214load_global.23', 'args': ['$const216.24', '$222binary_floor_divide.27'], 'res': '$224call_function.28'}), (226, {'value': '$224call_function.28', 'res': '$226get_iter.29'})), outgoing_phis={'$phi228.1': '$226get_iter.29'}, blockstack=(), active_try_block=None, outgoing_edgepushed={228: ('$phi162.0', '$226get_iter.29')})
DEBUG 2022-02-14 16:37:57,829 block_infos State(pc_initial=228 nstack_initial=2):
AdaptBlockInfo(insts=((228, {'iterator': '$phi228.1', 'pair': '$228for_iter.2', 'indval': '$228for_iter.3', 'pred': '$228for_iter.4'}),), outgoing_phis={'$phi230.2': '$228for_iter.3'}, blockstack=(), active_try_block=None, outgoing_edgepushed={258: ('$phi228.0',), 230: ('$phi228.0', '$phi228.1', '$228for_iter.3')})
DEBUG 2022-02-14 16:37:57,829 block_infos State(pc_initial=230 nstack_initial=3):
AdaptBlockInfo(insts=((230, {'value': '$phi230.2'}), (232, {'res': '$binom_prod232.3'}), (234, {'res': '$binoms234.4'}), (236, {'res': '$edge_reps236.5'}), (238, {'res': '$i238.6'}), (240, {'index': '$i238.6', 'target': '$edge_reps236.5', 'res': '$240binary_subscr.7'}), (242, {'res': '$kept_edges242.8'}), (244, {'res': '$i244.9'}), (246, {'index': '$i244.9', 'target': '$kept_edges242.8', 'res': '$246binary_subscr.10'}), (248, {'items': ['$240binary_subscr.7', '$246binary_subscr.10'], 'res': '$248build_tuple.11'}), (250, {'index': '$248build_tuple.11', 'target': '$binoms234.4', 'res': '$250binary_subscr.12'}), (252, {'lhs': '$binom_prod232.3', 'rhs': '$250binary_subscr.12', 'res': '$252inplace_multiply.13'}), (254, {'value': '$252inplace_multiply.13'}), (256, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={228: ('$phi230.0', '$phi230.1')})
DEBUG 2022-02-14 16:37:57,829 block_infos State(pc_initial=258 nstack_initial=1):
AdaptBlockInfo(insts=((258, {'res': '$glynn258.1'}), (260, {'pred': '$glynn258.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={264: ('$phi258.0',), 278: ('$phi258.0',)})
DEBUG 2022-02-14 16:37:57,829 block_infos State(pc_initial=264 nstack_initial=1):
AdaptBlockInfo(insts=((264, {'res': '$const264.1'}), (266, {'res': '$kept_edges266.2'}), (268, {'lhs': '$const264.1', 'rhs': '$kept_edges266.2', 'res': '$268binary_multiply.3'}), (270, {'res': '$edge_reps270.4'}), (272, {'lhs': '$268binary_multiply.3', 'rhs': '$edge_reps270.4', 'res': '$272binary_subtract.5'}), (274, {'value': '$272binary_subtract.5'}), (276, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={282: ('$phi264.0',)})
DEBUG 2022-02-14 16:37:57,829 block_infos State(pc_initial=278 nstack_initial=1):
AdaptBlockInfo(insts=((278, {'res': '$kept_edges278.1'}), (280, {'value': '$kept_edges278.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={282: ('$phi278.0',)})
DEBUG 2022-02-14 16:37:57,829 block_infos State(pc_initial=282 nstack_initial=1):
AdaptBlockInfo(insts=((282, {'res': '$282load_global.1'}), (284, {'res': '$delta284.2'}), (286, {'res': '$A286.3'}), (288, {'res': '$D288.4'}), (290, {'res': '$oddV290.5'}), (292, {'func': '$282load_global.1', 'args': ['$delta284.2', '$A286.3', '$D288.4', '$oddV290.5'], 'res': '$292call_function.6'}), (294, {'iterable': '$292call_function.6', 'stores': ['$294unpack_sequence.7', '$294unpack_sequence.8', '$294unpack_sequence.9', '$294unpack_sequence.10'], 'tupleobj': '$294unpack_sequence.11'}), (296, {'value': '$294unpack_sequence.7'}), (298, {'value': '$294unpack_sequence.8'}), (300, {'value': '$294unpack_sequence.9'}), (302, {'value': '$294unpack_sequence.10'}), (304, {'res': '$304load_global.12'}), (306, {'res': '$AX_S306.13'}), (308, {'func': '$304load_global.12', 'args': ['$AX_S306.13'], 'res': '$308call_function.14'}), (310, {'value': '$308call_function.14'}), (312, {'res': '$312load_global.15'}), (314, {'res': '$E314.16'}), (316, {'res': '$AX_S316.17'}), (318, {'res': '$XD_S318.18'}), (320, {'res': '$D_S320.19'}), (322, {'res': '$N_max322.20'}), (324, {'func': '$312load_global.15', 'args': ['$E314.16', '$AX_S316.17', '$XD_S318.18', '$D_S320.19', '$N_max322.20'], 'res': '$324call_function.21'}), (326, {'value': '$324call_function.21'}), (328, {'res': '$328load_global.22'}), (330, {'res': '$E330.23'}), (332, {'res': '$AX_S332.24'}), (334, {'res': '$XD_S334.25'}), (336, {'res': '$D_S336.26'}), (338, {'res': '$N_max338.27'}), (340, {'res': '$oddloop340.28'}), (342, {'res': '$oddVX_S342.29'}), (344, {'func': '$328load_global.22', 'args': ['$E330.23', '$AX_S332.24', '$XD_S334.25', '$D_S336.26', '$N_max338.27', '$oddloop340.28', '$oddVX_S342.29'], 'res': '$344call_function.30'}), (346, {'value': '$344call_function.30'}), (348, {'res': '$348load_global.31'}), (350, {'res': '$const350.32'}), (352, {'res': '$kept_edges352.33'}), (354, {'res': '$const354.34'}), (356, {'index': '$const354.34', 'target': '$kept_edges352.33', 'res': '$356binary_subscr.35'}), (358, {'lhs': '$const350.32', 'rhs': '$356binary_subscr.35', 'res': '$358binary_multiply.36'}), (360, {'res': '$const360.37'}), (362, {'res': '$batch_max362.38'}), (364, {'lhs': '$const360.37', 'rhs': '$batch_max362.38', 'res': '$364binary_multiply.39'}), (366, {'res': '$odd_cutoff366.40'}), (368, {'lhs': '$364binary_multiply.39', 'rhs': '$odd_cutoff366.40', 'res': '$368binary_add.41'}), (370, {'res': '$const370.42'}), (372, {'lhs': '$368binary_add.41', 'rhs': '$const370.42', 'res': '$372binary_add.43'}), (374, {'func': '$348load_global.31', 'args': ['$358binary_multiply.36', '$372binary_add.43'], 'res': '$374call_function.44'}), (376, {'value': '$374call_function.44', 'res': '$376get_iter.45'})), outgoing_phis={'$phi378.1': '$376get_iter.45'}, blockstack=(), active_try_block=None, outgoing_edgepushed={378: ('$phi282.0', '$376get_iter.45')})
DEBUG 2022-02-14 16:37:57,830 block_infos State(pc_initial=378 nstack_initial=2):
AdaptBlockInfo(insts=((378, {'iterator': '$phi378.1', 'pair': '$378for_iter.2', 'indval': '$378for_iter.3', 'pred': '$378for_iter.4'}),), outgoing_phis={'$phi380.2': '$378for_iter.3'}, blockstack=(), active_try_block=None, outgoing_edgepushed={510: ('$phi378.0',), 380: ('$phi378.0', '$phi378.1', '$378for_iter.3')})
DEBUG 2022-02-14 16:37:57,830 block_infos State(pc_initial=380 nstack_initial=3):
AdaptBlockInfo(insts=((380, {'value': '$phi380.2'}), (382, {'res': '$N_fixed382.3'}), (384, {'res': '$N_det384.4'}), (386, {'lhs': '$N_fixed382.3', 'rhs': '$N_det384.4', 'res': '$386binary_add.5'}), (388, {'value': '$386binary_add.5'}), (390, {'res': '$const390.6'}), (392, {'res': '$N392.7'}), (394, {'res': '$const394.8'}), (396, {'lhs': '$N392.7', 'rhs': '$const394.8', 'res': '$396binary_floor_divide.9'}), (398, {'res': '$edges_sum398.10'}), (400, {'lhs': '$396binary_floor_divide.9', 'rhs': '$edges_sum398.10', 'res': '$400binary_subtract.11'}), (402, {'lhs': '$const390.6', 'rhs': '$400binary_subtract.11', 'res': '$402binary_power.12'}), (404, {'value': '$402binary_power.12'}), (406, {'res': '$binoms406.13'}), (408, {'res': '$N_det408.14'}), (410, {'res': '$const410.15'}), (412, {'lhs': '$N_det408.14', 'rhs': '$const410.15', 'res': '$412binary_floor_divide.16'}), (414, {'res': '$kept_edges414.17'}), (416, {'res': '$const416.18'}), (418, {'index': '$const416.18', 'target': '$kept_edges414.17', 'res': '$418binary_subscr.19'}), (420, {'items': ['$412binary_floor_divide.16', '$418binary_subscr.19'], 'res': '$420build_tuple.20'}), (422, {'index': '$420build_tuple.20', 'target': '$binoms406.13', 'res': '$422binary_subscr.21'}), (424, {'res': '$binom_prod424.22'}), (426, {'lhs': '$422binary_subscr.21', 'rhs': '$binom_prod424.22', 'res': '$426binary_multiply.23'}), (428, {'value': '$426binary_multiply.23'}), (430, {'res': '$N_det430.24'}), (432, {'res': '$const432.25'}), (434, {'lhs': '$N_det430.24', 'rhs': '$const432.25', 'res': '$434binary_modulo.26'}), (436, {'res': '$const436.27'}), (438, {'lhs': '$434binary_modulo.26', 'rhs': '$const436.27', 'res': '$438compare_op.28'}), (440, {'pred': '$438compare_op.28'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={444: ('$phi380.0', '$phi380.1'), 478: ('$phi380.0', '$phi380.1')})
DEBUG 2022-02-14 16:37:57,830 block_infos State(pc_initial=444 nstack_initial=2):
AdaptBlockInfo(insts=((444, {'res': '$Hnew444.2'}), (446, {'res': '$N_det446.3'}), (448, {'orig': ['$Hnew444.2', '$N_det446.3'], 'duped': ['$448dup_top_two.4', '$448dup_top_two.5']}), (450, {'index': '$448dup_top_two.5', 'target': '$448dup_top_two.4', 'res': '$450binary_subscr.6'}), (452, {'res': '$n_det_binom_prod452.7'}), (454, {'res': '$plus_minus454.8'}), (456, {'lhs': '$n_det_binom_prod452.7', 'rhs': '$plus_minus454.8', 'res': '$456binary_multiply.9'}), (458, {'res': '$f_even458.10'}), (460, {'res': '$N460.11'}), (462, {'res': '$const462.12'}), (464, {'lhs': '$N460.11', 'rhs': '$const462.12', 'res': '$464binary_floor_divide.13'}), (466, {'index': '$464binary_floor_divide.13', 'target': '$f_even458.10', 'res': '$466binary_subscr.14'}), (468, {'lhs': '$456binary_multiply.9', 'rhs': '$466binary_subscr.14', 'res': '$468binary_multiply.15'}), (470, {'lhs': '$450binary_subscr.6', 'rhs': '$468binary_multiply.15', 'res': '$470inplace_add.16'}), (474, {'target': '$Hnew444.2', 'index': '$N_det446.3', 'value': '$470inplace_add.16'}), (476, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={506: ('$phi444.0', '$phi444.1')})
DEBUG 2022-02-14 16:37:57,830 block_infos State(pc_initial=478 nstack_initial=2):
AdaptBlockInfo(insts=((478, {'res': '$Hnew478.2'}), (480, {'res': '$N_det480.3'}), (482, {'orig': ['$Hnew478.2', '$N_det480.3'], 'duped': ['$482dup_top_two.4', '$482dup_top_two.5']}), (484, {'index': '$482dup_top_two.5', 'target': '$482dup_top_two.4', 'res': '$484binary_subscr.6'}), (486, {'res': '$n_det_binom_prod486.7'}), (488, {'res': '$plus_minus488.8'}), (490, {'lhs': '$n_det_binom_prod486.7', 'rhs': '$plus_minus488.8', 'res': '$490binary_multiply.9'}), (492, {'res': '$f_odd492.10'}), (494, {'res': '$N494.11'}), (496, {'index': '$N494.11', 'target': '$f_odd492.10', 'res': '$496binary_subscr.12'}), (498, {'lhs': '$490binary_multiply.9', 'rhs': '$496binary_subscr.12', 'res': '$498binary_multiply.13'}), (500, {'lhs': '$484binary_subscr.6', 'rhs': '$498binary_multiply.13', 'res': '$500inplace_add.14'}), (504, {'target': '$Hnew478.2', 'index': '$N_det480.3', 'value': '$500inplace_add.14'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={506: ('$phi478.0', '$phi478.1')})
DEBUG 2022-02-14 16:37:57,830 block_infos State(pc_initial=506 nstack_initial=2):
AdaptBlockInfo(insts=((506, {}),), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={378: ('$phi506.0', '$phi506.1')})
DEBUG 2022-02-14 16:37:57,830 block_infos State(pc_initial=510 nstack_initial=1):
AdaptBlockInfo(insts=((510, {'res': '$H_batch510.1'}), (512, {'res': '$Hnew512.2'}), (514, {'lhs': '$H_batch510.1', 'rhs': '$Hnew512.2', 'res': '$514inplace_add.3'}), (516, {'value': '$514inplace_add.3'}), (518, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={158: ('$phi510.0',)})
DEBUG 2022-02-14 16:37:57,830 block_infos State(pc_initial=520 nstack_initial=0):
AdaptBlockInfo(insts=((520, {'res': '$glynn520.0'}), (522, {'pred': '$glynn520.0'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={526: (), 580: ()})
DEBUG 2022-02-14 16:37:57,830 block_infos State(pc_initial=526 nstack_initial=0):
AdaptBlockInfo(insts=((526, {'res': '$526load_global.0'}), (528, {'res': '$H_batch528.1'}), (530, {'item': '$H_batch528.1', 'res': '$530load_attr.2'}), (532, {'res': '$const532.3'}), (534, {'index': '$const532.3', 'target': '$530load_attr.2', 'res': '$534binary_subscr.4'}), (536, {'func': '$526load_global.0', 'args': ['$534binary_subscr.4'], 'res': '$536call_function.5'}), (538, {'value': '$536call_function.5', 'res': '$538get_iter.6'})), outgoing_phis={'$phi540.0': '$538get_iter.6'}, blockstack=(), active_try_block=None, outgoing_edgepushed={540: ('$538get_iter.6',)})
DEBUG 2022-02-14 16:37:57,830 block_infos State(pc_initial=540 nstack_initial=1):
AdaptBlockInfo(insts=((540, {'iterator': '$phi540.0', 'pair': '$540for_iter.1', 'indval': '$540for_iter.2', 'pred': '$540for_iter.3'}),), outgoing_phis={'$phi542.1': '$540for_iter.2'}, blockstack=(), active_try_block=None, outgoing_edgepushed={580: (), 542: ('$phi540.0', '$540for_iter.2')})
DEBUG 2022-02-14 16:37:57,830 block_infos State(pc_initial=542 nstack_initial=2):
AdaptBlockInfo(insts=((542, {'value': '$phi542.1'}), (544, {'res': '$N_fixed544.2'}), (546, {'res': '$j546.3'}), (548, {'lhs': '$N_fixed544.2', 'rhs': '$j546.3', 'res': '$548binary_add.4'}), (550, {'value': '$548binary_add.4'}), (552, {'res': '$H_batch552.5'}), (554, {'res': '$j554.6'}), (556, {'orig': ['$H_batch552.5', '$j554.6'], 'duped': ['$556dup_top_two.7', '$556dup_top_two.8']}), (558, {'index': '$556dup_top_two.8', 'target': '$556dup_top_two.7', 'res': '$558binary_subscr.9'}), (560, {'res': '$const560.10'}), (562, {'res': '$x562.11'}), (564, {'res': '$const564.12'}), (566, {'lhs': '$x562.11', 'rhs': '$const564.12', 'res': '$566binary_floor_divide.13'}), (568, {'lhs': '$const560.10', 'rhs': '$566binary_floor_divide.13', 'res': '$568binary_power.14'}), (570, {'lhs': '$558binary_subscr.9', 'rhs': '$568binary_power.14', 'res': '$570inplace_multiply.15'}), (574, {'target': '$H_batch552.5', 'index': '$j554.6', 'value': '$570inplace_multiply.15'}), (576, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={540: ('$phi542.0',)})
DEBUG 2022-02-14 16:37:57,830 block_infos State(pc_initial=580 nstack_initial=0):
AdaptBlockInfo(insts=((580, {'res': '$H_batch580.0'}), (582, {'retval': '$H_batch580.0', 'castval': '$582return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG 2022-02-14 16:37:57,836 label 0:
    A = arg(0, name=A)                       ['A']
    D = arg(1, name=D)                       ['D']
    fixed_edge_reps = arg(2, name=fixed_edge_reps) ['fixed_edge_reps']
    batch_max = arg(3, name=batch_max)       ['batch_max']
    odd_cutoff = arg(4, name=odd_cutoff)     ['odd_cutoff']
    glynn = arg(5, name=glynn)               ['glynn']
    $const4.1 = const(int, 0)                ['$const4.1']
    oddloop = getitem(value=D, index=$const4.1, fn=<built-in function getitem>) ['$const4.1', 'D', 'oddloop']
    $const12.4 = const(int, 0)               ['$const12.4']
    $const14.5 = const(NoneType, None)       ['$const14.5']
    $const16.6 = const(NoneType, None)       ['$const16.6']
    $18build_slice.7 = global(slice: <class 'slice'>) ['$18build_slice.7']
    $18build_slice.8 = call $18build_slice.7($const14.5, $const16.6, func=$18build_slice.7, args=(Var($const14.5, loop_hafnian_batch.py:21), Var($const16.6, loop_hafnian_batch.py:21)), kws=(), vararg=None, target=None) ['$18build_slice.7', '$18build_slice.8', '$const14.5', '$const16.6']
    $20build_tuple.9 = build_tuple(items=[Var($const12.4, loop_hafnian_batch.py:21), Var($18build_slice.8, loop_hafnian_batch.py:21)]) ['$18build_slice.8', '$20build_tuple.9', '$const12.4']
    oddV = getitem(value=A, index=$20build_tuple.9, fn=<built-in function getitem>) ['$20build_tuple.9', 'A', 'oddV']
    $28load_attr.12 = getattr(value=A, attr=shape) ['$28load_attr.12', 'A']
    $const30.13 = const(int, 0)              ['$const30.13']
    n = getitem(value=$28load_attr.12, index=$const30.13, fn=<built-in function getitem>) ['$28load_attr.12', '$const30.13', 'n']
    $const36.15 = const(int, 2)              ['$const36.15']
    $40load_method.17 = getattr(value=fixed_edge_reps, attr=sum) ['$40load_method.17', 'fixed_edge_reps']
    $42call_method.18 = call $40load_method.17(func=$40load_method.17, args=[], kws=(), vararg=None, target=None) ['$40load_method.17', '$42call_method.18']
    N_fixed = $const36.15 * $42call_method.18 ['$42call_method.18', '$const36.15', 'N_fixed']
    $const50.21 = const(int, 2)              ['$const50.21']
    $54binary_multiply.23 = $const50.21 * batch_max ['$54binary_multiply.23', '$const50.21', 'batch_max']
    $56binary_add.24 = N_fixed + $54binary_multiply.23 ['$54binary_multiply.23', '$56binary_add.24', 'N_fixed']
    N_max = $56binary_add.24 + odd_cutoff    ['$56binary_add.24', 'N_max', 'odd_cutoff']
    $64load_global.27 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>) ['$64load_global.27']
    $66load_method.28 = getattr(value=$64load_global.27, attr=concatenate) ['$64load_global.27', '$66load_method.28']
    $68load_global.29 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>) ['$68load_global.29']
    $70load_method.30 = getattr(value=$68load_global.29, attr=array) ['$68load_global.29', '$70load_method.30']
    $74build_list.32 = build_list(items=[Var(batch_max, loop_hafnian_batch.py:20)]) ['$74build_list.32', 'batch_max']
    $76call_method.33 = call $70load_method.30($74build_list.32, func=$70load_method.30, args=[Var($74build_list.32, loop_hafnian_batch.py:28)], kws=(), vararg=None, target=None) ['$70load_method.30', '$74build_list.32', '$76call_method.33']
    $80build_tuple.35 = build_tuple(items=[Var($76call_method.33, loop_hafnian_batch.py:28), Var(fixed_edge_reps, loop_hafnian_batch.py:20)]) ['$76call_method.33', '$80build_tuple.35', 'fixed_edge_reps']
    edge_reps = call $66load_method.28($80build_tuple.35, func=$66load_method.28, args=[Var($80build_tuple.35, loop_hafnian_batch.py:28)], kws=(), vararg=None, target=None) ['$66load_method.28', '$80build_tuple.35', 'edge_reps']
    $86load_global.37 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>) ['$86load_global.37']
    $88load_method.38 = getattr(value=$86load_global.37, attr=prod) ['$86load_global.37', '$88load_method.38']
    $const92.40 = const(int, 1)              ['$const92.40']
    $94binary_add.41 = edge_reps + $const92.40 ['$94binary_add.41', '$const92.40', 'edge_reps']
    steps = call $88load_method.38($94binary_add.41, func=$88load_method.38, args=[Var($94binary_add.41, loop_hafnian_batch.py:29)], kws=(), vararg=None, target=None) ['$88load_method.38', '$94binary_add.41', 'steps']
    $102load_method.44 = getattr(value=edge_reps, attr=max) ['$102load_method.44', 'edge_reps']
    $104call_method.45 = call $102load_method.44(func=$102load_method.44, args=[], kws=(), vararg=None, target=None) ['$102load_method.44', '$104call_method.45']
    max_binom = $104call_method.45 + odd_cutoff ['$104call_method.45', 'max_binom', 'odd_cutoff']
    $112load_global.48 = global(precompute_binoms: CPUDispatcher(<function precompute_binoms at 0x7fa047ebe310>)) ['$112load_global.48']
    binoms = call $112load_global.48(max_binom, func=$112load_global.48, args=[Var(max_binom, loop_hafnian_batch.py:31)], kws=(), vararg=None, target=None) ['$112load_global.48', 'binoms', 'max_binom']
    $120load_global.51 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>) ['$120load_global.51']
    $122load_attr.52 = getattr(value=$120load_global.51, attr=zeros) ['$120load_global.51', '$122load_attr.52']
    $const124.53 = const(int, 2)             ['$const124.53']
    $128binary_multiply.55 = $const124.53 * batch_max ['$128binary_multiply.55', '$const124.53', 'batch_max']
    $132binary_add.57 = $128binary_multiply.55 + odd_cutoff ['$128binary_multiply.55', '$132binary_add.57', 'odd_cutoff']
    $const134.58 = const(int, 1)             ['$const134.58']
    $136binary_add.59 = $132binary_add.57 + $const134.58 ['$132binary_add.57', '$136binary_add.59', '$const134.58']
    $138load_global.60 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>) ['$138load_global.60']
    $140load_attr.61 = getattr(value=$138load_global.60, attr=complex128) ['$138load_global.60', '$140load_attr.61']
    H_batch = call $122load_attr.52($136binary_add.59, func=$122load_attr.52, args=[Var($136binary_add.59, loop_hafnian_batch.py:34)], kws=[('dtype', Var($140load_attr.61, loop_hafnian_batch.py:34))], vararg=None, target=None) ['$122load_attr.52', '$136binary_add.59', '$140load_attr.61', 'H_batch']
    $148load_global.64 = global(numba: <module 'numba' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numba/__init__.py'>) ['$148load_global.64']
    $150load_method.65 = getattr(value=$148load_global.64, attr=prange) ['$148load_global.64', '$150load_method.65']
    $154call_method.67 = call $150load_method.65(steps, func=$150load_method.65, args=[Var(steps, loop_hafnian_batch.py:29)], kws=(), vararg=None, target=None) ['$150load_method.65', '$154call_method.67', 'steps']
    $156get_iter.68 = getiter(value=$154call_method.67) ['$154call_method.67', '$156get_iter.68']
    $phi158.0 = $156get_iter.68              ['$156get_iter.68', '$phi158.0']
    jump 158                                 []
label 158:
    $158for_iter.1 = iternext(value=$phi158.0) ['$158for_iter.1', '$phi158.0']
    $158for_iter.2 = pair_first(value=$158for_iter.1) ['$158for_iter.1', '$158for_iter.2']
    $158for_iter.3 = pair_second(value=$158for_iter.1) ['$158for_iter.1', '$158for_iter.3']
    $phi162.1 = $158for_iter.2               ['$158for_iter.2', '$phi162.1']
    branch $158for_iter.3, 162, 520          ['$158for_iter.3']
label 162:
    j = $phi162.1                            ['$phi162.1', 'j']
    $164load_global.2 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>) ['$164load_global.2']
    $166load_attr.3 = getattr(value=$164load_global.2, attr=zeros) ['$164load_global.2', '$166load_attr.3']
    $const168.4 = const(int, 2)              ['$const168.4']
    $172binary_multiply.6 = $const168.4 * batch_max ['$172binary_multiply.6', '$const168.4', 'batch_max']
    $176binary_add.8 = $172binary_multiply.6 + odd_cutoff ['$172binary_multiply.6', '$176binary_add.8', 'odd_cutoff']
    $const178.9 = const(int, 1)              ['$const178.9']
    $180binary_add.10 = $176binary_add.8 + $const178.9 ['$176binary_add.8', '$180binary_add.10', '$const178.9']
    $182load_global.11 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>) ['$182load_global.11']
    $184load_attr.12 = getattr(value=$182load_global.11, attr=complex128) ['$182load_global.11', '$184load_attr.12']
    Hnew = call $166load_attr.3($180binary_add.10, func=$166load_attr.3, args=[Var($180binary_add.10, loop_hafnian_batch.py:37)], kws=[('dtype', Var($184load_attr.12, loop_hafnian_batch.py:37))], vararg=None, target=None) ['$166load_attr.3', '$180binary_add.10', '$184load_attr.12', 'Hnew']
    $192load_global.15 = global(find_kept_edges: CPUDispatcher(<function find_kept_edges at 0x7fa047ebe790>)) ['$192load_global.15']
    kept_edges = call $192load_global.15(j, edge_reps, func=$192load_global.15, args=[Var(j, loop_hafnian_batch.py:35), Var(edge_reps, loop_hafnian_batch.py:28)], kws=(), vararg=None, target=None) ['$192load_global.15', 'edge_reps', 'j', 'kept_edges']
    $204load_method.20 = getattr(value=kept_edges, attr=sum) ['$204load_method.20', 'kept_edges']
    edges_sum = call $204load_method.20(func=$204load_method.20, args=[], kws=(), vararg=None, target=None) ['$204load_method.20', 'edges_sum']
    binom_prod = const(float, 1.0)           ['binom_prod']
    $214load_global.23 = global(range: <class 'range'>) ['$214load_global.23']
    $const216.24 = const(int, 1)             ['$const216.24']
    $const220.26 = const(int, 2)             ['$const220.26']
    $222binary_floor_divide.27 = n // $const220.26 ['$222binary_floor_divide.27', '$const220.26', 'n']
    $224call_function.28 = call $214load_global.23($const216.24, $222binary_floor_divide.27, func=$214load_global.23, args=[Var($const216.24, loop_hafnian_batch.py:43), Var($222binary_floor_divide.27, loop_hafnian_batch.py:43)], kws=(), vararg=None, target=None) ['$214load_global.23', '$222binary_floor_divide.27', '$224call_function.28', '$const216.24']
    $226get_iter.29 = getiter(value=$224call_function.28) ['$224call_function.28', '$226get_iter.29']
    $phi228.1 = $226get_iter.29              ['$226get_iter.29', '$phi228.1']
    jump 228                                 []
label 228:
    $228for_iter.2 = iternext(value=$phi228.1) ['$228for_iter.2', '$phi228.1']
    $228for_iter.3 = pair_first(value=$228for_iter.2) ['$228for_iter.2', '$228for_iter.3']
    $228for_iter.4 = pair_second(value=$228for_iter.2) ['$228for_iter.2', '$228for_iter.4']
    $phi230.2 = $228for_iter.3               ['$228for_iter.3', '$phi230.2']
    branch $228for_iter.4, 230, 258          ['$228for_iter.4']
label 230:
    i = $phi230.2                            ['$phi230.2', 'i']
    $240binary_subscr.7 = getitem(value=edge_reps, index=i, fn=<built-in function getitem>) ['$240binary_subscr.7', 'edge_reps', 'i']
    $246binary_subscr.10 = getitem(value=kept_edges, index=i, fn=<built-in function getitem>) ['$246binary_subscr.10', 'i', 'kept_edges']
    $248build_tuple.11 = build_tuple(items=[Var($240binary_subscr.7, loop_hafnian_batch.py:44), Var($246binary_subscr.10, loop_hafnian_batch.py:44)]) ['$240binary_subscr.7', '$246binary_subscr.10', '$248build_tuple.11']
    $250binary_subscr.12 = getitem(value=binoms, index=$248build_tuple.11, fn=<built-in function getitem>) ['$248build_tuple.11', '$250binary_subscr.12', 'binoms']
    $252inplace_multiply.13 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=binom_prod, rhs=$250binary_subscr.12, static_lhs=Undefined, static_rhs=Undefined) ['$250binary_subscr.12', '$252inplace_multiply.13', 'binom_prod']
    binom_prod = $252inplace_multiply.13     ['$252inplace_multiply.13', 'binom_prod']
    jump 228                                 []
label 258:
    bool260 = global(bool: <class 'bool'>)   ['bool260']
    $260pred = call bool260(glynn, func=bool260, args=(Var(glynn, loop_hafnian_batch.py:20),), kws=(), vararg=None, target=None) ['$260pred', 'bool260', 'glynn']
    branch $260pred, 264, 278                ['$260pred']
label 264:
    $const264.1 = const(int, 2)              ['$const264.1']
    $268binary_multiply.3 = $const264.1 * kept_edges ['$268binary_multiply.3', '$const264.1', 'kept_edges']
    delta = $268binary_multiply.3 - edge_reps ['$268binary_multiply.3', 'delta', 'edge_reps']
    jump 282                                 []
label 278:
    delta = kept_edges                       ['delta', 'kept_edges']
    jump 282                                 []
label 282:
    $282load_global.1 = global(get_submatrices: CPUDispatcher(<function get_submatrices at 0x7fa047ebed30>)) ['$282load_global.1']
    $292call_function.6 = call $282load_global.1(delta, A, D, oddV, func=$282load_global.1, args=[Var(delta, loop_hafnian_batch.py:47), Var(A, loop_hafnian_batch.py:20), Var(D, loop_hafnian_batch.py:20), Var(oddV, loop_hafnian_batch.py:21)], kws=(), vararg=None, target=None) ['$282load_global.1', '$292call_function.6', 'A', 'D', 'delta', 'oddV']
    $294unpack_sequence.11 = exhaust_iter(value=$292call_function.6, count=4) ['$292call_function.6', '$294unpack_sequence.11']
    $294unpack_sequence.7 = static_getitem(value=$294unpack_sequence.11, index=0, index_var=None, fn=<built-in function getitem>) ['$294unpack_sequence.11', '$294unpack_sequence.7']
    $294unpack_sequence.8 = static_getitem(value=$294unpack_sequence.11, index=1, index_var=None, fn=<built-in function getitem>) ['$294unpack_sequence.11', '$294unpack_sequence.8']
    $294unpack_sequence.9 = static_getitem(value=$294unpack_sequence.11, index=2, index_var=None, fn=<built-in function getitem>) ['$294unpack_sequence.11', '$294unpack_sequence.9']
    $294unpack_sequence.10 = static_getitem(value=$294unpack_sequence.11, index=3, index_var=None, fn=<built-in function getitem>) ['$294unpack_sequence.10', '$294unpack_sequence.11']
    AX_S = $294unpack_sequence.7             ['$294unpack_sequence.7', 'AX_S']
    XD_S = $294unpack_sequence.8             ['$294unpack_sequence.8', 'XD_S']
    D_S = $294unpack_sequence.9              ['$294unpack_sequence.9', 'D_S']
    oddVX_S = $294unpack_sequence.10         ['$294unpack_sequence.10', 'oddVX_S']
    $304load_global.12 = global(eigvals: CPUDispatcher(<function eigvals at 0x7fa047e5d430>)) ['$304load_global.12']
    E = call $304load_global.12(AX_S, func=$304load_global.12, args=[Var(AX_S, loop_hafnian_batch.py:51)], kws=(), vararg=None, target=None) ['$304load_global.12', 'AX_S', 'E']
    $312load_global.15 = global(f_loop: CPUDispatcher(<function f_loop at 0x7fa047ebe9d0>)) ['$312load_global.15']
    f_even = call $312load_global.15(E, AX_S, XD_S, D_S, N_max, func=$312load_global.15, args=[Var(E, loop_hafnian_batch.py:53), Var(AX_S, loop_hafnian_batch.py:51), Var(XD_S, loop_hafnian_batch.py:51), Var(D_S, loop_hafnian_batch.py:51), Var(N_max, loop_hafnian_batch.py:26)], kws=(), vararg=None, target=None) ['$312load_global.15', 'AX_S', 'D_S', 'E', 'N_max', 'XD_S', 'f_even']
    $328load_global.22 = global(f_loop_odd: CPUDispatcher(<function f_loop_odd at 0x7fa047ebeb80>)) ['$328load_global.22']
    f_odd = call $328load_global.22(E, AX_S, XD_S, D_S, N_max, oddloop, oddVX_S, func=$328load_global.22, args=[Var(E, loop_hafnian_batch.py:53), Var(AX_S, loop_hafnian_batch.py:51), Var(XD_S, loop_hafnian_batch.py:51), Var(D_S, loop_hafnian_batch.py:51), Var(N_max, loop_hafnian_batch.py:26), Var(oddloop, loop_hafnian_batch.py:20), Var(oddVX_S, loop_hafnian_batch.py:51)], kws=(), vararg=None, target=None) ['$328load_global.22', 'AX_S', 'D_S', 'E', 'N_max', 'XD_S', 'f_odd', 'oddVX_S', 'oddloop']
    $348load_global.31 = global(range: <class 'range'>) ['$348load_global.31']
    $const350.32 = const(int, 2)             ['$const350.32']
    $const354.34 = const(int, 0)             ['$const354.34']
    $356binary_subscr.35 = getitem(value=kept_edges, index=$const354.34, fn=<built-in function getitem>) ['$356binary_subscr.35', '$const354.34', 'kept_edges']
    $358binary_multiply.36 = $const350.32 * $356binary_subscr.35 ['$356binary_subscr.35', '$358binary_multiply.36', '$const350.32']
    $const360.37 = const(int, 2)             ['$const360.37']
    $364binary_multiply.39 = $const360.37 * batch_max ['$364binary_multiply.39', '$const360.37', 'batch_max']
    $368binary_add.41 = $364binary_multiply.39 + odd_cutoff ['$364binary_multiply.39', '$368binary_add.41', 'odd_cutoff']
    $const370.42 = const(int, 1)             ['$const370.42']
    $372binary_add.43 = $368binary_add.41 + $const370.42 ['$368binary_add.41', '$372binary_add.43', '$const370.42']
    $374call_function.44 = call $348load_global.31($358binary_multiply.36, $372binary_add.43, func=$348load_global.31, args=[Var($358binary_multiply.36, loop_hafnian_batch.py:58), Var($372binary_add.43, loop_hafnian_batch.py:58)], kws=(), vararg=None, target=None) ['$348load_global.31', '$358binary_multiply.36', '$372binary_add.43', '$374call_function.44']
    $376get_iter.45 = getiter(value=$374call_function.44) ['$374call_function.44', '$376get_iter.45']
    $phi378.1 = $376get_iter.45              ['$376get_iter.45', '$phi378.1']
    jump 378                                 []
label 378:
    $378for_iter.2 = iternext(value=$phi378.1) ['$378for_iter.2', '$phi378.1']
    $378for_iter.3 = pair_first(value=$378for_iter.2) ['$378for_iter.2', '$378for_iter.3']
    $378for_iter.4 = pair_second(value=$378for_iter.2) ['$378for_iter.2', '$378for_iter.4']
    $phi380.2 = $378for_iter.3               ['$378for_iter.3', '$phi380.2']
    branch $378for_iter.4, 380, 510          ['$378for_iter.4']
label 380:
    N_det = $phi380.2                        ['$phi380.2', 'N_det']
    N = N_fixed + N_det                      ['N', 'N_det', 'N_fixed']
    $const390.6 = const(float, -1.0)         ['$const390.6']
    $const394.8 = const(int, 2)              ['$const394.8']
    $396binary_floor_divide.9 = N // $const394.8 ['$396binary_floor_divide.9', '$const394.8', 'N']
    $400binary_subtract.11 = $396binary_floor_divide.9 - edges_sum ['$396binary_floor_divide.9', '$400binary_subtract.11', 'edges_sum']
    plus_minus = $const390.6 ** $400binary_subtract.11 ['$400binary_subtract.11', '$const390.6', 'plus_minus']
    $const410.15 = const(int, 2)             ['$const410.15']
    $412binary_floor_divide.16 = N_det // $const410.15 ['$412binary_floor_divide.16', '$const410.15', 'N_det']
    $const416.18 = const(int, 0)             ['$const416.18']
    $418binary_subscr.19 = getitem(value=kept_edges, index=$const416.18, fn=<built-in function getitem>) ['$418binary_subscr.19', '$const416.18', 'kept_edges']
    $420build_tuple.20 = build_tuple(items=[Var($412binary_floor_divide.16, loop_hafnian_batch.py:62), Var($418binary_subscr.19, loop_hafnian_batch.py:62)]) ['$412binary_floor_divide.16', '$418binary_subscr.19', '$420build_tuple.20']
    $422binary_subscr.21 = getitem(value=binoms, index=$420build_tuple.20, fn=<built-in function getitem>) ['$420build_tuple.20', '$422binary_subscr.21', 'binoms']
    n_det_binom_prod = $422binary_subscr.21 * binom_prod ['$422binary_subscr.21', 'binom_prod', 'n_det_binom_prod']
    $const432.25 = const(int, 2)             ['$const432.25']
    $434binary_modulo.26 = N_det % $const432.25 ['$434binary_modulo.26', '$const432.25', 'N_det']
    $const436.27 = const(int, 0)             ['$const436.27']
    $438compare_op.28 = $434binary_modulo.26 == $const436.27 ['$434binary_modulo.26', '$438compare_op.28', '$const436.27']
    bool440 = global(bool: <class 'bool'>)   ['bool440']
    $440pred = call bool440($438compare_op.28, func=bool440, args=(Var($438compare_op.28, loop_hafnian_batch.py:64),), kws=(), vararg=None, target=None) ['$438compare_op.28', '$440pred', 'bool440']
    branch $440pred, 444, 478                ['$440pred']
label 444:
    $450binary_subscr.6 = getitem(value=Hnew, index=N_det, fn=<built-in function getitem>) ['$450binary_subscr.6', 'Hnew', 'N_det']
    $456binary_multiply.9 = n_det_binom_prod * plus_minus ['$456binary_multiply.9', 'n_det_binom_prod', 'plus_minus']
    $const462.12 = const(int, 2)             ['$const462.12']
    $464binary_floor_divide.13 = N // $const462.12 ['$464binary_floor_divide.13', '$const462.12', 'N']
    $466binary_subscr.14 = getitem(value=f_even, index=$464binary_floor_divide.13, fn=<built-in function getitem>) ['$464binary_floor_divide.13', '$466binary_subscr.14', 'f_even']
    $468binary_multiply.15 = $456binary_multiply.9 * $466binary_subscr.14 ['$456binary_multiply.9', '$466binary_subscr.14', '$468binary_multiply.15']
    $470inplace_add.16 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$450binary_subscr.6, rhs=$468binary_multiply.15, static_lhs=Undefined, static_rhs=Undefined) ['$450binary_subscr.6', '$468binary_multiply.15', '$470inplace_add.16']
    Hnew[N_det] = $470inplace_add.16         ['$470inplace_add.16', 'Hnew', 'N_det']
    jump 506                                 []
label 478:
    $484binary_subscr.6 = getitem(value=Hnew, index=N_det, fn=<built-in function getitem>) ['$484binary_subscr.6', 'Hnew', 'N_det']
    $490binary_multiply.9 = n_det_binom_prod * plus_minus ['$490binary_multiply.9', 'n_det_binom_prod', 'plus_minus']
    $496binary_subscr.12 = getitem(value=f_odd, index=N, fn=<built-in function getitem>) ['$496binary_subscr.12', 'N', 'f_odd']
    $498binary_multiply.13 = $490binary_multiply.9 * $496binary_subscr.12 ['$490binary_multiply.9', '$496binary_subscr.12', '$498binary_multiply.13']
    $500inplace_add.14 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$484binary_subscr.6, rhs=$498binary_multiply.13, static_lhs=Undefined, static_rhs=Undefined) ['$484binary_subscr.6', '$498binary_multiply.13', '$500inplace_add.14']
    Hnew[N_det] = $500inplace_add.14         ['$500inplace_add.14', 'Hnew', 'N_det']
    jump 506                                 []
label 506:
    jump 378                                 []
label 510:
    $514inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=H_batch, rhs=Hnew, static_lhs=Undefined, static_rhs=Undefined) ['$514inplace_add.3', 'H_batch', 'Hnew']
    H_batch = $514inplace_add.3              ['$514inplace_add.3', 'H_batch']
    jump 158                                 []
label 520:
    bool522 = global(bool: <class 'bool'>)   ['bool522']
    $522pred = call bool522(glynn, func=bool522, args=(Var(glynn, loop_hafnian_batch.py:20),), kws=(), vararg=None, target=None) ['$522pred', 'bool522', 'glynn']
    branch $522pred, 526, 580                ['$522pred']
label 526:
    $526load_global.0 = global(range: <class 'range'>) ['$526load_global.0']
    $530load_attr.2 = getattr(value=H_batch, attr=shape) ['$530load_attr.2', 'H_batch']
    $const532.3 = const(int, 0)              ['$const532.3']
    $534binary_subscr.4 = getitem(value=$530load_attr.2, index=$const532.3, fn=<built-in function getitem>) ['$530load_attr.2', '$534binary_subscr.4', '$const532.3']
    $536call_function.5 = call $526load_global.0($534binary_subscr.4, func=$526load_global.0, args=[Var($534binary_subscr.4, loop_hafnian_batch.py:72)], kws=(), vararg=None, target=None) ['$526load_global.0', '$534binary_subscr.4', '$536call_function.5']
    $538get_iter.6 = getiter(value=$536call_function.5) ['$536call_function.5', '$538get_iter.6']
    $phi540.0 = $538get_iter.6               ['$538get_iter.6', '$phi540.0']
    jump 540                                 []
label 540:
    $540for_iter.1 = iternext(value=$phi540.0) ['$540for_iter.1', '$phi540.0']
    $540for_iter.2 = pair_first(value=$540for_iter.1) ['$540for_iter.1', '$540for_iter.2']
    $540for_iter.3 = pair_second(value=$540for_iter.1) ['$540for_iter.1', '$540for_iter.3']
    $phi542.1 = $540for_iter.2               ['$540for_iter.2', '$phi542.1']
    branch $540for_iter.3, 542, 580          ['$540for_iter.3']
label 542:
    j = $phi542.1                            ['$phi542.1', 'j']
    x = N_fixed + j                          ['N_fixed', 'j', 'x']
    $558binary_subscr.9 = getitem(value=H_batch, index=j, fn=<built-in function getitem>) ['$558binary_subscr.9', 'H_batch', 'j']
    $const560.10 = const(float, 0.5)         ['$const560.10']
    $const564.12 = const(int, 2)             ['$const564.12']
    $566binary_floor_divide.13 = x // $const564.12 ['$566binary_floor_divide.13', '$const564.12', 'x']
    $568binary_power.14 = $const560.10 ** $566binary_floor_divide.13 ['$566binary_floor_divide.13', '$568binary_power.14', '$const560.10']
    $570inplace_multiply.15 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=$558binary_subscr.9, rhs=$568binary_power.14, static_lhs=Undefined, static_rhs=Undefined) ['$558binary_subscr.9', '$568binary_power.14', '$570inplace_multiply.15']
    H_batch[j] = $570inplace_multiply.15     ['$570inplace_multiply.15', 'H_batch', 'j']
    jump 540                                 []
label 580:
    $582return_value.1 = cast(value=H_batch) ['$582return_value.1', 'H_batch']
    return $582return_value.1                ['$582return_value.1']

DEBUG 2022-02-14 16:37:57,857 ==== SSA block analysis pass on 0
DEBUG 2022-02-14 16:37:57,857 Running <numba.core.ssa._GatherDefsHandler object at 0x7fa0477049d0>
DEBUG 2022-02-14 16:37:57,857 on stmt: A = arg(0, name=A)
DEBUG 2022-02-14 16:37:57,857 on stmt: D = arg(1, name=D)
DEBUG 2022-02-14 16:37:57,858 on stmt: fixed_edge_reps = arg(2, name=fixed_edge_reps)
DEBUG 2022-02-14 16:37:57,858 on stmt: batch_max = arg(3, name=batch_max)
DEBUG 2022-02-14 16:37:57,858 on stmt: odd_cutoff = arg(4, name=odd_cutoff)
DEBUG 2022-02-14 16:37:57,858 on stmt: glynn = arg(5, name=glynn)
DEBUG 2022-02-14 16:37:57,858 on stmt: $const4.1 = const(int, 0)
DEBUG 2022-02-14 16:37:57,858 on stmt: oddloop = static_getitem(value=D, index=0, index_var=$const4.1, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:37:57,858 on stmt: $const12.4 = const(int, 0)
DEBUG 2022-02-14 16:37:57,858 on stmt: $const14.5 = const(NoneType, None)
DEBUG 2022-02-14 16:37:57,858 on stmt: $const16.6 = const(NoneType, None)
DEBUG 2022-02-14 16:37:57,858 on stmt: $18build_slice.7 = global(slice: <class 'slice'>)
DEBUG 2022-02-14 16:37:57,858 on stmt: $18build_slice.8 = call $18build_slice.7($const14.5, $const16.6, func=$18build_slice.7, args=(Var($const14.5, loop_hafnian_batch.py:21), Var($const16.6, loop_hafnian_batch.py:21)), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:37:57,858 on stmt: $20build_tuple.9 = build_tuple(items=[Var($const12.4, loop_hafnian_batch.py:21), Var($18build_slice.8, loop_hafnian_batch.py:21)])
DEBUG 2022-02-14 16:37:57,858 on stmt: oddV = static_getitem(value=A, index=(0, slice(None, None, None)), index_var=$20build_tuple.9, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:37:57,858 on stmt: $28load_attr.12 = getattr(value=A, attr=shape)
DEBUG 2022-02-14 16:37:57,858 on stmt: $const30.13 = const(int, 0)
DEBUG 2022-02-14 16:37:57,858 on stmt: n = static_getitem(value=$28load_attr.12, index=0, index_var=$const30.13, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:37:57,858 on stmt: $const36.15 = const(int, 2)
DEBUG 2022-02-14 16:37:57,858 on stmt: $40load_method.17 = getattr(value=fixed_edge_reps, attr=sum)
DEBUG 2022-02-14 16:37:57,858 on stmt: $42call_method.18 = call $40load_method.17(func=$40load_method.17, args=[], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:37:57,858 on stmt: N_fixed = $const36.15 * $42call_method.18
DEBUG 2022-02-14 16:37:57,858 on stmt: $const50.21 = const(int, 2)
DEBUG 2022-02-14 16:37:57,858 on stmt: $54binary_multiply.23 = $const50.21 * batch_max
DEBUG 2022-02-14 16:37:57,858 on stmt: $56binary_add.24 = N_fixed + $54binary_multiply.23
DEBUG 2022-02-14 16:37:57,858 on stmt: N_max = $56binary_add.24 + odd_cutoff
DEBUG 2022-02-14 16:37:57,859 on stmt: $64load_global.27 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:37:57,859 on stmt: $66load_method.28 = getattr(value=$64load_global.27, attr=concatenate)
DEBUG 2022-02-14 16:37:57,859 on stmt: $68load_global.29 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:37:57,859 on stmt: $70load_method.30 = getattr(value=$68load_global.29, attr=array)
DEBUG 2022-02-14 16:37:57,859 on stmt: $74build_list.32 = build_list(items=[Var(batch_max, loop_hafnian_batch.py:20)])
DEBUG 2022-02-14 16:37:57,859 on stmt: $76call_method.33 = call $70load_method.30($74build_list.32, func=$70load_method.30, args=[Var($74build_list.32, loop_hafnian_batch.py:28)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:37:57,859 on stmt: $80build_tuple.35 = build_tuple(items=[Var($76call_method.33, loop_hafnian_batch.py:28), Var(fixed_edge_reps, loop_hafnian_batch.py:20)])
DEBUG 2022-02-14 16:37:57,859 on stmt: edge_reps = call $66load_method.28($80build_tuple.35, func=$66load_method.28, args=[Var($80build_tuple.35, loop_hafnian_batch.py:28)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:37:57,859 on stmt: $86load_global.37 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:37:57,859 on stmt: $88load_method.38 = getattr(value=$86load_global.37, attr=prod)
DEBUG 2022-02-14 16:37:57,859 on stmt: $const92.40 = const(int, 1)
DEBUG 2022-02-14 16:37:57,859 on stmt: $94binary_add.41 = edge_reps + $const92.40
DEBUG 2022-02-14 16:37:57,859 on stmt: steps = call $88load_method.38($94binary_add.41, func=$88load_method.38, args=[Var($94binary_add.41, loop_hafnian_batch.py:29)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:37:57,859 on stmt: $102load_method.44 = getattr(value=edge_reps, attr=max)
DEBUG 2022-02-14 16:37:57,859 on stmt: $104call_method.45 = call $102load_method.44(func=$102load_method.44, args=[], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:37:57,859 on stmt: max_binom = $104call_method.45 + odd_cutoff
DEBUG 2022-02-14 16:37:57,859 on stmt: $112load_global.48 = global(precompute_binoms: CPUDispatcher(<function precompute_binoms at 0x7fa047ebe310>))
DEBUG 2022-02-14 16:37:57,859 on stmt: binoms = call $112load_global.48(max_binom, func=$112load_global.48, args=[Var(max_binom, loop_hafnian_batch.py:31)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:37:57,859 on stmt: $120load_global.51 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:37:57,859 on stmt: $122load_attr.52 = getattr(value=$120load_global.51, attr=zeros)
DEBUG 2022-02-14 16:37:57,859 on stmt: $const124.53 = const(int, 2)
DEBUG 2022-02-14 16:37:57,860 on stmt: $128binary_multiply.55 = $const124.53 * batch_max
DEBUG 2022-02-14 16:37:57,860 on stmt: $132binary_add.57 = $128binary_multiply.55 + odd_cutoff
DEBUG 2022-02-14 16:37:57,860 on stmt: $const134.58 = const(int, 1)
DEBUG 2022-02-14 16:37:57,860 on stmt: $136binary_add.59 = $132binary_add.57 + $const134.58
DEBUG 2022-02-14 16:37:57,860 on stmt: $138load_global.60 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:37:57,860 on stmt: $140load_attr.61 = getattr(value=$138load_global.60, attr=complex128)
DEBUG 2022-02-14 16:37:57,860 on stmt: H_batch = call $122load_attr.52($136binary_add.59, func=$122load_attr.52, args=[Var($136binary_add.59, loop_hafnian_batch.py:34)], kws=[('dtype', Var($140load_attr.61, loop_hafnian_batch.py:34))], vararg=None, target=None)
DEBUG 2022-02-14 16:37:57,860 on stmt: $148load_global.64 = global(numba: <module 'numba' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numba/__init__.py'>)
DEBUG 2022-02-14 16:37:57,860 on stmt: $150load_method.65 = getattr(value=$148load_global.64, attr=prange)
DEBUG 2022-02-14 16:37:57,860 on stmt: $154call_method.67 = call $150load_method.65(steps, func=$150load_method.65, args=[Var(steps, loop_hafnian_batch.py:29)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:37:57,860 on stmt: $156get_iter.68 = getiter(value=$154call_method.67)
DEBUG 2022-02-14 16:37:57,860 on stmt: $phi158.0 = $156get_iter.68
DEBUG 2022-02-14 16:37:57,860 on stmt: jump 158
DEBUG 2022-02-14 16:37:57,860 ==== SSA block analysis pass on 158
DEBUG 2022-02-14 16:37:57,860 Running <numba.core.ssa._GatherDefsHandler object at 0x7fa0477049d0>
DEBUG 2022-02-14 16:37:57,860 on stmt: $158for_iter.1 = iternext(value=$phi158.0)
DEBUG 2022-02-14 16:37:57,860 on stmt: $158for_iter.2 = pair_first(value=$158for_iter.1)
DEBUG 2022-02-14 16:37:57,860 on stmt: $158for_iter.3 = pair_second(value=$158for_iter.1)
DEBUG 2022-02-14 16:37:57,860 on stmt: $phi162.1 = $158for_iter.2
DEBUG 2022-02-14 16:37:57,860 on stmt: branch $158for_iter.3, 162, 520
DEBUG 2022-02-14 16:37:57,860 ==== SSA block analysis pass on 162
DEBUG 2022-02-14 16:37:57,860 Running <numba.core.ssa._GatherDefsHandler object at 0x7fa0477049d0>
DEBUG 2022-02-14 16:37:57,861 on stmt: j = $phi162.1
DEBUG 2022-02-14 16:37:57,861 on stmt: $164load_global.2 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:37:57,861 on stmt: $166load_attr.3 = getattr(value=$164load_global.2, attr=zeros)
DEBUG 2022-02-14 16:37:57,861 on stmt: $const168.4 = const(int, 2)
DEBUG 2022-02-14 16:37:57,861 on stmt: $172binary_multiply.6 = $const168.4 * batch_max
DEBUG 2022-02-14 16:37:57,861 on stmt: $176binary_add.8 = $172binary_multiply.6 + odd_cutoff
DEBUG 2022-02-14 16:37:57,861 on stmt: $const178.9 = const(int, 1)
DEBUG 2022-02-14 16:37:57,861 on stmt: $180binary_add.10 = $176binary_add.8 + $const178.9
DEBUG 2022-02-14 16:37:57,861 on stmt: $182load_global.11 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:37:57,861 on stmt: $184load_attr.12 = getattr(value=$182load_global.11, attr=complex128)
DEBUG 2022-02-14 16:37:57,861 on stmt: Hnew = call $166load_attr.3($180binary_add.10, func=$166load_attr.3, args=[Var($180binary_add.10, loop_hafnian_batch.py:37)], kws=[('dtype', Var($184load_attr.12, loop_hafnian_batch.py:37))], vararg=None, target=None)
DEBUG 2022-02-14 16:37:57,861 on stmt: $192load_global.15 = global(find_kept_edges: CPUDispatcher(<function find_kept_edges at 0x7fa047ebe790>))
DEBUG 2022-02-14 16:37:57,861 on stmt: kept_edges = call $192load_global.15(j, edge_reps, func=$192load_global.15, args=[Var(j, loop_hafnian_batch.py:35), Var(edge_reps, loop_hafnian_batch.py:28)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:37:57,861 on stmt: $204load_method.20 = getattr(value=kept_edges, attr=sum)
DEBUG 2022-02-14 16:37:57,861 on stmt: edges_sum = call $204load_method.20(func=$204load_method.20, args=[], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:37:57,861 on stmt: binom_prod = const(float, 1.0)
DEBUG 2022-02-14 16:37:57,861 on stmt: $214load_global.23 = global(range: <class 'range'>)
DEBUG 2022-02-14 16:37:57,861 on stmt: $const216.24 = const(int, 1)
DEBUG 2022-02-14 16:37:57,861 on stmt: $const220.26 = const(int, 2)
DEBUG 2022-02-14 16:37:57,861 on stmt: $222binary_floor_divide.27 = n // $const220.26
DEBUG 2022-02-14 16:37:57,861 on stmt: $224call_function.28 = call $214load_global.23($const216.24, $222binary_floor_divide.27, func=$214load_global.23, args=[Var($const216.24, loop_hafnian_batch.py:43), Var($222binary_floor_divide.27, loop_hafnian_batch.py:43)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:37:57,861 on stmt: $226get_iter.29 = getiter(value=$224call_function.28)
DEBUG 2022-02-14 16:37:57,861 on stmt: $phi228.1 = $226get_iter.29
DEBUG 2022-02-14 16:37:57,862 on stmt: jump 228
DEBUG 2022-02-14 16:37:57,862 ==== SSA block analysis pass on 228
DEBUG 2022-02-14 16:37:57,862 Running <numba.core.ssa._GatherDefsHandler object at 0x7fa0477049d0>
DEBUG 2022-02-14 16:37:57,862 on stmt: $228for_iter.2 = iternext(value=$phi228.1)
DEBUG 2022-02-14 16:37:57,862 on stmt: $228for_iter.3 = pair_first(value=$228for_iter.2)
DEBUG 2022-02-14 16:37:57,862 on stmt: $228for_iter.4 = pair_second(value=$228for_iter.2)
DEBUG 2022-02-14 16:37:57,862 on stmt: $phi230.2 = $228for_iter.3
DEBUG 2022-02-14 16:37:57,862 on stmt: branch $228for_iter.4, 230, 258
DEBUG 2022-02-14 16:37:57,862 ==== SSA block analysis pass on 230
DEBUG 2022-02-14 16:37:57,862 Running <numba.core.ssa._GatherDefsHandler object at 0x7fa0477049d0>
DEBUG 2022-02-14 16:37:57,862 on stmt: i = $phi230.2
DEBUG 2022-02-14 16:37:57,862 on stmt: $240binary_subscr.7 = getitem(value=edge_reps, index=i, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:37:57,862 on stmt: $246binary_subscr.10 = getitem(value=kept_edges, index=i, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:37:57,862 on stmt: $248build_tuple.11 = build_tuple(items=[Var($240binary_subscr.7, loop_hafnian_batch.py:44), Var($246binary_subscr.10, loop_hafnian_batch.py:44)])
DEBUG 2022-02-14 16:37:57,862 on stmt: $250binary_subscr.12 = getitem(value=binoms, index=$248build_tuple.11, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:37:57,862 on stmt: $252inplace_multiply.13 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=binom_prod, rhs=$250binary_subscr.12, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:37:57,862 on stmt: binom_prod = $252inplace_multiply.13
DEBUG 2022-02-14 16:37:57,862 on stmt: jump 228
DEBUG 2022-02-14 16:37:57,862 ==== SSA block analysis pass on 258
DEBUG 2022-02-14 16:37:57,862 Running <numba.core.ssa._GatherDefsHandler object at 0x7fa0477049d0>
DEBUG 2022-02-14 16:37:57,862 on stmt: bool260 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:37:57,862 on stmt: $260pred = call bool260(glynn, func=bool260, args=(Var(glynn, loop_hafnian_batch.py:20),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:37:57,862 on stmt: branch $260pred, 264, 278
DEBUG 2022-02-14 16:37:57,862 ==== SSA block analysis pass on 264
DEBUG 2022-02-14 16:37:57,862 Running <numba.core.ssa._GatherDefsHandler object at 0x7fa0477049d0>
DEBUG 2022-02-14 16:37:57,862 on stmt: $const264.1 = const(int, 2)
DEBUG 2022-02-14 16:37:57,863 on stmt: $268binary_multiply.3 = $const264.1 * kept_edges
DEBUG 2022-02-14 16:37:57,863 on stmt: delta = $268binary_multiply.3 - edge_reps
DEBUG 2022-02-14 16:37:57,863 on stmt: jump 282
DEBUG 2022-02-14 16:37:57,863 ==== SSA block analysis pass on 278
DEBUG 2022-02-14 16:37:57,863 Running <numba.core.ssa._GatherDefsHandler object at 0x7fa0477049d0>
DEBUG 2022-02-14 16:37:57,863 on stmt: delta = kept_edges
DEBUG 2022-02-14 16:37:57,863 on stmt: jump 282
DEBUG 2022-02-14 16:37:57,863 ==== SSA block analysis pass on 282
DEBUG 2022-02-14 16:37:57,863 Running <numba.core.ssa._GatherDefsHandler object at 0x7fa0477049d0>
DEBUG 2022-02-14 16:37:57,863 on stmt: $282load_global.1 = global(get_submatrices: CPUDispatcher(<function get_submatrices at 0x7fa047ebed30>))
DEBUG 2022-02-14 16:37:57,863 on stmt: $292call_function.6 = call $282load_global.1(delta, A, D, oddV, func=$282load_global.1, args=[Var(delta, loop_hafnian_batch.py:47), Var(A, loop_hafnian_batch.py:20), Var(D, loop_hafnian_batch.py:20), Var(oddV, loop_hafnian_batch.py:21)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:37:57,863 on stmt: $294unpack_sequence.11 = exhaust_iter(value=$292call_function.6, count=4)
DEBUG 2022-02-14 16:37:57,863 on stmt: $294unpack_sequence.7 = static_getitem(value=$294unpack_sequence.11, index=0, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:37:57,863 on stmt: $294unpack_sequence.8 = static_getitem(value=$294unpack_sequence.11, index=1, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:37:57,863 on stmt: $294unpack_sequence.9 = static_getitem(value=$294unpack_sequence.11, index=2, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:37:57,863 on stmt: $294unpack_sequence.10 = static_getitem(value=$294unpack_sequence.11, index=3, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:37:57,863 on stmt: AX_S = $294unpack_sequence.7
DEBUG 2022-02-14 16:37:57,863 on stmt: XD_S = $294unpack_sequence.8
DEBUG 2022-02-14 16:37:57,863 on stmt: D_S = $294unpack_sequence.9
DEBUG 2022-02-14 16:37:57,863 on stmt: oddVX_S = $294unpack_sequence.10
DEBUG 2022-02-14 16:37:57,863 on stmt: $304load_global.12 = global(eigvals: CPUDispatcher(<function eigvals at 0x7fa047e5d430>))
DEBUG 2022-02-14 16:37:57,863 on stmt: E = call $304load_global.12(AX_S, func=$304load_global.12, args=[Var(AX_S, loop_hafnian_batch.py:51)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:37:57,863 on stmt: $312load_global.15 = global(f_loop: CPUDispatcher(<function f_loop at 0x7fa047ebe9d0>))
DEBUG 2022-02-14 16:37:57,863 on stmt: f_even = call $312load_global.15(E, AX_S, XD_S, D_S, N_max, func=$312load_global.15, args=[Var(E, loop_hafnian_batch.py:53), Var(AX_S, loop_hafnian_batch.py:51), Var(XD_S, loop_hafnian_batch.py:51), Var(D_S, loop_hafnian_batch.py:51), Var(N_max, loop_hafnian_batch.py:26)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:37:57,863 on stmt: $328load_global.22 = global(f_loop_odd: CPUDispatcher(<function f_loop_odd at 0x7fa047ebeb80>))
DEBUG 2022-02-14 16:37:57,864 on stmt: f_odd = call $328load_global.22(E, AX_S, XD_S, D_S, N_max, oddloop, oddVX_S, func=$328load_global.22, args=[Var(E, loop_hafnian_batch.py:53), Var(AX_S, loop_hafnian_batch.py:51), Var(XD_S, loop_hafnian_batch.py:51), Var(D_S, loop_hafnian_batch.py:51), Var(N_max, loop_hafnian_batch.py:26), Var(oddloop, loop_hafnian_batch.py:20), Var(oddVX_S, loop_hafnian_batch.py:51)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:37:57,864 on stmt: $348load_global.31 = global(range: <class 'range'>)
DEBUG 2022-02-14 16:37:57,864 on stmt: $const350.32 = const(int, 2)
DEBUG 2022-02-14 16:37:57,864 on stmt: $const354.34 = const(int, 0)
DEBUG 2022-02-14 16:37:57,864 on stmt: $356binary_subscr.35 = static_getitem(value=kept_edges, index=0, index_var=$const354.34, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:37:57,864 on stmt: $358binary_multiply.36 = $const350.32 * $356binary_subscr.35
DEBUG 2022-02-14 16:37:57,864 on stmt: $const360.37 = const(int, 2)
DEBUG 2022-02-14 16:37:57,864 on stmt: $364binary_multiply.39 = $const360.37 * batch_max
DEBUG 2022-02-14 16:37:57,864 on stmt: $368binary_add.41 = $364binary_multiply.39 + odd_cutoff
DEBUG 2022-02-14 16:37:57,864 on stmt: $const370.42 = const(int, 1)
DEBUG 2022-02-14 16:37:57,864 on stmt: $372binary_add.43 = $368binary_add.41 + $const370.42
DEBUG 2022-02-14 16:37:57,864 on stmt: $374call_function.44 = call $348load_global.31($358binary_multiply.36, $372binary_add.43, func=$348load_global.31, args=[Var($358binary_multiply.36, loop_hafnian_batch.py:58), Var($372binary_add.43, loop_hafnian_batch.py:58)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:37:57,864 on stmt: $376get_iter.45 = getiter(value=$374call_function.44)
DEBUG 2022-02-14 16:37:57,864 on stmt: $phi378.1 = $376get_iter.45
DEBUG 2022-02-14 16:37:57,864 on stmt: jump 378
DEBUG 2022-02-14 16:37:57,864 ==== SSA block analysis pass on 378
DEBUG 2022-02-14 16:37:57,864 Running <numba.core.ssa._GatherDefsHandler object at 0x7fa0477049d0>
DEBUG 2022-02-14 16:37:57,864 on stmt: $378for_iter.2 = iternext(value=$phi378.1)
DEBUG 2022-02-14 16:37:57,864 on stmt: $378for_iter.3 = pair_first(value=$378for_iter.2)
DEBUG 2022-02-14 16:37:57,864 on stmt: $378for_iter.4 = pair_second(value=$378for_iter.2)
DEBUG 2022-02-14 16:37:57,864 on stmt: $phi380.2 = $378for_iter.3
DEBUG 2022-02-14 16:37:57,864 on stmt: branch $378for_iter.4, 380, 510
DEBUG 2022-02-14 16:37:57,864 ==== SSA block analysis pass on 380
DEBUG 2022-02-14 16:37:57,864 Running <numba.core.ssa._GatherDefsHandler object at 0x7fa0477049d0>
DEBUG 2022-02-14 16:37:57,865 on stmt: N_det = $phi380.2
DEBUG 2022-02-14 16:37:57,865 on stmt: N = N_fixed + N_det
DEBUG 2022-02-14 16:37:57,865 on stmt: $const390.6 = const(float, -1.0)
DEBUG 2022-02-14 16:37:57,865 on stmt: $const394.8 = const(int, 2)
DEBUG 2022-02-14 16:37:57,865 on stmt: $396binary_floor_divide.9 = N // $const394.8
DEBUG 2022-02-14 16:37:57,865 on stmt: $400binary_subtract.11 = $396binary_floor_divide.9 - edges_sum
DEBUG 2022-02-14 16:37:57,865 on stmt: plus_minus = $const390.6 ** $400binary_subtract.11
DEBUG 2022-02-14 16:37:57,865 on stmt: $const410.15 = const(int, 2)
DEBUG 2022-02-14 16:37:57,865 on stmt: $412binary_floor_divide.16 = N_det // $const410.15
DEBUG 2022-02-14 16:37:57,865 on stmt: $const416.18 = const(int, 0)
DEBUG 2022-02-14 16:37:57,865 on stmt: $418binary_subscr.19 = static_getitem(value=kept_edges, index=0, index_var=$const416.18, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:37:57,865 on stmt: $420build_tuple.20 = build_tuple(items=[Var($412binary_floor_divide.16, loop_hafnian_batch.py:62), Var($418binary_subscr.19, loop_hafnian_batch.py:62)])
DEBUG 2022-02-14 16:37:57,865 on stmt: $422binary_subscr.21 = getitem(value=binoms, index=$420build_tuple.20, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:37:57,865 on stmt: n_det_binom_prod = $422binary_subscr.21 * binom_prod
DEBUG 2022-02-14 16:37:57,865 on stmt: $const432.25 = const(int, 2)
DEBUG 2022-02-14 16:37:57,865 on stmt: $434binary_modulo.26 = N_det % $const432.25
DEBUG 2022-02-14 16:37:57,865 on stmt: $const436.27 = const(int, 0)
DEBUG 2022-02-14 16:37:57,866 on stmt: $438compare_op.28 = $434binary_modulo.26 == $const436.27
DEBUG 2022-02-14 16:37:57,866 on stmt: bool440 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:37:57,866 on stmt: $440pred = call bool440($438compare_op.28, func=bool440, args=(Var($438compare_op.28, loop_hafnian_batch.py:64),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:37:57,866 on stmt: branch $440pred, 444, 478
DEBUG 2022-02-14 16:37:57,866 ==== SSA block analysis pass on 444
DEBUG 2022-02-14 16:37:57,866 Running <numba.core.ssa._GatherDefsHandler object at 0x7fa0477049d0>
DEBUG 2022-02-14 16:37:57,866 on stmt: $450binary_subscr.6 = getitem(value=Hnew, index=N_det, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:37:57,866 on stmt: $456binary_multiply.9 = n_det_binom_prod * plus_minus
DEBUG 2022-02-14 16:37:57,866 on stmt: $const462.12 = const(int, 2)
DEBUG 2022-02-14 16:37:57,866 on stmt: $464binary_floor_divide.13 = N // $const462.12
DEBUG 2022-02-14 16:37:57,866 on stmt: $466binary_subscr.14 = getitem(value=f_even, index=$464binary_floor_divide.13, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:37:57,866 on stmt: $468binary_multiply.15 = $456binary_multiply.9 * $466binary_subscr.14
DEBUG 2022-02-14 16:37:57,866 on stmt: $470inplace_add.16 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$450binary_subscr.6, rhs=$468binary_multiply.15, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:37:57,866 on stmt: Hnew[N_det] = $470inplace_add.16
DEBUG 2022-02-14 16:37:57,866 on stmt: jump 506
DEBUG 2022-02-14 16:37:57,866 ==== SSA block analysis pass on 478
DEBUG 2022-02-14 16:37:57,866 Running <numba.core.ssa._GatherDefsHandler object at 0x7fa0477049d0>
DEBUG 2022-02-14 16:37:57,866 on stmt: $484binary_subscr.6 = getitem(value=Hnew, index=N_det, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:37:57,867 on stmt: $490binary_multiply.9 = n_det_binom_prod * plus_minus
DEBUG 2022-02-14 16:37:57,867 on stmt: $496binary_subscr.12 = getitem(value=f_odd, index=N, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:37:57,867 on stmt: $498binary_multiply.13 = $490binary_multiply.9 * $496binary_subscr.12
DEBUG 2022-02-14 16:37:57,867 on stmt: $500inplace_add.14 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$484binary_subscr.6, rhs=$498binary_multiply.13, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:37:57,867 on stmt: Hnew[N_det] = $500inplace_add.14
DEBUG 2022-02-14 16:37:57,867 on stmt: jump 506
DEBUG 2022-02-14 16:37:57,867 ==== SSA block analysis pass on 506
DEBUG 2022-02-14 16:37:57,867 Running <numba.core.ssa._GatherDefsHandler object at 0x7fa0477049d0>
DEBUG 2022-02-14 16:37:57,867 on stmt: jump 378
DEBUG 2022-02-14 16:37:57,867 ==== SSA block analysis pass on 510
DEBUG 2022-02-14 16:37:57,867 Running <numba.core.ssa._GatherDefsHandler object at 0x7fa0477049d0>
DEBUG 2022-02-14 16:37:57,867 on stmt: $514inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=H_batch, rhs=Hnew, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:37:57,867 on stmt: H_batch = $514inplace_add.3
DEBUG 2022-02-14 16:37:57,867 on stmt: jump 158
DEBUG 2022-02-14 16:37:57,867 ==== SSA block analysis pass on 520
DEBUG 2022-02-14 16:37:57,867 Running <numba.core.ssa._GatherDefsHandler object at 0x7fa0477049d0>
DEBUG 2022-02-14 16:37:57,867 on stmt: bool522 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:37:57,867 on stmt: $522pred = call bool522(glynn, func=bool522, args=(Var(glynn, loop_hafnian_batch.py:20),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:37:57,867 on stmt: branch $522pred, 526, 580
DEBUG 2022-02-14 16:37:57,867 ==== SSA block analysis pass on 526
DEBUG 2022-02-14 16:37:57,867 Running <numba.core.ssa._GatherDefsHandler object at 0x7fa0477049d0>
DEBUG 2022-02-14 16:37:57,867 on stmt: $526load_global.0 = global(range: <class 'range'>)
DEBUG 2022-02-14 16:37:57,868 on stmt: $530load_attr.2 = getattr(value=H_batch, attr=shape)
DEBUG 2022-02-14 16:37:57,868 on stmt: $const532.3 = const(int, 0)
DEBUG 2022-02-14 16:37:57,868 on stmt: $534binary_subscr.4 = static_getitem(value=$530load_attr.2, index=0, index_var=$const532.3, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:37:57,868 on stmt: $536call_function.5 = call $526load_global.0($534binary_subscr.4, func=$526load_global.0, args=[Var($534binary_subscr.4, loop_hafnian_batch.py:72)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:37:57,868 on stmt: $538get_iter.6 = getiter(value=$536call_function.5)
DEBUG 2022-02-14 16:37:57,868 on stmt: $phi540.0 = $538get_iter.6
DEBUG 2022-02-14 16:37:57,868 on stmt: jump 540
DEBUG 2022-02-14 16:37:57,868 ==== SSA block analysis pass on 540
DEBUG 2022-02-14 16:37:57,868 Running <numba.core.ssa._GatherDefsHandler object at 0x7fa0477049d0>
DEBUG 2022-02-14 16:37:57,868 on stmt: $540for_iter.1 = iternext(value=$phi540.0)
DEBUG 2022-02-14 16:37:57,868 on stmt: $540for_iter.2 = pair_first(value=$540for_iter.1)
DEBUG 2022-02-14 16:37:57,868 on stmt: $540for_iter.3 = pair_second(value=$540for_iter.1)
DEBUG 2022-02-14 16:37:57,868 on stmt: $phi542.1 = $540for_iter.2
DEBUG 2022-02-14 16:37:57,868 on stmt: branch $540for_iter.3, 542, 580
DEBUG 2022-02-14 16:37:57,868 ==== SSA block analysis pass on 542
DEBUG 2022-02-14 16:37:57,868 Running <numba.core.ssa._GatherDefsHandler object at 0x7fa0477049d0>
DEBUG 2022-02-14 16:37:57,868 on stmt: j = $phi542.1
DEBUG 2022-02-14 16:37:57,868 on stmt: x = N_fixed + j
DEBUG 2022-02-14 16:37:57,868 on stmt: $558binary_subscr.9 = getitem(value=H_batch, index=j, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:37:57,868 on stmt: $const560.10 = const(float, 0.5)
DEBUG 2022-02-14 16:37:57,868 on stmt: $const564.12 = const(int, 2)
DEBUG 2022-02-14 16:37:57,868 on stmt: $566binary_floor_divide.13 = x // $const564.12
DEBUG 2022-02-14 16:37:57,868 on stmt: $568binary_power.14 = $const560.10 ** $566binary_floor_divide.13
DEBUG 2022-02-14 16:37:57,868 on stmt: $570inplace_multiply.15 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=$558binary_subscr.9, rhs=$568binary_power.14, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:37:57,869 on stmt: H_batch[j] = $570inplace_multiply.15
DEBUG 2022-02-14 16:37:57,869 on stmt: jump 540
DEBUG 2022-02-14 16:37:57,869 ==== SSA block analysis pass on 580
DEBUG 2022-02-14 16:37:57,869 Running <numba.core.ssa._GatherDefsHandler object at 0x7fa0477049d0>
DEBUG 2022-02-14 16:37:57,869 on stmt: $582return_value.1 = cast(value=H_batch)
DEBUG 2022-02-14 16:37:57,869 on stmt: return $582return_value.1
DEBUG 2022-02-14 16:37:57,871 defs defaultdict(<class 'list'>,
            {'$102load_method.44': [<numba.core.ir.Assign object at 0x7fa047731550>],
             '$104call_method.45': [<numba.core.ir.Assign object at 0x7fa047731760>],
             '$112load_global.48': [<numba.core.ir.Assign object at 0x7fa047731c10>],
             '$120load_global.51': [<numba.core.ir.Assign object at 0x7fa047733190>],
             '$122load_attr.52': [<numba.core.ir.Assign object at 0x7fa047733310>],
             '$128binary_multiply.55': [<numba.core.ir.Assign object at 0x7fa047733760>],
             '$132binary_add.57': [<numba.core.ir.Assign object at 0x7fa047733a00>],
             '$136binary_add.59': [<numba.core.ir.Assign object at 0x7fa047733d00>],
             '$138load_global.60': [<numba.core.ir.Assign object at 0x7fa047733e50>],
             '$140load_attr.61': [<numba.core.ir.Assign object at 0x7fa047733fd0>],
             '$148load_global.64': [<numba.core.ir.Assign object at 0x7fa047734610>],
             '$150load_method.65': [<numba.core.ir.Assign object at 0x7fa047734790>],
             '$154call_method.67': [<numba.core.ir.Assign object at 0x7fa047734ac0>],
             '$156get_iter.68': [<numba.core.ir.Assign object at 0x7fa047734bb0>],
             '$158for_iter.1': [<numba.core.ir.Assign object at 0x7fa04772b700>],
             '$158for_iter.2': [<numba.core.ir.Assign object at 0x7fa04772e520>],
             '$158for_iter.3': [<numba.core.ir.Assign object at 0x7fa047731340>],
             '$164load_global.2': [<numba.core.ir.Assign object at 0x7fa047734940>],
             '$166load_attr.3': [<numba.core.ir.Assign object at 0x7fa047734d90>],
             '$172binary_multiply.6': [<numba.core.ir.Assign object at 0x7fa047737220>],
             '$176binary_add.8': [<numba.core.ir.Assign object at 0x7fa0477374c0>],
             '$180binary_add.10': [<numba.core.ir.Assign object at 0x7fa0477377c0>],
             '$182load_global.11': [<numba.core.ir.Assign object at 0x7fa047737910>],
             '$184load_attr.12': [<numba.core.ir.Assign object at 0x7fa047737a90>],
             '$18build_slice.7': [<numba.core.ir.Assign object at 0x7fa0477269d0>],
             '$18build_slice.8': [<numba.core.ir.Assign object at 0x7fa047726af0>],
             '$192load_global.15': [<numba.core.ir.Assign object at 0x7fa04773a0d0>],
             '$204load_method.20': [<numba.core.ir.Assign object at 0x7fa04773a850>],
             '$20build_tuple.9': [<numba.core.ir.Assign object at 0x7fa047726ca0>],
             '$214load_global.23': [<numba.core.ir.Assign object at 0x7fa04773af10>],
             '$222binary_floor_divide.27': [<numba.core.ir.Assign object at 0x7fa04773c520>],
             '$224call_function.28': [<numba.core.ir.Assign object at 0x7fa04773c6d0>],
             '$226get_iter.29': [<numba.core.ir.Assign object at 0x7fa04773c7f0>],
             '$228for_iter.2': [<numba.core.ir.Assign object at 0x7fa04773ae20>],
             '$228for_iter.3': [<numba.core.ir.Assign object at 0x7fa04773c8e0>],
             '$228for_iter.4': [<numba.core.ir.Assign object at 0x7fa04773ca00>],
             '$240binary_subscr.7': [<numba.core.ir.Assign object at 0x7fa04773e340>],
             '$246binary_subscr.10': [<numba.core.ir.Assign object at 0x7fa04773e700>],
             '$248build_tuple.11': [<numba.core.ir.Assign object at 0x7fa04773e880>],
             '$250binary_subscr.12': [<numba.core.ir.Assign object at 0x7fa04773ea00>],
             '$252inplace_multiply.13': [<numba.core.ir.Assign object at 0x7fa04773eb80>],
             '$260pred': [<numba.core.ir.Assign object at 0x7fa04773ef10>],
             '$268binary_multiply.3': [<numba.core.ir.Assign object at 0x7fa047741460>],
             '$282load_global.1': [<numba.core.ir.Assign object at 0x7fa047741c70>],
             '$28load_attr.12': [<numba.core.ir.Assign object at 0x7fa0477281f0>],
             '$292call_function.6': [<numba.core.ir.Assign object at 0x7fa047743310>],
             '$294unpack_sequence.10': [<numba.core.ir.Assign object at 0x7fa047743910>],
             '$294unpack_sequence.11': [<numba.core.ir.Assign object at 0x7fa047743460>],
             '$294unpack_sequence.7': [<numba.core.ir.Assign object at 0x7fa0477435b0>],
             '$294unpack_sequence.8': [<numba.core.ir.Assign object at 0x7fa0477436d0>],
             '$294unpack_sequence.9': [<numba.core.ir.Assign object at 0x7fa0477437f0>],
             '$304load_global.12': [<numba.core.ir.Assign object at 0x7fa047743eb0>],
             '$312load_global.15': [<numba.core.ir.Assign object at 0x7fa0476c5430>],
             '$328load_global.22': [<numba.core.ir.Assign object at 0x7fa0476c5df0>],
             '$348load_global.31': [<numba.core.ir.Assign object at 0x7fa0476c7a30>],
             '$356binary_subscr.35': [<numba.core.ir.Assign object at 0x7fa0476dbc40>],
             '$358binary_multiply.36': [<numba.core.ir.Assign object at 0x7fa0476c91c0>],
             '$364binary_multiply.39': [<numba.core.ir.Assign object at 0x7fa0476c95e0>],
             '$368binary_add.41': [<numba.core.ir.Assign object at 0x7fa0476c9880>],
             '$372binary_add.43': [<numba.core.ir.Assign object at 0x7fa0476c9b80>],
             '$374call_function.44': [<numba.core.ir.Assign object at 0x7fa0476c9d30>],
             '$376get_iter.45': [<numba.core.ir.Assign object at 0x7fa0476c9e50>],
             '$378for_iter.2': [<numba.core.ir.Assign object at 0x7fa0476c5f10>],
             '$378for_iter.3': [<numba.core.ir.Assign object at 0x7fa0476c72b0>],
             '$378for_iter.4': [<numba.core.ir.Assign object at 0x7fa0476c7610>],
             '$396binary_floor_divide.9': [<numba.core.ir.Assign object at 0x7fa0476cb940>],
             '$400binary_subtract.11': [<numba.core.ir.Assign object at 0x7fa0476cbbe0>],
             '$40load_method.17': [<numba.core.ir.Assign object at 0x7fa047728a30>],
             '$412binary_floor_divide.16': [<numba.core.ir.Assign object at 0x7fa0476cd400>],
             '$418binary_subscr.19': [<numba.core.ir.Assign object at 0x7fa0476dbb50>],
             '$420build_tuple.20': [<numba.core.ir.Assign object at 0x7fa0476cd9a0>],
             '$422binary_subscr.21': [<numba.core.ir.Assign object at 0x7fa0476cdb20>],
             '$42call_method.18': [<numba.core.ir.Assign object at 0x7fa047728c40>],
             '$434binary_modulo.26': [<numba.core.ir.Assign object at 0x7fa0476d0340>],
             '$438compare_op.28': [<numba.core.ir.Assign object at 0x7fa0476d0640>],
             '$440pred': [<numba.core.ir.Assign object at 0x7fa0476d08b0>],
             '$450binary_subscr.6': [<numba.core.ir.Assign object at 0x7fa0476d0b20>],
             '$456binary_multiply.9': [<numba.core.ir.Assign object at 0x7fa0476d0ee0>],
             '$464binary_floor_divide.13': [<numba.core.ir.Assign object at 0x7fa0476d3460>],
             '$466binary_subscr.14': [<numba.core.ir.Assign object at 0x7fa0476d35e0>],
             '$468binary_multiply.15': [<numba.core.ir.Assign object at 0x7fa0476d3760>],
             '$470inplace_add.16': [<numba.core.ir.Assign object at 0x7fa0476d38e0>],
             '$484binary_subscr.6': [<numba.core.ir.Assign object at 0x7fa0476d3dc0>],
             '$490binary_multiply.9': [<numba.core.ir.Assign object at 0x7fa0476d51c0>],
             '$496binary_subscr.12': [<numba.core.ir.Assign object at 0x7fa0476d5580>],
             '$498binary_multiply.13': [<numba.core.ir.Assign object at 0x7fa0476d5700>],
             '$500inplace_add.14': [<numba.core.ir.Assign object at 0x7fa0476d5880>],
             '$514inplace_add.3': [<numba.core.ir.Assign object at 0x7fa0476d5ca0>],
             '$522pred': [<numba.core.ir.Assign object at 0x7fa0476d71f0>],
             '$526load_global.0': [<numba.core.ir.Assign object at 0x7fa0476d7430>],
             '$530load_attr.2': [<numba.core.ir.Assign object at 0x7fa0476d76d0>],
             '$534binary_subscr.4': [<numba.core.ir.Assign object at 0x7fa047758130>],
             '$536call_function.5': [<numba.core.ir.Assign object at 0x7fa0476d7bb0>],
             '$538get_iter.6': [<numba.core.ir.Assign object at 0x7fa0476d7cd0>],
             '$540for_iter.1': [<numba.core.ir.Assign object at 0x7fa0476d9040>],
             '$540for_iter.2': [<numba.core.ir.Assign object at 0x7fa0476d9160>],
             '$540for_iter.3': [<numba.core.ir.Assign object at 0x7fa0476d9280>],
             '$54binary_multiply.23': [<numba.core.ir.Assign object at 0x7fa04772b400>],
             '$558binary_subscr.9': [<numba.core.ir.Assign object at 0x7fa0476d9fa0>],
             '$566binary_floor_divide.13': [<numba.core.ir.Assign object at 0x7fa0476db580>],
             '$568binary_power.14': [<numba.core.ir.Assign object at 0x7fa0476db700>],
             '$56binary_add.24': [<numba.core.ir.Assign object at 0x7fa04772b580>],
             '$570inplace_multiply.15': [<numba.core.ir.Assign object at 0x7fa0476db880>],
             '$582return_value.1': [<numba.core.ir.Assign object at 0x7fa0476db2e0>],
             '$64load_global.27': [<numba.core.ir.Assign object at 0x7fa04772ba90>],
             '$66load_method.28': [<numba.core.ir.Assign object at 0x7fa04772bc10>],
             '$68load_global.29': [<numba.core.ir.Assign object at 0x7fa04772bd90>],
             '$70load_method.30': [<numba.core.ir.Assign object at 0x7fa04772bf10>],
             '$74build_list.32': [<numba.core.ir.Assign object at 0x7fa04772e220>],
             '$76call_method.33': [<numba.core.ir.Assign object at 0x7fa04772e400>],
             '$80build_tuple.35': [<numba.core.ir.Assign object at 0x7fa04772e640>],
             '$86load_global.37': [<numba.core.ir.Assign object at 0x7fa04772ea30>],
             '$88load_method.38': [<numba.core.ir.Assign object at 0x7fa04772ebb0>],
             '$94binary_add.41': [<numba.core.ir.Assign object at 0x7fa047731040>],
             '$const12.4': [<numba.core.ir.Assign object at 0x7fa047726550>],
             '$const124.53': [<numba.core.ir.Assign object at 0x7fa047733490>],
             '$const134.58': [<numba.core.ir.Assign object at 0x7fa047733b50>],
             '$const14.5': [<numba.core.ir.Assign object at 0x7fa0477266d0>],
             '$const16.6': [<numba.core.ir.Assign object at 0x7fa047726850>],
             '$const168.4': [<numba.core.ir.Assign object at 0x7fa047734f10>],
             '$const178.9': [<numba.core.ir.Assign object at 0x7fa047737610>],
             '$const216.24': [<numba.core.ir.Assign object at 0x7fa04773c0d0>],
             '$const220.26': [<numba.core.ir.Assign object at 0x7fa04773c370>],
             '$const264.1': [<numba.core.ir.Assign object at 0x7fa047741190>],
             '$const30.13': [<numba.core.ir.Assign object at 0x7fa047728370>],
             '$const350.32': [<numba.core.ir.Assign object at 0x7fa0476c7bb0>],
             '$const354.34': [<numba.core.ir.Assign object at 0x7fa0476c7e50>],
             '$const36.15': [<numba.core.ir.Assign object at 0x7fa047728790>],
             '$const360.37': [<numba.core.ir.Assign object at 0x7fa0476c9310>],
             '$const370.42': [<numba.core.ir.Assign object at 0x7fa0476c99d0>],
             '$const390.6': [<numba.core.ir.Assign object at 0x7fa0476cb4f0>],
             '$const394.8': [<numba.core.ir.Assign object at 0x7fa0476cb790>],
             '$const4.1': [<numba.core.ir.Assign object at 0x7fa047762fd0>],
             '$const410.15': [<numba.core.ir.Assign object at 0x7fa0476cd250>],
             '$const416.18': [<numba.core.ir.Assign object at 0x7fa0476cd670>],
             '$const432.25': [<numba.core.ir.Assign object at 0x7fa0476d0190>],
             '$const436.27': [<numba.core.ir.Assign object at 0x7fa0476d0490>],
             '$const462.12': [<numba.core.ir.Assign object at 0x7fa0476d32b0>],
             '$const50.21': [<numba.core.ir.Assign object at 0x7fa04772b130>],
             '$const532.3': [<numba.core.ir.Assign object at 0x7fa0476d7850>],
             '$const560.10': [<numba.core.ir.Assign object at 0x7fa0476db130>],
             '$const564.12': [<numba.core.ir.Assign object at 0x7fa0476db3d0>],
             '$const92.40': [<numba.core.ir.Assign object at 0x7fa04772ee50>],
             '$phi158.0': [<numba.core.ir.Assign object at 0x7fa047726340>],
             '$phi162.1': [<numba.core.ir.Assign object at 0x7fa04772b040>],
             '$phi228.1': [<numba.core.ir.Assign object at 0x7fa047737100>],
             '$phi230.2': [<numba.core.ir.Assign object at 0x7fa04773a760>],
             '$phi378.1': [<numba.core.ir.Assign object at 0x7fa047743130>],
             '$phi380.2': [<numba.core.ir.Assign object at 0x7fa0476c59d0>],
             '$phi540.0': [<numba.core.ir.Assign object at 0x7fa0476d7550>],
             '$phi542.1': [<numba.core.ir.Assign object at 0x7fa0476d7f40>],
             'A': [<numba.core.ir.Assign object at 0x7fa047762940>],
             'AX_S': [<numba.core.ir.Assign object at 0x7fa0477439d0>],
             'D': [<numba.core.ir.Assign object at 0x7fa047762070>],
             'D_S': [<numba.core.ir.Assign object at 0x7fa047743c10>],
             'E': [<numba.core.ir.Assign object at 0x7fa0476c51f0>],
             'H_batch': [<numba.core.ir.Assign object at 0x7fa047734490>,
                         <numba.core.ir.Assign object at 0x7fa0476d5d60>],
             'Hnew': [<numba.core.ir.Assign object at 0x7fa047737f10>],
             'N': [<numba.core.ir.Assign object at 0x7fa0476cb280>],
             'N_det': [<numba.core.ir.Assign object at 0x7fa0476c94c0>],
             'N_fixed': [<numba.core.ir.Assign object at 0x7fa047728d60>],
             'N_max': [<numba.core.ir.Assign object at 0x7fa04772b820>],
             'XD_S': [<numba.core.ir.Assign object at 0x7fa047743af0>],
             'batch_max': [<numba.core.ir.Assign object at 0x7fa0477622e0>],
             'binom_prod': [<numba.core.ir.Assign object at 0x7fa04773ac70>,
                            <numba.core.ir.Assign object at 0x7fa04773ec40>],
             'binoms': [<numba.core.ir.Assign object at 0x7fa047731f10>],
             'bool260': [<numba.core.ir.Assign object at 0x7fa04773edf0>],
             'bool440': [<numba.core.ir.Assign object at 0x7fa0476d0790>],
             'bool522': [<numba.core.ir.Assign object at 0x7fa0476d70d0>],
             'delta': [<numba.core.ir.Assign object at 0x7fa047741700>,
                       <numba.core.ir.Assign object at 0x7fa047741a60>],
             'edge_reps': [<numba.core.ir.Assign object at 0x7fa04772e820>],
             'edges_sum': [<numba.core.ir.Assign object at 0x7fa04773aa60>],
             'f_even': [<numba.core.ir.Assign object at 0x7fa0476c5bb0>],
             'f_odd': [<numba.core.ir.Assign object at 0x7fa0476c77f0>],
             'fixed_edge_reps': [<numba.core.ir.Assign object at 0x7fa0477629a0>],
             'glynn': [<numba.core.ir.Assign object at 0x7fa047762d30>],
             'i': [<numba.core.ir.Assign object at 0x7fa04773ccd0>],
             'j': [<numba.core.ir.Assign object at 0x7fa047762880>,
                   <numba.core.ir.Assign object at 0x7fa0476d9520>],
             'kept_edges': [<numba.core.ir.Assign object at 0x7fa04773a4f0>],
             'max_binom': [<numba.core.ir.Assign object at 0x7fa0477319a0>],
             'n': [<numba.core.ir.Assign object at 0x7fa0476dbee0>],
             'n_det_binom_prod': [<numba.core.ir.Assign object at 0x7fa0476cddc0>],
             'oddV': [<numba.core.ir.Assign object at 0x7fa0476dbdf0>],
             'oddVX_S': [<numba.core.ir.Assign object at 0x7fa047743d30>],
             'odd_cutoff': [<numba.core.ir.Assign object at 0x7fa047762c10>],
             'oddloop': [<numba.core.ir.Assign object at 0x7fa0476dbd60>],
             'plus_minus': [<numba.core.ir.Assign object at 0x7fa0476cbd60>],
             'steps': [<numba.core.ir.Assign object at 0x7fa047731220>],
             'x': [<numba.core.ir.Assign object at 0x7fa0476d98e0>]})
DEBUG 2022-02-14 16:37:57,871 SSA violators {'j', 'H_batch', 'binom_prod', 'delta'}
DEBUG 2022-02-14 16:37:57,871 Fix SSA violator on var j
DEBUG 2022-02-14 16:37:57,871 ==== SSA block rewrite pass on 0
DEBUG 2022-02-14 16:37:57,871 Running <numba.core.ssa._FreshVarHandler object at 0x7fa047758f70>
DEBUG 2022-02-14 16:37:57,871 on stmt: A = arg(0, name=A)
DEBUG 2022-02-14 16:37:57,871 on stmt: D = arg(1, name=D)
DEBUG 2022-02-14 16:37:57,871 on stmt: fixed_edge_reps = arg(2, name=fixed_edge_reps)
DEBUG 2022-02-14 16:37:57,871 on stmt: batch_max = arg(3, name=batch_max)
DEBUG 2022-02-14 16:37:57,871 on stmt: odd_cutoff = arg(4, name=odd_cutoff)
DEBUG 2022-02-14 16:37:57,871 on stmt: glynn = arg(5, name=glynn)
DEBUG 2022-02-14 16:37:57,871 on stmt: $const4.1 = const(int, 0)
DEBUG 2022-02-14 16:37:57,871 on stmt: oddloop = static_getitem(value=D, index=0, index_var=$const4.1, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:37:57,872 on stmt: $const12.4 = const(int, 0)
DEBUG 2022-02-14 16:37:57,872 on stmt: $const14.5 = const(NoneType, None)
DEBUG 2022-02-14 16:37:57,872 on stmt: $const16.6 = const(NoneType, None)
DEBUG 2022-02-14 16:37:57,872 on stmt: $18build_slice.7 = global(slice: <class 'slice'>)
DEBUG 2022-02-14 16:37:57,872 on stmt: $18build_slice.8 = call $18build_slice.7($const14.5, $const16.6, func=$18build_slice.7, args=(Var($const14.5, loop_hafnian_batch.py:21), Var($const16.6, loop_hafnian_batch.py:21)), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:37:57,872 on stmt: $20build_tuple.9 = build_tuple(items=[Var($const12.4, loop_hafnian_batch.py:21), Var($18build_slice.8, loop_hafnian_batch.py:21)])
DEBUG 2022-02-14 16:37:57,872 on stmt: oddV = static_getitem(value=A, index=(0, slice(None, None, None)), index_var=$20build_tuple.9, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:37:57,872 on stmt: $28load_attr.12 = getattr(value=A, attr=shape)
DEBUG 2022-02-14 16:37:57,872 on stmt: $const30.13 = const(int, 0)
DEBUG 2022-02-14 16:37:57,872 on stmt: n = static_getitem(value=$28load_attr.12, index=0, index_var=$const30.13, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:37:57,872 on stmt: $const36.15 = const(int, 2)
DEBUG 2022-02-14 16:37:57,872 on stmt: $40load_method.17 = getattr(value=fixed_edge_reps, attr=sum)
DEBUG 2022-02-14 16:37:57,872 on stmt: $42call_method.18 = call $40load_method.17(func=$40load_method.17, args=[], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:37:57,872 on stmt: N_fixed = $const36.15 * $42call_method.18
DEBUG 2022-02-14 16:37:57,872 on stmt: $const50.21 = const(int, 2)
DEBUG 2022-02-14 16:37:57,872 on stmt: $54binary_multiply.23 = $const50.21 * batch_max
DEBUG 2022-02-14 16:37:57,872 on stmt: $56binary_add.24 = N_fixed + $54binary_multiply.23
DEBUG 2022-02-14 16:37:57,872 on stmt: N_max = $56binary_add.24 + odd_cutoff
DEBUG 2022-02-14 16:37:57,872 on stmt: $64load_global.27 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:37:57,872 on stmt: $66load_method.28 = getattr(value=$64load_global.27, attr=concatenate)
DEBUG 2022-02-14 16:37:57,872 on stmt: $68load_global.29 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:37:57,872 on stmt: $70load_method.30 = getattr(value=$68load_global.29, attr=array)
DEBUG 2022-02-14 16:37:57,872 on stmt: $74build_list.32 = build_list(items=[Var(batch_max, loop_hafnian_batch.py:20)])
DEBUG 2022-02-14 16:37:57,873 on stmt: $76call_method.33 = call $70load_method.30($74build_list.32, func=$70load_method.30, args=[Var($74build_list.32, loop_hafnian_batch.py:28)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:37:57,873 on stmt: $80build_tuple.35 = build_tuple(items=[Var($76call_method.33, loop_hafnian_batch.py:28), Var(fixed_edge_reps, loop_hafnian_batch.py:20)])
DEBUG 2022-02-14 16:37:57,873 on stmt: edge_reps = call $66load_method.28($80build_tuple.35, func=$66load_method.28, args=[Var($80build_tuple.35, loop_hafnian_batch.py:28)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:37:57,873 on stmt: $86load_global.37 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:37:57,873 on stmt: $88load_method.38 = getattr(value=$86load_global.37, attr=prod)
DEBUG 2022-02-14 16:37:57,873 on stmt: $const92.40 = const(int, 1)
DEBUG 2022-02-14 16:37:57,873 on stmt: $94binary_add.41 = edge_reps + $const92.40
DEBUG 2022-02-14 16:37:57,873 on stmt: steps = call $88load_method.38($94binary_add.41, func=$88load_method.38, args=[Var($94binary_add.41, loop_hafnian_batch.py:29)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:37:57,873 on stmt: $102load_method.44 = getattr(value=edge_reps, attr=max)
DEBUG 2022-02-14 16:37:57,873 on stmt: $104call_method.45 = call $102load_method.44(func=$102load_method.44, args=[], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:37:57,873 on stmt: max_binom = $104call_method.45 + odd_cutoff
DEBUG 2022-02-14 16:37:57,873 on stmt: $112load_global.48 = global(precompute_binoms: CPUDispatcher(<function precompute_binoms at 0x7fa047ebe310>))
DEBUG 2022-02-14 16:37:57,873 on stmt: binoms = call $112load_global.48(max_binom, func=$112load_global.48, args=[Var(max_binom, loop_hafnian_batch.py:31)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:37:57,873 on stmt: $120load_global.51 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:37:57,873 on stmt: $122load_attr.52 = getattr(value=$120load_global.51, attr=zeros)
DEBUG 2022-02-14 16:37:57,873 on stmt: $const124.53 = const(int, 2)
DEBUG 2022-02-14 16:37:57,873 on stmt: $128binary_multiply.55 = $const124.53 * batch_max
DEBUG 2022-02-14 16:37:57,873 on stmt: $132binary_add.57 = $128binary_multiply.55 + odd_cutoff
DEBUG 2022-02-14 16:37:57,873 on stmt: $const134.58 = const(int, 1)
DEBUG 2022-02-14 16:37:57,873 on stmt: $136binary_add.59 = $132binary_add.57 + $const134.58
DEBUG 2022-02-14 16:37:57,873 on stmt: $138load_global.60 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:37:57,873 on stmt: $140load_attr.61 = getattr(value=$138load_global.60, attr=complex128)
DEBUG 2022-02-14 16:37:57,874 on stmt: H_batch = call $122load_attr.52($136binary_add.59, func=$122load_attr.52, args=[Var($136binary_add.59, loop_hafnian_batch.py:34)], kws=[('dtype', Var($140load_attr.61, loop_hafnian_batch.py:34))], vararg=None, target=None)
DEBUG 2022-02-14 16:37:57,874 on stmt: $148load_global.64 = global(numba: <module 'numba' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numba/__init__.py'>)
DEBUG 2022-02-14 16:37:57,874 on stmt: $150load_method.65 = getattr(value=$148load_global.64, attr=prange)
DEBUG 2022-02-14 16:37:57,874 on stmt: $154call_method.67 = call $150load_method.65(steps, func=$150load_method.65, args=[Var(steps, loop_hafnian_batch.py:29)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:37:57,874 on stmt: $156get_iter.68 = getiter(value=$154call_method.67)
DEBUG 2022-02-14 16:37:57,874 on stmt: $phi158.0 = $156get_iter.68
DEBUG 2022-02-14 16:37:57,874 on stmt: jump 158
DEBUG 2022-02-14 16:37:57,874 ==== SSA block rewrite pass on 158
DEBUG 2022-02-14 16:37:57,874 Running <numba.core.ssa._FreshVarHandler object at 0x7fa047758f70>
DEBUG 2022-02-14 16:37:57,874 on stmt: $158for_iter.1 = iternext(value=$phi158.0)
DEBUG 2022-02-14 16:37:57,874 on stmt: $158for_iter.2 = pair_first(value=$158for_iter.1)
DEBUG 2022-02-14 16:37:57,874 on stmt: $158for_iter.3 = pair_second(value=$158for_iter.1)
DEBUG 2022-02-14 16:37:57,874 on stmt: $phi162.1 = $158for_iter.2
DEBUG 2022-02-14 16:37:57,874 on stmt: branch $158for_iter.3, 162, 520
DEBUG 2022-02-14 16:37:57,874 ==== SSA block rewrite pass on 162
DEBUG 2022-02-14 16:37:57,874 Running <numba.core.ssa._FreshVarHandler object at 0x7fa047758f70>
DEBUG 2022-02-14 16:37:57,874 on stmt: j = $phi162.1
DEBUG 2022-02-14 16:37:57,874 first assign: j
DEBUG 2022-02-14 16:37:57,874 replaced with: j = $phi162.1
DEBUG 2022-02-14 16:37:57,874 on stmt: $164load_global.2 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:37:57,874 on stmt: $166load_attr.3 = getattr(value=$164load_global.2, attr=zeros)
DEBUG 2022-02-14 16:37:57,874 on stmt: $const168.4 = const(int, 2)
DEBUG 2022-02-14 16:37:57,875 on stmt: $172binary_multiply.6 = $const168.4 * batch_max
DEBUG 2022-02-14 16:37:57,875 on stmt: $176binary_add.8 = $172binary_multiply.6 + odd_cutoff
DEBUG 2022-02-14 16:37:57,875 on stmt: $const178.9 = const(int, 1)
DEBUG 2022-02-14 16:37:57,875 on stmt: $180binary_add.10 = $176binary_add.8 + $const178.9
DEBUG 2022-02-14 16:37:57,875 on stmt: $182load_global.11 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:37:57,875 on stmt: $184load_attr.12 = getattr(value=$182load_global.11, attr=complex128)
DEBUG 2022-02-14 16:37:57,875 on stmt: Hnew = call $166load_attr.3($180binary_add.10, func=$166load_attr.3, args=[Var($180binary_add.10, loop_hafnian_batch.py:37)], kws=[('dtype', Var($184load_attr.12, loop_hafnian_batch.py:37))], vararg=None, target=None)
DEBUG 2022-02-14 16:37:57,875 on stmt: $192load_global.15 = global(find_kept_edges: CPUDispatcher(<function find_kept_edges at 0x7fa047ebe790>))
DEBUG 2022-02-14 16:37:57,875 on stmt: kept_edges = call $192load_global.15(j, edge_reps, func=$192load_global.15, args=[Var(j, loop_hafnian_batch.py:35), Var(edge_reps, loop_hafnian_batch.py:28)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:37:57,875 on stmt: $204load_method.20 = getattr(value=kept_edges, attr=sum)
DEBUG 2022-02-14 16:37:57,875 on stmt: edges_sum = call $204load_method.20(func=$204load_method.20, args=[], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:37:57,875 on stmt: binom_prod = const(float, 1.0)
DEBUG 2022-02-14 16:37:57,875 on stmt: $214load_global.23 = global(range: <class 'range'>)
DEBUG 2022-02-14 16:37:57,875 on stmt: $const216.24 = const(int, 1)
DEBUG 2022-02-14 16:37:57,875 on stmt: $const220.26 = const(int, 2)
DEBUG 2022-02-14 16:37:57,875 on stmt: $222binary_floor_divide.27 = n // $const220.26
DEBUG 2022-02-14 16:37:57,875 on stmt: $224call_function.28 = call $214load_global.23($const216.24, $222binary_floor_divide.27, func=$214load_global.23, args=[Var($const216.24, loop_hafnian_batch.py:43), Var($222binary_floor_divide.27, loop_hafnian_batch.py:43)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:37:57,875 on stmt: $226get_iter.29 = getiter(value=$224call_function.28)
DEBUG 2022-02-14 16:37:57,875 on stmt: $phi228.1 = $226get_iter.29
DEBUG 2022-02-14 16:37:57,875 on stmt: jump 228
DEBUG 2022-02-14 16:37:57,875 ==== SSA block rewrite pass on 228
DEBUG 2022-02-14 16:37:57,875 Running <numba.core.ssa._FreshVarHandler object at 0x7fa047758f70>
DEBUG 2022-02-14 16:37:57,875 on stmt: $228for_iter.2 = iternext(value=$phi228.1)
DEBUG 2022-02-14 16:37:57,876 on stmt: $228for_iter.3 = pair_first(value=$228for_iter.2)
DEBUG 2022-02-14 16:37:57,876 on stmt: $228for_iter.4 = pair_second(value=$228for_iter.2)
DEBUG 2022-02-14 16:37:57,876 on stmt: $phi230.2 = $228for_iter.3
DEBUG 2022-02-14 16:37:57,876 on stmt: branch $228for_iter.4, 230, 258
DEBUG 2022-02-14 16:37:57,876 ==== SSA block rewrite pass on 230
DEBUG 2022-02-14 16:37:57,876 Running <numba.core.ssa._FreshVarHandler object at 0x7fa047758f70>
DEBUG 2022-02-14 16:37:57,876 on stmt: i = $phi230.2
DEBUG 2022-02-14 16:37:57,876 on stmt: $240binary_subscr.7 = getitem(value=edge_reps, index=i, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:37:57,876 on stmt: $246binary_subscr.10 = getitem(value=kept_edges, index=i, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:37:57,876 on stmt: $248build_tuple.11 = build_tuple(items=[Var($240binary_subscr.7, loop_hafnian_batch.py:44), Var($246binary_subscr.10, loop_hafnian_batch.py:44)])
DEBUG 2022-02-14 16:37:57,876 on stmt: $250binary_subscr.12 = getitem(value=binoms, index=$248build_tuple.11, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:37:57,876 on stmt: $252inplace_multiply.13 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=binom_prod, rhs=$250binary_subscr.12, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:37:57,876 on stmt: binom_prod = $252inplace_multiply.13
DEBUG 2022-02-14 16:37:57,876 on stmt: jump 228
DEBUG 2022-02-14 16:37:57,876 ==== SSA block rewrite pass on 258
DEBUG 2022-02-14 16:37:57,876 Running <numba.core.ssa._FreshVarHandler object at 0x7fa047758f70>
DEBUG 2022-02-14 16:37:57,876 on stmt: bool260 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:37:57,876 on stmt: $260pred = call bool260(glynn, func=bool260, args=(Var(glynn, loop_hafnian_batch.py:20),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:37:57,876 on stmt: branch $260pred, 264, 278
DEBUG 2022-02-14 16:37:57,876 ==== SSA block rewrite pass on 264
DEBUG 2022-02-14 16:37:57,876 Running <numba.core.ssa._FreshVarHandler object at 0x7fa047758f70>
DEBUG 2022-02-14 16:37:57,876 on stmt: $const264.1 = const(int, 2)
DEBUG 2022-02-14 16:37:57,876 on stmt: $268binary_multiply.3 = $const264.1 * kept_edges
DEBUG 2022-02-14 16:37:57,876 on stmt: delta = $268binary_multiply.3 - edge_reps
DEBUG 2022-02-14 16:37:57,876 on stmt: jump 282
DEBUG 2022-02-14 16:37:57,876 ==== SSA block rewrite pass on 278
DEBUG 2022-02-14 16:37:57,876 Running <numba.core.ssa._FreshVarHandler object at 0x7fa047758f70>
DEBUG 2022-02-14 16:37:57,877 on stmt: delta = kept_edges
DEBUG 2022-02-14 16:37:57,877 on stmt: jump 282
DEBUG 2022-02-14 16:37:57,877 ==== SSA block rewrite pass on 282
DEBUG 2022-02-14 16:37:57,877 Running <numba.core.ssa._FreshVarHandler object at 0x7fa047758f70>
DEBUG 2022-02-14 16:37:57,877 on stmt: $282load_global.1 = global(get_submatrices: CPUDispatcher(<function get_submatrices at 0x7fa047ebed30>))
DEBUG 2022-02-14 16:37:57,877 on stmt: $292call_function.6 = call $282load_global.1(delta, A, D, oddV, func=$282load_global.1, args=[Var(delta, loop_hafnian_batch.py:47), Var(A, loop_hafnian_batch.py:20), Var(D, loop_hafnian_batch.py:20), Var(oddV, loop_hafnian_batch.py:21)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:37:57,877 on stmt: $294unpack_sequence.11 = exhaust_iter(value=$292call_function.6, count=4)
DEBUG 2022-02-14 16:37:57,877 on stmt: $294unpack_sequence.7 = static_getitem(value=$294unpack_sequence.11, index=0, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:37:57,877 on stmt: $294unpack_sequence.8 = static_getitem(value=$294unpack_sequence.11, index=1, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:37:57,877 on stmt: $294unpack_sequence.9 = static_getitem(value=$294unpack_sequence.11, index=2, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:37:57,877 on stmt: $294unpack_sequence.10 = static_getitem(value=$294unpack_sequence.11, index=3, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:37:57,877 on stmt: AX_S = $294unpack_sequence.7
DEBUG 2022-02-14 16:37:57,877 on stmt: XD_S = $294unpack_sequence.8
DEBUG 2022-02-14 16:37:57,877 on stmt: D_S = $294unpack_sequence.9
DEBUG 2022-02-14 16:37:57,877 on stmt: oddVX_S = $294unpack_sequence.10
DEBUG 2022-02-14 16:37:57,877 on stmt: $304load_global.12 = global(eigvals: CPUDispatcher(<function eigvals at 0x7fa047e5d430>))
DEBUG 2022-02-14 16:37:57,877 on stmt: E = call $304load_global.12(AX_S, func=$304load_global.12, args=[Var(AX_S, loop_hafnian_batch.py:51)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:37:57,877 on stmt: $312load_global.15 = global(f_loop: CPUDispatcher(<function f_loop at 0x7fa047ebe9d0>))
DEBUG 2022-02-14 16:37:57,877 on stmt: f_even = call $312load_global.15(E, AX_S, XD_S, D_S, N_max, func=$312load_global.15, args=[Var(E, loop_hafnian_batch.py:53), Var(AX_S, loop_hafnian_batch.py:51), Var(XD_S, loop_hafnian_batch.py:51), Var(D_S, loop_hafnian_batch.py:51), Var(N_max, loop_hafnian_batch.py:26)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:37:57,877 on stmt: $328load_global.22 = global(f_loop_odd: CPUDispatcher(<function f_loop_odd at 0x7fa047ebeb80>))
DEBUG 2022-02-14 16:37:57,877 on stmt: f_odd = call $328load_global.22(E, AX_S, XD_S, D_S, N_max, oddloop, oddVX_S, func=$328load_global.22, args=[Var(E, loop_hafnian_batch.py:53), Var(AX_S, loop_hafnian_batch.py:51), Var(XD_S, loop_hafnian_batch.py:51), Var(D_S, loop_hafnian_batch.py:51), Var(N_max, loop_hafnian_batch.py:26), Var(oddloop, loop_hafnian_batch.py:20), Var(oddVX_S, loop_hafnian_batch.py:51)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:37:57,877 on stmt: $348load_global.31 = global(range: <class 'range'>)
DEBUG 2022-02-14 16:37:57,877 on stmt: $const350.32 = const(int, 2)
DEBUG 2022-02-14 16:37:57,878 on stmt: $const354.34 = const(int, 0)
DEBUG 2022-02-14 16:37:57,878 on stmt: $356binary_subscr.35 = static_getitem(value=kept_edges, index=0, index_var=$const354.34, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:37:57,878 on stmt: $358binary_multiply.36 = $const350.32 * $356binary_subscr.35
DEBUG 2022-02-14 16:37:57,878 on stmt: $const360.37 = const(int, 2)
DEBUG 2022-02-14 16:37:57,878 on stmt: $364binary_multiply.39 = $const360.37 * batch_max
DEBUG 2022-02-14 16:37:57,878 on stmt: $368binary_add.41 = $364binary_multiply.39 + odd_cutoff
DEBUG 2022-02-14 16:37:57,878 on stmt: $const370.42 = const(int, 1)
DEBUG 2022-02-14 16:37:57,878 on stmt: $372binary_add.43 = $368binary_add.41 + $const370.42
DEBUG 2022-02-14 16:37:57,878 on stmt: $374call_function.44 = call $348load_global.31($358binary_multiply.36, $372binary_add.43, func=$348load_global.31, args=[Var($358binary_multiply.36, loop_hafnian_batch.py:58), Var($372binary_add.43, loop_hafnian_batch.py:58)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:37:57,878 on stmt: $376get_iter.45 = getiter(value=$374call_function.44)
DEBUG 2022-02-14 16:37:57,878 on stmt: $phi378.1 = $376get_iter.45
DEBUG 2022-02-14 16:37:57,878 on stmt: jump 378
DEBUG 2022-02-14 16:37:57,878 ==== SSA block rewrite pass on 378
DEBUG 2022-02-14 16:37:57,878 Running <numba.core.ssa._FreshVarHandler object at 0x7fa047758f70>
DEBUG 2022-02-14 16:37:57,878 on stmt: $378for_iter.2 = iternext(value=$phi378.1)
DEBUG 2022-02-14 16:37:57,878 on stmt: $378for_iter.3 = pair_first(value=$378for_iter.2)
DEBUG 2022-02-14 16:37:57,878 on stmt: $378for_iter.4 = pair_second(value=$378for_iter.2)
DEBUG 2022-02-14 16:37:57,878 on stmt: $phi380.2 = $378for_iter.3
DEBUG 2022-02-14 16:37:57,878 on stmt: branch $378for_iter.4, 380, 510
DEBUG 2022-02-14 16:37:57,878 ==== SSA block rewrite pass on 380
DEBUG 2022-02-14 16:37:57,878 Running <numba.core.ssa._FreshVarHandler object at 0x7fa047758f70>
DEBUG 2022-02-14 16:37:57,878 on stmt: N_det = $phi380.2
DEBUG 2022-02-14 16:37:57,878 on stmt: N = N_fixed + N_det
DEBUG 2022-02-14 16:37:57,878 on stmt: $const390.6 = const(float, -1.0)
DEBUG 2022-02-14 16:37:57,878 on stmt: $const394.8 = const(int, 2)
DEBUG 2022-02-14 16:37:57,879 on stmt: $396binary_floor_divide.9 = N // $const394.8
DEBUG 2022-02-14 16:37:57,879 on stmt: $400binary_subtract.11 = $396binary_floor_divide.9 - edges_sum
DEBUG 2022-02-14 16:37:57,879 on stmt: plus_minus = $const390.6 ** $400binary_subtract.11
DEBUG 2022-02-14 16:37:57,879 on stmt: $const410.15 = const(int, 2)
DEBUG 2022-02-14 16:37:57,879 on stmt: $412binary_floor_divide.16 = N_det // $const410.15
DEBUG 2022-02-14 16:37:57,879 on stmt: $const416.18 = const(int, 0)
DEBUG 2022-02-14 16:37:57,879 on stmt: $418binary_subscr.19 = static_getitem(value=kept_edges, index=0, index_var=$const416.18, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:37:57,879 on stmt: $420build_tuple.20 = build_tuple(items=[Var($412binary_floor_divide.16, loop_hafnian_batch.py:62), Var($418binary_subscr.19, loop_hafnian_batch.py:62)])
DEBUG 2022-02-14 16:37:57,879 on stmt: $422binary_subscr.21 = getitem(value=binoms, index=$420build_tuple.20, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:37:57,879 on stmt: n_det_binom_prod = $422binary_subscr.21 * binom_prod
DEBUG 2022-02-14 16:37:57,879 on stmt: $const432.25 = const(int, 2)
DEBUG 2022-02-14 16:37:57,879 on stmt: $434binary_modulo.26 = N_det % $const432.25
DEBUG 2022-02-14 16:37:57,879 on stmt: $const436.27 = const(int, 0)
DEBUG 2022-02-14 16:37:57,879 on stmt: $438compare_op.28 = $434binary_modulo.26 == $const436.27
DEBUG 2022-02-14 16:37:57,879 on stmt: bool440 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:37:57,879 on stmt: $440pred = call bool440($438compare_op.28, func=bool440, args=(Var($438compare_op.28, loop_hafnian_batch.py:64),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:37:57,879 on stmt: branch $440pred, 444, 478
DEBUG 2022-02-14 16:37:57,879 ==== SSA block rewrite pass on 444
DEBUG 2022-02-14 16:37:57,879 Running <numba.core.ssa._FreshVarHandler object at 0x7fa047758f70>
DEBUG 2022-02-14 16:37:57,879 on stmt: $450binary_subscr.6 = getitem(value=Hnew, index=N_det, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:37:57,879 on stmt: $456binary_multiply.9 = n_det_binom_prod * plus_minus
DEBUG 2022-02-14 16:37:57,879 on stmt: $const462.12 = const(int, 2)
DEBUG 2022-02-14 16:37:57,879 on stmt: $464binary_floor_divide.13 = N // $const462.12
DEBUG 2022-02-14 16:37:57,879 on stmt: $466binary_subscr.14 = getitem(value=f_even, index=$464binary_floor_divide.13, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:37:57,879 on stmt: $468binary_multiply.15 = $456binary_multiply.9 * $466binary_subscr.14
DEBUG 2022-02-14 16:37:57,880 on stmt: $470inplace_add.16 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$450binary_subscr.6, rhs=$468binary_multiply.15, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:37:57,880 on stmt: Hnew[N_det] = $470inplace_add.16
DEBUG 2022-02-14 16:37:57,880 on stmt: jump 506
DEBUG 2022-02-14 16:37:57,880 ==== SSA block rewrite pass on 478
DEBUG 2022-02-14 16:37:57,880 Running <numba.core.ssa._FreshVarHandler object at 0x7fa047758f70>
DEBUG 2022-02-14 16:37:57,880 on stmt: $484binary_subscr.6 = getitem(value=Hnew, index=N_det, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:37:57,880 on stmt: $490binary_multiply.9 = n_det_binom_prod * plus_minus
DEBUG 2022-02-14 16:37:57,880 on stmt: $496binary_subscr.12 = getitem(value=f_odd, index=N, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:37:57,880 on stmt: $498binary_multiply.13 = $490binary_multiply.9 * $496binary_subscr.12
DEBUG 2022-02-14 16:37:57,880 on stmt: $500inplace_add.14 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$484binary_subscr.6, rhs=$498binary_multiply.13, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:37:57,880 on stmt: Hnew[N_det] = $500inplace_add.14
DEBUG 2022-02-14 16:37:57,880 on stmt: jump 506
DEBUG 2022-02-14 16:37:57,880 ==== SSA block rewrite pass on 506
DEBUG 2022-02-14 16:37:57,880 Running <numba.core.ssa._FreshVarHandler object at 0x7fa047758f70>
DEBUG 2022-02-14 16:37:57,880 on stmt: jump 378
DEBUG 2022-02-14 16:37:57,880 ==== SSA block rewrite pass on 510
DEBUG 2022-02-14 16:37:57,880 Running <numba.core.ssa._FreshVarHandler object at 0x7fa047758f70>
DEBUG 2022-02-14 16:37:57,880 on stmt: $514inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=H_batch, rhs=Hnew, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:37:57,880 on stmt: H_batch = $514inplace_add.3
DEBUG 2022-02-14 16:37:57,880 on stmt: jump 158
DEBUG 2022-02-14 16:37:57,880 ==== SSA block rewrite pass on 520
DEBUG 2022-02-14 16:37:57,880 Running <numba.core.ssa._FreshVarHandler object at 0x7fa047758f70>
DEBUG 2022-02-14 16:37:57,880 on stmt: bool522 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:37:57,880 on stmt: $522pred = call bool522(glynn, func=bool522, args=(Var(glynn, loop_hafnian_batch.py:20),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:37:57,880 on stmt: branch $522pred, 526, 580
DEBUG 2022-02-14 16:37:57,880 ==== SSA block rewrite pass on 526
DEBUG 2022-02-14 16:37:57,881 Running <numba.core.ssa._FreshVarHandler object at 0x7fa047758f70>
DEBUG 2022-02-14 16:37:57,881 on stmt: $526load_global.0 = global(range: <class 'range'>)
DEBUG 2022-02-14 16:37:57,881 on stmt: $530load_attr.2 = getattr(value=H_batch, attr=shape)
DEBUG 2022-02-14 16:37:57,881 on stmt: $const532.3 = const(int, 0)
DEBUG 2022-02-14 16:37:57,881 on stmt: $534binary_subscr.4 = static_getitem(value=$530load_attr.2, index=0, index_var=$const532.3, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:37:57,881 on stmt: $536call_function.5 = call $526load_global.0($534binary_subscr.4, func=$526load_global.0, args=[Var($534binary_subscr.4, loop_hafnian_batch.py:72)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:37:57,881 on stmt: $538get_iter.6 = getiter(value=$536call_function.5)
DEBUG 2022-02-14 16:37:57,881 on stmt: $phi540.0 = $538get_iter.6
DEBUG 2022-02-14 16:37:57,881 on stmt: jump 540
DEBUG 2022-02-14 16:37:57,881 ==== SSA block rewrite pass on 540
DEBUG 2022-02-14 16:37:57,881 Running <numba.core.ssa._FreshVarHandler object at 0x7fa047758f70>
DEBUG 2022-02-14 16:37:57,881 on stmt: $540for_iter.1 = iternext(value=$phi540.0)
DEBUG 2022-02-14 16:37:57,881 on stmt: $540for_iter.2 = pair_first(value=$540for_iter.1)
DEBUG 2022-02-14 16:37:57,881 on stmt: $540for_iter.3 = pair_second(value=$540for_iter.1)
DEBUG 2022-02-14 16:37:57,881 on stmt: $phi542.1 = $540for_iter.2
DEBUG 2022-02-14 16:37:57,881 on stmt: branch $540for_iter.3, 542, 580
DEBUG 2022-02-14 16:37:57,881 ==== SSA block rewrite pass on 542
DEBUG 2022-02-14 16:37:57,881 Running <numba.core.ssa._FreshVarHandler object at 0x7fa047758f70>
DEBUG 2022-02-14 16:37:57,881 on stmt: j = $phi542.1
DEBUG 2022-02-14 16:37:57,881 replaced with: j.1 = $phi542.1
DEBUG 2022-02-14 16:37:57,881 on stmt: x = N_fixed + j
DEBUG 2022-02-14 16:37:57,881 on stmt: $558binary_subscr.9 = getitem(value=H_batch, index=j, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:37:57,881 on stmt: $const560.10 = const(float, 0.5)
DEBUG 2022-02-14 16:37:57,881 on stmt: $const564.12 = const(int, 2)
DEBUG 2022-02-14 16:37:57,881 on stmt: $566binary_floor_divide.13 = x // $const564.12
DEBUG 2022-02-14 16:37:57,881 on stmt: $568binary_power.14 = $const560.10 ** $566binary_floor_divide.13
DEBUG 2022-02-14 16:37:57,882 on stmt: $570inplace_multiply.15 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=$558binary_subscr.9, rhs=$568binary_power.14, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:37:57,882 on stmt: H_batch[j] = $570inplace_multiply.15
DEBUG 2022-02-14 16:37:57,882 on stmt: jump 540
DEBUG 2022-02-14 16:37:57,882 ==== SSA block rewrite pass on 580
DEBUG 2022-02-14 16:37:57,882 Running <numba.core.ssa._FreshVarHandler object at 0x7fa047758f70>
DEBUG 2022-02-14 16:37:57,882 on stmt: $582return_value.1 = cast(value=H_batch)
DEBUG 2022-02-14 16:37:57,882 on stmt: return $582return_value.1
DEBUG 2022-02-14 16:37:57,882 Replaced assignments: defaultdict(<class 'list'>,
            {162: [<numba.core.ir.Assign object at 0x7fa047704970>],
             542: [<numba.core.ir.Assign object at 0x7fa047704e20>]})
DEBUG 2022-02-14 16:37:57,882 ==== SSA block rewrite pass on 0
DEBUG 2022-02-14 16:37:57,882 Running <numba.core.ssa._FixSSAVars object at 0x7fa047758f70>
DEBUG 2022-02-14 16:37:57,882 on stmt: A = arg(0, name=A)
DEBUG 2022-02-14 16:37:57,882 on stmt: D = arg(1, name=D)
DEBUG 2022-02-14 16:37:57,882 on stmt: fixed_edge_reps = arg(2, name=fixed_edge_reps)
DEBUG 2022-02-14 16:37:57,882 on stmt: batch_max = arg(3, name=batch_max)
DEBUG 2022-02-14 16:37:57,882 on stmt: odd_cutoff = arg(4, name=odd_cutoff)
DEBUG 2022-02-14 16:37:57,882 on stmt: glynn = arg(5, name=glynn)
DEBUG 2022-02-14 16:37:57,882 on stmt: $const4.1 = const(int, 0)
DEBUG 2022-02-14 16:37:57,882 on stmt: oddloop = static_getitem(value=D, index=0, index_var=$const4.1, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:37:57,882 on stmt: $const12.4 = const(int, 0)
DEBUG 2022-02-14 16:37:57,882 on stmt: $const14.5 = const(NoneType, None)
DEBUG 2022-02-14 16:37:57,882 on stmt: $const16.6 = const(NoneType, None)
DEBUG 2022-02-14 16:37:57,883 on stmt: $18build_slice.7 = global(slice: <class 'slice'>)
DEBUG 2022-02-14 16:37:57,883 on stmt: $18build_slice.8 = call $18build_slice.7($const14.5, $const16.6, func=$18build_slice.7, args=(Var($const14.5, loop_hafnian_batch.py:21), Var($const16.6, loop_hafnian_batch.py:21)), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:37:57,883 on stmt: $20build_tuple.9 = build_tuple(items=[Var($const12.4, loop_hafnian_batch.py:21), Var($18build_slice.8, loop_hafnian_batch.py:21)])
DEBUG 2022-02-14 16:37:57,883 on stmt: oddV = static_getitem(value=A, index=(0, slice(None, None, None)), index_var=$20build_tuple.9, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:37:57,883 on stmt: $28load_attr.12 = getattr(value=A, attr=shape)
DEBUG 2022-02-14 16:37:57,883 on stmt: $const30.13 = const(int, 0)
DEBUG 2022-02-14 16:37:57,883 on stmt: n = static_getitem(value=$28load_attr.12, index=0, index_var=$const30.13, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:37:57,883 on stmt: $const36.15 = const(int, 2)
DEBUG 2022-02-14 16:37:57,883 on stmt: $40load_method.17 = getattr(value=fixed_edge_reps, attr=sum)
DEBUG 2022-02-14 16:37:57,883 on stmt: $42call_method.18 = call $40load_method.17(func=$40load_method.17, args=[], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:37:57,883 on stmt: N_fixed = $const36.15 * $42call_method.18
DEBUG 2022-02-14 16:37:57,883 on stmt: $const50.21 = const(int, 2)
DEBUG 2022-02-14 16:37:57,883 on stmt: $54binary_multiply.23 = $const50.21 * batch_max
DEBUG 2022-02-14 16:37:57,883 on stmt: $56binary_add.24 = N_fixed + $54binary_multiply.23
DEBUG 2022-02-14 16:37:57,883 on stmt: N_max = $56binary_add.24 + odd_cutoff
DEBUG 2022-02-14 16:37:57,884 on stmt: $64load_global.27 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:37:57,884 on stmt: $66load_method.28 = getattr(value=$64load_global.27, attr=concatenate)
DEBUG 2022-02-14 16:37:57,884 on stmt: $68load_global.29 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:37:57,884 on stmt: $70load_method.30 = getattr(value=$68load_global.29, attr=array)
DEBUG 2022-02-14 16:37:57,884 on stmt: $74build_list.32 = build_list(items=[Var(batch_max, loop_hafnian_batch.py:20)])
DEBUG 2022-02-14 16:37:57,884 on stmt: $76call_method.33 = call $70load_method.30($74build_list.32, func=$70load_method.30, args=[Var($74build_list.32, loop_hafnian_batch.py:28)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:37:57,884 on stmt: $80build_tuple.35 = build_tuple(items=[Var($76call_method.33, loop_hafnian_batch.py:28), Var(fixed_edge_reps, loop_hafnian_batch.py:20)])
DEBUG 2022-02-14 16:37:57,884 on stmt: edge_reps = call $66load_method.28($80build_tuple.35, func=$66load_method.28, args=[Var($80build_tuple.35, loop_hafnian_batch.py:28)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:37:57,884 on stmt: $86load_global.37 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:37:57,884 on stmt: $88load_method.38 = getattr(value=$86load_global.37, attr=prod)
DEBUG 2022-02-14 16:37:57,884 on stmt: $const92.40 = const(int, 1)
DEBUG 2022-02-14 16:37:57,884 on stmt: $94binary_add.41 = edge_reps + $const92.40
DEBUG 2022-02-14 16:37:57,884 on stmt: steps = call $88load_method.38($94binary_add.41, func=$88load_method.38, args=[Var($94binary_add.41, loop_hafnian_batch.py:29)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:37:57,884 on stmt: $102load_method.44 = getattr(value=edge_reps, attr=max)
DEBUG 2022-02-14 16:37:57,884 on stmt: $104call_method.45 = call $102load_method.44(func=$102load_method.44, args=[], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:37:57,884 on stmt: max_binom = $104call_method.45 + odd_cutoff
DEBUG 2022-02-14 16:37:57,885 on stmt: $112load_global.48 = global(precompute_binoms: CPUDispatcher(<function precompute_binoms at 0x7fa047ebe310>))
DEBUG 2022-02-14 16:37:57,885 on stmt: binoms = call $112load_global.48(max_binom, func=$112load_global.48, args=[Var(max_binom, loop_hafnian_batch.py:31)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:37:57,885 on stmt: $120load_global.51 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:37:57,885 on stmt: $122load_attr.52 = getattr(value=$120load_global.51, attr=zeros)
DEBUG 2022-02-14 16:37:57,885 on stmt: $const124.53 = const(int, 2)
DEBUG 2022-02-14 16:37:57,885 on stmt: $128binary_multiply.55 = $const124.53 * batch_max
DEBUG 2022-02-14 16:37:57,885 on stmt: $132binary_add.57 = $128binary_multiply.55 + odd_cutoff
DEBUG 2022-02-14 16:37:57,885 on stmt: $const134.58 = const(int, 1)
DEBUG 2022-02-14 16:37:57,885 on stmt: $136binary_add.59 = $132binary_add.57 + $const134.58
DEBUG 2022-02-14 16:37:57,885 on stmt: $138load_global.60 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:37:57,885 on stmt: $140load_attr.61 = getattr(value=$138load_global.60, attr=complex128)
DEBUG 2022-02-14 16:37:57,885 on stmt: H_batch = call $122load_attr.52($136binary_add.59, func=$122load_attr.52, args=[Var($136binary_add.59, loop_hafnian_batch.py:34)], kws=[('dtype', Var($140load_attr.61, loop_hafnian_batch.py:34))], vararg=None, target=None)
DEBUG 2022-02-14 16:37:57,885 on stmt: $148load_global.64 = global(numba: <module 'numba' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numba/__init__.py'>)
DEBUG 2022-02-14 16:37:57,885 on stmt: $150load_method.65 = getattr(value=$148load_global.64, attr=prange)
DEBUG 2022-02-14 16:37:57,885 on stmt: $154call_method.67 = call $150load_method.65(steps, func=$150load_method.65, args=[Var(steps, loop_hafnian_batch.py:29)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:37:57,885 on stmt: $156get_iter.68 = getiter(value=$154call_method.67)
DEBUG 2022-02-14 16:37:57,885 on stmt: $phi158.0 = $156get_iter.68
DEBUG 2022-02-14 16:37:57,885 on stmt: jump 158
DEBUG 2022-02-14 16:37:57,885 ==== SSA block rewrite pass on 158
DEBUG 2022-02-14 16:37:57,885 Running <numba.core.ssa._FixSSAVars object at 0x7fa047758f70>
DEBUG 2022-02-14 16:37:57,885 on stmt: $158for_iter.1 = iternext(value=$phi158.0)
DEBUG 2022-02-14 16:37:57,886 on stmt: $158for_iter.2 = pair_first(value=$158for_iter.1)
DEBUG 2022-02-14 16:37:57,886 on stmt: $158for_iter.3 = pair_second(value=$158for_iter.1)
DEBUG 2022-02-14 16:37:57,886 on stmt: $phi162.1 = $158for_iter.2
DEBUG 2022-02-14 16:37:57,886 on stmt: branch $158for_iter.3, 162, 520
DEBUG 2022-02-14 16:37:57,886 ==== SSA block rewrite pass on 162
DEBUG 2022-02-14 16:37:57,886 Running <numba.core.ssa._FixSSAVars object at 0x7fa047758f70>
DEBUG 2022-02-14 16:37:57,886 on stmt: j = $phi162.1
DEBUG 2022-02-14 16:37:57,886 on stmt: $164load_global.2 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:37:57,886 on stmt: $166load_attr.3 = getattr(value=$164load_global.2, attr=zeros)
DEBUG 2022-02-14 16:37:57,886 on stmt: $const168.4 = const(int, 2)
DEBUG 2022-02-14 16:37:57,886 on stmt: $172binary_multiply.6 = $const168.4 * batch_max
DEBUG 2022-02-14 16:37:57,886 on stmt: $176binary_add.8 = $172binary_multiply.6 + odd_cutoff
DEBUG 2022-02-14 16:37:57,886 on stmt: $const178.9 = const(int, 1)
DEBUG 2022-02-14 16:37:57,886 on stmt: $180binary_add.10 = $176binary_add.8 + $const178.9
DEBUG 2022-02-14 16:37:57,886 on stmt: $182load_global.11 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:37:57,886 on stmt: $184load_attr.12 = getattr(value=$182load_global.11, attr=complex128)
DEBUG 2022-02-14 16:37:57,886 on stmt: Hnew = call $166load_attr.3($180binary_add.10, func=$166load_attr.3, args=[Var($180binary_add.10, loop_hafnian_batch.py:37)], kws=[('dtype', Var($184load_attr.12, loop_hafnian_batch.py:37))], vararg=None, target=None)
DEBUG 2022-02-14 16:37:57,886 on stmt: $192load_global.15 = global(find_kept_edges: CPUDispatcher(<function find_kept_edges at 0x7fa047ebe790>))
DEBUG 2022-02-14 16:37:57,887 on stmt: kept_edges = call $192load_global.15(j, edge_reps, func=$192load_global.15, args=[Var(j, loop_hafnian_batch.py:35), Var(edge_reps, loop_hafnian_batch.py:28)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:37:57,887 find_def var='j' stmt=kept_edges = call $192load_global.15(j, edge_reps, func=$192load_global.15, args=[Var(j, loop_hafnian_batch.py:35), Var(edge_reps, loop_hafnian_batch.py:28)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:37:57,887 on stmt: $204load_method.20 = getattr(value=kept_edges, attr=sum)
DEBUG 2022-02-14 16:37:57,887 on stmt: edges_sum = call $204load_method.20(func=$204load_method.20, args=[], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:37:57,887 on stmt: binom_prod = const(float, 1.0)
DEBUG 2022-02-14 16:37:57,887 on stmt: $214load_global.23 = global(range: <class 'range'>)
DEBUG 2022-02-14 16:37:57,887 on stmt: $const216.24 = const(int, 1)
DEBUG 2022-02-14 16:37:57,887 on stmt: $const220.26 = const(int, 2)
DEBUG 2022-02-14 16:37:57,887 on stmt: $222binary_floor_divide.27 = n // $const220.26
DEBUG 2022-02-14 16:37:57,887 on stmt: $224call_function.28 = call $214load_global.23($const216.24, $222binary_floor_divide.27, func=$214load_global.23, args=[Var($const216.24, loop_hafnian_batch.py:43), Var($222binary_floor_divide.27, loop_hafnian_batch.py:43)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:37:57,887 on stmt: $226get_iter.29 = getiter(value=$224call_function.28)
DEBUG 2022-02-14 16:37:57,887 on stmt: $phi228.1 = $226get_iter.29
DEBUG 2022-02-14 16:37:57,887 on stmt: jump 228
DEBUG 2022-02-14 16:37:57,887 ==== SSA block rewrite pass on 228
DEBUG 2022-02-14 16:37:57,887 Running <numba.core.ssa._FixSSAVars object at 0x7fa047758f70>
DEBUG 2022-02-14 16:37:57,887 on stmt: $228for_iter.2 = iternext(value=$phi228.1)
DEBUG 2022-02-14 16:37:57,888 on stmt: $228for_iter.3 = pair_first(value=$228for_iter.2)
DEBUG 2022-02-14 16:37:57,888 on stmt: $228for_iter.4 = pair_second(value=$228for_iter.2)
DEBUG 2022-02-14 16:37:57,888 on stmt: $phi230.2 = $228for_iter.3
DEBUG 2022-02-14 16:37:57,888 on stmt: branch $228for_iter.4, 230, 258
DEBUG 2022-02-14 16:37:57,888 ==== SSA block rewrite pass on 230
DEBUG 2022-02-14 16:37:57,888 Running <numba.core.ssa._FixSSAVars object at 0x7fa047758f70>
DEBUG 2022-02-14 16:37:57,888 on stmt: i = $phi230.2
DEBUG 2022-02-14 16:37:57,888 on stmt: $240binary_subscr.7 = getitem(value=edge_reps, index=i, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:37:57,888 on stmt: $246binary_subscr.10 = getitem(value=kept_edges, index=i, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:37:57,888 on stmt: $248build_tuple.11 = build_tuple(items=[Var($240binary_subscr.7, loop_hafnian_batch.py:44), Var($246binary_subscr.10, loop_hafnian_batch.py:44)])
DEBUG 2022-02-14 16:37:57,888 on stmt: $250binary_subscr.12 = getitem(value=binoms, index=$248build_tuple.11, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:37:57,888 on stmt: $252inplace_multiply.13 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=binom_prod, rhs=$250binary_subscr.12, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:37:57,888 on stmt: binom_prod = $252inplace_multiply.13
DEBUG 2022-02-14 16:37:57,888 on stmt: jump 228
DEBUG 2022-02-14 16:37:57,888 ==== SSA block rewrite pass on 258
DEBUG 2022-02-14 16:37:57,888 Running <numba.core.ssa._FixSSAVars object at 0x7fa047758f70>
DEBUG 2022-02-14 16:37:57,888 on stmt: bool260 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:37:57,888 on stmt: $260pred = call bool260(glynn, func=bool260, args=(Var(glynn, loop_hafnian_batch.py:20),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:37:57,889 on stmt: branch $260pred, 264, 278
DEBUG 2022-02-14 16:37:57,889 ==== SSA block rewrite pass on 264
DEBUG 2022-02-14 16:37:57,889 Running <numba.core.ssa._FixSSAVars object at 0x7fa047758f70>
DEBUG 2022-02-14 16:37:57,889 on stmt: $const264.1 = const(int, 2)
DEBUG 2022-02-14 16:37:57,889 on stmt: $268binary_multiply.3 = $const264.1 * kept_edges
DEBUG 2022-02-14 16:37:57,889 on stmt: delta = $268binary_multiply.3 - edge_reps
DEBUG 2022-02-14 16:37:57,889 on stmt: jump 282
DEBUG 2022-02-14 16:37:57,889 ==== SSA block rewrite pass on 278
DEBUG 2022-02-14 16:37:57,889 Running <numba.core.ssa._FixSSAVars object at 0x7fa047758f70>
DEBUG 2022-02-14 16:37:57,889 on stmt: delta = kept_edges
DEBUG 2022-02-14 16:37:57,889 on stmt: jump 282
DEBUG 2022-02-14 16:37:57,889 ==== SSA block rewrite pass on 282
DEBUG 2022-02-14 16:37:57,889 Running <numba.core.ssa._FixSSAVars object at 0x7fa047758f70>
DEBUG 2022-02-14 16:37:57,889 on stmt: $282load_global.1 = global(get_submatrices: CPUDispatcher(<function get_submatrices at 0x7fa047ebed30>))
DEBUG 2022-02-14 16:37:57,889 on stmt: $292call_function.6 = call $282load_global.1(delta, A, D, oddV, func=$282load_global.1, args=[Var(delta, loop_hafnian_batch.py:47), Var(A, loop_hafnian_batch.py:20), Var(D, loop_hafnian_batch.py:20), Var(oddV, loop_hafnian_batch.py:21)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:37:57,889 on stmt: $294unpack_sequence.11 = exhaust_iter(value=$292call_function.6, count=4)
DEBUG 2022-02-14 16:37:57,889 on stmt: $294unpack_sequence.7 = static_getitem(value=$294unpack_sequence.11, index=0, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:37:57,889 on stmt: $294unpack_sequence.8 = static_getitem(value=$294unpack_sequence.11, index=1, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:37:57,889 on stmt: $294unpack_sequence.9 = static_getitem(value=$294unpack_sequence.11, index=2, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:37:57,890 on stmt: $294unpack_sequence.10 = static_getitem(value=$294unpack_sequence.11, index=3, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:37:57,890 on stmt: AX_S = $294unpack_sequence.7
DEBUG 2022-02-14 16:37:57,890 on stmt: XD_S = $294unpack_sequence.8
DEBUG 2022-02-14 16:37:57,890 on stmt: D_S = $294unpack_sequence.9
DEBUG 2022-02-14 16:37:57,890 on stmt: oddVX_S = $294unpack_sequence.10
DEBUG 2022-02-14 16:37:57,890 on stmt: $304load_global.12 = global(eigvals: CPUDispatcher(<function eigvals at 0x7fa047e5d430>))
DEBUG 2022-02-14 16:37:57,890 on stmt: E = call $304load_global.12(AX_S, func=$304load_global.12, args=[Var(AX_S, loop_hafnian_batch.py:51)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:37:57,890 on stmt: $312load_global.15 = global(f_loop: CPUDispatcher(<function f_loop at 0x7fa047ebe9d0>))
DEBUG 2022-02-14 16:37:57,890 on stmt: f_even = call $312load_global.15(E, AX_S, XD_S, D_S, N_max, func=$312load_global.15, args=[Var(E, loop_hafnian_batch.py:53), Var(AX_S, loop_hafnian_batch.py:51), Var(XD_S, loop_hafnian_batch.py:51), Var(D_S, loop_hafnian_batch.py:51), Var(N_max, loop_hafnian_batch.py:26)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:37:57,890 on stmt: $328load_global.22 = global(f_loop_odd: CPUDispatcher(<function f_loop_odd at 0x7fa047ebeb80>))
DEBUG 2022-02-14 16:37:57,890 on stmt: f_odd = call $328load_global.22(E, AX_S, XD_S, D_S, N_max, oddloop, oddVX_S, func=$328load_global.22, args=[Var(E, loop_hafnian_batch.py:53), Var(AX_S, loop_hafnian_batch.py:51), Var(XD_S, loop_hafnian_batch.py:51), Var(D_S, loop_hafnian_batch.py:51), Var(N_max, loop_hafnian_batch.py:26), Var(oddloop, loop_hafnian_batch.py:20), Var(oddVX_S, loop_hafnian_batch.py:51)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:37:57,890 on stmt: $348load_global.31 = global(range: <class 'range'>)
DEBUG 2022-02-14 16:37:57,890 on stmt: $const350.32 = const(int, 2)
DEBUG 2022-02-14 16:37:57,890 on stmt: $const354.34 = const(int, 0)
DEBUG 2022-02-14 16:37:57,890 on stmt: $356binary_subscr.35 = static_getitem(value=kept_edges, index=0, index_var=$const354.34, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:37:57,890 on stmt: $358binary_multiply.36 = $const350.32 * $356binary_subscr.35
DEBUG 2022-02-14 16:37:57,890 on stmt: $const360.37 = const(int, 2)
DEBUG 2022-02-14 16:37:57,891 on stmt: $364binary_multiply.39 = $const360.37 * batch_max
DEBUG 2022-02-14 16:37:57,891 on stmt: $368binary_add.41 = $364binary_multiply.39 + odd_cutoff
DEBUG 2022-02-14 16:37:57,891 on stmt: $const370.42 = const(int, 1)
DEBUG 2022-02-14 16:37:57,891 on stmt: $372binary_add.43 = $368binary_add.41 + $const370.42
DEBUG 2022-02-14 16:37:57,891 on stmt: $374call_function.44 = call $348load_global.31($358binary_multiply.36, $372binary_add.43, func=$348load_global.31, args=[Var($358binary_multiply.36, loop_hafnian_batch.py:58), Var($372binary_add.43, loop_hafnian_batch.py:58)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:37:57,891 on stmt: $376get_iter.45 = getiter(value=$374call_function.44)
DEBUG 2022-02-14 16:37:57,891 on stmt: $phi378.1 = $376get_iter.45
DEBUG 2022-02-14 16:37:57,891 on stmt: jump 378
DEBUG 2022-02-14 16:37:57,891 ==== SSA block rewrite pass on 378
DEBUG 2022-02-14 16:37:57,891 Running <numba.core.ssa._FixSSAVars object at 0x7fa047758f70>
DEBUG 2022-02-14 16:37:57,891 on stmt: $378for_iter.2 = iternext(value=$phi378.1)
DEBUG 2022-02-14 16:37:57,891 on stmt: $378for_iter.3 = pair_first(value=$378for_iter.2)
DEBUG 2022-02-14 16:37:57,891 on stmt: $378for_iter.4 = pair_second(value=$378for_iter.2)
DEBUG 2022-02-14 16:37:57,891 on stmt: $phi380.2 = $378for_iter.3
DEBUG 2022-02-14 16:37:57,891 on stmt: branch $378for_iter.4, 380, 510
DEBUG 2022-02-14 16:37:57,891 ==== SSA block rewrite pass on 380
DEBUG 2022-02-14 16:37:57,891 Running <numba.core.ssa._FixSSAVars object at 0x7fa047758f70>
DEBUG 2022-02-14 16:37:57,891 on stmt: N_det = $phi380.2
DEBUG 2022-02-14 16:37:57,891 on stmt: N = N_fixed + N_det
DEBUG 2022-02-14 16:37:57,892 on stmt: $const390.6 = const(float, -1.0)
DEBUG 2022-02-14 16:37:57,892 on stmt: $const394.8 = const(int, 2)
DEBUG 2022-02-14 16:37:57,892 on stmt: $396binary_floor_divide.9 = N // $const394.8
DEBUG 2022-02-14 16:37:57,892 on stmt: $400binary_subtract.11 = $396binary_floor_divide.9 - edges_sum
DEBUG 2022-02-14 16:37:57,892 on stmt: plus_minus = $const390.6 ** $400binary_subtract.11
DEBUG 2022-02-14 16:37:57,892 on stmt: $const410.15 = const(int, 2)
DEBUG 2022-02-14 16:37:57,892 on stmt: $412binary_floor_divide.16 = N_det // $const410.15
DEBUG 2022-02-14 16:37:57,892 on stmt: $const416.18 = const(int, 0)
DEBUG 2022-02-14 16:37:57,892 on stmt: $418binary_subscr.19 = static_getitem(value=kept_edges, index=0, index_var=$const416.18, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:37:57,892 on stmt: $420build_tuple.20 = build_tuple(items=[Var($412binary_floor_divide.16, loop_hafnian_batch.py:62), Var($418binary_subscr.19, loop_hafnian_batch.py:62)])
DEBUG 2022-02-14 16:37:57,892 on stmt: $422binary_subscr.21 = getitem(value=binoms, index=$420build_tuple.20, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:37:57,892 on stmt: n_det_binom_prod = $422binary_subscr.21 * binom_prod
DEBUG 2022-02-14 16:37:57,892 on stmt: $const432.25 = const(int, 2)
DEBUG 2022-02-14 16:37:57,892 on stmt: $434binary_modulo.26 = N_det % $const432.25
DEBUG 2022-02-14 16:37:57,892 on stmt: $const436.27 = const(int, 0)
DEBUG 2022-02-14 16:37:57,892 on stmt: $438compare_op.28 = $434binary_modulo.26 == $const436.27
DEBUG 2022-02-14 16:37:57,893 on stmt: bool440 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:37:57,893 on stmt: $440pred = call bool440($438compare_op.28, func=bool440, args=(Var($438compare_op.28, loop_hafnian_batch.py:64),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:37:57,893 on stmt: branch $440pred, 444, 478
DEBUG 2022-02-14 16:37:57,893 ==== SSA block rewrite pass on 444
DEBUG 2022-02-14 16:37:57,893 Running <numba.core.ssa._FixSSAVars object at 0x7fa047758f70>
DEBUG 2022-02-14 16:37:57,893 on stmt: $450binary_subscr.6 = getitem(value=Hnew, index=N_det, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:37:57,893 on stmt: $456binary_multiply.9 = n_det_binom_prod * plus_minus
DEBUG 2022-02-14 16:37:57,893 on stmt: $const462.12 = const(int, 2)
DEBUG 2022-02-14 16:37:57,893 on stmt: $464binary_floor_divide.13 = N // $const462.12
DEBUG 2022-02-14 16:37:57,893 on stmt: $466binary_subscr.14 = getitem(value=f_even, index=$464binary_floor_divide.13, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:37:57,893 on stmt: $468binary_multiply.15 = $456binary_multiply.9 * $466binary_subscr.14
DEBUG 2022-02-14 16:37:57,893 on stmt: $470inplace_add.16 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$450binary_subscr.6, rhs=$468binary_multiply.15, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:37:57,894 on stmt: Hnew[N_det] = $470inplace_add.16
DEBUG 2022-02-14 16:37:57,894 on stmt: jump 506
DEBUG 2022-02-14 16:37:57,894 ==== SSA block rewrite pass on 478
DEBUG 2022-02-14 16:37:57,894 Running <numba.core.ssa._FixSSAVars object at 0x7fa047758f70>
DEBUG 2022-02-14 16:37:57,894 on stmt: $484binary_subscr.6 = getitem(value=Hnew, index=N_det, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:37:57,894 on stmt: $490binary_multiply.9 = n_det_binom_prod * plus_minus
DEBUG 2022-02-14 16:37:57,894 on stmt: $496binary_subscr.12 = getitem(value=f_odd, index=N, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:37:57,894 on stmt: $498binary_multiply.13 = $490binary_multiply.9 * $496binary_subscr.12
DEBUG 2022-02-14 16:37:57,894 on stmt: $500inplace_add.14 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$484binary_subscr.6, rhs=$498binary_multiply.13, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:37:57,894 on stmt: Hnew[N_det] = $500inplace_add.14
DEBUG 2022-02-14 16:37:57,894 on stmt: jump 506
DEBUG 2022-02-14 16:37:57,894 ==== SSA block rewrite pass on 506
DEBUG 2022-02-14 16:37:57,894 Running <numba.core.ssa._FixSSAVars object at 0x7fa047758f70>
DEBUG 2022-02-14 16:37:57,894 on stmt: jump 378
DEBUG 2022-02-14 16:37:57,895 ==== SSA block rewrite pass on 510
DEBUG 2022-02-14 16:37:57,895 Running <numba.core.ssa._FixSSAVars object at 0x7fa047758f70>
DEBUG 2022-02-14 16:37:57,895 on stmt: $514inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=H_batch, rhs=Hnew, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:37:57,895 on stmt: H_batch = $514inplace_add.3
DEBUG 2022-02-14 16:37:57,895 on stmt: jump 158
DEBUG 2022-02-14 16:37:57,895 ==== SSA block rewrite pass on 520
DEBUG 2022-02-14 16:37:57,895 Running <numba.core.ssa._FixSSAVars object at 0x7fa047758f70>
DEBUG 2022-02-14 16:37:57,895 on stmt: bool522 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:37:57,895 on stmt: $522pred = call bool522(glynn, func=bool522, args=(Var(glynn, loop_hafnian_batch.py:20),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:37:57,895 on stmt: branch $522pred, 526, 580
DEBUG 2022-02-14 16:37:57,895 ==== SSA block rewrite pass on 526
DEBUG 2022-02-14 16:37:57,895 Running <numba.core.ssa._FixSSAVars object at 0x7fa047758f70>
DEBUG 2022-02-14 16:37:57,895 on stmt: $526load_global.0 = global(range: <class 'range'>)
DEBUG 2022-02-14 16:37:57,895 on stmt: $530load_attr.2 = getattr(value=H_batch, attr=shape)
DEBUG 2022-02-14 16:37:57,896 on stmt: $const532.3 = const(int, 0)
DEBUG 2022-02-14 16:37:57,896 on stmt: $534binary_subscr.4 = static_getitem(value=$530load_attr.2, index=0, index_var=$const532.3, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:37:57,896 on stmt: $536call_function.5 = call $526load_global.0($534binary_subscr.4, func=$526load_global.0, args=[Var($534binary_subscr.4, loop_hafnian_batch.py:72)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:37:57,896 on stmt: $538get_iter.6 = getiter(value=$536call_function.5)
DEBUG 2022-02-14 16:37:57,896 on stmt: $phi540.0 = $538get_iter.6
DEBUG 2022-02-14 16:37:57,896 on stmt: jump 540
DEBUG 2022-02-14 16:37:57,896 ==== SSA block rewrite pass on 540
DEBUG 2022-02-14 16:37:57,896 Running <numba.core.ssa._FixSSAVars object at 0x7fa047758f70>
DEBUG 2022-02-14 16:37:57,896 on stmt: $540for_iter.1 = iternext(value=$phi540.0)
DEBUG 2022-02-14 16:37:57,896 on stmt: $540for_iter.2 = pair_first(value=$540for_iter.1)
DEBUG 2022-02-14 16:37:57,896 on stmt: $540for_iter.3 = pair_second(value=$540for_iter.1)
DEBUG 2022-02-14 16:37:57,896 on stmt: $phi542.1 = $540for_iter.2
DEBUG 2022-02-14 16:37:57,896 on stmt: branch $540for_iter.3, 542, 580
DEBUG 2022-02-14 16:37:57,896 ==== SSA block rewrite pass on 542
DEBUG 2022-02-14 16:37:57,897 Running <numba.core.ssa._FixSSAVars object at 0x7fa047758f70>
DEBUG 2022-02-14 16:37:57,897 on stmt: j.1 = $phi542.1
DEBUG 2022-02-14 16:37:57,897 on stmt: x = N_fixed + j
DEBUG 2022-02-14 16:37:57,897 find_def var='j' stmt=x = N_fixed + j
DEBUG 2022-02-14 16:37:57,897 replaced with: x = N_fixed + j.1
DEBUG 2022-02-14 16:37:57,897 on stmt: $558binary_subscr.9 = getitem(value=H_batch, index=j, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:37:57,897 find_def var='j' stmt=$558binary_subscr.9 = getitem(value=H_batch, index=j, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:37:57,897 replaced with: $558binary_subscr.9 = getitem(value=H_batch, index=j.1, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:37:57,897 on stmt: $const560.10 = const(float, 0.5)
DEBUG 2022-02-14 16:37:57,897 on stmt: $const564.12 = const(int, 2)
DEBUG 2022-02-14 16:37:57,897 on stmt: $566binary_floor_divide.13 = x // $const564.12
DEBUG 2022-02-14 16:37:57,897 on stmt: $568binary_power.14 = $const560.10 ** $566binary_floor_divide.13
DEBUG 2022-02-14 16:37:57,898 on stmt: $570inplace_multiply.15 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=$558binary_subscr.9, rhs=$568binary_power.14, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:37:57,898 on stmt: H_batch[j] = $570inplace_multiply.15
DEBUG 2022-02-14 16:37:57,898 find_def var='j' stmt=H_batch[j] = $570inplace_multiply.15
DEBUG 2022-02-14 16:37:57,898 replaced with: H_batch[j.1] = $570inplace_multiply.15
DEBUG 2022-02-14 16:37:57,898 on stmt: jump 540
DEBUG 2022-02-14 16:37:57,898 ==== SSA block rewrite pass on 580
DEBUG 2022-02-14 16:37:57,898 Running <numba.core.ssa._FixSSAVars object at 0x7fa047758f70>
DEBUG 2022-02-14 16:37:57,898 on stmt: $582return_value.1 = cast(value=H_batch)
DEBUG 2022-02-14 16:37:57,898 on stmt: return $582return_value.1
DEBUG 2022-02-14 16:37:57,898 Fix SSA violator on var H_batch
DEBUG 2022-02-14 16:37:57,898 ==== SSA block rewrite pass on 0
DEBUG 2022-02-14 16:37:57,898 Running <numba.core.ssa._FreshVarHandler object at 0x7fa047758df0>
DEBUG 2022-02-14 16:37:57,898 on stmt: A = arg(0, name=A)
DEBUG 2022-02-14 16:37:57,898 on stmt: D = arg(1, name=D)
DEBUG 2022-02-14 16:37:57,899 on stmt: fixed_edge_reps = arg(2, name=fixed_edge_reps)
DEBUG 2022-02-14 16:37:57,899 on stmt: batch_max = arg(3, name=batch_max)
DEBUG 2022-02-14 16:37:57,899 on stmt: odd_cutoff = arg(4, name=odd_cutoff)
DEBUG 2022-02-14 16:37:57,899 on stmt: glynn = arg(5, name=glynn)
DEBUG 2022-02-14 16:37:57,899 on stmt: $const4.1 = const(int, 0)
DEBUG 2022-02-14 16:37:57,899 on stmt: oddloop = static_getitem(value=D, index=0, index_var=$const4.1, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:37:57,899 on stmt: $const12.4 = const(int, 0)
DEBUG 2022-02-14 16:37:57,899 on stmt: $const14.5 = const(NoneType, None)
DEBUG 2022-02-14 16:37:57,899 on stmt: $const16.6 = const(NoneType, None)
DEBUG 2022-02-14 16:37:57,899 on stmt: $18build_slice.7 = global(slice: <class 'slice'>)
DEBUG 2022-02-14 16:37:57,899 on stmt: $18build_slice.8 = call $18build_slice.7($const14.5, $const16.6, func=$18build_slice.7, args=(Var($const14.5, loop_hafnian_batch.py:21), Var($const16.6, loop_hafnian_batch.py:21)), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:37:57,899 on stmt: $20build_tuple.9 = build_tuple(items=[Var($const12.4, loop_hafnian_batch.py:21), Var($18build_slice.8, loop_hafnian_batch.py:21)])
DEBUG 2022-02-14 16:37:57,899 on stmt: oddV = static_getitem(value=A, index=(0, slice(None, None, None)), index_var=$20build_tuple.9, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:37:57,899 on stmt: $28load_attr.12 = getattr(value=A, attr=shape)
DEBUG 2022-02-14 16:37:57,899 on stmt: $const30.13 = const(int, 0)
DEBUG 2022-02-14 16:37:57,900 on stmt: n = static_getitem(value=$28load_attr.12, index=0, index_var=$const30.13, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:37:57,900 on stmt: $const36.15 = const(int, 2)
DEBUG 2022-02-14 16:37:57,900 on stmt: $40load_method.17 = getattr(value=fixed_edge_reps, attr=sum)
DEBUG 2022-02-14 16:37:57,900 on stmt: $42call_method.18 = call $40load_method.17(func=$40load_method.17, args=[], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:37:57,900 on stmt: N_fixed = $const36.15 * $42call_method.18
DEBUG 2022-02-14 16:37:57,900 on stmt: $const50.21 = const(int, 2)
DEBUG 2022-02-14 16:37:57,900 on stmt: $54binary_multiply.23 = $const50.21 * batch_max
DEBUG 2022-02-14 16:37:57,900 on stmt: $56binary_add.24 = N_fixed + $54binary_multiply.23
DEBUG 2022-02-14 16:37:57,900 on stmt: N_max = $56binary_add.24 + odd_cutoff
DEBUG 2022-02-14 16:37:57,900 on stmt: $64load_global.27 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:37:57,900 on stmt: $66load_method.28 = getattr(value=$64load_global.27, attr=concatenate)
DEBUG 2022-02-14 16:37:57,900 on stmt: $68load_global.29 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:37:57,900 on stmt: $70load_method.30 = getattr(value=$68load_global.29, attr=array)
DEBUG 2022-02-14 16:37:57,900 on stmt: $74build_list.32 = build_list(items=[Var(batch_max, loop_hafnian_batch.py:20)])
DEBUG 2022-02-14 16:37:57,900 on stmt: $76call_method.33 = call $70load_method.30($74build_list.32, func=$70load_method.30, args=[Var($74build_list.32, loop_hafnian_batch.py:28)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:37:57,900 on stmt: $80build_tuple.35 = build_tuple(items=[Var($76call_method.33, loop_hafnian_batch.py:28), Var(fixed_edge_reps, loop_hafnian_batch.py:20)])
DEBUG 2022-02-14 16:37:57,900 on stmt: edge_reps = call $66load_method.28($80build_tuple.35, func=$66load_method.28, args=[Var($80build_tuple.35, loop_hafnian_batch.py:28)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:37:57,900 on stmt: $86load_global.37 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:37:57,900 on stmt: $88load_method.38 = getattr(value=$86load_global.37, attr=prod)
DEBUG 2022-02-14 16:37:57,901 on stmt: $const92.40 = const(int, 1)
DEBUG 2022-02-14 16:37:57,901 on stmt: $94binary_add.41 = edge_reps + $const92.40
DEBUG 2022-02-14 16:37:57,901 on stmt: steps = call $88load_method.38($94binary_add.41, func=$88load_method.38, args=[Var($94binary_add.41, loop_hafnian_batch.py:29)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:37:57,901 on stmt: $102load_method.44 = getattr(value=edge_reps, attr=max)
DEBUG 2022-02-14 16:37:57,901 on stmt: $104call_method.45 = call $102load_method.44(func=$102load_method.44, args=[], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:37:57,901 on stmt: max_binom = $104call_method.45 + odd_cutoff
DEBUG 2022-02-14 16:37:57,901 on stmt: $112load_global.48 = global(precompute_binoms: CPUDispatcher(<function precompute_binoms at 0x7fa047ebe310>))
DEBUG 2022-02-14 16:37:57,901 on stmt: binoms = call $112load_global.48(max_binom, func=$112load_global.48, args=[Var(max_binom, loop_hafnian_batch.py:31)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:37:57,901 on stmt: $120load_global.51 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:37:57,901 on stmt: $122load_attr.52 = getattr(value=$120load_global.51, attr=zeros)
DEBUG 2022-02-14 16:37:57,901 on stmt: $const124.53 = const(int, 2)
DEBUG 2022-02-14 16:37:57,901 on stmt: $128binary_multiply.55 = $const124.53 * batch_max
DEBUG 2022-02-14 16:37:57,901 on stmt: $132binary_add.57 = $128binary_multiply.55 + odd_cutoff
DEBUG 2022-02-14 16:37:57,901 on stmt: $const134.58 = const(int, 1)
DEBUG 2022-02-14 16:37:57,901 on stmt: $136binary_add.59 = $132binary_add.57 + $const134.58
DEBUG 2022-02-14 16:37:57,901 on stmt: $138load_global.60 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:37:57,901 on stmt: $140load_attr.61 = getattr(value=$138load_global.60, attr=complex128)
DEBUG 2022-02-14 16:37:57,901 on stmt: H_batch = call $122load_attr.52($136binary_add.59, func=$122load_attr.52, args=[Var($136binary_add.59, loop_hafnian_batch.py:34)], kws=[('dtype', Var($140load_attr.61, loop_hafnian_batch.py:34))], vararg=None, target=None)
DEBUG 2022-02-14 16:37:57,901 first assign: H_batch
DEBUG 2022-02-14 16:37:57,901 replaced with: H_batch = call $122load_attr.52($136binary_add.59, func=$122load_attr.52, args=[Var($136binary_add.59, loop_hafnian_batch.py:34)], kws=[('dtype', Var($140load_attr.61, loop_hafnian_batch.py:34))], vararg=None, target=None)
DEBUG 2022-02-14 16:37:57,901 on stmt: $148load_global.64 = global(numba: <module 'numba' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numba/__init__.py'>)
DEBUG 2022-02-14 16:37:57,901 on stmt: $150load_method.65 = getattr(value=$148load_global.64, attr=prange)
DEBUG 2022-02-14 16:37:57,902 on stmt: $154call_method.67 = call $150load_method.65(steps, func=$150load_method.65, args=[Var(steps, loop_hafnian_batch.py:29)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:37:57,902 on stmt: $156get_iter.68 = getiter(value=$154call_method.67)
DEBUG 2022-02-14 16:37:57,902 on stmt: $phi158.0 = $156get_iter.68
DEBUG 2022-02-14 16:37:57,902 on stmt: jump 158
DEBUG 2022-02-14 16:37:57,902 ==== SSA block rewrite pass on 158
DEBUG 2022-02-14 16:37:57,902 Running <numba.core.ssa._FreshVarHandler object at 0x7fa047758df0>
DEBUG 2022-02-14 16:37:57,902 on stmt: $158for_iter.1 = iternext(value=$phi158.0)
DEBUG 2022-02-14 16:37:57,902 on stmt: $158for_iter.2 = pair_first(value=$158for_iter.1)
DEBUG 2022-02-14 16:37:57,902 on stmt: $158for_iter.3 = pair_second(value=$158for_iter.1)
DEBUG 2022-02-14 16:37:57,902 on stmt: $phi162.1 = $158for_iter.2
DEBUG 2022-02-14 16:37:57,902 on stmt: branch $158for_iter.3, 162, 520
DEBUG 2022-02-14 16:37:57,902 ==== SSA block rewrite pass on 162
DEBUG 2022-02-14 16:37:57,902 Running <numba.core.ssa._FreshVarHandler object at 0x7fa047758df0>
DEBUG 2022-02-14 16:37:57,902 on stmt: j = $phi162.1
DEBUG 2022-02-14 16:37:57,902 on stmt: $164load_global.2 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:37:57,902 on stmt: $166load_attr.3 = getattr(value=$164load_global.2, attr=zeros)
DEBUG 2022-02-14 16:37:57,902 on stmt: $const168.4 = const(int, 2)
DEBUG 2022-02-14 16:37:57,902 on stmt: $172binary_multiply.6 = $const168.4 * batch_max
DEBUG 2022-02-14 16:37:57,902 on stmt: $176binary_add.8 = $172binary_multiply.6 + odd_cutoff
DEBUG 2022-02-14 16:37:57,902 on stmt: $const178.9 = const(int, 1)
DEBUG 2022-02-14 16:37:57,902 on stmt: $180binary_add.10 = $176binary_add.8 + $const178.9
DEBUG 2022-02-14 16:37:57,902 on stmt: $182load_global.11 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:37:57,903 on stmt: $184load_attr.12 = getattr(value=$182load_global.11, attr=complex128)
DEBUG 2022-02-14 16:37:57,903 on stmt: Hnew = call $166load_attr.3($180binary_add.10, func=$166load_attr.3, args=[Var($180binary_add.10, loop_hafnian_batch.py:37)], kws=[('dtype', Var($184load_attr.12, loop_hafnian_batch.py:37))], vararg=None, target=None)
DEBUG 2022-02-14 16:37:57,903 on stmt: $192load_global.15 = global(find_kept_edges: CPUDispatcher(<function find_kept_edges at 0x7fa047ebe790>))
DEBUG 2022-02-14 16:37:57,903 on stmt: kept_edges = call $192load_global.15(j, edge_reps, func=$192load_global.15, args=[Var(j, loop_hafnian_batch.py:35), Var(edge_reps, loop_hafnian_batch.py:28)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:37:57,903 on stmt: $204load_method.20 = getattr(value=kept_edges, attr=sum)
DEBUG 2022-02-14 16:37:57,903 on stmt: edges_sum = call $204load_method.20(func=$204load_method.20, args=[], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:37:57,903 on stmt: binom_prod = const(float, 1.0)
DEBUG 2022-02-14 16:37:57,903 on stmt: $214load_global.23 = global(range: <class 'range'>)
DEBUG 2022-02-14 16:37:57,903 on stmt: $const216.24 = const(int, 1)
DEBUG 2022-02-14 16:37:57,903 on stmt: $const220.26 = const(int, 2)
DEBUG 2022-02-14 16:37:57,903 on stmt: $222binary_floor_divide.27 = n // $const220.26
DEBUG 2022-02-14 16:37:57,903 on stmt: $224call_function.28 = call $214load_global.23($const216.24, $222binary_floor_divide.27, func=$214load_global.23, args=[Var($const216.24, loop_hafnian_batch.py:43), Var($222binary_floor_divide.27, loop_hafnian_batch.py:43)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:37:57,903 on stmt: $226get_iter.29 = getiter(value=$224call_function.28)
DEBUG 2022-02-14 16:37:57,903 on stmt: $phi228.1 = $226get_iter.29
DEBUG 2022-02-14 16:37:57,903 on stmt: jump 228
DEBUG 2022-02-14 16:37:57,903 ==== SSA block rewrite pass on 228
DEBUG 2022-02-14 16:37:57,904 Running <numba.core.ssa._FreshVarHandler object at 0x7fa047758df0>
DEBUG 2022-02-14 16:37:57,904 on stmt: $228for_iter.2 = iternext(value=$phi228.1)
DEBUG 2022-02-14 16:37:57,904 on stmt: $228for_iter.3 = pair_first(value=$228for_iter.2)
DEBUG 2022-02-14 16:37:57,904 on stmt: $228for_iter.4 = pair_second(value=$228for_iter.2)
DEBUG 2022-02-14 16:37:57,904 on stmt: $phi230.2 = $228for_iter.3
DEBUG 2022-02-14 16:37:57,904 on stmt: branch $228for_iter.4, 230, 258
DEBUG 2022-02-14 16:37:57,904 ==== SSA block rewrite pass on 230
DEBUG 2022-02-14 16:37:57,904 Running <numba.core.ssa._FreshVarHandler object at 0x7fa047758df0>
DEBUG 2022-02-14 16:37:57,904 on stmt: i = $phi230.2
DEBUG 2022-02-14 16:37:57,904 on stmt: $240binary_subscr.7 = getitem(value=edge_reps, index=i, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:37:57,904 on stmt: $246binary_subscr.10 = getitem(value=kept_edges, index=i, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:37:57,904 on stmt: $248build_tuple.11 = build_tuple(items=[Var($240binary_subscr.7, loop_hafnian_batch.py:44), Var($246binary_subscr.10, loop_hafnian_batch.py:44)])
DEBUG 2022-02-14 16:37:57,904 on stmt: $250binary_subscr.12 = getitem(value=binoms, index=$248build_tuple.11, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:37:57,904 on stmt: $252inplace_multiply.13 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=binom_prod, rhs=$250binary_subscr.12, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:37:57,904 on stmt: binom_prod = $252inplace_multiply.13
DEBUG 2022-02-14 16:37:57,904 on stmt: jump 228
DEBUG 2022-02-14 16:37:57,904 ==== SSA block rewrite pass on 258
DEBUG 2022-02-14 16:37:57,904 Running <numba.core.ssa._FreshVarHandler object at 0x7fa047758df0>
DEBUG 2022-02-14 16:37:57,904 on stmt: bool260 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:37:57,904 on stmt: $260pred = call bool260(glynn, func=bool260, args=(Var(glynn, loop_hafnian_batch.py:20),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:37:57,905 on stmt: branch $260pred, 264, 278
DEBUG 2022-02-14 16:37:57,905 ==== SSA block rewrite pass on 264
DEBUG 2022-02-14 16:37:57,905 Running <numba.core.ssa._FreshVarHandler object at 0x7fa047758df0>
DEBUG 2022-02-14 16:37:57,905 on stmt: $const264.1 = const(int, 2)
DEBUG 2022-02-14 16:37:57,905 on stmt: $268binary_multiply.3 = $const264.1 * kept_edges
DEBUG 2022-02-14 16:37:57,905 on stmt: delta = $268binary_multiply.3 - edge_reps
DEBUG 2022-02-14 16:37:57,905 on stmt: jump 282
DEBUG 2022-02-14 16:37:57,905 ==== SSA block rewrite pass on 278
DEBUG 2022-02-14 16:37:57,905 Running <numba.core.ssa._FreshVarHandler object at 0x7fa047758df0>
DEBUG 2022-02-14 16:37:57,905 on stmt: delta = kept_edges
DEBUG 2022-02-14 16:37:57,905 on stmt: jump 282
DEBUG 2022-02-14 16:37:57,905 ==== SSA block rewrite pass on 282
DEBUG 2022-02-14 16:37:57,905 Running <numba.core.ssa._FreshVarHandler object at 0x7fa047758df0>
DEBUG 2022-02-14 16:37:57,905 on stmt: $282load_global.1 = global(get_submatrices: CPUDispatcher(<function get_submatrices at 0x7fa047ebed30>))
DEBUG 2022-02-14 16:37:57,905 on stmt: $292call_function.6 = call $282load_global.1(delta, A, D, oddV, func=$282load_global.1, args=[Var(delta, loop_hafnian_batch.py:47), Var(A, loop_hafnian_batch.py:20), Var(D, loop_hafnian_batch.py:20), Var(oddV, loop_hafnian_batch.py:21)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:37:57,905 on stmt: $294unpack_sequence.11 = exhaust_iter(value=$292call_function.6, count=4)
DEBUG 2022-02-14 16:37:57,905 on stmt: $294unpack_sequence.7 = static_getitem(value=$294unpack_sequence.11, index=0, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:37:57,905 on stmt: $294unpack_sequence.8 = static_getitem(value=$294unpack_sequence.11, index=1, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:37:57,905 on stmt: $294unpack_sequence.9 = static_getitem(value=$294unpack_sequence.11, index=2, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:37:57,905 on stmt: $294unpack_sequence.10 = static_getitem(value=$294unpack_sequence.11, index=3, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:37:57,906 on stmt: AX_S = $294unpack_sequence.7
DEBUG 2022-02-14 16:37:57,906 on stmt: XD_S = $294unpack_sequence.8
DEBUG 2022-02-14 16:37:57,906 on stmt: D_S = $294unpack_sequence.9
DEBUG 2022-02-14 16:37:57,906 on stmt: oddVX_S = $294unpack_sequence.10
DEBUG 2022-02-14 16:37:57,906 on stmt: $304load_global.12 = global(eigvals: CPUDispatcher(<function eigvals at 0x7fa047e5d430>))
DEBUG 2022-02-14 16:37:57,906 on stmt: E = call $304load_global.12(AX_S, func=$304load_global.12, args=[Var(AX_S, loop_hafnian_batch.py:51)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:37:57,906 on stmt: $312load_global.15 = global(f_loop: CPUDispatcher(<function f_loop at 0x7fa047ebe9d0>))
DEBUG 2022-02-14 16:37:57,906 on stmt: f_even = call $312load_global.15(E, AX_S, XD_S, D_S, N_max, func=$312load_global.15, args=[Var(E, loop_hafnian_batch.py:53), Var(AX_S, loop_hafnian_batch.py:51), Var(XD_S, loop_hafnian_batch.py:51), Var(D_S, loop_hafnian_batch.py:51), Var(N_max, loop_hafnian_batch.py:26)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:37:57,906 on stmt: $328load_global.22 = global(f_loop_odd: CPUDispatcher(<function f_loop_odd at 0x7fa047ebeb80>))
DEBUG 2022-02-14 16:37:57,906 on stmt: f_odd = call $328load_global.22(E, AX_S, XD_S, D_S, N_max, oddloop, oddVX_S, func=$328load_global.22, args=[Var(E, loop_hafnian_batch.py:53), Var(AX_S, loop_hafnian_batch.py:51), Var(XD_S, loop_hafnian_batch.py:51), Var(D_S, loop_hafnian_batch.py:51), Var(N_max, loop_hafnian_batch.py:26), Var(oddloop, loop_hafnian_batch.py:20), Var(oddVX_S, loop_hafnian_batch.py:51)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:37:57,906 on stmt: $348load_global.31 = global(range: <class 'range'>)
DEBUG 2022-02-14 16:37:57,906 on stmt: $const350.32 = const(int, 2)
DEBUG 2022-02-14 16:37:57,906 on stmt: $const354.34 = const(int, 0)
DEBUG 2022-02-14 16:37:57,906 on stmt: $356binary_subscr.35 = static_getitem(value=kept_edges, index=0, index_var=$const354.34, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:37:57,906 on stmt: $358binary_multiply.36 = $const350.32 * $356binary_subscr.35
DEBUG 2022-02-14 16:37:57,906 on stmt: $const360.37 = const(int, 2)
DEBUG 2022-02-14 16:37:57,906 on stmt: $364binary_multiply.39 = $const360.37 * batch_max
DEBUG 2022-02-14 16:37:57,906 on stmt: $368binary_add.41 = $364binary_multiply.39 + odd_cutoff
DEBUG 2022-02-14 16:37:57,907 on stmt: $const370.42 = const(int, 1)
DEBUG 2022-02-14 16:37:57,907 on stmt: $372binary_add.43 = $368binary_add.41 + $const370.42
DEBUG 2022-02-14 16:37:57,907 on stmt: $374call_function.44 = call $348load_global.31($358binary_multiply.36, $372binary_add.43, func=$348load_global.31, args=[Var($358binary_multiply.36, loop_hafnian_batch.py:58), Var($372binary_add.43, loop_hafnian_batch.py:58)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:37:57,907 on stmt: $376get_iter.45 = getiter(value=$374call_function.44)
DEBUG 2022-02-14 16:37:57,907 on stmt: $phi378.1 = $376get_iter.45
DEBUG 2022-02-14 16:37:57,907 on stmt: jump 378
DEBUG 2022-02-14 16:37:57,907 ==== SSA block rewrite pass on 378
DEBUG 2022-02-14 16:37:57,907 Running <numba.core.ssa._FreshVarHandler object at 0x7fa047758df0>
DEBUG 2022-02-14 16:37:57,907 on stmt: $378for_iter.2 = iternext(value=$phi378.1)
DEBUG 2022-02-14 16:37:57,907 on stmt: $378for_iter.3 = pair_first(value=$378for_iter.2)
DEBUG 2022-02-14 16:37:57,907 on stmt: $378for_iter.4 = pair_second(value=$378for_iter.2)
DEBUG 2022-02-14 16:37:57,907 on stmt: $phi380.2 = $378for_iter.3
DEBUG 2022-02-14 16:37:57,907 on stmt: branch $378for_iter.4, 380, 510
DEBUG 2022-02-14 16:37:57,907 ==== SSA block rewrite pass on 380
DEBUG 2022-02-14 16:37:57,907 Running <numba.core.ssa._FreshVarHandler object at 0x7fa047758df0>
DEBUG 2022-02-14 16:37:57,907 on stmt: N_det = $phi380.2
DEBUG 2022-02-14 16:37:57,907 on stmt: N = N_fixed + N_det
DEBUG 2022-02-14 16:37:57,907 on stmt: $const390.6 = const(float, -1.0)
DEBUG 2022-02-14 16:37:57,907 on stmt: $const394.8 = const(int, 2)
DEBUG 2022-02-14 16:37:57,907 on stmt: $396binary_floor_divide.9 = N // $const394.8
DEBUG 2022-02-14 16:37:57,908 on stmt: $400binary_subtract.11 = $396binary_floor_divide.9 - edges_sum
DEBUG 2022-02-14 16:37:57,908 on stmt: plus_minus = $const390.6 ** $400binary_subtract.11
DEBUG 2022-02-14 16:37:57,908 on stmt: $const410.15 = const(int, 2)
DEBUG 2022-02-14 16:37:57,908 on stmt: $412binary_floor_divide.16 = N_det // $const410.15
DEBUG 2022-02-14 16:37:57,908 on stmt: $const416.18 = const(int, 0)
DEBUG 2022-02-14 16:37:57,908 on stmt: $418binary_subscr.19 = static_getitem(value=kept_edges, index=0, index_var=$const416.18, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:37:57,908 on stmt: $420build_tuple.20 = build_tuple(items=[Var($412binary_floor_divide.16, loop_hafnian_batch.py:62), Var($418binary_subscr.19, loop_hafnian_batch.py:62)])
DEBUG 2022-02-14 16:37:57,908 on stmt: $422binary_subscr.21 = getitem(value=binoms, index=$420build_tuple.20, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:37:57,908 on stmt: n_det_binom_prod = $422binary_subscr.21 * binom_prod
DEBUG 2022-02-14 16:37:57,908 on stmt: $const432.25 = const(int, 2)
DEBUG 2022-02-14 16:37:57,908 on stmt: $434binary_modulo.26 = N_det % $const432.25
DEBUG 2022-02-14 16:37:57,908 on stmt: $const436.27 = const(int, 0)
DEBUG 2022-02-14 16:37:57,908 on stmt: $438compare_op.28 = $434binary_modulo.26 == $const436.27
DEBUG 2022-02-14 16:37:57,908 on stmt: bool440 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:37:57,908 on stmt: $440pred = call bool440($438compare_op.28, func=bool440, args=(Var($438compare_op.28, loop_hafnian_batch.py:64),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:37:57,908 on stmt: branch $440pred, 444, 478
DEBUG 2022-02-14 16:37:57,908 ==== SSA block rewrite pass on 444
DEBUG 2022-02-14 16:37:57,908 Running <numba.core.ssa._FreshVarHandler object at 0x7fa047758df0>
DEBUG 2022-02-14 16:37:57,909 on stmt: $450binary_subscr.6 = getitem(value=Hnew, index=N_det, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:37:57,909 on stmt: $456binary_multiply.9 = n_det_binom_prod * plus_minus
DEBUG 2022-02-14 16:37:57,909 on stmt: $const462.12 = const(int, 2)
DEBUG 2022-02-14 16:37:57,909 on stmt: $464binary_floor_divide.13 = N // $const462.12
DEBUG 2022-02-14 16:37:57,909 on stmt: $466binary_subscr.14 = getitem(value=f_even, index=$464binary_floor_divide.13, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:37:57,909 on stmt: $468binary_multiply.15 = $456binary_multiply.9 * $466binary_subscr.14
DEBUG 2022-02-14 16:37:57,909 on stmt: $470inplace_add.16 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$450binary_subscr.6, rhs=$468binary_multiply.15, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:37:57,909 on stmt: Hnew[N_det] = $470inplace_add.16
DEBUG 2022-02-14 16:37:57,909 on stmt: jump 506
DEBUG 2022-02-14 16:37:57,909 ==== SSA block rewrite pass on 478
DEBUG 2022-02-14 16:37:57,909 Running <numba.core.ssa._FreshVarHandler object at 0x7fa047758df0>
DEBUG 2022-02-14 16:37:57,909 on stmt: $484binary_subscr.6 = getitem(value=Hnew, index=N_det, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:37:57,909 on stmt: $490binary_multiply.9 = n_det_binom_prod * plus_minus
DEBUG 2022-02-14 16:37:57,909 on stmt: $496binary_subscr.12 = getitem(value=f_odd, index=N, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:37:57,909 on stmt: $498binary_multiply.13 = $490binary_multiply.9 * $496binary_subscr.12
DEBUG 2022-02-14 16:37:57,909 on stmt: $500inplace_add.14 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$484binary_subscr.6, rhs=$498binary_multiply.13, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:37:57,909 on stmt: Hnew[N_det] = $500inplace_add.14
DEBUG 2022-02-14 16:37:57,909 on stmt: jump 506
DEBUG 2022-02-14 16:37:57,909 ==== SSA block rewrite pass on 506
DEBUG 2022-02-14 16:37:57,909 Running <numba.core.ssa._FreshVarHandler object at 0x7fa047758df0>
DEBUG 2022-02-14 16:37:57,909 on stmt: jump 378
DEBUG 2022-02-14 16:37:57,909 ==== SSA block rewrite pass on 510
DEBUG 2022-02-14 16:37:57,909 Running <numba.core.ssa._FreshVarHandler object at 0x7fa047758df0>
DEBUG 2022-02-14 16:37:57,909 on stmt: $514inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=H_batch, rhs=Hnew, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:37:57,909 on stmt: H_batch = $514inplace_add.3
DEBUG 2022-02-14 16:37:57,910 replaced with: H_batch.1 = $514inplace_add.3
DEBUG 2022-02-14 16:37:57,910 on stmt: jump 158
DEBUG 2022-02-14 16:37:57,910 ==== SSA block rewrite pass on 520
DEBUG 2022-02-14 16:37:57,910 Running <numba.core.ssa._FreshVarHandler object at 0x7fa047758df0>
DEBUG 2022-02-14 16:37:57,910 on stmt: bool522 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:37:57,910 on stmt: $522pred = call bool522(glynn, func=bool522, args=(Var(glynn, loop_hafnian_batch.py:20),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:37:57,910 on stmt: branch $522pred, 526, 580
DEBUG 2022-02-14 16:37:57,910 ==== SSA block rewrite pass on 526
DEBUG 2022-02-14 16:37:57,910 Running <numba.core.ssa._FreshVarHandler object at 0x7fa047758df0>
DEBUG 2022-02-14 16:37:57,910 on stmt: $526load_global.0 = global(range: <class 'range'>)
DEBUG 2022-02-14 16:37:57,910 on stmt: $530load_attr.2 = getattr(value=H_batch, attr=shape)
DEBUG 2022-02-14 16:37:57,910 on stmt: $const532.3 = const(int, 0)
DEBUG 2022-02-14 16:37:57,910 on stmt: $534binary_subscr.4 = static_getitem(value=$530load_attr.2, index=0, index_var=$const532.3, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:37:57,910 on stmt: $536call_function.5 = call $526load_global.0($534binary_subscr.4, func=$526load_global.0, args=[Var($534binary_subscr.4, loop_hafnian_batch.py:72)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:37:57,910 on stmt: $538get_iter.6 = getiter(value=$536call_function.5)
DEBUG 2022-02-14 16:37:57,910 on stmt: $phi540.0 = $538get_iter.6
DEBUG 2022-02-14 16:37:57,910 on stmt: jump 540
DEBUG 2022-02-14 16:37:57,910 ==== SSA block rewrite pass on 540
DEBUG 2022-02-14 16:37:57,910 Running <numba.core.ssa._FreshVarHandler object at 0x7fa047758df0>
DEBUG 2022-02-14 16:37:57,910 on stmt: $540for_iter.1 = iternext(value=$phi540.0)
DEBUG 2022-02-14 16:37:57,910 on stmt: $540for_iter.2 = pair_first(value=$540for_iter.1)
DEBUG 2022-02-14 16:37:57,910 on stmt: $540for_iter.3 = pair_second(value=$540for_iter.1)
DEBUG 2022-02-14 16:37:57,910 on stmt: $phi542.1 = $540for_iter.2
DEBUG 2022-02-14 16:37:57,910 on stmt: branch $540for_iter.3, 542, 580
DEBUG 2022-02-14 16:37:57,910 ==== SSA block rewrite pass on 542
DEBUG 2022-02-14 16:37:57,911 Running <numba.core.ssa._FreshVarHandler object at 0x7fa047758df0>
DEBUG 2022-02-14 16:37:57,911 on stmt: j.1 = $phi542.1
DEBUG 2022-02-14 16:37:57,911 on stmt: x = N_fixed + j.1
DEBUG 2022-02-14 16:37:57,911 on stmt: $558binary_subscr.9 = getitem(value=H_batch, index=j.1, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:37:57,911 on stmt: $const560.10 = const(float, 0.5)
DEBUG 2022-02-14 16:37:57,911 on stmt: $const564.12 = const(int, 2)
DEBUG 2022-02-14 16:37:57,911 on stmt: $566binary_floor_divide.13 = x // $const564.12
DEBUG 2022-02-14 16:37:57,911 on stmt: $568binary_power.14 = $const560.10 ** $566binary_floor_divide.13
DEBUG 2022-02-14 16:37:57,911 on stmt: $570inplace_multiply.15 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=$558binary_subscr.9, rhs=$568binary_power.14, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:37:57,911 on stmt: H_batch[j.1] = $570inplace_multiply.15
DEBUG 2022-02-14 16:37:57,911 on stmt: jump 540
DEBUG 2022-02-14 16:37:57,911 ==== SSA block rewrite pass on 580
DEBUG 2022-02-14 16:37:57,911 Running <numba.core.ssa._FreshVarHandler object at 0x7fa047758df0>
DEBUG 2022-02-14 16:37:57,911 on stmt: $582return_value.1 = cast(value=H_batch)
DEBUG 2022-02-14 16:37:57,911 on stmt: return $582return_value.1
DEBUG 2022-02-14 16:37:57,911 Replaced assignments: defaultdict(<class 'list'>,
            {0: [<numba.core.ir.Assign object at 0x7fa047758f70>],
             510: [<numba.core.ir.Assign object at 0x7fa047704640>]})
DEBUG 2022-02-14 16:37:57,911 ==== SSA block rewrite pass on 0
DEBUG 2022-02-14 16:37:57,911 Running <numba.core.ssa._FixSSAVars object at 0x7fa047704ee0>
DEBUG 2022-02-14 16:37:57,911 on stmt: A = arg(0, name=A)
DEBUG 2022-02-14 16:37:57,911 on stmt: D = arg(1, name=D)
DEBUG 2022-02-14 16:37:57,911 on stmt: fixed_edge_reps = arg(2, name=fixed_edge_reps)
DEBUG 2022-02-14 16:37:57,911 on stmt: batch_max = arg(3, name=batch_max)
DEBUG 2022-02-14 16:37:57,911 on stmt: odd_cutoff = arg(4, name=odd_cutoff)
DEBUG 2022-02-14 16:37:57,911 on stmt: glynn = arg(5, name=glynn)
DEBUG 2022-02-14 16:37:57,912 on stmt: $const4.1 = const(int, 0)
DEBUG 2022-02-14 16:37:57,912 on stmt: oddloop = static_getitem(value=D, index=0, index_var=$const4.1, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:37:57,912 on stmt: $const12.4 = const(int, 0)
DEBUG 2022-02-14 16:37:57,912 on stmt: $const14.5 = const(NoneType, None)
DEBUG 2022-02-14 16:37:57,912 on stmt: $const16.6 = const(NoneType, None)
DEBUG 2022-02-14 16:37:57,912 on stmt: $18build_slice.7 = global(slice: <class 'slice'>)
DEBUG 2022-02-14 16:37:57,912 on stmt: $18build_slice.8 = call $18build_slice.7($const14.5, $const16.6, func=$18build_slice.7, args=(Var($const14.5, loop_hafnian_batch.py:21), Var($const16.6, loop_hafnian_batch.py:21)), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:37:57,912 on stmt: $20build_tuple.9 = build_tuple(items=[Var($const12.4, loop_hafnian_batch.py:21), Var($18build_slice.8, loop_hafnian_batch.py:21)])
DEBUG 2022-02-14 16:37:57,912 on stmt: oddV = static_getitem(value=A, index=(0, slice(None, None, None)), index_var=$20build_tuple.9, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:37:57,912 on stmt: $28load_attr.12 = getattr(value=A, attr=shape)
DEBUG 2022-02-14 16:37:57,912 on stmt: $const30.13 = const(int, 0)
DEBUG 2022-02-14 16:37:57,912 on stmt: n = static_getitem(value=$28load_attr.12, index=0, index_var=$const30.13, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:37:57,912 on stmt: $const36.15 = const(int, 2)
DEBUG 2022-02-14 16:37:57,912 on stmt: $40load_method.17 = getattr(value=fixed_edge_reps, attr=sum)
DEBUG 2022-02-14 16:37:57,912 on stmt: $42call_method.18 = call $40load_method.17(func=$40load_method.17, args=[], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:37:57,912 on stmt: N_fixed = $const36.15 * $42call_method.18
DEBUG 2022-02-14 16:37:57,912 on stmt: $const50.21 = const(int, 2)
DEBUG 2022-02-14 16:37:57,912 on stmt: $54binary_multiply.23 = $const50.21 * batch_max
DEBUG 2022-02-14 16:37:57,912 on stmt: $56binary_add.24 = N_fixed + $54binary_multiply.23
DEBUG 2022-02-14 16:37:57,912 on stmt: N_max = $56binary_add.24 + odd_cutoff
DEBUG 2022-02-14 16:37:57,912 on stmt: $64load_global.27 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:37:57,912 on stmt: $66load_method.28 = getattr(value=$64load_global.27, attr=concatenate)
DEBUG 2022-02-14 16:37:57,912 on stmt: $68load_global.29 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:37:57,912 on stmt: $70load_method.30 = getattr(value=$68load_global.29, attr=array)
DEBUG 2022-02-14 16:37:57,913 on stmt: $74build_list.32 = build_list(items=[Var(batch_max, loop_hafnian_batch.py:20)])
DEBUG 2022-02-14 16:37:57,913 on stmt: $76call_method.33 = call $70load_method.30($74build_list.32, func=$70load_method.30, args=[Var($74build_list.32, loop_hafnian_batch.py:28)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:37:57,913 on stmt: $80build_tuple.35 = build_tuple(items=[Var($76call_method.33, loop_hafnian_batch.py:28), Var(fixed_edge_reps, loop_hafnian_batch.py:20)])
DEBUG 2022-02-14 16:37:57,913 on stmt: edge_reps = call $66load_method.28($80build_tuple.35, func=$66load_method.28, args=[Var($80build_tuple.35, loop_hafnian_batch.py:28)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:37:57,913 on stmt: $86load_global.37 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:37:57,913 on stmt: $88load_method.38 = getattr(value=$86load_global.37, attr=prod)
DEBUG 2022-02-14 16:37:57,913 on stmt: $const92.40 = const(int, 1)
DEBUG 2022-02-14 16:37:57,913 on stmt: $94binary_add.41 = edge_reps + $const92.40
DEBUG 2022-02-14 16:37:57,913 on stmt: steps = call $88load_method.38($94binary_add.41, func=$88load_method.38, args=[Var($94binary_add.41, loop_hafnian_batch.py:29)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:37:57,913 on stmt: $102load_method.44 = getattr(value=edge_reps, attr=max)
DEBUG 2022-02-14 16:37:57,913 on stmt: $104call_method.45 = call $102load_method.44(func=$102load_method.44, args=[], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:37:57,913 on stmt: max_binom = $104call_method.45 + odd_cutoff
DEBUG 2022-02-14 16:37:57,913 on stmt: $112load_global.48 = global(precompute_binoms: CPUDispatcher(<function precompute_binoms at 0x7fa047ebe310>))
DEBUG 2022-02-14 16:37:57,913 on stmt: binoms = call $112load_global.48(max_binom, func=$112load_global.48, args=[Var(max_binom, loop_hafnian_batch.py:31)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:37:57,913 on stmt: $120load_global.51 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:37:57,913 on stmt: $122load_attr.52 = getattr(value=$120load_global.51, attr=zeros)
DEBUG 2022-02-14 16:37:57,913 on stmt: $const124.53 = const(int, 2)
DEBUG 2022-02-14 16:37:57,913 on stmt: $128binary_multiply.55 = $const124.53 * batch_max
DEBUG 2022-02-14 16:37:57,913 on stmt: $132binary_add.57 = $128binary_multiply.55 + odd_cutoff
DEBUG 2022-02-14 16:37:57,913 on stmt: $const134.58 = const(int, 1)
DEBUG 2022-02-14 16:37:57,913 on stmt: $136binary_add.59 = $132binary_add.57 + $const134.58
DEBUG 2022-02-14 16:37:57,914 on stmt: $138load_global.60 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:37:57,914 on stmt: $140load_attr.61 = getattr(value=$138load_global.60, attr=complex128)
DEBUG 2022-02-14 16:37:57,914 on stmt: H_batch = call $122load_attr.52($136binary_add.59, func=$122load_attr.52, args=[Var($136binary_add.59, loop_hafnian_batch.py:34)], kws=[('dtype', Var($140load_attr.61, loop_hafnian_batch.py:34))], vararg=None, target=None)
DEBUG 2022-02-14 16:37:57,914 on stmt: $148load_global.64 = global(numba: <module 'numba' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numba/__init__.py'>)
DEBUG 2022-02-14 16:37:57,914 on stmt: $150load_method.65 = getattr(value=$148load_global.64, attr=prange)
DEBUG 2022-02-14 16:37:57,914 on stmt: $154call_method.67 = call $150load_method.65(steps, func=$150load_method.65, args=[Var(steps, loop_hafnian_batch.py:29)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:37:57,914 on stmt: $156get_iter.68 = getiter(value=$154call_method.67)
DEBUG 2022-02-14 16:37:57,914 on stmt: $phi158.0 = $156get_iter.68
DEBUG 2022-02-14 16:37:57,914 on stmt: jump 158
DEBUG 2022-02-14 16:37:57,914 ==== SSA block rewrite pass on 158
DEBUG 2022-02-14 16:37:57,914 Running <numba.core.ssa._FixSSAVars object at 0x7fa047704ee0>
DEBUG 2022-02-14 16:37:57,914 on stmt: $158for_iter.1 = iternext(value=$phi158.0)
DEBUG 2022-02-14 16:37:57,914 on stmt: $158for_iter.2 = pair_first(value=$158for_iter.1)
DEBUG 2022-02-14 16:37:57,914 on stmt: $158for_iter.3 = pair_second(value=$158for_iter.1)
DEBUG 2022-02-14 16:37:57,914 on stmt: $phi162.1 = $158for_iter.2
DEBUG 2022-02-14 16:37:57,914 on stmt: branch $158for_iter.3, 162, 520
DEBUG 2022-02-14 16:37:57,914 ==== SSA block rewrite pass on 162
DEBUG 2022-02-14 16:37:57,914 Running <numba.core.ssa._FixSSAVars object at 0x7fa047704ee0>
DEBUG 2022-02-14 16:37:57,914 on stmt: j = $phi162.1
DEBUG 2022-02-14 16:37:57,914 on stmt: $164load_global.2 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:37:57,914 on stmt: $166load_attr.3 = getattr(value=$164load_global.2, attr=zeros)
DEBUG 2022-02-14 16:37:57,914 on stmt: $const168.4 = const(int, 2)
DEBUG 2022-02-14 16:37:57,914 on stmt: $172binary_multiply.6 = $const168.4 * batch_max
DEBUG 2022-02-14 16:37:57,914 on stmt: $176binary_add.8 = $172binary_multiply.6 + odd_cutoff
DEBUG 2022-02-14 16:37:57,915 on stmt: $const178.9 = const(int, 1)
DEBUG 2022-02-14 16:37:57,915 on stmt: $180binary_add.10 = $176binary_add.8 + $const178.9
DEBUG 2022-02-14 16:37:57,915 on stmt: $182load_global.11 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:37:57,915 on stmt: $184load_attr.12 = getattr(value=$182load_global.11, attr=complex128)
DEBUG 2022-02-14 16:37:57,915 on stmt: Hnew = call $166load_attr.3($180binary_add.10, func=$166load_attr.3, args=[Var($180binary_add.10, loop_hafnian_batch.py:37)], kws=[('dtype', Var($184load_attr.12, loop_hafnian_batch.py:37))], vararg=None, target=None)
DEBUG 2022-02-14 16:37:57,915 on stmt: $192load_global.15 = global(find_kept_edges: CPUDispatcher(<function find_kept_edges at 0x7fa047ebe790>))
DEBUG 2022-02-14 16:37:57,915 on stmt: kept_edges = call $192load_global.15(j, edge_reps, func=$192load_global.15, args=[Var(j, loop_hafnian_batch.py:35), Var(edge_reps, loop_hafnian_batch.py:28)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:37:57,915 on stmt: $204load_method.20 = getattr(value=kept_edges, attr=sum)
DEBUG 2022-02-14 16:37:57,915 on stmt: edges_sum = call $204load_method.20(func=$204load_method.20, args=[], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:37:57,915 on stmt: binom_prod = const(float, 1.0)
DEBUG 2022-02-14 16:37:57,915 on stmt: $214load_global.23 = global(range: <class 'range'>)
DEBUG 2022-02-14 16:37:57,915 on stmt: $const216.24 = const(int, 1)
DEBUG 2022-02-14 16:37:57,915 on stmt: $const220.26 = const(int, 2)
DEBUG 2022-02-14 16:37:57,915 on stmt: $222binary_floor_divide.27 = n // $const220.26
DEBUG 2022-02-14 16:37:57,915 on stmt: $224call_function.28 = call $214load_global.23($const216.24, $222binary_floor_divide.27, func=$214load_global.23, args=[Var($const216.24, loop_hafnian_batch.py:43), Var($222binary_floor_divide.27, loop_hafnian_batch.py:43)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:37:57,915 on stmt: $226get_iter.29 = getiter(value=$224call_function.28)
DEBUG 2022-02-14 16:37:57,915 on stmt: $phi228.1 = $226get_iter.29
DEBUG 2022-02-14 16:37:57,915 on stmt: jump 228
DEBUG 2022-02-14 16:37:57,916 ==== SSA block rewrite pass on 228
DEBUG 2022-02-14 16:37:57,916 Running <numba.core.ssa._FixSSAVars object at 0x7fa047704ee0>
DEBUG 2022-02-14 16:37:57,916 on stmt: $228for_iter.2 = iternext(value=$phi228.1)
DEBUG 2022-02-14 16:37:57,916 on stmt: $228for_iter.3 = pair_first(value=$228for_iter.2)
DEBUG 2022-02-14 16:37:57,916 on stmt: $228for_iter.4 = pair_second(value=$228for_iter.2)
DEBUG 2022-02-14 16:37:57,916 on stmt: $phi230.2 = $228for_iter.3
DEBUG 2022-02-14 16:37:57,916 on stmt: branch $228for_iter.4, 230, 258
DEBUG 2022-02-14 16:37:57,916 ==== SSA block rewrite pass on 230
DEBUG 2022-02-14 16:37:57,916 Running <numba.core.ssa._FixSSAVars object at 0x7fa047704ee0>
DEBUG 2022-02-14 16:37:57,916 on stmt: i = $phi230.2
DEBUG 2022-02-14 16:37:57,916 on stmt: $240binary_subscr.7 = getitem(value=edge_reps, index=i, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:37:57,916 on stmt: $246binary_subscr.10 = getitem(value=kept_edges, index=i, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:37:57,916 on stmt: $248build_tuple.11 = build_tuple(items=[Var($240binary_subscr.7, loop_hafnian_batch.py:44), Var($246binary_subscr.10, loop_hafnian_batch.py:44)])
DEBUG 2022-02-14 16:37:57,916 on stmt: $250binary_subscr.12 = getitem(value=binoms, index=$248build_tuple.11, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:37:57,916 on stmt: $252inplace_multiply.13 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=binom_prod, rhs=$250binary_subscr.12, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:37:57,916 on stmt: binom_prod = $252inplace_multiply.13
DEBUG 2022-02-14 16:37:57,916 on stmt: jump 228
DEBUG 2022-02-14 16:37:57,916 ==== SSA block rewrite pass on 258
DEBUG 2022-02-14 16:37:57,916 Running <numba.core.ssa._FixSSAVars object at 0x7fa047704ee0>
DEBUG 2022-02-14 16:37:57,917 on stmt: bool260 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:37:57,917 on stmt: $260pred = call bool260(glynn, func=bool260, args=(Var(glynn, loop_hafnian_batch.py:20),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:37:57,917 on stmt: branch $260pred, 264, 278
DEBUG 2022-02-14 16:37:57,917 ==== SSA block rewrite pass on 264
DEBUG 2022-02-14 16:37:57,917 Running <numba.core.ssa._FixSSAVars object at 0x7fa047704ee0>
DEBUG 2022-02-14 16:37:57,917 on stmt: $const264.1 = const(int, 2)
DEBUG 2022-02-14 16:37:57,917 on stmt: $268binary_multiply.3 = $const264.1 * kept_edges
DEBUG 2022-02-14 16:37:57,917 on stmt: delta = $268binary_multiply.3 - edge_reps
DEBUG 2022-02-14 16:37:57,917 on stmt: jump 282
DEBUG 2022-02-14 16:37:57,917 ==== SSA block rewrite pass on 278
DEBUG 2022-02-14 16:37:57,917 Running <numba.core.ssa._FixSSAVars object at 0x7fa047704ee0>
DEBUG 2022-02-14 16:37:57,917 on stmt: delta = kept_edges
DEBUG 2022-02-14 16:37:57,917 on stmt: jump 282
DEBUG 2022-02-14 16:37:57,917 ==== SSA block rewrite pass on 282
DEBUG 2022-02-14 16:37:57,917 Running <numba.core.ssa._FixSSAVars object at 0x7fa047704ee0>
DEBUG 2022-02-14 16:37:57,917 on stmt: $282load_global.1 = global(get_submatrices: CPUDispatcher(<function get_submatrices at 0x7fa047ebed30>))
DEBUG 2022-02-14 16:37:57,917 on stmt: $292call_function.6 = call $282load_global.1(delta, A, D, oddV, func=$282load_global.1, args=[Var(delta, loop_hafnian_batch.py:47), Var(A, loop_hafnian_batch.py:20), Var(D, loop_hafnian_batch.py:20), Var(oddV, loop_hafnian_batch.py:21)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:37:57,917 on stmt: $294unpack_sequence.11 = exhaust_iter(value=$292call_function.6, count=4)
DEBUG 2022-02-14 16:37:57,918 on stmt: $294unpack_sequence.7 = static_getitem(value=$294unpack_sequence.11, index=0, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:37:57,918 on stmt: $294unpack_sequence.8 = static_getitem(value=$294unpack_sequence.11, index=1, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:37:57,918 on stmt: $294unpack_sequence.9 = static_getitem(value=$294unpack_sequence.11, index=2, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:37:57,918 on stmt: $294unpack_sequence.10 = static_getitem(value=$294unpack_sequence.11, index=3, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:37:57,918 on stmt: AX_S = $294unpack_sequence.7
DEBUG 2022-02-14 16:37:57,918 on stmt: XD_S = $294unpack_sequence.8
DEBUG 2022-02-14 16:37:57,918 on stmt: D_S = $294unpack_sequence.9
DEBUG 2022-02-14 16:37:57,918 on stmt: oddVX_S = $294unpack_sequence.10
DEBUG 2022-02-14 16:37:57,918 on stmt: $304load_global.12 = global(eigvals: CPUDispatcher(<function eigvals at 0x7fa047e5d430>))
DEBUG 2022-02-14 16:37:57,918 on stmt: E = call $304load_global.12(AX_S, func=$304load_global.12, args=[Var(AX_S, loop_hafnian_batch.py:51)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:37:57,918 on stmt: $312load_global.15 = global(f_loop: CPUDispatcher(<function f_loop at 0x7fa047ebe9d0>))
DEBUG 2022-02-14 16:37:57,918 on stmt: f_even = call $312load_global.15(E, AX_S, XD_S, D_S, N_max, func=$312load_global.15, args=[Var(E, loop_hafnian_batch.py:53), Var(AX_S, loop_hafnian_batch.py:51), Var(XD_S, loop_hafnian_batch.py:51), Var(D_S, loop_hafnian_batch.py:51), Var(N_max, loop_hafnian_batch.py:26)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:37:57,918 on stmt: $328load_global.22 = global(f_loop_odd: CPUDispatcher(<function f_loop_odd at 0x7fa047ebeb80>))
DEBUG 2022-02-14 16:37:57,918 on stmt: f_odd = call $328load_global.22(E, AX_S, XD_S, D_S, N_max, oddloop, oddVX_S, func=$328load_global.22, args=[Var(E, loop_hafnian_batch.py:53), Var(AX_S, loop_hafnian_batch.py:51), Var(XD_S, loop_hafnian_batch.py:51), Var(D_S, loop_hafnian_batch.py:51), Var(N_max, loop_hafnian_batch.py:26), Var(oddloop, loop_hafnian_batch.py:20), Var(oddVX_S, loop_hafnian_batch.py:51)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:37:57,918 on stmt: $348load_global.31 = global(range: <class 'range'>)
DEBUG 2022-02-14 16:37:57,918 on stmt: $const350.32 = const(int, 2)
DEBUG 2022-02-14 16:37:57,918 on stmt: $const354.34 = const(int, 0)
DEBUG 2022-02-14 16:37:57,918 on stmt: $356binary_subscr.35 = static_getitem(value=kept_edges, index=0, index_var=$const354.34, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:37:57,919 on stmt: $358binary_multiply.36 = $const350.32 * $356binary_subscr.35
DEBUG 2022-02-14 16:37:57,919 on stmt: $const360.37 = const(int, 2)
DEBUG 2022-02-14 16:37:57,919 on stmt: $364binary_multiply.39 = $const360.37 * batch_max
DEBUG 2022-02-14 16:37:57,919 on stmt: $368binary_add.41 = $364binary_multiply.39 + odd_cutoff
DEBUG 2022-02-14 16:37:57,919 on stmt: $const370.42 = const(int, 1)
DEBUG 2022-02-14 16:37:57,919 on stmt: $372binary_add.43 = $368binary_add.41 + $const370.42
DEBUG 2022-02-14 16:37:57,919 on stmt: $374call_function.44 = call $348load_global.31($358binary_multiply.36, $372binary_add.43, func=$348load_global.31, args=[Var($358binary_multiply.36, loop_hafnian_batch.py:58), Var($372binary_add.43, loop_hafnian_batch.py:58)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:37:57,919 on stmt: $376get_iter.45 = getiter(value=$374call_function.44)
DEBUG 2022-02-14 16:37:57,919 on stmt: $phi378.1 = $376get_iter.45
DEBUG 2022-02-14 16:37:57,919 on stmt: jump 378
DEBUG 2022-02-14 16:37:57,919 ==== SSA block rewrite pass on 378
DEBUG 2022-02-14 16:37:57,919 Running <numba.core.ssa._FixSSAVars object at 0x7fa047704ee0>
DEBUG 2022-02-14 16:37:57,919 on stmt: $378for_iter.2 = iternext(value=$phi378.1)
DEBUG 2022-02-14 16:37:57,919 on stmt: $378for_iter.3 = pair_first(value=$378for_iter.2)
DEBUG 2022-02-14 16:37:57,919 on stmt: $378for_iter.4 = pair_second(value=$378for_iter.2)
DEBUG 2022-02-14 16:37:57,919 on stmt: $phi380.2 = $378for_iter.3
DEBUG 2022-02-14 16:37:57,920 on stmt: branch $378for_iter.4, 380, 510
DEBUG 2022-02-14 16:37:57,920 ==== SSA block rewrite pass on 380
DEBUG 2022-02-14 16:37:57,920 Running <numba.core.ssa._FixSSAVars object at 0x7fa047704ee0>
DEBUG 2022-02-14 16:37:57,920 on stmt: N_det = $phi380.2
DEBUG 2022-02-14 16:37:57,920 on stmt: N = N_fixed + N_det
DEBUG 2022-02-14 16:37:57,920 on stmt: $const390.6 = const(float, -1.0)
DEBUG 2022-02-14 16:37:57,920 on stmt: $const394.8 = const(int, 2)
DEBUG 2022-02-14 16:37:57,920 on stmt: $396binary_floor_divide.9 = N // $const394.8
DEBUG 2022-02-14 16:37:57,920 on stmt: $400binary_subtract.11 = $396binary_floor_divide.9 - edges_sum
DEBUG 2022-02-14 16:37:57,920 on stmt: plus_minus = $const390.6 ** $400binary_subtract.11
DEBUG 2022-02-14 16:37:57,920 on stmt: $const410.15 = const(int, 2)
DEBUG 2022-02-14 16:37:57,920 on stmt: $412binary_floor_divide.16 = N_det // $const410.15
DEBUG 2022-02-14 16:37:57,920 on stmt: $const416.18 = const(int, 0)
DEBUG 2022-02-14 16:37:57,920 on stmt: $418binary_subscr.19 = static_getitem(value=kept_edges, index=0, index_var=$const416.18, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:37:57,920 on stmt: $420build_tuple.20 = build_tuple(items=[Var($412binary_floor_divide.16, loop_hafnian_batch.py:62), Var($418binary_subscr.19, loop_hafnian_batch.py:62)])
DEBUG 2022-02-14 16:37:57,920 on stmt: $422binary_subscr.21 = getitem(value=binoms, index=$420build_tuple.20, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:37:57,920 on stmt: n_det_binom_prod = $422binary_subscr.21 * binom_prod
DEBUG 2022-02-14 16:37:57,920 on stmt: $const432.25 = const(int, 2)
DEBUG 2022-02-14 16:37:57,920 on stmt: $434binary_modulo.26 = N_det % $const432.25
DEBUG 2022-02-14 16:37:57,921 on stmt: $const436.27 = const(int, 0)
DEBUG 2022-02-14 16:37:57,921 on stmt: $438compare_op.28 = $434binary_modulo.26 == $const436.27
DEBUG 2022-02-14 16:37:57,921 on stmt: bool440 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:37:57,921 on stmt: $440pred = call bool440($438compare_op.28, func=bool440, args=(Var($438compare_op.28, loop_hafnian_batch.py:64),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:37:57,921 on stmt: branch $440pred, 444, 478
DEBUG 2022-02-14 16:37:57,921 ==== SSA block rewrite pass on 444
DEBUG 2022-02-14 16:37:57,921 Running <numba.core.ssa._FixSSAVars object at 0x7fa047704ee0>
DEBUG 2022-02-14 16:37:57,921 on stmt: $450binary_subscr.6 = getitem(value=Hnew, index=N_det, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:37:57,921 on stmt: $456binary_multiply.9 = n_det_binom_prod * plus_minus
DEBUG 2022-02-14 16:37:57,921 on stmt: $const462.12 = const(int, 2)
DEBUG 2022-02-14 16:37:57,921 on stmt: $464binary_floor_divide.13 = N // $const462.12
DEBUG 2022-02-14 16:37:57,921 on stmt: $466binary_subscr.14 = getitem(value=f_even, index=$464binary_floor_divide.13, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:37:57,921 on stmt: $468binary_multiply.15 = $456binary_multiply.9 * $466binary_subscr.14
DEBUG 2022-02-14 16:37:57,921 on stmt: $470inplace_add.16 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$450binary_subscr.6, rhs=$468binary_multiply.15, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:37:57,921 on stmt: Hnew[N_det] = $470inplace_add.16
DEBUG 2022-02-14 16:37:57,921 on stmt: jump 506
DEBUG 2022-02-14 16:37:57,921 ==== SSA block rewrite pass on 478
DEBUG 2022-02-14 16:37:57,921 Running <numba.core.ssa._FixSSAVars object at 0x7fa047704ee0>
DEBUG 2022-02-14 16:37:57,921 on stmt: $484binary_subscr.6 = getitem(value=Hnew, index=N_det, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:37:57,922 on stmt: $490binary_multiply.9 = n_det_binom_prod * plus_minus
DEBUG 2022-02-14 16:37:57,922 on stmt: $496binary_subscr.12 = getitem(value=f_odd, index=N, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:37:57,922 on stmt: $498binary_multiply.13 = $490binary_multiply.9 * $496binary_subscr.12
DEBUG 2022-02-14 16:37:57,922 on stmt: $500inplace_add.14 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$484binary_subscr.6, rhs=$498binary_multiply.13, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:37:57,922 on stmt: Hnew[N_det] = $500inplace_add.14
DEBUG 2022-02-14 16:37:57,922 on stmt: jump 506
DEBUG 2022-02-14 16:37:57,922 ==== SSA block rewrite pass on 506
DEBUG 2022-02-14 16:37:57,922 Running <numba.core.ssa._FixSSAVars object at 0x7fa047704ee0>
DEBUG 2022-02-14 16:37:57,922 on stmt: jump 378
DEBUG 2022-02-14 16:37:57,922 ==== SSA block rewrite pass on 510
DEBUG 2022-02-14 16:37:57,922 Running <numba.core.ssa._FixSSAVars object at 0x7fa047704ee0>
DEBUG 2022-02-14 16:37:57,922 on stmt: $514inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=H_batch, rhs=Hnew, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:37:57,922 find_def var='H_batch' stmt=$514inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=H_batch, rhs=Hnew, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:37:57,922 find_def_from_top label 510
DEBUG 2022-02-14 16:37:57,922 idom 378 from label 510
DEBUG 2022-02-14 16:37:57,922 find_def_from_bottom label 378
DEBUG 2022-02-14 16:37:57,922 find_def_from_top label 378
DEBUG 2022-02-14 16:37:57,922 idom 282 from label 378
DEBUG 2022-02-14 16:37:57,922 find_def_from_bottom label 282
DEBUG 2022-02-14 16:37:57,922 find_def_from_top label 282
DEBUG 2022-02-14 16:37:57,923 idom 258 from label 282
DEBUG 2022-02-14 16:37:57,923 find_def_from_bottom label 258
DEBUG 2022-02-14 16:37:57,923 find_def_from_top label 258
DEBUG 2022-02-14 16:37:57,923 idom 228 from label 258
DEBUG 2022-02-14 16:37:57,923 find_def_from_bottom label 228
DEBUG 2022-02-14 16:37:57,923 find_def_from_top label 228
DEBUG 2022-02-14 16:37:57,923 idom 162 from label 228
DEBUG 2022-02-14 16:37:57,923 find_def_from_bottom label 162
DEBUG 2022-02-14 16:37:57,923 find_def_from_top label 162
DEBUG 2022-02-14 16:37:57,923 idom 158 from label 162
DEBUG 2022-02-14 16:37:57,923 find_def_from_bottom label 158
DEBUG 2022-02-14 16:37:57,923 find_def_from_top label 158
DEBUG 2022-02-14 16:37:57,923 insert phi node H_batch.2 = phi(incoming_values=[], incoming_blocks=[]) at 158
DEBUG 2022-02-14 16:37:57,923 find_def_from_bottom label 0
DEBUG 2022-02-14 16:37:57,923 incoming_def H_batch = call $122load_attr.52($136binary_add.59, func=$122load_attr.52, args=[Var($136binary_add.59, loop_hafnian_batch.py:34)], kws=[('dtype', Var($140load_attr.61, loop_hafnian_batch.py:34))], vararg=None, target=None)
DEBUG 2022-02-14 16:37:57,923 find_def_from_bottom label 510
DEBUG 2022-02-14 16:37:57,923 incoming_def H_batch.1 = $514inplace_add.3
DEBUG 2022-02-14 16:37:57,923 replaced with: $514inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=H_batch.2, rhs=Hnew, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:37:57,923 on stmt: H_batch.1 = $514inplace_add.3
DEBUG 2022-02-14 16:37:57,923 on stmt: jump 158
DEBUG 2022-02-14 16:37:57,923 ==== SSA block rewrite pass on 520
DEBUG 2022-02-14 16:37:57,924 Running <numba.core.ssa._FixSSAVars object at 0x7fa047704ee0>
DEBUG 2022-02-14 16:37:57,924 on stmt: bool522 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:37:57,924 on stmt: $522pred = call bool522(glynn, func=bool522, args=(Var(glynn, loop_hafnian_batch.py:20),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:37:57,924 on stmt: branch $522pred, 526, 580
DEBUG 2022-02-14 16:37:57,924 ==== SSA block rewrite pass on 526
DEBUG 2022-02-14 16:37:57,924 Running <numba.core.ssa._FixSSAVars object at 0x7fa047704ee0>
DEBUG 2022-02-14 16:37:57,924 on stmt: $526load_global.0 = global(range: <class 'range'>)
DEBUG 2022-02-14 16:37:57,924 on stmt: $530load_attr.2 = getattr(value=H_batch, attr=shape)
DEBUG 2022-02-14 16:37:57,924 find_def var='H_batch' stmt=$530load_attr.2 = getattr(value=H_batch, attr=shape)
DEBUG 2022-02-14 16:37:57,924 find_def_from_top label 526
DEBUG 2022-02-14 16:37:57,924 idom 520 from label 526
DEBUG 2022-02-14 16:37:57,924 find_def_from_bottom label 520
DEBUG 2022-02-14 16:37:57,924 find_def_from_top label 520
DEBUG 2022-02-14 16:37:57,924 idom 158 from label 520
DEBUG 2022-02-14 16:37:57,924 find_def_from_bottom label 158
DEBUG 2022-02-14 16:37:57,924 replaced with: $530load_attr.2 = getattr(value=H_batch.2, attr=shape)
DEBUG 2022-02-14 16:37:57,924 on stmt: $const532.3 = const(int, 0)
DEBUG 2022-02-14 16:37:57,924 on stmt: $534binary_subscr.4 = static_getitem(value=$530load_attr.2, index=0, index_var=$const532.3, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:37:57,924 on stmt: $536call_function.5 = call $526load_global.0($534binary_subscr.4, func=$526load_global.0, args=[Var($534binary_subscr.4, loop_hafnian_batch.py:72)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:37:57,924 on stmt: $538get_iter.6 = getiter(value=$536call_function.5)
DEBUG 2022-02-14 16:37:57,925 on stmt: $phi540.0 = $538get_iter.6
DEBUG 2022-02-14 16:37:57,925 on stmt: jump 540
DEBUG 2022-02-14 16:37:57,925 ==== SSA block rewrite pass on 540
DEBUG 2022-02-14 16:37:57,925 Running <numba.core.ssa._FixSSAVars object at 0x7fa047704ee0>
DEBUG 2022-02-14 16:37:57,925 on stmt: $540for_iter.1 = iternext(value=$phi540.0)
DEBUG 2022-02-14 16:37:57,925 on stmt: $540for_iter.2 = pair_first(value=$540for_iter.1)
DEBUG 2022-02-14 16:37:57,925 on stmt: $540for_iter.3 = pair_second(value=$540for_iter.1)
DEBUG 2022-02-14 16:37:57,925 on stmt: $phi542.1 = $540for_iter.2
DEBUG 2022-02-14 16:37:57,925 on stmt: branch $540for_iter.3, 542, 580
DEBUG 2022-02-14 16:37:57,925 ==== SSA block rewrite pass on 542
DEBUG 2022-02-14 16:37:57,925 Running <numba.core.ssa._FixSSAVars object at 0x7fa047704ee0>
DEBUG 2022-02-14 16:37:57,925 on stmt: j.1 = $phi542.1
DEBUG 2022-02-14 16:37:57,925 on stmt: x = N_fixed + j.1
DEBUG 2022-02-14 16:37:57,925 on stmt: $558binary_subscr.9 = getitem(value=H_batch, index=j.1, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:37:57,925 find_def var='H_batch' stmt=$558binary_subscr.9 = getitem(value=H_batch, index=j.1, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:37:57,925 find_def_from_top label 542
DEBUG 2022-02-14 16:37:57,925 idom 540 from label 542
DEBUG 2022-02-14 16:37:57,925 find_def_from_bottom label 540
DEBUG 2022-02-14 16:37:57,925 find_def_from_top label 540
DEBUG 2022-02-14 16:37:57,925 idom 526 from label 540
DEBUG 2022-02-14 16:37:57,925 find_def_from_bottom label 526
DEBUG 2022-02-14 16:37:57,926 find_def_from_top label 526
DEBUG 2022-02-14 16:37:57,926 idom 520 from label 526
DEBUG 2022-02-14 16:37:57,926 find_def_from_bottom label 520
DEBUG 2022-02-14 16:37:57,926 find_def_from_top label 520
DEBUG 2022-02-14 16:37:57,926 idom 158 from label 520
DEBUG 2022-02-14 16:37:57,926 find_def_from_bottom label 158
DEBUG 2022-02-14 16:37:57,926 replaced with: $558binary_subscr.9 = getitem(value=H_batch.2, index=j.1, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:37:57,926 on stmt: $const560.10 = const(float, 0.5)
DEBUG 2022-02-14 16:37:57,926 on stmt: $const564.12 = const(int, 2)
DEBUG 2022-02-14 16:37:57,926 on stmt: $566binary_floor_divide.13 = x // $const564.12
DEBUG 2022-02-14 16:37:57,926 on stmt: $568binary_power.14 = $const560.10 ** $566binary_floor_divide.13
DEBUG 2022-02-14 16:37:57,926 on stmt: $570inplace_multiply.15 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=$558binary_subscr.9, rhs=$568binary_power.14, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:37:57,926 on stmt: H_batch[j.1] = $570inplace_multiply.15
DEBUG 2022-02-14 16:37:57,926 find_def var='H_batch' stmt=H_batch[j.1] = $570inplace_multiply.15
DEBUG 2022-02-14 16:37:57,926 find_def_from_top label 542
DEBUG 2022-02-14 16:37:57,926 idom 540 from label 542
DEBUG 2022-02-14 16:37:57,926 find_def_from_bottom label 540
DEBUG 2022-02-14 16:37:57,926 find_def_from_top label 540
DEBUG 2022-02-14 16:37:57,926 idom 526 from label 540
DEBUG 2022-02-14 16:37:57,926 find_def_from_bottom label 526
DEBUG 2022-02-14 16:37:57,926 find_def_from_top label 526
DEBUG 2022-02-14 16:37:57,927 idom 520 from label 526
DEBUG 2022-02-14 16:37:57,927 find_def_from_bottom label 520
DEBUG 2022-02-14 16:37:57,927 find_def_from_top label 520
DEBUG 2022-02-14 16:37:57,927 idom 158 from label 520
DEBUG 2022-02-14 16:37:57,927 find_def_from_bottom label 158
DEBUG 2022-02-14 16:37:57,927 replaced with: H_batch.2[j.1] = $570inplace_multiply.15
DEBUG 2022-02-14 16:37:57,927 on stmt: jump 540
DEBUG 2022-02-14 16:37:57,927 ==== SSA block rewrite pass on 580
DEBUG 2022-02-14 16:37:57,927 Running <numba.core.ssa._FixSSAVars object at 0x7fa047704ee0>
DEBUG 2022-02-14 16:37:57,927 on stmt: $582return_value.1 = cast(value=H_batch)
DEBUG 2022-02-14 16:37:57,927 find_def var='H_batch' stmt=$582return_value.1 = cast(value=H_batch)
DEBUG 2022-02-14 16:37:57,927 find_def_from_top label 580
DEBUG 2022-02-14 16:37:57,927 idom 520 from label 580
DEBUG 2022-02-14 16:37:57,927 find_def_from_bottom label 520
DEBUG 2022-02-14 16:37:57,927 find_def_from_top label 520
DEBUG 2022-02-14 16:37:57,927 idom 158 from label 520
DEBUG 2022-02-14 16:37:57,927 find_def_from_bottom label 158
DEBUG 2022-02-14 16:37:57,927 replaced with: $582return_value.1 = cast(value=H_batch.2)
DEBUG 2022-02-14 16:37:57,927 on stmt: return $582return_value.1
DEBUG 2022-02-14 16:37:57,927 Fix SSA violator on var binom_prod
DEBUG 2022-02-14 16:37:57,927 ==== SSA block rewrite pass on 0
DEBUG 2022-02-14 16:37:57,928 Running <numba.core.ssa._FreshVarHandler object at 0x7fa047758ee0>
DEBUG 2022-02-14 16:37:57,928 on stmt: A = arg(0, name=A)
DEBUG 2022-02-14 16:37:57,928 on stmt: D = arg(1, name=D)
DEBUG 2022-02-14 16:37:57,928 on stmt: fixed_edge_reps = arg(2, name=fixed_edge_reps)
DEBUG 2022-02-14 16:37:57,928 on stmt: batch_max = arg(3, name=batch_max)
DEBUG 2022-02-14 16:37:57,928 on stmt: odd_cutoff = arg(4, name=odd_cutoff)
DEBUG 2022-02-14 16:37:57,928 on stmt: glynn = arg(5, name=glynn)
DEBUG 2022-02-14 16:37:57,928 on stmt: $const4.1 = const(int, 0)
DEBUG 2022-02-14 16:37:57,928 on stmt: oddloop = static_getitem(value=D, index=0, index_var=$const4.1, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:37:57,928 on stmt: $const12.4 = const(int, 0)
DEBUG 2022-02-14 16:37:57,928 on stmt: $const14.5 = const(NoneType, None)
DEBUG 2022-02-14 16:37:57,928 on stmt: $const16.6 = const(NoneType, None)
DEBUG 2022-02-14 16:37:57,928 on stmt: $18build_slice.7 = global(slice: <class 'slice'>)
DEBUG 2022-02-14 16:37:57,928 on stmt: $18build_slice.8 = call $18build_slice.7($const14.5, $const16.6, func=$18build_slice.7, args=(Var($const14.5, loop_hafnian_batch.py:21), Var($const16.6, loop_hafnian_batch.py:21)), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:37:57,928 on stmt: $20build_tuple.9 = build_tuple(items=[Var($const12.4, loop_hafnian_batch.py:21), Var($18build_slice.8, loop_hafnian_batch.py:21)])
DEBUG 2022-02-14 16:37:57,928 on stmt: oddV = static_getitem(value=A, index=(0, slice(None, None, None)), index_var=$20build_tuple.9, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:37:57,928 on stmt: $28load_attr.12 = getattr(value=A, attr=shape)
DEBUG 2022-02-14 16:37:57,928 on stmt: $const30.13 = const(int, 0)
DEBUG 2022-02-14 16:37:57,928 on stmt: n = static_getitem(value=$28load_attr.12, index=0, index_var=$const30.13, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:37:57,928 on stmt: $const36.15 = const(int, 2)
DEBUG 2022-02-14 16:37:57,929 on stmt: $40load_method.17 = getattr(value=fixed_edge_reps, attr=sum)
DEBUG 2022-02-14 16:37:57,929 on stmt: $42call_method.18 = call $40load_method.17(func=$40load_method.17, args=[], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:37:57,929 on stmt: N_fixed = $const36.15 * $42call_method.18
DEBUG 2022-02-14 16:37:57,929 on stmt: $const50.21 = const(int, 2)
DEBUG 2022-02-14 16:37:57,929 on stmt: $54binary_multiply.23 = $const50.21 * batch_max
DEBUG 2022-02-14 16:37:57,929 on stmt: $56binary_add.24 = N_fixed + $54binary_multiply.23
DEBUG 2022-02-14 16:37:57,929 on stmt: N_max = $56binary_add.24 + odd_cutoff
DEBUG 2022-02-14 16:37:57,929 on stmt: $64load_global.27 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:37:57,929 on stmt: $66load_method.28 = getattr(value=$64load_global.27, attr=concatenate)
DEBUG 2022-02-14 16:37:57,929 on stmt: $68load_global.29 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:37:57,929 on stmt: $70load_method.30 = getattr(value=$68load_global.29, attr=array)
DEBUG 2022-02-14 16:37:57,929 on stmt: $74build_list.32 = build_list(items=[Var(batch_max, loop_hafnian_batch.py:20)])
DEBUG 2022-02-14 16:37:57,929 on stmt: $76call_method.33 = call $70load_method.30($74build_list.32, func=$70load_method.30, args=[Var($74build_list.32, loop_hafnian_batch.py:28)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:37:57,929 on stmt: $80build_tuple.35 = build_tuple(items=[Var($76call_method.33, loop_hafnian_batch.py:28), Var(fixed_edge_reps, loop_hafnian_batch.py:20)])
DEBUG 2022-02-14 16:37:57,929 on stmt: edge_reps = call $66load_method.28($80build_tuple.35, func=$66load_method.28, args=[Var($80build_tuple.35, loop_hafnian_batch.py:28)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:37:57,929 on stmt: $86load_global.37 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:37:57,929 on stmt: $88load_method.38 = getattr(value=$86load_global.37, attr=prod)
DEBUG 2022-02-14 16:37:57,929 on stmt: $const92.40 = const(int, 1)
DEBUG 2022-02-14 16:37:57,929 on stmt: $94binary_add.41 = edge_reps + $const92.40
DEBUG 2022-02-14 16:37:57,930 on stmt: steps = call $88load_method.38($94binary_add.41, func=$88load_method.38, args=[Var($94binary_add.41, loop_hafnian_batch.py:29)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:37:57,930 on stmt: $102load_method.44 = getattr(value=edge_reps, attr=max)
DEBUG 2022-02-14 16:37:57,930 on stmt: $104call_method.45 = call $102load_method.44(func=$102load_method.44, args=[], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:37:57,930 on stmt: max_binom = $104call_method.45 + odd_cutoff
DEBUG 2022-02-14 16:37:57,930 on stmt: $112load_global.48 = global(precompute_binoms: CPUDispatcher(<function precompute_binoms at 0x7fa047ebe310>))
DEBUG 2022-02-14 16:37:57,930 on stmt: binoms = call $112load_global.48(max_binom, func=$112load_global.48, args=[Var(max_binom, loop_hafnian_batch.py:31)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:37:57,930 on stmt: $120load_global.51 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:37:57,930 on stmt: $122load_attr.52 = getattr(value=$120load_global.51, attr=zeros)
DEBUG 2022-02-14 16:37:57,930 on stmt: $const124.53 = const(int, 2)
DEBUG 2022-02-14 16:37:57,930 on stmt: $128binary_multiply.55 = $const124.53 * batch_max
DEBUG 2022-02-14 16:37:57,930 on stmt: $132binary_add.57 = $128binary_multiply.55 + odd_cutoff
DEBUG 2022-02-14 16:37:57,930 on stmt: $const134.58 = const(int, 1)
DEBUG 2022-02-14 16:37:57,930 on stmt: $136binary_add.59 = $132binary_add.57 + $const134.58
DEBUG 2022-02-14 16:37:57,930 on stmt: $138load_global.60 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:37:57,930 on stmt: $140load_attr.61 = getattr(value=$138load_global.60, attr=complex128)
DEBUG 2022-02-14 16:37:57,930 on stmt: H_batch = call $122load_attr.52($136binary_add.59, func=$122load_attr.52, args=[Var($136binary_add.59, loop_hafnian_batch.py:34)], kws=[('dtype', Var($140load_attr.61, loop_hafnian_batch.py:34))], vararg=None, target=None)
DEBUG 2022-02-14 16:37:57,930 on stmt: $148load_global.64 = global(numba: <module 'numba' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numba/__init__.py'>)
DEBUG 2022-02-14 16:37:57,930 on stmt: $150load_method.65 = getattr(value=$148load_global.64, attr=prange)
DEBUG 2022-02-14 16:37:57,931 on stmt: $154call_method.67 = call $150load_method.65(steps, func=$150load_method.65, args=[Var(steps, loop_hafnian_batch.py:29)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:37:57,931 on stmt: $156get_iter.68 = getiter(value=$154call_method.67)
DEBUG 2022-02-14 16:37:57,931 on stmt: $phi158.0 = $156get_iter.68
DEBUG 2022-02-14 16:37:57,931 on stmt: jump 158
DEBUG 2022-02-14 16:37:57,931 ==== SSA block rewrite pass on 158
DEBUG 2022-02-14 16:37:57,931 Running <numba.core.ssa._FreshVarHandler object at 0x7fa047758ee0>
DEBUG 2022-02-14 16:37:57,931 on stmt: H_batch.2 = phi(incoming_values=[Var(H_batch, loop_hafnian_batch.py:34), Var(H_batch.1, loop_hafnian_batch.py:69)], incoming_blocks=[0, 510])
DEBUG 2022-02-14 16:37:57,931 on stmt: $158for_iter.1 = iternext(value=$phi158.0)
DEBUG 2022-02-14 16:37:57,931 on stmt: $158for_iter.2 = pair_first(value=$158for_iter.1)
DEBUG 2022-02-14 16:37:57,931 on stmt: $158for_iter.3 = pair_second(value=$158for_iter.1)
DEBUG 2022-02-14 16:37:57,931 on stmt: $phi162.1 = $158for_iter.2
DEBUG 2022-02-14 16:37:57,931 on stmt: branch $158for_iter.3, 162, 520
DEBUG 2022-02-14 16:37:57,931 ==== SSA block rewrite pass on 162
DEBUG 2022-02-14 16:37:57,931 Running <numba.core.ssa._FreshVarHandler object at 0x7fa047758ee0>
DEBUG 2022-02-14 16:37:57,931 on stmt: j = $phi162.1
DEBUG 2022-02-14 16:37:57,931 on stmt: $164load_global.2 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:37:57,931 on stmt: $166load_attr.3 = getattr(value=$164load_global.2, attr=zeros)
DEBUG 2022-02-14 16:37:57,931 on stmt: $const168.4 = const(int, 2)
DEBUG 2022-02-14 16:37:57,931 on stmt: $172binary_multiply.6 = $const168.4 * batch_max
DEBUG 2022-02-14 16:37:57,931 on stmt: $176binary_add.8 = $172binary_multiply.6 + odd_cutoff
DEBUG 2022-02-14 16:37:57,932 on stmt: $const178.9 = const(int, 1)
DEBUG 2022-02-14 16:37:57,932 on stmt: $180binary_add.10 = $176binary_add.8 + $const178.9
DEBUG 2022-02-14 16:37:57,932 on stmt: $182load_global.11 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:37:57,932 on stmt: $184load_attr.12 = getattr(value=$182load_global.11, attr=complex128)
DEBUG 2022-02-14 16:37:57,932 on stmt: Hnew = call $166load_attr.3($180binary_add.10, func=$166load_attr.3, args=[Var($180binary_add.10, loop_hafnian_batch.py:37)], kws=[('dtype', Var($184load_attr.12, loop_hafnian_batch.py:37))], vararg=None, target=None)
DEBUG 2022-02-14 16:37:57,932 on stmt: $192load_global.15 = global(find_kept_edges: CPUDispatcher(<function find_kept_edges at 0x7fa047ebe790>))
DEBUG 2022-02-14 16:37:57,932 on stmt: kept_edges = call $192load_global.15(j, edge_reps, func=$192load_global.15, args=[Var(j, loop_hafnian_batch.py:35), Var(edge_reps, loop_hafnian_batch.py:28)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:37:57,932 on stmt: $204load_method.20 = getattr(value=kept_edges, attr=sum)
DEBUG 2022-02-14 16:37:57,932 on stmt: edges_sum = call $204load_method.20(func=$204load_method.20, args=[], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:37:57,932 on stmt: binom_prod = const(float, 1.0)
DEBUG 2022-02-14 16:37:57,932 first assign: binom_prod
DEBUG 2022-02-14 16:37:57,932 replaced with: binom_prod = const(float, 1.0)
DEBUG 2022-02-14 16:37:57,932 on stmt: $214load_global.23 = global(range: <class 'range'>)
DEBUG 2022-02-14 16:37:57,932 on stmt: $const216.24 = const(int, 1)
DEBUG 2022-02-14 16:37:57,932 on stmt: $const220.26 = const(int, 2)
DEBUG 2022-02-14 16:37:57,932 on stmt: $222binary_floor_divide.27 = n // $const220.26
DEBUG 2022-02-14 16:37:57,932 on stmt: $224call_function.28 = call $214load_global.23($const216.24, $222binary_floor_divide.27, func=$214load_global.23, args=[Var($const216.24, loop_hafnian_batch.py:43), Var($222binary_floor_divide.27, loop_hafnian_batch.py:43)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:37:57,933 on stmt: $226get_iter.29 = getiter(value=$224call_function.28)
DEBUG 2022-02-14 16:37:57,933 on stmt: $phi228.1 = $226get_iter.29
DEBUG 2022-02-14 16:37:57,933 on stmt: jump 228
DEBUG 2022-02-14 16:37:57,933 ==== SSA block rewrite pass on 228
DEBUG 2022-02-14 16:37:57,933 Running <numba.core.ssa._FreshVarHandler object at 0x7fa047758ee0>
DEBUG 2022-02-14 16:37:57,933 on stmt: $228for_iter.2 = iternext(value=$phi228.1)
DEBUG 2022-02-14 16:37:57,933 on stmt: $228for_iter.3 = pair_first(value=$228for_iter.2)
DEBUG 2022-02-14 16:37:57,933 on stmt: $228for_iter.4 = pair_second(value=$228for_iter.2)
DEBUG 2022-02-14 16:37:57,933 on stmt: $phi230.2 = $228for_iter.3
DEBUG 2022-02-14 16:37:57,933 on stmt: branch $228for_iter.4, 230, 258
DEBUG 2022-02-14 16:37:57,933 ==== SSA block rewrite pass on 230
DEBUG 2022-02-14 16:37:57,933 Running <numba.core.ssa._FreshVarHandler object at 0x7fa047758ee0>
DEBUG 2022-02-14 16:37:57,933 on stmt: i = $phi230.2
DEBUG 2022-02-14 16:37:57,933 on stmt: $240binary_subscr.7 = getitem(value=edge_reps, index=i, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:37:57,933 on stmt: $246binary_subscr.10 = getitem(value=kept_edges, index=i, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:37:57,933 on stmt: $248build_tuple.11 = build_tuple(items=[Var($240binary_subscr.7, loop_hafnian_batch.py:44), Var($246binary_subscr.10, loop_hafnian_batch.py:44)])
DEBUG 2022-02-14 16:37:57,933 on stmt: $250binary_subscr.12 = getitem(value=binoms, index=$248build_tuple.11, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:37:57,933 on stmt: $252inplace_multiply.13 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=binom_prod, rhs=$250binary_subscr.12, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:37:57,934 on stmt: binom_prod = $252inplace_multiply.13
DEBUG 2022-02-14 16:37:57,934 replaced with: binom_prod.1 = $252inplace_multiply.13
DEBUG 2022-02-14 16:37:57,934 on stmt: jump 228
DEBUG 2022-02-14 16:37:57,934 ==== SSA block rewrite pass on 258
DEBUG 2022-02-14 16:37:57,934 Running <numba.core.ssa._FreshVarHandler object at 0x7fa047758ee0>
DEBUG 2022-02-14 16:37:57,934 on stmt: bool260 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:37:57,934 on stmt: $260pred = call bool260(glynn, func=bool260, args=(Var(glynn, loop_hafnian_batch.py:20),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:37:57,934 on stmt: branch $260pred, 264, 278
DEBUG 2022-02-14 16:37:57,934 ==== SSA block rewrite pass on 264
DEBUG 2022-02-14 16:37:57,934 Running <numba.core.ssa._FreshVarHandler object at 0x7fa047758ee0>
DEBUG 2022-02-14 16:37:57,934 on stmt: $const264.1 = const(int, 2)
DEBUG 2022-02-14 16:37:57,934 on stmt: $268binary_multiply.3 = $const264.1 * kept_edges
DEBUG 2022-02-14 16:37:57,934 on stmt: delta = $268binary_multiply.3 - edge_reps
DEBUG 2022-02-14 16:37:57,934 on stmt: jump 282
DEBUG 2022-02-14 16:37:57,934 ==== SSA block rewrite pass on 278
DEBUG 2022-02-14 16:37:57,934 Running <numba.core.ssa._FreshVarHandler object at 0x7fa047758ee0>
DEBUG 2022-02-14 16:37:57,934 on stmt: delta = kept_edges
DEBUG 2022-02-14 16:37:57,934 on stmt: jump 282
DEBUG 2022-02-14 16:37:57,935 ==== SSA block rewrite pass on 282
DEBUG 2022-02-14 16:37:57,935 Running <numba.core.ssa._FreshVarHandler object at 0x7fa047758ee0>
DEBUG 2022-02-14 16:37:57,935 on stmt: $282load_global.1 = global(get_submatrices: CPUDispatcher(<function get_submatrices at 0x7fa047ebed30>))
DEBUG 2022-02-14 16:37:57,935 on stmt: $292call_function.6 = call $282load_global.1(delta, A, D, oddV, func=$282load_global.1, args=[Var(delta, loop_hafnian_batch.py:47), Var(A, loop_hafnian_batch.py:20), Var(D, loop_hafnian_batch.py:20), Var(oddV, loop_hafnian_batch.py:21)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:37:57,935 on stmt: $294unpack_sequence.11 = exhaust_iter(value=$292call_function.6, count=4)
DEBUG 2022-02-14 16:37:57,935 on stmt: $294unpack_sequence.7 = static_getitem(value=$294unpack_sequence.11, index=0, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:37:57,935 on stmt: $294unpack_sequence.8 = static_getitem(value=$294unpack_sequence.11, index=1, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:37:57,935 on stmt: $294unpack_sequence.9 = static_getitem(value=$294unpack_sequence.11, index=2, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:37:57,935 on stmt: $294unpack_sequence.10 = static_getitem(value=$294unpack_sequence.11, index=3, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:37:57,935 on stmt: AX_S = $294unpack_sequence.7
DEBUG 2022-02-14 16:37:57,935 on stmt: XD_S = $294unpack_sequence.8
DEBUG 2022-02-14 16:37:57,935 on stmt: D_S = $294unpack_sequence.9
DEBUG 2022-02-14 16:37:57,935 on stmt: oddVX_S = $294unpack_sequence.10
DEBUG 2022-02-14 16:37:57,935 on stmt: $304load_global.12 = global(eigvals: CPUDispatcher(<function eigvals at 0x7fa047e5d430>))
DEBUG 2022-02-14 16:37:57,935 on stmt: E = call $304load_global.12(AX_S, func=$304load_global.12, args=[Var(AX_S, loop_hafnian_batch.py:51)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:37:57,935 on stmt: $312load_global.15 = global(f_loop: CPUDispatcher(<function f_loop at 0x7fa047ebe9d0>))
DEBUG 2022-02-14 16:37:57,935 on stmt: f_even = call $312load_global.15(E, AX_S, XD_S, D_S, N_max, func=$312load_global.15, args=[Var(E, loop_hafnian_batch.py:53), Var(AX_S, loop_hafnian_batch.py:51), Var(XD_S, loop_hafnian_batch.py:51), Var(D_S, loop_hafnian_batch.py:51), Var(N_max, loop_hafnian_batch.py:26)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:37:57,935 on stmt: $328load_global.22 = global(f_loop_odd: CPUDispatcher(<function f_loop_odd at 0x7fa047ebeb80>))
DEBUG 2022-02-14 16:37:57,936 on stmt: f_odd = call $328load_global.22(E, AX_S, XD_S, D_S, N_max, oddloop, oddVX_S, func=$328load_global.22, args=[Var(E, loop_hafnian_batch.py:53), Var(AX_S, loop_hafnian_batch.py:51), Var(XD_S, loop_hafnian_batch.py:51), Var(D_S, loop_hafnian_batch.py:51), Var(N_max, loop_hafnian_batch.py:26), Var(oddloop, loop_hafnian_batch.py:20), Var(oddVX_S, loop_hafnian_batch.py:51)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:37:57,936 on stmt: $348load_global.31 = global(range: <class 'range'>)
DEBUG 2022-02-14 16:37:57,936 on stmt: $const350.32 = const(int, 2)
DEBUG 2022-02-14 16:37:57,936 on stmt: $const354.34 = const(int, 0)
DEBUG 2022-02-14 16:37:57,936 on stmt: $356binary_subscr.35 = static_getitem(value=kept_edges, index=0, index_var=$const354.34, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:37:57,936 on stmt: $358binary_multiply.36 = $const350.32 * $356binary_subscr.35
DEBUG 2022-02-14 16:37:57,936 on stmt: $const360.37 = const(int, 2)
DEBUG 2022-02-14 16:37:57,936 on stmt: $364binary_multiply.39 = $const360.37 * batch_max
DEBUG 2022-02-14 16:37:57,936 on stmt: $368binary_add.41 = $364binary_multiply.39 + odd_cutoff
DEBUG 2022-02-14 16:37:57,936 on stmt: $const370.42 = const(int, 1)
DEBUG 2022-02-14 16:37:57,936 on stmt: $372binary_add.43 = $368binary_add.41 + $const370.42
DEBUG 2022-02-14 16:37:57,936 on stmt: $374call_function.44 = call $348load_global.31($358binary_multiply.36, $372binary_add.43, func=$348load_global.31, args=[Var($358binary_multiply.36, loop_hafnian_batch.py:58), Var($372binary_add.43, loop_hafnian_batch.py:58)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:37:57,936 on stmt: $376get_iter.45 = getiter(value=$374call_function.44)
DEBUG 2022-02-14 16:37:57,936 on stmt: $phi378.1 = $376get_iter.45
DEBUG 2022-02-14 16:37:57,936 on stmt: jump 378
DEBUG 2022-02-14 16:37:57,936 ==== SSA block rewrite pass on 378
DEBUG 2022-02-14 16:37:57,936 Running <numba.core.ssa._FreshVarHandler object at 0x7fa047758ee0>
DEBUG 2022-02-14 16:37:57,936 on stmt: $378for_iter.2 = iternext(value=$phi378.1)
DEBUG 2022-02-14 16:37:57,937 on stmt: $378for_iter.3 = pair_first(value=$378for_iter.2)
DEBUG 2022-02-14 16:37:57,937 on stmt: $378for_iter.4 = pair_second(value=$378for_iter.2)
DEBUG 2022-02-14 16:37:57,937 on stmt: $phi380.2 = $378for_iter.3
DEBUG 2022-02-14 16:37:57,937 on stmt: branch $378for_iter.4, 380, 510
DEBUG 2022-02-14 16:37:57,937 ==== SSA block rewrite pass on 380
DEBUG 2022-02-14 16:37:57,937 Running <numba.core.ssa._FreshVarHandler object at 0x7fa047758ee0>
DEBUG 2022-02-14 16:37:57,937 on stmt: N_det = $phi380.2
DEBUG 2022-02-14 16:37:57,937 on stmt: N = N_fixed + N_det
DEBUG 2022-02-14 16:37:57,937 on stmt: $const390.6 = const(float, -1.0)
DEBUG 2022-02-14 16:37:57,937 on stmt: $const394.8 = const(int, 2)
DEBUG 2022-02-14 16:37:57,937 on stmt: $396binary_floor_divide.9 = N // $const394.8
DEBUG 2022-02-14 16:37:57,937 on stmt: $400binary_subtract.11 = $396binary_floor_divide.9 - edges_sum
DEBUG 2022-02-14 16:37:57,937 on stmt: plus_minus = $const390.6 ** $400binary_subtract.11
DEBUG 2022-02-14 16:37:57,937 on stmt: $const410.15 = const(int, 2)
DEBUG 2022-02-14 16:37:57,937 on stmt: $412binary_floor_divide.16 = N_det // $const410.15
DEBUG 2022-02-14 16:37:57,937 on stmt: $const416.18 = const(int, 0)
DEBUG 2022-02-14 16:37:57,937 on stmt: $418binary_subscr.19 = static_getitem(value=kept_edges, index=0, index_var=$const416.18, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:37:57,937 on stmt: $420build_tuple.20 = build_tuple(items=[Var($412binary_floor_divide.16, loop_hafnian_batch.py:62), Var($418binary_subscr.19, loop_hafnian_batch.py:62)])
DEBUG 2022-02-14 16:37:57,937 on stmt: $422binary_subscr.21 = getitem(value=binoms, index=$420build_tuple.20, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:37:57,937 on stmt: n_det_binom_prod = $422binary_subscr.21 * binom_prod
DEBUG 2022-02-14 16:37:57,938 on stmt: $const432.25 = const(int, 2)
DEBUG 2022-02-14 16:37:57,938 on stmt: $434binary_modulo.26 = N_det % $const432.25
DEBUG 2022-02-14 16:37:57,938 on stmt: $const436.27 = const(int, 0)
DEBUG 2022-02-14 16:37:57,938 on stmt: $438compare_op.28 = $434binary_modulo.26 == $const436.27
DEBUG 2022-02-14 16:37:57,938 on stmt: bool440 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:37:57,938 on stmt: $440pred = call bool440($438compare_op.28, func=bool440, args=(Var($438compare_op.28, loop_hafnian_batch.py:64),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:37:57,938 on stmt: branch $440pred, 444, 478
DEBUG 2022-02-14 16:37:57,938 ==== SSA block rewrite pass on 444
DEBUG 2022-02-14 16:37:57,938 Running <numba.core.ssa._FreshVarHandler object at 0x7fa047758ee0>
DEBUG 2022-02-14 16:37:57,938 on stmt: $450binary_subscr.6 = getitem(value=Hnew, index=N_det, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:37:57,938 on stmt: $456binary_multiply.9 = n_det_binom_prod * plus_minus
DEBUG 2022-02-14 16:37:57,938 on stmt: $const462.12 = const(int, 2)
DEBUG 2022-02-14 16:37:57,938 on stmt: $464binary_floor_divide.13 = N // $const462.12
DEBUG 2022-02-14 16:37:57,938 on stmt: $466binary_subscr.14 = getitem(value=f_even, index=$464binary_floor_divide.13, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:37:57,938 on stmt: $468binary_multiply.15 = $456binary_multiply.9 * $466binary_subscr.14
DEBUG 2022-02-14 16:37:57,938 on stmt: $470inplace_add.16 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$450binary_subscr.6, rhs=$468binary_multiply.15, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:37:57,938 on stmt: Hnew[N_det] = $470inplace_add.16
DEBUG 2022-02-14 16:37:57,938 on stmt: jump 506
DEBUG 2022-02-14 16:37:57,938 ==== SSA block rewrite pass on 478
DEBUG 2022-02-14 16:37:57,939 Running <numba.core.ssa._FreshVarHandler object at 0x7fa047758ee0>
DEBUG 2022-02-14 16:37:57,939 on stmt: $484binary_subscr.6 = getitem(value=Hnew, index=N_det, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:37:57,939 on stmt: $490binary_multiply.9 = n_det_binom_prod * plus_minus
DEBUG 2022-02-14 16:37:57,939 on stmt: $496binary_subscr.12 = getitem(value=f_odd, index=N, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:37:57,939 on stmt: $498binary_multiply.13 = $490binary_multiply.9 * $496binary_subscr.12
DEBUG 2022-02-14 16:37:57,939 on stmt: $500inplace_add.14 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$484binary_subscr.6, rhs=$498binary_multiply.13, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:37:57,939 on stmt: Hnew[N_det] = $500inplace_add.14
DEBUG 2022-02-14 16:37:57,939 on stmt: jump 506
DEBUG 2022-02-14 16:37:57,939 ==== SSA block rewrite pass on 506
DEBUG 2022-02-14 16:37:57,939 Running <numba.core.ssa._FreshVarHandler object at 0x7fa047758ee0>
DEBUG 2022-02-14 16:37:57,939 on stmt: jump 378
DEBUG 2022-02-14 16:37:57,939 ==== SSA block rewrite pass on 510
DEBUG 2022-02-14 16:37:57,939 Running <numba.core.ssa._FreshVarHandler object at 0x7fa047758ee0>
DEBUG 2022-02-14 16:37:57,939 on stmt: $514inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=H_batch.2, rhs=Hnew, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:37:57,939 on stmt: H_batch.1 = $514inplace_add.3
DEBUG 2022-02-14 16:37:57,939 on stmt: jump 158
DEBUG 2022-02-14 16:37:57,939 ==== SSA block rewrite pass on 520
DEBUG 2022-02-14 16:37:57,939 Running <numba.core.ssa._FreshVarHandler object at 0x7fa047758ee0>
DEBUG 2022-02-14 16:37:57,939 on stmt: bool522 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:37:57,939 on stmt: $522pred = call bool522(glynn, func=bool522, args=(Var(glynn, loop_hafnian_batch.py:20),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:37:57,940 on stmt: branch $522pred, 526, 580
DEBUG 2022-02-14 16:37:57,940 ==== SSA block rewrite pass on 526
DEBUG 2022-02-14 16:37:57,940 Running <numba.core.ssa._FreshVarHandler object at 0x7fa047758ee0>
DEBUG 2022-02-14 16:37:57,940 on stmt: $526load_global.0 = global(range: <class 'range'>)
DEBUG 2022-02-14 16:37:57,940 on stmt: $530load_attr.2 = getattr(value=H_batch.2, attr=shape)
DEBUG 2022-02-14 16:37:57,940 on stmt: $const532.3 = const(int, 0)
DEBUG 2022-02-14 16:37:57,940 on stmt: $534binary_subscr.4 = static_getitem(value=$530load_attr.2, index=0, index_var=$const532.3, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:37:57,940 on stmt: $536call_function.5 = call $526load_global.0($534binary_subscr.4, func=$526load_global.0, args=[Var($534binary_subscr.4, loop_hafnian_batch.py:72)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:37:57,940 on stmt: $538get_iter.6 = getiter(value=$536call_function.5)
DEBUG 2022-02-14 16:37:57,940 on stmt: $phi540.0 = $538get_iter.6
DEBUG 2022-02-14 16:37:57,940 on stmt: jump 540
DEBUG 2022-02-14 16:37:57,940 ==== SSA block rewrite pass on 540
DEBUG 2022-02-14 16:37:57,940 Running <numba.core.ssa._FreshVarHandler object at 0x7fa047758ee0>
DEBUG 2022-02-14 16:37:57,940 on stmt: $540for_iter.1 = iternext(value=$phi540.0)
DEBUG 2022-02-14 16:37:57,940 on stmt: $540for_iter.2 = pair_first(value=$540for_iter.1)
DEBUG 2022-02-14 16:37:57,940 on stmt: $540for_iter.3 = pair_second(value=$540for_iter.1)
DEBUG 2022-02-14 16:37:57,940 on stmt: $phi542.1 = $540for_iter.2
DEBUG 2022-02-14 16:37:57,940 on stmt: branch $540for_iter.3, 542, 580
DEBUG 2022-02-14 16:37:57,940 ==== SSA block rewrite pass on 542
DEBUG 2022-02-14 16:37:57,940 Running <numba.core.ssa._FreshVarHandler object at 0x7fa047758ee0>
DEBUG 2022-02-14 16:37:57,941 on stmt: j.1 = $phi542.1
DEBUG 2022-02-14 16:37:57,941 on stmt: x = N_fixed + j.1
DEBUG 2022-02-14 16:37:57,941 on stmt: $558binary_subscr.9 = getitem(value=H_batch.2, index=j.1, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:37:57,941 on stmt: $const560.10 = const(float, 0.5)
DEBUG 2022-02-14 16:37:57,941 on stmt: $const564.12 = const(int, 2)
DEBUG 2022-02-14 16:37:57,941 on stmt: $566binary_floor_divide.13 = x // $const564.12
DEBUG 2022-02-14 16:37:57,941 on stmt: $568binary_power.14 = $const560.10 ** $566binary_floor_divide.13
DEBUG 2022-02-14 16:37:57,941 on stmt: $570inplace_multiply.15 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=$558binary_subscr.9, rhs=$568binary_power.14, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:37:57,941 on stmt: H_batch.2[j.1] = $570inplace_multiply.15
DEBUG 2022-02-14 16:37:57,941 on stmt: jump 540
DEBUG 2022-02-14 16:37:57,941 ==== SSA block rewrite pass on 580
DEBUG 2022-02-14 16:37:57,941 Running <numba.core.ssa._FreshVarHandler object at 0x7fa047758ee0>
DEBUG 2022-02-14 16:37:57,941 on stmt: $582return_value.1 = cast(value=H_batch.2)
DEBUG 2022-02-14 16:37:57,941 on stmt: return $582return_value.1
DEBUG 2022-02-14 16:37:57,941 Replaced assignments: defaultdict(<class 'list'>,
            {162: [<numba.core.ir.Assign object at 0x7fa047704af0>],
             230: [<numba.core.ir.Assign object at 0x7fa0477042b0>]})
DEBUG 2022-02-14 16:37:57,941 ==== SSA block rewrite pass on 0
DEBUG 2022-02-14 16:37:57,941 Running <numba.core.ssa._FixSSAVars object at 0x7fa047704c40>
DEBUG 2022-02-14 16:37:57,941 on stmt: A = arg(0, name=A)
DEBUG 2022-02-14 16:37:57,941 on stmt: D = arg(1, name=D)
DEBUG 2022-02-14 16:37:57,942 on stmt: fixed_edge_reps = arg(2, name=fixed_edge_reps)
DEBUG 2022-02-14 16:37:57,942 on stmt: batch_max = arg(3, name=batch_max)
DEBUG 2022-02-14 16:37:57,942 on stmt: odd_cutoff = arg(4, name=odd_cutoff)
DEBUG 2022-02-14 16:37:57,942 on stmt: glynn = arg(5, name=glynn)
DEBUG 2022-02-14 16:37:57,942 on stmt: $const4.1 = const(int, 0)
DEBUG 2022-02-14 16:37:57,942 on stmt: oddloop = static_getitem(value=D, index=0, index_var=$const4.1, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:37:57,942 on stmt: $const12.4 = const(int, 0)
DEBUG 2022-02-14 16:37:57,942 on stmt: $const14.5 = const(NoneType, None)
DEBUG 2022-02-14 16:37:57,942 on stmt: $const16.6 = const(NoneType, None)
DEBUG 2022-02-14 16:37:57,942 on stmt: $18build_slice.7 = global(slice: <class 'slice'>)
DEBUG 2022-02-14 16:37:57,942 on stmt: $18build_slice.8 = call $18build_slice.7($const14.5, $const16.6, func=$18build_slice.7, args=(Var($const14.5, loop_hafnian_batch.py:21), Var($const16.6, loop_hafnian_batch.py:21)), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:37:57,942 on stmt: $20build_tuple.9 = build_tuple(items=[Var($const12.4, loop_hafnian_batch.py:21), Var($18build_slice.8, loop_hafnian_batch.py:21)])
DEBUG 2022-02-14 16:37:57,942 on stmt: oddV = static_getitem(value=A, index=(0, slice(None, None, None)), index_var=$20build_tuple.9, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:37:57,942 on stmt: $28load_attr.12 = getattr(value=A, attr=shape)
DEBUG 2022-02-14 16:37:57,942 on stmt: $const30.13 = const(int, 0)
DEBUG 2022-02-14 16:37:57,942 on stmt: n = static_getitem(value=$28load_attr.12, index=0, index_var=$const30.13, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:37:57,942 on stmt: $const36.15 = const(int, 2)
DEBUG 2022-02-14 16:37:57,942 on stmt: $40load_method.17 = getattr(value=fixed_edge_reps, attr=sum)
DEBUG 2022-02-14 16:37:57,942 on stmt: $42call_method.18 = call $40load_method.17(func=$40load_method.17, args=[], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:37:57,943 on stmt: N_fixed = $const36.15 * $42call_method.18
DEBUG 2022-02-14 16:37:57,943 on stmt: $const50.21 = const(int, 2)
DEBUG 2022-02-14 16:37:57,943 on stmt: $54binary_multiply.23 = $const50.21 * batch_max
DEBUG 2022-02-14 16:37:57,943 on stmt: $56binary_add.24 = N_fixed + $54binary_multiply.23
DEBUG 2022-02-14 16:37:57,943 on stmt: N_max = $56binary_add.24 + odd_cutoff
DEBUG 2022-02-14 16:37:57,943 on stmt: $64load_global.27 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:37:57,943 on stmt: $66load_method.28 = getattr(value=$64load_global.27, attr=concatenate)
DEBUG 2022-02-14 16:37:57,943 on stmt: $68load_global.29 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:37:57,943 on stmt: $70load_method.30 = getattr(value=$68load_global.29, attr=array)
DEBUG 2022-02-14 16:37:57,943 on stmt: $74build_list.32 = build_list(items=[Var(batch_max, loop_hafnian_batch.py:20)])
DEBUG 2022-02-14 16:37:57,943 on stmt: $76call_method.33 = call $70load_method.30($74build_list.32, func=$70load_method.30, args=[Var($74build_list.32, loop_hafnian_batch.py:28)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:37:57,943 on stmt: $80build_tuple.35 = build_tuple(items=[Var($76call_method.33, loop_hafnian_batch.py:28), Var(fixed_edge_reps, loop_hafnian_batch.py:20)])
DEBUG 2022-02-14 16:37:57,943 on stmt: edge_reps = call $66load_method.28($80build_tuple.35, func=$66load_method.28, args=[Var($80build_tuple.35, loop_hafnian_batch.py:28)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:37:57,943 on stmt: $86load_global.37 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:37:57,943 on stmt: $88load_method.38 = getattr(value=$86load_global.37, attr=prod)
DEBUG 2022-02-14 16:37:57,943 on stmt: $const92.40 = const(int, 1)
DEBUG 2022-02-14 16:37:57,943 on stmt: $94binary_add.41 = edge_reps + $const92.40
DEBUG 2022-02-14 16:37:57,943 on stmt: steps = call $88load_method.38($94binary_add.41, func=$88load_method.38, args=[Var($94binary_add.41, loop_hafnian_batch.py:29)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:37:57,944 on stmt: $102load_method.44 = getattr(value=edge_reps, attr=max)
DEBUG 2022-02-14 16:37:57,944 on stmt: $104call_method.45 = call $102load_method.44(func=$102load_method.44, args=[], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:37:57,944 on stmt: max_binom = $104call_method.45 + odd_cutoff
DEBUG 2022-02-14 16:37:57,944 on stmt: $112load_global.48 = global(precompute_binoms: CPUDispatcher(<function precompute_binoms at 0x7fa047ebe310>))
DEBUG 2022-02-14 16:37:57,944 on stmt: binoms = call $112load_global.48(max_binom, func=$112load_global.48, args=[Var(max_binom, loop_hafnian_batch.py:31)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:37:57,944 on stmt: $120load_global.51 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:37:57,944 on stmt: $122load_attr.52 = getattr(value=$120load_global.51, attr=zeros)
DEBUG 2022-02-14 16:37:57,944 on stmt: $const124.53 = const(int, 2)
DEBUG 2022-02-14 16:37:57,944 on stmt: $128binary_multiply.55 = $const124.53 * batch_max
DEBUG 2022-02-14 16:37:57,944 on stmt: $132binary_add.57 = $128binary_multiply.55 + odd_cutoff
DEBUG 2022-02-14 16:37:57,944 on stmt: $const134.58 = const(int, 1)
DEBUG 2022-02-14 16:37:57,944 on stmt: $136binary_add.59 = $132binary_add.57 + $const134.58
DEBUG 2022-02-14 16:37:57,944 on stmt: $138load_global.60 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:37:57,944 on stmt: $140load_attr.61 = getattr(value=$138load_global.60, attr=complex128)
DEBUG 2022-02-14 16:37:57,944 on stmt: H_batch = call $122load_attr.52($136binary_add.59, func=$122load_attr.52, args=[Var($136binary_add.59, loop_hafnian_batch.py:34)], kws=[('dtype', Var($140load_attr.61, loop_hafnian_batch.py:34))], vararg=None, target=None)
DEBUG 2022-02-14 16:37:57,944 on stmt: $148load_global.64 = global(numba: <module 'numba' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numba/__init__.py'>)
DEBUG 2022-02-14 16:37:57,944 on stmt: $150load_method.65 = getattr(value=$148load_global.64, attr=prange)
DEBUG 2022-02-14 16:37:57,944 on stmt: $154call_method.67 = call $150load_method.65(steps, func=$150load_method.65, args=[Var(steps, loop_hafnian_batch.py:29)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:37:57,945 on stmt: $156get_iter.68 = getiter(value=$154call_method.67)
DEBUG 2022-02-14 16:37:57,945 on stmt: $phi158.0 = $156get_iter.68
DEBUG 2022-02-14 16:37:57,945 on stmt: jump 158
DEBUG 2022-02-14 16:37:57,945 ==== SSA block rewrite pass on 158
DEBUG 2022-02-14 16:37:57,945 Running <numba.core.ssa._FixSSAVars object at 0x7fa047704c40>
DEBUG 2022-02-14 16:37:57,945 on stmt: H_batch.2 = phi(incoming_values=[Var(H_batch, loop_hafnian_batch.py:34), Var(H_batch.1, loop_hafnian_batch.py:69)], incoming_blocks=[0, 510])
DEBUG 2022-02-14 16:37:57,945 on stmt: $158for_iter.1 = iternext(value=$phi158.0)
DEBUG 2022-02-14 16:37:57,945 on stmt: $158for_iter.2 = pair_first(value=$158for_iter.1)
DEBUG 2022-02-14 16:37:57,945 on stmt: $158for_iter.3 = pair_second(value=$158for_iter.1)
DEBUG 2022-02-14 16:37:57,945 on stmt: $phi162.1 = $158for_iter.2
DEBUG 2022-02-14 16:37:57,945 on stmt: branch $158for_iter.3, 162, 520
DEBUG 2022-02-14 16:37:57,945 ==== SSA block rewrite pass on 162
DEBUG 2022-02-14 16:37:57,945 Running <numba.core.ssa._FixSSAVars object at 0x7fa047704c40>
DEBUG 2022-02-14 16:37:57,945 on stmt: j = $phi162.1
DEBUG 2022-02-14 16:37:57,945 on stmt: $164load_global.2 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:37:57,945 on stmt: $166load_attr.3 = getattr(value=$164load_global.2, attr=zeros)
DEBUG 2022-02-14 16:37:57,945 on stmt: $const168.4 = const(int, 2)
DEBUG 2022-02-14 16:37:57,945 on stmt: $172binary_multiply.6 = $const168.4 * batch_max
DEBUG 2022-02-14 16:37:57,945 on stmt: $176binary_add.8 = $172binary_multiply.6 + odd_cutoff
DEBUG 2022-02-14 16:37:57,946 on stmt: $const178.9 = const(int, 1)
DEBUG 2022-02-14 16:37:57,946 on stmt: $180binary_add.10 = $176binary_add.8 + $const178.9
DEBUG 2022-02-14 16:37:57,946 on stmt: $182load_global.11 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:37:57,946 on stmt: $184load_attr.12 = getattr(value=$182load_global.11, attr=complex128)
DEBUG 2022-02-14 16:37:57,946 on stmt: Hnew = call $166load_attr.3($180binary_add.10, func=$166load_attr.3, args=[Var($180binary_add.10, loop_hafnian_batch.py:37)], kws=[('dtype', Var($184load_attr.12, loop_hafnian_batch.py:37))], vararg=None, target=None)
DEBUG 2022-02-14 16:37:57,946 on stmt: $192load_global.15 = global(find_kept_edges: CPUDispatcher(<function find_kept_edges at 0x7fa047ebe790>))
DEBUG 2022-02-14 16:37:57,946 on stmt: kept_edges = call $192load_global.15(j, edge_reps, func=$192load_global.15, args=[Var(j, loop_hafnian_batch.py:35), Var(edge_reps, loop_hafnian_batch.py:28)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:37:57,946 on stmt: $204load_method.20 = getattr(value=kept_edges, attr=sum)
DEBUG 2022-02-14 16:37:57,946 on stmt: edges_sum = call $204load_method.20(func=$204load_method.20, args=[], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:37:57,946 on stmt: binom_prod = const(float, 1.0)
DEBUG 2022-02-14 16:37:57,946 on stmt: $214load_global.23 = global(range: <class 'range'>)
DEBUG 2022-02-14 16:37:57,946 on stmt: $const216.24 = const(int, 1)
DEBUG 2022-02-14 16:37:57,946 on stmt: $const220.26 = const(int, 2)
DEBUG 2022-02-14 16:37:57,946 on stmt: $222binary_floor_divide.27 = n // $const220.26
DEBUG 2022-02-14 16:37:57,946 on stmt: $224call_function.28 = call $214load_global.23($const216.24, $222binary_floor_divide.27, func=$214load_global.23, args=[Var($const216.24, loop_hafnian_batch.py:43), Var($222binary_floor_divide.27, loop_hafnian_batch.py:43)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:37:57,946 on stmt: $226get_iter.29 = getiter(value=$224call_function.28)
DEBUG 2022-02-14 16:37:57,946 on stmt: $phi228.1 = $226get_iter.29
DEBUG 2022-02-14 16:37:57,946 on stmt: jump 228
DEBUG 2022-02-14 16:37:57,947 ==== SSA block rewrite pass on 228
DEBUG 2022-02-14 16:37:57,947 Running <numba.core.ssa._FixSSAVars object at 0x7fa047704c40>
DEBUG 2022-02-14 16:37:57,947 on stmt: $228for_iter.2 = iternext(value=$phi228.1)
DEBUG 2022-02-14 16:37:57,947 on stmt: $228for_iter.3 = pair_first(value=$228for_iter.2)
DEBUG 2022-02-14 16:37:57,947 on stmt: $228for_iter.4 = pair_second(value=$228for_iter.2)
DEBUG 2022-02-14 16:37:57,947 on stmt: $phi230.2 = $228for_iter.3
DEBUG 2022-02-14 16:37:57,947 on stmt: branch $228for_iter.4, 230, 258
DEBUG 2022-02-14 16:37:57,947 ==== SSA block rewrite pass on 230
DEBUG 2022-02-14 16:37:57,947 Running <numba.core.ssa._FixSSAVars object at 0x7fa047704c40>
DEBUG 2022-02-14 16:37:57,947 on stmt: i = $phi230.2
DEBUG 2022-02-14 16:37:57,947 on stmt: $240binary_subscr.7 = getitem(value=edge_reps, index=i, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:37:57,947 on stmt: $246binary_subscr.10 = getitem(value=kept_edges, index=i, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:37:57,947 on stmt: $248build_tuple.11 = build_tuple(items=[Var($240binary_subscr.7, loop_hafnian_batch.py:44), Var($246binary_subscr.10, loop_hafnian_batch.py:44)])
DEBUG 2022-02-14 16:37:57,947 on stmt: $250binary_subscr.12 = getitem(value=binoms, index=$248build_tuple.11, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:37:57,947 on stmt: $252inplace_multiply.13 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=binom_prod, rhs=$250binary_subscr.12, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:37:57,947 find_def var='binom_prod' stmt=$252inplace_multiply.13 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=binom_prod, rhs=$250binary_subscr.12, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:37:57,947 find_def_from_top label 230
DEBUG 2022-02-14 16:37:57,947 idom 228 from label 230
DEBUG 2022-02-14 16:37:57,947 find_def_from_bottom label 228
DEBUG 2022-02-14 16:37:57,947 find_def_from_top label 228
DEBUG 2022-02-14 16:37:57,948 insert phi node binom_prod.2 = phi(incoming_values=[], incoming_blocks=[]) at 228
DEBUG 2022-02-14 16:37:57,948 find_def_from_bottom label 162
DEBUG 2022-02-14 16:37:57,948 incoming_def binom_prod = const(float, 1.0)
DEBUG 2022-02-14 16:37:57,948 find_def_from_bottom label 230
DEBUG 2022-02-14 16:37:57,948 incoming_def binom_prod.1 = $252inplace_multiply.13
DEBUG 2022-02-14 16:37:57,948 replaced with: $252inplace_multiply.13 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=binom_prod.2, rhs=$250binary_subscr.12, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:37:57,948 on stmt: binom_prod.1 = $252inplace_multiply.13
DEBUG 2022-02-14 16:37:57,948 on stmt: jump 228
DEBUG 2022-02-14 16:37:57,948 ==== SSA block rewrite pass on 258
DEBUG 2022-02-14 16:37:57,948 Running <numba.core.ssa._FixSSAVars object at 0x7fa047704c40>
DEBUG 2022-02-14 16:37:57,948 on stmt: bool260 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:37:57,948 on stmt: $260pred = call bool260(glynn, func=bool260, args=(Var(glynn, loop_hafnian_batch.py:20),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:37:57,948 on stmt: branch $260pred, 264, 278
DEBUG 2022-02-14 16:37:57,948 ==== SSA block rewrite pass on 264
DEBUG 2022-02-14 16:37:57,948 Running <numba.core.ssa._FixSSAVars object at 0x7fa047704c40>
DEBUG 2022-02-14 16:37:57,948 on stmt: $const264.1 = const(int, 2)
DEBUG 2022-02-14 16:37:57,948 on stmt: $268binary_multiply.3 = $const264.1 * kept_edges
DEBUG 2022-02-14 16:37:57,948 on stmt: delta = $268binary_multiply.3 - edge_reps
DEBUG 2022-02-14 16:37:57,949 on stmt: jump 282
DEBUG 2022-02-14 16:37:57,949 ==== SSA block rewrite pass on 278
DEBUG 2022-02-14 16:37:57,949 Running <numba.core.ssa._FixSSAVars object at 0x7fa047704c40>
DEBUG 2022-02-14 16:37:57,949 on stmt: delta = kept_edges
DEBUG 2022-02-14 16:37:57,949 on stmt: jump 282
DEBUG 2022-02-14 16:37:57,949 ==== SSA block rewrite pass on 282
DEBUG 2022-02-14 16:37:57,949 Running <numba.core.ssa._FixSSAVars object at 0x7fa047704c40>
DEBUG 2022-02-14 16:37:57,949 on stmt: $282load_global.1 = global(get_submatrices: CPUDispatcher(<function get_submatrices at 0x7fa047ebed30>))
DEBUG 2022-02-14 16:37:57,949 on stmt: $292call_function.6 = call $282load_global.1(delta, A, D, oddV, func=$282load_global.1, args=[Var(delta, loop_hafnian_batch.py:47), Var(A, loop_hafnian_batch.py:20), Var(D, loop_hafnian_batch.py:20), Var(oddV, loop_hafnian_batch.py:21)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:37:57,949 on stmt: $294unpack_sequence.11 = exhaust_iter(value=$292call_function.6, count=4)
DEBUG 2022-02-14 16:37:57,949 on stmt: $294unpack_sequence.7 = static_getitem(value=$294unpack_sequence.11, index=0, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:37:57,949 on stmt: $294unpack_sequence.8 = static_getitem(value=$294unpack_sequence.11, index=1, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:37:57,949 on stmt: $294unpack_sequence.9 = static_getitem(value=$294unpack_sequence.11, index=2, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:37:57,950 on stmt: $294unpack_sequence.10 = static_getitem(value=$294unpack_sequence.11, index=3, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:37:57,950 on stmt: AX_S = $294unpack_sequence.7
DEBUG 2022-02-14 16:37:57,950 on stmt: XD_S = $294unpack_sequence.8
DEBUG 2022-02-14 16:37:57,950 on stmt: D_S = $294unpack_sequence.9
DEBUG 2022-02-14 16:37:57,950 on stmt: oddVX_S = $294unpack_sequence.10
DEBUG 2022-02-14 16:37:57,950 on stmt: $304load_global.12 = global(eigvals: CPUDispatcher(<function eigvals at 0x7fa047e5d430>))
DEBUG 2022-02-14 16:37:57,950 on stmt: E = call $304load_global.12(AX_S, func=$304load_global.12, args=[Var(AX_S, loop_hafnian_batch.py:51)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:37:57,950 on stmt: $312load_global.15 = global(f_loop: CPUDispatcher(<function f_loop at 0x7fa047ebe9d0>))
DEBUG 2022-02-14 16:37:57,950 on stmt: f_even = call $312load_global.15(E, AX_S, XD_S, D_S, N_max, func=$312load_global.15, args=[Var(E, loop_hafnian_batch.py:53), Var(AX_S, loop_hafnian_batch.py:51), Var(XD_S, loop_hafnian_batch.py:51), Var(D_S, loop_hafnian_batch.py:51), Var(N_max, loop_hafnian_batch.py:26)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:37:57,950 on stmt: $328load_global.22 = global(f_loop_odd: CPUDispatcher(<function f_loop_odd at 0x7fa047ebeb80>))
DEBUG 2022-02-14 16:37:57,950 on stmt: f_odd = call $328load_global.22(E, AX_S, XD_S, D_S, N_max, oddloop, oddVX_S, func=$328load_global.22, args=[Var(E, loop_hafnian_batch.py:53), Var(AX_S, loop_hafnian_batch.py:51), Var(XD_S, loop_hafnian_batch.py:51), Var(D_S, loop_hafnian_batch.py:51), Var(N_max, loop_hafnian_batch.py:26), Var(oddloop, loop_hafnian_batch.py:20), Var(oddVX_S, loop_hafnian_batch.py:51)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:37:57,950 on stmt: $348load_global.31 = global(range: <class 'range'>)
DEBUG 2022-02-14 16:37:57,950 on stmt: $const350.32 = const(int, 2)
DEBUG 2022-02-14 16:37:57,950 on stmt: $const354.34 = const(int, 0)
DEBUG 2022-02-14 16:37:57,950 on stmt: $356binary_subscr.35 = static_getitem(value=kept_edges, index=0, index_var=$const354.34, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:37:57,950 on stmt: $358binary_multiply.36 = $const350.32 * $356binary_subscr.35
DEBUG 2022-02-14 16:37:57,951 on stmt: $const360.37 = const(int, 2)
DEBUG 2022-02-14 16:37:57,951 on stmt: $364binary_multiply.39 = $const360.37 * batch_max
DEBUG 2022-02-14 16:37:57,951 on stmt: $368binary_add.41 = $364binary_multiply.39 + odd_cutoff
DEBUG 2022-02-14 16:37:57,951 on stmt: $const370.42 = const(int, 1)
DEBUG 2022-02-14 16:37:57,951 on stmt: $372binary_add.43 = $368binary_add.41 + $const370.42
DEBUG 2022-02-14 16:37:57,951 on stmt: $374call_function.44 = call $348load_global.31($358binary_multiply.36, $372binary_add.43, func=$348load_global.31, args=[Var($358binary_multiply.36, loop_hafnian_batch.py:58), Var($372binary_add.43, loop_hafnian_batch.py:58)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:37:57,951 on stmt: $376get_iter.45 = getiter(value=$374call_function.44)
DEBUG 2022-02-14 16:37:57,951 on stmt: $phi378.1 = $376get_iter.45
DEBUG 2022-02-14 16:37:57,951 on stmt: jump 378
DEBUG 2022-02-14 16:37:57,951 ==== SSA block rewrite pass on 378
DEBUG 2022-02-14 16:37:57,951 Running <numba.core.ssa._FixSSAVars object at 0x7fa047704c40>
DEBUG 2022-02-14 16:37:57,951 on stmt: $378for_iter.2 = iternext(value=$phi378.1)
DEBUG 2022-02-14 16:37:57,951 on stmt: $378for_iter.3 = pair_first(value=$378for_iter.2)
DEBUG 2022-02-14 16:37:57,951 on stmt: $378for_iter.4 = pair_second(value=$378for_iter.2)
DEBUG 2022-02-14 16:37:57,951 on stmt: $phi380.2 = $378for_iter.3
DEBUG 2022-02-14 16:37:57,951 on stmt: branch $378for_iter.4, 380, 510
DEBUG 2022-02-14 16:37:57,951 ==== SSA block rewrite pass on 380
DEBUG 2022-02-14 16:37:57,951 Running <numba.core.ssa._FixSSAVars object at 0x7fa047704c40>
DEBUG 2022-02-14 16:37:57,951 on stmt: N_det = $phi380.2
DEBUG 2022-02-14 16:37:57,952 on stmt: N = N_fixed + N_det
DEBUG 2022-02-14 16:37:57,952 on stmt: $const390.6 = const(float, -1.0)
DEBUG 2022-02-14 16:37:57,952 on stmt: $const394.8 = const(int, 2)
DEBUG 2022-02-14 16:37:57,952 on stmt: $396binary_floor_divide.9 = N // $const394.8
DEBUG 2022-02-14 16:37:57,952 on stmt: $400binary_subtract.11 = $396binary_floor_divide.9 - edges_sum
DEBUG 2022-02-14 16:37:57,952 on stmt: plus_minus = $const390.6 ** $400binary_subtract.11
DEBUG 2022-02-14 16:37:57,952 on stmt: $const410.15 = const(int, 2)
DEBUG 2022-02-14 16:37:57,952 on stmt: $412binary_floor_divide.16 = N_det // $const410.15
DEBUG 2022-02-14 16:37:57,952 on stmt: $const416.18 = const(int, 0)
DEBUG 2022-02-14 16:37:57,952 on stmt: $418binary_subscr.19 = static_getitem(value=kept_edges, index=0, index_var=$const416.18, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:37:57,952 on stmt: $420build_tuple.20 = build_tuple(items=[Var($412binary_floor_divide.16, loop_hafnian_batch.py:62), Var($418binary_subscr.19, loop_hafnian_batch.py:62)])
DEBUG 2022-02-14 16:37:57,952 on stmt: $422binary_subscr.21 = getitem(value=binoms, index=$420build_tuple.20, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:37:57,952 on stmt: n_det_binom_prod = $422binary_subscr.21 * binom_prod
DEBUG 2022-02-14 16:37:57,952 find_def var='binom_prod' stmt=n_det_binom_prod = $422binary_subscr.21 * binom_prod
DEBUG 2022-02-14 16:37:57,952 find_def_from_top label 380
DEBUG 2022-02-14 16:37:57,952 idom 378 from label 380
DEBUG 2022-02-14 16:37:57,952 find_def_from_bottom label 378
DEBUG 2022-02-14 16:37:57,952 find_def_from_top label 378
DEBUG 2022-02-14 16:37:57,952 idom 282 from label 378
DEBUG 2022-02-14 16:37:57,953 find_def_from_bottom label 282
DEBUG 2022-02-14 16:37:57,953 find_def_from_top label 282
DEBUG 2022-02-14 16:37:57,953 idom 258 from label 282
DEBUG 2022-02-14 16:37:57,953 find_def_from_bottom label 258
DEBUG 2022-02-14 16:37:57,953 find_def_from_top label 258
DEBUG 2022-02-14 16:37:57,953 idom 228 from label 258
DEBUG 2022-02-14 16:37:57,953 find_def_from_bottom label 228
DEBUG 2022-02-14 16:37:57,953 replaced with: n_det_binom_prod = $422binary_subscr.21 * binom_prod.2
DEBUG 2022-02-14 16:37:57,953 on stmt: $const432.25 = const(int, 2)
DEBUG 2022-02-14 16:37:57,953 on stmt: $434binary_modulo.26 = N_det % $const432.25
DEBUG 2022-02-14 16:37:57,953 on stmt: $const436.27 = const(int, 0)
DEBUG 2022-02-14 16:37:57,953 on stmt: $438compare_op.28 = $434binary_modulo.26 == $const436.27
DEBUG 2022-02-14 16:37:57,953 on stmt: bool440 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:37:57,953 on stmt: $440pred = call bool440($438compare_op.28, func=bool440, args=(Var($438compare_op.28, loop_hafnian_batch.py:64),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:37:57,953 on stmt: branch $440pred, 444, 478
DEBUG 2022-02-14 16:37:57,953 ==== SSA block rewrite pass on 444
DEBUG 2022-02-14 16:37:57,953 Running <numba.core.ssa._FixSSAVars object at 0x7fa047704c40>
DEBUG 2022-02-14 16:37:57,953 on stmt: $450binary_subscr.6 = getitem(value=Hnew, index=N_det, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:37:57,954 on stmt: $456binary_multiply.9 = n_det_binom_prod * plus_minus
DEBUG 2022-02-14 16:37:57,954 on stmt: $const462.12 = const(int, 2)
DEBUG 2022-02-14 16:37:57,954 on stmt: $464binary_floor_divide.13 = N // $const462.12
DEBUG 2022-02-14 16:37:57,954 on stmt: $466binary_subscr.14 = getitem(value=f_even, index=$464binary_floor_divide.13, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:37:57,954 on stmt: $468binary_multiply.15 = $456binary_multiply.9 * $466binary_subscr.14
DEBUG 2022-02-14 16:37:57,954 on stmt: $470inplace_add.16 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$450binary_subscr.6, rhs=$468binary_multiply.15, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:37:57,954 on stmt: Hnew[N_det] = $470inplace_add.16
DEBUG 2022-02-14 16:37:57,954 on stmt: jump 506
DEBUG 2022-02-14 16:37:57,954 ==== SSA block rewrite pass on 478
DEBUG 2022-02-14 16:37:57,954 Running <numba.core.ssa._FixSSAVars object at 0x7fa047704c40>
DEBUG 2022-02-14 16:37:57,954 on stmt: $484binary_subscr.6 = getitem(value=Hnew, index=N_det, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:37:57,954 on stmt: $490binary_multiply.9 = n_det_binom_prod * plus_minus
DEBUG 2022-02-14 16:37:57,954 on stmt: $496binary_subscr.12 = getitem(value=f_odd, index=N, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:37:57,954 on stmt: $498binary_multiply.13 = $490binary_multiply.9 * $496binary_subscr.12
DEBUG 2022-02-14 16:37:57,954 on stmt: $500inplace_add.14 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$484binary_subscr.6, rhs=$498binary_multiply.13, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:37:57,954 on stmt: Hnew[N_det] = $500inplace_add.14
DEBUG 2022-02-14 16:37:57,954 on stmt: jump 506
DEBUG 2022-02-14 16:37:57,954 ==== SSA block rewrite pass on 506
DEBUG 2022-02-14 16:37:57,955 Running <numba.core.ssa._FixSSAVars object at 0x7fa047704c40>
DEBUG 2022-02-14 16:37:57,955 on stmt: jump 378
DEBUG 2022-02-14 16:37:57,955 ==== SSA block rewrite pass on 510
DEBUG 2022-02-14 16:37:57,955 Running <numba.core.ssa._FixSSAVars object at 0x7fa047704c40>
DEBUG 2022-02-14 16:37:57,955 on stmt: $514inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=H_batch.2, rhs=Hnew, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:37:57,955 on stmt: H_batch.1 = $514inplace_add.3
DEBUG 2022-02-14 16:37:57,955 on stmt: jump 158
DEBUG 2022-02-14 16:37:57,955 ==== SSA block rewrite pass on 520
DEBUG 2022-02-14 16:37:57,955 Running <numba.core.ssa._FixSSAVars object at 0x7fa047704c40>
DEBUG 2022-02-14 16:37:57,955 on stmt: bool522 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:37:57,955 on stmt: $522pred = call bool522(glynn, func=bool522, args=(Var(glynn, loop_hafnian_batch.py:20),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:37:57,955 on stmt: branch $522pred, 526, 580
DEBUG 2022-02-14 16:37:57,955 ==== SSA block rewrite pass on 526
DEBUG 2022-02-14 16:37:57,955 Running <numba.core.ssa._FixSSAVars object at 0x7fa047704c40>
DEBUG 2022-02-14 16:37:57,955 on stmt: $526load_global.0 = global(range: <class 'range'>)
DEBUG 2022-02-14 16:37:57,955 on stmt: $530load_attr.2 = getattr(value=H_batch.2, attr=shape)
DEBUG 2022-02-14 16:37:57,955 on stmt: $const532.3 = const(int, 0)
DEBUG 2022-02-14 16:37:57,955 on stmt: $534binary_subscr.4 = static_getitem(value=$530load_attr.2, index=0, index_var=$const532.3, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:37:57,955 on stmt: $536call_function.5 = call $526load_global.0($534binary_subscr.4, func=$526load_global.0, args=[Var($534binary_subscr.4, loop_hafnian_batch.py:72)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:37:57,956 on stmt: $538get_iter.6 = getiter(value=$536call_function.5)
DEBUG 2022-02-14 16:37:57,956 on stmt: $phi540.0 = $538get_iter.6
DEBUG 2022-02-14 16:37:57,956 on stmt: jump 540
DEBUG 2022-02-14 16:37:57,956 ==== SSA block rewrite pass on 540
DEBUG 2022-02-14 16:37:57,956 Running <numba.core.ssa._FixSSAVars object at 0x7fa047704c40>
DEBUG 2022-02-14 16:37:57,956 on stmt: $540for_iter.1 = iternext(value=$phi540.0)
DEBUG 2022-02-14 16:37:57,956 on stmt: $540for_iter.2 = pair_first(value=$540for_iter.1)
DEBUG 2022-02-14 16:37:57,956 on stmt: $540for_iter.3 = pair_second(value=$540for_iter.1)
DEBUG 2022-02-14 16:37:57,956 on stmt: $phi542.1 = $540for_iter.2
DEBUG 2022-02-14 16:37:57,956 on stmt: branch $540for_iter.3, 542, 580
DEBUG 2022-02-14 16:37:57,956 ==== SSA block rewrite pass on 542
DEBUG 2022-02-14 16:37:57,956 Running <numba.core.ssa._FixSSAVars object at 0x7fa047704c40>
DEBUG 2022-02-14 16:37:57,956 on stmt: j.1 = $phi542.1
DEBUG 2022-02-14 16:37:57,956 on stmt: x = N_fixed + j.1
DEBUG 2022-02-14 16:37:57,956 on stmt: $558binary_subscr.9 = getitem(value=H_batch.2, index=j.1, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:37:57,956 on stmt: $const560.10 = const(float, 0.5)
DEBUG 2022-02-14 16:37:57,956 on stmt: $const564.12 = const(int, 2)
DEBUG 2022-02-14 16:37:57,956 on stmt: $566binary_floor_divide.13 = x // $const564.12
DEBUG 2022-02-14 16:37:57,956 on stmt: $568binary_power.14 = $const560.10 ** $566binary_floor_divide.13
DEBUG 2022-02-14 16:37:57,956 on stmt: $570inplace_multiply.15 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=$558binary_subscr.9, rhs=$568binary_power.14, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:37:57,957 on stmt: H_batch.2[j.1] = $570inplace_multiply.15
DEBUG 2022-02-14 16:37:57,957 on stmt: jump 540
DEBUG 2022-02-14 16:37:57,957 ==== SSA block rewrite pass on 580
DEBUG 2022-02-14 16:37:57,957 Running <numba.core.ssa._FixSSAVars object at 0x7fa047704c40>
DEBUG 2022-02-14 16:37:57,957 on stmt: $582return_value.1 = cast(value=H_batch.2)
DEBUG 2022-02-14 16:37:57,957 on stmt: return $582return_value.1
DEBUG 2022-02-14 16:37:57,957 Fix SSA violator on var delta
DEBUG 2022-02-14 16:37:57,957 ==== SSA block rewrite pass on 0
DEBUG 2022-02-14 16:37:57,957 Running <numba.core.ssa._FreshVarHandler object at 0x7fa047758340>
DEBUG 2022-02-14 16:37:57,957 on stmt: A = arg(0, name=A)
DEBUG 2022-02-14 16:37:57,957 on stmt: D = arg(1, name=D)
DEBUG 2022-02-14 16:37:57,957 on stmt: fixed_edge_reps = arg(2, name=fixed_edge_reps)
DEBUG 2022-02-14 16:37:57,957 on stmt: batch_max = arg(3, name=batch_max)
DEBUG 2022-02-14 16:37:57,957 on stmt: odd_cutoff = arg(4, name=odd_cutoff)
DEBUG 2022-02-14 16:37:57,957 on stmt: glynn = arg(5, name=glynn)
DEBUG 2022-02-14 16:37:57,957 on stmt: $const4.1 = const(int, 0)
DEBUG 2022-02-14 16:37:57,957 on stmt: oddloop = static_getitem(value=D, index=0, index_var=$const4.1, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:37:57,957 on stmt: $const12.4 = const(int, 0)
DEBUG 2022-02-14 16:37:57,957 on stmt: $const14.5 = const(NoneType, None)
DEBUG 2022-02-14 16:37:57,957 on stmt: $const16.6 = const(NoneType, None)
DEBUG 2022-02-14 16:37:57,957 on stmt: $18build_slice.7 = global(slice: <class 'slice'>)
DEBUG 2022-02-14 16:37:57,958 on stmt: $18build_slice.8 = call $18build_slice.7($const14.5, $const16.6, func=$18build_slice.7, args=(Var($const14.5, loop_hafnian_batch.py:21), Var($const16.6, loop_hafnian_batch.py:21)), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:37:57,958 on stmt: $20build_tuple.9 = build_tuple(items=[Var($const12.4, loop_hafnian_batch.py:21), Var($18build_slice.8, loop_hafnian_batch.py:21)])
DEBUG 2022-02-14 16:37:57,958 on stmt: oddV = static_getitem(value=A, index=(0, slice(None, None, None)), index_var=$20build_tuple.9, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:37:57,958 on stmt: $28load_attr.12 = getattr(value=A, attr=shape)
DEBUG 2022-02-14 16:37:57,958 on stmt: $const30.13 = const(int, 0)
DEBUG 2022-02-14 16:37:57,958 on stmt: n = static_getitem(value=$28load_attr.12, index=0, index_var=$const30.13, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:37:57,958 on stmt: $const36.15 = const(int, 2)
DEBUG 2022-02-14 16:37:57,958 on stmt: $40load_method.17 = getattr(value=fixed_edge_reps, attr=sum)
DEBUG 2022-02-14 16:37:57,958 on stmt: $42call_method.18 = call $40load_method.17(func=$40load_method.17, args=[], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:37:57,958 on stmt: N_fixed = $const36.15 * $42call_method.18
DEBUG 2022-02-14 16:37:57,958 on stmt: $const50.21 = const(int, 2)
DEBUG 2022-02-14 16:37:57,958 on stmt: $54binary_multiply.23 = $const50.21 * batch_max
DEBUG 2022-02-14 16:37:57,958 on stmt: $56binary_add.24 = N_fixed + $54binary_multiply.23
DEBUG 2022-02-14 16:37:57,958 on stmt: N_max = $56binary_add.24 + odd_cutoff
DEBUG 2022-02-14 16:37:57,958 on stmt: $64load_global.27 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:37:57,958 on stmt: $66load_method.28 = getattr(value=$64load_global.27, attr=concatenate)
DEBUG 2022-02-14 16:37:57,958 on stmt: $68load_global.29 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:37:57,958 on stmt: $70load_method.30 = getattr(value=$68load_global.29, attr=array)
DEBUG 2022-02-14 16:37:57,959 on stmt: $74build_list.32 = build_list(items=[Var(batch_max, loop_hafnian_batch.py:20)])
DEBUG 2022-02-14 16:37:57,959 on stmt: $76call_method.33 = call $70load_method.30($74build_list.32, func=$70load_method.30, args=[Var($74build_list.32, loop_hafnian_batch.py:28)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:37:57,959 on stmt: $80build_tuple.35 = build_tuple(items=[Var($76call_method.33, loop_hafnian_batch.py:28), Var(fixed_edge_reps, loop_hafnian_batch.py:20)])
DEBUG 2022-02-14 16:37:57,959 on stmt: edge_reps = call $66load_method.28($80build_tuple.35, func=$66load_method.28, args=[Var($80build_tuple.35, loop_hafnian_batch.py:28)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:37:57,959 on stmt: $86load_global.37 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:37:57,959 on stmt: $88load_method.38 = getattr(value=$86load_global.37, attr=prod)
DEBUG 2022-02-14 16:37:57,959 on stmt: $const92.40 = const(int, 1)
DEBUG 2022-02-14 16:37:57,959 on stmt: $94binary_add.41 = edge_reps + $const92.40
DEBUG 2022-02-14 16:37:57,959 on stmt: steps = call $88load_method.38($94binary_add.41, func=$88load_method.38, args=[Var($94binary_add.41, loop_hafnian_batch.py:29)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:37:57,959 on stmt: $102load_method.44 = getattr(value=edge_reps, attr=max)
DEBUG 2022-02-14 16:37:57,959 on stmt: $104call_method.45 = call $102load_method.44(func=$102load_method.44, args=[], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:37:57,959 on stmt: max_binom = $104call_method.45 + odd_cutoff
DEBUG 2022-02-14 16:37:57,959 on stmt: $112load_global.48 = global(precompute_binoms: CPUDispatcher(<function precompute_binoms at 0x7fa047ebe310>))
DEBUG 2022-02-14 16:37:57,959 on stmt: binoms = call $112load_global.48(max_binom, func=$112load_global.48, args=[Var(max_binom, loop_hafnian_batch.py:31)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:37:57,959 on stmt: $120load_global.51 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:37:57,959 on stmt: $122load_attr.52 = getattr(value=$120load_global.51, attr=zeros)
DEBUG 2022-02-14 16:37:57,959 on stmt: $const124.53 = const(int, 2)
DEBUG 2022-02-14 16:37:57,959 on stmt: $128binary_multiply.55 = $const124.53 * batch_max
DEBUG 2022-02-14 16:37:57,960 on stmt: $132binary_add.57 = $128binary_multiply.55 + odd_cutoff
DEBUG 2022-02-14 16:37:57,960 on stmt: $const134.58 = const(int, 1)
DEBUG 2022-02-14 16:37:57,960 on stmt: $136binary_add.59 = $132binary_add.57 + $const134.58
DEBUG 2022-02-14 16:37:57,960 on stmt: $138load_global.60 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:37:57,960 on stmt: $140load_attr.61 = getattr(value=$138load_global.60, attr=complex128)
DEBUG 2022-02-14 16:37:57,960 on stmt: H_batch = call $122load_attr.52($136binary_add.59, func=$122load_attr.52, args=[Var($136binary_add.59, loop_hafnian_batch.py:34)], kws=[('dtype', Var($140load_attr.61, loop_hafnian_batch.py:34))], vararg=None, target=None)
DEBUG 2022-02-14 16:37:57,960 on stmt: $148load_global.64 = global(numba: <module 'numba' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numba/__init__.py'>)
DEBUG 2022-02-14 16:37:57,960 on stmt: $150load_method.65 = getattr(value=$148load_global.64, attr=prange)
DEBUG 2022-02-14 16:37:57,960 on stmt: $154call_method.67 = call $150load_method.65(steps, func=$150load_method.65, args=[Var(steps, loop_hafnian_batch.py:29)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:37:57,960 on stmt: $156get_iter.68 = getiter(value=$154call_method.67)
DEBUG 2022-02-14 16:37:57,960 on stmt: $phi158.0 = $156get_iter.68
DEBUG 2022-02-14 16:37:57,960 on stmt: jump 158
DEBUG 2022-02-14 16:37:57,960 ==== SSA block rewrite pass on 158
DEBUG 2022-02-14 16:37:57,960 Running <numba.core.ssa._FreshVarHandler object at 0x7fa047758340>
DEBUG 2022-02-14 16:37:57,960 on stmt: H_batch.2 = phi(incoming_values=[Var(H_batch, loop_hafnian_batch.py:34), Var(H_batch.1, loop_hafnian_batch.py:69)], incoming_blocks=[0, 510])
DEBUG 2022-02-14 16:37:57,960 on stmt: $158for_iter.1 = iternext(value=$phi158.0)
DEBUG 2022-02-14 16:37:57,960 on stmt: $158for_iter.2 = pair_first(value=$158for_iter.1)
DEBUG 2022-02-14 16:37:57,960 on stmt: $158for_iter.3 = pair_second(value=$158for_iter.1)
DEBUG 2022-02-14 16:37:57,960 on stmt: $phi162.1 = $158for_iter.2
DEBUG 2022-02-14 16:37:57,961 on stmt: branch $158for_iter.3, 162, 520
DEBUG 2022-02-14 16:37:57,961 ==== SSA block rewrite pass on 162
DEBUG 2022-02-14 16:37:57,961 Running <numba.core.ssa._FreshVarHandler object at 0x7fa047758340>
DEBUG 2022-02-14 16:37:57,961 on stmt: j = $phi162.1
DEBUG 2022-02-14 16:37:57,961 on stmt: $164load_global.2 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:37:57,961 on stmt: $166load_attr.3 = getattr(value=$164load_global.2, attr=zeros)
DEBUG 2022-02-14 16:37:57,961 on stmt: $const168.4 = const(int, 2)
DEBUG 2022-02-14 16:37:57,961 on stmt: $172binary_multiply.6 = $const168.4 * batch_max
DEBUG 2022-02-14 16:37:57,961 on stmt: $176binary_add.8 = $172binary_multiply.6 + odd_cutoff
DEBUG 2022-02-14 16:37:57,961 on stmt: $const178.9 = const(int, 1)
DEBUG 2022-02-14 16:37:57,961 on stmt: $180binary_add.10 = $176binary_add.8 + $const178.9
DEBUG 2022-02-14 16:37:57,961 on stmt: $182load_global.11 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:37:57,961 on stmt: $184load_attr.12 = getattr(value=$182load_global.11, attr=complex128)
DEBUG 2022-02-14 16:37:57,961 on stmt: Hnew = call $166load_attr.3($180binary_add.10, func=$166load_attr.3, args=[Var($180binary_add.10, loop_hafnian_batch.py:37)], kws=[('dtype', Var($184load_attr.12, loop_hafnian_batch.py:37))], vararg=None, target=None)
DEBUG 2022-02-14 16:37:57,961 on stmt: $192load_global.15 = global(find_kept_edges: CPUDispatcher(<function find_kept_edges at 0x7fa047ebe790>))
DEBUG 2022-02-14 16:37:57,961 on stmt: kept_edges = call $192load_global.15(j, edge_reps, func=$192load_global.15, args=[Var(j, loop_hafnian_batch.py:35), Var(edge_reps, loop_hafnian_batch.py:28)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:37:57,961 on stmt: $204load_method.20 = getattr(value=kept_edges, attr=sum)
DEBUG 2022-02-14 16:37:57,961 on stmt: edges_sum = call $204load_method.20(func=$204load_method.20, args=[], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:37:57,961 on stmt: binom_prod = const(float, 1.0)
DEBUG 2022-02-14 16:37:57,962 on stmt: $214load_global.23 = global(range: <class 'range'>)
DEBUG 2022-02-14 16:37:57,962 on stmt: $const216.24 = const(int, 1)
DEBUG 2022-02-14 16:37:57,962 on stmt: $const220.26 = const(int, 2)
DEBUG 2022-02-14 16:37:57,962 on stmt: $222binary_floor_divide.27 = n // $const220.26
DEBUG 2022-02-14 16:37:57,962 on stmt: $224call_function.28 = call $214load_global.23($const216.24, $222binary_floor_divide.27, func=$214load_global.23, args=[Var($const216.24, loop_hafnian_batch.py:43), Var($222binary_floor_divide.27, loop_hafnian_batch.py:43)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:37:57,962 on stmt: $226get_iter.29 = getiter(value=$224call_function.28)
DEBUG 2022-02-14 16:37:57,962 on stmt: $phi228.1 = $226get_iter.29
DEBUG 2022-02-14 16:37:57,962 on stmt: jump 228
DEBUG 2022-02-14 16:37:57,962 ==== SSA block rewrite pass on 228
DEBUG 2022-02-14 16:37:57,962 Running <numba.core.ssa._FreshVarHandler object at 0x7fa047758340>
DEBUG 2022-02-14 16:37:57,962 on stmt: binom_prod.2 = phi(incoming_values=[Var(binom_prod, loop_hafnian_batch.py:42), Var(binom_prod.1, loop_hafnian_batch.py:44)], incoming_blocks=[162, 230])
DEBUG 2022-02-14 16:37:57,962 on stmt: $228for_iter.2 = iternext(value=$phi228.1)
DEBUG 2022-02-14 16:37:57,962 on stmt: $228for_iter.3 = pair_first(value=$228for_iter.2)
DEBUG 2022-02-14 16:37:57,962 on stmt: $228for_iter.4 = pair_second(value=$228for_iter.2)
DEBUG 2022-02-14 16:37:57,962 on stmt: $phi230.2 = $228for_iter.3
DEBUG 2022-02-14 16:37:57,962 on stmt: branch $228for_iter.4, 230, 258
DEBUG 2022-02-14 16:37:57,962 ==== SSA block rewrite pass on 230
DEBUG 2022-02-14 16:37:57,962 Running <numba.core.ssa._FreshVarHandler object at 0x7fa047758340>
DEBUG 2022-02-14 16:37:57,962 on stmt: i = $phi230.2
DEBUG 2022-02-14 16:37:57,962 on stmt: $240binary_subscr.7 = getitem(value=edge_reps, index=i, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:37:57,962 on stmt: $246binary_subscr.10 = getitem(value=kept_edges, index=i, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:37:57,963 on stmt: $248build_tuple.11 = build_tuple(items=[Var($240binary_subscr.7, loop_hafnian_batch.py:44), Var($246binary_subscr.10, loop_hafnian_batch.py:44)])
DEBUG 2022-02-14 16:37:57,963 on stmt: $250binary_subscr.12 = getitem(value=binoms, index=$248build_tuple.11, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:37:57,963 on stmt: $252inplace_multiply.13 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=binom_prod.2, rhs=$250binary_subscr.12, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:37:57,963 on stmt: binom_prod.1 = $252inplace_multiply.13
DEBUG 2022-02-14 16:37:57,963 on stmt: jump 228
DEBUG 2022-02-14 16:37:57,963 ==== SSA block rewrite pass on 258
DEBUG 2022-02-14 16:37:57,963 Running <numba.core.ssa._FreshVarHandler object at 0x7fa047758340>
DEBUG 2022-02-14 16:37:57,963 on stmt: bool260 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:37:57,963 on stmt: $260pred = call bool260(glynn, func=bool260, args=(Var(glynn, loop_hafnian_batch.py:20),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:37:57,963 on stmt: branch $260pred, 264, 278
DEBUG 2022-02-14 16:37:57,963 ==== SSA block rewrite pass on 264
DEBUG 2022-02-14 16:37:57,963 Running <numba.core.ssa._FreshVarHandler object at 0x7fa047758340>
DEBUG 2022-02-14 16:37:57,963 on stmt: $const264.1 = const(int, 2)
DEBUG 2022-02-14 16:37:57,963 on stmt: $268binary_multiply.3 = $const264.1 * kept_edges
DEBUG 2022-02-14 16:37:57,963 on stmt: delta = $268binary_multiply.3 - edge_reps
DEBUG 2022-02-14 16:37:57,963 first assign: delta
DEBUG 2022-02-14 16:37:57,963 replaced with: delta = $268binary_multiply.3 - edge_reps
DEBUG 2022-02-14 16:37:57,963 on stmt: jump 282
DEBUG 2022-02-14 16:37:57,963 ==== SSA block rewrite pass on 278
DEBUG 2022-02-14 16:37:57,963 Running <numba.core.ssa._FreshVarHandler object at 0x7fa047758340>
DEBUG 2022-02-14 16:37:57,964 on stmt: delta = kept_edges
DEBUG 2022-02-14 16:37:57,964 replaced with: delta.1 = kept_edges
DEBUG 2022-02-14 16:37:57,964 on stmt: jump 282
DEBUG 2022-02-14 16:37:57,964 ==== SSA block rewrite pass on 282
DEBUG 2022-02-14 16:37:57,964 Running <numba.core.ssa._FreshVarHandler object at 0x7fa047758340>
DEBUG 2022-02-14 16:37:57,964 on stmt: $282load_global.1 = global(get_submatrices: CPUDispatcher(<function get_submatrices at 0x7fa047ebed30>))
DEBUG 2022-02-14 16:37:57,964 on stmt: $292call_function.6 = call $282load_global.1(delta, A, D, oddV, func=$282load_global.1, args=[Var(delta, loop_hafnian_batch.py:47), Var(A, loop_hafnian_batch.py:20), Var(D, loop_hafnian_batch.py:20), Var(oddV, loop_hafnian_batch.py:21)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:37:57,964 on stmt: $294unpack_sequence.11 = exhaust_iter(value=$292call_function.6, count=4)
DEBUG 2022-02-14 16:37:57,964 on stmt: $294unpack_sequence.7 = static_getitem(value=$294unpack_sequence.11, index=0, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:37:57,964 on stmt: $294unpack_sequence.8 = static_getitem(value=$294unpack_sequence.11, index=1, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:37:57,964 on stmt: $294unpack_sequence.9 = static_getitem(value=$294unpack_sequence.11, index=2, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:37:57,964 on stmt: $294unpack_sequence.10 = static_getitem(value=$294unpack_sequence.11, index=3, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:37:57,964 on stmt: AX_S = $294unpack_sequence.7
DEBUG 2022-02-14 16:37:57,964 on stmt: XD_S = $294unpack_sequence.8
DEBUG 2022-02-14 16:37:57,964 on stmt: D_S = $294unpack_sequence.9
DEBUG 2022-02-14 16:37:57,964 on stmt: oddVX_S = $294unpack_sequence.10
DEBUG 2022-02-14 16:37:57,964 on stmt: $304load_global.12 = global(eigvals: CPUDispatcher(<function eigvals at 0x7fa047e5d430>))
DEBUG 2022-02-14 16:37:57,964 on stmt: E = call $304load_global.12(AX_S, func=$304load_global.12, args=[Var(AX_S, loop_hafnian_batch.py:51)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:37:57,964 on stmt: $312load_global.15 = global(f_loop: CPUDispatcher(<function f_loop at 0x7fa047ebe9d0>))
DEBUG 2022-02-14 16:37:57,965 on stmt: f_even = call $312load_global.15(E, AX_S, XD_S, D_S, N_max, func=$312load_global.15, args=[Var(E, loop_hafnian_batch.py:53), Var(AX_S, loop_hafnian_batch.py:51), Var(XD_S, loop_hafnian_batch.py:51), Var(D_S, loop_hafnian_batch.py:51), Var(N_max, loop_hafnian_batch.py:26)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:37:57,965 on stmt: $328load_global.22 = global(f_loop_odd: CPUDispatcher(<function f_loop_odd at 0x7fa047ebeb80>))
DEBUG 2022-02-14 16:37:57,965 on stmt: f_odd = call $328load_global.22(E, AX_S, XD_S, D_S, N_max, oddloop, oddVX_S, func=$328load_global.22, args=[Var(E, loop_hafnian_batch.py:53), Var(AX_S, loop_hafnian_batch.py:51), Var(XD_S, loop_hafnian_batch.py:51), Var(D_S, loop_hafnian_batch.py:51), Var(N_max, loop_hafnian_batch.py:26), Var(oddloop, loop_hafnian_batch.py:20), Var(oddVX_S, loop_hafnian_batch.py:51)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:37:57,965 on stmt: $348load_global.31 = global(range: <class 'range'>)
DEBUG 2022-02-14 16:37:57,965 on stmt: $const350.32 = const(int, 2)
DEBUG 2022-02-14 16:37:57,965 on stmt: $const354.34 = const(int, 0)
DEBUG 2022-02-14 16:37:57,965 on stmt: $356binary_subscr.35 = static_getitem(value=kept_edges, index=0, index_var=$const354.34, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:37:57,965 on stmt: $358binary_multiply.36 = $const350.32 * $356binary_subscr.35
DEBUG 2022-02-14 16:37:57,965 on stmt: $const360.37 = const(int, 2)
DEBUG 2022-02-14 16:37:57,965 on stmt: $364binary_multiply.39 = $const360.37 * batch_max
DEBUG 2022-02-14 16:37:57,965 on stmt: $368binary_add.41 = $364binary_multiply.39 + odd_cutoff
DEBUG 2022-02-14 16:37:57,965 on stmt: $const370.42 = const(int, 1)
DEBUG 2022-02-14 16:37:57,965 on stmt: $372binary_add.43 = $368binary_add.41 + $const370.42
DEBUG 2022-02-14 16:37:57,965 on stmt: $374call_function.44 = call $348load_global.31($358binary_multiply.36, $372binary_add.43, func=$348load_global.31, args=[Var($358binary_multiply.36, loop_hafnian_batch.py:58), Var($372binary_add.43, loop_hafnian_batch.py:58)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:37:57,966 on stmt: $376get_iter.45 = getiter(value=$374call_function.44)
DEBUG 2022-02-14 16:37:57,966 on stmt: $phi378.1 = $376get_iter.45
DEBUG 2022-02-14 16:37:57,966 on stmt: jump 378
DEBUG 2022-02-14 16:37:57,966 ==== SSA block rewrite pass on 378
DEBUG 2022-02-14 16:37:57,966 Running <numba.core.ssa._FreshVarHandler object at 0x7fa047758340>
DEBUG 2022-02-14 16:37:57,966 on stmt: $378for_iter.2 = iternext(value=$phi378.1)
DEBUG 2022-02-14 16:37:57,966 on stmt: $378for_iter.3 = pair_first(value=$378for_iter.2)
DEBUG 2022-02-14 16:37:57,966 on stmt: $378for_iter.4 = pair_second(value=$378for_iter.2)
DEBUG 2022-02-14 16:37:57,966 on stmt: $phi380.2 = $378for_iter.3
DEBUG 2022-02-14 16:37:57,966 on stmt: branch $378for_iter.4, 380, 510
DEBUG 2022-02-14 16:37:57,966 ==== SSA block rewrite pass on 380
DEBUG 2022-02-14 16:37:57,966 Running <numba.core.ssa._FreshVarHandler object at 0x7fa047758340>
DEBUG 2022-02-14 16:37:57,966 on stmt: N_det = $phi380.2
DEBUG 2022-02-14 16:37:57,966 on stmt: N = N_fixed + N_det
DEBUG 2022-02-14 16:37:57,966 on stmt: $const390.6 = const(float, -1.0)
DEBUG 2022-02-14 16:37:57,966 on stmt: $const394.8 = const(int, 2)
DEBUG 2022-02-14 16:37:57,966 on stmt: $396binary_floor_divide.9 = N // $const394.8
DEBUG 2022-02-14 16:37:57,967 on stmt: $400binary_subtract.11 = $396binary_floor_divide.9 - edges_sum
DEBUG 2022-02-14 16:37:57,967 on stmt: plus_minus = $const390.6 ** $400binary_subtract.11
DEBUG 2022-02-14 16:37:57,967 on stmt: $const410.15 = const(int, 2)
DEBUG 2022-02-14 16:37:57,967 on stmt: $412binary_floor_divide.16 = N_det // $const410.15
DEBUG 2022-02-14 16:37:57,967 on stmt: $const416.18 = const(int, 0)
DEBUG 2022-02-14 16:37:57,967 on stmt: $418binary_subscr.19 = static_getitem(value=kept_edges, index=0, index_var=$const416.18, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:37:57,967 on stmt: $420build_tuple.20 = build_tuple(items=[Var($412binary_floor_divide.16, loop_hafnian_batch.py:62), Var($418binary_subscr.19, loop_hafnian_batch.py:62)])
DEBUG 2022-02-14 16:37:57,967 on stmt: $422binary_subscr.21 = getitem(value=binoms, index=$420build_tuple.20, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:37:57,967 on stmt: n_det_binom_prod = $422binary_subscr.21 * binom_prod.2
DEBUG 2022-02-14 16:37:57,967 on stmt: $const432.25 = const(int, 2)
DEBUG 2022-02-14 16:37:57,967 on stmt: $434binary_modulo.26 = N_det % $const432.25
DEBUG 2022-02-14 16:37:57,967 on stmt: $const436.27 = const(int, 0)
DEBUG 2022-02-14 16:37:57,967 on stmt: $438compare_op.28 = $434binary_modulo.26 == $const436.27
DEBUG 2022-02-14 16:37:57,967 on stmt: bool440 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:37:57,967 on stmt: $440pred = call bool440($438compare_op.28, func=bool440, args=(Var($438compare_op.28, loop_hafnian_batch.py:64),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:37:57,967 on stmt: branch $440pred, 444, 478
DEBUG 2022-02-14 16:37:57,967 ==== SSA block rewrite pass on 444
DEBUG 2022-02-14 16:37:57,967 Running <numba.core.ssa._FreshVarHandler object at 0x7fa047758340>
DEBUG 2022-02-14 16:37:57,968 on stmt: $450binary_subscr.6 = getitem(value=Hnew, index=N_det, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:37:57,968 on stmt: $456binary_multiply.9 = n_det_binom_prod * plus_minus
DEBUG 2022-02-14 16:37:57,968 on stmt: $const462.12 = const(int, 2)
DEBUG 2022-02-14 16:37:57,968 on stmt: $464binary_floor_divide.13 = N // $const462.12
DEBUG 2022-02-14 16:37:57,968 on stmt: $466binary_subscr.14 = getitem(value=f_even, index=$464binary_floor_divide.13, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:37:57,968 on stmt: $468binary_multiply.15 = $456binary_multiply.9 * $466binary_subscr.14
DEBUG 2022-02-14 16:37:57,968 on stmt: $470inplace_add.16 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$450binary_subscr.6, rhs=$468binary_multiply.15, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:37:57,968 on stmt: Hnew[N_det] = $470inplace_add.16
DEBUG 2022-02-14 16:37:57,968 on stmt: jump 506
DEBUG 2022-02-14 16:37:57,968 ==== SSA block rewrite pass on 478
DEBUG 2022-02-14 16:37:57,968 Running <numba.core.ssa._FreshVarHandler object at 0x7fa047758340>
DEBUG 2022-02-14 16:37:57,968 on stmt: $484binary_subscr.6 = getitem(value=Hnew, index=N_det, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:37:57,968 on stmt: $490binary_multiply.9 = n_det_binom_prod * plus_minus
DEBUG 2022-02-14 16:37:57,968 on stmt: $496binary_subscr.12 = getitem(value=f_odd, index=N, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:37:57,968 on stmt: $498binary_multiply.13 = $490binary_multiply.9 * $496binary_subscr.12
DEBUG 2022-02-14 16:37:57,968 on stmt: $500inplace_add.14 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$484binary_subscr.6, rhs=$498binary_multiply.13, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:37:57,968 on stmt: Hnew[N_det] = $500inplace_add.14
DEBUG 2022-02-14 16:37:57,968 on stmt: jump 506
DEBUG 2022-02-14 16:37:57,969 ==== SSA block rewrite pass on 506
DEBUG 2022-02-14 16:37:57,969 Running <numba.core.ssa._FreshVarHandler object at 0x7fa047758340>
DEBUG 2022-02-14 16:37:57,969 on stmt: jump 378
DEBUG 2022-02-14 16:37:57,969 ==== SSA block rewrite pass on 510
DEBUG 2022-02-14 16:37:57,969 Running <numba.core.ssa._FreshVarHandler object at 0x7fa047758340>
DEBUG 2022-02-14 16:37:57,969 on stmt: $514inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=H_batch.2, rhs=Hnew, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:37:57,969 on stmt: H_batch.1 = $514inplace_add.3
DEBUG 2022-02-14 16:37:57,969 on stmt: jump 158
DEBUG 2022-02-14 16:37:57,969 ==== SSA block rewrite pass on 520
DEBUG 2022-02-14 16:37:57,969 Running <numba.core.ssa._FreshVarHandler object at 0x7fa047758340>
DEBUG 2022-02-14 16:37:57,969 on stmt: bool522 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:37:57,969 on stmt: $522pred = call bool522(glynn, func=bool522, args=(Var(glynn, loop_hafnian_batch.py:20),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:37:57,969 on stmt: branch $522pred, 526, 580
DEBUG 2022-02-14 16:37:57,969 ==== SSA block rewrite pass on 526
DEBUG 2022-02-14 16:37:57,969 Running <numba.core.ssa._FreshVarHandler object at 0x7fa047758340>
DEBUG 2022-02-14 16:37:57,969 on stmt: $526load_global.0 = global(range: <class 'range'>)
DEBUG 2022-02-14 16:37:57,969 on stmt: $530load_attr.2 = getattr(value=H_batch.2, attr=shape)
DEBUG 2022-02-14 16:37:57,969 on stmt: $const532.3 = const(int, 0)
DEBUG 2022-02-14 16:37:57,969 on stmt: $534binary_subscr.4 = static_getitem(value=$530load_attr.2, index=0, index_var=$const532.3, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:37:57,969 on stmt: $536call_function.5 = call $526load_global.0($534binary_subscr.4, func=$526load_global.0, args=[Var($534binary_subscr.4, loop_hafnian_batch.py:72)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:37:57,970 on stmt: $538get_iter.6 = getiter(value=$536call_function.5)
DEBUG 2022-02-14 16:37:57,970 on stmt: $phi540.0 = $538get_iter.6
DEBUG 2022-02-14 16:37:57,970 on stmt: jump 540
DEBUG 2022-02-14 16:37:57,970 ==== SSA block rewrite pass on 540
DEBUG 2022-02-14 16:37:57,970 Running <numba.core.ssa._FreshVarHandler object at 0x7fa047758340>
DEBUG 2022-02-14 16:37:57,970 on stmt: $540for_iter.1 = iternext(value=$phi540.0)
DEBUG 2022-02-14 16:37:57,970 on stmt: $540for_iter.2 = pair_first(value=$540for_iter.1)
DEBUG 2022-02-14 16:37:57,970 on stmt: $540for_iter.3 = pair_second(value=$540for_iter.1)
DEBUG 2022-02-14 16:37:57,970 on stmt: $phi542.1 = $540for_iter.2
DEBUG 2022-02-14 16:37:57,970 on stmt: branch $540for_iter.3, 542, 580
DEBUG 2022-02-14 16:37:57,970 ==== SSA block rewrite pass on 542
DEBUG 2022-02-14 16:37:57,970 Running <numba.core.ssa._FreshVarHandler object at 0x7fa047758340>
DEBUG 2022-02-14 16:37:57,970 on stmt: j.1 = $phi542.1
DEBUG 2022-02-14 16:37:57,970 on stmt: x = N_fixed + j.1
DEBUG 2022-02-14 16:37:57,970 on stmt: $558binary_subscr.9 = getitem(value=H_batch.2, index=j.1, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:37:57,970 on stmt: $const560.10 = const(float, 0.5)
DEBUG 2022-02-14 16:37:57,970 on stmt: $const564.12 = const(int, 2)
DEBUG 2022-02-14 16:37:57,971 on stmt: $566binary_floor_divide.13 = x // $const564.12
DEBUG 2022-02-14 16:37:57,971 on stmt: $568binary_power.14 = $const560.10 ** $566binary_floor_divide.13
DEBUG 2022-02-14 16:37:57,971 on stmt: $570inplace_multiply.15 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=$558binary_subscr.9, rhs=$568binary_power.14, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:37:57,971 on stmt: H_batch.2[j.1] = $570inplace_multiply.15
DEBUG 2022-02-14 16:37:57,971 on stmt: jump 540
DEBUG 2022-02-14 16:37:57,971 ==== SSA block rewrite pass on 580
DEBUG 2022-02-14 16:37:57,971 Running <numba.core.ssa._FreshVarHandler object at 0x7fa047758340>
DEBUG 2022-02-14 16:37:57,971 on stmt: $582return_value.1 = cast(value=H_batch.2)
DEBUG 2022-02-14 16:37:57,971 on stmt: return $582return_value.1
DEBUG 2022-02-14 16:37:57,971 Replaced assignments: defaultdict(<class 'list'>,
            {264: [<numba.core.ir.Assign object at 0x7fa047704370>],
             278: [<numba.core.ir.Assign object at 0x7fa047704c70>]})
DEBUG 2022-02-14 16:37:57,971 ==== SSA block rewrite pass on 0
DEBUG 2022-02-14 16:37:57,971 Running <numba.core.ssa._FixSSAVars object at 0x7fa0476adf70>
DEBUG 2022-02-14 16:37:57,971 on stmt: A = arg(0, name=A)
DEBUG 2022-02-14 16:37:57,971 on stmt: D = arg(1, name=D)
DEBUG 2022-02-14 16:37:57,971 on stmt: fixed_edge_reps = arg(2, name=fixed_edge_reps)
DEBUG 2022-02-14 16:37:57,971 on stmt: batch_max = arg(3, name=batch_max)
DEBUG 2022-02-14 16:37:57,971 on stmt: odd_cutoff = arg(4, name=odd_cutoff)
DEBUG 2022-02-14 16:37:57,972 on stmt: glynn = arg(5, name=glynn)
DEBUG 2022-02-14 16:37:57,972 on stmt: $const4.1 = const(int, 0)
DEBUG 2022-02-14 16:37:57,972 on stmt: oddloop = static_getitem(value=D, index=0, index_var=$const4.1, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:37:57,972 on stmt: $const12.4 = const(int, 0)
DEBUG 2022-02-14 16:37:57,972 on stmt: $const14.5 = const(NoneType, None)
DEBUG 2022-02-14 16:37:57,972 on stmt: $const16.6 = const(NoneType, None)
DEBUG 2022-02-14 16:37:57,972 on stmt: $18build_slice.7 = global(slice: <class 'slice'>)
DEBUG 2022-02-14 16:37:57,972 on stmt: $18build_slice.8 = call $18build_slice.7($const14.5, $const16.6, func=$18build_slice.7, args=(Var($const14.5, loop_hafnian_batch.py:21), Var($const16.6, loop_hafnian_batch.py:21)), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:37:57,972 on stmt: $20build_tuple.9 = build_tuple(items=[Var($const12.4, loop_hafnian_batch.py:21), Var($18build_slice.8, loop_hafnian_batch.py:21)])
DEBUG 2022-02-14 16:37:57,972 on stmt: oddV = static_getitem(value=A, index=(0, slice(None, None, None)), index_var=$20build_tuple.9, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:37:57,972 on stmt: $28load_attr.12 = getattr(value=A, attr=shape)
DEBUG 2022-02-14 16:37:57,972 on stmt: $const30.13 = const(int, 0)
DEBUG 2022-02-14 16:37:57,972 on stmt: n = static_getitem(value=$28load_attr.12, index=0, index_var=$const30.13, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:37:57,972 on stmt: $const36.15 = const(int, 2)
DEBUG 2022-02-14 16:37:57,972 on stmt: $40load_method.17 = getattr(value=fixed_edge_reps, attr=sum)
DEBUG 2022-02-14 16:37:57,972 on stmt: $42call_method.18 = call $40load_method.17(func=$40load_method.17, args=[], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:37:57,972 on stmt: N_fixed = $const36.15 * $42call_method.18
DEBUG 2022-02-14 16:37:57,972 on stmt: $const50.21 = const(int, 2)
DEBUG 2022-02-14 16:37:57,972 on stmt: $54binary_multiply.23 = $const50.21 * batch_max
DEBUG 2022-02-14 16:37:57,973 on stmt: $56binary_add.24 = N_fixed + $54binary_multiply.23
DEBUG 2022-02-14 16:37:57,973 on stmt: N_max = $56binary_add.24 + odd_cutoff
DEBUG 2022-02-14 16:37:57,973 on stmt: $64load_global.27 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:37:57,973 on stmt: $66load_method.28 = getattr(value=$64load_global.27, attr=concatenate)
DEBUG 2022-02-14 16:37:57,973 on stmt: $68load_global.29 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:37:57,973 on stmt: $70load_method.30 = getattr(value=$68load_global.29, attr=array)
DEBUG 2022-02-14 16:37:57,973 on stmt: $74build_list.32 = build_list(items=[Var(batch_max, loop_hafnian_batch.py:20)])
DEBUG 2022-02-14 16:37:57,973 on stmt: $76call_method.33 = call $70load_method.30($74build_list.32, func=$70load_method.30, args=[Var($74build_list.32, loop_hafnian_batch.py:28)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:37:57,973 on stmt: $80build_tuple.35 = build_tuple(items=[Var($76call_method.33, loop_hafnian_batch.py:28), Var(fixed_edge_reps, loop_hafnian_batch.py:20)])
DEBUG 2022-02-14 16:37:57,973 on stmt: edge_reps = call $66load_method.28($80build_tuple.35, func=$66load_method.28, args=[Var($80build_tuple.35, loop_hafnian_batch.py:28)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:37:57,973 on stmt: $86load_global.37 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:37:57,973 on stmt: $88load_method.38 = getattr(value=$86load_global.37, attr=prod)
DEBUG 2022-02-14 16:37:57,973 on stmt: $const92.40 = const(int, 1)
DEBUG 2022-02-14 16:37:57,973 on stmt: $94binary_add.41 = edge_reps + $const92.40
DEBUG 2022-02-14 16:37:57,973 on stmt: steps = call $88load_method.38($94binary_add.41, func=$88load_method.38, args=[Var($94binary_add.41, loop_hafnian_batch.py:29)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:37:57,973 on stmt: $102load_method.44 = getattr(value=edge_reps, attr=max)
DEBUG 2022-02-14 16:37:57,973 on stmt: $104call_method.45 = call $102load_method.44(func=$102load_method.44, args=[], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:37:57,974 on stmt: max_binom = $104call_method.45 + odd_cutoff
DEBUG 2022-02-14 16:37:57,974 on stmt: $112load_global.48 = global(precompute_binoms: CPUDispatcher(<function precompute_binoms at 0x7fa047ebe310>))
DEBUG 2022-02-14 16:37:57,974 on stmt: binoms = call $112load_global.48(max_binom, func=$112load_global.48, args=[Var(max_binom, loop_hafnian_batch.py:31)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:37:57,974 on stmt: $120load_global.51 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:37:57,974 on stmt: $122load_attr.52 = getattr(value=$120load_global.51, attr=zeros)
DEBUG 2022-02-14 16:37:57,974 on stmt: $const124.53 = const(int, 2)
DEBUG 2022-02-14 16:37:57,974 on stmt: $128binary_multiply.55 = $const124.53 * batch_max
DEBUG 2022-02-14 16:37:57,974 on stmt: $132binary_add.57 = $128binary_multiply.55 + odd_cutoff
DEBUG 2022-02-14 16:37:57,974 on stmt: $const134.58 = const(int, 1)
DEBUG 2022-02-14 16:37:57,974 on stmt: $136binary_add.59 = $132binary_add.57 + $const134.58
DEBUG 2022-02-14 16:37:57,974 on stmt: $138load_global.60 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:37:57,974 on stmt: $140load_attr.61 = getattr(value=$138load_global.60, attr=complex128)
DEBUG 2022-02-14 16:37:57,974 on stmt: H_batch = call $122load_attr.52($136binary_add.59, func=$122load_attr.52, args=[Var($136binary_add.59, loop_hafnian_batch.py:34)], kws=[('dtype', Var($140load_attr.61, loop_hafnian_batch.py:34))], vararg=None, target=None)
DEBUG 2022-02-14 16:37:57,974 on stmt: $148load_global.64 = global(numba: <module 'numba' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numba/__init__.py'>)
DEBUG 2022-02-14 16:37:57,974 on stmt: $150load_method.65 = getattr(value=$148load_global.64, attr=prange)
DEBUG 2022-02-14 16:37:57,974 on stmt: $154call_method.67 = call $150load_method.65(steps, func=$150load_method.65, args=[Var(steps, loop_hafnian_batch.py:29)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:37:57,974 on stmt: $156get_iter.68 = getiter(value=$154call_method.67)
DEBUG 2022-02-14 16:37:57,974 on stmt: $phi158.0 = $156get_iter.68
DEBUG 2022-02-14 16:37:57,975 on stmt: jump 158
DEBUG 2022-02-14 16:37:57,975 ==== SSA block rewrite pass on 158
DEBUG 2022-02-14 16:37:57,975 Running <numba.core.ssa._FixSSAVars object at 0x7fa0476adf70>
DEBUG 2022-02-14 16:37:57,975 on stmt: H_batch.2 = phi(incoming_values=[Var(H_batch, loop_hafnian_batch.py:34), Var(H_batch.1, loop_hafnian_batch.py:69)], incoming_blocks=[0, 510])
DEBUG 2022-02-14 16:37:57,975 on stmt: $158for_iter.1 = iternext(value=$phi158.0)
DEBUG 2022-02-14 16:37:57,975 on stmt: $158for_iter.2 = pair_first(value=$158for_iter.1)
DEBUG 2022-02-14 16:37:57,975 on stmt: $158for_iter.3 = pair_second(value=$158for_iter.1)
DEBUG 2022-02-14 16:37:57,975 on stmt: $phi162.1 = $158for_iter.2
DEBUG 2022-02-14 16:37:57,975 on stmt: branch $158for_iter.3, 162, 520
DEBUG 2022-02-14 16:37:57,975 ==== SSA block rewrite pass on 162
DEBUG 2022-02-14 16:37:57,975 Running <numba.core.ssa._FixSSAVars object at 0x7fa0476adf70>
DEBUG 2022-02-14 16:37:57,975 on stmt: j = $phi162.1
DEBUG 2022-02-14 16:37:57,975 on stmt: $164load_global.2 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:37:57,975 on stmt: $166load_attr.3 = getattr(value=$164load_global.2, attr=zeros)
DEBUG 2022-02-14 16:37:57,975 on stmt: $const168.4 = const(int, 2)
DEBUG 2022-02-14 16:37:57,975 on stmt: $172binary_multiply.6 = $const168.4 * batch_max
DEBUG 2022-02-14 16:37:57,975 on stmt: $176binary_add.8 = $172binary_multiply.6 + odd_cutoff
DEBUG 2022-02-14 16:37:57,975 on stmt: $const178.9 = const(int, 1)
DEBUG 2022-02-14 16:37:57,975 on stmt: $180binary_add.10 = $176binary_add.8 + $const178.9
DEBUG 2022-02-14 16:37:57,976 on stmt: $182load_global.11 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:37:57,976 on stmt: $184load_attr.12 = getattr(value=$182load_global.11, attr=complex128)
DEBUG 2022-02-14 16:37:57,976 on stmt: Hnew = call $166load_attr.3($180binary_add.10, func=$166load_attr.3, args=[Var($180binary_add.10, loop_hafnian_batch.py:37)], kws=[('dtype', Var($184load_attr.12, loop_hafnian_batch.py:37))], vararg=None, target=None)
DEBUG 2022-02-14 16:37:57,976 on stmt: $192load_global.15 = global(find_kept_edges: CPUDispatcher(<function find_kept_edges at 0x7fa047ebe790>))
DEBUG 2022-02-14 16:37:57,976 on stmt: kept_edges = call $192load_global.15(j, edge_reps, func=$192load_global.15, args=[Var(j, loop_hafnian_batch.py:35), Var(edge_reps, loop_hafnian_batch.py:28)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:37:57,976 on stmt: $204load_method.20 = getattr(value=kept_edges, attr=sum)
DEBUG 2022-02-14 16:37:57,976 on stmt: edges_sum = call $204load_method.20(func=$204load_method.20, args=[], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:37:57,976 on stmt: binom_prod = const(float, 1.0)
DEBUG 2022-02-14 16:37:57,976 on stmt: $214load_global.23 = global(range: <class 'range'>)
DEBUG 2022-02-14 16:37:57,976 on stmt: $const216.24 = const(int, 1)
DEBUG 2022-02-14 16:37:57,976 on stmt: $const220.26 = const(int, 2)
DEBUG 2022-02-14 16:37:57,976 on stmt: $222binary_floor_divide.27 = n // $const220.26
DEBUG 2022-02-14 16:37:57,976 on stmt: $224call_function.28 = call $214load_global.23($const216.24, $222binary_floor_divide.27, func=$214load_global.23, args=[Var($const216.24, loop_hafnian_batch.py:43), Var($222binary_floor_divide.27, loop_hafnian_batch.py:43)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:37:57,976 on stmt: $226get_iter.29 = getiter(value=$224call_function.28)
DEBUG 2022-02-14 16:37:57,976 on stmt: $phi228.1 = $226get_iter.29
DEBUG 2022-02-14 16:37:57,976 on stmt: jump 228
DEBUG 2022-02-14 16:37:57,976 ==== SSA block rewrite pass on 228
DEBUG 2022-02-14 16:37:57,976 Running <numba.core.ssa._FixSSAVars object at 0x7fa0476adf70>
DEBUG 2022-02-14 16:37:57,976 on stmt: binom_prod.2 = phi(incoming_values=[Var(binom_prod, loop_hafnian_batch.py:42), Var(binom_prod.1, loop_hafnian_batch.py:44)], incoming_blocks=[162, 230])
DEBUG 2022-02-14 16:37:57,977 on stmt: $228for_iter.2 = iternext(value=$phi228.1)
DEBUG 2022-02-14 16:37:57,977 on stmt: $228for_iter.3 = pair_first(value=$228for_iter.2)
DEBUG 2022-02-14 16:37:57,977 on stmt: $228for_iter.4 = pair_second(value=$228for_iter.2)
DEBUG 2022-02-14 16:37:57,977 on stmt: $phi230.2 = $228for_iter.3
DEBUG 2022-02-14 16:37:57,977 on stmt: branch $228for_iter.4, 230, 258
DEBUG 2022-02-14 16:37:57,977 ==== SSA block rewrite pass on 230
DEBUG 2022-02-14 16:37:57,977 Running <numba.core.ssa._FixSSAVars object at 0x7fa0476adf70>
DEBUG 2022-02-14 16:37:57,977 on stmt: i = $phi230.2
DEBUG 2022-02-14 16:37:57,977 on stmt: $240binary_subscr.7 = getitem(value=edge_reps, index=i, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:37:57,977 on stmt: $246binary_subscr.10 = getitem(value=kept_edges, index=i, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:37:57,977 on stmt: $248build_tuple.11 = build_tuple(items=[Var($240binary_subscr.7, loop_hafnian_batch.py:44), Var($246binary_subscr.10, loop_hafnian_batch.py:44)])
DEBUG 2022-02-14 16:37:57,977 on stmt: $250binary_subscr.12 = getitem(value=binoms, index=$248build_tuple.11, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:37:57,977 on stmt: $252inplace_multiply.13 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=binom_prod.2, rhs=$250binary_subscr.12, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:37:57,977 on stmt: binom_prod.1 = $252inplace_multiply.13
DEBUG 2022-02-14 16:37:57,977 on stmt: jump 228
DEBUG 2022-02-14 16:37:57,977 ==== SSA block rewrite pass on 258
DEBUG 2022-02-14 16:37:57,977 Running <numba.core.ssa._FixSSAVars object at 0x7fa0476adf70>
DEBUG 2022-02-14 16:37:57,977 on stmt: bool260 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:37:57,977 on stmt: $260pred = call bool260(glynn, func=bool260, args=(Var(glynn, loop_hafnian_batch.py:20),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:37:57,978 on stmt: branch $260pred, 264, 278
DEBUG 2022-02-14 16:37:57,978 ==== SSA block rewrite pass on 264
DEBUG 2022-02-14 16:37:57,978 Running <numba.core.ssa._FixSSAVars object at 0x7fa0476adf70>
DEBUG 2022-02-14 16:37:57,978 on stmt: $const264.1 = const(int, 2)
DEBUG 2022-02-14 16:37:57,978 on stmt: $268binary_multiply.3 = $const264.1 * kept_edges
DEBUG 2022-02-14 16:37:57,978 on stmt: delta = $268binary_multiply.3 - edge_reps
DEBUG 2022-02-14 16:37:57,978 on stmt: jump 282
DEBUG 2022-02-14 16:37:57,978 ==== SSA block rewrite pass on 278
DEBUG 2022-02-14 16:37:57,978 Running <numba.core.ssa._FixSSAVars object at 0x7fa0476adf70>
DEBUG 2022-02-14 16:37:57,978 on stmt: delta.1 = kept_edges
DEBUG 2022-02-14 16:37:57,978 on stmt: jump 282
DEBUG 2022-02-14 16:37:57,978 ==== SSA block rewrite pass on 282
DEBUG 2022-02-14 16:37:57,978 Running <numba.core.ssa._FixSSAVars object at 0x7fa0476adf70>
DEBUG 2022-02-14 16:37:57,978 on stmt: $282load_global.1 = global(get_submatrices: CPUDispatcher(<function get_submatrices at 0x7fa047ebed30>))
DEBUG 2022-02-14 16:37:57,978 on stmt: $292call_function.6 = call $282load_global.1(delta, A, D, oddV, func=$282load_global.1, args=[Var(delta, loop_hafnian_batch.py:47), Var(A, loop_hafnian_batch.py:20), Var(D, loop_hafnian_batch.py:20), Var(oddV, loop_hafnian_batch.py:21)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:37:57,978 find_def var='delta' stmt=$292call_function.6 = call $282load_global.1(delta, A, D, oddV, func=$282load_global.1, args=[Var(delta, loop_hafnian_batch.py:47), Var(A, loop_hafnian_batch.py:20), Var(D, loop_hafnian_batch.py:20), Var(oddV, loop_hafnian_batch.py:21)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:37:57,978 find_def_from_top label 282
DEBUG 2022-02-14 16:37:57,978 insert phi node delta.2 = phi(incoming_values=[], incoming_blocks=[]) at 282
DEBUG 2022-02-14 16:37:57,978 find_def_from_bottom label 264
DEBUG 2022-02-14 16:37:57,979 incoming_def delta = $268binary_multiply.3 - edge_reps
DEBUG 2022-02-14 16:37:57,979 find_def_from_bottom label 278
DEBUG 2022-02-14 16:37:57,979 incoming_def delta.1 = kept_edges
DEBUG 2022-02-14 16:37:57,979 replaced with: $292call_function.6 = call $282load_global.1(delta.2, A, D, oddV, func=$282load_global.1, args=[Var(delta.2, loop_hafnian_batch.py:51), Var(A, loop_hafnian_batch.py:20), Var(D, loop_hafnian_batch.py:20), Var(oddV, loop_hafnian_batch.py:21)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:37:57,979 on stmt: $294unpack_sequence.11 = exhaust_iter(value=$292call_function.6, count=4)
DEBUG 2022-02-14 16:37:57,979 on stmt: $294unpack_sequence.7 = static_getitem(value=$294unpack_sequence.11, index=0, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:37:57,979 on stmt: $294unpack_sequence.8 = static_getitem(value=$294unpack_sequence.11, index=1, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:37:57,979 on stmt: $294unpack_sequence.9 = static_getitem(value=$294unpack_sequence.11, index=2, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:37:57,979 on stmt: $294unpack_sequence.10 = static_getitem(value=$294unpack_sequence.11, index=3, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:37:57,979 on stmt: AX_S = $294unpack_sequence.7
DEBUG 2022-02-14 16:37:57,979 on stmt: XD_S = $294unpack_sequence.8
DEBUG 2022-02-14 16:37:57,979 on stmt: D_S = $294unpack_sequence.9
DEBUG 2022-02-14 16:37:57,979 on stmt: oddVX_S = $294unpack_sequence.10
DEBUG 2022-02-14 16:37:57,979 on stmt: $304load_global.12 = global(eigvals: CPUDispatcher(<function eigvals at 0x7fa047e5d430>))
DEBUG 2022-02-14 16:37:57,979 on stmt: E = call $304load_global.12(AX_S, func=$304load_global.12, args=[Var(AX_S, loop_hafnian_batch.py:51)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:37:57,979 on stmt: $312load_global.15 = global(f_loop: CPUDispatcher(<function f_loop at 0x7fa047ebe9d0>))
DEBUG 2022-02-14 16:37:57,979 on stmt: f_even = call $312load_global.15(E, AX_S, XD_S, D_S, N_max, func=$312load_global.15, args=[Var(E, loop_hafnian_batch.py:53), Var(AX_S, loop_hafnian_batch.py:51), Var(XD_S, loop_hafnian_batch.py:51), Var(D_S, loop_hafnian_batch.py:51), Var(N_max, loop_hafnian_batch.py:26)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:37:57,979 on stmt: $328load_global.22 = global(f_loop_odd: CPUDispatcher(<function f_loop_odd at 0x7fa047ebeb80>))
DEBUG 2022-02-14 16:37:57,980 on stmt: f_odd = call $328load_global.22(E, AX_S, XD_S, D_S, N_max, oddloop, oddVX_S, func=$328load_global.22, args=[Var(E, loop_hafnian_batch.py:53), Var(AX_S, loop_hafnian_batch.py:51), Var(XD_S, loop_hafnian_batch.py:51), Var(D_S, loop_hafnian_batch.py:51), Var(N_max, loop_hafnian_batch.py:26), Var(oddloop, loop_hafnian_batch.py:20), Var(oddVX_S, loop_hafnian_batch.py:51)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:37:57,980 on stmt: $348load_global.31 = global(range: <class 'range'>)
DEBUG 2022-02-14 16:37:57,980 on stmt: $const350.32 = const(int, 2)
DEBUG 2022-02-14 16:37:57,980 on stmt: $const354.34 = const(int, 0)
DEBUG 2022-02-14 16:37:57,980 on stmt: $356binary_subscr.35 = static_getitem(value=kept_edges, index=0, index_var=$const354.34, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:37:57,980 on stmt: $358binary_multiply.36 = $const350.32 * $356binary_subscr.35
DEBUG 2022-02-14 16:37:57,980 on stmt: $const360.37 = const(int, 2)
DEBUG 2022-02-14 16:37:57,980 on stmt: $364binary_multiply.39 = $const360.37 * batch_max
DEBUG 2022-02-14 16:37:57,980 on stmt: $368binary_add.41 = $364binary_multiply.39 + odd_cutoff
DEBUG 2022-02-14 16:37:57,980 on stmt: $const370.42 = const(int, 1)
DEBUG 2022-02-14 16:37:57,980 on stmt: $372binary_add.43 = $368binary_add.41 + $const370.42
DEBUG 2022-02-14 16:37:57,980 on stmt: $374call_function.44 = call $348load_global.31($358binary_multiply.36, $372binary_add.43, func=$348load_global.31, args=[Var($358binary_multiply.36, loop_hafnian_batch.py:58), Var($372binary_add.43, loop_hafnian_batch.py:58)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:37:57,980 on stmt: $376get_iter.45 = getiter(value=$374call_function.44)
DEBUG 2022-02-14 16:37:57,980 on stmt: $phi378.1 = $376get_iter.45
DEBUG 2022-02-14 16:37:57,980 on stmt: jump 378
DEBUG 2022-02-14 16:37:57,980 ==== SSA block rewrite pass on 378
DEBUG 2022-02-14 16:37:57,980 Running <numba.core.ssa._FixSSAVars object at 0x7fa0476adf70>
DEBUG 2022-02-14 16:37:57,980 on stmt: $378for_iter.2 = iternext(value=$phi378.1)
DEBUG 2022-02-14 16:37:57,980 on stmt: $378for_iter.3 = pair_first(value=$378for_iter.2)
DEBUG 2022-02-14 16:37:57,981 on stmt: $378for_iter.4 = pair_second(value=$378for_iter.2)
DEBUG 2022-02-14 16:37:57,981 on stmt: $phi380.2 = $378for_iter.3
DEBUG 2022-02-14 16:37:57,981 on stmt: branch $378for_iter.4, 380, 510
DEBUG 2022-02-14 16:37:57,981 ==== SSA block rewrite pass on 380
DEBUG 2022-02-14 16:37:57,981 Running <numba.core.ssa._FixSSAVars object at 0x7fa0476adf70>
DEBUG 2022-02-14 16:37:57,981 on stmt: N_det = $phi380.2
DEBUG 2022-02-14 16:37:57,981 on stmt: N = N_fixed + N_det
DEBUG 2022-02-14 16:37:57,981 on stmt: $const390.6 = const(float, -1.0)
DEBUG 2022-02-14 16:37:57,981 on stmt: $const394.8 = const(int, 2)
DEBUG 2022-02-14 16:37:57,981 on stmt: $396binary_floor_divide.9 = N // $const394.8
DEBUG 2022-02-14 16:37:57,981 on stmt: $400binary_subtract.11 = $396binary_floor_divide.9 - edges_sum
DEBUG 2022-02-14 16:37:57,981 on stmt: plus_minus = $const390.6 ** $400binary_subtract.11
DEBUG 2022-02-14 16:37:57,981 on stmt: $const410.15 = const(int, 2)
DEBUG 2022-02-14 16:37:57,981 on stmt: $412binary_floor_divide.16 = N_det // $const410.15
DEBUG 2022-02-14 16:37:57,981 on stmt: $const416.18 = const(int, 0)
DEBUG 2022-02-14 16:37:57,981 on stmt: $418binary_subscr.19 = static_getitem(value=kept_edges, index=0, index_var=$const416.18, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:37:57,981 on stmt: $420build_tuple.20 = build_tuple(items=[Var($412binary_floor_divide.16, loop_hafnian_batch.py:62), Var($418binary_subscr.19, loop_hafnian_batch.py:62)])
DEBUG 2022-02-14 16:37:57,981 on stmt: $422binary_subscr.21 = getitem(value=binoms, index=$420build_tuple.20, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:37:57,981 on stmt: n_det_binom_prod = $422binary_subscr.21 * binom_prod.2
DEBUG 2022-02-14 16:37:57,982 on stmt: $const432.25 = const(int, 2)
DEBUG 2022-02-14 16:37:57,982 on stmt: $434binary_modulo.26 = N_det % $const432.25
DEBUG 2022-02-14 16:37:57,982 on stmt: $const436.27 = const(int, 0)
DEBUG 2022-02-14 16:37:57,982 on stmt: $438compare_op.28 = $434binary_modulo.26 == $const436.27
DEBUG 2022-02-14 16:37:57,982 on stmt: bool440 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:37:57,982 on stmt: $440pred = call bool440($438compare_op.28, func=bool440, args=(Var($438compare_op.28, loop_hafnian_batch.py:64),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:37:57,982 on stmt: branch $440pred, 444, 478
DEBUG 2022-02-14 16:37:57,982 ==== SSA block rewrite pass on 444
DEBUG 2022-02-14 16:37:57,982 Running <numba.core.ssa._FixSSAVars object at 0x7fa0476adf70>
DEBUG 2022-02-14 16:37:57,982 on stmt: $450binary_subscr.6 = getitem(value=Hnew, index=N_det, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:37:57,982 on stmt: $456binary_multiply.9 = n_det_binom_prod * plus_minus
DEBUG 2022-02-14 16:37:57,982 on stmt: $const462.12 = const(int, 2)
DEBUG 2022-02-14 16:37:57,982 on stmt: $464binary_floor_divide.13 = N // $const462.12
DEBUG 2022-02-14 16:37:57,982 on stmt: $466binary_subscr.14 = getitem(value=f_even, index=$464binary_floor_divide.13, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:37:57,982 on stmt: $468binary_multiply.15 = $456binary_multiply.9 * $466binary_subscr.14
DEBUG 2022-02-14 16:37:57,982 on stmt: $470inplace_add.16 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$450binary_subscr.6, rhs=$468binary_multiply.15, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:37:57,982 on stmt: Hnew[N_det] = $470inplace_add.16
DEBUG 2022-02-14 16:37:57,982 on stmt: jump 506
DEBUG 2022-02-14 16:37:57,983 ==== SSA block rewrite pass on 478
DEBUG 2022-02-14 16:37:57,983 Running <numba.core.ssa._FixSSAVars object at 0x7fa0476adf70>
DEBUG 2022-02-14 16:37:57,983 on stmt: $484binary_subscr.6 = getitem(value=Hnew, index=N_det, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:37:57,983 on stmt: $490binary_multiply.9 = n_det_binom_prod * plus_minus
DEBUG 2022-02-14 16:37:57,983 on stmt: $496binary_subscr.12 = getitem(value=f_odd, index=N, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:37:57,983 on stmt: $498binary_multiply.13 = $490binary_multiply.9 * $496binary_subscr.12
DEBUG 2022-02-14 16:37:57,983 on stmt: $500inplace_add.14 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$484binary_subscr.6, rhs=$498binary_multiply.13, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:37:57,983 on stmt: Hnew[N_det] = $500inplace_add.14
DEBUG 2022-02-14 16:37:57,983 on stmt: jump 506
DEBUG 2022-02-14 16:37:57,983 ==== SSA block rewrite pass on 506
DEBUG 2022-02-14 16:37:57,983 Running <numba.core.ssa._FixSSAVars object at 0x7fa0476adf70>
DEBUG 2022-02-14 16:37:57,983 on stmt: jump 378
DEBUG 2022-02-14 16:37:57,983 ==== SSA block rewrite pass on 510
DEBUG 2022-02-14 16:37:57,983 Running <numba.core.ssa._FixSSAVars object at 0x7fa0476adf70>
DEBUG 2022-02-14 16:37:57,983 on stmt: $514inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=H_batch.2, rhs=Hnew, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:37:57,983 on stmt: H_batch.1 = $514inplace_add.3
DEBUG 2022-02-14 16:37:57,983 on stmt: jump 158
DEBUG 2022-02-14 16:37:57,983 ==== SSA block rewrite pass on 520
DEBUG 2022-02-14 16:37:57,984 Running <numba.core.ssa._FixSSAVars object at 0x7fa0476adf70>
DEBUG 2022-02-14 16:37:57,984 on stmt: bool522 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:37:57,984 on stmt: $522pred = call bool522(glynn, func=bool522, args=(Var(glynn, loop_hafnian_batch.py:20),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:37:57,984 on stmt: branch $522pred, 526, 580
DEBUG 2022-02-14 16:37:57,984 ==== SSA block rewrite pass on 526
DEBUG 2022-02-14 16:37:57,984 Running <numba.core.ssa._FixSSAVars object at 0x7fa0476adf70>
DEBUG 2022-02-14 16:37:57,984 on stmt: $526load_global.0 = global(range: <class 'range'>)
DEBUG 2022-02-14 16:37:57,984 on stmt: $530load_attr.2 = getattr(value=H_batch.2, attr=shape)
DEBUG 2022-02-14 16:37:57,984 on stmt: $const532.3 = const(int, 0)
DEBUG 2022-02-14 16:37:57,984 on stmt: $534binary_subscr.4 = static_getitem(value=$530load_attr.2, index=0, index_var=$const532.3, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:37:57,984 on stmt: $536call_function.5 = call $526load_global.0($534binary_subscr.4, func=$526load_global.0, args=[Var($534binary_subscr.4, loop_hafnian_batch.py:72)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:37:57,984 on stmt: $538get_iter.6 = getiter(value=$536call_function.5)
DEBUG 2022-02-14 16:37:57,984 on stmt: $phi540.0 = $538get_iter.6
DEBUG 2022-02-14 16:37:57,984 on stmt: jump 540
DEBUG 2022-02-14 16:37:57,984 ==== SSA block rewrite pass on 540
DEBUG 2022-02-14 16:37:57,984 Running <numba.core.ssa._FixSSAVars object at 0x7fa0476adf70>
DEBUG 2022-02-14 16:37:57,984 on stmt: $540for_iter.1 = iternext(value=$phi540.0)
DEBUG 2022-02-14 16:37:57,984 on stmt: $540for_iter.2 = pair_first(value=$540for_iter.1)
DEBUG 2022-02-14 16:37:57,984 on stmt: $540for_iter.3 = pair_second(value=$540for_iter.1)
DEBUG 2022-02-14 16:37:57,984 on stmt: $phi542.1 = $540for_iter.2
DEBUG 2022-02-14 16:37:57,985 on stmt: branch $540for_iter.3, 542, 580
DEBUG 2022-02-14 16:37:57,985 ==== SSA block rewrite pass on 542
DEBUG 2022-02-14 16:37:57,985 Running <numba.core.ssa._FixSSAVars object at 0x7fa0476adf70>
DEBUG 2022-02-14 16:37:57,985 on stmt: j.1 = $phi542.1
DEBUG 2022-02-14 16:37:57,985 on stmt: x = N_fixed + j.1
DEBUG 2022-02-14 16:37:57,985 on stmt: $558binary_subscr.9 = getitem(value=H_batch.2, index=j.1, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:37:57,985 on stmt: $const560.10 = const(float, 0.5)
DEBUG 2022-02-14 16:37:57,985 on stmt: $const564.12 = const(int, 2)
DEBUG 2022-02-14 16:37:57,985 on stmt: $566binary_floor_divide.13 = x // $const564.12
DEBUG 2022-02-14 16:37:57,985 on stmt: $568binary_power.14 = $const560.10 ** $566binary_floor_divide.13
DEBUG 2022-02-14 16:37:57,985 on stmt: $570inplace_multiply.15 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=$558binary_subscr.9, rhs=$568binary_power.14, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:37:57,985 on stmt: H_batch.2[j.1] = $570inplace_multiply.15
DEBUG 2022-02-14 16:37:57,985 on stmt: jump 540
DEBUG 2022-02-14 16:37:57,985 ==== SSA block rewrite pass on 580
DEBUG 2022-02-14 16:37:57,985 Running <numba.core.ssa._FixSSAVars object at 0x7fa0476adf70>
DEBUG 2022-02-14 16:37:57,985 on stmt: $582return_value.1 = cast(value=H_batch.2)
DEBUG 2022-02-14 16:37:57,985 on stmt: return $582return_value.1
DEBUG 2022-02-14 16:37:58,000 bytecode dump:
>          0	NOP(arg=None, lineno=3)
           2	LOAD_GLOBAL(arg=0, lineno=3)
           4	LOAD_FAST(arg=0, lineno=3)
           6	CALL_FUNCTION(arg=1, lineno=3)
           8	RETURN_VALUE(arg=None, lineno=3)
DEBUG 2022-02-14 16:37:58,000 pending: deque([State(pc_initial=0 nstack_initial=0)])
DEBUG 2022-02-14 16:37:58,000 stack: []
DEBUG 2022-02-14 16:37:58,000 dispatch pc=0, inst=NOP(arg=None, lineno=3)
DEBUG 2022-02-14 16:37:58,000 stack []
DEBUG 2022-02-14 16:37:58,000 dispatch pc=2, inst=LOAD_GLOBAL(arg=0, lineno=3)
DEBUG 2022-02-14 16:37:58,000 stack []
DEBUG 2022-02-14 16:37:58,000 dispatch pc=4, inst=LOAD_FAST(arg=0, lineno=3)
DEBUG 2022-02-14 16:37:58,001 stack ['$2load_global.0']
DEBUG 2022-02-14 16:37:58,001 dispatch pc=6, inst=CALL_FUNCTION(arg=1, lineno=3)
DEBUG 2022-02-14 16:37:58,001 stack ['$2load_global.0', '$tmp04.1']
DEBUG 2022-02-14 16:37:58,001 dispatch pc=8, inst=RETURN_VALUE(arg=None, lineno=3)
DEBUG 2022-02-14 16:37:58,001 stack ['$6call_function.2']
DEBUG 2022-02-14 16:37:58,001 end state. edges=[]
DEBUG 2022-02-14 16:37:58,001 -------------------------Prune PHIs-------------------------
DEBUG 2022-02-14 16:37:58,001 Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
DEBUG 2022-02-14 16:37:58,001 defmap: {}
DEBUG 2022-02-14 16:37:58,001 phismap: defaultdict(<class 'set'>, {})
DEBUG 2022-02-14 16:37:58,001 changing phismap: defaultdict(<class 'set'>, {})
DEBUG 2022-02-14 16:37:58,001 keep phismap: {}
DEBUG 2022-02-14 16:37:58,001 new_out: defaultdict(<class 'dict'>, {})
DEBUG 2022-02-14 16:37:58,001 ----------------------DONE Prune PHIs-----------------------
DEBUG 2022-02-14 16:37:58,001 block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$2load_global.0'}), (4, {'res': '$tmp04.1'}), (6, {'func': '$2load_global.0', 'args': ['$tmp04.1'], 'res': '$6call_function.2'}), (8, {'retval': '$6call_function.2', 'castval': '$8return_value.3'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG 2022-02-14 16:37:58,002 label 0:
    tmp0 = arg(0, name=tmp0)                 ['tmp0']
    $2load_global.0 = global(intrin: <intrinsic stub>) ['$2load_global.0']
    $6call_function.2 = call $2load_global.0(tmp0, func=$2load_global.0, args=[Var(tmp0, <string>:3)], kws=(), vararg=None, target=None) ['$2load_global.0', '$6call_function.2', 'tmp0']
    $8return_value.3 = cast(value=$6call_function.2) ['$6call_function.2', '$8return_value.3']
    return $8return_value.3                  ['$8return_value.3']

DEBUG 2022-02-14 16:37:58,004 ==== SSA block analysis pass on 0
DEBUG 2022-02-14 16:37:58,004 Running <numba.core.ssa._GatherDefsHandler object at 0x7fa047625790>
DEBUG 2022-02-14 16:37:58,004 on stmt: tmp0 = arg(0, name=tmp0)
DEBUG 2022-02-14 16:37:58,004 on stmt: $2load_global.0 = global(intrin: <intrinsic stub>)
DEBUG 2022-02-14 16:37:58,004 on stmt: $6call_function.2 = call $2load_global.0(tmp0, func=$2load_global.0, args=[Var(tmp0, <string>:3)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:37:58,004 on stmt: $8return_value.3 = cast(value=$6call_function.2)
DEBUG 2022-02-14 16:37:58,004 on stmt: return $8return_value.3
DEBUG 2022-02-14 16:37:58,004 defs defaultdict(<class 'list'>,
            {'$2load_global.0': [<numba.core.ir.Assign object at 0x7fa04762b760>],
             '$6call_function.2': [<numba.core.ir.Assign object at 0x7fa04762ba60>],
             '$8return_value.3': [<numba.core.ir.Assign object at 0x7fa04762bb80>],
             'tmp0': [<numba.core.ir.Assign object at 0x7fa047620fd0>]})
DEBUG 2022-02-14 16:37:58,004 SSA violators set()
DEBUG 2022-02-14 16:37:58,018 bytecode dump:
>          0	NOP(arg=None, lineno=3543)
           2	LOAD_FAST(arg=0, lineno=3543)
           4	LOAD_METHOD(arg=0, lineno=3543)
           6	LOAD_FAST(arg=1, lineno=3543)
           8	LOAD_FAST(arg=2, lineno=3543)
          10	CALL_METHOD(arg=2, lineno=3543)
          12	RETURN_VALUE(arg=None, lineno=3543)
DEBUG 2022-02-14 16:37:58,019 pending: deque([State(pc_initial=0 nstack_initial=0)])
DEBUG 2022-02-14 16:37:58,019 stack: []
DEBUG 2022-02-14 16:37:58,019 dispatch pc=0, inst=NOP(arg=None, lineno=3543)
DEBUG 2022-02-14 16:37:58,019 stack []
DEBUG 2022-02-14 16:37:58,019 dispatch pc=2, inst=LOAD_FAST(arg=0, lineno=3543)
DEBUG 2022-02-14 16:37:58,019 stack []
DEBUG 2022-02-14 16:37:58,019 dispatch pc=4, inst=LOAD_METHOD(arg=0, lineno=3543)
DEBUG 2022-02-14 16:37:58,019 stack ['$arrtype2.0']
DEBUG 2022-02-14 16:37:58,019 dispatch pc=6, inst=LOAD_FAST(arg=1, lineno=3543)
DEBUG 2022-02-14 16:37:58,019 stack ['$4load_method.1']
DEBUG 2022-02-14 16:37:58,020 dispatch pc=8, inst=LOAD_FAST(arg=2, lineno=3543)
DEBUG 2022-02-14 16:37:58,020 stack ['$4load_method.1', '$size6.2']
DEBUG 2022-02-14 16:37:58,020 dispatch pc=10, inst=CALL_METHOD(arg=2, lineno=3543)
DEBUG 2022-02-14 16:37:58,020 stack ['$4load_method.1', '$size6.2', '$align8.3']
DEBUG 2022-02-14 16:37:58,020 dispatch pc=12, inst=RETURN_VALUE(arg=None, lineno=3543)
DEBUG 2022-02-14 16:37:58,020 stack ['$10call_method.4']
DEBUG 2022-02-14 16:37:58,020 end state. edges=[]
DEBUG 2022-02-14 16:37:58,020 -------------------------Prune PHIs-------------------------
DEBUG 2022-02-14 16:37:58,020 Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
DEBUG 2022-02-14 16:37:58,020 defmap: {}
DEBUG 2022-02-14 16:37:58,021 phismap: defaultdict(<class 'set'>, {})
DEBUG 2022-02-14 16:37:58,021 changing phismap: defaultdict(<class 'set'>, {})
DEBUG 2022-02-14 16:37:58,021 keep phismap: {}
DEBUG 2022-02-14 16:37:58,021 new_out: defaultdict(<class 'dict'>, {})
DEBUG 2022-02-14 16:37:58,021 ----------------------DONE Prune PHIs-----------------------
DEBUG 2022-02-14 16:37:58,021 block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$arrtype2.0'}), (4, {'item': '$arrtype2.0', 'res': '$4load_method.1'}), (6, {'res': '$size6.2'}), (8, {'res': '$align8.3'}), (10, {'func': '$4load_method.1', 'args': ['$size6.2', '$align8.3'], 'res': '$10call_method.4'}), (12, {'retval': '$10call_method.4', 'castval': '$12return_value.5'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG 2022-02-14 16:37:58,022 label 0:
    arrtype = arg(0, name=arrtype)           ['arrtype']
    size = arg(1, name=size)                 ['size']
    align = arg(2, name=align)               ['align']
    $4load_method.1 = getattr(value=arrtype, attr=_allocate) ['$4load_method.1', 'arrtype']
    $10call_method.4 = call $4load_method.1(size, align, func=$4load_method.1, args=[Var(size, arrayobj.py:3543), Var(align, arrayobj.py:3543)], kws=(), vararg=None, target=None) ['$10call_method.4', '$4load_method.1', 'align', 'size']
    $12return_value.5 = cast(value=$10call_method.4) ['$10call_method.4', '$12return_value.5']
    return $12return_value.5                 ['$12return_value.5']

DEBUG 2022-02-14 16:37:58,026 ==== SSA block analysis pass on 0
DEBUG 2022-02-14 16:37:58,026 Running <numba.core.ssa._GatherDefsHandler object at 0x7fa0475f3c10>
DEBUG 2022-02-14 16:37:58,026 on stmt: arrtype = arg(0, name=arrtype)
DEBUG 2022-02-14 16:37:58,026 on stmt: size = arg(1, name=size)
DEBUG 2022-02-14 16:37:58,026 on stmt: align = arg(2, name=align)
DEBUG 2022-02-14 16:37:58,026 on stmt: $4load_method.1 = getattr(value=arrtype, attr=_allocate)
DEBUG 2022-02-14 16:37:58,026 on stmt: $10call_method.4 = call $4load_method.1(size, align, func=$4load_method.1, args=[Var(size, arrayobj.py:3543), Var(align, arrayobj.py:3543)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:37:58,026 on stmt: $12return_value.5 = cast(value=$10call_method.4)
DEBUG 2022-02-14 16:37:58,027 on stmt: return $12return_value.5
DEBUG 2022-02-14 16:37:58,027 defs defaultdict(<class 'list'>,
            {'$10call_method.4': [<numba.core.ir.Assign object at 0x7fa0475fadf0>],
             '$12return_value.5': [<numba.core.ir.Assign object at 0x7fa0475faee0>],
             '$4load_method.1': [<numba.core.ir.Assign object at 0x7fa0475fa9a0>],
             'align': [<numba.core.ir.Assign object at 0x7fa0475fa700>],
             'arrtype': [<numba.core.ir.Assign object at 0x7fa0475fa190>],
             'size': [<numba.core.ir.Assign object at 0x7fa0475fa070>]})
DEBUG 2022-02-14 16:37:58,027 SSA violators set()
DEBUG 2022-02-14 16:37:58,029 bytecode dump:
>          0	NOP(arg=None, lineno=3536)
           2	LOAD_GLOBAL(arg=0, lineno=3536)
           4	LOAD_FAST(arg=1, lineno=3536)
           6	LOAD_FAST(arg=2, lineno=3536)
           8	CALL_FUNCTION(arg=2, lineno=3536)
          10	RETURN_VALUE(arg=None, lineno=3536)
DEBUG 2022-02-14 16:37:58,030 pending: deque([State(pc_initial=0 nstack_initial=0)])
DEBUG 2022-02-14 16:37:58,030 stack: []
DEBUG 2022-02-14 16:37:58,030 dispatch pc=0, inst=NOP(arg=None, lineno=3536)
DEBUG 2022-02-14 16:37:58,030 stack []
DEBUG 2022-02-14 16:37:58,030 dispatch pc=2, inst=LOAD_GLOBAL(arg=0, lineno=3536)
DEBUG 2022-02-14 16:37:58,030 stack []
DEBUG 2022-02-14 16:37:58,030 dispatch pc=4, inst=LOAD_FAST(arg=1, lineno=3536)
DEBUG 2022-02-14 16:37:58,030 stack ['$2load_global.0']
DEBUG 2022-02-14 16:37:58,030 dispatch pc=6, inst=LOAD_FAST(arg=2, lineno=3536)
DEBUG 2022-02-14 16:37:58,030 stack ['$2load_global.0', '$allocsize4.1']
DEBUG 2022-02-14 16:37:58,030 dispatch pc=8, inst=CALL_FUNCTION(arg=2, lineno=3536)
DEBUG 2022-02-14 16:37:58,030 stack ['$2load_global.0', '$allocsize4.1', '$align6.2']
DEBUG 2022-02-14 16:37:58,030 dispatch pc=10, inst=RETURN_VALUE(arg=None, lineno=3536)
DEBUG 2022-02-14 16:37:58,030 stack ['$8call_function.3']
DEBUG 2022-02-14 16:37:58,031 end state. edges=[]
DEBUG 2022-02-14 16:37:58,031 -------------------------Prune PHIs-------------------------
DEBUG 2022-02-14 16:37:58,031 Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
DEBUG 2022-02-14 16:37:58,031 defmap: {}
DEBUG 2022-02-14 16:37:58,031 phismap: defaultdict(<class 'set'>, {})
DEBUG 2022-02-14 16:37:58,031 changing phismap: defaultdict(<class 'set'>, {})
DEBUG 2022-02-14 16:37:58,031 keep phismap: {}
DEBUG 2022-02-14 16:37:58,031 new_out: defaultdict(<class 'dict'>, {})
DEBUG 2022-02-14 16:37:58,031 ----------------------DONE Prune PHIs-----------------------
DEBUG 2022-02-14 16:37:58,031 block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$2load_global.0'}), (4, {'res': '$allocsize4.1'}), (6, {'res': '$align6.2'}), (8, {'func': '$2load_global.0', 'args': ['$allocsize4.1', '$align6.2'], 'res': '$8call_function.3'}), (10, {'retval': '$8call_function.3', 'castval': '$10return_value.4'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG 2022-02-14 16:37:58,032 label 0:
    cls = arg(0, name=cls)                   ['cls']
    allocsize = arg(1, name=allocsize)       ['allocsize']
    align = arg(2, name=align)               ['align']
    $2load_global.0 = global(intrin_alloc: <intrinsic intrin_alloc>) ['$2load_global.0']
    $8call_function.3 = call $2load_global.0(allocsize, align, func=$2load_global.0, args=[Var(allocsize, arrayobj.py:3536), Var(align, arrayobj.py:3536)], kws=(), vararg=None, target=None) ['$2load_global.0', '$8call_function.3', 'align', 'allocsize']
    $10return_value.4 = cast(value=$8call_function.3) ['$10return_value.4', '$8call_function.3']
    return $10return_value.4                 ['$10return_value.4']

DEBUG 2022-02-14 16:37:58,034 ==== SSA block analysis pass on 0
DEBUG 2022-02-14 16:37:58,035 Running <numba.core.ssa._GatherDefsHandler object at 0x7fa0475fa430>
DEBUG 2022-02-14 16:37:58,035 on stmt: cls = arg(0, name=cls)
DEBUG 2022-02-14 16:37:58,035 on stmt: allocsize = arg(1, name=allocsize)
DEBUG 2022-02-14 16:37:58,035 on stmt: align = arg(2, name=align)
DEBUG 2022-02-14 16:37:58,035 on stmt: $2load_global.0 = global(intrin_alloc: <intrinsic intrin_alloc>)
DEBUG 2022-02-14 16:37:58,035 on stmt: $8call_function.3 = call $2load_global.0(allocsize, align, func=$2load_global.0, args=[Var(allocsize, arrayobj.py:3536), Var(align, arrayobj.py:3536)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:37:58,035 on stmt: $10return_value.4 = cast(value=$8call_function.3)
DEBUG 2022-02-14 16:37:58,035 on stmt: return $10return_value.4
DEBUG 2022-02-14 16:37:58,036 defs defaultdict(<class 'list'>,
            {'$10return_value.4': [<numba.core.ir.Assign object at 0x7fa04757e9a0>],
             '$2load_global.0': [<numba.core.ir.Assign object at 0x7fa04757e460>],
             '$8call_function.3': [<numba.core.ir.Assign object at 0x7fa04757e880>],
             'align': [<numba.core.ir.Assign object at 0x7fa04757e2e0>],
             'allocsize': [<numba.core.ir.Assign object at 0x7fa0475752e0>],
             'cls': [<numba.core.ir.Assign object at 0x7fa047575100>]})
DEBUG 2022-02-14 16:37:58,036 SSA violators set()
DEBUG 2022-02-14 16:37:58,148 bytecode dump:
>          0	NOP(arg=None, lineno=3)
           2	LOAD_GLOBAL(arg=0, lineno=3)
           4	LOAD_FAST(arg=0, lineno=3)
           6	CALL_FUNCTION(arg=1, lineno=3)
           8	RETURN_VALUE(arg=None, lineno=3)
DEBUG 2022-02-14 16:37:58,149 pending: deque([State(pc_initial=0 nstack_initial=0)])
DEBUG 2022-02-14 16:37:58,149 stack: []
DEBUG 2022-02-14 16:37:58,149 dispatch pc=0, inst=NOP(arg=None, lineno=3)
DEBUG 2022-02-14 16:37:58,149 stack []
DEBUG 2022-02-14 16:37:58,149 dispatch pc=2, inst=LOAD_GLOBAL(arg=0, lineno=3)
DEBUG 2022-02-14 16:37:58,149 stack []
DEBUG 2022-02-14 16:37:58,149 dispatch pc=4, inst=LOAD_FAST(arg=0, lineno=3)
DEBUG 2022-02-14 16:37:58,150 stack ['$2load_global.0']
DEBUG 2022-02-14 16:37:58,150 dispatch pc=6, inst=CALL_FUNCTION(arg=1, lineno=3)
DEBUG 2022-02-14 16:37:58,150 stack ['$2load_global.0', '$tmp04.1']
DEBUG 2022-02-14 16:37:58,150 dispatch pc=8, inst=RETURN_VALUE(arg=None, lineno=3)
DEBUG 2022-02-14 16:37:58,150 stack ['$6call_function.2']
DEBUG 2022-02-14 16:37:58,150 end state. edges=[]
DEBUG 2022-02-14 16:37:58,150 -------------------------Prune PHIs-------------------------
DEBUG 2022-02-14 16:37:58,150 Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
DEBUG 2022-02-14 16:37:58,150 defmap: {}
DEBUG 2022-02-14 16:37:58,150 phismap: defaultdict(<class 'set'>, {})
DEBUG 2022-02-14 16:37:58,151 changing phismap: defaultdict(<class 'set'>, {})
DEBUG 2022-02-14 16:37:58,151 keep phismap: {}
DEBUG 2022-02-14 16:37:58,151 new_out: defaultdict(<class 'dict'>, {})
DEBUG 2022-02-14 16:37:58,151 ----------------------DONE Prune PHIs-----------------------
DEBUG 2022-02-14 16:37:58,151 block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$2load_global.0'}), (4, {'res': '$tmp04.1'}), (6, {'func': '$2load_global.0', 'args': ['$tmp04.1'], 'res': '$6call_function.2'}), (8, {'retval': '$6call_function.2', 'castval': '$8return_value.3'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG 2022-02-14 16:37:58,152 label 0:
    tmp0 = arg(0, name=tmp0)                 ['tmp0']
    $2load_global.0 = global(intrin: <intrinsic stub>) ['$2load_global.0']
    $6call_function.2 = call $2load_global.0(tmp0, func=$2load_global.0, args=[Var(tmp0, <string>:3)], kws=(), vararg=None, target=None) ['$2load_global.0', '$6call_function.2', 'tmp0']
    $8return_value.3 = cast(value=$6call_function.2) ['$6call_function.2', '$8return_value.3']
    return $8return_value.3                  ['$8return_value.3']

DEBUG 2022-02-14 16:37:58,154 ==== SSA block analysis pass on 0
DEBUG 2022-02-14 16:37:58,154 Running <numba.core.ssa._GatherDefsHandler object at 0x7fa0474da6d0>
DEBUG 2022-02-14 16:37:58,154 on stmt: tmp0 = arg(0, name=tmp0)
DEBUG 2022-02-14 16:37:58,155 on stmt: $2load_global.0 = global(intrin: <intrinsic stub>)
DEBUG 2022-02-14 16:37:58,155 on stmt: $6call_function.2 = call $2load_global.0(tmp0, func=$2load_global.0, args=[Var(tmp0, <string>:3)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:37:58,155 on stmt: $8return_value.3 = cast(value=$6call_function.2)
DEBUG 2022-02-14 16:37:58,155 on stmt: return $8return_value.3
DEBUG 2022-02-14 16:37:58,155 defs defaultdict(<class 'list'>,
            {'$2load_global.0': [<numba.core.ir.Assign object at 0x7fa0474da0a0>],
             '$6call_function.2': [<numba.core.ir.Assign object at 0x7fa0474db0a0>],
             '$8return_value.3': [<numba.core.ir.Assign object at 0x7fa0474db1c0>],
             'tmp0': [<numba.core.ir.Assign object at 0x7fa0474da3d0>]})
DEBUG 2022-02-14 16:37:58,156 SSA violators set()
DEBUG 2022-02-14 16:37:58,290 bytecode dump:
>          0	NOP(arg=None, lineno=23)
           2	LOAD_GLOBAL(arg=0, lineno=23)
           4	LOAD_ATTR(arg=1, lineno=23)
           6	LOAD_FAST(arg=0, lineno=23)
           8	LOAD_CONST(arg=1, lineno=23)
          10	BINARY_ADD(arg=None, lineno=23)
          12	LOAD_FAST(arg=0, lineno=23)
          14	LOAD_CONST(arg=1, lineno=23)
          16	BINARY_ADD(arg=None, lineno=23)
          18	BUILD_TUPLE(arg=2, lineno=23)
          20	LOAD_GLOBAL(arg=2, lineno=23)
          22	LOAD_FAST(arg=0, lineno=23)
          24	CALL_FUNCTION(arg=1, lineno=23)
          26	LOAD_CONST(arg=2, lineno=23)
          28	CALL_FUNCTION_KW(arg=2, lineno=23)
          30	STORE_FAST(arg=1, lineno=23)
          32	LOAD_GLOBAL(arg=3, lineno=24)
          34	LOAD_FAST(arg=0, lineno=24)
          36	LOAD_CONST(arg=1, lineno=24)
          38	BINARY_ADD(arg=None, lineno=24)
          40	CALL_FUNCTION(arg=1, lineno=24)
          42	GET_ITER(arg=None, lineno=24)
>         44	FOR_ITER(arg=40, lineno=24)
          46	STORE_FAST(arg=2, lineno=24)
          48	LOAD_GLOBAL(arg=3, lineno=25)
          50	LOAD_FAST(arg=0, lineno=25)
          52	LOAD_CONST(arg=1, lineno=25)
          54	BINARY_ADD(arg=None, lineno=25)
          56	CALL_FUNCTION(arg=1, lineno=25)
          58	GET_ITER(arg=None, lineno=25)
>         60	FOR_ITER(arg=22, lineno=25)
          62	STORE_FAST(arg=3, lineno=25)
          64	LOAD_GLOBAL(arg=4, lineno=26)
          66	LOAD_FAST(arg=2, lineno=26)
          68	LOAD_FAST(arg=3, lineno=26)
          70	CALL_FUNCTION(arg=2, lineno=26)
          72	LOAD_FAST(arg=1, lineno=26)
          74	LOAD_FAST(arg=2, lineno=26)
          76	LOAD_FAST(arg=3, lineno=26)
          78	BUILD_TUPLE(arg=2, lineno=26)
          80	STORE_SUBSCR(arg=None, lineno=26)
          82	JUMP_ABSOLUTE(arg=60, lineno=26)
>         84	JUMP_ABSOLUTE(arg=44, lineno=26)
>         86	LOAD_FAST(arg=1, lineno=27)
          88	RETURN_VALUE(arg=None, lineno=27)
DEBUG 2022-02-14 16:37:58,291 pending: deque([State(pc_initial=0 nstack_initial=0)])
DEBUG 2022-02-14 16:37:58,291 stack: []
DEBUG 2022-02-14 16:37:58,291 dispatch pc=0, inst=NOP(arg=None, lineno=23)
DEBUG 2022-02-14 16:37:58,291 stack []
DEBUG 2022-02-14 16:37:58,291 dispatch pc=2, inst=LOAD_GLOBAL(arg=0, lineno=23)
DEBUG 2022-02-14 16:37:58,291 stack []
DEBUG 2022-02-14 16:37:58,291 dispatch pc=4, inst=LOAD_ATTR(arg=1, lineno=23)
DEBUG 2022-02-14 16:37:58,291 stack ['$2load_global.0']
DEBUG 2022-02-14 16:37:58,291 dispatch pc=6, inst=LOAD_FAST(arg=0, lineno=23)
DEBUG 2022-02-14 16:37:58,291 stack ['$4load_attr.1']
DEBUG 2022-02-14 16:37:58,291 dispatch pc=8, inst=LOAD_CONST(arg=1, lineno=23)
DEBUG 2022-02-14 16:37:58,291 stack ['$4load_attr.1', '$max_binom6.2']
DEBUG 2022-02-14 16:37:58,292 dispatch pc=10, inst=BINARY_ADD(arg=None, lineno=23)
DEBUG 2022-02-14 16:37:58,292 stack ['$4load_attr.1', '$max_binom6.2', '$const8.3']
DEBUG 2022-02-14 16:37:58,292 dispatch pc=12, inst=LOAD_FAST(arg=0, lineno=23)
DEBUG 2022-02-14 16:37:58,292 stack ['$4load_attr.1', '$10binary_add.4']
DEBUG 2022-02-14 16:37:58,292 dispatch pc=14, inst=LOAD_CONST(arg=1, lineno=23)
DEBUG 2022-02-14 16:37:58,292 stack ['$4load_attr.1', '$10binary_add.4', '$max_binom12.5']
DEBUG 2022-02-14 16:37:58,292 dispatch pc=16, inst=BINARY_ADD(arg=None, lineno=23)
DEBUG 2022-02-14 16:37:58,292 stack ['$4load_attr.1', '$10binary_add.4', '$max_binom12.5', '$const14.6']
DEBUG 2022-02-14 16:37:58,292 dispatch pc=18, inst=BUILD_TUPLE(arg=2, lineno=23)
DEBUG 2022-02-14 16:37:58,292 stack ['$4load_attr.1', '$10binary_add.4', '$16binary_add.7']
DEBUG 2022-02-14 16:37:58,292 dispatch pc=20, inst=LOAD_GLOBAL(arg=2, lineno=23)
DEBUG 2022-02-14 16:37:58,292 stack ['$4load_attr.1', '$18build_tuple.8']
DEBUG 2022-02-14 16:37:58,292 dispatch pc=22, inst=LOAD_FAST(arg=0, lineno=23)
DEBUG 2022-02-14 16:37:58,293 stack ['$4load_attr.1', '$18build_tuple.8', '$20load_global.9']
DEBUG 2022-02-14 16:37:58,293 dispatch pc=24, inst=CALL_FUNCTION(arg=1, lineno=23)
DEBUG 2022-02-14 16:37:58,293 stack ['$4load_attr.1', '$18build_tuple.8', '$20load_global.9', '$max_binom22.10']
DEBUG 2022-02-14 16:37:58,293 dispatch pc=26, inst=LOAD_CONST(arg=2, lineno=23)
DEBUG 2022-02-14 16:37:58,293 stack ['$4load_attr.1', '$18build_tuple.8', '$24call_function.11']
DEBUG 2022-02-14 16:37:58,293 dispatch pc=28, inst=CALL_FUNCTION_KW(arg=2, lineno=23)
DEBUG 2022-02-14 16:37:58,293 stack ['$4load_attr.1', '$18build_tuple.8', '$24call_function.11', '$const26.12']
DEBUG 2022-02-14 16:37:58,293 dispatch pc=30, inst=STORE_FAST(arg=1, lineno=23)
DEBUG 2022-02-14 16:37:58,293 stack ['$28call_function_kw.13']
DEBUG 2022-02-14 16:37:58,293 dispatch pc=32, inst=LOAD_GLOBAL(arg=3, lineno=24)
DEBUG 2022-02-14 16:37:58,293 stack []
DEBUG 2022-02-14 16:37:58,293 dispatch pc=34, inst=LOAD_FAST(arg=0, lineno=24)
DEBUG 2022-02-14 16:37:58,293 stack ['$32load_global.14']
DEBUG 2022-02-14 16:37:58,294 dispatch pc=36, inst=LOAD_CONST(arg=1, lineno=24)
DEBUG 2022-02-14 16:37:58,294 stack ['$32load_global.14', '$max_binom34.15']
DEBUG 2022-02-14 16:37:58,294 dispatch pc=38, inst=BINARY_ADD(arg=None, lineno=24)
DEBUG 2022-02-14 16:37:58,294 stack ['$32load_global.14', '$max_binom34.15', '$const36.16']
DEBUG 2022-02-14 16:37:58,294 dispatch pc=40, inst=CALL_FUNCTION(arg=1, lineno=24)
DEBUG 2022-02-14 16:37:58,294 stack ['$32load_global.14', '$38binary_add.17']
DEBUG 2022-02-14 16:37:58,294 dispatch pc=42, inst=GET_ITER(arg=None, lineno=24)
DEBUG 2022-02-14 16:37:58,294 stack ['$40call_function.18']
DEBUG 2022-02-14 16:37:58,294 end state. edges=[Edge(pc=44, stack=('$42get_iter.19',), blockstack=(), npush=0)]
DEBUG 2022-02-14 16:37:58,294 pending: deque([State(pc_initial=44 nstack_initial=1)])
DEBUG 2022-02-14 16:37:58,294 stack: ['$phi44.0']
DEBUG 2022-02-14 16:37:58,294 dispatch pc=44, inst=FOR_ITER(arg=40, lineno=24)
DEBUG 2022-02-14 16:37:58,294 stack ['$phi44.0']
DEBUG 2022-02-14 16:37:58,295 end state. edges=[Edge(pc=86, stack=(), blockstack=(), npush=0), Edge(pc=46, stack=('$phi44.0', '$44for_iter.2'), blockstack=(), npush=0)]
DEBUG 2022-02-14 16:37:58,295 pending: deque([State(pc_initial=86 nstack_initial=0), State(pc_initial=46 nstack_initial=2)])
DEBUG 2022-02-14 16:37:58,295 stack: []
DEBUG 2022-02-14 16:37:58,295 dispatch pc=86, inst=LOAD_FAST(arg=1, lineno=27)
DEBUG 2022-02-14 16:37:58,295 stack []
DEBUG 2022-02-14 16:37:58,295 dispatch pc=88, inst=RETURN_VALUE(arg=None, lineno=27)
DEBUG 2022-02-14 16:37:58,295 stack ['$binoms86.0']
DEBUG 2022-02-14 16:37:58,295 end state. edges=[]
DEBUG 2022-02-14 16:37:58,295 pending: deque([State(pc_initial=46 nstack_initial=2)])
DEBUG 2022-02-14 16:37:58,295 stack: ['$phi46.0', '$phi46.1']
DEBUG 2022-02-14 16:37:58,295 dispatch pc=46, inst=STORE_FAST(arg=2, lineno=24)
DEBUG 2022-02-14 16:37:58,295 stack ['$phi46.0', '$phi46.1']
DEBUG 2022-02-14 16:37:58,295 dispatch pc=48, inst=LOAD_GLOBAL(arg=3, lineno=25)
DEBUG 2022-02-14 16:37:58,295 stack ['$phi46.0']
DEBUG 2022-02-14 16:37:58,296 dispatch pc=50, inst=LOAD_FAST(arg=0, lineno=25)
DEBUG 2022-02-14 16:37:58,296 stack ['$phi46.0', '$48load_global.2']
DEBUG 2022-02-14 16:37:58,296 dispatch pc=52, inst=LOAD_CONST(arg=1, lineno=25)
DEBUG 2022-02-14 16:37:58,296 stack ['$phi46.0', '$48load_global.2', '$max_binom50.3']
DEBUG 2022-02-14 16:37:58,296 dispatch pc=54, inst=BINARY_ADD(arg=None, lineno=25)
DEBUG 2022-02-14 16:37:58,296 stack ['$phi46.0', '$48load_global.2', '$max_binom50.3', '$const52.4']
DEBUG 2022-02-14 16:37:58,296 dispatch pc=56, inst=CALL_FUNCTION(arg=1, lineno=25)
DEBUG 2022-02-14 16:37:58,296 stack ['$phi46.0', '$48load_global.2', '$54binary_add.5']
DEBUG 2022-02-14 16:37:58,296 dispatch pc=58, inst=GET_ITER(arg=None, lineno=25)
DEBUG 2022-02-14 16:37:58,296 stack ['$phi46.0', '$56call_function.6']
DEBUG 2022-02-14 16:37:58,296 end state. edges=[Edge(pc=60, stack=('$phi46.0', '$58get_iter.7'), blockstack=(), npush=0)]
DEBUG 2022-02-14 16:37:58,296 pending: deque([State(pc_initial=60 nstack_initial=2)])
DEBUG 2022-02-14 16:37:58,296 stack: ['$phi60.0', '$phi60.1']
DEBUG 2022-02-14 16:37:58,297 dispatch pc=60, inst=FOR_ITER(arg=22, lineno=25)
DEBUG 2022-02-14 16:37:58,297 stack ['$phi60.0', '$phi60.1']
DEBUG 2022-02-14 16:37:58,297 end state. edges=[Edge(pc=84, stack=('$phi60.0',), blockstack=(), npush=0), Edge(pc=62, stack=('$phi60.0', '$phi60.1', '$60for_iter.3'), blockstack=(), npush=0)]
DEBUG 2022-02-14 16:37:58,297 pending: deque([State(pc_initial=84 nstack_initial=1), State(pc_initial=62 nstack_initial=3)])
DEBUG 2022-02-14 16:37:58,297 stack: ['$phi84.0']
DEBUG 2022-02-14 16:37:58,297 dispatch pc=84, inst=JUMP_ABSOLUTE(arg=44, lineno=26)
DEBUG 2022-02-14 16:37:58,297 stack ['$phi84.0']
DEBUG 2022-02-14 16:37:58,297 end state. edges=[Edge(pc=44, stack=('$phi84.0',), blockstack=(), npush=0)]
DEBUG 2022-02-14 16:37:58,297 pending: deque([State(pc_initial=62 nstack_initial=3), State(pc_initial=44 nstack_initial=1)])
DEBUG 2022-02-14 16:37:58,297 stack: ['$phi62.0', '$phi62.1', '$phi62.2']
DEBUG 2022-02-14 16:37:58,297 dispatch pc=62, inst=STORE_FAST(arg=3, lineno=25)
DEBUG 2022-02-14 16:37:58,297 stack ['$phi62.0', '$phi62.1', '$phi62.2']
DEBUG 2022-02-14 16:37:58,297 dispatch pc=64, inst=LOAD_GLOBAL(arg=4, lineno=26)
DEBUG 2022-02-14 16:37:58,298 stack ['$phi62.0', '$phi62.1']
DEBUG 2022-02-14 16:37:58,298 dispatch pc=66, inst=LOAD_FAST(arg=2, lineno=26)
DEBUG 2022-02-14 16:37:58,298 stack ['$phi62.0', '$phi62.1', '$64load_global.3']
DEBUG 2022-02-14 16:37:58,298 dispatch pc=68, inst=LOAD_FAST(arg=3, lineno=26)
DEBUG 2022-02-14 16:37:58,298 stack ['$phi62.0', '$phi62.1', '$64load_global.3', '$i66.4']
DEBUG 2022-02-14 16:37:58,298 dispatch pc=70, inst=CALL_FUNCTION(arg=2, lineno=26)
DEBUG 2022-02-14 16:37:58,298 stack ['$phi62.0', '$phi62.1', '$64load_global.3', '$i66.4', '$j68.5']
DEBUG 2022-02-14 16:37:58,298 dispatch pc=72, inst=LOAD_FAST(arg=1, lineno=26)
DEBUG 2022-02-14 16:37:58,298 stack ['$phi62.0', '$phi62.1', '$70call_function.6']
DEBUG 2022-02-14 16:37:58,298 dispatch pc=74, inst=LOAD_FAST(arg=2, lineno=26)
DEBUG 2022-02-14 16:37:58,298 stack ['$phi62.0', '$phi62.1', '$70call_function.6', '$binoms72.7']
DEBUG 2022-02-14 16:37:58,298 dispatch pc=76, inst=LOAD_FAST(arg=3, lineno=26)
DEBUG 2022-02-14 16:37:58,298 stack ['$phi62.0', '$phi62.1', '$70call_function.6', '$binoms72.7', '$i74.8']
DEBUG 2022-02-14 16:37:58,298 dispatch pc=78, inst=BUILD_TUPLE(arg=2, lineno=26)
DEBUG 2022-02-14 16:37:58,299 stack ['$phi62.0', '$phi62.1', '$70call_function.6', '$binoms72.7', '$i74.8', '$j76.9']
DEBUG 2022-02-14 16:37:58,299 dispatch pc=80, inst=STORE_SUBSCR(arg=None, lineno=26)
DEBUG 2022-02-14 16:37:58,299 stack ['$phi62.0', '$phi62.1', '$70call_function.6', '$binoms72.7', '$78build_tuple.10']
DEBUG 2022-02-14 16:37:58,299 dispatch pc=82, inst=JUMP_ABSOLUTE(arg=60, lineno=26)
DEBUG 2022-02-14 16:37:58,299 stack ['$phi62.0', '$phi62.1']
DEBUG 2022-02-14 16:37:58,299 end state. edges=[Edge(pc=60, stack=('$phi62.0', '$phi62.1'), blockstack=(), npush=0)]
DEBUG 2022-02-14 16:37:58,299 pending: deque([State(pc_initial=44 nstack_initial=1), State(pc_initial=60 nstack_initial=2)])
DEBUG 2022-02-14 16:37:58,299 pending: deque([State(pc_initial=60 nstack_initial=2)])
DEBUG 2022-02-14 16:37:58,299 -------------------------Prune PHIs-------------------------
DEBUG 2022-02-14 16:37:58,299 Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=44 nstack_initial=1): {'$phi44.0'},
             State(pc_initial=46 nstack_initial=2): {'$phi46.1'},
             State(pc_initial=60 nstack_initial=2): {'$phi60.1'},
             State(pc_initial=62 nstack_initial=3): {'$phi62.2'},
             State(pc_initial=84 nstack_initial=1): set(),
             State(pc_initial=86 nstack_initial=0): set()})
DEBUG 2022-02-14 16:37:58,300 defmap: {'$phi44.0': State(pc_initial=0 nstack_initial=0),
 '$phi46.1': State(pc_initial=44 nstack_initial=1),
 '$phi60.1': State(pc_initial=46 nstack_initial=2),
 '$phi62.2': State(pc_initial=60 nstack_initial=2)}
DEBUG 2022-02-14 16:37:58,300 phismap: defaultdict(<class 'set'>,
            {'$phi44.0': {('$42get_iter.19',
                           State(pc_initial=0 nstack_initial=0)),
                          ('$phi84.0', State(pc_initial=84 nstack_initial=1))},
             '$phi46.0': {('$phi44.0', State(pc_initial=44 nstack_initial=1))},
             '$phi46.1': {('$44for_iter.2',
                           State(pc_initial=44 nstack_initial=1))},
             '$phi60.0': {('$phi46.0', State(pc_initial=46 nstack_initial=2)),
                          ('$phi62.0', State(pc_initial=62 nstack_initial=3))},
             '$phi60.1': {('$58get_iter.7',
                           State(pc_initial=46 nstack_initial=2)),
                          ('$phi62.1', State(pc_initial=62 nstack_initial=3))},
             '$phi62.0': {('$phi60.0', State(pc_initial=60 nstack_initial=2))},
             '$phi62.1': {('$phi60.1', State(pc_initial=60 nstack_initial=2))},
             '$phi62.2': {('$60for_iter.3',
                           State(pc_initial=60 nstack_initial=2))},
             '$phi84.0': {('$phi60.0', State(pc_initial=60 nstack_initial=2))}})
DEBUG 2022-02-14 16:37:58,301 changing phismap: defaultdict(<class 'set'>,
            {'$phi44.0': {('$42get_iter.19',
                           State(pc_initial=0 nstack_initial=0)),
                          ('$phi60.0', State(pc_initial=60 nstack_initial=2))},
             '$phi46.0': {('$42get_iter.19',
                           State(pc_initial=0 nstack_initial=0)),
                          ('$phi60.0', State(pc_initial=60 nstack_initial=2))},
             '$phi46.1': {('$44for_iter.2',
                           State(pc_initial=44 nstack_initial=1))},
             '$phi60.0': {('$42get_iter.19',
                           State(pc_initial=0 nstack_initial=0)),
                          ('$phi60.0', State(pc_initial=60 nstack_initial=2))},
             '$phi60.1': {('$58get_iter.7',
                           State(pc_initial=46 nstack_initial=2)),
                          ('$phi60.1', State(pc_initial=60 nstack_initial=2))},
             '$phi62.0': {('$42get_iter.19',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi62.1': {('$58get_iter.7',
                           State(pc_initial=46 nstack_initial=2))},
             '$phi62.2': {('$60for_iter.3',
                           State(pc_initial=60 nstack_initial=2))},
             '$phi84.0': {('$42get_iter.19',
                           State(pc_initial=0 nstack_initial=0))}})
DEBUG 2022-02-14 16:37:58,301 changing phismap: defaultdict(<class 'set'>,
            {'$phi44.0': {('$42get_iter.19',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi46.0': {('$42get_iter.19',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi46.1': {('$44for_iter.2',
                           State(pc_initial=44 nstack_initial=1))},
             '$phi60.0': {('$42get_iter.19',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi60.1': {('$58get_iter.7',
                           State(pc_initial=46 nstack_initial=2))},
             '$phi62.0': {('$42get_iter.19',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi62.1': {('$58get_iter.7',
                           State(pc_initial=46 nstack_initial=2))},
             '$phi62.2': {('$60for_iter.3',
                           State(pc_initial=60 nstack_initial=2))},
             '$phi84.0': {('$42get_iter.19',
                           State(pc_initial=0 nstack_initial=0))}})
DEBUG 2022-02-14 16:37:58,302 changing phismap: defaultdict(<class 'set'>,
            {'$phi44.0': {('$42get_iter.19',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi46.0': {('$42get_iter.19',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi46.1': {('$44for_iter.2',
                           State(pc_initial=44 nstack_initial=1))},
             '$phi60.0': {('$42get_iter.19',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi60.1': {('$58get_iter.7',
                           State(pc_initial=46 nstack_initial=2))},
             '$phi62.0': {('$42get_iter.19',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi62.1': {('$58get_iter.7',
                           State(pc_initial=46 nstack_initial=2))},
             '$phi62.2': {('$60for_iter.3',
                           State(pc_initial=60 nstack_initial=2))},
             '$phi84.0': {('$42get_iter.19',
                           State(pc_initial=0 nstack_initial=0))}})
DEBUG 2022-02-14 16:37:58,303 keep phismap: {'$phi44.0': {('$42get_iter.19', State(pc_initial=0 nstack_initial=0))},
 '$phi46.1': {('$44for_iter.2', State(pc_initial=44 nstack_initial=1))},
 '$phi60.1': {('$58get_iter.7', State(pc_initial=46 nstack_initial=2))},
 '$phi62.2': {('$60for_iter.3', State(pc_initial=60 nstack_initial=2))}}
DEBUG 2022-02-14 16:37:58,303 new_out: defaultdict(<class 'dict'>,
            {State(pc_initial=0 nstack_initial=0): {'$phi44.0': '$42get_iter.19'},
             State(pc_initial=44 nstack_initial=1): {'$phi46.1': '$44for_iter.2'},
             State(pc_initial=46 nstack_initial=2): {'$phi60.1': '$58get_iter.7'},
             State(pc_initial=60 nstack_initial=2): {'$phi62.2': '$60for_iter.3'}})
DEBUG 2022-02-14 16:37:58,304 ----------------------DONE Prune PHIs-----------------------
DEBUG 2022-02-14 16:37:58,304 block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$2load_global.0'}), (4, {'item': '$2load_global.0', 'res': '$4load_attr.1'}), (6, {'res': '$max_binom6.2'}), (8, {'res': '$const8.3'}), (10, {'lhs': '$max_binom6.2', 'rhs': '$const8.3', 'res': '$10binary_add.4'}), (12, {'res': '$max_binom12.5'}), (14, {'res': '$const14.6'}), (16, {'lhs': '$max_binom12.5', 'rhs': '$const14.6', 'res': '$16binary_add.7'}), (18, {'items': ['$10binary_add.4', '$16binary_add.7'], 'res': '$18build_tuple.8'}), (20, {'res': '$20load_global.9'}), (22, {'res': '$max_binom22.10'}), (24, {'func': '$20load_global.9', 'args': ['$max_binom22.10'], 'res': '$24call_function.11'}), (26, {'res': '$const26.12'}), (28, {'func': '$4load_attr.1', 'args': ['$18build_tuple.8', '$24call_function.11'], 'names': '$const26.12', 'res': '$28call_function_kw.13'}), (30, {'value': '$28call_function_kw.13'}), (32, {'res': '$32load_global.14'}), (34, {'res': '$max_binom34.15'}), (36, {'res': '$const36.16'}), (38, {'lhs': '$max_binom34.15', 'rhs': '$const36.16', 'res': '$38binary_add.17'}), (40, {'func': '$32load_global.14', 'args': ['$38binary_add.17'], 'res': '$40call_function.18'}), (42, {'value': '$40call_function.18', 'res': '$42get_iter.19'})), outgoing_phis={'$phi44.0': '$42get_iter.19'}, blockstack=(), active_try_block=None, outgoing_edgepushed={44: ('$42get_iter.19',)})
DEBUG 2022-02-14 16:37:58,304 block_infos State(pc_initial=44 nstack_initial=1):
AdaptBlockInfo(insts=((44, {'iterator': '$phi44.0', 'pair': '$44for_iter.1', 'indval': '$44for_iter.2', 'pred': '$44for_iter.3'}),), outgoing_phis={'$phi46.1': '$44for_iter.2'}, blockstack=(), active_try_block=None, outgoing_edgepushed={86: (), 46: ('$phi44.0', '$44for_iter.2')})
DEBUG 2022-02-14 16:37:58,304 block_infos State(pc_initial=46 nstack_initial=2):
AdaptBlockInfo(insts=((46, {'value': '$phi46.1'}), (48, {'res': '$48load_global.2'}), (50, {'res': '$max_binom50.3'}), (52, {'res': '$const52.4'}), (54, {'lhs': '$max_binom50.3', 'rhs': '$const52.4', 'res': '$54binary_add.5'}), (56, {'func': '$48load_global.2', 'args': ['$54binary_add.5'], 'res': '$56call_function.6'}), (58, {'value': '$56call_function.6', 'res': '$58get_iter.7'})), outgoing_phis={'$phi60.1': '$58get_iter.7'}, blockstack=(), active_try_block=None, outgoing_edgepushed={60: ('$phi46.0', '$58get_iter.7')})
DEBUG 2022-02-14 16:37:58,304 block_infos State(pc_initial=60 nstack_initial=2):
AdaptBlockInfo(insts=((60, {'iterator': '$phi60.1', 'pair': '$60for_iter.2', 'indval': '$60for_iter.3', 'pred': '$60for_iter.4'}),), outgoing_phis={'$phi62.2': '$60for_iter.3'}, blockstack=(), active_try_block=None, outgoing_edgepushed={84: ('$phi60.0',), 62: ('$phi60.0', '$phi60.1', '$60for_iter.3')})
DEBUG 2022-02-14 16:37:58,304 block_infos State(pc_initial=62 nstack_initial=3):
AdaptBlockInfo(insts=((62, {'value': '$phi62.2'}), (64, {'res': '$64load_global.3'}), (66, {'res': '$i66.4'}), (68, {'res': '$j68.5'}), (70, {'func': '$64load_global.3', 'args': ['$i66.4', '$j68.5'], 'res': '$70call_function.6'}), (72, {'res': '$binoms72.7'}), (74, {'res': '$i74.8'}), (76, {'res': '$j76.9'}), (78, {'items': ['$i74.8', '$j76.9'], 'res': '$78build_tuple.10'}), (80, {'target': '$binoms72.7', 'index': '$78build_tuple.10', 'value': '$70call_function.6'}), (82, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={60: ('$phi62.0', '$phi62.1')})
DEBUG 2022-02-14 16:37:58,304 block_infos State(pc_initial=84 nstack_initial=1):
AdaptBlockInfo(insts=((84, {}),), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={44: ('$phi84.0',)})
DEBUG 2022-02-14 16:37:58,305 block_infos State(pc_initial=86 nstack_initial=0):
AdaptBlockInfo(insts=((86, {'res': '$binoms86.0'}), (88, {'retval': '$binoms86.0', 'castval': '$88return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG 2022-02-14 16:37:58,307 label 0:
    max_binom = arg(0, name=max_binom)       ['max_binom']
    $2load_global.0 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>) ['$2load_global.0']
    $4load_attr.1 = getattr(value=$2load_global.0, attr=zeros) ['$2load_global.0', '$4load_attr.1']
    $const8.3 = const(int, 1)                ['$const8.3']
    $10binary_add.4 = max_binom + $const8.3  ['$10binary_add.4', '$const8.3', 'max_binom']
    $const14.6 = const(int, 1)               ['$const14.6']
    $16binary_add.7 = max_binom + $const14.6 ['$16binary_add.7', '$const14.6', 'max_binom']
    $18build_tuple.8 = build_tuple(items=[Var($10binary_add.4, _loop_hafnian_subroutines.py:23), Var($16binary_add.7, _loop_hafnian_subroutines.py:23)]) ['$10binary_add.4', '$16binary_add.7', '$18build_tuple.8']
    $20load_global.9 = global(type: <class 'type'>) ['$20load_global.9']
    $24call_function.11 = call $20load_global.9(max_binom, func=$20load_global.9, args=[Var(max_binom, _loop_hafnian_subroutines.py:23)], kws=(), vararg=None, target=None) ['$20load_global.9', '$24call_function.11', 'max_binom']
    binoms = call $4load_attr.1($18build_tuple.8, func=$4load_attr.1, args=[Var($18build_tuple.8, _loop_hafnian_subroutines.py:23)], kws=[('dtype', Var($24call_function.11, _loop_hafnian_subroutines.py:23))], vararg=None, target=None) ['$18build_tuple.8', '$24call_function.11', '$4load_attr.1', 'binoms']
    $32load_global.14 = global(range: <class 'range'>) ['$32load_global.14']
    $const36.16 = const(int, 1)              ['$const36.16']
    $38binary_add.17 = max_binom + $const36.16 ['$38binary_add.17', '$const36.16', 'max_binom']
    $40call_function.18 = call $32load_global.14($38binary_add.17, func=$32load_global.14, args=[Var($38binary_add.17, _loop_hafnian_subroutines.py:24)], kws=(), vararg=None, target=None) ['$32load_global.14', '$38binary_add.17', '$40call_function.18']
    $42get_iter.19 = getiter(value=$40call_function.18) ['$40call_function.18', '$42get_iter.19']
    $phi44.0 = $42get_iter.19                ['$42get_iter.19', '$phi44.0']
    jump 44                                  []
label 44:
    $44for_iter.1 = iternext(value=$phi44.0) ['$44for_iter.1', '$phi44.0']
    $44for_iter.2 = pair_first(value=$44for_iter.1) ['$44for_iter.1', '$44for_iter.2']
    $44for_iter.3 = pair_second(value=$44for_iter.1) ['$44for_iter.1', '$44for_iter.3']
    $phi46.1 = $44for_iter.2                 ['$44for_iter.2', '$phi46.1']
    branch $44for_iter.3, 46, 86             ['$44for_iter.3']
label 46:
    i = $phi46.1                             ['$phi46.1', 'i']
    $48load_global.2 = global(range: <class 'range'>) ['$48load_global.2']
    $const52.4 = const(int, 1)               ['$const52.4']
    $54binary_add.5 = max_binom + $const52.4 ['$54binary_add.5', '$const52.4', 'max_binom']
    $56call_function.6 = call $48load_global.2($54binary_add.5, func=$48load_global.2, args=[Var($54binary_add.5, _loop_hafnian_subroutines.py:25)], kws=(), vararg=None, target=None) ['$48load_global.2', '$54binary_add.5', '$56call_function.6']
    $58get_iter.7 = getiter(value=$56call_function.6) ['$56call_function.6', '$58get_iter.7']
    $phi60.1 = $58get_iter.7                 ['$58get_iter.7', '$phi60.1']
    jump 60                                  []
label 60:
    $60for_iter.2 = iternext(value=$phi60.1) ['$60for_iter.2', '$phi60.1']
    $60for_iter.3 = pair_first(value=$60for_iter.2) ['$60for_iter.2', '$60for_iter.3']
    $60for_iter.4 = pair_second(value=$60for_iter.2) ['$60for_iter.2', '$60for_iter.4']
    $phi62.2 = $60for_iter.3                 ['$60for_iter.3', '$phi62.2']
    branch $60for_iter.4, 62, 84             ['$60for_iter.4']
label 62:
    j = $phi62.2                             ['$phi62.2', 'j']
    $64load_global.3 = global(nb_binom: CPUDispatcher(<function nb_binom at 0x7fa047ebe160>)) ['$64load_global.3']
    $70call_function.6 = call $64load_global.3(i, j, func=$64load_global.3, args=[Var(i, _loop_hafnian_subroutines.py:24), Var(j, _loop_hafnian_subroutines.py:25)], kws=(), vararg=None, target=None) ['$64load_global.3', '$70call_function.6', 'i', 'j']
    $78build_tuple.10 = build_tuple(items=[Var(i, _loop_hafnian_subroutines.py:24), Var(j, _loop_hafnian_subroutines.py:25)]) ['$78build_tuple.10', 'i', 'j']
    binoms[$78build_tuple.10] = $70call_function.6 ['$70call_function.6', '$78build_tuple.10', 'binoms']
    jump 60                                  []
label 84:
    jump 44                                  []
label 86:
    $88return_value.1 = cast(value=binoms)   ['$88return_value.1', 'binoms']
    return $88return_value.1                 ['$88return_value.1']

DEBUG 2022-02-14 16:37:58,316 ==== SSA block analysis pass on 0
DEBUG 2022-02-14 16:37:58,316 Running <numba.core.ssa._GatherDefsHandler object at 0x7fa0474c4a30>
DEBUG 2022-02-14 16:37:58,316 on stmt: max_binom = arg(0, name=max_binom)
DEBUG 2022-02-14 16:37:58,317 on stmt: $2load_global.0 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:37:58,317 on stmt: $4load_attr.1 = getattr(value=$2load_global.0, attr=zeros)
DEBUG 2022-02-14 16:37:58,317 on stmt: $const8.3 = const(int, 1)
DEBUG 2022-02-14 16:37:58,317 on stmt: $10binary_add.4 = max_binom + $const8.3
DEBUG 2022-02-14 16:37:58,317 on stmt: $const14.6 = const(int, 1)
DEBUG 2022-02-14 16:37:58,317 on stmt: $16binary_add.7 = max_binom + $const14.6
DEBUG 2022-02-14 16:37:58,317 on stmt: $18build_tuple.8 = build_tuple(items=[Var($10binary_add.4, _loop_hafnian_subroutines.py:23), Var($16binary_add.7, _loop_hafnian_subroutines.py:23)])
DEBUG 2022-02-14 16:37:58,317 on stmt: $20load_global.9 = global(type: <class 'type'>)
DEBUG 2022-02-14 16:37:58,317 on stmt: $24call_function.11 = call $20load_global.9(max_binom, func=$20load_global.9, args=[Var(max_binom, _loop_hafnian_subroutines.py:23)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:37:58,317 on stmt: binoms = call $4load_attr.1($18build_tuple.8, func=$4load_attr.1, args=[Var($18build_tuple.8, _loop_hafnian_subroutines.py:23)], kws=[('dtype', Var($24call_function.11, _loop_hafnian_subroutines.py:23))], vararg=None, target=None)
DEBUG 2022-02-14 16:37:58,317 on stmt: $32load_global.14 = global(range: <class 'range'>)
DEBUG 2022-02-14 16:37:58,317 on stmt: $const36.16 = const(int, 1)
DEBUG 2022-02-14 16:37:58,318 on stmt: $38binary_add.17 = max_binom + $const36.16
DEBUG 2022-02-14 16:37:58,318 on stmt: $40call_function.18 = call $32load_global.14($38binary_add.17, func=$32load_global.14, args=[Var($38binary_add.17, _loop_hafnian_subroutines.py:24)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:37:58,318 on stmt: $42get_iter.19 = getiter(value=$40call_function.18)
DEBUG 2022-02-14 16:37:58,318 on stmt: $phi44.0 = $42get_iter.19
DEBUG 2022-02-14 16:37:58,318 on stmt: jump 44
DEBUG 2022-02-14 16:37:58,318 ==== SSA block analysis pass on 44
DEBUG 2022-02-14 16:37:58,318 Running <numba.core.ssa._GatherDefsHandler object at 0x7fa0474c4a30>
DEBUG 2022-02-14 16:37:58,318 on stmt: $44for_iter.1 = iternext(value=$phi44.0)
DEBUG 2022-02-14 16:37:58,318 on stmt: $44for_iter.2 = pair_first(value=$44for_iter.1)
DEBUG 2022-02-14 16:37:58,318 on stmt: $44for_iter.3 = pair_second(value=$44for_iter.1)
DEBUG 2022-02-14 16:37:58,318 on stmt: $phi46.1 = $44for_iter.2
DEBUG 2022-02-14 16:37:58,318 on stmt: branch $44for_iter.3, 46, 86
DEBUG 2022-02-14 16:37:58,318 ==== SSA block analysis pass on 46
DEBUG 2022-02-14 16:37:58,318 Running <numba.core.ssa._GatherDefsHandler object at 0x7fa0474c4a30>
DEBUG 2022-02-14 16:37:58,318 on stmt: i = $phi46.1
DEBUG 2022-02-14 16:37:58,319 on stmt: $48load_global.2 = global(range: <class 'range'>)
DEBUG 2022-02-14 16:37:58,319 on stmt: $const52.4 = const(int, 1)
DEBUG 2022-02-14 16:37:58,319 on stmt: $54binary_add.5 = max_binom + $const52.4
DEBUG 2022-02-14 16:37:58,319 on stmt: $56call_function.6 = call $48load_global.2($54binary_add.5, func=$48load_global.2, args=[Var($54binary_add.5, _loop_hafnian_subroutines.py:25)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:37:58,319 on stmt: $58get_iter.7 = getiter(value=$56call_function.6)
DEBUG 2022-02-14 16:37:58,319 on stmt: $phi60.1 = $58get_iter.7
DEBUG 2022-02-14 16:37:58,319 on stmt: jump 60
DEBUG 2022-02-14 16:37:58,319 ==== SSA block analysis pass on 60
DEBUG 2022-02-14 16:37:58,319 Running <numba.core.ssa._GatherDefsHandler object at 0x7fa0474c4a30>
DEBUG 2022-02-14 16:37:58,319 on stmt: $60for_iter.2 = iternext(value=$phi60.1)
DEBUG 2022-02-14 16:37:58,319 on stmt: $60for_iter.3 = pair_first(value=$60for_iter.2)
DEBUG 2022-02-14 16:37:58,319 on stmt: $60for_iter.4 = pair_second(value=$60for_iter.2)
DEBUG 2022-02-14 16:37:58,319 on stmt: $phi62.2 = $60for_iter.3
DEBUG 2022-02-14 16:37:58,320 on stmt: branch $60for_iter.4, 62, 84
DEBUG 2022-02-14 16:37:58,320 ==== SSA block analysis pass on 62
DEBUG 2022-02-14 16:37:58,320 Running <numba.core.ssa._GatherDefsHandler object at 0x7fa0474c4a30>
DEBUG 2022-02-14 16:37:58,320 on stmt: j = $phi62.2
DEBUG 2022-02-14 16:37:58,320 on stmt: $64load_global.3 = global(nb_binom: CPUDispatcher(<function nb_binom at 0x7fa047ebe160>))
DEBUG 2022-02-14 16:37:58,320 on stmt: $70call_function.6 = call $64load_global.3(i, j, func=$64load_global.3, args=[Var(i, _loop_hafnian_subroutines.py:24), Var(j, _loop_hafnian_subroutines.py:25)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:37:58,320 on stmt: $78build_tuple.10 = build_tuple(items=[Var(i, _loop_hafnian_subroutines.py:24), Var(j, _loop_hafnian_subroutines.py:25)])
DEBUG 2022-02-14 16:37:58,320 on stmt: binoms[$78build_tuple.10] = $70call_function.6
DEBUG 2022-02-14 16:37:58,320 on stmt: jump 60
DEBUG 2022-02-14 16:37:58,320 ==== SSA block analysis pass on 84
DEBUG 2022-02-14 16:37:58,320 Running <numba.core.ssa._GatherDefsHandler object at 0x7fa0474c4a30>
DEBUG 2022-02-14 16:37:58,320 on stmt: jump 44
DEBUG 2022-02-14 16:37:58,320 ==== SSA block analysis pass on 86
DEBUG 2022-02-14 16:37:58,320 Running <numba.core.ssa._GatherDefsHandler object at 0x7fa0474c4a30>
DEBUG 2022-02-14 16:37:58,320 on stmt: $88return_value.1 = cast(value=binoms)
DEBUG 2022-02-14 16:37:58,321 on stmt: return $88return_value.1
DEBUG 2022-02-14 16:37:58,321 defs defaultdict(<class 'list'>,
            {'$10binary_add.4': [<numba.core.ir.Assign object at 0x7fa047452ac0>],
             '$16binary_add.7': [<numba.core.ir.Assign object at 0x7fa047452ee0>],
             '$18build_tuple.8': [<numba.core.ir.Assign object at 0x7fa0474570a0>],
             '$20load_global.9': [<numba.core.ir.Assign object at 0x7fa0474571f0>],
             '$24call_function.11': [<numba.core.ir.Assign object at 0x7fa0474574f0>],
             '$2load_global.0': [<numba.core.ir.Assign object at 0x7fa0474524f0>],
             '$32load_global.14': [<numba.core.ir.Assign object at 0x7fa0474dba60>],
             '$38binary_add.17': [<numba.core.ir.Assign object at 0x7fa0474a8df0>],
             '$40call_function.18': [<numba.core.ir.Assign object at 0x7fa0474576d0>],
             '$42get_iter.19': [<numba.core.ir.Assign object at 0x7fa047457910>],
             '$44for_iter.1': [<numba.core.ir.Assign object at 0x7fa047457ac0>],
             '$44for_iter.2': [<numba.core.ir.Assign object at 0x7fa047457be0>],
             '$44for_iter.3': [<numba.core.ir.Assign object at 0x7fa047457d00>],
             '$48load_global.2': [<numba.core.ir.Assign object at 0x7fa04745f190>],
             '$4load_attr.1': [<numba.core.ir.Assign object at 0x7fa047452670>],
             '$54binary_add.5': [<numba.core.ir.Assign object at 0x7fa04745f5e0>],
             '$56call_function.6': [<numba.core.ir.Assign object at 0x7fa04745f790>],
             '$58get_iter.7': [<numba.core.ir.Assign object at 0x7fa04745f8b0>],
             '$60for_iter.2': [<numba.core.ir.Assign object at 0x7fa04745fbe0>],
             '$60for_iter.3': [<numba.core.ir.Assign object at 0x7fa04745fd00>],
             '$60for_iter.4': [<numba.core.ir.Assign object at 0x7fa04745fe20>],
             '$64load_global.3': [<numba.core.ir.Assign object at 0x7fa0474612b0>],
             '$70call_function.6': [<numba.core.ir.Assign object at 0x7fa0474616d0>],
             '$78build_tuple.10': [<numba.core.ir.Assign object at 0x7fa047461b80>],
             '$88return_value.1': [<numba.core.ir.Assign object at 0x7fa047461fd0>],
             '$const14.6': [<numba.core.ir.Assign object at 0x7fa047452d30>],
             '$const36.16': [<numba.core.ir.Assign object at 0x7fa0474c4dc0>],
             '$const52.4': [<numba.core.ir.Assign object at 0x7fa04745f430>],
             '$const8.3': [<numba.core.ir.Assign object at 0x7fa047452910>],
             '$phi44.0': [<numba.core.ir.Assign object at 0x7fa0474c4f40>],
             '$phi46.1': [<numba.core.ir.Assign object at 0x7fa047457a00>],
             '$phi60.1': [<numba.core.ir.Assign object at 0x7fa04745f2b0>],
             '$phi62.2': [<numba.core.ir.Assign object at 0x7fa04745fb20>],
             'binoms': [<numba.core.ir.Assign object at 0x7fa047452160>],
             'i': [<numba.core.ir.Assign object at 0x7fa047457fd0>],
             'j': [<numba.core.ir.Assign object at 0x7fa047461130>],
             'max_binom': [<numba.core.ir.Assign object at 0x7fa047452370>]})
DEBUG 2022-02-14 16:37:58,321 SSA violators set()
DEBUG 2022-02-14 16:37:58,330 bytecode dump:
>          0	NOP(arg=None, lineno=3)
           2	LOAD_GLOBAL(arg=0, lineno=3)
           4	LOAD_FAST(arg=0, lineno=3)
           6	LOAD_FAST(arg=1, lineno=3)
           8	CALL_FUNCTION(arg=2, lineno=3)
          10	RETURN_VALUE(arg=None, lineno=3)
DEBUG 2022-02-14 16:37:58,330 pending: deque([State(pc_initial=0 nstack_initial=0)])
DEBUG 2022-02-14 16:37:58,330 stack: []
DEBUG 2022-02-14 16:37:58,330 dispatch pc=0, inst=NOP(arg=None, lineno=3)
DEBUG 2022-02-14 16:37:58,330 stack []
DEBUG 2022-02-14 16:37:58,330 dispatch pc=2, inst=LOAD_GLOBAL(arg=0, lineno=3)
DEBUG 2022-02-14 16:37:58,330 stack []
DEBUG 2022-02-14 16:37:58,330 dispatch pc=4, inst=LOAD_FAST(arg=0, lineno=3)
DEBUG 2022-02-14 16:37:58,331 stack ['$2load_global.0']
DEBUG 2022-02-14 16:37:58,331 dispatch pc=6, inst=LOAD_FAST(arg=1, lineno=3)
DEBUG 2022-02-14 16:37:58,331 stack ['$2load_global.0', '$tmp04.1']
DEBUG 2022-02-14 16:37:58,331 dispatch pc=8, inst=CALL_FUNCTION(arg=2, lineno=3)
DEBUG 2022-02-14 16:37:58,331 stack ['$2load_global.0', '$tmp04.1', '$dtype6.2']
DEBUG 2022-02-14 16:37:58,331 dispatch pc=10, inst=RETURN_VALUE(arg=None, lineno=3)
DEBUG 2022-02-14 16:37:58,331 stack ['$8call_function.3']
DEBUG 2022-02-14 16:37:58,331 end state. edges=[]
DEBUG 2022-02-14 16:37:58,331 -------------------------Prune PHIs-------------------------
DEBUG 2022-02-14 16:37:58,331 Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
DEBUG 2022-02-14 16:37:58,332 defmap: {}
DEBUG 2022-02-14 16:37:58,332 phismap: defaultdict(<class 'set'>, {})
DEBUG 2022-02-14 16:37:58,332 changing phismap: defaultdict(<class 'set'>, {})
DEBUG 2022-02-14 16:37:58,332 keep phismap: {}
DEBUG 2022-02-14 16:37:58,332 new_out: defaultdict(<class 'dict'>, {})
DEBUG 2022-02-14 16:37:58,332 ----------------------DONE Prune PHIs-----------------------
DEBUG 2022-02-14 16:37:58,332 block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$2load_global.0'}), (4, {'res': '$tmp04.1'}), (6, {'res': '$dtype6.2'}), (8, {'func': '$2load_global.0', 'args': ['$tmp04.1', '$dtype6.2'], 'res': '$8call_function.3'}), (10, {'retval': '$8call_function.3', 'castval': '$10return_value.4'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG 2022-02-14 16:37:58,333 label 0:
    tmp0 = arg(0, name=tmp0)                 ['tmp0']
    dtype = arg(1, name=dtype)               ['dtype']
    $2load_global.0 = global(intrin: <intrinsic stub>) ['$2load_global.0']
    $8call_function.3 = call $2load_global.0(tmp0, dtype, func=$2load_global.0, args=[Var(tmp0, <string>:3), Var(dtype, <string>:3)], kws=(), vararg=None, target=None) ['$2load_global.0', '$8call_function.3', 'dtype', 'tmp0']
    $10return_value.4 = cast(value=$8call_function.3) ['$10return_value.4', '$8call_function.3']
    return $10return_value.4                 ['$10return_value.4']

DEBUG 2022-02-14 16:37:58,336 ==== SSA block analysis pass on 0
DEBUG 2022-02-14 16:37:58,336 Running <numba.core.ssa._GatherDefsHandler object at 0x7fa04747d4f0>
DEBUG 2022-02-14 16:37:58,336 on stmt: tmp0 = arg(0, name=tmp0)
DEBUG 2022-02-14 16:37:58,336 on stmt: dtype = arg(1, name=dtype)
DEBUG 2022-02-14 16:37:58,336 on stmt: $2load_global.0 = global(intrin: <intrinsic stub>)
DEBUG 2022-02-14 16:37:58,337 on stmt: $8call_function.3 = call $2load_global.0(tmp0, dtype, func=$2load_global.0, args=[Var(tmp0, <string>:3), Var(dtype, <string>:3)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:37:58,337 on stmt: $10return_value.4 = cast(value=$8call_function.3)
DEBUG 2022-02-14 16:37:58,337 on stmt: return $10return_value.4
DEBUG 2022-02-14 16:37:58,337 defs defaultdict(<class 'list'>,
            {'$10return_value.4': [<numba.core.ir.Assign object at 0x7fa04747e100>],
             '$2load_global.0': [<numba.core.ir.Assign object at 0x7fa04747db80>],
             '$8call_function.3': [<numba.core.ir.Assign object at 0x7fa04747dfa0>],
             'dtype': [<numba.core.ir.Assign object at 0x7fa04747d0a0>],
             'tmp0': [<numba.core.ir.Assign object at 0x7fa04747d040>]})
DEBUG 2022-02-14 16:37:58,337 SSA violators set()
DEBUG 2022-02-14 16:37:58,412 bytecode dump:
>          0	NOP(arg=None, lineno=10)
           2	LOAD_FAST(arg=1, lineno=10)
           4	LOAD_CONST(arg=1, lineno=10)
           6	COMPARE_OP(arg=0, lineno=10)
           8	POP_JUMP_IF_TRUE(arg=18, lineno=10)
          10	LOAD_FAST(arg=1, lineno=10)
          12	LOAD_FAST(arg=0, lineno=10)
          14	COMPARE_OP(arg=4, lineno=10)
          16	POP_JUMP_IF_FALSE(arg=22, lineno=10)
>         18	LOAD_CONST(arg=1, lineno=11)
          20	RETURN_VALUE(arg=None, lineno=11)
>         22	LOAD_FAST(arg=1, lineno=12)
          24	LOAD_CONST(arg=1, lineno=12)
          26	COMPARE_OP(arg=2, lineno=12)
          28	POP_JUMP_IF_TRUE(arg=38, lineno=12)
          30	LOAD_FAST(arg=1, lineno=12)
          32	LOAD_FAST(arg=0, lineno=12)
          34	COMPARE_OP(arg=2, lineno=12)
          36	POP_JUMP_IF_FALSE(arg=42, lineno=12)
>         38	LOAD_CONST(arg=2, lineno=13)
          40	RETURN_VALUE(arg=None, lineno=13)
>         42	LOAD_CONST(arg=2, lineno=14)
          44	STORE_FAST(arg=2, lineno=14)
          46	LOAD_GLOBAL(arg=0, lineno=15)
          48	LOAD_GLOBAL(arg=1, lineno=15)
          50	LOAD_FAST(arg=1, lineno=15)
          52	LOAD_FAST(arg=0, lineno=15)
          54	LOAD_FAST(arg=1, lineno=15)
          56	BINARY_SUBTRACT(arg=None, lineno=15)
          58	CALL_FUNCTION(arg=2, lineno=15)
          60	CALL_FUNCTION(arg=1, lineno=15)
          62	GET_ITER(arg=None, lineno=15)
>         64	FOR_ITER(arg=28, lineno=15)
          66	STORE_FAST(arg=3, lineno=15)
          68	LOAD_FAST(arg=2, lineno=16)
          70	LOAD_FAST(arg=0, lineno=16)
          72	LOAD_FAST(arg=3, lineno=16)
          74	BINARY_SUBTRACT(arg=None, lineno=16)
          76	INPLACE_MULTIPLY(arg=None, lineno=16)
          78	STORE_FAST(arg=2, lineno=16)
          80	LOAD_FAST(arg=2, lineno=17)
          82	LOAD_FAST(arg=3, lineno=17)
          84	LOAD_CONST(arg=2, lineno=17)
          86	BINARY_ADD(arg=None, lineno=17)
          88	INPLACE_FLOOR_DIVIDE(arg=None, lineno=17)
          90	STORE_FAST(arg=2, lineno=17)
          92	JUMP_ABSOLUTE(arg=64, lineno=17)
>         94	LOAD_FAST(arg=2, lineno=18)
          96	RETURN_VALUE(arg=None, lineno=18)
DEBUG 2022-02-14 16:37:58,412 pending: deque([State(pc_initial=0 nstack_initial=0)])
DEBUG 2022-02-14 16:37:58,412 stack: []
DEBUG 2022-02-14 16:37:58,412 dispatch pc=0, inst=NOP(arg=None, lineno=10)
DEBUG 2022-02-14 16:37:58,412 stack []
DEBUG 2022-02-14 16:37:58,412 dispatch pc=2, inst=LOAD_FAST(arg=1, lineno=10)
DEBUG 2022-02-14 16:37:58,412 stack []
DEBUG 2022-02-14 16:37:58,412 dispatch pc=4, inst=LOAD_CONST(arg=1, lineno=10)
DEBUG 2022-02-14 16:37:58,412 stack ['$k2.0']
DEBUG 2022-02-14 16:37:58,412 dispatch pc=6, inst=COMPARE_OP(arg=0, lineno=10)
DEBUG 2022-02-14 16:37:58,412 stack ['$k2.0', '$const4.1']
DEBUG 2022-02-14 16:37:58,413 dispatch pc=8, inst=POP_JUMP_IF_TRUE(arg=18, lineno=10)
DEBUG 2022-02-14 16:37:58,413 stack ['$6compare_op.2']
DEBUG 2022-02-14 16:37:58,413 end state. edges=[Edge(pc=10, stack=(), blockstack=(), npush=0), Edge(pc=18, stack=(), blockstack=(), npush=0)]
DEBUG 2022-02-14 16:37:58,413 pending: deque([State(pc_initial=10 nstack_initial=0), State(pc_initial=18 nstack_initial=0)])
DEBUG 2022-02-14 16:37:58,413 stack: []
DEBUG 2022-02-14 16:37:58,413 dispatch pc=10, inst=LOAD_FAST(arg=1, lineno=10)
DEBUG 2022-02-14 16:37:58,413 stack []
DEBUG 2022-02-14 16:37:58,413 dispatch pc=12, inst=LOAD_FAST(arg=0, lineno=10)
DEBUG 2022-02-14 16:37:58,413 stack ['$k10.0']
DEBUG 2022-02-14 16:37:58,413 dispatch pc=14, inst=COMPARE_OP(arg=4, lineno=10)
DEBUG 2022-02-14 16:37:58,413 stack ['$k10.0', '$n12.1']
DEBUG 2022-02-14 16:37:58,413 dispatch pc=16, inst=POP_JUMP_IF_FALSE(arg=22, lineno=10)
DEBUG 2022-02-14 16:37:58,413 stack ['$14compare_op.2']
DEBUG 2022-02-14 16:37:58,414 end state. edges=[Edge(pc=18, stack=(), blockstack=(), npush=0), Edge(pc=22, stack=(), blockstack=(), npush=0)]
DEBUG 2022-02-14 16:37:58,414 pending: deque([State(pc_initial=18 nstack_initial=0), State(pc_initial=18 nstack_initial=0), State(pc_initial=22 nstack_initial=0)])
DEBUG 2022-02-14 16:37:58,414 stack: []
DEBUG 2022-02-14 16:37:58,414 dispatch pc=18, inst=LOAD_CONST(arg=1, lineno=11)
DEBUG 2022-02-14 16:37:58,414 stack []
DEBUG 2022-02-14 16:37:58,414 dispatch pc=20, inst=RETURN_VALUE(arg=None, lineno=11)
DEBUG 2022-02-14 16:37:58,414 stack ['$const18.0']
DEBUG 2022-02-14 16:37:58,414 end state. edges=[]
DEBUG 2022-02-14 16:37:58,414 pending: deque([State(pc_initial=18 nstack_initial=0), State(pc_initial=22 nstack_initial=0)])
DEBUG 2022-02-14 16:37:58,414 pending: deque([State(pc_initial=22 nstack_initial=0)])
DEBUG 2022-02-14 16:37:58,414 stack: []
DEBUG 2022-02-14 16:37:58,414 dispatch pc=22, inst=LOAD_FAST(arg=1, lineno=12)
DEBUG 2022-02-14 16:37:58,414 stack []
DEBUG 2022-02-14 16:37:58,415 dispatch pc=24, inst=LOAD_CONST(arg=1, lineno=12)
DEBUG 2022-02-14 16:37:58,415 stack ['$k22.0']
DEBUG 2022-02-14 16:37:58,415 dispatch pc=26, inst=COMPARE_OP(arg=2, lineno=12)
DEBUG 2022-02-14 16:37:58,415 stack ['$k22.0', '$const24.1']
DEBUG 2022-02-14 16:37:58,415 dispatch pc=28, inst=POP_JUMP_IF_TRUE(arg=38, lineno=12)
DEBUG 2022-02-14 16:37:58,415 stack ['$26compare_op.2']
DEBUG 2022-02-14 16:37:58,415 end state. edges=[Edge(pc=30, stack=(), blockstack=(), npush=0), Edge(pc=38, stack=(), blockstack=(), npush=0)]
DEBUG 2022-02-14 16:37:58,415 pending: deque([State(pc_initial=30 nstack_initial=0), State(pc_initial=38 nstack_initial=0)])
DEBUG 2022-02-14 16:37:58,415 stack: []
DEBUG 2022-02-14 16:37:58,415 dispatch pc=30, inst=LOAD_FAST(arg=1, lineno=12)
DEBUG 2022-02-14 16:37:58,415 stack []
DEBUG 2022-02-14 16:37:58,415 dispatch pc=32, inst=LOAD_FAST(arg=0, lineno=12)
DEBUG 2022-02-14 16:37:58,415 stack ['$k30.0']
DEBUG 2022-02-14 16:37:58,416 dispatch pc=34, inst=COMPARE_OP(arg=2, lineno=12)
DEBUG 2022-02-14 16:37:58,416 stack ['$k30.0', '$n32.1']
DEBUG 2022-02-14 16:37:58,416 dispatch pc=36, inst=POP_JUMP_IF_FALSE(arg=42, lineno=12)
DEBUG 2022-02-14 16:37:58,416 stack ['$34compare_op.2']
DEBUG 2022-02-14 16:37:58,416 end state. edges=[Edge(pc=38, stack=(), blockstack=(), npush=0), Edge(pc=42, stack=(), blockstack=(), npush=0)]
DEBUG 2022-02-14 16:37:58,416 pending: deque([State(pc_initial=38 nstack_initial=0), State(pc_initial=38 nstack_initial=0), State(pc_initial=42 nstack_initial=0)])
DEBUG 2022-02-14 16:37:58,416 stack: []
DEBUG 2022-02-14 16:37:58,416 dispatch pc=38, inst=LOAD_CONST(arg=2, lineno=13)
DEBUG 2022-02-14 16:37:58,416 stack []
DEBUG 2022-02-14 16:37:58,416 dispatch pc=40, inst=RETURN_VALUE(arg=None, lineno=13)
DEBUG 2022-02-14 16:37:58,417 stack ['$const38.0']
DEBUG 2022-02-14 16:37:58,417 end state. edges=[]
DEBUG 2022-02-14 16:37:58,417 pending: deque([State(pc_initial=38 nstack_initial=0), State(pc_initial=42 nstack_initial=0)])
DEBUG 2022-02-14 16:37:58,417 pending: deque([State(pc_initial=42 nstack_initial=0)])
DEBUG 2022-02-14 16:37:58,417 stack: []
DEBUG 2022-02-14 16:37:58,417 dispatch pc=42, inst=LOAD_CONST(arg=2, lineno=14)
DEBUG 2022-02-14 16:37:58,417 stack []
DEBUG 2022-02-14 16:37:58,417 dispatch pc=44, inst=STORE_FAST(arg=2, lineno=14)
DEBUG 2022-02-14 16:37:58,417 stack ['$const42.0']
DEBUG 2022-02-14 16:37:58,417 dispatch pc=46, inst=LOAD_GLOBAL(arg=0, lineno=15)
DEBUG 2022-02-14 16:37:58,417 stack []
DEBUG 2022-02-14 16:37:58,417 dispatch pc=48, inst=LOAD_GLOBAL(arg=1, lineno=15)
DEBUG 2022-02-14 16:37:58,418 stack ['$46load_global.1']
DEBUG 2022-02-14 16:37:58,418 dispatch pc=50, inst=LOAD_FAST(arg=1, lineno=15)
DEBUG 2022-02-14 16:37:58,418 stack ['$46load_global.1', '$48load_global.2']
DEBUG 2022-02-14 16:37:58,418 dispatch pc=52, inst=LOAD_FAST(arg=0, lineno=15)
DEBUG 2022-02-14 16:37:58,418 stack ['$46load_global.1', '$48load_global.2', '$k50.3']
DEBUG 2022-02-14 16:37:58,418 dispatch pc=54, inst=LOAD_FAST(arg=1, lineno=15)
DEBUG 2022-02-14 16:37:58,418 stack ['$46load_global.1', '$48load_global.2', '$k50.3', '$n52.4']
DEBUG 2022-02-14 16:37:58,418 dispatch pc=56, inst=BINARY_SUBTRACT(arg=None, lineno=15)
DEBUG 2022-02-14 16:37:58,418 stack ['$46load_global.1', '$48load_global.2', '$k50.3', '$n52.4', '$k54.5']
DEBUG 2022-02-14 16:37:58,418 dispatch pc=58, inst=CALL_FUNCTION(arg=2, lineno=15)
DEBUG 2022-02-14 16:37:58,418 stack ['$46load_global.1', '$48load_global.2', '$k50.3', '$56binary_subtract.6']
DEBUG 2022-02-14 16:37:58,418 dispatch pc=60, inst=CALL_FUNCTION(arg=1, lineno=15)
DEBUG 2022-02-14 16:37:58,418 stack ['$46load_global.1', '$58call_function.7']
DEBUG 2022-02-14 16:37:58,418 dispatch pc=62, inst=GET_ITER(arg=None, lineno=15)
DEBUG 2022-02-14 16:37:58,419 stack ['$60call_function.8']
DEBUG 2022-02-14 16:37:58,419 end state. edges=[Edge(pc=64, stack=('$62get_iter.9',), blockstack=(), npush=0)]
DEBUG 2022-02-14 16:37:58,419 pending: deque([State(pc_initial=64 nstack_initial=1)])
DEBUG 2022-02-14 16:37:58,419 stack: ['$phi64.0']
DEBUG 2022-02-14 16:37:58,419 dispatch pc=64, inst=FOR_ITER(arg=28, lineno=15)
DEBUG 2022-02-14 16:37:58,419 stack ['$phi64.0']
DEBUG 2022-02-14 16:37:58,419 end state. edges=[Edge(pc=94, stack=(), blockstack=(), npush=0), Edge(pc=66, stack=('$phi64.0', '$64for_iter.2'), blockstack=(), npush=0)]
DEBUG 2022-02-14 16:37:58,419 pending: deque([State(pc_initial=94 nstack_initial=0), State(pc_initial=66 nstack_initial=2)])
DEBUG 2022-02-14 16:37:58,420 stack: []
DEBUG 2022-02-14 16:37:58,420 dispatch pc=94, inst=LOAD_FAST(arg=2, lineno=18)
DEBUG 2022-02-14 16:37:58,420 stack []
DEBUG 2022-02-14 16:37:58,420 dispatch pc=96, inst=RETURN_VALUE(arg=None, lineno=18)
DEBUG 2022-02-14 16:37:58,420 stack ['$binom94.0']
DEBUG 2022-02-14 16:37:58,420 end state. edges=[]
DEBUG 2022-02-14 16:37:58,420 pending: deque([State(pc_initial=66 nstack_initial=2)])
DEBUG 2022-02-14 16:37:58,420 stack: ['$phi66.0', '$phi66.1']
DEBUG 2022-02-14 16:37:58,420 dispatch pc=66, inst=STORE_FAST(arg=3, lineno=15)
DEBUG 2022-02-14 16:37:58,420 stack ['$phi66.0', '$phi66.1']
DEBUG 2022-02-14 16:37:58,420 dispatch pc=68, inst=LOAD_FAST(arg=2, lineno=16)
DEBUG 2022-02-14 16:37:58,420 stack ['$phi66.0']
DEBUG 2022-02-14 16:37:58,421 dispatch pc=70, inst=LOAD_FAST(arg=0, lineno=16)
DEBUG 2022-02-14 16:37:58,421 stack ['$phi66.0', '$binom68.2']
DEBUG 2022-02-14 16:37:58,421 dispatch pc=72, inst=LOAD_FAST(arg=3, lineno=16)
DEBUG 2022-02-14 16:37:58,421 stack ['$phi66.0', '$binom68.2', '$n70.3']
DEBUG 2022-02-14 16:37:58,421 dispatch pc=74, inst=BINARY_SUBTRACT(arg=None, lineno=16)
DEBUG 2022-02-14 16:37:58,421 stack ['$phi66.0', '$binom68.2', '$n70.3', '$i72.4']
DEBUG 2022-02-14 16:37:58,421 dispatch pc=76, inst=INPLACE_MULTIPLY(arg=None, lineno=16)
DEBUG 2022-02-14 16:37:58,421 stack ['$phi66.0', '$binom68.2', '$74binary_subtract.5']
DEBUG 2022-02-14 16:37:58,421 dispatch pc=78, inst=STORE_FAST(arg=2, lineno=16)
DEBUG 2022-02-14 16:37:58,421 stack ['$phi66.0', '$76inplace_multiply.6']
DEBUG 2022-02-14 16:37:58,421 dispatch pc=80, inst=LOAD_FAST(arg=2, lineno=17)
DEBUG 2022-02-14 16:37:58,421 stack ['$phi66.0']
DEBUG 2022-02-14 16:37:58,421 dispatch pc=82, inst=LOAD_FAST(arg=3, lineno=17)
DEBUG 2022-02-14 16:37:58,422 stack ['$phi66.0', '$binom80.7']
DEBUG 2022-02-14 16:37:58,422 dispatch pc=84, inst=LOAD_CONST(arg=2, lineno=17)
DEBUG 2022-02-14 16:37:58,422 stack ['$phi66.0', '$binom80.7', '$i82.8']
DEBUG 2022-02-14 16:37:58,422 dispatch pc=86, inst=BINARY_ADD(arg=None, lineno=17)
DEBUG 2022-02-14 16:37:58,422 stack ['$phi66.0', '$binom80.7', '$i82.8', '$const84.9']
DEBUG 2022-02-14 16:37:58,422 dispatch pc=88, inst=INPLACE_FLOOR_DIVIDE(arg=None, lineno=17)
DEBUG 2022-02-14 16:37:58,422 stack ['$phi66.0', '$binom80.7', '$86binary_add.10']
DEBUG 2022-02-14 16:37:58,422 dispatch pc=90, inst=STORE_FAST(arg=2, lineno=17)
DEBUG 2022-02-14 16:37:58,422 stack ['$phi66.0', '$88inplace_floor_divide.11']
DEBUG 2022-02-14 16:37:58,422 dispatch pc=92, inst=JUMP_ABSOLUTE(arg=64, lineno=17)
DEBUG 2022-02-14 16:37:58,422 stack ['$phi66.0']
DEBUG 2022-02-14 16:37:58,423 end state. edges=[Edge(pc=64, stack=('$phi66.0',), blockstack=(), npush=0)]
DEBUG 2022-02-14 16:37:58,423 pending: deque([State(pc_initial=64 nstack_initial=1)])
DEBUG 2022-02-14 16:37:58,423 -------------------------Prune PHIs-------------------------
DEBUG 2022-02-14 16:37:58,423 Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=10 nstack_initial=0): set(),
             State(pc_initial=18 nstack_initial=0): set(),
             State(pc_initial=22 nstack_initial=0): set(),
             State(pc_initial=30 nstack_initial=0): set(),
             State(pc_initial=38 nstack_initial=0): set(),
             State(pc_initial=42 nstack_initial=0): set(),
             State(pc_initial=64 nstack_initial=1): {'$phi64.0'},
             State(pc_initial=66 nstack_initial=2): {'$phi66.1'},
             State(pc_initial=94 nstack_initial=0): set()})
DEBUG 2022-02-14 16:37:58,423 defmap: {'$phi64.0': State(pc_initial=42 nstack_initial=0),
 '$phi66.1': State(pc_initial=64 nstack_initial=1)}
DEBUG 2022-02-14 16:37:58,424 phismap: defaultdict(<class 'set'>,
            {'$phi64.0': {('$62get_iter.9',
                           State(pc_initial=42 nstack_initial=0)),
                          ('$phi66.0', State(pc_initial=66 nstack_initial=2))},
             '$phi66.0': {('$phi64.0', State(pc_initial=64 nstack_initial=1))},
             '$phi66.1': {('$64for_iter.2',
                           State(pc_initial=64 nstack_initial=1))}})
DEBUG 2022-02-14 16:37:58,424 changing phismap: defaultdict(<class 'set'>,
            {'$phi64.0': {('$62get_iter.9',
                           State(pc_initial=42 nstack_initial=0)),
                          ('$phi64.0', State(pc_initial=64 nstack_initial=1))},
             '$phi66.0': {('$62get_iter.9',
                           State(pc_initial=42 nstack_initial=0))},
             '$phi66.1': {('$64for_iter.2',
                           State(pc_initial=64 nstack_initial=1))}})
DEBUG 2022-02-14 16:37:58,424 changing phismap: defaultdict(<class 'set'>,
            {'$phi64.0': {('$62get_iter.9',
                           State(pc_initial=42 nstack_initial=0))},
             '$phi66.0': {('$62get_iter.9',
                           State(pc_initial=42 nstack_initial=0))},
             '$phi66.1': {('$64for_iter.2',
                           State(pc_initial=64 nstack_initial=1))}})
DEBUG 2022-02-14 16:37:58,425 changing phismap: defaultdict(<class 'set'>,
            {'$phi64.0': {('$62get_iter.9',
                           State(pc_initial=42 nstack_initial=0))},
             '$phi66.0': {('$62get_iter.9',
                           State(pc_initial=42 nstack_initial=0))},
             '$phi66.1': {('$64for_iter.2',
                           State(pc_initial=64 nstack_initial=1))}})
DEBUG 2022-02-14 16:37:58,425 keep phismap: {'$phi64.0': {('$62get_iter.9', State(pc_initial=42 nstack_initial=0))},
 '$phi66.1': {('$64for_iter.2', State(pc_initial=64 nstack_initial=1))}}
DEBUG 2022-02-14 16:37:58,425 new_out: defaultdict(<class 'dict'>,
            {State(pc_initial=42 nstack_initial=0): {'$phi64.0': '$62get_iter.9'},
             State(pc_initial=64 nstack_initial=1): {'$phi66.1': '$64for_iter.2'}})
DEBUG 2022-02-14 16:37:58,426 ----------------------DONE Prune PHIs-----------------------
DEBUG 2022-02-14 16:37:58,426 block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$k2.0'}), (4, {'res': '$const4.1'}), (6, {'lhs': '$k2.0', 'rhs': '$const4.1', 'res': '$6compare_op.2'}), (8, {'pred': '$6compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={10: (), 18: ()})
DEBUG 2022-02-14 16:37:58,426 block_infos State(pc_initial=10 nstack_initial=0):
AdaptBlockInfo(insts=((10, {'res': '$k10.0'}), (12, {'res': '$n12.1'}), (14, {'lhs': '$k10.0', 'rhs': '$n12.1', 'res': '$14compare_op.2'}), (16, {'pred': '$14compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={18: (), 22: ()})
DEBUG 2022-02-14 16:37:58,426 block_infos State(pc_initial=18 nstack_initial=0):
AdaptBlockInfo(insts=((18, {'res': '$const18.0'}), (20, {'retval': '$const18.0', 'castval': '$20return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG 2022-02-14 16:37:58,426 block_infos State(pc_initial=22 nstack_initial=0):
AdaptBlockInfo(insts=((22, {'res': '$k22.0'}), (24, {'res': '$const24.1'}), (26, {'lhs': '$k22.0', 'rhs': '$const24.1', 'res': '$26compare_op.2'}), (28, {'pred': '$26compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={30: (), 38: ()})
DEBUG 2022-02-14 16:37:58,426 block_infos State(pc_initial=30 nstack_initial=0):
AdaptBlockInfo(insts=((30, {'res': '$k30.0'}), (32, {'res': '$n32.1'}), (34, {'lhs': '$k30.0', 'rhs': '$n32.1', 'res': '$34compare_op.2'}), (36, {'pred': '$34compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={38: (), 42: ()})
DEBUG 2022-02-14 16:37:58,426 block_infos State(pc_initial=38 nstack_initial=0):
AdaptBlockInfo(insts=((38, {'res': '$const38.0'}), (40, {'retval': '$const38.0', 'castval': '$40return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG 2022-02-14 16:37:58,426 block_infos State(pc_initial=42 nstack_initial=0):
AdaptBlockInfo(insts=((42, {'res': '$const42.0'}), (44, {'value': '$const42.0'}), (46, {'res': '$46load_global.1'}), (48, {'res': '$48load_global.2'}), (50, {'res': '$k50.3'}), (52, {'res': '$n52.4'}), (54, {'res': '$k54.5'}), (56, {'lhs': '$n52.4', 'rhs': '$k54.5', 'res': '$56binary_subtract.6'}), (58, {'func': '$48load_global.2', 'args': ['$k50.3', '$56binary_subtract.6'], 'res': '$58call_function.7'}), (60, {'func': '$46load_global.1', 'args': ['$58call_function.7'], 'res': '$60call_function.8'}), (62, {'value': '$60call_function.8', 'res': '$62get_iter.9'})), outgoing_phis={'$phi64.0': '$62get_iter.9'}, blockstack=(), active_try_block=None, outgoing_edgepushed={64: ('$62get_iter.9',)})
DEBUG 2022-02-14 16:37:58,426 block_infos State(pc_initial=64 nstack_initial=1):
AdaptBlockInfo(insts=((64, {'iterator': '$phi64.0', 'pair': '$64for_iter.1', 'indval': '$64for_iter.2', 'pred': '$64for_iter.3'}),), outgoing_phis={'$phi66.1': '$64for_iter.2'}, blockstack=(), active_try_block=None, outgoing_edgepushed={94: (), 66: ('$phi64.0', '$64for_iter.2')})
DEBUG 2022-02-14 16:37:58,427 block_infos State(pc_initial=66 nstack_initial=2):
AdaptBlockInfo(insts=((66, {'value': '$phi66.1'}), (68, {'res': '$binom68.2'}), (70, {'res': '$n70.3'}), (72, {'res': '$i72.4'}), (74, {'lhs': '$n70.3', 'rhs': '$i72.4', 'res': '$74binary_subtract.5'}), (76, {'lhs': '$binom68.2', 'rhs': '$74binary_subtract.5', 'res': '$76inplace_multiply.6'}), (78, {'value': '$76inplace_multiply.6'}), (80, {'res': '$binom80.7'}), (82, {'res': '$i82.8'}), (84, {'res': '$const84.9'}), (86, {'lhs': '$i82.8', 'rhs': '$const84.9', 'res': '$86binary_add.10'}), (88, {'lhs': '$binom80.7', 'rhs': '$86binary_add.10', 'res': '$88inplace_floor_divide.11'}), (90, {'value': '$88inplace_floor_divide.11'}), (92, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={64: ('$phi66.0',)})
DEBUG 2022-02-14 16:37:58,427 block_infos State(pc_initial=94 nstack_initial=0):
AdaptBlockInfo(insts=((94, {'res': '$binom94.0'}), (96, {'retval': '$binom94.0', 'castval': '$96return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG 2022-02-14 16:37:58,429 label 0:
    n = arg(0, name=n)                       ['n']
    k = arg(1, name=k)                       ['k']
    $const4.1 = const(int, 0)                ['$const4.1']
    $6compare_op.2 = k < $const4.1           ['$6compare_op.2', '$const4.1', 'k']
    bool8 = global(bool: <class 'bool'>)     ['bool8']
    $8pred = call bool8($6compare_op.2, func=bool8, args=(Var($6compare_op.2, _loop_hafnian_subroutines.py:10),), kws=(), vararg=None, target=None) ['$6compare_op.2', '$8pred', 'bool8']
    branch $8pred, 18, 10                    ['$8pred']
label 10:
    $14compare_op.2 = k > n                  ['$14compare_op.2', 'k', 'n']
    bool16 = global(bool: <class 'bool'>)    ['bool16']
    $16pred = call bool16($14compare_op.2, func=bool16, args=(Var($14compare_op.2, _loop_hafnian_subroutines.py:10),), kws=(), vararg=None, target=None) ['$14compare_op.2', '$16pred', 'bool16']
    branch $16pred, 18, 22                   ['$16pred']
label 18:
    $const18.0 = const(int, 0)               ['$const18.0']
    $20return_value.1 = cast(value=$const18.0) ['$20return_value.1', '$const18.0']
    return $20return_value.1                 ['$20return_value.1']
label 22:
    $const24.1 = const(int, 0)               ['$const24.1']
    $26compare_op.2 = k == $const24.1        ['$26compare_op.2', '$const24.1', 'k']
    bool28 = global(bool: <class 'bool'>)    ['bool28']
    $28pred = call bool28($26compare_op.2, func=bool28, args=(Var($26compare_op.2, _loop_hafnian_subroutines.py:12),), kws=(), vararg=None, target=None) ['$26compare_op.2', '$28pred', 'bool28']
    branch $28pred, 38, 30                   ['$28pred']
label 30:
    $34compare_op.2 = k == n                 ['$34compare_op.2', 'k', 'n']
    bool36 = global(bool: <class 'bool'>)    ['bool36']
    $36pred = call bool36($34compare_op.2, func=bool36, args=(Var($34compare_op.2, _loop_hafnian_subroutines.py:12),), kws=(), vararg=None, target=None) ['$34compare_op.2', '$36pred', 'bool36']
    branch $36pred, 38, 42                   ['$36pred']
label 38:
    $const38.0 = const(int, 1)               ['$const38.0']
    $40return_value.1 = cast(value=$const38.0) ['$40return_value.1', '$const38.0']
    return $40return_value.1                 ['$40return_value.1']
label 42:
    binom = const(int, 1)                    ['binom']
    $46load_global.1 = global(range: <class 'range'>) ['$46load_global.1']
    $48load_global.2 = global(min: <built-in function min>) ['$48load_global.2']
    $56binary_subtract.6 = n - k             ['$56binary_subtract.6', 'k', 'n']
    $58call_function.7 = call $48load_global.2(k, $56binary_subtract.6, func=$48load_global.2, args=[Var(k, _loop_hafnian_subroutines.py:10), Var($56binary_subtract.6, _loop_hafnian_subroutines.py:15)], kws=(), vararg=None, target=None) ['$48load_global.2', '$56binary_subtract.6', '$58call_function.7', 'k']
    $60call_function.8 = call $46load_global.1($58call_function.7, func=$46load_global.1, args=[Var($58call_function.7, _loop_hafnian_subroutines.py:15)], kws=(), vararg=None, target=None) ['$46load_global.1', '$58call_function.7', '$60call_function.8']
    $62get_iter.9 = getiter(value=$60call_function.8) ['$60call_function.8', '$62get_iter.9']
    $phi64.0 = $62get_iter.9                 ['$62get_iter.9', '$phi64.0']
    jump 64                                  []
label 64:
    $64for_iter.1 = iternext(value=$phi64.0) ['$64for_iter.1', '$phi64.0']
    $64for_iter.2 = pair_first(value=$64for_iter.1) ['$64for_iter.1', '$64for_iter.2']
    $64for_iter.3 = pair_second(value=$64for_iter.1) ['$64for_iter.1', '$64for_iter.3']
    $phi66.1 = $64for_iter.2                 ['$64for_iter.2', '$phi66.1']
    branch $64for_iter.3, 66, 94             ['$64for_iter.3']
label 66:
    i = $phi66.1                             ['$phi66.1', 'i']
    $74binary_subtract.5 = n - i             ['$74binary_subtract.5', 'i', 'n']
    $76inplace_multiply.6 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=binom, rhs=$74binary_subtract.5, static_lhs=Undefined, static_rhs=Undefined) ['$74binary_subtract.5', '$76inplace_multiply.6', 'binom']
    binom = $76inplace_multiply.6            ['$76inplace_multiply.6', 'binom']
    $const84.9 = const(int, 1)               ['$const84.9']
    $86binary_add.10 = i + $const84.9        ['$86binary_add.10', '$const84.9', 'i']
    $88inplace_floor_divide.11 = inplace_binop(fn=<built-in function ifloordiv>, immutable_fn=<built-in function floordiv>, lhs=binom, rhs=$86binary_add.10, static_lhs=Undefined, static_rhs=Undefined) ['$86binary_add.10', '$88inplace_floor_divide.11', 'binom']
    binom = $88inplace_floor_divide.11       ['$88inplace_floor_divide.11', 'binom']
    jump 64                                  []
label 94:
    $96return_value.1 = cast(value=binom)    ['$96return_value.1', 'binom']
    return $96return_value.1                 ['$96return_value.1']

DEBUG 2022-02-14 16:37:58,439 ==== SSA block analysis pass on 0
DEBUG 2022-02-14 16:37:58,439 Running <numba.core.ssa._GatherDefsHandler object at 0x7fa0474e8c70>
DEBUG 2022-02-14 16:37:58,439 on stmt: n = arg(0, name=n)
DEBUG 2022-02-14 16:37:58,439 on stmt: k = arg(1, name=k)
DEBUG 2022-02-14 16:37:58,439 on stmt: $const4.1 = const(int, 0)
DEBUG 2022-02-14 16:37:58,439 on stmt: $6compare_op.2 = k < $const4.1
DEBUG 2022-02-14 16:37:58,439 on stmt: bool8 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:37:58,439 on stmt: $8pred = call bool8($6compare_op.2, func=bool8, args=(Var($6compare_op.2, _loop_hafnian_subroutines.py:10),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:37:58,440 on stmt: branch $8pred, 18, 10
DEBUG 2022-02-14 16:37:58,440 ==== SSA block analysis pass on 10
DEBUG 2022-02-14 16:37:58,440 Running <numba.core.ssa._GatherDefsHandler object at 0x7fa0474e8c70>
DEBUG 2022-02-14 16:37:58,440 on stmt: $14compare_op.2 = k > n
DEBUG 2022-02-14 16:37:58,440 on stmt: bool16 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:37:58,440 on stmt: $16pred = call bool16($14compare_op.2, func=bool16, args=(Var($14compare_op.2, _loop_hafnian_subroutines.py:10),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:37:58,440 on stmt: branch $16pred, 18, 22
DEBUG 2022-02-14 16:37:58,440 ==== SSA block analysis pass on 18
DEBUG 2022-02-14 16:37:58,440 Running <numba.core.ssa._GatherDefsHandler object at 0x7fa0474e8c70>
DEBUG 2022-02-14 16:37:58,440 on stmt: $const18.0 = const(int, 0)
DEBUG 2022-02-14 16:37:58,440 on stmt: $20return_value.1 = cast(value=$const18.0)
DEBUG 2022-02-14 16:37:58,440 on stmt: return $20return_value.1
DEBUG 2022-02-14 16:37:58,441 ==== SSA block analysis pass on 22
DEBUG 2022-02-14 16:37:58,441 Running <numba.core.ssa._GatherDefsHandler object at 0x7fa0474e8c70>
DEBUG 2022-02-14 16:37:58,441 on stmt: $const24.1 = const(int, 0)
DEBUG 2022-02-14 16:37:58,441 on stmt: $26compare_op.2 = k == $const24.1
DEBUG 2022-02-14 16:37:58,441 on stmt: bool28 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:37:58,441 on stmt: $28pred = call bool28($26compare_op.2, func=bool28, args=(Var($26compare_op.2, _loop_hafnian_subroutines.py:12),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:37:58,441 on stmt: branch $28pred, 38, 30
DEBUG 2022-02-14 16:37:58,441 ==== SSA block analysis pass on 30
DEBUG 2022-02-14 16:37:58,441 Running <numba.core.ssa._GatherDefsHandler object at 0x7fa0474e8c70>
DEBUG 2022-02-14 16:37:58,441 on stmt: $34compare_op.2 = k == n
DEBUG 2022-02-14 16:37:58,441 on stmt: bool36 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:37:58,441 on stmt: $36pred = call bool36($34compare_op.2, func=bool36, args=(Var($34compare_op.2, _loop_hafnian_subroutines.py:12),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:37:58,441 on stmt: branch $36pred, 38, 42
DEBUG 2022-02-14 16:37:58,441 ==== SSA block analysis pass on 38
DEBUG 2022-02-14 16:37:58,441 Running <numba.core.ssa._GatherDefsHandler object at 0x7fa0474e8c70>
DEBUG 2022-02-14 16:37:58,442 on stmt: $const38.0 = const(int, 1)
DEBUG 2022-02-14 16:37:58,442 on stmt: $40return_value.1 = cast(value=$const38.0)
DEBUG 2022-02-14 16:37:58,442 on stmt: return $40return_value.1
DEBUG 2022-02-14 16:37:58,442 ==== SSA block analysis pass on 42
DEBUG 2022-02-14 16:37:58,442 Running <numba.core.ssa._GatherDefsHandler object at 0x7fa0474e8c70>
DEBUG 2022-02-14 16:37:58,442 on stmt: binom = const(int, 1)
DEBUG 2022-02-14 16:37:58,442 on stmt: $46load_global.1 = global(range: <class 'range'>)
DEBUG 2022-02-14 16:37:58,442 on stmt: $48load_global.2 = global(min: <built-in function min>)
DEBUG 2022-02-14 16:37:58,442 on stmt: $56binary_subtract.6 = n - k
DEBUG 2022-02-14 16:37:58,442 on stmt: $58call_function.7 = call $48load_global.2(k, $56binary_subtract.6, func=$48load_global.2, args=[Var(k, _loop_hafnian_subroutines.py:10), Var($56binary_subtract.6, _loop_hafnian_subroutines.py:15)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:37:58,442 on stmt: $60call_function.8 = call $46load_global.1($58call_function.7, func=$46load_global.1, args=[Var($58call_function.7, _loop_hafnian_subroutines.py:15)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:37:58,442 on stmt: $62get_iter.9 = getiter(value=$60call_function.8)
DEBUG 2022-02-14 16:37:58,442 on stmt: $phi64.0 = $62get_iter.9
DEBUG 2022-02-14 16:37:58,442 on stmt: jump 64
DEBUG 2022-02-14 16:37:58,443 ==== SSA block analysis pass on 64
DEBUG 2022-02-14 16:37:58,443 Running <numba.core.ssa._GatherDefsHandler object at 0x7fa0474e8c70>
DEBUG 2022-02-14 16:37:58,443 on stmt: $64for_iter.1 = iternext(value=$phi64.0)
DEBUG 2022-02-14 16:37:58,443 on stmt: $64for_iter.2 = pair_first(value=$64for_iter.1)
DEBUG 2022-02-14 16:37:58,443 on stmt: $64for_iter.3 = pair_second(value=$64for_iter.1)
DEBUG 2022-02-14 16:37:58,443 on stmt: $phi66.1 = $64for_iter.2
DEBUG 2022-02-14 16:37:58,443 on stmt: branch $64for_iter.3, 66, 94
DEBUG 2022-02-14 16:37:58,443 ==== SSA block analysis pass on 66
DEBUG 2022-02-14 16:37:58,443 Running <numba.core.ssa._GatherDefsHandler object at 0x7fa0474e8c70>
DEBUG 2022-02-14 16:37:58,443 on stmt: i = $phi66.1
DEBUG 2022-02-14 16:37:58,443 on stmt: $74binary_subtract.5 = n - i
DEBUG 2022-02-14 16:37:58,443 on stmt: $76inplace_multiply.6 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=binom, rhs=$74binary_subtract.5, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:37:58,443 on stmt: binom = $76inplace_multiply.6
DEBUG 2022-02-14 16:37:58,443 on stmt: $const84.9 = const(int, 1)
DEBUG 2022-02-14 16:37:58,443 on stmt: $86binary_add.10 = i + $const84.9
DEBUG 2022-02-14 16:37:58,444 on stmt: $88inplace_floor_divide.11 = inplace_binop(fn=<built-in function ifloordiv>, immutable_fn=<built-in function floordiv>, lhs=binom, rhs=$86binary_add.10, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:37:58,444 on stmt: binom = $88inplace_floor_divide.11
DEBUG 2022-02-14 16:37:58,444 on stmt: jump 64
DEBUG 2022-02-14 16:37:58,444 ==== SSA block analysis pass on 94
DEBUG 2022-02-14 16:37:58,444 Running <numba.core.ssa._GatherDefsHandler object at 0x7fa0474e8c70>
DEBUG 2022-02-14 16:37:58,444 on stmt: $96return_value.1 = cast(value=binom)
DEBUG 2022-02-14 16:37:58,444 on stmt: return $96return_value.1
DEBUG 2022-02-14 16:37:58,445 defs defaultdict(<class 'list'>,
            {'$14compare_op.2': [<numba.core.ir.Assign object at 0x7fa0475029d0>],
             '$16pred': [<numba.core.ir.Assign object at 0x7fa047502c40>],
             '$20return_value.1': [<numba.core.ir.Assign object at 0x7fa047502fa0>],
             '$26compare_op.2': [<numba.core.ir.Assign object at 0x7fa047500550>],
             '$28pred': [<numba.core.ir.Assign object at 0x7fa0475007c0>],
             '$34compare_op.2': [<numba.core.ir.Assign object at 0x7fa047500c70>],
             '$36pred': [<numba.core.ir.Assign object at 0x7fa047500ee0>],
             '$40return_value.1': [<numba.core.ir.Assign object at 0x7fa0474d4280>],
             '$46load_global.1': [<numba.core.ir.Assign object at 0x7fa0474d47c0>],
             '$48load_global.2': [<numba.core.ir.Assign object at 0x7fa0474d4940>],
             '$56binary_subtract.6': [<numba.core.ir.Assign object at 0x7fa0474d4e50>],
             '$58call_function.7': [<numba.core.ir.Assign object at 0x7fa0474f3040>],
             '$60call_function.8': [<numba.core.ir.Assign object at 0x7fa0474f31c0>],
             '$62get_iter.9': [<numba.core.ir.Assign object at 0x7fa0474f32e0>],
             '$64for_iter.1': [<numba.core.ir.Assign object at 0x7fa0474f34f0>],
             '$64for_iter.2': [<numba.core.ir.Assign object at 0x7fa0474f3610>],
             '$64for_iter.3': [<numba.core.ir.Assign object at 0x7fa0474f3730>],
             '$6compare_op.2': [<numba.core.ir.Assign object at 0x7fa0475022b0>],
             '$74binary_subtract.5': [<numba.core.ir.Assign object at 0x7fa0474f3f10>],
             '$76inplace_multiply.6': [<numba.core.ir.Assign object at 0x7fa0474e80d0>],
             '$86binary_add.10': [<numba.core.ir.Assign object at 0x7fa0474e86d0>],
             '$88inplace_floor_divide.11': [<numba.core.ir.Assign object at 0x7fa0474e8850>],
             '$8pred': [<numba.core.ir.Assign object at 0x7fa047502520>],
             '$96return_value.1': [<numba.core.ir.Assign object at 0x7fa0474e8b20>],
             '$const18.0': [<numba.core.ir.Assign object at 0x7fa047502e20>],
             '$const24.1': [<numba.core.ir.Assign object at 0x7fa0475003a0>],
             '$const38.0': [<numba.core.ir.Assign object at 0x7fa0474d4100>],
             '$const4.1': [<numba.core.ir.Assign object at 0x7fa047502100>],
             '$const84.9': [<numba.core.ir.Assign object at 0x7fa0474e8520>],
             '$phi64.0': [<numba.core.ir.Assign object at 0x7fa0474d46d0>],
             '$phi66.1': [<numba.core.ir.Assign object at 0x7fa0474f3430>],
             'binom': [<numba.core.ir.Assign object at 0x7fa0474d4520>,
                       <numba.core.ir.Assign object at 0x7fa0474e8190>,
                       <numba.core.ir.Assign object at 0x7fa0474e8910>],
             'bool16': [<numba.core.ir.Assign object at 0x7fa047502b20>],
             'bool28': [<numba.core.ir.Assign object at 0x7fa0475006a0>],
             'bool36': [<numba.core.ir.Assign object at 0x7fa047500dc0>],
             'bool8': [<numba.core.ir.Assign object at 0x7fa047502400>],
             'i': [<numba.core.ir.Assign object at 0x7fa0474f3a00>],
             'k': [<numba.core.ir.Assign object at 0x7fa047517a30>],
             'n': [<numba.core.ir.Assign object at 0x7fa047408910>]})
DEBUG 2022-02-14 16:37:58,445 SSA violators {'binom'}
DEBUG 2022-02-14 16:37:58,445 Fix SSA violator on var binom
DEBUG 2022-02-14 16:37:58,445 ==== SSA block rewrite pass on 0
DEBUG 2022-02-14 16:37:58,445 Running <numba.core.ssa._FreshVarHandler object at 0x7fa0474e8ee0>
DEBUG 2022-02-14 16:37:58,445 on stmt: n = arg(0, name=n)
DEBUG 2022-02-14 16:37:58,445 on stmt: k = arg(1, name=k)
DEBUG 2022-02-14 16:37:58,445 on stmt: $const4.1 = const(int, 0)
DEBUG 2022-02-14 16:37:58,445 on stmt: $6compare_op.2 = k < $const4.1
DEBUG 2022-02-14 16:37:58,445 on stmt: bool8 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:37:58,445 on stmt: $8pred = call bool8($6compare_op.2, func=bool8, args=(Var($6compare_op.2, _loop_hafnian_subroutines.py:10),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:37:58,445 on stmt: branch $8pred, 18, 10
DEBUG 2022-02-14 16:37:58,445 ==== SSA block rewrite pass on 10
DEBUG 2022-02-14 16:37:58,445 Running <numba.core.ssa._FreshVarHandler object at 0x7fa0474e8ee0>
DEBUG 2022-02-14 16:37:58,446 on stmt: $14compare_op.2 = k > n
DEBUG 2022-02-14 16:37:58,446 on stmt: bool16 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:37:58,446 on stmt: $16pred = call bool16($14compare_op.2, func=bool16, args=(Var($14compare_op.2, _loop_hafnian_subroutines.py:10),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:37:58,446 on stmt: branch $16pred, 18, 22
DEBUG 2022-02-14 16:37:58,446 ==== SSA block rewrite pass on 18
DEBUG 2022-02-14 16:37:58,446 Running <numba.core.ssa._FreshVarHandler object at 0x7fa0474e8ee0>
DEBUG 2022-02-14 16:37:58,446 on stmt: $const18.0 = const(int, 0)
DEBUG 2022-02-14 16:37:58,446 on stmt: $20return_value.1 = cast(value=$const18.0)
DEBUG 2022-02-14 16:37:58,446 on stmt: return $20return_value.1
DEBUG 2022-02-14 16:37:58,446 ==== SSA block rewrite pass on 22
DEBUG 2022-02-14 16:37:58,446 Running <numba.core.ssa._FreshVarHandler object at 0x7fa0474e8ee0>
DEBUG 2022-02-14 16:37:58,446 on stmt: $const24.1 = const(int, 0)
DEBUG 2022-02-14 16:37:58,446 on stmt: $26compare_op.2 = k == $const24.1
DEBUG 2022-02-14 16:37:58,446 on stmt: bool28 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:37:58,446 on stmt: $28pred = call bool28($26compare_op.2, func=bool28, args=(Var($26compare_op.2, _loop_hafnian_subroutines.py:12),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:37:58,447 on stmt: branch $28pred, 38, 30
DEBUG 2022-02-14 16:37:58,447 ==== SSA block rewrite pass on 30
DEBUG 2022-02-14 16:37:58,447 Running <numba.core.ssa._FreshVarHandler object at 0x7fa0474e8ee0>
DEBUG 2022-02-14 16:37:58,447 on stmt: $34compare_op.2 = k == n
DEBUG 2022-02-14 16:37:58,447 on stmt: bool36 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:37:58,447 on stmt: $36pred = call bool36($34compare_op.2, func=bool36, args=(Var($34compare_op.2, _loop_hafnian_subroutines.py:12),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:37:58,447 on stmt: branch $36pred, 38, 42
DEBUG 2022-02-14 16:37:58,447 ==== SSA block rewrite pass on 38
DEBUG 2022-02-14 16:37:58,447 Running <numba.core.ssa._FreshVarHandler object at 0x7fa0474e8ee0>
DEBUG 2022-02-14 16:37:58,447 on stmt: $const38.0 = const(int, 1)
DEBUG 2022-02-14 16:37:58,447 on stmt: $40return_value.1 = cast(value=$const38.0)
DEBUG 2022-02-14 16:37:58,447 on stmt: return $40return_value.1
DEBUG 2022-02-14 16:37:58,447 ==== SSA block rewrite pass on 42
DEBUG 2022-02-14 16:37:58,448 Running <numba.core.ssa._FreshVarHandler object at 0x7fa0474e8ee0>
DEBUG 2022-02-14 16:37:58,448 on stmt: binom = const(int, 1)
DEBUG 2022-02-14 16:37:58,448 first assign: binom
DEBUG 2022-02-14 16:37:58,448 replaced with: binom = const(int, 1)
DEBUG 2022-02-14 16:37:58,448 on stmt: $46load_global.1 = global(range: <class 'range'>)
DEBUG 2022-02-14 16:37:58,448 on stmt: $48load_global.2 = global(min: <built-in function min>)
DEBUG 2022-02-14 16:37:58,448 on stmt: $56binary_subtract.6 = n - k
DEBUG 2022-02-14 16:37:58,448 on stmt: $58call_function.7 = call $48load_global.2(k, $56binary_subtract.6, func=$48load_global.2, args=[Var(k, _loop_hafnian_subroutines.py:10), Var($56binary_subtract.6, _loop_hafnian_subroutines.py:15)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:37:58,448 on stmt: $60call_function.8 = call $46load_global.1($58call_function.7, func=$46load_global.1, args=[Var($58call_function.7, _loop_hafnian_subroutines.py:15)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:37:58,448 on stmt: $62get_iter.9 = getiter(value=$60call_function.8)
DEBUG 2022-02-14 16:37:58,448 on stmt: $phi64.0 = $62get_iter.9
DEBUG 2022-02-14 16:37:58,448 on stmt: jump 64
DEBUG 2022-02-14 16:37:58,449 ==== SSA block rewrite pass on 64
DEBUG 2022-02-14 16:37:58,449 Running <numba.core.ssa._FreshVarHandler object at 0x7fa0474e8ee0>
DEBUG 2022-02-14 16:37:58,449 on stmt: $64for_iter.1 = iternext(value=$phi64.0)
DEBUG 2022-02-14 16:37:58,449 on stmt: $64for_iter.2 = pair_first(value=$64for_iter.1)
DEBUG 2022-02-14 16:37:58,449 on stmt: $64for_iter.3 = pair_second(value=$64for_iter.1)
DEBUG 2022-02-14 16:37:58,449 on stmt: $phi66.1 = $64for_iter.2
DEBUG 2022-02-14 16:37:58,449 on stmt: branch $64for_iter.3, 66, 94
DEBUG 2022-02-14 16:37:58,449 ==== SSA block rewrite pass on 66
DEBUG 2022-02-14 16:37:58,449 Running <numba.core.ssa._FreshVarHandler object at 0x7fa0474e8ee0>
DEBUG 2022-02-14 16:37:58,449 on stmt: i = $phi66.1
DEBUG 2022-02-14 16:37:58,449 on stmt: $74binary_subtract.5 = n - i
DEBUG 2022-02-14 16:37:58,450 on stmt: $76inplace_multiply.6 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=binom, rhs=$74binary_subtract.5, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:37:58,450 on stmt: binom = $76inplace_multiply.6
DEBUG 2022-02-14 16:37:58,450 replaced with: binom.1 = $76inplace_multiply.6
DEBUG 2022-02-14 16:37:58,450 on stmt: $const84.9 = const(int, 1)
DEBUG 2022-02-14 16:37:58,450 on stmt: $86binary_add.10 = i + $const84.9
DEBUG 2022-02-14 16:37:58,450 on stmt: $88inplace_floor_divide.11 = inplace_binop(fn=<built-in function ifloordiv>, immutable_fn=<built-in function floordiv>, lhs=binom, rhs=$86binary_add.10, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:37:58,450 on stmt: binom = $88inplace_floor_divide.11
DEBUG 2022-02-14 16:37:58,450 replaced with: binom.2 = $88inplace_floor_divide.11
DEBUG 2022-02-14 16:37:58,450 on stmt: jump 64
DEBUG 2022-02-14 16:37:58,450 ==== SSA block rewrite pass on 94
DEBUG 2022-02-14 16:37:58,450 Running <numba.core.ssa._FreshVarHandler object at 0x7fa0474e8ee0>
DEBUG 2022-02-14 16:37:58,450 on stmt: $96return_value.1 = cast(value=binom)
DEBUG 2022-02-14 16:37:58,451 on stmt: return $96return_value.1
DEBUG 2022-02-14 16:37:58,451 Replaced assignments: defaultdict(<class 'list'>,
            {42: [<numba.core.ir.Assign object at 0x7fa0474c64f0>],
             66: [<numba.core.ir.Assign object at 0x7fa0474c6a30>,
                  <numba.core.ir.Assign object at 0x7fa0474c67f0>]})
DEBUG 2022-02-14 16:37:58,451 ==== SSA block rewrite pass on 0
DEBUG 2022-02-14 16:37:58,451 Running <numba.core.ssa._FixSSAVars object at 0x7fa0474e8ee0>
DEBUG 2022-02-14 16:37:58,451 on stmt: n = arg(0, name=n)
DEBUG 2022-02-14 16:37:58,451 on stmt: k = arg(1, name=k)
DEBUG 2022-02-14 16:37:58,451 on stmt: $const4.1 = const(int, 0)
DEBUG 2022-02-14 16:37:58,451 on stmt: $6compare_op.2 = k < $const4.1
DEBUG 2022-02-14 16:37:58,451 on stmt: bool8 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:37:58,451 on stmt: $8pred = call bool8($6compare_op.2, func=bool8, args=(Var($6compare_op.2, _loop_hafnian_subroutines.py:10),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:37:58,452 on stmt: branch $8pred, 18, 10
DEBUG 2022-02-14 16:37:58,452 ==== SSA block rewrite pass on 10
DEBUG 2022-02-14 16:37:58,452 Running <numba.core.ssa._FixSSAVars object at 0x7fa0474e8ee0>
DEBUG 2022-02-14 16:37:58,452 on stmt: $14compare_op.2 = k > n
DEBUG 2022-02-14 16:37:58,452 on stmt: bool16 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:37:58,452 on stmt: $16pred = call bool16($14compare_op.2, func=bool16, args=(Var($14compare_op.2, _loop_hafnian_subroutines.py:10),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:37:58,452 on stmt: branch $16pred, 18, 22
DEBUG 2022-02-14 16:37:58,452 ==== SSA block rewrite pass on 18
DEBUG 2022-02-14 16:37:58,452 Running <numba.core.ssa._FixSSAVars object at 0x7fa0474e8ee0>
DEBUG 2022-02-14 16:37:58,452 on stmt: $const18.0 = const(int, 0)
DEBUG 2022-02-14 16:37:58,452 on stmt: $20return_value.1 = cast(value=$const18.0)
DEBUG 2022-02-14 16:37:58,452 on stmt: return $20return_value.1
DEBUG 2022-02-14 16:37:58,452 ==== SSA block rewrite pass on 22
DEBUG 2022-02-14 16:37:58,453 Running <numba.core.ssa._FixSSAVars object at 0x7fa0474e8ee0>
DEBUG 2022-02-14 16:37:58,453 on stmt: $const24.1 = const(int, 0)
DEBUG 2022-02-14 16:37:58,453 on stmt: $26compare_op.2 = k == $const24.1
DEBUG 2022-02-14 16:37:58,453 on stmt: bool28 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:37:58,453 on stmt: $28pred = call bool28($26compare_op.2, func=bool28, args=(Var($26compare_op.2, _loop_hafnian_subroutines.py:12),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:37:58,453 on stmt: branch $28pred, 38, 30
DEBUG 2022-02-14 16:37:58,453 ==== SSA block rewrite pass on 30
DEBUG 2022-02-14 16:37:58,453 Running <numba.core.ssa._FixSSAVars object at 0x7fa0474e8ee0>
DEBUG 2022-02-14 16:37:58,453 on stmt: $34compare_op.2 = k == n
DEBUG 2022-02-14 16:37:58,453 on stmt: bool36 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:37:58,453 on stmt: $36pred = call bool36($34compare_op.2, func=bool36, args=(Var($34compare_op.2, _loop_hafnian_subroutines.py:12),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:37:58,453 on stmt: branch $36pred, 38, 42
DEBUG 2022-02-14 16:37:58,454 ==== SSA block rewrite pass on 38
DEBUG 2022-02-14 16:37:58,454 Running <numba.core.ssa._FixSSAVars object at 0x7fa0474e8ee0>
DEBUG 2022-02-14 16:37:58,454 on stmt: $const38.0 = const(int, 1)
DEBUG 2022-02-14 16:37:58,454 on stmt: $40return_value.1 = cast(value=$const38.0)
DEBUG 2022-02-14 16:37:58,454 on stmt: return $40return_value.1
DEBUG 2022-02-14 16:37:58,454 ==== SSA block rewrite pass on 42
DEBUG 2022-02-14 16:37:58,454 Running <numba.core.ssa._FixSSAVars object at 0x7fa0474e8ee0>
DEBUG 2022-02-14 16:37:58,454 on stmt: binom = const(int, 1)
DEBUG 2022-02-14 16:37:58,454 on stmt: $46load_global.1 = global(range: <class 'range'>)
DEBUG 2022-02-14 16:37:58,454 on stmt: $48load_global.2 = global(min: <built-in function min>)
DEBUG 2022-02-14 16:37:58,454 on stmt: $56binary_subtract.6 = n - k
DEBUG 2022-02-14 16:37:58,454 on stmt: $58call_function.7 = call $48load_global.2(k, $56binary_subtract.6, func=$48load_global.2, args=[Var(k, _loop_hafnian_subroutines.py:10), Var($56binary_subtract.6, _loop_hafnian_subroutines.py:15)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:37:58,454 on stmt: $60call_function.8 = call $46load_global.1($58call_function.7, func=$46load_global.1, args=[Var($58call_function.7, _loop_hafnian_subroutines.py:15)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:37:58,455 on stmt: $62get_iter.9 = getiter(value=$60call_function.8)
DEBUG 2022-02-14 16:37:58,455 on stmt: $phi64.0 = $62get_iter.9
DEBUG 2022-02-14 16:37:58,455 on stmt: jump 64
DEBUG 2022-02-14 16:37:58,455 ==== SSA block rewrite pass on 64
DEBUG 2022-02-14 16:37:58,455 Running <numba.core.ssa._FixSSAVars object at 0x7fa0474e8ee0>
DEBUG 2022-02-14 16:37:58,455 on stmt: $64for_iter.1 = iternext(value=$phi64.0)
DEBUG 2022-02-14 16:37:58,455 on stmt: $64for_iter.2 = pair_first(value=$64for_iter.1)
DEBUG 2022-02-14 16:37:58,455 on stmt: $64for_iter.3 = pair_second(value=$64for_iter.1)
DEBUG 2022-02-14 16:37:58,455 on stmt: $phi66.1 = $64for_iter.2
DEBUG 2022-02-14 16:37:58,455 on stmt: branch $64for_iter.3, 66, 94
DEBUG 2022-02-14 16:37:58,455 ==== SSA block rewrite pass on 66
DEBUG 2022-02-14 16:37:58,456 Running <numba.core.ssa._FixSSAVars object at 0x7fa0474e8ee0>
DEBUG 2022-02-14 16:37:58,456 on stmt: i = $phi66.1
DEBUG 2022-02-14 16:37:58,456 on stmt: $74binary_subtract.5 = n - i
DEBUG 2022-02-14 16:37:58,456 on stmt: $76inplace_multiply.6 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=binom, rhs=$74binary_subtract.5, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:37:58,456 find_def var='binom' stmt=$76inplace_multiply.6 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=binom, rhs=$74binary_subtract.5, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:37:58,456 find_def_from_top label 66
DEBUG 2022-02-14 16:37:58,456 idom 64 from label 66
DEBUG 2022-02-14 16:37:58,456 find_def_from_bottom label 64
DEBUG 2022-02-14 16:37:58,456 find_def_from_top label 64
DEBUG 2022-02-14 16:37:58,456 insert phi node binom.3 = phi(incoming_values=[], incoming_blocks=[]) at 64
DEBUG 2022-02-14 16:37:58,457 find_def_from_bottom label 42
DEBUG 2022-02-14 16:37:58,457 incoming_def binom = const(int, 1)
DEBUG 2022-02-14 16:37:58,457 find_def_from_bottom label 66
DEBUG 2022-02-14 16:37:58,457 incoming_def binom.2 = $88inplace_floor_divide.11
DEBUG 2022-02-14 16:37:58,457 replaced with: $76inplace_multiply.6 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=binom.3, rhs=$74binary_subtract.5, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:37:58,457 on stmt: binom.1 = $76inplace_multiply.6
DEBUG 2022-02-14 16:37:58,457 on stmt: $const84.9 = const(int, 1)
DEBUG 2022-02-14 16:37:58,457 on stmt: $86binary_add.10 = i + $const84.9
DEBUG 2022-02-14 16:37:58,457 on stmt: $88inplace_floor_divide.11 = inplace_binop(fn=<built-in function ifloordiv>, immutable_fn=<built-in function floordiv>, lhs=binom, rhs=$86binary_add.10, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:37:58,457 find_def var='binom' stmt=$88inplace_floor_divide.11 = inplace_binop(fn=<built-in function ifloordiv>, immutable_fn=<built-in function floordiv>, lhs=binom, rhs=$86binary_add.10, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:37:58,457 replaced with: $88inplace_floor_divide.11 = inplace_binop(fn=<built-in function ifloordiv>, immutable_fn=<built-in function floordiv>, lhs=binom.1, rhs=$86binary_add.10, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:37:58,458 on stmt: binom.2 = $88inplace_floor_divide.11
DEBUG 2022-02-14 16:37:58,458 on stmt: jump 64
DEBUG 2022-02-14 16:37:58,458 ==== SSA block rewrite pass on 94
DEBUG 2022-02-14 16:37:58,458 Running <numba.core.ssa._FixSSAVars object at 0x7fa0474e8ee0>
DEBUG 2022-02-14 16:37:58,458 on stmt: $96return_value.1 = cast(value=binom)
DEBUG 2022-02-14 16:37:58,458 find_def var='binom' stmt=$96return_value.1 = cast(value=binom)
DEBUG 2022-02-14 16:37:58,458 find_def_from_top label 94
DEBUG 2022-02-14 16:37:58,458 idom 64 from label 94
DEBUG 2022-02-14 16:37:58,458 find_def_from_bottom label 64
DEBUG 2022-02-14 16:37:58,458 replaced with: $96return_value.1 = cast(value=binom.3)
DEBUG 2022-02-14 16:37:58,458 on stmt: return $96return_value.1
DEBUG 2022-02-14 16:37:58,754 bytecode dump:
>          0	NOP(arg=None, lineno=3)
           2	LOAD_GLOBAL(arg=0, lineno=3)
           4	LOAD_FAST(arg=0, lineno=3)
           6	LOAD_FAST(arg=1, lineno=3)
           8	CALL_FUNCTION(arg=2, lineno=3)
          10	RETURN_VALUE(arg=None, lineno=3)
DEBUG 2022-02-14 16:37:58,755 pending: deque([State(pc_initial=0 nstack_initial=0)])
DEBUG 2022-02-14 16:37:58,755 stack: []
DEBUG 2022-02-14 16:37:58,755 dispatch pc=0, inst=NOP(arg=None, lineno=3)
DEBUG 2022-02-14 16:37:58,755 stack []
DEBUG 2022-02-14 16:37:58,755 dispatch pc=2, inst=LOAD_GLOBAL(arg=0, lineno=3)
DEBUG 2022-02-14 16:37:58,755 stack []
DEBUG 2022-02-14 16:37:58,755 dispatch pc=4, inst=LOAD_FAST(arg=0, lineno=3)
DEBUG 2022-02-14 16:37:58,755 stack ['$2load_global.0']
DEBUG 2022-02-14 16:37:58,755 dispatch pc=6, inst=LOAD_FAST(arg=1, lineno=3)
DEBUG 2022-02-14 16:37:58,755 stack ['$2load_global.0', '$tmp04.1']
DEBUG 2022-02-14 16:37:58,755 dispatch pc=8, inst=CALL_FUNCTION(arg=2, lineno=3)
DEBUG 2022-02-14 16:37:58,755 stack ['$2load_global.0', '$tmp04.1', '$dtype6.2']
DEBUG 2022-02-14 16:37:58,755 dispatch pc=10, inst=RETURN_VALUE(arg=None, lineno=3)
DEBUG 2022-02-14 16:37:58,755 stack ['$8call_function.3']
DEBUG 2022-02-14 16:37:58,755 end state. edges=[]
DEBUG 2022-02-14 16:37:58,755 -------------------------Prune PHIs-------------------------
DEBUG 2022-02-14 16:37:58,755 Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
DEBUG 2022-02-14 16:37:58,755 defmap: {}
DEBUG 2022-02-14 16:37:58,755 phismap: defaultdict(<class 'set'>, {})
DEBUG 2022-02-14 16:37:58,756 changing phismap: defaultdict(<class 'set'>, {})
DEBUG 2022-02-14 16:37:58,756 keep phismap: {}
DEBUG 2022-02-14 16:37:58,756 new_out: defaultdict(<class 'dict'>, {})
DEBUG 2022-02-14 16:37:58,756 ----------------------DONE Prune PHIs-----------------------
DEBUG 2022-02-14 16:37:58,756 block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$2load_global.0'}), (4, {'res': '$tmp04.1'}), (6, {'res': '$dtype6.2'}), (8, {'func': '$2load_global.0', 'args': ['$tmp04.1', '$dtype6.2'], 'res': '$8call_function.3'}), (10, {'retval': '$8call_function.3', 'castval': '$10return_value.4'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG 2022-02-14 16:37:58,756 label 0:
    tmp0 = arg(0, name=tmp0)                 ['tmp0']
    dtype = arg(1, name=dtype)               ['dtype']
    $2load_global.0 = global(intrin: <intrinsic stub>) ['$2load_global.0']
    $8call_function.3 = call $2load_global.0(tmp0, dtype, func=$2load_global.0, args=[Var(tmp0, <string>:3), Var(dtype, <string>:3)], kws=(), vararg=None, target=None) ['$2load_global.0', '$8call_function.3', 'dtype', 'tmp0']
    $10return_value.4 = cast(value=$8call_function.3) ['$10return_value.4', '$8call_function.3']
    return $10return_value.4                 ['$10return_value.4']

DEBUG 2022-02-14 16:37:58,757 ==== SSA block analysis pass on 0
DEBUG 2022-02-14 16:37:58,757 Running <numba.core.ssa._GatherDefsHandler object at 0x7fa0474c4ca0>
DEBUG 2022-02-14 16:37:58,758 on stmt: tmp0 = arg(0, name=tmp0)
DEBUG 2022-02-14 16:37:58,758 on stmt: dtype = arg(1, name=dtype)
DEBUG 2022-02-14 16:37:58,758 on stmt: $2load_global.0 = global(intrin: <intrinsic stub>)
DEBUG 2022-02-14 16:37:58,758 on stmt: $8call_function.3 = call $2load_global.0(tmp0, dtype, func=$2load_global.0, args=[Var(tmp0, <string>:3), Var(dtype, <string>:3)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:37:58,758 on stmt: $10return_value.4 = cast(value=$8call_function.3)
DEBUG 2022-02-14 16:37:58,758 on stmt: return $10return_value.4
DEBUG 2022-02-14 16:37:58,758 defs defaultdict(<class 'list'>,
            {'$10return_value.4': [<numba.core.ir.Assign object at 0x7fa04737f640>],
             '$2load_global.0': [<numba.core.ir.Assign object at 0x7fa047475280>],
             '$8call_function.3': [<numba.core.ir.Assign object at 0x7fa0474b4280>],
             'dtype': [<numba.core.ir.Assign object at 0x7fa047475790>],
             'tmp0': [<numba.core.ir.Assign object at 0x7fa04745fa00>]})
DEBUG 2022-02-14 16:37:58,758 SSA violators set()
DEBUG 2022-02-14 16:37:58,795 bytecode dump:
>          0	NOP(arg=None, lineno=122)
           2	LOAD_FAST(arg=0, lineno=122)
           4	STORE_FAST(arg=2, lineno=122)
           6	BUILD_LIST(arg=0, lineno=123)
           8	STORE_FAST(arg=3, lineno=123)
          10	LOAD_GLOBAL(arg=0, lineno=124)
          12	LOAD_METHOD(arg=1, lineno=124)
          14	LOAD_FAST(arg=1, lineno=124)
          16	CALL_METHOD(arg=1, lineno=124)
          18	LOAD_CONST(arg=1, lineno=124)
          20	BINARY_ADD(arg=None, lineno=124)
          22	STORE_FAST(arg=4, lineno=124)
          24	LOAD_FAST(arg=4, lineno=125)
          26	LOAD_CONST(arg=2, lineno=125)
          28	LOAD_CONST(arg=2, lineno=125)
          30	LOAD_CONST(arg=3, lineno=125)
          32	BUILD_SLICE(arg=3, lineno=125)
          34	BINARY_SUBSCR(arg=None, lineno=125)
          36	GET_ITER(arg=None, lineno=125)
>         38	FOR_ITER(arg=26, lineno=125)
          40	STORE_FAST(arg=5, lineno=125)
          42	LOAD_FAST(arg=3, lineno=126)
          44	LOAD_METHOD(arg=2, lineno=126)
          46	LOAD_FAST(arg=2, lineno=126)
          48	LOAD_FAST(arg=5, lineno=126)
          50	BINARY_MODULO(arg=None, lineno=126)
          52	CALL_METHOD(arg=1, lineno=126)
          54	POP_TOP(arg=None, lineno=126)
          56	LOAD_FAST(arg=2, lineno=127)
          58	LOAD_FAST(arg=5, lineno=127)
          60	INPLACE_FLOOR_DIVIDE(arg=None, lineno=127)
          62	STORE_FAST(arg=2, lineno=127)
          64	JUMP_ABSOLUTE(arg=38, lineno=127)
>         66	LOAD_GLOBAL(arg=0, lineno=128)
          68	LOAD_ATTR(arg=3, lineno=128)
          70	LOAD_FAST(arg=3, lineno=128)
          72	LOAD_CONST(arg=2, lineno=128)
          74	LOAD_CONST(arg=2, lineno=128)
          76	LOAD_CONST(arg=3, lineno=128)
          78	BUILD_SLICE(arg=3, lineno=128)
          80	BINARY_SUBSCR(arg=None, lineno=128)
          82	LOAD_FAST(arg=1, lineno=128)
          84	LOAD_ATTR(arg=4, lineno=128)
          86	LOAD_CONST(arg=4, lineno=128)
          88	CALL_FUNCTION_KW(arg=2, lineno=128)
          90	RETURN_VALUE(arg=None, lineno=128)
DEBUG 2022-02-14 16:37:58,796 pending: deque([State(pc_initial=0 nstack_initial=0)])
DEBUG 2022-02-14 16:37:58,796 stack: []
DEBUG 2022-02-14 16:37:58,796 dispatch pc=0, inst=NOP(arg=None, lineno=122)
DEBUG 2022-02-14 16:37:58,796 stack []
DEBUG 2022-02-14 16:37:58,796 dispatch pc=2, inst=LOAD_FAST(arg=0, lineno=122)
DEBUG 2022-02-14 16:37:58,796 stack []
DEBUG 2022-02-14 16:37:58,796 dispatch pc=4, inst=STORE_FAST(arg=2, lineno=122)
DEBUG 2022-02-14 16:37:58,796 stack ['$j2.0']
DEBUG 2022-02-14 16:37:58,796 dispatch pc=6, inst=BUILD_LIST(arg=0, lineno=123)
DEBUG 2022-02-14 16:37:58,796 stack []
DEBUG 2022-02-14 16:37:58,796 dispatch pc=8, inst=STORE_FAST(arg=3, lineno=123)
DEBUG 2022-02-14 16:37:58,796 stack ['$6build_list.1']
DEBUG 2022-02-14 16:37:58,796 dispatch pc=10, inst=LOAD_GLOBAL(arg=0, lineno=124)
DEBUG 2022-02-14 16:37:58,796 stack []
DEBUG 2022-02-14 16:37:58,796 dispatch pc=12, inst=LOAD_METHOD(arg=1, lineno=124)
DEBUG 2022-02-14 16:37:58,796 stack ['$10load_global.2']
DEBUG 2022-02-14 16:37:58,796 dispatch pc=14, inst=LOAD_FAST(arg=1, lineno=124)
DEBUG 2022-02-14 16:37:58,796 stack ['$12load_method.3']
DEBUG 2022-02-14 16:37:58,796 dispatch pc=16, inst=CALL_METHOD(arg=1, lineno=124)
DEBUG 2022-02-14 16:37:58,796 stack ['$12load_method.3', '$reps14.4']
DEBUG 2022-02-14 16:37:58,796 dispatch pc=18, inst=LOAD_CONST(arg=1, lineno=124)
DEBUG 2022-02-14 16:37:58,796 stack ['$16call_method.5']
DEBUG 2022-02-14 16:37:58,797 dispatch pc=20, inst=BINARY_ADD(arg=None, lineno=124)
DEBUG 2022-02-14 16:37:58,797 stack ['$16call_method.5', '$const18.6']
DEBUG 2022-02-14 16:37:58,797 dispatch pc=22, inst=STORE_FAST(arg=4, lineno=124)
DEBUG 2022-02-14 16:37:58,797 stack ['$20binary_add.7']
DEBUG 2022-02-14 16:37:58,797 dispatch pc=24, inst=LOAD_FAST(arg=4, lineno=125)
DEBUG 2022-02-14 16:37:58,797 stack []
DEBUG 2022-02-14 16:37:58,797 dispatch pc=26, inst=LOAD_CONST(arg=2, lineno=125)
DEBUG 2022-02-14 16:37:58,797 stack ['$bases24.8']
DEBUG 2022-02-14 16:37:58,797 dispatch pc=28, inst=LOAD_CONST(arg=2, lineno=125)
DEBUG 2022-02-14 16:37:58,797 stack ['$bases24.8', '$const26.9']
DEBUG 2022-02-14 16:37:58,797 dispatch pc=30, inst=LOAD_CONST(arg=3, lineno=125)
DEBUG 2022-02-14 16:37:58,797 stack ['$bases24.8', '$const26.9', '$const28.10']
DEBUG 2022-02-14 16:37:58,797 dispatch pc=32, inst=BUILD_SLICE(arg=3, lineno=125)
DEBUG 2022-02-14 16:37:58,797 stack ['$bases24.8', '$const26.9', '$const28.10', '$const30.11']
DEBUG 2022-02-14 16:37:58,797 dispatch pc=34, inst=BINARY_SUBSCR(arg=None, lineno=125)
DEBUG 2022-02-14 16:37:58,797 stack ['$bases24.8', '$32build_slice.13']
DEBUG 2022-02-14 16:37:58,797 dispatch pc=36, inst=GET_ITER(arg=None, lineno=125)
DEBUG 2022-02-14 16:37:58,797 stack ['$34binary_subscr.14']
DEBUG 2022-02-14 16:37:58,797 end state. edges=[Edge(pc=38, stack=('$36get_iter.15',), blockstack=(), npush=0)]
DEBUG 2022-02-14 16:37:58,797 pending: deque([State(pc_initial=38 nstack_initial=1)])
DEBUG 2022-02-14 16:37:58,798 stack: ['$phi38.0']
DEBUG 2022-02-14 16:37:58,798 dispatch pc=38, inst=FOR_ITER(arg=26, lineno=125)
DEBUG 2022-02-14 16:37:58,798 stack ['$phi38.0']
DEBUG 2022-02-14 16:37:58,798 end state. edges=[Edge(pc=66, stack=(), blockstack=(), npush=0), Edge(pc=40, stack=('$phi38.0', '$38for_iter.2'), blockstack=(), npush=0)]
DEBUG 2022-02-14 16:37:58,798 pending: deque([State(pc_initial=66 nstack_initial=0), State(pc_initial=40 nstack_initial=2)])
DEBUG 2022-02-14 16:37:58,798 stack: []
DEBUG 2022-02-14 16:37:58,798 dispatch pc=66, inst=LOAD_GLOBAL(arg=0, lineno=128)
DEBUG 2022-02-14 16:37:58,798 stack []
DEBUG 2022-02-14 16:37:58,798 dispatch pc=68, inst=LOAD_ATTR(arg=3, lineno=128)
DEBUG 2022-02-14 16:37:58,798 stack ['$66load_global.0']
DEBUG 2022-02-14 16:37:58,798 dispatch pc=70, inst=LOAD_FAST(arg=3, lineno=128)
DEBUG 2022-02-14 16:37:58,798 stack ['$68load_attr.1']
DEBUG 2022-02-14 16:37:58,798 dispatch pc=72, inst=LOAD_CONST(arg=2, lineno=128)
DEBUG 2022-02-14 16:37:58,798 stack ['$68load_attr.1', '$output70.2']
DEBUG 2022-02-14 16:37:58,798 dispatch pc=74, inst=LOAD_CONST(arg=2, lineno=128)
DEBUG 2022-02-14 16:37:58,798 stack ['$68load_attr.1', '$output70.2', '$const72.3']
DEBUG 2022-02-14 16:37:58,798 dispatch pc=76, inst=LOAD_CONST(arg=3, lineno=128)
DEBUG 2022-02-14 16:37:58,798 stack ['$68load_attr.1', '$output70.2', '$const72.3', '$const74.4']
DEBUG 2022-02-14 16:37:58,798 dispatch pc=78, inst=BUILD_SLICE(arg=3, lineno=128)
DEBUG 2022-02-14 16:37:58,798 stack ['$68load_attr.1', '$output70.2', '$const72.3', '$const74.4', '$const76.5']
DEBUG 2022-02-14 16:37:58,798 dispatch pc=80, inst=BINARY_SUBSCR(arg=None, lineno=128)
DEBUG 2022-02-14 16:37:58,798 stack ['$68load_attr.1', '$output70.2', '$78build_slice.7']
DEBUG 2022-02-14 16:37:58,799 dispatch pc=82, inst=LOAD_FAST(arg=1, lineno=128)
DEBUG 2022-02-14 16:37:58,799 stack ['$68load_attr.1', '$80binary_subscr.8']
DEBUG 2022-02-14 16:37:58,799 dispatch pc=84, inst=LOAD_ATTR(arg=4, lineno=128)
DEBUG 2022-02-14 16:37:58,799 stack ['$68load_attr.1', '$80binary_subscr.8', '$reps82.9']
DEBUG 2022-02-14 16:37:58,799 dispatch pc=86, inst=LOAD_CONST(arg=4, lineno=128)
DEBUG 2022-02-14 16:37:58,799 stack ['$68load_attr.1', '$80binary_subscr.8', '$84load_attr.10']
DEBUG 2022-02-14 16:37:58,799 dispatch pc=88, inst=CALL_FUNCTION_KW(arg=2, lineno=128)
DEBUG 2022-02-14 16:37:58,799 stack ['$68load_attr.1', '$80binary_subscr.8', '$84load_attr.10', '$const86.11']
DEBUG 2022-02-14 16:37:58,799 dispatch pc=90, inst=RETURN_VALUE(arg=None, lineno=128)
DEBUG 2022-02-14 16:37:58,799 stack ['$88call_function_kw.12']
DEBUG 2022-02-14 16:37:58,799 end state. edges=[]
DEBUG 2022-02-14 16:37:58,799 pending: deque([State(pc_initial=40 nstack_initial=2)])
DEBUG 2022-02-14 16:37:58,799 stack: ['$phi40.0', '$phi40.1']
DEBUG 2022-02-14 16:37:58,799 dispatch pc=40, inst=STORE_FAST(arg=5, lineno=125)
DEBUG 2022-02-14 16:37:58,799 stack ['$phi40.0', '$phi40.1']
DEBUG 2022-02-14 16:37:58,799 dispatch pc=42, inst=LOAD_FAST(arg=3, lineno=126)
DEBUG 2022-02-14 16:37:58,799 stack ['$phi40.0']
DEBUG 2022-02-14 16:37:58,800 dispatch pc=44, inst=LOAD_METHOD(arg=2, lineno=126)
DEBUG 2022-02-14 16:37:58,800 stack ['$phi40.0', '$output42.2']
DEBUG 2022-02-14 16:37:58,800 dispatch pc=46, inst=LOAD_FAST(arg=2, lineno=126)
DEBUG 2022-02-14 16:37:58,800 stack ['$phi40.0', '$44load_method.3']
DEBUG 2022-02-14 16:37:58,800 dispatch pc=48, inst=LOAD_FAST(arg=5, lineno=126)
DEBUG 2022-02-14 16:37:58,800 stack ['$phi40.0', '$44load_method.3', '$num46.4']
DEBUG 2022-02-14 16:37:58,800 dispatch pc=50, inst=BINARY_MODULO(arg=None, lineno=126)
DEBUG 2022-02-14 16:37:58,800 stack ['$phi40.0', '$44load_method.3', '$num46.4', '$base48.5']
DEBUG 2022-02-14 16:37:58,800 dispatch pc=52, inst=CALL_METHOD(arg=1, lineno=126)
DEBUG 2022-02-14 16:37:58,800 stack ['$phi40.0', '$44load_method.3', '$50binary_modulo.6']
DEBUG 2022-02-14 16:37:58,800 dispatch pc=54, inst=POP_TOP(arg=None, lineno=126)
DEBUG 2022-02-14 16:37:58,800 stack ['$phi40.0', '$52call_method.7']
DEBUG 2022-02-14 16:37:58,800 dispatch pc=56, inst=LOAD_FAST(arg=2, lineno=127)
DEBUG 2022-02-14 16:37:58,800 stack ['$phi40.0']
DEBUG 2022-02-14 16:37:58,800 dispatch pc=58, inst=LOAD_FAST(arg=5, lineno=127)
DEBUG 2022-02-14 16:37:58,800 stack ['$phi40.0', '$num56.8']
DEBUG 2022-02-14 16:37:58,800 dispatch pc=60, inst=INPLACE_FLOOR_DIVIDE(arg=None, lineno=127)
DEBUG 2022-02-14 16:37:58,800 stack ['$phi40.0', '$num56.8', '$base58.9']
DEBUG 2022-02-14 16:37:58,800 dispatch pc=62, inst=STORE_FAST(arg=2, lineno=127)
DEBUG 2022-02-14 16:37:58,801 stack ['$phi40.0', '$60inplace_floor_divide.10']
DEBUG 2022-02-14 16:37:58,801 dispatch pc=64, inst=JUMP_ABSOLUTE(arg=38, lineno=127)
DEBUG 2022-02-14 16:37:58,801 stack ['$phi40.0']
DEBUG 2022-02-14 16:37:58,801 end state. edges=[Edge(pc=38, stack=('$phi40.0',), blockstack=(), npush=0)]
DEBUG 2022-02-14 16:37:58,801 pending: deque([State(pc_initial=38 nstack_initial=1)])
DEBUG 2022-02-14 16:37:58,801 -------------------------Prune PHIs-------------------------
DEBUG 2022-02-14 16:37:58,801 Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=38 nstack_initial=1): {'$phi38.0'},
             State(pc_initial=40 nstack_initial=2): {'$phi40.1'},
             State(pc_initial=66 nstack_initial=0): set()})
DEBUG 2022-02-14 16:37:58,801 defmap: {'$phi38.0': State(pc_initial=0 nstack_initial=0),
 '$phi40.1': State(pc_initial=38 nstack_initial=1)}
DEBUG 2022-02-14 16:37:58,801 phismap: defaultdict(<class 'set'>,
            {'$phi38.0': {('$36get_iter.15',
                           State(pc_initial=0 nstack_initial=0)),
                          ('$phi40.0', State(pc_initial=40 nstack_initial=2))},
             '$phi40.0': {('$phi38.0', State(pc_initial=38 nstack_initial=1))},
             '$phi40.1': {('$38for_iter.2',
                           State(pc_initial=38 nstack_initial=1))}})
DEBUG 2022-02-14 16:37:58,801 changing phismap: defaultdict(<class 'set'>,
            {'$phi38.0': {('$36get_iter.15',
                           State(pc_initial=0 nstack_initial=0)),
                          ('$phi38.0', State(pc_initial=38 nstack_initial=1))},
             '$phi40.0': {('$36get_iter.15',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi40.1': {('$38for_iter.2',
                           State(pc_initial=38 nstack_initial=1))}})
DEBUG 2022-02-14 16:37:58,802 changing phismap: defaultdict(<class 'set'>,
            {'$phi38.0': {('$36get_iter.15',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi40.0': {('$36get_iter.15',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi40.1': {('$38for_iter.2',
                           State(pc_initial=38 nstack_initial=1))}})
DEBUG 2022-02-14 16:37:58,802 changing phismap: defaultdict(<class 'set'>,
            {'$phi38.0': {('$36get_iter.15',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi40.0': {('$36get_iter.15',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi40.1': {('$38for_iter.2',
                           State(pc_initial=38 nstack_initial=1))}})
DEBUG 2022-02-14 16:37:58,802 keep phismap: {'$phi38.0': {('$36get_iter.15', State(pc_initial=0 nstack_initial=0))},
 '$phi40.1': {('$38for_iter.2', State(pc_initial=38 nstack_initial=1))}}
DEBUG 2022-02-14 16:37:58,802 new_out: defaultdict(<class 'dict'>,
            {State(pc_initial=0 nstack_initial=0): {'$phi38.0': '$36get_iter.15'},
             State(pc_initial=38 nstack_initial=1): {'$phi40.1': '$38for_iter.2'}})
DEBUG 2022-02-14 16:37:58,802 ----------------------DONE Prune PHIs-----------------------
DEBUG 2022-02-14 16:37:58,802 block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$j2.0'}), (4, {'value': '$j2.0'}), (6, {'items': [], 'res': '$6build_list.1'}), (8, {'value': '$6build_list.1'}), (10, {'res': '$10load_global.2'}), (12, {'item': '$10load_global.2', 'res': '$12load_method.3'}), (14, {'res': '$reps14.4'}), (16, {'func': '$12load_method.3', 'args': ['$reps14.4'], 'res': '$16call_method.5'}), (18, {'res': '$const18.6'}), (20, {'lhs': '$16call_method.5', 'rhs': '$const18.6', 'res': '$20binary_add.7'}), (22, {'value': '$20binary_add.7'}), (24, {'res': '$bases24.8'}), (26, {'res': '$const26.9'}), (28, {'res': '$const28.10'}), (30, {'res': '$const30.11'}), (32, {'start': '$const26.9', 'stop': '$const28.10', 'step': '$const30.11', 'res': '$32build_slice.13', 'slicevar': '$32build_slice.12'}), (34, {'index': '$32build_slice.13', 'target': '$bases24.8', 'res': '$34binary_subscr.14'}), (36, {'value': '$34binary_subscr.14', 'res': '$36get_iter.15'})), outgoing_phis={'$phi38.0': '$36get_iter.15'}, blockstack=(), active_try_block=None, outgoing_edgepushed={38: ('$36get_iter.15',)})
DEBUG 2022-02-14 16:37:58,803 block_infos State(pc_initial=38 nstack_initial=1):
AdaptBlockInfo(insts=((38, {'iterator': '$phi38.0', 'pair': '$38for_iter.1', 'indval': '$38for_iter.2', 'pred': '$38for_iter.3'}),), outgoing_phis={'$phi40.1': '$38for_iter.2'}, blockstack=(), active_try_block=None, outgoing_edgepushed={66: (), 40: ('$phi38.0', '$38for_iter.2')})
DEBUG 2022-02-14 16:37:58,803 block_infos State(pc_initial=40 nstack_initial=2):
AdaptBlockInfo(insts=((40, {'value': '$phi40.1'}), (42, {'res': '$output42.2'}), (44, {'item': '$output42.2', 'res': '$44load_method.3'}), (46, {'res': '$num46.4'}), (48, {'res': '$base48.5'}), (50, {'lhs': '$num46.4', 'rhs': '$base48.5', 'res': '$50binary_modulo.6'}), (52, {'func': '$44load_method.3', 'args': ['$50binary_modulo.6'], 'res': '$52call_method.7'}), (56, {'res': '$num56.8'}), (58, {'res': '$base58.9'}), (60, {'lhs': '$num56.8', 'rhs': '$base58.9', 'res': '$60inplace_floor_divide.10'}), (62, {'value': '$60inplace_floor_divide.10'}), (64, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={38: ('$phi40.0',)})
DEBUG 2022-02-14 16:37:58,803 block_infos State(pc_initial=66 nstack_initial=0):
AdaptBlockInfo(insts=((66, {'res': '$66load_global.0'}), (68, {'item': '$66load_global.0', 'res': '$68load_attr.1'}), (70, {'res': '$output70.2'}), (72, {'res': '$const72.3'}), (74, {'res': '$const74.4'}), (76, {'res': '$const76.5'}), (78, {'start': '$const72.3', 'stop': '$const74.4', 'step': '$const76.5', 'res': '$78build_slice.7', 'slicevar': '$78build_slice.6'}), (80, {'index': '$78build_slice.7', 'target': '$output70.2', 'res': '$80binary_subscr.8'}), (82, {'res': '$reps82.9'}), (84, {'item': '$reps82.9', 'res': '$84load_attr.10'}), (86, {'res': '$const86.11'}), (88, {'func': '$68load_attr.1', 'args': ['$80binary_subscr.8', '$84load_attr.10'], 'names': '$const86.11', 'res': '$88call_function_kw.12'}), (90, {'retval': '$88call_function_kw.12', 'castval': '$90return_value.13'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG 2022-02-14 16:37:58,804 label 0:
    j = arg(0, name=j)                       ['j']
    reps = arg(1, name=reps)                 ['reps']
    num = j                                  ['j', 'num']
    output = build_list(items=[])            ['output']
    $10load_global.2 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>) ['$10load_global.2']
    $12load_method.3 = getattr(value=$10load_global.2, attr=asarray) ['$10load_global.2', '$12load_method.3']
    $16call_method.5 = call $12load_method.3(reps, func=$12load_method.3, args=[Var(reps, _loop_hafnian_subroutines.py:122)], kws=(), vararg=None, target=None) ['$12load_method.3', '$16call_method.5', 'reps']
    $const18.6 = const(int, 1)               ['$const18.6']
    bases = $16call_method.5 + $const18.6    ['$16call_method.5', '$const18.6', 'bases']
    $const26.9 = const(NoneType, None)       ['$const26.9']
    $const28.10 = const(NoneType, None)      ['$const28.10']
    $const30.11 = const(int, -1)             ['$const30.11']
    $32build_slice.12 = global(slice: <class 'slice'>) ['$32build_slice.12']
    $32build_slice.13 = call $32build_slice.12($const26.9, $const28.10, $const30.11, func=$32build_slice.12, args=(Var($const26.9, _loop_hafnian_subroutines.py:125), Var($const28.10, _loop_hafnian_subroutines.py:125), Var($const30.11, _loop_hafnian_subroutines.py:125)), kws=(), vararg=None, target=None) ['$32build_slice.12', '$32build_slice.13', '$const26.9', '$const28.10', '$const30.11']
    $34binary_subscr.14 = getitem(value=bases, index=$32build_slice.13, fn=<built-in function getitem>) ['$32build_slice.13', '$34binary_subscr.14', 'bases']
    $36get_iter.15 = getiter(value=$34binary_subscr.14) ['$34binary_subscr.14', '$36get_iter.15']
    $phi38.0 = $36get_iter.15                ['$36get_iter.15', '$phi38.0']
    jump 38                                  []
label 38:
    $38for_iter.1 = iternext(value=$phi38.0) ['$38for_iter.1', '$phi38.0']
    $38for_iter.2 = pair_first(value=$38for_iter.1) ['$38for_iter.1', '$38for_iter.2']
    $38for_iter.3 = pair_second(value=$38for_iter.1) ['$38for_iter.1', '$38for_iter.3']
    $phi40.1 = $38for_iter.2                 ['$38for_iter.2', '$phi40.1']
    branch $38for_iter.3, 40, 66             ['$38for_iter.3']
label 40:
    base = $phi40.1                          ['$phi40.1', 'base']
    $44load_method.3 = getattr(value=output, attr=append) ['$44load_method.3', 'output']
    $50binary_modulo.6 = num % base          ['$50binary_modulo.6', 'base', 'num']
    $52call_method.7 = call $44load_method.3($50binary_modulo.6, func=$44load_method.3, args=[Var($50binary_modulo.6, _loop_hafnian_subroutines.py:126)], kws=(), vararg=None, target=None) ['$44load_method.3', '$50binary_modulo.6', '$52call_method.7']
    $60inplace_floor_divide.10 = inplace_binop(fn=<built-in function ifloordiv>, immutable_fn=<built-in function floordiv>, lhs=num, rhs=base, static_lhs=Undefined, static_rhs=Undefined) ['$60inplace_floor_divide.10', 'base', 'num']
    num = $60inplace_floor_divide.10         ['$60inplace_floor_divide.10', 'num']
    jump 38                                  []
label 66:
    $66load_global.0 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>) ['$66load_global.0']
    $68load_attr.1 = getattr(value=$66load_global.0, attr=array) ['$66load_global.0', '$68load_attr.1']
    $const72.3 = const(NoneType, None)       ['$const72.3']
    $const74.4 = const(NoneType, None)       ['$const74.4']
    $const76.5 = const(int, -1)              ['$const76.5']
    $78build_slice.6 = global(slice: <class 'slice'>) ['$78build_slice.6']
    $78build_slice.7 = call $78build_slice.6($const72.3, $const74.4, $const76.5, func=$78build_slice.6, args=(Var($const72.3, _loop_hafnian_subroutines.py:128), Var($const74.4, _loop_hafnian_subroutines.py:128), Var($const76.5, _loop_hafnian_subroutines.py:128)), kws=(), vararg=None, target=None) ['$78build_slice.6', '$78build_slice.7', '$const72.3', '$const74.4', '$const76.5']
    $80binary_subscr.8 = getitem(value=output, index=$78build_slice.7, fn=<built-in function getitem>) ['$78build_slice.7', '$80binary_subscr.8', 'output']
    $84load_attr.10 = getattr(value=reps, attr=dtype) ['$84load_attr.10', 'reps']
    $88call_function_kw.12 = call $68load_attr.1($80binary_subscr.8, func=$68load_attr.1, args=[Var($80binary_subscr.8, _loop_hafnian_subroutines.py:128)], kws=[('dtype', Var($84load_attr.10, _loop_hafnian_subroutines.py:128))], vararg=None, target=None) ['$68load_attr.1', '$80binary_subscr.8', '$84load_attr.10', '$88call_function_kw.12']
    $90return_value.13 = cast(value=$88call_function_kw.12) ['$88call_function_kw.12', '$90return_value.13']
    return $90return_value.13                ['$90return_value.13']

DEBUG 2022-02-14 16:37:58,811 ==== SSA block analysis pass on 0
DEBUG 2022-02-14 16:37:58,811 Running <numba.core.ssa._GatherDefsHandler object at 0x7fa04731cb80>
DEBUG 2022-02-14 16:37:58,811 on stmt: j = arg(0, name=j)
DEBUG 2022-02-14 16:37:58,811 on stmt: reps = arg(1, name=reps)
DEBUG 2022-02-14 16:37:58,811 on stmt: num = j
DEBUG 2022-02-14 16:37:58,811 on stmt: output = build_list(items=[])
DEBUG 2022-02-14 16:37:58,811 on stmt: $10load_global.2 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:37:58,811 on stmt: $12load_method.3 = getattr(value=$10load_global.2, attr=asarray)
DEBUG 2022-02-14 16:37:58,811 on stmt: $16call_method.5 = call $12load_method.3(reps, func=$12load_method.3, args=[Var(reps, _loop_hafnian_subroutines.py:122)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:37:58,811 on stmt: $const18.6 = const(int, 1)
DEBUG 2022-02-14 16:37:58,811 on stmt: bases = $16call_method.5 + $const18.6
DEBUG 2022-02-14 16:37:58,811 on stmt: $const26.9 = const(NoneType, None)
DEBUG 2022-02-14 16:37:58,811 on stmt: $const28.10 = const(NoneType, None)
DEBUG 2022-02-14 16:37:58,811 on stmt: $const30.11 = const(int, -1)
DEBUG 2022-02-14 16:37:58,811 on stmt: $32build_slice.12 = global(slice: <class 'slice'>)
DEBUG 2022-02-14 16:37:58,811 on stmt: $32build_slice.13 = call $32build_slice.12($const26.9, $const28.10, $const30.11, func=$32build_slice.12, args=(Var($const26.9, _loop_hafnian_subroutines.py:125), Var($const28.10, _loop_hafnian_subroutines.py:125), Var($const30.11, _loop_hafnian_subroutines.py:125)), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:37:58,811 on stmt: $34binary_subscr.14 = static_getitem(value=bases, index=slice(None, None, -1), index_var=$32build_slice.13, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:37:58,811 on stmt: $36get_iter.15 = getiter(value=$34binary_subscr.14)
DEBUG 2022-02-14 16:37:58,812 on stmt: $phi38.0 = $36get_iter.15
DEBUG 2022-02-14 16:37:58,812 on stmt: jump 38
DEBUG 2022-02-14 16:37:58,812 ==== SSA block analysis pass on 38
DEBUG 2022-02-14 16:37:58,812 Running <numba.core.ssa._GatherDefsHandler object at 0x7fa04731cb80>
DEBUG 2022-02-14 16:37:58,812 on stmt: $38for_iter.1 = iternext(value=$phi38.0)
DEBUG 2022-02-14 16:37:58,812 on stmt: $38for_iter.2 = pair_first(value=$38for_iter.1)
DEBUG 2022-02-14 16:37:58,812 on stmt: $38for_iter.3 = pair_second(value=$38for_iter.1)
DEBUG 2022-02-14 16:37:58,812 on stmt: $phi40.1 = $38for_iter.2
DEBUG 2022-02-14 16:37:58,812 on stmt: branch $38for_iter.3, 40, 66
DEBUG 2022-02-14 16:37:58,812 ==== SSA block analysis pass on 40
DEBUG 2022-02-14 16:37:58,812 Running <numba.core.ssa._GatherDefsHandler object at 0x7fa04731cb80>
DEBUG 2022-02-14 16:37:58,812 on stmt: base = $phi40.1
DEBUG 2022-02-14 16:37:58,812 on stmt: $44load_method.3 = getattr(value=output, attr=append)
DEBUG 2022-02-14 16:37:58,812 on stmt: $50binary_modulo.6 = num % base
DEBUG 2022-02-14 16:37:58,812 on stmt: $52call_method.7 = call $44load_method.3($50binary_modulo.6, func=$44load_method.3, args=[Var($50binary_modulo.6, _loop_hafnian_subroutines.py:126)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:37:58,812 on stmt: $60inplace_floor_divide.10 = inplace_binop(fn=<built-in function ifloordiv>, immutable_fn=<built-in function floordiv>, lhs=num, rhs=base, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:37:58,812 on stmt: num = $60inplace_floor_divide.10
DEBUG 2022-02-14 16:37:58,812 on stmt: jump 38
DEBUG 2022-02-14 16:37:58,812 ==== SSA block analysis pass on 66
DEBUG 2022-02-14 16:37:58,812 Running <numba.core.ssa._GatherDefsHandler object at 0x7fa04731cb80>
DEBUG 2022-02-14 16:37:58,812 on stmt: $66load_global.0 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:37:58,812 on stmt: $68load_attr.1 = getattr(value=$66load_global.0, attr=array)
DEBUG 2022-02-14 16:37:58,812 on stmt: $const72.3 = const(NoneType, None)
DEBUG 2022-02-14 16:37:58,812 on stmt: $const74.4 = const(NoneType, None)
DEBUG 2022-02-14 16:37:58,813 on stmt: $const76.5 = const(int, -1)
DEBUG 2022-02-14 16:37:58,813 on stmt: $78build_slice.6 = global(slice: <class 'slice'>)
DEBUG 2022-02-14 16:37:58,813 on stmt: $78build_slice.7 = call $78build_slice.6($const72.3, $const74.4, $const76.5, func=$78build_slice.6, args=(Var($const72.3, _loop_hafnian_subroutines.py:128), Var($const74.4, _loop_hafnian_subroutines.py:128), Var($const76.5, _loop_hafnian_subroutines.py:128)), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:37:58,813 on stmt: $80binary_subscr.8 = static_getitem(value=output, index=slice(None, None, -1), index_var=$78build_slice.7, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:37:58,813 on stmt: $84load_attr.10 = getattr(value=reps, attr=dtype)
DEBUG 2022-02-14 16:37:58,813 on stmt: $88call_function_kw.12 = call $68load_attr.1($80binary_subscr.8, func=$68load_attr.1, args=[Var($80binary_subscr.8, _loop_hafnian_subroutines.py:128)], kws=[('dtype', Var($84load_attr.10, _loop_hafnian_subroutines.py:128))], vararg=None, target=None)
DEBUG 2022-02-14 16:37:58,813 on stmt: $90return_value.13 = cast(value=$88call_function_kw.12)
DEBUG 2022-02-14 16:37:58,813 on stmt: return $90return_value.13
DEBUG 2022-02-14 16:37:58,813 defs defaultdict(<class 'list'>,
            {'$10load_global.2': [<numba.core.ir.Assign object at 0x7fa04738aee0>],
             '$12load_method.3': [<numba.core.ir.Assign object at 0x7fa047464970>],
             '$16call_method.5': [<numba.core.ir.Assign object at 0x7fa0474641f0>],
             '$32build_slice.12': [<numba.core.ir.Assign object at 0x7fa0473b0e50>],
             '$32build_slice.13': [<numba.core.ir.Assign object at 0x7fa0473b0ee0>],
             '$34binary_subscr.14': [<numba.core.ir.Assign object at 0x7fa0474139a0>],
             '$36get_iter.15': [<numba.core.ir.Assign object at 0x7fa0473b0790>],
             '$38for_iter.1': [<numba.core.ir.Assign object at 0x7fa0473b06d0>],
             '$38for_iter.2': [<numba.core.ir.Assign object at 0x7fa0473b0160>],
             '$38for_iter.3': [<numba.core.ir.Assign object at 0x7fa0473b0220>],
             '$44load_method.3': [<numba.core.ir.Assign object at 0x7fa0473b0700>],
             '$50binary_modulo.6': [<numba.core.ir.Assign object at 0x7fa0474c4cd0>],
             '$52call_method.7': [<numba.core.ir.Assign object at 0x7fa0473e2d60>],
             '$60inplace_floor_divide.10': [<numba.core.ir.Assign object at 0x7fa0473e24f0>],
             '$66load_global.0': [<numba.core.ir.Assign object at 0x7fa0473e25e0>],
             '$68load_attr.1': [<numba.core.ir.Assign object at 0x7fa0473e2760>],
             '$78build_slice.6': [<numba.core.ir.Assign object at 0x7fa0473ee220>],
             '$78build_slice.7': [<numba.core.ir.Assign object at 0x7fa0473ee490>],
             '$80binary_subscr.8': [<numba.core.ir.Assign object at 0x7fa047413b20>],
             '$84load_attr.10': [<numba.core.ir.Assign object at 0x7fa0473ee970>],
             '$88call_function_kw.12': [<numba.core.ir.Assign object at 0x7fa0473eed30>],
             '$90return_value.13': [<numba.core.ir.Assign object at 0x7fa0473eee20>],
             '$const18.6': [<numba.core.ir.Assign object at 0x7fa047464a00>],
             '$const26.9': [<numba.core.ir.Assign object at 0x7fa047464850>],
             '$const28.10': [<numba.core.ir.Assign object at 0x7fa047464100>],
             '$const30.11': [<numba.core.ir.Assign object at 0x7fa0473b0cd0>],
             '$const72.3': [<numba.core.ir.Assign object at 0x7fa0473e2d00>],
             '$const74.4': [<numba.core.ir.Assign object at 0x7fa0473e2490>],
             '$const76.5': [<numba.core.ir.Assign object at 0x7fa0473e2d30>],
             '$phi38.0': [<numba.core.ir.Assign object at 0x7fa0474e3dc0>],
             '$phi40.1': [<numba.core.ir.Assign object at 0x7fa0473b09a0>],
             'base': [<numba.core.ir.Assign object at 0x7fa0473b04f0>],
             'bases': [<numba.core.ir.Assign object at 0x7fa047464dc0>],
             'j': [<numba.core.ir.Assign object at 0x7fa047413be0>],
             'num': [<numba.core.ir.Assign object at 0x7fa04738af70>,
                     <numba.core.ir.Assign object at 0x7fa0473e2b80>],
             'output': [<numba.core.ir.Assign object at 0x7fa04738ac10>],
             'reps': [<numba.core.ir.Assign object at 0x7fa047413c40>]})
DEBUG 2022-02-14 16:37:58,813 SSA violators {'num'}
DEBUG 2022-02-14 16:37:58,813 Fix SSA violator on var num
DEBUG 2022-02-14 16:37:58,814 ==== SSA block rewrite pass on 0
DEBUG 2022-02-14 16:37:58,814 Running <numba.core.ssa._FreshVarHandler object at 0x7fa04731c0a0>
DEBUG 2022-02-14 16:37:58,814 on stmt: j = arg(0, name=j)
DEBUG 2022-02-14 16:37:58,814 on stmt: reps = arg(1, name=reps)
DEBUG 2022-02-14 16:37:58,814 on stmt: num = j
DEBUG 2022-02-14 16:37:58,814 first assign: num
DEBUG 2022-02-14 16:37:58,814 replaced with: num = j
DEBUG 2022-02-14 16:37:58,814 on stmt: output = build_list(items=[])
DEBUG 2022-02-14 16:37:58,814 on stmt: $10load_global.2 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:37:58,814 on stmt: $12load_method.3 = getattr(value=$10load_global.2, attr=asarray)
DEBUG 2022-02-14 16:37:58,814 on stmt: $16call_method.5 = call $12load_method.3(reps, func=$12load_method.3, args=[Var(reps, _loop_hafnian_subroutines.py:122)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:37:58,814 on stmt: $const18.6 = const(int, 1)
DEBUG 2022-02-14 16:37:58,814 on stmt: bases = $16call_method.5 + $const18.6
DEBUG 2022-02-14 16:37:58,814 on stmt: $const26.9 = const(NoneType, None)
DEBUG 2022-02-14 16:37:58,815 on stmt: $const28.10 = const(NoneType, None)
DEBUG 2022-02-14 16:37:58,815 on stmt: $const30.11 = const(int, -1)
DEBUG 2022-02-14 16:37:58,815 on stmt: $32build_slice.12 = global(slice: <class 'slice'>)
DEBUG 2022-02-14 16:37:58,815 on stmt: $32build_slice.13 = call $32build_slice.12($const26.9, $const28.10, $const30.11, func=$32build_slice.12, args=(Var($const26.9, _loop_hafnian_subroutines.py:125), Var($const28.10, _loop_hafnian_subroutines.py:125), Var($const30.11, _loop_hafnian_subroutines.py:125)), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:37:58,815 on stmt: $34binary_subscr.14 = static_getitem(value=bases, index=slice(None, None, -1), index_var=$32build_slice.13, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:37:58,815 on stmt: $36get_iter.15 = getiter(value=$34binary_subscr.14)
DEBUG 2022-02-14 16:37:58,815 on stmt: $phi38.0 = $36get_iter.15
DEBUG 2022-02-14 16:37:58,815 on stmt: jump 38
DEBUG 2022-02-14 16:37:58,815 ==== SSA block rewrite pass on 38
DEBUG 2022-02-14 16:37:58,815 Running <numba.core.ssa._FreshVarHandler object at 0x7fa04731c0a0>
DEBUG 2022-02-14 16:37:58,815 on stmt: $38for_iter.1 = iternext(value=$phi38.0)
DEBUG 2022-02-14 16:37:58,815 on stmt: $38for_iter.2 = pair_first(value=$38for_iter.1)
DEBUG 2022-02-14 16:37:58,815 on stmt: $38for_iter.3 = pair_second(value=$38for_iter.1)
DEBUG 2022-02-14 16:37:58,815 on stmt: $phi40.1 = $38for_iter.2
DEBUG 2022-02-14 16:37:58,816 on stmt: branch $38for_iter.3, 40, 66
DEBUG 2022-02-14 16:37:58,816 ==== SSA block rewrite pass on 40
DEBUG 2022-02-14 16:37:58,816 Running <numba.core.ssa._FreshVarHandler object at 0x7fa04731c0a0>
DEBUG 2022-02-14 16:37:58,816 on stmt: base = $phi40.1
DEBUG 2022-02-14 16:37:58,816 on stmt: $44load_method.3 = getattr(value=output, attr=append)
DEBUG 2022-02-14 16:37:58,816 on stmt: $50binary_modulo.6 = num % base
DEBUG 2022-02-14 16:37:58,816 on stmt: $52call_method.7 = call $44load_method.3($50binary_modulo.6, func=$44load_method.3, args=[Var($50binary_modulo.6, _loop_hafnian_subroutines.py:126)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:37:58,816 on stmt: $60inplace_floor_divide.10 = inplace_binop(fn=<built-in function ifloordiv>, immutable_fn=<built-in function floordiv>, lhs=num, rhs=base, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:37:58,816 on stmt: num = $60inplace_floor_divide.10
DEBUG 2022-02-14 16:37:58,816 replaced with: num.1 = $60inplace_floor_divide.10
DEBUG 2022-02-14 16:37:58,816 on stmt: jump 38
DEBUG 2022-02-14 16:37:58,817 ==== SSA block rewrite pass on 66
DEBUG 2022-02-14 16:37:58,817 Running <numba.core.ssa._FreshVarHandler object at 0x7fa04731c0a0>
DEBUG 2022-02-14 16:37:58,817 on stmt: $66load_global.0 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:37:58,817 on stmt: $68load_attr.1 = getattr(value=$66load_global.0, attr=array)
DEBUG 2022-02-14 16:37:58,817 on stmt: $const72.3 = const(NoneType, None)
DEBUG 2022-02-14 16:37:58,817 on stmt: $const74.4 = const(NoneType, None)
DEBUG 2022-02-14 16:37:58,817 on stmt: $const76.5 = const(int, -1)
DEBUG 2022-02-14 16:37:58,817 on stmt: $78build_slice.6 = global(slice: <class 'slice'>)
DEBUG 2022-02-14 16:37:58,817 on stmt: $78build_slice.7 = call $78build_slice.6($const72.3, $const74.4, $const76.5, func=$78build_slice.6, args=(Var($const72.3, _loop_hafnian_subroutines.py:128), Var($const74.4, _loop_hafnian_subroutines.py:128), Var($const76.5, _loop_hafnian_subroutines.py:128)), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:37:58,817 on stmt: $80binary_subscr.8 = static_getitem(value=output, index=slice(None, None, -1), index_var=$78build_slice.7, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:37:58,817 on stmt: $84load_attr.10 = getattr(value=reps, attr=dtype)
DEBUG 2022-02-14 16:37:58,817 on stmt: $88call_function_kw.12 = call $68load_attr.1($80binary_subscr.8, func=$68load_attr.1, args=[Var($80binary_subscr.8, _loop_hafnian_subroutines.py:128)], kws=[('dtype', Var($84load_attr.10, _loop_hafnian_subroutines.py:128))], vararg=None, target=None)
DEBUG 2022-02-14 16:37:58,817 on stmt: $90return_value.13 = cast(value=$88call_function_kw.12)
DEBUG 2022-02-14 16:37:58,817 on stmt: return $90return_value.13
DEBUG 2022-02-14 16:37:58,817 Replaced assignments: defaultdict(<class 'list'>,
            {0: [<numba.core.ir.Assign object at 0x7fa0473cb190>],
             40: [<numba.core.ir.Assign object at 0x7fa0473cb0d0>]})
DEBUG 2022-02-14 16:37:58,818 ==== SSA block rewrite pass on 0
DEBUG 2022-02-14 16:37:58,818 Running <numba.core.ssa._FixSSAVars object at 0x7fa04731c0a0>
DEBUG 2022-02-14 16:37:58,818 on stmt: j = arg(0, name=j)
DEBUG 2022-02-14 16:37:58,818 on stmt: reps = arg(1, name=reps)
DEBUG 2022-02-14 16:37:58,818 on stmt: num = j
DEBUG 2022-02-14 16:37:58,818 on stmt: output = build_list(items=[])
DEBUG 2022-02-14 16:37:58,818 on stmt: $10load_global.2 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:37:58,818 on stmt: $12load_method.3 = getattr(value=$10load_global.2, attr=asarray)
DEBUG 2022-02-14 16:37:58,818 on stmt: $16call_method.5 = call $12load_method.3(reps, func=$12load_method.3, args=[Var(reps, _loop_hafnian_subroutines.py:122)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:37:58,818 on stmt: $const18.6 = const(int, 1)
DEBUG 2022-02-14 16:37:58,818 on stmt: bases = $16call_method.5 + $const18.6
DEBUG 2022-02-14 16:37:58,818 on stmt: $const26.9 = const(NoneType, None)
DEBUG 2022-02-14 16:37:58,818 on stmt: $const28.10 = const(NoneType, None)
DEBUG 2022-02-14 16:37:58,818 on stmt: $const30.11 = const(int, -1)
DEBUG 2022-02-14 16:37:58,818 on stmt: $32build_slice.12 = global(slice: <class 'slice'>)
DEBUG 2022-02-14 16:37:58,818 on stmt: $32build_slice.13 = call $32build_slice.12($const26.9, $const28.10, $const30.11, func=$32build_slice.12, args=(Var($const26.9, _loop_hafnian_subroutines.py:125), Var($const28.10, _loop_hafnian_subroutines.py:125), Var($const30.11, _loop_hafnian_subroutines.py:125)), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:37:58,819 on stmt: $34binary_subscr.14 = static_getitem(value=bases, index=slice(None, None, -1), index_var=$32build_slice.13, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:37:58,819 on stmt: $36get_iter.15 = getiter(value=$34binary_subscr.14)
DEBUG 2022-02-14 16:37:58,819 on stmt: $phi38.0 = $36get_iter.15
DEBUG 2022-02-14 16:37:58,819 on stmt: jump 38
DEBUG 2022-02-14 16:37:58,819 ==== SSA block rewrite pass on 38
DEBUG 2022-02-14 16:37:58,819 Running <numba.core.ssa._FixSSAVars object at 0x7fa04731c0a0>
DEBUG 2022-02-14 16:37:58,819 on stmt: $38for_iter.1 = iternext(value=$phi38.0)
DEBUG 2022-02-14 16:37:58,819 on stmt: $38for_iter.2 = pair_first(value=$38for_iter.1)
DEBUG 2022-02-14 16:37:58,819 on stmt: $38for_iter.3 = pair_second(value=$38for_iter.1)
DEBUG 2022-02-14 16:37:58,819 on stmt: $phi40.1 = $38for_iter.2
DEBUG 2022-02-14 16:37:58,819 on stmt: branch $38for_iter.3, 40, 66
DEBUG 2022-02-14 16:37:58,819 ==== SSA block rewrite pass on 40
DEBUG 2022-02-14 16:37:58,819 Running <numba.core.ssa._FixSSAVars object at 0x7fa04731c0a0>
DEBUG 2022-02-14 16:37:58,819 on stmt: base = $phi40.1
DEBUG 2022-02-14 16:37:58,819 on stmt: $44load_method.3 = getattr(value=output, attr=append)
DEBUG 2022-02-14 16:37:58,819 on stmt: $50binary_modulo.6 = num % base
DEBUG 2022-02-14 16:37:58,819 find_def var='num' stmt=$50binary_modulo.6 = num % base
DEBUG 2022-02-14 16:37:58,820 find_def_from_top label 40
DEBUG 2022-02-14 16:37:58,820 idom 38 from label 40
DEBUG 2022-02-14 16:37:58,820 find_def_from_bottom label 38
DEBUG 2022-02-14 16:37:58,820 find_def_from_top label 38
DEBUG 2022-02-14 16:37:58,820 insert phi node num.2 = phi(incoming_values=[], incoming_blocks=[]) at 38
DEBUG 2022-02-14 16:37:58,820 find_def_from_bottom label 0
DEBUG 2022-02-14 16:37:58,820 incoming_def num = j
DEBUG 2022-02-14 16:37:58,820 find_def_from_bottom label 40
DEBUG 2022-02-14 16:37:58,820 incoming_def num.1 = $60inplace_floor_divide.10
DEBUG 2022-02-14 16:37:58,820 replaced with: $50binary_modulo.6 = num.2 % base
DEBUG 2022-02-14 16:37:58,820 on stmt: $52call_method.7 = call $44load_method.3($50binary_modulo.6, func=$44load_method.3, args=[Var($50binary_modulo.6, _loop_hafnian_subroutines.py:126)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:37:58,820 on stmt: $60inplace_floor_divide.10 = inplace_binop(fn=<built-in function ifloordiv>, immutable_fn=<built-in function floordiv>, lhs=num, rhs=base, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:37:58,820 find_def var='num' stmt=$60inplace_floor_divide.10 = inplace_binop(fn=<built-in function ifloordiv>, immutable_fn=<built-in function floordiv>, lhs=num, rhs=base, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:37:58,820 find_def_from_top label 40
DEBUG 2022-02-14 16:37:58,820 idom 38 from label 40
DEBUG 2022-02-14 16:37:58,820 find_def_from_bottom label 38
DEBUG 2022-02-14 16:37:58,821 replaced with: $60inplace_floor_divide.10 = inplace_binop(fn=<built-in function ifloordiv>, immutable_fn=<built-in function floordiv>, lhs=num.2, rhs=base, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:37:58,821 on stmt: num.1 = $60inplace_floor_divide.10
DEBUG 2022-02-14 16:37:58,821 on stmt: jump 38
DEBUG 2022-02-14 16:37:58,821 ==== SSA block rewrite pass on 66
DEBUG 2022-02-14 16:37:58,821 Running <numba.core.ssa._FixSSAVars object at 0x7fa04731c0a0>
DEBUG 2022-02-14 16:37:58,821 on stmt: $66load_global.0 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:37:58,821 on stmt: $68load_attr.1 = getattr(value=$66load_global.0, attr=array)
DEBUG 2022-02-14 16:37:58,821 on stmt: $const72.3 = const(NoneType, None)
DEBUG 2022-02-14 16:37:58,821 on stmt: $const74.4 = const(NoneType, None)
DEBUG 2022-02-14 16:37:58,821 on stmt: $const76.5 = const(int, -1)
DEBUG 2022-02-14 16:37:58,821 on stmt: $78build_slice.6 = global(slice: <class 'slice'>)
DEBUG 2022-02-14 16:37:58,821 on stmt: $78build_slice.7 = call $78build_slice.6($const72.3, $const74.4, $const76.5, func=$78build_slice.6, args=(Var($const72.3, _loop_hafnian_subroutines.py:128), Var($const74.4, _loop_hafnian_subroutines.py:128), Var($const76.5, _loop_hafnian_subroutines.py:128)), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:37:58,821 on stmt: $80binary_subscr.8 = static_getitem(value=output, index=slice(None, None, -1), index_var=$78build_slice.7, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:37:58,821 on stmt: $84load_attr.10 = getattr(value=reps, attr=dtype)
DEBUG 2022-02-14 16:37:58,821 on stmt: $88call_function_kw.12 = call $68load_attr.1($80binary_subscr.8, func=$68load_attr.1, args=[Var($80binary_subscr.8, _loop_hafnian_subroutines.py:128)], kws=[('dtype', Var($84load_attr.10, _loop_hafnian_subroutines.py:128))], vararg=None, target=None)
DEBUG 2022-02-14 16:37:58,822 on stmt: $90return_value.13 = cast(value=$88call_function_kw.12)
DEBUG 2022-02-14 16:37:58,822 on stmt: return $90return_value.13
DEBUG 2022-02-14 16:37:58,825 bytecode dump:
>          0	NOP(arg=None, lineno=4208)
           2	LOAD_FAST(arg=0, lineno=4208)
           4	RETURN_VALUE(arg=None, lineno=4208)
DEBUG 2022-02-14 16:37:58,825 pending: deque([State(pc_initial=0 nstack_initial=0)])
DEBUG 2022-02-14 16:37:58,825 stack: []
DEBUG 2022-02-14 16:37:58,825 dispatch pc=0, inst=NOP(arg=None, lineno=4208)
DEBUG 2022-02-14 16:37:58,825 stack []
DEBUG 2022-02-14 16:37:58,825 dispatch pc=2, inst=LOAD_FAST(arg=0, lineno=4208)
DEBUG 2022-02-14 16:37:58,825 stack []
DEBUG 2022-02-14 16:37:58,825 dispatch pc=4, inst=RETURN_VALUE(arg=None, lineno=4208)
DEBUG 2022-02-14 16:37:58,825 stack ['$a2.0']
DEBUG 2022-02-14 16:37:58,825 end state. edges=[]
DEBUG 2022-02-14 16:37:58,825 -------------------------Prune PHIs-------------------------
DEBUG 2022-02-14 16:37:58,825 Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
DEBUG 2022-02-14 16:37:58,825 defmap: {}
DEBUG 2022-02-14 16:37:58,825 phismap: defaultdict(<class 'set'>, {})
DEBUG 2022-02-14 16:37:58,825 changing phismap: defaultdict(<class 'set'>, {})
DEBUG 2022-02-14 16:37:58,826 keep phismap: {}
DEBUG 2022-02-14 16:37:58,826 new_out: defaultdict(<class 'dict'>, {})
DEBUG 2022-02-14 16:37:58,826 ----------------------DONE Prune PHIs-----------------------
DEBUG 2022-02-14 16:37:58,826 block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$a2.0'}), (4, {'retval': '$a2.0', 'castval': '$4return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG 2022-02-14 16:37:58,826 label 0:
    a = arg(0, name=a)                       ['a']
    dtype = arg(1, name=dtype)               ['dtype']
    $4return_value.1 = cast(value=a)         ['$4return_value.1', 'a']
    return $4return_value.1                  ['$4return_value.1']

DEBUG 2022-02-14 16:37:58,827 ==== SSA block analysis pass on 0
DEBUG 2022-02-14 16:37:58,827 Running <numba.core.ssa._GatherDefsHandler object at 0x7fa0474c6070>
DEBUG 2022-02-14 16:37:58,827 on stmt: a = arg(0, name=a)
DEBUG 2022-02-14 16:37:58,827 on stmt: dtype = arg(1, name=dtype)
DEBUG 2022-02-14 16:37:58,827 on stmt: $4return_value.1 = cast(value=a)
DEBUG 2022-02-14 16:37:58,828 on stmt: return $4return_value.1
DEBUG 2022-02-14 16:37:58,828 defs defaultdict(<class 'list'>,
            {'$4return_value.1': [<numba.core.ir.Assign object at 0x7fa0474ce8b0>],
             'a': [<numba.core.ir.Assign object at 0x7fa0474c6df0>],
             'dtype': [<numba.core.ir.Assign object at 0x7fa0474c6c70>]})
DEBUG 2022-02-14 16:37:58,828 SSA violators set()
DEBUG 2022-02-14 16:37:58,845 bytecode dump:
>          0	NOP(arg=None, lineno=3)
           2	LOAD_GLOBAL(arg=0, lineno=3)
           4	LOAD_FAST(arg=0, lineno=3)
           6	LOAD_FAST(arg=1, lineno=3)
           8	CALL_FUNCTION(arg=2, lineno=3)
          10	RETURN_VALUE(arg=None, lineno=3)
DEBUG 2022-02-14 16:37:58,845 pending: deque([State(pc_initial=0 nstack_initial=0)])
DEBUG 2022-02-14 16:37:58,845 stack: []
DEBUG 2022-02-14 16:37:58,845 dispatch pc=0, inst=NOP(arg=None, lineno=3)
DEBUG 2022-02-14 16:37:58,845 stack []
DEBUG 2022-02-14 16:37:58,845 dispatch pc=2, inst=LOAD_GLOBAL(arg=0, lineno=3)
DEBUG 2022-02-14 16:37:58,845 stack []
DEBUG 2022-02-14 16:37:58,845 dispatch pc=4, inst=LOAD_FAST(arg=0, lineno=3)
DEBUG 2022-02-14 16:37:58,845 stack ['$2load_global.0']
DEBUG 2022-02-14 16:37:58,845 dispatch pc=6, inst=LOAD_FAST(arg=1, lineno=3)
DEBUG 2022-02-14 16:37:58,845 stack ['$2load_global.0', '$tmp04.1']
DEBUG 2022-02-14 16:37:58,845 dispatch pc=8, inst=CALL_FUNCTION(arg=2, lineno=3)
DEBUG 2022-02-14 16:37:58,845 stack ['$2load_global.0', '$tmp04.1', '$dtype6.2']
DEBUG 2022-02-14 16:37:58,845 dispatch pc=10, inst=RETURN_VALUE(arg=None, lineno=3)
DEBUG 2022-02-14 16:37:58,845 stack ['$8call_function.3']
DEBUG 2022-02-14 16:37:58,845 end state. edges=[]
DEBUG 2022-02-14 16:37:58,846 -------------------------Prune PHIs-------------------------
DEBUG 2022-02-14 16:37:58,846 Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
DEBUG 2022-02-14 16:37:58,846 defmap: {}
DEBUG 2022-02-14 16:37:58,846 phismap: defaultdict(<class 'set'>, {})
DEBUG 2022-02-14 16:37:58,846 changing phismap: defaultdict(<class 'set'>, {})
DEBUG 2022-02-14 16:37:58,846 keep phismap: {}
DEBUG 2022-02-14 16:37:58,846 new_out: defaultdict(<class 'dict'>, {})
DEBUG 2022-02-14 16:37:58,846 ----------------------DONE Prune PHIs-----------------------
DEBUG 2022-02-14 16:37:58,846 block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$2load_global.0'}), (4, {'res': '$tmp04.1'}), (6, {'res': '$dtype6.2'}), (8, {'func': '$2load_global.0', 'args': ['$tmp04.1', '$dtype6.2'], 'res': '$8call_function.3'}), (10, {'retval': '$8call_function.3', 'castval': '$10return_value.4'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG 2022-02-14 16:37:58,846 label 0:
    tmp0 = arg(0, name=tmp0)                 ['tmp0']
    dtype = arg(1, name=dtype)               ['dtype']
    $2load_global.0 = global(intrin: <intrinsic stub>) ['$2load_global.0']
    $8call_function.3 = call $2load_global.0(tmp0, dtype, func=$2load_global.0, args=[Var(tmp0, <string>:3), Var(dtype, <string>:3)], kws=(), vararg=None, target=None) ['$2load_global.0', '$8call_function.3', 'dtype', 'tmp0']
    $10return_value.4 = cast(value=$8call_function.3) ['$10return_value.4', '$8call_function.3']
    return $10return_value.4                 ['$10return_value.4']

DEBUG 2022-02-14 16:37:58,848 ==== SSA block analysis pass on 0
DEBUG 2022-02-14 16:37:58,848 Running <numba.core.ssa._GatherDefsHandler object at 0x7fa0474b4220>
DEBUG 2022-02-14 16:37:58,848 on stmt: tmp0 = arg(0, name=tmp0)
DEBUG 2022-02-14 16:37:58,848 on stmt: dtype = arg(1, name=dtype)
DEBUG 2022-02-14 16:37:58,848 on stmt: $2load_global.0 = global(intrin: <intrinsic stub>)
DEBUG 2022-02-14 16:37:58,848 on stmt: $8call_function.3 = call $2load_global.0(tmp0, dtype, func=$2load_global.0, args=[Var(tmp0, <string>:3), Var(dtype, <string>:3)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:37:58,848 on stmt: $10return_value.4 = cast(value=$8call_function.3)
DEBUG 2022-02-14 16:37:58,848 on stmt: return $10return_value.4
DEBUG 2022-02-14 16:37:58,848 defs defaultdict(<class 'list'>,
            {'$10return_value.4': [<numba.core.ir.Assign object at 0x7fa04733c460>],
             '$2load_global.0': [<numba.core.ir.Assign object at 0x7fa04732fee0>],
             '$8call_function.3': [<numba.core.ir.Assign object at 0x7fa04733c340>],
             'dtype': [<numba.core.ir.Assign object at 0x7fa04732f5e0>],
             'tmp0': [<numba.core.ir.Assign object at 0x7fa04732f730>]})
DEBUG 2022-02-14 16:37:58,848 SSA violators set()
DEBUG 2022-02-14 16:37:58,996 bytecode dump:
>          0	NOP(arg=None, lineno=124)
           2	LOAD_FAST(arg=0, lineno=124)
           4	LOAD_CONST(arg=1, lineno=1)
           6	BINARY_ADD(arg=None, lineno=1)
           8	RETURN_VALUE(arg=None, lineno=1)
DEBUG 2022-02-14 16:37:58,996 pending: deque([State(pc_initial=0 nstack_initial=0)])
DEBUG 2022-02-14 16:37:58,996 stack: []
DEBUG 2022-02-14 16:37:58,997 dispatch pc=0, inst=NOP(arg=None, lineno=124)
DEBUG 2022-02-14 16:37:58,997 stack []
DEBUG 2022-02-14 16:37:58,997 dispatch pc=2, inst=LOAD_FAST(arg=0, lineno=124)
DEBUG 2022-02-14 16:37:58,997 stack []
DEBUG 2022-02-14 16:37:58,997 dispatch pc=4, inst=LOAD_CONST(arg=1, lineno=1)
DEBUG 2022-02-14 16:37:58,997 stack ['$_16call_method_5_12.0']
DEBUG 2022-02-14 16:37:58,997 dispatch pc=6, inst=BINARY_ADD(arg=None, lineno=1)
DEBUG 2022-02-14 16:37:58,997 stack ['$_16call_method_5_12.0', '$const4.1']
DEBUG 2022-02-14 16:37:58,997 dispatch pc=8, inst=RETURN_VALUE(arg=None, lineno=1)
DEBUG 2022-02-14 16:37:58,997 stack ['$6binary_add.2']
DEBUG 2022-02-14 16:37:58,997 end state. edges=[]
DEBUG 2022-02-14 16:37:58,997 -------------------------Prune PHIs-------------------------
DEBUG 2022-02-14 16:37:58,998 Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
DEBUG 2022-02-14 16:37:58,998 defmap: {}
DEBUG 2022-02-14 16:37:58,998 phismap: defaultdict(<class 'set'>, {})
DEBUG 2022-02-14 16:37:58,998 changing phismap: defaultdict(<class 'set'>, {})
DEBUG 2022-02-14 16:37:58,998 keep phismap: {}
DEBUG 2022-02-14 16:37:58,998 new_out: defaultdict(<class 'dict'>, {})
DEBUG 2022-02-14 16:37:58,998 ----------------------DONE Prune PHIs-----------------------
DEBUG 2022-02-14 16:37:58,998 block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$_16call_method_5_12.0'}), (4, {'res': '$const4.1'}), (6, {'lhs': '$_16call_method_5_12.0', 'rhs': '$const4.1', 'res': '$6binary_add.2'}), (8, {'retval': '$6binary_add.2', 'castval': '$8return_value.3'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG 2022-02-14 16:37:58,999 label 0:
    _16call_method_5_1 = arg(0, name=_16call_method_5_1) ['_16call_method_5_1']
    $const4.1 = const(int, 1)                ['$const4.1']
    $6binary_add.2 = _16call_method_5_1 + $const4.1 ['$6binary_add.2', '$const4.1', '_16call_method_5_1']
    $8return_value.3 = cast(value=$6binary_add.2) ['$6binary_add.2', '$8return_value.3']
    return $8return_value.3                  ['$8return_value.3']

DEBUG 2022-02-14 16:37:59,001 ==== SSA block analysis pass on 0
DEBUG 2022-02-14 16:37:59,001 Running <numba.core.ssa._GatherDefsHandler object at 0x7fa04732fbb0>
DEBUG 2022-02-14 16:37:59,002 on stmt: _16call_method_5_1 = arg(0, name=_16call_method_5_1)
DEBUG 2022-02-14 16:37:59,002 on stmt: $const4.1 = const(int, 1)
DEBUG 2022-02-14 16:37:59,002 on stmt: $6binary_add.2 = _16call_method_5_1 + $const4.1
DEBUG 2022-02-14 16:37:59,002 on stmt: $8return_value.3 = cast(value=$6binary_add.2)
DEBUG 2022-02-14 16:37:59,002 on stmt: return $8return_value.3
DEBUG 2022-02-14 16:37:59,002 defs defaultdict(<class 'list'>,
            {'$6binary_add.2': [<numba.core.ir.Assign object at 0x7fa0473205b0>],
             '$8return_value.3': [<numba.core.ir.Assign object at 0x7fa0473200d0>],
             '$const4.1': [<numba.core.ir.Assign object at 0x7fa047320700>],
             '_16call_method_5_1': [<numba.core.ir.Assign object at 0x7fa0474db5e0>]})
DEBUG 2022-02-14 16:37:59,003 SSA violators set()
DEBUG 2022-02-14 16:37:59,023 bytecode dump:
>          0	NOP(arg=None, lineno=205)
           2	LOAD_FAST(arg=0, lineno=205)
           4	LOAD_FAST(arg=2, lineno=205)
           6	COMPARE_OP(arg=4, lineno=205)
           8	POP_JUMP_IF_FALSE(arg=14, lineno=205)
          10	LOAD_CONST(arg=1, lineno=208)
          12	RETURN_VALUE(arg=None, lineno=208)
>         14	LOAD_CONST(arg=1, lineno=210)
          16	STORE_FAST(arg=4, lineno=210)
          18	LOAD_FAST(arg=2, lineno=211)
          20	LOAD_FAST(arg=0, lineno=211)
          22	BINARY_SUBTRACT(arg=None, lineno=211)
          24	STORE_FAST(arg=5, lineno=211)
>         26	LOAD_FAST(arg=4, lineno=212)
          28	LOAD_FAST(arg=0, lineno=212)
          30	COMPARE_OP(arg=0, lineno=212)
          32	POP_JUMP_IF_FALSE(arg=120, lineno=212)
          34	LOAD_FAST(arg=1, lineno=213)
          36	LOAD_FAST(arg=4, lineno=213)
          38	BINARY_SUBSCR(arg=None, lineno=213)
          40	STORE_FAST(arg=6, lineno=213)
          42	LOAD_FAST(arg=3, lineno=214)
          44	LOAD_FAST(arg=5, lineno=214)
          46	BINARY_SUBSCR(arg=None, lineno=214)
          48	STORE_FAST(arg=7, lineno=214)
          50	LOAD_FAST(arg=7, lineno=217)
          52	LOAD_CONST(arg=2, lineno=217)
          54	COMPARE_OP(arg=3, lineno=217)
          56	POP_JUMP_IF_FALSE(arg=86, lineno=217)
          58	LOAD_FAST(arg=6, lineno=221)
          60	LOAD_FAST(arg=7, lineno=221)
          62	COMPARE_OP(arg=3, lineno=221)
          64	POP_JUMP_IF_FALSE(arg=102, lineno=221)
          66	LOAD_FAST(arg=6, lineno=221)
          68	LOAD_CONST(arg=2, lineno=221)
          70	COMPARE_OP(arg=3, lineno=221)
          72	POP_JUMP_IF_FALSE(arg=102, lineno=221)
          74	LOAD_FAST(arg=5, lineno=222)
          76	LOAD_CONST(arg=2, lineno=222)
          78	BINARY_ADD(arg=None, lineno=222)
          80	UNARY_NEGATIVE(arg=None, lineno=222)
          82	RETURN_VALUE(arg=None, lineno=222)
          84	JUMP_FORWARD(arg=16, lineno=222)
>         86	LOAD_FAST(arg=6, lineno=223)
          88	LOAD_CONST(arg=2, lineno=223)
          90	COMPARE_OP(arg=3, lineno=223)
          92	POP_JUMP_IF_FALSE(arg=102, lineno=223)
          94	LOAD_FAST(arg=6, lineno=225)
          96	LOAD_FAST(arg=3, lineno=225)
          98	LOAD_FAST(arg=5, lineno=225)
         100	STORE_SUBSCR(arg=None, lineno=225)
>        102	LOAD_FAST(arg=4, lineno=226)
         104	LOAD_CONST(arg=2, lineno=226)
         106	INPLACE_ADD(arg=None, lineno=226)
         108	STORE_FAST(arg=4, lineno=226)
         110	LOAD_FAST(arg=5, lineno=227)
         112	LOAD_CONST(arg=2, lineno=227)
         114	INPLACE_ADD(arg=None, lineno=227)
         116	STORE_FAST(arg=5, lineno=227)
         118	JUMP_ABSOLUTE(arg=26, lineno=227)
>        120	LOAD_FAST(arg=5, lineno=228)
         122	RETURN_VALUE(arg=None, lineno=228)
DEBUG 2022-02-14 16:37:59,023 pending: deque([State(pc_initial=0 nstack_initial=0)])
DEBUG 2022-02-14 16:37:59,023 stack: []
DEBUG 2022-02-14 16:37:59,024 dispatch pc=0, inst=NOP(arg=None, lineno=205)
DEBUG 2022-02-14 16:37:59,024 stack []
DEBUG 2022-02-14 16:37:59,024 dispatch pc=2, inst=LOAD_FAST(arg=0, lineno=205)
DEBUG 2022-02-14 16:37:59,024 stack []
DEBUG 2022-02-14 16:37:59,024 dispatch pc=4, inst=LOAD_FAST(arg=2, lineno=205)
DEBUG 2022-02-14 16:37:59,024 stack ['$src_ndim2.0']
DEBUG 2022-02-14 16:37:59,024 dispatch pc=6, inst=COMPARE_OP(arg=4, lineno=205)
DEBUG 2022-02-14 16:37:59,024 stack ['$src_ndim2.0', '$dest_ndim4.1']
DEBUG 2022-02-14 16:37:59,024 dispatch pc=8, inst=POP_JUMP_IF_FALSE(arg=14, lineno=205)
DEBUG 2022-02-14 16:37:59,025 stack ['$6compare_op.2']
DEBUG 2022-02-14 16:37:59,025 end state. edges=[Edge(pc=10, stack=(), blockstack=(), npush=0), Edge(pc=14, stack=(), blockstack=(), npush=0)]
DEBUG 2022-02-14 16:37:59,025 pending: deque([State(pc_initial=10 nstack_initial=0), State(pc_initial=14 nstack_initial=0)])
DEBUG 2022-02-14 16:37:59,025 stack: []
DEBUG 2022-02-14 16:37:59,025 dispatch pc=10, inst=LOAD_CONST(arg=1, lineno=208)
DEBUG 2022-02-14 16:37:59,025 stack []
DEBUG 2022-02-14 16:37:59,025 dispatch pc=12, inst=RETURN_VALUE(arg=None, lineno=208)
DEBUG 2022-02-14 16:37:59,025 stack ['$const10.0']
DEBUG 2022-02-14 16:37:59,026 end state. edges=[]
DEBUG 2022-02-14 16:37:59,026 pending: deque([State(pc_initial=14 nstack_initial=0)])
DEBUG 2022-02-14 16:37:59,026 stack: []
DEBUG 2022-02-14 16:37:59,026 dispatch pc=14, inst=LOAD_CONST(arg=1, lineno=210)
DEBUG 2022-02-14 16:37:59,026 stack []
DEBUG 2022-02-14 16:37:59,026 dispatch pc=16, inst=STORE_FAST(arg=4, lineno=210)
DEBUG 2022-02-14 16:37:59,026 stack ['$const14.0']
DEBUG 2022-02-14 16:37:59,026 dispatch pc=18, inst=LOAD_FAST(arg=2, lineno=211)
DEBUG 2022-02-14 16:37:59,026 stack []
DEBUG 2022-02-14 16:37:59,026 dispatch pc=20, inst=LOAD_FAST(arg=0, lineno=211)
DEBUG 2022-02-14 16:37:59,026 stack ['$dest_ndim18.1']
DEBUG 2022-02-14 16:37:59,027 dispatch pc=22, inst=BINARY_SUBTRACT(arg=None, lineno=211)
DEBUG 2022-02-14 16:37:59,027 stack ['$dest_ndim18.1', '$src_ndim20.2']
DEBUG 2022-02-14 16:37:59,027 dispatch pc=24, inst=STORE_FAST(arg=5, lineno=211)
DEBUG 2022-02-14 16:37:59,027 stack ['$22binary_subtract.3']
DEBUG 2022-02-14 16:37:59,027 end state. edges=[Edge(pc=26, stack=(), blockstack=(), npush=0)]
DEBUG 2022-02-14 16:37:59,027 pending: deque([State(pc_initial=26 nstack_initial=0)])
DEBUG 2022-02-14 16:37:59,027 stack: []
DEBUG 2022-02-14 16:37:59,027 dispatch pc=26, inst=LOAD_FAST(arg=4, lineno=212)
DEBUG 2022-02-14 16:37:59,027 stack []
DEBUG 2022-02-14 16:37:59,027 dispatch pc=28, inst=LOAD_FAST(arg=0, lineno=212)
DEBUG 2022-02-14 16:37:59,027 stack ['$src_index26.0']
DEBUG 2022-02-14 16:37:59,027 dispatch pc=30, inst=COMPARE_OP(arg=0, lineno=212)
DEBUG 2022-02-14 16:37:59,028 stack ['$src_index26.0', '$src_ndim28.1']
DEBUG 2022-02-14 16:37:59,028 dispatch pc=32, inst=POP_JUMP_IF_FALSE(arg=120, lineno=212)
DEBUG 2022-02-14 16:37:59,028 stack ['$30compare_op.2']
DEBUG 2022-02-14 16:37:59,028 end state. edges=[Edge(pc=34, stack=(), blockstack=(), npush=0), Edge(pc=120, stack=(), blockstack=(), npush=0)]
DEBUG 2022-02-14 16:37:59,028 pending: deque([State(pc_initial=34 nstack_initial=0), State(pc_initial=120 nstack_initial=0)])
DEBUG 2022-02-14 16:37:59,028 stack: []
DEBUG 2022-02-14 16:37:59,028 dispatch pc=34, inst=LOAD_FAST(arg=1, lineno=213)
DEBUG 2022-02-14 16:37:59,028 stack []
DEBUG 2022-02-14 16:37:59,028 dispatch pc=36, inst=LOAD_FAST(arg=4, lineno=213)
DEBUG 2022-02-14 16:37:59,029 stack ['$src_shape34.0']
DEBUG 2022-02-14 16:37:59,029 dispatch pc=38, inst=BINARY_SUBSCR(arg=None, lineno=213)
DEBUG 2022-02-14 16:37:59,029 stack ['$src_shape34.0', '$src_index36.1']
DEBUG 2022-02-14 16:37:59,029 dispatch pc=40, inst=STORE_FAST(arg=6, lineno=213)
DEBUG 2022-02-14 16:37:59,029 stack ['$38binary_subscr.2']
DEBUG 2022-02-14 16:37:59,029 dispatch pc=42, inst=LOAD_FAST(arg=3, lineno=214)
DEBUG 2022-02-14 16:37:59,029 stack []
DEBUG 2022-02-14 16:37:59,029 dispatch pc=44, inst=LOAD_FAST(arg=5, lineno=214)
DEBUG 2022-02-14 16:37:59,029 stack ['$dest_shape42.3']
DEBUG 2022-02-14 16:37:59,029 dispatch pc=46, inst=BINARY_SUBSCR(arg=None, lineno=214)
DEBUG 2022-02-14 16:37:59,030 stack ['$dest_shape42.3', '$dest_index44.4']
DEBUG 2022-02-14 16:37:59,030 dispatch pc=48, inst=STORE_FAST(arg=7, lineno=214)
DEBUG 2022-02-14 16:37:59,030 stack ['$46binary_subscr.5']
DEBUG 2022-02-14 16:37:59,030 dispatch pc=50, inst=LOAD_FAST(arg=7, lineno=217)
DEBUG 2022-02-14 16:37:59,030 stack []
DEBUG 2022-02-14 16:37:59,030 dispatch pc=52, inst=LOAD_CONST(arg=2, lineno=217)
DEBUG 2022-02-14 16:37:59,030 stack ['$dest_dim_size50.6']
DEBUG 2022-02-14 16:37:59,030 dispatch pc=54, inst=COMPARE_OP(arg=3, lineno=217)
DEBUG 2022-02-14 16:37:59,030 stack ['$dest_dim_size50.6', '$const52.7']
DEBUG 2022-02-14 16:37:59,030 dispatch pc=56, inst=POP_JUMP_IF_FALSE(arg=86, lineno=217)
DEBUG 2022-02-14 16:37:59,031 stack ['$54compare_op.8']
DEBUG 2022-02-14 16:37:59,031 end state. edges=[Edge(pc=58, stack=(), blockstack=(), npush=0), Edge(pc=86, stack=(), blockstack=(), npush=0)]
DEBUG 2022-02-14 16:37:59,031 pending: deque([State(pc_initial=120 nstack_initial=0), State(pc_initial=58 nstack_initial=0), State(pc_initial=86 nstack_initial=0)])
DEBUG 2022-02-14 16:37:59,031 stack: []
DEBUG 2022-02-14 16:37:59,031 dispatch pc=120, inst=LOAD_FAST(arg=5, lineno=228)
DEBUG 2022-02-14 16:37:59,031 stack []
DEBUG 2022-02-14 16:37:59,031 dispatch pc=122, inst=RETURN_VALUE(arg=None, lineno=228)
DEBUG 2022-02-14 16:37:59,031 stack ['$dest_index120.0']
DEBUG 2022-02-14 16:37:59,031 end state. edges=[]
DEBUG 2022-02-14 16:37:59,031 pending: deque([State(pc_initial=58 nstack_initial=0), State(pc_initial=86 nstack_initial=0)])
DEBUG 2022-02-14 16:37:59,031 stack: []
DEBUG 2022-02-14 16:37:59,031 dispatch pc=58, inst=LOAD_FAST(arg=6, lineno=221)
DEBUG 2022-02-14 16:37:59,031 stack []
DEBUG 2022-02-14 16:37:59,031 dispatch pc=60, inst=LOAD_FAST(arg=7, lineno=221)
DEBUG 2022-02-14 16:37:59,031 stack ['$src_dim_size58.0']
DEBUG 2022-02-14 16:37:59,032 dispatch pc=62, inst=COMPARE_OP(arg=3, lineno=221)
DEBUG 2022-02-14 16:37:59,032 stack ['$src_dim_size58.0', '$dest_dim_size60.1']
DEBUG 2022-02-14 16:37:59,032 dispatch pc=64, inst=POP_JUMP_IF_FALSE(arg=102, lineno=221)
DEBUG 2022-02-14 16:37:59,032 stack ['$62compare_op.2']
DEBUG 2022-02-14 16:37:59,032 end state. edges=[Edge(pc=66, stack=(), blockstack=(), npush=0), Edge(pc=102, stack=(), blockstack=(), npush=0)]
DEBUG 2022-02-14 16:37:59,032 pending: deque([State(pc_initial=86 nstack_initial=0), State(pc_initial=66 nstack_initial=0), State(pc_initial=102 nstack_initial=0)])
DEBUG 2022-02-14 16:37:59,032 stack: []
DEBUG 2022-02-14 16:37:59,032 dispatch pc=86, inst=LOAD_FAST(arg=6, lineno=223)
DEBUG 2022-02-14 16:37:59,032 stack []
DEBUG 2022-02-14 16:37:59,032 dispatch pc=88, inst=LOAD_CONST(arg=2, lineno=223)
DEBUG 2022-02-14 16:37:59,032 stack ['$src_dim_size86.0']
DEBUG 2022-02-14 16:37:59,032 dispatch pc=90, inst=COMPARE_OP(arg=3, lineno=223)
DEBUG 2022-02-14 16:37:59,033 stack ['$src_dim_size86.0', '$const88.1']
DEBUG 2022-02-14 16:37:59,033 dispatch pc=92, inst=POP_JUMP_IF_FALSE(arg=102, lineno=223)
DEBUG 2022-02-14 16:37:59,033 stack ['$90compare_op.2']
DEBUG 2022-02-14 16:37:59,033 end state. edges=[Edge(pc=94, stack=(), blockstack=(), npush=0), Edge(pc=102, stack=(), blockstack=(), npush=0)]
DEBUG 2022-02-14 16:37:59,033 pending: deque([State(pc_initial=66 nstack_initial=0), State(pc_initial=102 nstack_initial=0), State(pc_initial=94 nstack_initial=0), State(pc_initial=102 nstack_initial=0)])
DEBUG 2022-02-14 16:37:59,033 stack: []
DEBUG 2022-02-14 16:37:59,033 dispatch pc=66, inst=LOAD_FAST(arg=6, lineno=221)
DEBUG 2022-02-14 16:37:59,033 stack []
DEBUG 2022-02-14 16:37:59,034 dispatch pc=68, inst=LOAD_CONST(arg=2, lineno=221)
DEBUG 2022-02-14 16:37:59,034 stack ['$src_dim_size66.0']
DEBUG 2022-02-14 16:37:59,034 dispatch pc=70, inst=COMPARE_OP(arg=3, lineno=221)
DEBUG 2022-02-14 16:37:59,034 stack ['$src_dim_size66.0', '$const68.1']
DEBUG 2022-02-14 16:37:59,034 dispatch pc=72, inst=POP_JUMP_IF_FALSE(arg=102, lineno=221)
DEBUG 2022-02-14 16:37:59,034 stack ['$70compare_op.2']
DEBUG 2022-02-14 16:37:59,034 end state. edges=[Edge(pc=74, stack=(), blockstack=(), npush=0), Edge(pc=102, stack=(), blockstack=(), npush=0)]
DEBUG 2022-02-14 16:37:59,034 pending: deque([State(pc_initial=102 nstack_initial=0), State(pc_initial=94 nstack_initial=0), State(pc_initial=102 nstack_initial=0), State(pc_initial=74 nstack_initial=0), State(pc_initial=102 nstack_initial=0)])
DEBUG 2022-02-14 16:37:59,034 stack: []
DEBUG 2022-02-14 16:37:59,034 dispatch pc=102, inst=LOAD_FAST(arg=4, lineno=226)
DEBUG 2022-02-14 16:37:59,035 stack []
DEBUG 2022-02-14 16:37:59,035 dispatch pc=104, inst=LOAD_CONST(arg=2, lineno=226)
DEBUG 2022-02-14 16:37:59,035 stack ['$src_index102.0']
DEBUG 2022-02-14 16:37:59,035 dispatch pc=106, inst=INPLACE_ADD(arg=None, lineno=226)
DEBUG 2022-02-14 16:37:59,035 stack ['$src_index102.0', '$const104.1']
DEBUG 2022-02-14 16:37:59,035 dispatch pc=108, inst=STORE_FAST(arg=4, lineno=226)
DEBUG 2022-02-14 16:37:59,035 stack ['$106inplace_add.2']
DEBUG 2022-02-14 16:37:59,035 dispatch pc=110, inst=LOAD_FAST(arg=5, lineno=227)
DEBUG 2022-02-14 16:37:59,035 stack []
DEBUG 2022-02-14 16:37:59,036 dispatch pc=112, inst=LOAD_CONST(arg=2, lineno=227)
DEBUG 2022-02-14 16:37:59,036 stack ['$dest_index110.3']
DEBUG 2022-02-14 16:37:59,036 dispatch pc=114, inst=INPLACE_ADD(arg=None, lineno=227)
DEBUG 2022-02-14 16:37:59,036 stack ['$dest_index110.3', '$const112.4']
DEBUG 2022-02-14 16:37:59,036 dispatch pc=116, inst=STORE_FAST(arg=5, lineno=227)
DEBUG 2022-02-14 16:37:59,036 stack ['$114inplace_add.5']
DEBUG 2022-02-14 16:37:59,036 dispatch pc=118, inst=JUMP_ABSOLUTE(arg=26, lineno=227)
DEBUG 2022-02-14 16:37:59,036 stack []
DEBUG 2022-02-14 16:37:59,036 end state. edges=[Edge(pc=26, stack=(), blockstack=(), npush=0)]
DEBUG 2022-02-14 16:37:59,037 pending: deque([State(pc_initial=94 nstack_initial=0), State(pc_initial=102 nstack_initial=0), State(pc_initial=74 nstack_initial=0), State(pc_initial=102 nstack_initial=0), State(pc_initial=26 nstack_initial=0)])
DEBUG 2022-02-14 16:37:59,037 stack: []
DEBUG 2022-02-14 16:37:59,037 dispatch pc=94, inst=LOAD_FAST(arg=6, lineno=225)
DEBUG 2022-02-14 16:37:59,037 stack []
DEBUG 2022-02-14 16:37:59,037 dispatch pc=96, inst=LOAD_FAST(arg=3, lineno=225)
DEBUG 2022-02-14 16:37:59,037 stack ['$src_dim_size94.0']
DEBUG 2022-02-14 16:37:59,037 dispatch pc=98, inst=LOAD_FAST(arg=5, lineno=225)
DEBUG 2022-02-14 16:37:59,037 stack ['$src_dim_size94.0', '$dest_shape96.1']
DEBUG 2022-02-14 16:37:59,037 dispatch pc=100, inst=STORE_SUBSCR(arg=None, lineno=225)
DEBUG 2022-02-14 16:37:59,037 stack ['$src_dim_size94.0', '$dest_shape96.1', '$dest_index98.2']
DEBUG 2022-02-14 16:37:59,038 end state. edges=[Edge(pc=102, stack=(), blockstack=(), npush=0)]
DEBUG 2022-02-14 16:37:59,038 pending: deque([State(pc_initial=102 nstack_initial=0), State(pc_initial=74 nstack_initial=0), State(pc_initial=102 nstack_initial=0), State(pc_initial=26 nstack_initial=0), State(pc_initial=102 nstack_initial=0)])
DEBUG 2022-02-14 16:37:59,038 pending: deque([State(pc_initial=74 nstack_initial=0), State(pc_initial=102 nstack_initial=0), State(pc_initial=26 nstack_initial=0), State(pc_initial=102 nstack_initial=0)])
DEBUG 2022-02-14 16:37:59,038 stack: []
DEBUG 2022-02-14 16:37:59,038 dispatch pc=74, inst=LOAD_FAST(arg=5, lineno=222)
DEBUG 2022-02-14 16:37:59,038 stack []
DEBUG 2022-02-14 16:37:59,038 dispatch pc=76, inst=LOAD_CONST(arg=2, lineno=222)
DEBUG 2022-02-14 16:37:59,038 stack ['$dest_index74.0']
DEBUG 2022-02-14 16:37:59,038 dispatch pc=78, inst=BINARY_ADD(arg=None, lineno=222)
DEBUG 2022-02-14 16:37:59,038 stack ['$dest_index74.0', '$const76.1']
DEBUG 2022-02-14 16:37:59,038 dispatch pc=80, inst=UNARY_NEGATIVE(arg=None, lineno=222)
DEBUG 2022-02-14 16:37:59,039 stack ['$78binary_add.2']
DEBUG 2022-02-14 16:37:59,039 dispatch pc=82, inst=RETURN_VALUE(arg=None, lineno=222)
DEBUG 2022-02-14 16:37:59,039 stack ['$80unary_negative.3']
DEBUG 2022-02-14 16:37:59,039 end state. edges=[]
DEBUG 2022-02-14 16:37:59,039 pending: deque([State(pc_initial=102 nstack_initial=0), State(pc_initial=26 nstack_initial=0), State(pc_initial=102 nstack_initial=0)])
DEBUG 2022-02-14 16:37:59,039 pending: deque([State(pc_initial=26 nstack_initial=0), State(pc_initial=102 nstack_initial=0)])
DEBUG 2022-02-14 16:37:59,039 pending: deque([State(pc_initial=102 nstack_initial=0)])
DEBUG 2022-02-14 16:37:59,039 -------------------------Prune PHIs-------------------------
DEBUG 2022-02-14 16:37:59,039 Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=10 nstack_initial=0): set(),
             State(pc_initial=14 nstack_initial=0): set(),
             State(pc_initial=26 nstack_initial=0): set(),
             State(pc_initial=34 nstack_initial=0): set(),
             State(pc_initial=58 nstack_initial=0): set(),
             State(pc_initial=66 nstack_initial=0): set(),
             State(pc_initial=74 nstack_initial=0): set(),
             State(pc_initial=86 nstack_initial=0): set(),
             State(pc_initial=94 nstack_initial=0): set(),
             State(pc_initial=102 nstack_initial=0): set(),
             State(pc_initial=120 nstack_initial=0): set()})
DEBUG 2022-02-14 16:37:59,040 defmap: {}
DEBUG 2022-02-14 16:37:59,040 phismap: defaultdict(<class 'set'>, {})
DEBUG 2022-02-14 16:37:59,040 changing phismap: defaultdict(<class 'set'>, {})
DEBUG 2022-02-14 16:37:59,040 keep phismap: {}
DEBUG 2022-02-14 16:37:59,040 new_out: defaultdict(<class 'dict'>, {})
DEBUG 2022-02-14 16:37:59,041 ----------------------DONE Prune PHIs-----------------------
DEBUG 2022-02-14 16:37:59,041 block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$src_ndim2.0'}), (4, {'res': '$dest_ndim4.1'}), (6, {'lhs': '$src_ndim2.0', 'rhs': '$dest_ndim4.1', 'res': '$6compare_op.2'}), (8, {'pred': '$6compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={10: (), 14: ()})
DEBUG 2022-02-14 16:37:59,041 block_infos State(pc_initial=10 nstack_initial=0):
AdaptBlockInfo(insts=((10, {'res': '$const10.0'}), (12, {'retval': '$const10.0', 'castval': '$12return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG 2022-02-14 16:37:59,041 block_infos State(pc_initial=14 nstack_initial=0):
AdaptBlockInfo(insts=((14, {'res': '$const14.0'}), (16, {'value': '$const14.0'}), (18, {'res': '$dest_ndim18.1'}), (20, {'res': '$src_ndim20.2'}), (22, {'lhs': '$dest_ndim18.1', 'rhs': '$src_ndim20.2', 'res': '$22binary_subtract.3'}), (24, {'value': '$22binary_subtract.3'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={26: ()})
DEBUG 2022-02-14 16:37:59,041 block_infos State(pc_initial=26 nstack_initial=0):
AdaptBlockInfo(insts=((26, {'res': '$src_index26.0'}), (28, {'res': '$src_ndim28.1'}), (30, {'lhs': '$src_index26.0', 'rhs': '$src_ndim28.1', 'res': '$30compare_op.2'}), (32, {'pred': '$30compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={34: (), 120: ()})
DEBUG 2022-02-14 16:37:59,041 block_infos State(pc_initial=34 nstack_initial=0):
AdaptBlockInfo(insts=((34, {'res': '$src_shape34.0'}), (36, {'res': '$src_index36.1'}), (38, {'index': '$src_index36.1', 'target': '$src_shape34.0', 'res': '$38binary_subscr.2'}), (40, {'value': '$38binary_subscr.2'}), (42, {'res': '$dest_shape42.3'}), (44, {'res': '$dest_index44.4'}), (46, {'index': '$dest_index44.4', 'target': '$dest_shape42.3', 'res': '$46binary_subscr.5'}), (48, {'value': '$46binary_subscr.5'}), (50, {'res': '$dest_dim_size50.6'}), (52, {'res': '$const52.7'}), (54, {'lhs': '$dest_dim_size50.6', 'rhs': '$const52.7', 'res': '$54compare_op.8'}), (56, {'pred': '$54compare_op.8'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={58: (), 86: ()})
DEBUG 2022-02-14 16:37:59,041 block_infos State(pc_initial=58 nstack_initial=0):
AdaptBlockInfo(insts=((58, {'res': '$src_dim_size58.0'}), (60, {'res': '$dest_dim_size60.1'}), (62, {'lhs': '$src_dim_size58.0', 'rhs': '$dest_dim_size60.1', 'res': '$62compare_op.2'}), (64, {'pred': '$62compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={66: (), 102: ()})
DEBUG 2022-02-14 16:37:59,042 block_infos State(pc_initial=66 nstack_initial=0):
AdaptBlockInfo(insts=((66, {'res': '$src_dim_size66.0'}), (68, {'res': '$const68.1'}), (70, {'lhs': '$src_dim_size66.0', 'rhs': '$const68.1', 'res': '$70compare_op.2'}), (72, {'pred': '$70compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={74: (), 102: ()})
DEBUG 2022-02-14 16:37:59,042 block_infos State(pc_initial=74 nstack_initial=0):
AdaptBlockInfo(insts=((74, {'res': '$dest_index74.0'}), (76, {'res': '$const76.1'}), (78, {'lhs': '$dest_index74.0', 'rhs': '$const76.1', 'res': '$78binary_add.2'}), (80, {'value': '$78binary_add.2', 'res': '$80unary_negative.3'}), (82, {'retval': '$80unary_negative.3', 'castval': '$82return_value.4'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG 2022-02-14 16:37:59,042 block_infos State(pc_initial=86 nstack_initial=0):
AdaptBlockInfo(insts=((86, {'res': '$src_dim_size86.0'}), (88, {'res': '$const88.1'}), (90, {'lhs': '$src_dim_size86.0', 'rhs': '$const88.1', 'res': '$90compare_op.2'}), (92, {'pred': '$90compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={94: (), 102: ()})
DEBUG 2022-02-14 16:37:59,042 block_infos State(pc_initial=94 nstack_initial=0):
AdaptBlockInfo(insts=((94, {'res': '$src_dim_size94.0'}), (96, {'res': '$dest_shape96.1'}), (98, {'res': '$dest_index98.2'}), (100, {'target': '$dest_shape96.1', 'index': '$dest_index98.2', 'value': '$src_dim_size94.0'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={102: ()})
DEBUG 2022-02-14 16:37:59,042 block_infos State(pc_initial=102 nstack_initial=0):
AdaptBlockInfo(insts=((102, {'res': '$src_index102.0'}), (104, {'res': '$const104.1'}), (106, {'lhs': '$src_index102.0', 'rhs': '$const104.1', 'res': '$106inplace_add.2'}), (108, {'value': '$106inplace_add.2'}), (110, {'res': '$dest_index110.3'}), (112, {'res': '$const112.4'}), (114, {'lhs': '$dest_index110.3', 'rhs': '$const112.4', 'res': '$114inplace_add.5'}), (116, {'value': '$114inplace_add.5'}), (118, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={26: ()})
DEBUG 2022-02-14 16:37:59,042 block_infos State(pc_initial=120 nstack_initial=0):
AdaptBlockInfo(insts=((120, {'res': '$dest_index120.0'}), (122, {'retval': '$dest_index120.0', 'castval': '$122return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG 2022-02-14 16:37:59,045 label 0:
    src_ndim = arg(0, name=src_ndim)         ['src_ndim']
    src_shape = arg(1, name=src_shape)       ['src_shape']
    dest_ndim = arg(2, name=dest_ndim)       ['dest_ndim']
    dest_shape = arg(3, name=dest_shape)     ['dest_shape']
    $6compare_op.2 = src_ndim > dest_ndim    ['$6compare_op.2', 'dest_ndim', 'src_ndim']
    bool8 = global(bool: <class 'bool'>)     ['bool8']
    $8pred = call bool8($6compare_op.2, func=bool8, args=(Var($6compare_op.2, npyimpl.py:205),), kws=(), vararg=None, target=None) ['$6compare_op.2', '$8pred', 'bool8']
    branch $8pred, 10, 14                    ['$8pred']
label 10:
    $const10.0 = const(int, 0)               ['$const10.0']
    $12return_value.1 = cast(value=$const10.0) ['$12return_value.1', '$const10.0']
    return $12return_value.1                 ['$12return_value.1']
label 14:
    src_index = const(int, 0)                ['src_index']
    dest_index = dest_ndim - src_ndim        ['dest_index', 'dest_ndim', 'src_ndim']
    jump 26                                  []
label 26:
    $30compare_op.2 = src_index < src_ndim   ['$30compare_op.2', 'src_index', 'src_ndim']
    bool32 = global(bool: <class 'bool'>)    ['bool32']
    $32pred = call bool32($30compare_op.2, func=bool32, args=(Var($30compare_op.2, npyimpl.py:212),), kws=(), vararg=None, target=None) ['$30compare_op.2', '$32pred', 'bool32']
    branch $32pred, 34, 120                  ['$32pred']
label 34:
    src_dim_size = getitem(value=src_shape, index=src_index, fn=<built-in function getitem>) ['src_dim_size', 'src_index', 'src_shape']
    dest_dim_size = getitem(value=dest_shape, index=dest_index, fn=<built-in function getitem>) ['dest_dim_size', 'dest_index', 'dest_shape']
    $const52.7 = const(int, 1)               ['$const52.7']
    $54compare_op.8 = dest_dim_size != $const52.7 ['$54compare_op.8', '$const52.7', 'dest_dim_size']
    bool56 = global(bool: <class 'bool'>)    ['bool56']
    $56pred = call bool56($54compare_op.8, func=bool56, args=(Var($54compare_op.8, npyimpl.py:217),), kws=(), vararg=None, target=None) ['$54compare_op.8', '$56pred', 'bool56']
    branch $56pred, 58, 86                   ['$56pred']
label 58:
    $62compare_op.2 = src_dim_size != dest_dim_size ['$62compare_op.2', 'dest_dim_size', 'src_dim_size']
    bool64 = global(bool: <class 'bool'>)    ['bool64']
    $64pred = call bool64($62compare_op.2, func=bool64, args=(Var($62compare_op.2, npyimpl.py:221),), kws=(), vararg=None, target=None) ['$62compare_op.2', '$64pred', 'bool64']
    branch $64pred, 66, 102                  ['$64pred']
label 66:
    $const68.1 = const(int, 1)               ['$const68.1']
    $70compare_op.2 = src_dim_size != $const68.1 ['$70compare_op.2', '$const68.1', 'src_dim_size']
    bool72 = global(bool: <class 'bool'>)    ['bool72']
    $72pred = call bool72($70compare_op.2, func=bool72, args=(Var($70compare_op.2, npyimpl.py:221),), kws=(), vararg=None, target=None) ['$70compare_op.2', '$72pred', 'bool72']
    branch $72pred, 74, 102                  ['$72pred']
label 74:
    $const76.1 = const(int, 1)               ['$const76.1']
    $78binary_add.2 = dest_index + $const76.1 ['$78binary_add.2', '$const76.1', 'dest_index']
    $80unary_negative.3 = unary(fn=<built-in function neg>, value=$78binary_add.2) ['$78binary_add.2', '$80unary_negative.3']
    $82return_value.4 = cast(value=$80unary_negative.3) ['$80unary_negative.3', '$82return_value.4']
    return $82return_value.4                 ['$82return_value.4']
label 86:
    $const88.1 = const(int, 1)               ['$const88.1']
    $90compare_op.2 = src_dim_size != $const88.1 ['$90compare_op.2', '$const88.1', 'src_dim_size']
    bool92 = global(bool: <class 'bool'>)    ['bool92']
    $92pred = call bool92($90compare_op.2, func=bool92, args=(Var($90compare_op.2, npyimpl.py:223),), kws=(), vararg=None, target=None) ['$90compare_op.2', '$92pred', 'bool92']
    branch $92pred, 94, 102                  ['$92pred']
label 94:
    dest_shape[dest_index] = src_dim_size    ['dest_index', 'dest_shape', 'src_dim_size']
    jump 102                                 []
label 102:
    $const104.1 = const(int, 1)              ['$const104.1']
    $106inplace_add.2 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=src_index, rhs=$const104.1, static_lhs=Undefined, static_rhs=Undefined) ['$106inplace_add.2', '$const104.1', 'src_index']
    src_index = $106inplace_add.2            ['$106inplace_add.2', 'src_index']
    $const112.4 = const(int, 1)              ['$const112.4']
    $114inplace_add.5 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=dest_index, rhs=$const112.4, static_lhs=Undefined, static_rhs=Undefined) ['$114inplace_add.5', '$const112.4', 'dest_index']
    dest_index = $114inplace_add.5           ['$114inplace_add.5', 'dest_index']
    jump 26                                  []
label 120:
    $122return_value.1 = cast(value=dest_index) ['$122return_value.1', 'dest_index']
    return $122return_value.1                ['$122return_value.1']

DEBUG 2022-02-14 16:37:59,055 ==== SSA block analysis pass on 0
DEBUG 2022-02-14 16:37:59,055 Running <numba.core.ssa._GatherDefsHandler object at 0x7fa047427fd0>
DEBUG 2022-02-14 16:37:59,055 on stmt: src_ndim = arg(0, name=src_ndim)
DEBUG 2022-02-14 16:37:59,055 on stmt: src_shape = arg(1, name=src_shape)
DEBUG 2022-02-14 16:37:59,055 on stmt: dest_ndim = arg(2, name=dest_ndim)
DEBUG 2022-02-14 16:37:59,055 on stmt: dest_shape = arg(3, name=dest_shape)
DEBUG 2022-02-14 16:37:59,055 on stmt: $6compare_op.2 = src_ndim > dest_ndim
DEBUG 2022-02-14 16:37:59,055 on stmt: bool8 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:37:59,055 on stmt: $8pred = call bool8($6compare_op.2, func=bool8, args=(Var($6compare_op.2, npyimpl.py:205),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:37:59,056 on stmt: branch $8pred, 10, 14
DEBUG 2022-02-14 16:37:59,056 ==== SSA block analysis pass on 10
DEBUG 2022-02-14 16:37:59,056 Running <numba.core.ssa._GatherDefsHandler object at 0x7fa047427fd0>
DEBUG 2022-02-14 16:37:59,056 on stmt: $const10.0 = const(int, 0)
DEBUG 2022-02-14 16:37:59,056 on stmt: $12return_value.1 = cast(value=$const10.0)
DEBUG 2022-02-14 16:37:59,056 on stmt: return $12return_value.1
DEBUG 2022-02-14 16:37:59,056 ==== SSA block analysis pass on 14
DEBUG 2022-02-14 16:37:59,056 Running <numba.core.ssa._GatherDefsHandler object at 0x7fa047427fd0>
DEBUG 2022-02-14 16:37:59,056 on stmt: src_index = const(int, 0)
DEBUG 2022-02-14 16:37:59,056 on stmt: dest_index = dest_ndim - src_ndim
DEBUG 2022-02-14 16:37:59,057 on stmt: jump 26
DEBUG 2022-02-14 16:37:59,057 ==== SSA block analysis pass on 26
DEBUG 2022-02-14 16:37:59,057 Running <numba.core.ssa._GatherDefsHandler object at 0x7fa047427fd0>
DEBUG 2022-02-14 16:37:59,057 on stmt: $30compare_op.2 = src_index < src_ndim
DEBUG 2022-02-14 16:37:59,057 on stmt: bool32 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:37:59,057 on stmt: $32pred = call bool32($30compare_op.2, func=bool32, args=(Var($30compare_op.2, npyimpl.py:212),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:37:59,057 on stmt: branch $32pred, 34, 120
DEBUG 2022-02-14 16:37:59,057 ==== SSA block analysis pass on 34
DEBUG 2022-02-14 16:37:59,057 Running <numba.core.ssa._GatherDefsHandler object at 0x7fa047427fd0>
DEBUG 2022-02-14 16:37:59,058 on stmt: src_dim_size = getitem(value=src_shape, index=src_index, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:37:59,058 on stmt: dest_dim_size = getitem(value=dest_shape, index=dest_index, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:37:59,058 on stmt: $const52.7 = const(int, 1)
DEBUG 2022-02-14 16:37:59,058 on stmt: $54compare_op.8 = dest_dim_size != $const52.7
DEBUG 2022-02-14 16:37:59,058 on stmt: bool56 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:37:59,058 on stmt: $56pred = call bool56($54compare_op.8, func=bool56, args=(Var($54compare_op.8, npyimpl.py:217),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:37:59,058 on stmt: branch $56pred, 58, 86
DEBUG 2022-02-14 16:37:59,058 ==== SSA block analysis pass on 58
DEBUG 2022-02-14 16:37:59,058 Running <numba.core.ssa._GatherDefsHandler object at 0x7fa047427fd0>
DEBUG 2022-02-14 16:37:59,058 on stmt: $62compare_op.2 = src_dim_size != dest_dim_size
DEBUG 2022-02-14 16:37:59,059 on stmt: bool64 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:37:59,059 on stmt: $64pred = call bool64($62compare_op.2, func=bool64, args=(Var($62compare_op.2, npyimpl.py:221),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:37:59,059 on stmt: branch $64pred, 66, 102
DEBUG 2022-02-14 16:37:59,059 ==== SSA block analysis pass on 66
DEBUG 2022-02-14 16:37:59,059 Running <numba.core.ssa._GatherDefsHandler object at 0x7fa047427fd0>
DEBUG 2022-02-14 16:37:59,059 on stmt: $const68.1 = const(int, 1)
DEBUG 2022-02-14 16:37:59,059 on stmt: $70compare_op.2 = src_dim_size != $const68.1
DEBUG 2022-02-14 16:37:59,059 on stmt: bool72 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:37:59,059 on stmt: $72pred = call bool72($70compare_op.2, func=bool72, args=(Var($70compare_op.2, npyimpl.py:221),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:37:59,059 on stmt: branch $72pred, 74, 102
DEBUG 2022-02-14 16:37:59,060 ==== SSA block analysis pass on 74
DEBUG 2022-02-14 16:37:59,060 Running <numba.core.ssa._GatherDefsHandler object at 0x7fa047427fd0>
DEBUG 2022-02-14 16:37:59,060 on stmt: $const76.1 = const(int, 1)
DEBUG 2022-02-14 16:37:59,060 on stmt: $78binary_add.2 = dest_index + $const76.1
DEBUG 2022-02-14 16:37:59,060 on stmt: $80unary_negative.3 = unary(fn=<built-in function neg>, value=$78binary_add.2)
DEBUG 2022-02-14 16:37:59,060 on stmt: $82return_value.4 = cast(value=$80unary_negative.3)
DEBUG 2022-02-14 16:37:59,060 on stmt: return $82return_value.4
DEBUG 2022-02-14 16:37:59,060 ==== SSA block analysis pass on 86
DEBUG 2022-02-14 16:37:59,060 Running <numba.core.ssa._GatherDefsHandler object at 0x7fa047427fd0>
DEBUG 2022-02-14 16:37:59,060 on stmt: $const88.1 = const(int, 1)
DEBUG 2022-02-14 16:37:59,060 on stmt: $90compare_op.2 = src_dim_size != $const88.1
DEBUG 2022-02-14 16:37:59,060 on stmt: bool92 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:37:59,060 on stmt: $92pred = call bool92($90compare_op.2, func=bool92, args=(Var($90compare_op.2, npyimpl.py:223),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:37:59,061 on stmt: branch $92pred, 94, 102
DEBUG 2022-02-14 16:37:59,061 ==== SSA block analysis pass on 94
DEBUG 2022-02-14 16:37:59,061 Running <numba.core.ssa._GatherDefsHandler object at 0x7fa047427fd0>
DEBUG 2022-02-14 16:37:59,061 on stmt: dest_shape[dest_index] = src_dim_size
DEBUG 2022-02-14 16:37:59,061 on stmt: jump 102
DEBUG 2022-02-14 16:37:59,061 ==== SSA block analysis pass on 102
DEBUG 2022-02-14 16:37:59,061 Running <numba.core.ssa._GatherDefsHandler object at 0x7fa047427fd0>
DEBUG 2022-02-14 16:37:59,061 on stmt: $const104.1 = const(int, 1)
DEBUG 2022-02-14 16:37:59,061 on stmt: $106inplace_add.2 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=src_index, rhs=$const104.1, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:37:59,061 on stmt: src_index = $106inplace_add.2
DEBUG 2022-02-14 16:37:59,062 on stmt: $const112.4 = const(int, 1)
DEBUG 2022-02-14 16:37:59,062 on stmt: $114inplace_add.5 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=dest_index, rhs=$const112.4, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:37:59,062 on stmt: dest_index = $114inplace_add.5
DEBUG 2022-02-14 16:37:59,062 on stmt: jump 26
DEBUG 2022-02-14 16:37:59,062 ==== SSA block analysis pass on 120
DEBUG 2022-02-14 16:37:59,062 Running <numba.core.ssa._GatherDefsHandler object at 0x7fa047427fd0>
DEBUG 2022-02-14 16:37:59,062 on stmt: $122return_value.1 = cast(value=dest_index)
DEBUG 2022-02-14 16:37:59,062 on stmt: return $122return_value.1
DEBUG 2022-02-14 16:37:59,063 defs defaultdict(<class 'list'>,
            {'$106inplace_add.2': [<numba.core.ir.Assign object at 0x7fa04749ddc0>],
             '$114inplace_add.5': [<numba.core.ir.Assign object at 0x7fa04749d4c0>],
             '$122return_value.1': [<numba.core.ir.Assign object at 0x7fa047427ac0>],
             '$12return_value.1': [<numba.core.ir.Assign object at 0x7fa0473fba90>],
             '$30compare_op.2': [<numba.core.ir.Assign object at 0x7fa04742f670>],
             '$32pred': [<numba.core.ir.Assign object at 0x7fa04742f940>],
             '$54compare_op.8': [<numba.core.ir.Assign object at 0x7fa047495bb0>],
             '$56pred': [<numba.core.ir.Assign object at 0x7fa047487580>],
             '$62compare_op.2': [<numba.core.ir.Assign object at 0x7fa047487be0>],
             '$64pred': [<numba.core.ir.Assign object at 0x7fa047487d30>],
             '$6compare_op.2': [<numba.core.ir.Assign object at 0x7fa0473fb8b0>],
             '$70compare_op.2': [<numba.core.ir.Assign object at 0x7fa047487f70>],
             '$72pred': [<numba.core.ir.Assign object at 0x7fa04741c550>],
             '$78binary_add.2': [<numba.core.ir.Assign object at 0x7fa04741c2e0>],
             '$80unary_negative.3': [<numba.core.ir.Assign object at 0x7fa0473170a0>],
             '$82return_value.4': [<numba.core.ir.Assign object at 0x7fa047475be0>],
             '$8pred': [<numba.core.ir.Assign object at 0x7fa0473fb940>],
             '$90compare_op.2': [<numba.core.ir.Assign object at 0x7fa04741ca90>],
             '$92pred': [<numba.core.ir.Assign object at 0x7fa04741cd30>],
             '$const10.0': [<numba.core.ir.Assign object at 0x7fa0473fbc40>],
             '$const104.1': [<numba.core.ir.Assign object at 0x7fa04749d640>],
             '$const112.4': [<numba.core.ir.Assign object at 0x7fa04749da90>],
             '$const52.7': [<numba.core.ir.Assign object at 0x7fa047495ca0>],
             '$const68.1': [<numba.core.ir.Assign object at 0x7fa047487040>],
             '$const76.1': [<numba.core.ir.Assign object at 0x7fa04741c970>],
             '$const88.1': [<numba.core.ir.Assign object at 0x7fa04741cfd0>],
             'bool32': [<numba.core.ir.Assign object at 0x7fa04742f760>],
             'bool56': [<numba.core.ir.Assign object at 0x7fa047487c40>],
             'bool64': [<numba.core.ir.Assign object at 0x7fa047487a30>],
             'bool72': [<numba.core.ir.Assign object at 0x7fa04741c5e0>],
             'bool8': [<numba.core.ir.Assign object at 0x7fa0473fba00>],
             'bool92': [<numba.core.ir.Assign object at 0x7fa04741cd90>],
             'dest_dim_size': [<numba.core.ir.Assign object at 0x7fa047495220>],
             'dest_index': [<numba.core.ir.Assign object at 0x7fa04742fbe0>,
                            <numba.core.ir.Assign object at 0x7fa04749d7c0>],
             'dest_ndim': [<numba.core.ir.Assign object at 0x7fa04732f340>],
             'dest_shape': [<numba.core.ir.Assign object at 0x7fa0473fb580>],
             'src_dim_size': [<numba.core.ir.Assign object at 0x7fa047495d00>],
             'src_index': [<numba.core.ir.Assign object at 0x7fa04742ff10>,
                           <numba.core.ir.Assign object at 0x7fa04749dcd0>],
             'src_ndim': [<numba.core.ir.Assign object at 0x7fa0474db760>],
             'src_shape': [<numba.core.ir.Assign object at 0x7fa0473202e0>]})
DEBUG 2022-02-14 16:37:59,063 SSA violators {'src_index', 'dest_index'}
DEBUG 2022-02-14 16:37:59,063 Fix SSA violator on var src_index
DEBUG 2022-02-14 16:37:59,063 ==== SSA block rewrite pass on 0
DEBUG 2022-02-14 16:37:59,063 Running <numba.core.ssa._FreshVarHandler object at 0x7fa04731c280>
DEBUG 2022-02-14 16:37:59,063 on stmt: src_ndim = arg(0, name=src_ndim)
DEBUG 2022-02-14 16:37:59,064 on stmt: src_shape = arg(1, name=src_shape)
DEBUG 2022-02-14 16:37:59,064 on stmt: dest_ndim = arg(2, name=dest_ndim)
DEBUG 2022-02-14 16:37:59,064 on stmt: dest_shape = arg(3, name=dest_shape)
DEBUG 2022-02-14 16:37:59,064 on stmt: $6compare_op.2 = src_ndim > dest_ndim
DEBUG 2022-02-14 16:37:59,064 on stmt: bool8 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:37:59,064 on stmt: $8pred = call bool8($6compare_op.2, func=bool8, args=(Var($6compare_op.2, npyimpl.py:205),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:37:59,064 on stmt: branch $8pred, 10, 14
DEBUG 2022-02-14 16:37:59,064 ==== SSA block rewrite pass on 10
DEBUG 2022-02-14 16:37:59,064 Running <numba.core.ssa._FreshVarHandler object at 0x7fa04731c280>
DEBUG 2022-02-14 16:37:59,064 on stmt: $const10.0 = const(int, 0)
DEBUG 2022-02-14 16:37:59,064 on stmt: $12return_value.1 = cast(value=$const10.0)
DEBUG 2022-02-14 16:37:59,064 on stmt: return $12return_value.1
DEBUG 2022-02-14 16:37:59,064 ==== SSA block rewrite pass on 14
DEBUG 2022-02-14 16:37:59,064 Running <numba.core.ssa._FreshVarHandler object at 0x7fa04731c280>
DEBUG 2022-02-14 16:37:59,064 on stmt: src_index = const(int, 0)
DEBUG 2022-02-14 16:37:59,064 first assign: src_index
DEBUG 2022-02-14 16:37:59,064 replaced with: src_index = const(int, 0)
DEBUG 2022-02-14 16:37:59,065 on stmt: dest_index = dest_ndim - src_ndim
DEBUG 2022-02-14 16:37:59,065 on stmt: jump 26
DEBUG 2022-02-14 16:37:59,065 ==== SSA block rewrite pass on 26
DEBUG 2022-02-14 16:37:59,065 Running <numba.core.ssa._FreshVarHandler object at 0x7fa04731c280>
DEBUG 2022-02-14 16:37:59,065 on stmt: $30compare_op.2 = src_index < src_ndim
DEBUG 2022-02-14 16:37:59,065 on stmt: bool32 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:37:59,065 on stmt: $32pred = call bool32($30compare_op.2, func=bool32, args=(Var($30compare_op.2, npyimpl.py:212),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:37:59,065 on stmt: branch $32pred, 34, 120
DEBUG 2022-02-14 16:37:59,065 ==== SSA block rewrite pass on 34
DEBUG 2022-02-14 16:37:59,065 Running <numba.core.ssa._FreshVarHandler object at 0x7fa04731c280>
DEBUG 2022-02-14 16:37:59,065 on stmt: src_dim_size = getitem(value=src_shape, index=src_index, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:37:59,065 on stmt: dest_dim_size = getitem(value=dest_shape, index=dest_index, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:37:59,065 on stmt: $const52.7 = const(int, 1)
DEBUG 2022-02-14 16:37:59,065 on stmt: $54compare_op.8 = dest_dim_size != $const52.7
DEBUG 2022-02-14 16:37:59,065 on stmt: bool56 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:37:59,065 on stmt: $56pred = call bool56($54compare_op.8, func=bool56, args=(Var($54compare_op.8, npyimpl.py:217),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:37:59,065 on stmt: branch $56pred, 58, 86
DEBUG 2022-02-14 16:37:59,065 ==== SSA block rewrite pass on 58
DEBUG 2022-02-14 16:37:59,066 Running <numba.core.ssa._FreshVarHandler object at 0x7fa04731c280>
DEBUG 2022-02-14 16:37:59,066 on stmt: $62compare_op.2 = src_dim_size != dest_dim_size
DEBUG 2022-02-14 16:37:59,066 on stmt: bool64 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:37:59,066 on stmt: $64pred = call bool64($62compare_op.2, func=bool64, args=(Var($62compare_op.2, npyimpl.py:221),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:37:59,066 on stmt: branch $64pred, 66, 102
DEBUG 2022-02-14 16:37:59,066 ==== SSA block rewrite pass on 66
DEBUG 2022-02-14 16:37:59,066 Running <numba.core.ssa._FreshVarHandler object at 0x7fa04731c280>
DEBUG 2022-02-14 16:37:59,066 on stmt: $const68.1 = const(int, 1)
DEBUG 2022-02-14 16:37:59,066 on stmt: $70compare_op.2 = src_dim_size != $const68.1
DEBUG 2022-02-14 16:37:59,066 on stmt: bool72 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:37:59,067 on stmt: $72pred = call bool72($70compare_op.2, func=bool72, args=(Var($70compare_op.2, npyimpl.py:221),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:37:59,067 on stmt: branch $72pred, 74, 102
DEBUG 2022-02-14 16:37:59,067 ==== SSA block rewrite pass on 74
DEBUG 2022-02-14 16:37:59,067 Running <numba.core.ssa._FreshVarHandler object at 0x7fa04731c280>
DEBUG 2022-02-14 16:37:59,067 on stmt: $const76.1 = const(int, 1)
DEBUG 2022-02-14 16:37:59,067 on stmt: $78binary_add.2 = dest_index + $const76.1
DEBUG 2022-02-14 16:37:59,067 on stmt: $80unary_negative.3 = unary(fn=<built-in function neg>, value=$78binary_add.2)
DEBUG 2022-02-14 16:37:59,067 on stmt: $82return_value.4 = cast(value=$80unary_negative.3)
DEBUG 2022-02-14 16:37:59,067 on stmt: return $82return_value.4
DEBUG 2022-02-14 16:37:59,067 ==== SSA block rewrite pass on 86
DEBUG 2022-02-14 16:37:59,068 Running <numba.core.ssa._FreshVarHandler object at 0x7fa04731c280>
DEBUG 2022-02-14 16:37:59,068 on stmt: $const88.1 = const(int, 1)
DEBUG 2022-02-14 16:37:59,068 on stmt: $90compare_op.2 = src_dim_size != $const88.1
DEBUG 2022-02-14 16:37:59,068 on stmt: bool92 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:37:59,068 on stmt: $92pred = call bool92($90compare_op.2, func=bool92, args=(Var($90compare_op.2, npyimpl.py:223),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:37:59,068 on stmt: branch $92pred, 94, 102
DEBUG 2022-02-14 16:37:59,068 ==== SSA block rewrite pass on 94
DEBUG 2022-02-14 16:37:59,068 Running <numba.core.ssa._FreshVarHandler object at 0x7fa04731c280>
DEBUG 2022-02-14 16:37:59,068 on stmt: dest_shape[dest_index] = src_dim_size
DEBUG 2022-02-14 16:37:59,068 on stmt: jump 102
DEBUG 2022-02-14 16:37:59,068 ==== SSA block rewrite pass on 102
DEBUG 2022-02-14 16:37:59,069 Running <numba.core.ssa._FreshVarHandler object at 0x7fa04731c280>
DEBUG 2022-02-14 16:37:59,069 on stmt: $const104.1 = const(int, 1)
DEBUG 2022-02-14 16:37:59,069 on stmt: $106inplace_add.2 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=src_index, rhs=$const104.1, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:37:59,069 on stmt: src_index = $106inplace_add.2
DEBUG 2022-02-14 16:37:59,069 replaced with: src_index.1 = $106inplace_add.2
DEBUG 2022-02-14 16:37:59,069 on stmt: $const112.4 = const(int, 1)
DEBUG 2022-02-14 16:37:59,069 on stmt: $114inplace_add.5 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=dest_index, rhs=$const112.4, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:37:59,069 on stmt: dest_index = $114inplace_add.5
DEBUG 2022-02-14 16:37:59,069 on stmt: jump 26
DEBUG 2022-02-14 16:37:59,069 ==== SSA block rewrite pass on 120
DEBUG 2022-02-14 16:37:59,069 Running <numba.core.ssa._FreshVarHandler object at 0x7fa04731c280>
DEBUG 2022-02-14 16:37:59,070 on stmt: $122return_value.1 = cast(value=dest_index)
DEBUG 2022-02-14 16:37:59,070 on stmt: return $122return_value.1
DEBUG 2022-02-14 16:37:59,070 Replaced assignments: defaultdict(<class 'list'>,
            {14: [<numba.core.ir.Assign object at 0x7fa04731cc40>],
             102: [<numba.core.ir.Assign object at 0x7fa047427070>]})
DEBUG 2022-02-14 16:37:59,070 ==== SSA block rewrite pass on 0
DEBUG 2022-02-14 16:37:59,070 Running <numba.core.ssa._FixSSAVars object at 0x7fa04731c280>
DEBUG 2022-02-14 16:37:59,070 on stmt: src_ndim = arg(0, name=src_ndim)
DEBUG 2022-02-14 16:37:59,070 on stmt: src_shape = arg(1, name=src_shape)
DEBUG 2022-02-14 16:37:59,070 on stmt: dest_ndim = arg(2, name=dest_ndim)
DEBUG 2022-02-14 16:37:59,070 on stmt: dest_shape = arg(3, name=dest_shape)
DEBUG 2022-02-14 16:37:59,070 on stmt: $6compare_op.2 = src_ndim > dest_ndim
DEBUG 2022-02-14 16:37:59,070 on stmt: bool8 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:37:59,070 on stmt: $8pred = call bool8($6compare_op.2, func=bool8, args=(Var($6compare_op.2, npyimpl.py:205),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:37:59,070 on stmt: branch $8pred, 10, 14
DEBUG 2022-02-14 16:37:59,071 ==== SSA block rewrite pass on 10
DEBUG 2022-02-14 16:37:59,071 Running <numba.core.ssa._FixSSAVars object at 0x7fa04731c280>
DEBUG 2022-02-14 16:37:59,071 on stmt: $const10.0 = const(int, 0)
DEBUG 2022-02-14 16:37:59,071 on stmt: $12return_value.1 = cast(value=$const10.0)
DEBUG 2022-02-14 16:37:59,071 on stmt: return $12return_value.1
DEBUG 2022-02-14 16:37:59,071 ==== SSA block rewrite pass on 14
DEBUG 2022-02-14 16:37:59,071 Running <numba.core.ssa._FixSSAVars object at 0x7fa04731c280>
DEBUG 2022-02-14 16:37:59,071 on stmt: src_index = const(int, 0)
DEBUG 2022-02-14 16:37:59,071 on stmt: dest_index = dest_ndim - src_ndim
DEBUG 2022-02-14 16:37:59,071 on stmt: jump 26
DEBUG 2022-02-14 16:37:59,071 ==== SSA block rewrite pass on 26
DEBUG 2022-02-14 16:37:59,072 Running <numba.core.ssa._FixSSAVars object at 0x7fa04731c280>
DEBUG 2022-02-14 16:37:59,072 on stmt: $30compare_op.2 = src_index < src_ndim
DEBUG 2022-02-14 16:37:59,072 find_def var='src_index' stmt=$30compare_op.2 = src_index < src_ndim
DEBUG 2022-02-14 16:37:59,072 find_def_from_top label 26
DEBUG 2022-02-14 16:37:59,072 insert phi node src_index.2 = phi(incoming_values=[], incoming_blocks=[]) at 26
DEBUG 2022-02-14 16:37:59,072 find_def_from_bottom label 102
DEBUG 2022-02-14 16:37:59,072 incoming_def src_index.1 = $106inplace_add.2
DEBUG 2022-02-14 16:37:59,072 find_def_from_bottom label 14
DEBUG 2022-02-14 16:37:59,072 incoming_def src_index = const(int, 0)
DEBUG 2022-02-14 16:37:59,072 replaced with: $30compare_op.2 = src_index.2 < src_ndim
DEBUG 2022-02-14 16:37:59,073 on stmt: bool32 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:37:59,073 on stmt: $32pred = call bool32($30compare_op.2, func=bool32, args=(Var($30compare_op.2, npyimpl.py:212),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:37:59,073 on stmt: branch $32pred, 34, 120
DEBUG 2022-02-14 16:37:59,073 ==== SSA block rewrite pass on 34
DEBUG 2022-02-14 16:37:59,073 Running <numba.core.ssa._FixSSAVars object at 0x7fa04731c280>
DEBUG 2022-02-14 16:37:59,073 on stmt: src_dim_size = getitem(value=src_shape, index=src_index, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:37:59,073 find_def var='src_index' stmt=src_dim_size = getitem(value=src_shape, index=src_index, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:37:59,073 find_def_from_top label 34
DEBUG 2022-02-14 16:37:59,073 idom 26 from label 34
DEBUG 2022-02-14 16:37:59,073 find_def_from_bottom label 26
DEBUG 2022-02-14 16:37:59,074 replaced with: src_dim_size = getitem(value=src_shape, index=src_index.2, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:37:59,074 on stmt: dest_dim_size = getitem(value=dest_shape, index=dest_index, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:37:59,074 on stmt: $const52.7 = const(int, 1)
DEBUG 2022-02-14 16:37:59,074 on stmt: $54compare_op.8 = dest_dim_size != $const52.7
DEBUG 2022-02-14 16:37:59,074 on stmt: bool56 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:37:59,074 on stmt: $56pred = call bool56($54compare_op.8, func=bool56, args=(Var($54compare_op.8, npyimpl.py:217),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:37:59,074 on stmt: branch $56pred, 58, 86
DEBUG 2022-02-14 16:37:59,074 ==== SSA block rewrite pass on 58
DEBUG 2022-02-14 16:37:59,074 Running <numba.core.ssa._FixSSAVars object at 0x7fa04731c280>
DEBUG 2022-02-14 16:37:59,074 on stmt: $62compare_op.2 = src_dim_size != dest_dim_size
DEBUG 2022-02-14 16:37:59,074 on stmt: bool64 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:37:59,074 on stmt: $64pred = call bool64($62compare_op.2, func=bool64, args=(Var($62compare_op.2, npyimpl.py:221),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:37:59,075 on stmt: branch $64pred, 66, 102
DEBUG 2022-02-14 16:37:59,075 ==== SSA block rewrite pass on 66
DEBUG 2022-02-14 16:37:59,075 Running <numba.core.ssa._FixSSAVars object at 0x7fa04731c280>
DEBUG 2022-02-14 16:37:59,075 on stmt: $const68.1 = const(int, 1)
DEBUG 2022-02-14 16:37:59,075 on stmt: $70compare_op.2 = src_dim_size != $const68.1
DEBUG 2022-02-14 16:37:59,075 on stmt: bool72 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:37:59,075 on stmt: $72pred = call bool72($70compare_op.2, func=bool72, args=(Var($70compare_op.2, npyimpl.py:221),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:37:59,075 on stmt: branch $72pred, 74, 102
DEBUG 2022-02-14 16:37:59,075 ==== SSA block rewrite pass on 74
DEBUG 2022-02-14 16:37:59,075 Running <numba.core.ssa._FixSSAVars object at 0x7fa04731c280>
DEBUG 2022-02-14 16:37:59,075 on stmt: $const76.1 = const(int, 1)
DEBUG 2022-02-14 16:37:59,075 on stmt: $78binary_add.2 = dest_index + $const76.1
DEBUG 2022-02-14 16:37:59,075 on stmt: $80unary_negative.3 = unary(fn=<built-in function neg>, value=$78binary_add.2)
DEBUG 2022-02-14 16:37:59,075 on stmt: $82return_value.4 = cast(value=$80unary_negative.3)
DEBUG 2022-02-14 16:37:59,075 on stmt: return $82return_value.4
DEBUG 2022-02-14 16:37:59,075 ==== SSA block rewrite pass on 86
DEBUG 2022-02-14 16:37:59,075 Running <numba.core.ssa._FixSSAVars object at 0x7fa04731c280>
DEBUG 2022-02-14 16:37:59,076 on stmt: $const88.1 = const(int, 1)
DEBUG 2022-02-14 16:37:59,076 on stmt: $90compare_op.2 = src_dim_size != $const88.1
DEBUG 2022-02-14 16:37:59,076 on stmt: bool92 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:37:59,076 on stmt: $92pred = call bool92($90compare_op.2, func=bool92, args=(Var($90compare_op.2, npyimpl.py:223),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:37:59,076 on stmt: branch $92pred, 94, 102
DEBUG 2022-02-14 16:37:59,076 ==== SSA block rewrite pass on 94
DEBUG 2022-02-14 16:37:59,076 Running <numba.core.ssa._FixSSAVars object at 0x7fa04731c280>
DEBUG 2022-02-14 16:37:59,076 on stmt: dest_shape[dest_index] = src_dim_size
DEBUG 2022-02-14 16:37:59,076 on stmt: jump 102
DEBUG 2022-02-14 16:37:59,076 ==== SSA block rewrite pass on 102
DEBUG 2022-02-14 16:37:59,076 Running <numba.core.ssa._FixSSAVars object at 0x7fa04731c280>
DEBUG 2022-02-14 16:37:59,076 on stmt: $const104.1 = const(int, 1)
DEBUG 2022-02-14 16:37:59,076 on stmt: $106inplace_add.2 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=src_index, rhs=$const104.1, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:37:59,076 find_def var='src_index' stmt=$106inplace_add.2 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=src_index, rhs=$const104.1, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:37:59,076 find_def_from_top label 102
DEBUG 2022-02-14 16:37:59,076 idom 34 from label 102
DEBUG 2022-02-14 16:37:59,076 find_def_from_bottom label 34
DEBUG 2022-02-14 16:37:59,077 find_def_from_top label 34
DEBUG 2022-02-14 16:37:59,077 idom 26 from label 34
DEBUG 2022-02-14 16:37:59,077 find_def_from_bottom label 26
DEBUG 2022-02-14 16:37:59,077 replaced with: $106inplace_add.2 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=src_index.2, rhs=$const104.1, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:37:59,077 on stmt: src_index.1 = $106inplace_add.2
DEBUG 2022-02-14 16:37:59,077 on stmt: $const112.4 = const(int, 1)
DEBUG 2022-02-14 16:37:59,077 on stmt: $114inplace_add.5 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=dest_index, rhs=$const112.4, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:37:59,077 on stmt: dest_index = $114inplace_add.5
DEBUG 2022-02-14 16:37:59,077 on stmt: jump 26
DEBUG 2022-02-14 16:37:59,077 ==== SSA block rewrite pass on 120
DEBUG 2022-02-14 16:37:59,077 Running <numba.core.ssa._FixSSAVars object at 0x7fa04731c280>
DEBUG 2022-02-14 16:37:59,077 on stmt: $122return_value.1 = cast(value=dest_index)
DEBUG 2022-02-14 16:37:59,077 on stmt: return $122return_value.1
DEBUG 2022-02-14 16:37:59,078 Fix SSA violator on var dest_index
DEBUG 2022-02-14 16:37:59,078 ==== SSA block rewrite pass on 0
DEBUG 2022-02-14 16:37:59,078 Running <numba.core.ssa._FreshVarHandler object at 0x7fa04731cd00>
DEBUG 2022-02-14 16:37:59,078 on stmt: src_ndim = arg(0, name=src_ndim)
DEBUG 2022-02-14 16:37:59,078 on stmt: src_shape = arg(1, name=src_shape)
DEBUG 2022-02-14 16:37:59,078 on stmt: dest_ndim = arg(2, name=dest_ndim)
DEBUG 2022-02-14 16:37:59,078 on stmt: dest_shape = arg(3, name=dest_shape)
DEBUG 2022-02-14 16:37:59,078 on stmt: $6compare_op.2 = src_ndim > dest_ndim
DEBUG 2022-02-14 16:37:59,078 on stmt: bool8 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:37:59,078 on stmt: $8pred = call bool8($6compare_op.2, func=bool8, args=(Var($6compare_op.2, npyimpl.py:205),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:37:59,078 on stmt: branch $8pred, 10, 14
DEBUG 2022-02-14 16:37:59,079 ==== SSA block rewrite pass on 10
DEBUG 2022-02-14 16:37:59,079 Running <numba.core.ssa._FreshVarHandler object at 0x7fa04731cd00>
DEBUG 2022-02-14 16:37:59,079 on stmt: $const10.0 = const(int, 0)
DEBUG 2022-02-14 16:37:59,079 on stmt: $12return_value.1 = cast(value=$const10.0)
DEBUG 2022-02-14 16:37:59,079 on stmt: return $12return_value.1
DEBUG 2022-02-14 16:37:59,079 ==== SSA block rewrite pass on 14
DEBUG 2022-02-14 16:37:59,079 Running <numba.core.ssa._FreshVarHandler object at 0x7fa04731cd00>
DEBUG 2022-02-14 16:37:59,079 on stmt: src_index = const(int, 0)
DEBUG 2022-02-14 16:37:59,079 on stmt: dest_index = dest_ndim - src_ndim
DEBUG 2022-02-14 16:37:59,079 first assign: dest_index
DEBUG 2022-02-14 16:37:59,079 replaced with: dest_index = dest_ndim - src_ndim
DEBUG 2022-02-14 16:37:59,080 on stmt: jump 26
DEBUG 2022-02-14 16:37:59,080 ==== SSA block rewrite pass on 26
DEBUG 2022-02-14 16:37:59,080 Running <numba.core.ssa._FreshVarHandler object at 0x7fa04731cd00>
DEBUG 2022-02-14 16:37:59,080 on stmt: src_index.2 = phi(incoming_values=[Var(src_index.1, npyimpl.py:226), Var(src_index, npyimpl.py:210)], incoming_blocks=[102, 14])
DEBUG 2022-02-14 16:37:59,080 on stmt: $30compare_op.2 = src_index.2 < src_ndim
DEBUG 2022-02-14 16:37:59,080 on stmt: bool32 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:37:59,080 on stmt: $32pred = call bool32($30compare_op.2, func=bool32, args=(Var($30compare_op.2, npyimpl.py:212),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:37:59,080 on stmt: branch $32pred, 34, 120
DEBUG 2022-02-14 16:37:59,080 ==== SSA block rewrite pass on 34
DEBUG 2022-02-14 16:37:59,080 Running <numba.core.ssa._FreshVarHandler object at 0x7fa04731cd00>
DEBUG 2022-02-14 16:37:59,080 on stmt: src_dim_size = getitem(value=src_shape, index=src_index.2, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:37:59,081 on stmt: dest_dim_size = getitem(value=dest_shape, index=dest_index, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:37:59,081 on stmt: $const52.7 = const(int, 1)
DEBUG 2022-02-14 16:37:59,081 on stmt: $54compare_op.8 = dest_dim_size != $const52.7
DEBUG 2022-02-14 16:37:59,081 on stmt: bool56 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:37:59,081 on stmt: $56pred = call bool56($54compare_op.8, func=bool56, args=(Var($54compare_op.8, npyimpl.py:217),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:37:59,081 on stmt: branch $56pred, 58, 86
DEBUG 2022-02-14 16:37:59,081 ==== SSA block rewrite pass on 58
DEBUG 2022-02-14 16:37:59,081 Running <numba.core.ssa._FreshVarHandler object at 0x7fa04731cd00>
DEBUG 2022-02-14 16:37:59,081 on stmt: $62compare_op.2 = src_dim_size != dest_dim_size
DEBUG 2022-02-14 16:37:59,081 on stmt: bool64 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:37:59,081 on stmt: $64pred = call bool64($62compare_op.2, func=bool64, args=(Var($62compare_op.2, npyimpl.py:221),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:37:59,081 on stmt: branch $64pred, 66, 102
DEBUG 2022-02-14 16:37:59,081 ==== SSA block rewrite pass on 66
DEBUG 2022-02-14 16:37:59,081 Running <numba.core.ssa._FreshVarHandler object at 0x7fa04731cd00>
DEBUG 2022-02-14 16:37:59,081 on stmt: $const68.1 = const(int, 1)
DEBUG 2022-02-14 16:37:59,081 on stmt: $70compare_op.2 = src_dim_size != $const68.1
DEBUG 2022-02-14 16:37:59,082 on stmt: bool72 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:37:59,082 on stmt: $72pred = call bool72($70compare_op.2, func=bool72, args=(Var($70compare_op.2, npyimpl.py:221),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:37:59,082 on stmt: branch $72pred, 74, 102
DEBUG 2022-02-14 16:37:59,082 ==== SSA block rewrite pass on 74
DEBUG 2022-02-14 16:37:59,082 Running <numba.core.ssa._FreshVarHandler object at 0x7fa04731cd00>
DEBUG 2022-02-14 16:37:59,082 on stmt: $const76.1 = const(int, 1)
DEBUG 2022-02-14 16:37:59,082 on stmt: $78binary_add.2 = dest_index + $const76.1
DEBUG 2022-02-14 16:37:59,082 on stmt: $80unary_negative.3 = unary(fn=<built-in function neg>, value=$78binary_add.2)
DEBUG 2022-02-14 16:37:59,082 on stmt: $82return_value.4 = cast(value=$80unary_negative.3)
DEBUG 2022-02-14 16:37:59,082 on stmt: return $82return_value.4
DEBUG 2022-02-14 16:37:59,082 ==== SSA block rewrite pass on 86
DEBUG 2022-02-14 16:37:59,083 Running <numba.core.ssa._FreshVarHandler object at 0x7fa04731cd00>
DEBUG 2022-02-14 16:37:59,083 on stmt: $const88.1 = const(int, 1)
DEBUG 2022-02-14 16:37:59,083 on stmt: $90compare_op.2 = src_dim_size != $const88.1
DEBUG 2022-02-14 16:37:59,083 on stmt: bool92 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:37:59,083 on stmt: $92pred = call bool92($90compare_op.2, func=bool92, args=(Var($90compare_op.2, npyimpl.py:223),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:37:59,083 on stmt: branch $92pred, 94, 102
DEBUG 2022-02-14 16:37:59,083 ==== SSA block rewrite pass on 94
DEBUG 2022-02-14 16:37:59,083 Running <numba.core.ssa._FreshVarHandler object at 0x7fa04731cd00>
DEBUG 2022-02-14 16:37:59,083 on stmt: dest_shape[dest_index] = src_dim_size
DEBUG 2022-02-14 16:37:59,083 on stmt: jump 102
DEBUG 2022-02-14 16:37:59,083 ==== SSA block rewrite pass on 102
DEBUG 2022-02-14 16:37:59,084 Running <numba.core.ssa._FreshVarHandler object at 0x7fa04731cd00>
DEBUG 2022-02-14 16:37:59,084 on stmt: $const104.1 = const(int, 1)
DEBUG 2022-02-14 16:37:59,084 on stmt: $106inplace_add.2 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=src_index.2, rhs=$const104.1, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:37:59,084 on stmt: src_index.1 = $106inplace_add.2
DEBUG 2022-02-14 16:37:59,084 on stmt: $const112.4 = const(int, 1)
DEBUG 2022-02-14 16:37:59,084 on stmt: $114inplace_add.5 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=dest_index, rhs=$const112.4, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:37:59,084 on stmt: dest_index = $114inplace_add.5
DEBUG 2022-02-14 16:37:59,084 replaced with: dest_index.1 = $114inplace_add.5
DEBUG 2022-02-14 16:37:59,084 on stmt: jump 26
DEBUG 2022-02-14 16:37:59,084 ==== SSA block rewrite pass on 120
DEBUG 2022-02-14 16:37:59,084 Running <numba.core.ssa._FreshVarHandler object at 0x7fa04731cd00>
DEBUG 2022-02-14 16:37:59,085 on stmt: $122return_value.1 = cast(value=dest_index)
DEBUG 2022-02-14 16:37:59,085 on stmt: return $122return_value.1
DEBUG 2022-02-14 16:37:59,085 Replaced assignments: defaultdict(<class 'list'>,
            {14: [<numba.core.ir.Assign object at 0x7fa0474275e0>],
             102: [<numba.core.ir.Assign object at 0x7fa047317a90>]})
DEBUG 2022-02-14 16:37:59,085 ==== SSA block rewrite pass on 0
DEBUG 2022-02-14 16:37:59,085 Running <numba.core.ssa._FixSSAVars object at 0x7fa047427bb0>
DEBUG 2022-02-14 16:37:59,085 on stmt: src_ndim = arg(0, name=src_ndim)
DEBUG 2022-02-14 16:37:59,085 on stmt: src_shape = arg(1, name=src_shape)
DEBUG 2022-02-14 16:37:59,085 on stmt: dest_ndim = arg(2, name=dest_ndim)
DEBUG 2022-02-14 16:37:59,085 on stmt: dest_shape = arg(3, name=dest_shape)
DEBUG 2022-02-14 16:37:59,085 on stmt: $6compare_op.2 = src_ndim > dest_ndim
DEBUG 2022-02-14 16:37:59,085 on stmt: bool8 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:37:59,085 on stmt: $8pred = call bool8($6compare_op.2, func=bool8, args=(Var($6compare_op.2, npyimpl.py:205),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:37:59,085 on stmt: branch $8pred, 10, 14
DEBUG 2022-02-14 16:37:59,085 ==== SSA block rewrite pass on 10
DEBUG 2022-02-14 16:37:59,085 Running <numba.core.ssa._FixSSAVars object at 0x7fa047427bb0>
DEBUG 2022-02-14 16:37:59,086 on stmt: $const10.0 = const(int, 0)
DEBUG 2022-02-14 16:37:59,086 on stmt: $12return_value.1 = cast(value=$const10.0)
DEBUG 2022-02-14 16:37:59,086 on stmt: return $12return_value.1
DEBUG 2022-02-14 16:37:59,086 ==== SSA block rewrite pass on 14
DEBUG 2022-02-14 16:37:59,086 Running <numba.core.ssa._FixSSAVars object at 0x7fa047427bb0>
DEBUG 2022-02-14 16:37:59,086 on stmt: src_index = const(int, 0)
DEBUG 2022-02-14 16:37:59,086 on stmt: dest_index = dest_ndim - src_ndim
DEBUG 2022-02-14 16:37:59,086 on stmt: jump 26
DEBUG 2022-02-14 16:37:59,086 ==== SSA block rewrite pass on 26
DEBUG 2022-02-14 16:37:59,086 Running <numba.core.ssa._FixSSAVars object at 0x7fa047427bb0>
DEBUG 2022-02-14 16:37:59,086 on stmt: src_index.2 = phi(incoming_values=[Var(src_index.1, npyimpl.py:226), Var(src_index, npyimpl.py:210)], incoming_blocks=[102, 14])
DEBUG 2022-02-14 16:37:59,086 on stmt: $30compare_op.2 = src_index.2 < src_ndim
DEBUG 2022-02-14 16:37:59,086 on stmt: bool32 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:37:59,086 on stmt: $32pred = call bool32($30compare_op.2, func=bool32, args=(Var($30compare_op.2, npyimpl.py:212),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:37:59,086 on stmt: branch $32pred, 34, 120
DEBUG 2022-02-14 16:37:59,087 ==== SSA block rewrite pass on 34
DEBUG 2022-02-14 16:37:59,087 Running <numba.core.ssa._FixSSAVars object at 0x7fa047427bb0>
DEBUG 2022-02-14 16:37:59,087 on stmt: src_dim_size = getitem(value=src_shape, index=src_index.2, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:37:59,087 on stmt: dest_dim_size = getitem(value=dest_shape, index=dest_index, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:37:59,087 find_def var='dest_index' stmt=dest_dim_size = getitem(value=dest_shape, index=dest_index, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:37:59,087 find_def_from_top label 34
DEBUG 2022-02-14 16:37:59,087 idom 26 from label 34
DEBUG 2022-02-14 16:37:59,087 find_def_from_bottom label 26
DEBUG 2022-02-14 16:37:59,087 find_def_from_top label 26
DEBUG 2022-02-14 16:37:59,087 insert phi node dest_index.2 = phi(incoming_values=[], incoming_blocks=[]) at 26
DEBUG 2022-02-14 16:37:59,087 find_def_from_bottom label 102
DEBUG 2022-02-14 16:37:59,087 incoming_def dest_index.1 = $114inplace_add.5
DEBUG 2022-02-14 16:37:59,087 find_def_from_bottom label 14
DEBUG 2022-02-14 16:37:59,087 incoming_def dest_index = dest_ndim - src_ndim
DEBUG 2022-02-14 16:37:59,087 replaced with: dest_dim_size = getitem(value=dest_shape, index=dest_index.2, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:37:59,087 on stmt: $const52.7 = const(int, 1)
DEBUG 2022-02-14 16:37:59,087 on stmt: $54compare_op.8 = dest_dim_size != $const52.7
DEBUG 2022-02-14 16:37:59,088 on stmt: bool56 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:37:59,088 on stmt: $56pred = call bool56($54compare_op.8, func=bool56, args=(Var($54compare_op.8, npyimpl.py:217),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:37:59,088 on stmt: branch $56pred, 58, 86
DEBUG 2022-02-14 16:37:59,088 ==== SSA block rewrite pass on 58
DEBUG 2022-02-14 16:37:59,088 Running <numba.core.ssa._FixSSAVars object at 0x7fa047427bb0>
DEBUG 2022-02-14 16:37:59,088 on stmt: $62compare_op.2 = src_dim_size != dest_dim_size
DEBUG 2022-02-14 16:37:59,088 on stmt: bool64 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:37:59,088 on stmt: $64pred = call bool64($62compare_op.2, func=bool64, args=(Var($62compare_op.2, npyimpl.py:221),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:37:59,088 on stmt: branch $64pred, 66, 102
DEBUG 2022-02-14 16:37:59,088 ==== SSA block rewrite pass on 66
DEBUG 2022-02-14 16:37:59,089 Running <numba.core.ssa._FixSSAVars object at 0x7fa047427bb0>
DEBUG 2022-02-14 16:37:59,089 on stmt: $const68.1 = const(int, 1)
DEBUG 2022-02-14 16:37:59,089 on stmt: $70compare_op.2 = src_dim_size != $const68.1
DEBUG 2022-02-14 16:37:59,089 on stmt: bool72 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:37:59,089 on stmt: $72pred = call bool72($70compare_op.2, func=bool72, args=(Var($70compare_op.2, npyimpl.py:221),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:37:59,089 on stmt: branch $72pred, 74, 102
DEBUG 2022-02-14 16:37:59,089 ==== SSA block rewrite pass on 74
DEBUG 2022-02-14 16:37:59,089 Running <numba.core.ssa._FixSSAVars object at 0x7fa047427bb0>
DEBUG 2022-02-14 16:37:59,089 on stmt: $const76.1 = const(int, 1)
DEBUG 2022-02-14 16:37:59,089 on stmt: $78binary_add.2 = dest_index + $const76.1
DEBUG 2022-02-14 16:37:59,090 find_def var='dest_index' stmt=$78binary_add.2 = dest_index + $const76.1
DEBUG 2022-02-14 16:37:59,090 find_def_from_top label 74
DEBUG 2022-02-14 16:37:59,090 idom 66 from label 74
DEBUG 2022-02-14 16:37:59,090 find_def_from_bottom label 66
DEBUG 2022-02-14 16:37:59,090 find_def_from_top label 66
DEBUG 2022-02-14 16:37:59,090 idom 58 from label 66
DEBUG 2022-02-14 16:37:59,090 find_def_from_bottom label 58
DEBUG 2022-02-14 16:37:59,090 find_def_from_top label 58
DEBUG 2022-02-14 16:37:59,090 idom 34 from label 58
DEBUG 2022-02-14 16:37:59,090 find_def_from_bottom label 34
DEBUG 2022-02-14 16:37:59,091 find_def_from_top label 34
DEBUG 2022-02-14 16:37:59,091 idom 26 from label 34
DEBUG 2022-02-14 16:37:59,091 find_def_from_bottom label 26
DEBUG 2022-02-14 16:37:59,091 replaced with: $78binary_add.2 = dest_index.2 + $const76.1
DEBUG 2022-02-14 16:37:59,091 on stmt: $80unary_negative.3 = unary(fn=<built-in function neg>, value=$78binary_add.2)
DEBUG 2022-02-14 16:37:59,091 on stmt: $82return_value.4 = cast(value=$80unary_negative.3)
DEBUG 2022-02-14 16:37:59,091 on stmt: return $82return_value.4
DEBUG 2022-02-14 16:37:59,091 ==== SSA block rewrite pass on 86
DEBUG 2022-02-14 16:37:59,091 Running <numba.core.ssa._FixSSAVars object at 0x7fa047427bb0>
DEBUG 2022-02-14 16:37:59,091 on stmt: $const88.1 = const(int, 1)
DEBUG 2022-02-14 16:37:59,091 on stmt: $90compare_op.2 = src_dim_size != $const88.1
DEBUG 2022-02-14 16:37:59,092 on stmt: bool92 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:37:59,092 on stmt: $92pred = call bool92($90compare_op.2, func=bool92, args=(Var($90compare_op.2, npyimpl.py:223),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:37:59,092 on stmt: branch $92pred, 94, 102
DEBUG 2022-02-14 16:37:59,092 ==== SSA block rewrite pass on 94
DEBUG 2022-02-14 16:37:59,092 Running <numba.core.ssa._FixSSAVars object at 0x7fa047427bb0>
DEBUG 2022-02-14 16:37:59,092 on stmt: dest_shape[dest_index] = src_dim_size
DEBUG 2022-02-14 16:37:59,092 find_def var='dest_index' stmt=dest_shape[dest_index] = src_dim_size
DEBUG 2022-02-14 16:37:59,092 find_def_from_top label 94
DEBUG 2022-02-14 16:37:59,092 idom 86 from label 94
DEBUG 2022-02-14 16:37:59,092 find_def_from_bottom label 86
DEBUG 2022-02-14 16:37:59,092 find_def_from_top label 86
DEBUG 2022-02-14 16:37:59,092 idom 34 from label 86
DEBUG 2022-02-14 16:37:59,092 find_def_from_bottom label 34
DEBUG 2022-02-14 16:37:59,092 find_def_from_top label 34
DEBUG 2022-02-14 16:37:59,092 idom 26 from label 34
DEBUG 2022-02-14 16:37:59,092 find_def_from_bottom label 26
DEBUG 2022-02-14 16:37:59,093 replaced with: dest_shape[dest_index.2] = src_dim_size
DEBUG 2022-02-14 16:37:59,093 on stmt: jump 102
DEBUG 2022-02-14 16:37:59,093 ==== SSA block rewrite pass on 102
DEBUG 2022-02-14 16:37:59,093 Running <numba.core.ssa._FixSSAVars object at 0x7fa047427bb0>
DEBUG 2022-02-14 16:37:59,093 on stmt: $const104.1 = const(int, 1)
DEBUG 2022-02-14 16:37:59,093 on stmt: $106inplace_add.2 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=src_index.2, rhs=$const104.1, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:37:59,093 on stmt: src_index.1 = $106inplace_add.2
DEBUG 2022-02-14 16:37:59,093 on stmt: $const112.4 = const(int, 1)
DEBUG 2022-02-14 16:37:59,093 on stmt: $114inplace_add.5 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=dest_index, rhs=$const112.4, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:37:59,093 find_def var='dest_index' stmt=$114inplace_add.5 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=dest_index, rhs=$const112.4, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:37:59,093 find_def_from_top label 102
DEBUG 2022-02-14 16:37:59,094 idom 34 from label 102
DEBUG 2022-02-14 16:37:59,094 find_def_from_bottom label 34
DEBUG 2022-02-14 16:37:59,094 find_def_from_top label 34
DEBUG 2022-02-14 16:37:59,094 idom 26 from label 34
DEBUG 2022-02-14 16:37:59,094 find_def_from_bottom label 26
DEBUG 2022-02-14 16:37:59,094 replaced with: $114inplace_add.5 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=dest_index.2, rhs=$const112.4, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:37:59,094 on stmt: dest_index.1 = $114inplace_add.5
DEBUG 2022-02-14 16:37:59,094 on stmt: jump 26
DEBUG 2022-02-14 16:37:59,094 ==== SSA block rewrite pass on 120
DEBUG 2022-02-14 16:37:59,094 Running <numba.core.ssa._FixSSAVars object at 0x7fa047427bb0>
DEBUG 2022-02-14 16:37:59,094 on stmt: $122return_value.1 = cast(value=dest_index)
DEBUG 2022-02-14 16:37:59,095 find_def var='dest_index' stmt=$122return_value.1 = cast(value=dest_index)
DEBUG 2022-02-14 16:37:59,095 find_def_from_top label 120
DEBUG 2022-02-14 16:37:59,095 idom 26 from label 120
DEBUG 2022-02-14 16:37:59,095 find_def_from_bottom label 26
DEBUG 2022-02-14 16:37:59,095 replaced with: $122return_value.1 = cast(value=dest_index.2)
DEBUG 2022-02-14 16:37:59,095 on stmt: return $122return_value.1
DEBUG 2022-02-14 16:37:59,369 bytecode dump:
>          0	NOP(arg=None, lineno=187)
           2	LOAD_GLOBAL(arg=0, lineno=187)
           4	LOAD_METHOD(arg=1, lineno=187)
           6	LOAD_FAST(arg=0, lineno=187)
           8	LOAD_FAST(arg=0, lineno=187)
          10	BUILD_TUPLE(arg=2, lineno=187)
          12	CALL_METHOD(arg=1, lineno=187)
          14	STORE_FAST(arg=4, lineno=187)
          16	LOAD_GLOBAL(arg=0, lineno=188)
          18	LOAD_METHOD(arg=2, lineno=188)
          20	LOAD_FAST(arg=4, lineno=188)
          22	LOAD_CONST(arg=1, lineno=188)
          24	COMPARE_OP(arg=3, lineno=188)
          26	CALL_METHOD(arg=1, lineno=188)
          28	LOAD_CONST(arg=1, lineno=188)
          30	BINARY_SUBSCR(arg=None, lineno=188)
          32	STORE_FAST(arg=5, lineno=188)
          34	LOAD_GLOBAL(arg=3, lineno=189)
          36	LOAD_FAST(arg=5, lineno=189)
          38	CALL_FUNCTION(arg=1, lineno=189)
          40	LOAD_CONST(arg=2, lineno=189)
          42	BINARY_FLOOR_DIVIDE(arg=None, lineno=189)
          44	STORE_FAST(arg=6, lineno=189)
          46	LOAD_FAST(arg=0, lineno=191)
          48	LOAD_GLOBAL(arg=0, lineno=191)
          50	LOAD_METHOD(arg=2, lineno=191)
          52	LOAD_FAST(arg=0, lineno=191)
          54	LOAD_CONST(arg=1, lineno=191)
          56	COMPARE_OP(arg=3, lineno=191)
          58	CALL_METHOD(arg=1, lineno=191)
          60	BINARY_SUBSCR(arg=None, lineno=191)
          62	STORE_FAST(arg=7, lineno=191)
          64	LOAD_GLOBAL(arg=4, lineno=193)
          66	LOAD_FAST(arg=1, lineno=193)
          68	LOAD_FAST(arg=5, lineno=193)
          70	LOAD_FAST(arg=5, lineno=193)
          72	CALL_FUNCTION(arg=3, lineno=193)
          74	STORE_FAST(arg=8, lineno=193)
          76	LOAD_GLOBAL(arg=0, lineno=195)
          78	LOAD_ATTR(arg=5, lineno=195)
          80	LOAD_FAST(arg=8, lineno=195)
          82	LOAD_GLOBAL(arg=0, lineno=195)
          84	LOAD_ATTR(arg=6, lineno=195)
          86	LOAD_CONST(arg=3, lineno=195)
          88	CALL_FUNCTION_KW(arg=2, lineno=195)
          90	STORE_FAST(arg=9, lineno=195)
          92	LOAD_FAST(arg=7, lineno=196)
          94	LOAD_FAST(arg=8, lineno=196)
          96	LOAD_CONST(arg=0, lineno=196)
          98	LOAD_CONST(arg=0, lineno=196)
         100	BUILD_SLICE(arg=2, lineno=196)
         102	LOAD_FAST(arg=6, lineno=196)
         104	LOAD_CONST(arg=0, lineno=196)
         106	BUILD_SLICE(arg=2, lineno=196)
         108	BUILD_TUPLE(arg=2, lineno=196)
         110	BINARY_SUBSCR(arg=None, lineno=196)
         112	BINARY_MULTIPLY(arg=None, lineno=196)
         114	LOAD_FAST(arg=9, lineno=196)
         116	LOAD_CONST(arg=0, lineno=196)
         118	LOAD_CONST(arg=0, lineno=196)
         120	BUILD_SLICE(arg=2, lineno=196)
         122	LOAD_CONST(arg=0, lineno=196)
         124	LOAD_FAST(arg=6, lineno=196)
         126	BUILD_SLICE(arg=2, lineno=196)
         128	BUILD_TUPLE(arg=2, lineno=196)
         130	STORE_SUBSCR(arg=None, lineno=196)
         132	LOAD_FAST(arg=7, lineno=197)
         134	LOAD_FAST(arg=8, lineno=197)
         136	LOAD_CONST(arg=0, lineno=197)
         138	LOAD_CONST(arg=0, lineno=197)
         140	BUILD_SLICE(arg=2, lineno=197)
         142	LOAD_CONST(arg=0, lineno=197)
         144	LOAD_FAST(arg=6, lineno=197)
         146	BUILD_SLICE(arg=2, lineno=197)
         148	BUILD_TUPLE(arg=2, lineno=197)
         150	BINARY_SUBSCR(arg=None, lineno=197)
         152	BINARY_MULTIPLY(arg=None, lineno=197)
         154	LOAD_FAST(arg=9, lineno=197)
         156	LOAD_CONST(arg=0, lineno=197)
         158	LOAD_CONST(arg=0, lineno=197)
         160	BUILD_SLICE(arg=2, lineno=197)
         162	LOAD_FAST(arg=6, lineno=197)
         164	LOAD_CONST(arg=0, lineno=197)
         166	BUILD_SLICE(arg=2, lineno=197)
         168	BUILD_TUPLE(arg=2, lineno=197)
         170	STORE_SUBSCR(arg=None, lineno=197)
         172	LOAD_FAST(arg=2, lineno=199)
         174	LOAD_FAST(arg=5, lineno=199)
         176	BINARY_SUBSCR(arg=None, lineno=199)
         178	STORE_FAST(arg=10, lineno=199)
         180	LOAD_GLOBAL(arg=0, lineno=201)
         182	LOAD_ATTR(arg=5, lineno=201)
         184	LOAD_FAST(arg=10, lineno=201)
         186	LOAD_GLOBAL(arg=0, lineno=201)
         188	LOAD_ATTR(arg=6, lineno=201)
         190	LOAD_CONST(arg=3, lineno=201)
         192	CALL_FUNCTION_KW(arg=2, lineno=201)
         194	STORE_FAST(arg=11, lineno=201)
         196	LOAD_FAST(arg=7, lineno=202)
         198	LOAD_FAST(arg=10, lineno=202)
         200	LOAD_FAST(arg=6, lineno=202)
         202	LOAD_CONST(arg=0, lineno=202)
         204	BUILD_SLICE(arg=2, lineno=202)
         206	BINARY_SUBSCR(arg=None, lineno=202)
         208	BINARY_MULTIPLY(arg=None, lineno=202)
         210	LOAD_FAST(arg=11, lineno=202)
         212	LOAD_CONST(arg=0, lineno=202)
         214	LOAD_FAST(arg=6, lineno=202)
         216	BUILD_SLICE(arg=2, lineno=202)
         218	STORE_SUBSCR(arg=None, lineno=202)
         220	LOAD_FAST(arg=7, lineno=203)
         222	LOAD_FAST(arg=10, lineno=203)
         224	LOAD_CONST(arg=0, lineno=203)
         226	LOAD_FAST(arg=6, lineno=203)
         228	BUILD_SLICE(arg=2, lineno=203)
         230	BINARY_SUBSCR(arg=None, lineno=203)
         232	BINARY_MULTIPLY(arg=None, lineno=203)
         234	LOAD_FAST(arg=11, lineno=203)
         236	LOAD_FAST(arg=6, lineno=203)
         238	LOAD_CONST(arg=0, lineno=203)
         240	BUILD_SLICE(arg=2, lineno=203)
         242	STORE_SUBSCR(arg=None, lineno=203)
         244	LOAD_FAST(arg=3, lineno=205)
         246	LOAD_CONST(arg=0, lineno=205)
         248	IS_OP(arg=1, lineno=205)
         250	POP_JUMP_IF_FALSE(arg=328, lineno=205)
         254	LOAD_FAST(arg=3, lineno=206)
         256	LOAD_FAST(arg=5, lineno=206)
         258	BINARY_SUBSCR(arg=None, lineno=206)
         260	STORE_FAST(arg=12, lineno=206)
         262	LOAD_GLOBAL(arg=0, lineno=207)
         264	LOAD_ATTR(arg=5, lineno=207)
         266	LOAD_FAST(arg=12, lineno=207)
         268	LOAD_GLOBAL(arg=0, lineno=207)
         270	LOAD_ATTR(arg=6, lineno=207)
         272	LOAD_CONST(arg=3, lineno=207)
         274	CALL_FUNCTION_KW(arg=2, lineno=207)
         276	STORE_FAST(arg=13, lineno=207)
         278	LOAD_FAST(arg=7, lineno=208)
         280	LOAD_FAST(arg=12, lineno=208)
         282	LOAD_FAST(arg=6, lineno=208)
         284	LOAD_CONST(arg=0, lineno=208)
         286	BUILD_SLICE(arg=2, lineno=208)
         288	BINARY_SUBSCR(arg=None, lineno=208)
         290	BINARY_MULTIPLY(arg=None, lineno=208)
         292	LOAD_FAST(arg=13, lineno=208)
         294	LOAD_CONST(arg=0, lineno=208)
         296	LOAD_FAST(arg=6, lineno=208)
         298	BUILD_SLICE(arg=2, lineno=208)
         300	STORE_SUBSCR(arg=None, lineno=208)
         302	LOAD_FAST(arg=7, lineno=209)
         304	LOAD_FAST(arg=12, lineno=209)
         306	LOAD_CONST(arg=0, lineno=209)
         308	LOAD_FAST(arg=6, lineno=209)
         310	BUILD_SLICE(arg=2, lineno=209)
         312	BINARY_SUBSCR(arg=None, lineno=209)
         314	BINARY_MULTIPLY(arg=None, lineno=209)
         316	LOAD_FAST(arg=13, lineno=209)
         318	LOAD_FAST(arg=6, lineno=209)
         320	LOAD_CONST(arg=0, lineno=209)
         322	BUILD_SLICE(arg=2, lineno=209)
         324	STORE_SUBSCR(arg=None, lineno=209)
         326	JUMP_FORWARD(arg=4, lineno=209)
>        328	LOAD_CONST(arg=0, lineno=211)
         330	STORE_FAST(arg=13, lineno=211)
>        332	LOAD_FAST(arg=9, lineno=213)
         334	LOAD_FAST(arg=11, lineno=213)
         336	LOAD_FAST(arg=10, lineno=213)
         338	LOAD_FAST(arg=13, lineno=213)
         340	BUILD_TUPLE(arg=4, lineno=213)
         342	RETURN_VALUE(arg=None, lineno=213)
DEBUG 2022-02-14 16:37:59,369 pending: deque([State(pc_initial=0 nstack_initial=0)])
DEBUG 2022-02-14 16:37:59,369 stack: []
DEBUG 2022-02-14 16:37:59,369 dispatch pc=0, inst=NOP(arg=None, lineno=187)
DEBUG 2022-02-14 16:37:59,369 stack []
DEBUG 2022-02-14 16:37:59,369 dispatch pc=2, inst=LOAD_GLOBAL(arg=0, lineno=187)
DEBUG 2022-02-14 16:37:59,370 stack []
DEBUG 2022-02-14 16:37:59,370 dispatch pc=4, inst=LOAD_METHOD(arg=1, lineno=187)
DEBUG 2022-02-14 16:37:59,370 stack ['$2load_global.0']
DEBUG 2022-02-14 16:37:59,370 dispatch pc=6, inst=LOAD_FAST(arg=0, lineno=187)
DEBUG 2022-02-14 16:37:59,370 stack ['$4load_method.1']
DEBUG 2022-02-14 16:37:59,370 dispatch pc=8, inst=LOAD_FAST(arg=0, lineno=187)
DEBUG 2022-02-14 16:37:59,370 stack ['$4load_method.1', '$kept_edges6.2']
DEBUG 2022-02-14 16:37:59,370 dispatch pc=10, inst=BUILD_TUPLE(arg=2, lineno=187)
DEBUG 2022-02-14 16:37:59,370 stack ['$4load_method.1', '$kept_edges6.2', '$kept_edges8.3']
DEBUG 2022-02-14 16:37:59,370 dispatch pc=12, inst=CALL_METHOD(arg=1, lineno=187)
DEBUG 2022-02-14 16:37:59,370 stack ['$4load_method.1', '$10build_tuple.4']
DEBUG 2022-02-14 16:37:59,370 dispatch pc=14, inst=STORE_FAST(arg=4, lineno=187)
DEBUG 2022-02-14 16:37:59,370 stack ['$12call_method.5']
DEBUG 2022-02-14 16:37:59,371 dispatch pc=16, inst=LOAD_GLOBAL(arg=0, lineno=188)
DEBUG 2022-02-14 16:37:59,371 stack []
DEBUG 2022-02-14 16:37:59,371 dispatch pc=18, inst=LOAD_METHOD(arg=2, lineno=188)
DEBUG 2022-02-14 16:37:59,371 stack ['$16load_global.6']
DEBUG 2022-02-14 16:37:59,371 dispatch pc=20, inst=LOAD_FAST(arg=4, lineno=188)
DEBUG 2022-02-14 16:37:59,371 stack ['$18load_method.7']
DEBUG 2022-02-14 16:37:59,371 dispatch pc=22, inst=LOAD_CONST(arg=1, lineno=188)
DEBUG 2022-02-14 16:37:59,371 stack ['$18load_method.7', '$z20.8']
DEBUG 2022-02-14 16:37:59,371 dispatch pc=24, inst=COMPARE_OP(arg=3, lineno=188)
DEBUG 2022-02-14 16:37:59,371 stack ['$18load_method.7', '$z20.8', '$const22.9']
DEBUG 2022-02-14 16:37:59,371 dispatch pc=26, inst=CALL_METHOD(arg=1, lineno=188)
DEBUG 2022-02-14 16:37:59,371 stack ['$18load_method.7', '$24compare_op.10']
DEBUG 2022-02-14 16:37:59,371 dispatch pc=28, inst=LOAD_CONST(arg=1, lineno=188)
DEBUG 2022-02-14 16:37:59,371 stack ['$26call_method.11']
DEBUG 2022-02-14 16:37:59,372 dispatch pc=30, inst=BINARY_SUBSCR(arg=None, lineno=188)
DEBUG 2022-02-14 16:37:59,372 stack ['$26call_method.11', '$const28.12']
DEBUG 2022-02-14 16:37:59,372 dispatch pc=32, inst=STORE_FAST(arg=5, lineno=188)
DEBUG 2022-02-14 16:37:59,372 stack ['$30binary_subscr.13']
DEBUG 2022-02-14 16:37:59,372 dispatch pc=34, inst=LOAD_GLOBAL(arg=3, lineno=189)
DEBUG 2022-02-14 16:37:59,372 stack []
DEBUG 2022-02-14 16:37:59,372 dispatch pc=36, inst=LOAD_FAST(arg=5, lineno=189)
DEBUG 2022-02-14 16:37:59,372 stack ['$34load_global.14']
DEBUG 2022-02-14 16:37:59,372 dispatch pc=38, inst=CALL_FUNCTION(arg=1, lineno=189)
DEBUG 2022-02-14 16:37:59,372 stack ['$34load_global.14', '$nonzero_rows36.15']
DEBUG 2022-02-14 16:37:59,372 dispatch pc=40, inst=LOAD_CONST(arg=2, lineno=189)
DEBUG 2022-02-14 16:37:59,372 stack ['$38call_function.16']
DEBUG 2022-02-14 16:37:59,372 dispatch pc=42, inst=BINARY_FLOOR_DIVIDE(arg=None, lineno=189)
DEBUG 2022-02-14 16:37:59,372 stack ['$38call_function.16', '$const40.17']
DEBUG 2022-02-14 16:37:59,373 dispatch pc=44, inst=STORE_FAST(arg=6, lineno=189)
DEBUG 2022-02-14 16:37:59,373 stack ['$42binary_floor_divide.18']
DEBUG 2022-02-14 16:37:59,373 dispatch pc=46, inst=LOAD_FAST(arg=0, lineno=191)
DEBUG 2022-02-14 16:37:59,373 stack []
DEBUG 2022-02-14 16:37:59,373 dispatch pc=48, inst=LOAD_GLOBAL(arg=0, lineno=191)
DEBUG 2022-02-14 16:37:59,373 stack ['$kept_edges46.19']
DEBUG 2022-02-14 16:37:59,373 dispatch pc=50, inst=LOAD_METHOD(arg=2, lineno=191)
DEBUG 2022-02-14 16:37:59,373 stack ['$kept_edges46.19', '$48load_global.20']
DEBUG 2022-02-14 16:37:59,373 dispatch pc=52, inst=LOAD_FAST(arg=0, lineno=191)
DEBUG 2022-02-14 16:37:59,373 stack ['$kept_edges46.19', '$50load_method.21']
DEBUG 2022-02-14 16:37:59,373 dispatch pc=54, inst=LOAD_CONST(arg=1, lineno=191)
DEBUG 2022-02-14 16:37:59,373 stack ['$kept_edges46.19', '$50load_method.21', '$kept_edges52.22']
DEBUG 2022-02-14 16:37:59,373 dispatch pc=56, inst=COMPARE_OP(arg=3, lineno=191)
DEBUG 2022-02-14 16:37:59,373 stack ['$kept_edges46.19', '$50load_method.21', '$kept_edges52.22', '$const54.23']
DEBUG 2022-02-14 16:37:59,374 dispatch pc=58, inst=CALL_METHOD(arg=1, lineno=191)
DEBUG 2022-02-14 16:37:59,374 stack ['$kept_edges46.19', '$50load_method.21', '$56compare_op.24']
DEBUG 2022-02-14 16:37:59,374 dispatch pc=60, inst=BINARY_SUBSCR(arg=None, lineno=191)
DEBUG 2022-02-14 16:37:59,374 stack ['$kept_edges46.19', '$58call_method.25']
DEBUG 2022-02-14 16:37:59,374 dispatch pc=62, inst=STORE_FAST(arg=7, lineno=191)
DEBUG 2022-02-14 16:37:59,374 stack ['$60binary_subscr.26']
DEBUG 2022-02-14 16:37:59,374 dispatch pc=64, inst=LOAD_GLOBAL(arg=4, lineno=193)
DEBUG 2022-02-14 16:37:59,374 stack []
DEBUG 2022-02-14 16:37:59,374 dispatch pc=66, inst=LOAD_FAST(arg=1, lineno=193)
DEBUG 2022-02-14 16:37:59,374 stack ['$64load_global.27']
DEBUG 2022-02-14 16:37:59,374 dispatch pc=68, inst=LOAD_FAST(arg=5, lineno=193)
DEBUG 2022-02-14 16:37:59,374 stack ['$64load_global.27', '$A66.28']
DEBUG 2022-02-14 16:37:59,374 dispatch pc=70, inst=LOAD_FAST(arg=5, lineno=193)
DEBUG 2022-02-14 16:37:59,374 stack ['$64load_global.27', '$A66.28', '$nonzero_rows68.29']
DEBUG 2022-02-14 16:37:59,374 dispatch pc=72, inst=CALL_FUNCTION(arg=3, lineno=193)
DEBUG 2022-02-14 16:37:59,374 stack ['$64load_global.27', '$A66.28', '$nonzero_rows68.29', '$nonzero_rows70.30']
DEBUG 2022-02-14 16:37:59,374 dispatch pc=74, inst=STORE_FAST(arg=8, lineno=193)
DEBUG 2022-02-14 16:37:59,374 stack ['$72call_function.31']
DEBUG 2022-02-14 16:37:59,374 dispatch pc=76, inst=LOAD_GLOBAL(arg=0, lineno=195)
DEBUG 2022-02-14 16:37:59,374 stack []
DEBUG 2022-02-14 16:37:59,374 dispatch pc=78, inst=LOAD_ATTR(arg=5, lineno=195)
DEBUG 2022-02-14 16:37:59,374 stack ['$76load_global.32']
DEBUG 2022-02-14 16:37:59,374 dispatch pc=80, inst=LOAD_FAST(arg=8, lineno=195)
DEBUG 2022-02-14 16:37:59,374 stack ['$78load_attr.33']
DEBUG 2022-02-14 16:37:59,374 dispatch pc=82, inst=LOAD_GLOBAL(arg=0, lineno=195)
DEBUG 2022-02-14 16:37:59,375 stack ['$78load_attr.33', '$A_nonzero80.34']
DEBUG 2022-02-14 16:37:59,375 dispatch pc=84, inst=LOAD_ATTR(arg=6, lineno=195)
DEBUG 2022-02-14 16:37:59,375 stack ['$78load_attr.33', '$A_nonzero80.34', '$82load_global.35']
DEBUG 2022-02-14 16:37:59,375 dispatch pc=86, inst=LOAD_CONST(arg=3, lineno=195)
DEBUG 2022-02-14 16:37:59,375 stack ['$78load_attr.33', '$A_nonzero80.34', '$84load_attr.36']
DEBUG 2022-02-14 16:37:59,375 dispatch pc=88, inst=CALL_FUNCTION_KW(arg=2, lineno=195)
DEBUG 2022-02-14 16:37:59,375 stack ['$78load_attr.33', '$A_nonzero80.34', '$84load_attr.36', '$const86.37']
DEBUG 2022-02-14 16:37:59,375 dispatch pc=90, inst=STORE_FAST(arg=9, lineno=195)
DEBUG 2022-02-14 16:37:59,375 stack ['$88call_function_kw.38']
DEBUG 2022-02-14 16:37:59,375 dispatch pc=92, inst=LOAD_FAST(arg=7, lineno=196)
DEBUG 2022-02-14 16:37:59,375 stack []
DEBUG 2022-02-14 16:37:59,375 dispatch pc=94, inst=LOAD_FAST(arg=8, lineno=196)
DEBUG 2022-02-14 16:37:59,375 stack ['$kept_edges_nonzero92.39']
DEBUG 2022-02-14 16:37:59,375 dispatch pc=96, inst=LOAD_CONST(arg=0, lineno=196)
DEBUG 2022-02-14 16:37:59,375 stack ['$kept_edges_nonzero92.39', '$A_nonzero94.40']
DEBUG 2022-02-14 16:37:59,375 dispatch pc=98, inst=LOAD_CONST(arg=0, lineno=196)
DEBUG 2022-02-14 16:37:59,375 stack ['$kept_edges_nonzero92.39', '$A_nonzero94.40', '$const96.41']
DEBUG 2022-02-14 16:37:59,375 dispatch pc=100, inst=BUILD_SLICE(arg=2, lineno=196)
DEBUG 2022-02-14 16:37:59,375 stack ['$kept_edges_nonzero92.39', '$A_nonzero94.40', '$const96.41', '$const98.42']
DEBUG 2022-02-14 16:37:59,375 dispatch pc=102, inst=LOAD_FAST(arg=6, lineno=196)
DEBUG 2022-02-14 16:37:59,375 stack ['$kept_edges_nonzero92.39', '$A_nonzero94.40', '$100build_slice.44']
DEBUG 2022-02-14 16:37:59,375 dispatch pc=104, inst=LOAD_CONST(arg=0, lineno=196)
DEBUG 2022-02-14 16:37:59,375 stack ['$kept_edges_nonzero92.39', '$A_nonzero94.40', '$100build_slice.44', '$n_nonzero_edges102.45']
DEBUG 2022-02-14 16:37:59,375 dispatch pc=106, inst=BUILD_SLICE(arg=2, lineno=196)
DEBUG 2022-02-14 16:37:59,375 stack ['$kept_edges_nonzero92.39', '$A_nonzero94.40', '$100build_slice.44', '$n_nonzero_edges102.45', '$const104.46']
DEBUG 2022-02-14 16:37:59,375 dispatch pc=108, inst=BUILD_TUPLE(arg=2, lineno=196)
DEBUG 2022-02-14 16:37:59,376 stack ['$kept_edges_nonzero92.39', '$A_nonzero94.40', '$100build_slice.44', '$106build_slice.48']
DEBUG 2022-02-14 16:37:59,376 dispatch pc=110, inst=BINARY_SUBSCR(arg=None, lineno=196)
DEBUG 2022-02-14 16:37:59,376 stack ['$kept_edges_nonzero92.39', '$A_nonzero94.40', '$108build_tuple.49']
DEBUG 2022-02-14 16:37:59,376 dispatch pc=112, inst=BINARY_MULTIPLY(arg=None, lineno=196)
DEBUG 2022-02-14 16:37:59,376 stack ['$kept_edges_nonzero92.39', '$110binary_subscr.50']
DEBUG 2022-02-14 16:37:59,376 dispatch pc=114, inst=LOAD_FAST(arg=9, lineno=196)
DEBUG 2022-02-14 16:37:59,376 stack ['$112binary_multiply.51']
DEBUG 2022-02-14 16:37:59,376 dispatch pc=116, inst=LOAD_CONST(arg=0, lineno=196)
DEBUG 2022-02-14 16:37:59,376 stack ['$112binary_multiply.51', '$AX_nonzero114.52']
DEBUG 2022-02-14 16:37:59,376 dispatch pc=118, inst=LOAD_CONST(arg=0, lineno=196)
DEBUG 2022-02-14 16:37:59,376 stack ['$112binary_multiply.51', '$AX_nonzero114.52', '$const116.53']
DEBUG 2022-02-14 16:37:59,376 dispatch pc=120, inst=BUILD_SLICE(arg=2, lineno=196)
DEBUG 2022-02-14 16:37:59,376 stack ['$112binary_multiply.51', '$AX_nonzero114.52', '$const116.53', '$const118.54']
DEBUG 2022-02-14 16:37:59,376 dispatch pc=122, inst=LOAD_CONST(arg=0, lineno=196)
DEBUG 2022-02-14 16:37:59,376 stack ['$112binary_multiply.51', '$AX_nonzero114.52', '$120build_slice.56']
DEBUG 2022-02-14 16:37:59,376 dispatch pc=124, inst=LOAD_FAST(arg=6, lineno=196)
DEBUG 2022-02-14 16:37:59,376 stack ['$112binary_multiply.51', '$AX_nonzero114.52', '$120build_slice.56', '$const122.57']
DEBUG 2022-02-14 16:37:59,376 dispatch pc=126, inst=BUILD_SLICE(arg=2, lineno=196)
DEBUG 2022-02-14 16:37:59,376 stack ['$112binary_multiply.51', '$AX_nonzero114.52', '$120build_slice.56', '$const122.57', '$n_nonzero_edges124.58']
DEBUG 2022-02-14 16:37:59,376 dispatch pc=128, inst=BUILD_TUPLE(arg=2, lineno=196)
DEBUG 2022-02-14 16:37:59,376 stack ['$112binary_multiply.51', '$AX_nonzero114.52', '$120build_slice.56', '$126build_slice.60']
DEBUG 2022-02-14 16:37:59,376 dispatch pc=130, inst=STORE_SUBSCR(arg=None, lineno=196)
DEBUG 2022-02-14 16:37:59,376 stack ['$112binary_multiply.51', '$AX_nonzero114.52', '$128build_tuple.61']
DEBUG 2022-02-14 16:37:59,376 dispatch pc=132, inst=LOAD_FAST(arg=7, lineno=197)
DEBUG 2022-02-14 16:37:59,376 stack []
DEBUG 2022-02-14 16:37:59,377 dispatch pc=134, inst=LOAD_FAST(arg=8, lineno=197)
DEBUG 2022-02-14 16:37:59,377 stack ['$kept_edges_nonzero132.62']
DEBUG 2022-02-14 16:37:59,377 dispatch pc=136, inst=LOAD_CONST(arg=0, lineno=197)
DEBUG 2022-02-14 16:37:59,377 stack ['$kept_edges_nonzero132.62', '$A_nonzero134.63']
DEBUG 2022-02-14 16:37:59,377 dispatch pc=138, inst=LOAD_CONST(arg=0, lineno=197)
DEBUG 2022-02-14 16:37:59,377 stack ['$kept_edges_nonzero132.62', '$A_nonzero134.63', '$const136.64']
DEBUG 2022-02-14 16:37:59,377 dispatch pc=140, inst=BUILD_SLICE(arg=2, lineno=197)
DEBUG 2022-02-14 16:37:59,377 stack ['$kept_edges_nonzero132.62', '$A_nonzero134.63', '$const136.64', '$const138.65']
DEBUG 2022-02-14 16:37:59,377 dispatch pc=142, inst=LOAD_CONST(arg=0, lineno=197)
DEBUG 2022-02-14 16:37:59,377 stack ['$kept_edges_nonzero132.62', '$A_nonzero134.63', '$140build_slice.67']
DEBUG 2022-02-14 16:37:59,377 dispatch pc=144, inst=LOAD_FAST(arg=6, lineno=197)
DEBUG 2022-02-14 16:37:59,377 stack ['$kept_edges_nonzero132.62', '$A_nonzero134.63', '$140build_slice.67', '$const142.68']
DEBUG 2022-02-14 16:37:59,377 dispatch pc=146, inst=BUILD_SLICE(arg=2, lineno=197)
DEBUG 2022-02-14 16:37:59,377 stack ['$kept_edges_nonzero132.62', '$A_nonzero134.63', '$140build_slice.67', '$const142.68', '$n_nonzero_edges144.69']
DEBUG 2022-02-14 16:37:59,377 dispatch pc=148, inst=BUILD_TUPLE(arg=2, lineno=197)
DEBUG 2022-02-14 16:37:59,377 stack ['$kept_edges_nonzero132.62', '$A_nonzero134.63', '$140build_slice.67', '$146build_slice.71']
DEBUG 2022-02-14 16:37:59,377 dispatch pc=150, inst=BINARY_SUBSCR(arg=None, lineno=197)
DEBUG 2022-02-14 16:37:59,377 stack ['$kept_edges_nonzero132.62', '$A_nonzero134.63', '$148build_tuple.72']
DEBUG 2022-02-14 16:37:59,377 dispatch pc=152, inst=BINARY_MULTIPLY(arg=None, lineno=197)
DEBUG 2022-02-14 16:37:59,377 stack ['$kept_edges_nonzero132.62', '$150binary_subscr.73']
DEBUG 2022-02-14 16:37:59,377 dispatch pc=154, inst=LOAD_FAST(arg=9, lineno=197)
DEBUG 2022-02-14 16:37:59,377 stack ['$152binary_multiply.74']
DEBUG 2022-02-14 16:37:59,377 dispatch pc=156, inst=LOAD_CONST(arg=0, lineno=197)
DEBUG 2022-02-14 16:37:59,377 stack ['$152binary_multiply.74', '$AX_nonzero154.75']
DEBUG 2022-02-14 16:37:59,377 dispatch pc=158, inst=LOAD_CONST(arg=0, lineno=197)
DEBUG 2022-02-14 16:37:59,377 stack ['$152binary_multiply.74', '$AX_nonzero154.75', '$const156.76']
DEBUG 2022-02-14 16:37:59,378 dispatch pc=160, inst=BUILD_SLICE(arg=2, lineno=197)
DEBUG 2022-02-14 16:37:59,378 stack ['$152binary_multiply.74', '$AX_nonzero154.75', '$const156.76', '$const158.77']
DEBUG 2022-02-14 16:37:59,378 dispatch pc=162, inst=LOAD_FAST(arg=6, lineno=197)
DEBUG 2022-02-14 16:37:59,378 stack ['$152binary_multiply.74', '$AX_nonzero154.75', '$160build_slice.79']
DEBUG 2022-02-14 16:37:59,378 dispatch pc=164, inst=LOAD_CONST(arg=0, lineno=197)
DEBUG 2022-02-14 16:37:59,378 stack ['$152binary_multiply.74', '$AX_nonzero154.75', '$160build_slice.79', '$n_nonzero_edges162.80']
DEBUG 2022-02-14 16:37:59,378 dispatch pc=166, inst=BUILD_SLICE(arg=2, lineno=197)
DEBUG 2022-02-14 16:37:59,378 stack ['$152binary_multiply.74', '$AX_nonzero154.75', '$160build_slice.79', '$n_nonzero_edges162.80', '$const164.81']
DEBUG 2022-02-14 16:37:59,378 dispatch pc=168, inst=BUILD_TUPLE(arg=2, lineno=197)
DEBUG 2022-02-14 16:37:59,378 stack ['$152binary_multiply.74', '$AX_nonzero154.75', '$160build_slice.79', '$166build_slice.83']
DEBUG 2022-02-14 16:37:59,378 dispatch pc=170, inst=STORE_SUBSCR(arg=None, lineno=197)
DEBUG 2022-02-14 16:37:59,378 stack ['$152binary_multiply.74', '$AX_nonzero154.75', '$168build_tuple.84']
DEBUG 2022-02-14 16:37:59,378 dispatch pc=172, inst=LOAD_FAST(arg=2, lineno=199)
DEBUG 2022-02-14 16:37:59,378 stack []
DEBUG 2022-02-14 16:37:59,378 dispatch pc=174, inst=LOAD_FAST(arg=5, lineno=199)
DEBUG 2022-02-14 16:37:59,378 stack ['$D172.85']
DEBUG 2022-02-14 16:37:59,378 dispatch pc=176, inst=BINARY_SUBSCR(arg=None, lineno=199)
DEBUG 2022-02-14 16:37:59,378 stack ['$D172.85', '$nonzero_rows174.86']
DEBUG 2022-02-14 16:37:59,378 dispatch pc=178, inst=STORE_FAST(arg=10, lineno=199)
DEBUG 2022-02-14 16:37:59,378 stack ['$176binary_subscr.87']
DEBUG 2022-02-14 16:37:59,378 dispatch pc=180, inst=LOAD_GLOBAL(arg=0, lineno=201)
DEBUG 2022-02-14 16:37:59,378 stack []
DEBUG 2022-02-14 16:37:59,379 dispatch pc=182, inst=LOAD_ATTR(arg=5, lineno=201)
DEBUG 2022-02-14 16:37:59,379 stack ['$180load_global.88']
DEBUG 2022-02-14 16:37:59,379 dispatch pc=184, inst=LOAD_FAST(arg=10, lineno=201)
DEBUG 2022-02-14 16:37:59,379 stack ['$182load_attr.89']
DEBUG 2022-02-14 16:37:59,379 dispatch pc=186, inst=LOAD_GLOBAL(arg=0, lineno=201)
DEBUG 2022-02-14 16:37:59,379 stack ['$182load_attr.89', '$D_nonzero184.90']
DEBUG 2022-02-14 16:37:59,379 dispatch pc=188, inst=LOAD_ATTR(arg=6, lineno=201)
DEBUG 2022-02-14 16:37:59,379 stack ['$182load_attr.89', '$D_nonzero184.90', '$186load_global.91']
DEBUG 2022-02-14 16:37:59,379 dispatch pc=190, inst=LOAD_CONST(arg=3, lineno=201)
DEBUG 2022-02-14 16:37:59,379 stack ['$182load_attr.89', '$D_nonzero184.90', '$188load_attr.92']
DEBUG 2022-02-14 16:37:59,379 dispatch pc=192, inst=CALL_FUNCTION_KW(arg=2, lineno=201)
DEBUG 2022-02-14 16:37:59,379 stack ['$182load_attr.89', '$D_nonzero184.90', '$188load_attr.92', '$const190.93']
DEBUG 2022-02-14 16:37:59,379 dispatch pc=194, inst=STORE_FAST(arg=11, lineno=201)
DEBUG 2022-02-14 16:37:59,379 stack ['$192call_function_kw.94']
DEBUG 2022-02-14 16:37:59,379 dispatch pc=196, inst=LOAD_FAST(arg=7, lineno=202)
DEBUG 2022-02-14 16:37:59,379 stack []
DEBUG 2022-02-14 16:37:59,379 dispatch pc=198, inst=LOAD_FAST(arg=10, lineno=202)
DEBUG 2022-02-14 16:37:59,379 stack ['$kept_edges_nonzero196.95']
DEBUG 2022-02-14 16:37:59,379 dispatch pc=200, inst=LOAD_FAST(arg=6, lineno=202)
DEBUG 2022-02-14 16:37:59,379 stack ['$kept_edges_nonzero196.95', '$D_nonzero198.96']
DEBUG 2022-02-14 16:37:59,379 dispatch pc=202, inst=LOAD_CONST(arg=0, lineno=202)
DEBUG 2022-02-14 16:37:59,379 stack ['$kept_edges_nonzero196.95', '$D_nonzero198.96', '$n_nonzero_edges200.97']
DEBUG 2022-02-14 16:37:59,379 dispatch pc=204, inst=BUILD_SLICE(arg=2, lineno=202)
DEBUG 2022-02-14 16:37:59,379 stack ['$kept_edges_nonzero196.95', '$D_nonzero198.96', '$n_nonzero_edges200.97', '$const202.98']
DEBUG 2022-02-14 16:37:59,380 dispatch pc=206, inst=BINARY_SUBSCR(arg=None, lineno=202)
DEBUG 2022-02-14 16:37:59,380 stack ['$kept_edges_nonzero196.95', '$D_nonzero198.96', '$204build_slice.100']
DEBUG 2022-02-14 16:37:59,380 dispatch pc=208, inst=BINARY_MULTIPLY(arg=None, lineno=202)
DEBUG 2022-02-14 16:37:59,380 stack ['$kept_edges_nonzero196.95', '$206binary_subscr.101']
DEBUG 2022-02-14 16:37:59,380 dispatch pc=210, inst=LOAD_FAST(arg=11, lineno=202)
DEBUG 2022-02-14 16:37:59,380 stack ['$208binary_multiply.102']
DEBUG 2022-02-14 16:37:59,380 dispatch pc=212, inst=LOAD_CONST(arg=0, lineno=202)
DEBUG 2022-02-14 16:37:59,380 stack ['$208binary_multiply.102', '$XD_nonzero210.103']
DEBUG 2022-02-14 16:37:59,380 dispatch pc=214, inst=LOAD_FAST(arg=6, lineno=202)
DEBUG 2022-02-14 16:37:59,380 stack ['$208binary_multiply.102', '$XD_nonzero210.103', '$const212.104']
DEBUG 2022-02-14 16:37:59,380 dispatch pc=216, inst=BUILD_SLICE(arg=2, lineno=202)
DEBUG 2022-02-14 16:37:59,380 stack ['$208binary_multiply.102', '$XD_nonzero210.103', '$const212.104', '$n_nonzero_edges214.105']
DEBUG 2022-02-14 16:37:59,380 dispatch pc=218, inst=STORE_SUBSCR(arg=None, lineno=202)
DEBUG 2022-02-14 16:37:59,380 stack ['$208binary_multiply.102', '$XD_nonzero210.103', '$216build_slice.107']
DEBUG 2022-02-14 16:37:59,380 dispatch pc=220, inst=LOAD_FAST(arg=7, lineno=203)
DEBUG 2022-02-14 16:37:59,380 stack []
DEBUG 2022-02-14 16:37:59,380 dispatch pc=222, inst=LOAD_FAST(arg=10, lineno=203)
DEBUG 2022-02-14 16:37:59,380 stack ['$kept_edges_nonzero220.108']
DEBUG 2022-02-14 16:37:59,380 dispatch pc=224, inst=LOAD_CONST(arg=0, lineno=203)
DEBUG 2022-02-14 16:37:59,380 stack ['$kept_edges_nonzero220.108', '$D_nonzero222.109']
DEBUG 2022-02-14 16:37:59,380 dispatch pc=226, inst=LOAD_FAST(arg=6, lineno=203)
DEBUG 2022-02-14 16:37:59,380 stack ['$kept_edges_nonzero220.108', '$D_nonzero222.109', '$const224.110']
DEBUG 2022-02-14 16:37:59,380 dispatch pc=228, inst=BUILD_SLICE(arg=2, lineno=203)
DEBUG 2022-02-14 16:37:59,380 stack ['$kept_edges_nonzero220.108', '$D_nonzero222.109', '$const224.110', '$n_nonzero_edges226.111']
DEBUG 2022-02-14 16:37:59,380 dispatch pc=230, inst=BINARY_SUBSCR(arg=None, lineno=203)
DEBUG 2022-02-14 16:37:59,381 stack ['$kept_edges_nonzero220.108', '$D_nonzero222.109', '$228build_slice.113']
DEBUG 2022-02-14 16:37:59,381 dispatch pc=232, inst=BINARY_MULTIPLY(arg=None, lineno=203)
DEBUG 2022-02-14 16:37:59,381 stack ['$kept_edges_nonzero220.108', '$230binary_subscr.114']
DEBUG 2022-02-14 16:37:59,381 dispatch pc=234, inst=LOAD_FAST(arg=11, lineno=203)
DEBUG 2022-02-14 16:37:59,381 stack ['$232binary_multiply.115']
DEBUG 2022-02-14 16:37:59,381 dispatch pc=236, inst=LOAD_FAST(arg=6, lineno=203)
DEBUG 2022-02-14 16:37:59,381 stack ['$232binary_multiply.115', '$XD_nonzero234.116']
DEBUG 2022-02-14 16:37:59,381 dispatch pc=238, inst=LOAD_CONST(arg=0, lineno=203)
DEBUG 2022-02-14 16:37:59,381 stack ['$232binary_multiply.115', '$XD_nonzero234.116', '$n_nonzero_edges236.117']
DEBUG 2022-02-14 16:37:59,381 dispatch pc=240, inst=BUILD_SLICE(arg=2, lineno=203)
DEBUG 2022-02-14 16:37:59,381 stack ['$232binary_multiply.115', '$XD_nonzero234.116', '$n_nonzero_edges236.117', '$const238.118']
DEBUG 2022-02-14 16:37:59,381 dispatch pc=242, inst=STORE_SUBSCR(arg=None, lineno=203)
DEBUG 2022-02-14 16:37:59,381 stack ['$232binary_multiply.115', '$XD_nonzero234.116', '$240build_slice.120']
DEBUG 2022-02-14 16:37:59,381 dispatch pc=244, inst=LOAD_FAST(arg=3, lineno=205)
DEBUG 2022-02-14 16:37:59,381 stack []
DEBUG 2022-02-14 16:37:59,381 dispatch pc=246, inst=LOAD_CONST(arg=0, lineno=205)
DEBUG 2022-02-14 16:37:59,381 stack ['$oddV244.121']
DEBUG 2022-02-14 16:37:59,381 dispatch pc=248, inst=IS_OP(arg=1, lineno=205)
DEBUG 2022-02-14 16:37:59,381 stack ['$oddV244.121', '$const246.122']
DEBUG 2022-02-14 16:37:59,381 dispatch pc=250, inst=POP_JUMP_IF_FALSE(arg=328, lineno=205)
DEBUG 2022-02-14 16:37:59,381 stack ['$248is_op.123']
DEBUG 2022-02-14 16:37:59,381 end state. edges=[Edge(pc=254, stack=(), blockstack=(), npush=0), Edge(pc=328, stack=(), blockstack=(), npush=0)]
DEBUG 2022-02-14 16:37:59,381 pending: deque([State(pc_initial=254 nstack_initial=0), State(pc_initial=328 nstack_initial=0)])
DEBUG 2022-02-14 16:37:59,381 stack: []
DEBUG 2022-02-14 16:37:59,381 dispatch pc=254, inst=LOAD_FAST(arg=3, lineno=206)
DEBUG 2022-02-14 16:37:59,382 stack []
DEBUG 2022-02-14 16:37:59,382 dispatch pc=256, inst=LOAD_FAST(arg=5, lineno=206)
DEBUG 2022-02-14 16:37:59,382 stack ['$oddV254.0']
DEBUG 2022-02-14 16:37:59,382 dispatch pc=258, inst=BINARY_SUBSCR(arg=None, lineno=206)
DEBUG 2022-02-14 16:37:59,382 stack ['$oddV254.0', '$nonzero_rows256.1']
DEBUG 2022-02-14 16:37:59,382 dispatch pc=260, inst=STORE_FAST(arg=12, lineno=206)
DEBUG 2022-02-14 16:37:59,382 stack ['$258binary_subscr.2']
DEBUG 2022-02-14 16:37:59,382 dispatch pc=262, inst=LOAD_GLOBAL(arg=0, lineno=207)
DEBUG 2022-02-14 16:37:59,382 stack []
DEBUG 2022-02-14 16:37:59,382 dispatch pc=264, inst=LOAD_ATTR(arg=5, lineno=207)
DEBUG 2022-02-14 16:37:59,382 stack ['$262load_global.3']
DEBUG 2022-02-14 16:37:59,382 dispatch pc=266, inst=LOAD_FAST(arg=12, lineno=207)
DEBUG 2022-02-14 16:37:59,382 stack ['$264load_attr.4']
DEBUG 2022-02-14 16:37:59,382 dispatch pc=268, inst=LOAD_GLOBAL(arg=0, lineno=207)
DEBUG 2022-02-14 16:37:59,382 stack ['$264load_attr.4', '$oddV_nonzero266.5']
DEBUG 2022-02-14 16:37:59,382 dispatch pc=270, inst=LOAD_ATTR(arg=6, lineno=207)
DEBUG 2022-02-14 16:37:59,382 stack ['$264load_attr.4', '$oddV_nonzero266.5', '$268load_global.6']
DEBUG 2022-02-14 16:37:59,382 dispatch pc=272, inst=LOAD_CONST(arg=3, lineno=207)
DEBUG 2022-02-14 16:37:59,382 stack ['$264load_attr.4', '$oddV_nonzero266.5', '$270load_attr.7']
DEBUG 2022-02-14 16:37:59,382 dispatch pc=274, inst=CALL_FUNCTION_KW(arg=2, lineno=207)
DEBUG 2022-02-14 16:37:59,382 stack ['$264load_attr.4', '$oddV_nonzero266.5', '$270load_attr.7', '$const272.8']
DEBUG 2022-02-14 16:37:59,382 dispatch pc=276, inst=STORE_FAST(arg=13, lineno=207)
DEBUG 2022-02-14 16:37:59,382 stack ['$274call_function_kw.9']
DEBUG 2022-02-14 16:37:59,382 dispatch pc=278, inst=LOAD_FAST(arg=7, lineno=208)
DEBUG 2022-02-14 16:37:59,382 stack []
DEBUG 2022-02-14 16:37:59,382 dispatch pc=280, inst=LOAD_FAST(arg=12, lineno=208)
DEBUG 2022-02-14 16:37:59,383 stack ['$kept_edges_nonzero278.10']
DEBUG 2022-02-14 16:37:59,383 dispatch pc=282, inst=LOAD_FAST(arg=6, lineno=208)
DEBUG 2022-02-14 16:37:59,383 stack ['$kept_edges_nonzero278.10', '$oddV_nonzero280.11']
DEBUG 2022-02-14 16:37:59,383 dispatch pc=284, inst=LOAD_CONST(arg=0, lineno=208)
DEBUG 2022-02-14 16:37:59,383 stack ['$kept_edges_nonzero278.10', '$oddV_nonzero280.11', '$n_nonzero_edges282.12']
DEBUG 2022-02-14 16:37:59,383 dispatch pc=286, inst=BUILD_SLICE(arg=2, lineno=208)
DEBUG 2022-02-14 16:37:59,383 stack ['$kept_edges_nonzero278.10', '$oddV_nonzero280.11', '$n_nonzero_edges282.12', '$const284.13']
DEBUG 2022-02-14 16:37:59,383 dispatch pc=288, inst=BINARY_SUBSCR(arg=None, lineno=208)
DEBUG 2022-02-14 16:37:59,383 stack ['$kept_edges_nonzero278.10', '$oddV_nonzero280.11', '$286build_slice.15']
DEBUG 2022-02-14 16:37:59,383 dispatch pc=290, inst=BINARY_MULTIPLY(arg=None, lineno=208)
DEBUG 2022-02-14 16:37:59,383 stack ['$kept_edges_nonzero278.10', '$288binary_subscr.16']
DEBUG 2022-02-14 16:37:59,383 dispatch pc=292, inst=LOAD_FAST(arg=13, lineno=208)
DEBUG 2022-02-14 16:37:59,383 stack ['$290binary_multiply.17']
DEBUG 2022-02-14 16:37:59,383 dispatch pc=294, inst=LOAD_CONST(arg=0, lineno=208)
DEBUG 2022-02-14 16:37:59,383 stack ['$290binary_multiply.17', '$oddVX_nonzero292.18']
DEBUG 2022-02-14 16:37:59,384 dispatch pc=296, inst=LOAD_FAST(arg=6, lineno=208)
DEBUG 2022-02-14 16:37:59,384 stack ['$290binary_multiply.17', '$oddVX_nonzero292.18', '$const294.19']
DEBUG 2022-02-14 16:37:59,384 dispatch pc=298, inst=BUILD_SLICE(arg=2, lineno=208)
DEBUG 2022-02-14 16:37:59,384 stack ['$290binary_multiply.17', '$oddVX_nonzero292.18', '$const294.19', '$n_nonzero_edges296.20']
DEBUG 2022-02-14 16:37:59,384 dispatch pc=300, inst=STORE_SUBSCR(arg=None, lineno=208)
DEBUG 2022-02-14 16:37:59,384 stack ['$290binary_multiply.17', '$oddVX_nonzero292.18', '$298build_slice.22']
DEBUG 2022-02-14 16:37:59,384 dispatch pc=302, inst=LOAD_FAST(arg=7, lineno=209)
DEBUG 2022-02-14 16:37:59,384 stack []
DEBUG 2022-02-14 16:37:59,384 dispatch pc=304, inst=LOAD_FAST(arg=12, lineno=209)
DEBUG 2022-02-14 16:37:59,384 stack ['$kept_edges_nonzero302.23']
DEBUG 2022-02-14 16:37:59,384 dispatch pc=306, inst=LOAD_CONST(arg=0, lineno=209)
DEBUG 2022-02-14 16:37:59,385 stack ['$kept_edges_nonzero302.23', '$oddV_nonzero304.24']
DEBUG 2022-02-14 16:37:59,385 dispatch pc=308, inst=LOAD_FAST(arg=6, lineno=209)
DEBUG 2022-02-14 16:37:59,385 stack ['$kept_edges_nonzero302.23', '$oddV_nonzero304.24', '$const306.25']
DEBUG 2022-02-14 16:37:59,385 dispatch pc=310, inst=BUILD_SLICE(arg=2, lineno=209)
DEBUG 2022-02-14 16:37:59,385 stack ['$kept_edges_nonzero302.23', '$oddV_nonzero304.24', '$const306.25', '$n_nonzero_edges308.26']
DEBUG 2022-02-14 16:37:59,385 dispatch pc=312, inst=BINARY_SUBSCR(arg=None, lineno=209)
DEBUG 2022-02-14 16:37:59,385 stack ['$kept_edges_nonzero302.23', '$oddV_nonzero304.24', '$310build_slice.28']
DEBUG 2022-02-14 16:37:59,385 dispatch pc=314, inst=BINARY_MULTIPLY(arg=None, lineno=209)
DEBUG 2022-02-14 16:37:59,385 stack ['$kept_edges_nonzero302.23', '$312binary_subscr.29']
DEBUG 2022-02-14 16:37:59,385 dispatch pc=316, inst=LOAD_FAST(arg=13, lineno=209)
DEBUG 2022-02-14 16:37:59,385 stack ['$314binary_multiply.30']
DEBUG 2022-02-14 16:37:59,385 dispatch pc=318, inst=LOAD_FAST(arg=6, lineno=209)
DEBUG 2022-02-14 16:37:59,385 stack ['$314binary_multiply.30', '$oddVX_nonzero316.31']
DEBUG 2022-02-14 16:37:59,386 dispatch pc=320, inst=LOAD_CONST(arg=0, lineno=209)
DEBUG 2022-02-14 16:37:59,386 stack ['$314binary_multiply.30', '$oddVX_nonzero316.31', '$n_nonzero_edges318.32']
DEBUG 2022-02-14 16:37:59,386 dispatch pc=322, inst=BUILD_SLICE(arg=2, lineno=209)
DEBUG 2022-02-14 16:37:59,386 stack ['$314binary_multiply.30', '$oddVX_nonzero316.31', '$n_nonzero_edges318.32', '$const320.33']
DEBUG 2022-02-14 16:37:59,386 dispatch pc=324, inst=STORE_SUBSCR(arg=None, lineno=209)
DEBUG 2022-02-14 16:37:59,386 stack ['$314binary_multiply.30', '$oddVX_nonzero316.31', '$322build_slice.35']
DEBUG 2022-02-14 16:37:59,386 dispatch pc=326, inst=JUMP_FORWARD(arg=4, lineno=209)
DEBUG 2022-02-14 16:37:59,386 stack []
DEBUG 2022-02-14 16:37:59,386 end state. edges=[Edge(pc=332, stack=(), blockstack=(), npush=0)]
DEBUG 2022-02-14 16:37:59,386 pending: deque([State(pc_initial=328 nstack_initial=0), State(pc_initial=332 nstack_initial=0)])
DEBUG 2022-02-14 16:37:59,386 stack: []
DEBUG 2022-02-14 16:37:59,386 dispatch pc=328, inst=LOAD_CONST(arg=0, lineno=211)
DEBUG 2022-02-14 16:37:59,386 stack []
DEBUG 2022-02-14 16:37:59,387 dispatch pc=330, inst=STORE_FAST(arg=13, lineno=211)
DEBUG 2022-02-14 16:37:59,387 stack ['$const328.0']
DEBUG 2022-02-14 16:37:59,387 end state. edges=[Edge(pc=332, stack=(), blockstack=(), npush=0)]
DEBUG 2022-02-14 16:37:59,387 pending: deque([State(pc_initial=332 nstack_initial=0), State(pc_initial=332 nstack_initial=0)])
DEBUG 2022-02-14 16:37:59,387 stack: []
DEBUG 2022-02-14 16:37:59,387 dispatch pc=332, inst=LOAD_FAST(arg=9, lineno=213)
DEBUG 2022-02-14 16:37:59,387 stack []
DEBUG 2022-02-14 16:37:59,387 dispatch pc=334, inst=LOAD_FAST(arg=11, lineno=213)
DEBUG 2022-02-14 16:37:59,387 stack ['$AX_nonzero332.0']
DEBUG 2022-02-14 16:37:59,387 dispatch pc=336, inst=LOAD_FAST(arg=10, lineno=213)
DEBUG 2022-02-14 16:37:59,387 stack ['$AX_nonzero332.0', '$XD_nonzero334.1']
DEBUG 2022-02-14 16:37:59,387 dispatch pc=338, inst=LOAD_FAST(arg=13, lineno=213)
DEBUG 2022-02-14 16:37:59,387 stack ['$AX_nonzero332.0', '$XD_nonzero334.1', '$D_nonzero336.2']
DEBUG 2022-02-14 16:37:59,387 dispatch pc=340, inst=BUILD_TUPLE(arg=4, lineno=213)
DEBUG 2022-02-14 16:37:59,387 stack ['$AX_nonzero332.0', '$XD_nonzero334.1', '$D_nonzero336.2', '$oddVX_nonzero338.3']
DEBUG 2022-02-14 16:37:59,388 dispatch pc=342, inst=RETURN_VALUE(arg=None, lineno=213)
DEBUG 2022-02-14 16:37:59,388 stack ['$340build_tuple.4']
DEBUG 2022-02-14 16:37:59,388 end state. edges=[]
DEBUG 2022-02-14 16:37:59,388 pending: deque([State(pc_initial=332 nstack_initial=0)])
DEBUG 2022-02-14 16:37:59,388 -------------------------Prune PHIs-------------------------
DEBUG 2022-02-14 16:37:59,388 Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=254 nstack_initial=0): set(),
             State(pc_initial=328 nstack_initial=0): set(),
             State(pc_initial=332 nstack_initial=0): set()})
DEBUG 2022-02-14 16:37:59,388 defmap: {}
DEBUG 2022-02-14 16:37:59,388 phismap: defaultdict(<class 'set'>, {})
DEBUG 2022-02-14 16:37:59,388 changing phismap: defaultdict(<class 'set'>, {})
DEBUG 2022-02-14 16:37:59,389 keep phismap: {}
DEBUG 2022-02-14 16:37:59,389 new_out: defaultdict(<class 'dict'>, {})
DEBUG 2022-02-14 16:37:59,389 ----------------------DONE Prune PHIs-----------------------
DEBUG 2022-02-14 16:37:59,389 block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$2load_global.0'}), (4, {'item': '$2load_global.0', 'res': '$4load_method.1'}), (6, {'res': '$kept_edges6.2'}), (8, {'res': '$kept_edges8.3'}), (10, {'items': ['$kept_edges6.2', '$kept_edges8.3'], 'res': '$10build_tuple.4'}), (12, {'func': '$4load_method.1', 'args': ['$10build_tuple.4'], 'res': '$12call_method.5'}), (14, {'value': '$12call_method.5'}), (16, {'res': '$16load_global.6'}), (18, {'item': '$16load_global.6', 'res': '$18load_method.7'}), (20, {'res': '$z20.8'}), (22, {'res': '$const22.9'}), (24, {'lhs': '$z20.8', 'rhs': '$const22.9', 'res': '$24compare_op.10'}), (26, {'func': '$18load_method.7', 'args': ['$24compare_op.10'], 'res': '$26call_method.11'}), (28, {'res': '$const28.12'}), (30, {'index': '$const28.12', 'target': '$26call_method.11', 'res': '$30binary_subscr.13'}), (32, {'value': '$30binary_subscr.13'}), (34, {'res': '$34load_global.14'}), (36, {'res': '$nonzero_rows36.15'}), (38, {'func': '$34load_global.14', 'args': ['$nonzero_rows36.15'], 'res': '$38call_function.16'}), (40, {'res': '$const40.17'}), (42, {'lhs': '$38call_function.16', 'rhs': '$const40.17', 'res': '$42binary_floor_divide.18'}), (44, {'value': '$42binary_floor_divide.18'}), (46, {'res': '$kept_edges46.19'}), (48, {'res': '$48load_global.20'}), (50, {'item': '$48load_global.20', 'res': '$50load_method.21'}), (52, {'res': '$kept_edges52.22'}), (54, {'res': '$const54.23'}), (56, {'lhs': '$kept_edges52.22', 'rhs': '$const54.23', 'res': '$56compare_op.24'}), (58, {'func': '$50load_method.21', 'args': ['$56compare_op.24'], 'res': '$58call_method.25'}), (60, {'index': '$58call_method.25', 'target': '$kept_edges46.19', 'res': '$60binary_subscr.26'}), (62, {'value': '$60binary_subscr.26'}), (64, {'res': '$64load_global.27'}), (66, {'res': '$A66.28'}), (68, {'res': '$nonzero_rows68.29'}), (70, {'res': '$nonzero_rows70.30'}), (72, {'func': '$64load_global.27', 'args': ['$A66.28', '$nonzero_rows68.29', '$nonzero_rows70.30'], 'res': '$72call_function.31'}), (74, {'value': '$72call_function.31'}), (76, {'res': '$76load_global.32'}), (78, {'item': '$76load_global.32', 'res': '$78load_attr.33'}), (80, {'res': '$A_nonzero80.34'}), (82, {'res': '$82load_global.35'}), (84, {'item': '$82load_global.35', 'res': '$84load_attr.36'}), (86, {'res': '$const86.37'}), (88, {'func': '$78load_attr.33', 'args': ['$A_nonzero80.34', '$84load_attr.36'], 'names': '$const86.37', 'res': '$88call_function_kw.38'}), (90, {'value': '$88call_function_kw.38'}), (92, {'res': '$kept_edges_nonzero92.39'}), (94, {'res': '$A_nonzero94.40'}), (96, {'res': '$const96.41'}), (98, {'res': '$const98.42'}), (100, {'start': '$const96.41', 'stop': '$const98.42', 'step': None, 'res': '$100build_slice.44', 'slicevar': '$100build_slice.43'}), (102, {'res': '$n_nonzero_edges102.45'}), (104, {'res': '$const104.46'}), (106, {'start': '$n_nonzero_edges102.45', 'stop': '$const104.46', 'step': None, 'res': '$106build_slice.48', 'slicevar': '$106build_slice.47'}), (108, {'items': ['$100build_slice.44', '$106build_slice.48'], 'res': '$108build_tuple.49'}), (110, {'index': '$108build_tuple.49', 'target': '$A_nonzero94.40', 'res': '$110binary_subscr.50'}), (112, {'lhs': '$kept_edges_nonzero92.39', 'rhs': '$110binary_subscr.50', 'res': '$112binary_multiply.51'}), (114, {'res': '$AX_nonzero114.52'}), (116, {'res': '$const116.53'}), (118, {'res': '$const118.54'}), (120, {'start': '$const116.53', 'stop': '$const118.54', 'step': None, 'res': '$120build_slice.56', 'slicevar': '$120build_slice.55'}), (122, {'res': '$const122.57'}), (124, {'res': '$n_nonzero_edges124.58'}), (126, {'start': '$const122.57', 'stop': '$n_nonzero_edges124.58', 'step': None, 'res': '$126build_slice.60', 'slicevar': '$126build_slice.59'}), (128, {'items': ['$120build_slice.56', '$126build_slice.60'], 'res': '$128build_tuple.61'}), (130, {'target': '$AX_nonzero114.52', 'index': '$128build_tuple.61', 'value': '$112binary_multiply.51'}), (132, {'res': '$kept_edges_nonzero132.62'}), (134, {'res': '$A_nonzero134.63'}), (136, {'res': '$const136.64'}), (138, {'res': '$const138.65'}), (140, {'start': '$const136.64', 'stop': '$const138.65', 'step': None, 'res': '$140build_slice.67', 'slicevar': '$140build_slice.66'}), (142, {'res': '$const142.68'}), (144, {'res': '$n_nonzero_edges144.69'}), (146, {'start': '$const142.68', 'stop': '$n_nonzero_edges144.69', 'step': None, 'res': '$146build_slice.71', 'slicevar': '$146build_slice.70'}), (148, {'items': ['$140build_slice.67', '$146build_slice.71'], 'res': '$148build_tuple.72'}), (150, {'index': '$148build_tuple.72', 'target': '$A_nonzero134.63', 'res': '$150binary_subscr.73'}), (152, {'lhs': '$kept_edges_nonzero132.62', 'rhs': '$150binary_subscr.73', 'res': '$152binary_multiply.74'}), (154, {'res': '$AX_nonzero154.75'}), (156, {'res': '$const156.76'}), (158, {'res': '$const158.77'}), (160, {'start': '$const156.76', 'stop': '$const158.77', 'step': None, 'res': '$160build_slice.79', 'slicevar': '$160build_slice.78'}), (162, {'res': '$n_nonzero_edges162.80'}), (164, {'res': '$const164.81'}), (166, {'start': '$n_nonzero_edges162.80', 'stop': '$const164.81', 'step': None, 'res': '$166build_slice.83', 'slicevar': '$166build_slice.82'}), (168, {'items': ['$160build_slice.79', '$166build_slice.83'], 'res': '$168build_tuple.84'}), (170, {'target': '$AX_nonzero154.75', 'index': '$168build_tuple.84', 'value': '$152binary_multiply.74'}), (172, {'res': '$D172.85'}), (174, {'res': '$nonzero_rows174.86'}), (176, {'index': '$nonzero_rows174.86', 'target': '$D172.85', 'res': '$176binary_subscr.87'}), (178, {'value': '$176binary_subscr.87'}), (180, {'res': '$180load_global.88'}), (182, {'item': '$180load_global.88', 'res': '$182load_attr.89'}), (184, {'res': '$D_nonzero184.90'}), (186, {'res': '$186load_global.91'}), (188, {'item': '$186load_global.91', 'res': '$188load_attr.92'}), (190, {'res': '$const190.93'}), (192, {'func': '$182load_attr.89', 'args': ['$D_nonzero184.90', '$188load_attr.92'], 'names': '$const190.93', 'res': '$192call_function_kw.94'}), (194, {'value': '$192call_function_kw.94'}), (196, {'res': '$kept_edges_nonzero196.95'}), (198, {'res': '$D_nonzero198.96'}), (200, {'res': '$n_nonzero_edges200.97'}), (202, {'res': '$const202.98'}), (204, {'start': '$n_nonzero_edges200.97', 'stop': '$const202.98', 'step': None, 'res': '$204build_slice.100', 'slicevar': '$204build_slice.99'}), (206, {'index': '$204build_slice.100', 'target': '$D_nonzero198.96', 'res': '$206binary_subscr.101'}), (208, {'lhs': '$kept_edges_nonzero196.95', 'rhs': '$206binary_subscr.101', 'res': '$208binary_multiply.102'}), (210, {'res': '$XD_nonzero210.103'}), (212, {'res': '$const212.104'}), (214, {'res': '$n_nonzero_edges214.105'}), (216, {'start': '$const212.104', 'stop': '$n_nonzero_edges214.105', 'step': None, 'res': '$216build_slice.107', 'slicevar': '$216build_slice.106'}), (218, {'target': '$XD_nonzero210.103', 'index': '$216build_slice.107', 'value': '$208binary_multiply.102'}), (220, {'res': '$kept_edges_nonzero220.108'}), (222, {'res': '$D_nonzero222.109'}), (224, {'res': '$const224.110'}), (226, {'res': '$n_nonzero_edges226.111'}), (228, {'start': '$const224.110', 'stop': '$n_nonzero_edges226.111', 'step': None, 'res': '$228build_slice.113', 'slicevar': '$228build_slice.112'}), (230, {'index': '$228build_slice.113', 'target': '$D_nonzero222.109', 'res': '$230binary_subscr.114'}), (232, {'lhs': '$kept_edges_nonzero220.108', 'rhs': '$230binary_subscr.114', 'res': '$232binary_multiply.115'}), (234, {'res': '$XD_nonzero234.116'}), (236, {'res': '$n_nonzero_edges236.117'}), (238, {'res': '$const238.118'}), (240, {'start': '$n_nonzero_edges236.117', 'stop': '$const238.118', 'step': None, 'res': '$240build_slice.120', 'slicevar': '$240build_slice.119'}), (242, {'target': '$XD_nonzero234.116', 'index': '$240build_slice.120', 'value': '$232binary_multiply.115'}), (244, {'res': '$oddV244.121'}), (246, {'res': '$const246.122'}), (248, {'lhs': '$oddV244.121', 'rhs': '$const246.122', 'res': '$248is_op.123'}), (250, {'pred': '$248is_op.123'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={254: (), 328: ()})
DEBUG 2022-02-14 16:37:59,389 block_infos State(pc_initial=254 nstack_initial=0):
AdaptBlockInfo(insts=((254, {'res': '$oddV254.0'}), (256, {'res': '$nonzero_rows256.1'}), (258, {'index': '$nonzero_rows256.1', 'target': '$oddV254.0', 'res': '$258binary_subscr.2'}), (260, {'value': '$258binary_subscr.2'}), (262, {'res': '$262load_global.3'}), (264, {'item': '$262load_global.3', 'res': '$264load_attr.4'}), (266, {'res': '$oddV_nonzero266.5'}), (268, {'res': '$268load_global.6'}), (270, {'item': '$268load_global.6', 'res': '$270load_attr.7'}), (272, {'res': '$const272.8'}), (274, {'func': '$264load_attr.4', 'args': ['$oddV_nonzero266.5', '$270load_attr.7'], 'names': '$const272.8', 'res': '$274call_function_kw.9'}), (276, {'value': '$274call_function_kw.9'}), (278, {'res': '$kept_edges_nonzero278.10'}), (280, {'res': '$oddV_nonzero280.11'}), (282, {'res': '$n_nonzero_edges282.12'}), (284, {'res': '$const284.13'}), (286, {'start': '$n_nonzero_edges282.12', 'stop': '$const284.13', 'step': None, 'res': '$286build_slice.15', 'slicevar': '$286build_slice.14'}), (288, {'index': '$286build_slice.15', 'target': '$oddV_nonzero280.11', 'res': '$288binary_subscr.16'}), (290, {'lhs': '$kept_edges_nonzero278.10', 'rhs': '$288binary_subscr.16', 'res': '$290binary_multiply.17'}), (292, {'res': '$oddVX_nonzero292.18'}), (294, {'res': '$const294.19'}), (296, {'res': '$n_nonzero_edges296.20'}), (298, {'start': '$const294.19', 'stop': '$n_nonzero_edges296.20', 'step': None, 'res': '$298build_slice.22', 'slicevar': '$298build_slice.21'}), (300, {'target': '$oddVX_nonzero292.18', 'index': '$298build_slice.22', 'value': '$290binary_multiply.17'}), (302, {'res': '$kept_edges_nonzero302.23'}), (304, {'res': '$oddV_nonzero304.24'}), (306, {'res': '$const306.25'}), (308, {'res': '$n_nonzero_edges308.26'}), (310, {'start': '$const306.25', 'stop': '$n_nonzero_edges308.26', 'step': None, 'res': '$310build_slice.28', 'slicevar': '$310build_slice.27'}), (312, {'index': '$310build_slice.28', 'target': '$oddV_nonzero304.24', 'res': '$312binary_subscr.29'}), (314, {'lhs': '$kept_edges_nonzero302.23', 'rhs': '$312binary_subscr.29', 'res': '$314binary_multiply.30'}), (316, {'res': '$oddVX_nonzero316.31'}), (318, {'res': '$n_nonzero_edges318.32'}), (320, {'res': '$const320.33'}), (322, {'start': '$n_nonzero_edges318.32', 'stop': '$const320.33', 'step': None, 'res': '$322build_slice.35', 'slicevar': '$322build_slice.34'}), (324, {'target': '$oddVX_nonzero316.31', 'index': '$322build_slice.35', 'value': '$314binary_multiply.30'}), (326, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={332: ()})
DEBUG 2022-02-14 16:37:59,390 block_infos State(pc_initial=328 nstack_initial=0):
AdaptBlockInfo(insts=((328, {'res': '$const328.0'}), (330, {'value': '$const328.0'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={332: ()})
DEBUG 2022-02-14 16:37:59,390 block_infos State(pc_initial=332 nstack_initial=0):
AdaptBlockInfo(insts=((332, {'res': '$AX_nonzero332.0'}), (334, {'res': '$XD_nonzero334.1'}), (336, {'res': '$D_nonzero336.2'}), (338, {'res': '$oddVX_nonzero338.3'}), (340, {'items': ['$AX_nonzero332.0', '$XD_nonzero334.1', '$D_nonzero336.2', '$oddVX_nonzero338.3'], 'res': '$340build_tuple.4'}), (342, {'retval': '$340build_tuple.4', 'castval': '$342return_value.5'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG 2022-02-14 16:37:59,395 label 0:
    kept_edges = arg(0, name=kept_edges)     ['kept_edges']
    A = arg(1, name=A)                       ['A']
    D = arg(2, name=D)                       ['D']
    oddV = arg(3, name=oddV)                 ['oddV']
    $2load_global.0 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>) ['$2load_global.0']
    $4load_method.1 = getattr(value=$2load_global.0, attr=concatenate) ['$2load_global.0', '$4load_method.1']
    $10build_tuple.4 = build_tuple(items=[Var(kept_edges, _loop_hafnian_subroutines.py:187), Var(kept_edges, _loop_hafnian_subroutines.py:187)]) ['$10build_tuple.4', 'kept_edges', 'kept_edges']
    z = call $4load_method.1($10build_tuple.4, func=$4load_method.1, args=[Var($10build_tuple.4, _loop_hafnian_subroutines.py:187)], kws=(), vararg=None, target=None) ['$10build_tuple.4', '$4load_method.1', 'z']
    $16load_global.6 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>) ['$16load_global.6']
    $18load_method.7 = getattr(value=$16load_global.6, attr=where) ['$16load_global.6', '$18load_method.7']
    $const22.9 = const(int, 0)               ['$const22.9']
    $24compare_op.10 = z != $const22.9       ['$24compare_op.10', '$const22.9', 'z']
    $26call_method.11 = call $18load_method.7($24compare_op.10, func=$18load_method.7, args=[Var($24compare_op.10, _loop_hafnian_subroutines.py:188)], kws=(), vararg=None, target=None) ['$18load_method.7', '$24compare_op.10', '$26call_method.11']
    $const28.12 = const(int, 0)              ['$const28.12']
    nonzero_rows = getitem(value=$26call_method.11, index=$const28.12, fn=<built-in function getitem>) ['$26call_method.11', '$const28.12', 'nonzero_rows']
    $34load_global.14 = global(len: <built-in function len>) ['$34load_global.14']
    $38call_function.16 = call $34load_global.14(nonzero_rows, func=$34load_global.14, args=[Var(nonzero_rows, _loop_hafnian_subroutines.py:188)], kws=(), vararg=None, target=None) ['$34load_global.14', '$38call_function.16', 'nonzero_rows']
    $const40.17 = const(int, 2)              ['$const40.17']
    n_nonzero_edges = $38call_function.16 // $const40.17 ['$38call_function.16', '$const40.17', 'n_nonzero_edges']
    $48load_global.20 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>) ['$48load_global.20']
    $50load_method.21 = getattr(value=$48load_global.20, attr=where) ['$48load_global.20', '$50load_method.21']
    $const54.23 = const(int, 0)              ['$const54.23']
    $56compare_op.24 = kept_edges != $const54.23 ['$56compare_op.24', '$const54.23', 'kept_edges']
    $58call_method.25 = call $50load_method.21($56compare_op.24, func=$50load_method.21, args=[Var($56compare_op.24, _loop_hafnian_subroutines.py:191)], kws=(), vararg=None, target=None) ['$50load_method.21', '$56compare_op.24', '$58call_method.25']
    kept_edges_nonzero = getitem(value=kept_edges, index=$58call_method.25, fn=<built-in function getitem>) ['$58call_method.25', 'kept_edges', 'kept_edges_nonzero']
    $64load_global.27 = global(nb_ix: CPUDispatcher(<function nb_ix at 0x7fa047ebe550>)) ['$64load_global.27']
    A_nonzero = call $64load_global.27(A, nonzero_rows, nonzero_rows, func=$64load_global.27, args=[Var(A, _loop_hafnian_subroutines.py:187), Var(nonzero_rows, _loop_hafnian_subroutines.py:188), Var(nonzero_rows, _loop_hafnian_subroutines.py:188)], kws=(), vararg=None, target=None) ['$64load_global.27', 'A', 'A_nonzero', 'nonzero_rows', 'nonzero_rows']
    $76load_global.32 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>) ['$76load_global.32']
    $78load_attr.33 = getattr(value=$76load_global.32, attr=empty_like) ['$76load_global.32', '$78load_attr.33']
    $82load_global.35 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>) ['$82load_global.35']
    $84load_attr.36 = getattr(value=$82load_global.35, attr=complex128) ['$82load_global.35', '$84load_attr.36']
    AX_nonzero = call $78load_attr.33(A_nonzero, func=$78load_attr.33, args=[Var(A_nonzero, _loop_hafnian_subroutines.py:193)], kws=[('dtype', Var($84load_attr.36, _loop_hafnian_subroutines.py:195))], vararg=None, target=None) ['$78load_attr.33', '$84load_attr.36', 'AX_nonzero', 'A_nonzero']
    $const96.41 = const(NoneType, None)      ['$const96.41']
    $const98.42 = const(NoneType, None)      ['$const98.42']
    $100build_slice.43 = global(slice: <class 'slice'>) ['$100build_slice.43']
    $100build_slice.44 = call $100build_slice.43($const96.41, $const98.42, func=$100build_slice.43, args=(Var($const96.41, _loop_hafnian_subroutines.py:196), Var($const98.42, _loop_hafnian_subroutines.py:196)), kws=(), vararg=None, target=None) ['$100build_slice.43', '$100build_slice.44', '$const96.41', '$const98.42']
    $const104.46 = const(NoneType, None)     ['$const104.46']
    $106build_slice.47 = global(slice: <class 'slice'>) ['$106build_slice.47']
    $106build_slice.48 = call $106build_slice.47(n_nonzero_edges, $const104.46, func=$106build_slice.47, args=(Var(n_nonzero_edges, _loop_hafnian_subroutines.py:189), Var($const104.46, _loop_hafnian_subroutines.py:196)), kws=(), vararg=None, target=None) ['$106build_slice.47', '$106build_slice.48', '$const104.46', 'n_nonzero_edges']
    $108build_tuple.49 = build_tuple(items=[Var($100build_slice.44, _loop_hafnian_subroutines.py:196), Var($106build_slice.48, _loop_hafnian_subroutines.py:196)]) ['$100build_slice.44', '$106build_slice.48', '$108build_tuple.49']
    $110binary_subscr.50 = getitem(value=A_nonzero, index=$108build_tuple.49, fn=<built-in function getitem>) ['$108build_tuple.49', '$110binary_subscr.50', 'A_nonzero']
    $112binary_multiply.51 = kept_edges_nonzero * $110binary_subscr.50 ['$110binary_subscr.50', '$112binary_multiply.51', 'kept_edges_nonzero']
    $const116.53 = const(NoneType, None)     ['$const116.53']
    $const118.54 = const(NoneType, None)     ['$const118.54']
    $120build_slice.55 = global(slice: <class 'slice'>) ['$120build_slice.55']
    $120build_slice.56 = call $120build_slice.55($const116.53, $const118.54, func=$120build_slice.55, args=(Var($const116.53, _loop_hafnian_subroutines.py:196), Var($const118.54, _loop_hafnian_subroutines.py:196)), kws=(), vararg=None, target=None) ['$120build_slice.55', '$120build_slice.56', '$const116.53', '$const118.54']
    $const122.57 = const(NoneType, None)     ['$const122.57']
    $126build_slice.59 = global(slice: <class 'slice'>) ['$126build_slice.59']
    $126build_slice.60 = call $126build_slice.59($const122.57, n_nonzero_edges, func=$126build_slice.59, args=(Var($const122.57, _loop_hafnian_subroutines.py:196), Var(n_nonzero_edges, _loop_hafnian_subroutines.py:189)), kws=(), vararg=None, target=None) ['$126build_slice.59', '$126build_slice.60', '$const122.57', 'n_nonzero_edges']
    $128build_tuple.61 = build_tuple(items=[Var($120build_slice.56, _loop_hafnian_subroutines.py:196), Var($126build_slice.60, _loop_hafnian_subroutines.py:196)]) ['$120build_slice.56', '$126build_slice.60', '$128build_tuple.61']
    AX_nonzero[$128build_tuple.61] = $112binary_multiply.51 ['$112binary_multiply.51', '$128build_tuple.61', 'AX_nonzero']
    $const136.64 = const(NoneType, None)     ['$const136.64']
    $const138.65 = const(NoneType, None)     ['$const138.65']
    $140build_slice.66 = global(slice: <class 'slice'>) ['$140build_slice.66']
    $140build_slice.67 = call $140build_slice.66($const136.64, $const138.65, func=$140build_slice.66, args=(Var($const136.64, _loop_hafnian_subroutines.py:197), Var($const138.65, _loop_hafnian_subroutines.py:197)), kws=(), vararg=None, target=None) ['$140build_slice.66', '$140build_slice.67', '$const136.64', '$const138.65']
    $const142.68 = const(NoneType, None)     ['$const142.68']
    $146build_slice.70 = global(slice: <class 'slice'>) ['$146build_slice.70']
    $146build_slice.71 = call $146build_slice.70($const142.68, n_nonzero_edges, func=$146build_slice.70, args=(Var($const142.68, _loop_hafnian_subroutines.py:197), Var(n_nonzero_edges, _loop_hafnian_subroutines.py:189)), kws=(), vararg=None, target=None) ['$146build_slice.70', '$146build_slice.71', '$const142.68', 'n_nonzero_edges']
    $148build_tuple.72 = build_tuple(items=[Var($140build_slice.67, _loop_hafnian_subroutines.py:197), Var($146build_slice.71, _loop_hafnian_subroutines.py:197)]) ['$140build_slice.67', '$146build_slice.71', '$148build_tuple.72']
    $150binary_subscr.73 = getitem(value=A_nonzero, index=$148build_tuple.72, fn=<built-in function getitem>) ['$148build_tuple.72', '$150binary_subscr.73', 'A_nonzero']
    $152binary_multiply.74 = kept_edges_nonzero * $150binary_subscr.73 ['$150binary_subscr.73', '$152binary_multiply.74', 'kept_edges_nonzero']
    $const156.76 = const(NoneType, None)     ['$const156.76']
    $const158.77 = const(NoneType, None)     ['$const158.77']
    $160build_slice.78 = global(slice: <class 'slice'>) ['$160build_slice.78']
    $160build_slice.79 = call $160build_slice.78($const156.76, $const158.77, func=$160build_slice.78, args=(Var($const156.76, _loop_hafnian_subroutines.py:197), Var($const158.77, _loop_hafnian_subroutines.py:197)), kws=(), vararg=None, target=None) ['$160build_slice.78', '$160build_slice.79', '$const156.76', '$const158.77']
    $const164.81 = const(NoneType, None)     ['$const164.81']
    $166build_slice.82 = global(slice: <class 'slice'>) ['$166build_slice.82']
    $166build_slice.83 = call $166build_slice.82(n_nonzero_edges, $const164.81, func=$166build_slice.82, args=(Var(n_nonzero_edges, _loop_hafnian_subroutines.py:189), Var($const164.81, _loop_hafnian_subroutines.py:197)), kws=(), vararg=None, target=None) ['$166build_slice.82', '$166build_slice.83', '$const164.81', 'n_nonzero_edges']
    $168build_tuple.84 = build_tuple(items=[Var($160build_slice.79, _loop_hafnian_subroutines.py:197), Var($166build_slice.83, _loop_hafnian_subroutines.py:197)]) ['$160build_slice.79', '$166build_slice.83', '$168build_tuple.84']
    AX_nonzero[$168build_tuple.84] = $152binary_multiply.74 ['$152binary_multiply.74', '$168build_tuple.84', 'AX_nonzero']
    D_nonzero = getitem(value=D, index=nonzero_rows, fn=<built-in function getitem>) ['D', 'D_nonzero', 'nonzero_rows']
    $180load_global.88 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>) ['$180load_global.88']
    $182load_attr.89 = getattr(value=$180load_global.88, attr=empty_like) ['$180load_global.88', '$182load_attr.89']
    $186load_global.91 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>) ['$186load_global.91']
    $188load_attr.92 = getattr(value=$186load_global.91, attr=complex128) ['$186load_global.91', '$188load_attr.92']
    XD_nonzero = call $182load_attr.89(D_nonzero, func=$182load_attr.89, args=[Var(D_nonzero, _loop_hafnian_subroutines.py:199)], kws=[('dtype', Var($188load_attr.92, _loop_hafnian_subroutines.py:201))], vararg=None, target=None) ['$182load_attr.89', '$188load_attr.92', 'D_nonzero', 'XD_nonzero']
    $const202.98 = const(NoneType, None)     ['$const202.98']
    $204build_slice.99 = global(slice: <class 'slice'>) ['$204build_slice.99']
    $204build_slice.100 = call $204build_slice.99(n_nonzero_edges, $const202.98, func=$204build_slice.99, args=(Var(n_nonzero_edges, _loop_hafnian_subroutines.py:189), Var($const202.98, _loop_hafnian_subroutines.py:202)), kws=(), vararg=None, target=None) ['$204build_slice.100', '$204build_slice.99', '$const202.98', 'n_nonzero_edges']
    $206binary_subscr.101 = getitem(value=D_nonzero, index=$204build_slice.100, fn=<built-in function getitem>) ['$204build_slice.100', '$206binary_subscr.101', 'D_nonzero']
    $208binary_multiply.102 = kept_edges_nonzero * $206binary_subscr.101 ['$206binary_subscr.101', '$208binary_multiply.102', 'kept_edges_nonzero']
    $const212.104 = const(NoneType, None)    ['$const212.104']
    $216build_slice.106 = global(slice: <class 'slice'>) ['$216build_slice.106']
    $216build_slice.107 = call $216build_slice.106($const212.104, n_nonzero_edges, func=$216build_slice.106, args=(Var($const212.104, _loop_hafnian_subroutines.py:202), Var(n_nonzero_edges, _loop_hafnian_subroutines.py:189)), kws=(), vararg=None, target=None) ['$216build_slice.106', '$216build_slice.107', '$const212.104', 'n_nonzero_edges']
    XD_nonzero[$216build_slice.107] = $208binary_multiply.102 ['$208binary_multiply.102', '$216build_slice.107', 'XD_nonzero']
    $const224.110 = const(NoneType, None)    ['$const224.110']
    $228build_slice.112 = global(slice: <class 'slice'>) ['$228build_slice.112']
    $228build_slice.113 = call $228build_slice.112($const224.110, n_nonzero_edges, func=$228build_slice.112, args=(Var($const224.110, _loop_hafnian_subroutines.py:203), Var(n_nonzero_edges, _loop_hafnian_subroutines.py:189)), kws=(), vararg=None, target=None) ['$228build_slice.112', '$228build_slice.113', '$const224.110', 'n_nonzero_edges']
    $230binary_subscr.114 = getitem(value=D_nonzero, index=$228build_slice.113, fn=<built-in function getitem>) ['$228build_slice.113', '$230binary_subscr.114', 'D_nonzero']
    $232binary_multiply.115 = kept_edges_nonzero * $230binary_subscr.114 ['$230binary_subscr.114', '$232binary_multiply.115', 'kept_edges_nonzero']
    $const238.118 = const(NoneType, None)    ['$const238.118']
    $240build_slice.119 = global(slice: <class 'slice'>) ['$240build_slice.119']
    $240build_slice.120 = call $240build_slice.119(n_nonzero_edges, $const238.118, func=$240build_slice.119, args=(Var(n_nonzero_edges, _loop_hafnian_subroutines.py:189), Var($const238.118, _loop_hafnian_subroutines.py:203)), kws=(), vararg=None, target=None) ['$240build_slice.119', '$240build_slice.120', '$const238.118', 'n_nonzero_edges']
    XD_nonzero[$240build_slice.120] = $232binary_multiply.115 ['$232binary_multiply.115', '$240build_slice.120', 'XD_nonzero']
    $const246.122 = const(NoneType, None)    ['$const246.122']
    $248is_op.123 = oddV is not $const246.122 ['$248is_op.123', '$const246.122', 'oddV']
    bool250 = global(bool: <class 'bool'>)   ['bool250']
    $250pred = call bool250($248is_op.123, func=bool250, args=(Var($248is_op.123, _loop_hafnian_subroutines.py:205),), kws=(), vararg=None, target=None) ['$248is_op.123', '$250pred', 'bool250']
    branch $250pred, 254, 328                ['$250pred']
label 254:
    oddV_nonzero = getitem(value=oddV, index=nonzero_rows, fn=<built-in function getitem>) ['nonzero_rows', 'oddV', 'oddV_nonzero']
    $262load_global.3 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>) ['$262load_global.3']
    $264load_attr.4 = getattr(value=$262load_global.3, attr=empty_like) ['$262load_global.3', '$264load_attr.4']
    $268load_global.6 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>) ['$268load_global.6']
    $270load_attr.7 = getattr(value=$268load_global.6, attr=complex128) ['$268load_global.6', '$270load_attr.7']
    oddVX_nonzero = call $264load_attr.4(oddV_nonzero, func=$264load_attr.4, args=[Var(oddV_nonzero, _loop_hafnian_subroutines.py:206)], kws=[('dtype', Var($270load_attr.7, _loop_hafnian_subroutines.py:207))], vararg=None, target=None) ['$264load_attr.4', '$270load_attr.7', 'oddVX_nonzero', 'oddV_nonzero']
    $const284.13 = const(NoneType, None)     ['$const284.13']
    $286build_slice.14 = global(slice: <class 'slice'>) ['$286build_slice.14']
    $286build_slice.15 = call $286build_slice.14(n_nonzero_edges, $const284.13, func=$286build_slice.14, args=(Var(n_nonzero_edges, _loop_hafnian_subroutines.py:189), Var($const284.13, _loop_hafnian_subroutines.py:208)), kws=(), vararg=None, target=None) ['$286build_slice.14', '$286build_slice.15', '$const284.13', 'n_nonzero_edges']
    $288binary_subscr.16 = getitem(value=oddV_nonzero, index=$286build_slice.15, fn=<built-in function getitem>) ['$286build_slice.15', '$288binary_subscr.16', 'oddV_nonzero']
    $290binary_multiply.17 = kept_edges_nonzero * $288binary_subscr.16 ['$288binary_subscr.16', '$290binary_multiply.17', 'kept_edges_nonzero']
    $const294.19 = const(NoneType, None)     ['$const294.19']
    $298build_slice.21 = global(slice: <class 'slice'>) ['$298build_slice.21']
    $298build_slice.22 = call $298build_slice.21($const294.19, n_nonzero_edges, func=$298build_slice.21, args=(Var($const294.19, _loop_hafnian_subroutines.py:208), Var(n_nonzero_edges, _loop_hafnian_subroutines.py:189)), kws=(), vararg=None, target=None) ['$298build_slice.21', '$298build_slice.22', '$const294.19', 'n_nonzero_edges']
    oddVX_nonzero[$298build_slice.22] = $290binary_multiply.17 ['$290binary_multiply.17', '$298build_slice.22', 'oddVX_nonzero']
    $const306.25 = const(NoneType, None)     ['$const306.25']
    $310build_slice.27 = global(slice: <class 'slice'>) ['$310build_slice.27']
    $310build_slice.28 = call $310build_slice.27($const306.25, n_nonzero_edges, func=$310build_slice.27, args=(Var($const306.25, _loop_hafnian_subroutines.py:209), Var(n_nonzero_edges, _loop_hafnian_subroutines.py:189)), kws=(), vararg=None, target=None) ['$310build_slice.27', '$310build_slice.28', '$const306.25', 'n_nonzero_edges']
    $312binary_subscr.29 = getitem(value=oddV_nonzero, index=$310build_slice.28, fn=<built-in function getitem>) ['$310build_slice.28', '$312binary_subscr.29', 'oddV_nonzero']
    $314binary_multiply.30 = kept_edges_nonzero * $312binary_subscr.29 ['$312binary_subscr.29', '$314binary_multiply.30', 'kept_edges_nonzero']
    $const320.33 = const(NoneType, None)     ['$const320.33']
    $322build_slice.34 = global(slice: <class 'slice'>) ['$322build_slice.34']
    $322build_slice.35 = call $322build_slice.34(n_nonzero_edges, $const320.33, func=$322build_slice.34, args=(Var(n_nonzero_edges, _loop_hafnian_subroutines.py:189), Var($const320.33, _loop_hafnian_subroutines.py:209)), kws=(), vararg=None, target=None) ['$322build_slice.34', '$322build_slice.35', '$const320.33', 'n_nonzero_edges']
    oddVX_nonzero[$322build_slice.35] = $314binary_multiply.30 ['$314binary_multiply.30', '$322build_slice.35', 'oddVX_nonzero']
    jump 332                                 []
label 328:
    oddVX_nonzero = const(NoneType, None)    ['oddVX_nonzero']
    jump 332                                 []
label 332:
    $340build_tuple.4 = build_tuple(items=[Var(AX_nonzero, _loop_hafnian_subroutines.py:195), Var(XD_nonzero, _loop_hafnian_subroutines.py:201), Var(D_nonzero, _loop_hafnian_subroutines.py:199), Var(oddVX_nonzero, _loop_hafnian_subroutines.py:207)]) ['$340build_tuple.4', 'AX_nonzero', 'D_nonzero', 'XD_nonzero', 'oddVX_nonzero']
    $342return_value.5 = cast(value=$340build_tuple.4) ['$340build_tuple.4', '$342return_value.5']
    return $342return_value.5                ['$342return_value.5']

DEBUG 2022-02-14 16:37:59,408 ==== SSA block analysis pass on 0
DEBUG 2022-02-14 16:37:59,408 Running <numba.core.ssa._GatherDefsHandler object at 0x7fa0472f3190>
DEBUG 2022-02-14 16:37:59,408 on stmt: kept_edges = arg(0, name=kept_edges)
DEBUG 2022-02-14 16:37:59,408 on stmt: A = arg(1, name=A)
DEBUG 2022-02-14 16:37:59,408 on stmt: D = arg(2, name=D)
DEBUG 2022-02-14 16:37:59,408 on stmt: oddV = arg(3, name=oddV)
DEBUG 2022-02-14 16:37:59,408 on stmt: $2load_global.0 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:37:59,408 on stmt: $4load_method.1 = getattr(value=$2load_global.0, attr=concatenate)
DEBUG 2022-02-14 16:37:59,408 on stmt: $10build_tuple.4 = build_tuple(items=[Var(kept_edges, _loop_hafnian_subroutines.py:187), Var(kept_edges, _loop_hafnian_subroutines.py:187)])
DEBUG 2022-02-14 16:37:59,408 on stmt: z = call $4load_method.1($10build_tuple.4, func=$4load_method.1, args=[Var($10build_tuple.4, _loop_hafnian_subroutines.py:187)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:37:59,408 on stmt: $16load_global.6 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:37:59,408 on stmt: $18load_method.7 = getattr(value=$16load_global.6, attr=where)
DEBUG 2022-02-14 16:37:59,408 on stmt: $const22.9 = const(int, 0)
DEBUG 2022-02-14 16:37:59,408 on stmt: $24compare_op.10 = z != $const22.9
DEBUG 2022-02-14 16:37:59,409 on stmt: $26call_method.11 = call $18load_method.7($24compare_op.10, func=$18load_method.7, args=[Var($24compare_op.10, _loop_hafnian_subroutines.py:188)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:37:59,409 on stmt: $const28.12 = const(int, 0)
DEBUG 2022-02-14 16:37:59,409 on stmt: nonzero_rows = static_getitem(value=$26call_method.11, index=0, index_var=$const28.12, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:37:59,409 on stmt: $34load_global.14 = global(len: <built-in function len>)
DEBUG 2022-02-14 16:37:59,409 on stmt: $38call_function.16 = call $34load_global.14(nonzero_rows, func=$34load_global.14, args=[Var(nonzero_rows, _loop_hafnian_subroutines.py:188)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:37:59,409 on stmt: $const40.17 = const(int, 2)
DEBUG 2022-02-14 16:37:59,409 on stmt: n_nonzero_edges = $38call_function.16 // $const40.17
DEBUG 2022-02-14 16:37:59,409 on stmt: $48load_global.20 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:37:59,409 on stmt: $50load_method.21 = getattr(value=$48load_global.20, attr=where)
DEBUG 2022-02-14 16:37:59,409 on stmt: $const54.23 = const(int, 0)
DEBUG 2022-02-14 16:37:59,409 on stmt: $56compare_op.24 = kept_edges != $const54.23
DEBUG 2022-02-14 16:37:59,409 on stmt: $58call_method.25 = call $50load_method.21($56compare_op.24, func=$50load_method.21, args=[Var($56compare_op.24, _loop_hafnian_subroutines.py:191)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:37:59,409 on stmt: kept_edges_nonzero = getitem(value=kept_edges, index=$58call_method.25, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:37:59,409 on stmt: $64load_global.27 = global(nb_ix: CPUDispatcher(<function nb_ix at 0x7fa047ebe550>))
DEBUG 2022-02-14 16:37:59,409 on stmt: A_nonzero = call $64load_global.27(A, nonzero_rows, nonzero_rows, func=$64load_global.27, args=[Var(A, _loop_hafnian_subroutines.py:187), Var(nonzero_rows, _loop_hafnian_subroutines.py:188), Var(nonzero_rows, _loop_hafnian_subroutines.py:188)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:37:59,409 on stmt: $76load_global.32 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:37:59,409 on stmt: $78load_attr.33 = getattr(value=$76load_global.32, attr=empty_like)
DEBUG 2022-02-14 16:37:59,409 on stmt: $82load_global.35 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:37:59,409 on stmt: $84load_attr.36 = getattr(value=$82load_global.35, attr=complex128)
DEBUG 2022-02-14 16:37:59,409 on stmt: AX_nonzero = call $78load_attr.33(A_nonzero, func=$78load_attr.33, args=[Var(A_nonzero, _loop_hafnian_subroutines.py:193)], kws=[('dtype', Var($84load_attr.36, _loop_hafnian_subroutines.py:195))], vararg=None, target=None)
DEBUG 2022-02-14 16:37:59,409 on stmt: $const96.41 = const(NoneType, None)
DEBUG 2022-02-14 16:37:59,409 on stmt: $const98.42 = const(NoneType, None)
DEBUG 2022-02-14 16:37:59,409 on stmt: $100build_slice.43 = global(slice: <class 'slice'>)
DEBUG 2022-02-14 16:37:59,410 on stmt: $100build_slice.44 = call $100build_slice.43($const96.41, $const98.42, func=$100build_slice.43, args=(Var($const96.41, _loop_hafnian_subroutines.py:196), Var($const98.42, _loop_hafnian_subroutines.py:196)), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:37:59,410 on stmt: $const104.46 = const(NoneType, None)
DEBUG 2022-02-14 16:37:59,410 on stmt: $106build_slice.47 = global(slice: <class 'slice'>)
DEBUG 2022-02-14 16:37:59,410 on stmt: $106build_slice.48 = call $106build_slice.47(n_nonzero_edges, $const104.46, func=$106build_slice.47, args=(Var(n_nonzero_edges, _loop_hafnian_subroutines.py:189), Var($const104.46, _loop_hafnian_subroutines.py:196)), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:37:59,410 on stmt: $108build_tuple.49 = build_tuple(items=[Var($100build_slice.44, _loop_hafnian_subroutines.py:196), Var($106build_slice.48, _loop_hafnian_subroutines.py:196)])
DEBUG 2022-02-14 16:37:59,410 on stmt: $110binary_subscr.50 = getitem(value=A_nonzero, index=$108build_tuple.49, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:37:59,410 on stmt: $112binary_multiply.51 = kept_edges_nonzero * $110binary_subscr.50
DEBUG 2022-02-14 16:37:59,410 on stmt: $const116.53 = const(NoneType, None)
DEBUG 2022-02-14 16:37:59,410 on stmt: $const118.54 = const(NoneType, None)
DEBUG 2022-02-14 16:37:59,410 on stmt: $120build_slice.55 = global(slice: <class 'slice'>)
DEBUG 2022-02-14 16:37:59,410 on stmt: $120build_slice.56 = call $120build_slice.55($const116.53, $const118.54, func=$120build_slice.55, args=(Var($const116.53, _loop_hafnian_subroutines.py:196), Var($const118.54, _loop_hafnian_subroutines.py:196)), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:37:59,410 on stmt: $const122.57 = const(NoneType, None)
DEBUG 2022-02-14 16:37:59,410 on stmt: $126build_slice.59 = global(slice: <class 'slice'>)
DEBUG 2022-02-14 16:37:59,410 on stmt: $126build_slice.60 = call $126build_slice.59($const122.57, n_nonzero_edges, func=$126build_slice.59, args=(Var($const122.57, _loop_hafnian_subroutines.py:196), Var(n_nonzero_edges, _loop_hafnian_subroutines.py:189)), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:37:59,410 on stmt: $128build_tuple.61 = build_tuple(items=[Var($120build_slice.56, _loop_hafnian_subroutines.py:196), Var($126build_slice.60, _loop_hafnian_subroutines.py:196)])
DEBUG 2022-02-14 16:37:59,410 on stmt: AX_nonzero[$128build_tuple.61] = $112binary_multiply.51
DEBUG 2022-02-14 16:37:59,410 on stmt: $const136.64 = const(NoneType, None)
DEBUG 2022-02-14 16:37:59,410 on stmt: $const138.65 = const(NoneType, None)
DEBUG 2022-02-14 16:37:59,410 on stmt: $140build_slice.66 = global(slice: <class 'slice'>)
DEBUG 2022-02-14 16:37:59,410 on stmt: $140build_slice.67 = call $140build_slice.66($const136.64, $const138.65, func=$140build_slice.66, args=(Var($const136.64, _loop_hafnian_subroutines.py:197), Var($const138.65, _loop_hafnian_subroutines.py:197)), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:37:59,410 on stmt: $const142.68 = const(NoneType, None)
DEBUG 2022-02-14 16:37:59,410 on stmt: $146build_slice.70 = global(slice: <class 'slice'>)
DEBUG 2022-02-14 16:37:59,411 on stmt: $146build_slice.71 = call $146build_slice.70($const142.68, n_nonzero_edges, func=$146build_slice.70, args=(Var($const142.68, _loop_hafnian_subroutines.py:197), Var(n_nonzero_edges, _loop_hafnian_subroutines.py:189)), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:37:59,411 on stmt: $148build_tuple.72 = build_tuple(items=[Var($140build_slice.67, _loop_hafnian_subroutines.py:197), Var($146build_slice.71, _loop_hafnian_subroutines.py:197)])
DEBUG 2022-02-14 16:37:59,411 on stmt: $150binary_subscr.73 = getitem(value=A_nonzero, index=$148build_tuple.72, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:37:59,411 on stmt: $152binary_multiply.74 = kept_edges_nonzero * $150binary_subscr.73
DEBUG 2022-02-14 16:37:59,411 on stmt: $const156.76 = const(NoneType, None)
DEBUG 2022-02-14 16:37:59,411 on stmt: $const158.77 = const(NoneType, None)
DEBUG 2022-02-14 16:37:59,411 on stmt: $160build_slice.78 = global(slice: <class 'slice'>)
DEBUG 2022-02-14 16:37:59,411 on stmt: $160build_slice.79 = call $160build_slice.78($const156.76, $const158.77, func=$160build_slice.78, args=(Var($const156.76, _loop_hafnian_subroutines.py:197), Var($const158.77, _loop_hafnian_subroutines.py:197)), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:37:59,411 on stmt: $const164.81 = const(NoneType, None)
DEBUG 2022-02-14 16:37:59,411 on stmt: $166build_slice.82 = global(slice: <class 'slice'>)
DEBUG 2022-02-14 16:37:59,411 on stmt: $166build_slice.83 = call $166build_slice.82(n_nonzero_edges, $const164.81, func=$166build_slice.82, args=(Var(n_nonzero_edges, _loop_hafnian_subroutines.py:189), Var($const164.81, _loop_hafnian_subroutines.py:197)), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:37:59,411 on stmt: $168build_tuple.84 = build_tuple(items=[Var($160build_slice.79, _loop_hafnian_subroutines.py:197), Var($166build_slice.83, _loop_hafnian_subroutines.py:197)])
DEBUG 2022-02-14 16:37:59,411 on stmt: AX_nonzero[$168build_tuple.84] = $152binary_multiply.74
DEBUG 2022-02-14 16:37:59,411 on stmt: D_nonzero = getitem(value=D, index=nonzero_rows, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:37:59,411 on stmt: $180load_global.88 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:37:59,411 on stmt: $182load_attr.89 = getattr(value=$180load_global.88, attr=empty_like)
DEBUG 2022-02-14 16:37:59,411 on stmt: $186load_global.91 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:37:59,411 on stmt: $188load_attr.92 = getattr(value=$186load_global.91, attr=complex128)
DEBUG 2022-02-14 16:37:59,411 on stmt: XD_nonzero = call $182load_attr.89(D_nonzero, func=$182load_attr.89, args=[Var(D_nonzero, _loop_hafnian_subroutines.py:199)], kws=[('dtype', Var($188load_attr.92, _loop_hafnian_subroutines.py:201))], vararg=None, target=None)
DEBUG 2022-02-14 16:37:59,411 on stmt: $const202.98 = const(NoneType, None)
DEBUG 2022-02-14 16:37:59,411 on stmt: $204build_slice.99 = global(slice: <class 'slice'>)
DEBUG 2022-02-14 16:37:59,411 on stmt: $204build_slice.100 = call $204build_slice.99(n_nonzero_edges, $const202.98, func=$204build_slice.99, args=(Var(n_nonzero_edges, _loop_hafnian_subroutines.py:189), Var($const202.98, _loop_hafnian_subroutines.py:202)), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:37:59,412 on stmt: $206binary_subscr.101 = getitem(value=D_nonzero, index=$204build_slice.100, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:37:59,412 on stmt: $208binary_multiply.102 = kept_edges_nonzero * $206binary_subscr.101
DEBUG 2022-02-14 16:37:59,412 on stmt: $const212.104 = const(NoneType, None)
DEBUG 2022-02-14 16:37:59,412 on stmt: $216build_slice.106 = global(slice: <class 'slice'>)
DEBUG 2022-02-14 16:37:59,412 on stmt: $216build_slice.107 = call $216build_slice.106($const212.104, n_nonzero_edges, func=$216build_slice.106, args=(Var($const212.104, _loop_hafnian_subroutines.py:202), Var(n_nonzero_edges, _loop_hafnian_subroutines.py:189)), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:37:59,412 on stmt: XD_nonzero[$216build_slice.107] = $208binary_multiply.102
DEBUG 2022-02-14 16:37:59,412 on stmt: $const224.110 = const(NoneType, None)
DEBUG 2022-02-14 16:37:59,412 on stmt: $228build_slice.112 = global(slice: <class 'slice'>)
DEBUG 2022-02-14 16:37:59,412 on stmt: $228build_slice.113 = call $228build_slice.112($const224.110, n_nonzero_edges, func=$228build_slice.112, args=(Var($const224.110, _loop_hafnian_subroutines.py:203), Var(n_nonzero_edges, _loop_hafnian_subroutines.py:189)), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:37:59,412 on stmt: $230binary_subscr.114 = getitem(value=D_nonzero, index=$228build_slice.113, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:37:59,412 on stmt: $232binary_multiply.115 = kept_edges_nonzero * $230binary_subscr.114
DEBUG 2022-02-14 16:37:59,412 on stmt: $const238.118 = const(NoneType, None)
DEBUG 2022-02-14 16:37:59,412 on stmt: $240build_slice.119 = global(slice: <class 'slice'>)
DEBUG 2022-02-14 16:37:59,412 on stmt: $240build_slice.120 = call $240build_slice.119(n_nonzero_edges, $const238.118, func=$240build_slice.119, args=(Var(n_nonzero_edges, _loop_hafnian_subroutines.py:189), Var($const238.118, _loop_hafnian_subroutines.py:203)), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:37:59,412 on stmt: XD_nonzero[$240build_slice.120] = $232binary_multiply.115
DEBUG 2022-02-14 16:37:59,412 on stmt: $const246.122 = const(NoneType, None)
DEBUG 2022-02-14 16:37:59,412 on stmt: $248is_op.123 = oddV is not $const246.122
DEBUG 2022-02-14 16:37:59,412 on stmt: bool250 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:37:59,413 on stmt: $250pred = call bool250($248is_op.123, func=bool250, args=(Var($248is_op.123, _loop_hafnian_subroutines.py:205),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:37:59,413 on stmt: branch $250pred, 254, 328
DEBUG 2022-02-14 16:37:59,413 ==== SSA block analysis pass on 254
DEBUG 2022-02-14 16:37:59,413 Running <numba.core.ssa._GatherDefsHandler object at 0x7fa0472f3190>
DEBUG 2022-02-14 16:37:59,413 on stmt: oddV_nonzero = getitem(value=oddV, index=nonzero_rows, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:37:59,413 on stmt: $262load_global.3 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:37:59,413 on stmt: $264load_attr.4 = getattr(value=$262load_global.3, attr=empty_like)
DEBUG 2022-02-14 16:37:59,413 on stmt: $268load_global.6 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:37:59,413 on stmt: $270load_attr.7 = getattr(value=$268load_global.6, attr=complex128)
DEBUG 2022-02-14 16:37:59,413 on stmt: oddVX_nonzero = call $264load_attr.4(oddV_nonzero, func=$264load_attr.4, args=[Var(oddV_nonzero, _loop_hafnian_subroutines.py:206)], kws=[('dtype', Var($270load_attr.7, _loop_hafnian_subroutines.py:207))], vararg=None, target=None)
DEBUG 2022-02-14 16:37:59,413 on stmt: $const284.13 = const(NoneType, None)
DEBUG 2022-02-14 16:37:59,413 on stmt: $286build_slice.14 = global(slice: <class 'slice'>)
DEBUG 2022-02-14 16:37:59,413 on stmt: $286build_slice.15 = call $286build_slice.14(n_nonzero_edges, $const284.13, func=$286build_slice.14, args=(Var(n_nonzero_edges, _loop_hafnian_subroutines.py:189), Var($const284.13, _loop_hafnian_subroutines.py:208)), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:37:59,413 on stmt: $288binary_subscr.16 = getitem(value=oddV_nonzero, index=$286build_slice.15, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:37:59,413 on stmt: $290binary_multiply.17 = kept_edges_nonzero * $288binary_subscr.16
DEBUG 2022-02-14 16:37:59,413 on stmt: $const294.19 = const(NoneType, None)
DEBUG 2022-02-14 16:37:59,413 on stmt: $298build_slice.21 = global(slice: <class 'slice'>)
DEBUG 2022-02-14 16:37:59,413 on stmt: $298build_slice.22 = call $298build_slice.21($const294.19, n_nonzero_edges, func=$298build_slice.21, args=(Var($const294.19, _loop_hafnian_subroutines.py:208), Var(n_nonzero_edges, _loop_hafnian_subroutines.py:189)), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:37:59,413 on stmt: oddVX_nonzero[$298build_slice.22] = $290binary_multiply.17
DEBUG 2022-02-14 16:37:59,413 on stmt: $const306.25 = const(NoneType, None)
DEBUG 2022-02-14 16:37:59,413 on stmt: $310build_slice.27 = global(slice: <class 'slice'>)
DEBUG 2022-02-14 16:37:59,413 on stmt: $310build_slice.28 = call $310build_slice.27($const306.25, n_nonzero_edges, func=$310build_slice.27, args=(Var($const306.25, _loop_hafnian_subroutines.py:209), Var(n_nonzero_edges, _loop_hafnian_subroutines.py:189)), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:37:59,413 on stmt: $312binary_subscr.29 = getitem(value=oddV_nonzero, index=$310build_slice.28, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:37:59,414 on stmt: $314binary_multiply.30 = kept_edges_nonzero * $312binary_subscr.29
DEBUG 2022-02-14 16:37:59,414 on stmt: $const320.33 = const(NoneType, None)
DEBUG 2022-02-14 16:37:59,414 on stmt: $322build_slice.34 = global(slice: <class 'slice'>)
DEBUG 2022-02-14 16:37:59,414 on stmt: $322build_slice.35 = call $322build_slice.34(n_nonzero_edges, $const320.33, func=$322build_slice.34, args=(Var(n_nonzero_edges, _loop_hafnian_subroutines.py:189), Var($const320.33, _loop_hafnian_subroutines.py:209)), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:37:59,414 on stmt: oddVX_nonzero[$322build_slice.35] = $314binary_multiply.30
DEBUG 2022-02-14 16:37:59,414 on stmt: jump 332
DEBUG 2022-02-14 16:37:59,414 ==== SSA block analysis pass on 328
DEBUG 2022-02-14 16:37:59,414 Running <numba.core.ssa._GatherDefsHandler object at 0x7fa0472f3190>
DEBUG 2022-02-14 16:37:59,414 on stmt: oddVX_nonzero = const(NoneType, None)
DEBUG 2022-02-14 16:37:59,414 on stmt: jump 332
DEBUG 2022-02-14 16:37:59,414 ==== SSA block analysis pass on 332
DEBUG 2022-02-14 16:37:59,414 Running <numba.core.ssa._GatherDefsHandler object at 0x7fa0472f3190>
DEBUG 2022-02-14 16:37:59,414 on stmt: $340build_tuple.4 = build_tuple(items=[Var(AX_nonzero, _loop_hafnian_subroutines.py:195), Var(XD_nonzero, _loop_hafnian_subroutines.py:201), Var(D_nonzero, _loop_hafnian_subroutines.py:199), Var(oddVX_nonzero, _loop_hafnian_subroutines.py:207)])
DEBUG 2022-02-14 16:37:59,414 on stmt: $342return_value.5 = cast(value=$340build_tuple.4)
DEBUG 2022-02-14 16:37:59,414 on stmt: return $342return_value.5
DEBUG 2022-02-14 16:37:59,415 defs defaultdict(<class 'list'>,
            {'$100build_slice.43': [<numba.core.ir.Assign object at 0x7fa04729cfa0>],
             '$100build_slice.44': [<numba.core.ir.Assign object at 0x7fa04729cf10>],
             '$106build_slice.47': [<numba.core.ir.Assign object at 0x7fa04729c8b0>],
             '$106build_slice.48': [<numba.core.ir.Assign object at 0x7fa04729c130>],
             '$108build_tuple.49': [<numba.core.ir.Assign object at 0x7fa04729c580>],
             '$10build_tuple.4': [<numba.core.ir.Assign object at 0x7fa047347400>],
             '$110binary_subscr.50': [<numba.core.ir.Assign object at 0x7fa04729c460>],
             '$112binary_multiply.51': [<numba.core.ir.Assign object at 0x7fa04729c6a0>],
             '$120build_slice.55': [<numba.core.ir.Assign object at 0x7fa04753df40>],
             '$120build_slice.56': [<numba.core.ir.Assign object at 0x7fa04753dcd0>],
             '$126build_slice.59': [<numba.core.ir.Assign object at 0x7fa0474377f0>],
             '$126build_slice.60': [<numba.core.ir.Assign object at 0x7fa047437fa0>],
             '$128build_tuple.61': [<numba.core.ir.Assign object at 0x7fa047437e50>],
             '$140build_slice.66': [<numba.core.ir.Assign object at 0x7fa047437550>],
             '$140build_slice.67': [<numba.core.ir.Assign object at 0x7fa047437370>],
             '$146build_slice.70': [<numba.core.ir.Assign object at 0x7fa0472fcd00>],
             '$146build_slice.71': [<numba.core.ir.Assign object at 0x7fa0472fc310>],
             '$148build_tuple.72': [<numba.core.ir.Assign object at 0x7fa0472fcc70>],
             '$150binary_subscr.73': [<numba.core.ir.Assign object at 0x7fa0472fc970>],
             '$152binary_multiply.74': [<numba.core.ir.Assign object at 0x7fa0472fca30>],
             '$160build_slice.78': [<numba.core.ir.Assign object at 0x7fa0472fc790>],
             '$160build_slice.79': [<numba.core.ir.Assign object at 0x7fa0472fcdf0>],
             '$166build_slice.82': [<numba.core.ir.Assign object at 0x7fa0472efc10>],
             '$166build_slice.83': [<numba.core.ir.Assign object at 0x7fa0472effd0>],
             '$168build_tuple.84': [<numba.core.ir.Assign object at 0x7fa0472efc40>],
             '$16load_global.6': [<numba.core.ir.Assign object at 0x7fa047347160>],
             '$180load_global.88': [<numba.core.ir.Assign object at 0x7fa0472ef340>],
             '$182load_attr.89': [<numba.core.ir.Assign object at 0x7fa0472ef280>],
             '$186load_global.91': [<numba.core.ir.Assign object at 0x7fa0472ef1c0>],
             '$188load_attr.92': [<numba.core.ir.Assign object at 0x7fa0472f2b20>],
             '$18load_method.7': [<numba.core.ir.Assign object at 0x7fa0472a3250>],
             '$204build_slice.100': [<numba.core.ir.Assign object at 0x7fa0472f2310>],
             '$204build_slice.99': [<numba.core.ir.Assign object at 0x7fa0472f2bb0>],
             '$206binary_subscr.101': [<numba.core.ir.Assign object at 0x7fa0472f21c0>],
             '$208binary_multiply.102': [<numba.core.ir.Assign object at 0x7fa0472f5ac0>],
             '$216build_slice.106': [<numba.core.ir.Assign object at 0x7fa0472f5dc0>],
             '$216build_slice.107': [<numba.core.ir.Assign object at 0x7fa0472f55e0>],
             '$228build_slice.112': [<numba.core.ir.Assign object at 0x7fa0472f5700>],
             '$228build_slice.113': [<numba.core.ir.Assign object at 0x7fa0472f5d00>],
             '$230binary_subscr.114': [<numba.core.ir.Assign object at 0x7fa0472f9f40>],
             '$232binary_multiply.115': [<numba.core.ir.Assign object at 0x7fa0472f9d30>],
             '$240build_slice.119': [<numba.core.ir.Assign object at 0x7fa0472f99d0>],
             '$240build_slice.120': [<numba.core.ir.Assign object at 0x7fa0472f9550>],
             '$248is_op.123': [<numba.core.ir.Assign object at 0x7fa0472f91c0>],
             '$24compare_op.10': [<numba.core.ir.Assign object at 0x7fa0472b0b50>],
             '$250pred': [<numba.core.ir.Assign object at 0x7fa0473000d0>],
             '$262load_global.3': [<numba.core.ir.Assign object at 0x7fa04724faf0>],
             '$264load_attr.4': [<numba.core.ir.Assign object at 0x7fa0472fc2e0>],
             '$268load_global.6': [<numba.core.ir.Assign object at 0x7fa0472f24f0>],
             '$26call_method.11': [<numba.core.ir.Assign object at 0x7fa0472b0d30>],
             '$270load_attr.7': [<numba.core.ir.Assign object at 0x7fa0472f5970>],
             '$286build_slice.14': [<numba.core.ir.Assign object at 0x7fa047300910>],
             '$286build_slice.15': [<numba.core.ir.Assign object at 0x7fa047300a30>],
             '$288binary_subscr.16': [<numba.core.ir.Assign object at 0x7fa047300be0>],
             '$290binary_multiply.17': [<numba.core.ir.Assign object at 0x7fa047300d60>],
             '$298build_slice.21': [<numba.core.ir.Assign object at 0x7fa0472ff2b0>],
             '$298build_slice.22': [<numba.core.ir.Assign object at 0x7fa0472ff3d0>],
             '$2load_global.0': [<numba.core.ir.Assign object at 0x7fa047625790>],
             '$310build_slice.27': [<numba.core.ir.Assign object at 0x7fa0472ffaf0>],
             '$310build_slice.28': [<numba.core.ir.Assign object at 0x7fa0472ffc10>],
             '$312binary_subscr.29': [<numba.core.ir.Assign object at 0x7fa0472ffdc0>],
             '$314binary_multiply.30': [<numba.core.ir.Assign object at 0x7fa0472fff40>],
             '$322build_slice.34': [<numba.core.ir.Assign object at 0x7fa0472fe490>],
             '$322build_slice.35': [<numba.core.ir.Assign object at 0x7fa0472fe5b0>],
             '$340build_tuple.4': [<numba.core.ir.Assign object at 0x7fa0472feb20>],
             '$342return_value.5': [<numba.core.ir.Assign object at 0x7fa0472fec70>],
             '$34load_global.14': [<numba.core.ir.Assign object at 0x7fa04724f280>],
             '$38call_function.16': [<numba.core.ir.Assign object at 0x7fa04724f580>],
             '$48load_global.20': [<numba.core.ir.Assign object at 0x7fa04724fbe0>],
             '$4load_method.1': [<numba.core.ir.Assign object at 0x7fa0473473a0>],
             '$50load_method.21': [<numba.core.ir.Assign object at 0x7fa04724fd60>],
             '$56compare_op.24': [<numba.core.ir.Assign object at 0x7fa04734d700>],
             '$58call_method.25': [<numba.core.ir.Assign object at 0x7fa04734dcd0>],
             '$64load_global.27': [<numba.core.ir.Assign object at 0x7fa0472b0370>],
             '$76load_global.32': [<numba.core.ir.Assign object at 0x7fa0472a3790>],
             '$78load_attr.33': [<numba.core.ir.Assign object at 0x7fa0472a3f40>],
             '$82load_global.35': [<numba.core.ir.Assign object at 0x7fa0472a3c70>],
             '$84load_attr.36': [<numba.core.ir.Assign object at 0x7fa0472a3b20>],
             '$const104.46': [<numba.core.ir.Assign object at 0x7fa04729c4f0>],
             '$const116.53': [<numba.core.ir.Assign object at 0x7fa04753da90>],
             '$const118.54': [<numba.core.ir.Assign object at 0x7fa04753de20>],
             '$const122.57': [<numba.core.ir.Assign object at 0x7fa04724feb0>],
             '$const136.64': [<numba.core.ir.Assign object at 0x7fa047437640>],
             '$const138.65': [<numba.core.ir.Assign object at 0x7fa047437760>],
             '$const142.68': [<numba.core.ir.Assign object at 0x7fa047437190>],
             '$const156.76': [<numba.core.ir.Assign object at 0x7fa0472fc2b0>],
             '$const158.77': [<numba.core.ir.Assign object at 0x7fa0472fc040>],
             '$const164.81': [<numba.core.ir.Assign object at 0x7fa0472efdc0>],
             '$const202.98': [<numba.core.ir.Assign object at 0x7fa0472f2040>],
             '$const212.104': [<numba.core.ir.Assign object at 0x7fa0472f5f10>],
             '$const22.9': [<numba.core.ir.Assign object at 0x7fa0472b09a0>],
             '$const224.110': [<numba.core.ir.Assign object at 0x7fa0472f5070>],
             '$const238.118': [<numba.core.ir.Assign object at 0x7fa0472f96a0>],
             '$const246.122': [<numba.core.ir.Assign object at 0x7fa0472f96d0>],
             '$const28.12': [<numba.core.ir.Assign object at 0x7fa0472b0e20>],
             '$const284.13': [<numba.core.ir.Assign object at 0x7fa047300790>],
             '$const294.19': [<numba.core.ir.Assign object at 0x7fa047300fd0>],
             '$const306.25': [<numba.core.ir.Assign object at 0x7fa0472ff850>],
             '$const320.33': [<numba.core.ir.Assign object at 0x7fa0472fe310>],
             '$const40.17': [<numba.core.ir.Assign object at 0x7fa04724f6a0>],
             '$const54.23': [<numba.core.ir.Assign object at 0x7fa04734dd00>],
             '$const96.41': [<numba.core.ir.Assign object at 0x7fa0472a3880>],
             '$const98.42': [<numba.core.ir.Assign object at 0x7fa04729cc40>],
             'A': [<numba.core.ir.Assign object at 0x7fa047401fa0>],
             'AX_nonzero': [<numba.core.ir.Assign object at 0x7fa0472a3490>],
             'A_nonzero': [<numba.core.ir.Assign object at 0x7fa0472b0610>],
             'D': [<numba.core.ir.Assign object at 0x7fa0476205b0>],
             'D_nonzero': [<numba.core.ir.Assign object at 0x7fa0472ef460>],
             'XD_nonzero': [<numba.core.ir.Assign object at 0x7fa0472f2af0>],
             'bool250': [<numba.core.ir.Assign object at 0x7fa0472f98b0>],
             'kept_edges': [<numba.core.ir.Assign object at 0x7fa04734d910>],
             'kept_edges_nonzero': [<numba.core.ir.Assign object at 0x7fa04734df40>],
             'n_nonzero_edges': [<numba.core.ir.Assign object at 0x7fa04724f850>],
             'nonzero_rows': [<numba.core.ir.Assign object at 0x7fa04734db50>],
             'oddV': [<numba.core.ir.Assign object at 0x7fa047620430>],
             'oddVX_nonzero': [<numba.core.ir.Assign object at 0x7fa0473002b0>,
                               <numba.core.ir.Assign object at 0x7fa0473003d0>],
             'oddV_nonzero': [<numba.core.ir.Assign object at 0x7fa0472a3190>],
             'z': [<numba.core.ir.Assign object at 0x7fa047347610>]})
DEBUG 2022-02-14 16:37:59,415 SSA violators {'oddVX_nonzero'}
DEBUG 2022-02-14 16:37:59,415 Fix SSA violator on var oddVX_nonzero
DEBUG 2022-02-14 16:37:59,415 ==== SSA block rewrite pass on 0
DEBUG 2022-02-14 16:37:59,415 Running <numba.core.ssa._FreshVarHandler object at 0x7fa04734de20>
DEBUG 2022-02-14 16:37:59,415 on stmt: kept_edges = arg(0, name=kept_edges)
DEBUG 2022-02-14 16:37:59,415 on stmt: A = arg(1, name=A)
DEBUG 2022-02-14 16:37:59,416 on stmt: D = arg(2, name=D)
DEBUG 2022-02-14 16:37:59,416 on stmt: oddV = arg(3, name=oddV)
DEBUG 2022-02-14 16:37:59,416 on stmt: $2load_global.0 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:37:59,416 on stmt: $4load_method.1 = getattr(value=$2load_global.0, attr=concatenate)
DEBUG 2022-02-14 16:37:59,416 on stmt: $10build_tuple.4 = build_tuple(items=[Var(kept_edges, _loop_hafnian_subroutines.py:187), Var(kept_edges, _loop_hafnian_subroutines.py:187)])
DEBUG 2022-02-14 16:37:59,416 on stmt: z = call $4load_method.1($10build_tuple.4, func=$4load_method.1, args=[Var($10build_tuple.4, _loop_hafnian_subroutines.py:187)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:37:59,416 on stmt: $16load_global.6 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:37:59,416 on stmt: $18load_method.7 = getattr(value=$16load_global.6, attr=where)
DEBUG 2022-02-14 16:37:59,416 on stmt: $const22.9 = const(int, 0)
DEBUG 2022-02-14 16:37:59,416 on stmt: $24compare_op.10 = z != $const22.9
DEBUG 2022-02-14 16:37:59,416 on stmt: $26call_method.11 = call $18load_method.7($24compare_op.10, func=$18load_method.7, args=[Var($24compare_op.10, _loop_hafnian_subroutines.py:188)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:37:59,416 on stmt: $const28.12 = const(int, 0)
DEBUG 2022-02-14 16:37:59,416 on stmt: nonzero_rows = static_getitem(value=$26call_method.11, index=0, index_var=$const28.12, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:37:59,416 on stmt: $34load_global.14 = global(len: <built-in function len>)
DEBUG 2022-02-14 16:37:59,416 on stmt: $38call_function.16 = call $34load_global.14(nonzero_rows, func=$34load_global.14, args=[Var(nonzero_rows, _loop_hafnian_subroutines.py:188)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:37:59,416 on stmt: $const40.17 = const(int, 2)
DEBUG 2022-02-14 16:37:59,416 on stmt: n_nonzero_edges = $38call_function.16 // $const40.17
DEBUG 2022-02-14 16:37:59,416 on stmt: $48load_global.20 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:37:59,416 on stmt: $50load_method.21 = getattr(value=$48load_global.20, attr=where)
DEBUG 2022-02-14 16:37:59,416 on stmt: $const54.23 = const(int, 0)
DEBUG 2022-02-14 16:37:59,416 on stmt: $56compare_op.24 = kept_edges != $const54.23
DEBUG 2022-02-14 16:37:59,416 on stmt: $58call_method.25 = call $50load_method.21($56compare_op.24, func=$50load_method.21, args=[Var($56compare_op.24, _loop_hafnian_subroutines.py:191)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:37:59,417 on stmt: kept_edges_nonzero = getitem(value=kept_edges, index=$58call_method.25, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:37:59,417 on stmt: $64load_global.27 = global(nb_ix: CPUDispatcher(<function nb_ix at 0x7fa047ebe550>))
DEBUG 2022-02-14 16:37:59,417 on stmt: A_nonzero = call $64load_global.27(A, nonzero_rows, nonzero_rows, func=$64load_global.27, args=[Var(A, _loop_hafnian_subroutines.py:187), Var(nonzero_rows, _loop_hafnian_subroutines.py:188), Var(nonzero_rows, _loop_hafnian_subroutines.py:188)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:37:59,417 on stmt: $76load_global.32 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:37:59,417 on stmt: $78load_attr.33 = getattr(value=$76load_global.32, attr=empty_like)
DEBUG 2022-02-14 16:37:59,417 on stmt: $82load_global.35 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:37:59,417 on stmt: $84load_attr.36 = getattr(value=$82load_global.35, attr=complex128)
DEBUG 2022-02-14 16:37:59,417 on stmt: AX_nonzero = call $78load_attr.33(A_nonzero, func=$78load_attr.33, args=[Var(A_nonzero, _loop_hafnian_subroutines.py:193)], kws=[('dtype', Var($84load_attr.36, _loop_hafnian_subroutines.py:195))], vararg=None, target=None)
DEBUG 2022-02-14 16:37:59,417 on stmt: $const96.41 = const(NoneType, None)
DEBUG 2022-02-14 16:37:59,417 on stmt: $const98.42 = const(NoneType, None)
DEBUG 2022-02-14 16:37:59,417 on stmt: $100build_slice.43 = global(slice: <class 'slice'>)
DEBUG 2022-02-14 16:37:59,417 on stmt: $100build_slice.44 = call $100build_slice.43($const96.41, $const98.42, func=$100build_slice.43, args=(Var($const96.41, _loop_hafnian_subroutines.py:196), Var($const98.42, _loop_hafnian_subroutines.py:196)), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:37:59,418 on stmt: $const104.46 = const(NoneType, None)
DEBUG 2022-02-14 16:37:59,418 on stmt: $106build_slice.47 = global(slice: <class 'slice'>)
DEBUG 2022-02-14 16:37:59,418 on stmt: $106build_slice.48 = call $106build_slice.47(n_nonzero_edges, $const104.46, func=$106build_slice.47, args=(Var(n_nonzero_edges, _loop_hafnian_subroutines.py:189), Var($const104.46, _loop_hafnian_subroutines.py:196)), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:37:59,418 on stmt: $108build_tuple.49 = build_tuple(items=[Var($100build_slice.44, _loop_hafnian_subroutines.py:196), Var($106build_slice.48, _loop_hafnian_subroutines.py:196)])
DEBUG 2022-02-14 16:37:59,418 on stmt: $110binary_subscr.50 = getitem(value=A_nonzero, index=$108build_tuple.49, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:37:59,418 on stmt: $112binary_multiply.51 = kept_edges_nonzero * $110binary_subscr.50
DEBUG 2022-02-14 16:37:59,418 on stmt: $const116.53 = const(NoneType, None)
DEBUG 2022-02-14 16:37:59,418 on stmt: $const118.54 = const(NoneType, None)
DEBUG 2022-02-14 16:37:59,418 on stmt: $120build_slice.55 = global(slice: <class 'slice'>)
DEBUG 2022-02-14 16:37:59,418 on stmt: $120build_slice.56 = call $120build_slice.55($const116.53, $const118.54, func=$120build_slice.55, args=(Var($const116.53, _loop_hafnian_subroutines.py:196), Var($const118.54, _loop_hafnian_subroutines.py:196)), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:37:59,418 on stmt: $const122.57 = const(NoneType, None)
DEBUG 2022-02-14 16:37:59,418 on stmt: $126build_slice.59 = global(slice: <class 'slice'>)
DEBUG 2022-02-14 16:37:59,419 on stmt: $126build_slice.60 = call $126build_slice.59($const122.57, n_nonzero_edges, func=$126build_slice.59, args=(Var($const122.57, _loop_hafnian_subroutines.py:196), Var(n_nonzero_edges, _loop_hafnian_subroutines.py:189)), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:37:59,419 on stmt: $128build_tuple.61 = build_tuple(items=[Var($120build_slice.56, _loop_hafnian_subroutines.py:196), Var($126build_slice.60, _loop_hafnian_subroutines.py:196)])
DEBUG 2022-02-14 16:37:59,419 on stmt: AX_nonzero[$128build_tuple.61] = $112binary_multiply.51
DEBUG 2022-02-14 16:37:59,419 on stmt: $const136.64 = const(NoneType, None)
DEBUG 2022-02-14 16:37:59,419 on stmt: $const138.65 = const(NoneType, None)
DEBUG 2022-02-14 16:37:59,419 on stmt: $140build_slice.66 = global(slice: <class 'slice'>)
DEBUG 2022-02-14 16:37:59,419 on stmt: $140build_slice.67 = call $140build_slice.66($const136.64, $const138.65, func=$140build_slice.66, args=(Var($const136.64, _loop_hafnian_subroutines.py:197), Var($const138.65, _loop_hafnian_subroutines.py:197)), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:37:59,419 on stmt: $const142.68 = const(NoneType, None)
DEBUG 2022-02-14 16:37:59,419 on stmt: $146build_slice.70 = global(slice: <class 'slice'>)
DEBUG 2022-02-14 16:37:59,419 on stmt: $146build_slice.71 = call $146build_slice.70($const142.68, n_nonzero_edges, func=$146build_slice.70, args=(Var($const142.68, _loop_hafnian_subroutines.py:197), Var(n_nonzero_edges, _loop_hafnian_subroutines.py:189)), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:37:59,419 on stmt: $148build_tuple.72 = build_tuple(items=[Var($140build_slice.67, _loop_hafnian_subroutines.py:197), Var($146build_slice.71, _loop_hafnian_subroutines.py:197)])
DEBUG 2022-02-14 16:37:59,419 on stmt: $150binary_subscr.73 = getitem(value=A_nonzero, index=$148build_tuple.72, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:37:59,419 on stmt: $152binary_multiply.74 = kept_edges_nonzero * $150binary_subscr.73
DEBUG 2022-02-14 16:37:59,420 on stmt: $const156.76 = const(NoneType, None)
DEBUG 2022-02-14 16:37:59,420 on stmt: $const158.77 = const(NoneType, None)
DEBUG 2022-02-14 16:37:59,420 on stmt: $160build_slice.78 = global(slice: <class 'slice'>)
DEBUG 2022-02-14 16:37:59,420 on stmt: $160build_slice.79 = call $160build_slice.78($const156.76, $const158.77, func=$160build_slice.78, args=(Var($const156.76, _loop_hafnian_subroutines.py:197), Var($const158.77, _loop_hafnian_subroutines.py:197)), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:37:59,420 on stmt: $const164.81 = const(NoneType, None)
DEBUG 2022-02-14 16:37:59,420 on stmt: $166build_slice.82 = global(slice: <class 'slice'>)
DEBUG 2022-02-14 16:37:59,420 on stmt: $166build_slice.83 = call $166build_slice.82(n_nonzero_edges, $const164.81, func=$166build_slice.82, args=(Var(n_nonzero_edges, _loop_hafnian_subroutines.py:189), Var($const164.81, _loop_hafnian_subroutines.py:197)), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:37:59,420 on stmt: $168build_tuple.84 = build_tuple(items=[Var($160build_slice.79, _loop_hafnian_subroutines.py:197), Var($166build_slice.83, _loop_hafnian_subroutines.py:197)])
DEBUG 2022-02-14 16:37:59,420 on stmt: AX_nonzero[$168build_tuple.84] = $152binary_multiply.74
DEBUG 2022-02-14 16:37:59,420 on stmt: D_nonzero = getitem(value=D, index=nonzero_rows, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:37:59,420 on stmt: $180load_global.88 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:37:59,420 on stmt: $182load_attr.89 = getattr(value=$180load_global.88, attr=empty_like)
DEBUG 2022-02-14 16:37:59,420 on stmt: $186load_global.91 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:37:59,421 on stmt: $188load_attr.92 = getattr(value=$186load_global.91, attr=complex128)
DEBUG 2022-02-14 16:37:59,421 on stmt: XD_nonzero = call $182load_attr.89(D_nonzero, func=$182load_attr.89, args=[Var(D_nonzero, _loop_hafnian_subroutines.py:199)], kws=[('dtype', Var($188load_attr.92, _loop_hafnian_subroutines.py:201))], vararg=None, target=None)
DEBUG 2022-02-14 16:37:59,421 on stmt: $const202.98 = const(NoneType, None)
DEBUG 2022-02-14 16:37:59,421 on stmt: $204build_slice.99 = global(slice: <class 'slice'>)
DEBUG 2022-02-14 16:37:59,421 on stmt: $204build_slice.100 = call $204build_slice.99(n_nonzero_edges, $const202.98, func=$204build_slice.99, args=(Var(n_nonzero_edges, _loop_hafnian_subroutines.py:189), Var($const202.98, _loop_hafnian_subroutines.py:202)), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:37:59,421 on stmt: $206binary_subscr.101 = getitem(value=D_nonzero, index=$204build_slice.100, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:37:59,421 on stmt: $208binary_multiply.102 = kept_edges_nonzero * $206binary_subscr.101
DEBUG 2022-02-14 16:37:59,421 on stmt: $const212.104 = const(NoneType, None)
DEBUG 2022-02-14 16:37:59,421 on stmt: $216build_slice.106 = global(slice: <class 'slice'>)
DEBUG 2022-02-14 16:37:59,421 on stmt: $216build_slice.107 = call $216build_slice.106($const212.104, n_nonzero_edges, func=$216build_slice.106, args=(Var($const212.104, _loop_hafnian_subroutines.py:202), Var(n_nonzero_edges, _loop_hafnian_subroutines.py:189)), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:37:59,421 on stmt: XD_nonzero[$216build_slice.107] = $208binary_multiply.102
DEBUG 2022-02-14 16:37:59,421 on stmt: $const224.110 = const(NoneType, None)
DEBUG 2022-02-14 16:37:59,421 on stmt: $228build_slice.112 = global(slice: <class 'slice'>)
DEBUG 2022-02-14 16:37:59,422 on stmt: $228build_slice.113 = call $228build_slice.112($const224.110, n_nonzero_edges, func=$228build_slice.112, args=(Var($const224.110, _loop_hafnian_subroutines.py:203), Var(n_nonzero_edges, _loop_hafnian_subroutines.py:189)), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:37:59,422 on stmt: $230binary_subscr.114 = getitem(value=D_nonzero, index=$228build_slice.113, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:37:59,422 on stmt: $232binary_multiply.115 = kept_edges_nonzero * $230binary_subscr.114
DEBUG 2022-02-14 16:37:59,422 on stmt: $const238.118 = const(NoneType, None)
DEBUG 2022-02-14 16:37:59,422 on stmt: $240build_slice.119 = global(slice: <class 'slice'>)
DEBUG 2022-02-14 16:37:59,422 on stmt: $240build_slice.120 = call $240build_slice.119(n_nonzero_edges, $const238.118, func=$240build_slice.119, args=(Var(n_nonzero_edges, _loop_hafnian_subroutines.py:189), Var($const238.118, _loop_hafnian_subroutines.py:203)), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:37:59,422 on stmt: XD_nonzero[$240build_slice.120] = $232binary_multiply.115
DEBUG 2022-02-14 16:37:59,422 on stmt: $const246.122 = const(NoneType, None)
DEBUG 2022-02-14 16:37:59,422 on stmt: $248is_op.123 = oddV is not $const246.122
DEBUG 2022-02-14 16:37:59,422 on stmt: bool250 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:37:59,422 on stmt: $250pred = call bool250($248is_op.123, func=bool250, args=(Var($248is_op.123, _loop_hafnian_subroutines.py:205),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:37:59,422 on stmt: branch $250pred, 254, 328
DEBUG 2022-02-14 16:37:59,423 ==== SSA block rewrite pass on 254
DEBUG 2022-02-14 16:37:59,423 Running <numba.core.ssa._FreshVarHandler object at 0x7fa04734de20>
DEBUG 2022-02-14 16:37:59,423 on stmt: oddV_nonzero = getitem(value=oddV, index=nonzero_rows, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:37:59,423 on stmt: $262load_global.3 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:37:59,423 on stmt: $264load_attr.4 = getattr(value=$262load_global.3, attr=empty_like)
DEBUG 2022-02-14 16:37:59,423 on stmt: $268load_global.6 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:37:59,423 on stmt: $270load_attr.7 = getattr(value=$268load_global.6, attr=complex128)
DEBUG 2022-02-14 16:37:59,423 on stmt: oddVX_nonzero = call $264load_attr.4(oddV_nonzero, func=$264load_attr.4, args=[Var(oddV_nonzero, _loop_hafnian_subroutines.py:206)], kws=[('dtype', Var($270load_attr.7, _loop_hafnian_subroutines.py:207))], vararg=None, target=None)
DEBUG 2022-02-14 16:37:59,423 first assign: oddVX_nonzero
DEBUG 2022-02-14 16:37:59,423 replaced with: oddVX_nonzero = call $264load_attr.4(oddV_nonzero, func=$264load_attr.4, args=[Var(oddV_nonzero, _loop_hafnian_subroutines.py:206)], kws=[('dtype', Var($270load_attr.7, _loop_hafnian_subroutines.py:207))], vararg=None, target=None)
DEBUG 2022-02-14 16:37:59,424 on stmt: $const284.13 = const(NoneType, None)
DEBUG 2022-02-14 16:37:59,424 on stmt: $286build_slice.14 = global(slice: <class 'slice'>)
DEBUG 2022-02-14 16:37:59,424 on stmt: $286build_slice.15 = call $286build_slice.14(n_nonzero_edges, $const284.13, func=$286build_slice.14, args=(Var(n_nonzero_edges, _loop_hafnian_subroutines.py:189), Var($const284.13, _loop_hafnian_subroutines.py:208)), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:37:59,424 on stmt: $288binary_subscr.16 = getitem(value=oddV_nonzero, index=$286build_slice.15, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:37:59,424 on stmt: $290binary_multiply.17 = kept_edges_nonzero * $288binary_subscr.16
DEBUG 2022-02-14 16:37:59,424 on stmt: $const294.19 = const(NoneType, None)
DEBUG 2022-02-14 16:37:59,424 on stmt: $298build_slice.21 = global(slice: <class 'slice'>)
DEBUG 2022-02-14 16:37:59,424 on stmt: $298build_slice.22 = call $298build_slice.21($const294.19, n_nonzero_edges, func=$298build_slice.21, args=(Var($const294.19, _loop_hafnian_subroutines.py:208), Var(n_nonzero_edges, _loop_hafnian_subroutines.py:189)), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:37:59,424 on stmt: oddVX_nonzero[$298build_slice.22] = $290binary_multiply.17
DEBUG 2022-02-14 16:37:59,424 on stmt: $const306.25 = const(NoneType, None)
DEBUG 2022-02-14 16:37:59,424 on stmt: $310build_slice.27 = global(slice: <class 'slice'>)
DEBUG 2022-02-14 16:37:59,424 on stmt: $310build_slice.28 = call $310build_slice.27($const306.25, n_nonzero_edges, func=$310build_slice.27, args=(Var($const306.25, _loop_hafnian_subroutines.py:209), Var(n_nonzero_edges, _loop_hafnian_subroutines.py:189)), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:37:59,424 on stmt: $312binary_subscr.29 = getitem(value=oddV_nonzero, index=$310build_slice.28, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:37:59,424 on stmt: $314binary_multiply.30 = kept_edges_nonzero * $312binary_subscr.29
DEBUG 2022-02-14 16:37:59,424 on stmt: $const320.33 = const(NoneType, None)
DEBUG 2022-02-14 16:37:59,424 on stmt: $322build_slice.34 = global(slice: <class 'slice'>)
DEBUG 2022-02-14 16:37:59,424 on stmt: $322build_slice.35 = call $322build_slice.34(n_nonzero_edges, $const320.33, func=$322build_slice.34, args=(Var(n_nonzero_edges, _loop_hafnian_subroutines.py:189), Var($const320.33, _loop_hafnian_subroutines.py:209)), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:37:59,424 on stmt: oddVX_nonzero[$322build_slice.35] = $314binary_multiply.30
DEBUG 2022-02-14 16:37:59,424 on stmt: jump 332
DEBUG 2022-02-14 16:37:59,425 ==== SSA block rewrite pass on 328
DEBUG 2022-02-14 16:37:59,425 Running <numba.core.ssa._FreshVarHandler object at 0x7fa04734de20>
DEBUG 2022-02-14 16:37:59,425 on stmt: oddVX_nonzero = const(NoneType, None)
DEBUG 2022-02-14 16:37:59,425 replaced with: oddVX_nonzero.1 = const(NoneType, None)
DEBUG 2022-02-14 16:37:59,425 on stmt: jump 332
DEBUG 2022-02-14 16:37:59,425 ==== SSA block rewrite pass on 332
DEBUG 2022-02-14 16:37:59,425 Running <numba.core.ssa._FreshVarHandler object at 0x7fa04734de20>
DEBUG 2022-02-14 16:37:59,425 on stmt: $340build_tuple.4 = build_tuple(items=[Var(AX_nonzero, _loop_hafnian_subroutines.py:195), Var(XD_nonzero, _loop_hafnian_subroutines.py:201), Var(D_nonzero, _loop_hafnian_subroutines.py:199), Var(oddVX_nonzero, _loop_hafnian_subroutines.py:207)])
DEBUG 2022-02-14 16:37:59,425 on stmt: $342return_value.5 = cast(value=$340build_tuple.4)
DEBUG 2022-02-14 16:37:59,425 on stmt: return $342return_value.5
DEBUG 2022-02-14 16:37:59,425 Replaced assignments: defaultdict(<class 'list'>,
            {254: [<numba.core.ir.Assign object at 0x7fa04734d520>],
             328: [<numba.core.ir.Assign object at 0x7fa0472fedc0>]})
DEBUG 2022-02-14 16:37:59,425 ==== SSA block rewrite pass on 0
DEBUG 2022-02-14 16:37:59,425 Running <numba.core.ssa._FixSSAVars object at 0x7fa04734de20>
DEBUG 2022-02-14 16:37:59,425 on stmt: kept_edges = arg(0, name=kept_edges)
DEBUG 2022-02-14 16:37:59,425 on stmt: A = arg(1, name=A)
DEBUG 2022-02-14 16:37:59,425 on stmt: D = arg(2, name=D)
DEBUG 2022-02-14 16:37:59,425 on stmt: oddV = arg(3, name=oddV)
DEBUG 2022-02-14 16:37:59,425 on stmt: $2load_global.0 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:37:59,425 on stmt: $4load_method.1 = getattr(value=$2load_global.0, attr=concatenate)
DEBUG 2022-02-14 16:37:59,425 on stmt: $10build_tuple.4 = build_tuple(items=[Var(kept_edges, _loop_hafnian_subroutines.py:187), Var(kept_edges, _loop_hafnian_subroutines.py:187)])
DEBUG 2022-02-14 16:37:59,425 on stmt: z = call $4load_method.1($10build_tuple.4, func=$4load_method.1, args=[Var($10build_tuple.4, _loop_hafnian_subroutines.py:187)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:37:59,425 on stmt: $16load_global.6 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:37:59,425 on stmt: $18load_method.7 = getattr(value=$16load_global.6, attr=where)
DEBUG 2022-02-14 16:37:59,426 on stmt: $const22.9 = const(int, 0)
DEBUG 2022-02-14 16:37:59,426 on stmt: $24compare_op.10 = z != $const22.9
DEBUG 2022-02-14 16:37:59,426 on stmt: $26call_method.11 = call $18load_method.7($24compare_op.10, func=$18load_method.7, args=[Var($24compare_op.10, _loop_hafnian_subroutines.py:188)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:37:59,426 on stmt: $const28.12 = const(int, 0)
DEBUG 2022-02-14 16:37:59,426 on stmt: nonzero_rows = static_getitem(value=$26call_method.11, index=0, index_var=$const28.12, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:37:59,426 on stmt: $34load_global.14 = global(len: <built-in function len>)
DEBUG 2022-02-14 16:37:59,426 on stmt: $38call_function.16 = call $34load_global.14(nonzero_rows, func=$34load_global.14, args=[Var(nonzero_rows, _loop_hafnian_subroutines.py:188)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:37:59,426 on stmt: $const40.17 = const(int, 2)
DEBUG 2022-02-14 16:37:59,426 on stmt: n_nonzero_edges = $38call_function.16 // $const40.17
DEBUG 2022-02-14 16:37:59,426 on stmt: $48load_global.20 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:37:59,426 on stmt: $50load_method.21 = getattr(value=$48load_global.20, attr=where)
DEBUG 2022-02-14 16:37:59,426 on stmt: $const54.23 = const(int, 0)
DEBUG 2022-02-14 16:37:59,426 on stmt: $56compare_op.24 = kept_edges != $const54.23
DEBUG 2022-02-14 16:37:59,426 on stmt: $58call_method.25 = call $50load_method.21($56compare_op.24, func=$50load_method.21, args=[Var($56compare_op.24, _loop_hafnian_subroutines.py:191)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:37:59,426 on stmt: kept_edges_nonzero = getitem(value=kept_edges, index=$58call_method.25, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:37:59,426 on stmt: $64load_global.27 = global(nb_ix: CPUDispatcher(<function nb_ix at 0x7fa047ebe550>))
DEBUG 2022-02-14 16:37:59,426 on stmt: A_nonzero = call $64load_global.27(A, nonzero_rows, nonzero_rows, func=$64load_global.27, args=[Var(A, _loop_hafnian_subroutines.py:187), Var(nonzero_rows, _loop_hafnian_subroutines.py:188), Var(nonzero_rows, _loop_hafnian_subroutines.py:188)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:37:59,426 on stmt: $76load_global.32 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:37:59,426 on stmt: $78load_attr.33 = getattr(value=$76load_global.32, attr=empty_like)
DEBUG 2022-02-14 16:37:59,426 on stmt: $82load_global.35 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:37:59,426 on stmt: $84load_attr.36 = getattr(value=$82load_global.35, attr=complex128)
DEBUG 2022-02-14 16:37:59,427 on stmt: AX_nonzero = call $78load_attr.33(A_nonzero, func=$78load_attr.33, args=[Var(A_nonzero, _loop_hafnian_subroutines.py:193)], kws=[('dtype', Var($84load_attr.36, _loop_hafnian_subroutines.py:195))], vararg=None, target=None)
DEBUG 2022-02-14 16:37:59,427 on stmt: $const96.41 = const(NoneType, None)
DEBUG 2022-02-14 16:37:59,427 on stmt: $const98.42 = const(NoneType, None)
DEBUG 2022-02-14 16:37:59,427 on stmt: $100build_slice.43 = global(slice: <class 'slice'>)
DEBUG 2022-02-14 16:37:59,427 on stmt: $100build_slice.44 = call $100build_slice.43($const96.41, $const98.42, func=$100build_slice.43, args=(Var($const96.41, _loop_hafnian_subroutines.py:196), Var($const98.42, _loop_hafnian_subroutines.py:196)), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:37:59,427 on stmt: $const104.46 = const(NoneType, None)
DEBUG 2022-02-14 16:37:59,427 on stmt: $106build_slice.47 = global(slice: <class 'slice'>)
DEBUG 2022-02-14 16:37:59,427 on stmt: $106build_slice.48 = call $106build_slice.47(n_nonzero_edges, $const104.46, func=$106build_slice.47, args=(Var(n_nonzero_edges, _loop_hafnian_subroutines.py:189), Var($const104.46, _loop_hafnian_subroutines.py:196)), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:37:59,427 on stmt: $108build_tuple.49 = build_tuple(items=[Var($100build_slice.44, _loop_hafnian_subroutines.py:196), Var($106build_slice.48, _loop_hafnian_subroutines.py:196)])
DEBUG 2022-02-14 16:37:59,427 on stmt: $110binary_subscr.50 = getitem(value=A_nonzero, index=$108build_tuple.49, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:37:59,427 on stmt: $112binary_multiply.51 = kept_edges_nonzero * $110binary_subscr.50
DEBUG 2022-02-14 16:37:59,427 on stmt: $const116.53 = const(NoneType, None)
DEBUG 2022-02-14 16:37:59,427 on stmt: $const118.54 = const(NoneType, None)
DEBUG 2022-02-14 16:37:59,427 on stmt: $120build_slice.55 = global(slice: <class 'slice'>)
DEBUG 2022-02-14 16:37:59,427 on stmt: $120build_slice.56 = call $120build_slice.55($const116.53, $const118.54, func=$120build_slice.55, args=(Var($const116.53, _loop_hafnian_subroutines.py:196), Var($const118.54, _loop_hafnian_subroutines.py:196)), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:37:59,427 on stmt: $const122.57 = const(NoneType, None)
DEBUG 2022-02-14 16:37:59,427 on stmt: $126build_slice.59 = global(slice: <class 'slice'>)
DEBUG 2022-02-14 16:37:59,427 on stmt: $126build_slice.60 = call $126build_slice.59($const122.57, n_nonzero_edges, func=$126build_slice.59, args=(Var($const122.57, _loop_hafnian_subroutines.py:196), Var(n_nonzero_edges, _loop_hafnian_subroutines.py:189)), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:37:59,427 on stmt: $128build_tuple.61 = build_tuple(items=[Var($120build_slice.56, _loop_hafnian_subroutines.py:196), Var($126build_slice.60, _loop_hafnian_subroutines.py:196)])
DEBUG 2022-02-14 16:37:59,427 on stmt: AX_nonzero[$128build_tuple.61] = $112binary_multiply.51
DEBUG 2022-02-14 16:37:59,427 on stmt: $const136.64 = const(NoneType, None)
DEBUG 2022-02-14 16:37:59,428 on stmt: $const138.65 = const(NoneType, None)
DEBUG 2022-02-14 16:37:59,428 on stmt: $140build_slice.66 = global(slice: <class 'slice'>)
DEBUG 2022-02-14 16:37:59,428 on stmt: $140build_slice.67 = call $140build_slice.66($const136.64, $const138.65, func=$140build_slice.66, args=(Var($const136.64, _loop_hafnian_subroutines.py:197), Var($const138.65, _loop_hafnian_subroutines.py:197)), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:37:59,428 on stmt: $const142.68 = const(NoneType, None)
DEBUG 2022-02-14 16:37:59,428 on stmt: $146build_slice.70 = global(slice: <class 'slice'>)
DEBUG 2022-02-14 16:37:59,428 on stmt: $146build_slice.71 = call $146build_slice.70($const142.68, n_nonzero_edges, func=$146build_slice.70, args=(Var($const142.68, _loop_hafnian_subroutines.py:197), Var(n_nonzero_edges, _loop_hafnian_subroutines.py:189)), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:37:59,428 on stmt: $148build_tuple.72 = build_tuple(items=[Var($140build_slice.67, _loop_hafnian_subroutines.py:197), Var($146build_slice.71, _loop_hafnian_subroutines.py:197)])
DEBUG 2022-02-14 16:37:59,428 on stmt: $150binary_subscr.73 = getitem(value=A_nonzero, index=$148build_tuple.72, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:37:59,428 on stmt: $152binary_multiply.74 = kept_edges_nonzero * $150binary_subscr.73
DEBUG 2022-02-14 16:37:59,428 on stmt: $const156.76 = const(NoneType, None)
DEBUG 2022-02-14 16:37:59,428 on stmt: $const158.77 = const(NoneType, None)
DEBUG 2022-02-14 16:37:59,428 on stmt: $160build_slice.78 = global(slice: <class 'slice'>)
DEBUG 2022-02-14 16:37:59,428 on stmt: $160build_slice.79 = call $160build_slice.78($const156.76, $const158.77, func=$160build_slice.78, args=(Var($const156.76, _loop_hafnian_subroutines.py:197), Var($const158.77, _loop_hafnian_subroutines.py:197)), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:37:59,428 on stmt: $const164.81 = const(NoneType, None)
DEBUG 2022-02-14 16:37:59,428 on stmt: $166build_slice.82 = global(slice: <class 'slice'>)
DEBUG 2022-02-14 16:37:59,428 on stmt: $166build_slice.83 = call $166build_slice.82(n_nonzero_edges, $const164.81, func=$166build_slice.82, args=(Var(n_nonzero_edges, _loop_hafnian_subroutines.py:189), Var($const164.81, _loop_hafnian_subroutines.py:197)), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:37:59,428 on stmt: $168build_tuple.84 = build_tuple(items=[Var($160build_slice.79, _loop_hafnian_subroutines.py:197), Var($166build_slice.83, _loop_hafnian_subroutines.py:197)])
DEBUG 2022-02-14 16:37:59,428 on stmt: AX_nonzero[$168build_tuple.84] = $152binary_multiply.74
DEBUG 2022-02-14 16:37:59,428 on stmt: D_nonzero = getitem(value=D, index=nonzero_rows, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:37:59,428 on stmt: $180load_global.88 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:37:59,428 on stmt: $182load_attr.89 = getattr(value=$180load_global.88, attr=empty_like)
DEBUG 2022-02-14 16:37:59,429 on stmt: $186load_global.91 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:37:59,429 on stmt: $188load_attr.92 = getattr(value=$186load_global.91, attr=complex128)
DEBUG 2022-02-14 16:37:59,429 on stmt: XD_nonzero = call $182load_attr.89(D_nonzero, func=$182load_attr.89, args=[Var(D_nonzero, _loop_hafnian_subroutines.py:199)], kws=[('dtype', Var($188load_attr.92, _loop_hafnian_subroutines.py:201))], vararg=None, target=None)
DEBUG 2022-02-14 16:37:59,429 on stmt: $const202.98 = const(NoneType, None)
DEBUG 2022-02-14 16:37:59,429 on stmt: $204build_slice.99 = global(slice: <class 'slice'>)
DEBUG 2022-02-14 16:37:59,429 on stmt: $204build_slice.100 = call $204build_slice.99(n_nonzero_edges, $const202.98, func=$204build_slice.99, args=(Var(n_nonzero_edges, _loop_hafnian_subroutines.py:189), Var($const202.98, _loop_hafnian_subroutines.py:202)), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:37:59,429 on stmt: $206binary_subscr.101 = getitem(value=D_nonzero, index=$204build_slice.100, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:37:59,429 on stmt: $208binary_multiply.102 = kept_edges_nonzero * $206binary_subscr.101
DEBUG 2022-02-14 16:37:59,429 on stmt: $const212.104 = const(NoneType, None)
DEBUG 2022-02-14 16:37:59,429 on stmt: $216build_slice.106 = global(slice: <class 'slice'>)
DEBUG 2022-02-14 16:37:59,429 on stmt: $216build_slice.107 = call $216build_slice.106($const212.104, n_nonzero_edges, func=$216build_slice.106, args=(Var($const212.104, _loop_hafnian_subroutines.py:202), Var(n_nonzero_edges, _loop_hafnian_subroutines.py:189)), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:37:59,429 on stmt: XD_nonzero[$216build_slice.107] = $208binary_multiply.102
DEBUG 2022-02-14 16:37:59,429 on stmt: $const224.110 = const(NoneType, None)
DEBUG 2022-02-14 16:37:59,429 on stmt: $228build_slice.112 = global(slice: <class 'slice'>)
DEBUG 2022-02-14 16:37:59,429 on stmt: $228build_slice.113 = call $228build_slice.112($const224.110, n_nonzero_edges, func=$228build_slice.112, args=(Var($const224.110, _loop_hafnian_subroutines.py:203), Var(n_nonzero_edges, _loop_hafnian_subroutines.py:189)), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:37:59,429 on stmt: $230binary_subscr.114 = getitem(value=D_nonzero, index=$228build_slice.113, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:37:59,429 on stmt: $232binary_multiply.115 = kept_edges_nonzero * $230binary_subscr.114
DEBUG 2022-02-14 16:37:59,429 on stmt: $const238.118 = const(NoneType, None)
DEBUG 2022-02-14 16:37:59,429 on stmt: $240build_slice.119 = global(slice: <class 'slice'>)
DEBUG 2022-02-14 16:37:59,429 on stmt: $240build_slice.120 = call $240build_slice.119(n_nonzero_edges, $const238.118, func=$240build_slice.119, args=(Var(n_nonzero_edges, _loop_hafnian_subroutines.py:189), Var($const238.118, _loop_hafnian_subroutines.py:203)), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:37:59,429 on stmt: XD_nonzero[$240build_slice.120] = $232binary_multiply.115
DEBUG 2022-02-14 16:37:59,430 on stmt: $const246.122 = const(NoneType, None)
DEBUG 2022-02-14 16:37:59,430 on stmt: $248is_op.123 = oddV is not $const246.122
DEBUG 2022-02-14 16:37:59,430 on stmt: bool250 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:37:59,430 on stmt: $250pred = call bool250($248is_op.123, func=bool250, args=(Var($248is_op.123, _loop_hafnian_subroutines.py:205),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:37:59,430 on stmt: branch $250pred, 254, 328
DEBUG 2022-02-14 16:37:59,430 ==== SSA block rewrite pass on 254
DEBUG 2022-02-14 16:37:59,430 Running <numba.core.ssa._FixSSAVars object at 0x7fa04734de20>
DEBUG 2022-02-14 16:37:59,430 on stmt: oddV_nonzero = getitem(value=oddV, index=nonzero_rows, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:37:59,430 on stmt: $262load_global.3 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:37:59,430 on stmt: $264load_attr.4 = getattr(value=$262load_global.3, attr=empty_like)
DEBUG 2022-02-14 16:37:59,430 on stmt: $268load_global.6 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:37:59,430 on stmt: $270load_attr.7 = getattr(value=$268load_global.6, attr=complex128)
DEBUG 2022-02-14 16:37:59,430 on stmt: oddVX_nonzero = call $264load_attr.4(oddV_nonzero, func=$264load_attr.4, args=[Var(oddV_nonzero, _loop_hafnian_subroutines.py:206)], kws=[('dtype', Var($270load_attr.7, _loop_hafnian_subroutines.py:207))], vararg=None, target=None)
DEBUG 2022-02-14 16:37:59,430 on stmt: $const284.13 = const(NoneType, None)
DEBUG 2022-02-14 16:37:59,430 on stmt: $286build_slice.14 = global(slice: <class 'slice'>)
DEBUG 2022-02-14 16:37:59,430 on stmt: $286build_slice.15 = call $286build_slice.14(n_nonzero_edges, $const284.13, func=$286build_slice.14, args=(Var(n_nonzero_edges, _loop_hafnian_subroutines.py:189), Var($const284.13, _loop_hafnian_subroutines.py:208)), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:37:59,430 on stmt: $288binary_subscr.16 = getitem(value=oddV_nonzero, index=$286build_slice.15, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:37:59,430 on stmt: $290binary_multiply.17 = kept_edges_nonzero * $288binary_subscr.16
DEBUG 2022-02-14 16:37:59,430 on stmt: $const294.19 = const(NoneType, None)
DEBUG 2022-02-14 16:37:59,430 on stmt: $298build_slice.21 = global(slice: <class 'slice'>)
DEBUG 2022-02-14 16:37:59,430 on stmt: $298build_slice.22 = call $298build_slice.21($const294.19, n_nonzero_edges, func=$298build_slice.21, args=(Var($const294.19, _loop_hafnian_subroutines.py:208), Var(n_nonzero_edges, _loop_hafnian_subroutines.py:189)), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:37:59,430 on stmt: oddVX_nonzero[$298build_slice.22] = $290binary_multiply.17
DEBUG 2022-02-14 16:37:59,431 find_def var='oddVX_nonzero' stmt=oddVX_nonzero[$298build_slice.22] = $290binary_multiply.17
DEBUG 2022-02-14 16:37:59,431 on stmt: $const306.25 = const(NoneType, None)
DEBUG 2022-02-14 16:37:59,431 on stmt: $310build_slice.27 = global(slice: <class 'slice'>)
DEBUG 2022-02-14 16:37:59,431 on stmt: $310build_slice.28 = call $310build_slice.27($const306.25, n_nonzero_edges, func=$310build_slice.27, args=(Var($const306.25, _loop_hafnian_subroutines.py:209), Var(n_nonzero_edges, _loop_hafnian_subroutines.py:189)), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:37:59,431 on stmt: $312binary_subscr.29 = getitem(value=oddV_nonzero, index=$310build_slice.28, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:37:59,431 on stmt: $314binary_multiply.30 = kept_edges_nonzero * $312binary_subscr.29
DEBUG 2022-02-14 16:37:59,431 on stmt: $const320.33 = const(NoneType, None)
DEBUG 2022-02-14 16:37:59,431 on stmt: $322build_slice.34 = global(slice: <class 'slice'>)
DEBUG 2022-02-14 16:37:59,431 on stmt: $322build_slice.35 = call $322build_slice.34(n_nonzero_edges, $const320.33, func=$322build_slice.34, args=(Var(n_nonzero_edges, _loop_hafnian_subroutines.py:189), Var($const320.33, _loop_hafnian_subroutines.py:209)), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:37:59,431 on stmt: oddVX_nonzero[$322build_slice.35] = $314binary_multiply.30
DEBUG 2022-02-14 16:37:59,431 find_def var='oddVX_nonzero' stmt=oddVX_nonzero[$322build_slice.35] = $314binary_multiply.30
DEBUG 2022-02-14 16:37:59,431 on stmt: jump 332
DEBUG 2022-02-14 16:37:59,431 ==== SSA block rewrite pass on 328
DEBUG 2022-02-14 16:37:59,431 Running <numba.core.ssa._FixSSAVars object at 0x7fa04734de20>
DEBUG 2022-02-14 16:37:59,431 on stmt: oddVX_nonzero.1 = const(NoneType, None)
DEBUG 2022-02-14 16:37:59,431 on stmt: jump 332
DEBUG 2022-02-14 16:37:59,431 ==== SSA block rewrite pass on 332
DEBUG 2022-02-14 16:37:59,431 Running <numba.core.ssa._FixSSAVars object at 0x7fa04734de20>
DEBUG 2022-02-14 16:37:59,431 on stmt: $340build_tuple.4 = build_tuple(items=[Var(AX_nonzero, _loop_hafnian_subroutines.py:195), Var(XD_nonzero, _loop_hafnian_subroutines.py:201), Var(D_nonzero, _loop_hafnian_subroutines.py:199), Var(oddVX_nonzero, _loop_hafnian_subroutines.py:207)])
DEBUG 2022-02-14 16:37:59,431 find_def var='oddVX_nonzero' stmt=$340build_tuple.4 = build_tuple(items=[Var(AX_nonzero, _loop_hafnian_subroutines.py:195), Var(XD_nonzero, _loop_hafnian_subroutines.py:201), Var(D_nonzero, _loop_hafnian_subroutines.py:199), Var(oddVX_nonzero, _loop_hafnian_subroutines.py:207)])
DEBUG 2022-02-14 16:37:59,431 find_def_from_top label 332
DEBUG 2022-02-14 16:37:59,431 insert phi node oddVX_nonzero.2 = phi(incoming_values=[], incoming_blocks=[]) at 332
DEBUG 2022-02-14 16:37:59,432 find_def_from_bottom label 328
DEBUG 2022-02-14 16:37:59,432 incoming_def oddVX_nonzero.1 = const(NoneType, None)
DEBUG 2022-02-14 16:37:59,432 find_def_from_bottom label 254
DEBUG 2022-02-14 16:37:59,432 incoming_def oddVX_nonzero = call $264load_attr.4(oddV_nonzero, func=$264load_attr.4, args=[Var(oddV_nonzero, _loop_hafnian_subroutines.py:206)], kws=[('dtype', Var($270load_attr.7, _loop_hafnian_subroutines.py:207))], vararg=None, target=None)
DEBUG 2022-02-14 16:37:59,432 replaced with: $340build_tuple.4 = build_tuple(items=[Var(AX_nonzero, _loop_hafnian_subroutines.py:195), Var(XD_nonzero, _loop_hafnian_subroutines.py:201), Var(D_nonzero, _loop_hafnian_subroutines.py:199), Var(oddVX_nonzero.2, _loop_hafnian_subroutines.py:213)])
DEBUG 2022-02-14 16:37:59,432 on stmt: $342return_value.5 = cast(value=$340build_tuple.4)
DEBUG 2022-02-14 16:37:59,432 on stmt: return $342return_value.5
DEBUG 2022-02-14 16:37:59,440 bytecode dump:
>          0	NOP(arg=None, lineno=3)
           2	LOAD_GLOBAL(arg=0, lineno=3)
           4	LOAD_FAST(arg=0, lineno=3)
           6	CALL_FUNCTION(arg=1, lineno=3)
           8	RETURN_VALUE(arg=None, lineno=3)
DEBUG 2022-02-14 16:37:59,440 pending: deque([State(pc_initial=0 nstack_initial=0)])
DEBUG 2022-02-14 16:37:59,440 stack: []
DEBUG 2022-02-14 16:37:59,440 dispatch pc=0, inst=NOP(arg=None, lineno=3)
DEBUG 2022-02-14 16:37:59,440 stack []
DEBUG 2022-02-14 16:37:59,440 dispatch pc=2, inst=LOAD_GLOBAL(arg=0, lineno=3)
DEBUG 2022-02-14 16:37:59,440 stack []
DEBUG 2022-02-14 16:37:59,440 dispatch pc=4, inst=LOAD_FAST(arg=0, lineno=3)
DEBUG 2022-02-14 16:37:59,440 stack ['$2load_global.0']
DEBUG 2022-02-14 16:37:59,441 dispatch pc=6, inst=CALL_FUNCTION(arg=1, lineno=3)
DEBUG 2022-02-14 16:37:59,441 stack ['$2load_global.0', '$tmp04.1']
DEBUG 2022-02-14 16:37:59,441 dispatch pc=8, inst=RETURN_VALUE(arg=None, lineno=3)
DEBUG 2022-02-14 16:37:59,441 stack ['$6call_function.2']
DEBUG 2022-02-14 16:37:59,441 end state. edges=[]
DEBUG 2022-02-14 16:37:59,441 -------------------------Prune PHIs-------------------------
DEBUG 2022-02-14 16:37:59,441 Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
DEBUG 2022-02-14 16:37:59,441 defmap: {}
DEBUG 2022-02-14 16:37:59,441 phismap: defaultdict(<class 'set'>, {})
DEBUG 2022-02-14 16:37:59,441 changing phismap: defaultdict(<class 'set'>, {})
DEBUG 2022-02-14 16:37:59,441 keep phismap: {}
DEBUG 2022-02-14 16:37:59,441 new_out: defaultdict(<class 'dict'>, {})
DEBUG 2022-02-14 16:37:59,441 ----------------------DONE Prune PHIs-----------------------
DEBUG 2022-02-14 16:37:59,441 block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$2load_global.0'}), (4, {'res': '$tmp04.1'}), (6, {'func': '$2load_global.0', 'args': ['$tmp04.1'], 'res': '$6call_function.2'}), (8, {'retval': '$6call_function.2', 'castval': '$8return_value.3'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG 2022-02-14 16:37:59,441 label 0:
    tmp0 = arg(0, name=tmp0)                 ['tmp0']
    $2load_global.0 = global(intrin: <intrinsic stub>) ['$2load_global.0']
    $6call_function.2 = call $2load_global.0(tmp0, func=$2load_global.0, args=[Var(tmp0, <string>:3)], kws=(), vararg=None, target=None) ['$2load_global.0', '$6call_function.2', 'tmp0']
    $8return_value.3 = cast(value=$6call_function.2) ['$6call_function.2', '$8return_value.3']
    return $8return_value.3                  ['$8return_value.3']

DEBUG 2022-02-14 16:37:59,443 ==== SSA block analysis pass on 0
DEBUG 2022-02-14 16:37:59,443 Running <numba.core.ssa._GatherDefsHandler object at 0x7fa0472bc250>
DEBUG 2022-02-14 16:37:59,443 on stmt: tmp0 = arg(0, name=tmp0)
DEBUG 2022-02-14 16:37:59,443 on stmt: $2load_global.0 = global(intrin: <intrinsic stub>)
DEBUG 2022-02-14 16:37:59,443 on stmt: $6call_function.2 = call $2load_global.0(tmp0, func=$2load_global.0, args=[Var(tmp0, <string>:3)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:37:59,443 on stmt: $8return_value.3 = cast(value=$6call_function.2)
DEBUG 2022-02-14 16:37:59,443 on stmt: return $8return_value.3
DEBUG 2022-02-14 16:37:59,443 defs defaultdict(<class 'list'>,
            {'$2load_global.0': [<numba.core.ir.Assign object at 0x7fa0472bc340>],
             '$6call_function.2': [<numba.core.ir.Assign object at 0x7fa0472bce80>],
             '$8return_value.3': [<numba.core.ir.Assign object at 0x7fa0472bcfa0>],
             'tmp0': [<numba.core.ir.Assign object at 0x7fa0472bc1c0>]})
DEBUG 2022-02-14 16:37:59,443 SSA violators set()
DEBUG 2022-02-14 16:37:59,516 bytecode dump:
>          0	NOP(arg=None, lineno=3)
           2	LOAD_GLOBAL(arg=0, lineno=3)
           4	LOAD_FAST(arg=0, lineno=3)
           6	CALL_FUNCTION(arg=1, lineno=3)
           8	RETURN_VALUE(arg=None, lineno=3)
DEBUG 2022-02-14 16:37:59,516 pending: deque([State(pc_initial=0 nstack_initial=0)])
DEBUG 2022-02-14 16:37:59,516 stack: []
DEBUG 2022-02-14 16:37:59,517 dispatch pc=0, inst=NOP(arg=None, lineno=3)
DEBUG 2022-02-14 16:37:59,517 stack []
DEBUG 2022-02-14 16:37:59,517 dispatch pc=2, inst=LOAD_GLOBAL(arg=0, lineno=3)
DEBUG 2022-02-14 16:37:59,517 stack []
DEBUG 2022-02-14 16:37:59,517 dispatch pc=4, inst=LOAD_FAST(arg=0, lineno=3)
DEBUG 2022-02-14 16:37:59,517 stack ['$2load_global.0']
DEBUG 2022-02-14 16:37:59,517 dispatch pc=6, inst=CALL_FUNCTION(arg=1, lineno=3)
DEBUG 2022-02-14 16:37:59,517 stack ['$2load_global.0', '$tmp04.1']
DEBUG 2022-02-14 16:37:59,517 dispatch pc=8, inst=RETURN_VALUE(arg=None, lineno=3)
DEBUG 2022-02-14 16:37:59,517 stack ['$6call_function.2']
DEBUG 2022-02-14 16:37:59,517 end state. edges=[]
DEBUG 2022-02-14 16:37:59,517 -------------------------Prune PHIs-------------------------
DEBUG 2022-02-14 16:37:59,517 Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
DEBUG 2022-02-14 16:37:59,518 defmap: {}
DEBUG 2022-02-14 16:37:59,518 phismap: defaultdict(<class 'set'>, {})
DEBUG 2022-02-14 16:37:59,518 changing phismap: defaultdict(<class 'set'>, {})
DEBUG 2022-02-14 16:37:59,518 keep phismap: {}
DEBUG 2022-02-14 16:37:59,518 new_out: defaultdict(<class 'dict'>, {})
DEBUG 2022-02-14 16:37:59,518 ----------------------DONE Prune PHIs-----------------------
DEBUG 2022-02-14 16:37:59,518 block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$2load_global.0'}), (4, {'res': '$tmp04.1'}), (6, {'func': '$2load_global.0', 'args': ['$tmp04.1'], 'res': '$6call_function.2'}), (8, {'retval': '$6call_function.2', 'castval': '$8return_value.3'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG 2022-02-14 16:37:59,519 label 0:
    tmp0 = arg(0, name=tmp0)                 ['tmp0']
    $2load_global.0 = global(intrin: <intrinsic stub>) ['$2load_global.0']
    $6call_function.2 = call $2load_global.0(tmp0, func=$2load_global.0, args=[Var(tmp0, <string>:3)], kws=(), vararg=None, target=None) ['$2load_global.0', '$6call_function.2', 'tmp0']
    $8return_value.3 = cast(value=$6call_function.2) ['$6call_function.2', '$8return_value.3']
    return $8return_value.3                  ['$8return_value.3']

DEBUG 2022-02-14 16:37:59,521 ==== SSA block analysis pass on 0
DEBUG 2022-02-14 16:37:59,521 Running <numba.core.ssa._GatherDefsHandler object at 0x7fa04727ba00>
DEBUG 2022-02-14 16:37:59,521 on stmt: tmp0 = arg(0, name=tmp0)
DEBUG 2022-02-14 16:37:59,521 on stmt: $2load_global.0 = global(intrin: <intrinsic stub>)
DEBUG 2022-02-14 16:37:59,521 on stmt: $6call_function.2 = call $2load_global.0(tmp0, func=$2load_global.0, args=[Var(tmp0, <string>:3)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:37:59,521 on stmt: $8return_value.3 = cast(value=$6call_function.2)
DEBUG 2022-02-14 16:37:59,521 on stmt: return $8return_value.3
DEBUG 2022-02-14 16:37:59,521 defs defaultdict(<class 'list'>,
            {'$2load_global.0': [<numba.core.ir.Assign object at 0x7fa047207040>],
             '$6call_function.2': [<numba.core.ir.Assign object at 0x7fa047207b20>],
             '$8return_value.3': [<numba.core.ir.Assign object at 0x7fa047207c40>],
             'tmp0': [<numba.core.ir.Assign object at 0x7fa047207190>]})
DEBUG 2022-02-14 16:37:59,522 SSA violators set()
DEBUG 2022-02-14 16:37:59,582 bytecode dump:
>          0	NOP(arg=None, lineno=41)
           2	LOAD_FAST(arg=0, lineno=41)
           4	LOAD_FAST(arg=1, lineno=41)
           6	BINARY_SUBSCR(arg=None, lineno=41)
           8	LOAD_CONST(arg=1, lineno=41)
          10	LOAD_CONST(arg=1, lineno=41)
          12	BUILD_SLICE(arg=2, lineno=41)
          14	LOAD_FAST(arg=2, lineno=41)
          16	BUILD_TUPLE(arg=2, lineno=41)
          18	BINARY_SUBSCR(arg=None, lineno=41)
          20	RETURN_VALUE(arg=None, lineno=41)
DEBUG 2022-02-14 16:37:59,582 pending: deque([State(pc_initial=0 nstack_initial=0)])
DEBUG 2022-02-14 16:37:59,582 stack: []
DEBUG 2022-02-14 16:37:59,582 dispatch pc=0, inst=NOP(arg=None, lineno=41)
DEBUG 2022-02-14 16:37:59,582 stack []
DEBUG 2022-02-14 16:37:59,582 dispatch pc=2, inst=LOAD_FAST(arg=0, lineno=41)
DEBUG 2022-02-14 16:37:59,582 stack []
DEBUG 2022-02-14 16:37:59,582 dispatch pc=4, inst=LOAD_FAST(arg=1, lineno=41)
DEBUG 2022-02-14 16:37:59,582 stack ['$arr2.0']
DEBUG 2022-02-14 16:37:59,582 dispatch pc=6, inst=BINARY_SUBSCR(arg=None, lineno=41)
DEBUG 2022-02-14 16:37:59,582 stack ['$arr2.0', '$rows4.1']
DEBUG 2022-02-14 16:37:59,582 dispatch pc=8, inst=LOAD_CONST(arg=1, lineno=41)
DEBUG 2022-02-14 16:37:59,582 stack ['$6binary_subscr.2']
DEBUG 2022-02-14 16:37:59,582 dispatch pc=10, inst=LOAD_CONST(arg=1, lineno=41)
DEBUG 2022-02-14 16:37:59,582 stack ['$6binary_subscr.2', '$const8.3']
DEBUG 2022-02-14 16:37:59,582 dispatch pc=12, inst=BUILD_SLICE(arg=2, lineno=41)
DEBUG 2022-02-14 16:37:59,582 stack ['$6binary_subscr.2', '$const8.3', '$const10.4']
DEBUG 2022-02-14 16:37:59,582 dispatch pc=14, inst=LOAD_FAST(arg=2, lineno=41)
DEBUG 2022-02-14 16:37:59,582 stack ['$6binary_subscr.2', '$12build_slice.6']
DEBUG 2022-02-14 16:37:59,582 dispatch pc=16, inst=BUILD_TUPLE(arg=2, lineno=41)
DEBUG 2022-02-14 16:37:59,582 stack ['$6binary_subscr.2', '$12build_slice.6', '$cols14.7']
DEBUG 2022-02-14 16:37:59,583 dispatch pc=18, inst=BINARY_SUBSCR(arg=None, lineno=41)
DEBUG 2022-02-14 16:37:59,583 stack ['$6binary_subscr.2', '$16build_tuple.8']
DEBUG 2022-02-14 16:37:59,583 dispatch pc=20, inst=RETURN_VALUE(arg=None, lineno=41)
DEBUG 2022-02-14 16:37:59,583 stack ['$18binary_subscr.9']
DEBUG 2022-02-14 16:37:59,583 end state. edges=[]
DEBUG 2022-02-14 16:37:59,583 -------------------------Prune PHIs-------------------------
DEBUG 2022-02-14 16:37:59,583 Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
DEBUG 2022-02-14 16:37:59,583 defmap: {}
DEBUG 2022-02-14 16:37:59,583 phismap: defaultdict(<class 'set'>, {})
DEBUG 2022-02-14 16:37:59,583 changing phismap: defaultdict(<class 'set'>, {})
DEBUG 2022-02-14 16:37:59,583 keep phismap: {}
DEBUG 2022-02-14 16:37:59,583 new_out: defaultdict(<class 'dict'>, {})
DEBUG 2022-02-14 16:37:59,584 ----------------------DONE Prune PHIs-----------------------
DEBUG 2022-02-14 16:37:59,584 block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$arr2.0'}), (4, {'res': '$rows4.1'}), (6, {'index': '$rows4.1', 'target': '$arr2.0', 'res': '$6binary_subscr.2'}), (8, {'res': '$const8.3'}), (10, {'res': '$const10.4'}), (12, {'start': '$const8.3', 'stop': '$const10.4', 'step': None, 'res': '$12build_slice.6', 'slicevar': '$12build_slice.5'}), (14, {'res': '$cols14.7'}), (16, {'items': ['$12build_slice.6', '$cols14.7'], 'res': '$16build_tuple.8'}), (18, {'index': '$16build_tuple.8', 'target': '$6binary_subscr.2', 'res': '$18binary_subscr.9'}), (20, {'retval': '$18binary_subscr.9', 'castval': '$20return_value.10'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG 2022-02-14 16:37:59,584 label 0:
    arr = arg(0, name=arr)                   ['arr']
    rows = arg(1, name=rows)                 ['rows']
    cols = arg(2, name=cols)                 ['cols']
    $6binary_subscr.2 = getitem(value=arr, index=rows, fn=<built-in function getitem>) ['$6binary_subscr.2', 'arr', 'rows']
    $const8.3 = const(NoneType, None)        ['$const8.3']
    $const10.4 = const(NoneType, None)       ['$const10.4']
    $12build_slice.5 = global(slice: <class 'slice'>) ['$12build_slice.5']
    $12build_slice.6 = call $12build_slice.5($const8.3, $const10.4, func=$12build_slice.5, args=(Var($const8.3, _loop_hafnian_subroutines.py:41), Var($const10.4, _loop_hafnian_subroutines.py:41)), kws=(), vararg=None, target=None) ['$12build_slice.5', '$12build_slice.6', '$const10.4', '$const8.3']
    $16build_tuple.8 = build_tuple(items=[Var($12build_slice.6, _loop_hafnian_subroutines.py:41), Var(cols, _loop_hafnian_subroutines.py:41)]) ['$12build_slice.6', '$16build_tuple.8', 'cols']
    $18binary_subscr.9 = getitem(value=$6binary_subscr.2, index=$16build_tuple.8, fn=<built-in function getitem>) ['$16build_tuple.8', '$18binary_subscr.9', '$6binary_subscr.2']
    $20return_value.10 = cast(value=$18binary_subscr.9) ['$18binary_subscr.9', '$20return_value.10']
    return $20return_value.10                ['$20return_value.10']

DEBUG 2022-02-14 16:37:59,586 ==== SSA block analysis pass on 0
DEBUG 2022-02-14 16:37:59,586 Running <numba.core.ssa._GatherDefsHandler object at 0x7fa04727b2e0>
DEBUG 2022-02-14 16:37:59,586 on stmt: arr = arg(0, name=arr)
DEBUG 2022-02-14 16:37:59,586 on stmt: rows = arg(1, name=rows)
DEBUG 2022-02-14 16:37:59,586 on stmt: cols = arg(2, name=cols)
DEBUG 2022-02-14 16:37:59,587 on stmt: $6binary_subscr.2 = getitem(value=arr, index=rows, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:37:59,587 on stmt: $const8.3 = const(NoneType, None)
DEBUG 2022-02-14 16:37:59,587 on stmt: $const10.4 = const(NoneType, None)
DEBUG 2022-02-14 16:37:59,587 on stmt: $12build_slice.5 = global(slice: <class 'slice'>)
DEBUG 2022-02-14 16:37:59,587 on stmt: $12build_slice.6 = call $12build_slice.5($const8.3, $const10.4, func=$12build_slice.5, args=(Var($const8.3, _loop_hafnian_subroutines.py:41), Var($const10.4, _loop_hafnian_subroutines.py:41)), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:37:59,587 on stmt: $16build_tuple.8 = build_tuple(items=[Var($12build_slice.6, _loop_hafnian_subroutines.py:41), Var(cols, _loop_hafnian_subroutines.py:41)])
DEBUG 2022-02-14 16:37:59,587 on stmt: $18binary_subscr.9 = getitem(value=$6binary_subscr.2, index=$16build_tuple.8, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:37:59,587 on stmt: $20return_value.10 = cast(value=$18binary_subscr.9)
DEBUG 2022-02-14 16:37:59,587 on stmt: return $20return_value.10
DEBUG 2022-02-14 16:37:59,587 defs defaultdict(<class 'list'>,
            {'$12build_slice.5': [<numba.core.ir.Assign object at 0x7fa047294820>],
             '$12build_slice.6': [<numba.core.ir.Assign object at 0x7fa047294970>],
             '$16build_tuple.8': [<numba.core.ir.Assign object at 0x7fa0472945e0>],
             '$18binary_subscr.9': [<numba.core.ir.Assign object at 0x7fa047294f70>],
             '$20return_value.10': [<numba.core.ir.Assign object at 0x7fa0472943a0>],
             '$6binary_subscr.2': [<numba.core.ir.Assign object at 0x7fa0472944f0>],
             '$const10.4': [<numba.core.ir.Assign object at 0x7fa047294160>],
             '$const8.3': [<numba.core.ir.Assign object at 0x7fa047294c40>],
             'arr': [<numba.core.ir.Assign object at 0x7fa0472a9b80>],
             'cols': [<numba.core.ir.Assign object at 0x7fa0472a91f0>],
             'rows': [<numba.core.ir.Assign object at 0x7fa0472a90a0>]})
DEBUG 2022-02-14 16:37:59,587 SSA violators set()
DEBUG 2022-02-14 16:37:59,719 bytecode dump:
>          0	NOP(arg=None, lineno=3)
           2	LOAD_GLOBAL(arg=0, lineno=3)
           4	LOAD_FAST(arg=0, lineno=3)
           6	LOAD_FAST(arg=1, lineno=3)
           8	CALL_FUNCTION(arg=2, lineno=3)
          10	RETURN_VALUE(arg=None, lineno=3)
DEBUG 2022-02-14 16:37:59,719 pending: deque([State(pc_initial=0 nstack_initial=0)])
DEBUG 2022-02-14 16:37:59,719 stack: []
DEBUG 2022-02-14 16:37:59,719 dispatch pc=0, inst=NOP(arg=None, lineno=3)
DEBUG 2022-02-14 16:37:59,719 stack []
DEBUG 2022-02-14 16:37:59,719 dispatch pc=2, inst=LOAD_GLOBAL(arg=0, lineno=3)
DEBUG 2022-02-14 16:37:59,719 stack []
DEBUG 2022-02-14 16:37:59,719 dispatch pc=4, inst=LOAD_FAST(arg=0, lineno=3)
DEBUG 2022-02-14 16:37:59,719 stack ['$2load_global.0']
DEBUG 2022-02-14 16:37:59,719 dispatch pc=6, inst=LOAD_FAST(arg=1, lineno=3)
DEBUG 2022-02-14 16:37:59,719 stack ['$2load_global.0', '$tmp04.1']
DEBUG 2022-02-14 16:37:59,719 dispatch pc=8, inst=CALL_FUNCTION(arg=2, lineno=3)
DEBUG 2022-02-14 16:37:59,719 stack ['$2load_global.0', '$tmp04.1', '$dtype6.2']
DEBUG 2022-02-14 16:37:59,719 dispatch pc=10, inst=RETURN_VALUE(arg=None, lineno=3)
DEBUG 2022-02-14 16:37:59,719 stack ['$8call_function.3']
DEBUG 2022-02-14 16:37:59,720 end state. edges=[]
DEBUG 2022-02-14 16:37:59,720 -------------------------Prune PHIs-------------------------
DEBUG 2022-02-14 16:37:59,720 Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
DEBUG 2022-02-14 16:37:59,720 defmap: {}
DEBUG 2022-02-14 16:37:59,720 phismap: defaultdict(<class 'set'>, {})
DEBUG 2022-02-14 16:37:59,720 changing phismap: defaultdict(<class 'set'>, {})
DEBUG 2022-02-14 16:37:59,720 keep phismap: {}
DEBUG 2022-02-14 16:37:59,720 new_out: defaultdict(<class 'dict'>, {})
DEBUG 2022-02-14 16:37:59,720 ----------------------DONE Prune PHIs-----------------------
DEBUG 2022-02-14 16:37:59,720 block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$2load_global.0'}), (4, {'res': '$tmp04.1'}), (6, {'res': '$dtype6.2'}), (8, {'func': '$2load_global.0', 'args': ['$tmp04.1', '$dtype6.2'], 'res': '$8call_function.3'}), (10, {'retval': '$8call_function.3', 'castval': '$10return_value.4'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG 2022-02-14 16:37:59,721 label 0:
    tmp0 = arg(0, name=tmp0)                 ['tmp0']
    dtype = arg(1, name=dtype)               ['dtype']
    $2load_global.0 = global(intrin: <intrinsic stub>) ['$2load_global.0']
    $8call_function.3 = call $2load_global.0(tmp0, dtype, func=$2load_global.0, args=[Var(tmp0, <string>:3), Var(dtype, <string>:3)], kws=(), vararg=None, target=None) ['$2load_global.0', '$8call_function.3', 'dtype', 'tmp0']
    $10return_value.4 = cast(value=$8call_function.3) ['$10return_value.4', '$8call_function.3']
    return $10return_value.4                 ['$10return_value.4']

DEBUG 2022-02-14 16:37:59,722 ==== SSA block analysis pass on 0
DEBUG 2022-02-14 16:37:59,723 Running <numba.core.ssa._GatherDefsHandler object at 0x7fa047106cd0>
DEBUG 2022-02-14 16:37:59,723 on stmt: tmp0 = arg(0, name=tmp0)
DEBUG 2022-02-14 16:37:59,723 on stmt: dtype = arg(1, name=dtype)
DEBUG 2022-02-14 16:37:59,723 on stmt: $2load_global.0 = global(intrin: <intrinsic stub>)
DEBUG 2022-02-14 16:37:59,723 on stmt: $8call_function.3 = call $2load_global.0(tmp0, dtype, func=$2load_global.0, args=[Var(tmp0, <string>:3), Var(dtype, <string>:3)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:37:59,723 on stmt: $10return_value.4 = cast(value=$8call_function.3)
DEBUG 2022-02-14 16:37:59,723 on stmt: return $10return_value.4
DEBUG 2022-02-14 16:37:59,723 defs defaultdict(<class 'list'>,
            {'$10return_value.4': [<numba.core.ir.Assign object at 0x7fa047112bb0>],
             '$2load_global.0': [<numba.core.ir.Assign object at 0x7fa047112670>],
             '$8call_function.3': [<numba.core.ir.Assign object at 0x7fa047112a90>],
             'dtype': [<numba.core.ir.Assign object at 0x7fa0471120d0>],
             'tmp0': [<numba.core.ir.Assign object at 0x7fa0471066a0>]})
DEBUG 2022-02-14 16:37:59,723 SSA violators set()
DEBUG 2022-02-14 16:37:59,761 bytecode dump:
>          0	NOP(arg=None, lineno=3)
           2	LOAD_GLOBAL(arg=0, lineno=3)
           4	LOAD_FAST(arg=0, lineno=3)
           6	LOAD_FAST(arg=1, lineno=3)
           8	CALL_FUNCTION(arg=2, lineno=3)
          10	RETURN_VALUE(arg=None, lineno=3)
DEBUG 2022-02-14 16:37:59,761 pending: deque([State(pc_initial=0 nstack_initial=0)])
DEBUG 2022-02-14 16:37:59,761 stack: []
DEBUG 2022-02-14 16:37:59,761 dispatch pc=0, inst=NOP(arg=None, lineno=3)
DEBUG 2022-02-14 16:37:59,761 stack []
DEBUG 2022-02-14 16:37:59,761 dispatch pc=2, inst=LOAD_GLOBAL(arg=0, lineno=3)
DEBUG 2022-02-14 16:37:59,761 stack []
DEBUG 2022-02-14 16:37:59,761 dispatch pc=4, inst=LOAD_FAST(arg=0, lineno=3)
DEBUG 2022-02-14 16:37:59,761 stack ['$2load_global.0']
DEBUG 2022-02-14 16:37:59,761 dispatch pc=6, inst=LOAD_FAST(arg=1, lineno=3)
DEBUG 2022-02-14 16:37:59,761 stack ['$2load_global.0', '$tmp04.1']
DEBUG 2022-02-14 16:37:59,761 dispatch pc=8, inst=CALL_FUNCTION(arg=2, lineno=3)
DEBUG 2022-02-14 16:37:59,761 stack ['$2load_global.0', '$tmp04.1', '$dtype6.2']
DEBUG 2022-02-14 16:37:59,762 dispatch pc=10, inst=RETURN_VALUE(arg=None, lineno=3)
DEBUG 2022-02-14 16:37:59,762 stack ['$8call_function.3']
DEBUG 2022-02-14 16:37:59,762 end state. edges=[]
DEBUG 2022-02-14 16:37:59,762 -------------------------Prune PHIs-------------------------
DEBUG 2022-02-14 16:37:59,762 Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
DEBUG 2022-02-14 16:37:59,762 defmap: {}
DEBUG 2022-02-14 16:37:59,762 phismap: defaultdict(<class 'set'>, {})
DEBUG 2022-02-14 16:37:59,762 changing phismap: defaultdict(<class 'set'>, {})
DEBUG 2022-02-14 16:37:59,762 keep phismap: {}
DEBUG 2022-02-14 16:37:59,762 new_out: defaultdict(<class 'dict'>, {})
DEBUG 2022-02-14 16:37:59,762 ----------------------DONE Prune PHIs-----------------------
DEBUG 2022-02-14 16:37:59,762 block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$2load_global.0'}), (4, {'res': '$tmp04.1'}), (6, {'res': '$dtype6.2'}), (8, {'func': '$2load_global.0', 'args': ['$tmp04.1', '$dtype6.2'], 'res': '$8call_function.3'}), (10, {'retval': '$8call_function.3', 'castval': '$10return_value.4'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG 2022-02-14 16:37:59,763 label 0:
    tmp0 = arg(0, name=tmp0)                 ['tmp0']
    dtype = arg(1, name=dtype)               ['dtype']
    $2load_global.0 = global(intrin: <intrinsic stub>) ['$2load_global.0']
    $8call_function.3 = call $2load_global.0(tmp0, dtype, func=$2load_global.0, args=[Var(tmp0, <string>:3), Var(dtype, <string>:3)], kws=(), vararg=None, target=None) ['$2load_global.0', '$8call_function.3', 'dtype', 'tmp0']
    $10return_value.4 = cast(value=$8call_function.3) ['$10return_value.4', '$8call_function.3']
    return $10return_value.4                 ['$10return_value.4']

DEBUG 2022-02-14 16:37:59,764 ==== SSA block analysis pass on 0
DEBUG 2022-02-14 16:37:59,764 Running <numba.core.ssa._GatherDefsHandler object at 0x7fa0470e6a00>
DEBUG 2022-02-14 16:37:59,764 on stmt: tmp0 = arg(0, name=tmp0)
DEBUG 2022-02-14 16:37:59,764 on stmt: dtype = arg(1, name=dtype)
DEBUG 2022-02-14 16:37:59,764 on stmt: $2load_global.0 = global(intrin: <intrinsic stub>)
DEBUG 2022-02-14 16:37:59,764 on stmt: $8call_function.3 = call $2load_global.0(tmp0, dtype, func=$2load_global.0, args=[Var(tmp0, <string>:3), Var(dtype, <string>:3)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:37:59,764 on stmt: $10return_value.4 = cast(value=$8call_function.3)
DEBUG 2022-02-14 16:37:59,764 on stmt: return $10return_value.4
DEBUG 2022-02-14 16:37:59,764 defs defaultdict(<class 'list'>,
            {'$10return_value.4': [<numba.core.ir.Assign object at 0x7fa0470eb190>],
             '$2load_global.0': [<numba.core.ir.Assign object at 0x7fa0470e6c10>],
             '$8call_function.3': [<numba.core.ir.Assign object at 0x7fa0470eb070>],
             'dtype': [<numba.core.ir.Assign object at 0x7fa0470e6130>],
             'tmp0': [<numba.core.ir.Assign object at 0x7fa0470e60d0>]})
DEBUG 2022-02-14 16:37:59,765 SSA violators set()
DEBUG 2022-02-14 16:37:59,846 bytecode dump:
>          0	NOP(arg=None, lineno=187)
           2	LOAD_FAST(arg=0, lineno=187)
           4	LOAD_CONST(arg=1, lineno=1)
           6	COMPARE_OP(arg=3, lineno=1)
           8	RETURN_VALUE(arg=None, lineno=1)
DEBUG 2022-02-14 16:37:59,846 pending: deque([State(pc_initial=0 nstack_initial=0)])
DEBUG 2022-02-14 16:37:59,846 stack: []
DEBUG 2022-02-14 16:37:59,846 dispatch pc=0, inst=NOP(arg=None, lineno=187)
DEBUG 2022-02-14 16:37:59,847 stack []
DEBUG 2022-02-14 16:37:59,847 dispatch pc=2, inst=LOAD_FAST(arg=0, lineno=187)
DEBUG 2022-02-14 16:37:59,847 stack []
DEBUG 2022-02-14 16:37:59,847 dispatch pc=4, inst=LOAD_CONST(arg=1, lineno=1)
DEBUG 2022-02-14 16:37:59,847 stack ['$z_12.0']
DEBUG 2022-02-14 16:37:59,847 dispatch pc=6, inst=COMPARE_OP(arg=3, lineno=1)
DEBUG 2022-02-14 16:37:59,847 stack ['$z_12.0', '$const4.1']
DEBUG 2022-02-14 16:37:59,847 dispatch pc=8, inst=RETURN_VALUE(arg=None, lineno=1)
DEBUG 2022-02-14 16:37:59,847 stack ['$6compare_op.2']
DEBUG 2022-02-14 16:37:59,847 end state. edges=[]
DEBUG 2022-02-14 16:37:59,847 -------------------------Prune PHIs-------------------------
DEBUG 2022-02-14 16:37:59,847 Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
DEBUG 2022-02-14 16:37:59,847 defmap: {}
DEBUG 2022-02-14 16:37:59,847 phismap: defaultdict(<class 'set'>, {})
DEBUG 2022-02-14 16:37:59,847 changing phismap: defaultdict(<class 'set'>, {})
DEBUG 2022-02-14 16:37:59,847 keep phismap: {}
DEBUG 2022-02-14 16:37:59,847 new_out: defaultdict(<class 'dict'>, {})
DEBUG 2022-02-14 16:37:59,848 ----------------------DONE Prune PHIs-----------------------
DEBUG 2022-02-14 16:37:59,848 block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$z_12.0'}), (4, {'res': '$const4.1'}), (6, {'lhs': '$z_12.0', 'rhs': '$const4.1', 'res': '$6compare_op.2'}), (8, {'retval': '$6compare_op.2', 'castval': '$8return_value.3'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG 2022-02-14 16:37:59,848 label 0:
    z_1 = arg(0, name=z_1)                   ['z_1']
    $const4.1 = const(int, 0)                ['$const4.1']
    $6compare_op.2 = z_1 != $const4.1        ['$6compare_op.2', '$const4.1', 'z_1']
    $8return_value.3 = cast(value=$6compare_op.2) ['$6compare_op.2', '$8return_value.3']
    return $8return_value.3                  ['$8return_value.3']

DEBUG 2022-02-14 16:37:59,849 ==== SSA block analysis pass on 0
DEBUG 2022-02-14 16:37:59,849 Running <numba.core.ssa._GatherDefsHandler object at 0x7fa047138e80>
DEBUG 2022-02-14 16:37:59,849 on stmt: z_1 = arg(0, name=z_1)
DEBUG 2022-02-14 16:37:59,849 on stmt: $const4.1 = const(int, 0)
DEBUG 2022-02-14 16:37:59,849 on stmt: $6compare_op.2 = z_1 != $const4.1
DEBUG 2022-02-14 16:37:59,849 on stmt: $8return_value.3 = cast(value=$6compare_op.2)
DEBUG 2022-02-14 16:37:59,850 on stmt: return $8return_value.3
DEBUG 2022-02-14 16:37:59,850 defs defaultdict(<class 'list'>,
            {'$6compare_op.2': [<numba.core.ir.Assign object at 0x7fa047138250>],
             '$8return_value.3': [<numba.core.ir.Assign object at 0x7fa0471383a0>],
             '$const4.1': [<numba.core.ir.Assign object at 0x7fa047138bb0>],
             'z_1': [<numba.core.ir.Assign object at 0x7fa0471384f0>]})
DEBUG 2022-02-14 16:37:59,850 SSA violators set()
DEBUG 2022-02-14 16:37:59,876 bytecode dump:
>          0	NOP(arg=None, lineno=187)
           2	LOAD_FAST(arg=0, lineno=187)
           4	LOAD_CONST(arg=1, lineno=1)
           6	COMPARE_OP(arg=3, lineno=1)
           8	RETURN_VALUE(arg=None, lineno=1)
DEBUG 2022-02-14 16:37:59,876 pending: deque([State(pc_initial=0 nstack_initial=0)])
DEBUG 2022-02-14 16:37:59,876 stack: []
DEBUG 2022-02-14 16:37:59,876 dispatch pc=0, inst=NOP(arg=None, lineno=187)
DEBUG 2022-02-14 16:37:59,876 stack []
DEBUG 2022-02-14 16:37:59,876 dispatch pc=2, inst=LOAD_FAST(arg=0, lineno=187)
DEBUG 2022-02-14 16:37:59,876 stack []
DEBUG 2022-02-14 16:37:59,876 dispatch pc=4, inst=LOAD_CONST(arg=1, lineno=1)
DEBUG 2022-02-14 16:37:59,876 stack ['$kept_edges_12.0']
DEBUG 2022-02-14 16:37:59,876 dispatch pc=6, inst=COMPARE_OP(arg=3, lineno=1)
DEBUG 2022-02-14 16:37:59,876 stack ['$kept_edges_12.0', '$const4.1']
DEBUG 2022-02-14 16:37:59,876 dispatch pc=8, inst=RETURN_VALUE(arg=None, lineno=1)
DEBUG 2022-02-14 16:37:59,876 stack ['$6compare_op.2']
DEBUG 2022-02-14 16:37:59,876 end state. edges=[]
DEBUG 2022-02-14 16:37:59,876 -------------------------Prune PHIs-------------------------
DEBUG 2022-02-14 16:37:59,876 Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
DEBUG 2022-02-14 16:37:59,877 defmap: {}
DEBUG 2022-02-14 16:37:59,877 phismap: defaultdict(<class 'set'>, {})
DEBUG 2022-02-14 16:37:59,877 changing phismap: defaultdict(<class 'set'>, {})
DEBUG 2022-02-14 16:37:59,877 keep phismap: {}
DEBUG 2022-02-14 16:37:59,877 new_out: defaultdict(<class 'dict'>, {})
DEBUG 2022-02-14 16:37:59,877 ----------------------DONE Prune PHIs-----------------------
DEBUG 2022-02-14 16:37:59,877 block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$kept_edges_12.0'}), (4, {'res': '$const4.1'}), (6, {'lhs': '$kept_edges_12.0', 'rhs': '$const4.1', 'res': '$6compare_op.2'}), (8, {'retval': '$6compare_op.2', 'castval': '$8return_value.3'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG 2022-02-14 16:37:59,877 label 0:
    kept_edges_1 = arg(0, name=kept_edges_1) ['kept_edges_1']
    $const4.1 = const(int, 0)                ['$const4.1']
    $6compare_op.2 = kept_edges_1 != $const4.1 ['$6compare_op.2', '$const4.1', 'kept_edges_1']
    $8return_value.3 = cast(value=$6compare_op.2) ['$6compare_op.2', '$8return_value.3']
    return $8return_value.3                  ['$8return_value.3']

DEBUG 2022-02-14 16:37:59,879 ==== SSA block analysis pass on 0
DEBUG 2022-02-14 16:37:59,879 Running <numba.core.ssa._GatherDefsHandler object at 0x7fa0470ca970>
DEBUG 2022-02-14 16:37:59,879 on stmt: kept_edges_1 = arg(0, name=kept_edges_1)
DEBUG 2022-02-14 16:37:59,879 on stmt: $const4.1 = const(int, 0)
DEBUG 2022-02-14 16:37:59,879 on stmt: $6compare_op.2 = kept_edges_1 != $const4.1
DEBUG 2022-02-14 16:37:59,879 on stmt: $8return_value.3 = cast(value=$6compare_op.2)
DEBUG 2022-02-14 16:37:59,879 on stmt: return $8return_value.3
DEBUG 2022-02-14 16:37:59,879 defs defaultdict(<class 'list'>,
            {'$6compare_op.2': [<numba.core.ir.Assign object at 0x7fa0470b4460>],
             '$8return_value.3': [<numba.core.ir.Assign object at 0x7fa0470b45b0>],
             '$const4.1': [<numba.core.ir.Assign object at 0x7fa0470b42b0>],
             'kept_edges_1': [<numba.core.ir.Assign object at 0x7fa0470ca100>]})
DEBUG 2022-02-14 16:37:59,879 SSA violators set()
DEBUG 2022-02-14 16:37:59,929 bytecode dump:
>          0	NOP(arg=None, lineno=191)
           2	LOAD_FAST(arg=1, lineno=191)
           4	LOAD_FAST(arg=0, lineno=196)
           6	BINARY_MULTIPLY(arg=None, lineno=1)
           8	RETURN_VALUE(arg=None, lineno=1)
DEBUG 2022-02-14 16:37:59,929 pending: deque([State(pc_initial=0 nstack_initial=0)])
DEBUG 2022-02-14 16:37:59,929 stack: []
DEBUG 2022-02-14 16:37:59,929 dispatch pc=0, inst=NOP(arg=None, lineno=191)
DEBUG 2022-02-14 16:37:59,929 stack []
DEBUG 2022-02-14 16:37:59,929 dispatch pc=2, inst=LOAD_FAST(arg=1, lineno=191)
DEBUG 2022-02-14 16:37:59,929 stack []
DEBUG 2022-02-14 16:37:59,929 dispatch pc=4, inst=LOAD_FAST(arg=0, lineno=196)
DEBUG 2022-02-14 16:37:59,929 stack ['$kept_edges_nonzero_12.0']
DEBUG 2022-02-14 16:37:59,929 dispatch pc=6, inst=BINARY_MULTIPLY(arg=None, lineno=1)
DEBUG 2022-02-14 16:37:59,930 stack ['$kept_edges_nonzero_12.0', '$_110binary_subscr_50_14.1']
DEBUG 2022-02-14 16:37:59,930 dispatch pc=8, inst=RETURN_VALUE(arg=None, lineno=1)
DEBUG 2022-02-14 16:37:59,930 stack ['$6binary_multiply.2']
DEBUG 2022-02-14 16:37:59,930 end state. edges=[]
DEBUG 2022-02-14 16:37:59,930 -------------------------Prune PHIs-------------------------
DEBUG 2022-02-14 16:37:59,930 Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
DEBUG 2022-02-14 16:37:59,930 defmap: {}
DEBUG 2022-02-14 16:37:59,930 phismap: defaultdict(<class 'set'>, {})
DEBUG 2022-02-14 16:37:59,930 changing phismap: defaultdict(<class 'set'>, {})
DEBUG 2022-02-14 16:37:59,930 keep phismap: {}
DEBUG 2022-02-14 16:37:59,930 new_out: defaultdict(<class 'dict'>, {})
DEBUG 2022-02-14 16:37:59,930 ----------------------DONE Prune PHIs-----------------------
DEBUG 2022-02-14 16:37:59,931 block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$kept_edges_nonzero_12.0'}), (4, {'res': '$_110binary_subscr_50_14.1'}), (6, {'lhs': '$kept_edges_nonzero_12.0', 'rhs': '$_110binary_subscr_50_14.1', 'res': '$6binary_multiply.2'}), (8, {'retval': '$6binary_multiply.2', 'castval': '$8return_value.3'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG 2022-02-14 16:37:59,931 label 0:
    _110binary_subscr_50_1 = arg(0, name=_110binary_subscr_50_1) ['_110binary_subscr_50_1']
    kept_edges_nonzero_1 = arg(1, name=kept_edges_nonzero_1) ['kept_edges_nonzero_1']
    $6binary_multiply.2 = kept_edges_nonzero_1 * _110binary_subscr_50_1 ['$6binary_multiply.2', '_110binary_subscr_50_1', 'kept_edges_nonzero_1']
    $8return_value.3 = cast(value=$6binary_multiply.2) ['$6binary_multiply.2', '$8return_value.3']
    return $8return_value.3                  ['$8return_value.3']

DEBUG 2022-02-14 16:37:59,933 ==== SSA block analysis pass on 0
DEBUG 2022-02-14 16:37:59,933 Running <numba.core.ssa._GatherDefsHandler object at 0x7fa046fbb730>
DEBUG 2022-02-14 16:37:59,933 on stmt: _110binary_subscr_50_1 = arg(0, name=_110binary_subscr_50_1)
DEBUG 2022-02-14 16:37:59,933 on stmt: kept_edges_nonzero_1 = arg(1, name=kept_edges_nonzero_1)
DEBUG 2022-02-14 16:37:59,933 on stmt: $6binary_multiply.2 = kept_edges_nonzero_1 * _110binary_subscr_50_1
DEBUG 2022-02-14 16:37:59,933 on stmt: $8return_value.3 = cast(value=$6binary_multiply.2)
DEBUG 2022-02-14 16:37:59,933 on stmt: return $8return_value.3
DEBUG 2022-02-14 16:37:59,934 defs defaultdict(<class 'list'>,
            {'$6binary_multiply.2': [<numba.core.ir.Assign object at 0x7fa046fba040>],
             '$8return_value.3': [<numba.core.ir.Assign object at 0x7fa046fba190>],
             '_110binary_subscr_50_1': [<numba.core.ir.Assign object at 0x7fa046fbb250>],
             'kept_edges_nonzero_1': [<numba.core.ir.Assign object at 0x7fa046fbb2b0>]})
DEBUG 2022-02-14 16:37:59,934 SSA violators set()
DEBUG 2022-02-14 16:37:59,979 bytecode dump:
>          0	NOP(arg=None, lineno=191)
           2	LOAD_FAST(arg=1, lineno=191)
           4	LOAD_FAST(arg=0, lineno=197)
           6	BINARY_MULTIPLY(arg=None, lineno=1)
           8	RETURN_VALUE(arg=None, lineno=1)
DEBUG 2022-02-14 16:37:59,979 pending: deque([State(pc_initial=0 nstack_initial=0)])
DEBUG 2022-02-14 16:37:59,979 stack: []
DEBUG 2022-02-14 16:37:59,979 dispatch pc=0, inst=NOP(arg=None, lineno=191)
DEBUG 2022-02-14 16:37:59,979 stack []
DEBUG 2022-02-14 16:37:59,979 dispatch pc=2, inst=LOAD_FAST(arg=1, lineno=191)
DEBUG 2022-02-14 16:37:59,979 stack []
DEBUG 2022-02-14 16:37:59,979 dispatch pc=4, inst=LOAD_FAST(arg=0, lineno=197)
DEBUG 2022-02-14 16:37:59,979 stack ['$kept_edges_nonzero_22.0']
DEBUG 2022-02-14 16:37:59,979 dispatch pc=6, inst=BINARY_MULTIPLY(arg=None, lineno=1)
DEBUG 2022-02-14 16:37:59,979 stack ['$kept_edges_nonzero_22.0', '$_150binary_subscr_73_14.1']
DEBUG 2022-02-14 16:37:59,979 dispatch pc=8, inst=RETURN_VALUE(arg=None, lineno=1)
DEBUG 2022-02-14 16:37:59,979 stack ['$6binary_multiply.2']
DEBUG 2022-02-14 16:37:59,979 end state. edges=[]
DEBUG 2022-02-14 16:37:59,979 -------------------------Prune PHIs-------------------------
DEBUG 2022-02-14 16:37:59,980 Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
DEBUG 2022-02-14 16:37:59,980 defmap: {}
DEBUG 2022-02-14 16:37:59,980 phismap: defaultdict(<class 'set'>, {})
DEBUG 2022-02-14 16:37:59,980 changing phismap: defaultdict(<class 'set'>, {})
DEBUG 2022-02-14 16:37:59,980 keep phismap: {}
DEBUG 2022-02-14 16:37:59,980 new_out: defaultdict(<class 'dict'>, {})
DEBUG 2022-02-14 16:37:59,980 ----------------------DONE Prune PHIs-----------------------
DEBUG 2022-02-14 16:37:59,980 block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$kept_edges_nonzero_22.0'}), (4, {'res': '$_150binary_subscr_73_14.1'}), (6, {'lhs': '$kept_edges_nonzero_22.0', 'rhs': '$_150binary_subscr_73_14.1', 'res': '$6binary_multiply.2'}), (8, {'retval': '$6binary_multiply.2', 'castval': '$8return_value.3'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG 2022-02-14 16:37:59,980 label 0:
    _150binary_subscr_73_1 = arg(0, name=_150binary_subscr_73_1) ['_150binary_subscr_73_1']
    kept_edges_nonzero_2 = arg(1, name=kept_edges_nonzero_2) ['kept_edges_nonzero_2']
    $6binary_multiply.2 = kept_edges_nonzero_2 * _150binary_subscr_73_1 ['$6binary_multiply.2', '_150binary_subscr_73_1', 'kept_edges_nonzero_2']
    $8return_value.3 = cast(value=$6binary_multiply.2) ['$6binary_multiply.2', '$8return_value.3']
    return $8return_value.3                  ['$8return_value.3']

DEBUG 2022-02-14 16:37:59,982 ==== SSA block analysis pass on 0
DEBUG 2022-02-14 16:37:59,982 Running <numba.core.ssa._GatherDefsHandler object at 0x7fa046ed9fa0>
DEBUG 2022-02-14 16:37:59,982 on stmt: _150binary_subscr_73_1 = arg(0, name=_150binary_subscr_73_1)
DEBUG 2022-02-14 16:37:59,982 on stmt: kept_edges_nonzero_2 = arg(1, name=kept_edges_nonzero_2)
DEBUG 2022-02-14 16:37:59,982 on stmt: $6binary_multiply.2 = kept_edges_nonzero_2 * _150binary_subscr_73_1
DEBUG 2022-02-14 16:37:59,982 on stmt: $8return_value.3 = cast(value=$6binary_multiply.2)
DEBUG 2022-02-14 16:37:59,982 on stmt: return $8return_value.3
DEBUG 2022-02-14 16:37:59,982 defs defaultdict(<class 'list'>,
            {'$6binary_multiply.2': [<numba.core.ir.Assign object at 0x7fa046ee2d30>],
             '$8return_value.3': [<numba.core.ir.Assign object at 0x7fa046ee2e80>],
             '_150binary_subscr_73_1': [<numba.core.ir.Assign object at 0x7fa046ee2190>],
             'kept_edges_nonzero_2': [<numba.core.ir.Assign object at 0x7fa046ee2040>]})
DEBUG 2022-02-14 16:37:59,982 SSA violators set()
DEBUG 2022-02-14 16:38:00,028 bytecode dump:
>          0	NOP(arg=None, lineno=191)
           2	LOAD_FAST(arg=1, lineno=191)
           4	LOAD_FAST(arg=0, lineno=202)
           6	BINARY_MULTIPLY(arg=None, lineno=1)
           8	RETURN_VALUE(arg=None, lineno=1)
DEBUG 2022-02-14 16:38:00,028 pending: deque([State(pc_initial=0 nstack_initial=0)])
DEBUG 2022-02-14 16:38:00,028 stack: []
DEBUG 2022-02-14 16:38:00,028 dispatch pc=0, inst=NOP(arg=None, lineno=191)
DEBUG 2022-02-14 16:38:00,028 stack []
DEBUG 2022-02-14 16:38:00,028 dispatch pc=2, inst=LOAD_FAST(arg=1, lineno=191)
DEBUG 2022-02-14 16:38:00,028 stack []
DEBUG 2022-02-14 16:38:00,028 dispatch pc=4, inst=LOAD_FAST(arg=0, lineno=202)
DEBUG 2022-02-14 16:38:00,028 stack ['$kept_edges_nonzero_32.0']
DEBUG 2022-02-14 16:38:00,028 dispatch pc=6, inst=BINARY_MULTIPLY(arg=None, lineno=1)
DEBUG 2022-02-14 16:38:00,028 stack ['$kept_edges_nonzero_32.0', '$_206binary_subscr_101_14.1']
DEBUG 2022-02-14 16:38:00,028 dispatch pc=8, inst=RETURN_VALUE(arg=None, lineno=1)
DEBUG 2022-02-14 16:38:00,028 stack ['$6binary_multiply.2']
DEBUG 2022-02-14 16:38:00,029 end state. edges=[]
DEBUG 2022-02-14 16:38:00,029 -------------------------Prune PHIs-------------------------
DEBUG 2022-02-14 16:38:00,029 Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
DEBUG 2022-02-14 16:38:00,029 defmap: {}
DEBUG 2022-02-14 16:38:00,029 phismap: defaultdict(<class 'set'>, {})
DEBUG 2022-02-14 16:38:00,029 changing phismap: defaultdict(<class 'set'>, {})
DEBUG 2022-02-14 16:38:00,029 keep phismap: {}
DEBUG 2022-02-14 16:38:00,029 new_out: defaultdict(<class 'dict'>, {})
DEBUG 2022-02-14 16:38:00,029 ----------------------DONE Prune PHIs-----------------------
DEBUG 2022-02-14 16:38:00,029 block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$kept_edges_nonzero_32.0'}), (4, {'res': '$_206binary_subscr_101_14.1'}), (6, {'lhs': '$kept_edges_nonzero_32.0', 'rhs': '$_206binary_subscr_101_14.1', 'res': '$6binary_multiply.2'}), (8, {'retval': '$6binary_multiply.2', 'castval': '$8return_value.3'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG 2022-02-14 16:38:00,029 label 0:
    _206binary_subscr_101_1 = arg(0, name=_206binary_subscr_101_1) ['_206binary_subscr_101_1']
    kept_edges_nonzero_3 = arg(1, name=kept_edges_nonzero_3) ['kept_edges_nonzero_3']
    $6binary_multiply.2 = kept_edges_nonzero_3 * _206binary_subscr_101_1 ['$6binary_multiply.2', '_206binary_subscr_101_1', 'kept_edges_nonzero_3']
    $8return_value.3 = cast(value=$6binary_multiply.2) ['$6binary_multiply.2', '$8return_value.3']
    return $8return_value.3                  ['$8return_value.3']

DEBUG 2022-02-14 16:38:00,031 ==== SSA block analysis pass on 0
DEBUG 2022-02-14 16:38:00,031 Running <numba.core.ssa._GatherDefsHandler object at 0x7fa046d8dbb0>
DEBUG 2022-02-14 16:38:00,031 on stmt: _206binary_subscr_101_1 = arg(0, name=_206binary_subscr_101_1)
DEBUG 2022-02-14 16:38:00,031 on stmt: kept_edges_nonzero_3 = arg(1, name=kept_edges_nonzero_3)
DEBUG 2022-02-14 16:38:00,031 on stmt: $6binary_multiply.2 = kept_edges_nonzero_3 * _206binary_subscr_101_1
DEBUG 2022-02-14 16:38:00,031 on stmt: $8return_value.3 = cast(value=$6binary_multiply.2)
DEBUG 2022-02-14 16:38:00,031 on stmt: return $8return_value.3
DEBUG 2022-02-14 16:38:00,031 defs defaultdict(<class 'list'>,
            {'$6binary_multiply.2': [<numba.core.ir.Assign object at 0x7fa046d96910>],
             '$8return_value.3': [<numba.core.ir.Assign object at 0x7fa046d96a60>],
             '_206binary_subscr_101_1': [<numba.core.ir.Assign object at 0x7fa046d8d5b0>],
             'kept_edges_nonzero_3': [<numba.core.ir.Assign object at 0x7fa046d96070>]})
DEBUG 2022-02-14 16:38:00,031 SSA violators set()
DEBUG 2022-02-14 16:38:00,064 bytecode dump:
>          0	NOP(arg=None, lineno=191)
           2	LOAD_FAST(arg=1, lineno=191)
           4	LOAD_FAST(arg=0, lineno=203)
           6	BINARY_MULTIPLY(arg=None, lineno=1)
           8	RETURN_VALUE(arg=None, lineno=1)
DEBUG 2022-02-14 16:38:00,064 pending: deque([State(pc_initial=0 nstack_initial=0)])
DEBUG 2022-02-14 16:38:00,064 stack: []
DEBUG 2022-02-14 16:38:00,064 dispatch pc=0, inst=NOP(arg=None, lineno=191)
DEBUG 2022-02-14 16:38:00,064 stack []
DEBUG 2022-02-14 16:38:00,064 dispatch pc=2, inst=LOAD_FAST(arg=1, lineno=191)
DEBUG 2022-02-14 16:38:00,064 stack []
DEBUG 2022-02-14 16:38:00,064 dispatch pc=4, inst=LOAD_FAST(arg=0, lineno=203)
DEBUG 2022-02-14 16:38:00,064 stack ['$kept_edges_nonzero_42.0']
DEBUG 2022-02-14 16:38:00,064 dispatch pc=6, inst=BINARY_MULTIPLY(arg=None, lineno=1)
DEBUG 2022-02-14 16:38:00,064 stack ['$kept_edges_nonzero_42.0', '$_230binary_subscr_114_14.1']
DEBUG 2022-02-14 16:38:00,064 dispatch pc=8, inst=RETURN_VALUE(arg=None, lineno=1)
DEBUG 2022-02-14 16:38:00,064 stack ['$6binary_multiply.2']
DEBUG 2022-02-14 16:38:00,064 end state. edges=[]
DEBUG 2022-02-14 16:38:00,064 -------------------------Prune PHIs-------------------------
DEBUG 2022-02-14 16:38:00,064 Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
DEBUG 2022-02-14 16:38:00,065 defmap: {}
DEBUG 2022-02-14 16:38:00,065 phismap: defaultdict(<class 'set'>, {})
DEBUG 2022-02-14 16:38:00,065 changing phismap: defaultdict(<class 'set'>, {})
DEBUG 2022-02-14 16:38:00,065 keep phismap: {}
DEBUG 2022-02-14 16:38:00,065 new_out: defaultdict(<class 'dict'>, {})
DEBUG 2022-02-14 16:38:00,065 ----------------------DONE Prune PHIs-----------------------
DEBUG 2022-02-14 16:38:00,065 block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$kept_edges_nonzero_42.0'}), (4, {'res': '$_230binary_subscr_114_14.1'}), (6, {'lhs': '$kept_edges_nonzero_42.0', 'rhs': '$_230binary_subscr_114_14.1', 'res': '$6binary_multiply.2'}), (8, {'retval': '$6binary_multiply.2', 'castval': '$8return_value.3'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG 2022-02-14 16:38:00,065 label 0:
    _230binary_subscr_114_1 = arg(0, name=_230binary_subscr_114_1) ['_230binary_subscr_114_1']
    kept_edges_nonzero_4 = arg(1, name=kept_edges_nonzero_4) ['kept_edges_nonzero_4']
    $6binary_multiply.2 = kept_edges_nonzero_4 * _230binary_subscr_114_1 ['$6binary_multiply.2', '_230binary_subscr_114_1', 'kept_edges_nonzero_4']
    $8return_value.3 = cast(value=$6binary_multiply.2) ['$6binary_multiply.2', '$8return_value.3']
    return $8return_value.3                  ['$8return_value.3']

DEBUG 2022-02-14 16:38:00,066 ==== SSA block analysis pass on 0
DEBUG 2022-02-14 16:38:00,066 Running <numba.core.ssa._GatherDefsHandler object at 0x7fa046cc14f0>
DEBUG 2022-02-14 16:38:00,066 on stmt: _230binary_subscr_114_1 = arg(0, name=_230binary_subscr_114_1)
DEBUG 2022-02-14 16:38:00,066 on stmt: kept_edges_nonzero_4 = arg(1, name=kept_edges_nonzero_4)
DEBUG 2022-02-14 16:38:00,067 on stmt: $6binary_multiply.2 = kept_edges_nonzero_4 * _230binary_subscr_114_1
DEBUG 2022-02-14 16:38:00,067 on stmt: $8return_value.3 = cast(value=$6binary_multiply.2)
DEBUG 2022-02-14 16:38:00,067 on stmt: return $8return_value.3
DEBUG 2022-02-14 16:38:00,067 defs defaultdict(<class 'list'>,
            {'$6binary_multiply.2': [<numba.core.ir.Assign object at 0x7fa046cc5340>],
             '$8return_value.3': [<numba.core.ir.Assign object at 0x7fa046cc5490>],
             '_230binary_subscr_114_1': [<numba.core.ir.Assign object at 0x7fa046cc1430>],
             'kept_edges_nonzero_4': [<numba.core.ir.Assign object at 0x7fa046cc1610>]})
DEBUG 2022-02-14 16:38:00,067 SSA violators set()
DEBUG 2022-02-14 16:38:00,201 bytecode dump:
>          0	NOP(arg=None, lineno=191)
           2	LOAD_FAST(arg=1, lineno=191)
           4	LOAD_FAST(arg=0, lineno=208)
           6	BINARY_MULTIPLY(arg=None, lineno=1)
           8	RETURN_VALUE(arg=None, lineno=1)
DEBUG 2022-02-14 16:38:00,201 pending: deque([State(pc_initial=0 nstack_initial=0)])
DEBUG 2022-02-14 16:38:00,201 stack: []
DEBUG 2022-02-14 16:38:00,201 dispatch pc=0, inst=NOP(arg=None, lineno=191)
DEBUG 2022-02-14 16:38:00,201 stack []
DEBUG 2022-02-14 16:38:00,201 dispatch pc=2, inst=LOAD_FAST(arg=1, lineno=191)
DEBUG 2022-02-14 16:38:00,201 stack []
DEBUG 2022-02-14 16:38:00,201 dispatch pc=4, inst=LOAD_FAST(arg=0, lineno=208)
DEBUG 2022-02-14 16:38:00,201 stack ['$kept_edges_nonzero_52.0']
DEBUG 2022-02-14 16:38:00,201 dispatch pc=6, inst=BINARY_MULTIPLY(arg=None, lineno=1)
DEBUG 2022-02-14 16:38:00,201 stack ['$kept_edges_nonzero_52.0', '$_288binary_subscr_16_14.1']
DEBUG 2022-02-14 16:38:00,201 dispatch pc=8, inst=RETURN_VALUE(arg=None, lineno=1)
DEBUG 2022-02-14 16:38:00,201 stack ['$6binary_multiply.2']
DEBUG 2022-02-14 16:38:00,201 end state. edges=[]
DEBUG 2022-02-14 16:38:00,202 -------------------------Prune PHIs-------------------------
DEBUG 2022-02-14 16:38:00,202 Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
DEBUG 2022-02-14 16:38:00,202 defmap: {}
DEBUG 2022-02-14 16:38:00,202 phismap: defaultdict(<class 'set'>, {})
DEBUG 2022-02-14 16:38:00,202 changing phismap: defaultdict(<class 'set'>, {})
DEBUG 2022-02-14 16:38:00,202 keep phismap: {}
DEBUG 2022-02-14 16:38:00,202 new_out: defaultdict(<class 'dict'>, {})
DEBUG 2022-02-14 16:38:00,202 ----------------------DONE Prune PHIs-----------------------
DEBUG 2022-02-14 16:38:00,202 block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$kept_edges_nonzero_52.0'}), (4, {'res': '$_288binary_subscr_16_14.1'}), (6, {'lhs': '$kept_edges_nonzero_52.0', 'rhs': '$_288binary_subscr_16_14.1', 'res': '$6binary_multiply.2'}), (8, {'retval': '$6binary_multiply.2', 'castval': '$8return_value.3'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG 2022-02-14 16:38:00,203 label 0:
    _288binary_subscr_16_1 = arg(0, name=_288binary_subscr_16_1) ['_288binary_subscr_16_1']
    kept_edges_nonzero_5 = arg(1, name=kept_edges_nonzero_5) ['kept_edges_nonzero_5']
    $6binary_multiply.2 = kept_edges_nonzero_5 * _288binary_subscr_16_1 ['$6binary_multiply.2', '_288binary_subscr_16_1', 'kept_edges_nonzero_5']
    $8return_value.3 = cast(value=$6binary_multiply.2) ['$6binary_multiply.2', '$8return_value.3']
    return $8return_value.3                  ['$8return_value.3']

DEBUG 2022-02-14 16:38:00,204 ==== SSA block analysis pass on 0
DEBUG 2022-02-14 16:38:00,204 Running <numba.core.ssa._GatherDefsHandler object at 0x7fa04757eb80>
DEBUG 2022-02-14 16:38:00,204 on stmt: _288binary_subscr_16_1 = arg(0, name=_288binary_subscr_16_1)
DEBUG 2022-02-14 16:38:00,204 on stmt: kept_edges_nonzero_5 = arg(1, name=kept_edges_nonzero_5)
DEBUG 2022-02-14 16:38:00,204 on stmt: $6binary_multiply.2 = kept_edges_nonzero_5 * _288binary_subscr_16_1
DEBUG 2022-02-14 16:38:00,205 on stmt: $8return_value.3 = cast(value=$6binary_multiply.2)
DEBUG 2022-02-14 16:38:00,205 on stmt: return $8return_value.3
DEBUG 2022-02-14 16:38:00,205 defs defaultdict(<class 'list'>,
            {'$6binary_multiply.2': [<numba.core.ir.Assign object at 0x7fa047408940>],
             '$8return_value.3': [<numba.core.ir.Assign object at 0x7fa0475fa370>],
             '_288binary_subscr_16_1': [<numba.core.ir.Assign object at 0x7fa047583ca0>],
             'kept_edges_nonzero_5': [<numba.core.ir.Assign object at 0x7fa047408e50>]})
DEBUG 2022-02-14 16:38:00,205 SSA violators set()
DEBUG 2022-02-14 16:38:00,239 bytecode dump:
>          0	NOP(arg=None, lineno=191)
           2	LOAD_FAST(arg=1, lineno=191)
           4	LOAD_FAST(arg=0, lineno=209)
           6	BINARY_MULTIPLY(arg=None, lineno=1)
           8	RETURN_VALUE(arg=None, lineno=1)
DEBUG 2022-02-14 16:38:00,239 pending: deque([State(pc_initial=0 nstack_initial=0)])
DEBUG 2022-02-14 16:38:00,239 stack: []
DEBUG 2022-02-14 16:38:00,239 dispatch pc=0, inst=NOP(arg=None, lineno=191)
DEBUG 2022-02-14 16:38:00,239 stack []
DEBUG 2022-02-14 16:38:00,239 dispatch pc=2, inst=LOAD_FAST(arg=1, lineno=191)
DEBUG 2022-02-14 16:38:00,239 stack []
DEBUG 2022-02-14 16:38:00,239 dispatch pc=4, inst=LOAD_FAST(arg=0, lineno=209)
DEBUG 2022-02-14 16:38:00,239 stack ['$kept_edges_nonzero_62.0']
DEBUG 2022-02-14 16:38:00,240 dispatch pc=6, inst=BINARY_MULTIPLY(arg=None, lineno=1)
DEBUG 2022-02-14 16:38:00,240 stack ['$kept_edges_nonzero_62.0', '$_312binary_subscr_29_14.1']
DEBUG 2022-02-14 16:38:00,240 dispatch pc=8, inst=RETURN_VALUE(arg=None, lineno=1)
DEBUG 2022-02-14 16:38:00,240 stack ['$6binary_multiply.2']
DEBUG 2022-02-14 16:38:00,240 end state. edges=[]
DEBUG 2022-02-14 16:38:00,240 -------------------------Prune PHIs-------------------------
DEBUG 2022-02-14 16:38:00,240 Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
DEBUG 2022-02-14 16:38:00,240 defmap: {}
DEBUG 2022-02-14 16:38:00,240 phismap: defaultdict(<class 'set'>, {})
DEBUG 2022-02-14 16:38:00,240 changing phismap: defaultdict(<class 'set'>, {})
DEBUG 2022-02-14 16:38:00,240 keep phismap: {}
DEBUG 2022-02-14 16:38:00,240 new_out: defaultdict(<class 'dict'>, {})
DEBUG 2022-02-14 16:38:00,240 ----------------------DONE Prune PHIs-----------------------
DEBUG 2022-02-14 16:38:00,240 block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$kept_edges_nonzero_62.0'}), (4, {'res': '$_312binary_subscr_29_14.1'}), (6, {'lhs': '$kept_edges_nonzero_62.0', 'rhs': '$_312binary_subscr_29_14.1', 'res': '$6binary_multiply.2'}), (8, {'retval': '$6binary_multiply.2', 'castval': '$8return_value.3'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG 2022-02-14 16:38:00,241 label 0:
    _312binary_subscr_29_1 = arg(0, name=_312binary_subscr_29_1) ['_312binary_subscr_29_1']
    kept_edges_nonzero_6 = arg(1, name=kept_edges_nonzero_6) ['kept_edges_nonzero_6']
    $6binary_multiply.2 = kept_edges_nonzero_6 * _312binary_subscr_29_1 ['$6binary_multiply.2', '_312binary_subscr_29_1', 'kept_edges_nonzero_6']
    $8return_value.3 = cast(value=$6binary_multiply.2) ['$6binary_multiply.2', '$8return_value.3']
    return $8return_value.3                  ['$8return_value.3']

DEBUG 2022-02-14 16:38:00,242 ==== SSA block analysis pass on 0
DEBUG 2022-02-14 16:38:00,242 Running <numba.core.ssa._GatherDefsHandler object at 0x7fa046caa730>
DEBUG 2022-02-14 16:38:00,242 on stmt: _312binary_subscr_29_1 = arg(0, name=_312binary_subscr_29_1)
DEBUG 2022-02-14 16:38:00,242 on stmt: kept_edges_nonzero_6 = arg(1, name=kept_edges_nonzero_6)
DEBUG 2022-02-14 16:38:00,242 on stmt: $6binary_multiply.2 = kept_edges_nonzero_6 * _312binary_subscr_29_1
DEBUG 2022-02-14 16:38:00,242 on stmt: $8return_value.3 = cast(value=$6binary_multiply.2)
DEBUG 2022-02-14 16:38:00,242 on stmt: return $8return_value.3
DEBUG 2022-02-14 16:38:00,242 defs defaultdict(<class 'list'>,
            {'$6binary_multiply.2': [<numba.core.ir.Assign object at 0x7fa047404040>],
             '$8return_value.3': [<numba.core.ir.Assign object at 0x7fa047404190>],
             '_312binary_subscr_29_1': [<numba.core.ir.Assign object at 0x7fa046caa250>],
             'kept_edges_nonzero_6': [<numba.core.ir.Assign object at 0x7fa046caa2b0>]})
DEBUG 2022-02-14 16:38:00,243 SSA violators set()
DEBUG 2022-02-14 16:38:01,337 bytecode dump:
>          0	NOP(arg=None, lineno=250)
           2	LOAD_GLOBAL(arg=0, lineno=250)
           4	LOAD_ATTR(arg=1, lineno=250)
           6	LOAD_METHOD(arg=2, lineno=250)
           8	LOAD_FAST(arg=0, lineno=250)
          10	CALL_METHOD(arg=1, lineno=250)
          12	RETURN_VALUE(arg=None, lineno=250)
DEBUG 2022-02-14 16:38:01,337 pending: deque([State(pc_initial=0 nstack_initial=0)])
DEBUG 2022-02-14 16:38:01,337 stack: []
DEBUG 2022-02-14 16:38:01,337 dispatch pc=0, inst=NOP(arg=None, lineno=250)
DEBUG 2022-02-14 16:38:01,337 stack []
DEBUG 2022-02-14 16:38:01,337 dispatch pc=2, inst=LOAD_GLOBAL(arg=0, lineno=250)
DEBUG 2022-02-14 16:38:01,337 stack []
DEBUG 2022-02-14 16:38:01,338 dispatch pc=4, inst=LOAD_ATTR(arg=1, lineno=250)
DEBUG 2022-02-14 16:38:01,338 stack ['$2load_global.0']
DEBUG 2022-02-14 16:38:01,338 dispatch pc=6, inst=LOAD_METHOD(arg=2, lineno=250)
DEBUG 2022-02-14 16:38:01,338 stack ['$4load_attr.1']
DEBUG 2022-02-14 16:38:01,338 dispatch pc=8, inst=LOAD_FAST(arg=0, lineno=250)
DEBUG 2022-02-14 16:38:01,338 stack ['$6load_method.2']
DEBUG 2022-02-14 16:38:01,338 dispatch pc=10, inst=CALL_METHOD(arg=1, lineno=250)
DEBUG 2022-02-14 16:38:01,338 stack ['$6load_method.2', '$M8.3']
DEBUG 2022-02-14 16:38:01,338 dispatch pc=12, inst=RETURN_VALUE(arg=None, lineno=250)
DEBUG 2022-02-14 16:38:01,338 stack ['$10call_method.4']
DEBUG 2022-02-14 16:38:01,338 end state. edges=[]
DEBUG 2022-02-14 16:38:01,338 -------------------------Prune PHIs-------------------------
DEBUG 2022-02-14 16:38:01,338 Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
DEBUG 2022-02-14 16:38:01,338 defmap: {}
DEBUG 2022-02-14 16:38:01,338 phismap: defaultdict(<class 'set'>, {})
DEBUG 2022-02-14 16:38:01,338 changing phismap: defaultdict(<class 'set'>, {})
DEBUG 2022-02-14 16:38:01,338 keep phismap: {}
DEBUG 2022-02-14 16:38:01,338 new_out: defaultdict(<class 'dict'>, {})
DEBUG 2022-02-14 16:38:01,338 ----------------------DONE Prune PHIs-----------------------
DEBUG 2022-02-14 16:38:01,339 block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$2load_global.0'}), (4, {'item': '$2load_global.0', 'res': '$4load_attr.1'}), (6, {'item': '$4load_attr.1', 'res': '$6load_method.2'}), (8, {'res': '$M8.3'}), (10, {'func': '$6load_method.2', 'args': ['$M8.3'], 'res': '$10call_method.4'}), (12, {'retval': '$10call_method.4', 'castval': '$12return_value.5'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG 2022-02-14 16:38:01,339 label 0:
    M = arg(0, name=M)                       ['M']
    $2load_global.0 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>) ['$2load_global.0']
    $4load_attr.1 = getattr(value=$2load_global.0, attr=linalg) ['$2load_global.0', '$4load_attr.1']
    $6load_method.2 = getattr(value=$4load_attr.1, attr=eigvals) ['$4load_attr.1', '$6load_method.2']
    $10call_method.4 = call $6load_method.2(M, func=$6load_method.2, args=[Var(M, _loop_hafnian_subroutines.py:250)], kws=(), vararg=None, target=None) ['$10call_method.4', '$6load_method.2', 'M']
    $12return_value.5 = cast(value=$10call_method.4) ['$10call_method.4', '$12return_value.5']
    return $12return_value.5                 ['$12return_value.5']

DEBUG 2022-02-14 16:38:01,341 ==== SSA block analysis pass on 0
DEBUG 2022-02-14 16:38:01,341 Running <numba.core.ssa._GatherDefsHandler object at 0x7fa0470fa160>
DEBUG 2022-02-14 16:38:01,341 on stmt: M = arg(0, name=M)
DEBUG 2022-02-14 16:38:01,341 on stmt: $2load_global.0 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:38:01,341 on stmt: $4load_attr.1 = getattr(value=$2load_global.0, attr=linalg)
DEBUG 2022-02-14 16:38:01,341 on stmt: $6load_method.2 = getattr(value=$4load_attr.1, attr=eigvals)
DEBUG 2022-02-14 16:38:01,341 on stmt: $10call_method.4 = call $6load_method.2(M, func=$6load_method.2, args=[Var(M, _loop_hafnian_subroutines.py:250)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:01,341 on stmt: $12return_value.5 = cast(value=$10call_method.4)
DEBUG 2022-02-14 16:38:01,341 on stmt: return $12return_value.5
DEBUG 2022-02-14 16:38:01,342 defs defaultdict(<class 'list'>,
            {'$10call_method.4': [<numba.core.ir.Assign object at 0x7fa0470faca0>],
             '$12return_value.5': [<numba.core.ir.Assign object at 0x7fa0470faaf0>],
             '$2load_global.0': [<numba.core.ir.Assign object at 0x7fa04711cb20>],
             '$4load_attr.1': [<numba.core.ir.Assign object at 0x7fa0470fa5b0>],
             '$6load_method.2': [<numba.core.ir.Assign object at 0x7fa0470fa9a0>],
             'M': [<numba.core.ir.Assign object at 0x7fa04711c850>]})
DEBUG 2022-02-14 16:38:01,342 SSA violators set()
DEBUG 2022-02-14 16:38:01,344 bytecode dump:
>          0	NOP(arg=None, lineno=1136)
           2	LOAD_FAST(arg=0, lineno=1136)
           4	LOAD_ATTR(arg=0, lineno=1136)
           6	LOAD_CONST(arg=1, lineno=1136)
           8	BINARY_SUBSCR(arg=None, lineno=1136)
          10	STORE_FAST(arg=1, lineno=1136)
          12	LOAD_FAST(arg=0, lineno=1137)
          14	LOAD_ATTR(arg=0, lineno=1137)
          16	LOAD_CONST(arg=2, lineno=1137)
          18	BINARY_SUBSCR(arg=None, lineno=1137)
          20	LOAD_FAST(arg=1, lineno=1137)
          22	COMPARE_OP(arg=3, lineno=1137)
          24	POP_JUMP_IF_FALSE(arg=42, lineno=1137)
          26	LOAD_CONST(arg=3, lineno=1138)
          28	STORE_FAST(arg=2, lineno=1138)
          30	LOAD_GLOBAL(arg=1, lineno=1139)
          32	LOAD_ATTR(arg=2, lineno=1139)
          34	LOAD_METHOD(arg=3, lineno=1139)
          36	LOAD_FAST(arg=2, lineno=1139)
          38	CALL_METHOD(arg=1, lineno=1139)
          40	RAISE_VARARGS(arg=1, lineno=1139)
>         42	LOAD_GLOBAL(arg=4, lineno=1141)
          44	LOAD_FAST(arg=0, lineno=1141)
          46	CALL_FUNCTION(arg=1, lineno=1141)
          48	POP_TOP(arg=None, lineno=1141)
          50	LOAD_GLOBAL(arg=5, lineno=1143)
          52	LOAD_FAST(arg=0, lineno=1143)
          54	CALL_FUNCTION(arg=1, lineno=1143)
          56	STORE_FAST(arg=3, lineno=1143)
          58	LOAD_CONST(arg=4, lineno=1145)
          60	STORE_FAST(arg=4, lineno=1145)
          62	LOAD_CONST(arg=4, lineno=1146)
          64	STORE_FAST(arg=5, lineno=1146)
          66	LOAD_GLOBAL(arg=1, lineno=1147)
          68	LOAD_ATTR(arg=6, lineno=1147)
          70	LOAD_FAST(arg=1, lineno=1147)
          72	LOAD_FAST(arg=0, lineno=1147)
          74	LOAD_ATTR(arg=7, lineno=1147)
          76	LOAD_CONST(arg=5, lineno=1147)
          78	CALL_FUNCTION_KW(arg=2, lineno=1147)
          80	STORE_FAST(arg=6, lineno=1147)
          82	LOAD_FAST(arg=1, lineno=1149)
          84	LOAD_CONST(arg=6, lineno=1149)
          86	COMPARE_OP(arg=2, lineno=1149)
          88	POP_JUMP_IF_FALSE(arg=94, lineno=1149)
          90	LOAD_FAST(arg=6, lineno=1150)
          92	RETURN_VALUE(arg=None, lineno=1150)
>         94	LOAD_GLOBAL(arg=1, lineno=1152)
          96	LOAD_ATTR(arg=6, lineno=1152)
          98	LOAD_CONST(arg=4, lineno=1152)
         100	LOAD_FAST(arg=0, lineno=1152)
         102	LOAD_ATTR(arg=7, lineno=1152)
         104	LOAD_CONST(arg=5, lineno=1152)
         106	CALL_FUNCTION_KW(arg=2, lineno=1152)
         108	STORE_FAST(arg=7, lineno=1152)
         110	LOAD_GLOBAL(arg=1, lineno=1153)
         112	LOAD_ATTR(arg=6, lineno=1153)
         114	LOAD_CONST(arg=4, lineno=1153)
         116	LOAD_FAST(arg=0, lineno=1153)
         118	LOAD_ATTR(arg=7, lineno=1153)
         120	LOAD_CONST(arg=5, lineno=1153)
         122	CALL_FUNCTION_KW(arg=2, lineno=1153)
         124	STORE_FAST(arg=8, lineno=1153)
         126	LOAD_DEREF(arg=3, lineno=1155)
         128	LOAD_DEREF(arg=2, lineno=1155)
         130	LOAD_DEREF(arg=0, lineno=1156)
         132	LOAD_DEREF(arg=1, lineno=1157)
         134	LOAD_FAST(arg=1, lineno=1158)
         136	LOAD_FAST(arg=3, lineno=1159)
         138	LOAD_ATTR(arg=8, lineno=1159)
         140	LOAD_FAST(arg=1, lineno=1160)
         142	LOAD_FAST(arg=6, lineno=1161)
         144	LOAD_ATTR(arg=8, lineno=1161)
         146	LOAD_FAST(arg=7, lineno=1162)
         148	LOAD_ATTR(arg=8, lineno=1162)
         150	LOAD_FAST(arg=4, lineno=1163)
         152	LOAD_FAST(arg=8, lineno=1164)
         154	LOAD_ATTR(arg=8, lineno=1164)
         156	LOAD_FAST(arg=5, lineno=1165)
         158	CALL_FUNCTION(arg=11, lineno=1155)
         160	STORE_FAST(arg=9, lineno=1155)
         162	LOAD_GLOBAL(arg=9, lineno=1166)
         164	LOAD_FAST(arg=9, lineno=1166)
         166	CALL_FUNCTION(arg=1, lineno=1166)
         168	POP_TOP(arg=None, lineno=1166)
         170	LOAD_GLOBAL(arg=10, lineno=1170)
         172	LOAD_FAST(arg=3, lineno=1170)
         174	LOAD_ATTR(arg=11, lineno=1170)
         176	LOAD_FAST(arg=7, lineno=1170)
         178	LOAD_ATTR(arg=11, lineno=1170)
         180	LOAD_FAST(arg=8, lineno=1170)
         182	LOAD_ATTR(arg=11, lineno=1170)
         184	LOAD_FAST(arg=6, lineno=1170)
         186	LOAD_ATTR(arg=11, lineno=1170)
         188	BUILD_LIST(arg=4, lineno=1170)
         190	CALL_FUNCTION(arg=1, lineno=1170)
         192	POP_TOP(arg=None, lineno=1170)
         194	LOAD_FAST(arg=6, lineno=1171)
         196	RETURN_VALUE(arg=None, lineno=1171)
DEBUG 2022-02-14 16:38:01,344 pending: deque([State(pc_initial=0 nstack_initial=0)])
DEBUG 2022-02-14 16:38:01,344 stack: []
DEBUG 2022-02-14 16:38:01,344 dispatch pc=0, inst=NOP(arg=None, lineno=1136)
DEBUG 2022-02-14 16:38:01,344 stack []
DEBUG 2022-02-14 16:38:01,344 dispatch pc=2, inst=LOAD_FAST(arg=0, lineno=1136)
DEBUG 2022-02-14 16:38:01,344 stack []
DEBUG 2022-02-14 16:38:01,344 dispatch pc=4, inst=LOAD_ATTR(arg=0, lineno=1136)
DEBUG 2022-02-14 16:38:01,344 stack ['$a2.0']
DEBUG 2022-02-14 16:38:01,344 dispatch pc=6, inst=LOAD_CONST(arg=1, lineno=1136)
DEBUG 2022-02-14 16:38:01,344 stack ['$4load_attr.1']
DEBUG 2022-02-14 16:38:01,344 dispatch pc=8, inst=BINARY_SUBSCR(arg=None, lineno=1136)
DEBUG 2022-02-14 16:38:01,344 stack ['$4load_attr.1', '$const6.2']
DEBUG 2022-02-14 16:38:01,344 dispatch pc=10, inst=STORE_FAST(arg=1, lineno=1136)
DEBUG 2022-02-14 16:38:01,344 stack ['$8binary_subscr.3']
DEBUG 2022-02-14 16:38:01,344 dispatch pc=12, inst=LOAD_FAST(arg=0, lineno=1137)
DEBUG 2022-02-14 16:38:01,345 stack []
DEBUG 2022-02-14 16:38:01,345 dispatch pc=14, inst=LOAD_ATTR(arg=0, lineno=1137)
DEBUG 2022-02-14 16:38:01,345 stack ['$a12.4']
DEBUG 2022-02-14 16:38:01,345 dispatch pc=16, inst=LOAD_CONST(arg=2, lineno=1137)
DEBUG 2022-02-14 16:38:01,345 stack ['$14load_attr.5']
DEBUG 2022-02-14 16:38:01,345 dispatch pc=18, inst=BINARY_SUBSCR(arg=None, lineno=1137)
DEBUG 2022-02-14 16:38:01,345 stack ['$14load_attr.5', '$const16.6']
DEBUG 2022-02-14 16:38:01,345 dispatch pc=20, inst=LOAD_FAST(arg=1, lineno=1137)
DEBUG 2022-02-14 16:38:01,345 stack ['$18binary_subscr.7']
DEBUG 2022-02-14 16:38:01,345 dispatch pc=22, inst=COMPARE_OP(arg=3, lineno=1137)
DEBUG 2022-02-14 16:38:01,345 stack ['$18binary_subscr.7', '$n20.8']
DEBUG 2022-02-14 16:38:01,345 dispatch pc=24, inst=POP_JUMP_IF_FALSE(arg=42, lineno=1137)
DEBUG 2022-02-14 16:38:01,345 stack ['$22compare_op.9']
DEBUG 2022-02-14 16:38:01,345 end state. edges=[Edge(pc=26, stack=(), blockstack=(), npush=0), Edge(pc=42, stack=(), blockstack=(), npush=0)]
DEBUG 2022-02-14 16:38:01,345 pending: deque([State(pc_initial=26 nstack_initial=0), State(pc_initial=42 nstack_initial=0)])
DEBUG 2022-02-14 16:38:01,345 stack: []
DEBUG 2022-02-14 16:38:01,345 dispatch pc=26, inst=LOAD_CONST(arg=3, lineno=1138)
DEBUG 2022-02-14 16:38:01,345 stack []
DEBUG 2022-02-14 16:38:01,345 dispatch pc=28, inst=STORE_FAST(arg=2, lineno=1138)
DEBUG 2022-02-14 16:38:01,345 stack ['$const26.0']
DEBUG 2022-02-14 16:38:01,345 dispatch pc=30, inst=LOAD_GLOBAL(arg=1, lineno=1139)
DEBUG 2022-02-14 16:38:01,345 stack []
DEBUG 2022-02-14 16:38:01,345 dispatch pc=32, inst=LOAD_ATTR(arg=2, lineno=1139)
DEBUG 2022-02-14 16:38:01,346 stack ['$30load_global.1']
DEBUG 2022-02-14 16:38:01,346 dispatch pc=34, inst=LOAD_METHOD(arg=3, lineno=1139)
DEBUG 2022-02-14 16:38:01,346 stack ['$32load_attr.2']
DEBUG 2022-02-14 16:38:01,346 dispatch pc=36, inst=LOAD_FAST(arg=2, lineno=1139)
DEBUG 2022-02-14 16:38:01,346 stack ['$34load_method.3']
DEBUG 2022-02-14 16:38:01,346 dispatch pc=38, inst=CALL_METHOD(arg=1, lineno=1139)
DEBUG 2022-02-14 16:38:01,346 stack ['$34load_method.3', '$msg36.4']
DEBUG 2022-02-14 16:38:01,346 dispatch pc=40, inst=RAISE_VARARGS(arg=1, lineno=1139)
DEBUG 2022-02-14 16:38:01,346 stack ['$38call_method.5']
DEBUG 2022-02-14 16:38:01,346 end state. edges=[]
DEBUG 2022-02-14 16:38:01,346 pending: deque([State(pc_initial=42 nstack_initial=0)])
DEBUG 2022-02-14 16:38:01,346 stack: []
DEBUG 2022-02-14 16:38:01,346 dispatch pc=42, inst=LOAD_GLOBAL(arg=4, lineno=1141)
DEBUG 2022-02-14 16:38:01,346 stack []
DEBUG 2022-02-14 16:38:01,346 dispatch pc=44, inst=LOAD_FAST(arg=0, lineno=1141)
DEBUG 2022-02-14 16:38:01,346 stack ['$42load_global.0']
DEBUG 2022-02-14 16:38:01,346 dispatch pc=46, inst=CALL_FUNCTION(arg=1, lineno=1141)
DEBUG 2022-02-14 16:38:01,346 stack ['$42load_global.0', '$a44.1']
DEBUG 2022-02-14 16:38:01,346 dispatch pc=48, inst=POP_TOP(arg=None, lineno=1141)
DEBUG 2022-02-14 16:38:01,346 stack ['$46call_function.2']
DEBUG 2022-02-14 16:38:01,346 dispatch pc=50, inst=LOAD_GLOBAL(arg=5, lineno=1143)
DEBUG 2022-02-14 16:38:01,346 stack []
DEBUG 2022-02-14 16:38:01,346 dispatch pc=52, inst=LOAD_FAST(arg=0, lineno=1143)
DEBUG 2022-02-14 16:38:01,346 stack ['$50load_global.3']
DEBUG 2022-02-14 16:38:01,347 dispatch pc=54, inst=CALL_FUNCTION(arg=1, lineno=1143)
DEBUG 2022-02-14 16:38:01,347 stack ['$50load_global.3', '$a52.4']
DEBUG 2022-02-14 16:38:01,347 dispatch pc=56, inst=STORE_FAST(arg=3, lineno=1143)
DEBUG 2022-02-14 16:38:01,347 stack ['$54call_function.5']
DEBUG 2022-02-14 16:38:01,347 dispatch pc=58, inst=LOAD_CONST(arg=4, lineno=1145)
DEBUG 2022-02-14 16:38:01,347 stack []
DEBUG 2022-02-14 16:38:01,347 dispatch pc=60, inst=STORE_FAST(arg=4, lineno=1145)
DEBUG 2022-02-14 16:38:01,347 stack ['$const58.6']
DEBUG 2022-02-14 16:38:01,347 dispatch pc=62, inst=LOAD_CONST(arg=4, lineno=1146)
DEBUG 2022-02-14 16:38:01,347 stack []
DEBUG 2022-02-14 16:38:01,347 dispatch pc=64, inst=STORE_FAST(arg=5, lineno=1146)
DEBUG 2022-02-14 16:38:01,347 stack ['$const62.7']
DEBUG 2022-02-14 16:38:01,347 dispatch pc=66, inst=LOAD_GLOBAL(arg=1, lineno=1147)
DEBUG 2022-02-14 16:38:01,347 stack []
DEBUG 2022-02-14 16:38:01,347 dispatch pc=68, inst=LOAD_ATTR(arg=6, lineno=1147)
DEBUG 2022-02-14 16:38:01,347 stack ['$66load_global.8']
DEBUG 2022-02-14 16:38:01,347 dispatch pc=70, inst=LOAD_FAST(arg=1, lineno=1147)
DEBUG 2022-02-14 16:38:01,347 stack ['$68load_attr.9']
DEBUG 2022-02-14 16:38:01,347 dispatch pc=72, inst=LOAD_FAST(arg=0, lineno=1147)
DEBUG 2022-02-14 16:38:01,347 stack ['$68load_attr.9', '$n70.10']
DEBUG 2022-02-14 16:38:01,347 dispatch pc=74, inst=LOAD_ATTR(arg=7, lineno=1147)
DEBUG 2022-02-14 16:38:01,347 stack ['$68load_attr.9', '$n70.10', '$a72.11']
DEBUG 2022-02-14 16:38:01,347 dispatch pc=76, inst=LOAD_CONST(arg=5, lineno=1147)
DEBUG 2022-02-14 16:38:01,347 stack ['$68load_attr.9', '$n70.10', '$74load_attr.12']
DEBUG 2022-02-14 16:38:01,348 dispatch pc=78, inst=CALL_FUNCTION_KW(arg=2, lineno=1147)
DEBUG 2022-02-14 16:38:01,348 stack ['$68load_attr.9', '$n70.10', '$74load_attr.12', '$const76.13']
DEBUG 2022-02-14 16:38:01,348 dispatch pc=80, inst=STORE_FAST(arg=6, lineno=1147)
DEBUG 2022-02-14 16:38:01,348 stack ['$78call_function_kw.14']
DEBUG 2022-02-14 16:38:01,348 dispatch pc=82, inst=LOAD_FAST(arg=1, lineno=1149)
DEBUG 2022-02-14 16:38:01,348 stack []
DEBUG 2022-02-14 16:38:01,348 dispatch pc=84, inst=LOAD_CONST(arg=6, lineno=1149)
DEBUG 2022-02-14 16:38:01,348 stack ['$n82.15']
DEBUG 2022-02-14 16:38:01,348 dispatch pc=86, inst=COMPARE_OP(arg=2, lineno=1149)
DEBUG 2022-02-14 16:38:01,348 stack ['$n82.15', '$const84.16']
DEBUG 2022-02-14 16:38:01,348 dispatch pc=88, inst=POP_JUMP_IF_FALSE(arg=94, lineno=1149)
DEBUG 2022-02-14 16:38:01,348 stack ['$86compare_op.17']
DEBUG 2022-02-14 16:38:01,348 end state. edges=[Edge(pc=90, stack=(), blockstack=(), npush=0), Edge(pc=94, stack=(), blockstack=(), npush=0)]
DEBUG 2022-02-14 16:38:01,348 pending: deque([State(pc_initial=90 nstack_initial=0), State(pc_initial=94 nstack_initial=0)])
DEBUG 2022-02-14 16:38:01,348 stack: []
DEBUG 2022-02-14 16:38:01,348 dispatch pc=90, inst=LOAD_FAST(arg=6, lineno=1150)
DEBUG 2022-02-14 16:38:01,348 stack []
DEBUG 2022-02-14 16:38:01,348 dispatch pc=92, inst=RETURN_VALUE(arg=None, lineno=1150)
DEBUG 2022-02-14 16:38:01,348 stack ['$w90.0']
DEBUG 2022-02-14 16:38:01,348 end state. edges=[]
DEBUG 2022-02-14 16:38:01,348 pending: deque([State(pc_initial=94 nstack_initial=0)])
DEBUG 2022-02-14 16:38:01,348 stack: []
DEBUG 2022-02-14 16:38:01,348 dispatch pc=94, inst=LOAD_GLOBAL(arg=1, lineno=1152)
DEBUG 2022-02-14 16:38:01,348 stack []
DEBUG 2022-02-14 16:38:01,348 dispatch pc=96, inst=LOAD_ATTR(arg=6, lineno=1152)
DEBUG 2022-02-14 16:38:01,349 stack ['$94load_global.0']
DEBUG 2022-02-14 16:38:01,349 dispatch pc=98, inst=LOAD_CONST(arg=4, lineno=1152)
DEBUG 2022-02-14 16:38:01,349 stack ['$96load_attr.1']
DEBUG 2022-02-14 16:38:01,349 dispatch pc=100, inst=LOAD_FAST(arg=0, lineno=1152)
DEBUG 2022-02-14 16:38:01,349 stack ['$96load_attr.1', '$const98.2']
DEBUG 2022-02-14 16:38:01,349 dispatch pc=102, inst=LOAD_ATTR(arg=7, lineno=1152)
DEBUG 2022-02-14 16:38:01,349 stack ['$96load_attr.1', '$const98.2', '$a100.3']
DEBUG 2022-02-14 16:38:01,349 dispatch pc=104, inst=LOAD_CONST(arg=5, lineno=1152)
DEBUG 2022-02-14 16:38:01,349 stack ['$96load_attr.1', '$const98.2', '$102load_attr.4']
DEBUG 2022-02-14 16:38:01,349 dispatch pc=106, inst=CALL_FUNCTION_KW(arg=2, lineno=1152)
DEBUG 2022-02-14 16:38:01,349 stack ['$96load_attr.1', '$const98.2', '$102load_attr.4', '$const104.5']
DEBUG 2022-02-14 16:38:01,349 dispatch pc=108, inst=STORE_FAST(arg=7, lineno=1152)
DEBUG 2022-02-14 16:38:01,349 stack ['$106call_function_kw.6']
DEBUG 2022-02-14 16:38:01,349 dispatch pc=110, inst=LOAD_GLOBAL(arg=1, lineno=1153)
DEBUG 2022-02-14 16:38:01,349 stack []
DEBUG 2022-02-14 16:38:01,349 dispatch pc=112, inst=LOAD_ATTR(arg=6, lineno=1153)
DEBUG 2022-02-14 16:38:01,349 stack ['$110load_global.7']
DEBUG 2022-02-14 16:38:01,349 dispatch pc=114, inst=LOAD_CONST(arg=4, lineno=1153)
DEBUG 2022-02-14 16:38:01,349 stack ['$112load_attr.8']
DEBUG 2022-02-14 16:38:01,349 dispatch pc=116, inst=LOAD_FAST(arg=0, lineno=1153)
DEBUG 2022-02-14 16:38:01,349 stack ['$112load_attr.8', '$const114.9']
DEBUG 2022-02-14 16:38:01,349 dispatch pc=118, inst=LOAD_ATTR(arg=7, lineno=1153)
DEBUG 2022-02-14 16:38:01,349 stack ['$112load_attr.8', '$const114.9', '$a116.10']
DEBUG 2022-02-14 16:38:01,350 dispatch pc=120, inst=LOAD_CONST(arg=5, lineno=1153)
DEBUG 2022-02-14 16:38:01,350 stack ['$112load_attr.8', '$const114.9', '$118load_attr.11']
DEBUG 2022-02-14 16:38:01,350 dispatch pc=122, inst=CALL_FUNCTION_KW(arg=2, lineno=1153)
DEBUG 2022-02-14 16:38:01,350 stack ['$112load_attr.8', '$const114.9', '$118load_attr.11', '$const120.12']
DEBUG 2022-02-14 16:38:01,350 dispatch pc=124, inst=STORE_FAST(arg=8, lineno=1153)
DEBUG 2022-02-14 16:38:01,350 stack ['$122call_function_kw.13']
DEBUG 2022-02-14 16:38:01,350 dispatch pc=126, inst=LOAD_DEREF(arg=3, lineno=1155)
DEBUG 2022-02-14 16:38:01,350 stack []
DEBUG 2022-02-14 16:38:01,350 dispatch pc=128, inst=LOAD_DEREF(arg=2, lineno=1155)
DEBUG 2022-02-14 16:38:01,350 stack ['$126load_deref.14']
DEBUG 2022-02-14 16:38:01,350 dispatch pc=130, inst=LOAD_DEREF(arg=0, lineno=1156)
DEBUG 2022-02-14 16:38:01,350 stack ['$126load_deref.14', '$128load_deref.15']
DEBUG 2022-02-14 16:38:01,350 dispatch pc=132, inst=LOAD_DEREF(arg=1, lineno=1157)
DEBUG 2022-02-14 16:38:01,350 stack ['$126load_deref.14', '$128load_deref.15', '$130load_deref.16']
DEBUG 2022-02-14 16:38:01,350 dispatch pc=134, inst=LOAD_FAST(arg=1, lineno=1158)
DEBUG 2022-02-14 16:38:01,350 stack ['$126load_deref.14', '$128load_deref.15', '$130load_deref.16', '$132load_deref.17']
DEBUG 2022-02-14 16:38:01,350 dispatch pc=136, inst=LOAD_FAST(arg=3, lineno=1159)
DEBUG 2022-02-14 16:38:01,350 stack ['$126load_deref.14', '$128load_deref.15', '$130load_deref.16', '$132load_deref.17', '$n134.18']
DEBUG 2022-02-14 16:38:01,350 dispatch pc=138, inst=LOAD_ATTR(arg=8, lineno=1159)
DEBUG 2022-02-14 16:38:01,350 stack ['$126load_deref.14', '$128load_deref.15', '$130load_deref.16', '$132load_deref.17', '$n134.18', '$acpy136.19']
DEBUG 2022-02-14 16:38:01,351 dispatch pc=140, inst=LOAD_FAST(arg=1, lineno=1160)
DEBUG 2022-02-14 16:38:01,351 stack ['$126load_deref.14', '$128load_deref.15', '$130load_deref.16', '$132load_deref.17', '$n134.18', '$138load_attr.20']
DEBUG 2022-02-14 16:38:01,351 dispatch pc=142, inst=LOAD_FAST(arg=6, lineno=1161)
DEBUG 2022-02-14 16:38:01,351 stack ['$126load_deref.14', '$128load_deref.15', '$130load_deref.16', '$132load_deref.17', '$n134.18', '$138load_attr.20', '$n140.21']
DEBUG 2022-02-14 16:38:01,351 dispatch pc=144, inst=LOAD_ATTR(arg=8, lineno=1161)
DEBUG 2022-02-14 16:38:01,351 stack ['$126load_deref.14', '$128load_deref.15', '$130load_deref.16', '$132load_deref.17', '$n134.18', '$138load_attr.20', '$n140.21', '$w142.22']
DEBUG 2022-02-14 16:38:01,351 dispatch pc=146, inst=LOAD_FAST(arg=7, lineno=1162)
DEBUG 2022-02-14 16:38:01,351 stack ['$126load_deref.14', '$128load_deref.15', '$130load_deref.16', '$132load_deref.17', '$n134.18', '$138load_attr.20', '$n140.21', '$144load_attr.23']
DEBUG 2022-02-14 16:38:01,351 dispatch pc=148, inst=LOAD_ATTR(arg=8, lineno=1162)
DEBUG 2022-02-14 16:38:01,351 stack ['$126load_deref.14', '$128load_deref.15', '$130load_deref.16', '$132load_deref.17', '$n134.18', '$138load_attr.20', '$n140.21', '$144load_attr.23', '$vl146.24']
DEBUG 2022-02-14 16:38:01,351 dispatch pc=150, inst=LOAD_FAST(arg=4, lineno=1163)
DEBUG 2022-02-14 16:38:01,351 stack ['$126load_deref.14', '$128load_deref.15', '$130load_deref.16', '$132load_deref.17', '$n134.18', '$138load_attr.20', '$n140.21', '$144load_attr.23', '$148load_attr.25']
DEBUG 2022-02-14 16:38:01,351 dispatch pc=152, inst=LOAD_FAST(arg=8, lineno=1164)
DEBUG 2022-02-14 16:38:01,351 stack ['$126load_deref.14', '$128load_deref.15', '$130load_deref.16', '$132load_deref.17', '$n134.18', '$138load_attr.20', '$n140.21', '$144load_attr.23', '$148load_attr.25', '$ldvl150.26']
DEBUG 2022-02-14 16:38:01,351 dispatch pc=154, inst=LOAD_ATTR(arg=8, lineno=1164)
DEBUG 2022-02-14 16:38:01,351 stack ['$126load_deref.14', '$128load_deref.15', '$130load_deref.16', '$132load_deref.17', '$n134.18', '$138load_attr.20', '$n140.21', '$144load_attr.23', '$148load_attr.25', '$ldvl150.26', '$vr152.27']
DEBUG 2022-02-14 16:38:01,351 dispatch pc=156, inst=LOAD_FAST(arg=5, lineno=1165)
DEBUG 2022-02-14 16:38:01,351 stack ['$126load_deref.14', '$128load_deref.15', '$130load_deref.16', '$132load_deref.17', '$n134.18', '$138load_attr.20', '$n140.21', '$144load_attr.23', '$148load_attr.25', '$ldvl150.26', '$154load_attr.28']
DEBUG 2022-02-14 16:38:01,351 dispatch pc=158, inst=CALL_FUNCTION(arg=11, lineno=1155)
DEBUG 2022-02-14 16:38:01,351 stack ['$126load_deref.14', '$128load_deref.15', '$130load_deref.16', '$132load_deref.17', '$n134.18', '$138load_attr.20', '$n140.21', '$144load_attr.23', '$148load_attr.25', '$ldvl150.26', '$154load_attr.28', '$ldvr156.29']
DEBUG 2022-02-14 16:38:01,352 dispatch pc=160, inst=STORE_FAST(arg=9, lineno=1155)
DEBUG 2022-02-14 16:38:01,352 stack ['$158call_function.30']
DEBUG 2022-02-14 16:38:01,352 dispatch pc=162, inst=LOAD_GLOBAL(arg=9, lineno=1166)
DEBUG 2022-02-14 16:38:01,352 stack []
DEBUG 2022-02-14 16:38:01,352 dispatch pc=164, inst=LOAD_FAST(arg=9, lineno=1166)
DEBUG 2022-02-14 16:38:01,352 stack ['$162load_global.31']
DEBUG 2022-02-14 16:38:01,352 dispatch pc=166, inst=CALL_FUNCTION(arg=1, lineno=1166)
DEBUG 2022-02-14 16:38:01,352 stack ['$162load_global.31', '$r164.32']
DEBUG 2022-02-14 16:38:01,352 dispatch pc=168, inst=POP_TOP(arg=None, lineno=1166)
DEBUG 2022-02-14 16:38:01,352 stack ['$166call_function.33']
DEBUG 2022-02-14 16:38:01,352 dispatch pc=170, inst=LOAD_GLOBAL(arg=10, lineno=1170)
DEBUG 2022-02-14 16:38:01,352 stack []
DEBUG 2022-02-14 16:38:01,352 dispatch pc=172, inst=LOAD_FAST(arg=3, lineno=1170)
DEBUG 2022-02-14 16:38:01,352 stack ['$170load_global.34']
DEBUG 2022-02-14 16:38:01,352 dispatch pc=174, inst=LOAD_ATTR(arg=11, lineno=1170)
DEBUG 2022-02-14 16:38:01,353 stack ['$170load_global.34', '$acpy172.35']
DEBUG 2022-02-14 16:38:01,353 dispatch pc=176, inst=LOAD_FAST(arg=7, lineno=1170)
DEBUG 2022-02-14 16:38:01,353 stack ['$170load_global.34', '$174load_attr.36']
DEBUG 2022-02-14 16:38:01,353 dispatch pc=178, inst=LOAD_ATTR(arg=11, lineno=1170)
DEBUG 2022-02-14 16:38:01,353 stack ['$170load_global.34', '$174load_attr.36', '$vl176.37']
DEBUG 2022-02-14 16:38:01,353 dispatch pc=180, inst=LOAD_FAST(arg=8, lineno=1170)
DEBUG 2022-02-14 16:38:01,353 stack ['$170load_global.34', '$174load_attr.36', '$178load_attr.38']
DEBUG 2022-02-14 16:38:01,353 dispatch pc=182, inst=LOAD_ATTR(arg=11, lineno=1170)
DEBUG 2022-02-14 16:38:01,353 stack ['$170load_global.34', '$174load_attr.36', '$178load_attr.38', '$vr180.39']
DEBUG 2022-02-14 16:38:01,353 dispatch pc=184, inst=LOAD_FAST(arg=6, lineno=1170)
DEBUG 2022-02-14 16:38:01,353 stack ['$170load_global.34', '$174load_attr.36', '$178load_attr.38', '$182load_attr.40']
DEBUG 2022-02-14 16:38:01,353 dispatch pc=186, inst=LOAD_ATTR(arg=11, lineno=1170)
DEBUG 2022-02-14 16:38:01,353 stack ['$170load_global.34', '$174load_attr.36', '$178load_attr.38', '$182load_attr.40', '$w184.41']
DEBUG 2022-02-14 16:38:01,353 dispatch pc=188, inst=BUILD_LIST(arg=4, lineno=1170)
DEBUG 2022-02-14 16:38:01,353 stack ['$170load_global.34', '$174load_attr.36', '$178load_attr.38', '$182load_attr.40', '$186load_attr.42']
DEBUG 2022-02-14 16:38:01,353 dispatch pc=190, inst=CALL_FUNCTION(arg=1, lineno=1170)
DEBUG 2022-02-14 16:38:01,353 stack ['$170load_global.34', '$188build_list.43']
DEBUG 2022-02-14 16:38:01,354 dispatch pc=192, inst=POP_TOP(arg=None, lineno=1170)
DEBUG 2022-02-14 16:38:01,354 stack ['$190call_function.44']
DEBUG 2022-02-14 16:38:01,354 dispatch pc=194, inst=LOAD_FAST(arg=6, lineno=1171)
DEBUG 2022-02-14 16:38:01,354 stack []
DEBUG 2022-02-14 16:38:01,354 dispatch pc=196, inst=RETURN_VALUE(arg=None, lineno=1171)
DEBUG 2022-02-14 16:38:01,354 stack ['$w194.45']
DEBUG 2022-02-14 16:38:01,354 end state. edges=[]
DEBUG 2022-02-14 16:38:01,354 -------------------------Prune PHIs-------------------------
DEBUG 2022-02-14 16:38:01,354 Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=26 nstack_initial=0): set(),
             State(pc_initial=42 nstack_initial=0): set(),
             State(pc_initial=90 nstack_initial=0): set(),
             State(pc_initial=94 nstack_initial=0): set()})
DEBUG 2022-02-14 16:38:01,354 defmap: {}
DEBUG 2022-02-14 16:38:01,354 phismap: defaultdict(<class 'set'>, {})
DEBUG 2022-02-14 16:38:01,354 changing phismap: defaultdict(<class 'set'>, {})
DEBUG 2022-02-14 16:38:01,354 keep phismap: {}
DEBUG 2022-02-14 16:38:01,354 new_out: defaultdict(<class 'dict'>, {})
DEBUG 2022-02-14 16:38:01,355 ----------------------DONE Prune PHIs-----------------------
DEBUG 2022-02-14 16:38:01,355 block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$a2.0'}), (4, {'item': '$a2.0', 'res': '$4load_attr.1'}), (6, {'res': '$const6.2'}), (8, {'index': '$const6.2', 'target': '$4load_attr.1', 'res': '$8binary_subscr.3'}), (10, {'value': '$8binary_subscr.3'}), (12, {'res': '$a12.4'}), (14, {'item': '$a12.4', 'res': '$14load_attr.5'}), (16, {'res': '$const16.6'}), (18, {'index': '$const16.6', 'target': '$14load_attr.5', 'res': '$18binary_subscr.7'}), (20, {'res': '$n20.8'}), (22, {'lhs': '$18binary_subscr.7', 'rhs': '$n20.8', 'res': '$22compare_op.9'}), (24, {'pred': '$22compare_op.9'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={26: (), 42: ()})
DEBUG 2022-02-14 16:38:01,355 block_infos State(pc_initial=26 nstack_initial=0):
AdaptBlockInfo(insts=((26, {'res': '$const26.0'}), (28, {'value': '$const26.0'}), (30, {'res': '$30load_global.1'}), (32, {'item': '$30load_global.1', 'res': '$32load_attr.2'}), (34, {'item': '$32load_attr.2', 'res': '$34load_method.3'}), (36, {'res': '$msg36.4'}), (38, {'func': '$34load_method.3', 'args': ['$msg36.4'], 'res': '$38call_method.5'}), (40, {'exc': '$38call_method.5'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG 2022-02-14 16:38:01,355 block_infos State(pc_initial=42 nstack_initial=0):
AdaptBlockInfo(insts=((42, {'res': '$42load_global.0'}), (44, {'res': '$a44.1'}), (46, {'func': '$42load_global.0', 'args': ['$a44.1'], 'res': '$46call_function.2'}), (50, {'res': '$50load_global.3'}), (52, {'res': '$a52.4'}), (54, {'func': '$50load_global.3', 'args': ['$a52.4'], 'res': '$54call_function.5'}), (56, {'value': '$54call_function.5'}), (58, {'res': '$const58.6'}), (60, {'value': '$const58.6'}), (62, {'res': '$const62.7'}), (64, {'value': '$const62.7'}), (66, {'res': '$66load_global.8'}), (68, {'item': '$66load_global.8', 'res': '$68load_attr.9'}), (70, {'res': '$n70.10'}), (72, {'res': '$a72.11'}), (74, {'item': '$a72.11', 'res': '$74load_attr.12'}), (76, {'res': '$const76.13'}), (78, {'func': '$68load_attr.9', 'args': ['$n70.10', '$74load_attr.12'], 'names': '$const76.13', 'res': '$78call_function_kw.14'}), (80, {'value': '$78call_function_kw.14'}), (82, {'res': '$n82.15'}), (84, {'res': '$const84.16'}), (86, {'lhs': '$n82.15', 'rhs': '$const84.16', 'res': '$86compare_op.17'}), (88, {'pred': '$86compare_op.17'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={90: (), 94: ()})
DEBUG 2022-02-14 16:38:01,355 block_infos State(pc_initial=90 nstack_initial=0):
AdaptBlockInfo(insts=((90, {'res': '$w90.0'}), (92, {'retval': '$w90.0', 'castval': '$92return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG 2022-02-14 16:38:01,355 block_infos State(pc_initial=94 nstack_initial=0):
AdaptBlockInfo(insts=((94, {'res': '$94load_global.0'}), (96, {'item': '$94load_global.0', 'res': '$96load_attr.1'}), (98, {'res': '$const98.2'}), (100, {'res': '$a100.3'}), (102, {'item': '$a100.3', 'res': '$102load_attr.4'}), (104, {'res': '$const104.5'}), (106, {'func': '$96load_attr.1', 'args': ['$const98.2', '$102load_attr.4'], 'names': '$const104.5', 'res': '$106call_function_kw.6'}), (108, {'value': '$106call_function_kw.6'}), (110, {'res': '$110load_global.7'}), (112, {'item': '$110load_global.7', 'res': '$112load_attr.8'}), (114, {'res': '$const114.9'}), (116, {'res': '$a116.10'}), (118, {'item': '$a116.10', 'res': '$118load_attr.11'}), (120, {'res': '$const120.12'}), (122, {'func': '$112load_attr.8', 'args': ['$const114.9', '$118load_attr.11'], 'names': '$const120.12', 'res': '$122call_function_kw.13'}), (124, {'value': '$122call_function_kw.13'}), (126, {'res': '$126load_deref.14'}), (128, {'res': '$128load_deref.15'}), (130, {'res': '$130load_deref.16'}), (132, {'res': '$132load_deref.17'}), (134, {'res': '$n134.18'}), (136, {'res': '$acpy136.19'}), (138, {'item': '$acpy136.19', 'res': '$138load_attr.20'}), (140, {'res': '$n140.21'}), (142, {'res': '$w142.22'}), (144, {'item': '$w142.22', 'res': '$144load_attr.23'}), (146, {'res': '$vl146.24'}), (148, {'item': '$vl146.24', 'res': '$148load_attr.25'}), (150, {'res': '$ldvl150.26'}), (152, {'res': '$vr152.27'}), (154, {'item': '$vr152.27', 'res': '$154load_attr.28'}), (156, {'res': '$ldvr156.29'}), (158, {'func': '$126load_deref.14', 'args': ['$128load_deref.15', '$130load_deref.16', '$132load_deref.17', '$n134.18', '$138load_attr.20', '$n140.21', '$144load_attr.23', '$148load_attr.25', '$ldvl150.26', '$154load_attr.28', '$ldvr156.29'], 'res': '$158call_function.30'}), (160, {'value': '$158call_function.30'}), (162, {'res': '$162load_global.31'}), (164, {'res': '$r164.32'}), (166, {'func': '$162load_global.31', 'args': ['$r164.32'], 'res': '$166call_function.33'}), (170, {'res': '$170load_global.34'}), (172, {'res': '$acpy172.35'}), (174, {'item': '$acpy172.35', 'res': '$174load_attr.36'}), (176, {'res': '$vl176.37'}), (178, {'item': '$vl176.37', 'res': '$178load_attr.38'}), (180, {'res': '$vr180.39'}), (182, {'item': '$vr180.39', 'res': '$182load_attr.40'}), (184, {'res': '$w184.41'}), (186, {'item': '$w184.41', 'res': '$186load_attr.42'}), (188, {'items': ['$174load_attr.36', '$178load_attr.38', '$182load_attr.40', '$186load_attr.42'], 'res': '$188build_list.43'}), (190, {'func': '$170load_global.34', 'args': ['$188build_list.43'], 'res': '$190call_function.44'}), (194, {'res': '$w194.45'}), (196, {'retval': '$w194.45', 'castval': '$196return_value.46'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG 2022-02-14 16:38:01,358 label 0:
    a = arg(0, name=a)                       ['a']
    $4load_attr.1 = getattr(value=a, attr=shape) ['$4load_attr.1', 'a']
    $const6.2 = const(int, -1)               ['$const6.2']
    n = getitem(value=$4load_attr.1, index=$const6.2, fn=<built-in function getitem>) ['$4load_attr.1', '$const6.2', 'n']
    $14load_attr.5 = getattr(value=a, attr=shape) ['$14load_attr.5', 'a']
    $const16.6 = const(int, -2)              ['$const16.6']
    $18binary_subscr.7 = getitem(value=$14load_attr.5, index=$const16.6, fn=<built-in function getitem>) ['$14load_attr.5', '$18binary_subscr.7', '$const16.6']
    $22compare_op.9 = $18binary_subscr.7 != n ['$18binary_subscr.7', '$22compare_op.9', 'n']
    bool24 = global(bool: <class 'bool'>)    ['bool24']
    $24pred = call bool24($22compare_op.9, func=bool24, args=(Var($22compare_op.9, linalg.py:1137),), kws=(), vararg=None, target=None) ['$22compare_op.9', '$24pred', 'bool24']
    branch $24pred, 26, 42                   ['$24pred']
label 26:
    msg = const(str, Last 2 dimensions of the array must be square.) ['msg']
    $30load_global.1 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>) ['$30load_global.1']
    $32load_attr.2 = getattr(value=$30load_global.1, attr=linalg) ['$30load_global.1', '$32load_attr.2']
    $34load_method.3 = getattr(value=$32load_attr.2, attr=LinAlgError) ['$32load_attr.2', '$34load_method.3']
    $38call_method.5 = call $34load_method.3(msg, func=$34load_method.3, args=[Var(msg, linalg.py:1138)], kws=(), vararg=None, target=None) ['$34load_method.3', '$38call_method.5', 'msg']
    raise $38call_method.5                   ['$38call_method.5']
label 42:
    $42load_global.0 = global(_check_finite_matrix: <function _check_finite_matrix at 0x7fa047bef8b0>) ['$42load_global.0']
    $46call_function.2 = call $42load_global.0(a, func=$42load_global.0, args=[Var(a, linalg.py:1136)], kws=(), vararg=None, target=None) ['$42load_global.0', '$46call_function.2', 'a']
    $50load_global.3 = global(_copy_to_fortran_order: <function _copy_to_fortran_order at 0x7fa047befb80>) ['$50load_global.3']
    acpy = call $50load_global.3(a, func=$50load_global.3, args=[Var(a, linalg.py:1136)], kws=(), vararg=None, target=None) ['$50load_global.3', 'a', 'acpy']
    ldvl = const(int, 1)                     ['ldvl']
    ldvr = const(int, 1)                     ['ldvr']
    $66load_global.8 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>) ['$66load_global.8']
    $68load_attr.9 = getattr(value=$66load_global.8, attr=empty) ['$66load_global.8', '$68load_attr.9']
    $74load_attr.12 = getattr(value=a, attr=dtype) ['$74load_attr.12', 'a']
    w = call $68load_attr.9(n, func=$68load_attr.9, args=[Var(n, linalg.py:1136)], kws=[('dtype', Var($74load_attr.12, linalg.py:1147))], vararg=None, target=None) ['$68load_attr.9', '$74load_attr.12', 'n', 'w']
    $const84.16 = const(int, 0)              ['$const84.16']
    $86compare_op.17 = n == $const84.16      ['$86compare_op.17', '$const84.16', 'n']
    bool88 = global(bool: <class 'bool'>)    ['bool88']
    $88pred = call bool88($86compare_op.17, func=bool88, args=(Var($86compare_op.17, linalg.py:1149),), kws=(), vararg=None, target=None) ['$86compare_op.17', '$88pred', 'bool88']
    branch $88pred, 90, 94                   ['$88pred']
label 90:
    $92return_value.1 = cast(value=w)        ['$92return_value.1', 'w']
    return $92return_value.1                 ['$92return_value.1']
label 94:
    $94load_global.0 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>) ['$94load_global.0']
    $96load_attr.1 = getattr(value=$94load_global.0, attr=empty) ['$94load_global.0', '$96load_attr.1']
    $const98.2 = const(int, 1)               ['$const98.2']
    $102load_attr.4 = getattr(value=a, attr=dtype) ['$102load_attr.4', 'a']
    vl = call $96load_attr.1($const98.2, func=$96load_attr.1, args=[Var($const98.2, linalg.py:1152)], kws=[('dtype', Var($102load_attr.4, linalg.py:1152))], vararg=None, target=None) ['$102load_attr.4', '$96load_attr.1', '$const98.2', 'vl']
    $110load_global.7 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>) ['$110load_global.7']
    $112load_attr.8 = getattr(value=$110load_global.7, attr=empty) ['$110load_global.7', '$112load_attr.8']
    $const114.9 = const(int, 1)              ['$const114.9']
    $118load_attr.11 = getattr(value=a, attr=dtype) ['$118load_attr.11', 'a']
    vr = call $112load_attr.8($const114.9, func=$112load_attr.8, args=[Var($const114.9, linalg.py:1153)], kws=[('dtype', Var($118load_attr.11, linalg.py:1153))], vararg=None, target=None) ['$112load_attr.8', '$118load_attr.11', '$const114.9', 'vr']
    $126load_deref.14 = freevar(numba_ez_cgeev: ExternalFunction(numba_ez_cgeev)) ['$126load_deref.14']
    $128load_deref.15 = freevar(kind: 122)   ['$128load_deref.15']
    $130load_deref.16 = freevar(JOBVL: 78)   ['$130load_deref.16']
    $132load_deref.17 = freevar(JOBVR: 78)   ['$132load_deref.17']
    $138load_attr.20 = getattr(value=acpy, attr=ctypes) ['$138load_attr.20', 'acpy']
    $144load_attr.23 = getattr(value=w, attr=ctypes) ['$144load_attr.23', 'w']
    $148load_attr.25 = getattr(value=vl, attr=ctypes) ['$148load_attr.25', 'vl']
    $154load_attr.28 = getattr(value=vr, attr=ctypes) ['$154load_attr.28', 'vr']
    r = call $126load_deref.14($128load_deref.15, $130load_deref.16, $132load_deref.17, n, $138load_attr.20, n, $144load_attr.23, $148load_attr.25, ldvl, $154load_attr.28, ldvr, func=$126load_deref.14, args=[Var($128load_deref.15, linalg.py:1155), Var($130load_deref.16, linalg.py:1156), Var($132load_deref.17, linalg.py:1157), Var(n, linalg.py:1136), Var($138load_attr.20, linalg.py:1159), Var(n, linalg.py:1136), Var($144load_attr.23, linalg.py:1161), Var($148load_attr.25, linalg.py:1162), Var(ldvl, linalg.py:1145), Var($154load_attr.28, linalg.py:1164), Var(ldvr, linalg.py:1146)], kws=(), vararg=None, target=None) ['$126load_deref.14', '$128load_deref.15', '$130load_deref.16', '$132load_deref.17', '$138load_attr.20', '$144load_attr.23', '$148load_attr.25', '$154load_attr.28', 'ldvl', 'ldvr', 'n', 'n', 'r']
    $162load_global.31 = global(_handle_err_maybe_convergence_problem: <function _handle_err_maybe_convergence_problem at 0x7fa047befdc0>) ['$162load_global.31']
    $166call_function.33 = call $162load_global.31(r, func=$162load_global.31, args=[Var(r, linalg.py:1155)], kws=(), vararg=None, target=None) ['$162load_global.31', '$166call_function.33', 'r']
    $170load_global.34 = global(_dummy_liveness_func: <function _dummy_liveness_func at 0x7fa047befd30>) ['$170load_global.34']
    $174load_attr.36 = getattr(value=acpy, attr=size) ['$174load_attr.36', 'acpy']
    $178load_attr.38 = getattr(value=vl, attr=size) ['$178load_attr.38', 'vl']
    $182load_attr.40 = getattr(value=vr, attr=size) ['$182load_attr.40', 'vr']
    $186load_attr.42 = getattr(value=w, attr=size) ['$186load_attr.42', 'w']
    $188build_list.43 = build_list(items=[Var($174load_attr.36, linalg.py:1170), Var($178load_attr.38, linalg.py:1170), Var($182load_attr.40, linalg.py:1170), Var($186load_attr.42, linalg.py:1170)]) ['$174load_attr.36', '$178load_attr.38', '$182load_attr.40', '$186load_attr.42', '$188build_list.43']
    $190call_function.44 = call $170load_global.34($188build_list.43, func=$170load_global.34, args=[Var($188build_list.43, linalg.py:1170)], kws=(), vararg=None, target=None) ['$170load_global.34', '$188build_list.43', '$190call_function.44']
    $196return_value.46 = cast(value=w)      ['$196return_value.46', 'w']
    return $196return_value.46               ['$196return_value.46']

DEBUG 2022-02-14 16:38:01,364 ==== SSA block analysis pass on 0
DEBUG 2022-02-14 16:38:01,364 Running <numba.core.ssa._GatherDefsHandler object at 0x7fa0469ddca0>
DEBUG 2022-02-14 16:38:01,364 on stmt: a = arg(0, name=a)
DEBUG 2022-02-14 16:38:01,365 on stmt: $4load_attr.1 = getattr(value=a, attr=shape)
DEBUG 2022-02-14 16:38:01,365 on stmt: $const6.2 = const(int, -1)
DEBUG 2022-02-14 16:38:01,365 on stmt: n = static_getitem(value=$4load_attr.1, index=-1, index_var=$const6.2, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:01,365 on stmt: $14load_attr.5 = getattr(value=a, attr=shape)
DEBUG 2022-02-14 16:38:01,365 on stmt: $const16.6 = const(int, -2)
DEBUG 2022-02-14 16:38:01,365 on stmt: $18binary_subscr.7 = static_getitem(value=$14load_attr.5, index=-2, index_var=$const16.6, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:01,365 on stmt: $22compare_op.9 = $18binary_subscr.7 != n
DEBUG 2022-02-14 16:38:01,365 on stmt: bool24 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:38:01,365 on stmt: $24pred = call bool24($22compare_op.9, func=bool24, args=(Var($22compare_op.9, linalg.py:1137),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:01,365 on stmt: branch $24pred, 26, 42
DEBUG 2022-02-14 16:38:01,365 ==== SSA block analysis pass on 26
DEBUG 2022-02-14 16:38:01,365 Running <numba.core.ssa._GatherDefsHandler object at 0x7fa0469ddca0>
DEBUG 2022-02-14 16:38:01,365 on stmt: msg = const(str, Last 2 dimensions of the array must be square.)
DEBUG 2022-02-14 16:38:01,365 on stmt: $30load_global.1 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:38:01,365 on stmt: $32load_attr.2 = getattr(value=$30load_global.1, attr=linalg)
DEBUG 2022-02-14 16:38:01,365 on stmt: $34load_method.3 = getattr(value=$32load_attr.2, attr=LinAlgError)
DEBUG 2022-02-14 16:38:01,365 on stmt: $38call_method.5 = call $34load_method.3(msg, func=$34load_method.3, args=[Var(msg, linalg.py:1138)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:01,365 on stmt: <static> raise <class 'numpy.linalg.LinAlgError'>('Last 2 dimensions of the array must be square.')
DEBUG 2022-02-14 16:38:01,365 ==== SSA block analysis pass on 42
DEBUG 2022-02-14 16:38:01,366 Running <numba.core.ssa._GatherDefsHandler object at 0x7fa0469ddca0>
DEBUG 2022-02-14 16:38:01,366 on stmt: $42load_global.0 = global(_check_finite_matrix: <function _check_finite_matrix at 0x7fa047bef8b0>)
DEBUG 2022-02-14 16:38:01,366 on stmt: $46call_function.2 = call $42load_global.0(a, func=$42load_global.0, args=[Var(a, linalg.py:1136)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:01,366 on stmt: $50load_global.3 = global(_copy_to_fortran_order: <function _copy_to_fortran_order at 0x7fa047befb80>)
DEBUG 2022-02-14 16:38:01,366 on stmt: acpy = call $50load_global.3(a, func=$50load_global.3, args=[Var(a, linalg.py:1136)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:01,366 on stmt: ldvl = const(int, 1)
DEBUG 2022-02-14 16:38:01,366 on stmt: ldvr = const(int, 1)
DEBUG 2022-02-14 16:38:01,366 on stmt: $66load_global.8 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:38:01,366 on stmt: $68load_attr.9 = getattr(value=$66load_global.8, attr=empty)
DEBUG 2022-02-14 16:38:01,366 on stmt: $74load_attr.12 = getattr(value=a, attr=dtype)
DEBUG 2022-02-14 16:38:01,366 on stmt: w = call $68load_attr.9(n, func=$68load_attr.9, args=[Var(n, linalg.py:1136)], kws=[('dtype', Var($74load_attr.12, linalg.py:1147))], vararg=None, target=None)
DEBUG 2022-02-14 16:38:01,366 on stmt: $const84.16 = const(int, 0)
DEBUG 2022-02-14 16:38:01,366 on stmt: $86compare_op.17 = n == $const84.16
DEBUG 2022-02-14 16:38:01,366 on stmt: bool88 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:38:01,366 on stmt: $88pred = call bool88($86compare_op.17, func=bool88, args=(Var($86compare_op.17, linalg.py:1149),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:01,366 on stmt: branch $88pred, 90, 94
DEBUG 2022-02-14 16:38:01,366 ==== SSA block analysis pass on 90
DEBUG 2022-02-14 16:38:01,366 Running <numba.core.ssa._GatherDefsHandler object at 0x7fa0469ddca0>
DEBUG 2022-02-14 16:38:01,366 on stmt: $92return_value.1 = cast(value=w)
DEBUG 2022-02-14 16:38:01,366 on stmt: return $92return_value.1
DEBUG 2022-02-14 16:38:01,366 ==== SSA block analysis pass on 94
DEBUG 2022-02-14 16:38:01,366 Running <numba.core.ssa._GatherDefsHandler object at 0x7fa0469ddca0>
DEBUG 2022-02-14 16:38:01,366 on stmt: $94load_global.0 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:38:01,367 on stmt: $96load_attr.1 = getattr(value=$94load_global.0, attr=empty)
DEBUG 2022-02-14 16:38:01,367 on stmt: $const98.2 = const(int, 1)
DEBUG 2022-02-14 16:38:01,367 on stmt: $102load_attr.4 = getattr(value=a, attr=dtype)
DEBUG 2022-02-14 16:38:01,367 on stmt: vl = call $96load_attr.1($const98.2, func=$96load_attr.1, args=[Var($const98.2, linalg.py:1152)], kws=[('dtype', Var($102load_attr.4, linalg.py:1152))], vararg=None, target=None)
DEBUG 2022-02-14 16:38:01,367 on stmt: $110load_global.7 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:38:01,367 on stmt: $112load_attr.8 = getattr(value=$110load_global.7, attr=empty)
DEBUG 2022-02-14 16:38:01,367 on stmt: $const114.9 = const(int, 1)
DEBUG 2022-02-14 16:38:01,367 on stmt: $118load_attr.11 = getattr(value=a, attr=dtype)
DEBUG 2022-02-14 16:38:01,367 on stmt: vr = call $112load_attr.8($const114.9, func=$112load_attr.8, args=[Var($const114.9, linalg.py:1153)], kws=[('dtype', Var($118load_attr.11, linalg.py:1153))], vararg=None, target=None)
DEBUG 2022-02-14 16:38:01,367 on stmt: $126load_deref.14 = freevar(numba_ez_cgeev: ExternalFunction(numba_ez_cgeev))
DEBUG 2022-02-14 16:38:01,367 on stmt: $128load_deref.15 = freevar(kind: 122)
DEBUG 2022-02-14 16:38:01,367 on stmt: $130load_deref.16 = freevar(JOBVL: 78)
DEBUG 2022-02-14 16:38:01,367 on stmt: $132load_deref.17 = freevar(JOBVR: 78)
DEBUG 2022-02-14 16:38:01,367 on stmt: $138load_attr.20 = getattr(value=acpy, attr=ctypes)
DEBUG 2022-02-14 16:38:01,367 on stmt: $144load_attr.23 = getattr(value=w, attr=ctypes)
DEBUG 2022-02-14 16:38:01,367 on stmt: $148load_attr.25 = getattr(value=vl, attr=ctypes)
DEBUG 2022-02-14 16:38:01,367 on stmt: $154load_attr.28 = getattr(value=vr, attr=ctypes)
DEBUG 2022-02-14 16:38:01,367 on stmt: r = call $126load_deref.14($128load_deref.15, $130load_deref.16, $132load_deref.17, n, $138load_attr.20, n, $144load_attr.23, $148load_attr.25, ldvl, $154load_attr.28, ldvr, func=$126load_deref.14, args=[Var($128load_deref.15, linalg.py:1155), Var($130load_deref.16, linalg.py:1156), Var($132load_deref.17, linalg.py:1157), Var(n, linalg.py:1136), Var($138load_attr.20, linalg.py:1159), Var(n, linalg.py:1136), Var($144load_attr.23, linalg.py:1161), Var($148load_attr.25, linalg.py:1162), Var(ldvl, linalg.py:1145), Var($154load_attr.28, linalg.py:1164), Var(ldvr, linalg.py:1146)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:01,367 on stmt: $162load_global.31 = global(_handle_err_maybe_convergence_problem: <function _handle_err_maybe_convergence_problem at 0x7fa047befdc0>)
DEBUG 2022-02-14 16:38:01,367 on stmt: $166call_function.33 = call $162load_global.31(r, func=$162load_global.31, args=[Var(r, linalg.py:1155)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:01,367 on stmt: $170load_global.34 = global(_dummy_liveness_func: <function _dummy_liveness_func at 0x7fa047befd30>)
DEBUG 2022-02-14 16:38:01,367 on stmt: $174load_attr.36 = getattr(value=acpy, attr=size)
DEBUG 2022-02-14 16:38:01,368 on stmt: $178load_attr.38 = getattr(value=vl, attr=size)
DEBUG 2022-02-14 16:38:01,368 on stmt: $182load_attr.40 = getattr(value=vr, attr=size)
DEBUG 2022-02-14 16:38:01,368 on stmt: $186load_attr.42 = getattr(value=w, attr=size)
DEBUG 2022-02-14 16:38:01,368 on stmt: $188build_list.43 = build_list(items=[Var($174load_attr.36, linalg.py:1170), Var($178load_attr.38, linalg.py:1170), Var($182load_attr.40, linalg.py:1170), Var($186load_attr.42, linalg.py:1170)])
DEBUG 2022-02-14 16:38:01,368 on stmt: $190call_function.44 = call $170load_global.34($188build_list.43, func=$170load_global.34, args=[Var($188build_list.43, linalg.py:1170)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:01,368 on stmt: $196return_value.46 = cast(value=w)
DEBUG 2022-02-14 16:38:01,368 on stmt: return $196return_value.46
DEBUG 2022-02-14 16:38:01,368 defs defaultdict(<class 'list'>,
            {'$102load_attr.4': [<numba.core.ir.Assign object at 0x7fa047113400>],
             '$110load_global.7': [<numba.core.ir.Assign object at 0x7fa0469b8bb0>],
             '$112load_attr.8': [<numba.core.ir.Assign object at 0x7fa0469b8cd0>],
             '$118load_attr.11': [<numba.core.ir.Assign object at 0x7fa0469d6130>],
             '$126load_deref.14': [<numba.core.ir.Assign object at 0x7fa0469d6730>],
             '$128load_deref.15': [<numba.core.ir.Assign object at 0x7fa0469d68b0>],
             '$130load_deref.16': [<numba.core.ir.Assign object at 0x7fa0469d6a30>],
             '$132load_deref.17': [<numba.core.ir.Assign object at 0x7fa0469d6bb0>],
             '$138load_attr.20': [<numba.core.ir.Assign object at 0x7fa0469d6f70>],
             '$144load_attr.23': [<numba.core.ir.Assign object at 0x7fa0469d9370>],
             '$148load_attr.25': [<numba.core.ir.Assign object at 0x7fa0469d9610>],
             '$14load_attr.5': [<numba.core.ir.Assign object at 0x7fa04711a3d0>],
             '$154load_attr.28': [<numba.core.ir.Assign object at 0x7fa0469d99d0>],
             '$162load_global.31': [<numba.core.ir.Assign object at 0x7fa0469d9f10>],
             '$166call_function.33': [<numba.core.ir.Assign object at 0x7fa0469da250>],
             '$170load_global.34': [<numba.core.ir.Assign object at 0x7fa0469da370>],
             '$174load_attr.36': [<numba.core.ir.Assign object at 0x7fa0469da610>],
             '$178load_attr.38': [<numba.core.ir.Assign object at 0x7fa0469da8b0>],
             '$182load_attr.40': [<numba.core.ir.Assign object at 0x7fa0469dab50>],
             '$186load_attr.42': [<numba.core.ir.Assign object at 0x7fa0469dadf0>],
             '$188build_list.43': [<numba.core.ir.Assign object at 0x7fa0469dafa0>],
             '$18binary_subscr.7': [<numba.core.ir.Assign object at 0x7fa0469dd7c0>],
             '$190call_function.44': [<numba.core.ir.Assign object at 0x7fa0469dd190>],
             '$196return_value.46': [<numba.core.ir.Assign object at 0x7fa0469dd3d0>],
             '$22compare_op.9': [<numba.core.ir.Assign object at 0x7fa0470ba370>],
             '$24pred': [<numba.core.ir.Assign object at 0x7fa0470ba7c0>],
             '$30load_global.1': [<numba.core.ir.Assign object at 0x7fa0470bab80>],
             '$32load_attr.2': [<numba.core.ir.Assign object at 0x7fa0470ba460>],
             '$34load_method.3': [<numba.core.ir.Assign object at 0x7fa0470baf40>],
             '$38call_method.5': [<numba.core.ir.Assign object at 0x7fa0470baeb0>],
             '$42load_global.0': [<numba.core.ir.Assign object at 0x7fa0470bac40>],
             '$46call_function.2': [<numba.core.ir.Assign object at 0x7fa047347040>],
             '$4load_attr.1': [<numba.core.ir.Assign object at 0x7fa047132cd0>],
             '$50load_global.3': [<numba.core.ir.Assign object at 0x7fa047300340>],
             '$66load_global.8': [<numba.core.ir.Assign object at 0x7fa0471327f0>],
             '$68load_attr.9': [<numba.core.ir.Assign object at 0x7fa04711cd60>],
             '$74load_attr.12': [<numba.core.ir.Assign object at 0x7fa047317dc0>],
             '$86compare_op.17': [<numba.core.ir.Assign object at 0x7fa046ed9370>],
             '$88pred': [<numba.core.ir.Assign object at 0x7fa046efb550>],
             '$92return_value.1': [<numba.core.ir.Assign object at 0x7fa046d87ca0>],
             '$94load_global.0': [<numba.core.ir.Assign object at 0x7fa046ff4760>],
             '$96load_attr.1': [<numba.core.ir.Assign object at 0x7fa046ff44f0>],
             '$const114.9': [<numba.core.ir.Assign object at 0x7fa0469b8e50>],
             '$const16.6': [<numba.core.ir.Assign object at 0x7fa047112280>],
             '$const6.2': [<numba.core.ir.Assign object at 0x7fa047132f40>],
             '$const84.16': [<numba.core.ir.Assign object at 0x7fa046dd7370>],
             '$const98.2': [<numba.core.ir.Assign object at 0x7fa0470ce5b0>],
             'a': [<numba.core.ir.Assign object at 0x7fa047132160>],
             'acpy': [<numba.core.ir.Assign object at 0x7fa0470cd310>],
             'bool24': [<numba.core.ir.Assign object at 0x7fa0470ba6a0>],
             'bool88': [<numba.core.ir.Assign object at 0x7fa046f33700>],
             'ldvl': [<numba.core.ir.Assign object at 0x7fa0470cd880>],
             'ldvr': [<numba.core.ir.Assign object at 0x7fa0471327c0>],
             'msg': [<numba.core.ir.Assign object at 0x7fa0470ba8e0>],
             'n': [<numba.core.ir.Assign object at 0x7fa0469dac70>],
             'r': [<numba.core.ir.Assign object at 0x7fa0469d9cd0>],
             'vl': [<numba.core.ir.Assign object at 0x7fa04734d880>],
             'vr': [<numba.core.ir.Assign object at 0x7fa0469d65b0>],
             'w': [<numba.core.ir.Assign object at 0x7fa046d199a0>]})
DEBUG 2022-02-14 16:38:01,369 SSA violators set()
DEBUG 2022-02-14 16:38:01,374 bytecode dump:
>          0	NOP(arg=None, lineno=749)
           2	LOAD_GLOBAL(arg=0, lineno=749)
           4	LOAD_METHOD(arg=1, lineno=749)
           6	LOAD_FAST(arg=0, lineno=749)
           8	CALL_METHOD(arg=1, lineno=749)
          10	GET_ITER(arg=None, lineno=749)
>         12	FOR_ITER(arg=30, lineno=749)
          14	STORE_FAST(arg=1, lineno=749)
          16	LOAD_GLOBAL(arg=0, lineno=750)
          18	LOAD_METHOD(arg=2, lineno=750)
          20	LOAD_FAST(arg=1, lineno=750)
          22	LOAD_METHOD(arg=3, lineno=750)
          24	CALL_METHOD(arg=0, lineno=750)
          26	CALL_METHOD(arg=1, lineno=750)
          28	POP_JUMP_IF_TRUE(arg=12, lineno=750)
          30	LOAD_GLOBAL(arg=0, lineno=751)
          32	LOAD_ATTR(arg=4, lineno=751)
          34	LOAD_METHOD(arg=5, lineno=751)
          36	LOAD_CONST(arg=1, lineno=752)
          38	CALL_METHOD(arg=1, lineno=751)
          40	RAISE_VARARGS(arg=1, lineno=751)
          42	JUMP_ABSOLUTE(arg=12, lineno=751)
>         44	LOAD_CONST(arg=0, lineno=751)
          46	RETURN_VALUE(arg=None, lineno=751)
DEBUG 2022-02-14 16:38:01,374 pending: deque([State(pc_initial=0 nstack_initial=0)])
DEBUG 2022-02-14 16:38:01,374 stack: []
DEBUG 2022-02-14 16:38:01,374 dispatch pc=0, inst=NOP(arg=None, lineno=749)
DEBUG 2022-02-14 16:38:01,374 stack []
DEBUG 2022-02-14 16:38:01,374 dispatch pc=2, inst=LOAD_GLOBAL(arg=0, lineno=749)
DEBUG 2022-02-14 16:38:01,375 stack []
DEBUG 2022-02-14 16:38:01,375 dispatch pc=4, inst=LOAD_METHOD(arg=1, lineno=749)
DEBUG 2022-02-14 16:38:01,375 stack ['$2load_global.0']
DEBUG 2022-02-14 16:38:01,375 dispatch pc=6, inst=LOAD_FAST(arg=0, lineno=749)
DEBUG 2022-02-14 16:38:01,375 stack ['$4load_method.1']
DEBUG 2022-02-14 16:38:01,375 dispatch pc=8, inst=CALL_METHOD(arg=1, lineno=749)
DEBUG 2022-02-14 16:38:01,375 stack ['$4load_method.1', '$a6.2']
DEBUG 2022-02-14 16:38:01,375 dispatch pc=10, inst=GET_ITER(arg=None, lineno=749)
DEBUG 2022-02-14 16:38:01,375 stack ['$8call_method.3']
DEBUG 2022-02-14 16:38:01,375 end state. edges=[Edge(pc=12, stack=('$10get_iter.4',), blockstack=(), npush=0)]
DEBUG 2022-02-14 16:38:01,375 pending: deque([State(pc_initial=12 nstack_initial=1)])
DEBUG 2022-02-14 16:38:01,375 stack: ['$phi12.0']
DEBUG 2022-02-14 16:38:01,375 dispatch pc=12, inst=FOR_ITER(arg=30, lineno=749)
DEBUG 2022-02-14 16:38:01,375 stack ['$phi12.0']
DEBUG 2022-02-14 16:38:01,375 end state. edges=[Edge(pc=44, stack=(), blockstack=(), npush=0), Edge(pc=14, stack=('$phi12.0', '$12for_iter.2'), blockstack=(), npush=0)]
DEBUG 2022-02-14 16:38:01,375 pending: deque([State(pc_initial=44 nstack_initial=0), State(pc_initial=14 nstack_initial=2)])
DEBUG 2022-02-14 16:38:01,375 stack: []
DEBUG 2022-02-14 16:38:01,375 dispatch pc=44, inst=LOAD_CONST(arg=0, lineno=751)
DEBUG 2022-02-14 16:38:01,375 stack []
DEBUG 2022-02-14 16:38:01,375 dispatch pc=46, inst=RETURN_VALUE(arg=None, lineno=751)
DEBUG 2022-02-14 16:38:01,375 stack ['$const44.0']
DEBUG 2022-02-14 16:38:01,375 end state. edges=[]
DEBUG 2022-02-14 16:38:01,376 pending: deque([State(pc_initial=14 nstack_initial=2)])
DEBUG 2022-02-14 16:38:01,376 stack: ['$phi14.0', '$phi14.1']
DEBUG 2022-02-14 16:38:01,376 dispatch pc=14, inst=STORE_FAST(arg=1, lineno=749)
DEBUG 2022-02-14 16:38:01,376 stack ['$phi14.0', '$phi14.1']
DEBUG 2022-02-14 16:38:01,376 dispatch pc=16, inst=LOAD_GLOBAL(arg=0, lineno=750)
DEBUG 2022-02-14 16:38:01,376 stack ['$phi14.0']
DEBUG 2022-02-14 16:38:01,376 dispatch pc=18, inst=LOAD_METHOD(arg=2, lineno=750)
DEBUG 2022-02-14 16:38:01,376 stack ['$phi14.0', '$16load_global.2']
DEBUG 2022-02-14 16:38:01,376 dispatch pc=20, inst=LOAD_FAST(arg=1, lineno=750)
DEBUG 2022-02-14 16:38:01,376 stack ['$phi14.0', '$18load_method.3']
DEBUG 2022-02-14 16:38:01,376 dispatch pc=22, inst=LOAD_METHOD(arg=3, lineno=750)
DEBUG 2022-02-14 16:38:01,376 stack ['$phi14.0', '$18load_method.3', '$v20.4']
DEBUG 2022-02-14 16:38:01,376 dispatch pc=24, inst=CALL_METHOD(arg=0, lineno=750)
DEBUG 2022-02-14 16:38:01,376 stack ['$phi14.0', '$18load_method.3', '$22load_method.5']
DEBUG 2022-02-14 16:38:01,376 dispatch pc=26, inst=CALL_METHOD(arg=1, lineno=750)
DEBUG 2022-02-14 16:38:01,376 stack ['$phi14.0', '$18load_method.3', '$24call_method.6']
DEBUG 2022-02-14 16:38:01,376 dispatch pc=28, inst=POP_JUMP_IF_TRUE(arg=12, lineno=750)
DEBUG 2022-02-14 16:38:01,376 stack ['$phi14.0', '$26call_method.7']
DEBUG 2022-02-14 16:38:01,376 end state. edges=[Edge(pc=30, stack=('$phi14.0',), blockstack=(), npush=0), Edge(pc=12, stack=('$phi14.0',), blockstack=(), npush=0)]
DEBUG 2022-02-14 16:38:01,376 pending: deque([State(pc_initial=30 nstack_initial=1), State(pc_initial=12 nstack_initial=1)])
DEBUG 2022-02-14 16:38:01,376 stack: ['$phi30.0']
DEBUG 2022-02-14 16:38:01,376 dispatch pc=30, inst=LOAD_GLOBAL(arg=0, lineno=751)
DEBUG 2022-02-14 16:38:01,376 stack ['$phi30.0']
DEBUG 2022-02-14 16:38:01,376 dispatch pc=32, inst=LOAD_ATTR(arg=4, lineno=751)
DEBUG 2022-02-14 16:38:01,377 stack ['$phi30.0', '$30load_global.1']
DEBUG 2022-02-14 16:38:01,377 dispatch pc=34, inst=LOAD_METHOD(arg=5, lineno=751)
DEBUG 2022-02-14 16:38:01,377 stack ['$phi30.0', '$32load_attr.2']
DEBUG 2022-02-14 16:38:01,377 dispatch pc=36, inst=LOAD_CONST(arg=1, lineno=752)
DEBUG 2022-02-14 16:38:01,377 stack ['$phi30.0', '$34load_method.3']
DEBUG 2022-02-14 16:38:01,377 dispatch pc=38, inst=CALL_METHOD(arg=1, lineno=751)
DEBUG 2022-02-14 16:38:01,377 stack ['$phi30.0', '$34load_method.3', '$const36.4']
DEBUG 2022-02-14 16:38:01,377 dispatch pc=40, inst=RAISE_VARARGS(arg=1, lineno=751)
DEBUG 2022-02-14 16:38:01,377 stack ['$phi30.0', '$38call_method.5']
DEBUG 2022-02-14 16:38:01,377 end state. edges=[]
DEBUG 2022-02-14 16:38:01,377 pending: deque([State(pc_initial=12 nstack_initial=1)])
DEBUG 2022-02-14 16:38:01,377 -------------------------Prune PHIs-------------------------
DEBUG 2022-02-14 16:38:01,377 Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=12 nstack_initial=1): {'$phi12.0'},
             State(pc_initial=14 nstack_initial=2): {'$phi14.1'},
             State(pc_initial=30 nstack_initial=1): set(),
             State(pc_initial=44 nstack_initial=0): set()})
DEBUG 2022-02-14 16:38:01,377 defmap: {'$phi12.0': State(pc_initial=0 nstack_initial=0),
 '$phi14.1': State(pc_initial=12 nstack_initial=1)}
DEBUG 2022-02-14 16:38:01,377 phismap: defaultdict(<class 'set'>,
            {'$phi12.0': {('$10get_iter.4',
                           State(pc_initial=0 nstack_initial=0)),
                          ('$phi14.0', State(pc_initial=14 nstack_initial=2))},
             '$phi14.0': {('$phi12.0', State(pc_initial=12 nstack_initial=1))},
             '$phi14.1': {('$12for_iter.2',
                           State(pc_initial=12 nstack_initial=1))},
             '$phi30.0': {('$phi14.0', State(pc_initial=14 nstack_initial=2))}})
DEBUG 2022-02-14 16:38:01,378 changing phismap: defaultdict(<class 'set'>,
            {'$phi12.0': {('$10get_iter.4',
                           State(pc_initial=0 nstack_initial=0)),
                          ('$phi12.0', State(pc_initial=12 nstack_initial=1))},
             '$phi14.0': {('$10get_iter.4',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi14.1': {('$12for_iter.2',
                           State(pc_initial=12 nstack_initial=1))},
             '$phi30.0': {('$10get_iter.4',
                           State(pc_initial=0 nstack_initial=0))}})
DEBUG 2022-02-14 16:38:01,378 changing phismap: defaultdict(<class 'set'>,
            {'$phi12.0': {('$10get_iter.4',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi14.0': {('$10get_iter.4',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi14.1': {('$12for_iter.2',
                           State(pc_initial=12 nstack_initial=1))},
             '$phi30.0': {('$10get_iter.4',
                           State(pc_initial=0 nstack_initial=0))}})
DEBUG 2022-02-14 16:38:01,378 changing phismap: defaultdict(<class 'set'>,
            {'$phi12.0': {('$10get_iter.4',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi14.0': {('$10get_iter.4',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi14.1': {('$12for_iter.2',
                           State(pc_initial=12 nstack_initial=1))},
             '$phi30.0': {('$10get_iter.4',
                           State(pc_initial=0 nstack_initial=0))}})
DEBUG 2022-02-14 16:38:01,378 keep phismap: {'$phi12.0': {('$10get_iter.4', State(pc_initial=0 nstack_initial=0))},
 '$phi14.1': {('$12for_iter.2', State(pc_initial=12 nstack_initial=1))}}
DEBUG 2022-02-14 16:38:01,378 new_out: defaultdict(<class 'dict'>,
            {State(pc_initial=0 nstack_initial=0): {'$phi12.0': '$10get_iter.4'},
             State(pc_initial=12 nstack_initial=1): {'$phi14.1': '$12for_iter.2'}})
DEBUG 2022-02-14 16:38:01,379 ----------------------DONE Prune PHIs-----------------------
DEBUG 2022-02-14 16:38:01,379 block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$2load_global.0'}), (4, {'item': '$2load_global.0', 'res': '$4load_method.1'}), (6, {'res': '$a6.2'}), (8, {'func': '$4load_method.1', 'args': ['$a6.2'], 'res': '$8call_method.3'}), (10, {'value': '$8call_method.3', 'res': '$10get_iter.4'})), outgoing_phis={'$phi12.0': '$10get_iter.4'}, blockstack=(), active_try_block=None, outgoing_edgepushed={12: ('$10get_iter.4',)})
DEBUG 2022-02-14 16:38:01,379 block_infos State(pc_initial=12 nstack_initial=1):
AdaptBlockInfo(insts=((12, {'iterator': '$phi12.0', 'pair': '$12for_iter.1', 'indval': '$12for_iter.2', 'pred': '$12for_iter.3'}),), outgoing_phis={'$phi14.1': '$12for_iter.2'}, blockstack=(), active_try_block=None, outgoing_edgepushed={44: (), 14: ('$phi12.0', '$12for_iter.2')})
DEBUG 2022-02-14 16:38:01,379 block_infos State(pc_initial=14 nstack_initial=2):
AdaptBlockInfo(insts=((14, {'value': '$phi14.1'}), (16, {'res': '$16load_global.2'}), (18, {'item': '$16load_global.2', 'res': '$18load_method.3'}), (20, {'res': '$v20.4'}), (22, {'item': '$v20.4', 'res': '$22load_method.5'}), (24, {'func': '$22load_method.5', 'args': [], 'res': '$24call_method.6'}), (26, {'func': '$18load_method.3', 'args': ['$24call_method.6'], 'res': '$26call_method.7'}), (28, {'pred': '$26call_method.7'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={30: ('$phi14.0',), 12: ('$phi14.0',)})
DEBUG 2022-02-14 16:38:01,379 block_infos State(pc_initial=30 nstack_initial=1):
AdaptBlockInfo(insts=((30, {'res': '$30load_global.1'}), (32, {'item': '$30load_global.1', 'res': '$32load_attr.2'}), (34, {'item': '$32load_attr.2', 'res': '$34load_method.3'}), (36, {'res': '$const36.4'}), (38, {'func': '$34load_method.3', 'args': ['$const36.4'], 'res': '$38call_method.5'}), (40, {'exc': '$38call_method.5'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG 2022-02-14 16:38:01,379 block_infos State(pc_initial=44 nstack_initial=0):
AdaptBlockInfo(insts=((44, {'res': '$const44.0'}), (46, {'retval': '$const44.0', 'castval': '$46return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG 2022-02-14 16:38:01,380 label 0:
    a = arg(0, name=a)                       ['a']
    $2load_global.0 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>) ['$2load_global.0']
    $4load_method.1 = getattr(value=$2load_global.0, attr=nditer) ['$2load_global.0', '$4load_method.1']
    $8call_method.3 = call $4load_method.1(a, func=$4load_method.1, args=[Var(a, linalg.py:749)], kws=(), vararg=None, target=None) ['$4load_method.1', '$8call_method.3', 'a']
    $10get_iter.4 = getiter(value=$8call_method.3) ['$10get_iter.4', '$8call_method.3']
    $phi12.0 = $10get_iter.4                 ['$10get_iter.4', '$phi12.0']
    jump 12                                  []
label 12:
    $12for_iter.1 = iternext(value=$phi12.0) ['$12for_iter.1', '$phi12.0']
    $12for_iter.2 = pair_first(value=$12for_iter.1) ['$12for_iter.1', '$12for_iter.2']
    $12for_iter.3 = pair_second(value=$12for_iter.1) ['$12for_iter.1', '$12for_iter.3']
    $phi14.1 = $12for_iter.2                 ['$12for_iter.2', '$phi14.1']
    branch $12for_iter.3, 14, 44             ['$12for_iter.3']
label 14:
    v = $phi14.1                             ['$phi14.1', 'v']
    $16load_global.2 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>) ['$16load_global.2']
    $18load_method.3 = getattr(value=$16load_global.2, attr=isfinite) ['$16load_global.2', '$18load_method.3']
    $22load_method.5 = getattr(value=v, attr=item) ['$22load_method.5', 'v']
    $24call_method.6 = call $22load_method.5(func=$22load_method.5, args=[], kws=(), vararg=None, target=None) ['$22load_method.5', '$24call_method.6']
    $26call_method.7 = call $18load_method.3($24call_method.6, func=$18load_method.3, args=[Var($24call_method.6, linalg.py:750)], kws=(), vararg=None, target=None) ['$18load_method.3', '$24call_method.6', '$26call_method.7']
    bool28 = global(bool: <class 'bool'>)    ['bool28']
    $28pred = call bool28($26call_method.7, func=bool28, args=(Var($26call_method.7, linalg.py:750),), kws=(), vararg=None, target=None) ['$26call_method.7', '$28pred', 'bool28']
    branch $28pred, 12, 30                   ['$28pred']
label 30:
    $30load_global.1 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>) ['$30load_global.1']
    $32load_attr.2 = getattr(value=$30load_global.1, attr=linalg) ['$30load_global.1', '$32load_attr.2']
    $34load_method.3 = getattr(value=$32load_attr.2, attr=LinAlgError) ['$32load_attr.2', '$34load_method.3']
    $const36.4 = const(str, Array must not contain infs or NaNs.) ['$const36.4']
    $38call_method.5 = call $34load_method.3($const36.4, func=$34load_method.3, args=[Var($const36.4, linalg.py:752)], kws=(), vararg=None, target=None) ['$34load_method.3', '$38call_method.5', '$const36.4']
    raise $38call_method.5                   ['$38call_method.5']
label 44:
    $const44.0 = const(NoneType, None)       ['$const44.0']
    $46return_value.1 = cast(value=$const44.0) ['$46return_value.1', '$const44.0']
    return $46return_value.1                 ['$46return_value.1']

DEBUG 2022-02-14 16:38:01,383 ==== SSA block analysis pass on 0
DEBUG 2022-02-14 16:38:01,383 Running <numba.core.ssa._GatherDefsHandler object at 0x7fa04697e850>
DEBUG 2022-02-14 16:38:01,383 on stmt: a = arg(0, name=a)
DEBUG 2022-02-14 16:38:01,383 on stmt: $2load_global.0 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:38:01,383 on stmt: $4load_method.1 = getattr(value=$2load_global.0, attr=nditer)
DEBUG 2022-02-14 16:38:01,383 on stmt: $8call_method.3 = call $4load_method.1(a, func=$4load_method.1, args=[Var(a, linalg.py:749)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:01,383 on stmt: $10get_iter.4 = getiter(value=$8call_method.3)
DEBUG 2022-02-14 16:38:01,383 on stmt: $phi12.0 = $10get_iter.4
DEBUG 2022-02-14 16:38:01,383 on stmt: jump 12
DEBUG 2022-02-14 16:38:01,383 ==== SSA block analysis pass on 12
DEBUG 2022-02-14 16:38:01,383 Running <numba.core.ssa._GatherDefsHandler object at 0x7fa04697e850>
DEBUG 2022-02-14 16:38:01,383 on stmt: $12for_iter.1 = iternext(value=$phi12.0)
DEBUG 2022-02-14 16:38:01,383 on stmt: $12for_iter.2 = pair_first(value=$12for_iter.1)
DEBUG 2022-02-14 16:38:01,384 on stmt: $12for_iter.3 = pair_second(value=$12for_iter.1)
DEBUG 2022-02-14 16:38:01,384 on stmt: $phi14.1 = $12for_iter.2
DEBUG 2022-02-14 16:38:01,384 on stmt: branch $12for_iter.3, 14, 44
DEBUG 2022-02-14 16:38:01,384 ==== SSA block analysis pass on 14
DEBUG 2022-02-14 16:38:01,384 Running <numba.core.ssa._GatherDefsHandler object at 0x7fa04697e850>
DEBUG 2022-02-14 16:38:01,384 on stmt: v = $phi14.1
DEBUG 2022-02-14 16:38:01,384 on stmt: $16load_global.2 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:38:01,384 on stmt: $18load_method.3 = getattr(value=$16load_global.2, attr=isfinite)
DEBUG 2022-02-14 16:38:01,384 on stmt: $22load_method.5 = getattr(value=v, attr=item)
DEBUG 2022-02-14 16:38:01,384 on stmt: $24call_method.6 = call $22load_method.5(func=$22load_method.5, args=[], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:01,384 on stmt: $26call_method.7 = call $18load_method.3($24call_method.6, func=$18load_method.3, args=[Var($24call_method.6, linalg.py:750)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:01,384 on stmt: bool28 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:38:01,384 on stmt: $28pred = call bool28($26call_method.7, func=bool28, args=(Var($26call_method.7, linalg.py:750),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:01,384 on stmt: branch $28pred, 12, 30
DEBUG 2022-02-14 16:38:01,384 ==== SSA block analysis pass on 30
DEBUG 2022-02-14 16:38:01,384 Running <numba.core.ssa._GatherDefsHandler object at 0x7fa04697e850>
DEBUG 2022-02-14 16:38:01,384 on stmt: $30load_global.1 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:38:01,384 on stmt: $32load_attr.2 = getattr(value=$30load_global.1, attr=linalg)
DEBUG 2022-02-14 16:38:01,384 on stmt: $34load_method.3 = getattr(value=$32load_attr.2, attr=LinAlgError)
DEBUG 2022-02-14 16:38:01,384 on stmt: $const36.4 = const(str, Array must not contain infs or NaNs.)
DEBUG 2022-02-14 16:38:01,384 on stmt: $38call_method.5 = call $34load_method.3($const36.4, func=$34load_method.3, args=[Var($const36.4, linalg.py:752)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:01,384 on stmt: <static> raise <class 'numpy.linalg.LinAlgError'>('Array must not contain infs or NaNs.')
DEBUG 2022-02-14 16:38:01,385 ==== SSA block analysis pass on 44
DEBUG 2022-02-14 16:38:01,385 Running <numba.core.ssa._GatherDefsHandler object at 0x7fa04697e850>
DEBUG 2022-02-14 16:38:01,385 on stmt: $const44.0 = const(NoneType, None)
DEBUG 2022-02-14 16:38:01,385 on stmt: $46return_value.1 = cast(value=$const44.0)
DEBUG 2022-02-14 16:38:01,385 on stmt: return $46return_value.1
DEBUG 2022-02-14 16:38:01,385 defs defaultdict(<class 'list'>,
            {'$10get_iter.4': [<numba.core.ir.Assign object at 0x7fa0469781f0>],
             '$12for_iter.1': [<numba.core.ir.Assign object at 0x7fa046978520>],
             '$12for_iter.2': [<numba.core.ir.Assign object at 0x7fa046978640>],
             '$12for_iter.3': [<numba.core.ir.Assign object at 0x7fa046978760>],
             '$16load_global.2': [<numba.core.ir.Assign object at 0x7fa046978bb0>],
             '$18load_method.3': [<numba.core.ir.Assign object at 0x7fa046978d30>],
             '$22load_method.5': [<numba.core.ir.Assign object at 0x7fa046978fd0>],
             '$24call_method.6': [<numba.core.ir.Assign object at 0x7fa04697c220>],
             '$26call_method.7': [<numba.core.ir.Assign object at 0x7fa04697c3a0>],
             '$28pred': [<numba.core.ir.Assign object at 0x7fa04697c5b0>],
             '$2load_global.0': [<numba.core.ir.Assign object at 0x7fa046970280>],
             '$30load_global.1': [<numba.core.ir.Assign object at 0x7fa04697c7f0>],
             '$32load_attr.2': [<numba.core.ir.Assign object at 0x7fa04697c970>],
             '$34load_method.3': [<numba.core.ir.Assign object at 0x7fa04697caf0>],
             '$38call_method.5': [<numba.core.ir.Assign object at 0x7fa04697ce80>],
             '$46return_value.1': [<numba.core.ir.Assign object at 0x7fa04697e2b0>],
             '$4load_method.1': [<numba.core.ir.Assign object at 0x7fa0469704c0>],
             '$8call_method.3': [<numba.core.ir.Assign object at 0x7fa0469780d0>],
             '$const36.4': [<numba.core.ir.Assign object at 0x7fa04697cc70>],
             '$const44.0': [<numba.core.ir.Assign object at 0x7fa04697e130>],
             '$phi12.0': [<numba.core.ir.Assign object at 0x7fa046970f10>],
             '$phi14.1': [<numba.core.ir.Assign object at 0x7fa046978460>],
             'a': [<numba.core.ir.Assign object at 0x7fa046970c70>],
             'bool28': [<numba.core.ir.Assign object at 0x7fa04697c490>],
             'v': [<numba.core.ir.Assign object at 0x7fa046978a30>]})
DEBUG 2022-02-14 16:38:01,385 SSA violators set()
DEBUG 2022-02-14 16:38:01,401 bytecode dump:
>          0	NOP(arg=None, lineno=2820)
           2	LOAD_GLOBAL(arg=0, lineno=2820)
           4	LOAD_FAST(arg=0, lineno=2820)
           6	CALL_FUNCTION(arg=1, lineno=2820)
           8	STORE_FAST(arg=2, lineno=2820)
          10	LOAD_GLOBAL(arg=1, lineno=2821)
          12	LOAD_FAST(arg=2, lineno=2821)
          14	CALL_FUNCTION(arg=1, lineno=2821)
          16	GET_ITER(arg=None, lineno=2821)
>         18	FOR_ITER(arg=40, lineno=2821)
          20	STORE_FAST(arg=3, lineno=2821)
          22	LOAD_FAST(arg=0, lineno=2822)
          24	LOAD_FAST(arg=3, lineno=2822)
          26	BINARY_SUBSCR(arg=None, lineno=2822)
          28	LOAD_FAST(arg=1, lineno=2822)
          30	LOAD_GLOBAL(arg=0, lineno=2822)
          32	LOAD_FAST(arg=1, lineno=2822)
          34	CALL_FUNCTION(arg=1, lineno=2822)
          36	LOAD_FAST(arg=2, lineno=2822)
          38	BINARY_SUBTRACT(arg=None, lineno=2822)
          40	LOAD_FAST(arg=3, lineno=2822)
          42	BINARY_ADD(arg=None, lineno=2822)
          44	BINARY_SUBSCR(arg=None, lineno=2822)
          46	COMPARE_OP(arg=3, lineno=2822)
          48	POP_JUMP_IF_FALSE(arg=18, lineno=2822)
          50	LOAD_GLOBAL(arg=2, lineno=2823)
          52	LOAD_CONST(arg=1, lineno=2823)
          54	CALL_FUNCTION(arg=1, lineno=2823)
          56	RAISE_VARARGS(arg=1, lineno=2823)
          58	JUMP_ABSOLUTE(arg=18, lineno=2823)
>         60	LOAD_CONST(arg=0, lineno=2823)
          62	RETURN_VALUE(arg=None, lineno=2823)
DEBUG 2022-02-14 16:38:01,401 pending: deque([State(pc_initial=0 nstack_initial=0)])
DEBUG 2022-02-14 16:38:01,401 stack: []
DEBUG 2022-02-14 16:38:01,401 dispatch pc=0, inst=NOP(arg=None, lineno=2820)
DEBUG 2022-02-14 16:38:01,401 stack []
DEBUG 2022-02-14 16:38:01,401 dispatch pc=2, inst=LOAD_GLOBAL(arg=0, lineno=2820)
DEBUG 2022-02-14 16:38:01,401 stack []
DEBUG 2022-02-14 16:38:01,401 dispatch pc=4, inst=LOAD_FAST(arg=0, lineno=2820)
DEBUG 2022-02-14 16:38:01,401 stack ['$2load_global.0']
DEBUG 2022-02-14 16:38:01,401 dispatch pc=6, inst=CALL_FUNCTION(arg=1, lineno=2820)
DEBUG 2022-02-14 16:38:01,401 stack ['$2load_global.0', '$shape4.1']
DEBUG 2022-02-14 16:38:01,401 dispatch pc=8, inst=STORE_FAST(arg=2, lineno=2820)
DEBUG 2022-02-14 16:38:01,401 stack ['$6call_function.2']
DEBUG 2022-02-14 16:38:01,401 dispatch pc=10, inst=LOAD_GLOBAL(arg=1, lineno=2821)
DEBUG 2022-02-14 16:38:01,401 stack []
DEBUG 2022-02-14 16:38:01,401 dispatch pc=12, inst=LOAD_FAST(arg=2, lineno=2821)
DEBUG 2022-02-14 16:38:01,402 stack ['$10load_global.3']
DEBUG 2022-02-14 16:38:01,402 dispatch pc=14, inst=CALL_FUNCTION(arg=1, lineno=2821)
DEBUG 2022-02-14 16:38:01,402 stack ['$10load_global.3', '$n12.4']
DEBUG 2022-02-14 16:38:01,402 dispatch pc=16, inst=GET_ITER(arg=None, lineno=2821)
DEBUG 2022-02-14 16:38:01,402 stack ['$14call_function.5']
DEBUG 2022-02-14 16:38:01,402 end state. edges=[Edge(pc=18, stack=('$16get_iter.6',), blockstack=(), npush=0)]
DEBUG 2022-02-14 16:38:01,402 pending: deque([State(pc_initial=18 nstack_initial=1)])
DEBUG 2022-02-14 16:38:01,402 stack: ['$phi18.0']
DEBUG 2022-02-14 16:38:01,402 dispatch pc=18, inst=FOR_ITER(arg=40, lineno=2821)
DEBUG 2022-02-14 16:38:01,402 stack ['$phi18.0']
DEBUG 2022-02-14 16:38:01,403 end state. edges=[Edge(pc=60, stack=(), blockstack=(), npush=0), Edge(pc=20, stack=('$phi18.0', '$18for_iter.2'), blockstack=(), npush=0)]
DEBUG 2022-02-14 16:38:01,403 pending: deque([State(pc_initial=60 nstack_initial=0), State(pc_initial=20 nstack_initial=2)])
DEBUG 2022-02-14 16:38:01,403 stack: []
DEBUG 2022-02-14 16:38:01,403 dispatch pc=60, inst=LOAD_CONST(arg=0, lineno=2823)
DEBUG 2022-02-14 16:38:01,403 stack []
DEBUG 2022-02-14 16:38:01,403 dispatch pc=62, inst=RETURN_VALUE(arg=None, lineno=2823)
DEBUG 2022-02-14 16:38:01,403 stack ['$const60.0']
DEBUG 2022-02-14 16:38:01,403 end state. edges=[]
DEBUG 2022-02-14 16:38:01,403 pending: deque([State(pc_initial=20 nstack_initial=2)])
DEBUG 2022-02-14 16:38:01,403 stack: ['$phi20.0', '$phi20.1']
DEBUG 2022-02-14 16:38:01,404 dispatch pc=20, inst=STORE_FAST(arg=3, lineno=2821)
DEBUG 2022-02-14 16:38:01,404 stack ['$phi20.0', '$phi20.1']
DEBUG 2022-02-14 16:38:01,404 dispatch pc=22, inst=LOAD_FAST(arg=0, lineno=2822)
DEBUG 2022-02-14 16:38:01,404 stack ['$phi20.0']
DEBUG 2022-02-14 16:38:01,404 dispatch pc=24, inst=LOAD_FAST(arg=3, lineno=2822)
DEBUG 2022-02-14 16:38:01,404 stack ['$phi20.0', '$shape22.2']
DEBUG 2022-02-14 16:38:01,404 dispatch pc=26, inst=BINARY_SUBSCR(arg=None, lineno=2822)
DEBUG 2022-02-14 16:38:01,404 stack ['$phi20.0', '$shape22.2', '$i24.3']
DEBUG 2022-02-14 16:38:01,404 dispatch pc=28, inst=LOAD_FAST(arg=1, lineno=2822)
DEBUG 2022-02-14 16:38:01,404 stack ['$phi20.0', '$26binary_subscr.4']
DEBUG 2022-02-14 16:38:01,404 dispatch pc=30, inst=LOAD_GLOBAL(arg=0, lineno=2822)
DEBUG 2022-02-14 16:38:01,404 stack ['$phi20.0', '$26binary_subscr.4', '$main_shape28.5']
DEBUG 2022-02-14 16:38:01,404 dispatch pc=32, inst=LOAD_FAST(arg=1, lineno=2822)
DEBUG 2022-02-14 16:38:01,405 stack ['$phi20.0', '$26binary_subscr.4', '$main_shape28.5', '$30load_global.6']
DEBUG 2022-02-14 16:38:01,405 dispatch pc=34, inst=CALL_FUNCTION(arg=1, lineno=2822)
DEBUG 2022-02-14 16:38:01,405 stack ['$phi20.0', '$26binary_subscr.4', '$main_shape28.5', '$30load_global.6', '$main_shape32.7']
DEBUG 2022-02-14 16:38:01,405 dispatch pc=36, inst=LOAD_FAST(arg=2, lineno=2822)
DEBUG 2022-02-14 16:38:01,405 stack ['$phi20.0', '$26binary_subscr.4', '$main_shape28.5', '$34call_function.8']
DEBUG 2022-02-14 16:38:01,405 dispatch pc=38, inst=BINARY_SUBTRACT(arg=None, lineno=2822)
DEBUG 2022-02-14 16:38:01,405 stack ['$phi20.0', '$26binary_subscr.4', '$main_shape28.5', '$34call_function.8', '$n36.9']
DEBUG 2022-02-14 16:38:01,405 dispatch pc=40, inst=LOAD_FAST(arg=3, lineno=2822)
DEBUG 2022-02-14 16:38:01,405 stack ['$phi20.0', '$26binary_subscr.4', '$main_shape28.5', '$38binary_subtract.10']
DEBUG 2022-02-14 16:38:01,405 dispatch pc=42, inst=BINARY_ADD(arg=None, lineno=2822)
DEBUG 2022-02-14 16:38:01,405 stack ['$phi20.0', '$26binary_subscr.4', '$main_shape28.5', '$38binary_subtract.10', '$i40.11']
DEBUG 2022-02-14 16:38:01,405 dispatch pc=44, inst=BINARY_SUBSCR(arg=None, lineno=2822)
DEBUG 2022-02-14 16:38:01,405 stack ['$phi20.0', '$26binary_subscr.4', '$main_shape28.5', '$42binary_add.12']
DEBUG 2022-02-14 16:38:01,406 dispatch pc=46, inst=COMPARE_OP(arg=3, lineno=2822)
DEBUG 2022-02-14 16:38:01,406 stack ['$phi20.0', '$26binary_subscr.4', '$44binary_subscr.13']
DEBUG 2022-02-14 16:38:01,406 dispatch pc=48, inst=POP_JUMP_IF_FALSE(arg=18, lineno=2822)
DEBUG 2022-02-14 16:38:01,406 stack ['$phi20.0', '$46compare_op.14']
DEBUG 2022-02-14 16:38:01,406 end state. edges=[Edge(pc=50, stack=('$phi20.0',), blockstack=(), npush=0), Edge(pc=18, stack=('$phi20.0',), blockstack=(), npush=0)]
DEBUG 2022-02-14 16:38:01,406 pending: deque([State(pc_initial=50 nstack_initial=1), State(pc_initial=18 nstack_initial=1)])
DEBUG 2022-02-14 16:38:01,406 stack: ['$phi50.0']
DEBUG 2022-02-14 16:38:01,406 dispatch pc=50, inst=LOAD_GLOBAL(arg=2, lineno=2823)
DEBUG 2022-02-14 16:38:01,406 stack ['$phi50.0']
DEBUG 2022-02-14 16:38:01,406 dispatch pc=52, inst=LOAD_CONST(arg=1, lineno=2823)
DEBUG 2022-02-14 16:38:01,406 stack ['$phi50.0', '$50load_global.1']
DEBUG 2022-02-14 16:38:01,406 dispatch pc=54, inst=CALL_FUNCTION(arg=1, lineno=2823)
DEBUG 2022-02-14 16:38:01,407 stack ['$phi50.0', '$50load_global.1', '$const52.2']
DEBUG 2022-02-14 16:38:01,407 dispatch pc=56, inst=RAISE_VARARGS(arg=1, lineno=2823)
DEBUG 2022-02-14 16:38:01,407 stack ['$phi50.0', '$54call_function.3']
DEBUG 2022-02-14 16:38:01,407 end state. edges=[]
DEBUG 2022-02-14 16:38:01,407 pending: deque([State(pc_initial=18 nstack_initial=1)])
DEBUG 2022-02-14 16:38:01,407 -------------------------Prune PHIs-------------------------
DEBUG 2022-02-14 16:38:01,407 Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=18 nstack_initial=1): {'$phi18.0'},
             State(pc_initial=20 nstack_initial=2): {'$phi20.1'},
             State(pc_initial=50 nstack_initial=1): set(),
             State(pc_initial=60 nstack_initial=0): set()})
DEBUG 2022-02-14 16:38:01,407 defmap: {'$phi18.0': State(pc_initial=0 nstack_initial=0),
 '$phi20.1': State(pc_initial=18 nstack_initial=1)}
DEBUG 2022-02-14 16:38:01,408 phismap: defaultdict(<class 'set'>,
            {'$phi18.0': {('$16get_iter.6',
                           State(pc_initial=0 nstack_initial=0)),
                          ('$phi20.0', State(pc_initial=20 nstack_initial=2))},
             '$phi20.0': {('$phi18.0', State(pc_initial=18 nstack_initial=1))},
             '$phi20.1': {('$18for_iter.2',
                           State(pc_initial=18 nstack_initial=1))},
             '$phi50.0': {('$phi20.0', State(pc_initial=20 nstack_initial=2))}})
DEBUG 2022-02-14 16:38:01,408 changing phismap: defaultdict(<class 'set'>,
            {'$phi18.0': {('$16get_iter.6',
                           State(pc_initial=0 nstack_initial=0)),
                          ('$phi18.0', State(pc_initial=18 nstack_initial=1))},
             '$phi20.0': {('$16get_iter.6',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi20.1': {('$18for_iter.2',
                           State(pc_initial=18 nstack_initial=1))},
             '$phi50.0': {('$16get_iter.6',
                           State(pc_initial=0 nstack_initial=0))}})
DEBUG 2022-02-14 16:38:01,409 changing phismap: defaultdict(<class 'set'>,
            {'$phi18.0': {('$16get_iter.6',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi20.0': {('$16get_iter.6',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi20.1': {('$18for_iter.2',
                           State(pc_initial=18 nstack_initial=1))},
             '$phi50.0': {('$16get_iter.6',
                           State(pc_initial=0 nstack_initial=0))}})
DEBUG 2022-02-14 16:38:01,409 changing phismap: defaultdict(<class 'set'>,
            {'$phi18.0': {('$16get_iter.6',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi20.0': {('$16get_iter.6',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi20.1': {('$18for_iter.2',
                           State(pc_initial=18 nstack_initial=1))},
             '$phi50.0': {('$16get_iter.6',
                           State(pc_initial=0 nstack_initial=0))}})
DEBUG 2022-02-14 16:38:01,410 keep phismap: {'$phi18.0': {('$16get_iter.6', State(pc_initial=0 nstack_initial=0))},
 '$phi20.1': {('$18for_iter.2', State(pc_initial=18 nstack_initial=1))}}
DEBUG 2022-02-14 16:38:01,410 new_out: defaultdict(<class 'dict'>,
            {State(pc_initial=0 nstack_initial=0): {'$phi18.0': '$16get_iter.6'},
             State(pc_initial=18 nstack_initial=1): {'$phi20.1': '$18for_iter.2'}})
DEBUG 2022-02-14 16:38:01,410 ----------------------DONE Prune PHIs-----------------------
DEBUG 2022-02-14 16:38:01,411 block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$2load_global.0'}), (4, {'res': '$shape4.1'}), (6, {'func': '$2load_global.0', 'args': ['$shape4.1'], 'res': '$6call_function.2'}), (8, {'value': '$6call_function.2'}), (10, {'res': '$10load_global.3'}), (12, {'res': '$n12.4'}), (14, {'func': '$10load_global.3', 'args': ['$n12.4'], 'res': '$14call_function.5'}), (16, {'value': '$14call_function.5', 'res': '$16get_iter.6'})), outgoing_phis={'$phi18.0': '$16get_iter.6'}, blockstack=(), active_try_block=None, outgoing_edgepushed={18: ('$16get_iter.6',)})
DEBUG 2022-02-14 16:38:01,411 block_infos State(pc_initial=18 nstack_initial=1):
AdaptBlockInfo(insts=((18, {'iterator': '$phi18.0', 'pair': '$18for_iter.1', 'indval': '$18for_iter.2', 'pred': '$18for_iter.3'}),), outgoing_phis={'$phi20.1': '$18for_iter.2'}, blockstack=(), active_try_block=None, outgoing_edgepushed={60: (), 20: ('$phi18.0', '$18for_iter.2')})
DEBUG 2022-02-14 16:38:01,411 block_infos State(pc_initial=20 nstack_initial=2):
AdaptBlockInfo(insts=((20, {'value': '$phi20.1'}), (22, {'res': '$shape22.2'}), (24, {'res': '$i24.3'}), (26, {'index': '$i24.3', 'target': '$shape22.2', 'res': '$26binary_subscr.4'}), (28, {'res': '$main_shape28.5'}), (30, {'res': '$30load_global.6'}), (32, {'res': '$main_shape32.7'}), (34, {'func': '$30load_global.6', 'args': ['$main_shape32.7'], 'res': '$34call_function.8'}), (36, {'res': '$n36.9'}), (38, {'lhs': '$34call_function.8', 'rhs': '$n36.9', 'res': '$38binary_subtract.10'}), (40, {'res': '$i40.11'}), (42, {'lhs': '$38binary_subtract.10', 'rhs': '$i40.11', 'res': '$42binary_add.12'}), (44, {'index': '$42binary_add.12', 'target': '$main_shape28.5', 'res': '$44binary_subscr.13'}), (46, {'lhs': '$26binary_subscr.4', 'rhs': '$44binary_subscr.13', 'res': '$46compare_op.14'}), (48, {'pred': '$46compare_op.14'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={50: ('$phi20.0',), 18: ('$phi20.0',)})
DEBUG 2022-02-14 16:38:01,411 block_infos State(pc_initial=50 nstack_initial=1):
AdaptBlockInfo(insts=((50, {'res': '$50load_global.1'}), (52, {'res': '$const52.2'}), (54, {'func': '$50load_global.1', 'args': ['$const52.2'], 'res': '$54call_function.3'}), (56, {'exc': '$54call_function.3'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG 2022-02-14 16:38:01,411 block_infos State(pc_initial=60 nstack_initial=0):
AdaptBlockInfo(insts=((60, {'res': '$const60.0'}), (62, {'retval': '$const60.0', 'castval': '$62return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG 2022-02-14 16:38:01,412 label 0:
    shape = arg(0, name=shape)               ['shape']
    main_shape = arg(1, name=main_shape)     ['main_shape']
    $2load_global.0 = global(len: <built-in function len>) ['$2load_global.0']
    n = call $2load_global.0(shape, func=$2load_global.0, args=[Var(shape, arrayobj.py:2820)], kws=(), vararg=None, target=None) ['$2load_global.0', 'n', 'shape']
    $10load_global.3 = global(range: <class 'range'>) ['$10load_global.3']
    $14call_function.5 = call $10load_global.3(n, func=$10load_global.3, args=[Var(n, arrayobj.py:2820)], kws=(), vararg=None, target=None) ['$10load_global.3', '$14call_function.5', 'n']
    $16get_iter.6 = getiter(value=$14call_function.5) ['$14call_function.5', '$16get_iter.6']
    $phi18.0 = $16get_iter.6                 ['$16get_iter.6', '$phi18.0']
    jump 18                                  []
label 18:
    $18for_iter.1 = iternext(value=$phi18.0) ['$18for_iter.1', '$phi18.0']
    $18for_iter.2 = pair_first(value=$18for_iter.1) ['$18for_iter.1', '$18for_iter.2']
    $18for_iter.3 = pair_second(value=$18for_iter.1) ['$18for_iter.1', '$18for_iter.3']
    $phi20.1 = $18for_iter.2                 ['$18for_iter.2', '$phi20.1']
    branch $18for_iter.3, 20, 60             ['$18for_iter.3']
label 20:
    i = $phi20.1                             ['$phi20.1', 'i']
    $26binary_subscr.4 = getitem(value=shape, index=i, fn=<built-in function getitem>) ['$26binary_subscr.4', 'i', 'shape']
    $30load_global.6 = global(len: <built-in function len>) ['$30load_global.6']
    $34call_function.8 = call $30load_global.6(main_shape, func=$30load_global.6, args=[Var(main_shape, arrayobj.py:2820)], kws=(), vararg=None, target=None) ['$30load_global.6', '$34call_function.8', 'main_shape']
    $38binary_subtract.10 = $34call_function.8 - n ['$34call_function.8', '$38binary_subtract.10', 'n']
    $42binary_add.12 = $38binary_subtract.10 + i ['$38binary_subtract.10', '$42binary_add.12', 'i']
    $44binary_subscr.13 = getitem(value=main_shape, index=$42binary_add.12, fn=<built-in function getitem>) ['$42binary_add.12', '$44binary_subscr.13', 'main_shape']
    $46compare_op.14 = $26binary_subscr.4 != $44binary_subscr.13 ['$26binary_subscr.4', '$44binary_subscr.13', '$46compare_op.14']
    bool48 = global(bool: <class 'bool'>)    ['bool48']
    $48pred = call bool48($46compare_op.14, func=bool48, args=(Var($46compare_op.14, arrayobj.py:2822),), kws=(), vararg=None, target=None) ['$46compare_op.14', '$48pred', 'bool48']
    branch $48pred, 50, 18                   ['$48pred']
label 50:
    $50load_global.1 = global(ValueError: <class 'ValueError'>) ['$50load_global.1']
    $const52.2 = const(str, nditer(): operands could not be broadcast together) ['$const52.2']
    $54call_function.3 = call $50load_global.1($const52.2, func=$50load_global.1, args=[Var($const52.2, arrayobj.py:2823)], kws=(), vararg=None, target=None) ['$50load_global.1', '$54call_function.3', '$const52.2']
    raise $54call_function.3                 ['$54call_function.3']
label 60:
    $const60.0 = const(NoneType, None)       ['$const60.0']
    $62return_value.1 = cast(value=$const60.0) ['$62return_value.1', '$const60.0']
    return $62return_value.1                 ['$62return_value.1']

DEBUG 2022-02-14 16:38:01,416 ==== SSA block analysis pass on 0
DEBUG 2022-02-14 16:38:01,416 Running <numba.core.ssa._GatherDefsHandler object at 0x7fa046a21e80>
DEBUG 2022-02-14 16:38:01,416 on stmt: shape = arg(0, name=shape)
DEBUG 2022-02-14 16:38:01,416 on stmt: main_shape = arg(1, name=main_shape)
DEBUG 2022-02-14 16:38:01,416 on stmt: $2load_global.0 = global(len: <built-in function len>)
DEBUG 2022-02-14 16:38:01,416 on stmt: n = const(int, 2)
DEBUG 2022-02-14 16:38:01,417 on stmt: $10load_global.3 = global(range: <class 'range'>)
DEBUG 2022-02-14 16:38:01,417 on stmt: $14call_function.5 = call $10load_global.3(n, func=$10load_global.3, args=[Var(n, arrayobj.py:2820)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:01,417 on stmt: $16get_iter.6 = getiter(value=$14call_function.5)
DEBUG 2022-02-14 16:38:01,417 on stmt: $phi18.0 = $16get_iter.6
DEBUG 2022-02-14 16:38:01,417 on stmt: jump 18
DEBUG 2022-02-14 16:38:01,417 ==== SSA block analysis pass on 18
DEBUG 2022-02-14 16:38:01,417 Running <numba.core.ssa._GatherDefsHandler object at 0x7fa046a21e80>
DEBUG 2022-02-14 16:38:01,417 on stmt: $18for_iter.1 = iternext(value=$phi18.0)
DEBUG 2022-02-14 16:38:01,417 on stmt: $18for_iter.2 = pair_first(value=$18for_iter.1)
DEBUG 2022-02-14 16:38:01,417 on stmt: $18for_iter.3 = pair_second(value=$18for_iter.1)
DEBUG 2022-02-14 16:38:01,417 on stmt: $phi20.1 = $18for_iter.2
DEBUG 2022-02-14 16:38:01,417 on stmt: branch $18for_iter.3, 20, 60
DEBUG 2022-02-14 16:38:01,417 ==== SSA block analysis pass on 20
DEBUG 2022-02-14 16:38:01,417 Running <numba.core.ssa._GatherDefsHandler object at 0x7fa046a21e80>
DEBUG 2022-02-14 16:38:01,417 on stmt: i = $phi20.1
DEBUG 2022-02-14 16:38:01,417 on stmt: $26binary_subscr.4 = getitem(value=shape, index=i, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:01,417 on stmt: $30load_global.6 = global(len: <built-in function len>)
DEBUG 2022-02-14 16:38:01,417 on stmt: $34call_function.8 = const(int, 2)
DEBUG 2022-02-14 16:38:01,417 on stmt: $38binary_subtract.10 = $34call_function.8 - n
DEBUG 2022-02-14 16:38:01,417 on stmt: $42binary_add.12 = $38binary_subtract.10 + i
DEBUG 2022-02-14 16:38:01,417 on stmt: $44binary_subscr.13 = getitem(value=main_shape, index=$42binary_add.12, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:01,417 on stmt: $46compare_op.14 = $26binary_subscr.4 != $44binary_subscr.13
DEBUG 2022-02-14 16:38:01,418 on stmt: bool48 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:38:01,418 on stmt: $48pred = call bool48($46compare_op.14, func=bool48, args=(Var($46compare_op.14, arrayobj.py:2822),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:01,418 on stmt: branch $48pred, 50, 18
DEBUG 2022-02-14 16:38:01,418 ==== SSA block analysis pass on 50
DEBUG 2022-02-14 16:38:01,418 Running <numba.core.ssa._GatherDefsHandler object at 0x7fa046a21e80>
DEBUG 2022-02-14 16:38:01,418 on stmt: $50load_global.1 = global(ValueError: <class 'ValueError'>)
DEBUG 2022-02-14 16:38:01,418 on stmt: $const52.2 = const(str, nditer(): operands could not be broadcast together)
DEBUG 2022-02-14 16:38:01,418 on stmt: $54call_function.3 = call $50load_global.1($const52.2, func=$50load_global.1, args=[Var($const52.2, arrayobj.py:2823)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:01,418 on stmt: <static> raise <class 'ValueError'>('nditer(): operands could not be broadcast together')
DEBUG 2022-02-14 16:38:01,418 ==== SSA block analysis pass on 60
DEBUG 2022-02-14 16:38:01,418 Running <numba.core.ssa._GatherDefsHandler object at 0x7fa046a21e80>
DEBUG 2022-02-14 16:38:01,418 on stmt: $const60.0 = const(NoneType, None)
DEBUG 2022-02-14 16:38:01,418 on stmt: $62return_value.1 = cast(value=$const60.0)
DEBUG 2022-02-14 16:38:01,418 on stmt: return $62return_value.1
DEBUG 2022-02-14 16:38:01,419 defs defaultdict(<class 'list'>,
            {'$10load_global.3': [<numba.core.ir.Assign object at 0x7fa046984580>],
             '$14call_function.5': [<numba.core.ir.Assign object at 0x7fa046984880>],
             '$16get_iter.6': [<numba.core.ir.Assign object at 0x7fa0469849a0>],
             '$18for_iter.1': [<numba.core.ir.Assign object at 0x7fa046984c10>],
             '$18for_iter.2': [<numba.core.ir.Assign object at 0x7fa046984d30>],
             '$18for_iter.3': [<numba.core.ir.Assign object at 0x7fa046984e50>],
             '$26binary_subscr.4': [<numba.core.ir.Assign object at 0x7fa046981550>],
             '$2load_global.0': [<numba.core.ir.Assign object at 0x7fa046984040>],
             '$30load_global.6': [<numba.core.ir.Assign object at 0x7fa0469817c0>],
             '$34call_function.8': [<numba.core.ir.Assign object at 0x7fa046981ac0>],
             '$38binary_subtract.10': [<numba.core.ir.Assign object at 0x7fa046a1bcd0>],
             '$42binary_add.12': [<numba.core.ir.Assign object at 0x7fa046a1ba00>],
             '$44binary_subscr.13': [<numba.core.ir.Assign object at 0x7fa046a1b250>],
             '$46compare_op.14': [<numba.core.ir.Assign object at 0x7fa046a1b0d0>],
             '$48pred': [<numba.core.ir.Assign object at 0x7fa046981c70>],
             '$50load_global.1': [<numba.core.ir.Assign object at 0x7fa046981970>],
             '$54call_function.3': [<numba.core.ir.Assign object at 0x7fa0469750a0>],
             '$62return_value.1': [<numba.core.ir.Assign object at 0x7fa0469754c0>],
             '$const52.2': [<numba.core.ir.Assign object at 0x7fa046981e80>],
             '$const60.0': [<numba.core.ir.Assign object at 0x7fa046975340>],
             '$phi18.0': [<numba.core.ir.Assign object at 0x7fa046984160>],
             '$phi20.1': [<numba.core.ir.Assign object at 0x7fa046984b50>],
             'bool48': [<numba.core.ir.Assign object at 0x7fa046a21cd0>],
             'i': [<numba.core.ir.Assign object at 0x7fa046981160>],
             'main_shape': [<numba.core.ir.Assign object at 0x7fa046a1be80>],
             'n': [<numba.core.ir.Assign object at 0x7fa046984340>],
             'shape': [<numba.core.ir.Assign object at 0x7fa046a1bd60>]})
DEBUG 2022-02-14 16:38:01,419 SSA violators set()
DEBUG 2022-02-14 16:38:01,535 bytecode dump:
>          0	NOP(arg=None, lineno=795)
           2	LOAD_DEREF(arg=1, lineno=795)
           4	POP_JUMP_IF_FALSE(arg=18, lineno=795)
           6	LOAD_GLOBAL(arg=0, lineno=797)
           8	LOAD_METHOD(arg=1, lineno=797)
          10	LOAD_FAST(arg=0, lineno=797)
          12	CALL_METHOD(arg=1, lineno=797)
          14	STORE_FAST(arg=1, lineno=797)
          16	JUMP_FORWARD(arg=54, lineno=797)
>         18	LOAD_DEREF(arg=0, lineno=798)
          20	POP_JUMP_IF_FALSE(arg=62, lineno=798)
          22	LOAD_FAST(arg=0, lineno=800)
          24	LOAD_ATTR(arg=2, lineno=800)
          26	LOAD_ATTR(arg=3, lineno=800)
          28	STORE_FAST(arg=2, lineno=800)
          30	LOAD_FAST(arg=2, lineno=801)
          32	POP_JUMP_IF_FALSE(arg=50, lineno=801)
          34	LOAD_GLOBAL(arg=0, lineno=804)
          36	LOAD_METHOD(arg=1, lineno=804)
          38	LOAD_FAST(arg=0, lineno=804)
          40	LOAD_ATTR(arg=4, lineno=804)
          42	CALL_METHOD(arg=1, lineno=804)
          44	LOAD_ATTR(arg=4, lineno=804)
          46	STORE_FAST(arg=1, lineno=804)
          48	JUMP_ABSOLUTE(arg=72, lineno=804)
>         50	LOAD_GLOBAL(arg=0, lineno=808)
          52	LOAD_METHOD(arg=5, lineno=808)
          54	LOAD_FAST(arg=0, lineno=808)
          56	CALL_METHOD(arg=1, lineno=808)
          58	STORE_FAST(arg=1, lineno=808)
          60	JUMP_FORWARD(arg=10, lineno=808)
>         62	LOAD_GLOBAL(arg=0, lineno=811)
          64	LOAD_METHOD(arg=5, lineno=811)
          66	LOAD_FAST(arg=0, lineno=811)
          68	CALL_METHOD(arg=1, lineno=811)
          70	STORE_FAST(arg=1, lineno=811)
>         72	LOAD_FAST(arg=1, lineno=812)
          74	RETURN_VALUE(arg=None, lineno=812)
DEBUG 2022-02-14 16:38:01,536 pending: deque([State(pc_initial=0 nstack_initial=0)])
DEBUG 2022-02-14 16:38:01,536 stack: []
DEBUG 2022-02-14 16:38:01,536 dispatch pc=0, inst=NOP(arg=None, lineno=795)
DEBUG 2022-02-14 16:38:01,536 stack []
DEBUG 2022-02-14 16:38:01,536 dispatch pc=2, inst=LOAD_DEREF(arg=1, lineno=795)
DEBUG 2022-02-14 16:38:01,536 stack []
DEBUG 2022-02-14 16:38:01,536 dispatch pc=4, inst=POP_JUMP_IF_FALSE(arg=18, lineno=795)
DEBUG 2022-02-14 16:38:01,536 stack ['$2load_deref.0']
DEBUG 2022-02-14 16:38:01,536 end state. edges=[Edge(pc=6, stack=(), blockstack=(), npush=0), Edge(pc=18, stack=(), blockstack=(), npush=0)]
DEBUG 2022-02-14 16:38:01,536 pending: deque([State(pc_initial=6 nstack_initial=0), State(pc_initial=18 nstack_initial=0)])
DEBUG 2022-02-14 16:38:01,536 stack: []
DEBUG 2022-02-14 16:38:01,537 dispatch pc=6, inst=LOAD_GLOBAL(arg=0, lineno=797)
DEBUG 2022-02-14 16:38:01,537 stack []
DEBUG 2022-02-14 16:38:01,537 dispatch pc=8, inst=LOAD_METHOD(arg=1, lineno=797)
DEBUG 2022-02-14 16:38:01,537 stack ['$6load_global.0']
DEBUG 2022-02-14 16:38:01,537 dispatch pc=10, inst=LOAD_FAST(arg=0, lineno=797)
DEBUG 2022-02-14 16:38:01,537 stack ['$8load_method.1']
DEBUG 2022-02-14 16:38:01,537 dispatch pc=12, inst=CALL_METHOD(arg=1, lineno=797)
DEBUG 2022-02-14 16:38:01,537 stack ['$8load_method.1', '$a10.2']
DEBUG 2022-02-14 16:38:01,537 dispatch pc=14, inst=STORE_FAST(arg=1, lineno=797)
DEBUG 2022-02-14 16:38:01,537 stack ['$12call_method.3']
DEBUG 2022-02-14 16:38:01,537 dispatch pc=16, inst=JUMP_FORWARD(arg=54, lineno=797)
DEBUG 2022-02-14 16:38:01,537 stack []
DEBUG 2022-02-14 16:38:01,537 end state. edges=[Edge(pc=72, stack=(), blockstack=(), npush=0)]
DEBUG 2022-02-14 16:38:01,537 pending: deque([State(pc_initial=18 nstack_initial=0), State(pc_initial=72 nstack_initial=0)])
DEBUG 2022-02-14 16:38:01,538 stack: []
DEBUG 2022-02-14 16:38:01,538 dispatch pc=18, inst=LOAD_DEREF(arg=0, lineno=798)
DEBUG 2022-02-14 16:38:01,538 stack []
DEBUG 2022-02-14 16:38:01,538 dispatch pc=20, inst=POP_JUMP_IF_FALSE(arg=62, lineno=798)
DEBUG 2022-02-14 16:38:01,538 stack ['$18load_deref.0']
DEBUG 2022-02-14 16:38:01,538 end state. edges=[Edge(pc=22, stack=(), blockstack=(), npush=0), Edge(pc=62, stack=(), blockstack=(), npush=0)]
DEBUG 2022-02-14 16:38:01,538 pending: deque([State(pc_initial=72 nstack_initial=0), State(pc_initial=22 nstack_initial=0), State(pc_initial=62 nstack_initial=0)])
DEBUG 2022-02-14 16:38:01,538 stack: []
DEBUG 2022-02-14 16:38:01,538 dispatch pc=72, inst=LOAD_FAST(arg=1, lineno=812)
DEBUG 2022-02-14 16:38:01,538 stack []
DEBUG 2022-02-14 16:38:01,538 dispatch pc=74, inst=RETURN_VALUE(arg=None, lineno=812)
DEBUG 2022-02-14 16:38:01,538 stack ['$acpy72.0']
DEBUG 2022-02-14 16:38:01,538 end state. edges=[]
DEBUG 2022-02-14 16:38:01,538 pending: deque([State(pc_initial=22 nstack_initial=0), State(pc_initial=62 nstack_initial=0)])
DEBUG 2022-02-14 16:38:01,538 stack: []
DEBUG 2022-02-14 16:38:01,538 dispatch pc=22, inst=LOAD_FAST(arg=0, lineno=800)
DEBUG 2022-02-14 16:38:01,538 stack []
DEBUG 2022-02-14 16:38:01,539 dispatch pc=24, inst=LOAD_ATTR(arg=2, lineno=800)
DEBUG 2022-02-14 16:38:01,539 stack ['$a22.0']
DEBUG 2022-02-14 16:38:01,539 dispatch pc=26, inst=LOAD_ATTR(arg=3, lineno=800)
DEBUG 2022-02-14 16:38:01,539 stack ['$24load_attr.1']
DEBUG 2022-02-14 16:38:01,539 dispatch pc=28, inst=STORE_FAST(arg=2, lineno=800)
DEBUG 2022-02-14 16:38:01,539 stack ['$26load_attr.2']
DEBUG 2022-02-14 16:38:01,539 dispatch pc=30, inst=LOAD_FAST(arg=2, lineno=801)
DEBUG 2022-02-14 16:38:01,539 stack []
DEBUG 2022-02-14 16:38:01,539 dispatch pc=32, inst=POP_JUMP_IF_FALSE(arg=50, lineno=801)
DEBUG 2022-02-14 16:38:01,539 stack ['$flag_f30.3']
DEBUG 2022-02-14 16:38:01,539 end state. edges=[Edge(pc=34, stack=(), blockstack=(), npush=0), Edge(pc=50, stack=(), blockstack=(), npush=0)]
DEBUG 2022-02-14 16:38:01,539 pending: deque([State(pc_initial=62 nstack_initial=0), State(pc_initial=34 nstack_initial=0), State(pc_initial=50 nstack_initial=0)])
DEBUG 2022-02-14 16:38:01,539 stack: []
DEBUG 2022-02-14 16:38:01,539 dispatch pc=62, inst=LOAD_GLOBAL(arg=0, lineno=811)
DEBUG 2022-02-14 16:38:01,539 stack []
DEBUG 2022-02-14 16:38:01,539 dispatch pc=64, inst=LOAD_METHOD(arg=5, lineno=811)
DEBUG 2022-02-14 16:38:01,539 stack ['$62load_global.0']
DEBUG 2022-02-14 16:38:01,539 dispatch pc=66, inst=LOAD_FAST(arg=0, lineno=811)
DEBUG 2022-02-14 16:38:01,539 stack ['$64load_method.1']
DEBUG 2022-02-14 16:38:01,540 dispatch pc=68, inst=CALL_METHOD(arg=1, lineno=811)
DEBUG 2022-02-14 16:38:01,540 stack ['$64load_method.1', '$a66.2']
DEBUG 2022-02-14 16:38:01,540 dispatch pc=70, inst=STORE_FAST(arg=1, lineno=811)
DEBUG 2022-02-14 16:38:01,540 stack ['$68call_method.3']
DEBUG 2022-02-14 16:38:01,540 end state. edges=[Edge(pc=72, stack=(), blockstack=(), npush=0)]
DEBUG 2022-02-14 16:38:01,540 pending: deque([State(pc_initial=34 nstack_initial=0), State(pc_initial=50 nstack_initial=0), State(pc_initial=72 nstack_initial=0)])
DEBUG 2022-02-14 16:38:01,540 stack: []
DEBUG 2022-02-14 16:38:01,540 dispatch pc=34, inst=LOAD_GLOBAL(arg=0, lineno=804)
DEBUG 2022-02-14 16:38:01,540 stack []
DEBUG 2022-02-14 16:38:01,540 dispatch pc=36, inst=LOAD_METHOD(arg=1, lineno=804)
DEBUG 2022-02-14 16:38:01,540 stack ['$34load_global.0']
DEBUG 2022-02-14 16:38:01,540 dispatch pc=38, inst=LOAD_FAST(arg=0, lineno=804)
DEBUG 2022-02-14 16:38:01,540 stack ['$36load_method.1']
DEBUG 2022-02-14 16:38:01,540 dispatch pc=40, inst=LOAD_ATTR(arg=4, lineno=804)
DEBUG 2022-02-14 16:38:01,540 stack ['$36load_method.1', '$a38.2']
DEBUG 2022-02-14 16:38:01,540 dispatch pc=42, inst=CALL_METHOD(arg=1, lineno=804)
DEBUG 2022-02-14 16:38:01,540 stack ['$36load_method.1', '$40load_attr.3']
DEBUG 2022-02-14 16:38:01,540 dispatch pc=44, inst=LOAD_ATTR(arg=4, lineno=804)
DEBUG 2022-02-14 16:38:01,540 stack ['$42call_method.4']
DEBUG 2022-02-14 16:38:01,541 dispatch pc=46, inst=STORE_FAST(arg=1, lineno=804)
DEBUG 2022-02-14 16:38:01,541 stack ['$44load_attr.5']
DEBUG 2022-02-14 16:38:01,541 dispatch pc=48, inst=JUMP_ABSOLUTE(arg=72, lineno=804)
DEBUG 2022-02-14 16:38:01,541 stack []
DEBUG 2022-02-14 16:38:01,541 end state. edges=[Edge(pc=72, stack=(), blockstack=(), npush=0)]
DEBUG 2022-02-14 16:38:01,541 pending: deque([State(pc_initial=50 nstack_initial=0), State(pc_initial=72 nstack_initial=0), State(pc_initial=72 nstack_initial=0)])
DEBUG 2022-02-14 16:38:01,541 stack: []
DEBUG 2022-02-14 16:38:01,541 dispatch pc=50, inst=LOAD_GLOBAL(arg=0, lineno=808)
DEBUG 2022-02-14 16:38:01,541 stack []
DEBUG 2022-02-14 16:38:01,541 dispatch pc=52, inst=LOAD_METHOD(arg=5, lineno=808)
DEBUG 2022-02-14 16:38:01,541 stack ['$50load_global.0']
DEBUG 2022-02-14 16:38:01,541 dispatch pc=54, inst=LOAD_FAST(arg=0, lineno=808)
DEBUG 2022-02-14 16:38:01,541 stack ['$52load_method.1']
DEBUG 2022-02-14 16:38:01,541 dispatch pc=56, inst=CALL_METHOD(arg=1, lineno=808)
DEBUG 2022-02-14 16:38:01,541 stack ['$52load_method.1', '$a54.2']
DEBUG 2022-02-14 16:38:01,541 dispatch pc=58, inst=STORE_FAST(arg=1, lineno=808)
DEBUG 2022-02-14 16:38:01,541 stack ['$56call_method.3']
DEBUG 2022-02-14 16:38:01,541 dispatch pc=60, inst=JUMP_FORWARD(arg=10, lineno=808)
DEBUG 2022-02-14 16:38:01,541 stack []
DEBUG 2022-02-14 16:38:01,542 end state. edges=[Edge(pc=72, stack=(), blockstack=(), npush=0)]
DEBUG 2022-02-14 16:38:01,542 pending: deque([State(pc_initial=72 nstack_initial=0), State(pc_initial=72 nstack_initial=0), State(pc_initial=72 nstack_initial=0)])
DEBUG 2022-02-14 16:38:01,542 pending: deque([State(pc_initial=72 nstack_initial=0), State(pc_initial=72 nstack_initial=0)])
DEBUG 2022-02-14 16:38:01,542 pending: deque([State(pc_initial=72 nstack_initial=0)])
DEBUG 2022-02-14 16:38:01,542 -------------------------Prune PHIs-------------------------
DEBUG 2022-02-14 16:38:01,542 Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=6 nstack_initial=0): set(),
             State(pc_initial=18 nstack_initial=0): set(),
             State(pc_initial=22 nstack_initial=0): set(),
             State(pc_initial=34 nstack_initial=0): set(),
             State(pc_initial=50 nstack_initial=0): set(),
             State(pc_initial=62 nstack_initial=0): set(),
             State(pc_initial=72 nstack_initial=0): set()})
DEBUG 2022-02-14 16:38:01,542 defmap: {}
DEBUG 2022-02-14 16:38:01,543 phismap: defaultdict(<class 'set'>, {})
DEBUG 2022-02-14 16:38:01,543 changing phismap: defaultdict(<class 'set'>, {})
DEBUG 2022-02-14 16:38:01,543 keep phismap: {}
DEBUG 2022-02-14 16:38:01,543 new_out: defaultdict(<class 'dict'>, {})
DEBUG 2022-02-14 16:38:01,543 ----------------------DONE Prune PHIs-----------------------
DEBUG 2022-02-14 16:38:01,543 block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$2load_deref.0'}), (4, {'pred': '$2load_deref.0'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={6: (), 18: ()})
DEBUG 2022-02-14 16:38:01,543 block_infos State(pc_initial=6 nstack_initial=0):
AdaptBlockInfo(insts=((6, {'res': '$6load_global.0'}), (8, {'item': '$6load_global.0', 'res': '$8load_method.1'}), (10, {'res': '$a10.2'}), (12, {'func': '$8load_method.1', 'args': ['$a10.2'], 'res': '$12call_method.3'}), (14, {'value': '$12call_method.3'}), (16, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={72: ()})
DEBUG 2022-02-14 16:38:01,543 block_infos State(pc_initial=18 nstack_initial=0):
AdaptBlockInfo(insts=((18, {'res': '$18load_deref.0'}), (20, {'pred': '$18load_deref.0'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={22: (), 62: ()})
DEBUG 2022-02-14 16:38:01,543 block_infos State(pc_initial=22 nstack_initial=0):
AdaptBlockInfo(insts=((22, {'res': '$a22.0'}), (24, {'item': '$a22.0', 'res': '$24load_attr.1'}), (26, {'item': '$24load_attr.1', 'res': '$26load_attr.2'}), (28, {'value': '$26load_attr.2'}), (30, {'res': '$flag_f30.3'}), (32, {'pred': '$flag_f30.3'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={34: (), 50: ()})
DEBUG 2022-02-14 16:38:01,543 block_infos State(pc_initial=34 nstack_initial=0):
AdaptBlockInfo(insts=((34, {'res': '$34load_global.0'}), (36, {'item': '$34load_global.0', 'res': '$36load_method.1'}), (38, {'res': '$a38.2'}), (40, {'item': '$a38.2', 'res': '$40load_attr.3'}), (42, {'func': '$36load_method.1', 'args': ['$40load_attr.3'], 'res': '$42call_method.4'}), (44, {'item': '$42call_method.4', 'res': '$44load_attr.5'}), (46, {'value': '$44load_attr.5'}), (48, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={72: ()})
DEBUG 2022-02-14 16:38:01,543 block_infos State(pc_initial=50 nstack_initial=0):
AdaptBlockInfo(insts=((50, {'res': '$50load_global.0'}), (52, {'item': '$50load_global.0', 'res': '$52load_method.1'}), (54, {'res': '$a54.2'}), (56, {'func': '$52load_method.1', 'args': ['$a54.2'], 'res': '$56call_method.3'}), (58, {'value': '$56call_method.3'}), (60, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={72: ()})
DEBUG 2022-02-14 16:38:01,543 block_infos State(pc_initial=62 nstack_initial=0):
AdaptBlockInfo(insts=((62, {'res': '$62load_global.0'}), (64, {'item': '$62load_global.0', 'res': '$64load_method.1'}), (66, {'res': '$a66.2'}), (68, {'func': '$64load_method.1', 'args': ['$a66.2'], 'res': '$68call_method.3'}), (70, {'value': '$68call_method.3'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={72: ()})
DEBUG 2022-02-14 16:38:01,544 block_infos State(pc_initial=72 nstack_initial=0):
AdaptBlockInfo(insts=((72, {'res': '$acpy72.0'}), (74, {'retval': '$acpy72.0', 'castval': '$74return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG 2022-02-14 16:38:01,545 label 0:
    a = arg(0, name=a)                       ['a']
    $2load_deref.0 = freevar(F_layout: False) ['$2load_deref.0']
    bool4 = global(bool: <class 'bool'>)     ['bool4']
    $4pred = call bool4($2load_deref.0, func=bool4, args=(Var($2load_deref.0, linalg.py:795),), kws=(), vararg=None, target=None) ['$2load_deref.0', '$4pred', 'bool4']
    branch $4pred, 6, 18                     ['$4pred']
label 6:
    $6load_global.0 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>) ['$6load_global.0']
    $8load_method.1 = getattr(value=$6load_global.0, attr=copy) ['$6load_global.0', '$8load_method.1']
    acpy = call $8load_method.1(a, func=$8load_method.1, args=[Var(a, linalg.py:795)], kws=(), vararg=None, target=None) ['$8load_method.1', 'a', 'acpy']
    jump 72                                  []
label 18:
    $18load_deref.0 = freevar(A_layout: False) ['$18load_deref.0']
    bool20 = global(bool: <class 'bool'>)    ['bool20']
    $20pred = call bool20($18load_deref.0, func=bool20, args=(Var($18load_deref.0, linalg.py:798),), kws=(), vararg=None, target=None) ['$18load_deref.0', '$20pred', 'bool20']
    branch $20pred, 22, 62                   ['$20pred']
label 22:
    $24load_attr.1 = getattr(value=a, attr=flags) ['$24load_attr.1', 'a']
    flag_f = getattr(value=$24load_attr.1, attr=f_contiguous) ['$24load_attr.1', 'flag_f']
    bool32 = global(bool: <class 'bool'>)    ['bool32']
    $32pred = call bool32(flag_f, func=bool32, args=(Var(flag_f, linalg.py:800),), kws=(), vararg=None, target=None) ['$32pred', 'bool32', 'flag_f']
    branch $32pred, 34, 50                   ['$32pred']
label 34:
    $34load_global.0 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>) ['$34load_global.0']
    $36load_method.1 = getattr(value=$34load_global.0, attr=copy) ['$34load_global.0', '$36load_method.1']
    $40load_attr.3 = getattr(value=a, attr=T) ['$40load_attr.3', 'a']
    $42call_method.4 = call $36load_method.1($40load_attr.3, func=$36load_method.1, args=[Var($40load_attr.3, linalg.py:804)], kws=(), vararg=None, target=None) ['$36load_method.1', '$40load_attr.3', '$42call_method.4']
    acpy = getattr(value=$42call_method.4, attr=T) ['$42call_method.4', 'acpy']
    jump 72                                  []
label 50:
    $50load_global.0 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>) ['$50load_global.0']
    $52load_method.1 = getattr(value=$50load_global.0, attr=asfortranarray) ['$50load_global.0', '$52load_method.1']
    acpy = call $52load_method.1(a, func=$52load_method.1, args=[Var(a, linalg.py:795)], kws=(), vararg=None, target=None) ['$52load_method.1', 'a', 'acpy']
    jump 72                                  []
label 62:
    $62load_global.0 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>) ['$62load_global.0']
    $64load_method.1 = getattr(value=$62load_global.0, attr=asfortranarray) ['$62load_global.0', '$64load_method.1']
    acpy = call $64load_method.1(a, func=$64load_method.1, args=[Var(a, linalg.py:795)], kws=(), vararg=None, target=None) ['$64load_method.1', 'a', 'acpy']
    jump 72                                  []
label 72:
    $74return_value.1 = cast(value=acpy)     ['$74return_value.1', 'acpy']
    return $74return_value.1                 ['$74return_value.1']

DEBUG 2022-02-14 16:38:01,550 ==== SSA block analysis pass on 0
DEBUG 2022-02-14 16:38:01,550 Running <numba.core.ssa._GatherDefsHandler object at 0x7fa046909f40>
DEBUG 2022-02-14 16:38:01,550 on stmt: a = arg(0, name=a)
DEBUG 2022-02-14 16:38:01,550 on stmt: $2load_deref.0 = freevar(F_layout: False)
DEBUG 2022-02-14 16:38:01,550 on stmt: bool4 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:38:01,550 on stmt: $4pred = call bool4($2load_deref.0, func=bool4, args=(Var($2load_deref.0, linalg.py:795),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:01,550 on stmt: jump 18
DEBUG 2022-02-14 16:38:01,550 ==== SSA block analysis pass on 18
DEBUG 2022-02-14 16:38:01,550 Running <numba.core.ssa._GatherDefsHandler object at 0x7fa046909f40>
DEBUG 2022-02-14 16:38:01,550 on stmt: $18load_deref.0 = freevar(A_layout: False)
DEBUG 2022-02-14 16:38:01,550 on stmt: bool20 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:38:01,550 on stmt: $20pred = call bool20($18load_deref.0, func=bool20, args=(Var($18load_deref.0, linalg.py:798),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:01,551 on stmt: jump 62
DEBUG 2022-02-14 16:38:01,551 ==== SSA block analysis pass on 62
DEBUG 2022-02-14 16:38:01,551 Running <numba.core.ssa._GatherDefsHandler object at 0x7fa046909f40>
DEBUG 2022-02-14 16:38:01,551 on stmt: $62load_global.0 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:38:01,551 on stmt: $64load_method.1 = getattr(value=$62load_global.0, attr=asfortranarray)
DEBUG 2022-02-14 16:38:01,551 on stmt: acpy = call $64load_method.1(a, func=$64load_method.1, args=[Var(a, linalg.py:795)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:01,551 on stmt: jump 72
DEBUG 2022-02-14 16:38:01,551 ==== SSA block analysis pass on 72
DEBUG 2022-02-14 16:38:01,551 Running <numba.core.ssa._GatherDefsHandler object at 0x7fa046909f40>
DEBUG 2022-02-14 16:38:01,551 on stmt: $74return_value.1 = cast(value=acpy)
DEBUG 2022-02-14 16:38:01,551 on stmt: return $74return_value.1
DEBUG 2022-02-14 16:38:01,551 defs defaultdict(<class 'list'>,
            {'$18load_deref.0': [<numba.core.ir.Assign object at 0x7fa046995d00>],
             '$20pred': [<numba.core.ir.Assign object at 0x7fa046907250>],
             '$2load_deref.0': [<numba.core.ir.Assign object at 0x7fa046995eb0>],
             '$4pred': [<numba.core.ir.Assign object at 0x7fa046995190>],
             '$62load_global.0': [<numba.core.ir.Assign object at 0x7fa046970bb0>],
             '$64load_method.1': [<numba.core.ir.Assign object at 0x7fa046909790>],
             '$74return_value.1': [<numba.core.ir.Assign object at 0x7fa046909d90>],
             'a': [<numba.core.ir.Assign object at 0x7fa046901130>],
             'acpy': [<numba.core.ir.Assign object at 0x7fa046909ac0>],
             'bool20': [<numba.core.ir.Assign object at 0x7fa046907130>],
             'bool4': [<numba.core.ir.Assign object at 0x7fa0469951c0>]})
DEBUG 2022-02-14 16:38:01,551 SSA violators set()
DEBUG 2022-02-14 16:38:01,556 bytecode dump:
>          0	NOP(arg=None, lineno=3)
           2	LOAD_GLOBAL(arg=0, lineno=3)
           4	LOAD_FAST(arg=0, lineno=3)
           6	CALL_FUNCTION(arg=1, lineno=3)
           8	RETURN_VALUE(arg=None, lineno=3)
DEBUG 2022-02-14 16:38:01,556 pending: deque([State(pc_initial=0 nstack_initial=0)])
DEBUG 2022-02-14 16:38:01,556 stack: []
DEBUG 2022-02-14 16:38:01,556 dispatch pc=0, inst=NOP(arg=None, lineno=3)
DEBUG 2022-02-14 16:38:01,557 stack []
DEBUG 2022-02-14 16:38:01,557 dispatch pc=2, inst=LOAD_GLOBAL(arg=0, lineno=3)
DEBUG 2022-02-14 16:38:01,557 stack []
DEBUG 2022-02-14 16:38:01,557 dispatch pc=4, inst=LOAD_FAST(arg=0, lineno=3)
DEBUG 2022-02-14 16:38:01,557 stack ['$2load_global.0']
DEBUG 2022-02-14 16:38:01,557 dispatch pc=6, inst=CALL_FUNCTION(arg=1, lineno=3)
DEBUG 2022-02-14 16:38:01,557 stack ['$2load_global.0', '$tmp04.1']
DEBUG 2022-02-14 16:38:01,557 dispatch pc=8, inst=RETURN_VALUE(arg=None, lineno=3)
DEBUG 2022-02-14 16:38:01,557 stack ['$6call_function.2']
DEBUG 2022-02-14 16:38:01,557 end state. edges=[]
DEBUG 2022-02-14 16:38:01,557 -------------------------Prune PHIs-------------------------
DEBUG 2022-02-14 16:38:01,557 Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
DEBUG 2022-02-14 16:38:01,557 defmap: {}
DEBUG 2022-02-14 16:38:01,557 phismap: defaultdict(<class 'set'>, {})
DEBUG 2022-02-14 16:38:01,557 changing phismap: defaultdict(<class 'set'>, {})
DEBUG 2022-02-14 16:38:01,557 keep phismap: {}
DEBUG 2022-02-14 16:38:01,558 new_out: defaultdict(<class 'dict'>, {})
DEBUG 2022-02-14 16:38:01,558 ----------------------DONE Prune PHIs-----------------------
DEBUG 2022-02-14 16:38:01,558 block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$2load_global.0'}), (4, {'res': '$tmp04.1'}), (6, {'func': '$2load_global.0', 'args': ['$tmp04.1'], 'res': '$6call_function.2'}), (8, {'retval': '$6call_function.2', 'castval': '$8return_value.3'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG 2022-02-14 16:38:01,558 label 0:
    tmp0 = arg(0, name=tmp0)                 ['tmp0']
    $2load_global.0 = global(intrin: <intrinsic stub>) ['$2load_global.0']
    $6call_function.2 = call $2load_global.0(tmp0, func=$2load_global.0, args=[Var(tmp0, <string>:3)], kws=(), vararg=None, target=None) ['$2load_global.0', '$6call_function.2', 'tmp0']
    $8return_value.3 = cast(value=$6call_function.2) ['$6call_function.2', '$8return_value.3']
    return $8return_value.3                  ['$8return_value.3']

DEBUG 2022-02-14 16:38:01,561 ==== SSA block analysis pass on 0
DEBUG 2022-02-14 16:38:01,561 Running <numba.core.ssa._GatherDefsHandler object at 0x7fa04690efa0>
DEBUG 2022-02-14 16:38:01,561 on stmt: tmp0 = arg(0, name=tmp0)
DEBUG 2022-02-14 16:38:01,561 on stmt: $2load_global.0 = global(intrin: <intrinsic stub>)
DEBUG 2022-02-14 16:38:01,561 on stmt: $6call_function.2 = call $2load_global.0(tmp0, func=$2load_global.0, args=[Var(tmp0, <string>:3)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:01,561 on stmt: $8return_value.3 = cast(value=$6call_function.2)
DEBUG 2022-02-14 16:38:01,561 on stmt: return $8return_value.3
DEBUG 2022-02-14 16:38:01,561 defs defaultdict(<class 'list'>,
            {'$2load_global.0': [<numba.core.ir.Assign object at 0x7fa04690e670>],
             '$6call_function.2': [<numba.core.ir.Assign object at 0x7fa0469126d0>],
             '$8return_value.3': [<numba.core.ir.Assign object at 0x7fa0469127f0>],
             'tmp0': [<numba.core.ir.Assign object at 0x7fa04690e2b0>]})
DEBUG 2022-02-14 16:38:01,561 SSA violators set()
DEBUG 2022-02-14 16:38:01,683 bytecode dump:
>          0	NOP(arg=None, lineno=3)
           2	LOAD_GLOBAL(arg=0, lineno=3)
           4	LOAD_FAST(arg=0, lineno=3)
           6	LOAD_FAST(arg=1, lineno=3)
           8	CALL_FUNCTION(arg=2, lineno=3)
          10	RETURN_VALUE(arg=None, lineno=3)
DEBUG 2022-02-14 16:38:01,683 pending: deque([State(pc_initial=0 nstack_initial=0)])
DEBUG 2022-02-14 16:38:01,683 stack: []
DEBUG 2022-02-14 16:38:01,684 dispatch pc=0, inst=NOP(arg=None, lineno=3)
DEBUG 2022-02-14 16:38:01,684 stack []
DEBUG 2022-02-14 16:38:01,684 dispatch pc=2, inst=LOAD_GLOBAL(arg=0, lineno=3)
DEBUG 2022-02-14 16:38:01,684 stack []
DEBUG 2022-02-14 16:38:01,684 dispatch pc=4, inst=LOAD_FAST(arg=0, lineno=3)
DEBUG 2022-02-14 16:38:01,684 stack ['$2load_global.0']
DEBUG 2022-02-14 16:38:01,684 dispatch pc=6, inst=LOAD_FAST(arg=1, lineno=3)
DEBUG 2022-02-14 16:38:01,684 stack ['$2load_global.0', '$tmp04.1']
DEBUG 2022-02-14 16:38:01,684 dispatch pc=8, inst=CALL_FUNCTION(arg=2, lineno=3)
DEBUG 2022-02-14 16:38:01,684 stack ['$2load_global.0', '$tmp04.1', '$dtype6.2']
DEBUG 2022-02-14 16:38:01,684 dispatch pc=10, inst=RETURN_VALUE(arg=None, lineno=3)
DEBUG 2022-02-14 16:38:01,684 stack ['$8call_function.3']
DEBUG 2022-02-14 16:38:01,684 end state. edges=[]
DEBUG 2022-02-14 16:38:01,684 -------------------------Prune PHIs-------------------------
DEBUG 2022-02-14 16:38:01,684 Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
DEBUG 2022-02-14 16:38:01,684 defmap: {}
DEBUG 2022-02-14 16:38:01,684 phismap: defaultdict(<class 'set'>, {})
DEBUG 2022-02-14 16:38:01,684 changing phismap: defaultdict(<class 'set'>, {})
DEBUG 2022-02-14 16:38:01,684 keep phismap: {}
DEBUG 2022-02-14 16:38:01,684 new_out: defaultdict(<class 'dict'>, {})
DEBUG 2022-02-14 16:38:01,684 ----------------------DONE Prune PHIs-----------------------
DEBUG 2022-02-14 16:38:01,685 block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$2load_global.0'}), (4, {'res': '$tmp04.1'}), (6, {'res': '$dtype6.2'}), (8, {'func': '$2load_global.0', 'args': ['$tmp04.1', '$dtype6.2'], 'res': '$8call_function.3'}), (10, {'retval': '$8call_function.3', 'castval': '$10return_value.4'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG 2022-02-14 16:38:01,685 label 0:
    tmp0 = arg(0, name=tmp0)                 ['tmp0']
    dtype = arg(1, name=dtype)               ['dtype']
    $2load_global.0 = global(intrin: <intrinsic stub>) ['$2load_global.0']
    $8call_function.3 = call $2load_global.0(tmp0, dtype, func=$2load_global.0, args=[Var(tmp0, <string>:3), Var(dtype, <string>:3)], kws=(), vararg=None, target=None) ['$2load_global.0', '$8call_function.3', 'dtype', 'tmp0']
    $10return_value.4 = cast(value=$8call_function.3) ['$10return_value.4', '$8call_function.3']
    return $10return_value.4                 ['$10return_value.4']

DEBUG 2022-02-14 16:38:01,686 ==== SSA block analysis pass on 0
DEBUG 2022-02-14 16:38:01,687 Running <numba.core.ssa._GatherDefsHandler object at 0x7fa04696d850>
DEBUG 2022-02-14 16:38:01,687 on stmt: tmp0 = arg(0, name=tmp0)
DEBUG 2022-02-14 16:38:01,687 on stmt: dtype = arg(1, name=dtype)
DEBUG 2022-02-14 16:38:01,687 on stmt: $2load_global.0 = global(intrin: <intrinsic stub>)
DEBUG 2022-02-14 16:38:01,687 on stmt: $8call_function.3 = call $2load_global.0(tmp0, dtype, func=$2load_global.0, args=[Var(tmp0, <string>:3), Var(dtype, <string>:3)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:01,687 on stmt: $10return_value.4 = cast(value=$8call_function.3)
DEBUG 2022-02-14 16:38:01,687 on stmt: return $10return_value.4
DEBUG 2022-02-14 16:38:01,687 defs defaultdict(<class 'list'>,
            {'$10return_value.4': [<numba.core.ir.Assign object at 0x7fa0469954c0>],
             '$2load_global.0': [<numba.core.ir.Assign object at 0x7fa0469952b0>],
             '$8call_function.3': [<numba.core.ir.Assign object at 0x7fa0469957c0>],
             'dtype': [<numba.core.ir.Assign object at 0x7fa046970730>],
             'tmp0': [<numba.core.ir.Assign object at 0x7fa046909520>]})
DEBUG 2022-02-14 16:38:01,687 SSA violators set()
DEBUG 2022-02-14 16:38:01,721 bytecode dump:
>          0	NOP(arg=None, lineno=874)
           2	LOAD_FAST(arg=0, lineno=874)
           4	LOAD_CONST(arg=1, lineno=874)
           6	COMPARE_OP(arg=3, lineno=874)
           8	POP_JUMP_IF_FALSE(arg=48, lineno=874)
          10	LOAD_FAST(arg=0, lineno=875)
          12	LOAD_CONST(arg=1, lineno=875)
          14	COMPARE_OP(arg=0, lineno=875)
          16	POP_JUMP_IF_FALSE(arg=32, lineno=875)
          18	LOAD_GLOBAL(arg=0, lineno=876)
          20	CALL_FUNCTION(arg=0, lineno=876)
          22	POP_TOP(arg=None, lineno=876)
          24	LOAD_CONST(arg=1, lineno=877)
          26	POP_JUMP_IF_TRUE(arg=32, lineno=877)
          28	LOAD_ASSERTION_ERROR(arg=None, lineno=877)
          30	RAISE_VARARGS(arg=1, lineno=877)
>         32	LOAD_FAST(arg=0, lineno=878)
          34	LOAD_CONST(arg=1, lineno=878)
          36	COMPARE_OP(arg=4, lineno=878)
          38	POP_JUMP_IF_FALSE(arg=48, lineno=878)
          40	LOAD_GLOBAL(arg=1, lineno=879)
          42	LOAD_CONST(arg=2, lineno=879)
          44	CALL_FUNCTION(arg=1, lineno=879)
          46	RAISE_VARARGS(arg=1, lineno=879)
>         48	LOAD_CONST(arg=0, lineno=879)
          50	RETURN_VALUE(arg=None, lineno=879)
DEBUG 2022-02-14 16:38:01,722 pending: deque([State(pc_initial=0 nstack_initial=0)])
DEBUG 2022-02-14 16:38:01,722 stack: []
DEBUG 2022-02-14 16:38:01,722 dispatch pc=0, inst=NOP(arg=None, lineno=874)
DEBUG 2022-02-14 16:38:01,722 stack []
DEBUG 2022-02-14 16:38:01,722 dispatch pc=2, inst=LOAD_FAST(arg=0, lineno=874)
DEBUG 2022-02-14 16:38:01,722 stack []
DEBUG 2022-02-14 16:38:01,722 dispatch pc=4, inst=LOAD_CONST(arg=1, lineno=874)
DEBUG 2022-02-14 16:38:01,722 stack ['$r2.0']
DEBUG 2022-02-14 16:38:01,722 dispatch pc=6, inst=COMPARE_OP(arg=3, lineno=874)
DEBUG 2022-02-14 16:38:01,722 stack ['$r2.0', '$const4.1']
DEBUG 2022-02-14 16:38:01,722 dispatch pc=8, inst=POP_JUMP_IF_FALSE(arg=48, lineno=874)
DEBUG 2022-02-14 16:38:01,722 stack ['$6compare_op.2']
DEBUG 2022-02-14 16:38:01,722 end state. edges=[Edge(pc=10, stack=(), blockstack=(), npush=0), Edge(pc=48, stack=(), blockstack=(), npush=0)]
DEBUG 2022-02-14 16:38:01,722 pending: deque([State(pc_initial=10 nstack_initial=0), State(pc_initial=48 nstack_initial=0)])
DEBUG 2022-02-14 16:38:01,722 stack: []
DEBUG 2022-02-14 16:38:01,722 dispatch pc=10, inst=LOAD_FAST(arg=0, lineno=875)
DEBUG 2022-02-14 16:38:01,722 stack []
DEBUG 2022-02-14 16:38:01,722 dispatch pc=12, inst=LOAD_CONST(arg=1, lineno=875)
DEBUG 2022-02-14 16:38:01,722 stack ['$r10.0']
DEBUG 2022-02-14 16:38:01,723 dispatch pc=14, inst=COMPARE_OP(arg=0, lineno=875)
DEBUG 2022-02-14 16:38:01,723 stack ['$r10.0', '$const12.1']
DEBUG 2022-02-14 16:38:01,723 dispatch pc=16, inst=POP_JUMP_IF_FALSE(arg=32, lineno=875)
DEBUG 2022-02-14 16:38:01,723 stack ['$14compare_op.2']
DEBUG 2022-02-14 16:38:01,723 end state. edges=[Edge(pc=18, stack=(), blockstack=(), npush=0), Edge(pc=32, stack=(), blockstack=(), npush=0)]
DEBUG 2022-02-14 16:38:01,723 pending: deque([State(pc_initial=48 nstack_initial=0), State(pc_initial=18 nstack_initial=0), State(pc_initial=32 nstack_initial=0)])
DEBUG 2022-02-14 16:38:01,723 stack: []
DEBUG 2022-02-14 16:38:01,723 dispatch pc=48, inst=LOAD_CONST(arg=0, lineno=879)
DEBUG 2022-02-14 16:38:01,723 stack []
DEBUG 2022-02-14 16:38:01,723 dispatch pc=50, inst=RETURN_VALUE(arg=None, lineno=879)
DEBUG 2022-02-14 16:38:01,723 stack ['$const48.0']
DEBUG 2022-02-14 16:38:01,723 end state. edges=[]
DEBUG 2022-02-14 16:38:01,723 pending: deque([State(pc_initial=18 nstack_initial=0), State(pc_initial=32 nstack_initial=0)])
DEBUG 2022-02-14 16:38:01,723 stack: []
DEBUG 2022-02-14 16:38:01,723 dispatch pc=18, inst=LOAD_GLOBAL(arg=0, lineno=876)
DEBUG 2022-02-14 16:38:01,723 stack []
DEBUG 2022-02-14 16:38:01,723 dispatch pc=20, inst=CALL_FUNCTION(arg=0, lineno=876)
DEBUG 2022-02-14 16:38:01,723 stack ['$18load_global.0']
DEBUG 2022-02-14 16:38:01,723 dispatch pc=22, inst=POP_TOP(arg=None, lineno=876)
DEBUG 2022-02-14 16:38:01,723 stack ['$20call_function.1']
DEBUG 2022-02-14 16:38:01,723 dispatch pc=24, inst=LOAD_CONST(arg=1, lineno=877)
DEBUG 2022-02-14 16:38:01,723 stack []
DEBUG 2022-02-14 16:38:01,723 dispatch pc=26, inst=POP_JUMP_IF_TRUE(arg=32, lineno=877)
DEBUG 2022-02-14 16:38:01,723 stack ['$const24.2']
DEBUG 2022-02-14 16:38:01,724 end state. edges=[Edge(pc=28, stack=(), blockstack=(), npush=0), Edge(pc=32, stack=(), blockstack=(), npush=0)]
DEBUG 2022-02-14 16:38:01,724 pending: deque([State(pc_initial=32 nstack_initial=0), State(pc_initial=28 nstack_initial=0), State(pc_initial=32 nstack_initial=0)])
DEBUG 2022-02-14 16:38:01,724 stack: []
DEBUG 2022-02-14 16:38:01,724 dispatch pc=32, inst=LOAD_FAST(arg=0, lineno=878)
DEBUG 2022-02-14 16:38:01,724 stack []
DEBUG 2022-02-14 16:38:01,724 dispatch pc=34, inst=LOAD_CONST(arg=1, lineno=878)
DEBUG 2022-02-14 16:38:01,724 stack ['$r32.0']
DEBUG 2022-02-14 16:38:01,724 dispatch pc=36, inst=COMPARE_OP(arg=4, lineno=878)
DEBUG 2022-02-14 16:38:01,724 stack ['$r32.0', '$const34.1']
DEBUG 2022-02-14 16:38:01,724 dispatch pc=38, inst=POP_JUMP_IF_FALSE(arg=48, lineno=878)
DEBUG 2022-02-14 16:38:01,724 stack ['$36compare_op.2']
DEBUG 2022-02-14 16:38:01,724 end state. edges=[Edge(pc=40, stack=(), blockstack=(), npush=0), Edge(pc=48, stack=(), blockstack=(), npush=0)]
DEBUG 2022-02-14 16:38:01,724 pending: deque([State(pc_initial=28 nstack_initial=0), State(pc_initial=32 nstack_initial=0), State(pc_initial=40 nstack_initial=0), State(pc_initial=48 nstack_initial=0)])
DEBUG 2022-02-14 16:38:01,724 stack: []
DEBUG 2022-02-14 16:38:01,724 dispatch pc=28, inst=LOAD_ASSERTION_ERROR(arg=None, lineno=877)
DEBUG 2022-02-14 16:38:01,724 stack []
DEBUG 2022-02-14 16:38:01,724 dispatch pc=30, inst=RAISE_VARARGS(arg=1, lineno=877)
DEBUG 2022-02-14 16:38:01,724 stack ['$assertion_error28.0']
DEBUG 2022-02-14 16:38:01,724 end state. edges=[]
DEBUG 2022-02-14 16:38:01,724 pending: deque([State(pc_initial=32 nstack_initial=0), State(pc_initial=40 nstack_initial=0), State(pc_initial=48 nstack_initial=0)])
DEBUG 2022-02-14 16:38:01,724 pending: deque([State(pc_initial=40 nstack_initial=0), State(pc_initial=48 nstack_initial=0)])
DEBUG 2022-02-14 16:38:01,724 stack: []
DEBUG 2022-02-14 16:38:01,725 dispatch pc=40, inst=LOAD_GLOBAL(arg=1, lineno=879)
DEBUG 2022-02-14 16:38:01,725 stack []
DEBUG 2022-02-14 16:38:01,725 dispatch pc=42, inst=LOAD_CONST(arg=2, lineno=879)
DEBUG 2022-02-14 16:38:01,725 stack ['$40load_global.0']
DEBUG 2022-02-14 16:38:01,725 dispatch pc=44, inst=CALL_FUNCTION(arg=1, lineno=879)
DEBUG 2022-02-14 16:38:01,725 stack ['$40load_global.0', '$const42.1']
DEBUG 2022-02-14 16:38:01,725 dispatch pc=46, inst=RAISE_VARARGS(arg=1, lineno=879)
DEBUG 2022-02-14 16:38:01,725 stack ['$44call_function.2']
DEBUG 2022-02-14 16:38:01,725 end state. edges=[]
DEBUG 2022-02-14 16:38:01,725 pending: deque([State(pc_initial=48 nstack_initial=0)])
DEBUG 2022-02-14 16:38:01,725 -------------------------Prune PHIs-------------------------
DEBUG 2022-02-14 16:38:01,725 Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=10 nstack_initial=0): set(),
             State(pc_initial=18 nstack_initial=0): set(),
             State(pc_initial=28 nstack_initial=0): set(),
             State(pc_initial=32 nstack_initial=0): set(),
             State(pc_initial=40 nstack_initial=0): set(),
             State(pc_initial=48 nstack_initial=0): set()})
DEBUG 2022-02-14 16:38:01,725 defmap: {}
DEBUG 2022-02-14 16:38:01,725 phismap: defaultdict(<class 'set'>, {})
DEBUG 2022-02-14 16:38:01,725 changing phismap: defaultdict(<class 'set'>, {})
DEBUG 2022-02-14 16:38:01,726 keep phismap: {}
DEBUG 2022-02-14 16:38:01,726 new_out: defaultdict(<class 'dict'>, {})
DEBUG 2022-02-14 16:38:01,726 ----------------------DONE Prune PHIs-----------------------
DEBUG 2022-02-14 16:38:01,726 block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$r2.0'}), (4, {'res': '$const4.1'}), (6, {'lhs': '$r2.0', 'rhs': '$const4.1', 'res': '$6compare_op.2'}), (8, {'pred': '$6compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={10: (), 48: ()})
DEBUG 2022-02-14 16:38:01,726 block_infos State(pc_initial=10 nstack_initial=0):
AdaptBlockInfo(insts=((10, {'res': '$r10.0'}), (12, {'res': '$const12.1'}), (14, {'lhs': '$r10.0', 'rhs': '$const12.1', 'res': '$14compare_op.2'}), (16, {'pred': '$14compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={18: (), 32: ()})
DEBUG 2022-02-14 16:38:01,726 block_infos State(pc_initial=18 nstack_initial=0):
AdaptBlockInfo(insts=((18, {'res': '$18load_global.0'}), (20, {'func': '$18load_global.0', 'args': [], 'res': '$20call_function.1'}), (24, {'res': '$const24.2'}), (26, {'pred': '$const24.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={28: (), 32: ()})
DEBUG 2022-02-14 16:38:01,726 block_infos State(pc_initial=28 nstack_initial=0):
AdaptBlockInfo(insts=((28, {'res': '$assertion_error28.0'}), (30, {'exc': '$assertion_error28.0'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG 2022-02-14 16:38:01,726 block_infos State(pc_initial=32 nstack_initial=0):
AdaptBlockInfo(insts=((32, {'res': '$r32.0'}), (34, {'res': '$const34.1'}), (36, {'lhs': '$r32.0', 'rhs': '$const34.1', 'res': '$36compare_op.2'}), (38, {'pred': '$36compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={40: (), 48: ()})
DEBUG 2022-02-14 16:38:01,726 block_infos State(pc_initial=40 nstack_initial=0):
AdaptBlockInfo(insts=((40, {'res': '$40load_global.0'}), (42, {'res': '$const42.1'}), (44, {'func': '$40load_global.0', 'args': ['$const42.1'], 'res': '$44call_function.2'}), (46, {'exc': '$44call_function.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG 2022-02-14 16:38:01,726 block_infos State(pc_initial=48 nstack_initial=0):
AdaptBlockInfo(insts=((48, {'res': '$const48.0'}), (50, {'retval': '$const48.0', 'castval': '$50return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG 2022-02-14 16:38:01,727 label 0:
    r = arg(0, name=r)                       ['r']
    $const4.1 = const(int, 0)                ['$const4.1']
    $6compare_op.2 = r != $const4.1          ['$6compare_op.2', '$const4.1', 'r']
    bool8 = global(bool: <class 'bool'>)     ['bool8']
    $8pred = call bool8($6compare_op.2, func=bool8, args=(Var($6compare_op.2, linalg.py:874),), kws=(), vararg=None, target=None) ['$6compare_op.2', '$8pred', 'bool8']
    branch $8pred, 10, 48                    ['$8pred']
label 10:
    $const12.1 = const(int, 0)               ['$const12.1']
    $14compare_op.2 = r < $const12.1         ['$14compare_op.2', '$const12.1', 'r']
    bool16 = global(bool: <class 'bool'>)    ['bool16']
    $16pred = call bool16($14compare_op.2, func=bool16, args=(Var($14compare_op.2, linalg.py:875),), kws=(), vararg=None, target=None) ['$14compare_op.2', '$16pred', 'bool16']
    branch $16pred, 18, 32                   ['$16pred']
label 18:
    $18load_global.0 = global(fatal_error_func: ExternalFunction(numba_fatal_error)) ['$18load_global.0']
    $20call_function.1 = call $18load_global.0(func=$18load_global.0, args=[], kws=(), vararg=None, target=None) ['$18load_global.0', '$20call_function.1']
    $const24.2 = const(int, 0)               ['$const24.2']
    bool26 = global(bool: <class 'bool'>)    ['bool26']
    $26pred = call bool26($const24.2, func=bool26, args=(Var($const24.2, linalg.py:877),), kws=(), vararg=None, target=None) ['$26pred', '$const24.2', 'bool26']
    branch $26pred, 32, 28                   ['$26pred']
label 28:
    $assertion_error28.0 = global(AssertionError: <class 'AssertionError'>) ['$assertion_error28.0']
    raise $assertion_error28.0               ['$assertion_error28.0']
label 32:
    $const34.1 = const(int, 0)               ['$const34.1']
    $36compare_op.2 = r > $const34.1         ['$36compare_op.2', '$const34.1', 'r']
    bool38 = global(bool: <class 'bool'>)    ['bool38']
    $38pred = call bool38($36compare_op.2, func=bool38, args=(Var($36compare_op.2, linalg.py:878),), kws=(), vararg=None, target=None) ['$36compare_op.2', '$38pred', 'bool38']
    branch $38pred, 40, 48                   ['$38pred']
label 40:
    $40load_global.0 = global(ValueError: <class 'ValueError'>) ['$40load_global.0']
    $const42.1 = const(str, Internal algorithm failed to converge.) ['$const42.1']
    $44call_function.2 = call $40load_global.0($const42.1, func=$40load_global.0, args=[Var($const42.1, linalg.py:879)], kws=(), vararg=None, target=None) ['$40load_global.0', '$44call_function.2', '$const42.1']
    raise $44call_function.2                 ['$44call_function.2']
label 48:
    $const48.0 = const(NoneType, None)       ['$const48.0']
    $50return_value.1 = cast(value=$const48.0) ['$50return_value.1', '$const48.0']
    return $50return_value.1                 ['$50return_value.1']

DEBUG 2022-02-14 16:38:01,730 ==== SSA block analysis pass on 0
DEBUG 2022-02-14 16:38:01,730 Running <numba.core.ssa._GatherDefsHandler object at 0x7fa04691a100>
DEBUG 2022-02-14 16:38:01,730 on stmt: r = arg(0, name=r)
DEBUG 2022-02-14 16:38:01,731 on stmt: $const4.1 = const(int, 0)
DEBUG 2022-02-14 16:38:01,731 on stmt: $6compare_op.2 = r != $const4.1
DEBUG 2022-02-14 16:38:01,731 on stmt: bool8 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:38:01,731 on stmt: $8pred = call bool8($6compare_op.2, func=bool8, args=(Var($6compare_op.2, linalg.py:874),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:01,731 on stmt: branch $8pred, 10, 48
DEBUG 2022-02-14 16:38:01,731 ==== SSA block analysis pass on 10
DEBUG 2022-02-14 16:38:01,731 Running <numba.core.ssa._GatherDefsHandler object at 0x7fa04691a100>
DEBUG 2022-02-14 16:38:01,731 on stmt: $const12.1 = const(int, 0)
DEBUG 2022-02-14 16:38:01,731 on stmt: $14compare_op.2 = r < $const12.1
DEBUG 2022-02-14 16:38:01,731 on stmt: bool16 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:38:01,731 on stmt: $16pred = call bool16($14compare_op.2, func=bool16, args=(Var($14compare_op.2, linalg.py:875),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:01,731 on stmt: branch $16pred, 18, 32
DEBUG 2022-02-14 16:38:01,731 ==== SSA block analysis pass on 18
DEBUG 2022-02-14 16:38:01,731 Running <numba.core.ssa._GatherDefsHandler object at 0x7fa04691a100>
DEBUG 2022-02-14 16:38:01,731 on stmt: $18load_global.0 = global(fatal_error_func: ExternalFunction(numba_fatal_error))
DEBUG 2022-02-14 16:38:01,731 on stmt: $20call_function.1 = call $18load_global.0(func=$18load_global.0, args=[], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:01,731 on stmt: $const24.2 = const(int, 0)
DEBUG 2022-02-14 16:38:01,731 on stmt: bool26 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:38:01,731 on stmt: $26pred = call bool26($const24.2, func=bool26, args=(Var($const24.2, linalg.py:877),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:01,731 on stmt: jump 28
DEBUG 2022-02-14 16:38:01,731 ==== SSA block analysis pass on 28
DEBUG 2022-02-14 16:38:01,731 Running <numba.core.ssa._GatherDefsHandler object at 0x7fa04691a100>
DEBUG 2022-02-14 16:38:01,731 on stmt: $assertion_error28.0 = global(AssertionError: <class 'AssertionError'>)
DEBUG 2022-02-14 16:38:01,731 on stmt: <static> raise <class 'AssertionError'>
DEBUG 2022-02-14 16:38:01,731 ==== SSA block analysis pass on 32
DEBUG 2022-02-14 16:38:01,731 Running <numba.core.ssa._GatherDefsHandler object at 0x7fa04691a100>
DEBUG 2022-02-14 16:38:01,732 on stmt: $const34.1 = const(int, 0)
DEBUG 2022-02-14 16:38:01,732 on stmt: $36compare_op.2 = r > $const34.1
DEBUG 2022-02-14 16:38:01,732 on stmt: bool38 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:38:01,732 on stmt: $38pred = call bool38($36compare_op.2, func=bool38, args=(Var($36compare_op.2, linalg.py:878),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:01,732 on stmt: branch $38pred, 40, 48
DEBUG 2022-02-14 16:38:01,732 ==== SSA block analysis pass on 40
DEBUG 2022-02-14 16:38:01,732 Running <numba.core.ssa._GatherDefsHandler object at 0x7fa04691a100>
DEBUG 2022-02-14 16:38:01,732 on stmt: $40load_global.0 = global(ValueError: <class 'ValueError'>)
DEBUG 2022-02-14 16:38:01,732 on stmt: $const42.1 = const(str, Internal algorithm failed to converge.)
DEBUG 2022-02-14 16:38:01,732 on stmt: $44call_function.2 = call $40load_global.0($const42.1, func=$40load_global.0, args=[Var($const42.1, linalg.py:879)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:01,732 on stmt: <static> raise <class 'ValueError'>('Internal algorithm failed to converge.')
DEBUG 2022-02-14 16:38:01,732 ==== SSA block analysis pass on 48
DEBUG 2022-02-14 16:38:01,732 Running <numba.core.ssa._GatherDefsHandler object at 0x7fa04691a100>
DEBUG 2022-02-14 16:38:01,732 on stmt: $const48.0 = const(NoneType, None)
DEBUG 2022-02-14 16:38:01,732 on stmt: $50return_value.1 = cast(value=$const48.0)
DEBUG 2022-02-14 16:38:01,732 on stmt: return $50return_value.1
DEBUG 2022-02-14 16:38:01,732 defs defaultdict(<class 'list'>,
            {'$14compare_op.2': [<numba.core.ir.Assign object at 0x7fa046915640>],
             '$16pred': [<numba.core.ir.Assign object at 0x7fa046915e20>],
             '$18load_global.0': [<numba.core.ir.Assign object at 0x7fa046915be0>],
             '$20call_function.1': [<numba.core.ir.Assign object at 0x7fa046915a60>],
             '$26pred': [<numba.core.ir.Assign object at 0x7fa0469aba30>],
             '$36compare_op.2': [<numba.core.ir.Assign object at 0x7fa046917760>],
             '$38pred': [<numba.core.ir.Assign object at 0x7fa0469170a0>],
             '$40load_global.0': [<numba.core.ir.Assign object at 0x7fa04691aeb0>],
             '$44call_function.2': [<numba.core.ir.Assign object at 0x7fa046994e50>],
             '$50return_value.1': [<numba.core.ir.Assign object at 0x7fa046994df0>],
             '$6compare_op.2': [<numba.core.ir.Assign object at 0x7fa04690e160>],
             '$8pred': [<numba.core.ir.Assign object at 0x7fa04690e1c0>],
             '$assertion_error28.0': [<numba.core.ir.Assign object at 0x7fa046a1a6d0>],
             '$const12.1': [<numba.core.ir.Assign object at 0x7fa046915160>],
             '$const24.2': [<numba.core.ir.Assign object at 0x7fa046915f70>],
             '$const34.1': [<numba.core.ir.Assign object at 0x7fa046917e20>],
             '$const4.1': [<numba.core.ir.Assign object at 0x7fa046917f70>],
             '$const42.1': [<numba.core.ir.Assign object at 0x7fa046994cd0>],
             '$const48.0': [<numba.core.ir.Assign object at 0x7fa046994820>],
             'bool16': [<numba.core.ir.Assign object at 0x7fa046915a00>],
             'bool26': [<numba.core.ir.Assign object at 0x7fa046915490>],
             'bool38': [<numba.core.ir.Assign object at 0x7fa046917100>],
             'bool8': [<numba.core.ir.Assign object at 0x7fa04690e6d0>],
             'r': [<numba.core.ir.Assign object at 0x7fa046917550>]})
DEBUG 2022-02-14 16:38:01,732 SSA violators set()
DEBUG 2022-02-14 16:38:01,769 bytecode dump:
>          0	NOP(arg=None, lineno=829)
           2	LOAD_FAST(arg=0, lineno=829)
           4	LOAD_CONST(arg=1, lineno=829)
           6	BINARY_SUBSCR(arg=None, lineno=829)
           8	RETURN_VALUE(arg=None, lineno=829)
DEBUG 2022-02-14 16:38:01,769 pending: deque([State(pc_initial=0 nstack_initial=0)])
DEBUG 2022-02-14 16:38:01,770 stack: []
DEBUG 2022-02-14 16:38:01,770 dispatch pc=0, inst=NOP(arg=None, lineno=829)
DEBUG 2022-02-14 16:38:01,770 stack []
DEBUG 2022-02-14 16:38:01,770 dispatch pc=2, inst=LOAD_FAST(arg=0, lineno=829)
DEBUG 2022-02-14 16:38:01,770 stack []
DEBUG 2022-02-14 16:38:01,770 dispatch pc=4, inst=LOAD_CONST(arg=1, lineno=829)
DEBUG 2022-02-14 16:38:01,770 stack ['$a2.0']
DEBUG 2022-02-14 16:38:01,770 dispatch pc=6, inst=BINARY_SUBSCR(arg=None, lineno=829)
DEBUG 2022-02-14 16:38:01,770 stack ['$a2.0', '$const4.1']
DEBUG 2022-02-14 16:38:01,770 dispatch pc=8, inst=RETURN_VALUE(arg=None, lineno=829)
DEBUG 2022-02-14 16:38:01,770 stack ['$6binary_subscr.2']
DEBUG 2022-02-14 16:38:01,770 end state. edges=[]
DEBUG 2022-02-14 16:38:01,770 -------------------------Prune PHIs-------------------------
DEBUG 2022-02-14 16:38:01,770 Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
DEBUG 2022-02-14 16:38:01,771 defmap: {}
DEBUG 2022-02-14 16:38:01,771 phismap: defaultdict(<class 'set'>, {})
DEBUG 2022-02-14 16:38:01,771 changing phismap: defaultdict(<class 'set'>, {})
DEBUG 2022-02-14 16:38:01,771 keep phismap: {}
DEBUG 2022-02-14 16:38:01,771 new_out: defaultdict(<class 'dict'>, {})
DEBUG 2022-02-14 16:38:01,771 ----------------------DONE Prune PHIs-----------------------
DEBUG 2022-02-14 16:38:01,771 block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$a2.0'}), (4, {'res': '$const4.1'}), (6, {'index': '$const4.1', 'target': '$a2.0', 'res': '$6binary_subscr.2'}), (8, {'retval': '$6binary_subscr.2', 'castval': '$8return_value.3'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG 2022-02-14 16:38:01,771 label 0:
    a = arg(0, name=a)                       ['a']
    $const4.1 = const(int, 0)                ['$const4.1']
    $6binary_subscr.2 = getitem(value=a, index=$const4.1, fn=<built-in function getitem>) ['$6binary_subscr.2', '$const4.1', 'a']
    $8return_value.3 = cast(value=$6binary_subscr.2) ['$6binary_subscr.2', '$8return_value.3']
    return $8return_value.3                  ['$8return_value.3']

DEBUG 2022-02-14 16:38:01,772 ==== SSA block analysis pass on 0
DEBUG 2022-02-14 16:38:01,773 Running <numba.core.ssa._GatherDefsHandler object at 0x7fa046917130>
DEBUG 2022-02-14 16:38:01,773 on stmt: a = arg(0, name=a)
DEBUG 2022-02-14 16:38:01,773 on stmt: $const4.1 = const(int, 0)
DEBUG 2022-02-14 16:38:01,773 on stmt: $6binary_subscr.2 = static_getitem(value=a, index=0, index_var=$const4.1, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:01,773 on stmt: $8return_value.3 = cast(value=$6binary_subscr.2)
DEBUG 2022-02-14 16:38:01,773 on stmt: return $8return_value.3
DEBUG 2022-02-14 16:38:01,773 defs defaultdict(<class 'list'>,
            {'$6binary_subscr.2': [<numba.core.ir.Assign object at 0x7fa046870190>],
             '$8return_value.3': [<numba.core.ir.Assign object at 0x7fa0468819a0>],
             '$const4.1': [<numba.core.ir.Assign object at 0x7fa0469344f0>],
             'a': [<numba.core.ir.Assign object at 0x7fa0469343d0>]})
DEBUG 2022-02-14 16:38:01,773 SSA violators set()
DEBUG 2022-02-14 16:38:02,109 bytecode dump:
>          0	NOP(arg=None, lineno=137)
           2	LOAD_FAST(arg=0, lineno=137)
           4	LOAD_METHOD(arg=0, lineno=137)
           6	CALL_METHOD(arg=0, lineno=137)
           8	STORE_FAST(arg=5, lineno=137)
          10	LOAD_CONST(arg=1, lineno=140)
          12	STORE_FAST(arg=6, lineno=140)
          14	LOAD_GLOBAL(arg=1, lineno=141)
          16	LOAD_ATTR(arg=2, lineno=141)
          18	LOAD_CONST(arg=2, lineno=141)
          20	LOAD_FAST(arg=4, lineno=141)
          22	LOAD_CONST(arg=2, lineno=141)
          24	BINARY_FLOOR_DIVIDE(arg=None, lineno=141)
          26	LOAD_CONST(arg=3, lineno=141)
          28	BINARY_ADD(arg=None, lineno=141)
          30	BUILD_TUPLE(arg=2, lineno=141)
          32	LOAD_GLOBAL(arg=1, lineno=141)
          34	LOAD_ATTR(arg=3, lineno=141)
          36	LOAD_CONST(arg=4, lineno=141)
          38	CALL_FUNCTION_KW(arg=2, lineno=141)
          40	STORE_FAST(arg=7, lineno=141)
          42	LOAD_CONST(arg=3, lineno=142)
          44	LOAD_FAST(arg=7, lineno=142)
          46	LOAD_CONST(arg=5, lineno=142)
          48	STORE_SUBSCR(arg=None, lineno=142)
          50	LOAD_GLOBAL(arg=4, lineno=143)
          52	LOAD_CONST(arg=3, lineno=143)
          54	LOAD_FAST(arg=4, lineno=143)
          56	LOAD_CONST(arg=2, lineno=143)
          58	BINARY_FLOOR_DIVIDE(arg=None, lineno=143)
          60	LOAD_CONST(arg=3, lineno=143)
          62	BINARY_ADD(arg=None, lineno=143)
          64	CALL_FUNCTION(arg=2, lineno=143)
          66	GET_ITER(arg=None, lineno=143)
>         68	FOR_ITER(arg=216, lineno=143)
          70	STORE_FAST(arg=8, lineno=143)
          72	LOAD_FAST(arg=5, lineno=144)
          74	LOAD_METHOD(arg=5, lineno=144)
          76	CALL_METHOD(arg=0, lineno=144)
          78	LOAD_CONST(arg=2, lineno=144)
          80	LOAD_FAST(arg=8, lineno=144)
          82	BINARY_MULTIPLY(arg=None, lineno=144)
          84	BINARY_TRUE_DIVIDE(arg=None, lineno=144)
          86	LOAD_FAST(arg=2, lineno=144)
          88	LOAD_FAST(arg=3, lineno=144)
          90	BINARY_MATRIX_MULTIPLY(arg=None, lineno=144)
          92	LOAD_CONST(arg=2, lineno=144)
          94	BINARY_TRUE_DIVIDE(arg=None, lineno=144)
          96	BINARY_ADD(arg=None, lineno=144)
          98	STORE_FAST(arg=9, lineno=144)
         100	LOAD_FAST(arg=5, lineno=145)
         102	LOAD_FAST(arg=0, lineno=145)
         104	INPLACE_MULTIPLY(arg=None, lineno=145)
         106	STORE_FAST(arg=5, lineno=145)
         108	LOAD_FAST(arg=2, lineno=146)
         110	LOAD_FAST(arg=1, lineno=146)
         112	BINARY_MATRIX_MULTIPLY(arg=None, lineno=146)
         114	STORE_FAST(arg=2, lineno=146)
         116	LOAD_CONST(arg=3, lineno=147)
         118	STORE_FAST(arg=10, lineno=147)
         120	LOAD_CONST(arg=3, lineno=148)
         122	LOAD_FAST(arg=6, lineno=148)
         124	BINARY_SUBTRACT(arg=None, lineno=148)
         126	STORE_FAST(arg=6, lineno=148)
         128	LOAD_FAST(arg=7, lineno=149)
         130	LOAD_CONST(arg=3, lineno=149)
         132	LOAD_FAST(arg=6, lineno=149)
         134	BINARY_SUBTRACT(arg=None, lineno=149)
         136	LOAD_CONST(arg=6, lineno=149)
         138	LOAD_CONST(arg=6, lineno=149)
         140	BUILD_SLICE(arg=2, lineno=149)
         142	BUILD_TUPLE(arg=2, lineno=149)
         144	BINARY_SUBSCR(arg=None, lineno=149)
         146	LOAD_FAST(arg=7, lineno=149)
         148	LOAD_FAST(arg=6, lineno=149)
         150	LOAD_CONST(arg=6, lineno=149)
         152	LOAD_CONST(arg=6, lineno=149)
         154	BUILD_SLICE(arg=2, lineno=149)
         156	BUILD_TUPLE(arg=2, lineno=149)
         158	STORE_SUBSCR(arg=None, lineno=149)
         160	LOAD_GLOBAL(arg=4, lineno=150)
         162	LOAD_CONST(arg=3, lineno=150)
         164	LOAD_FAST(arg=4, lineno=150)
         166	LOAD_CONST(arg=2, lineno=150)
         168	LOAD_FAST(arg=8, lineno=150)
         170	BINARY_MULTIPLY(arg=None, lineno=150)
         172	BINARY_FLOOR_DIVIDE(arg=None, lineno=150)
         174	LOAD_CONST(arg=3, lineno=150)
         176	BINARY_ADD(arg=None, lineno=150)
         178	CALL_FUNCTION(arg=2, lineno=150)
         180	GET_ITER(arg=None, lineno=150)
>        182	FOR_ITER(arg=100, lineno=150)
         184	STORE_FAST(arg=11, lineno=150)
         186	LOAD_FAST(arg=10, lineno=151)
         188	LOAD_FAST(arg=9, lineno=151)
         190	LOAD_FAST(arg=11, lineno=151)
         192	BINARY_TRUE_DIVIDE(arg=None, lineno=151)
         194	INPLACE_MULTIPLY(arg=None, lineno=151)
         196	STORE_FAST(arg=10, lineno=151)
         198	LOAD_GLOBAL(arg=4, lineno=152)
         200	LOAD_FAST(arg=8, lineno=152)
         202	LOAD_FAST(arg=11, lineno=152)
         204	BINARY_MULTIPLY(arg=None, lineno=152)
         206	LOAD_CONST(arg=3, lineno=152)
         208	BINARY_ADD(arg=None, lineno=152)
         210	LOAD_FAST(arg=4, lineno=152)
         212	LOAD_CONST(arg=2, lineno=152)
         214	BINARY_FLOOR_DIVIDE(arg=None, lineno=152)
         216	LOAD_CONST(arg=2, lineno=152)
         218	BINARY_ADD(arg=None, lineno=152)
         220	CALL_FUNCTION(arg=2, lineno=152)
         222	GET_ITER(arg=None, lineno=152)
>        224	FOR_ITER(arg=56, lineno=152)
         226	STORE_FAST(arg=12, lineno=152)
         228	LOAD_FAST(arg=7, lineno=153)
         230	LOAD_FAST(arg=6, lineno=153)
         232	LOAD_FAST(arg=12, lineno=153)
         234	LOAD_CONST(arg=3, lineno=153)
         236	BINARY_SUBTRACT(arg=None, lineno=153)
         238	BUILD_TUPLE(arg=2, lineno=153)
         240	DUP_TOP_TWO(arg=None, lineno=153)
         242	BINARY_SUBSCR(arg=None, lineno=153)
         244	LOAD_FAST(arg=7, lineno=153)
         246	LOAD_CONST(arg=3, lineno=153)
         248	LOAD_FAST(arg=6, lineno=153)
         250	BINARY_SUBTRACT(arg=None, lineno=153)
         252	LOAD_FAST(arg=12, lineno=153)
         254	LOAD_FAST(arg=8, lineno=153)
         256	LOAD_FAST(arg=11, lineno=153)
         258	BINARY_MULTIPLY(arg=None, lineno=153)
         260	BINARY_SUBTRACT(arg=None, lineno=153)
         262	LOAD_CONST(arg=3, lineno=153)
         264	BINARY_SUBTRACT(arg=None, lineno=153)
         266	BUILD_TUPLE(arg=2, lineno=153)
         268	BINARY_SUBSCR(arg=None, lineno=153)
         270	LOAD_FAST(arg=10, lineno=153)
         272	BINARY_MULTIPLY(arg=None, lineno=153)
         274	INPLACE_ADD(arg=None, lineno=153)
         276	ROT_THREE(arg=None, lineno=153)
         278	STORE_SUBSCR(arg=None, lineno=153)
         280	JUMP_ABSOLUTE(arg=224, lineno=153)
>        282	JUMP_ABSOLUTE(arg=182, lineno=153)
>        284	JUMP_ABSOLUTE(arg=68, lineno=153)
>        286	LOAD_FAST(arg=7, lineno=154)
         288	LOAD_FAST(arg=6, lineno=154)
         290	LOAD_CONST(arg=6, lineno=154)
         292	LOAD_CONST(arg=6, lineno=154)
         294	BUILD_SLICE(arg=2, lineno=154)
         296	BUILD_TUPLE(arg=2, lineno=154)
         298	BINARY_SUBSCR(arg=None, lineno=154)
         300	RETURN_VALUE(arg=None, lineno=154)
DEBUG 2022-02-14 16:38:02,109 pending: deque([State(pc_initial=0 nstack_initial=0)])
DEBUG 2022-02-14 16:38:02,109 stack: []
DEBUG 2022-02-14 16:38:02,109 dispatch pc=0, inst=NOP(arg=None, lineno=137)
DEBUG 2022-02-14 16:38:02,109 stack []
DEBUG 2022-02-14 16:38:02,109 dispatch pc=2, inst=LOAD_FAST(arg=0, lineno=137)
DEBUG 2022-02-14 16:38:02,109 stack []
DEBUG 2022-02-14 16:38:02,109 dispatch pc=4, inst=LOAD_METHOD(arg=0, lineno=137)
DEBUG 2022-02-14 16:38:02,109 stack ['$E2.0']
DEBUG 2022-02-14 16:38:02,109 dispatch pc=6, inst=CALL_METHOD(arg=0, lineno=137)
DEBUG 2022-02-14 16:38:02,109 stack ['$4load_method.1']
DEBUG 2022-02-14 16:38:02,109 dispatch pc=8, inst=STORE_FAST(arg=5, lineno=137)
DEBUG 2022-02-14 16:38:02,109 stack ['$6call_method.2']
DEBUG 2022-02-14 16:38:02,109 dispatch pc=10, inst=LOAD_CONST(arg=1, lineno=140)
DEBUG 2022-02-14 16:38:02,109 stack []
DEBUG 2022-02-14 16:38:02,109 dispatch pc=12, inst=STORE_FAST(arg=6, lineno=140)
DEBUG 2022-02-14 16:38:02,109 stack ['$const10.3']
DEBUG 2022-02-14 16:38:02,110 dispatch pc=14, inst=LOAD_GLOBAL(arg=1, lineno=141)
DEBUG 2022-02-14 16:38:02,110 stack []
DEBUG 2022-02-14 16:38:02,110 dispatch pc=16, inst=LOAD_ATTR(arg=2, lineno=141)
DEBUG 2022-02-14 16:38:02,110 stack ['$14load_global.4']
DEBUG 2022-02-14 16:38:02,110 dispatch pc=18, inst=LOAD_CONST(arg=2, lineno=141)
DEBUG 2022-02-14 16:38:02,110 stack ['$16load_attr.5']
DEBUG 2022-02-14 16:38:02,110 dispatch pc=20, inst=LOAD_FAST(arg=4, lineno=141)
DEBUG 2022-02-14 16:38:02,110 stack ['$16load_attr.5', '$const18.6']
DEBUG 2022-02-14 16:38:02,110 dispatch pc=22, inst=LOAD_CONST(arg=2, lineno=141)
DEBUG 2022-02-14 16:38:02,110 stack ['$16load_attr.5', '$const18.6', '$n20.7']
DEBUG 2022-02-14 16:38:02,110 dispatch pc=24, inst=BINARY_FLOOR_DIVIDE(arg=None, lineno=141)
DEBUG 2022-02-14 16:38:02,110 stack ['$16load_attr.5', '$const18.6', '$n20.7', '$const22.8']
DEBUG 2022-02-14 16:38:02,110 dispatch pc=26, inst=LOAD_CONST(arg=3, lineno=141)
DEBUG 2022-02-14 16:38:02,110 stack ['$16load_attr.5', '$const18.6', '$24binary_floor_divide.9']
DEBUG 2022-02-14 16:38:02,110 dispatch pc=28, inst=BINARY_ADD(arg=None, lineno=141)
DEBUG 2022-02-14 16:38:02,110 stack ['$16load_attr.5', '$const18.6', '$24binary_floor_divide.9', '$const26.10']
DEBUG 2022-02-14 16:38:02,110 dispatch pc=30, inst=BUILD_TUPLE(arg=2, lineno=141)
DEBUG 2022-02-14 16:38:02,110 stack ['$16load_attr.5', '$const18.6', '$28binary_add.11']
DEBUG 2022-02-14 16:38:02,110 dispatch pc=32, inst=LOAD_GLOBAL(arg=1, lineno=141)
DEBUG 2022-02-14 16:38:02,110 stack ['$16load_attr.5', '$30build_tuple.12']
DEBUG 2022-02-14 16:38:02,110 dispatch pc=34, inst=LOAD_ATTR(arg=3, lineno=141)
DEBUG 2022-02-14 16:38:02,110 stack ['$16load_attr.5', '$30build_tuple.12', '$32load_global.13']
DEBUG 2022-02-14 16:38:02,110 dispatch pc=36, inst=LOAD_CONST(arg=4, lineno=141)
DEBUG 2022-02-14 16:38:02,110 stack ['$16load_attr.5', '$30build_tuple.12', '$34load_attr.14']
DEBUG 2022-02-14 16:38:02,110 dispatch pc=38, inst=CALL_FUNCTION_KW(arg=2, lineno=141)
DEBUG 2022-02-14 16:38:02,110 stack ['$16load_attr.5', '$30build_tuple.12', '$34load_attr.14', '$const36.15']
DEBUG 2022-02-14 16:38:02,111 dispatch pc=40, inst=STORE_FAST(arg=7, lineno=141)
DEBUG 2022-02-14 16:38:02,111 stack ['$38call_function_kw.16']
DEBUG 2022-02-14 16:38:02,111 dispatch pc=42, inst=LOAD_CONST(arg=3, lineno=142)
DEBUG 2022-02-14 16:38:02,111 stack []
DEBUG 2022-02-14 16:38:02,111 dispatch pc=44, inst=LOAD_FAST(arg=7, lineno=142)
DEBUG 2022-02-14 16:38:02,111 stack ['$const42.17']
DEBUG 2022-02-14 16:38:02,111 dispatch pc=46, inst=LOAD_CONST(arg=5, lineno=142)
DEBUG 2022-02-14 16:38:02,111 stack ['$const42.17', '$comb44.18']
DEBUG 2022-02-14 16:38:02,111 dispatch pc=48, inst=STORE_SUBSCR(arg=None, lineno=142)
DEBUG 2022-02-14 16:38:02,111 stack ['$const42.17', '$comb44.18', '$const46.19']
DEBUG 2022-02-14 16:38:02,111 dispatch pc=50, inst=LOAD_GLOBAL(arg=4, lineno=143)
DEBUG 2022-02-14 16:38:02,111 stack []
DEBUG 2022-02-14 16:38:02,111 dispatch pc=52, inst=LOAD_CONST(arg=3, lineno=143)
DEBUG 2022-02-14 16:38:02,111 stack ['$50load_global.20']
DEBUG 2022-02-14 16:38:02,111 dispatch pc=54, inst=LOAD_FAST(arg=4, lineno=143)
DEBUG 2022-02-14 16:38:02,111 stack ['$50load_global.20', '$const52.21']
DEBUG 2022-02-14 16:38:02,111 dispatch pc=56, inst=LOAD_CONST(arg=2, lineno=143)
DEBUG 2022-02-14 16:38:02,111 stack ['$50load_global.20', '$const52.21', '$n54.22']
DEBUG 2022-02-14 16:38:02,111 dispatch pc=58, inst=BINARY_FLOOR_DIVIDE(arg=None, lineno=143)
DEBUG 2022-02-14 16:38:02,111 stack ['$50load_global.20', '$const52.21', '$n54.22', '$const56.23']
DEBUG 2022-02-14 16:38:02,111 dispatch pc=60, inst=LOAD_CONST(arg=3, lineno=143)
DEBUG 2022-02-14 16:38:02,111 stack ['$50load_global.20', '$const52.21', '$58binary_floor_divide.24']
DEBUG 2022-02-14 16:38:02,111 dispatch pc=62, inst=BINARY_ADD(arg=None, lineno=143)
DEBUG 2022-02-14 16:38:02,111 stack ['$50load_global.20', '$const52.21', '$58binary_floor_divide.24', '$const60.25']
DEBUG 2022-02-14 16:38:02,111 dispatch pc=64, inst=CALL_FUNCTION(arg=2, lineno=143)
DEBUG 2022-02-14 16:38:02,111 stack ['$50load_global.20', '$const52.21', '$62binary_add.26']
DEBUG 2022-02-14 16:38:02,112 dispatch pc=66, inst=GET_ITER(arg=None, lineno=143)
DEBUG 2022-02-14 16:38:02,112 stack ['$64call_function.27']
DEBUG 2022-02-14 16:38:02,112 end state. edges=[Edge(pc=68, stack=('$66get_iter.28',), blockstack=(), npush=0)]
DEBUG 2022-02-14 16:38:02,112 pending: deque([State(pc_initial=68 nstack_initial=1)])
DEBUG 2022-02-14 16:38:02,112 stack: ['$phi68.0']
DEBUG 2022-02-14 16:38:02,112 dispatch pc=68, inst=FOR_ITER(arg=216, lineno=143)
DEBUG 2022-02-14 16:38:02,112 stack ['$phi68.0']
DEBUG 2022-02-14 16:38:02,112 end state. edges=[Edge(pc=286, stack=(), blockstack=(), npush=0), Edge(pc=70, stack=('$phi68.0', '$68for_iter.2'), blockstack=(), npush=0)]
DEBUG 2022-02-14 16:38:02,112 pending: deque([State(pc_initial=286 nstack_initial=0), State(pc_initial=70 nstack_initial=2)])
DEBUG 2022-02-14 16:38:02,112 stack: []
DEBUG 2022-02-14 16:38:02,112 dispatch pc=286, inst=LOAD_FAST(arg=7, lineno=154)
DEBUG 2022-02-14 16:38:02,112 stack []
DEBUG 2022-02-14 16:38:02,112 dispatch pc=288, inst=LOAD_FAST(arg=6, lineno=154)
DEBUG 2022-02-14 16:38:02,112 stack ['$comb286.0']
DEBUG 2022-02-14 16:38:02,112 dispatch pc=290, inst=LOAD_CONST(arg=6, lineno=154)
DEBUG 2022-02-14 16:38:02,112 stack ['$comb286.0', '$count288.1']
DEBUG 2022-02-14 16:38:02,112 dispatch pc=292, inst=LOAD_CONST(arg=6, lineno=154)
DEBUG 2022-02-14 16:38:02,112 stack ['$comb286.0', '$count288.1', '$const290.2']
DEBUG 2022-02-14 16:38:02,112 dispatch pc=294, inst=BUILD_SLICE(arg=2, lineno=154)
DEBUG 2022-02-14 16:38:02,112 stack ['$comb286.0', '$count288.1', '$const290.2', '$const292.3']
DEBUG 2022-02-14 16:38:02,112 dispatch pc=296, inst=BUILD_TUPLE(arg=2, lineno=154)
DEBUG 2022-02-14 16:38:02,112 stack ['$comb286.0', '$count288.1', '$294build_slice.5']
DEBUG 2022-02-14 16:38:02,112 dispatch pc=298, inst=BINARY_SUBSCR(arg=None, lineno=154)
DEBUG 2022-02-14 16:38:02,112 stack ['$comb286.0', '$296build_tuple.6']
DEBUG 2022-02-14 16:38:02,113 dispatch pc=300, inst=RETURN_VALUE(arg=None, lineno=154)
DEBUG 2022-02-14 16:38:02,113 stack ['$298binary_subscr.7']
DEBUG 2022-02-14 16:38:02,113 end state. edges=[]
DEBUG 2022-02-14 16:38:02,113 pending: deque([State(pc_initial=70 nstack_initial=2)])
DEBUG 2022-02-14 16:38:02,113 stack: ['$phi70.0', '$phi70.1']
DEBUG 2022-02-14 16:38:02,113 dispatch pc=70, inst=STORE_FAST(arg=8, lineno=143)
DEBUG 2022-02-14 16:38:02,113 stack ['$phi70.0', '$phi70.1']
DEBUG 2022-02-14 16:38:02,113 dispatch pc=72, inst=LOAD_FAST(arg=5, lineno=144)
DEBUG 2022-02-14 16:38:02,113 stack ['$phi70.0']
DEBUG 2022-02-14 16:38:02,113 dispatch pc=74, inst=LOAD_METHOD(arg=5, lineno=144)
DEBUG 2022-02-14 16:38:02,113 stack ['$phi70.0', '$E_k72.2']
DEBUG 2022-02-14 16:38:02,113 dispatch pc=76, inst=CALL_METHOD(arg=0, lineno=144)
DEBUG 2022-02-14 16:38:02,113 stack ['$phi70.0', '$74load_method.3']
DEBUG 2022-02-14 16:38:02,113 dispatch pc=78, inst=LOAD_CONST(arg=2, lineno=144)
DEBUG 2022-02-14 16:38:02,113 stack ['$phi70.0', '$76call_method.4']
DEBUG 2022-02-14 16:38:02,113 dispatch pc=80, inst=LOAD_FAST(arg=8, lineno=144)
DEBUG 2022-02-14 16:38:02,113 stack ['$phi70.0', '$76call_method.4', '$const78.5']
DEBUG 2022-02-14 16:38:02,113 dispatch pc=82, inst=BINARY_MULTIPLY(arg=None, lineno=144)
DEBUG 2022-02-14 16:38:02,113 stack ['$phi70.0', '$76call_method.4', '$const78.5', '$i80.6']
DEBUG 2022-02-14 16:38:02,113 dispatch pc=84, inst=BINARY_TRUE_DIVIDE(arg=None, lineno=144)
DEBUG 2022-02-14 16:38:02,113 stack ['$phi70.0', '$76call_method.4', '$82binary_multiply.7']
DEBUG 2022-02-14 16:38:02,113 dispatch pc=86, inst=LOAD_FAST(arg=2, lineno=144)
DEBUG 2022-02-14 16:38:02,113 stack ['$phi70.0', '$84binary_true_divide.8']
DEBUG 2022-02-14 16:38:02,113 dispatch pc=88, inst=LOAD_FAST(arg=3, lineno=144)
DEBUG 2022-02-14 16:38:02,113 stack ['$phi70.0', '$84binary_true_divide.8', '$XD_S86.9']
DEBUG 2022-02-14 16:38:02,113 dispatch pc=90, inst=BINARY_MATRIX_MULTIPLY(arg=None, lineno=144)
DEBUG 2022-02-14 16:38:02,114 stack ['$phi70.0', '$84binary_true_divide.8', '$XD_S86.9', '$D_S88.10']
DEBUG 2022-02-14 16:38:02,114 dispatch pc=92, inst=LOAD_CONST(arg=2, lineno=144)
DEBUG 2022-02-14 16:38:02,114 stack ['$phi70.0', '$84binary_true_divide.8', '$90binary_matrix_multiply.11']
DEBUG 2022-02-14 16:38:02,114 dispatch pc=94, inst=BINARY_TRUE_DIVIDE(arg=None, lineno=144)
DEBUG 2022-02-14 16:38:02,114 stack ['$phi70.0', '$84binary_true_divide.8', '$90binary_matrix_multiply.11', '$const92.12']
DEBUG 2022-02-14 16:38:02,114 dispatch pc=96, inst=BINARY_ADD(arg=None, lineno=144)
DEBUG 2022-02-14 16:38:02,114 stack ['$phi70.0', '$84binary_true_divide.8', '$94binary_true_divide.13']
DEBUG 2022-02-14 16:38:02,114 dispatch pc=98, inst=STORE_FAST(arg=9, lineno=144)
DEBUG 2022-02-14 16:38:02,114 stack ['$phi70.0', '$96binary_add.14']
DEBUG 2022-02-14 16:38:02,114 dispatch pc=100, inst=LOAD_FAST(arg=5, lineno=145)
DEBUG 2022-02-14 16:38:02,114 stack ['$phi70.0']
DEBUG 2022-02-14 16:38:02,114 dispatch pc=102, inst=LOAD_FAST(arg=0, lineno=145)
DEBUG 2022-02-14 16:38:02,114 stack ['$phi70.0', '$E_k100.15']
DEBUG 2022-02-14 16:38:02,114 dispatch pc=104, inst=INPLACE_MULTIPLY(arg=None, lineno=145)
DEBUG 2022-02-14 16:38:02,114 stack ['$phi70.0', '$E_k100.15', '$E102.16']
DEBUG 2022-02-14 16:38:02,114 dispatch pc=106, inst=STORE_FAST(arg=5, lineno=145)
DEBUG 2022-02-14 16:38:02,114 stack ['$phi70.0', '$104inplace_multiply.17']
DEBUG 2022-02-14 16:38:02,114 dispatch pc=108, inst=LOAD_FAST(arg=2, lineno=146)
DEBUG 2022-02-14 16:38:02,114 stack ['$phi70.0']
DEBUG 2022-02-14 16:38:02,114 dispatch pc=110, inst=LOAD_FAST(arg=1, lineno=146)
DEBUG 2022-02-14 16:38:02,114 stack ['$phi70.0', '$XD_S108.18']
DEBUG 2022-02-14 16:38:02,114 dispatch pc=112, inst=BINARY_MATRIX_MULTIPLY(arg=None, lineno=146)
DEBUG 2022-02-14 16:38:02,114 stack ['$phi70.0', '$XD_S108.18', '$AX_S110.19']
DEBUG 2022-02-14 16:38:02,114 dispatch pc=114, inst=STORE_FAST(arg=2, lineno=146)
DEBUG 2022-02-14 16:38:02,114 stack ['$phi70.0', '$112binary_matrix_multiply.20']
DEBUG 2022-02-14 16:38:02,115 dispatch pc=116, inst=LOAD_CONST(arg=3, lineno=147)
DEBUG 2022-02-14 16:38:02,115 stack ['$phi70.0']
DEBUG 2022-02-14 16:38:02,115 dispatch pc=118, inst=STORE_FAST(arg=10, lineno=147)
DEBUG 2022-02-14 16:38:02,115 stack ['$phi70.0', '$const116.21']
DEBUG 2022-02-14 16:38:02,115 dispatch pc=120, inst=LOAD_CONST(arg=3, lineno=148)
DEBUG 2022-02-14 16:38:02,115 stack ['$phi70.0']
DEBUG 2022-02-14 16:38:02,115 dispatch pc=122, inst=LOAD_FAST(arg=6, lineno=148)
DEBUG 2022-02-14 16:38:02,115 stack ['$phi70.0', '$const120.22']
DEBUG 2022-02-14 16:38:02,115 dispatch pc=124, inst=BINARY_SUBTRACT(arg=None, lineno=148)
DEBUG 2022-02-14 16:38:02,115 stack ['$phi70.0', '$const120.22', '$count122.23']
DEBUG 2022-02-14 16:38:02,115 dispatch pc=126, inst=STORE_FAST(arg=6, lineno=148)
DEBUG 2022-02-14 16:38:02,115 stack ['$phi70.0', '$124binary_subtract.24']
DEBUG 2022-02-14 16:38:02,115 dispatch pc=128, inst=LOAD_FAST(arg=7, lineno=149)
DEBUG 2022-02-14 16:38:02,115 stack ['$phi70.0']
DEBUG 2022-02-14 16:38:02,115 dispatch pc=130, inst=LOAD_CONST(arg=3, lineno=149)
DEBUG 2022-02-14 16:38:02,115 stack ['$phi70.0', '$comb128.25']
DEBUG 2022-02-14 16:38:02,115 dispatch pc=132, inst=LOAD_FAST(arg=6, lineno=149)
DEBUG 2022-02-14 16:38:02,115 stack ['$phi70.0', '$comb128.25', '$const130.26']
DEBUG 2022-02-14 16:38:02,115 dispatch pc=134, inst=BINARY_SUBTRACT(arg=None, lineno=149)
DEBUG 2022-02-14 16:38:02,115 stack ['$phi70.0', '$comb128.25', '$const130.26', '$count132.27']
DEBUG 2022-02-14 16:38:02,115 dispatch pc=136, inst=LOAD_CONST(arg=6, lineno=149)
DEBUG 2022-02-14 16:38:02,115 stack ['$phi70.0', '$comb128.25', '$134binary_subtract.28']
DEBUG 2022-02-14 16:38:02,116 dispatch pc=138, inst=LOAD_CONST(arg=6, lineno=149)
DEBUG 2022-02-14 16:38:02,116 stack ['$phi70.0', '$comb128.25', '$134binary_subtract.28', '$const136.29']
DEBUG 2022-02-14 16:38:02,116 dispatch pc=140, inst=BUILD_SLICE(arg=2, lineno=149)
DEBUG 2022-02-14 16:38:02,116 stack ['$phi70.0', '$comb128.25', '$134binary_subtract.28', '$const136.29', '$const138.30']
DEBUG 2022-02-14 16:38:02,116 dispatch pc=142, inst=BUILD_TUPLE(arg=2, lineno=149)
DEBUG 2022-02-14 16:38:02,116 stack ['$phi70.0', '$comb128.25', '$134binary_subtract.28', '$140build_slice.32']
DEBUG 2022-02-14 16:38:02,116 dispatch pc=144, inst=BINARY_SUBSCR(arg=None, lineno=149)
DEBUG 2022-02-14 16:38:02,116 stack ['$phi70.0', '$comb128.25', '$142build_tuple.33']
DEBUG 2022-02-14 16:38:02,116 dispatch pc=146, inst=LOAD_FAST(arg=7, lineno=149)
DEBUG 2022-02-14 16:38:02,116 stack ['$phi70.0', '$144binary_subscr.34']
DEBUG 2022-02-14 16:38:02,116 dispatch pc=148, inst=LOAD_FAST(arg=6, lineno=149)
DEBUG 2022-02-14 16:38:02,116 stack ['$phi70.0', '$144binary_subscr.34', '$comb146.35']
DEBUG 2022-02-14 16:38:02,116 dispatch pc=150, inst=LOAD_CONST(arg=6, lineno=149)
DEBUG 2022-02-14 16:38:02,116 stack ['$phi70.0', '$144binary_subscr.34', '$comb146.35', '$count148.36']
DEBUG 2022-02-14 16:38:02,116 dispatch pc=152, inst=LOAD_CONST(arg=6, lineno=149)
DEBUG 2022-02-14 16:38:02,116 stack ['$phi70.0', '$144binary_subscr.34', '$comb146.35', '$count148.36', '$const150.37']
DEBUG 2022-02-14 16:38:02,116 dispatch pc=154, inst=BUILD_SLICE(arg=2, lineno=149)
DEBUG 2022-02-14 16:38:02,116 stack ['$phi70.0', '$144binary_subscr.34', '$comb146.35', '$count148.36', '$const150.37', '$const152.38']
DEBUG 2022-02-14 16:38:02,117 dispatch pc=156, inst=BUILD_TUPLE(arg=2, lineno=149)
DEBUG 2022-02-14 16:38:02,117 stack ['$phi70.0', '$144binary_subscr.34', '$comb146.35', '$count148.36', '$154build_slice.40']
DEBUG 2022-02-14 16:38:02,117 dispatch pc=158, inst=STORE_SUBSCR(arg=None, lineno=149)
DEBUG 2022-02-14 16:38:02,117 stack ['$phi70.0', '$144binary_subscr.34', '$comb146.35', '$156build_tuple.41']
DEBUG 2022-02-14 16:38:02,117 dispatch pc=160, inst=LOAD_GLOBAL(arg=4, lineno=150)
DEBUG 2022-02-14 16:38:02,117 stack ['$phi70.0']
DEBUG 2022-02-14 16:38:02,117 dispatch pc=162, inst=LOAD_CONST(arg=3, lineno=150)
DEBUG 2022-02-14 16:38:02,117 stack ['$phi70.0', '$160load_global.42']
DEBUG 2022-02-14 16:38:02,117 dispatch pc=164, inst=LOAD_FAST(arg=4, lineno=150)
DEBUG 2022-02-14 16:38:02,117 stack ['$phi70.0', '$160load_global.42', '$const162.43']
DEBUG 2022-02-14 16:38:02,117 dispatch pc=166, inst=LOAD_CONST(arg=2, lineno=150)
DEBUG 2022-02-14 16:38:02,117 stack ['$phi70.0', '$160load_global.42', '$const162.43', '$n164.44']
DEBUG 2022-02-14 16:38:02,117 dispatch pc=168, inst=LOAD_FAST(arg=8, lineno=150)
DEBUG 2022-02-14 16:38:02,117 stack ['$phi70.0', '$160load_global.42', '$const162.43', '$n164.44', '$const166.45']
DEBUG 2022-02-14 16:38:02,117 dispatch pc=170, inst=BINARY_MULTIPLY(arg=None, lineno=150)
DEBUG 2022-02-14 16:38:02,117 stack ['$phi70.0', '$160load_global.42', '$const162.43', '$n164.44', '$const166.45', '$i168.46']
DEBUG 2022-02-14 16:38:02,117 dispatch pc=172, inst=BINARY_FLOOR_DIVIDE(arg=None, lineno=150)
DEBUG 2022-02-14 16:38:02,117 stack ['$phi70.0', '$160load_global.42', '$const162.43', '$n164.44', '$170binary_multiply.47']
DEBUG 2022-02-14 16:38:02,117 dispatch pc=174, inst=LOAD_CONST(arg=3, lineno=150)
DEBUG 2022-02-14 16:38:02,117 stack ['$phi70.0', '$160load_global.42', '$const162.43', '$172binary_floor_divide.48']
DEBUG 2022-02-14 16:38:02,117 dispatch pc=176, inst=BINARY_ADD(arg=None, lineno=150)
DEBUG 2022-02-14 16:38:02,117 stack ['$phi70.0', '$160load_global.42', '$const162.43', '$172binary_floor_divide.48', '$const174.49']
DEBUG 2022-02-14 16:38:02,117 dispatch pc=178, inst=CALL_FUNCTION(arg=2, lineno=150)
DEBUG 2022-02-14 16:38:02,117 stack ['$phi70.0', '$160load_global.42', '$const162.43', '$176binary_add.50']
DEBUG 2022-02-14 16:38:02,118 dispatch pc=180, inst=GET_ITER(arg=None, lineno=150)
DEBUG 2022-02-14 16:38:02,118 stack ['$phi70.0', '$178call_function.51']
DEBUG 2022-02-14 16:38:02,118 end state. edges=[Edge(pc=182, stack=('$phi70.0', '$180get_iter.52'), blockstack=(), npush=0)]
DEBUG 2022-02-14 16:38:02,118 pending: deque([State(pc_initial=182 nstack_initial=2)])
DEBUG 2022-02-14 16:38:02,118 stack: ['$phi182.0', '$phi182.1']
DEBUG 2022-02-14 16:38:02,118 dispatch pc=182, inst=FOR_ITER(arg=100, lineno=150)
DEBUG 2022-02-14 16:38:02,118 stack ['$phi182.0', '$phi182.1']
DEBUG 2022-02-14 16:38:02,118 end state. edges=[Edge(pc=284, stack=('$phi182.0',), blockstack=(), npush=0), Edge(pc=184, stack=('$phi182.0', '$phi182.1', '$182for_iter.3'), blockstack=(), npush=0)]
DEBUG 2022-02-14 16:38:02,118 pending: deque([State(pc_initial=284 nstack_initial=1), State(pc_initial=184 nstack_initial=3)])
DEBUG 2022-02-14 16:38:02,118 stack: ['$phi284.0']
DEBUG 2022-02-14 16:38:02,118 dispatch pc=284, inst=JUMP_ABSOLUTE(arg=68, lineno=153)
DEBUG 2022-02-14 16:38:02,118 stack ['$phi284.0']
DEBUG 2022-02-14 16:38:02,118 end state. edges=[Edge(pc=68, stack=('$phi284.0',), blockstack=(), npush=0)]
DEBUG 2022-02-14 16:38:02,118 pending: deque([State(pc_initial=184 nstack_initial=3), State(pc_initial=68 nstack_initial=1)])
DEBUG 2022-02-14 16:38:02,118 stack: ['$phi184.0', '$phi184.1', '$phi184.2']
DEBUG 2022-02-14 16:38:02,118 dispatch pc=184, inst=STORE_FAST(arg=11, lineno=150)
DEBUG 2022-02-14 16:38:02,118 stack ['$phi184.0', '$phi184.1', '$phi184.2']
DEBUG 2022-02-14 16:38:02,118 dispatch pc=186, inst=LOAD_FAST(arg=10, lineno=151)
DEBUG 2022-02-14 16:38:02,118 stack ['$phi184.0', '$phi184.1']
DEBUG 2022-02-14 16:38:02,118 dispatch pc=188, inst=LOAD_FAST(arg=9, lineno=151)
DEBUG 2022-02-14 16:38:02,118 stack ['$phi184.0', '$phi184.1', '$powfactor186.3']
DEBUG 2022-02-14 16:38:02,118 dispatch pc=190, inst=LOAD_FAST(arg=11, lineno=151)
DEBUG 2022-02-14 16:38:02,118 stack ['$phi184.0', '$phi184.1', '$powfactor186.3', '$factor188.4']
DEBUG 2022-02-14 16:38:02,118 dispatch pc=192, inst=BINARY_TRUE_DIVIDE(arg=None, lineno=151)
DEBUG 2022-02-14 16:38:02,119 stack ['$phi184.0', '$phi184.1', '$powfactor186.3', '$factor188.4', '$j190.5']
DEBUG 2022-02-14 16:38:02,119 dispatch pc=194, inst=INPLACE_MULTIPLY(arg=None, lineno=151)
DEBUG 2022-02-14 16:38:02,119 stack ['$phi184.0', '$phi184.1', '$powfactor186.3', '$192binary_true_divide.6']
DEBUG 2022-02-14 16:38:02,119 dispatch pc=196, inst=STORE_FAST(arg=10, lineno=151)
DEBUG 2022-02-14 16:38:02,119 stack ['$phi184.0', '$phi184.1', '$194inplace_multiply.7']
DEBUG 2022-02-14 16:38:02,119 dispatch pc=198, inst=LOAD_GLOBAL(arg=4, lineno=152)
DEBUG 2022-02-14 16:38:02,119 stack ['$phi184.0', '$phi184.1']
DEBUG 2022-02-14 16:38:02,119 dispatch pc=200, inst=LOAD_FAST(arg=8, lineno=152)
DEBUG 2022-02-14 16:38:02,119 stack ['$phi184.0', '$phi184.1', '$198load_global.8']
DEBUG 2022-02-14 16:38:02,119 dispatch pc=202, inst=LOAD_FAST(arg=11, lineno=152)
DEBUG 2022-02-14 16:38:02,119 stack ['$phi184.0', '$phi184.1', '$198load_global.8', '$i200.9']
DEBUG 2022-02-14 16:38:02,119 dispatch pc=204, inst=BINARY_MULTIPLY(arg=None, lineno=152)
DEBUG 2022-02-14 16:38:02,119 stack ['$phi184.0', '$phi184.1', '$198load_global.8', '$i200.9', '$j202.10']
DEBUG 2022-02-14 16:38:02,119 dispatch pc=206, inst=LOAD_CONST(arg=3, lineno=152)
DEBUG 2022-02-14 16:38:02,119 stack ['$phi184.0', '$phi184.1', '$198load_global.8', '$204binary_multiply.11']
DEBUG 2022-02-14 16:38:02,119 dispatch pc=208, inst=BINARY_ADD(arg=None, lineno=152)
DEBUG 2022-02-14 16:38:02,119 stack ['$phi184.0', '$phi184.1', '$198load_global.8', '$204binary_multiply.11', '$const206.12']
DEBUG 2022-02-14 16:38:02,119 dispatch pc=210, inst=LOAD_FAST(arg=4, lineno=152)
DEBUG 2022-02-14 16:38:02,119 stack ['$phi184.0', '$phi184.1', '$198load_global.8', '$208binary_add.13']
DEBUG 2022-02-14 16:38:02,119 dispatch pc=212, inst=LOAD_CONST(arg=2, lineno=152)
DEBUG 2022-02-14 16:38:02,119 stack ['$phi184.0', '$phi184.1', '$198load_global.8', '$208binary_add.13', '$n210.14']
DEBUG 2022-02-14 16:38:02,119 dispatch pc=214, inst=BINARY_FLOOR_DIVIDE(arg=None, lineno=152)
DEBUG 2022-02-14 16:38:02,119 stack ['$phi184.0', '$phi184.1', '$198load_global.8', '$208binary_add.13', '$n210.14', '$const212.15']
DEBUG 2022-02-14 16:38:02,119 dispatch pc=216, inst=LOAD_CONST(arg=2, lineno=152)
DEBUG 2022-02-14 16:38:02,120 stack ['$phi184.0', '$phi184.1', '$198load_global.8', '$208binary_add.13', '$214binary_floor_divide.16']
DEBUG 2022-02-14 16:38:02,120 dispatch pc=218, inst=BINARY_ADD(arg=None, lineno=152)
DEBUG 2022-02-14 16:38:02,120 stack ['$phi184.0', '$phi184.1', '$198load_global.8', '$208binary_add.13', '$214binary_floor_divide.16', '$const216.17']
DEBUG 2022-02-14 16:38:02,120 dispatch pc=220, inst=CALL_FUNCTION(arg=2, lineno=152)
DEBUG 2022-02-14 16:38:02,120 stack ['$phi184.0', '$phi184.1', '$198load_global.8', '$208binary_add.13', '$218binary_add.18']
DEBUG 2022-02-14 16:38:02,120 dispatch pc=222, inst=GET_ITER(arg=None, lineno=152)
DEBUG 2022-02-14 16:38:02,120 stack ['$phi184.0', '$phi184.1', '$220call_function.19']
DEBUG 2022-02-14 16:38:02,120 end state. edges=[Edge(pc=224, stack=('$phi184.0', '$phi184.1', '$222get_iter.20'), blockstack=(), npush=0)]
DEBUG 2022-02-14 16:38:02,120 pending: deque([State(pc_initial=68 nstack_initial=1), State(pc_initial=224 nstack_initial=3)])
DEBUG 2022-02-14 16:38:02,120 pending: deque([State(pc_initial=224 nstack_initial=3)])
DEBUG 2022-02-14 16:38:02,120 stack: ['$phi224.0', '$phi224.1', '$phi224.2']
DEBUG 2022-02-14 16:38:02,120 dispatch pc=224, inst=FOR_ITER(arg=56, lineno=152)
DEBUG 2022-02-14 16:38:02,120 stack ['$phi224.0', '$phi224.1', '$phi224.2']
DEBUG 2022-02-14 16:38:02,120 end state. edges=[Edge(pc=282, stack=('$phi224.0', '$phi224.1'), blockstack=(), npush=0), Edge(pc=226, stack=('$phi224.0', '$phi224.1', '$phi224.2', '$224for_iter.4'), blockstack=(), npush=0)]
DEBUG 2022-02-14 16:38:02,120 pending: deque([State(pc_initial=282 nstack_initial=2), State(pc_initial=226 nstack_initial=4)])
DEBUG 2022-02-14 16:38:02,120 stack: ['$phi282.0', '$phi282.1']
DEBUG 2022-02-14 16:38:02,121 dispatch pc=282, inst=JUMP_ABSOLUTE(arg=182, lineno=153)
DEBUG 2022-02-14 16:38:02,121 stack ['$phi282.0', '$phi282.1']
DEBUG 2022-02-14 16:38:02,121 end state. edges=[Edge(pc=182, stack=('$phi282.0', '$phi282.1'), blockstack=(), npush=0)]
DEBUG 2022-02-14 16:38:02,121 pending: deque([State(pc_initial=226 nstack_initial=4), State(pc_initial=182 nstack_initial=2)])
DEBUG 2022-02-14 16:38:02,121 stack: ['$phi226.0', '$phi226.1', '$phi226.2', '$phi226.3']
DEBUG 2022-02-14 16:38:02,121 dispatch pc=226, inst=STORE_FAST(arg=12, lineno=152)
DEBUG 2022-02-14 16:38:02,121 stack ['$phi226.0', '$phi226.1', '$phi226.2', '$phi226.3']
DEBUG 2022-02-14 16:38:02,121 dispatch pc=228, inst=LOAD_FAST(arg=7, lineno=153)
DEBUG 2022-02-14 16:38:02,121 stack ['$phi226.0', '$phi226.1', '$phi226.2']
DEBUG 2022-02-14 16:38:02,121 dispatch pc=230, inst=LOAD_FAST(arg=6, lineno=153)
DEBUG 2022-02-14 16:38:02,121 stack ['$phi226.0', '$phi226.1', '$phi226.2', '$comb228.4']
DEBUG 2022-02-14 16:38:02,121 dispatch pc=232, inst=LOAD_FAST(arg=12, lineno=153)
DEBUG 2022-02-14 16:38:02,121 stack ['$phi226.0', '$phi226.1', '$phi226.2', '$comb228.4', '$count230.5']
DEBUG 2022-02-14 16:38:02,121 dispatch pc=234, inst=LOAD_CONST(arg=3, lineno=153)
DEBUG 2022-02-14 16:38:02,122 stack ['$phi226.0', '$phi226.1', '$phi226.2', '$comb228.4', '$count230.5', '$k232.6']
DEBUG 2022-02-14 16:38:02,122 dispatch pc=236, inst=BINARY_SUBTRACT(arg=None, lineno=153)
DEBUG 2022-02-14 16:38:02,122 stack ['$phi226.0', '$phi226.1', '$phi226.2', '$comb228.4', '$count230.5', '$k232.6', '$const234.7']
DEBUG 2022-02-14 16:38:02,122 dispatch pc=238, inst=BUILD_TUPLE(arg=2, lineno=153)
DEBUG 2022-02-14 16:38:02,122 stack ['$phi226.0', '$phi226.1', '$phi226.2', '$comb228.4', '$count230.5', '$236binary_subtract.8']
DEBUG 2022-02-14 16:38:02,122 dispatch pc=240, inst=DUP_TOP_TWO(arg=None, lineno=153)
DEBUG 2022-02-14 16:38:02,122 stack ['$phi226.0', '$phi226.1', '$phi226.2', '$comb228.4', '$238build_tuple.9']
DEBUG 2022-02-14 16:38:02,122 dispatch pc=242, inst=BINARY_SUBSCR(arg=None, lineno=153)
DEBUG 2022-02-14 16:38:02,122 stack ['$phi226.0', '$phi226.1', '$phi226.2', '$comb228.4', '$238build_tuple.9', '$240dup_top_two.10', '$240dup_top_two.11']
DEBUG 2022-02-14 16:38:02,122 dispatch pc=244, inst=LOAD_FAST(arg=7, lineno=153)
DEBUG 2022-02-14 16:38:02,122 stack ['$phi226.0', '$phi226.1', '$phi226.2', '$comb228.4', '$238build_tuple.9', '$242binary_subscr.12']
DEBUG 2022-02-14 16:38:02,122 dispatch pc=246, inst=LOAD_CONST(arg=3, lineno=153)
DEBUG 2022-02-14 16:38:02,122 stack ['$phi226.0', '$phi226.1', '$phi226.2', '$comb228.4', '$238build_tuple.9', '$242binary_subscr.12', '$comb244.13']
DEBUG 2022-02-14 16:38:02,122 dispatch pc=248, inst=LOAD_FAST(arg=6, lineno=153)
DEBUG 2022-02-14 16:38:02,122 stack ['$phi226.0', '$phi226.1', '$phi226.2', '$comb228.4', '$238build_tuple.9', '$242binary_subscr.12', '$comb244.13', '$const246.14']
DEBUG 2022-02-14 16:38:02,122 dispatch pc=250, inst=BINARY_SUBTRACT(arg=None, lineno=153)
DEBUG 2022-02-14 16:38:02,122 stack ['$phi226.0', '$phi226.1', '$phi226.2', '$comb228.4', '$238build_tuple.9', '$242binary_subscr.12', '$comb244.13', '$const246.14', '$count248.15']
DEBUG 2022-02-14 16:38:02,122 dispatch pc=252, inst=LOAD_FAST(arg=12, lineno=153)
DEBUG 2022-02-14 16:38:02,122 stack ['$phi226.0', '$phi226.1', '$phi226.2', '$comb228.4', '$238build_tuple.9', '$242binary_subscr.12', '$comb244.13', '$250binary_subtract.16']
DEBUG 2022-02-14 16:38:02,122 dispatch pc=254, inst=LOAD_FAST(arg=8, lineno=153)
DEBUG 2022-02-14 16:38:02,122 stack ['$phi226.0', '$phi226.1', '$phi226.2', '$comb228.4', '$238build_tuple.9', '$242binary_subscr.12', '$comb244.13', '$250binary_subtract.16', '$k252.17']
DEBUG 2022-02-14 16:38:02,122 dispatch pc=256, inst=LOAD_FAST(arg=11, lineno=153)
DEBUG 2022-02-14 16:38:02,122 stack ['$phi226.0', '$phi226.1', '$phi226.2', '$comb228.4', '$238build_tuple.9', '$242binary_subscr.12', '$comb244.13', '$250binary_subtract.16', '$k252.17', '$i254.18']
DEBUG 2022-02-14 16:38:02,123 dispatch pc=258, inst=BINARY_MULTIPLY(arg=None, lineno=153)
DEBUG 2022-02-14 16:38:02,123 stack ['$phi226.0', '$phi226.1', '$phi226.2', '$comb228.4', '$238build_tuple.9', '$242binary_subscr.12', '$comb244.13', '$250binary_subtract.16', '$k252.17', '$i254.18', '$j256.19']
DEBUG 2022-02-14 16:38:02,123 dispatch pc=260, inst=BINARY_SUBTRACT(arg=None, lineno=153)
DEBUG 2022-02-14 16:38:02,123 stack ['$phi226.0', '$phi226.1', '$phi226.2', '$comb228.4', '$238build_tuple.9', '$242binary_subscr.12', '$comb244.13', '$250binary_subtract.16', '$k252.17', '$258binary_multiply.20']
DEBUG 2022-02-14 16:38:02,123 dispatch pc=262, inst=LOAD_CONST(arg=3, lineno=153)
DEBUG 2022-02-14 16:38:02,123 stack ['$phi226.0', '$phi226.1', '$phi226.2', '$comb228.4', '$238build_tuple.9', '$242binary_subscr.12', '$comb244.13', '$250binary_subtract.16', '$260binary_subtract.21']
DEBUG 2022-02-14 16:38:02,123 dispatch pc=264, inst=BINARY_SUBTRACT(arg=None, lineno=153)
DEBUG 2022-02-14 16:38:02,123 stack ['$phi226.0', '$phi226.1', '$phi226.2', '$comb228.4', '$238build_tuple.9', '$242binary_subscr.12', '$comb244.13', '$250binary_subtract.16', '$260binary_subtract.21', '$const262.22']
DEBUG 2022-02-14 16:38:02,123 dispatch pc=266, inst=BUILD_TUPLE(arg=2, lineno=153)
DEBUG 2022-02-14 16:38:02,123 stack ['$phi226.0', '$phi226.1', '$phi226.2', '$comb228.4', '$238build_tuple.9', '$242binary_subscr.12', '$comb244.13', '$250binary_subtract.16', '$264binary_subtract.23']
DEBUG 2022-02-14 16:38:02,123 dispatch pc=268, inst=BINARY_SUBSCR(arg=None, lineno=153)
DEBUG 2022-02-14 16:38:02,123 stack ['$phi226.0', '$phi226.1', '$phi226.2', '$comb228.4', '$238build_tuple.9', '$242binary_subscr.12', '$comb244.13', '$266build_tuple.24']
DEBUG 2022-02-14 16:38:02,123 dispatch pc=270, inst=LOAD_FAST(arg=10, lineno=153)
DEBUG 2022-02-14 16:38:02,123 stack ['$phi226.0', '$phi226.1', '$phi226.2', '$comb228.4', '$238build_tuple.9', '$242binary_subscr.12', '$268binary_subscr.25']
DEBUG 2022-02-14 16:38:02,123 dispatch pc=272, inst=BINARY_MULTIPLY(arg=None, lineno=153)
DEBUG 2022-02-14 16:38:02,123 stack ['$phi226.0', '$phi226.1', '$phi226.2', '$comb228.4', '$238build_tuple.9', '$242binary_subscr.12', '$268binary_subscr.25', '$powfactor270.26']
DEBUG 2022-02-14 16:38:02,123 dispatch pc=274, inst=INPLACE_ADD(arg=None, lineno=153)
DEBUG 2022-02-14 16:38:02,123 stack ['$phi226.0', '$phi226.1', '$phi226.2', '$comb228.4', '$238build_tuple.9', '$242binary_subscr.12', '$272binary_multiply.27']
DEBUG 2022-02-14 16:38:02,123 dispatch pc=276, inst=ROT_THREE(arg=None, lineno=153)
DEBUG 2022-02-14 16:38:02,123 stack ['$phi226.0', '$phi226.1', '$phi226.2', '$comb228.4', '$238build_tuple.9', '$274inplace_add.28']
DEBUG 2022-02-14 16:38:02,123 dispatch pc=278, inst=STORE_SUBSCR(arg=None, lineno=153)
DEBUG 2022-02-14 16:38:02,123 stack ['$phi226.0', '$phi226.1', '$phi226.2', '$274inplace_add.28', '$comb228.4', '$238build_tuple.9']
DEBUG 2022-02-14 16:38:02,123 dispatch pc=280, inst=JUMP_ABSOLUTE(arg=224, lineno=153)
DEBUG 2022-02-14 16:38:02,123 stack ['$phi226.0', '$phi226.1', '$phi226.2']
DEBUG 2022-02-14 16:38:02,124 end state. edges=[Edge(pc=224, stack=('$phi226.0', '$phi226.1', '$phi226.2'), blockstack=(), npush=0)]
DEBUG 2022-02-14 16:38:02,124 pending: deque([State(pc_initial=182 nstack_initial=2), State(pc_initial=224 nstack_initial=3)])
DEBUG 2022-02-14 16:38:02,124 pending: deque([State(pc_initial=224 nstack_initial=3)])
DEBUG 2022-02-14 16:38:02,124 -------------------------Prune PHIs-------------------------
DEBUG 2022-02-14 16:38:02,124 Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=68 nstack_initial=1): {'$phi68.0'},
             State(pc_initial=70 nstack_initial=2): {'$phi70.1'},
             State(pc_initial=182 nstack_initial=2): {'$phi182.1'},
             State(pc_initial=184 nstack_initial=3): {'$phi184.2'},
             State(pc_initial=224 nstack_initial=3): {'$phi224.2'},
             State(pc_initial=226 nstack_initial=4): {'$phi226.3'},
             State(pc_initial=282 nstack_initial=2): set(),
             State(pc_initial=284 nstack_initial=1): set(),
             State(pc_initial=286 nstack_initial=0): set()})
DEBUG 2022-02-14 16:38:02,124 defmap: {'$phi182.1': State(pc_initial=70 nstack_initial=2),
 '$phi184.2': State(pc_initial=182 nstack_initial=2),
 '$phi224.2': State(pc_initial=184 nstack_initial=3),
 '$phi226.3': State(pc_initial=224 nstack_initial=3),
 '$phi68.0': State(pc_initial=0 nstack_initial=0),
 '$phi70.1': State(pc_initial=68 nstack_initial=1)}
DEBUG 2022-02-14 16:38:02,124 phismap: defaultdict(<class 'set'>,
            {'$phi182.0': {('$phi282.0',
                            State(pc_initial=282 nstack_initial=2)),
                           ('$phi70.0', State(pc_initial=70 nstack_initial=2))},
             '$phi182.1': {('$180get_iter.52',
                            State(pc_initial=70 nstack_initial=2)),
                           ('$phi282.1',
                            State(pc_initial=282 nstack_initial=2))},
             '$phi184.0': {('$phi182.0',
                            State(pc_initial=182 nstack_initial=2))},
             '$phi184.1': {('$phi182.1',
                            State(pc_initial=182 nstack_initial=2))},
             '$phi184.2': {('$182for_iter.3',
                            State(pc_initial=182 nstack_initial=2))},
             '$phi224.0': {('$phi184.0',
                            State(pc_initial=184 nstack_initial=3)),
                           ('$phi226.0',
                            State(pc_initial=226 nstack_initial=4))},
             '$phi224.1': {('$phi184.1',
                            State(pc_initial=184 nstack_initial=3)),
                           ('$phi226.1',
                            State(pc_initial=226 nstack_initial=4))},
             '$phi224.2': {('$222get_iter.20',
                            State(pc_initial=184 nstack_initial=3)),
                           ('$phi226.2',
                            State(pc_initial=226 nstack_initial=4))},
             '$phi226.0': {('$phi224.0',
                            State(pc_initial=224 nstack_initial=3))},
             '$phi226.1': {('$phi224.1',
                            State(pc_initial=224 nstack_initial=3))},
             '$phi226.2': {('$phi224.2',
                            State(pc_initial=224 nstack_initial=3))},
             '$phi226.3': {('$224for_iter.4',
                            State(pc_initial=224 nstack_initial=3))},
             '$phi282.0': {('$phi224.0',
                            State(pc_initial=224 nstack_initial=3))},
             '$phi282.1': {('$phi224.1',
                            State(pc_initial=224 nstack_initial=3))},
             '$phi284.0': {('$phi182.0',
                            State(pc_initial=182 nstack_initial=2))},
             '$phi68.0': {('$66get_iter.28',
                           State(pc_initial=0 nstack_initial=0)),
                          ('$phi284.0',
                           State(pc_initial=284 nstack_initial=1))},
             '$phi70.0': {('$phi68.0', State(pc_initial=68 nstack_initial=1))},
             '$phi70.1': {('$68for_iter.2',
                           State(pc_initial=68 nstack_initial=1))}})
DEBUG 2022-02-14 16:38:02,126 changing phismap: defaultdict(<class 'set'>,
            {'$phi182.0': {('$phi224.0',
                            State(pc_initial=224 nstack_initial=3)),
                           ('$phi68.0', State(pc_initial=68 nstack_initial=1))},
             '$phi182.1': {('$180get_iter.52',
                            State(pc_initial=70 nstack_initial=2)),
                           ('$phi224.1',
                            State(pc_initial=224 nstack_initial=3))},
             '$phi184.0': {('$phi224.0',
                            State(pc_initial=224 nstack_initial=3)),
                           ('$phi68.0', State(pc_initial=68 nstack_initial=1))},
             '$phi184.1': {('$180get_iter.52',
                            State(pc_initial=70 nstack_initial=2)),
                           ('$phi224.1',
                            State(pc_initial=224 nstack_initial=3))},
             '$phi184.2': {('$182for_iter.3',
                            State(pc_initial=182 nstack_initial=2))},
             '$phi224.0': {('$phi224.0',
                            State(pc_initial=224 nstack_initial=3)),
                           ('$phi68.0', State(pc_initial=68 nstack_initial=1))},
             '$phi224.1': {('$180get_iter.52',
                            State(pc_initial=70 nstack_initial=2)),
                           ('$phi224.1',
                            State(pc_initial=224 nstack_initial=3))},
             '$phi224.2': {('$222get_iter.20',
                            State(pc_initial=184 nstack_initial=3)),
                           ('$phi224.2',
                            State(pc_initial=224 nstack_initial=3))},
             '$phi226.0': {('$phi68.0', State(pc_initial=68 nstack_initial=1))},
             '$phi226.1': {('$180get_iter.52',
                            State(pc_initial=70 nstack_initial=2))},
             '$phi226.2': {('$222get_iter.20',
                            State(pc_initial=184 nstack_initial=3))},
             '$phi226.3': {('$224for_iter.4',
                            State(pc_initial=224 nstack_initial=3))},
             '$phi282.0': {('$phi68.0', State(pc_initial=68 nstack_initial=1))},
             '$phi282.1': {('$180get_iter.52',
                            State(pc_initial=70 nstack_initial=2))},
             '$phi284.0': {('$phi224.0',
                            State(pc_initial=224 nstack_initial=3)),
                           ('$phi68.0', State(pc_initial=68 nstack_initial=1))},
             '$phi68.0': {('$66get_iter.28',
                           State(pc_initial=0 nstack_initial=0)),
                          ('$phi224.0', State(pc_initial=224 nstack_initial=3)),
                          ('$phi68.0', State(pc_initial=68 nstack_initial=1))},
             '$phi70.0': {('$66get_iter.28',
                           State(pc_initial=0 nstack_initial=0)),
                          ('$phi224.0',
                           State(pc_initial=224 nstack_initial=3))},
             '$phi70.1': {('$68for_iter.2',
                           State(pc_initial=68 nstack_initial=1))}})
DEBUG 2022-02-14 16:38:02,126 changing phismap: defaultdict(<class 'set'>,
            {'$phi182.0': {('$66get_iter.28',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi182.1': {('$180get_iter.52',
                            State(pc_initial=70 nstack_initial=2))},
             '$phi184.0': {('$66get_iter.28',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi184.1': {('$180get_iter.52',
                            State(pc_initial=70 nstack_initial=2))},
             '$phi184.2': {('$182for_iter.3',
                            State(pc_initial=182 nstack_initial=2))},
             '$phi224.0': {('$66get_iter.28',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi224.1': {('$180get_iter.52',
                            State(pc_initial=70 nstack_initial=2))},
             '$phi224.2': {('$222get_iter.20',
                            State(pc_initial=184 nstack_initial=3))},
             '$phi226.0': {('$66get_iter.28',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi226.1': {('$180get_iter.52',
                            State(pc_initial=70 nstack_initial=2))},
             '$phi226.2': {('$222get_iter.20',
                            State(pc_initial=184 nstack_initial=3))},
             '$phi226.3': {('$224for_iter.4',
                            State(pc_initial=224 nstack_initial=3))},
             '$phi282.0': {('$66get_iter.28',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi282.1': {('$180get_iter.52',
                            State(pc_initial=70 nstack_initial=2))},
             '$phi284.0': {('$66get_iter.28',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi68.0': {('$66get_iter.28',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi70.0': {('$66get_iter.28',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi70.1': {('$68for_iter.2',
                           State(pc_initial=68 nstack_initial=1))}})
DEBUG 2022-02-14 16:38:02,127 changing phismap: defaultdict(<class 'set'>,
            {'$phi182.0': {('$66get_iter.28',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi182.1': {('$180get_iter.52',
                            State(pc_initial=70 nstack_initial=2))},
             '$phi184.0': {('$66get_iter.28',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi184.1': {('$180get_iter.52',
                            State(pc_initial=70 nstack_initial=2))},
             '$phi184.2': {('$182for_iter.3',
                            State(pc_initial=182 nstack_initial=2))},
             '$phi224.0': {('$66get_iter.28',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi224.1': {('$180get_iter.52',
                            State(pc_initial=70 nstack_initial=2))},
             '$phi224.2': {('$222get_iter.20',
                            State(pc_initial=184 nstack_initial=3))},
             '$phi226.0': {('$66get_iter.28',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi226.1': {('$180get_iter.52',
                            State(pc_initial=70 nstack_initial=2))},
             '$phi226.2': {('$222get_iter.20',
                            State(pc_initial=184 nstack_initial=3))},
             '$phi226.3': {('$224for_iter.4',
                            State(pc_initial=224 nstack_initial=3))},
             '$phi282.0': {('$66get_iter.28',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi282.1': {('$180get_iter.52',
                            State(pc_initial=70 nstack_initial=2))},
             '$phi284.0': {('$66get_iter.28',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi68.0': {('$66get_iter.28',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi70.0': {('$66get_iter.28',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi70.1': {('$68for_iter.2',
                           State(pc_initial=68 nstack_initial=1))}})
DEBUG 2022-02-14 16:38:02,128 keep phismap: {'$phi182.1': {('$180get_iter.52', State(pc_initial=70 nstack_initial=2))},
 '$phi184.2': {('$182for_iter.3', State(pc_initial=182 nstack_initial=2))},
 '$phi224.2': {('$222get_iter.20', State(pc_initial=184 nstack_initial=3))},
 '$phi226.3': {('$224for_iter.4', State(pc_initial=224 nstack_initial=3))},
 '$phi68.0': {('$66get_iter.28', State(pc_initial=0 nstack_initial=0))},
 '$phi70.1': {('$68for_iter.2', State(pc_initial=68 nstack_initial=1))}}
DEBUG 2022-02-14 16:38:02,128 new_out: defaultdict(<class 'dict'>,
            {State(pc_initial=0 nstack_initial=0): {'$phi68.0': '$66get_iter.28'},
             State(pc_initial=68 nstack_initial=1): {'$phi70.1': '$68for_iter.2'},
             State(pc_initial=70 nstack_initial=2): {'$phi182.1': '$180get_iter.52'},
             State(pc_initial=182 nstack_initial=2): {'$phi184.2': '$182for_iter.3'},
             State(pc_initial=184 nstack_initial=3): {'$phi224.2': '$222get_iter.20'},
             State(pc_initial=224 nstack_initial=3): {'$phi226.3': '$224for_iter.4'}})
DEBUG 2022-02-14 16:38:02,128 ----------------------DONE Prune PHIs-----------------------
DEBUG 2022-02-14 16:38:02,128 block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$E2.0'}), (4, {'item': '$E2.0', 'res': '$4load_method.1'}), (6, {'func': '$4load_method.1', 'args': [], 'res': '$6call_method.2'}), (8, {'value': '$6call_method.2'}), (10, {'res': '$const10.3'}), (12, {'value': '$const10.3'}), (14, {'res': '$14load_global.4'}), (16, {'item': '$14load_global.4', 'res': '$16load_attr.5'}), (18, {'res': '$const18.6'}), (20, {'res': '$n20.7'}), (22, {'res': '$const22.8'}), (24, {'lhs': '$n20.7', 'rhs': '$const22.8', 'res': '$24binary_floor_divide.9'}), (26, {'res': '$const26.10'}), (28, {'lhs': '$24binary_floor_divide.9', 'rhs': '$const26.10', 'res': '$28binary_add.11'}), (30, {'items': ['$const18.6', '$28binary_add.11'], 'res': '$30build_tuple.12'}), (32, {'res': '$32load_global.13'}), (34, {'item': '$32load_global.13', 'res': '$34load_attr.14'}), (36, {'res': '$const36.15'}), (38, {'func': '$16load_attr.5', 'args': ['$30build_tuple.12', '$34load_attr.14'], 'names': '$const36.15', 'res': '$38call_function_kw.16'}), (40, {'value': '$38call_function_kw.16'}), (42, {'res': '$const42.17'}), (44, {'res': '$comb44.18'}), (46, {'res': '$const46.19'}), (48, {'target': '$comb44.18', 'index': '$const46.19', 'value': '$const42.17'}), (50, {'res': '$50load_global.20'}), (52, {'res': '$const52.21'}), (54, {'res': '$n54.22'}), (56, {'res': '$const56.23'}), (58, {'lhs': '$n54.22', 'rhs': '$const56.23', 'res': '$58binary_floor_divide.24'}), (60, {'res': '$const60.25'}), (62, {'lhs': '$58binary_floor_divide.24', 'rhs': '$const60.25', 'res': '$62binary_add.26'}), (64, {'func': '$50load_global.20', 'args': ['$const52.21', '$62binary_add.26'], 'res': '$64call_function.27'}), (66, {'value': '$64call_function.27', 'res': '$66get_iter.28'})), outgoing_phis={'$phi68.0': '$66get_iter.28'}, blockstack=(), active_try_block=None, outgoing_edgepushed={68: ('$66get_iter.28',)})
DEBUG 2022-02-14 16:38:02,128 block_infos State(pc_initial=68 nstack_initial=1):
AdaptBlockInfo(insts=((68, {'iterator': '$phi68.0', 'pair': '$68for_iter.1', 'indval': '$68for_iter.2', 'pred': '$68for_iter.3'}),), outgoing_phis={'$phi70.1': '$68for_iter.2'}, blockstack=(), active_try_block=None, outgoing_edgepushed={286: (), 70: ('$phi68.0', '$68for_iter.2')})
DEBUG 2022-02-14 16:38:02,128 block_infos State(pc_initial=70 nstack_initial=2):
AdaptBlockInfo(insts=((70, {'value': '$phi70.1'}), (72, {'res': '$E_k72.2'}), (74, {'item': '$E_k72.2', 'res': '$74load_method.3'}), (76, {'func': '$74load_method.3', 'args': [], 'res': '$76call_method.4'}), (78, {'res': '$const78.5'}), (80, {'res': '$i80.6'}), (82, {'lhs': '$const78.5', 'rhs': '$i80.6', 'res': '$82binary_multiply.7'}), (84, {'lhs': '$76call_method.4', 'rhs': '$82binary_multiply.7', 'res': '$84binary_true_divide.8'}), (86, {'res': '$XD_S86.9'}), (88, {'res': '$D_S88.10'}), (90, {'lhs': '$XD_S86.9', 'rhs': '$D_S88.10', 'res': '$90binary_matrix_multiply.11'}), (92, {'res': '$const92.12'}), (94, {'lhs': '$90binary_matrix_multiply.11', 'rhs': '$const92.12', 'res': '$94binary_true_divide.13'}), (96, {'lhs': '$84binary_true_divide.8', 'rhs': '$94binary_true_divide.13', 'res': '$96binary_add.14'}), (98, {'value': '$96binary_add.14'}), (100, {'res': '$E_k100.15'}), (102, {'res': '$E102.16'}), (104, {'lhs': '$E_k100.15', 'rhs': '$E102.16', 'res': '$104inplace_multiply.17'}), (106, {'value': '$104inplace_multiply.17'}), (108, {'res': '$XD_S108.18'}), (110, {'res': '$AX_S110.19'}), (112, {'lhs': '$XD_S108.18', 'rhs': '$AX_S110.19', 'res': '$112binary_matrix_multiply.20'}), (114, {'value': '$112binary_matrix_multiply.20'}), (116, {'res': '$const116.21'}), (118, {'value': '$const116.21'}), (120, {'res': '$const120.22'}), (122, {'res': '$count122.23'}), (124, {'lhs': '$const120.22', 'rhs': '$count122.23', 'res': '$124binary_subtract.24'}), (126, {'value': '$124binary_subtract.24'}), (128, {'res': '$comb128.25'}), (130, {'res': '$const130.26'}), (132, {'res': '$count132.27'}), (134, {'lhs': '$const130.26', 'rhs': '$count132.27', 'res': '$134binary_subtract.28'}), (136, {'res': '$const136.29'}), (138, {'res': '$const138.30'}), (140, {'start': '$const136.29', 'stop': '$const138.30', 'step': None, 'res': '$140build_slice.32', 'slicevar': '$140build_slice.31'}), (142, {'items': ['$134binary_subtract.28', '$140build_slice.32'], 'res': '$142build_tuple.33'}), (144, {'index': '$142build_tuple.33', 'target': '$comb128.25', 'res': '$144binary_subscr.34'}), (146, {'res': '$comb146.35'}), (148, {'res': '$count148.36'}), (150, {'res': '$const150.37'}), (152, {'res': '$const152.38'}), (154, {'start': '$const150.37', 'stop': '$const152.38', 'step': None, 'res': '$154build_slice.40', 'slicevar': '$154build_slice.39'}), (156, {'items': ['$count148.36', '$154build_slice.40'], 'res': '$156build_tuple.41'}), (158, {'target': '$comb146.35', 'index': '$156build_tuple.41', 'value': '$144binary_subscr.34'}), (160, {'res': '$160load_global.42'}), (162, {'res': '$const162.43'}), (164, {'res': '$n164.44'}), (166, {'res': '$const166.45'}), (168, {'res': '$i168.46'}), (170, {'lhs': '$const166.45', 'rhs': '$i168.46', 'res': '$170binary_multiply.47'}), (172, {'lhs': '$n164.44', 'rhs': '$170binary_multiply.47', 'res': '$172binary_floor_divide.48'}), (174, {'res': '$const174.49'}), (176, {'lhs': '$172binary_floor_divide.48', 'rhs': '$const174.49', 'res': '$176binary_add.50'}), (178, {'func': '$160load_global.42', 'args': ['$const162.43', '$176binary_add.50'], 'res': '$178call_function.51'}), (180, {'value': '$178call_function.51', 'res': '$180get_iter.52'})), outgoing_phis={'$phi182.1': '$180get_iter.52'}, blockstack=(), active_try_block=None, outgoing_edgepushed={182: ('$phi70.0', '$180get_iter.52')})
DEBUG 2022-02-14 16:38:02,129 block_infos State(pc_initial=182 nstack_initial=2):
AdaptBlockInfo(insts=((182, {'iterator': '$phi182.1', 'pair': '$182for_iter.2', 'indval': '$182for_iter.3', 'pred': '$182for_iter.4'}),), outgoing_phis={'$phi184.2': '$182for_iter.3'}, blockstack=(), active_try_block=None, outgoing_edgepushed={284: ('$phi182.0',), 184: ('$phi182.0', '$phi182.1', '$182for_iter.3')})
DEBUG 2022-02-14 16:38:02,129 block_infos State(pc_initial=184 nstack_initial=3):
AdaptBlockInfo(insts=((184, {'value': '$phi184.2'}), (186, {'res': '$powfactor186.3'}), (188, {'res': '$factor188.4'}), (190, {'res': '$j190.5'}), (192, {'lhs': '$factor188.4', 'rhs': '$j190.5', 'res': '$192binary_true_divide.6'}), (194, {'lhs': '$powfactor186.3', 'rhs': '$192binary_true_divide.6', 'res': '$194inplace_multiply.7'}), (196, {'value': '$194inplace_multiply.7'}), (198, {'res': '$198load_global.8'}), (200, {'res': '$i200.9'}), (202, {'res': '$j202.10'}), (204, {'lhs': '$i200.9', 'rhs': '$j202.10', 'res': '$204binary_multiply.11'}), (206, {'res': '$const206.12'}), (208, {'lhs': '$204binary_multiply.11', 'rhs': '$const206.12', 'res': '$208binary_add.13'}), (210, {'res': '$n210.14'}), (212, {'res': '$const212.15'}), (214, {'lhs': '$n210.14', 'rhs': '$const212.15', 'res': '$214binary_floor_divide.16'}), (216, {'res': '$const216.17'}), (218, {'lhs': '$214binary_floor_divide.16', 'rhs': '$const216.17', 'res': '$218binary_add.18'}), (220, {'func': '$198load_global.8', 'args': ['$208binary_add.13', '$218binary_add.18'], 'res': '$220call_function.19'}), (222, {'value': '$220call_function.19', 'res': '$222get_iter.20'})), outgoing_phis={'$phi224.2': '$222get_iter.20'}, blockstack=(), active_try_block=None, outgoing_edgepushed={224: ('$phi184.0', '$phi184.1', '$222get_iter.20')})
DEBUG 2022-02-14 16:38:02,129 block_infos State(pc_initial=224 nstack_initial=3):
AdaptBlockInfo(insts=((224, {'iterator': '$phi224.2', 'pair': '$224for_iter.3', 'indval': '$224for_iter.4', 'pred': '$224for_iter.5'}),), outgoing_phis={'$phi226.3': '$224for_iter.4'}, blockstack=(), active_try_block=None, outgoing_edgepushed={282: ('$phi224.0', '$phi224.1'), 226: ('$phi224.0', '$phi224.1', '$phi224.2', '$224for_iter.4')})
DEBUG 2022-02-14 16:38:02,129 block_infos State(pc_initial=226 nstack_initial=4):
AdaptBlockInfo(insts=((226, {'value': '$phi226.3'}), (228, {'res': '$comb228.4'}), (230, {'res': '$count230.5'}), (232, {'res': '$k232.6'}), (234, {'res': '$const234.7'}), (236, {'lhs': '$k232.6', 'rhs': '$const234.7', 'res': '$236binary_subtract.8'}), (238, {'items': ['$count230.5', '$236binary_subtract.8'], 'res': '$238build_tuple.9'}), (240, {'orig': ['$comb228.4', '$238build_tuple.9'], 'duped': ['$240dup_top_two.10', '$240dup_top_two.11']}), (242, {'index': '$240dup_top_two.11', 'target': '$240dup_top_two.10', 'res': '$242binary_subscr.12'}), (244, {'res': '$comb244.13'}), (246, {'res': '$const246.14'}), (248, {'res': '$count248.15'}), (250, {'lhs': '$const246.14', 'rhs': '$count248.15', 'res': '$250binary_subtract.16'}), (252, {'res': '$k252.17'}), (254, {'res': '$i254.18'}), (256, {'res': '$j256.19'}), (258, {'lhs': '$i254.18', 'rhs': '$j256.19', 'res': '$258binary_multiply.20'}), (260, {'lhs': '$k252.17', 'rhs': '$258binary_multiply.20', 'res': '$260binary_subtract.21'}), (262, {'res': '$const262.22'}), (264, {'lhs': '$260binary_subtract.21', 'rhs': '$const262.22', 'res': '$264binary_subtract.23'}), (266, {'items': ['$250binary_subtract.16', '$264binary_subtract.23'], 'res': '$266build_tuple.24'}), (268, {'index': '$266build_tuple.24', 'target': '$comb244.13', 'res': '$268binary_subscr.25'}), (270, {'res': '$powfactor270.26'}), (272, {'lhs': '$268binary_subscr.25', 'rhs': '$powfactor270.26', 'res': '$272binary_multiply.27'}), (274, {'lhs': '$242binary_subscr.12', 'rhs': '$272binary_multiply.27', 'res': '$274inplace_add.28'}), (278, {'target': '$comb228.4', 'index': '$238build_tuple.9', 'value': '$274inplace_add.28'}), (280, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={224: ('$phi226.0', '$phi226.1', '$phi226.2')})
DEBUG 2022-02-14 16:38:02,129 block_infos State(pc_initial=282 nstack_initial=2):
AdaptBlockInfo(insts=((282, {}),), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={182: ('$phi282.0', '$phi282.1')})
DEBUG 2022-02-14 16:38:02,129 block_infos State(pc_initial=284 nstack_initial=1):
AdaptBlockInfo(insts=((284, {}),), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={68: ('$phi284.0',)})
DEBUG 2022-02-14 16:38:02,129 block_infos State(pc_initial=286 nstack_initial=0):
AdaptBlockInfo(insts=((286, {'res': '$comb286.0'}), (288, {'res': '$count288.1'}), (290, {'res': '$const290.2'}), (292, {'res': '$const292.3'}), (294, {'start': '$const290.2', 'stop': '$const292.3', 'step': None, 'res': '$294build_slice.5', 'slicevar': '$294build_slice.4'}), (296, {'items': ['$count288.1', '$294build_slice.5'], 'res': '$296build_tuple.6'}), (298, {'index': '$296build_tuple.6', 'target': '$comb286.0', 'res': '$298binary_subscr.7'}), (300, {'retval': '$298binary_subscr.7', 'castval': '$300return_value.8'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG 2022-02-14 16:38:02,132 label 0:
    E = arg(0, name=E)                       ['E']
    AX_S = arg(1, name=AX_S)                 ['AX_S']
    XD_S = arg(2, name=XD_S)                 ['XD_S']
    D_S = arg(3, name=D_S)                   ['D_S']
    n = arg(4, name=n)                       ['n']
    $4load_method.1 = getattr(value=E, attr=copy) ['$4load_method.1', 'E']
    E_k = call $4load_method.1(func=$4load_method.1, args=[], kws=(), vararg=None, target=None) ['$4load_method.1', 'E_k']
    count = const(int, 0)                    ['count']
    $14load_global.4 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>) ['$14load_global.4']
    $16load_attr.5 = getattr(value=$14load_global.4, attr=zeros) ['$14load_global.4', '$16load_attr.5']
    $const18.6 = const(int, 2)               ['$const18.6']
    $const22.8 = const(int, 2)               ['$const22.8']
    $24binary_floor_divide.9 = n // $const22.8 ['$24binary_floor_divide.9', '$const22.8', 'n']
    $const26.10 = const(int, 1)              ['$const26.10']
    $28binary_add.11 = $24binary_floor_divide.9 + $const26.10 ['$24binary_floor_divide.9', '$28binary_add.11', '$const26.10']
    $30build_tuple.12 = build_tuple(items=[Var($const18.6, _loop_hafnian_subroutines.py:141), Var($28binary_add.11, _loop_hafnian_subroutines.py:141)]) ['$28binary_add.11', '$30build_tuple.12', '$const18.6']
    $32load_global.13 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>) ['$32load_global.13']
    $34load_attr.14 = getattr(value=$32load_global.13, attr=complex128) ['$32load_global.13', '$34load_attr.14']
    comb = call $16load_attr.5($30build_tuple.12, func=$16load_attr.5, args=[Var($30build_tuple.12, _loop_hafnian_subroutines.py:141)], kws=[('dtype', Var($34load_attr.14, _loop_hafnian_subroutines.py:141))], vararg=None, target=None) ['$16load_attr.5', '$30build_tuple.12', '$34load_attr.14', 'comb']
    $const42.17 = const(int, 1)              ['$const42.17']
    $const_0 = const(int, 0)                 ['$const_0']
    $const_0.1 = const(int, 0)               ['$const_0.1']
    $const46.19 = build_tuple(items=[Var($const_0, _loop_hafnian_subroutines.py:142), Var($const_0.1, _loop_hafnian_subroutines.py:142)]) ['$const46.19', '$const_0', '$const_0.1']
    comb[$const46.19] = $const42.17          ['$const42.17', '$const46.19', 'comb']
    $50load_global.20 = global(range: <class 'range'>) ['$50load_global.20']
    $const52.21 = const(int, 1)              ['$const52.21']
    $const56.23 = const(int, 2)              ['$const56.23']
    $58binary_floor_divide.24 = n // $const56.23 ['$58binary_floor_divide.24', '$const56.23', 'n']
    $const60.25 = const(int, 1)              ['$const60.25']
    $62binary_add.26 = $58binary_floor_divide.24 + $const60.25 ['$58binary_floor_divide.24', '$62binary_add.26', '$const60.25']
    $64call_function.27 = call $50load_global.20($const52.21, $62binary_add.26, func=$50load_global.20, args=[Var($const52.21, _loop_hafnian_subroutines.py:143), Var($62binary_add.26, _loop_hafnian_subroutines.py:143)], kws=(), vararg=None, target=None) ['$50load_global.20', '$62binary_add.26', '$64call_function.27', '$const52.21']
    $66get_iter.28 = getiter(value=$64call_function.27) ['$64call_function.27', '$66get_iter.28']
    $phi68.0 = $66get_iter.28                ['$66get_iter.28', '$phi68.0']
    jump 68                                  []
label 68:
    $68for_iter.1 = iternext(value=$phi68.0) ['$68for_iter.1', '$phi68.0']
    $68for_iter.2 = pair_first(value=$68for_iter.1) ['$68for_iter.1', '$68for_iter.2']
    $68for_iter.3 = pair_second(value=$68for_iter.1) ['$68for_iter.1', '$68for_iter.3']
    $phi70.1 = $68for_iter.2                 ['$68for_iter.2', '$phi70.1']
    branch $68for_iter.3, 70, 286            ['$68for_iter.3']
label 70:
    i = $phi70.1                             ['$phi70.1', 'i']
    $74load_method.3 = getattr(value=E_k, attr=sum) ['$74load_method.3', 'E_k']
    $76call_method.4 = call $74load_method.3(func=$74load_method.3, args=[], kws=(), vararg=None, target=None) ['$74load_method.3', '$76call_method.4']
    $const78.5 = const(int, 2)               ['$const78.5']
    $82binary_multiply.7 = $const78.5 * i    ['$82binary_multiply.7', '$const78.5', 'i']
    $84binary_true_divide.8 = $76call_method.4 / $82binary_multiply.7 ['$76call_method.4', '$82binary_multiply.7', '$84binary_true_divide.8']
    $90binary_matrix_multiply.11 = XD_S <built-in function matmul> D_S ['$90binary_matrix_multiply.11', 'D_S', 'XD_S']
    $const92.12 = const(int, 2)              ['$const92.12']
    $94binary_true_divide.13 = $90binary_matrix_multiply.11 / $const92.12 ['$90binary_matrix_multiply.11', '$94binary_true_divide.13', '$const92.12']
    factor = $84binary_true_divide.8 + $94binary_true_divide.13 ['$84binary_true_divide.8', '$94binary_true_divide.13', 'factor']
    $104inplace_multiply.17 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=E_k, rhs=E, static_lhs=Undefined, static_rhs=Undefined) ['$104inplace_multiply.17', 'E', 'E_k']
    E_k = $104inplace_multiply.17            ['$104inplace_multiply.17', 'E_k']
    $112binary_matrix_multiply.20 = XD_S <built-in function matmul> AX_S ['$112binary_matrix_multiply.20', 'AX_S', 'XD_S']
    XD_S = $112binary_matrix_multiply.20     ['$112binary_matrix_multiply.20', 'XD_S']
    powfactor = const(int, 1)                ['powfactor']
    $const120.22 = const(int, 1)             ['$const120.22']
    $124binary_subtract.24 = $const120.22 - count ['$124binary_subtract.24', '$const120.22', 'count']
    count = $124binary_subtract.24           ['$124binary_subtract.24', 'count']
    $const130.26 = const(int, 1)             ['$const130.26']
    $134binary_subtract.28 = $const130.26 - count ['$134binary_subtract.28', '$const130.26', 'count']
    $const136.29 = const(NoneType, None)     ['$const136.29']
    $const138.30 = const(NoneType, None)     ['$const138.30']
    $140build_slice.31 = global(slice: <class 'slice'>) ['$140build_slice.31']
    $140build_slice.32 = call $140build_slice.31($const136.29, $const138.30, func=$140build_slice.31, args=(Var($const136.29, _loop_hafnian_subroutines.py:149), Var($const138.30, _loop_hafnian_subroutines.py:149)), kws=(), vararg=None, target=None) ['$140build_slice.31', '$140build_slice.32', '$const136.29', '$const138.30']
    $142build_tuple.33 = build_tuple(items=[Var($134binary_subtract.28, _loop_hafnian_subroutines.py:149), Var($140build_slice.32, _loop_hafnian_subroutines.py:149)]) ['$134binary_subtract.28', '$140build_slice.32', '$142build_tuple.33']
    $144binary_subscr.34 = getitem(value=comb, index=$142build_tuple.33, fn=<built-in function getitem>) ['$142build_tuple.33', '$144binary_subscr.34', 'comb']
    $const150.37 = const(NoneType, None)     ['$const150.37']
    $const152.38 = const(NoneType, None)     ['$const152.38']
    $154build_slice.39 = global(slice: <class 'slice'>) ['$154build_slice.39']
    $154build_slice.40 = call $154build_slice.39($const150.37, $const152.38, func=$154build_slice.39, args=(Var($const150.37, _loop_hafnian_subroutines.py:149), Var($const152.38, _loop_hafnian_subroutines.py:149)), kws=(), vararg=None, target=None) ['$154build_slice.39', '$154build_slice.40', '$const150.37', '$const152.38']
    $156build_tuple.41 = build_tuple(items=[Var(count, _loop_hafnian_subroutines.py:140), Var($154build_slice.40, _loop_hafnian_subroutines.py:149)]) ['$154build_slice.40', '$156build_tuple.41', 'count']
    comb[$156build_tuple.41] = $144binary_subscr.34 ['$144binary_subscr.34', '$156build_tuple.41', 'comb']
    $160load_global.42 = global(range: <class 'range'>) ['$160load_global.42']
    $const162.43 = const(int, 1)             ['$const162.43']
    $const166.45 = const(int, 2)             ['$const166.45']
    $170binary_multiply.47 = $const166.45 * i ['$170binary_multiply.47', '$const166.45', 'i']
    $172binary_floor_divide.48 = n // $170binary_multiply.47 ['$170binary_multiply.47', '$172binary_floor_divide.48', 'n']
    $const174.49 = const(int, 1)             ['$const174.49']
    $176binary_add.50 = $172binary_floor_divide.48 + $const174.49 ['$172binary_floor_divide.48', '$176binary_add.50', '$const174.49']
    $178call_function.51 = call $160load_global.42($const162.43, $176binary_add.50, func=$160load_global.42, args=[Var($const162.43, _loop_hafnian_subroutines.py:150), Var($176binary_add.50, _loop_hafnian_subroutines.py:150)], kws=(), vararg=None, target=None) ['$160load_global.42', '$176binary_add.50', '$178call_function.51', '$const162.43']
    $180get_iter.52 = getiter(value=$178call_function.51) ['$178call_function.51', '$180get_iter.52']
    $phi182.1 = $180get_iter.52              ['$180get_iter.52', '$phi182.1']
    jump 182                                 []
label 182:
    $182for_iter.2 = iternext(value=$phi182.1) ['$182for_iter.2', '$phi182.1']
    $182for_iter.3 = pair_first(value=$182for_iter.2) ['$182for_iter.2', '$182for_iter.3']
    $182for_iter.4 = pair_second(value=$182for_iter.2) ['$182for_iter.2', '$182for_iter.4']
    $phi184.2 = $182for_iter.3               ['$182for_iter.3', '$phi184.2']
    branch $182for_iter.4, 184, 284          ['$182for_iter.4']
label 184:
    j = $phi184.2                            ['$phi184.2', 'j']
    $192binary_true_divide.6 = factor / j    ['$192binary_true_divide.6', 'factor', 'j']
    $194inplace_multiply.7 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=powfactor, rhs=$192binary_true_divide.6, static_lhs=Undefined, static_rhs=Undefined) ['$192binary_true_divide.6', '$194inplace_multiply.7', 'powfactor']
    powfactor = $194inplace_multiply.7       ['$194inplace_multiply.7', 'powfactor']
    $198load_global.8 = global(range: <class 'range'>) ['$198load_global.8']
    $204binary_multiply.11 = i * j           ['$204binary_multiply.11', 'i', 'j']
    $const206.12 = const(int, 1)             ['$const206.12']
    $208binary_add.13 = $204binary_multiply.11 + $const206.12 ['$204binary_multiply.11', '$208binary_add.13', '$const206.12']
    $const212.15 = const(int, 2)             ['$const212.15']
    $214binary_floor_divide.16 = n // $const212.15 ['$214binary_floor_divide.16', '$const212.15', 'n']
    $const216.17 = const(int, 2)             ['$const216.17']
    $218binary_add.18 = $214binary_floor_divide.16 + $const216.17 ['$214binary_floor_divide.16', '$218binary_add.18', '$const216.17']
    $220call_function.19 = call $198load_global.8($208binary_add.13, $218binary_add.18, func=$198load_global.8, args=[Var($208binary_add.13, _loop_hafnian_subroutines.py:152), Var($218binary_add.18, _loop_hafnian_subroutines.py:152)], kws=(), vararg=None, target=None) ['$198load_global.8', '$208binary_add.13', '$218binary_add.18', '$220call_function.19']
    $222get_iter.20 = getiter(value=$220call_function.19) ['$220call_function.19', '$222get_iter.20']
    $phi224.2 = $222get_iter.20              ['$222get_iter.20', '$phi224.2']
    jump 224                                 []
label 224:
    $224for_iter.3 = iternext(value=$phi224.2) ['$224for_iter.3', '$phi224.2']
    $224for_iter.4 = pair_first(value=$224for_iter.3) ['$224for_iter.3', '$224for_iter.4']
    $224for_iter.5 = pair_second(value=$224for_iter.3) ['$224for_iter.3', '$224for_iter.5']
    $phi226.3 = $224for_iter.4               ['$224for_iter.4', '$phi226.3']
    branch $224for_iter.5, 226, 282          ['$224for_iter.5']
label 226:
    k = $phi226.3                            ['$phi226.3', 'k']
    $const234.7 = const(int, 1)              ['$const234.7']
    $236binary_subtract.8 = k - $const234.7  ['$236binary_subtract.8', '$const234.7', 'k']
    $238build_tuple.9 = build_tuple(items=[Var(count, _loop_hafnian_subroutines.py:140), Var($236binary_subtract.8, _loop_hafnian_subroutines.py:153)]) ['$236binary_subtract.8', '$238build_tuple.9', 'count']
    $242binary_subscr.12 = getitem(value=comb, index=$238build_tuple.9, fn=<built-in function getitem>) ['$238build_tuple.9', '$242binary_subscr.12', 'comb']
    $const246.14 = const(int, 1)             ['$const246.14']
    $250binary_subtract.16 = $const246.14 - count ['$250binary_subtract.16', '$const246.14', 'count']
    $258binary_multiply.20 = i * j           ['$258binary_multiply.20', 'i', 'j']
    $260binary_subtract.21 = k - $258binary_multiply.20 ['$258binary_multiply.20', '$260binary_subtract.21', 'k']
    $const262.22 = const(int, 1)             ['$const262.22']
    $264binary_subtract.23 = $260binary_subtract.21 - $const262.22 ['$260binary_subtract.21', '$264binary_subtract.23', '$const262.22']
    $266build_tuple.24 = build_tuple(items=[Var($250binary_subtract.16, _loop_hafnian_subroutines.py:153), Var($264binary_subtract.23, _loop_hafnian_subroutines.py:153)]) ['$250binary_subtract.16', '$264binary_subtract.23', '$266build_tuple.24']
    $268binary_subscr.25 = getitem(value=comb, index=$266build_tuple.24, fn=<built-in function getitem>) ['$266build_tuple.24', '$268binary_subscr.25', 'comb']
    $272binary_multiply.27 = $268binary_subscr.25 * powfactor ['$268binary_subscr.25', '$272binary_multiply.27', 'powfactor']
    $274inplace_add.28 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$242binary_subscr.12, rhs=$272binary_multiply.27, static_lhs=Undefined, static_rhs=Undefined) ['$242binary_subscr.12', '$272binary_multiply.27', '$274inplace_add.28']
    comb[$238build_tuple.9] = $274inplace_add.28 ['$238build_tuple.9', '$274inplace_add.28', 'comb']
    jump 224                                 []
label 282:
    jump 182                                 []
label 284:
    jump 68                                  []
label 286:
    $const290.2 = const(NoneType, None)      ['$const290.2']
    $const292.3 = const(NoneType, None)      ['$const292.3']
    $294build_slice.4 = global(slice: <class 'slice'>) ['$294build_slice.4']
    $294build_slice.5 = call $294build_slice.4($const290.2, $const292.3, func=$294build_slice.4, args=(Var($const290.2, _loop_hafnian_subroutines.py:154), Var($const292.3, _loop_hafnian_subroutines.py:154)), kws=(), vararg=None, target=None) ['$294build_slice.4', '$294build_slice.5', '$const290.2', '$const292.3']
    $296build_tuple.6 = build_tuple(items=[Var(count, _loop_hafnian_subroutines.py:140), Var($294build_slice.5, _loop_hafnian_subroutines.py:154)]) ['$294build_slice.5', '$296build_tuple.6', 'count']
    $298binary_subscr.7 = getitem(value=comb, index=$296build_tuple.6, fn=<built-in function getitem>) ['$296build_tuple.6', '$298binary_subscr.7', 'comb']
    $300return_value.8 = cast(value=$298binary_subscr.7) ['$298binary_subscr.7', '$300return_value.8']
    return $300return_value.8                ['$300return_value.8']

DEBUG 2022-02-14 16:38:02,143 ==== SSA block analysis pass on 0
DEBUG 2022-02-14 16:38:02,143 Running <numba.core.ssa._GatherDefsHandler object at 0x7fa0470fa340>
DEBUG 2022-02-14 16:38:02,143 on stmt: E = arg(0, name=E)
DEBUG 2022-02-14 16:38:02,143 on stmt: AX_S = arg(1, name=AX_S)
DEBUG 2022-02-14 16:38:02,143 on stmt: XD_S = arg(2, name=XD_S)
DEBUG 2022-02-14 16:38:02,143 on stmt: D_S = arg(3, name=D_S)
DEBUG 2022-02-14 16:38:02,143 on stmt: n = arg(4, name=n)
DEBUG 2022-02-14 16:38:02,143 on stmt: $4load_method.1 = getattr(value=E, attr=copy)
DEBUG 2022-02-14 16:38:02,143 on stmt: E_k = call $4load_method.1(func=$4load_method.1, args=[], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:02,143 on stmt: count = const(int, 0)
DEBUG 2022-02-14 16:38:02,144 on stmt: $14load_global.4 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:38:02,144 on stmt: $16load_attr.5 = getattr(value=$14load_global.4, attr=zeros)
DEBUG 2022-02-14 16:38:02,144 on stmt: $const18.6 = const(int, 2)
DEBUG 2022-02-14 16:38:02,144 on stmt: $const22.8 = const(int, 2)
DEBUG 2022-02-14 16:38:02,144 on stmt: $24binary_floor_divide.9 = n // $const22.8
DEBUG 2022-02-14 16:38:02,144 on stmt: $const26.10 = const(int, 1)
DEBUG 2022-02-14 16:38:02,144 on stmt: $28binary_add.11 = $24binary_floor_divide.9 + $const26.10
DEBUG 2022-02-14 16:38:02,144 on stmt: $30build_tuple.12 = build_tuple(items=[Var($const18.6, _loop_hafnian_subroutines.py:141), Var($28binary_add.11, _loop_hafnian_subroutines.py:141)])
DEBUG 2022-02-14 16:38:02,144 on stmt: $32load_global.13 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:38:02,144 on stmt: $34load_attr.14 = getattr(value=$32load_global.13, attr=complex128)
DEBUG 2022-02-14 16:38:02,144 on stmt: comb = call $16load_attr.5($30build_tuple.12, func=$16load_attr.5, args=[Var($30build_tuple.12, _loop_hafnian_subroutines.py:141)], kws=[('dtype', Var($34load_attr.14, _loop_hafnian_subroutines.py:141))], vararg=None, target=None)
DEBUG 2022-02-14 16:38:02,144 on stmt: $const42.17 = const(int, 1)
DEBUG 2022-02-14 16:38:02,144 on stmt: $const_0 = const(int, 0)
DEBUG 2022-02-14 16:38:02,144 on stmt: $const_0.1 = const(int, 0)
DEBUG 2022-02-14 16:38:02,144 on stmt: $const46.19 = build_tuple(items=[Var($const_0, _loop_hafnian_subroutines.py:142), Var($const_0.1, _loop_hafnian_subroutines.py:142)])
DEBUG 2022-02-14 16:38:02,144 on stmt: comb[(0, 0)] = $const42.17
DEBUG 2022-02-14 16:38:02,145 on stmt: $50load_global.20 = global(range: <class 'range'>)
DEBUG 2022-02-14 16:38:02,145 on stmt: $const52.21 = const(int, 1)
DEBUG 2022-02-14 16:38:02,145 on stmt: $const56.23 = const(int, 2)
DEBUG 2022-02-14 16:38:02,145 on stmt: $58binary_floor_divide.24 = n // $const56.23
DEBUG 2022-02-14 16:38:02,145 on stmt: $const60.25 = const(int, 1)
DEBUG 2022-02-14 16:38:02,145 on stmt: $62binary_add.26 = $58binary_floor_divide.24 + $const60.25
DEBUG 2022-02-14 16:38:02,145 on stmt: $64call_function.27 = call $50load_global.20($const52.21, $62binary_add.26, func=$50load_global.20, args=[Var($const52.21, _loop_hafnian_subroutines.py:143), Var($62binary_add.26, _loop_hafnian_subroutines.py:143)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:02,145 on stmt: $66get_iter.28 = getiter(value=$64call_function.27)
DEBUG 2022-02-14 16:38:02,145 on stmt: $phi68.0 = $66get_iter.28
DEBUG 2022-02-14 16:38:02,145 on stmt: jump 68
DEBUG 2022-02-14 16:38:02,145 ==== SSA block analysis pass on 68
DEBUG 2022-02-14 16:38:02,145 Running <numba.core.ssa._GatherDefsHandler object at 0x7fa0470fa340>
DEBUG 2022-02-14 16:38:02,145 on stmt: $68for_iter.1 = iternext(value=$phi68.0)
DEBUG 2022-02-14 16:38:02,145 on stmt: $68for_iter.2 = pair_first(value=$68for_iter.1)
DEBUG 2022-02-14 16:38:02,145 on stmt: $68for_iter.3 = pair_second(value=$68for_iter.1)
DEBUG 2022-02-14 16:38:02,145 on stmt: $phi70.1 = $68for_iter.2
DEBUG 2022-02-14 16:38:02,145 on stmt: branch $68for_iter.3, 70, 286
DEBUG 2022-02-14 16:38:02,145 ==== SSA block analysis pass on 70
DEBUG 2022-02-14 16:38:02,145 Running <numba.core.ssa._GatherDefsHandler object at 0x7fa0470fa340>
DEBUG 2022-02-14 16:38:02,145 on stmt: i = $phi70.1
DEBUG 2022-02-14 16:38:02,146 on stmt: $74load_method.3 = getattr(value=E_k, attr=sum)
DEBUG 2022-02-14 16:38:02,146 on stmt: $76call_method.4 = call $74load_method.3(func=$74load_method.3, args=[], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:02,146 on stmt: $const78.5 = const(int, 2)
DEBUG 2022-02-14 16:38:02,146 on stmt: $82binary_multiply.7 = $const78.5 * i
DEBUG 2022-02-14 16:38:02,146 on stmt: $84binary_true_divide.8 = $76call_method.4 / $82binary_multiply.7
DEBUG 2022-02-14 16:38:02,146 on stmt: $90binary_matrix_multiply.11 = XD_S <built-in function matmul> D_S
DEBUG 2022-02-14 16:38:02,146 on stmt: $const92.12 = const(int, 2)
DEBUG 2022-02-14 16:38:02,146 on stmt: $94binary_true_divide.13 = $90binary_matrix_multiply.11 / $const92.12
DEBUG 2022-02-14 16:38:02,146 on stmt: factor = $84binary_true_divide.8 + $94binary_true_divide.13
DEBUG 2022-02-14 16:38:02,146 on stmt: $104inplace_multiply.17 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=E_k, rhs=E, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:38:02,146 on stmt: E_k = $104inplace_multiply.17
DEBUG 2022-02-14 16:38:02,146 on stmt: $112binary_matrix_multiply.20 = XD_S <built-in function matmul> AX_S
DEBUG 2022-02-14 16:38:02,146 on stmt: XD_S = $112binary_matrix_multiply.20
DEBUG 2022-02-14 16:38:02,146 on stmt: powfactor = const(int, 1)
DEBUG 2022-02-14 16:38:02,146 on stmt: $const120.22 = const(int, 1)
DEBUG 2022-02-14 16:38:02,146 on stmt: $124binary_subtract.24 = $const120.22 - count
DEBUG 2022-02-14 16:38:02,146 on stmt: count = $124binary_subtract.24
DEBUG 2022-02-14 16:38:02,146 on stmt: $const130.26 = const(int, 1)
DEBUG 2022-02-14 16:38:02,146 on stmt: $134binary_subtract.28 = $const130.26 - count
DEBUG 2022-02-14 16:38:02,146 on stmt: $const136.29 = const(NoneType, None)
DEBUG 2022-02-14 16:38:02,146 on stmt: $const138.30 = const(NoneType, None)
DEBUG 2022-02-14 16:38:02,146 on stmt: $140build_slice.31 = global(slice: <class 'slice'>)
DEBUG 2022-02-14 16:38:02,146 on stmt: $140build_slice.32 = call $140build_slice.31($const136.29, $const138.30, func=$140build_slice.31, args=(Var($const136.29, _loop_hafnian_subroutines.py:149), Var($const138.30, _loop_hafnian_subroutines.py:149)), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:02,147 on stmt: $142build_tuple.33 = build_tuple(items=[Var($134binary_subtract.28, _loop_hafnian_subroutines.py:149), Var($140build_slice.32, _loop_hafnian_subroutines.py:149)])
DEBUG 2022-02-14 16:38:02,147 on stmt: $144binary_subscr.34 = getitem(value=comb, index=$142build_tuple.33, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:02,147 on stmt: $const150.37 = const(NoneType, None)
DEBUG 2022-02-14 16:38:02,147 on stmt: $const152.38 = const(NoneType, None)
DEBUG 2022-02-14 16:38:02,147 on stmt: $154build_slice.39 = global(slice: <class 'slice'>)
DEBUG 2022-02-14 16:38:02,147 on stmt: $154build_slice.40 = call $154build_slice.39($const150.37, $const152.38, func=$154build_slice.39, args=(Var($const150.37, _loop_hafnian_subroutines.py:149), Var($const152.38, _loop_hafnian_subroutines.py:149)), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:02,147 on stmt: $156build_tuple.41 = build_tuple(items=[Var(count, _loop_hafnian_subroutines.py:140), Var($154build_slice.40, _loop_hafnian_subroutines.py:149)])
DEBUG 2022-02-14 16:38:02,147 on stmt: comb[$156build_tuple.41] = $144binary_subscr.34
DEBUG 2022-02-14 16:38:02,147 on stmt: $160load_global.42 = global(range: <class 'range'>)
DEBUG 2022-02-14 16:38:02,147 on stmt: $const162.43 = const(int, 1)
DEBUG 2022-02-14 16:38:02,147 on stmt: $const166.45 = const(int, 2)
DEBUG 2022-02-14 16:38:02,147 on stmt: $170binary_multiply.47 = $const166.45 * i
DEBUG 2022-02-14 16:38:02,147 on stmt: $172binary_floor_divide.48 = n // $170binary_multiply.47
DEBUG 2022-02-14 16:38:02,147 on stmt: $const174.49 = const(int, 1)
DEBUG 2022-02-14 16:38:02,147 on stmt: $176binary_add.50 = $172binary_floor_divide.48 + $const174.49
DEBUG 2022-02-14 16:38:02,147 on stmt: $178call_function.51 = call $160load_global.42($const162.43, $176binary_add.50, func=$160load_global.42, args=[Var($const162.43, _loop_hafnian_subroutines.py:150), Var($176binary_add.50, _loop_hafnian_subroutines.py:150)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:02,147 on stmt: $180get_iter.52 = getiter(value=$178call_function.51)
DEBUG 2022-02-14 16:38:02,147 on stmt: $phi182.1 = $180get_iter.52
DEBUG 2022-02-14 16:38:02,147 on stmt: jump 182
DEBUG 2022-02-14 16:38:02,147 ==== SSA block analysis pass on 182
DEBUG 2022-02-14 16:38:02,147 Running <numba.core.ssa._GatherDefsHandler object at 0x7fa0470fa340>
DEBUG 2022-02-14 16:38:02,147 on stmt: $182for_iter.2 = iternext(value=$phi182.1)
DEBUG 2022-02-14 16:38:02,147 on stmt: $182for_iter.3 = pair_first(value=$182for_iter.2)
DEBUG 2022-02-14 16:38:02,147 on stmt: $182for_iter.4 = pair_second(value=$182for_iter.2)
DEBUG 2022-02-14 16:38:02,147 on stmt: $phi184.2 = $182for_iter.3
DEBUG 2022-02-14 16:38:02,148 on stmt: branch $182for_iter.4, 184, 284
DEBUG 2022-02-14 16:38:02,148 ==== SSA block analysis pass on 184
DEBUG 2022-02-14 16:38:02,148 Running <numba.core.ssa._GatherDefsHandler object at 0x7fa0470fa340>
DEBUG 2022-02-14 16:38:02,148 on stmt: j = $phi184.2
DEBUG 2022-02-14 16:38:02,148 on stmt: $192binary_true_divide.6 = factor / j
DEBUG 2022-02-14 16:38:02,148 on stmt: $194inplace_multiply.7 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=powfactor, rhs=$192binary_true_divide.6, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:38:02,148 on stmt: powfactor = $194inplace_multiply.7
DEBUG 2022-02-14 16:38:02,148 on stmt: $198load_global.8 = global(range: <class 'range'>)
DEBUG 2022-02-14 16:38:02,148 on stmt: $204binary_multiply.11 = i * j
DEBUG 2022-02-14 16:38:02,148 on stmt: $const206.12 = const(int, 1)
DEBUG 2022-02-14 16:38:02,148 on stmt: $208binary_add.13 = $204binary_multiply.11 + $const206.12
DEBUG 2022-02-14 16:38:02,148 on stmt: $const212.15 = const(int, 2)
DEBUG 2022-02-14 16:38:02,148 on stmt: $214binary_floor_divide.16 = n // $const212.15
DEBUG 2022-02-14 16:38:02,148 on stmt: $const216.17 = const(int, 2)
DEBUG 2022-02-14 16:38:02,148 on stmt: $218binary_add.18 = $214binary_floor_divide.16 + $const216.17
DEBUG 2022-02-14 16:38:02,148 on stmt: $220call_function.19 = call $198load_global.8($208binary_add.13, $218binary_add.18, func=$198load_global.8, args=[Var($208binary_add.13, _loop_hafnian_subroutines.py:152), Var($218binary_add.18, _loop_hafnian_subroutines.py:152)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:02,148 on stmt: $222get_iter.20 = getiter(value=$220call_function.19)
DEBUG 2022-02-14 16:38:02,148 on stmt: $phi224.2 = $222get_iter.20
DEBUG 2022-02-14 16:38:02,148 on stmt: jump 224
DEBUG 2022-02-14 16:38:02,148 ==== SSA block analysis pass on 224
DEBUG 2022-02-14 16:38:02,148 Running <numba.core.ssa._GatherDefsHandler object at 0x7fa0470fa340>
DEBUG 2022-02-14 16:38:02,148 on stmt: $224for_iter.3 = iternext(value=$phi224.2)
DEBUG 2022-02-14 16:38:02,148 on stmt: $224for_iter.4 = pair_first(value=$224for_iter.3)
DEBUG 2022-02-14 16:38:02,148 on stmt: $224for_iter.5 = pair_second(value=$224for_iter.3)
DEBUG 2022-02-14 16:38:02,148 on stmt: $phi226.3 = $224for_iter.4
DEBUG 2022-02-14 16:38:02,148 on stmt: branch $224for_iter.5, 226, 282
DEBUG 2022-02-14 16:38:02,149 ==== SSA block analysis pass on 226
DEBUG 2022-02-14 16:38:02,149 Running <numba.core.ssa._GatherDefsHandler object at 0x7fa0470fa340>
DEBUG 2022-02-14 16:38:02,149 on stmt: k = $phi226.3
DEBUG 2022-02-14 16:38:02,149 on stmt: $const234.7 = const(int, 1)
DEBUG 2022-02-14 16:38:02,149 on stmt: $236binary_subtract.8 = k - $const234.7
DEBUG 2022-02-14 16:38:02,149 on stmt: $238build_tuple.9 = build_tuple(items=[Var(count, _loop_hafnian_subroutines.py:140), Var($236binary_subtract.8, _loop_hafnian_subroutines.py:153)])
DEBUG 2022-02-14 16:38:02,149 on stmt: $242binary_subscr.12 = getitem(value=comb, index=$238build_tuple.9, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:02,149 on stmt: $const246.14 = const(int, 1)
DEBUG 2022-02-14 16:38:02,149 on stmt: $250binary_subtract.16 = $const246.14 - count
DEBUG 2022-02-14 16:38:02,149 on stmt: $258binary_multiply.20 = i * j
DEBUG 2022-02-14 16:38:02,149 on stmt: $260binary_subtract.21 = k - $258binary_multiply.20
DEBUG 2022-02-14 16:38:02,149 on stmt: $const262.22 = const(int, 1)
DEBUG 2022-02-14 16:38:02,149 on stmt: $264binary_subtract.23 = $260binary_subtract.21 - $const262.22
DEBUG 2022-02-14 16:38:02,149 on stmt: $266build_tuple.24 = build_tuple(items=[Var($250binary_subtract.16, _loop_hafnian_subroutines.py:153), Var($264binary_subtract.23, _loop_hafnian_subroutines.py:153)])
DEBUG 2022-02-14 16:38:02,149 on stmt: $268binary_subscr.25 = getitem(value=comb, index=$266build_tuple.24, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:02,149 on stmt: $272binary_multiply.27 = $268binary_subscr.25 * powfactor
DEBUG 2022-02-14 16:38:02,149 on stmt: $274inplace_add.28 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$242binary_subscr.12, rhs=$272binary_multiply.27, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:38:02,149 on stmt: comb[$238build_tuple.9] = $274inplace_add.28
DEBUG 2022-02-14 16:38:02,149 on stmt: jump 224
DEBUG 2022-02-14 16:38:02,149 ==== SSA block analysis pass on 282
DEBUG 2022-02-14 16:38:02,149 Running <numba.core.ssa._GatherDefsHandler object at 0x7fa0470fa340>
DEBUG 2022-02-14 16:38:02,149 on stmt: jump 182
DEBUG 2022-02-14 16:38:02,149 ==== SSA block analysis pass on 284
DEBUG 2022-02-14 16:38:02,149 Running <numba.core.ssa._GatherDefsHandler object at 0x7fa0470fa340>
DEBUG 2022-02-14 16:38:02,149 on stmt: jump 68
DEBUG 2022-02-14 16:38:02,149 ==== SSA block analysis pass on 286
DEBUG 2022-02-14 16:38:02,150 Running <numba.core.ssa._GatherDefsHandler object at 0x7fa0470fa340>
DEBUG 2022-02-14 16:38:02,150 on stmt: $const290.2 = const(NoneType, None)
DEBUG 2022-02-14 16:38:02,150 on stmt: $const292.3 = const(NoneType, None)
DEBUG 2022-02-14 16:38:02,150 on stmt: $294build_slice.4 = global(slice: <class 'slice'>)
DEBUG 2022-02-14 16:38:02,150 on stmt: $294build_slice.5 = call $294build_slice.4($const290.2, $const292.3, func=$294build_slice.4, args=(Var($const290.2, _loop_hafnian_subroutines.py:154), Var($const292.3, _loop_hafnian_subroutines.py:154)), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:02,150 on stmt: $296build_tuple.6 = build_tuple(items=[Var(count, _loop_hafnian_subroutines.py:140), Var($294build_slice.5, _loop_hafnian_subroutines.py:154)])
DEBUG 2022-02-14 16:38:02,150 on stmt: $298binary_subscr.7 = getitem(value=comb, index=$296build_tuple.6, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:02,150 on stmt: $300return_value.8 = cast(value=$298binary_subscr.7)
DEBUG 2022-02-14 16:38:02,150 on stmt: return $300return_value.8
DEBUG 2022-02-14 16:38:02,151 defs defaultdict(<class 'list'>,
            {'$104inplace_multiply.17': [<numba.core.ir.Assign object at 0x7fa04676c550>],
             '$112binary_matrix_multiply.20': [<numba.core.ir.Assign object at 0x7fa04676c9d0>],
             '$124binary_subtract.24': [<numba.core.ir.Assign object at 0x7fa04676e190>],
             '$134binary_subtract.28': [<numba.core.ir.Assign object at 0x7fa04676e790>],
             '$140build_slice.31': [<numba.core.ir.Assign object at 0x7fa04676ebe0>],
             '$140build_slice.32': [<numba.core.ir.Assign object at 0x7fa04676ed00>],
             '$142build_tuple.33': [<numba.core.ir.Assign object at 0x7fa04676eeb0>],
             '$144binary_subscr.34': [<numba.core.ir.Assign object at 0x7fa046770070>],
             '$14load_global.4': [<numba.core.ir.Assign object at 0x7fa04675bfa0>],
             '$154build_slice.39': [<numba.core.ir.Assign object at 0x7fa046770700>],
             '$154build_slice.40': [<numba.core.ir.Assign object at 0x7fa046770820>],
             '$156build_tuple.41': [<numba.core.ir.Assign object at 0x7fa0467709d0>],
             '$160load_global.42': [<numba.core.ir.Assign object at 0x7fa046770be0>],
             '$16load_attr.5': [<numba.core.ir.Assign object at 0x7fa04675d160>],
             '$170binary_multiply.47': [<numba.core.ir.Assign object at 0x7fa046772310>],
             '$172binary_floor_divide.48': [<numba.core.ir.Assign object at 0x7fa046772490>],
             '$176binary_add.50': [<numba.core.ir.Assign object at 0x7fa046772790>],
             '$178call_function.51': [<numba.core.ir.Assign object at 0x7fa046772940>],
             '$180get_iter.52': [<numba.core.ir.Assign object at 0x7fa046772a60>],
             '$182for_iter.2': [<numba.core.ir.Assign object at 0x7fa04676c8b0>],
             '$182for_iter.3': [<numba.core.ir.Assign object at 0x7fa04676e3d0>],
             '$182for_iter.4': [<numba.core.ir.Assign object at 0x7fa046770310>],
             '$192binary_true_divide.6': [<numba.core.ir.Assign object at 0x7fa0467741f0>],
             '$194inplace_multiply.7': [<numba.core.ir.Assign object at 0x7fa046774370>],
             '$198load_global.8': [<numba.core.ir.Assign object at 0x7fa046774580>],
             '$204binary_multiply.11': [<numba.core.ir.Assign object at 0x7fa046774970>],
             '$208binary_add.13': [<numba.core.ir.Assign object at 0x7fa046774c70>],
             '$214binary_floor_divide.16': [<numba.core.ir.Assign object at 0x7fa0467760d0>],
             '$218binary_add.18': [<numba.core.ir.Assign object at 0x7fa0467763d0>],
             '$220call_function.19': [<numba.core.ir.Assign object at 0x7fa046776580>],
             '$222get_iter.20': [<numba.core.ir.Assign object at 0x7fa0467766a0>],
             '$224for_iter.3': [<numba.core.ir.Assign object at 0x7fa0467767f0>],
             '$224for_iter.4': [<numba.core.ir.Assign object at 0x7fa046776910>],
             '$224for_iter.5': [<numba.core.ir.Assign object at 0x7fa046776a30>],
             '$236binary_subtract.8': [<numba.core.ir.Assign object at 0x7fa0467793d0>],
             '$238build_tuple.9': [<numba.core.ir.Assign object at 0x7fa046779550>],
             '$242binary_subscr.12': [<numba.core.ir.Assign object at 0x7fa0467798b0>],
             '$24binary_floor_divide.9': [<numba.core.ir.Assign object at 0x7fa04675d730>],
             '$250binary_subtract.16': [<numba.core.ir.Assign object at 0x7fa046779df0>],
             '$258binary_multiply.20': [<numba.core.ir.Assign object at 0x7fa04677c310>],
             '$260binary_subtract.21': [<numba.core.ir.Assign object at 0x7fa04677c490>],
             '$264binary_subtract.23': [<numba.core.ir.Assign object at 0x7fa04677c790>],
             '$266build_tuple.24': [<numba.core.ir.Assign object at 0x7fa04677c910>],
             '$268binary_subscr.25': [<numba.core.ir.Assign object at 0x7fa04677ca90>],
             '$272binary_multiply.27': [<numba.core.ir.Assign object at 0x7fa04677cd30>],
             '$274inplace_add.28': [<numba.core.ir.Assign object at 0x7fa04677ceb0>],
             '$28binary_add.11': [<numba.core.ir.Assign object at 0x7fa04675da30>],
             '$294build_slice.4': [<numba.core.ir.Assign object at 0x7fa04677d6a0>],
             '$294build_slice.5': [<numba.core.ir.Assign object at 0x7fa04677d7c0>],
             '$296build_tuple.6': [<numba.core.ir.Assign object at 0x7fa04677d970>],
             '$298binary_subscr.7': [<numba.core.ir.Assign object at 0x7fa04677daf0>],
             '$300return_value.8': [<numba.core.ir.Assign object at 0x7fa04677dc40>],
             '$30build_tuple.12': [<numba.core.ir.Assign object at 0x7fa04675dbb0>],
             '$32load_global.13': [<numba.core.ir.Assign object at 0x7fa04675dd00>],
             '$34load_attr.14': [<numba.core.ir.Assign object at 0x7fa04675de80>],
             '$4load_method.1': [<numba.core.ir.Assign object at 0x7fa04675b8e0>],
             '$50load_global.20': [<numba.core.ir.Assign object at 0x7fa046766be0>],
             '$58binary_floor_divide.24': [<numba.core.ir.Assign object at 0x7fa0467691f0>],
             '$62binary_add.26': [<numba.core.ir.Assign object at 0x7fa0467694f0>],
             '$64call_function.27': [<numba.core.ir.Assign object at 0x7fa0467696a0>],
             '$66get_iter.28': [<numba.core.ir.Assign object at 0x7fa0467697c0>],
             '$68for_iter.1': [<numba.core.ir.Assign object at 0x7fa0467698b0>],
             '$68for_iter.2': [<numba.core.ir.Assign object at 0x7fa0467699d0>],
             '$68for_iter.3': [<numba.core.ir.Assign object at 0x7fa046769af0>],
             '$74load_method.3': [<numba.core.ir.Assign object at 0x7fa04676a0a0>],
             '$76call_method.4': [<numba.core.ir.Assign object at 0x7fa04676a2b0>],
             '$82binary_multiply.7': [<numba.core.ir.Assign object at 0x7fa04676a670>],
             '$84binary_true_divide.8': [<numba.core.ir.Assign object at 0x7fa04676a7f0>],
             '$90binary_matrix_multiply.11': [<numba.core.ir.Assign object at 0x7fa04676abb0>],
             '$94binary_true_divide.13': [<numba.core.ir.Assign object at 0x7fa04676aeb0>],
             '$const120.22': [<numba.core.ir.Assign object at 0x7fa04676ce80>],
             '$const130.26': [<numba.core.ir.Assign object at 0x7fa04676e4c0>],
             '$const136.29': [<numba.core.ir.Assign object at 0x7fa04676e8e0>],
             '$const138.30': [<numba.core.ir.Assign object at 0x7fa04676ea60>],
             '$const150.37': [<numba.core.ir.Assign object at 0x7fa046770400>],
             '$const152.38': [<numba.core.ir.Assign object at 0x7fa046770580>],
             '$const162.43': [<numba.core.ir.Assign object at 0x7fa046770d60>],
             '$const166.45': [<numba.core.ir.Assign object at 0x7fa046772040>],
             '$const174.49': [<numba.core.ir.Assign object at 0x7fa0467725e0>],
             '$const18.6': [<numba.core.ir.Assign object at 0x7fa04675d2e0>],
             '$const206.12': [<numba.core.ir.Assign object at 0x7fa046774ac0>],
             '$const212.15': [<numba.core.ir.Assign object at 0x7fa046774ee0>],
             '$const216.17': [<numba.core.ir.Assign object at 0x7fa046776220>],
             '$const22.8': [<numba.core.ir.Assign object at 0x7fa04675d580>],
             '$const234.7': [<numba.core.ir.Assign object at 0x7fa046779220>],
             '$const246.14': [<numba.core.ir.Assign object at 0x7fa046779b20>],
             '$const26.10': [<numba.core.ir.Assign object at 0x7fa04675d880>],
             '$const262.22': [<numba.core.ir.Assign object at 0x7fa04677c5e0>],
             '$const290.2': [<numba.core.ir.Assign object at 0x7fa04677d3a0>],
             '$const292.3': [<numba.core.ir.Assign object at 0x7fa04677d520>],
             '$const42.17': [<numba.core.ir.Assign object at 0x7fa0467664c0>],
             '$const46.19': [<numba.core.ir.Assign object at 0x7fa0467669a0>],
             '$const52.21': [<numba.core.ir.Assign object at 0x7fa046766d60>],
             '$const56.23': [<numba.core.ir.Assign object at 0x7fa046769040>],
             '$const60.25': [<numba.core.ir.Assign object at 0x7fa046769340>],
             '$const78.5': [<numba.core.ir.Assign object at 0x7fa04676a3a0>],
             '$const92.12': [<numba.core.ir.Assign object at 0x7fa04676ad00>],
             '$const_0': [<numba.core.ir.Assign object at 0x7fa046766790>],
             '$const_0.1': [<numba.core.ir.Assign object at 0x7fa0467668b0>],
             '$phi182.1': [<numba.core.ir.Assign object at 0x7fa046769f70>],
             '$phi184.2': [<numba.core.ir.Assign object at 0x7fa04676c430>],
             '$phi224.2': [<numba.core.ir.Assign object at 0x7fa046772e50>],
             '$phi226.3': [<numba.core.ir.Assign object at 0x7fa046776700>],
             '$phi68.0': [<numba.core.ir.Assign object at 0x7fa04675d490>],
             '$phi70.1': [<numba.core.ir.Assign object at 0x7fa04675beb0>],
             'AX_S': [<numba.core.ir.Assign object at 0x7fa04675b2e0>],
             'D_S': [<numba.core.ir.Assign object at 0x7fa04675b520>],
             'E': [<numba.core.ir.Assign object at 0x7fa04675b1c0>],
             'E_k': [<numba.core.ir.Assign object at 0x7fa04675baf0>,
                     <numba.core.ir.Assign object at 0x7fa04676c610>],
             'XD_S': [<numba.core.ir.Assign object at 0x7fa04675b400>,
                      <numba.core.ir.Assign object at 0x7fa04676ca90>],
             'comb': [<numba.core.ir.Assign object at 0x7fa046766340>],
             'count': [<numba.core.ir.Assign object at 0x7fa04675bd00>,
                       <numba.core.ir.Assign object at 0x7fa04676e250>],
             'factor': [<numba.core.ir.Assign object at 0x7fa04676c070>],
             'i': [<numba.core.ir.Assign object at 0x7fa046769dc0>],
             'j': [<numba.core.ir.Assign object at 0x7fa046772ca0>],
             'k': [<numba.core.ir.Assign object at 0x7fa046776d00>],
             'n': [<numba.core.ir.Assign object at 0x7fa04675b640>],
             'powfactor': [<numba.core.ir.Assign object at 0x7fa04676cbe0>,
                           <numba.core.ir.Assign object at 0x7fa046774430>]})
DEBUG 2022-02-14 16:38:02,151 SSA violators {'powfactor', 'count', 'XD_S', 'E_k'}
DEBUG 2022-02-14 16:38:02,151 Fix SSA violator on var powfactor
DEBUG 2022-02-14 16:38:02,151 ==== SSA block rewrite pass on 0
DEBUG 2022-02-14 16:38:02,151 Running <numba.core.ssa._FreshVarHandler object at 0x7fa0467fce80>
DEBUG 2022-02-14 16:38:02,151 on stmt: E = arg(0, name=E)
DEBUG 2022-02-14 16:38:02,151 on stmt: AX_S = arg(1, name=AX_S)
DEBUG 2022-02-14 16:38:02,151 on stmt: XD_S = arg(2, name=XD_S)
DEBUG 2022-02-14 16:38:02,151 on stmt: D_S = arg(3, name=D_S)
DEBUG 2022-02-14 16:38:02,151 on stmt: n = arg(4, name=n)
DEBUG 2022-02-14 16:38:02,151 on stmt: $4load_method.1 = getattr(value=E, attr=copy)
DEBUG 2022-02-14 16:38:02,151 on stmt: E_k = call $4load_method.1(func=$4load_method.1, args=[], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:02,151 on stmt: count = const(int, 0)
DEBUG 2022-02-14 16:38:02,151 on stmt: $14load_global.4 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:38:02,152 on stmt: $16load_attr.5 = getattr(value=$14load_global.4, attr=zeros)
DEBUG 2022-02-14 16:38:02,152 on stmt: $const18.6 = const(int, 2)
DEBUG 2022-02-14 16:38:02,152 on stmt: $const22.8 = const(int, 2)
DEBUG 2022-02-14 16:38:02,152 on stmt: $24binary_floor_divide.9 = n // $const22.8
DEBUG 2022-02-14 16:38:02,152 on stmt: $const26.10 = const(int, 1)
DEBUG 2022-02-14 16:38:02,152 on stmt: $28binary_add.11 = $24binary_floor_divide.9 + $const26.10
DEBUG 2022-02-14 16:38:02,152 on stmt: $30build_tuple.12 = build_tuple(items=[Var($const18.6, _loop_hafnian_subroutines.py:141), Var($28binary_add.11, _loop_hafnian_subroutines.py:141)])
DEBUG 2022-02-14 16:38:02,152 on stmt: $32load_global.13 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:38:02,152 on stmt: $34load_attr.14 = getattr(value=$32load_global.13, attr=complex128)
DEBUG 2022-02-14 16:38:02,152 on stmt: comb = call $16load_attr.5($30build_tuple.12, func=$16load_attr.5, args=[Var($30build_tuple.12, _loop_hafnian_subroutines.py:141)], kws=[('dtype', Var($34load_attr.14, _loop_hafnian_subroutines.py:141))], vararg=None, target=None)
DEBUG 2022-02-14 16:38:02,152 on stmt: $const42.17 = const(int, 1)
DEBUG 2022-02-14 16:38:02,152 on stmt: $const_0 = const(int, 0)
DEBUG 2022-02-14 16:38:02,152 on stmt: $const_0.1 = const(int, 0)
DEBUG 2022-02-14 16:38:02,152 on stmt: $const46.19 = build_tuple(items=[Var($const_0, _loop_hafnian_subroutines.py:142), Var($const_0.1, _loop_hafnian_subroutines.py:142)])
DEBUG 2022-02-14 16:38:02,152 on stmt: comb[(0, 0)] = $const42.17
DEBUG 2022-02-14 16:38:02,152 on stmt: $50load_global.20 = global(range: <class 'range'>)
DEBUG 2022-02-14 16:38:02,152 on stmt: $const52.21 = const(int, 1)
DEBUG 2022-02-14 16:38:02,152 on stmt: $const56.23 = const(int, 2)
DEBUG 2022-02-14 16:38:02,152 on stmt: $58binary_floor_divide.24 = n // $const56.23
DEBUG 2022-02-14 16:38:02,152 on stmt: $const60.25 = const(int, 1)
DEBUG 2022-02-14 16:38:02,152 on stmt: $62binary_add.26 = $58binary_floor_divide.24 + $const60.25
DEBUG 2022-02-14 16:38:02,152 on stmt: $64call_function.27 = call $50load_global.20($const52.21, $62binary_add.26, func=$50load_global.20, args=[Var($const52.21, _loop_hafnian_subroutines.py:143), Var($62binary_add.26, _loop_hafnian_subroutines.py:143)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:02,152 on stmt: $66get_iter.28 = getiter(value=$64call_function.27)
DEBUG 2022-02-14 16:38:02,152 on stmt: $phi68.0 = $66get_iter.28
DEBUG 2022-02-14 16:38:02,152 on stmt: jump 68
DEBUG 2022-02-14 16:38:02,153 ==== SSA block rewrite pass on 68
DEBUG 2022-02-14 16:38:02,153 Running <numba.core.ssa._FreshVarHandler object at 0x7fa0467fce80>
DEBUG 2022-02-14 16:38:02,153 on stmt: $68for_iter.1 = iternext(value=$phi68.0)
DEBUG 2022-02-14 16:38:02,153 on stmt: $68for_iter.2 = pair_first(value=$68for_iter.1)
DEBUG 2022-02-14 16:38:02,153 on stmt: $68for_iter.3 = pair_second(value=$68for_iter.1)
DEBUG 2022-02-14 16:38:02,153 on stmt: $phi70.1 = $68for_iter.2
DEBUG 2022-02-14 16:38:02,153 on stmt: branch $68for_iter.3, 70, 286
DEBUG 2022-02-14 16:38:02,153 ==== SSA block rewrite pass on 70
DEBUG 2022-02-14 16:38:02,153 Running <numba.core.ssa._FreshVarHandler object at 0x7fa0467fce80>
DEBUG 2022-02-14 16:38:02,153 on stmt: i = $phi70.1
DEBUG 2022-02-14 16:38:02,153 on stmt: $74load_method.3 = getattr(value=E_k, attr=sum)
DEBUG 2022-02-14 16:38:02,153 on stmt: $76call_method.4 = call $74load_method.3(func=$74load_method.3, args=[], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:02,153 on stmt: $const78.5 = const(int, 2)
DEBUG 2022-02-14 16:38:02,153 on stmt: $82binary_multiply.7 = $const78.5 * i
DEBUG 2022-02-14 16:38:02,153 on stmt: $84binary_true_divide.8 = $76call_method.4 / $82binary_multiply.7
DEBUG 2022-02-14 16:38:02,153 on stmt: $90binary_matrix_multiply.11 = XD_S <built-in function matmul> D_S
DEBUG 2022-02-14 16:38:02,153 on stmt: $const92.12 = const(int, 2)
DEBUG 2022-02-14 16:38:02,153 on stmt: $94binary_true_divide.13 = $90binary_matrix_multiply.11 / $const92.12
DEBUG 2022-02-14 16:38:02,153 on stmt: factor = $84binary_true_divide.8 + $94binary_true_divide.13
DEBUG 2022-02-14 16:38:02,153 on stmt: $104inplace_multiply.17 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=E_k, rhs=E, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:38:02,153 on stmt: E_k = $104inplace_multiply.17
DEBUG 2022-02-14 16:38:02,153 on stmt: $112binary_matrix_multiply.20 = XD_S <built-in function matmul> AX_S
DEBUG 2022-02-14 16:38:02,153 on stmt: XD_S = $112binary_matrix_multiply.20
DEBUG 2022-02-14 16:38:02,153 on stmt: powfactor = const(int, 1)
DEBUG 2022-02-14 16:38:02,154 first assign: powfactor
DEBUG 2022-02-14 16:38:02,154 replaced with: powfactor = const(int, 1)
DEBUG 2022-02-14 16:38:02,154 on stmt: $const120.22 = const(int, 1)
DEBUG 2022-02-14 16:38:02,154 on stmt: $124binary_subtract.24 = $const120.22 - count
DEBUG 2022-02-14 16:38:02,154 on stmt: count = $124binary_subtract.24
DEBUG 2022-02-14 16:38:02,154 on stmt: $const130.26 = const(int, 1)
DEBUG 2022-02-14 16:38:02,154 on stmt: $134binary_subtract.28 = $const130.26 - count
DEBUG 2022-02-14 16:38:02,154 on stmt: $const136.29 = const(NoneType, None)
DEBUG 2022-02-14 16:38:02,154 on stmt: $const138.30 = const(NoneType, None)
DEBUG 2022-02-14 16:38:02,154 on stmt: $140build_slice.31 = global(slice: <class 'slice'>)
DEBUG 2022-02-14 16:38:02,154 on stmt: $140build_slice.32 = call $140build_slice.31($const136.29, $const138.30, func=$140build_slice.31, args=(Var($const136.29, _loop_hafnian_subroutines.py:149), Var($const138.30, _loop_hafnian_subroutines.py:149)), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:02,154 on stmt: $142build_tuple.33 = build_tuple(items=[Var($134binary_subtract.28, _loop_hafnian_subroutines.py:149), Var($140build_slice.32, _loop_hafnian_subroutines.py:149)])
DEBUG 2022-02-14 16:38:02,154 on stmt: $144binary_subscr.34 = getitem(value=comb, index=$142build_tuple.33, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:02,154 on stmt: $const150.37 = const(NoneType, None)
DEBUG 2022-02-14 16:38:02,154 on stmt: $const152.38 = const(NoneType, None)
DEBUG 2022-02-14 16:38:02,154 on stmt: $154build_slice.39 = global(slice: <class 'slice'>)
DEBUG 2022-02-14 16:38:02,154 on stmt: $154build_slice.40 = call $154build_slice.39($const150.37, $const152.38, func=$154build_slice.39, args=(Var($const150.37, _loop_hafnian_subroutines.py:149), Var($const152.38, _loop_hafnian_subroutines.py:149)), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:02,154 on stmt: $156build_tuple.41 = build_tuple(items=[Var(count, _loop_hafnian_subroutines.py:140), Var($154build_slice.40, _loop_hafnian_subroutines.py:149)])
DEBUG 2022-02-14 16:38:02,154 on stmt: comb[$156build_tuple.41] = $144binary_subscr.34
DEBUG 2022-02-14 16:38:02,154 on stmt: $160load_global.42 = global(range: <class 'range'>)
DEBUG 2022-02-14 16:38:02,154 on stmt: $const162.43 = const(int, 1)
DEBUG 2022-02-14 16:38:02,155 on stmt: $const166.45 = const(int, 2)
DEBUG 2022-02-14 16:38:02,155 on stmt: $170binary_multiply.47 = $const166.45 * i
DEBUG 2022-02-14 16:38:02,155 on stmt: $172binary_floor_divide.48 = n // $170binary_multiply.47
DEBUG 2022-02-14 16:38:02,155 on stmt: $const174.49 = const(int, 1)
DEBUG 2022-02-14 16:38:02,155 on stmt: $176binary_add.50 = $172binary_floor_divide.48 + $const174.49
DEBUG 2022-02-14 16:38:02,155 on stmt: $178call_function.51 = call $160load_global.42($const162.43, $176binary_add.50, func=$160load_global.42, args=[Var($const162.43, _loop_hafnian_subroutines.py:150), Var($176binary_add.50, _loop_hafnian_subroutines.py:150)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:02,155 on stmt: $180get_iter.52 = getiter(value=$178call_function.51)
DEBUG 2022-02-14 16:38:02,155 on stmt: $phi182.1 = $180get_iter.52
DEBUG 2022-02-14 16:38:02,155 on stmt: jump 182
DEBUG 2022-02-14 16:38:02,155 ==== SSA block rewrite pass on 182
DEBUG 2022-02-14 16:38:02,155 Running <numba.core.ssa._FreshVarHandler object at 0x7fa0467fce80>
DEBUG 2022-02-14 16:38:02,155 on stmt: $182for_iter.2 = iternext(value=$phi182.1)
DEBUG 2022-02-14 16:38:02,155 on stmt: $182for_iter.3 = pair_first(value=$182for_iter.2)
DEBUG 2022-02-14 16:38:02,155 on stmt: $182for_iter.4 = pair_second(value=$182for_iter.2)
DEBUG 2022-02-14 16:38:02,155 on stmt: $phi184.2 = $182for_iter.3
DEBUG 2022-02-14 16:38:02,155 on stmt: branch $182for_iter.4, 184, 284
DEBUG 2022-02-14 16:38:02,155 ==== SSA block rewrite pass on 184
DEBUG 2022-02-14 16:38:02,155 Running <numba.core.ssa._FreshVarHandler object at 0x7fa0467fce80>
DEBUG 2022-02-14 16:38:02,155 on stmt: j = $phi184.2
DEBUG 2022-02-14 16:38:02,155 on stmt: $192binary_true_divide.6 = factor / j
DEBUG 2022-02-14 16:38:02,155 on stmt: $194inplace_multiply.7 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=powfactor, rhs=$192binary_true_divide.6, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:38:02,155 on stmt: powfactor = $194inplace_multiply.7
DEBUG 2022-02-14 16:38:02,155 replaced with: powfactor.1 = $194inplace_multiply.7
DEBUG 2022-02-14 16:38:02,156 on stmt: $198load_global.8 = global(range: <class 'range'>)
DEBUG 2022-02-14 16:38:02,156 on stmt: $204binary_multiply.11 = i * j
DEBUG 2022-02-14 16:38:02,156 on stmt: $const206.12 = const(int, 1)
DEBUG 2022-02-14 16:38:02,156 on stmt: $208binary_add.13 = $204binary_multiply.11 + $const206.12
DEBUG 2022-02-14 16:38:02,156 on stmt: $const212.15 = const(int, 2)
DEBUG 2022-02-14 16:38:02,156 on stmt: $214binary_floor_divide.16 = n // $const212.15
DEBUG 2022-02-14 16:38:02,156 on stmt: $const216.17 = const(int, 2)
DEBUG 2022-02-14 16:38:02,156 on stmt: $218binary_add.18 = $214binary_floor_divide.16 + $const216.17
DEBUG 2022-02-14 16:38:02,156 on stmt: $220call_function.19 = call $198load_global.8($208binary_add.13, $218binary_add.18, func=$198load_global.8, args=[Var($208binary_add.13, _loop_hafnian_subroutines.py:152), Var($218binary_add.18, _loop_hafnian_subroutines.py:152)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:02,156 on stmt: $222get_iter.20 = getiter(value=$220call_function.19)
DEBUG 2022-02-14 16:38:02,156 on stmt: $phi224.2 = $222get_iter.20
DEBUG 2022-02-14 16:38:02,156 on stmt: jump 224
DEBUG 2022-02-14 16:38:02,156 ==== SSA block rewrite pass on 224
DEBUG 2022-02-14 16:38:02,156 Running <numba.core.ssa._FreshVarHandler object at 0x7fa0467fce80>
DEBUG 2022-02-14 16:38:02,156 on stmt: $224for_iter.3 = iternext(value=$phi224.2)
DEBUG 2022-02-14 16:38:02,156 on stmt: $224for_iter.4 = pair_first(value=$224for_iter.3)
DEBUG 2022-02-14 16:38:02,156 on stmt: $224for_iter.5 = pair_second(value=$224for_iter.3)
DEBUG 2022-02-14 16:38:02,156 on stmt: $phi226.3 = $224for_iter.4
DEBUG 2022-02-14 16:38:02,156 on stmt: branch $224for_iter.5, 226, 282
DEBUG 2022-02-14 16:38:02,156 ==== SSA block rewrite pass on 226
DEBUG 2022-02-14 16:38:02,156 Running <numba.core.ssa._FreshVarHandler object at 0x7fa0467fce80>
DEBUG 2022-02-14 16:38:02,156 on stmt: k = $phi226.3
DEBUG 2022-02-14 16:38:02,156 on stmt: $const234.7 = const(int, 1)
DEBUG 2022-02-14 16:38:02,156 on stmt: $236binary_subtract.8 = k - $const234.7
DEBUG 2022-02-14 16:38:02,157 on stmt: $238build_tuple.9 = build_tuple(items=[Var(count, _loop_hafnian_subroutines.py:140), Var($236binary_subtract.8, _loop_hafnian_subroutines.py:153)])
DEBUG 2022-02-14 16:38:02,157 on stmt: $242binary_subscr.12 = getitem(value=comb, index=$238build_tuple.9, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:02,157 on stmt: $const246.14 = const(int, 1)
DEBUG 2022-02-14 16:38:02,157 on stmt: $250binary_subtract.16 = $const246.14 - count
DEBUG 2022-02-14 16:38:02,157 on stmt: $258binary_multiply.20 = i * j
DEBUG 2022-02-14 16:38:02,157 on stmt: $260binary_subtract.21 = k - $258binary_multiply.20
DEBUG 2022-02-14 16:38:02,157 on stmt: $const262.22 = const(int, 1)
DEBUG 2022-02-14 16:38:02,157 on stmt: $264binary_subtract.23 = $260binary_subtract.21 - $const262.22
DEBUG 2022-02-14 16:38:02,157 on stmt: $266build_tuple.24 = build_tuple(items=[Var($250binary_subtract.16, _loop_hafnian_subroutines.py:153), Var($264binary_subtract.23, _loop_hafnian_subroutines.py:153)])
DEBUG 2022-02-14 16:38:02,157 on stmt: $268binary_subscr.25 = getitem(value=comb, index=$266build_tuple.24, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:02,157 on stmt: $272binary_multiply.27 = $268binary_subscr.25 * powfactor
DEBUG 2022-02-14 16:38:02,157 on stmt: $274inplace_add.28 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$242binary_subscr.12, rhs=$272binary_multiply.27, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:38:02,157 on stmt: comb[$238build_tuple.9] = $274inplace_add.28
DEBUG 2022-02-14 16:38:02,157 on stmt: jump 224
DEBUG 2022-02-14 16:38:02,157 ==== SSA block rewrite pass on 282
DEBUG 2022-02-14 16:38:02,157 Running <numba.core.ssa._FreshVarHandler object at 0x7fa0467fce80>
DEBUG 2022-02-14 16:38:02,157 on stmt: jump 182
DEBUG 2022-02-14 16:38:02,157 ==== SSA block rewrite pass on 284
DEBUG 2022-02-14 16:38:02,157 Running <numba.core.ssa._FreshVarHandler object at 0x7fa0467fce80>
DEBUG 2022-02-14 16:38:02,157 on stmt: jump 68
DEBUG 2022-02-14 16:38:02,157 ==== SSA block rewrite pass on 286
DEBUG 2022-02-14 16:38:02,157 Running <numba.core.ssa._FreshVarHandler object at 0x7fa0467fce80>
DEBUG 2022-02-14 16:38:02,157 on stmt: $const290.2 = const(NoneType, None)
DEBUG 2022-02-14 16:38:02,158 on stmt: $const292.3 = const(NoneType, None)
DEBUG 2022-02-14 16:38:02,158 on stmt: $294build_slice.4 = global(slice: <class 'slice'>)
DEBUG 2022-02-14 16:38:02,158 on stmt: $294build_slice.5 = call $294build_slice.4($const290.2, $const292.3, func=$294build_slice.4, args=(Var($const290.2, _loop_hafnian_subroutines.py:154), Var($const292.3, _loop_hafnian_subroutines.py:154)), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:02,158 on stmt: $296build_tuple.6 = build_tuple(items=[Var(count, _loop_hafnian_subroutines.py:140), Var($294build_slice.5, _loop_hafnian_subroutines.py:154)])
DEBUG 2022-02-14 16:38:02,158 on stmt: $298binary_subscr.7 = getitem(value=comb, index=$296build_tuple.6, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:02,158 on stmt: $300return_value.8 = cast(value=$298binary_subscr.7)
DEBUG 2022-02-14 16:38:02,158 on stmt: return $300return_value.8
DEBUG 2022-02-14 16:38:02,158 Replaced assignments: defaultdict(<class 'list'>,
            {70: [<numba.core.ir.Assign object at 0x7fa04711c2e0>],
             184: [<numba.core.ir.Assign object at 0x7fa0470fadc0>]})
DEBUG 2022-02-14 16:38:02,158 ==== SSA block rewrite pass on 0
DEBUG 2022-02-14 16:38:02,158 Running <numba.core.ssa._FixSSAVars object at 0x7fa0467fce80>
DEBUG 2022-02-14 16:38:02,158 on stmt: E = arg(0, name=E)
DEBUG 2022-02-14 16:38:02,158 on stmt: AX_S = arg(1, name=AX_S)
DEBUG 2022-02-14 16:38:02,158 on stmt: XD_S = arg(2, name=XD_S)
DEBUG 2022-02-14 16:38:02,158 on stmt: D_S = arg(3, name=D_S)
DEBUG 2022-02-14 16:38:02,158 on stmt: n = arg(4, name=n)
DEBUG 2022-02-14 16:38:02,158 on stmt: $4load_method.1 = getattr(value=E, attr=copy)
DEBUG 2022-02-14 16:38:02,158 on stmt: E_k = call $4load_method.1(func=$4load_method.1, args=[], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:02,159 on stmt: count = const(int, 0)
DEBUG 2022-02-14 16:38:02,159 on stmt: $14load_global.4 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:38:02,159 on stmt: $16load_attr.5 = getattr(value=$14load_global.4, attr=zeros)
DEBUG 2022-02-14 16:38:02,159 on stmt: $const18.6 = const(int, 2)
DEBUG 2022-02-14 16:38:02,159 on stmt: $const22.8 = const(int, 2)
DEBUG 2022-02-14 16:38:02,159 on stmt: $24binary_floor_divide.9 = n // $const22.8
DEBUG 2022-02-14 16:38:02,159 on stmt: $const26.10 = const(int, 1)
DEBUG 2022-02-14 16:38:02,159 on stmt: $28binary_add.11 = $24binary_floor_divide.9 + $const26.10
DEBUG 2022-02-14 16:38:02,159 on stmt: $30build_tuple.12 = build_tuple(items=[Var($const18.6, _loop_hafnian_subroutines.py:141), Var($28binary_add.11, _loop_hafnian_subroutines.py:141)])
DEBUG 2022-02-14 16:38:02,159 on stmt: $32load_global.13 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:38:02,159 on stmt: $34load_attr.14 = getattr(value=$32load_global.13, attr=complex128)
DEBUG 2022-02-14 16:38:02,159 on stmt: comb = call $16load_attr.5($30build_tuple.12, func=$16load_attr.5, args=[Var($30build_tuple.12, _loop_hafnian_subroutines.py:141)], kws=[('dtype', Var($34load_attr.14, _loop_hafnian_subroutines.py:141))], vararg=None, target=None)
DEBUG 2022-02-14 16:38:02,159 on stmt: $const42.17 = const(int, 1)
DEBUG 2022-02-14 16:38:02,159 on stmt: $const_0 = const(int, 0)
DEBUG 2022-02-14 16:38:02,159 on stmt: $const_0.1 = const(int, 0)
DEBUG 2022-02-14 16:38:02,159 on stmt: $const46.19 = build_tuple(items=[Var($const_0, _loop_hafnian_subroutines.py:142), Var($const_0.1, _loop_hafnian_subroutines.py:142)])
DEBUG 2022-02-14 16:38:02,159 on stmt: comb[(0, 0)] = $const42.17
DEBUG 2022-02-14 16:38:02,160 on stmt: $50load_global.20 = global(range: <class 'range'>)
DEBUG 2022-02-14 16:38:02,160 on stmt: $const52.21 = const(int, 1)
DEBUG 2022-02-14 16:38:02,160 on stmt: $const56.23 = const(int, 2)
DEBUG 2022-02-14 16:38:02,160 on stmt: $58binary_floor_divide.24 = n // $const56.23
DEBUG 2022-02-14 16:38:02,160 on stmt: $const60.25 = const(int, 1)
DEBUG 2022-02-14 16:38:02,160 on stmt: $62binary_add.26 = $58binary_floor_divide.24 + $const60.25
DEBUG 2022-02-14 16:38:02,160 on stmt: $64call_function.27 = call $50load_global.20($const52.21, $62binary_add.26, func=$50load_global.20, args=[Var($const52.21, _loop_hafnian_subroutines.py:143), Var($62binary_add.26, _loop_hafnian_subroutines.py:143)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:02,160 on stmt: $66get_iter.28 = getiter(value=$64call_function.27)
DEBUG 2022-02-14 16:38:02,160 on stmt: $phi68.0 = $66get_iter.28
DEBUG 2022-02-14 16:38:02,160 on stmt: jump 68
DEBUG 2022-02-14 16:38:02,160 ==== SSA block rewrite pass on 68
DEBUG 2022-02-14 16:38:02,160 Running <numba.core.ssa._FixSSAVars object at 0x7fa0467fce80>
DEBUG 2022-02-14 16:38:02,160 on stmt: $68for_iter.1 = iternext(value=$phi68.0)
DEBUG 2022-02-14 16:38:02,160 on stmt: $68for_iter.2 = pair_first(value=$68for_iter.1)
DEBUG 2022-02-14 16:38:02,160 on stmt: $68for_iter.3 = pair_second(value=$68for_iter.1)
DEBUG 2022-02-14 16:38:02,160 on stmt: $phi70.1 = $68for_iter.2
DEBUG 2022-02-14 16:38:02,160 on stmt: branch $68for_iter.3, 70, 286
DEBUG 2022-02-14 16:38:02,160 ==== SSA block rewrite pass on 70
DEBUG 2022-02-14 16:38:02,160 Running <numba.core.ssa._FixSSAVars object at 0x7fa0467fce80>
DEBUG 2022-02-14 16:38:02,160 on stmt: i = $phi70.1
DEBUG 2022-02-14 16:38:02,161 on stmt: $74load_method.3 = getattr(value=E_k, attr=sum)
DEBUG 2022-02-14 16:38:02,161 on stmt: $76call_method.4 = call $74load_method.3(func=$74load_method.3, args=[], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:02,161 on stmt: $const78.5 = const(int, 2)
DEBUG 2022-02-14 16:38:02,161 on stmt: $82binary_multiply.7 = $const78.5 * i
DEBUG 2022-02-14 16:38:02,161 on stmt: $84binary_true_divide.8 = $76call_method.4 / $82binary_multiply.7
DEBUG 2022-02-14 16:38:02,161 on stmt: $90binary_matrix_multiply.11 = XD_S <built-in function matmul> D_S
DEBUG 2022-02-14 16:38:02,161 on stmt: $const92.12 = const(int, 2)
DEBUG 2022-02-14 16:38:02,161 on stmt: $94binary_true_divide.13 = $90binary_matrix_multiply.11 / $const92.12
DEBUG 2022-02-14 16:38:02,161 on stmt: factor = $84binary_true_divide.8 + $94binary_true_divide.13
DEBUG 2022-02-14 16:38:02,161 on stmt: $104inplace_multiply.17 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=E_k, rhs=E, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:38:02,161 on stmt: E_k = $104inplace_multiply.17
DEBUG 2022-02-14 16:38:02,161 on stmt: $112binary_matrix_multiply.20 = XD_S <built-in function matmul> AX_S
DEBUG 2022-02-14 16:38:02,161 on stmt: XD_S = $112binary_matrix_multiply.20
DEBUG 2022-02-14 16:38:02,161 on stmt: powfactor = const(int, 1)
DEBUG 2022-02-14 16:38:02,161 on stmt: $const120.22 = const(int, 1)
DEBUG 2022-02-14 16:38:02,161 on stmt: $124binary_subtract.24 = $const120.22 - count
DEBUG 2022-02-14 16:38:02,161 on stmt: count = $124binary_subtract.24
DEBUG 2022-02-14 16:38:02,161 on stmt: $const130.26 = const(int, 1)
DEBUG 2022-02-14 16:38:02,161 on stmt: $134binary_subtract.28 = $const130.26 - count
DEBUG 2022-02-14 16:38:02,162 on stmt: $const136.29 = const(NoneType, None)
DEBUG 2022-02-14 16:38:02,162 on stmt: $const138.30 = const(NoneType, None)
DEBUG 2022-02-14 16:38:02,162 on stmt: $140build_slice.31 = global(slice: <class 'slice'>)
DEBUG 2022-02-14 16:38:02,162 on stmt: $140build_slice.32 = call $140build_slice.31($const136.29, $const138.30, func=$140build_slice.31, args=(Var($const136.29, _loop_hafnian_subroutines.py:149), Var($const138.30, _loop_hafnian_subroutines.py:149)), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:02,162 on stmt: $142build_tuple.33 = build_tuple(items=[Var($134binary_subtract.28, _loop_hafnian_subroutines.py:149), Var($140build_slice.32, _loop_hafnian_subroutines.py:149)])
DEBUG 2022-02-14 16:38:02,162 on stmt: $144binary_subscr.34 = getitem(value=comb, index=$142build_tuple.33, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:02,162 on stmt: $const150.37 = const(NoneType, None)
DEBUG 2022-02-14 16:38:02,162 on stmt: $const152.38 = const(NoneType, None)
DEBUG 2022-02-14 16:38:02,162 on stmt: $154build_slice.39 = global(slice: <class 'slice'>)
DEBUG 2022-02-14 16:38:02,162 on stmt: $154build_slice.40 = call $154build_slice.39($const150.37, $const152.38, func=$154build_slice.39, args=(Var($const150.37, _loop_hafnian_subroutines.py:149), Var($const152.38, _loop_hafnian_subroutines.py:149)), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:02,162 on stmt: $156build_tuple.41 = build_tuple(items=[Var(count, _loop_hafnian_subroutines.py:140), Var($154build_slice.40, _loop_hafnian_subroutines.py:149)])
DEBUG 2022-02-14 16:38:02,162 on stmt: comb[$156build_tuple.41] = $144binary_subscr.34
DEBUG 2022-02-14 16:38:02,162 on stmt: $160load_global.42 = global(range: <class 'range'>)
DEBUG 2022-02-14 16:38:02,162 on stmt: $const162.43 = const(int, 1)
DEBUG 2022-02-14 16:38:02,162 on stmt: $const166.45 = const(int, 2)
DEBUG 2022-02-14 16:38:02,162 on stmt: $170binary_multiply.47 = $const166.45 * i
DEBUG 2022-02-14 16:38:02,162 on stmt: $172binary_floor_divide.48 = n // $170binary_multiply.47
DEBUG 2022-02-14 16:38:02,162 on stmt: $const174.49 = const(int, 1)
DEBUG 2022-02-14 16:38:02,163 on stmt: $176binary_add.50 = $172binary_floor_divide.48 + $const174.49
DEBUG 2022-02-14 16:38:02,163 on stmt: $178call_function.51 = call $160load_global.42($const162.43, $176binary_add.50, func=$160load_global.42, args=[Var($const162.43, _loop_hafnian_subroutines.py:150), Var($176binary_add.50, _loop_hafnian_subroutines.py:150)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:02,163 on stmt: $180get_iter.52 = getiter(value=$178call_function.51)
DEBUG 2022-02-14 16:38:02,163 on stmt: $phi182.1 = $180get_iter.52
DEBUG 2022-02-14 16:38:02,163 on stmt: jump 182
DEBUG 2022-02-14 16:38:02,163 ==== SSA block rewrite pass on 182
DEBUG 2022-02-14 16:38:02,163 Running <numba.core.ssa._FixSSAVars object at 0x7fa0467fce80>
DEBUG 2022-02-14 16:38:02,163 on stmt: $182for_iter.2 = iternext(value=$phi182.1)
DEBUG 2022-02-14 16:38:02,163 on stmt: $182for_iter.3 = pair_first(value=$182for_iter.2)
DEBUG 2022-02-14 16:38:02,163 on stmt: $182for_iter.4 = pair_second(value=$182for_iter.2)
DEBUG 2022-02-14 16:38:02,163 on stmt: $phi184.2 = $182for_iter.3
DEBUG 2022-02-14 16:38:02,163 on stmt: branch $182for_iter.4, 184, 284
DEBUG 2022-02-14 16:38:02,163 ==== SSA block rewrite pass on 184
DEBUG 2022-02-14 16:38:02,163 Running <numba.core.ssa._FixSSAVars object at 0x7fa0467fce80>
DEBUG 2022-02-14 16:38:02,163 on stmt: j = $phi184.2
DEBUG 2022-02-14 16:38:02,163 on stmt: $192binary_true_divide.6 = factor / j
DEBUG 2022-02-14 16:38:02,163 on stmt: $194inplace_multiply.7 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=powfactor, rhs=$192binary_true_divide.6, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:38:02,163 find_def var='powfactor' stmt=$194inplace_multiply.7 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=powfactor, rhs=$192binary_true_divide.6, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:38:02,163 find_def_from_top label 184
DEBUG 2022-02-14 16:38:02,163 idom 182 from label 184
DEBUG 2022-02-14 16:38:02,164 find_def_from_bottom label 182
DEBUG 2022-02-14 16:38:02,164 find_def_from_top label 182
DEBUG 2022-02-14 16:38:02,164 insert phi node powfactor.2 = phi(incoming_values=[], incoming_blocks=[]) at 182
DEBUG 2022-02-14 16:38:02,164 find_def_from_bottom label 282
DEBUG 2022-02-14 16:38:02,164 find_def_from_top label 282
DEBUG 2022-02-14 16:38:02,164 idom 224 from label 282
DEBUG 2022-02-14 16:38:02,164 find_def_from_bottom label 224
DEBUG 2022-02-14 16:38:02,164 find_def_from_top label 224
DEBUG 2022-02-14 16:38:02,164 idom 184 from label 224
DEBUG 2022-02-14 16:38:02,164 find_def_from_bottom label 184
DEBUG 2022-02-14 16:38:02,164 incoming_def powfactor.1 = $194inplace_multiply.7
DEBUG 2022-02-14 16:38:02,164 find_def_from_bottom label 70
DEBUG 2022-02-14 16:38:02,164 incoming_def powfactor = const(int, 1)
DEBUG 2022-02-14 16:38:02,164 replaced with: $194inplace_multiply.7 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=powfactor.2, rhs=$192binary_true_divide.6, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:38:02,164 on stmt: powfactor.1 = $194inplace_multiply.7
DEBUG 2022-02-14 16:38:02,164 on stmt: $198load_global.8 = global(range: <class 'range'>)
DEBUG 2022-02-14 16:38:02,164 on stmt: $204binary_multiply.11 = i * j
DEBUG 2022-02-14 16:38:02,164 on stmt: $const206.12 = const(int, 1)
DEBUG 2022-02-14 16:38:02,164 on stmt: $208binary_add.13 = $204binary_multiply.11 + $const206.12
DEBUG 2022-02-14 16:38:02,164 on stmt: $const212.15 = const(int, 2)
DEBUG 2022-02-14 16:38:02,164 on stmt: $214binary_floor_divide.16 = n // $const212.15
DEBUG 2022-02-14 16:38:02,164 on stmt: $const216.17 = const(int, 2)
DEBUG 2022-02-14 16:38:02,164 on stmt: $218binary_add.18 = $214binary_floor_divide.16 + $const216.17
DEBUG 2022-02-14 16:38:02,164 on stmt: $220call_function.19 = call $198load_global.8($208binary_add.13, $218binary_add.18, func=$198load_global.8, args=[Var($208binary_add.13, _loop_hafnian_subroutines.py:152), Var($218binary_add.18, _loop_hafnian_subroutines.py:152)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:02,165 on stmt: $222get_iter.20 = getiter(value=$220call_function.19)
DEBUG 2022-02-14 16:38:02,165 on stmt: $phi224.2 = $222get_iter.20
DEBUG 2022-02-14 16:38:02,165 on stmt: jump 224
DEBUG 2022-02-14 16:38:02,165 ==== SSA block rewrite pass on 224
DEBUG 2022-02-14 16:38:02,165 Running <numba.core.ssa._FixSSAVars object at 0x7fa0467fce80>
DEBUG 2022-02-14 16:38:02,165 on stmt: $224for_iter.3 = iternext(value=$phi224.2)
DEBUG 2022-02-14 16:38:02,165 on stmt: $224for_iter.4 = pair_first(value=$224for_iter.3)
DEBUG 2022-02-14 16:38:02,165 on stmt: $224for_iter.5 = pair_second(value=$224for_iter.3)
DEBUG 2022-02-14 16:38:02,165 on stmt: $phi226.3 = $224for_iter.4
DEBUG 2022-02-14 16:38:02,165 on stmt: branch $224for_iter.5, 226, 282
DEBUG 2022-02-14 16:38:02,165 ==== SSA block rewrite pass on 226
DEBUG 2022-02-14 16:38:02,165 Running <numba.core.ssa._FixSSAVars object at 0x7fa0467fce80>
DEBUG 2022-02-14 16:38:02,165 on stmt: k = $phi226.3
DEBUG 2022-02-14 16:38:02,165 on stmt: $const234.7 = const(int, 1)
DEBUG 2022-02-14 16:38:02,165 on stmt: $236binary_subtract.8 = k - $const234.7
DEBUG 2022-02-14 16:38:02,165 on stmt: $238build_tuple.9 = build_tuple(items=[Var(count, _loop_hafnian_subroutines.py:140), Var($236binary_subtract.8, _loop_hafnian_subroutines.py:153)])
DEBUG 2022-02-14 16:38:02,165 on stmt: $242binary_subscr.12 = getitem(value=comb, index=$238build_tuple.9, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:02,165 on stmt: $const246.14 = const(int, 1)
DEBUG 2022-02-14 16:38:02,165 on stmt: $250binary_subtract.16 = $const246.14 - count
DEBUG 2022-02-14 16:38:02,165 on stmt: $258binary_multiply.20 = i * j
DEBUG 2022-02-14 16:38:02,165 on stmt: $260binary_subtract.21 = k - $258binary_multiply.20
DEBUG 2022-02-14 16:38:02,165 on stmt: $const262.22 = const(int, 1)
DEBUG 2022-02-14 16:38:02,165 on stmt: $264binary_subtract.23 = $260binary_subtract.21 - $const262.22
DEBUG 2022-02-14 16:38:02,165 on stmt: $266build_tuple.24 = build_tuple(items=[Var($250binary_subtract.16, _loop_hafnian_subroutines.py:153), Var($264binary_subtract.23, _loop_hafnian_subroutines.py:153)])
DEBUG 2022-02-14 16:38:02,166 on stmt: $268binary_subscr.25 = getitem(value=comb, index=$266build_tuple.24, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:02,166 on stmt: $272binary_multiply.27 = $268binary_subscr.25 * powfactor
DEBUG 2022-02-14 16:38:02,166 find_def var='powfactor' stmt=$272binary_multiply.27 = $268binary_subscr.25 * powfactor
DEBUG 2022-02-14 16:38:02,166 find_def_from_top label 226
DEBUG 2022-02-14 16:38:02,166 idom 224 from label 226
DEBUG 2022-02-14 16:38:02,166 find_def_from_bottom label 224
DEBUG 2022-02-14 16:38:02,166 find_def_from_top label 224
DEBUG 2022-02-14 16:38:02,166 idom 184 from label 224
DEBUG 2022-02-14 16:38:02,166 find_def_from_bottom label 184
DEBUG 2022-02-14 16:38:02,166 replaced with: $272binary_multiply.27 = $268binary_subscr.25 * powfactor.1
DEBUG 2022-02-14 16:38:02,166 on stmt: $274inplace_add.28 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$242binary_subscr.12, rhs=$272binary_multiply.27, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:38:02,166 on stmt: comb[$238build_tuple.9] = $274inplace_add.28
DEBUG 2022-02-14 16:38:02,166 on stmt: jump 224
DEBUG 2022-02-14 16:38:02,166 ==== SSA block rewrite pass on 282
DEBUG 2022-02-14 16:38:02,166 Running <numba.core.ssa._FixSSAVars object at 0x7fa0467fce80>
DEBUG 2022-02-14 16:38:02,166 on stmt: jump 182
DEBUG 2022-02-14 16:38:02,166 ==== SSA block rewrite pass on 284
DEBUG 2022-02-14 16:38:02,166 Running <numba.core.ssa._FixSSAVars object at 0x7fa0467fce80>
DEBUG 2022-02-14 16:38:02,166 on stmt: jump 68
DEBUG 2022-02-14 16:38:02,166 ==== SSA block rewrite pass on 286
DEBUG 2022-02-14 16:38:02,166 Running <numba.core.ssa._FixSSAVars object at 0x7fa0467fce80>
DEBUG 2022-02-14 16:38:02,166 on stmt: $const290.2 = const(NoneType, None)
DEBUG 2022-02-14 16:38:02,166 on stmt: $const292.3 = const(NoneType, None)
DEBUG 2022-02-14 16:38:02,166 on stmt: $294build_slice.4 = global(slice: <class 'slice'>)
DEBUG 2022-02-14 16:38:02,166 on stmt: $294build_slice.5 = call $294build_slice.4($const290.2, $const292.3, func=$294build_slice.4, args=(Var($const290.2, _loop_hafnian_subroutines.py:154), Var($const292.3, _loop_hafnian_subroutines.py:154)), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:02,167 on stmt: $296build_tuple.6 = build_tuple(items=[Var(count, _loop_hafnian_subroutines.py:140), Var($294build_slice.5, _loop_hafnian_subroutines.py:154)])
DEBUG 2022-02-14 16:38:02,167 on stmt: $298binary_subscr.7 = getitem(value=comb, index=$296build_tuple.6, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:02,167 on stmt: $300return_value.8 = cast(value=$298binary_subscr.7)
DEBUG 2022-02-14 16:38:02,167 on stmt: return $300return_value.8
DEBUG 2022-02-14 16:38:02,167 Fix SSA violator on var count
DEBUG 2022-02-14 16:38:02,167 ==== SSA block rewrite pass on 0
DEBUG 2022-02-14 16:38:02,167 Running <numba.core.ssa._FreshVarHandler object at 0x7fa0470faeb0>
DEBUG 2022-02-14 16:38:02,167 on stmt: E = arg(0, name=E)
DEBUG 2022-02-14 16:38:02,167 on stmt: AX_S = arg(1, name=AX_S)
DEBUG 2022-02-14 16:38:02,167 on stmt: XD_S = arg(2, name=XD_S)
DEBUG 2022-02-14 16:38:02,167 on stmt: D_S = arg(3, name=D_S)
DEBUG 2022-02-14 16:38:02,167 on stmt: n = arg(4, name=n)
DEBUG 2022-02-14 16:38:02,167 on stmt: $4load_method.1 = getattr(value=E, attr=copy)
DEBUG 2022-02-14 16:38:02,167 on stmt: E_k = call $4load_method.1(func=$4load_method.1, args=[], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:02,167 on stmt: count = const(int, 0)
DEBUG 2022-02-14 16:38:02,167 first assign: count
DEBUG 2022-02-14 16:38:02,167 replaced with: count = const(int, 0)
DEBUG 2022-02-14 16:38:02,167 on stmt: $14load_global.4 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:38:02,167 on stmt: $16load_attr.5 = getattr(value=$14load_global.4, attr=zeros)
DEBUG 2022-02-14 16:38:02,167 on stmt: $const18.6 = const(int, 2)
DEBUG 2022-02-14 16:38:02,167 on stmt: $const22.8 = const(int, 2)
DEBUG 2022-02-14 16:38:02,167 on stmt: $24binary_floor_divide.9 = n // $const22.8
DEBUG 2022-02-14 16:38:02,167 on stmt: $const26.10 = const(int, 1)
DEBUG 2022-02-14 16:38:02,167 on stmt: $28binary_add.11 = $24binary_floor_divide.9 + $const26.10
DEBUG 2022-02-14 16:38:02,168 on stmt: $30build_tuple.12 = build_tuple(items=[Var($const18.6, _loop_hafnian_subroutines.py:141), Var($28binary_add.11, _loop_hafnian_subroutines.py:141)])
DEBUG 2022-02-14 16:38:02,168 on stmt: $32load_global.13 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:38:02,168 on stmt: $34load_attr.14 = getattr(value=$32load_global.13, attr=complex128)
DEBUG 2022-02-14 16:38:02,168 on stmt: comb = call $16load_attr.5($30build_tuple.12, func=$16load_attr.5, args=[Var($30build_tuple.12, _loop_hafnian_subroutines.py:141)], kws=[('dtype', Var($34load_attr.14, _loop_hafnian_subroutines.py:141))], vararg=None, target=None)
DEBUG 2022-02-14 16:38:02,168 on stmt: $const42.17 = const(int, 1)
DEBUG 2022-02-14 16:38:02,168 on stmt: $const_0 = const(int, 0)
DEBUG 2022-02-14 16:38:02,168 on stmt: $const_0.1 = const(int, 0)
DEBUG 2022-02-14 16:38:02,168 on stmt: $const46.19 = build_tuple(items=[Var($const_0, _loop_hafnian_subroutines.py:142), Var($const_0.1, _loop_hafnian_subroutines.py:142)])
DEBUG 2022-02-14 16:38:02,168 on stmt: comb[(0, 0)] = $const42.17
DEBUG 2022-02-14 16:38:02,168 on stmt: $50load_global.20 = global(range: <class 'range'>)
DEBUG 2022-02-14 16:38:02,168 on stmt: $const52.21 = const(int, 1)
DEBUG 2022-02-14 16:38:02,168 on stmt: $const56.23 = const(int, 2)
DEBUG 2022-02-14 16:38:02,168 on stmt: $58binary_floor_divide.24 = n // $const56.23
DEBUG 2022-02-14 16:38:02,168 on stmt: $const60.25 = const(int, 1)
DEBUG 2022-02-14 16:38:02,168 on stmt: $62binary_add.26 = $58binary_floor_divide.24 + $const60.25
DEBUG 2022-02-14 16:38:02,168 on stmt: $64call_function.27 = call $50load_global.20($const52.21, $62binary_add.26, func=$50load_global.20, args=[Var($const52.21, _loop_hafnian_subroutines.py:143), Var($62binary_add.26, _loop_hafnian_subroutines.py:143)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:02,168 on stmt: $66get_iter.28 = getiter(value=$64call_function.27)
DEBUG 2022-02-14 16:38:02,168 on stmt: $phi68.0 = $66get_iter.28
DEBUG 2022-02-14 16:38:02,168 on stmt: jump 68
DEBUG 2022-02-14 16:38:02,168 ==== SSA block rewrite pass on 68
DEBUG 2022-02-14 16:38:02,168 Running <numba.core.ssa._FreshVarHandler object at 0x7fa0470faeb0>
DEBUG 2022-02-14 16:38:02,168 on stmt: $68for_iter.1 = iternext(value=$phi68.0)
DEBUG 2022-02-14 16:38:02,168 on stmt: $68for_iter.2 = pair_first(value=$68for_iter.1)
DEBUG 2022-02-14 16:38:02,168 on stmt: $68for_iter.3 = pair_second(value=$68for_iter.1)
DEBUG 2022-02-14 16:38:02,169 on stmt: $phi70.1 = $68for_iter.2
DEBUG 2022-02-14 16:38:02,169 on stmt: branch $68for_iter.3, 70, 286
DEBUG 2022-02-14 16:38:02,169 ==== SSA block rewrite pass on 70
DEBUG 2022-02-14 16:38:02,169 Running <numba.core.ssa._FreshVarHandler object at 0x7fa0470faeb0>
DEBUG 2022-02-14 16:38:02,169 on stmt: i = $phi70.1
DEBUG 2022-02-14 16:38:02,169 on stmt: $74load_method.3 = getattr(value=E_k, attr=sum)
DEBUG 2022-02-14 16:38:02,169 on stmt: $76call_method.4 = call $74load_method.3(func=$74load_method.3, args=[], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:02,169 on stmt: $const78.5 = const(int, 2)
DEBUG 2022-02-14 16:38:02,169 on stmt: $82binary_multiply.7 = $const78.5 * i
DEBUG 2022-02-14 16:38:02,169 on stmt: $84binary_true_divide.8 = $76call_method.4 / $82binary_multiply.7
DEBUG 2022-02-14 16:38:02,169 on stmt: $90binary_matrix_multiply.11 = XD_S <built-in function matmul> D_S
DEBUG 2022-02-14 16:38:02,169 on stmt: $const92.12 = const(int, 2)
DEBUG 2022-02-14 16:38:02,169 on stmt: $94binary_true_divide.13 = $90binary_matrix_multiply.11 / $const92.12
DEBUG 2022-02-14 16:38:02,169 on stmt: factor = $84binary_true_divide.8 + $94binary_true_divide.13
DEBUG 2022-02-14 16:38:02,169 on stmt: $104inplace_multiply.17 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=E_k, rhs=E, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:38:02,169 on stmt: E_k = $104inplace_multiply.17
DEBUG 2022-02-14 16:38:02,169 on stmt: $112binary_matrix_multiply.20 = XD_S <built-in function matmul> AX_S
DEBUG 2022-02-14 16:38:02,169 on stmt: XD_S = $112binary_matrix_multiply.20
DEBUG 2022-02-14 16:38:02,169 on stmt: powfactor = const(int, 1)
DEBUG 2022-02-14 16:38:02,169 on stmt: $const120.22 = const(int, 1)
DEBUG 2022-02-14 16:38:02,169 on stmt: $124binary_subtract.24 = $const120.22 - count
DEBUG 2022-02-14 16:38:02,169 on stmt: count = $124binary_subtract.24
DEBUG 2022-02-14 16:38:02,169 replaced with: count.1 = $124binary_subtract.24
DEBUG 2022-02-14 16:38:02,170 on stmt: $const130.26 = const(int, 1)
DEBUG 2022-02-14 16:38:02,170 on stmt: $134binary_subtract.28 = $const130.26 - count
DEBUG 2022-02-14 16:38:02,170 on stmt: $const136.29 = const(NoneType, None)
DEBUG 2022-02-14 16:38:02,170 on stmt: $const138.30 = const(NoneType, None)
DEBUG 2022-02-14 16:38:02,170 on stmt: $140build_slice.31 = global(slice: <class 'slice'>)
DEBUG 2022-02-14 16:38:02,170 on stmt: $140build_slice.32 = call $140build_slice.31($const136.29, $const138.30, func=$140build_slice.31, args=(Var($const136.29, _loop_hafnian_subroutines.py:149), Var($const138.30, _loop_hafnian_subroutines.py:149)), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:02,170 on stmt: $142build_tuple.33 = build_tuple(items=[Var($134binary_subtract.28, _loop_hafnian_subroutines.py:149), Var($140build_slice.32, _loop_hafnian_subroutines.py:149)])
DEBUG 2022-02-14 16:38:02,170 on stmt: $144binary_subscr.34 = getitem(value=comb, index=$142build_tuple.33, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:02,170 on stmt: $const150.37 = const(NoneType, None)
DEBUG 2022-02-14 16:38:02,170 on stmt: $const152.38 = const(NoneType, None)
DEBUG 2022-02-14 16:38:02,170 on stmt: $154build_slice.39 = global(slice: <class 'slice'>)
DEBUG 2022-02-14 16:38:02,170 on stmt: $154build_slice.40 = call $154build_slice.39($const150.37, $const152.38, func=$154build_slice.39, args=(Var($const150.37, _loop_hafnian_subroutines.py:149), Var($const152.38, _loop_hafnian_subroutines.py:149)), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:02,170 on stmt: $156build_tuple.41 = build_tuple(items=[Var(count, _loop_hafnian_subroutines.py:140), Var($154build_slice.40, _loop_hafnian_subroutines.py:149)])
DEBUG 2022-02-14 16:38:02,170 on stmt: comb[$156build_tuple.41] = $144binary_subscr.34
DEBUG 2022-02-14 16:38:02,170 on stmt: $160load_global.42 = global(range: <class 'range'>)
DEBUG 2022-02-14 16:38:02,170 on stmt: $const162.43 = const(int, 1)
DEBUG 2022-02-14 16:38:02,170 on stmt: $const166.45 = const(int, 2)
DEBUG 2022-02-14 16:38:02,170 on stmt: $170binary_multiply.47 = $const166.45 * i
DEBUG 2022-02-14 16:38:02,171 on stmt: $172binary_floor_divide.48 = n // $170binary_multiply.47
DEBUG 2022-02-14 16:38:02,171 on stmt: $const174.49 = const(int, 1)
DEBUG 2022-02-14 16:38:02,171 on stmt: $176binary_add.50 = $172binary_floor_divide.48 + $const174.49
DEBUG 2022-02-14 16:38:02,171 on stmt: $178call_function.51 = call $160load_global.42($const162.43, $176binary_add.50, func=$160load_global.42, args=[Var($const162.43, _loop_hafnian_subroutines.py:150), Var($176binary_add.50, _loop_hafnian_subroutines.py:150)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:02,171 on stmt: $180get_iter.52 = getiter(value=$178call_function.51)
DEBUG 2022-02-14 16:38:02,171 on stmt: $phi182.1 = $180get_iter.52
DEBUG 2022-02-14 16:38:02,171 on stmt: jump 182
DEBUG 2022-02-14 16:38:02,171 ==== SSA block rewrite pass on 182
DEBUG 2022-02-14 16:38:02,171 Running <numba.core.ssa._FreshVarHandler object at 0x7fa0470faeb0>
DEBUG 2022-02-14 16:38:02,171 on stmt: powfactor.2 = phi(incoming_values=[Var(powfactor.1, _loop_hafnian_subroutines.py:151), Var(powfactor, _loop_hafnian_subroutines.py:147)], incoming_blocks=[282, 70])
DEBUG 2022-02-14 16:38:02,171 on stmt: $182for_iter.2 = iternext(value=$phi182.1)
DEBUG 2022-02-14 16:38:02,171 on stmt: $182for_iter.3 = pair_first(value=$182for_iter.2)
DEBUG 2022-02-14 16:38:02,171 on stmt: $182for_iter.4 = pair_second(value=$182for_iter.2)
DEBUG 2022-02-14 16:38:02,171 on stmt: $phi184.2 = $182for_iter.3
DEBUG 2022-02-14 16:38:02,171 on stmt: branch $182for_iter.4, 184, 284
DEBUG 2022-02-14 16:38:02,171 ==== SSA block rewrite pass on 184
DEBUG 2022-02-14 16:38:02,171 Running <numba.core.ssa._FreshVarHandler object at 0x7fa0470faeb0>
DEBUG 2022-02-14 16:38:02,171 on stmt: j = $phi184.2
DEBUG 2022-02-14 16:38:02,171 on stmt: $192binary_true_divide.6 = factor / j
DEBUG 2022-02-14 16:38:02,171 on stmt: $194inplace_multiply.7 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=powfactor.2, rhs=$192binary_true_divide.6, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:38:02,172 on stmt: powfactor.1 = $194inplace_multiply.7
DEBUG 2022-02-14 16:38:02,172 on stmt: $198load_global.8 = global(range: <class 'range'>)
DEBUG 2022-02-14 16:38:02,172 on stmt: $204binary_multiply.11 = i * j
DEBUG 2022-02-14 16:38:02,172 on stmt: $const206.12 = const(int, 1)
DEBUG 2022-02-14 16:38:02,172 on stmt: $208binary_add.13 = $204binary_multiply.11 + $const206.12
DEBUG 2022-02-14 16:38:02,172 on stmt: $const212.15 = const(int, 2)
DEBUG 2022-02-14 16:38:02,172 on stmt: $214binary_floor_divide.16 = n // $const212.15
DEBUG 2022-02-14 16:38:02,172 on stmt: $const216.17 = const(int, 2)
DEBUG 2022-02-14 16:38:02,172 on stmt: $218binary_add.18 = $214binary_floor_divide.16 + $const216.17
DEBUG 2022-02-14 16:38:02,172 on stmt: $220call_function.19 = call $198load_global.8($208binary_add.13, $218binary_add.18, func=$198load_global.8, args=[Var($208binary_add.13, _loop_hafnian_subroutines.py:152), Var($218binary_add.18, _loop_hafnian_subroutines.py:152)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:02,172 on stmt: $222get_iter.20 = getiter(value=$220call_function.19)
DEBUG 2022-02-14 16:38:02,172 on stmt: $phi224.2 = $222get_iter.20
DEBUG 2022-02-14 16:38:02,172 on stmt: jump 224
DEBUG 2022-02-14 16:38:02,172 ==== SSA block rewrite pass on 224
DEBUG 2022-02-14 16:38:02,172 Running <numba.core.ssa._FreshVarHandler object at 0x7fa0470faeb0>
DEBUG 2022-02-14 16:38:02,172 on stmt: $224for_iter.3 = iternext(value=$phi224.2)
DEBUG 2022-02-14 16:38:02,172 on stmt: $224for_iter.4 = pair_first(value=$224for_iter.3)
DEBUG 2022-02-14 16:38:02,172 on stmt: $224for_iter.5 = pair_second(value=$224for_iter.3)
DEBUG 2022-02-14 16:38:02,172 on stmt: $phi226.3 = $224for_iter.4
DEBUG 2022-02-14 16:38:02,172 on stmt: branch $224for_iter.5, 226, 282
DEBUG 2022-02-14 16:38:02,173 ==== SSA block rewrite pass on 226
DEBUG 2022-02-14 16:38:02,173 Running <numba.core.ssa._FreshVarHandler object at 0x7fa0470faeb0>
DEBUG 2022-02-14 16:38:02,173 on stmt: k = $phi226.3
DEBUG 2022-02-14 16:38:02,173 on stmt: $const234.7 = const(int, 1)
DEBUG 2022-02-14 16:38:02,173 on stmt: $236binary_subtract.8 = k - $const234.7
DEBUG 2022-02-14 16:38:02,173 on stmt: $238build_tuple.9 = build_tuple(items=[Var(count, _loop_hafnian_subroutines.py:140), Var($236binary_subtract.8, _loop_hafnian_subroutines.py:153)])
DEBUG 2022-02-14 16:38:02,173 on stmt: $242binary_subscr.12 = getitem(value=comb, index=$238build_tuple.9, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:02,173 on stmt: $const246.14 = const(int, 1)
DEBUG 2022-02-14 16:38:02,173 on stmt: $250binary_subtract.16 = $const246.14 - count
DEBUG 2022-02-14 16:38:02,173 on stmt: $258binary_multiply.20 = i * j
DEBUG 2022-02-14 16:38:02,173 on stmt: $260binary_subtract.21 = k - $258binary_multiply.20
DEBUG 2022-02-14 16:38:02,173 on stmt: $const262.22 = const(int, 1)
DEBUG 2022-02-14 16:38:02,173 on stmt: $264binary_subtract.23 = $260binary_subtract.21 - $const262.22
DEBUG 2022-02-14 16:38:02,173 on stmt: $266build_tuple.24 = build_tuple(items=[Var($250binary_subtract.16, _loop_hafnian_subroutines.py:153), Var($264binary_subtract.23, _loop_hafnian_subroutines.py:153)])
DEBUG 2022-02-14 16:38:02,173 on stmt: $268binary_subscr.25 = getitem(value=comb, index=$266build_tuple.24, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:02,173 on stmt: $272binary_multiply.27 = $268binary_subscr.25 * powfactor.1
DEBUG 2022-02-14 16:38:02,173 on stmt: $274inplace_add.28 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$242binary_subscr.12, rhs=$272binary_multiply.27, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:38:02,173 on stmt: comb[$238build_tuple.9] = $274inplace_add.28
DEBUG 2022-02-14 16:38:02,173 on stmt: jump 224
DEBUG 2022-02-14 16:38:02,173 ==== SSA block rewrite pass on 282
DEBUG 2022-02-14 16:38:02,174 Running <numba.core.ssa._FreshVarHandler object at 0x7fa0470faeb0>
DEBUG 2022-02-14 16:38:02,174 on stmt: jump 182
DEBUG 2022-02-14 16:38:02,174 ==== SSA block rewrite pass on 284
DEBUG 2022-02-14 16:38:02,174 Running <numba.core.ssa._FreshVarHandler object at 0x7fa0470faeb0>
DEBUG 2022-02-14 16:38:02,174 on stmt: jump 68
DEBUG 2022-02-14 16:38:02,174 ==== SSA block rewrite pass on 286
DEBUG 2022-02-14 16:38:02,174 Running <numba.core.ssa._FreshVarHandler object at 0x7fa0470faeb0>
DEBUG 2022-02-14 16:38:02,174 on stmt: $const290.2 = const(NoneType, None)
DEBUG 2022-02-14 16:38:02,174 on stmt: $const292.3 = const(NoneType, None)
DEBUG 2022-02-14 16:38:02,174 on stmt: $294build_slice.4 = global(slice: <class 'slice'>)
DEBUG 2022-02-14 16:38:02,174 on stmt: $294build_slice.5 = call $294build_slice.4($const290.2, $const292.3, func=$294build_slice.4, args=(Var($const290.2, _loop_hafnian_subroutines.py:154), Var($const292.3, _loop_hafnian_subroutines.py:154)), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:02,174 on stmt: $296build_tuple.6 = build_tuple(items=[Var(count, _loop_hafnian_subroutines.py:140), Var($294build_slice.5, _loop_hafnian_subroutines.py:154)])
DEBUG 2022-02-14 16:38:02,174 on stmt: $298binary_subscr.7 = getitem(value=comb, index=$296build_tuple.6, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:02,174 on stmt: $300return_value.8 = cast(value=$298binary_subscr.7)
DEBUG 2022-02-14 16:38:02,174 on stmt: return $300return_value.8
DEBUG 2022-02-14 16:38:02,174 Replaced assignments: defaultdict(<class 'list'>,
            {0: [<numba.core.ir.Assign object at 0x7fa04711c670>],
             70: [<numba.core.ir.Assign object at 0x7fa0467fcfa0>]})
DEBUG 2022-02-14 16:38:02,175 ==== SSA block rewrite pass on 0
DEBUG 2022-02-14 16:38:02,175 Running <numba.core.ssa._FixSSAVars object at 0x7fa0467fce80>
DEBUG 2022-02-14 16:38:02,175 on stmt: E = arg(0, name=E)
DEBUG 2022-02-14 16:38:02,175 on stmt: AX_S = arg(1, name=AX_S)
DEBUG 2022-02-14 16:38:02,175 on stmt: XD_S = arg(2, name=XD_S)
DEBUG 2022-02-14 16:38:02,175 on stmt: D_S = arg(3, name=D_S)
DEBUG 2022-02-14 16:38:02,175 on stmt: n = arg(4, name=n)
DEBUG 2022-02-14 16:38:02,175 on stmt: $4load_method.1 = getattr(value=E, attr=copy)
DEBUG 2022-02-14 16:38:02,175 on stmt: E_k = call $4load_method.1(func=$4load_method.1, args=[], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:02,175 on stmt: count = const(int, 0)
DEBUG 2022-02-14 16:38:02,175 on stmt: $14load_global.4 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:38:02,175 on stmt: $16load_attr.5 = getattr(value=$14load_global.4, attr=zeros)
DEBUG 2022-02-14 16:38:02,175 on stmt: $const18.6 = const(int, 2)
DEBUG 2022-02-14 16:38:02,175 on stmt: $const22.8 = const(int, 2)
DEBUG 2022-02-14 16:38:02,175 on stmt: $24binary_floor_divide.9 = n // $const22.8
DEBUG 2022-02-14 16:38:02,175 on stmt: $const26.10 = const(int, 1)
DEBUG 2022-02-14 16:38:02,175 on stmt: $28binary_add.11 = $24binary_floor_divide.9 + $const26.10
DEBUG 2022-02-14 16:38:02,175 on stmt: $30build_tuple.12 = build_tuple(items=[Var($const18.6, _loop_hafnian_subroutines.py:141), Var($28binary_add.11, _loop_hafnian_subroutines.py:141)])
DEBUG 2022-02-14 16:38:02,175 on stmt: $32load_global.13 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:38:02,175 on stmt: $34load_attr.14 = getattr(value=$32load_global.13, attr=complex128)
DEBUG 2022-02-14 16:38:02,176 on stmt: comb = call $16load_attr.5($30build_tuple.12, func=$16load_attr.5, args=[Var($30build_tuple.12, _loop_hafnian_subroutines.py:141)], kws=[('dtype', Var($34load_attr.14, _loop_hafnian_subroutines.py:141))], vararg=None, target=None)
DEBUG 2022-02-14 16:38:02,176 on stmt: $const42.17 = const(int, 1)
DEBUG 2022-02-14 16:38:02,176 on stmt: $const_0 = const(int, 0)
DEBUG 2022-02-14 16:38:02,176 on stmt: $const_0.1 = const(int, 0)
DEBUG 2022-02-14 16:38:02,176 on stmt: $const46.19 = build_tuple(items=[Var($const_0, _loop_hafnian_subroutines.py:142), Var($const_0.1, _loop_hafnian_subroutines.py:142)])
DEBUG 2022-02-14 16:38:02,176 on stmt: comb[(0, 0)] = $const42.17
DEBUG 2022-02-14 16:38:02,176 on stmt: $50load_global.20 = global(range: <class 'range'>)
DEBUG 2022-02-14 16:38:02,176 on stmt: $const52.21 = const(int, 1)
DEBUG 2022-02-14 16:38:02,176 on stmt: $const56.23 = const(int, 2)
DEBUG 2022-02-14 16:38:02,176 on stmt: $58binary_floor_divide.24 = n // $const56.23
DEBUG 2022-02-14 16:38:02,176 on stmt: $const60.25 = const(int, 1)
DEBUG 2022-02-14 16:38:02,176 on stmt: $62binary_add.26 = $58binary_floor_divide.24 + $const60.25
DEBUG 2022-02-14 16:38:02,176 on stmt: $64call_function.27 = call $50load_global.20($const52.21, $62binary_add.26, func=$50load_global.20, args=[Var($const52.21, _loop_hafnian_subroutines.py:143), Var($62binary_add.26, _loop_hafnian_subroutines.py:143)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:02,176 on stmt: $66get_iter.28 = getiter(value=$64call_function.27)
DEBUG 2022-02-14 16:38:02,176 on stmt: $phi68.0 = $66get_iter.28
DEBUG 2022-02-14 16:38:02,176 on stmt: jump 68
DEBUG 2022-02-14 16:38:02,176 ==== SSA block rewrite pass on 68
DEBUG 2022-02-14 16:38:02,176 Running <numba.core.ssa._FixSSAVars object at 0x7fa0467fce80>
DEBUG 2022-02-14 16:38:02,176 on stmt: $68for_iter.1 = iternext(value=$phi68.0)
DEBUG 2022-02-14 16:38:02,177 on stmt: $68for_iter.2 = pair_first(value=$68for_iter.1)
DEBUG 2022-02-14 16:38:02,177 on stmt: $68for_iter.3 = pair_second(value=$68for_iter.1)
DEBUG 2022-02-14 16:38:02,177 on stmt: $phi70.1 = $68for_iter.2
DEBUG 2022-02-14 16:38:02,177 on stmt: branch $68for_iter.3, 70, 286
DEBUG 2022-02-14 16:38:02,177 ==== SSA block rewrite pass on 70
DEBUG 2022-02-14 16:38:02,177 Running <numba.core.ssa._FixSSAVars object at 0x7fa0467fce80>
DEBUG 2022-02-14 16:38:02,177 on stmt: i = $phi70.1
DEBUG 2022-02-14 16:38:02,177 on stmt: $74load_method.3 = getattr(value=E_k, attr=sum)
DEBUG 2022-02-14 16:38:02,177 on stmt: $76call_method.4 = call $74load_method.3(func=$74load_method.3, args=[], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:02,177 on stmt: $const78.5 = const(int, 2)
DEBUG 2022-02-14 16:38:02,177 on stmt: $82binary_multiply.7 = $const78.5 * i
DEBUG 2022-02-14 16:38:02,177 on stmt: $84binary_true_divide.8 = $76call_method.4 / $82binary_multiply.7
DEBUG 2022-02-14 16:38:02,177 on stmt: $90binary_matrix_multiply.11 = XD_S <built-in function matmul> D_S
DEBUG 2022-02-14 16:38:02,177 on stmt: $const92.12 = const(int, 2)
DEBUG 2022-02-14 16:38:02,177 on stmt: $94binary_true_divide.13 = $90binary_matrix_multiply.11 / $const92.12
DEBUG 2022-02-14 16:38:02,177 on stmt: factor = $84binary_true_divide.8 + $94binary_true_divide.13
DEBUG 2022-02-14 16:38:02,177 on stmt: $104inplace_multiply.17 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=E_k, rhs=E, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:38:02,177 on stmt: E_k = $104inplace_multiply.17
DEBUG 2022-02-14 16:38:02,177 on stmt: $112binary_matrix_multiply.20 = XD_S <built-in function matmul> AX_S
DEBUG 2022-02-14 16:38:02,177 on stmt: XD_S = $112binary_matrix_multiply.20
DEBUG 2022-02-14 16:38:02,178 on stmt: powfactor = const(int, 1)
DEBUG 2022-02-14 16:38:02,178 on stmt: $const120.22 = const(int, 1)
DEBUG 2022-02-14 16:38:02,178 on stmt: $124binary_subtract.24 = $const120.22 - count
DEBUG 2022-02-14 16:38:02,178 find_def var='count' stmt=$124binary_subtract.24 = $const120.22 - count
DEBUG 2022-02-14 16:38:02,178 find_def_from_top label 70
DEBUG 2022-02-14 16:38:02,178 idom 68 from label 70
DEBUG 2022-02-14 16:38:02,178 find_def_from_bottom label 68
DEBUG 2022-02-14 16:38:02,178 find_def_from_top label 68
DEBUG 2022-02-14 16:38:02,178 insert phi node count.2 = phi(incoming_values=[], incoming_blocks=[]) at 68
DEBUG 2022-02-14 16:38:02,178 find_def_from_bottom label 0
DEBUG 2022-02-14 16:38:02,178 incoming_def count = const(int, 0)
DEBUG 2022-02-14 16:38:02,178 find_def_from_bottom label 284
DEBUG 2022-02-14 16:38:02,178 find_def_from_top label 284
DEBUG 2022-02-14 16:38:02,178 idom 182 from label 284
DEBUG 2022-02-14 16:38:02,178 find_def_from_bottom label 182
DEBUG 2022-02-14 16:38:02,178 find_def_from_top label 182
DEBUG 2022-02-14 16:38:02,178 idom 70 from label 182
DEBUG 2022-02-14 16:38:02,178 find_def_from_bottom label 70
DEBUG 2022-02-14 16:38:02,178 incoming_def count.1 = $124binary_subtract.24
DEBUG 2022-02-14 16:38:02,178 replaced with: $124binary_subtract.24 = $const120.22 - count.2
DEBUG 2022-02-14 16:38:02,178 on stmt: count.1 = $124binary_subtract.24
DEBUG 2022-02-14 16:38:02,179 on stmt: $const130.26 = const(int, 1)
DEBUG 2022-02-14 16:38:02,179 on stmt: $134binary_subtract.28 = $const130.26 - count
DEBUG 2022-02-14 16:38:02,179 find_def var='count' stmt=$134binary_subtract.28 = $const130.26 - count
DEBUG 2022-02-14 16:38:02,179 replaced with: $134binary_subtract.28 = $const130.26 - count.1
DEBUG 2022-02-14 16:38:02,179 on stmt: $const136.29 = const(NoneType, None)
DEBUG 2022-02-14 16:38:02,179 on stmt: $const138.30 = const(NoneType, None)
DEBUG 2022-02-14 16:38:02,179 on stmt: $140build_slice.31 = global(slice: <class 'slice'>)
DEBUG 2022-02-14 16:38:02,179 on stmt: $140build_slice.32 = call $140build_slice.31($const136.29, $const138.30, func=$140build_slice.31, args=(Var($const136.29, _loop_hafnian_subroutines.py:149), Var($const138.30, _loop_hafnian_subroutines.py:149)), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:02,179 on stmt: $142build_tuple.33 = build_tuple(items=[Var($134binary_subtract.28, _loop_hafnian_subroutines.py:149), Var($140build_slice.32, _loop_hafnian_subroutines.py:149)])
DEBUG 2022-02-14 16:38:02,179 on stmt: $144binary_subscr.34 = getitem(value=comb, index=$142build_tuple.33, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:02,179 on stmt: $const150.37 = const(NoneType, None)
DEBUG 2022-02-14 16:38:02,179 on stmt: $const152.38 = const(NoneType, None)
DEBUG 2022-02-14 16:38:02,179 on stmt: $154build_slice.39 = global(slice: <class 'slice'>)
DEBUG 2022-02-14 16:38:02,179 on stmt: $154build_slice.40 = call $154build_slice.39($const150.37, $const152.38, func=$154build_slice.39, args=(Var($const150.37, _loop_hafnian_subroutines.py:149), Var($const152.38, _loop_hafnian_subroutines.py:149)), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:02,179 on stmt: $156build_tuple.41 = build_tuple(items=[Var(count, _loop_hafnian_subroutines.py:140), Var($154build_slice.40, _loop_hafnian_subroutines.py:149)])
DEBUG 2022-02-14 16:38:02,179 find_def var='count' stmt=$156build_tuple.41 = build_tuple(items=[Var(count, _loop_hafnian_subroutines.py:140), Var($154build_slice.40, _loop_hafnian_subroutines.py:149)])
DEBUG 2022-02-14 16:38:02,179 replaced with: $156build_tuple.41 = build_tuple(items=[Var(count.1, _loop_hafnian_subroutines.py:148), Var($154build_slice.40, _loop_hafnian_subroutines.py:149)])
DEBUG 2022-02-14 16:38:02,179 on stmt: comb[$156build_tuple.41] = $144binary_subscr.34
DEBUG 2022-02-14 16:38:02,179 on stmt: $160load_global.42 = global(range: <class 'range'>)
DEBUG 2022-02-14 16:38:02,180 on stmt: $const162.43 = const(int, 1)
DEBUG 2022-02-14 16:38:02,180 on stmt: $const166.45 = const(int, 2)
DEBUG 2022-02-14 16:38:02,180 on stmt: $170binary_multiply.47 = $const166.45 * i
DEBUG 2022-02-14 16:38:02,180 on stmt: $172binary_floor_divide.48 = n // $170binary_multiply.47
DEBUG 2022-02-14 16:38:02,180 on stmt: $const174.49 = const(int, 1)
DEBUG 2022-02-14 16:38:02,180 on stmt: $176binary_add.50 = $172binary_floor_divide.48 + $const174.49
DEBUG 2022-02-14 16:38:02,180 on stmt: $178call_function.51 = call $160load_global.42($const162.43, $176binary_add.50, func=$160load_global.42, args=[Var($const162.43, _loop_hafnian_subroutines.py:150), Var($176binary_add.50, _loop_hafnian_subroutines.py:150)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:02,180 on stmt: $180get_iter.52 = getiter(value=$178call_function.51)
DEBUG 2022-02-14 16:38:02,180 on stmt: $phi182.1 = $180get_iter.52
DEBUG 2022-02-14 16:38:02,180 on stmt: jump 182
DEBUG 2022-02-14 16:38:02,180 ==== SSA block rewrite pass on 182
DEBUG 2022-02-14 16:38:02,180 Running <numba.core.ssa._FixSSAVars object at 0x7fa0467fce80>
DEBUG 2022-02-14 16:38:02,180 on stmt: powfactor.2 = phi(incoming_values=[Var(powfactor.1, _loop_hafnian_subroutines.py:151), Var(powfactor, _loop_hafnian_subroutines.py:147)], incoming_blocks=[282, 70])
DEBUG 2022-02-14 16:38:02,180 on stmt: $182for_iter.2 = iternext(value=$phi182.1)
DEBUG 2022-02-14 16:38:02,180 on stmt: $182for_iter.3 = pair_first(value=$182for_iter.2)
DEBUG 2022-02-14 16:38:02,180 on stmt: $182for_iter.4 = pair_second(value=$182for_iter.2)
DEBUG 2022-02-14 16:38:02,180 on stmt: $phi184.2 = $182for_iter.3
DEBUG 2022-02-14 16:38:02,180 on stmt: branch $182for_iter.4, 184, 284
DEBUG 2022-02-14 16:38:02,180 ==== SSA block rewrite pass on 184
DEBUG 2022-02-14 16:38:02,180 Running <numba.core.ssa._FixSSAVars object at 0x7fa0467fce80>
DEBUG 2022-02-14 16:38:02,180 on stmt: j = $phi184.2
DEBUG 2022-02-14 16:38:02,181 on stmt: $192binary_true_divide.6 = factor / j
DEBUG 2022-02-14 16:38:02,181 on stmt: $194inplace_multiply.7 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=powfactor.2, rhs=$192binary_true_divide.6, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:38:02,181 on stmt: powfactor.1 = $194inplace_multiply.7
DEBUG 2022-02-14 16:38:02,181 on stmt: $198load_global.8 = global(range: <class 'range'>)
DEBUG 2022-02-14 16:38:02,181 on stmt: $204binary_multiply.11 = i * j
DEBUG 2022-02-14 16:38:02,181 on stmt: $const206.12 = const(int, 1)
DEBUG 2022-02-14 16:38:02,181 on stmt: $208binary_add.13 = $204binary_multiply.11 + $const206.12
DEBUG 2022-02-14 16:38:02,181 on stmt: $const212.15 = const(int, 2)
DEBUG 2022-02-14 16:38:02,181 on stmt: $214binary_floor_divide.16 = n // $const212.15
DEBUG 2022-02-14 16:38:02,181 on stmt: $const216.17 = const(int, 2)
DEBUG 2022-02-14 16:38:02,181 on stmt: $218binary_add.18 = $214binary_floor_divide.16 + $const216.17
DEBUG 2022-02-14 16:38:02,181 on stmt: $220call_function.19 = call $198load_global.8($208binary_add.13, $218binary_add.18, func=$198load_global.8, args=[Var($208binary_add.13, _loop_hafnian_subroutines.py:152), Var($218binary_add.18, _loop_hafnian_subroutines.py:152)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:02,181 on stmt: $222get_iter.20 = getiter(value=$220call_function.19)
DEBUG 2022-02-14 16:38:02,181 on stmt: $phi224.2 = $222get_iter.20
DEBUG 2022-02-14 16:38:02,181 on stmt: jump 224
DEBUG 2022-02-14 16:38:02,181 ==== SSA block rewrite pass on 224
DEBUG 2022-02-14 16:38:02,181 Running <numba.core.ssa._FixSSAVars object at 0x7fa0467fce80>
DEBUG 2022-02-14 16:38:02,181 on stmt: $224for_iter.3 = iternext(value=$phi224.2)
DEBUG 2022-02-14 16:38:02,181 on stmt: $224for_iter.4 = pair_first(value=$224for_iter.3)
DEBUG 2022-02-14 16:38:02,182 on stmt: $224for_iter.5 = pair_second(value=$224for_iter.3)
DEBUG 2022-02-14 16:38:02,182 on stmt: $phi226.3 = $224for_iter.4
DEBUG 2022-02-14 16:38:02,182 on stmt: branch $224for_iter.5, 226, 282
DEBUG 2022-02-14 16:38:02,182 ==== SSA block rewrite pass on 226
DEBUG 2022-02-14 16:38:02,182 Running <numba.core.ssa._FixSSAVars object at 0x7fa0467fce80>
DEBUG 2022-02-14 16:38:02,182 on stmt: k = $phi226.3
DEBUG 2022-02-14 16:38:02,182 on stmt: $const234.7 = const(int, 1)
DEBUG 2022-02-14 16:38:02,182 on stmt: $236binary_subtract.8 = k - $const234.7
DEBUG 2022-02-14 16:38:02,182 on stmt: $238build_tuple.9 = build_tuple(items=[Var(count, _loop_hafnian_subroutines.py:140), Var($236binary_subtract.8, _loop_hafnian_subroutines.py:153)])
DEBUG 2022-02-14 16:38:02,182 find_def var='count' stmt=$238build_tuple.9 = build_tuple(items=[Var(count, _loop_hafnian_subroutines.py:140), Var($236binary_subtract.8, _loop_hafnian_subroutines.py:153)])
DEBUG 2022-02-14 16:38:02,182 find_def_from_top label 226
DEBUG 2022-02-14 16:38:02,182 idom 224 from label 226
DEBUG 2022-02-14 16:38:02,182 find_def_from_bottom label 224
DEBUG 2022-02-14 16:38:02,182 find_def_from_top label 224
DEBUG 2022-02-14 16:38:02,182 idom 184 from label 224
DEBUG 2022-02-14 16:38:02,182 find_def_from_bottom label 184
DEBUG 2022-02-14 16:38:02,182 find_def_from_top label 184
DEBUG 2022-02-14 16:38:02,182 idom 182 from label 184
DEBUG 2022-02-14 16:38:02,182 find_def_from_bottom label 182
DEBUG 2022-02-14 16:38:02,182 find_def_from_top label 182
DEBUG 2022-02-14 16:38:02,182 idom 70 from label 182
DEBUG 2022-02-14 16:38:02,182 find_def_from_bottom label 70
DEBUG 2022-02-14 16:38:02,183 replaced with: $238build_tuple.9 = build_tuple(items=[Var(count.1, _loop_hafnian_subroutines.py:148), Var($236binary_subtract.8, _loop_hafnian_subroutines.py:153)])
DEBUG 2022-02-14 16:38:02,183 on stmt: $242binary_subscr.12 = getitem(value=comb, index=$238build_tuple.9, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:02,183 on stmt: $const246.14 = const(int, 1)
DEBUG 2022-02-14 16:38:02,183 on stmt: $250binary_subtract.16 = $const246.14 - count
DEBUG 2022-02-14 16:38:02,183 find_def var='count' stmt=$250binary_subtract.16 = $const246.14 - count
DEBUG 2022-02-14 16:38:02,183 find_def_from_top label 226
DEBUG 2022-02-14 16:38:02,183 idom 224 from label 226
DEBUG 2022-02-14 16:38:02,183 find_def_from_bottom label 224
DEBUG 2022-02-14 16:38:02,183 find_def_from_top label 224
DEBUG 2022-02-14 16:38:02,183 idom 184 from label 224
DEBUG 2022-02-14 16:38:02,183 find_def_from_bottom label 184
DEBUG 2022-02-14 16:38:02,183 find_def_from_top label 184
DEBUG 2022-02-14 16:38:02,183 idom 182 from label 184
DEBUG 2022-02-14 16:38:02,183 find_def_from_bottom label 182
DEBUG 2022-02-14 16:38:02,183 find_def_from_top label 182
DEBUG 2022-02-14 16:38:02,183 idom 70 from label 182
DEBUG 2022-02-14 16:38:02,183 find_def_from_bottom label 70
DEBUG 2022-02-14 16:38:02,183 replaced with: $250binary_subtract.16 = $const246.14 - count.1
DEBUG 2022-02-14 16:38:02,183 on stmt: $258binary_multiply.20 = i * j
DEBUG 2022-02-14 16:38:02,183 on stmt: $260binary_subtract.21 = k - $258binary_multiply.20
DEBUG 2022-02-14 16:38:02,183 on stmt: $const262.22 = const(int, 1)
DEBUG 2022-02-14 16:38:02,183 on stmt: $264binary_subtract.23 = $260binary_subtract.21 - $const262.22
DEBUG 2022-02-14 16:38:02,184 on stmt: $266build_tuple.24 = build_tuple(items=[Var($250binary_subtract.16, _loop_hafnian_subroutines.py:153), Var($264binary_subtract.23, _loop_hafnian_subroutines.py:153)])
DEBUG 2022-02-14 16:38:02,184 on stmt: $268binary_subscr.25 = getitem(value=comb, index=$266build_tuple.24, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:02,184 on stmt: $272binary_multiply.27 = $268binary_subscr.25 * powfactor.1
DEBUG 2022-02-14 16:38:02,184 on stmt: $274inplace_add.28 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$242binary_subscr.12, rhs=$272binary_multiply.27, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:38:02,184 on stmt: comb[$238build_tuple.9] = $274inplace_add.28
DEBUG 2022-02-14 16:38:02,184 on stmt: jump 224
DEBUG 2022-02-14 16:38:02,184 ==== SSA block rewrite pass on 282
DEBUG 2022-02-14 16:38:02,184 Running <numba.core.ssa._FixSSAVars object at 0x7fa0467fce80>
DEBUG 2022-02-14 16:38:02,184 on stmt: jump 182
DEBUG 2022-02-14 16:38:02,184 ==== SSA block rewrite pass on 284
DEBUG 2022-02-14 16:38:02,184 Running <numba.core.ssa._FixSSAVars object at 0x7fa0467fce80>
DEBUG 2022-02-14 16:38:02,184 on stmt: jump 68
DEBUG 2022-02-14 16:38:02,184 ==== SSA block rewrite pass on 286
DEBUG 2022-02-14 16:38:02,184 Running <numba.core.ssa._FixSSAVars object at 0x7fa0467fce80>
DEBUG 2022-02-14 16:38:02,184 on stmt: $const290.2 = const(NoneType, None)
DEBUG 2022-02-14 16:38:02,184 on stmt: $const292.3 = const(NoneType, None)
DEBUG 2022-02-14 16:38:02,184 on stmt: $294build_slice.4 = global(slice: <class 'slice'>)
DEBUG 2022-02-14 16:38:02,184 on stmt: $294build_slice.5 = call $294build_slice.4($const290.2, $const292.3, func=$294build_slice.4, args=(Var($const290.2, _loop_hafnian_subroutines.py:154), Var($const292.3, _loop_hafnian_subroutines.py:154)), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:02,184 on stmt: $296build_tuple.6 = build_tuple(items=[Var(count, _loop_hafnian_subroutines.py:140), Var($294build_slice.5, _loop_hafnian_subroutines.py:154)])
DEBUG 2022-02-14 16:38:02,184 find_def var='count' stmt=$296build_tuple.6 = build_tuple(items=[Var(count, _loop_hafnian_subroutines.py:140), Var($294build_slice.5, _loop_hafnian_subroutines.py:154)])
DEBUG 2022-02-14 16:38:02,184 find_def_from_top label 286
DEBUG 2022-02-14 16:38:02,185 idom 68 from label 286
DEBUG 2022-02-14 16:38:02,185 find_def_from_bottom label 68
DEBUG 2022-02-14 16:38:02,185 replaced with: $296build_tuple.6 = build_tuple(items=[Var(count.2, _loop_hafnian_subroutines.py:143), Var($294build_slice.5, _loop_hafnian_subroutines.py:154)])
DEBUG 2022-02-14 16:38:02,185 on stmt: $298binary_subscr.7 = getitem(value=comb, index=$296build_tuple.6, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:02,185 on stmt: $300return_value.8 = cast(value=$298binary_subscr.7)
DEBUG 2022-02-14 16:38:02,185 on stmt: return $300return_value.8
DEBUG 2022-02-14 16:38:02,185 Fix SSA violator on var XD_S
DEBUG 2022-02-14 16:38:02,185 ==== SSA block rewrite pass on 0
DEBUG 2022-02-14 16:38:02,185 Running <numba.core.ssa._FreshVarHandler object at 0x7fa04711c6a0>
DEBUG 2022-02-14 16:38:02,185 on stmt: E = arg(0, name=E)
DEBUG 2022-02-14 16:38:02,185 on stmt: AX_S = arg(1, name=AX_S)
DEBUG 2022-02-14 16:38:02,185 on stmt: XD_S = arg(2, name=XD_S)
DEBUG 2022-02-14 16:38:02,185 first assign: XD_S
DEBUG 2022-02-14 16:38:02,185 replaced with: XD_S = arg(2, name=XD_S)
DEBUG 2022-02-14 16:38:02,185 on stmt: D_S = arg(3, name=D_S)
DEBUG 2022-02-14 16:38:02,185 on stmt: n = arg(4, name=n)
DEBUG 2022-02-14 16:38:02,185 on stmt: $4load_method.1 = getattr(value=E, attr=copy)
DEBUG 2022-02-14 16:38:02,185 on stmt: E_k = call $4load_method.1(func=$4load_method.1, args=[], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:02,185 on stmt: count = const(int, 0)
DEBUG 2022-02-14 16:38:02,185 on stmt: $14load_global.4 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:38:02,186 on stmt: $16load_attr.5 = getattr(value=$14load_global.4, attr=zeros)
DEBUG 2022-02-14 16:38:02,186 on stmt: $const18.6 = const(int, 2)
DEBUG 2022-02-14 16:38:02,186 on stmt: $const22.8 = const(int, 2)
DEBUG 2022-02-14 16:38:02,186 on stmt: $24binary_floor_divide.9 = n // $const22.8
DEBUG 2022-02-14 16:38:02,186 on stmt: $const26.10 = const(int, 1)
DEBUG 2022-02-14 16:38:02,186 on stmt: $28binary_add.11 = $24binary_floor_divide.9 + $const26.10
DEBUG 2022-02-14 16:38:02,186 on stmt: $30build_tuple.12 = build_tuple(items=[Var($const18.6, _loop_hafnian_subroutines.py:141), Var($28binary_add.11, _loop_hafnian_subroutines.py:141)])
DEBUG 2022-02-14 16:38:02,186 on stmt: $32load_global.13 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:38:02,186 on stmt: $34load_attr.14 = getattr(value=$32load_global.13, attr=complex128)
DEBUG 2022-02-14 16:38:02,186 on stmt: comb = call $16load_attr.5($30build_tuple.12, func=$16load_attr.5, args=[Var($30build_tuple.12, _loop_hafnian_subroutines.py:141)], kws=[('dtype', Var($34load_attr.14, _loop_hafnian_subroutines.py:141))], vararg=None, target=None)
DEBUG 2022-02-14 16:38:02,186 on stmt: $const42.17 = const(int, 1)
DEBUG 2022-02-14 16:38:02,186 on stmt: $const_0 = const(int, 0)
DEBUG 2022-02-14 16:38:02,186 on stmt: $const_0.1 = const(int, 0)
DEBUG 2022-02-14 16:38:02,186 on stmt: $const46.19 = build_tuple(items=[Var($const_0, _loop_hafnian_subroutines.py:142), Var($const_0.1, _loop_hafnian_subroutines.py:142)])
DEBUG 2022-02-14 16:38:02,186 on stmt: comb[(0, 0)] = $const42.17
DEBUG 2022-02-14 16:38:02,186 on stmt: $50load_global.20 = global(range: <class 'range'>)
DEBUG 2022-02-14 16:38:02,186 on stmt: $const52.21 = const(int, 1)
DEBUG 2022-02-14 16:38:02,186 on stmt: $const56.23 = const(int, 2)
DEBUG 2022-02-14 16:38:02,187 on stmt: $58binary_floor_divide.24 = n // $const56.23
DEBUG 2022-02-14 16:38:02,187 on stmt: $const60.25 = const(int, 1)
DEBUG 2022-02-14 16:38:02,187 on stmt: $62binary_add.26 = $58binary_floor_divide.24 + $const60.25
DEBUG 2022-02-14 16:38:02,187 on stmt: $64call_function.27 = call $50load_global.20($const52.21, $62binary_add.26, func=$50load_global.20, args=[Var($const52.21, _loop_hafnian_subroutines.py:143), Var($62binary_add.26, _loop_hafnian_subroutines.py:143)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:02,187 on stmt: $66get_iter.28 = getiter(value=$64call_function.27)
DEBUG 2022-02-14 16:38:02,187 on stmt: $phi68.0 = $66get_iter.28
DEBUG 2022-02-14 16:38:02,187 on stmt: jump 68
DEBUG 2022-02-14 16:38:02,187 ==== SSA block rewrite pass on 68
DEBUG 2022-02-14 16:38:02,187 Running <numba.core.ssa._FreshVarHandler object at 0x7fa04711c6a0>
DEBUG 2022-02-14 16:38:02,187 on stmt: count.2 = phi(incoming_values=[Var(count, _loop_hafnian_subroutines.py:140), Var(count.1, _loop_hafnian_subroutines.py:148)], incoming_blocks=[0, 284])
DEBUG 2022-02-14 16:38:02,187 on stmt: $68for_iter.1 = iternext(value=$phi68.0)
DEBUG 2022-02-14 16:38:02,187 on stmt: $68for_iter.2 = pair_first(value=$68for_iter.1)
DEBUG 2022-02-14 16:38:02,187 on stmt: $68for_iter.3 = pair_second(value=$68for_iter.1)
DEBUG 2022-02-14 16:38:02,187 on stmt: $phi70.1 = $68for_iter.2
DEBUG 2022-02-14 16:38:02,187 on stmt: branch $68for_iter.3, 70, 286
DEBUG 2022-02-14 16:38:02,187 ==== SSA block rewrite pass on 70
DEBUG 2022-02-14 16:38:02,187 Running <numba.core.ssa._FreshVarHandler object at 0x7fa04711c6a0>
DEBUG 2022-02-14 16:38:02,187 on stmt: i = $phi70.1
DEBUG 2022-02-14 16:38:02,187 on stmt: $74load_method.3 = getattr(value=E_k, attr=sum)
DEBUG 2022-02-14 16:38:02,188 on stmt: $76call_method.4 = call $74load_method.3(func=$74load_method.3, args=[], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:02,188 on stmt: $const78.5 = const(int, 2)
DEBUG 2022-02-14 16:38:02,188 on stmt: $82binary_multiply.7 = $const78.5 * i
DEBUG 2022-02-14 16:38:02,188 on stmt: $84binary_true_divide.8 = $76call_method.4 / $82binary_multiply.7
DEBUG 2022-02-14 16:38:02,188 on stmt: $90binary_matrix_multiply.11 = XD_S <built-in function matmul> D_S
DEBUG 2022-02-14 16:38:02,188 on stmt: $const92.12 = const(int, 2)
DEBUG 2022-02-14 16:38:02,188 on stmt: $94binary_true_divide.13 = $90binary_matrix_multiply.11 / $const92.12
DEBUG 2022-02-14 16:38:02,188 on stmt: factor = $84binary_true_divide.8 + $94binary_true_divide.13
DEBUG 2022-02-14 16:38:02,188 on stmt: $104inplace_multiply.17 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=E_k, rhs=E, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:38:02,188 on stmt: E_k = $104inplace_multiply.17
DEBUG 2022-02-14 16:38:02,188 on stmt: $112binary_matrix_multiply.20 = XD_S <built-in function matmul> AX_S
DEBUG 2022-02-14 16:38:02,188 on stmt: XD_S = $112binary_matrix_multiply.20
DEBUG 2022-02-14 16:38:02,188 replaced with: XD_S.1 = $112binary_matrix_multiply.20
DEBUG 2022-02-14 16:38:02,188 on stmt: powfactor = const(int, 1)
DEBUG 2022-02-14 16:38:02,188 on stmt: $const120.22 = const(int, 1)
DEBUG 2022-02-14 16:38:02,188 on stmt: $124binary_subtract.24 = $const120.22 - count.2
DEBUG 2022-02-14 16:38:02,188 on stmt: count.1 = $124binary_subtract.24
DEBUG 2022-02-14 16:38:02,188 on stmt: $const130.26 = const(int, 1)
DEBUG 2022-02-14 16:38:02,188 on stmt: $134binary_subtract.28 = $const130.26 - count.1
DEBUG 2022-02-14 16:38:02,188 on stmt: $const136.29 = const(NoneType, None)
DEBUG 2022-02-14 16:38:02,189 on stmt: $const138.30 = const(NoneType, None)
DEBUG 2022-02-14 16:38:02,189 on stmt: $140build_slice.31 = global(slice: <class 'slice'>)
DEBUG 2022-02-14 16:38:02,189 on stmt: $140build_slice.32 = call $140build_slice.31($const136.29, $const138.30, func=$140build_slice.31, args=(Var($const136.29, _loop_hafnian_subroutines.py:149), Var($const138.30, _loop_hafnian_subroutines.py:149)), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:02,189 on stmt: $142build_tuple.33 = build_tuple(items=[Var($134binary_subtract.28, _loop_hafnian_subroutines.py:149), Var($140build_slice.32, _loop_hafnian_subroutines.py:149)])
DEBUG 2022-02-14 16:38:02,189 on stmt: $144binary_subscr.34 = getitem(value=comb, index=$142build_tuple.33, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:02,189 on stmt: $const150.37 = const(NoneType, None)
DEBUG 2022-02-14 16:38:02,189 on stmt: $const152.38 = const(NoneType, None)
DEBUG 2022-02-14 16:38:02,189 on stmt: $154build_slice.39 = global(slice: <class 'slice'>)
DEBUG 2022-02-14 16:38:02,189 on stmt: $154build_slice.40 = call $154build_slice.39($const150.37, $const152.38, func=$154build_slice.39, args=(Var($const150.37, _loop_hafnian_subroutines.py:149), Var($const152.38, _loop_hafnian_subroutines.py:149)), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:02,189 on stmt: $156build_tuple.41 = build_tuple(items=[Var(count.1, _loop_hafnian_subroutines.py:148), Var($154build_slice.40, _loop_hafnian_subroutines.py:149)])
DEBUG 2022-02-14 16:38:02,189 on stmt: comb[$156build_tuple.41] = $144binary_subscr.34
DEBUG 2022-02-14 16:38:02,189 on stmt: $160load_global.42 = global(range: <class 'range'>)
DEBUG 2022-02-14 16:38:02,189 on stmt: $const162.43 = const(int, 1)
DEBUG 2022-02-14 16:38:02,189 on stmt: $const166.45 = const(int, 2)
DEBUG 2022-02-14 16:38:02,189 on stmt: $170binary_multiply.47 = $const166.45 * i
DEBUG 2022-02-14 16:38:02,189 on stmt: $172binary_floor_divide.48 = n // $170binary_multiply.47
DEBUG 2022-02-14 16:38:02,189 on stmt: $const174.49 = const(int, 1)
DEBUG 2022-02-14 16:38:02,189 on stmt: $176binary_add.50 = $172binary_floor_divide.48 + $const174.49
DEBUG 2022-02-14 16:38:02,189 on stmt: $178call_function.51 = call $160load_global.42($const162.43, $176binary_add.50, func=$160load_global.42, args=[Var($const162.43, _loop_hafnian_subroutines.py:150), Var($176binary_add.50, _loop_hafnian_subroutines.py:150)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:02,190 on stmt: $180get_iter.52 = getiter(value=$178call_function.51)
DEBUG 2022-02-14 16:38:02,190 on stmt: $phi182.1 = $180get_iter.52
DEBUG 2022-02-14 16:38:02,190 on stmt: jump 182
DEBUG 2022-02-14 16:38:02,190 ==== SSA block rewrite pass on 182
DEBUG 2022-02-14 16:38:02,190 Running <numba.core.ssa._FreshVarHandler object at 0x7fa04711c6a0>
DEBUG 2022-02-14 16:38:02,190 on stmt: powfactor.2 = phi(incoming_values=[Var(powfactor.1, _loop_hafnian_subroutines.py:151), Var(powfactor, _loop_hafnian_subroutines.py:147)], incoming_blocks=[282, 70])
DEBUG 2022-02-14 16:38:02,190 on stmt: $182for_iter.2 = iternext(value=$phi182.1)
DEBUG 2022-02-14 16:38:02,190 on stmt: $182for_iter.3 = pair_first(value=$182for_iter.2)
DEBUG 2022-02-14 16:38:02,190 on stmt: $182for_iter.4 = pair_second(value=$182for_iter.2)
DEBUG 2022-02-14 16:38:02,190 on stmt: $phi184.2 = $182for_iter.3
DEBUG 2022-02-14 16:38:02,190 on stmt: branch $182for_iter.4, 184, 284
DEBUG 2022-02-14 16:38:02,190 ==== SSA block rewrite pass on 184
DEBUG 2022-02-14 16:38:02,190 Running <numba.core.ssa._FreshVarHandler object at 0x7fa04711c6a0>
DEBUG 2022-02-14 16:38:02,190 on stmt: j = $phi184.2
DEBUG 2022-02-14 16:38:02,190 on stmt: $192binary_true_divide.6 = factor / j
DEBUG 2022-02-14 16:38:02,190 on stmt: $194inplace_multiply.7 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=powfactor.2, rhs=$192binary_true_divide.6, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:38:02,190 on stmt: powfactor.1 = $194inplace_multiply.7
DEBUG 2022-02-14 16:38:02,190 on stmt: $198load_global.8 = global(range: <class 'range'>)
DEBUG 2022-02-14 16:38:02,190 on stmt: $204binary_multiply.11 = i * j
DEBUG 2022-02-14 16:38:02,190 on stmt: $const206.12 = const(int, 1)
DEBUG 2022-02-14 16:38:02,191 on stmt: $208binary_add.13 = $204binary_multiply.11 + $const206.12
DEBUG 2022-02-14 16:38:02,191 on stmt: $const212.15 = const(int, 2)
DEBUG 2022-02-14 16:38:02,191 on stmt: $214binary_floor_divide.16 = n // $const212.15
DEBUG 2022-02-14 16:38:02,191 on stmt: $const216.17 = const(int, 2)
DEBUG 2022-02-14 16:38:02,191 on stmt: $218binary_add.18 = $214binary_floor_divide.16 + $const216.17
DEBUG 2022-02-14 16:38:02,191 on stmt: $220call_function.19 = call $198load_global.8($208binary_add.13, $218binary_add.18, func=$198load_global.8, args=[Var($208binary_add.13, _loop_hafnian_subroutines.py:152), Var($218binary_add.18, _loop_hafnian_subroutines.py:152)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:02,191 on stmt: $222get_iter.20 = getiter(value=$220call_function.19)
DEBUG 2022-02-14 16:38:02,191 on stmt: $phi224.2 = $222get_iter.20
DEBUG 2022-02-14 16:38:02,191 on stmt: jump 224
DEBUG 2022-02-14 16:38:02,191 ==== SSA block rewrite pass on 224
DEBUG 2022-02-14 16:38:02,191 Running <numba.core.ssa._FreshVarHandler object at 0x7fa04711c6a0>
DEBUG 2022-02-14 16:38:02,191 on stmt: $224for_iter.3 = iternext(value=$phi224.2)
DEBUG 2022-02-14 16:38:02,191 on stmt: $224for_iter.4 = pair_first(value=$224for_iter.3)
DEBUG 2022-02-14 16:38:02,191 on stmt: $224for_iter.5 = pair_second(value=$224for_iter.3)
DEBUG 2022-02-14 16:38:02,191 on stmt: $phi226.3 = $224for_iter.4
DEBUG 2022-02-14 16:38:02,191 on stmt: branch $224for_iter.5, 226, 282
DEBUG 2022-02-14 16:38:02,191 ==== SSA block rewrite pass on 226
DEBUG 2022-02-14 16:38:02,191 Running <numba.core.ssa._FreshVarHandler object at 0x7fa04711c6a0>
DEBUG 2022-02-14 16:38:02,192 on stmt: k = $phi226.3
DEBUG 2022-02-14 16:38:02,192 on stmt: $const234.7 = const(int, 1)
DEBUG 2022-02-14 16:38:02,192 on stmt: $236binary_subtract.8 = k - $const234.7
DEBUG 2022-02-14 16:38:02,192 on stmt: $238build_tuple.9 = build_tuple(items=[Var(count.1, _loop_hafnian_subroutines.py:148), Var($236binary_subtract.8, _loop_hafnian_subroutines.py:153)])
DEBUG 2022-02-14 16:38:02,192 on stmt: $242binary_subscr.12 = getitem(value=comb, index=$238build_tuple.9, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:02,192 on stmt: $const246.14 = const(int, 1)
DEBUG 2022-02-14 16:38:02,192 on stmt: $250binary_subtract.16 = $const246.14 - count.1
DEBUG 2022-02-14 16:38:02,192 on stmt: $258binary_multiply.20 = i * j
DEBUG 2022-02-14 16:38:02,192 on stmt: $260binary_subtract.21 = k - $258binary_multiply.20
DEBUG 2022-02-14 16:38:02,192 on stmt: $const262.22 = const(int, 1)
DEBUG 2022-02-14 16:38:02,192 on stmt: $264binary_subtract.23 = $260binary_subtract.21 - $const262.22
DEBUG 2022-02-14 16:38:02,192 on stmt: $266build_tuple.24 = build_tuple(items=[Var($250binary_subtract.16, _loop_hafnian_subroutines.py:153), Var($264binary_subtract.23, _loop_hafnian_subroutines.py:153)])
DEBUG 2022-02-14 16:38:02,192 on stmt: $268binary_subscr.25 = getitem(value=comb, index=$266build_tuple.24, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:02,192 on stmt: $272binary_multiply.27 = $268binary_subscr.25 * powfactor.1
DEBUG 2022-02-14 16:38:02,192 on stmt: $274inplace_add.28 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$242binary_subscr.12, rhs=$272binary_multiply.27, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:38:02,192 on stmt: comb[$238build_tuple.9] = $274inplace_add.28
DEBUG 2022-02-14 16:38:02,192 on stmt: jump 224
DEBUG 2022-02-14 16:38:02,192 ==== SSA block rewrite pass on 282
DEBUG 2022-02-14 16:38:02,192 Running <numba.core.ssa._FreshVarHandler object at 0x7fa04711c6a0>
DEBUG 2022-02-14 16:38:02,192 on stmt: jump 182
DEBUG 2022-02-14 16:38:02,193 ==== SSA block rewrite pass on 284
DEBUG 2022-02-14 16:38:02,193 Running <numba.core.ssa._FreshVarHandler object at 0x7fa04711c6a0>
DEBUG 2022-02-14 16:38:02,193 on stmt: jump 68
DEBUG 2022-02-14 16:38:02,193 ==== SSA block rewrite pass on 286
DEBUG 2022-02-14 16:38:02,193 Running <numba.core.ssa._FreshVarHandler object at 0x7fa04711c6a0>
DEBUG 2022-02-14 16:38:02,193 on stmt: $const290.2 = const(NoneType, None)
DEBUG 2022-02-14 16:38:02,193 on stmt: $const292.3 = const(NoneType, None)
DEBUG 2022-02-14 16:38:02,193 on stmt: $294build_slice.4 = global(slice: <class 'slice'>)
DEBUG 2022-02-14 16:38:02,193 on stmt: $294build_slice.5 = call $294build_slice.4($const290.2, $const292.3, func=$294build_slice.4, args=(Var($const290.2, _loop_hafnian_subroutines.py:154), Var($const292.3, _loop_hafnian_subroutines.py:154)), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:02,193 on stmt: $296build_tuple.6 = build_tuple(items=[Var(count.2, _loop_hafnian_subroutines.py:143), Var($294build_slice.5, _loop_hafnian_subroutines.py:154)])
DEBUG 2022-02-14 16:38:02,193 on stmt: $298binary_subscr.7 = getitem(value=comb, index=$296build_tuple.6, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:02,193 on stmt: $300return_value.8 = cast(value=$298binary_subscr.7)
DEBUG 2022-02-14 16:38:02,193 on stmt: return $300return_value.8
DEBUG 2022-02-14 16:38:02,193 Replaced assignments: defaultdict(<class 'list'>,
            {0: [<numba.core.ir.Assign object at 0x7fa0470fa310>],
             70: [<numba.core.ir.Assign object at 0x7fa04677de50>]})
DEBUG 2022-02-14 16:38:02,193 ==== SSA block rewrite pass on 0
DEBUG 2022-02-14 16:38:02,193 Running <numba.core.ssa._FixSSAVars object at 0x7fa0467fce80>
DEBUG 2022-02-14 16:38:02,193 on stmt: E = arg(0, name=E)
DEBUG 2022-02-14 16:38:02,193 on stmt: AX_S = arg(1, name=AX_S)
DEBUG 2022-02-14 16:38:02,193 on stmt: XD_S = arg(2, name=XD_S)
DEBUG 2022-02-14 16:38:02,193 on stmt: D_S = arg(3, name=D_S)
DEBUG 2022-02-14 16:38:02,194 on stmt: n = arg(4, name=n)
DEBUG 2022-02-14 16:38:02,194 on stmt: $4load_method.1 = getattr(value=E, attr=copy)
DEBUG 2022-02-14 16:38:02,194 on stmt: E_k = call $4load_method.1(func=$4load_method.1, args=[], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:02,194 on stmt: count = const(int, 0)
DEBUG 2022-02-14 16:38:02,194 on stmt: $14load_global.4 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:38:02,194 on stmt: $16load_attr.5 = getattr(value=$14load_global.4, attr=zeros)
DEBUG 2022-02-14 16:38:02,194 on stmt: $const18.6 = const(int, 2)
DEBUG 2022-02-14 16:38:02,194 on stmt: $const22.8 = const(int, 2)
DEBUG 2022-02-14 16:38:02,194 on stmt: $24binary_floor_divide.9 = n // $const22.8
DEBUG 2022-02-14 16:38:02,194 on stmt: $const26.10 = const(int, 1)
DEBUG 2022-02-14 16:38:02,194 on stmt: $28binary_add.11 = $24binary_floor_divide.9 + $const26.10
DEBUG 2022-02-14 16:38:02,194 on stmt: $30build_tuple.12 = build_tuple(items=[Var($const18.6, _loop_hafnian_subroutines.py:141), Var($28binary_add.11, _loop_hafnian_subroutines.py:141)])
DEBUG 2022-02-14 16:38:02,194 on stmt: $32load_global.13 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:38:02,194 on stmt: $34load_attr.14 = getattr(value=$32load_global.13, attr=complex128)
DEBUG 2022-02-14 16:38:02,194 on stmt: comb = call $16load_attr.5($30build_tuple.12, func=$16load_attr.5, args=[Var($30build_tuple.12, _loop_hafnian_subroutines.py:141)], kws=[('dtype', Var($34load_attr.14, _loop_hafnian_subroutines.py:141))], vararg=None, target=None)
DEBUG 2022-02-14 16:38:02,194 on stmt: $const42.17 = const(int, 1)
DEBUG 2022-02-14 16:38:02,194 on stmt: $const_0 = const(int, 0)
DEBUG 2022-02-14 16:38:02,194 on stmt: $const_0.1 = const(int, 0)
DEBUG 2022-02-14 16:38:02,194 on stmt: $const46.19 = build_tuple(items=[Var($const_0, _loop_hafnian_subroutines.py:142), Var($const_0.1, _loop_hafnian_subroutines.py:142)])
DEBUG 2022-02-14 16:38:02,195 on stmt: comb[(0, 0)] = $const42.17
DEBUG 2022-02-14 16:38:02,195 on stmt: $50load_global.20 = global(range: <class 'range'>)
DEBUG 2022-02-14 16:38:02,195 on stmt: $const52.21 = const(int, 1)
DEBUG 2022-02-14 16:38:02,195 on stmt: $const56.23 = const(int, 2)
DEBUG 2022-02-14 16:38:02,195 on stmt: $58binary_floor_divide.24 = n // $const56.23
DEBUG 2022-02-14 16:38:02,195 on stmt: $const60.25 = const(int, 1)
DEBUG 2022-02-14 16:38:02,195 on stmt: $62binary_add.26 = $58binary_floor_divide.24 + $const60.25
DEBUG 2022-02-14 16:38:02,195 on stmt: $64call_function.27 = call $50load_global.20($const52.21, $62binary_add.26, func=$50load_global.20, args=[Var($const52.21, _loop_hafnian_subroutines.py:143), Var($62binary_add.26, _loop_hafnian_subroutines.py:143)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:02,195 on stmt: $66get_iter.28 = getiter(value=$64call_function.27)
DEBUG 2022-02-14 16:38:02,195 on stmt: $phi68.0 = $66get_iter.28
DEBUG 2022-02-14 16:38:02,195 on stmt: jump 68
DEBUG 2022-02-14 16:38:02,195 ==== SSA block rewrite pass on 68
DEBUG 2022-02-14 16:38:02,195 Running <numba.core.ssa._FixSSAVars object at 0x7fa0467fce80>
DEBUG 2022-02-14 16:38:02,195 on stmt: count.2 = phi(incoming_values=[Var(count, _loop_hafnian_subroutines.py:140), Var(count.1, _loop_hafnian_subroutines.py:148)], incoming_blocks=[0, 284])
DEBUG 2022-02-14 16:38:02,195 on stmt: $68for_iter.1 = iternext(value=$phi68.0)
DEBUG 2022-02-14 16:38:02,195 on stmt: $68for_iter.2 = pair_first(value=$68for_iter.1)
DEBUG 2022-02-14 16:38:02,195 on stmt: $68for_iter.3 = pair_second(value=$68for_iter.1)
DEBUG 2022-02-14 16:38:02,195 on stmt: $phi70.1 = $68for_iter.2
DEBUG 2022-02-14 16:38:02,195 on stmt: branch $68for_iter.3, 70, 286
DEBUG 2022-02-14 16:38:02,195 ==== SSA block rewrite pass on 70
DEBUG 2022-02-14 16:38:02,196 Running <numba.core.ssa._FixSSAVars object at 0x7fa0467fce80>
DEBUG 2022-02-14 16:38:02,196 on stmt: i = $phi70.1
DEBUG 2022-02-14 16:38:02,196 on stmt: $74load_method.3 = getattr(value=E_k, attr=sum)
DEBUG 2022-02-14 16:38:02,196 on stmt: $76call_method.4 = call $74load_method.3(func=$74load_method.3, args=[], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:02,196 on stmt: $const78.5 = const(int, 2)
DEBUG 2022-02-14 16:38:02,196 on stmt: $82binary_multiply.7 = $const78.5 * i
DEBUG 2022-02-14 16:38:02,196 on stmt: $84binary_true_divide.8 = $76call_method.4 / $82binary_multiply.7
DEBUG 2022-02-14 16:38:02,196 on stmt: $90binary_matrix_multiply.11 = XD_S <built-in function matmul> D_S
DEBUG 2022-02-14 16:38:02,196 find_def var='XD_S' stmt=$90binary_matrix_multiply.11 = XD_S <built-in function matmul> D_S
DEBUG 2022-02-14 16:38:02,196 find_def_from_top label 70
DEBUG 2022-02-14 16:38:02,196 idom 68 from label 70
DEBUG 2022-02-14 16:38:02,196 find_def_from_bottom label 68
DEBUG 2022-02-14 16:38:02,196 find_def_from_top label 68
DEBUG 2022-02-14 16:38:02,197 insert phi node XD_S.2 = phi(incoming_values=[], incoming_blocks=[]) at 68
DEBUG 2022-02-14 16:38:02,197 find_def_from_bottom label 0
DEBUG 2022-02-14 16:38:02,197 incoming_def XD_S = arg(2, name=XD_S)
DEBUG 2022-02-14 16:38:02,197 find_def_from_bottom label 284
DEBUG 2022-02-14 16:38:02,197 find_def_from_top label 284
DEBUG 2022-02-14 16:38:02,197 idom 182 from label 284
DEBUG 2022-02-14 16:38:02,197 find_def_from_bottom label 182
DEBUG 2022-02-14 16:38:02,197 find_def_from_top label 182
DEBUG 2022-02-14 16:38:02,197 idom 70 from label 182
DEBUG 2022-02-14 16:38:02,197 find_def_from_bottom label 70
DEBUG 2022-02-14 16:38:02,197 incoming_def XD_S.1 = $112binary_matrix_multiply.20
DEBUG 2022-02-14 16:38:02,197 replaced with: $90binary_matrix_multiply.11 = XD_S.2 <built-in function matmul> D_S
DEBUG 2022-02-14 16:38:02,197 on stmt: $const92.12 = const(int, 2)
DEBUG 2022-02-14 16:38:02,197 on stmt: $94binary_true_divide.13 = $90binary_matrix_multiply.11 / $const92.12
DEBUG 2022-02-14 16:38:02,197 on stmt: factor = $84binary_true_divide.8 + $94binary_true_divide.13
DEBUG 2022-02-14 16:38:02,197 on stmt: $104inplace_multiply.17 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=E_k, rhs=E, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:38:02,197 on stmt: E_k = $104inplace_multiply.17
DEBUG 2022-02-14 16:38:02,197 on stmt: $112binary_matrix_multiply.20 = XD_S <built-in function matmul> AX_S
DEBUG 2022-02-14 16:38:02,197 find_def var='XD_S' stmt=$112binary_matrix_multiply.20 = XD_S <built-in function matmul> AX_S
DEBUG 2022-02-14 16:38:02,197 find_def_from_top label 70
DEBUG 2022-02-14 16:38:02,197 idom 68 from label 70
DEBUG 2022-02-14 16:38:02,198 find_def_from_bottom label 68
DEBUG 2022-02-14 16:38:02,198 replaced with: $112binary_matrix_multiply.20 = XD_S.2 <built-in function matmul> AX_S
DEBUG 2022-02-14 16:38:02,198 on stmt: XD_S.1 = $112binary_matrix_multiply.20
DEBUG 2022-02-14 16:38:02,198 on stmt: powfactor = const(int, 1)
DEBUG 2022-02-14 16:38:02,198 on stmt: $const120.22 = const(int, 1)
DEBUG 2022-02-14 16:38:02,198 on stmt: $124binary_subtract.24 = $const120.22 - count.2
DEBUG 2022-02-14 16:38:02,198 on stmt: count.1 = $124binary_subtract.24
DEBUG 2022-02-14 16:38:02,198 on stmt: $const130.26 = const(int, 1)
DEBUG 2022-02-14 16:38:02,198 on stmt: $134binary_subtract.28 = $const130.26 - count.1
DEBUG 2022-02-14 16:38:02,198 on stmt: $const136.29 = const(NoneType, None)
DEBUG 2022-02-14 16:38:02,198 on stmt: $const138.30 = const(NoneType, None)
DEBUG 2022-02-14 16:38:02,198 on stmt: $140build_slice.31 = global(slice: <class 'slice'>)
DEBUG 2022-02-14 16:38:02,198 on stmt: $140build_slice.32 = call $140build_slice.31($const136.29, $const138.30, func=$140build_slice.31, args=(Var($const136.29, _loop_hafnian_subroutines.py:149), Var($const138.30, _loop_hafnian_subroutines.py:149)), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:02,198 on stmt: $142build_tuple.33 = build_tuple(items=[Var($134binary_subtract.28, _loop_hafnian_subroutines.py:149), Var($140build_slice.32, _loop_hafnian_subroutines.py:149)])
DEBUG 2022-02-14 16:38:02,198 on stmt: $144binary_subscr.34 = getitem(value=comb, index=$142build_tuple.33, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:02,198 on stmt: $const150.37 = const(NoneType, None)
DEBUG 2022-02-14 16:38:02,198 on stmt: $const152.38 = const(NoneType, None)
DEBUG 2022-02-14 16:38:02,198 on stmt: $154build_slice.39 = global(slice: <class 'slice'>)
DEBUG 2022-02-14 16:38:02,198 on stmt: $154build_slice.40 = call $154build_slice.39($const150.37, $const152.38, func=$154build_slice.39, args=(Var($const150.37, _loop_hafnian_subroutines.py:149), Var($const152.38, _loop_hafnian_subroutines.py:149)), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:02,198 on stmt: $156build_tuple.41 = build_tuple(items=[Var(count.1, _loop_hafnian_subroutines.py:148), Var($154build_slice.40, _loop_hafnian_subroutines.py:149)])
DEBUG 2022-02-14 16:38:02,199 on stmt: comb[$156build_tuple.41] = $144binary_subscr.34
DEBUG 2022-02-14 16:38:02,199 on stmt: $160load_global.42 = global(range: <class 'range'>)
DEBUG 2022-02-14 16:38:02,199 on stmt: $const162.43 = const(int, 1)
DEBUG 2022-02-14 16:38:02,199 on stmt: $const166.45 = const(int, 2)
DEBUG 2022-02-14 16:38:02,199 on stmt: $170binary_multiply.47 = $const166.45 * i
DEBUG 2022-02-14 16:38:02,199 on stmt: $172binary_floor_divide.48 = n // $170binary_multiply.47
DEBUG 2022-02-14 16:38:02,199 on stmt: $const174.49 = const(int, 1)
DEBUG 2022-02-14 16:38:02,199 on stmt: $176binary_add.50 = $172binary_floor_divide.48 + $const174.49
DEBUG 2022-02-14 16:38:02,199 on stmt: $178call_function.51 = call $160load_global.42($const162.43, $176binary_add.50, func=$160load_global.42, args=[Var($const162.43, _loop_hafnian_subroutines.py:150), Var($176binary_add.50, _loop_hafnian_subroutines.py:150)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:02,199 on stmt: $180get_iter.52 = getiter(value=$178call_function.51)
DEBUG 2022-02-14 16:38:02,199 on stmt: $phi182.1 = $180get_iter.52
DEBUG 2022-02-14 16:38:02,199 on stmt: jump 182
DEBUG 2022-02-14 16:38:02,199 ==== SSA block rewrite pass on 182
DEBUG 2022-02-14 16:38:02,199 Running <numba.core.ssa._FixSSAVars object at 0x7fa0467fce80>
DEBUG 2022-02-14 16:38:02,199 on stmt: powfactor.2 = phi(incoming_values=[Var(powfactor.1, _loop_hafnian_subroutines.py:151), Var(powfactor, _loop_hafnian_subroutines.py:147)], incoming_blocks=[282, 70])
DEBUG 2022-02-14 16:38:02,199 on stmt: $182for_iter.2 = iternext(value=$phi182.1)
DEBUG 2022-02-14 16:38:02,199 on stmt: $182for_iter.3 = pair_first(value=$182for_iter.2)
DEBUG 2022-02-14 16:38:02,199 on stmt: $182for_iter.4 = pair_second(value=$182for_iter.2)
DEBUG 2022-02-14 16:38:02,200 on stmt: $phi184.2 = $182for_iter.3
DEBUG 2022-02-14 16:38:02,200 on stmt: branch $182for_iter.4, 184, 284
DEBUG 2022-02-14 16:38:02,200 ==== SSA block rewrite pass on 184
DEBUG 2022-02-14 16:38:02,200 Running <numba.core.ssa._FixSSAVars object at 0x7fa0467fce80>
DEBUG 2022-02-14 16:38:02,200 on stmt: j = $phi184.2
DEBUG 2022-02-14 16:38:02,200 on stmt: $192binary_true_divide.6 = factor / j
DEBUG 2022-02-14 16:38:02,200 on stmt: $194inplace_multiply.7 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=powfactor.2, rhs=$192binary_true_divide.6, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:38:02,200 on stmt: powfactor.1 = $194inplace_multiply.7
DEBUG 2022-02-14 16:38:02,200 on stmt: $198load_global.8 = global(range: <class 'range'>)
DEBUG 2022-02-14 16:38:02,200 on stmt: $204binary_multiply.11 = i * j
DEBUG 2022-02-14 16:38:02,200 on stmt: $const206.12 = const(int, 1)
DEBUG 2022-02-14 16:38:02,200 on stmt: $208binary_add.13 = $204binary_multiply.11 + $const206.12
DEBUG 2022-02-14 16:38:02,200 on stmt: $const212.15 = const(int, 2)
DEBUG 2022-02-14 16:38:02,200 on stmt: $214binary_floor_divide.16 = n // $const212.15
DEBUG 2022-02-14 16:38:02,200 on stmt: $const216.17 = const(int, 2)
DEBUG 2022-02-14 16:38:02,200 on stmt: $218binary_add.18 = $214binary_floor_divide.16 + $const216.17
DEBUG 2022-02-14 16:38:02,200 on stmt: $220call_function.19 = call $198load_global.8($208binary_add.13, $218binary_add.18, func=$198load_global.8, args=[Var($208binary_add.13, _loop_hafnian_subroutines.py:152), Var($218binary_add.18, _loop_hafnian_subroutines.py:152)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:02,200 on stmt: $222get_iter.20 = getiter(value=$220call_function.19)
DEBUG 2022-02-14 16:38:02,200 on stmt: $phi224.2 = $222get_iter.20
DEBUG 2022-02-14 16:38:02,200 on stmt: jump 224
DEBUG 2022-02-14 16:38:02,201 ==== SSA block rewrite pass on 224
DEBUG 2022-02-14 16:38:02,201 Running <numba.core.ssa._FixSSAVars object at 0x7fa0467fce80>
DEBUG 2022-02-14 16:38:02,201 on stmt: $224for_iter.3 = iternext(value=$phi224.2)
DEBUG 2022-02-14 16:38:02,201 on stmt: $224for_iter.4 = pair_first(value=$224for_iter.3)
DEBUG 2022-02-14 16:38:02,201 on stmt: $224for_iter.5 = pair_second(value=$224for_iter.3)
DEBUG 2022-02-14 16:38:02,201 on stmt: $phi226.3 = $224for_iter.4
DEBUG 2022-02-14 16:38:02,201 on stmt: branch $224for_iter.5, 226, 282
DEBUG 2022-02-14 16:38:02,201 ==== SSA block rewrite pass on 226
DEBUG 2022-02-14 16:38:02,201 Running <numba.core.ssa._FixSSAVars object at 0x7fa0467fce80>
DEBUG 2022-02-14 16:38:02,201 on stmt: k = $phi226.3
DEBUG 2022-02-14 16:38:02,201 on stmt: $const234.7 = const(int, 1)
DEBUG 2022-02-14 16:38:02,201 on stmt: $236binary_subtract.8 = k - $const234.7
DEBUG 2022-02-14 16:38:02,201 on stmt: $238build_tuple.9 = build_tuple(items=[Var(count.1, _loop_hafnian_subroutines.py:148), Var($236binary_subtract.8, _loop_hafnian_subroutines.py:153)])
DEBUG 2022-02-14 16:38:02,201 on stmt: $242binary_subscr.12 = getitem(value=comb, index=$238build_tuple.9, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:02,201 on stmt: $const246.14 = const(int, 1)
DEBUG 2022-02-14 16:38:02,201 on stmt: $250binary_subtract.16 = $const246.14 - count.1
DEBUG 2022-02-14 16:38:02,201 on stmt: $258binary_multiply.20 = i * j
DEBUG 2022-02-14 16:38:02,201 on stmt: $260binary_subtract.21 = k - $258binary_multiply.20
DEBUG 2022-02-14 16:38:02,201 on stmt: $const262.22 = const(int, 1)
DEBUG 2022-02-14 16:38:02,201 on stmt: $264binary_subtract.23 = $260binary_subtract.21 - $const262.22
DEBUG 2022-02-14 16:38:02,201 on stmt: $266build_tuple.24 = build_tuple(items=[Var($250binary_subtract.16, _loop_hafnian_subroutines.py:153), Var($264binary_subtract.23, _loop_hafnian_subroutines.py:153)])
DEBUG 2022-02-14 16:38:02,202 on stmt: $268binary_subscr.25 = getitem(value=comb, index=$266build_tuple.24, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:02,202 on stmt: $272binary_multiply.27 = $268binary_subscr.25 * powfactor.1
DEBUG 2022-02-14 16:38:02,202 on stmt: $274inplace_add.28 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$242binary_subscr.12, rhs=$272binary_multiply.27, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:38:02,202 on stmt: comb[$238build_tuple.9] = $274inplace_add.28
DEBUG 2022-02-14 16:38:02,202 on stmt: jump 224
DEBUG 2022-02-14 16:38:02,202 ==== SSA block rewrite pass on 282
DEBUG 2022-02-14 16:38:02,202 Running <numba.core.ssa._FixSSAVars object at 0x7fa0467fce80>
DEBUG 2022-02-14 16:38:02,202 on stmt: jump 182
DEBUG 2022-02-14 16:38:02,202 ==== SSA block rewrite pass on 284
DEBUG 2022-02-14 16:38:02,202 Running <numba.core.ssa._FixSSAVars object at 0x7fa0467fce80>
DEBUG 2022-02-14 16:38:02,202 on stmt: jump 68
DEBUG 2022-02-14 16:38:02,202 ==== SSA block rewrite pass on 286
DEBUG 2022-02-14 16:38:02,202 Running <numba.core.ssa._FixSSAVars object at 0x7fa0467fce80>
DEBUG 2022-02-14 16:38:02,202 on stmt: $const290.2 = const(NoneType, None)
DEBUG 2022-02-14 16:38:02,202 on stmt: $const292.3 = const(NoneType, None)
DEBUG 2022-02-14 16:38:02,202 on stmt: $294build_slice.4 = global(slice: <class 'slice'>)
DEBUG 2022-02-14 16:38:02,202 on stmt: $294build_slice.5 = call $294build_slice.4($const290.2, $const292.3, func=$294build_slice.4, args=(Var($const290.2, _loop_hafnian_subroutines.py:154), Var($const292.3, _loop_hafnian_subroutines.py:154)), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:02,202 on stmt: $296build_tuple.6 = build_tuple(items=[Var(count.2, _loop_hafnian_subroutines.py:143), Var($294build_slice.5, _loop_hafnian_subroutines.py:154)])
DEBUG 2022-02-14 16:38:02,202 on stmt: $298binary_subscr.7 = getitem(value=comb, index=$296build_tuple.6, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:02,202 on stmt: $300return_value.8 = cast(value=$298binary_subscr.7)
DEBUG 2022-02-14 16:38:02,202 on stmt: return $300return_value.8
DEBUG 2022-02-14 16:38:02,203 Fix SSA violator on var E_k
DEBUG 2022-02-14 16:38:02,203 ==== SSA block rewrite pass on 0
DEBUG 2022-02-14 16:38:02,203 Running <numba.core.ssa._FreshVarHandler object at 0x7fa046785ee0>
DEBUG 2022-02-14 16:38:02,203 on stmt: E = arg(0, name=E)
DEBUG 2022-02-14 16:38:02,203 on stmt: AX_S = arg(1, name=AX_S)
DEBUG 2022-02-14 16:38:02,203 on stmt: XD_S = arg(2, name=XD_S)
DEBUG 2022-02-14 16:38:02,203 on stmt: D_S = arg(3, name=D_S)
DEBUG 2022-02-14 16:38:02,203 on stmt: n = arg(4, name=n)
DEBUG 2022-02-14 16:38:02,203 on stmt: $4load_method.1 = getattr(value=E, attr=copy)
DEBUG 2022-02-14 16:38:02,203 on stmt: E_k = call $4load_method.1(func=$4load_method.1, args=[], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:02,203 first assign: E_k
DEBUG 2022-02-14 16:38:02,203 replaced with: E_k = call $4load_method.1(func=$4load_method.1, args=[], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:02,203 on stmt: count = const(int, 0)
DEBUG 2022-02-14 16:38:02,203 on stmt: $14load_global.4 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:38:02,203 on stmt: $16load_attr.5 = getattr(value=$14load_global.4, attr=zeros)
DEBUG 2022-02-14 16:38:02,203 on stmt: $const18.6 = const(int, 2)
DEBUG 2022-02-14 16:38:02,203 on stmt: $const22.8 = const(int, 2)
DEBUG 2022-02-14 16:38:02,203 on stmt: $24binary_floor_divide.9 = n // $const22.8
DEBUG 2022-02-14 16:38:02,203 on stmt: $const26.10 = const(int, 1)
DEBUG 2022-02-14 16:38:02,203 on stmt: $28binary_add.11 = $24binary_floor_divide.9 + $const26.10
DEBUG 2022-02-14 16:38:02,204 on stmt: $30build_tuple.12 = build_tuple(items=[Var($const18.6, _loop_hafnian_subroutines.py:141), Var($28binary_add.11, _loop_hafnian_subroutines.py:141)])
DEBUG 2022-02-14 16:38:02,204 on stmt: $32load_global.13 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:38:02,204 on stmt: $34load_attr.14 = getattr(value=$32load_global.13, attr=complex128)
DEBUG 2022-02-14 16:38:02,204 on stmt: comb = call $16load_attr.5($30build_tuple.12, func=$16load_attr.5, args=[Var($30build_tuple.12, _loop_hafnian_subroutines.py:141)], kws=[('dtype', Var($34load_attr.14, _loop_hafnian_subroutines.py:141))], vararg=None, target=None)
DEBUG 2022-02-14 16:38:02,204 on stmt: $const42.17 = const(int, 1)
DEBUG 2022-02-14 16:38:02,204 on stmt: $const_0 = const(int, 0)
DEBUG 2022-02-14 16:38:02,204 on stmt: $const_0.1 = const(int, 0)
DEBUG 2022-02-14 16:38:02,204 on stmt: $const46.19 = build_tuple(items=[Var($const_0, _loop_hafnian_subroutines.py:142), Var($const_0.1, _loop_hafnian_subroutines.py:142)])
DEBUG 2022-02-14 16:38:02,204 on stmt: comb[(0, 0)] = $const42.17
DEBUG 2022-02-14 16:38:02,204 on stmt: $50load_global.20 = global(range: <class 'range'>)
DEBUG 2022-02-14 16:38:02,204 on stmt: $const52.21 = const(int, 1)
DEBUG 2022-02-14 16:38:02,204 on stmt: $const56.23 = const(int, 2)
DEBUG 2022-02-14 16:38:02,204 on stmt: $58binary_floor_divide.24 = n // $const56.23
DEBUG 2022-02-14 16:38:02,204 on stmt: $const60.25 = const(int, 1)
DEBUG 2022-02-14 16:38:02,204 on stmt: $62binary_add.26 = $58binary_floor_divide.24 + $const60.25
DEBUG 2022-02-14 16:38:02,204 on stmt: $64call_function.27 = call $50load_global.20($const52.21, $62binary_add.26, func=$50load_global.20, args=[Var($const52.21, _loop_hafnian_subroutines.py:143), Var($62binary_add.26, _loop_hafnian_subroutines.py:143)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:02,204 on stmt: $66get_iter.28 = getiter(value=$64call_function.27)
DEBUG 2022-02-14 16:38:02,204 on stmt: $phi68.0 = $66get_iter.28
DEBUG 2022-02-14 16:38:02,205 on stmt: jump 68
DEBUG 2022-02-14 16:38:02,205 ==== SSA block rewrite pass on 68
DEBUG 2022-02-14 16:38:02,205 Running <numba.core.ssa._FreshVarHandler object at 0x7fa046785ee0>
DEBUG 2022-02-14 16:38:02,205 on stmt: XD_S.2 = phi(incoming_values=[Var(XD_S, _loop_hafnian_subroutines.py:137), Var(XD_S.1, _loop_hafnian_subroutines.py:146)], incoming_blocks=[0, 284])
DEBUG 2022-02-14 16:38:02,205 on stmt: count.2 = phi(incoming_values=[Var(count, _loop_hafnian_subroutines.py:140), Var(count.1, _loop_hafnian_subroutines.py:148)], incoming_blocks=[0, 284])
DEBUG 2022-02-14 16:38:02,205 on stmt: $68for_iter.1 = iternext(value=$phi68.0)
DEBUG 2022-02-14 16:38:02,205 on stmt: $68for_iter.2 = pair_first(value=$68for_iter.1)
DEBUG 2022-02-14 16:38:02,205 on stmt: $68for_iter.3 = pair_second(value=$68for_iter.1)
DEBUG 2022-02-14 16:38:02,205 on stmt: $phi70.1 = $68for_iter.2
DEBUG 2022-02-14 16:38:02,205 on stmt: branch $68for_iter.3, 70, 286
DEBUG 2022-02-14 16:38:02,205 ==== SSA block rewrite pass on 70
DEBUG 2022-02-14 16:38:02,205 Running <numba.core.ssa._FreshVarHandler object at 0x7fa046785ee0>
DEBUG 2022-02-14 16:38:02,205 on stmt: i = $phi70.1
DEBUG 2022-02-14 16:38:02,205 on stmt: $74load_method.3 = getattr(value=E_k, attr=sum)
DEBUG 2022-02-14 16:38:02,205 on stmt: $76call_method.4 = call $74load_method.3(func=$74load_method.3, args=[], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:02,205 on stmt: $const78.5 = const(int, 2)
DEBUG 2022-02-14 16:38:02,205 on stmt: $82binary_multiply.7 = $const78.5 * i
DEBUG 2022-02-14 16:38:02,205 on stmt: $84binary_true_divide.8 = $76call_method.4 / $82binary_multiply.7
DEBUG 2022-02-14 16:38:02,205 on stmt: $90binary_matrix_multiply.11 = XD_S.2 <built-in function matmul> D_S
DEBUG 2022-02-14 16:38:02,205 on stmt: $const92.12 = const(int, 2)
DEBUG 2022-02-14 16:38:02,205 on stmt: $94binary_true_divide.13 = $90binary_matrix_multiply.11 / $const92.12
DEBUG 2022-02-14 16:38:02,206 on stmt: factor = $84binary_true_divide.8 + $94binary_true_divide.13
DEBUG 2022-02-14 16:38:02,206 on stmt: $104inplace_multiply.17 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=E_k, rhs=E, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:38:02,206 on stmt: E_k = $104inplace_multiply.17
DEBUG 2022-02-14 16:38:02,206 replaced with: E_k.1 = $104inplace_multiply.17
DEBUG 2022-02-14 16:38:02,206 on stmt: $112binary_matrix_multiply.20 = XD_S.2 <built-in function matmul> AX_S
DEBUG 2022-02-14 16:38:02,206 on stmt: XD_S.1 = $112binary_matrix_multiply.20
DEBUG 2022-02-14 16:38:02,206 on stmt: powfactor = const(int, 1)
DEBUG 2022-02-14 16:38:02,206 on stmt: $const120.22 = const(int, 1)
DEBUG 2022-02-14 16:38:02,206 on stmt: $124binary_subtract.24 = $const120.22 - count.2
DEBUG 2022-02-14 16:38:02,206 on stmt: count.1 = $124binary_subtract.24
DEBUG 2022-02-14 16:38:02,206 on stmt: $const130.26 = const(int, 1)
DEBUG 2022-02-14 16:38:02,206 on stmt: $134binary_subtract.28 = $const130.26 - count.1
DEBUG 2022-02-14 16:38:02,206 on stmt: $const136.29 = const(NoneType, None)
DEBUG 2022-02-14 16:38:02,206 on stmt: $const138.30 = const(NoneType, None)
DEBUG 2022-02-14 16:38:02,206 on stmt: $140build_slice.31 = global(slice: <class 'slice'>)
DEBUG 2022-02-14 16:38:02,206 on stmt: $140build_slice.32 = call $140build_slice.31($const136.29, $const138.30, func=$140build_slice.31, args=(Var($const136.29, _loop_hafnian_subroutines.py:149), Var($const138.30, _loop_hafnian_subroutines.py:149)), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:02,206 on stmt: $142build_tuple.33 = build_tuple(items=[Var($134binary_subtract.28, _loop_hafnian_subroutines.py:149), Var($140build_slice.32, _loop_hafnian_subroutines.py:149)])
DEBUG 2022-02-14 16:38:02,206 on stmt: $144binary_subscr.34 = getitem(value=comb, index=$142build_tuple.33, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:02,207 on stmt: $const150.37 = const(NoneType, None)
DEBUG 2022-02-14 16:38:02,207 on stmt: $const152.38 = const(NoneType, None)
DEBUG 2022-02-14 16:38:02,207 on stmt: $154build_slice.39 = global(slice: <class 'slice'>)
DEBUG 2022-02-14 16:38:02,207 on stmt: $154build_slice.40 = call $154build_slice.39($const150.37, $const152.38, func=$154build_slice.39, args=(Var($const150.37, _loop_hafnian_subroutines.py:149), Var($const152.38, _loop_hafnian_subroutines.py:149)), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:02,207 on stmt: $156build_tuple.41 = build_tuple(items=[Var(count.1, _loop_hafnian_subroutines.py:148), Var($154build_slice.40, _loop_hafnian_subroutines.py:149)])
DEBUG 2022-02-14 16:38:02,207 on stmt: comb[$156build_tuple.41] = $144binary_subscr.34
DEBUG 2022-02-14 16:38:02,207 on stmt: $160load_global.42 = global(range: <class 'range'>)
DEBUG 2022-02-14 16:38:02,207 on stmt: $const162.43 = const(int, 1)
DEBUG 2022-02-14 16:38:02,207 on stmt: $const166.45 = const(int, 2)
DEBUG 2022-02-14 16:38:02,207 on stmt: $170binary_multiply.47 = $const166.45 * i
DEBUG 2022-02-14 16:38:02,207 on stmt: $172binary_floor_divide.48 = n // $170binary_multiply.47
DEBUG 2022-02-14 16:38:02,207 on stmt: $const174.49 = const(int, 1)
DEBUG 2022-02-14 16:38:02,207 on stmt: $176binary_add.50 = $172binary_floor_divide.48 + $const174.49
DEBUG 2022-02-14 16:38:02,207 on stmt: $178call_function.51 = call $160load_global.42($const162.43, $176binary_add.50, func=$160load_global.42, args=[Var($const162.43, _loop_hafnian_subroutines.py:150), Var($176binary_add.50, _loop_hafnian_subroutines.py:150)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:02,207 on stmt: $180get_iter.52 = getiter(value=$178call_function.51)
DEBUG 2022-02-14 16:38:02,207 on stmt: $phi182.1 = $180get_iter.52
DEBUG 2022-02-14 16:38:02,207 on stmt: jump 182
DEBUG 2022-02-14 16:38:02,207 ==== SSA block rewrite pass on 182
DEBUG 2022-02-14 16:38:02,207 Running <numba.core.ssa._FreshVarHandler object at 0x7fa046785ee0>
DEBUG 2022-02-14 16:38:02,208 on stmt: powfactor.2 = phi(incoming_values=[Var(powfactor.1, _loop_hafnian_subroutines.py:151), Var(powfactor, _loop_hafnian_subroutines.py:147)], incoming_blocks=[282, 70])
DEBUG 2022-02-14 16:38:02,208 on stmt: $182for_iter.2 = iternext(value=$phi182.1)
DEBUG 2022-02-14 16:38:02,208 on stmt: $182for_iter.3 = pair_first(value=$182for_iter.2)
DEBUG 2022-02-14 16:38:02,208 on stmt: $182for_iter.4 = pair_second(value=$182for_iter.2)
DEBUG 2022-02-14 16:38:02,208 on stmt: $phi184.2 = $182for_iter.3
DEBUG 2022-02-14 16:38:02,208 on stmt: branch $182for_iter.4, 184, 284
DEBUG 2022-02-14 16:38:02,208 ==== SSA block rewrite pass on 184
DEBUG 2022-02-14 16:38:02,208 Running <numba.core.ssa._FreshVarHandler object at 0x7fa046785ee0>
DEBUG 2022-02-14 16:38:02,208 on stmt: j = $phi184.2
DEBUG 2022-02-14 16:38:02,208 on stmt: $192binary_true_divide.6 = factor / j
DEBUG 2022-02-14 16:38:02,208 on stmt: $194inplace_multiply.7 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=powfactor.2, rhs=$192binary_true_divide.6, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:38:02,208 on stmt: powfactor.1 = $194inplace_multiply.7
DEBUG 2022-02-14 16:38:02,208 on stmt: $198load_global.8 = global(range: <class 'range'>)
DEBUG 2022-02-14 16:38:02,208 on stmt: $204binary_multiply.11 = i * j
DEBUG 2022-02-14 16:38:02,208 on stmt: $const206.12 = const(int, 1)
DEBUG 2022-02-14 16:38:02,208 on stmt: $208binary_add.13 = $204binary_multiply.11 + $const206.12
DEBUG 2022-02-14 16:38:02,208 on stmt: $const212.15 = const(int, 2)
DEBUG 2022-02-14 16:38:02,208 on stmt: $214binary_floor_divide.16 = n // $const212.15
DEBUG 2022-02-14 16:38:02,209 on stmt: $const216.17 = const(int, 2)
DEBUG 2022-02-14 16:38:02,209 on stmt: $218binary_add.18 = $214binary_floor_divide.16 + $const216.17
DEBUG 2022-02-14 16:38:02,209 on stmt: $220call_function.19 = call $198load_global.8($208binary_add.13, $218binary_add.18, func=$198load_global.8, args=[Var($208binary_add.13, _loop_hafnian_subroutines.py:152), Var($218binary_add.18, _loop_hafnian_subroutines.py:152)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:02,209 on stmt: $222get_iter.20 = getiter(value=$220call_function.19)
DEBUG 2022-02-14 16:38:02,209 on stmt: $phi224.2 = $222get_iter.20
DEBUG 2022-02-14 16:38:02,209 on stmt: jump 224
DEBUG 2022-02-14 16:38:02,209 ==== SSA block rewrite pass on 224
DEBUG 2022-02-14 16:38:02,209 Running <numba.core.ssa._FreshVarHandler object at 0x7fa046785ee0>
DEBUG 2022-02-14 16:38:02,209 on stmt: $224for_iter.3 = iternext(value=$phi224.2)
DEBUG 2022-02-14 16:38:02,209 on stmt: $224for_iter.4 = pair_first(value=$224for_iter.3)
DEBUG 2022-02-14 16:38:02,209 on stmt: $224for_iter.5 = pair_second(value=$224for_iter.3)
DEBUG 2022-02-14 16:38:02,209 on stmt: $phi226.3 = $224for_iter.4
DEBUG 2022-02-14 16:38:02,209 on stmt: branch $224for_iter.5, 226, 282
DEBUG 2022-02-14 16:38:02,209 ==== SSA block rewrite pass on 226
DEBUG 2022-02-14 16:38:02,209 Running <numba.core.ssa._FreshVarHandler object at 0x7fa046785ee0>
DEBUG 2022-02-14 16:38:02,209 on stmt: k = $phi226.3
DEBUG 2022-02-14 16:38:02,209 on stmt: $const234.7 = const(int, 1)
DEBUG 2022-02-14 16:38:02,209 on stmt: $236binary_subtract.8 = k - $const234.7
DEBUG 2022-02-14 16:38:02,209 on stmt: $238build_tuple.9 = build_tuple(items=[Var(count.1, _loop_hafnian_subroutines.py:148), Var($236binary_subtract.8, _loop_hafnian_subroutines.py:153)])
DEBUG 2022-02-14 16:38:02,209 on stmt: $242binary_subscr.12 = getitem(value=comb, index=$238build_tuple.9, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:02,209 on stmt: $const246.14 = const(int, 1)
DEBUG 2022-02-14 16:38:02,210 on stmt: $250binary_subtract.16 = $const246.14 - count.1
DEBUG 2022-02-14 16:38:02,210 on stmt: $258binary_multiply.20 = i * j
DEBUG 2022-02-14 16:38:02,210 on stmt: $260binary_subtract.21 = k - $258binary_multiply.20
DEBUG 2022-02-14 16:38:02,210 on stmt: $const262.22 = const(int, 1)
DEBUG 2022-02-14 16:38:02,210 on stmt: $264binary_subtract.23 = $260binary_subtract.21 - $const262.22
DEBUG 2022-02-14 16:38:02,210 on stmt: $266build_tuple.24 = build_tuple(items=[Var($250binary_subtract.16, _loop_hafnian_subroutines.py:153), Var($264binary_subtract.23, _loop_hafnian_subroutines.py:153)])
DEBUG 2022-02-14 16:38:02,210 on stmt: $268binary_subscr.25 = getitem(value=comb, index=$266build_tuple.24, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:02,210 on stmt: $272binary_multiply.27 = $268binary_subscr.25 * powfactor.1
DEBUG 2022-02-14 16:38:02,210 on stmt: $274inplace_add.28 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$242binary_subscr.12, rhs=$272binary_multiply.27, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:38:02,210 on stmt: comb[$238build_tuple.9] = $274inplace_add.28
DEBUG 2022-02-14 16:38:02,210 on stmt: jump 224
DEBUG 2022-02-14 16:38:02,210 ==== SSA block rewrite pass on 282
DEBUG 2022-02-14 16:38:02,210 Running <numba.core.ssa._FreshVarHandler object at 0x7fa046785ee0>
DEBUG 2022-02-14 16:38:02,210 on stmt: jump 182
DEBUG 2022-02-14 16:38:02,210 ==== SSA block rewrite pass on 284
DEBUG 2022-02-14 16:38:02,210 Running <numba.core.ssa._FreshVarHandler object at 0x7fa046785ee0>
DEBUG 2022-02-14 16:38:02,210 on stmt: jump 68
DEBUG 2022-02-14 16:38:02,210 ==== SSA block rewrite pass on 286
DEBUG 2022-02-14 16:38:02,210 Running <numba.core.ssa._FreshVarHandler object at 0x7fa046785ee0>
DEBUG 2022-02-14 16:38:02,210 on stmt: $const290.2 = const(NoneType, None)
DEBUG 2022-02-14 16:38:02,211 on stmt: $const292.3 = const(NoneType, None)
DEBUG 2022-02-14 16:38:02,211 on stmt: $294build_slice.4 = global(slice: <class 'slice'>)
DEBUG 2022-02-14 16:38:02,211 on stmt: $294build_slice.5 = call $294build_slice.4($const290.2, $const292.3, func=$294build_slice.4, args=(Var($const290.2, _loop_hafnian_subroutines.py:154), Var($const292.3, _loop_hafnian_subroutines.py:154)), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:02,211 on stmt: $296build_tuple.6 = build_tuple(items=[Var(count.2, _loop_hafnian_subroutines.py:143), Var($294build_slice.5, _loop_hafnian_subroutines.py:154)])
DEBUG 2022-02-14 16:38:02,211 on stmt: $298binary_subscr.7 = getitem(value=comb, index=$296build_tuple.6, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:02,211 on stmt: $300return_value.8 = cast(value=$298binary_subscr.7)
DEBUG 2022-02-14 16:38:02,211 on stmt: return $300return_value.8
DEBUG 2022-02-14 16:38:02,211 Replaced assignments: defaultdict(<class 'list'>,
            {0: [<numba.core.ir.Assign object at 0x7fa046785d60>],
             70: [<numba.core.ir.Assign object at 0x7fa046785670>]})
DEBUG 2022-02-14 16:38:02,211 ==== SSA block rewrite pass on 0
DEBUG 2022-02-14 16:38:02,211 Running <numba.core.ssa._FixSSAVars object at 0x7fa04711c6a0>
DEBUG 2022-02-14 16:38:02,211 on stmt: E = arg(0, name=E)
DEBUG 2022-02-14 16:38:02,211 on stmt: AX_S = arg(1, name=AX_S)
DEBUG 2022-02-14 16:38:02,211 on stmt: XD_S = arg(2, name=XD_S)
DEBUG 2022-02-14 16:38:02,211 on stmt: D_S = arg(3, name=D_S)
DEBUG 2022-02-14 16:38:02,211 on stmt: n = arg(4, name=n)
DEBUG 2022-02-14 16:38:02,211 on stmt: $4load_method.1 = getattr(value=E, attr=copy)
DEBUG 2022-02-14 16:38:02,211 on stmt: E_k = call $4load_method.1(func=$4load_method.1, args=[], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:02,211 on stmt: count = const(int, 0)
DEBUG 2022-02-14 16:38:02,211 on stmt: $14load_global.4 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:38:02,212 on stmt: $16load_attr.5 = getattr(value=$14load_global.4, attr=zeros)
DEBUG 2022-02-14 16:38:02,212 on stmt: $const18.6 = const(int, 2)
DEBUG 2022-02-14 16:38:02,212 on stmt: $const22.8 = const(int, 2)
DEBUG 2022-02-14 16:38:02,212 on stmt: $24binary_floor_divide.9 = n // $const22.8
DEBUG 2022-02-14 16:38:02,212 on stmt: $const26.10 = const(int, 1)
DEBUG 2022-02-14 16:38:02,212 on stmt: $28binary_add.11 = $24binary_floor_divide.9 + $const26.10
DEBUG 2022-02-14 16:38:02,212 on stmt: $30build_tuple.12 = build_tuple(items=[Var($const18.6, _loop_hafnian_subroutines.py:141), Var($28binary_add.11, _loop_hafnian_subroutines.py:141)])
DEBUG 2022-02-14 16:38:02,212 on stmt: $32load_global.13 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:38:02,212 on stmt: $34load_attr.14 = getattr(value=$32load_global.13, attr=complex128)
DEBUG 2022-02-14 16:38:02,212 on stmt: comb = call $16load_attr.5($30build_tuple.12, func=$16load_attr.5, args=[Var($30build_tuple.12, _loop_hafnian_subroutines.py:141)], kws=[('dtype', Var($34load_attr.14, _loop_hafnian_subroutines.py:141))], vararg=None, target=None)
DEBUG 2022-02-14 16:38:02,212 on stmt: $const42.17 = const(int, 1)
DEBUG 2022-02-14 16:38:02,212 on stmt: $const_0 = const(int, 0)
DEBUG 2022-02-14 16:38:02,212 on stmt: $const_0.1 = const(int, 0)
DEBUG 2022-02-14 16:38:02,212 on stmt: $const46.19 = build_tuple(items=[Var($const_0, _loop_hafnian_subroutines.py:142), Var($const_0.1, _loop_hafnian_subroutines.py:142)])
DEBUG 2022-02-14 16:38:02,212 on stmt: comb[(0, 0)] = $const42.17
DEBUG 2022-02-14 16:38:02,212 on stmt: $50load_global.20 = global(range: <class 'range'>)
DEBUG 2022-02-14 16:38:02,212 on stmt: $const52.21 = const(int, 1)
DEBUG 2022-02-14 16:38:02,212 on stmt: $const56.23 = const(int, 2)
DEBUG 2022-02-14 16:38:02,212 on stmt: $58binary_floor_divide.24 = n // $const56.23
DEBUG 2022-02-14 16:38:02,213 on stmt: $const60.25 = const(int, 1)
DEBUG 2022-02-14 16:38:02,213 on stmt: $62binary_add.26 = $58binary_floor_divide.24 + $const60.25
DEBUG 2022-02-14 16:38:02,213 on stmt: $64call_function.27 = call $50load_global.20($const52.21, $62binary_add.26, func=$50load_global.20, args=[Var($const52.21, _loop_hafnian_subroutines.py:143), Var($62binary_add.26, _loop_hafnian_subroutines.py:143)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:02,213 on stmt: $66get_iter.28 = getiter(value=$64call_function.27)
DEBUG 2022-02-14 16:38:02,213 on stmt: $phi68.0 = $66get_iter.28
DEBUG 2022-02-14 16:38:02,213 on stmt: jump 68
DEBUG 2022-02-14 16:38:02,213 ==== SSA block rewrite pass on 68
DEBUG 2022-02-14 16:38:02,213 Running <numba.core.ssa._FixSSAVars object at 0x7fa04711c6a0>
DEBUG 2022-02-14 16:38:02,213 on stmt: XD_S.2 = phi(incoming_values=[Var(XD_S, _loop_hafnian_subroutines.py:137), Var(XD_S.1, _loop_hafnian_subroutines.py:146)], incoming_blocks=[0, 284])
DEBUG 2022-02-14 16:38:02,213 on stmt: count.2 = phi(incoming_values=[Var(count, _loop_hafnian_subroutines.py:140), Var(count.1, _loop_hafnian_subroutines.py:148)], incoming_blocks=[0, 284])
DEBUG 2022-02-14 16:38:02,213 on stmt: $68for_iter.1 = iternext(value=$phi68.0)
DEBUG 2022-02-14 16:38:02,213 on stmt: $68for_iter.2 = pair_first(value=$68for_iter.1)
DEBUG 2022-02-14 16:38:02,213 on stmt: $68for_iter.3 = pair_second(value=$68for_iter.1)
DEBUG 2022-02-14 16:38:02,213 on stmt: $phi70.1 = $68for_iter.2
DEBUG 2022-02-14 16:38:02,213 on stmt: branch $68for_iter.3, 70, 286
DEBUG 2022-02-14 16:38:02,213 ==== SSA block rewrite pass on 70
DEBUG 2022-02-14 16:38:02,213 Running <numba.core.ssa._FixSSAVars object at 0x7fa04711c6a0>
DEBUG 2022-02-14 16:38:02,213 on stmt: i = $phi70.1
DEBUG 2022-02-14 16:38:02,213 on stmt: $74load_method.3 = getattr(value=E_k, attr=sum)
DEBUG 2022-02-14 16:38:02,213 find_def var='E_k' stmt=$74load_method.3 = getattr(value=E_k, attr=sum)
DEBUG 2022-02-14 16:38:02,214 find_def_from_top label 70
DEBUG 2022-02-14 16:38:02,214 idom 68 from label 70
DEBUG 2022-02-14 16:38:02,214 find_def_from_bottom label 68
DEBUG 2022-02-14 16:38:02,214 find_def_from_top label 68
DEBUG 2022-02-14 16:38:02,214 insert phi node E_k.2 = phi(incoming_values=[], incoming_blocks=[]) at 68
DEBUG 2022-02-14 16:38:02,214 find_def_from_bottom label 0
DEBUG 2022-02-14 16:38:02,214 incoming_def E_k = call $4load_method.1(func=$4load_method.1, args=[], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:02,214 find_def_from_bottom label 284
DEBUG 2022-02-14 16:38:02,214 find_def_from_top label 284
DEBUG 2022-02-14 16:38:02,214 idom 182 from label 284
DEBUG 2022-02-14 16:38:02,214 find_def_from_bottom label 182
DEBUG 2022-02-14 16:38:02,214 find_def_from_top label 182
DEBUG 2022-02-14 16:38:02,214 idom 70 from label 182
DEBUG 2022-02-14 16:38:02,214 find_def_from_bottom label 70
DEBUG 2022-02-14 16:38:02,214 incoming_def E_k.1 = $104inplace_multiply.17
DEBUG 2022-02-14 16:38:02,214 replaced with: $74load_method.3 = getattr(value=E_k.2, attr=sum)
DEBUG 2022-02-14 16:38:02,214 on stmt: $76call_method.4 = call $74load_method.3(func=$74load_method.3, args=[], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:02,214 on stmt: $const78.5 = const(int, 2)
DEBUG 2022-02-14 16:38:02,214 on stmt: $82binary_multiply.7 = $const78.5 * i
DEBUG 2022-02-14 16:38:02,214 on stmt: $84binary_true_divide.8 = $76call_method.4 / $82binary_multiply.7
DEBUG 2022-02-14 16:38:02,215 on stmt: $90binary_matrix_multiply.11 = XD_S.2 <built-in function matmul> D_S
DEBUG 2022-02-14 16:38:02,215 on stmt: $const92.12 = const(int, 2)
DEBUG 2022-02-14 16:38:02,215 on stmt: $94binary_true_divide.13 = $90binary_matrix_multiply.11 / $const92.12
DEBUG 2022-02-14 16:38:02,215 on stmt: factor = $84binary_true_divide.8 + $94binary_true_divide.13
DEBUG 2022-02-14 16:38:02,215 on stmt: $104inplace_multiply.17 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=E_k, rhs=E, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:38:02,215 find_def var='E_k' stmt=$104inplace_multiply.17 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=E_k, rhs=E, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:38:02,215 find_def_from_top label 70
DEBUG 2022-02-14 16:38:02,215 idom 68 from label 70
DEBUG 2022-02-14 16:38:02,215 find_def_from_bottom label 68
DEBUG 2022-02-14 16:38:02,215 replaced with: $104inplace_multiply.17 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=E_k.2, rhs=E, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:38:02,215 on stmt: E_k.1 = $104inplace_multiply.17
DEBUG 2022-02-14 16:38:02,215 on stmt: $112binary_matrix_multiply.20 = XD_S.2 <built-in function matmul> AX_S
DEBUG 2022-02-14 16:38:02,215 on stmt: XD_S.1 = $112binary_matrix_multiply.20
DEBUG 2022-02-14 16:38:02,215 on stmt: powfactor = const(int, 1)
DEBUG 2022-02-14 16:38:02,215 on stmt: $const120.22 = const(int, 1)
DEBUG 2022-02-14 16:38:02,215 on stmt: $124binary_subtract.24 = $const120.22 - count.2
DEBUG 2022-02-14 16:38:02,215 on stmt: count.1 = $124binary_subtract.24
DEBUG 2022-02-14 16:38:02,215 on stmt: $const130.26 = const(int, 1)
DEBUG 2022-02-14 16:38:02,215 on stmt: $134binary_subtract.28 = $const130.26 - count.1
DEBUG 2022-02-14 16:38:02,215 on stmt: $const136.29 = const(NoneType, None)
DEBUG 2022-02-14 16:38:02,215 on stmt: $const138.30 = const(NoneType, None)
DEBUG 2022-02-14 16:38:02,216 on stmt: $140build_slice.31 = global(slice: <class 'slice'>)
DEBUG 2022-02-14 16:38:02,216 on stmt: $140build_slice.32 = call $140build_slice.31($const136.29, $const138.30, func=$140build_slice.31, args=(Var($const136.29, _loop_hafnian_subroutines.py:149), Var($const138.30, _loop_hafnian_subroutines.py:149)), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:02,216 on stmt: $142build_tuple.33 = build_tuple(items=[Var($134binary_subtract.28, _loop_hafnian_subroutines.py:149), Var($140build_slice.32, _loop_hafnian_subroutines.py:149)])
DEBUG 2022-02-14 16:38:02,216 on stmt: $144binary_subscr.34 = getitem(value=comb, index=$142build_tuple.33, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:02,216 on stmt: $const150.37 = const(NoneType, None)
DEBUG 2022-02-14 16:38:02,216 on stmt: $const152.38 = const(NoneType, None)
DEBUG 2022-02-14 16:38:02,216 on stmt: $154build_slice.39 = global(slice: <class 'slice'>)
DEBUG 2022-02-14 16:38:02,216 on stmt: $154build_slice.40 = call $154build_slice.39($const150.37, $const152.38, func=$154build_slice.39, args=(Var($const150.37, _loop_hafnian_subroutines.py:149), Var($const152.38, _loop_hafnian_subroutines.py:149)), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:02,216 on stmt: $156build_tuple.41 = build_tuple(items=[Var(count.1, _loop_hafnian_subroutines.py:148), Var($154build_slice.40, _loop_hafnian_subroutines.py:149)])
DEBUG 2022-02-14 16:38:02,216 on stmt: comb[$156build_tuple.41] = $144binary_subscr.34
DEBUG 2022-02-14 16:38:02,216 on stmt: $160load_global.42 = global(range: <class 'range'>)
DEBUG 2022-02-14 16:38:02,216 on stmt: $const162.43 = const(int, 1)
DEBUG 2022-02-14 16:38:02,216 on stmt: $const166.45 = const(int, 2)
DEBUG 2022-02-14 16:38:02,216 on stmt: $170binary_multiply.47 = $const166.45 * i
DEBUG 2022-02-14 16:38:02,216 on stmt: $172binary_floor_divide.48 = n // $170binary_multiply.47
DEBUG 2022-02-14 16:38:02,216 on stmt: $const174.49 = const(int, 1)
DEBUG 2022-02-14 16:38:02,216 on stmt: $176binary_add.50 = $172binary_floor_divide.48 + $const174.49
DEBUG 2022-02-14 16:38:02,216 on stmt: $178call_function.51 = call $160load_global.42($const162.43, $176binary_add.50, func=$160load_global.42, args=[Var($const162.43, _loop_hafnian_subroutines.py:150), Var($176binary_add.50, _loop_hafnian_subroutines.py:150)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:02,216 on stmt: $180get_iter.52 = getiter(value=$178call_function.51)
DEBUG 2022-02-14 16:38:02,217 on stmt: $phi182.1 = $180get_iter.52
DEBUG 2022-02-14 16:38:02,217 on stmt: jump 182
DEBUG 2022-02-14 16:38:02,217 ==== SSA block rewrite pass on 182
DEBUG 2022-02-14 16:38:02,217 Running <numba.core.ssa._FixSSAVars object at 0x7fa04711c6a0>
DEBUG 2022-02-14 16:38:02,217 on stmt: powfactor.2 = phi(incoming_values=[Var(powfactor.1, _loop_hafnian_subroutines.py:151), Var(powfactor, _loop_hafnian_subroutines.py:147)], incoming_blocks=[282, 70])
DEBUG 2022-02-14 16:38:02,217 on stmt: $182for_iter.2 = iternext(value=$phi182.1)
DEBUG 2022-02-14 16:38:02,217 on stmt: $182for_iter.3 = pair_first(value=$182for_iter.2)
DEBUG 2022-02-14 16:38:02,217 on stmt: $182for_iter.4 = pair_second(value=$182for_iter.2)
DEBUG 2022-02-14 16:38:02,217 on stmt: $phi184.2 = $182for_iter.3
DEBUG 2022-02-14 16:38:02,217 on stmt: branch $182for_iter.4, 184, 284
DEBUG 2022-02-14 16:38:02,217 ==== SSA block rewrite pass on 184
DEBUG 2022-02-14 16:38:02,217 Running <numba.core.ssa._FixSSAVars object at 0x7fa04711c6a0>
DEBUG 2022-02-14 16:38:02,217 on stmt: j = $phi184.2
DEBUG 2022-02-14 16:38:02,217 on stmt: $192binary_true_divide.6 = factor / j
DEBUG 2022-02-14 16:38:02,217 on stmt: $194inplace_multiply.7 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=powfactor.2, rhs=$192binary_true_divide.6, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:38:02,217 on stmt: powfactor.1 = $194inplace_multiply.7
DEBUG 2022-02-14 16:38:02,217 on stmt: $198load_global.8 = global(range: <class 'range'>)
DEBUG 2022-02-14 16:38:02,217 on stmt: $204binary_multiply.11 = i * j
DEBUG 2022-02-14 16:38:02,217 on stmt: $const206.12 = const(int, 1)
DEBUG 2022-02-14 16:38:02,217 on stmt: $208binary_add.13 = $204binary_multiply.11 + $const206.12
DEBUG 2022-02-14 16:38:02,218 on stmt: $const212.15 = const(int, 2)
DEBUG 2022-02-14 16:38:02,218 on stmt: $214binary_floor_divide.16 = n // $const212.15
DEBUG 2022-02-14 16:38:02,218 on stmt: $const216.17 = const(int, 2)
DEBUG 2022-02-14 16:38:02,218 on stmt: $218binary_add.18 = $214binary_floor_divide.16 + $const216.17
DEBUG 2022-02-14 16:38:02,218 on stmt: $220call_function.19 = call $198load_global.8($208binary_add.13, $218binary_add.18, func=$198load_global.8, args=[Var($208binary_add.13, _loop_hafnian_subroutines.py:152), Var($218binary_add.18, _loop_hafnian_subroutines.py:152)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:02,218 on stmt: $222get_iter.20 = getiter(value=$220call_function.19)
DEBUG 2022-02-14 16:38:02,218 on stmt: $phi224.2 = $222get_iter.20
DEBUG 2022-02-14 16:38:02,218 on stmt: jump 224
DEBUG 2022-02-14 16:38:02,218 ==== SSA block rewrite pass on 224
DEBUG 2022-02-14 16:38:02,218 Running <numba.core.ssa._FixSSAVars object at 0x7fa04711c6a0>
DEBUG 2022-02-14 16:38:02,218 on stmt: $224for_iter.3 = iternext(value=$phi224.2)
DEBUG 2022-02-14 16:38:02,218 on stmt: $224for_iter.4 = pair_first(value=$224for_iter.3)
DEBUG 2022-02-14 16:38:02,218 on stmt: $224for_iter.5 = pair_second(value=$224for_iter.3)
DEBUG 2022-02-14 16:38:02,218 on stmt: $phi226.3 = $224for_iter.4
DEBUG 2022-02-14 16:38:02,218 on stmt: branch $224for_iter.5, 226, 282
DEBUG 2022-02-14 16:38:02,218 ==== SSA block rewrite pass on 226
DEBUG 2022-02-14 16:38:02,218 Running <numba.core.ssa._FixSSAVars object at 0x7fa04711c6a0>
DEBUG 2022-02-14 16:38:02,218 on stmt: k = $phi226.3
DEBUG 2022-02-14 16:38:02,218 on stmt: $const234.7 = const(int, 1)
DEBUG 2022-02-14 16:38:02,218 on stmt: $236binary_subtract.8 = k - $const234.7
DEBUG 2022-02-14 16:38:02,218 on stmt: $238build_tuple.9 = build_tuple(items=[Var(count.1, _loop_hafnian_subroutines.py:148), Var($236binary_subtract.8, _loop_hafnian_subroutines.py:153)])
DEBUG 2022-02-14 16:38:02,219 on stmt: $242binary_subscr.12 = getitem(value=comb, index=$238build_tuple.9, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:02,219 on stmt: $const246.14 = const(int, 1)
DEBUG 2022-02-14 16:38:02,219 on stmt: $250binary_subtract.16 = $const246.14 - count.1
DEBUG 2022-02-14 16:38:02,219 on stmt: $258binary_multiply.20 = i * j
DEBUG 2022-02-14 16:38:02,219 on stmt: $260binary_subtract.21 = k - $258binary_multiply.20
DEBUG 2022-02-14 16:38:02,219 on stmt: $const262.22 = const(int, 1)
DEBUG 2022-02-14 16:38:02,219 on stmt: $264binary_subtract.23 = $260binary_subtract.21 - $const262.22
DEBUG 2022-02-14 16:38:02,219 on stmt: $266build_tuple.24 = build_tuple(items=[Var($250binary_subtract.16, _loop_hafnian_subroutines.py:153), Var($264binary_subtract.23, _loop_hafnian_subroutines.py:153)])
DEBUG 2022-02-14 16:38:02,219 on stmt: $268binary_subscr.25 = getitem(value=comb, index=$266build_tuple.24, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:02,219 on stmt: $272binary_multiply.27 = $268binary_subscr.25 * powfactor.1
DEBUG 2022-02-14 16:38:02,219 on stmt: $274inplace_add.28 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$242binary_subscr.12, rhs=$272binary_multiply.27, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:38:02,219 on stmt: comb[$238build_tuple.9] = $274inplace_add.28
DEBUG 2022-02-14 16:38:02,219 on stmt: jump 224
DEBUG 2022-02-14 16:38:02,219 ==== SSA block rewrite pass on 282
DEBUG 2022-02-14 16:38:02,219 Running <numba.core.ssa._FixSSAVars object at 0x7fa04711c6a0>
DEBUG 2022-02-14 16:38:02,219 on stmt: jump 182
DEBUG 2022-02-14 16:38:02,219 ==== SSA block rewrite pass on 284
DEBUG 2022-02-14 16:38:02,219 Running <numba.core.ssa._FixSSAVars object at 0x7fa04711c6a0>
DEBUG 2022-02-14 16:38:02,219 on stmt: jump 68
DEBUG 2022-02-14 16:38:02,219 ==== SSA block rewrite pass on 286
DEBUG 2022-02-14 16:38:02,220 Running <numba.core.ssa._FixSSAVars object at 0x7fa04711c6a0>
DEBUG 2022-02-14 16:38:02,220 on stmt: $const290.2 = const(NoneType, None)
DEBUG 2022-02-14 16:38:02,220 on stmt: $const292.3 = const(NoneType, None)
DEBUG 2022-02-14 16:38:02,220 on stmt: $294build_slice.4 = global(slice: <class 'slice'>)
DEBUG 2022-02-14 16:38:02,220 on stmt: $294build_slice.5 = call $294build_slice.4($const290.2, $const292.3, func=$294build_slice.4, args=(Var($const290.2, _loop_hafnian_subroutines.py:154), Var($const292.3, _loop_hafnian_subroutines.py:154)), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:02,220 on stmt: $296build_tuple.6 = build_tuple(items=[Var(count.2, _loop_hafnian_subroutines.py:143), Var($294build_slice.5, _loop_hafnian_subroutines.py:154)])
DEBUG 2022-02-14 16:38:02,220 on stmt: $298binary_subscr.7 = getitem(value=comb, index=$296build_tuple.6, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:02,220 on stmt: $300return_value.8 = cast(value=$298binary_subscr.7)
DEBUG 2022-02-14 16:38:02,220 on stmt: return $300return_value.8
DEBUG 2022-02-14 16:38:02,226 bytecode dump:
>          0	NOP(arg=None, lineno=3)
           2	LOAD_GLOBAL(arg=0, lineno=3)
           4	LOAD_FAST(arg=0, lineno=3)
           6	LOAD_FAST(arg=1, lineno=3)
           8	CALL_FUNCTION(arg=2, lineno=3)
          10	RETURN_VALUE(arg=None, lineno=3)
DEBUG 2022-02-14 16:38:02,227 pending: deque([State(pc_initial=0 nstack_initial=0)])
DEBUG 2022-02-14 16:38:02,227 stack: []
DEBUG 2022-02-14 16:38:02,227 dispatch pc=0, inst=NOP(arg=None, lineno=3)
DEBUG 2022-02-14 16:38:02,227 stack []
DEBUG 2022-02-14 16:38:02,227 dispatch pc=2, inst=LOAD_GLOBAL(arg=0, lineno=3)
DEBUG 2022-02-14 16:38:02,227 stack []
DEBUG 2022-02-14 16:38:02,227 dispatch pc=4, inst=LOAD_FAST(arg=0, lineno=3)
DEBUG 2022-02-14 16:38:02,227 stack ['$2load_global.0']
DEBUG 2022-02-14 16:38:02,227 dispatch pc=6, inst=LOAD_FAST(arg=1, lineno=3)
DEBUG 2022-02-14 16:38:02,227 stack ['$2load_global.0', '$tmp04.1']
DEBUG 2022-02-14 16:38:02,227 dispatch pc=8, inst=CALL_FUNCTION(arg=2, lineno=3)
DEBUG 2022-02-14 16:38:02,227 stack ['$2load_global.0', '$tmp04.1', '$dtype6.2']
DEBUG 2022-02-14 16:38:02,227 dispatch pc=10, inst=RETURN_VALUE(arg=None, lineno=3)
DEBUG 2022-02-14 16:38:02,227 stack ['$8call_function.3']
DEBUG 2022-02-14 16:38:02,227 end state. edges=[]
DEBUG 2022-02-14 16:38:02,227 -------------------------Prune PHIs-------------------------
DEBUG 2022-02-14 16:38:02,227 Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
DEBUG 2022-02-14 16:38:02,227 defmap: {}
DEBUG 2022-02-14 16:38:02,227 phismap: defaultdict(<class 'set'>, {})
DEBUG 2022-02-14 16:38:02,228 changing phismap: defaultdict(<class 'set'>, {})
DEBUG 2022-02-14 16:38:02,228 keep phismap: {}
DEBUG 2022-02-14 16:38:02,228 new_out: defaultdict(<class 'dict'>, {})
DEBUG 2022-02-14 16:38:02,228 ----------------------DONE Prune PHIs-----------------------
DEBUG 2022-02-14 16:38:02,228 block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$2load_global.0'}), (4, {'res': '$tmp04.1'}), (6, {'res': '$dtype6.2'}), (8, {'func': '$2load_global.0', 'args': ['$tmp04.1', '$dtype6.2'], 'res': '$8call_function.3'}), (10, {'retval': '$8call_function.3', 'castval': '$10return_value.4'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG 2022-02-14 16:38:02,228 label 0:
    tmp0 = arg(0, name=tmp0)                 ['tmp0']
    dtype = arg(1, name=dtype)               ['dtype']
    $2load_global.0 = global(intrin: <intrinsic stub>) ['$2load_global.0']
    $8call_function.3 = call $2load_global.0(tmp0, dtype, func=$2load_global.0, args=[Var(tmp0, <string>:3), Var(dtype, <string>:3)], kws=(), vararg=None, target=None) ['$2load_global.0', '$8call_function.3', 'dtype', 'tmp0']
    $10return_value.4 = cast(value=$8call_function.3) ['$10return_value.4', '$8call_function.3']
    return $10return_value.4                 ['$10return_value.4']

DEBUG 2022-02-14 16:38:02,229 ==== SSA block analysis pass on 0
DEBUG 2022-02-14 16:38:02,229 Running <numba.core.ssa._GatherDefsHandler object at 0x7fa046713670>
DEBUG 2022-02-14 16:38:02,229 on stmt: tmp0 = arg(0, name=tmp0)
DEBUG 2022-02-14 16:38:02,229 on stmt: dtype = arg(1, name=dtype)
DEBUG 2022-02-14 16:38:02,229 on stmt: $2load_global.0 = global(intrin: <intrinsic stub>)
DEBUG 2022-02-14 16:38:02,229 on stmt: $8call_function.3 = call $2load_global.0(tmp0, dtype, func=$2load_global.0, args=[Var(tmp0, <string>:3), Var(dtype, <string>:3)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:02,230 on stmt: $10return_value.4 = cast(value=$8call_function.3)
DEBUG 2022-02-14 16:38:02,230 on stmt: return $10return_value.4
DEBUG 2022-02-14 16:38:02,230 defs defaultdict(<class 'list'>,
            {'$10return_value.4': [<numba.core.ir.Assign object at 0x7fa04671a280>],
             '$2load_global.0': [<numba.core.ir.Assign object at 0x7fa046713d00>],
             '$8call_function.3': [<numba.core.ir.Assign object at 0x7fa04671a160>],
             'dtype': [<numba.core.ir.Assign object at 0x7fa046713220>],
             'tmp0': [<numba.core.ir.Assign object at 0x7fa0467131c0>]})
DEBUG 2022-02-14 16:38:02,230 SSA violators set()
DEBUG 2022-02-14 16:38:02,347 bytecode dump:
>          0	NOP(arg=None, lineno=169)
           2	LOAD_DEREF(arg=0, lineno=169)
           4	STORE_FAST(arg=1, lineno=169)
           6	LOAD_GLOBAL(arg=0, lineno=170)
           8	LOAD_METHOD(arg=1, lineno=170)
          10	LOAD_FAST(arg=0, lineno=170)
          12	CALL_METHOD(arg=1, lineno=170)
          14	GET_ITER(arg=None, lineno=170)
>         16	FOR_ITER(arg=16, lineno=170)
          18	STORE_FAST(arg=2, lineno=170)
          20	LOAD_FAST(arg=1, lineno=171)
          22	LOAD_FAST(arg=2, lineno=171)
          24	LOAD_METHOD(arg=2, lineno=171)
          26	CALL_METHOD(arg=0, lineno=171)
          28	INPLACE_ADD(arg=None, lineno=171)
          30	STORE_FAST(arg=1, lineno=171)
          32	JUMP_ABSOLUTE(arg=16, lineno=171)
>         34	LOAD_FAST(arg=1, lineno=172)
          36	RETURN_VALUE(arg=None, lineno=172)
DEBUG 2022-02-14 16:38:02,347 pending: deque([State(pc_initial=0 nstack_initial=0)])
DEBUG 2022-02-14 16:38:02,347 stack: []
DEBUG 2022-02-14 16:38:02,347 dispatch pc=0, inst=NOP(arg=None, lineno=169)
DEBUG 2022-02-14 16:38:02,348 stack []
DEBUG 2022-02-14 16:38:02,348 dispatch pc=2, inst=LOAD_DEREF(arg=0, lineno=169)
DEBUG 2022-02-14 16:38:02,348 stack []
DEBUG 2022-02-14 16:38:02,348 dispatch pc=4, inst=STORE_FAST(arg=1, lineno=169)
DEBUG 2022-02-14 16:38:02,348 stack ['$2load_deref.0']
DEBUG 2022-02-14 16:38:02,348 dispatch pc=6, inst=LOAD_GLOBAL(arg=0, lineno=170)
DEBUG 2022-02-14 16:38:02,348 stack []
DEBUG 2022-02-14 16:38:02,348 dispatch pc=8, inst=LOAD_METHOD(arg=1, lineno=170)
DEBUG 2022-02-14 16:38:02,348 stack ['$6load_global.1']
DEBUG 2022-02-14 16:38:02,348 dispatch pc=10, inst=LOAD_FAST(arg=0, lineno=170)
DEBUG 2022-02-14 16:38:02,348 stack ['$8load_method.2']
DEBUG 2022-02-14 16:38:02,348 dispatch pc=12, inst=CALL_METHOD(arg=1, lineno=170)
DEBUG 2022-02-14 16:38:02,348 stack ['$8load_method.2', '$arr10.3']
DEBUG 2022-02-14 16:38:02,348 dispatch pc=14, inst=GET_ITER(arg=None, lineno=170)
DEBUG 2022-02-14 16:38:02,348 stack ['$12call_method.4']
DEBUG 2022-02-14 16:38:02,348 end state. edges=[Edge(pc=16, stack=('$14get_iter.5',), blockstack=(), npush=0)]
DEBUG 2022-02-14 16:38:02,349 pending: deque([State(pc_initial=16 nstack_initial=1)])
DEBUG 2022-02-14 16:38:02,349 stack: ['$phi16.0']
DEBUG 2022-02-14 16:38:02,349 dispatch pc=16, inst=FOR_ITER(arg=16, lineno=170)
DEBUG 2022-02-14 16:38:02,349 stack ['$phi16.0']
DEBUG 2022-02-14 16:38:02,349 end state. edges=[Edge(pc=34, stack=(), blockstack=(), npush=0), Edge(pc=18, stack=('$phi16.0', '$16for_iter.2'), blockstack=(), npush=0)]
DEBUG 2022-02-14 16:38:02,349 pending: deque([State(pc_initial=34 nstack_initial=0), State(pc_initial=18 nstack_initial=2)])
DEBUG 2022-02-14 16:38:02,349 stack: []
DEBUG 2022-02-14 16:38:02,349 dispatch pc=34, inst=LOAD_FAST(arg=1, lineno=172)
DEBUG 2022-02-14 16:38:02,349 stack []
DEBUG 2022-02-14 16:38:02,349 dispatch pc=36, inst=RETURN_VALUE(arg=None, lineno=172)
DEBUG 2022-02-14 16:38:02,349 stack ['$c34.0']
DEBUG 2022-02-14 16:38:02,349 end state. edges=[]
DEBUG 2022-02-14 16:38:02,349 pending: deque([State(pc_initial=18 nstack_initial=2)])
DEBUG 2022-02-14 16:38:02,349 stack: ['$phi18.0', '$phi18.1']
DEBUG 2022-02-14 16:38:02,349 dispatch pc=18, inst=STORE_FAST(arg=2, lineno=170)
DEBUG 2022-02-14 16:38:02,349 stack ['$phi18.0', '$phi18.1']
DEBUG 2022-02-14 16:38:02,350 dispatch pc=20, inst=LOAD_FAST(arg=1, lineno=171)
DEBUG 2022-02-14 16:38:02,350 stack ['$phi18.0']
DEBUG 2022-02-14 16:38:02,350 dispatch pc=22, inst=LOAD_FAST(arg=2, lineno=171)
DEBUG 2022-02-14 16:38:02,350 stack ['$phi18.0', '$c20.2']
DEBUG 2022-02-14 16:38:02,350 dispatch pc=24, inst=LOAD_METHOD(arg=2, lineno=171)
DEBUG 2022-02-14 16:38:02,350 stack ['$phi18.0', '$c20.2', '$v22.3']
DEBUG 2022-02-14 16:38:02,350 dispatch pc=26, inst=CALL_METHOD(arg=0, lineno=171)
DEBUG 2022-02-14 16:38:02,350 stack ['$phi18.0', '$c20.2', '$24load_method.4']
DEBUG 2022-02-14 16:38:02,350 dispatch pc=28, inst=INPLACE_ADD(arg=None, lineno=171)
DEBUG 2022-02-14 16:38:02,350 stack ['$phi18.0', '$c20.2', '$26call_method.5']
DEBUG 2022-02-14 16:38:02,350 dispatch pc=30, inst=STORE_FAST(arg=1, lineno=171)
DEBUG 2022-02-14 16:38:02,350 stack ['$phi18.0', '$28inplace_add.6']
DEBUG 2022-02-14 16:38:02,350 dispatch pc=32, inst=JUMP_ABSOLUTE(arg=16, lineno=171)
DEBUG 2022-02-14 16:38:02,350 stack ['$phi18.0']
DEBUG 2022-02-14 16:38:02,350 end state. edges=[Edge(pc=16, stack=('$phi18.0',), blockstack=(), npush=0)]
DEBUG 2022-02-14 16:38:02,351 pending: deque([State(pc_initial=16 nstack_initial=1)])
DEBUG 2022-02-14 16:38:02,351 -------------------------Prune PHIs-------------------------
DEBUG 2022-02-14 16:38:02,351 Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=16 nstack_initial=1): {'$phi16.0'},
             State(pc_initial=18 nstack_initial=2): {'$phi18.1'},
             State(pc_initial=34 nstack_initial=0): set()})
DEBUG 2022-02-14 16:38:02,351 defmap: {'$phi16.0': State(pc_initial=0 nstack_initial=0),
 '$phi18.1': State(pc_initial=16 nstack_initial=1)}
DEBUG 2022-02-14 16:38:02,351 phismap: defaultdict(<class 'set'>,
            {'$phi16.0': {('$14get_iter.5',
                           State(pc_initial=0 nstack_initial=0)),
                          ('$phi18.0', State(pc_initial=18 nstack_initial=2))},
             '$phi18.0': {('$phi16.0', State(pc_initial=16 nstack_initial=1))},
             '$phi18.1': {('$16for_iter.2',
                           State(pc_initial=16 nstack_initial=1))}})
DEBUG 2022-02-14 16:38:02,351 changing phismap: defaultdict(<class 'set'>,
            {'$phi16.0': {('$14get_iter.5',
                           State(pc_initial=0 nstack_initial=0)),
                          ('$phi16.0', State(pc_initial=16 nstack_initial=1))},
             '$phi18.0': {('$14get_iter.5',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi18.1': {('$16for_iter.2',
                           State(pc_initial=16 nstack_initial=1))}})
DEBUG 2022-02-14 16:38:02,352 changing phismap: defaultdict(<class 'set'>,
            {'$phi16.0': {('$14get_iter.5',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi18.0': {('$14get_iter.5',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi18.1': {('$16for_iter.2',
                           State(pc_initial=16 nstack_initial=1))}})
DEBUG 2022-02-14 16:38:02,352 changing phismap: defaultdict(<class 'set'>,
            {'$phi16.0': {('$14get_iter.5',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi18.0': {('$14get_iter.5',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi18.1': {('$16for_iter.2',
                           State(pc_initial=16 nstack_initial=1))}})
DEBUG 2022-02-14 16:38:02,352 keep phismap: {'$phi16.0': {('$14get_iter.5', State(pc_initial=0 nstack_initial=0))},
 '$phi18.1': {('$16for_iter.2', State(pc_initial=16 nstack_initial=1))}}
DEBUG 2022-02-14 16:38:02,353 new_out: defaultdict(<class 'dict'>,
            {State(pc_initial=0 nstack_initial=0): {'$phi16.0': '$14get_iter.5'},
             State(pc_initial=16 nstack_initial=1): {'$phi18.1': '$16for_iter.2'}})
DEBUG 2022-02-14 16:38:02,353 ----------------------DONE Prune PHIs-----------------------
DEBUG 2022-02-14 16:38:02,353 block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$2load_deref.0'}), (4, {'value': '$2load_deref.0'}), (6, {'res': '$6load_global.1'}), (8, {'item': '$6load_global.1', 'res': '$8load_method.2'}), (10, {'res': '$arr10.3'}), (12, {'func': '$8load_method.2', 'args': ['$arr10.3'], 'res': '$12call_method.4'}), (14, {'value': '$12call_method.4', 'res': '$14get_iter.5'})), outgoing_phis={'$phi16.0': '$14get_iter.5'}, blockstack=(), active_try_block=None, outgoing_edgepushed={16: ('$14get_iter.5',)})
DEBUG 2022-02-14 16:38:02,353 block_infos State(pc_initial=16 nstack_initial=1):
AdaptBlockInfo(insts=((16, {'iterator': '$phi16.0', 'pair': '$16for_iter.1', 'indval': '$16for_iter.2', 'pred': '$16for_iter.3'}),), outgoing_phis={'$phi18.1': '$16for_iter.2'}, blockstack=(), active_try_block=None, outgoing_edgepushed={34: (), 18: ('$phi16.0', '$16for_iter.2')})
DEBUG 2022-02-14 16:38:02,353 block_infos State(pc_initial=18 nstack_initial=2):
AdaptBlockInfo(insts=((18, {'value': '$phi18.1'}), (20, {'res': '$c20.2'}), (22, {'res': '$v22.3'}), (24, {'item': '$v22.3', 'res': '$24load_method.4'}), (26, {'func': '$24load_method.4', 'args': [], 'res': '$26call_method.5'}), (28, {'lhs': '$c20.2', 'rhs': '$26call_method.5', 'res': '$28inplace_add.6'}), (30, {'value': '$28inplace_add.6'}), (32, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={16: ('$phi18.0',)})
DEBUG 2022-02-14 16:38:02,353 block_infos State(pc_initial=34 nstack_initial=0):
AdaptBlockInfo(insts=((34, {'res': '$c34.0'}), (36, {'retval': '$c34.0', 'castval': '$36return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG 2022-02-14 16:38:02,354 label 0:
    arr = arg(0, name=arr)                   ['arr']
    c = freevar(zero: 0j)                    ['c']
    $6load_global.1 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>) ['$6load_global.1']
    $8load_method.2 = getattr(value=$6load_global.1, attr=nditer) ['$6load_global.1', '$8load_method.2']
    $12call_method.4 = call $8load_method.2(arr, func=$8load_method.2, args=[Var(arr, arraymath.py:169)], kws=(), vararg=None, target=None) ['$12call_method.4', '$8load_method.2', 'arr']
    $14get_iter.5 = getiter(value=$12call_method.4) ['$12call_method.4', '$14get_iter.5']
    $phi16.0 = $14get_iter.5                 ['$14get_iter.5', '$phi16.0']
    jump 16                                  []
label 16:
    $16for_iter.1 = iternext(value=$phi16.0) ['$16for_iter.1', '$phi16.0']
    $16for_iter.2 = pair_first(value=$16for_iter.1) ['$16for_iter.1', '$16for_iter.2']
    $16for_iter.3 = pair_second(value=$16for_iter.1) ['$16for_iter.1', '$16for_iter.3']
    $phi18.1 = $16for_iter.2                 ['$16for_iter.2', '$phi18.1']
    branch $16for_iter.3, 18, 34             ['$16for_iter.3']
label 18:
    v = $phi18.1                             ['$phi18.1', 'v']
    $24load_method.4 = getattr(value=v, attr=item) ['$24load_method.4', 'v']
    $26call_method.5 = call $24load_method.4(func=$24load_method.4, args=[], kws=(), vararg=None, target=None) ['$24load_method.4', '$26call_method.5']
    $28inplace_add.6 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=c, rhs=$26call_method.5, static_lhs=Undefined, static_rhs=Undefined) ['$26call_method.5', '$28inplace_add.6', 'c']
    c = $28inplace_add.6                     ['$28inplace_add.6', 'c']
    jump 16                                  []
label 34:
    $36return_value.1 = cast(value=c)        ['$36return_value.1', 'c']
    return $36return_value.1                 ['$36return_value.1']

DEBUG 2022-02-14 16:38:02,361 ==== SSA block analysis pass on 0
DEBUG 2022-02-14 16:38:02,361 Running <numba.core.ssa._GatherDefsHandler object at 0x7fa04668edc0>
DEBUG 2022-02-14 16:38:02,361 on stmt: arr = arg(0, name=arr)
DEBUG 2022-02-14 16:38:02,361 on stmt: c = freevar(zero: 0j)
DEBUG 2022-02-14 16:38:02,361 on stmt: $6load_global.1 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:38:02,362 on stmt: $8load_method.2 = getattr(value=$6load_global.1, attr=nditer)
DEBUG 2022-02-14 16:38:02,362 on stmt: $12call_method.4 = call $8load_method.2(arr, func=$8load_method.2, args=[Var(arr, arraymath.py:169)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:02,362 on stmt: $14get_iter.5 = getiter(value=$12call_method.4)
DEBUG 2022-02-14 16:38:02,362 on stmt: $phi16.0 = $14get_iter.5
DEBUG 2022-02-14 16:38:02,362 on stmt: jump 16
DEBUG 2022-02-14 16:38:02,362 ==== SSA block analysis pass on 16
DEBUG 2022-02-14 16:38:02,362 Running <numba.core.ssa._GatherDefsHandler object at 0x7fa04668edc0>
DEBUG 2022-02-14 16:38:02,362 on stmt: $16for_iter.1 = iternext(value=$phi16.0)
DEBUG 2022-02-14 16:38:02,362 on stmt: $16for_iter.2 = pair_first(value=$16for_iter.1)
DEBUG 2022-02-14 16:38:02,362 on stmt: $16for_iter.3 = pair_second(value=$16for_iter.1)
DEBUG 2022-02-14 16:38:02,362 on stmt: $phi18.1 = $16for_iter.2
DEBUG 2022-02-14 16:38:02,362 on stmt: branch $16for_iter.3, 18, 34
DEBUG 2022-02-14 16:38:02,362 ==== SSA block analysis pass on 18
DEBUG 2022-02-14 16:38:02,362 Running <numba.core.ssa._GatherDefsHandler object at 0x7fa04668edc0>
DEBUG 2022-02-14 16:38:02,362 on stmt: v = $phi18.1
DEBUG 2022-02-14 16:38:02,362 on stmt: $24load_method.4 = getattr(value=v, attr=item)
DEBUG 2022-02-14 16:38:02,363 on stmt: $26call_method.5 = call $24load_method.4(func=$24load_method.4, args=[], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:02,363 on stmt: $28inplace_add.6 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=c, rhs=$26call_method.5, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:38:02,363 on stmt: c = $28inplace_add.6
DEBUG 2022-02-14 16:38:02,363 on stmt: jump 16
DEBUG 2022-02-14 16:38:02,363 ==== SSA block analysis pass on 34
DEBUG 2022-02-14 16:38:02,363 Running <numba.core.ssa._GatherDefsHandler object at 0x7fa04668edc0>
DEBUG 2022-02-14 16:38:02,363 on stmt: $36return_value.1 = cast(value=c)
DEBUG 2022-02-14 16:38:02,363 on stmt: return $36return_value.1
DEBUG 2022-02-14 16:38:02,363 defs defaultdict(<class 'list'>,
            {'$12call_method.4': [<numba.core.ir.Assign object at 0x7fa04670b4c0>],
             '$14get_iter.5': [<numba.core.ir.Assign object at 0x7fa04670b5b0>],
             '$16for_iter.1': [<numba.core.ir.Assign object at 0x7fa04670b880>],
             '$16for_iter.2': [<numba.core.ir.Assign object at 0x7fa04670b9a0>],
             '$16for_iter.3': [<numba.core.ir.Assign object at 0x7fa04670bac0>],
             '$24load_method.4': [<numba.core.ir.Assign object at 0x7fa04668e190>],
             '$26call_method.5': [<numba.core.ir.Assign object at 0x7fa04668e3a0>],
             '$28inplace_add.6': [<numba.core.ir.Assign object at 0x7fa04668e4c0>],
             '$36return_value.1': [<numba.core.ir.Assign object at 0x7fa04668e8b0>],
             '$6load_global.1': [<numba.core.ir.Assign object at 0x7fa046705fd0>],
             '$8load_method.2': [<numba.core.ir.Assign object at 0x7fa04670b190>],
             '$phi16.0': [<numba.core.ir.Assign object at 0x7fa046705ee0>],
             '$phi18.1': [<numba.core.ir.Assign object at 0x7fa04670b7c0>],
             'arr': [<numba.core.ir.Assign object at 0x7fa046705130>],
             'c': [<numba.core.ir.Assign object at 0x7fa046705d30>,
                   <numba.core.ir.Assign object at 0x7fa04668e580>],
             'v': [<numba.core.ir.Assign object at 0x7fa04670bd90>]})
DEBUG 2022-02-14 16:38:02,363 SSA violators {'c'}
DEBUG 2022-02-14 16:38:02,363 Fix SSA violator on var c
DEBUG 2022-02-14 16:38:02,364 ==== SSA block rewrite pass on 0
DEBUG 2022-02-14 16:38:02,364 Running <numba.core.ssa._FreshVarHandler object at 0x7fa04668ee50>
DEBUG 2022-02-14 16:38:02,364 on stmt: arr = arg(0, name=arr)
DEBUG 2022-02-14 16:38:02,364 on stmt: c = freevar(zero: 0j)
DEBUG 2022-02-14 16:38:02,364 first assign: c
DEBUG 2022-02-14 16:38:02,364 replaced with: c = freevar(zero: 0j)
DEBUG 2022-02-14 16:38:02,364 on stmt: $6load_global.1 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:38:02,364 on stmt: $8load_method.2 = getattr(value=$6load_global.1, attr=nditer)
DEBUG 2022-02-14 16:38:02,364 on stmt: $12call_method.4 = call $8load_method.2(arr, func=$8load_method.2, args=[Var(arr, arraymath.py:169)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:02,364 on stmt: $14get_iter.5 = getiter(value=$12call_method.4)
DEBUG 2022-02-14 16:38:02,364 on stmt: $phi16.0 = $14get_iter.5
DEBUG 2022-02-14 16:38:02,364 on stmt: jump 16
DEBUG 2022-02-14 16:38:02,364 ==== SSA block rewrite pass on 16
DEBUG 2022-02-14 16:38:02,364 Running <numba.core.ssa._FreshVarHandler object at 0x7fa04668ee50>
DEBUG 2022-02-14 16:38:02,364 on stmt: $16for_iter.1 = iternext(value=$phi16.0)
DEBUG 2022-02-14 16:38:02,364 on stmt: $16for_iter.2 = pair_first(value=$16for_iter.1)
DEBUG 2022-02-14 16:38:02,365 on stmt: $16for_iter.3 = pair_second(value=$16for_iter.1)
DEBUG 2022-02-14 16:38:02,365 on stmt: $phi18.1 = $16for_iter.2
DEBUG 2022-02-14 16:38:02,365 on stmt: branch $16for_iter.3, 18, 34
DEBUG 2022-02-14 16:38:02,365 ==== SSA block rewrite pass on 18
DEBUG 2022-02-14 16:38:02,365 Running <numba.core.ssa._FreshVarHandler object at 0x7fa04668ee50>
DEBUG 2022-02-14 16:38:02,365 on stmt: v = $phi18.1
DEBUG 2022-02-14 16:38:02,365 on stmt: $24load_method.4 = getattr(value=v, attr=item)
DEBUG 2022-02-14 16:38:02,365 on stmt: $26call_method.5 = call $24load_method.4(func=$24load_method.4, args=[], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:02,365 on stmt: $28inplace_add.6 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=c, rhs=$26call_method.5, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:38:02,365 on stmt: c = $28inplace_add.6
DEBUG 2022-02-14 16:38:02,365 replaced with: c.1 = $28inplace_add.6
DEBUG 2022-02-14 16:38:02,365 on stmt: jump 16
DEBUG 2022-02-14 16:38:02,365 ==== SSA block rewrite pass on 34
DEBUG 2022-02-14 16:38:02,365 Running <numba.core.ssa._FreshVarHandler object at 0x7fa04668ee50>
DEBUG 2022-02-14 16:38:02,365 on stmt: $36return_value.1 = cast(value=c)
DEBUG 2022-02-14 16:38:02,365 on stmt: return $36return_value.1
DEBUG 2022-02-14 16:38:02,366 Replaced assignments: defaultdict(<class 'list'>,
            {0: [<numba.core.ir.Assign object at 0x7fa04668ee20>],
             18: [<numba.core.ir.Assign object at 0x7fa04668eb80>]})
DEBUG 2022-02-14 16:38:02,366 ==== SSA block rewrite pass on 0
DEBUG 2022-02-14 16:38:02,366 Running <numba.core.ssa._FixSSAVars object at 0x7fa04668ee50>
DEBUG 2022-02-14 16:38:02,366 on stmt: arr = arg(0, name=arr)
DEBUG 2022-02-14 16:38:02,366 on stmt: c = freevar(zero: 0j)
DEBUG 2022-02-14 16:38:02,366 on stmt: $6load_global.1 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:38:02,366 on stmt: $8load_method.2 = getattr(value=$6load_global.1, attr=nditer)
DEBUG 2022-02-14 16:38:02,366 on stmt: $12call_method.4 = call $8load_method.2(arr, func=$8load_method.2, args=[Var(arr, arraymath.py:169)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:02,366 on stmt: $14get_iter.5 = getiter(value=$12call_method.4)
DEBUG 2022-02-14 16:38:02,366 on stmt: $phi16.0 = $14get_iter.5
DEBUG 2022-02-14 16:38:02,366 on stmt: jump 16
DEBUG 2022-02-14 16:38:02,366 ==== SSA block rewrite pass on 16
DEBUG 2022-02-14 16:38:02,366 Running <numba.core.ssa._FixSSAVars object at 0x7fa04668ee50>
DEBUG 2022-02-14 16:38:02,366 on stmt: $16for_iter.1 = iternext(value=$phi16.0)
DEBUG 2022-02-14 16:38:02,366 on stmt: $16for_iter.2 = pair_first(value=$16for_iter.1)
DEBUG 2022-02-14 16:38:02,367 on stmt: $16for_iter.3 = pair_second(value=$16for_iter.1)
DEBUG 2022-02-14 16:38:02,367 on stmt: $phi18.1 = $16for_iter.2
DEBUG 2022-02-14 16:38:02,367 on stmt: branch $16for_iter.3, 18, 34
DEBUG 2022-02-14 16:38:02,367 ==== SSA block rewrite pass on 18
DEBUG 2022-02-14 16:38:02,367 Running <numba.core.ssa._FixSSAVars object at 0x7fa04668ee50>
DEBUG 2022-02-14 16:38:02,367 on stmt: v = $phi18.1
DEBUG 2022-02-14 16:38:02,367 on stmt: $24load_method.4 = getattr(value=v, attr=item)
DEBUG 2022-02-14 16:38:02,367 on stmt: $26call_method.5 = call $24load_method.4(func=$24load_method.4, args=[], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:02,367 on stmt: $28inplace_add.6 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=c, rhs=$26call_method.5, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:38:02,367 find_def var='c' stmt=$28inplace_add.6 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=c, rhs=$26call_method.5, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:38:02,367 find_def_from_top label 18
DEBUG 2022-02-14 16:38:02,367 idom 16 from label 18
DEBUG 2022-02-14 16:38:02,367 find_def_from_bottom label 16
DEBUG 2022-02-14 16:38:02,367 find_def_from_top label 16
DEBUG 2022-02-14 16:38:02,367 insert phi node c.2 = phi(incoming_values=[], incoming_blocks=[]) at 16
DEBUG 2022-02-14 16:38:02,367 find_def_from_bottom label 0
DEBUG 2022-02-14 16:38:02,368 incoming_def c = freevar(zero: 0j)
DEBUG 2022-02-14 16:38:02,368 find_def_from_bottom label 18
DEBUG 2022-02-14 16:38:02,368 incoming_def c.1 = $28inplace_add.6
DEBUG 2022-02-14 16:38:02,368 replaced with: $28inplace_add.6 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=c.2, rhs=$26call_method.5, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:38:02,368 on stmt: c.1 = $28inplace_add.6
DEBUG 2022-02-14 16:38:02,368 on stmt: jump 16
DEBUG 2022-02-14 16:38:02,368 ==== SSA block rewrite pass on 34
DEBUG 2022-02-14 16:38:02,368 Running <numba.core.ssa._FixSSAVars object at 0x7fa04668ee50>
DEBUG 2022-02-14 16:38:02,368 on stmt: $36return_value.1 = cast(value=c)
DEBUG 2022-02-14 16:38:02,368 find_def var='c' stmt=$36return_value.1 = cast(value=c)
DEBUG 2022-02-14 16:38:02,368 find_def_from_top label 34
DEBUG 2022-02-14 16:38:02,368 idom 16 from label 34
DEBUG 2022-02-14 16:38:02,368 find_def_from_bottom label 16
DEBUG 2022-02-14 16:38:02,368 replaced with: $36return_value.1 = cast(value=c.2)
DEBUG 2022-02-14 16:38:02,368 on stmt: return $36return_value.1
DEBUG 2022-02-14 16:38:02,384 bytecode dump:
>          0	NOP(arg=None, lineno=2820)
           2	LOAD_GLOBAL(arg=0, lineno=2820)
           4	LOAD_FAST(arg=0, lineno=2820)
           6	CALL_FUNCTION(arg=1, lineno=2820)
           8	STORE_FAST(arg=2, lineno=2820)
          10	LOAD_GLOBAL(arg=1, lineno=2821)
          12	LOAD_FAST(arg=2, lineno=2821)
          14	CALL_FUNCTION(arg=1, lineno=2821)
          16	GET_ITER(arg=None, lineno=2821)
>         18	FOR_ITER(arg=40, lineno=2821)
          20	STORE_FAST(arg=3, lineno=2821)
          22	LOAD_FAST(arg=0, lineno=2822)
          24	LOAD_FAST(arg=3, lineno=2822)
          26	BINARY_SUBSCR(arg=None, lineno=2822)
          28	LOAD_FAST(arg=1, lineno=2822)
          30	LOAD_GLOBAL(arg=0, lineno=2822)
          32	LOAD_FAST(arg=1, lineno=2822)
          34	CALL_FUNCTION(arg=1, lineno=2822)
          36	LOAD_FAST(arg=2, lineno=2822)
          38	BINARY_SUBTRACT(arg=None, lineno=2822)
          40	LOAD_FAST(arg=3, lineno=2822)
          42	BINARY_ADD(arg=None, lineno=2822)
          44	BINARY_SUBSCR(arg=None, lineno=2822)
          46	COMPARE_OP(arg=3, lineno=2822)
          48	POP_JUMP_IF_FALSE(arg=18, lineno=2822)
          50	LOAD_GLOBAL(arg=2, lineno=2823)
          52	LOAD_CONST(arg=1, lineno=2823)
          54	CALL_FUNCTION(arg=1, lineno=2823)
          56	RAISE_VARARGS(arg=1, lineno=2823)
          58	JUMP_ABSOLUTE(arg=18, lineno=2823)
>         60	LOAD_CONST(arg=0, lineno=2823)
          62	RETURN_VALUE(arg=None, lineno=2823)
DEBUG 2022-02-14 16:38:02,384 pending: deque([State(pc_initial=0 nstack_initial=0)])
DEBUG 2022-02-14 16:38:02,384 stack: []
DEBUG 2022-02-14 16:38:02,384 dispatch pc=0, inst=NOP(arg=None, lineno=2820)
DEBUG 2022-02-14 16:38:02,384 stack []
DEBUG 2022-02-14 16:38:02,384 dispatch pc=2, inst=LOAD_GLOBAL(arg=0, lineno=2820)
DEBUG 2022-02-14 16:38:02,384 stack []
DEBUG 2022-02-14 16:38:02,384 dispatch pc=4, inst=LOAD_FAST(arg=0, lineno=2820)
DEBUG 2022-02-14 16:38:02,384 stack ['$2load_global.0']
DEBUG 2022-02-14 16:38:02,384 dispatch pc=6, inst=CALL_FUNCTION(arg=1, lineno=2820)
DEBUG 2022-02-14 16:38:02,384 stack ['$2load_global.0', '$shape4.1']
DEBUG 2022-02-14 16:38:02,384 dispatch pc=8, inst=STORE_FAST(arg=2, lineno=2820)
DEBUG 2022-02-14 16:38:02,384 stack ['$6call_function.2']
DEBUG 2022-02-14 16:38:02,385 dispatch pc=10, inst=LOAD_GLOBAL(arg=1, lineno=2821)
DEBUG 2022-02-14 16:38:02,385 stack []
DEBUG 2022-02-14 16:38:02,385 dispatch pc=12, inst=LOAD_FAST(arg=2, lineno=2821)
DEBUG 2022-02-14 16:38:02,385 stack ['$10load_global.3']
DEBUG 2022-02-14 16:38:02,385 dispatch pc=14, inst=CALL_FUNCTION(arg=1, lineno=2821)
DEBUG 2022-02-14 16:38:02,385 stack ['$10load_global.3', '$n12.4']
DEBUG 2022-02-14 16:38:02,385 dispatch pc=16, inst=GET_ITER(arg=None, lineno=2821)
DEBUG 2022-02-14 16:38:02,385 stack ['$14call_function.5']
DEBUG 2022-02-14 16:38:02,385 end state. edges=[Edge(pc=18, stack=('$16get_iter.6',), blockstack=(), npush=0)]
DEBUG 2022-02-14 16:38:02,385 pending: deque([State(pc_initial=18 nstack_initial=1)])
DEBUG 2022-02-14 16:38:02,385 stack: ['$phi18.0']
DEBUG 2022-02-14 16:38:02,385 dispatch pc=18, inst=FOR_ITER(arg=40, lineno=2821)
DEBUG 2022-02-14 16:38:02,385 stack ['$phi18.0']
DEBUG 2022-02-14 16:38:02,385 end state. edges=[Edge(pc=60, stack=(), blockstack=(), npush=0), Edge(pc=20, stack=('$phi18.0', '$18for_iter.2'), blockstack=(), npush=0)]
DEBUG 2022-02-14 16:38:02,385 pending: deque([State(pc_initial=60 nstack_initial=0), State(pc_initial=20 nstack_initial=2)])
DEBUG 2022-02-14 16:38:02,385 stack: []
DEBUG 2022-02-14 16:38:02,385 dispatch pc=60, inst=LOAD_CONST(arg=0, lineno=2823)
DEBUG 2022-02-14 16:38:02,385 stack []
DEBUG 2022-02-14 16:38:02,385 dispatch pc=62, inst=RETURN_VALUE(arg=None, lineno=2823)
DEBUG 2022-02-14 16:38:02,385 stack ['$const60.0']
DEBUG 2022-02-14 16:38:02,385 end state. edges=[]
DEBUG 2022-02-14 16:38:02,385 pending: deque([State(pc_initial=20 nstack_initial=2)])
DEBUG 2022-02-14 16:38:02,385 stack: ['$phi20.0', '$phi20.1']
DEBUG 2022-02-14 16:38:02,385 dispatch pc=20, inst=STORE_FAST(arg=3, lineno=2821)
DEBUG 2022-02-14 16:38:02,386 stack ['$phi20.0', '$phi20.1']
DEBUG 2022-02-14 16:38:02,386 dispatch pc=22, inst=LOAD_FAST(arg=0, lineno=2822)
DEBUG 2022-02-14 16:38:02,386 stack ['$phi20.0']
DEBUG 2022-02-14 16:38:02,386 dispatch pc=24, inst=LOAD_FAST(arg=3, lineno=2822)
DEBUG 2022-02-14 16:38:02,386 stack ['$phi20.0', '$shape22.2']
DEBUG 2022-02-14 16:38:02,386 dispatch pc=26, inst=BINARY_SUBSCR(arg=None, lineno=2822)
DEBUG 2022-02-14 16:38:02,386 stack ['$phi20.0', '$shape22.2', '$i24.3']
DEBUG 2022-02-14 16:38:02,386 dispatch pc=28, inst=LOAD_FAST(arg=1, lineno=2822)
DEBUG 2022-02-14 16:38:02,386 stack ['$phi20.0', '$26binary_subscr.4']
DEBUG 2022-02-14 16:38:02,386 dispatch pc=30, inst=LOAD_GLOBAL(arg=0, lineno=2822)
DEBUG 2022-02-14 16:38:02,386 stack ['$phi20.0', '$26binary_subscr.4', '$main_shape28.5']
DEBUG 2022-02-14 16:38:02,386 dispatch pc=32, inst=LOAD_FAST(arg=1, lineno=2822)
DEBUG 2022-02-14 16:38:02,386 stack ['$phi20.0', '$26binary_subscr.4', '$main_shape28.5', '$30load_global.6']
DEBUG 2022-02-14 16:38:02,386 dispatch pc=34, inst=CALL_FUNCTION(arg=1, lineno=2822)
DEBUG 2022-02-14 16:38:02,386 stack ['$phi20.0', '$26binary_subscr.4', '$main_shape28.5', '$30load_global.6', '$main_shape32.7']
DEBUG 2022-02-14 16:38:02,386 dispatch pc=36, inst=LOAD_FAST(arg=2, lineno=2822)
DEBUG 2022-02-14 16:38:02,386 stack ['$phi20.0', '$26binary_subscr.4', '$main_shape28.5', '$34call_function.8']
DEBUG 2022-02-14 16:38:02,386 dispatch pc=38, inst=BINARY_SUBTRACT(arg=None, lineno=2822)
DEBUG 2022-02-14 16:38:02,386 stack ['$phi20.0', '$26binary_subscr.4', '$main_shape28.5', '$34call_function.8', '$n36.9']
DEBUG 2022-02-14 16:38:02,386 dispatch pc=40, inst=LOAD_FAST(arg=3, lineno=2822)
DEBUG 2022-02-14 16:38:02,387 stack ['$phi20.0', '$26binary_subscr.4', '$main_shape28.5', '$38binary_subtract.10']
DEBUG 2022-02-14 16:38:02,387 dispatch pc=42, inst=BINARY_ADD(arg=None, lineno=2822)
DEBUG 2022-02-14 16:38:02,387 stack ['$phi20.0', '$26binary_subscr.4', '$main_shape28.5', '$38binary_subtract.10', '$i40.11']
DEBUG 2022-02-14 16:38:02,387 dispatch pc=44, inst=BINARY_SUBSCR(arg=None, lineno=2822)
DEBUG 2022-02-14 16:38:02,387 stack ['$phi20.0', '$26binary_subscr.4', '$main_shape28.5', '$42binary_add.12']
DEBUG 2022-02-14 16:38:02,387 dispatch pc=46, inst=COMPARE_OP(arg=3, lineno=2822)
DEBUG 2022-02-14 16:38:02,387 stack ['$phi20.0', '$26binary_subscr.4', '$44binary_subscr.13']
DEBUG 2022-02-14 16:38:02,387 dispatch pc=48, inst=POP_JUMP_IF_FALSE(arg=18, lineno=2822)
DEBUG 2022-02-14 16:38:02,387 stack ['$phi20.0', '$46compare_op.14']
DEBUG 2022-02-14 16:38:02,387 end state. edges=[Edge(pc=50, stack=('$phi20.0',), blockstack=(), npush=0), Edge(pc=18, stack=('$phi20.0',), blockstack=(), npush=0)]
DEBUG 2022-02-14 16:38:02,387 pending: deque([State(pc_initial=50 nstack_initial=1), State(pc_initial=18 nstack_initial=1)])
DEBUG 2022-02-14 16:38:02,387 stack: ['$phi50.0']
DEBUG 2022-02-14 16:38:02,387 dispatch pc=50, inst=LOAD_GLOBAL(arg=2, lineno=2823)
DEBUG 2022-02-14 16:38:02,387 stack ['$phi50.0']
DEBUG 2022-02-14 16:38:02,387 dispatch pc=52, inst=LOAD_CONST(arg=1, lineno=2823)
DEBUG 2022-02-14 16:38:02,387 stack ['$phi50.0', '$50load_global.1']
DEBUG 2022-02-14 16:38:02,387 dispatch pc=54, inst=CALL_FUNCTION(arg=1, lineno=2823)
DEBUG 2022-02-14 16:38:02,387 stack ['$phi50.0', '$50load_global.1', '$const52.2']
DEBUG 2022-02-14 16:38:02,388 dispatch pc=56, inst=RAISE_VARARGS(arg=1, lineno=2823)
DEBUG 2022-02-14 16:38:02,388 stack ['$phi50.0', '$54call_function.3']
DEBUG 2022-02-14 16:38:02,388 end state. edges=[]
DEBUG 2022-02-14 16:38:02,388 pending: deque([State(pc_initial=18 nstack_initial=1)])
DEBUG 2022-02-14 16:38:02,388 -------------------------Prune PHIs-------------------------
DEBUG 2022-02-14 16:38:02,388 Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=18 nstack_initial=1): {'$phi18.0'},
             State(pc_initial=20 nstack_initial=2): {'$phi20.1'},
             State(pc_initial=50 nstack_initial=1): set(),
             State(pc_initial=60 nstack_initial=0): set()})
DEBUG 2022-02-14 16:38:02,388 defmap: {'$phi18.0': State(pc_initial=0 nstack_initial=0),
 '$phi20.1': State(pc_initial=18 nstack_initial=1)}
DEBUG 2022-02-14 16:38:02,388 phismap: defaultdict(<class 'set'>,
            {'$phi18.0': {('$16get_iter.6',
                           State(pc_initial=0 nstack_initial=0)),
                          ('$phi20.0', State(pc_initial=20 nstack_initial=2))},
             '$phi20.0': {('$phi18.0', State(pc_initial=18 nstack_initial=1))},
             '$phi20.1': {('$18for_iter.2',
                           State(pc_initial=18 nstack_initial=1))},
             '$phi50.0': {('$phi20.0', State(pc_initial=20 nstack_initial=2))}})
DEBUG 2022-02-14 16:38:02,388 changing phismap: defaultdict(<class 'set'>,
            {'$phi18.0': {('$16get_iter.6',
                           State(pc_initial=0 nstack_initial=0)),
                          ('$phi18.0', State(pc_initial=18 nstack_initial=1))},
             '$phi20.0': {('$16get_iter.6',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi20.1': {('$18for_iter.2',
                           State(pc_initial=18 nstack_initial=1))},
             '$phi50.0': {('$16get_iter.6',
                           State(pc_initial=0 nstack_initial=0))}})
DEBUG 2022-02-14 16:38:02,389 changing phismap: defaultdict(<class 'set'>,
            {'$phi18.0': {('$16get_iter.6',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi20.0': {('$16get_iter.6',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi20.1': {('$18for_iter.2',
                           State(pc_initial=18 nstack_initial=1))},
             '$phi50.0': {('$16get_iter.6',
                           State(pc_initial=0 nstack_initial=0))}})
DEBUG 2022-02-14 16:38:02,389 changing phismap: defaultdict(<class 'set'>,
            {'$phi18.0': {('$16get_iter.6',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi20.0': {('$16get_iter.6',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi20.1': {('$18for_iter.2',
                           State(pc_initial=18 nstack_initial=1))},
             '$phi50.0': {('$16get_iter.6',
                           State(pc_initial=0 nstack_initial=0))}})
DEBUG 2022-02-14 16:38:02,389 keep phismap: {'$phi18.0': {('$16get_iter.6', State(pc_initial=0 nstack_initial=0))},
 '$phi20.1': {('$18for_iter.2', State(pc_initial=18 nstack_initial=1))}}
DEBUG 2022-02-14 16:38:02,389 new_out: defaultdict(<class 'dict'>,
            {State(pc_initial=0 nstack_initial=0): {'$phi18.0': '$16get_iter.6'},
             State(pc_initial=18 nstack_initial=1): {'$phi20.1': '$18for_iter.2'}})
DEBUG 2022-02-14 16:38:02,389 ----------------------DONE Prune PHIs-----------------------
DEBUG 2022-02-14 16:38:02,389 block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$2load_global.0'}), (4, {'res': '$shape4.1'}), (6, {'func': '$2load_global.0', 'args': ['$shape4.1'], 'res': '$6call_function.2'}), (8, {'value': '$6call_function.2'}), (10, {'res': '$10load_global.3'}), (12, {'res': '$n12.4'}), (14, {'func': '$10load_global.3', 'args': ['$n12.4'], 'res': '$14call_function.5'}), (16, {'value': '$14call_function.5', 'res': '$16get_iter.6'})), outgoing_phis={'$phi18.0': '$16get_iter.6'}, blockstack=(), active_try_block=None, outgoing_edgepushed={18: ('$16get_iter.6',)})
DEBUG 2022-02-14 16:38:02,390 block_infos State(pc_initial=18 nstack_initial=1):
AdaptBlockInfo(insts=((18, {'iterator': '$phi18.0', 'pair': '$18for_iter.1', 'indval': '$18for_iter.2', 'pred': '$18for_iter.3'}),), outgoing_phis={'$phi20.1': '$18for_iter.2'}, blockstack=(), active_try_block=None, outgoing_edgepushed={60: (), 20: ('$phi18.0', '$18for_iter.2')})
DEBUG 2022-02-14 16:38:02,390 block_infos State(pc_initial=20 nstack_initial=2):
AdaptBlockInfo(insts=((20, {'value': '$phi20.1'}), (22, {'res': '$shape22.2'}), (24, {'res': '$i24.3'}), (26, {'index': '$i24.3', 'target': '$shape22.2', 'res': '$26binary_subscr.4'}), (28, {'res': '$main_shape28.5'}), (30, {'res': '$30load_global.6'}), (32, {'res': '$main_shape32.7'}), (34, {'func': '$30load_global.6', 'args': ['$main_shape32.7'], 'res': '$34call_function.8'}), (36, {'res': '$n36.9'}), (38, {'lhs': '$34call_function.8', 'rhs': '$n36.9', 'res': '$38binary_subtract.10'}), (40, {'res': '$i40.11'}), (42, {'lhs': '$38binary_subtract.10', 'rhs': '$i40.11', 'res': '$42binary_add.12'}), (44, {'index': '$42binary_add.12', 'target': '$main_shape28.5', 'res': '$44binary_subscr.13'}), (46, {'lhs': '$26binary_subscr.4', 'rhs': '$44binary_subscr.13', 'res': '$46compare_op.14'}), (48, {'pred': '$46compare_op.14'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={50: ('$phi20.0',), 18: ('$phi20.0',)})
DEBUG 2022-02-14 16:38:02,390 block_infos State(pc_initial=50 nstack_initial=1):
AdaptBlockInfo(insts=((50, {'res': '$50load_global.1'}), (52, {'res': '$const52.2'}), (54, {'func': '$50load_global.1', 'args': ['$const52.2'], 'res': '$54call_function.3'}), (56, {'exc': '$54call_function.3'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG 2022-02-14 16:38:02,390 block_infos State(pc_initial=60 nstack_initial=0):
AdaptBlockInfo(insts=((60, {'res': '$const60.0'}), (62, {'retval': '$const60.0', 'castval': '$62return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG 2022-02-14 16:38:02,391 label 0:
    shape = arg(0, name=shape)               ['shape']
    main_shape = arg(1, name=main_shape)     ['main_shape']
    $2load_global.0 = global(len: <built-in function len>) ['$2load_global.0']
    n = call $2load_global.0(shape, func=$2load_global.0, args=[Var(shape, arrayobj.py:2820)], kws=(), vararg=None, target=None) ['$2load_global.0', 'n', 'shape']
    $10load_global.3 = global(range: <class 'range'>) ['$10load_global.3']
    $14call_function.5 = call $10load_global.3(n, func=$10load_global.3, args=[Var(n, arrayobj.py:2820)], kws=(), vararg=None, target=None) ['$10load_global.3', '$14call_function.5', 'n']
    $16get_iter.6 = getiter(value=$14call_function.5) ['$14call_function.5', '$16get_iter.6']
    $phi18.0 = $16get_iter.6                 ['$16get_iter.6', '$phi18.0']
    jump 18                                  []
label 18:
    $18for_iter.1 = iternext(value=$phi18.0) ['$18for_iter.1', '$phi18.0']
    $18for_iter.2 = pair_first(value=$18for_iter.1) ['$18for_iter.1', '$18for_iter.2']
    $18for_iter.3 = pair_second(value=$18for_iter.1) ['$18for_iter.1', '$18for_iter.3']
    $phi20.1 = $18for_iter.2                 ['$18for_iter.2', '$phi20.1']
    branch $18for_iter.3, 20, 60             ['$18for_iter.3']
label 20:
    i = $phi20.1                             ['$phi20.1', 'i']
    $26binary_subscr.4 = getitem(value=shape, index=i, fn=<built-in function getitem>) ['$26binary_subscr.4', 'i', 'shape']
    $30load_global.6 = global(len: <built-in function len>) ['$30load_global.6']
    $34call_function.8 = call $30load_global.6(main_shape, func=$30load_global.6, args=[Var(main_shape, arrayobj.py:2820)], kws=(), vararg=None, target=None) ['$30load_global.6', '$34call_function.8', 'main_shape']
    $38binary_subtract.10 = $34call_function.8 - n ['$34call_function.8', '$38binary_subtract.10', 'n']
    $42binary_add.12 = $38binary_subtract.10 + i ['$38binary_subtract.10', '$42binary_add.12', 'i']
    $44binary_subscr.13 = getitem(value=main_shape, index=$42binary_add.12, fn=<built-in function getitem>) ['$42binary_add.12', '$44binary_subscr.13', 'main_shape']
    $46compare_op.14 = $26binary_subscr.4 != $44binary_subscr.13 ['$26binary_subscr.4', '$44binary_subscr.13', '$46compare_op.14']
    bool48 = global(bool: <class 'bool'>)    ['bool48']
    $48pred = call bool48($46compare_op.14, func=bool48, args=(Var($46compare_op.14, arrayobj.py:2822),), kws=(), vararg=None, target=None) ['$46compare_op.14', '$48pred', 'bool48']
    branch $48pred, 50, 18                   ['$48pred']
label 50:
    $50load_global.1 = global(ValueError: <class 'ValueError'>) ['$50load_global.1']
    $const52.2 = const(str, nditer(): operands could not be broadcast together) ['$const52.2']
    $54call_function.3 = call $50load_global.1($const52.2, func=$50load_global.1, args=[Var($const52.2, arrayobj.py:2823)], kws=(), vararg=None, target=None) ['$50load_global.1', '$54call_function.3', '$const52.2']
    raise $54call_function.3                 ['$54call_function.3']
label 60:
    $const60.0 = const(NoneType, None)       ['$const60.0']
    $62return_value.1 = cast(value=$const60.0) ['$62return_value.1', '$const60.0']
    return $62return_value.1                 ['$62return_value.1']

DEBUG 2022-02-14 16:38:02,394 ==== SSA block analysis pass on 0
DEBUG 2022-02-14 16:38:02,395 Running <numba.core.ssa._GatherDefsHandler object at 0x7fa04665d550>
DEBUG 2022-02-14 16:38:02,395 on stmt: shape = arg(0, name=shape)
DEBUG 2022-02-14 16:38:02,395 on stmt: main_shape = arg(1, name=main_shape)
DEBUG 2022-02-14 16:38:02,395 on stmt: $2load_global.0 = global(len: <built-in function len>)
DEBUG 2022-02-14 16:38:02,395 on stmt: n = const(int, 1)
DEBUG 2022-02-14 16:38:02,395 on stmt: $10load_global.3 = global(range: <class 'range'>)
DEBUG 2022-02-14 16:38:02,395 on stmt: $14call_function.5 = call $10load_global.3(n, func=$10load_global.3, args=[Var(n, arrayobj.py:2820)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:02,395 on stmt: $16get_iter.6 = getiter(value=$14call_function.5)
DEBUG 2022-02-14 16:38:02,395 on stmt: $phi18.0 = $16get_iter.6
DEBUG 2022-02-14 16:38:02,395 on stmt: jump 18
DEBUG 2022-02-14 16:38:02,395 ==== SSA block analysis pass on 18
DEBUG 2022-02-14 16:38:02,395 Running <numba.core.ssa._GatherDefsHandler object at 0x7fa04665d550>
DEBUG 2022-02-14 16:38:02,395 on stmt: $18for_iter.1 = iternext(value=$phi18.0)
DEBUG 2022-02-14 16:38:02,395 on stmt: $18for_iter.2 = pair_first(value=$18for_iter.1)
DEBUG 2022-02-14 16:38:02,395 on stmt: $18for_iter.3 = pair_second(value=$18for_iter.1)
DEBUG 2022-02-14 16:38:02,395 on stmt: $phi20.1 = $18for_iter.2
DEBUG 2022-02-14 16:38:02,395 on stmt: branch $18for_iter.3, 20, 60
DEBUG 2022-02-14 16:38:02,395 ==== SSA block analysis pass on 20
DEBUG 2022-02-14 16:38:02,395 Running <numba.core.ssa._GatherDefsHandler object at 0x7fa04665d550>
DEBUG 2022-02-14 16:38:02,395 on stmt: i = $phi20.1
DEBUG 2022-02-14 16:38:02,396 on stmt: $26binary_subscr.4 = getitem(value=shape, index=i, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:02,396 on stmt: $30load_global.6 = global(len: <built-in function len>)
DEBUG 2022-02-14 16:38:02,396 on stmt: $34call_function.8 = const(int, 1)
DEBUG 2022-02-14 16:38:02,396 on stmt: $38binary_subtract.10 = $34call_function.8 - n
DEBUG 2022-02-14 16:38:02,396 on stmt: $42binary_add.12 = $38binary_subtract.10 + i
DEBUG 2022-02-14 16:38:02,396 on stmt: $44binary_subscr.13 = getitem(value=main_shape, index=$42binary_add.12, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:02,396 on stmt: $46compare_op.14 = $26binary_subscr.4 != $44binary_subscr.13
DEBUG 2022-02-14 16:38:02,396 on stmt: bool48 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:38:02,396 on stmt: $48pred = call bool48($46compare_op.14, func=bool48, args=(Var($46compare_op.14, arrayobj.py:2822),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:02,396 on stmt: branch $48pred, 50, 18
DEBUG 2022-02-14 16:38:02,396 ==== SSA block analysis pass on 50
DEBUG 2022-02-14 16:38:02,396 Running <numba.core.ssa._GatherDefsHandler object at 0x7fa04665d550>
DEBUG 2022-02-14 16:38:02,396 on stmt: $50load_global.1 = global(ValueError: <class 'ValueError'>)
DEBUG 2022-02-14 16:38:02,396 on stmt: $const52.2 = const(str, nditer(): operands could not be broadcast together)
DEBUG 2022-02-14 16:38:02,396 on stmt: $54call_function.3 = call $50load_global.1($const52.2, func=$50load_global.1, args=[Var($const52.2, arrayobj.py:2823)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:02,396 on stmt: <static> raise <class 'ValueError'>('nditer(): operands could not be broadcast together')
DEBUG 2022-02-14 16:38:02,396 ==== SSA block analysis pass on 60
DEBUG 2022-02-14 16:38:02,396 Running <numba.core.ssa._GatherDefsHandler object at 0x7fa04665d550>
DEBUG 2022-02-14 16:38:02,396 on stmt: $const60.0 = const(NoneType, None)
DEBUG 2022-02-14 16:38:02,396 on stmt: $62return_value.1 = cast(value=$const60.0)
DEBUG 2022-02-14 16:38:02,397 on stmt: return $62return_value.1
DEBUG 2022-02-14 16:38:02,398 defs defaultdict(<class 'list'>,
            {'$10load_global.3': [<numba.core.ir.Assign object at 0x7fa0466638e0>],
             '$14call_function.5': [<numba.core.ir.Assign object at 0x7fa046663be0>],
             '$16get_iter.6': [<numba.core.ir.Assign object at 0x7fa046663d00>],
             '$18for_iter.1': [<numba.core.ir.Assign object at 0x7fa046663f70>],
             '$18for_iter.2': [<numba.core.ir.Assign object at 0x7fa04666c0d0>],
             '$18for_iter.3': [<numba.core.ir.Assign object at 0x7fa04666c1f0>],
             '$26binary_subscr.4': [<numba.core.ir.Assign object at 0x7fa04666c8b0>],
             '$2load_global.0': [<numba.core.ir.Assign object at 0x7fa0466633a0>],
             '$30load_global.6': [<numba.core.ir.Assign object at 0x7fa04666cb20>],
             '$34call_function.8': [<numba.core.ir.Assign object at 0x7fa04666ce20>],
             '$38binary_subtract.10': [<numba.core.ir.Assign object at 0x7fa04666e0d0>],
             '$42binary_add.12': [<numba.core.ir.Assign object at 0x7fa04666e370>],
             '$44binary_subscr.13': [<numba.core.ir.Assign object at 0x7fa04666e4f0>],
             '$46compare_op.14': [<numba.core.ir.Assign object at 0x7fa04666e670>],
             '$48pred': [<numba.core.ir.Assign object at 0x7fa04666e8e0>],
             '$50load_global.1': [<numba.core.ir.Assign object at 0x7fa046663e20>],
             '$54call_function.3': [<numba.core.ir.Assign object at 0x7fa04666eca0>],
             '$62return_value.1': [<numba.core.ir.Assign object at 0x7fa046670100>],
             '$const52.2': [<numba.core.ir.Assign object at 0x7fa04666eac0>],
             '$const60.0': [<numba.core.ir.Assign object at 0x7fa04666ef40>],
             '$phi18.0': [<numba.core.ir.Assign object at 0x7fa0466634c0>],
             '$phi20.1': [<numba.core.ir.Assign object at 0x7fa046663eb0>],
             'bool48': [<numba.core.ir.Assign object at 0x7fa04666e7c0>],
             'i': [<numba.core.ir.Assign object at 0x7fa04666c4c0>],
             'main_shape': [<numba.core.ir.Assign object at 0x7fa046663190>],
             'n': [<numba.core.ir.Assign object at 0x7fa0466636a0>],
             'shape': [<numba.core.ir.Assign object at 0x7fa0466632b0>]})
DEBUG 2022-02-14 16:38:02,398 SSA violators set()
DEBUG 2022-02-14 16:38:02,459 bytecode dump:
>          0	NOP(arg=None, lineno=1064)
           2	LOAD_FAST(arg=0, lineno=1064)
           4	LOAD_ATTR(arg=0, lineno=1064)
           6	STORE_FAST(arg=2, lineno=1064)
           8	LOAD_FAST(arg=0, lineno=1065)
          10	LOAD_ATTR(arg=1, lineno=1065)
          12	STORE_FAST(arg=3, lineno=1065)
          14	LOAD_FAST(arg=1, lineno=1066)
          16	LOAD_ATTR(arg=0, lineno=1066)
          18	STORE_FAST(arg=4, lineno=1066)
          20	LOAD_FAST(arg=1, lineno=1067)
          22	LOAD_ATTR(arg=1, lineno=1067)
          24	STORE_FAST(arg=5, lineno=1067)
          26	LOAD_FAST(arg=4, lineno=1068)
          28	POP_JUMP_IF_TRUE(arg=42, lineno=1068)
          30	LOAD_FAST(arg=5, lineno=1068)
          32	POP_JUMP_IF_TRUE(arg=42, lineno=1068)
          34	LOAD_GLOBAL(arg=2, lineno=1069)
          36	LOAD_CONST(arg=1, lineno=1069)
          38	CALL_FUNCTION(arg=1, lineno=1069)
          40	RAISE_VARARGS(arg=1, lineno=1069)
>         42	LOAD_GLOBAL(arg=3, lineno=1070)
          44	LOAD_FAST(arg=4, lineno=1070)
          46	CALL_FUNCTION(arg=1, lineno=1070)
          48	LOAD_GLOBAL(arg=3, lineno=1070)
          50	LOAD_FAST(arg=5, lineno=1070)
          52	CALL_FUNCTION(arg=1, lineno=1070)
          54	COMPARE_OP(arg=5, lineno=1070)
          56	POP_JUMP_IF_FALSE(arg=126, lineno=1070)
          58	LOAD_FAST(arg=4, lineno=1072)
          60	POP_JUMP_IF_TRUE(arg=72, lineno=1072)
          62	LOAD_GLOBAL(arg=4, lineno=1073)
          64	LOAD_GLOBAL(arg=5, lineno=1073)
          66	LOAD_GLOBAL(arg=5, lineno=1073)
          68	CALL_FUNCTION(arg=2, lineno=1073)
          70	RETURN_VALUE(arg=None, lineno=1073)
>         72	LOAD_FAST(arg=5, lineno=1074)
          74	LOAD_FAST(arg=4, lineno=1074)
          76	BINARY_TRUE_DIVIDE(arg=None, lineno=1074)
          78	STORE_FAST(arg=6, lineno=1074)
          80	LOAD_FAST(arg=4, lineno=1075)
          82	LOAD_FAST(arg=5, lineno=1075)
          84	LOAD_FAST(arg=6, lineno=1075)
          86	BINARY_MULTIPLY(arg=None, lineno=1075)
          88	BINARY_ADD(arg=None, lineno=1075)
          90	STORE_FAST(arg=7, lineno=1075)
          92	LOAD_GLOBAL(arg=4, lineno=1076)
          94	LOAD_FAST(arg=2, lineno=1077)
          96	LOAD_FAST(arg=3, lineno=1077)
          98	LOAD_FAST(arg=6, lineno=1077)
         100	BINARY_MULTIPLY(arg=None, lineno=1077)
         102	BINARY_ADD(arg=None, lineno=1077)
         104	LOAD_FAST(arg=7, lineno=1077)
         106	BINARY_TRUE_DIVIDE(arg=None, lineno=1077)
         108	LOAD_FAST(arg=3, lineno=1078)
         110	LOAD_FAST(arg=2, lineno=1078)
         112	LOAD_FAST(arg=6, lineno=1078)
         114	BINARY_MULTIPLY(arg=None, lineno=1078)
         116	BINARY_SUBTRACT(arg=None, lineno=1078)
         118	LOAD_FAST(arg=7, lineno=1078)
         120	BINARY_TRUE_DIVIDE(arg=None, lineno=1078)
         122	CALL_FUNCTION(arg=2, lineno=1076)
         124	RETURN_VALUE(arg=None, lineno=1076)
>        126	LOAD_FAST(arg=5, lineno=1081)
         128	POP_JUMP_IF_TRUE(arg=140, lineno=1081)
         130	LOAD_GLOBAL(arg=4, lineno=1082)
         132	LOAD_GLOBAL(arg=5, lineno=1082)
         134	LOAD_GLOBAL(arg=5, lineno=1082)
         136	CALL_FUNCTION(arg=2, lineno=1082)
         138	RETURN_VALUE(arg=None, lineno=1082)
>        140	LOAD_FAST(arg=4, lineno=1083)
         142	LOAD_FAST(arg=5, lineno=1083)
         144	BINARY_TRUE_DIVIDE(arg=None, lineno=1083)
         146	STORE_FAST(arg=6, lineno=1083)
         148	LOAD_FAST(arg=4, lineno=1084)
         150	LOAD_FAST(arg=6, lineno=1084)
         152	BINARY_MULTIPLY(arg=None, lineno=1084)
         154	LOAD_FAST(arg=5, lineno=1084)
         156	BINARY_ADD(arg=None, lineno=1084)
         158	STORE_FAST(arg=7, lineno=1084)
         160	LOAD_GLOBAL(arg=4, lineno=1085)
         162	LOAD_FAST(arg=0, lineno=1086)
         164	LOAD_ATTR(arg=0, lineno=1086)
         166	LOAD_FAST(arg=6, lineno=1086)
         168	BINARY_MULTIPLY(arg=None, lineno=1086)
         170	LOAD_FAST(arg=0, lineno=1086)
         172	LOAD_ATTR(arg=1, lineno=1086)
         174	BINARY_ADD(arg=None, lineno=1086)
         176	LOAD_FAST(arg=7, lineno=1086)
         178	BINARY_TRUE_DIVIDE(arg=None, lineno=1086)
         180	LOAD_FAST(arg=0, lineno=1087)
         182	LOAD_ATTR(arg=1, lineno=1087)
         184	LOAD_FAST(arg=6, lineno=1087)
         186	BINARY_MULTIPLY(arg=None, lineno=1087)
         188	LOAD_FAST(arg=0, lineno=1087)
         190	LOAD_ATTR(arg=0, lineno=1087)
         192	BINARY_SUBTRACT(arg=None, lineno=1087)
         194	LOAD_FAST(arg=7, lineno=1087)
         196	BINARY_TRUE_DIVIDE(arg=None, lineno=1087)
         198	CALL_FUNCTION(arg=2, lineno=1085)
         200	RETURN_VALUE(arg=None, lineno=1085)
         202	LOAD_CONST(arg=0, lineno=1085)
         204	RETURN_VALUE(arg=None, lineno=1085)
DEBUG 2022-02-14 16:38:02,459 pending: deque([State(pc_initial=0 nstack_initial=0)])
DEBUG 2022-02-14 16:38:02,459 stack: []
DEBUG 2022-02-14 16:38:02,459 dispatch pc=0, inst=NOP(arg=None, lineno=1064)
DEBUG 2022-02-14 16:38:02,459 stack []
DEBUG 2022-02-14 16:38:02,459 dispatch pc=2, inst=LOAD_FAST(arg=0, lineno=1064)
DEBUG 2022-02-14 16:38:02,459 stack []
DEBUG 2022-02-14 16:38:02,459 dispatch pc=4, inst=LOAD_ATTR(arg=0, lineno=1064)
DEBUG 2022-02-14 16:38:02,459 stack ['$a2.0']
DEBUG 2022-02-14 16:38:02,459 dispatch pc=6, inst=STORE_FAST(arg=2, lineno=1064)
DEBUG 2022-02-14 16:38:02,460 stack ['$4load_attr.1']
DEBUG 2022-02-14 16:38:02,460 dispatch pc=8, inst=LOAD_FAST(arg=0, lineno=1065)
DEBUG 2022-02-14 16:38:02,460 stack []
DEBUG 2022-02-14 16:38:02,460 dispatch pc=10, inst=LOAD_ATTR(arg=1, lineno=1065)
DEBUG 2022-02-14 16:38:02,460 stack ['$a8.2']
DEBUG 2022-02-14 16:38:02,460 dispatch pc=12, inst=STORE_FAST(arg=3, lineno=1065)
DEBUG 2022-02-14 16:38:02,460 stack ['$10load_attr.3']
DEBUG 2022-02-14 16:38:02,460 dispatch pc=14, inst=LOAD_FAST(arg=1, lineno=1066)
DEBUG 2022-02-14 16:38:02,460 stack []
DEBUG 2022-02-14 16:38:02,460 dispatch pc=16, inst=LOAD_ATTR(arg=0, lineno=1066)
DEBUG 2022-02-14 16:38:02,460 stack ['$b14.4']
DEBUG 2022-02-14 16:38:02,460 dispatch pc=18, inst=STORE_FAST(arg=4, lineno=1066)
DEBUG 2022-02-14 16:38:02,460 stack ['$16load_attr.5']
DEBUG 2022-02-14 16:38:02,460 dispatch pc=20, inst=LOAD_FAST(arg=1, lineno=1067)
DEBUG 2022-02-14 16:38:02,460 stack []
DEBUG 2022-02-14 16:38:02,460 dispatch pc=22, inst=LOAD_ATTR(arg=1, lineno=1067)
DEBUG 2022-02-14 16:38:02,460 stack ['$b20.6']
DEBUG 2022-02-14 16:38:02,460 dispatch pc=24, inst=STORE_FAST(arg=5, lineno=1067)
DEBUG 2022-02-14 16:38:02,460 stack ['$22load_attr.7']
DEBUG 2022-02-14 16:38:02,460 dispatch pc=26, inst=LOAD_FAST(arg=4, lineno=1068)
DEBUG 2022-02-14 16:38:02,461 stack []
DEBUG 2022-02-14 16:38:02,461 dispatch pc=28, inst=POP_JUMP_IF_TRUE(arg=42, lineno=1068)
DEBUG 2022-02-14 16:38:02,461 stack ['$breal26.8']
DEBUG 2022-02-14 16:38:02,461 end state. edges=[Edge(pc=30, stack=(), blockstack=(), npush=0), Edge(pc=42, stack=(), blockstack=(), npush=0)]
DEBUG 2022-02-14 16:38:02,461 pending: deque([State(pc_initial=30 nstack_initial=0), State(pc_initial=42 nstack_initial=0)])
DEBUG 2022-02-14 16:38:02,461 stack: []
DEBUG 2022-02-14 16:38:02,461 dispatch pc=30, inst=LOAD_FAST(arg=5, lineno=1068)
DEBUG 2022-02-14 16:38:02,461 stack []
DEBUG 2022-02-14 16:38:02,461 dispatch pc=32, inst=POP_JUMP_IF_TRUE(arg=42, lineno=1068)
DEBUG 2022-02-14 16:38:02,461 stack ['$bimag30.0']
DEBUG 2022-02-14 16:38:02,461 end state. edges=[Edge(pc=34, stack=(), blockstack=(), npush=0), Edge(pc=42, stack=(), blockstack=(), npush=0)]
DEBUG 2022-02-14 16:38:02,461 pending: deque([State(pc_initial=42 nstack_initial=0), State(pc_initial=34 nstack_initial=0), State(pc_initial=42 nstack_initial=0)])
DEBUG 2022-02-14 16:38:02,461 stack: []
DEBUG 2022-02-14 16:38:02,461 dispatch pc=42, inst=LOAD_GLOBAL(arg=3, lineno=1070)
DEBUG 2022-02-14 16:38:02,461 stack []
DEBUG 2022-02-14 16:38:02,461 dispatch pc=44, inst=LOAD_FAST(arg=4, lineno=1070)
DEBUG 2022-02-14 16:38:02,461 stack ['$42load_global.0']
DEBUG 2022-02-14 16:38:02,461 dispatch pc=46, inst=CALL_FUNCTION(arg=1, lineno=1070)
DEBUG 2022-02-14 16:38:02,461 stack ['$42load_global.0', '$breal44.1']
DEBUG 2022-02-14 16:38:02,461 dispatch pc=48, inst=LOAD_GLOBAL(arg=3, lineno=1070)
DEBUG 2022-02-14 16:38:02,462 stack ['$46call_function.2']
DEBUG 2022-02-14 16:38:02,462 dispatch pc=50, inst=LOAD_FAST(arg=5, lineno=1070)
DEBUG 2022-02-14 16:38:02,462 stack ['$46call_function.2', '$48load_global.3']
DEBUG 2022-02-14 16:38:02,462 dispatch pc=52, inst=CALL_FUNCTION(arg=1, lineno=1070)
DEBUG 2022-02-14 16:38:02,462 stack ['$46call_function.2', '$48load_global.3', '$bimag50.4']
DEBUG 2022-02-14 16:38:02,462 dispatch pc=54, inst=COMPARE_OP(arg=5, lineno=1070)
DEBUG 2022-02-14 16:38:02,462 stack ['$46call_function.2', '$52call_function.5']
DEBUG 2022-02-14 16:38:02,462 dispatch pc=56, inst=POP_JUMP_IF_FALSE(arg=126, lineno=1070)
DEBUG 2022-02-14 16:38:02,462 stack ['$54compare_op.6']
DEBUG 2022-02-14 16:38:02,462 end state. edges=[Edge(pc=58, stack=(), blockstack=(), npush=0), Edge(pc=126, stack=(), blockstack=(), npush=0)]
DEBUG 2022-02-14 16:38:02,462 pending: deque([State(pc_initial=34 nstack_initial=0), State(pc_initial=42 nstack_initial=0), State(pc_initial=58 nstack_initial=0), State(pc_initial=126 nstack_initial=0)])
DEBUG 2022-02-14 16:38:02,462 stack: []
DEBUG 2022-02-14 16:38:02,462 dispatch pc=34, inst=LOAD_GLOBAL(arg=2, lineno=1069)
DEBUG 2022-02-14 16:38:02,462 stack []
DEBUG 2022-02-14 16:38:02,462 dispatch pc=36, inst=LOAD_CONST(arg=1, lineno=1069)
DEBUG 2022-02-14 16:38:02,462 stack ['$34load_global.0']
DEBUG 2022-02-14 16:38:02,462 dispatch pc=38, inst=CALL_FUNCTION(arg=1, lineno=1069)
DEBUG 2022-02-14 16:38:02,462 stack ['$34load_global.0', '$const36.1']
DEBUG 2022-02-14 16:38:02,462 dispatch pc=40, inst=RAISE_VARARGS(arg=1, lineno=1069)
DEBUG 2022-02-14 16:38:02,462 stack ['$38call_function.2']
DEBUG 2022-02-14 16:38:02,463 end state. edges=[]
DEBUG 2022-02-14 16:38:02,463 pending: deque([State(pc_initial=42 nstack_initial=0), State(pc_initial=58 nstack_initial=0), State(pc_initial=126 nstack_initial=0)])
DEBUG 2022-02-14 16:38:02,463 pending: deque([State(pc_initial=58 nstack_initial=0), State(pc_initial=126 nstack_initial=0)])
DEBUG 2022-02-14 16:38:02,463 stack: []
DEBUG 2022-02-14 16:38:02,463 dispatch pc=58, inst=LOAD_FAST(arg=4, lineno=1072)
DEBUG 2022-02-14 16:38:02,463 stack []
DEBUG 2022-02-14 16:38:02,463 dispatch pc=60, inst=POP_JUMP_IF_TRUE(arg=72, lineno=1072)
DEBUG 2022-02-14 16:38:02,463 stack ['$breal58.0']
DEBUG 2022-02-14 16:38:02,463 end state. edges=[Edge(pc=62, stack=(), blockstack=(), npush=0), Edge(pc=72, stack=(), blockstack=(), npush=0)]
DEBUG 2022-02-14 16:38:02,463 pending: deque([State(pc_initial=126 nstack_initial=0), State(pc_initial=62 nstack_initial=0), State(pc_initial=72 nstack_initial=0)])
DEBUG 2022-02-14 16:38:02,463 stack: []
DEBUG 2022-02-14 16:38:02,463 dispatch pc=126, inst=LOAD_FAST(arg=5, lineno=1081)
DEBUG 2022-02-14 16:38:02,463 stack []
DEBUG 2022-02-14 16:38:02,463 dispatch pc=128, inst=POP_JUMP_IF_TRUE(arg=140, lineno=1081)
DEBUG 2022-02-14 16:38:02,463 stack ['$bimag126.0']
DEBUG 2022-02-14 16:38:02,463 end state. edges=[Edge(pc=130, stack=(), blockstack=(), npush=0), Edge(pc=140, stack=(), blockstack=(), npush=0)]
DEBUG 2022-02-14 16:38:02,463 pending: deque([State(pc_initial=62 nstack_initial=0), State(pc_initial=72 nstack_initial=0), State(pc_initial=130 nstack_initial=0), State(pc_initial=140 nstack_initial=0)])
DEBUG 2022-02-14 16:38:02,463 stack: []
DEBUG 2022-02-14 16:38:02,463 dispatch pc=62, inst=LOAD_GLOBAL(arg=4, lineno=1073)
DEBUG 2022-02-14 16:38:02,463 stack []
DEBUG 2022-02-14 16:38:02,463 dispatch pc=64, inst=LOAD_GLOBAL(arg=5, lineno=1073)
DEBUG 2022-02-14 16:38:02,464 stack ['$62load_global.0']
DEBUG 2022-02-14 16:38:02,464 dispatch pc=66, inst=LOAD_GLOBAL(arg=5, lineno=1073)
DEBUG 2022-02-14 16:38:02,464 stack ['$62load_global.0', '$64load_global.1']
DEBUG 2022-02-14 16:38:02,464 dispatch pc=68, inst=CALL_FUNCTION(arg=2, lineno=1073)
DEBUG 2022-02-14 16:38:02,464 stack ['$62load_global.0', '$64load_global.1', '$66load_global.2']
DEBUG 2022-02-14 16:38:02,464 dispatch pc=70, inst=RETURN_VALUE(arg=None, lineno=1073)
DEBUG 2022-02-14 16:38:02,464 stack ['$68call_function.3']
DEBUG 2022-02-14 16:38:02,464 end state. edges=[]
DEBUG 2022-02-14 16:38:02,464 pending: deque([State(pc_initial=72 nstack_initial=0), State(pc_initial=130 nstack_initial=0), State(pc_initial=140 nstack_initial=0)])
DEBUG 2022-02-14 16:38:02,464 stack: []
DEBUG 2022-02-14 16:38:02,464 dispatch pc=72, inst=LOAD_FAST(arg=5, lineno=1074)
DEBUG 2022-02-14 16:38:02,464 stack []
DEBUG 2022-02-14 16:38:02,464 dispatch pc=74, inst=LOAD_FAST(arg=4, lineno=1074)
DEBUG 2022-02-14 16:38:02,464 stack ['$bimag72.0']
DEBUG 2022-02-14 16:38:02,464 dispatch pc=76, inst=BINARY_TRUE_DIVIDE(arg=None, lineno=1074)
DEBUG 2022-02-14 16:38:02,464 stack ['$bimag72.0', '$breal74.1']
DEBUG 2022-02-14 16:38:02,464 dispatch pc=78, inst=STORE_FAST(arg=6, lineno=1074)
DEBUG 2022-02-14 16:38:02,464 stack ['$76binary_true_divide.2']
DEBUG 2022-02-14 16:38:02,464 dispatch pc=80, inst=LOAD_FAST(arg=4, lineno=1075)
DEBUG 2022-02-14 16:38:02,464 stack []
DEBUG 2022-02-14 16:38:02,464 dispatch pc=82, inst=LOAD_FAST(arg=5, lineno=1075)
DEBUG 2022-02-14 16:38:02,465 stack ['$breal80.3']
DEBUG 2022-02-14 16:38:02,465 dispatch pc=84, inst=LOAD_FAST(arg=6, lineno=1075)
DEBUG 2022-02-14 16:38:02,465 stack ['$breal80.3', '$bimag82.4']
DEBUG 2022-02-14 16:38:02,465 dispatch pc=86, inst=BINARY_MULTIPLY(arg=None, lineno=1075)
DEBUG 2022-02-14 16:38:02,465 stack ['$breal80.3', '$bimag82.4', '$ratio84.5']
DEBUG 2022-02-14 16:38:02,465 dispatch pc=88, inst=BINARY_ADD(arg=None, lineno=1075)
DEBUG 2022-02-14 16:38:02,465 stack ['$breal80.3', '$86binary_multiply.6']
DEBUG 2022-02-14 16:38:02,465 dispatch pc=90, inst=STORE_FAST(arg=7, lineno=1075)
DEBUG 2022-02-14 16:38:02,465 stack ['$88binary_add.7']
DEBUG 2022-02-14 16:38:02,465 dispatch pc=92, inst=LOAD_GLOBAL(arg=4, lineno=1076)
DEBUG 2022-02-14 16:38:02,465 stack []
DEBUG 2022-02-14 16:38:02,465 dispatch pc=94, inst=LOAD_FAST(arg=2, lineno=1077)
DEBUG 2022-02-14 16:38:02,465 stack ['$92load_global.8']
DEBUG 2022-02-14 16:38:02,465 dispatch pc=96, inst=LOAD_FAST(arg=3, lineno=1077)
DEBUG 2022-02-14 16:38:02,465 stack ['$92load_global.8', '$areal94.9']
DEBUG 2022-02-14 16:38:02,465 dispatch pc=98, inst=LOAD_FAST(arg=6, lineno=1077)
DEBUG 2022-02-14 16:38:02,465 stack ['$92load_global.8', '$areal94.9', '$aimag96.10']
DEBUG 2022-02-14 16:38:02,465 dispatch pc=100, inst=BINARY_MULTIPLY(arg=None, lineno=1077)
DEBUG 2022-02-14 16:38:02,465 stack ['$92load_global.8', '$areal94.9', '$aimag96.10', '$ratio98.11']
DEBUG 2022-02-14 16:38:02,465 dispatch pc=102, inst=BINARY_ADD(arg=None, lineno=1077)
DEBUG 2022-02-14 16:38:02,465 stack ['$92load_global.8', '$areal94.9', '$100binary_multiply.12']
DEBUG 2022-02-14 16:38:02,466 dispatch pc=104, inst=LOAD_FAST(arg=7, lineno=1077)
DEBUG 2022-02-14 16:38:02,466 stack ['$92load_global.8', '$102binary_add.13']
DEBUG 2022-02-14 16:38:02,466 dispatch pc=106, inst=BINARY_TRUE_DIVIDE(arg=None, lineno=1077)
DEBUG 2022-02-14 16:38:02,466 stack ['$92load_global.8', '$102binary_add.13', '$denom104.14']
DEBUG 2022-02-14 16:38:02,466 dispatch pc=108, inst=LOAD_FAST(arg=3, lineno=1078)
DEBUG 2022-02-14 16:38:02,466 stack ['$92load_global.8', '$106binary_true_divide.15']
DEBUG 2022-02-14 16:38:02,466 dispatch pc=110, inst=LOAD_FAST(arg=2, lineno=1078)
DEBUG 2022-02-14 16:38:02,466 stack ['$92load_global.8', '$106binary_true_divide.15', '$aimag108.16']
DEBUG 2022-02-14 16:38:02,466 dispatch pc=112, inst=LOAD_FAST(arg=6, lineno=1078)
DEBUG 2022-02-14 16:38:02,466 stack ['$92load_global.8', '$106binary_true_divide.15', '$aimag108.16', '$areal110.17']
DEBUG 2022-02-14 16:38:02,466 dispatch pc=114, inst=BINARY_MULTIPLY(arg=None, lineno=1078)
DEBUG 2022-02-14 16:38:02,466 stack ['$92load_global.8', '$106binary_true_divide.15', '$aimag108.16', '$areal110.17', '$ratio112.18']
DEBUG 2022-02-14 16:38:02,466 dispatch pc=116, inst=BINARY_SUBTRACT(arg=None, lineno=1078)
DEBUG 2022-02-14 16:38:02,466 stack ['$92load_global.8', '$106binary_true_divide.15', '$aimag108.16', '$114binary_multiply.19']
DEBUG 2022-02-14 16:38:02,466 dispatch pc=118, inst=LOAD_FAST(arg=7, lineno=1078)
DEBUG 2022-02-14 16:38:02,466 stack ['$92load_global.8', '$106binary_true_divide.15', '$116binary_subtract.20']
DEBUG 2022-02-14 16:38:02,466 dispatch pc=120, inst=BINARY_TRUE_DIVIDE(arg=None, lineno=1078)
DEBUG 2022-02-14 16:38:02,466 stack ['$92load_global.8', '$106binary_true_divide.15', '$116binary_subtract.20', '$denom118.21']
DEBUG 2022-02-14 16:38:02,466 dispatch pc=122, inst=CALL_FUNCTION(arg=2, lineno=1076)
DEBUG 2022-02-14 16:38:02,466 stack ['$92load_global.8', '$106binary_true_divide.15', '$120binary_true_divide.22']
DEBUG 2022-02-14 16:38:02,466 dispatch pc=124, inst=RETURN_VALUE(arg=None, lineno=1076)
DEBUG 2022-02-14 16:38:02,467 stack ['$122call_function.23']
DEBUG 2022-02-14 16:38:02,467 end state. edges=[]
DEBUG 2022-02-14 16:38:02,467 pending: deque([State(pc_initial=130 nstack_initial=0), State(pc_initial=140 nstack_initial=0)])
DEBUG 2022-02-14 16:38:02,467 stack: []
DEBUG 2022-02-14 16:38:02,467 dispatch pc=130, inst=LOAD_GLOBAL(arg=4, lineno=1082)
DEBUG 2022-02-14 16:38:02,467 stack []
DEBUG 2022-02-14 16:38:02,467 dispatch pc=132, inst=LOAD_GLOBAL(arg=5, lineno=1082)
DEBUG 2022-02-14 16:38:02,467 stack ['$130load_global.0']
DEBUG 2022-02-14 16:38:02,467 dispatch pc=134, inst=LOAD_GLOBAL(arg=5, lineno=1082)
DEBUG 2022-02-14 16:38:02,467 stack ['$130load_global.0', '$132load_global.1']
DEBUG 2022-02-14 16:38:02,467 dispatch pc=136, inst=CALL_FUNCTION(arg=2, lineno=1082)
DEBUG 2022-02-14 16:38:02,467 stack ['$130load_global.0', '$132load_global.1', '$134load_global.2']
DEBUG 2022-02-14 16:38:02,467 dispatch pc=138, inst=RETURN_VALUE(arg=None, lineno=1082)
DEBUG 2022-02-14 16:38:02,467 stack ['$136call_function.3']
DEBUG 2022-02-14 16:38:02,467 end state. edges=[]
DEBUG 2022-02-14 16:38:02,467 pending: deque([State(pc_initial=140 nstack_initial=0)])
DEBUG 2022-02-14 16:38:02,467 stack: []
DEBUG 2022-02-14 16:38:02,467 dispatch pc=140, inst=LOAD_FAST(arg=4, lineno=1083)
DEBUG 2022-02-14 16:38:02,467 stack []
DEBUG 2022-02-14 16:38:02,467 dispatch pc=142, inst=LOAD_FAST(arg=5, lineno=1083)
DEBUG 2022-02-14 16:38:02,467 stack ['$breal140.0']
DEBUG 2022-02-14 16:38:02,467 dispatch pc=144, inst=BINARY_TRUE_DIVIDE(arg=None, lineno=1083)
DEBUG 2022-02-14 16:38:02,468 stack ['$breal140.0', '$bimag142.1']
DEBUG 2022-02-14 16:38:02,468 dispatch pc=146, inst=STORE_FAST(arg=6, lineno=1083)
DEBUG 2022-02-14 16:38:02,468 stack ['$144binary_true_divide.2']
DEBUG 2022-02-14 16:38:02,468 dispatch pc=148, inst=LOAD_FAST(arg=4, lineno=1084)
DEBUG 2022-02-14 16:38:02,468 stack []
DEBUG 2022-02-14 16:38:02,468 dispatch pc=150, inst=LOAD_FAST(arg=6, lineno=1084)
DEBUG 2022-02-14 16:38:02,468 stack ['$breal148.3']
DEBUG 2022-02-14 16:38:02,468 dispatch pc=152, inst=BINARY_MULTIPLY(arg=None, lineno=1084)
DEBUG 2022-02-14 16:38:02,468 stack ['$breal148.3', '$ratio150.4']
DEBUG 2022-02-14 16:38:02,468 dispatch pc=154, inst=LOAD_FAST(arg=5, lineno=1084)
DEBUG 2022-02-14 16:38:02,468 stack ['$152binary_multiply.5']
DEBUG 2022-02-14 16:38:02,468 dispatch pc=156, inst=BINARY_ADD(arg=None, lineno=1084)
DEBUG 2022-02-14 16:38:02,468 stack ['$152binary_multiply.5', '$bimag154.6']
DEBUG 2022-02-14 16:38:02,468 dispatch pc=158, inst=STORE_FAST(arg=7, lineno=1084)
DEBUG 2022-02-14 16:38:02,468 stack ['$156binary_add.7']
DEBUG 2022-02-14 16:38:02,468 dispatch pc=160, inst=LOAD_GLOBAL(arg=4, lineno=1085)
DEBUG 2022-02-14 16:38:02,468 stack []
DEBUG 2022-02-14 16:38:02,468 dispatch pc=162, inst=LOAD_FAST(arg=0, lineno=1086)
DEBUG 2022-02-14 16:38:02,468 stack ['$160load_global.8']
DEBUG 2022-02-14 16:38:02,468 dispatch pc=164, inst=LOAD_ATTR(arg=0, lineno=1086)
DEBUG 2022-02-14 16:38:02,468 stack ['$160load_global.8', '$a162.9']
DEBUG 2022-02-14 16:38:02,469 dispatch pc=166, inst=LOAD_FAST(arg=6, lineno=1086)
DEBUG 2022-02-14 16:38:02,469 stack ['$160load_global.8', '$164load_attr.10']
DEBUG 2022-02-14 16:38:02,469 dispatch pc=168, inst=BINARY_MULTIPLY(arg=None, lineno=1086)
DEBUG 2022-02-14 16:38:02,469 stack ['$160load_global.8', '$164load_attr.10', '$ratio166.11']
DEBUG 2022-02-14 16:38:02,469 dispatch pc=170, inst=LOAD_FAST(arg=0, lineno=1086)
DEBUG 2022-02-14 16:38:02,469 stack ['$160load_global.8', '$168binary_multiply.12']
DEBUG 2022-02-14 16:38:02,469 dispatch pc=172, inst=LOAD_ATTR(arg=1, lineno=1086)
DEBUG 2022-02-14 16:38:02,469 stack ['$160load_global.8', '$168binary_multiply.12', '$a170.13']
DEBUG 2022-02-14 16:38:02,469 dispatch pc=174, inst=BINARY_ADD(arg=None, lineno=1086)
DEBUG 2022-02-14 16:38:02,469 stack ['$160load_global.8', '$168binary_multiply.12', '$172load_attr.14']
DEBUG 2022-02-14 16:38:02,469 dispatch pc=176, inst=LOAD_FAST(arg=7, lineno=1086)
DEBUG 2022-02-14 16:38:02,469 stack ['$160load_global.8', '$174binary_add.15']
DEBUG 2022-02-14 16:38:02,469 dispatch pc=178, inst=BINARY_TRUE_DIVIDE(arg=None, lineno=1086)
DEBUG 2022-02-14 16:38:02,469 stack ['$160load_global.8', '$174binary_add.15', '$denom176.16']
DEBUG 2022-02-14 16:38:02,469 dispatch pc=180, inst=LOAD_FAST(arg=0, lineno=1087)
DEBUG 2022-02-14 16:38:02,469 stack ['$160load_global.8', '$178binary_true_divide.17']
DEBUG 2022-02-14 16:38:02,469 dispatch pc=182, inst=LOAD_ATTR(arg=1, lineno=1087)
DEBUG 2022-02-14 16:38:02,469 stack ['$160load_global.8', '$178binary_true_divide.17', '$a180.18']
DEBUG 2022-02-14 16:38:02,469 dispatch pc=184, inst=LOAD_FAST(arg=6, lineno=1087)
DEBUG 2022-02-14 16:38:02,469 stack ['$160load_global.8', '$178binary_true_divide.17', '$182load_attr.19']
DEBUG 2022-02-14 16:38:02,469 dispatch pc=186, inst=BINARY_MULTIPLY(arg=None, lineno=1087)
DEBUG 2022-02-14 16:38:02,470 stack ['$160load_global.8', '$178binary_true_divide.17', '$182load_attr.19', '$ratio184.20']
DEBUG 2022-02-14 16:38:02,470 dispatch pc=188, inst=LOAD_FAST(arg=0, lineno=1087)
DEBUG 2022-02-14 16:38:02,470 stack ['$160load_global.8', '$178binary_true_divide.17', '$186binary_multiply.21']
DEBUG 2022-02-14 16:38:02,470 dispatch pc=190, inst=LOAD_ATTR(arg=0, lineno=1087)
DEBUG 2022-02-14 16:38:02,470 stack ['$160load_global.8', '$178binary_true_divide.17', '$186binary_multiply.21', '$a188.22']
DEBUG 2022-02-14 16:38:02,470 dispatch pc=192, inst=BINARY_SUBTRACT(arg=None, lineno=1087)
DEBUG 2022-02-14 16:38:02,470 stack ['$160load_global.8', '$178binary_true_divide.17', '$186binary_multiply.21', '$190load_attr.23']
DEBUG 2022-02-14 16:38:02,470 dispatch pc=194, inst=LOAD_FAST(arg=7, lineno=1087)
DEBUG 2022-02-14 16:38:02,470 stack ['$160load_global.8', '$178binary_true_divide.17', '$192binary_subtract.24']
DEBUG 2022-02-14 16:38:02,470 dispatch pc=196, inst=BINARY_TRUE_DIVIDE(arg=None, lineno=1087)
DEBUG 2022-02-14 16:38:02,470 stack ['$160load_global.8', '$178binary_true_divide.17', '$192binary_subtract.24', '$denom194.25']
DEBUG 2022-02-14 16:38:02,470 dispatch pc=198, inst=CALL_FUNCTION(arg=2, lineno=1085)
DEBUG 2022-02-14 16:38:02,470 stack ['$160load_global.8', '$178binary_true_divide.17', '$196binary_true_divide.26']
DEBUG 2022-02-14 16:38:02,470 dispatch pc=200, inst=RETURN_VALUE(arg=None, lineno=1085)
DEBUG 2022-02-14 16:38:02,470 stack ['$198call_function.27']
DEBUG 2022-02-14 16:38:02,470 end state. edges=[]
DEBUG 2022-02-14 16:38:02,470 -------------------------Prune PHIs-------------------------
DEBUG 2022-02-14 16:38:02,470 Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=30 nstack_initial=0): set(),
             State(pc_initial=34 nstack_initial=0): set(),
             State(pc_initial=42 nstack_initial=0): set(),
             State(pc_initial=58 nstack_initial=0): set(),
             State(pc_initial=62 nstack_initial=0): set(),
             State(pc_initial=72 nstack_initial=0): set(),
             State(pc_initial=126 nstack_initial=0): set(),
             State(pc_initial=130 nstack_initial=0): set(),
             State(pc_initial=140 nstack_initial=0): set()})
DEBUG 2022-02-14 16:38:02,471 defmap: {}
DEBUG 2022-02-14 16:38:02,471 phismap: defaultdict(<class 'set'>, {})
DEBUG 2022-02-14 16:38:02,471 changing phismap: defaultdict(<class 'set'>, {})
DEBUG 2022-02-14 16:38:02,471 keep phismap: {}
DEBUG 2022-02-14 16:38:02,471 new_out: defaultdict(<class 'dict'>, {})
DEBUG 2022-02-14 16:38:02,471 ----------------------DONE Prune PHIs-----------------------
DEBUG 2022-02-14 16:38:02,471 block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$a2.0'}), (4, {'item': '$a2.0', 'res': '$4load_attr.1'}), (6, {'value': '$4load_attr.1'}), (8, {'res': '$a8.2'}), (10, {'item': '$a8.2', 'res': '$10load_attr.3'}), (12, {'value': '$10load_attr.3'}), (14, {'res': '$b14.4'}), (16, {'item': '$b14.4', 'res': '$16load_attr.5'}), (18, {'value': '$16load_attr.5'}), (20, {'res': '$b20.6'}), (22, {'item': '$b20.6', 'res': '$22load_attr.7'}), (24, {'value': '$22load_attr.7'}), (26, {'res': '$breal26.8'}), (28, {'pred': '$breal26.8'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={30: (), 42: ()})
DEBUG 2022-02-14 16:38:02,471 block_infos State(pc_initial=30 nstack_initial=0):
AdaptBlockInfo(insts=((30, {'res': '$bimag30.0'}), (32, {'pred': '$bimag30.0'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={34: (), 42: ()})
DEBUG 2022-02-14 16:38:02,471 block_infos State(pc_initial=34 nstack_initial=0):
AdaptBlockInfo(insts=((34, {'res': '$34load_global.0'}), (36, {'res': '$const36.1'}), (38, {'func': '$34load_global.0', 'args': ['$const36.1'], 'res': '$38call_function.2'}), (40, {'exc': '$38call_function.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG 2022-02-14 16:38:02,471 block_infos State(pc_initial=42 nstack_initial=0):
AdaptBlockInfo(insts=((42, {'res': '$42load_global.0'}), (44, {'res': '$breal44.1'}), (46, {'func': '$42load_global.0', 'args': ['$breal44.1'], 'res': '$46call_function.2'}), (48, {'res': '$48load_global.3'}), (50, {'res': '$bimag50.4'}), (52, {'func': '$48load_global.3', 'args': ['$bimag50.4'], 'res': '$52call_function.5'}), (54, {'lhs': '$46call_function.2', 'rhs': '$52call_function.5', 'res': '$54compare_op.6'}), (56, {'pred': '$54compare_op.6'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={58: (), 126: ()})
DEBUG 2022-02-14 16:38:02,472 block_infos State(pc_initial=58 nstack_initial=0):
AdaptBlockInfo(insts=((58, {'res': '$breal58.0'}), (60, {'pred': '$breal58.0'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={62: (), 72: ()})
DEBUG 2022-02-14 16:38:02,472 block_infos State(pc_initial=62 nstack_initial=0):
AdaptBlockInfo(insts=((62, {'res': '$62load_global.0'}), (64, {'res': '$64load_global.1'}), (66, {'res': '$66load_global.2'}), (68, {'func': '$62load_global.0', 'args': ['$64load_global.1', '$66load_global.2'], 'res': '$68call_function.3'}), (70, {'retval': '$68call_function.3', 'castval': '$70return_value.4'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG 2022-02-14 16:38:02,472 block_infos State(pc_initial=72 nstack_initial=0):
AdaptBlockInfo(insts=((72, {'res': '$bimag72.0'}), (74, {'res': '$breal74.1'}), (76, {'lhs': '$bimag72.0', 'rhs': '$breal74.1', 'res': '$76binary_true_divide.2'}), (78, {'value': '$76binary_true_divide.2'}), (80, {'res': '$breal80.3'}), (82, {'res': '$bimag82.4'}), (84, {'res': '$ratio84.5'}), (86, {'lhs': '$bimag82.4', 'rhs': '$ratio84.5', 'res': '$86binary_multiply.6'}), (88, {'lhs': '$breal80.3', 'rhs': '$86binary_multiply.6', 'res': '$88binary_add.7'}), (90, {'value': '$88binary_add.7'}), (92, {'res': '$92load_global.8'}), (94, {'res': '$areal94.9'}), (96, {'res': '$aimag96.10'}), (98, {'res': '$ratio98.11'}), (100, {'lhs': '$aimag96.10', 'rhs': '$ratio98.11', 'res': '$100binary_multiply.12'}), (102, {'lhs': '$areal94.9', 'rhs': '$100binary_multiply.12', 'res': '$102binary_add.13'}), (104, {'res': '$denom104.14'}), (106, {'lhs': '$102binary_add.13', 'rhs': '$denom104.14', 'res': '$106binary_true_divide.15'}), (108, {'res': '$aimag108.16'}), (110, {'res': '$areal110.17'}), (112, {'res': '$ratio112.18'}), (114, {'lhs': '$areal110.17', 'rhs': '$ratio112.18', 'res': '$114binary_multiply.19'}), (116, {'lhs': '$aimag108.16', 'rhs': '$114binary_multiply.19', 'res': '$116binary_subtract.20'}), (118, {'res': '$denom118.21'}), (120, {'lhs': '$116binary_subtract.20', 'rhs': '$denom118.21', 'res': '$120binary_true_divide.22'}), (122, {'func': '$92load_global.8', 'args': ['$106binary_true_divide.15', '$120binary_true_divide.22'], 'res': '$122call_function.23'}), (124, {'retval': '$122call_function.23', 'castval': '$124return_value.24'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG 2022-02-14 16:38:02,472 block_infos State(pc_initial=126 nstack_initial=0):
AdaptBlockInfo(insts=((126, {'res': '$bimag126.0'}), (128, {'pred': '$bimag126.0'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={130: (), 140: ()})
DEBUG 2022-02-14 16:38:02,472 block_infos State(pc_initial=130 nstack_initial=0):
AdaptBlockInfo(insts=((130, {'res': '$130load_global.0'}), (132, {'res': '$132load_global.1'}), (134, {'res': '$134load_global.2'}), (136, {'func': '$130load_global.0', 'args': ['$132load_global.1', '$134load_global.2'], 'res': '$136call_function.3'}), (138, {'retval': '$136call_function.3', 'castval': '$138return_value.4'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG 2022-02-14 16:38:02,472 block_infos State(pc_initial=140 nstack_initial=0):
AdaptBlockInfo(insts=((140, {'res': '$breal140.0'}), (142, {'res': '$bimag142.1'}), (144, {'lhs': '$breal140.0', 'rhs': '$bimag142.1', 'res': '$144binary_true_divide.2'}), (146, {'value': '$144binary_true_divide.2'}), (148, {'res': '$breal148.3'}), (150, {'res': '$ratio150.4'}), (152, {'lhs': '$breal148.3', 'rhs': '$ratio150.4', 'res': '$152binary_multiply.5'}), (154, {'res': '$bimag154.6'}), (156, {'lhs': '$152binary_multiply.5', 'rhs': '$bimag154.6', 'res': '$156binary_add.7'}), (158, {'value': '$156binary_add.7'}), (160, {'res': '$160load_global.8'}), (162, {'res': '$a162.9'}), (164, {'item': '$a162.9', 'res': '$164load_attr.10'}), (166, {'res': '$ratio166.11'}), (168, {'lhs': '$164load_attr.10', 'rhs': '$ratio166.11', 'res': '$168binary_multiply.12'}), (170, {'res': '$a170.13'}), (172, {'item': '$a170.13', 'res': '$172load_attr.14'}), (174, {'lhs': '$168binary_multiply.12', 'rhs': '$172load_attr.14', 'res': '$174binary_add.15'}), (176, {'res': '$denom176.16'}), (178, {'lhs': '$174binary_add.15', 'rhs': '$denom176.16', 'res': '$178binary_true_divide.17'}), (180, {'res': '$a180.18'}), (182, {'item': '$a180.18', 'res': '$182load_attr.19'}), (184, {'res': '$ratio184.20'}), (186, {'lhs': '$182load_attr.19', 'rhs': '$ratio184.20', 'res': '$186binary_multiply.21'}), (188, {'res': '$a188.22'}), (190, {'item': '$a188.22', 'res': '$190load_attr.23'}), (192, {'lhs': '$186binary_multiply.21', 'rhs': '$190load_attr.23', 'res': '$192binary_subtract.24'}), (194, {'res': '$denom194.25'}), (196, {'lhs': '$192binary_subtract.24', 'rhs': '$denom194.25', 'res': '$196binary_true_divide.26'}), (198, {'func': '$160load_global.8', 'args': ['$178binary_true_divide.17', '$196binary_true_divide.26'], 'res': '$198call_function.27'}), (200, {'retval': '$198call_function.27', 'castval': '$200return_value.28'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG 2022-02-14 16:38:02,474 label 0:
    a = arg(0, name=a)                       ['a']
    b = arg(1, name=b)                       ['b']
    areal = getattr(value=a, attr=real)      ['a', 'areal']
    aimag = getattr(value=a, attr=imag)      ['a', 'aimag']
    breal = getattr(value=b, attr=real)      ['b', 'breal']
    bimag = getattr(value=b, attr=imag)      ['b', 'bimag']
    bool28 = global(bool: <class 'bool'>)    ['bool28']
    $28pred = call bool28(breal, func=bool28, args=(Var(breal, numbers.py:1066),), kws=(), vararg=None, target=None) ['$28pred', 'bool28', 'breal']
    branch $28pred, 42, 30                   ['$28pred']
label 30:
    bool32 = global(bool: <class 'bool'>)    ['bool32']
    $32pred = call bool32(bimag, func=bool32, args=(Var(bimag, numbers.py:1067),), kws=(), vararg=None, target=None) ['$32pred', 'bimag', 'bool32']
    branch $32pred, 42, 34                   ['$32pred']
label 34:
    $34load_global.0 = global(ZeroDivisionError: <class 'ZeroDivisionError'>) ['$34load_global.0']
    $const36.1 = const(str, complex division by zero) ['$const36.1']
    $38call_function.2 = call $34load_global.0($const36.1, func=$34load_global.0, args=[Var($const36.1, numbers.py:1069)], kws=(), vararg=None, target=None) ['$34load_global.0', '$38call_function.2', '$const36.1']
    raise $38call_function.2                 ['$38call_function.2']
label 42:
    $42load_global.0 = global(abs: <built-in function abs>) ['$42load_global.0']
    $46call_function.2 = call $42load_global.0(breal, func=$42load_global.0, args=[Var(breal, numbers.py:1066)], kws=(), vararg=None, target=None) ['$42load_global.0', '$46call_function.2', 'breal']
    $48load_global.3 = global(abs: <built-in function abs>) ['$48load_global.3']
    $52call_function.5 = call $48load_global.3(bimag, func=$48load_global.3, args=[Var(bimag, numbers.py:1067)], kws=(), vararg=None, target=None) ['$48load_global.3', '$52call_function.5', 'bimag']
    $54compare_op.6 = $46call_function.2 >= $52call_function.5 ['$46call_function.2', '$52call_function.5', '$54compare_op.6']
    bool56 = global(bool: <class 'bool'>)    ['bool56']
    $56pred = call bool56($54compare_op.6, func=bool56, args=(Var($54compare_op.6, numbers.py:1070),), kws=(), vararg=None, target=None) ['$54compare_op.6', '$56pred', 'bool56']
    branch $56pred, 58, 126                  ['$56pred']
label 58:
    bool60 = global(bool: <class 'bool'>)    ['bool60']
    $60pred = call bool60(breal, func=bool60, args=(Var(breal, numbers.py:1066),), kws=(), vararg=None, target=None) ['$60pred', 'bool60', 'breal']
    branch $60pred, 72, 62                   ['$60pred']
label 62:
    $62load_global.0 = global(complex: <class 'complex'>) ['$62load_global.0']
    $64load_global.1 = global(NAN: nan)      ['$64load_global.1']
    $66load_global.2 = global(NAN: nan)      ['$66load_global.2']
    $68call_function.3 = call $62load_global.0($64load_global.1, $66load_global.2, func=$62load_global.0, args=[Var($64load_global.1, numbers.py:1073), Var($66load_global.2, numbers.py:1073)], kws=(), vararg=None, target=None) ['$62load_global.0', '$64load_global.1', '$66load_global.2', '$68call_function.3']
    $70return_value.4 = cast(value=$68call_function.3) ['$68call_function.3', '$70return_value.4']
    return $70return_value.4                 ['$70return_value.4']
label 72:
    ratio = bimag / breal                    ['bimag', 'breal', 'ratio']
    $86binary_multiply.6 = bimag * ratio     ['$86binary_multiply.6', 'bimag', 'ratio']
    denom = breal + $86binary_multiply.6     ['$86binary_multiply.6', 'breal', 'denom']
    $92load_global.8 = global(complex: <class 'complex'>) ['$92load_global.8']
    $100binary_multiply.12 = aimag * ratio   ['$100binary_multiply.12', 'aimag', 'ratio']
    $102binary_add.13 = areal + $100binary_multiply.12 ['$100binary_multiply.12', '$102binary_add.13', 'areal']
    $106binary_true_divide.15 = $102binary_add.13 / denom ['$102binary_add.13', '$106binary_true_divide.15', 'denom']
    $114binary_multiply.19 = areal * ratio   ['$114binary_multiply.19', 'areal', 'ratio']
    $116binary_subtract.20 = aimag - $114binary_multiply.19 ['$114binary_multiply.19', '$116binary_subtract.20', 'aimag']
    $120binary_true_divide.22 = $116binary_subtract.20 / denom ['$116binary_subtract.20', '$120binary_true_divide.22', 'denom']
    $122call_function.23 = call $92load_global.8($106binary_true_divide.15, $120binary_true_divide.22, func=$92load_global.8, args=[Var($106binary_true_divide.15, numbers.py:1077), Var($120binary_true_divide.22, numbers.py:1078)], kws=(), vararg=None, target=None) ['$106binary_true_divide.15', '$120binary_true_divide.22', '$122call_function.23', '$92load_global.8']
    $124return_value.24 = cast(value=$122call_function.23) ['$122call_function.23', '$124return_value.24']
    return $124return_value.24               ['$124return_value.24']
label 126:
    bool128 = global(bool: <class 'bool'>)   ['bool128']
    $128pred = call bool128(bimag, func=bool128, args=(Var(bimag, numbers.py:1067),), kws=(), vararg=None, target=None) ['$128pred', 'bimag', 'bool128']
    branch $128pred, 140, 130                ['$128pred']
label 130:
    $130load_global.0 = global(complex: <class 'complex'>) ['$130load_global.0']
    $132load_global.1 = global(NAN: nan)     ['$132load_global.1']
    $134load_global.2 = global(NAN: nan)     ['$134load_global.2']
    $136call_function.3 = call $130load_global.0($132load_global.1, $134load_global.2, func=$130load_global.0, args=[Var($132load_global.1, numbers.py:1082), Var($134load_global.2, numbers.py:1082)], kws=(), vararg=None, target=None) ['$130load_global.0', '$132load_global.1', '$134load_global.2', '$136call_function.3']
    $138return_value.4 = cast(value=$136call_function.3) ['$136call_function.3', '$138return_value.4']
    return $138return_value.4                ['$138return_value.4']
label 140:
    ratio = breal / bimag                    ['bimag', 'breal', 'ratio']
    $152binary_multiply.5 = breal * ratio    ['$152binary_multiply.5', 'breal', 'ratio']
    denom = $152binary_multiply.5 + bimag    ['$152binary_multiply.5', 'bimag', 'denom']
    $160load_global.8 = global(complex: <class 'complex'>) ['$160load_global.8']
    $164load_attr.10 = getattr(value=a, attr=real) ['$164load_attr.10', 'a']
    $168binary_multiply.12 = $164load_attr.10 * ratio ['$164load_attr.10', '$168binary_multiply.12', 'ratio']
    $172load_attr.14 = getattr(value=a, attr=imag) ['$172load_attr.14', 'a']
    $174binary_add.15 = $168binary_multiply.12 + $172load_attr.14 ['$168binary_multiply.12', '$172load_attr.14', '$174binary_add.15']
    $178binary_true_divide.17 = $174binary_add.15 / denom ['$174binary_add.15', '$178binary_true_divide.17', 'denom']
    $182load_attr.19 = getattr(value=a, attr=imag) ['$182load_attr.19', 'a']
    $186binary_multiply.21 = $182load_attr.19 * ratio ['$182load_attr.19', '$186binary_multiply.21', 'ratio']
    $190load_attr.23 = getattr(value=a, attr=real) ['$190load_attr.23', 'a']
    $192binary_subtract.24 = $186binary_multiply.21 - $190load_attr.23 ['$186binary_multiply.21', '$190load_attr.23', '$192binary_subtract.24']
    $196binary_true_divide.26 = $192binary_subtract.24 / denom ['$192binary_subtract.24', '$196binary_true_divide.26', 'denom']
    $198call_function.27 = call $160load_global.8($178binary_true_divide.17, $196binary_true_divide.26, func=$160load_global.8, args=[Var($178binary_true_divide.17, numbers.py:1086), Var($196binary_true_divide.26, numbers.py:1087)], kws=(), vararg=None, target=None) ['$160load_global.8', '$178binary_true_divide.17', '$196binary_true_divide.26', '$198call_function.27']
    $200return_value.28 = cast(value=$198call_function.27) ['$198call_function.27', '$200return_value.28']
    return $200return_value.28               ['$200return_value.28']

DEBUG 2022-02-14 16:38:02,481 ==== SSA block analysis pass on 0
DEBUG 2022-02-14 16:38:02,481 Running <numba.core.ssa._GatherDefsHandler object at 0x7fa046607d30>
DEBUG 2022-02-14 16:38:02,481 on stmt: a = arg(0, name=a)
DEBUG 2022-02-14 16:38:02,481 on stmt: b = arg(1, name=b)
DEBUG 2022-02-14 16:38:02,481 on stmt: areal = getattr(value=a, attr=real)
DEBUG 2022-02-14 16:38:02,481 on stmt: aimag = getattr(value=a, attr=imag)
DEBUG 2022-02-14 16:38:02,481 on stmt: breal = getattr(value=b, attr=real)
DEBUG 2022-02-14 16:38:02,481 on stmt: bimag = getattr(value=b, attr=imag)
DEBUG 2022-02-14 16:38:02,481 on stmt: bool28 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:38:02,482 on stmt: $28pred = call bool28(breal, func=bool28, args=(Var(breal, numbers.py:1066),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:02,482 on stmt: branch $28pred, 42, 30
DEBUG 2022-02-14 16:38:02,482 ==== SSA block analysis pass on 30
DEBUG 2022-02-14 16:38:02,482 Running <numba.core.ssa._GatherDefsHandler object at 0x7fa046607d30>
DEBUG 2022-02-14 16:38:02,482 on stmt: bool32 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:38:02,482 on stmt: $32pred = call bool32(bimag, func=bool32, args=(Var(bimag, numbers.py:1067),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:02,482 on stmt: branch $32pred, 42, 34
DEBUG 2022-02-14 16:38:02,482 ==== SSA block analysis pass on 34
DEBUG 2022-02-14 16:38:02,482 Running <numba.core.ssa._GatherDefsHandler object at 0x7fa046607d30>
DEBUG 2022-02-14 16:38:02,482 on stmt: $34load_global.0 = global(ZeroDivisionError: <class 'ZeroDivisionError'>)
DEBUG 2022-02-14 16:38:02,482 on stmt: $const36.1 = const(str, complex division by zero)
DEBUG 2022-02-14 16:38:02,482 on stmt: $38call_function.2 = call $34load_global.0($const36.1, func=$34load_global.0, args=[Var($const36.1, numbers.py:1069)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:02,482 on stmt: <static> raise <class 'ZeroDivisionError'>('complex division by zero')
DEBUG 2022-02-14 16:38:02,482 ==== SSA block analysis pass on 42
DEBUG 2022-02-14 16:38:02,482 Running <numba.core.ssa._GatherDefsHandler object at 0x7fa046607d30>
DEBUG 2022-02-14 16:38:02,482 on stmt: $42load_global.0 = global(abs: <built-in function abs>)
DEBUG 2022-02-14 16:38:02,482 on stmt: $46call_function.2 = call $42load_global.0(breal, func=$42load_global.0, args=[Var(breal, numbers.py:1066)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:02,482 on stmt: $48load_global.3 = global(abs: <built-in function abs>)
DEBUG 2022-02-14 16:38:02,482 on stmt: $52call_function.5 = call $48load_global.3(bimag, func=$48load_global.3, args=[Var(bimag, numbers.py:1067)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:02,482 on stmt: $54compare_op.6 = $46call_function.2 >= $52call_function.5
DEBUG 2022-02-14 16:38:02,482 on stmt: bool56 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:38:02,482 on stmt: $56pred = call bool56($54compare_op.6, func=bool56, args=(Var($54compare_op.6, numbers.py:1070),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:02,482 on stmt: branch $56pred, 58, 126
DEBUG 2022-02-14 16:38:02,482 ==== SSA block analysis pass on 58
DEBUG 2022-02-14 16:38:02,483 Running <numba.core.ssa._GatherDefsHandler object at 0x7fa046607d30>
DEBUG 2022-02-14 16:38:02,483 on stmt: bool60 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:38:02,483 on stmt: $60pred = call bool60(breal, func=bool60, args=(Var(breal, numbers.py:1066),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:02,483 on stmt: branch $60pred, 72, 62
DEBUG 2022-02-14 16:38:02,483 ==== SSA block analysis pass on 62
DEBUG 2022-02-14 16:38:02,483 Running <numba.core.ssa._GatherDefsHandler object at 0x7fa046607d30>
DEBUG 2022-02-14 16:38:02,483 on stmt: $62load_global.0 = global(complex: <class 'complex'>)
DEBUG 2022-02-14 16:38:02,483 on stmt: $64load_global.1 = global(NAN: nan)
DEBUG 2022-02-14 16:38:02,483 on stmt: $66load_global.2 = global(NAN: nan)
DEBUG 2022-02-14 16:38:02,483 on stmt: $68call_function.3 = call $62load_global.0($64load_global.1, $66load_global.2, func=$62load_global.0, args=[Var($64load_global.1, numbers.py:1073), Var($66load_global.2, numbers.py:1073)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:02,483 on stmt: $70return_value.4 = cast(value=$68call_function.3)
DEBUG 2022-02-14 16:38:02,483 on stmt: return $70return_value.4
DEBUG 2022-02-14 16:38:02,483 ==== SSA block analysis pass on 72
DEBUG 2022-02-14 16:38:02,483 Running <numba.core.ssa._GatherDefsHandler object at 0x7fa046607d30>
DEBUG 2022-02-14 16:38:02,483 on stmt: ratio = bimag / breal
DEBUG 2022-02-14 16:38:02,483 on stmt: $86binary_multiply.6 = bimag * ratio
DEBUG 2022-02-14 16:38:02,483 on stmt: denom = breal + $86binary_multiply.6
DEBUG 2022-02-14 16:38:02,483 on stmt: $92load_global.8 = global(complex: <class 'complex'>)
DEBUG 2022-02-14 16:38:02,483 on stmt: $100binary_multiply.12 = aimag * ratio
DEBUG 2022-02-14 16:38:02,483 on stmt: $102binary_add.13 = areal + $100binary_multiply.12
DEBUG 2022-02-14 16:38:02,483 on stmt: $106binary_true_divide.15 = $102binary_add.13 / denom
DEBUG 2022-02-14 16:38:02,483 on stmt: $114binary_multiply.19 = areal * ratio
DEBUG 2022-02-14 16:38:02,483 on stmt: $116binary_subtract.20 = aimag - $114binary_multiply.19
DEBUG 2022-02-14 16:38:02,484 on stmt: $120binary_true_divide.22 = $116binary_subtract.20 / denom
DEBUG 2022-02-14 16:38:02,484 on stmt: $122call_function.23 = call $92load_global.8($106binary_true_divide.15, $120binary_true_divide.22, func=$92load_global.8, args=[Var($106binary_true_divide.15, numbers.py:1077), Var($120binary_true_divide.22, numbers.py:1078)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:02,484 on stmt: $124return_value.24 = cast(value=$122call_function.23)
DEBUG 2022-02-14 16:38:02,484 on stmt: return $124return_value.24
DEBUG 2022-02-14 16:38:02,484 ==== SSA block analysis pass on 126
DEBUG 2022-02-14 16:38:02,484 Running <numba.core.ssa._GatherDefsHandler object at 0x7fa046607d30>
DEBUG 2022-02-14 16:38:02,484 on stmt: bool128 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:38:02,484 on stmt: $128pred = call bool128(bimag, func=bool128, args=(Var(bimag, numbers.py:1067),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:02,484 on stmt: branch $128pred, 140, 130
DEBUG 2022-02-14 16:38:02,484 ==== SSA block analysis pass on 130
DEBUG 2022-02-14 16:38:02,484 Running <numba.core.ssa._GatherDefsHandler object at 0x7fa046607d30>
DEBUG 2022-02-14 16:38:02,484 on stmt: $130load_global.0 = global(complex: <class 'complex'>)
DEBUG 2022-02-14 16:38:02,484 on stmt: $132load_global.1 = global(NAN: nan)
DEBUG 2022-02-14 16:38:02,484 on stmt: $134load_global.2 = global(NAN: nan)
DEBUG 2022-02-14 16:38:02,484 on stmt: $136call_function.3 = call $130load_global.0($132load_global.1, $134load_global.2, func=$130load_global.0, args=[Var($132load_global.1, numbers.py:1082), Var($134load_global.2, numbers.py:1082)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:02,484 on stmt: $138return_value.4 = cast(value=$136call_function.3)
DEBUG 2022-02-14 16:38:02,484 on stmt: return $138return_value.4
DEBUG 2022-02-14 16:38:02,484 ==== SSA block analysis pass on 140
DEBUG 2022-02-14 16:38:02,484 Running <numba.core.ssa._GatherDefsHandler object at 0x7fa046607d30>
DEBUG 2022-02-14 16:38:02,484 on stmt: ratio = breal / bimag
DEBUG 2022-02-14 16:38:02,484 on stmt: $152binary_multiply.5 = breal * ratio
DEBUG 2022-02-14 16:38:02,484 on stmt: denom = $152binary_multiply.5 + bimag
DEBUG 2022-02-14 16:38:02,484 on stmt: $160load_global.8 = global(complex: <class 'complex'>)
DEBUG 2022-02-14 16:38:02,484 on stmt: $164load_attr.10 = getattr(value=a, attr=real)
DEBUG 2022-02-14 16:38:02,484 on stmt: $168binary_multiply.12 = $164load_attr.10 * ratio
DEBUG 2022-02-14 16:38:02,484 on stmt: $172load_attr.14 = getattr(value=a, attr=imag)
DEBUG 2022-02-14 16:38:02,485 on stmt: $174binary_add.15 = $168binary_multiply.12 + $172load_attr.14
DEBUG 2022-02-14 16:38:02,485 on stmt: $178binary_true_divide.17 = $174binary_add.15 / denom
DEBUG 2022-02-14 16:38:02,485 on stmt: $182load_attr.19 = getattr(value=a, attr=imag)
DEBUG 2022-02-14 16:38:02,485 on stmt: $186binary_multiply.21 = $182load_attr.19 * ratio
DEBUG 2022-02-14 16:38:02,485 on stmt: $190load_attr.23 = getattr(value=a, attr=real)
DEBUG 2022-02-14 16:38:02,485 on stmt: $192binary_subtract.24 = $186binary_multiply.21 - $190load_attr.23
DEBUG 2022-02-14 16:38:02,485 on stmt: $196binary_true_divide.26 = $192binary_subtract.24 / denom
DEBUG 2022-02-14 16:38:02,485 on stmt: $198call_function.27 = call $160load_global.8($178binary_true_divide.17, $196binary_true_divide.26, func=$160load_global.8, args=[Var($178binary_true_divide.17, numbers.py:1086), Var($196binary_true_divide.26, numbers.py:1087)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:02,485 on stmt: $200return_value.28 = cast(value=$198call_function.27)
DEBUG 2022-02-14 16:38:02,485 on stmt: return $200return_value.28
DEBUG 2022-02-14 16:38:02,485 defs defaultdict(<class 'list'>,
            {'$100binary_multiply.12': [<numba.core.ir.Assign object at 0x7fa0465a2ee0>],
             '$102binary_add.13': [<numba.core.ir.Assign object at 0x7fa0465a40a0>],
             '$106binary_true_divide.15': [<numba.core.ir.Assign object at 0x7fa0465a4340>],
             '$114binary_multiply.19': [<numba.core.ir.Assign object at 0x7fa0465a4820>],
             '$116binary_subtract.20': [<numba.core.ir.Assign object at 0x7fa0465a49a0>],
             '$120binary_true_divide.22': [<numba.core.ir.Assign object at 0x7fa0465a4c40>],
             '$122call_function.23': [<numba.core.ir.Assign object at 0x7fa0465a4df0>],
             '$124return_value.24': [<numba.core.ir.Assign object at 0x7fa0465a4f10>],
             '$128pred': [<numba.core.ir.Assign object at 0x7fa0465a4a90>],
             '$130load_global.0': [<numba.core.ir.Assign object at 0x7fa0465a60d0>],
             '$132load_global.1': [<numba.core.ir.Assign object at 0x7fa0465a6250>],
             '$134load_global.2': [<numba.core.ir.Assign object at 0x7fa0465a63d0>],
             '$136call_function.3': [<numba.core.ir.Assign object at 0x7fa0465a65b0>],
             '$138return_value.4': [<numba.core.ir.Assign object at 0x7fa0465a66d0>],
             '$152binary_multiply.5': [<numba.core.ir.Assign object at 0x7fa0465a80a0>],
             '$160load_global.8': [<numba.core.ir.Assign object at 0x7fa0465a8550>],
             '$164load_attr.10': [<numba.core.ir.Assign object at 0x7fa0465a87f0>],
             '$168binary_multiply.12': [<numba.core.ir.Assign object at 0x7fa0465a8ac0>],
             '$172load_attr.14': [<numba.core.ir.Assign object at 0x7fa0465a8d30>],
             '$174binary_add.15': [<numba.core.ir.Assign object at 0x7fa0465a8ee0>],
             '$178binary_true_divide.17': [<numba.core.ir.Assign object at 0x7fa0465aa1c0>],
             '$182load_attr.19': [<numba.core.ir.Assign object at 0x7fa0465aa430>],
             '$186binary_multiply.21': [<numba.core.ir.Assign object at 0x7fa0465aa700>],
             '$190load_attr.23': [<numba.core.ir.Assign object at 0x7fa0465aa970>],
             '$192binary_subtract.24': [<numba.core.ir.Assign object at 0x7fa0465aab20>],
             '$196binary_true_divide.26': [<numba.core.ir.Assign object at 0x7fa0465aadc0>],
             '$198call_function.27': [<numba.core.ir.Assign object at 0x7fa0465aaf70>],
             '$200return_value.28': [<numba.core.ir.Assign object at 0x7fa0465ad0d0>],
             '$28pred': [<numba.core.ir.Assign object at 0x7fa04659d1f0>],
             '$32pred': [<numba.core.ir.Assign object at 0x7fa04659d370>],
             '$34load_global.0': [<numba.core.ir.Assign object at 0x7fa04659d5b0>],
             '$38call_function.2': [<numba.core.ir.Assign object at 0x7fa04659d910>],
             '$42load_global.0': [<numba.core.ir.Assign object at 0x7fa04658dbb0>],
             '$46call_function.2': [<numba.core.ir.Assign object at 0x7fa04658d8e0>],
             '$48load_global.3': [<numba.core.ir.Assign object at 0x7fa04658d7c0>],
             '$52call_function.5': [<numba.core.ir.Assign object at 0x7fa046607e20>],
             '$54compare_op.6': [<numba.core.ir.Assign object at 0x7fa046607f10>],
             '$56pred': [<numba.core.ir.Assign object at 0x7fa04659ddf0>],
             '$60pred': [<numba.core.ir.Assign object at 0x7fa0465a0250>],
             '$62load_global.0': [<numba.core.ir.Assign object at 0x7fa0465a0490>],
             '$64load_global.1': [<numba.core.ir.Assign object at 0x7fa0465a0610>],
             '$66load_global.2': [<numba.core.ir.Assign object at 0x7fa0465a0790>],
             '$68call_function.3': [<numba.core.ir.Assign object at 0x7fa0465a0970>],
             '$70return_value.4': [<numba.core.ir.Assign object at 0x7fa0465a0a90>],
             '$86binary_multiply.6': [<numba.core.ir.Assign object at 0x7fa0465a25e0>],
             '$92load_global.8': [<numba.core.ir.Assign object at 0x7fa0465a29d0>],
             '$const36.1': [<numba.core.ir.Assign object at 0x7fa04659d730>],
             'a': [<numba.core.ir.Assign object at 0x7fa04658dd30>],
             'aimag': [<numba.core.ir.Assign object at 0x7fa046599550>],
             'areal': [<numba.core.ir.Assign object at 0x7fa046599190>],
             'b': [<numba.core.ir.Assign object at 0x7fa04658deb0>],
             'bimag': [<numba.core.ir.Assign object at 0x7fa046599cd0>],
             'bool128': [<numba.core.ir.Assign object at 0x7fa0465a4430>],
             'bool28': [<numba.core.ir.Assign object at 0x7fa04659d0d0>],
             'bool32': [<numba.core.ir.Assign object at 0x7fa04658dd60>],
             'bool56': [<numba.core.ir.Assign object at 0x7fa04659dcd0>],
             'bool60': [<numba.core.ir.Assign object at 0x7fa0465a0130>],
             'breal': [<numba.core.ir.Assign object at 0x7fa046599910>],
             'denom': [<numba.core.ir.Assign object at 0x7fa0465a2760>,
                       <numba.core.ir.Assign object at 0x7fa0465a8340>],
             'ratio': [<numba.core.ir.Assign object at 0x7fa0465a0fa0>,
                       <numba.core.ir.Assign object at 0x7fa0465a6be0>]})
DEBUG 2022-02-14 16:38:02,486 SSA violators {'ratio', 'denom'}
DEBUG 2022-02-14 16:38:02,486 Fix SSA violator on var ratio
DEBUG 2022-02-14 16:38:02,486 ==== SSA block rewrite pass on 0
DEBUG 2022-02-14 16:38:02,486 Running <numba.core.ssa._FreshVarHandler object at 0x7fa0465ad2e0>
DEBUG 2022-02-14 16:38:02,486 on stmt: a = arg(0, name=a)
DEBUG 2022-02-14 16:38:02,486 on stmt: b = arg(1, name=b)
DEBUG 2022-02-14 16:38:02,486 on stmt: areal = getattr(value=a, attr=real)
DEBUG 2022-02-14 16:38:02,486 on stmt: aimag = getattr(value=a, attr=imag)
DEBUG 2022-02-14 16:38:02,486 on stmt: breal = getattr(value=b, attr=real)
DEBUG 2022-02-14 16:38:02,486 on stmt: bimag = getattr(value=b, attr=imag)
DEBUG 2022-02-14 16:38:02,486 on stmt: bool28 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:38:02,486 on stmt: $28pred = call bool28(breal, func=bool28, args=(Var(breal, numbers.py:1066),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:02,486 on stmt: branch $28pred, 42, 30
DEBUG 2022-02-14 16:38:02,486 ==== SSA block rewrite pass on 30
DEBUG 2022-02-14 16:38:02,486 Running <numba.core.ssa._FreshVarHandler object at 0x7fa0465ad2e0>
DEBUG 2022-02-14 16:38:02,486 on stmt: bool32 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:38:02,486 on stmt: $32pred = call bool32(bimag, func=bool32, args=(Var(bimag, numbers.py:1067),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:02,486 on stmt: branch $32pred, 42, 34
DEBUG 2022-02-14 16:38:02,486 ==== SSA block rewrite pass on 34
DEBUG 2022-02-14 16:38:02,486 Running <numba.core.ssa._FreshVarHandler object at 0x7fa0465ad2e0>
DEBUG 2022-02-14 16:38:02,486 on stmt: $34load_global.0 = global(ZeroDivisionError: <class 'ZeroDivisionError'>)
DEBUG 2022-02-14 16:38:02,486 on stmt: $const36.1 = const(str, complex division by zero)
DEBUG 2022-02-14 16:38:02,486 on stmt: $38call_function.2 = call $34load_global.0($const36.1, func=$34load_global.0, args=[Var($const36.1, numbers.py:1069)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:02,486 on stmt: <static> raise <class 'ZeroDivisionError'>('complex division by zero')
DEBUG 2022-02-14 16:38:02,487 ==== SSA block rewrite pass on 42
DEBUG 2022-02-14 16:38:02,487 Running <numba.core.ssa._FreshVarHandler object at 0x7fa0465ad2e0>
DEBUG 2022-02-14 16:38:02,487 on stmt: $42load_global.0 = global(abs: <built-in function abs>)
DEBUG 2022-02-14 16:38:02,487 on stmt: $46call_function.2 = call $42load_global.0(breal, func=$42load_global.0, args=[Var(breal, numbers.py:1066)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:02,487 on stmt: $48load_global.3 = global(abs: <built-in function abs>)
DEBUG 2022-02-14 16:38:02,487 on stmt: $52call_function.5 = call $48load_global.3(bimag, func=$48load_global.3, args=[Var(bimag, numbers.py:1067)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:02,487 on stmt: $54compare_op.6 = $46call_function.2 >= $52call_function.5
DEBUG 2022-02-14 16:38:02,487 on stmt: bool56 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:38:02,487 on stmt: $56pred = call bool56($54compare_op.6, func=bool56, args=(Var($54compare_op.6, numbers.py:1070),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:02,487 on stmt: branch $56pred, 58, 126
DEBUG 2022-02-14 16:38:02,487 ==== SSA block rewrite pass on 58
DEBUG 2022-02-14 16:38:02,487 Running <numba.core.ssa._FreshVarHandler object at 0x7fa0465ad2e0>
DEBUG 2022-02-14 16:38:02,487 on stmt: bool60 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:38:02,487 on stmt: $60pred = call bool60(breal, func=bool60, args=(Var(breal, numbers.py:1066),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:02,487 on stmt: branch $60pred, 72, 62
DEBUG 2022-02-14 16:38:02,487 ==== SSA block rewrite pass on 62
DEBUG 2022-02-14 16:38:02,487 Running <numba.core.ssa._FreshVarHandler object at 0x7fa0465ad2e0>
DEBUG 2022-02-14 16:38:02,487 on stmt: $62load_global.0 = global(complex: <class 'complex'>)
DEBUG 2022-02-14 16:38:02,488 on stmt: $64load_global.1 = global(NAN: nan)
DEBUG 2022-02-14 16:38:02,488 on stmt: $66load_global.2 = global(NAN: nan)
DEBUG 2022-02-14 16:38:02,488 on stmt: $68call_function.3 = call $62load_global.0($64load_global.1, $66load_global.2, func=$62load_global.0, args=[Var($64load_global.1, numbers.py:1073), Var($66load_global.2, numbers.py:1073)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:02,488 on stmt: $70return_value.4 = cast(value=$68call_function.3)
DEBUG 2022-02-14 16:38:02,488 on stmt: return $70return_value.4
DEBUG 2022-02-14 16:38:02,488 ==== SSA block rewrite pass on 72
DEBUG 2022-02-14 16:38:02,488 Running <numba.core.ssa._FreshVarHandler object at 0x7fa0465ad2e0>
DEBUG 2022-02-14 16:38:02,488 on stmt: ratio = bimag / breal
DEBUG 2022-02-14 16:38:02,488 first assign: ratio
DEBUG 2022-02-14 16:38:02,488 replaced with: ratio = bimag / breal
DEBUG 2022-02-14 16:38:02,488 on stmt: $86binary_multiply.6 = bimag * ratio
DEBUG 2022-02-14 16:38:02,488 on stmt: denom = breal + $86binary_multiply.6
DEBUG 2022-02-14 16:38:02,488 on stmt: $92load_global.8 = global(complex: <class 'complex'>)
DEBUG 2022-02-14 16:38:02,488 on stmt: $100binary_multiply.12 = aimag * ratio
DEBUG 2022-02-14 16:38:02,488 on stmt: $102binary_add.13 = areal + $100binary_multiply.12
DEBUG 2022-02-14 16:38:02,488 on stmt: $106binary_true_divide.15 = $102binary_add.13 / denom
DEBUG 2022-02-14 16:38:02,488 on stmt: $114binary_multiply.19 = areal * ratio
DEBUG 2022-02-14 16:38:02,488 on stmt: $116binary_subtract.20 = aimag - $114binary_multiply.19
DEBUG 2022-02-14 16:38:02,488 on stmt: $120binary_true_divide.22 = $116binary_subtract.20 / denom
DEBUG 2022-02-14 16:38:02,488 on stmt: $122call_function.23 = call $92load_global.8($106binary_true_divide.15, $120binary_true_divide.22, func=$92load_global.8, args=[Var($106binary_true_divide.15, numbers.py:1077), Var($120binary_true_divide.22, numbers.py:1078)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:02,488 on stmt: $124return_value.24 = cast(value=$122call_function.23)
DEBUG 2022-02-14 16:38:02,489 on stmt: return $124return_value.24
DEBUG 2022-02-14 16:38:02,489 ==== SSA block rewrite pass on 126
DEBUG 2022-02-14 16:38:02,489 Running <numba.core.ssa._FreshVarHandler object at 0x7fa0465ad2e0>
DEBUG 2022-02-14 16:38:02,489 on stmt: bool128 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:38:02,489 on stmt: $128pred = call bool128(bimag, func=bool128, args=(Var(bimag, numbers.py:1067),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:02,489 on stmt: branch $128pred, 140, 130
DEBUG 2022-02-14 16:38:02,489 ==== SSA block rewrite pass on 130
DEBUG 2022-02-14 16:38:02,489 Running <numba.core.ssa._FreshVarHandler object at 0x7fa0465ad2e0>
DEBUG 2022-02-14 16:38:02,489 on stmt: $130load_global.0 = global(complex: <class 'complex'>)
DEBUG 2022-02-14 16:38:02,489 on stmt: $132load_global.1 = global(NAN: nan)
DEBUG 2022-02-14 16:38:02,489 on stmt: $134load_global.2 = global(NAN: nan)
DEBUG 2022-02-14 16:38:02,489 on stmt: $136call_function.3 = call $130load_global.0($132load_global.1, $134load_global.2, func=$130load_global.0, args=[Var($132load_global.1, numbers.py:1082), Var($134load_global.2, numbers.py:1082)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:02,489 on stmt: $138return_value.4 = cast(value=$136call_function.3)
DEBUG 2022-02-14 16:38:02,489 on stmt: return $138return_value.4
DEBUG 2022-02-14 16:38:02,489 ==== SSA block rewrite pass on 140
DEBUG 2022-02-14 16:38:02,489 Running <numba.core.ssa._FreshVarHandler object at 0x7fa0465ad2e0>
DEBUG 2022-02-14 16:38:02,489 on stmt: ratio = breal / bimag
DEBUG 2022-02-14 16:38:02,489 replaced with: ratio.1 = breal / bimag
DEBUG 2022-02-14 16:38:02,489 on stmt: $152binary_multiply.5 = breal * ratio
DEBUG 2022-02-14 16:38:02,489 on stmt: denom = $152binary_multiply.5 + bimag
DEBUG 2022-02-14 16:38:02,489 on stmt: $160load_global.8 = global(complex: <class 'complex'>)
DEBUG 2022-02-14 16:38:02,489 on stmt: $164load_attr.10 = getattr(value=a, attr=real)
DEBUG 2022-02-14 16:38:02,489 on stmt: $168binary_multiply.12 = $164load_attr.10 * ratio
DEBUG 2022-02-14 16:38:02,489 on stmt: $172load_attr.14 = getattr(value=a, attr=imag)
DEBUG 2022-02-14 16:38:02,490 on stmt: $174binary_add.15 = $168binary_multiply.12 + $172load_attr.14
DEBUG 2022-02-14 16:38:02,490 on stmt: $178binary_true_divide.17 = $174binary_add.15 / denom
DEBUG 2022-02-14 16:38:02,490 on stmt: $182load_attr.19 = getattr(value=a, attr=imag)
DEBUG 2022-02-14 16:38:02,490 on stmt: $186binary_multiply.21 = $182load_attr.19 * ratio
DEBUG 2022-02-14 16:38:02,490 on stmt: $190load_attr.23 = getattr(value=a, attr=real)
DEBUG 2022-02-14 16:38:02,490 on stmt: $192binary_subtract.24 = $186binary_multiply.21 - $190load_attr.23
DEBUG 2022-02-14 16:38:02,490 on stmt: $196binary_true_divide.26 = $192binary_subtract.24 / denom
DEBUG 2022-02-14 16:38:02,490 on stmt: $198call_function.27 = call $160load_global.8($178binary_true_divide.17, $196binary_true_divide.26, func=$160load_global.8, args=[Var($178binary_true_divide.17, numbers.py:1086), Var($196binary_true_divide.26, numbers.py:1087)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:02,490 on stmt: $200return_value.28 = cast(value=$198call_function.27)
DEBUG 2022-02-14 16:38:02,490 on stmt: return $200return_value.28
DEBUG 2022-02-14 16:38:02,490 Replaced assignments: defaultdict(<class 'list'>,
            {72: [<numba.core.ir.Assign object at 0x7fa0465adb20>],
             140: [<numba.core.ir.Assign object at 0x7fa0465ad400>]})
DEBUG 2022-02-14 16:38:02,490 ==== SSA block rewrite pass on 0
DEBUG 2022-02-14 16:38:02,490 Running <numba.core.ssa._FixSSAVars object at 0x7fa0465ad2e0>
DEBUG 2022-02-14 16:38:02,490 on stmt: a = arg(0, name=a)
DEBUG 2022-02-14 16:38:02,490 on stmt: b = arg(1, name=b)
DEBUG 2022-02-14 16:38:02,490 on stmt: areal = getattr(value=a, attr=real)
DEBUG 2022-02-14 16:38:02,490 on stmt: aimag = getattr(value=a, attr=imag)
DEBUG 2022-02-14 16:38:02,490 on stmt: breal = getattr(value=b, attr=real)
DEBUG 2022-02-14 16:38:02,490 on stmt: bimag = getattr(value=b, attr=imag)
DEBUG 2022-02-14 16:38:02,490 on stmt: bool28 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:38:02,491 on stmt: $28pred = call bool28(breal, func=bool28, args=(Var(breal, numbers.py:1066),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:02,491 on stmt: branch $28pred, 42, 30
DEBUG 2022-02-14 16:38:02,491 ==== SSA block rewrite pass on 30
DEBUG 2022-02-14 16:38:02,491 Running <numba.core.ssa._FixSSAVars object at 0x7fa0465ad2e0>
DEBUG 2022-02-14 16:38:02,491 on stmt: bool32 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:38:02,491 on stmt: $32pred = call bool32(bimag, func=bool32, args=(Var(bimag, numbers.py:1067),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:02,491 on stmt: branch $32pred, 42, 34
DEBUG 2022-02-14 16:38:02,491 ==== SSA block rewrite pass on 34
DEBUG 2022-02-14 16:38:02,491 Running <numba.core.ssa._FixSSAVars object at 0x7fa0465ad2e0>
DEBUG 2022-02-14 16:38:02,491 on stmt: $34load_global.0 = global(ZeroDivisionError: <class 'ZeroDivisionError'>)
DEBUG 2022-02-14 16:38:02,491 on stmt: $const36.1 = const(str, complex division by zero)
DEBUG 2022-02-14 16:38:02,491 on stmt: $38call_function.2 = call $34load_global.0($const36.1, func=$34load_global.0, args=[Var($const36.1, numbers.py:1069)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:02,491 on stmt: <static> raise <class 'ZeroDivisionError'>('complex division by zero')
DEBUG 2022-02-14 16:38:02,491 ==== SSA block rewrite pass on 42
DEBUG 2022-02-14 16:38:02,491 Running <numba.core.ssa._FixSSAVars object at 0x7fa0465ad2e0>
DEBUG 2022-02-14 16:38:02,491 on stmt: $42load_global.0 = global(abs: <built-in function abs>)
DEBUG 2022-02-14 16:38:02,491 on stmt: $46call_function.2 = call $42load_global.0(breal, func=$42load_global.0, args=[Var(breal, numbers.py:1066)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:02,491 on stmt: $48load_global.3 = global(abs: <built-in function abs>)
DEBUG 2022-02-14 16:38:02,492 on stmt: $52call_function.5 = call $48load_global.3(bimag, func=$48load_global.3, args=[Var(bimag, numbers.py:1067)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:02,492 on stmt: $54compare_op.6 = $46call_function.2 >= $52call_function.5
DEBUG 2022-02-14 16:38:02,492 on stmt: bool56 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:38:02,492 on stmt: $56pred = call bool56($54compare_op.6, func=bool56, args=(Var($54compare_op.6, numbers.py:1070),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:02,492 on stmt: branch $56pred, 58, 126
DEBUG 2022-02-14 16:38:02,492 ==== SSA block rewrite pass on 58
DEBUG 2022-02-14 16:38:02,492 Running <numba.core.ssa._FixSSAVars object at 0x7fa0465ad2e0>
DEBUG 2022-02-14 16:38:02,492 on stmt: bool60 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:38:02,492 on stmt: $60pred = call bool60(breal, func=bool60, args=(Var(breal, numbers.py:1066),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:02,492 on stmt: branch $60pred, 72, 62
DEBUG 2022-02-14 16:38:02,492 ==== SSA block rewrite pass on 62
DEBUG 2022-02-14 16:38:02,492 Running <numba.core.ssa._FixSSAVars object at 0x7fa0465ad2e0>
DEBUG 2022-02-14 16:38:02,492 on stmt: $62load_global.0 = global(complex: <class 'complex'>)
DEBUG 2022-02-14 16:38:02,492 on stmt: $64load_global.1 = global(NAN: nan)
DEBUG 2022-02-14 16:38:02,492 on stmt: $66load_global.2 = global(NAN: nan)
DEBUG 2022-02-14 16:38:02,492 on stmt: $68call_function.3 = call $62load_global.0($64load_global.1, $66load_global.2, func=$62load_global.0, args=[Var($64load_global.1, numbers.py:1073), Var($66load_global.2, numbers.py:1073)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:02,492 on stmt: $70return_value.4 = cast(value=$68call_function.3)
DEBUG 2022-02-14 16:38:02,492 on stmt: return $70return_value.4
DEBUG 2022-02-14 16:38:02,493 ==== SSA block rewrite pass on 72
DEBUG 2022-02-14 16:38:02,493 Running <numba.core.ssa._FixSSAVars object at 0x7fa0465ad2e0>
DEBUG 2022-02-14 16:38:02,493 on stmt: ratio = bimag / breal
DEBUG 2022-02-14 16:38:02,493 on stmt: $86binary_multiply.6 = bimag * ratio
DEBUG 2022-02-14 16:38:02,493 find_def var='ratio' stmt=$86binary_multiply.6 = bimag * ratio
DEBUG 2022-02-14 16:38:02,493 on stmt: denom = breal + $86binary_multiply.6
DEBUG 2022-02-14 16:38:02,493 on stmt: $92load_global.8 = global(complex: <class 'complex'>)
DEBUG 2022-02-14 16:38:02,493 on stmt: $100binary_multiply.12 = aimag * ratio
DEBUG 2022-02-14 16:38:02,493 find_def var='ratio' stmt=$100binary_multiply.12 = aimag * ratio
DEBUG 2022-02-14 16:38:02,493 on stmt: $102binary_add.13 = areal + $100binary_multiply.12
DEBUG 2022-02-14 16:38:02,493 on stmt: $106binary_true_divide.15 = $102binary_add.13 / denom
DEBUG 2022-02-14 16:38:02,493 on stmt: $114binary_multiply.19 = areal * ratio
DEBUG 2022-02-14 16:38:02,493 find_def var='ratio' stmt=$114binary_multiply.19 = areal * ratio
DEBUG 2022-02-14 16:38:02,493 on stmt: $116binary_subtract.20 = aimag - $114binary_multiply.19
DEBUG 2022-02-14 16:38:02,493 on stmt: $120binary_true_divide.22 = $116binary_subtract.20 / denom
DEBUG 2022-02-14 16:38:02,493 on stmt: $122call_function.23 = call $92load_global.8($106binary_true_divide.15, $120binary_true_divide.22, func=$92load_global.8, args=[Var($106binary_true_divide.15, numbers.py:1077), Var($120binary_true_divide.22, numbers.py:1078)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:02,493 on stmt: $124return_value.24 = cast(value=$122call_function.23)
DEBUG 2022-02-14 16:38:02,493 on stmt: return $124return_value.24
DEBUG 2022-02-14 16:38:02,494 ==== SSA block rewrite pass on 126
DEBUG 2022-02-14 16:38:02,494 Running <numba.core.ssa._FixSSAVars object at 0x7fa0465ad2e0>
DEBUG 2022-02-14 16:38:02,494 on stmt: bool128 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:38:02,494 on stmt: $128pred = call bool128(bimag, func=bool128, args=(Var(bimag, numbers.py:1067),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:02,494 on stmt: branch $128pred, 140, 130
DEBUG 2022-02-14 16:38:02,494 ==== SSA block rewrite pass on 130
DEBUG 2022-02-14 16:38:02,494 Running <numba.core.ssa._FixSSAVars object at 0x7fa0465ad2e0>
DEBUG 2022-02-14 16:38:02,494 on stmt: $130load_global.0 = global(complex: <class 'complex'>)
DEBUG 2022-02-14 16:38:02,494 on stmt: $132load_global.1 = global(NAN: nan)
DEBUG 2022-02-14 16:38:02,494 on stmt: $134load_global.2 = global(NAN: nan)
DEBUG 2022-02-14 16:38:02,494 on stmt: $136call_function.3 = call $130load_global.0($132load_global.1, $134load_global.2, func=$130load_global.0, args=[Var($132load_global.1, numbers.py:1082), Var($134load_global.2, numbers.py:1082)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:02,494 on stmt: $138return_value.4 = cast(value=$136call_function.3)
DEBUG 2022-02-14 16:38:02,494 on stmt: return $138return_value.4
DEBUG 2022-02-14 16:38:02,494 ==== SSA block rewrite pass on 140
DEBUG 2022-02-14 16:38:02,494 Running <numba.core.ssa._FixSSAVars object at 0x7fa0465ad2e0>
DEBUG 2022-02-14 16:38:02,494 on stmt: ratio.1 = breal / bimag
DEBUG 2022-02-14 16:38:02,494 on stmt: $152binary_multiply.5 = breal * ratio
DEBUG 2022-02-14 16:38:02,494 find_def var='ratio' stmt=$152binary_multiply.5 = breal * ratio
DEBUG 2022-02-14 16:38:02,494 replaced with: $152binary_multiply.5 = breal * ratio.1
DEBUG 2022-02-14 16:38:02,495 on stmt: denom = $152binary_multiply.5 + bimag
DEBUG 2022-02-14 16:38:02,495 on stmt: $160load_global.8 = global(complex: <class 'complex'>)
DEBUG 2022-02-14 16:38:02,495 on stmt: $164load_attr.10 = getattr(value=a, attr=real)
DEBUG 2022-02-14 16:38:02,495 on stmt: $168binary_multiply.12 = $164load_attr.10 * ratio
DEBUG 2022-02-14 16:38:02,495 find_def var='ratio' stmt=$168binary_multiply.12 = $164load_attr.10 * ratio
DEBUG 2022-02-14 16:38:02,495 replaced with: $168binary_multiply.12 = $164load_attr.10 * ratio.1
DEBUG 2022-02-14 16:38:02,495 on stmt: $172load_attr.14 = getattr(value=a, attr=imag)
DEBUG 2022-02-14 16:38:02,495 on stmt: $174binary_add.15 = $168binary_multiply.12 + $172load_attr.14
DEBUG 2022-02-14 16:38:02,495 on stmt: $178binary_true_divide.17 = $174binary_add.15 / denom
DEBUG 2022-02-14 16:38:02,495 on stmt: $182load_attr.19 = getattr(value=a, attr=imag)
DEBUG 2022-02-14 16:38:02,495 on stmt: $186binary_multiply.21 = $182load_attr.19 * ratio
DEBUG 2022-02-14 16:38:02,495 find_def var='ratio' stmt=$186binary_multiply.21 = $182load_attr.19 * ratio
DEBUG 2022-02-14 16:38:02,495 replaced with: $186binary_multiply.21 = $182load_attr.19 * ratio.1
DEBUG 2022-02-14 16:38:02,495 on stmt: $190load_attr.23 = getattr(value=a, attr=real)
DEBUG 2022-02-14 16:38:02,495 on stmt: $192binary_subtract.24 = $186binary_multiply.21 - $190load_attr.23
DEBUG 2022-02-14 16:38:02,495 on stmt: $196binary_true_divide.26 = $192binary_subtract.24 / denom
DEBUG 2022-02-14 16:38:02,495 on stmt: $198call_function.27 = call $160load_global.8($178binary_true_divide.17, $196binary_true_divide.26, func=$160load_global.8, args=[Var($178binary_true_divide.17, numbers.py:1086), Var($196binary_true_divide.26, numbers.py:1087)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:02,496 on stmt: $200return_value.28 = cast(value=$198call_function.27)
DEBUG 2022-02-14 16:38:02,496 on stmt: return $200return_value.28
DEBUG 2022-02-14 16:38:02,496 Fix SSA violator on var denom
DEBUG 2022-02-14 16:38:02,496 ==== SSA block rewrite pass on 0
DEBUG 2022-02-14 16:38:02,496 Running <numba.core.ssa._FreshVarHandler object at 0x7fa0465adbe0>
DEBUG 2022-02-14 16:38:02,496 on stmt: a = arg(0, name=a)
DEBUG 2022-02-14 16:38:02,496 on stmt: b = arg(1, name=b)
DEBUG 2022-02-14 16:38:02,496 on stmt: areal = getattr(value=a, attr=real)
DEBUG 2022-02-14 16:38:02,496 on stmt: aimag = getattr(value=a, attr=imag)
DEBUG 2022-02-14 16:38:02,496 on stmt: breal = getattr(value=b, attr=real)
DEBUG 2022-02-14 16:38:02,496 on stmt: bimag = getattr(value=b, attr=imag)
DEBUG 2022-02-14 16:38:02,496 on stmt: bool28 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:38:02,496 on stmt: $28pred = call bool28(breal, func=bool28, args=(Var(breal, numbers.py:1066),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:02,496 on stmt: branch $28pred, 42, 30
DEBUG 2022-02-14 16:38:02,496 ==== SSA block rewrite pass on 30
DEBUG 2022-02-14 16:38:02,496 Running <numba.core.ssa._FreshVarHandler object at 0x7fa0465adbe0>
DEBUG 2022-02-14 16:38:02,496 on stmt: bool32 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:38:02,496 on stmt: $32pred = call bool32(bimag, func=bool32, args=(Var(bimag, numbers.py:1067),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:02,496 on stmt: branch $32pred, 42, 34
DEBUG 2022-02-14 16:38:02,496 ==== SSA block rewrite pass on 34
DEBUG 2022-02-14 16:38:02,497 Running <numba.core.ssa._FreshVarHandler object at 0x7fa0465adbe0>
DEBUG 2022-02-14 16:38:02,497 on stmt: $34load_global.0 = global(ZeroDivisionError: <class 'ZeroDivisionError'>)
DEBUG 2022-02-14 16:38:02,497 on stmt: $const36.1 = const(str, complex division by zero)
DEBUG 2022-02-14 16:38:02,497 on stmt: $38call_function.2 = call $34load_global.0($const36.1, func=$34load_global.0, args=[Var($const36.1, numbers.py:1069)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:02,497 on stmt: <static> raise <class 'ZeroDivisionError'>('complex division by zero')
DEBUG 2022-02-14 16:38:02,497 ==== SSA block rewrite pass on 42
DEBUG 2022-02-14 16:38:02,497 Running <numba.core.ssa._FreshVarHandler object at 0x7fa0465adbe0>
DEBUG 2022-02-14 16:38:02,497 on stmt: $42load_global.0 = global(abs: <built-in function abs>)
DEBUG 2022-02-14 16:38:02,497 on stmt: $46call_function.2 = call $42load_global.0(breal, func=$42load_global.0, args=[Var(breal, numbers.py:1066)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:02,497 on stmt: $48load_global.3 = global(abs: <built-in function abs>)
DEBUG 2022-02-14 16:38:02,497 on stmt: $52call_function.5 = call $48load_global.3(bimag, func=$48load_global.3, args=[Var(bimag, numbers.py:1067)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:02,497 on stmt: $54compare_op.6 = $46call_function.2 >= $52call_function.5
DEBUG 2022-02-14 16:38:02,497 on stmt: bool56 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:38:02,497 on stmt: $56pred = call bool56($54compare_op.6, func=bool56, args=(Var($54compare_op.6, numbers.py:1070),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:02,497 on stmt: branch $56pred, 58, 126
DEBUG 2022-02-14 16:38:02,497 ==== SSA block rewrite pass on 58
DEBUG 2022-02-14 16:38:02,497 Running <numba.core.ssa._FreshVarHandler object at 0x7fa0465adbe0>
DEBUG 2022-02-14 16:38:02,497 on stmt: bool60 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:38:02,497 on stmt: $60pred = call bool60(breal, func=bool60, args=(Var(breal, numbers.py:1066),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:02,497 on stmt: branch $60pred, 72, 62
DEBUG 2022-02-14 16:38:02,498 ==== SSA block rewrite pass on 62
DEBUG 2022-02-14 16:38:02,498 Running <numba.core.ssa._FreshVarHandler object at 0x7fa0465adbe0>
DEBUG 2022-02-14 16:38:02,498 on stmt: $62load_global.0 = global(complex: <class 'complex'>)
DEBUG 2022-02-14 16:38:02,498 on stmt: $64load_global.1 = global(NAN: nan)
DEBUG 2022-02-14 16:38:02,498 on stmt: $66load_global.2 = global(NAN: nan)
DEBUG 2022-02-14 16:38:02,498 on stmt: $68call_function.3 = call $62load_global.0($64load_global.1, $66load_global.2, func=$62load_global.0, args=[Var($64load_global.1, numbers.py:1073), Var($66load_global.2, numbers.py:1073)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:02,498 on stmt: $70return_value.4 = cast(value=$68call_function.3)
DEBUG 2022-02-14 16:38:02,498 on stmt: return $70return_value.4
DEBUG 2022-02-14 16:38:02,498 ==== SSA block rewrite pass on 72
DEBUG 2022-02-14 16:38:02,498 Running <numba.core.ssa._FreshVarHandler object at 0x7fa0465adbe0>
DEBUG 2022-02-14 16:38:02,498 on stmt: ratio = bimag / breal
DEBUG 2022-02-14 16:38:02,498 on stmt: $86binary_multiply.6 = bimag * ratio
DEBUG 2022-02-14 16:38:02,498 on stmt: denom = breal + $86binary_multiply.6
DEBUG 2022-02-14 16:38:02,498 first assign: denom
DEBUG 2022-02-14 16:38:02,498 replaced with: denom = breal + $86binary_multiply.6
DEBUG 2022-02-14 16:38:02,498 on stmt: $92load_global.8 = global(complex: <class 'complex'>)
DEBUG 2022-02-14 16:38:02,498 on stmt: $100binary_multiply.12 = aimag * ratio
DEBUG 2022-02-14 16:38:02,498 on stmt: $102binary_add.13 = areal + $100binary_multiply.12
DEBUG 2022-02-14 16:38:02,498 on stmt: $106binary_true_divide.15 = $102binary_add.13 / denom
DEBUG 2022-02-14 16:38:02,498 on stmt: $114binary_multiply.19 = areal * ratio
DEBUG 2022-02-14 16:38:02,498 on stmt: $116binary_subtract.20 = aimag - $114binary_multiply.19
DEBUG 2022-02-14 16:38:02,499 on stmt: $120binary_true_divide.22 = $116binary_subtract.20 / denom
DEBUG 2022-02-14 16:38:02,499 on stmt: $122call_function.23 = call $92load_global.8($106binary_true_divide.15, $120binary_true_divide.22, func=$92load_global.8, args=[Var($106binary_true_divide.15, numbers.py:1077), Var($120binary_true_divide.22, numbers.py:1078)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:02,499 on stmt: $124return_value.24 = cast(value=$122call_function.23)
DEBUG 2022-02-14 16:38:02,499 on stmt: return $124return_value.24
DEBUG 2022-02-14 16:38:02,499 ==== SSA block rewrite pass on 126
DEBUG 2022-02-14 16:38:02,499 Running <numba.core.ssa._FreshVarHandler object at 0x7fa0465adbe0>
DEBUG 2022-02-14 16:38:02,499 on stmt: bool128 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:38:02,499 on stmt: $128pred = call bool128(bimag, func=bool128, args=(Var(bimag, numbers.py:1067),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:02,499 on stmt: branch $128pred, 140, 130
DEBUG 2022-02-14 16:38:02,499 ==== SSA block rewrite pass on 130
DEBUG 2022-02-14 16:38:02,499 Running <numba.core.ssa._FreshVarHandler object at 0x7fa0465adbe0>
DEBUG 2022-02-14 16:38:02,499 on stmt: $130load_global.0 = global(complex: <class 'complex'>)
DEBUG 2022-02-14 16:38:02,499 on stmt: $132load_global.1 = global(NAN: nan)
DEBUG 2022-02-14 16:38:02,499 on stmt: $134load_global.2 = global(NAN: nan)
DEBUG 2022-02-14 16:38:02,499 on stmt: $136call_function.3 = call $130load_global.0($132load_global.1, $134load_global.2, func=$130load_global.0, args=[Var($132load_global.1, numbers.py:1082), Var($134load_global.2, numbers.py:1082)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:02,499 on stmt: $138return_value.4 = cast(value=$136call_function.3)
DEBUG 2022-02-14 16:38:02,499 on stmt: return $138return_value.4
DEBUG 2022-02-14 16:38:02,499 ==== SSA block rewrite pass on 140
DEBUG 2022-02-14 16:38:02,499 Running <numba.core.ssa._FreshVarHandler object at 0x7fa0465adbe0>
DEBUG 2022-02-14 16:38:02,499 on stmt: ratio.1 = breal / bimag
DEBUG 2022-02-14 16:38:02,499 on stmt: $152binary_multiply.5 = breal * ratio.1
DEBUG 2022-02-14 16:38:02,500 on stmt: denom = $152binary_multiply.5 + bimag
DEBUG 2022-02-14 16:38:02,500 replaced with: denom.1 = $152binary_multiply.5 + bimag
DEBUG 2022-02-14 16:38:02,500 on stmt: $160load_global.8 = global(complex: <class 'complex'>)
DEBUG 2022-02-14 16:38:02,500 on stmt: $164load_attr.10 = getattr(value=a, attr=real)
DEBUG 2022-02-14 16:38:02,500 on stmt: $168binary_multiply.12 = $164load_attr.10 * ratio.1
DEBUG 2022-02-14 16:38:02,500 on stmt: $172load_attr.14 = getattr(value=a, attr=imag)
DEBUG 2022-02-14 16:38:02,500 on stmt: $174binary_add.15 = $168binary_multiply.12 + $172load_attr.14
DEBUG 2022-02-14 16:38:02,500 on stmt: $178binary_true_divide.17 = $174binary_add.15 / denom
DEBUG 2022-02-14 16:38:02,500 on stmt: $182load_attr.19 = getattr(value=a, attr=imag)
DEBUG 2022-02-14 16:38:02,500 on stmt: $186binary_multiply.21 = $182load_attr.19 * ratio.1
DEBUG 2022-02-14 16:38:02,500 on stmt: $190load_attr.23 = getattr(value=a, attr=real)
DEBUG 2022-02-14 16:38:02,500 on stmt: $192binary_subtract.24 = $186binary_multiply.21 - $190load_attr.23
DEBUG 2022-02-14 16:38:02,500 on stmt: $196binary_true_divide.26 = $192binary_subtract.24 / denom
DEBUG 2022-02-14 16:38:02,500 on stmt: $198call_function.27 = call $160load_global.8($178binary_true_divide.17, $196binary_true_divide.26, func=$160load_global.8, args=[Var($178binary_true_divide.17, numbers.py:1086), Var($196binary_true_divide.26, numbers.py:1087)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:02,501 on stmt: $200return_value.28 = cast(value=$198call_function.27)
DEBUG 2022-02-14 16:38:02,501 on stmt: return $200return_value.28
DEBUG 2022-02-14 16:38:02,501 Replaced assignments: defaultdict(<class 'list'>,
            {72: [<numba.core.ir.Assign object at 0x7fa0465ad250>],
             140: [<numba.core.ir.Assign object at 0x7fa0465a6eb0>]})
DEBUG 2022-02-14 16:38:02,501 ==== SSA block rewrite pass on 0
DEBUG 2022-02-14 16:38:02,501 Running <numba.core.ssa._FixSSAVars object at 0x7fa0465ad5b0>
DEBUG 2022-02-14 16:38:02,501 on stmt: a = arg(0, name=a)
DEBUG 2022-02-14 16:38:02,501 on stmt: b = arg(1, name=b)
DEBUG 2022-02-14 16:38:02,501 on stmt: areal = getattr(value=a, attr=real)
DEBUG 2022-02-14 16:38:02,501 on stmt: aimag = getattr(value=a, attr=imag)
DEBUG 2022-02-14 16:38:02,501 on stmt: breal = getattr(value=b, attr=real)
DEBUG 2022-02-14 16:38:02,501 on stmt: bimag = getattr(value=b, attr=imag)
DEBUG 2022-02-14 16:38:02,502 on stmt: bool28 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:38:02,502 on stmt: $28pred = call bool28(breal, func=bool28, args=(Var(breal, numbers.py:1066),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:02,502 on stmt: branch $28pred, 42, 30
DEBUG 2022-02-14 16:38:02,502 ==== SSA block rewrite pass on 30
DEBUG 2022-02-14 16:38:02,502 Running <numba.core.ssa._FixSSAVars object at 0x7fa0465ad5b0>
DEBUG 2022-02-14 16:38:02,502 on stmt: bool32 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:38:02,502 on stmt: $32pred = call bool32(bimag, func=bool32, args=(Var(bimag, numbers.py:1067),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:02,502 on stmt: branch $32pred, 42, 34
DEBUG 2022-02-14 16:38:02,502 ==== SSA block rewrite pass on 34
DEBUG 2022-02-14 16:38:02,502 Running <numba.core.ssa._FixSSAVars object at 0x7fa0465ad5b0>
DEBUG 2022-02-14 16:38:02,502 on stmt: $34load_global.0 = global(ZeroDivisionError: <class 'ZeroDivisionError'>)
DEBUG 2022-02-14 16:38:02,502 on stmt: $const36.1 = const(str, complex division by zero)
DEBUG 2022-02-14 16:38:02,502 on stmt: $38call_function.2 = call $34load_global.0($const36.1, func=$34load_global.0, args=[Var($const36.1, numbers.py:1069)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:02,502 on stmt: <static> raise <class 'ZeroDivisionError'>('complex division by zero')
DEBUG 2022-02-14 16:38:02,502 ==== SSA block rewrite pass on 42
DEBUG 2022-02-14 16:38:02,502 Running <numba.core.ssa._FixSSAVars object at 0x7fa0465ad5b0>
DEBUG 2022-02-14 16:38:02,502 on stmt: $42load_global.0 = global(abs: <built-in function abs>)
DEBUG 2022-02-14 16:38:02,502 on stmt: $46call_function.2 = call $42load_global.0(breal, func=$42load_global.0, args=[Var(breal, numbers.py:1066)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:02,502 on stmt: $48load_global.3 = global(abs: <built-in function abs>)
DEBUG 2022-02-14 16:38:02,502 on stmt: $52call_function.5 = call $48load_global.3(bimag, func=$48load_global.3, args=[Var(bimag, numbers.py:1067)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:02,503 on stmt: $54compare_op.6 = $46call_function.2 >= $52call_function.5
DEBUG 2022-02-14 16:38:02,503 on stmt: bool56 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:38:02,503 on stmt: $56pred = call bool56($54compare_op.6, func=bool56, args=(Var($54compare_op.6, numbers.py:1070),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:02,503 on stmt: branch $56pred, 58, 126
DEBUG 2022-02-14 16:38:02,503 ==== SSA block rewrite pass on 58
DEBUG 2022-02-14 16:38:02,503 Running <numba.core.ssa._FixSSAVars object at 0x7fa0465ad5b0>
DEBUG 2022-02-14 16:38:02,503 on stmt: bool60 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:38:02,503 on stmt: $60pred = call bool60(breal, func=bool60, args=(Var(breal, numbers.py:1066),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:02,503 on stmt: branch $60pred, 72, 62
DEBUG 2022-02-14 16:38:02,503 ==== SSA block rewrite pass on 62
DEBUG 2022-02-14 16:38:02,503 Running <numba.core.ssa._FixSSAVars object at 0x7fa0465ad5b0>
DEBUG 2022-02-14 16:38:02,503 on stmt: $62load_global.0 = global(complex: <class 'complex'>)
DEBUG 2022-02-14 16:38:02,503 on stmt: $64load_global.1 = global(NAN: nan)
DEBUG 2022-02-14 16:38:02,503 on stmt: $66load_global.2 = global(NAN: nan)
DEBUG 2022-02-14 16:38:02,503 on stmt: $68call_function.3 = call $62load_global.0($64load_global.1, $66load_global.2, func=$62load_global.0, args=[Var($64load_global.1, numbers.py:1073), Var($66load_global.2, numbers.py:1073)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:02,503 on stmt: $70return_value.4 = cast(value=$68call_function.3)
DEBUG 2022-02-14 16:38:02,503 on stmt: return $70return_value.4
DEBUG 2022-02-14 16:38:02,503 ==== SSA block rewrite pass on 72
DEBUG 2022-02-14 16:38:02,504 Running <numba.core.ssa._FixSSAVars object at 0x7fa0465ad5b0>
DEBUG 2022-02-14 16:38:02,504 on stmt: ratio = bimag / breal
DEBUG 2022-02-14 16:38:02,504 on stmt: $86binary_multiply.6 = bimag * ratio
DEBUG 2022-02-14 16:38:02,504 on stmt: denom = breal + $86binary_multiply.6
DEBUG 2022-02-14 16:38:02,504 on stmt: $92load_global.8 = global(complex: <class 'complex'>)
DEBUG 2022-02-14 16:38:02,504 on stmt: $100binary_multiply.12 = aimag * ratio
DEBUG 2022-02-14 16:38:02,504 on stmt: $102binary_add.13 = areal + $100binary_multiply.12
DEBUG 2022-02-14 16:38:02,504 on stmt: $106binary_true_divide.15 = $102binary_add.13 / denom
DEBUG 2022-02-14 16:38:02,504 find_def var='denom' stmt=$106binary_true_divide.15 = $102binary_add.13 / denom
DEBUG 2022-02-14 16:38:02,504 on stmt: $114binary_multiply.19 = areal * ratio
DEBUG 2022-02-14 16:38:02,504 on stmt: $116binary_subtract.20 = aimag - $114binary_multiply.19
DEBUG 2022-02-14 16:38:02,504 on stmt: $120binary_true_divide.22 = $116binary_subtract.20 / denom
DEBUG 2022-02-14 16:38:02,504 find_def var='denom' stmt=$120binary_true_divide.22 = $116binary_subtract.20 / denom
DEBUG 2022-02-14 16:38:02,504 on stmt: $122call_function.23 = call $92load_global.8($106binary_true_divide.15, $120binary_true_divide.22, func=$92load_global.8, args=[Var($106binary_true_divide.15, numbers.py:1077), Var($120binary_true_divide.22, numbers.py:1078)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:02,505 on stmt: $124return_value.24 = cast(value=$122call_function.23)
DEBUG 2022-02-14 16:38:02,505 on stmt: return $124return_value.24
DEBUG 2022-02-14 16:38:02,505 ==== SSA block rewrite pass on 126
DEBUG 2022-02-14 16:38:02,505 Running <numba.core.ssa._FixSSAVars object at 0x7fa0465ad5b0>
DEBUG 2022-02-14 16:38:02,505 on stmt: bool128 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:38:02,505 on stmt: $128pred = call bool128(bimag, func=bool128, args=(Var(bimag, numbers.py:1067),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:02,505 on stmt: branch $128pred, 140, 130
DEBUG 2022-02-14 16:38:02,505 ==== SSA block rewrite pass on 130
DEBUG 2022-02-14 16:38:02,505 Running <numba.core.ssa._FixSSAVars object at 0x7fa0465ad5b0>
DEBUG 2022-02-14 16:38:02,505 on stmt: $130load_global.0 = global(complex: <class 'complex'>)
DEBUG 2022-02-14 16:38:02,505 on stmt: $132load_global.1 = global(NAN: nan)
DEBUG 2022-02-14 16:38:02,505 on stmt: $134load_global.2 = global(NAN: nan)
DEBUG 2022-02-14 16:38:02,505 on stmt: $136call_function.3 = call $130load_global.0($132load_global.1, $134load_global.2, func=$130load_global.0, args=[Var($132load_global.1, numbers.py:1082), Var($134load_global.2, numbers.py:1082)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:02,505 on stmt: $138return_value.4 = cast(value=$136call_function.3)
DEBUG 2022-02-14 16:38:02,505 on stmt: return $138return_value.4
DEBUG 2022-02-14 16:38:02,505 ==== SSA block rewrite pass on 140
DEBUG 2022-02-14 16:38:02,505 Running <numba.core.ssa._FixSSAVars object at 0x7fa0465ad5b0>
DEBUG 2022-02-14 16:38:02,505 on stmt: ratio.1 = breal / bimag
DEBUG 2022-02-14 16:38:02,505 on stmt: $152binary_multiply.5 = breal * ratio.1
DEBUG 2022-02-14 16:38:02,505 on stmt: denom.1 = $152binary_multiply.5 + bimag
DEBUG 2022-02-14 16:38:02,505 on stmt: $160load_global.8 = global(complex: <class 'complex'>)
DEBUG 2022-02-14 16:38:02,505 on stmt: $164load_attr.10 = getattr(value=a, attr=real)
DEBUG 2022-02-14 16:38:02,506 on stmt: $168binary_multiply.12 = $164load_attr.10 * ratio.1
DEBUG 2022-02-14 16:38:02,506 on stmt: $172load_attr.14 = getattr(value=a, attr=imag)
DEBUG 2022-02-14 16:38:02,506 on stmt: $174binary_add.15 = $168binary_multiply.12 + $172load_attr.14
DEBUG 2022-02-14 16:38:02,506 on stmt: $178binary_true_divide.17 = $174binary_add.15 / denom
DEBUG 2022-02-14 16:38:02,506 find_def var='denom' stmt=$178binary_true_divide.17 = $174binary_add.15 / denom
DEBUG 2022-02-14 16:38:02,506 replaced with: $178binary_true_divide.17 = $174binary_add.15 / denom.1
DEBUG 2022-02-14 16:38:02,506 on stmt: $182load_attr.19 = getattr(value=a, attr=imag)
DEBUG 2022-02-14 16:38:02,506 on stmt: $186binary_multiply.21 = $182load_attr.19 * ratio.1
DEBUG 2022-02-14 16:38:02,506 on stmt: $190load_attr.23 = getattr(value=a, attr=real)
DEBUG 2022-02-14 16:38:02,506 on stmt: $192binary_subtract.24 = $186binary_multiply.21 - $190load_attr.23
DEBUG 2022-02-14 16:38:02,506 on stmt: $196binary_true_divide.26 = $192binary_subtract.24 / denom
DEBUG 2022-02-14 16:38:02,506 find_def var='denom' stmt=$196binary_true_divide.26 = $192binary_subtract.24 / denom
DEBUG 2022-02-14 16:38:02,506 replaced with: $196binary_true_divide.26 = $192binary_subtract.24 / denom.1
DEBUG 2022-02-14 16:38:02,506 on stmt: $198call_function.27 = call $160load_global.8($178binary_true_divide.17, $196binary_true_divide.26, func=$160load_global.8, args=[Var($178binary_true_divide.17, numbers.py:1086), Var($196binary_true_divide.26, numbers.py:1087)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:02,506 on stmt: $200return_value.28 = cast(value=$198call_function.27)
DEBUG 2022-02-14 16:38:02,506 on stmt: return $200return_value.28
DEBUG 2022-02-14 16:38:02,577 bytecode dump:
>          0	NOP(arg=None, lineno=509)
           2	LOAD_FAST(arg=0, lineno=509)
           4	LOAD_ATTR(arg=0, lineno=509)
           6	UNPACK_SEQUENCE(arg=1, lineno=509)
           8	STORE_FAST(arg=2, lineno=509)
          10	LOAD_FAST(arg=1, lineno=510)
          12	LOAD_ATTR(arg=0, lineno=510)
          14	UNPACK_SEQUENCE(arg=1, lineno=510)
          16	STORE_FAST(arg=3, lineno=510)
          18	LOAD_FAST(arg=2, lineno=511)
          20	LOAD_FAST(arg=3, lineno=511)
          22	COMPARE_OP(arg=3, lineno=511)
          24	POP_JUMP_IF_FALSE(arg=34, lineno=511)
          26	LOAD_GLOBAL(arg=1, lineno=512)
          28	LOAD_CONST(arg=1, lineno=512)
          30	CALL_FUNCTION(arg=1, lineno=512)
          32	RAISE_VARARGS(arg=1, lineno=512)
>         34	LOAD_CONST(arg=0, lineno=512)
          36	RETURN_VALUE(arg=None, lineno=512)
DEBUG 2022-02-14 16:38:02,577 pending: deque([State(pc_initial=0 nstack_initial=0)])
DEBUG 2022-02-14 16:38:02,578 stack: []
DEBUG 2022-02-14 16:38:02,578 dispatch pc=0, inst=NOP(arg=None, lineno=509)
DEBUG 2022-02-14 16:38:02,578 stack []
DEBUG 2022-02-14 16:38:02,578 dispatch pc=2, inst=LOAD_FAST(arg=0, lineno=509)
DEBUG 2022-02-14 16:38:02,578 stack []
DEBUG 2022-02-14 16:38:02,578 dispatch pc=4, inst=LOAD_ATTR(arg=0, lineno=509)
DEBUG 2022-02-14 16:38:02,578 stack ['$a2.0']
DEBUG 2022-02-14 16:38:02,578 dispatch pc=6, inst=UNPACK_SEQUENCE(arg=1, lineno=509)
DEBUG 2022-02-14 16:38:02,578 stack ['$4load_attr.1']
DEBUG 2022-02-14 16:38:02,578 dispatch pc=8, inst=STORE_FAST(arg=2, lineno=509)
DEBUG 2022-02-14 16:38:02,578 stack ['$6unpack_sequence.2']
DEBUG 2022-02-14 16:38:02,578 dispatch pc=10, inst=LOAD_FAST(arg=1, lineno=510)
DEBUG 2022-02-14 16:38:02,578 stack []
DEBUG 2022-02-14 16:38:02,579 dispatch pc=12, inst=LOAD_ATTR(arg=0, lineno=510)
DEBUG 2022-02-14 16:38:02,579 stack ['$b10.4']
DEBUG 2022-02-14 16:38:02,579 dispatch pc=14, inst=UNPACK_SEQUENCE(arg=1, lineno=510)
DEBUG 2022-02-14 16:38:02,579 stack ['$12load_attr.5']
DEBUG 2022-02-14 16:38:02,579 dispatch pc=16, inst=STORE_FAST(arg=3, lineno=510)
DEBUG 2022-02-14 16:38:02,579 stack ['$14unpack_sequence.6']
DEBUG 2022-02-14 16:38:02,579 dispatch pc=18, inst=LOAD_FAST(arg=2, lineno=511)
DEBUG 2022-02-14 16:38:02,579 stack []
DEBUG 2022-02-14 16:38:02,579 dispatch pc=20, inst=LOAD_FAST(arg=3, lineno=511)
DEBUG 2022-02-14 16:38:02,579 stack ['$m18.8']
DEBUG 2022-02-14 16:38:02,579 dispatch pc=22, inst=COMPARE_OP(arg=3, lineno=511)
DEBUG 2022-02-14 16:38:02,579 stack ['$m18.8', '$n20.9']
DEBUG 2022-02-14 16:38:02,579 dispatch pc=24, inst=POP_JUMP_IF_FALSE(arg=34, lineno=511)
DEBUG 2022-02-14 16:38:02,579 stack ['$22compare_op.10']
DEBUG 2022-02-14 16:38:02,579 end state. edges=[Edge(pc=26, stack=(), blockstack=(), npush=0), Edge(pc=34, stack=(), blockstack=(), npush=0)]
DEBUG 2022-02-14 16:38:02,580 pending: deque([State(pc_initial=26 nstack_initial=0), State(pc_initial=34 nstack_initial=0)])
DEBUG 2022-02-14 16:38:02,580 stack: []
DEBUG 2022-02-14 16:38:02,580 dispatch pc=26, inst=LOAD_GLOBAL(arg=1, lineno=512)
DEBUG 2022-02-14 16:38:02,580 stack []
DEBUG 2022-02-14 16:38:02,580 dispatch pc=28, inst=LOAD_CONST(arg=1, lineno=512)
DEBUG 2022-02-14 16:38:02,580 stack ['$26load_global.0']
DEBUG 2022-02-14 16:38:02,580 dispatch pc=30, inst=CALL_FUNCTION(arg=1, lineno=512)
DEBUG 2022-02-14 16:38:02,580 stack ['$26load_global.0', '$const28.1']
DEBUG 2022-02-14 16:38:02,580 dispatch pc=32, inst=RAISE_VARARGS(arg=1, lineno=512)
DEBUG 2022-02-14 16:38:02,580 stack ['$30call_function.2']
DEBUG 2022-02-14 16:38:02,580 end state. edges=[]
DEBUG 2022-02-14 16:38:02,580 pending: deque([State(pc_initial=34 nstack_initial=0)])
DEBUG 2022-02-14 16:38:02,580 stack: []
DEBUG 2022-02-14 16:38:02,580 dispatch pc=34, inst=LOAD_CONST(arg=0, lineno=512)
DEBUG 2022-02-14 16:38:02,580 stack []
DEBUG 2022-02-14 16:38:02,581 dispatch pc=36, inst=RETURN_VALUE(arg=None, lineno=512)
DEBUG 2022-02-14 16:38:02,581 stack ['$const34.0']
DEBUG 2022-02-14 16:38:02,581 end state. edges=[]
DEBUG 2022-02-14 16:38:02,581 -------------------------Prune PHIs-------------------------
DEBUG 2022-02-14 16:38:02,581 Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=26 nstack_initial=0): set(),
             State(pc_initial=34 nstack_initial=0): set()})
DEBUG 2022-02-14 16:38:02,581 defmap: {}
DEBUG 2022-02-14 16:38:02,581 phismap: defaultdict(<class 'set'>, {})
DEBUG 2022-02-14 16:38:02,581 changing phismap: defaultdict(<class 'set'>, {})
DEBUG 2022-02-14 16:38:02,581 keep phismap: {}
DEBUG 2022-02-14 16:38:02,581 new_out: defaultdict(<class 'dict'>, {})
DEBUG 2022-02-14 16:38:02,582 ----------------------DONE Prune PHIs-----------------------
DEBUG 2022-02-14 16:38:02,582 block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$a2.0'}), (4, {'item': '$a2.0', 'res': '$4load_attr.1'}), (6, {'iterable': '$4load_attr.1', 'stores': ['$6unpack_sequence.2'], 'tupleobj': '$6unpack_sequence.3'}), (8, {'value': '$6unpack_sequence.2'}), (10, {'res': '$b10.4'}), (12, {'item': '$b10.4', 'res': '$12load_attr.5'}), (14, {'iterable': '$12load_attr.5', 'stores': ['$14unpack_sequence.6'], 'tupleobj': '$14unpack_sequence.7'}), (16, {'value': '$14unpack_sequence.6'}), (18, {'res': '$m18.8'}), (20, {'res': '$n20.9'}), (22, {'lhs': '$m18.8', 'rhs': '$n20.9', 'res': '$22compare_op.10'}), (24, {'pred': '$22compare_op.10'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={26: (), 34: ()})
DEBUG 2022-02-14 16:38:02,582 block_infos State(pc_initial=26 nstack_initial=0):
AdaptBlockInfo(insts=((26, {'res': '$26load_global.0'}), (28, {'res': '$const28.1'}), (30, {'func': '$26load_global.0', 'args': ['$const28.1'], 'res': '$30call_function.2'}), (32, {'exc': '$30call_function.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG 2022-02-14 16:38:02,582 block_infos State(pc_initial=34 nstack_initial=0):
AdaptBlockInfo(insts=((34, {'res': '$const34.0'}), (36, {'retval': '$const34.0', 'castval': '$36return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG 2022-02-14 16:38:02,583 label 0:
    a = arg(0, name=a)                       ['a']
    b = arg(1, name=b)                       ['b']
    $4load_attr.1 = getattr(value=a, attr=shape) ['$4load_attr.1', 'a']
    $6unpack_sequence.3 = exhaust_iter(value=$4load_attr.1, count=1) ['$4load_attr.1', '$6unpack_sequence.3']
    m = static_getitem(value=$6unpack_sequence.3, index=0, index_var=None, fn=<built-in function getitem>) ['$6unpack_sequence.3', 'm']
    $12load_attr.5 = getattr(value=b, attr=shape) ['$12load_attr.5', 'b']
    $14unpack_sequence.7 = exhaust_iter(value=$12load_attr.5, count=1) ['$12load_attr.5', '$14unpack_sequence.7']
    n = static_getitem(value=$14unpack_sequence.7, index=0, index_var=None, fn=<built-in function getitem>) ['$14unpack_sequence.7', 'n']
    $22compare_op.10 = m != n                ['$22compare_op.10', 'm', 'n']
    bool24 = global(bool: <class 'bool'>)    ['bool24']
    $24pred = call bool24($22compare_op.10, func=bool24, args=(Var($22compare_op.10, linalg.py:511),), kws=(), vararg=None, target=None) ['$22compare_op.10', '$24pred', 'bool24']
    branch $24pred, 26, 34                   ['$24pred']
label 26:
    $26load_global.0 = global(ValueError: <class 'ValueError'>) ['$26load_global.0']
    $const28.1 = const(str, incompatible array sizes for np.dot(a, b) (vector * vector)) ['$const28.1']
    $30call_function.2 = call $26load_global.0($const28.1, func=$26load_global.0, args=[Var($const28.1, linalg.py:512)], kws=(), vararg=None, target=None) ['$26load_global.0', '$30call_function.2', '$const28.1']
    raise $30call_function.2                 ['$30call_function.2']
label 34:
    $const34.0 = const(NoneType, None)       ['$const34.0']
    $36return_value.1 = cast(value=$const34.0) ['$36return_value.1', '$const34.0']
    return $36return_value.1                 ['$36return_value.1']

DEBUG 2022-02-14 16:38:02,587 ==== SSA block analysis pass on 0
DEBUG 2022-02-14 16:38:02,587 Running <numba.core.ssa._GatherDefsHandler object at 0x7fa04661aca0>
DEBUG 2022-02-14 16:38:02,587 on stmt: a = arg(0, name=a)
DEBUG 2022-02-14 16:38:02,587 on stmt: b = arg(1, name=b)
DEBUG 2022-02-14 16:38:02,587 on stmt: $4load_attr.1 = getattr(value=a, attr=shape)
DEBUG 2022-02-14 16:38:02,587 on stmt: $6unpack_sequence.3 = exhaust_iter(value=$4load_attr.1, count=1)
DEBUG 2022-02-14 16:38:02,587 on stmt: m = static_getitem(value=$6unpack_sequence.3, index=0, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:02,587 on stmt: $12load_attr.5 = getattr(value=b, attr=shape)
DEBUG 2022-02-14 16:38:02,587 on stmt: $14unpack_sequence.7 = exhaust_iter(value=$12load_attr.5, count=1)
DEBUG 2022-02-14 16:38:02,587 on stmt: n = static_getitem(value=$14unpack_sequence.7, index=0, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:02,587 on stmt: $22compare_op.10 = m != n
DEBUG 2022-02-14 16:38:02,587 on stmt: bool24 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:38:02,588 on stmt: $24pred = call bool24($22compare_op.10, func=bool24, args=(Var($22compare_op.10, linalg.py:511),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:02,588 on stmt: branch $24pred, 26, 34
DEBUG 2022-02-14 16:38:02,588 ==== SSA block analysis pass on 26
DEBUG 2022-02-14 16:38:02,588 Running <numba.core.ssa._GatherDefsHandler object at 0x7fa04661aca0>
DEBUG 2022-02-14 16:38:02,588 on stmt: $26load_global.0 = global(ValueError: <class 'ValueError'>)
DEBUG 2022-02-14 16:38:02,588 on stmt: $const28.1 = const(str, incompatible array sizes for np.dot(a, b) (vector * vector))
DEBUG 2022-02-14 16:38:02,588 on stmt: $30call_function.2 = call $26load_global.0($const28.1, func=$26load_global.0, args=[Var($const28.1, linalg.py:512)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:02,588 on stmt: <static> raise <class 'ValueError'>('incompatible array sizes for np.dot(a, b) (vector * vector)')
DEBUG 2022-02-14 16:38:02,588 ==== SSA block analysis pass on 34
DEBUG 2022-02-14 16:38:02,588 Running <numba.core.ssa._GatherDefsHandler object at 0x7fa04661aca0>
DEBUG 2022-02-14 16:38:02,588 on stmt: $const34.0 = const(NoneType, None)
DEBUG 2022-02-14 16:38:02,588 on stmt: $36return_value.1 = cast(value=$const34.0)
DEBUG 2022-02-14 16:38:02,588 on stmt: return $36return_value.1
DEBUG 2022-02-14 16:38:02,588 defs defaultdict(<class 'list'>,
            {'$12load_attr.5': [<numba.core.ir.Assign object at 0x7fa04661a910>],
             '$14unpack_sequence.7': [<numba.core.ir.Assign object at 0x7fa046558cd0>],
             '$22compare_op.10': [<numba.core.ir.Assign object at 0x7fa0465571f0>],
             '$24pred': [<numba.core.ir.Assign object at 0x7fa046557d90>],
             '$26load_global.0': [<numba.core.ir.Assign object at 0x7fa046557430>],
             '$30call_function.2': [<numba.core.ir.Assign object at 0x7fa04655d190>],
             '$36return_value.1': [<numba.core.ir.Assign object at 0x7fa04655d5b0>],
             '$4load_attr.1': [<numba.core.ir.Assign object at 0x7fa046557790>],
             '$6unpack_sequence.3': [<numba.core.ir.Assign object at 0x7fa046557940>],
             '$const28.1': [<numba.core.ir.Assign object at 0x7fa046557f70>],
             '$const34.0': [<numba.core.ir.Assign object at 0x7fa04655d430>],
             'a': [<numba.core.ir.Assign object at 0x7fa046558460>],
             'b': [<numba.core.ir.Assign object at 0x7fa0465574f0>],
             'bool24': [<numba.core.ir.Assign object at 0x7fa0465570a0>],
             'm': [<numba.core.ir.Assign object at 0x7fa046557a90>],
             'n': [<numba.core.ir.Assign object at 0x7fa046558c10>]})
DEBUG 2022-02-14 16:38:02,588 SSA violators set()
DEBUG 2022-02-14 16:38:02,610 bytecode dump:
>          0	NOP(arg=None, lineno=309)
           2	LOAD_FAST(arg=0, lineno=309)
           4	LOAD_DEREF(arg=0, lineno=309)
           6	COMPARE_OP(arg=4, lineno=309)
           8	POP_JUMP_IF_FALSE(arg=18, lineno=309)
          10	LOAD_GLOBAL(arg=0, lineno=310)
          12	LOAD_CONST(arg=1, lineno=310)
          14	CALL_FUNCTION(arg=1, lineno=310)
          16	RAISE_VARARGS(arg=1, lineno=310)
>         18	LOAD_CONST(arg=0, lineno=310)
          20	RETURN_VALUE(arg=None, lineno=310)
DEBUG 2022-02-14 16:38:02,610 pending: deque([State(pc_initial=0 nstack_initial=0)])
DEBUG 2022-02-14 16:38:02,610 stack: []
DEBUG 2022-02-14 16:38:02,610 dispatch pc=0, inst=NOP(arg=None, lineno=309)
DEBUG 2022-02-14 16:38:02,610 stack []
DEBUG 2022-02-14 16:38:02,610 dispatch pc=2, inst=LOAD_FAST(arg=0, lineno=309)
DEBUG 2022-02-14 16:38:02,610 stack []
DEBUG 2022-02-14 16:38:02,610 dispatch pc=4, inst=LOAD_DEREF(arg=0, lineno=309)
DEBUG 2022-02-14 16:38:02,610 stack ['$n2.0']
DEBUG 2022-02-14 16:38:02,610 dispatch pc=6, inst=COMPARE_OP(arg=4, lineno=309)
DEBUG 2022-02-14 16:38:02,610 stack ['$n2.0', '$4load_deref.1']
DEBUG 2022-02-14 16:38:02,610 dispatch pc=8, inst=POP_JUMP_IF_FALSE(arg=18, lineno=309)
DEBUG 2022-02-14 16:38:02,610 stack ['$6compare_op.2']
DEBUG 2022-02-14 16:38:02,610 end state. edges=[Edge(pc=10, stack=(), blockstack=(), npush=0), Edge(pc=18, stack=(), blockstack=(), npush=0)]
DEBUG 2022-02-14 16:38:02,610 pending: deque([State(pc_initial=10 nstack_initial=0), State(pc_initial=18 nstack_initial=0)])
DEBUG 2022-02-14 16:38:02,610 stack: []
DEBUG 2022-02-14 16:38:02,611 dispatch pc=10, inst=LOAD_GLOBAL(arg=0, lineno=310)
DEBUG 2022-02-14 16:38:02,611 stack []
DEBUG 2022-02-14 16:38:02,611 dispatch pc=12, inst=LOAD_CONST(arg=1, lineno=310)
DEBUG 2022-02-14 16:38:02,611 stack ['$10load_global.0']
DEBUG 2022-02-14 16:38:02,611 dispatch pc=14, inst=CALL_FUNCTION(arg=1, lineno=310)
DEBUG 2022-02-14 16:38:02,611 stack ['$10load_global.0', '$const12.1']
DEBUG 2022-02-14 16:38:02,611 dispatch pc=16, inst=RAISE_VARARGS(arg=1, lineno=310)
DEBUG 2022-02-14 16:38:02,611 stack ['$14call_function.2']
DEBUG 2022-02-14 16:38:02,611 end state. edges=[]
DEBUG 2022-02-14 16:38:02,611 pending: deque([State(pc_initial=18 nstack_initial=0)])
DEBUG 2022-02-14 16:38:02,611 stack: []
DEBUG 2022-02-14 16:38:02,611 dispatch pc=18, inst=LOAD_CONST(arg=0, lineno=310)
DEBUG 2022-02-14 16:38:02,611 stack []
DEBUG 2022-02-14 16:38:02,611 dispatch pc=20, inst=RETURN_VALUE(arg=None, lineno=310)
DEBUG 2022-02-14 16:38:02,611 stack ['$const18.0']
DEBUG 2022-02-14 16:38:02,611 end state. edges=[]
DEBUG 2022-02-14 16:38:02,611 -------------------------Prune PHIs-------------------------
DEBUG 2022-02-14 16:38:02,611 Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=10 nstack_initial=0): set(),
             State(pc_initial=18 nstack_initial=0): set()})
DEBUG 2022-02-14 16:38:02,611 defmap: {}
DEBUG 2022-02-14 16:38:02,612 phismap: defaultdict(<class 'set'>, {})
DEBUG 2022-02-14 16:38:02,612 changing phismap: defaultdict(<class 'set'>, {})
DEBUG 2022-02-14 16:38:02,612 keep phismap: {}
DEBUG 2022-02-14 16:38:02,612 new_out: defaultdict(<class 'dict'>, {})
DEBUG 2022-02-14 16:38:02,612 ----------------------DONE Prune PHIs-----------------------
DEBUG 2022-02-14 16:38:02,612 block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$n2.0'}), (4, {'res': '$4load_deref.1'}), (6, {'lhs': '$n2.0', 'rhs': '$4load_deref.1', 'res': '$6compare_op.2'}), (8, {'pred': '$6compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={10: (), 18: ()})
DEBUG 2022-02-14 16:38:02,612 block_infos State(pc_initial=10 nstack_initial=0):
AdaptBlockInfo(insts=((10, {'res': '$10load_global.0'}), (12, {'res': '$const12.1'}), (14, {'func': '$10load_global.0', 'args': ['$const12.1'], 'res': '$14call_function.2'}), (16, {'exc': '$14call_function.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG 2022-02-14 16:38:02,612 block_infos State(pc_initial=18 nstack_initial=0):
AdaptBlockInfo(insts=((18, {'res': '$const18.0'}), (20, {'retval': '$const18.0', 'castval': '$20return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG 2022-02-14 16:38:02,612 label 0:
    n = arg(0, name=n)                       ['n']
    $4load_deref.1 = freevar(_maxint: 2147483647) ['$4load_deref.1']
    $6compare_op.2 = n > $4load_deref.1      ['$4load_deref.1', '$6compare_op.2', 'n']
    bool8 = global(bool: <class 'bool'>)     ['bool8']
    $8pred = call bool8($6compare_op.2, func=bool8, args=(Var($6compare_op.2, linalg.py:309),), kws=(), vararg=None, target=None) ['$6compare_op.2', '$8pred', 'bool8']
    branch $8pred, 10, 18                    ['$8pred']
label 10:
    $10load_global.0 = global(OverflowError: <class 'OverflowError'>) ['$10load_global.0']
    $const12.1 = const(str, array size too large to fit in C int) ['$const12.1']
    $14call_function.2 = call $10load_global.0($const12.1, func=$10load_global.0, args=[Var($const12.1, linalg.py:310)], kws=(), vararg=None, target=None) ['$10load_global.0', '$14call_function.2', '$const12.1']
    raise $14call_function.2                 ['$14call_function.2']
label 18:
    $const18.0 = const(NoneType, None)       ['$const18.0']
    $20return_value.1 = cast(value=$const18.0) ['$20return_value.1', '$const18.0']
    return $20return_value.1                 ['$20return_value.1']

DEBUG 2022-02-14 16:38:02,614 ==== SSA block analysis pass on 0
DEBUG 2022-02-14 16:38:02,615 Running <numba.core.ssa._GatherDefsHandler object at 0x7fa046581cd0>
DEBUG 2022-02-14 16:38:02,615 on stmt: n = arg(0, name=n)
DEBUG 2022-02-14 16:38:02,615 on stmt: $4load_deref.1 = freevar(_maxint: 2147483647)
DEBUG 2022-02-14 16:38:02,615 on stmt: $6compare_op.2 = n > $4load_deref.1
DEBUG 2022-02-14 16:38:02,615 on stmt: bool8 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:38:02,615 on stmt: $8pred = call bool8($6compare_op.2, func=bool8, args=(Var($6compare_op.2, linalg.py:309),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:02,615 on stmt: branch $8pred, 10, 18
DEBUG 2022-02-14 16:38:02,615 ==== SSA block analysis pass on 10
DEBUG 2022-02-14 16:38:02,615 Running <numba.core.ssa._GatherDefsHandler object at 0x7fa046581cd0>
DEBUG 2022-02-14 16:38:02,615 on stmt: $10load_global.0 = global(OverflowError: <class 'OverflowError'>)
DEBUG 2022-02-14 16:38:02,615 on stmt: $const12.1 = const(str, array size too large to fit in C int)
DEBUG 2022-02-14 16:38:02,615 on stmt: $14call_function.2 = call $10load_global.0($const12.1, func=$10load_global.0, args=[Var($const12.1, linalg.py:310)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:02,615 on stmt: <static> raise <class 'OverflowError'>('array size too large to fit in C int')
DEBUG 2022-02-14 16:38:02,615 ==== SSA block analysis pass on 18
DEBUG 2022-02-14 16:38:02,615 Running <numba.core.ssa._GatherDefsHandler object at 0x7fa046581cd0>
DEBUG 2022-02-14 16:38:02,615 on stmt: $const18.0 = const(NoneType, None)
DEBUG 2022-02-14 16:38:02,615 on stmt: $20return_value.1 = cast(value=$const18.0)
DEBUG 2022-02-14 16:38:02,615 on stmt: return $20return_value.1
DEBUG 2022-02-14 16:38:02,616 defs defaultdict(<class 'list'>,
            {'$10load_global.0': [<numba.core.ir.Assign object at 0x7fa046584dc0>],
             '$14call_function.2': [<numba.core.ir.Assign object at 0x7fa046505160>],
             '$20return_value.1': [<numba.core.ir.Assign object at 0x7fa046505580>],
             '$4load_deref.1': [<numba.core.ir.Assign object at 0x7fa046584760>],
             '$6compare_op.2': [<numba.core.ir.Assign object at 0x7fa046584910>],
             '$8pred': [<numba.core.ir.Assign object at 0x7fa046584b80>],
             '$const12.1': [<numba.core.ir.Assign object at 0x7fa046584f40>],
             '$const18.0': [<numba.core.ir.Assign object at 0x7fa046505400>],
             'bool8': [<numba.core.ir.Assign object at 0x7fa046584a60>],
             'n': [<numba.core.ir.Assign object at 0x7fa0465840d0>]})
DEBUG 2022-02-14 16:38:02,616 SSA violators set()
DEBUG 2022-02-14 16:38:02,639 bytecode dump:
>          0	NOP(arg=None, lineno=470)
           2	LOAD_FAST(arg=0, lineno=470)
           4	LOAD_ATTR(arg=0, lineno=470)
           6	UNPACK_SEQUENCE(arg=1, lineno=470)
           8	STORE_FAST(arg=2, lineno=470)
          10	LOAD_FAST(arg=1, lineno=471)
          12	LOAD_ATTR(arg=0, lineno=471)
          14	UNPACK_SEQUENCE(arg=2, lineno=471)
          16	STORE_FAST(arg=3, lineno=471)
          18	STORE_FAST(arg=4, lineno=471)
          20	LOAD_FAST(arg=2, lineno=472)
          22	LOAD_CONST(arg=1, lineno=472)
          24	COMPARE_OP(arg=2, lineno=472)
          26	POP_JUMP_IF_FALSE(arg=44, lineno=472)
          28	LOAD_GLOBAL(arg=1, lineno=473)
          30	LOAD_METHOD(arg=2, lineno=473)
          32	LOAD_FAST(arg=4, lineno=473)
          34	BUILD_TUPLE(arg=1, lineno=473)
          36	LOAD_FAST(arg=0, lineno=473)
          38	LOAD_ATTR(arg=3, lineno=473)
          40	CALL_METHOD(arg=2, lineno=473)
          42	RETURN_VALUE(arg=None, lineno=473)
>         44	LOAD_GLOBAL(arg=1, lineno=474)
          46	LOAD_METHOD(arg=4, lineno=474)
          48	LOAD_FAST(arg=4, lineno=474)
          50	BUILD_TUPLE(arg=1, lineno=474)
          52	LOAD_FAST(arg=0, lineno=474)
          54	LOAD_ATTR(arg=3, lineno=474)
          56	CALL_METHOD(arg=2, lineno=474)
          58	STORE_FAST(arg=5, lineno=474)
          60	LOAD_GLOBAL(arg=1, lineno=475)
          62	LOAD_METHOD(arg=5, lineno=475)
          64	LOAD_FAST(arg=0, lineno=475)
          66	LOAD_FAST(arg=1, lineno=475)
          68	LOAD_FAST(arg=5, lineno=475)
          70	CALL_METHOD(arg=3, lineno=475)
          72	RETURN_VALUE(arg=None, lineno=475)
DEBUG 2022-02-14 16:38:02,639 pending: deque([State(pc_initial=0 nstack_initial=0)])
DEBUG 2022-02-14 16:38:02,639 stack: []
DEBUG 2022-02-14 16:38:02,639 dispatch pc=0, inst=NOP(arg=None, lineno=470)
DEBUG 2022-02-14 16:38:02,639 stack []
DEBUG 2022-02-14 16:38:02,640 dispatch pc=2, inst=LOAD_FAST(arg=0, lineno=470)
DEBUG 2022-02-14 16:38:02,640 stack []
DEBUG 2022-02-14 16:38:02,640 dispatch pc=4, inst=LOAD_ATTR(arg=0, lineno=470)
DEBUG 2022-02-14 16:38:02,640 stack ['$a2.0']
DEBUG 2022-02-14 16:38:02,640 dispatch pc=6, inst=UNPACK_SEQUENCE(arg=1, lineno=470)
DEBUG 2022-02-14 16:38:02,640 stack ['$4load_attr.1']
DEBUG 2022-02-14 16:38:02,640 dispatch pc=8, inst=STORE_FAST(arg=2, lineno=470)
DEBUG 2022-02-14 16:38:02,640 stack ['$6unpack_sequence.2']
DEBUG 2022-02-14 16:38:02,640 dispatch pc=10, inst=LOAD_FAST(arg=1, lineno=471)
DEBUG 2022-02-14 16:38:02,640 stack []
DEBUG 2022-02-14 16:38:02,640 dispatch pc=12, inst=LOAD_ATTR(arg=0, lineno=471)
DEBUG 2022-02-14 16:38:02,640 stack ['$b10.4']
DEBUG 2022-02-14 16:38:02,640 dispatch pc=14, inst=UNPACK_SEQUENCE(arg=2, lineno=471)
DEBUG 2022-02-14 16:38:02,640 stack ['$12load_attr.5']
DEBUG 2022-02-14 16:38:02,640 dispatch pc=16, inst=STORE_FAST(arg=3, lineno=471)
DEBUG 2022-02-14 16:38:02,640 stack ['$14unpack_sequence.7', '$14unpack_sequence.6']
DEBUG 2022-02-14 16:38:02,640 dispatch pc=18, inst=STORE_FAST(arg=4, lineno=471)
DEBUG 2022-02-14 16:38:02,640 stack ['$14unpack_sequence.7']
DEBUG 2022-02-14 16:38:02,640 dispatch pc=20, inst=LOAD_FAST(arg=2, lineno=472)
DEBUG 2022-02-14 16:38:02,640 stack []
DEBUG 2022-02-14 16:38:02,640 dispatch pc=22, inst=LOAD_CONST(arg=1, lineno=472)
DEBUG 2022-02-14 16:38:02,640 stack ['$m20.9']
DEBUG 2022-02-14 16:38:02,640 dispatch pc=24, inst=COMPARE_OP(arg=2, lineno=472)
DEBUG 2022-02-14 16:38:02,641 stack ['$m20.9', '$const22.10']
DEBUG 2022-02-14 16:38:02,641 dispatch pc=26, inst=POP_JUMP_IF_FALSE(arg=44, lineno=472)
DEBUG 2022-02-14 16:38:02,641 stack ['$24compare_op.11']
DEBUG 2022-02-14 16:38:02,641 end state. edges=[Edge(pc=28, stack=(), blockstack=(), npush=0), Edge(pc=44, stack=(), blockstack=(), npush=0)]
DEBUG 2022-02-14 16:38:02,641 pending: deque([State(pc_initial=28 nstack_initial=0), State(pc_initial=44 nstack_initial=0)])
DEBUG 2022-02-14 16:38:02,641 stack: []
DEBUG 2022-02-14 16:38:02,641 dispatch pc=28, inst=LOAD_GLOBAL(arg=1, lineno=473)
DEBUG 2022-02-14 16:38:02,641 stack []
DEBUG 2022-02-14 16:38:02,641 dispatch pc=30, inst=LOAD_METHOD(arg=2, lineno=473)
DEBUG 2022-02-14 16:38:02,641 stack ['$28load_global.0']
DEBUG 2022-02-14 16:38:02,641 dispatch pc=32, inst=LOAD_FAST(arg=4, lineno=473)
DEBUG 2022-02-14 16:38:02,641 stack ['$30load_method.1']
DEBUG 2022-02-14 16:38:02,641 dispatch pc=34, inst=BUILD_TUPLE(arg=1, lineno=473)
DEBUG 2022-02-14 16:38:02,641 stack ['$30load_method.1', '$n32.2']
DEBUG 2022-02-14 16:38:02,641 dispatch pc=36, inst=LOAD_FAST(arg=0, lineno=473)
DEBUG 2022-02-14 16:38:02,641 stack ['$30load_method.1', '$34build_tuple.3']
DEBUG 2022-02-14 16:38:02,641 dispatch pc=38, inst=LOAD_ATTR(arg=3, lineno=473)
DEBUG 2022-02-14 16:38:02,641 stack ['$30load_method.1', '$34build_tuple.3', '$a36.4']
DEBUG 2022-02-14 16:38:02,641 dispatch pc=40, inst=CALL_METHOD(arg=2, lineno=473)
DEBUG 2022-02-14 16:38:02,641 stack ['$30load_method.1', '$34build_tuple.3', '$38load_attr.5']
DEBUG 2022-02-14 16:38:02,641 dispatch pc=42, inst=RETURN_VALUE(arg=None, lineno=473)
DEBUG 2022-02-14 16:38:02,642 stack ['$40call_method.6']
DEBUG 2022-02-14 16:38:02,642 end state. edges=[]
DEBUG 2022-02-14 16:38:02,642 pending: deque([State(pc_initial=44 nstack_initial=0)])
DEBUG 2022-02-14 16:38:02,642 stack: []
DEBUG 2022-02-14 16:38:02,642 dispatch pc=44, inst=LOAD_GLOBAL(arg=1, lineno=474)
DEBUG 2022-02-14 16:38:02,642 stack []
DEBUG 2022-02-14 16:38:02,642 dispatch pc=46, inst=LOAD_METHOD(arg=4, lineno=474)
DEBUG 2022-02-14 16:38:02,642 stack ['$44load_global.0']
DEBUG 2022-02-14 16:38:02,642 dispatch pc=48, inst=LOAD_FAST(arg=4, lineno=474)
DEBUG 2022-02-14 16:38:02,642 stack ['$46load_method.1']
DEBUG 2022-02-14 16:38:02,642 dispatch pc=50, inst=BUILD_TUPLE(arg=1, lineno=474)
DEBUG 2022-02-14 16:38:02,642 stack ['$46load_method.1', '$n48.2']
DEBUG 2022-02-14 16:38:02,642 dispatch pc=52, inst=LOAD_FAST(arg=0, lineno=474)
DEBUG 2022-02-14 16:38:02,642 stack ['$46load_method.1', '$50build_tuple.3']
DEBUG 2022-02-14 16:38:02,642 dispatch pc=54, inst=LOAD_ATTR(arg=3, lineno=474)
DEBUG 2022-02-14 16:38:02,642 stack ['$46load_method.1', '$50build_tuple.3', '$a52.4']
DEBUG 2022-02-14 16:38:02,642 dispatch pc=56, inst=CALL_METHOD(arg=2, lineno=474)
DEBUG 2022-02-14 16:38:02,642 stack ['$46load_method.1', '$50build_tuple.3', '$54load_attr.5']
DEBUG 2022-02-14 16:38:02,642 dispatch pc=58, inst=STORE_FAST(arg=5, lineno=474)
DEBUG 2022-02-14 16:38:02,642 stack ['$56call_method.6']
DEBUG 2022-02-14 16:38:02,642 dispatch pc=60, inst=LOAD_GLOBAL(arg=1, lineno=475)
DEBUG 2022-02-14 16:38:02,642 stack []
DEBUG 2022-02-14 16:38:02,642 dispatch pc=62, inst=LOAD_METHOD(arg=5, lineno=475)
DEBUG 2022-02-14 16:38:02,643 stack ['$60load_global.7']
DEBUG 2022-02-14 16:38:02,643 dispatch pc=64, inst=LOAD_FAST(arg=0, lineno=475)
DEBUG 2022-02-14 16:38:02,643 stack ['$62load_method.8']
DEBUG 2022-02-14 16:38:02,643 dispatch pc=66, inst=LOAD_FAST(arg=1, lineno=475)
DEBUG 2022-02-14 16:38:02,643 stack ['$62load_method.8', '$a64.9']
DEBUG 2022-02-14 16:38:02,643 dispatch pc=68, inst=LOAD_FAST(arg=5, lineno=475)
DEBUG 2022-02-14 16:38:02,643 stack ['$62load_method.8', '$a64.9', '$b66.10']
DEBUG 2022-02-14 16:38:02,643 dispatch pc=70, inst=CALL_METHOD(arg=3, lineno=475)
DEBUG 2022-02-14 16:38:02,643 stack ['$62load_method.8', '$a64.9', '$b66.10', '$out68.11']
DEBUG 2022-02-14 16:38:02,643 dispatch pc=72, inst=RETURN_VALUE(arg=None, lineno=475)
DEBUG 2022-02-14 16:38:02,643 stack ['$70call_method.12']
DEBUG 2022-02-14 16:38:02,643 end state. edges=[]
DEBUG 2022-02-14 16:38:02,643 -------------------------Prune PHIs-------------------------
DEBUG 2022-02-14 16:38:02,643 Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=28 nstack_initial=0): set(),
             State(pc_initial=44 nstack_initial=0): set()})
DEBUG 2022-02-14 16:38:02,643 defmap: {}
DEBUG 2022-02-14 16:38:02,643 phismap: defaultdict(<class 'set'>, {})
DEBUG 2022-02-14 16:38:02,643 changing phismap: defaultdict(<class 'set'>, {})
DEBUG 2022-02-14 16:38:02,643 keep phismap: {}
DEBUG 2022-02-14 16:38:02,644 new_out: defaultdict(<class 'dict'>, {})
DEBUG 2022-02-14 16:38:02,644 ----------------------DONE Prune PHIs-----------------------
DEBUG 2022-02-14 16:38:02,644 block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$a2.0'}), (4, {'item': '$a2.0', 'res': '$4load_attr.1'}), (6, {'iterable': '$4load_attr.1', 'stores': ['$6unpack_sequence.2'], 'tupleobj': '$6unpack_sequence.3'}), (8, {'value': '$6unpack_sequence.2'}), (10, {'res': '$b10.4'}), (12, {'item': '$b10.4', 'res': '$12load_attr.5'}), (14, {'iterable': '$12load_attr.5', 'stores': ['$14unpack_sequence.6', '$14unpack_sequence.7'], 'tupleobj': '$14unpack_sequence.8'}), (16, {'value': '$14unpack_sequence.6'}), (18, {'value': '$14unpack_sequence.7'}), (20, {'res': '$m20.9'}), (22, {'res': '$const22.10'}), (24, {'lhs': '$m20.9', 'rhs': '$const22.10', 'res': '$24compare_op.11'}), (26, {'pred': '$24compare_op.11'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={28: (), 44: ()})
DEBUG 2022-02-14 16:38:02,644 block_infos State(pc_initial=28 nstack_initial=0):
AdaptBlockInfo(insts=((28, {'res': '$28load_global.0'}), (30, {'item': '$28load_global.0', 'res': '$30load_method.1'}), (32, {'res': '$n32.2'}), (34, {'items': ['$n32.2'], 'res': '$34build_tuple.3'}), (36, {'res': '$a36.4'}), (38, {'item': '$a36.4', 'res': '$38load_attr.5'}), (40, {'func': '$30load_method.1', 'args': ['$34build_tuple.3', '$38load_attr.5'], 'res': '$40call_method.6'}), (42, {'retval': '$40call_method.6', 'castval': '$42return_value.7'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG 2022-02-14 16:38:02,644 block_infos State(pc_initial=44 nstack_initial=0):
AdaptBlockInfo(insts=((44, {'res': '$44load_global.0'}), (46, {'item': '$44load_global.0', 'res': '$46load_method.1'}), (48, {'res': '$n48.2'}), (50, {'items': ['$n48.2'], 'res': '$50build_tuple.3'}), (52, {'res': '$a52.4'}), (54, {'item': '$a52.4', 'res': '$54load_attr.5'}), (56, {'func': '$46load_method.1', 'args': ['$50build_tuple.3', '$54load_attr.5'], 'res': '$56call_method.6'}), (58, {'value': '$56call_method.6'}), (60, {'res': '$60load_global.7'}), (62, {'item': '$60load_global.7', 'res': '$62load_method.8'}), (64, {'res': '$a64.9'}), (66, {'res': '$b66.10'}), (68, {'res': '$out68.11'}), (70, {'func': '$62load_method.8', 'args': ['$a64.9', '$b66.10', '$out68.11'], 'res': '$70call_method.12'}), (72, {'retval': '$70call_method.12', 'castval': '$72return_value.13'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG 2022-02-14 16:38:02,645 label 0:
    a = arg(0, name=a)                       ['a']
    b = arg(1, name=b)                       ['b']
    $4load_attr.1 = getattr(value=a, attr=shape) ['$4load_attr.1', 'a']
    $6unpack_sequence.3 = exhaust_iter(value=$4load_attr.1, count=1) ['$4load_attr.1', '$6unpack_sequence.3']
    m = static_getitem(value=$6unpack_sequence.3, index=0, index_var=None, fn=<built-in function getitem>) ['$6unpack_sequence.3', 'm']
    $12load_attr.5 = getattr(value=b, attr=shape) ['$12load_attr.5', 'b']
    $14unpack_sequence.8 = exhaust_iter(value=$12load_attr.5, count=2) ['$12load_attr.5', '$14unpack_sequence.8']
    $14unpack_sequence.6 = static_getitem(value=$14unpack_sequence.8, index=0, index_var=None, fn=<built-in function getitem>) ['$14unpack_sequence.6', '$14unpack_sequence.8']
    $14unpack_sequence.7 = static_getitem(value=$14unpack_sequence.8, index=1, index_var=None, fn=<built-in function getitem>) ['$14unpack_sequence.7', '$14unpack_sequence.8']
    _m = $14unpack_sequence.6                ['$14unpack_sequence.6', '_m']
    n = $14unpack_sequence.7                 ['$14unpack_sequence.7', 'n']
    $const22.10 = const(int, 0)              ['$const22.10']
    $24compare_op.11 = m == $const22.10      ['$24compare_op.11', '$const22.10', 'm']
    bool26 = global(bool: <class 'bool'>)    ['bool26']
    $26pred = call bool26($24compare_op.11, func=bool26, args=(Var($24compare_op.11, linalg.py:472),), kws=(), vararg=None, target=None) ['$24compare_op.11', '$26pred', 'bool26']
    branch $26pred, 28, 44                   ['$26pred']
label 28:
    $28load_global.0 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>) ['$28load_global.0']
    $30load_method.1 = getattr(value=$28load_global.0, attr=zeros) ['$28load_global.0', '$30load_method.1']
    $34build_tuple.3 = build_tuple(items=[Var(n, linalg.py:471)]) ['$34build_tuple.3', 'n']
    $38load_attr.5 = getattr(value=a, attr=dtype) ['$38load_attr.5', 'a']
    $40call_method.6 = call $30load_method.1($34build_tuple.3, $38load_attr.5, func=$30load_method.1, args=[Var($34build_tuple.3, linalg.py:473), Var($38load_attr.5, linalg.py:473)], kws=(), vararg=None, target=None) ['$30load_method.1', '$34build_tuple.3', '$38load_attr.5', '$40call_method.6']
    $42return_value.7 = cast(value=$40call_method.6) ['$40call_method.6', '$42return_value.7']
    return $42return_value.7                 ['$42return_value.7']
label 44:
    $44load_global.0 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>) ['$44load_global.0']
    $46load_method.1 = getattr(value=$44load_global.0, attr=empty) ['$44load_global.0', '$46load_method.1']
    $50build_tuple.3 = build_tuple(items=[Var(n, linalg.py:471)]) ['$50build_tuple.3', 'n']
    $54load_attr.5 = getattr(value=a, attr=dtype) ['$54load_attr.5', 'a']
    out = call $46load_method.1($50build_tuple.3, $54load_attr.5, func=$46load_method.1, args=[Var($50build_tuple.3, linalg.py:474), Var($54load_attr.5, linalg.py:474)], kws=(), vararg=None, target=None) ['$46load_method.1', '$50build_tuple.3', '$54load_attr.5', 'out']
    $60load_global.7 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>) ['$60load_global.7']
    $62load_method.8 = getattr(value=$60load_global.7, attr=dot) ['$60load_global.7', '$62load_method.8']
    $70call_method.12 = call $62load_method.8(a, b, out, func=$62load_method.8, args=[Var(a, linalg.py:470), Var(b, linalg.py:470), Var(out, linalg.py:474)], kws=(), vararg=None, target=None) ['$62load_method.8', '$70call_method.12', 'a', 'b', 'out']
    $72return_value.13 = cast(value=$70call_method.12) ['$70call_method.12', '$72return_value.13']
    return $72return_value.13                ['$72return_value.13']

DEBUG 2022-02-14 16:38:02,648 ==== SSA block analysis pass on 0
DEBUG 2022-02-14 16:38:02,649 Running <numba.core.ssa._GatherDefsHandler object at 0x7fa0464cbdc0>
DEBUG 2022-02-14 16:38:02,649 on stmt: a = arg(0, name=a)
DEBUG 2022-02-14 16:38:02,649 on stmt: b = arg(1, name=b)
DEBUG 2022-02-14 16:38:02,649 on stmt: $4load_attr.1 = getattr(value=a, attr=shape)
DEBUG 2022-02-14 16:38:02,649 on stmt: $6unpack_sequence.3 = exhaust_iter(value=$4load_attr.1, count=1)
DEBUG 2022-02-14 16:38:02,649 on stmt: m = static_getitem(value=$6unpack_sequence.3, index=0, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:02,649 on stmt: $12load_attr.5 = getattr(value=b, attr=shape)
DEBUG 2022-02-14 16:38:02,649 on stmt: $14unpack_sequence.8 = exhaust_iter(value=$12load_attr.5, count=2)
DEBUG 2022-02-14 16:38:02,649 on stmt: $14unpack_sequence.6 = static_getitem(value=$14unpack_sequence.8, index=0, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:02,649 on stmt: $14unpack_sequence.7 = static_getitem(value=$14unpack_sequence.8, index=1, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:02,649 on stmt: _m = $14unpack_sequence.6
DEBUG 2022-02-14 16:38:02,649 on stmt: n = $14unpack_sequence.7
DEBUG 2022-02-14 16:38:02,649 on stmt: $const22.10 = const(int, 0)
DEBUG 2022-02-14 16:38:02,649 on stmt: $24compare_op.11 = m == $const22.10
DEBUG 2022-02-14 16:38:02,649 on stmt: bool26 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:38:02,649 on stmt: $26pred = call bool26($24compare_op.11, func=bool26, args=(Var($24compare_op.11, linalg.py:472),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:02,649 on stmt: branch $26pred, 28, 44
DEBUG 2022-02-14 16:38:02,649 ==== SSA block analysis pass on 28
DEBUG 2022-02-14 16:38:02,649 Running <numba.core.ssa._GatherDefsHandler object at 0x7fa0464cbdc0>
DEBUG 2022-02-14 16:38:02,649 on stmt: $28load_global.0 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:38:02,649 on stmt: $30load_method.1 = getattr(value=$28load_global.0, attr=zeros)
DEBUG 2022-02-14 16:38:02,649 on stmt: $34build_tuple.3 = build_tuple(items=[Var(n, linalg.py:471)])
DEBUG 2022-02-14 16:38:02,650 on stmt: $38load_attr.5 = getattr(value=a, attr=dtype)
DEBUG 2022-02-14 16:38:02,650 on stmt: $40call_method.6 = call $30load_method.1($34build_tuple.3, $38load_attr.5, func=$30load_method.1, args=[Var($34build_tuple.3, linalg.py:473), Var($38load_attr.5, linalg.py:473)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:02,650 on stmt: $42return_value.7 = cast(value=$40call_method.6)
DEBUG 2022-02-14 16:38:02,650 on stmt: return $42return_value.7
DEBUG 2022-02-14 16:38:02,650 ==== SSA block analysis pass on 44
DEBUG 2022-02-14 16:38:02,650 Running <numba.core.ssa._GatherDefsHandler object at 0x7fa0464cbdc0>
DEBUG 2022-02-14 16:38:02,650 on stmt: $44load_global.0 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:38:02,650 on stmt: $46load_method.1 = getattr(value=$44load_global.0, attr=empty)
DEBUG 2022-02-14 16:38:02,650 on stmt: $50build_tuple.3 = build_tuple(items=[Var(n, linalg.py:471)])
DEBUG 2022-02-14 16:38:02,650 on stmt: $54load_attr.5 = getattr(value=a, attr=dtype)
DEBUG 2022-02-14 16:38:02,650 on stmt: out = call $46load_method.1($50build_tuple.3, $54load_attr.5, func=$46load_method.1, args=[Var($50build_tuple.3, linalg.py:474), Var($54load_attr.5, linalg.py:474)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:02,650 on stmt: $60load_global.7 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:38:02,650 on stmt: $62load_method.8 = getattr(value=$60load_global.7, attr=dot)
DEBUG 2022-02-14 16:38:02,650 on stmt: $70call_method.12 = call $62load_method.8(a, b, out, func=$62load_method.8, args=[Var(a, linalg.py:470), Var(b, linalg.py:470), Var(out, linalg.py:474)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:02,650 on stmt: $72return_value.13 = cast(value=$70call_method.12)
DEBUG 2022-02-14 16:38:02,650 on stmt: return $72return_value.13
DEBUG 2022-02-14 16:38:02,651 defs defaultdict(<class 'list'>,
            {'$12load_attr.5': [<numba.core.ir.Assign object at 0x7fa0464c5850>],
             '$14unpack_sequence.6': [<numba.core.ir.Assign object at 0x7fa0464c5b50>],
             '$14unpack_sequence.7': [<numba.core.ir.Assign object at 0x7fa046543e80>],
             '$14unpack_sequence.8': [<numba.core.ir.Assign object at 0x7fa0464c5a00>],
             '$24compare_op.11': [<numba.core.ir.Assign object at 0x7fa0465432b0>],
             '$26pred': [<numba.core.ir.Assign object at 0x7fa046539130>],
             '$28load_global.0': [<numba.core.ir.Assign object at 0x7fa0464c5c70>],
             '$30load_method.1': [<numba.core.ir.Assign object at 0x7fa0464c5df0>],
             '$34build_tuple.3': [<numba.core.ir.Assign object at 0x7fa0464c8100>],
             '$38load_attr.5': [<numba.core.ir.Assign object at 0x7fa0464c8370>],
             '$40call_method.6': [<numba.core.ir.Assign object at 0x7fa0464c8580>],
             '$42return_value.7': [<numba.core.ir.Assign object at 0x7fa0464c8670>],
             '$44load_global.0': [<numba.core.ir.Assign object at 0x7fa0464c8850>],
             '$46load_method.1': [<numba.core.ir.Assign object at 0x7fa0464c89d0>],
             '$4load_attr.1': [<numba.core.ir.Assign object at 0x7fa0464c51f0>],
             '$50build_tuple.3': [<numba.core.ir.Assign object at 0x7fa0464c8ca0>],
             '$54load_attr.5': [<numba.core.ir.Assign object at 0x7fa0464c8f10>],
             '$60load_global.7': [<numba.core.ir.Assign object at 0x7fa0464cb370>],
             '$62load_method.8': [<numba.core.ir.Assign object at 0x7fa0464cb4f0>],
             '$6unpack_sequence.3': [<numba.core.ir.Assign object at 0x7fa0464c53a0>],
             '$70call_method.12': [<numba.core.ir.Assign object at 0x7fa0464cba60>],
             '$72return_value.13': [<numba.core.ir.Assign object at 0x7fa0464cbb50>],
             '$const22.10': [<numba.core.ir.Assign object at 0x7fa046543460>],
             '_m': [<numba.core.ir.Assign object at 0x7fa046543d60>],
             'a': [<numba.core.ir.Assign object at 0x7fa046543040>],
             'b': [<numba.core.ir.Assign object at 0x7fa046543f10>],
             'bool26': [<numba.core.ir.Assign object at 0x7fa046539d30>],
             'm': [<numba.core.ir.Assign object at 0x7fa0464c54f0>],
             'n': [<numba.core.ir.Assign object at 0x7fa046543c40>],
             'out': [<numba.core.ir.Assign object at 0x7fa0464cb160>]})
DEBUG 2022-02-14 16:38:02,651 SSA violators set()
DEBUG 2022-02-14 16:38:02,657 bytecode dump:
>          0	NOP(arg=None, lineno=3)
           2	LOAD_GLOBAL(arg=0, lineno=3)
           4	LOAD_FAST(arg=0, lineno=3)
           6	LOAD_FAST(arg=1, lineno=3)
           8	CALL_FUNCTION(arg=2, lineno=3)
          10	RETURN_VALUE(arg=None, lineno=3)
DEBUG 2022-02-14 16:38:02,657 pending: deque([State(pc_initial=0 nstack_initial=0)])
DEBUG 2022-02-14 16:38:02,657 stack: []
DEBUG 2022-02-14 16:38:02,657 dispatch pc=0, inst=NOP(arg=None, lineno=3)
DEBUG 2022-02-14 16:38:02,657 stack []
DEBUG 2022-02-14 16:38:02,657 dispatch pc=2, inst=LOAD_GLOBAL(arg=0, lineno=3)
DEBUG 2022-02-14 16:38:02,657 stack []
DEBUG 2022-02-14 16:38:02,657 dispatch pc=4, inst=LOAD_FAST(arg=0, lineno=3)
DEBUG 2022-02-14 16:38:02,657 stack ['$2load_global.0']
DEBUG 2022-02-14 16:38:02,657 dispatch pc=6, inst=LOAD_FAST(arg=1, lineno=3)
DEBUG 2022-02-14 16:38:02,657 stack ['$2load_global.0', '$tmp04.1']
DEBUG 2022-02-14 16:38:02,657 dispatch pc=8, inst=CALL_FUNCTION(arg=2, lineno=3)
DEBUG 2022-02-14 16:38:02,657 stack ['$2load_global.0', '$tmp04.1', '$tmp16.2']
DEBUG 2022-02-14 16:38:02,657 dispatch pc=10, inst=RETURN_VALUE(arg=None, lineno=3)
DEBUG 2022-02-14 16:38:02,657 stack ['$8call_function.3']
DEBUG 2022-02-14 16:38:02,657 end state. edges=[]
DEBUG 2022-02-14 16:38:02,658 -------------------------Prune PHIs-------------------------
DEBUG 2022-02-14 16:38:02,658 Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
DEBUG 2022-02-14 16:38:02,658 defmap: {}
DEBUG 2022-02-14 16:38:02,658 phismap: defaultdict(<class 'set'>, {})
DEBUG 2022-02-14 16:38:02,658 changing phismap: defaultdict(<class 'set'>, {})
DEBUG 2022-02-14 16:38:02,658 keep phismap: {}
DEBUG 2022-02-14 16:38:02,658 new_out: defaultdict(<class 'dict'>, {})
DEBUG 2022-02-14 16:38:02,658 ----------------------DONE Prune PHIs-----------------------
DEBUG 2022-02-14 16:38:02,658 block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$2load_global.0'}), (4, {'res': '$tmp04.1'}), (6, {'res': '$tmp16.2'}), (8, {'func': '$2load_global.0', 'args': ['$tmp04.1', '$tmp16.2'], 'res': '$8call_function.3'}), (10, {'retval': '$8call_function.3', 'castval': '$10return_value.4'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG 2022-02-14 16:38:02,658 label 0:
    tmp0 = arg(0, name=tmp0)                 ['tmp0']
    tmp1 = arg(1, name=tmp1)                 ['tmp1']
    $2load_global.0 = global(intrin: <intrinsic stub>) ['$2load_global.0']
    $8call_function.3 = call $2load_global.0(tmp0, tmp1, func=$2load_global.0, args=[Var(tmp0, <string>:3), Var(tmp1, <string>:3)], kws=(), vararg=None, target=None) ['$2load_global.0', '$8call_function.3', 'tmp0', 'tmp1']
    $10return_value.4 = cast(value=$8call_function.3) ['$10return_value.4', '$8call_function.3']
    return $10return_value.4                 ['$10return_value.4']

DEBUG 2022-02-14 16:38:02,660 ==== SSA block analysis pass on 0
DEBUG 2022-02-14 16:38:02,660 Running <numba.core.ssa._GatherDefsHandler object at 0x7fa04655ddf0>
DEBUG 2022-02-14 16:38:02,660 on stmt: tmp0 = arg(0, name=tmp0)
DEBUG 2022-02-14 16:38:02,660 on stmt: tmp1 = arg(1, name=tmp1)
DEBUG 2022-02-14 16:38:02,660 on stmt: $2load_global.0 = global(intrin: <intrinsic stub>)
DEBUG 2022-02-14 16:38:02,660 on stmt: $8call_function.3 = call $2load_global.0(tmp0, tmp1, func=$2load_global.0, args=[Var(tmp0, <string>:3), Var(tmp1, <string>:3)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:02,660 on stmt: $10return_value.4 = cast(value=$8call_function.3)
DEBUG 2022-02-14 16:38:02,660 on stmt: return $10return_value.4
DEBUG 2022-02-14 16:38:02,660 defs defaultdict(<class 'list'>,
            {'$10return_value.4': [<numba.core.ir.Assign object at 0x7fa04656e610>],
             '$2load_global.0': [<numba.core.ir.Assign object at 0x7fa04656e0d0>],
             '$8call_function.3': [<numba.core.ir.Assign object at 0x7fa04656ecd0>],
             'tmp0': [<numba.core.ir.Assign object at 0x7fa0465438e0>],
             'tmp1': [<numba.core.ir.Assign object at 0x7fa046543760>]})
DEBUG 2022-02-14 16:38:02,660 SSA violators set()
DEBUG 2022-02-14 16:38:02,693 bytecode dump:
>          0	NOP(arg=None, lineno=3)
           2	LOAD_GLOBAL(arg=0, lineno=3)
           4	LOAD_FAST(arg=0, lineno=3)
           6	LOAD_FAST(arg=1, lineno=3)
           8	CALL_FUNCTION(arg=2, lineno=3)
          10	RETURN_VALUE(arg=None, lineno=3)
DEBUG 2022-02-14 16:38:02,693 pending: deque([State(pc_initial=0 nstack_initial=0)])
DEBUG 2022-02-14 16:38:02,693 stack: []
DEBUG 2022-02-14 16:38:02,693 dispatch pc=0, inst=NOP(arg=None, lineno=3)
DEBUG 2022-02-14 16:38:02,693 stack []
DEBUG 2022-02-14 16:38:02,693 dispatch pc=2, inst=LOAD_GLOBAL(arg=0, lineno=3)
DEBUG 2022-02-14 16:38:02,693 stack []
DEBUG 2022-02-14 16:38:02,693 dispatch pc=4, inst=LOAD_FAST(arg=0, lineno=3)
DEBUG 2022-02-14 16:38:02,693 stack ['$2load_global.0']
DEBUG 2022-02-14 16:38:02,693 dispatch pc=6, inst=LOAD_FAST(arg=1, lineno=3)
DEBUG 2022-02-14 16:38:02,693 stack ['$2load_global.0', '$tmp04.1']
DEBUG 2022-02-14 16:38:02,693 dispatch pc=8, inst=CALL_FUNCTION(arg=2, lineno=3)
DEBUG 2022-02-14 16:38:02,694 stack ['$2load_global.0', '$tmp04.1', '$tmp16.2']
DEBUG 2022-02-14 16:38:02,694 dispatch pc=10, inst=RETURN_VALUE(arg=None, lineno=3)
DEBUG 2022-02-14 16:38:02,694 stack ['$8call_function.3']
DEBUG 2022-02-14 16:38:02,694 end state. edges=[]
DEBUG 2022-02-14 16:38:02,694 -------------------------Prune PHIs-------------------------
DEBUG 2022-02-14 16:38:02,694 Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
DEBUG 2022-02-14 16:38:02,694 defmap: {}
DEBUG 2022-02-14 16:38:02,694 phismap: defaultdict(<class 'set'>, {})
DEBUG 2022-02-14 16:38:02,694 changing phismap: defaultdict(<class 'set'>, {})
DEBUG 2022-02-14 16:38:02,694 keep phismap: {}
DEBUG 2022-02-14 16:38:02,694 new_out: defaultdict(<class 'dict'>, {})
DEBUG 2022-02-14 16:38:02,694 ----------------------DONE Prune PHIs-----------------------
DEBUG 2022-02-14 16:38:02,694 block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$2load_global.0'}), (4, {'res': '$tmp04.1'}), (6, {'res': '$tmp16.2'}), (8, {'func': '$2load_global.0', 'args': ['$tmp04.1', '$tmp16.2'], 'res': '$8call_function.3'}), (10, {'retval': '$8call_function.3', 'castval': '$10return_value.4'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG 2022-02-14 16:38:02,695 label 0:
    tmp0 = arg(0, name=tmp0)                 ['tmp0']
    tmp1 = arg(1, name=tmp1)                 ['tmp1']
    $2load_global.0 = global(intrin: <intrinsic stub>) ['$2load_global.0']
    $8call_function.3 = call $2load_global.0(tmp0, tmp1, func=$2load_global.0, args=[Var(tmp0, <string>:3), Var(tmp1, <string>:3)], kws=(), vararg=None, target=None) ['$2load_global.0', '$8call_function.3', 'tmp0', 'tmp1']
    $10return_value.4 = cast(value=$8call_function.3) ['$10return_value.4', '$8call_function.3']
    return $10return_value.4                 ['$10return_value.4']

DEBUG 2022-02-14 16:38:02,696 ==== SSA block analysis pass on 0
DEBUG 2022-02-14 16:38:02,696 Running <numba.core.ssa._GatherDefsHandler object at 0x7fa046483c10>
DEBUG 2022-02-14 16:38:02,696 on stmt: tmp0 = arg(0, name=tmp0)
DEBUG 2022-02-14 16:38:02,696 on stmt: tmp1 = arg(1, name=tmp1)
DEBUG 2022-02-14 16:38:02,696 on stmt: $2load_global.0 = global(intrin: <intrinsic stub>)
DEBUG 2022-02-14 16:38:02,696 on stmt: $8call_function.3 = call $2load_global.0(tmp0, tmp1, func=$2load_global.0, args=[Var(tmp0, <string>:3), Var(tmp1, <string>:3)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:02,696 on stmt: $10return_value.4 = cast(value=$8call_function.3)
DEBUG 2022-02-14 16:38:02,696 on stmt: return $10return_value.4
DEBUG 2022-02-14 16:38:02,696 defs defaultdict(<class 'list'>,
            {'$10return_value.4': [<numba.core.ir.Assign object at 0x7fa046489ac0>],
             '$2load_global.0': [<numba.core.ir.Assign object at 0x7fa046489580>],
             '$8call_function.3': [<numba.core.ir.Assign object at 0x7fa0464899a0>],
             'tmp0': [<numba.core.ir.Assign object at 0x7fa046489280>],
             'tmp1': [<numba.core.ir.Assign object at 0x7fa046489160>]})
DEBUG 2022-02-14 16:38:02,696 SSA violators set()
DEBUG 2022-02-14 16:38:02,727 bytecode dump:
>          0	NOP(arg=None, lineno=3)
           2	LOAD_GLOBAL(arg=0, lineno=3)
           4	LOAD_FAST(arg=0, lineno=3)
           6	LOAD_FAST(arg=1, lineno=3)
           8	LOAD_FAST(arg=2, lineno=3)
          10	CALL_FUNCTION(arg=3, lineno=3)
          12	RETURN_VALUE(arg=None, lineno=3)
DEBUG 2022-02-14 16:38:02,727 pending: deque([State(pc_initial=0 nstack_initial=0)])
DEBUG 2022-02-14 16:38:02,727 stack: []
DEBUG 2022-02-14 16:38:02,727 dispatch pc=0, inst=NOP(arg=None, lineno=3)
DEBUG 2022-02-14 16:38:02,727 stack []
DEBUG 2022-02-14 16:38:02,727 dispatch pc=2, inst=LOAD_GLOBAL(arg=0, lineno=3)
DEBUG 2022-02-14 16:38:02,727 stack []
DEBUG 2022-02-14 16:38:02,727 dispatch pc=4, inst=LOAD_FAST(arg=0, lineno=3)
DEBUG 2022-02-14 16:38:02,727 stack ['$2load_global.0']
DEBUG 2022-02-14 16:38:02,728 dispatch pc=6, inst=LOAD_FAST(arg=1, lineno=3)
DEBUG 2022-02-14 16:38:02,728 stack ['$2load_global.0', '$tmp04.1']
DEBUG 2022-02-14 16:38:02,728 dispatch pc=8, inst=LOAD_FAST(arg=2, lineno=3)
DEBUG 2022-02-14 16:38:02,728 stack ['$2load_global.0', '$tmp04.1', '$tmp16.2']
DEBUG 2022-02-14 16:38:02,728 dispatch pc=10, inst=CALL_FUNCTION(arg=3, lineno=3)
DEBUG 2022-02-14 16:38:02,728 stack ['$2load_global.0', '$tmp04.1', '$tmp16.2', '$tmp28.3']
DEBUG 2022-02-14 16:38:02,728 dispatch pc=12, inst=RETURN_VALUE(arg=None, lineno=3)
DEBUG 2022-02-14 16:38:02,728 stack ['$10call_function.4']
DEBUG 2022-02-14 16:38:02,728 end state. edges=[]
DEBUG 2022-02-14 16:38:02,728 -------------------------Prune PHIs-------------------------
DEBUG 2022-02-14 16:38:02,728 Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
DEBUG 2022-02-14 16:38:02,728 defmap: {}
DEBUG 2022-02-14 16:38:02,728 phismap: defaultdict(<class 'set'>, {})
DEBUG 2022-02-14 16:38:02,728 changing phismap: defaultdict(<class 'set'>, {})
DEBUG 2022-02-14 16:38:02,728 keep phismap: {}
DEBUG 2022-02-14 16:38:02,728 new_out: defaultdict(<class 'dict'>, {})
DEBUG 2022-02-14 16:38:02,728 ----------------------DONE Prune PHIs-----------------------
DEBUG 2022-02-14 16:38:02,728 block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$2load_global.0'}), (4, {'res': '$tmp04.1'}), (6, {'res': '$tmp16.2'}), (8, {'res': '$tmp28.3'}), (10, {'func': '$2load_global.0', 'args': ['$tmp04.1', '$tmp16.2', '$tmp28.3'], 'res': '$10call_function.4'}), (12, {'retval': '$10call_function.4', 'castval': '$12return_value.5'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG 2022-02-14 16:38:02,729 label 0:
    tmp0 = arg(0, name=tmp0)                 ['tmp0']
    tmp1 = arg(1, name=tmp1)                 ['tmp1']
    tmp2 = arg(2, name=tmp2)                 ['tmp2']
    $2load_global.0 = global(intrin: <intrinsic stub>) ['$2load_global.0']
    $10call_function.4 = call $2load_global.0(tmp0, tmp1, tmp2, func=$2load_global.0, args=[Var(tmp0, <string>:3), Var(tmp1, <string>:3), Var(tmp2, <string>:3)], kws=(), vararg=None, target=None) ['$10call_function.4', '$2load_global.0', 'tmp0', 'tmp1', 'tmp2']
    $12return_value.5 = cast(value=$10call_function.4) ['$10call_function.4', '$12return_value.5']
    return $12return_value.5                 ['$12return_value.5']

DEBUG 2022-02-14 16:38:02,730 ==== SSA block analysis pass on 0
DEBUG 2022-02-14 16:38:02,730 Running <numba.core.ssa._GatherDefsHandler object at 0x7fa046444f10>
DEBUG 2022-02-14 16:38:02,730 on stmt: tmp0 = arg(0, name=tmp0)
DEBUG 2022-02-14 16:38:02,730 on stmt: tmp1 = arg(1, name=tmp1)
DEBUG 2022-02-14 16:38:02,730 on stmt: tmp2 = arg(2, name=tmp2)
DEBUG 2022-02-14 16:38:02,730 on stmt: $2load_global.0 = global(intrin: <intrinsic stub>)
DEBUG 2022-02-14 16:38:02,730 on stmt: $10call_function.4 = call $2load_global.0(tmp0, tmp1, tmp2, func=$2load_global.0, args=[Var(tmp0, <string>:3), Var(tmp1, <string>:3), Var(tmp2, <string>:3)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:02,730 on stmt: $12return_value.5 = cast(value=$10call_function.4)
DEBUG 2022-02-14 16:38:02,730 on stmt: return $12return_value.5
DEBUG 2022-02-14 16:38:02,730 defs defaultdict(<class 'list'>,
            {'$10call_function.4': [<numba.core.ir.Assign object at 0x7fa046454520>],
             '$12return_value.5': [<numba.core.ir.Assign object at 0x7fa046454640>],
             '$2load_global.0': [<numba.core.ir.Assign object at 0x7fa04644dfa0>],
             'tmp0': [<numba.core.ir.Assign object at 0x7fa04644d3d0>],
             'tmp1': [<numba.core.ir.Assign object at 0x7fa04644d0d0>],
             'tmp2': [<numba.core.ir.Assign object at 0x7fa04644de20>]})
DEBUG 2022-02-14 16:38:02,731 SSA violators set()
DEBUG 2022-02-14 16:38:02,736 bytecode dump:
>          0	NOP(arg=None, lineno=560)
           2	LOAD_FAST(arg=0, lineno=560)
           4	LOAD_ATTR(arg=0, lineno=560)
           6	UNPACK_SEQUENCE(arg=1, lineno=560)
           8	STORE_FAST(arg=3, lineno=560)
          10	LOAD_FAST(arg=1, lineno=561)
          12	LOAD_ATTR(arg=0, lineno=561)
          14	UNPACK_SEQUENCE(arg=2, lineno=561)
          16	STORE_FAST(arg=4, lineno=561)
          18	STORE_FAST(arg=5, lineno=561)
          20	LOAD_FAST(arg=3, lineno=562)
          22	LOAD_FAST(arg=4, lineno=562)
          24	COMPARE_OP(arg=3, lineno=562)
          26	POP_JUMP_IF_FALSE(arg=36, lineno=562)
          28	LOAD_GLOBAL(arg=1, lineno=563)
          30	LOAD_CONST(arg=1, lineno=563)
          32	CALL_FUNCTION(arg=1, lineno=563)
          34	RAISE_VARARGS(arg=1, lineno=563)
>         36	LOAD_FAST(arg=2, lineno=565)
          38	LOAD_ATTR(arg=0, lineno=565)
          40	LOAD_FAST(arg=5, lineno=565)
          42	BUILD_TUPLE(arg=1, lineno=565)
          44	COMPARE_OP(arg=3, lineno=565)
          46	POP_JUMP_IF_FALSE(arg=56, lineno=565)
          48	LOAD_GLOBAL(arg=1, lineno=566)
          50	LOAD_CONST(arg=2, lineno=566)
          52	CALL_FUNCTION(arg=1, lineno=566)
          54	RAISE_VARARGS(arg=1, lineno=566)
>         56	LOAD_CONST(arg=0, lineno=566)
          58	RETURN_VALUE(arg=None, lineno=566)
DEBUG 2022-02-14 16:38:02,737 pending: deque([State(pc_initial=0 nstack_initial=0)])
DEBUG 2022-02-14 16:38:02,737 stack: []
DEBUG 2022-02-14 16:38:02,737 dispatch pc=0, inst=NOP(arg=None, lineno=560)
DEBUG 2022-02-14 16:38:02,737 stack []
DEBUG 2022-02-14 16:38:02,737 dispatch pc=2, inst=LOAD_FAST(arg=0, lineno=560)
DEBUG 2022-02-14 16:38:02,737 stack []
DEBUG 2022-02-14 16:38:02,737 dispatch pc=4, inst=LOAD_ATTR(arg=0, lineno=560)
DEBUG 2022-02-14 16:38:02,737 stack ['$a2.0']
DEBUG 2022-02-14 16:38:02,737 dispatch pc=6, inst=UNPACK_SEQUENCE(arg=1, lineno=560)
DEBUG 2022-02-14 16:38:02,737 stack ['$4load_attr.1']
DEBUG 2022-02-14 16:38:02,737 dispatch pc=8, inst=STORE_FAST(arg=3, lineno=560)
DEBUG 2022-02-14 16:38:02,737 stack ['$6unpack_sequence.2']
DEBUG 2022-02-14 16:38:02,737 dispatch pc=10, inst=LOAD_FAST(arg=1, lineno=561)
DEBUG 2022-02-14 16:38:02,737 stack []
DEBUG 2022-02-14 16:38:02,737 dispatch pc=12, inst=LOAD_ATTR(arg=0, lineno=561)
DEBUG 2022-02-14 16:38:02,737 stack ['$b10.4']
DEBUG 2022-02-14 16:38:02,737 dispatch pc=14, inst=UNPACK_SEQUENCE(arg=2, lineno=561)
DEBUG 2022-02-14 16:38:02,737 stack ['$12load_attr.5']
DEBUG 2022-02-14 16:38:02,738 dispatch pc=16, inst=STORE_FAST(arg=4, lineno=561)
DEBUG 2022-02-14 16:38:02,738 stack ['$14unpack_sequence.7', '$14unpack_sequence.6']
DEBUG 2022-02-14 16:38:02,738 dispatch pc=18, inst=STORE_FAST(arg=5, lineno=561)
DEBUG 2022-02-14 16:38:02,738 stack ['$14unpack_sequence.7']
DEBUG 2022-02-14 16:38:02,738 dispatch pc=20, inst=LOAD_FAST(arg=3, lineno=562)
DEBUG 2022-02-14 16:38:02,738 stack []
DEBUG 2022-02-14 16:38:02,738 dispatch pc=22, inst=LOAD_FAST(arg=4, lineno=562)
DEBUG 2022-02-14 16:38:02,738 stack ['$m20.9']
DEBUG 2022-02-14 16:38:02,738 dispatch pc=24, inst=COMPARE_OP(arg=3, lineno=562)
DEBUG 2022-02-14 16:38:02,738 stack ['$m20.9', '$_m22.10']
DEBUG 2022-02-14 16:38:02,738 dispatch pc=26, inst=POP_JUMP_IF_FALSE(arg=36, lineno=562)
DEBUG 2022-02-14 16:38:02,738 stack ['$24compare_op.11']
DEBUG 2022-02-14 16:38:02,738 end state. edges=[Edge(pc=28, stack=(), blockstack=(), npush=0), Edge(pc=36, stack=(), blockstack=(), npush=0)]
DEBUG 2022-02-14 16:38:02,738 pending: deque([State(pc_initial=28 nstack_initial=0), State(pc_initial=36 nstack_initial=0)])
DEBUG 2022-02-14 16:38:02,738 stack: []
DEBUG 2022-02-14 16:38:02,738 dispatch pc=28, inst=LOAD_GLOBAL(arg=1, lineno=563)
DEBUG 2022-02-14 16:38:02,738 stack []
DEBUG 2022-02-14 16:38:02,738 dispatch pc=30, inst=LOAD_CONST(arg=1, lineno=563)
DEBUG 2022-02-14 16:38:02,738 stack ['$28load_global.0']
DEBUG 2022-02-14 16:38:02,738 dispatch pc=32, inst=CALL_FUNCTION(arg=1, lineno=563)
DEBUG 2022-02-14 16:38:02,738 stack ['$28load_global.0', '$const30.1']
DEBUG 2022-02-14 16:38:02,739 dispatch pc=34, inst=RAISE_VARARGS(arg=1, lineno=563)
DEBUG 2022-02-14 16:38:02,739 stack ['$32call_function.2']
DEBUG 2022-02-14 16:38:02,739 end state. edges=[]
DEBUG 2022-02-14 16:38:02,739 pending: deque([State(pc_initial=36 nstack_initial=0)])
DEBUG 2022-02-14 16:38:02,739 stack: []
DEBUG 2022-02-14 16:38:02,739 dispatch pc=36, inst=LOAD_FAST(arg=2, lineno=565)
DEBUG 2022-02-14 16:38:02,739 stack []
DEBUG 2022-02-14 16:38:02,739 dispatch pc=38, inst=LOAD_ATTR(arg=0, lineno=565)
DEBUG 2022-02-14 16:38:02,739 stack ['$out36.0']
DEBUG 2022-02-14 16:38:02,739 dispatch pc=40, inst=LOAD_FAST(arg=5, lineno=565)
DEBUG 2022-02-14 16:38:02,739 stack ['$38load_attr.1']
DEBUG 2022-02-14 16:38:02,739 dispatch pc=42, inst=BUILD_TUPLE(arg=1, lineno=565)
DEBUG 2022-02-14 16:38:02,739 stack ['$38load_attr.1', '$n40.2']
DEBUG 2022-02-14 16:38:02,739 dispatch pc=44, inst=COMPARE_OP(arg=3, lineno=565)
DEBUG 2022-02-14 16:38:02,739 stack ['$38load_attr.1', '$42build_tuple.3']
DEBUG 2022-02-14 16:38:02,739 dispatch pc=46, inst=POP_JUMP_IF_FALSE(arg=56, lineno=565)
DEBUG 2022-02-14 16:38:02,739 stack ['$44compare_op.4']
DEBUG 2022-02-14 16:38:02,739 end state. edges=[Edge(pc=48, stack=(), blockstack=(), npush=0), Edge(pc=56, stack=(), blockstack=(), npush=0)]
DEBUG 2022-02-14 16:38:02,739 pending: deque([State(pc_initial=48 nstack_initial=0), State(pc_initial=56 nstack_initial=0)])
DEBUG 2022-02-14 16:38:02,739 stack: []
DEBUG 2022-02-14 16:38:02,739 dispatch pc=48, inst=LOAD_GLOBAL(arg=1, lineno=566)
DEBUG 2022-02-14 16:38:02,739 stack []
DEBUG 2022-02-14 16:38:02,739 dispatch pc=50, inst=LOAD_CONST(arg=2, lineno=566)
DEBUG 2022-02-14 16:38:02,739 stack ['$48load_global.0']
DEBUG 2022-02-14 16:38:02,739 dispatch pc=52, inst=CALL_FUNCTION(arg=1, lineno=566)
DEBUG 2022-02-14 16:38:02,739 stack ['$48load_global.0', '$const50.1']
DEBUG 2022-02-14 16:38:02,740 dispatch pc=54, inst=RAISE_VARARGS(arg=1, lineno=566)
DEBUG 2022-02-14 16:38:02,740 stack ['$52call_function.2']
DEBUG 2022-02-14 16:38:02,740 end state. edges=[]
DEBUG 2022-02-14 16:38:02,740 pending: deque([State(pc_initial=56 nstack_initial=0)])
DEBUG 2022-02-14 16:38:02,740 stack: []
DEBUG 2022-02-14 16:38:02,740 dispatch pc=56, inst=LOAD_CONST(arg=0, lineno=566)
DEBUG 2022-02-14 16:38:02,740 stack []
DEBUG 2022-02-14 16:38:02,740 dispatch pc=58, inst=RETURN_VALUE(arg=None, lineno=566)
DEBUG 2022-02-14 16:38:02,740 stack ['$const56.0']
DEBUG 2022-02-14 16:38:02,740 end state. edges=[]
DEBUG 2022-02-14 16:38:02,740 -------------------------Prune PHIs-------------------------
DEBUG 2022-02-14 16:38:02,740 Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=28 nstack_initial=0): set(),
             State(pc_initial=36 nstack_initial=0): set(),
             State(pc_initial=48 nstack_initial=0): set(),
             State(pc_initial=56 nstack_initial=0): set()})
DEBUG 2022-02-14 16:38:02,740 defmap: {}
DEBUG 2022-02-14 16:38:02,740 phismap: defaultdict(<class 'set'>, {})
DEBUG 2022-02-14 16:38:02,740 changing phismap: defaultdict(<class 'set'>, {})
DEBUG 2022-02-14 16:38:02,740 keep phismap: {}
DEBUG 2022-02-14 16:38:02,740 new_out: defaultdict(<class 'dict'>, {})
DEBUG 2022-02-14 16:38:02,740 ----------------------DONE Prune PHIs-----------------------
DEBUG 2022-02-14 16:38:02,741 block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$a2.0'}), (4, {'item': '$a2.0', 'res': '$4load_attr.1'}), (6, {'iterable': '$4load_attr.1', 'stores': ['$6unpack_sequence.2'], 'tupleobj': '$6unpack_sequence.3'}), (8, {'value': '$6unpack_sequence.2'}), (10, {'res': '$b10.4'}), (12, {'item': '$b10.4', 'res': '$12load_attr.5'}), (14, {'iterable': '$12load_attr.5', 'stores': ['$14unpack_sequence.6', '$14unpack_sequence.7'], 'tupleobj': '$14unpack_sequence.8'}), (16, {'value': '$14unpack_sequence.6'}), (18, {'value': '$14unpack_sequence.7'}), (20, {'res': '$m20.9'}), (22, {'res': '$_m22.10'}), (24, {'lhs': '$m20.9', 'rhs': '$_m22.10', 'res': '$24compare_op.11'}), (26, {'pred': '$24compare_op.11'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={28: (), 36: ()})
DEBUG 2022-02-14 16:38:02,741 block_infos State(pc_initial=28 nstack_initial=0):
AdaptBlockInfo(insts=((28, {'res': '$28load_global.0'}), (30, {'res': '$const30.1'}), (32, {'func': '$28load_global.0', 'args': ['$const30.1'], 'res': '$32call_function.2'}), (34, {'exc': '$32call_function.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG 2022-02-14 16:38:02,741 block_infos State(pc_initial=36 nstack_initial=0):
AdaptBlockInfo(insts=((36, {'res': '$out36.0'}), (38, {'item': '$out36.0', 'res': '$38load_attr.1'}), (40, {'res': '$n40.2'}), (42, {'items': ['$n40.2'], 'res': '$42build_tuple.3'}), (44, {'lhs': '$38load_attr.1', 'rhs': '$42build_tuple.3', 'res': '$44compare_op.4'}), (46, {'pred': '$44compare_op.4'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={48: (), 56: ()})
DEBUG 2022-02-14 16:38:02,741 block_infos State(pc_initial=48 nstack_initial=0):
AdaptBlockInfo(insts=((48, {'res': '$48load_global.0'}), (50, {'res': '$const50.1'}), (52, {'func': '$48load_global.0', 'args': ['$const50.1'], 'res': '$52call_function.2'}), (54, {'exc': '$52call_function.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG 2022-02-14 16:38:02,741 block_infos State(pc_initial=56 nstack_initial=0):
AdaptBlockInfo(insts=((56, {'res': '$const56.0'}), (58, {'retval': '$const56.0', 'castval': '$58return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG 2022-02-14 16:38:02,742 label 0:
    a = arg(0, name=a)                       ['a']
    b = arg(1, name=b)                       ['b']
    out = arg(2, name=out)                   ['out']
    $4load_attr.1 = getattr(value=a, attr=shape) ['$4load_attr.1', 'a']
    $6unpack_sequence.3 = exhaust_iter(value=$4load_attr.1, count=1) ['$4load_attr.1', '$6unpack_sequence.3']
    m = static_getitem(value=$6unpack_sequence.3, index=0, index_var=None, fn=<built-in function getitem>) ['$6unpack_sequence.3', 'm']
    $12load_attr.5 = getattr(value=b, attr=shape) ['$12load_attr.5', 'b']
    $14unpack_sequence.8 = exhaust_iter(value=$12load_attr.5, count=2) ['$12load_attr.5', '$14unpack_sequence.8']
    $14unpack_sequence.6 = static_getitem(value=$14unpack_sequence.8, index=0, index_var=None, fn=<built-in function getitem>) ['$14unpack_sequence.6', '$14unpack_sequence.8']
    $14unpack_sequence.7 = static_getitem(value=$14unpack_sequence.8, index=1, index_var=None, fn=<built-in function getitem>) ['$14unpack_sequence.7', '$14unpack_sequence.8']
    _m = $14unpack_sequence.6                ['$14unpack_sequence.6', '_m']
    n = $14unpack_sequence.7                 ['$14unpack_sequence.7', 'n']
    $24compare_op.11 = m != _m               ['$24compare_op.11', '_m', 'm']
    bool26 = global(bool: <class 'bool'>)    ['bool26']
    $26pred = call bool26($24compare_op.11, func=bool26, args=(Var($24compare_op.11, linalg.py:562),), kws=(), vararg=None, target=None) ['$24compare_op.11', '$26pred', 'bool26']
    branch $26pred, 28, 36                   ['$26pred']
label 28:
    $28load_global.0 = global(ValueError: <class 'ValueError'>) ['$28load_global.0']
    $const30.1 = const(str, incompatible array sizes for np.dot(a, b) (vector * matrix)) ['$const30.1']
    $32call_function.2 = call $28load_global.0($const30.1, func=$28load_global.0, args=[Var($const30.1, linalg.py:563)], kws=(), vararg=None, target=None) ['$28load_global.0', '$32call_function.2', '$const30.1']
    raise $32call_function.2                 ['$32call_function.2']
label 36:
    $38load_attr.1 = getattr(value=out, attr=shape) ['$38load_attr.1', 'out']
    $42build_tuple.3 = build_tuple(items=[Var(n, linalg.py:561)]) ['$42build_tuple.3', 'n']
    $44compare_op.4 = $38load_attr.1 != $42build_tuple.3 ['$38load_attr.1', '$42build_tuple.3', '$44compare_op.4']
    bool46 = global(bool: <class 'bool'>)    ['bool46']
    $46pred = call bool46($44compare_op.4, func=bool46, args=(Var($44compare_op.4, linalg.py:565),), kws=(), vararg=None, target=None) ['$44compare_op.4', '$46pred', 'bool46']
    branch $46pred, 48, 56                   ['$46pred']
label 48:
    $48load_global.0 = global(ValueError: <class 'ValueError'>) ['$48load_global.0']
    $const50.1 = const(str, incompatible output array size for np.dot(a, b, out) (vector * matrix)) ['$const50.1']
    $52call_function.2 = call $48load_global.0($const50.1, func=$48load_global.0, args=[Var($const50.1, linalg.py:566)], kws=(), vararg=None, target=None) ['$48load_global.0', '$52call_function.2', '$const50.1']
    raise $52call_function.2                 ['$52call_function.2']
label 56:
    $const56.0 = const(NoneType, None)       ['$const56.0']
    $58return_value.1 = cast(value=$const56.0) ['$58return_value.1', '$const56.0']
    return $58return_value.1                 ['$58return_value.1']

DEBUG 2022-02-14 16:38:02,745 ==== SSA block analysis pass on 0
DEBUG 2022-02-14 16:38:02,745 Running <numba.core.ssa._GatherDefsHandler object at 0x7fa046473790>
DEBUG 2022-02-14 16:38:02,745 on stmt: a = arg(0, name=a)
DEBUG 2022-02-14 16:38:02,745 on stmt: b = arg(1, name=b)
DEBUG 2022-02-14 16:38:02,745 on stmt: out = arg(2, name=out)
DEBUG 2022-02-14 16:38:02,745 on stmt: $4load_attr.1 = getattr(value=a, attr=shape)
DEBUG 2022-02-14 16:38:02,745 on stmt: $6unpack_sequence.3 = exhaust_iter(value=$4load_attr.1, count=1)
DEBUG 2022-02-14 16:38:02,745 on stmt: m = static_getitem(value=$6unpack_sequence.3, index=0, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:02,745 on stmt: $12load_attr.5 = getattr(value=b, attr=shape)
DEBUG 2022-02-14 16:38:02,745 on stmt: $14unpack_sequence.8 = exhaust_iter(value=$12load_attr.5, count=2)
DEBUG 2022-02-14 16:38:02,746 on stmt: $14unpack_sequence.6 = static_getitem(value=$14unpack_sequence.8, index=0, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:02,746 on stmt: $14unpack_sequence.7 = static_getitem(value=$14unpack_sequence.8, index=1, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:02,746 on stmt: _m = $14unpack_sequence.6
DEBUG 2022-02-14 16:38:02,746 on stmt: n = $14unpack_sequence.7
DEBUG 2022-02-14 16:38:02,746 on stmt: $24compare_op.11 = m != _m
DEBUG 2022-02-14 16:38:02,746 on stmt: bool26 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:38:02,746 on stmt: $26pred = call bool26($24compare_op.11, func=bool26, args=(Var($24compare_op.11, linalg.py:562),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:02,746 on stmt: branch $26pred, 28, 36
DEBUG 2022-02-14 16:38:02,746 ==== SSA block analysis pass on 28
DEBUG 2022-02-14 16:38:02,746 Running <numba.core.ssa._GatherDefsHandler object at 0x7fa046473790>
DEBUG 2022-02-14 16:38:02,746 on stmt: $28load_global.0 = global(ValueError: <class 'ValueError'>)
DEBUG 2022-02-14 16:38:02,746 on stmt: $const30.1 = const(str, incompatible array sizes for np.dot(a, b) (vector * matrix))
DEBUG 2022-02-14 16:38:02,746 on stmt: $32call_function.2 = call $28load_global.0($const30.1, func=$28load_global.0, args=[Var($const30.1, linalg.py:563)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:02,746 on stmt: <static> raise <class 'ValueError'>('incompatible array sizes for np.dot(a, b) (vector * matrix)')
DEBUG 2022-02-14 16:38:02,746 ==== SSA block analysis pass on 36
DEBUG 2022-02-14 16:38:02,746 Running <numba.core.ssa._GatherDefsHandler object at 0x7fa046473790>
DEBUG 2022-02-14 16:38:02,746 on stmt: $38load_attr.1 = getattr(value=out, attr=shape)
DEBUG 2022-02-14 16:38:02,746 on stmt: $42build_tuple.3 = build_tuple(items=[Var(n, linalg.py:561)])
DEBUG 2022-02-14 16:38:02,746 on stmt: $44compare_op.4 = $38load_attr.1 != $42build_tuple.3
DEBUG 2022-02-14 16:38:02,746 on stmt: bool46 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:38:02,746 on stmt: $46pred = call bool46($44compare_op.4, func=bool46, args=(Var($44compare_op.4, linalg.py:565),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:02,746 on stmt: branch $46pred, 48, 56
DEBUG 2022-02-14 16:38:02,746 ==== SSA block analysis pass on 48
DEBUG 2022-02-14 16:38:02,746 Running <numba.core.ssa._GatherDefsHandler object at 0x7fa046473790>
DEBUG 2022-02-14 16:38:02,747 on stmt: $48load_global.0 = global(ValueError: <class 'ValueError'>)
DEBUG 2022-02-14 16:38:02,747 on stmt: $const50.1 = const(str, incompatible output array size for np.dot(a, b, out) (vector * matrix))
DEBUG 2022-02-14 16:38:02,747 on stmt: $52call_function.2 = call $48load_global.0($const50.1, func=$48load_global.0, args=[Var($const50.1, linalg.py:566)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:02,747 on stmt: <static> raise <class 'ValueError'>('incompatible output array size for np.dot(a, b, out) (vector * matrix)')
DEBUG 2022-02-14 16:38:02,747 ==== SSA block analysis pass on 56
DEBUG 2022-02-14 16:38:02,747 Running <numba.core.ssa._GatherDefsHandler object at 0x7fa046473790>
DEBUG 2022-02-14 16:38:02,747 on stmt: $const56.0 = const(NoneType, None)
DEBUG 2022-02-14 16:38:02,747 on stmt: $58return_value.1 = cast(value=$const56.0)
DEBUG 2022-02-14 16:38:02,747 on stmt: return $58return_value.1
DEBUG 2022-02-14 16:38:02,747 defs defaultdict(<class 'list'>,
            {'$12load_attr.5': [<numba.core.ir.Assign object at 0x7fa04647f220>],
             '$14unpack_sequence.6': [<numba.core.ir.Assign object at 0x7fa04647f520>],
             '$14unpack_sequence.7': [<numba.core.ir.Assign object at 0x7fa04647f640>],
             '$14unpack_sequence.8': [<numba.core.ir.Assign object at 0x7fa04647f3d0>],
             '$24compare_op.11': [<numba.core.ir.Assign object at 0x7fa04647fc10>],
             '$26pred': [<numba.core.ir.Assign object at 0x7fa04647fe80>],
             '$28load_global.0': [<numba.core.ir.Assign object at 0x7fa04647faf0>],
             '$32call_function.2': [<numba.core.ir.Assign object at 0x7fa0464802e0>],
             '$38load_attr.1': [<numba.core.ir.Assign object at 0x7fa0464806a0>],
             '$42build_tuple.3': [<numba.core.ir.Assign object at 0x7fa046480970>],
             '$44compare_op.4': [<numba.core.ir.Assign object at 0x7fa046480af0>],
             '$46pred': [<numba.core.ir.Assign object at 0x7fa046480d60>],
             '$48load_global.0': [<numba.core.ir.Assign object at 0x7fa046480f40>],
             '$4load_attr.1': [<numba.core.ir.Assign object at 0x7fa046473b80>],
             '$52call_function.2': [<numba.core.ir.Assign object at 0x7fa0464002e0>],
             '$58return_value.1': [<numba.core.ir.Assign object at 0x7fa046400700>],
             '$6unpack_sequence.3': [<numba.core.ir.Assign object at 0x7fa046473d30>],
             '$const30.1': [<numba.core.ir.Assign object at 0x7fa046480100>],
             '$const50.1': [<numba.core.ir.Assign object at 0x7fa046400100>],
             '$const56.0': [<numba.core.ir.Assign object at 0x7fa046400580>],
             '_m': [<numba.core.ir.Assign object at 0x7fa04647f700>],
             'a': [<numba.core.ir.Assign object at 0x7fa046473340>],
             'b': [<numba.core.ir.Assign object at 0x7fa046473130>],
             'bool26': [<numba.core.ir.Assign object at 0x7fa04647fd60>],
             'bool46': [<numba.core.ir.Assign object at 0x7fa046480c40>],
             'm': [<numba.core.ir.Assign object at 0x7fa046473e80>],
             'n': [<numba.core.ir.Assign object at 0x7fa04647f820>],
             'out': [<numba.core.ir.Assign object at 0x7fa0464738e0>]})
DEBUG 2022-02-14 16:38:02,747 SSA violators set()
DEBUG 2022-02-14 16:38:03,328 bytecode dump:
>          0	NOP(arg=None, lineno=159)
           2	LOAD_FAST(arg=0, lineno=159)
           4	LOAD_METHOD(arg=0, lineno=159)
           6	CALL_METHOD(arg=0, lineno=159)
           8	STORE_FAST(arg=7, lineno=159)
          10	LOAD_CONST(arg=1, lineno=161)
          12	STORE_FAST(arg=8, lineno=161)
          14	LOAD_GLOBAL(arg=1, lineno=162)
          16	LOAD_ATTR(arg=2, lineno=162)
          18	LOAD_CONST(arg=2, lineno=162)
          20	LOAD_FAST(arg=4, lineno=162)
          22	LOAD_CONST(arg=3, lineno=162)
          24	BINARY_ADD(arg=None, lineno=162)
          26	BUILD_TUPLE(arg=2, lineno=162)
          28	LOAD_GLOBAL(arg=1, lineno=162)
          30	LOAD_ATTR(arg=3, lineno=162)
          32	LOAD_CONST(arg=4, lineno=162)
          34	CALL_FUNCTION_KW(arg=2, lineno=162)
          36	STORE_FAST(arg=9, lineno=162)
          38	LOAD_CONST(arg=3, lineno=163)
          40	LOAD_FAST(arg=9, lineno=163)
          42	LOAD_CONST(arg=5, lineno=163)
          44	STORE_SUBSCR(arg=None, lineno=163)
          46	LOAD_GLOBAL(arg=4, lineno=164)
          48	LOAD_CONST(arg=3, lineno=164)
          50	LOAD_FAST(arg=4, lineno=164)
          52	LOAD_CONST(arg=3, lineno=164)
          54	BINARY_ADD(arg=None, lineno=164)
          56	CALL_FUNCTION(arg=2, lineno=164)
          58	GET_ITER(arg=None, lineno=164)
>         60	FOR_ITER(arg=240, lineno=164)
          62	STORE_FAST(arg=10, lineno=164)
          64	LOAD_FAST(arg=10, lineno=165)
          66	LOAD_CONST(arg=3, lineno=165)
          68	COMPARE_OP(arg=2, lineno=165)
          70	POP_JUMP_IF_FALSE(arg=78, lineno=165)
          72	LOAD_FAST(arg=5, lineno=166)
          74	STORE_FAST(arg=11, lineno=166)
          76	JUMP_FORWARD(arg=62, lineno=166)
>         78	LOAD_FAST(arg=10, lineno=167)
          80	LOAD_CONST(arg=2, lineno=167)
          82	BINARY_MODULO(arg=None, lineno=167)
          84	LOAD_CONST(arg=1, lineno=167)
          86	COMPARE_OP(arg=2, lineno=167)
          88	POP_JUMP_IF_FALSE(arg=124, lineno=167)
          90	LOAD_FAST(arg=7, lineno=168)
          92	LOAD_METHOD(arg=5, lineno=168)
          94	CALL_METHOD(arg=0, lineno=168)
          96	LOAD_FAST(arg=10, lineno=168)
          98	BINARY_TRUE_DIVIDE(arg=None, lineno=168)
         100	LOAD_FAST(arg=2, lineno=168)
         102	LOAD_FAST(arg=3, lineno=168)
         104	BINARY_MATRIX_MULTIPLY(arg=None, lineno=168)
         106	LOAD_CONST(arg=2, lineno=168)
         108	BINARY_TRUE_DIVIDE(arg=None, lineno=168)
         110	BINARY_ADD(arg=None, lineno=168)
         112	STORE_FAST(arg=11, lineno=168)
         114	LOAD_FAST(arg=7, lineno=169)
         116	LOAD_FAST(arg=0, lineno=169)
         118	INPLACE_MULTIPLY(arg=None, lineno=169)
         120	STORE_FAST(arg=7, lineno=169)
         122	JUMP_FORWARD(arg=16, lineno=169)
>        124	LOAD_FAST(arg=6, lineno=171)
         126	LOAD_FAST(arg=3, lineno=171)
         128	BINARY_MATRIX_MULTIPLY(arg=None, lineno=171)
         130	STORE_FAST(arg=11, lineno=171)
         132	LOAD_FAST(arg=1, lineno=172)
         134	LOAD_FAST(arg=3, lineno=172)
         136	BINARY_MATRIX_MULTIPLY(arg=None, lineno=172)
         138	STORE_FAST(arg=3, lineno=172)
>        140	LOAD_CONST(arg=3, lineno=174)
         142	STORE_FAST(arg=12, lineno=174)
         144	LOAD_CONST(arg=3, lineno=175)
         146	LOAD_FAST(arg=8, lineno=175)
         148	BINARY_SUBTRACT(arg=None, lineno=175)
         150	STORE_FAST(arg=8, lineno=175)
         152	LOAD_FAST(arg=9, lineno=176)
         154	LOAD_CONST(arg=3, lineno=176)
         156	LOAD_FAST(arg=8, lineno=176)
         158	BINARY_SUBTRACT(arg=None, lineno=176)
         160	LOAD_CONST(arg=0, lineno=176)
         162	LOAD_CONST(arg=0, lineno=176)
         164	BUILD_SLICE(arg=2, lineno=176)
         166	BUILD_TUPLE(arg=2, lineno=176)
         168	BINARY_SUBSCR(arg=None, lineno=176)
         170	LOAD_FAST(arg=9, lineno=176)
         172	LOAD_FAST(arg=8, lineno=176)
         174	LOAD_CONST(arg=0, lineno=176)
         176	LOAD_CONST(arg=0, lineno=176)
         178	BUILD_SLICE(arg=2, lineno=176)
         180	BUILD_TUPLE(arg=2, lineno=176)
         182	STORE_SUBSCR(arg=None, lineno=176)
         184	LOAD_GLOBAL(arg=4, lineno=177)
         186	LOAD_CONST(arg=3, lineno=177)
         188	LOAD_FAST(arg=4, lineno=177)
         190	LOAD_FAST(arg=10, lineno=177)
         192	BINARY_FLOOR_DIVIDE(arg=None, lineno=177)
         194	LOAD_CONST(arg=3, lineno=177)
         196	BINARY_ADD(arg=None, lineno=177)
         198	CALL_FUNCTION(arg=2, lineno=177)
         200	GET_ITER(arg=None, lineno=177)
>        202	FOR_ITER(arg=96, lineno=177)
         204	STORE_FAST(arg=13, lineno=177)
         206	LOAD_FAST(arg=12, lineno=178)
         208	LOAD_FAST(arg=11, lineno=178)
         210	LOAD_FAST(arg=13, lineno=178)
         212	BINARY_TRUE_DIVIDE(arg=None, lineno=178)
         214	INPLACE_MULTIPLY(arg=None, lineno=178)
         216	STORE_FAST(arg=12, lineno=178)
         218	LOAD_GLOBAL(arg=4, lineno=179)
         220	LOAD_FAST(arg=10, lineno=179)
         222	LOAD_FAST(arg=13, lineno=179)
         224	BINARY_MULTIPLY(arg=None, lineno=179)
         226	LOAD_CONST(arg=3, lineno=179)
         228	BINARY_ADD(arg=None, lineno=179)
         230	LOAD_FAST(arg=4, lineno=179)
         232	LOAD_CONST(arg=2, lineno=179)
         234	BINARY_ADD(arg=None, lineno=179)
         236	CALL_FUNCTION(arg=2, lineno=179)
         238	GET_ITER(arg=None, lineno=179)
>        240	FOR_ITER(arg=56, lineno=179)
         242	STORE_FAST(arg=14, lineno=179)
         244	LOAD_FAST(arg=9, lineno=180)
         246	LOAD_FAST(arg=8, lineno=180)
         248	LOAD_FAST(arg=14, lineno=180)
         250	LOAD_CONST(arg=3, lineno=180)
         252	BINARY_SUBTRACT(arg=None, lineno=180)
         254	BUILD_TUPLE(arg=2, lineno=180)
         256	DUP_TOP_TWO(arg=None, lineno=180)
         258	BINARY_SUBSCR(arg=None, lineno=180)
         260	LOAD_FAST(arg=9, lineno=180)
         262	LOAD_CONST(arg=3, lineno=180)
         264	LOAD_FAST(arg=8, lineno=180)
         266	BINARY_SUBTRACT(arg=None, lineno=180)
         268	LOAD_FAST(arg=14, lineno=180)
         270	LOAD_FAST(arg=10, lineno=180)
         272	LOAD_FAST(arg=13, lineno=180)
         274	BINARY_MULTIPLY(arg=None, lineno=180)
         276	BINARY_SUBTRACT(arg=None, lineno=180)
         278	LOAD_CONST(arg=3, lineno=180)
         280	BINARY_SUBTRACT(arg=None, lineno=180)
         282	BUILD_TUPLE(arg=2, lineno=180)
         284	BINARY_SUBSCR(arg=None, lineno=180)
         286	LOAD_FAST(arg=12, lineno=180)
         288	BINARY_MULTIPLY(arg=None, lineno=180)
         290	INPLACE_ADD(arg=None, lineno=180)
         292	ROT_THREE(arg=None, lineno=180)
         294	STORE_SUBSCR(arg=None, lineno=180)
         296	JUMP_ABSOLUTE(arg=240, lineno=180)
>        298	JUMP_ABSOLUTE(arg=202, lineno=180)
>        300	JUMP_ABSOLUTE(arg=60, lineno=180)
>        302	LOAD_FAST(arg=9, lineno=182)
         304	LOAD_FAST(arg=8, lineno=182)
         306	LOAD_CONST(arg=0, lineno=182)
         308	LOAD_CONST(arg=0, lineno=182)
         310	BUILD_SLICE(arg=2, lineno=182)
         312	BUILD_TUPLE(arg=2, lineno=182)
         314	BINARY_SUBSCR(arg=None, lineno=182)
         316	RETURN_VALUE(arg=None, lineno=182)
DEBUG 2022-02-14 16:38:03,328 pending: deque([State(pc_initial=0 nstack_initial=0)])
DEBUG 2022-02-14 16:38:03,328 stack: []
DEBUG 2022-02-14 16:38:03,328 dispatch pc=0, inst=NOP(arg=None, lineno=159)
DEBUG 2022-02-14 16:38:03,328 stack []
DEBUG 2022-02-14 16:38:03,328 dispatch pc=2, inst=LOAD_FAST(arg=0, lineno=159)
DEBUG 2022-02-14 16:38:03,328 stack []
DEBUG 2022-02-14 16:38:03,328 dispatch pc=4, inst=LOAD_METHOD(arg=0, lineno=159)
DEBUG 2022-02-14 16:38:03,328 stack ['$E2.0']
DEBUG 2022-02-14 16:38:03,328 dispatch pc=6, inst=CALL_METHOD(arg=0, lineno=159)
DEBUG 2022-02-14 16:38:03,328 stack ['$4load_method.1']
DEBUG 2022-02-14 16:38:03,328 dispatch pc=8, inst=STORE_FAST(arg=7, lineno=159)
DEBUG 2022-02-14 16:38:03,328 stack ['$6call_method.2']
DEBUG 2022-02-14 16:38:03,328 dispatch pc=10, inst=LOAD_CONST(arg=1, lineno=161)
DEBUG 2022-02-14 16:38:03,328 stack []
DEBUG 2022-02-14 16:38:03,329 dispatch pc=12, inst=STORE_FAST(arg=8, lineno=161)
DEBUG 2022-02-14 16:38:03,329 stack ['$const10.3']
DEBUG 2022-02-14 16:38:03,329 dispatch pc=14, inst=LOAD_GLOBAL(arg=1, lineno=162)
DEBUG 2022-02-14 16:38:03,329 stack []
DEBUG 2022-02-14 16:38:03,329 dispatch pc=16, inst=LOAD_ATTR(arg=2, lineno=162)
DEBUG 2022-02-14 16:38:03,329 stack ['$14load_global.4']
DEBUG 2022-02-14 16:38:03,329 dispatch pc=18, inst=LOAD_CONST(arg=2, lineno=162)
DEBUG 2022-02-14 16:38:03,329 stack ['$16load_attr.5']
DEBUG 2022-02-14 16:38:03,329 dispatch pc=20, inst=LOAD_FAST(arg=4, lineno=162)
DEBUG 2022-02-14 16:38:03,329 stack ['$16load_attr.5', '$const18.6']
DEBUG 2022-02-14 16:38:03,329 dispatch pc=22, inst=LOAD_CONST(arg=3, lineno=162)
DEBUG 2022-02-14 16:38:03,329 stack ['$16load_attr.5', '$const18.6', '$n20.7']
DEBUG 2022-02-14 16:38:03,329 dispatch pc=24, inst=BINARY_ADD(arg=None, lineno=162)
DEBUG 2022-02-14 16:38:03,329 stack ['$16load_attr.5', '$const18.6', '$n20.7', '$const22.8']
DEBUG 2022-02-14 16:38:03,329 dispatch pc=26, inst=BUILD_TUPLE(arg=2, lineno=162)
DEBUG 2022-02-14 16:38:03,329 stack ['$16load_attr.5', '$const18.6', '$24binary_add.9']
DEBUG 2022-02-14 16:38:03,329 dispatch pc=28, inst=LOAD_GLOBAL(arg=1, lineno=162)
DEBUG 2022-02-14 16:38:03,329 stack ['$16load_attr.5', '$26build_tuple.10']
DEBUG 2022-02-14 16:38:03,329 dispatch pc=30, inst=LOAD_ATTR(arg=3, lineno=162)
DEBUG 2022-02-14 16:38:03,329 stack ['$16load_attr.5', '$26build_tuple.10', '$28load_global.11']
DEBUG 2022-02-14 16:38:03,329 dispatch pc=32, inst=LOAD_CONST(arg=4, lineno=162)
DEBUG 2022-02-14 16:38:03,329 stack ['$16load_attr.5', '$26build_tuple.10', '$30load_attr.12']
DEBUG 2022-02-14 16:38:03,329 dispatch pc=34, inst=CALL_FUNCTION_KW(arg=2, lineno=162)
DEBUG 2022-02-14 16:38:03,329 stack ['$16load_attr.5', '$26build_tuple.10', '$30load_attr.12', '$const32.13']
DEBUG 2022-02-14 16:38:03,329 dispatch pc=36, inst=STORE_FAST(arg=9, lineno=162)
DEBUG 2022-02-14 16:38:03,329 stack ['$34call_function_kw.14']
DEBUG 2022-02-14 16:38:03,330 dispatch pc=38, inst=LOAD_CONST(arg=3, lineno=163)
DEBUG 2022-02-14 16:38:03,330 stack []
DEBUG 2022-02-14 16:38:03,330 dispatch pc=40, inst=LOAD_FAST(arg=9, lineno=163)
DEBUG 2022-02-14 16:38:03,330 stack ['$const38.15']
DEBUG 2022-02-14 16:38:03,330 dispatch pc=42, inst=LOAD_CONST(arg=5, lineno=163)
DEBUG 2022-02-14 16:38:03,330 stack ['$const38.15', '$comb40.16']
DEBUG 2022-02-14 16:38:03,330 dispatch pc=44, inst=STORE_SUBSCR(arg=None, lineno=163)
DEBUG 2022-02-14 16:38:03,330 stack ['$const38.15', '$comb40.16', '$const42.17']
DEBUG 2022-02-14 16:38:03,330 dispatch pc=46, inst=LOAD_GLOBAL(arg=4, lineno=164)
DEBUG 2022-02-14 16:38:03,330 stack []
DEBUG 2022-02-14 16:38:03,330 dispatch pc=48, inst=LOAD_CONST(arg=3, lineno=164)
DEBUG 2022-02-14 16:38:03,330 stack ['$46load_global.18']
DEBUG 2022-02-14 16:38:03,330 dispatch pc=50, inst=LOAD_FAST(arg=4, lineno=164)
DEBUG 2022-02-14 16:38:03,330 stack ['$46load_global.18', '$const48.19']
DEBUG 2022-02-14 16:38:03,330 dispatch pc=52, inst=LOAD_CONST(arg=3, lineno=164)
DEBUG 2022-02-14 16:38:03,330 stack ['$46load_global.18', '$const48.19', '$n50.20']
DEBUG 2022-02-14 16:38:03,330 dispatch pc=54, inst=BINARY_ADD(arg=None, lineno=164)
DEBUG 2022-02-14 16:38:03,330 stack ['$46load_global.18', '$const48.19', '$n50.20', '$const52.21']
DEBUG 2022-02-14 16:38:03,330 dispatch pc=56, inst=CALL_FUNCTION(arg=2, lineno=164)
DEBUG 2022-02-14 16:38:03,330 stack ['$46load_global.18', '$const48.19', '$54binary_add.22']
DEBUG 2022-02-14 16:38:03,330 dispatch pc=58, inst=GET_ITER(arg=None, lineno=164)
DEBUG 2022-02-14 16:38:03,330 stack ['$56call_function.23']
DEBUG 2022-02-14 16:38:03,330 end state. edges=[Edge(pc=60, stack=('$58get_iter.24',), blockstack=(), npush=0)]
DEBUG 2022-02-14 16:38:03,330 pending: deque([State(pc_initial=60 nstack_initial=1)])
DEBUG 2022-02-14 16:38:03,330 stack: ['$phi60.0']
DEBUG 2022-02-14 16:38:03,330 dispatch pc=60, inst=FOR_ITER(arg=240, lineno=164)
DEBUG 2022-02-14 16:38:03,331 stack ['$phi60.0']
DEBUG 2022-02-14 16:38:03,331 end state. edges=[Edge(pc=302, stack=(), blockstack=(), npush=0), Edge(pc=62, stack=('$phi60.0', '$60for_iter.2'), blockstack=(), npush=0)]
DEBUG 2022-02-14 16:38:03,331 pending: deque([State(pc_initial=302 nstack_initial=0), State(pc_initial=62 nstack_initial=2)])
DEBUG 2022-02-14 16:38:03,331 stack: []
DEBUG 2022-02-14 16:38:03,331 dispatch pc=302, inst=LOAD_FAST(arg=9, lineno=182)
DEBUG 2022-02-14 16:38:03,331 stack []
DEBUG 2022-02-14 16:38:03,331 dispatch pc=304, inst=LOAD_FAST(arg=8, lineno=182)
DEBUG 2022-02-14 16:38:03,331 stack ['$comb302.0']
DEBUG 2022-02-14 16:38:03,331 dispatch pc=306, inst=LOAD_CONST(arg=0, lineno=182)
DEBUG 2022-02-14 16:38:03,331 stack ['$comb302.0', '$count304.1']
DEBUG 2022-02-14 16:38:03,331 dispatch pc=308, inst=LOAD_CONST(arg=0, lineno=182)
DEBUG 2022-02-14 16:38:03,331 stack ['$comb302.0', '$count304.1', '$const306.2']
DEBUG 2022-02-14 16:38:03,331 dispatch pc=310, inst=BUILD_SLICE(arg=2, lineno=182)
DEBUG 2022-02-14 16:38:03,331 stack ['$comb302.0', '$count304.1', '$const306.2', '$const308.3']
DEBUG 2022-02-14 16:38:03,331 dispatch pc=312, inst=BUILD_TUPLE(arg=2, lineno=182)
DEBUG 2022-02-14 16:38:03,331 stack ['$comb302.0', '$count304.1', '$310build_slice.5']
DEBUG 2022-02-14 16:38:03,331 dispatch pc=314, inst=BINARY_SUBSCR(arg=None, lineno=182)
DEBUG 2022-02-14 16:38:03,331 stack ['$comb302.0', '$312build_tuple.6']
DEBUG 2022-02-14 16:38:03,331 dispatch pc=316, inst=RETURN_VALUE(arg=None, lineno=182)
DEBUG 2022-02-14 16:38:03,331 stack ['$314binary_subscr.7']
DEBUG 2022-02-14 16:38:03,331 end state. edges=[]
DEBUG 2022-02-14 16:38:03,331 pending: deque([State(pc_initial=62 nstack_initial=2)])
DEBUG 2022-02-14 16:38:03,331 stack: ['$phi62.0', '$phi62.1']
DEBUG 2022-02-14 16:38:03,331 dispatch pc=62, inst=STORE_FAST(arg=10, lineno=164)
DEBUG 2022-02-14 16:38:03,331 stack ['$phi62.0', '$phi62.1']
DEBUG 2022-02-14 16:38:03,332 dispatch pc=64, inst=LOAD_FAST(arg=10, lineno=165)
DEBUG 2022-02-14 16:38:03,332 stack ['$phi62.0']
DEBUG 2022-02-14 16:38:03,332 dispatch pc=66, inst=LOAD_CONST(arg=3, lineno=165)
DEBUG 2022-02-14 16:38:03,332 stack ['$phi62.0', '$i64.2']
DEBUG 2022-02-14 16:38:03,332 dispatch pc=68, inst=COMPARE_OP(arg=2, lineno=165)
DEBUG 2022-02-14 16:38:03,332 stack ['$phi62.0', '$i64.2', '$const66.3']
DEBUG 2022-02-14 16:38:03,332 dispatch pc=70, inst=POP_JUMP_IF_FALSE(arg=78, lineno=165)
DEBUG 2022-02-14 16:38:03,332 stack ['$phi62.0', '$68compare_op.4']
DEBUG 2022-02-14 16:38:03,332 end state. edges=[Edge(pc=72, stack=('$phi62.0',), blockstack=(), npush=0), Edge(pc=78, stack=('$phi62.0',), blockstack=(), npush=0)]
DEBUG 2022-02-14 16:38:03,332 pending: deque([State(pc_initial=72 nstack_initial=1), State(pc_initial=78 nstack_initial=1)])
DEBUG 2022-02-14 16:38:03,332 stack: ['$phi72.0']
DEBUG 2022-02-14 16:38:03,332 dispatch pc=72, inst=LOAD_FAST(arg=5, lineno=166)
DEBUG 2022-02-14 16:38:03,332 stack ['$phi72.0']
DEBUG 2022-02-14 16:38:03,332 dispatch pc=74, inst=STORE_FAST(arg=11, lineno=166)
DEBUG 2022-02-14 16:38:03,332 stack ['$phi72.0', '$oddloop72.1']
DEBUG 2022-02-14 16:38:03,332 dispatch pc=76, inst=JUMP_FORWARD(arg=62, lineno=166)
DEBUG 2022-02-14 16:38:03,332 stack ['$phi72.0']
DEBUG 2022-02-14 16:38:03,332 end state. edges=[Edge(pc=140, stack=('$phi72.0',), blockstack=(), npush=0)]
DEBUG 2022-02-14 16:38:03,332 pending: deque([State(pc_initial=78 nstack_initial=1), State(pc_initial=140 nstack_initial=1)])
DEBUG 2022-02-14 16:38:03,332 stack: ['$phi78.0']
DEBUG 2022-02-14 16:38:03,332 dispatch pc=78, inst=LOAD_FAST(arg=10, lineno=167)
DEBUG 2022-02-14 16:38:03,332 stack ['$phi78.0']
DEBUG 2022-02-14 16:38:03,332 dispatch pc=80, inst=LOAD_CONST(arg=2, lineno=167)
DEBUG 2022-02-14 16:38:03,332 stack ['$phi78.0', '$i78.1']
DEBUG 2022-02-14 16:38:03,332 dispatch pc=82, inst=BINARY_MODULO(arg=None, lineno=167)
DEBUG 2022-02-14 16:38:03,332 stack ['$phi78.0', '$i78.1', '$const80.2']
DEBUG 2022-02-14 16:38:03,333 dispatch pc=84, inst=LOAD_CONST(arg=1, lineno=167)
DEBUG 2022-02-14 16:38:03,333 stack ['$phi78.0', '$82binary_modulo.3']
DEBUG 2022-02-14 16:38:03,333 dispatch pc=86, inst=COMPARE_OP(arg=2, lineno=167)
DEBUG 2022-02-14 16:38:03,333 stack ['$phi78.0', '$82binary_modulo.3', '$const84.4']
DEBUG 2022-02-14 16:38:03,333 dispatch pc=88, inst=POP_JUMP_IF_FALSE(arg=124, lineno=167)
DEBUG 2022-02-14 16:38:03,333 stack ['$phi78.0', '$86compare_op.5']
DEBUG 2022-02-14 16:38:03,333 end state. edges=[Edge(pc=90, stack=('$phi78.0',), blockstack=(), npush=0), Edge(pc=124, stack=('$phi78.0',), blockstack=(), npush=0)]
DEBUG 2022-02-14 16:38:03,333 pending: deque([State(pc_initial=140 nstack_initial=1), State(pc_initial=90 nstack_initial=1), State(pc_initial=124 nstack_initial=1)])
DEBUG 2022-02-14 16:38:03,333 stack: ['$phi140.0']
DEBUG 2022-02-14 16:38:03,333 dispatch pc=140, inst=LOAD_CONST(arg=3, lineno=174)
DEBUG 2022-02-14 16:38:03,333 stack ['$phi140.0']
DEBUG 2022-02-14 16:38:03,333 dispatch pc=142, inst=STORE_FAST(arg=12, lineno=174)
DEBUG 2022-02-14 16:38:03,333 stack ['$phi140.0', '$const140.1']
DEBUG 2022-02-14 16:38:03,333 dispatch pc=144, inst=LOAD_CONST(arg=3, lineno=175)
DEBUG 2022-02-14 16:38:03,333 stack ['$phi140.0']
DEBUG 2022-02-14 16:38:03,333 dispatch pc=146, inst=LOAD_FAST(arg=8, lineno=175)
DEBUG 2022-02-14 16:38:03,333 stack ['$phi140.0', '$const144.2']
DEBUG 2022-02-14 16:38:03,333 dispatch pc=148, inst=BINARY_SUBTRACT(arg=None, lineno=175)
DEBUG 2022-02-14 16:38:03,333 stack ['$phi140.0', '$const144.2', '$count146.3']
DEBUG 2022-02-14 16:38:03,333 dispatch pc=150, inst=STORE_FAST(arg=8, lineno=175)
DEBUG 2022-02-14 16:38:03,333 stack ['$phi140.0', '$148binary_subtract.4']
DEBUG 2022-02-14 16:38:03,333 dispatch pc=152, inst=LOAD_FAST(arg=9, lineno=176)
DEBUG 2022-02-14 16:38:03,333 stack ['$phi140.0']
DEBUG 2022-02-14 16:38:03,333 dispatch pc=154, inst=LOAD_CONST(arg=3, lineno=176)
DEBUG 2022-02-14 16:38:03,333 stack ['$phi140.0', '$comb152.5']
DEBUG 2022-02-14 16:38:03,333 dispatch pc=156, inst=LOAD_FAST(arg=8, lineno=176)
DEBUG 2022-02-14 16:38:03,334 stack ['$phi140.0', '$comb152.5', '$const154.6']
DEBUG 2022-02-14 16:38:03,334 dispatch pc=158, inst=BINARY_SUBTRACT(arg=None, lineno=176)
DEBUG 2022-02-14 16:38:03,334 stack ['$phi140.0', '$comb152.5', '$const154.6', '$count156.7']
DEBUG 2022-02-14 16:38:03,334 dispatch pc=160, inst=LOAD_CONST(arg=0, lineno=176)
DEBUG 2022-02-14 16:38:03,334 stack ['$phi140.0', '$comb152.5', '$158binary_subtract.8']
DEBUG 2022-02-14 16:38:03,334 dispatch pc=162, inst=LOAD_CONST(arg=0, lineno=176)
DEBUG 2022-02-14 16:38:03,334 stack ['$phi140.0', '$comb152.5', '$158binary_subtract.8', '$const160.9']
DEBUG 2022-02-14 16:38:03,334 dispatch pc=164, inst=BUILD_SLICE(arg=2, lineno=176)
DEBUG 2022-02-14 16:38:03,334 stack ['$phi140.0', '$comb152.5', '$158binary_subtract.8', '$const160.9', '$const162.10']
DEBUG 2022-02-14 16:38:03,334 dispatch pc=166, inst=BUILD_TUPLE(arg=2, lineno=176)
DEBUG 2022-02-14 16:38:03,334 stack ['$phi140.0', '$comb152.5', '$158binary_subtract.8', '$164build_slice.12']
DEBUG 2022-02-14 16:38:03,334 dispatch pc=168, inst=BINARY_SUBSCR(arg=None, lineno=176)
DEBUG 2022-02-14 16:38:03,334 stack ['$phi140.0', '$comb152.5', '$166build_tuple.13']
DEBUG 2022-02-14 16:38:03,334 dispatch pc=170, inst=LOAD_FAST(arg=9, lineno=176)
DEBUG 2022-02-14 16:38:03,334 stack ['$phi140.0', '$168binary_subscr.14']
DEBUG 2022-02-14 16:38:03,334 dispatch pc=172, inst=LOAD_FAST(arg=8, lineno=176)
DEBUG 2022-02-14 16:38:03,334 stack ['$phi140.0', '$168binary_subscr.14', '$comb170.15']
DEBUG 2022-02-14 16:38:03,334 dispatch pc=174, inst=LOAD_CONST(arg=0, lineno=176)
DEBUG 2022-02-14 16:38:03,334 stack ['$phi140.0', '$168binary_subscr.14', '$comb170.15', '$count172.16']
DEBUG 2022-02-14 16:38:03,334 dispatch pc=176, inst=LOAD_CONST(arg=0, lineno=176)
DEBUG 2022-02-14 16:38:03,334 stack ['$phi140.0', '$168binary_subscr.14', '$comb170.15', '$count172.16', '$const174.17']
DEBUG 2022-02-14 16:38:03,334 dispatch pc=178, inst=BUILD_SLICE(arg=2, lineno=176)
DEBUG 2022-02-14 16:38:03,334 stack ['$phi140.0', '$168binary_subscr.14', '$comb170.15', '$count172.16', '$const174.17', '$const176.18']
DEBUG 2022-02-14 16:38:03,334 dispatch pc=180, inst=BUILD_TUPLE(arg=2, lineno=176)
DEBUG 2022-02-14 16:38:03,334 stack ['$phi140.0', '$168binary_subscr.14', '$comb170.15', '$count172.16', '$178build_slice.20']
DEBUG 2022-02-14 16:38:03,335 dispatch pc=182, inst=STORE_SUBSCR(arg=None, lineno=176)
DEBUG 2022-02-14 16:38:03,335 stack ['$phi140.0', '$168binary_subscr.14', '$comb170.15', '$180build_tuple.21']
DEBUG 2022-02-14 16:38:03,335 dispatch pc=184, inst=LOAD_GLOBAL(arg=4, lineno=177)
DEBUG 2022-02-14 16:38:03,335 stack ['$phi140.0']
DEBUG 2022-02-14 16:38:03,335 dispatch pc=186, inst=LOAD_CONST(arg=3, lineno=177)
DEBUG 2022-02-14 16:38:03,335 stack ['$phi140.0', '$184load_global.22']
DEBUG 2022-02-14 16:38:03,335 dispatch pc=188, inst=LOAD_FAST(arg=4, lineno=177)
DEBUG 2022-02-14 16:38:03,335 stack ['$phi140.0', '$184load_global.22', '$const186.23']
DEBUG 2022-02-14 16:38:03,335 dispatch pc=190, inst=LOAD_FAST(arg=10, lineno=177)
DEBUG 2022-02-14 16:38:03,335 stack ['$phi140.0', '$184load_global.22', '$const186.23', '$n188.24']
DEBUG 2022-02-14 16:38:03,335 dispatch pc=192, inst=BINARY_FLOOR_DIVIDE(arg=None, lineno=177)
DEBUG 2022-02-14 16:38:03,335 stack ['$phi140.0', '$184load_global.22', '$const186.23', '$n188.24', '$i190.25']
DEBUG 2022-02-14 16:38:03,335 dispatch pc=194, inst=LOAD_CONST(arg=3, lineno=177)
DEBUG 2022-02-14 16:38:03,335 stack ['$phi140.0', '$184load_global.22', '$const186.23', '$192binary_floor_divide.26']
DEBUG 2022-02-14 16:38:03,335 dispatch pc=196, inst=BINARY_ADD(arg=None, lineno=177)
DEBUG 2022-02-14 16:38:03,335 stack ['$phi140.0', '$184load_global.22', '$const186.23', '$192binary_floor_divide.26', '$const194.27']
DEBUG 2022-02-14 16:38:03,335 dispatch pc=198, inst=CALL_FUNCTION(arg=2, lineno=177)
DEBUG 2022-02-14 16:38:03,335 stack ['$phi140.0', '$184load_global.22', '$const186.23', '$196binary_add.28']
DEBUG 2022-02-14 16:38:03,335 dispatch pc=200, inst=GET_ITER(arg=None, lineno=177)
DEBUG 2022-02-14 16:38:03,335 stack ['$phi140.0', '$198call_function.29']
DEBUG 2022-02-14 16:38:03,335 end state. edges=[Edge(pc=202, stack=('$phi140.0', '$200get_iter.30'), blockstack=(), npush=0)]
DEBUG 2022-02-14 16:38:03,335 pending: deque([State(pc_initial=90 nstack_initial=1), State(pc_initial=124 nstack_initial=1), State(pc_initial=202 nstack_initial=2)])
DEBUG 2022-02-14 16:38:03,335 stack: ['$phi90.0']
DEBUG 2022-02-14 16:38:03,335 dispatch pc=90, inst=LOAD_FAST(arg=7, lineno=168)
DEBUG 2022-02-14 16:38:03,335 stack ['$phi90.0']
DEBUG 2022-02-14 16:38:03,335 dispatch pc=92, inst=LOAD_METHOD(arg=5, lineno=168)
DEBUG 2022-02-14 16:38:03,336 stack ['$phi90.0', '$E_k90.1']
DEBUG 2022-02-14 16:38:03,336 dispatch pc=94, inst=CALL_METHOD(arg=0, lineno=168)
DEBUG 2022-02-14 16:38:03,336 stack ['$phi90.0', '$92load_method.2']
DEBUG 2022-02-14 16:38:03,336 dispatch pc=96, inst=LOAD_FAST(arg=10, lineno=168)
DEBUG 2022-02-14 16:38:03,336 stack ['$phi90.0', '$94call_method.3']
DEBUG 2022-02-14 16:38:03,336 dispatch pc=98, inst=BINARY_TRUE_DIVIDE(arg=None, lineno=168)
DEBUG 2022-02-14 16:38:03,336 stack ['$phi90.0', '$94call_method.3', '$i96.4']
DEBUG 2022-02-14 16:38:03,336 dispatch pc=100, inst=LOAD_FAST(arg=2, lineno=168)
DEBUG 2022-02-14 16:38:03,336 stack ['$phi90.0', '$98binary_true_divide.5']
DEBUG 2022-02-14 16:38:03,336 dispatch pc=102, inst=LOAD_FAST(arg=3, lineno=168)
DEBUG 2022-02-14 16:38:03,336 stack ['$phi90.0', '$98binary_true_divide.5', '$XD_S100.6']
DEBUG 2022-02-14 16:38:03,336 dispatch pc=104, inst=BINARY_MATRIX_MULTIPLY(arg=None, lineno=168)
DEBUG 2022-02-14 16:38:03,336 stack ['$phi90.0', '$98binary_true_divide.5', '$XD_S100.6', '$D_S102.7']
DEBUG 2022-02-14 16:38:03,336 dispatch pc=106, inst=LOAD_CONST(arg=2, lineno=168)
DEBUG 2022-02-14 16:38:03,336 stack ['$phi90.0', '$98binary_true_divide.5', '$104binary_matrix_multiply.8']
DEBUG 2022-02-14 16:38:03,336 dispatch pc=108, inst=BINARY_TRUE_DIVIDE(arg=None, lineno=168)
DEBUG 2022-02-14 16:38:03,336 stack ['$phi90.0', '$98binary_true_divide.5', '$104binary_matrix_multiply.8', '$const106.9']
DEBUG 2022-02-14 16:38:03,336 dispatch pc=110, inst=BINARY_ADD(arg=None, lineno=168)
DEBUG 2022-02-14 16:38:03,336 stack ['$phi90.0', '$98binary_true_divide.5', '$108binary_true_divide.10']
DEBUG 2022-02-14 16:38:03,336 dispatch pc=112, inst=STORE_FAST(arg=11, lineno=168)
DEBUG 2022-02-14 16:38:03,336 stack ['$phi90.0', '$110binary_add.11']
DEBUG 2022-02-14 16:38:03,336 dispatch pc=114, inst=LOAD_FAST(arg=7, lineno=169)
DEBUG 2022-02-14 16:38:03,336 stack ['$phi90.0']
DEBUG 2022-02-14 16:38:03,336 dispatch pc=116, inst=LOAD_FAST(arg=0, lineno=169)
DEBUG 2022-02-14 16:38:03,336 stack ['$phi90.0', '$E_k114.12']
DEBUG 2022-02-14 16:38:03,336 dispatch pc=118, inst=INPLACE_MULTIPLY(arg=None, lineno=169)
DEBUG 2022-02-14 16:38:03,337 stack ['$phi90.0', '$E_k114.12', '$E116.13']
DEBUG 2022-02-14 16:38:03,337 dispatch pc=120, inst=STORE_FAST(arg=7, lineno=169)
DEBUG 2022-02-14 16:38:03,337 stack ['$phi90.0', '$118inplace_multiply.14']
DEBUG 2022-02-14 16:38:03,337 dispatch pc=122, inst=JUMP_FORWARD(arg=16, lineno=169)
DEBUG 2022-02-14 16:38:03,337 stack ['$phi90.0']
DEBUG 2022-02-14 16:38:03,337 end state. edges=[Edge(pc=140, stack=('$phi90.0',), blockstack=(), npush=0)]
DEBUG 2022-02-14 16:38:03,337 pending: deque([State(pc_initial=124 nstack_initial=1), State(pc_initial=202 nstack_initial=2), State(pc_initial=140 nstack_initial=1)])
DEBUG 2022-02-14 16:38:03,337 stack: ['$phi124.0']
DEBUG 2022-02-14 16:38:03,337 dispatch pc=124, inst=LOAD_FAST(arg=6, lineno=171)
DEBUG 2022-02-14 16:38:03,337 stack ['$phi124.0']
DEBUG 2022-02-14 16:38:03,337 dispatch pc=126, inst=LOAD_FAST(arg=3, lineno=171)
DEBUG 2022-02-14 16:38:03,337 stack ['$phi124.0', '$oddVX_S124.1']
DEBUG 2022-02-14 16:38:03,337 dispatch pc=128, inst=BINARY_MATRIX_MULTIPLY(arg=None, lineno=171)
DEBUG 2022-02-14 16:38:03,337 stack ['$phi124.0', '$oddVX_S124.1', '$D_S126.2']
DEBUG 2022-02-14 16:38:03,337 dispatch pc=130, inst=STORE_FAST(arg=11, lineno=171)
DEBUG 2022-02-14 16:38:03,337 stack ['$phi124.0', '$128binary_matrix_multiply.3']
DEBUG 2022-02-14 16:38:03,337 dispatch pc=132, inst=LOAD_FAST(arg=1, lineno=172)
DEBUG 2022-02-14 16:38:03,337 stack ['$phi124.0']
DEBUG 2022-02-14 16:38:03,337 dispatch pc=134, inst=LOAD_FAST(arg=3, lineno=172)
DEBUG 2022-02-14 16:38:03,337 stack ['$phi124.0', '$AX_S132.4']
DEBUG 2022-02-14 16:38:03,337 dispatch pc=136, inst=BINARY_MATRIX_MULTIPLY(arg=None, lineno=172)
DEBUG 2022-02-14 16:38:03,337 stack ['$phi124.0', '$AX_S132.4', '$D_S134.5']
DEBUG 2022-02-14 16:38:03,337 dispatch pc=138, inst=STORE_FAST(arg=3, lineno=172)
DEBUG 2022-02-14 16:38:03,337 stack ['$phi124.0', '$136binary_matrix_multiply.6']
DEBUG 2022-02-14 16:38:03,337 end state. edges=[Edge(pc=140, stack=('$phi124.0',), blockstack=(), npush=0)]
DEBUG 2022-02-14 16:38:03,338 pending: deque([State(pc_initial=202 nstack_initial=2), State(pc_initial=140 nstack_initial=1), State(pc_initial=140 nstack_initial=1)])
DEBUG 2022-02-14 16:38:03,338 stack: ['$phi202.0', '$phi202.1']
DEBUG 2022-02-14 16:38:03,338 dispatch pc=202, inst=FOR_ITER(arg=96, lineno=177)
DEBUG 2022-02-14 16:38:03,338 stack ['$phi202.0', '$phi202.1']
DEBUG 2022-02-14 16:38:03,338 end state. edges=[Edge(pc=300, stack=('$phi202.0',), blockstack=(), npush=0), Edge(pc=204, stack=('$phi202.0', '$phi202.1', '$202for_iter.3'), blockstack=(), npush=0)]
DEBUG 2022-02-14 16:38:03,338 pending: deque([State(pc_initial=140 nstack_initial=1), State(pc_initial=140 nstack_initial=1), State(pc_initial=300 nstack_initial=1), State(pc_initial=204 nstack_initial=3)])
DEBUG 2022-02-14 16:38:03,338 pending: deque([State(pc_initial=140 nstack_initial=1), State(pc_initial=300 nstack_initial=1), State(pc_initial=204 nstack_initial=3)])
DEBUG 2022-02-14 16:38:03,338 pending: deque([State(pc_initial=300 nstack_initial=1), State(pc_initial=204 nstack_initial=3)])
DEBUG 2022-02-14 16:38:03,338 stack: ['$phi300.0']
DEBUG 2022-02-14 16:38:03,338 dispatch pc=300, inst=JUMP_ABSOLUTE(arg=60, lineno=180)
DEBUG 2022-02-14 16:38:03,338 stack ['$phi300.0']
DEBUG 2022-02-14 16:38:03,338 end state. edges=[Edge(pc=60, stack=('$phi300.0',), blockstack=(), npush=0)]
DEBUG 2022-02-14 16:38:03,338 pending: deque([State(pc_initial=204 nstack_initial=3), State(pc_initial=60 nstack_initial=1)])
DEBUG 2022-02-14 16:38:03,338 stack: ['$phi204.0', '$phi204.1', '$phi204.2']
DEBUG 2022-02-14 16:38:03,338 dispatch pc=204, inst=STORE_FAST(arg=13, lineno=177)
DEBUG 2022-02-14 16:38:03,338 stack ['$phi204.0', '$phi204.1', '$phi204.2']
DEBUG 2022-02-14 16:38:03,338 dispatch pc=206, inst=LOAD_FAST(arg=12, lineno=178)
DEBUG 2022-02-14 16:38:03,338 stack ['$phi204.0', '$phi204.1']
DEBUG 2022-02-14 16:38:03,338 dispatch pc=208, inst=LOAD_FAST(arg=11, lineno=178)
DEBUG 2022-02-14 16:38:03,338 stack ['$phi204.0', '$phi204.1', '$powfactor206.3']
DEBUG 2022-02-14 16:38:03,338 dispatch pc=210, inst=LOAD_FAST(arg=13, lineno=178)
DEBUG 2022-02-14 16:38:03,338 stack ['$phi204.0', '$phi204.1', '$powfactor206.3', '$factor208.4']
DEBUG 2022-02-14 16:38:03,338 dispatch pc=212, inst=BINARY_TRUE_DIVIDE(arg=None, lineno=178)
DEBUG 2022-02-14 16:38:03,339 stack ['$phi204.0', '$phi204.1', '$powfactor206.3', '$factor208.4', '$j210.5']
DEBUG 2022-02-14 16:38:03,339 dispatch pc=214, inst=INPLACE_MULTIPLY(arg=None, lineno=178)
DEBUG 2022-02-14 16:38:03,339 stack ['$phi204.0', '$phi204.1', '$powfactor206.3', '$212binary_true_divide.6']
DEBUG 2022-02-14 16:38:03,339 dispatch pc=216, inst=STORE_FAST(arg=12, lineno=178)
DEBUG 2022-02-14 16:38:03,339 stack ['$phi204.0', '$phi204.1', '$214inplace_multiply.7']
DEBUG 2022-02-14 16:38:03,339 dispatch pc=218, inst=LOAD_GLOBAL(arg=4, lineno=179)
DEBUG 2022-02-14 16:38:03,339 stack ['$phi204.0', '$phi204.1']
DEBUG 2022-02-14 16:38:03,339 dispatch pc=220, inst=LOAD_FAST(arg=10, lineno=179)
DEBUG 2022-02-14 16:38:03,339 stack ['$phi204.0', '$phi204.1', '$218load_global.8']
DEBUG 2022-02-14 16:38:03,339 dispatch pc=222, inst=LOAD_FAST(arg=13, lineno=179)
DEBUG 2022-02-14 16:38:03,339 stack ['$phi204.0', '$phi204.1', '$218load_global.8', '$i220.9']
DEBUG 2022-02-14 16:38:03,339 dispatch pc=224, inst=BINARY_MULTIPLY(arg=None, lineno=179)
DEBUG 2022-02-14 16:38:03,339 stack ['$phi204.0', '$phi204.1', '$218load_global.8', '$i220.9', '$j222.10']
DEBUG 2022-02-14 16:38:03,339 dispatch pc=226, inst=LOAD_CONST(arg=3, lineno=179)
DEBUG 2022-02-14 16:38:03,339 stack ['$phi204.0', '$phi204.1', '$218load_global.8', '$224binary_multiply.11']
DEBUG 2022-02-14 16:38:03,339 dispatch pc=228, inst=BINARY_ADD(arg=None, lineno=179)
DEBUG 2022-02-14 16:38:03,339 stack ['$phi204.0', '$phi204.1', '$218load_global.8', '$224binary_multiply.11', '$const226.12']
DEBUG 2022-02-14 16:38:03,339 dispatch pc=230, inst=LOAD_FAST(arg=4, lineno=179)
DEBUG 2022-02-14 16:38:03,339 stack ['$phi204.0', '$phi204.1', '$218load_global.8', '$228binary_add.13']
DEBUG 2022-02-14 16:38:03,339 dispatch pc=232, inst=LOAD_CONST(arg=2, lineno=179)
DEBUG 2022-02-14 16:38:03,339 stack ['$phi204.0', '$phi204.1', '$218load_global.8', '$228binary_add.13', '$n230.14']
DEBUG 2022-02-14 16:38:03,340 dispatch pc=234, inst=BINARY_ADD(arg=None, lineno=179)
DEBUG 2022-02-14 16:38:03,340 stack ['$phi204.0', '$phi204.1', '$218load_global.8', '$228binary_add.13', '$n230.14', '$const232.15']
DEBUG 2022-02-14 16:38:03,340 dispatch pc=236, inst=CALL_FUNCTION(arg=2, lineno=179)
DEBUG 2022-02-14 16:38:03,340 stack ['$phi204.0', '$phi204.1', '$218load_global.8', '$228binary_add.13', '$234binary_add.16']
DEBUG 2022-02-14 16:38:03,340 dispatch pc=238, inst=GET_ITER(arg=None, lineno=179)
DEBUG 2022-02-14 16:38:03,340 stack ['$phi204.0', '$phi204.1', '$236call_function.17']
DEBUG 2022-02-14 16:38:03,340 end state. edges=[Edge(pc=240, stack=('$phi204.0', '$phi204.1', '$238get_iter.18'), blockstack=(), npush=0)]
DEBUG 2022-02-14 16:38:03,340 pending: deque([State(pc_initial=60 nstack_initial=1), State(pc_initial=240 nstack_initial=3)])
DEBUG 2022-02-14 16:38:03,340 pending: deque([State(pc_initial=240 nstack_initial=3)])
DEBUG 2022-02-14 16:38:03,340 stack: ['$phi240.0', '$phi240.1', '$phi240.2']
DEBUG 2022-02-14 16:38:03,341 dispatch pc=240, inst=FOR_ITER(arg=56, lineno=179)
DEBUG 2022-02-14 16:38:03,341 stack ['$phi240.0', '$phi240.1', '$phi240.2']
DEBUG 2022-02-14 16:38:03,341 end state. edges=[Edge(pc=298, stack=('$phi240.0', '$phi240.1'), blockstack=(), npush=0), Edge(pc=242, stack=('$phi240.0', '$phi240.1', '$phi240.2', '$240for_iter.4'), blockstack=(), npush=0)]
DEBUG 2022-02-14 16:38:03,341 pending: deque([State(pc_initial=298 nstack_initial=2), State(pc_initial=242 nstack_initial=4)])
DEBUG 2022-02-14 16:38:03,341 stack: ['$phi298.0', '$phi298.1']
DEBUG 2022-02-14 16:38:03,341 dispatch pc=298, inst=JUMP_ABSOLUTE(arg=202, lineno=180)
DEBUG 2022-02-14 16:38:03,341 stack ['$phi298.0', '$phi298.1']
DEBUG 2022-02-14 16:38:03,341 end state. edges=[Edge(pc=202, stack=('$phi298.0', '$phi298.1'), blockstack=(), npush=0)]
DEBUG 2022-02-14 16:38:03,341 pending: deque([State(pc_initial=242 nstack_initial=4), State(pc_initial=202 nstack_initial=2)])
DEBUG 2022-02-14 16:38:03,341 stack: ['$phi242.0', '$phi242.1', '$phi242.2', '$phi242.3']
DEBUG 2022-02-14 16:38:03,341 dispatch pc=242, inst=STORE_FAST(arg=14, lineno=179)
DEBUG 2022-02-14 16:38:03,341 stack ['$phi242.0', '$phi242.1', '$phi242.2', '$phi242.3']
DEBUG 2022-02-14 16:38:03,341 dispatch pc=244, inst=LOAD_FAST(arg=9, lineno=180)
DEBUG 2022-02-14 16:38:03,341 stack ['$phi242.0', '$phi242.1', '$phi242.2']
DEBUG 2022-02-14 16:38:03,341 dispatch pc=246, inst=LOAD_FAST(arg=8, lineno=180)
DEBUG 2022-02-14 16:38:03,341 stack ['$phi242.0', '$phi242.1', '$phi242.2', '$comb244.4']
DEBUG 2022-02-14 16:38:03,341 dispatch pc=248, inst=LOAD_FAST(arg=14, lineno=180)
DEBUG 2022-02-14 16:38:03,341 stack ['$phi242.0', '$phi242.1', '$phi242.2', '$comb244.4', '$count246.5']
DEBUG 2022-02-14 16:38:03,341 dispatch pc=250, inst=LOAD_CONST(arg=3, lineno=180)
DEBUG 2022-02-14 16:38:03,341 stack ['$phi242.0', '$phi242.1', '$phi242.2', '$comb244.4', '$count246.5', '$k248.6']
DEBUG 2022-02-14 16:38:03,341 dispatch pc=252, inst=BINARY_SUBTRACT(arg=None, lineno=180)
DEBUG 2022-02-14 16:38:03,341 stack ['$phi242.0', '$phi242.1', '$phi242.2', '$comb244.4', '$count246.5', '$k248.6', '$const250.7']
DEBUG 2022-02-14 16:38:03,341 dispatch pc=254, inst=BUILD_TUPLE(arg=2, lineno=180)
DEBUG 2022-02-14 16:38:03,341 stack ['$phi242.0', '$phi242.1', '$phi242.2', '$comb244.4', '$count246.5', '$252binary_subtract.8']
DEBUG 2022-02-14 16:38:03,342 dispatch pc=256, inst=DUP_TOP_TWO(arg=None, lineno=180)
DEBUG 2022-02-14 16:38:03,342 stack ['$phi242.0', '$phi242.1', '$phi242.2', '$comb244.4', '$254build_tuple.9']
DEBUG 2022-02-14 16:38:03,342 dispatch pc=258, inst=BINARY_SUBSCR(arg=None, lineno=180)
DEBUG 2022-02-14 16:38:03,342 stack ['$phi242.0', '$phi242.1', '$phi242.2', '$comb244.4', '$254build_tuple.9', '$256dup_top_two.10', '$256dup_top_two.11']
DEBUG 2022-02-14 16:38:03,342 dispatch pc=260, inst=LOAD_FAST(arg=9, lineno=180)
DEBUG 2022-02-14 16:38:03,342 stack ['$phi242.0', '$phi242.1', '$phi242.2', '$comb244.4', '$254build_tuple.9', '$258binary_subscr.12']
DEBUG 2022-02-14 16:38:03,342 dispatch pc=262, inst=LOAD_CONST(arg=3, lineno=180)
DEBUG 2022-02-14 16:38:03,342 stack ['$phi242.0', '$phi242.1', '$phi242.2', '$comb244.4', '$254build_tuple.9', '$258binary_subscr.12', '$comb260.13']
DEBUG 2022-02-14 16:38:03,342 dispatch pc=264, inst=LOAD_FAST(arg=8, lineno=180)
DEBUG 2022-02-14 16:38:03,342 stack ['$phi242.0', '$phi242.1', '$phi242.2', '$comb244.4', '$254build_tuple.9', '$258binary_subscr.12', '$comb260.13', '$const262.14']
DEBUG 2022-02-14 16:38:03,342 dispatch pc=266, inst=BINARY_SUBTRACT(arg=None, lineno=180)
DEBUG 2022-02-14 16:38:03,342 stack ['$phi242.0', '$phi242.1', '$phi242.2', '$comb244.4', '$254build_tuple.9', '$258binary_subscr.12', '$comb260.13', '$const262.14', '$count264.15']
DEBUG 2022-02-14 16:38:03,342 dispatch pc=268, inst=LOAD_FAST(arg=14, lineno=180)
DEBUG 2022-02-14 16:38:03,342 stack ['$phi242.0', '$phi242.1', '$phi242.2', '$comb244.4', '$254build_tuple.9', '$258binary_subscr.12', '$comb260.13', '$266binary_subtract.16']
DEBUG 2022-02-14 16:38:03,342 dispatch pc=270, inst=LOAD_FAST(arg=10, lineno=180)
DEBUG 2022-02-14 16:38:03,342 stack ['$phi242.0', '$phi242.1', '$phi242.2', '$comb244.4', '$254build_tuple.9', '$258binary_subscr.12', '$comb260.13', '$266binary_subtract.16', '$k268.17']
DEBUG 2022-02-14 16:38:03,342 dispatch pc=272, inst=LOAD_FAST(arg=13, lineno=180)
DEBUG 2022-02-14 16:38:03,342 stack ['$phi242.0', '$phi242.1', '$phi242.2', '$comb244.4', '$254build_tuple.9', '$258binary_subscr.12', '$comb260.13', '$266binary_subtract.16', '$k268.17', '$i270.18']
DEBUG 2022-02-14 16:38:03,342 dispatch pc=274, inst=BINARY_MULTIPLY(arg=None, lineno=180)
DEBUG 2022-02-14 16:38:03,342 stack ['$phi242.0', '$phi242.1', '$phi242.2', '$comb244.4', '$254build_tuple.9', '$258binary_subscr.12', '$comb260.13', '$266binary_subtract.16', '$k268.17', '$i270.18', '$j272.19']
DEBUG 2022-02-14 16:38:03,342 dispatch pc=276, inst=BINARY_SUBTRACT(arg=None, lineno=180)
DEBUG 2022-02-14 16:38:03,342 stack ['$phi242.0', '$phi242.1', '$phi242.2', '$comb244.4', '$254build_tuple.9', '$258binary_subscr.12', '$comb260.13', '$266binary_subtract.16', '$k268.17', '$274binary_multiply.20']
DEBUG 2022-02-14 16:38:03,342 dispatch pc=278, inst=LOAD_CONST(arg=3, lineno=180)
DEBUG 2022-02-14 16:38:03,343 stack ['$phi242.0', '$phi242.1', '$phi242.2', '$comb244.4', '$254build_tuple.9', '$258binary_subscr.12', '$comb260.13', '$266binary_subtract.16', '$276binary_subtract.21']
DEBUG 2022-02-14 16:38:03,343 dispatch pc=280, inst=BINARY_SUBTRACT(arg=None, lineno=180)
DEBUG 2022-02-14 16:38:03,343 stack ['$phi242.0', '$phi242.1', '$phi242.2', '$comb244.4', '$254build_tuple.9', '$258binary_subscr.12', '$comb260.13', '$266binary_subtract.16', '$276binary_subtract.21', '$const278.22']
DEBUG 2022-02-14 16:38:03,343 dispatch pc=282, inst=BUILD_TUPLE(arg=2, lineno=180)
DEBUG 2022-02-14 16:38:03,343 stack ['$phi242.0', '$phi242.1', '$phi242.2', '$comb244.4', '$254build_tuple.9', '$258binary_subscr.12', '$comb260.13', '$266binary_subtract.16', '$280binary_subtract.23']
DEBUG 2022-02-14 16:38:03,343 dispatch pc=284, inst=BINARY_SUBSCR(arg=None, lineno=180)
DEBUG 2022-02-14 16:38:03,343 stack ['$phi242.0', '$phi242.1', '$phi242.2', '$comb244.4', '$254build_tuple.9', '$258binary_subscr.12', '$comb260.13', '$282build_tuple.24']
DEBUG 2022-02-14 16:38:03,343 dispatch pc=286, inst=LOAD_FAST(arg=12, lineno=180)
DEBUG 2022-02-14 16:38:03,343 stack ['$phi242.0', '$phi242.1', '$phi242.2', '$comb244.4', '$254build_tuple.9', '$258binary_subscr.12', '$284binary_subscr.25']
DEBUG 2022-02-14 16:38:03,343 dispatch pc=288, inst=BINARY_MULTIPLY(arg=None, lineno=180)
DEBUG 2022-02-14 16:38:03,343 stack ['$phi242.0', '$phi242.1', '$phi242.2', '$comb244.4', '$254build_tuple.9', '$258binary_subscr.12', '$284binary_subscr.25', '$powfactor286.26']
DEBUG 2022-02-14 16:38:03,343 dispatch pc=290, inst=INPLACE_ADD(arg=None, lineno=180)
DEBUG 2022-02-14 16:38:03,343 stack ['$phi242.0', '$phi242.1', '$phi242.2', '$comb244.4', '$254build_tuple.9', '$258binary_subscr.12', '$288binary_multiply.27']
DEBUG 2022-02-14 16:38:03,343 dispatch pc=292, inst=ROT_THREE(arg=None, lineno=180)
DEBUG 2022-02-14 16:38:03,343 stack ['$phi242.0', '$phi242.1', '$phi242.2', '$comb244.4', '$254build_tuple.9', '$290inplace_add.28']
DEBUG 2022-02-14 16:38:03,343 dispatch pc=294, inst=STORE_SUBSCR(arg=None, lineno=180)
DEBUG 2022-02-14 16:38:03,343 stack ['$phi242.0', '$phi242.1', '$phi242.2', '$290inplace_add.28', '$comb244.4', '$254build_tuple.9']
DEBUG 2022-02-14 16:38:03,343 dispatch pc=296, inst=JUMP_ABSOLUTE(arg=240, lineno=180)
DEBUG 2022-02-14 16:38:03,344 stack ['$phi242.0', '$phi242.1', '$phi242.2']
DEBUG 2022-02-14 16:38:03,344 end state. edges=[Edge(pc=240, stack=('$phi242.0', '$phi242.1', '$phi242.2'), blockstack=(), npush=0)]
DEBUG 2022-02-14 16:38:03,344 pending: deque([State(pc_initial=202 nstack_initial=2), State(pc_initial=240 nstack_initial=3)])
DEBUG 2022-02-14 16:38:03,344 pending: deque([State(pc_initial=240 nstack_initial=3)])
DEBUG 2022-02-14 16:38:03,344 -------------------------Prune PHIs-------------------------
DEBUG 2022-02-14 16:38:03,344 Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=60 nstack_initial=1): {'$phi60.0'},
             State(pc_initial=62 nstack_initial=2): {'$phi62.1'},
             State(pc_initial=72 nstack_initial=1): set(),
             State(pc_initial=78 nstack_initial=1): set(),
             State(pc_initial=90 nstack_initial=1): set(),
             State(pc_initial=124 nstack_initial=1): set(),
             State(pc_initial=140 nstack_initial=1): set(),
             State(pc_initial=202 nstack_initial=2): {'$phi202.1'},
             State(pc_initial=204 nstack_initial=3): {'$phi204.2'},
             State(pc_initial=240 nstack_initial=3): {'$phi240.2'},
             State(pc_initial=242 nstack_initial=4): {'$phi242.3'},
             State(pc_initial=298 nstack_initial=2): set(),
             State(pc_initial=300 nstack_initial=1): set(),
             State(pc_initial=302 nstack_initial=0): set()})
DEBUG 2022-02-14 16:38:03,344 defmap: {'$phi202.1': State(pc_initial=140 nstack_initial=1),
 '$phi204.2': State(pc_initial=202 nstack_initial=2),
 '$phi240.2': State(pc_initial=204 nstack_initial=3),
 '$phi242.3': State(pc_initial=240 nstack_initial=3),
 '$phi60.0': State(pc_initial=0 nstack_initial=0),
 '$phi62.1': State(pc_initial=60 nstack_initial=1)}
DEBUG 2022-02-14 16:38:03,344 phismap: defaultdict(<class 'set'>,
            {'$phi124.0': {('$phi78.0', State(pc_initial=78 nstack_initial=1))},
             '$phi140.0': {('$phi124.0',
                            State(pc_initial=124 nstack_initial=1)),
                           ('$phi72.0', State(pc_initial=72 nstack_initial=1)),
                           ('$phi90.0', State(pc_initial=90 nstack_initial=1))},
             '$phi202.0': {('$phi140.0',
                            State(pc_initial=140 nstack_initial=1)),
                           ('$phi298.0',
                            State(pc_initial=298 nstack_initial=2))},
             '$phi202.1': {('$200get_iter.30',
                            State(pc_initial=140 nstack_initial=1)),
                           ('$phi298.1',
                            State(pc_initial=298 nstack_initial=2))},
             '$phi204.0': {('$phi202.0',
                            State(pc_initial=202 nstack_initial=2))},
             '$phi204.1': {('$phi202.1',
                            State(pc_initial=202 nstack_initial=2))},
             '$phi204.2': {('$202for_iter.3',
                            State(pc_initial=202 nstack_initial=2))},
             '$phi240.0': {('$phi204.0',
                            State(pc_initial=204 nstack_initial=3)),
                           ('$phi242.0',
                            State(pc_initial=242 nstack_initial=4))},
             '$phi240.1': {('$phi204.1',
                            State(pc_initial=204 nstack_initial=3)),
                           ('$phi242.1',
                            State(pc_initial=242 nstack_initial=4))},
             '$phi240.2': {('$238get_iter.18',
                            State(pc_initial=204 nstack_initial=3)),
                           ('$phi242.2',
                            State(pc_initial=242 nstack_initial=4))},
             '$phi242.0': {('$phi240.0',
                            State(pc_initial=240 nstack_initial=3))},
             '$phi242.1': {('$phi240.1',
                            State(pc_initial=240 nstack_initial=3))},
             '$phi242.2': {('$phi240.2',
                            State(pc_initial=240 nstack_initial=3))},
             '$phi242.3': {('$240for_iter.4',
                            State(pc_initial=240 nstack_initial=3))},
             '$phi298.0': {('$phi240.0',
                            State(pc_initial=240 nstack_initial=3))},
             '$phi298.1': {('$phi240.1',
                            State(pc_initial=240 nstack_initial=3))},
             '$phi300.0': {('$phi202.0',
                            State(pc_initial=202 nstack_initial=2))},
             '$phi60.0': {('$58get_iter.24',
                           State(pc_initial=0 nstack_initial=0)),
                          ('$phi300.0',
                           State(pc_initial=300 nstack_initial=1))},
             '$phi62.0': {('$phi60.0', State(pc_initial=60 nstack_initial=1))},
             '$phi62.1': {('$60for_iter.2',
                           State(pc_initial=60 nstack_initial=1))},
             '$phi72.0': {('$phi62.0', State(pc_initial=62 nstack_initial=2))},
             '$phi78.0': {('$phi62.0', State(pc_initial=62 nstack_initial=2))},
             '$phi90.0': {('$phi78.0', State(pc_initial=78 nstack_initial=1))}})
DEBUG 2022-02-14 16:38:03,345 changing phismap: defaultdict(<class 'set'>,
            {'$phi124.0': {('$phi62.0', State(pc_initial=62 nstack_initial=2))},
             '$phi140.0': {('$phi62.0', State(pc_initial=62 nstack_initial=2)),
                           ('$phi78.0', State(pc_initial=78 nstack_initial=1))},
             '$phi202.0': {('$phi240.0',
                            State(pc_initial=240 nstack_initial=3)),
                           ('$phi62.0', State(pc_initial=62 nstack_initial=2)),
                           ('$phi78.0', State(pc_initial=78 nstack_initial=1))},
             '$phi202.1': {('$200get_iter.30',
                            State(pc_initial=140 nstack_initial=1)),
                           ('$phi240.1',
                            State(pc_initial=240 nstack_initial=3))},
             '$phi204.0': {('$phi240.0',
                            State(pc_initial=240 nstack_initial=3)),
                           ('$phi62.0', State(pc_initial=62 nstack_initial=2)),
                           ('$phi78.0', State(pc_initial=78 nstack_initial=1))},
             '$phi204.1': {('$200get_iter.30',
                            State(pc_initial=140 nstack_initial=1)),
                           ('$phi240.1',
                            State(pc_initial=240 nstack_initial=3))},
             '$phi204.2': {('$202for_iter.3',
                            State(pc_initial=202 nstack_initial=2))},
             '$phi240.0': {('$phi240.0',
                            State(pc_initial=240 nstack_initial=3)),
                           ('$phi62.0', State(pc_initial=62 nstack_initial=2)),
                           ('$phi78.0', State(pc_initial=78 nstack_initial=1))},
             '$phi240.1': {('$200get_iter.30',
                            State(pc_initial=140 nstack_initial=1)),
                           ('$phi240.1',
                            State(pc_initial=240 nstack_initial=3))},
             '$phi240.2': {('$238get_iter.18',
                            State(pc_initial=204 nstack_initial=3)),
                           ('$phi240.2',
                            State(pc_initial=240 nstack_initial=3))},
             '$phi242.0': {('$phi62.0', State(pc_initial=62 nstack_initial=2)),
                           ('$phi78.0', State(pc_initial=78 nstack_initial=1))},
             '$phi242.1': {('$200get_iter.30',
                            State(pc_initial=140 nstack_initial=1))},
             '$phi242.2': {('$238get_iter.18',
                            State(pc_initial=204 nstack_initial=3))},
             '$phi242.3': {('$240for_iter.4',
                            State(pc_initial=240 nstack_initial=3))},
             '$phi298.0': {('$phi62.0', State(pc_initial=62 nstack_initial=2)),
                           ('$phi78.0', State(pc_initial=78 nstack_initial=1))},
             '$phi298.1': {('$200get_iter.30',
                            State(pc_initial=140 nstack_initial=1))},
             '$phi300.0': {('$phi240.0',
                            State(pc_initial=240 nstack_initial=3)),
                           ('$phi62.0', State(pc_initial=62 nstack_initial=2)),
                           ('$phi78.0', State(pc_initial=78 nstack_initial=1))},
             '$phi60.0': {('$58get_iter.24',
                           State(pc_initial=0 nstack_initial=0)),
                          ('$phi240.0', State(pc_initial=240 nstack_initial=3)),
                          ('$phi62.0', State(pc_initial=62 nstack_initial=2)),
                          ('$phi78.0', State(pc_initial=78 nstack_initial=1))},
             '$phi62.0': {('$58get_iter.24',
                           State(pc_initial=0 nstack_initial=0)),
                          ('$phi240.0', State(pc_initial=240 nstack_initial=3)),
                          ('$phi62.0', State(pc_initial=62 nstack_initial=2)),
                          ('$phi78.0', State(pc_initial=78 nstack_initial=1))},
             '$phi62.1': {('$60for_iter.2',
                           State(pc_initial=60 nstack_initial=1))},
             '$phi72.0': {('$58get_iter.24',
                           State(pc_initial=0 nstack_initial=0)),
                          ('$phi240.0', State(pc_initial=240 nstack_initial=3)),
                          ('$phi78.0', State(pc_initial=78 nstack_initial=1))},
             '$phi78.0': {('$58get_iter.24',
                           State(pc_initial=0 nstack_initial=0)),
                          ('$phi240.0', State(pc_initial=240 nstack_initial=3)),
                          ('$phi78.0', State(pc_initial=78 nstack_initial=1))},
             '$phi90.0': {('$58get_iter.24',
                           State(pc_initial=0 nstack_initial=0)),
                          ('$phi240.0',
                           State(pc_initial=240 nstack_initial=3))}})
DEBUG 2022-02-14 16:38:03,346 changing phismap: defaultdict(<class 'set'>,
            {'$phi124.0': {('$58get_iter.24',
                            State(pc_initial=0 nstack_initial=0)),
                           ('$phi240.0',
                            State(pc_initial=240 nstack_initial=3))},
             '$phi140.0': {('$58get_iter.24',
                            State(pc_initial=0 nstack_initial=0)),
                           ('$phi240.0',
                            State(pc_initial=240 nstack_initial=3))},
             '$phi202.0': {('$58get_iter.24',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi202.1': {('$200get_iter.30',
                            State(pc_initial=140 nstack_initial=1))},
             '$phi204.0': {('$58get_iter.24',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi204.1': {('$200get_iter.30',
                            State(pc_initial=140 nstack_initial=1))},
             '$phi204.2': {('$202for_iter.3',
                            State(pc_initial=202 nstack_initial=2))},
             '$phi240.0': {('$58get_iter.24',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi240.1': {('$200get_iter.30',
                            State(pc_initial=140 nstack_initial=1))},
             '$phi240.2': {('$238get_iter.18',
                            State(pc_initial=204 nstack_initial=3))},
             '$phi242.0': {('$58get_iter.24',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi242.1': {('$200get_iter.30',
                            State(pc_initial=140 nstack_initial=1))},
             '$phi242.2': {('$238get_iter.18',
                            State(pc_initial=204 nstack_initial=3))},
             '$phi242.3': {('$240for_iter.4',
                            State(pc_initial=240 nstack_initial=3))},
             '$phi298.0': {('$58get_iter.24',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi298.1': {('$200get_iter.30',
                            State(pc_initial=140 nstack_initial=1))},
             '$phi300.0': {('$58get_iter.24',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi60.0': {('$58get_iter.24',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi62.0': {('$58get_iter.24',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi62.1': {('$60for_iter.2',
                           State(pc_initial=60 nstack_initial=1))},
             '$phi72.0': {('$58get_iter.24',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi78.0': {('$58get_iter.24',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi90.0': {('$58get_iter.24',
                           State(pc_initial=0 nstack_initial=0))}})
DEBUG 2022-02-14 16:38:03,347 changing phismap: defaultdict(<class 'set'>,
            {'$phi124.0': {('$58get_iter.24',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi140.0': {('$58get_iter.24',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi202.0': {('$58get_iter.24',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi202.1': {('$200get_iter.30',
                            State(pc_initial=140 nstack_initial=1))},
             '$phi204.0': {('$58get_iter.24',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi204.1': {('$200get_iter.30',
                            State(pc_initial=140 nstack_initial=1))},
             '$phi204.2': {('$202for_iter.3',
                            State(pc_initial=202 nstack_initial=2))},
             '$phi240.0': {('$58get_iter.24',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi240.1': {('$200get_iter.30',
                            State(pc_initial=140 nstack_initial=1))},
             '$phi240.2': {('$238get_iter.18',
                            State(pc_initial=204 nstack_initial=3))},
             '$phi242.0': {('$58get_iter.24',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi242.1': {('$200get_iter.30',
                            State(pc_initial=140 nstack_initial=1))},
             '$phi242.2': {('$238get_iter.18',
                            State(pc_initial=204 nstack_initial=3))},
             '$phi242.3': {('$240for_iter.4',
                            State(pc_initial=240 nstack_initial=3))},
             '$phi298.0': {('$58get_iter.24',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi298.1': {('$200get_iter.30',
                            State(pc_initial=140 nstack_initial=1))},
             '$phi300.0': {('$58get_iter.24',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi60.0': {('$58get_iter.24',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi62.0': {('$58get_iter.24',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi62.1': {('$60for_iter.2',
                           State(pc_initial=60 nstack_initial=1))},
             '$phi72.0': {('$58get_iter.24',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi78.0': {('$58get_iter.24',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi90.0': {('$58get_iter.24',
                           State(pc_initial=0 nstack_initial=0))}})
DEBUG 2022-02-14 16:38:03,348 changing phismap: defaultdict(<class 'set'>,
            {'$phi124.0': {('$58get_iter.24',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi140.0': {('$58get_iter.24',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi202.0': {('$58get_iter.24',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi202.1': {('$200get_iter.30',
                            State(pc_initial=140 nstack_initial=1))},
             '$phi204.0': {('$58get_iter.24',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi204.1': {('$200get_iter.30',
                            State(pc_initial=140 nstack_initial=1))},
             '$phi204.2': {('$202for_iter.3',
                            State(pc_initial=202 nstack_initial=2))},
             '$phi240.0': {('$58get_iter.24',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi240.1': {('$200get_iter.30',
                            State(pc_initial=140 nstack_initial=1))},
             '$phi240.2': {('$238get_iter.18',
                            State(pc_initial=204 nstack_initial=3))},
             '$phi242.0': {('$58get_iter.24',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi242.1': {('$200get_iter.30',
                            State(pc_initial=140 nstack_initial=1))},
             '$phi242.2': {('$238get_iter.18',
                            State(pc_initial=204 nstack_initial=3))},
             '$phi242.3': {('$240for_iter.4',
                            State(pc_initial=240 nstack_initial=3))},
             '$phi298.0': {('$58get_iter.24',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi298.1': {('$200get_iter.30',
                            State(pc_initial=140 nstack_initial=1))},
             '$phi300.0': {('$58get_iter.24',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi60.0': {('$58get_iter.24',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi62.0': {('$58get_iter.24',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi62.1': {('$60for_iter.2',
                           State(pc_initial=60 nstack_initial=1))},
             '$phi72.0': {('$58get_iter.24',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi78.0': {('$58get_iter.24',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi90.0': {('$58get_iter.24',
                           State(pc_initial=0 nstack_initial=0))}})
DEBUG 2022-02-14 16:38:03,349 keep phismap: {'$phi202.1': {('$200get_iter.30', State(pc_initial=140 nstack_initial=1))},
 '$phi204.2': {('$202for_iter.3', State(pc_initial=202 nstack_initial=2))},
 '$phi240.2': {('$238get_iter.18', State(pc_initial=204 nstack_initial=3))},
 '$phi242.3': {('$240for_iter.4', State(pc_initial=240 nstack_initial=3))},
 '$phi60.0': {('$58get_iter.24', State(pc_initial=0 nstack_initial=0))},
 '$phi62.1': {('$60for_iter.2', State(pc_initial=60 nstack_initial=1))}}
DEBUG 2022-02-14 16:38:03,349 new_out: defaultdict(<class 'dict'>,
            {State(pc_initial=0 nstack_initial=0): {'$phi60.0': '$58get_iter.24'},
             State(pc_initial=60 nstack_initial=1): {'$phi62.1': '$60for_iter.2'},
             State(pc_initial=140 nstack_initial=1): {'$phi202.1': '$200get_iter.30'},
             State(pc_initial=202 nstack_initial=2): {'$phi204.2': '$202for_iter.3'},
             State(pc_initial=204 nstack_initial=3): {'$phi240.2': '$238get_iter.18'},
             State(pc_initial=240 nstack_initial=3): {'$phi242.3': '$240for_iter.4'}})
DEBUG 2022-02-14 16:38:03,350 ----------------------DONE Prune PHIs-----------------------
DEBUG 2022-02-14 16:38:03,350 block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$E2.0'}), (4, {'item': '$E2.0', 'res': '$4load_method.1'}), (6, {'func': '$4load_method.1', 'args': [], 'res': '$6call_method.2'}), (8, {'value': '$6call_method.2'}), (10, {'res': '$const10.3'}), (12, {'value': '$const10.3'}), (14, {'res': '$14load_global.4'}), (16, {'item': '$14load_global.4', 'res': '$16load_attr.5'}), (18, {'res': '$const18.6'}), (20, {'res': '$n20.7'}), (22, {'res': '$const22.8'}), (24, {'lhs': '$n20.7', 'rhs': '$const22.8', 'res': '$24binary_add.9'}), (26, {'items': ['$const18.6', '$24binary_add.9'], 'res': '$26build_tuple.10'}), (28, {'res': '$28load_global.11'}), (30, {'item': '$28load_global.11', 'res': '$30load_attr.12'}), (32, {'res': '$const32.13'}), (34, {'func': '$16load_attr.5', 'args': ['$26build_tuple.10', '$30load_attr.12'], 'names': '$const32.13', 'res': '$34call_function_kw.14'}), (36, {'value': '$34call_function_kw.14'}), (38, {'res': '$const38.15'}), (40, {'res': '$comb40.16'}), (42, {'res': '$const42.17'}), (44, {'target': '$comb40.16', 'index': '$const42.17', 'value': '$const38.15'}), (46, {'res': '$46load_global.18'}), (48, {'res': '$const48.19'}), (50, {'res': '$n50.20'}), (52, {'res': '$const52.21'}), (54, {'lhs': '$n50.20', 'rhs': '$const52.21', 'res': '$54binary_add.22'}), (56, {'func': '$46load_global.18', 'args': ['$const48.19', '$54binary_add.22'], 'res': '$56call_function.23'}), (58, {'value': '$56call_function.23', 'res': '$58get_iter.24'})), outgoing_phis={'$phi60.0': '$58get_iter.24'}, blockstack=(), active_try_block=None, outgoing_edgepushed={60: ('$58get_iter.24',)})
DEBUG 2022-02-14 16:38:03,350 block_infos State(pc_initial=60 nstack_initial=1):
AdaptBlockInfo(insts=((60, {'iterator': '$phi60.0', 'pair': '$60for_iter.1', 'indval': '$60for_iter.2', 'pred': '$60for_iter.3'}),), outgoing_phis={'$phi62.1': '$60for_iter.2'}, blockstack=(), active_try_block=None, outgoing_edgepushed={302: (), 62: ('$phi60.0', '$60for_iter.2')})
DEBUG 2022-02-14 16:38:03,350 block_infos State(pc_initial=62 nstack_initial=2):
AdaptBlockInfo(insts=((62, {'value': '$phi62.1'}), (64, {'res': '$i64.2'}), (66, {'res': '$const66.3'}), (68, {'lhs': '$i64.2', 'rhs': '$const66.3', 'res': '$68compare_op.4'}), (70, {'pred': '$68compare_op.4'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={72: ('$phi62.0',), 78: ('$phi62.0',)})
DEBUG 2022-02-14 16:38:03,350 block_infos State(pc_initial=72 nstack_initial=1):
AdaptBlockInfo(insts=((72, {'res': '$oddloop72.1'}), (74, {'value': '$oddloop72.1'}), (76, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={140: ('$phi72.0',)})
DEBUG 2022-02-14 16:38:03,350 block_infos State(pc_initial=78 nstack_initial=1):
AdaptBlockInfo(insts=((78, {'res': '$i78.1'}), (80, {'res': '$const80.2'}), (82, {'lhs': '$i78.1', 'rhs': '$const80.2', 'res': '$82binary_modulo.3'}), (84, {'res': '$const84.4'}), (86, {'lhs': '$82binary_modulo.3', 'rhs': '$const84.4', 'res': '$86compare_op.5'}), (88, {'pred': '$86compare_op.5'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={90: ('$phi78.0',), 124: ('$phi78.0',)})
DEBUG 2022-02-14 16:38:03,350 block_infos State(pc_initial=90 nstack_initial=1):
AdaptBlockInfo(insts=((90, {'res': '$E_k90.1'}), (92, {'item': '$E_k90.1', 'res': '$92load_method.2'}), (94, {'func': '$92load_method.2', 'args': [], 'res': '$94call_method.3'}), (96, {'res': '$i96.4'}), (98, {'lhs': '$94call_method.3', 'rhs': '$i96.4', 'res': '$98binary_true_divide.5'}), (100, {'res': '$XD_S100.6'}), (102, {'res': '$D_S102.7'}), (104, {'lhs': '$XD_S100.6', 'rhs': '$D_S102.7', 'res': '$104binary_matrix_multiply.8'}), (106, {'res': '$const106.9'}), (108, {'lhs': '$104binary_matrix_multiply.8', 'rhs': '$const106.9', 'res': '$108binary_true_divide.10'}), (110, {'lhs': '$98binary_true_divide.5', 'rhs': '$108binary_true_divide.10', 'res': '$110binary_add.11'}), (112, {'value': '$110binary_add.11'}), (114, {'res': '$E_k114.12'}), (116, {'res': '$E116.13'}), (118, {'lhs': '$E_k114.12', 'rhs': '$E116.13', 'res': '$118inplace_multiply.14'}), (120, {'value': '$118inplace_multiply.14'}), (122, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={140: ('$phi90.0',)})
DEBUG 2022-02-14 16:38:03,350 block_infos State(pc_initial=124 nstack_initial=1):
AdaptBlockInfo(insts=((124, {'res': '$oddVX_S124.1'}), (126, {'res': '$D_S126.2'}), (128, {'lhs': '$oddVX_S124.1', 'rhs': '$D_S126.2', 'res': '$128binary_matrix_multiply.3'}), (130, {'value': '$128binary_matrix_multiply.3'}), (132, {'res': '$AX_S132.4'}), (134, {'res': '$D_S134.5'}), (136, {'lhs': '$AX_S132.4', 'rhs': '$D_S134.5', 'res': '$136binary_matrix_multiply.6'}), (138, {'value': '$136binary_matrix_multiply.6'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={140: ('$phi124.0',)})
DEBUG 2022-02-14 16:38:03,350 block_infos State(pc_initial=140 nstack_initial=1):
AdaptBlockInfo(insts=((140, {'res': '$const140.1'}), (142, {'value': '$const140.1'}), (144, {'res': '$const144.2'}), (146, {'res': '$count146.3'}), (148, {'lhs': '$const144.2', 'rhs': '$count146.3', 'res': '$148binary_subtract.4'}), (150, {'value': '$148binary_subtract.4'}), (152, {'res': '$comb152.5'}), (154, {'res': '$const154.6'}), (156, {'res': '$count156.7'}), (158, {'lhs': '$const154.6', 'rhs': '$count156.7', 'res': '$158binary_subtract.8'}), (160, {'res': '$const160.9'}), (162, {'res': '$const162.10'}), (164, {'start': '$const160.9', 'stop': '$const162.10', 'step': None, 'res': '$164build_slice.12', 'slicevar': '$164build_slice.11'}), (166, {'items': ['$158binary_subtract.8', '$164build_slice.12'], 'res': '$166build_tuple.13'}), (168, {'index': '$166build_tuple.13', 'target': '$comb152.5', 'res': '$168binary_subscr.14'}), (170, {'res': '$comb170.15'}), (172, {'res': '$count172.16'}), (174, {'res': '$const174.17'}), (176, {'res': '$const176.18'}), (178, {'start': '$const174.17', 'stop': '$const176.18', 'step': None, 'res': '$178build_slice.20', 'slicevar': '$178build_slice.19'}), (180, {'items': ['$count172.16', '$178build_slice.20'], 'res': '$180build_tuple.21'}), (182, {'target': '$comb170.15', 'index': '$180build_tuple.21', 'value': '$168binary_subscr.14'}), (184, {'res': '$184load_global.22'}), (186, {'res': '$const186.23'}), (188, {'res': '$n188.24'}), (190, {'res': '$i190.25'}), (192, {'lhs': '$n188.24', 'rhs': '$i190.25', 'res': '$192binary_floor_divide.26'}), (194, {'res': '$const194.27'}), (196, {'lhs': '$192binary_floor_divide.26', 'rhs': '$const194.27', 'res': '$196binary_add.28'}), (198, {'func': '$184load_global.22', 'args': ['$const186.23', '$196binary_add.28'], 'res': '$198call_function.29'}), (200, {'value': '$198call_function.29', 'res': '$200get_iter.30'})), outgoing_phis={'$phi202.1': '$200get_iter.30'}, blockstack=(), active_try_block=None, outgoing_edgepushed={202: ('$phi140.0', '$200get_iter.30')})
DEBUG 2022-02-14 16:38:03,350 block_infos State(pc_initial=202 nstack_initial=2):
AdaptBlockInfo(insts=((202, {'iterator': '$phi202.1', 'pair': '$202for_iter.2', 'indval': '$202for_iter.3', 'pred': '$202for_iter.4'}),), outgoing_phis={'$phi204.2': '$202for_iter.3'}, blockstack=(), active_try_block=None, outgoing_edgepushed={300: ('$phi202.0',), 204: ('$phi202.0', '$phi202.1', '$202for_iter.3')})
DEBUG 2022-02-14 16:38:03,350 block_infos State(pc_initial=204 nstack_initial=3):
AdaptBlockInfo(insts=((204, {'value': '$phi204.2'}), (206, {'res': '$powfactor206.3'}), (208, {'res': '$factor208.4'}), (210, {'res': '$j210.5'}), (212, {'lhs': '$factor208.4', 'rhs': '$j210.5', 'res': '$212binary_true_divide.6'}), (214, {'lhs': '$powfactor206.3', 'rhs': '$212binary_true_divide.6', 'res': '$214inplace_multiply.7'}), (216, {'value': '$214inplace_multiply.7'}), (218, {'res': '$218load_global.8'}), (220, {'res': '$i220.9'}), (222, {'res': '$j222.10'}), (224, {'lhs': '$i220.9', 'rhs': '$j222.10', 'res': '$224binary_multiply.11'}), (226, {'res': '$const226.12'}), (228, {'lhs': '$224binary_multiply.11', 'rhs': '$const226.12', 'res': '$228binary_add.13'}), (230, {'res': '$n230.14'}), (232, {'res': '$const232.15'}), (234, {'lhs': '$n230.14', 'rhs': '$const232.15', 'res': '$234binary_add.16'}), (236, {'func': '$218load_global.8', 'args': ['$228binary_add.13', '$234binary_add.16'], 'res': '$236call_function.17'}), (238, {'value': '$236call_function.17', 'res': '$238get_iter.18'})), outgoing_phis={'$phi240.2': '$238get_iter.18'}, blockstack=(), active_try_block=None, outgoing_edgepushed={240: ('$phi204.0', '$phi204.1', '$238get_iter.18')})
DEBUG 2022-02-14 16:38:03,350 block_infos State(pc_initial=240 nstack_initial=3):
AdaptBlockInfo(insts=((240, {'iterator': '$phi240.2', 'pair': '$240for_iter.3', 'indval': '$240for_iter.4', 'pred': '$240for_iter.5'}),), outgoing_phis={'$phi242.3': '$240for_iter.4'}, blockstack=(), active_try_block=None, outgoing_edgepushed={298: ('$phi240.0', '$phi240.1'), 242: ('$phi240.0', '$phi240.1', '$phi240.2', '$240for_iter.4')})
DEBUG 2022-02-14 16:38:03,351 block_infos State(pc_initial=242 nstack_initial=4):
AdaptBlockInfo(insts=((242, {'value': '$phi242.3'}), (244, {'res': '$comb244.4'}), (246, {'res': '$count246.5'}), (248, {'res': '$k248.6'}), (250, {'res': '$const250.7'}), (252, {'lhs': '$k248.6', 'rhs': '$const250.7', 'res': '$252binary_subtract.8'}), (254, {'items': ['$count246.5', '$252binary_subtract.8'], 'res': '$254build_tuple.9'}), (256, {'orig': ['$comb244.4', '$254build_tuple.9'], 'duped': ['$256dup_top_two.10', '$256dup_top_two.11']}), (258, {'index': '$256dup_top_two.11', 'target': '$256dup_top_two.10', 'res': '$258binary_subscr.12'}), (260, {'res': '$comb260.13'}), (262, {'res': '$const262.14'}), (264, {'res': '$count264.15'}), (266, {'lhs': '$const262.14', 'rhs': '$count264.15', 'res': '$266binary_subtract.16'}), (268, {'res': '$k268.17'}), (270, {'res': '$i270.18'}), (272, {'res': '$j272.19'}), (274, {'lhs': '$i270.18', 'rhs': '$j272.19', 'res': '$274binary_multiply.20'}), (276, {'lhs': '$k268.17', 'rhs': '$274binary_multiply.20', 'res': '$276binary_subtract.21'}), (278, {'res': '$const278.22'}), (280, {'lhs': '$276binary_subtract.21', 'rhs': '$const278.22', 'res': '$280binary_subtract.23'}), (282, {'items': ['$266binary_subtract.16', '$280binary_subtract.23'], 'res': '$282build_tuple.24'}), (284, {'index': '$282build_tuple.24', 'target': '$comb260.13', 'res': '$284binary_subscr.25'}), (286, {'res': '$powfactor286.26'}), (288, {'lhs': '$284binary_subscr.25', 'rhs': '$powfactor286.26', 'res': '$288binary_multiply.27'}), (290, {'lhs': '$258binary_subscr.12', 'rhs': '$288binary_multiply.27', 'res': '$290inplace_add.28'}), (294, {'target': '$comb244.4', 'index': '$254build_tuple.9', 'value': '$290inplace_add.28'}), (296, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={240: ('$phi242.0', '$phi242.1', '$phi242.2')})
DEBUG 2022-02-14 16:38:03,351 block_infos State(pc_initial=298 nstack_initial=2):
AdaptBlockInfo(insts=((298, {}),), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={202: ('$phi298.0', '$phi298.1')})
DEBUG 2022-02-14 16:38:03,351 block_infos State(pc_initial=300 nstack_initial=1):
AdaptBlockInfo(insts=((300, {}),), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={60: ('$phi300.0',)})
DEBUG 2022-02-14 16:38:03,351 block_infos State(pc_initial=302 nstack_initial=0):
AdaptBlockInfo(insts=((302, {'res': '$comb302.0'}), (304, {'res': '$count304.1'}), (306, {'res': '$const306.2'}), (308, {'res': '$const308.3'}), (310, {'start': '$const306.2', 'stop': '$const308.3', 'step': None, 'res': '$310build_slice.5', 'slicevar': '$310build_slice.4'}), (312, {'items': ['$count304.1', '$310build_slice.5'], 'res': '$312build_tuple.6'}), (314, {'index': '$312build_tuple.6', 'target': '$comb302.0', 'res': '$314binary_subscr.7'}), (316, {'retval': '$314binary_subscr.7', 'castval': '$316return_value.8'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG 2022-02-14 16:38:03,354 label 0:
    E = arg(0, name=E)                       ['E']
    AX_S = arg(1, name=AX_S)                 ['AX_S']
    XD_S = arg(2, name=XD_S)                 ['XD_S']
    D_S = arg(3, name=D_S)                   ['D_S']
    n = arg(4, name=n)                       ['n']
    oddloop = arg(5, name=oddloop)           ['oddloop']
    oddVX_S = arg(6, name=oddVX_S)           ['oddVX_S']
    $4load_method.1 = getattr(value=E, attr=copy) ['$4load_method.1', 'E']
    E_k = call $4load_method.1(func=$4load_method.1, args=[], kws=(), vararg=None, target=None) ['$4load_method.1', 'E_k']
    count = const(int, 0)                    ['count']
    $14load_global.4 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>) ['$14load_global.4']
    $16load_attr.5 = getattr(value=$14load_global.4, attr=zeros) ['$14load_global.4', '$16load_attr.5']
    $const18.6 = const(int, 2)               ['$const18.6']
    $const22.8 = const(int, 1)               ['$const22.8']
    $24binary_add.9 = n + $const22.8         ['$24binary_add.9', '$const22.8', 'n']
    $26build_tuple.10 = build_tuple(items=[Var($const18.6, _loop_hafnian_subroutines.py:162), Var($24binary_add.9, _loop_hafnian_subroutines.py:162)]) ['$24binary_add.9', '$26build_tuple.10', '$const18.6']
    $28load_global.11 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>) ['$28load_global.11']
    $30load_attr.12 = getattr(value=$28load_global.11, attr=complex128) ['$28load_global.11', '$30load_attr.12']
    comb = call $16load_attr.5($26build_tuple.10, func=$16load_attr.5, args=[Var($26build_tuple.10, _loop_hafnian_subroutines.py:162)], kws=[('dtype', Var($30load_attr.12, _loop_hafnian_subroutines.py:162))], vararg=None, target=None) ['$16load_attr.5', '$26build_tuple.10', '$30load_attr.12', 'comb']
    $const38.15 = const(int, 1)              ['$const38.15']
    $const_0 = const(int, 0)                 ['$const_0']
    $const_0.1 = const(int, 0)               ['$const_0.1']
    $const42.17 = build_tuple(items=[Var($const_0, _loop_hafnian_subroutines.py:163), Var($const_0.1, _loop_hafnian_subroutines.py:163)]) ['$const42.17', '$const_0', '$const_0.1']
    comb[$const42.17] = $const38.15          ['$const38.15', '$const42.17', 'comb']
    $46load_global.18 = global(range: <class 'range'>) ['$46load_global.18']
    $const48.19 = const(int, 1)              ['$const48.19']
    $const52.21 = const(int, 1)              ['$const52.21']
    $54binary_add.22 = n + $const52.21       ['$54binary_add.22', '$const52.21', 'n']
    $56call_function.23 = call $46load_global.18($const48.19, $54binary_add.22, func=$46load_global.18, args=[Var($const48.19, _loop_hafnian_subroutines.py:164), Var($54binary_add.22, _loop_hafnian_subroutines.py:164)], kws=(), vararg=None, target=None) ['$46load_global.18', '$54binary_add.22', '$56call_function.23', '$const48.19']
    $58get_iter.24 = getiter(value=$56call_function.23) ['$56call_function.23', '$58get_iter.24']
    $phi60.0 = $58get_iter.24                ['$58get_iter.24', '$phi60.0']
    jump 60                                  []
label 60:
    $60for_iter.1 = iternext(value=$phi60.0) ['$60for_iter.1', '$phi60.0']
    $60for_iter.2 = pair_first(value=$60for_iter.1) ['$60for_iter.1', '$60for_iter.2']
    $60for_iter.3 = pair_second(value=$60for_iter.1) ['$60for_iter.1', '$60for_iter.3']
    $phi62.1 = $60for_iter.2                 ['$60for_iter.2', '$phi62.1']
    branch $60for_iter.3, 62, 302            ['$60for_iter.3']
label 62:
    i = $phi62.1                             ['$phi62.1', 'i']
    $const66.3 = const(int, 1)               ['$const66.3']
    $68compare_op.4 = i == $const66.3        ['$68compare_op.4', '$const66.3', 'i']
    bool70 = global(bool: <class 'bool'>)    ['bool70']
    $70pred = call bool70($68compare_op.4, func=bool70, args=(Var($68compare_op.4, _loop_hafnian_subroutines.py:165),), kws=(), vararg=None, target=None) ['$68compare_op.4', '$70pred', 'bool70']
    branch $70pred, 72, 78                   ['$70pred']
label 72:
    factor = oddloop                         ['factor', 'oddloop']
    jump 140                                 []
label 78:
    $const80.2 = const(int, 2)               ['$const80.2']
    $82binary_modulo.3 = i % $const80.2      ['$82binary_modulo.3', '$const80.2', 'i']
    $const84.4 = const(int, 0)               ['$const84.4']
    $86compare_op.5 = $82binary_modulo.3 == $const84.4 ['$82binary_modulo.3', '$86compare_op.5', '$const84.4']
    bool88 = global(bool: <class 'bool'>)    ['bool88']
    $88pred = call bool88($86compare_op.5, func=bool88, args=(Var($86compare_op.5, _loop_hafnian_subroutines.py:167),), kws=(), vararg=None, target=None) ['$86compare_op.5', '$88pred', 'bool88']
    branch $88pred, 90, 124                  ['$88pred']
label 90:
    $92load_method.2 = getattr(value=E_k, attr=sum) ['$92load_method.2', 'E_k']
    $94call_method.3 = call $92load_method.2(func=$92load_method.2, args=[], kws=(), vararg=None, target=None) ['$92load_method.2', '$94call_method.3']
    $98binary_true_divide.5 = $94call_method.3 / i ['$94call_method.3', '$98binary_true_divide.5', 'i']
    $104binary_matrix_multiply.8 = XD_S <built-in function matmul> D_S ['$104binary_matrix_multiply.8', 'D_S', 'XD_S']
    $const106.9 = const(int, 2)              ['$const106.9']
    $108binary_true_divide.10 = $104binary_matrix_multiply.8 / $const106.9 ['$104binary_matrix_multiply.8', '$108binary_true_divide.10', '$const106.9']
    factor = $98binary_true_divide.5 + $108binary_true_divide.10 ['$108binary_true_divide.10', '$98binary_true_divide.5', 'factor']
    $118inplace_multiply.14 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=E_k, rhs=E, static_lhs=Undefined, static_rhs=Undefined) ['$118inplace_multiply.14', 'E', 'E_k']
    E_k = $118inplace_multiply.14            ['$118inplace_multiply.14', 'E_k']
    jump 140                                 []
label 124:
    factor = oddVX_S <built-in function matmul> D_S ['D_S', 'factor', 'oddVX_S']
    $136binary_matrix_multiply.6 = AX_S <built-in function matmul> D_S ['$136binary_matrix_multiply.6', 'AX_S', 'D_S']
    D_S = $136binary_matrix_multiply.6       ['$136binary_matrix_multiply.6', 'D_S']
    jump 140                                 []
label 140:
    powfactor = const(int, 1)                ['powfactor']
    $const144.2 = const(int, 1)              ['$const144.2']
    $148binary_subtract.4 = $const144.2 - count ['$148binary_subtract.4', '$const144.2', 'count']
    count = $148binary_subtract.4            ['$148binary_subtract.4', 'count']
    $const154.6 = const(int, 1)              ['$const154.6']
    $158binary_subtract.8 = $const154.6 - count ['$158binary_subtract.8', '$const154.6', 'count']
    $const160.9 = const(NoneType, None)      ['$const160.9']
    $const162.10 = const(NoneType, None)     ['$const162.10']
    $164build_slice.11 = global(slice: <class 'slice'>) ['$164build_slice.11']
    $164build_slice.12 = call $164build_slice.11($const160.9, $const162.10, func=$164build_slice.11, args=(Var($const160.9, _loop_hafnian_subroutines.py:176), Var($const162.10, _loop_hafnian_subroutines.py:176)), kws=(), vararg=None, target=None) ['$164build_slice.11', '$164build_slice.12', '$const160.9', '$const162.10']
    $166build_tuple.13 = build_tuple(items=[Var($158binary_subtract.8, _loop_hafnian_subroutines.py:176), Var($164build_slice.12, _loop_hafnian_subroutines.py:176)]) ['$158binary_subtract.8', '$164build_slice.12', '$166build_tuple.13']
    $168binary_subscr.14 = getitem(value=comb, index=$166build_tuple.13, fn=<built-in function getitem>) ['$166build_tuple.13', '$168binary_subscr.14', 'comb']
    $const174.17 = const(NoneType, None)     ['$const174.17']
    $const176.18 = const(NoneType, None)     ['$const176.18']
    $178build_slice.19 = global(slice: <class 'slice'>) ['$178build_slice.19']
    $178build_slice.20 = call $178build_slice.19($const174.17, $const176.18, func=$178build_slice.19, args=(Var($const174.17, _loop_hafnian_subroutines.py:176), Var($const176.18, _loop_hafnian_subroutines.py:176)), kws=(), vararg=None, target=None) ['$178build_slice.19', '$178build_slice.20', '$const174.17', '$const176.18']
    $180build_tuple.21 = build_tuple(items=[Var(count, _loop_hafnian_subroutines.py:161), Var($178build_slice.20, _loop_hafnian_subroutines.py:176)]) ['$178build_slice.20', '$180build_tuple.21', 'count']
    comb[$180build_tuple.21] = $168binary_subscr.14 ['$168binary_subscr.14', '$180build_tuple.21', 'comb']
    $184load_global.22 = global(range: <class 'range'>) ['$184load_global.22']
    $const186.23 = const(int, 1)             ['$const186.23']
    $192binary_floor_divide.26 = n // i      ['$192binary_floor_divide.26', 'i', 'n']
    $const194.27 = const(int, 1)             ['$const194.27']
    $196binary_add.28 = $192binary_floor_divide.26 + $const194.27 ['$192binary_floor_divide.26', '$196binary_add.28', '$const194.27']
    $198call_function.29 = call $184load_global.22($const186.23, $196binary_add.28, func=$184load_global.22, args=[Var($const186.23, _loop_hafnian_subroutines.py:177), Var($196binary_add.28, _loop_hafnian_subroutines.py:177)], kws=(), vararg=None, target=None) ['$184load_global.22', '$196binary_add.28', '$198call_function.29', '$const186.23']
    $200get_iter.30 = getiter(value=$198call_function.29) ['$198call_function.29', '$200get_iter.30']
    $phi202.1 = $200get_iter.30              ['$200get_iter.30', '$phi202.1']
    jump 202                                 []
label 202:
    $202for_iter.2 = iternext(value=$phi202.1) ['$202for_iter.2', '$phi202.1']
    $202for_iter.3 = pair_first(value=$202for_iter.2) ['$202for_iter.2', '$202for_iter.3']
    $202for_iter.4 = pair_second(value=$202for_iter.2) ['$202for_iter.2', '$202for_iter.4']
    $phi204.2 = $202for_iter.3               ['$202for_iter.3', '$phi204.2']
    branch $202for_iter.4, 204, 300          ['$202for_iter.4']
label 204:
    j = $phi204.2                            ['$phi204.2', 'j']
    $212binary_true_divide.6 = factor / j    ['$212binary_true_divide.6', 'factor', 'j']
    $214inplace_multiply.7 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=powfactor, rhs=$212binary_true_divide.6, static_lhs=Undefined, static_rhs=Undefined) ['$212binary_true_divide.6', '$214inplace_multiply.7', 'powfactor']
    powfactor = $214inplace_multiply.7       ['$214inplace_multiply.7', 'powfactor']
    $218load_global.8 = global(range: <class 'range'>) ['$218load_global.8']
    $224binary_multiply.11 = i * j           ['$224binary_multiply.11', 'i', 'j']
    $const226.12 = const(int, 1)             ['$const226.12']
    $228binary_add.13 = $224binary_multiply.11 + $const226.12 ['$224binary_multiply.11', '$228binary_add.13', '$const226.12']
    $const232.15 = const(int, 2)             ['$const232.15']
    $234binary_add.16 = n + $const232.15     ['$234binary_add.16', '$const232.15', 'n']
    $236call_function.17 = call $218load_global.8($228binary_add.13, $234binary_add.16, func=$218load_global.8, args=[Var($228binary_add.13, _loop_hafnian_subroutines.py:179), Var($234binary_add.16, _loop_hafnian_subroutines.py:179)], kws=(), vararg=None, target=None) ['$218load_global.8', '$228binary_add.13', '$234binary_add.16', '$236call_function.17']
    $238get_iter.18 = getiter(value=$236call_function.17) ['$236call_function.17', '$238get_iter.18']
    $phi240.2 = $238get_iter.18              ['$238get_iter.18', '$phi240.2']
    jump 240                                 []
label 240:
    $240for_iter.3 = iternext(value=$phi240.2) ['$240for_iter.3', '$phi240.2']
    $240for_iter.4 = pair_first(value=$240for_iter.3) ['$240for_iter.3', '$240for_iter.4']
    $240for_iter.5 = pair_second(value=$240for_iter.3) ['$240for_iter.3', '$240for_iter.5']
    $phi242.3 = $240for_iter.4               ['$240for_iter.4', '$phi242.3']
    branch $240for_iter.5, 242, 298          ['$240for_iter.5']
label 242:
    k = $phi242.3                            ['$phi242.3', 'k']
    $const250.7 = const(int, 1)              ['$const250.7']
    $252binary_subtract.8 = k - $const250.7  ['$252binary_subtract.8', '$const250.7', 'k']
    $254build_tuple.9 = build_tuple(items=[Var(count, _loop_hafnian_subroutines.py:161), Var($252binary_subtract.8, _loop_hafnian_subroutines.py:180)]) ['$252binary_subtract.8', '$254build_tuple.9', 'count']
    $258binary_subscr.12 = getitem(value=comb, index=$254build_tuple.9, fn=<built-in function getitem>) ['$254build_tuple.9', '$258binary_subscr.12', 'comb']
    $const262.14 = const(int, 1)             ['$const262.14']
    $266binary_subtract.16 = $const262.14 - count ['$266binary_subtract.16', '$const262.14', 'count']
    $274binary_multiply.20 = i * j           ['$274binary_multiply.20', 'i', 'j']
    $276binary_subtract.21 = k - $274binary_multiply.20 ['$274binary_multiply.20', '$276binary_subtract.21', 'k']
    $const278.22 = const(int, 1)             ['$const278.22']
    $280binary_subtract.23 = $276binary_subtract.21 - $const278.22 ['$276binary_subtract.21', '$280binary_subtract.23', '$const278.22']
    $282build_tuple.24 = build_tuple(items=[Var($266binary_subtract.16, _loop_hafnian_subroutines.py:180), Var($280binary_subtract.23, _loop_hafnian_subroutines.py:180)]) ['$266binary_subtract.16', '$280binary_subtract.23', '$282build_tuple.24']
    $284binary_subscr.25 = getitem(value=comb, index=$282build_tuple.24, fn=<built-in function getitem>) ['$282build_tuple.24', '$284binary_subscr.25', 'comb']
    $288binary_multiply.27 = $284binary_subscr.25 * powfactor ['$284binary_subscr.25', '$288binary_multiply.27', 'powfactor']
    $290inplace_add.28 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$258binary_subscr.12, rhs=$288binary_multiply.27, static_lhs=Undefined, static_rhs=Undefined) ['$258binary_subscr.12', '$288binary_multiply.27', '$290inplace_add.28']
    comb[$254build_tuple.9] = $290inplace_add.28 ['$254build_tuple.9', '$290inplace_add.28', 'comb']
    jump 240                                 []
label 298:
    jump 202                                 []
label 300:
    jump 60                                  []
label 302:
    $const306.2 = const(NoneType, None)      ['$const306.2']
    $const308.3 = const(NoneType, None)      ['$const308.3']
    $310build_slice.4 = global(slice: <class 'slice'>) ['$310build_slice.4']
    $310build_slice.5 = call $310build_slice.4($const306.2, $const308.3, func=$310build_slice.4, args=(Var($const306.2, _loop_hafnian_subroutines.py:182), Var($const308.3, _loop_hafnian_subroutines.py:182)), kws=(), vararg=None, target=None) ['$310build_slice.4', '$310build_slice.5', '$const306.2', '$const308.3']
    $312build_tuple.6 = build_tuple(items=[Var(count, _loop_hafnian_subroutines.py:161), Var($310build_slice.5, _loop_hafnian_subroutines.py:182)]) ['$310build_slice.5', '$312build_tuple.6', 'count']
    $314binary_subscr.7 = getitem(value=comb, index=$312build_tuple.6, fn=<built-in function getitem>) ['$312build_tuple.6', '$314binary_subscr.7', 'comb']
    $316return_value.8 = cast(value=$314binary_subscr.7) ['$314binary_subscr.7', '$316return_value.8']
    return $316return_value.8                ['$316return_value.8']

DEBUG 2022-02-14 16:38:03,368 ==== SSA block analysis pass on 0
DEBUG 2022-02-14 16:38:03,368 Running <numba.core.ssa._GatherDefsHandler object at 0x7fa046fbb8b0>
DEBUG 2022-02-14 16:38:03,368 on stmt: E = arg(0, name=E)
DEBUG 2022-02-14 16:38:03,369 on stmt: AX_S = arg(1, name=AX_S)
DEBUG 2022-02-14 16:38:03,369 on stmt: XD_S = arg(2, name=XD_S)
DEBUG 2022-02-14 16:38:03,369 on stmt: D_S = arg(3, name=D_S)
DEBUG 2022-02-14 16:38:03,369 on stmt: n = arg(4, name=n)
DEBUG 2022-02-14 16:38:03,369 on stmt: oddloop = arg(5, name=oddloop)
DEBUG 2022-02-14 16:38:03,369 on stmt: oddVX_S = arg(6, name=oddVX_S)
DEBUG 2022-02-14 16:38:03,369 on stmt: $4load_method.1 = getattr(value=E, attr=copy)
DEBUG 2022-02-14 16:38:03,369 on stmt: E_k = call $4load_method.1(func=$4load_method.1, args=[], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:03,369 on stmt: count = const(int, 0)
DEBUG 2022-02-14 16:38:03,369 on stmt: $14load_global.4 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:38:03,369 on stmt: $16load_attr.5 = getattr(value=$14load_global.4, attr=zeros)
DEBUG 2022-02-14 16:38:03,369 on stmt: $const18.6 = const(int, 2)
DEBUG 2022-02-14 16:38:03,369 on stmt: $const22.8 = const(int, 1)
DEBUG 2022-02-14 16:38:03,369 on stmt: $24binary_add.9 = n + $const22.8
DEBUG 2022-02-14 16:38:03,369 on stmt: $26build_tuple.10 = build_tuple(items=[Var($const18.6, _loop_hafnian_subroutines.py:162), Var($24binary_add.9, _loop_hafnian_subroutines.py:162)])
DEBUG 2022-02-14 16:38:03,369 on stmt: $28load_global.11 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:38:03,369 on stmt: $30load_attr.12 = getattr(value=$28load_global.11, attr=complex128)
DEBUG 2022-02-14 16:38:03,369 on stmt: comb = call $16load_attr.5($26build_tuple.10, func=$16load_attr.5, args=[Var($26build_tuple.10, _loop_hafnian_subroutines.py:162)], kws=[('dtype', Var($30load_attr.12, _loop_hafnian_subroutines.py:162))], vararg=None, target=None)
DEBUG 2022-02-14 16:38:03,369 on stmt: $const38.15 = const(int, 1)
DEBUG 2022-02-14 16:38:03,369 on stmt: $const_0 = const(int, 0)
DEBUG 2022-02-14 16:38:03,370 on stmt: $const_0.1 = const(int, 0)
DEBUG 2022-02-14 16:38:03,370 on stmt: $const42.17 = build_tuple(items=[Var($const_0, _loop_hafnian_subroutines.py:163), Var($const_0.1, _loop_hafnian_subroutines.py:163)])
DEBUG 2022-02-14 16:38:03,370 on stmt: comb[(0, 0)] = $const38.15
DEBUG 2022-02-14 16:38:03,370 on stmt: $46load_global.18 = global(range: <class 'range'>)
DEBUG 2022-02-14 16:38:03,370 on stmt: $const48.19 = const(int, 1)
DEBUG 2022-02-14 16:38:03,370 on stmt: $const52.21 = const(int, 1)
DEBUG 2022-02-14 16:38:03,370 on stmt: $54binary_add.22 = n + $const52.21
DEBUG 2022-02-14 16:38:03,370 on stmt: $56call_function.23 = call $46load_global.18($const48.19, $54binary_add.22, func=$46load_global.18, args=[Var($const48.19, _loop_hafnian_subroutines.py:164), Var($54binary_add.22, _loop_hafnian_subroutines.py:164)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:03,370 on stmt: $58get_iter.24 = getiter(value=$56call_function.23)
DEBUG 2022-02-14 16:38:03,370 on stmt: $phi60.0 = $58get_iter.24
DEBUG 2022-02-14 16:38:03,370 on stmt: jump 60
DEBUG 2022-02-14 16:38:03,370 ==== SSA block analysis pass on 60
DEBUG 2022-02-14 16:38:03,370 Running <numba.core.ssa._GatherDefsHandler object at 0x7fa046fbb8b0>
DEBUG 2022-02-14 16:38:03,370 on stmt: $60for_iter.1 = iternext(value=$phi60.0)
DEBUG 2022-02-14 16:38:03,370 on stmt: $60for_iter.2 = pair_first(value=$60for_iter.1)
DEBUG 2022-02-14 16:38:03,370 on stmt: $60for_iter.3 = pair_second(value=$60for_iter.1)
DEBUG 2022-02-14 16:38:03,370 on stmt: $phi62.1 = $60for_iter.2
DEBUG 2022-02-14 16:38:03,370 on stmt: branch $60for_iter.3, 62, 302
DEBUG 2022-02-14 16:38:03,370 ==== SSA block analysis pass on 62
DEBUG 2022-02-14 16:38:03,370 Running <numba.core.ssa._GatherDefsHandler object at 0x7fa046fbb8b0>
DEBUG 2022-02-14 16:38:03,371 on stmt: i = $phi62.1
DEBUG 2022-02-14 16:38:03,371 on stmt: $const66.3 = const(int, 1)
DEBUG 2022-02-14 16:38:03,371 on stmt: $68compare_op.4 = i == $const66.3
DEBUG 2022-02-14 16:38:03,371 on stmt: bool70 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:38:03,371 on stmt: $70pred = call bool70($68compare_op.4, func=bool70, args=(Var($68compare_op.4, _loop_hafnian_subroutines.py:165),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:03,371 on stmt: branch $70pred, 72, 78
DEBUG 2022-02-14 16:38:03,371 ==== SSA block analysis pass on 72
DEBUG 2022-02-14 16:38:03,371 Running <numba.core.ssa._GatherDefsHandler object at 0x7fa046fbb8b0>
DEBUG 2022-02-14 16:38:03,371 on stmt: factor = oddloop
DEBUG 2022-02-14 16:38:03,371 on stmt: jump 140
DEBUG 2022-02-14 16:38:03,371 ==== SSA block analysis pass on 78
DEBUG 2022-02-14 16:38:03,371 Running <numba.core.ssa._GatherDefsHandler object at 0x7fa046fbb8b0>
DEBUG 2022-02-14 16:38:03,371 on stmt: $const80.2 = const(int, 2)
DEBUG 2022-02-14 16:38:03,371 on stmt: $82binary_modulo.3 = i % $const80.2
DEBUG 2022-02-14 16:38:03,371 on stmt: $const84.4 = const(int, 0)
DEBUG 2022-02-14 16:38:03,371 on stmt: $86compare_op.5 = $82binary_modulo.3 == $const84.4
DEBUG 2022-02-14 16:38:03,371 on stmt: bool88 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:38:03,372 on stmt: $88pred = call bool88($86compare_op.5, func=bool88, args=(Var($86compare_op.5, _loop_hafnian_subroutines.py:167),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:03,372 on stmt: branch $88pred, 90, 124
DEBUG 2022-02-14 16:38:03,372 ==== SSA block analysis pass on 90
DEBUG 2022-02-14 16:38:03,372 Running <numba.core.ssa._GatherDefsHandler object at 0x7fa046fbb8b0>
DEBUG 2022-02-14 16:38:03,372 on stmt: $92load_method.2 = getattr(value=E_k, attr=sum)
DEBUG 2022-02-14 16:38:03,372 on stmt: $94call_method.3 = call $92load_method.2(func=$92load_method.2, args=[], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:03,372 on stmt: $98binary_true_divide.5 = $94call_method.3 / i
DEBUG 2022-02-14 16:38:03,372 on stmt: $104binary_matrix_multiply.8 = XD_S <built-in function matmul> D_S
DEBUG 2022-02-14 16:38:03,372 on stmt: $const106.9 = const(int, 2)
DEBUG 2022-02-14 16:38:03,372 on stmt: $108binary_true_divide.10 = $104binary_matrix_multiply.8 / $const106.9
DEBUG 2022-02-14 16:38:03,372 on stmt: factor = $98binary_true_divide.5 + $108binary_true_divide.10
DEBUG 2022-02-14 16:38:03,372 on stmt: $118inplace_multiply.14 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=E_k, rhs=E, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:38:03,372 on stmt: E_k = $118inplace_multiply.14
DEBUG 2022-02-14 16:38:03,372 on stmt: jump 140
DEBUG 2022-02-14 16:38:03,372 ==== SSA block analysis pass on 124
DEBUG 2022-02-14 16:38:03,372 Running <numba.core.ssa._GatherDefsHandler object at 0x7fa046fbb8b0>
DEBUG 2022-02-14 16:38:03,373 on stmt: factor = oddVX_S <built-in function matmul> D_S
DEBUG 2022-02-14 16:38:03,373 on stmt: $136binary_matrix_multiply.6 = AX_S <built-in function matmul> D_S
DEBUG 2022-02-14 16:38:03,373 on stmt: D_S = $136binary_matrix_multiply.6
DEBUG 2022-02-14 16:38:03,373 on stmt: jump 140
DEBUG 2022-02-14 16:38:03,373 ==== SSA block analysis pass on 140
DEBUG 2022-02-14 16:38:03,373 Running <numba.core.ssa._GatherDefsHandler object at 0x7fa046fbb8b0>
DEBUG 2022-02-14 16:38:03,373 on stmt: powfactor = const(int, 1)
DEBUG 2022-02-14 16:38:03,373 on stmt: $const144.2 = const(int, 1)
DEBUG 2022-02-14 16:38:03,373 on stmt: $148binary_subtract.4 = $const144.2 - count
DEBUG 2022-02-14 16:38:03,373 on stmt: count = $148binary_subtract.4
DEBUG 2022-02-14 16:38:03,373 on stmt: $const154.6 = const(int, 1)
DEBUG 2022-02-14 16:38:03,373 on stmt: $158binary_subtract.8 = $const154.6 - count
DEBUG 2022-02-14 16:38:03,373 on stmt: $const160.9 = const(NoneType, None)
DEBUG 2022-02-14 16:38:03,373 on stmt: $const162.10 = const(NoneType, None)
DEBUG 2022-02-14 16:38:03,373 on stmt: $164build_slice.11 = global(slice: <class 'slice'>)
DEBUG 2022-02-14 16:38:03,373 on stmt: $164build_slice.12 = call $164build_slice.11($const160.9, $const162.10, func=$164build_slice.11, args=(Var($const160.9, _loop_hafnian_subroutines.py:176), Var($const162.10, _loop_hafnian_subroutines.py:176)), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:03,373 on stmt: $166build_tuple.13 = build_tuple(items=[Var($158binary_subtract.8, _loop_hafnian_subroutines.py:176), Var($164build_slice.12, _loop_hafnian_subroutines.py:176)])
DEBUG 2022-02-14 16:38:03,373 on stmt: $168binary_subscr.14 = getitem(value=comb, index=$166build_tuple.13, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:03,374 on stmt: $const174.17 = const(NoneType, None)
DEBUG 2022-02-14 16:38:03,374 on stmt: $const176.18 = const(NoneType, None)
DEBUG 2022-02-14 16:38:03,374 on stmt: $178build_slice.19 = global(slice: <class 'slice'>)
DEBUG 2022-02-14 16:38:03,374 on stmt: $178build_slice.20 = call $178build_slice.19($const174.17, $const176.18, func=$178build_slice.19, args=(Var($const174.17, _loop_hafnian_subroutines.py:176), Var($const176.18, _loop_hafnian_subroutines.py:176)), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:03,374 on stmt: $180build_tuple.21 = build_tuple(items=[Var(count, _loop_hafnian_subroutines.py:161), Var($178build_slice.20, _loop_hafnian_subroutines.py:176)])
DEBUG 2022-02-14 16:38:03,374 on stmt: comb[$180build_tuple.21] = $168binary_subscr.14
DEBUG 2022-02-14 16:38:03,374 on stmt: $184load_global.22 = global(range: <class 'range'>)
DEBUG 2022-02-14 16:38:03,374 on stmt: $const186.23 = const(int, 1)
DEBUG 2022-02-14 16:38:03,374 on stmt: $192binary_floor_divide.26 = n // i
DEBUG 2022-02-14 16:38:03,374 on stmt: $const194.27 = const(int, 1)
DEBUG 2022-02-14 16:38:03,374 on stmt: $196binary_add.28 = $192binary_floor_divide.26 + $const194.27
DEBUG 2022-02-14 16:38:03,374 on stmt: $198call_function.29 = call $184load_global.22($const186.23, $196binary_add.28, func=$184load_global.22, args=[Var($const186.23, _loop_hafnian_subroutines.py:177), Var($196binary_add.28, _loop_hafnian_subroutines.py:177)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:03,374 on stmt: $200get_iter.30 = getiter(value=$198call_function.29)
DEBUG 2022-02-14 16:38:03,374 on stmt: $phi202.1 = $200get_iter.30
DEBUG 2022-02-14 16:38:03,374 on stmt: jump 202
DEBUG 2022-02-14 16:38:03,374 ==== SSA block analysis pass on 202
DEBUG 2022-02-14 16:38:03,374 Running <numba.core.ssa._GatherDefsHandler object at 0x7fa046fbb8b0>
DEBUG 2022-02-14 16:38:03,374 on stmt: $202for_iter.2 = iternext(value=$phi202.1)
DEBUG 2022-02-14 16:38:03,375 on stmt: $202for_iter.3 = pair_first(value=$202for_iter.2)
DEBUG 2022-02-14 16:38:03,375 on stmt: $202for_iter.4 = pair_second(value=$202for_iter.2)
DEBUG 2022-02-14 16:38:03,375 on stmt: $phi204.2 = $202for_iter.3
DEBUG 2022-02-14 16:38:03,375 on stmt: branch $202for_iter.4, 204, 300
DEBUG 2022-02-14 16:38:03,375 ==== SSA block analysis pass on 204
DEBUG 2022-02-14 16:38:03,375 Running <numba.core.ssa._GatherDefsHandler object at 0x7fa046fbb8b0>
DEBUG 2022-02-14 16:38:03,375 on stmt: j = $phi204.2
DEBUG 2022-02-14 16:38:03,375 on stmt: $212binary_true_divide.6 = factor / j
DEBUG 2022-02-14 16:38:03,375 on stmt: $214inplace_multiply.7 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=powfactor, rhs=$212binary_true_divide.6, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:38:03,375 on stmt: powfactor = $214inplace_multiply.7
DEBUG 2022-02-14 16:38:03,375 on stmt: $218load_global.8 = global(range: <class 'range'>)
DEBUG 2022-02-14 16:38:03,375 on stmt: $224binary_multiply.11 = i * j
DEBUG 2022-02-14 16:38:03,375 on stmt: $const226.12 = const(int, 1)
DEBUG 2022-02-14 16:38:03,375 on stmt: $228binary_add.13 = $224binary_multiply.11 + $const226.12
DEBUG 2022-02-14 16:38:03,375 on stmt: $const232.15 = const(int, 2)
DEBUG 2022-02-14 16:38:03,375 on stmt: $234binary_add.16 = n + $const232.15
DEBUG 2022-02-14 16:38:03,375 on stmt: $236call_function.17 = call $218load_global.8($228binary_add.13, $234binary_add.16, func=$218load_global.8, args=[Var($228binary_add.13, _loop_hafnian_subroutines.py:179), Var($234binary_add.16, _loop_hafnian_subroutines.py:179)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:03,375 on stmt: $238get_iter.18 = getiter(value=$236call_function.17)
DEBUG 2022-02-14 16:38:03,375 on stmt: $phi240.2 = $238get_iter.18
DEBUG 2022-02-14 16:38:03,375 on stmt: jump 240
DEBUG 2022-02-14 16:38:03,375 ==== SSA block analysis pass on 240
DEBUG 2022-02-14 16:38:03,376 Running <numba.core.ssa._GatherDefsHandler object at 0x7fa046fbb8b0>
DEBUG 2022-02-14 16:38:03,376 on stmt: $240for_iter.3 = iternext(value=$phi240.2)
DEBUG 2022-02-14 16:38:03,376 on stmt: $240for_iter.4 = pair_first(value=$240for_iter.3)
DEBUG 2022-02-14 16:38:03,376 on stmt: $240for_iter.5 = pair_second(value=$240for_iter.3)
DEBUG 2022-02-14 16:38:03,376 on stmt: $phi242.3 = $240for_iter.4
DEBUG 2022-02-14 16:38:03,376 on stmt: branch $240for_iter.5, 242, 298
DEBUG 2022-02-14 16:38:03,376 ==== SSA block analysis pass on 242
DEBUG 2022-02-14 16:38:03,376 Running <numba.core.ssa._GatherDefsHandler object at 0x7fa046fbb8b0>
DEBUG 2022-02-14 16:38:03,376 on stmt: k = $phi242.3
DEBUG 2022-02-14 16:38:03,376 on stmt: $const250.7 = const(int, 1)
DEBUG 2022-02-14 16:38:03,376 on stmt: $252binary_subtract.8 = k - $const250.7
DEBUG 2022-02-14 16:38:03,376 on stmt: $254build_tuple.9 = build_tuple(items=[Var(count, _loop_hafnian_subroutines.py:161), Var($252binary_subtract.8, _loop_hafnian_subroutines.py:180)])
DEBUG 2022-02-14 16:38:03,376 on stmt: $258binary_subscr.12 = getitem(value=comb, index=$254build_tuple.9, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:03,376 on stmt: $const262.14 = const(int, 1)
DEBUG 2022-02-14 16:38:03,376 on stmt: $266binary_subtract.16 = $const262.14 - count
DEBUG 2022-02-14 16:38:03,376 on stmt: $274binary_multiply.20 = i * j
DEBUG 2022-02-14 16:38:03,376 on stmt: $276binary_subtract.21 = k - $274binary_multiply.20
DEBUG 2022-02-14 16:38:03,376 on stmt: $const278.22 = const(int, 1)
DEBUG 2022-02-14 16:38:03,376 on stmt: $280binary_subtract.23 = $276binary_subtract.21 - $const278.22
DEBUG 2022-02-14 16:38:03,377 on stmt: $282build_tuple.24 = build_tuple(items=[Var($266binary_subtract.16, _loop_hafnian_subroutines.py:180), Var($280binary_subtract.23, _loop_hafnian_subroutines.py:180)])
DEBUG 2022-02-14 16:38:03,377 on stmt: $284binary_subscr.25 = getitem(value=comb, index=$282build_tuple.24, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:03,377 on stmt: $288binary_multiply.27 = $284binary_subscr.25 * powfactor
DEBUG 2022-02-14 16:38:03,377 on stmt: $290inplace_add.28 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$258binary_subscr.12, rhs=$288binary_multiply.27, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:38:03,377 on stmt: comb[$254build_tuple.9] = $290inplace_add.28
DEBUG 2022-02-14 16:38:03,377 on stmt: jump 240
DEBUG 2022-02-14 16:38:03,377 ==== SSA block analysis pass on 298
DEBUG 2022-02-14 16:38:03,377 Running <numba.core.ssa._GatherDefsHandler object at 0x7fa046fbb8b0>
DEBUG 2022-02-14 16:38:03,377 on stmt: jump 202
DEBUG 2022-02-14 16:38:03,377 ==== SSA block analysis pass on 300
DEBUG 2022-02-14 16:38:03,377 Running <numba.core.ssa._GatherDefsHandler object at 0x7fa046fbb8b0>
DEBUG 2022-02-14 16:38:03,377 on stmt: jump 60
DEBUG 2022-02-14 16:38:03,377 ==== SSA block analysis pass on 302
DEBUG 2022-02-14 16:38:03,377 Running <numba.core.ssa._GatherDefsHandler object at 0x7fa046fbb8b0>
DEBUG 2022-02-14 16:38:03,377 on stmt: $const306.2 = const(NoneType, None)
DEBUG 2022-02-14 16:38:03,377 on stmt: $const308.3 = const(NoneType, None)
DEBUG 2022-02-14 16:38:03,377 on stmt: $310build_slice.4 = global(slice: <class 'slice'>)
DEBUG 2022-02-14 16:38:03,377 on stmt: $310build_slice.5 = call $310build_slice.4($const306.2, $const308.3, func=$310build_slice.4, args=(Var($const306.2, _loop_hafnian_subroutines.py:182), Var($const308.3, _loop_hafnian_subroutines.py:182)), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:03,377 on stmt: $312build_tuple.6 = build_tuple(items=[Var(count, _loop_hafnian_subroutines.py:161), Var($310build_slice.5, _loop_hafnian_subroutines.py:182)])
DEBUG 2022-02-14 16:38:03,377 on stmt: $314binary_subscr.7 = getitem(value=comb, index=$312build_tuple.6, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:03,378 on stmt: $316return_value.8 = cast(value=$314binary_subscr.7)
DEBUG 2022-02-14 16:38:03,378 on stmt: return $316return_value.8
DEBUG 2022-02-14 16:38:03,379 defs defaultdict(<class 'list'>,
            {'$104binary_matrix_multiply.8': [<numba.core.ir.Assign object at 0x7fa0472aa4f0>],
             '$108binary_true_divide.10': [<numba.core.ir.Assign object at 0x7fa04747de50>],
             '$118inplace_multiply.14': [<numba.core.ir.Assign object at 0x7fa0473d7670>],
             '$136binary_matrix_multiply.6': [<numba.core.ir.Assign object at 0x7fa047517cd0>],
             '$148binary_subtract.4': [<numba.core.ir.Assign object at 0x7fa04720b1c0>],
             '$14load_global.4': [<numba.core.ir.Assign object at 0x7fa04678cac0>],
             '$158binary_subtract.8': [<numba.core.ir.Assign object at 0x7fa04733c910>],
             '$164build_slice.11': [<numba.core.ir.Assign object at 0x7fa047282520>],
             '$164build_slice.12': [<numba.core.ir.Assign object at 0x7fa0472826d0>],
             '$166build_tuple.13': [<numba.core.ir.Assign object at 0x7fa047282c10>],
             '$168binary_subscr.14': [<numba.core.ir.Assign object at 0x7fa047282bb0>],
             '$16load_attr.5': [<numba.core.ir.Assign object at 0x7fa04678c370>],
             '$178build_slice.19': [<numba.core.ir.Assign object at 0x7fa047291a00>],
             '$178build_slice.20': [<numba.core.ir.Assign object at 0x7fa0472918e0>],
             '$180build_tuple.21': [<numba.core.ir.Assign object at 0x7fa047291160>],
             '$184load_global.22': [<numba.core.ir.Assign object at 0x7fa047291a30>],
             '$192binary_floor_divide.26': [<numba.core.ir.Assign object at 0x7fa047291af0>],
             '$196binary_add.28': [<numba.core.ir.Assign object at 0x7fa0472bc640>],
             '$198call_function.29': [<numba.core.ir.Assign object at 0x7fa04720a610>],
             '$200get_iter.30': [<numba.core.ir.Assign object at 0x7fa04720a310>],
             '$202for_iter.2': [<numba.core.ir.Assign object at 0x7fa04720ae80>],
             '$202for_iter.3': [<numba.core.ir.Assign object at 0x7fa04720a040>],
             '$202for_iter.4': [<numba.core.ir.Assign object at 0x7fa04720abe0>],
             '$212binary_true_divide.6': [<numba.core.ir.Assign object at 0x7fa04720a190>],
             '$214inplace_multiply.7': [<numba.core.ir.Assign object at 0x7fa04720a6d0>],
             '$218load_global.8': [<numba.core.ir.Assign object at 0x7fa047112d00>],
             '$224binary_multiply.11': [<numba.core.ir.Assign object at 0x7fa046cc1bb0>],
             '$228binary_add.13': [<numba.core.ir.Assign object at 0x7fa046cc17c0>],
             '$234binary_add.16': [<numba.core.ir.Assign object at 0x7fa046cc1d90>],
             '$236call_function.17': [<numba.core.ir.Assign object at 0x7fa04757e6a0>],
             '$238get_iter.18': [<numba.core.ir.Assign object at 0x7fa047413d60>],
             '$240for_iter.3': [<numba.core.ir.Assign object at 0x7fa047413130>],
             '$240for_iter.4': [<numba.core.ir.Assign object at 0x7fa047413940>],
             '$240for_iter.5': [<numba.core.ir.Assign object at 0x7fa0474131f0>],
             '$24binary_add.9': [<numba.core.ir.Assign object at 0x7fa046785dc0>],
             '$252binary_subtract.8': [<numba.core.ir.Assign object at 0x7fa04742c6d0>],
             '$254build_tuple.9': [<numba.core.ir.Assign object at 0x7fa04742c370>],
             '$258binary_subscr.12': [<numba.core.ir.Assign object at 0x7fa04742c8e0>],
             '$266binary_subtract.16': [<numba.core.ir.Assign object at 0x7fa0473ee550>],
             '$26build_tuple.10': [<numba.core.ir.Assign object at 0x7fa046776fd0>],
             '$274binary_multiply.20': [<numba.core.ir.Assign object at 0x7fa046d967f0>],
             '$276binary_subtract.21': [<numba.core.ir.Assign object at 0x7fa046d96b50>],
             '$280binary_subtract.23': [<numba.core.ir.Assign object at 0x7fa046d96310>],
             '$282build_tuple.24': [<numba.core.ir.Assign object at 0x7fa046d962e0>],
             '$284binary_subscr.25': [<numba.core.ir.Assign object at 0x7fa047106220>],
             '$288binary_multiply.27': [<numba.core.ir.Assign object at 0x7fa047106d00>],
             '$28load_global.11': [<numba.core.ir.Assign object at 0x7fa04677cd30>],
             '$290inplace_add.28': [<numba.core.ir.Assign object at 0x7fa047106af0>],
             '$30load_attr.12': [<numba.core.ir.Assign object at 0x7fa046774370>],
             '$310build_slice.4': [<numba.core.ir.Assign object at 0x7fa046cbb9a0>],
             '$310build_slice.5': [<numba.core.ir.Assign object at 0x7fa046cbbca0>],
             '$312build_tuple.6': [<numba.core.ir.Assign object at 0x7fa046cbb0a0>],
             '$314binary_subscr.7': [<numba.core.ir.Assign object at 0x7fa046cbb1c0>],
             '$316return_value.8': [<numba.core.ir.Assign object at 0x7fa046cbbcd0>],
             '$46load_global.18': [<numba.core.ir.Assign object at 0x7fa04677deb0>],
             '$4load_method.1': [<numba.core.ir.Assign object at 0x7fa0466e5c40>],
             '$54binary_add.22': [<numba.core.ir.Assign object at 0x7fa0469ab970>],
             '$56call_function.23': [<numba.core.ir.Assign object at 0x7fa046860b20>],
             '$58get_iter.24': [<numba.core.ir.Assign object at 0x7fa04697ed90>],
             '$60for_iter.1': [<numba.core.ir.Assign object at 0x7fa0468c6d00>],
             '$60for_iter.2': [<numba.core.ir.Assign object at 0x7fa0468800a0>],
             '$60for_iter.3': [<numba.core.ir.Assign object at 0x7fa046880d30>],
             '$68compare_op.4': [<numba.core.ir.Assign object at 0x7fa0466e73a0>],
             '$70pred': [<numba.core.ir.Assign object at 0x7fa0466e7610>],
             '$82binary_modulo.3': [<numba.core.ir.Assign object at 0x7fa04727b5e0>],
             '$86compare_op.5': [<numba.core.ir.Assign object at 0x7fa04727b100>],
             '$88pred': [<numba.core.ir.Assign object at 0x7fa04727bd30>],
             '$92load_method.2': [<numba.core.ir.Assign object at 0x7fa0472aa2b0>],
             '$94call_method.3': [<numba.core.ir.Assign object at 0x7fa0472aaa00>],
             '$98binary_true_divide.5': [<numba.core.ir.Assign object at 0x7fa0472aab20>],
             '$const106.9': [<numba.core.ir.Assign object at 0x7fa0472aa5b0>],
             '$const144.2': [<numba.core.ir.Assign object at 0x7fa04720bb50>],
             '$const154.6': [<numba.core.ir.Assign object at 0x7fa04720b550>],
             '$const160.9': [<numba.core.ir.Assign object at 0x7fa04733c640>],
             '$const162.10': [<numba.core.ir.Assign object at 0x7fa04733cfd0>],
             '$const174.17': [<numba.core.ir.Assign object at 0x7fa047291310>],
             '$const176.18': [<numba.core.ir.Assign object at 0x7fa047291be0>],
             '$const18.6': [<numba.core.ir.Assign object at 0x7fa04678ceb0>],
             '$const186.23': [<numba.core.ir.Assign object at 0x7fa047291cd0>],
             '$const194.27': [<numba.core.ir.Assign object at 0x7fa0472bc970>],
             '$const22.8': [<numba.core.ir.Assign object at 0x7fa04678c6d0>],
             '$const226.12': [<numba.core.ir.Assign object at 0x7fa046cc1550>],
             '$const232.15': [<numba.core.ir.Assign object at 0x7fa046cc1310>],
             '$const250.7': [<numba.core.ir.Assign object at 0x7fa04742ceb0>],
             '$const262.14': [<numba.core.ir.Assign object at 0x7fa04742c160>],
             '$const278.22': [<numba.core.ir.Assign object at 0x7fa046d96fa0>],
             '$const306.2': [<numba.core.ir.Assign object at 0x7fa046cbba30>],
             '$const308.3': [<numba.core.ir.Assign object at 0x7fa046cbb2e0>],
             '$const38.15': [<numba.core.ir.Assign object at 0x7fa04676e190>],
             '$const42.17': [<numba.core.ir.Assign object at 0x7fa0467794c0>],
             '$const48.19': [<numba.core.ir.Assign object at 0x7fa04677d100>],
             '$const52.21': [<numba.core.ir.Assign object at 0x7fa0467fceb0>],
             '$const66.3': [<numba.core.ir.Assign object at 0x7fa0466e70a0>],
             '$const80.2': [<numba.core.ir.Assign object at 0x7fa04727b430>],
             '$const84.4': [<numba.core.ir.Assign object at 0x7fa04727b460>],
             '$const_0': [<numba.core.ir.Assign object at 0x7fa04675b490>],
             '$const_0.1': [<numba.core.ir.Assign object at 0x7fa04675b070>],
             '$phi202.1': [<numba.core.ir.Assign object at 0x7fa047517040>],
             '$phi204.2': [<numba.core.ir.Assign object at 0x7fa047291d00>],
             '$phi240.2': [<numba.core.ir.Assign object at 0x7fa04720aa00>],
             '$phi242.3': [<numba.core.ir.Assign object at 0x7fa047413ee0>],
             '$phi60.0': [<numba.core.ir.Assign object at 0x7fa0466e5ca0>],
             '$phi62.1': [<numba.core.ir.Assign object at 0x7fa04678da00>],
             'AX_S': [<numba.core.ir.Assign object at 0x7fa0466e54f0>],
             'D_S': [<numba.core.ir.Assign object at 0x7fa0466e5490>,
                     <numba.core.ir.Assign object at 0x7fa047517880>],
             'E': [<numba.core.ir.Assign object at 0x7fa04678d370>],
             'E_k': [<numba.core.ir.Assign object at 0x7fa0466e5730>,
                     <numba.core.ir.Assign object at 0x7fa0473d7910>],
             'XD_S': [<numba.core.ir.Assign object at 0x7fa0466e5b50>],
             'bool70': [<numba.core.ir.Assign object at 0x7fa0466e76a0>],
             'bool88': [<numba.core.ir.Assign object at 0x7fa04727b0d0>],
             'comb': [<numba.core.ir.Assign object at 0x7fa04676c9d0>],
             'count': [<numba.core.ir.Assign object at 0x7fa04678cfd0>,
                       <numba.core.ir.Assign object at 0x7fa04720b670>],
             'factor': [<numba.core.ir.Assign object at 0x7fa0466e79a0>,
                        <numba.core.ir.Assign object at 0x7fa04747d7c0>,
                        <numba.core.ir.Assign object at 0x7fa0473d7fa0>],
             'i': [<numba.core.ir.Assign object at 0x7fa04674de20>],
             'j': [<numba.core.ir.Assign object at 0x7fa04720a940>],
             'k': [<numba.core.ir.Assign object at 0x7fa04742c580>],
             'n': [<numba.core.ir.Assign object at 0x7fa0466e57f0>],
             'oddVX_S': [<numba.core.ir.Assign object at 0x7fa0466e5e20>],
             'oddloop': [<numba.core.ir.Assign object at 0x7fa0466e5fd0>],
             'powfactor': [<numba.core.ir.Assign object at 0x7fa04727bd60>,
                           <numba.core.ir.Assign object at 0x7fa04720a550>]})
DEBUG 2022-02-14 16:38:03,379 SSA violators {'factor', 'powfactor', 'D_S', 'E_k', 'count'}
DEBUG 2022-02-14 16:38:03,379 Fix SSA violator on var factor
DEBUG 2022-02-14 16:38:03,379 ==== SSA block rewrite pass on 0
DEBUG 2022-02-14 16:38:03,379 Running <numba.core.ssa._FreshVarHandler object at 0x7fa04711c6a0>
DEBUG 2022-02-14 16:38:03,379 on stmt: E = arg(0, name=E)
DEBUG 2022-02-14 16:38:03,379 on stmt: AX_S = arg(1, name=AX_S)
DEBUG 2022-02-14 16:38:03,379 on stmt: XD_S = arg(2, name=XD_S)
DEBUG 2022-02-14 16:38:03,379 on stmt: D_S = arg(3, name=D_S)
DEBUG 2022-02-14 16:38:03,379 on stmt: n = arg(4, name=n)
DEBUG 2022-02-14 16:38:03,379 on stmt: oddloop = arg(5, name=oddloop)
DEBUG 2022-02-14 16:38:03,379 on stmt: oddVX_S = arg(6, name=oddVX_S)
DEBUG 2022-02-14 16:38:03,379 on stmt: $4load_method.1 = getattr(value=E, attr=copy)
DEBUG 2022-02-14 16:38:03,379 on stmt: E_k = call $4load_method.1(func=$4load_method.1, args=[], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:03,380 on stmt: count = const(int, 0)
DEBUG 2022-02-14 16:38:03,380 on stmt: $14load_global.4 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:38:03,380 on stmt: $16load_attr.5 = getattr(value=$14load_global.4, attr=zeros)
DEBUG 2022-02-14 16:38:03,380 on stmt: $const18.6 = const(int, 2)
DEBUG 2022-02-14 16:38:03,380 on stmt: $const22.8 = const(int, 1)
DEBUG 2022-02-14 16:38:03,380 on stmt: $24binary_add.9 = n + $const22.8
DEBUG 2022-02-14 16:38:03,380 on stmt: $26build_tuple.10 = build_tuple(items=[Var($const18.6, _loop_hafnian_subroutines.py:162), Var($24binary_add.9, _loop_hafnian_subroutines.py:162)])
DEBUG 2022-02-14 16:38:03,380 on stmt: $28load_global.11 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:38:03,380 on stmt: $30load_attr.12 = getattr(value=$28load_global.11, attr=complex128)
DEBUG 2022-02-14 16:38:03,380 on stmt: comb = call $16load_attr.5($26build_tuple.10, func=$16load_attr.5, args=[Var($26build_tuple.10, _loop_hafnian_subroutines.py:162)], kws=[('dtype', Var($30load_attr.12, _loop_hafnian_subroutines.py:162))], vararg=None, target=None)
DEBUG 2022-02-14 16:38:03,380 on stmt: $const38.15 = const(int, 1)
DEBUG 2022-02-14 16:38:03,380 on stmt: $const_0 = const(int, 0)
DEBUG 2022-02-14 16:38:03,380 on stmt: $const_0.1 = const(int, 0)
DEBUG 2022-02-14 16:38:03,380 on stmt: $const42.17 = build_tuple(items=[Var($const_0, _loop_hafnian_subroutines.py:163), Var($const_0.1, _loop_hafnian_subroutines.py:163)])
DEBUG 2022-02-14 16:38:03,380 on stmt: comb[(0, 0)] = $const38.15
DEBUG 2022-02-14 16:38:03,380 on stmt: $46load_global.18 = global(range: <class 'range'>)
DEBUG 2022-02-14 16:38:03,380 on stmt: $const48.19 = const(int, 1)
DEBUG 2022-02-14 16:38:03,380 on stmt: $const52.21 = const(int, 1)
DEBUG 2022-02-14 16:38:03,380 on stmt: $54binary_add.22 = n + $const52.21
DEBUG 2022-02-14 16:38:03,380 on stmt: $56call_function.23 = call $46load_global.18($const48.19, $54binary_add.22, func=$46load_global.18, args=[Var($const48.19, _loop_hafnian_subroutines.py:164), Var($54binary_add.22, _loop_hafnian_subroutines.py:164)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:03,381 on stmt: $58get_iter.24 = getiter(value=$56call_function.23)
DEBUG 2022-02-14 16:38:03,381 on stmt: $phi60.0 = $58get_iter.24
DEBUG 2022-02-14 16:38:03,381 on stmt: jump 60
DEBUG 2022-02-14 16:38:03,381 ==== SSA block rewrite pass on 60
DEBUG 2022-02-14 16:38:03,381 Running <numba.core.ssa._FreshVarHandler object at 0x7fa04711c6a0>
DEBUG 2022-02-14 16:38:03,381 on stmt: $60for_iter.1 = iternext(value=$phi60.0)
DEBUG 2022-02-14 16:38:03,381 on stmt: $60for_iter.2 = pair_first(value=$60for_iter.1)
DEBUG 2022-02-14 16:38:03,381 on stmt: $60for_iter.3 = pair_second(value=$60for_iter.1)
DEBUG 2022-02-14 16:38:03,381 on stmt: $phi62.1 = $60for_iter.2
DEBUG 2022-02-14 16:38:03,381 on stmt: branch $60for_iter.3, 62, 302
DEBUG 2022-02-14 16:38:03,381 ==== SSA block rewrite pass on 62
DEBUG 2022-02-14 16:38:03,381 Running <numba.core.ssa._FreshVarHandler object at 0x7fa04711c6a0>
DEBUG 2022-02-14 16:38:03,381 on stmt: i = $phi62.1
DEBUG 2022-02-14 16:38:03,381 on stmt: $const66.3 = const(int, 1)
DEBUG 2022-02-14 16:38:03,381 on stmt: $68compare_op.4 = i == $const66.3
DEBUG 2022-02-14 16:38:03,381 on stmt: bool70 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:38:03,381 on stmt: $70pred = call bool70($68compare_op.4, func=bool70, args=(Var($68compare_op.4, _loop_hafnian_subroutines.py:165),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:03,381 on stmt: branch $70pred, 72, 78
DEBUG 2022-02-14 16:38:03,381 ==== SSA block rewrite pass on 72
DEBUG 2022-02-14 16:38:03,381 Running <numba.core.ssa._FreshVarHandler object at 0x7fa04711c6a0>
DEBUG 2022-02-14 16:38:03,381 on stmt: factor = oddloop
DEBUG 2022-02-14 16:38:03,381 first assign: factor
DEBUG 2022-02-14 16:38:03,382 replaced with: factor = oddloop
DEBUG 2022-02-14 16:38:03,382 on stmt: jump 140
DEBUG 2022-02-14 16:38:03,382 ==== SSA block rewrite pass on 78
DEBUG 2022-02-14 16:38:03,382 Running <numba.core.ssa._FreshVarHandler object at 0x7fa04711c6a0>
DEBUG 2022-02-14 16:38:03,382 on stmt: $const80.2 = const(int, 2)
DEBUG 2022-02-14 16:38:03,382 on stmt: $82binary_modulo.3 = i % $const80.2
DEBUG 2022-02-14 16:38:03,382 on stmt: $const84.4 = const(int, 0)
DEBUG 2022-02-14 16:38:03,382 on stmt: $86compare_op.5 = $82binary_modulo.3 == $const84.4
DEBUG 2022-02-14 16:38:03,382 on stmt: bool88 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:38:03,382 on stmt: $88pred = call bool88($86compare_op.5, func=bool88, args=(Var($86compare_op.5, _loop_hafnian_subroutines.py:167),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:03,382 on stmt: branch $88pred, 90, 124
DEBUG 2022-02-14 16:38:03,382 ==== SSA block rewrite pass on 90
DEBUG 2022-02-14 16:38:03,382 Running <numba.core.ssa._FreshVarHandler object at 0x7fa04711c6a0>
DEBUG 2022-02-14 16:38:03,382 on stmt: $92load_method.2 = getattr(value=E_k, attr=sum)
DEBUG 2022-02-14 16:38:03,382 on stmt: $94call_method.3 = call $92load_method.2(func=$92load_method.2, args=[], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:03,382 on stmt: $98binary_true_divide.5 = $94call_method.3 / i
DEBUG 2022-02-14 16:38:03,382 on stmt: $104binary_matrix_multiply.8 = XD_S <built-in function matmul> D_S
DEBUG 2022-02-14 16:38:03,382 on stmt: $const106.9 = const(int, 2)
DEBUG 2022-02-14 16:38:03,382 on stmt: $108binary_true_divide.10 = $104binary_matrix_multiply.8 / $const106.9
DEBUG 2022-02-14 16:38:03,382 on stmt: factor = $98binary_true_divide.5 + $108binary_true_divide.10
DEBUG 2022-02-14 16:38:03,382 replaced with: factor.1 = $98binary_true_divide.5 + $108binary_true_divide.10
DEBUG 2022-02-14 16:38:03,383 on stmt: $118inplace_multiply.14 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=E_k, rhs=E, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:38:03,383 on stmt: E_k = $118inplace_multiply.14
DEBUG 2022-02-14 16:38:03,383 on stmt: jump 140
DEBUG 2022-02-14 16:38:03,383 ==== SSA block rewrite pass on 124
DEBUG 2022-02-14 16:38:03,383 Running <numba.core.ssa._FreshVarHandler object at 0x7fa04711c6a0>
DEBUG 2022-02-14 16:38:03,383 on stmt: factor = oddVX_S <built-in function matmul> D_S
DEBUG 2022-02-14 16:38:03,383 replaced with: factor.2 = oddVX_S <built-in function matmul> D_S
DEBUG 2022-02-14 16:38:03,383 on stmt: $136binary_matrix_multiply.6 = AX_S <built-in function matmul> D_S
DEBUG 2022-02-14 16:38:03,383 on stmt: D_S = $136binary_matrix_multiply.6
DEBUG 2022-02-14 16:38:03,383 on stmt: jump 140
DEBUG 2022-02-14 16:38:03,383 ==== SSA block rewrite pass on 140
DEBUG 2022-02-14 16:38:03,383 Running <numba.core.ssa._FreshVarHandler object at 0x7fa04711c6a0>
DEBUG 2022-02-14 16:38:03,383 on stmt: powfactor = const(int, 1)
DEBUG 2022-02-14 16:38:03,383 on stmt: $const144.2 = const(int, 1)
DEBUG 2022-02-14 16:38:03,383 on stmt: $148binary_subtract.4 = $const144.2 - count
DEBUG 2022-02-14 16:38:03,383 on stmt: count = $148binary_subtract.4
DEBUG 2022-02-14 16:38:03,383 on stmt: $const154.6 = const(int, 1)
DEBUG 2022-02-14 16:38:03,383 on stmt: $158binary_subtract.8 = $const154.6 - count
DEBUG 2022-02-14 16:38:03,383 on stmt: $const160.9 = const(NoneType, None)
DEBUG 2022-02-14 16:38:03,383 on stmt: $const162.10 = const(NoneType, None)
DEBUG 2022-02-14 16:38:03,383 on stmt: $164build_slice.11 = global(slice: <class 'slice'>)
DEBUG 2022-02-14 16:38:03,383 on stmt: $164build_slice.12 = call $164build_slice.11($const160.9, $const162.10, func=$164build_slice.11, args=(Var($const160.9, _loop_hafnian_subroutines.py:176), Var($const162.10, _loop_hafnian_subroutines.py:176)), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:03,384 on stmt: $166build_tuple.13 = build_tuple(items=[Var($158binary_subtract.8, _loop_hafnian_subroutines.py:176), Var($164build_slice.12, _loop_hafnian_subroutines.py:176)])
DEBUG 2022-02-14 16:38:03,384 on stmt: $168binary_subscr.14 = getitem(value=comb, index=$166build_tuple.13, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:03,384 on stmt: $const174.17 = const(NoneType, None)
DEBUG 2022-02-14 16:38:03,384 on stmt: $const176.18 = const(NoneType, None)
DEBUG 2022-02-14 16:38:03,384 on stmt: $178build_slice.19 = global(slice: <class 'slice'>)
DEBUG 2022-02-14 16:38:03,384 on stmt: $178build_slice.20 = call $178build_slice.19($const174.17, $const176.18, func=$178build_slice.19, args=(Var($const174.17, _loop_hafnian_subroutines.py:176), Var($const176.18, _loop_hafnian_subroutines.py:176)), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:03,384 on stmt: $180build_tuple.21 = build_tuple(items=[Var(count, _loop_hafnian_subroutines.py:161), Var($178build_slice.20, _loop_hafnian_subroutines.py:176)])
DEBUG 2022-02-14 16:38:03,384 on stmt: comb[$180build_tuple.21] = $168binary_subscr.14
DEBUG 2022-02-14 16:38:03,384 on stmt: $184load_global.22 = global(range: <class 'range'>)
DEBUG 2022-02-14 16:38:03,384 on stmt: $const186.23 = const(int, 1)
DEBUG 2022-02-14 16:38:03,384 on stmt: $192binary_floor_divide.26 = n // i
DEBUG 2022-02-14 16:38:03,384 on stmt: $const194.27 = const(int, 1)
DEBUG 2022-02-14 16:38:03,384 on stmt: $196binary_add.28 = $192binary_floor_divide.26 + $const194.27
DEBUG 2022-02-14 16:38:03,384 on stmt: $198call_function.29 = call $184load_global.22($const186.23, $196binary_add.28, func=$184load_global.22, args=[Var($const186.23, _loop_hafnian_subroutines.py:177), Var($196binary_add.28, _loop_hafnian_subroutines.py:177)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:03,384 on stmt: $200get_iter.30 = getiter(value=$198call_function.29)
DEBUG 2022-02-14 16:38:03,384 on stmt: $phi202.1 = $200get_iter.30
DEBUG 2022-02-14 16:38:03,384 on stmt: jump 202
DEBUG 2022-02-14 16:38:03,384 ==== SSA block rewrite pass on 202
DEBUG 2022-02-14 16:38:03,384 Running <numba.core.ssa._FreshVarHandler object at 0x7fa04711c6a0>
DEBUG 2022-02-14 16:38:03,384 on stmt: $202for_iter.2 = iternext(value=$phi202.1)
DEBUG 2022-02-14 16:38:03,385 on stmt: $202for_iter.3 = pair_first(value=$202for_iter.2)
DEBUG 2022-02-14 16:38:03,385 on stmt: $202for_iter.4 = pair_second(value=$202for_iter.2)
DEBUG 2022-02-14 16:38:03,385 on stmt: $phi204.2 = $202for_iter.3
DEBUG 2022-02-14 16:38:03,385 on stmt: branch $202for_iter.4, 204, 300
DEBUG 2022-02-14 16:38:03,385 ==== SSA block rewrite pass on 204
DEBUG 2022-02-14 16:38:03,385 Running <numba.core.ssa._FreshVarHandler object at 0x7fa04711c6a0>
DEBUG 2022-02-14 16:38:03,385 on stmt: j = $phi204.2
DEBUG 2022-02-14 16:38:03,385 on stmt: $212binary_true_divide.6 = factor / j
DEBUG 2022-02-14 16:38:03,385 on stmt: $214inplace_multiply.7 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=powfactor, rhs=$212binary_true_divide.6, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:38:03,385 on stmt: powfactor = $214inplace_multiply.7
DEBUG 2022-02-14 16:38:03,385 on stmt: $218load_global.8 = global(range: <class 'range'>)
DEBUG 2022-02-14 16:38:03,385 on stmt: $224binary_multiply.11 = i * j
DEBUG 2022-02-14 16:38:03,385 on stmt: $const226.12 = const(int, 1)
DEBUG 2022-02-14 16:38:03,385 on stmt: $228binary_add.13 = $224binary_multiply.11 + $const226.12
DEBUG 2022-02-14 16:38:03,385 on stmt: $const232.15 = const(int, 2)
DEBUG 2022-02-14 16:38:03,385 on stmt: $234binary_add.16 = n + $const232.15
DEBUG 2022-02-14 16:38:03,385 on stmt: $236call_function.17 = call $218load_global.8($228binary_add.13, $234binary_add.16, func=$218load_global.8, args=[Var($228binary_add.13, _loop_hafnian_subroutines.py:179), Var($234binary_add.16, _loop_hafnian_subroutines.py:179)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:03,385 on stmt: $238get_iter.18 = getiter(value=$236call_function.17)
DEBUG 2022-02-14 16:38:03,385 on stmt: $phi240.2 = $238get_iter.18
DEBUG 2022-02-14 16:38:03,385 on stmt: jump 240
DEBUG 2022-02-14 16:38:03,385 ==== SSA block rewrite pass on 240
DEBUG 2022-02-14 16:38:03,386 Running <numba.core.ssa._FreshVarHandler object at 0x7fa04711c6a0>
DEBUG 2022-02-14 16:38:03,386 on stmt: $240for_iter.3 = iternext(value=$phi240.2)
DEBUG 2022-02-14 16:38:03,386 on stmt: $240for_iter.4 = pair_first(value=$240for_iter.3)
DEBUG 2022-02-14 16:38:03,386 on stmt: $240for_iter.5 = pair_second(value=$240for_iter.3)
DEBUG 2022-02-14 16:38:03,386 on stmt: $phi242.3 = $240for_iter.4
DEBUG 2022-02-14 16:38:03,386 on stmt: branch $240for_iter.5, 242, 298
DEBUG 2022-02-14 16:38:03,386 ==== SSA block rewrite pass on 242
DEBUG 2022-02-14 16:38:03,386 Running <numba.core.ssa._FreshVarHandler object at 0x7fa04711c6a0>
DEBUG 2022-02-14 16:38:03,386 on stmt: k = $phi242.3
DEBUG 2022-02-14 16:38:03,386 on stmt: $const250.7 = const(int, 1)
DEBUG 2022-02-14 16:38:03,386 on stmt: $252binary_subtract.8 = k - $const250.7
DEBUG 2022-02-14 16:38:03,386 on stmt: $254build_tuple.9 = build_tuple(items=[Var(count, _loop_hafnian_subroutines.py:161), Var($252binary_subtract.8, _loop_hafnian_subroutines.py:180)])
DEBUG 2022-02-14 16:38:03,386 on stmt: $258binary_subscr.12 = getitem(value=comb, index=$254build_tuple.9, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:03,386 on stmt: $const262.14 = const(int, 1)
DEBUG 2022-02-14 16:38:03,386 on stmt: $266binary_subtract.16 = $const262.14 - count
DEBUG 2022-02-14 16:38:03,386 on stmt: $274binary_multiply.20 = i * j
DEBUG 2022-02-14 16:38:03,386 on stmt: $276binary_subtract.21 = k - $274binary_multiply.20
DEBUG 2022-02-14 16:38:03,386 on stmt: $const278.22 = const(int, 1)
DEBUG 2022-02-14 16:38:03,386 on stmt: $280binary_subtract.23 = $276binary_subtract.21 - $const278.22
DEBUG 2022-02-14 16:38:03,386 on stmt: $282build_tuple.24 = build_tuple(items=[Var($266binary_subtract.16, _loop_hafnian_subroutines.py:180), Var($280binary_subtract.23, _loop_hafnian_subroutines.py:180)])
DEBUG 2022-02-14 16:38:03,386 on stmt: $284binary_subscr.25 = getitem(value=comb, index=$282build_tuple.24, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:03,387 on stmt: $288binary_multiply.27 = $284binary_subscr.25 * powfactor
DEBUG 2022-02-14 16:38:03,387 on stmt: $290inplace_add.28 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$258binary_subscr.12, rhs=$288binary_multiply.27, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:38:03,387 on stmt: comb[$254build_tuple.9] = $290inplace_add.28
DEBUG 2022-02-14 16:38:03,387 on stmt: jump 240
DEBUG 2022-02-14 16:38:03,387 ==== SSA block rewrite pass on 298
DEBUG 2022-02-14 16:38:03,387 Running <numba.core.ssa._FreshVarHandler object at 0x7fa04711c6a0>
DEBUG 2022-02-14 16:38:03,387 on stmt: jump 202
DEBUG 2022-02-14 16:38:03,387 ==== SSA block rewrite pass on 300
DEBUG 2022-02-14 16:38:03,387 Running <numba.core.ssa._FreshVarHandler object at 0x7fa04711c6a0>
DEBUG 2022-02-14 16:38:03,387 on stmt: jump 60
DEBUG 2022-02-14 16:38:03,387 ==== SSA block rewrite pass on 302
DEBUG 2022-02-14 16:38:03,387 Running <numba.core.ssa._FreshVarHandler object at 0x7fa04711c6a0>
DEBUG 2022-02-14 16:38:03,387 on stmt: $const306.2 = const(NoneType, None)
DEBUG 2022-02-14 16:38:03,387 on stmt: $const308.3 = const(NoneType, None)
DEBUG 2022-02-14 16:38:03,387 on stmt: $310build_slice.4 = global(slice: <class 'slice'>)
DEBUG 2022-02-14 16:38:03,387 on stmt: $310build_slice.5 = call $310build_slice.4($const306.2, $const308.3, func=$310build_slice.4, args=(Var($const306.2, _loop_hafnian_subroutines.py:182), Var($const308.3, _loop_hafnian_subroutines.py:182)), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:03,387 on stmt: $312build_tuple.6 = build_tuple(items=[Var(count, _loop_hafnian_subroutines.py:161), Var($310build_slice.5, _loop_hafnian_subroutines.py:182)])
DEBUG 2022-02-14 16:38:03,387 on stmt: $314binary_subscr.7 = getitem(value=comb, index=$312build_tuple.6, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:03,387 on stmt: $316return_value.8 = cast(value=$314binary_subscr.7)
DEBUG 2022-02-14 16:38:03,387 on stmt: return $316return_value.8
DEBUG 2022-02-14 16:38:03,388 Replaced assignments: defaultdict(<class 'list'>,
            {72: [<numba.core.ir.Assign object at 0x7fa0475fa5e0>],
             90: [<numba.core.ir.Assign object at 0x7fa0475e5940>],
             124: [<numba.core.ir.Assign object at 0x7fa0475e56a0>]})
DEBUG 2022-02-14 16:38:03,388 ==== SSA block rewrite pass on 0
DEBUG 2022-02-14 16:38:03,388 Running <numba.core.ssa._FixSSAVars object at 0x7fa04711c6a0>
DEBUG 2022-02-14 16:38:03,388 on stmt: E = arg(0, name=E)
DEBUG 2022-02-14 16:38:03,388 on stmt: AX_S = arg(1, name=AX_S)
DEBUG 2022-02-14 16:38:03,388 on stmt: XD_S = arg(2, name=XD_S)
DEBUG 2022-02-14 16:38:03,388 on stmt: D_S = arg(3, name=D_S)
DEBUG 2022-02-14 16:38:03,388 on stmt: n = arg(4, name=n)
DEBUG 2022-02-14 16:38:03,388 on stmt: oddloop = arg(5, name=oddloop)
DEBUG 2022-02-14 16:38:03,388 on stmt: oddVX_S = arg(6, name=oddVX_S)
DEBUG 2022-02-14 16:38:03,389 on stmt: $4load_method.1 = getattr(value=E, attr=copy)
DEBUG 2022-02-14 16:38:03,389 on stmt: E_k = call $4load_method.1(func=$4load_method.1, args=[], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:03,389 on stmt: count = const(int, 0)
DEBUG 2022-02-14 16:38:03,389 on stmt: $14load_global.4 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:38:03,389 on stmt: $16load_attr.5 = getattr(value=$14load_global.4, attr=zeros)
DEBUG 2022-02-14 16:38:03,389 on stmt: $const18.6 = const(int, 2)
DEBUG 2022-02-14 16:38:03,389 on stmt: $const22.8 = const(int, 1)
DEBUG 2022-02-14 16:38:03,389 on stmt: $24binary_add.9 = n + $const22.8
DEBUG 2022-02-14 16:38:03,389 on stmt: $26build_tuple.10 = build_tuple(items=[Var($const18.6, _loop_hafnian_subroutines.py:162), Var($24binary_add.9, _loop_hafnian_subroutines.py:162)])
DEBUG 2022-02-14 16:38:03,389 on stmt: $28load_global.11 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:38:03,389 on stmt: $30load_attr.12 = getattr(value=$28load_global.11, attr=complex128)
DEBUG 2022-02-14 16:38:03,389 on stmt: comb = call $16load_attr.5($26build_tuple.10, func=$16load_attr.5, args=[Var($26build_tuple.10, _loop_hafnian_subroutines.py:162)], kws=[('dtype', Var($30load_attr.12, _loop_hafnian_subroutines.py:162))], vararg=None, target=None)
DEBUG 2022-02-14 16:38:03,389 on stmt: $const38.15 = const(int, 1)
DEBUG 2022-02-14 16:38:03,389 on stmt: $const_0 = const(int, 0)
DEBUG 2022-02-14 16:38:03,389 on stmt: $const_0.1 = const(int, 0)
DEBUG 2022-02-14 16:38:03,389 on stmt: $const42.17 = build_tuple(items=[Var($const_0, _loop_hafnian_subroutines.py:163), Var($const_0.1, _loop_hafnian_subroutines.py:163)])
DEBUG 2022-02-14 16:38:03,389 on stmt: comb[(0, 0)] = $const38.15
DEBUG 2022-02-14 16:38:03,390 on stmt: $46load_global.18 = global(range: <class 'range'>)
DEBUG 2022-02-14 16:38:03,390 on stmt: $const48.19 = const(int, 1)
DEBUG 2022-02-14 16:38:03,390 on stmt: $const52.21 = const(int, 1)
DEBUG 2022-02-14 16:38:03,390 on stmt: $54binary_add.22 = n + $const52.21
DEBUG 2022-02-14 16:38:03,390 on stmt: $56call_function.23 = call $46load_global.18($const48.19, $54binary_add.22, func=$46load_global.18, args=[Var($const48.19, _loop_hafnian_subroutines.py:164), Var($54binary_add.22, _loop_hafnian_subroutines.py:164)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:03,390 on stmt: $58get_iter.24 = getiter(value=$56call_function.23)
DEBUG 2022-02-14 16:38:03,390 on stmt: $phi60.0 = $58get_iter.24
DEBUG 2022-02-14 16:38:03,390 on stmt: jump 60
DEBUG 2022-02-14 16:38:03,390 ==== SSA block rewrite pass on 60
DEBUG 2022-02-14 16:38:03,390 Running <numba.core.ssa._FixSSAVars object at 0x7fa04711c6a0>
DEBUG 2022-02-14 16:38:03,390 on stmt: $60for_iter.1 = iternext(value=$phi60.0)
DEBUG 2022-02-14 16:38:03,390 on stmt: $60for_iter.2 = pair_first(value=$60for_iter.1)
DEBUG 2022-02-14 16:38:03,390 on stmt: $60for_iter.3 = pair_second(value=$60for_iter.1)
DEBUG 2022-02-14 16:38:03,390 on stmt: $phi62.1 = $60for_iter.2
DEBUG 2022-02-14 16:38:03,390 on stmt: branch $60for_iter.3, 62, 302
DEBUG 2022-02-14 16:38:03,390 ==== SSA block rewrite pass on 62
DEBUG 2022-02-14 16:38:03,390 Running <numba.core.ssa._FixSSAVars object at 0x7fa04711c6a0>
DEBUG 2022-02-14 16:38:03,390 on stmt: i = $phi62.1
DEBUG 2022-02-14 16:38:03,390 on stmt: $const66.3 = const(int, 1)
DEBUG 2022-02-14 16:38:03,390 on stmt: $68compare_op.4 = i == $const66.3
DEBUG 2022-02-14 16:38:03,390 on stmt: bool70 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:38:03,391 on stmt: $70pred = call bool70($68compare_op.4, func=bool70, args=(Var($68compare_op.4, _loop_hafnian_subroutines.py:165),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:03,391 on stmt: branch $70pred, 72, 78
DEBUG 2022-02-14 16:38:03,391 ==== SSA block rewrite pass on 72
DEBUG 2022-02-14 16:38:03,391 Running <numba.core.ssa._FixSSAVars object at 0x7fa04711c6a0>
DEBUG 2022-02-14 16:38:03,391 on stmt: factor = oddloop
DEBUG 2022-02-14 16:38:03,391 on stmt: jump 140
DEBUG 2022-02-14 16:38:03,391 ==== SSA block rewrite pass on 78
DEBUG 2022-02-14 16:38:03,391 Running <numba.core.ssa._FixSSAVars object at 0x7fa04711c6a0>
DEBUG 2022-02-14 16:38:03,391 on stmt: $const80.2 = const(int, 2)
DEBUG 2022-02-14 16:38:03,391 on stmt: $82binary_modulo.3 = i % $const80.2
DEBUG 2022-02-14 16:38:03,391 on stmt: $const84.4 = const(int, 0)
DEBUG 2022-02-14 16:38:03,391 on stmt: $86compare_op.5 = $82binary_modulo.3 == $const84.4
DEBUG 2022-02-14 16:38:03,391 on stmt: bool88 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:38:03,391 on stmt: $88pred = call bool88($86compare_op.5, func=bool88, args=(Var($86compare_op.5, _loop_hafnian_subroutines.py:167),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:03,391 on stmt: branch $88pred, 90, 124
DEBUG 2022-02-14 16:38:03,391 ==== SSA block rewrite pass on 90
DEBUG 2022-02-14 16:38:03,391 Running <numba.core.ssa._FixSSAVars object at 0x7fa04711c6a0>
DEBUG 2022-02-14 16:38:03,391 on stmt: $92load_method.2 = getattr(value=E_k, attr=sum)
DEBUG 2022-02-14 16:38:03,391 on stmt: $94call_method.3 = call $92load_method.2(func=$92load_method.2, args=[], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:03,391 on stmt: $98binary_true_divide.5 = $94call_method.3 / i
DEBUG 2022-02-14 16:38:03,391 on stmt: $104binary_matrix_multiply.8 = XD_S <built-in function matmul> D_S
DEBUG 2022-02-14 16:38:03,391 on stmt: $const106.9 = const(int, 2)
DEBUG 2022-02-14 16:38:03,391 on stmt: $108binary_true_divide.10 = $104binary_matrix_multiply.8 / $const106.9
DEBUG 2022-02-14 16:38:03,392 on stmt: factor.1 = $98binary_true_divide.5 + $108binary_true_divide.10
DEBUG 2022-02-14 16:38:03,392 on stmt: $118inplace_multiply.14 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=E_k, rhs=E, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:38:03,392 on stmt: E_k = $118inplace_multiply.14
DEBUG 2022-02-14 16:38:03,392 on stmt: jump 140
DEBUG 2022-02-14 16:38:03,392 ==== SSA block rewrite pass on 124
DEBUG 2022-02-14 16:38:03,392 Running <numba.core.ssa._FixSSAVars object at 0x7fa04711c6a0>
DEBUG 2022-02-14 16:38:03,392 on stmt: factor.2 = oddVX_S <built-in function matmul> D_S
DEBUG 2022-02-14 16:38:03,392 on stmt: $136binary_matrix_multiply.6 = AX_S <built-in function matmul> D_S
DEBUG 2022-02-14 16:38:03,392 on stmt: D_S = $136binary_matrix_multiply.6
DEBUG 2022-02-14 16:38:03,392 on stmt: jump 140
DEBUG 2022-02-14 16:38:03,392 ==== SSA block rewrite pass on 140
DEBUG 2022-02-14 16:38:03,392 Running <numba.core.ssa._FixSSAVars object at 0x7fa04711c6a0>
DEBUG 2022-02-14 16:38:03,392 on stmt: powfactor = const(int, 1)
DEBUG 2022-02-14 16:38:03,392 on stmt: $const144.2 = const(int, 1)
DEBUG 2022-02-14 16:38:03,392 on stmt: $148binary_subtract.4 = $const144.2 - count
DEBUG 2022-02-14 16:38:03,392 on stmt: count = $148binary_subtract.4
DEBUG 2022-02-14 16:38:03,392 on stmt: $const154.6 = const(int, 1)
DEBUG 2022-02-14 16:38:03,392 on stmt: $158binary_subtract.8 = $const154.6 - count
DEBUG 2022-02-14 16:38:03,392 on stmt: $const160.9 = const(NoneType, None)
DEBUG 2022-02-14 16:38:03,393 on stmt: $const162.10 = const(NoneType, None)
DEBUG 2022-02-14 16:38:03,393 on stmt: $164build_slice.11 = global(slice: <class 'slice'>)
DEBUG 2022-02-14 16:38:03,393 on stmt: $164build_slice.12 = call $164build_slice.11($const160.9, $const162.10, func=$164build_slice.11, args=(Var($const160.9, _loop_hafnian_subroutines.py:176), Var($const162.10, _loop_hafnian_subroutines.py:176)), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:03,393 on stmt: $166build_tuple.13 = build_tuple(items=[Var($158binary_subtract.8, _loop_hafnian_subroutines.py:176), Var($164build_slice.12, _loop_hafnian_subroutines.py:176)])
DEBUG 2022-02-14 16:38:03,393 on stmt: $168binary_subscr.14 = getitem(value=comb, index=$166build_tuple.13, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:03,393 on stmt: $const174.17 = const(NoneType, None)
DEBUG 2022-02-14 16:38:03,393 on stmt: $const176.18 = const(NoneType, None)
DEBUG 2022-02-14 16:38:03,393 on stmt: $178build_slice.19 = global(slice: <class 'slice'>)
DEBUG 2022-02-14 16:38:03,393 on stmt: $178build_slice.20 = call $178build_slice.19($const174.17, $const176.18, func=$178build_slice.19, args=(Var($const174.17, _loop_hafnian_subroutines.py:176), Var($const176.18, _loop_hafnian_subroutines.py:176)), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:03,393 on stmt: $180build_tuple.21 = build_tuple(items=[Var(count, _loop_hafnian_subroutines.py:161), Var($178build_slice.20, _loop_hafnian_subroutines.py:176)])
DEBUG 2022-02-14 16:38:03,393 on stmt: comb[$180build_tuple.21] = $168binary_subscr.14
DEBUG 2022-02-14 16:38:03,393 on stmt: $184load_global.22 = global(range: <class 'range'>)
DEBUG 2022-02-14 16:38:03,393 on stmt: $const186.23 = const(int, 1)
DEBUG 2022-02-14 16:38:03,393 on stmt: $192binary_floor_divide.26 = n // i
DEBUG 2022-02-14 16:38:03,393 on stmt: $const194.27 = const(int, 1)
DEBUG 2022-02-14 16:38:03,393 on stmt: $196binary_add.28 = $192binary_floor_divide.26 + $const194.27
DEBUG 2022-02-14 16:38:03,393 on stmt: $198call_function.29 = call $184load_global.22($const186.23, $196binary_add.28, func=$184load_global.22, args=[Var($const186.23, _loop_hafnian_subroutines.py:177), Var($196binary_add.28, _loop_hafnian_subroutines.py:177)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:03,394 on stmt: $200get_iter.30 = getiter(value=$198call_function.29)
DEBUG 2022-02-14 16:38:03,394 on stmt: $phi202.1 = $200get_iter.30
DEBUG 2022-02-14 16:38:03,394 on stmt: jump 202
DEBUG 2022-02-14 16:38:03,394 ==== SSA block rewrite pass on 202
DEBUG 2022-02-14 16:38:03,394 Running <numba.core.ssa._FixSSAVars object at 0x7fa04711c6a0>
DEBUG 2022-02-14 16:38:03,394 on stmt: $202for_iter.2 = iternext(value=$phi202.1)
DEBUG 2022-02-14 16:38:03,394 on stmt: $202for_iter.3 = pair_first(value=$202for_iter.2)
DEBUG 2022-02-14 16:38:03,394 on stmt: $202for_iter.4 = pair_second(value=$202for_iter.2)
DEBUG 2022-02-14 16:38:03,394 on stmt: $phi204.2 = $202for_iter.3
DEBUG 2022-02-14 16:38:03,394 on stmt: branch $202for_iter.4, 204, 300
DEBUG 2022-02-14 16:38:03,394 ==== SSA block rewrite pass on 204
DEBUG 2022-02-14 16:38:03,394 Running <numba.core.ssa._FixSSAVars object at 0x7fa04711c6a0>
DEBUG 2022-02-14 16:38:03,394 on stmt: j = $phi204.2
DEBUG 2022-02-14 16:38:03,394 on stmt: $212binary_true_divide.6 = factor / j
DEBUG 2022-02-14 16:38:03,394 find_def var='factor' stmt=$212binary_true_divide.6 = factor / j
DEBUG 2022-02-14 16:38:03,394 find_def_from_top label 204
DEBUG 2022-02-14 16:38:03,394 idom 202 from label 204
DEBUG 2022-02-14 16:38:03,394 find_def_from_bottom label 202
DEBUG 2022-02-14 16:38:03,394 find_def_from_top label 202
DEBUG 2022-02-14 16:38:03,395 idom 140 from label 202
DEBUG 2022-02-14 16:38:03,395 find_def_from_bottom label 140
DEBUG 2022-02-14 16:38:03,395 find_def_from_top label 140
DEBUG 2022-02-14 16:38:03,395 insert phi node factor.3 = phi(incoming_values=[], incoming_blocks=[]) at 140
DEBUG 2022-02-14 16:38:03,395 find_def_from_bottom label 72
DEBUG 2022-02-14 16:38:03,395 incoming_def factor = oddloop
DEBUG 2022-02-14 16:38:03,395 find_def_from_bottom label 90
DEBUG 2022-02-14 16:38:03,395 incoming_def factor.1 = $98binary_true_divide.5 + $108binary_true_divide.10
DEBUG 2022-02-14 16:38:03,395 find_def_from_bottom label 124
DEBUG 2022-02-14 16:38:03,395 incoming_def factor.2 = oddVX_S <built-in function matmul> D_S
DEBUG 2022-02-14 16:38:03,395 replaced with: $212binary_true_divide.6 = factor.3 / j
DEBUG 2022-02-14 16:38:03,395 on stmt: $214inplace_multiply.7 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=powfactor, rhs=$212binary_true_divide.6, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:38:03,395 on stmt: powfactor = $214inplace_multiply.7
DEBUG 2022-02-14 16:38:03,395 on stmt: $218load_global.8 = global(range: <class 'range'>)
DEBUG 2022-02-14 16:38:03,395 on stmt: $224binary_multiply.11 = i * j
DEBUG 2022-02-14 16:38:03,395 on stmt: $const226.12 = const(int, 1)
DEBUG 2022-02-14 16:38:03,395 on stmt: $228binary_add.13 = $224binary_multiply.11 + $const226.12
DEBUG 2022-02-14 16:38:03,395 on stmt: $const232.15 = const(int, 2)
DEBUG 2022-02-14 16:38:03,395 on stmt: $234binary_add.16 = n + $const232.15
DEBUG 2022-02-14 16:38:03,396 on stmt: $236call_function.17 = call $218load_global.8($228binary_add.13, $234binary_add.16, func=$218load_global.8, args=[Var($228binary_add.13, _loop_hafnian_subroutines.py:179), Var($234binary_add.16, _loop_hafnian_subroutines.py:179)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:03,396 on stmt: $238get_iter.18 = getiter(value=$236call_function.17)
DEBUG 2022-02-14 16:38:03,396 on stmt: $phi240.2 = $238get_iter.18
DEBUG 2022-02-14 16:38:03,396 on stmt: jump 240
DEBUG 2022-02-14 16:38:03,396 ==== SSA block rewrite pass on 240
DEBUG 2022-02-14 16:38:03,396 Running <numba.core.ssa._FixSSAVars object at 0x7fa04711c6a0>
DEBUG 2022-02-14 16:38:03,396 on stmt: $240for_iter.3 = iternext(value=$phi240.2)
DEBUG 2022-02-14 16:38:03,396 on stmt: $240for_iter.4 = pair_first(value=$240for_iter.3)
DEBUG 2022-02-14 16:38:03,396 on stmt: $240for_iter.5 = pair_second(value=$240for_iter.3)
DEBUG 2022-02-14 16:38:03,396 on stmt: $phi242.3 = $240for_iter.4
DEBUG 2022-02-14 16:38:03,396 on stmt: branch $240for_iter.5, 242, 298
DEBUG 2022-02-14 16:38:03,396 ==== SSA block rewrite pass on 242
DEBUG 2022-02-14 16:38:03,396 Running <numba.core.ssa._FixSSAVars object at 0x7fa04711c6a0>
DEBUG 2022-02-14 16:38:03,396 on stmt: k = $phi242.3
DEBUG 2022-02-14 16:38:03,396 on stmt: $const250.7 = const(int, 1)
DEBUG 2022-02-14 16:38:03,396 on stmt: $252binary_subtract.8 = k - $const250.7
DEBUG 2022-02-14 16:38:03,396 on stmt: $254build_tuple.9 = build_tuple(items=[Var(count, _loop_hafnian_subroutines.py:161), Var($252binary_subtract.8, _loop_hafnian_subroutines.py:180)])
DEBUG 2022-02-14 16:38:03,396 on stmt: $258binary_subscr.12 = getitem(value=comb, index=$254build_tuple.9, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:03,396 on stmt: $const262.14 = const(int, 1)
DEBUG 2022-02-14 16:38:03,397 on stmt: $266binary_subtract.16 = $const262.14 - count
DEBUG 2022-02-14 16:38:03,397 on stmt: $274binary_multiply.20 = i * j
DEBUG 2022-02-14 16:38:03,397 on stmt: $276binary_subtract.21 = k - $274binary_multiply.20
DEBUG 2022-02-14 16:38:03,397 on stmt: $const278.22 = const(int, 1)
DEBUG 2022-02-14 16:38:03,397 on stmt: $280binary_subtract.23 = $276binary_subtract.21 - $const278.22
DEBUG 2022-02-14 16:38:03,397 on stmt: $282build_tuple.24 = build_tuple(items=[Var($266binary_subtract.16, _loop_hafnian_subroutines.py:180), Var($280binary_subtract.23, _loop_hafnian_subroutines.py:180)])
DEBUG 2022-02-14 16:38:03,397 on stmt: $284binary_subscr.25 = getitem(value=comb, index=$282build_tuple.24, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:03,397 on stmt: $288binary_multiply.27 = $284binary_subscr.25 * powfactor
DEBUG 2022-02-14 16:38:03,397 on stmt: $290inplace_add.28 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$258binary_subscr.12, rhs=$288binary_multiply.27, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:38:03,397 on stmt: comb[$254build_tuple.9] = $290inplace_add.28
DEBUG 2022-02-14 16:38:03,397 on stmt: jump 240
DEBUG 2022-02-14 16:38:03,397 ==== SSA block rewrite pass on 298
DEBUG 2022-02-14 16:38:03,397 Running <numba.core.ssa._FixSSAVars object at 0x7fa04711c6a0>
DEBUG 2022-02-14 16:38:03,397 on stmt: jump 202
DEBUG 2022-02-14 16:38:03,397 ==== SSA block rewrite pass on 300
DEBUG 2022-02-14 16:38:03,397 Running <numba.core.ssa._FixSSAVars object at 0x7fa04711c6a0>
DEBUG 2022-02-14 16:38:03,397 on stmt: jump 60
DEBUG 2022-02-14 16:38:03,397 ==== SSA block rewrite pass on 302
DEBUG 2022-02-14 16:38:03,397 Running <numba.core.ssa._FixSSAVars object at 0x7fa04711c6a0>
DEBUG 2022-02-14 16:38:03,397 on stmt: $const306.2 = const(NoneType, None)
DEBUG 2022-02-14 16:38:03,398 on stmt: $const308.3 = const(NoneType, None)
DEBUG 2022-02-14 16:38:03,398 on stmt: $310build_slice.4 = global(slice: <class 'slice'>)
DEBUG 2022-02-14 16:38:03,398 on stmt: $310build_slice.5 = call $310build_slice.4($const306.2, $const308.3, func=$310build_slice.4, args=(Var($const306.2, _loop_hafnian_subroutines.py:182), Var($const308.3, _loop_hafnian_subroutines.py:182)), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:03,398 on stmt: $312build_tuple.6 = build_tuple(items=[Var(count, _loop_hafnian_subroutines.py:161), Var($310build_slice.5, _loop_hafnian_subroutines.py:182)])
DEBUG 2022-02-14 16:38:03,398 on stmt: $314binary_subscr.7 = getitem(value=comb, index=$312build_tuple.6, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:03,398 on stmt: $316return_value.8 = cast(value=$314binary_subscr.7)
DEBUG 2022-02-14 16:38:03,398 on stmt: return $316return_value.8
DEBUG 2022-02-14 16:38:03,398 Fix SSA violator on var powfactor
DEBUG 2022-02-14 16:38:03,398 ==== SSA block rewrite pass on 0
DEBUG 2022-02-14 16:38:03,398 Running <numba.core.ssa._FreshVarHandler object at 0x7fa0475fa250>
DEBUG 2022-02-14 16:38:03,398 on stmt: E = arg(0, name=E)
DEBUG 2022-02-14 16:38:03,398 on stmt: AX_S = arg(1, name=AX_S)
DEBUG 2022-02-14 16:38:03,398 on stmt: XD_S = arg(2, name=XD_S)
DEBUG 2022-02-14 16:38:03,398 on stmt: D_S = arg(3, name=D_S)
DEBUG 2022-02-14 16:38:03,398 on stmt: n = arg(4, name=n)
DEBUG 2022-02-14 16:38:03,398 on stmt: oddloop = arg(5, name=oddloop)
DEBUG 2022-02-14 16:38:03,398 on stmt: oddVX_S = arg(6, name=oddVX_S)
DEBUG 2022-02-14 16:38:03,398 on stmt: $4load_method.1 = getattr(value=E, attr=copy)
DEBUG 2022-02-14 16:38:03,398 on stmt: E_k = call $4load_method.1(func=$4load_method.1, args=[], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:03,399 on stmt: count = const(int, 0)
DEBUG 2022-02-14 16:38:03,399 on stmt: $14load_global.4 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:38:03,399 on stmt: $16load_attr.5 = getattr(value=$14load_global.4, attr=zeros)
DEBUG 2022-02-14 16:38:03,399 on stmt: $const18.6 = const(int, 2)
DEBUG 2022-02-14 16:38:03,399 on stmt: $const22.8 = const(int, 1)
DEBUG 2022-02-14 16:38:03,399 on stmt: $24binary_add.9 = n + $const22.8
DEBUG 2022-02-14 16:38:03,399 on stmt: $26build_tuple.10 = build_tuple(items=[Var($const18.6, _loop_hafnian_subroutines.py:162), Var($24binary_add.9, _loop_hafnian_subroutines.py:162)])
DEBUG 2022-02-14 16:38:03,399 on stmt: $28load_global.11 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:38:03,399 on stmt: $30load_attr.12 = getattr(value=$28load_global.11, attr=complex128)
DEBUG 2022-02-14 16:38:03,399 on stmt: comb = call $16load_attr.5($26build_tuple.10, func=$16load_attr.5, args=[Var($26build_tuple.10, _loop_hafnian_subroutines.py:162)], kws=[('dtype', Var($30load_attr.12, _loop_hafnian_subroutines.py:162))], vararg=None, target=None)
DEBUG 2022-02-14 16:38:03,399 on stmt: $const38.15 = const(int, 1)
DEBUG 2022-02-14 16:38:03,399 on stmt: $const_0 = const(int, 0)
DEBUG 2022-02-14 16:38:03,399 on stmt: $const_0.1 = const(int, 0)
DEBUG 2022-02-14 16:38:03,399 on stmt: $const42.17 = build_tuple(items=[Var($const_0, _loop_hafnian_subroutines.py:163), Var($const_0.1, _loop_hafnian_subroutines.py:163)])
DEBUG 2022-02-14 16:38:03,399 on stmt: comb[(0, 0)] = $const38.15
DEBUG 2022-02-14 16:38:03,399 on stmt: $46load_global.18 = global(range: <class 'range'>)
DEBUG 2022-02-14 16:38:03,399 on stmt: $const48.19 = const(int, 1)
DEBUG 2022-02-14 16:38:03,399 on stmt: $const52.21 = const(int, 1)
DEBUG 2022-02-14 16:38:03,399 on stmt: $54binary_add.22 = n + $const52.21
DEBUG 2022-02-14 16:38:03,399 on stmt: $56call_function.23 = call $46load_global.18($const48.19, $54binary_add.22, func=$46load_global.18, args=[Var($const48.19, _loop_hafnian_subroutines.py:164), Var($54binary_add.22, _loop_hafnian_subroutines.py:164)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:03,400 on stmt: $58get_iter.24 = getiter(value=$56call_function.23)
DEBUG 2022-02-14 16:38:03,400 on stmt: $phi60.0 = $58get_iter.24
DEBUG 2022-02-14 16:38:03,400 on stmt: jump 60
DEBUG 2022-02-14 16:38:03,400 ==== SSA block rewrite pass on 60
DEBUG 2022-02-14 16:38:03,400 Running <numba.core.ssa._FreshVarHandler object at 0x7fa0475fa250>
DEBUG 2022-02-14 16:38:03,400 on stmt: $60for_iter.1 = iternext(value=$phi60.0)
DEBUG 2022-02-14 16:38:03,400 on stmt: $60for_iter.2 = pair_first(value=$60for_iter.1)
DEBUG 2022-02-14 16:38:03,400 on stmt: $60for_iter.3 = pair_second(value=$60for_iter.1)
DEBUG 2022-02-14 16:38:03,400 on stmt: $phi62.1 = $60for_iter.2
DEBUG 2022-02-14 16:38:03,400 on stmt: branch $60for_iter.3, 62, 302
DEBUG 2022-02-14 16:38:03,400 ==== SSA block rewrite pass on 62
DEBUG 2022-02-14 16:38:03,400 Running <numba.core.ssa._FreshVarHandler object at 0x7fa0475fa250>
DEBUG 2022-02-14 16:38:03,400 on stmt: i = $phi62.1
DEBUG 2022-02-14 16:38:03,400 on stmt: $const66.3 = const(int, 1)
DEBUG 2022-02-14 16:38:03,400 on stmt: $68compare_op.4 = i == $const66.3
DEBUG 2022-02-14 16:38:03,400 on stmt: bool70 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:38:03,400 on stmt: $70pred = call bool70($68compare_op.4, func=bool70, args=(Var($68compare_op.4, _loop_hafnian_subroutines.py:165),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:03,400 on stmt: branch $70pred, 72, 78
DEBUG 2022-02-14 16:38:03,400 ==== SSA block rewrite pass on 72
DEBUG 2022-02-14 16:38:03,400 Running <numba.core.ssa._FreshVarHandler object at 0x7fa0475fa250>
DEBUG 2022-02-14 16:38:03,400 on stmt: factor = oddloop
DEBUG 2022-02-14 16:38:03,400 on stmt: jump 140
DEBUG 2022-02-14 16:38:03,400 ==== SSA block rewrite pass on 78
DEBUG 2022-02-14 16:38:03,401 Running <numba.core.ssa._FreshVarHandler object at 0x7fa0475fa250>
DEBUG 2022-02-14 16:38:03,401 on stmt: $const80.2 = const(int, 2)
DEBUG 2022-02-14 16:38:03,401 on stmt: $82binary_modulo.3 = i % $const80.2
DEBUG 2022-02-14 16:38:03,401 on stmt: $const84.4 = const(int, 0)
DEBUG 2022-02-14 16:38:03,401 on stmt: $86compare_op.5 = $82binary_modulo.3 == $const84.4
DEBUG 2022-02-14 16:38:03,401 on stmt: bool88 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:38:03,401 on stmt: $88pred = call bool88($86compare_op.5, func=bool88, args=(Var($86compare_op.5, _loop_hafnian_subroutines.py:167),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:03,401 on stmt: branch $88pred, 90, 124
DEBUG 2022-02-14 16:38:03,401 ==== SSA block rewrite pass on 90
DEBUG 2022-02-14 16:38:03,401 Running <numba.core.ssa._FreshVarHandler object at 0x7fa0475fa250>
DEBUG 2022-02-14 16:38:03,401 on stmt: $92load_method.2 = getattr(value=E_k, attr=sum)
DEBUG 2022-02-14 16:38:03,401 on stmt: $94call_method.3 = call $92load_method.2(func=$92load_method.2, args=[], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:03,401 on stmt: $98binary_true_divide.5 = $94call_method.3 / i
DEBUG 2022-02-14 16:38:03,401 on stmt: $104binary_matrix_multiply.8 = XD_S <built-in function matmul> D_S
DEBUG 2022-02-14 16:38:03,401 on stmt: $const106.9 = const(int, 2)
DEBUG 2022-02-14 16:38:03,401 on stmt: $108binary_true_divide.10 = $104binary_matrix_multiply.8 / $const106.9
DEBUG 2022-02-14 16:38:03,401 on stmt: factor.1 = $98binary_true_divide.5 + $108binary_true_divide.10
DEBUG 2022-02-14 16:38:03,401 on stmt: $118inplace_multiply.14 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=E_k, rhs=E, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:38:03,401 on stmt: E_k = $118inplace_multiply.14
DEBUG 2022-02-14 16:38:03,402 on stmt: jump 140
DEBUG 2022-02-14 16:38:03,402 ==== SSA block rewrite pass on 124
DEBUG 2022-02-14 16:38:03,402 Running <numba.core.ssa._FreshVarHandler object at 0x7fa0475fa250>
DEBUG 2022-02-14 16:38:03,402 on stmt: factor.2 = oddVX_S <built-in function matmul> D_S
DEBUG 2022-02-14 16:38:03,402 on stmt: $136binary_matrix_multiply.6 = AX_S <built-in function matmul> D_S
DEBUG 2022-02-14 16:38:03,402 on stmt: D_S = $136binary_matrix_multiply.6
DEBUG 2022-02-14 16:38:03,402 on stmt: jump 140
DEBUG 2022-02-14 16:38:03,402 ==== SSA block rewrite pass on 140
DEBUG 2022-02-14 16:38:03,402 Running <numba.core.ssa._FreshVarHandler object at 0x7fa0475fa250>
DEBUG 2022-02-14 16:38:03,402 on stmt: factor.3 = phi(incoming_values=[Var(factor, _loop_hafnian_subroutines.py:166), Var(factor.1, _loop_hafnian_subroutines.py:168), Var(factor.2, _loop_hafnian_subroutines.py:171)], incoming_blocks=[72, 90, 124])
DEBUG 2022-02-14 16:38:03,402 on stmt: powfactor = const(int, 1)
DEBUG 2022-02-14 16:38:03,402 first assign: powfactor
DEBUG 2022-02-14 16:38:03,402 replaced with: powfactor = const(int, 1)
DEBUG 2022-02-14 16:38:03,402 on stmt: $const144.2 = const(int, 1)
DEBUG 2022-02-14 16:38:03,402 on stmt: $148binary_subtract.4 = $const144.2 - count
DEBUG 2022-02-14 16:38:03,402 on stmt: count = $148binary_subtract.4
DEBUG 2022-02-14 16:38:03,402 on stmt: $const154.6 = const(int, 1)
DEBUG 2022-02-14 16:38:03,402 on stmt: $158binary_subtract.8 = $const154.6 - count
DEBUG 2022-02-14 16:38:03,402 on stmt: $const160.9 = const(NoneType, None)
DEBUG 2022-02-14 16:38:03,402 on stmt: $const162.10 = const(NoneType, None)
DEBUG 2022-02-14 16:38:03,402 on stmt: $164build_slice.11 = global(slice: <class 'slice'>)
DEBUG 2022-02-14 16:38:03,402 on stmt: $164build_slice.12 = call $164build_slice.11($const160.9, $const162.10, func=$164build_slice.11, args=(Var($const160.9, _loop_hafnian_subroutines.py:176), Var($const162.10, _loop_hafnian_subroutines.py:176)), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:03,403 on stmt: $166build_tuple.13 = build_tuple(items=[Var($158binary_subtract.8, _loop_hafnian_subroutines.py:176), Var($164build_slice.12, _loop_hafnian_subroutines.py:176)])
DEBUG 2022-02-14 16:38:03,403 on stmt: $168binary_subscr.14 = getitem(value=comb, index=$166build_tuple.13, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:03,403 on stmt: $const174.17 = const(NoneType, None)
DEBUG 2022-02-14 16:38:03,403 on stmt: $const176.18 = const(NoneType, None)
DEBUG 2022-02-14 16:38:03,403 on stmt: $178build_slice.19 = global(slice: <class 'slice'>)
DEBUG 2022-02-14 16:38:03,403 on stmt: $178build_slice.20 = call $178build_slice.19($const174.17, $const176.18, func=$178build_slice.19, args=(Var($const174.17, _loop_hafnian_subroutines.py:176), Var($const176.18, _loop_hafnian_subroutines.py:176)), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:03,403 on stmt: $180build_tuple.21 = build_tuple(items=[Var(count, _loop_hafnian_subroutines.py:161), Var($178build_slice.20, _loop_hafnian_subroutines.py:176)])
DEBUG 2022-02-14 16:38:03,403 on stmt: comb[$180build_tuple.21] = $168binary_subscr.14
DEBUG 2022-02-14 16:38:03,403 on stmt: $184load_global.22 = global(range: <class 'range'>)
DEBUG 2022-02-14 16:38:03,403 on stmt: $const186.23 = const(int, 1)
DEBUG 2022-02-14 16:38:03,403 on stmt: $192binary_floor_divide.26 = n // i
DEBUG 2022-02-14 16:38:03,403 on stmt: $const194.27 = const(int, 1)
DEBUG 2022-02-14 16:38:03,403 on stmt: $196binary_add.28 = $192binary_floor_divide.26 + $const194.27
DEBUG 2022-02-14 16:38:03,403 on stmt: $198call_function.29 = call $184load_global.22($const186.23, $196binary_add.28, func=$184load_global.22, args=[Var($const186.23, _loop_hafnian_subroutines.py:177), Var($196binary_add.28, _loop_hafnian_subroutines.py:177)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:03,403 on stmt: $200get_iter.30 = getiter(value=$198call_function.29)
DEBUG 2022-02-14 16:38:03,403 on stmt: $phi202.1 = $200get_iter.30
DEBUG 2022-02-14 16:38:03,403 on stmt: jump 202
DEBUG 2022-02-14 16:38:03,403 ==== SSA block rewrite pass on 202
DEBUG 2022-02-14 16:38:03,403 Running <numba.core.ssa._FreshVarHandler object at 0x7fa0475fa250>
DEBUG 2022-02-14 16:38:03,403 on stmt: $202for_iter.2 = iternext(value=$phi202.1)
DEBUG 2022-02-14 16:38:03,403 on stmt: $202for_iter.3 = pair_first(value=$202for_iter.2)
DEBUG 2022-02-14 16:38:03,404 on stmt: $202for_iter.4 = pair_second(value=$202for_iter.2)
DEBUG 2022-02-14 16:38:03,404 on stmt: $phi204.2 = $202for_iter.3
DEBUG 2022-02-14 16:38:03,404 on stmt: branch $202for_iter.4, 204, 300
DEBUG 2022-02-14 16:38:03,404 ==== SSA block rewrite pass on 204
DEBUG 2022-02-14 16:38:03,404 Running <numba.core.ssa._FreshVarHandler object at 0x7fa0475fa250>
DEBUG 2022-02-14 16:38:03,404 on stmt: j = $phi204.2
DEBUG 2022-02-14 16:38:03,404 on stmt: $212binary_true_divide.6 = factor.3 / j
DEBUG 2022-02-14 16:38:03,404 on stmt: $214inplace_multiply.7 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=powfactor, rhs=$212binary_true_divide.6, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:38:03,404 on stmt: powfactor = $214inplace_multiply.7
DEBUG 2022-02-14 16:38:03,404 replaced with: powfactor.1 = $214inplace_multiply.7
DEBUG 2022-02-14 16:38:03,404 on stmt: $218load_global.8 = global(range: <class 'range'>)
DEBUG 2022-02-14 16:38:03,404 on stmt: $224binary_multiply.11 = i * j
DEBUG 2022-02-14 16:38:03,404 on stmt: $const226.12 = const(int, 1)
DEBUG 2022-02-14 16:38:03,404 on stmt: $228binary_add.13 = $224binary_multiply.11 + $const226.12
DEBUG 2022-02-14 16:38:03,404 on stmt: $const232.15 = const(int, 2)
DEBUG 2022-02-14 16:38:03,404 on stmt: $234binary_add.16 = n + $const232.15
DEBUG 2022-02-14 16:38:03,404 on stmt: $236call_function.17 = call $218load_global.8($228binary_add.13, $234binary_add.16, func=$218load_global.8, args=[Var($228binary_add.13, _loop_hafnian_subroutines.py:179), Var($234binary_add.16, _loop_hafnian_subroutines.py:179)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:03,405 on stmt: $238get_iter.18 = getiter(value=$236call_function.17)
DEBUG 2022-02-14 16:38:03,405 on stmt: $phi240.2 = $238get_iter.18
DEBUG 2022-02-14 16:38:03,405 on stmt: jump 240
DEBUG 2022-02-14 16:38:03,405 ==== SSA block rewrite pass on 240
DEBUG 2022-02-14 16:38:03,405 Running <numba.core.ssa._FreshVarHandler object at 0x7fa0475fa250>
DEBUG 2022-02-14 16:38:03,405 on stmt: $240for_iter.3 = iternext(value=$phi240.2)
DEBUG 2022-02-14 16:38:03,405 on stmt: $240for_iter.4 = pair_first(value=$240for_iter.3)
DEBUG 2022-02-14 16:38:03,405 on stmt: $240for_iter.5 = pair_second(value=$240for_iter.3)
DEBUG 2022-02-14 16:38:03,405 on stmt: $phi242.3 = $240for_iter.4
DEBUG 2022-02-14 16:38:03,405 on stmt: branch $240for_iter.5, 242, 298
DEBUG 2022-02-14 16:38:03,405 ==== SSA block rewrite pass on 242
DEBUG 2022-02-14 16:38:03,405 Running <numba.core.ssa._FreshVarHandler object at 0x7fa0475fa250>
DEBUG 2022-02-14 16:38:03,405 on stmt: k = $phi242.3
DEBUG 2022-02-14 16:38:03,405 on stmt: $const250.7 = const(int, 1)
DEBUG 2022-02-14 16:38:03,405 on stmt: $252binary_subtract.8 = k - $const250.7
DEBUG 2022-02-14 16:38:03,405 on stmt: $254build_tuple.9 = build_tuple(items=[Var(count, _loop_hafnian_subroutines.py:161), Var($252binary_subtract.8, _loop_hafnian_subroutines.py:180)])
DEBUG 2022-02-14 16:38:03,405 on stmt: $258binary_subscr.12 = getitem(value=comb, index=$254build_tuple.9, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:03,405 on stmt: $const262.14 = const(int, 1)
DEBUG 2022-02-14 16:38:03,406 on stmt: $266binary_subtract.16 = $const262.14 - count
DEBUG 2022-02-14 16:38:03,406 on stmt: $274binary_multiply.20 = i * j
DEBUG 2022-02-14 16:38:03,406 on stmt: $276binary_subtract.21 = k - $274binary_multiply.20
DEBUG 2022-02-14 16:38:03,406 on stmt: $const278.22 = const(int, 1)
DEBUG 2022-02-14 16:38:03,406 on stmt: $280binary_subtract.23 = $276binary_subtract.21 - $const278.22
DEBUG 2022-02-14 16:38:03,406 on stmt: $282build_tuple.24 = build_tuple(items=[Var($266binary_subtract.16, _loop_hafnian_subroutines.py:180), Var($280binary_subtract.23, _loop_hafnian_subroutines.py:180)])
DEBUG 2022-02-14 16:38:03,406 on stmt: $284binary_subscr.25 = getitem(value=comb, index=$282build_tuple.24, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:03,406 on stmt: $288binary_multiply.27 = $284binary_subscr.25 * powfactor
DEBUG 2022-02-14 16:38:03,406 on stmt: $290inplace_add.28 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$258binary_subscr.12, rhs=$288binary_multiply.27, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:38:03,406 on stmt: comb[$254build_tuple.9] = $290inplace_add.28
DEBUG 2022-02-14 16:38:03,406 on stmt: jump 240
DEBUG 2022-02-14 16:38:03,406 ==== SSA block rewrite pass on 298
DEBUG 2022-02-14 16:38:03,406 Running <numba.core.ssa._FreshVarHandler object at 0x7fa0475fa250>
DEBUG 2022-02-14 16:38:03,406 on stmt: jump 202
DEBUG 2022-02-14 16:38:03,406 ==== SSA block rewrite pass on 300
DEBUG 2022-02-14 16:38:03,406 Running <numba.core.ssa._FreshVarHandler object at 0x7fa0475fa250>
DEBUG 2022-02-14 16:38:03,406 on stmt: jump 60
DEBUG 2022-02-14 16:38:03,406 ==== SSA block rewrite pass on 302
DEBUG 2022-02-14 16:38:03,406 Running <numba.core.ssa._FreshVarHandler object at 0x7fa0475fa250>
DEBUG 2022-02-14 16:38:03,406 on stmt: $const306.2 = const(NoneType, None)
DEBUG 2022-02-14 16:38:03,406 on stmt: $const308.3 = const(NoneType, None)
DEBUG 2022-02-14 16:38:03,407 on stmt: $310build_slice.4 = global(slice: <class 'slice'>)
DEBUG 2022-02-14 16:38:03,407 on stmt: $310build_slice.5 = call $310build_slice.4($const306.2, $const308.3, func=$310build_slice.4, args=(Var($const306.2, _loop_hafnian_subroutines.py:182), Var($const308.3, _loop_hafnian_subroutines.py:182)), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:03,407 on stmt: $312build_tuple.6 = build_tuple(items=[Var(count, _loop_hafnian_subroutines.py:161), Var($310build_slice.5, _loop_hafnian_subroutines.py:182)])
DEBUG 2022-02-14 16:38:03,407 on stmt: $314binary_subscr.7 = getitem(value=comb, index=$312build_tuple.6, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:03,407 on stmt: $316return_value.8 = cast(value=$314binary_subscr.7)
DEBUG 2022-02-14 16:38:03,407 on stmt: return $316return_value.8
DEBUG 2022-02-14 16:38:03,407 Replaced assignments: defaultdict(<class 'list'>,
            {140: [<numba.core.ir.Assign object at 0x7fa0475e5880>],
             204: [<numba.core.ir.Assign object at 0x7fa0475e5430>]})
DEBUG 2022-02-14 16:38:03,407 ==== SSA block rewrite pass on 0
DEBUG 2022-02-14 16:38:03,407 Running <numba.core.ssa._FixSSAVars object at 0x7fa047507130>
DEBUG 2022-02-14 16:38:03,407 on stmt: E = arg(0, name=E)
DEBUG 2022-02-14 16:38:03,407 on stmt: AX_S = arg(1, name=AX_S)
DEBUG 2022-02-14 16:38:03,407 on stmt: XD_S = arg(2, name=XD_S)
DEBUG 2022-02-14 16:38:03,407 on stmt: D_S = arg(3, name=D_S)
DEBUG 2022-02-14 16:38:03,407 on stmt: n = arg(4, name=n)
DEBUG 2022-02-14 16:38:03,407 on stmt: oddloop = arg(5, name=oddloop)
DEBUG 2022-02-14 16:38:03,407 on stmt: oddVX_S = arg(6, name=oddVX_S)
DEBUG 2022-02-14 16:38:03,407 on stmt: $4load_method.1 = getattr(value=E, attr=copy)
DEBUG 2022-02-14 16:38:03,407 on stmt: E_k = call $4load_method.1(func=$4load_method.1, args=[], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:03,407 on stmt: count = const(int, 0)
DEBUG 2022-02-14 16:38:03,407 on stmt: $14load_global.4 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:38:03,407 on stmt: $16load_attr.5 = getattr(value=$14load_global.4, attr=zeros)
DEBUG 2022-02-14 16:38:03,407 on stmt: $const18.6 = const(int, 2)
DEBUG 2022-02-14 16:38:03,407 on stmt: $const22.8 = const(int, 1)
DEBUG 2022-02-14 16:38:03,408 on stmt: $24binary_add.9 = n + $const22.8
DEBUG 2022-02-14 16:38:03,408 on stmt: $26build_tuple.10 = build_tuple(items=[Var($const18.6, _loop_hafnian_subroutines.py:162), Var($24binary_add.9, _loop_hafnian_subroutines.py:162)])
DEBUG 2022-02-14 16:38:03,408 on stmt: $28load_global.11 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:38:03,408 on stmt: $30load_attr.12 = getattr(value=$28load_global.11, attr=complex128)
DEBUG 2022-02-14 16:38:03,408 on stmt: comb = call $16load_attr.5($26build_tuple.10, func=$16load_attr.5, args=[Var($26build_tuple.10, _loop_hafnian_subroutines.py:162)], kws=[('dtype', Var($30load_attr.12, _loop_hafnian_subroutines.py:162))], vararg=None, target=None)
DEBUG 2022-02-14 16:38:03,408 on stmt: $const38.15 = const(int, 1)
DEBUG 2022-02-14 16:38:03,408 on stmt: $const_0 = const(int, 0)
DEBUG 2022-02-14 16:38:03,408 on stmt: $const_0.1 = const(int, 0)
DEBUG 2022-02-14 16:38:03,408 on stmt: $const42.17 = build_tuple(items=[Var($const_0, _loop_hafnian_subroutines.py:163), Var($const_0.1, _loop_hafnian_subroutines.py:163)])
DEBUG 2022-02-14 16:38:03,408 on stmt: comb[(0, 0)] = $const38.15
DEBUG 2022-02-14 16:38:03,408 on stmt: $46load_global.18 = global(range: <class 'range'>)
DEBUG 2022-02-14 16:38:03,408 on stmt: $const48.19 = const(int, 1)
DEBUG 2022-02-14 16:38:03,408 on stmt: $const52.21 = const(int, 1)
DEBUG 2022-02-14 16:38:03,408 on stmt: $54binary_add.22 = n + $const52.21
DEBUG 2022-02-14 16:38:03,408 on stmt: $56call_function.23 = call $46load_global.18($const48.19, $54binary_add.22, func=$46load_global.18, args=[Var($const48.19, _loop_hafnian_subroutines.py:164), Var($54binary_add.22, _loop_hafnian_subroutines.py:164)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:03,408 on stmt: $58get_iter.24 = getiter(value=$56call_function.23)
DEBUG 2022-02-14 16:38:03,408 on stmt: $phi60.0 = $58get_iter.24
DEBUG 2022-02-14 16:38:03,408 on stmt: jump 60
DEBUG 2022-02-14 16:38:03,408 ==== SSA block rewrite pass on 60
DEBUG 2022-02-14 16:38:03,408 Running <numba.core.ssa._FixSSAVars object at 0x7fa047507130>
DEBUG 2022-02-14 16:38:03,408 on stmt: $60for_iter.1 = iternext(value=$phi60.0)
DEBUG 2022-02-14 16:38:03,408 on stmt: $60for_iter.2 = pair_first(value=$60for_iter.1)
DEBUG 2022-02-14 16:38:03,408 on stmt: $60for_iter.3 = pair_second(value=$60for_iter.1)
DEBUG 2022-02-14 16:38:03,409 on stmt: $phi62.1 = $60for_iter.2
DEBUG 2022-02-14 16:38:03,409 on stmt: branch $60for_iter.3, 62, 302
DEBUG 2022-02-14 16:38:03,409 ==== SSA block rewrite pass on 62
DEBUG 2022-02-14 16:38:03,409 Running <numba.core.ssa._FixSSAVars object at 0x7fa047507130>
DEBUG 2022-02-14 16:38:03,409 on stmt: i = $phi62.1
DEBUG 2022-02-14 16:38:03,409 on stmt: $const66.3 = const(int, 1)
DEBUG 2022-02-14 16:38:03,409 on stmt: $68compare_op.4 = i == $const66.3
DEBUG 2022-02-14 16:38:03,409 on stmt: bool70 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:38:03,409 on stmt: $70pred = call bool70($68compare_op.4, func=bool70, args=(Var($68compare_op.4, _loop_hafnian_subroutines.py:165),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:03,409 on stmt: branch $70pred, 72, 78
DEBUG 2022-02-14 16:38:03,409 ==== SSA block rewrite pass on 72
DEBUG 2022-02-14 16:38:03,409 Running <numba.core.ssa._FixSSAVars object at 0x7fa047507130>
DEBUG 2022-02-14 16:38:03,409 on stmt: factor = oddloop
DEBUG 2022-02-14 16:38:03,409 on stmt: jump 140
DEBUG 2022-02-14 16:38:03,409 ==== SSA block rewrite pass on 78
DEBUG 2022-02-14 16:38:03,409 Running <numba.core.ssa._FixSSAVars object at 0x7fa047507130>
DEBUG 2022-02-14 16:38:03,409 on stmt: $const80.2 = const(int, 2)
DEBUG 2022-02-14 16:38:03,409 on stmt: $82binary_modulo.3 = i % $const80.2
DEBUG 2022-02-14 16:38:03,409 on stmt: $const84.4 = const(int, 0)
DEBUG 2022-02-14 16:38:03,409 on stmt: $86compare_op.5 = $82binary_modulo.3 == $const84.4
DEBUG 2022-02-14 16:38:03,409 on stmt: bool88 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:38:03,409 on stmt: $88pred = call bool88($86compare_op.5, func=bool88, args=(Var($86compare_op.5, _loop_hafnian_subroutines.py:167),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:03,409 on stmt: branch $88pred, 90, 124
DEBUG 2022-02-14 16:38:03,410 ==== SSA block rewrite pass on 90
DEBUG 2022-02-14 16:38:03,410 Running <numba.core.ssa._FixSSAVars object at 0x7fa047507130>
DEBUG 2022-02-14 16:38:03,410 on stmt: $92load_method.2 = getattr(value=E_k, attr=sum)
DEBUG 2022-02-14 16:38:03,410 on stmt: $94call_method.3 = call $92load_method.2(func=$92load_method.2, args=[], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:03,410 on stmt: $98binary_true_divide.5 = $94call_method.3 / i
DEBUG 2022-02-14 16:38:03,410 on stmt: $104binary_matrix_multiply.8 = XD_S <built-in function matmul> D_S
DEBUG 2022-02-14 16:38:03,410 on stmt: $const106.9 = const(int, 2)
DEBUG 2022-02-14 16:38:03,410 on stmt: $108binary_true_divide.10 = $104binary_matrix_multiply.8 / $const106.9
DEBUG 2022-02-14 16:38:03,410 on stmt: factor.1 = $98binary_true_divide.5 + $108binary_true_divide.10
DEBUG 2022-02-14 16:38:03,410 on stmt: $118inplace_multiply.14 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=E_k, rhs=E, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:38:03,410 on stmt: E_k = $118inplace_multiply.14
DEBUG 2022-02-14 16:38:03,410 on stmt: jump 140
DEBUG 2022-02-14 16:38:03,410 ==== SSA block rewrite pass on 124
DEBUG 2022-02-14 16:38:03,410 Running <numba.core.ssa._FixSSAVars object at 0x7fa047507130>
DEBUG 2022-02-14 16:38:03,410 on stmt: factor.2 = oddVX_S <built-in function matmul> D_S
DEBUG 2022-02-14 16:38:03,410 on stmt: $136binary_matrix_multiply.6 = AX_S <built-in function matmul> D_S
DEBUG 2022-02-14 16:38:03,410 on stmt: D_S = $136binary_matrix_multiply.6
DEBUG 2022-02-14 16:38:03,410 on stmt: jump 140
DEBUG 2022-02-14 16:38:03,410 ==== SSA block rewrite pass on 140
DEBUG 2022-02-14 16:38:03,411 Running <numba.core.ssa._FixSSAVars object at 0x7fa047507130>
DEBUG 2022-02-14 16:38:03,411 on stmt: factor.3 = phi(incoming_values=[Var(factor, _loop_hafnian_subroutines.py:166), Var(factor.1, _loop_hafnian_subroutines.py:168), Var(factor.2, _loop_hafnian_subroutines.py:171)], incoming_blocks=[72, 90, 124])
DEBUG 2022-02-14 16:38:03,411 on stmt: powfactor = const(int, 1)
DEBUG 2022-02-14 16:38:03,411 on stmt: $const144.2 = const(int, 1)
DEBUG 2022-02-14 16:38:03,411 on stmt: $148binary_subtract.4 = $const144.2 - count
DEBUG 2022-02-14 16:38:03,411 on stmt: count = $148binary_subtract.4
DEBUG 2022-02-14 16:38:03,411 on stmt: $const154.6 = const(int, 1)
DEBUG 2022-02-14 16:38:03,411 on stmt: $158binary_subtract.8 = $const154.6 - count
DEBUG 2022-02-14 16:38:03,411 on stmt: $const160.9 = const(NoneType, None)
DEBUG 2022-02-14 16:38:03,411 on stmt: $const162.10 = const(NoneType, None)
DEBUG 2022-02-14 16:38:03,411 on stmt: $164build_slice.11 = global(slice: <class 'slice'>)
DEBUG 2022-02-14 16:38:03,411 on stmt: $164build_slice.12 = call $164build_slice.11($const160.9, $const162.10, func=$164build_slice.11, args=(Var($const160.9, _loop_hafnian_subroutines.py:176), Var($const162.10, _loop_hafnian_subroutines.py:176)), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:03,411 on stmt: $166build_tuple.13 = build_tuple(items=[Var($158binary_subtract.8, _loop_hafnian_subroutines.py:176), Var($164build_slice.12, _loop_hafnian_subroutines.py:176)])
DEBUG 2022-02-14 16:38:03,411 on stmt: $168binary_subscr.14 = getitem(value=comb, index=$166build_tuple.13, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:03,411 on stmt: $const174.17 = const(NoneType, None)
DEBUG 2022-02-14 16:38:03,411 on stmt: $const176.18 = const(NoneType, None)
DEBUG 2022-02-14 16:38:03,411 on stmt: $178build_slice.19 = global(slice: <class 'slice'>)
DEBUG 2022-02-14 16:38:03,411 on stmt: $178build_slice.20 = call $178build_slice.19($const174.17, $const176.18, func=$178build_slice.19, args=(Var($const174.17, _loop_hafnian_subroutines.py:176), Var($const176.18, _loop_hafnian_subroutines.py:176)), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:03,411 on stmt: $180build_tuple.21 = build_tuple(items=[Var(count, _loop_hafnian_subroutines.py:161), Var($178build_slice.20, _loop_hafnian_subroutines.py:176)])
DEBUG 2022-02-14 16:38:03,411 on stmt: comb[$180build_tuple.21] = $168binary_subscr.14
DEBUG 2022-02-14 16:38:03,411 on stmt: $184load_global.22 = global(range: <class 'range'>)
DEBUG 2022-02-14 16:38:03,411 on stmt: $const186.23 = const(int, 1)
DEBUG 2022-02-14 16:38:03,412 on stmt: $192binary_floor_divide.26 = n // i
DEBUG 2022-02-14 16:38:03,412 on stmt: $const194.27 = const(int, 1)
DEBUG 2022-02-14 16:38:03,412 on stmt: $196binary_add.28 = $192binary_floor_divide.26 + $const194.27
DEBUG 2022-02-14 16:38:03,412 on stmt: $198call_function.29 = call $184load_global.22($const186.23, $196binary_add.28, func=$184load_global.22, args=[Var($const186.23, _loop_hafnian_subroutines.py:177), Var($196binary_add.28, _loop_hafnian_subroutines.py:177)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:03,412 on stmt: $200get_iter.30 = getiter(value=$198call_function.29)
DEBUG 2022-02-14 16:38:03,412 on stmt: $phi202.1 = $200get_iter.30
DEBUG 2022-02-14 16:38:03,412 on stmt: jump 202
DEBUG 2022-02-14 16:38:03,412 ==== SSA block rewrite pass on 202
DEBUG 2022-02-14 16:38:03,412 Running <numba.core.ssa._FixSSAVars object at 0x7fa047507130>
DEBUG 2022-02-14 16:38:03,412 on stmt: $202for_iter.2 = iternext(value=$phi202.1)
DEBUG 2022-02-14 16:38:03,412 on stmt: $202for_iter.3 = pair_first(value=$202for_iter.2)
DEBUG 2022-02-14 16:38:03,412 on stmt: $202for_iter.4 = pair_second(value=$202for_iter.2)
DEBUG 2022-02-14 16:38:03,412 on stmt: $phi204.2 = $202for_iter.3
DEBUG 2022-02-14 16:38:03,412 on stmt: branch $202for_iter.4, 204, 300
DEBUG 2022-02-14 16:38:03,412 ==== SSA block rewrite pass on 204
DEBUG 2022-02-14 16:38:03,412 Running <numba.core.ssa._FixSSAVars object at 0x7fa047507130>
DEBUG 2022-02-14 16:38:03,412 on stmt: j = $phi204.2
DEBUG 2022-02-14 16:38:03,412 on stmt: $212binary_true_divide.6 = factor.3 / j
DEBUG 2022-02-14 16:38:03,412 on stmt: $214inplace_multiply.7 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=powfactor, rhs=$212binary_true_divide.6, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:38:03,412 find_def var='powfactor' stmt=$214inplace_multiply.7 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=powfactor, rhs=$212binary_true_divide.6, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:38:03,412 find_def_from_top label 204
DEBUG 2022-02-14 16:38:03,412 idom 202 from label 204
DEBUG 2022-02-14 16:38:03,412 find_def_from_bottom label 202
DEBUG 2022-02-14 16:38:03,412 find_def_from_top label 202
DEBUG 2022-02-14 16:38:03,412 insert phi node powfactor.2 = phi(incoming_values=[], incoming_blocks=[]) at 202
DEBUG 2022-02-14 16:38:03,413 find_def_from_bottom label 298
DEBUG 2022-02-14 16:38:03,413 find_def_from_top label 298
DEBUG 2022-02-14 16:38:03,413 idom 240 from label 298
DEBUG 2022-02-14 16:38:03,413 find_def_from_bottom label 240
DEBUG 2022-02-14 16:38:03,413 find_def_from_top label 240
DEBUG 2022-02-14 16:38:03,413 idom 204 from label 240
DEBUG 2022-02-14 16:38:03,413 find_def_from_bottom label 204
DEBUG 2022-02-14 16:38:03,413 incoming_def powfactor.1 = $214inplace_multiply.7
DEBUG 2022-02-14 16:38:03,413 find_def_from_bottom label 140
DEBUG 2022-02-14 16:38:03,413 incoming_def powfactor = const(int, 1)
DEBUG 2022-02-14 16:38:03,413 replaced with: $214inplace_multiply.7 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=powfactor.2, rhs=$212binary_true_divide.6, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:38:03,413 on stmt: powfactor.1 = $214inplace_multiply.7
DEBUG 2022-02-14 16:38:03,413 on stmt: $218load_global.8 = global(range: <class 'range'>)
DEBUG 2022-02-14 16:38:03,413 on stmt: $224binary_multiply.11 = i * j
DEBUG 2022-02-14 16:38:03,413 on stmt: $const226.12 = const(int, 1)
DEBUG 2022-02-14 16:38:03,413 on stmt: $228binary_add.13 = $224binary_multiply.11 + $const226.12
DEBUG 2022-02-14 16:38:03,413 on stmt: $const232.15 = const(int, 2)
DEBUG 2022-02-14 16:38:03,413 on stmt: $234binary_add.16 = n + $const232.15
DEBUG 2022-02-14 16:38:03,413 on stmt: $236call_function.17 = call $218load_global.8($228binary_add.13, $234binary_add.16, func=$218load_global.8, args=[Var($228binary_add.13, _loop_hafnian_subroutines.py:179), Var($234binary_add.16, _loop_hafnian_subroutines.py:179)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:03,413 on stmt: $238get_iter.18 = getiter(value=$236call_function.17)
DEBUG 2022-02-14 16:38:03,413 on stmt: $phi240.2 = $238get_iter.18
DEBUG 2022-02-14 16:38:03,413 on stmt: jump 240
DEBUG 2022-02-14 16:38:03,413 ==== SSA block rewrite pass on 240
DEBUG 2022-02-14 16:38:03,413 Running <numba.core.ssa._FixSSAVars object at 0x7fa047507130>
DEBUG 2022-02-14 16:38:03,413 on stmt: $240for_iter.3 = iternext(value=$phi240.2)
DEBUG 2022-02-14 16:38:03,414 on stmt: $240for_iter.4 = pair_first(value=$240for_iter.3)
DEBUG 2022-02-14 16:38:03,414 on stmt: $240for_iter.5 = pair_second(value=$240for_iter.3)
DEBUG 2022-02-14 16:38:03,414 on stmt: $phi242.3 = $240for_iter.4
DEBUG 2022-02-14 16:38:03,414 on stmt: branch $240for_iter.5, 242, 298
DEBUG 2022-02-14 16:38:03,414 ==== SSA block rewrite pass on 242
DEBUG 2022-02-14 16:38:03,414 Running <numba.core.ssa._FixSSAVars object at 0x7fa047507130>
DEBUG 2022-02-14 16:38:03,414 on stmt: k = $phi242.3
DEBUG 2022-02-14 16:38:03,414 on stmt: $const250.7 = const(int, 1)
DEBUG 2022-02-14 16:38:03,414 on stmt: $252binary_subtract.8 = k - $const250.7
DEBUG 2022-02-14 16:38:03,414 on stmt: $254build_tuple.9 = build_tuple(items=[Var(count, _loop_hafnian_subroutines.py:161), Var($252binary_subtract.8, _loop_hafnian_subroutines.py:180)])
DEBUG 2022-02-14 16:38:03,414 on stmt: $258binary_subscr.12 = getitem(value=comb, index=$254build_tuple.9, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:03,414 on stmt: $const262.14 = const(int, 1)
DEBUG 2022-02-14 16:38:03,414 on stmt: $266binary_subtract.16 = $const262.14 - count
DEBUG 2022-02-14 16:38:03,414 on stmt: $274binary_multiply.20 = i * j
DEBUG 2022-02-14 16:38:03,414 on stmt: $276binary_subtract.21 = k - $274binary_multiply.20
DEBUG 2022-02-14 16:38:03,414 on stmt: $const278.22 = const(int, 1)
DEBUG 2022-02-14 16:38:03,414 on stmt: $280binary_subtract.23 = $276binary_subtract.21 - $const278.22
DEBUG 2022-02-14 16:38:03,414 on stmt: $282build_tuple.24 = build_tuple(items=[Var($266binary_subtract.16, _loop_hafnian_subroutines.py:180), Var($280binary_subtract.23, _loop_hafnian_subroutines.py:180)])
DEBUG 2022-02-14 16:38:03,414 on stmt: $284binary_subscr.25 = getitem(value=comb, index=$282build_tuple.24, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:03,414 on stmt: $288binary_multiply.27 = $284binary_subscr.25 * powfactor
DEBUG 2022-02-14 16:38:03,414 find_def var='powfactor' stmt=$288binary_multiply.27 = $284binary_subscr.25 * powfactor
DEBUG 2022-02-14 16:38:03,414 find_def_from_top label 242
DEBUG 2022-02-14 16:38:03,414 idom 240 from label 242
DEBUG 2022-02-14 16:38:03,414 find_def_from_bottom label 240
DEBUG 2022-02-14 16:38:03,415 find_def_from_top label 240
DEBUG 2022-02-14 16:38:03,415 idom 204 from label 240
DEBUG 2022-02-14 16:38:03,415 find_def_from_bottom label 204
DEBUG 2022-02-14 16:38:03,415 replaced with: $288binary_multiply.27 = $284binary_subscr.25 * powfactor.1
DEBUG 2022-02-14 16:38:03,415 on stmt: $290inplace_add.28 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$258binary_subscr.12, rhs=$288binary_multiply.27, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:38:03,415 on stmt: comb[$254build_tuple.9] = $290inplace_add.28
DEBUG 2022-02-14 16:38:03,415 on stmt: jump 240
DEBUG 2022-02-14 16:38:03,415 ==== SSA block rewrite pass on 298
DEBUG 2022-02-14 16:38:03,415 Running <numba.core.ssa._FixSSAVars object at 0x7fa047507130>
DEBUG 2022-02-14 16:38:03,415 on stmt: jump 202
DEBUG 2022-02-14 16:38:03,415 ==== SSA block rewrite pass on 300
DEBUG 2022-02-14 16:38:03,415 Running <numba.core.ssa._FixSSAVars object at 0x7fa047507130>
DEBUG 2022-02-14 16:38:03,415 on stmt: jump 60
DEBUG 2022-02-14 16:38:03,415 ==== SSA block rewrite pass on 302
DEBUG 2022-02-14 16:38:03,415 Running <numba.core.ssa._FixSSAVars object at 0x7fa047507130>
DEBUG 2022-02-14 16:38:03,415 on stmt: $const306.2 = const(NoneType, None)
DEBUG 2022-02-14 16:38:03,415 on stmt: $const308.3 = const(NoneType, None)
DEBUG 2022-02-14 16:38:03,415 on stmt: $310build_slice.4 = global(slice: <class 'slice'>)
DEBUG 2022-02-14 16:38:03,415 on stmt: $310build_slice.5 = call $310build_slice.4($const306.2, $const308.3, func=$310build_slice.4, args=(Var($const306.2, _loop_hafnian_subroutines.py:182), Var($const308.3, _loop_hafnian_subroutines.py:182)), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:03,415 on stmt: $312build_tuple.6 = build_tuple(items=[Var(count, _loop_hafnian_subroutines.py:161), Var($310build_slice.5, _loop_hafnian_subroutines.py:182)])
DEBUG 2022-02-14 16:38:03,415 on stmt: $314binary_subscr.7 = getitem(value=comb, index=$312build_tuple.6, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:03,415 on stmt: $316return_value.8 = cast(value=$314binary_subscr.7)
DEBUG 2022-02-14 16:38:03,415 on stmt: return $316return_value.8
DEBUG 2022-02-14 16:38:03,415 Fix SSA violator on var D_S
DEBUG 2022-02-14 16:38:03,416 ==== SSA block rewrite pass on 0
DEBUG 2022-02-14 16:38:03,416 Running <numba.core.ssa._FreshVarHandler object at 0x7fa04711c6a0>
DEBUG 2022-02-14 16:38:03,416 on stmt: E = arg(0, name=E)
DEBUG 2022-02-14 16:38:03,416 on stmt: AX_S = arg(1, name=AX_S)
DEBUG 2022-02-14 16:38:03,416 on stmt: XD_S = arg(2, name=XD_S)
DEBUG 2022-02-14 16:38:03,416 on stmt: D_S = arg(3, name=D_S)
DEBUG 2022-02-14 16:38:03,416 first assign: D_S
DEBUG 2022-02-14 16:38:03,416 replaced with: D_S = arg(3, name=D_S)
DEBUG 2022-02-14 16:38:03,416 on stmt: n = arg(4, name=n)
DEBUG 2022-02-14 16:38:03,416 on stmt: oddloop = arg(5, name=oddloop)
DEBUG 2022-02-14 16:38:03,416 on stmt: oddVX_S = arg(6, name=oddVX_S)
DEBUG 2022-02-14 16:38:03,416 on stmt: $4load_method.1 = getattr(value=E, attr=copy)
DEBUG 2022-02-14 16:38:03,416 on stmt: E_k = call $4load_method.1(func=$4load_method.1, args=[], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:03,416 on stmt: count = const(int, 0)
DEBUG 2022-02-14 16:38:03,416 on stmt: $14load_global.4 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:38:03,416 on stmt: $16load_attr.5 = getattr(value=$14load_global.4, attr=zeros)
DEBUG 2022-02-14 16:38:03,416 on stmt: $const18.6 = const(int, 2)
DEBUG 2022-02-14 16:38:03,416 on stmt: $const22.8 = const(int, 1)
DEBUG 2022-02-14 16:38:03,416 on stmt: $24binary_add.9 = n + $const22.8
DEBUG 2022-02-14 16:38:03,416 on stmt: $26build_tuple.10 = build_tuple(items=[Var($const18.6, _loop_hafnian_subroutines.py:162), Var($24binary_add.9, _loop_hafnian_subroutines.py:162)])
DEBUG 2022-02-14 16:38:03,416 on stmt: $28load_global.11 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:38:03,416 on stmt: $30load_attr.12 = getattr(value=$28load_global.11, attr=complex128)
DEBUG 2022-02-14 16:38:03,416 on stmt: comb = call $16load_attr.5($26build_tuple.10, func=$16load_attr.5, args=[Var($26build_tuple.10, _loop_hafnian_subroutines.py:162)], kws=[('dtype', Var($30load_attr.12, _loop_hafnian_subroutines.py:162))], vararg=None, target=None)
DEBUG 2022-02-14 16:38:03,416 on stmt: $const38.15 = const(int, 1)
DEBUG 2022-02-14 16:38:03,416 on stmt: $const_0 = const(int, 0)
DEBUG 2022-02-14 16:38:03,416 on stmt: $const_0.1 = const(int, 0)
DEBUG 2022-02-14 16:38:03,417 on stmt: $const42.17 = build_tuple(items=[Var($const_0, _loop_hafnian_subroutines.py:163), Var($const_0.1, _loop_hafnian_subroutines.py:163)])
DEBUG 2022-02-14 16:38:03,417 on stmt: comb[(0, 0)] = $const38.15
DEBUG 2022-02-14 16:38:03,417 on stmt: $46load_global.18 = global(range: <class 'range'>)
DEBUG 2022-02-14 16:38:03,417 on stmt: $const48.19 = const(int, 1)
DEBUG 2022-02-14 16:38:03,417 on stmt: $const52.21 = const(int, 1)
DEBUG 2022-02-14 16:38:03,417 on stmt: $54binary_add.22 = n + $const52.21
DEBUG 2022-02-14 16:38:03,417 on stmt: $56call_function.23 = call $46load_global.18($const48.19, $54binary_add.22, func=$46load_global.18, args=[Var($const48.19, _loop_hafnian_subroutines.py:164), Var($54binary_add.22, _loop_hafnian_subroutines.py:164)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:03,417 on stmt: $58get_iter.24 = getiter(value=$56call_function.23)
DEBUG 2022-02-14 16:38:03,417 on stmt: $phi60.0 = $58get_iter.24
DEBUG 2022-02-14 16:38:03,417 on stmt: jump 60
DEBUG 2022-02-14 16:38:03,417 ==== SSA block rewrite pass on 60
DEBUG 2022-02-14 16:38:03,417 Running <numba.core.ssa._FreshVarHandler object at 0x7fa04711c6a0>
DEBUG 2022-02-14 16:38:03,417 on stmt: $60for_iter.1 = iternext(value=$phi60.0)
DEBUG 2022-02-14 16:38:03,417 on stmt: $60for_iter.2 = pair_first(value=$60for_iter.1)
DEBUG 2022-02-14 16:38:03,417 on stmt: $60for_iter.3 = pair_second(value=$60for_iter.1)
DEBUG 2022-02-14 16:38:03,417 on stmt: $phi62.1 = $60for_iter.2
DEBUG 2022-02-14 16:38:03,417 on stmt: branch $60for_iter.3, 62, 302
DEBUG 2022-02-14 16:38:03,417 ==== SSA block rewrite pass on 62
DEBUG 2022-02-14 16:38:03,417 Running <numba.core.ssa._FreshVarHandler object at 0x7fa04711c6a0>
DEBUG 2022-02-14 16:38:03,417 on stmt: i = $phi62.1
DEBUG 2022-02-14 16:38:03,417 on stmt: $const66.3 = const(int, 1)
DEBUG 2022-02-14 16:38:03,417 on stmt: $68compare_op.4 = i == $const66.3
DEBUG 2022-02-14 16:38:03,417 on stmt: bool70 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:38:03,417 on stmt: $70pred = call bool70($68compare_op.4, func=bool70, args=(Var($68compare_op.4, _loop_hafnian_subroutines.py:165),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:03,417 on stmt: branch $70pred, 72, 78
DEBUG 2022-02-14 16:38:03,418 ==== SSA block rewrite pass on 72
DEBUG 2022-02-14 16:38:03,418 Running <numba.core.ssa._FreshVarHandler object at 0x7fa04711c6a0>
DEBUG 2022-02-14 16:38:03,418 on stmt: factor = oddloop
DEBUG 2022-02-14 16:38:03,418 on stmt: jump 140
DEBUG 2022-02-14 16:38:03,418 ==== SSA block rewrite pass on 78
DEBUG 2022-02-14 16:38:03,418 Running <numba.core.ssa._FreshVarHandler object at 0x7fa04711c6a0>
DEBUG 2022-02-14 16:38:03,418 on stmt: $const80.2 = const(int, 2)
DEBUG 2022-02-14 16:38:03,418 on stmt: $82binary_modulo.3 = i % $const80.2
DEBUG 2022-02-14 16:38:03,418 on stmt: $const84.4 = const(int, 0)
DEBUG 2022-02-14 16:38:03,418 on stmt: $86compare_op.5 = $82binary_modulo.3 == $const84.4
DEBUG 2022-02-14 16:38:03,418 on stmt: bool88 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:38:03,418 on stmt: $88pred = call bool88($86compare_op.5, func=bool88, args=(Var($86compare_op.5, _loop_hafnian_subroutines.py:167),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:03,418 on stmt: branch $88pred, 90, 124
DEBUG 2022-02-14 16:38:03,418 ==== SSA block rewrite pass on 90
DEBUG 2022-02-14 16:38:03,418 Running <numba.core.ssa._FreshVarHandler object at 0x7fa04711c6a0>
DEBUG 2022-02-14 16:38:03,418 on stmt: $92load_method.2 = getattr(value=E_k, attr=sum)
DEBUG 2022-02-14 16:38:03,418 on stmt: $94call_method.3 = call $92load_method.2(func=$92load_method.2, args=[], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:03,418 on stmt: $98binary_true_divide.5 = $94call_method.3 / i
DEBUG 2022-02-14 16:38:03,418 on stmt: $104binary_matrix_multiply.8 = XD_S <built-in function matmul> D_S
DEBUG 2022-02-14 16:38:03,418 on stmt: $const106.9 = const(int, 2)
DEBUG 2022-02-14 16:38:03,418 on stmt: $108binary_true_divide.10 = $104binary_matrix_multiply.8 / $const106.9
DEBUG 2022-02-14 16:38:03,418 on stmt: factor.1 = $98binary_true_divide.5 + $108binary_true_divide.10
DEBUG 2022-02-14 16:38:03,418 on stmt: $118inplace_multiply.14 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=E_k, rhs=E, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:38:03,418 on stmt: E_k = $118inplace_multiply.14
DEBUG 2022-02-14 16:38:03,418 on stmt: jump 140
DEBUG 2022-02-14 16:38:03,418 ==== SSA block rewrite pass on 124
DEBUG 2022-02-14 16:38:03,419 Running <numba.core.ssa._FreshVarHandler object at 0x7fa04711c6a0>
DEBUG 2022-02-14 16:38:03,419 on stmt: factor.2 = oddVX_S <built-in function matmul> D_S
DEBUG 2022-02-14 16:38:03,419 on stmt: $136binary_matrix_multiply.6 = AX_S <built-in function matmul> D_S
DEBUG 2022-02-14 16:38:03,419 on stmt: D_S = $136binary_matrix_multiply.6
DEBUG 2022-02-14 16:38:03,419 replaced with: D_S.1 = $136binary_matrix_multiply.6
DEBUG 2022-02-14 16:38:03,419 on stmt: jump 140
DEBUG 2022-02-14 16:38:03,419 ==== SSA block rewrite pass on 140
DEBUG 2022-02-14 16:38:03,419 Running <numba.core.ssa._FreshVarHandler object at 0x7fa04711c6a0>
DEBUG 2022-02-14 16:38:03,419 on stmt: factor.3 = phi(incoming_values=[Var(factor, _loop_hafnian_subroutines.py:166), Var(factor.1, _loop_hafnian_subroutines.py:168), Var(factor.2, _loop_hafnian_subroutines.py:171)], incoming_blocks=[72, 90, 124])
DEBUG 2022-02-14 16:38:03,419 on stmt: powfactor = const(int, 1)
DEBUG 2022-02-14 16:38:03,419 on stmt: $const144.2 = const(int, 1)
DEBUG 2022-02-14 16:38:03,419 on stmt: $148binary_subtract.4 = $const144.2 - count
DEBUG 2022-02-14 16:38:03,419 on stmt: count = $148binary_subtract.4
DEBUG 2022-02-14 16:38:03,419 on stmt: $const154.6 = const(int, 1)
DEBUG 2022-02-14 16:38:03,419 on stmt: $158binary_subtract.8 = $const154.6 - count
DEBUG 2022-02-14 16:38:03,419 on stmt: $const160.9 = const(NoneType, None)
DEBUG 2022-02-14 16:38:03,419 on stmt: $const162.10 = const(NoneType, None)
DEBUG 2022-02-14 16:38:03,419 on stmt: $164build_slice.11 = global(slice: <class 'slice'>)
DEBUG 2022-02-14 16:38:03,419 on stmt: $164build_slice.12 = call $164build_slice.11($const160.9, $const162.10, func=$164build_slice.11, args=(Var($const160.9, _loop_hafnian_subroutines.py:176), Var($const162.10, _loop_hafnian_subroutines.py:176)), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:03,419 on stmt: $166build_tuple.13 = build_tuple(items=[Var($158binary_subtract.8, _loop_hafnian_subroutines.py:176), Var($164build_slice.12, _loop_hafnian_subroutines.py:176)])
DEBUG 2022-02-14 16:38:03,419 on stmt: $168binary_subscr.14 = getitem(value=comb, index=$166build_tuple.13, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:03,419 on stmt: $const174.17 = const(NoneType, None)
DEBUG 2022-02-14 16:38:03,419 on stmt: $const176.18 = const(NoneType, None)
DEBUG 2022-02-14 16:38:03,419 on stmt: $178build_slice.19 = global(slice: <class 'slice'>)
DEBUG 2022-02-14 16:38:03,420 on stmt: $178build_slice.20 = call $178build_slice.19($const174.17, $const176.18, func=$178build_slice.19, args=(Var($const174.17, _loop_hafnian_subroutines.py:176), Var($const176.18, _loop_hafnian_subroutines.py:176)), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:03,420 on stmt: $180build_tuple.21 = build_tuple(items=[Var(count, _loop_hafnian_subroutines.py:161), Var($178build_slice.20, _loop_hafnian_subroutines.py:176)])
DEBUG 2022-02-14 16:38:03,420 on stmt: comb[$180build_tuple.21] = $168binary_subscr.14
DEBUG 2022-02-14 16:38:03,420 on stmt: $184load_global.22 = global(range: <class 'range'>)
DEBUG 2022-02-14 16:38:03,420 on stmt: $const186.23 = const(int, 1)
DEBUG 2022-02-14 16:38:03,420 on stmt: $192binary_floor_divide.26 = n // i
DEBUG 2022-02-14 16:38:03,420 on stmt: $const194.27 = const(int, 1)
DEBUG 2022-02-14 16:38:03,420 on stmt: $196binary_add.28 = $192binary_floor_divide.26 + $const194.27
DEBUG 2022-02-14 16:38:03,420 on stmt: $198call_function.29 = call $184load_global.22($const186.23, $196binary_add.28, func=$184load_global.22, args=[Var($const186.23, _loop_hafnian_subroutines.py:177), Var($196binary_add.28, _loop_hafnian_subroutines.py:177)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:03,420 on stmt: $200get_iter.30 = getiter(value=$198call_function.29)
DEBUG 2022-02-14 16:38:03,420 on stmt: $phi202.1 = $200get_iter.30
DEBUG 2022-02-14 16:38:03,420 on stmt: jump 202
DEBUG 2022-02-14 16:38:03,420 ==== SSA block rewrite pass on 202
DEBUG 2022-02-14 16:38:03,420 Running <numba.core.ssa._FreshVarHandler object at 0x7fa04711c6a0>
DEBUG 2022-02-14 16:38:03,420 on stmt: powfactor.2 = phi(incoming_values=[Var(powfactor.1, _loop_hafnian_subroutines.py:178), Var(powfactor, _loop_hafnian_subroutines.py:174)], incoming_blocks=[298, 140])
DEBUG 2022-02-14 16:38:03,420 on stmt: $202for_iter.2 = iternext(value=$phi202.1)
DEBUG 2022-02-14 16:38:03,420 on stmt: $202for_iter.3 = pair_first(value=$202for_iter.2)
DEBUG 2022-02-14 16:38:03,420 on stmt: $202for_iter.4 = pair_second(value=$202for_iter.2)
DEBUG 2022-02-14 16:38:03,420 on stmt: $phi204.2 = $202for_iter.3
DEBUG 2022-02-14 16:38:03,420 on stmt: branch $202for_iter.4, 204, 300
DEBUG 2022-02-14 16:38:03,420 ==== SSA block rewrite pass on 204
DEBUG 2022-02-14 16:38:03,420 Running <numba.core.ssa._FreshVarHandler object at 0x7fa04711c6a0>
DEBUG 2022-02-14 16:38:03,420 on stmt: j = $phi204.2
DEBUG 2022-02-14 16:38:03,420 on stmt: $212binary_true_divide.6 = factor.3 / j
DEBUG 2022-02-14 16:38:03,421 on stmt: $214inplace_multiply.7 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=powfactor.2, rhs=$212binary_true_divide.6, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:38:03,421 on stmt: powfactor.1 = $214inplace_multiply.7
DEBUG 2022-02-14 16:38:03,421 on stmt: $218load_global.8 = global(range: <class 'range'>)
DEBUG 2022-02-14 16:38:03,421 on stmt: $224binary_multiply.11 = i * j
DEBUG 2022-02-14 16:38:03,421 on stmt: $const226.12 = const(int, 1)
DEBUG 2022-02-14 16:38:03,421 on stmt: $228binary_add.13 = $224binary_multiply.11 + $const226.12
DEBUG 2022-02-14 16:38:03,421 on stmt: $const232.15 = const(int, 2)
DEBUG 2022-02-14 16:38:03,421 on stmt: $234binary_add.16 = n + $const232.15
DEBUG 2022-02-14 16:38:03,421 on stmt: $236call_function.17 = call $218load_global.8($228binary_add.13, $234binary_add.16, func=$218load_global.8, args=[Var($228binary_add.13, _loop_hafnian_subroutines.py:179), Var($234binary_add.16, _loop_hafnian_subroutines.py:179)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:03,421 on stmt: $238get_iter.18 = getiter(value=$236call_function.17)
DEBUG 2022-02-14 16:38:03,421 on stmt: $phi240.2 = $238get_iter.18
DEBUG 2022-02-14 16:38:03,421 on stmt: jump 240
DEBUG 2022-02-14 16:38:03,421 ==== SSA block rewrite pass on 240
DEBUG 2022-02-14 16:38:03,421 Running <numba.core.ssa._FreshVarHandler object at 0x7fa04711c6a0>
DEBUG 2022-02-14 16:38:03,421 on stmt: $240for_iter.3 = iternext(value=$phi240.2)
DEBUG 2022-02-14 16:38:03,421 on stmt: $240for_iter.4 = pair_first(value=$240for_iter.3)
DEBUG 2022-02-14 16:38:03,421 on stmt: $240for_iter.5 = pair_second(value=$240for_iter.3)
DEBUG 2022-02-14 16:38:03,421 on stmt: $phi242.3 = $240for_iter.4
DEBUG 2022-02-14 16:38:03,421 on stmt: branch $240for_iter.5, 242, 298
DEBUG 2022-02-14 16:38:03,421 ==== SSA block rewrite pass on 242
DEBUG 2022-02-14 16:38:03,421 Running <numba.core.ssa._FreshVarHandler object at 0x7fa04711c6a0>
DEBUG 2022-02-14 16:38:03,421 on stmt: k = $phi242.3
DEBUG 2022-02-14 16:38:03,421 on stmt: $const250.7 = const(int, 1)
DEBUG 2022-02-14 16:38:03,421 on stmt: $252binary_subtract.8 = k - $const250.7
DEBUG 2022-02-14 16:38:03,422 on stmt: $254build_tuple.9 = build_tuple(items=[Var(count, _loop_hafnian_subroutines.py:161), Var($252binary_subtract.8, _loop_hafnian_subroutines.py:180)])
DEBUG 2022-02-14 16:38:03,422 on stmt: $258binary_subscr.12 = getitem(value=comb, index=$254build_tuple.9, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:03,422 on stmt: $const262.14 = const(int, 1)
DEBUG 2022-02-14 16:38:03,422 on stmt: $266binary_subtract.16 = $const262.14 - count
DEBUG 2022-02-14 16:38:03,422 on stmt: $274binary_multiply.20 = i * j
DEBUG 2022-02-14 16:38:03,422 on stmt: $276binary_subtract.21 = k - $274binary_multiply.20
DEBUG 2022-02-14 16:38:03,422 on stmt: $const278.22 = const(int, 1)
DEBUG 2022-02-14 16:38:03,422 on stmt: $280binary_subtract.23 = $276binary_subtract.21 - $const278.22
DEBUG 2022-02-14 16:38:03,422 on stmt: $282build_tuple.24 = build_tuple(items=[Var($266binary_subtract.16, _loop_hafnian_subroutines.py:180), Var($280binary_subtract.23, _loop_hafnian_subroutines.py:180)])
DEBUG 2022-02-14 16:38:03,422 on stmt: $284binary_subscr.25 = getitem(value=comb, index=$282build_tuple.24, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:03,422 on stmt: $288binary_multiply.27 = $284binary_subscr.25 * powfactor.1
DEBUG 2022-02-14 16:38:03,422 on stmt: $290inplace_add.28 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$258binary_subscr.12, rhs=$288binary_multiply.27, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:38:03,422 on stmt: comb[$254build_tuple.9] = $290inplace_add.28
DEBUG 2022-02-14 16:38:03,422 on stmt: jump 240
DEBUG 2022-02-14 16:38:03,422 ==== SSA block rewrite pass on 298
DEBUG 2022-02-14 16:38:03,422 Running <numba.core.ssa._FreshVarHandler object at 0x7fa04711c6a0>
DEBUG 2022-02-14 16:38:03,422 on stmt: jump 202
DEBUG 2022-02-14 16:38:03,422 ==== SSA block rewrite pass on 300
DEBUG 2022-02-14 16:38:03,423 Running <numba.core.ssa._FreshVarHandler object at 0x7fa04711c6a0>
DEBUG 2022-02-14 16:38:03,423 on stmt: jump 60
DEBUG 2022-02-14 16:38:03,423 ==== SSA block rewrite pass on 302
DEBUG 2022-02-14 16:38:03,423 Running <numba.core.ssa._FreshVarHandler object at 0x7fa04711c6a0>
DEBUG 2022-02-14 16:38:03,423 on stmt: $const306.2 = const(NoneType, None)
DEBUG 2022-02-14 16:38:03,423 on stmt: $const308.3 = const(NoneType, None)
DEBUG 2022-02-14 16:38:03,423 on stmt: $310build_slice.4 = global(slice: <class 'slice'>)
DEBUG 2022-02-14 16:38:03,423 on stmt: $310build_slice.5 = call $310build_slice.4($const306.2, $const308.3, func=$310build_slice.4, args=(Var($const306.2, _loop_hafnian_subroutines.py:182), Var($const308.3, _loop_hafnian_subroutines.py:182)), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:03,423 on stmt: $312build_tuple.6 = build_tuple(items=[Var(count, _loop_hafnian_subroutines.py:161), Var($310build_slice.5, _loop_hafnian_subroutines.py:182)])
DEBUG 2022-02-14 16:38:03,423 on stmt: $314binary_subscr.7 = getitem(value=comb, index=$312build_tuple.6, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:03,423 on stmt: $316return_value.8 = cast(value=$314binary_subscr.7)
DEBUG 2022-02-14 16:38:03,423 on stmt: return $316return_value.8
DEBUG 2022-02-14 16:38:03,423 Replaced assignments: defaultdict(<class 'list'>,
            {0: [<numba.core.ir.Assign object at 0x7fa0475e54f0>],
             124: [<numba.core.ir.Assign object at 0x7fa0475fa3d0>]})
DEBUG 2022-02-14 16:38:03,423 ==== SSA block rewrite pass on 0
DEBUG 2022-02-14 16:38:03,423 Running <numba.core.ssa._FixSSAVars object at 0x7fa047507130>
DEBUG 2022-02-14 16:38:03,423 on stmt: E = arg(0, name=E)
DEBUG 2022-02-14 16:38:03,423 on stmt: AX_S = arg(1, name=AX_S)
DEBUG 2022-02-14 16:38:03,423 on stmt: XD_S = arg(2, name=XD_S)
DEBUG 2022-02-14 16:38:03,423 on stmt: D_S = arg(3, name=D_S)
DEBUG 2022-02-14 16:38:03,423 on stmt: n = arg(4, name=n)
DEBUG 2022-02-14 16:38:03,423 on stmt: oddloop = arg(5, name=oddloop)
DEBUG 2022-02-14 16:38:03,423 on stmt: oddVX_S = arg(6, name=oddVX_S)
DEBUG 2022-02-14 16:38:03,424 on stmt: $4load_method.1 = getattr(value=E, attr=copy)
DEBUG 2022-02-14 16:38:03,424 on stmt: E_k = call $4load_method.1(func=$4load_method.1, args=[], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:03,424 on stmt: count = const(int, 0)
DEBUG 2022-02-14 16:38:03,424 on stmt: $14load_global.4 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:38:03,424 on stmt: $16load_attr.5 = getattr(value=$14load_global.4, attr=zeros)
DEBUG 2022-02-14 16:38:03,424 on stmt: $const18.6 = const(int, 2)
DEBUG 2022-02-14 16:38:03,424 on stmt: $const22.8 = const(int, 1)
DEBUG 2022-02-14 16:38:03,424 on stmt: $24binary_add.9 = n + $const22.8
DEBUG 2022-02-14 16:38:03,424 on stmt: $26build_tuple.10 = build_tuple(items=[Var($const18.6, _loop_hafnian_subroutines.py:162), Var($24binary_add.9, _loop_hafnian_subroutines.py:162)])
DEBUG 2022-02-14 16:38:03,424 on stmt: $28load_global.11 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:38:03,424 on stmt: $30load_attr.12 = getattr(value=$28load_global.11, attr=complex128)
DEBUG 2022-02-14 16:38:03,424 on stmt: comb = call $16load_attr.5($26build_tuple.10, func=$16load_attr.5, args=[Var($26build_tuple.10, _loop_hafnian_subroutines.py:162)], kws=[('dtype', Var($30load_attr.12, _loop_hafnian_subroutines.py:162))], vararg=None, target=None)
DEBUG 2022-02-14 16:38:03,424 on stmt: $const38.15 = const(int, 1)
DEBUG 2022-02-14 16:38:03,424 on stmt: $const_0 = const(int, 0)
DEBUG 2022-02-14 16:38:03,424 on stmt: $const_0.1 = const(int, 0)
DEBUG 2022-02-14 16:38:03,424 on stmt: $const42.17 = build_tuple(items=[Var($const_0, _loop_hafnian_subroutines.py:163), Var($const_0.1, _loop_hafnian_subroutines.py:163)])
DEBUG 2022-02-14 16:38:03,424 on stmt: comb[(0, 0)] = $const38.15
DEBUG 2022-02-14 16:38:03,424 on stmt: $46load_global.18 = global(range: <class 'range'>)
DEBUG 2022-02-14 16:38:03,424 on stmt: $const48.19 = const(int, 1)
DEBUG 2022-02-14 16:38:03,424 on stmt: $const52.21 = const(int, 1)
DEBUG 2022-02-14 16:38:03,424 on stmt: $54binary_add.22 = n + $const52.21
DEBUG 2022-02-14 16:38:03,424 on stmt: $56call_function.23 = call $46load_global.18($const48.19, $54binary_add.22, func=$46load_global.18, args=[Var($const48.19, _loop_hafnian_subroutines.py:164), Var($54binary_add.22, _loop_hafnian_subroutines.py:164)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:03,425 on stmt: $58get_iter.24 = getiter(value=$56call_function.23)
DEBUG 2022-02-14 16:38:03,425 on stmt: $phi60.0 = $58get_iter.24
DEBUG 2022-02-14 16:38:03,425 on stmt: jump 60
DEBUG 2022-02-14 16:38:03,425 ==== SSA block rewrite pass on 60
DEBUG 2022-02-14 16:38:03,425 Running <numba.core.ssa._FixSSAVars object at 0x7fa047507130>
DEBUG 2022-02-14 16:38:03,425 on stmt: $60for_iter.1 = iternext(value=$phi60.0)
DEBUG 2022-02-14 16:38:03,425 on stmt: $60for_iter.2 = pair_first(value=$60for_iter.1)
DEBUG 2022-02-14 16:38:03,425 on stmt: $60for_iter.3 = pair_second(value=$60for_iter.1)
DEBUG 2022-02-14 16:38:03,425 on stmt: $phi62.1 = $60for_iter.2
DEBUG 2022-02-14 16:38:03,425 on stmt: branch $60for_iter.3, 62, 302
DEBUG 2022-02-14 16:38:03,425 ==== SSA block rewrite pass on 62
DEBUG 2022-02-14 16:38:03,425 Running <numba.core.ssa._FixSSAVars object at 0x7fa047507130>
DEBUG 2022-02-14 16:38:03,425 on stmt: i = $phi62.1
DEBUG 2022-02-14 16:38:03,425 on stmt: $const66.3 = const(int, 1)
DEBUG 2022-02-14 16:38:03,425 on stmt: $68compare_op.4 = i == $const66.3
DEBUG 2022-02-14 16:38:03,425 on stmt: bool70 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:38:03,425 on stmt: $70pred = call bool70($68compare_op.4, func=bool70, args=(Var($68compare_op.4, _loop_hafnian_subroutines.py:165),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:03,425 on stmt: branch $70pred, 72, 78
DEBUG 2022-02-14 16:38:03,425 ==== SSA block rewrite pass on 72
DEBUG 2022-02-14 16:38:03,425 Running <numba.core.ssa._FixSSAVars object at 0x7fa047507130>
DEBUG 2022-02-14 16:38:03,425 on stmt: factor = oddloop
DEBUG 2022-02-14 16:38:03,425 on stmt: jump 140
DEBUG 2022-02-14 16:38:03,425 ==== SSA block rewrite pass on 78
DEBUG 2022-02-14 16:38:03,426 Running <numba.core.ssa._FixSSAVars object at 0x7fa047507130>
DEBUG 2022-02-14 16:38:03,426 on stmt: $const80.2 = const(int, 2)
DEBUG 2022-02-14 16:38:03,426 on stmt: $82binary_modulo.3 = i % $const80.2
DEBUG 2022-02-14 16:38:03,426 on stmt: $const84.4 = const(int, 0)
DEBUG 2022-02-14 16:38:03,426 on stmt: $86compare_op.5 = $82binary_modulo.3 == $const84.4
DEBUG 2022-02-14 16:38:03,426 on stmt: bool88 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:38:03,426 on stmt: $88pred = call bool88($86compare_op.5, func=bool88, args=(Var($86compare_op.5, _loop_hafnian_subroutines.py:167),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:03,426 on stmt: branch $88pred, 90, 124
DEBUG 2022-02-14 16:38:03,426 ==== SSA block rewrite pass on 90
DEBUG 2022-02-14 16:38:03,426 Running <numba.core.ssa._FixSSAVars object at 0x7fa047507130>
DEBUG 2022-02-14 16:38:03,426 on stmt: $92load_method.2 = getattr(value=E_k, attr=sum)
DEBUG 2022-02-14 16:38:03,426 on stmt: $94call_method.3 = call $92load_method.2(func=$92load_method.2, args=[], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:03,426 on stmt: $98binary_true_divide.5 = $94call_method.3 / i
DEBUG 2022-02-14 16:38:03,426 on stmt: $104binary_matrix_multiply.8 = XD_S <built-in function matmul> D_S
DEBUG 2022-02-14 16:38:03,426 find_def var='D_S' stmt=$104binary_matrix_multiply.8 = XD_S <built-in function matmul> D_S
DEBUG 2022-02-14 16:38:03,426 find_def_from_top label 90
DEBUG 2022-02-14 16:38:03,426 idom 78 from label 90
DEBUG 2022-02-14 16:38:03,426 find_def_from_bottom label 78
DEBUG 2022-02-14 16:38:03,426 find_def_from_top label 78
DEBUG 2022-02-14 16:38:03,427 idom 62 from label 78
DEBUG 2022-02-14 16:38:03,427 find_def_from_bottom label 62
DEBUG 2022-02-14 16:38:03,427 find_def_from_top label 62
DEBUG 2022-02-14 16:38:03,427 idom 60 from label 62
DEBUG 2022-02-14 16:38:03,427 find_def_from_bottom label 60
DEBUG 2022-02-14 16:38:03,427 find_def_from_top label 60
DEBUG 2022-02-14 16:38:03,427 insert phi node D_S.2 = phi(incoming_values=[], incoming_blocks=[]) at 60
DEBUG 2022-02-14 16:38:03,427 find_def_from_bottom label 0
DEBUG 2022-02-14 16:38:03,427 incoming_def D_S = arg(3, name=D_S)
DEBUG 2022-02-14 16:38:03,427 find_def_from_bottom label 300
DEBUG 2022-02-14 16:38:03,427 find_def_from_top label 300
DEBUG 2022-02-14 16:38:03,427 idom 202 from label 300
DEBUG 2022-02-14 16:38:03,427 find_def_from_bottom label 202
DEBUG 2022-02-14 16:38:03,427 find_def_from_top label 202
DEBUG 2022-02-14 16:38:03,427 idom 140 from label 202
DEBUG 2022-02-14 16:38:03,427 find_def_from_bottom label 140
DEBUG 2022-02-14 16:38:03,427 find_def_from_top label 140
DEBUG 2022-02-14 16:38:03,427 insert phi node D_S.3 = phi(incoming_values=[], incoming_blocks=[]) at 140
DEBUG 2022-02-14 16:38:03,427 find_def_from_bottom label 72
DEBUG 2022-02-14 16:38:03,427 find_def_from_top label 72
DEBUG 2022-02-14 16:38:03,427 idom 62 from label 72
DEBUG 2022-02-14 16:38:03,427 find_def_from_bottom label 62
DEBUG 2022-02-14 16:38:03,427 find_def_from_top label 62
DEBUG 2022-02-14 16:38:03,427 idom 60 from label 62
DEBUG 2022-02-14 16:38:03,427 find_def_from_bottom label 60
DEBUG 2022-02-14 16:38:03,427 incoming_def D_S.2 = phi(incoming_values=[Var(D_S, _loop_hafnian_subroutines.py:159)], incoming_blocks=[0])
DEBUG 2022-02-14 16:38:03,428 find_def_from_bottom label 90
DEBUG 2022-02-14 16:38:03,428 find_def_from_top label 90
DEBUG 2022-02-14 16:38:03,428 idom 78 from label 90
DEBUG 2022-02-14 16:38:03,428 find_def_from_bottom label 78
DEBUG 2022-02-14 16:38:03,428 find_def_from_top label 78
DEBUG 2022-02-14 16:38:03,428 idom 62 from label 78
DEBUG 2022-02-14 16:38:03,428 find_def_from_bottom label 62
DEBUG 2022-02-14 16:38:03,428 find_def_from_top label 62
DEBUG 2022-02-14 16:38:03,428 idom 60 from label 62
DEBUG 2022-02-14 16:38:03,428 find_def_from_bottom label 60
DEBUG 2022-02-14 16:38:03,428 incoming_def D_S.2 = phi(incoming_values=[Var(D_S, _loop_hafnian_subroutines.py:159)], incoming_blocks=[0])
DEBUG 2022-02-14 16:38:03,428 find_def_from_bottom label 124
DEBUG 2022-02-14 16:38:03,428 incoming_def D_S.1 = $136binary_matrix_multiply.6
DEBUG 2022-02-14 16:38:03,428 incoming_def D_S.3 = phi(incoming_values=[Var(D_S.2, _loop_hafnian_subroutines.py:168), Var(D_S.2, _loop_hafnian_subroutines.py:168), Var(D_S.1, _loop_hafnian_subroutines.py:172)], incoming_blocks=[72, 90, 124])
DEBUG 2022-02-14 16:38:03,428 replaced with: $104binary_matrix_multiply.8 = XD_S <built-in function matmul> D_S.2
DEBUG 2022-02-14 16:38:03,428 on stmt: $const106.9 = const(int, 2)
DEBUG 2022-02-14 16:38:03,428 on stmt: $108binary_true_divide.10 = $104binary_matrix_multiply.8 / $const106.9
DEBUG 2022-02-14 16:38:03,428 on stmt: factor.1 = $98binary_true_divide.5 + $108binary_true_divide.10
DEBUG 2022-02-14 16:38:03,428 on stmt: $118inplace_multiply.14 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=E_k, rhs=E, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:38:03,428 on stmt: E_k = $118inplace_multiply.14
DEBUG 2022-02-14 16:38:03,428 on stmt: jump 140
DEBUG 2022-02-14 16:38:03,428 ==== SSA block rewrite pass on 124
DEBUG 2022-02-14 16:38:03,428 Running <numba.core.ssa._FixSSAVars object at 0x7fa047507130>
DEBUG 2022-02-14 16:38:03,428 on stmt: factor.2 = oddVX_S <built-in function matmul> D_S
DEBUG 2022-02-14 16:38:03,428 find_def var='D_S' stmt=factor.2 = oddVX_S <built-in function matmul> D_S
DEBUG 2022-02-14 16:38:03,429 find_def_from_top label 124
DEBUG 2022-02-14 16:38:03,429 idom 78 from label 124
DEBUG 2022-02-14 16:38:03,429 find_def_from_bottom label 78
DEBUG 2022-02-14 16:38:03,429 find_def_from_top label 78
DEBUG 2022-02-14 16:38:03,429 idom 62 from label 78
DEBUG 2022-02-14 16:38:03,429 find_def_from_bottom label 62
DEBUG 2022-02-14 16:38:03,429 find_def_from_top label 62
DEBUG 2022-02-14 16:38:03,429 idom 60 from label 62
DEBUG 2022-02-14 16:38:03,429 find_def_from_bottom label 60
DEBUG 2022-02-14 16:38:03,429 replaced with: factor.2 = oddVX_S <built-in function matmul> D_S.2
DEBUG 2022-02-14 16:38:03,429 on stmt: $136binary_matrix_multiply.6 = AX_S <built-in function matmul> D_S
DEBUG 2022-02-14 16:38:03,429 find_def var='D_S' stmt=$136binary_matrix_multiply.6 = AX_S <built-in function matmul> D_S
DEBUG 2022-02-14 16:38:03,429 find_def_from_top label 124
DEBUG 2022-02-14 16:38:03,429 idom 78 from label 124
DEBUG 2022-02-14 16:38:03,429 find_def_from_bottom label 78
DEBUG 2022-02-14 16:38:03,429 find_def_from_top label 78
DEBUG 2022-02-14 16:38:03,429 idom 62 from label 78
DEBUG 2022-02-14 16:38:03,429 find_def_from_bottom label 62
DEBUG 2022-02-14 16:38:03,429 find_def_from_top label 62
DEBUG 2022-02-14 16:38:03,429 idom 60 from label 62
DEBUG 2022-02-14 16:38:03,429 find_def_from_bottom label 60
DEBUG 2022-02-14 16:38:03,429 replaced with: $136binary_matrix_multiply.6 = AX_S <built-in function matmul> D_S.2
DEBUG 2022-02-14 16:38:03,429 on stmt: D_S.1 = $136binary_matrix_multiply.6
DEBUG 2022-02-14 16:38:03,429 on stmt: jump 140
DEBUG 2022-02-14 16:38:03,429 ==== SSA block rewrite pass on 140
DEBUG 2022-02-14 16:38:03,429 Running <numba.core.ssa._FixSSAVars object at 0x7fa047507130>
DEBUG 2022-02-14 16:38:03,429 on stmt: factor.3 = phi(incoming_values=[Var(factor, _loop_hafnian_subroutines.py:166), Var(factor.1, _loop_hafnian_subroutines.py:168), Var(factor.2, _loop_hafnian_subroutines.py:171)], incoming_blocks=[72, 90, 124])
DEBUG 2022-02-14 16:38:03,429 on stmt: powfactor = const(int, 1)
DEBUG 2022-02-14 16:38:03,430 on stmt: $const144.2 = const(int, 1)
DEBUG 2022-02-14 16:38:03,430 on stmt: $148binary_subtract.4 = $const144.2 - count
DEBUG 2022-02-14 16:38:03,430 on stmt: count = $148binary_subtract.4
DEBUG 2022-02-14 16:38:03,430 on stmt: $const154.6 = const(int, 1)
DEBUG 2022-02-14 16:38:03,430 on stmt: $158binary_subtract.8 = $const154.6 - count
DEBUG 2022-02-14 16:38:03,430 on stmt: $const160.9 = const(NoneType, None)
DEBUG 2022-02-14 16:38:03,430 on stmt: $const162.10 = const(NoneType, None)
DEBUG 2022-02-14 16:38:03,430 on stmt: $164build_slice.11 = global(slice: <class 'slice'>)
DEBUG 2022-02-14 16:38:03,430 on stmt: $164build_slice.12 = call $164build_slice.11($const160.9, $const162.10, func=$164build_slice.11, args=(Var($const160.9, _loop_hafnian_subroutines.py:176), Var($const162.10, _loop_hafnian_subroutines.py:176)), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:03,430 on stmt: $166build_tuple.13 = build_tuple(items=[Var($158binary_subtract.8, _loop_hafnian_subroutines.py:176), Var($164build_slice.12, _loop_hafnian_subroutines.py:176)])
DEBUG 2022-02-14 16:38:03,430 on stmt: $168binary_subscr.14 = getitem(value=comb, index=$166build_tuple.13, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:03,430 on stmt: $const174.17 = const(NoneType, None)
DEBUG 2022-02-14 16:38:03,430 on stmt: $const176.18 = const(NoneType, None)
DEBUG 2022-02-14 16:38:03,430 on stmt: $178build_slice.19 = global(slice: <class 'slice'>)
DEBUG 2022-02-14 16:38:03,430 on stmt: $178build_slice.20 = call $178build_slice.19($const174.17, $const176.18, func=$178build_slice.19, args=(Var($const174.17, _loop_hafnian_subroutines.py:176), Var($const176.18, _loop_hafnian_subroutines.py:176)), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:03,430 on stmt: $180build_tuple.21 = build_tuple(items=[Var(count, _loop_hafnian_subroutines.py:161), Var($178build_slice.20, _loop_hafnian_subroutines.py:176)])
DEBUG 2022-02-14 16:38:03,430 on stmt: comb[$180build_tuple.21] = $168binary_subscr.14
DEBUG 2022-02-14 16:38:03,430 on stmt: $184load_global.22 = global(range: <class 'range'>)
DEBUG 2022-02-14 16:38:03,430 on stmt: $const186.23 = const(int, 1)
DEBUG 2022-02-14 16:38:03,430 on stmt: $192binary_floor_divide.26 = n // i
DEBUG 2022-02-14 16:38:03,430 on stmt: $const194.27 = const(int, 1)
DEBUG 2022-02-14 16:38:03,430 on stmt: $196binary_add.28 = $192binary_floor_divide.26 + $const194.27
DEBUG 2022-02-14 16:38:03,430 on stmt: $198call_function.29 = call $184load_global.22($const186.23, $196binary_add.28, func=$184load_global.22, args=[Var($const186.23, _loop_hafnian_subroutines.py:177), Var($196binary_add.28, _loop_hafnian_subroutines.py:177)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:03,431 on stmt: $200get_iter.30 = getiter(value=$198call_function.29)
DEBUG 2022-02-14 16:38:03,431 on stmt: $phi202.1 = $200get_iter.30
DEBUG 2022-02-14 16:38:03,431 on stmt: jump 202
DEBUG 2022-02-14 16:38:03,431 ==== SSA block rewrite pass on 202
DEBUG 2022-02-14 16:38:03,431 Running <numba.core.ssa._FixSSAVars object at 0x7fa047507130>
DEBUG 2022-02-14 16:38:03,431 on stmt: powfactor.2 = phi(incoming_values=[Var(powfactor.1, _loop_hafnian_subroutines.py:178), Var(powfactor, _loop_hafnian_subroutines.py:174)], incoming_blocks=[298, 140])
DEBUG 2022-02-14 16:38:03,431 on stmt: $202for_iter.2 = iternext(value=$phi202.1)
DEBUG 2022-02-14 16:38:03,431 on stmt: $202for_iter.3 = pair_first(value=$202for_iter.2)
DEBUG 2022-02-14 16:38:03,431 on stmt: $202for_iter.4 = pair_second(value=$202for_iter.2)
DEBUG 2022-02-14 16:38:03,431 on stmt: $phi204.2 = $202for_iter.3
DEBUG 2022-02-14 16:38:03,431 on stmt: branch $202for_iter.4, 204, 300
DEBUG 2022-02-14 16:38:03,431 ==== SSA block rewrite pass on 204
DEBUG 2022-02-14 16:38:03,431 Running <numba.core.ssa._FixSSAVars object at 0x7fa047507130>
DEBUG 2022-02-14 16:38:03,431 on stmt: j = $phi204.2
DEBUG 2022-02-14 16:38:03,431 on stmt: $212binary_true_divide.6 = factor.3 / j
DEBUG 2022-02-14 16:38:03,431 on stmt: $214inplace_multiply.7 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=powfactor.2, rhs=$212binary_true_divide.6, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:38:03,431 on stmt: powfactor.1 = $214inplace_multiply.7
DEBUG 2022-02-14 16:38:03,431 on stmt: $218load_global.8 = global(range: <class 'range'>)
DEBUG 2022-02-14 16:38:03,431 on stmt: $224binary_multiply.11 = i * j
DEBUG 2022-02-14 16:38:03,431 on stmt: $const226.12 = const(int, 1)
DEBUG 2022-02-14 16:38:03,431 on stmt: $228binary_add.13 = $224binary_multiply.11 + $const226.12
DEBUG 2022-02-14 16:38:03,431 on stmt: $const232.15 = const(int, 2)
DEBUG 2022-02-14 16:38:03,431 on stmt: $234binary_add.16 = n + $const232.15
DEBUG 2022-02-14 16:38:03,431 on stmt: $236call_function.17 = call $218load_global.8($228binary_add.13, $234binary_add.16, func=$218load_global.8, args=[Var($228binary_add.13, _loop_hafnian_subroutines.py:179), Var($234binary_add.16, _loop_hafnian_subroutines.py:179)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:03,432 on stmt: $238get_iter.18 = getiter(value=$236call_function.17)
DEBUG 2022-02-14 16:38:03,432 on stmt: $phi240.2 = $238get_iter.18
DEBUG 2022-02-14 16:38:03,432 on stmt: jump 240
DEBUG 2022-02-14 16:38:03,432 ==== SSA block rewrite pass on 240
DEBUG 2022-02-14 16:38:03,432 Running <numba.core.ssa._FixSSAVars object at 0x7fa047507130>
DEBUG 2022-02-14 16:38:03,432 on stmt: $240for_iter.3 = iternext(value=$phi240.2)
DEBUG 2022-02-14 16:38:03,432 on stmt: $240for_iter.4 = pair_first(value=$240for_iter.3)
DEBUG 2022-02-14 16:38:03,432 on stmt: $240for_iter.5 = pair_second(value=$240for_iter.3)
DEBUG 2022-02-14 16:38:03,432 on stmt: $phi242.3 = $240for_iter.4
DEBUG 2022-02-14 16:38:03,432 on stmt: branch $240for_iter.5, 242, 298
DEBUG 2022-02-14 16:38:03,432 ==== SSA block rewrite pass on 242
DEBUG 2022-02-14 16:38:03,432 Running <numba.core.ssa._FixSSAVars object at 0x7fa047507130>
DEBUG 2022-02-14 16:38:03,432 on stmt: k = $phi242.3
DEBUG 2022-02-14 16:38:03,432 on stmt: $const250.7 = const(int, 1)
DEBUG 2022-02-14 16:38:03,432 on stmt: $252binary_subtract.8 = k - $const250.7
DEBUG 2022-02-14 16:38:03,432 on stmt: $254build_tuple.9 = build_tuple(items=[Var(count, _loop_hafnian_subroutines.py:161), Var($252binary_subtract.8, _loop_hafnian_subroutines.py:180)])
DEBUG 2022-02-14 16:38:03,432 on stmt: $258binary_subscr.12 = getitem(value=comb, index=$254build_tuple.9, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:03,432 on stmt: $const262.14 = const(int, 1)
DEBUG 2022-02-14 16:38:03,432 on stmt: $266binary_subtract.16 = $const262.14 - count
DEBUG 2022-02-14 16:38:03,432 on stmt: $274binary_multiply.20 = i * j
DEBUG 2022-02-14 16:38:03,432 on stmt: $276binary_subtract.21 = k - $274binary_multiply.20
DEBUG 2022-02-14 16:38:03,432 on stmt: $const278.22 = const(int, 1)
DEBUG 2022-02-14 16:38:03,432 on stmt: $280binary_subtract.23 = $276binary_subtract.21 - $const278.22
DEBUG 2022-02-14 16:38:03,432 on stmt: $282build_tuple.24 = build_tuple(items=[Var($266binary_subtract.16, _loop_hafnian_subroutines.py:180), Var($280binary_subtract.23, _loop_hafnian_subroutines.py:180)])
DEBUG 2022-02-14 16:38:03,433 on stmt: $284binary_subscr.25 = getitem(value=comb, index=$282build_tuple.24, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:03,433 on stmt: $288binary_multiply.27 = $284binary_subscr.25 * powfactor.1
DEBUG 2022-02-14 16:38:03,433 on stmt: $290inplace_add.28 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$258binary_subscr.12, rhs=$288binary_multiply.27, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:38:03,433 on stmt: comb[$254build_tuple.9] = $290inplace_add.28
DEBUG 2022-02-14 16:38:03,433 on stmt: jump 240
DEBUG 2022-02-14 16:38:03,433 ==== SSA block rewrite pass on 298
DEBUG 2022-02-14 16:38:03,433 Running <numba.core.ssa._FixSSAVars object at 0x7fa047507130>
DEBUG 2022-02-14 16:38:03,433 on stmt: jump 202
DEBUG 2022-02-14 16:38:03,433 ==== SSA block rewrite pass on 300
DEBUG 2022-02-14 16:38:03,433 Running <numba.core.ssa._FixSSAVars object at 0x7fa047507130>
DEBUG 2022-02-14 16:38:03,433 on stmt: jump 60
DEBUG 2022-02-14 16:38:03,433 ==== SSA block rewrite pass on 302
DEBUG 2022-02-14 16:38:03,433 Running <numba.core.ssa._FixSSAVars object at 0x7fa047507130>
DEBUG 2022-02-14 16:38:03,433 on stmt: $const306.2 = const(NoneType, None)
DEBUG 2022-02-14 16:38:03,433 on stmt: $const308.3 = const(NoneType, None)
DEBUG 2022-02-14 16:38:03,433 on stmt: $310build_slice.4 = global(slice: <class 'slice'>)
DEBUG 2022-02-14 16:38:03,433 on stmt: $310build_slice.5 = call $310build_slice.4($const306.2, $const308.3, func=$310build_slice.4, args=(Var($const306.2, _loop_hafnian_subroutines.py:182), Var($const308.3, _loop_hafnian_subroutines.py:182)), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:03,433 on stmt: $312build_tuple.6 = build_tuple(items=[Var(count, _loop_hafnian_subroutines.py:161), Var($310build_slice.5, _loop_hafnian_subroutines.py:182)])
DEBUG 2022-02-14 16:38:03,433 on stmt: $314binary_subscr.7 = getitem(value=comb, index=$312build_tuple.6, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:03,433 on stmt: $316return_value.8 = cast(value=$314binary_subscr.7)
DEBUG 2022-02-14 16:38:03,433 on stmt: return $316return_value.8
DEBUG 2022-02-14 16:38:03,433 Fix SSA violator on var E_k
DEBUG 2022-02-14 16:38:03,433 ==== SSA block rewrite pass on 0
DEBUG 2022-02-14 16:38:03,433 Running <numba.core.ssa._FreshVarHandler object at 0x7fa04671f4c0>
DEBUG 2022-02-14 16:38:03,433 on stmt: E = arg(0, name=E)
DEBUG 2022-02-14 16:38:03,433 on stmt: AX_S = arg(1, name=AX_S)
DEBUG 2022-02-14 16:38:03,434 on stmt: XD_S = arg(2, name=XD_S)
DEBUG 2022-02-14 16:38:03,434 on stmt: D_S = arg(3, name=D_S)
DEBUG 2022-02-14 16:38:03,434 on stmt: n = arg(4, name=n)
DEBUG 2022-02-14 16:38:03,434 on stmt: oddloop = arg(5, name=oddloop)
DEBUG 2022-02-14 16:38:03,434 on stmt: oddVX_S = arg(6, name=oddVX_S)
DEBUG 2022-02-14 16:38:03,434 on stmt: $4load_method.1 = getattr(value=E, attr=copy)
DEBUG 2022-02-14 16:38:03,434 on stmt: E_k = call $4load_method.1(func=$4load_method.1, args=[], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:03,434 first assign: E_k
DEBUG 2022-02-14 16:38:03,434 replaced with: E_k = call $4load_method.1(func=$4load_method.1, args=[], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:03,434 on stmt: count = const(int, 0)
DEBUG 2022-02-14 16:38:03,434 on stmt: $14load_global.4 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:38:03,434 on stmt: $16load_attr.5 = getattr(value=$14load_global.4, attr=zeros)
DEBUG 2022-02-14 16:38:03,434 on stmt: $const18.6 = const(int, 2)
DEBUG 2022-02-14 16:38:03,434 on stmt: $const22.8 = const(int, 1)
DEBUG 2022-02-14 16:38:03,434 on stmt: $24binary_add.9 = n + $const22.8
DEBUG 2022-02-14 16:38:03,434 on stmt: $26build_tuple.10 = build_tuple(items=[Var($const18.6, _loop_hafnian_subroutines.py:162), Var($24binary_add.9, _loop_hafnian_subroutines.py:162)])
DEBUG 2022-02-14 16:38:03,434 on stmt: $28load_global.11 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:38:03,434 on stmt: $30load_attr.12 = getattr(value=$28load_global.11, attr=complex128)
DEBUG 2022-02-14 16:38:03,434 on stmt: comb = call $16load_attr.5($26build_tuple.10, func=$16load_attr.5, args=[Var($26build_tuple.10, _loop_hafnian_subroutines.py:162)], kws=[('dtype', Var($30load_attr.12, _loop_hafnian_subroutines.py:162))], vararg=None, target=None)
DEBUG 2022-02-14 16:38:03,434 on stmt: $const38.15 = const(int, 1)
DEBUG 2022-02-14 16:38:03,434 on stmt: $const_0 = const(int, 0)
DEBUG 2022-02-14 16:38:03,434 on stmt: $const_0.1 = const(int, 0)
DEBUG 2022-02-14 16:38:03,434 on stmt: $const42.17 = build_tuple(items=[Var($const_0, _loop_hafnian_subroutines.py:163), Var($const_0.1, _loop_hafnian_subroutines.py:163)])
DEBUG 2022-02-14 16:38:03,435 on stmt: comb[(0, 0)] = $const38.15
DEBUG 2022-02-14 16:38:03,435 on stmt: $46load_global.18 = global(range: <class 'range'>)
DEBUG 2022-02-14 16:38:03,435 on stmt: $const48.19 = const(int, 1)
DEBUG 2022-02-14 16:38:03,435 on stmt: $const52.21 = const(int, 1)
DEBUG 2022-02-14 16:38:03,435 on stmt: $54binary_add.22 = n + $const52.21
DEBUG 2022-02-14 16:38:03,435 on stmt: $56call_function.23 = call $46load_global.18($const48.19, $54binary_add.22, func=$46load_global.18, args=[Var($const48.19, _loop_hafnian_subroutines.py:164), Var($54binary_add.22, _loop_hafnian_subroutines.py:164)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:03,435 on stmt: $58get_iter.24 = getiter(value=$56call_function.23)
DEBUG 2022-02-14 16:38:03,435 on stmt: $phi60.0 = $58get_iter.24
DEBUG 2022-02-14 16:38:03,435 on stmt: jump 60
DEBUG 2022-02-14 16:38:03,435 ==== SSA block rewrite pass on 60
DEBUG 2022-02-14 16:38:03,435 Running <numba.core.ssa._FreshVarHandler object at 0x7fa04671f4c0>
DEBUG 2022-02-14 16:38:03,435 on stmt: D_S.2 = phi(incoming_values=[Var(D_S, _loop_hafnian_subroutines.py:159), Var(D_S.3, _loop_hafnian_subroutines.py:168)], incoming_blocks=[0, 300])
DEBUG 2022-02-14 16:38:03,435 on stmt: $60for_iter.1 = iternext(value=$phi60.0)
DEBUG 2022-02-14 16:38:03,435 on stmt: $60for_iter.2 = pair_first(value=$60for_iter.1)
DEBUG 2022-02-14 16:38:03,435 on stmt: $60for_iter.3 = pair_second(value=$60for_iter.1)
DEBUG 2022-02-14 16:38:03,435 on stmt: $phi62.1 = $60for_iter.2
DEBUG 2022-02-14 16:38:03,435 on stmt: branch $60for_iter.3, 62, 302
DEBUG 2022-02-14 16:38:03,435 ==== SSA block rewrite pass on 62
DEBUG 2022-02-14 16:38:03,435 Running <numba.core.ssa._FreshVarHandler object at 0x7fa04671f4c0>
DEBUG 2022-02-14 16:38:03,435 on stmt: i = $phi62.1
DEBUG 2022-02-14 16:38:03,435 on stmt: $const66.3 = const(int, 1)
DEBUG 2022-02-14 16:38:03,435 on stmt: $68compare_op.4 = i == $const66.3
DEBUG 2022-02-14 16:38:03,435 on stmt: bool70 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:38:03,435 on stmt: $70pred = call bool70($68compare_op.4, func=bool70, args=(Var($68compare_op.4, _loop_hafnian_subroutines.py:165),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:03,436 on stmt: branch $70pred, 72, 78
DEBUG 2022-02-14 16:38:03,436 ==== SSA block rewrite pass on 72
DEBUG 2022-02-14 16:38:03,436 Running <numba.core.ssa._FreshVarHandler object at 0x7fa04671f4c0>
DEBUG 2022-02-14 16:38:03,436 on stmt: factor = oddloop
DEBUG 2022-02-14 16:38:03,436 on stmt: jump 140
DEBUG 2022-02-14 16:38:03,436 ==== SSA block rewrite pass on 78
DEBUG 2022-02-14 16:38:03,436 Running <numba.core.ssa._FreshVarHandler object at 0x7fa04671f4c0>
DEBUG 2022-02-14 16:38:03,436 on stmt: $const80.2 = const(int, 2)
DEBUG 2022-02-14 16:38:03,436 on stmt: $82binary_modulo.3 = i % $const80.2
DEBUG 2022-02-14 16:38:03,436 on stmt: $const84.4 = const(int, 0)
DEBUG 2022-02-14 16:38:03,436 on stmt: $86compare_op.5 = $82binary_modulo.3 == $const84.4
DEBUG 2022-02-14 16:38:03,436 on stmt: bool88 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:38:03,436 on stmt: $88pred = call bool88($86compare_op.5, func=bool88, args=(Var($86compare_op.5, _loop_hafnian_subroutines.py:167),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:03,436 on stmt: branch $88pred, 90, 124
DEBUG 2022-02-14 16:38:03,436 ==== SSA block rewrite pass on 90
DEBUG 2022-02-14 16:38:03,436 Running <numba.core.ssa._FreshVarHandler object at 0x7fa04671f4c0>
DEBUG 2022-02-14 16:38:03,436 on stmt: $92load_method.2 = getattr(value=E_k, attr=sum)
DEBUG 2022-02-14 16:38:03,436 on stmt: $94call_method.3 = call $92load_method.2(func=$92load_method.2, args=[], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:03,436 on stmt: $98binary_true_divide.5 = $94call_method.3 / i
DEBUG 2022-02-14 16:38:03,436 on stmt: $104binary_matrix_multiply.8 = XD_S <built-in function matmul> D_S.2
DEBUG 2022-02-14 16:38:03,436 on stmt: $const106.9 = const(int, 2)
DEBUG 2022-02-14 16:38:03,436 on stmt: $108binary_true_divide.10 = $104binary_matrix_multiply.8 / $const106.9
DEBUG 2022-02-14 16:38:03,436 on stmt: factor.1 = $98binary_true_divide.5 + $108binary_true_divide.10
DEBUG 2022-02-14 16:38:03,436 on stmt: $118inplace_multiply.14 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=E_k, rhs=E, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:38:03,436 on stmt: E_k = $118inplace_multiply.14
DEBUG 2022-02-14 16:38:03,437 replaced with: E_k.1 = $118inplace_multiply.14
DEBUG 2022-02-14 16:38:03,437 on stmt: jump 140
DEBUG 2022-02-14 16:38:03,437 ==== SSA block rewrite pass on 124
DEBUG 2022-02-14 16:38:03,437 Running <numba.core.ssa._FreshVarHandler object at 0x7fa04671f4c0>
DEBUG 2022-02-14 16:38:03,437 on stmt: factor.2 = oddVX_S <built-in function matmul> D_S.2
DEBUG 2022-02-14 16:38:03,437 on stmt: $136binary_matrix_multiply.6 = AX_S <built-in function matmul> D_S.2
DEBUG 2022-02-14 16:38:03,437 on stmt: D_S.1 = $136binary_matrix_multiply.6
DEBUG 2022-02-14 16:38:03,437 on stmt: jump 140
DEBUG 2022-02-14 16:38:03,437 ==== SSA block rewrite pass on 140
DEBUG 2022-02-14 16:38:03,437 Running <numba.core.ssa._FreshVarHandler object at 0x7fa04671f4c0>
DEBUG 2022-02-14 16:38:03,437 on stmt: D_S.3 = phi(incoming_values=[Var(D_S.2, _loop_hafnian_subroutines.py:168), Var(D_S.2, _loop_hafnian_subroutines.py:168), Var(D_S.1, _loop_hafnian_subroutines.py:172)], incoming_blocks=[72, 90, 124])
DEBUG 2022-02-14 16:38:03,437 on stmt: factor.3 = phi(incoming_values=[Var(factor, _loop_hafnian_subroutines.py:166), Var(factor.1, _loop_hafnian_subroutines.py:168), Var(factor.2, _loop_hafnian_subroutines.py:171)], incoming_blocks=[72, 90, 124])
DEBUG 2022-02-14 16:38:03,437 on stmt: powfactor = const(int, 1)
DEBUG 2022-02-14 16:38:03,437 on stmt: $const144.2 = const(int, 1)
DEBUG 2022-02-14 16:38:03,437 on stmt: $148binary_subtract.4 = $const144.2 - count
DEBUG 2022-02-14 16:38:03,437 on stmt: count = $148binary_subtract.4
DEBUG 2022-02-14 16:38:03,437 on stmt: $const154.6 = const(int, 1)
DEBUG 2022-02-14 16:38:03,437 on stmt: $158binary_subtract.8 = $const154.6 - count
DEBUG 2022-02-14 16:38:03,437 on stmt: $const160.9 = const(NoneType, None)
DEBUG 2022-02-14 16:38:03,437 on stmt: $const162.10 = const(NoneType, None)
DEBUG 2022-02-14 16:38:03,437 on stmt: $164build_slice.11 = global(slice: <class 'slice'>)
DEBUG 2022-02-14 16:38:03,437 on stmt: $164build_slice.12 = call $164build_slice.11($const160.9, $const162.10, func=$164build_slice.11, args=(Var($const160.9, _loop_hafnian_subroutines.py:176), Var($const162.10, _loop_hafnian_subroutines.py:176)), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:03,437 on stmt: $166build_tuple.13 = build_tuple(items=[Var($158binary_subtract.8, _loop_hafnian_subroutines.py:176), Var($164build_slice.12, _loop_hafnian_subroutines.py:176)])
DEBUG 2022-02-14 16:38:03,437 on stmt: $168binary_subscr.14 = getitem(value=comb, index=$166build_tuple.13, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:03,438 on stmt: $const174.17 = const(NoneType, None)
DEBUG 2022-02-14 16:38:03,438 on stmt: $const176.18 = const(NoneType, None)
DEBUG 2022-02-14 16:38:03,438 on stmt: $178build_slice.19 = global(slice: <class 'slice'>)
DEBUG 2022-02-14 16:38:03,438 on stmt: $178build_slice.20 = call $178build_slice.19($const174.17, $const176.18, func=$178build_slice.19, args=(Var($const174.17, _loop_hafnian_subroutines.py:176), Var($const176.18, _loop_hafnian_subroutines.py:176)), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:03,438 on stmt: $180build_tuple.21 = build_tuple(items=[Var(count, _loop_hafnian_subroutines.py:161), Var($178build_slice.20, _loop_hafnian_subroutines.py:176)])
DEBUG 2022-02-14 16:38:03,438 on stmt: comb[$180build_tuple.21] = $168binary_subscr.14
DEBUG 2022-02-14 16:38:03,438 on stmt: $184load_global.22 = global(range: <class 'range'>)
DEBUG 2022-02-14 16:38:03,438 on stmt: $const186.23 = const(int, 1)
DEBUG 2022-02-14 16:38:03,438 on stmt: $192binary_floor_divide.26 = n // i
DEBUG 2022-02-14 16:38:03,438 on stmt: $const194.27 = const(int, 1)
DEBUG 2022-02-14 16:38:03,438 on stmt: $196binary_add.28 = $192binary_floor_divide.26 + $const194.27
DEBUG 2022-02-14 16:38:03,438 on stmt: $198call_function.29 = call $184load_global.22($const186.23, $196binary_add.28, func=$184load_global.22, args=[Var($const186.23, _loop_hafnian_subroutines.py:177), Var($196binary_add.28, _loop_hafnian_subroutines.py:177)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:03,438 on stmt: $200get_iter.30 = getiter(value=$198call_function.29)
DEBUG 2022-02-14 16:38:03,438 on stmt: $phi202.1 = $200get_iter.30
DEBUG 2022-02-14 16:38:03,438 on stmt: jump 202
DEBUG 2022-02-14 16:38:03,438 ==== SSA block rewrite pass on 202
DEBUG 2022-02-14 16:38:03,438 Running <numba.core.ssa._FreshVarHandler object at 0x7fa04671f4c0>
DEBUG 2022-02-14 16:38:03,438 on stmt: powfactor.2 = phi(incoming_values=[Var(powfactor.1, _loop_hafnian_subroutines.py:178), Var(powfactor, _loop_hafnian_subroutines.py:174)], incoming_blocks=[298, 140])
DEBUG 2022-02-14 16:38:03,438 on stmt: $202for_iter.2 = iternext(value=$phi202.1)
DEBUG 2022-02-14 16:38:03,438 on stmt: $202for_iter.3 = pair_first(value=$202for_iter.2)
DEBUG 2022-02-14 16:38:03,438 on stmt: $202for_iter.4 = pair_second(value=$202for_iter.2)
DEBUG 2022-02-14 16:38:03,439 on stmt: $phi204.2 = $202for_iter.3
DEBUG 2022-02-14 16:38:03,439 on stmt: branch $202for_iter.4, 204, 300
DEBUG 2022-02-14 16:38:03,439 ==== SSA block rewrite pass on 204
DEBUG 2022-02-14 16:38:03,439 Running <numba.core.ssa._FreshVarHandler object at 0x7fa04671f4c0>
DEBUG 2022-02-14 16:38:03,439 on stmt: j = $phi204.2
DEBUG 2022-02-14 16:38:03,439 on stmt: $212binary_true_divide.6 = factor.3 / j
DEBUG 2022-02-14 16:38:03,439 on stmt: $214inplace_multiply.7 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=powfactor.2, rhs=$212binary_true_divide.6, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:38:03,439 on stmt: powfactor.1 = $214inplace_multiply.7
DEBUG 2022-02-14 16:38:03,439 on stmt: $218load_global.8 = global(range: <class 'range'>)
DEBUG 2022-02-14 16:38:03,439 on stmt: $224binary_multiply.11 = i * j
DEBUG 2022-02-14 16:38:03,439 on stmt: $const226.12 = const(int, 1)
DEBUG 2022-02-14 16:38:03,439 on stmt: $228binary_add.13 = $224binary_multiply.11 + $const226.12
DEBUG 2022-02-14 16:38:03,439 on stmt: $const232.15 = const(int, 2)
DEBUG 2022-02-14 16:38:03,439 on stmt: $234binary_add.16 = n + $const232.15
DEBUG 2022-02-14 16:38:03,439 on stmt: $236call_function.17 = call $218load_global.8($228binary_add.13, $234binary_add.16, func=$218load_global.8, args=[Var($228binary_add.13, _loop_hafnian_subroutines.py:179), Var($234binary_add.16, _loop_hafnian_subroutines.py:179)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:03,439 on stmt: $238get_iter.18 = getiter(value=$236call_function.17)
DEBUG 2022-02-14 16:38:03,439 on stmt: $phi240.2 = $238get_iter.18
DEBUG 2022-02-14 16:38:03,439 on stmt: jump 240
DEBUG 2022-02-14 16:38:03,439 ==== SSA block rewrite pass on 240
DEBUG 2022-02-14 16:38:03,439 Running <numba.core.ssa._FreshVarHandler object at 0x7fa04671f4c0>
DEBUG 2022-02-14 16:38:03,439 on stmt: $240for_iter.3 = iternext(value=$phi240.2)
DEBUG 2022-02-14 16:38:03,439 on stmt: $240for_iter.4 = pair_first(value=$240for_iter.3)
DEBUG 2022-02-14 16:38:03,439 on stmt: $240for_iter.5 = pair_second(value=$240for_iter.3)
DEBUG 2022-02-14 16:38:03,439 on stmt: $phi242.3 = $240for_iter.4
DEBUG 2022-02-14 16:38:03,439 on stmt: branch $240for_iter.5, 242, 298
DEBUG 2022-02-14 16:38:03,440 ==== SSA block rewrite pass on 242
DEBUG 2022-02-14 16:38:03,440 Running <numba.core.ssa._FreshVarHandler object at 0x7fa04671f4c0>
DEBUG 2022-02-14 16:38:03,440 on stmt: k = $phi242.3
DEBUG 2022-02-14 16:38:03,440 on stmt: $const250.7 = const(int, 1)
DEBUG 2022-02-14 16:38:03,440 on stmt: $252binary_subtract.8 = k - $const250.7
DEBUG 2022-02-14 16:38:03,440 on stmt: $254build_tuple.9 = build_tuple(items=[Var(count, _loop_hafnian_subroutines.py:161), Var($252binary_subtract.8, _loop_hafnian_subroutines.py:180)])
DEBUG 2022-02-14 16:38:03,440 on stmt: $258binary_subscr.12 = getitem(value=comb, index=$254build_tuple.9, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:03,440 on stmt: $const262.14 = const(int, 1)
DEBUG 2022-02-14 16:38:03,440 on stmt: $266binary_subtract.16 = $const262.14 - count
DEBUG 2022-02-14 16:38:03,440 on stmt: $274binary_multiply.20 = i * j
DEBUG 2022-02-14 16:38:03,440 on stmt: $276binary_subtract.21 = k - $274binary_multiply.20
DEBUG 2022-02-14 16:38:03,440 on stmt: $const278.22 = const(int, 1)
DEBUG 2022-02-14 16:38:03,440 on stmt: $280binary_subtract.23 = $276binary_subtract.21 - $const278.22
DEBUG 2022-02-14 16:38:03,440 on stmt: $282build_tuple.24 = build_tuple(items=[Var($266binary_subtract.16, _loop_hafnian_subroutines.py:180), Var($280binary_subtract.23, _loop_hafnian_subroutines.py:180)])
DEBUG 2022-02-14 16:38:03,440 on stmt: $284binary_subscr.25 = getitem(value=comb, index=$282build_tuple.24, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:03,440 on stmt: $288binary_multiply.27 = $284binary_subscr.25 * powfactor.1
DEBUG 2022-02-14 16:38:03,440 on stmt: $290inplace_add.28 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$258binary_subscr.12, rhs=$288binary_multiply.27, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:38:03,440 on stmt: comb[$254build_tuple.9] = $290inplace_add.28
DEBUG 2022-02-14 16:38:03,440 on stmt: jump 240
DEBUG 2022-02-14 16:38:03,440 ==== SSA block rewrite pass on 298
DEBUG 2022-02-14 16:38:03,440 Running <numba.core.ssa._FreshVarHandler object at 0x7fa04671f4c0>
DEBUG 2022-02-14 16:38:03,440 on stmt: jump 202
DEBUG 2022-02-14 16:38:03,440 ==== SSA block rewrite pass on 300
DEBUG 2022-02-14 16:38:03,440 Running <numba.core.ssa._FreshVarHandler object at 0x7fa04671f4c0>
DEBUG 2022-02-14 16:38:03,440 on stmt: jump 60
DEBUG 2022-02-14 16:38:03,440 ==== SSA block rewrite pass on 302
DEBUG 2022-02-14 16:38:03,441 Running <numba.core.ssa._FreshVarHandler object at 0x7fa04671f4c0>
DEBUG 2022-02-14 16:38:03,441 on stmt: $const306.2 = const(NoneType, None)
DEBUG 2022-02-14 16:38:03,441 on stmt: $const308.3 = const(NoneType, None)
DEBUG 2022-02-14 16:38:03,441 on stmt: $310build_slice.4 = global(slice: <class 'slice'>)
DEBUG 2022-02-14 16:38:03,441 on stmt: $310build_slice.5 = call $310build_slice.4($const306.2, $const308.3, func=$310build_slice.4, args=(Var($const306.2, _loop_hafnian_subroutines.py:182), Var($const308.3, _loop_hafnian_subroutines.py:182)), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:03,441 on stmt: $312build_tuple.6 = build_tuple(items=[Var(count, _loop_hafnian_subroutines.py:161), Var($310build_slice.5, _loop_hafnian_subroutines.py:182)])
DEBUG 2022-02-14 16:38:03,441 on stmt: $314binary_subscr.7 = getitem(value=comb, index=$312build_tuple.6, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:03,441 on stmt: $316return_value.8 = cast(value=$314binary_subscr.7)
DEBUG 2022-02-14 16:38:03,441 on stmt: return $316return_value.8
DEBUG 2022-02-14 16:38:03,441 Replaced assignments: defaultdict(<class 'list'>,
            {0: [<numba.core.ir.Assign object at 0x7fa046fbb910>],
             90: [<numba.core.ir.Assign object at 0x7fa0475fa5b0>]})
DEBUG 2022-02-14 16:38:03,441 ==== SSA block rewrite pass on 0
DEBUG 2022-02-14 16:38:03,441 Running <numba.core.ssa._FixSSAVars object at 0x7fa046710ac0>
DEBUG 2022-02-14 16:38:03,441 on stmt: E = arg(0, name=E)
DEBUG 2022-02-14 16:38:03,441 on stmt: AX_S = arg(1, name=AX_S)
DEBUG 2022-02-14 16:38:03,441 on stmt: XD_S = arg(2, name=XD_S)
DEBUG 2022-02-14 16:38:03,441 on stmt: D_S = arg(3, name=D_S)
DEBUG 2022-02-14 16:38:03,441 on stmt: n = arg(4, name=n)
DEBUG 2022-02-14 16:38:03,441 on stmt: oddloop = arg(5, name=oddloop)
DEBUG 2022-02-14 16:38:03,441 on stmt: oddVX_S = arg(6, name=oddVX_S)
DEBUG 2022-02-14 16:38:03,441 on stmt: $4load_method.1 = getattr(value=E, attr=copy)
DEBUG 2022-02-14 16:38:03,441 on stmt: E_k = call $4load_method.1(func=$4load_method.1, args=[], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:03,441 on stmt: count = const(int, 0)
DEBUG 2022-02-14 16:38:03,441 on stmt: $14load_global.4 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:38:03,442 on stmt: $16load_attr.5 = getattr(value=$14load_global.4, attr=zeros)
DEBUG 2022-02-14 16:38:03,442 on stmt: $const18.6 = const(int, 2)
DEBUG 2022-02-14 16:38:03,442 on stmt: $const22.8 = const(int, 1)
DEBUG 2022-02-14 16:38:03,442 on stmt: $24binary_add.9 = n + $const22.8
DEBUG 2022-02-14 16:38:03,442 on stmt: $26build_tuple.10 = build_tuple(items=[Var($const18.6, _loop_hafnian_subroutines.py:162), Var($24binary_add.9, _loop_hafnian_subroutines.py:162)])
DEBUG 2022-02-14 16:38:03,442 on stmt: $28load_global.11 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:38:03,442 on stmt: $30load_attr.12 = getattr(value=$28load_global.11, attr=complex128)
DEBUG 2022-02-14 16:38:03,442 on stmt: comb = call $16load_attr.5($26build_tuple.10, func=$16load_attr.5, args=[Var($26build_tuple.10, _loop_hafnian_subroutines.py:162)], kws=[('dtype', Var($30load_attr.12, _loop_hafnian_subroutines.py:162))], vararg=None, target=None)
DEBUG 2022-02-14 16:38:03,442 on stmt: $const38.15 = const(int, 1)
DEBUG 2022-02-14 16:38:03,442 on stmt: $const_0 = const(int, 0)
DEBUG 2022-02-14 16:38:03,442 on stmt: $const_0.1 = const(int, 0)
DEBUG 2022-02-14 16:38:03,442 on stmt: $const42.17 = build_tuple(items=[Var($const_0, _loop_hafnian_subroutines.py:163), Var($const_0.1, _loop_hafnian_subroutines.py:163)])
DEBUG 2022-02-14 16:38:03,442 on stmt: comb[(0, 0)] = $const38.15
DEBUG 2022-02-14 16:38:03,442 on stmt: $46load_global.18 = global(range: <class 'range'>)
DEBUG 2022-02-14 16:38:03,442 on stmt: $const48.19 = const(int, 1)
DEBUG 2022-02-14 16:38:03,443 on stmt: $const52.21 = const(int, 1)
DEBUG 2022-02-14 16:38:03,443 on stmt: $54binary_add.22 = n + $const52.21
DEBUG 2022-02-14 16:38:03,443 on stmt: $56call_function.23 = call $46load_global.18($const48.19, $54binary_add.22, func=$46load_global.18, args=[Var($const48.19, _loop_hafnian_subroutines.py:164), Var($54binary_add.22, _loop_hafnian_subroutines.py:164)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:03,443 on stmt: $58get_iter.24 = getiter(value=$56call_function.23)
DEBUG 2022-02-14 16:38:03,443 on stmt: $phi60.0 = $58get_iter.24
DEBUG 2022-02-14 16:38:03,443 on stmt: jump 60
DEBUG 2022-02-14 16:38:03,443 ==== SSA block rewrite pass on 60
DEBUG 2022-02-14 16:38:03,443 Running <numba.core.ssa._FixSSAVars object at 0x7fa046710ac0>
DEBUG 2022-02-14 16:38:03,443 on stmt: D_S.2 = phi(incoming_values=[Var(D_S, _loop_hafnian_subroutines.py:159), Var(D_S.3, _loop_hafnian_subroutines.py:168)], incoming_blocks=[0, 300])
DEBUG 2022-02-14 16:38:03,443 on stmt: $60for_iter.1 = iternext(value=$phi60.0)
DEBUG 2022-02-14 16:38:03,443 on stmt: $60for_iter.2 = pair_first(value=$60for_iter.1)
DEBUG 2022-02-14 16:38:03,443 on stmt: $60for_iter.3 = pair_second(value=$60for_iter.1)
DEBUG 2022-02-14 16:38:03,443 on stmt: $phi62.1 = $60for_iter.2
DEBUG 2022-02-14 16:38:03,443 on stmt: branch $60for_iter.3, 62, 302
DEBUG 2022-02-14 16:38:03,443 ==== SSA block rewrite pass on 62
DEBUG 2022-02-14 16:38:03,443 Running <numba.core.ssa._FixSSAVars object at 0x7fa046710ac0>
DEBUG 2022-02-14 16:38:03,443 on stmt: i = $phi62.1
DEBUG 2022-02-14 16:38:03,443 on stmt: $const66.3 = const(int, 1)
DEBUG 2022-02-14 16:38:03,444 on stmt: $68compare_op.4 = i == $const66.3
DEBUG 2022-02-14 16:38:03,444 on stmt: bool70 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:38:03,444 on stmt: $70pred = call bool70($68compare_op.4, func=bool70, args=(Var($68compare_op.4, _loop_hafnian_subroutines.py:165),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:03,444 on stmt: branch $70pred, 72, 78
DEBUG 2022-02-14 16:38:03,444 ==== SSA block rewrite pass on 72
DEBUG 2022-02-14 16:38:03,444 Running <numba.core.ssa._FixSSAVars object at 0x7fa046710ac0>
DEBUG 2022-02-14 16:38:03,444 on stmt: factor = oddloop
DEBUG 2022-02-14 16:38:03,444 on stmt: jump 140
DEBUG 2022-02-14 16:38:03,444 ==== SSA block rewrite pass on 78
DEBUG 2022-02-14 16:38:03,444 Running <numba.core.ssa._FixSSAVars object at 0x7fa046710ac0>
DEBUG 2022-02-14 16:38:03,444 on stmt: $const80.2 = const(int, 2)
DEBUG 2022-02-14 16:38:03,444 on stmt: $82binary_modulo.3 = i % $const80.2
DEBUG 2022-02-14 16:38:03,444 on stmt: $const84.4 = const(int, 0)
DEBUG 2022-02-14 16:38:03,444 on stmt: $86compare_op.5 = $82binary_modulo.3 == $const84.4
DEBUG 2022-02-14 16:38:03,444 on stmt: bool88 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:38:03,444 on stmt: $88pred = call bool88($86compare_op.5, func=bool88, args=(Var($86compare_op.5, _loop_hafnian_subroutines.py:167),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:03,444 on stmt: branch $88pred, 90, 124
DEBUG 2022-02-14 16:38:03,444 ==== SSA block rewrite pass on 90
DEBUG 2022-02-14 16:38:03,444 Running <numba.core.ssa._FixSSAVars object at 0x7fa046710ac0>
DEBUG 2022-02-14 16:38:03,444 on stmt: $92load_method.2 = getattr(value=E_k, attr=sum)
DEBUG 2022-02-14 16:38:03,444 find_def var='E_k' stmt=$92load_method.2 = getattr(value=E_k, attr=sum)
DEBUG 2022-02-14 16:38:03,444 find_def_from_top label 90
DEBUG 2022-02-14 16:38:03,444 idom 78 from label 90
DEBUG 2022-02-14 16:38:03,444 find_def_from_bottom label 78
DEBUG 2022-02-14 16:38:03,444 find_def_from_top label 78
DEBUG 2022-02-14 16:38:03,445 idom 62 from label 78
DEBUG 2022-02-14 16:38:03,445 find_def_from_bottom label 62
DEBUG 2022-02-14 16:38:03,445 find_def_from_top label 62
DEBUG 2022-02-14 16:38:03,445 idom 60 from label 62
DEBUG 2022-02-14 16:38:03,445 find_def_from_bottom label 60
DEBUG 2022-02-14 16:38:03,445 find_def_from_top label 60
DEBUG 2022-02-14 16:38:03,445 insert phi node E_k.2 = phi(incoming_values=[], incoming_blocks=[]) at 60
DEBUG 2022-02-14 16:38:03,445 find_def_from_bottom label 0
DEBUG 2022-02-14 16:38:03,445 incoming_def E_k = call $4load_method.1(func=$4load_method.1, args=[], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:03,445 find_def_from_bottom label 300
DEBUG 2022-02-14 16:38:03,445 find_def_from_top label 300
DEBUG 2022-02-14 16:38:03,445 idom 202 from label 300
DEBUG 2022-02-14 16:38:03,445 find_def_from_bottom label 202
DEBUG 2022-02-14 16:38:03,445 find_def_from_top label 202
DEBUG 2022-02-14 16:38:03,445 idom 140 from label 202
DEBUG 2022-02-14 16:38:03,445 find_def_from_bottom label 140
DEBUG 2022-02-14 16:38:03,445 find_def_from_top label 140
DEBUG 2022-02-14 16:38:03,445 insert phi node E_k.3 = phi(incoming_values=[], incoming_blocks=[]) at 140
DEBUG 2022-02-14 16:38:03,445 find_def_from_bottom label 72
DEBUG 2022-02-14 16:38:03,445 find_def_from_top label 72
DEBUG 2022-02-14 16:38:03,445 idom 62 from label 72
DEBUG 2022-02-14 16:38:03,445 find_def_from_bottom label 62
DEBUG 2022-02-14 16:38:03,445 find_def_from_top label 62
DEBUG 2022-02-14 16:38:03,445 idom 60 from label 62
DEBUG 2022-02-14 16:38:03,445 find_def_from_bottom label 60
DEBUG 2022-02-14 16:38:03,445 incoming_def E_k.2 = phi(incoming_values=[Var(E_k, _loop_hafnian_subroutines.py:159)], incoming_blocks=[0])
DEBUG 2022-02-14 16:38:03,445 find_def_from_bottom label 90
DEBUG 2022-02-14 16:38:03,446 incoming_def E_k.1 = $118inplace_multiply.14
DEBUG 2022-02-14 16:38:03,446 find_def_from_bottom label 124
DEBUG 2022-02-14 16:38:03,446 find_def_from_top label 124
DEBUG 2022-02-14 16:38:03,446 idom 78 from label 124
DEBUG 2022-02-14 16:38:03,446 find_def_from_bottom label 78
DEBUG 2022-02-14 16:38:03,446 find_def_from_top label 78
DEBUG 2022-02-14 16:38:03,446 idom 62 from label 78
DEBUG 2022-02-14 16:38:03,446 find_def_from_bottom label 62
DEBUG 2022-02-14 16:38:03,446 find_def_from_top label 62
DEBUG 2022-02-14 16:38:03,446 idom 60 from label 62
DEBUG 2022-02-14 16:38:03,446 find_def_from_bottom label 60
DEBUG 2022-02-14 16:38:03,446 incoming_def E_k.2 = phi(incoming_values=[Var(E_k, _loop_hafnian_subroutines.py:159)], incoming_blocks=[0])
DEBUG 2022-02-14 16:38:03,446 incoming_def E_k.3 = phi(incoming_values=[Var(E_k.2, _loop_hafnian_subroutines.py:168), Var(E_k.1, _loop_hafnian_subroutines.py:169), Var(E_k.2, _loop_hafnian_subroutines.py:168)], incoming_blocks=[72, 90, 124])
DEBUG 2022-02-14 16:38:03,446 replaced with: $92load_method.2 = getattr(value=E_k.2, attr=sum)
DEBUG 2022-02-14 16:38:03,446 on stmt: $94call_method.3 = call $92load_method.2(func=$92load_method.2, args=[], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:03,446 on stmt: $98binary_true_divide.5 = $94call_method.3 / i
DEBUG 2022-02-14 16:38:03,446 on stmt: $104binary_matrix_multiply.8 = XD_S <built-in function matmul> D_S.2
DEBUG 2022-02-14 16:38:03,446 on stmt: $const106.9 = const(int, 2)
DEBUG 2022-02-14 16:38:03,446 on stmt: $108binary_true_divide.10 = $104binary_matrix_multiply.8 / $const106.9
DEBUG 2022-02-14 16:38:03,446 on stmt: factor.1 = $98binary_true_divide.5 + $108binary_true_divide.10
DEBUG 2022-02-14 16:38:03,446 on stmt: $118inplace_multiply.14 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=E_k, rhs=E, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:38:03,446 find_def var='E_k' stmt=$118inplace_multiply.14 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=E_k, rhs=E, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:38:03,446 find_def_from_top label 90
DEBUG 2022-02-14 16:38:03,446 idom 78 from label 90
DEBUG 2022-02-14 16:38:03,447 find_def_from_bottom label 78
DEBUG 2022-02-14 16:38:03,447 find_def_from_top label 78
DEBUG 2022-02-14 16:38:03,447 idom 62 from label 78
DEBUG 2022-02-14 16:38:03,447 find_def_from_bottom label 62
DEBUG 2022-02-14 16:38:03,447 find_def_from_top label 62
DEBUG 2022-02-14 16:38:03,447 idom 60 from label 62
DEBUG 2022-02-14 16:38:03,447 find_def_from_bottom label 60
DEBUG 2022-02-14 16:38:03,447 replaced with: $118inplace_multiply.14 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=E_k.2, rhs=E, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:38:03,447 on stmt: E_k.1 = $118inplace_multiply.14
DEBUG 2022-02-14 16:38:03,447 on stmt: jump 140
DEBUG 2022-02-14 16:38:03,447 ==== SSA block rewrite pass on 124
DEBUG 2022-02-14 16:38:03,447 Running <numba.core.ssa._FixSSAVars object at 0x7fa046710ac0>
DEBUG 2022-02-14 16:38:03,447 on stmt: factor.2 = oddVX_S <built-in function matmul> D_S.2
DEBUG 2022-02-14 16:38:03,447 on stmt: $136binary_matrix_multiply.6 = AX_S <built-in function matmul> D_S.2
DEBUG 2022-02-14 16:38:03,447 on stmt: D_S.1 = $136binary_matrix_multiply.6
DEBUG 2022-02-14 16:38:03,447 on stmt: jump 140
DEBUG 2022-02-14 16:38:03,447 ==== SSA block rewrite pass on 140
DEBUG 2022-02-14 16:38:03,447 Running <numba.core.ssa._FixSSAVars object at 0x7fa046710ac0>
DEBUG 2022-02-14 16:38:03,447 on stmt: D_S.3 = phi(incoming_values=[Var(D_S.2, _loop_hafnian_subroutines.py:168), Var(D_S.2, _loop_hafnian_subroutines.py:168), Var(D_S.1, _loop_hafnian_subroutines.py:172)], incoming_blocks=[72, 90, 124])
DEBUG 2022-02-14 16:38:03,447 on stmt: factor.3 = phi(incoming_values=[Var(factor, _loop_hafnian_subroutines.py:166), Var(factor.1, _loop_hafnian_subroutines.py:168), Var(factor.2, _loop_hafnian_subroutines.py:171)], incoming_blocks=[72, 90, 124])
DEBUG 2022-02-14 16:38:03,447 on stmt: powfactor = const(int, 1)
DEBUG 2022-02-14 16:38:03,447 on stmt: $const144.2 = const(int, 1)
DEBUG 2022-02-14 16:38:03,447 on stmt: $148binary_subtract.4 = $const144.2 - count
DEBUG 2022-02-14 16:38:03,447 on stmt: count = $148binary_subtract.4
DEBUG 2022-02-14 16:38:03,447 on stmt: $const154.6 = const(int, 1)
DEBUG 2022-02-14 16:38:03,448 on stmt: $158binary_subtract.8 = $const154.6 - count
DEBUG 2022-02-14 16:38:03,448 on stmt: $const160.9 = const(NoneType, None)
DEBUG 2022-02-14 16:38:03,448 on stmt: $const162.10 = const(NoneType, None)
DEBUG 2022-02-14 16:38:03,448 on stmt: $164build_slice.11 = global(slice: <class 'slice'>)
DEBUG 2022-02-14 16:38:03,448 on stmt: $164build_slice.12 = call $164build_slice.11($const160.9, $const162.10, func=$164build_slice.11, args=(Var($const160.9, _loop_hafnian_subroutines.py:176), Var($const162.10, _loop_hafnian_subroutines.py:176)), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:03,448 on stmt: $166build_tuple.13 = build_tuple(items=[Var($158binary_subtract.8, _loop_hafnian_subroutines.py:176), Var($164build_slice.12, _loop_hafnian_subroutines.py:176)])
DEBUG 2022-02-14 16:38:03,448 on stmt: $168binary_subscr.14 = getitem(value=comb, index=$166build_tuple.13, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:03,448 on stmt: $const174.17 = const(NoneType, None)
DEBUG 2022-02-14 16:38:03,448 on stmt: $const176.18 = const(NoneType, None)
DEBUG 2022-02-14 16:38:03,448 on stmt: $178build_slice.19 = global(slice: <class 'slice'>)
DEBUG 2022-02-14 16:38:03,448 on stmt: $178build_slice.20 = call $178build_slice.19($const174.17, $const176.18, func=$178build_slice.19, args=(Var($const174.17, _loop_hafnian_subroutines.py:176), Var($const176.18, _loop_hafnian_subroutines.py:176)), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:03,448 on stmt: $180build_tuple.21 = build_tuple(items=[Var(count, _loop_hafnian_subroutines.py:161), Var($178build_slice.20, _loop_hafnian_subroutines.py:176)])
DEBUG 2022-02-14 16:38:03,448 on stmt: comb[$180build_tuple.21] = $168binary_subscr.14
DEBUG 2022-02-14 16:38:03,448 on stmt: $184load_global.22 = global(range: <class 'range'>)
DEBUG 2022-02-14 16:38:03,448 on stmt: $const186.23 = const(int, 1)
DEBUG 2022-02-14 16:38:03,448 on stmt: $192binary_floor_divide.26 = n // i
DEBUG 2022-02-14 16:38:03,448 on stmt: $const194.27 = const(int, 1)
DEBUG 2022-02-14 16:38:03,448 on stmt: $196binary_add.28 = $192binary_floor_divide.26 + $const194.27
DEBUG 2022-02-14 16:38:03,448 on stmt: $198call_function.29 = call $184load_global.22($const186.23, $196binary_add.28, func=$184load_global.22, args=[Var($const186.23, _loop_hafnian_subroutines.py:177), Var($196binary_add.28, _loop_hafnian_subroutines.py:177)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:03,448 on stmt: $200get_iter.30 = getiter(value=$198call_function.29)
DEBUG 2022-02-14 16:38:03,448 on stmt: $phi202.1 = $200get_iter.30
DEBUG 2022-02-14 16:38:03,448 on stmt: jump 202
DEBUG 2022-02-14 16:38:03,448 ==== SSA block rewrite pass on 202
DEBUG 2022-02-14 16:38:03,448 Running <numba.core.ssa._FixSSAVars object at 0x7fa046710ac0>
DEBUG 2022-02-14 16:38:03,449 on stmt: powfactor.2 = phi(incoming_values=[Var(powfactor.1, _loop_hafnian_subroutines.py:178), Var(powfactor, _loop_hafnian_subroutines.py:174)], incoming_blocks=[298, 140])
DEBUG 2022-02-14 16:38:03,449 on stmt: $202for_iter.2 = iternext(value=$phi202.1)
DEBUG 2022-02-14 16:38:03,449 on stmt: $202for_iter.3 = pair_first(value=$202for_iter.2)
DEBUG 2022-02-14 16:38:03,449 on stmt: $202for_iter.4 = pair_second(value=$202for_iter.2)
DEBUG 2022-02-14 16:38:03,449 on stmt: $phi204.2 = $202for_iter.3
DEBUG 2022-02-14 16:38:03,449 on stmt: branch $202for_iter.4, 204, 300
DEBUG 2022-02-14 16:38:03,449 ==== SSA block rewrite pass on 204
DEBUG 2022-02-14 16:38:03,449 Running <numba.core.ssa._FixSSAVars object at 0x7fa046710ac0>
DEBUG 2022-02-14 16:38:03,449 on stmt: j = $phi204.2
DEBUG 2022-02-14 16:38:03,449 on stmt: $212binary_true_divide.6 = factor.3 / j
DEBUG 2022-02-14 16:38:03,449 on stmt: $214inplace_multiply.7 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=powfactor.2, rhs=$212binary_true_divide.6, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:38:03,449 on stmt: powfactor.1 = $214inplace_multiply.7
DEBUG 2022-02-14 16:38:03,449 on stmt: $218load_global.8 = global(range: <class 'range'>)
DEBUG 2022-02-14 16:38:03,449 on stmt: $224binary_multiply.11 = i * j
DEBUG 2022-02-14 16:38:03,449 on stmt: $const226.12 = const(int, 1)
DEBUG 2022-02-14 16:38:03,449 on stmt: $228binary_add.13 = $224binary_multiply.11 + $const226.12
DEBUG 2022-02-14 16:38:03,449 on stmt: $const232.15 = const(int, 2)
DEBUG 2022-02-14 16:38:03,449 on stmt: $234binary_add.16 = n + $const232.15
DEBUG 2022-02-14 16:38:03,449 on stmt: $236call_function.17 = call $218load_global.8($228binary_add.13, $234binary_add.16, func=$218load_global.8, args=[Var($228binary_add.13, _loop_hafnian_subroutines.py:179), Var($234binary_add.16, _loop_hafnian_subroutines.py:179)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:03,449 on stmt: $238get_iter.18 = getiter(value=$236call_function.17)
DEBUG 2022-02-14 16:38:03,449 on stmt: $phi240.2 = $238get_iter.18
DEBUG 2022-02-14 16:38:03,449 on stmt: jump 240
DEBUG 2022-02-14 16:38:03,449 ==== SSA block rewrite pass on 240
DEBUG 2022-02-14 16:38:03,449 Running <numba.core.ssa._FixSSAVars object at 0x7fa046710ac0>
DEBUG 2022-02-14 16:38:03,449 on stmt: $240for_iter.3 = iternext(value=$phi240.2)
DEBUG 2022-02-14 16:38:03,450 on stmt: $240for_iter.4 = pair_first(value=$240for_iter.3)
DEBUG 2022-02-14 16:38:03,450 on stmt: $240for_iter.5 = pair_second(value=$240for_iter.3)
DEBUG 2022-02-14 16:38:03,450 on stmt: $phi242.3 = $240for_iter.4
DEBUG 2022-02-14 16:38:03,450 on stmt: branch $240for_iter.5, 242, 298
DEBUG 2022-02-14 16:38:03,450 ==== SSA block rewrite pass on 242
DEBUG 2022-02-14 16:38:03,450 Running <numba.core.ssa._FixSSAVars object at 0x7fa046710ac0>
DEBUG 2022-02-14 16:38:03,450 on stmt: k = $phi242.3
DEBUG 2022-02-14 16:38:03,450 on stmt: $const250.7 = const(int, 1)
DEBUG 2022-02-14 16:38:03,450 on stmt: $252binary_subtract.8 = k - $const250.7
DEBUG 2022-02-14 16:38:03,450 on stmt: $254build_tuple.9 = build_tuple(items=[Var(count, _loop_hafnian_subroutines.py:161), Var($252binary_subtract.8, _loop_hafnian_subroutines.py:180)])
DEBUG 2022-02-14 16:38:03,450 on stmt: $258binary_subscr.12 = getitem(value=comb, index=$254build_tuple.9, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:03,450 on stmt: $const262.14 = const(int, 1)
DEBUG 2022-02-14 16:38:03,450 on stmt: $266binary_subtract.16 = $const262.14 - count
DEBUG 2022-02-14 16:38:03,450 on stmt: $274binary_multiply.20 = i * j
DEBUG 2022-02-14 16:38:03,450 on stmt: $276binary_subtract.21 = k - $274binary_multiply.20
DEBUG 2022-02-14 16:38:03,450 on stmt: $const278.22 = const(int, 1)
DEBUG 2022-02-14 16:38:03,450 on stmt: $280binary_subtract.23 = $276binary_subtract.21 - $const278.22
DEBUG 2022-02-14 16:38:03,450 on stmt: $282build_tuple.24 = build_tuple(items=[Var($266binary_subtract.16, _loop_hafnian_subroutines.py:180), Var($280binary_subtract.23, _loop_hafnian_subroutines.py:180)])
DEBUG 2022-02-14 16:38:03,450 on stmt: $284binary_subscr.25 = getitem(value=comb, index=$282build_tuple.24, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:03,450 on stmt: $288binary_multiply.27 = $284binary_subscr.25 * powfactor.1
DEBUG 2022-02-14 16:38:03,450 on stmt: $290inplace_add.28 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$258binary_subscr.12, rhs=$288binary_multiply.27, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:38:03,450 on stmt: comb[$254build_tuple.9] = $290inplace_add.28
DEBUG 2022-02-14 16:38:03,450 on stmt: jump 240
DEBUG 2022-02-14 16:38:03,450 ==== SSA block rewrite pass on 298
DEBUG 2022-02-14 16:38:03,451 Running <numba.core.ssa._FixSSAVars object at 0x7fa046710ac0>
DEBUG 2022-02-14 16:38:03,451 on stmt: jump 202
DEBUG 2022-02-14 16:38:03,451 ==== SSA block rewrite pass on 300
DEBUG 2022-02-14 16:38:03,451 Running <numba.core.ssa._FixSSAVars object at 0x7fa046710ac0>
DEBUG 2022-02-14 16:38:03,451 on stmt: jump 60
DEBUG 2022-02-14 16:38:03,451 ==== SSA block rewrite pass on 302
DEBUG 2022-02-14 16:38:03,451 Running <numba.core.ssa._FixSSAVars object at 0x7fa046710ac0>
DEBUG 2022-02-14 16:38:03,451 on stmt: $const306.2 = const(NoneType, None)
DEBUG 2022-02-14 16:38:03,451 on stmt: $const308.3 = const(NoneType, None)
DEBUG 2022-02-14 16:38:03,451 on stmt: $310build_slice.4 = global(slice: <class 'slice'>)
DEBUG 2022-02-14 16:38:03,451 on stmt: $310build_slice.5 = call $310build_slice.4($const306.2, $const308.3, func=$310build_slice.4, args=(Var($const306.2, _loop_hafnian_subroutines.py:182), Var($const308.3, _loop_hafnian_subroutines.py:182)), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:03,451 on stmt: $312build_tuple.6 = build_tuple(items=[Var(count, _loop_hafnian_subroutines.py:161), Var($310build_slice.5, _loop_hafnian_subroutines.py:182)])
DEBUG 2022-02-14 16:38:03,451 on stmt: $314binary_subscr.7 = getitem(value=comb, index=$312build_tuple.6, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:03,451 on stmt: $316return_value.8 = cast(value=$314binary_subscr.7)
DEBUG 2022-02-14 16:38:03,451 on stmt: return $316return_value.8
DEBUG 2022-02-14 16:38:03,451 Fix SSA violator on var count
DEBUG 2022-02-14 16:38:03,451 ==== SSA block rewrite pass on 0
DEBUG 2022-02-14 16:38:03,451 Running <numba.core.ssa._FreshVarHandler object at 0x7fa0474da9a0>
DEBUG 2022-02-14 16:38:03,451 on stmt: E = arg(0, name=E)
DEBUG 2022-02-14 16:38:03,451 on stmt: AX_S = arg(1, name=AX_S)
DEBUG 2022-02-14 16:38:03,451 on stmt: XD_S = arg(2, name=XD_S)
DEBUG 2022-02-14 16:38:03,451 on stmt: D_S = arg(3, name=D_S)
DEBUG 2022-02-14 16:38:03,451 on stmt: n = arg(4, name=n)
DEBUG 2022-02-14 16:38:03,451 on stmt: oddloop = arg(5, name=oddloop)
DEBUG 2022-02-14 16:38:03,452 on stmt: oddVX_S = arg(6, name=oddVX_S)
DEBUG 2022-02-14 16:38:03,452 on stmt: $4load_method.1 = getattr(value=E, attr=copy)
DEBUG 2022-02-14 16:38:03,452 on stmt: E_k = call $4load_method.1(func=$4load_method.1, args=[], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:03,452 on stmt: count = const(int, 0)
DEBUG 2022-02-14 16:38:03,452 first assign: count
DEBUG 2022-02-14 16:38:03,452 replaced with: count = const(int, 0)
DEBUG 2022-02-14 16:38:03,452 on stmt: $14load_global.4 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:38:03,452 on stmt: $16load_attr.5 = getattr(value=$14load_global.4, attr=zeros)
DEBUG 2022-02-14 16:38:03,452 on stmt: $const18.6 = const(int, 2)
DEBUG 2022-02-14 16:38:03,452 on stmt: $const22.8 = const(int, 1)
DEBUG 2022-02-14 16:38:03,452 on stmt: $24binary_add.9 = n + $const22.8
DEBUG 2022-02-14 16:38:03,452 on stmt: $26build_tuple.10 = build_tuple(items=[Var($const18.6, _loop_hafnian_subroutines.py:162), Var($24binary_add.9, _loop_hafnian_subroutines.py:162)])
DEBUG 2022-02-14 16:38:03,452 on stmt: $28load_global.11 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:38:03,452 on stmt: $30load_attr.12 = getattr(value=$28load_global.11, attr=complex128)
DEBUG 2022-02-14 16:38:03,452 on stmt: comb = call $16load_attr.5($26build_tuple.10, func=$16load_attr.5, args=[Var($26build_tuple.10, _loop_hafnian_subroutines.py:162)], kws=[('dtype', Var($30load_attr.12, _loop_hafnian_subroutines.py:162))], vararg=None, target=None)
DEBUG 2022-02-14 16:38:03,452 on stmt: $const38.15 = const(int, 1)
DEBUG 2022-02-14 16:38:03,452 on stmt: $const_0 = const(int, 0)
DEBUG 2022-02-14 16:38:03,452 on stmt: $const_0.1 = const(int, 0)
DEBUG 2022-02-14 16:38:03,452 on stmt: $const42.17 = build_tuple(items=[Var($const_0, _loop_hafnian_subroutines.py:163), Var($const_0.1, _loop_hafnian_subroutines.py:163)])
DEBUG 2022-02-14 16:38:03,452 on stmt: comb[(0, 0)] = $const38.15
DEBUG 2022-02-14 16:38:03,452 on stmt: $46load_global.18 = global(range: <class 'range'>)
DEBUG 2022-02-14 16:38:03,452 on stmt: $const48.19 = const(int, 1)
DEBUG 2022-02-14 16:38:03,452 on stmt: $const52.21 = const(int, 1)
DEBUG 2022-02-14 16:38:03,452 on stmt: $54binary_add.22 = n + $const52.21
DEBUG 2022-02-14 16:38:03,453 on stmt: $56call_function.23 = call $46load_global.18($const48.19, $54binary_add.22, func=$46load_global.18, args=[Var($const48.19, _loop_hafnian_subroutines.py:164), Var($54binary_add.22, _loop_hafnian_subroutines.py:164)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:03,453 on stmt: $58get_iter.24 = getiter(value=$56call_function.23)
DEBUG 2022-02-14 16:38:03,453 on stmt: $phi60.0 = $58get_iter.24
DEBUG 2022-02-14 16:38:03,453 on stmt: jump 60
DEBUG 2022-02-14 16:38:03,453 ==== SSA block rewrite pass on 60
DEBUG 2022-02-14 16:38:03,453 Running <numba.core.ssa._FreshVarHandler object at 0x7fa0474da9a0>
DEBUG 2022-02-14 16:38:03,453 on stmt: E_k.2 = phi(incoming_values=[Var(E_k, _loop_hafnian_subroutines.py:159), Var(E_k.3, _loop_hafnian_subroutines.py:168)], incoming_blocks=[0, 300])
DEBUG 2022-02-14 16:38:03,453 on stmt: D_S.2 = phi(incoming_values=[Var(D_S, _loop_hafnian_subroutines.py:159), Var(D_S.3, _loop_hafnian_subroutines.py:168)], incoming_blocks=[0, 300])
DEBUG 2022-02-14 16:38:03,453 on stmt: $60for_iter.1 = iternext(value=$phi60.0)
DEBUG 2022-02-14 16:38:03,453 on stmt: $60for_iter.2 = pair_first(value=$60for_iter.1)
DEBUG 2022-02-14 16:38:03,453 on stmt: $60for_iter.3 = pair_second(value=$60for_iter.1)
DEBUG 2022-02-14 16:38:03,453 on stmt: $phi62.1 = $60for_iter.2
DEBUG 2022-02-14 16:38:03,453 on stmt: branch $60for_iter.3, 62, 302
DEBUG 2022-02-14 16:38:03,453 ==== SSA block rewrite pass on 62
DEBUG 2022-02-14 16:38:03,453 Running <numba.core.ssa._FreshVarHandler object at 0x7fa0474da9a0>
DEBUG 2022-02-14 16:38:03,453 on stmt: i = $phi62.1
DEBUG 2022-02-14 16:38:03,453 on stmt: $const66.3 = const(int, 1)
DEBUG 2022-02-14 16:38:03,453 on stmt: $68compare_op.4 = i == $const66.3
DEBUG 2022-02-14 16:38:03,453 on stmt: bool70 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:38:03,453 on stmt: $70pred = call bool70($68compare_op.4, func=bool70, args=(Var($68compare_op.4, _loop_hafnian_subroutines.py:165),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:03,453 on stmt: branch $70pred, 72, 78
DEBUG 2022-02-14 16:38:03,453 ==== SSA block rewrite pass on 72
DEBUG 2022-02-14 16:38:03,453 Running <numba.core.ssa._FreshVarHandler object at 0x7fa0474da9a0>
DEBUG 2022-02-14 16:38:03,453 on stmt: factor = oddloop
DEBUG 2022-02-14 16:38:03,453 on stmt: jump 140
DEBUG 2022-02-14 16:38:03,454 ==== SSA block rewrite pass on 78
DEBUG 2022-02-14 16:38:03,454 Running <numba.core.ssa._FreshVarHandler object at 0x7fa0474da9a0>
DEBUG 2022-02-14 16:38:03,454 on stmt: $const80.2 = const(int, 2)
DEBUG 2022-02-14 16:38:03,454 on stmt: $82binary_modulo.3 = i % $const80.2
DEBUG 2022-02-14 16:38:03,454 on stmt: $const84.4 = const(int, 0)
DEBUG 2022-02-14 16:38:03,454 on stmt: $86compare_op.5 = $82binary_modulo.3 == $const84.4
DEBUG 2022-02-14 16:38:03,454 on stmt: bool88 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:38:03,454 on stmt: $88pred = call bool88($86compare_op.5, func=bool88, args=(Var($86compare_op.5, _loop_hafnian_subroutines.py:167),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:03,454 on stmt: branch $88pred, 90, 124
DEBUG 2022-02-14 16:38:03,454 ==== SSA block rewrite pass on 90
DEBUG 2022-02-14 16:38:03,454 Running <numba.core.ssa._FreshVarHandler object at 0x7fa0474da9a0>
DEBUG 2022-02-14 16:38:03,454 on stmt: $92load_method.2 = getattr(value=E_k.2, attr=sum)
DEBUG 2022-02-14 16:38:03,454 on stmt: $94call_method.3 = call $92load_method.2(func=$92load_method.2, args=[], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:03,454 on stmt: $98binary_true_divide.5 = $94call_method.3 / i
DEBUG 2022-02-14 16:38:03,454 on stmt: $104binary_matrix_multiply.8 = XD_S <built-in function matmul> D_S.2
DEBUG 2022-02-14 16:38:03,454 on stmt: $const106.9 = const(int, 2)
DEBUG 2022-02-14 16:38:03,454 on stmt: $108binary_true_divide.10 = $104binary_matrix_multiply.8 / $const106.9
DEBUG 2022-02-14 16:38:03,454 on stmt: factor.1 = $98binary_true_divide.5 + $108binary_true_divide.10
DEBUG 2022-02-14 16:38:03,454 on stmt: $118inplace_multiply.14 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=E_k.2, rhs=E, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:38:03,454 on stmt: E_k.1 = $118inplace_multiply.14
DEBUG 2022-02-14 16:38:03,454 on stmt: jump 140
DEBUG 2022-02-14 16:38:03,454 ==== SSA block rewrite pass on 124
DEBUG 2022-02-14 16:38:03,454 Running <numba.core.ssa._FreshVarHandler object at 0x7fa0474da9a0>
DEBUG 2022-02-14 16:38:03,454 on stmt: factor.2 = oddVX_S <built-in function matmul> D_S.2
DEBUG 2022-02-14 16:38:03,455 on stmt: $136binary_matrix_multiply.6 = AX_S <built-in function matmul> D_S.2
DEBUG 2022-02-14 16:38:03,455 on stmt: D_S.1 = $136binary_matrix_multiply.6
DEBUG 2022-02-14 16:38:03,455 on stmt: jump 140
DEBUG 2022-02-14 16:38:03,455 ==== SSA block rewrite pass on 140
DEBUG 2022-02-14 16:38:03,455 Running <numba.core.ssa._FreshVarHandler object at 0x7fa0474da9a0>
DEBUG 2022-02-14 16:38:03,455 on stmt: E_k.3 = phi(incoming_values=[Var(E_k.2, _loop_hafnian_subroutines.py:168), Var(E_k.1, _loop_hafnian_subroutines.py:169), Var(E_k.2, _loop_hafnian_subroutines.py:168)], incoming_blocks=[72, 90, 124])
DEBUG 2022-02-14 16:38:03,455 on stmt: D_S.3 = phi(incoming_values=[Var(D_S.2, _loop_hafnian_subroutines.py:168), Var(D_S.2, _loop_hafnian_subroutines.py:168), Var(D_S.1, _loop_hafnian_subroutines.py:172)], incoming_blocks=[72, 90, 124])
DEBUG 2022-02-14 16:38:03,455 on stmt: factor.3 = phi(incoming_values=[Var(factor, _loop_hafnian_subroutines.py:166), Var(factor.1, _loop_hafnian_subroutines.py:168), Var(factor.2, _loop_hafnian_subroutines.py:171)], incoming_blocks=[72, 90, 124])
DEBUG 2022-02-14 16:38:03,455 on stmt: powfactor = const(int, 1)
DEBUG 2022-02-14 16:38:03,455 on stmt: $const144.2 = const(int, 1)
DEBUG 2022-02-14 16:38:03,455 on stmt: $148binary_subtract.4 = $const144.2 - count
DEBUG 2022-02-14 16:38:03,455 on stmt: count = $148binary_subtract.4
DEBUG 2022-02-14 16:38:03,455 replaced with: count.1 = $148binary_subtract.4
DEBUG 2022-02-14 16:38:03,455 on stmt: $const154.6 = const(int, 1)
DEBUG 2022-02-14 16:38:03,455 on stmt: $158binary_subtract.8 = $const154.6 - count
DEBUG 2022-02-14 16:38:03,455 on stmt: $const160.9 = const(NoneType, None)
DEBUG 2022-02-14 16:38:03,455 on stmt: $const162.10 = const(NoneType, None)
DEBUG 2022-02-14 16:38:03,455 on stmt: $164build_slice.11 = global(slice: <class 'slice'>)
DEBUG 2022-02-14 16:38:03,455 on stmt: $164build_slice.12 = call $164build_slice.11($const160.9, $const162.10, func=$164build_slice.11, args=(Var($const160.9, _loop_hafnian_subroutines.py:176), Var($const162.10, _loop_hafnian_subroutines.py:176)), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:03,455 on stmt: $166build_tuple.13 = build_tuple(items=[Var($158binary_subtract.8, _loop_hafnian_subroutines.py:176), Var($164build_slice.12, _loop_hafnian_subroutines.py:176)])
DEBUG 2022-02-14 16:38:03,456 on stmt: $168binary_subscr.14 = getitem(value=comb, index=$166build_tuple.13, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:03,456 on stmt: $const174.17 = const(NoneType, None)
DEBUG 2022-02-14 16:38:03,456 on stmt: $const176.18 = const(NoneType, None)
DEBUG 2022-02-14 16:38:03,456 on stmt: $178build_slice.19 = global(slice: <class 'slice'>)
DEBUG 2022-02-14 16:38:03,456 on stmt: $178build_slice.20 = call $178build_slice.19($const174.17, $const176.18, func=$178build_slice.19, args=(Var($const174.17, _loop_hafnian_subroutines.py:176), Var($const176.18, _loop_hafnian_subroutines.py:176)), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:03,456 on stmt: $180build_tuple.21 = build_tuple(items=[Var(count, _loop_hafnian_subroutines.py:161), Var($178build_slice.20, _loop_hafnian_subroutines.py:176)])
DEBUG 2022-02-14 16:38:03,456 on stmt: comb[$180build_tuple.21] = $168binary_subscr.14
DEBUG 2022-02-14 16:38:03,456 on stmt: $184load_global.22 = global(range: <class 'range'>)
DEBUG 2022-02-14 16:38:03,456 on stmt: $const186.23 = const(int, 1)
DEBUG 2022-02-14 16:38:03,456 on stmt: $192binary_floor_divide.26 = n // i
DEBUG 2022-02-14 16:38:03,456 on stmt: $const194.27 = const(int, 1)
DEBUG 2022-02-14 16:38:03,456 on stmt: $196binary_add.28 = $192binary_floor_divide.26 + $const194.27
DEBUG 2022-02-14 16:38:03,456 on stmt: $198call_function.29 = call $184load_global.22($const186.23, $196binary_add.28, func=$184load_global.22, args=[Var($const186.23, _loop_hafnian_subroutines.py:177), Var($196binary_add.28, _loop_hafnian_subroutines.py:177)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:03,456 on stmt: $200get_iter.30 = getiter(value=$198call_function.29)
DEBUG 2022-02-14 16:38:03,456 on stmt: $phi202.1 = $200get_iter.30
DEBUG 2022-02-14 16:38:03,456 on stmt: jump 202
DEBUG 2022-02-14 16:38:03,456 ==== SSA block rewrite pass on 202
DEBUG 2022-02-14 16:38:03,456 Running <numba.core.ssa._FreshVarHandler object at 0x7fa0474da9a0>
DEBUG 2022-02-14 16:38:03,456 on stmt: powfactor.2 = phi(incoming_values=[Var(powfactor.1, _loop_hafnian_subroutines.py:178), Var(powfactor, _loop_hafnian_subroutines.py:174)], incoming_blocks=[298, 140])
DEBUG 2022-02-14 16:38:03,456 on stmt: $202for_iter.2 = iternext(value=$phi202.1)
DEBUG 2022-02-14 16:38:03,456 on stmt: $202for_iter.3 = pair_first(value=$202for_iter.2)
DEBUG 2022-02-14 16:38:03,456 on stmt: $202for_iter.4 = pair_second(value=$202for_iter.2)
DEBUG 2022-02-14 16:38:03,456 on stmt: $phi204.2 = $202for_iter.3
DEBUG 2022-02-14 16:38:03,457 on stmt: branch $202for_iter.4, 204, 300
DEBUG 2022-02-14 16:38:03,457 ==== SSA block rewrite pass on 204
DEBUG 2022-02-14 16:38:03,457 Running <numba.core.ssa._FreshVarHandler object at 0x7fa0474da9a0>
DEBUG 2022-02-14 16:38:03,457 on stmt: j = $phi204.2
DEBUG 2022-02-14 16:38:03,457 on stmt: $212binary_true_divide.6 = factor.3 / j
DEBUG 2022-02-14 16:38:03,457 on stmt: $214inplace_multiply.7 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=powfactor.2, rhs=$212binary_true_divide.6, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:38:03,457 on stmt: powfactor.1 = $214inplace_multiply.7
DEBUG 2022-02-14 16:38:03,457 on stmt: $218load_global.8 = global(range: <class 'range'>)
DEBUG 2022-02-14 16:38:03,457 on stmt: $224binary_multiply.11 = i * j
DEBUG 2022-02-14 16:38:03,457 on stmt: $const226.12 = const(int, 1)
DEBUG 2022-02-14 16:38:03,457 on stmt: $228binary_add.13 = $224binary_multiply.11 + $const226.12
DEBUG 2022-02-14 16:38:03,457 on stmt: $const232.15 = const(int, 2)
DEBUG 2022-02-14 16:38:03,457 on stmt: $234binary_add.16 = n + $const232.15
DEBUG 2022-02-14 16:38:03,457 on stmt: $236call_function.17 = call $218load_global.8($228binary_add.13, $234binary_add.16, func=$218load_global.8, args=[Var($228binary_add.13, _loop_hafnian_subroutines.py:179), Var($234binary_add.16, _loop_hafnian_subroutines.py:179)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:03,457 on stmt: $238get_iter.18 = getiter(value=$236call_function.17)
DEBUG 2022-02-14 16:38:03,457 on stmt: $phi240.2 = $238get_iter.18
DEBUG 2022-02-14 16:38:03,457 on stmt: jump 240
DEBUG 2022-02-14 16:38:03,457 ==== SSA block rewrite pass on 240
DEBUG 2022-02-14 16:38:03,457 Running <numba.core.ssa._FreshVarHandler object at 0x7fa0474da9a0>
DEBUG 2022-02-14 16:38:03,457 on stmt: $240for_iter.3 = iternext(value=$phi240.2)
DEBUG 2022-02-14 16:38:03,457 on stmt: $240for_iter.4 = pair_first(value=$240for_iter.3)
DEBUG 2022-02-14 16:38:03,457 on stmt: $240for_iter.5 = pair_second(value=$240for_iter.3)
DEBUG 2022-02-14 16:38:03,457 on stmt: $phi242.3 = $240for_iter.4
DEBUG 2022-02-14 16:38:03,457 on stmt: branch $240for_iter.5, 242, 298
DEBUG 2022-02-14 16:38:03,457 ==== SSA block rewrite pass on 242
DEBUG 2022-02-14 16:38:03,458 Running <numba.core.ssa._FreshVarHandler object at 0x7fa0474da9a0>
DEBUG 2022-02-14 16:38:03,458 on stmt: k = $phi242.3
DEBUG 2022-02-14 16:38:03,458 on stmt: $const250.7 = const(int, 1)
DEBUG 2022-02-14 16:38:03,458 on stmt: $252binary_subtract.8 = k - $const250.7
DEBUG 2022-02-14 16:38:03,458 on stmt: $254build_tuple.9 = build_tuple(items=[Var(count, _loop_hafnian_subroutines.py:161), Var($252binary_subtract.8, _loop_hafnian_subroutines.py:180)])
DEBUG 2022-02-14 16:38:03,458 on stmt: $258binary_subscr.12 = getitem(value=comb, index=$254build_tuple.9, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:03,458 on stmt: $const262.14 = const(int, 1)
DEBUG 2022-02-14 16:38:03,458 on stmt: $266binary_subtract.16 = $const262.14 - count
DEBUG 2022-02-14 16:38:03,458 on stmt: $274binary_multiply.20 = i * j
DEBUG 2022-02-14 16:38:03,458 on stmt: $276binary_subtract.21 = k - $274binary_multiply.20
DEBUG 2022-02-14 16:38:03,458 on stmt: $const278.22 = const(int, 1)
DEBUG 2022-02-14 16:38:03,458 on stmt: $280binary_subtract.23 = $276binary_subtract.21 - $const278.22
DEBUG 2022-02-14 16:38:03,458 on stmt: $282build_tuple.24 = build_tuple(items=[Var($266binary_subtract.16, _loop_hafnian_subroutines.py:180), Var($280binary_subtract.23, _loop_hafnian_subroutines.py:180)])
DEBUG 2022-02-14 16:38:03,458 on stmt: $284binary_subscr.25 = getitem(value=comb, index=$282build_tuple.24, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:03,458 on stmt: $288binary_multiply.27 = $284binary_subscr.25 * powfactor.1
DEBUG 2022-02-14 16:38:03,458 on stmt: $290inplace_add.28 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$258binary_subscr.12, rhs=$288binary_multiply.27, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:38:03,458 on stmt: comb[$254build_tuple.9] = $290inplace_add.28
DEBUG 2022-02-14 16:38:03,458 on stmt: jump 240
DEBUG 2022-02-14 16:38:03,458 ==== SSA block rewrite pass on 298
DEBUG 2022-02-14 16:38:03,458 Running <numba.core.ssa._FreshVarHandler object at 0x7fa0474da9a0>
DEBUG 2022-02-14 16:38:03,458 on stmt: jump 202
DEBUG 2022-02-14 16:38:03,458 ==== SSA block rewrite pass on 300
DEBUG 2022-02-14 16:38:03,458 Running <numba.core.ssa._FreshVarHandler object at 0x7fa0474da9a0>
DEBUG 2022-02-14 16:38:03,458 on stmt: jump 60
DEBUG 2022-02-14 16:38:03,459 ==== SSA block rewrite pass on 302
DEBUG 2022-02-14 16:38:03,459 Running <numba.core.ssa._FreshVarHandler object at 0x7fa0474da9a0>
DEBUG 2022-02-14 16:38:03,459 on stmt: $const306.2 = const(NoneType, None)
DEBUG 2022-02-14 16:38:03,459 on stmt: $const308.3 = const(NoneType, None)
DEBUG 2022-02-14 16:38:03,459 on stmt: $310build_slice.4 = global(slice: <class 'slice'>)
DEBUG 2022-02-14 16:38:03,459 on stmt: $310build_slice.5 = call $310build_slice.4($const306.2, $const308.3, func=$310build_slice.4, args=(Var($const306.2, _loop_hafnian_subroutines.py:182), Var($const308.3, _loop_hafnian_subroutines.py:182)), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:03,459 on stmt: $312build_tuple.6 = build_tuple(items=[Var(count, _loop_hafnian_subroutines.py:161), Var($310build_slice.5, _loop_hafnian_subroutines.py:182)])
DEBUG 2022-02-14 16:38:03,459 on stmt: $314binary_subscr.7 = getitem(value=comb, index=$312build_tuple.6, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:03,459 on stmt: $316return_value.8 = cast(value=$314binary_subscr.7)
DEBUG 2022-02-14 16:38:03,459 on stmt: return $316return_value.8
DEBUG 2022-02-14 16:38:03,459 Replaced assignments: defaultdict(<class 'list'>,
            {0: [<numba.core.ir.Assign object at 0x7fa0475e5370>],
             140: [<numba.core.ir.Assign object at 0x7fa046fbb700>]})
DEBUG 2022-02-14 16:38:03,459 ==== SSA block rewrite pass on 0
DEBUG 2022-02-14 16:38:03,459 Running <numba.core.ssa._FixSSAVars object at 0x7fa047507130>
DEBUG 2022-02-14 16:38:03,459 on stmt: E = arg(0, name=E)
DEBUG 2022-02-14 16:38:03,459 on stmt: AX_S = arg(1, name=AX_S)
DEBUG 2022-02-14 16:38:03,459 on stmt: XD_S = arg(2, name=XD_S)
DEBUG 2022-02-14 16:38:03,459 on stmt: D_S = arg(3, name=D_S)
DEBUG 2022-02-14 16:38:03,459 on stmt: n = arg(4, name=n)
DEBUG 2022-02-14 16:38:03,459 on stmt: oddloop = arg(5, name=oddloop)
DEBUG 2022-02-14 16:38:03,459 on stmt: oddVX_S = arg(6, name=oddVX_S)
DEBUG 2022-02-14 16:38:03,460 on stmt: $4load_method.1 = getattr(value=E, attr=copy)
DEBUG 2022-02-14 16:38:03,460 on stmt: E_k = call $4load_method.1(func=$4load_method.1, args=[], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:03,460 on stmt: count = const(int, 0)
DEBUG 2022-02-14 16:38:03,460 on stmt: $14load_global.4 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:38:03,460 on stmt: $16load_attr.5 = getattr(value=$14load_global.4, attr=zeros)
DEBUG 2022-02-14 16:38:03,460 on stmt: $const18.6 = const(int, 2)
DEBUG 2022-02-14 16:38:03,460 on stmt: $const22.8 = const(int, 1)
DEBUG 2022-02-14 16:38:03,460 on stmt: $24binary_add.9 = n + $const22.8
DEBUG 2022-02-14 16:38:03,460 on stmt: $26build_tuple.10 = build_tuple(items=[Var($const18.6, _loop_hafnian_subroutines.py:162), Var($24binary_add.9, _loop_hafnian_subroutines.py:162)])
DEBUG 2022-02-14 16:38:03,460 on stmt: $28load_global.11 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:38:03,460 on stmt: $30load_attr.12 = getattr(value=$28load_global.11, attr=complex128)
DEBUG 2022-02-14 16:38:03,460 on stmt: comb = call $16load_attr.5($26build_tuple.10, func=$16load_attr.5, args=[Var($26build_tuple.10, _loop_hafnian_subroutines.py:162)], kws=[('dtype', Var($30load_attr.12, _loop_hafnian_subroutines.py:162))], vararg=None, target=None)
DEBUG 2022-02-14 16:38:03,460 on stmt: $const38.15 = const(int, 1)
DEBUG 2022-02-14 16:38:03,460 on stmt: $const_0 = const(int, 0)
DEBUG 2022-02-14 16:38:03,460 on stmt: $const_0.1 = const(int, 0)
DEBUG 2022-02-14 16:38:03,460 on stmt: $const42.17 = build_tuple(items=[Var($const_0, _loop_hafnian_subroutines.py:163), Var($const_0.1, _loop_hafnian_subroutines.py:163)])
DEBUG 2022-02-14 16:38:03,460 on stmt: comb[(0, 0)] = $const38.15
DEBUG 2022-02-14 16:38:03,460 on stmt: $46load_global.18 = global(range: <class 'range'>)
DEBUG 2022-02-14 16:38:03,460 on stmt: $const48.19 = const(int, 1)
DEBUG 2022-02-14 16:38:03,460 on stmt: $const52.21 = const(int, 1)
DEBUG 2022-02-14 16:38:03,460 on stmt: $54binary_add.22 = n + $const52.21
DEBUG 2022-02-14 16:38:03,461 on stmt: $56call_function.23 = call $46load_global.18($const48.19, $54binary_add.22, func=$46load_global.18, args=[Var($const48.19, _loop_hafnian_subroutines.py:164), Var($54binary_add.22, _loop_hafnian_subroutines.py:164)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:03,461 on stmt: $58get_iter.24 = getiter(value=$56call_function.23)
DEBUG 2022-02-14 16:38:03,461 on stmt: $phi60.0 = $58get_iter.24
DEBUG 2022-02-14 16:38:03,461 on stmt: jump 60
DEBUG 2022-02-14 16:38:03,461 ==== SSA block rewrite pass on 60
DEBUG 2022-02-14 16:38:03,461 Running <numba.core.ssa._FixSSAVars object at 0x7fa047507130>
DEBUG 2022-02-14 16:38:03,461 on stmt: E_k.2 = phi(incoming_values=[Var(E_k, _loop_hafnian_subroutines.py:159), Var(E_k.3, _loop_hafnian_subroutines.py:168)], incoming_blocks=[0, 300])
DEBUG 2022-02-14 16:38:03,461 on stmt: D_S.2 = phi(incoming_values=[Var(D_S, _loop_hafnian_subroutines.py:159), Var(D_S.3, _loop_hafnian_subroutines.py:168)], incoming_blocks=[0, 300])
DEBUG 2022-02-14 16:38:03,461 on stmt: $60for_iter.1 = iternext(value=$phi60.0)
DEBUG 2022-02-14 16:38:03,461 on stmt: $60for_iter.2 = pair_first(value=$60for_iter.1)
DEBUG 2022-02-14 16:38:03,461 on stmt: $60for_iter.3 = pair_second(value=$60for_iter.1)
DEBUG 2022-02-14 16:38:03,461 on stmt: $phi62.1 = $60for_iter.2
DEBUG 2022-02-14 16:38:03,461 on stmt: branch $60for_iter.3, 62, 302
DEBUG 2022-02-14 16:38:03,461 ==== SSA block rewrite pass on 62
DEBUG 2022-02-14 16:38:03,461 Running <numba.core.ssa._FixSSAVars object at 0x7fa047507130>
DEBUG 2022-02-14 16:38:03,461 on stmt: i = $phi62.1
DEBUG 2022-02-14 16:38:03,461 on stmt: $const66.3 = const(int, 1)
DEBUG 2022-02-14 16:38:03,461 on stmt: $68compare_op.4 = i == $const66.3
DEBUG 2022-02-14 16:38:03,461 on stmt: bool70 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:38:03,461 on stmt: $70pred = call bool70($68compare_op.4, func=bool70, args=(Var($68compare_op.4, _loop_hafnian_subroutines.py:165),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:03,461 on stmt: branch $70pred, 72, 78
DEBUG 2022-02-14 16:38:03,461 ==== SSA block rewrite pass on 72
DEBUG 2022-02-14 16:38:03,461 Running <numba.core.ssa._FixSSAVars object at 0x7fa047507130>
DEBUG 2022-02-14 16:38:03,461 on stmt: factor = oddloop
DEBUG 2022-02-14 16:38:03,461 on stmt: jump 140
DEBUG 2022-02-14 16:38:03,462 ==== SSA block rewrite pass on 78
DEBUG 2022-02-14 16:38:03,462 Running <numba.core.ssa._FixSSAVars object at 0x7fa047507130>
DEBUG 2022-02-14 16:38:03,462 on stmt: $const80.2 = const(int, 2)
DEBUG 2022-02-14 16:38:03,462 on stmt: $82binary_modulo.3 = i % $const80.2
DEBUG 2022-02-14 16:38:03,462 on stmt: $const84.4 = const(int, 0)
DEBUG 2022-02-14 16:38:03,462 on stmt: $86compare_op.5 = $82binary_modulo.3 == $const84.4
DEBUG 2022-02-14 16:38:03,462 on stmt: bool88 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:38:03,462 on stmt: $88pred = call bool88($86compare_op.5, func=bool88, args=(Var($86compare_op.5, _loop_hafnian_subroutines.py:167),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:03,462 on stmt: branch $88pred, 90, 124
DEBUG 2022-02-14 16:38:03,462 ==== SSA block rewrite pass on 90
DEBUG 2022-02-14 16:38:03,462 Running <numba.core.ssa._FixSSAVars object at 0x7fa047507130>
DEBUG 2022-02-14 16:38:03,462 on stmt: $92load_method.2 = getattr(value=E_k.2, attr=sum)
DEBUG 2022-02-14 16:38:03,462 on stmt: $94call_method.3 = call $92load_method.2(func=$92load_method.2, args=[], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:03,462 on stmt: $98binary_true_divide.5 = $94call_method.3 / i
DEBUG 2022-02-14 16:38:03,462 on stmt: $104binary_matrix_multiply.8 = XD_S <built-in function matmul> D_S.2
DEBUG 2022-02-14 16:38:03,462 on stmt: $const106.9 = const(int, 2)
DEBUG 2022-02-14 16:38:03,462 on stmt: $108binary_true_divide.10 = $104binary_matrix_multiply.8 / $const106.9
DEBUG 2022-02-14 16:38:03,462 on stmt: factor.1 = $98binary_true_divide.5 + $108binary_true_divide.10
DEBUG 2022-02-14 16:38:03,462 on stmt: $118inplace_multiply.14 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=E_k.2, rhs=E, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:38:03,462 on stmt: E_k.1 = $118inplace_multiply.14
DEBUG 2022-02-14 16:38:03,462 on stmt: jump 140
DEBUG 2022-02-14 16:38:03,462 ==== SSA block rewrite pass on 124
DEBUG 2022-02-14 16:38:03,462 Running <numba.core.ssa._FixSSAVars object at 0x7fa047507130>
DEBUG 2022-02-14 16:38:03,462 on stmt: factor.2 = oddVX_S <built-in function matmul> D_S.2
DEBUG 2022-02-14 16:38:03,463 on stmt: $136binary_matrix_multiply.6 = AX_S <built-in function matmul> D_S.2
DEBUG 2022-02-14 16:38:03,463 on stmt: D_S.1 = $136binary_matrix_multiply.6
DEBUG 2022-02-14 16:38:03,463 on stmt: jump 140
DEBUG 2022-02-14 16:38:03,463 ==== SSA block rewrite pass on 140
DEBUG 2022-02-14 16:38:03,463 Running <numba.core.ssa._FixSSAVars object at 0x7fa047507130>
DEBUG 2022-02-14 16:38:03,463 on stmt: E_k.3 = phi(incoming_values=[Var(E_k.2, _loop_hafnian_subroutines.py:168), Var(E_k.1, _loop_hafnian_subroutines.py:169), Var(E_k.2, _loop_hafnian_subroutines.py:168)], incoming_blocks=[72, 90, 124])
DEBUG 2022-02-14 16:38:03,463 on stmt: D_S.3 = phi(incoming_values=[Var(D_S.2, _loop_hafnian_subroutines.py:168), Var(D_S.2, _loop_hafnian_subroutines.py:168), Var(D_S.1, _loop_hafnian_subroutines.py:172)], incoming_blocks=[72, 90, 124])
DEBUG 2022-02-14 16:38:03,463 on stmt: factor.3 = phi(incoming_values=[Var(factor, _loop_hafnian_subroutines.py:166), Var(factor.1, _loop_hafnian_subroutines.py:168), Var(factor.2, _loop_hafnian_subroutines.py:171)], incoming_blocks=[72, 90, 124])
DEBUG 2022-02-14 16:38:03,463 on stmt: powfactor = const(int, 1)
DEBUG 2022-02-14 16:38:03,463 on stmt: $const144.2 = const(int, 1)
DEBUG 2022-02-14 16:38:03,463 on stmt: $148binary_subtract.4 = $const144.2 - count
DEBUG 2022-02-14 16:38:03,463 find_def var='count' stmt=$148binary_subtract.4 = $const144.2 - count
DEBUG 2022-02-14 16:38:03,463 find_def_from_top label 140
DEBUG 2022-02-14 16:38:03,463 idom 62 from label 140
DEBUG 2022-02-14 16:38:03,463 find_def_from_bottom label 62
DEBUG 2022-02-14 16:38:03,463 find_def_from_top label 62
DEBUG 2022-02-14 16:38:03,463 idom 60 from label 62
DEBUG 2022-02-14 16:38:03,463 find_def_from_bottom label 60
DEBUG 2022-02-14 16:38:03,463 find_def_from_top label 60
DEBUG 2022-02-14 16:38:03,463 insert phi node count.2 = phi(incoming_values=[], incoming_blocks=[]) at 60
DEBUG 2022-02-14 16:38:03,463 find_def_from_bottom label 0
DEBUG 2022-02-14 16:38:03,463 incoming_def count = const(int, 0)
DEBUG 2022-02-14 16:38:03,463 find_def_from_bottom label 300
DEBUG 2022-02-14 16:38:03,463 find_def_from_top label 300
DEBUG 2022-02-14 16:38:03,463 idom 202 from label 300
DEBUG 2022-02-14 16:38:03,463 find_def_from_bottom label 202
DEBUG 2022-02-14 16:38:03,464 find_def_from_top label 202
DEBUG 2022-02-14 16:38:03,464 idom 140 from label 202
DEBUG 2022-02-14 16:38:03,464 find_def_from_bottom label 140
DEBUG 2022-02-14 16:38:03,464 incoming_def count.1 = $148binary_subtract.4
DEBUG 2022-02-14 16:38:03,464 replaced with: $148binary_subtract.4 = $const144.2 - count.2
DEBUG 2022-02-14 16:38:03,464 on stmt: count.1 = $148binary_subtract.4
DEBUG 2022-02-14 16:38:03,464 on stmt: $const154.6 = const(int, 1)
DEBUG 2022-02-14 16:38:03,464 on stmt: $158binary_subtract.8 = $const154.6 - count
DEBUG 2022-02-14 16:38:03,464 find_def var='count' stmt=$158binary_subtract.8 = $const154.6 - count
DEBUG 2022-02-14 16:38:03,464 replaced with: $158binary_subtract.8 = $const154.6 - count.1
DEBUG 2022-02-14 16:38:03,464 on stmt: $const160.9 = const(NoneType, None)
DEBUG 2022-02-14 16:38:03,464 on stmt: $const162.10 = const(NoneType, None)
DEBUG 2022-02-14 16:38:03,464 on stmt: $164build_slice.11 = global(slice: <class 'slice'>)
DEBUG 2022-02-14 16:38:03,464 on stmt: $164build_slice.12 = call $164build_slice.11($const160.9, $const162.10, func=$164build_slice.11, args=(Var($const160.9, _loop_hafnian_subroutines.py:176), Var($const162.10, _loop_hafnian_subroutines.py:176)), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:03,464 on stmt: $166build_tuple.13 = build_tuple(items=[Var($158binary_subtract.8, _loop_hafnian_subroutines.py:176), Var($164build_slice.12, _loop_hafnian_subroutines.py:176)])
DEBUG 2022-02-14 16:38:03,464 on stmt: $168binary_subscr.14 = getitem(value=comb, index=$166build_tuple.13, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:03,464 on stmt: $const174.17 = const(NoneType, None)
DEBUG 2022-02-14 16:38:03,464 on stmt: $const176.18 = const(NoneType, None)
DEBUG 2022-02-14 16:38:03,464 on stmt: $178build_slice.19 = global(slice: <class 'slice'>)
DEBUG 2022-02-14 16:38:03,464 on stmt: $178build_slice.20 = call $178build_slice.19($const174.17, $const176.18, func=$178build_slice.19, args=(Var($const174.17, _loop_hafnian_subroutines.py:176), Var($const176.18, _loop_hafnian_subroutines.py:176)), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:03,464 on stmt: $180build_tuple.21 = build_tuple(items=[Var(count, _loop_hafnian_subroutines.py:161), Var($178build_slice.20, _loop_hafnian_subroutines.py:176)])
DEBUG 2022-02-14 16:38:03,464 find_def var='count' stmt=$180build_tuple.21 = build_tuple(items=[Var(count, _loop_hafnian_subroutines.py:161), Var($178build_slice.20, _loop_hafnian_subroutines.py:176)])
DEBUG 2022-02-14 16:38:03,465 replaced with: $180build_tuple.21 = build_tuple(items=[Var(count.1, _loop_hafnian_subroutines.py:175), Var($178build_slice.20, _loop_hafnian_subroutines.py:176)])
DEBUG 2022-02-14 16:38:03,465 on stmt: comb[$180build_tuple.21] = $168binary_subscr.14
DEBUG 2022-02-14 16:38:03,465 on stmt: $184load_global.22 = global(range: <class 'range'>)
DEBUG 2022-02-14 16:38:03,465 on stmt: $const186.23 = const(int, 1)
DEBUG 2022-02-14 16:38:03,465 on stmt: $192binary_floor_divide.26 = n // i
DEBUG 2022-02-14 16:38:03,465 on stmt: $const194.27 = const(int, 1)
DEBUG 2022-02-14 16:38:03,465 on stmt: $196binary_add.28 = $192binary_floor_divide.26 + $const194.27
DEBUG 2022-02-14 16:38:03,465 on stmt: $198call_function.29 = call $184load_global.22($const186.23, $196binary_add.28, func=$184load_global.22, args=[Var($const186.23, _loop_hafnian_subroutines.py:177), Var($196binary_add.28, _loop_hafnian_subroutines.py:177)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:03,465 on stmt: $200get_iter.30 = getiter(value=$198call_function.29)
DEBUG 2022-02-14 16:38:03,465 on stmt: $phi202.1 = $200get_iter.30
DEBUG 2022-02-14 16:38:03,465 on stmt: jump 202
DEBUG 2022-02-14 16:38:03,465 ==== SSA block rewrite pass on 202
DEBUG 2022-02-14 16:38:03,465 Running <numba.core.ssa._FixSSAVars object at 0x7fa047507130>
DEBUG 2022-02-14 16:38:03,465 on stmt: powfactor.2 = phi(incoming_values=[Var(powfactor.1, _loop_hafnian_subroutines.py:178), Var(powfactor, _loop_hafnian_subroutines.py:174)], incoming_blocks=[298, 140])
DEBUG 2022-02-14 16:38:03,465 on stmt: $202for_iter.2 = iternext(value=$phi202.1)
DEBUG 2022-02-14 16:38:03,465 on stmt: $202for_iter.3 = pair_first(value=$202for_iter.2)
DEBUG 2022-02-14 16:38:03,465 on stmt: $202for_iter.4 = pair_second(value=$202for_iter.2)
DEBUG 2022-02-14 16:38:03,465 on stmt: $phi204.2 = $202for_iter.3
DEBUG 2022-02-14 16:38:03,465 on stmt: branch $202for_iter.4, 204, 300
DEBUG 2022-02-14 16:38:03,465 ==== SSA block rewrite pass on 204
DEBUG 2022-02-14 16:38:03,465 Running <numba.core.ssa._FixSSAVars object at 0x7fa047507130>
DEBUG 2022-02-14 16:38:03,465 on stmt: j = $phi204.2
DEBUG 2022-02-14 16:38:03,465 on stmt: $212binary_true_divide.6 = factor.3 / j
DEBUG 2022-02-14 16:38:03,465 on stmt: $214inplace_multiply.7 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=powfactor.2, rhs=$212binary_true_divide.6, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:38:03,466 on stmt: powfactor.1 = $214inplace_multiply.7
DEBUG 2022-02-14 16:38:03,466 on stmt: $218load_global.8 = global(range: <class 'range'>)
DEBUG 2022-02-14 16:38:03,466 on stmt: $224binary_multiply.11 = i * j
DEBUG 2022-02-14 16:38:03,466 on stmt: $const226.12 = const(int, 1)
DEBUG 2022-02-14 16:38:03,466 on stmt: $228binary_add.13 = $224binary_multiply.11 + $const226.12
DEBUG 2022-02-14 16:38:03,466 on stmt: $const232.15 = const(int, 2)
DEBUG 2022-02-14 16:38:03,466 on stmt: $234binary_add.16 = n + $const232.15
DEBUG 2022-02-14 16:38:03,466 on stmt: $236call_function.17 = call $218load_global.8($228binary_add.13, $234binary_add.16, func=$218load_global.8, args=[Var($228binary_add.13, _loop_hafnian_subroutines.py:179), Var($234binary_add.16, _loop_hafnian_subroutines.py:179)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:03,466 on stmt: $238get_iter.18 = getiter(value=$236call_function.17)
DEBUG 2022-02-14 16:38:03,466 on stmt: $phi240.2 = $238get_iter.18
DEBUG 2022-02-14 16:38:03,466 on stmt: jump 240
DEBUG 2022-02-14 16:38:03,466 ==== SSA block rewrite pass on 240
DEBUG 2022-02-14 16:38:03,466 Running <numba.core.ssa._FixSSAVars object at 0x7fa047507130>
DEBUG 2022-02-14 16:38:03,466 on stmt: $240for_iter.3 = iternext(value=$phi240.2)
DEBUG 2022-02-14 16:38:03,466 on stmt: $240for_iter.4 = pair_first(value=$240for_iter.3)
DEBUG 2022-02-14 16:38:03,466 on stmt: $240for_iter.5 = pair_second(value=$240for_iter.3)
DEBUG 2022-02-14 16:38:03,466 on stmt: $phi242.3 = $240for_iter.4
DEBUG 2022-02-14 16:38:03,466 on stmt: branch $240for_iter.5, 242, 298
DEBUG 2022-02-14 16:38:03,466 ==== SSA block rewrite pass on 242
DEBUG 2022-02-14 16:38:03,466 Running <numba.core.ssa._FixSSAVars object at 0x7fa047507130>
DEBUG 2022-02-14 16:38:03,466 on stmt: k = $phi242.3
DEBUG 2022-02-14 16:38:03,466 on stmt: $const250.7 = const(int, 1)
DEBUG 2022-02-14 16:38:03,466 on stmt: $252binary_subtract.8 = k - $const250.7
DEBUG 2022-02-14 16:38:03,467 on stmt: $254build_tuple.9 = build_tuple(items=[Var(count, _loop_hafnian_subroutines.py:161), Var($252binary_subtract.8, _loop_hafnian_subroutines.py:180)])
DEBUG 2022-02-14 16:38:03,467 find_def var='count' stmt=$254build_tuple.9 = build_tuple(items=[Var(count, _loop_hafnian_subroutines.py:161), Var($252binary_subtract.8, _loop_hafnian_subroutines.py:180)])
DEBUG 2022-02-14 16:38:03,467 find_def_from_top label 242
DEBUG 2022-02-14 16:38:03,467 idom 240 from label 242
DEBUG 2022-02-14 16:38:03,467 find_def_from_bottom label 240
DEBUG 2022-02-14 16:38:03,467 find_def_from_top label 240
DEBUG 2022-02-14 16:38:03,467 idom 204 from label 240
DEBUG 2022-02-14 16:38:03,467 find_def_from_bottom label 204
DEBUG 2022-02-14 16:38:03,467 find_def_from_top label 204
DEBUG 2022-02-14 16:38:03,467 idom 202 from label 204
DEBUG 2022-02-14 16:38:03,467 find_def_from_bottom label 202
DEBUG 2022-02-14 16:38:03,467 find_def_from_top label 202
DEBUG 2022-02-14 16:38:03,467 idom 140 from label 202
DEBUG 2022-02-14 16:38:03,467 find_def_from_bottom label 140
DEBUG 2022-02-14 16:38:03,467 replaced with: $254build_tuple.9 = build_tuple(items=[Var(count.1, _loop_hafnian_subroutines.py:175), Var($252binary_subtract.8, _loop_hafnian_subroutines.py:180)])
DEBUG 2022-02-14 16:38:03,467 on stmt: $258binary_subscr.12 = getitem(value=comb, index=$254build_tuple.9, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:03,467 on stmt: $const262.14 = const(int, 1)
DEBUG 2022-02-14 16:38:03,467 on stmt: $266binary_subtract.16 = $const262.14 - count
DEBUG 2022-02-14 16:38:03,467 find_def var='count' stmt=$266binary_subtract.16 = $const262.14 - count
DEBUG 2022-02-14 16:38:03,467 find_def_from_top label 242
DEBUG 2022-02-14 16:38:03,467 idom 240 from label 242
DEBUG 2022-02-14 16:38:03,467 find_def_from_bottom label 240
DEBUG 2022-02-14 16:38:03,467 find_def_from_top label 240
DEBUG 2022-02-14 16:38:03,467 idom 204 from label 240
DEBUG 2022-02-14 16:38:03,467 find_def_from_bottom label 204
DEBUG 2022-02-14 16:38:03,467 find_def_from_top label 204
DEBUG 2022-02-14 16:38:03,467 idom 202 from label 204
DEBUG 2022-02-14 16:38:03,467 find_def_from_bottom label 202
DEBUG 2022-02-14 16:38:03,468 find_def_from_top label 202
DEBUG 2022-02-14 16:38:03,468 idom 140 from label 202
DEBUG 2022-02-14 16:38:03,468 find_def_from_bottom label 140
DEBUG 2022-02-14 16:38:03,468 replaced with: $266binary_subtract.16 = $const262.14 - count.1
DEBUG 2022-02-14 16:38:03,468 on stmt: $274binary_multiply.20 = i * j
DEBUG 2022-02-14 16:38:03,468 on stmt: $276binary_subtract.21 = k - $274binary_multiply.20
DEBUG 2022-02-14 16:38:03,468 on stmt: $const278.22 = const(int, 1)
DEBUG 2022-02-14 16:38:03,468 on stmt: $280binary_subtract.23 = $276binary_subtract.21 - $const278.22
DEBUG 2022-02-14 16:38:03,468 on stmt: $282build_tuple.24 = build_tuple(items=[Var($266binary_subtract.16, _loop_hafnian_subroutines.py:180), Var($280binary_subtract.23, _loop_hafnian_subroutines.py:180)])
DEBUG 2022-02-14 16:38:03,468 on stmt: $284binary_subscr.25 = getitem(value=comb, index=$282build_tuple.24, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:03,468 on stmt: $288binary_multiply.27 = $284binary_subscr.25 * powfactor.1
DEBUG 2022-02-14 16:38:03,468 on stmt: $290inplace_add.28 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$258binary_subscr.12, rhs=$288binary_multiply.27, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:38:03,468 on stmt: comb[$254build_tuple.9] = $290inplace_add.28
DEBUG 2022-02-14 16:38:03,468 on stmt: jump 240
DEBUG 2022-02-14 16:38:03,468 ==== SSA block rewrite pass on 298
DEBUG 2022-02-14 16:38:03,468 Running <numba.core.ssa._FixSSAVars object at 0x7fa047507130>
DEBUG 2022-02-14 16:38:03,468 on stmt: jump 202
DEBUG 2022-02-14 16:38:03,468 ==== SSA block rewrite pass on 300
DEBUG 2022-02-14 16:38:03,468 Running <numba.core.ssa._FixSSAVars object at 0x7fa047507130>
DEBUG 2022-02-14 16:38:03,468 on stmt: jump 60
DEBUG 2022-02-14 16:38:03,468 ==== SSA block rewrite pass on 302
DEBUG 2022-02-14 16:38:03,468 Running <numba.core.ssa._FixSSAVars object at 0x7fa047507130>
DEBUG 2022-02-14 16:38:03,468 on stmt: $const306.2 = const(NoneType, None)
DEBUG 2022-02-14 16:38:03,468 on stmt: $const308.3 = const(NoneType, None)
DEBUG 2022-02-14 16:38:03,468 on stmt: $310build_slice.4 = global(slice: <class 'slice'>)
DEBUG 2022-02-14 16:38:03,469 on stmt: $310build_slice.5 = call $310build_slice.4($const306.2, $const308.3, func=$310build_slice.4, args=(Var($const306.2, _loop_hafnian_subroutines.py:182), Var($const308.3, _loop_hafnian_subroutines.py:182)), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:03,469 on stmt: $312build_tuple.6 = build_tuple(items=[Var(count, _loop_hafnian_subroutines.py:161), Var($310build_slice.5, _loop_hafnian_subroutines.py:182)])
DEBUG 2022-02-14 16:38:03,469 find_def var='count' stmt=$312build_tuple.6 = build_tuple(items=[Var(count, _loop_hafnian_subroutines.py:161), Var($310build_slice.5, _loop_hafnian_subroutines.py:182)])
DEBUG 2022-02-14 16:38:03,469 find_def_from_top label 302
DEBUG 2022-02-14 16:38:03,469 idom 60 from label 302
DEBUG 2022-02-14 16:38:03,469 find_def_from_bottom label 60
DEBUG 2022-02-14 16:38:03,469 replaced with: $312build_tuple.6 = build_tuple(items=[Var(count.2, _loop_hafnian_subroutines.py:174), Var($310build_slice.5, _loop_hafnian_subroutines.py:182)])
DEBUG 2022-02-14 16:38:03,469 on stmt: $314binary_subscr.7 = getitem(value=comb, index=$312build_tuple.6, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:03,469 on stmt: $316return_value.8 = cast(value=$314binary_subscr.7)
DEBUG 2022-02-14 16:38:03,469 on stmt: return $316return_value.8
DEBUG 2022-02-14 16:38:03,589 bytecode dump:
>          0	NOP(arg=None, lineno=486)
           2	LOAD_FAST(arg=0, lineno=486)
           4	LOAD_ATTR(arg=0, lineno=486)
           6	UNPACK_SEQUENCE(arg=2, lineno=486)
           8	STORE_FAST(arg=2, lineno=486)
          10	STORE_FAST(arg=3, lineno=486)
          12	LOAD_FAST(arg=1, lineno=487)
          14	LOAD_ATTR(arg=0, lineno=487)
          16	UNPACK_SEQUENCE(arg=1, lineno=487)
          18	STORE_FAST(arg=4, lineno=487)
          20	LOAD_FAST(arg=3, lineno=488)
          22	LOAD_CONST(arg=1, lineno=488)
          24	COMPARE_OP(arg=2, lineno=488)
          26	POP_JUMP_IF_FALSE(arg=44, lineno=488)
          28	LOAD_GLOBAL(arg=1, lineno=489)
          30	LOAD_METHOD(arg=2, lineno=489)
          32	LOAD_FAST(arg=2, lineno=489)
          34	BUILD_TUPLE(arg=1, lineno=489)
          36	LOAD_FAST(arg=0, lineno=489)
          38	LOAD_ATTR(arg=3, lineno=489)
          40	CALL_METHOD(arg=2, lineno=489)
          42	RETURN_VALUE(arg=None, lineno=489)
>         44	LOAD_GLOBAL(arg=1, lineno=490)
          46	LOAD_METHOD(arg=4, lineno=490)
          48	LOAD_FAST(arg=2, lineno=490)
          50	BUILD_TUPLE(arg=1, lineno=490)
          52	LOAD_FAST(arg=0, lineno=490)
          54	LOAD_ATTR(arg=3, lineno=490)
          56	CALL_METHOD(arg=2, lineno=490)
          58	STORE_FAST(arg=5, lineno=490)
          60	LOAD_GLOBAL(arg=1, lineno=491)
          62	LOAD_METHOD(arg=5, lineno=491)
          64	LOAD_FAST(arg=0, lineno=491)
          66	LOAD_FAST(arg=1, lineno=491)
          68	LOAD_FAST(arg=5, lineno=491)
          70	CALL_METHOD(arg=3, lineno=491)
          72	RETURN_VALUE(arg=None, lineno=491)
DEBUG 2022-02-14 16:38:03,589 pending: deque([State(pc_initial=0 nstack_initial=0)])
DEBUG 2022-02-14 16:38:03,589 stack: []
DEBUG 2022-02-14 16:38:03,589 dispatch pc=0, inst=NOP(arg=None, lineno=486)
DEBUG 2022-02-14 16:38:03,589 stack []
DEBUG 2022-02-14 16:38:03,589 dispatch pc=2, inst=LOAD_FAST(arg=0, lineno=486)
DEBUG 2022-02-14 16:38:03,589 stack []
DEBUG 2022-02-14 16:38:03,589 dispatch pc=4, inst=LOAD_ATTR(arg=0, lineno=486)
DEBUG 2022-02-14 16:38:03,589 stack ['$a2.0']
DEBUG 2022-02-14 16:38:03,589 dispatch pc=6, inst=UNPACK_SEQUENCE(arg=2, lineno=486)
DEBUG 2022-02-14 16:38:03,589 stack ['$4load_attr.1']
DEBUG 2022-02-14 16:38:03,589 dispatch pc=8, inst=STORE_FAST(arg=2, lineno=486)
DEBUG 2022-02-14 16:38:03,589 stack ['$6unpack_sequence.3', '$6unpack_sequence.2']
DEBUG 2022-02-14 16:38:03,589 dispatch pc=10, inst=STORE_FAST(arg=3, lineno=486)
DEBUG 2022-02-14 16:38:03,589 stack ['$6unpack_sequence.3']
DEBUG 2022-02-14 16:38:03,589 dispatch pc=12, inst=LOAD_FAST(arg=1, lineno=487)
DEBUG 2022-02-14 16:38:03,589 stack []
DEBUG 2022-02-14 16:38:03,590 dispatch pc=14, inst=LOAD_ATTR(arg=0, lineno=487)
DEBUG 2022-02-14 16:38:03,590 stack ['$b12.5']
DEBUG 2022-02-14 16:38:03,590 dispatch pc=16, inst=UNPACK_SEQUENCE(arg=1, lineno=487)
DEBUG 2022-02-14 16:38:03,590 stack ['$14load_attr.6']
DEBUG 2022-02-14 16:38:03,590 dispatch pc=18, inst=STORE_FAST(arg=4, lineno=487)
DEBUG 2022-02-14 16:38:03,590 stack ['$16unpack_sequence.7']
DEBUG 2022-02-14 16:38:03,590 dispatch pc=20, inst=LOAD_FAST(arg=3, lineno=488)
DEBUG 2022-02-14 16:38:03,590 stack []
DEBUG 2022-02-14 16:38:03,590 dispatch pc=22, inst=LOAD_CONST(arg=1, lineno=488)
DEBUG 2022-02-14 16:38:03,590 stack ['$n20.9']
DEBUG 2022-02-14 16:38:03,590 dispatch pc=24, inst=COMPARE_OP(arg=2, lineno=488)
DEBUG 2022-02-14 16:38:03,590 stack ['$n20.9', '$const22.10']
DEBUG 2022-02-14 16:38:03,590 dispatch pc=26, inst=POP_JUMP_IF_FALSE(arg=44, lineno=488)
DEBUG 2022-02-14 16:38:03,590 stack ['$24compare_op.11']
DEBUG 2022-02-14 16:38:03,590 end state. edges=[Edge(pc=28, stack=(), blockstack=(), npush=0), Edge(pc=44, stack=(), blockstack=(), npush=0)]
DEBUG 2022-02-14 16:38:03,590 pending: deque([State(pc_initial=28 nstack_initial=0), State(pc_initial=44 nstack_initial=0)])
DEBUG 2022-02-14 16:38:03,590 stack: []
DEBUG 2022-02-14 16:38:03,590 dispatch pc=28, inst=LOAD_GLOBAL(arg=1, lineno=489)
DEBUG 2022-02-14 16:38:03,590 stack []
DEBUG 2022-02-14 16:38:03,590 dispatch pc=30, inst=LOAD_METHOD(arg=2, lineno=489)
DEBUG 2022-02-14 16:38:03,590 stack ['$28load_global.0']
DEBUG 2022-02-14 16:38:03,591 dispatch pc=32, inst=LOAD_FAST(arg=2, lineno=489)
DEBUG 2022-02-14 16:38:03,591 stack ['$30load_method.1']
DEBUG 2022-02-14 16:38:03,591 dispatch pc=34, inst=BUILD_TUPLE(arg=1, lineno=489)
DEBUG 2022-02-14 16:38:03,591 stack ['$30load_method.1', '$m32.2']
DEBUG 2022-02-14 16:38:03,591 dispatch pc=36, inst=LOAD_FAST(arg=0, lineno=489)
DEBUG 2022-02-14 16:38:03,591 stack ['$30load_method.1', '$34build_tuple.3']
DEBUG 2022-02-14 16:38:03,591 dispatch pc=38, inst=LOAD_ATTR(arg=3, lineno=489)
DEBUG 2022-02-14 16:38:03,591 stack ['$30load_method.1', '$34build_tuple.3', '$a36.4']
DEBUG 2022-02-14 16:38:03,591 dispatch pc=40, inst=CALL_METHOD(arg=2, lineno=489)
DEBUG 2022-02-14 16:38:03,591 stack ['$30load_method.1', '$34build_tuple.3', '$38load_attr.5']
DEBUG 2022-02-14 16:38:03,591 dispatch pc=42, inst=RETURN_VALUE(arg=None, lineno=489)
DEBUG 2022-02-14 16:38:03,591 stack ['$40call_method.6']
DEBUG 2022-02-14 16:38:03,591 end state. edges=[]
DEBUG 2022-02-14 16:38:03,591 pending: deque([State(pc_initial=44 nstack_initial=0)])
DEBUG 2022-02-14 16:38:03,591 stack: []
DEBUG 2022-02-14 16:38:03,591 dispatch pc=44, inst=LOAD_GLOBAL(arg=1, lineno=490)
DEBUG 2022-02-14 16:38:03,591 stack []
DEBUG 2022-02-14 16:38:03,591 dispatch pc=46, inst=LOAD_METHOD(arg=4, lineno=490)
DEBUG 2022-02-14 16:38:03,591 stack ['$44load_global.0']
DEBUG 2022-02-14 16:38:03,591 dispatch pc=48, inst=LOAD_FAST(arg=2, lineno=490)
DEBUG 2022-02-14 16:38:03,591 stack ['$46load_method.1']
DEBUG 2022-02-14 16:38:03,591 dispatch pc=50, inst=BUILD_TUPLE(arg=1, lineno=490)
DEBUG 2022-02-14 16:38:03,591 stack ['$46load_method.1', '$m48.2']
DEBUG 2022-02-14 16:38:03,591 dispatch pc=52, inst=LOAD_FAST(arg=0, lineno=490)
DEBUG 2022-02-14 16:38:03,591 stack ['$46load_method.1', '$50build_tuple.3']
DEBUG 2022-02-14 16:38:03,592 dispatch pc=54, inst=LOAD_ATTR(arg=3, lineno=490)
DEBUG 2022-02-14 16:38:03,592 stack ['$46load_method.1', '$50build_tuple.3', '$a52.4']
DEBUG 2022-02-14 16:38:03,592 dispatch pc=56, inst=CALL_METHOD(arg=2, lineno=490)
DEBUG 2022-02-14 16:38:03,592 stack ['$46load_method.1', '$50build_tuple.3', '$54load_attr.5']
DEBUG 2022-02-14 16:38:03,592 dispatch pc=58, inst=STORE_FAST(arg=5, lineno=490)
DEBUG 2022-02-14 16:38:03,592 stack ['$56call_method.6']
DEBUG 2022-02-14 16:38:03,592 dispatch pc=60, inst=LOAD_GLOBAL(arg=1, lineno=491)
DEBUG 2022-02-14 16:38:03,592 stack []
DEBUG 2022-02-14 16:38:03,592 dispatch pc=62, inst=LOAD_METHOD(arg=5, lineno=491)
DEBUG 2022-02-14 16:38:03,592 stack ['$60load_global.7']
DEBUG 2022-02-14 16:38:03,592 dispatch pc=64, inst=LOAD_FAST(arg=0, lineno=491)
DEBUG 2022-02-14 16:38:03,592 stack ['$62load_method.8']
DEBUG 2022-02-14 16:38:03,592 dispatch pc=66, inst=LOAD_FAST(arg=1, lineno=491)
DEBUG 2022-02-14 16:38:03,592 stack ['$62load_method.8', '$a64.9']
DEBUG 2022-02-14 16:38:03,592 dispatch pc=68, inst=LOAD_FAST(arg=5, lineno=491)
DEBUG 2022-02-14 16:38:03,592 stack ['$62load_method.8', '$a64.9', '$b66.10']
DEBUG 2022-02-14 16:38:03,592 dispatch pc=70, inst=CALL_METHOD(arg=3, lineno=491)
DEBUG 2022-02-14 16:38:03,592 stack ['$62load_method.8', '$a64.9', '$b66.10', '$out68.11']
DEBUG 2022-02-14 16:38:03,592 dispatch pc=72, inst=RETURN_VALUE(arg=None, lineno=491)
DEBUG 2022-02-14 16:38:03,592 stack ['$70call_method.12']
DEBUG 2022-02-14 16:38:03,592 end state. edges=[]
DEBUG 2022-02-14 16:38:03,592 -------------------------Prune PHIs-------------------------
DEBUG 2022-02-14 16:38:03,592 Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=28 nstack_initial=0): set(),
             State(pc_initial=44 nstack_initial=0): set()})
DEBUG 2022-02-14 16:38:03,593 defmap: {}
DEBUG 2022-02-14 16:38:03,593 phismap: defaultdict(<class 'set'>, {})
DEBUG 2022-02-14 16:38:03,593 changing phismap: defaultdict(<class 'set'>, {})
DEBUG 2022-02-14 16:38:03,593 keep phismap: {}
DEBUG 2022-02-14 16:38:03,593 new_out: defaultdict(<class 'dict'>, {})
DEBUG 2022-02-14 16:38:03,593 ----------------------DONE Prune PHIs-----------------------
DEBUG 2022-02-14 16:38:03,593 block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$a2.0'}), (4, {'item': '$a2.0', 'res': '$4load_attr.1'}), (6, {'iterable': '$4load_attr.1', 'stores': ['$6unpack_sequence.2', '$6unpack_sequence.3'], 'tupleobj': '$6unpack_sequence.4'}), (8, {'value': '$6unpack_sequence.2'}), (10, {'value': '$6unpack_sequence.3'}), (12, {'res': '$b12.5'}), (14, {'item': '$b12.5', 'res': '$14load_attr.6'}), (16, {'iterable': '$14load_attr.6', 'stores': ['$16unpack_sequence.7'], 'tupleobj': '$16unpack_sequence.8'}), (18, {'value': '$16unpack_sequence.7'}), (20, {'res': '$n20.9'}), (22, {'res': '$const22.10'}), (24, {'lhs': '$n20.9', 'rhs': '$const22.10', 'res': '$24compare_op.11'}), (26, {'pred': '$24compare_op.11'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={28: (), 44: ()})
DEBUG 2022-02-14 16:38:03,593 block_infos State(pc_initial=28 nstack_initial=0):
AdaptBlockInfo(insts=((28, {'res': '$28load_global.0'}), (30, {'item': '$28load_global.0', 'res': '$30load_method.1'}), (32, {'res': '$m32.2'}), (34, {'items': ['$m32.2'], 'res': '$34build_tuple.3'}), (36, {'res': '$a36.4'}), (38, {'item': '$a36.4', 'res': '$38load_attr.5'}), (40, {'func': '$30load_method.1', 'args': ['$34build_tuple.3', '$38load_attr.5'], 'res': '$40call_method.6'}), (42, {'retval': '$40call_method.6', 'castval': '$42return_value.7'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG 2022-02-14 16:38:03,593 block_infos State(pc_initial=44 nstack_initial=0):
AdaptBlockInfo(insts=((44, {'res': '$44load_global.0'}), (46, {'item': '$44load_global.0', 'res': '$46load_method.1'}), (48, {'res': '$m48.2'}), (50, {'items': ['$m48.2'], 'res': '$50build_tuple.3'}), (52, {'res': '$a52.4'}), (54, {'item': '$a52.4', 'res': '$54load_attr.5'}), (56, {'func': '$46load_method.1', 'args': ['$50build_tuple.3', '$54load_attr.5'], 'res': '$56call_method.6'}), (58, {'value': '$56call_method.6'}), (60, {'res': '$60load_global.7'}), (62, {'item': '$60load_global.7', 'res': '$62load_method.8'}), (64, {'res': '$a64.9'}), (66, {'res': '$b66.10'}), (68, {'res': '$out68.11'}), (70, {'func': '$62load_method.8', 'args': ['$a64.9', '$b66.10', '$out68.11'], 'res': '$70call_method.12'}), (72, {'retval': '$70call_method.12', 'castval': '$72return_value.13'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG 2022-02-14 16:38:03,595 label 0:
    a = arg(0, name=a)                       ['a']
    b = arg(1, name=b)                       ['b']
    $4load_attr.1 = getattr(value=a, attr=shape) ['$4load_attr.1', 'a']
    $6unpack_sequence.4 = exhaust_iter(value=$4load_attr.1, count=2) ['$4load_attr.1', '$6unpack_sequence.4']
    $6unpack_sequence.2 = static_getitem(value=$6unpack_sequence.4, index=0, index_var=None, fn=<built-in function getitem>) ['$6unpack_sequence.2', '$6unpack_sequence.4']
    $6unpack_sequence.3 = static_getitem(value=$6unpack_sequence.4, index=1, index_var=None, fn=<built-in function getitem>) ['$6unpack_sequence.3', '$6unpack_sequence.4']
    m = $6unpack_sequence.2                  ['$6unpack_sequence.2', 'm']
    n = $6unpack_sequence.3                  ['$6unpack_sequence.3', 'n']
    $14load_attr.6 = getattr(value=b, attr=shape) ['$14load_attr.6', 'b']
    $16unpack_sequence.8 = exhaust_iter(value=$14load_attr.6, count=1) ['$14load_attr.6', '$16unpack_sequence.8']
    _n = static_getitem(value=$16unpack_sequence.8, index=0, index_var=None, fn=<built-in function getitem>) ['$16unpack_sequence.8', '_n']
    $const22.10 = const(int, 0)              ['$const22.10']
    $24compare_op.11 = n == $const22.10      ['$24compare_op.11', '$const22.10', 'n']
    bool26 = global(bool: <class 'bool'>)    ['bool26']
    $26pred = call bool26($24compare_op.11, func=bool26, args=(Var($24compare_op.11, linalg.py:488),), kws=(), vararg=None, target=None) ['$24compare_op.11', '$26pred', 'bool26']
    branch $26pred, 28, 44                   ['$26pred']
label 28:
    $28load_global.0 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>) ['$28load_global.0']
    $30load_method.1 = getattr(value=$28load_global.0, attr=zeros) ['$28load_global.0', '$30load_method.1']
    $34build_tuple.3 = build_tuple(items=[Var(m, linalg.py:486)]) ['$34build_tuple.3', 'm']
    $38load_attr.5 = getattr(value=a, attr=dtype) ['$38load_attr.5', 'a']
    $40call_method.6 = call $30load_method.1($34build_tuple.3, $38load_attr.5, func=$30load_method.1, args=[Var($34build_tuple.3, linalg.py:489), Var($38load_attr.5, linalg.py:489)], kws=(), vararg=None, target=None) ['$30load_method.1', '$34build_tuple.3', '$38load_attr.5', '$40call_method.6']
    $42return_value.7 = cast(value=$40call_method.6) ['$40call_method.6', '$42return_value.7']
    return $42return_value.7                 ['$42return_value.7']
label 44:
    $44load_global.0 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>) ['$44load_global.0']
    $46load_method.1 = getattr(value=$44load_global.0, attr=empty) ['$44load_global.0', '$46load_method.1']
    $50build_tuple.3 = build_tuple(items=[Var(m, linalg.py:486)]) ['$50build_tuple.3', 'm']
    $54load_attr.5 = getattr(value=a, attr=dtype) ['$54load_attr.5', 'a']
    out = call $46load_method.1($50build_tuple.3, $54load_attr.5, func=$46load_method.1, args=[Var($50build_tuple.3, linalg.py:490), Var($54load_attr.5, linalg.py:490)], kws=(), vararg=None, target=None) ['$46load_method.1', '$50build_tuple.3', '$54load_attr.5', 'out']
    $60load_global.7 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>) ['$60load_global.7']
    $62load_method.8 = getattr(value=$60load_global.7, attr=dot) ['$60load_global.7', '$62load_method.8']
    $70call_method.12 = call $62load_method.8(a, b, out, func=$62load_method.8, args=[Var(a, linalg.py:486), Var(b, linalg.py:486), Var(out, linalg.py:490)], kws=(), vararg=None, target=None) ['$62load_method.8', '$70call_method.12', 'a', 'b', 'out']
    $72return_value.13 = cast(value=$70call_method.12) ['$70call_method.12', '$72return_value.13']
    return $72return_value.13                ['$72return_value.13']

DEBUG 2022-02-14 16:38:03,599 ==== SSA block analysis pass on 0
DEBUG 2022-02-14 16:38:03,599 Running <numba.core.ssa._GatherDefsHandler object at 0x7fa047352a30>
DEBUG 2022-02-14 16:38:03,599 on stmt: a = arg(0, name=a)
DEBUG 2022-02-14 16:38:03,599 on stmt: b = arg(1, name=b)
DEBUG 2022-02-14 16:38:03,599 on stmt: $4load_attr.1 = getattr(value=a, attr=shape)
DEBUG 2022-02-14 16:38:03,599 on stmt: $6unpack_sequence.4 = exhaust_iter(value=$4load_attr.1, count=2)
DEBUG 2022-02-14 16:38:03,599 on stmt: $6unpack_sequence.2 = static_getitem(value=$6unpack_sequence.4, index=0, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:03,599 on stmt: $6unpack_sequence.3 = static_getitem(value=$6unpack_sequence.4, index=1, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:03,599 on stmt: m = $6unpack_sequence.2
DEBUG 2022-02-14 16:38:03,599 on stmt: n = $6unpack_sequence.3
DEBUG 2022-02-14 16:38:03,599 on stmt: $14load_attr.6 = getattr(value=b, attr=shape)
DEBUG 2022-02-14 16:38:03,599 on stmt: $16unpack_sequence.8 = exhaust_iter(value=$14load_attr.6, count=1)
DEBUG 2022-02-14 16:38:03,599 on stmt: _n = static_getitem(value=$16unpack_sequence.8, index=0, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:03,599 on stmt: $const22.10 = const(int, 0)
DEBUG 2022-02-14 16:38:03,599 on stmt: $24compare_op.11 = n == $const22.10
DEBUG 2022-02-14 16:38:03,600 on stmt: bool26 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:38:03,600 on stmt: $26pred = call bool26($24compare_op.11, func=bool26, args=(Var($24compare_op.11, linalg.py:488),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:03,600 on stmt: branch $26pred, 28, 44
DEBUG 2022-02-14 16:38:03,600 ==== SSA block analysis pass on 28
DEBUG 2022-02-14 16:38:03,600 Running <numba.core.ssa._GatherDefsHandler object at 0x7fa047352a30>
DEBUG 2022-02-14 16:38:03,600 on stmt: $28load_global.0 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:38:03,600 on stmt: $30load_method.1 = getattr(value=$28load_global.0, attr=zeros)
DEBUG 2022-02-14 16:38:03,600 on stmt: $34build_tuple.3 = build_tuple(items=[Var(m, linalg.py:486)])
DEBUG 2022-02-14 16:38:03,600 on stmt: $38load_attr.5 = getattr(value=a, attr=dtype)
DEBUG 2022-02-14 16:38:03,600 on stmt: $40call_method.6 = call $30load_method.1($34build_tuple.3, $38load_attr.5, func=$30load_method.1, args=[Var($34build_tuple.3, linalg.py:489), Var($38load_attr.5, linalg.py:489)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:03,600 on stmt: $42return_value.7 = cast(value=$40call_method.6)
DEBUG 2022-02-14 16:38:03,600 on stmt: return $42return_value.7
DEBUG 2022-02-14 16:38:03,600 ==== SSA block analysis pass on 44
DEBUG 2022-02-14 16:38:03,600 Running <numba.core.ssa._GatherDefsHandler object at 0x7fa047352a30>
DEBUG 2022-02-14 16:38:03,600 on stmt: $44load_global.0 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:38:03,600 on stmt: $46load_method.1 = getattr(value=$44load_global.0, attr=empty)
DEBUG 2022-02-14 16:38:03,600 on stmt: $50build_tuple.3 = build_tuple(items=[Var(m, linalg.py:486)])
DEBUG 2022-02-14 16:38:03,600 on stmt: $54load_attr.5 = getattr(value=a, attr=dtype)
DEBUG 2022-02-14 16:38:03,600 on stmt: out = call $46load_method.1($50build_tuple.3, $54load_attr.5, func=$46load_method.1, args=[Var($50build_tuple.3, linalg.py:490), Var($54load_attr.5, linalg.py:490)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:03,600 on stmt: $60load_global.7 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:38:03,600 on stmt: $62load_method.8 = getattr(value=$60load_global.7, attr=dot)
DEBUG 2022-02-14 16:38:03,601 on stmt: $70call_method.12 = call $62load_method.8(a, b, out, func=$62load_method.8, args=[Var(a, linalg.py:486), Var(b, linalg.py:486), Var(out, linalg.py:490)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:03,601 on stmt: $72return_value.13 = cast(value=$70call_method.12)
DEBUG 2022-02-14 16:38:03,601 on stmt: return $72return_value.13
DEBUG 2022-02-14 16:38:03,601 defs defaultdict(<class 'list'>,
            {'$14load_attr.6': [<numba.core.ir.Assign object at 0x7fa0473c51f0>],
             '$16unpack_sequence.8': [<numba.core.ir.Assign object at 0x7fa0473c5fd0>],
             '$24compare_op.11': [<numba.core.ir.Assign object at 0x7fa04753f100>],
             '$26pred': [<numba.core.ir.Assign object at 0x7fa047575880>],
             '$28load_global.0': [<numba.core.ir.Assign object at 0x7fa047274910>],
             '$30load_method.1': [<numba.core.ir.Assign object at 0x7fa047369f40>],
             '$34build_tuple.3': [<numba.core.ir.Assign object at 0x7fa047369a00>],
             '$38load_attr.5': [<numba.core.ir.Assign object at 0x7fa0473fa5e0>],
             '$40call_method.6': [<numba.core.ir.Assign object at 0x7fa0473fae50>],
             '$42return_value.7': [<numba.core.ir.Assign object at 0x7fa0473faf70>],
             '$44load_global.0': [<numba.core.ir.Assign object at 0x7fa0473faee0>],
             '$46load_method.1': [<numba.core.ir.Assign object at 0x7fa0473fabb0>],
             '$4load_attr.1': [<numba.core.ir.Assign object at 0x7fa0473692e0>],
             '$50build_tuple.3': [<numba.core.ir.Assign object at 0x7fa0473fa730>],
             '$54load_attr.5': [<numba.core.ir.Assign object at 0x7fa0473fa0d0>],
             '$60load_global.7': [<numba.core.ir.Assign object at 0x7fa047352220>],
             '$62load_method.8': [<numba.core.ir.Assign object at 0x7fa047352910>],
             '$6unpack_sequence.2': [<numba.core.ir.Assign object at 0x7fa047369970>],
             '$6unpack_sequence.3': [<numba.core.ir.Assign object at 0x7fa047369670>],
             '$6unpack_sequence.4': [<numba.core.ir.Assign object at 0x7fa047369310>],
             '$70call_method.12': [<numba.core.ir.Assign object at 0x7fa047352d60>],
             '$72return_value.13': [<numba.core.ir.Assign object at 0x7fa0473525b0>],
             '$const22.10': [<numba.core.ir.Assign object at 0x7fa04753fdf0>],
             '_n': [<numba.core.ir.Assign object at 0x7fa0473c5880>],
             'a': [<numba.core.ir.Assign object at 0x7fa04753fa30>],
             'b': [<numba.core.ir.Assign object at 0x7fa0473691c0>],
             'bool26': [<numba.core.ir.Assign object at 0x7fa0474381f0>],
             'm': [<numba.core.ir.Assign object at 0x7fa047369580>],
             'n': [<numba.core.ir.Assign object at 0x7fa047369400>],
             'out': [<numba.core.ir.Assign object at 0x7fa047352b50>]})
DEBUG 2022-02-14 16:38:03,601 SSA violators set()
DEBUG 2022-02-14 16:38:03,606 bytecode dump:
>          0	NOP(arg=None, lineno=3)
           2	LOAD_GLOBAL(arg=0, lineno=3)
           4	LOAD_FAST(arg=0, lineno=3)
           6	LOAD_FAST(arg=1, lineno=3)
           8	LOAD_FAST(arg=2, lineno=3)
          10	CALL_FUNCTION(arg=3, lineno=3)
          12	RETURN_VALUE(arg=None, lineno=3)
DEBUG 2022-02-14 16:38:03,606 pending: deque([State(pc_initial=0 nstack_initial=0)])
DEBUG 2022-02-14 16:38:03,606 stack: []
DEBUG 2022-02-14 16:38:03,606 dispatch pc=0, inst=NOP(arg=None, lineno=3)
DEBUG 2022-02-14 16:38:03,606 stack []
DEBUG 2022-02-14 16:38:03,606 dispatch pc=2, inst=LOAD_GLOBAL(arg=0, lineno=3)
DEBUG 2022-02-14 16:38:03,606 stack []
DEBUG 2022-02-14 16:38:03,606 dispatch pc=4, inst=LOAD_FAST(arg=0, lineno=3)
DEBUG 2022-02-14 16:38:03,606 stack ['$2load_global.0']
DEBUG 2022-02-14 16:38:03,607 dispatch pc=6, inst=LOAD_FAST(arg=1, lineno=3)
DEBUG 2022-02-14 16:38:03,607 stack ['$2load_global.0', '$tmp04.1']
DEBUG 2022-02-14 16:38:03,607 dispatch pc=8, inst=LOAD_FAST(arg=2, lineno=3)
DEBUG 2022-02-14 16:38:03,607 stack ['$2load_global.0', '$tmp04.1', '$tmp16.2']
DEBUG 2022-02-14 16:38:03,607 dispatch pc=10, inst=CALL_FUNCTION(arg=3, lineno=3)
DEBUG 2022-02-14 16:38:03,607 stack ['$2load_global.0', '$tmp04.1', '$tmp16.2', '$tmp28.3']
DEBUG 2022-02-14 16:38:03,607 dispatch pc=12, inst=RETURN_VALUE(arg=None, lineno=3)
DEBUG 2022-02-14 16:38:03,607 stack ['$10call_function.4']
DEBUG 2022-02-14 16:38:03,607 end state. edges=[]
DEBUG 2022-02-14 16:38:03,607 -------------------------Prune PHIs-------------------------
DEBUG 2022-02-14 16:38:03,607 Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
DEBUG 2022-02-14 16:38:03,607 defmap: {}
DEBUG 2022-02-14 16:38:03,607 phismap: defaultdict(<class 'set'>, {})
DEBUG 2022-02-14 16:38:03,607 changing phismap: defaultdict(<class 'set'>, {})
DEBUG 2022-02-14 16:38:03,607 keep phismap: {}
DEBUG 2022-02-14 16:38:03,607 new_out: defaultdict(<class 'dict'>, {})
DEBUG 2022-02-14 16:38:03,607 ----------------------DONE Prune PHIs-----------------------
DEBUG 2022-02-14 16:38:03,607 block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$2load_global.0'}), (4, {'res': '$tmp04.1'}), (6, {'res': '$tmp16.2'}), (8, {'res': '$tmp28.3'}), (10, {'func': '$2load_global.0', 'args': ['$tmp04.1', '$tmp16.2', '$tmp28.3'], 'res': '$10call_function.4'}), (12, {'retval': '$10call_function.4', 'castval': '$12return_value.5'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG 2022-02-14 16:38:03,608 label 0:
    tmp0 = arg(0, name=tmp0)                 ['tmp0']
    tmp1 = arg(1, name=tmp1)                 ['tmp1']
    tmp2 = arg(2, name=tmp2)                 ['tmp2']
    $2load_global.0 = global(intrin: <intrinsic stub>) ['$2load_global.0']
    $10call_function.4 = call $2load_global.0(tmp0, tmp1, tmp2, func=$2load_global.0, args=[Var(tmp0, <string>:3), Var(tmp1, <string>:3), Var(tmp2, <string>:3)], kws=(), vararg=None, target=None) ['$10call_function.4', '$2load_global.0', 'tmp0', 'tmp1', 'tmp2']
    $12return_value.5 = cast(value=$10call_function.4) ['$10call_function.4', '$12return_value.5']
    return $12return_value.5                 ['$12return_value.5']

DEBUG 2022-02-14 16:38:03,609 ==== SSA block analysis pass on 0
DEBUG 2022-02-14 16:38:03,609 Running <numba.core.ssa._GatherDefsHandler object at 0x7fa04737d7c0>
DEBUG 2022-02-14 16:38:03,609 on stmt: tmp0 = arg(0, name=tmp0)
DEBUG 2022-02-14 16:38:03,609 on stmt: tmp1 = arg(1, name=tmp1)
DEBUG 2022-02-14 16:38:03,609 on stmt: tmp2 = arg(2, name=tmp2)
DEBUG 2022-02-14 16:38:03,609 on stmt: $2load_global.0 = global(intrin: <intrinsic stub>)
DEBUG 2022-02-14 16:38:03,610 on stmt: $10call_function.4 = call $2load_global.0(tmp0, tmp1, tmp2, func=$2load_global.0, args=[Var(tmp0, <string>:3), Var(tmp1, <string>:3), Var(tmp2, <string>:3)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:03,610 on stmt: $12return_value.5 = cast(value=$10call_function.4)
DEBUG 2022-02-14 16:38:03,610 on stmt: return $12return_value.5
DEBUG 2022-02-14 16:38:03,610 defs defaultdict(<class 'list'>,
            {'$10call_function.4': [<numba.core.ir.Assign object at 0x7fa046ca4af0>],
             '$12return_value.5': [<numba.core.ir.Assign object at 0x7fa046ca40d0>],
             '$2load_global.0': [<numba.core.ir.Assign object at 0x7fa046ca4370>],
             'tmp0': [<numba.core.ir.Assign object at 0x7fa04737d070>],
             'tmp1': [<numba.core.ir.Assign object at 0x7fa04737d520>],
             'tmp2': [<numba.core.ir.Assign object at 0x7fa04737d9a0>]})
DEBUG 2022-02-14 16:38:03,610 SSA violators set()
DEBUG 2022-02-14 16:38:03,617 bytecode dump:
>          0	NOP(arg=None, lineno=571)
           2	LOAD_FAST(arg=0, lineno=571)
           4	LOAD_ATTR(arg=0, lineno=571)
           6	UNPACK_SEQUENCE(arg=2, lineno=571)
           8	STORE_FAST(arg=3, lineno=571)
          10	STORE_FAST(arg=4, lineno=571)
          12	LOAD_FAST(arg=1, lineno=572)
          14	LOAD_ATTR(arg=0, lineno=572)
          16	UNPACK_SEQUENCE(arg=1, lineno=572)
          18	STORE_FAST(arg=5, lineno=572)
          20	LOAD_FAST(arg=5, lineno=573)
          22	LOAD_FAST(arg=4, lineno=573)
          24	COMPARE_OP(arg=3, lineno=573)
          26	POP_JUMP_IF_FALSE(arg=36, lineno=573)
          28	LOAD_GLOBAL(arg=1, lineno=574)
          30	LOAD_CONST(arg=1, lineno=574)
          32	CALL_FUNCTION(arg=1, lineno=574)
          34	RAISE_VARARGS(arg=1, lineno=574)
>         36	LOAD_FAST(arg=2, lineno=576)
          38	LOAD_ATTR(arg=0, lineno=576)
          40	LOAD_FAST(arg=3, lineno=576)
          42	BUILD_TUPLE(arg=1, lineno=576)
          44	COMPARE_OP(arg=3, lineno=576)
          46	POP_JUMP_IF_FALSE(arg=56, lineno=576)
          48	LOAD_GLOBAL(arg=1, lineno=577)
          50	LOAD_CONST(arg=2, lineno=577)
          52	CALL_FUNCTION(arg=1, lineno=577)
          54	RAISE_VARARGS(arg=1, lineno=577)
>         56	LOAD_CONST(arg=0, lineno=577)
          58	RETURN_VALUE(arg=None, lineno=577)
DEBUG 2022-02-14 16:38:03,617 pending: deque([State(pc_initial=0 nstack_initial=0)])
DEBUG 2022-02-14 16:38:03,617 stack: []
DEBUG 2022-02-14 16:38:03,617 dispatch pc=0, inst=NOP(arg=None, lineno=571)
DEBUG 2022-02-14 16:38:03,617 stack []
DEBUG 2022-02-14 16:38:03,617 dispatch pc=2, inst=LOAD_FAST(arg=0, lineno=571)
DEBUG 2022-02-14 16:38:03,617 stack []
DEBUG 2022-02-14 16:38:03,617 dispatch pc=4, inst=LOAD_ATTR(arg=0, lineno=571)
DEBUG 2022-02-14 16:38:03,617 stack ['$a2.0']
DEBUG 2022-02-14 16:38:03,617 dispatch pc=6, inst=UNPACK_SEQUENCE(arg=2, lineno=571)
DEBUG 2022-02-14 16:38:03,617 stack ['$4load_attr.1']
DEBUG 2022-02-14 16:38:03,617 dispatch pc=8, inst=STORE_FAST(arg=3, lineno=571)
DEBUG 2022-02-14 16:38:03,617 stack ['$6unpack_sequence.3', '$6unpack_sequence.2']
DEBUG 2022-02-14 16:38:03,617 dispatch pc=10, inst=STORE_FAST(arg=4, lineno=571)
DEBUG 2022-02-14 16:38:03,617 stack ['$6unpack_sequence.3']
DEBUG 2022-02-14 16:38:03,617 dispatch pc=12, inst=LOAD_FAST(arg=1, lineno=572)
DEBUG 2022-02-14 16:38:03,617 stack []
DEBUG 2022-02-14 16:38:03,617 dispatch pc=14, inst=LOAD_ATTR(arg=0, lineno=572)
DEBUG 2022-02-14 16:38:03,617 stack ['$b12.5']
DEBUG 2022-02-14 16:38:03,617 dispatch pc=16, inst=UNPACK_SEQUENCE(arg=1, lineno=572)
DEBUG 2022-02-14 16:38:03,618 stack ['$14load_attr.6']
DEBUG 2022-02-14 16:38:03,618 dispatch pc=18, inst=STORE_FAST(arg=5, lineno=572)
DEBUG 2022-02-14 16:38:03,618 stack ['$16unpack_sequence.7']
DEBUG 2022-02-14 16:38:03,618 dispatch pc=20, inst=LOAD_FAST(arg=5, lineno=573)
DEBUG 2022-02-14 16:38:03,618 stack []
DEBUG 2022-02-14 16:38:03,618 dispatch pc=22, inst=LOAD_FAST(arg=4, lineno=573)
DEBUG 2022-02-14 16:38:03,618 stack ['$n20.9']
DEBUG 2022-02-14 16:38:03,618 dispatch pc=24, inst=COMPARE_OP(arg=3, lineno=573)
DEBUG 2022-02-14 16:38:03,618 stack ['$n20.9', '$_n22.10']
DEBUG 2022-02-14 16:38:03,618 dispatch pc=26, inst=POP_JUMP_IF_FALSE(arg=36, lineno=573)
DEBUG 2022-02-14 16:38:03,618 stack ['$24compare_op.11']
DEBUG 2022-02-14 16:38:03,618 end state. edges=[Edge(pc=28, stack=(), blockstack=(), npush=0), Edge(pc=36, stack=(), blockstack=(), npush=0)]
DEBUG 2022-02-14 16:38:03,618 pending: deque([State(pc_initial=28 nstack_initial=0), State(pc_initial=36 nstack_initial=0)])
DEBUG 2022-02-14 16:38:03,618 stack: []
DEBUG 2022-02-14 16:38:03,618 dispatch pc=28, inst=LOAD_GLOBAL(arg=1, lineno=574)
DEBUG 2022-02-14 16:38:03,618 stack []
DEBUG 2022-02-14 16:38:03,618 dispatch pc=30, inst=LOAD_CONST(arg=1, lineno=574)
DEBUG 2022-02-14 16:38:03,618 stack ['$28load_global.0']
DEBUG 2022-02-14 16:38:03,618 dispatch pc=32, inst=CALL_FUNCTION(arg=1, lineno=574)
DEBUG 2022-02-14 16:38:03,618 stack ['$28load_global.0', '$const30.1']
DEBUG 2022-02-14 16:38:03,618 dispatch pc=34, inst=RAISE_VARARGS(arg=1, lineno=574)
DEBUG 2022-02-14 16:38:03,618 stack ['$32call_function.2']
DEBUG 2022-02-14 16:38:03,618 end state. edges=[]
DEBUG 2022-02-14 16:38:03,619 pending: deque([State(pc_initial=36 nstack_initial=0)])
DEBUG 2022-02-14 16:38:03,619 stack: []
DEBUG 2022-02-14 16:38:03,619 dispatch pc=36, inst=LOAD_FAST(arg=2, lineno=576)
DEBUG 2022-02-14 16:38:03,619 stack []
DEBUG 2022-02-14 16:38:03,619 dispatch pc=38, inst=LOAD_ATTR(arg=0, lineno=576)
DEBUG 2022-02-14 16:38:03,619 stack ['$out36.0']
DEBUG 2022-02-14 16:38:03,619 dispatch pc=40, inst=LOAD_FAST(arg=3, lineno=576)
DEBUG 2022-02-14 16:38:03,619 stack ['$38load_attr.1']
DEBUG 2022-02-14 16:38:03,619 dispatch pc=42, inst=BUILD_TUPLE(arg=1, lineno=576)
DEBUG 2022-02-14 16:38:03,619 stack ['$38load_attr.1', '$m40.2']
DEBUG 2022-02-14 16:38:03,619 dispatch pc=44, inst=COMPARE_OP(arg=3, lineno=576)
DEBUG 2022-02-14 16:38:03,619 stack ['$38load_attr.1', '$42build_tuple.3']
DEBUG 2022-02-14 16:38:03,619 dispatch pc=46, inst=POP_JUMP_IF_FALSE(arg=56, lineno=576)
DEBUG 2022-02-14 16:38:03,619 stack ['$44compare_op.4']
DEBUG 2022-02-14 16:38:03,619 end state. edges=[Edge(pc=48, stack=(), blockstack=(), npush=0), Edge(pc=56, stack=(), blockstack=(), npush=0)]
DEBUG 2022-02-14 16:38:03,619 pending: deque([State(pc_initial=48 nstack_initial=0), State(pc_initial=56 nstack_initial=0)])
DEBUG 2022-02-14 16:38:03,619 stack: []
DEBUG 2022-02-14 16:38:03,619 dispatch pc=48, inst=LOAD_GLOBAL(arg=1, lineno=577)
DEBUG 2022-02-14 16:38:03,619 stack []
DEBUG 2022-02-14 16:38:03,619 dispatch pc=50, inst=LOAD_CONST(arg=2, lineno=577)
DEBUG 2022-02-14 16:38:03,619 stack ['$48load_global.0']
DEBUG 2022-02-14 16:38:03,619 dispatch pc=52, inst=CALL_FUNCTION(arg=1, lineno=577)
DEBUG 2022-02-14 16:38:03,619 stack ['$48load_global.0', '$const50.1']
DEBUG 2022-02-14 16:38:03,620 dispatch pc=54, inst=RAISE_VARARGS(arg=1, lineno=577)
DEBUG 2022-02-14 16:38:03,620 stack ['$52call_function.2']
DEBUG 2022-02-14 16:38:03,620 end state. edges=[]
DEBUG 2022-02-14 16:38:03,620 pending: deque([State(pc_initial=56 nstack_initial=0)])
DEBUG 2022-02-14 16:38:03,620 stack: []
DEBUG 2022-02-14 16:38:03,620 dispatch pc=56, inst=LOAD_CONST(arg=0, lineno=577)
DEBUG 2022-02-14 16:38:03,620 stack []
DEBUG 2022-02-14 16:38:03,620 dispatch pc=58, inst=RETURN_VALUE(arg=None, lineno=577)
DEBUG 2022-02-14 16:38:03,620 stack ['$const56.0']
DEBUG 2022-02-14 16:38:03,620 end state. edges=[]
DEBUG 2022-02-14 16:38:03,620 -------------------------Prune PHIs-------------------------
DEBUG 2022-02-14 16:38:03,620 Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=28 nstack_initial=0): set(),
             State(pc_initial=36 nstack_initial=0): set(),
             State(pc_initial=48 nstack_initial=0): set(),
             State(pc_initial=56 nstack_initial=0): set()})
DEBUG 2022-02-14 16:38:03,620 defmap: {}
DEBUG 2022-02-14 16:38:03,620 phismap: defaultdict(<class 'set'>, {})
DEBUG 2022-02-14 16:38:03,620 changing phismap: defaultdict(<class 'set'>, {})
DEBUG 2022-02-14 16:38:03,620 keep phismap: {}
DEBUG 2022-02-14 16:38:03,620 new_out: defaultdict(<class 'dict'>, {})
DEBUG 2022-02-14 16:38:03,621 ----------------------DONE Prune PHIs-----------------------
DEBUG 2022-02-14 16:38:03,621 block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$a2.0'}), (4, {'item': '$a2.0', 'res': '$4load_attr.1'}), (6, {'iterable': '$4load_attr.1', 'stores': ['$6unpack_sequence.2', '$6unpack_sequence.3'], 'tupleobj': '$6unpack_sequence.4'}), (8, {'value': '$6unpack_sequence.2'}), (10, {'value': '$6unpack_sequence.3'}), (12, {'res': '$b12.5'}), (14, {'item': '$b12.5', 'res': '$14load_attr.6'}), (16, {'iterable': '$14load_attr.6', 'stores': ['$16unpack_sequence.7'], 'tupleobj': '$16unpack_sequence.8'}), (18, {'value': '$16unpack_sequence.7'}), (20, {'res': '$n20.9'}), (22, {'res': '$_n22.10'}), (24, {'lhs': '$n20.9', 'rhs': '$_n22.10', 'res': '$24compare_op.11'}), (26, {'pred': '$24compare_op.11'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={28: (), 36: ()})
DEBUG 2022-02-14 16:38:03,621 block_infos State(pc_initial=28 nstack_initial=0):
AdaptBlockInfo(insts=((28, {'res': '$28load_global.0'}), (30, {'res': '$const30.1'}), (32, {'func': '$28load_global.0', 'args': ['$const30.1'], 'res': '$32call_function.2'}), (34, {'exc': '$32call_function.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG 2022-02-14 16:38:03,621 block_infos State(pc_initial=36 nstack_initial=0):
AdaptBlockInfo(insts=((36, {'res': '$out36.0'}), (38, {'item': '$out36.0', 'res': '$38load_attr.1'}), (40, {'res': '$m40.2'}), (42, {'items': ['$m40.2'], 'res': '$42build_tuple.3'}), (44, {'lhs': '$38load_attr.1', 'rhs': '$42build_tuple.3', 'res': '$44compare_op.4'}), (46, {'pred': '$44compare_op.4'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={48: (), 56: ()})
DEBUG 2022-02-14 16:38:03,621 block_infos State(pc_initial=48 nstack_initial=0):
AdaptBlockInfo(insts=((48, {'res': '$48load_global.0'}), (50, {'res': '$const50.1'}), (52, {'func': '$48load_global.0', 'args': ['$const50.1'], 'res': '$52call_function.2'}), (54, {'exc': '$52call_function.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG 2022-02-14 16:38:03,621 block_infos State(pc_initial=56 nstack_initial=0):
AdaptBlockInfo(insts=((56, {'res': '$const56.0'}), (58, {'retval': '$const56.0', 'castval': '$58return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG 2022-02-14 16:38:03,622 label 0:
    a = arg(0, name=a)                       ['a']
    b = arg(1, name=b)                       ['b']
    out = arg(2, name=out)                   ['out']
    $4load_attr.1 = getattr(value=a, attr=shape) ['$4load_attr.1', 'a']
    $6unpack_sequence.4 = exhaust_iter(value=$4load_attr.1, count=2) ['$4load_attr.1', '$6unpack_sequence.4']
    $6unpack_sequence.2 = static_getitem(value=$6unpack_sequence.4, index=0, index_var=None, fn=<built-in function getitem>) ['$6unpack_sequence.2', '$6unpack_sequence.4']
    $6unpack_sequence.3 = static_getitem(value=$6unpack_sequence.4, index=1, index_var=None, fn=<built-in function getitem>) ['$6unpack_sequence.3', '$6unpack_sequence.4']
    m = $6unpack_sequence.2                  ['$6unpack_sequence.2', 'm']
    _n = $6unpack_sequence.3                 ['$6unpack_sequence.3', '_n']
    $14load_attr.6 = getattr(value=b, attr=shape) ['$14load_attr.6', 'b']
    $16unpack_sequence.8 = exhaust_iter(value=$14load_attr.6, count=1) ['$14load_attr.6', '$16unpack_sequence.8']
    n = static_getitem(value=$16unpack_sequence.8, index=0, index_var=None, fn=<built-in function getitem>) ['$16unpack_sequence.8', 'n']
    $24compare_op.11 = n != _n               ['$24compare_op.11', '_n', 'n']
    bool26 = global(bool: <class 'bool'>)    ['bool26']
    $26pred = call bool26($24compare_op.11, func=bool26, args=(Var($24compare_op.11, linalg.py:573),), kws=(), vararg=None, target=None) ['$24compare_op.11', '$26pred', 'bool26']
    branch $26pred, 28, 36                   ['$26pred']
label 28:
    $28load_global.0 = global(ValueError: <class 'ValueError'>) ['$28load_global.0']
    $const30.1 = const(str, incompatible array sizes for np.dot(a, b) (matrix * vector)) ['$const30.1']
    $32call_function.2 = call $28load_global.0($const30.1, func=$28load_global.0, args=[Var($const30.1, linalg.py:574)], kws=(), vararg=None, target=None) ['$28load_global.0', '$32call_function.2', '$const30.1']
    raise $32call_function.2                 ['$32call_function.2']
label 36:
    $38load_attr.1 = getattr(value=out, attr=shape) ['$38load_attr.1', 'out']
    $42build_tuple.3 = build_tuple(items=[Var(m, linalg.py:571)]) ['$42build_tuple.3', 'm']
    $44compare_op.4 = $38load_attr.1 != $42build_tuple.3 ['$38load_attr.1', '$42build_tuple.3', '$44compare_op.4']
    bool46 = global(bool: <class 'bool'>)    ['bool46']
    $46pred = call bool46($44compare_op.4, func=bool46, args=(Var($44compare_op.4, linalg.py:576),), kws=(), vararg=None, target=None) ['$44compare_op.4', '$46pred', 'bool46']
    branch $46pred, 48, 56                   ['$46pred']
label 48:
    $48load_global.0 = global(ValueError: <class 'ValueError'>) ['$48load_global.0']
    $const50.1 = const(str, incompatible output array size for np.dot(a, b, out) (matrix * vector)) ['$const50.1']
    $52call_function.2 = call $48load_global.0($const50.1, func=$48load_global.0, args=[Var($const50.1, linalg.py:577)], kws=(), vararg=None, target=None) ['$48load_global.0', '$52call_function.2', '$const50.1']
    raise $52call_function.2                 ['$52call_function.2']
label 56:
    $const56.0 = const(NoneType, None)       ['$const56.0']
    $58return_value.1 = cast(value=$const56.0) ['$58return_value.1', '$const56.0']
    return $58return_value.1                 ['$58return_value.1']

DEBUG 2022-02-14 16:38:03,626 ==== SSA block analysis pass on 0
DEBUG 2022-02-14 16:38:03,626 Running <numba.core.ssa._GatherDefsHandler object at 0x7fa046fe46d0>
DEBUG 2022-02-14 16:38:03,626 on stmt: a = arg(0, name=a)
DEBUG 2022-02-14 16:38:03,626 on stmt: b = arg(1, name=b)
DEBUG 2022-02-14 16:38:03,626 on stmt: out = arg(2, name=out)
DEBUG 2022-02-14 16:38:03,626 on stmt: $4load_attr.1 = getattr(value=a, attr=shape)
DEBUG 2022-02-14 16:38:03,626 on stmt: $6unpack_sequence.4 = exhaust_iter(value=$4load_attr.1, count=2)
DEBUG 2022-02-14 16:38:03,626 on stmt: $6unpack_sequence.2 = static_getitem(value=$6unpack_sequence.4, index=0, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:03,626 on stmt: $6unpack_sequence.3 = static_getitem(value=$6unpack_sequence.4, index=1, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:03,626 on stmt: m = $6unpack_sequence.2
DEBUG 2022-02-14 16:38:03,627 on stmt: _n = $6unpack_sequence.3
DEBUG 2022-02-14 16:38:03,627 on stmt: $14load_attr.6 = getattr(value=b, attr=shape)
DEBUG 2022-02-14 16:38:03,627 on stmt: $16unpack_sequence.8 = exhaust_iter(value=$14load_attr.6, count=1)
DEBUG 2022-02-14 16:38:03,627 on stmt: n = static_getitem(value=$16unpack_sequence.8, index=0, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:03,627 on stmt: $24compare_op.11 = n != _n
DEBUG 2022-02-14 16:38:03,627 on stmt: bool26 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:38:03,627 on stmt: $26pred = call bool26($24compare_op.11, func=bool26, args=(Var($24compare_op.11, linalg.py:573),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:03,627 on stmt: branch $26pred, 28, 36
DEBUG 2022-02-14 16:38:03,627 ==== SSA block analysis pass on 28
DEBUG 2022-02-14 16:38:03,627 Running <numba.core.ssa._GatherDefsHandler object at 0x7fa046fe46d0>
DEBUG 2022-02-14 16:38:03,627 on stmt: $28load_global.0 = global(ValueError: <class 'ValueError'>)
DEBUG 2022-02-14 16:38:03,627 on stmt: $const30.1 = const(str, incompatible array sizes for np.dot(a, b) (matrix * vector))
DEBUG 2022-02-14 16:38:03,627 on stmt: $32call_function.2 = call $28load_global.0($const30.1, func=$28load_global.0, args=[Var($const30.1, linalg.py:574)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:03,627 on stmt: <static> raise <class 'ValueError'>('incompatible array sizes for np.dot(a, b) (matrix * vector)')
DEBUG 2022-02-14 16:38:03,627 ==== SSA block analysis pass on 36
DEBUG 2022-02-14 16:38:03,627 Running <numba.core.ssa._GatherDefsHandler object at 0x7fa046fe46d0>
DEBUG 2022-02-14 16:38:03,627 on stmt: $38load_attr.1 = getattr(value=out, attr=shape)
DEBUG 2022-02-14 16:38:03,627 on stmt: $42build_tuple.3 = build_tuple(items=[Var(m, linalg.py:571)])
DEBUG 2022-02-14 16:38:03,627 on stmt: $44compare_op.4 = $38load_attr.1 != $42build_tuple.3
DEBUG 2022-02-14 16:38:03,627 on stmt: bool46 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:38:03,627 on stmt: $46pred = call bool46($44compare_op.4, func=bool46, args=(Var($44compare_op.4, linalg.py:576),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:03,628 on stmt: branch $46pred, 48, 56
DEBUG 2022-02-14 16:38:03,628 ==== SSA block analysis pass on 48
DEBUG 2022-02-14 16:38:03,628 Running <numba.core.ssa._GatherDefsHandler object at 0x7fa046fe46d0>
DEBUG 2022-02-14 16:38:03,628 on stmt: $48load_global.0 = global(ValueError: <class 'ValueError'>)
DEBUG 2022-02-14 16:38:03,628 on stmt: $const50.1 = const(str, incompatible output array size for np.dot(a, b, out) (matrix * vector))
DEBUG 2022-02-14 16:38:03,628 on stmt: $52call_function.2 = call $48load_global.0($const50.1, func=$48load_global.0, args=[Var($const50.1, linalg.py:577)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:03,628 on stmt: <static> raise <class 'ValueError'>('incompatible output array size for np.dot(a, b, out) (matrix * vector)')
DEBUG 2022-02-14 16:38:03,628 ==== SSA block analysis pass on 56
DEBUG 2022-02-14 16:38:03,628 Running <numba.core.ssa._GatherDefsHandler object at 0x7fa046fe46d0>
DEBUG 2022-02-14 16:38:03,628 on stmt: $const56.0 = const(NoneType, None)
DEBUG 2022-02-14 16:38:03,628 on stmt: $58return_value.1 = cast(value=$const56.0)
DEBUG 2022-02-14 16:38:03,628 on stmt: return $58return_value.1
DEBUG 2022-02-14 16:38:03,628 defs defaultdict(<class 'list'>,
            {'$14load_attr.6': [<numba.core.ir.Assign object at 0x7fa047136ac0>],
             '$16unpack_sequence.8': [<numba.core.ir.Assign object at 0x7fa0471365b0>],
             '$24compare_op.11': [<numba.core.ir.Assign object at 0x7fa0470e6d30>],
             '$26pred': [<numba.core.ir.Assign object at 0x7fa04734d2b0>],
             '$28load_global.0': [<numba.core.ir.Assign object at 0x7fa046fe4b80>],
             '$32call_function.2': [<numba.core.ir.Assign object at 0x7fa0464b0ac0>],
             '$38load_attr.1': [<numba.core.ir.Assign object at 0x7fa0464b0550>],
             '$42build_tuple.3': [<numba.core.ir.Assign object at 0x7fa0464b04c0>],
             '$44compare_op.4': [<numba.core.ir.Assign object at 0x7fa0464b01c0>],
             '$46pred': [<numba.core.ir.Assign object at 0x7fa0464919d0>],
             '$48load_global.0': [<numba.core.ir.Assign object at 0x7fa046491250>],
             '$4load_attr.1': [<numba.core.ir.Assign object at 0x7fa047136d30>],
             '$52call_function.2': [<numba.core.ir.Assign object at 0x7fa0464914c0>],
             '$58return_value.1': [<numba.core.ir.Assign object at 0x7fa046fe4190>],
             '$6unpack_sequence.2': [<numba.core.ir.Assign object at 0x7fa047136730>],
             '$6unpack_sequence.3': [<numba.core.ir.Assign object at 0x7fa047136130>],
             '$6unpack_sequence.4': [<numba.core.ir.Assign object at 0x7fa047136970>],
             '$const30.1': [<numba.core.ir.Assign object at 0x7fa0464b0ca0>],
             '$const50.1': [<numba.core.ir.Assign object at 0x7fa046491cd0>],
             '$const56.0': [<numba.core.ir.Assign object at 0x7fa0464912e0>],
             '_n': [<numba.core.ir.Assign object at 0x7fa0471364c0>],
             'a': [<numba.core.ir.Assign object at 0x7fa046fe4670>],
             'b': [<numba.core.ir.Assign object at 0x7fa046fe4d00>],
             'bool26': [<numba.core.ir.Assign object at 0x7fa0470e6790>],
             'bool46': [<numba.core.ir.Assign object at 0x7fa046491940>],
             'm': [<numba.core.ir.Assign object at 0x7fa047136b50>],
             'n': [<numba.core.ir.Assign object at 0x7fa047136fd0>],
             'out': [<numba.core.ir.Assign object at 0x7fa046fe4820>]})
DEBUG 2022-02-14 16:38:03,628 SSA violators set()
DEBUG 2022-02-14 16:38:04,129 bytecode dump:
>          0	NOP(arg=None, lineno=254)
           2	LOAD_GLOBAL(arg=0, lineno=254)
           4	LOAD_ATTR(arg=1, lineno=254)
           6	LOAD_ATTR(arg=2, lineno=254)
           8	LOAD_METHOD(arg=3, lineno=254)
          10	CALL_METHOD(arg=0, lineno=254)
          12	POP_TOP(arg=None, lineno=254)
          14	LOAD_DEREF(arg=0, lineno=255)
          16	STORE_FAST(arg=1, lineno=255)
          18	LOAD_GLOBAL(arg=0, lineno=256)
          20	LOAD_ATTR(arg=1, lineno=256)
          22	LOAD_ATTR(arg=2, lineno=256)
          24	LOAD_METHOD(arg=4, lineno=256)
          26	LOAD_GLOBAL(arg=5, lineno=256)
          28	LOAD_FAST(arg=0, lineno=256)
          30	CALL_FUNCTION(arg=1, lineno=256)
          32	CALL_METHOD(arg=1, lineno=256)
          34	GET_ITER(arg=None, lineno=256)
>         36	FOR_ITER(arg=16, lineno=256)
          38	STORE_FAST(arg=2, lineno=256)
          40	LOAD_FAST(arg=1, lineno=257)
          42	LOAD_FAST(arg=0, lineno=257)
          44	LOAD_FAST(arg=2, lineno=257)
          46	BINARY_SUBSCR(arg=None, lineno=257)
          48	INPLACE_ADD(arg=None, lineno=257)
          50	STORE_FAST(arg=1, lineno=257)
          52	JUMP_ABSOLUTE(arg=36, lineno=257)
>         54	LOAD_FAST(arg=1, lineno=258)
          56	RETURN_VALUE(arg=None, lineno=258)
DEBUG 2022-02-14 16:38:04,129 pending: deque([State(pc_initial=0 nstack_initial=0)])
DEBUG 2022-02-14 16:38:04,129 stack: []
DEBUG 2022-02-14 16:38:04,129 dispatch pc=0, inst=NOP(arg=None, lineno=254)
DEBUG 2022-02-14 16:38:04,129 stack []
DEBUG 2022-02-14 16:38:04,129 dispatch pc=2, inst=LOAD_GLOBAL(arg=0, lineno=254)
DEBUG 2022-02-14 16:38:04,129 stack []
DEBUG 2022-02-14 16:38:04,129 dispatch pc=4, inst=LOAD_ATTR(arg=1, lineno=254)
DEBUG 2022-02-14 16:38:04,129 stack ['$2load_global.0']
DEBUG 2022-02-14 16:38:04,129 dispatch pc=6, inst=LOAD_ATTR(arg=2, lineno=254)
DEBUG 2022-02-14 16:38:04,129 stack ['$4load_attr.1']
DEBUG 2022-02-14 16:38:04,129 dispatch pc=8, inst=LOAD_METHOD(arg=3, lineno=254)
DEBUG 2022-02-14 16:38:04,129 stack ['$6load_attr.2']
DEBUG 2022-02-14 16:38:04,130 dispatch pc=10, inst=CALL_METHOD(arg=0, lineno=254)
DEBUG 2022-02-14 16:38:04,130 stack ['$8load_method.3']
DEBUG 2022-02-14 16:38:04,130 dispatch pc=12, inst=POP_TOP(arg=None, lineno=254)
DEBUG 2022-02-14 16:38:04,130 stack ['$10call_method.4']
DEBUG 2022-02-14 16:38:04,130 dispatch pc=14, inst=LOAD_DEREF(arg=0, lineno=255)
DEBUG 2022-02-14 16:38:04,130 stack []
DEBUG 2022-02-14 16:38:04,130 dispatch pc=16, inst=STORE_FAST(arg=1, lineno=255)
DEBUG 2022-02-14 16:38:04,130 stack ['$14load_deref.5']
DEBUG 2022-02-14 16:38:04,130 dispatch pc=18, inst=LOAD_GLOBAL(arg=0, lineno=256)
DEBUG 2022-02-14 16:38:04,130 stack []
DEBUG 2022-02-14 16:38:04,130 dispatch pc=20, inst=LOAD_ATTR(arg=1, lineno=256)
DEBUG 2022-02-14 16:38:04,130 stack ['$18load_global.6']
DEBUG 2022-02-14 16:38:04,130 dispatch pc=22, inst=LOAD_ATTR(arg=2, lineno=256)
DEBUG 2022-02-14 16:38:04,130 stack ['$20load_attr.7']
DEBUG 2022-02-14 16:38:04,130 dispatch pc=24, inst=LOAD_METHOD(arg=4, lineno=256)
DEBUG 2022-02-14 16:38:04,130 stack ['$22load_attr.8']
DEBUG 2022-02-14 16:38:04,130 dispatch pc=26, inst=LOAD_GLOBAL(arg=5, lineno=256)
DEBUG 2022-02-14 16:38:04,130 stack ['$24load_method.9']
DEBUG 2022-02-14 16:38:04,130 dispatch pc=28, inst=LOAD_FAST(arg=0, lineno=256)
DEBUG 2022-02-14 16:38:04,130 stack ['$24load_method.9', '$26load_global.10']
DEBUG 2022-02-14 16:38:04,130 dispatch pc=30, inst=CALL_FUNCTION(arg=1, lineno=256)
DEBUG 2022-02-14 16:38:04,130 stack ['$24load_method.9', '$26load_global.10', '$in_arr28.11']
DEBUG 2022-02-14 16:38:04,130 dispatch pc=32, inst=CALL_METHOD(arg=1, lineno=256)
DEBUG 2022-02-14 16:38:04,130 stack ['$24load_method.9', '$30call_function.12']
DEBUG 2022-02-14 16:38:04,130 dispatch pc=34, inst=GET_ITER(arg=None, lineno=256)
DEBUG 2022-02-14 16:38:04,131 stack ['$32call_method.13']
DEBUG 2022-02-14 16:38:04,131 end state. edges=[Edge(pc=36, stack=('$34get_iter.14',), blockstack=(), npush=0)]
DEBUG 2022-02-14 16:38:04,131 pending: deque([State(pc_initial=36 nstack_initial=1)])
DEBUG 2022-02-14 16:38:04,131 stack: ['$phi36.0']
DEBUG 2022-02-14 16:38:04,131 dispatch pc=36, inst=FOR_ITER(arg=16, lineno=256)
DEBUG 2022-02-14 16:38:04,131 stack ['$phi36.0']
DEBUG 2022-02-14 16:38:04,131 end state. edges=[Edge(pc=54, stack=(), blockstack=(), npush=0), Edge(pc=38, stack=('$phi36.0', '$36for_iter.2'), blockstack=(), npush=0)]
DEBUG 2022-02-14 16:38:04,131 pending: deque([State(pc_initial=54 nstack_initial=0), State(pc_initial=38 nstack_initial=2)])
DEBUG 2022-02-14 16:38:04,131 stack: []
DEBUG 2022-02-14 16:38:04,131 dispatch pc=54, inst=LOAD_FAST(arg=1, lineno=258)
DEBUG 2022-02-14 16:38:04,131 stack []
DEBUG 2022-02-14 16:38:04,131 dispatch pc=56, inst=RETURN_VALUE(arg=None, lineno=258)
DEBUG 2022-02-14 16:38:04,131 stack ['$val54.0']
DEBUG 2022-02-14 16:38:04,131 end state. edges=[]
DEBUG 2022-02-14 16:38:04,131 pending: deque([State(pc_initial=38 nstack_initial=2)])
DEBUG 2022-02-14 16:38:04,131 stack: ['$phi38.0', '$phi38.1']
DEBUG 2022-02-14 16:38:04,131 dispatch pc=38, inst=STORE_FAST(arg=2, lineno=256)
DEBUG 2022-02-14 16:38:04,131 stack ['$phi38.0', '$phi38.1']
DEBUG 2022-02-14 16:38:04,131 dispatch pc=40, inst=LOAD_FAST(arg=1, lineno=257)
DEBUG 2022-02-14 16:38:04,131 stack ['$phi38.0']
DEBUG 2022-02-14 16:38:04,131 dispatch pc=42, inst=LOAD_FAST(arg=0, lineno=257)
DEBUG 2022-02-14 16:38:04,131 stack ['$phi38.0', '$val40.2']
DEBUG 2022-02-14 16:38:04,131 dispatch pc=44, inst=LOAD_FAST(arg=2, lineno=257)
DEBUG 2022-02-14 16:38:04,131 stack ['$phi38.0', '$val40.2', '$in_arr42.3']
DEBUG 2022-02-14 16:38:04,132 dispatch pc=46, inst=BINARY_SUBSCR(arg=None, lineno=257)
DEBUG 2022-02-14 16:38:04,132 stack ['$phi38.0', '$val40.2', '$in_arr42.3', '$i44.4']
DEBUG 2022-02-14 16:38:04,132 dispatch pc=48, inst=INPLACE_ADD(arg=None, lineno=257)
DEBUG 2022-02-14 16:38:04,132 stack ['$phi38.0', '$val40.2', '$46binary_subscr.5']
DEBUG 2022-02-14 16:38:04,132 dispatch pc=50, inst=STORE_FAST(arg=1, lineno=257)
DEBUG 2022-02-14 16:38:04,132 stack ['$phi38.0', '$48inplace_add.6']
DEBUG 2022-02-14 16:38:04,132 dispatch pc=52, inst=JUMP_ABSOLUTE(arg=36, lineno=257)
DEBUG 2022-02-14 16:38:04,132 stack ['$phi38.0']
DEBUG 2022-02-14 16:38:04,132 end state. edges=[Edge(pc=36, stack=('$phi38.0',), blockstack=(), npush=0)]
DEBUG 2022-02-14 16:38:04,132 pending: deque([State(pc_initial=36 nstack_initial=1)])
DEBUG 2022-02-14 16:38:04,132 -------------------------Prune PHIs-------------------------
DEBUG 2022-02-14 16:38:04,132 Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=36 nstack_initial=1): {'$phi36.0'},
             State(pc_initial=38 nstack_initial=2): {'$phi38.1'},
             State(pc_initial=54 nstack_initial=0): set()})
DEBUG 2022-02-14 16:38:04,132 defmap: {'$phi36.0': State(pc_initial=0 nstack_initial=0),
 '$phi38.1': State(pc_initial=36 nstack_initial=1)}
DEBUG 2022-02-14 16:38:04,132 phismap: defaultdict(<class 'set'>,
            {'$phi36.0': {('$34get_iter.14',
                           State(pc_initial=0 nstack_initial=0)),
                          ('$phi38.0', State(pc_initial=38 nstack_initial=2))},
             '$phi38.0': {('$phi36.0', State(pc_initial=36 nstack_initial=1))},
             '$phi38.1': {('$36for_iter.2',
                           State(pc_initial=36 nstack_initial=1))}})
DEBUG 2022-02-14 16:38:04,133 changing phismap: defaultdict(<class 'set'>,
            {'$phi36.0': {('$34get_iter.14',
                           State(pc_initial=0 nstack_initial=0)),
                          ('$phi36.0', State(pc_initial=36 nstack_initial=1))},
             '$phi38.0': {('$34get_iter.14',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi38.1': {('$36for_iter.2',
                           State(pc_initial=36 nstack_initial=1))}})
DEBUG 2022-02-14 16:38:04,133 changing phismap: defaultdict(<class 'set'>,
            {'$phi36.0': {('$34get_iter.14',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi38.0': {('$34get_iter.14',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi38.1': {('$36for_iter.2',
                           State(pc_initial=36 nstack_initial=1))}})
DEBUG 2022-02-14 16:38:04,133 changing phismap: defaultdict(<class 'set'>,
            {'$phi36.0': {('$34get_iter.14',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi38.0': {('$34get_iter.14',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi38.1': {('$36for_iter.2',
                           State(pc_initial=36 nstack_initial=1))}})
DEBUG 2022-02-14 16:38:04,133 keep phismap: {'$phi36.0': {('$34get_iter.14', State(pc_initial=0 nstack_initial=0))},
 '$phi38.1': {('$36for_iter.2', State(pc_initial=36 nstack_initial=1))}}
DEBUG 2022-02-14 16:38:04,133 new_out: defaultdict(<class 'dict'>,
            {State(pc_initial=0 nstack_initial=0): {'$phi36.0': '$34get_iter.14'},
             State(pc_initial=36 nstack_initial=1): {'$phi38.1': '$36for_iter.2'}})
DEBUG 2022-02-14 16:38:04,133 ----------------------DONE Prune PHIs-----------------------
DEBUG 2022-02-14 16:38:04,134 block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$2load_global.0'}), (4, {'item': '$2load_global.0', 'res': '$4load_attr.1'}), (6, {'item': '$4load_attr.1', 'res': '$6load_attr.2'}), (8, {'item': '$6load_attr.2', 'res': '$8load_method.3'}), (10, {'func': '$8load_method.3', 'args': [], 'res': '$10call_method.4'}), (14, {'res': '$14load_deref.5'}), (16, {'value': '$14load_deref.5'}), (18, {'res': '$18load_global.6'}), (20, {'item': '$18load_global.6', 'res': '$20load_attr.7'}), (22, {'item': '$20load_attr.7', 'res': '$22load_attr.8'}), (24, {'item': '$22load_attr.8', 'res': '$24load_method.9'}), (26, {'res': '$26load_global.10'}), (28, {'res': '$in_arr28.11'}), (30, {'func': '$26load_global.10', 'args': ['$in_arr28.11'], 'res': '$30call_function.12'}), (32, {'func': '$24load_method.9', 'args': ['$30call_function.12'], 'res': '$32call_method.13'}), (34, {'value': '$32call_method.13', 'res': '$34get_iter.14'})), outgoing_phis={'$phi36.0': '$34get_iter.14'}, blockstack=(), active_try_block=None, outgoing_edgepushed={36: ('$34get_iter.14',)})
DEBUG 2022-02-14 16:38:04,134 block_infos State(pc_initial=36 nstack_initial=1):
AdaptBlockInfo(insts=((36, {'iterator': '$phi36.0', 'pair': '$36for_iter.1', 'indval': '$36for_iter.2', 'pred': '$36for_iter.3'}),), outgoing_phis={'$phi38.1': '$36for_iter.2'}, blockstack=(), active_try_block=None, outgoing_edgepushed={54: (), 38: ('$phi36.0', '$36for_iter.2')})
DEBUG 2022-02-14 16:38:04,134 block_infos State(pc_initial=38 nstack_initial=2):
AdaptBlockInfo(insts=((38, {'value': '$phi38.1'}), (40, {'res': '$val40.2'}), (42, {'res': '$in_arr42.3'}), (44, {'res': '$i44.4'}), (46, {'index': '$i44.4', 'target': '$in_arr42.3', 'res': '$46binary_subscr.5'}), (48, {'lhs': '$val40.2', 'rhs': '$46binary_subscr.5', 'res': '$48inplace_add.6'}), (50, {'value': '$48inplace_add.6'}), (52, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={36: ('$phi38.0',)})
DEBUG 2022-02-14 16:38:04,134 block_infos State(pc_initial=54 nstack_initial=0):
AdaptBlockInfo(insts=((54, {'res': '$val54.0'}), (56, {'retval': '$val54.0', 'castval': '$56return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG 2022-02-14 16:38:04,135 label 0:
    in_arr = arg(0, name=in_arr)             ['in_arr']
    $2load_global.0 = global(numba: <module 'numba' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numba/__init__.py'>) ['$2load_global.0']
    $4load_attr.1 = getattr(value=$2load_global.0, attr=parfors) ['$2load_global.0', '$4load_attr.1']
    $6load_attr.2 = getattr(value=$4load_attr.1, attr=parfor) ['$4load_attr.1', '$6load_attr.2']
    $8load_method.3 = getattr(value=$6load_attr.2, attr=init_prange) ['$6load_attr.2', '$8load_method.3']
    $10call_method.4 = call $8load_method.3(func=$8load_method.3, args=[], kws=(), vararg=None, target=None) ['$10call_method.4', '$8load_method.3']
    val = freevar(zero: 0)                   ['val']
    $18load_global.6 = global(numba: <module 'numba' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numba/__init__.py'>) ['$18load_global.6']
    $20load_attr.7 = getattr(value=$18load_global.6, attr=parfors) ['$18load_global.6', '$20load_attr.7']
    $22load_attr.8 = getattr(value=$20load_attr.7, attr=parfor) ['$20load_attr.7', '$22load_attr.8']
    $24load_method.9 = getattr(value=$22load_attr.8, attr=internal_prange) ['$22load_attr.8', '$24load_method.9']
    $26load_global.10 = global(len: <built-in function len>) ['$26load_global.10']
    $30call_function.12 = call $26load_global.10(in_arr, func=$26load_global.10, args=[Var(in_arr, parfor.py:254)], kws=(), vararg=None, target=None) ['$26load_global.10', '$30call_function.12', 'in_arr']
    $32call_method.13 = call $24load_method.9($30call_function.12, func=$24load_method.9, args=[Var($30call_function.12, parfor.py:256)], kws=(), vararg=None, target=None) ['$24load_method.9', '$30call_function.12', '$32call_method.13']
    $34get_iter.14 = getiter(value=$32call_method.13) ['$32call_method.13', '$34get_iter.14']
    $phi36.0 = $34get_iter.14                ['$34get_iter.14', '$phi36.0']
    jump 36                                  []
label 36:
    $36for_iter.1 = iternext(value=$phi36.0) ['$36for_iter.1', '$phi36.0']
    $36for_iter.2 = pair_first(value=$36for_iter.1) ['$36for_iter.1', '$36for_iter.2']
    $36for_iter.3 = pair_second(value=$36for_iter.1) ['$36for_iter.1', '$36for_iter.3']
    $phi38.1 = $36for_iter.2                 ['$36for_iter.2', '$phi38.1']
    branch $36for_iter.3, 38, 54             ['$36for_iter.3']
label 38:
    i = $phi38.1                             ['$phi38.1', 'i']
    $46binary_subscr.5 = getitem(value=in_arr, index=i, fn=<built-in function getitem>) ['$46binary_subscr.5', 'i', 'in_arr']
    $48inplace_add.6 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=val, rhs=$46binary_subscr.5, static_lhs=Undefined, static_rhs=Undefined) ['$46binary_subscr.5', '$48inplace_add.6', 'val']
    val = $48inplace_add.6                   ['$48inplace_add.6', 'val']
    jump 36                                  []
label 54:
    $56return_value.1 = cast(value=val)      ['$56return_value.1', 'val']
    return $56return_value.1                 ['$56return_value.1']

DEBUG 2022-02-14 16:38:04,138 bytecode dump:
>          0	NOP(arg=None, lineno=116)
           2	LOAD_CONST(arg=0, lineno=116)
           4	RETURN_VALUE(arg=None, lineno=116)
DEBUG 2022-02-14 16:38:04,138 pending: deque([State(pc_initial=0 nstack_initial=0)])
DEBUG 2022-02-14 16:38:04,138 stack: []
DEBUG 2022-02-14 16:38:04,138 dispatch pc=0, inst=NOP(arg=None, lineno=116)
DEBUG 2022-02-14 16:38:04,138 stack []
DEBUG 2022-02-14 16:38:04,138 dispatch pc=2, inst=LOAD_CONST(arg=0, lineno=116)
DEBUG 2022-02-14 16:38:04,139 stack []
DEBUG 2022-02-14 16:38:04,139 dispatch pc=4, inst=RETURN_VALUE(arg=None, lineno=116)
DEBUG 2022-02-14 16:38:04,139 stack ['$const2.0']
DEBUG 2022-02-14 16:38:04,139 end state. edges=[]
DEBUG 2022-02-14 16:38:04,139 -------------------------Prune PHIs-------------------------
DEBUG 2022-02-14 16:38:04,139 Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
DEBUG 2022-02-14 16:38:04,139 defmap: {}
DEBUG 2022-02-14 16:38:04,139 phismap: defaultdict(<class 'set'>, {})
DEBUG 2022-02-14 16:38:04,139 changing phismap: defaultdict(<class 'set'>, {})
DEBUG 2022-02-14 16:38:04,139 keep phismap: {}
DEBUG 2022-02-14 16:38:04,139 new_out: defaultdict(<class 'dict'>, {})
DEBUG 2022-02-14 16:38:04,139 ----------------------DONE Prune PHIs-----------------------
DEBUG 2022-02-14 16:38:04,139 block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$const2.0'}), (4, {'retval': '$const2.0', 'castval': '$4return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG 2022-02-14 16:38:04,140 label 0:
    $const2.0 = const(NoneType, None)        ['$const2.0']
    $4return_value.1 = cast(value=$const2.0) ['$4return_value.1', '$const2.0']
    return $4return_value.1                  ['$4return_value.1']

DEBUG 2022-02-14 16:38:04,141 ==== SSA block analysis pass on 0
DEBUG 2022-02-14 16:38:04,141 Running <numba.core.ssa._GatherDefsHandler object at 0x7fa047659d60>
DEBUG 2022-02-14 16:38:04,141 on stmt: $const2.0 = const(NoneType, None)
DEBUG 2022-02-14 16:38:04,141 on stmt: $4return_value.1 = cast(value=$const2.0)
DEBUG 2022-02-14 16:38:04,141 on stmt: return $4return_value.1
DEBUG 2022-02-14 16:38:04,141 defs defaultdict(<class 'list'>,
            {'$4return_value.1': [<numba.core.ir.Assign object at 0x7fa046a7f730>],
             '$const2.0': [<numba.core.ir.Assign object at 0x7fa046a7f190>]})
DEBUG 2022-02-14 16:38:04,141 SSA violators set()
DEBUG 2022-02-14 16:38:04,159 bytecode dump:
>          0	NOP(arg=None, lineno=254)
           2	LOAD_GLOBAL(arg=0, lineno=254)
           4	LOAD_ATTR(arg=1, lineno=254)
           6	LOAD_ATTR(arg=2, lineno=254)
           8	LOAD_METHOD(arg=3, lineno=254)
          10	CALL_METHOD(arg=0, lineno=254)
          12	POP_TOP(arg=None, lineno=254)
          14	LOAD_DEREF(arg=0, lineno=255)
          16	STORE_FAST(arg=1, lineno=255)
          18	LOAD_GLOBAL(arg=0, lineno=256)
          20	LOAD_ATTR(arg=1, lineno=256)
          22	LOAD_ATTR(arg=2, lineno=256)
          24	LOAD_METHOD(arg=4, lineno=256)
          26	LOAD_GLOBAL(arg=5, lineno=256)
          28	LOAD_FAST(arg=0, lineno=256)
          30	CALL_FUNCTION(arg=1, lineno=256)
          32	CALL_METHOD(arg=1, lineno=256)
          34	GET_ITER(arg=None, lineno=256)
>         36	FOR_ITER(arg=16, lineno=256)
          38	STORE_FAST(arg=2, lineno=256)
          40	LOAD_FAST(arg=1, lineno=257)
          42	LOAD_FAST(arg=0, lineno=257)
          44	LOAD_FAST(arg=2, lineno=257)
          46	BINARY_SUBSCR(arg=None, lineno=257)
          48	INPLACE_ADD(arg=None, lineno=257)
          50	STORE_FAST(arg=1, lineno=257)
          52	JUMP_ABSOLUTE(arg=36, lineno=257)
>         54	LOAD_FAST(arg=1, lineno=258)
          56	RETURN_VALUE(arg=None, lineno=258)
DEBUG 2022-02-14 16:38:04,159 pending: deque([State(pc_initial=0 nstack_initial=0)])
DEBUG 2022-02-14 16:38:04,159 stack: []
DEBUG 2022-02-14 16:38:04,159 dispatch pc=0, inst=NOP(arg=None, lineno=254)
DEBUG 2022-02-14 16:38:04,159 stack []
DEBUG 2022-02-14 16:38:04,159 dispatch pc=2, inst=LOAD_GLOBAL(arg=0, lineno=254)
DEBUG 2022-02-14 16:38:04,159 stack []
DEBUG 2022-02-14 16:38:04,159 dispatch pc=4, inst=LOAD_ATTR(arg=1, lineno=254)
DEBUG 2022-02-14 16:38:04,159 stack ['$2load_global.0']
DEBUG 2022-02-14 16:38:04,159 dispatch pc=6, inst=LOAD_ATTR(arg=2, lineno=254)
DEBUG 2022-02-14 16:38:04,159 stack ['$4load_attr.1']
DEBUG 2022-02-14 16:38:04,159 dispatch pc=8, inst=LOAD_METHOD(arg=3, lineno=254)
DEBUG 2022-02-14 16:38:04,159 stack ['$6load_attr.2']
DEBUG 2022-02-14 16:38:04,159 dispatch pc=10, inst=CALL_METHOD(arg=0, lineno=254)
DEBUG 2022-02-14 16:38:04,159 stack ['$8load_method.3']
DEBUG 2022-02-14 16:38:04,159 dispatch pc=12, inst=POP_TOP(arg=None, lineno=254)
DEBUG 2022-02-14 16:38:04,160 stack ['$10call_method.4']
DEBUG 2022-02-14 16:38:04,160 dispatch pc=14, inst=LOAD_DEREF(arg=0, lineno=255)
DEBUG 2022-02-14 16:38:04,160 stack []
DEBUG 2022-02-14 16:38:04,160 dispatch pc=16, inst=STORE_FAST(arg=1, lineno=255)
DEBUG 2022-02-14 16:38:04,160 stack ['$14load_deref.5']
DEBUG 2022-02-14 16:38:04,160 dispatch pc=18, inst=LOAD_GLOBAL(arg=0, lineno=256)
DEBUG 2022-02-14 16:38:04,160 stack []
DEBUG 2022-02-14 16:38:04,160 dispatch pc=20, inst=LOAD_ATTR(arg=1, lineno=256)
DEBUG 2022-02-14 16:38:04,160 stack ['$18load_global.6']
DEBUG 2022-02-14 16:38:04,160 dispatch pc=22, inst=LOAD_ATTR(arg=2, lineno=256)
DEBUG 2022-02-14 16:38:04,160 stack ['$20load_attr.7']
DEBUG 2022-02-14 16:38:04,160 dispatch pc=24, inst=LOAD_METHOD(arg=4, lineno=256)
DEBUG 2022-02-14 16:38:04,160 stack ['$22load_attr.8']
DEBUG 2022-02-14 16:38:04,160 dispatch pc=26, inst=LOAD_GLOBAL(arg=5, lineno=256)
DEBUG 2022-02-14 16:38:04,160 stack ['$24load_method.9']
DEBUG 2022-02-14 16:38:04,160 dispatch pc=28, inst=LOAD_FAST(arg=0, lineno=256)
DEBUG 2022-02-14 16:38:04,160 stack ['$24load_method.9', '$26load_global.10']
DEBUG 2022-02-14 16:38:04,160 dispatch pc=30, inst=CALL_FUNCTION(arg=1, lineno=256)
DEBUG 2022-02-14 16:38:04,160 stack ['$24load_method.9', '$26load_global.10', '$in_arr28.11']
DEBUG 2022-02-14 16:38:04,161 dispatch pc=32, inst=CALL_METHOD(arg=1, lineno=256)
DEBUG 2022-02-14 16:38:04,161 stack ['$24load_method.9', '$30call_function.12']
DEBUG 2022-02-14 16:38:04,161 dispatch pc=34, inst=GET_ITER(arg=None, lineno=256)
DEBUG 2022-02-14 16:38:04,161 stack ['$32call_method.13']
DEBUG 2022-02-14 16:38:04,161 end state. edges=[Edge(pc=36, stack=('$34get_iter.14',), blockstack=(), npush=0)]
DEBUG 2022-02-14 16:38:04,161 pending: deque([State(pc_initial=36 nstack_initial=1)])
DEBUG 2022-02-14 16:38:04,161 stack: ['$phi36.0']
DEBUG 2022-02-14 16:38:04,161 dispatch pc=36, inst=FOR_ITER(arg=16, lineno=256)
DEBUG 2022-02-14 16:38:04,161 stack ['$phi36.0']
DEBUG 2022-02-14 16:38:04,161 end state. edges=[Edge(pc=54, stack=(), blockstack=(), npush=0), Edge(pc=38, stack=('$phi36.0', '$36for_iter.2'), blockstack=(), npush=0)]
DEBUG 2022-02-14 16:38:04,161 pending: deque([State(pc_initial=54 nstack_initial=0), State(pc_initial=38 nstack_initial=2)])
DEBUG 2022-02-14 16:38:04,161 stack: []
DEBUG 2022-02-14 16:38:04,161 dispatch pc=54, inst=LOAD_FAST(arg=1, lineno=258)
DEBUG 2022-02-14 16:38:04,162 stack []
DEBUG 2022-02-14 16:38:04,162 dispatch pc=56, inst=RETURN_VALUE(arg=None, lineno=258)
DEBUG 2022-02-14 16:38:04,162 stack ['$val54.0']
DEBUG 2022-02-14 16:38:04,162 end state. edges=[]
DEBUG 2022-02-14 16:38:04,162 pending: deque([State(pc_initial=38 nstack_initial=2)])
DEBUG 2022-02-14 16:38:04,162 stack: ['$phi38.0', '$phi38.1']
DEBUG 2022-02-14 16:38:04,162 dispatch pc=38, inst=STORE_FAST(arg=2, lineno=256)
DEBUG 2022-02-14 16:38:04,162 stack ['$phi38.0', '$phi38.1']
DEBUG 2022-02-14 16:38:04,162 dispatch pc=40, inst=LOAD_FAST(arg=1, lineno=257)
DEBUG 2022-02-14 16:38:04,162 stack ['$phi38.0']
DEBUG 2022-02-14 16:38:04,162 dispatch pc=42, inst=LOAD_FAST(arg=0, lineno=257)
DEBUG 2022-02-14 16:38:04,162 stack ['$phi38.0', '$val40.2']
DEBUG 2022-02-14 16:38:04,162 dispatch pc=44, inst=LOAD_FAST(arg=2, lineno=257)
DEBUG 2022-02-14 16:38:04,162 stack ['$phi38.0', '$val40.2', '$in_arr42.3']
DEBUG 2022-02-14 16:38:04,162 dispatch pc=46, inst=BINARY_SUBSCR(arg=None, lineno=257)
DEBUG 2022-02-14 16:38:04,162 stack ['$phi38.0', '$val40.2', '$in_arr42.3', '$i44.4']
DEBUG 2022-02-14 16:38:04,162 dispatch pc=48, inst=INPLACE_ADD(arg=None, lineno=257)
DEBUG 2022-02-14 16:38:04,162 stack ['$phi38.0', '$val40.2', '$46binary_subscr.5']
DEBUG 2022-02-14 16:38:04,162 dispatch pc=50, inst=STORE_FAST(arg=1, lineno=257)
DEBUG 2022-02-14 16:38:04,162 stack ['$phi38.0', '$48inplace_add.6']
DEBUG 2022-02-14 16:38:04,162 dispatch pc=52, inst=JUMP_ABSOLUTE(arg=36, lineno=257)
DEBUG 2022-02-14 16:38:04,163 stack ['$phi38.0']
DEBUG 2022-02-14 16:38:04,163 end state. edges=[Edge(pc=36, stack=('$phi38.0',), blockstack=(), npush=0)]
DEBUG 2022-02-14 16:38:04,163 pending: deque([State(pc_initial=36 nstack_initial=1)])
DEBUG 2022-02-14 16:38:04,163 -------------------------Prune PHIs-------------------------
DEBUG 2022-02-14 16:38:04,163 Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=36 nstack_initial=1): {'$phi36.0'},
             State(pc_initial=38 nstack_initial=2): {'$phi38.1'},
             State(pc_initial=54 nstack_initial=0): set()})
DEBUG 2022-02-14 16:38:04,163 defmap: {'$phi36.0': State(pc_initial=0 nstack_initial=0),
 '$phi38.1': State(pc_initial=36 nstack_initial=1)}
DEBUG 2022-02-14 16:38:04,163 phismap: defaultdict(<class 'set'>,
            {'$phi36.0': {('$34get_iter.14',
                           State(pc_initial=0 nstack_initial=0)),
                          ('$phi38.0', State(pc_initial=38 nstack_initial=2))},
             '$phi38.0': {('$phi36.0', State(pc_initial=36 nstack_initial=1))},
             '$phi38.1': {('$36for_iter.2',
                           State(pc_initial=36 nstack_initial=1))}})
DEBUG 2022-02-14 16:38:04,163 changing phismap: defaultdict(<class 'set'>,
            {'$phi36.0': {('$34get_iter.14',
                           State(pc_initial=0 nstack_initial=0)),
                          ('$phi36.0', State(pc_initial=36 nstack_initial=1))},
             '$phi38.0': {('$34get_iter.14',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi38.1': {('$36for_iter.2',
                           State(pc_initial=36 nstack_initial=1))}})
DEBUG 2022-02-14 16:38:04,163 changing phismap: defaultdict(<class 'set'>,
            {'$phi36.0': {('$34get_iter.14',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi38.0': {('$34get_iter.14',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi38.1': {('$36for_iter.2',
                           State(pc_initial=36 nstack_initial=1))}})
DEBUG 2022-02-14 16:38:04,164 changing phismap: defaultdict(<class 'set'>,
            {'$phi36.0': {('$34get_iter.14',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi38.0': {('$34get_iter.14',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi38.1': {('$36for_iter.2',
                           State(pc_initial=36 nstack_initial=1))}})
DEBUG 2022-02-14 16:38:04,164 keep phismap: {'$phi36.0': {('$34get_iter.14', State(pc_initial=0 nstack_initial=0))},
 '$phi38.1': {('$36for_iter.2', State(pc_initial=36 nstack_initial=1))}}
DEBUG 2022-02-14 16:38:04,164 new_out: defaultdict(<class 'dict'>,
            {State(pc_initial=0 nstack_initial=0): {'$phi36.0': '$34get_iter.14'},
             State(pc_initial=36 nstack_initial=1): {'$phi38.1': '$36for_iter.2'}})
DEBUG 2022-02-14 16:38:04,164 ----------------------DONE Prune PHIs-----------------------
DEBUG 2022-02-14 16:38:04,164 block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$2load_global.0'}), (4, {'item': '$2load_global.0', 'res': '$4load_attr.1'}), (6, {'item': '$4load_attr.1', 'res': '$6load_attr.2'}), (8, {'item': '$6load_attr.2', 'res': '$8load_method.3'}), (10, {'func': '$8load_method.3', 'args': [], 'res': '$10call_method.4'}), (14, {'res': '$14load_deref.5'}), (16, {'value': '$14load_deref.5'}), (18, {'res': '$18load_global.6'}), (20, {'item': '$18load_global.6', 'res': '$20load_attr.7'}), (22, {'item': '$20load_attr.7', 'res': '$22load_attr.8'}), (24, {'item': '$22load_attr.8', 'res': '$24load_method.9'}), (26, {'res': '$26load_global.10'}), (28, {'res': '$in_arr28.11'}), (30, {'func': '$26load_global.10', 'args': ['$in_arr28.11'], 'res': '$30call_function.12'}), (32, {'func': '$24load_method.9', 'args': ['$30call_function.12'], 'res': '$32call_method.13'}), (34, {'value': '$32call_method.13', 'res': '$34get_iter.14'})), outgoing_phis={'$phi36.0': '$34get_iter.14'}, blockstack=(), active_try_block=None, outgoing_edgepushed={36: ('$34get_iter.14',)})
DEBUG 2022-02-14 16:38:04,164 block_infos State(pc_initial=36 nstack_initial=1):
AdaptBlockInfo(insts=((36, {'iterator': '$phi36.0', 'pair': '$36for_iter.1', 'indval': '$36for_iter.2', 'pred': '$36for_iter.3'}),), outgoing_phis={'$phi38.1': '$36for_iter.2'}, blockstack=(), active_try_block=None, outgoing_edgepushed={54: (), 38: ('$phi36.0', '$36for_iter.2')})
DEBUG 2022-02-14 16:38:04,164 block_infos State(pc_initial=38 nstack_initial=2):
AdaptBlockInfo(insts=((38, {'value': '$phi38.1'}), (40, {'res': '$val40.2'}), (42, {'res': '$in_arr42.3'}), (44, {'res': '$i44.4'}), (46, {'index': '$i44.4', 'target': '$in_arr42.3', 'res': '$46binary_subscr.5'}), (48, {'lhs': '$val40.2', 'rhs': '$46binary_subscr.5', 'res': '$48inplace_add.6'}), (50, {'value': '$48inplace_add.6'}), (52, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={36: ('$phi38.0',)})
DEBUG 2022-02-14 16:38:04,165 block_infos State(pc_initial=54 nstack_initial=0):
AdaptBlockInfo(insts=((54, {'res': '$val54.0'}), (56, {'retval': '$val54.0', 'castval': '$56return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG 2022-02-14 16:38:04,165 label 0:
    in_arr = arg(0, name=in_arr)             ['in_arr']
    $2load_global.0 = global(numba: <module 'numba' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numba/__init__.py'>) ['$2load_global.0']
    $4load_attr.1 = getattr(value=$2load_global.0, attr=parfors) ['$2load_global.0', '$4load_attr.1']
    $6load_attr.2 = getattr(value=$4load_attr.1, attr=parfor) ['$4load_attr.1', '$6load_attr.2']
    $8load_method.3 = getattr(value=$6load_attr.2, attr=init_prange) ['$6load_attr.2', '$8load_method.3']
    $10call_method.4 = call $8load_method.3(func=$8load_method.3, args=[], kws=(), vararg=None, target=None) ['$10call_method.4', '$8load_method.3']
    val = freevar(zero: 0)                   ['val']
    $18load_global.6 = global(numba: <module 'numba' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numba/__init__.py'>) ['$18load_global.6']
    $20load_attr.7 = getattr(value=$18load_global.6, attr=parfors) ['$18load_global.6', '$20load_attr.7']
    $22load_attr.8 = getattr(value=$20load_attr.7, attr=parfor) ['$20load_attr.7', '$22load_attr.8']
    $24load_method.9 = getattr(value=$22load_attr.8, attr=internal_prange) ['$22load_attr.8', '$24load_method.9']
    $26load_global.10 = global(len: <built-in function len>) ['$26load_global.10']
    $30call_function.12 = call $26load_global.10(in_arr, func=$26load_global.10, args=[Var(in_arr, parfor.py:254)], kws=(), vararg=None, target=None) ['$26load_global.10', '$30call_function.12', 'in_arr']
    $32call_method.13 = call $24load_method.9($30call_function.12, func=$24load_method.9, args=[Var($30call_function.12, parfor.py:256)], kws=(), vararg=None, target=None) ['$24load_method.9', '$30call_function.12', '$32call_method.13']
    $34get_iter.14 = getiter(value=$32call_method.13) ['$32call_method.13', '$34get_iter.14']
    $phi36.0 = $34get_iter.14                ['$34get_iter.14', '$phi36.0']
    jump 36                                  []
label 36:
    $36for_iter.1 = iternext(value=$phi36.0) ['$36for_iter.1', '$phi36.0']
    $36for_iter.2 = pair_first(value=$36for_iter.1) ['$36for_iter.1', '$36for_iter.2']
    $36for_iter.3 = pair_second(value=$36for_iter.1) ['$36for_iter.1', '$36for_iter.3']
    $phi38.1 = $36for_iter.2                 ['$36for_iter.2', '$phi38.1']
    branch $36for_iter.3, 38, 54             ['$36for_iter.3']
label 38:
    i = $phi38.1                             ['$phi38.1', 'i']
    $46binary_subscr.5 = getitem(value=in_arr, index=i, fn=<built-in function getitem>) ['$46binary_subscr.5', 'i', 'in_arr']
    $48inplace_add.6 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=val, rhs=$46binary_subscr.5, static_lhs=Undefined, static_rhs=Undefined) ['$46binary_subscr.5', '$48inplace_add.6', 'val']
    val = $48inplace_add.6                   ['$48inplace_add.6', 'val']
    jump 36                                  []
label 54:
    $56return_value.1 = cast(value=val)      ['$56return_value.1', 'val']
    return $56return_value.1                 ['$56return_value.1']

DEBUG 2022-02-14 16:38:04,171 bytecode dump:
>          0	NOP(arg=None, lineno=276)
           2	LOAD_GLOBAL(arg=0, lineno=276)
           4	LOAD_ATTR(arg=1, lineno=276)
           6	LOAD_ATTR(arg=2, lineno=276)
           8	LOAD_METHOD(arg=3, lineno=276)
          10	CALL_METHOD(arg=0, lineno=276)
          12	POP_TOP(arg=None, lineno=276)
          14	LOAD_DEREF(arg=0, lineno=277)
          16	STORE_FAST(arg=1, lineno=277)
          18	LOAD_GLOBAL(arg=0, lineno=278)
          20	LOAD_ATTR(arg=1, lineno=278)
          22	LOAD_ATTR(arg=2, lineno=278)
          24	LOAD_METHOD(arg=4, lineno=278)
          26	LOAD_GLOBAL(arg=5, lineno=278)
          28	LOAD_FAST(arg=0, lineno=278)
          30	CALL_FUNCTION(arg=1, lineno=278)
          32	CALL_METHOD(arg=1, lineno=278)
          34	GET_ITER(arg=None, lineno=278)
>         36	FOR_ITER(arg=16, lineno=278)
          38	STORE_FAST(arg=2, lineno=278)
          40	LOAD_FAST(arg=1, lineno=279)
          42	LOAD_FAST(arg=0, lineno=279)
          44	LOAD_FAST(arg=2, lineno=279)
          46	BINARY_SUBSCR(arg=None, lineno=279)
          48	INPLACE_MULTIPLY(arg=None, lineno=279)
          50	STORE_FAST(arg=1, lineno=279)
          52	JUMP_ABSOLUTE(arg=36, lineno=279)
>         54	LOAD_FAST(arg=1, lineno=280)
          56	RETURN_VALUE(arg=None, lineno=280)
DEBUG 2022-02-14 16:38:04,171 pending: deque([State(pc_initial=0 nstack_initial=0)])
DEBUG 2022-02-14 16:38:04,171 stack: []
DEBUG 2022-02-14 16:38:04,171 dispatch pc=0, inst=NOP(arg=None, lineno=276)
DEBUG 2022-02-14 16:38:04,171 stack []
DEBUG 2022-02-14 16:38:04,171 dispatch pc=2, inst=LOAD_GLOBAL(arg=0, lineno=276)
DEBUG 2022-02-14 16:38:04,171 stack []
DEBUG 2022-02-14 16:38:04,171 dispatch pc=4, inst=LOAD_ATTR(arg=1, lineno=276)
DEBUG 2022-02-14 16:38:04,171 stack ['$2load_global.0']
DEBUG 2022-02-14 16:38:04,171 dispatch pc=6, inst=LOAD_ATTR(arg=2, lineno=276)
DEBUG 2022-02-14 16:38:04,171 stack ['$4load_attr.1']
DEBUG 2022-02-14 16:38:04,171 dispatch pc=8, inst=LOAD_METHOD(arg=3, lineno=276)
DEBUG 2022-02-14 16:38:04,171 stack ['$6load_attr.2']
DEBUG 2022-02-14 16:38:04,171 dispatch pc=10, inst=CALL_METHOD(arg=0, lineno=276)
DEBUG 2022-02-14 16:38:04,171 stack ['$8load_method.3']
DEBUG 2022-02-14 16:38:04,172 dispatch pc=12, inst=POP_TOP(arg=None, lineno=276)
DEBUG 2022-02-14 16:38:04,172 stack ['$10call_method.4']
DEBUG 2022-02-14 16:38:04,172 dispatch pc=14, inst=LOAD_DEREF(arg=0, lineno=277)
DEBUG 2022-02-14 16:38:04,172 stack []
DEBUG 2022-02-14 16:38:04,172 dispatch pc=16, inst=STORE_FAST(arg=1, lineno=277)
DEBUG 2022-02-14 16:38:04,172 stack ['$14load_deref.5']
DEBUG 2022-02-14 16:38:04,172 dispatch pc=18, inst=LOAD_GLOBAL(arg=0, lineno=278)
DEBUG 2022-02-14 16:38:04,172 stack []
DEBUG 2022-02-14 16:38:04,172 dispatch pc=20, inst=LOAD_ATTR(arg=1, lineno=278)
DEBUG 2022-02-14 16:38:04,172 stack ['$18load_global.6']
DEBUG 2022-02-14 16:38:04,172 dispatch pc=22, inst=LOAD_ATTR(arg=2, lineno=278)
DEBUG 2022-02-14 16:38:04,172 stack ['$20load_attr.7']
DEBUG 2022-02-14 16:38:04,172 dispatch pc=24, inst=LOAD_METHOD(arg=4, lineno=278)
DEBUG 2022-02-14 16:38:04,172 stack ['$22load_attr.8']
DEBUG 2022-02-14 16:38:04,172 dispatch pc=26, inst=LOAD_GLOBAL(arg=5, lineno=278)
DEBUG 2022-02-14 16:38:04,172 stack ['$24load_method.9']
DEBUG 2022-02-14 16:38:04,172 dispatch pc=28, inst=LOAD_FAST(arg=0, lineno=278)
DEBUG 2022-02-14 16:38:04,172 stack ['$24load_method.9', '$26load_global.10']
DEBUG 2022-02-14 16:38:04,172 dispatch pc=30, inst=CALL_FUNCTION(arg=1, lineno=278)
DEBUG 2022-02-14 16:38:04,172 stack ['$24load_method.9', '$26load_global.10', '$in_arr28.11']
DEBUG 2022-02-14 16:38:04,172 dispatch pc=32, inst=CALL_METHOD(arg=1, lineno=278)
DEBUG 2022-02-14 16:38:04,172 stack ['$24load_method.9', '$30call_function.12']
DEBUG 2022-02-14 16:38:04,172 dispatch pc=34, inst=GET_ITER(arg=None, lineno=278)
DEBUG 2022-02-14 16:38:04,172 stack ['$32call_method.13']
DEBUG 2022-02-14 16:38:04,172 end state. edges=[Edge(pc=36, stack=('$34get_iter.14',), blockstack=(), npush=0)]
DEBUG 2022-02-14 16:38:04,173 pending: deque([State(pc_initial=36 nstack_initial=1)])
DEBUG 2022-02-14 16:38:04,173 stack: ['$phi36.0']
DEBUG 2022-02-14 16:38:04,173 dispatch pc=36, inst=FOR_ITER(arg=16, lineno=278)
DEBUG 2022-02-14 16:38:04,173 stack ['$phi36.0']
DEBUG 2022-02-14 16:38:04,173 end state. edges=[Edge(pc=54, stack=(), blockstack=(), npush=0), Edge(pc=38, stack=('$phi36.0', '$36for_iter.2'), blockstack=(), npush=0)]
DEBUG 2022-02-14 16:38:04,173 pending: deque([State(pc_initial=54 nstack_initial=0), State(pc_initial=38 nstack_initial=2)])
DEBUG 2022-02-14 16:38:04,173 stack: []
DEBUG 2022-02-14 16:38:04,173 dispatch pc=54, inst=LOAD_FAST(arg=1, lineno=280)
DEBUG 2022-02-14 16:38:04,173 stack []
DEBUG 2022-02-14 16:38:04,173 dispatch pc=56, inst=RETURN_VALUE(arg=None, lineno=280)
DEBUG 2022-02-14 16:38:04,173 stack ['$val54.0']
DEBUG 2022-02-14 16:38:04,173 end state. edges=[]
DEBUG 2022-02-14 16:38:04,173 pending: deque([State(pc_initial=38 nstack_initial=2)])
DEBUG 2022-02-14 16:38:04,173 stack: ['$phi38.0', '$phi38.1']
DEBUG 2022-02-14 16:38:04,173 dispatch pc=38, inst=STORE_FAST(arg=2, lineno=278)
DEBUG 2022-02-14 16:38:04,173 stack ['$phi38.0', '$phi38.1']
DEBUG 2022-02-14 16:38:04,173 dispatch pc=40, inst=LOAD_FAST(arg=1, lineno=279)
DEBUG 2022-02-14 16:38:04,173 stack ['$phi38.0']
DEBUG 2022-02-14 16:38:04,173 dispatch pc=42, inst=LOAD_FAST(arg=0, lineno=279)
DEBUG 2022-02-14 16:38:04,173 stack ['$phi38.0', '$val40.2']
DEBUG 2022-02-14 16:38:04,173 dispatch pc=44, inst=LOAD_FAST(arg=2, lineno=279)
DEBUG 2022-02-14 16:38:04,173 stack ['$phi38.0', '$val40.2', '$in_arr42.3']
DEBUG 2022-02-14 16:38:04,173 dispatch pc=46, inst=BINARY_SUBSCR(arg=None, lineno=279)
DEBUG 2022-02-14 16:38:04,174 stack ['$phi38.0', '$val40.2', '$in_arr42.3', '$i44.4']
DEBUG 2022-02-14 16:38:04,174 dispatch pc=48, inst=INPLACE_MULTIPLY(arg=None, lineno=279)
DEBUG 2022-02-14 16:38:04,174 stack ['$phi38.0', '$val40.2', '$46binary_subscr.5']
DEBUG 2022-02-14 16:38:04,174 dispatch pc=50, inst=STORE_FAST(arg=1, lineno=279)
DEBUG 2022-02-14 16:38:04,174 stack ['$phi38.0', '$48inplace_multiply.6']
DEBUG 2022-02-14 16:38:04,174 dispatch pc=52, inst=JUMP_ABSOLUTE(arg=36, lineno=279)
DEBUG 2022-02-14 16:38:04,174 stack ['$phi38.0']
DEBUG 2022-02-14 16:38:04,174 end state. edges=[Edge(pc=36, stack=('$phi38.0',), blockstack=(), npush=0)]
DEBUG 2022-02-14 16:38:04,174 pending: deque([State(pc_initial=36 nstack_initial=1)])
DEBUG 2022-02-14 16:38:04,174 -------------------------Prune PHIs-------------------------
DEBUG 2022-02-14 16:38:04,174 Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=36 nstack_initial=1): {'$phi36.0'},
             State(pc_initial=38 nstack_initial=2): {'$phi38.1'},
             State(pc_initial=54 nstack_initial=0): set()})
DEBUG 2022-02-14 16:38:04,174 defmap: {'$phi36.0': State(pc_initial=0 nstack_initial=0),
 '$phi38.1': State(pc_initial=36 nstack_initial=1)}
DEBUG 2022-02-14 16:38:04,174 phismap: defaultdict(<class 'set'>,
            {'$phi36.0': {('$34get_iter.14',
                           State(pc_initial=0 nstack_initial=0)),
                          ('$phi38.0', State(pc_initial=38 nstack_initial=2))},
             '$phi38.0': {('$phi36.0', State(pc_initial=36 nstack_initial=1))},
             '$phi38.1': {('$36for_iter.2',
                           State(pc_initial=36 nstack_initial=1))}})
DEBUG 2022-02-14 16:38:04,175 changing phismap: defaultdict(<class 'set'>,
            {'$phi36.0': {('$34get_iter.14',
                           State(pc_initial=0 nstack_initial=0)),
                          ('$phi36.0', State(pc_initial=36 nstack_initial=1))},
             '$phi38.0': {('$34get_iter.14',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi38.1': {('$36for_iter.2',
                           State(pc_initial=36 nstack_initial=1))}})
DEBUG 2022-02-14 16:38:04,175 changing phismap: defaultdict(<class 'set'>,
            {'$phi36.0': {('$34get_iter.14',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi38.0': {('$34get_iter.14',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi38.1': {('$36for_iter.2',
                           State(pc_initial=36 nstack_initial=1))}})
DEBUG 2022-02-14 16:38:04,175 changing phismap: defaultdict(<class 'set'>,
            {'$phi36.0': {('$34get_iter.14',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi38.0': {('$34get_iter.14',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi38.1': {('$36for_iter.2',
                           State(pc_initial=36 nstack_initial=1))}})
DEBUG 2022-02-14 16:38:04,175 keep phismap: {'$phi36.0': {('$34get_iter.14', State(pc_initial=0 nstack_initial=0))},
 '$phi38.1': {('$36for_iter.2', State(pc_initial=36 nstack_initial=1))}}
DEBUG 2022-02-14 16:38:04,175 new_out: defaultdict(<class 'dict'>,
            {State(pc_initial=0 nstack_initial=0): {'$phi36.0': '$34get_iter.14'},
             State(pc_initial=36 nstack_initial=1): {'$phi38.1': '$36for_iter.2'}})
DEBUG 2022-02-14 16:38:04,175 ----------------------DONE Prune PHIs-----------------------
DEBUG 2022-02-14 16:38:04,175 block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$2load_global.0'}), (4, {'item': '$2load_global.0', 'res': '$4load_attr.1'}), (6, {'item': '$4load_attr.1', 'res': '$6load_attr.2'}), (8, {'item': '$6load_attr.2', 'res': '$8load_method.3'}), (10, {'func': '$8load_method.3', 'args': [], 'res': '$10call_method.4'}), (14, {'res': '$14load_deref.5'}), (16, {'value': '$14load_deref.5'}), (18, {'res': '$18load_global.6'}), (20, {'item': '$18load_global.6', 'res': '$20load_attr.7'}), (22, {'item': '$20load_attr.7', 'res': '$22load_attr.8'}), (24, {'item': '$22load_attr.8', 'res': '$24load_method.9'}), (26, {'res': '$26load_global.10'}), (28, {'res': '$in_arr28.11'}), (30, {'func': '$26load_global.10', 'args': ['$in_arr28.11'], 'res': '$30call_function.12'}), (32, {'func': '$24load_method.9', 'args': ['$30call_function.12'], 'res': '$32call_method.13'}), (34, {'value': '$32call_method.13', 'res': '$34get_iter.14'})), outgoing_phis={'$phi36.0': '$34get_iter.14'}, blockstack=(), active_try_block=None, outgoing_edgepushed={36: ('$34get_iter.14',)})
DEBUG 2022-02-14 16:38:04,176 block_infos State(pc_initial=36 nstack_initial=1):
AdaptBlockInfo(insts=((36, {'iterator': '$phi36.0', 'pair': '$36for_iter.1', 'indval': '$36for_iter.2', 'pred': '$36for_iter.3'}),), outgoing_phis={'$phi38.1': '$36for_iter.2'}, blockstack=(), active_try_block=None, outgoing_edgepushed={54: (), 38: ('$phi36.0', '$36for_iter.2')})
DEBUG 2022-02-14 16:38:04,176 block_infos State(pc_initial=38 nstack_initial=2):
AdaptBlockInfo(insts=((38, {'value': '$phi38.1'}), (40, {'res': '$val40.2'}), (42, {'res': '$in_arr42.3'}), (44, {'res': '$i44.4'}), (46, {'index': '$i44.4', 'target': '$in_arr42.3', 'res': '$46binary_subscr.5'}), (48, {'lhs': '$val40.2', 'rhs': '$46binary_subscr.5', 'res': '$48inplace_multiply.6'}), (50, {'value': '$48inplace_multiply.6'}), (52, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={36: ('$phi38.0',)})
DEBUG 2022-02-14 16:38:04,176 block_infos State(pc_initial=54 nstack_initial=0):
AdaptBlockInfo(insts=((54, {'res': '$val54.0'}), (56, {'retval': '$val54.0', 'castval': '$56return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG 2022-02-14 16:38:04,177 label 0:
    in_arr = arg(0, name=in_arr)             ['in_arr']
    $2load_global.0 = global(numba: <module 'numba' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numba/__init__.py'>) ['$2load_global.0']
    $4load_attr.1 = getattr(value=$2load_global.0, attr=parfors) ['$2load_global.0', '$4load_attr.1']
    $6load_attr.2 = getattr(value=$4load_attr.1, attr=parfor) ['$4load_attr.1', '$6load_attr.2']
    $8load_method.3 = getattr(value=$6load_attr.2, attr=init_prange) ['$6load_attr.2', '$8load_method.3']
    $10call_method.4 = call $8load_method.3(func=$8load_method.3, args=[], kws=(), vararg=None, target=None) ['$10call_method.4', '$8load_method.3']
    val = freevar(one: 1)                    ['val']
    $18load_global.6 = global(numba: <module 'numba' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numba/__init__.py'>) ['$18load_global.6']
    $20load_attr.7 = getattr(value=$18load_global.6, attr=parfors) ['$18load_global.6', '$20load_attr.7']
    $22load_attr.8 = getattr(value=$20load_attr.7, attr=parfor) ['$20load_attr.7', '$22load_attr.8']
    $24load_method.9 = getattr(value=$22load_attr.8, attr=internal_prange) ['$22load_attr.8', '$24load_method.9']
    $26load_global.10 = global(len: <built-in function len>) ['$26load_global.10']
    $30call_function.12 = call $26load_global.10(in_arr, func=$26load_global.10, args=[Var(in_arr, parfor.py:276)], kws=(), vararg=None, target=None) ['$26load_global.10', '$30call_function.12', 'in_arr']
    $32call_method.13 = call $24load_method.9($30call_function.12, func=$24load_method.9, args=[Var($30call_function.12, parfor.py:278)], kws=(), vararg=None, target=None) ['$24load_method.9', '$30call_function.12', '$32call_method.13']
    $34get_iter.14 = getiter(value=$32call_method.13) ['$32call_method.13', '$34get_iter.14']
    $phi36.0 = $34get_iter.14                ['$34get_iter.14', '$phi36.0']
    jump 36                                  []
label 36:
    $36for_iter.1 = iternext(value=$phi36.0) ['$36for_iter.1', '$phi36.0']
    $36for_iter.2 = pair_first(value=$36for_iter.1) ['$36for_iter.1', '$36for_iter.2']
    $36for_iter.3 = pair_second(value=$36for_iter.1) ['$36for_iter.1', '$36for_iter.3']
    $phi38.1 = $36for_iter.2                 ['$36for_iter.2', '$phi38.1']
    branch $36for_iter.3, 38, 54             ['$36for_iter.3']
label 38:
    i = $phi38.1                             ['$phi38.1', 'i']
    $46binary_subscr.5 = getitem(value=in_arr, index=i, fn=<built-in function getitem>) ['$46binary_subscr.5', 'i', 'in_arr']
    $48inplace_multiply.6 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=val, rhs=$46binary_subscr.5, static_lhs=Undefined, static_rhs=Undefined) ['$46binary_subscr.5', '$48inplace_multiply.6', 'val']
    val = $48inplace_multiply.6              ['$48inplace_multiply.6', 'val']
    jump 36                                  []
label 54:
    $56return_value.1 = cast(value=val)      ['$56return_value.1', 'val']
    return $56return_value.1                 ['$56return_value.1']

DEBUG 2022-02-14 16:38:04,183 bytecode dump:
>          0	NOP(arg=None, lineno=154)
           2	LOAD_GLOBAL(arg=0, lineno=154)
           4	LOAD_ATTR(arg=1, lineno=154)
           6	LOAD_ATTR(arg=2, lineno=154)
           8	LOAD_METHOD(arg=3, lineno=154)
          10	CALL_METHOD(arg=0, lineno=154)
          12	POP_TOP(arg=None, lineno=154)
          14	LOAD_GLOBAL(arg=4, lineno=155)
          16	LOAD_GLOBAL(arg=5, lineno=155)
          18	LOAD_FAST(arg=0, lineno=155)
          20	CALL_FUNCTION(arg=1, lineno=155)
          22	CALL_FUNCTION(arg=1, lineno=155)
          24	POP_TOP(arg=None, lineno=155)
          26	LOAD_GLOBAL(arg=0, lineno=156)
          28	LOAD_ATTR(arg=6, lineno=156)
          30	LOAD_ATTR(arg=7, lineno=156)
          32	LOAD_METHOD(arg=8, lineno=156)
          34	LOAD_FAST(arg=0, lineno=156)
          36	LOAD_ATTR(arg=9, lineno=156)
          38	CALL_METHOD(arg=1, lineno=156)
          40	STORE_FAST(arg=1, lineno=156)
          42	LOAD_GLOBAL(arg=0, lineno=157)
          44	LOAD_ATTR(arg=1, lineno=157)
          46	LOAD_ATTR(arg=2, lineno=157)
          48	LOAD_METHOD(arg=10, lineno=157)
          50	LOAD_GLOBAL(arg=5, lineno=157)
          52	LOAD_FAST(arg=0, lineno=157)
          54	CALL_FUNCTION(arg=1, lineno=157)
          56	CALL_METHOD(arg=1, lineno=157)
          58	GET_ITER(arg=None, lineno=157)
>         60	FOR_ITER(arg=18, lineno=157)
          62	STORE_FAST(arg=2, lineno=157)
          64	LOAD_GLOBAL(arg=11, lineno=158)
          66	LOAD_FAST(arg=1, lineno=158)
          68	LOAD_FAST(arg=0, lineno=158)
          70	LOAD_FAST(arg=2, lineno=158)
          72	BINARY_SUBSCR(arg=None, lineno=158)
          74	CALL_FUNCTION(arg=2, lineno=158)
          76	STORE_FAST(arg=1, lineno=158)
          78	JUMP_ABSOLUTE(arg=60, lineno=158)
>         80	LOAD_FAST(arg=1, lineno=159)
          82	RETURN_VALUE(arg=None, lineno=159)
DEBUG 2022-02-14 16:38:04,183 pending: deque([State(pc_initial=0 nstack_initial=0)])
DEBUG 2022-02-14 16:38:04,183 stack: []
DEBUG 2022-02-14 16:38:04,183 dispatch pc=0, inst=NOP(arg=None, lineno=154)
DEBUG 2022-02-14 16:38:04,183 stack []
DEBUG 2022-02-14 16:38:04,183 dispatch pc=2, inst=LOAD_GLOBAL(arg=0, lineno=154)
DEBUG 2022-02-14 16:38:04,183 stack []
DEBUG 2022-02-14 16:38:04,183 dispatch pc=4, inst=LOAD_ATTR(arg=1, lineno=154)
DEBUG 2022-02-14 16:38:04,183 stack ['$2load_global.0']
DEBUG 2022-02-14 16:38:04,183 dispatch pc=6, inst=LOAD_ATTR(arg=2, lineno=154)
DEBUG 2022-02-14 16:38:04,183 stack ['$4load_attr.1']
DEBUG 2022-02-14 16:38:04,183 dispatch pc=8, inst=LOAD_METHOD(arg=3, lineno=154)
DEBUG 2022-02-14 16:38:04,183 stack ['$6load_attr.2']
DEBUG 2022-02-14 16:38:04,183 dispatch pc=10, inst=CALL_METHOD(arg=0, lineno=154)
DEBUG 2022-02-14 16:38:04,183 stack ['$8load_method.3']
DEBUG 2022-02-14 16:38:04,183 dispatch pc=12, inst=POP_TOP(arg=None, lineno=154)
DEBUG 2022-02-14 16:38:04,183 stack ['$10call_method.4']
DEBUG 2022-02-14 16:38:04,183 dispatch pc=14, inst=LOAD_GLOBAL(arg=4, lineno=155)
DEBUG 2022-02-14 16:38:04,183 stack []
DEBUG 2022-02-14 16:38:04,183 dispatch pc=16, inst=LOAD_GLOBAL(arg=5, lineno=155)
DEBUG 2022-02-14 16:38:04,183 stack ['$14load_global.5']
DEBUG 2022-02-14 16:38:04,184 dispatch pc=18, inst=LOAD_FAST(arg=0, lineno=155)
DEBUG 2022-02-14 16:38:04,184 stack ['$14load_global.5', '$16load_global.6']
DEBUG 2022-02-14 16:38:04,184 dispatch pc=20, inst=CALL_FUNCTION(arg=1, lineno=155)
DEBUG 2022-02-14 16:38:04,184 stack ['$14load_global.5', '$16load_global.6', '$in_arr18.7']
DEBUG 2022-02-14 16:38:04,184 dispatch pc=22, inst=CALL_FUNCTION(arg=1, lineno=155)
DEBUG 2022-02-14 16:38:04,184 stack ['$14load_global.5', '$20call_function.8']
DEBUG 2022-02-14 16:38:04,184 dispatch pc=24, inst=POP_TOP(arg=None, lineno=155)
DEBUG 2022-02-14 16:38:04,184 stack ['$22call_function.9']
DEBUG 2022-02-14 16:38:04,184 dispatch pc=26, inst=LOAD_GLOBAL(arg=0, lineno=156)
DEBUG 2022-02-14 16:38:04,184 stack []
DEBUG 2022-02-14 16:38:04,184 dispatch pc=28, inst=LOAD_ATTR(arg=6, lineno=156)
DEBUG 2022-02-14 16:38:04,184 stack ['$26load_global.10']
DEBUG 2022-02-14 16:38:04,184 dispatch pc=30, inst=LOAD_ATTR(arg=7, lineno=156)
DEBUG 2022-02-14 16:38:04,184 stack ['$28load_attr.11']
DEBUG 2022-02-14 16:38:04,184 dispatch pc=32, inst=LOAD_METHOD(arg=8, lineno=156)
DEBUG 2022-02-14 16:38:04,184 stack ['$30load_attr.12']
DEBUG 2022-02-14 16:38:04,184 dispatch pc=34, inst=LOAD_FAST(arg=0, lineno=156)
DEBUG 2022-02-14 16:38:04,184 stack ['$32load_method.13']
DEBUG 2022-02-14 16:38:04,184 dispatch pc=36, inst=LOAD_ATTR(arg=9, lineno=156)
DEBUG 2022-02-14 16:38:04,184 stack ['$32load_method.13', '$in_arr34.14']
DEBUG 2022-02-14 16:38:04,184 dispatch pc=38, inst=CALL_METHOD(arg=1, lineno=156)
DEBUG 2022-02-14 16:38:04,184 stack ['$32load_method.13', '$36load_attr.15']
DEBUG 2022-02-14 16:38:04,184 dispatch pc=40, inst=STORE_FAST(arg=1, lineno=156)
DEBUG 2022-02-14 16:38:04,184 stack ['$38call_method.16']
DEBUG 2022-02-14 16:38:04,184 dispatch pc=42, inst=LOAD_GLOBAL(arg=0, lineno=157)
DEBUG 2022-02-14 16:38:04,185 stack []
DEBUG 2022-02-14 16:38:04,185 dispatch pc=44, inst=LOAD_ATTR(arg=1, lineno=157)
DEBUG 2022-02-14 16:38:04,185 stack ['$42load_global.17']
DEBUG 2022-02-14 16:38:04,185 dispatch pc=46, inst=LOAD_ATTR(arg=2, lineno=157)
DEBUG 2022-02-14 16:38:04,185 stack ['$44load_attr.18']
DEBUG 2022-02-14 16:38:04,185 dispatch pc=48, inst=LOAD_METHOD(arg=10, lineno=157)
DEBUG 2022-02-14 16:38:04,185 stack ['$46load_attr.19']
DEBUG 2022-02-14 16:38:04,185 dispatch pc=50, inst=LOAD_GLOBAL(arg=5, lineno=157)
DEBUG 2022-02-14 16:38:04,185 stack ['$48load_method.20']
DEBUG 2022-02-14 16:38:04,185 dispatch pc=52, inst=LOAD_FAST(arg=0, lineno=157)
DEBUG 2022-02-14 16:38:04,185 stack ['$48load_method.20', '$50load_global.21']
DEBUG 2022-02-14 16:38:04,185 dispatch pc=54, inst=CALL_FUNCTION(arg=1, lineno=157)
DEBUG 2022-02-14 16:38:04,185 stack ['$48load_method.20', '$50load_global.21', '$in_arr52.22']
DEBUG 2022-02-14 16:38:04,185 dispatch pc=56, inst=CALL_METHOD(arg=1, lineno=157)
DEBUG 2022-02-14 16:38:04,185 stack ['$48load_method.20', '$54call_function.23']
DEBUG 2022-02-14 16:38:04,185 dispatch pc=58, inst=GET_ITER(arg=None, lineno=157)
DEBUG 2022-02-14 16:38:04,185 stack ['$56call_method.24']
DEBUG 2022-02-14 16:38:04,185 end state. edges=[Edge(pc=60, stack=('$58get_iter.25',), blockstack=(), npush=0)]
DEBUG 2022-02-14 16:38:04,185 pending: deque([State(pc_initial=60 nstack_initial=1)])
DEBUG 2022-02-14 16:38:04,185 stack: ['$phi60.0']
DEBUG 2022-02-14 16:38:04,185 dispatch pc=60, inst=FOR_ITER(arg=18, lineno=157)
DEBUG 2022-02-14 16:38:04,185 stack ['$phi60.0']
DEBUG 2022-02-14 16:38:04,185 end state. edges=[Edge(pc=80, stack=(), blockstack=(), npush=0), Edge(pc=62, stack=('$phi60.0', '$60for_iter.2'), blockstack=(), npush=0)]
DEBUG 2022-02-14 16:38:04,185 pending: deque([State(pc_initial=80 nstack_initial=0), State(pc_initial=62 nstack_initial=2)])
DEBUG 2022-02-14 16:38:04,185 stack: []
DEBUG 2022-02-14 16:38:04,186 dispatch pc=80, inst=LOAD_FAST(arg=1, lineno=159)
DEBUG 2022-02-14 16:38:04,186 stack []
DEBUG 2022-02-14 16:38:04,186 dispatch pc=82, inst=RETURN_VALUE(arg=None, lineno=159)
DEBUG 2022-02-14 16:38:04,186 stack ['$val80.0']
DEBUG 2022-02-14 16:38:04,186 end state. edges=[]
DEBUG 2022-02-14 16:38:04,186 pending: deque([State(pc_initial=62 nstack_initial=2)])
DEBUG 2022-02-14 16:38:04,186 stack: ['$phi62.0', '$phi62.1']
DEBUG 2022-02-14 16:38:04,186 dispatch pc=62, inst=STORE_FAST(arg=2, lineno=157)
DEBUG 2022-02-14 16:38:04,186 stack ['$phi62.0', '$phi62.1']
DEBUG 2022-02-14 16:38:04,186 dispatch pc=64, inst=LOAD_GLOBAL(arg=11, lineno=158)
DEBUG 2022-02-14 16:38:04,186 stack ['$phi62.0']
DEBUG 2022-02-14 16:38:04,186 dispatch pc=66, inst=LOAD_FAST(arg=1, lineno=158)
DEBUG 2022-02-14 16:38:04,186 stack ['$phi62.0', '$64load_global.2']
DEBUG 2022-02-14 16:38:04,186 dispatch pc=68, inst=LOAD_FAST(arg=0, lineno=158)
DEBUG 2022-02-14 16:38:04,186 stack ['$phi62.0', '$64load_global.2', '$val66.3']
DEBUG 2022-02-14 16:38:04,186 dispatch pc=70, inst=LOAD_FAST(arg=2, lineno=158)
DEBUG 2022-02-14 16:38:04,186 stack ['$phi62.0', '$64load_global.2', '$val66.3', '$in_arr68.4']
DEBUG 2022-02-14 16:38:04,186 dispatch pc=72, inst=BINARY_SUBSCR(arg=None, lineno=158)
DEBUG 2022-02-14 16:38:04,186 stack ['$phi62.0', '$64load_global.2', '$val66.3', '$in_arr68.4', '$i70.5']
DEBUG 2022-02-14 16:38:04,186 dispatch pc=74, inst=CALL_FUNCTION(arg=2, lineno=158)
DEBUG 2022-02-14 16:38:04,186 stack ['$phi62.0', '$64load_global.2', '$val66.3', '$72binary_subscr.6']
DEBUG 2022-02-14 16:38:04,186 dispatch pc=76, inst=STORE_FAST(arg=1, lineno=158)
DEBUG 2022-02-14 16:38:04,186 stack ['$phi62.0', '$74call_function.7']
DEBUG 2022-02-14 16:38:04,186 dispatch pc=78, inst=JUMP_ABSOLUTE(arg=60, lineno=158)
DEBUG 2022-02-14 16:38:04,186 stack ['$phi62.0']
DEBUG 2022-02-14 16:38:04,186 end state. edges=[Edge(pc=60, stack=('$phi62.0',), blockstack=(), npush=0)]
DEBUG 2022-02-14 16:38:04,187 pending: deque([State(pc_initial=60 nstack_initial=1)])
DEBUG 2022-02-14 16:38:04,187 -------------------------Prune PHIs-------------------------
DEBUG 2022-02-14 16:38:04,187 Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=60 nstack_initial=1): {'$phi60.0'},
             State(pc_initial=62 nstack_initial=2): {'$phi62.1'},
             State(pc_initial=80 nstack_initial=0): set()})
DEBUG 2022-02-14 16:38:04,187 defmap: {'$phi60.0': State(pc_initial=0 nstack_initial=0),
 '$phi62.1': State(pc_initial=60 nstack_initial=1)}
DEBUG 2022-02-14 16:38:04,187 phismap: defaultdict(<class 'set'>,
            {'$phi60.0': {('$58get_iter.25',
                           State(pc_initial=0 nstack_initial=0)),
                          ('$phi62.0', State(pc_initial=62 nstack_initial=2))},
             '$phi62.0': {('$phi60.0', State(pc_initial=60 nstack_initial=1))},
             '$phi62.1': {('$60for_iter.2',
                           State(pc_initial=60 nstack_initial=1))}})
DEBUG 2022-02-14 16:38:04,187 changing phismap: defaultdict(<class 'set'>,
            {'$phi60.0': {('$58get_iter.25',
                           State(pc_initial=0 nstack_initial=0)),
                          ('$phi60.0', State(pc_initial=60 nstack_initial=1))},
             '$phi62.0': {('$58get_iter.25',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi62.1': {('$60for_iter.2',
                           State(pc_initial=60 nstack_initial=1))}})
DEBUG 2022-02-14 16:38:04,187 changing phismap: defaultdict(<class 'set'>,
            {'$phi60.0': {('$58get_iter.25',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi62.0': {('$58get_iter.25',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi62.1': {('$60for_iter.2',
                           State(pc_initial=60 nstack_initial=1))}})
DEBUG 2022-02-14 16:38:04,187 changing phismap: defaultdict(<class 'set'>,
            {'$phi60.0': {('$58get_iter.25',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi62.0': {('$58get_iter.25',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi62.1': {('$60for_iter.2',
                           State(pc_initial=60 nstack_initial=1))}})
DEBUG 2022-02-14 16:38:04,188 keep phismap: {'$phi60.0': {('$58get_iter.25', State(pc_initial=0 nstack_initial=0))},
 '$phi62.1': {('$60for_iter.2', State(pc_initial=60 nstack_initial=1))}}
DEBUG 2022-02-14 16:38:04,188 new_out: defaultdict(<class 'dict'>,
            {State(pc_initial=0 nstack_initial=0): {'$phi60.0': '$58get_iter.25'},
             State(pc_initial=60 nstack_initial=1): {'$phi62.1': '$60for_iter.2'}})
DEBUG 2022-02-14 16:38:04,188 ----------------------DONE Prune PHIs-----------------------
DEBUG 2022-02-14 16:38:04,188 block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$2load_global.0'}), (4, {'item': '$2load_global.0', 'res': '$4load_attr.1'}), (6, {'item': '$4load_attr.1', 'res': '$6load_attr.2'}), (8, {'item': '$6load_attr.2', 'res': '$8load_method.3'}), (10, {'func': '$8load_method.3', 'args': [], 'res': '$10call_method.4'}), (14, {'res': '$14load_global.5'}), (16, {'res': '$16load_global.6'}), (18, {'res': '$in_arr18.7'}), (20, {'func': '$16load_global.6', 'args': ['$in_arr18.7'], 'res': '$20call_function.8'}), (22, {'func': '$14load_global.5', 'args': ['$20call_function.8'], 'res': '$22call_function.9'}), (26, {'res': '$26load_global.10'}), (28, {'item': '$26load_global.10', 'res': '$28load_attr.11'}), (30, {'item': '$28load_attr.11', 'res': '$30load_attr.12'}), (32, {'item': '$30load_attr.12', 'res': '$32load_method.13'}), (34, {'res': '$in_arr34.14'}), (36, {'item': '$in_arr34.14', 'res': '$36load_attr.15'}), (38, {'func': '$32load_method.13', 'args': ['$36load_attr.15'], 'res': '$38call_method.16'}), (40, {'value': '$38call_method.16'}), (42, {'res': '$42load_global.17'}), (44, {'item': '$42load_global.17', 'res': '$44load_attr.18'}), (46, {'item': '$44load_attr.18', 'res': '$46load_attr.19'}), (48, {'item': '$46load_attr.19', 'res': '$48load_method.20'}), (50, {'res': '$50load_global.21'}), (52, {'res': '$in_arr52.22'}), (54, {'func': '$50load_global.21', 'args': ['$in_arr52.22'], 'res': '$54call_function.23'}), (56, {'func': '$48load_method.20', 'args': ['$54call_function.23'], 'res': '$56call_method.24'}), (58, {'value': '$56call_method.24', 'res': '$58get_iter.25'})), outgoing_phis={'$phi60.0': '$58get_iter.25'}, blockstack=(), active_try_block=None, outgoing_edgepushed={60: ('$58get_iter.25',)})
DEBUG 2022-02-14 16:38:04,188 block_infos State(pc_initial=60 nstack_initial=1):
AdaptBlockInfo(insts=((60, {'iterator': '$phi60.0', 'pair': '$60for_iter.1', 'indval': '$60for_iter.2', 'pred': '$60for_iter.3'}),), outgoing_phis={'$phi62.1': '$60for_iter.2'}, blockstack=(), active_try_block=None, outgoing_edgepushed={80: (), 62: ('$phi60.0', '$60for_iter.2')})
DEBUG 2022-02-14 16:38:04,188 block_infos State(pc_initial=62 nstack_initial=2):
AdaptBlockInfo(insts=((62, {'value': '$phi62.1'}), (64, {'res': '$64load_global.2'}), (66, {'res': '$val66.3'}), (68, {'res': '$in_arr68.4'}), (70, {'res': '$i70.5'}), (72, {'index': '$i70.5', 'target': '$in_arr68.4', 'res': '$72binary_subscr.6'}), (74, {'func': '$64load_global.2', 'args': ['$val66.3', '$72binary_subscr.6'], 'res': '$74call_function.7'}), (76, {'value': '$74call_function.7'}), (78, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={60: ('$phi62.0',)})
DEBUG 2022-02-14 16:38:04,188 block_infos State(pc_initial=80 nstack_initial=0):
AdaptBlockInfo(insts=((80, {'res': '$val80.0'}), (82, {'retval': '$val80.0', 'castval': '$82return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG 2022-02-14 16:38:04,189 label 0:
    in_arr = arg(0, name=in_arr)             ['in_arr']
    $2load_global.0 = global(numba: <module 'numba' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numba/__init__.py'>) ['$2load_global.0']
    $4load_attr.1 = getattr(value=$2load_global.0, attr=parfors) ['$2load_global.0', '$4load_attr.1']
    $6load_attr.2 = getattr(value=$4load_attr.1, attr=parfor) ['$4load_attr.1', '$6load_attr.2']
    $8load_method.3 = getattr(value=$6load_attr.2, attr=init_prange) ['$6load_attr.2', '$8load_method.3']
    $10call_method.4 = call $8load_method.3(func=$8load_method.3, args=[], kws=(), vararg=None, target=None) ['$10call_method.4', '$8load_method.3']
    $14load_global.5 = global(max_checker: <function max_checker at 0x7fa04ab0fee0>) ['$14load_global.5']
    $16load_global.6 = global(len: <built-in function len>) ['$16load_global.6']
    $20call_function.8 = call $16load_global.6(in_arr, func=$16load_global.6, args=[Var(in_arr, parfor.py:154)], kws=(), vararg=None, target=None) ['$16load_global.6', '$20call_function.8', 'in_arr']
    $22call_function.9 = call $14load_global.5($20call_function.8, func=$14load_global.5, args=[Var($20call_function.8, parfor.py:155)], kws=(), vararg=None, target=None) ['$14load_global.5', '$20call_function.8', '$22call_function.9']
    $26load_global.10 = global(numba: <module 'numba' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numba/__init__.py'>) ['$26load_global.10']
    $28load_attr.11 = getattr(value=$26load_global.10, attr=cpython) ['$26load_global.10', '$28load_attr.11']
    $30load_attr.12 = getattr(value=$28load_attr.11, attr=builtins) ['$28load_attr.11', '$30load_attr.12']
    $32load_method.13 = getattr(value=$30load_attr.12, attr=get_type_min_value) ['$30load_attr.12', '$32load_method.13']
    $36load_attr.15 = getattr(value=in_arr, attr=dtype) ['$36load_attr.15', 'in_arr']
    val = call $32load_method.13($36load_attr.15, func=$32load_method.13, args=[Var($36load_attr.15, parfor.py:156)], kws=(), vararg=None, target=None) ['$32load_method.13', '$36load_attr.15', 'val']
    $42load_global.17 = global(numba: <module 'numba' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numba/__init__.py'>) ['$42load_global.17']
    $44load_attr.18 = getattr(value=$42load_global.17, attr=parfors) ['$42load_global.17', '$44load_attr.18']
    $46load_attr.19 = getattr(value=$44load_attr.18, attr=parfor) ['$44load_attr.18', '$46load_attr.19']
    $48load_method.20 = getattr(value=$46load_attr.19, attr=internal_prange) ['$46load_attr.19', '$48load_method.20']
    $50load_global.21 = global(len: <built-in function len>) ['$50load_global.21']
    $54call_function.23 = call $50load_global.21(in_arr, func=$50load_global.21, args=[Var(in_arr, parfor.py:154)], kws=(), vararg=None, target=None) ['$50load_global.21', '$54call_function.23', 'in_arr']
    $56call_method.24 = call $48load_method.20($54call_function.23, func=$48load_method.20, args=[Var($54call_function.23, parfor.py:157)], kws=(), vararg=None, target=None) ['$48load_method.20', '$54call_function.23', '$56call_method.24']
    $58get_iter.25 = getiter(value=$56call_method.24) ['$56call_method.24', '$58get_iter.25']
    $phi60.0 = $58get_iter.25                ['$58get_iter.25', '$phi60.0']
    jump 60                                  []
label 60:
    $60for_iter.1 = iternext(value=$phi60.0) ['$60for_iter.1', '$phi60.0']
    $60for_iter.2 = pair_first(value=$60for_iter.1) ['$60for_iter.1', '$60for_iter.2']
    $60for_iter.3 = pair_second(value=$60for_iter.1) ['$60for_iter.1', '$60for_iter.3']
    $phi62.1 = $60for_iter.2                 ['$60for_iter.2', '$phi62.1']
    branch $60for_iter.3, 62, 80             ['$60for_iter.3']
label 62:
    i = $phi62.1                             ['$phi62.1', 'i']
    $64load_global.2 = global(max: <built-in function max>) ['$64load_global.2']
    $72binary_subscr.6 = getitem(value=in_arr, index=i, fn=<built-in function getitem>) ['$72binary_subscr.6', 'i', 'in_arr']
    val = call $64load_global.2(val, $72binary_subscr.6, func=$64load_global.2, args=[Var(val, parfor.py:156), Var($72binary_subscr.6, parfor.py:158)], kws=(), vararg=None, target=None) ['$64load_global.2', '$72binary_subscr.6', 'val', 'val']
    jump 60                                  []
label 80:
    $82return_value.1 = cast(value=val)      ['$82return_value.1', 'val']
    return $82return_value.1                 ['$82return_value.1']

DEBUG 2022-02-14 16:38:04,194 bytecode dump:
>          0	NOP(arg=None, lineno=457)
           2	LOAD_FAST(arg=0, lineno=457)
           4	LOAD_CONST(arg=1, lineno=457)
           6	COMPARE_OP(arg=2, lineno=457)
           8	POP_JUMP_IF_FALSE(arg=18, lineno=457)
          10	LOAD_GLOBAL(arg=0, lineno=458)
          12	LOAD_CONST(arg=2, lineno=458)
          14	CALL_FUNCTION(arg=1, lineno=458)
          16	RAISE_VARARGS(arg=1, lineno=458)
>         18	LOAD_CONST(arg=0, lineno=458)
          20	RETURN_VALUE(arg=None, lineno=458)
DEBUG 2022-02-14 16:38:04,194 pending: deque([State(pc_initial=0 nstack_initial=0)])
DEBUG 2022-02-14 16:38:04,194 stack: []
DEBUG 2022-02-14 16:38:04,194 dispatch pc=0, inst=NOP(arg=None, lineno=457)
DEBUG 2022-02-14 16:38:04,194 stack []
DEBUG 2022-02-14 16:38:04,194 dispatch pc=2, inst=LOAD_FAST(arg=0, lineno=457)
DEBUG 2022-02-14 16:38:04,194 stack []
DEBUG 2022-02-14 16:38:04,195 dispatch pc=4, inst=LOAD_CONST(arg=1, lineno=457)
DEBUG 2022-02-14 16:38:04,195 stack ['$arr_size2.0']
DEBUG 2022-02-14 16:38:04,195 dispatch pc=6, inst=COMPARE_OP(arg=2, lineno=457)
DEBUG 2022-02-14 16:38:04,195 stack ['$arr_size2.0', '$const4.1']
DEBUG 2022-02-14 16:38:04,195 dispatch pc=8, inst=POP_JUMP_IF_FALSE(arg=18, lineno=457)
DEBUG 2022-02-14 16:38:04,195 stack ['$6compare_op.2']
DEBUG 2022-02-14 16:38:04,195 end state. edges=[Edge(pc=10, stack=(), blockstack=(), npush=0), Edge(pc=18, stack=(), blockstack=(), npush=0)]
DEBUG 2022-02-14 16:38:04,195 pending: deque([State(pc_initial=10 nstack_initial=0), State(pc_initial=18 nstack_initial=0)])
DEBUG 2022-02-14 16:38:04,195 stack: []
DEBUG 2022-02-14 16:38:04,195 dispatch pc=10, inst=LOAD_GLOBAL(arg=0, lineno=458)
DEBUG 2022-02-14 16:38:04,195 stack []
DEBUG 2022-02-14 16:38:04,195 dispatch pc=12, inst=LOAD_CONST(arg=2, lineno=458)
DEBUG 2022-02-14 16:38:04,195 stack ['$10load_global.0']
DEBUG 2022-02-14 16:38:04,195 dispatch pc=14, inst=CALL_FUNCTION(arg=1, lineno=458)
DEBUG 2022-02-14 16:38:04,195 stack ['$10load_global.0', '$const12.1']
DEBUG 2022-02-14 16:38:04,195 dispatch pc=16, inst=RAISE_VARARGS(arg=1, lineno=458)
DEBUG 2022-02-14 16:38:04,195 stack ['$14call_function.2']
DEBUG 2022-02-14 16:38:04,195 end state. edges=[]
DEBUG 2022-02-14 16:38:04,195 pending: deque([State(pc_initial=18 nstack_initial=0)])
DEBUG 2022-02-14 16:38:04,195 stack: []
DEBUG 2022-02-14 16:38:04,195 dispatch pc=18, inst=LOAD_CONST(arg=0, lineno=458)
DEBUG 2022-02-14 16:38:04,195 stack []
DEBUG 2022-02-14 16:38:04,195 dispatch pc=20, inst=RETURN_VALUE(arg=None, lineno=458)
DEBUG 2022-02-14 16:38:04,195 stack ['$const18.0']
DEBUG 2022-02-14 16:38:04,196 end state. edges=[]
DEBUG 2022-02-14 16:38:04,196 -------------------------Prune PHIs-------------------------
DEBUG 2022-02-14 16:38:04,196 Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=10 nstack_initial=0): set(),
             State(pc_initial=18 nstack_initial=0): set()})
DEBUG 2022-02-14 16:38:04,196 defmap: {}
DEBUG 2022-02-14 16:38:04,196 phismap: defaultdict(<class 'set'>, {})
DEBUG 2022-02-14 16:38:04,196 changing phismap: defaultdict(<class 'set'>, {})
DEBUG 2022-02-14 16:38:04,196 keep phismap: {}
DEBUG 2022-02-14 16:38:04,196 new_out: defaultdict(<class 'dict'>, {})
DEBUG 2022-02-14 16:38:04,196 ----------------------DONE Prune PHIs-----------------------
DEBUG 2022-02-14 16:38:04,196 block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$arr_size2.0'}), (4, {'res': '$const4.1'}), (6, {'lhs': '$arr_size2.0', 'rhs': '$const4.1', 'res': '$6compare_op.2'}), (8, {'pred': '$6compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={10: (), 18: ()})
DEBUG 2022-02-14 16:38:04,196 block_infos State(pc_initial=10 nstack_initial=0):
AdaptBlockInfo(insts=((10, {'res': '$10load_global.0'}), (12, {'res': '$const12.1'}), (14, {'func': '$10load_global.0', 'args': ['$const12.1'], 'res': '$14call_function.2'}), (16, {'exc': '$14call_function.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG 2022-02-14 16:38:04,196 block_infos State(pc_initial=18 nstack_initial=0):
AdaptBlockInfo(insts=((18, {'res': '$const18.0'}), (20, {'retval': '$const18.0', 'castval': '$20return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG 2022-02-14 16:38:04,197 label 0:
    arr_size = arg(0, name=arr_size)         ['arr_size']
    $const4.1 = const(int, 0)                ['$const4.1']
    $6compare_op.2 = arr_size == $const4.1   ['$6compare_op.2', '$const4.1', 'arr_size']
    bool8 = global(bool: <class 'bool'>)     ['bool8']
    $8pred = call bool8($6compare_op.2, func=bool8, args=(Var($6compare_op.2, parfor.py:457),), kws=(), vararg=None, target=None) ['$6compare_op.2', '$8pred', 'bool8']
    branch $8pred, 10, 18                    ['$8pred']
label 10:
    $10load_global.0 = global(ValueError: <class 'ValueError'>) ['$10load_global.0']
    $const12.1 = const(str, zero-size array to reduction operation maximum which has no identity) ['$const12.1']
    $14call_function.2 = call $10load_global.0($const12.1, func=$10load_global.0, args=[Var($const12.1, parfor.py:458)], kws=(), vararg=None, target=None) ['$10load_global.0', '$14call_function.2', '$const12.1']
    raise $14call_function.2                 ['$14call_function.2']
label 18:
    $const18.0 = const(NoneType, None)       ['$const18.0']
    $20return_value.1 = cast(value=$const18.0) ['$20return_value.1', '$const18.0']
    return $20return_value.1                 ['$20return_value.1']

DEBUG 2022-02-14 16:38:04,200 ==== SSA block analysis pass on 0
DEBUG 2022-02-14 16:38:04,200 Running <numba.core.ssa._GatherDefsHandler object at 0x7fa046aa5730>
DEBUG 2022-02-14 16:38:04,200 on stmt: arr_size = arg(0, name=arr_size)
DEBUG 2022-02-14 16:38:04,200 on stmt: $const4.1 = const(int, 0)
DEBUG 2022-02-14 16:38:04,200 on stmt: $6compare_op.2 = arr_size == $const4.1
DEBUG 2022-02-14 16:38:04,201 on stmt: bool8 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:38:04,201 on stmt: $8pred = call bool8($6compare_op.2, func=bool8, args=(Var($6compare_op.2, parfor.py:457),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:04,201 on stmt: branch $8pred, 10, 18
DEBUG 2022-02-14 16:38:04,201 ==== SSA block analysis pass on 10
DEBUG 2022-02-14 16:38:04,201 Running <numba.core.ssa._GatherDefsHandler object at 0x7fa046aa5730>
DEBUG 2022-02-14 16:38:04,201 on stmt: $10load_global.0 = global(ValueError: <class 'ValueError'>)
DEBUG 2022-02-14 16:38:04,201 on stmt: $const12.1 = const(str, zero-size array to reduction operation maximum which has no identity)
DEBUG 2022-02-14 16:38:04,201 on stmt: $14call_function.2 = call $10load_global.0($const12.1, func=$10load_global.0, args=[Var($const12.1, parfor.py:458)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:04,201 on stmt: <static> raise <class 'ValueError'>('zero-size array to reduction operation maximum which has no identity')
DEBUG 2022-02-14 16:38:04,201 ==== SSA block analysis pass on 18
DEBUG 2022-02-14 16:38:04,201 Running <numba.core.ssa._GatherDefsHandler object at 0x7fa046aa5730>
DEBUG 2022-02-14 16:38:04,201 on stmt: $const18.0 = const(NoneType, None)
DEBUG 2022-02-14 16:38:04,201 on stmt: $20return_value.1 = cast(value=$const18.0)
DEBUG 2022-02-14 16:38:04,201 on stmt: return $20return_value.1
DEBUG 2022-02-14 16:38:04,201 defs defaultdict(<class 'list'>,
            {'$10load_global.0': [<numba.core.ir.Assign object at 0x7fa046a905b0>],
             '$14call_function.2': [<numba.core.ir.Assign object at 0x7fa046a90910>],
             '$20return_value.1': [<numba.core.ir.Assign object at 0x7fa046a90d30>],
             '$6compare_op.2': [<numba.core.ir.Assign object at 0x7fa046a90100>],
             '$8pred': [<numba.core.ir.Assign object at 0x7fa046a90370>],
             '$const12.1': [<numba.core.ir.Assign object at 0x7fa046a90730>],
             '$const18.0': [<numba.core.ir.Assign object at 0x7fa046a90bb0>],
             '$const4.1': [<numba.core.ir.Assign object at 0x7fa046aa5490>],
             'arr_size': [<numba.core.ir.Assign object at 0x7fa046aa5b20>],
             'bool8': [<numba.core.ir.Assign object at 0x7fa046a90250>]})
DEBUG 2022-02-14 16:38:04,201 SSA violators set()
DEBUG 2022-02-14 16:38:04,229 bytecode dump:
>          0	NOP(arg=None, lineno=610)
           2	LOAD_GLOBAL(arg=0, lineno=610)
           4	LOAD_FAST(arg=0, lineno=610)
           6	CALL_FUNCTION(arg=1, lineno=610)
           8	RETURN_VALUE(arg=None, lineno=610)
DEBUG 2022-02-14 16:38:04,229 pending: deque([State(pc_initial=0 nstack_initial=0)])
DEBUG 2022-02-14 16:38:04,229 stack: []
DEBUG 2022-02-14 16:38:04,230 dispatch pc=0, inst=NOP(arg=None, lineno=610)
DEBUG 2022-02-14 16:38:04,230 stack []
DEBUG 2022-02-14 16:38:04,230 dispatch pc=2, inst=LOAD_GLOBAL(arg=0, lineno=610)
DEBUG 2022-02-14 16:38:04,230 stack []
DEBUG 2022-02-14 16:38:04,230 dispatch pc=4, inst=LOAD_FAST(arg=0, lineno=610)
DEBUG 2022-02-14 16:38:04,230 stack ['$2load_global.0']
DEBUG 2022-02-14 16:38:04,230 dispatch pc=6, inst=CALL_FUNCTION(arg=1, lineno=610)
DEBUG 2022-02-14 16:38:04,230 stack ['$2load_global.0', '$desc4.1']
DEBUG 2022-02-14 16:38:04,230 dispatch pc=8, inst=RETURN_VALUE(arg=None, lineno=610)
DEBUG 2022-02-14 16:38:04,230 stack ['$6call_function.2']
DEBUG 2022-02-14 16:38:04,230 end state. edges=[]
DEBUG 2022-02-14 16:38:04,230 -------------------------Prune PHIs-------------------------
DEBUG 2022-02-14 16:38:04,230 Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
DEBUG 2022-02-14 16:38:04,230 defmap: {}
DEBUG 2022-02-14 16:38:04,230 phismap: defaultdict(<class 'set'>, {})
DEBUG 2022-02-14 16:38:04,230 changing phismap: defaultdict(<class 'set'>, {})
DEBUG 2022-02-14 16:38:04,230 keep phismap: {}
DEBUG 2022-02-14 16:38:04,230 new_out: defaultdict(<class 'dict'>, {})
DEBUG 2022-02-14 16:38:04,230 ----------------------DONE Prune PHIs-----------------------
DEBUG 2022-02-14 16:38:04,230 block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$2load_global.0'}), (4, {'res': '$desc4.1'}), (6, {'func': '$2load_global.0', 'args': ['$desc4.1'], 'res': '$6call_function.2'}), (8, {'retval': '$6call_function.2', 'castval': '$8return_value.3'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG 2022-02-14 16:38:04,231 label 0:
    desc = arg(0, name=desc)                 ['desc']
    $2load_global.0 = global(_make_dtype_object: <intrinsic _make_dtype_object>) ['$2load_global.0']
    $6call_function.2 = call $2load_global.0(desc, func=$2load_global.0, args=[Var(desc, npyimpl.py:610)], kws=(), vararg=None, target=None) ['$2load_global.0', '$6call_function.2', 'desc']
    $8return_value.3 = cast(value=$6call_function.2) ['$6call_function.2', '$8return_value.3']
    return $8return_value.3                  ['$8return_value.3']

DEBUG 2022-02-14 16:38:04,232 ==== SSA block analysis pass on 0
DEBUG 2022-02-14 16:38:04,232 Running <numba.core.ssa._GatherDefsHandler object at 0x7fa046aa39a0>
DEBUG 2022-02-14 16:38:04,232 on stmt: desc = arg(0, name=desc)
DEBUG 2022-02-14 16:38:04,232 on stmt: $2load_global.0 = global(_make_dtype_object: <intrinsic _make_dtype_object>)
DEBUG 2022-02-14 16:38:04,232 on stmt: $6call_function.2 = call $2load_global.0(desc, func=$2load_global.0, args=[Var(desc, npyimpl.py:610)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:04,232 on stmt: $8return_value.3 = cast(value=$6call_function.2)
DEBUG 2022-02-14 16:38:04,232 on stmt: return $8return_value.3
DEBUG 2022-02-14 16:38:04,232 defs defaultdict(<class 'list'>,
            {'$2load_global.0': [<numba.core.ir.Assign object at 0x7fa046a9adc0>],
             '$6call_function.2': [<numba.core.ir.Assign object at 0x7fa046a9a490>],
             '$8return_value.3': [<numba.core.ir.Assign object at 0x7fa04716ec70>],
             'desc': [<numba.core.ir.Assign object at 0x7fa046a9ac70>]})
DEBUG 2022-02-14 16:38:04,232 SSA violators set()
DEBUG 2022-02-14 16:38:04,256 bytecode dump:
>          0	NOP(arg=None, lineno=3)
           2	LOAD_GLOBAL(arg=0, lineno=3)
           4	LOAD_FAST(arg=0, lineno=3)
           6	LOAD_FAST(arg=1, lineno=3)
           8	CALL_FUNCTION(arg=2, lineno=3)
          10	RETURN_VALUE(arg=None, lineno=3)
DEBUG 2022-02-14 16:38:04,256 pending: deque([State(pc_initial=0 nstack_initial=0)])
DEBUG 2022-02-14 16:38:04,256 stack: []
DEBUG 2022-02-14 16:38:04,256 dispatch pc=0, inst=NOP(arg=None, lineno=3)
DEBUG 2022-02-14 16:38:04,256 stack []
DEBUG 2022-02-14 16:38:04,256 dispatch pc=2, inst=LOAD_GLOBAL(arg=0, lineno=3)
DEBUG 2022-02-14 16:38:04,256 stack []
DEBUG 2022-02-14 16:38:04,256 dispatch pc=4, inst=LOAD_FAST(arg=0, lineno=3)
DEBUG 2022-02-14 16:38:04,256 stack ['$2load_global.0']
DEBUG 2022-02-14 16:38:04,257 dispatch pc=6, inst=LOAD_FAST(arg=1, lineno=3)
DEBUG 2022-02-14 16:38:04,257 stack ['$2load_global.0', '$tmp04.1']
DEBUG 2022-02-14 16:38:04,257 dispatch pc=8, inst=CALL_FUNCTION(arg=2, lineno=3)
DEBUG 2022-02-14 16:38:04,257 stack ['$2load_global.0', '$tmp04.1', '$dtype6.2']
DEBUG 2022-02-14 16:38:04,257 dispatch pc=10, inst=RETURN_VALUE(arg=None, lineno=3)
DEBUG 2022-02-14 16:38:04,257 stack ['$8call_function.3']
DEBUG 2022-02-14 16:38:04,257 end state. edges=[]
DEBUG 2022-02-14 16:38:04,257 -------------------------Prune PHIs-------------------------
DEBUG 2022-02-14 16:38:04,257 Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
DEBUG 2022-02-14 16:38:04,257 defmap: {}
DEBUG 2022-02-14 16:38:04,257 phismap: defaultdict(<class 'set'>, {})
DEBUG 2022-02-14 16:38:04,257 changing phismap: defaultdict(<class 'set'>, {})
DEBUG 2022-02-14 16:38:04,257 keep phismap: {}
DEBUG 2022-02-14 16:38:04,257 new_out: defaultdict(<class 'dict'>, {})
DEBUG 2022-02-14 16:38:04,257 ----------------------DONE Prune PHIs-----------------------
DEBUG 2022-02-14 16:38:04,257 block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$2load_global.0'}), (4, {'res': '$tmp04.1'}), (6, {'res': '$dtype6.2'}), (8, {'func': '$2load_global.0', 'args': ['$tmp04.1', '$dtype6.2'], 'res': '$8call_function.3'}), (10, {'retval': '$8call_function.3', 'castval': '$10return_value.4'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG 2022-02-14 16:38:04,258 label 0:
    tmp0 = arg(0, name=tmp0)                 ['tmp0']
    dtype = arg(1, name=dtype)               ['dtype']
    $2load_global.0 = global(intrin: <intrinsic stub>) ['$2load_global.0']
    $8call_function.3 = call $2load_global.0(tmp0, dtype, func=$2load_global.0, args=[Var(tmp0, <string>:3), Var(dtype, <string>:3)], kws=(), vararg=None, target=None) ['$2load_global.0', '$8call_function.3', 'dtype', 'tmp0']
    $10return_value.4 = cast(value=$8call_function.3) ['$10return_value.4', '$8call_function.3']
    return $10return_value.4                 ['$10return_value.4']

DEBUG 2022-02-14 16:38:04,259 ==== SSA block analysis pass on 0
DEBUG 2022-02-14 16:38:04,259 Running <numba.core.ssa._GatherDefsHandler object at 0x7fa046eb0910>
DEBUG 2022-02-14 16:38:04,259 on stmt: tmp0 = arg(0, name=tmp0)
DEBUG 2022-02-14 16:38:04,259 on stmt: dtype = arg(1, name=dtype)
DEBUG 2022-02-14 16:38:04,259 on stmt: $2load_global.0 = global(intrin: <intrinsic stub>)
DEBUG 2022-02-14 16:38:04,259 on stmt: $8call_function.3 = call $2load_global.0(tmp0, dtype, func=$2load_global.0, args=[Var(tmp0, <string>:3), Var(dtype, <string>:3)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:04,259 on stmt: $10return_value.4 = cast(value=$8call_function.3)
DEBUG 2022-02-14 16:38:04,259 on stmt: return $10return_value.4
DEBUG 2022-02-14 16:38:04,260 defs defaultdict(<class 'list'>,
            {'$10return_value.4': [<numba.core.ir.Assign object at 0x7fa046ec8ca0>],
             '$2load_global.0': [<numba.core.ir.Assign object at 0x7fa046ec8760>],
             '$8call_function.3': [<numba.core.ir.Assign object at 0x7fa046ec8b80>],
             'dtype': [<numba.core.ir.Assign object at 0x7fa046ec8070>],
             'tmp0': [<numba.core.ir.Assign object at 0x7fa046ec8190>]})
DEBUG 2022-02-14 16:38:04,260 SSA violators set()
DEBUG 2022-02-14 16:38:04,330 bytecode dump:
>          0	NOP(arg=None, lineno=3)
           2	LOAD_GLOBAL(arg=0, lineno=3)
           4	LOAD_FAST(arg=0, lineno=3)
           6	LOAD_FAST(arg=1, lineno=3)
           8	CALL_FUNCTION(arg=2, lineno=3)
          10	RETURN_VALUE(arg=None, lineno=3)
DEBUG 2022-02-14 16:38:04,330 pending: deque([State(pc_initial=0 nstack_initial=0)])
DEBUG 2022-02-14 16:38:04,330 stack: []
DEBUG 2022-02-14 16:38:04,330 dispatch pc=0, inst=NOP(arg=None, lineno=3)
DEBUG 2022-02-14 16:38:04,330 stack []
DEBUG 2022-02-14 16:38:04,330 dispatch pc=2, inst=LOAD_GLOBAL(arg=0, lineno=3)
DEBUG 2022-02-14 16:38:04,330 stack []
DEBUG 2022-02-14 16:38:04,330 dispatch pc=4, inst=LOAD_FAST(arg=0, lineno=3)
DEBUG 2022-02-14 16:38:04,330 stack ['$2load_global.0']
DEBUG 2022-02-14 16:38:04,330 dispatch pc=6, inst=LOAD_FAST(arg=1, lineno=3)
DEBUG 2022-02-14 16:38:04,330 stack ['$2load_global.0', '$tmp04.1']
DEBUG 2022-02-14 16:38:04,330 dispatch pc=8, inst=CALL_FUNCTION(arg=2, lineno=3)
DEBUG 2022-02-14 16:38:04,330 stack ['$2load_global.0', '$tmp04.1', '$tmp16.2']
DEBUG 2022-02-14 16:38:04,330 dispatch pc=10, inst=RETURN_VALUE(arg=None, lineno=3)
DEBUG 2022-02-14 16:38:04,330 stack ['$8call_function.3']
DEBUG 2022-02-14 16:38:04,330 end state. edges=[]
DEBUG 2022-02-14 16:38:04,330 -------------------------Prune PHIs-------------------------
DEBUG 2022-02-14 16:38:04,330 Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
DEBUG 2022-02-14 16:38:04,331 defmap: {}
DEBUG 2022-02-14 16:38:04,331 phismap: defaultdict(<class 'set'>, {})
DEBUG 2022-02-14 16:38:04,331 changing phismap: defaultdict(<class 'set'>, {})
DEBUG 2022-02-14 16:38:04,331 keep phismap: {}
DEBUG 2022-02-14 16:38:04,331 new_out: defaultdict(<class 'dict'>, {})
DEBUG 2022-02-14 16:38:04,331 ----------------------DONE Prune PHIs-----------------------
DEBUG 2022-02-14 16:38:04,331 block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$2load_global.0'}), (4, {'res': '$tmp04.1'}), (6, {'res': '$tmp16.2'}), (8, {'func': '$2load_global.0', 'args': ['$tmp04.1', '$tmp16.2'], 'res': '$8call_function.3'}), (10, {'retval': '$8call_function.3', 'castval': '$10return_value.4'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG 2022-02-14 16:38:04,331 label 0:
    tmp0 = arg(0, name=tmp0)                 ['tmp0']
    tmp1 = arg(1, name=tmp1)                 ['tmp1']
    $2load_global.0 = global(intrin: <intrinsic stub>) ['$2load_global.0']
    $8call_function.3 = call $2load_global.0(tmp0, tmp1, func=$2load_global.0, args=[Var(tmp0, <string>:3), Var(tmp1, <string>:3)], kws=(), vararg=None, target=None) ['$2load_global.0', '$8call_function.3', 'tmp0', 'tmp1']
    $10return_value.4 = cast(value=$8call_function.3) ['$10return_value.4', '$8call_function.3']
    return $10return_value.4                 ['$10return_value.4']

DEBUG 2022-02-14 16:38:04,332 ==== SSA block analysis pass on 0
DEBUG 2022-02-14 16:38:04,332 Running <numba.core.ssa._GatherDefsHandler object at 0x7fa046bf2a00>
DEBUG 2022-02-14 16:38:04,333 on stmt: tmp0 = arg(0, name=tmp0)
DEBUG 2022-02-14 16:38:04,333 on stmt: tmp1 = arg(1, name=tmp1)
DEBUG 2022-02-14 16:38:04,333 on stmt: $2load_global.0 = global(intrin: <intrinsic stub>)
DEBUG 2022-02-14 16:38:04,333 on stmt: $8call_function.3 = call $2load_global.0(tmp0, tmp1, func=$2load_global.0, args=[Var(tmp0, <string>:3), Var(tmp1, <string>:3)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:04,333 on stmt: $10return_value.4 = cast(value=$8call_function.3)
DEBUG 2022-02-14 16:38:04,333 on stmt: return $10return_value.4
DEBUG 2022-02-14 16:38:04,333 defs defaultdict(<class 'list'>,
            {'$10return_value.4': [<numba.core.ir.Assign object at 0x7fa0471eef70>],
             '$2load_global.0': [<numba.core.ir.Assign object at 0x7fa046a9acd0>],
             '$8call_function.3': [<numba.core.ir.Assign object at 0x7fa0471eee80>],
             'tmp0': [<numba.core.ir.Assign object at 0x7fa046b96c40>],
             'tmp1': [<numba.core.ir.Assign object at 0x7fa046a9abb0>]})
DEBUG 2022-02-14 16:38:04,333 SSA violators set()
DEBUG 2022-02-14 16:38:04,364 bytecode dump:
>          0	NOP(arg=None, lineno=3)
           2	LOAD_GLOBAL(arg=0, lineno=3)
           4	LOAD_FAST(arg=0, lineno=3)
           6	LOAD_FAST(arg=1, lineno=3)
           8	CALL_FUNCTION(arg=2, lineno=3)
          10	RETURN_VALUE(arg=None, lineno=3)
DEBUG 2022-02-14 16:38:04,364 pending: deque([State(pc_initial=0 nstack_initial=0)])
DEBUG 2022-02-14 16:38:04,364 stack: []
DEBUG 2022-02-14 16:38:04,364 dispatch pc=0, inst=NOP(arg=None, lineno=3)
DEBUG 2022-02-14 16:38:04,364 stack []
DEBUG 2022-02-14 16:38:04,364 dispatch pc=2, inst=LOAD_GLOBAL(arg=0, lineno=3)
DEBUG 2022-02-14 16:38:04,364 stack []
DEBUG 2022-02-14 16:38:04,365 dispatch pc=4, inst=LOAD_FAST(arg=0, lineno=3)
DEBUG 2022-02-14 16:38:04,365 stack ['$2load_global.0']
DEBUG 2022-02-14 16:38:04,365 dispatch pc=6, inst=LOAD_FAST(arg=1, lineno=3)
DEBUG 2022-02-14 16:38:04,365 stack ['$2load_global.0', '$tmp04.1']
DEBUG 2022-02-14 16:38:04,365 dispatch pc=8, inst=CALL_FUNCTION(arg=2, lineno=3)
DEBUG 2022-02-14 16:38:04,365 stack ['$2load_global.0', '$tmp04.1', '$tmp16.2']
DEBUG 2022-02-14 16:38:04,365 dispatch pc=10, inst=RETURN_VALUE(arg=None, lineno=3)
DEBUG 2022-02-14 16:38:04,365 stack ['$8call_function.3']
DEBUG 2022-02-14 16:38:04,365 end state. edges=[]
DEBUG 2022-02-14 16:38:04,365 -------------------------Prune PHIs-------------------------
DEBUG 2022-02-14 16:38:04,365 Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
DEBUG 2022-02-14 16:38:04,365 defmap: {}
DEBUG 2022-02-14 16:38:04,365 phismap: defaultdict(<class 'set'>, {})
DEBUG 2022-02-14 16:38:04,365 changing phismap: defaultdict(<class 'set'>, {})
DEBUG 2022-02-14 16:38:04,365 keep phismap: {}
DEBUG 2022-02-14 16:38:04,365 new_out: defaultdict(<class 'dict'>, {})
DEBUG 2022-02-14 16:38:04,365 ----------------------DONE Prune PHIs-----------------------
DEBUG 2022-02-14 16:38:04,365 block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$2load_global.0'}), (4, {'res': '$tmp04.1'}), (6, {'res': '$tmp16.2'}), (8, {'func': '$2load_global.0', 'args': ['$tmp04.1', '$tmp16.2'], 'res': '$8call_function.3'}), (10, {'retval': '$8call_function.3', 'castval': '$10return_value.4'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG 2022-02-14 16:38:04,366 label 0:
    tmp0 = arg(0, name=tmp0)                 ['tmp0']
    tmp1 = arg(1, name=tmp1)                 ['tmp1']
    $2load_global.0 = global(intrin: <intrinsic stub>) ['$2load_global.0']
    $8call_function.3 = call $2load_global.0(tmp0, tmp1, func=$2load_global.0, args=[Var(tmp0, <string>:3), Var(tmp1, <string>:3)], kws=(), vararg=None, target=None) ['$2load_global.0', '$8call_function.3', 'tmp0', 'tmp1']
    $10return_value.4 = cast(value=$8call_function.3) ['$10return_value.4', '$8call_function.3']
    return $10return_value.4                 ['$10return_value.4']

DEBUG 2022-02-14 16:38:04,367 ==== SSA block analysis pass on 0
DEBUG 2022-02-14 16:38:04,367 Running <numba.core.ssa._GatherDefsHandler object at 0x7fa046b426a0>
DEBUG 2022-02-14 16:38:04,367 on stmt: tmp0 = arg(0, name=tmp0)
DEBUG 2022-02-14 16:38:04,367 on stmt: tmp1 = arg(1, name=tmp1)
DEBUG 2022-02-14 16:38:04,367 on stmt: $2load_global.0 = global(intrin: <intrinsic stub>)
DEBUG 2022-02-14 16:38:04,367 on stmt: $8call_function.3 = call $2load_global.0(tmp0, tmp1, func=$2load_global.0, args=[Var(tmp0, <string>:3), Var(tmp1, <string>:3)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:04,367 on stmt: $10return_value.4 = cast(value=$8call_function.3)
DEBUG 2022-02-14 16:38:04,367 on stmt: return $10return_value.4
DEBUG 2022-02-14 16:38:04,367 defs defaultdict(<class 'list'>,
            {'$10return_value.4': [<numba.core.ir.Assign object at 0x7fa046b44b50>],
             '$2load_global.0': [<numba.core.ir.Assign object at 0x7fa046b44610>],
             '$8call_function.3': [<numba.core.ir.Assign object at 0x7fa046b44a30>],
             'tmp0': [<numba.core.ir.Assign object at 0x7fa046b426d0>],
             'tmp1': [<numba.core.ir.Assign object at 0x7fa046b440d0>]})
DEBUG 2022-02-14 16:38:04,367 SSA violators set()
DEBUG 2022-02-14 16:38:04,932 bytecode dump:
>          0	NOP(arg=None, lineno=3)
           2	LOAD_GLOBAL(arg=0, lineno=3)
           4	LOAD_FAST(arg=0, lineno=3)
           6	LOAD_FAST(arg=1, lineno=3)
           8	CALL_FUNCTION(arg=2, lineno=3)
          10	RETURN_VALUE(arg=None, lineno=3)
DEBUG 2022-02-14 16:38:04,932 pending: deque([State(pc_initial=0 nstack_initial=0)])
DEBUG 2022-02-14 16:38:04,932 stack: []
DEBUG 2022-02-14 16:38:04,932 dispatch pc=0, inst=NOP(arg=None, lineno=3)
DEBUG 2022-02-14 16:38:04,932 stack []
DEBUG 2022-02-14 16:38:04,932 dispatch pc=2, inst=LOAD_GLOBAL(arg=0, lineno=3)
DEBUG 2022-02-14 16:38:04,932 stack []
DEBUG 2022-02-14 16:38:04,932 dispatch pc=4, inst=LOAD_FAST(arg=0, lineno=3)
DEBUG 2022-02-14 16:38:04,932 stack ['$2load_global.0']
DEBUG 2022-02-14 16:38:04,932 dispatch pc=6, inst=LOAD_FAST(arg=1, lineno=3)
DEBUG 2022-02-14 16:38:04,932 stack ['$2load_global.0', '$tmp04.1']
DEBUG 2022-02-14 16:38:04,932 dispatch pc=8, inst=CALL_FUNCTION(arg=2, lineno=3)
DEBUG 2022-02-14 16:38:04,932 stack ['$2load_global.0', '$tmp04.1', '$dtype6.2']
DEBUG 2022-02-14 16:38:04,932 dispatch pc=10, inst=RETURN_VALUE(arg=None, lineno=3)
DEBUG 2022-02-14 16:38:04,932 stack ['$8call_function.3']
DEBUG 2022-02-14 16:38:04,932 end state. edges=[]
DEBUG 2022-02-14 16:38:04,932 -------------------------Prune PHIs-------------------------
DEBUG 2022-02-14 16:38:04,932 Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
DEBUG 2022-02-14 16:38:04,933 defmap: {}
DEBUG 2022-02-14 16:38:04,933 phismap: defaultdict(<class 'set'>, {})
DEBUG 2022-02-14 16:38:04,933 changing phismap: defaultdict(<class 'set'>, {})
DEBUG 2022-02-14 16:38:04,933 keep phismap: {}
DEBUG 2022-02-14 16:38:04,933 new_out: defaultdict(<class 'dict'>, {})
DEBUG 2022-02-14 16:38:04,933 ----------------------DONE Prune PHIs-----------------------
DEBUG 2022-02-14 16:38:04,933 block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$2load_global.0'}), (4, {'res': '$tmp04.1'}), (6, {'res': '$dtype6.2'}), (8, {'func': '$2load_global.0', 'args': ['$tmp04.1', '$dtype6.2'], 'res': '$8call_function.3'}), (10, {'retval': '$8call_function.3', 'castval': '$10return_value.4'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG 2022-02-14 16:38:04,933 label 0:
    tmp0 = arg(0, name=tmp0)                 ['tmp0']
    dtype = arg(1, name=dtype)               ['dtype']
    $2load_global.0 = global(intrin: <intrinsic stub>) ['$2load_global.0']
    $8call_function.3 = call $2load_global.0(tmp0, dtype, func=$2load_global.0, args=[Var(tmp0, <string>:3), Var(dtype, <string>:3)], kws=(), vararg=None, target=None) ['$2load_global.0', '$8call_function.3', 'dtype', 'tmp0']
    $10return_value.4 = cast(value=$8call_function.3) ['$10return_value.4', '$8call_function.3']
    return $10return_value.4                 ['$10return_value.4']

DEBUG 2022-02-14 16:38:04,934 ==== SSA block analysis pass on 0
DEBUG 2022-02-14 16:38:04,934 Running <numba.core.ssa._GatherDefsHandler object at 0x7fa04648a850>
DEBUG 2022-02-14 16:38:04,934 on stmt: tmp0 = arg(0, name=tmp0)
DEBUG 2022-02-14 16:38:04,934 on stmt: dtype = arg(1, name=dtype)
DEBUG 2022-02-14 16:38:04,934 on stmt: $2load_global.0 = global(intrin: <intrinsic stub>)
DEBUG 2022-02-14 16:38:04,934 on stmt: $8call_function.3 = call $2load_global.0(tmp0, dtype, func=$2load_global.0, args=[Var(tmp0, <string>:3), Var(dtype, <string>:3)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:04,935 on stmt: $10return_value.4 = cast(value=$8call_function.3)
DEBUG 2022-02-14 16:38:04,935 on stmt: return $10return_value.4
DEBUG 2022-02-14 16:38:04,935 defs defaultdict(<class 'list'>,
            {'$10return_value.4': [<numba.core.ir.Assign object at 0x7fa0464bd700>],
             '$2load_global.0': [<numba.core.ir.Assign object at 0x7fa0464bd1c0>],
             '$8call_function.3': [<numba.core.ir.Assign object at 0x7fa0464bd5e0>],
             'dtype': [<numba.core.ir.Assign object at 0x7fa04648a1f0>],
             'tmp0': [<numba.core.ir.Assign object at 0x7fa04648a190>]})
DEBUG 2022-02-14 16:38:04,935 SSA violators set()
DEBUG 2022-02-14 16:38:04,997 bytecode dump:
>          0	NOP(arg=None, lineno=2)
           2	LOAD_FAST(arg=2, lineno=2)
           4	LOAD_CONST(arg=1, lineno=2)
           6	BINARY_SUBSCR(arg=None, lineno=2)
           8	STORE_FAST(arg=3, lineno=2)
          10	LOAD_GLOBAL(arg=0, lineno=3)
          12	LOAD_FAST(arg=0, lineno=3)
          14	LOAD_CONST(arg=1, lineno=3)
          16	BINARY_SUBSCR(arg=None, lineno=3)
          18	LOAD_FAST(arg=0, lineno=3)
          20	LOAD_CONST(arg=2, lineno=3)
          22	BINARY_SUBSCR(arg=None, lineno=3)
          24	LOAD_GLOBAL(arg=1, lineno=3)
          26	LOAD_METHOD(arg=2, lineno=3)
          28	LOAD_CONST(arg=2, lineno=3)
          30	CALL_METHOD(arg=1, lineno=3)
          32	BINARY_ADD(arg=None, lineno=3)
          34	CALL_FUNCTION(arg=2, lineno=3)
          36	GET_ITER(arg=None, lineno=3)
>         38	FOR_ITER(arg=8, lineno=3)
          40	STORE_FAST(arg=4, lineno=3)
          42	LOAD_CONST(arg=1, lineno=4)
          44	STORE_FAST(arg=5, lineno=4)
          46	JUMP_ABSOLUTE(arg=38, lineno=4)
>         48	LOAD_FAST(arg=3, lineno=5)
          50	LOAD_FAST(arg=2, lineno=5)
          52	LOAD_CONST(arg=1, lineno=5)
          54	STORE_SUBSCR(arg=None, lineno=5)
          56	LOAD_CONST(arg=0, lineno=6)
          58	RETURN_VALUE(arg=None, lineno=6)
DEBUG 2022-02-14 16:38:04,997 pending: deque([State(pc_initial=0 nstack_initial=0)])
DEBUG 2022-02-14 16:38:04,997 stack: []
DEBUG 2022-02-14 16:38:04,997 dispatch pc=0, inst=NOP(arg=None, lineno=2)
DEBUG 2022-02-14 16:38:04,997 stack []
DEBUG 2022-02-14 16:38:04,997 dispatch pc=2, inst=LOAD_FAST(arg=2, lineno=2)
DEBUG 2022-02-14 16:38:04,997 stack []
DEBUG 2022-02-14 16:38:04,997 dispatch pc=4, inst=LOAD_CONST(arg=1, lineno=2)
DEBUG 2022-02-14 16:38:04,997 stack ['$val_40__arr2.0']
DEBUG 2022-02-14 16:38:04,997 dispatch pc=6, inst=BINARY_SUBSCR(arg=None, lineno=2)
DEBUG 2022-02-14 16:38:04,997 stack ['$val_40__arr2.0', '$const4.1']
DEBUG 2022-02-14 16:38:04,997 dispatch pc=8, inst=STORE_FAST(arg=3, lineno=2)
DEBUG 2022-02-14 16:38:04,998 stack ['$6binary_subscr.2']
DEBUG 2022-02-14 16:38:04,998 dispatch pc=10, inst=LOAD_GLOBAL(arg=0, lineno=3)
DEBUG 2022-02-14 16:38:04,998 stack []
DEBUG 2022-02-14 16:38:04,998 dispatch pc=12, inst=LOAD_FAST(arg=0, lineno=3)
DEBUG 2022-02-14 16:38:04,998 stack ['$10load_global.3']
DEBUG 2022-02-14 16:38:04,998 dispatch pc=14, inst=LOAD_CONST(arg=1, lineno=3)
DEBUG 2022-02-14 16:38:04,998 stack ['$10load_global.3', '$sched12.4']
DEBUG 2022-02-14 16:38:04,998 dispatch pc=16, inst=BINARY_SUBSCR(arg=None, lineno=3)
DEBUG 2022-02-14 16:38:04,998 stack ['$10load_global.3', '$sched12.4', '$const14.5']
DEBUG 2022-02-14 16:38:04,998 dispatch pc=18, inst=LOAD_FAST(arg=0, lineno=3)
DEBUG 2022-02-14 16:38:04,998 stack ['$10load_global.3', '$16binary_subscr.6']
DEBUG 2022-02-14 16:38:04,998 dispatch pc=20, inst=LOAD_CONST(arg=2, lineno=3)
DEBUG 2022-02-14 16:38:04,998 stack ['$10load_global.3', '$16binary_subscr.6', '$sched18.7']
DEBUG 2022-02-14 16:38:04,998 dispatch pc=22, inst=BINARY_SUBSCR(arg=None, lineno=3)
DEBUG 2022-02-14 16:38:04,998 stack ['$10load_global.3', '$16binary_subscr.6', '$sched18.7', '$const20.8']
DEBUG 2022-02-14 16:38:04,998 dispatch pc=24, inst=LOAD_GLOBAL(arg=1, lineno=3)
DEBUG 2022-02-14 16:38:04,998 stack ['$10load_global.3', '$16binary_subscr.6', '$22binary_subscr.9']
DEBUG 2022-02-14 16:38:04,998 dispatch pc=26, inst=LOAD_METHOD(arg=2, lineno=3)
DEBUG 2022-02-14 16:38:04,998 stack ['$10load_global.3', '$16binary_subscr.6', '$22binary_subscr.9', '$24load_global.10']
DEBUG 2022-02-14 16:38:04,998 dispatch pc=28, inst=LOAD_CONST(arg=2, lineno=3)
DEBUG 2022-02-14 16:38:04,998 stack ['$10load_global.3', '$16binary_subscr.6', '$22binary_subscr.9', '$26load_method.11']
DEBUG 2022-02-14 16:38:04,998 dispatch pc=30, inst=CALL_METHOD(arg=1, lineno=3)
DEBUG 2022-02-14 16:38:04,998 stack ['$10load_global.3', '$16binary_subscr.6', '$22binary_subscr.9', '$26load_method.11', '$const28.12']
DEBUG 2022-02-14 16:38:04,998 dispatch pc=32, inst=BINARY_ADD(arg=None, lineno=3)
DEBUG 2022-02-14 16:38:04,998 stack ['$10load_global.3', '$16binary_subscr.6', '$22binary_subscr.9', '$30call_method.13']
DEBUG 2022-02-14 16:38:04,999 dispatch pc=34, inst=CALL_FUNCTION(arg=2, lineno=3)
DEBUG 2022-02-14 16:38:04,999 stack ['$10load_global.3', '$16binary_subscr.6', '$32binary_add.14']
DEBUG 2022-02-14 16:38:04,999 dispatch pc=36, inst=GET_ITER(arg=None, lineno=3)
DEBUG 2022-02-14 16:38:04,999 stack ['$34call_function.15']
DEBUG 2022-02-14 16:38:04,999 end state. edges=[Edge(pc=38, stack=('$36get_iter.16',), blockstack=(), npush=0)]
DEBUG 2022-02-14 16:38:04,999 pending: deque([State(pc_initial=38 nstack_initial=1)])
DEBUG 2022-02-14 16:38:04,999 stack: ['$phi38.0']
DEBUG 2022-02-14 16:38:04,999 dispatch pc=38, inst=FOR_ITER(arg=8, lineno=3)
DEBUG 2022-02-14 16:38:04,999 stack ['$phi38.0']
DEBUG 2022-02-14 16:38:04,999 end state. edges=[Edge(pc=48, stack=(), blockstack=(), npush=0), Edge(pc=40, stack=('$phi38.0', '$38for_iter.2'), blockstack=(), npush=0)]
DEBUG 2022-02-14 16:38:04,999 pending: deque([State(pc_initial=48 nstack_initial=0), State(pc_initial=40 nstack_initial=2)])
DEBUG 2022-02-14 16:38:04,999 stack: []
DEBUG 2022-02-14 16:38:04,999 dispatch pc=48, inst=LOAD_FAST(arg=3, lineno=5)
DEBUG 2022-02-14 16:38:04,999 stack []
DEBUG 2022-02-14 16:38:04,999 dispatch pc=50, inst=LOAD_FAST(arg=2, lineno=5)
DEBUG 2022-02-14 16:38:04,999 stack ['$val_4048.0']
DEBUG 2022-02-14 16:38:04,999 dispatch pc=52, inst=LOAD_CONST(arg=1, lineno=5)
DEBUG 2022-02-14 16:38:04,999 stack ['$val_4048.0', '$val_40__arr50.1']
DEBUG 2022-02-14 16:38:04,999 dispatch pc=54, inst=STORE_SUBSCR(arg=None, lineno=5)
DEBUG 2022-02-14 16:38:04,999 stack ['$val_4048.0', '$val_40__arr50.1', '$const52.2']
DEBUG 2022-02-14 16:38:04,999 dispatch pc=56, inst=LOAD_CONST(arg=0, lineno=6)
DEBUG 2022-02-14 16:38:04,999 stack []
DEBUG 2022-02-14 16:38:04,999 dispatch pc=58, inst=RETURN_VALUE(arg=None, lineno=6)
DEBUG 2022-02-14 16:38:04,999 stack ['$const56.3']
DEBUG 2022-02-14 16:38:05,000 end state. edges=[]
DEBUG 2022-02-14 16:38:05,000 pending: deque([State(pc_initial=40 nstack_initial=2)])
DEBUG 2022-02-14 16:38:05,000 stack: ['$phi40.0', '$phi40.1']
DEBUG 2022-02-14 16:38:05,000 dispatch pc=40, inst=STORE_FAST(arg=4, lineno=3)
DEBUG 2022-02-14 16:38:05,000 stack ['$phi40.0', '$phi40.1']
DEBUG 2022-02-14 16:38:05,000 dispatch pc=42, inst=LOAD_CONST(arg=1, lineno=4)
DEBUG 2022-02-14 16:38:05,000 stack ['$phi40.0']
DEBUG 2022-02-14 16:38:05,000 dispatch pc=44, inst=STORE_FAST(arg=5, lineno=4)
DEBUG 2022-02-14 16:38:05,000 stack ['$phi40.0', '$const42.2']
DEBUG 2022-02-14 16:38:05,000 dispatch pc=46, inst=JUMP_ABSOLUTE(arg=38, lineno=4)
DEBUG 2022-02-14 16:38:05,000 stack ['$phi40.0']
DEBUG 2022-02-14 16:38:05,000 end state. edges=[Edge(pc=38, stack=('$phi40.0',), blockstack=(), npush=0)]
DEBUG 2022-02-14 16:38:05,000 pending: deque([State(pc_initial=38 nstack_initial=1)])
DEBUG 2022-02-14 16:38:05,000 -------------------------Prune PHIs-------------------------
DEBUG 2022-02-14 16:38:05,000 Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=38 nstack_initial=1): {'$phi38.0'},
             State(pc_initial=40 nstack_initial=2): {'$phi40.1'},
             State(pc_initial=48 nstack_initial=0): set()})
DEBUG 2022-02-14 16:38:05,000 defmap: {'$phi38.0': State(pc_initial=0 nstack_initial=0),
 '$phi40.1': State(pc_initial=38 nstack_initial=1)}
DEBUG 2022-02-14 16:38:05,000 phismap: defaultdict(<class 'set'>,
            {'$phi38.0': {('$36get_iter.16',
                           State(pc_initial=0 nstack_initial=0)),
                          ('$phi40.0', State(pc_initial=40 nstack_initial=2))},
             '$phi40.0': {('$phi38.0', State(pc_initial=38 nstack_initial=1))},
             '$phi40.1': {('$38for_iter.2',
                           State(pc_initial=38 nstack_initial=1))}})
DEBUG 2022-02-14 16:38:05,001 changing phismap: defaultdict(<class 'set'>,
            {'$phi38.0': {('$36get_iter.16',
                           State(pc_initial=0 nstack_initial=0)),
                          ('$phi38.0', State(pc_initial=38 nstack_initial=1))},
             '$phi40.0': {('$36get_iter.16',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi40.1': {('$38for_iter.2',
                           State(pc_initial=38 nstack_initial=1))}})
DEBUG 2022-02-14 16:38:05,001 changing phismap: defaultdict(<class 'set'>,
            {'$phi38.0': {('$36get_iter.16',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi40.0': {('$36get_iter.16',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi40.1': {('$38for_iter.2',
                           State(pc_initial=38 nstack_initial=1))}})
DEBUG 2022-02-14 16:38:05,001 changing phismap: defaultdict(<class 'set'>,
            {'$phi38.0': {('$36get_iter.16',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi40.0': {('$36get_iter.16',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi40.1': {('$38for_iter.2',
                           State(pc_initial=38 nstack_initial=1))}})
DEBUG 2022-02-14 16:38:05,001 keep phismap: {'$phi38.0': {('$36get_iter.16', State(pc_initial=0 nstack_initial=0))},
 '$phi40.1': {('$38for_iter.2', State(pc_initial=38 nstack_initial=1))}}
DEBUG 2022-02-14 16:38:05,001 new_out: defaultdict(<class 'dict'>,
            {State(pc_initial=0 nstack_initial=0): {'$phi38.0': '$36get_iter.16'},
             State(pc_initial=38 nstack_initial=1): {'$phi40.1': '$38for_iter.2'}})
DEBUG 2022-02-14 16:38:05,001 ----------------------DONE Prune PHIs-----------------------
DEBUG 2022-02-14 16:38:05,001 block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$val_40__arr2.0'}), (4, {'res': '$const4.1'}), (6, {'index': '$const4.1', 'target': '$val_40__arr2.0', 'res': '$6binary_subscr.2'}), (8, {'value': '$6binary_subscr.2'}), (10, {'res': '$10load_global.3'}), (12, {'res': '$sched12.4'}), (14, {'res': '$const14.5'}), (16, {'index': '$const14.5', 'target': '$sched12.4', 'res': '$16binary_subscr.6'}), (18, {'res': '$sched18.7'}), (20, {'res': '$const20.8'}), (22, {'index': '$const20.8', 'target': '$sched18.7', 'res': '$22binary_subscr.9'}), (24, {'res': '$24load_global.10'}), (26, {'item': '$24load_global.10', 'res': '$26load_method.11'}), (28, {'res': '$const28.12'}), (30, {'func': '$26load_method.11', 'args': ['$const28.12'], 'res': '$30call_method.13'}), (32, {'lhs': '$22binary_subscr.9', 'rhs': '$30call_method.13', 'res': '$32binary_add.14'}), (34, {'func': '$10load_global.3', 'args': ['$16binary_subscr.6', '$32binary_add.14'], 'res': '$34call_function.15'}), (36, {'value': '$34call_function.15', 'res': '$36get_iter.16'})), outgoing_phis={'$phi38.0': '$36get_iter.16'}, blockstack=(), active_try_block=None, outgoing_edgepushed={38: ('$36get_iter.16',)})
DEBUG 2022-02-14 16:38:05,001 block_infos State(pc_initial=38 nstack_initial=1):
AdaptBlockInfo(insts=((38, {'iterator': '$phi38.0', 'pair': '$38for_iter.1', 'indval': '$38for_iter.2', 'pred': '$38for_iter.3'}),), outgoing_phis={'$phi40.1': '$38for_iter.2'}, blockstack=(), active_try_block=None, outgoing_edgepushed={48: (), 40: ('$phi38.0', '$38for_iter.2')})
DEBUG 2022-02-14 16:38:05,002 block_infos State(pc_initial=40 nstack_initial=2):
AdaptBlockInfo(insts=((40, {'value': '$phi40.1'}), (42, {'res': '$const42.2'}), (44, {'value': '$const42.2'}), (46, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={38: ('$phi40.0',)})
DEBUG 2022-02-14 16:38:05,002 block_infos State(pc_initial=48 nstack_initial=0):
AdaptBlockInfo(insts=((48, {'res': '$val_4048.0'}), (50, {'res': '$val_40__arr50.1'}), (52, {'res': '$const52.2'}), (54, {'target': '$val_40__arr50.1', 'index': '$const52.2', 'value': '$val_4048.0'}), (56, {'res': '$const56.3'}), (58, {'retval': '$const56.3', 'castval': '$58return_value.4'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG 2022-02-14 16:38:05,002 label 0:
    sched = arg(0, name=sched)               ['sched']
    fixed__edge__reps = arg(1, name=fixed__edge__reps) ['fixed__edge__reps']
    val_40__arr = arg(2, name=val_40__arr)   ['val_40__arr']
    $const4.1 = const(int, 0)                ['$const4.1']
    val_40 = getitem(value=val_40__arr, index=$const4.1, fn=<built-in function getitem>) ['$const4.1', 'val_40', 'val_40__arr']
    $10load_global.3 = global(range: <class 'range'>) ['$10load_global.3']
    $const14.5 = const(int, 0)               ['$const14.5']
    $16binary_subscr.6 = getitem(value=sched, index=$const14.5, fn=<built-in function getitem>) ['$16binary_subscr.6', '$const14.5', 'sched']
    $const20.8 = const(int, 1)               ['$const20.8']
    $22binary_subscr.9 = getitem(value=sched, index=$const20.8, fn=<built-in function getitem>) ['$22binary_subscr.9', '$const20.8', 'sched']
    $24load_global.10 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>) ['$24load_global.10']
    $26load_method.11 = getattr(value=$24load_global.10, attr=uint8) ['$24load_global.10', '$26load_method.11']
    $const28.12 = const(int, 1)              ['$const28.12']
    $30call_method.13 = call $26load_method.11($const28.12, func=$26load_method.11, args=[Var($const28.12, <string>:3)], kws=(), vararg=None, target=None) ['$26load_method.11', '$30call_method.13', '$const28.12']
    $32binary_add.14 = $22binary_subscr.9 + $30call_method.13 ['$22binary_subscr.9', '$30call_method.13', '$32binary_add.14']
    $34call_function.15 = call $10load_global.3($16binary_subscr.6, $32binary_add.14, func=$10load_global.3, args=[Var($16binary_subscr.6, <string>:3), Var($32binary_add.14, <string>:3)], kws=(), vararg=None, target=None) ['$10load_global.3', '$16binary_subscr.6', '$32binary_add.14', '$34call_function.15']
    $36get_iter.16 = getiter(value=$34call_function.15) ['$34call_function.15', '$36get_iter.16']
    $phi38.0 = $36get_iter.16                ['$36get_iter.16', '$phi38.0']
    jump 38                                  []
label 38:
    $38for_iter.1 = iternext(value=$phi38.0) ['$38for_iter.1', '$phi38.0']
    $38for_iter.2 = pair_first(value=$38for_iter.1) ['$38for_iter.1', '$38for_iter.2']
    $38for_iter.3 = pair_second(value=$38for_iter.1) ['$38for_iter.1', '$38for_iter.3']
    $phi40.1 = $38for_iter.2                 ['$38for_iter.2', '$phi40.1']
    branch $38for_iter.3, 40, 48             ['$38for_iter.3']
label 40:
    parfor__index_224 = $phi40.1             ['$phi40.1', 'parfor__index_224']
    __sentinel__0 = const(int, 0)            ['__sentinel__0']
    jump 38                                  []
label 48:
    $const52.2 = const(int, 0)               ['$const52.2']
    val_40__arr[$const52.2] = val_40         ['$const52.2', 'val_40', 'val_40__arr']
    $const56.3 = const(NoneType, None)       ['$const56.3']
    $58return_value.4 = cast(value=$const56.3) ['$58return_value.4', '$const56.3']
    return $58return_value.4                 ['$58return_value.4']

DEBUG 2022-02-14 16:38:05,007 ==== SSA block analysis pass on 0
DEBUG 2022-02-14 16:38:05,007 Running <numba.core.ssa._GatherDefsHandler object at 0x7fa046464340>
DEBUG 2022-02-14 16:38:05,007 on stmt: sched.645 = arg(0, name=sched)
DEBUG 2022-02-14 16:38:05,007 on stmt: fixed__edge__reps = arg(1, name=fixed__edge__reps)
DEBUG 2022-02-14 16:38:05,007 on stmt: val_40__arr = arg(2, name=val_40__arr)
DEBUG 2022-02-14 16:38:05,008 on stmt: $const4.1.646 = const(int, 0)
DEBUG 2022-02-14 16:38:05,008 on stmt: val_40 = getitem(value=val_40__arr, index=$const4.1.646, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:05,008 on stmt: $10load_global.3.647 = global(range: <class 'range'>)
DEBUG 2022-02-14 16:38:05,008 on stmt: $const14.5.648 = const(int, 0)
DEBUG 2022-02-14 16:38:05,008 on stmt: $16binary_subscr.6.649 = getitem(value=sched.645, index=$const14.5.648, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:05,008 on stmt: $const20.8.650 = const(int, 1)
DEBUG 2022-02-14 16:38:05,008 on stmt: $22binary_subscr.9.651 = getitem(value=sched.645, index=$const20.8.650, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:05,008 on stmt: $24load_global.10.652 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:38:05,008 on stmt: $26load_method.11.653 = getattr(value=$24load_global.10.652, attr=uint8)
DEBUG 2022-02-14 16:38:05,008 on stmt: $const28.12.654 = const(int, 1)
DEBUG 2022-02-14 16:38:05,008 on stmt: $30call_method.13.655 = call $26load_method.11.653($const28.12.654, func=$26load_method.11.653, args=[Var($const28.12.654, <string>:3)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:05,008 on stmt: $32binary_add.14.656 = $22binary_subscr.9.651 + $30call_method.13.655
DEBUG 2022-02-14 16:38:05,008 on stmt: $34call_function.15.657 = call $10load_global.3.647($16binary_subscr.6.649, $32binary_add.14.656, func=$10load_global.3.647, args=[Var($16binary_subscr.6.649, <string>:3), Var($32binary_add.14.656, <string>:3)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:05,008 on stmt: $36get_iter.16.658 = getiter(value=$34call_function.15.657)
DEBUG 2022-02-14 16:38:05,008 on stmt: $phi38.0.659 = $36get_iter.16.658
DEBUG 2022-02-14 16:38:05,008 on stmt: jump 38
DEBUG 2022-02-14 16:38:05,008 ==== SSA block analysis pass on 38
DEBUG 2022-02-14 16:38:05,008 Running <numba.core.ssa._GatherDefsHandler object at 0x7fa046464340>
DEBUG 2022-02-14 16:38:05,008 on stmt: $38for_iter.1.660 = iternext(value=$phi38.0.659)
DEBUG 2022-02-14 16:38:05,008 on stmt: $38for_iter.2.661 = pair_first(value=$38for_iter.1.660)
DEBUG 2022-02-14 16:38:05,008 on stmt: $38for_iter.3.662 = pair_second(value=$38for_iter.1.660)
DEBUG 2022-02-14 16:38:05,008 on stmt: $phi40.1.663 = $38for_iter.2.661
DEBUG 2022-02-14 16:38:05,009 on stmt: branch $38for_iter.3.662, 40, 212
DEBUG 2022-02-14 16:38:05,009 ==== SSA block analysis pass on 40
DEBUG 2022-02-14 16:38:05,009 Running <numba.core.ssa._GatherDefsHandler object at 0x7fa046464340>
DEBUG 2022-02-14 16:38:05,009 on stmt: parfor__index_224 = $phi40.1.663
DEBUG 2022-02-14 16:38:05,009 on stmt: jump 48
DEBUG 2022-02-14 16:38:05,009 ==== SSA block analysis pass on 212
DEBUG 2022-02-14 16:38:05,009 Running <numba.core.ssa._GatherDefsHandler object at 0x7fa046464340>
DEBUG 2022-02-14 16:38:05,009 on stmt: $const52.2.664 = const(int, 0)
DEBUG 2022-02-14 16:38:05,009 on stmt: val_40__arr[$const52.2.664] = val_40
DEBUG 2022-02-14 16:38:05,009 on stmt: $const56.3.665 = const(NoneType, None)
DEBUG 2022-02-14 16:38:05,009 on stmt: $58return_value.4.666 = cast(value=$const56.3.665)
DEBUG 2022-02-14 16:38:05,009 on stmt: return $58return_value.4.666
DEBUG 2022-02-14 16:38:05,009 ==== SSA block analysis pass on 48
DEBUG 2022-02-14 16:38:05,009 Running <numba.core.ssa._GatherDefsHandler object at 0x7fa046464340>
DEBUG 2022-02-14 16:38:05,009 on stmt: $46binary_subscr.5.59 = getitem(value=fixed__edge__reps, index=parfor__index_224, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:05,009 on stmt: $val.40.598 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=val_40, rhs=$46binary_subscr.5.59, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:38:05,009 on stmt: val_40 = $val.40.598
DEBUG 2022-02-14 16:38:05,009 on stmt: jump 211
DEBUG 2022-02-14 16:38:05,009 ==== SSA block analysis pass on 211
DEBUG 2022-02-14 16:38:05,009 Running <numba.core.ssa._GatherDefsHandler object at 0x7fa046464340>
DEBUG 2022-02-14 16:38:05,009 on stmt: jump 38
DEBUG 2022-02-14 16:38:05,010 defs defaultdict(<class 'list'>,
            {'$10load_global.3.647': [<numba.core.ir.Assign object at 0x7fa047354640>],
             '$16binary_subscr.6.649': [<numba.core.ir.Assign object at 0x7fa047354a90>],
             '$22binary_subscr.9.651': [<numba.core.ir.Assign object at 0x7fa047354eb0>],
             '$24load_global.10.652': [<numba.core.ir.Assign object at 0x7fa04736b040>],
             '$26load_method.11.653': [<numba.core.ir.Assign object at 0x7fa04736b1c0>],
             '$30call_method.13.655': [<numba.core.ir.Assign object at 0x7fa04736b550>],
             '$32binary_add.14.656': [<numba.core.ir.Assign object at 0x7fa04736b670>],
             '$34call_function.15.657': [<numba.core.ir.Assign object at 0x7fa04736b820>],
             '$36get_iter.16.658': [<numba.core.ir.Assign object at 0x7fa04736b940>],
             '$38for_iter.1.660': [<numba.core.ir.Assign object at 0x7fa04736bb50>],
             '$38for_iter.2.661': [<numba.core.ir.Assign object at 0x7fa04736bc70>],
             '$38for_iter.3.662': [<numba.core.ir.Assign object at 0x7fa04736bd90>],
             '$46binary_subscr.5.59': [<numba.core.ir.Assign object at 0x7fa046a463a0>],
             '$58return_value.4.666': [<numba.core.ir.Assign object at 0x7fa047360be0>],
             '$const14.5.648': [<numba.core.ir.Assign object at 0x7fa0473548e0>],
             '$const20.8.650': [<numba.core.ir.Assign object at 0x7fa047354d00>],
             '$const28.12.654': [<numba.core.ir.Assign object at 0x7fa04736b340>],
             '$const4.1.646': [<numba.core.ir.Assign object at 0x7fa047354280>],
             '$const52.2.664': [<numba.core.ir.Assign object at 0x7fa047360820>],
             '$const56.3.665': [<numba.core.ir.Assign object at 0x7fa047360a60>],
             '$phi38.0.659': [<numba.core.ir.Assign object at 0x7fa047354430>],
             '$phi40.1.663': [<numba.core.ir.Assign object at 0x7fa04736ba90>],
             '$val.40.598': [<numba.core.ir.Assign object at 0x7fa047098310>],
             'fixed__edge__reps': [<numba.core.ir.Assign object at 0x7fa047124790>],
             'parfor__index_224': [<numba.core.ir.Assign object at 0x7fa0473600a0>],
             'sched.645': [<numba.core.ir.Assign object at 0x7fa04737e820>],
             'val_40': [<numba.core.ir.Assign object at 0x7fa0473540d0>,
                        <numba.core.ir.Assign object at 0x7fa047098130>],
             'val_40__arr': [<numba.core.ir.Assign object at 0x7fa04663df10>]})
DEBUG 2022-02-14 16:38:05,010 SSA violators {'val_40'}
DEBUG 2022-02-14 16:38:05,010 Fix SSA violator on var val_40
DEBUG 2022-02-14 16:38:05,010 ==== SSA block rewrite pass on 0
DEBUG 2022-02-14 16:38:05,010 Running <numba.core.ssa._FreshVarHandler object at 0x7fa0464645b0>
DEBUG 2022-02-14 16:38:05,010 on stmt: sched.645 = arg(0, name=sched)
DEBUG 2022-02-14 16:38:05,010 on stmt: fixed__edge__reps = arg(1, name=fixed__edge__reps)
DEBUG 2022-02-14 16:38:05,010 on stmt: val_40__arr = arg(2, name=val_40__arr)
DEBUG 2022-02-14 16:38:05,010 on stmt: $const4.1.646 = const(int, 0)
DEBUG 2022-02-14 16:38:05,010 on stmt: val_40 = getitem(value=val_40__arr, index=$const4.1.646, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:05,010 first assign: val_40
DEBUG 2022-02-14 16:38:05,010 replaced with: val_40 = getitem(value=val_40__arr, index=$const4.1.646, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:05,010 on stmt: $10load_global.3.647 = global(range: <class 'range'>)
DEBUG 2022-02-14 16:38:05,010 on stmt: $const14.5.648 = const(int, 0)
DEBUG 2022-02-14 16:38:05,010 on stmt: $16binary_subscr.6.649 = getitem(value=sched.645, index=$const14.5.648, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:05,010 on stmt: $const20.8.650 = const(int, 1)
DEBUG 2022-02-14 16:38:05,010 on stmt: $22binary_subscr.9.651 = getitem(value=sched.645, index=$const20.8.650, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:05,010 on stmt: $24load_global.10.652 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:38:05,010 on stmt: $26load_method.11.653 = getattr(value=$24load_global.10.652, attr=uint8)
DEBUG 2022-02-14 16:38:05,010 on stmt: $const28.12.654 = const(int, 1)
DEBUG 2022-02-14 16:38:05,010 on stmt: $30call_method.13.655 = call $26load_method.11.653($const28.12.654, func=$26load_method.11.653, args=[Var($const28.12.654, <string>:3)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:05,011 on stmt: $32binary_add.14.656 = $22binary_subscr.9.651 + $30call_method.13.655
DEBUG 2022-02-14 16:38:05,011 on stmt: $34call_function.15.657 = call $10load_global.3.647($16binary_subscr.6.649, $32binary_add.14.656, func=$10load_global.3.647, args=[Var($16binary_subscr.6.649, <string>:3), Var($32binary_add.14.656, <string>:3)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:05,011 on stmt: $36get_iter.16.658 = getiter(value=$34call_function.15.657)
DEBUG 2022-02-14 16:38:05,011 on stmt: $phi38.0.659 = $36get_iter.16.658
DEBUG 2022-02-14 16:38:05,011 on stmt: jump 38
DEBUG 2022-02-14 16:38:05,011 ==== SSA block rewrite pass on 38
DEBUG 2022-02-14 16:38:05,011 Running <numba.core.ssa._FreshVarHandler object at 0x7fa0464645b0>
DEBUG 2022-02-14 16:38:05,011 on stmt: $38for_iter.1.660 = iternext(value=$phi38.0.659)
DEBUG 2022-02-14 16:38:05,011 on stmt: $38for_iter.2.661 = pair_first(value=$38for_iter.1.660)
DEBUG 2022-02-14 16:38:05,011 on stmt: $38for_iter.3.662 = pair_second(value=$38for_iter.1.660)
DEBUG 2022-02-14 16:38:05,011 on stmt: $phi40.1.663 = $38for_iter.2.661
DEBUG 2022-02-14 16:38:05,011 on stmt: branch $38for_iter.3.662, 40, 212
DEBUG 2022-02-14 16:38:05,011 ==== SSA block rewrite pass on 40
DEBUG 2022-02-14 16:38:05,011 Running <numba.core.ssa._FreshVarHandler object at 0x7fa0464645b0>
DEBUG 2022-02-14 16:38:05,011 on stmt: parfor__index_224 = $phi40.1.663
DEBUG 2022-02-14 16:38:05,011 on stmt: jump 48
DEBUG 2022-02-14 16:38:05,011 ==== SSA block rewrite pass on 212
DEBUG 2022-02-14 16:38:05,011 Running <numba.core.ssa._FreshVarHandler object at 0x7fa0464645b0>
DEBUG 2022-02-14 16:38:05,011 on stmt: $const52.2.664 = const(int, 0)
DEBUG 2022-02-14 16:38:05,011 on stmt: val_40__arr[$const52.2.664] = val_40
DEBUG 2022-02-14 16:38:05,011 on stmt: $const56.3.665 = const(NoneType, None)
DEBUG 2022-02-14 16:38:05,011 on stmt: $58return_value.4.666 = cast(value=$const56.3.665)
DEBUG 2022-02-14 16:38:05,012 on stmt: return $58return_value.4.666
DEBUG 2022-02-14 16:38:05,012 ==== SSA block rewrite pass on 48
DEBUG 2022-02-14 16:38:05,012 Running <numba.core.ssa._FreshVarHandler object at 0x7fa0464645b0>
DEBUG 2022-02-14 16:38:05,012 on stmt: $46binary_subscr.5.59 = getitem(value=fixed__edge__reps, index=parfor__index_224, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:05,012 on stmt: $val.40.598 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=val_40, rhs=$46binary_subscr.5.59, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:38:05,012 on stmt: val_40 = $val.40.598
DEBUG 2022-02-14 16:38:05,012 replaced with: val_40.1 = $val.40.598
DEBUG 2022-02-14 16:38:05,012 on stmt: jump 211
DEBUG 2022-02-14 16:38:05,012 ==== SSA block rewrite pass on 211
DEBUG 2022-02-14 16:38:05,012 Running <numba.core.ssa._FreshVarHandler object at 0x7fa0464645b0>
DEBUG 2022-02-14 16:38:05,012 on stmt: jump 38
DEBUG 2022-02-14 16:38:05,012 Replaced assignments: defaultdict(<class 'list'>,
            {0: [<numba.core.ir.Assign object at 0x7fa046464df0>],
             48: [<numba.core.ir.Assign object at 0x7fa046464670>]})
DEBUG 2022-02-14 16:38:05,012 ==== SSA block rewrite pass on 0
DEBUG 2022-02-14 16:38:05,012 Running <numba.core.ssa._FixSSAVars object at 0x7fa0464645b0>
DEBUG 2022-02-14 16:38:05,012 on stmt: sched.645 = arg(0, name=sched)
DEBUG 2022-02-14 16:38:05,012 on stmt: fixed__edge__reps = arg(1, name=fixed__edge__reps)
DEBUG 2022-02-14 16:38:05,012 on stmt: val_40__arr = arg(2, name=val_40__arr)
DEBUG 2022-02-14 16:38:05,012 on stmt: $const4.1.646 = const(int, 0)
DEBUG 2022-02-14 16:38:05,012 on stmt: val_40 = getitem(value=val_40__arr, index=$const4.1.646, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:05,012 on stmt: $10load_global.3.647 = global(range: <class 'range'>)
DEBUG 2022-02-14 16:38:05,012 on stmt: $const14.5.648 = const(int, 0)
DEBUG 2022-02-14 16:38:05,012 on stmt: $16binary_subscr.6.649 = getitem(value=sched.645, index=$const14.5.648, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:05,012 on stmt: $const20.8.650 = const(int, 1)
DEBUG 2022-02-14 16:38:05,013 on stmt: $22binary_subscr.9.651 = getitem(value=sched.645, index=$const20.8.650, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:05,013 on stmt: $24load_global.10.652 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:38:05,013 on stmt: $26load_method.11.653 = getattr(value=$24load_global.10.652, attr=uint8)
DEBUG 2022-02-14 16:38:05,013 on stmt: $const28.12.654 = const(int, 1)
DEBUG 2022-02-14 16:38:05,013 on stmt: $30call_method.13.655 = call $26load_method.11.653($const28.12.654, func=$26load_method.11.653, args=[Var($const28.12.654, <string>:3)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:05,013 on stmt: $32binary_add.14.656 = $22binary_subscr.9.651 + $30call_method.13.655
DEBUG 2022-02-14 16:38:05,013 on stmt: $34call_function.15.657 = call $10load_global.3.647($16binary_subscr.6.649, $32binary_add.14.656, func=$10load_global.3.647, args=[Var($16binary_subscr.6.649, <string>:3), Var($32binary_add.14.656, <string>:3)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:05,013 on stmt: $36get_iter.16.658 = getiter(value=$34call_function.15.657)
DEBUG 2022-02-14 16:38:05,013 on stmt: $phi38.0.659 = $36get_iter.16.658
DEBUG 2022-02-14 16:38:05,013 on stmt: jump 38
DEBUG 2022-02-14 16:38:05,013 ==== SSA block rewrite pass on 38
DEBUG 2022-02-14 16:38:05,013 Running <numba.core.ssa._FixSSAVars object at 0x7fa0464645b0>
DEBUG 2022-02-14 16:38:05,013 on stmt: $38for_iter.1.660 = iternext(value=$phi38.0.659)
DEBUG 2022-02-14 16:38:05,013 on stmt: $38for_iter.2.661 = pair_first(value=$38for_iter.1.660)
DEBUG 2022-02-14 16:38:05,013 on stmt: $38for_iter.3.662 = pair_second(value=$38for_iter.1.660)
DEBUG 2022-02-14 16:38:05,013 on stmt: $phi40.1.663 = $38for_iter.2.661
DEBUG 2022-02-14 16:38:05,013 on stmt: branch $38for_iter.3.662, 40, 212
DEBUG 2022-02-14 16:38:05,013 ==== SSA block rewrite pass on 40
DEBUG 2022-02-14 16:38:05,013 Running <numba.core.ssa._FixSSAVars object at 0x7fa0464645b0>
DEBUG 2022-02-14 16:38:05,013 on stmt: parfor__index_224 = $phi40.1.663
DEBUG 2022-02-14 16:38:05,013 on stmt: jump 48
DEBUG 2022-02-14 16:38:05,013 ==== SSA block rewrite pass on 212
DEBUG 2022-02-14 16:38:05,013 Running <numba.core.ssa._FixSSAVars object at 0x7fa0464645b0>
DEBUG 2022-02-14 16:38:05,014 on stmt: $const52.2.664 = const(int, 0)
DEBUG 2022-02-14 16:38:05,014 on stmt: val_40__arr[$const52.2.664] = val_40
DEBUG 2022-02-14 16:38:05,014 find_def var='val_40' stmt=val_40__arr[$const52.2.664] = val_40
DEBUG 2022-02-14 16:38:05,014 find_def_from_top label 212
DEBUG 2022-02-14 16:38:05,014 idom 38 from label 212
DEBUG 2022-02-14 16:38:05,014 find_def_from_bottom label 38
DEBUG 2022-02-14 16:38:05,014 find_def_from_top label 38
DEBUG 2022-02-14 16:38:05,014 insert phi node val_40.2 = phi(incoming_values=[], incoming_blocks=[]) at 38
DEBUG 2022-02-14 16:38:05,014 find_def_from_bottom label 0
DEBUG 2022-02-14 16:38:05,014 incoming_def val_40 = getitem(value=val_40__arr, index=$const4.1.646, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:05,014 find_def_from_bottom label 211
DEBUG 2022-02-14 16:38:05,014 find_def_from_top label 211
DEBUG 2022-02-14 16:38:05,014 idom 48 from label 211
DEBUG 2022-02-14 16:38:05,014 find_def_from_bottom label 48
DEBUG 2022-02-14 16:38:05,014 incoming_def val_40.1 = $val.40.598
DEBUG 2022-02-14 16:38:05,014 replaced with: val_40__arr[$const52.2.664] = val_40.2
DEBUG 2022-02-14 16:38:05,014 on stmt: $const56.3.665 = const(NoneType, None)
DEBUG 2022-02-14 16:38:05,014 on stmt: $58return_value.4.666 = cast(value=$const56.3.665)
DEBUG 2022-02-14 16:38:05,014 on stmt: return $58return_value.4.666
DEBUG 2022-02-14 16:38:05,014 ==== SSA block rewrite pass on 48
DEBUG 2022-02-14 16:38:05,014 Running <numba.core.ssa._FixSSAVars object at 0x7fa0464645b0>
DEBUG 2022-02-14 16:38:05,014 on stmt: $46binary_subscr.5.59 = getitem(value=fixed__edge__reps, index=parfor__index_224, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:05,014 on stmt: $val.40.598 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=val_40, rhs=$46binary_subscr.5.59, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:38:05,014 find_def var='val_40' stmt=$val.40.598 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=val_40, rhs=$46binary_subscr.5.59, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:38:05,014 find_def_from_top label 48
DEBUG 2022-02-14 16:38:05,015 idom 40 from label 48
DEBUG 2022-02-14 16:38:05,015 find_def_from_bottom label 40
DEBUG 2022-02-14 16:38:05,015 find_def_from_top label 40
DEBUG 2022-02-14 16:38:05,015 idom 38 from label 40
DEBUG 2022-02-14 16:38:05,015 find_def_from_bottom label 38
DEBUG 2022-02-14 16:38:05,015 replaced with: $val.40.598 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=val_40.2, rhs=$46binary_subscr.5.59, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:38:05,015 on stmt: val_40.1 = $val.40.598
DEBUG 2022-02-14 16:38:05,015 on stmt: jump 211
DEBUG 2022-02-14 16:38:05,015 ==== SSA block rewrite pass on 211
DEBUG 2022-02-14 16:38:05,015 Running <numba.core.ssa._FixSSAVars object at 0x7fa0464645b0>
DEBUG 2022-02-14 16:38:05,015 on stmt: jump 38
DEBUG 2022-02-14 16:38:05,451 bytecode dump:
>          0	NOP(arg=None, lineno=2)
           2	LOAD_FAST(arg=2, lineno=2)
           4	LOAD_CONST(arg=1, lineno=2)
           6	BINARY_SUBSCR(arg=None, lineno=2)
           8	STORE_FAST(arg=4, lineno=2)
          10	LOAD_FAST(arg=3, lineno=3)
          12	LOAD_CONST(arg=1, lineno=3)
          14	BINARY_SUBSCR(arg=None, lineno=3)
          16	STORE_FAST(arg=5, lineno=3)
          18	LOAD_GLOBAL(arg=0, lineno=4)
          20	LOAD_FAST(arg=0, lineno=4)
          22	LOAD_CONST(arg=1, lineno=4)
          24	BINARY_SUBSCR(arg=None, lineno=4)
          26	LOAD_FAST(arg=0, lineno=4)
          28	LOAD_CONST(arg=2, lineno=4)
          30	BINARY_SUBSCR(arg=None, lineno=4)
          32	LOAD_GLOBAL(arg=1, lineno=4)
          34	LOAD_METHOD(arg=2, lineno=4)
          36	LOAD_CONST(arg=2, lineno=4)
          38	CALL_METHOD(arg=1, lineno=4)
          40	BINARY_ADD(arg=None, lineno=4)
          42	CALL_FUNCTION(arg=2, lineno=4)
          44	GET_ITER(arg=None, lineno=4)
>         46	FOR_ITER(arg=8, lineno=4)
          48	STORE_FAST(arg=6, lineno=4)
          50	LOAD_CONST(arg=1, lineno=5)
          52	STORE_FAST(arg=7, lineno=5)
          54	JUMP_ABSOLUTE(arg=46, lineno=5)
>         56	LOAD_FAST(arg=4, lineno=6)
          58	LOAD_FAST(arg=2, lineno=6)
          60	LOAD_CONST(arg=1, lineno=6)
          62	STORE_SUBSCR(arg=None, lineno=6)
          64	LOAD_FAST(arg=5, lineno=7)
          66	LOAD_FAST(arg=3, lineno=7)
          68	LOAD_CONST(arg=1, lineno=7)
          70	STORE_SUBSCR(arg=None, lineno=7)
          72	LOAD_CONST(arg=0, lineno=8)
          74	RETURN_VALUE(arg=None, lineno=8)
DEBUG 2022-02-14 16:38:05,452 pending: deque([State(pc_initial=0 nstack_initial=0)])
DEBUG 2022-02-14 16:38:05,452 stack: []
DEBUG 2022-02-14 16:38:05,452 dispatch pc=0, inst=NOP(arg=None, lineno=2)
DEBUG 2022-02-14 16:38:05,452 stack []
DEBUG 2022-02-14 16:38:05,452 dispatch pc=2, inst=LOAD_FAST(arg=2, lineno=2)
DEBUG 2022-02-14 16:38:05,452 stack []
DEBUG 2022-02-14 16:38:05,452 dispatch pc=4, inst=LOAD_CONST(arg=1, lineno=2)
DEBUG 2022-02-14 16:38:05,452 stack ['$val_111__arr2.0']
DEBUG 2022-02-14 16:38:05,452 dispatch pc=6, inst=BINARY_SUBSCR(arg=None, lineno=2)
DEBUG 2022-02-14 16:38:05,452 stack ['$val_111__arr2.0', '$const4.1']
DEBUG 2022-02-14 16:38:05,452 dispatch pc=8, inst=STORE_FAST(arg=4, lineno=2)
DEBUG 2022-02-14 16:38:05,452 stack ['$6binary_subscr.2']
DEBUG 2022-02-14 16:38:05,452 dispatch pc=10, inst=LOAD_FAST(arg=3, lineno=3)
DEBUG 2022-02-14 16:38:05,452 stack []
DEBUG 2022-02-14 16:38:05,452 dispatch pc=12, inst=LOAD_CONST(arg=1, lineno=3)
DEBUG 2022-02-14 16:38:05,452 stack ['$val_70__arr10.3']
DEBUG 2022-02-14 16:38:05,452 dispatch pc=14, inst=BINARY_SUBSCR(arg=None, lineno=3)
DEBUG 2022-02-14 16:38:05,452 stack ['$val_70__arr10.3', '$const12.4']
DEBUG 2022-02-14 16:38:05,453 dispatch pc=16, inst=STORE_FAST(arg=5, lineno=3)
DEBUG 2022-02-14 16:38:05,453 stack ['$14binary_subscr.5']
DEBUG 2022-02-14 16:38:05,453 dispatch pc=18, inst=LOAD_GLOBAL(arg=0, lineno=4)
DEBUG 2022-02-14 16:38:05,453 stack []
DEBUG 2022-02-14 16:38:05,453 dispatch pc=20, inst=LOAD_FAST(arg=0, lineno=4)
DEBUG 2022-02-14 16:38:05,453 stack ['$18load_global.6']
DEBUG 2022-02-14 16:38:05,453 dispatch pc=22, inst=LOAD_CONST(arg=1, lineno=4)
DEBUG 2022-02-14 16:38:05,453 stack ['$18load_global.6', '$sched20.7']
DEBUG 2022-02-14 16:38:05,453 dispatch pc=24, inst=BINARY_SUBSCR(arg=None, lineno=4)
DEBUG 2022-02-14 16:38:05,453 stack ['$18load_global.6', '$sched20.7', '$const22.8']
DEBUG 2022-02-14 16:38:05,453 dispatch pc=26, inst=LOAD_FAST(arg=0, lineno=4)
DEBUG 2022-02-14 16:38:05,453 stack ['$18load_global.6', '$24binary_subscr.9']
DEBUG 2022-02-14 16:38:05,453 dispatch pc=28, inst=LOAD_CONST(arg=2, lineno=4)
DEBUG 2022-02-14 16:38:05,453 stack ['$18load_global.6', '$24binary_subscr.9', '$sched26.10']
DEBUG 2022-02-14 16:38:05,453 dispatch pc=30, inst=BINARY_SUBSCR(arg=None, lineno=4)
DEBUG 2022-02-14 16:38:05,453 stack ['$18load_global.6', '$24binary_subscr.9', '$sched26.10', '$const28.11']
DEBUG 2022-02-14 16:38:05,453 dispatch pc=32, inst=LOAD_GLOBAL(arg=1, lineno=4)
DEBUG 2022-02-14 16:38:05,453 stack ['$18load_global.6', '$24binary_subscr.9', '$30binary_subscr.12']
DEBUG 2022-02-14 16:38:05,453 dispatch pc=34, inst=LOAD_METHOD(arg=2, lineno=4)
DEBUG 2022-02-14 16:38:05,453 stack ['$18load_global.6', '$24binary_subscr.9', '$30binary_subscr.12', '$32load_global.13']
DEBUG 2022-02-14 16:38:05,454 dispatch pc=36, inst=LOAD_CONST(arg=2, lineno=4)
DEBUG 2022-02-14 16:38:05,454 stack ['$18load_global.6', '$24binary_subscr.9', '$30binary_subscr.12', '$34load_method.14']
DEBUG 2022-02-14 16:38:05,454 dispatch pc=38, inst=CALL_METHOD(arg=1, lineno=4)
DEBUG 2022-02-14 16:38:05,454 stack ['$18load_global.6', '$24binary_subscr.9', '$30binary_subscr.12', '$34load_method.14', '$const36.15']
DEBUG 2022-02-14 16:38:05,454 dispatch pc=40, inst=BINARY_ADD(arg=None, lineno=4)
DEBUG 2022-02-14 16:38:05,454 stack ['$18load_global.6', '$24binary_subscr.9', '$30binary_subscr.12', '$38call_method.16']
DEBUG 2022-02-14 16:38:05,454 dispatch pc=42, inst=CALL_FUNCTION(arg=2, lineno=4)
DEBUG 2022-02-14 16:38:05,454 stack ['$18load_global.6', '$24binary_subscr.9', '$40binary_add.17']
DEBUG 2022-02-14 16:38:05,454 dispatch pc=44, inst=GET_ITER(arg=None, lineno=4)
DEBUG 2022-02-14 16:38:05,454 stack ['$42call_function.18']
DEBUG 2022-02-14 16:38:05,454 end state. edges=[Edge(pc=46, stack=('$44get_iter.19',), blockstack=(), npush=0)]
DEBUG 2022-02-14 16:38:05,454 pending: deque([State(pc_initial=46 nstack_initial=1)])
DEBUG 2022-02-14 16:38:05,454 stack: ['$phi46.0']
DEBUG 2022-02-14 16:38:05,454 dispatch pc=46, inst=FOR_ITER(arg=8, lineno=4)
DEBUG 2022-02-14 16:38:05,454 stack ['$phi46.0']
DEBUG 2022-02-14 16:38:05,454 end state. edges=[Edge(pc=56, stack=(), blockstack=(), npush=0), Edge(pc=48, stack=('$phi46.0', '$46for_iter.2'), blockstack=(), npush=0)]
DEBUG 2022-02-14 16:38:05,454 pending: deque([State(pc_initial=56 nstack_initial=0), State(pc_initial=48 nstack_initial=2)])
DEBUG 2022-02-14 16:38:05,454 stack: []
DEBUG 2022-02-14 16:38:05,455 dispatch pc=56, inst=LOAD_FAST(arg=4, lineno=6)
DEBUG 2022-02-14 16:38:05,455 stack []
DEBUG 2022-02-14 16:38:05,455 dispatch pc=58, inst=LOAD_FAST(arg=2, lineno=6)
DEBUG 2022-02-14 16:38:05,455 stack ['$val_11156.0']
DEBUG 2022-02-14 16:38:05,455 dispatch pc=60, inst=LOAD_CONST(arg=1, lineno=6)
DEBUG 2022-02-14 16:38:05,455 stack ['$val_11156.0', '$val_111__arr58.1']
DEBUG 2022-02-14 16:38:05,455 dispatch pc=62, inst=STORE_SUBSCR(arg=None, lineno=6)
DEBUG 2022-02-14 16:38:05,455 stack ['$val_11156.0', '$val_111__arr58.1', '$const60.2']
DEBUG 2022-02-14 16:38:05,455 dispatch pc=64, inst=LOAD_FAST(arg=5, lineno=7)
DEBUG 2022-02-14 16:38:05,455 stack []
DEBUG 2022-02-14 16:38:05,455 dispatch pc=66, inst=LOAD_FAST(arg=3, lineno=7)
DEBUG 2022-02-14 16:38:05,455 stack ['$val_7064.3']
DEBUG 2022-02-14 16:38:05,455 dispatch pc=68, inst=LOAD_CONST(arg=1, lineno=7)
DEBUG 2022-02-14 16:38:05,455 stack ['$val_7064.3', '$val_70__arr66.4']
DEBUG 2022-02-14 16:38:05,455 dispatch pc=70, inst=STORE_SUBSCR(arg=None, lineno=7)
DEBUG 2022-02-14 16:38:05,455 stack ['$val_7064.3', '$val_70__arr66.4', '$const68.5']
DEBUG 2022-02-14 16:38:05,455 dispatch pc=72, inst=LOAD_CONST(arg=0, lineno=8)
DEBUG 2022-02-14 16:38:05,455 stack []
DEBUG 2022-02-14 16:38:05,455 dispatch pc=74, inst=RETURN_VALUE(arg=None, lineno=8)
DEBUG 2022-02-14 16:38:05,455 stack ['$const72.6']
DEBUG 2022-02-14 16:38:05,455 end state. edges=[]
DEBUG 2022-02-14 16:38:05,456 pending: deque([State(pc_initial=48 nstack_initial=2)])
DEBUG 2022-02-14 16:38:05,456 stack: ['$phi48.0', '$phi48.1']
DEBUG 2022-02-14 16:38:05,456 dispatch pc=48, inst=STORE_FAST(arg=6, lineno=4)
DEBUG 2022-02-14 16:38:05,456 stack ['$phi48.0', '$phi48.1']
DEBUG 2022-02-14 16:38:05,456 dispatch pc=50, inst=LOAD_CONST(arg=1, lineno=5)
DEBUG 2022-02-14 16:38:05,456 stack ['$phi48.0']
DEBUG 2022-02-14 16:38:05,456 dispatch pc=52, inst=STORE_FAST(arg=7, lineno=5)
DEBUG 2022-02-14 16:38:05,456 stack ['$phi48.0', '$const50.2']
DEBUG 2022-02-14 16:38:05,456 dispatch pc=54, inst=JUMP_ABSOLUTE(arg=46, lineno=5)
DEBUG 2022-02-14 16:38:05,456 stack ['$phi48.0']
DEBUG 2022-02-14 16:38:05,456 end state. edges=[Edge(pc=46, stack=('$phi48.0',), blockstack=(), npush=0)]
DEBUG 2022-02-14 16:38:05,456 pending: deque([State(pc_initial=46 nstack_initial=1)])
DEBUG 2022-02-14 16:38:05,456 -------------------------Prune PHIs-------------------------
DEBUG 2022-02-14 16:38:05,456 Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=46 nstack_initial=1): {'$phi46.0'},
             State(pc_initial=48 nstack_initial=2): {'$phi48.1'},
             State(pc_initial=56 nstack_initial=0): set()})
DEBUG 2022-02-14 16:38:05,456 defmap: {'$phi46.0': State(pc_initial=0 nstack_initial=0),
 '$phi48.1': State(pc_initial=46 nstack_initial=1)}
DEBUG 2022-02-14 16:38:05,457 phismap: defaultdict(<class 'set'>,
            {'$phi46.0': {('$44get_iter.19',
                           State(pc_initial=0 nstack_initial=0)),
                          ('$phi48.0', State(pc_initial=48 nstack_initial=2))},
             '$phi48.0': {('$phi46.0', State(pc_initial=46 nstack_initial=1))},
             '$phi48.1': {('$46for_iter.2',
                           State(pc_initial=46 nstack_initial=1))}})
DEBUG 2022-02-14 16:38:05,457 changing phismap: defaultdict(<class 'set'>,
            {'$phi46.0': {('$44get_iter.19',
                           State(pc_initial=0 nstack_initial=0)),
                          ('$phi46.0', State(pc_initial=46 nstack_initial=1))},
             '$phi48.0': {('$44get_iter.19',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi48.1': {('$46for_iter.2',
                           State(pc_initial=46 nstack_initial=1))}})
DEBUG 2022-02-14 16:38:05,457 changing phismap: defaultdict(<class 'set'>,
            {'$phi46.0': {('$44get_iter.19',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi48.0': {('$44get_iter.19',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi48.1': {('$46for_iter.2',
                           State(pc_initial=46 nstack_initial=1))}})
DEBUG 2022-02-14 16:38:05,458 changing phismap: defaultdict(<class 'set'>,
            {'$phi46.0': {('$44get_iter.19',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi48.0': {('$44get_iter.19',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi48.1': {('$46for_iter.2',
                           State(pc_initial=46 nstack_initial=1))}})
DEBUG 2022-02-14 16:38:05,458 keep phismap: {'$phi46.0': {('$44get_iter.19', State(pc_initial=0 nstack_initial=0))},
 '$phi48.1': {('$46for_iter.2', State(pc_initial=46 nstack_initial=1))}}
DEBUG 2022-02-14 16:38:05,459 new_out: defaultdict(<class 'dict'>,
            {State(pc_initial=0 nstack_initial=0): {'$phi46.0': '$44get_iter.19'},
             State(pc_initial=46 nstack_initial=1): {'$phi48.1': '$46for_iter.2'}})
DEBUG 2022-02-14 16:38:05,459 ----------------------DONE Prune PHIs-----------------------
DEBUG 2022-02-14 16:38:05,459 block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$val_111__arr2.0'}), (4, {'res': '$const4.1'}), (6, {'index': '$const4.1', 'target': '$val_111__arr2.0', 'res': '$6binary_subscr.2'}), (8, {'value': '$6binary_subscr.2'}), (10, {'res': '$val_70__arr10.3'}), (12, {'res': '$const12.4'}), (14, {'index': '$const12.4', 'target': '$val_70__arr10.3', 'res': '$14binary_subscr.5'}), (16, {'value': '$14binary_subscr.5'}), (18, {'res': '$18load_global.6'}), (20, {'res': '$sched20.7'}), (22, {'res': '$const22.8'}), (24, {'index': '$const22.8', 'target': '$sched20.7', 'res': '$24binary_subscr.9'}), (26, {'res': '$sched26.10'}), (28, {'res': '$const28.11'}), (30, {'index': '$const28.11', 'target': '$sched26.10', 'res': '$30binary_subscr.12'}), (32, {'res': '$32load_global.13'}), (34, {'item': '$32load_global.13', 'res': '$34load_method.14'}), (36, {'res': '$const36.15'}), (38, {'func': '$34load_method.14', 'args': ['$const36.15'], 'res': '$38call_method.16'}), (40, {'lhs': '$30binary_subscr.12', 'rhs': '$38call_method.16', 'res': '$40binary_add.17'}), (42, {'func': '$18load_global.6', 'args': ['$24binary_subscr.9', '$40binary_add.17'], 'res': '$42call_function.18'}), (44, {'value': '$42call_function.18', 'res': '$44get_iter.19'})), outgoing_phis={'$phi46.0': '$44get_iter.19'}, blockstack=(), active_try_block=None, outgoing_edgepushed={46: ('$44get_iter.19',)})
DEBUG 2022-02-14 16:38:05,459 block_infos State(pc_initial=46 nstack_initial=1):
AdaptBlockInfo(insts=((46, {'iterator': '$phi46.0', 'pair': '$46for_iter.1', 'indval': '$46for_iter.2', 'pred': '$46for_iter.3'}),), outgoing_phis={'$phi48.1': '$46for_iter.2'}, blockstack=(), active_try_block=None, outgoing_edgepushed={56: (), 48: ('$phi46.0', '$46for_iter.2')})
DEBUG 2022-02-14 16:38:05,459 block_infos State(pc_initial=48 nstack_initial=2):
AdaptBlockInfo(insts=((48, {'value': '$phi48.1'}), (50, {'res': '$const50.2'}), (52, {'value': '$const50.2'}), (54, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={46: ('$phi48.0',)})
DEBUG 2022-02-14 16:38:05,459 block_infos State(pc_initial=56 nstack_initial=0):
AdaptBlockInfo(insts=((56, {'res': '$val_11156.0'}), (58, {'res': '$val_111__arr58.1'}), (60, {'res': '$const60.2'}), (62, {'target': '$val_111__arr58.1', 'index': '$const60.2', 'value': '$val_11156.0'}), (64, {'res': '$val_7064.3'}), (66, {'res': '$val_70__arr66.4'}), (68, {'res': '$const68.5'}), (70, {'target': '$val_70__arr66.4', 'index': '$const68.5', 'value': '$val_7064.3'}), (72, {'res': '$const72.6'}), (74, {'retval': '$const72.6', 'castval': '$74return_value.7'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG 2022-02-14 16:38:05,461 label 0:
    sched = arg(0, name=sched)               ['sched']
    edge__reps = arg(1, name=edge__reps)     ['edge__reps']
    val_111__arr = arg(2, name=val_111__arr) ['val_111__arr']
    val_70__arr = arg(3, name=val_70__arr)   ['val_70__arr']
    $const4.1 = const(int, 0)                ['$const4.1']
    val_111 = getitem(value=val_111__arr, index=$const4.1, fn=<built-in function getitem>) ['$const4.1', 'val_111', 'val_111__arr']
    $const12.4 = const(int, 0)               ['$const12.4']
    val_70 = getitem(value=val_70__arr, index=$const12.4, fn=<built-in function getitem>) ['$const12.4', 'val_70', 'val_70__arr']
    $18load_global.6 = global(range: <class 'range'>) ['$18load_global.6']
    $const22.8 = const(int, 0)               ['$const22.8']
    $24binary_subscr.9 = getitem(value=sched, index=$const22.8, fn=<built-in function getitem>) ['$24binary_subscr.9', '$const22.8', 'sched']
    $const28.11 = const(int, 1)              ['$const28.11']
    $30binary_subscr.12 = getitem(value=sched, index=$const28.11, fn=<built-in function getitem>) ['$30binary_subscr.12', '$const28.11', 'sched']
    $32load_global.13 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>) ['$32load_global.13']
    $34load_method.14 = getattr(value=$32load_global.13, attr=uint8) ['$32load_global.13', '$34load_method.14']
    $const36.15 = const(int, 1)              ['$const36.15']
    $38call_method.16 = call $34load_method.14($const36.15, func=$34load_method.14, args=[Var($const36.15, <string>:4)], kws=(), vararg=None, target=None) ['$34load_method.14', '$38call_method.16', '$const36.15']
    $40binary_add.17 = $30binary_subscr.12 + $38call_method.16 ['$30binary_subscr.12', '$38call_method.16', '$40binary_add.17']
    $42call_function.18 = call $18load_global.6($24binary_subscr.9, $40binary_add.17, func=$18load_global.6, args=[Var($24binary_subscr.9, <string>:4), Var($40binary_add.17, <string>:4)], kws=(), vararg=None, target=None) ['$18load_global.6', '$24binary_subscr.9', '$40binary_add.17', '$42call_function.18']
    $44get_iter.19 = getiter(value=$42call_function.18) ['$42call_function.18', '$44get_iter.19']
    $phi46.0 = $44get_iter.19                ['$44get_iter.19', '$phi46.0']
    jump 46                                  []
label 46:
    $46for_iter.1 = iternext(value=$phi46.0) ['$46for_iter.1', '$phi46.0']
    $46for_iter.2 = pair_first(value=$46for_iter.1) ['$46for_iter.1', '$46for_iter.2']
    $46for_iter.3 = pair_second(value=$46for_iter.1) ['$46for_iter.1', '$46for_iter.3']
    $phi48.1 = $46for_iter.2                 ['$46for_iter.2', '$phi48.1']
    branch $46for_iter.3, 48, 56             ['$46for_iter.3']
label 48:
    parfor__index_196 = $phi48.1             ['$phi48.1', 'parfor__index_196']
    __sentinel__0 = const(int, 0)            ['__sentinel__0']
    jump 46                                  []
label 56:
    $const60.2 = const(int, 0)               ['$const60.2']
    val_111__arr[$const60.2] = val_111       ['$const60.2', 'val_111', 'val_111__arr']
    $const68.5 = const(int, 0)               ['$const68.5']
    val_70__arr[$const68.5] = val_70         ['$const68.5', 'val_70', 'val_70__arr']
    $const72.6 = const(NoneType, None)       ['$const72.6']
    $74return_value.7 = cast(value=$const72.6) ['$74return_value.7', '$const72.6']
    return $74return_value.7                 ['$74return_value.7']

DEBUG 2022-02-14 16:38:05,468 ==== SSA block analysis pass on 0
DEBUG 2022-02-14 16:38:05,468 Running <numba.core.ssa._GatherDefsHandler object at 0x7fa0465adb80>
DEBUG 2022-02-14 16:38:05,468 on stmt: sched.721 = arg(0, name=sched)
DEBUG 2022-02-14 16:38:05,468 on stmt: edge__reps = arg(1, name=edge__reps)
DEBUG 2022-02-14 16:38:05,468 on stmt: val_111__arr = arg(2, name=val_111__arr)
DEBUG 2022-02-14 16:38:05,468 on stmt: val_70__arr = arg(3, name=val_70__arr)
DEBUG 2022-02-14 16:38:05,469 on stmt: $const4.1.722 = const(int, 0)
DEBUG 2022-02-14 16:38:05,469 on stmt: val_111 = getitem(value=val_111__arr, index=$const4.1.722, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:05,469 on stmt: $const12.4.723 = const(int, 0)
DEBUG 2022-02-14 16:38:05,469 on stmt: val_70 = getitem(value=val_70__arr, index=$const12.4.723, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:05,469 on stmt: $18load_global.6.724 = global(range: <class 'range'>)
DEBUG 2022-02-14 16:38:05,469 on stmt: $const22.8.725 = const(int, 0)
DEBUG 2022-02-14 16:38:05,469 on stmt: $24binary_subscr.9.726 = getitem(value=sched.721, index=$const22.8.725, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:05,469 on stmt: $const28.11.727 = const(int, 1)
DEBUG 2022-02-14 16:38:05,469 on stmt: $30binary_subscr.12.728 = getitem(value=sched.721, index=$const28.11.727, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:05,469 on stmt: $32load_global.13.729 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:38:05,469 on stmt: $34load_method.14.730 = getattr(value=$32load_global.13.729, attr=uint8)
DEBUG 2022-02-14 16:38:05,469 on stmt: $const36.15.731 = const(int, 1)
DEBUG 2022-02-14 16:38:05,469 on stmt: $38call_method.16.732 = call $34load_method.14.730($const36.15.731, func=$34load_method.14.730, args=[Var($const36.15.731, <string>:4)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:05,469 on stmt: $40binary_add.17.733 = $30binary_subscr.12.728 + $38call_method.16.732
DEBUG 2022-02-14 16:38:05,469 on stmt: $42call_function.18.734 = call $18load_global.6.724($24binary_subscr.9.726, $40binary_add.17.733, func=$18load_global.6.724, args=[Var($24binary_subscr.9.726, <string>:4), Var($40binary_add.17.733, <string>:4)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:05,469 on stmt: $44get_iter.19.735 = getiter(value=$42call_function.18.734)
DEBUG 2022-02-14 16:38:05,469 on stmt: $phi46.0.736 = $44get_iter.19.735
DEBUG 2022-02-14 16:38:05,469 on stmt: $arg_out_var.202 = const(int, 1)
DEBUG 2022-02-14 16:38:05,469 on stmt: $64load_global.2.127 = global(max: <built-in function max>)
DEBUG 2022-02-14 16:38:05,470 on stmt: jump 46
DEBUG 2022-02-14 16:38:05,470 ==== SSA block analysis pass on 46
DEBUG 2022-02-14 16:38:05,470 Running <numba.core.ssa._GatherDefsHandler object at 0x7fa0465adb80>
DEBUG 2022-02-14 16:38:05,470 on stmt: $46for_iter.1.737 = iternext(value=$phi46.0.736)
DEBUG 2022-02-14 16:38:05,470 on stmt: $46for_iter.2.738 = pair_first(value=$46for_iter.1.737)
DEBUG 2022-02-14 16:38:05,470 on stmt: $46for_iter.3.739 = pair_second(value=$46for_iter.1.737)
DEBUG 2022-02-14 16:38:05,470 on stmt: $phi48.1.740 = $46for_iter.2.738
DEBUG 2022-02-14 16:38:05,470 on stmt: branch $46for_iter.3.739, 48, 892
DEBUG 2022-02-14 16:38:05,470 ==== SSA block analysis pass on 48
DEBUG 2022-02-14 16:38:05,470 Running <numba.core.ssa._GatherDefsHandler object at 0x7fa0465adb80>
DEBUG 2022-02-14 16:38:05,470 on stmt: parfor__index_196 = $phi48.1.740
DEBUG 2022-02-14 16:38:05,470 on stmt: jump 56
DEBUG 2022-02-14 16:38:05,470 ==== SSA block analysis pass on 892
DEBUG 2022-02-14 16:38:05,470 Running <numba.core.ssa._GatherDefsHandler object at 0x7fa0465adb80>
DEBUG 2022-02-14 16:38:05,470 on stmt: $const60.2.741 = const(int, 0)
DEBUG 2022-02-14 16:38:05,470 on stmt: val_111__arr[$const60.2.741] = val_111
DEBUG 2022-02-14 16:38:05,470 on stmt: $const68.5.742 = const(int, 0)
DEBUG 2022-02-14 16:38:05,470 on stmt: val_70__arr[$const68.5.742] = val_70
DEBUG 2022-02-14 16:38:05,470 on stmt: $const72.6.743 = const(NoneType, None)
DEBUG 2022-02-14 16:38:05,470 on stmt: $74return_value.7.744 = cast(value=$const72.6.743)
DEBUG 2022-02-14 16:38:05,470 on stmt: return $74return_value.7.744
DEBUG 2022-02-14 16:38:05,470 ==== SSA block analysis pass on 56
DEBUG 2022-02-14 16:38:05,470 Running <numba.core.ssa._GatherDefsHandler object at 0x7fa0465adb80>
DEBUG 2022-02-14 16:38:05,471 on stmt: $arg_out_var.201 = getitem(value=edge__reps, index=parfor__index_196, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:05,471 on stmt: $expr_out_var.200 = $arg_out_var.201 + $arg_out_var.202
DEBUG 2022-02-14 16:38:05,471 on stmt: $val.70.599 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=val_70, rhs=$expr_out_var.200, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:38:05,471 on stmt: val_70 = $val.70.599
DEBUG 2022-02-14 16:38:05,471 on stmt: $72binary_subscr.6.131 = getitem(value=edge__reps, index=parfor__index_196, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:05,471 on stmt: val_111 = call $64load_global.2.127(val_111, $72binary_subscr.6.131, func=$64load_global.2.127, args=[Var(val_111, parfor.py:156), Var($72binary_subscr.6.131, parfor.py:158)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:05,471 on stmt: jump 891
DEBUG 2022-02-14 16:38:05,471 ==== SSA block analysis pass on 891
DEBUG 2022-02-14 16:38:05,471 Running <numba.core.ssa._GatherDefsHandler object at 0x7fa0465adb80>
DEBUG 2022-02-14 16:38:05,471 on stmt: jump 46
DEBUG 2022-02-14 16:38:05,471 defs defaultdict(<class 'list'>,
            {'$18load_global.6.724': [<numba.core.ir.Assign object at 0x7fa046a19ee0>],
             '$24binary_subscr.9.726': [<numba.core.ir.Assign object at 0x7fa046a19d00>],
             '$30binary_subscr.12.728': [<numba.core.ir.Assign object at 0x7fa046a19790>],
             '$32load_global.13.729': [<numba.core.ir.Assign object at 0x7fa046a197f0>],
             '$34load_method.14.730': [<numba.core.ir.Assign object at 0x7fa046a19cd0>],
             '$38call_method.16.732': [<numba.core.ir.Assign object at 0x7fa04749d4c0>],
             '$40binary_add.17.733': [<numba.core.ir.Assign object at 0x7fa0469f81c0>],
             '$42call_function.18.734': [<numba.core.ir.Assign object at 0x7fa0469f8370>],
             '$44get_iter.19.735': [<numba.core.ir.Assign object at 0x7fa0469f8070>],
             '$46for_iter.1.737': [<numba.core.ir.Assign object at 0x7fa0469f8f10>],
             '$46for_iter.2.738': [<numba.core.ir.Assign object at 0x7fa0469f8400>],
             '$46for_iter.3.739': [<numba.core.ir.Assign object at 0x7fa0469f8df0>],
             '$64load_global.2.127': [<numba.core.ir.Assign object at 0x7fa04716eeb0>],
             '$72binary_subscr.6.131': [<numba.core.ir.Assign object at 0x7fa046a6d8b0>],
             '$74return_value.7.744': [<numba.core.ir.Assign object at 0x7fa046fad9d0>],
             '$arg_out_var.201': [<numba.core.ir.Assign object at 0x7fa046c21f40>],
             '$arg_out_var.202': [<numba.core.ir.Assign object at 0x7fa0471c56a0>],
             '$const12.4.723': [<numba.core.ir.Assign object at 0x7fa0466c2d60>],
             '$const22.8.725': [<numba.core.ir.Assign object at 0x7fa046a19550>],
             '$const28.11.727': [<numba.core.ir.Assign object at 0x7fa046a19f70>],
             '$const36.15.731': [<numba.core.ir.Assign object at 0x7fa04749d7c0>],
             '$const4.1.722': [<numba.core.ir.Assign object at 0x7fa046a21100>],
             '$const60.2.741': [<numba.core.ir.Assign object at 0x7fa047347970>],
             '$const68.5.742': [<numba.core.ir.Assign object at 0x7fa046fad040>],
             '$const72.6.743': [<numba.core.ir.Assign object at 0x7fa046fad5e0>],
             '$expr_out_var.200': [<numba.core.ir.Assign object at 0x7fa046a9a970>],
             '$phi46.0.736': [<numba.core.ir.Assign object at 0x7fa0466c2490>],
             '$phi48.1.740': [<numba.core.ir.Assign object at 0x7fa0469f8580>],
             '$val.70.599': [<numba.core.ir.Assign object at 0x7fa046fd5310>],
             'edge__reps': [<numba.core.ir.Assign object at 0x7fa046a21b50>],
             'parfor__index_196': [<numba.core.ir.Assign object at 0x7fa0469f8a00>],
             'sched.721': [<numba.core.ir.Assign object at 0x7fa046a21a30>],
             'val_111': [<numba.core.ir.Assign object at 0x7fa04670b6a0>,
                         <numba.core.ir.Assign object at 0x7fa046a6d790>],
             'val_111__arr': [<numba.core.ir.Assign object at 0x7fa046a21400>],
             'val_70': [<numba.core.ir.Assign object at 0x7fa0471a17f0>,
                        <numba.core.ir.Assign object at 0x7fa046fd53d0>],
             'val_70__arr': [<numba.core.ir.Assign object at 0x7fa046a215b0>]})
DEBUG 2022-02-14 16:38:05,472 SSA violators {'val_111', 'val_70'}
DEBUG 2022-02-14 16:38:05,472 Fix SSA violator on var val_111
DEBUG 2022-02-14 16:38:05,472 ==== SSA block rewrite pass on 0
DEBUG 2022-02-14 16:38:05,472 Running <numba.core.ssa._FreshVarHandler object at 0x7fa0465a69a0>
DEBUG 2022-02-14 16:38:05,472 on stmt: sched.721 = arg(0, name=sched)
DEBUG 2022-02-14 16:38:05,472 on stmt: edge__reps = arg(1, name=edge__reps)
DEBUG 2022-02-14 16:38:05,472 on stmt: val_111__arr = arg(2, name=val_111__arr)
DEBUG 2022-02-14 16:38:05,472 on stmt: val_70__arr = arg(3, name=val_70__arr)
DEBUG 2022-02-14 16:38:05,472 on stmt: $const4.1.722 = const(int, 0)
DEBUG 2022-02-14 16:38:05,472 on stmt: val_111 = getitem(value=val_111__arr, index=$const4.1.722, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:05,472 first assign: val_111
DEBUG 2022-02-14 16:38:05,472 replaced with: val_111 = getitem(value=val_111__arr, index=$const4.1.722, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:05,472 on stmt: $const12.4.723 = const(int, 0)
DEBUG 2022-02-14 16:38:05,472 on stmt: val_70 = getitem(value=val_70__arr, index=$const12.4.723, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:05,472 on stmt: $18load_global.6.724 = global(range: <class 'range'>)
DEBUG 2022-02-14 16:38:05,472 on stmt: $const22.8.725 = const(int, 0)
DEBUG 2022-02-14 16:38:05,472 on stmt: $24binary_subscr.9.726 = getitem(value=sched.721, index=$const22.8.725, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:05,472 on stmt: $const28.11.727 = const(int, 1)
DEBUG 2022-02-14 16:38:05,472 on stmt: $30binary_subscr.12.728 = getitem(value=sched.721, index=$const28.11.727, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:05,472 on stmt: $32load_global.13.729 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:38:05,472 on stmt: $34load_method.14.730 = getattr(value=$32load_global.13.729, attr=uint8)
DEBUG 2022-02-14 16:38:05,473 on stmt: $const36.15.731 = const(int, 1)
DEBUG 2022-02-14 16:38:05,473 on stmt: $38call_method.16.732 = call $34load_method.14.730($const36.15.731, func=$34load_method.14.730, args=[Var($const36.15.731, <string>:4)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:05,473 on stmt: $40binary_add.17.733 = $30binary_subscr.12.728 + $38call_method.16.732
DEBUG 2022-02-14 16:38:05,473 on stmt: $42call_function.18.734 = call $18load_global.6.724($24binary_subscr.9.726, $40binary_add.17.733, func=$18load_global.6.724, args=[Var($24binary_subscr.9.726, <string>:4), Var($40binary_add.17.733, <string>:4)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:05,473 on stmt: $44get_iter.19.735 = getiter(value=$42call_function.18.734)
DEBUG 2022-02-14 16:38:05,473 on stmt: $phi46.0.736 = $44get_iter.19.735
DEBUG 2022-02-14 16:38:05,473 on stmt: $arg_out_var.202 = const(int, 1)
DEBUG 2022-02-14 16:38:05,473 on stmt: $64load_global.2.127 = global(max: <built-in function max>)
DEBUG 2022-02-14 16:38:05,473 on stmt: jump 46
DEBUG 2022-02-14 16:38:05,473 ==== SSA block rewrite pass on 46
DEBUG 2022-02-14 16:38:05,473 Running <numba.core.ssa._FreshVarHandler object at 0x7fa0465a69a0>
DEBUG 2022-02-14 16:38:05,473 on stmt: $46for_iter.1.737 = iternext(value=$phi46.0.736)
DEBUG 2022-02-14 16:38:05,473 on stmt: $46for_iter.2.738 = pair_first(value=$46for_iter.1.737)
DEBUG 2022-02-14 16:38:05,473 on stmt: $46for_iter.3.739 = pair_second(value=$46for_iter.1.737)
DEBUG 2022-02-14 16:38:05,473 on stmt: $phi48.1.740 = $46for_iter.2.738
DEBUG 2022-02-14 16:38:05,473 on stmt: branch $46for_iter.3.739, 48, 892
DEBUG 2022-02-14 16:38:05,474 ==== SSA block rewrite pass on 48
DEBUG 2022-02-14 16:38:05,474 Running <numba.core.ssa._FreshVarHandler object at 0x7fa0465a69a0>
DEBUG 2022-02-14 16:38:05,474 on stmt: parfor__index_196 = $phi48.1.740
DEBUG 2022-02-14 16:38:05,474 on stmt: jump 56
DEBUG 2022-02-14 16:38:05,474 ==== SSA block rewrite pass on 892
DEBUG 2022-02-14 16:38:05,474 Running <numba.core.ssa._FreshVarHandler object at 0x7fa0465a69a0>
DEBUG 2022-02-14 16:38:05,474 on stmt: $const60.2.741 = const(int, 0)
DEBUG 2022-02-14 16:38:05,474 on stmt: val_111__arr[$const60.2.741] = val_111
DEBUG 2022-02-14 16:38:05,474 on stmt: $const68.5.742 = const(int, 0)
DEBUG 2022-02-14 16:38:05,474 on stmt: val_70__arr[$const68.5.742] = val_70
DEBUG 2022-02-14 16:38:05,474 on stmt: $const72.6.743 = const(NoneType, None)
DEBUG 2022-02-14 16:38:05,474 on stmt: $74return_value.7.744 = cast(value=$const72.6.743)
DEBUG 2022-02-14 16:38:05,474 on stmt: return $74return_value.7.744
DEBUG 2022-02-14 16:38:05,475 ==== SSA block rewrite pass on 56
DEBUG 2022-02-14 16:38:05,475 Running <numba.core.ssa._FreshVarHandler object at 0x7fa0465a69a0>
DEBUG 2022-02-14 16:38:05,475 on stmt: $arg_out_var.201 = getitem(value=edge__reps, index=parfor__index_196, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:05,475 on stmt: $expr_out_var.200 = $arg_out_var.201 + $arg_out_var.202
DEBUG 2022-02-14 16:38:05,475 on stmt: $val.70.599 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=val_70, rhs=$expr_out_var.200, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:38:05,475 on stmt: val_70 = $val.70.599
DEBUG 2022-02-14 16:38:05,475 on stmt: $72binary_subscr.6.131 = getitem(value=edge__reps, index=parfor__index_196, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:05,475 on stmt: val_111 = call $64load_global.2.127(val_111, $72binary_subscr.6.131, func=$64load_global.2.127, args=[Var(val_111, parfor.py:156), Var($72binary_subscr.6.131, parfor.py:158)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:05,475 replaced with: val_111.1 = call $64load_global.2.127(val_111, $72binary_subscr.6.131, func=$64load_global.2.127, args=[Var(val_111, parfor.py:156), Var($72binary_subscr.6.131, parfor.py:158)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:05,475 on stmt: jump 891
DEBUG 2022-02-14 16:38:05,475 ==== SSA block rewrite pass on 891
DEBUG 2022-02-14 16:38:05,475 Running <numba.core.ssa._FreshVarHandler object at 0x7fa0465a69a0>
DEBUG 2022-02-14 16:38:05,475 on stmt: jump 46
DEBUG 2022-02-14 16:38:05,475 Replaced assignments: defaultdict(<class 'list'>,
            {0: [<numba.core.ir.Assign object at 0x7fa04659d9d0>],
             56: [<numba.core.ir.Assign object at 0x7fa0465a8700>]})
DEBUG 2022-02-14 16:38:05,475 ==== SSA block rewrite pass on 0
DEBUG 2022-02-14 16:38:05,475 Running <numba.core.ssa._FixSSAVars object at 0x7fa0465a69a0>
DEBUG 2022-02-14 16:38:05,475 on stmt: sched.721 = arg(0, name=sched)
DEBUG 2022-02-14 16:38:05,476 on stmt: edge__reps = arg(1, name=edge__reps)
DEBUG 2022-02-14 16:38:05,476 on stmt: val_111__arr = arg(2, name=val_111__arr)
DEBUG 2022-02-14 16:38:05,476 on stmt: val_70__arr = arg(3, name=val_70__arr)
DEBUG 2022-02-14 16:38:05,476 on stmt: $const4.1.722 = const(int, 0)
DEBUG 2022-02-14 16:38:05,476 on stmt: val_111 = getitem(value=val_111__arr, index=$const4.1.722, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:05,476 on stmt: $const12.4.723 = const(int, 0)
DEBUG 2022-02-14 16:38:05,476 on stmt: val_70 = getitem(value=val_70__arr, index=$const12.4.723, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:05,476 on stmt: $18load_global.6.724 = global(range: <class 'range'>)
DEBUG 2022-02-14 16:38:05,476 on stmt: $const22.8.725 = const(int, 0)
DEBUG 2022-02-14 16:38:05,476 on stmt: $24binary_subscr.9.726 = getitem(value=sched.721, index=$const22.8.725, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:05,476 on stmt: $const28.11.727 = const(int, 1)
DEBUG 2022-02-14 16:38:05,476 on stmt: $30binary_subscr.12.728 = getitem(value=sched.721, index=$const28.11.727, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:05,476 on stmt: $32load_global.13.729 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:38:05,476 on stmt: $34load_method.14.730 = getattr(value=$32load_global.13.729, attr=uint8)
DEBUG 2022-02-14 16:38:05,476 on stmt: $const36.15.731 = const(int, 1)
DEBUG 2022-02-14 16:38:05,476 on stmt: $38call_method.16.732 = call $34load_method.14.730($const36.15.731, func=$34load_method.14.730, args=[Var($const36.15.731, <string>:4)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:05,476 on stmt: $40binary_add.17.733 = $30binary_subscr.12.728 + $38call_method.16.732
DEBUG 2022-02-14 16:38:05,476 on stmt: $42call_function.18.734 = call $18load_global.6.724($24binary_subscr.9.726, $40binary_add.17.733, func=$18load_global.6.724, args=[Var($24binary_subscr.9.726, <string>:4), Var($40binary_add.17.733, <string>:4)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:05,476 on stmt: $44get_iter.19.735 = getiter(value=$42call_function.18.734)
DEBUG 2022-02-14 16:38:05,477 on stmt: $phi46.0.736 = $44get_iter.19.735
DEBUG 2022-02-14 16:38:05,477 on stmt: $arg_out_var.202 = const(int, 1)
DEBUG 2022-02-14 16:38:05,477 on stmt: $64load_global.2.127 = global(max: <built-in function max>)
DEBUG 2022-02-14 16:38:05,477 on stmt: jump 46
DEBUG 2022-02-14 16:38:05,477 ==== SSA block rewrite pass on 46
DEBUG 2022-02-14 16:38:05,477 Running <numba.core.ssa._FixSSAVars object at 0x7fa0465a69a0>
DEBUG 2022-02-14 16:38:05,477 on stmt: $46for_iter.1.737 = iternext(value=$phi46.0.736)
DEBUG 2022-02-14 16:38:05,477 on stmt: $46for_iter.2.738 = pair_first(value=$46for_iter.1.737)
DEBUG 2022-02-14 16:38:05,477 on stmt: $46for_iter.3.739 = pair_second(value=$46for_iter.1.737)
DEBUG 2022-02-14 16:38:05,477 on stmt: $phi48.1.740 = $46for_iter.2.738
DEBUG 2022-02-14 16:38:05,477 on stmt: branch $46for_iter.3.739, 48, 892
DEBUG 2022-02-14 16:38:05,477 ==== SSA block rewrite pass on 48
DEBUG 2022-02-14 16:38:05,477 Running <numba.core.ssa._FixSSAVars object at 0x7fa0465a69a0>
DEBUG 2022-02-14 16:38:05,477 on stmt: parfor__index_196 = $phi48.1.740
DEBUG 2022-02-14 16:38:05,477 on stmt: jump 56
DEBUG 2022-02-14 16:38:05,477 ==== SSA block rewrite pass on 892
DEBUG 2022-02-14 16:38:05,477 Running <numba.core.ssa._FixSSAVars object at 0x7fa0465a69a0>
DEBUG 2022-02-14 16:38:05,477 on stmt: $const60.2.741 = const(int, 0)
DEBUG 2022-02-14 16:38:05,477 on stmt: val_111__arr[$const60.2.741] = val_111
DEBUG 2022-02-14 16:38:05,477 find_def var='val_111' stmt=val_111__arr[$const60.2.741] = val_111
DEBUG 2022-02-14 16:38:05,478 find_def_from_top label 892
DEBUG 2022-02-14 16:38:05,478 idom 46 from label 892
DEBUG 2022-02-14 16:38:05,478 find_def_from_bottom label 46
DEBUG 2022-02-14 16:38:05,478 find_def_from_top label 46
DEBUG 2022-02-14 16:38:05,478 insert phi node val_111.2 = phi(incoming_values=[], incoming_blocks=[]) at 46
DEBUG 2022-02-14 16:38:05,478 find_def_from_bottom label 0
DEBUG 2022-02-14 16:38:05,478 incoming_def val_111 = getitem(value=val_111__arr, index=$const4.1.722, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:05,478 find_def_from_bottom label 891
DEBUG 2022-02-14 16:38:05,478 find_def_from_top label 891
DEBUG 2022-02-14 16:38:05,478 idom 56 from label 891
DEBUG 2022-02-14 16:38:05,478 find_def_from_bottom label 56
DEBUG 2022-02-14 16:38:05,478 incoming_def val_111.1 = call $64load_global.2.127(val_111, $72binary_subscr.6.131, func=$64load_global.2.127, args=[Var(val_111, parfor.py:156), Var($72binary_subscr.6.131, parfor.py:158)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:05,478 replaced with: val_111__arr[$const60.2.741] = val_111.2
DEBUG 2022-02-14 16:38:05,478 on stmt: $const68.5.742 = const(int, 0)
DEBUG 2022-02-14 16:38:05,478 on stmt: val_70__arr[$const68.5.742] = val_70
DEBUG 2022-02-14 16:38:05,478 on stmt: $const72.6.743 = const(NoneType, None)
DEBUG 2022-02-14 16:38:05,478 on stmt: $74return_value.7.744 = cast(value=$const72.6.743)
DEBUG 2022-02-14 16:38:05,478 on stmt: return $74return_value.7.744
DEBUG 2022-02-14 16:38:05,478 ==== SSA block rewrite pass on 56
DEBUG 2022-02-14 16:38:05,478 Running <numba.core.ssa._FixSSAVars object at 0x7fa0465a69a0>
DEBUG 2022-02-14 16:38:05,479 on stmt: $arg_out_var.201 = getitem(value=edge__reps, index=parfor__index_196, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:05,479 on stmt: $expr_out_var.200 = $arg_out_var.201 + $arg_out_var.202
DEBUG 2022-02-14 16:38:05,479 on stmt: $val.70.599 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=val_70, rhs=$expr_out_var.200, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:38:05,479 on stmt: val_70 = $val.70.599
DEBUG 2022-02-14 16:38:05,479 on stmt: $72binary_subscr.6.131 = getitem(value=edge__reps, index=parfor__index_196, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:05,479 on stmt: val_111.1 = call $64load_global.2.127(val_111, $72binary_subscr.6.131, func=$64load_global.2.127, args=[Var(val_111, parfor.py:156), Var($72binary_subscr.6.131, parfor.py:158)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:05,479 find_def var='val_111' stmt=val_111.1 = call $64load_global.2.127(val_111, $72binary_subscr.6.131, func=$64load_global.2.127, args=[Var(val_111, parfor.py:156), Var($72binary_subscr.6.131, parfor.py:158)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:05,479 find_def_from_top label 56
DEBUG 2022-02-14 16:38:05,479 idom 48 from label 56
DEBUG 2022-02-14 16:38:05,479 find_def_from_bottom label 48
DEBUG 2022-02-14 16:38:05,479 find_def_from_top label 48
DEBUG 2022-02-14 16:38:05,479 idom 46 from label 48
DEBUG 2022-02-14 16:38:05,479 find_def_from_bottom label 46
DEBUG 2022-02-14 16:38:05,480 replaced with: val_111.1 = call $64load_global.2.127(val_111.2, $72binary_subscr.6.131, func=$64load_global.2.127, args=[Var(val_111.2, <string>:6), Var($72binary_subscr.6.131, parfor.py:158)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:05,480 on stmt: jump 891
DEBUG 2022-02-14 16:38:05,480 ==== SSA block rewrite pass on 891
DEBUG 2022-02-14 16:38:05,480 Running <numba.core.ssa._FixSSAVars object at 0x7fa0465a69a0>
DEBUG 2022-02-14 16:38:05,480 on stmt: jump 46
DEBUG 2022-02-14 16:38:05,480 Fix SSA violator on var val_70
DEBUG 2022-02-14 16:38:05,480 ==== SSA block rewrite pass on 0
DEBUG 2022-02-14 16:38:05,480 Running <numba.core.ssa._FreshVarHandler object at 0x7fa0465a8040>
DEBUG 2022-02-14 16:38:05,480 on stmt: sched.721 = arg(0, name=sched)
DEBUG 2022-02-14 16:38:05,480 on stmt: edge__reps = arg(1, name=edge__reps)
DEBUG 2022-02-14 16:38:05,480 on stmt: val_111__arr = arg(2, name=val_111__arr)
DEBUG 2022-02-14 16:38:05,480 on stmt: val_70__arr = arg(3, name=val_70__arr)
DEBUG 2022-02-14 16:38:05,480 on stmt: $const4.1.722 = const(int, 0)
DEBUG 2022-02-14 16:38:05,480 on stmt: val_111 = getitem(value=val_111__arr, index=$const4.1.722, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:05,480 on stmt: $const12.4.723 = const(int, 0)
DEBUG 2022-02-14 16:38:05,480 on stmt: val_70 = getitem(value=val_70__arr, index=$const12.4.723, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:05,480 first assign: val_70
DEBUG 2022-02-14 16:38:05,480 replaced with: val_70 = getitem(value=val_70__arr, index=$const12.4.723, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:05,480 on stmt: $18load_global.6.724 = global(range: <class 'range'>)
DEBUG 2022-02-14 16:38:05,480 on stmt: $const22.8.725 = const(int, 0)
DEBUG 2022-02-14 16:38:05,480 on stmt: $24binary_subscr.9.726 = getitem(value=sched.721, index=$const22.8.725, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:05,481 on stmt: $const28.11.727 = const(int, 1)
DEBUG 2022-02-14 16:38:05,481 on stmt: $30binary_subscr.12.728 = getitem(value=sched.721, index=$const28.11.727, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:05,481 on stmt: $32load_global.13.729 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:38:05,481 on stmt: $34load_method.14.730 = getattr(value=$32load_global.13.729, attr=uint8)
DEBUG 2022-02-14 16:38:05,481 on stmt: $const36.15.731 = const(int, 1)
DEBUG 2022-02-14 16:38:05,481 on stmt: $38call_method.16.732 = call $34load_method.14.730($const36.15.731, func=$34load_method.14.730, args=[Var($const36.15.731, <string>:4)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:05,481 on stmt: $40binary_add.17.733 = $30binary_subscr.12.728 + $38call_method.16.732
DEBUG 2022-02-14 16:38:05,481 on stmt: $42call_function.18.734 = call $18load_global.6.724($24binary_subscr.9.726, $40binary_add.17.733, func=$18load_global.6.724, args=[Var($24binary_subscr.9.726, <string>:4), Var($40binary_add.17.733, <string>:4)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:05,481 on stmt: $44get_iter.19.735 = getiter(value=$42call_function.18.734)
DEBUG 2022-02-14 16:38:05,481 on stmt: $phi46.0.736 = $44get_iter.19.735
DEBUG 2022-02-14 16:38:05,481 on stmt: $arg_out_var.202 = const(int, 1)
DEBUG 2022-02-14 16:38:05,481 on stmt: $64load_global.2.127 = global(max: <built-in function max>)
DEBUG 2022-02-14 16:38:05,481 on stmt: jump 46
DEBUG 2022-02-14 16:38:05,481 ==== SSA block rewrite pass on 46
DEBUG 2022-02-14 16:38:05,481 Running <numba.core.ssa._FreshVarHandler object at 0x7fa0465a8040>
DEBUG 2022-02-14 16:38:05,481 on stmt: val_111.2 = phi(incoming_values=[Var(val_111, <string>:2), Var(val_111.1, parfor.py:158)], incoming_blocks=[0, 891])
DEBUG 2022-02-14 16:38:05,481 on stmt: $46for_iter.1.737 = iternext(value=$phi46.0.736)
DEBUG 2022-02-14 16:38:05,481 on stmt: $46for_iter.2.738 = pair_first(value=$46for_iter.1.737)
DEBUG 2022-02-14 16:38:05,481 on stmt: $46for_iter.3.739 = pair_second(value=$46for_iter.1.737)
DEBUG 2022-02-14 16:38:05,481 on stmt: $phi48.1.740 = $46for_iter.2.738
DEBUG 2022-02-14 16:38:05,482 on stmt: branch $46for_iter.3.739, 48, 892
DEBUG 2022-02-14 16:38:05,482 ==== SSA block rewrite pass on 48
DEBUG 2022-02-14 16:38:05,482 Running <numba.core.ssa._FreshVarHandler object at 0x7fa0465a8040>
DEBUG 2022-02-14 16:38:05,482 on stmt: parfor__index_196 = $phi48.1.740
DEBUG 2022-02-14 16:38:05,482 on stmt: jump 56
DEBUG 2022-02-14 16:38:05,482 ==== SSA block rewrite pass on 892
DEBUG 2022-02-14 16:38:05,482 Running <numba.core.ssa._FreshVarHandler object at 0x7fa0465a8040>
DEBUG 2022-02-14 16:38:05,482 on stmt: $const60.2.741 = const(int, 0)
DEBUG 2022-02-14 16:38:05,482 on stmt: val_111__arr[$const60.2.741] = val_111.2
DEBUG 2022-02-14 16:38:05,482 on stmt: $const68.5.742 = const(int, 0)
DEBUG 2022-02-14 16:38:05,482 on stmt: val_70__arr[$const68.5.742] = val_70
DEBUG 2022-02-14 16:38:05,482 on stmt: $const72.6.743 = const(NoneType, None)
DEBUG 2022-02-14 16:38:05,482 on stmt: $74return_value.7.744 = cast(value=$const72.6.743)
DEBUG 2022-02-14 16:38:05,482 on stmt: return $74return_value.7.744
DEBUG 2022-02-14 16:38:05,482 ==== SSA block rewrite pass on 56
DEBUG 2022-02-14 16:38:05,482 Running <numba.core.ssa._FreshVarHandler object at 0x7fa0465a8040>
DEBUG 2022-02-14 16:38:05,482 on stmt: $arg_out_var.201 = getitem(value=edge__reps, index=parfor__index_196, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:05,482 on stmt: $expr_out_var.200 = $arg_out_var.201 + $arg_out_var.202
DEBUG 2022-02-14 16:38:05,482 on stmt: $val.70.599 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=val_70, rhs=$expr_out_var.200, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:38:05,482 on stmt: val_70 = $val.70.599
DEBUG 2022-02-14 16:38:05,482 replaced with: val_70.1 = $val.70.599
DEBUG 2022-02-14 16:38:05,482 on stmt: $72binary_subscr.6.131 = getitem(value=edge__reps, index=parfor__index_196, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:05,482 on stmt: val_111.1 = call $64load_global.2.127(val_111.2, $72binary_subscr.6.131, func=$64load_global.2.127, args=[Var(val_111.2, <string>:6), Var($72binary_subscr.6.131, parfor.py:158)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:05,483 on stmt: jump 891
DEBUG 2022-02-14 16:38:05,483 ==== SSA block rewrite pass on 891
DEBUG 2022-02-14 16:38:05,483 Running <numba.core.ssa._FreshVarHandler object at 0x7fa0465a8040>
DEBUG 2022-02-14 16:38:05,483 on stmt: jump 46
DEBUG 2022-02-14 16:38:05,483 Replaced assignments: defaultdict(<class 'list'>,
            {0: [<numba.core.ir.Assign object at 0x7fa0465a83d0>],
             56: [<numba.core.ir.Assign object at 0x7fa04684e670>]})
DEBUG 2022-02-14 16:38:05,483 ==== SSA block rewrite pass on 0
DEBUG 2022-02-14 16:38:05,483 Running <numba.core.ssa._FixSSAVars object at 0x7fa0465a69a0>
DEBUG 2022-02-14 16:38:05,483 on stmt: sched.721 = arg(0, name=sched)
DEBUG 2022-02-14 16:38:05,483 on stmt: edge__reps = arg(1, name=edge__reps)
DEBUG 2022-02-14 16:38:05,483 on stmt: val_111__arr = arg(2, name=val_111__arr)
DEBUG 2022-02-14 16:38:05,483 on stmt: val_70__arr = arg(3, name=val_70__arr)
DEBUG 2022-02-14 16:38:05,483 on stmt: $const4.1.722 = const(int, 0)
DEBUG 2022-02-14 16:38:05,483 on stmt: val_111 = getitem(value=val_111__arr, index=$const4.1.722, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:05,483 on stmt: $const12.4.723 = const(int, 0)
DEBUG 2022-02-14 16:38:05,483 on stmt: val_70 = getitem(value=val_70__arr, index=$const12.4.723, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:05,483 on stmt: $18load_global.6.724 = global(range: <class 'range'>)
DEBUG 2022-02-14 16:38:05,483 on stmt: $const22.8.725 = const(int, 0)
DEBUG 2022-02-14 16:38:05,483 on stmt: $24binary_subscr.9.726 = getitem(value=sched.721, index=$const22.8.725, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:05,483 on stmt: $const28.11.727 = const(int, 1)
DEBUG 2022-02-14 16:38:05,483 on stmt: $30binary_subscr.12.728 = getitem(value=sched.721, index=$const28.11.727, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:05,484 on stmt: $32load_global.13.729 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:38:05,484 on stmt: $34load_method.14.730 = getattr(value=$32load_global.13.729, attr=uint8)
DEBUG 2022-02-14 16:38:05,484 on stmt: $const36.15.731 = const(int, 1)
DEBUG 2022-02-14 16:38:05,484 on stmt: $38call_method.16.732 = call $34load_method.14.730($const36.15.731, func=$34load_method.14.730, args=[Var($const36.15.731, <string>:4)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:05,484 on stmt: $40binary_add.17.733 = $30binary_subscr.12.728 + $38call_method.16.732
DEBUG 2022-02-14 16:38:05,484 on stmt: $42call_function.18.734 = call $18load_global.6.724($24binary_subscr.9.726, $40binary_add.17.733, func=$18load_global.6.724, args=[Var($24binary_subscr.9.726, <string>:4), Var($40binary_add.17.733, <string>:4)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:05,484 on stmt: $44get_iter.19.735 = getiter(value=$42call_function.18.734)
DEBUG 2022-02-14 16:38:05,484 on stmt: $phi46.0.736 = $44get_iter.19.735
DEBUG 2022-02-14 16:38:05,484 on stmt: $arg_out_var.202 = const(int, 1)
DEBUG 2022-02-14 16:38:05,484 on stmt: $64load_global.2.127 = global(max: <built-in function max>)
DEBUG 2022-02-14 16:38:05,484 on stmt: jump 46
DEBUG 2022-02-14 16:38:05,484 ==== SSA block rewrite pass on 46
DEBUG 2022-02-14 16:38:05,484 Running <numba.core.ssa._FixSSAVars object at 0x7fa0465a69a0>
DEBUG 2022-02-14 16:38:05,484 on stmt: val_111.2 = phi(incoming_values=[Var(val_111, <string>:2), Var(val_111.1, parfor.py:158)], incoming_blocks=[0, 891])
DEBUG 2022-02-14 16:38:05,484 on stmt: $46for_iter.1.737 = iternext(value=$phi46.0.736)
DEBUG 2022-02-14 16:38:05,484 on stmt: $46for_iter.2.738 = pair_first(value=$46for_iter.1.737)
DEBUG 2022-02-14 16:38:05,484 on stmt: $46for_iter.3.739 = pair_second(value=$46for_iter.1.737)
DEBUG 2022-02-14 16:38:05,484 on stmt: $phi48.1.740 = $46for_iter.2.738
DEBUG 2022-02-14 16:38:05,484 on stmt: branch $46for_iter.3.739, 48, 892
DEBUG 2022-02-14 16:38:05,484 ==== SSA block rewrite pass on 48
DEBUG 2022-02-14 16:38:05,484 Running <numba.core.ssa._FixSSAVars object at 0x7fa0465a69a0>
DEBUG 2022-02-14 16:38:05,485 on stmt: parfor__index_196 = $phi48.1.740
DEBUG 2022-02-14 16:38:05,485 on stmt: jump 56
DEBUG 2022-02-14 16:38:05,485 ==== SSA block rewrite pass on 892
DEBUG 2022-02-14 16:38:05,485 Running <numba.core.ssa._FixSSAVars object at 0x7fa0465a69a0>
DEBUG 2022-02-14 16:38:05,485 on stmt: $const60.2.741 = const(int, 0)
DEBUG 2022-02-14 16:38:05,485 on stmt: val_111__arr[$const60.2.741] = val_111.2
DEBUG 2022-02-14 16:38:05,485 on stmt: $const68.5.742 = const(int, 0)
DEBUG 2022-02-14 16:38:05,485 on stmt: val_70__arr[$const68.5.742] = val_70
DEBUG 2022-02-14 16:38:05,485 find_def var='val_70' stmt=val_70__arr[$const68.5.742] = val_70
DEBUG 2022-02-14 16:38:05,485 find_def_from_top label 892
DEBUG 2022-02-14 16:38:05,485 idom 46 from label 892
DEBUG 2022-02-14 16:38:05,485 find_def_from_bottom label 46
DEBUG 2022-02-14 16:38:05,485 find_def_from_top label 46
DEBUG 2022-02-14 16:38:05,485 insert phi node val_70.2 = phi(incoming_values=[], incoming_blocks=[]) at 46
DEBUG 2022-02-14 16:38:05,485 find_def_from_bottom label 0
DEBUG 2022-02-14 16:38:05,485 incoming_def val_70 = getitem(value=val_70__arr, index=$const12.4.723, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:05,485 find_def_from_bottom label 891
DEBUG 2022-02-14 16:38:05,485 find_def_from_top label 891
DEBUG 2022-02-14 16:38:05,485 idom 56 from label 891
DEBUG 2022-02-14 16:38:05,485 find_def_from_bottom label 56
DEBUG 2022-02-14 16:38:05,485 incoming_def val_70.1 = $val.70.599
DEBUG 2022-02-14 16:38:05,485 replaced with: val_70__arr[$const68.5.742] = val_70.2
DEBUG 2022-02-14 16:38:05,485 on stmt: $const72.6.743 = const(NoneType, None)
DEBUG 2022-02-14 16:38:05,485 on stmt: $74return_value.7.744 = cast(value=$const72.6.743)
DEBUG 2022-02-14 16:38:05,486 on stmt: return $74return_value.7.744
DEBUG 2022-02-14 16:38:05,486 ==== SSA block rewrite pass on 56
DEBUG 2022-02-14 16:38:05,486 Running <numba.core.ssa._FixSSAVars object at 0x7fa0465a69a0>
DEBUG 2022-02-14 16:38:05,486 on stmt: $arg_out_var.201 = getitem(value=edge__reps, index=parfor__index_196, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:05,486 on stmt: $expr_out_var.200 = $arg_out_var.201 + $arg_out_var.202
DEBUG 2022-02-14 16:38:05,486 on stmt: $val.70.599 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=val_70, rhs=$expr_out_var.200, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:38:05,486 find_def var='val_70' stmt=$val.70.599 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=val_70, rhs=$expr_out_var.200, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:38:05,486 find_def_from_top label 56
DEBUG 2022-02-14 16:38:05,486 idom 48 from label 56
DEBUG 2022-02-14 16:38:05,486 find_def_from_bottom label 48
DEBUG 2022-02-14 16:38:05,486 find_def_from_top label 48
DEBUG 2022-02-14 16:38:05,486 idom 46 from label 48
DEBUG 2022-02-14 16:38:05,486 find_def_from_bottom label 46
DEBUG 2022-02-14 16:38:05,486 replaced with: $val.70.599 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=val_70.2, rhs=$expr_out_var.200, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:38:05,486 on stmt: val_70.1 = $val.70.599
DEBUG 2022-02-14 16:38:05,486 on stmt: $72binary_subscr.6.131 = getitem(value=edge__reps, index=parfor__index_196, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:05,486 on stmt: val_111.1 = call $64load_global.2.127(val_111.2, $72binary_subscr.6.131, func=$64load_global.2.127, args=[Var(val_111.2, <string>:6), Var($72binary_subscr.6.131, parfor.py:158)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:05,486 on stmt: jump 891
DEBUG 2022-02-14 16:38:05,486 ==== SSA block rewrite pass on 891
DEBUG 2022-02-14 16:38:05,486 Running <numba.core.ssa._FixSSAVars object at 0x7fa0465a69a0>
DEBUG 2022-02-14 16:38:05,486 on stmt: jump 46
DEBUG 2022-02-14 16:38:05,746 bytecode dump:
>          0	NOP(arg=None, lineno=2)
           2	LOAD_GLOBAL(arg=0, lineno=2)
           4	LOAD_FAST(arg=0, lineno=2)
           6	LOAD_CONST(arg=1, lineno=2)
           8	BINARY_SUBSCR(arg=None, lineno=2)
          10	LOAD_FAST(arg=0, lineno=2)
          12	LOAD_CONST(arg=2, lineno=2)
          14	BINARY_SUBSCR(arg=None, lineno=2)
          16	LOAD_GLOBAL(arg=1, lineno=2)
          18	LOAD_METHOD(arg=2, lineno=2)
          20	LOAD_CONST(arg=2, lineno=2)
          22	CALL_METHOD(arg=1, lineno=2)
          24	BINARY_ADD(arg=None, lineno=2)
          26	CALL_FUNCTION(arg=2, lineno=2)
          28	GET_ITER(arg=None, lineno=2)
>         30	FOR_ITER(arg=8, lineno=2)
          32	STORE_FAST(arg=2, lineno=2)
          34	LOAD_CONST(arg=1, lineno=3)
          36	STORE_FAST(arg=3, lineno=3)
          38	JUMP_ABSOLUTE(arg=30, lineno=3)
>         40	LOAD_CONST(arg=0, lineno=4)
          42	RETURN_VALUE(arg=None, lineno=4)
DEBUG 2022-02-14 16:38:05,746 pending: deque([State(pc_initial=0 nstack_initial=0)])
DEBUG 2022-02-14 16:38:05,747 stack: []
DEBUG 2022-02-14 16:38:05,747 dispatch pc=0, inst=NOP(arg=None, lineno=2)
DEBUG 2022-02-14 16:38:05,747 stack []
DEBUG 2022-02-14 16:38:05,748 dispatch pc=2, inst=LOAD_GLOBAL(arg=0, lineno=2)
DEBUG 2022-02-14 16:38:05,748 stack []
DEBUG 2022-02-14 16:38:05,748 dispatch pc=4, inst=LOAD_FAST(arg=0, lineno=2)
DEBUG 2022-02-14 16:38:05,748 stack ['$2load_global.0']
DEBUG 2022-02-14 16:38:05,748 dispatch pc=6, inst=LOAD_CONST(arg=1, lineno=2)
DEBUG 2022-02-14 16:38:05,748 stack ['$2load_global.0', '$sched4.1']
DEBUG 2022-02-14 16:38:05,748 dispatch pc=8, inst=BINARY_SUBSCR(arg=None, lineno=2)
DEBUG 2022-02-14 16:38:05,748 stack ['$2load_global.0', '$sched4.1', '$const6.2']
DEBUG 2022-02-14 16:38:05,748 dispatch pc=10, inst=LOAD_FAST(arg=0, lineno=2)
DEBUG 2022-02-14 16:38:05,748 stack ['$2load_global.0', '$8binary_subscr.3']
DEBUG 2022-02-14 16:38:05,748 dispatch pc=12, inst=LOAD_CONST(arg=2, lineno=2)
DEBUG 2022-02-14 16:38:05,748 stack ['$2load_global.0', '$8binary_subscr.3', '$sched10.4']
DEBUG 2022-02-14 16:38:05,748 dispatch pc=14, inst=BINARY_SUBSCR(arg=None, lineno=2)
DEBUG 2022-02-14 16:38:05,748 stack ['$2load_global.0', '$8binary_subscr.3', '$sched10.4', '$const12.5']
DEBUG 2022-02-14 16:38:05,748 dispatch pc=16, inst=LOAD_GLOBAL(arg=1, lineno=2)
DEBUG 2022-02-14 16:38:05,748 stack ['$2load_global.0', '$8binary_subscr.3', '$14binary_subscr.6']
DEBUG 2022-02-14 16:38:05,748 dispatch pc=18, inst=LOAD_METHOD(arg=2, lineno=2)
DEBUG 2022-02-14 16:38:05,748 stack ['$2load_global.0', '$8binary_subscr.3', '$14binary_subscr.6', '$16load_global.7']
DEBUG 2022-02-14 16:38:05,748 dispatch pc=20, inst=LOAD_CONST(arg=2, lineno=2)
DEBUG 2022-02-14 16:38:05,748 stack ['$2load_global.0', '$8binary_subscr.3', '$14binary_subscr.6', '$18load_method.8']
DEBUG 2022-02-14 16:38:05,748 dispatch pc=22, inst=CALL_METHOD(arg=1, lineno=2)
DEBUG 2022-02-14 16:38:05,748 stack ['$2load_global.0', '$8binary_subscr.3', '$14binary_subscr.6', '$18load_method.8', '$const20.9']
DEBUG 2022-02-14 16:38:05,749 dispatch pc=24, inst=BINARY_ADD(arg=None, lineno=2)
DEBUG 2022-02-14 16:38:05,749 stack ['$2load_global.0', '$8binary_subscr.3', '$14binary_subscr.6', '$22call_method.10']
DEBUG 2022-02-14 16:38:05,749 dispatch pc=26, inst=CALL_FUNCTION(arg=2, lineno=2)
DEBUG 2022-02-14 16:38:05,749 stack ['$2load_global.0', '$8binary_subscr.3', '$24binary_add.11']
DEBUG 2022-02-14 16:38:05,749 dispatch pc=28, inst=GET_ITER(arg=None, lineno=2)
DEBUG 2022-02-14 16:38:05,749 stack ['$26call_function.12']
DEBUG 2022-02-14 16:38:05,749 end state. edges=[Edge(pc=30, stack=('$28get_iter.13',), blockstack=(), npush=0)]
DEBUG 2022-02-14 16:38:05,749 pending: deque([State(pc_initial=30 nstack_initial=1)])
DEBUG 2022-02-14 16:38:05,749 stack: ['$phi30.0']
DEBUG 2022-02-14 16:38:05,749 dispatch pc=30, inst=FOR_ITER(arg=8, lineno=2)
DEBUG 2022-02-14 16:38:05,749 stack ['$phi30.0']
DEBUG 2022-02-14 16:38:05,749 end state. edges=[Edge(pc=40, stack=(), blockstack=(), npush=0), Edge(pc=32, stack=('$phi30.0', '$30for_iter.2'), blockstack=(), npush=0)]
DEBUG 2022-02-14 16:38:05,749 pending: deque([State(pc_initial=40 nstack_initial=0), State(pc_initial=32 nstack_initial=2)])
DEBUG 2022-02-14 16:38:05,749 stack: []
DEBUG 2022-02-14 16:38:05,749 dispatch pc=40, inst=LOAD_CONST(arg=0, lineno=4)
DEBUG 2022-02-14 16:38:05,749 stack []
DEBUG 2022-02-14 16:38:05,749 dispatch pc=42, inst=RETURN_VALUE(arg=None, lineno=4)
DEBUG 2022-02-14 16:38:05,749 stack ['$const40.0']
DEBUG 2022-02-14 16:38:05,749 end state. edges=[]
DEBUG 2022-02-14 16:38:05,749 pending: deque([State(pc_initial=32 nstack_initial=2)])
DEBUG 2022-02-14 16:38:05,749 stack: ['$phi32.0', '$phi32.1']
DEBUG 2022-02-14 16:38:05,749 dispatch pc=32, inst=STORE_FAST(arg=2, lineno=2)
DEBUG 2022-02-14 16:38:05,750 stack ['$phi32.0', '$phi32.1']
DEBUG 2022-02-14 16:38:05,750 dispatch pc=34, inst=LOAD_CONST(arg=1, lineno=3)
DEBUG 2022-02-14 16:38:05,750 stack ['$phi32.0']
DEBUG 2022-02-14 16:38:05,750 dispatch pc=36, inst=STORE_FAST(arg=3, lineno=3)
DEBUG 2022-02-14 16:38:05,750 stack ['$phi32.0', '$const34.2']
DEBUG 2022-02-14 16:38:05,750 dispatch pc=38, inst=JUMP_ABSOLUTE(arg=30, lineno=3)
DEBUG 2022-02-14 16:38:05,750 stack ['$phi32.0']
DEBUG 2022-02-14 16:38:05,750 end state. edges=[Edge(pc=30, stack=('$phi32.0',), blockstack=(), npush=0)]
DEBUG 2022-02-14 16:38:05,750 pending: deque([State(pc_initial=30 nstack_initial=1)])
DEBUG 2022-02-14 16:38:05,750 -------------------------Prune PHIs-------------------------
DEBUG 2022-02-14 16:38:05,750 Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=30 nstack_initial=1): {'$phi30.0'},
             State(pc_initial=32 nstack_initial=2): {'$phi32.1'},
             State(pc_initial=40 nstack_initial=0): set()})
DEBUG 2022-02-14 16:38:05,750 defmap: {'$phi30.0': State(pc_initial=0 nstack_initial=0),
 '$phi32.1': State(pc_initial=30 nstack_initial=1)}
DEBUG 2022-02-14 16:38:05,750 phismap: defaultdict(<class 'set'>,
            {'$phi30.0': {('$28get_iter.13',
                           State(pc_initial=0 nstack_initial=0)),
                          ('$phi32.0', State(pc_initial=32 nstack_initial=2))},
             '$phi32.0': {('$phi30.0', State(pc_initial=30 nstack_initial=1))},
             '$phi32.1': {('$30for_iter.2',
                           State(pc_initial=30 nstack_initial=1))}})
DEBUG 2022-02-14 16:38:05,751 changing phismap: defaultdict(<class 'set'>,
            {'$phi30.0': {('$28get_iter.13',
                           State(pc_initial=0 nstack_initial=0)),
                          ('$phi30.0', State(pc_initial=30 nstack_initial=1))},
             '$phi32.0': {('$28get_iter.13',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi32.1': {('$30for_iter.2',
                           State(pc_initial=30 nstack_initial=1))}})
DEBUG 2022-02-14 16:38:05,751 changing phismap: defaultdict(<class 'set'>,
            {'$phi30.0': {('$28get_iter.13',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi32.0': {('$28get_iter.13',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi32.1': {('$30for_iter.2',
                           State(pc_initial=30 nstack_initial=1))}})
DEBUG 2022-02-14 16:38:05,751 changing phismap: defaultdict(<class 'set'>,
            {'$phi30.0': {('$28get_iter.13',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi32.0': {('$28get_iter.13',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi32.1': {('$30for_iter.2',
                           State(pc_initial=30 nstack_initial=1))}})
DEBUG 2022-02-14 16:38:05,751 keep phismap: {'$phi30.0': {('$28get_iter.13', State(pc_initial=0 nstack_initial=0))},
 '$phi32.1': {('$30for_iter.2', State(pc_initial=30 nstack_initial=1))}}
DEBUG 2022-02-14 16:38:05,751 new_out: defaultdict(<class 'dict'>,
            {State(pc_initial=0 nstack_initial=0): {'$phi30.0': '$28get_iter.13'},
             State(pc_initial=30 nstack_initial=1): {'$phi32.1': '$30for_iter.2'}})
DEBUG 2022-02-14 16:38:05,751 ----------------------DONE Prune PHIs-----------------------
DEBUG 2022-02-14 16:38:05,751 block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$2load_global.0'}), (4, {'res': '$sched4.1'}), (6, {'res': '$const6.2'}), (8, {'index': '$const6.2', 'target': '$sched4.1', 'res': '$8binary_subscr.3'}), (10, {'res': '$sched10.4'}), (12, {'res': '$const12.5'}), (14, {'index': '$const12.5', 'target': '$sched10.4', 'res': '$14binary_subscr.6'}), (16, {'res': '$16load_global.7'}), (18, {'item': '$16load_global.7', 'res': '$18load_method.8'}), (20, {'res': '$const20.9'}), (22, {'func': '$18load_method.8', 'args': ['$const20.9'], 'res': '$22call_method.10'}), (24, {'lhs': '$14binary_subscr.6', 'rhs': '$22call_method.10', 'res': '$24binary_add.11'}), (26, {'func': '$2load_global.0', 'args': ['$8binary_subscr.3', '$24binary_add.11'], 'res': '$26call_function.12'}), (28, {'value': '$26call_function.12', 'res': '$28get_iter.13'})), outgoing_phis={'$phi30.0': '$28get_iter.13'}, blockstack=(), active_try_block=None, outgoing_edgepushed={30: ('$28get_iter.13',)})
DEBUG 2022-02-14 16:38:05,752 block_infos State(pc_initial=30 nstack_initial=1):
AdaptBlockInfo(insts=((30, {'iterator': '$phi30.0', 'pair': '$30for_iter.1', 'indval': '$30for_iter.2', 'pred': '$30for_iter.3'}),), outgoing_phis={'$phi32.1': '$30for_iter.2'}, blockstack=(), active_try_block=None, outgoing_edgepushed={40: (), 32: ('$phi30.0', '$30for_iter.2')})
DEBUG 2022-02-14 16:38:05,752 block_infos State(pc_initial=32 nstack_initial=2):
AdaptBlockInfo(insts=((32, {'value': '$phi32.1'}), (34, {'res': '$const34.2'}), (36, {'value': '$const34.2'}), (38, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={30: ('$phi32.0',)})
DEBUG 2022-02-14 16:38:05,752 block_infos State(pc_initial=40 nstack_initial=0):
AdaptBlockInfo(insts=((40, {'res': '$const40.0'}), (42, {'retval': '$const40.0', 'castval': '$42return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG 2022-02-14 16:38:05,752 label 0:
    sched = arg(0, name=sched)               ['sched']
    H__batch = arg(1, name=H__batch)         ['H__batch']
    $2load_global.0 = global(range: <class 'range'>) ['$2load_global.0']
    $const6.2 = const(int, 0)                ['$const6.2']
    $8binary_subscr.3 = getitem(value=sched, index=$const6.2, fn=<built-in function getitem>) ['$8binary_subscr.3', '$const6.2', 'sched']
    $const12.5 = const(int, 1)               ['$const12.5']
    $14binary_subscr.6 = getitem(value=sched, index=$const12.5, fn=<built-in function getitem>) ['$14binary_subscr.6', '$const12.5', 'sched']
    $16load_global.7 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>) ['$16load_global.7']
    $18load_method.8 = getattr(value=$16load_global.7, attr=uint8) ['$16load_global.7', '$18load_method.8']
    $const20.9 = const(int, 1)               ['$const20.9']
    $22call_method.10 = call $18load_method.8($const20.9, func=$18load_method.8, args=[Var($const20.9, <string>:2)], kws=(), vararg=None, target=None) ['$18load_method.8', '$22call_method.10', '$const20.9']
    $24binary_add.11 = $14binary_subscr.6 + $22call_method.10 ['$14binary_subscr.6', '$22call_method.10', '$24binary_add.11']
    $26call_function.12 = call $2load_global.0($8binary_subscr.3, $24binary_add.11, func=$2load_global.0, args=[Var($8binary_subscr.3, <string>:2), Var($24binary_add.11, <string>:2)], kws=(), vararg=None, target=None) ['$24binary_add.11', '$26call_function.12', '$2load_global.0', '$8binary_subscr.3']
    $28get_iter.13 = getiter(value=$26call_function.12) ['$26call_function.12', '$28get_iter.13']
    $phi30.0 = $28get_iter.13                ['$28get_iter.13', '$phi30.0']
    jump 30                                  []
label 30:
    $30for_iter.1 = iternext(value=$phi30.0) ['$30for_iter.1', '$phi30.0']
    $30for_iter.2 = pair_first(value=$30for_iter.1) ['$30for_iter.1', '$30for_iter.2']
    $30for_iter.3 = pair_second(value=$30for_iter.1) ['$30for_iter.1', '$30for_iter.3']
    $phi32.1 = $30for_iter.2                 ['$30for_iter.2', '$phi32.1']
    branch $30for_iter.3, 32, 40             ['$30for_iter.3']
label 32:
    parfor__index_203 = $phi32.1             ['$phi32.1', 'parfor__index_203']
    __sentinel__0 = const(int, 0)            ['__sentinel__0']
    jump 30                                  []
label 40:
    $const40.0 = const(NoneType, None)       ['$const40.0']
    $42return_value.1 = cast(value=$const40.0) ['$42return_value.1', '$const40.0']
    return $42return_value.1                 ['$42return_value.1']

DEBUG 2022-02-14 16:38:05,758 ==== SSA block analysis pass on 0
DEBUG 2022-02-14 16:38:05,758 Running <numba.core.ssa._GatherDefsHandler object at 0x7fa046b44dc0>
DEBUG 2022-02-14 16:38:05,758 on stmt: sched.791 = arg(0, name=sched)
DEBUG 2022-02-14 16:38:05,758 on stmt: H__batch = arg(1, name=H__batch)
DEBUG 2022-02-14 16:38:05,758 on stmt: $2load_global.0.792 = global(range: <class 'range'>)
DEBUG 2022-02-14 16:38:05,758 on stmt: $const6.2.793 = const(int, 0)
DEBUG 2022-02-14 16:38:05,758 on stmt: $8binary_subscr.3.794 = getitem(value=sched.791, index=$const6.2.793, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:05,758 on stmt: $const12.5.795 = const(int, 1)
DEBUG 2022-02-14 16:38:05,758 on stmt: $14binary_subscr.6.796 = getitem(value=sched.791, index=$const12.5.795, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:05,758 on stmt: $16load_global.7.797 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:38:05,758 on stmt: $18load_method.8.798 = getattr(value=$16load_global.7.797, attr=uint8)
DEBUG 2022-02-14 16:38:05,758 on stmt: $const20.9.799 = const(int, 1)
DEBUG 2022-02-14 16:38:05,758 on stmt: $22call_method.10.800 = call $18load_method.8.798($const20.9.799, func=$18load_method.8.798, args=[Var($const20.9.799, <string>:2)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:05,758 on stmt: $24binary_add.11.801 = $14binary_subscr.6.796 + $22call_method.10.800
DEBUG 2022-02-14 16:38:05,758 on stmt: $26call_function.12.802 = call $2load_global.0.792($8binary_subscr.3.794, $24binary_add.11.801, func=$2load_global.0.792, args=[Var($8binary_subscr.3.794, <string>:2), Var($24binary_add.11.801, <string>:2)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:05,759 on stmt: $28get_iter.13.803 = getiter(value=$26call_function.12.802)
DEBUG 2022-02-14 16:38:05,759 on stmt: $phi30.0.804 = $28get_iter.13.803
DEBUG 2022-02-14 16:38:05,759 on stmt: $expr_out_var.207 = const(complex128, 0j)
DEBUG 2022-02-14 16:38:05,759 on stmt: jump 30
DEBUG 2022-02-14 16:38:05,759 ==== SSA block analysis pass on 30
DEBUG 2022-02-14 16:38:05,759 Running <numba.core.ssa._GatherDefsHandler object at 0x7fa046b44dc0>
DEBUG 2022-02-14 16:38:05,759 on stmt: $30for_iter.1.805 = iternext(value=$phi30.0.804)
DEBUG 2022-02-14 16:38:05,759 on stmt: $30for_iter.2.806 = pair_first(value=$30for_iter.1.805)
DEBUG 2022-02-14 16:38:05,759 on stmt: $30for_iter.3.807 = pair_second(value=$30for_iter.1.805)
DEBUG 2022-02-14 16:38:05,759 on stmt: $phi32.1.808 = $30for_iter.2.806
DEBUG 2022-02-14 16:38:05,759 on stmt: branch $30for_iter.3.807, 32, 877
DEBUG 2022-02-14 16:38:05,759 ==== SSA block analysis pass on 32
DEBUG 2022-02-14 16:38:05,759 Running <numba.core.ssa._GatherDefsHandler object at 0x7fa046b44dc0>
DEBUG 2022-02-14 16:38:05,759 on stmt: parfor__index_203 = $phi32.1.808
DEBUG 2022-02-14 16:38:05,759 on stmt: jump 40
DEBUG 2022-02-14 16:38:05,759 ==== SSA block analysis pass on 877
DEBUG 2022-02-14 16:38:05,759 Running <numba.core.ssa._GatherDefsHandler object at 0x7fa046b44dc0>
DEBUG 2022-02-14 16:38:05,759 on stmt: $const40.0.809 = const(NoneType, None)
DEBUG 2022-02-14 16:38:05,759 on stmt: $42return_value.1.810 = cast(value=$const40.0.809)
DEBUG 2022-02-14 16:38:05,759 on stmt: return $42return_value.1.810
DEBUG 2022-02-14 16:38:05,759 ==== SSA block analysis pass on 40
DEBUG 2022-02-14 16:38:05,759 Running <numba.core.ssa._GatherDefsHandler object at 0x7fa046b44dc0>
DEBUG 2022-02-14 16:38:05,759 on stmt: H__batch[parfor__index_203] = $expr_out_var.207
DEBUG 2022-02-14 16:38:05,759 on stmt: jump 876
DEBUG 2022-02-14 16:38:05,760 ==== SSA block analysis pass on 876
DEBUG 2022-02-14 16:38:05,760 Running <numba.core.ssa._GatherDefsHandler object at 0x7fa046b44dc0>
DEBUG 2022-02-14 16:38:05,760 on stmt: jump 30
DEBUG 2022-02-14 16:38:05,760 defs defaultdict(<class 'list'>,
            {'$14binary_subscr.6.796': [<numba.core.ir.Assign object at 0x7fa0471ca4c0>],
             '$16load_global.7.797': [<numba.core.ir.Assign object at 0x7fa0471ca5b0>],
             '$18load_method.8.798': [<numba.core.ir.Assign object at 0x7fa0471ca040>],
             '$22call_method.10.800': [<numba.core.ir.Assign object at 0x7fa047342c10>],
             '$24binary_add.11.801': [<numba.core.ir.Assign object at 0x7fa047342820>],
             '$26call_function.12.802': [<numba.core.ir.Assign object at 0x7fa0473ac0d0>],
             '$28get_iter.13.803': [<numba.core.ir.Assign object at 0x7fa047142730>],
             '$2load_global.0.792': [<numba.core.ir.Assign object at 0x7fa0471ca820>],
             '$30for_iter.1.805': [<numba.core.ir.Assign object at 0x7fa046a7c040>],
             '$30for_iter.2.806': [<numba.core.ir.Assign object at 0x7fa046a7c6a0>],
             '$30for_iter.3.807': [<numba.core.ir.Assign object at 0x7fa046a7c310>],
             '$42return_value.1.810': [<numba.core.ir.Assign object at 0x7fa046a7c130>],
             '$8binary_subscr.3.794': [<numba.core.ir.Assign object at 0x7fa0471caaf0>],
             '$const12.5.795': [<numba.core.ir.Assign object at 0x7fa0471ca850>],
             '$const20.9.799': [<numba.core.ir.Assign object at 0x7fa0471ca340>],
             '$const40.0.809': [<numba.core.ir.Assign object at 0x7fa046a7c460>],
             '$const6.2.793': [<numba.core.ir.Assign object at 0x7fa0471cad90>],
             '$expr_out_var.207': [<numba.core.ir.Assign object at 0x7fa0472386d0>],
             '$phi30.0.804': [<numba.core.ir.Assign object at 0x7fa0471cae20>],
             '$phi32.1.808': [<numba.core.ir.Assign object at 0x7fa046802400>],
             'H__batch': [<numba.core.ir.Assign object at 0x7fa046a3ee20>],
             'parfor__index_203': [<numba.core.ir.Assign object at 0x7fa046a7c340>],
             'sched.791': [<numba.core.ir.Assign object at 0x7fa046a3ebb0>]})
DEBUG 2022-02-14 16:38:05,760 SSA violators set()
DEBUG 2022-02-14 16:38:05,879 bytecode dump:
>          0	NOP(arg=None, lineno=3)
           2	LOAD_GLOBAL(arg=0, lineno=3)
           4	LOAD_FAST(arg=0, lineno=3)
           6	LOAD_FAST(arg=1, lineno=3)
           8	CALL_FUNCTION(arg=2, lineno=3)
          10	RETURN_VALUE(arg=None, lineno=3)
DEBUG 2022-02-14 16:38:05,879 pending: deque([State(pc_initial=0 nstack_initial=0)])
DEBUG 2022-02-14 16:38:05,879 stack: []
DEBUG 2022-02-14 16:38:05,879 dispatch pc=0, inst=NOP(arg=None, lineno=3)
DEBUG 2022-02-14 16:38:05,879 stack []
DEBUG 2022-02-14 16:38:05,879 dispatch pc=2, inst=LOAD_GLOBAL(arg=0, lineno=3)
DEBUG 2022-02-14 16:38:05,879 stack []
DEBUG 2022-02-14 16:38:05,879 dispatch pc=4, inst=LOAD_FAST(arg=0, lineno=3)
DEBUG 2022-02-14 16:38:05,880 stack ['$2load_global.0']
DEBUG 2022-02-14 16:38:05,880 dispatch pc=6, inst=LOAD_FAST(arg=1, lineno=3)
DEBUG 2022-02-14 16:38:05,880 stack ['$2load_global.0', '$tmp04.1']
DEBUG 2022-02-14 16:38:05,880 dispatch pc=8, inst=CALL_FUNCTION(arg=2, lineno=3)
DEBUG 2022-02-14 16:38:05,880 stack ['$2load_global.0', '$tmp04.1', '$dtype6.2']
DEBUG 2022-02-14 16:38:05,880 dispatch pc=10, inst=RETURN_VALUE(arg=None, lineno=3)
DEBUG 2022-02-14 16:38:05,880 stack ['$8call_function.3']
DEBUG 2022-02-14 16:38:05,880 end state. edges=[]
DEBUG 2022-02-14 16:38:05,880 -------------------------Prune PHIs-------------------------
DEBUG 2022-02-14 16:38:05,880 Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
DEBUG 2022-02-14 16:38:05,880 defmap: {}
DEBUG 2022-02-14 16:38:05,880 phismap: defaultdict(<class 'set'>, {})
DEBUG 2022-02-14 16:38:05,880 changing phismap: defaultdict(<class 'set'>, {})
DEBUG 2022-02-14 16:38:05,880 keep phismap: {}
DEBUG 2022-02-14 16:38:05,880 new_out: defaultdict(<class 'dict'>, {})
DEBUG 2022-02-14 16:38:05,880 ----------------------DONE Prune PHIs-----------------------
DEBUG 2022-02-14 16:38:05,880 block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$2load_global.0'}), (4, {'res': '$tmp04.1'}), (6, {'res': '$dtype6.2'}), (8, {'func': '$2load_global.0', 'args': ['$tmp04.1', '$dtype6.2'], 'res': '$8call_function.3'}), (10, {'retval': '$8call_function.3', 'castval': '$10return_value.4'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG 2022-02-14 16:38:05,881 label 0:
    tmp0 = arg(0, name=tmp0)                 ['tmp0']
    dtype = arg(1, name=dtype)               ['dtype']
    $2load_global.0 = global(intrin: <intrinsic stub>) ['$2load_global.0']
    $8call_function.3 = call $2load_global.0(tmp0, dtype, func=$2load_global.0, args=[Var(tmp0, <string>:3), Var(dtype, <string>:3)], kws=(), vararg=None, target=None) ['$2load_global.0', '$8call_function.3', 'dtype', 'tmp0']
    $10return_value.4 = cast(value=$8call_function.3) ['$10return_value.4', '$8call_function.3']
    return $10return_value.4                 ['$10return_value.4']

DEBUG 2022-02-14 16:38:05,882 ==== SSA block analysis pass on 0
DEBUG 2022-02-14 16:38:05,882 Running <numba.core.ssa._GatherDefsHandler object at 0x7fa0468398b0>
DEBUG 2022-02-14 16:38:05,882 on stmt: tmp0 = arg(0, name=tmp0)
DEBUG 2022-02-14 16:38:05,882 on stmt: dtype = arg(1, name=dtype)
DEBUG 2022-02-14 16:38:05,882 on stmt: $2load_global.0 = global(intrin: <intrinsic stub>)
DEBUG 2022-02-14 16:38:05,882 on stmt: $8call_function.3 = call $2load_global.0(tmp0, dtype, func=$2load_global.0, args=[Var(tmp0, <string>:3), Var(dtype, <string>:3)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:05,882 on stmt: $10return_value.4 = cast(value=$8call_function.3)
DEBUG 2022-02-14 16:38:05,882 on stmt: return $10return_value.4
DEBUG 2022-02-14 16:38:05,882 defs defaultdict(<class 'list'>,
            {'$10return_value.4': [<numba.core.ir.Assign object at 0x7fa04684a0d0>],
             '$2load_global.0': [<numba.core.ir.Assign object at 0x7fa046848b50>],
             '$8call_function.3': [<numba.core.ir.Assign object at 0x7fa046848f70>],
             'dtype': [<numba.core.ir.Assign object at 0x7fa046848070>],
             'tmp0': [<numba.core.ir.Assign object at 0x7fa0468481f0>]})
DEBUG 2022-02-14 16:38:05,882 SSA violators set()
DEBUG 2022-02-14 16:38:05,918 bytecode dump:
>          0	NOP(arg=None, lineno=3)
           2	LOAD_GLOBAL(arg=0, lineno=3)
           4	LOAD_FAST(arg=0, lineno=3)
           6	LOAD_FAST(arg=1, lineno=3)
           8	LOAD_FAST(arg=2, lineno=3)
          10	CALL_FUNCTION(arg=3, lineno=3)
          12	RETURN_VALUE(arg=None, lineno=3)
DEBUG 2022-02-14 16:38:05,918 pending: deque([State(pc_initial=0 nstack_initial=0)])
DEBUG 2022-02-14 16:38:05,918 stack: []
DEBUG 2022-02-14 16:38:05,918 dispatch pc=0, inst=NOP(arg=None, lineno=3)
DEBUG 2022-02-14 16:38:05,918 stack []
DEBUG 2022-02-14 16:38:05,918 dispatch pc=2, inst=LOAD_GLOBAL(arg=0, lineno=3)
DEBUG 2022-02-14 16:38:05,918 stack []
DEBUG 2022-02-14 16:38:05,918 dispatch pc=4, inst=LOAD_FAST(arg=0, lineno=3)
DEBUG 2022-02-14 16:38:05,918 stack ['$2load_global.0']
DEBUG 2022-02-14 16:38:05,919 dispatch pc=6, inst=LOAD_FAST(arg=1, lineno=3)
DEBUG 2022-02-14 16:38:05,919 stack ['$2load_global.0', '$tmp04.1']
DEBUG 2022-02-14 16:38:05,919 dispatch pc=8, inst=LOAD_FAST(arg=2, lineno=3)
DEBUG 2022-02-14 16:38:05,919 stack ['$2load_global.0', '$tmp04.1', '$tmp16.2']
DEBUG 2022-02-14 16:38:05,919 dispatch pc=10, inst=CALL_FUNCTION(arg=3, lineno=3)
DEBUG 2022-02-14 16:38:05,919 stack ['$2load_global.0', '$tmp04.1', '$tmp16.2', '$dtype8.3']
DEBUG 2022-02-14 16:38:05,919 dispatch pc=12, inst=RETURN_VALUE(arg=None, lineno=3)
DEBUG 2022-02-14 16:38:05,919 stack ['$10call_function.4']
DEBUG 2022-02-14 16:38:05,919 end state. edges=[]
DEBUG 2022-02-14 16:38:05,919 -------------------------Prune PHIs-------------------------
DEBUG 2022-02-14 16:38:05,919 Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
DEBUG 2022-02-14 16:38:05,919 defmap: {}
DEBUG 2022-02-14 16:38:05,919 phismap: defaultdict(<class 'set'>, {})
DEBUG 2022-02-14 16:38:05,919 changing phismap: defaultdict(<class 'set'>, {})
DEBUG 2022-02-14 16:38:05,919 keep phismap: {}
DEBUG 2022-02-14 16:38:05,919 new_out: defaultdict(<class 'dict'>, {})
DEBUG 2022-02-14 16:38:05,919 ----------------------DONE Prune PHIs-----------------------
DEBUG 2022-02-14 16:38:05,919 block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$2load_global.0'}), (4, {'res': '$tmp04.1'}), (6, {'res': '$tmp16.2'}), (8, {'res': '$dtype8.3'}), (10, {'func': '$2load_global.0', 'args': ['$tmp04.1', '$tmp16.2', '$dtype8.3'], 'res': '$10call_function.4'}), (12, {'retval': '$10call_function.4', 'castval': '$12return_value.5'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG 2022-02-14 16:38:05,920 label 0:
    tmp0 = arg(0, name=tmp0)                 ['tmp0']
    tmp1 = arg(1, name=tmp1)                 ['tmp1']
    dtype = arg(2, name=dtype)               ['dtype']
    $2load_global.0 = global(intrin: <intrinsic stub>) ['$2load_global.0']
    $10call_function.4 = call $2load_global.0(tmp0, tmp1, dtype, func=$2load_global.0, args=[Var(tmp0, <string>:3), Var(tmp1, <string>:3), Var(dtype, <string>:3)], kws=(), vararg=None, target=None) ['$10call_function.4', '$2load_global.0', 'dtype', 'tmp0', 'tmp1']
    $12return_value.5 = cast(value=$10call_function.4) ['$10call_function.4', '$12return_value.5']
    return $12return_value.5                 ['$12return_value.5']

DEBUG 2022-02-14 16:38:05,921 ==== SSA block analysis pass on 0
DEBUG 2022-02-14 16:38:05,921 Running <numba.core.ssa._GatherDefsHandler object at 0x7fa04663a820>
DEBUG 2022-02-14 16:38:05,921 on stmt: tmp0 = arg(0, name=tmp0)
DEBUG 2022-02-14 16:38:05,921 on stmt: tmp1 = arg(1, name=tmp1)
DEBUG 2022-02-14 16:38:05,921 on stmt: dtype = arg(2, name=dtype)
DEBUG 2022-02-14 16:38:05,921 on stmt: $2load_global.0 = global(intrin: <intrinsic stub>)
DEBUG 2022-02-14 16:38:05,921 on stmt: $10call_function.4 = call $2load_global.0(tmp0, tmp1, dtype, func=$2load_global.0, args=[Var(tmp0, <string>:3), Var(tmp1, <string>:3), Var(dtype, <string>:3)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:05,921 on stmt: $12return_value.5 = cast(value=$10call_function.4)
DEBUG 2022-02-14 16:38:05,921 on stmt: return $12return_value.5
DEBUG 2022-02-14 16:38:05,921 defs defaultdict(<class 'list'>,
            {'$10call_function.4': [<numba.core.ir.Assign object at 0x7fa0466374c0>],
             '$12return_value.5': [<numba.core.ir.Assign object at 0x7fa0466375e0>],
             '$2load_global.0': [<numba.core.ir.Assign object at 0x7fa04663af70>],
             'dtype': [<numba.core.ir.Assign object at 0x7fa04663acd0>],
             'tmp0': [<numba.core.ir.Assign object at 0x7fa04663a520>],
             'tmp1': [<numba.core.ir.Assign object at 0x7fa04663a580>]})
DEBUG 2022-02-14 16:38:05,921 SSA violators set()
DEBUG 2022-02-14 16:38:05,926 bytecode dump:
>          0	NOP(arg=None, lineno=3693)
           2	LOAD_GLOBAL(arg=0, lineno=3693)
           4	LOAD_METHOD(arg=1, lineno=3693)
           6	LOAD_FAST(arg=0, lineno=3693)
           8	LOAD_FAST(arg=2, lineno=3693)
          10	CALL_METHOD(arg=2, lineno=3693)
          12	STORE_FAST(arg=3, lineno=3693)
          14	LOAD_GLOBAL(arg=0, lineno=3694)
          16	LOAD_METHOD(arg=2, lineno=3694)
          18	LOAD_FAST(arg=3, lineno=3694)
          20	LOAD_ATTR(arg=3, lineno=3694)
          22	CALL_METHOD(arg=1, lineno=3694)
          24	GET_ITER(arg=None, lineno=3694)
>         26	FOR_ITER(arg=12, lineno=3694)
          28	STORE_FAST(arg=4, lineno=3694)
          30	LOAD_FAST(arg=1, lineno=3695)
          32	LOAD_FAST(arg=3, lineno=3695)
          34	LOAD_FAST(arg=4, lineno=3695)
          36	STORE_SUBSCR(arg=None, lineno=3695)
          38	JUMP_ABSOLUTE(arg=26, lineno=3695)
>         40	LOAD_FAST(arg=3, lineno=3696)
          42	RETURN_VALUE(arg=None, lineno=3696)
DEBUG 2022-02-14 16:38:05,926 pending: deque([State(pc_initial=0 nstack_initial=0)])
DEBUG 2022-02-14 16:38:05,927 stack: []
DEBUG 2022-02-14 16:38:05,927 dispatch pc=0, inst=NOP(arg=None, lineno=3693)
DEBUG 2022-02-14 16:38:05,927 stack []
DEBUG 2022-02-14 16:38:05,927 dispatch pc=2, inst=LOAD_GLOBAL(arg=0, lineno=3693)
DEBUG 2022-02-14 16:38:05,927 stack []
DEBUG 2022-02-14 16:38:05,927 dispatch pc=4, inst=LOAD_METHOD(arg=1, lineno=3693)
DEBUG 2022-02-14 16:38:05,927 stack ['$2load_global.0']
DEBUG 2022-02-14 16:38:05,927 dispatch pc=6, inst=LOAD_FAST(arg=0, lineno=3693)
DEBUG 2022-02-14 16:38:05,927 stack ['$4load_method.1']
DEBUG 2022-02-14 16:38:05,927 dispatch pc=8, inst=LOAD_FAST(arg=2, lineno=3693)
DEBUG 2022-02-14 16:38:05,927 stack ['$4load_method.1', '$shape6.2']
DEBUG 2022-02-14 16:38:05,927 dispatch pc=10, inst=CALL_METHOD(arg=2, lineno=3693)
DEBUG 2022-02-14 16:38:05,927 stack ['$4load_method.1', '$shape6.2', '$dtype8.3']
DEBUG 2022-02-14 16:38:05,927 dispatch pc=12, inst=STORE_FAST(arg=3, lineno=3693)
DEBUG 2022-02-14 16:38:05,927 stack ['$10call_method.4']
DEBUG 2022-02-14 16:38:05,927 dispatch pc=14, inst=LOAD_GLOBAL(arg=0, lineno=3694)
DEBUG 2022-02-14 16:38:05,927 stack []
DEBUG 2022-02-14 16:38:05,927 dispatch pc=16, inst=LOAD_METHOD(arg=2, lineno=3694)
DEBUG 2022-02-14 16:38:05,927 stack ['$14load_global.5']
DEBUG 2022-02-14 16:38:05,927 dispatch pc=18, inst=LOAD_FAST(arg=3, lineno=3694)
DEBUG 2022-02-14 16:38:05,927 stack ['$16load_method.6']
DEBUG 2022-02-14 16:38:05,927 dispatch pc=20, inst=LOAD_ATTR(arg=3, lineno=3694)
DEBUG 2022-02-14 16:38:05,927 stack ['$16load_method.6', '$arr18.7']
DEBUG 2022-02-14 16:38:05,927 dispatch pc=22, inst=CALL_METHOD(arg=1, lineno=3694)
DEBUG 2022-02-14 16:38:05,928 stack ['$16load_method.6', '$20load_attr.8']
DEBUG 2022-02-14 16:38:05,928 dispatch pc=24, inst=GET_ITER(arg=None, lineno=3694)
DEBUG 2022-02-14 16:38:05,928 stack ['$22call_method.9']
DEBUG 2022-02-14 16:38:05,928 end state. edges=[Edge(pc=26, stack=('$24get_iter.10',), blockstack=(), npush=0)]
DEBUG 2022-02-14 16:38:05,928 pending: deque([State(pc_initial=26 nstack_initial=1)])
DEBUG 2022-02-14 16:38:05,928 stack: ['$phi26.0']
DEBUG 2022-02-14 16:38:05,928 dispatch pc=26, inst=FOR_ITER(arg=12, lineno=3694)
DEBUG 2022-02-14 16:38:05,928 stack ['$phi26.0']
DEBUG 2022-02-14 16:38:05,928 end state. edges=[Edge(pc=40, stack=(), blockstack=(), npush=0), Edge(pc=28, stack=('$phi26.0', '$26for_iter.2'), blockstack=(), npush=0)]
DEBUG 2022-02-14 16:38:05,928 pending: deque([State(pc_initial=40 nstack_initial=0), State(pc_initial=28 nstack_initial=2)])
DEBUG 2022-02-14 16:38:05,928 stack: []
DEBUG 2022-02-14 16:38:05,928 dispatch pc=40, inst=LOAD_FAST(arg=3, lineno=3696)
DEBUG 2022-02-14 16:38:05,928 stack []
DEBUG 2022-02-14 16:38:05,928 dispatch pc=42, inst=RETURN_VALUE(arg=None, lineno=3696)
DEBUG 2022-02-14 16:38:05,928 stack ['$arr40.0']
DEBUG 2022-02-14 16:38:05,928 end state. edges=[]
DEBUG 2022-02-14 16:38:05,928 pending: deque([State(pc_initial=28 nstack_initial=2)])
DEBUG 2022-02-14 16:38:05,929 stack: ['$phi28.0', '$phi28.1']
DEBUG 2022-02-14 16:38:05,929 dispatch pc=28, inst=STORE_FAST(arg=4, lineno=3694)
DEBUG 2022-02-14 16:38:05,929 stack ['$phi28.0', '$phi28.1']
DEBUG 2022-02-14 16:38:05,929 dispatch pc=30, inst=LOAD_FAST(arg=1, lineno=3695)
DEBUG 2022-02-14 16:38:05,929 stack ['$phi28.0']
DEBUG 2022-02-14 16:38:05,929 dispatch pc=32, inst=LOAD_FAST(arg=3, lineno=3695)
DEBUG 2022-02-14 16:38:05,929 stack ['$phi28.0', '$value30.2']
DEBUG 2022-02-14 16:38:05,929 dispatch pc=34, inst=LOAD_FAST(arg=4, lineno=3695)
DEBUG 2022-02-14 16:38:05,929 stack ['$phi28.0', '$value30.2', '$arr32.3']
DEBUG 2022-02-14 16:38:05,929 dispatch pc=36, inst=STORE_SUBSCR(arg=None, lineno=3695)
DEBUG 2022-02-14 16:38:05,929 stack ['$phi28.0', '$value30.2', '$arr32.3', '$idx34.4']
DEBUG 2022-02-14 16:38:05,929 dispatch pc=38, inst=JUMP_ABSOLUTE(arg=26, lineno=3695)
DEBUG 2022-02-14 16:38:05,929 stack ['$phi28.0']
DEBUG 2022-02-14 16:38:05,929 end state. edges=[Edge(pc=26, stack=('$phi28.0',), blockstack=(), npush=0)]
DEBUG 2022-02-14 16:38:05,929 pending: deque([State(pc_initial=26 nstack_initial=1)])
DEBUG 2022-02-14 16:38:05,929 -------------------------Prune PHIs-------------------------
DEBUG 2022-02-14 16:38:05,929 Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=26 nstack_initial=1): {'$phi26.0'},
             State(pc_initial=28 nstack_initial=2): {'$phi28.1'},
             State(pc_initial=40 nstack_initial=0): set()})
DEBUG 2022-02-14 16:38:05,930 defmap: {'$phi26.0': State(pc_initial=0 nstack_initial=0),
 '$phi28.1': State(pc_initial=26 nstack_initial=1)}
DEBUG 2022-02-14 16:38:05,930 phismap: defaultdict(<class 'set'>,
            {'$phi26.0': {('$24get_iter.10',
                           State(pc_initial=0 nstack_initial=0)),
                          ('$phi28.0', State(pc_initial=28 nstack_initial=2))},
             '$phi28.0': {('$phi26.0', State(pc_initial=26 nstack_initial=1))},
             '$phi28.1': {('$26for_iter.2',
                           State(pc_initial=26 nstack_initial=1))}})
DEBUG 2022-02-14 16:38:05,930 changing phismap: defaultdict(<class 'set'>,
            {'$phi26.0': {('$24get_iter.10',
                           State(pc_initial=0 nstack_initial=0)),
                          ('$phi26.0', State(pc_initial=26 nstack_initial=1))},
             '$phi28.0': {('$24get_iter.10',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi28.1': {('$26for_iter.2',
                           State(pc_initial=26 nstack_initial=1))}})
DEBUG 2022-02-14 16:38:05,930 changing phismap: defaultdict(<class 'set'>,
            {'$phi26.0': {('$24get_iter.10',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi28.0': {('$24get_iter.10',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi28.1': {('$26for_iter.2',
                           State(pc_initial=26 nstack_initial=1))}})
DEBUG 2022-02-14 16:38:05,930 changing phismap: defaultdict(<class 'set'>,
            {'$phi26.0': {('$24get_iter.10',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi28.0': {('$24get_iter.10',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi28.1': {('$26for_iter.2',
                           State(pc_initial=26 nstack_initial=1))}})
DEBUG 2022-02-14 16:38:05,930 keep phismap: {'$phi26.0': {('$24get_iter.10', State(pc_initial=0 nstack_initial=0))},
 '$phi28.1': {('$26for_iter.2', State(pc_initial=26 nstack_initial=1))}}
DEBUG 2022-02-14 16:38:05,931 new_out: defaultdict(<class 'dict'>,
            {State(pc_initial=0 nstack_initial=0): {'$phi26.0': '$24get_iter.10'},
             State(pc_initial=26 nstack_initial=1): {'$phi28.1': '$26for_iter.2'}})
DEBUG 2022-02-14 16:38:05,931 ----------------------DONE Prune PHIs-----------------------
DEBUG 2022-02-14 16:38:05,931 block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$2load_global.0'}), (4, {'item': '$2load_global.0', 'res': '$4load_method.1'}), (6, {'res': '$shape6.2'}), (8, {'res': '$dtype8.3'}), (10, {'func': '$4load_method.1', 'args': ['$shape6.2', '$dtype8.3'], 'res': '$10call_method.4'}), (12, {'value': '$10call_method.4'}), (14, {'res': '$14load_global.5'}), (16, {'item': '$14load_global.5', 'res': '$16load_method.6'}), (18, {'res': '$arr18.7'}), (20, {'item': '$arr18.7', 'res': '$20load_attr.8'}), (22, {'func': '$16load_method.6', 'args': ['$20load_attr.8'], 'res': '$22call_method.9'}), (24, {'value': '$22call_method.9', 'res': '$24get_iter.10'})), outgoing_phis={'$phi26.0': '$24get_iter.10'}, blockstack=(), active_try_block=None, outgoing_edgepushed={26: ('$24get_iter.10',)})
DEBUG 2022-02-14 16:38:05,931 block_infos State(pc_initial=26 nstack_initial=1):
AdaptBlockInfo(insts=((26, {'iterator': '$phi26.0', 'pair': '$26for_iter.1', 'indval': '$26for_iter.2', 'pred': '$26for_iter.3'}),), outgoing_phis={'$phi28.1': '$26for_iter.2'}, blockstack=(), active_try_block=None, outgoing_edgepushed={40: (), 28: ('$phi26.0', '$26for_iter.2')})
DEBUG 2022-02-14 16:38:05,931 block_infos State(pc_initial=28 nstack_initial=2):
AdaptBlockInfo(insts=((28, {'value': '$phi28.1'}), (30, {'res': '$value30.2'}), (32, {'res': '$arr32.3'}), (34, {'res': '$idx34.4'}), (36, {'target': '$arr32.3', 'index': '$idx34.4', 'value': '$value30.2'}), (38, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={26: ('$phi28.0',)})
DEBUG 2022-02-14 16:38:05,931 block_infos State(pc_initial=40 nstack_initial=0):
AdaptBlockInfo(insts=((40, {'res': '$arr40.0'}), (42, {'retval': '$arr40.0', 'castval': '$42return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG 2022-02-14 16:38:05,932 label 0:
    shape = arg(0, name=shape)               ['shape']
    value = arg(1, name=value)               ['value']
    dtype = arg(2, name=dtype)               ['dtype']
    $2load_global.0 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>) ['$2load_global.0']
    $4load_method.1 = getattr(value=$2load_global.0, attr=empty) ['$2load_global.0', '$4load_method.1']
    arr = call $4load_method.1(shape, dtype, func=$4load_method.1, args=[Var(shape, arrayobj.py:3693), Var(dtype, arrayobj.py:3693)], kws=(), vararg=None, target=None) ['$4load_method.1', 'arr', 'dtype', 'shape']
    $14load_global.5 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>) ['$14load_global.5']
    $16load_method.6 = getattr(value=$14load_global.5, attr=ndindex) ['$14load_global.5', '$16load_method.6']
    $20load_attr.8 = getattr(value=arr, attr=shape) ['$20load_attr.8', 'arr']
    $22call_method.9 = call $16load_method.6($20load_attr.8, func=$16load_method.6, args=[Var($20load_attr.8, arrayobj.py:3694)], kws=(), vararg=None, target=None) ['$16load_method.6', '$20load_attr.8', '$22call_method.9']
    $24get_iter.10 = getiter(value=$22call_method.9) ['$22call_method.9', '$24get_iter.10']
    $phi26.0 = $24get_iter.10                ['$24get_iter.10', '$phi26.0']
    jump 26                                  []
label 26:
    $26for_iter.1 = iternext(value=$phi26.0) ['$26for_iter.1', '$phi26.0']
    $26for_iter.2 = pair_first(value=$26for_iter.1) ['$26for_iter.1', '$26for_iter.2']
    $26for_iter.3 = pair_second(value=$26for_iter.1) ['$26for_iter.1', '$26for_iter.3']
    $phi28.1 = $26for_iter.2                 ['$26for_iter.2', '$phi28.1']
    branch $26for_iter.3, 28, 40             ['$26for_iter.3']
label 28:
    idx = $phi28.1                           ['$phi28.1', 'idx']
    arr[idx] = value                         ['arr', 'idx', 'value']
    jump 26                                  []
label 40:
    $42return_value.1 = cast(value=arr)      ['$42return_value.1', 'arr']
    return $42return_value.1                 ['$42return_value.1']

DEBUG 2022-02-14 16:38:05,935 ==== SSA block analysis pass on 0
DEBUG 2022-02-14 16:38:05,935 Running <numba.core.ssa._GatherDefsHandler object at 0x7fa046fffb80>
DEBUG 2022-02-14 16:38:05,935 on stmt: shape = arg(0, name=shape)
DEBUG 2022-02-14 16:38:05,935 on stmt: value = arg(1, name=value)
DEBUG 2022-02-14 16:38:05,935 on stmt: dtype = arg(2, name=dtype)
DEBUG 2022-02-14 16:38:05,935 on stmt: $2load_global.0 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:38:05,935 on stmt: $4load_method.1 = getattr(value=$2load_global.0, attr=empty)
DEBUG 2022-02-14 16:38:05,935 on stmt: arr = call $4load_method.1(shape, dtype, func=$4load_method.1, args=[Var(shape, arrayobj.py:3693), Var(dtype, arrayobj.py:3693)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:05,935 on stmt: $14load_global.5 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:38:05,935 on stmt: $16load_method.6 = getattr(value=$14load_global.5, attr=ndindex)
DEBUG 2022-02-14 16:38:05,935 on stmt: $20load_attr.8 = getattr(value=arr, attr=shape)
DEBUG 2022-02-14 16:38:05,935 on stmt: $22call_method.9 = call $16load_method.6($20load_attr.8, func=$16load_method.6, args=[Var($20load_attr.8, arrayobj.py:3694)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:05,935 on stmt: $24get_iter.10 = getiter(value=$22call_method.9)
DEBUG 2022-02-14 16:38:05,935 on stmt: $phi26.0 = $24get_iter.10
DEBUG 2022-02-14 16:38:05,935 on stmt: jump 26
DEBUG 2022-02-14 16:38:05,935 ==== SSA block analysis pass on 26
DEBUG 2022-02-14 16:38:05,935 Running <numba.core.ssa._GatherDefsHandler object at 0x7fa046fffb80>
DEBUG 2022-02-14 16:38:05,935 on stmt: $26for_iter.1 = iternext(value=$phi26.0)
DEBUG 2022-02-14 16:38:05,935 on stmt: $26for_iter.2 = pair_first(value=$26for_iter.1)
DEBUG 2022-02-14 16:38:05,935 on stmt: $26for_iter.3 = pair_second(value=$26for_iter.1)
DEBUG 2022-02-14 16:38:05,935 on stmt: $phi28.1 = $26for_iter.2
DEBUG 2022-02-14 16:38:05,935 on stmt: branch $26for_iter.3, 28, 40
DEBUG 2022-02-14 16:38:05,935 ==== SSA block analysis pass on 28
DEBUG 2022-02-14 16:38:05,935 Running <numba.core.ssa._GatherDefsHandler object at 0x7fa046fffb80>
DEBUG 2022-02-14 16:38:05,936 on stmt: idx = $phi28.1
DEBUG 2022-02-14 16:38:05,936 on stmt: arr[idx] = value
DEBUG 2022-02-14 16:38:05,936 on stmt: jump 26
DEBUG 2022-02-14 16:38:05,936 ==== SSA block analysis pass on 40
DEBUG 2022-02-14 16:38:05,936 Running <numba.core.ssa._GatherDefsHandler object at 0x7fa046fffb80>
DEBUG 2022-02-14 16:38:05,936 on stmt: $42return_value.1 = cast(value=arr)
DEBUG 2022-02-14 16:38:05,936 on stmt: return $42return_value.1
DEBUG 2022-02-14 16:38:05,936 defs defaultdict(<class 'list'>,
            {'$14load_global.5': [<numba.core.ir.Assign object at 0x7fa04662b850>],
             '$16load_method.6': [<numba.core.ir.Assign object at 0x7fa04663a160>],
             '$20load_attr.8': [<numba.core.ir.Assign object at 0x7fa04663a970>],
             '$22call_method.9': [<numba.core.ir.Assign object at 0x7fa046637c70>],
             '$24get_iter.10': [<numba.core.ir.Assign object at 0x7fa0466453a0>],
             '$26for_iter.1': [<numba.core.ir.Assign object at 0x7fa046645190>],
             '$26for_iter.2': [<numba.core.ir.Assign object at 0x7fa046645070>],
             '$26for_iter.3': [<numba.core.ir.Assign object at 0x7fa046645b80>],
             '$2load_global.0': [<numba.core.ir.Assign object at 0x7fa046645790>],
             '$42return_value.1': [<numba.core.ir.Assign object at 0x7fa046fff5b0>],
             '$4load_method.1': [<numba.core.ir.Assign object at 0x7fa046645910>],
             '$phi26.0': [<numba.core.ir.Assign object at 0x7fa04663abe0>],
             '$phi28.1': [<numba.core.ir.Assign object at 0x7fa046645250>],
             'arr': [<numba.core.ir.Assign object at 0x7fa046630970>],
             'dtype': [<numba.core.ir.Assign object at 0x7fa046645610>],
             'idx': [<numba.core.ir.Assign object at 0x7fa046645e50>],
             'shape': [<numba.core.ir.Assign object at 0x7fa046630430>],
             'value': [<numba.core.ir.Assign object at 0x7fa0466454f0>]})
DEBUG 2022-02-14 16:38:05,936 SSA violators set()
DEBUG 2022-02-14 16:38:06,085 bytecode dump:
>          0	NOP(arg=None, lineno=2)
           2	LOAD_GLOBAL(arg=0, lineno=2)
           4	LOAD_METHOD(arg=1, lineno=2)
           6	LOAD_FAST(arg=15, lineno=2)
           8	CALL_METHOD(arg=1, lineno=2)
          10	STORE_FAST(arg=16, lineno=2)
          12	LOAD_GLOBAL(arg=2, lineno=3)
          14	LOAD_FAST(arg=0, lineno=3)
          16	LOAD_CONST(arg=1, lineno=3)
          18	BINARY_SUBSCR(arg=None, lineno=3)
          20	LOAD_FAST(arg=0, lineno=3)
          22	LOAD_CONST(arg=2, lineno=3)
          24	BINARY_SUBSCR(arg=None, lineno=3)
          26	LOAD_GLOBAL(arg=0, lineno=3)
          28	LOAD_METHOD(arg=3, lineno=3)
          30	LOAD_CONST(arg=2, lineno=3)
          32	CALL_METHOD(arg=1, lineno=3)
          34	BINARY_ADD(arg=None, lineno=3)
          36	CALL_FUNCTION(arg=2, lineno=3)
          38	GET_ITER(arg=None, lineno=3)
>         40	FOR_ITER(arg=8, lineno=3)
          42	STORE_FAST(arg=17, lineno=3)
          44	LOAD_CONST(arg=1, lineno=4)
          46	STORE_FAST(arg=18, lineno=4)
          48	JUMP_ABSOLUTE(arg=40, lineno=4)
>         50	LOAD_FAST(arg=16, lineno=5)
          52	LOAD_CONST(arg=0, lineno=5)
          54	LOAD_CONST(arg=0, lineno=5)
          56	BUILD_SLICE(arg=2, lineno=5)
          58	BINARY_SUBSCR(arg=None, lineno=5)
          60	LOAD_FAST(arg=15, lineno=5)
          62	LOAD_CONST(arg=0, lineno=5)
          64	LOAD_CONST(arg=0, lineno=5)
          66	BUILD_SLICE(arg=2, lineno=5)
          68	STORE_SUBSCR(arg=None, lineno=5)
          70	LOAD_CONST(arg=0, lineno=6)
          72	RETURN_VALUE(arg=None, lineno=6)
DEBUG 2022-02-14 16:38:06,085 pending: deque([State(pc_initial=0 nstack_initial=0)])
DEBUG 2022-02-14 16:38:06,085 stack: []
DEBUG 2022-02-14 16:38:06,085 dispatch pc=0, inst=NOP(arg=None, lineno=2)
DEBUG 2022-02-14 16:38:06,085 stack []
DEBUG 2022-02-14 16:38:06,085 dispatch pc=2, inst=LOAD_GLOBAL(arg=0, lineno=2)
DEBUG 2022-02-14 16:38:06,085 stack []
DEBUG 2022-02-14 16:38:06,085 dispatch pc=4, inst=LOAD_METHOD(arg=1, lineno=2)
DEBUG 2022-02-14 16:38:06,085 stack ['$2load_global.0']
DEBUG 2022-02-14 16:38:06,086 dispatch pc=6, inst=LOAD_FAST(arg=15, lineno=2)
DEBUG 2022-02-14 16:38:06,086 stack ['$4load_method.1']
DEBUG 2022-02-14 16:38:06,086 dispatch pc=8, inst=CALL_METHOD(arg=1, lineno=2)
DEBUG 2022-02-14 16:38:06,086 stack ['$4load_method.1', '$H__batch_2__arr6.2']
DEBUG 2022-02-14 16:38:06,086 dispatch pc=10, inst=STORE_FAST(arg=16, lineno=2)
DEBUG 2022-02-14 16:38:06,086 stack ['$8call_method.3']
DEBUG 2022-02-14 16:38:06,086 dispatch pc=12, inst=LOAD_GLOBAL(arg=2, lineno=3)
DEBUG 2022-02-14 16:38:06,086 stack []
DEBUG 2022-02-14 16:38:06,086 dispatch pc=14, inst=LOAD_FAST(arg=0, lineno=3)
DEBUG 2022-02-14 16:38:06,086 stack ['$12load_global.4']
DEBUG 2022-02-14 16:38:06,086 dispatch pc=16, inst=LOAD_CONST(arg=1, lineno=3)
DEBUG 2022-02-14 16:38:06,086 stack ['$12load_global.4', '$sched14.5']
DEBUG 2022-02-14 16:38:06,086 dispatch pc=18, inst=BINARY_SUBSCR(arg=None, lineno=3)
DEBUG 2022-02-14 16:38:06,086 stack ['$12load_global.4', '$sched14.5', '$const16.6']
DEBUG 2022-02-14 16:38:06,086 dispatch pc=20, inst=LOAD_FAST(arg=0, lineno=3)
DEBUG 2022-02-14 16:38:06,086 stack ['$12load_global.4', '$18binary_subscr.7']
DEBUG 2022-02-14 16:38:06,086 dispatch pc=22, inst=LOAD_CONST(arg=2, lineno=3)
DEBUG 2022-02-14 16:38:06,086 stack ['$12load_global.4', '$18binary_subscr.7', '$sched20.8']
DEBUG 2022-02-14 16:38:06,086 dispatch pc=24, inst=BINARY_SUBSCR(arg=None, lineno=3)
DEBUG 2022-02-14 16:38:06,086 stack ['$12load_global.4', '$18binary_subscr.7', '$sched20.8', '$const22.9']
DEBUG 2022-02-14 16:38:06,086 dispatch pc=26, inst=LOAD_GLOBAL(arg=0, lineno=3)
DEBUG 2022-02-14 16:38:06,086 stack ['$12load_global.4', '$18binary_subscr.7', '$24binary_subscr.10']
DEBUG 2022-02-14 16:38:06,086 dispatch pc=28, inst=LOAD_METHOD(arg=3, lineno=3)
DEBUG 2022-02-14 16:38:06,086 stack ['$12load_global.4', '$18binary_subscr.7', '$24binary_subscr.10', '$26load_global.11']
DEBUG 2022-02-14 16:38:06,086 dispatch pc=30, inst=LOAD_CONST(arg=2, lineno=3)
DEBUG 2022-02-14 16:38:06,087 stack ['$12load_global.4', '$18binary_subscr.7', '$24binary_subscr.10', '$28load_method.12']
DEBUG 2022-02-14 16:38:06,087 dispatch pc=32, inst=CALL_METHOD(arg=1, lineno=3)
DEBUG 2022-02-14 16:38:06,087 stack ['$12load_global.4', '$18binary_subscr.7', '$24binary_subscr.10', '$28load_method.12', '$const30.13']
DEBUG 2022-02-14 16:38:06,087 dispatch pc=34, inst=BINARY_ADD(arg=None, lineno=3)
DEBUG 2022-02-14 16:38:06,087 stack ['$12load_global.4', '$18binary_subscr.7', '$24binary_subscr.10', '$32call_method.14']
DEBUG 2022-02-14 16:38:06,087 dispatch pc=36, inst=CALL_FUNCTION(arg=2, lineno=3)
DEBUG 2022-02-14 16:38:06,087 stack ['$12load_global.4', '$18binary_subscr.7', '$34binary_add.15']
DEBUG 2022-02-14 16:38:06,087 dispatch pc=38, inst=GET_ITER(arg=None, lineno=3)
DEBUG 2022-02-14 16:38:06,087 stack ['$36call_function.16']
DEBUG 2022-02-14 16:38:06,087 end state. edges=[Edge(pc=40, stack=('$38get_iter.17',), blockstack=(), npush=0)]
DEBUG 2022-02-14 16:38:06,087 pending: deque([State(pc_initial=40 nstack_initial=1)])
DEBUG 2022-02-14 16:38:06,087 stack: ['$phi40.0']
DEBUG 2022-02-14 16:38:06,087 dispatch pc=40, inst=FOR_ITER(arg=8, lineno=3)
DEBUG 2022-02-14 16:38:06,087 stack ['$phi40.0']
DEBUG 2022-02-14 16:38:06,087 end state. edges=[Edge(pc=50, stack=(), blockstack=(), npush=0), Edge(pc=42, stack=('$phi40.0', '$40for_iter.2'), blockstack=(), npush=0)]
DEBUG 2022-02-14 16:38:06,087 pending: deque([State(pc_initial=50 nstack_initial=0), State(pc_initial=42 nstack_initial=2)])
DEBUG 2022-02-14 16:38:06,087 stack: []
DEBUG 2022-02-14 16:38:06,087 dispatch pc=50, inst=LOAD_FAST(arg=16, lineno=5)
DEBUG 2022-02-14 16:38:06,087 stack []
DEBUG 2022-02-14 16:38:06,087 dispatch pc=52, inst=LOAD_CONST(arg=0, lineno=5)
DEBUG 2022-02-14 16:38:06,087 stack ['$H__batch_250.0']
DEBUG 2022-02-14 16:38:06,087 dispatch pc=54, inst=LOAD_CONST(arg=0, lineno=5)
DEBUG 2022-02-14 16:38:06,087 stack ['$H__batch_250.0', '$const52.1']
DEBUG 2022-02-14 16:38:06,087 dispatch pc=56, inst=BUILD_SLICE(arg=2, lineno=5)
DEBUG 2022-02-14 16:38:06,088 stack ['$H__batch_250.0', '$const52.1', '$const54.2']
DEBUG 2022-02-14 16:38:06,088 dispatch pc=58, inst=BINARY_SUBSCR(arg=None, lineno=5)
DEBUG 2022-02-14 16:38:06,088 stack ['$H__batch_250.0', '$56build_slice.4']
DEBUG 2022-02-14 16:38:06,088 dispatch pc=60, inst=LOAD_FAST(arg=15, lineno=5)
DEBUG 2022-02-14 16:38:06,088 stack ['$58binary_subscr.5']
DEBUG 2022-02-14 16:38:06,088 dispatch pc=62, inst=LOAD_CONST(arg=0, lineno=5)
DEBUG 2022-02-14 16:38:06,088 stack ['$58binary_subscr.5', '$H__batch_2__arr60.6']
DEBUG 2022-02-14 16:38:06,088 dispatch pc=64, inst=LOAD_CONST(arg=0, lineno=5)
DEBUG 2022-02-14 16:38:06,088 stack ['$58binary_subscr.5', '$H__batch_2__arr60.6', '$const62.7']
DEBUG 2022-02-14 16:38:06,088 dispatch pc=66, inst=BUILD_SLICE(arg=2, lineno=5)
DEBUG 2022-02-14 16:38:06,088 stack ['$58binary_subscr.5', '$H__batch_2__arr60.6', '$const62.7', '$const64.8']
DEBUG 2022-02-14 16:38:06,088 dispatch pc=68, inst=STORE_SUBSCR(arg=None, lineno=5)
DEBUG 2022-02-14 16:38:06,088 stack ['$58binary_subscr.5', '$H__batch_2__arr60.6', '$66build_slice.10']
DEBUG 2022-02-14 16:38:06,088 dispatch pc=70, inst=LOAD_CONST(arg=0, lineno=6)
DEBUG 2022-02-14 16:38:06,088 stack []
DEBUG 2022-02-14 16:38:06,088 dispatch pc=72, inst=RETURN_VALUE(arg=None, lineno=6)
DEBUG 2022-02-14 16:38:06,088 stack ['$const70.11']
DEBUG 2022-02-14 16:38:06,088 end state. edges=[]
DEBUG 2022-02-14 16:38:06,088 pending: deque([State(pc_initial=42 nstack_initial=2)])
DEBUG 2022-02-14 16:38:06,088 stack: ['$phi42.0', '$phi42.1']
DEBUG 2022-02-14 16:38:06,088 dispatch pc=42, inst=STORE_FAST(arg=17, lineno=3)
DEBUG 2022-02-14 16:38:06,088 stack ['$phi42.0', '$phi42.1']
DEBUG 2022-02-14 16:38:06,088 dispatch pc=44, inst=LOAD_CONST(arg=1, lineno=4)
DEBUG 2022-02-14 16:38:06,088 stack ['$phi42.0']
DEBUG 2022-02-14 16:38:06,088 dispatch pc=46, inst=STORE_FAST(arg=18, lineno=4)
DEBUG 2022-02-14 16:38:06,088 stack ['$phi42.0', '$const44.2']
DEBUG 2022-02-14 16:38:06,089 dispatch pc=48, inst=JUMP_ABSOLUTE(arg=40, lineno=4)
DEBUG 2022-02-14 16:38:06,089 stack ['$phi42.0']
DEBUG 2022-02-14 16:38:06,089 end state. edges=[Edge(pc=40, stack=('$phi42.0',), blockstack=(), npush=0)]
DEBUG 2022-02-14 16:38:06,089 pending: deque([State(pc_initial=40 nstack_initial=1)])
DEBUG 2022-02-14 16:38:06,089 -------------------------Prune PHIs-------------------------
DEBUG 2022-02-14 16:38:06,089 Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=40 nstack_initial=1): {'$phi40.0'},
             State(pc_initial=42 nstack_initial=2): {'$phi42.1'},
             State(pc_initial=50 nstack_initial=0): set()})
DEBUG 2022-02-14 16:38:06,089 defmap: {'$phi40.0': State(pc_initial=0 nstack_initial=0),
 '$phi42.1': State(pc_initial=40 nstack_initial=1)}
DEBUG 2022-02-14 16:38:06,089 phismap: defaultdict(<class 'set'>,
            {'$phi40.0': {('$38get_iter.17',
                           State(pc_initial=0 nstack_initial=0)),
                          ('$phi42.0', State(pc_initial=42 nstack_initial=2))},
             '$phi42.0': {('$phi40.0', State(pc_initial=40 nstack_initial=1))},
             '$phi42.1': {('$40for_iter.2',
                           State(pc_initial=40 nstack_initial=1))}})
DEBUG 2022-02-14 16:38:06,089 changing phismap: defaultdict(<class 'set'>,
            {'$phi40.0': {('$38get_iter.17',
                           State(pc_initial=0 nstack_initial=0)),
                          ('$phi40.0', State(pc_initial=40 nstack_initial=1))},
             '$phi42.0': {('$38get_iter.17',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi42.1': {('$40for_iter.2',
                           State(pc_initial=40 nstack_initial=1))}})
DEBUG 2022-02-14 16:38:06,089 changing phismap: defaultdict(<class 'set'>,
            {'$phi40.0': {('$38get_iter.17',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi42.0': {('$38get_iter.17',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi42.1': {('$40for_iter.2',
                           State(pc_initial=40 nstack_initial=1))}})
DEBUG 2022-02-14 16:38:06,090 changing phismap: defaultdict(<class 'set'>,
            {'$phi40.0': {('$38get_iter.17',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi42.0': {('$38get_iter.17',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi42.1': {('$40for_iter.2',
                           State(pc_initial=40 nstack_initial=1))}})
DEBUG 2022-02-14 16:38:06,090 keep phismap: {'$phi40.0': {('$38get_iter.17', State(pc_initial=0 nstack_initial=0))},
 '$phi42.1': {('$40for_iter.2', State(pc_initial=40 nstack_initial=1))}}
DEBUG 2022-02-14 16:38:06,090 new_out: defaultdict(<class 'dict'>,
            {State(pc_initial=0 nstack_initial=0): {'$phi40.0': '$38get_iter.17'},
             State(pc_initial=40 nstack_initial=1): {'$phi42.1': '$40for_iter.2'}})
DEBUG 2022-02-14 16:38:06,090 ----------------------DONE Prune PHIs-----------------------
DEBUG 2022-02-14 16:38:06,090 block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$2load_global.0'}), (4, {'item': '$2load_global.0', 'res': '$4load_method.1'}), (6, {'res': '$H__batch_2__arr6.2'}), (8, {'func': '$4load_method.1', 'args': ['$H__batch_2__arr6.2'], 'res': '$8call_method.3'}), (10, {'value': '$8call_method.3'}), (12, {'res': '$12load_global.4'}), (14, {'res': '$sched14.5'}), (16, {'res': '$const16.6'}), (18, {'index': '$const16.6', 'target': '$sched14.5', 'res': '$18binary_subscr.7'}), (20, {'res': '$sched20.8'}), (22, {'res': '$const22.9'}), (24, {'index': '$const22.9', 'target': '$sched20.8', 'res': '$24binary_subscr.10'}), (26, {'res': '$26load_global.11'}), (28, {'item': '$26load_global.11', 'res': '$28load_method.12'}), (30, {'res': '$const30.13'}), (32, {'func': '$28load_method.12', 'args': ['$const30.13'], 'res': '$32call_method.14'}), (34, {'lhs': '$24binary_subscr.10', 'rhs': '$32call_method.14', 'res': '$34binary_add.15'}), (36, {'func': '$12load_global.4', 'args': ['$18binary_subscr.7', '$34binary_add.15'], 'res': '$36call_function.16'}), (38, {'value': '$36call_function.16', 'res': '$38get_iter.17'})), outgoing_phis={'$phi40.0': '$38get_iter.17'}, blockstack=(), active_try_block=None, outgoing_edgepushed={40: ('$38get_iter.17',)})
DEBUG 2022-02-14 16:38:06,090 block_infos State(pc_initial=40 nstack_initial=1):
AdaptBlockInfo(insts=((40, {'iterator': '$phi40.0', 'pair': '$40for_iter.1', 'indval': '$40for_iter.2', 'pred': '$40for_iter.3'}),), outgoing_phis={'$phi42.1': '$40for_iter.2'}, blockstack=(), active_try_block=None, outgoing_edgepushed={50: (), 42: ('$phi40.0', '$40for_iter.2')})
DEBUG 2022-02-14 16:38:06,090 block_infos State(pc_initial=42 nstack_initial=2):
AdaptBlockInfo(insts=((42, {'value': '$phi42.1'}), (44, {'res': '$const44.2'}), (46, {'value': '$const44.2'}), (48, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={40: ('$phi42.0',)})
DEBUG 2022-02-14 16:38:06,090 block_infos State(pc_initial=50 nstack_initial=0):
AdaptBlockInfo(insts=((50, {'res': '$H__batch_250.0'}), (52, {'res': '$const52.1'}), (54, {'res': '$const54.2'}), (56, {'start': '$const52.1', 'stop': '$const54.2', 'step': None, 'res': '$56build_slice.4', 'slicevar': '$56build_slice.3'}), (58, {'index': '$56build_slice.4', 'target': '$H__batch_250.0', 'res': '$58binary_subscr.5'}), (60, {'res': '$H__batch_2__arr60.6'}), (62, {'res': '$const62.7'}), (64, {'res': '$const64.8'}), (66, {'start': '$const62.7', 'stop': '$const64.8', 'step': None, 'res': '$66build_slice.10', 'slicevar': '$66build_slice.9'}), (68, {'target': '$H__batch_2__arr60.6', 'index': '$66build_slice.10', 'value': '$58binary_subscr.5'}), (70, {'res': '$const70.11'}), (72, {'retval': '$const70.11', 'castval': '$72return_value.12'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG 2022-02-14 16:38:06,092 label 0:
    sched = arg(0, name=sched)               ['sched']
    _136binary__add_59 = arg(1, name=_136binary__add_59) ['_136binary__add_59']
    A = arg(2, name=A)                       ['A']
    D = arg(3, name=D)                       ['D']
    N__fixed = arg(4, name=N__fixed)         ['N__fixed']
    N__max = arg(5, name=N__max)             ['N__max']
    batch__max = arg(6, name=batch__max)     ['batch__max']
    binoms = arg(7, name=binoms)             ['binoms']
    edge__reps = arg(8, name=edge__reps)     ['edge__reps']
    edge__reps__size0_160 = arg(9, name=edge__reps__size0_160) ['edge__reps__size0_160']
    glynn = arg(10, name=glynn)              ['glynn']
    n = arg(11, name=n)                      ['n']
    oddV = arg(12, name=oddV)                ['oddV']
    odd__cutoff = arg(13, name=odd__cutoff)  ['odd__cutoff']
    oddloop = arg(14, name=oddloop)          ['oddloop']
    H__batch_2__arr = arg(15, name=H__batch_2__arr) ['H__batch_2__arr']
    $2load_global.0 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>) ['$2load_global.0']
    $4load_method.1 = getattr(value=$2load_global.0, attr=copy) ['$2load_global.0', '$4load_method.1']
    H__batch_2 = call $4load_method.1(H__batch_2__arr, func=$4load_method.1, args=[Var(H__batch_2__arr, <string>:2)], kws=(), vararg=None, target=None) ['$4load_method.1', 'H__batch_2', 'H__batch_2__arr']
    $12load_global.4 = global(range: <class 'range'>) ['$12load_global.4']
    $const16.6 = const(int, 0)               ['$const16.6']
    $18binary_subscr.7 = getitem(value=sched, index=$const16.6, fn=<built-in function getitem>) ['$18binary_subscr.7', '$const16.6', 'sched']
    $const22.9 = const(int, 1)               ['$const22.9']
    $24binary_subscr.10 = getitem(value=sched, index=$const22.9, fn=<built-in function getitem>) ['$24binary_subscr.10', '$const22.9', 'sched']
    $26load_global.11 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>) ['$26load_global.11']
    $28load_method.12 = getattr(value=$26load_global.11, attr=uint8) ['$26load_global.11', '$28load_method.12']
    $const30.13 = const(int, 1)              ['$const30.13']
    $32call_method.14 = call $28load_method.12($const30.13, func=$28load_method.12, args=[Var($const30.13, <string>:3)], kws=(), vararg=None, target=None) ['$28load_method.12', '$32call_method.14', '$const30.13']
    $34binary_add.15 = $24binary_subscr.10 + $32call_method.14 ['$24binary_subscr.10', '$32call_method.14', '$34binary_add.15']
    $36call_function.16 = call $12load_global.4($18binary_subscr.7, $34binary_add.15, func=$12load_global.4, args=[Var($18binary_subscr.7, <string>:3), Var($34binary_add.15, <string>:3)], kws=(), vararg=None, target=None) ['$12load_global.4', '$18binary_subscr.7', '$34binary_add.15', '$36call_function.16']
    $38get_iter.17 = getiter(value=$36call_function.16) ['$36call_function.16', '$38get_iter.17']
    $phi40.0 = $38get_iter.17                ['$38get_iter.17', '$phi40.0']
    jump 40                                  []
label 40:
    $40for_iter.1 = iternext(value=$phi40.0) ['$40for_iter.1', '$phi40.0']
    $40for_iter.2 = pair_first(value=$40for_iter.1) ['$40for_iter.1', '$40for_iter.2']
    $40for_iter.3 = pair_second(value=$40for_iter.1) ['$40for_iter.1', '$40for_iter.3']
    $phi42.1 = $40for_iter.2                 ['$40for_iter.2', '$phi42.1']
    branch $40for_iter.3, 42, 50             ['$40for_iter.3']
label 42:
    parfor__index_230 = $phi42.1             ['$phi42.1', 'parfor__index_230']
    __sentinel__0 = const(int, 0)            ['__sentinel__0']
    jump 40                                  []
label 50:
    $const52.1 = const(NoneType, None)       ['$const52.1']
    $const54.2 = const(NoneType, None)       ['$const54.2']
    $56build_slice.3 = global(slice: <class 'slice'>) ['$56build_slice.3']
    $56build_slice.4 = call $56build_slice.3($const52.1, $const54.2, func=$56build_slice.3, args=(Var($const52.1, <string>:5), Var($const54.2, <string>:5)), kws=(), vararg=None, target=None) ['$56build_slice.3', '$56build_slice.4', '$const52.1', '$const54.2']
    $58binary_subscr.5 = getitem(value=H__batch_2, index=$56build_slice.4, fn=<built-in function getitem>) ['$56build_slice.4', '$58binary_subscr.5', 'H__batch_2']
    $const62.7 = const(NoneType, None)       ['$const62.7']
    $const64.8 = const(NoneType, None)       ['$const64.8']
    $66build_slice.9 = global(slice: <class 'slice'>) ['$66build_slice.9']
    $66build_slice.10 = call $66build_slice.9($const62.7, $const64.8, func=$66build_slice.9, args=(Var($const62.7, <string>:5), Var($const64.8, <string>:5)), kws=(), vararg=None, target=None) ['$66build_slice.10', '$66build_slice.9', '$const62.7', '$const64.8']
    H__batch_2__arr[$66build_slice.10] = $58binary_subscr.5 ['$58binary_subscr.5', '$66build_slice.10', 'H__batch_2__arr']
    $const70.11 = const(NoneType, None)      ['$const70.11']
    $72return_value.12 = cast(value=$const70.11) ['$72return_value.12', '$const70.11']
    return $72return_value.12                ['$72return_value.12']

DEBUG 2022-02-14 16:38:06,117 ==== SSA block analysis pass on 0
DEBUG 2022-02-14 16:38:06,117 Running <numba.core.ssa._GatherDefsHandler object at 0x7fa046f64dc0>
DEBUG 2022-02-14 16:38:06,117 on stmt: sched.834 = arg(0, name=sched)
DEBUG 2022-02-14 16:38:06,117 on stmt: _136binary__add_59 = arg(1, name=_136binary__add_59)
DEBUG 2022-02-14 16:38:06,117 on stmt: A = arg(2, name=A)
DEBUG 2022-02-14 16:38:06,117 on stmt: D = arg(3, name=D)
DEBUG 2022-02-14 16:38:06,117 on stmt: N__fixed = arg(4, name=N__fixed)
DEBUG 2022-02-14 16:38:06,117 on stmt: N__max = arg(5, name=N__max)
DEBUG 2022-02-14 16:38:06,117 on stmt: batch__max = arg(6, name=batch__max)
DEBUG 2022-02-14 16:38:06,117 on stmt: binoms = arg(7, name=binoms)
DEBUG 2022-02-14 16:38:06,117 on stmt: edge__reps = arg(8, name=edge__reps)
DEBUG 2022-02-14 16:38:06,117 on stmt: edge__reps__size0_160 = arg(9, name=edge__reps__size0_160)
DEBUG 2022-02-14 16:38:06,118 on stmt: glynn = arg(10, name=glynn)
DEBUG 2022-02-14 16:38:06,118 on stmt: n = arg(11, name=n)
DEBUG 2022-02-14 16:38:06,118 on stmt: oddV = arg(12, name=oddV)
DEBUG 2022-02-14 16:38:06,118 on stmt: odd__cutoff = arg(13, name=odd__cutoff)
DEBUG 2022-02-14 16:38:06,118 on stmt: oddloop = arg(14, name=oddloop)
DEBUG 2022-02-14 16:38:06,118 on stmt: H__batch_2__arr = arg(15, name=H__batch_2__arr)
DEBUG 2022-02-14 16:38:06,118 on stmt: $2load_global.0.835 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:38:06,118 on stmt: $4load_method.1.836 = getattr(value=$2load_global.0.835, attr=copy)
DEBUG 2022-02-14 16:38:06,118 on stmt: H__batch_2 = call $4load_method.1.836(H__batch_2__arr, func=$4load_method.1.836, args=[Var(H__batch_2__arr, <string>:2)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:06,118 on stmt: $12load_global.4.837 = global(range: <class 'range'>)
DEBUG 2022-02-14 16:38:06,118 on stmt: $const16.6.838 = const(int, 0)
DEBUG 2022-02-14 16:38:06,118 on stmt: $18binary_subscr.7.839 = getitem(value=sched.834, index=$const16.6.838, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:06,118 on stmt: $const22.9.840 = const(int, 1)
DEBUG 2022-02-14 16:38:06,118 on stmt: $24binary_subscr.10.841 = getitem(value=sched.834, index=$const22.9.840, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:06,118 on stmt: $26load_global.11.842 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:38:06,118 on stmt: $28load_method.12.843 = getattr(value=$26load_global.11.842, attr=uint8)
DEBUG 2022-02-14 16:38:06,118 on stmt: $const30.13.844 = const(int, 1)
DEBUG 2022-02-14 16:38:06,118 on stmt: $32call_method.14.845 = call $28load_method.12.843($const30.13.844, func=$28load_method.12.843, args=[Var($const30.13.844, <string>:3)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:06,118 on stmt: $34binary_add.15.846 = $24binary_subscr.10.841 + $32call_method.14.845
DEBUG 2022-02-14 16:38:06,118 on stmt: $36call_function.16.847 = call $12load_global.4.837($18binary_subscr.7.839, $34binary_add.15.846, func=$12load_global.4.837, args=[Var($18binary_subscr.7.839, <string>:3), Var($34binary_add.15.846, <string>:3)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:06,118 on stmt: $38get_iter.17.848 = getiter(value=$36call_function.16.847)
DEBUG 2022-02-14 16:38:06,118 on stmt: $phi40.0.849 = $38get_iter.17.848
DEBUG 2022-02-14 16:38:06,118 on stmt: $const462.12 = const(int, 2)
DEBUG 2022-02-14 16:38:06,118 on stmt: $const390.6 = const(float, -1.0)
DEBUG 2022-02-14 16:38:06,119 on stmt: $const394.8 = const(int, 2)
DEBUG 2022-02-14 16:38:06,119 on stmt: $const410.15 = const(int, 2)
DEBUG 2022-02-14 16:38:06,119 on stmt: $const416.18 = const(int, 0)
DEBUG 2022-02-14 16:38:06,119 on stmt: $const432.25 = const(int, 2)
DEBUG 2022-02-14 16:38:06,119 on stmt: $const436.27 = const(int, 0)
DEBUG 2022-02-14 16:38:06,119 on stmt: bool440 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:38:06,119 on stmt: $282load_global.1 = global(get_submatrices: CPUDispatcher(<function get_submatrices at 0x7fa047ebed30>))
DEBUG 2022-02-14 16:38:06,119 on stmt: $304load_global.12 = global(eigvals: CPUDispatcher(<function eigvals at 0x7fa047e5d430>))
DEBUG 2022-02-14 16:38:06,119 on stmt: $312load_global.15 = global(f_loop: CPUDispatcher(<function f_loop at 0x7fa047ebe9d0>))
DEBUG 2022-02-14 16:38:06,119 on stmt: $328load_global.22 = global(f_loop_odd: CPUDispatcher(<function f_loop_odd at 0x7fa047ebeb80>))
DEBUG 2022-02-14 16:38:06,119 on stmt: $348load_global.31 = global(range: <class 'range'>)
DEBUG 2022-02-14 16:38:06,119 on stmt: $const350.32 = const(int, 2)
DEBUG 2022-02-14 16:38:06,119 on stmt: $const354.34 = const(int, 0)
DEBUG 2022-02-14 16:38:06,119 on stmt: $const360.37 = const(int, 2)
DEBUG 2022-02-14 16:38:06,119 on stmt: $364binary_multiply.39 = $const360.37 * batch__max
DEBUG 2022-02-14 16:38:06,119 on stmt: $368binary_add.41 = $364binary_multiply.39 + odd__cutoff
DEBUG 2022-02-14 16:38:06,119 on stmt: $const370.42 = const(int, 1)
DEBUG 2022-02-14 16:38:06,119 on stmt: $372binary_add.43 = $368binary_add.41 + $const370.42
DEBUG 2022-02-14 16:38:06,119 on stmt: $const168.4 = const(int, 2)
DEBUG 2022-02-14 16:38:06,119 on stmt: $172binary_multiply.6 = $const168.4 * batch__max
DEBUG 2022-02-14 16:38:06,119 on stmt: $176binary_add.8 = $172binary_multiply.6 + odd__cutoff
DEBUG 2022-02-14 16:38:06,120 on stmt: $const178.9 = const(int, 1)
DEBUG 2022-02-14 16:38:06,120 on stmt: $180binary_add.10 = $176binary_add.8 + $const178.9
DEBUG 2022-02-14 16:38:06,120 on stmt: $192load_global.15 = global(find_kept_edges: CPUDispatcher(<function find_kept_edges at 0x7fa047ebe790>))
DEBUG 2022-02-14 16:38:06,120 on stmt: $np_g_var.209 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:38:06,120 on stmt: $empty_attr_attr.210 = getattr(value=$np_g_var.209, attr=empty)
DEBUG 2022-02-14 16:38:06,120 on stmt: $np_typ_var.211 = getattr(value=$np_g_var.209, attr=complex128)
DEBUG 2022-02-14 16:38:06,120 on stmt: Hnew = call $empty_attr_attr.210($180binary_add.10, $np_typ_var.211, func=$empty_attr_attr.210, args=[Var($180binary_add.10, loop_hafnian_batch.py:37), Var($np_typ_var.211, loop_hafnian_batch.py:37)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:06,120 on stmt: binom_prod = const(float, 1.0)
DEBUG 2022-02-14 16:38:06,120 on stmt: $214load_global.23 = global(range: <class 'range'>)
DEBUG 2022-02-14 16:38:06,120 on stmt: $const216.24 = const(int, 1)
DEBUG 2022-02-14 16:38:06,120 on stmt: $const220.26 = const(int, 2)
DEBUG 2022-02-14 16:38:06,120 on stmt: $222binary_floor_divide.27 = n // $const220.26
DEBUG 2022-02-14 16:38:06,120 on stmt: msg.191 = const(str, Sizes of H_batch.2, Hnew do not match on /home/adi/GBS/gbs/loop_hafnian_batch.py (69))
DEBUG 2022-02-14 16:38:06,120 on stmt: assert.192 = global(assert_equiv: <intrinsic assert_equiv>)
DEBUG 2022-02-14 16:38:06,120 on stmt: bool260 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:38:06,120 on stmt: msg.170 = const(str, Sizes of kept_edges, edge_reps do not match on /home/adi/GBS/gbs/loop_hafnian_batch.py (47))
DEBUG 2022-02-14 16:38:06,120 on stmt: assert.171 = global(assert_equiv: <intrinsic assert_equiv>)
DEBUG 2022-02-14 16:38:06,120 on stmt: $np_g_var.214 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:38:06,120 on stmt: $empty_attr_attr.215 = getattr(value=$np_g_var.214, attr=empty)
DEBUG 2022-02-14 16:38:06,120 on stmt: $np_typ_var.216 = getattr(value=$np_g_var.214, attr=int64)
DEBUG 2022-02-14 16:38:06,120 on stmt: delta = call $empty_attr_attr.215(edge__reps__size0_160, $np_typ_var.216, func=$empty_attr_attr.215, args=[Var(edge__reps__size0_160, loop_hafnian_batch.py:28), Var($np_typ_var.216, loop_hafnian_batch.py:47)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:06,120 on stmt: jump 40
DEBUG 2022-02-14 16:38:06,120 ==== SSA block analysis pass on 40
DEBUG 2022-02-14 16:38:06,120 Running <numba.core.ssa._GatherDefsHandler object at 0x7fa046f64dc0>
DEBUG 2022-02-14 16:38:06,120 on stmt: $40for_iter.1.850 = iternext(value=$phi40.0.849)
DEBUG 2022-02-14 16:38:06,121 on stmt: $40for_iter.2.851 = pair_first(value=$40for_iter.1.850)
DEBUG 2022-02-14 16:38:06,121 on stmt: $40for_iter.3.852 = pair_second(value=$40for_iter.1.850)
DEBUG 2022-02-14 16:38:06,121 on stmt: $phi42.1.853 = $40for_iter.2.851
DEBUG 2022-02-14 16:38:06,121 on stmt: branch $40for_iter.3.852, 42, 889
DEBUG 2022-02-14 16:38:06,121 ==== SSA block analysis pass on 42
DEBUG 2022-02-14 16:38:06,121 Running <numba.core.ssa._GatherDefsHandler object at 0x7fa046f64dc0>
DEBUG 2022-02-14 16:38:06,121 on stmt: parfor__index_230 = $phi42.1.853
DEBUG 2022-02-14 16:38:06,121 on stmt: jump 50
DEBUG 2022-02-14 16:38:06,121 ==== SSA block analysis pass on 889
DEBUG 2022-02-14 16:38:06,121 Running <numba.core.ssa._GatherDefsHandler object at 0x7fa046f64dc0>
DEBUG 2022-02-14 16:38:06,121 on stmt: $const52.1.854 = const(NoneType, None)
DEBUG 2022-02-14 16:38:06,121 on stmt: $const54.2.855 = const(NoneType, None)
DEBUG 2022-02-14 16:38:06,121 on stmt: $56build_slice.3.856 = global(slice: <class 'slice'>)
DEBUG 2022-02-14 16:38:06,121 on stmt: $56build_slice.4.857 = call $56build_slice.3.856($const52.1.854, $const54.2.855, func=$56build_slice.3.856, args=(Var($const52.1.854, <string>:5), Var($const54.2.855, <string>:5)), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:06,121 on stmt: $58binary_subscr.5.858 = getitem(value=H__batch_2, index=$56build_slice.4.857, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:06,121 on stmt: $const62.7.859 = const(NoneType, None)
DEBUG 2022-02-14 16:38:06,121 on stmt: $const64.8.860 = const(NoneType, None)
DEBUG 2022-02-14 16:38:06,121 on stmt: $66build_slice.9.861 = global(slice: <class 'slice'>)
DEBUG 2022-02-14 16:38:06,121 on stmt: $66build_slice.10.862 = call $66build_slice.9.861($const62.7.859, $const64.8.860, func=$66build_slice.9.861, args=(Var($const62.7.859, <string>:5), Var($const64.8.860, <string>:5)), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:06,121 on stmt: H__batch_2__arr[$66build_slice.10.862] = $58binary_subscr.5.858
DEBUG 2022-02-14 16:38:06,121 on stmt: $const70.11.863 = const(NoneType, None)
DEBUG 2022-02-14 16:38:06,121 on stmt: $72return_value.12.864 = cast(value=$const70.11.863)
DEBUG 2022-02-14 16:38:06,121 on stmt: return $72return_value.12.864
DEBUG 2022-02-14 16:38:06,121 ==== SSA block analysis pass on 686
DEBUG 2022-02-14 16:38:06,121 Running <numba.core.ssa._GatherDefsHandler object at 0x7fa046f64dc0>
DEBUG 2022-02-14 16:38:06,121 on stmt: $450binary_subscr.6 = getitem(value=Hnew, index=$N_det.252, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:06,122 on stmt: $456binary_multiply.9 = n_det_binom_prod * plus_minus
DEBUG 2022-02-14 16:38:06,122 on stmt: $464binary_floor_divide.13 = N // $const462.12
DEBUG 2022-02-14 16:38:06,122 on stmt: $466binary_subscr.14 = getitem(value=f_even, index=$464binary_floor_divide.13, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:06,122 on stmt: $468binary_multiply.15 = $456binary_multiply.9 * $466binary_subscr.14
DEBUG 2022-02-14 16:38:06,122 on stmt: $470inplace_add.16 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$450binary_subscr.6, rhs=$468binary_multiply.15, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:38:06,122 on stmt: Hnew[$N_det.252] = $470inplace_add.16
DEBUG 2022-02-14 16:38:06,122 on stmt: jump 727
DEBUG 2022-02-14 16:38:06,122 ==== SSA block analysis pass on 725
DEBUG 2022-02-14 16:38:06,122 Running <numba.core.ssa._GatherDefsHandler object at 0x7fa046f64dc0>
DEBUG 2022-02-14 16:38:06,122 on stmt: $484binary_subscr.6 = getitem(value=Hnew, index=$N_det.252, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:06,122 on stmt: $490binary_multiply.9 = n_det_binom_prod * plus_minus
DEBUG 2022-02-14 16:38:06,122 on stmt: $496binary_subscr.12 = getitem(value=f_odd, index=N, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:06,122 on stmt: $498binary_multiply.13 = $490binary_multiply.9 * $496binary_subscr.12
DEBUG 2022-02-14 16:38:06,122 on stmt: $500inplace_add.14 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$484binary_subscr.6, rhs=$498binary_multiply.13, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:38:06,122 on stmt: Hnew[$N_det.252] = $500inplace_add.14
DEBUG 2022-02-14 16:38:06,122 on stmt: jump 727
DEBUG 2022-02-14 16:38:06,122 ==== SSA block analysis pass on 593
DEBUG 2022-02-14 16:38:06,122 Running <numba.core.ssa._GatherDefsHandler object at 0x7fa046f64dc0>
DEBUG 2022-02-14 16:38:06,122 on stmt: delta.2 = kept_edges
DEBUG 2022-02-14 16:38:06,122 on stmt: jump 631
DEBUG 2022-02-14 16:38:06,122 ==== SSA block analysis pass on 670
DEBUG 2022-02-14 16:38:06,122 Running <numba.core.ssa._GatherDefsHandler object at 0x7fa046f64dc0>
DEBUG 2022-02-14 16:38:06,122 on stmt: N = N__fixed + $N_det.252
DEBUG 2022-02-14 16:38:06,122 on stmt: $396binary_floor_divide.9 = N // $const394.8
DEBUG 2022-02-14 16:38:06,122 on stmt: $400binary_subtract.11 = $396binary_floor_divide.9 - val.10
DEBUG 2022-02-14 16:38:06,123 on stmt: plus_minus = $const390.6 ** $400binary_subtract.11
DEBUG 2022-02-14 16:38:06,123 on stmt: $412binary_floor_divide.16 = $N_det.252 // $const410.15
DEBUG 2022-02-14 16:38:06,123 on stmt: $418binary_subscr.19 = static_getitem(value=kept_edges, index=0, index_var=$const416.18, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:06,123 on stmt: $420build_tuple.20 = build_tuple(items=[Var($412binary_floor_divide.16, loop_hafnian_batch.py:62), Var($418binary_subscr.19, loop_hafnian_batch.py:62)])
DEBUG 2022-02-14 16:38:06,123 on stmt: $422binary_subscr.21 = getitem(value=binoms, index=$420build_tuple.20, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:06,123 on stmt: n_det_binom_prod = $422binary_subscr.21 * binom_prod.2
DEBUG 2022-02-14 16:38:06,123 on stmt: $434binary_modulo.26 = $N_det.252 % $const432.25
DEBUG 2022-02-14 16:38:06,123 on stmt: $438compare_op.28 = $434binary_modulo.26 == $const436.27
DEBUG 2022-02-14 16:38:06,123 on stmt: $440pred = call bool440($438compare_op.28, func=bool440, args=(Var($438compare_op.28, loop_hafnian_batch.py:64),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:06,123 on stmt: branch $440pred, 686, 725
DEBUG 2022-02-14 16:38:06,123 ==== SSA block analysis pass on 631
DEBUG 2022-02-14 16:38:06,123 Running <numba.core.ssa._GatherDefsHandler object at 0x7fa046f64dc0>
DEBUG 2022-02-14 16:38:06,123 on stmt: $292call_function.6 = call $282load_global.1(delta.2, A, D, oddV, func=$282load_global.1, args=[Var(delta.2, loop_hafnian_batch.py:51), Var(A, loop_hafnian_batch.py:20), Var(D, loop_hafnian_batch.py:20), Var(oddV, loop_hafnian_batch.py:21)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:06,123 on stmt: $294unpack_sequence.11 = exhaust_iter(value=$292call_function.6, count=4)
DEBUG 2022-02-14 16:38:06,123 on stmt: $AX_S.250 = static_getitem(value=$294unpack_sequence.11, index=0, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:06,123 on stmt: $XD_S.246 = static_getitem(value=$294unpack_sequence.11, index=1, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:06,123 on stmt: $D_S.248 = static_getitem(value=$294unpack_sequence.11, index=2, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:06,123 on stmt: $oddVX_S.249 = static_getitem(value=$294unpack_sequence.11, index=3, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:06,124 on stmt: E = call $304load_global.12($AX_S.250, func=$304load_global.12, args=[Var($AX_S.250, loop_hafnian_batch.py:51)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:06,124 on stmt: f_even = call $312load_global.15(E, $AX_S.250, $XD_S.246, $D_S.248, N__max, func=$312load_global.15, args=[Var(E, loop_hafnian_batch.py:53), Var($AX_S.250, loop_hafnian_batch.py:51), Var($XD_S.246, loop_hafnian_batch.py:51), Var($D_S.248, loop_hafnian_batch.py:51), Var(N__max, loop_hafnian_batch.py:26)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:06,124 on stmt: f_odd = call $328load_global.22(E, $AX_S.250, $XD_S.246, $D_S.248, N__max, oddloop, $oddVX_S.249, func=$328load_global.22, args=[Var(E, loop_hafnian_batch.py:53), Var($AX_S.250, loop_hafnian_batch.py:51), Var($XD_S.246, loop_hafnian_batch.py:51), Var($D_S.248, loop_hafnian_batch.py:51), Var(N__max, loop_hafnian_batch.py:26), Var(oddloop, loop_hafnian_batch.py:20), Var($oddVX_S.249, loop_hafnian_batch.py:51)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:06,124 on stmt: $356binary_subscr.35 = static_getitem(value=kept_edges, index=0, index_var=$const354.34, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:06,124 on stmt: $358binary_multiply.36 = $const350.32 * $356binary_subscr.35
DEBUG 2022-02-14 16:38:06,124 on stmt: $374call_function.44 = call $348load_global.31($358binary_multiply.36, $372binary_add.43, func=$348load_global.31, args=[Var($358binary_multiply.36, loop_hafnian_batch.py:58), Var($372binary_add.43, loop_hafnian_batch.py:58)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:06,124 on stmt: $376get_iter.45 = getiter(value=$374call_function.44)
DEBUG 2022-02-14 16:38:06,124 on stmt: jump 668
DEBUG 2022-02-14 16:38:06,124 ==== SSA block analysis pass on 495
DEBUG 2022-02-14 16:38:06,124 Running <numba.core.ssa._GatherDefsHandler object at 0x7fa046f64dc0>
DEBUG 2022-02-14 16:38:06,124 on stmt: $228for_iter.2 = iternext(value=$226get_iter.29)
DEBUG 2022-02-14 16:38:06,124 on stmt: $i.253 = pair_first(value=$228for_iter.2)
DEBUG 2022-02-14 16:38:06,125 on stmt: $228for_iter.4 = pair_second(value=$228for_iter.2)
DEBUG 2022-02-14 16:38:06,125 on stmt: branch $228for_iter.4, 571, 577
DEBUG 2022-02-14 16:38:06,125 ==== SSA block analysis pass on 668
DEBUG 2022-02-14 16:38:06,125 Running <numba.core.ssa._GatherDefsHandler object at 0x7fa046f64dc0>
DEBUG 2022-02-14 16:38:06,125 on stmt: $378for_iter.2 = iternext(value=$376get_iter.45)
DEBUG 2022-02-14 16:38:06,125 on stmt: $N_det.252 = pair_first(value=$378for_iter.2)
DEBUG 2022-02-14 16:38:06,125 on stmt: $378for_iter.4 = pair_second(value=$378for_iter.2)
DEBUG 2022-02-14 16:38:06,125 on stmt: branch $378for_iter.4, 670, 743
DEBUG 2022-02-14 16:38:06,125 ==== SSA block analysis pass on 571
DEBUG 2022-02-14 16:38:06,125 Running <numba.core.ssa._GatherDefsHandler object at 0x7fa046f64dc0>
DEBUG 2022-02-14 16:38:06,125 on stmt: $240binary_subscr.7 = getitem(value=edge__reps, index=$i.253, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:06,125 on stmt: $246binary_subscr.10 = getitem(value=kept_edges, index=$i.253, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:06,125 on stmt: $248build_tuple.11 = build_tuple(items=[Var($240binary_subscr.7, loop_hafnian_batch.py:44), Var($246binary_subscr.10, loop_hafnian_batch.py:44)])
DEBUG 2022-02-14 16:38:06,125 on stmt: $250binary_subscr.12 = getitem(value=binoms, index=$248build_tuple.11, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:06,125 on stmt: $binom_prod.2.600 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=binom_prod.2, rhs=$250binary_subscr.12, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:38:06,125 on stmt: binom_prod.2 = $binom_prod.2.600
DEBUG 2022-02-14 16:38:06,125 on stmt: jump 495
DEBUG 2022-02-14 16:38:06,125 ==== SSA block analysis pass on 727
DEBUG 2022-02-14 16:38:06,125 Running <numba.core.ssa._GatherDefsHandler object at 0x7fa046f64dc0>
DEBUG 2022-02-14 16:38:06,126 on stmt: jump 668
DEBUG 2022-02-14 16:38:06,126 ==== SSA block analysis pass on 50
DEBUG 2022-02-14 16:38:06,126 Running <numba.core.ssa._GatherDefsHandler object at 0x7fa046f64dc0>
DEBUG 2022-02-14 16:38:06,126 on stmt: j = parfor__index_230
DEBUG 2022-02-14 16:38:06,126 on stmt: id=2[LoopNest(index_variable = parfor_index.208, range = (0, $180binary_add.10, 1))]{887: <ir.Block at /home/adi/GBS/gbs/loop_hafnian_batch.py (37)>}Var(parfor_index.208, loop_hafnian_batch.py:37)
DEBUG 2022-02-14 16:38:06,126 on stmt: kept_edges = call $192load_global.15(j, edge__reps, func=$192load_global.15, args=[Var(j, loop_hafnian_batch.py:35), Var(edge__reps, loop_hafnian_batch.py:28)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:06,126 on stmt: kept_edges_shape.167 = getattr(value=kept_edges, attr=shape)
DEBUG 2022-02-14 16:38:06,126 on stmt: kept_edges_size0.168 = static_getitem(value=kept_edges_shape.167, index=0, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:06,126 on stmt: binom_prod.2 = binom_prod
DEBUG 2022-02-14 16:38:06,126 on stmt: id=6[LoopNest(index_variable = parfor_index.226, range = (0, kept_edges_size0.168, 1))]{557: <ir.Block at /home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numba/parfors/parfor.py (256)>}Var(parfor_index.226, parfor.py:256)
DEBUG 2022-02-14 16:38:06,126 on stmt: $224call_function.28 = call $214load_global.23($const216.24, $222binary_floor_divide.27, func=$214load_global.23, args=[Var($const216.24, loop_hafnian_batch.py:43), Var($222binary_floor_divide.27, loop_hafnian_batch.py:43)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:06,126 on stmt: $226get_iter.29 = getiter(value=$224call_function.28)
DEBUG 2022-02-14 16:38:06,126 on stmt: jump 495
DEBUG 2022-02-14 16:38:06,126 ==== SSA block analysis pass on 743
DEBUG 2022-02-14 16:38:06,126 Running <numba.core.ssa._GatherDefsHandler object at 0x7fa046f64dc0>
DEBUG 2022-02-14 16:38:06,126 on stmt: ret.193 = call assert.192(msg.191, _136binary__add_59, $180binary_add.10, func=assert.192, args=[Var(msg.191, loop_hafnian_batch.py:69), Var(_136binary__add_59, loop_hafnian_batch.py:34), Var($180binary_add.10, loop_hafnian_batch.py:37)], kws={}, vararg=None, target=None)
DEBUG 2022-02-14 16:38:06,126 on stmt: $H_batch.2.602 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=H__batch_2, rhs=Hnew, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:38:06,126 on stmt: H__batch_2 = $H_batch.2.602
DEBUG 2022-02-14 16:38:06,126 on stmt: jump 782
DEBUG 2022-02-14 16:38:06,127 ==== SSA block analysis pass on 577
DEBUG 2022-02-14 16:38:06,127 Running <numba.core.ssa._GatherDefsHandler object at 0x7fa046f64dc0>
DEBUG 2022-02-14 16:38:06,127 on stmt: $260pred = call bool260(glynn, func=bool260, args=(Var(glynn, loop_hafnian_batch.py:20),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:06,127 on stmt: branch $260pred, 591, 593
DEBUG 2022-02-14 16:38:06,127 ==== SSA block analysis pass on 591
DEBUG 2022-02-14 16:38:06,127 Running <numba.core.ssa._GatherDefsHandler object at 0x7fa046f64dc0>
DEBUG 2022-02-14 16:38:06,127 on stmt: ret.172 = call assert.171(msg.170, kept_edges_size0.168, edge__reps__size0_160, func=assert.171, args=[Var(msg.170, loop_hafnian_batch.py:47), Var(kept_edges_size0.168, loop_hafnian_batch.py:39), Var(edge__reps__size0_160, loop_hafnian_batch.py:28)], kws={}, vararg=None, target=None)
DEBUG 2022-02-14 16:38:06,127 on stmt: id=3[LoopNest(index_variable = parfor_index.213, range = (0, edge__reps__size0_160, 1))]{888: <ir.Block at /home/adi/GBS/gbs/loop_hafnian_batch.py (47)>}Var(parfor_index.213, loop_hafnian_batch.py:47)
DEBUG 2022-02-14 16:38:06,127 on stmt: delta.2 = delta
DEBUG 2022-02-14 16:38:06,127 on stmt: jump 631
DEBUG 2022-02-14 16:38:06,127 ==== SSA block analysis pass on 782
DEBUG 2022-02-14 16:38:06,127 Running <numba.core.ssa._GatherDefsHandler object at 0x7fa046f64dc0>
DEBUG 2022-02-14 16:38:06,127 on stmt: jump 40
DEBUG 2022-02-14 16:38:06,129 defs defaultdict(<class 'list'>,
            {'$12load_global.4.837': [<numba.core.ir.Assign object at 0x7fa046df4c10>],
             '$172binary_multiply.6': [<numba.core.ir.Assign object at 0x7fa047737220>],
             '$176binary_add.8': [<numba.core.ir.Assign object at 0x7fa0477374c0>],
             '$180binary_add.10': [<numba.core.ir.Assign object at 0x7fa0477377c0>],
             '$18binary_subscr.7.839': [<numba.core.ir.Assign object at 0x7fa046e160a0>],
             '$192load_global.15': [<numba.core.ir.Assign object at 0x7fa04773a0d0>],
             '$214load_global.23': [<numba.core.ir.Assign object at 0x7fa04773af10>],
             '$222binary_floor_divide.27': [<numba.core.ir.Assign object at 0x7fa04773c520>],
             '$224call_function.28': [<numba.core.ir.Assign object at 0x7fa04773c6d0>],
             '$226get_iter.29': [<numba.core.ir.Assign object at 0x7fa04773c7f0>],
             '$228for_iter.2': [<numba.core.ir.Assign object at 0x7fa04773ae20>],
             '$228for_iter.4': [<numba.core.ir.Assign object at 0x7fa04773ca00>],
             '$240binary_subscr.7': [<numba.core.ir.Assign object at 0x7fa04773e340>],
             '$246binary_subscr.10': [<numba.core.ir.Assign object at 0x7fa04773e700>],
             '$248build_tuple.11': [<numba.core.ir.Assign object at 0x7fa04773e880>],
             '$24binary_subscr.10.841': [<numba.core.ir.Assign object at 0x7fa046e164c0>],
             '$250binary_subscr.12': [<numba.core.ir.Assign object at 0x7fa04773ea00>],
             '$260pred': [<numba.core.ir.Assign object at 0x7fa04773ef10>],
             '$26load_global.11.842': [<numba.core.ir.Assign object at 0x7fa046e16610>],
             '$282load_global.1': [<numba.core.ir.Assign object at 0x7fa047741c70>],
             '$28load_method.12.843': [<numba.core.ir.Assign object at 0x7fa046e16790>],
             '$292call_function.6': [<numba.core.ir.Assign object at 0x7fa047704eb0>],
             '$294unpack_sequence.11': [<numba.core.ir.Assign object at 0x7fa047743460>],
             '$2load_global.0.835': [<numba.core.ir.Assign object at 0x7fa046df4550>],
             '$304load_global.12': [<numba.core.ir.Assign object at 0x7fa047743eb0>],
             '$312load_global.15': [<numba.core.ir.Assign object at 0x7fa0476c5430>],
             '$328load_global.22': [<numba.core.ir.Assign object at 0x7fa0476c5df0>],
             '$32call_method.14.845': [<numba.core.ir.Assign object at 0x7fa046e16b20>],
             '$348load_global.31': [<numba.core.ir.Assign object at 0x7fa0476c7a30>],
             '$34binary_add.15.846': [<numba.core.ir.Assign object at 0x7fa046e16c40>],
             '$356binary_subscr.35': [<numba.core.ir.Assign object at 0x7fa0476dbc40>],
             '$358binary_multiply.36': [<numba.core.ir.Assign object at 0x7fa0476c91c0>],
             '$364binary_multiply.39': [<numba.core.ir.Assign object at 0x7fa0476c95e0>],
             '$368binary_add.41': [<numba.core.ir.Assign object at 0x7fa0476c9880>],
             '$36call_function.16.847': [<numba.core.ir.Assign object at 0x7fa046e16df0>],
             '$372binary_add.43': [<numba.core.ir.Assign object at 0x7fa0476c9b80>],
             '$374call_function.44': [<numba.core.ir.Assign object at 0x7fa0476c9d30>],
             '$376get_iter.45': [<numba.core.ir.Assign object at 0x7fa0476c9e50>],
             '$378for_iter.2': [<numba.core.ir.Assign object at 0x7fa0476c5f10>],
             '$378for_iter.4': [<numba.core.ir.Assign object at 0x7fa0476c7610>],
             '$38get_iter.17.848': [<numba.core.ir.Assign object at 0x7fa046e16f10>],
             '$396binary_floor_divide.9': [<numba.core.ir.Assign object at 0x7fa0476cb940>],
             '$400binary_subtract.11': [<numba.core.ir.Assign object at 0x7fa0476cbbe0>],
             '$40for_iter.1.850': [<numba.core.ir.Assign object at 0x7fa046e07160>],
             '$40for_iter.2.851': [<numba.core.ir.Assign object at 0x7fa046e07280>],
             '$40for_iter.3.852': [<numba.core.ir.Assign object at 0x7fa046e073a0>],
             '$412binary_floor_divide.16': [<numba.core.ir.Assign object at 0x7fa0476cd400>],
             '$418binary_subscr.19': [<numba.core.ir.Assign object at 0x7fa0476dbb50>],
             '$420build_tuple.20': [<numba.core.ir.Assign object at 0x7fa0476cd9a0>],
             '$422binary_subscr.21': [<numba.core.ir.Assign object at 0x7fa0476cdb20>],
             '$434binary_modulo.26': [<numba.core.ir.Assign object at 0x7fa0476d0340>],
             '$438compare_op.28': [<numba.core.ir.Assign object at 0x7fa0476d0640>],
             '$440pred': [<numba.core.ir.Assign object at 0x7fa0476d08b0>],
             '$450binary_subscr.6': [<numba.core.ir.Assign object at 0x7fa0476d0b20>],
             '$456binary_multiply.9': [<numba.core.ir.Assign object at 0x7fa0476d0ee0>],
             '$464binary_floor_divide.13': [<numba.core.ir.Assign object at 0x7fa0476d3460>],
             '$466binary_subscr.14': [<numba.core.ir.Assign object at 0x7fa0476d35e0>],
             '$468binary_multiply.15': [<numba.core.ir.Assign object at 0x7fa0476d3760>],
             '$470inplace_add.16': [<numba.core.ir.Assign object at 0x7fa0476d38e0>],
             '$484binary_subscr.6': [<numba.core.ir.Assign object at 0x7fa0476d3dc0>],
             '$490binary_multiply.9': [<numba.core.ir.Assign object at 0x7fa0476d51c0>],
             '$496binary_subscr.12': [<numba.core.ir.Assign object at 0x7fa0476d5580>],
             '$498binary_multiply.13': [<numba.core.ir.Assign object at 0x7fa0476d5700>],
             '$4load_method.1.836': [<numba.core.ir.Assign object at 0x7fa046df46d0>],
             '$500inplace_add.14': [<numba.core.ir.Assign object at 0x7fa0476d5880>],
             '$56build_slice.3.856': [<numba.core.ir.Assign object at 0x7fa046e07fd0>],
             '$56build_slice.4.857': [<numba.core.ir.Assign object at 0x7fa046e03130>],
             '$58binary_subscr.5.858': [<numba.core.ir.Assign object at 0x7fa046d56460>],
             '$66build_slice.10.862': [<numba.core.ir.Assign object at 0x7fa046e035b0>],
             '$66build_slice.9.861': [<numba.core.ir.Assign object at 0x7fa046e03490>],
             '$72return_value.12.864': [<numba.core.ir.Assign object at 0x7fa046e03970>],
             '$AX_S.250': [<numba.core.ir.Assign object at 0x7fa0477435b0>],
             '$D_S.248': [<numba.core.ir.Assign object at 0x7fa0477437f0>],
             '$H_batch.2.602': [<numba.core.ir.Assign object at 0x7fa0476ad070>],
             '$N_det.252': [<numba.core.ir.Assign object at 0x7fa0476c72b0>],
             '$XD_S.246': [<numba.core.ir.Assign object at 0x7fa0477436d0>],
             '$binom_prod.2.600': [<numba.core.ir.Assign object at 0x7fa0477044c0>],
             '$const16.6.838': [<numba.core.ir.Assign object at 0x7fa046df4eb0>],
             '$const168.4': [<numba.core.ir.Assign object at 0x7fa047734f10>],
             '$const178.9': [<numba.core.ir.Assign object at 0x7fa047737610>],
             '$const216.24': [<numba.core.ir.Assign object at 0x7fa04773c0d0>],
             '$const22.9.840': [<numba.core.ir.Assign object at 0x7fa046e16310>],
             '$const220.26': [<numba.core.ir.Assign object at 0x7fa04773c370>],
             '$const30.13.844': [<numba.core.ir.Assign object at 0x7fa046e16910>],
             '$const350.32': [<numba.core.ir.Assign object at 0x7fa0476c7bb0>],
             '$const354.34': [<numba.core.ir.Assign object at 0x7fa0476c7e50>],
             '$const360.37': [<numba.core.ir.Assign object at 0x7fa0476c9310>],
             '$const370.42': [<numba.core.ir.Assign object at 0x7fa0476c99d0>],
             '$const390.6': [<numba.core.ir.Assign object at 0x7fa0476cb4f0>],
             '$const394.8': [<numba.core.ir.Assign object at 0x7fa0476cb790>],
             '$const410.15': [<numba.core.ir.Assign object at 0x7fa0476cd250>],
             '$const416.18': [<numba.core.ir.Assign object at 0x7fa0476cd670>],
             '$const432.25': [<numba.core.ir.Assign object at 0x7fa0476d0190>],
             '$const436.27': [<numba.core.ir.Assign object at 0x7fa0476d0490>],
             '$const462.12': [<numba.core.ir.Assign object at 0x7fa0476d32b0>],
             '$const52.1.854': [<numba.core.ir.Assign object at 0x7fa046e07cd0>],
             '$const54.2.855': [<numba.core.ir.Assign object at 0x7fa046e07e50>],
             '$const62.7.859': [<numba.core.ir.Assign object at 0x7fa046e24e50>],
             '$const64.8.860': [<numba.core.ir.Assign object at 0x7fa046e03310>],
             '$const70.11.863': [<numba.core.ir.Assign object at 0x7fa046e037f0>],
             '$empty_attr_attr.210': [<numba.core.ir.Assign object at 0x7fa04721df10>],
             '$empty_attr_attr.215': [<numba.core.ir.Assign object at 0x7fa046b68820>],
             '$i.253': [<numba.core.ir.Assign object at 0x7fa04773c8e0>],
             '$np_g_var.209': [<numba.core.ir.Assign object at 0x7fa04721dd30>],
             '$np_g_var.214': [<numba.core.ir.Assign object at 0x7fa046b68490>],
             '$np_typ_var.211': [<numba.core.ir.Assign object at 0x7fa046b420d0>],
             '$np_typ_var.216': [<numba.core.ir.Assign object at 0x7fa0467aa460>],
             '$oddVX_S.249': [<numba.core.ir.Assign object at 0x7fa047743910>],
             '$phi40.0.849': [<numba.core.ir.Assign object at 0x7fa046df4880>],
             '$phi42.1.853': [<numba.core.ir.Assign object at 0x7fa046e070a0>],
             'A': [<numba.core.ir.Assign object at 0x7fa046e116d0>],
             'D': [<numba.core.ir.Assign object at 0x7fa046e115b0>],
             'E': [<numba.core.ir.Assign object at 0x7fa0476c51f0>],
             'H__batch_2': [<numba.core.ir.Assign object at 0x7fa046df4a00>,
                            <numba.core.ir.Assign object at 0x7fa0473cb040>],
             'H__batch_2__arr': [<numba.core.ir.Assign object at 0x7fa046df43d0>],
             'Hnew': [<numba.core.ir.Assign object at 0x7fa046b423d0>],
             'N': [<numba.core.ir.Assign object at 0x7fa0476cb280>],
             'N__fixed': [<numba.core.ir.Assign object at 0x7fa046e11490>],
             'N__max': [<numba.core.ir.Assign object at 0x7fa046e11370>],
             '_136binary__add_59': [<numba.core.ir.Assign object at 0x7fa046e117f0>],
             'assert.171': [<numba.core.ir.Assign object at 0x7fa046bf67f0>],
             'assert.192': [<numba.core.ir.Assign object at 0x7fa046bf2580>],
             'batch__max': [<numba.core.ir.Assign object at 0x7fa046e11130>],
             'binom_prod': [<numba.core.ir.Assign object at 0x7fa047704af0>],
             'binom_prod.2': [<numba.core.ir.Assign object at 0x7fa04696d100>,
                              <numba.core.ir.Assign object at 0x7fa04714f910>],
             'binoms': [<numba.core.ir.Assign object at 0x7fa046d56b20>],
             'bool260': [<numba.core.ir.Assign object at 0x7fa04773edf0>],
             'bool440': [<numba.core.ir.Assign object at 0x7fa0476d0790>],
             'delta': [<numba.core.ir.Assign object at 0x7fa04679c880>],
             'delta.2': [<numba.core.ir.Assign object at 0x7fa04714fd00>,
                         <numba.core.ir.Assign object at 0x7fa047166850>],
             'edge__reps': [<numba.core.ir.Assign object at 0x7fa046d56f70>],
             'edge__reps__size0_160': [<numba.core.ir.Assign object at 0x7fa046d56dc0>],
             'f_even': [<numba.core.ir.Assign object at 0x7fa0476c5bb0>],
             'f_odd': [<numba.core.ir.Assign object at 0x7fa0476c77f0>],
             'glynn': [<numba.core.ir.Assign object at 0x7fa046d56ca0>],
             'j': [<numba.core.ir.Assign object at 0x7fa047704970>],
             'kept_edges': [<numba.core.ir.Assign object at 0x7fa04773a4f0>],
             'kept_edges_shape.167': [<numba.core.ir.Assign object at 0x7fa046eb74f0>],
             'kept_edges_size0.168': [<numba.core.ir.Assign object at 0x7fa046eb7580>],
             'msg.170': [<numba.core.ir.Assign object at 0x7fa046bf68e0>],
             'msg.191': [<numba.core.ir.Assign object at 0x7fa046bf2550>],
             'n': [<numba.core.ir.Assign object at 0x7fa0470c08e0>],
             'n_det_binom_prod': [<numba.core.ir.Assign object at 0x7fa0476ad670>],
             'oddV': [<numba.core.ir.Assign object at 0x7fa046df4070>],
             'odd__cutoff': [<numba.core.ir.Assign object at 0x7fa046df4190>],
             'oddloop': [<numba.core.ir.Assign object at 0x7fa046df42b0>],
             'parfor__index_230': [<numba.core.ir.Assign object at 0x7fa046e07670>],
             'plus_minus': [<numba.core.ir.Assign object at 0x7fa0476cbd60>],
             'ret.172': [<numba.core.ir.Assign object at 0x7fa046bf6b50>],
             'ret.193': [<numba.core.ir.Assign object at 0x7fa046bf2400>],
             'sched.834': [<numba.core.ir.Assign object at 0x7fa046e11b20>]})
DEBUG 2022-02-14 16:38:06,129 SSA violators {'H__batch_2', 'delta.2', 'binom_prod.2'}
DEBUG 2022-02-14 16:38:06,129 Fix SSA violator on var H__batch_2
DEBUG 2022-02-14 16:38:06,129 ==== SSA block rewrite pass on 0
DEBUG 2022-02-14 16:38:06,129 Running <numba.core.ssa._FreshVarHandler object at 0x7fa046df6fa0>
DEBUG 2022-02-14 16:38:06,129 on stmt: sched.834 = arg(0, name=sched)
DEBUG 2022-02-14 16:38:06,129 on stmt: _136binary__add_59 = arg(1, name=_136binary__add_59)
DEBUG 2022-02-14 16:38:06,129 on stmt: A = arg(2, name=A)
DEBUG 2022-02-14 16:38:06,129 on stmt: D = arg(3, name=D)
DEBUG 2022-02-14 16:38:06,129 on stmt: N__fixed = arg(4, name=N__fixed)
DEBUG 2022-02-14 16:38:06,129 on stmt: N__max = arg(5, name=N__max)
DEBUG 2022-02-14 16:38:06,129 on stmt: batch__max = arg(6, name=batch__max)
DEBUG 2022-02-14 16:38:06,129 on stmt: binoms = arg(7, name=binoms)
DEBUG 2022-02-14 16:38:06,129 on stmt: edge__reps = arg(8, name=edge__reps)
DEBUG 2022-02-14 16:38:06,129 on stmt: edge__reps__size0_160 = arg(9, name=edge__reps__size0_160)
DEBUG 2022-02-14 16:38:06,129 on stmt: glynn = arg(10, name=glynn)
DEBUG 2022-02-14 16:38:06,129 on stmt: n = arg(11, name=n)
DEBUG 2022-02-14 16:38:06,129 on stmt: oddV = arg(12, name=oddV)
DEBUG 2022-02-14 16:38:06,130 on stmt: odd__cutoff = arg(13, name=odd__cutoff)
DEBUG 2022-02-14 16:38:06,130 on stmt: oddloop = arg(14, name=oddloop)
DEBUG 2022-02-14 16:38:06,130 on stmt: H__batch_2__arr = arg(15, name=H__batch_2__arr)
DEBUG 2022-02-14 16:38:06,130 on stmt: $2load_global.0.835 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:38:06,130 on stmt: $4load_method.1.836 = getattr(value=$2load_global.0.835, attr=copy)
DEBUG 2022-02-14 16:38:06,130 on stmt: H__batch_2 = call $4load_method.1.836(H__batch_2__arr, func=$4load_method.1.836, args=[Var(H__batch_2__arr, <string>:2)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:06,130 first assign: H__batch_2
DEBUG 2022-02-14 16:38:06,130 replaced with: H__batch_2 = call $4load_method.1.836(H__batch_2__arr, func=$4load_method.1.836, args=[Var(H__batch_2__arr, <string>:2)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:06,130 on stmt: $12load_global.4.837 = global(range: <class 'range'>)
DEBUG 2022-02-14 16:38:06,130 on stmt: $const16.6.838 = const(int, 0)
DEBUG 2022-02-14 16:38:06,130 on stmt: $18binary_subscr.7.839 = getitem(value=sched.834, index=$const16.6.838, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:06,130 on stmt: $const22.9.840 = const(int, 1)
DEBUG 2022-02-14 16:38:06,130 on stmt: $24binary_subscr.10.841 = getitem(value=sched.834, index=$const22.9.840, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:06,130 on stmt: $26load_global.11.842 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:38:06,130 on stmt: $28load_method.12.843 = getattr(value=$26load_global.11.842, attr=uint8)
DEBUG 2022-02-14 16:38:06,130 on stmt: $const30.13.844 = const(int, 1)
DEBUG 2022-02-14 16:38:06,130 on stmt: $32call_method.14.845 = call $28load_method.12.843($const30.13.844, func=$28load_method.12.843, args=[Var($const30.13.844, <string>:3)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:06,130 on stmt: $34binary_add.15.846 = $24binary_subscr.10.841 + $32call_method.14.845
DEBUG 2022-02-14 16:38:06,130 on stmt: $36call_function.16.847 = call $12load_global.4.837($18binary_subscr.7.839, $34binary_add.15.846, func=$12load_global.4.837, args=[Var($18binary_subscr.7.839, <string>:3), Var($34binary_add.15.846, <string>:3)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:06,130 on stmt: $38get_iter.17.848 = getiter(value=$36call_function.16.847)
DEBUG 2022-02-14 16:38:06,130 on stmt: $phi40.0.849 = $38get_iter.17.848
DEBUG 2022-02-14 16:38:06,130 on stmt: $const462.12 = const(int, 2)
DEBUG 2022-02-14 16:38:06,130 on stmt: $const390.6 = const(float, -1.0)
DEBUG 2022-02-14 16:38:06,131 on stmt: $const394.8 = const(int, 2)
DEBUG 2022-02-14 16:38:06,131 on stmt: $const410.15 = const(int, 2)
DEBUG 2022-02-14 16:38:06,131 on stmt: $const416.18 = const(int, 0)
DEBUG 2022-02-14 16:38:06,131 on stmt: $const432.25 = const(int, 2)
DEBUG 2022-02-14 16:38:06,131 on stmt: $const436.27 = const(int, 0)
DEBUG 2022-02-14 16:38:06,131 on stmt: bool440 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:38:06,131 on stmt: $282load_global.1 = global(get_submatrices: CPUDispatcher(<function get_submatrices at 0x7fa047ebed30>))
DEBUG 2022-02-14 16:38:06,131 on stmt: $304load_global.12 = global(eigvals: CPUDispatcher(<function eigvals at 0x7fa047e5d430>))
DEBUG 2022-02-14 16:38:06,131 on stmt: $312load_global.15 = global(f_loop: CPUDispatcher(<function f_loop at 0x7fa047ebe9d0>))
DEBUG 2022-02-14 16:38:06,131 on stmt: $328load_global.22 = global(f_loop_odd: CPUDispatcher(<function f_loop_odd at 0x7fa047ebeb80>))
DEBUG 2022-02-14 16:38:06,131 on stmt: $348load_global.31 = global(range: <class 'range'>)
DEBUG 2022-02-14 16:38:06,131 on stmt: $const350.32 = const(int, 2)
DEBUG 2022-02-14 16:38:06,131 on stmt: $const354.34 = const(int, 0)
DEBUG 2022-02-14 16:38:06,131 on stmt: $const360.37 = const(int, 2)
DEBUG 2022-02-14 16:38:06,131 on stmt: $364binary_multiply.39 = $const360.37 * batch__max
DEBUG 2022-02-14 16:38:06,131 on stmt: $368binary_add.41 = $364binary_multiply.39 + odd__cutoff
DEBUG 2022-02-14 16:38:06,131 on stmt: $const370.42 = const(int, 1)
DEBUG 2022-02-14 16:38:06,131 on stmt: $372binary_add.43 = $368binary_add.41 + $const370.42
DEBUG 2022-02-14 16:38:06,131 on stmt: $const168.4 = const(int, 2)
DEBUG 2022-02-14 16:38:06,131 on stmt: $172binary_multiply.6 = $const168.4 * batch__max
DEBUG 2022-02-14 16:38:06,131 on stmt: $176binary_add.8 = $172binary_multiply.6 + odd__cutoff
DEBUG 2022-02-14 16:38:06,131 on stmt: $const178.9 = const(int, 1)
DEBUG 2022-02-14 16:38:06,131 on stmt: $180binary_add.10 = $176binary_add.8 + $const178.9
DEBUG 2022-02-14 16:38:06,131 on stmt: $192load_global.15 = global(find_kept_edges: CPUDispatcher(<function find_kept_edges at 0x7fa047ebe790>))
DEBUG 2022-02-14 16:38:06,131 on stmt: $np_g_var.209 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:38:06,131 on stmt: $empty_attr_attr.210 = getattr(value=$np_g_var.209, attr=empty)
DEBUG 2022-02-14 16:38:06,132 on stmt: $np_typ_var.211 = getattr(value=$np_g_var.209, attr=complex128)
DEBUG 2022-02-14 16:38:06,132 on stmt: Hnew = call $empty_attr_attr.210($180binary_add.10, $np_typ_var.211, func=$empty_attr_attr.210, args=[Var($180binary_add.10, loop_hafnian_batch.py:37), Var($np_typ_var.211, loop_hafnian_batch.py:37)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:06,132 on stmt: binom_prod = const(float, 1.0)
DEBUG 2022-02-14 16:38:06,132 on stmt: $214load_global.23 = global(range: <class 'range'>)
DEBUG 2022-02-14 16:38:06,132 on stmt: $const216.24 = const(int, 1)
DEBUG 2022-02-14 16:38:06,132 on stmt: $const220.26 = const(int, 2)
DEBUG 2022-02-14 16:38:06,132 on stmt: $222binary_floor_divide.27 = n // $const220.26
DEBUG 2022-02-14 16:38:06,132 on stmt: msg.191 = const(str, Sizes of H_batch.2, Hnew do not match on /home/adi/GBS/gbs/loop_hafnian_batch.py (69))
DEBUG 2022-02-14 16:38:06,132 on stmt: assert.192 = global(assert_equiv: <intrinsic assert_equiv>)
DEBUG 2022-02-14 16:38:06,132 on stmt: bool260 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:38:06,132 on stmt: msg.170 = const(str, Sizes of kept_edges, edge_reps do not match on /home/adi/GBS/gbs/loop_hafnian_batch.py (47))
DEBUG 2022-02-14 16:38:06,132 on stmt: assert.171 = global(assert_equiv: <intrinsic assert_equiv>)
DEBUG 2022-02-14 16:38:06,132 on stmt: $np_g_var.214 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:38:06,132 on stmt: $empty_attr_attr.215 = getattr(value=$np_g_var.214, attr=empty)
DEBUG 2022-02-14 16:38:06,132 on stmt: $np_typ_var.216 = getattr(value=$np_g_var.214, attr=int64)
DEBUG 2022-02-14 16:38:06,132 on stmt: delta = call $empty_attr_attr.215(edge__reps__size0_160, $np_typ_var.216, func=$empty_attr_attr.215, args=[Var(edge__reps__size0_160, loop_hafnian_batch.py:28), Var($np_typ_var.216, loop_hafnian_batch.py:47)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:06,132 on stmt: jump 40
DEBUG 2022-02-14 16:38:06,132 ==== SSA block rewrite pass on 40
DEBUG 2022-02-14 16:38:06,132 Running <numba.core.ssa._FreshVarHandler object at 0x7fa046df6fa0>
DEBUG 2022-02-14 16:38:06,132 on stmt: $40for_iter.1.850 = iternext(value=$phi40.0.849)
DEBUG 2022-02-14 16:38:06,132 on stmt: $40for_iter.2.851 = pair_first(value=$40for_iter.1.850)
DEBUG 2022-02-14 16:38:06,132 on stmt: $40for_iter.3.852 = pair_second(value=$40for_iter.1.850)
DEBUG 2022-02-14 16:38:06,132 on stmt: $phi42.1.853 = $40for_iter.2.851
DEBUG 2022-02-14 16:38:06,132 on stmt: branch $40for_iter.3.852, 42, 889
DEBUG 2022-02-14 16:38:06,132 ==== SSA block rewrite pass on 42
DEBUG 2022-02-14 16:38:06,133 Running <numba.core.ssa._FreshVarHandler object at 0x7fa046df6fa0>
DEBUG 2022-02-14 16:38:06,133 on stmt: parfor__index_230 = $phi42.1.853
DEBUG 2022-02-14 16:38:06,133 on stmt: jump 50
DEBUG 2022-02-14 16:38:06,133 ==== SSA block rewrite pass on 889
DEBUG 2022-02-14 16:38:06,133 Running <numba.core.ssa._FreshVarHandler object at 0x7fa046df6fa0>
DEBUG 2022-02-14 16:38:06,133 on stmt: $const52.1.854 = const(NoneType, None)
DEBUG 2022-02-14 16:38:06,133 on stmt: $const54.2.855 = const(NoneType, None)
DEBUG 2022-02-14 16:38:06,133 on stmt: $56build_slice.3.856 = global(slice: <class 'slice'>)
DEBUG 2022-02-14 16:38:06,133 on stmt: $56build_slice.4.857 = call $56build_slice.3.856($const52.1.854, $const54.2.855, func=$56build_slice.3.856, args=(Var($const52.1.854, <string>:5), Var($const54.2.855, <string>:5)), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:06,133 on stmt: $58binary_subscr.5.858 = getitem(value=H__batch_2, index=$56build_slice.4.857, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:06,133 on stmt: $const62.7.859 = const(NoneType, None)
DEBUG 2022-02-14 16:38:06,133 on stmt: $const64.8.860 = const(NoneType, None)
DEBUG 2022-02-14 16:38:06,133 on stmt: $66build_slice.9.861 = global(slice: <class 'slice'>)
DEBUG 2022-02-14 16:38:06,133 on stmt: $66build_slice.10.862 = call $66build_slice.9.861($const62.7.859, $const64.8.860, func=$66build_slice.9.861, args=(Var($const62.7.859, <string>:5), Var($const64.8.860, <string>:5)), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:06,133 on stmt: H__batch_2__arr[$66build_slice.10.862] = $58binary_subscr.5.858
DEBUG 2022-02-14 16:38:06,133 on stmt: $const70.11.863 = const(NoneType, None)
DEBUG 2022-02-14 16:38:06,133 on stmt: $72return_value.12.864 = cast(value=$const70.11.863)
DEBUG 2022-02-14 16:38:06,133 on stmt: return $72return_value.12.864
DEBUG 2022-02-14 16:38:06,133 ==== SSA block rewrite pass on 686
DEBUG 2022-02-14 16:38:06,133 Running <numba.core.ssa._FreshVarHandler object at 0x7fa046df6fa0>
DEBUG 2022-02-14 16:38:06,133 on stmt: $450binary_subscr.6 = getitem(value=Hnew, index=$N_det.252, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:06,133 on stmt: $456binary_multiply.9 = n_det_binom_prod * plus_minus
DEBUG 2022-02-14 16:38:06,133 on stmt: $464binary_floor_divide.13 = N // $const462.12
DEBUG 2022-02-14 16:38:06,133 on stmt: $466binary_subscr.14 = getitem(value=f_even, index=$464binary_floor_divide.13, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:06,133 on stmt: $468binary_multiply.15 = $456binary_multiply.9 * $466binary_subscr.14
DEBUG 2022-02-14 16:38:06,133 on stmt: $470inplace_add.16 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$450binary_subscr.6, rhs=$468binary_multiply.15, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:38:06,134 on stmt: Hnew[$N_det.252] = $470inplace_add.16
DEBUG 2022-02-14 16:38:06,134 on stmt: jump 727
DEBUG 2022-02-14 16:38:06,134 ==== SSA block rewrite pass on 725
DEBUG 2022-02-14 16:38:06,134 Running <numba.core.ssa._FreshVarHandler object at 0x7fa046df6fa0>
DEBUG 2022-02-14 16:38:06,134 on stmt: $484binary_subscr.6 = getitem(value=Hnew, index=$N_det.252, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:06,134 on stmt: $490binary_multiply.9 = n_det_binom_prod * plus_minus
DEBUG 2022-02-14 16:38:06,134 on stmt: $496binary_subscr.12 = getitem(value=f_odd, index=N, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:06,134 on stmt: $498binary_multiply.13 = $490binary_multiply.9 * $496binary_subscr.12
DEBUG 2022-02-14 16:38:06,134 on stmt: $500inplace_add.14 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$484binary_subscr.6, rhs=$498binary_multiply.13, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:38:06,134 on stmt: Hnew[$N_det.252] = $500inplace_add.14
DEBUG 2022-02-14 16:38:06,134 on stmt: jump 727
DEBUG 2022-02-14 16:38:06,134 ==== SSA block rewrite pass on 593
DEBUG 2022-02-14 16:38:06,134 Running <numba.core.ssa._FreshVarHandler object at 0x7fa046df6fa0>
DEBUG 2022-02-14 16:38:06,134 on stmt: delta.2 = kept_edges
DEBUG 2022-02-14 16:38:06,134 on stmt: jump 631
DEBUG 2022-02-14 16:38:06,134 ==== SSA block rewrite pass on 670
DEBUG 2022-02-14 16:38:06,134 Running <numba.core.ssa._FreshVarHandler object at 0x7fa046df6fa0>
DEBUG 2022-02-14 16:38:06,134 on stmt: N = N__fixed + $N_det.252
DEBUG 2022-02-14 16:38:06,134 on stmt: $396binary_floor_divide.9 = N // $const394.8
DEBUG 2022-02-14 16:38:06,134 on stmt: $400binary_subtract.11 = $396binary_floor_divide.9 - val.10
DEBUG 2022-02-14 16:38:06,134 on stmt: plus_minus = $const390.6 ** $400binary_subtract.11
DEBUG 2022-02-14 16:38:06,134 on stmt: $412binary_floor_divide.16 = $N_det.252 // $const410.15
DEBUG 2022-02-14 16:38:06,134 on stmt: $418binary_subscr.19 = static_getitem(value=kept_edges, index=0, index_var=$const416.18, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:06,134 on stmt: $420build_tuple.20 = build_tuple(items=[Var($412binary_floor_divide.16, loop_hafnian_batch.py:62), Var($418binary_subscr.19, loop_hafnian_batch.py:62)])
DEBUG 2022-02-14 16:38:06,134 on stmt: $422binary_subscr.21 = getitem(value=binoms, index=$420build_tuple.20, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:06,135 on stmt: n_det_binom_prod = $422binary_subscr.21 * binom_prod.2
DEBUG 2022-02-14 16:38:06,135 on stmt: $434binary_modulo.26 = $N_det.252 % $const432.25
DEBUG 2022-02-14 16:38:06,135 on stmt: $438compare_op.28 = $434binary_modulo.26 == $const436.27
DEBUG 2022-02-14 16:38:06,135 on stmt: $440pred = call bool440($438compare_op.28, func=bool440, args=(Var($438compare_op.28, loop_hafnian_batch.py:64),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:06,135 on stmt: branch $440pred, 686, 725
DEBUG 2022-02-14 16:38:06,135 ==== SSA block rewrite pass on 631
DEBUG 2022-02-14 16:38:06,135 Running <numba.core.ssa._FreshVarHandler object at 0x7fa046df6fa0>
DEBUG 2022-02-14 16:38:06,135 on stmt: $292call_function.6 = call $282load_global.1(delta.2, A, D, oddV, func=$282load_global.1, args=[Var(delta.2, loop_hafnian_batch.py:51), Var(A, loop_hafnian_batch.py:20), Var(D, loop_hafnian_batch.py:20), Var(oddV, loop_hafnian_batch.py:21)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:06,135 on stmt: $294unpack_sequence.11 = exhaust_iter(value=$292call_function.6, count=4)
DEBUG 2022-02-14 16:38:06,135 on stmt: $AX_S.250 = static_getitem(value=$294unpack_sequence.11, index=0, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:06,135 on stmt: $XD_S.246 = static_getitem(value=$294unpack_sequence.11, index=1, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:06,135 on stmt: $D_S.248 = static_getitem(value=$294unpack_sequence.11, index=2, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:06,135 on stmt: $oddVX_S.249 = static_getitem(value=$294unpack_sequence.11, index=3, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:06,135 on stmt: E = call $304load_global.12($AX_S.250, func=$304load_global.12, args=[Var($AX_S.250, loop_hafnian_batch.py:51)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:06,135 on stmt: f_even = call $312load_global.15(E, $AX_S.250, $XD_S.246, $D_S.248, N__max, func=$312load_global.15, args=[Var(E, loop_hafnian_batch.py:53), Var($AX_S.250, loop_hafnian_batch.py:51), Var($XD_S.246, loop_hafnian_batch.py:51), Var($D_S.248, loop_hafnian_batch.py:51), Var(N__max, loop_hafnian_batch.py:26)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:06,135 on stmt: f_odd = call $328load_global.22(E, $AX_S.250, $XD_S.246, $D_S.248, N__max, oddloop, $oddVX_S.249, func=$328load_global.22, args=[Var(E, loop_hafnian_batch.py:53), Var($AX_S.250, loop_hafnian_batch.py:51), Var($XD_S.246, loop_hafnian_batch.py:51), Var($D_S.248, loop_hafnian_batch.py:51), Var(N__max, loop_hafnian_batch.py:26), Var(oddloop, loop_hafnian_batch.py:20), Var($oddVX_S.249, loop_hafnian_batch.py:51)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:06,135 on stmt: $356binary_subscr.35 = static_getitem(value=kept_edges, index=0, index_var=$const354.34, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:06,135 on stmt: $358binary_multiply.36 = $const350.32 * $356binary_subscr.35
DEBUG 2022-02-14 16:38:06,135 on stmt: $374call_function.44 = call $348load_global.31($358binary_multiply.36, $372binary_add.43, func=$348load_global.31, args=[Var($358binary_multiply.36, loop_hafnian_batch.py:58), Var($372binary_add.43, loop_hafnian_batch.py:58)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:06,136 on stmt: $376get_iter.45 = getiter(value=$374call_function.44)
DEBUG 2022-02-14 16:38:06,136 on stmt: jump 668
DEBUG 2022-02-14 16:38:06,136 ==== SSA block rewrite pass on 495
DEBUG 2022-02-14 16:38:06,136 Running <numba.core.ssa._FreshVarHandler object at 0x7fa046df6fa0>
DEBUG 2022-02-14 16:38:06,136 on stmt: $228for_iter.2 = iternext(value=$226get_iter.29)
DEBUG 2022-02-14 16:38:06,136 on stmt: $i.253 = pair_first(value=$228for_iter.2)
DEBUG 2022-02-14 16:38:06,136 on stmt: $228for_iter.4 = pair_second(value=$228for_iter.2)
DEBUG 2022-02-14 16:38:06,136 on stmt: branch $228for_iter.4, 571, 577
DEBUG 2022-02-14 16:38:06,136 ==== SSA block rewrite pass on 668
DEBUG 2022-02-14 16:38:06,136 Running <numba.core.ssa._FreshVarHandler object at 0x7fa046df6fa0>
DEBUG 2022-02-14 16:38:06,136 on stmt: $378for_iter.2 = iternext(value=$376get_iter.45)
DEBUG 2022-02-14 16:38:06,136 on stmt: $N_det.252 = pair_first(value=$378for_iter.2)
DEBUG 2022-02-14 16:38:06,136 on stmt: $378for_iter.4 = pair_second(value=$378for_iter.2)
DEBUG 2022-02-14 16:38:06,136 on stmt: branch $378for_iter.4, 670, 743
DEBUG 2022-02-14 16:38:06,136 ==== SSA block rewrite pass on 571
DEBUG 2022-02-14 16:38:06,136 Running <numba.core.ssa._FreshVarHandler object at 0x7fa046df6fa0>
DEBUG 2022-02-14 16:38:06,136 on stmt: $240binary_subscr.7 = getitem(value=edge__reps, index=$i.253, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:06,136 on stmt: $246binary_subscr.10 = getitem(value=kept_edges, index=$i.253, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:06,136 on stmt: $248build_tuple.11 = build_tuple(items=[Var($240binary_subscr.7, loop_hafnian_batch.py:44), Var($246binary_subscr.10, loop_hafnian_batch.py:44)])
DEBUG 2022-02-14 16:38:06,136 on stmt: $250binary_subscr.12 = getitem(value=binoms, index=$248build_tuple.11, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:06,136 on stmt: $binom_prod.2.600 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=binom_prod.2, rhs=$250binary_subscr.12, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:38:06,136 on stmt: binom_prod.2 = $binom_prod.2.600
DEBUG 2022-02-14 16:38:06,136 on stmt: jump 495
DEBUG 2022-02-14 16:38:06,136 ==== SSA block rewrite pass on 727
DEBUG 2022-02-14 16:38:06,136 Running <numba.core.ssa._FreshVarHandler object at 0x7fa046df6fa0>
DEBUG 2022-02-14 16:38:06,136 on stmt: jump 668
DEBUG 2022-02-14 16:38:06,136 ==== SSA block rewrite pass on 50
DEBUG 2022-02-14 16:38:06,137 Running <numba.core.ssa._FreshVarHandler object at 0x7fa046df6fa0>
DEBUG 2022-02-14 16:38:06,137 on stmt: j = parfor__index_230
DEBUG 2022-02-14 16:38:06,137 on stmt: id=2[LoopNest(index_variable = parfor_index.208, range = (0, $180binary_add.10, 1))]{887: <ir.Block at /home/adi/GBS/gbs/loop_hafnian_batch.py (37)>}Var(parfor_index.208, loop_hafnian_batch.py:37)
DEBUG 2022-02-14 16:38:06,137 on stmt: kept_edges = call $192load_global.15(j, edge__reps, func=$192load_global.15, args=[Var(j, loop_hafnian_batch.py:35), Var(edge__reps, loop_hafnian_batch.py:28)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:06,137 on stmt: kept_edges_shape.167 = getattr(value=kept_edges, attr=shape)
DEBUG 2022-02-14 16:38:06,137 on stmt: kept_edges_size0.168 = static_getitem(value=kept_edges_shape.167, index=0, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:06,137 on stmt: binom_prod.2 = binom_prod
DEBUG 2022-02-14 16:38:06,137 on stmt: id=6[LoopNest(index_variable = parfor_index.226, range = (0, kept_edges_size0.168, 1))]{557: <ir.Block at /home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numba/parfors/parfor.py (256)>}Var(parfor_index.226, parfor.py:256)
DEBUG 2022-02-14 16:38:06,137 on stmt: $224call_function.28 = call $214load_global.23($const216.24, $222binary_floor_divide.27, func=$214load_global.23, args=[Var($const216.24, loop_hafnian_batch.py:43), Var($222binary_floor_divide.27, loop_hafnian_batch.py:43)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:06,137 on stmt: $226get_iter.29 = getiter(value=$224call_function.28)
DEBUG 2022-02-14 16:38:06,137 on stmt: jump 495
DEBUG 2022-02-14 16:38:06,137 ==== SSA block rewrite pass on 743
DEBUG 2022-02-14 16:38:06,137 Running <numba.core.ssa._FreshVarHandler object at 0x7fa046df6fa0>
DEBUG 2022-02-14 16:38:06,137 on stmt: ret.193 = call assert.192(msg.191, _136binary__add_59, $180binary_add.10, func=assert.192, args=[Var(msg.191, loop_hafnian_batch.py:69), Var(_136binary__add_59, loop_hafnian_batch.py:34), Var($180binary_add.10, loop_hafnian_batch.py:37)], kws={}, vararg=None, target=None)
DEBUG 2022-02-14 16:38:06,137 on stmt: $H_batch.2.602 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=H__batch_2, rhs=Hnew, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:38:06,137 on stmt: H__batch_2 = $H_batch.2.602
DEBUG 2022-02-14 16:38:06,137 replaced with: H__batch_2.1 = $H_batch.2.602
DEBUG 2022-02-14 16:38:06,137 on stmt: jump 782
DEBUG 2022-02-14 16:38:06,137 ==== SSA block rewrite pass on 577
DEBUG 2022-02-14 16:38:06,137 Running <numba.core.ssa._FreshVarHandler object at 0x7fa046df6fa0>
DEBUG 2022-02-14 16:38:06,137 on stmt: $260pred = call bool260(glynn, func=bool260, args=(Var(glynn, loop_hafnian_batch.py:20),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:06,137 on stmt: branch $260pred, 591, 593
DEBUG 2022-02-14 16:38:06,137 ==== SSA block rewrite pass on 591
DEBUG 2022-02-14 16:38:06,138 Running <numba.core.ssa._FreshVarHandler object at 0x7fa046df6fa0>
DEBUG 2022-02-14 16:38:06,138 on stmt: ret.172 = call assert.171(msg.170, kept_edges_size0.168, edge__reps__size0_160, func=assert.171, args=[Var(msg.170, loop_hafnian_batch.py:47), Var(kept_edges_size0.168, loop_hafnian_batch.py:39), Var(edge__reps__size0_160, loop_hafnian_batch.py:28)], kws={}, vararg=None, target=None)
DEBUG 2022-02-14 16:38:06,138 on stmt: id=3[LoopNest(index_variable = parfor_index.213, range = (0, edge__reps__size0_160, 1))]{888: <ir.Block at /home/adi/GBS/gbs/loop_hafnian_batch.py (47)>}Var(parfor_index.213, loop_hafnian_batch.py:47)
DEBUG 2022-02-14 16:38:06,138 on stmt: delta.2 = delta
DEBUG 2022-02-14 16:38:06,138 on stmt: jump 631
DEBUG 2022-02-14 16:38:06,138 ==== SSA block rewrite pass on 782
DEBUG 2022-02-14 16:38:06,138 Running <numba.core.ssa._FreshVarHandler object at 0x7fa046df6fa0>
DEBUG 2022-02-14 16:38:06,138 on stmt: jump 40
DEBUG 2022-02-14 16:38:06,138 Replaced assignments: defaultdict(<class 'list'>,
            {0: [<numba.core.ir.Assign object at 0x7fa046df69d0>],
             743: [<numba.core.ir.Assign object at 0x7fa046f64d90>]})
DEBUG 2022-02-14 16:38:06,138 ==== SSA block rewrite pass on 0
DEBUG 2022-02-14 16:38:06,138 Running <numba.core.ssa._FixSSAVars object at 0x7fa046df6fa0>
DEBUG 2022-02-14 16:38:06,138 on stmt: sched.834 = arg(0, name=sched)
DEBUG 2022-02-14 16:38:06,138 on stmt: _136binary__add_59 = arg(1, name=_136binary__add_59)
DEBUG 2022-02-14 16:38:06,138 on stmt: A = arg(2, name=A)
DEBUG 2022-02-14 16:38:06,138 on stmt: D = arg(3, name=D)
DEBUG 2022-02-14 16:38:06,138 on stmt: N__fixed = arg(4, name=N__fixed)
DEBUG 2022-02-14 16:38:06,138 on stmt: N__max = arg(5, name=N__max)
DEBUG 2022-02-14 16:38:06,138 on stmt: batch__max = arg(6, name=batch__max)
DEBUG 2022-02-14 16:38:06,138 on stmt: binoms = arg(7, name=binoms)
DEBUG 2022-02-14 16:38:06,138 on stmt: edge__reps = arg(8, name=edge__reps)
DEBUG 2022-02-14 16:38:06,138 on stmt: edge__reps__size0_160 = arg(9, name=edge__reps__size0_160)
DEBUG 2022-02-14 16:38:06,138 on stmt: glynn = arg(10, name=glynn)
DEBUG 2022-02-14 16:38:06,138 on stmt: n = arg(11, name=n)
DEBUG 2022-02-14 16:38:06,139 on stmt: oddV = arg(12, name=oddV)
DEBUG 2022-02-14 16:38:06,139 on stmt: odd__cutoff = arg(13, name=odd__cutoff)
DEBUG 2022-02-14 16:38:06,139 on stmt: oddloop = arg(14, name=oddloop)
DEBUG 2022-02-14 16:38:06,139 on stmt: H__batch_2__arr = arg(15, name=H__batch_2__arr)
DEBUG 2022-02-14 16:38:06,139 on stmt: $2load_global.0.835 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:38:06,139 on stmt: $4load_method.1.836 = getattr(value=$2load_global.0.835, attr=copy)
DEBUG 2022-02-14 16:38:06,139 on stmt: H__batch_2 = call $4load_method.1.836(H__batch_2__arr, func=$4load_method.1.836, args=[Var(H__batch_2__arr, <string>:2)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:06,139 on stmt: $12load_global.4.837 = global(range: <class 'range'>)
DEBUG 2022-02-14 16:38:06,139 on stmt: $const16.6.838 = const(int, 0)
DEBUG 2022-02-14 16:38:06,139 on stmt: $18binary_subscr.7.839 = getitem(value=sched.834, index=$const16.6.838, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:06,139 on stmt: $const22.9.840 = const(int, 1)
DEBUG 2022-02-14 16:38:06,139 on stmt: $24binary_subscr.10.841 = getitem(value=sched.834, index=$const22.9.840, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:06,139 on stmt: $26load_global.11.842 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:38:06,139 on stmt: $28load_method.12.843 = getattr(value=$26load_global.11.842, attr=uint8)
DEBUG 2022-02-14 16:38:06,139 on stmt: $const30.13.844 = const(int, 1)
DEBUG 2022-02-14 16:38:06,139 on stmt: $32call_method.14.845 = call $28load_method.12.843($const30.13.844, func=$28load_method.12.843, args=[Var($const30.13.844, <string>:3)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:06,139 on stmt: $34binary_add.15.846 = $24binary_subscr.10.841 + $32call_method.14.845
DEBUG 2022-02-14 16:38:06,139 on stmt: $36call_function.16.847 = call $12load_global.4.837($18binary_subscr.7.839, $34binary_add.15.846, func=$12load_global.4.837, args=[Var($18binary_subscr.7.839, <string>:3), Var($34binary_add.15.846, <string>:3)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:06,139 on stmt: $38get_iter.17.848 = getiter(value=$36call_function.16.847)
DEBUG 2022-02-14 16:38:06,139 on stmt: $phi40.0.849 = $38get_iter.17.848
DEBUG 2022-02-14 16:38:06,139 on stmt: $const462.12 = const(int, 2)
DEBUG 2022-02-14 16:38:06,139 on stmt: $const390.6 = const(float, -1.0)
DEBUG 2022-02-14 16:38:06,139 on stmt: $const394.8 = const(int, 2)
DEBUG 2022-02-14 16:38:06,139 on stmt: $const410.15 = const(int, 2)
DEBUG 2022-02-14 16:38:06,140 on stmt: $const416.18 = const(int, 0)
DEBUG 2022-02-14 16:38:06,140 on stmt: $const432.25 = const(int, 2)
DEBUG 2022-02-14 16:38:06,140 on stmt: $const436.27 = const(int, 0)
DEBUG 2022-02-14 16:38:06,140 on stmt: bool440 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:38:06,140 on stmt: $282load_global.1 = global(get_submatrices: CPUDispatcher(<function get_submatrices at 0x7fa047ebed30>))
DEBUG 2022-02-14 16:38:06,140 on stmt: $304load_global.12 = global(eigvals: CPUDispatcher(<function eigvals at 0x7fa047e5d430>))
DEBUG 2022-02-14 16:38:06,140 on stmt: $312load_global.15 = global(f_loop: CPUDispatcher(<function f_loop at 0x7fa047ebe9d0>))
DEBUG 2022-02-14 16:38:06,140 on stmt: $328load_global.22 = global(f_loop_odd: CPUDispatcher(<function f_loop_odd at 0x7fa047ebeb80>))
DEBUG 2022-02-14 16:38:06,140 on stmt: $348load_global.31 = global(range: <class 'range'>)
DEBUG 2022-02-14 16:38:06,140 on stmt: $const350.32 = const(int, 2)
DEBUG 2022-02-14 16:38:06,140 on stmt: $const354.34 = const(int, 0)
DEBUG 2022-02-14 16:38:06,140 on stmt: $const360.37 = const(int, 2)
DEBUG 2022-02-14 16:38:06,140 on stmt: $364binary_multiply.39 = $const360.37 * batch__max
DEBUG 2022-02-14 16:38:06,140 on stmt: $368binary_add.41 = $364binary_multiply.39 + odd__cutoff
DEBUG 2022-02-14 16:38:06,140 on stmt: $const370.42 = const(int, 1)
DEBUG 2022-02-14 16:38:06,140 on stmt: $372binary_add.43 = $368binary_add.41 + $const370.42
DEBUG 2022-02-14 16:38:06,140 on stmt: $const168.4 = const(int, 2)
DEBUG 2022-02-14 16:38:06,140 on stmt: $172binary_multiply.6 = $const168.4 * batch__max
DEBUG 2022-02-14 16:38:06,140 on stmt: $176binary_add.8 = $172binary_multiply.6 + odd__cutoff
DEBUG 2022-02-14 16:38:06,140 on stmt: $const178.9 = const(int, 1)
DEBUG 2022-02-14 16:38:06,140 on stmt: $180binary_add.10 = $176binary_add.8 + $const178.9
DEBUG 2022-02-14 16:38:06,140 on stmt: $192load_global.15 = global(find_kept_edges: CPUDispatcher(<function find_kept_edges at 0x7fa047ebe790>))
DEBUG 2022-02-14 16:38:06,141 on stmt: $np_g_var.209 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:38:06,141 on stmt: $empty_attr_attr.210 = getattr(value=$np_g_var.209, attr=empty)
DEBUG 2022-02-14 16:38:06,141 on stmt: $np_typ_var.211 = getattr(value=$np_g_var.209, attr=complex128)
DEBUG 2022-02-14 16:38:06,141 on stmt: Hnew = call $empty_attr_attr.210($180binary_add.10, $np_typ_var.211, func=$empty_attr_attr.210, args=[Var($180binary_add.10, loop_hafnian_batch.py:37), Var($np_typ_var.211, loop_hafnian_batch.py:37)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:06,141 on stmt: binom_prod = const(float, 1.0)
DEBUG 2022-02-14 16:38:06,141 on stmt: $214load_global.23 = global(range: <class 'range'>)
DEBUG 2022-02-14 16:38:06,141 on stmt: $const216.24 = const(int, 1)
DEBUG 2022-02-14 16:38:06,141 on stmt: $const220.26 = const(int, 2)
DEBUG 2022-02-14 16:38:06,141 on stmt: $222binary_floor_divide.27 = n // $const220.26
DEBUG 2022-02-14 16:38:06,141 on stmt: msg.191 = const(str, Sizes of H_batch.2, Hnew do not match on /home/adi/GBS/gbs/loop_hafnian_batch.py (69))
DEBUG 2022-02-14 16:38:06,141 on stmt: assert.192 = global(assert_equiv: <intrinsic assert_equiv>)
DEBUG 2022-02-14 16:38:06,141 on stmt: bool260 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:38:06,141 on stmt: msg.170 = const(str, Sizes of kept_edges, edge_reps do not match on /home/adi/GBS/gbs/loop_hafnian_batch.py (47))
DEBUG 2022-02-14 16:38:06,142 on stmt: assert.171 = global(assert_equiv: <intrinsic assert_equiv>)
DEBUG 2022-02-14 16:38:06,142 on stmt: $np_g_var.214 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:38:06,142 on stmt: $empty_attr_attr.215 = getattr(value=$np_g_var.214, attr=empty)
DEBUG 2022-02-14 16:38:06,142 on stmt: $np_typ_var.216 = getattr(value=$np_g_var.214, attr=int64)
DEBUG 2022-02-14 16:38:06,142 on stmt: delta = call $empty_attr_attr.215(edge__reps__size0_160, $np_typ_var.216, func=$empty_attr_attr.215, args=[Var(edge__reps__size0_160, loop_hafnian_batch.py:28), Var($np_typ_var.216, loop_hafnian_batch.py:47)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:06,142 on stmt: jump 40
DEBUG 2022-02-14 16:38:06,142 ==== SSA block rewrite pass on 40
DEBUG 2022-02-14 16:38:06,142 Running <numba.core.ssa._FixSSAVars object at 0x7fa046df6fa0>
DEBUG 2022-02-14 16:38:06,142 on stmt: $40for_iter.1.850 = iternext(value=$phi40.0.849)
DEBUG 2022-02-14 16:38:06,142 on stmt: $40for_iter.2.851 = pair_first(value=$40for_iter.1.850)
DEBUG 2022-02-14 16:38:06,142 on stmt: $40for_iter.3.852 = pair_second(value=$40for_iter.1.850)
DEBUG 2022-02-14 16:38:06,142 on stmt: $phi42.1.853 = $40for_iter.2.851
DEBUG 2022-02-14 16:38:06,142 on stmt: branch $40for_iter.3.852, 42, 889
DEBUG 2022-02-14 16:38:06,142 ==== SSA block rewrite pass on 42
DEBUG 2022-02-14 16:38:06,142 Running <numba.core.ssa._FixSSAVars object at 0x7fa046df6fa0>
DEBUG 2022-02-14 16:38:06,142 on stmt: parfor__index_230 = $phi42.1.853
DEBUG 2022-02-14 16:38:06,142 on stmt: jump 50
DEBUG 2022-02-14 16:38:06,142 ==== SSA block rewrite pass on 889
DEBUG 2022-02-14 16:38:06,142 Running <numba.core.ssa._FixSSAVars object at 0x7fa046df6fa0>
DEBUG 2022-02-14 16:38:06,143 on stmt: $const52.1.854 = const(NoneType, None)
DEBUG 2022-02-14 16:38:06,143 on stmt: $const54.2.855 = const(NoneType, None)
DEBUG 2022-02-14 16:38:06,143 on stmt: $56build_slice.3.856 = global(slice: <class 'slice'>)
DEBUG 2022-02-14 16:38:06,143 on stmt: $56build_slice.4.857 = call $56build_slice.3.856($const52.1.854, $const54.2.855, func=$56build_slice.3.856, args=(Var($const52.1.854, <string>:5), Var($const54.2.855, <string>:5)), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:06,143 on stmt: $58binary_subscr.5.858 = getitem(value=H__batch_2, index=$56build_slice.4.857, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:06,143 find_def var='H__batch_2' stmt=$58binary_subscr.5.858 = getitem(value=H__batch_2, index=$56build_slice.4.857, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:06,143 find_def_from_top label 889
DEBUG 2022-02-14 16:38:06,143 idom 40 from label 889
DEBUG 2022-02-14 16:38:06,143 find_def_from_bottom label 40
DEBUG 2022-02-14 16:38:06,143 find_def_from_top label 40
DEBUG 2022-02-14 16:38:06,143 insert phi node H__batch_2.2 = phi(incoming_values=[], incoming_blocks=[]) at 40
DEBUG 2022-02-14 16:38:06,143 find_def_from_bottom label 0
DEBUG 2022-02-14 16:38:06,143 incoming_def H__batch_2 = call $4load_method.1.836(H__batch_2__arr, func=$4load_method.1.836, args=[Var(H__batch_2__arr, <string>:2)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:06,143 find_def_from_bottom label 782
DEBUG 2022-02-14 16:38:06,143 find_def_from_top label 782
DEBUG 2022-02-14 16:38:06,143 idom 743 from label 782
DEBUG 2022-02-14 16:38:06,143 find_def_from_bottom label 743
DEBUG 2022-02-14 16:38:06,143 incoming_def H__batch_2.1 = $H_batch.2.602
DEBUG 2022-02-14 16:38:06,143 replaced with: $58binary_subscr.5.858 = getitem(value=H__batch_2.2, index=$56build_slice.4.857, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:06,143 on stmt: $const62.7.859 = const(NoneType, None)
DEBUG 2022-02-14 16:38:06,144 on stmt: $const64.8.860 = const(NoneType, None)
DEBUG 2022-02-14 16:38:06,144 on stmt: $66build_slice.9.861 = global(slice: <class 'slice'>)
DEBUG 2022-02-14 16:38:06,144 on stmt: $66build_slice.10.862 = call $66build_slice.9.861($const62.7.859, $const64.8.860, func=$66build_slice.9.861, args=(Var($const62.7.859, <string>:5), Var($const64.8.860, <string>:5)), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:06,144 on stmt: H__batch_2__arr[$66build_slice.10.862] = $58binary_subscr.5.858
DEBUG 2022-02-14 16:38:06,144 on stmt: $const70.11.863 = const(NoneType, None)
DEBUG 2022-02-14 16:38:06,144 on stmt: $72return_value.12.864 = cast(value=$const70.11.863)
DEBUG 2022-02-14 16:38:06,144 on stmt: return $72return_value.12.864
DEBUG 2022-02-14 16:38:06,144 ==== SSA block rewrite pass on 686
DEBUG 2022-02-14 16:38:06,144 Running <numba.core.ssa._FixSSAVars object at 0x7fa046df6fa0>
DEBUG 2022-02-14 16:38:06,144 on stmt: $450binary_subscr.6 = getitem(value=Hnew, index=$N_det.252, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:06,144 on stmt: $456binary_multiply.9 = n_det_binom_prod * plus_minus
DEBUG 2022-02-14 16:38:06,144 on stmt: $464binary_floor_divide.13 = N // $const462.12
DEBUG 2022-02-14 16:38:06,144 on stmt: $466binary_subscr.14 = getitem(value=f_even, index=$464binary_floor_divide.13, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:06,144 on stmt: $468binary_multiply.15 = $456binary_multiply.9 * $466binary_subscr.14
DEBUG 2022-02-14 16:38:06,144 on stmt: $470inplace_add.16 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$450binary_subscr.6, rhs=$468binary_multiply.15, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:38:06,144 on stmt: Hnew[$N_det.252] = $470inplace_add.16
DEBUG 2022-02-14 16:38:06,144 on stmt: jump 727
DEBUG 2022-02-14 16:38:06,144 ==== SSA block rewrite pass on 725
DEBUG 2022-02-14 16:38:06,144 Running <numba.core.ssa._FixSSAVars object at 0x7fa046df6fa0>
DEBUG 2022-02-14 16:38:06,144 on stmt: $484binary_subscr.6 = getitem(value=Hnew, index=$N_det.252, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:06,144 on stmt: $490binary_multiply.9 = n_det_binom_prod * plus_minus
DEBUG 2022-02-14 16:38:06,144 on stmt: $496binary_subscr.12 = getitem(value=f_odd, index=N, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:06,145 on stmt: $498binary_multiply.13 = $490binary_multiply.9 * $496binary_subscr.12
DEBUG 2022-02-14 16:38:06,145 on stmt: $500inplace_add.14 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$484binary_subscr.6, rhs=$498binary_multiply.13, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:38:06,145 on stmt: Hnew[$N_det.252] = $500inplace_add.14
DEBUG 2022-02-14 16:38:06,145 on stmt: jump 727
DEBUG 2022-02-14 16:38:06,145 ==== SSA block rewrite pass on 593
DEBUG 2022-02-14 16:38:06,145 Running <numba.core.ssa._FixSSAVars object at 0x7fa046df6fa0>
DEBUG 2022-02-14 16:38:06,145 on stmt: delta.2 = kept_edges
DEBUG 2022-02-14 16:38:06,145 on stmt: jump 631
DEBUG 2022-02-14 16:38:06,145 ==== SSA block rewrite pass on 670
DEBUG 2022-02-14 16:38:06,145 Running <numba.core.ssa._FixSSAVars object at 0x7fa046df6fa0>
DEBUG 2022-02-14 16:38:06,145 on stmt: N = N__fixed + $N_det.252
DEBUG 2022-02-14 16:38:06,145 on stmt: $396binary_floor_divide.9 = N // $const394.8
DEBUG 2022-02-14 16:38:06,145 on stmt: $400binary_subtract.11 = $396binary_floor_divide.9 - val.10
DEBUG 2022-02-14 16:38:06,145 on stmt: plus_minus = $const390.6 ** $400binary_subtract.11
DEBUG 2022-02-14 16:38:06,145 on stmt: $412binary_floor_divide.16 = $N_det.252 // $const410.15
DEBUG 2022-02-14 16:38:06,145 on stmt: $418binary_subscr.19 = static_getitem(value=kept_edges, index=0, index_var=$const416.18, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:06,146 on stmt: $420build_tuple.20 = build_tuple(items=[Var($412binary_floor_divide.16, loop_hafnian_batch.py:62), Var($418binary_subscr.19, loop_hafnian_batch.py:62)])
DEBUG 2022-02-14 16:38:06,146 on stmt: $422binary_subscr.21 = getitem(value=binoms, index=$420build_tuple.20, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:06,146 on stmt: n_det_binom_prod = $422binary_subscr.21 * binom_prod.2
DEBUG 2022-02-14 16:38:06,146 on stmt: $434binary_modulo.26 = $N_det.252 % $const432.25
DEBUG 2022-02-14 16:38:06,146 on stmt: $438compare_op.28 = $434binary_modulo.26 == $const436.27
DEBUG 2022-02-14 16:38:06,146 on stmt: $440pred = call bool440($438compare_op.28, func=bool440, args=(Var($438compare_op.28, loop_hafnian_batch.py:64),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:06,146 on stmt: branch $440pred, 686, 725
DEBUG 2022-02-14 16:38:06,146 ==== SSA block rewrite pass on 631
DEBUG 2022-02-14 16:38:06,146 Running <numba.core.ssa._FixSSAVars object at 0x7fa046df6fa0>
DEBUG 2022-02-14 16:38:06,146 on stmt: $292call_function.6 = call $282load_global.1(delta.2, A, D, oddV, func=$282load_global.1, args=[Var(delta.2, loop_hafnian_batch.py:51), Var(A, loop_hafnian_batch.py:20), Var(D, loop_hafnian_batch.py:20), Var(oddV, loop_hafnian_batch.py:21)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:06,146 on stmt: $294unpack_sequence.11 = exhaust_iter(value=$292call_function.6, count=4)
DEBUG 2022-02-14 16:38:06,146 on stmt: $AX_S.250 = static_getitem(value=$294unpack_sequence.11, index=0, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:06,146 on stmt: $XD_S.246 = static_getitem(value=$294unpack_sequence.11, index=1, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:06,146 on stmt: $D_S.248 = static_getitem(value=$294unpack_sequence.11, index=2, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:06,146 on stmt: $oddVX_S.249 = static_getitem(value=$294unpack_sequence.11, index=3, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:06,146 on stmt: E = call $304load_global.12($AX_S.250, func=$304load_global.12, args=[Var($AX_S.250, loop_hafnian_batch.py:51)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:06,146 on stmt: f_even = call $312load_global.15(E, $AX_S.250, $XD_S.246, $D_S.248, N__max, func=$312load_global.15, args=[Var(E, loop_hafnian_batch.py:53), Var($AX_S.250, loop_hafnian_batch.py:51), Var($XD_S.246, loop_hafnian_batch.py:51), Var($D_S.248, loop_hafnian_batch.py:51), Var(N__max, loop_hafnian_batch.py:26)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:06,147 on stmt: f_odd = call $328load_global.22(E, $AX_S.250, $XD_S.246, $D_S.248, N__max, oddloop, $oddVX_S.249, func=$328load_global.22, args=[Var(E, loop_hafnian_batch.py:53), Var($AX_S.250, loop_hafnian_batch.py:51), Var($XD_S.246, loop_hafnian_batch.py:51), Var($D_S.248, loop_hafnian_batch.py:51), Var(N__max, loop_hafnian_batch.py:26), Var(oddloop, loop_hafnian_batch.py:20), Var($oddVX_S.249, loop_hafnian_batch.py:51)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:06,147 on stmt: $356binary_subscr.35 = static_getitem(value=kept_edges, index=0, index_var=$const354.34, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:06,147 on stmt: $358binary_multiply.36 = $const350.32 * $356binary_subscr.35
DEBUG 2022-02-14 16:38:06,147 on stmt: $374call_function.44 = call $348load_global.31($358binary_multiply.36, $372binary_add.43, func=$348load_global.31, args=[Var($358binary_multiply.36, loop_hafnian_batch.py:58), Var($372binary_add.43, loop_hafnian_batch.py:58)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:06,147 on stmt: $376get_iter.45 = getiter(value=$374call_function.44)
DEBUG 2022-02-14 16:38:06,147 on stmt: jump 668
DEBUG 2022-02-14 16:38:06,147 ==== SSA block rewrite pass on 495
DEBUG 2022-02-14 16:38:06,147 Running <numba.core.ssa._FixSSAVars object at 0x7fa046df6fa0>
DEBUG 2022-02-14 16:38:06,147 on stmt: $228for_iter.2 = iternext(value=$226get_iter.29)
DEBUG 2022-02-14 16:38:06,147 on stmt: $i.253 = pair_first(value=$228for_iter.2)
DEBUG 2022-02-14 16:38:06,147 on stmt: $228for_iter.4 = pair_second(value=$228for_iter.2)
DEBUG 2022-02-14 16:38:06,147 on stmt: branch $228for_iter.4, 571, 577
DEBUG 2022-02-14 16:38:06,147 ==== SSA block rewrite pass on 668
DEBUG 2022-02-14 16:38:06,147 Running <numba.core.ssa._FixSSAVars object at 0x7fa046df6fa0>
DEBUG 2022-02-14 16:38:06,147 on stmt: $378for_iter.2 = iternext(value=$376get_iter.45)
DEBUG 2022-02-14 16:38:06,147 on stmt: $N_det.252 = pair_first(value=$378for_iter.2)
DEBUG 2022-02-14 16:38:06,147 on stmt: $378for_iter.4 = pair_second(value=$378for_iter.2)
DEBUG 2022-02-14 16:38:06,147 on stmt: branch $378for_iter.4, 670, 743
DEBUG 2022-02-14 16:38:06,147 ==== SSA block rewrite pass on 571
DEBUG 2022-02-14 16:38:06,147 Running <numba.core.ssa._FixSSAVars object at 0x7fa046df6fa0>
DEBUG 2022-02-14 16:38:06,147 on stmt: $240binary_subscr.7 = getitem(value=edge__reps, index=$i.253, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:06,147 on stmt: $246binary_subscr.10 = getitem(value=kept_edges, index=$i.253, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:06,148 on stmt: $248build_tuple.11 = build_tuple(items=[Var($240binary_subscr.7, loop_hafnian_batch.py:44), Var($246binary_subscr.10, loop_hafnian_batch.py:44)])
DEBUG 2022-02-14 16:38:06,148 on stmt: $250binary_subscr.12 = getitem(value=binoms, index=$248build_tuple.11, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:06,148 on stmt: $binom_prod.2.600 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=binom_prod.2, rhs=$250binary_subscr.12, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:38:06,148 on stmt: binom_prod.2 = $binom_prod.2.600
DEBUG 2022-02-14 16:38:06,148 on stmt: jump 495
DEBUG 2022-02-14 16:38:06,148 ==== SSA block rewrite pass on 727
DEBUG 2022-02-14 16:38:06,148 Running <numba.core.ssa._FixSSAVars object at 0x7fa046df6fa0>
DEBUG 2022-02-14 16:38:06,148 on stmt: jump 668
DEBUG 2022-02-14 16:38:06,148 ==== SSA block rewrite pass on 50
DEBUG 2022-02-14 16:38:06,148 Running <numba.core.ssa._FixSSAVars object at 0x7fa046df6fa0>
DEBUG 2022-02-14 16:38:06,148 on stmt: j = parfor__index_230
DEBUG 2022-02-14 16:38:06,148 on stmt: id=2[LoopNest(index_variable = parfor_index.208, range = (0, $180binary_add.10, 1))]{887: <ir.Block at /home/adi/GBS/gbs/loop_hafnian_batch.py (37)>}Var(parfor_index.208, loop_hafnian_batch.py:37)
DEBUG 2022-02-14 16:38:06,148 on stmt: kept_edges = call $192load_global.15(j, edge__reps, func=$192load_global.15, args=[Var(j, loop_hafnian_batch.py:35), Var(edge__reps, loop_hafnian_batch.py:28)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:06,148 on stmt: kept_edges_shape.167 = getattr(value=kept_edges, attr=shape)
DEBUG 2022-02-14 16:38:06,148 on stmt: kept_edges_size0.168 = static_getitem(value=kept_edges_shape.167, index=0, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:06,148 on stmt: binom_prod.2 = binom_prod
DEBUG 2022-02-14 16:38:06,148 on stmt: id=6[LoopNest(index_variable = parfor_index.226, range = (0, kept_edges_size0.168, 1))]{557: <ir.Block at /home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numba/parfors/parfor.py (256)>}Var(parfor_index.226, parfor.py:256)
DEBUG 2022-02-14 16:38:06,148 on stmt: $224call_function.28 = call $214load_global.23($const216.24, $222binary_floor_divide.27, func=$214load_global.23, args=[Var($const216.24, loop_hafnian_batch.py:43), Var($222binary_floor_divide.27, loop_hafnian_batch.py:43)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:06,148 on stmt: $226get_iter.29 = getiter(value=$224call_function.28)
DEBUG 2022-02-14 16:38:06,148 on stmt: jump 495
DEBUG 2022-02-14 16:38:06,148 ==== SSA block rewrite pass on 743
DEBUG 2022-02-14 16:38:06,149 Running <numba.core.ssa._FixSSAVars object at 0x7fa046df6fa0>
DEBUG 2022-02-14 16:38:06,149 on stmt: ret.193 = call assert.192(msg.191, _136binary__add_59, $180binary_add.10, func=assert.192, args=[Var(msg.191, loop_hafnian_batch.py:69), Var(_136binary__add_59, loop_hafnian_batch.py:34), Var($180binary_add.10, loop_hafnian_batch.py:37)], kws={}, vararg=None, target=None)
DEBUG 2022-02-14 16:38:06,149 on stmt: $H_batch.2.602 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=H__batch_2, rhs=Hnew, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:38:06,149 find_def var='H__batch_2' stmt=$H_batch.2.602 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=H__batch_2, rhs=Hnew, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:38:06,149 find_def_from_top label 743
DEBUG 2022-02-14 16:38:06,149 idom 668 from label 743
DEBUG 2022-02-14 16:38:06,149 find_def_from_bottom label 668
DEBUG 2022-02-14 16:38:06,149 find_def_from_top label 668
DEBUG 2022-02-14 16:38:06,149 idom 631 from label 668
DEBUG 2022-02-14 16:38:06,149 find_def_from_bottom label 631
DEBUG 2022-02-14 16:38:06,149 find_def_from_top label 631
DEBUG 2022-02-14 16:38:06,149 idom 577 from label 631
DEBUG 2022-02-14 16:38:06,149 find_def_from_bottom label 577
DEBUG 2022-02-14 16:38:06,149 find_def_from_top label 577
DEBUG 2022-02-14 16:38:06,149 idom 495 from label 577
DEBUG 2022-02-14 16:38:06,149 find_def_from_bottom label 495
DEBUG 2022-02-14 16:38:06,149 find_def_from_top label 495
DEBUG 2022-02-14 16:38:06,149 idom 50 from label 495
DEBUG 2022-02-14 16:38:06,149 find_def_from_bottom label 50
DEBUG 2022-02-14 16:38:06,149 find_def_from_top label 50
DEBUG 2022-02-14 16:38:06,149 idom 42 from label 50
DEBUG 2022-02-14 16:38:06,149 find_def_from_bottom label 42
DEBUG 2022-02-14 16:38:06,149 find_def_from_top label 42
DEBUG 2022-02-14 16:38:06,149 idom 40 from label 42
DEBUG 2022-02-14 16:38:06,149 find_def_from_bottom label 40
DEBUG 2022-02-14 16:38:06,149 replaced with: $H_batch.2.602 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=H__batch_2.2, rhs=Hnew, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:38:06,149 on stmt: H__batch_2.1 = $H_batch.2.602
DEBUG 2022-02-14 16:38:06,150 on stmt: jump 782
DEBUG 2022-02-14 16:38:06,150 ==== SSA block rewrite pass on 577
DEBUG 2022-02-14 16:38:06,150 Running <numba.core.ssa._FixSSAVars object at 0x7fa046df6fa0>
DEBUG 2022-02-14 16:38:06,150 on stmt: $260pred = call bool260(glynn, func=bool260, args=(Var(glynn, loop_hafnian_batch.py:20),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:06,150 on stmt: branch $260pred, 591, 593
DEBUG 2022-02-14 16:38:06,150 ==== SSA block rewrite pass on 591
DEBUG 2022-02-14 16:38:06,150 Running <numba.core.ssa._FixSSAVars object at 0x7fa046df6fa0>
DEBUG 2022-02-14 16:38:06,150 on stmt: ret.172 = call assert.171(msg.170, kept_edges_size0.168, edge__reps__size0_160, func=assert.171, args=[Var(msg.170, loop_hafnian_batch.py:47), Var(kept_edges_size0.168, loop_hafnian_batch.py:39), Var(edge__reps__size0_160, loop_hafnian_batch.py:28)], kws={}, vararg=None, target=None)
DEBUG 2022-02-14 16:38:06,150 on stmt: id=3[LoopNest(index_variable = parfor_index.213, range = (0, edge__reps__size0_160, 1))]{888: <ir.Block at /home/adi/GBS/gbs/loop_hafnian_batch.py (47)>}Var(parfor_index.213, loop_hafnian_batch.py:47)
DEBUG 2022-02-14 16:38:06,150 on stmt: delta.2 = delta
DEBUG 2022-02-14 16:38:06,150 on stmt: jump 631
DEBUG 2022-02-14 16:38:06,150 ==== SSA block rewrite pass on 782
DEBUG 2022-02-14 16:38:06,150 Running <numba.core.ssa._FixSSAVars object at 0x7fa046df6fa0>
DEBUG 2022-02-14 16:38:06,150 on stmt: jump 40
DEBUG 2022-02-14 16:38:06,150 Fix SSA violator on var delta.2
DEBUG 2022-02-14 16:38:06,150 ==== SSA block rewrite pass on 0
DEBUG 2022-02-14 16:38:06,150 Running <numba.core.ssa._FreshVarHandler object at 0x7fa046df64f0>
DEBUG 2022-02-14 16:38:06,150 on stmt: sched.834 = arg(0, name=sched)
DEBUG 2022-02-14 16:38:06,150 on stmt: _136binary__add_59 = arg(1, name=_136binary__add_59)
DEBUG 2022-02-14 16:38:06,150 on stmt: A = arg(2, name=A)
DEBUG 2022-02-14 16:38:06,150 on stmt: D = arg(3, name=D)
DEBUG 2022-02-14 16:38:06,150 on stmt: N__fixed = arg(4, name=N__fixed)
DEBUG 2022-02-14 16:38:06,150 on stmt: N__max = arg(5, name=N__max)
DEBUG 2022-02-14 16:38:06,151 on stmt: batch__max = arg(6, name=batch__max)
DEBUG 2022-02-14 16:38:06,151 on stmt: binoms = arg(7, name=binoms)
DEBUG 2022-02-14 16:38:06,151 on stmt: edge__reps = arg(8, name=edge__reps)
DEBUG 2022-02-14 16:38:06,151 on stmt: edge__reps__size0_160 = arg(9, name=edge__reps__size0_160)
DEBUG 2022-02-14 16:38:06,151 on stmt: glynn = arg(10, name=glynn)
DEBUG 2022-02-14 16:38:06,151 on stmt: n = arg(11, name=n)
DEBUG 2022-02-14 16:38:06,151 on stmt: oddV = arg(12, name=oddV)
DEBUG 2022-02-14 16:38:06,151 on stmt: odd__cutoff = arg(13, name=odd__cutoff)
DEBUG 2022-02-14 16:38:06,151 on stmt: oddloop = arg(14, name=oddloop)
DEBUG 2022-02-14 16:38:06,151 on stmt: H__batch_2__arr = arg(15, name=H__batch_2__arr)
DEBUG 2022-02-14 16:38:06,151 on stmt: $2load_global.0.835 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:38:06,151 on stmt: $4load_method.1.836 = getattr(value=$2load_global.0.835, attr=copy)
DEBUG 2022-02-14 16:38:06,151 on stmt: H__batch_2 = call $4load_method.1.836(H__batch_2__arr, func=$4load_method.1.836, args=[Var(H__batch_2__arr, <string>:2)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:06,151 on stmt: $12load_global.4.837 = global(range: <class 'range'>)
DEBUG 2022-02-14 16:38:06,151 on stmt: $const16.6.838 = const(int, 0)
DEBUG 2022-02-14 16:38:06,151 on stmt: $18binary_subscr.7.839 = getitem(value=sched.834, index=$const16.6.838, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:06,151 on stmt: $const22.9.840 = const(int, 1)
DEBUG 2022-02-14 16:38:06,151 on stmt: $24binary_subscr.10.841 = getitem(value=sched.834, index=$const22.9.840, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:06,151 on stmt: $26load_global.11.842 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:38:06,151 on stmt: $28load_method.12.843 = getattr(value=$26load_global.11.842, attr=uint8)
DEBUG 2022-02-14 16:38:06,151 on stmt: $const30.13.844 = const(int, 1)
DEBUG 2022-02-14 16:38:06,151 on stmt: $32call_method.14.845 = call $28load_method.12.843($const30.13.844, func=$28load_method.12.843, args=[Var($const30.13.844, <string>:3)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:06,151 on stmt: $34binary_add.15.846 = $24binary_subscr.10.841 + $32call_method.14.845
DEBUG 2022-02-14 16:38:06,151 on stmt: $36call_function.16.847 = call $12load_global.4.837($18binary_subscr.7.839, $34binary_add.15.846, func=$12load_global.4.837, args=[Var($18binary_subscr.7.839, <string>:3), Var($34binary_add.15.846, <string>:3)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:06,151 on stmt: $38get_iter.17.848 = getiter(value=$36call_function.16.847)
DEBUG 2022-02-14 16:38:06,152 on stmt: $phi40.0.849 = $38get_iter.17.848
DEBUG 2022-02-14 16:38:06,152 on stmt: $const462.12 = const(int, 2)
DEBUG 2022-02-14 16:38:06,152 on stmt: $const390.6 = const(float, -1.0)
DEBUG 2022-02-14 16:38:06,152 on stmt: $const394.8 = const(int, 2)
DEBUG 2022-02-14 16:38:06,152 on stmt: $const410.15 = const(int, 2)
DEBUG 2022-02-14 16:38:06,152 on stmt: $const416.18 = const(int, 0)
DEBUG 2022-02-14 16:38:06,152 on stmt: $const432.25 = const(int, 2)
DEBUG 2022-02-14 16:38:06,152 on stmt: $const436.27 = const(int, 0)
DEBUG 2022-02-14 16:38:06,152 on stmt: bool440 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:38:06,152 on stmt: $282load_global.1 = global(get_submatrices: CPUDispatcher(<function get_submatrices at 0x7fa047ebed30>))
DEBUG 2022-02-14 16:38:06,152 on stmt: $304load_global.12 = global(eigvals: CPUDispatcher(<function eigvals at 0x7fa047e5d430>))
DEBUG 2022-02-14 16:38:06,152 on stmt: $312load_global.15 = global(f_loop: CPUDispatcher(<function f_loop at 0x7fa047ebe9d0>))
DEBUG 2022-02-14 16:38:06,152 on stmt: $328load_global.22 = global(f_loop_odd: CPUDispatcher(<function f_loop_odd at 0x7fa047ebeb80>))
DEBUG 2022-02-14 16:38:06,152 on stmt: $348load_global.31 = global(range: <class 'range'>)
DEBUG 2022-02-14 16:38:06,152 on stmt: $const350.32 = const(int, 2)
DEBUG 2022-02-14 16:38:06,152 on stmt: $const354.34 = const(int, 0)
DEBUG 2022-02-14 16:38:06,152 on stmt: $const360.37 = const(int, 2)
DEBUG 2022-02-14 16:38:06,152 on stmt: $364binary_multiply.39 = $const360.37 * batch__max
DEBUG 2022-02-14 16:38:06,152 on stmt: $368binary_add.41 = $364binary_multiply.39 + odd__cutoff
DEBUG 2022-02-14 16:38:06,152 on stmt: $const370.42 = const(int, 1)
DEBUG 2022-02-14 16:38:06,152 on stmt: $372binary_add.43 = $368binary_add.41 + $const370.42
DEBUG 2022-02-14 16:38:06,152 on stmt: $const168.4 = const(int, 2)
DEBUG 2022-02-14 16:38:06,152 on stmt: $172binary_multiply.6 = $const168.4 * batch__max
DEBUG 2022-02-14 16:38:06,152 on stmt: $176binary_add.8 = $172binary_multiply.6 + odd__cutoff
DEBUG 2022-02-14 16:38:06,152 on stmt: $const178.9 = const(int, 1)
DEBUG 2022-02-14 16:38:06,152 on stmt: $180binary_add.10 = $176binary_add.8 + $const178.9
DEBUG 2022-02-14 16:38:06,152 on stmt: $192load_global.15 = global(find_kept_edges: CPUDispatcher(<function find_kept_edges at 0x7fa047ebe790>))
DEBUG 2022-02-14 16:38:06,153 on stmt: $np_g_var.209 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:38:06,153 on stmt: $empty_attr_attr.210 = getattr(value=$np_g_var.209, attr=empty)
DEBUG 2022-02-14 16:38:06,153 on stmt: $np_typ_var.211 = getattr(value=$np_g_var.209, attr=complex128)
DEBUG 2022-02-14 16:38:06,153 on stmt: Hnew = call $empty_attr_attr.210($180binary_add.10, $np_typ_var.211, func=$empty_attr_attr.210, args=[Var($180binary_add.10, loop_hafnian_batch.py:37), Var($np_typ_var.211, loop_hafnian_batch.py:37)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:06,153 on stmt: binom_prod = const(float, 1.0)
DEBUG 2022-02-14 16:38:06,153 on stmt: $214load_global.23 = global(range: <class 'range'>)
DEBUG 2022-02-14 16:38:06,153 on stmt: $const216.24 = const(int, 1)
DEBUG 2022-02-14 16:38:06,153 on stmt: $const220.26 = const(int, 2)
DEBUG 2022-02-14 16:38:06,153 on stmt: $222binary_floor_divide.27 = n // $const220.26
DEBUG 2022-02-14 16:38:06,153 on stmt: msg.191 = const(str, Sizes of H_batch.2, Hnew do not match on /home/adi/GBS/gbs/loop_hafnian_batch.py (69))
DEBUG 2022-02-14 16:38:06,153 on stmt: assert.192 = global(assert_equiv: <intrinsic assert_equiv>)
DEBUG 2022-02-14 16:38:06,153 on stmt: bool260 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:38:06,153 on stmt: msg.170 = const(str, Sizes of kept_edges, edge_reps do not match on /home/adi/GBS/gbs/loop_hafnian_batch.py (47))
DEBUG 2022-02-14 16:38:06,153 on stmt: assert.171 = global(assert_equiv: <intrinsic assert_equiv>)
DEBUG 2022-02-14 16:38:06,153 on stmt: $np_g_var.214 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:38:06,153 on stmt: $empty_attr_attr.215 = getattr(value=$np_g_var.214, attr=empty)
DEBUG 2022-02-14 16:38:06,153 on stmt: $np_typ_var.216 = getattr(value=$np_g_var.214, attr=int64)
DEBUG 2022-02-14 16:38:06,153 on stmt: delta = call $empty_attr_attr.215(edge__reps__size0_160, $np_typ_var.216, func=$empty_attr_attr.215, args=[Var(edge__reps__size0_160, loop_hafnian_batch.py:28), Var($np_typ_var.216, loop_hafnian_batch.py:47)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:06,153 on stmt: jump 40
DEBUG 2022-02-14 16:38:06,153 ==== SSA block rewrite pass on 40
DEBUG 2022-02-14 16:38:06,153 Running <numba.core.ssa._FreshVarHandler object at 0x7fa046df64f0>
DEBUG 2022-02-14 16:38:06,153 on stmt: H__batch_2.2 = phi(incoming_values=[Var(H__batch_2, <string>:2), Var(H__batch_2.1, loop_hafnian_batch.py:69)], incoming_blocks=[0, 782])
DEBUG 2022-02-14 16:38:06,153 on stmt: $40for_iter.1.850 = iternext(value=$phi40.0.849)
DEBUG 2022-02-14 16:38:06,153 on stmt: $40for_iter.2.851 = pair_first(value=$40for_iter.1.850)
DEBUG 2022-02-14 16:38:06,153 on stmt: $40for_iter.3.852 = pair_second(value=$40for_iter.1.850)
DEBUG 2022-02-14 16:38:06,154 on stmt: $phi42.1.853 = $40for_iter.2.851
DEBUG 2022-02-14 16:38:06,154 on stmt: branch $40for_iter.3.852, 42, 889
DEBUG 2022-02-14 16:38:06,154 ==== SSA block rewrite pass on 42
DEBUG 2022-02-14 16:38:06,154 Running <numba.core.ssa._FreshVarHandler object at 0x7fa046df64f0>
DEBUG 2022-02-14 16:38:06,154 on stmt: parfor__index_230 = $phi42.1.853
DEBUG 2022-02-14 16:38:06,154 on stmt: jump 50
DEBUG 2022-02-14 16:38:06,154 ==== SSA block rewrite pass on 889
DEBUG 2022-02-14 16:38:06,154 Running <numba.core.ssa._FreshVarHandler object at 0x7fa046df64f0>
DEBUG 2022-02-14 16:38:06,154 on stmt: $const52.1.854 = const(NoneType, None)
DEBUG 2022-02-14 16:38:06,154 on stmt: $const54.2.855 = const(NoneType, None)
DEBUG 2022-02-14 16:38:06,154 on stmt: $56build_slice.3.856 = global(slice: <class 'slice'>)
DEBUG 2022-02-14 16:38:06,154 on stmt: $56build_slice.4.857 = call $56build_slice.3.856($const52.1.854, $const54.2.855, func=$56build_slice.3.856, args=(Var($const52.1.854, <string>:5), Var($const54.2.855, <string>:5)), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:06,154 on stmt: $58binary_subscr.5.858 = getitem(value=H__batch_2.2, index=$56build_slice.4.857, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:06,154 on stmt: $const62.7.859 = const(NoneType, None)
DEBUG 2022-02-14 16:38:06,154 on stmt: $const64.8.860 = const(NoneType, None)
DEBUG 2022-02-14 16:38:06,154 on stmt: $66build_slice.9.861 = global(slice: <class 'slice'>)
DEBUG 2022-02-14 16:38:06,154 on stmt: $66build_slice.10.862 = call $66build_slice.9.861($const62.7.859, $const64.8.860, func=$66build_slice.9.861, args=(Var($const62.7.859, <string>:5), Var($const64.8.860, <string>:5)), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:06,154 on stmt: H__batch_2__arr[$66build_slice.10.862] = $58binary_subscr.5.858
DEBUG 2022-02-14 16:38:06,154 on stmt: $const70.11.863 = const(NoneType, None)
DEBUG 2022-02-14 16:38:06,154 on stmt: $72return_value.12.864 = cast(value=$const70.11.863)
DEBUG 2022-02-14 16:38:06,154 on stmt: return $72return_value.12.864
DEBUG 2022-02-14 16:38:06,154 ==== SSA block rewrite pass on 686
DEBUG 2022-02-14 16:38:06,154 Running <numba.core.ssa._FreshVarHandler object at 0x7fa046df64f0>
DEBUG 2022-02-14 16:38:06,154 on stmt: $450binary_subscr.6 = getitem(value=Hnew, index=$N_det.252, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:06,154 on stmt: $456binary_multiply.9 = n_det_binom_prod * plus_minus
DEBUG 2022-02-14 16:38:06,155 on stmt: $464binary_floor_divide.13 = N // $const462.12
DEBUG 2022-02-14 16:38:06,155 on stmt: $466binary_subscr.14 = getitem(value=f_even, index=$464binary_floor_divide.13, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:06,155 on stmt: $468binary_multiply.15 = $456binary_multiply.9 * $466binary_subscr.14
DEBUG 2022-02-14 16:38:06,155 on stmt: $470inplace_add.16 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$450binary_subscr.6, rhs=$468binary_multiply.15, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:38:06,155 on stmt: Hnew[$N_det.252] = $470inplace_add.16
DEBUG 2022-02-14 16:38:06,155 on stmt: jump 727
DEBUG 2022-02-14 16:38:06,155 ==== SSA block rewrite pass on 725
DEBUG 2022-02-14 16:38:06,155 Running <numba.core.ssa._FreshVarHandler object at 0x7fa046df64f0>
DEBUG 2022-02-14 16:38:06,155 on stmt: $484binary_subscr.6 = getitem(value=Hnew, index=$N_det.252, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:06,155 on stmt: $490binary_multiply.9 = n_det_binom_prod * plus_minus
DEBUG 2022-02-14 16:38:06,155 on stmt: $496binary_subscr.12 = getitem(value=f_odd, index=N, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:06,155 on stmt: $498binary_multiply.13 = $490binary_multiply.9 * $496binary_subscr.12
DEBUG 2022-02-14 16:38:06,155 on stmt: $500inplace_add.14 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$484binary_subscr.6, rhs=$498binary_multiply.13, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:38:06,155 on stmt: Hnew[$N_det.252] = $500inplace_add.14
DEBUG 2022-02-14 16:38:06,155 on stmt: jump 727
DEBUG 2022-02-14 16:38:06,155 ==== SSA block rewrite pass on 593
DEBUG 2022-02-14 16:38:06,155 Running <numba.core.ssa._FreshVarHandler object at 0x7fa046df64f0>
DEBUG 2022-02-14 16:38:06,155 on stmt: delta.2 = kept_edges
DEBUG 2022-02-14 16:38:06,155 first assign: delta.2
DEBUG 2022-02-14 16:38:06,155 replaced with: delta.2 = kept_edges
DEBUG 2022-02-14 16:38:06,155 on stmt: jump 631
DEBUG 2022-02-14 16:38:06,155 ==== SSA block rewrite pass on 670
DEBUG 2022-02-14 16:38:06,155 Running <numba.core.ssa._FreshVarHandler object at 0x7fa046df64f0>
DEBUG 2022-02-14 16:38:06,155 on stmt: N = N__fixed + $N_det.252
DEBUG 2022-02-14 16:38:06,155 on stmt: $396binary_floor_divide.9 = N // $const394.8
DEBUG 2022-02-14 16:38:06,156 on stmt: $400binary_subtract.11 = $396binary_floor_divide.9 - val.10
DEBUG 2022-02-14 16:38:06,156 on stmt: plus_minus = $const390.6 ** $400binary_subtract.11
DEBUG 2022-02-14 16:38:06,156 on stmt: $412binary_floor_divide.16 = $N_det.252 // $const410.15
DEBUG 2022-02-14 16:38:06,156 on stmt: $418binary_subscr.19 = static_getitem(value=kept_edges, index=0, index_var=$const416.18, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:06,156 on stmt: $420build_tuple.20 = build_tuple(items=[Var($412binary_floor_divide.16, loop_hafnian_batch.py:62), Var($418binary_subscr.19, loop_hafnian_batch.py:62)])
DEBUG 2022-02-14 16:38:06,156 on stmt: $422binary_subscr.21 = getitem(value=binoms, index=$420build_tuple.20, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:06,156 on stmt: n_det_binom_prod = $422binary_subscr.21 * binom_prod.2
DEBUG 2022-02-14 16:38:06,156 on stmt: $434binary_modulo.26 = $N_det.252 % $const432.25
DEBUG 2022-02-14 16:38:06,156 on stmt: $438compare_op.28 = $434binary_modulo.26 == $const436.27
DEBUG 2022-02-14 16:38:06,156 on stmt: $440pred = call bool440($438compare_op.28, func=bool440, args=(Var($438compare_op.28, loop_hafnian_batch.py:64),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:06,156 on stmt: branch $440pred, 686, 725
DEBUG 2022-02-14 16:38:06,156 ==== SSA block rewrite pass on 631
DEBUG 2022-02-14 16:38:06,156 Running <numba.core.ssa._FreshVarHandler object at 0x7fa046df64f0>
DEBUG 2022-02-14 16:38:06,156 on stmt: $292call_function.6 = call $282load_global.1(delta.2, A, D, oddV, func=$282load_global.1, args=[Var(delta.2, loop_hafnian_batch.py:51), Var(A, loop_hafnian_batch.py:20), Var(D, loop_hafnian_batch.py:20), Var(oddV, loop_hafnian_batch.py:21)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:06,156 on stmt: $294unpack_sequence.11 = exhaust_iter(value=$292call_function.6, count=4)
DEBUG 2022-02-14 16:38:06,156 on stmt: $AX_S.250 = static_getitem(value=$294unpack_sequence.11, index=0, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:06,156 on stmt: $XD_S.246 = static_getitem(value=$294unpack_sequence.11, index=1, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:06,156 on stmt: $D_S.248 = static_getitem(value=$294unpack_sequence.11, index=2, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:06,156 on stmt: $oddVX_S.249 = static_getitem(value=$294unpack_sequence.11, index=3, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:06,156 on stmt: E = call $304load_global.12($AX_S.250, func=$304load_global.12, args=[Var($AX_S.250, loop_hafnian_batch.py:51)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:06,156 on stmt: f_even = call $312load_global.15(E, $AX_S.250, $XD_S.246, $D_S.248, N__max, func=$312load_global.15, args=[Var(E, loop_hafnian_batch.py:53), Var($AX_S.250, loop_hafnian_batch.py:51), Var($XD_S.246, loop_hafnian_batch.py:51), Var($D_S.248, loop_hafnian_batch.py:51), Var(N__max, loop_hafnian_batch.py:26)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:06,156 on stmt: f_odd = call $328load_global.22(E, $AX_S.250, $XD_S.246, $D_S.248, N__max, oddloop, $oddVX_S.249, func=$328load_global.22, args=[Var(E, loop_hafnian_batch.py:53), Var($AX_S.250, loop_hafnian_batch.py:51), Var($XD_S.246, loop_hafnian_batch.py:51), Var($D_S.248, loop_hafnian_batch.py:51), Var(N__max, loop_hafnian_batch.py:26), Var(oddloop, loop_hafnian_batch.py:20), Var($oddVX_S.249, loop_hafnian_batch.py:51)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:06,157 on stmt: $356binary_subscr.35 = static_getitem(value=kept_edges, index=0, index_var=$const354.34, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:06,157 on stmt: $358binary_multiply.36 = $const350.32 * $356binary_subscr.35
DEBUG 2022-02-14 16:38:06,157 on stmt: $374call_function.44 = call $348load_global.31($358binary_multiply.36, $372binary_add.43, func=$348load_global.31, args=[Var($358binary_multiply.36, loop_hafnian_batch.py:58), Var($372binary_add.43, loop_hafnian_batch.py:58)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:06,157 on stmt: $376get_iter.45 = getiter(value=$374call_function.44)
DEBUG 2022-02-14 16:38:06,157 on stmt: jump 668
DEBUG 2022-02-14 16:38:06,157 ==== SSA block rewrite pass on 495
DEBUG 2022-02-14 16:38:06,157 Running <numba.core.ssa._FreshVarHandler object at 0x7fa046df64f0>
DEBUG 2022-02-14 16:38:06,157 on stmt: $228for_iter.2 = iternext(value=$226get_iter.29)
DEBUG 2022-02-14 16:38:06,157 on stmt: $i.253 = pair_first(value=$228for_iter.2)
DEBUG 2022-02-14 16:38:06,157 on stmt: $228for_iter.4 = pair_second(value=$228for_iter.2)
DEBUG 2022-02-14 16:38:06,157 on stmt: branch $228for_iter.4, 571, 577
DEBUG 2022-02-14 16:38:06,157 ==== SSA block rewrite pass on 668
DEBUG 2022-02-14 16:38:06,158 Running <numba.core.ssa._FreshVarHandler object at 0x7fa046df64f0>
DEBUG 2022-02-14 16:38:06,158 on stmt: $378for_iter.2 = iternext(value=$376get_iter.45)
DEBUG 2022-02-14 16:38:06,158 on stmt: $N_det.252 = pair_first(value=$378for_iter.2)
DEBUG 2022-02-14 16:38:06,158 on stmt: $378for_iter.4 = pair_second(value=$378for_iter.2)
DEBUG 2022-02-14 16:38:06,158 on stmt: branch $378for_iter.4, 670, 743
DEBUG 2022-02-14 16:38:06,158 ==== SSA block rewrite pass on 571
DEBUG 2022-02-14 16:38:06,158 Running <numba.core.ssa._FreshVarHandler object at 0x7fa046df64f0>
DEBUG 2022-02-14 16:38:06,158 on stmt: $240binary_subscr.7 = getitem(value=edge__reps, index=$i.253, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:06,158 on stmt: $246binary_subscr.10 = getitem(value=kept_edges, index=$i.253, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:06,158 on stmt: $248build_tuple.11 = build_tuple(items=[Var($240binary_subscr.7, loop_hafnian_batch.py:44), Var($246binary_subscr.10, loop_hafnian_batch.py:44)])
DEBUG 2022-02-14 16:38:06,158 on stmt: $250binary_subscr.12 = getitem(value=binoms, index=$248build_tuple.11, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:06,158 on stmt: $binom_prod.2.600 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=binom_prod.2, rhs=$250binary_subscr.12, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:38:06,158 on stmt: binom_prod.2 = $binom_prod.2.600
DEBUG 2022-02-14 16:38:06,158 on stmt: jump 495
DEBUG 2022-02-14 16:38:06,158 ==== SSA block rewrite pass on 727
DEBUG 2022-02-14 16:38:06,158 Running <numba.core.ssa._FreshVarHandler object at 0x7fa046df64f0>
DEBUG 2022-02-14 16:38:06,158 on stmt: jump 668
DEBUG 2022-02-14 16:38:06,158 ==== SSA block rewrite pass on 50
DEBUG 2022-02-14 16:38:06,158 Running <numba.core.ssa._FreshVarHandler object at 0x7fa046df64f0>
DEBUG 2022-02-14 16:38:06,159 on stmt: j = parfor__index_230
DEBUG 2022-02-14 16:38:06,159 on stmt: id=2[LoopNest(index_variable = parfor_index.208, range = (0, $180binary_add.10, 1))]{887: <ir.Block at /home/adi/GBS/gbs/loop_hafnian_batch.py (37)>}Var(parfor_index.208, loop_hafnian_batch.py:37)
DEBUG 2022-02-14 16:38:06,159 on stmt: kept_edges = call $192load_global.15(j, edge__reps, func=$192load_global.15, args=[Var(j, loop_hafnian_batch.py:35), Var(edge__reps, loop_hafnian_batch.py:28)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:06,159 on stmt: kept_edges_shape.167 = getattr(value=kept_edges, attr=shape)
DEBUG 2022-02-14 16:38:06,159 on stmt: kept_edges_size0.168 = static_getitem(value=kept_edges_shape.167, index=0, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:06,159 on stmt: binom_prod.2 = binom_prod
DEBUG 2022-02-14 16:38:06,159 on stmt: id=6[LoopNest(index_variable = parfor_index.226, range = (0, kept_edges_size0.168, 1))]{557: <ir.Block at /home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numba/parfors/parfor.py (256)>}Var(parfor_index.226, parfor.py:256)
DEBUG 2022-02-14 16:38:06,159 on stmt: $224call_function.28 = call $214load_global.23($const216.24, $222binary_floor_divide.27, func=$214load_global.23, args=[Var($const216.24, loop_hafnian_batch.py:43), Var($222binary_floor_divide.27, loop_hafnian_batch.py:43)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:06,159 on stmt: $226get_iter.29 = getiter(value=$224call_function.28)
DEBUG 2022-02-14 16:38:06,159 on stmt: jump 495
DEBUG 2022-02-14 16:38:06,159 ==== SSA block rewrite pass on 743
DEBUG 2022-02-14 16:38:06,159 Running <numba.core.ssa._FreshVarHandler object at 0x7fa046df64f0>
DEBUG 2022-02-14 16:38:06,159 on stmt: ret.193 = call assert.192(msg.191, _136binary__add_59, $180binary_add.10, func=assert.192, args=[Var(msg.191, loop_hafnian_batch.py:69), Var(_136binary__add_59, loop_hafnian_batch.py:34), Var($180binary_add.10, loop_hafnian_batch.py:37)], kws={}, vararg=None, target=None)
DEBUG 2022-02-14 16:38:06,159 on stmt: $H_batch.2.602 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=H__batch_2.2, rhs=Hnew, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:38:06,159 on stmt: H__batch_2.1 = $H_batch.2.602
DEBUG 2022-02-14 16:38:06,159 on stmt: jump 782
DEBUG 2022-02-14 16:38:06,159 ==== SSA block rewrite pass on 577
DEBUG 2022-02-14 16:38:06,159 Running <numba.core.ssa._FreshVarHandler object at 0x7fa046df64f0>
DEBUG 2022-02-14 16:38:06,159 on stmt: $260pred = call bool260(glynn, func=bool260, args=(Var(glynn, loop_hafnian_batch.py:20),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:06,159 on stmt: branch $260pred, 591, 593
DEBUG 2022-02-14 16:38:06,160 ==== SSA block rewrite pass on 591
DEBUG 2022-02-14 16:38:06,160 Running <numba.core.ssa._FreshVarHandler object at 0x7fa046df64f0>
DEBUG 2022-02-14 16:38:06,160 on stmt: ret.172 = call assert.171(msg.170, kept_edges_size0.168, edge__reps__size0_160, func=assert.171, args=[Var(msg.170, loop_hafnian_batch.py:47), Var(kept_edges_size0.168, loop_hafnian_batch.py:39), Var(edge__reps__size0_160, loop_hafnian_batch.py:28)], kws={}, vararg=None, target=None)
DEBUG 2022-02-14 16:38:06,160 on stmt: id=3[LoopNest(index_variable = parfor_index.213, range = (0, edge__reps__size0_160, 1))]{888: <ir.Block at /home/adi/GBS/gbs/loop_hafnian_batch.py (47)>}Var(parfor_index.213, loop_hafnian_batch.py:47)
DEBUG 2022-02-14 16:38:06,160 on stmt: delta.2 = delta
DEBUG 2022-02-14 16:38:06,160 replaced with: delta.2.1 = delta
DEBUG 2022-02-14 16:38:06,160 on stmt: jump 631
DEBUG 2022-02-14 16:38:06,160 ==== SSA block rewrite pass on 782
DEBUG 2022-02-14 16:38:06,160 Running <numba.core.ssa._FreshVarHandler object at 0x7fa046df64f0>
DEBUG 2022-02-14 16:38:06,160 on stmt: jump 40
DEBUG 2022-02-14 16:38:06,160 Replaced assignments: defaultdict(<class 'list'>,
            {591: [<numba.core.ir.Assign object at 0x7fa046f64be0>],
             593: [<numba.core.ir.Assign object at 0x7fa046df67f0>]})
DEBUG 2022-02-14 16:38:06,160 ==== SSA block rewrite pass on 0
DEBUG 2022-02-14 16:38:06,160 Running <numba.core.ssa._FixSSAVars object at 0x7fa046df6fa0>
DEBUG 2022-02-14 16:38:06,160 on stmt: sched.834 = arg(0, name=sched)
DEBUG 2022-02-14 16:38:06,160 on stmt: _136binary__add_59 = arg(1, name=_136binary__add_59)
DEBUG 2022-02-14 16:38:06,160 on stmt: A = arg(2, name=A)
DEBUG 2022-02-14 16:38:06,160 on stmt: D = arg(3, name=D)
DEBUG 2022-02-14 16:38:06,160 on stmt: N__fixed = arg(4, name=N__fixed)
DEBUG 2022-02-14 16:38:06,160 on stmt: N__max = arg(5, name=N__max)
DEBUG 2022-02-14 16:38:06,160 on stmt: batch__max = arg(6, name=batch__max)
DEBUG 2022-02-14 16:38:06,160 on stmt: binoms = arg(7, name=binoms)
DEBUG 2022-02-14 16:38:06,160 on stmt: edge__reps = arg(8, name=edge__reps)
DEBUG 2022-02-14 16:38:06,160 on stmt: edge__reps__size0_160 = arg(9, name=edge__reps__size0_160)
DEBUG 2022-02-14 16:38:06,161 on stmt: glynn = arg(10, name=glynn)
DEBUG 2022-02-14 16:38:06,161 on stmt: n = arg(11, name=n)
DEBUG 2022-02-14 16:38:06,161 on stmt: oddV = arg(12, name=oddV)
DEBUG 2022-02-14 16:38:06,161 on stmt: odd__cutoff = arg(13, name=odd__cutoff)
DEBUG 2022-02-14 16:38:06,161 on stmt: oddloop = arg(14, name=oddloop)
DEBUG 2022-02-14 16:38:06,161 on stmt: H__batch_2__arr = arg(15, name=H__batch_2__arr)
DEBUG 2022-02-14 16:38:06,161 on stmt: $2load_global.0.835 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:38:06,161 on stmt: $4load_method.1.836 = getattr(value=$2load_global.0.835, attr=copy)
DEBUG 2022-02-14 16:38:06,161 on stmt: H__batch_2 = call $4load_method.1.836(H__batch_2__arr, func=$4load_method.1.836, args=[Var(H__batch_2__arr, <string>:2)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:06,161 on stmt: $12load_global.4.837 = global(range: <class 'range'>)
DEBUG 2022-02-14 16:38:06,161 on stmt: $const16.6.838 = const(int, 0)
DEBUG 2022-02-14 16:38:06,161 on stmt: $18binary_subscr.7.839 = getitem(value=sched.834, index=$const16.6.838, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:06,161 on stmt: $const22.9.840 = const(int, 1)
DEBUG 2022-02-14 16:38:06,161 on stmt: $24binary_subscr.10.841 = getitem(value=sched.834, index=$const22.9.840, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:06,161 on stmt: $26load_global.11.842 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:38:06,161 on stmt: $28load_method.12.843 = getattr(value=$26load_global.11.842, attr=uint8)
DEBUG 2022-02-14 16:38:06,161 on stmt: $const30.13.844 = const(int, 1)
DEBUG 2022-02-14 16:38:06,161 on stmt: $32call_method.14.845 = call $28load_method.12.843($const30.13.844, func=$28load_method.12.843, args=[Var($const30.13.844, <string>:3)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:06,161 on stmt: $34binary_add.15.846 = $24binary_subscr.10.841 + $32call_method.14.845
DEBUG 2022-02-14 16:38:06,161 on stmt: $36call_function.16.847 = call $12load_global.4.837($18binary_subscr.7.839, $34binary_add.15.846, func=$12load_global.4.837, args=[Var($18binary_subscr.7.839, <string>:3), Var($34binary_add.15.846, <string>:3)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:06,161 on stmt: $38get_iter.17.848 = getiter(value=$36call_function.16.847)
DEBUG 2022-02-14 16:38:06,161 on stmt: $phi40.0.849 = $38get_iter.17.848
DEBUG 2022-02-14 16:38:06,161 on stmt: $const462.12 = const(int, 2)
DEBUG 2022-02-14 16:38:06,162 on stmt: $const390.6 = const(float, -1.0)
DEBUG 2022-02-14 16:38:06,162 on stmt: $const394.8 = const(int, 2)
DEBUG 2022-02-14 16:38:06,162 on stmt: $const410.15 = const(int, 2)
DEBUG 2022-02-14 16:38:06,162 on stmt: $const416.18 = const(int, 0)
DEBUG 2022-02-14 16:38:06,162 on stmt: $const432.25 = const(int, 2)
DEBUG 2022-02-14 16:38:06,162 on stmt: $const436.27 = const(int, 0)
DEBUG 2022-02-14 16:38:06,162 on stmt: bool440 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:38:06,162 on stmt: $282load_global.1 = global(get_submatrices: CPUDispatcher(<function get_submatrices at 0x7fa047ebed30>))
DEBUG 2022-02-14 16:38:06,162 on stmt: $304load_global.12 = global(eigvals: CPUDispatcher(<function eigvals at 0x7fa047e5d430>))
DEBUG 2022-02-14 16:38:06,162 on stmt: $312load_global.15 = global(f_loop: CPUDispatcher(<function f_loop at 0x7fa047ebe9d0>))
DEBUG 2022-02-14 16:38:06,162 on stmt: $328load_global.22 = global(f_loop_odd: CPUDispatcher(<function f_loop_odd at 0x7fa047ebeb80>))
DEBUG 2022-02-14 16:38:06,162 on stmt: $348load_global.31 = global(range: <class 'range'>)
DEBUG 2022-02-14 16:38:06,162 on stmt: $const350.32 = const(int, 2)
DEBUG 2022-02-14 16:38:06,162 on stmt: $const354.34 = const(int, 0)
DEBUG 2022-02-14 16:38:06,162 on stmt: $const360.37 = const(int, 2)
DEBUG 2022-02-14 16:38:06,162 on stmt: $364binary_multiply.39 = $const360.37 * batch__max
DEBUG 2022-02-14 16:38:06,162 on stmt: $368binary_add.41 = $364binary_multiply.39 + odd__cutoff
DEBUG 2022-02-14 16:38:06,162 on stmt: $const370.42 = const(int, 1)
DEBUG 2022-02-14 16:38:06,162 on stmt: $372binary_add.43 = $368binary_add.41 + $const370.42
DEBUG 2022-02-14 16:38:06,162 on stmt: $const168.4 = const(int, 2)
DEBUG 2022-02-14 16:38:06,162 on stmt: $172binary_multiply.6 = $const168.4 * batch__max
DEBUG 2022-02-14 16:38:06,163 on stmt: $176binary_add.8 = $172binary_multiply.6 + odd__cutoff
DEBUG 2022-02-14 16:38:06,163 on stmt: $const178.9 = const(int, 1)
DEBUG 2022-02-14 16:38:06,163 on stmt: $180binary_add.10 = $176binary_add.8 + $const178.9
DEBUG 2022-02-14 16:38:06,163 on stmt: $192load_global.15 = global(find_kept_edges: CPUDispatcher(<function find_kept_edges at 0x7fa047ebe790>))
DEBUG 2022-02-14 16:38:06,163 on stmt: $np_g_var.209 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:38:06,163 on stmt: $empty_attr_attr.210 = getattr(value=$np_g_var.209, attr=empty)
DEBUG 2022-02-14 16:38:06,163 on stmt: $np_typ_var.211 = getattr(value=$np_g_var.209, attr=complex128)
DEBUG 2022-02-14 16:38:06,163 on stmt: Hnew = call $empty_attr_attr.210($180binary_add.10, $np_typ_var.211, func=$empty_attr_attr.210, args=[Var($180binary_add.10, loop_hafnian_batch.py:37), Var($np_typ_var.211, loop_hafnian_batch.py:37)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:06,163 on stmt: binom_prod = const(float, 1.0)
DEBUG 2022-02-14 16:38:06,163 on stmt: $214load_global.23 = global(range: <class 'range'>)
DEBUG 2022-02-14 16:38:06,163 on stmt: $const216.24 = const(int, 1)
DEBUG 2022-02-14 16:38:06,163 on stmt: $const220.26 = const(int, 2)
DEBUG 2022-02-14 16:38:06,163 on stmt: $222binary_floor_divide.27 = n // $const220.26
DEBUG 2022-02-14 16:38:06,163 on stmt: msg.191 = const(str, Sizes of H_batch.2, Hnew do not match on /home/adi/GBS/gbs/loop_hafnian_batch.py (69))
DEBUG 2022-02-14 16:38:06,163 on stmt: assert.192 = global(assert_equiv: <intrinsic assert_equiv>)
DEBUG 2022-02-14 16:38:06,163 on stmt: bool260 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:38:06,163 on stmt: msg.170 = const(str, Sizes of kept_edges, edge_reps do not match on /home/adi/GBS/gbs/loop_hafnian_batch.py (47))
DEBUG 2022-02-14 16:38:06,164 on stmt: assert.171 = global(assert_equiv: <intrinsic assert_equiv>)
DEBUG 2022-02-14 16:38:06,164 on stmt: $np_g_var.214 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:38:06,164 on stmt: $empty_attr_attr.215 = getattr(value=$np_g_var.214, attr=empty)
DEBUG 2022-02-14 16:38:06,164 on stmt: $np_typ_var.216 = getattr(value=$np_g_var.214, attr=int64)
DEBUG 2022-02-14 16:38:06,164 on stmt: delta = call $empty_attr_attr.215(edge__reps__size0_160, $np_typ_var.216, func=$empty_attr_attr.215, args=[Var(edge__reps__size0_160, loop_hafnian_batch.py:28), Var($np_typ_var.216, loop_hafnian_batch.py:47)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:06,164 on stmt: jump 40
DEBUG 2022-02-14 16:38:06,164 ==== SSA block rewrite pass on 40
DEBUG 2022-02-14 16:38:06,164 Running <numba.core.ssa._FixSSAVars object at 0x7fa046df6fa0>
DEBUG 2022-02-14 16:38:06,164 on stmt: H__batch_2.2 = phi(incoming_values=[Var(H__batch_2, <string>:2), Var(H__batch_2.1, loop_hafnian_batch.py:69)], incoming_blocks=[0, 782])
DEBUG 2022-02-14 16:38:06,164 on stmt: $40for_iter.1.850 = iternext(value=$phi40.0.849)
DEBUG 2022-02-14 16:38:06,164 on stmt: $40for_iter.2.851 = pair_first(value=$40for_iter.1.850)
DEBUG 2022-02-14 16:38:06,164 on stmt: $40for_iter.3.852 = pair_second(value=$40for_iter.1.850)
DEBUG 2022-02-14 16:38:06,164 on stmt: $phi42.1.853 = $40for_iter.2.851
DEBUG 2022-02-14 16:38:06,164 on stmt: branch $40for_iter.3.852, 42, 889
DEBUG 2022-02-14 16:38:06,164 ==== SSA block rewrite pass on 42
DEBUG 2022-02-14 16:38:06,164 Running <numba.core.ssa._FixSSAVars object at 0x7fa046df6fa0>
DEBUG 2022-02-14 16:38:06,164 on stmt: parfor__index_230 = $phi42.1.853
DEBUG 2022-02-14 16:38:06,164 on stmt: jump 50
DEBUG 2022-02-14 16:38:06,164 ==== SSA block rewrite pass on 889
DEBUG 2022-02-14 16:38:06,164 Running <numba.core.ssa._FixSSAVars object at 0x7fa046df6fa0>
DEBUG 2022-02-14 16:38:06,164 on stmt: $const52.1.854 = const(NoneType, None)
DEBUG 2022-02-14 16:38:06,164 on stmt: $const54.2.855 = const(NoneType, None)
DEBUG 2022-02-14 16:38:06,164 on stmt: $56build_slice.3.856 = global(slice: <class 'slice'>)
DEBUG 2022-02-14 16:38:06,164 on stmt: $56build_slice.4.857 = call $56build_slice.3.856($const52.1.854, $const54.2.855, func=$56build_slice.3.856, args=(Var($const52.1.854, <string>:5), Var($const54.2.855, <string>:5)), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:06,165 on stmt: $58binary_subscr.5.858 = getitem(value=H__batch_2.2, index=$56build_slice.4.857, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:06,165 on stmt: $const62.7.859 = const(NoneType, None)
DEBUG 2022-02-14 16:38:06,165 on stmt: $const64.8.860 = const(NoneType, None)
DEBUG 2022-02-14 16:38:06,165 on stmt: $66build_slice.9.861 = global(slice: <class 'slice'>)
DEBUG 2022-02-14 16:38:06,165 on stmt: $66build_slice.10.862 = call $66build_slice.9.861($const62.7.859, $const64.8.860, func=$66build_slice.9.861, args=(Var($const62.7.859, <string>:5), Var($const64.8.860, <string>:5)), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:06,165 on stmt: H__batch_2__arr[$66build_slice.10.862] = $58binary_subscr.5.858
DEBUG 2022-02-14 16:38:06,165 on stmt: $const70.11.863 = const(NoneType, None)
DEBUG 2022-02-14 16:38:06,165 on stmt: $72return_value.12.864 = cast(value=$const70.11.863)
DEBUG 2022-02-14 16:38:06,165 on stmt: return $72return_value.12.864
DEBUG 2022-02-14 16:38:06,165 ==== SSA block rewrite pass on 686
DEBUG 2022-02-14 16:38:06,165 Running <numba.core.ssa._FixSSAVars object at 0x7fa046df6fa0>
DEBUG 2022-02-14 16:38:06,165 on stmt: $450binary_subscr.6 = getitem(value=Hnew, index=$N_det.252, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:06,165 on stmt: $456binary_multiply.9 = n_det_binom_prod * plus_minus
DEBUG 2022-02-14 16:38:06,165 on stmt: $464binary_floor_divide.13 = N // $const462.12
DEBUG 2022-02-14 16:38:06,165 on stmt: $466binary_subscr.14 = getitem(value=f_even, index=$464binary_floor_divide.13, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:06,165 on stmt: $468binary_multiply.15 = $456binary_multiply.9 * $466binary_subscr.14
DEBUG 2022-02-14 16:38:06,165 on stmt: $470inplace_add.16 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$450binary_subscr.6, rhs=$468binary_multiply.15, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:38:06,165 on stmt: Hnew[$N_det.252] = $470inplace_add.16
DEBUG 2022-02-14 16:38:06,165 on stmt: jump 727
DEBUG 2022-02-14 16:38:06,165 ==== SSA block rewrite pass on 725
DEBUG 2022-02-14 16:38:06,165 Running <numba.core.ssa._FixSSAVars object at 0x7fa046df6fa0>
DEBUG 2022-02-14 16:38:06,165 on stmt: $484binary_subscr.6 = getitem(value=Hnew, index=$N_det.252, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:06,165 on stmt: $490binary_multiply.9 = n_det_binom_prod * plus_minus
DEBUG 2022-02-14 16:38:06,165 on stmt: $496binary_subscr.12 = getitem(value=f_odd, index=N, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:06,166 on stmt: $498binary_multiply.13 = $490binary_multiply.9 * $496binary_subscr.12
DEBUG 2022-02-14 16:38:06,166 on stmt: $500inplace_add.14 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$484binary_subscr.6, rhs=$498binary_multiply.13, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:38:06,166 on stmt: Hnew[$N_det.252] = $500inplace_add.14
DEBUG 2022-02-14 16:38:06,166 on stmt: jump 727
DEBUG 2022-02-14 16:38:06,166 ==== SSA block rewrite pass on 593
DEBUG 2022-02-14 16:38:06,166 Running <numba.core.ssa._FixSSAVars object at 0x7fa046df6fa0>
DEBUG 2022-02-14 16:38:06,166 on stmt: delta.2 = kept_edges
DEBUG 2022-02-14 16:38:06,166 on stmt: jump 631
DEBUG 2022-02-14 16:38:06,166 ==== SSA block rewrite pass on 670
DEBUG 2022-02-14 16:38:06,166 Running <numba.core.ssa._FixSSAVars object at 0x7fa046df6fa0>
DEBUG 2022-02-14 16:38:06,166 on stmt: N = N__fixed + $N_det.252
DEBUG 2022-02-14 16:38:06,166 on stmt: $396binary_floor_divide.9 = N // $const394.8
DEBUG 2022-02-14 16:38:06,166 on stmt: $400binary_subtract.11 = $396binary_floor_divide.9 - val.10
DEBUG 2022-02-14 16:38:06,166 on stmt: plus_minus = $const390.6 ** $400binary_subtract.11
DEBUG 2022-02-14 16:38:06,166 on stmt: $412binary_floor_divide.16 = $N_det.252 // $const410.15
DEBUG 2022-02-14 16:38:06,166 on stmt: $418binary_subscr.19 = static_getitem(value=kept_edges, index=0, index_var=$const416.18, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:06,166 on stmt: $420build_tuple.20 = build_tuple(items=[Var($412binary_floor_divide.16, loop_hafnian_batch.py:62), Var($418binary_subscr.19, loop_hafnian_batch.py:62)])
DEBUG 2022-02-14 16:38:06,166 on stmt: $422binary_subscr.21 = getitem(value=binoms, index=$420build_tuple.20, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:06,166 on stmt: n_det_binom_prod = $422binary_subscr.21 * binom_prod.2
DEBUG 2022-02-14 16:38:06,166 on stmt: $434binary_modulo.26 = $N_det.252 % $const432.25
DEBUG 2022-02-14 16:38:06,166 on stmt: $438compare_op.28 = $434binary_modulo.26 == $const436.27
DEBUG 2022-02-14 16:38:06,166 on stmt: $440pred = call bool440($438compare_op.28, func=bool440, args=(Var($438compare_op.28, loop_hafnian_batch.py:64),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:06,166 on stmt: branch $440pred, 686, 725
DEBUG 2022-02-14 16:38:06,167 ==== SSA block rewrite pass on 631
DEBUG 2022-02-14 16:38:06,167 Running <numba.core.ssa._FixSSAVars object at 0x7fa046df6fa0>
DEBUG 2022-02-14 16:38:06,167 on stmt: $292call_function.6 = call $282load_global.1(delta.2, A, D, oddV, func=$282load_global.1, args=[Var(delta.2, loop_hafnian_batch.py:51), Var(A, loop_hafnian_batch.py:20), Var(D, loop_hafnian_batch.py:20), Var(oddV, loop_hafnian_batch.py:21)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:06,167 find_def var='delta.2' stmt=$292call_function.6 = call $282load_global.1(delta.2, A, D, oddV, func=$282load_global.1, args=[Var(delta.2, loop_hafnian_batch.py:51), Var(A, loop_hafnian_batch.py:20), Var(D, loop_hafnian_batch.py:20), Var(oddV, loop_hafnian_batch.py:21)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:06,167 find_def_from_top label 631
DEBUG 2022-02-14 16:38:06,167 insert phi node delta.2.2 = phi(incoming_values=[], incoming_blocks=[]) at 631
DEBUG 2022-02-14 16:38:06,167 find_def_from_bottom label 593
DEBUG 2022-02-14 16:38:06,167 incoming_def delta.2 = kept_edges
DEBUG 2022-02-14 16:38:06,167 find_def_from_bottom label 591
DEBUG 2022-02-14 16:38:06,167 incoming_def delta.2.1 = delta
DEBUG 2022-02-14 16:38:06,167 replaced with: $292call_function.6 = call $282load_global.1(delta.2.2, A, D, oddV, func=$282load_global.1, args=[Var(delta.2.2, loop_hafnian_batch.py:51), Var(A, loop_hafnian_batch.py:20), Var(D, loop_hafnian_batch.py:20), Var(oddV, loop_hafnian_batch.py:21)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:06,167 on stmt: $294unpack_sequence.11 = exhaust_iter(value=$292call_function.6, count=4)
DEBUG 2022-02-14 16:38:06,167 on stmt: $AX_S.250 = static_getitem(value=$294unpack_sequence.11, index=0, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:06,167 on stmt: $XD_S.246 = static_getitem(value=$294unpack_sequence.11, index=1, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:06,167 on stmt: $D_S.248 = static_getitem(value=$294unpack_sequence.11, index=2, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:06,167 on stmt: $oddVX_S.249 = static_getitem(value=$294unpack_sequence.11, index=3, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:06,167 on stmt: E = call $304load_global.12($AX_S.250, func=$304load_global.12, args=[Var($AX_S.250, loop_hafnian_batch.py:51)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:06,167 on stmt: f_even = call $312load_global.15(E, $AX_S.250, $XD_S.246, $D_S.248, N__max, func=$312load_global.15, args=[Var(E, loop_hafnian_batch.py:53), Var($AX_S.250, loop_hafnian_batch.py:51), Var($XD_S.246, loop_hafnian_batch.py:51), Var($D_S.248, loop_hafnian_batch.py:51), Var(N__max, loop_hafnian_batch.py:26)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:06,167 on stmt: f_odd = call $328load_global.22(E, $AX_S.250, $XD_S.246, $D_S.248, N__max, oddloop, $oddVX_S.249, func=$328load_global.22, args=[Var(E, loop_hafnian_batch.py:53), Var($AX_S.250, loop_hafnian_batch.py:51), Var($XD_S.246, loop_hafnian_batch.py:51), Var($D_S.248, loop_hafnian_batch.py:51), Var(N__max, loop_hafnian_batch.py:26), Var(oddloop, loop_hafnian_batch.py:20), Var($oddVX_S.249, loop_hafnian_batch.py:51)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:06,167 on stmt: $356binary_subscr.35 = static_getitem(value=kept_edges, index=0, index_var=$const354.34, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:06,168 on stmt: $358binary_multiply.36 = $const350.32 * $356binary_subscr.35
DEBUG 2022-02-14 16:38:06,168 on stmt: $374call_function.44 = call $348load_global.31($358binary_multiply.36, $372binary_add.43, func=$348load_global.31, args=[Var($358binary_multiply.36, loop_hafnian_batch.py:58), Var($372binary_add.43, loop_hafnian_batch.py:58)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:06,168 on stmt: $376get_iter.45 = getiter(value=$374call_function.44)
DEBUG 2022-02-14 16:38:06,168 on stmt: jump 668
DEBUG 2022-02-14 16:38:06,168 ==== SSA block rewrite pass on 495
DEBUG 2022-02-14 16:38:06,168 Running <numba.core.ssa._FixSSAVars object at 0x7fa046df6fa0>
DEBUG 2022-02-14 16:38:06,168 on stmt: $228for_iter.2 = iternext(value=$226get_iter.29)
DEBUG 2022-02-14 16:38:06,168 on stmt: $i.253 = pair_first(value=$228for_iter.2)
DEBUG 2022-02-14 16:38:06,168 on stmt: $228for_iter.4 = pair_second(value=$228for_iter.2)
DEBUG 2022-02-14 16:38:06,168 on stmt: branch $228for_iter.4, 571, 577
DEBUG 2022-02-14 16:38:06,168 ==== SSA block rewrite pass on 668
DEBUG 2022-02-14 16:38:06,168 Running <numba.core.ssa._FixSSAVars object at 0x7fa046df6fa0>
DEBUG 2022-02-14 16:38:06,168 on stmt: $378for_iter.2 = iternext(value=$376get_iter.45)
DEBUG 2022-02-14 16:38:06,168 on stmt: $N_det.252 = pair_first(value=$378for_iter.2)
DEBUG 2022-02-14 16:38:06,168 on stmt: $378for_iter.4 = pair_second(value=$378for_iter.2)
DEBUG 2022-02-14 16:38:06,168 on stmt: branch $378for_iter.4, 670, 743
DEBUG 2022-02-14 16:38:06,168 ==== SSA block rewrite pass on 571
DEBUG 2022-02-14 16:38:06,168 Running <numba.core.ssa._FixSSAVars object at 0x7fa046df6fa0>
DEBUG 2022-02-14 16:38:06,168 on stmt: $240binary_subscr.7 = getitem(value=edge__reps, index=$i.253, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:06,168 on stmt: $246binary_subscr.10 = getitem(value=kept_edges, index=$i.253, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:06,168 on stmt: $248build_tuple.11 = build_tuple(items=[Var($240binary_subscr.7, loop_hafnian_batch.py:44), Var($246binary_subscr.10, loop_hafnian_batch.py:44)])
DEBUG 2022-02-14 16:38:06,168 on stmt: $250binary_subscr.12 = getitem(value=binoms, index=$248build_tuple.11, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:06,168 on stmt: $binom_prod.2.600 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=binom_prod.2, rhs=$250binary_subscr.12, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:38:06,168 on stmt: binom_prod.2 = $binom_prod.2.600
DEBUG 2022-02-14 16:38:06,168 on stmt: jump 495
DEBUG 2022-02-14 16:38:06,169 ==== SSA block rewrite pass on 727
DEBUG 2022-02-14 16:38:06,169 Running <numba.core.ssa._FixSSAVars object at 0x7fa046df6fa0>
DEBUG 2022-02-14 16:38:06,169 on stmt: jump 668
DEBUG 2022-02-14 16:38:06,169 ==== SSA block rewrite pass on 50
DEBUG 2022-02-14 16:38:06,169 Running <numba.core.ssa._FixSSAVars object at 0x7fa046df6fa0>
DEBUG 2022-02-14 16:38:06,169 on stmt: j = parfor__index_230
DEBUG 2022-02-14 16:38:06,169 on stmt: id=2[LoopNest(index_variable = parfor_index.208, range = (0, $180binary_add.10, 1))]{887: <ir.Block at /home/adi/GBS/gbs/loop_hafnian_batch.py (37)>}Var(parfor_index.208, loop_hafnian_batch.py:37)
DEBUG 2022-02-14 16:38:06,169 on stmt: kept_edges = call $192load_global.15(j, edge__reps, func=$192load_global.15, args=[Var(j, loop_hafnian_batch.py:35), Var(edge__reps, loop_hafnian_batch.py:28)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:06,169 on stmt: kept_edges_shape.167 = getattr(value=kept_edges, attr=shape)
DEBUG 2022-02-14 16:38:06,169 on stmt: kept_edges_size0.168 = static_getitem(value=kept_edges_shape.167, index=0, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:06,169 on stmt: binom_prod.2 = binom_prod
DEBUG 2022-02-14 16:38:06,169 on stmt: id=6[LoopNest(index_variable = parfor_index.226, range = (0, kept_edges_size0.168, 1))]{557: <ir.Block at /home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numba/parfors/parfor.py (256)>}Var(parfor_index.226, parfor.py:256)
DEBUG 2022-02-14 16:38:06,169 on stmt: $224call_function.28 = call $214load_global.23($const216.24, $222binary_floor_divide.27, func=$214load_global.23, args=[Var($const216.24, loop_hafnian_batch.py:43), Var($222binary_floor_divide.27, loop_hafnian_batch.py:43)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:06,169 on stmt: $226get_iter.29 = getiter(value=$224call_function.28)
DEBUG 2022-02-14 16:38:06,169 on stmt: jump 495
DEBUG 2022-02-14 16:38:06,169 ==== SSA block rewrite pass on 743
DEBUG 2022-02-14 16:38:06,169 Running <numba.core.ssa._FixSSAVars object at 0x7fa046df6fa0>
DEBUG 2022-02-14 16:38:06,169 on stmt: ret.193 = call assert.192(msg.191, _136binary__add_59, $180binary_add.10, func=assert.192, args=[Var(msg.191, loop_hafnian_batch.py:69), Var(_136binary__add_59, loop_hafnian_batch.py:34), Var($180binary_add.10, loop_hafnian_batch.py:37)], kws={}, vararg=None, target=None)
DEBUG 2022-02-14 16:38:06,169 on stmt: $H_batch.2.602 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=H__batch_2.2, rhs=Hnew, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:38:06,169 on stmt: H__batch_2.1 = $H_batch.2.602
DEBUG 2022-02-14 16:38:06,169 on stmt: jump 782
DEBUG 2022-02-14 16:38:06,169 ==== SSA block rewrite pass on 577
DEBUG 2022-02-14 16:38:06,169 Running <numba.core.ssa._FixSSAVars object at 0x7fa046df6fa0>
DEBUG 2022-02-14 16:38:06,170 on stmt: $260pred = call bool260(glynn, func=bool260, args=(Var(glynn, loop_hafnian_batch.py:20),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:06,170 on stmt: branch $260pred, 591, 593
DEBUG 2022-02-14 16:38:06,170 ==== SSA block rewrite pass on 591
DEBUG 2022-02-14 16:38:06,170 Running <numba.core.ssa._FixSSAVars object at 0x7fa046df6fa0>
DEBUG 2022-02-14 16:38:06,170 on stmt: ret.172 = call assert.171(msg.170, kept_edges_size0.168, edge__reps__size0_160, func=assert.171, args=[Var(msg.170, loop_hafnian_batch.py:47), Var(kept_edges_size0.168, loop_hafnian_batch.py:39), Var(edge__reps__size0_160, loop_hafnian_batch.py:28)], kws={}, vararg=None, target=None)
DEBUG 2022-02-14 16:38:06,170 on stmt: id=3[LoopNest(index_variable = parfor_index.213, range = (0, edge__reps__size0_160, 1))]{888: <ir.Block at /home/adi/GBS/gbs/loop_hafnian_batch.py (47)>}Var(parfor_index.213, loop_hafnian_batch.py:47)
DEBUG 2022-02-14 16:38:06,170 on stmt: delta.2.1 = delta
DEBUG 2022-02-14 16:38:06,170 on stmt: jump 631
DEBUG 2022-02-14 16:38:06,170 ==== SSA block rewrite pass on 782
DEBUG 2022-02-14 16:38:06,170 Running <numba.core.ssa._FixSSAVars object at 0x7fa046df6fa0>
DEBUG 2022-02-14 16:38:06,170 on stmt: jump 40
DEBUG 2022-02-14 16:38:06,170 Fix SSA violator on var binom_prod.2
DEBUG 2022-02-14 16:38:06,170 ==== SSA block rewrite pass on 0
DEBUG 2022-02-14 16:38:06,170 Running <numba.core.ssa._FreshVarHandler object at 0x7fa046f64bb0>
DEBUG 2022-02-14 16:38:06,170 on stmt: sched.834 = arg(0, name=sched)
DEBUG 2022-02-14 16:38:06,170 on stmt: _136binary__add_59 = arg(1, name=_136binary__add_59)
DEBUG 2022-02-14 16:38:06,170 on stmt: A = arg(2, name=A)
DEBUG 2022-02-14 16:38:06,170 on stmt: D = arg(3, name=D)
DEBUG 2022-02-14 16:38:06,170 on stmt: N__fixed = arg(4, name=N__fixed)
DEBUG 2022-02-14 16:38:06,170 on stmt: N__max = arg(5, name=N__max)
DEBUG 2022-02-14 16:38:06,170 on stmt: batch__max = arg(6, name=batch__max)
DEBUG 2022-02-14 16:38:06,170 on stmt: binoms = arg(7, name=binoms)
DEBUG 2022-02-14 16:38:06,170 on stmt: edge__reps = arg(8, name=edge__reps)
DEBUG 2022-02-14 16:38:06,170 on stmt: edge__reps__size0_160 = arg(9, name=edge__reps__size0_160)
DEBUG 2022-02-14 16:38:06,170 on stmt: glynn = arg(10, name=glynn)
DEBUG 2022-02-14 16:38:06,171 on stmt: n = arg(11, name=n)
DEBUG 2022-02-14 16:38:06,171 on stmt: oddV = arg(12, name=oddV)
DEBUG 2022-02-14 16:38:06,171 on stmt: odd__cutoff = arg(13, name=odd__cutoff)
DEBUG 2022-02-14 16:38:06,171 on stmt: oddloop = arg(14, name=oddloop)
DEBUG 2022-02-14 16:38:06,171 on stmt: H__batch_2__arr = arg(15, name=H__batch_2__arr)
DEBUG 2022-02-14 16:38:06,171 on stmt: $2load_global.0.835 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:38:06,171 on stmt: $4load_method.1.836 = getattr(value=$2load_global.0.835, attr=copy)
DEBUG 2022-02-14 16:38:06,171 on stmt: H__batch_2 = call $4load_method.1.836(H__batch_2__arr, func=$4load_method.1.836, args=[Var(H__batch_2__arr, <string>:2)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:06,171 on stmt: $12load_global.4.837 = global(range: <class 'range'>)
DEBUG 2022-02-14 16:38:06,171 on stmt: $const16.6.838 = const(int, 0)
DEBUG 2022-02-14 16:38:06,171 on stmt: $18binary_subscr.7.839 = getitem(value=sched.834, index=$const16.6.838, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:06,171 on stmt: $const22.9.840 = const(int, 1)
DEBUG 2022-02-14 16:38:06,171 on stmt: $24binary_subscr.10.841 = getitem(value=sched.834, index=$const22.9.840, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:06,171 on stmt: $26load_global.11.842 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:38:06,171 on stmt: $28load_method.12.843 = getattr(value=$26load_global.11.842, attr=uint8)
DEBUG 2022-02-14 16:38:06,171 on stmt: $const30.13.844 = const(int, 1)
DEBUG 2022-02-14 16:38:06,171 on stmt: $32call_method.14.845 = call $28load_method.12.843($const30.13.844, func=$28load_method.12.843, args=[Var($const30.13.844, <string>:3)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:06,171 on stmt: $34binary_add.15.846 = $24binary_subscr.10.841 + $32call_method.14.845
DEBUG 2022-02-14 16:38:06,171 on stmt: $36call_function.16.847 = call $12load_global.4.837($18binary_subscr.7.839, $34binary_add.15.846, func=$12load_global.4.837, args=[Var($18binary_subscr.7.839, <string>:3), Var($34binary_add.15.846, <string>:3)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:06,171 on stmt: $38get_iter.17.848 = getiter(value=$36call_function.16.847)
DEBUG 2022-02-14 16:38:06,171 on stmt: $phi40.0.849 = $38get_iter.17.848
DEBUG 2022-02-14 16:38:06,171 on stmt: $const462.12 = const(int, 2)
DEBUG 2022-02-14 16:38:06,171 on stmt: $const390.6 = const(float, -1.0)
DEBUG 2022-02-14 16:38:06,172 on stmt: $const394.8 = const(int, 2)
DEBUG 2022-02-14 16:38:06,172 on stmt: $const410.15 = const(int, 2)
DEBUG 2022-02-14 16:38:06,172 on stmt: $const416.18 = const(int, 0)
DEBUG 2022-02-14 16:38:06,172 on stmt: $const432.25 = const(int, 2)
DEBUG 2022-02-14 16:38:06,172 on stmt: $const436.27 = const(int, 0)
DEBUG 2022-02-14 16:38:06,172 on stmt: bool440 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:38:06,172 on stmt: $282load_global.1 = global(get_submatrices: CPUDispatcher(<function get_submatrices at 0x7fa047ebed30>))
DEBUG 2022-02-14 16:38:06,172 on stmt: $304load_global.12 = global(eigvals: CPUDispatcher(<function eigvals at 0x7fa047e5d430>))
DEBUG 2022-02-14 16:38:06,172 on stmt: $312load_global.15 = global(f_loop: CPUDispatcher(<function f_loop at 0x7fa047ebe9d0>))
DEBUG 2022-02-14 16:38:06,172 on stmt: $328load_global.22 = global(f_loop_odd: CPUDispatcher(<function f_loop_odd at 0x7fa047ebeb80>))
DEBUG 2022-02-14 16:38:06,172 on stmt: $348load_global.31 = global(range: <class 'range'>)
DEBUG 2022-02-14 16:38:06,172 on stmt: $const350.32 = const(int, 2)
DEBUG 2022-02-14 16:38:06,172 on stmt: $const354.34 = const(int, 0)
DEBUG 2022-02-14 16:38:06,172 on stmt: $const360.37 = const(int, 2)
DEBUG 2022-02-14 16:38:06,172 on stmt: $364binary_multiply.39 = $const360.37 * batch__max
DEBUG 2022-02-14 16:38:06,172 on stmt: $368binary_add.41 = $364binary_multiply.39 + odd__cutoff
DEBUG 2022-02-14 16:38:06,172 on stmt: $const370.42 = const(int, 1)
DEBUG 2022-02-14 16:38:06,172 on stmt: $372binary_add.43 = $368binary_add.41 + $const370.42
DEBUG 2022-02-14 16:38:06,172 on stmt: $const168.4 = const(int, 2)
DEBUG 2022-02-14 16:38:06,172 on stmt: $172binary_multiply.6 = $const168.4 * batch__max
DEBUG 2022-02-14 16:38:06,172 on stmt: $176binary_add.8 = $172binary_multiply.6 + odd__cutoff
DEBUG 2022-02-14 16:38:06,172 on stmt: $const178.9 = const(int, 1)
DEBUG 2022-02-14 16:38:06,172 on stmt: $180binary_add.10 = $176binary_add.8 + $const178.9
DEBUG 2022-02-14 16:38:06,172 on stmt: $192load_global.15 = global(find_kept_edges: CPUDispatcher(<function find_kept_edges at 0x7fa047ebe790>))
DEBUG 2022-02-14 16:38:06,172 on stmt: $np_g_var.209 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:38:06,172 on stmt: $empty_attr_attr.210 = getattr(value=$np_g_var.209, attr=empty)
DEBUG 2022-02-14 16:38:06,173 on stmt: $np_typ_var.211 = getattr(value=$np_g_var.209, attr=complex128)
DEBUG 2022-02-14 16:38:06,173 on stmt: Hnew = call $empty_attr_attr.210($180binary_add.10, $np_typ_var.211, func=$empty_attr_attr.210, args=[Var($180binary_add.10, loop_hafnian_batch.py:37), Var($np_typ_var.211, loop_hafnian_batch.py:37)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:06,173 on stmt: binom_prod = const(float, 1.0)
DEBUG 2022-02-14 16:38:06,173 on stmt: $214load_global.23 = global(range: <class 'range'>)
DEBUG 2022-02-14 16:38:06,173 on stmt: $const216.24 = const(int, 1)
DEBUG 2022-02-14 16:38:06,173 on stmt: $const220.26 = const(int, 2)
DEBUG 2022-02-14 16:38:06,173 on stmt: $222binary_floor_divide.27 = n // $const220.26
DEBUG 2022-02-14 16:38:06,173 on stmt: msg.191 = const(str, Sizes of H_batch.2, Hnew do not match on /home/adi/GBS/gbs/loop_hafnian_batch.py (69))
DEBUG 2022-02-14 16:38:06,173 on stmt: assert.192 = global(assert_equiv: <intrinsic assert_equiv>)
DEBUG 2022-02-14 16:38:06,173 on stmt: bool260 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:38:06,173 on stmt: msg.170 = const(str, Sizes of kept_edges, edge_reps do not match on /home/adi/GBS/gbs/loop_hafnian_batch.py (47))
DEBUG 2022-02-14 16:38:06,173 on stmt: assert.171 = global(assert_equiv: <intrinsic assert_equiv>)
DEBUG 2022-02-14 16:38:06,173 on stmt: $np_g_var.214 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:38:06,173 on stmt: $empty_attr_attr.215 = getattr(value=$np_g_var.214, attr=empty)
DEBUG 2022-02-14 16:38:06,173 on stmt: $np_typ_var.216 = getattr(value=$np_g_var.214, attr=int64)
DEBUG 2022-02-14 16:38:06,173 on stmt: delta = call $empty_attr_attr.215(edge__reps__size0_160, $np_typ_var.216, func=$empty_attr_attr.215, args=[Var(edge__reps__size0_160, loop_hafnian_batch.py:28), Var($np_typ_var.216, loop_hafnian_batch.py:47)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:06,173 on stmt: jump 40
DEBUG 2022-02-14 16:38:06,173 ==== SSA block rewrite pass on 40
DEBUG 2022-02-14 16:38:06,173 Running <numba.core.ssa._FreshVarHandler object at 0x7fa046f64bb0>
DEBUG 2022-02-14 16:38:06,173 on stmt: H__batch_2.2 = phi(incoming_values=[Var(H__batch_2, <string>:2), Var(H__batch_2.1, loop_hafnian_batch.py:69)], incoming_blocks=[0, 782])
DEBUG 2022-02-14 16:38:06,173 on stmt: $40for_iter.1.850 = iternext(value=$phi40.0.849)
DEBUG 2022-02-14 16:38:06,174 on stmt: $40for_iter.2.851 = pair_first(value=$40for_iter.1.850)
DEBUG 2022-02-14 16:38:06,174 on stmt: $40for_iter.3.852 = pair_second(value=$40for_iter.1.850)
DEBUG 2022-02-14 16:38:06,174 on stmt: $phi42.1.853 = $40for_iter.2.851
DEBUG 2022-02-14 16:38:06,174 on stmt: branch $40for_iter.3.852, 42, 889
DEBUG 2022-02-14 16:38:06,174 ==== SSA block rewrite pass on 42
DEBUG 2022-02-14 16:38:06,174 Running <numba.core.ssa._FreshVarHandler object at 0x7fa046f64bb0>
DEBUG 2022-02-14 16:38:06,174 on stmt: parfor__index_230 = $phi42.1.853
DEBUG 2022-02-14 16:38:06,174 on stmt: jump 50
DEBUG 2022-02-14 16:38:06,174 ==== SSA block rewrite pass on 889
DEBUG 2022-02-14 16:38:06,174 Running <numba.core.ssa._FreshVarHandler object at 0x7fa046f64bb0>
DEBUG 2022-02-14 16:38:06,174 on stmt: $const52.1.854 = const(NoneType, None)
DEBUG 2022-02-14 16:38:06,174 on stmt: $const54.2.855 = const(NoneType, None)
DEBUG 2022-02-14 16:38:06,174 on stmt: $56build_slice.3.856 = global(slice: <class 'slice'>)
DEBUG 2022-02-14 16:38:06,174 on stmt: $56build_slice.4.857 = call $56build_slice.3.856($const52.1.854, $const54.2.855, func=$56build_slice.3.856, args=(Var($const52.1.854, <string>:5), Var($const54.2.855, <string>:5)), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:06,174 on stmt: $58binary_subscr.5.858 = getitem(value=H__batch_2.2, index=$56build_slice.4.857, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:06,174 on stmt: $const62.7.859 = const(NoneType, None)
DEBUG 2022-02-14 16:38:06,174 on stmt: $const64.8.860 = const(NoneType, None)
DEBUG 2022-02-14 16:38:06,174 on stmt: $66build_slice.9.861 = global(slice: <class 'slice'>)
DEBUG 2022-02-14 16:38:06,175 on stmt: $66build_slice.10.862 = call $66build_slice.9.861($const62.7.859, $const64.8.860, func=$66build_slice.9.861, args=(Var($const62.7.859, <string>:5), Var($const64.8.860, <string>:5)), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:06,175 on stmt: H__batch_2__arr[$66build_slice.10.862] = $58binary_subscr.5.858
DEBUG 2022-02-14 16:38:06,175 on stmt: $const70.11.863 = const(NoneType, None)
DEBUG 2022-02-14 16:38:06,175 on stmt: $72return_value.12.864 = cast(value=$const70.11.863)
DEBUG 2022-02-14 16:38:06,175 on stmt: return $72return_value.12.864
DEBUG 2022-02-14 16:38:06,175 ==== SSA block rewrite pass on 686
DEBUG 2022-02-14 16:38:06,175 Running <numba.core.ssa._FreshVarHandler object at 0x7fa046f64bb0>
DEBUG 2022-02-14 16:38:06,175 on stmt: $450binary_subscr.6 = getitem(value=Hnew, index=$N_det.252, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:06,175 on stmt: $456binary_multiply.9 = n_det_binom_prod * plus_minus
DEBUG 2022-02-14 16:38:06,175 on stmt: $464binary_floor_divide.13 = N // $const462.12
DEBUG 2022-02-14 16:38:06,175 on stmt: $466binary_subscr.14 = getitem(value=f_even, index=$464binary_floor_divide.13, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:06,175 on stmt: $468binary_multiply.15 = $456binary_multiply.9 * $466binary_subscr.14
DEBUG 2022-02-14 16:38:06,175 on stmt: $470inplace_add.16 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$450binary_subscr.6, rhs=$468binary_multiply.15, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:38:06,175 on stmt: Hnew[$N_det.252] = $470inplace_add.16
DEBUG 2022-02-14 16:38:06,175 on stmt: jump 727
DEBUG 2022-02-14 16:38:06,175 ==== SSA block rewrite pass on 725
DEBUG 2022-02-14 16:38:06,175 Running <numba.core.ssa._FreshVarHandler object at 0x7fa046f64bb0>
DEBUG 2022-02-14 16:38:06,175 on stmt: $484binary_subscr.6 = getitem(value=Hnew, index=$N_det.252, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:06,175 on stmt: $490binary_multiply.9 = n_det_binom_prod * plus_minus
DEBUG 2022-02-14 16:38:06,175 on stmt: $496binary_subscr.12 = getitem(value=f_odd, index=N, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:06,175 on stmt: $498binary_multiply.13 = $490binary_multiply.9 * $496binary_subscr.12
DEBUG 2022-02-14 16:38:06,175 on stmt: $500inplace_add.14 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$484binary_subscr.6, rhs=$498binary_multiply.13, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:38:06,175 on stmt: Hnew[$N_det.252] = $500inplace_add.14
DEBUG 2022-02-14 16:38:06,176 on stmt: jump 727
DEBUG 2022-02-14 16:38:06,176 ==== SSA block rewrite pass on 593
DEBUG 2022-02-14 16:38:06,176 Running <numba.core.ssa._FreshVarHandler object at 0x7fa046f64bb0>
DEBUG 2022-02-14 16:38:06,176 on stmt: delta.2 = kept_edges
DEBUG 2022-02-14 16:38:06,176 on stmt: jump 631
DEBUG 2022-02-14 16:38:06,176 ==== SSA block rewrite pass on 670
DEBUG 2022-02-14 16:38:06,176 Running <numba.core.ssa._FreshVarHandler object at 0x7fa046f64bb0>
DEBUG 2022-02-14 16:38:06,176 on stmt: N = N__fixed + $N_det.252
DEBUG 2022-02-14 16:38:06,176 on stmt: $396binary_floor_divide.9 = N // $const394.8
DEBUG 2022-02-14 16:38:06,176 on stmt: $400binary_subtract.11 = $396binary_floor_divide.9 - val.10
DEBUG 2022-02-14 16:38:06,176 on stmt: plus_minus = $const390.6 ** $400binary_subtract.11
DEBUG 2022-02-14 16:38:06,176 on stmt: $412binary_floor_divide.16 = $N_det.252 // $const410.15
DEBUG 2022-02-14 16:38:06,176 on stmt: $418binary_subscr.19 = static_getitem(value=kept_edges, index=0, index_var=$const416.18, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:06,176 on stmt: $420build_tuple.20 = build_tuple(items=[Var($412binary_floor_divide.16, loop_hafnian_batch.py:62), Var($418binary_subscr.19, loop_hafnian_batch.py:62)])
DEBUG 2022-02-14 16:38:06,176 on stmt: $422binary_subscr.21 = getitem(value=binoms, index=$420build_tuple.20, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:06,176 on stmt: n_det_binom_prod = $422binary_subscr.21 * binom_prod.2
DEBUG 2022-02-14 16:38:06,176 on stmt: $434binary_modulo.26 = $N_det.252 % $const432.25
DEBUG 2022-02-14 16:38:06,176 on stmt: $438compare_op.28 = $434binary_modulo.26 == $const436.27
DEBUG 2022-02-14 16:38:06,176 on stmt: $440pred = call bool440($438compare_op.28, func=bool440, args=(Var($438compare_op.28, loop_hafnian_batch.py:64),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:06,176 on stmt: branch $440pred, 686, 725
DEBUG 2022-02-14 16:38:06,176 ==== SSA block rewrite pass on 631
DEBUG 2022-02-14 16:38:06,176 Running <numba.core.ssa._FreshVarHandler object at 0x7fa046f64bb0>
DEBUG 2022-02-14 16:38:06,177 on stmt: delta.2.2 = phi(incoming_values=[Var(delta.2, loop_hafnian_batch.py:51), Var(delta.2.1, loop_hafnian_batch.py:47)], incoming_blocks=[593, 591])
DEBUG 2022-02-14 16:38:06,177 on stmt: $292call_function.6 = call $282load_global.1(delta.2.2, A, D, oddV, func=$282load_global.1, args=[Var(delta.2.2, loop_hafnian_batch.py:51), Var(A, loop_hafnian_batch.py:20), Var(D, loop_hafnian_batch.py:20), Var(oddV, loop_hafnian_batch.py:21)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:06,177 on stmt: $294unpack_sequence.11 = exhaust_iter(value=$292call_function.6, count=4)
DEBUG 2022-02-14 16:38:06,177 on stmt: $AX_S.250 = static_getitem(value=$294unpack_sequence.11, index=0, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:06,177 on stmt: $XD_S.246 = static_getitem(value=$294unpack_sequence.11, index=1, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:06,177 on stmt: $D_S.248 = static_getitem(value=$294unpack_sequence.11, index=2, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:06,177 on stmt: $oddVX_S.249 = static_getitem(value=$294unpack_sequence.11, index=3, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:06,177 on stmt: E = call $304load_global.12($AX_S.250, func=$304load_global.12, args=[Var($AX_S.250, loop_hafnian_batch.py:51)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:06,177 on stmt: f_even = call $312load_global.15(E, $AX_S.250, $XD_S.246, $D_S.248, N__max, func=$312load_global.15, args=[Var(E, loop_hafnian_batch.py:53), Var($AX_S.250, loop_hafnian_batch.py:51), Var($XD_S.246, loop_hafnian_batch.py:51), Var($D_S.248, loop_hafnian_batch.py:51), Var(N__max, loop_hafnian_batch.py:26)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:06,177 on stmt: f_odd = call $328load_global.22(E, $AX_S.250, $XD_S.246, $D_S.248, N__max, oddloop, $oddVX_S.249, func=$328load_global.22, args=[Var(E, loop_hafnian_batch.py:53), Var($AX_S.250, loop_hafnian_batch.py:51), Var($XD_S.246, loop_hafnian_batch.py:51), Var($D_S.248, loop_hafnian_batch.py:51), Var(N__max, loop_hafnian_batch.py:26), Var(oddloop, loop_hafnian_batch.py:20), Var($oddVX_S.249, loop_hafnian_batch.py:51)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:06,177 on stmt: $356binary_subscr.35 = static_getitem(value=kept_edges, index=0, index_var=$const354.34, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:06,177 on stmt: $358binary_multiply.36 = $const350.32 * $356binary_subscr.35
DEBUG 2022-02-14 16:38:06,177 on stmt: $374call_function.44 = call $348load_global.31($358binary_multiply.36, $372binary_add.43, func=$348load_global.31, args=[Var($358binary_multiply.36, loop_hafnian_batch.py:58), Var($372binary_add.43, loop_hafnian_batch.py:58)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:06,177 on stmt: $376get_iter.45 = getiter(value=$374call_function.44)
DEBUG 2022-02-14 16:38:06,177 on stmt: jump 668
DEBUG 2022-02-14 16:38:06,177 ==== SSA block rewrite pass on 495
DEBUG 2022-02-14 16:38:06,177 Running <numba.core.ssa._FreshVarHandler object at 0x7fa046f64bb0>
DEBUG 2022-02-14 16:38:06,177 on stmt: $228for_iter.2 = iternext(value=$226get_iter.29)
DEBUG 2022-02-14 16:38:06,177 on stmt: $i.253 = pair_first(value=$228for_iter.2)
DEBUG 2022-02-14 16:38:06,178 on stmt: $228for_iter.4 = pair_second(value=$228for_iter.2)
DEBUG 2022-02-14 16:38:06,178 on stmt: branch $228for_iter.4, 571, 577
DEBUG 2022-02-14 16:38:06,178 ==== SSA block rewrite pass on 668
DEBUG 2022-02-14 16:38:06,178 Running <numba.core.ssa._FreshVarHandler object at 0x7fa046f64bb0>
DEBUG 2022-02-14 16:38:06,178 on stmt: $378for_iter.2 = iternext(value=$376get_iter.45)
DEBUG 2022-02-14 16:38:06,178 on stmt: $N_det.252 = pair_first(value=$378for_iter.2)
DEBUG 2022-02-14 16:38:06,178 on stmt: $378for_iter.4 = pair_second(value=$378for_iter.2)
DEBUG 2022-02-14 16:38:06,178 on stmt: branch $378for_iter.4, 670, 743
DEBUG 2022-02-14 16:38:06,178 ==== SSA block rewrite pass on 571
DEBUG 2022-02-14 16:38:06,178 Running <numba.core.ssa._FreshVarHandler object at 0x7fa046f64bb0>
DEBUG 2022-02-14 16:38:06,178 on stmt: $240binary_subscr.7 = getitem(value=edge__reps, index=$i.253, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:06,178 on stmt: $246binary_subscr.10 = getitem(value=kept_edges, index=$i.253, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:06,178 on stmt: $248build_tuple.11 = build_tuple(items=[Var($240binary_subscr.7, loop_hafnian_batch.py:44), Var($246binary_subscr.10, loop_hafnian_batch.py:44)])
DEBUG 2022-02-14 16:38:06,178 on stmt: $250binary_subscr.12 = getitem(value=binoms, index=$248build_tuple.11, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:06,178 on stmt: $binom_prod.2.600 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=binom_prod.2, rhs=$250binary_subscr.12, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:38:06,178 on stmt: binom_prod.2 = $binom_prod.2.600
DEBUG 2022-02-14 16:38:06,178 first assign: binom_prod.2
DEBUG 2022-02-14 16:38:06,178 replaced with: binom_prod.2 = $binom_prod.2.600
DEBUG 2022-02-14 16:38:06,178 on stmt: jump 495
DEBUG 2022-02-14 16:38:06,178 ==== SSA block rewrite pass on 727
DEBUG 2022-02-14 16:38:06,178 Running <numba.core.ssa._FreshVarHandler object at 0x7fa046f64bb0>
DEBUG 2022-02-14 16:38:06,178 on stmt: jump 668
DEBUG 2022-02-14 16:38:06,178 ==== SSA block rewrite pass on 50
DEBUG 2022-02-14 16:38:06,178 Running <numba.core.ssa._FreshVarHandler object at 0x7fa046f64bb0>
DEBUG 2022-02-14 16:38:06,179 on stmt: j = parfor__index_230
DEBUG 2022-02-14 16:38:06,179 on stmt: id=2[LoopNest(index_variable = parfor_index.208, range = (0, $180binary_add.10, 1))]{887: <ir.Block at /home/adi/GBS/gbs/loop_hafnian_batch.py (37)>}Var(parfor_index.208, loop_hafnian_batch.py:37)
DEBUG 2022-02-14 16:38:06,179 on stmt: kept_edges = call $192load_global.15(j, edge__reps, func=$192load_global.15, args=[Var(j, loop_hafnian_batch.py:35), Var(edge__reps, loop_hafnian_batch.py:28)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:06,179 on stmt: kept_edges_shape.167 = getattr(value=kept_edges, attr=shape)
DEBUG 2022-02-14 16:38:06,179 on stmt: kept_edges_size0.168 = static_getitem(value=kept_edges_shape.167, index=0, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:06,179 on stmt: binom_prod.2 = binom_prod
DEBUG 2022-02-14 16:38:06,179 replaced with: binom_prod.2.1 = binom_prod
DEBUG 2022-02-14 16:38:06,179 on stmt: id=6[LoopNest(index_variable = parfor_index.226, range = (0, kept_edges_size0.168, 1))]{557: <ir.Block at /home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numba/parfors/parfor.py (256)>}Var(parfor_index.226, parfor.py:256)
DEBUG 2022-02-14 16:38:06,179 on stmt: $224call_function.28 = call $214load_global.23($const216.24, $222binary_floor_divide.27, func=$214load_global.23, args=[Var($const216.24, loop_hafnian_batch.py:43), Var($222binary_floor_divide.27, loop_hafnian_batch.py:43)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:06,179 on stmt: $226get_iter.29 = getiter(value=$224call_function.28)
DEBUG 2022-02-14 16:38:06,179 on stmt: jump 495
DEBUG 2022-02-14 16:38:06,179 ==== SSA block rewrite pass on 743
DEBUG 2022-02-14 16:38:06,180 Running <numba.core.ssa._FreshVarHandler object at 0x7fa046f64bb0>
DEBUG 2022-02-14 16:38:06,180 on stmt: ret.193 = call assert.192(msg.191, _136binary__add_59, $180binary_add.10, func=assert.192, args=[Var(msg.191, loop_hafnian_batch.py:69), Var(_136binary__add_59, loop_hafnian_batch.py:34), Var($180binary_add.10, loop_hafnian_batch.py:37)], kws={}, vararg=None, target=None)
DEBUG 2022-02-14 16:38:06,180 on stmt: $H_batch.2.602 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=H__batch_2.2, rhs=Hnew, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:38:06,180 on stmt: H__batch_2.1 = $H_batch.2.602
DEBUG 2022-02-14 16:38:06,180 on stmt: jump 782
DEBUG 2022-02-14 16:38:06,180 ==== SSA block rewrite pass on 577
DEBUG 2022-02-14 16:38:06,180 Running <numba.core.ssa._FreshVarHandler object at 0x7fa046f64bb0>
DEBUG 2022-02-14 16:38:06,180 on stmt: $260pred = call bool260(glynn, func=bool260, args=(Var(glynn, loop_hafnian_batch.py:20),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:06,180 on stmt: branch $260pred, 591, 593
DEBUG 2022-02-14 16:38:06,180 ==== SSA block rewrite pass on 591
DEBUG 2022-02-14 16:38:06,180 Running <numba.core.ssa._FreshVarHandler object at 0x7fa046f64bb0>
DEBUG 2022-02-14 16:38:06,180 on stmt: ret.172 = call assert.171(msg.170, kept_edges_size0.168, edge__reps__size0_160, func=assert.171, args=[Var(msg.170, loop_hafnian_batch.py:47), Var(kept_edges_size0.168, loop_hafnian_batch.py:39), Var(edge__reps__size0_160, loop_hafnian_batch.py:28)], kws={}, vararg=None, target=None)
DEBUG 2022-02-14 16:38:06,180 on stmt: id=3[LoopNest(index_variable = parfor_index.213, range = (0, edge__reps__size0_160, 1))]{888: <ir.Block at /home/adi/GBS/gbs/loop_hafnian_batch.py (47)>}Var(parfor_index.213, loop_hafnian_batch.py:47)
DEBUG 2022-02-14 16:38:06,180 on stmt: delta.2.1 = delta
DEBUG 2022-02-14 16:38:06,180 on stmt: jump 631
DEBUG 2022-02-14 16:38:06,180 ==== SSA block rewrite pass on 782
DEBUG 2022-02-14 16:38:06,180 Running <numba.core.ssa._FreshVarHandler object at 0x7fa046f64bb0>
DEBUG 2022-02-14 16:38:06,180 on stmt: jump 40
DEBUG 2022-02-14 16:38:06,180 Replaced assignments: defaultdict(<class 'list'>,
            {50: [<numba.core.ir.Assign object at 0x7fa046df6a00>],
             571: [<numba.core.ir.Assign object at 0x7fa046df6f10>]})
DEBUG 2022-02-14 16:38:06,180 ==== SSA block rewrite pass on 0
DEBUG 2022-02-14 16:38:06,180 Running <numba.core.ssa._FixSSAVars object at 0x7fa046f64d60>
DEBUG 2022-02-14 16:38:06,180 on stmt: sched.834 = arg(0, name=sched)
DEBUG 2022-02-14 16:38:06,181 on stmt: _136binary__add_59 = arg(1, name=_136binary__add_59)
DEBUG 2022-02-14 16:38:06,181 on stmt: A = arg(2, name=A)
DEBUG 2022-02-14 16:38:06,181 on stmt: D = arg(3, name=D)
DEBUG 2022-02-14 16:38:06,181 on stmt: N__fixed = arg(4, name=N__fixed)
DEBUG 2022-02-14 16:38:06,181 on stmt: N__max = arg(5, name=N__max)
DEBUG 2022-02-14 16:38:06,181 on stmt: batch__max = arg(6, name=batch__max)
DEBUG 2022-02-14 16:38:06,181 on stmt: binoms = arg(7, name=binoms)
DEBUG 2022-02-14 16:38:06,181 on stmt: edge__reps = arg(8, name=edge__reps)
DEBUG 2022-02-14 16:38:06,181 on stmt: edge__reps__size0_160 = arg(9, name=edge__reps__size0_160)
DEBUG 2022-02-14 16:38:06,181 on stmt: glynn = arg(10, name=glynn)
DEBUG 2022-02-14 16:38:06,181 on stmt: n = arg(11, name=n)
DEBUG 2022-02-14 16:38:06,181 on stmt: oddV = arg(12, name=oddV)
DEBUG 2022-02-14 16:38:06,181 on stmt: odd__cutoff = arg(13, name=odd__cutoff)
DEBUG 2022-02-14 16:38:06,181 on stmt: oddloop = arg(14, name=oddloop)
DEBUG 2022-02-14 16:38:06,181 on stmt: H__batch_2__arr = arg(15, name=H__batch_2__arr)
DEBUG 2022-02-14 16:38:06,181 on stmt: $2load_global.0.835 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:38:06,181 on stmt: $4load_method.1.836 = getattr(value=$2load_global.0.835, attr=copy)
DEBUG 2022-02-14 16:38:06,181 on stmt: H__batch_2 = call $4load_method.1.836(H__batch_2__arr, func=$4load_method.1.836, args=[Var(H__batch_2__arr, <string>:2)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:06,181 on stmt: $12load_global.4.837 = global(range: <class 'range'>)
DEBUG 2022-02-14 16:38:06,181 on stmt: $const16.6.838 = const(int, 0)
DEBUG 2022-02-14 16:38:06,181 on stmt: $18binary_subscr.7.839 = getitem(value=sched.834, index=$const16.6.838, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:06,181 on stmt: $const22.9.840 = const(int, 1)
DEBUG 2022-02-14 16:38:06,181 on stmt: $24binary_subscr.10.841 = getitem(value=sched.834, index=$const22.9.840, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:06,181 on stmt: $26load_global.11.842 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:38:06,181 on stmt: $28load_method.12.843 = getattr(value=$26load_global.11.842, attr=uint8)
DEBUG 2022-02-14 16:38:06,181 on stmt: $const30.13.844 = const(int, 1)
DEBUG 2022-02-14 16:38:06,182 on stmt: $32call_method.14.845 = call $28load_method.12.843($const30.13.844, func=$28load_method.12.843, args=[Var($const30.13.844, <string>:3)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:06,182 on stmt: $34binary_add.15.846 = $24binary_subscr.10.841 + $32call_method.14.845
DEBUG 2022-02-14 16:38:06,182 on stmt: $36call_function.16.847 = call $12load_global.4.837($18binary_subscr.7.839, $34binary_add.15.846, func=$12load_global.4.837, args=[Var($18binary_subscr.7.839, <string>:3), Var($34binary_add.15.846, <string>:3)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:06,182 on stmt: $38get_iter.17.848 = getiter(value=$36call_function.16.847)
DEBUG 2022-02-14 16:38:06,182 on stmt: $phi40.0.849 = $38get_iter.17.848
DEBUG 2022-02-14 16:38:06,182 on stmt: $const462.12 = const(int, 2)
DEBUG 2022-02-14 16:38:06,182 on stmt: $const390.6 = const(float, -1.0)
DEBUG 2022-02-14 16:38:06,182 on stmt: $const394.8 = const(int, 2)
DEBUG 2022-02-14 16:38:06,182 on stmt: $const410.15 = const(int, 2)
DEBUG 2022-02-14 16:38:06,182 on stmt: $const416.18 = const(int, 0)
DEBUG 2022-02-14 16:38:06,182 on stmt: $const432.25 = const(int, 2)
DEBUG 2022-02-14 16:38:06,182 on stmt: $const436.27 = const(int, 0)
DEBUG 2022-02-14 16:38:06,182 on stmt: bool440 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:38:06,182 on stmt: $282load_global.1 = global(get_submatrices: CPUDispatcher(<function get_submatrices at 0x7fa047ebed30>))
DEBUG 2022-02-14 16:38:06,182 on stmt: $304load_global.12 = global(eigvals: CPUDispatcher(<function eigvals at 0x7fa047e5d430>))
DEBUG 2022-02-14 16:38:06,182 on stmt: $312load_global.15 = global(f_loop: CPUDispatcher(<function f_loop at 0x7fa047ebe9d0>))
DEBUG 2022-02-14 16:38:06,182 on stmt: $328load_global.22 = global(f_loop_odd: CPUDispatcher(<function f_loop_odd at 0x7fa047ebeb80>))
DEBUG 2022-02-14 16:38:06,182 on stmt: $348load_global.31 = global(range: <class 'range'>)
DEBUG 2022-02-14 16:38:06,182 on stmt: $const350.32 = const(int, 2)
DEBUG 2022-02-14 16:38:06,182 on stmt: $const354.34 = const(int, 0)
DEBUG 2022-02-14 16:38:06,182 on stmt: $const360.37 = const(int, 2)
DEBUG 2022-02-14 16:38:06,182 on stmt: $364binary_multiply.39 = $const360.37 * batch__max
DEBUG 2022-02-14 16:38:06,182 on stmt: $368binary_add.41 = $364binary_multiply.39 + odd__cutoff
DEBUG 2022-02-14 16:38:06,182 on stmt: $const370.42 = const(int, 1)
DEBUG 2022-02-14 16:38:06,182 on stmt: $372binary_add.43 = $368binary_add.41 + $const370.42
DEBUG 2022-02-14 16:38:06,183 on stmt: $const168.4 = const(int, 2)
DEBUG 2022-02-14 16:38:06,183 on stmt: $172binary_multiply.6 = $const168.4 * batch__max
DEBUG 2022-02-14 16:38:06,183 on stmt: $176binary_add.8 = $172binary_multiply.6 + odd__cutoff
DEBUG 2022-02-14 16:38:06,183 on stmt: $const178.9 = const(int, 1)
DEBUG 2022-02-14 16:38:06,183 on stmt: $180binary_add.10 = $176binary_add.8 + $const178.9
DEBUG 2022-02-14 16:38:06,183 on stmt: $192load_global.15 = global(find_kept_edges: CPUDispatcher(<function find_kept_edges at 0x7fa047ebe790>))
DEBUG 2022-02-14 16:38:06,183 on stmt: $np_g_var.209 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:38:06,183 on stmt: $empty_attr_attr.210 = getattr(value=$np_g_var.209, attr=empty)
DEBUG 2022-02-14 16:38:06,183 on stmt: $np_typ_var.211 = getattr(value=$np_g_var.209, attr=complex128)
DEBUG 2022-02-14 16:38:06,183 on stmt: Hnew = call $empty_attr_attr.210($180binary_add.10, $np_typ_var.211, func=$empty_attr_attr.210, args=[Var($180binary_add.10, loop_hafnian_batch.py:37), Var($np_typ_var.211, loop_hafnian_batch.py:37)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:06,183 on stmt: binom_prod = const(float, 1.0)
DEBUG 2022-02-14 16:38:06,183 on stmt: $214load_global.23 = global(range: <class 'range'>)
DEBUG 2022-02-14 16:38:06,183 on stmt: $const216.24 = const(int, 1)
DEBUG 2022-02-14 16:38:06,183 on stmt: $const220.26 = const(int, 2)
DEBUG 2022-02-14 16:38:06,183 on stmt: $222binary_floor_divide.27 = n // $const220.26
DEBUG 2022-02-14 16:38:06,183 on stmt: msg.191 = const(str, Sizes of H_batch.2, Hnew do not match on /home/adi/GBS/gbs/loop_hafnian_batch.py (69))
DEBUG 2022-02-14 16:38:06,183 on stmt: assert.192 = global(assert_equiv: <intrinsic assert_equiv>)
DEBUG 2022-02-14 16:38:06,183 on stmt: bool260 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:38:06,183 on stmt: msg.170 = const(str, Sizes of kept_edges, edge_reps do not match on /home/adi/GBS/gbs/loop_hafnian_batch.py (47))
DEBUG 2022-02-14 16:38:06,183 on stmt: assert.171 = global(assert_equiv: <intrinsic assert_equiv>)
DEBUG 2022-02-14 16:38:06,183 on stmt: $np_g_var.214 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:38:06,183 on stmt: $empty_attr_attr.215 = getattr(value=$np_g_var.214, attr=empty)
DEBUG 2022-02-14 16:38:06,183 on stmt: $np_typ_var.216 = getattr(value=$np_g_var.214, attr=int64)
DEBUG 2022-02-14 16:38:06,183 on stmt: delta = call $empty_attr_attr.215(edge__reps__size0_160, $np_typ_var.216, func=$empty_attr_attr.215, args=[Var(edge__reps__size0_160, loop_hafnian_batch.py:28), Var($np_typ_var.216, loop_hafnian_batch.py:47)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:06,184 on stmt: jump 40
DEBUG 2022-02-14 16:38:06,184 ==== SSA block rewrite pass on 40
DEBUG 2022-02-14 16:38:06,184 Running <numba.core.ssa._FixSSAVars object at 0x7fa046f64d60>
DEBUG 2022-02-14 16:38:06,184 on stmt: H__batch_2.2 = phi(incoming_values=[Var(H__batch_2, <string>:2), Var(H__batch_2.1, loop_hafnian_batch.py:69)], incoming_blocks=[0, 782])
DEBUG 2022-02-14 16:38:06,184 on stmt: $40for_iter.1.850 = iternext(value=$phi40.0.849)
DEBUG 2022-02-14 16:38:06,184 on stmt: $40for_iter.2.851 = pair_first(value=$40for_iter.1.850)
DEBUG 2022-02-14 16:38:06,184 on stmt: $40for_iter.3.852 = pair_second(value=$40for_iter.1.850)
DEBUG 2022-02-14 16:38:06,184 on stmt: $phi42.1.853 = $40for_iter.2.851
DEBUG 2022-02-14 16:38:06,184 on stmt: branch $40for_iter.3.852, 42, 889
DEBUG 2022-02-14 16:38:06,184 ==== SSA block rewrite pass on 42
DEBUG 2022-02-14 16:38:06,184 Running <numba.core.ssa._FixSSAVars object at 0x7fa046f64d60>
DEBUG 2022-02-14 16:38:06,184 on stmt: parfor__index_230 = $phi42.1.853
DEBUG 2022-02-14 16:38:06,184 on stmt: jump 50
DEBUG 2022-02-14 16:38:06,184 ==== SSA block rewrite pass on 889
DEBUG 2022-02-14 16:38:06,184 Running <numba.core.ssa._FixSSAVars object at 0x7fa046f64d60>
DEBUG 2022-02-14 16:38:06,184 on stmt: $const52.1.854 = const(NoneType, None)
DEBUG 2022-02-14 16:38:06,184 on stmt: $const54.2.855 = const(NoneType, None)
DEBUG 2022-02-14 16:38:06,184 on stmt: $56build_slice.3.856 = global(slice: <class 'slice'>)
DEBUG 2022-02-14 16:38:06,184 on stmt: $56build_slice.4.857 = call $56build_slice.3.856($const52.1.854, $const54.2.855, func=$56build_slice.3.856, args=(Var($const52.1.854, <string>:5), Var($const54.2.855, <string>:5)), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:06,184 on stmt: $58binary_subscr.5.858 = getitem(value=H__batch_2.2, index=$56build_slice.4.857, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:06,184 on stmt: $const62.7.859 = const(NoneType, None)
DEBUG 2022-02-14 16:38:06,184 on stmt: $const64.8.860 = const(NoneType, None)
DEBUG 2022-02-14 16:38:06,184 on stmt: $66build_slice.9.861 = global(slice: <class 'slice'>)
DEBUG 2022-02-14 16:38:06,184 on stmt: $66build_slice.10.862 = call $66build_slice.9.861($const62.7.859, $const64.8.860, func=$66build_slice.9.861, args=(Var($const62.7.859, <string>:5), Var($const64.8.860, <string>:5)), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:06,185 on stmt: H__batch_2__arr[$66build_slice.10.862] = $58binary_subscr.5.858
DEBUG 2022-02-14 16:38:06,185 on stmt: $const70.11.863 = const(NoneType, None)
DEBUG 2022-02-14 16:38:06,185 on stmt: $72return_value.12.864 = cast(value=$const70.11.863)
DEBUG 2022-02-14 16:38:06,185 on stmt: return $72return_value.12.864
DEBUG 2022-02-14 16:38:06,185 ==== SSA block rewrite pass on 686
DEBUG 2022-02-14 16:38:06,185 Running <numba.core.ssa._FixSSAVars object at 0x7fa046f64d60>
DEBUG 2022-02-14 16:38:06,185 on stmt: $450binary_subscr.6 = getitem(value=Hnew, index=$N_det.252, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:06,185 on stmt: $456binary_multiply.9 = n_det_binom_prod * plus_minus
DEBUG 2022-02-14 16:38:06,185 on stmt: $464binary_floor_divide.13 = N // $const462.12
DEBUG 2022-02-14 16:38:06,185 on stmt: $466binary_subscr.14 = getitem(value=f_even, index=$464binary_floor_divide.13, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:06,185 on stmt: $468binary_multiply.15 = $456binary_multiply.9 * $466binary_subscr.14
DEBUG 2022-02-14 16:38:06,185 on stmt: $470inplace_add.16 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$450binary_subscr.6, rhs=$468binary_multiply.15, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:38:06,185 on stmt: Hnew[$N_det.252] = $470inplace_add.16
DEBUG 2022-02-14 16:38:06,185 on stmt: jump 727
DEBUG 2022-02-14 16:38:06,185 ==== SSA block rewrite pass on 725
DEBUG 2022-02-14 16:38:06,185 Running <numba.core.ssa._FixSSAVars object at 0x7fa046f64d60>
DEBUG 2022-02-14 16:38:06,185 on stmt: $484binary_subscr.6 = getitem(value=Hnew, index=$N_det.252, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:06,185 on stmt: $490binary_multiply.9 = n_det_binom_prod * plus_minus
DEBUG 2022-02-14 16:38:06,185 on stmt: $496binary_subscr.12 = getitem(value=f_odd, index=N, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:06,185 on stmt: $498binary_multiply.13 = $490binary_multiply.9 * $496binary_subscr.12
DEBUG 2022-02-14 16:38:06,185 on stmt: $500inplace_add.14 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$484binary_subscr.6, rhs=$498binary_multiply.13, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:38:06,185 on stmt: Hnew[$N_det.252] = $500inplace_add.14
DEBUG 2022-02-14 16:38:06,185 on stmt: jump 727
DEBUG 2022-02-14 16:38:06,186 ==== SSA block rewrite pass on 593
DEBUG 2022-02-14 16:38:06,186 Running <numba.core.ssa._FixSSAVars object at 0x7fa046f64d60>
DEBUG 2022-02-14 16:38:06,186 on stmt: delta.2 = kept_edges
DEBUG 2022-02-14 16:38:06,186 on stmt: jump 631
DEBUG 2022-02-14 16:38:06,186 ==== SSA block rewrite pass on 670
DEBUG 2022-02-14 16:38:06,186 Running <numba.core.ssa._FixSSAVars object at 0x7fa046f64d60>
DEBUG 2022-02-14 16:38:06,186 on stmt: N = N__fixed + $N_det.252
DEBUG 2022-02-14 16:38:06,186 on stmt: $396binary_floor_divide.9 = N // $const394.8
DEBUG 2022-02-14 16:38:06,186 on stmt: $400binary_subtract.11 = $396binary_floor_divide.9 - val.10
DEBUG 2022-02-14 16:38:06,186 on stmt: plus_minus = $const390.6 ** $400binary_subtract.11
DEBUG 2022-02-14 16:38:06,186 on stmt: $412binary_floor_divide.16 = $N_det.252 // $const410.15
DEBUG 2022-02-14 16:38:06,186 on stmt: $418binary_subscr.19 = static_getitem(value=kept_edges, index=0, index_var=$const416.18, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:06,186 on stmt: $420build_tuple.20 = build_tuple(items=[Var($412binary_floor_divide.16, loop_hafnian_batch.py:62), Var($418binary_subscr.19, loop_hafnian_batch.py:62)])
DEBUG 2022-02-14 16:38:06,186 on stmt: $422binary_subscr.21 = getitem(value=binoms, index=$420build_tuple.20, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:06,186 on stmt: n_det_binom_prod = $422binary_subscr.21 * binom_prod.2
DEBUG 2022-02-14 16:38:06,186 find_def var='binom_prod.2' stmt=n_det_binom_prod = $422binary_subscr.21 * binom_prod.2
DEBUG 2022-02-14 16:38:06,186 find_def_from_top label 670
DEBUG 2022-02-14 16:38:06,186 idom 668 from label 670
DEBUG 2022-02-14 16:38:06,186 find_def_from_bottom label 668
DEBUG 2022-02-14 16:38:06,186 find_def_from_top label 668
DEBUG 2022-02-14 16:38:06,186 idom 631 from label 668
DEBUG 2022-02-14 16:38:06,186 find_def_from_bottom label 631
DEBUG 2022-02-14 16:38:06,186 find_def_from_top label 631
DEBUG 2022-02-14 16:38:06,186 idom 577 from label 631
DEBUG 2022-02-14 16:38:06,186 find_def_from_bottom label 577
DEBUG 2022-02-14 16:38:06,186 find_def_from_top label 577
DEBUG 2022-02-14 16:38:06,187 idom 495 from label 577
DEBUG 2022-02-14 16:38:06,187 find_def_from_bottom label 495
DEBUG 2022-02-14 16:38:06,187 find_def_from_top label 495
DEBUG 2022-02-14 16:38:06,187 insert phi node binom_prod.2.2 = phi(incoming_values=[], incoming_blocks=[]) at 495
DEBUG 2022-02-14 16:38:06,187 find_def_from_bottom label 50
DEBUG 2022-02-14 16:38:06,187 incoming_def binom_prod.2.1 = binom_prod
DEBUG 2022-02-14 16:38:06,187 find_def_from_bottom label 571
DEBUG 2022-02-14 16:38:06,187 incoming_def binom_prod.2 = $binom_prod.2.600
DEBUG 2022-02-14 16:38:06,187 replaced with: n_det_binom_prod = $422binary_subscr.21 * binom_prod.2.2
DEBUG 2022-02-14 16:38:06,187 on stmt: $434binary_modulo.26 = $N_det.252 % $const432.25
DEBUG 2022-02-14 16:38:06,187 on stmt: $438compare_op.28 = $434binary_modulo.26 == $const436.27
DEBUG 2022-02-14 16:38:06,187 on stmt: $440pred = call bool440($438compare_op.28, func=bool440, args=(Var($438compare_op.28, loop_hafnian_batch.py:64),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:06,187 on stmt: branch $440pred, 686, 725
DEBUG 2022-02-14 16:38:06,187 ==== SSA block rewrite pass on 631
DEBUG 2022-02-14 16:38:06,187 Running <numba.core.ssa._FixSSAVars object at 0x7fa046f64d60>
DEBUG 2022-02-14 16:38:06,187 on stmt: delta.2.2 = phi(incoming_values=[Var(delta.2, loop_hafnian_batch.py:51), Var(delta.2.1, loop_hafnian_batch.py:47)], incoming_blocks=[593, 591])
DEBUG 2022-02-14 16:38:06,187 on stmt: $292call_function.6 = call $282load_global.1(delta.2.2, A, D, oddV, func=$282load_global.1, args=[Var(delta.2.2, loop_hafnian_batch.py:51), Var(A, loop_hafnian_batch.py:20), Var(D, loop_hafnian_batch.py:20), Var(oddV, loop_hafnian_batch.py:21)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:06,187 on stmt: $294unpack_sequence.11 = exhaust_iter(value=$292call_function.6, count=4)
DEBUG 2022-02-14 16:38:06,187 on stmt: $AX_S.250 = static_getitem(value=$294unpack_sequence.11, index=0, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:06,187 on stmt: $XD_S.246 = static_getitem(value=$294unpack_sequence.11, index=1, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:06,187 on stmt: $D_S.248 = static_getitem(value=$294unpack_sequence.11, index=2, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:06,188 on stmt: $oddVX_S.249 = static_getitem(value=$294unpack_sequence.11, index=3, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:06,188 on stmt: E = call $304load_global.12($AX_S.250, func=$304load_global.12, args=[Var($AX_S.250, loop_hafnian_batch.py:51)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:06,188 on stmt: f_even = call $312load_global.15(E, $AX_S.250, $XD_S.246, $D_S.248, N__max, func=$312load_global.15, args=[Var(E, loop_hafnian_batch.py:53), Var($AX_S.250, loop_hafnian_batch.py:51), Var($XD_S.246, loop_hafnian_batch.py:51), Var($D_S.248, loop_hafnian_batch.py:51), Var(N__max, loop_hafnian_batch.py:26)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:06,188 on stmt: f_odd = call $328load_global.22(E, $AX_S.250, $XD_S.246, $D_S.248, N__max, oddloop, $oddVX_S.249, func=$328load_global.22, args=[Var(E, loop_hafnian_batch.py:53), Var($AX_S.250, loop_hafnian_batch.py:51), Var($XD_S.246, loop_hafnian_batch.py:51), Var($D_S.248, loop_hafnian_batch.py:51), Var(N__max, loop_hafnian_batch.py:26), Var(oddloop, loop_hafnian_batch.py:20), Var($oddVX_S.249, loop_hafnian_batch.py:51)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:06,188 on stmt: $356binary_subscr.35 = static_getitem(value=kept_edges, index=0, index_var=$const354.34, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:06,188 on stmt: $358binary_multiply.36 = $const350.32 * $356binary_subscr.35
DEBUG 2022-02-14 16:38:06,188 on stmt: $374call_function.44 = call $348load_global.31($358binary_multiply.36, $372binary_add.43, func=$348load_global.31, args=[Var($358binary_multiply.36, loop_hafnian_batch.py:58), Var($372binary_add.43, loop_hafnian_batch.py:58)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:06,188 on stmt: $376get_iter.45 = getiter(value=$374call_function.44)
DEBUG 2022-02-14 16:38:06,188 on stmt: jump 668
DEBUG 2022-02-14 16:38:06,188 ==== SSA block rewrite pass on 495
DEBUG 2022-02-14 16:38:06,188 Running <numba.core.ssa._FixSSAVars object at 0x7fa046f64d60>
DEBUG 2022-02-14 16:38:06,188 on stmt: $228for_iter.2 = iternext(value=$226get_iter.29)
DEBUG 2022-02-14 16:38:06,188 on stmt: $i.253 = pair_first(value=$228for_iter.2)
DEBUG 2022-02-14 16:38:06,188 on stmt: $228for_iter.4 = pair_second(value=$228for_iter.2)
DEBUG 2022-02-14 16:38:06,188 on stmt: branch $228for_iter.4, 571, 577
DEBUG 2022-02-14 16:38:06,188 ==== SSA block rewrite pass on 668
DEBUG 2022-02-14 16:38:06,188 Running <numba.core.ssa._FixSSAVars object at 0x7fa046f64d60>
DEBUG 2022-02-14 16:38:06,188 on stmt: $378for_iter.2 = iternext(value=$376get_iter.45)
DEBUG 2022-02-14 16:38:06,188 on stmt: $N_det.252 = pair_first(value=$378for_iter.2)
DEBUG 2022-02-14 16:38:06,188 on stmt: $378for_iter.4 = pair_second(value=$378for_iter.2)
DEBUG 2022-02-14 16:38:06,188 on stmt: branch $378for_iter.4, 670, 743
DEBUG 2022-02-14 16:38:06,189 ==== SSA block rewrite pass on 571
DEBUG 2022-02-14 16:38:06,189 Running <numba.core.ssa._FixSSAVars object at 0x7fa046f64d60>
DEBUG 2022-02-14 16:38:06,189 on stmt: $240binary_subscr.7 = getitem(value=edge__reps, index=$i.253, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:06,189 on stmt: $246binary_subscr.10 = getitem(value=kept_edges, index=$i.253, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:06,189 on stmt: $248build_tuple.11 = build_tuple(items=[Var($240binary_subscr.7, loop_hafnian_batch.py:44), Var($246binary_subscr.10, loop_hafnian_batch.py:44)])
DEBUG 2022-02-14 16:38:06,189 on stmt: $250binary_subscr.12 = getitem(value=binoms, index=$248build_tuple.11, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:06,189 on stmt: $binom_prod.2.600 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=binom_prod.2, rhs=$250binary_subscr.12, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:38:06,189 find_def var='binom_prod.2' stmt=$binom_prod.2.600 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=binom_prod.2, rhs=$250binary_subscr.12, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:38:06,189 find_def_from_top label 571
DEBUG 2022-02-14 16:38:06,189 idom 495 from label 571
DEBUG 2022-02-14 16:38:06,189 find_def_from_bottom label 495
DEBUG 2022-02-14 16:38:06,189 replaced with: $binom_prod.2.600 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=binom_prod.2.2, rhs=$250binary_subscr.12, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:38:06,189 on stmt: binom_prod.2 = $binom_prod.2.600
DEBUG 2022-02-14 16:38:06,189 on stmt: jump 495
DEBUG 2022-02-14 16:38:06,189 ==== SSA block rewrite pass on 727
DEBUG 2022-02-14 16:38:06,189 Running <numba.core.ssa._FixSSAVars object at 0x7fa046f64d60>
DEBUG 2022-02-14 16:38:06,189 on stmt: jump 668
DEBUG 2022-02-14 16:38:06,189 ==== SSA block rewrite pass on 50
DEBUG 2022-02-14 16:38:06,189 Running <numba.core.ssa._FixSSAVars object at 0x7fa046f64d60>
DEBUG 2022-02-14 16:38:06,189 on stmt: j = parfor__index_230
DEBUG 2022-02-14 16:38:06,189 on stmt: id=2[LoopNest(index_variable = parfor_index.208, range = (0, $180binary_add.10, 1))]{887: <ir.Block at /home/adi/GBS/gbs/loop_hafnian_batch.py (37)>}Var(parfor_index.208, loop_hafnian_batch.py:37)
DEBUG 2022-02-14 16:38:06,189 on stmt: kept_edges = call $192load_global.15(j, edge__reps, func=$192load_global.15, args=[Var(j, loop_hafnian_batch.py:35), Var(edge__reps, loop_hafnian_batch.py:28)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:06,189 on stmt: kept_edges_shape.167 = getattr(value=kept_edges, attr=shape)
DEBUG 2022-02-14 16:38:06,189 on stmt: kept_edges_size0.168 = static_getitem(value=kept_edges_shape.167, index=0, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:06,189 on stmt: binom_prod.2.1 = binom_prod
DEBUG 2022-02-14 16:38:06,190 on stmt: id=6[LoopNest(index_variable = parfor_index.226, range = (0, kept_edges_size0.168, 1))]{557: <ir.Block at /home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numba/parfors/parfor.py (256)>}Var(parfor_index.226, parfor.py:256)
DEBUG 2022-02-14 16:38:06,190 on stmt: $224call_function.28 = call $214load_global.23($const216.24, $222binary_floor_divide.27, func=$214load_global.23, args=[Var($const216.24, loop_hafnian_batch.py:43), Var($222binary_floor_divide.27, loop_hafnian_batch.py:43)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:06,190 on stmt: $226get_iter.29 = getiter(value=$224call_function.28)
DEBUG 2022-02-14 16:38:06,190 on stmt: jump 495
DEBUG 2022-02-14 16:38:06,190 ==== SSA block rewrite pass on 743
DEBUG 2022-02-14 16:38:06,190 Running <numba.core.ssa._FixSSAVars object at 0x7fa046f64d60>
DEBUG 2022-02-14 16:38:06,190 on stmt: ret.193 = call assert.192(msg.191, _136binary__add_59, $180binary_add.10, func=assert.192, args=[Var(msg.191, loop_hafnian_batch.py:69), Var(_136binary__add_59, loop_hafnian_batch.py:34), Var($180binary_add.10, loop_hafnian_batch.py:37)], kws={}, vararg=None, target=None)
DEBUG 2022-02-14 16:38:06,190 on stmt: $H_batch.2.602 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=H__batch_2.2, rhs=Hnew, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:38:06,190 on stmt: H__batch_2.1 = $H_batch.2.602
DEBUG 2022-02-14 16:38:06,190 on stmt: jump 782
DEBUG 2022-02-14 16:38:06,190 ==== SSA block rewrite pass on 577
DEBUG 2022-02-14 16:38:06,190 Running <numba.core.ssa._FixSSAVars object at 0x7fa046f64d60>
DEBUG 2022-02-14 16:38:06,190 on stmt: $260pred = call bool260(glynn, func=bool260, args=(Var(glynn, loop_hafnian_batch.py:20),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:06,190 on stmt: branch $260pred, 591, 593
DEBUG 2022-02-14 16:38:06,190 ==== SSA block rewrite pass on 591
DEBUG 2022-02-14 16:38:06,190 Running <numba.core.ssa._FixSSAVars object at 0x7fa046f64d60>
DEBUG 2022-02-14 16:38:06,190 on stmt: ret.172 = call assert.171(msg.170, kept_edges_size0.168, edge__reps__size0_160, func=assert.171, args=[Var(msg.170, loop_hafnian_batch.py:47), Var(kept_edges_size0.168, loop_hafnian_batch.py:39), Var(edge__reps__size0_160, loop_hafnian_batch.py:28)], kws={}, vararg=None, target=None)
DEBUG 2022-02-14 16:38:06,191 on stmt: id=3[LoopNest(index_variable = parfor_index.213, range = (0, edge__reps__size0_160, 1))]{888: <ir.Block at /home/adi/GBS/gbs/loop_hafnian_batch.py (47)>}Var(parfor_index.213, loop_hafnian_batch.py:47)
DEBUG 2022-02-14 16:38:06,191 on stmt: delta.2.1 = delta
DEBUG 2022-02-14 16:38:06,191 on stmt: jump 631
DEBUG 2022-02-14 16:38:06,191 ==== SSA block rewrite pass on 782
DEBUG 2022-02-14 16:38:06,191 Running <numba.core.ssa._FixSSAVars object at 0x7fa046f64d60>
DEBUG 2022-02-14 16:38:06,191 on stmt: jump 40
DEBUG 2022-02-14 16:38:06,200 bytecode dump:
>          0	NOP(arg=None, lineno=3)
           2	LOAD_GLOBAL(arg=0, lineno=3)
           4	LOAD_FAST(arg=0, lineno=3)
           6	CALL_FUNCTION(arg=1, lineno=3)
           8	RETURN_VALUE(arg=None, lineno=3)
DEBUG 2022-02-14 16:38:06,200 pending: deque([State(pc_initial=0 nstack_initial=0)])
DEBUG 2022-02-14 16:38:06,200 stack: []
DEBUG 2022-02-14 16:38:06,200 dispatch pc=0, inst=NOP(arg=None, lineno=3)
DEBUG 2022-02-14 16:38:06,200 stack []
DEBUG 2022-02-14 16:38:06,200 dispatch pc=2, inst=LOAD_GLOBAL(arg=0, lineno=3)
DEBUG 2022-02-14 16:38:06,200 stack []
DEBUG 2022-02-14 16:38:06,200 dispatch pc=4, inst=LOAD_FAST(arg=0, lineno=3)
DEBUG 2022-02-14 16:38:06,201 stack ['$2load_global.0']
DEBUG 2022-02-14 16:38:06,201 dispatch pc=6, inst=CALL_FUNCTION(arg=1, lineno=3)
DEBUG 2022-02-14 16:38:06,201 stack ['$2load_global.0', '$tmp04.1']
DEBUG 2022-02-14 16:38:06,201 dispatch pc=8, inst=RETURN_VALUE(arg=None, lineno=3)
DEBUG 2022-02-14 16:38:06,201 stack ['$6call_function.2']
DEBUG 2022-02-14 16:38:06,201 end state. edges=[]
DEBUG 2022-02-14 16:38:06,201 -------------------------Prune PHIs-------------------------
DEBUG 2022-02-14 16:38:06,201 Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
DEBUG 2022-02-14 16:38:06,201 defmap: {}
DEBUG 2022-02-14 16:38:06,201 phismap: defaultdict(<class 'set'>, {})
DEBUG 2022-02-14 16:38:06,201 changing phismap: defaultdict(<class 'set'>, {})
DEBUG 2022-02-14 16:38:06,201 keep phismap: {}
DEBUG 2022-02-14 16:38:06,201 new_out: defaultdict(<class 'dict'>, {})
DEBUG 2022-02-14 16:38:06,201 ----------------------DONE Prune PHIs-----------------------
DEBUG 2022-02-14 16:38:06,201 block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$2load_global.0'}), (4, {'res': '$tmp04.1'}), (6, {'func': '$2load_global.0', 'args': ['$tmp04.1'], 'res': '$6call_function.2'}), (8, {'retval': '$6call_function.2', 'castval': '$8return_value.3'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG 2022-02-14 16:38:06,201 label 0:
    tmp0 = arg(0, name=tmp0)                 ['tmp0']
    $2load_global.0 = global(intrin: <intrinsic stub>) ['$2load_global.0']
    $6call_function.2 = call $2load_global.0(tmp0, func=$2load_global.0, args=[Var(tmp0, <string>:3)], kws=(), vararg=None, target=None) ['$2load_global.0', '$6call_function.2', 'tmp0']
    $8return_value.3 = cast(value=$6call_function.2) ['$6call_function.2', '$8return_value.3']
    return $8return_value.3                  ['$8return_value.3']

DEBUG 2022-02-14 16:38:06,202 ==== SSA block analysis pass on 0
DEBUG 2022-02-14 16:38:06,203 Running <numba.core.ssa._GatherDefsHandler object at 0x7fa046d5dbb0>
DEBUG 2022-02-14 16:38:06,203 on stmt: tmp0 = arg(0, name=tmp0)
DEBUG 2022-02-14 16:38:06,203 on stmt: $2load_global.0 = global(intrin: <intrinsic stub>)
DEBUG 2022-02-14 16:38:06,203 on stmt: $6call_function.2 = call $2load_global.0(tmp0, func=$2load_global.0, args=[Var(tmp0, <string>:3)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:06,203 on stmt: $8return_value.3 = cast(value=$6call_function.2)
DEBUG 2022-02-14 16:38:06,203 on stmt: return $8return_value.3
DEBUG 2022-02-14 16:38:06,203 defs defaultdict(<class 'list'>,
            {'$2load_global.0': [<numba.core.ir.Assign object at 0x7fa046d44040>],
             '$6call_function.2': [<numba.core.ir.Assign object at 0x7fa046d44760>],
             '$8return_value.3': [<numba.core.ir.Assign object at 0x7fa046d44880>],
             'tmp0': [<numba.core.ir.Assign object at 0x7fa046d5d670>]})
DEBUG 2022-02-14 16:38:06,203 SSA violators set()
DEBUG 2022-02-14 16:38:06,210 bytecode dump:
>          0	NOP(arg=None, lineno=3543)
           2	LOAD_FAST(arg=0, lineno=3543)
           4	LOAD_METHOD(arg=0, lineno=3543)
           6	LOAD_FAST(arg=1, lineno=3543)
           8	LOAD_FAST(arg=2, lineno=3543)
          10	CALL_METHOD(arg=2, lineno=3543)
          12	RETURN_VALUE(arg=None, lineno=3543)
DEBUG 2022-02-14 16:38:06,210 pending: deque([State(pc_initial=0 nstack_initial=0)])
DEBUG 2022-02-14 16:38:06,210 stack: []
DEBUG 2022-02-14 16:38:06,210 dispatch pc=0, inst=NOP(arg=None, lineno=3543)
DEBUG 2022-02-14 16:38:06,210 stack []
DEBUG 2022-02-14 16:38:06,210 dispatch pc=2, inst=LOAD_FAST(arg=0, lineno=3543)
DEBUG 2022-02-14 16:38:06,210 stack []
DEBUG 2022-02-14 16:38:06,210 dispatch pc=4, inst=LOAD_METHOD(arg=0, lineno=3543)
DEBUG 2022-02-14 16:38:06,210 stack ['$arrtype2.0']
DEBUG 2022-02-14 16:38:06,210 dispatch pc=6, inst=LOAD_FAST(arg=1, lineno=3543)
DEBUG 2022-02-14 16:38:06,210 stack ['$4load_method.1']
DEBUG 2022-02-14 16:38:06,210 dispatch pc=8, inst=LOAD_FAST(arg=2, lineno=3543)
DEBUG 2022-02-14 16:38:06,210 stack ['$4load_method.1', '$size6.2']
DEBUG 2022-02-14 16:38:06,210 dispatch pc=10, inst=CALL_METHOD(arg=2, lineno=3543)
DEBUG 2022-02-14 16:38:06,210 stack ['$4load_method.1', '$size6.2', '$align8.3']
DEBUG 2022-02-14 16:38:06,210 dispatch pc=12, inst=RETURN_VALUE(arg=None, lineno=3543)
DEBUG 2022-02-14 16:38:06,210 stack ['$10call_method.4']
DEBUG 2022-02-14 16:38:06,210 end state. edges=[]
DEBUG 2022-02-14 16:38:06,211 -------------------------Prune PHIs-------------------------
DEBUG 2022-02-14 16:38:06,211 Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
DEBUG 2022-02-14 16:38:06,211 defmap: {}
DEBUG 2022-02-14 16:38:06,211 phismap: defaultdict(<class 'set'>, {})
DEBUG 2022-02-14 16:38:06,211 changing phismap: defaultdict(<class 'set'>, {})
DEBUG 2022-02-14 16:38:06,211 keep phismap: {}
DEBUG 2022-02-14 16:38:06,211 new_out: defaultdict(<class 'dict'>, {})
DEBUG 2022-02-14 16:38:06,211 ----------------------DONE Prune PHIs-----------------------
DEBUG 2022-02-14 16:38:06,211 block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$arrtype2.0'}), (4, {'item': '$arrtype2.0', 'res': '$4load_method.1'}), (6, {'res': '$size6.2'}), (8, {'res': '$align8.3'}), (10, {'func': '$4load_method.1', 'args': ['$size6.2', '$align8.3'], 'res': '$10call_method.4'}), (12, {'retval': '$10call_method.4', 'castval': '$12return_value.5'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG 2022-02-14 16:38:06,211 label 0:
    arrtype = arg(0, name=arrtype)           ['arrtype']
    size = arg(1, name=size)                 ['size']
    align = arg(2, name=align)               ['align']
    $4load_method.1 = getattr(value=arrtype, attr=_allocate) ['$4load_method.1', 'arrtype']
    $10call_method.4 = call $4load_method.1(size, align, func=$4load_method.1, args=[Var(size, arrayobj.py:3543), Var(align, arrayobj.py:3543)], kws=(), vararg=None, target=None) ['$10call_method.4', '$4load_method.1', 'align', 'size']
    $12return_value.5 = cast(value=$10call_method.4) ['$10call_method.4', '$12return_value.5']
    return $12return_value.5                 ['$12return_value.5']

DEBUG 2022-02-14 16:38:06,213 ==== SSA block analysis pass on 0
DEBUG 2022-02-14 16:38:06,213 Running <numba.core.ssa._GatherDefsHandler object at 0x7fa046d34820>
DEBUG 2022-02-14 16:38:06,213 on stmt: arrtype = arg(0, name=arrtype)
DEBUG 2022-02-14 16:38:06,214 on stmt: size = arg(1, name=size)
DEBUG 2022-02-14 16:38:06,214 on stmt: align = arg(2, name=align)
DEBUG 2022-02-14 16:38:06,214 on stmt: $4load_method.1 = getattr(value=arrtype, attr=_allocate)
DEBUG 2022-02-14 16:38:06,214 on stmt: $10call_method.4 = call $4load_method.1(size, align, func=$4load_method.1, args=[Var(size, arrayobj.py:3543), Var(align, arrayobj.py:3543)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:06,214 on stmt: $12return_value.5 = cast(value=$10call_method.4)
DEBUG 2022-02-14 16:38:06,214 on stmt: return $12return_value.5
DEBUG 2022-02-14 16:38:06,214 defs defaultdict(<class 'list'>,
            {'$10call_method.4': [<numba.core.ir.Assign object at 0x7fa046d342b0>],
             '$12return_value.5': [<numba.core.ir.Assign object at 0x7fa046d343a0>],
             '$4load_method.1': [<numba.core.ir.Assign object at 0x7fa046d3a070>],
             'align': [<numba.core.ir.Assign object at 0x7fa046d3af70>],
             'arrtype': [<numba.core.ir.Assign object at 0x7fa046d3a4f0>],
             'size': [<numba.core.ir.Assign object at 0x7fa046d3aaf0>]})
DEBUG 2022-02-14 16:38:06,214 SSA violators set()
DEBUG 2022-02-14 16:38:06,254 bytecode dump:
>          0	NOP(arg=None, lineno=3)
           2	LOAD_GLOBAL(arg=0, lineno=3)
           4	LOAD_FAST(arg=0, lineno=3)
           6	LOAD_FAST(arg=1, lineno=3)
           8	CALL_FUNCTION(arg=2, lineno=3)
          10	RETURN_VALUE(arg=None, lineno=3)
DEBUG 2022-02-14 16:38:06,254 pending: deque([State(pc_initial=0 nstack_initial=0)])
DEBUG 2022-02-14 16:38:06,254 stack: []
DEBUG 2022-02-14 16:38:06,254 dispatch pc=0, inst=NOP(arg=None, lineno=3)
DEBUG 2022-02-14 16:38:06,254 stack []
DEBUG 2022-02-14 16:38:06,254 dispatch pc=2, inst=LOAD_GLOBAL(arg=0, lineno=3)
DEBUG 2022-02-14 16:38:06,254 stack []
DEBUG 2022-02-14 16:38:06,254 dispatch pc=4, inst=LOAD_FAST(arg=0, lineno=3)
DEBUG 2022-02-14 16:38:06,254 stack ['$2load_global.0']
DEBUG 2022-02-14 16:38:06,254 dispatch pc=6, inst=LOAD_FAST(arg=1, lineno=3)
DEBUG 2022-02-14 16:38:06,254 stack ['$2load_global.0', '$tmp04.1']
DEBUG 2022-02-14 16:38:06,254 dispatch pc=8, inst=CALL_FUNCTION(arg=2, lineno=3)
DEBUG 2022-02-14 16:38:06,255 stack ['$2load_global.0', '$tmp04.1', '$tmp16.2']
DEBUG 2022-02-14 16:38:06,255 dispatch pc=10, inst=RETURN_VALUE(arg=None, lineno=3)
DEBUG 2022-02-14 16:38:06,255 stack ['$8call_function.3']
DEBUG 2022-02-14 16:38:06,255 end state. edges=[]
DEBUG 2022-02-14 16:38:06,255 -------------------------Prune PHIs-------------------------
DEBUG 2022-02-14 16:38:06,255 Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
DEBUG 2022-02-14 16:38:06,255 defmap: {}
DEBUG 2022-02-14 16:38:06,255 phismap: defaultdict(<class 'set'>, {})
DEBUG 2022-02-14 16:38:06,255 changing phismap: defaultdict(<class 'set'>, {})
DEBUG 2022-02-14 16:38:06,255 keep phismap: {}
DEBUG 2022-02-14 16:38:06,255 new_out: defaultdict(<class 'dict'>, {})
DEBUG 2022-02-14 16:38:06,255 ----------------------DONE Prune PHIs-----------------------
DEBUG 2022-02-14 16:38:06,255 block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$2load_global.0'}), (4, {'res': '$tmp04.1'}), (6, {'res': '$tmp16.2'}), (8, {'func': '$2load_global.0', 'args': ['$tmp04.1', '$tmp16.2'], 'res': '$8call_function.3'}), (10, {'retval': '$8call_function.3', 'castval': '$10return_value.4'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG 2022-02-14 16:38:06,255 label 0:
    tmp0 = arg(0, name=tmp0)                 ['tmp0']
    tmp1 = arg(1, name=tmp1)                 ['tmp1']
    $2load_global.0 = global(intrin: <intrinsic stub>) ['$2load_global.0']
    $8call_function.3 = call $2load_global.0(tmp0, tmp1, func=$2load_global.0, args=[Var(tmp0, <string>:3), Var(tmp1, <string>:3)], kws=(), vararg=None, target=None) ['$2load_global.0', '$8call_function.3', 'tmp0', 'tmp1']
    $10return_value.4 = cast(value=$8call_function.3) ['$10return_value.4', '$8call_function.3']
    return $10return_value.4                 ['$10return_value.4']

DEBUG 2022-02-14 16:38:06,257 ==== SSA block analysis pass on 0
DEBUG 2022-02-14 16:38:06,257 Running <numba.core.ssa._GatherDefsHandler object at 0x7fa046e41a30>
DEBUG 2022-02-14 16:38:06,257 on stmt: tmp0 = arg(0, name=tmp0)
DEBUG 2022-02-14 16:38:06,257 on stmt: tmp1 = arg(1, name=tmp1)
DEBUG 2022-02-14 16:38:06,257 on stmt: $2load_global.0 = global(intrin: <intrinsic stub>)
DEBUG 2022-02-14 16:38:06,257 on stmt: $8call_function.3 = call $2load_global.0(tmp0, tmp1, func=$2load_global.0, args=[Var(tmp0, <string>:3), Var(tmp1, <string>:3)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:06,257 on stmt: $10return_value.4 = cast(value=$8call_function.3)
DEBUG 2022-02-14 16:38:06,257 on stmt: return $10return_value.4
DEBUG 2022-02-14 16:38:06,257 defs defaultdict(<class 'list'>,
            {'$10return_value.4': [<numba.core.ir.Assign object at 0x7fa046e398b0>],
             '$2load_global.0': [<numba.core.ir.Assign object at 0x7fa046e39370>],
             '$8call_function.3': [<numba.core.ir.Assign object at 0x7fa046e39790>],
             'tmp0': [<numba.core.ir.Assign object at 0x7fa046e41220>],
             'tmp1': [<numba.core.ir.Assign object at 0x7fa046e41310>]})
DEBUG 2022-02-14 16:38:06,257 SSA violators set()
DEBUG 2022-02-14 16:38:06,285 bytecode dump:
>          0	NOP(arg=None, lineno=3)
           2	LOAD_GLOBAL(arg=0, lineno=3)
           4	LOAD_FAST(arg=0, lineno=3)
           6	LOAD_FAST(arg=1, lineno=3)
           8	CALL_FUNCTION(arg=2, lineno=3)
          10	RETURN_VALUE(arg=None, lineno=3)
DEBUG 2022-02-14 16:38:06,286 pending: deque([State(pc_initial=0 nstack_initial=0)])
DEBUG 2022-02-14 16:38:06,286 stack: []
DEBUG 2022-02-14 16:38:06,286 dispatch pc=0, inst=NOP(arg=None, lineno=3)
DEBUG 2022-02-14 16:38:06,286 stack []
DEBUG 2022-02-14 16:38:06,286 dispatch pc=2, inst=LOAD_GLOBAL(arg=0, lineno=3)
DEBUG 2022-02-14 16:38:06,286 stack []
DEBUG 2022-02-14 16:38:06,286 dispatch pc=4, inst=LOAD_FAST(arg=0, lineno=3)
DEBUG 2022-02-14 16:38:06,286 stack ['$2load_global.0']
DEBUG 2022-02-14 16:38:06,286 dispatch pc=6, inst=LOAD_FAST(arg=1, lineno=3)
DEBUG 2022-02-14 16:38:06,286 stack ['$2load_global.0', '$tmp04.1']
DEBUG 2022-02-14 16:38:06,286 dispatch pc=8, inst=CALL_FUNCTION(arg=2, lineno=3)
DEBUG 2022-02-14 16:38:06,286 stack ['$2load_global.0', '$tmp04.1', '$tmp16.2']
DEBUG 2022-02-14 16:38:06,286 dispatch pc=10, inst=RETURN_VALUE(arg=None, lineno=3)
DEBUG 2022-02-14 16:38:06,286 stack ['$8call_function.3']
DEBUG 2022-02-14 16:38:06,286 end state. edges=[]
DEBUG 2022-02-14 16:38:06,286 -------------------------Prune PHIs-------------------------
DEBUG 2022-02-14 16:38:06,286 Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
DEBUG 2022-02-14 16:38:06,286 defmap: {}
DEBUG 2022-02-14 16:38:06,287 phismap: defaultdict(<class 'set'>, {})
DEBUG 2022-02-14 16:38:06,287 changing phismap: defaultdict(<class 'set'>, {})
DEBUG 2022-02-14 16:38:06,287 keep phismap: {}
DEBUG 2022-02-14 16:38:06,287 new_out: defaultdict(<class 'dict'>, {})
DEBUG 2022-02-14 16:38:06,287 ----------------------DONE Prune PHIs-----------------------
DEBUG 2022-02-14 16:38:06,287 block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$2load_global.0'}), (4, {'res': '$tmp04.1'}), (6, {'res': '$tmp16.2'}), (8, {'func': '$2load_global.0', 'args': ['$tmp04.1', '$tmp16.2'], 'res': '$8call_function.3'}), (10, {'retval': '$8call_function.3', 'castval': '$10return_value.4'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG 2022-02-14 16:38:06,287 label 0:
    tmp0 = arg(0, name=tmp0)                 ['tmp0']
    tmp1 = arg(1, name=tmp1)                 ['tmp1']
    $2load_global.0 = global(intrin: <intrinsic stub>) ['$2load_global.0']
    $8call_function.3 = call $2load_global.0(tmp0, tmp1, func=$2load_global.0, args=[Var(tmp0, <string>:3), Var(tmp1, <string>:3)], kws=(), vararg=None, target=None) ['$2load_global.0', '$8call_function.3', 'tmp0', 'tmp1']
    $10return_value.4 = cast(value=$8call_function.3) ['$10return_value.4', '$8call_function.3']
    return $10return_value.4                 ['$10return_value.4']

DEBUG 2022-02-14 16:38:06,288 ==== SSA block analysis pass on 0
DEBUG 2022-02-14 16:38:06,289 Running <numba.core.ssa._GatherDefsHandler object at 0x7fa046f8c370>
DEBUG 2022-02-14 16:38:06,289 on stmt: tmp0 = arg(0, name=tmp0)
DEBUG 2022-02-14 16:38:06,289 on stmt: tmp1 = arg(1, name=tmp1)
DEBUG 2022-02-14 16:38:06,289 on stmt: $2load_global.0 = global(intrin: <intrinsic stub>)
DEBUG 2022-02-14 16:38:06,289 on stmt: $8call_function.3 = call $2load_global.0(tmp0, tmp1, func=$2load_global.0, args=[Var(tmp0, <string>:3), Var(tmp1, <string>:3)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:06,289 on stmt: $10return_value.4 = cast(value=$8call_function.3)
DEBUG 2022-02-14 16:38:06,289 on stmt: return $10return_value.4
DEBUG 2022-02-14 16:38:06,289 defs defaultdict(<class 'list'>,
            {'$10return_value.4': [<numba.core.ir.Assign object at 0x7fa046f73580>],
             '$2load_global.0': [<numba.core.ir.Assign object at 0x7fa046f73040>],
             '$8call_function.3': [<numba.core.ir.Assign object at 0x7fa046f73460>],
             'tmp0': [<numba.core.ir.Assign object at 0x7fa046f784f0>],
             'tmp1': [<numba.core.ir.Assign object at 0x7fa046f781f0>]})
DEBUG 2022-02-14 16:38:06,289 SSA violators set()
DEBUG 2022-02-14 16:38:06,320 bytecode dump:
>          0	NOP(arg=None, lineno=122)
           2	LOAD_FAST(arg=0, lineno=122)
           4	STORE_FAST(arg=2, lineno=122)
           6	BUILD_LIST(arg=0, lineno=123)
           8	STORE_FAST(arg=3, lineno=123)
          10	LOAD_GLOBAL(arg=0, lineno=124)
          12	LOAD_METHOD(arg=1, lineno=124)
          14	LOAD_FAST(arg=1, lineno=124)
          16	CALL_METHOD(arg=1, lineno=124)
          18	LOAD_CONST(arg=1, lineno=124)
          20	BINARY_ADD(arg=None, lineno=124)
          22	STORE_FAST(arg=4, lineno=124)
          24	LOAD_FAST(arg=4, lineno=125)
          26	LOAD_CONST(arg=2, lineno=125)
          28	LOAD_CONST(arg=2, lineno=125)
          30	LOAD_CONST(arg=3, lineno=125)
          32	BUILD_SLICE(arg=3, lineno=125)
          34	BINARY_SUBSCR(arg=None, lineno=125)
          36	GET_ITER(arg=None, lineno=125)
>         38	FOR_ITER(arg=26, lineno=125)
          40	STORE_FAST(arg=5, lineno=125)
          42	LOAD_FAST(arg=3, lineno=126)
          44	LOAD_METHOD(arg=2, lineno=126)
          46	LOAD_FAST(arg=2, lineno=126)
          48	LOAD_FAST(arg=5, lineno=126)
          50	BINARY_MODULO(arg=None, lineno=126)
          52	CALL_METHOD(arg=1, lineno=126)
          54	POP_TOP(arg=None, lineno=126)
          56	LOAD_FAST(arg=2, lineno=127)
          58	LOAD_FAST(arg=5, lineno=127)
          60	INPLACE_FLOOR_DIVIDE(arg=None, lineno=127)
          62	STORE_FAST(arg=2, lineno=127)
          64	JUMP_ABSOLUTE(arg=38, lineno=127)
>         66	LOAD_GLOBAL(arg=0, lineno=128)
          68	LOAD_ATTR(arg=3, lineno=128)
          70	LOAD_FAST(arg=3, lineno=128)
          72	LOAD_CONST(arg=2, lineno=128)
          74	LOAD_CONST(arg=2, lineno=128)
          76	LOAD_CONST(arg=3, lineno=128)
          78	BUILD_SLICE(arg=3, lineno=128)
          80	BINARY_SUBSCR(arg=None, lineno=128)
          82	LOAD_FAST(arg=1, lineno=128)
          84	LOAD_ATTR(arg=4, lineno=128)
          86	LOAD_CONST(arg=4, lineno=128)
          88	CALL_FUNCTION_KW(arg=2, lineno=128)
          90	RETURN_VALUE(arg=None, lineno=128)
DEBUG 2022-02-14 16:38:06,320 pending: deque([State(pc_initial=0 nstack_initial=0)])
DEBUG 2022-02-14 16:38:06,320 stack: []
DEBUG 2022-02-14 16:38:06,320 dispatch pc=0, inst=NOP(arg=None, lineno=122)
DEBUG 2022-02-14 16:38:06,320 stack []
DEBUG 2022-02-14 16:38:06,320 dispatch pc=2, inst=LOAD_FAST(arg=0, lineno=122)
DEBUG 2022-02-14 16:38:06,320 stack []
DEBUG 2022-02-14 16:38:06,320 dispatch pc=4, inst=STORE_FAST(arg=2, lineno=122)
DEBUG 2022-02-14 16:38:06,321 stack ['$j2.0']
DEBUG 2022-02-14 16:38:06,321 dispatch pc=6, inst=BUILD_LIST(arg=0, lineno=123)
DEBUG 2022-02-14 16:38:06,321 stack []
DEBUG 2022-02-14 16:38:06,321 dispatch pc=8, inst=STORE_FAST(arg=3, lineno=123)
DEBUG 2022-02-14 16:38:06,321 stack ['$6build_list.1']
DEBUG 2022-02-14 16:38:06,321 dispatch pc=10, inst=LOAD_GLOBAL(arg=0, lineno=124)
DEBUG 2022-02-14 16:38:06,321 stack []
DEBUG 2022-02-14 16:38:06,321 dispatch pc=12, inst=LOAD_METHOD(arg=1, lineno=124)
DEBUG 2022-02-14 16:38:06,321 stack ['$10load_global.2']
DEBUG 2022-02-14 16:38:06,321 dispatch pc=14, inst=LOAD_FAST(arg=1, lineno=124)
DEBUG 2022-02-14 16:38:06,321 stack ['$12load_method.3']
DEBUG 2022-02-14 16:38:06,321 dispatch pc=16, inst=CALL_METHOD(arg=1, lineno=124)
DEBUG 2022-02-14 16:38:06,321 stack ['$12load_method.3', '$reps14.4']
DEBUG 2022-02-14 16:38:06,321 dispatch pc=18, inst=LOAD_CONST(arg=1, lineno=124)
DEBUG 2022-02-14 16:38:06,321 stack ['$16call_method.5']
DEBUG 2022-02-14 16:38:06,321 dispatch pc=20, inst=BINARY_ADD(arg=None, lineno=124)
DEBUG 2022-02-14 16:38:06,321 stack ['$16call_method.5', '$const18.6']
DEBUG 2022-02-14 16:38:06,321 dispatch pc=22, inst=STORE_FAST(arg=4, lineno=124)
DEBUG 2022-02-14 16:38:06,321 stack ['$20binary_add.7']
DEBUG 2022-02-14 16:38:06,321 dispatch pc=24, inst=LOAD_FAST(arg=4, lineno=125)
DEBUG 2022-02-14 16:38:06,322 stack []
DEBUG 2022-02-14 16:38:06,322 dispatch pc=26, inst=LOAD_CONST(arg=2, lineno=125)
DEBUG 2022-02-14 16:38:06,322 stack ['$bases24.8']
DEBUG 2022-02-14 16:38:06,322 dispatch pc=28, inst=LOAD_CONST(arg=2, lineno=125)
DEBUG 2022-02-14 16:38:06,322 stack ['$bases24.8', '$const26.9']
DEBUG 2022-02-14 16:38:06,322 dispatch pc=30, inst=LOAD_CONST(arg=3, lineno=125)
DEBUG 2022-02-14 16:38:06,322 stack ['$bases24.8', '$const26.9', '$const28.10']
DEBUG 2022-02-14 16:38:06,322 dispatch pc=32, inst=BUILD_SLICE(arg=3, lineno=125)
DEBUG 2022-02-14 16:38:06,322 stack ['$bases24.8', '$const26.9', '$const28.10', '$const30.11']
DEBUG 2022-02-14 16:38:06,322 dispatch pc=34, inst=BINARY_SUBSCR(arg=None, lineno=125)
DEBUG 2022-02-14 16:38:06,322 stack ['$bases24.8', '$32build_slice.13']
DEBUG 2022-02-14 16:38:06,322 dispatch pc=36, inst=GET_ITER(arg=None, lineno=125)
DEBUG 2022-02-14 16:38:06,322 stack ['$34binary_subscr.14']
DEBUG 2022-02-14 16:38:06,322 end state. edges=[Edge(pc=38, stack=('$36get_iter.15',), blockstack=(), npush=0)]
DEBUG 2022-02-14 16:38:06,322 pending: deque([State(pc_initial=38 nstack_initial=1)])
DEBUG 2022-02-14 16:38:06,322 stack: ['$phi38.0']
DEBUG 2022-02-14 16:38:06,322 dispatch pc=38, inst=FOR_ITER(arg=26, lineno=125)
DEBUG 2022-02-14 16:38:06,322 stack ['$phi38.0']
DEBUG 2022-02-14 16:38:06,322 end state. edges=[Edge(pc=66, stack=(), blockstack=(), npush=0), Edge(pc=40, stack=('$phi38.0', '$38for_iter.2'), blockstack=(), npush=0)]
DEBUG 2022-02-14 16:38:06,323 pending: deque([State(pc_initial=66 nstack_initial=0), State(pc_initial=40 nstack_initial=2)])
DEBUG 2022-02-14 16:38:06,323 stack: []
DEBUG 2022-02-14 16:38:06,323 dispatch pc=66, inst=LOAD_GLOBAL(arg=0, lineno=128)
DEBUG 2022-02-14 16:38:06,323 stack []
DEBUG 2022-02-14 16:38:06,323 dispatch pc=68, inst=LOAD_ATTR(arg=3, lineno=128)
DEBUG 2022-02-14 16:38:06,323 stack ['$66load_global.0']
DEBUG 2022-02-14 16:38:06,323 dispatch pc=70, inst=LOAD_FAST(arg=3, lineno=128)
DEBUG 2022-02-14 16:38:06,323 stack ['$68load_attr.1']
DEBUG 2022-02-14 16:38:06,323 dispatch pc=72, inst=LOAD_CONST(arg=2, lineno=128)
DEBUG 2022-02-14 16:38:06,323 stack ['$68load_attr.1', '$output70.2']
DEBUG 2022-02-14 16:38:06,323 dispatch pc=74, inst=LOAD_CONST(arg=2, lineno=128)
DEBUG 2022-02-14 16:38:06,323 stack ['$68load_attr.1', '$output70.2', '$const72.3']
DEBUG 2022-02-14 16:38:06,323 dispatch pc=76, inst=LOAD_CONST(arg=3, lineno=128)
DEBUG 2022-02-14 16:38:06,323 stack ['$68load_attr.1', '$output70.2', '$const72.3', '$const74.4']
DEBUG 2022-02-14 16:38:06,323 dispatch pc=78, inst=BUILD_SLICE(arg=3, lineno=128)
DEBUG 2022-02-14 16:38:06,323 stack ['$68load_attr.1', '$output70.2', '$const72.3', '$const74.4', '$const76.5']
DEBUG 2022-02-14 16:38:06,323 dispatch pc=80, inst=BINARY_SUBSCR(arg=None, lineno=128)
DEBUG 2022-02-14 16:38:06,323 stack ['$68load_attr.1', '$output70.2', '$78build_slice.7']
DEBUG 2022-02-14 16:38:06,323 dispatch pc=82, inst=LOAD_FAST(arg=1, lineno=128)
DEBUG 2022-02-14 16:38:06,323 stack ['$68load_attr.1', '$80binary_subscr.8']
DEBUG 2022-02-14 16:38:06,323 dispatch pc=84, inst=LOAD_ATTR(arg=4, lineno=128)
DEBUG 2022-02-14 16:38:06,324 stack ['$68load_attr.1', '$80binary_subscr.8', '$reps82.9']
DEBUG 2022-02-14 16:38:06,324 dispatch pc=86, inst=LOAD_CONST(arg=4, lineno=128)
DEBUG 2022-02-14 16:38:06,324 stack ['$68load_attr.1', '$80binary_subscr.8', '$84load_attr.10']
DEBUG 2022-02-14 16:38:06,324 dispatch pc=88, inst=CALL_FUNCTION_KW(arg=2, lineno=128)
DEBUG 2022-02-14 16:38:06,324 stack ['$68load_attr.1', '$80binary_subscr.8', '$84load_attr.10', '$const86.11']
DEBUG 2022-02-14 16:38:06,324 dispatch pc=90, inst=RETURN_VALUE(arg=None, lineno=128)
DEBUG 2022-02-14 16:38:06,324 stack ['$88call_function_kw.12']
DEBUG 2022-02-14 16:38:06,324 end state. edges=[]
DEBUG 2022-02-14 16:38:06,324 pending: deque([State(pc_initial=40 nstack_initial=2)])
DEBUG 2022-02-14 16:38:06,324 stack: ['$phi40.0', '$phi40.1']
DEBUG 2022-02-14 16:38:06,324 dispatch pc=40, inst=STORE_FAST(arg=5, lineno=125)
DEBUG 2022-02-14 16:38:06,324 stack ['$phi40.0', '$phi40.1']
DEBUG 2022-02-14 16:38:06,324 dispatch pc=42, inst=LOAD_FAST(arg=3, lineno=126)
DEBUG 2022-02-14 16:38:06,324 stack ['$phi40.0']
DEBUG 2022-02-14 16:38:06,324 dispatch pc=44, inst=LOAD_METHOD(arg=2, lineno=126)
DEBUG 2022-02-14 16:38:06,325 stack ['$phi40.0', '$output42.2']
DEBUG 2022-02-14 16:38:06,325 dispatch pc=46, inst=LOAD_FAST(arg=2, lineno=126)
DEBUG 2022-02-14 16:38:06,325 stack ['$phi40.0', '$44load_method.3']
DEBUG 2022-02-14 16:38:06,325 dispatch pc=48, inst=LOAD_FAST(arg=5, lineno=126)
DEBUG 2022-02-14 16:38:06,325 stack ['$phi40.0', '$44load_method.3', '$num46.4']
DEBUG 2022-02-14 16:38:06,325 dispatch pc=50, inst=BINARY_MODULO(arg=None, lineno=126)
DEBUG 2022-02-14 16:38:06,325 stack ['$phi40.0', '$44load_method.3', '$num46.4', '$base48.5']
DEBUG 2022-02-14 16:38:06,325 dispatch pc=52, inst=CALL_METHOD(arg=1, lineno=126)
DEBUG 2022-02-14 16:38:06,325 stack ['$phi40.0', '$44load_method.3', '$50binary_modulo.6']
DEBUG 2022-02-14 16:38:06,325 dispatch pc=54, inst=POP_TOP(arg=None, lineno=126)
DEBUG 2022-02-14 16:38:06,325 stack ['$phi40.0', '$52call_method.7']
DEBUG 2022-02-14 16:38:06,325 dispatch pc=56, inst=LOAD_FAST(arg=2, lineno=127)
DEBUG 2022-02-14 16:38:06,325 stack ['$phi40.0']
DEBUG 2022-02-14 16:38:06,326 dispatch pc=58, inst=LOAD_FAST(arg=5, lineno=127)
DEBUG 2022-02-14 16:38:06,326 stack ['$phi40.0', '$num56.8']
DEBUG 2022-02-14 16:38:06,326 dispatch pc=60, inst=INPLACE_FLOOR_DIVIDE(arg=None, lineno=127)
DEBUG 2022-02-14 16:38:06,326 stack ['$phi40.0', '$num56.8', '$base58.9']
DEBUG 2022-02-14 16:38:06,326 dispatch pc=62, inst=STORE_FAST(arg=2, lineno=127)
DEBUG 2022-02-14 16:38:06,326 stack ['$phi40.0', '$60inplace_floor_divide.10']
DEBUG 2022-02-14 16:38:06,326 dispatch pc=64, inst=JUMP_ABSOLUTE(arg=38, lineno=127)
DEBUG 2022-02-14 16:38:06,326 stack ['$phi40.0']
DEBUG 2022-02-14 16:38:06,326 end state. edges=[Edge(pc=38, stack=('$phi40.0',), blockstack=(), npush=0)]
DEBUG 2022-02-14 16:38:06,326 pending: deque([State(pc_initial=38 nstack_initial=1)])
DEBUG 2022-02-14 16:38:06,326 -------------------------Prune PHIs-------------------------
DEBUG 2022-02-14 16:38:06,326 Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=38 nstack_initial=1): {'$phi38.0'},
             State(pc_initial=40 nstack_initial=2): {'$phi40.1'},
             State(pc_initial=66 nstack_initial=0): set()})
DEBUG 2022-02-14 16:38:06,327 defmap: {'$phi38.0': State(pc_initial=0 nstack_initial=0),
 '$phi40.1': State(pc_initial=38 nstack_initial=1)}
DEBUG 2022-02-14 16:38:06,327 phismap: defaultdict(<class 'set'>,
            {'$phi38.0': {('$36get_iter.15',
                           State(pc_initial=0 nstack_initial=0)),
                          ('$phi40.0', State(pc_initial=40 nstack_initial=2))},
             '$phi40.0': {('$phi38.0', State(pc_initial=38 nstack_initial=1))},
             '$phi40.1': {('$38for_iter.2',
                           State(pc_initial=38 nstack_initial=1))}})
DEBUG 2022-02-14 16:38:06,327 changing phismap: defaultdict(<class 'set'>,
            {'$phi38.0': {('$36get_iter.15',
                           State(pc_initial=0 nstack_initial=0)),
                          ('$phi38.0', State(pc_initial=38 nstack_initial=1))},
             '$phi40.0': {('$36get_iter.15',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi40.1': {('$38for_iter.2',
                           State(pc_initial=38 nstack_initial=1))}})
DEBUG 2022-02-14 16:38:06,328 changing phismap: defaultdict(<class 'set'>,
            {'$phi38.0': {('$36get_iter.15',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi40.0': {('$36get_iter.15',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi40.1': {('$38for_iter.2',
                           State(pc_initial=38 nstack_initial=1))}})
DEBUG 2022-02-14 16:38:06,328 changing phismap: defaultdict(<class 'set'>,
            {'$phi38.0': {('$36get_iter.15',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi40.0': {('$36get_iter.15',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi40.1': {('$38for_iter.2',
                           State(pc_initial=38 nstack_initial=1))}})
DEBUG 2022-02-14 16:38:06,328 keep phismap: {'$phi38.0': {('$36get_iter.15', State(pc_initial=0 nstack_initial=0))},
 '$phi40.1': {('$38for_iter.2', State(pc_initial=38 nstack_initial=1))}}
DEBUG 2022-02-14 16:38:06,329 new_out: defaultdict(<class 'dict'>,
            {State(pc_initial=0 nstack_initial=0): {'$phi38.0': '$36get_iter.15'},
             State(pc_initial=38 nstack_initial=1): {'$phi40.1': '$38for_iter.2'}})
DEBUG 2022-02-14 16:38:06,329 ----------------------DONE Prune PHIs-----------------------
DEBUG 2022-02-14 16:38:06,329 block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$j2.0'}), (4, {'value': '$j2.0'}), (6, {'items': [], 'res': '$6build_list.1'}), (8, {'value': '$6build_list.1'}), (10, {'res': '$10load_global.2'}), (12, {'item': '$10load_global.2', 'res': '$12load_method.3'}), (14, {'res': '$reps14.4'}), (16, {'func': '$12load_method.3', 'args': ['$reps14.4'], 'res': '$16call_method.5'}), (18, {'res': '$const18.6'}), (20, {'lhs': '$16call_method.5', 'rhs': '$const18.6', 'res': '$20binary_add.7'}), (22, {'value': '$20binary_add.7'}), (24, {'res': '$bases24.8'}), (26, {'res': '$const26.9'}), (28, {'res': '$const28.10'}), (30, {'res': '$const30.11'}), (32, {'start': '$const26.9', 'stop': '$const28.10', 'step': '$const30.11', 'res': '$32build_slice.13', 'slicevar': '$32build_slice.12'}), (34, {'index': '$32build_slice.13', 'target': '$bases24.8', 'res': '$34binary_subscr.14'}), (36, {'value': '$34binary_subscr.14', 'res': '$36get_iter.15'})), outgoing_phis={'$phi38.0': '$36get_iter.15'}, blockstack=(), active_try_block=None, outgoing_edgepushed={38: ('$36get_iter.15',)})
DEBUG 2022-02-14 16:38:06,329 block_infos State(pc_initial=38 nstack_initial=1):
AdaptBlockInfo(insts=((38, {'iterator': '$phi38.0', 'pair': '$38for_iter.1', 'indval': '$38for_iter.2', 'pred': '$38for_iter.3'}),), outgoing_phis={'$phi40.1': '$38for_iter.2'}, blockstack=(), active_try_block=None, outgoing_edgepushed={66: (), 40: ('$phi38.0', '$38for_iter.2')})
DEBUG 2022-02-14 16:38:06,329 block_infos State(pc_initial=40 nstack_initial=2):
AdaptBlockInfo(insts=((40, {'value': '$phi40.1'}), (42, {'res': '$output42.2'}), (44, {'item': '$output42.2', 'res': '$44load_method.3'}), (46, {'res': '$num46.4'}), (48, {'res': '$base48.5'}), (50, {'lhs': '$num46.4', 'rhs': '$base48.5', 'res': '$50binary_modulo.6'}), (52, {'func': '$44load_method.3', 'args': ['$50binary_modulo.6'], 'res': '$52call_method.7'}), (56, {'res': '$num56.8'}), (58, {'res': '$base58.9'}), (60, {'lhs': '$num56.8', 'rhs': '$base58.9', 'res': '$60inplace_floor_divide.10'}), (62, {'value': '$60inplace_floor_divide.10'}), (64, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={38: ('$phi40.0',)})
DEBUG 2022-02-14 16:38:06,329 block_infos State(pc_initial=66 nstack_initial=0):
AdaptBlockInfo(insts=((66, {'res': '$66load_global.0'}), (68, {'item': '$66load_global.0', 'res': '$68load_attr.1'}), (70, {'res': '$output70.2'}), (72, {'res': '$const72.3'}), (74, {'res': '$const74.4'}), (76, {'res': '$const76.5'}), (78, {'start': '$const72.3', 'stop': '$const74.4', 'step': '$const76.5', 'res': '$78build_slice.7', 'slicevar': '$78build_slice.6'}), (80, {'index': '$78build_slice.7', 'target': '$output70.2', 'res': '$80binary_subscr.8'}), (82, {'res': '$reps82.9'}), (84, {'item': '$reps82.9', 'res': '$84load_attr.10'}), (86, {'res': '$const86.11'}), (88, {'func': '$68load_attr.1', 'args': ['$80binary_subscr.8', '$84load_attr.10'], 'names': '$const86.11', 'res': '$88call_function_kw.12'}), (90, {'retval': '$88call_function_kw.12', 'castval': '$90return_value.13'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG 2022-02-14 16:38:06,332 label 0:
    j = arg(0, name=j)                       ['j']
    reps = arg(1, name=reps)                 ['reps']
    num = j                                  ['j', 'num']
    output = build_list(items=[])            ['output']
    $10load_global.2 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>) ['$10load_global.2']
    $12load_method.3 = getattr(value=$10load_global.2, attr=asarray) ['$10load_global.2', '$12load_method.3']
    $16call_method.5 = call $12load_method.3(reps, func=$12load_method.3, args=[Var(reps, _loop_hafnian_subroutines.py:122)], kws=(), vararg=None, target=None) ['$12load_method.3', '$16call_method.5', 'reps']
    $const18.6 = const(int, 1)               ['$const18.6']
    bases = $16call_method.5 + $const18.6    ['$16call_method.5', '$const18.6', 'bases']
    $const26.9 = const(NoneType, None)       ['$const26.9']
    $const28.10 = const(NoneType, None)      ['$const28.10']
    $const30.11 = const(int, -1)             ['$const30.11']
    $32build_slice.12 = global(slice: <class 'slice'>) ['$32build_slice.12']
    $32build_slice.13 = call $32build_slice.12($const26.9, $const28.10, $const30.11, func=$32build_slice.12, args=(Var($const26.9, _loop_hafnian_subroutines.py:125), Var($const28.10, _loop_hafnian_subroutines.py:125), Var($const30.11, _loop_hafnian_subroutines.py:125)), kws=(), vararg=None, target=None) ['$32build_slice.12', '$32build_slice.13', '$const26.9', '$const28.10', '$const30.11']
    $34binary_subscr.14 = getitem(value=bases, index=$32build_slice.13, fn=<built-in function getitem>) ['$32build_slice.13', '$34binary_subscr.14', 'bases']
    $36get_iter.15 = getiter(value=$34binary_subscr.14) ['$34binary_subscr.14', '$36get_iter.15']
    $phi38.0 = $36get_iter.15                ['$36get_iter.15', '$phi38.0']
    jump 38                                  []
label 38:
    $38for_iter.1 = iternext(value=$phi38.0) ['$38for_iter.1', '$phi38.0']
    $38for_iter.2 = pair_first(value=$38for_iter.1) ['$38for_iter.1', '$38for_iter.2']
    $38for_iter.3 = pair_second(value=$38for_iter.1) ['$38for_iter.1', '$38for_iter.3']
    $phi40.1 = $38for_iter.2                 ['$38for_iter.2', '$phi40.1']
    branch $38for_iter.3, 40, 66             ['$38for_iter.3']
label 40:
    base = $phi40.1                          ['$phi40.1', 'base']
    $44load_method.3 = getattr(value=output, attr=append) ['$44load_method.3', 'output']
    $50binary_modulo.6 = num % base          ['$50binary_modulo.6', 'base', 'num']
    $52call_method.7 = call $44load_method.3($50binary_modulo.6, func=$44load_method.3, args=[Var($50binary_modulo.6, _loop_hafnian_subroutines.py:126)], kws=(), vararg=None, target=None) ['$44load_method.3', '$50binary_modulo.6', '$52call_method.7']
    $60inplace_floor_divide.10 = inplace_binop(fn=<built-in function ifloordiv>, immutable_fn=<built-in function floordiv>, lhs=num, rhs=base, static_lhs=Undefined, static_rhs=Undefined) ['$60inplace_floor_divide.10', 'base', 'num']
    num = $60inplace_floor_divide.10         ['$60inplace_floor_divide.10', 'num']
    jump 38                                  []
label 66:
    $66load_global.0 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>) ['$66load_global.0']
    $68load_attr.1 = getattr(value=$66load_global.0, attr=array) ['$66load_global.0', '$68load_attr.1']
    $const72.3 = const(NoneType, None)       ['$const72.3']
    $const74.4 = const(NoneType, None)       ['$const74.4']
    $const76.5 = const(int, -1)              ['$const76.5']
    $78build_slice.6 = global(slice: <class 'slice'>) ['$78build_slice.6']
    $78build_slice.7 = call $78build_slice.6($const72.3, $const74.4, $const76.5, func=$78build_slice.6, args=(Var($const72.3, _loop_hafnian_subroutines.py:128), Var($const74.4, _loop_hafnian_subroutines.py:128), Var($const76.5, _loop_hafnian_subroutines.py:128)), kws=(), vararg=None, target=None) ['$78build_slice.6', '$78build_slice.7', '$const72.3', '$const74.4', '$const76.5']
    $80binary_subscr.8 = getitem(value=output, index=$78build_slice.7, fn=<built-in function getitem>) ['$78build_slice.7', '$80binary_subscr.8', 'output']
    $84load_attr.10 = getattr(value=reps, attr=dtype) ['$84load_attr.10', 'reps']
    $88call_function_kw.12 = call $68load_attr.1($80binary_subscr.8, func=$68load_attr.1, args=[Var($80binary_subscr.8, _loop_hafnian_subroutines.py:128)], kws=[('dtype', Var($84load_attr.10, _loop_hafnian_subroutines.py:128))], vararg=None, target=None) ['$68load_attr.1', '$80binary_subscr.8', '$84load_attr.10', '$88call_function_kw.12']
    $90return_value.13 = cast(value=$88call_function_kw.12) ['$88call_function_kw.12', '$90return_value.13']
    return $90return_value.13                ['$90return_value.13']

DEBUG 2022-02-14 16:38:06,336 ==== SSA block analysis pass on 0
DEBUG 2022-02-14 16:38:06,336 Running <numba.core.ssa._GatherDefsHandler object at 0x7fa046d51370>
DEBUG 2022-02-14 16:38:06,336 on stmt: j = arg(0, name=j)
DEBUG 2022-02-14 16:38:06,336 on stmt: reps = arg(1, name=reps)
DEBUG 2022-02-14 16:38:06,336 on stmt: num = j
DEBUG 2022-02-14 16:38:06,336 on stmt: output = build_list(items=[])
DEBUG 2022-02-14 16:38:06,336 on stmt: $10load_global.2 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:38:06,336 on stmt: $12load_method.3 = getattr(value=$10load_global.2, attr=asarray)
DEBUG 2022-02-14 16:38:06,336 on stmt: $16call_method.5 = call $12load_method.3(reps, func=$12load_method.3, args=[Var(reps, _loop_hafnian_subroutines.py:122)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:06,336 on stmt: $const18.6 = const(int, 1)
DEBUG 2022-02-14 16:38:06,336 on stmt: bases = $16call_method.5 + $const18.6
DEBUG 2022-02-14 16:38:06,336 on stmt: $const26.9 = const(NoneType, None)
DEBUG 2022-02-14 16:38:06,336 on stmt: $const28.10 = const(NoneType, None)
DEBUG 2022-02-14 16:38:06,336 on stmt: $const30.11 = const(int, -1)
DEBUG 2022-02-14 16:38:06,336 on stmt: $32build_slice.12 = global(slice: <class 'slice'>)
DEBUG 2022-02-14 16:38:06,336 on stmt: $32build_slice.13 = call $32build_slice.12($const26.9, $const28.10, $const30.11, func=$32build_slice.12, args=(Var($const26.9, _loop_hafnian_subroutines.py:125), Var($const28.10, _loop_hafnian_subroutines.py:125), Var($const30.11, _loop_hafnian_subroutines.py:125)), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:06,336 on stmt: $34binary_subscr.14 = static_getitem(value=bases, index=slice(None, None, -1), index_var=$32build_slice.13, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:06,336 on stmt: $36get_iter.15 = getiter(value=$34binary_subscr.14)
DEBUG 2022-02-14 16:38:06,337 on stmt: $phi38.0 = $36get_iter.15
DEBUG 2022-02-14 16:38:06,337 on stmt: jump 38
DEBUG 2022-02-14 16:38:06,337 ==== SSA block analysis pass on 38
DEBUG 2022-02-14 16:38:06,337 Running <numba.core.ssa._GatherDefsHandler object at 0x7fa046d51370>
DEBUG 2022-02-14 16:38:06,337 on stmt: $38for_iter.1 = iternext(value=$phi38.0)
DEBUG 2022-02-14 16:38:06,337 on stmt: $38for_iter.2 = pair_first(value=$38for_iter.1)
DEBUG 2022-02-14 16:38:06,337 on stmt: $38for_iter.3 = pair_second(value=$38for_iter.1)
DEBUG 2022-02-14 16:38:06,337 on stmt: $phi40.1 = $38for_iter.2
DEBUG 2022-02-14 16:38:06,337 on stmt: branch $38for_iter.3, 40, 66
DEBUG 2022-02-14 16:38:06,337 ==== SSA block analysis pass on 40
DEBUG 2022-02-14 16:38:06,337 Running <numba.core.ssa._GatherDefsHandler object at 0x7fa046d51370>
DEBUG 2022-02-14 16:38:06,337 on stmt: base = $phi40.1
DEBUG 2022-02-14 16:38:06,337 on stmt: $44load_method.3 = getattr(value=output, attr=append)
DEBUG 2022-02-14 16:38:06,337 on stmt: $50binary_modulo.6 = num % base
DEBUG 2022-02-14 16:38:06,337 on stmt: $52call_method.7 = call $44load_method.3($50binary_modulo.6, func=$44load_method.3, args=[Var($50binary_modulo.6, _loop_hafnian_subroutines.py:126)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:06,337 on stmt: $60inplace_floor_divide.10 = inplace_binop(fn=<built-in function ifloordiv>, immutable_fn=<built-in function floordiv>, lhs=num, rhs=base, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:38:06,337 on stmt: num = $60inplace_floor_divide.10
DEBUG 2022-02-14 16:38:06,337 on stmt: jump 38
DEBUG 2022-02-14 16:38:06,337 ==== SSA block analysis pass on 66
DEBUG 2022-02-14 16:38:06,337 Running <numba.core.ssa._GatherDefsHandler object at 0x7fa046d51370>
DEBUG 2022-02-14 16:38:06,337 on stmt: $66load_global.0 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:38:06,338 on stmt: $68load_attr.1 = getattr(value=$66load_global.0, attr=array)
DEBUG 2022-02-14 16:38:06,338 on stmt: $const72.3 = const(NoneType, None)
DEBUG 2022-02-14 16:38:06,338 on stmt: $const74.4 = const(NoneType, None)
DEBUG 2022-02-14 16:38:06,338 on stmt: $const76.5 = const(int, -1)
DEBUG 2022-02-14 16:38:06,338 on stmt: $78build_slice.6 = global(slice: <class 'slice'>)
DEBUG 2022-02-14 16:38:06,338 on stmt: $78build_slice.7 = call $78build_slice.6($const72.3, $const74.4, $const76.5, func=$78build_slice.6, args=(Var($const72.3, _loop_hafnian_subroutines.py:128), Var($const74.4, _loop_hafnian_subroutines.py:128), Var($const76.5, _loop_hafnian_subroutines.py:128)), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:06,338 on stmt: $80binary_subscr.8 = static_getitem(value=output, index=slice(None, None, -1), index_var=$78build_slice.7, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:06,338 on stmt: $84load_attr.10 = getattr(value=reps, attr=dtype)
DEBUG 2022-02-14 16:38:06,338 on stmt: $88call_function_kw.12 = call $68load_attr.1($80binary_subscr.8, func=$68load_attr.1, args=[Var($80binary_subscr.8, _loop_hafnian_subroutines.py:128)], kws=[('dtype', Var($84load_attr.10, _loop_hafnian_subroutines.py:128))], vararg=None, target=None)
DEBUG 2022-02-14 16:38:06,338 on stmt: $90return_value.13 = cast(value=$88call_function_kw.12)
DEBUG 2022-02-14 16:38:06,338 on stmt: return $90return_value.13
DEBUG 2022-02-14 16:38:06,338 defs defaultdict(<class 'list'>,
            {'$10load_global.2': [<numba.core.ir.Assign object at 0x7fa046e68dc0>],
             '$12load_method.3': [<numba.core.ir.Assign object at 0x7fa046e68c70>],
             '$16call_method.5': [<numba.core.ir.Assign object at 0x7fa046e683d0>],
             '$32build_slice.12': [<numba.core.ir.Assign object at 0x7fa046e2fdf0>],
             '$32build_slice.13': [<numba.core.ir.Assign object at 0x7fa046e2ff70>],
             '$34binary_subscr.14': [<numba.core.ir.Assign object at 0x7fa046f946a0>],
             '$36get_iter.15': [<numba.core.ir.Assign object at 0x7fa046e2fa30>],
             '$38for_iter.1': [<numba.core.ir.Assign object at 0x7fa046e2f640>],
             '$38for_iter.2': [<numba.core.ir.Assign object at 0x7fa046e2f5e0>],
             '$38for_iter.3': [<numba.core.ir.Assign object at 0x7fa046e2f0a0>],
             '$44load_method.3': [<numba.core.ir.Assign object at 0x7fa04673c6d0>],
             '$50binary_modulo.6': [<numba.core.ir.Assign object at 0x7fa046d340a0>],
             '$52call_method.7': [<numba.core.ir.Assign object at 0x7fa046d34910>],
             '$60inplace_floor_divide.10': [<numba.core.ir.Assign object at 0x7fa046e49310>],
             '$66load_global.0': [<numba.core.ir.Assign object at 0x7fa046e49550>],
             '$68load_attr.1': [<numba.core.ir.Assign object at 0x7fa046f7eca0>],
             '$78build_slice.6': [<numba.core.ir.Assign object at 0x7fa046d34be0>],
             '$78build_slice.7': [<numba.core.ir.Assign object at 0x7fa046d34c70>],
             '$80binary_subscr.8': [<numba.core.ir.Assign object at 0x7fa046e49670>],
             '$84load_attr.10': [<numba.core.ir.Assign object at 0x7fa046d3a550>],
             '$88call_function_kw.12': [<numba.core.ir.Assign object at 0x7fa046d3a8b0>],
             '$90return_value.13': [<numba.core.ir.Assign object at 0x7fa046d3a940>],
             '$const18.6': [<numba.core.ir.Assign object at 0x7fa046e685b0>],
             '$const26.9': [<numba.core.ir.Assign object at 0x7fa046e680a0>],
             '$const28.10': [<numba.core.ir.Assign object at 0x7fa046e2f550>],
             '$const30.11': [<numba.core.ir.Assign object at 0x7fa046e2faf0>],
             '$const72.3': [<numba.core.ir.Assign object at 0x7fa046f7e310>],
             '$const74.4': [<numba.core.ir.Assign object at 0x7fa046d34760>],
             '$const76.5': [<numba.core.ir.Assign object at 0x7fa046d34f10>],
             '$phi38.0': [<numba.core.ir.Assign object at 0x7fa046e68f10>],
             '$phi40.1': [<numba.core.ir.Assign object at 0x7fa046e2fbe0>],
             'base': [<numba.core.ir.Assign object at 0x7fa046e2f370>],
             'bases': [<numba.core.ir.Assign object at 0x7fa046e68490>],
             'j': [<numba.core.ir.Assign object at 0x7fa046e498e0>],
             'num': [<numba.core.ir.Assign object at 0x7fa046e49a00>,
                     <numba.core.ir.Assign object at 0x7fa046e490d0>],
             'output': [<numba.core.ir.Assign object at 0x7fa046e68eb0>],
             'reps': [<numba.core.ir.Assign object at 0x7fa046e49e20>]})
DEBUG 2022-02-14 16:38:06,339 SSA violators {'num'}
DEBUG 2022-02-14 16:38:06,339 Fix SSA violator on var num
DEBUG 2022-02-14 16:38:06,339 ==== SSA block rewrite pass on 0
DEBUG 2022-02-14 16:38:06,339 Running <numba.core.ssa._FreshVarHandler object at 0x7fa046d51dc0>
DEBUG 2022-02-14 16:38:06,339 on stmt: j = arg(0, name=j)
DEBUG 2022-02-14 16:38:06,339 on stmt: reps = arg(1, name=reps)
DEBUG 2022-02-14 16:38:06,339 on stmt: num = j
DEBUG 2022-02-14 16:38:06,339 first assign: num
DEBUG 2022-02-14 16:38:06,339 replaced with: num = j
DEBUG 2022-02-14 16:38:06,339 on stmt: output = build_list(items=[])
DEBUG 2022-02-14 16:38:06,339 on stmt: $10load_global.2 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:38:06,339 on stmt: $12load_method.3 = getattr(value=$10load_global.2, attr=asarray)
DEBUG 2022-02-14 16:38:06,339 on stmt: $16call_method.5 = call $12load_method.3(reps, func=$12load_method.3, args=[Var(reps, _loop_hafnian_subroutines.py:122)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:06,339 on stmt: $const18.6 = const(int, 1)
DEBUG 2022-02-14 16:38:06,339 on stmt: bases = $16call_method.5 + $const18.6
DEBUG 2022-02-14 16:38:06,339 on stmt: $const26.9 = const(NoneType, None)
DEBUG 2022-02-14 16:38:06,339 on stmt: $const28.10 = const(NoneType, None)
DEBUG 2022-02-14 16:38:06,339 on stmt: $const30.11 = const(int, -1)
DEBUG 2022-02-14 16:38:06,339 on stmt: $32build_slice.12 = global(slice: <class 'slice'>)
DEBUG 2022-02-14 16:38:06,339 on stmt: $32build_slice.13 = call $32build_slice.12($const26.9, $const28.10, $const30.11, func=$32build_slice.12, args=(Var($const26.9, _loop_hafnian_subroutines.py:125), Var($const28.10, _loop_hafnian_subroutines.py:125), Var($const30.11, _loop_hafnian_subroutines.py:125)), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:06,340 on stmt: $34binary_subscr.14 = static_getitem(value=bases, index=slice(None, None, -1), index_var=$32build_slice.13, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:06,340 on stmt: $36get_iter.15 = getiter(value=$34binary_subscr.14)
DEBUG 2022-02-14 16:38:06,340 on stmt: $phi38.0 = $36get_iter.15
DEBUG 2022-02-14 16:38:06,340 on stmt: jump 38
DEBUG 2022-02-14 16:38:06,340 ==== SSA block rewrite pass on 38
DEBUG 2022-02-14 16:38:06,340 Running <numba.core.ssa._FreshVarHandler object at 0x7fa046d51dc0>
DEBUG 2022-02-14 16:38:06,340 on stmt: $38for_iter.1 = iternext(value=$phi38.0)
DEBUG 2022-02-14 16:38:06,340 on stmt: $38for_iter.2 = pair_first(value=$38for_iter.1)
DEBUG 2022-02-14 16:38:06,340 on stmt: $38for_iter.3 = pair_second(value=$38for_iter.1)
DEBUG 2022-02-14 16:38:06,340 on stmt: $phi40.1 = $38for_iter.2
DEBUG 2022-02-14 16:38:06,340 on stmt: branch $38for_iter.3, 40, 66
DEBUG 2022-02-14 16:38:06,340 ==== SSA block rewrite pass on 40
DEBUG 2022-02-14 16:38:06,340 Running <numba.core.ssa._FreshVarHandler object at 0x7fa046d51dc0>
DEBUG 2022-02-14 16:38:06,340 on stmt: base = $phi40.1
DEBUG 2022-02-14 16:38:06,340 on stmt: $44load_method.3 = getattr(value=output, attr=append)
DEBUG 2022-02-14 16:38:06,340 on stmt: $50binary_modulo.6 = num % base
DEBUG 2022-02-14 16:38:06,340 on stmt: $52call_method.7 = call $44load_method.3($50binary_modulo.6, func=$44load_method.3, args=[Var($50binary_modulo.6, _loop_hafnian_subroutines.py:126)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:06,340 on stmt: $60inplace_floor_divide.10 = inplace_binop(fn=<built-in function ifloordiv>, immutable_fn=<built-in function floordiv>, lhs=num, rhs=base, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:38:06,340 on stmt: num = $60inplace_floor_divide.10
DEBUG 2022-02-14 16:38:06,340 replaced with: num.1 = $60inplace_floor_divide.10
DEBUG 2022-02-14 16:38:06,340 on stmt: jump 38
DEBUG 2022-02-14 16:38:06,340 ==== SSA block rewrite pass on 66
DEBUG 2022-02-14 16:38:06,341 Running <numba.core.ssa._FreshVarHandler object at 0x7fa046d51dc0>
DEBUG 2022-02-14 16:38:06,341 on stmt: $66load_global.0 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:38:06,341 on stmt: $68load_attr.1 = getattr(value=$66load_global.0, attr=array)
DEBUG 2022-02-14 16:38:06,341 on stmt: $const72.3 = const(NoneType, None)
DEBUG 2022-02-14 16:38:06,341 on stmt: $const74.4 = const(NoneType, None)
DEBUG 2022-02-14 16:38:06,341 on stmt: $const76.5 = const(int, -1)
DEBUG 2022-02-14 16:38:06,341 on stmt: $78build_slice.6 = global(slice: <class 'slice'>)
DEBUG 2022-02-14 16:38:06,341 on stmt: $78build_slice.7 = call $78build_slice.6($const72.3, $const74.4, $const76.5, func=$78build_slice.6, args=(Var($const72.3, _loop_hafnian_subroutines.py:128), Var($const74.4, _loop_hafnian_subroutines.py:128), Var($const76.5, _loop_hafnian_subroutines.py:128)), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:06,341 on stmt: $80binary_subscr.8 = static_getitem(value=output, index=slice(None, None, -1), index_var=$78build_slice.7, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:06,341 on stmt: $84load_attr.10 = getattr(value=reps, attr=dtype)
DEBUG 2022-02-14 16:38:06,341 on stmt: $88call_function_kw.12 = call $68load_attr.1($80binary_subscr.8, func=$68load_attr.1, args=[Var($80binary_subscr.8, _loop_hafnian_subroutines.py:128)], kws=[('dtype', Var($84load_attr.10, _loop_hafnian_subroutines.py:128))], vararg=None, target=None)
DEBUG 2022-02-14 16:38:06,341 on stmt: $90return_value.13 = cast(value=$88call_function_kw.12)
DEBUG 2022-02-14 16:38:06,341 on stmt: return $90return_value.13
DEBUG 2022-02-14 16:38:06,341 Replaced assignments: defaultdict(<class 'list'>,
            {0: [<numba.core.ir.Assign object at 0x7fa046d51d60>],
             40: [<numba.core.ir.Assign object at 0x7fa046d51670>]})
DEBUG 2022-02-14 16:38:06,341 ==== SSA block rewrite pass on 0
DEBUG 2022-02-14 16:38:06,341 Running <numba.core.ssa._FixSSAVars object at 0x7fa046d51dc0>
DEBUG 2022-02-14 16:38:06,341 on stmt: j = arg(0, name=j)
DEBUG 2022-02-14 16:38:06,341 on stmt: reps = arg(1, name=reps)
DEBUG 2022-02-14 16:38:06,342 on stmt: num = j
DEBUG 2022-02-14 16:38:06,342 on stmt: output = build_list(items=[])
DEBUG 2022-02-14 16:38:06,342 on stmt: $10load_global.2 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:38:06,342 on stmt: $12load_method.3 = getattr(value=$10load_global.2, attr=asarray)
DEBUG 2022-02-14 16:38:06,342 on stmt: $16call_method.5 = call $12load_method.3(reps, func=$12load_method.3, args=[Var(reps, _loop_hafnian_subroutines.py:122)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:06,342 on stmt: $const18.6 = const(int, 1)
DEBUG 2022-02-14 16:38:06,342 on stmt: bases = $16call_method.5 + $const18.6
DEBUG 2022-02-14 16:38:06,342 on stmt: $const26.9 = const(NoneType, None)
DEBUG 2022-02-14 16:38:06,342 on stmt: $const28.10 = const(NoneType, None)
DEBUG 2022-02-14 16:38:06,342 on stmt: $const30.11 = const(int, -1)
DEBUG 2022-02-14 16:38:06,342 on stmt: $32build_slice.12 = global(slice: <class 'slice'>)
DEBUG 2022-02-14 16:38:06,342 on stmt: $32build_slice.13 = call $32build_slice.12($const26.9, $const28.10, $const30.11, func=$32build_slice.12, args=(Var($const26.9, _loop_hafnian_subroutines.py:125), Var($const28.10, _loop_hafnian_subroutines.py:125), Var($const30.11, _loop_hafnian_subroutines.py:125)), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:06,342 on stmt: $34binary_subscr.14 = static_getitem(value=bases, index=slice(None, None, -1), index_var=$32build_slice.13, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:06,342 on stmt: $36get_iter.15 = getiter(value=$34binary_subscr.14)
DEBUG 2022-02-14 16:38:06,342 on stmt: $phi38.0 = $36get_iter.15
DEBUG 2022-02-14 16:38:06,342 on stmt: jump 38
DEBUG 2022-02-14 16:38:06,343 ==== SSA block rewrite pass on 38
DEBUG 2022-02-14 16:38:06,343 Running <numba.core.ssa._FixSSAVars object at 0x7fa046d51dc0>
DEBUG 2022-02-14 16:38:06,343 on stmt: $38for_iter.1 = iternext(value=$phi38.0)
DEBUG 2022-02-14 16:38:06,343 on stmt: $38for_iter.2 = pair_first(value=$38for_iter.1)
DEBUG 2022-02-14 16:38:06,343 on stmt: $38for_iter.3 = pair_second(value=$38for_iter.1)
DEBUG 2022-02-14 16:38:06,343 on stmt: $phi40.1 = $38for_iter.2
DEBUG 2022-02-14 16:38:06,343 on stmt: branch $38for_iter.3, 40, 66
DEBUG 2022-02-14 16:38:06,343 ==== SSA block rewrite pass on 40
DEBUG 2022-02-14 16:38:06,343 Running <numba.core.ssa._FixSSAVars object at 0x7fa046d51dc0>
DEBUG 2022-02-14 16:38:06,343 on stmt: base = $phi40.1
DEBUG 2022-02-14 16:38:06,343 on stmt: $44load_method.3 = getattr(value=output, attr=append)
DEBUG 2022-02-14 16:38:06,343 on stmt: $50binary_modulo.6 = num % base
DEBUG 2022-02-14 16:38:06,343 find_def var='num' stmt=$50binary_modulo.6 = num % base
DEBUG 2022-02-14 16:38:06,343 find_def_from_top label 40
DEBUG 2022-02-14 16:38:06,343 idom 38 from label 40
DEBUG 2022-02-14 16:38:06,343 find_def_from_bottom label 38
DEBUG 2022-02-14 16:38:06,343 find_def_from_top label 38
DEBUG 2022-02-14 16:38:06,343 insert phi node num.2 = phi(incoming_values=[], incoming_blocks=[]) at 38
DEBUG 2022-02-14 16:38:06,343 find_def_from_bottom label 0
DEBUG 2022-02-14 16:38:06,343 incoming_def num = j
DEBUG 2022-02-14 16:38:06,343 find_def_from_bottom label 40
DEBUG 2022-02-14 16:38:06,344 incoming_def num.1 = $60inplace_floor_divide.10
DEBUG 2022-02-14 16:38:06,344 replaced with: $50binary_modulo.6 = num.2 % base
DEBUG 2022-02-14 16:38:06,344 on stmt: $52call_method.7 = call $44load_method.3($50binary_modulo.6, func=$44load_method.3, args=[Var($50binary_modulo.6, _loop_hafnian_subroutines.py:126)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:06,344 on stmt: $60inplace_floor_divide.10 = inplace_binop(fn=<built-in function ifloordiv>, immutable_fn=<built-in function floordiv>, lhs=num, rhs=base, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:38:06,344 find_def var='num' stmt=$60inplace_floor_divide.10 = inplace_binop(fn=<built-in function ifloordiv>, immutable_fn=<built-in function floordiv>, lhs=num, rhs=base, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:38:06,344 find_def_from_top label 40
DEBUG 2022-02-14 16:38:06,344 idom 38 from label 40
DEBUG 2022-02-14 16:38:06,344 find_def_from_bottom label 38
DEBUG 2022-02-14 16:38:06,344 replaced with: $60inplace_floor_divide.10 = inplace_binop(fn=<built-in function ifloordiv>, immutable_fn=<built-in function floordiv>, lhs=num.2, rhs=base, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:38:06,344 on stmt: num.1 = $60inplace_floor_divide.10
DEBUG 2022-02-14 16:38:06,344 on stmt: jump 38
DEBUG 2022-02-14 16:38:06,344 ==== SSA block rewrite pass on 66
DEBUG 2022-02-14 16:38:06,344 Running <numba.core.ssa._FixSSAVars object at 0x7fa046d51dc0>
DEBUG 2022-02-14 16:38:06,344 on stmt: $66load_global.0 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:38:06,344 on stmt: $68load_attr.1 = getattr(value=$66load_global.0, attr=array)
DEBUG 2022-02-14 16:38:06,344 on stmt: $const72.3 = const(NoneType, None)
DEBUG 2022-02-14 16:38:06,344 on stmt: $const74.4 = const(NoneType, None)
DEBUG 2022-02-14 16:38:06,345 on stmt: $const76.5 = const(int, -1)
DEBUG 2022-02-14 16:38:06,345 on stmt: $78build_slice.6 = global(slice: <class 'slice'>)
DEBUG 2022-02-14 16:38:06,345 on stmt: $78build_slice.7 = call $78build_slice.6($const72.3, $const74.4, $const76.5, func=$78build_slice.6, args=(Var($const72.3, _loop_hafnian_subroutines.py:128), Var($const74.4, _loop_hafnian_subroutines.py:128), Var($const76.5, _loop_hafnian_subroutines.py:128)), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:06,345 on stmt: $80binary_subscr.8 = static_getitem(value=output, index=slice(None, None, -1), index_var=$78build_slice.7, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:06,345 on stmt: $84load_attr.10 = getattr(value=reps, attr=dtype)
DEBUG 2022-02-14 16:38:06,345 on stmt: $88call_function_kw.12 = call $68load_attr.1($80binary_subscr.8, func=$68load_attr.1, args=[Var($80binary_subscr.8, _loop_hafnian_subroutines.py:128)], kws=[('dtype', Var($84load_attr.10, _loop_hafnian_subroutines.py:128))], vararg=None, target=None)
DEBUG 2022-02-14 16:38:06,345 on stmt: $90return_value.13 = cast(value=$88call_function_kw.12)
DEBUG 2022-02-14 16:38:06,345 on stmt: return $90return_value.13
DEBUG 2022-02-14 16:38:06,348 bytecode dump:
>          0	NOP(arg=None, lineno=4208)
           2	LOAD_FAST(arg=0, lineno=4208)
           4	RETURN_VALUE(arg=None, lineno=4208)
DEBUG 2022-02-14 16:38:06,348 pending: deque([State(pc_initial=0 nstack_initial=0)])
DEBUG 2022-02-14 16:38:06,348 stack: []
DEBUG 2022-02-14 16:38:06,348 dispatch pc=0, inst=NOP(arg=None, lineno=4208)
DEBUG 2022-02-14 16:38:06,349 stack []
DEBUG 2022-02-14 16:38:06,349 dispatch pc=2, inst=LOAD_FAST(arg=0, lineno=4208)
DEBUG 2022-02-14 16:38:06,349 stack []
DEBUG 2022-02-14 16:38:06,349 dispatch pc=4, inst=RETURN_VALUE(arg=None, lineno=4208)
DEBUG 2022-02-14 16:38:06,349 stack ['$a2.0']
DEBUG 2022-02-14 16:38:06,349 end state. edges=[]
DEBUG 2022-02-14 16:38:06,349 -------------------------Prune PHIs-------------------------
DEBUG 2022-02-14 16:38:06,349 Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
DEBUG 2022-02-14 16:38:06,349 defmap: {}
DEBUG 2022-02-14 16:38:06,349 phismap: defaultdict(<class 'set'>, {})
DEBUG 2022-02-14 16:38:06,349 changing phismap: defaultdict(<class 'set'>, {})
DEBUG 2022-02-14 16:38:06,349 keep phismap: {}
DEBUG 2022-02-14 16:38:06,349 new_out: defaultdict(<class 'dict'>, {})
DEBUG 2022-02-14 16:38:06,349 ----------------------DONE Prune PHIs-----------------------
DEBUG 2022-02-14 16:38:06,349 block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$a2.0'}), (4, {'retval': '$a2.0', 'castval': '$4return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG 2022-02-14 16:38:06,350 label 0:
    a = arg(0, name=a)                       ['a']
    dtype = arg(1, name=dtype)               ['dtype']
    $4return_value.1 = cast(value=a)         ['$4return_value.1', 'a']
    return $4return_value.1                  ['$4return_value.1']

DEBUG 2022-02-14 16:38:06,351 ==== SSA block analysis pass on 0
DEBUG 2022-02-14 16:38:06,351 Running <numba.core.ssa._GatherDefsHandler object at 0x7fa046d3a4c0>
DEBUG 2022-02-14 16:38:06,351 on stmt: a = arg(0, name=a)
DEBUG 2022-02-14 16:38:06,351 on stmt: dtype = arg(1, name=dtype)
DEBUG 2022-02-14 16:38:06,351 on stmt: $4return_value.1 = cast(value=a)
DEBUG 2022-02-14 16:38:06,351 on stmt: return $4return_value.1
DEBUG 2022-02-14 16:38:06,351 defs defaultdict(<class 'list'>,
            {'$4return_value.1': [<numba.core.ir.Assign object at 0x7fa046d5a640>],
             'a': [<numba.core.ir.Assign object at 0x7fa046d5a9d0>],
             'dtype': [<numba.core.ir.Assign object at 0x7fa046d5a9a0>]})
DEBUG 2022-02-14 16:38:06,351 SSA violators set()
DEBUG 2022-02-14 16:38:06,368 bytecode dump:
>          0	NOP(arg=None, lineno=3)
           2	LOAD_GLOBAL(arg=0, lineno=3)
           4	LOAD_FAST(arg=0, lineno=3)
           6	LOAD_FAST(arg=1, lineno=3)
           8	CALL_FUNCTION(arg=2, lineno=3)
          10	RETURN_VALUE(arg=None, lineno=3)
DEBUG 2022-02-14 16:38:06,368 pending: deque([State(pc_initial=0 nstack_initial=0)])
DEBUG 2022-02-14 16:38:06,368 stack: []
DEBUG 2022-02-14 16:38:06,368 dispatch pc=0, inst=NOP(arg=None, lineno=3)
DEBUG 2022-02-14 16:38:06,368 stack []
DEBUG 2022-02-14 16:38:06,368 dispatch pc=2, inst=LOAD_GLOBAL(arg=0, lineno=3)
DEBUG 2022-02-14 16:38:06,368 stack []
DEBUG 2022-02-14 16:38:06,368 dispatch pc=4, inst=LOAD_FAST(arg=0, lineno=3)
DEBUG 2022-02-14 16:38:06,368 stack ['$2load_global.0']
DEBUG 2022-02-14 16:38:06,368 dispatch pc=6, inst=LOAD_FAST(arg=1, lineno=3)
DEBUG 2022-02-14 16:38:06,368 stack ['$2load_global.0', '$tmp04.1']
DEBUG 2022-02-14 16:38:06,368 dispatch pc=8, inst=CALL_FUNCTION(arg=2, lineno=3)
DEBUG 2022-02-14 16:38:06,368 stack ['$2load_global.0', '$tmp04.1', '$dtype6.2']
DEBUG 2022-02-14 16:38:06,368 dispatch pc=10, inst=RETURN_VALUE(arg=None, lineno=3)
DEBUG 2022-02-14 16:38:06,368 stack ['$8call_function.3']
DEBUG 2022-02-14 16:38:06,369 end state. edges=[]
DEBUG 2022-02-14 16:38:06,369 -------------------------Prune PHIs-------------------------
DEBUG 2022-02-14 16:38:06,369 Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
DEBUG 2022-02-14 16:38:06,369 defmap: {}
DEBUG 2022-02-14 16:38:06,369 phismap: defaultdict(<class 'set'>, {})
DEBUG 2022-02-14 16:38:06,369 changing phismap: defaultdict(<class 'set'>, {})
DEBUG 2022-02-14 16:38:06,369 keep phismap: {}
DEBUG 2022-02-14 16:38:06,369 new_out: defaultdict(<class 'dict'>, {})
DEBUG 2022-02-14 16:38:06,369 ----------------------DONE Prune PHIs-----------------------
DEBUG 2022-02-14 16:38:06,369 block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$2load_global.0'}), (4, {'res': '$tmp04.1'}), (6, {'res': '$dtype6.2'}), (8, {'func': '$2load_global.0', 'args': ['$tmp04.1', '$dtype6.2'], 'res': '$8call_function.3'}), (10, {'retval': '$8call_function.3', 'castval': '$10return_value.4'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG 2022-02-14 16:38:06,369 label 0:
    tmp0 = arg(0, name=tmp0)                 ['tmp0']
    dtype = arg(1, name=dtype)               ['dtype']
    $2load_global.0 = global(intrin: <intrinsic stub>) ['$2load_global.0']
    $8call_function.3 = call $2load_global.0(tmp0, dtype, func=$2load_global.0, args=[Var(tmp0, <string>:3), Var(dtype, <string>:3)], kws=(), vararg=None, target=None) ['$2load_global.0', '$8call_function.3', 'dtype', 'tmp0']
    $10return_value.4 = cast(value=$8call_function.3) ['$10return_value.4', '$8call_function.3']
    return $10return_value.4                 ['$10return_value.4']

DEBUG 2022-02-14 16:38:06,371 ==== SSA block analysis pass on 0
DEBUG 2022-02-14 16:38:06,371 Running <numba.core.ssa._GatherDefsHandler object at 0x7fa046d42a60>
DEBUG 2022-02-14 16:38:06,371 on stmt: tmp0 = arg(0, name=tmp0)
DEBUG 2022-02-14 16:38:06,371 on stmt: dtype = arg(1, name=dtype)
DEBUG 2022-02-14 16:38:06,371 on stmt: $2load_global.0 = global(intrin: <intrinsic stub>)
DEBUG 2022-02-14 16:38:06,371 on stmt: $8call_function.3 = call $2load_global.0(tmp0, dtype, func=$2load_global.0, args=[Var(tmp0, <string>:3), Var(dtype, <string>:3)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:06,371 on stmt: $10return_value.4 = cast(value=$8call_function.3)
DEBUG 2022-02-14 16:38:06,371 on stmt: return $10return_value.4
DEBUG 2022-02-14 16:38:06,371 defs defaultdict(<class 'list'>,
            {'$10return_value.4': [<numba.core.ir.Assign object at 0x7fa046376310>],
             '$2load_global.0': [<numba.core.ir.Assign object at 0x7fa046371d90>],
             '$8call_function.3': [<numba.core.ir.Assign object at 0x7fa0463761f0>],
             'dtype': [<numba.core.ir.Assign object at 0x7fa046371370>],
             'tmp0': [<numba.core.ir.Assign object at 0x7fa0463714f0>]})
DEBUG 2022-02-14 16:38:06,371 SSA violators set()
DEBUG 2022-02-14 16:38:06,413 bytecode dump:
>          0	NOP(arg=None, lineno=3)
           2	LOAD_GLOBAL(arg=0, lineno=3)
           4	LOAD_FAST(arg=0, lineno=3)
           6	LOAD_FAST(arg=1, lineno=3)
           8	CALL_FUNCTION(arg=2, lineno=3)
          10	RETURN_VALUE(arg=None, lineno=3)
DEBUG 2022-02-14 16:38:06,413 pending: deque([State(pc_initial=0 nstack_initial=0)])
DEBUG 2022-02-14 16:38:06,413 stack: []
DEBUG 2022-02-14 16:38:06,413 dispatch pc=0, inst=NOP(arg=None, lineno=3)
DEBUG 2022-02-14 16:38:06,413 stack []
DEBUG 2022-02-14 16:38:06,413 dispatch pc=2, inst=LOAD_GLOBAL(arg=0, lineno=3)
DEBUG 2022-02-14 16:38:06,413 stack []
DEBUG 2022-02-14 16:38:06,413 dispatch pc=4, inst=LOAD_FAST(arg=0, lineno=3)
DEBUG 2022-02-14 16:38:06,413 stack ['$2load_global.0']
DEBUG 2022-02-14 16:38:06,413 dispatch pc=6, inst=LOAD_FAST(arg=1, lineno=3)
DEBUG 2022-02-14 16:38:06,413 stack ['$2load_global.0', '$tmp04.1']
DEBUG 2022-02-14 16:38:06,414 dispatch pc=8, inst=CALL_FUNCTION(arg=2, lineno=3)
DEBUG 2022-02-14 16:38:06,414 stack ['$2load_global.0', '$tmp04.1', '$dtype6.2']
DEBUG 2022-02-14 16:38:06,414 dispatch pc=10, inst=RETURN_VALUE(arg=None, lineno=3)
DEBUG 2022-02-14 16:38:06,414 stack ['$8call_function.3']
DEBUG 2022-02-14 16:38:06,414 end state. edges=[]
DEBUG 2022-02-14 16:38:06,414 -------------------------Prune PHIs-------------------------
DEBUG 2022-02-14 16:38:06,414 Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
DEBUG 2022-02-14 16:38:06,414 defmap: {}
DEBUG 2022-02-14 16:38:06,414 phismap: defaultdict(<class 'set'>, {})
DEBUG 2022-02-14 16:38:06,414 changing phismap: defaultdict(<class 'set'>, {})
DEBUG 2022-02-14 16:38:06,414 keep phismap: {}
DEBUG 2022-02-14 16:38:06,414 new_out: defaultdict(<class 'dict'>, {})
DEBUG 2022-02-14 16:38:06,414 ----------------------DONE Prune PHIs-----------------------
DEBUG 2022-02-14 16:38:06,414 block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$2load_global.0'}), (4, {'res': '$tmp04.1'}), (6, {'res': '$dtype6.2'}), (8, {'func': '$2load_global.0', 'args': ['$tmp04.1', '$dtype6.2'], 'res': '$8call_function.3'}), (10, {'retval': '$8call_function.3', 'castval': '$10return_value.4'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG 2022-02-14 16:38:06,415 label 0:
    tmp0 = arg(0, name=tmp0)                 ['tmp0']
    dtype = arg(1, name=dtype)               ['dtype']
    $2load_global.0 = global(intrin: <intrinsic stub>) ['$2load_global.0']
    $8call_function.3 = call $2load_global.0(tmp0, dtype, func=$2load_global.0, args=[Var(tmp0, <string>:3), Var(dtype, <string>:3)], kws=(), vararg=None, target=None) ['$2load_global.0', '$8call_function.3', 'dtype', 'tmp0']
    $10return_value.4 = cast(value=$8call_function.3) ['$10return_value.4', '$8call_function.3']
    return $10return_value.4                 ['$10return_value.4']

DEBUG 2022-02-14 16:38:06,416 ==== SSA block analysis pass on 0
DEBUG 2022-02-14 16:38:06,416 Running <numba.core.ssa._GatherDefsHandler object at 0x7fa046e63a90>
DEBUG 2022-02-14 16:38:06,416 on stmt: tmp0 = arg(0, name=tmp0)
DEBUG 2022-02-14 16:38:06,416 on stmt: dtype = arg(1, name=dtype)
DEBUG 2022-02-14 16:38:06,416 on stmt: $2load_global.0 = global(intrin: <intrinsic stub>)
DEBUG 2022-02-14 16:38:06,416 on stmt: $8call_function.3 = call $2load_global.0(tmp0, dtype, func=$2load_global.0, args=[Var(tmp0, <string>:3), Var(dtype, <string>:3)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:06,416 on stmt: $10return_value.4 = cast(value=$8call_function.3)
DEBUG 2022-02-14 16:38:06,416 on stmt: return $10return_value.4
DEBUG 2022-02-14 16:38:06,416 defs defaultdict(<class 'list'>,
            {'$10return_value.4': [<numba.core.ir.Assign object at 0x7fa046e51910>],
             '$2load_global.0': [<numba.core.ir.Assign object at 0x7fa046e513d0>],
             '$8call_function.3': [<numba.core.ir.Assign object at 0x7fa046e517f0>],
             'dtype': [<numba.core.ir.Assign object at 0x7fa046e63550>],
             'tmp0': [<numba.core.ir.Assign object at 0x7fa046e63220>]})
DEBUG 2022-02-14 16:38:06,416 SSA violators set()
DEBUG 2022-02-14 16:38:06,472 bytecode dump:
>          0	NOP(arg=None, lineno=124)
           2	LOAD_FAST(arg=0, lineno=124)
           4	LOAD_CONST(arg=1, lineno=1)
           6	BINARY_ADD(arg=None, lineno=1)
           8	RETURN_VALUE(arg=None, lineno=1)
DEBUG 2022-02-14 16:38:06,472 pending: deque([State(pc_initial=0 nstack_initial=0)])
DEBUG 2022-02-14 16:38:06,472 stack: []
DEBUG 2022-02-14 16:38:06,472 dispatch pc=0, inst=NOP(arg=None, lineno=124)
DEBUG 2022-02-14 16:38:06,472 stack []
DEBUG 2022-02-14 16:38:06,472 dispatch pc=2, inst=LOAD_FAST(arg=0, lineno=124)
DEBUG 2022-02-14 16:38:06,472 stack []
DEBUG 2022-02-14 16:38:06,472 dispatch pc=4, inst=LOAD_CONST(arg=1, lineno=1)
DEBUG 2022-02-14 16:38:06,472 stack ['$_16call_method_5_12.0']
DEBUG 2022-02-14 16:38:06,472 dispatch pc=6, inst=BINARY_ADD(arg=None, lineno=1)
DEBUG 2022-02-14 16:38:06,472 stack ['$_16call_method_5_12.0', '$const4.1']
DEBUG 2022-02-14 16:38:06,472 dispatch pc=8, inst=RETURN_VALUE(arg=None, lineno=1)
DEBUG 2022-02-14 16:38:06,472 stack ['$6binary_add.2']
DEBUG 2022-02-14 16:38:06,472 end state. edges=[]
DEBUG 2022-02-14 16:38:06,472 -------------------------Prune PHIs-------------------------
DEBUG 2022-02-14 16:38:06,472 Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
DEBUG 2022-02-14 16:38:06,473 defmap: {}
DEBUG 2022-02-14 16:38:06,473 phismap: defaultdict(<class 'set'>, {})
DEBUG 2022-02-14 16:38:06,473 changing phismap: defaultdict(<class 'set'>, {})
DEBUG 2022-02-14 16:38:06,473 keep phismap: {}
DEBUG 2022-02-14 16:38:06,473 new_out: defaultdict(<class 'dict'>, {})
DEBUG 2022-02-14 16:38:06,473 ----------------------DONE Prune PHIs-----------------------
DEBUG 2022-02-14 16:38:06,473 block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$_16call_method_5_12.0'}), (4, {'res': '$const4.1'}), (6, {'lhs': '$_16call_method_5_12.0', 'rhs': '$const4.1', 'res': '$6binary_add.2'}), (8, {'retval': '$6binary_add.2', 'castval': '$8return_value.3'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG 2022-02-14 16:38:06,473 label 0:
    _16call_method_5_1 = arg(0, name=_16call_method_5_1) ['_16call_method_5_1']
    $const4.1 = const(int, 1)                ['$const4.1']
    $6binary_add.2 = _16call_method_5_1 + $const4.1 ['$6binary_add.2', '$const4.1', '_16call_method_5_1']
    $8return_value.3 = cast(value=$6binary_add.2) ['$6binary_add.2', '$8return_value.3']
    return $8return_value.3                  ['$8return_value.3']

DEBUG 2022-02-14 16:38:06,474 ==== SSA block analysis pass on 0
DEBUG 2022-02-14 16:38:06,475 Running <numba.core.ssa._GatherDefsHandler object at 0x7fa046e354f0>
DEBUG 2022-02-14 16:38:06,475 on stmt: _16call_method_5_1 = arg(0, name=_16call_method_5_1)
DEBUG 2022-02-14 16:38:06,475 on stmt: $const4.1 = const(int, 1)
DEBUG 2022-02-14 16:38:06,475 on stmt: $6binary_add.2 = _16call_method_5_1 + $const4.1
DEBUG 2022-02-14 16:38:06,475 on stmt: $8return_value.3 = cast(value=$6binary_add.2)
DEBUG 2022-02-14 16:38:06,475 on stmt: return $8return_value.3
DEBUG 2022-02-14 16:38:06,475 defs defaultdict(<class 'list'>,
            {'$6binary_add.2': [<numba.core.ir.Assign object at 0x7fa046e35d90>],
             '$8return_value.3': [<numba.core.ir.Assign object at 0x7fa046e35ee0>],
             '$const4.1': [<numba.core.ir.Assign object at 0x7fa046e35be0>],
             '_16call_method_5_1': [<numba.core.ir.Assign object at 0x7fa046e350a0>]})
DEBUG 2022-02-14 16:38:06,475 SSA violators set()
DEBUG 2022-02-14 16:38:06,485 bytecode dump:
>          0	NOP(arg=None, lineno=205)
           2	LOAD_FAST(arg=0, lineno=205)
           4	LOAD_FAST(arg=2, lineno=205)
           6	COMPARE_OP(arg=4, lineno=205)
           8	POP_JUMP_IF_FALSE(arg=14, lineno=205)
          10	LOAD_CONST(arg=1, lineno=208)
          12	RETURN_VALUE(arg=None, lineno=208)
>         14	LOAD_CONST(arg=1, lineno=210)
          16	STORE_FAST(arg=4, lineno=210)
          18	LOAD_FAST(arg=2, lineno=211)
          20	LOAD_FAST(arg=0, lineno=211)
          22	BINARY_SUBTRACT(arg=None, lineno=211)
          24	STORE_FAST(arg=5, lineno=211)
>         26	LOAD_FAST(arg=4, lineno=212)
          28	LOAD_FAST(arg=0, lineno=212)
          30	COMPARE_OP(arg=0, lineno=212)
          32	POP_JUMP_IF_FALSE(arg=120, lineno=212)
          34	LOAD_FAST(arg=1, lineno=213)
          36	LOAD_FAST(arg=4, lineno=213)
          38	BINARY_SUBSCR(arg=None, lineno=213)
          40	STORE_FAST(arg=6, lineno=213)
          42	LOAD_FAST(arg=3, lineno=214)
          44	LOAD_FAST(arg=5, lineno=214)
          46	BINARY_SUBSCR(arg=None, lineno=214)
          48	STORE_FAST(arg=7, lineno=214)
          50	LOAD_FAST(arg=7, lineno=217)
          52	LOAD_CONST(arg=2, lineno=217)
          54	COMPARE_OP(arg=3, lineno=217)
          56	POP_JUMP_IF_FALSE(arg=86, lineno=217)
          58	LOAD_FAST(arg=6, lineno=221)
          60	LOAD_FAST(arg=7, lineno=221)
          62	COMPARE_OP(arg=3, lineno=221)
          64	POP_JUMP_IF_FALSE(arg=102, lineno=221)
          66	LOAD_FAST(arg=6, lineno=221)
          68	LOAD_CONST(arg=2, lineno=221)
          70	COMPARE_OP(arg=3, lineno=221)
          72	POP_JUMP_IF_FALSE(arg=102, lineno=221)
          74	LOAD_FAST(arg=5, lineno=222)
          76	LOAD_CONST(arg=2, lineno=222)
          78	BINARY_ADD(arg=None, lineno=222)
          80	UNARY_NEGATIVE(arg=None, lineno=222)
          82	RETURN_VALUE(arg=None, lineno=222)
          84	JUMP_FORWARD(arg=16, lineno=222)
>         86	LOAD_FAST(arg=6, lineno=223)
          88	LOAD_CONST(arg=2, lineno=223)
          90	COMPARE_OP(arg=3, lineno=223)
          92	POP_JUMP_IF_FALSE(arg=102, lineno=223)
          94	LOAD_FAST(arg=6, lineno=225)
          96	LOAD_FAST(arg=3, lineno=225)
          98	LOAD_FAST(arg=5, lineno=225)
         100	STORE_SUBSCR(arg=None, lineno=225)
>        102	LOAD_FAST(arg=4, lineno=226)
         104	LOAD_CONST(arg=2, lineno=226)
         106	INPLACE_ADD(arg=None, lineno=226)
         108	STORE_FAST(arg=4, lineno=226)
         110	LOAD_FAST(arg=5, lineno=227)
         112	LOAD_CONST(arg=2, lineno=227)
         114	INPLACE_ADD(arg=None, lineno=227)
         116	STORE_FAST(arg=5, lineno=227)
         118	JUMP_ABSOLUTE(arg=26, lineno=227)
>        120	LOAD_FAST(arg=5, lineno=228)
         122	RETURN_VALUE(arg=None, lineno=228)
DEBUG 2022-02-14 16:38:06,486 pending: deque([State(pc_initial=0 nstack_initial=0)])
DEBUG 2022-02-14 16:38:06,486 stack: []
DEBUG 2022-02-14 16:38:06,486 dispatch pc=0, inst=NOP(arg=None, lineno=205)
DEBUG 2022-02-14 16:38:06,486 stack []
DEBUG 2022-02-14 16:38:06,486 dispatch pc=2, inst=LOAD_FAST(arg=0, lineno=205)
DEBUG 2022-02-14 16:38:06,486 stack []
DEBUG 2022-02-14 16:38:06,486 dispatch pc=4, inst=LOAD_FAST(arg=2, lineno=205)
DEBUG 2022-02-14 16:38:06,486 stack ['$src_ndim2.0']
DEBUG 2022-02-14 16:38:06,486 dispatch pc=6, inst=COMPARE_OP(arg=4, lineno=205)
DEBUG 2022-02-14 16:38:06,486 stack ['$src_ndim2.0', '$dest_ndim4.1']
DEBUG 2022-02-14 16:38:06,486 dispatch pc=8, inst=POP_JUMP_IF_FALSE(arg=14, lineno=205)
DEBUG 2022-02-14 16:38:06,486 stack ['$6compare_op.2']
DEBUG 2022-02-14 16:38:06,486 end state. edges=[Edge(pc=10, stack=(), blockstack=(), npush=0), Edge(pc=14, stack=(), blockstack=(), npush=0)]
DEBUG 2022-02-14 16:38:06,486 pending: deque([State(pc_initial=10 nstack_initial=0), State(pc_initial=14 nstack_initial=0)])
DEBUG 2022-02-14 16:38:06,486 stack: []
DEBUG 2022-02-14 16:38:06,486 dispatch pc=10, inst=LOAD_CONST(arg=1, lineno=208)
DEBUG 2022-02-14 16:38:06,486 stack []
DEBUG 2022-02-14 16:38:06,486 dispatch pc=12, inst=RETURN_VALUE(arg=None, lineno=208)
DEBUG 2022-02-14 16:38:06,486 stack ['$const10.0']
DEBUG 2022-02-14 16:38:06,486 end state. edges=[]
DEBUG 2022-02-14 16:38:06,486 pending: deque([State(pc_initial=14 nstack_initial=0)])
DEBUG 2022-02-14 16:38:06,486 stack: []
DEBUG 2022-02-14 16:38:06,487 dispatch pc=14, inst=LOAD_CONST(arg=1, lineno=210)
DEBUG 2022-02-14 16:38:06,487 stack []
DEBUG 2022-02-14 16:38:06,487 dispatch pc=16, inst=STORE_FAST(arg=4, lineno=210)
DEBUG 2022-02-14 16:38:06,487 stack ['$const14.0']
DEBUG 2022-02-14 16:38:06,487 dispatch pc=18, inst=LOAD_FAST(arg=2, lineno=211)
DEBUG 2022-02-14 16:38:06,487 stack []
DEBUG 2022-02-14 16:38:06,487 dispatch pc=20, inst=LOAD_FAST(arg=0, lineno=211)
DEBUG 2022-02-14 16:38:06,487 stack ['$dest_ndim18.1']
DEBUG 2022-02-14 16:38:06,487 dispatch pc=22, inst=BINARY_SUBTRACT(arg=None, lineno=211)
DEBUG 2022-02-14 16:38:06,487 stack ['$dest_ndim18.1', '$src_ndim20.2']
DEBUG 2022-02-14 16:38:06,487 dispatch pc=24, inst=STORE_FAST(arg=5, lineno=211)
DEBUG 2022-02-14 16:38:06,487 stack ['$22binary_subtract.3']
DEBUG 2022-02-14 16:38:06,487 end state. edges=[Edge(pc=26, stack=(), blockstack=(), npush=0)]
DEBUG 2022-02-14 16:38:06,487 pending: deque([State(pc_initial=26 nstack_initial=0)])
DEBUG 2022-02-14 16:38:06,487 stack: []
DEBUG 2022-02-14 16:38:06,487 dispatch pc=26, inst=LOAD_FAST(arg=4, lineno=212)
DEBUG 2022-02-14 16:38:06,487 stack []
DEBUG 2022-02-14 16:38:06,487 dispatch pc=28, inst=LOAD_FAST(arg=0, lineno=212)
DEBUG 2022-02-14 16:38:06,487 stack ['$src_index26.0']
DEBUG 2022-02-14 16:38:06,487 dispatch pc=30, inst=COMPARE_OP(arg=0, lineno=212)
DEBUG 2022-02-14 16:38:06,487 stack ['$src_index26.0', '$src_ndim28.1']
DEBUG 2022-02-14 16:38:06,487 dispatch pc=32, inst=POP_JUMP_IF_FALSE(arg=120, lineno=212)
DEBUG 2022-02-14 16:38:06,487 stack ['$30compare_op.2']
DEBUG 2022-02-14 16:38:06,487 end state. edges=[Edge(pc=34, stack=(), blockstack=(), npush=0), Edge(pc=120, stack=(), blockstack=(), npush=0)]
DEBUG 2022-02-14 16:38:06,488 pending: deque([State(pc_initial=34 nstack_initial=0), State(pc_initial=120 nstack_initial=0)])
DEBUG 2022-02-14 16:38:06,488 stack: []
DEBUG 2022-02-14 16:38:06,488 dispatch pc=34, inst=LOAD_FAST(arg=1, lineno=213)
DEBUG 2022-02-14 16:38:06,488 stack []
DEBUG 2022-02-14 16:38:06,488 dispatch pc=36, inst=LOAD_FAST(arg=4, lineno=213)
DEBUG 2022-02-14 16:38:06,488 stack ['$src_shape34.0']
DEBUG 2022-02-14 16:38:06,488 dispatch pc=38, inst=BINARY_SUBSCR(arg=None, lineno=213)
DEBUG 2022-02-14 16:38:06,488 stack ['$src_shape34.0', '$src_index36.1']
DEBUG 2022-02-14 16:38:06,488 dispatch pc=40, inst=STORE_FAST(arg=6, lineno=213)
DEBUG 2022-02-14 16:38:06,488 stack ['$38binary_subscr.2']
DEBUG 2022-02-14 16:38:06,488 dispatch pc=42, inst=LOAD_FAST(arg=3, lineno=214)
DEBUG 2022-02-14 16:38:06,488 stack []
DEBUG 2022-02-14 16:38:06,488 dispatch pc=44, inst=LOAD_FAST(arg=5, lineno=214)
DEBUG 2022-02-14 16:38:06,488 stack ['$dest_shape42.3']
DEBUG 2022-02-14 16:38:06,488 dispatch pc=46, inst=BINARY_SUBSCR(arg=None, lineno=214)
DEBUG 2022-02-14 16:38:06,488 stack ['$dest_shape42.3', '$dest_index44.4']
DEBUG 2022-02-14 16:38:06,488 dispatch pc=48, inst=STORE_FAST(arg=7, lineno=214)
DEBUG 2022-02-14 16:38:06,488 stack ['$46binary_subscr.5']
DEBUG 2022-02-14 16:38:06,488 dispatch pc=50, inst=LOAD_FAST(arg=7, lineno=217)
DEBUG 2022-02-14 16:38:06,488 stack []
DEBUG 2022-02-14 16:38:06,488 dispatch pc=52, inst=LOAD_CONST(arg=2, lineno=217)
DEBUG 2022-02-14 16:38:06,488 stack ['$dest_dim_size50.6']
DEBUG 2022-02-14 16:38:06,488 dispatch pc=54, inst=COMPARE_OP(arg=3, lineno=217)
DEBUG 2022-02-14 16:38:06,488 stack ['$dest_dim_size50.6', '$const52.7']
DEBUG 2022-02-14 16:38:06,488 dispatch pc=56, inst=POP_JUMP_IF_FALSE(arg=86, lineno=217)
DEBUG 2022-02-14 16:38:06,488 stack ['$54compare_op.8']
DEBUG 2022-02-14 16:38:06,489 end state. edges=[Edge(pc=58, stack=(), blockstack=(), npush=0), Edge(pc=86, stack=(), blockstack=(), npush=0)]
DEBUG 2022-02-14 16:38:06,489 pending: deque([State(pc_initial=120 nstack_initial=0), State(pc_initial=58 nstack_initial=0), State(pc_initial=86 nstack_initial=0)])
DEBUG 2022-02-14 16:38:06,489 stack: []
DEBUG 2022-02-14 16:38:06,489 dispatch pc=120, inst=LOAD_FAST(arg=5, lineno=228)
DEBUG 2022-02-14 16:38:06,489 stack []
DEBUG 2022-02-14 16:38:06,489 dispatch pc=122, inst=RETURN_VALUE(arg=None, lineno=228)
DEBUG 2022-02-14 16:38:06,489 stack ['$dest_index120.0']
DEBUG 2022-02-14 16:38:06,489 end state. edges=[]
DEBUG 2022-02-14 16:38:06,489 pending: deque([State(pc_initial=58 nstack_initial=0), State(pc_initial=86 nstack_initial=0)])
DEBUG 2022-02-14 16:38:06,489 stack: []
DEBUG 2022-02-14 16:38:06,489 dispatch pc=58, inst=LOAD_FAST(arg=6, lineno=221)
DEBUG 2022-02-14 16:38:06,489 stack []
DEBUG 2022-02-14 16:38:06,489 dispatch pc=60, inst=LOAD_FAST(arg=7, lineno=221)
DEBUG 2022-02-14 16:38:06,489 stack ['$src_dim_size58.0']
DEBUG 2022-02-14 16:38:06,489 dispatch pc=62, inst=COMPARE_OP(arg=3, lineno=221)
DEBUG 2022-02-14 16:38:06,489 stack ['$src_dim_size58.0', '$dest_dim_size60.1']
DEBUG 2022-02-14 16:38:06,489 dispatch pc=64, inst=POP_JUMP_IF_FALSE(arg=102, lineno=221)
DEBUG 2022-02-14 16:38:06,489 stack ['$62compare_op.2']
DEBUG 2022-02-14 16:38:06,489 end state. edges=[Edge(pc=66, stack=(), blockstack=(), npush=0), Edge(pc=102, stack=(), blockstack=(), npush=0)]
DEBUG 2022-02-14 16:38:06,489 pending: deque([State(pc_initial=86 nstack_initial=0), State(pc_initial=66 nstack_initial=0), State(pc_initial=102 nstack_initial=0)])
DEBUG 2022-02-14 16:38:06,489 stack: []
DEBUG 2022-02-14 16:38:06,489 dispatch pc=86, inst=LOAD_FAST(arg=6, lineno=223)
DEBUG 2022-02-14 16:38:06,489 stack []
DEBUG 2022-02-14 16:38:06,489 dispatch pc=88, inst=LOAD_CONST(arg=2, lineno=223)
DEBUG 2022-02-14 16:38:06,489 stack ['$src_dim_size86.0']
DEBUG 2022-02-14 16:38:06,490 dispatch pc=90, inst=COMPARE_OP(arg=3, lineno=223)
DEBUG 2022-02-14 16:38:06,490 stack ['$src_dim_size86.0', '$const88.1']
DEBUG 2022-02-14 16:38:06,490 dispatch pc=92, inst=POP_JUMP_IF_FALSE(arg=102, lineno=223)
DEBUG 2022-02-14 16:38:06,490 stack ['$90compare_op.2']
DEBUG 2022-02-14 16:38:06,490 end state. edges=[Edge(pc=94, stack=(), blockstack=(), npush=0), Edge(pc=102, stack=(), blockstack=(), npush=0)]
DEBUG 2022-02-14 16:38:06,490 pending: deque([State(pc_initial=66 nstack_initial=0), State(pc_initial=102 nstack_initial=0), State(pc_initial=94 nstack_initial=0), State(pc_initial=102 nstack_initial=0)])
DEBUG 2022-02-14 16:38:06,490 stack: []
DEBUG 2022-02-14 16:38:06,490 dispatch pc=66, inst=LOAD_FAST(arg=6, lineno=221)
DEBUG 2022-02-14 16:38:06,490 stack []
DEBUG 2022-02-14 16:38:06,490 dispatch pc=68, inst=LOAD_CONST(arg=2, lineno=221)
DEBUG 2022-02-14 16:38:06,490 stack ['$src_dim_size66.0']
DEBUG 2022-02-14 16:38:06,490 dispatch pc=70, inst=COMPARE_OP(arg=3, lineno=221)
DEBUG 2022-02-14 16:38:06,490 stack ['$src_dim_size66.0', '$const68.1']
DEBUG 2022-02-14 16:38:06,490 dispatch pc=72, inst=POP_JUMP_IF_FALSE(arg=102, lineno=221)
DEBUG 2022-02-14 16:38:06,490 stack ['$70compare_op.2']
DEBUG 2022-02-14 16:38:06,490 end state. edges=[Edge(pc=74, stack=(), blockstack=(), npush=0), Edge(pc=102, stack=(), blockstack=(), npush=0)]
DEBUG 2022-02-14 16:38:06,490 pending: deque([State(pc_initial=102 nstack_initial=0), State(pc_initial=94 nstack_initial=0), State(pc_initial=102 nstack_initial=0), State(pc_initial=74 nstack_initial=0), State(pc_initial=102 nstack_initial=0)])
DEBUG 2022-02-14 16:38:06,490 stack: []
DEBUG 2022-02-14 16:38:06,490 dispatch pc=102, inst=LOAD_FAST(arg=4, lineno=226)
DEBUG 2022-02-14 16:38:06,490 stack []
DEBUG 2022-02-14 16:38:06,490 dispatch pc=104, inst=LOAD_CONST(arg=2, lineno=226)
DEBUG 2022-02-14 16:38:06,490 stack ['$src_index102.0']
DEBUG 2022-02-14 16:38:06,490 dispatch pc=106, inst=INPLACE_ADD(arg=None, lineno=226)
DEBUG 2022-02-14 16:38:06,491 stack ['$src_index102.0', '$const104.1']
DEBUG 2022-02-14 16:38:06,491 dispatch pc=108, inst=STORE_FAST(arg=4, lineno=226)
DEBUG 2022-02-14 16:38:06,491 stack ['$106inplace_add.2']
DEBUG 2022-02-14 16:38:06,491 dispatch pc=110, inst=LOAD_FAST(arg=5, lineno=227)
DEBUG 2022-02-14 16:38:06,491 stack []
DEBUG 2022-02-14 16:38:06,491 dispatch pc=112, inst=LOAD_CONST(arg=2, lineno=227)
DEBUG 2022-02-14 16:38:06,491 stack ['$dest_index110.3']
DEBUG 2022-02-14 16:38:06,491 dispatch pc=114, inst=INPLACE_ADD(arg=None, lineno=227)
DEBUG 2022-02-14 16:38:06,491 stack ['$dest_index110.3', '$const112.4']
DEBUG 2022-02-14 16:38:06,491 dispatch pc=116, inst=STORE_FAST(arg=5, lineno=227)
DEBUG 2022-02-14 16:38:06,491 stack ['$114inplace_add.5']
DEBUG 2022-02-14 16:38:06,491 dispatch pc=118, inst=JUMP_ABSOLUTE(arg=26, lineno=227)
DEBUG 2022-02-14 16:38:06,491 stack []
DEBUG 2022-02-14 16:38:06,491 end state. edges=[Edge(pc=26, stack=(), blockstack=(), npush=0)]
DEBUG 2022-02-14 16:38:06,492 pending: deque([State(pc_initial=94 nstack_initial=0), State(pc_initial=102 nstack_initial=0), State(pc_initial=74 nstack_initial=0), State(pc_initial=102 nstack_initial=0), State(pc_initial=26 nstack_initial=0)])
DEBUG 2022-02-14 16:38:06,492 stack: []
DEBUG 2022-02-14 16:38:06,492 dispatch pc=94, inst=LOAD_FAST(arg=6, lineno=225)
DEBUG 2022-02-14 16:38:06,492 stack []
DEBUG 2022-02-14 16:38:06,492 dispatch pc=96, inst=LOAD_FAST(arg=3, lineno=225)
DEBUG 2022-02-14 16:38:06,492 stack ['$src_dim_size94.0']
DEBUG 2022-02-14 16:38:06,492 dispatch pc=98, inst=LOAD_FAST(arg=5, lineno=225)
DEBUG 2022-02-14 16:38:06,492 stack ['$src_dim_size94.0', '$dest_shape96.1']
DEBUG 2022-02-14 16:38:06,492 dispatch pc=100, inst=STORE_SUBSCR(arg=None, lineno=225)
DEBUG 2022-02-14 16:38:06,492 stack ['$src_dim_size94.0', '$dest_shape96.1', '$dest_index98.2']
DEBUG 2022-02-14 16:38:06,492 end state. edges=[Edge(pc=102, stack=(), blockstack=(), npush=0)]
DEBUG 2022-02-14 16:38:06,492 pending: deque([State(pc_initial=102 nstack_initial=0), State(pc_initial=74 nstack_initial=0), State(pc_initial=102 nstack_initial=0), State(pc_initial=26 nstack_initial=0), State(pc_initial=102 nstack_initial=0)])
DEBUG 2022-02-14 16:38:06,492 pending: deque([State(pc_initial=74 nstack_initial=0), State(pc_initial=102 nstack_initial=0), State(pc_initial=26 nstack_initial=0), State(pc_initial=102 nstack_initial=0)])
DEBUG 2022-02-14 16:38:06,492 stack: []
DEBUG 2022-02-14 16:38:06,492 dispatch pc=74, inst=LOAD_FAST(arg=5, lineno=222)
DEBUG 2022-02-14 16:38:06,492 stack []
DEBUG 2022-02-14 16:38:06,492 dispatch pc=76, inst=LOAD_CONST(arg=2, lineno=222)
DEBUG 2022-02-14 16:38:06,492 stack ['$dest_index74.0']
DEBUG 2022-02-14 16:38:06,492 dispatch pc=78, inst=BINARY_ADD(arg=None, lineno=222)
DEBUG 2022-02-14 16:38:06,493 stack ['$dest_index74.0', '$const76.1']
DEBUG 2022-02-14 16:38:06,493 dispatch pc=80, inst=UNARY_NEGATIVE(arg=None, lineno=222)
DEBUG 2022-02-14 16:38:06,493 stack ['$78binary_add.2']
DEBUG 2022-02-14 16:38:06,493 dispatch pc=82, inst=RETURN_VALUE(arg=None, lineno=222)
DEBUG 2022-02-14 16:38:06,493 stack ['$80unary_negative.3']
DEBUG 2022-02-14 16:38:06,493 end state. edges=[]
DEBUG 2022-02-14 16:38:06,493 pending: deque([State(pc_initial=102 nstack_initial=0), State(pc_initial=26 nstack_initial=0), State(pc_initial=102 nstack_initial=0)])
DEBUG 2022-02-14 16:38:06,493 pending: deque([State(pc_initial=26 nstack_initial=0), State(pc_initial=102 nstack_initial=0)])
DEBUG 2022-02-14 16:38:06,493 pending: deque([State(pc_initial=102 nstack_initial=0)])
DEBUG 2022-02-14 16:38:06,493 -------------------------Prune PHIs-------------------------
DEBUG 2022-02-14 16:38:06,493 Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=10 nstack_initial=0): set(),
             State(pc_initial=14 nstack_initial=0): set(),
             State(pc_initial=26 nstack_initial=0): set(),
             State(pc_initial=34 nstack_initial=0): set(),
             State(pc_initial=58 nstack_initial=0): set(),
             State(pc_initial=66 nstack_initial=0): set(),
             State(pc_initial=74 nstack_initial=0): set(),
             State(pc_initial=86 nstack_initial=0): set(),
             State(pc_initial=94 nstack_initial=0): set(),
             State(pc_initial=102 nstack_initial=0): set(),
             State(pc_initial=120 nstack_initial=0): set()})
DEBUG 2022-02-14 16:38:06,493 defmap: {}
DEBUG 2022-02-14 16:38:06,493 phismap: defaultdict(<class 'set'>, {})
DEBUG 2022-02-14 16:38:06,493 changing phismap: defaultdict(<class 'set'>, {})
DEBUG 2022-02-14 16:38:06,493 keep phismap: {}
DEBUG 2022-02-14 16:38:06,494 new_out: defaultdict(<class 'dict'>, {})
DEBUG 2022-02-14 16:38:06,494 ----------------------DONE Prune PHIs-----------------------
DEBUG 2022-02-14 16:38:06,494 block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$src_ndim2.0'}), (4, {'res': '$dest_ndim4.1'}), (6, {'lhs': '$src_ndim2.0', 'rhs': '$dest_ndim4.1', 'res': '$6compare_op.2'}), (8, {'pred': '$6compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={10: (), 14: ()})
DEBUG 2022-02-14 16:38:06,494 block_infos State(pc_initial=10 nstack_initial=0):
AdaptBlockInfo(insts=((10, {'res': '$const10.0'}), (12, {'retval': '$const10.0', 'castval': '$12return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG 2022-02-14 16:38:06,494 block_infos State(pc_initial=14 nstack_initial=0):
AdaptBlockInfo(insts=((14, {'res': '$const14.0'}), (16, {'value': '$const14.0'}), (18, {'res': '$dest_ndim18.1'}), (20, {'res': '$src_ndim20.2'}), (22, {'lhs': '$dest_ndim18.1', 'rhs': '$src_ndim20.2', 'res': '$22binary_subtract.3'}), (24, {'value': '$22binary_subtract.3'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={26: ()})
DEBUG 2022-02-14 16:38:06,494 block_infos State(pc_initial=26 nstack_initial=0):
AdaptBlockInfo(insts=((26, {'res': '$src_index26.0'}), (28, {'res': '$src_ndim28.1'}), (30, {'lhs': '$src_index26.0', 'rhs': '$src_ndim28.1', 'res': '$30compare_op.2'}), (32, {'pred': '$30compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={34: (), 120: ()})
DEBUG 2022-02-14 16:38:06,494 block_infos State(pc_initial=34 nstack_initial=0):
AdaptBlockInfo(insts=((34, {'res': '$src_shape34.0'}), (36, {'res': '$src_index36.1'}), (38, {'index': '$src_index36.1', 'target': '$src_shape34.0', 'res': '$38binary_subscr.2'}), (40, {'value': '$38binary_subscr.2'}), (42, {'res': '$dest_shape42.3'}), (44, {'res': '$dest_index44.4'}), (46, {'index': '$dest_index44.4', 'target': '$dest_shape42.3', 'res': '$46binary_subscr.5'}), (48, {'value': '$46binary_subscr.5'}), (50, {'res': '$dest_dim_size50.6'}), (52, {'res': '$const52.7'}), (54, {'lhs': '$dest_dim_size50.6', 'rhs': '$const52.7', 'res': '$54compare_op.8'}), (56, {'pred': '$54compare_op.8'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={58: (), 86: ()})
DEBUG 2022-02-14 16:38:06,494 block_infos State(pc_initial=58 nstack_initial=0):
AdaptBlockInfo(insts=((58, {'res': '$src_dim_size58.0'}), (60, {'res': '$dest_dim_size60.1'}), (62, {'lhs': '$src_dim_size58.0', 'rhs': '$dest_dim_size60.1', 'res': '$62compare_op.2'}), (64, {'pred': '$62compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={66: (), 102: ()})
DEBUG 2022-02-14 16:38:06,494 block_infos State(pc_initial=66 nstack_initial=0):
AdaptBlockInfo(insts=((66, {'res': '$src_dim_size66.0'}), (68, {'res': '$const68.1'}), (70, {'lhs': '$src_dim_size66.0', 'rhs': '$const68.1', 'res': '$70compare_op.2'}), (72, {'pred': '$70compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={74: (), 102: ()})
DEBUG 2022-02-14 16:38:06,494 block_infos State(pc_initial=74 nstack_initial=0):
AdaptBlockInfo(insts=((74, {'res': '$dest_index74.0'}), (76, {'res': '$const76.1'}), (78, {'lhs': '$dest_index74.0', 'rhs': '$const76.1', 'res': '$78binary_add.2'}), (80, {'value': '$78binary_add.2', 'res': '$80unary_negative.3'}), (82, {'retval': '$80unary_negative.3', 'castval': '$82return_value.4'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG 2022-02-14 16:38:06,494 block_infos State(pc_initial=86 nstack_initial=0):
AdaptBlockInfo(insts=((86, {'res': '$src_dim_size86.0'}), (88, {'res': '$const88.1'}), (90, {'lhs': '$src_dim_size86.0', 'rhs': '$const88.1', 'res': '$90compare_op.2'}), (92, {'pred': '$90compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={94: (), 102: ()})
DEBUG 2022-02-14 16:38:06,494 block_infos State(pc_initial=94 nstack_initial=0):
AdaptBlockInfo(insts=((94, {'res': '$src_dim_size94.0'}), (96, {'res': '$dest_shape96.1'}), (98, {'res': '$dest_index98.2'}), (100, {'target': '$dest_shape96.1', 'index': '$dest_index98.2', 'value': '$src_dim_size94.0'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={102: ()})
DEBUG 2022-02-14 16:38:06,494 block_infos State(pc_initial=102 nstack_initial=0):
AdaptBlockInfo(insts=((102, {'res': '$src_index102.0'}), (104, {'res': '$const104.1'}), (106, {'lhs': '$src_index102.0', 'rhs': '$const104.1', 'res': '$106inplace_add.2'}), (108, {'value': '$106inplace_add.2'}), (110, {'res': '$dest_index110.3'}), (112, {'res': '$const112.4'}), (114, {'lhs': '$dest_index110.3', 'rhs': '$const112.4', 'res': '$114inplace_add.5'}), (116, {'value': '$114inplace_add.5'}), (118, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={26: ()})
DEBUG 2022-02-14 16:38:06,494 block_infos State(pc_initial=120 nstack_initial=0):
AdaptBlockInfo(insts=((120, {'res': '$dest_index120.0'}), (122, {'retval': '$dest_index120.0', 'castval': '$122return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG 2022-02-14 16:38:06,496 label 0:
    src_ndim = arg(0, name=src_ndim)         ['src_ndim']
    src_shape = arg(1, name=src_shape)       ['src_shape']
    dest_ndim = arg(2, name=dest_ndim)       ['dest_ndim']
    dest_shape = arg(3, name=dest_shape)     ['dest_shape']
    $6compare_op.2 = src_ndim > dest_ndim    ['$6compare_op.2', 'dest_ndim', 'src_ndim']
    bool8 = global(bool: <class 'bool'>)     ['bool8']
    $8pred = call bool8($6compare_op.2, func=bool8, args=(Var($6compare_op.2, npyimpl.py:205),), kws=(), vararg=None, target=None) ['$6compare_op.2', '$8pred', 'bool8']
    branch $8pred, 10, 14                    ['$8pred']
label 10:
    $const10.0 = const(int, 0)               ['$const10.0']
    $12return_value.1 = cast(value=$const10.0) ['$12return_value.1', '$const10.0']
    return $12return_value.1                 ['$12return_value.1']
label 14:
    src_index = const(int, 0)                ['src_index']
    dest_index = dest_ndim - src_ndim        ['dest_index', 'dest_ndim', 'src_ndim']
    jump 26                                  []
label 26:
    $30compare_op.2 = src_index < src_ndim   ['$30compare_op.2', 'src_index', 'src_ndim']
    bool32 = global(bool: <class 'bool'>)    ['bool32']
    $32pred = call bool32($30compare_op.2, func=bool32, args=(Var($30compare_op.2, npyimpl.py:212),), kws=(), vararg=None, target=None) ['$30compare_op.2', '$32pred', 'bool32']
    branch $32pred, 34, 120                  ['$32pred']
label 34:
    src_dim_size = getitem(value=src_shape, index=src_index, fn=<built-in function getitem>) ['src_dim_size', 'src_index', 'src_shape']
    dest_dim_size = getitem(value=dest_shape, index=dest_index, fn=<built-in function getitem>) ['dest_dim_size', 'dest_index', 'dest_shape']
    $const52.7 = const(int, 1)               ['$const52.7']
    $54compare_op.8 = dest_dim_size != $const52.7 ['$54compare_op.8', '$const52.7', 'dest_dim_size']
    bool56 = global(bool: <class 'bool'>)    ['bool56']
    $56pred = call bool56($54compare_op.8, func=bool56, args=(Var($54compare_op.8, npyimpl.py:217),), kws=(), vararg=None, target=None) ['$54compare_op.8', '$56pred', 'bool56']
    branch $56pred, 58, 86                   ['$56pred']
label 58:
    $62compare_op.2 = src_dim_size != dest_dim_size ['$62compare_op.2', 'dest_dim_size', 'src_dim_size']
    bool64 = global(bool: <class 'bool'>)    ['bool64']
    $64pred = call bool64($62compare_op.2, func=bool64, args=(Var($62compare_op.2, npyimpl.py:221),), kws=(), vararg=None, target=None) ['$62compare_op.2', '$64pred', 'bool64']
    branch $64pred, 66, 102                  ['$64pred']
label 66:
    $const68.1 = const(int, 1)               ['$const68.1']
    $70compare_op.2 = src_dim_size != $const68.1 ['$70compare_op.2', '$const68.1', 'src_dim_size']
    bool72 = global(bool: <class 'bool'>)    ['bool72']
    $72pred = call bool72($70compare_op.2, func=bool72, args=(Var($70compare_op.2, npyimpl.py:221),), kws=(), vararg=None, target=None) ['$70compare_op.2', '$72pred', 'bool72']
    branch $72pred, 74, 102                  ['$72pred']
label 74:
    $const76.1 = const(int, 1)               ['$const76.1']
    $78binary_add.2 = dest_index + $const76.1 ['$78binary_add.2', '$const76.1', 'dest_index']
    $80unary_negative.3 = unary(fn=<built-in function neg>, value=$78binary_add.2) ['$78binary_add.2', '$80unary_negative.3']
    $82return_value.4 = cast(value=$80unary_negative.3) ['$80unary_negative.3', '$82return_value.4']
    return $82return_value.4                 ['$82return_value.4']
label 86:
    $const88.1 = const(int, 1)               ['$const88.1']
    $90compare_op.2 = src_dim_size != $const88.1 ['$90compare_op.2', '$const88.1', 'src_dim_size']
    bool92 = global(bool: <class 'bool'>)    ['bool92']
    $92pred = call bool92($90compare_op.2, func=bool92, args=(Var($90compare_op.2, npyimpl.py:223),), kws=(), vararg=None, target=None) ['$90compare_op.2', '$92pred', 'bool92']
    branch $92pred, 94, 102                  ['$92pred']
label 94:
    dest_shape[dest_index] = src_dim_size    ['dest_index', 'dest_shape', 'src_dim_size']
    jump 102                                 []
label 102:
    $const104.1 = const(int, 1)              ['$const104.1']
    $106inplace_add.2 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=src_index, rhs=$const104.1, static_lhs=Undefined, static_rhs=Undefined) ['$106inplace_add.2', '$const104.1', 'src_index']
    src_index = $106inplace_add.2            ['$106inplace_add.2', 'src_index']
    $const112.4 = const(int, 1)              ['$const112.4']
    $114inplace_add.5 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=dest_index, rhs=$const112.4, static_lhs=Undefined, static_rhs=Undefined) ['$114inplace_add.5', '$const112.4', 'dest_index']
    dest_index = $114inplace_add.5           ['$114inplace_add.5', 'dest_index']
    jump 26                                  []
label 120:
    $122return_value.1 = cast(value=dest_index) ['$122return_value.1', 'dest_index']
    return $122return_value.1                ['$122return_value.1']

DEBUG 2022-02-14 16:38:06,501 ==== SSA block analysis pass on 0
DEBUG 2022-02-14 16:38:06,502 Running <numba.core.ssa._GatherDefsHandler object at 0x7fa046337d30>
DEBUG 2022-02-14 16:38:06,502 on stmt: src_ndim = arg(0, name=src_ndim)
DEBUG 2022-02-14 16:38:06,502 on stmt: src_shape = arg(1, name=src_shape)
DEBUG 2022-02-14 16:38:06,502 on stmt: dest_ndim = arg(2, name=dest_ndim)
DEBUG 2022-02-14 16:38:06,502 on stmt: dest_shape = arg(3, name=dest_shape)
DEBUG 2022-02-14 16:38:06,502 on stmt: $6compare_op.2 = src_ndim > dest_ndim
DEBUG 2022-02-14 16:38:06,502 on stmt: bool8 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:38:06,502 on stmt: $8pred = call bool8($6compare_op.2, func=bool8, args=(Var($6compare_op.2, npyimpl.py:205),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:06,502 on stmt: branch $8pred, 10, 14
DEBUG 2022-02-14 16:38:06,502 ==== SSA block analysis pass on 10
DEBUG 2022-02-14 16:38:06,502 Running <numba.core.ssa._GatherDefsHandler object at 0x7fa046337d30>
DEBUG 2022-02-14 16:38:06,502 on stmt: $const10.0 = const(int, 0)
DEBUG 2022-02-14 16:38:06,502 on stmt: $12return_value.1 = cast(value=$const10.0)
DEBUG 2022-02-14 16:38:06,502 on stmt: return $12return_value.1
DEBUG 2022-02-14 16:38:06,502 ==== SSA block analysis pass on 14
DEBUG 2022-02-14 16:38:06,502 Running <numba.core.ssa._GatherDefsHandler object at 0x7fa046337d30>
DEBUG 2022-02-14 16:38:06,502 on stmt: src_index = const(int, 0)
DEBUG 2022-02-14 16:38:06,502 on stmt: dest_index = dest_ndim - src_ndim
DEBUG 2022-02-14 16:38:06,502 on stmt: jump 26
DEBUG 2022-02-14 16:38:06,502 ==== SSA block analysis pass on 26
DEBUG 2022-02-14 16:38:06,502 Running <numba.core.ssa._GatherDefsHandler object at 0x7fa046337d30>
DEBUG 2022-02-14 16:38:06,502 on stmt: $30compare_op.2 = src_index < src_ndim
DEBUG 2022-02-14 16:38:06,502 on stmt: bool32 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:38:06,502 on stmt: $32pred = call bool32($30compare_op.2, func=bool32, args=(Var($30compare_op.2, npyimpl.py:212),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:06,503 on stmt: branch $32pred, 34, 120
DEBUG 2022-02-14 16:38:06,503 ==== SSA block analysis pass on 34
DEBUG 2022-02-14 16:38:06,503 Running <numba.core.ssa._GatherDefsHandler object at 0x7fa046337d30>
DEBUG 2022-02-14 16:38:06,503 on stmt: src_dim_size = getitem(value=src_shape, index=src_index, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:06,503 on stmt: dest_dim_size = getitem(value=dest_shape, index=dest_index, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:06,503 on stmt: $const52.7 = const(int, 1)
DEBUG 2022-02-14 16:38:06,503 on stmt: $54compare_op.8 = dest_dim_size != $const52.7
DEBUG 2022-02-14 16:38:06,503 on stmt: bool56 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:38:06,503 on stmt: $56pred = call bool56($54compare_op.8, func=bool56, args=(Var($54compare_op.8, npyimpl.py:217),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:06,503 on stmt: branch $56pred, 58, 86
DEBUG 2022-02-14 16:38:06,503 ==== SSA block analysis pass on 58
DEBUG 2022-02-14 16:38:06,503 Running <numba.core.ssa._GatherDefsHandler object at 0x7fa046337d30>
DEBUG 2022-02-14 16:38:06,503 on stmt: $62compare_op.2 = src_dim_size != dest_dim_size
DEBUG 2022-02-14 16:38:06,503 on stmt: bool64 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:38:06,503 on stmt: $64pred = call bool64($62compare_op.2, func=bool64, args=(Var($62compare_op.2, npyimpl.py:221),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:06,503 on stmt: branch $64pred, 66, 102
DEBUG 2022-02-14 16:38:06,503 ==== SSA block analysis pass on 66
DEBUG 2022-02-14 16:38:06,503 Running <numba.core.ssa._GatherDefsHandler object at 0x7fa046337d30>
DEBUG 2022-02-14 16:38:06,503 on stmt: $const68.1 = const(int, 1)
DEBUG 2022-02-14 16:38:06,503 on stmt: $70compare_op.2 = src_dim_size != $const68.1
DEBUG 2022-02-14 16:38:06,503 on stmt: bool72 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:38:06,503 on stmt: $72pred = call bool72($70compare_op.2, func=bool72, args=(Var($70compare_op.2, npyimpl.py:221),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:06,504 on stmt: branch $72pred, 74, 102
DEBUG 2022-02-14 16:38:06,504 ==== SSA block analysis pass on 74
DEBUG 2022-02-14 16:38:06,504 Running <numba.core.ssa._GatherDefsHandler object at 0x7fa046337d30>
DEBUG 2022-02-14 16:38:06,504 on stmt: $const76.1 = const(int, 1)
DEBUG 2022-02-14 16:38:06,504 on stmt: $78binary_add.2 = dest_index + $const76.1
DEBUG 2022-02-14 16:38:06,504 on stmt: $80unary_negative.3 = unary(fn=<built-in function neg>, value=$78binary_add.2)
DEBUG 2022-02-14 16:38:06,504 on stmt: $82return_value.4 = cast(value=$80unary_negative.3)
DEBUG 2022-02-14 16:38:06,504 on stmt: return $82return_value.4
DEBUG 2022-02-14 16:38:06,504 ==== SSA block analysis pass on 86
DEBUG 2022-02-14 16:38:06,504 Running <numba.core.ssa._GatherDefsHandler object at 0x7fa046337d30>
DEBUG 2022-02-14 16:38:06,504 on stmt: $const88.1 = const(int, 1)
DEBUG 2022-02-14 16:38:06,504 on stmt: $90compare_op.2 = src_dim_size != $const88.1
DEBUG 2022-02-14 16:38:06,504 on stmt: bool92 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:38:06,504 on stmt: $92pred = call bool92($90compare_op.2, func=bool92, args=(Var($90compare_op.2, npyimpl.py:223),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:06,504 on stmt: branch $92pred, 94, 102
DEBUG 2022-02-14 16:38:06,504 ==== SSA block analysis pass on 94
DEBUG 2022-02-14 16:38:06,504 Running <numba.core.ssa._GatherDefsHandler object at 0x7fa046337d30>
DEBUG 2022-02-14 16:38:06,504 on stmt: dest_shape[dest_index] = src_dim_size
DEBUG 2022-02-14 16:38:06,504 on stmt: jump 102
DEBUG 2022-02-14 16:38:06,504 ==== SSA block analysis pass on 102
DEBUG 2022-02-14 16:38:06,505 Running <numba.core.ssa._GatherDefsHandler object at 0x7fa046337d30>
DEBUG 2022-02-14 16:38:06,505 on stmt: $const104.1 = const(int, 1)
DEBUG 2022-02-14 16:38:06,505 on stmt: $106inplace_add.2 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=src_index, rhs=$const104.1, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:38:06,505 on stmt: src_index = $106inplace_add.2
DEBUG 2022-02-14 16:38:06,505 on stmt: $const112.4 = const(int, 1)
DEBUG 2022-02-14 16:38:06,505 on stmt: $114inplace_add.5 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=dest_index, rhs=$const112.4, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:38:06,505 on stmt: dest_index = $114inplace_add.5
DEBUG 2022-02-14 16:38:06,505 on stmt: jump 26
DEBUG 2022-02-14 16:38:06,505 ==== SSA block analysis pass on 120
DEBUG 2022-02-14 16:38:06,505 Running <numba.core.ssa._GatherDefsHandler object at 0x7fa046337d30>
DEBUG 2022-02-14 16:38:06,505 on stmt: $122return_value.1 = cast(value=dest_index)
DEBUG 2022-02-14 16:38:06,505 on stmt: return $122return_value.1
DEBUG 2022-02-14 16:38:06,505 defs defaultdict(<class 'list'>,
            {'$106inplace_add.2': [<numba.core.ir.Assign object at 0x7fa046335b80>],
             '$114inplace_add.5': [<numba.core.ir.Assign object at 0x7fa0463370a0>],
             '$122return_value.1': [<numba.core.ir.Assign object at 0x7fa046337490>],
             '$12return_value.1': [<numba.core.ir.Assign object at 0x7fa046e4ce50>],
             '$30compare_op.2': [<numba.core.ir.Assign object at 0x7fa046f915e0>],
             '$32pred': [<numba.core.ir.Assign object at 0x7fa046f91970>],
             '$54compare_op.8': [<numba.core.ir.Assign object at 0x7fa04632f4c0>],
             '$56pred': [<numba.core.ir.Assign object at 0x7fa04632f730>],
             '$62compare_op.2': [<numba.core.ir.Assign object at 0x7fa04632f9a0>],
             '$64pred': [<numba.core.ir.Assign object at 0x7fa04632fc10>],
             '$6compare_op.2': [<numba.core.ir.Assign object at 0x7fa046e33940>],
             '$70compare_op.2': [<numba.core.ir.Assign object at 0x7fa046331100>],
             '$72pred': [<numba.core.ir.Assign object at 0x7fa046331370>],
             '$78binary_add.2': [<numba.core.ir.Assign object at 0x7fa046331880>],
             '$80unary_negative.3': [<numba.core.ir.Assign object at 0x7fa0463319d0>],
             '$82return_value.4': [<numba.core.ir.Assign object at 0x7fa046331b50>],
             '$8pred': [<numba.core.ir.Assign object at 0x7fa046e336d0>],
             '$90compare_op.2': [<numba.core.ir.Assign object at 0x7fa046331fa0>],
             '$92pred': [<numba.core.ir.Assign object at 0x7fa046335250>],
             '$const10.0': [<numba.core.ir.Assign object at 0x7fa046e332e0>],
             '$const104.1': [<numba.core.ir.Assign object at 0x7fa0463359d0>],
             '$const112.4': [<numba.core.ir.Assign object at 0x7fa046335eb0>],
             '$const52.7': [<numba.core.ir.Assign object at 0x7fa04632f310>],
             '$const68.1': [<numba.core.ir.Assign object at 0x7fa04632ff10>],
             '$const76.1': [<numba.core.ir.Assign object at 0x7fa0463316d0>],
             '$const88.1': [<numba.core.ir.Assign object at 0x7fa046331df0>],
             'bool32': [<numba.core.ir.Assign object at 0x7fa046f917c0>],
             'bool56': [<numba.core.ir.Assign object at 0x7fa04632f610>],
             'bool64': [<numba.core.ir.Assign object at 0x7fa04632faf0>],
             'bool72': [<numba.core.ir.Assign object at 0x7fa046331250>],
             'bool8': [<numba.core.ir.Assign object at 0x7fa046e33520>],
             'bool92': [<numba.core.ir.Assign object at 0x7fa046335130>],
             'dest_dim_size': [<numba.core.ir.Assign object at 0x7fa046f91250>],
             'dest_index': [<numba.core.ir.Assign object at 0x7fa046e35370>,
                            <numba.core.ir.Assign object at 0x7fa046337160>],
             'dest_ndim': [<numba.core.ir.Assign object at 0x7fa046fa55b0>],
             'dest_shape': [<numba.core.ir.Assign object at 0x7fa046f9be80>],
             'src_dim_size': [<numba.core.ir.Assign object at 0x7fa046f91dc0>],
             'src_index': [<numba.core.ir.Assign object at 0x7fa046e4cc10>,
                           <numba.core.ir.Assign object at 0x7fa046335c40>],
             'src_ndim': [<numba.core.ir.Assign object at 0x7fa046fa5e20>],
             'src_shape': [<numba.core.ir.Assign object at 0x7fa046fa56d0>]})
DEBUG 2022-02-14 16:38:06,505 SSA violators {'src_index', 'dest_index'}
DEBUG 2022-02-14 16:38:06,505 Fix SSA violator on var src_index
DEBUG 2022-02-14 16:38:06,505 ==== SSA block rewrite pass on 0
DEBUG 2022-02-14 16:38:06,506 Running <numba.core.ssa._FreshVarHandler object at 0x7fa046337be0>
DEBUG 2022-02-14 16:38:06,506 on stmt: src_ndim = arg(0, name=src_ndim)
DEBUG 2022-02-14 16:38:06,506 on stmt: src_shape = arg(1, name=src_shape)
DEBUG 2022-02-14 16:38:06,506 on stmt: dest_ndim = arg(2, name=dest_ndim)
DEBUG 2022-02-14 16:38:06,506 on stmt: dest_shape = arg(3, name=dest_shape)
DEBUG 2022-02-14 16:38:06,506 on stmt: $6compare_op.2 = src_ndim > dest_ndim
DEBUG 2022-02-14 16:38:06,506 on stmt: bool8 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:38:06,506 on stmt: $8pred = call bool8($6compare_op.2, func=bool8, args=(Var($6compare_op.2, npyimpl.py:205),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:06,506 on stmt: branch $8pred, 10, 14
DEBUG 2022-02-14 16:38:06,506 ==== SSA block rewrite pass on 10
DEBUG 2022-02-14 16:38:06,506 Running <numba.core.ssa._FreshVarHandler object at 0x7fa046337be0>
DEBUG 2022-02-14 16:38:06,506 on stmt: $const10.0 = const(int, 0)
DEBUG 2022-02-14 16:38:06,506 on stmt: $12return_value.1 = cast(value=$const10.0)
DEBUG 2022-02-14 16:38:06,506 on stmt: return $12return_value.1
DEBUG 2022-02-14 16:38:06,506 ==== SSA block rewrite pass on 14
DEBUG 2022-02-14 16:38:06,506 Running <numba.core.ssa._FreshVarHandler object at 0x7fa046337be0>
DEBUG 2022-02-14 16:38:06,506 on stmt: src_index = const(int, 0)
DEBUG 2022-02-14 16:38:06,506 first assign: src_index
DEBUG 2022-02-14 16:38:06,506 replaced with: src_index = const(int, 0)
DEBUG 2022-02-14 16:38:06,506 on stmt: dest_index = dest_ndim - src_ndim
DEBUG 2022-02-14 16:38:06,506 on stmt: jump 26
DEBUG 2022-02-14 16:38:06,506 ==== SSA block rewrite pass on 26
DEBUG 2022-02-14 16:38:06,506 Running <numba.core.ssa._FreshVarHandler object at 0x7fa046337be0>
DEBUG 2022-02-14 16:38:06,506 on stmt: $30compare_op.2 = src_index < src_ndim
DEBUG 2022-02-14 16:38:06,506 on stmt: bool32 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:38:06,506 on stmt: $32pred = call bool32($30compare_op.2, func=bool32, args=(Var($30compare_op.2, npyimpl.py:212),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:06,507 on stmt: branch $32pred, 34, 120
DEBUG 2022-02-14 16:38:06,507 ==== SSA block rewrite pass on 34
DEBUG 2022-02-14 16:38:06,507 Running <numba.core.ssa._FreshVarHandler object at 0x7fa046337be0>
DEBUG 2022-02-14 16:38:06,507 on stmt: src_dim_size = getitem(value=src_shape, index=src_index, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:06,507 on stmt: dest_dim_size = getitem(value=dest_shape, index=dest_index, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:06,507 on stmt: $const52.7 = const(int, 1)
DEBUG 2022-02-14 16:38:06,507 on stmt: $54compare_op.8 = dest_dim_size != $const52.7
DEBUG 2022-02-14 16:38:06,507 on stmt: bool56 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:38:06,507 on stmt: $56pred = call bool56($54compare_op.8, func=bool56, args=(Var($54compare_op.8, npyimpl.py:217),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:06,507 on stmt: branch $56pred, 58, 86
DEBUG 2022-02-14 16:38:06,507 ==== SSA block rewrite pass on 58
DEBUG 2022-02-14 16:38:06,507 Running <numba.core.ssa._FreshVarHandler object at 0x7fa046337be0>
DEBUG 2022-02-14 16:38:06,507 on stmt: $62compare_op.2 = src_dim_size != dest_dim_size
DEBUG 2022-02-14 16:38:06,507 on stmt: bool64 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:38:06,507 on stmt: $64pred = call bool64($62compare_op.2, func=bool64, args=(Var($62compare_op.2, npyimpl.py:221),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:06,507 on stmt: branch $64pred, 66, 102
DEBUG 2022-02-14 16:38:06,507 ==== SSA block rewrite pass on 66
DEBUG 2022-02-14 16:38:06,507 Running <numba.core.ssa._FreshVarHandler object at 0x7fa046337be0>
DEBUG 2022-02-14 16:38:06,507 on stmt: $const68.1 = const(int, 1)
DEBUG 2022-02-14 16:38:06,507 on stmt: $70compare_op.2 = src_dim_size != $const68.1
DEBUG 2022-02-14 16:38:06,507 on stmt: bool72 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:38:06,507 on stmt: $72pred = call bool72($70compare_op.2, func=bool72, args=(Var($70compare_op.2, npyimpl.py:221),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:06,507 on stmt: branch $72pred, 74, 102
DEBUG 2022-02-14 16:38:06,508 ==== SSA block rewrite pass on 74
DEBUG 2022-02-14 16:38:06,508 Running <numba.core.ssa._FreshVarHandler object at 0x7fa046337be0>
DEBUG 2022-02-14 16:38:06,508 on stmt: $const76.1 = const(int, 1)
DEBUG 2022-02-14 16:38:06,508 on stmt: $78binary_add.2 = dest_index + $const76.1
DEBUG 2022-02-14 16:38:06,508 on stmt: $80unary_negative.3 = unary(fn=<built-in function neg>, value=$78binary_add.2)
DEBUG 2022-02-14 16:38:06,508 on stmt: $82return_value.4 = cast(value=$80unary_negative.3)
DEBUG 2022-02-14 16:38:06,508 on stmt: return $82return_value.4
DEBUG 2022-02-14 16:38:06,508 ==== SSA block rewrite pass on 86
DEBUG 2022-02-14 16:38:06,508 Running <numba.core.ssa._FreshVarHandler object at 0x7fa046337be0>
DEBUG 2022-02-14 16:38:06,508 on stmt: $const88.1 = const(int, 1)
DEBUG 2022-02-14 16:38:06,508 on stmt: $90compare_op.2 = src_dim_size != $const88.1
DEBUG 2022-02-14 16:38:06,508 on stmt: bool92 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:38:06,508 on stmt: $92pred = call bool92($90compare_op.2, func=bool92, args=(Var($90compare_op.2, npyimpl.py:223),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:06,509 on stmt: branch $92pred, 94, 102
DEBUG 2022-02-14 16:38:06,509 ==== SSA block rewrite pass on 94
DEBUG 2022-02-14 16:38:06,509 Running <numba.core.ssa._FreshVarHandler object at 0x7fa046337be0>
DEBUG 2022-02-14 16:38:06,509 on stmt: dest_shape[dest_index] = src_dim_size
DEBUG 2022-02-14 16:38:06,509 on stmt: jump 102
DEBUG 2022-02-14 16:38:06,509 ==== SSA block rewrite pass on 102
DEBUG 2022-02-14 16:38:06,509 Running <numba.core.ssa._FreshVarHandler object at 0x7fa046337be0>
DEBUG 2022-02-14 16:38:06,509 on stmt: $const104.1 = const(int, 1)
DEBUG 2022-02-14 16:38:06,509 on stmt: $106inplace_add.2 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=src_index, rhs=$const104.1, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:38:06,509 on stmt: src_index = $106inplace_add.2
DEBUG 2022-02-14 16:38:06,509 replaced with: src_index.1 = $106inplace_add.2
DEBUG 2022-02-14 16:38:06,509 on stmt: $const112.4 = const(int, 1)
DEBUG 2022-02-14 16:38:06,509 on stmt: $114inplace_add.5 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=dest_index, rhs=$const112.4, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:38:06,509 on stmt: dest_index = $114inplace_add.5
DEBUG 2022-02-14 16:38:06,509 on stmt: jump 26
DEBUG 2022-02-14 16:38:06,509 ==== SSA block rewrite pass on 120
DEBUG 2022-02-14 16:38:06,509 Running <numba.core.ssa._FreshVarHandler object at 0x7fa046337be0>
DEBUG 2022-02-14 16:38:06,509 on stmt: $122return_value.1 = cast(value=dest_index)
DEBUG 2022-02-14 16:38:06,509 on stmt: return $122return_value.1
DEBUG 2022-02-14 16:38:06,510 Replaced assignments: defaultdict(<class 'list'>,
            {14: [<numba.core.ir.Assign object at 0x7fa046337a30>],
             102: [<numba.core.ir.Assign object at 0x7fa046337b80>]})
DEBUG 2022-02-14 16:38:06,510 ==== SSA block rewrite pass on 0
DEBUG 2022-02-14 16:38:06,510 Running <numba.core.ssa._FixSSAVars object at 0x7fa046337be0>
DEBUG 2022-02-14 16:38:06,510 on stmt: src_ndim = arg(0, name=src_ndim)
DEBUG 2022-02-14 16:38:06,510 on stmt: src_shape = arg(1, name=src_shape)
DEBUG 2022-02-14 16:38:06,510 on stmt: dest_ndim = arg(2, name=dest_ndim)
DEBUG 2022-02-14 16:38:06,510 on stmt: dest_shape = arg(3, name=dest_shape)
DEBUG 2022-02-14 16:38:06,510 on stmt: $6compare_op.2 = src_ndim > dest_ndim
DEBUG 2022-02-14 16:38:06,510 on stmt: bool8 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:38:06,510 on stmt: $8pred = call bool8($6compare_op.2, func=bool8, args=(Var($6compare_op.2, npyimpl.py:205),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:06,510 on stmt: branch $8pred, 10, 14
DEBUG 2022-02-14 16:38:06,510 ==== SSA block rewrite pass on 10
DEBUG 2022-02-14 16:38:06,510 Running <numba.core.ssa._FixSSAVars object at 0x7fa046337be0>
DEBUG 2022-02-14 16:38:06,510 on stmt: $const10.0 = const(int, 0)
DEBUG 2022-02-14 16:38:06,510 on stmt: $12return_value.1 = cast(value=$const10.0)
DEBUG 2022-02-14 16:38:06,510 on stmt: return $12return_value.1
DEBUG 2022-02-14 16:38:06,510 ==== SSA block rewrite pass on 14
DEBUG 2022-02-14 16:38:06,510 Running <numba.core.ssa._FixSSAVars object at 0x7fa046337be0>
DEBUG 2022-02-14 16:38:06,510 on stmt: src_index = const(int, 0)
DEBUG 2022-02-14 16:38:06,511 on stmt: dest_index = dest_ndim - src_ndim
DEBUG 2022-02-14 16:38:06,511 on stmt: jump 26
DEBUG 2022-02-14 16:38:06,511 ==== SSA block rewrite pass on 26
DEBUG 2022-02-14 16:38:06,511 Running <numba.core.ssa._FixSSAVars object at 0x7fa046337be0>
DEBUG 2022-02-14 16:38:06,511 on stmt: $30compare_op.2 = src_index < src_ndim
DEBUG 2022-02-14 16:38:06,511 find_def var='src_index' stmt=$30compare_op.2 = src_index < src_ndim
DEBUG 2022-02-14 16:38:06,511 find_def_from_top label 26
DEBUG 2022-02-14 16:38:06,511 insert phi node src_index.2 = phi(incoming_values=[], incoming_blocks=[]) at 26
DEBUG 2022-02-14 16:38:06,511 find_def_from_bottom label 102
DEBUG 2022-02-14 16:38:06,511 incoming_def src_index.1 = $106inplace_add.2
DEBUG 2022-02-14 16:38:06,511 find_def_from_bottom label 14
DEBUG 2022-02-14 16:38:06,511 incoming_def src_index = const(int, 0)
DEBUG 2022-02-14 16:38:06,511 replaced with: $30compare_op.2 = src_index.2 < src_ndim
DEBUG 2022-02-14 16:38:06,511 on stmt: bool32 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:38:06,511 on stmt: $32pred = call bool32($30compare_op.2, func=bool32, args=(Var($30compare_op.2, npyimpl.py:212),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:06,511 on stmt: branch $32pred, 34, 120
DEBUG 2022-02-14 16:38:06,511 ==== SSA block rewrite pass on 34
DEBUG 2022-02-14 16:38:06,512 Running <numba.core.ssa._FixSSAVars object at 0x7fa046337be0>
DEBUG 2022-02-14 16:38:06,512 on stmt: src_dim_size = getitem(value=src_shape, index=src_index, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:06,512 find_def var='src_index' stmt=src_dim_size = getitem(value=src_shape, index=src_index, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:06,512 find_def_from_top label 34
DEBUG 2022-02-14 16:38:06,512 idom 26 from label 34
DEBUG 2022-02-14 16:38:06,512 find_def_from_bottom label 26
DEBUG 2022-02-14 16:38:06,512 replaced with: src_dim_size = getitem(value=src_shape, index=src_index.2, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:06,512 on stmt: dest_dim_size = getitem(value=dest_shape, index=dest_index, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:06,512 on stmt: $const52.7 = const(int, 1)
DEBUG 2022-02-14 16:38:06,512 on stmt: $54compare_op.8 = dest_dim_size != $const52.7
DEBUG 2022-02-14 16:38:06,512 on stmt: bool56 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:38:06,512 on stmt: $56pred = call bool56($54compare_op.8, func=bool56, args=(Var($54compare_op.8, npyimpl.py:217),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:06,512 on stmt: branch $56pred, 58, 86
DEBUG 2022-02-14 16:38:06,512 ==== SSA block rewrite pass on 58
DEBUG 2022-02-14 16:38:06,512 Running <numba.core.ssa._FixSSAVars object at 0x7fa046337be0>
DEBUG 2022-02-14 16:38:06,512 on stmt: $62compare_op.2 = src_dim_size != dest_dim_size
DEBUG 2022-02-14 16:38:06,512 on stmt: bool64 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:38:06,512 on stmt: $64pred = call bool64($62compare_op.2, func=bool64, args=(Var($62compare_op.2, npyimpl.py:221),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:06,513 on stmt: branch $64pred, 66, 102
DEBUG 2022-02-14 16:38:06,513 ==== SSA block rewrite pass on 66
DEBUG 2022-02-14 16:38:06,513 Running <numba.core.ssa._FixSSAVars object at 0x7fa046337be0>
DEBUG 2022-02-14 16:38:06,513 on stmt: $const68.1 = const(int, 1)
DEBUG 2022-02-14 16:38:06,513 on stmt: $70compare_op.2 = src_dim_size != $const68.1
DEBUG 2022-02-14 16:38:06,513 on stmt: bool72 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:38:06,513 on stmt: $72pred = call bool72($70compare_op.2, func=bool72, args=(Var($70compare_op.2, npyimpl.py:221),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:06,513 on stmt: branch $72pred, 74, 102
DEBUG 2022-02-14 16:38:06,513 ==== SSA block rewrite pass on 74
DEBUG 2022-02-14 16:38:06,513 Running <numba.core.ssa._FixSSAVars object at 0x7fa046337be0>
DEBUG 2022-02-14 16:38:06,513 on stmt: $const76.1 = const(int, 1)
DEBUG 2022-02-14 16:38:06,513 on stmt: $78binary_add.2 = dest_index + $const76.1
DEBUG 2022-02-14 16:38:06,513 on stmt: $80unary_negative.3 = unary(fn=<built-in function neg>, value=$78binary_add.2)
DEBUG 2022-02-14 16:38:06,513 on stmt: $82return_value.4 = cast(value=$80unary_negative.3)
DEBUG 2022-02-14 16:38:06,513 on stmt: return $82return_value.4
DEBUG 2022-02-14 16:38:06,513 ==== SSA block rewrite pass on 86
DEBUG 2022-02-14 16:38:06,514 Running <numba.core.ssa._FixSSAVars object at 0x7fa046337be0>
DEBUG 2022-02-14 16:38:06,514 on stmt: $const88.1 = const(int, 1)
DEBUG 2022-02-14 16:38:06,514 on stmt: $90compare_op.2 = src_dim_size != $const88.1
DEBUG 2022-02-14 16:38:06,514 on stmt: bool92 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:38:06,514 on stmt: $92pred = call bool92($90compare_op.2, func=bool92, args=(Var($90compare_op.2, npyimpl.py:223),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:06,514 on stmt: branch $92pred, 94, 102
DEBUG 2022-02-14 16:38:06,514 ==== SSA block rewrite pass on 94
DEBUG 2022-02-14 16:38:06,514 Running <numba.core.ssa._FixSSAVars object at 0x7fa046337be0>
DEBUG 2022-02-14 16:38:06,514 on stmt: dest_shape[dest_index] = src_dim_size
DEBUG 2022-02-14 16:38:06,514 on stmt: jump 102
DEBUG 2022-02-14 16:38:06,514 ==== SSA block rewrite pass on 102
DEBUG 2022-02-14 16:38:06,514 Running <numba.core.ssa._FixSSAVars object at 0x7fa046337be0>
DEBUG 2022-02-14 16:38:06,514 on stmt: $const104.1 = const(int, 1)
DEBUG 2022-02-14 16:38:06,514 on stmt: $106inplace_add.2 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=src_index, rhs=$const104.1, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:38:06,514 find_def var='src_index' stmt=$106inplace_add.2 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=src_index, rhs=$const104.1, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:38:06,515 find_def_from_top label 102
DEBUG 2022-02-14 16:38:06,515 idom 34 from label 102
DEBUG 2022-02-14 16:38:06,515 find_def_from_bottom label 34
DEBUG 2022-02-14 16:38:06,515 find_def_from_top label 34
DEBUG 2022-02-14 16:38:06,515 idom 26 from label 34
DEBUG 2022-02-14 16:38:06,515 find_def_from_bottom label 26
DEBUG 2022-02-14 16:38:06,515 replaced with: $106inplace_add.2 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=src_index.2, rhs=$const104.1, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:38:06,515 on stmt: src_index.1 = $106inplace_add.2
DEBUG 2022-02-14 16:38:06,515 on stmt: $const112.4 = const(int, 1)
DEBUG 2022-02-14 16:38:06,515 on stmt: $114inplace_add.5 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=dest_index, rhs=$const112.4, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:38:06,515 on stmt: dest_index = $114inplace_add.5
DEBUG 2022-02-14 16:38:06,515 on stmt: jump 26
DEBUG 2022-02-14 16:38:06,515 ==== SSA block rewrite pass on 120
DEBUG 2022-02-14 16:38:06,515 Running <numba.core.ssa._FixSSAVars object at 0x7fa046337be0>
DEBUG 2022-02-14 16:38:06,515 on stmt: $122return_value.1 = cast(value=dest_index)
DEBUG 2022-02-14 16:38:06,515 on stmt: return $122return_value.1
DEBUG 2022-02-14 16:38:06,515 Fix SSA violator on var dest_index
DEBUG 2022-02-14 16:38:06,515 ==== SSA block rewrite pass on 0
DEBUG 2022-02-14 16:38:06,515 Running <numba.core.ssa._FreshVarHandler object at 0x7fa0463379d0>
DEBUG 2022-02-14 16:38:06,515 on stmt: src_ndim = arg(0, name=src_ndim)
DEBUG 2022-02-14 16:38:06,516 on stmt: src_shape = arg(1, name=src_shape)
DEBUG 2022-02-14 16:38:06,516 on stmt: dest_ndim = arg(2, name=dest_ndim)
DEBUG 2022-02-14 16:38:06,516 on stmt: dest_shape = arg(3, name=dest_shape)
DEBUG 2022-02-14 16:38:06,516 on stmt: $6compare_op.2 = src_ndim > dest_ndim
DEBUG 2022-02-14 16:38:06,516 on stmt: bool8 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:38:06,516 on stmt: $8pred = call bool8($6compare_op.2, func=bool8, args=(Var($6compare_op.2, npyimpl.py:205),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:06,516 on stmt: branch $8pred, 10, 14
DEBUG 2022-02-14 16:38:06,516 ==== SSA block rewrite pass on 10
DEBUG 2022-02-14 16:38:06,516 Running <numba.core.ssa._FreshVarHandler object at 0x7fa0463379d0>
DEBUG 2022-02-14 16:38:06,516 on stmt: $const10.0 = const(int, 0)
DEBUG 2022-02-14 16:38:06,516 on stmt: $12return_value.1 = cast(value=$const10.0)
DEBUG 2022-02-14 16:38:06,516 on stmt: return $12return_value.1
DEBUG 2022-02-14 16:38:06,516 ==== SSA block rewrite pass on 14
DEBUG 2022-02-14 16:38:06,516 Running <numba.core.ssa._FreshVarHandler object at 0x7fa0463379d0>
DEBUG 2022-02-14 16:38:06,516 on stmt: src_index = const(int, 0)
DEBUG 2022-02-14 16:38:06,516 on stmt: dest_index = dest_ndim - src_ndim
DEBUG 2022-02-14 16:38:06,516 first assign: dest_index
DEBUG 2022-02-14 16:38:06,516 replaced with: dest_index = dest_ndim - src_ndim
DEBUG 2022-02-14 16:38:06,516 on stmt: jump 26
DEBUG 2022-02-14 16:38:06,516 ==== SSA block rewrite pass on 26
DEBUG 2022-02-14 16:38:06,516 Running <numba.core.ssa._FreshVarHandler object at 0x7fa0463379d0>
DEBUG 2022-02-14 16:38:06,517 on stmt: src_index.2 = phi(incoming_values=[Var(src_index.1, npyimpl.py:226), Var(src_index, npyimpl.py:210)], incoming_blocks=[102, 14])
DEBUG 2022-02-14 16:38:06,517 on stmt: $30compare_op.2 = src_index.2 < src_ndim
DEBUG 2022-02-14 16:38:06,517 on stmt: bool32 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:38:06,517 on stmt: $32pred = call bool32($30compare_op.2, func=bool32, args=(Var($30compare_op.2, npyimpl.py:212),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:06,517 on stmt: branch $32pred, 34, 120
DEBUG 2022-02-14 16:38:06,517 ==== SSA block rewrite pass on 34
DEBUG 2022-02-14 16:38:06,517 Running <numba.core.ssa._FreshVarHandler object at 0x7fa0463379d0>
DEBUG 2022-02-14 16:38:06,517 on stmt: src_dim_size = getitem(value=src_shape, index=src_index.2, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:06,517 on stmt: dest_dim_size = getitem(value=dest_shape, index=dest_index, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:06,517 on stmt: $const52.7 = const(int, 1)
DEBUG 2022-02-14 16:38:06,517 on stmt: $54compare_op.8 = dest_dim_size != $const52.7
DEBUG 2022-02-14 16:38:06,517 on stmt: bool56 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:38:06,517 on stmt: $56pred = call bool56($54compare_op.8, func=bool56, args=(Var($54compare_op.8, npyimpl.py:217),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:06,517 on stmt: branch $56pred, 58, 86
DEBUG 2022-02-14 16:38:06,517 ==== SSA block rewrite pass on 58
DEBUG 2022-02-14 16:38:06,517 Running <numba.core.ssa._FreshVarHandler object at 0x7fa0463379d0>
DEBUG 2022-02-14 16:38:06,517 on stmt: $62compare_op.2 = src_dim_size != dest_dim_size
DEBUG 2022-02-14 16:38:06,517 on stmt: bool64 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:38:06,517 on stmt: $64pred = call bool64($62compare_op.2, func=bool64, args=(Var($62compare_op.2, npyimpl.py:221),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:06,517 on stmt: branch $64pred, 66, 102
DEBUG 2022-02-14 16:38:06,518 ==== SSA block rewrite pass on 66
DEBUG 2022-02-14 16:38:06,518 Running <numba.core.ssa._FreshVarHandler object at 0x7fa0463379d0>
DEBUG 2022-02-14 16:38:06,518 on stmt: $const68.1 = const(int, 1)
DEBUG 2022-02-14 16:38:06,518 on stmt: $70compare_op.2 = src_dim_size != $const68.1
DEBUG 2022-02-14 16:38:06,518 on stmt: bool72 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:38:06,518 on stmt: $72pred = call bool72($70compare_op.2, func=bool72, args=(Var($70compare_op.2, npyimpl.py:221),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:06,518 on stmt: branch $72pred, 74, 102
DEBUG 2022-02-14 16:38:06,518 ==== SSA block rewrite pass on 74
DEBUG 2022-02-14 16:38:06,518 Running <numba.core.ssa._FreshVarHandler object at 0x7fa0463379d0>
DEBUG 2022-02-14 16:38:06,518 on stmt: $const76.1 = const(int, 1)
DEBUG 2022-02-14 16:38:06,518 on stmt: $78binary_add.2 = dest_index + $const76.1
DEBUG 2022-02-14 16:38:06,518 on stmt: $80unary_negative.3 = unary(fn=<built-in function neg>, value=$78binary_add.2)
DEBUG 2022-02-14 16:38:06,518 on stmt: $82return_value.4 = cast(value=$80unary_negative.3)
DEBUG 2022-02-14 16:38:06,518 on stmt: return $82return_value.4
DEBUG 2022-02-14 16:38:06,518 ==== SSA block rewrite pass on 86
DEBUG 2022-02-14 16:38:06,518 Running <numba.core.ssa._FreshVarHandler object at 0x7fa0463379d0>
DEBUG 2022-02-14 16:38:06,518 on stmt: $const88.1 = const(int, 1)
DEBUG 2022-02-14 16:38:06,518 on stmt: $90compare_op.2 = src_dim_size != $const88.1
DEBUG 2022-02-14 16:38:06,518 on stmt: bool92 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:38:06,518 on stmt: $92pred = call bool92($90compare_op.2, func=bool92, args=(Var($90compare_op.2, npyimpl.py:223),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:06,519 on stmt: branch $92pred, 94, 102
DEBUG 2022-02-14 16:38:06,519 ==== SSA block rewrite pass on 94
DEBUG 2022-02-14 16:38:06,519 Running <numba.core.ssa._FreshVarHandler object at 0x7fa0463379d0>
DEBUG 2022-02-14 16:38:06,519 on stmt: dest_shape[dest_index] = src_dim_size
DEBUG 2022-02-14 16:38:06,519 on stmt: jump 102
DEBUG 2022-02-14 16:38:06,519 ==== SSA block rewrite pass on 102
DEBUG 2022-02-14 16:38:06,519 Running <numba.core.ssa._FreshVarHandler object at 0x7fa0463379d0>
DEBUG 2022-02-14 16:38:06,519 on stmt: $const104.1 = const(int, 1)
DEBUG 2022-02-14 16:38:06,519 on stmt: $106inplace_add.2 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=src_index.2, rhs=$const104.1, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:38:06,519 on stmt: src_index.1 = $106inplace_add.2
DEBUG 2022-02-14 16:38:06,519 on stmt: $const112.4 = const(int, 1)
DEBUG 2022-02-14 16:38:06,519 on stmt: $114inplace_add.5 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=dest_index, rhs=$const112.4, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:38:06,519 on stmt: dest_index = $114inplace_add.5
DEBUG 2022-02-14 16:38:06,519 replaced with: dest_index.1 = $114inplace_add.5
DEBUG 2022-02-14 16:38:06,519 on stmt: jump 26
DEBUG 2022-02-14 16:38:06,519 ==== SSA block rewrite pass on 120
DEBUG 2022-02-14 16:38:06,519 Running <numba.core.ssa._FreshVarHandler object at 0x7fa0463379d0>
DEBUG 2022-02-14 16:38:06,519 on stmt: $122return_value.1 = cast(value=dest_index)
DEBUG 2022-02-14 16:38:06,519 on stmt: return $122return_value.1
DEBUG 2022-02-14 16:38:06,519 Replaced assignments: defaultdict(<class 'list'>,
            {14: [<numba.core.ir.Assign object at 0x7fa046337b20>],
             102: [<numba.core.ir.Assign object at 0x7fa0462bf0d0>]})
DEBUG 2022-02-14 16:38:06,519 ==== SSA block rewrite pass on 0
DEBUG 2022-02-14 16:38:06,520 Running <numba.core.ssa._FixSSAVars object at 0x7fa046fa5c70>
DEBUG 2022-02-14 16:38:06,520 on stmt: src_ndim = arg(0, name=src_ndim)
DEBUG 2022-02-14 16:38:06,520 on stmt: src_shape = arg(1, name=src_shape)
DEBUG 2022-02-14 16:38:06,520 on stmt: dest_ndim = arg(2, name=dest_ndim)
DEBUG 2022-02-14 16:38:06,520 on stmt: dest_shape = arg(3, name=dest_shape)
DEBUG 2022-02-14 16:38:06,520 on stmt: $6compare_op.2 = src_ndim > dest_ndim
DEBUG 2022-02-14 16:38:06,520 on stmt: bool8 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:38:06,520 on stmt: $8pred = call bool8($6compare_op.2, func=bool8, args=(Var($6compare_op.2, npyimpl.py:205),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:06,520 on stmt: branch $8pred, 10, 14
DEBUG 2022-02-14 16:38:06,520 ==== SSA block rewrite pass on 10
DEBUG 2022-02-14 16:38:06,520 Running <numba.core.ssa._FixSSAVars object at 0x7fa046fa5c70>
DEBUG 2022-02-14 16:38:06,520 on stmt: $const10.0 = const(int, 0)
DEBUG 2022-02-14 16:38:06,520 on stmt: $12return_value.1 = cast(value=$const10.0)
DEBUG 2022-02-14 16:38:06,520 on stmt: return $12return_value.1
DEBUG 2022-02-14 16:38:06,520 ==== SSA block rewrite pass on 14
DEBUG 2022-02-14 16:38:06,520 Running <numba.core.ssa._FixSSAVars object at 0x7fa046fa5c70>
DEBUG 2022-02-14 16:38:06,520 on stmt: src_index = const(int, 0)
DEBUG 2022-02-14 16:38:06,520 on stmt: dest_index = dest_ndim - src_ndim
DEBUG 2022-02-14 16:38:06,520 on stmt: jump 26
DEBUG 2022-02-14 16:38:06,520 ==== SSA block rewrite pass on 26
DEBUG 2022-02-14 16:38:06,520 Running <numba.core.ssa._FixSSAVars object at 0x7fa046fa5c70>
DEBUG 2022-02-14 16:38:06,520 on stmt: src_index.2 = phi(incoming_values=[Var(src_index.1, npyimpl.py:226), Var(src_index, npyimpl.py:210)], incoming_blocks=[102, 14])
DEBUG 2022-02-14 16:38:06,520 on stmt: $30compare_op.2 = src_index.2 < src_ndim
DEBUG 2022-02-14 16:38:06,521 on stmt: bool32 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:38:06,521 on stmt: $32pred = call bool32($30compare_op.2, func=bool32, args=(Var($30compare_op.2, npyimpl.py:212),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:06,521 on stmt: branch $32pred, 34, 120
DEBUG 2022-02-14 16:38:06,521 ==== SSA block rewrite pass on 34
DEBUG 2022-02-14 16:38:06,521 Running <numba.core.ssa._FixSSAVars object at 0x7fa046fa5c70>
DEBUG 2022-02-14 16:38:06,521 on stmt: src_dim_size = getitem(value=src_shape, index=src_index.2, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:06,521 on stmt: dest_dim_size = getitem(value=dest_shape, index=dest_index, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:06,521 find_def var='dest_index' stmt=dest_dim_size = getitem(value=dest_shape, index=dest_index, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:06,521 find_def_from_top label 34
DEBUG 2022-02-14 16:38:06,521 idom 26 from label 34
DEBUG 2022-02-14 16:38:06,521 find_def_from_bottom label 26
DEBUG 2022-02-14 16:38:06,521 find_def_from_top label 26
DEBUG 2022-02-14 16:38:06,521 insert phi node dest_index.2 = phi(incoming_values=[], incoming_blocks=[]) at 26
DEBUG 2022-02-14 16:38:06,521 find_def_from_bottom label 102
DEBUG 2022-02-14 16:38:06,521 incoming_def dest_index.1 = $114inplace_add.5
DEBUG 2022-02-14 16:38:06,521 find_def_from_bottom label 14
DEBUG 2022-02-14 16:38:06,521 incoming_def dest_index = dest_ndim - src_ndim
DEBUG 2022-02-14 16:38:06,521 replaced with: dest_dim_size = getitem(value=dest_shape, index=dest_index.2, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:06,521 on stmt: $const52.7 = const(int, 1)
DEBUG 2022-02-14 16:38:06,521 on stmt: $54compare_op.8 = dest_dim_size != $const52.7
DEBUG 2022-02-14 16:38:06,521 on stmt: bool56 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:38:06,521 on stmt: $56pred = call bool56($54compare_op.8, func=bool56, args=(Var($54compare_op.8, npyimpl.py:217),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:06,521 on stmt: branch $56pred, 58, 86
DEBUG 2022-02-14 16:38:06,521 ==== SSA block rewrite pass on 58
DEBUG 2022-02-14 16:38:06,522 Running <numba.core.ssa._FixSSAVars object at 0x7fa046fa5c70>
DEBUG 2022-02-14 16:38:06,522 on stmt: $62compare_op.2 = src_dim_size != dest_dim_size
DEBUG 2022-02-14 16:38:06,522 on stmt: bool64 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:38:06,522 on stmt: $64pred = call bool64($62compare_op.2, func=bool64, args=(Var($62compare_op.2, npyimpl.py:221),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:06,522 on stmt: branch $64pred, 66, 102
DEBUG 2022-02-14 16:38:06,522 ==== SSA block rewrite pass on 66
DEBUG 2022-02-14 16:38:06,522 Running <numba.core.ssa._FixSSAVars object at 0x7fa046fa5c70>
DEBUG 2022-02-14 16:38:06,522 on stmt: $const68.1 = const(int, 1)
DEBUG 2022-02-14 16:38:06,522 on stmt: $70compare_op.2 = src_dim_size != $const68.1
DEBUG 2022-02-14 16:38:06,522 on stmt: bool72 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:38:06,522 on stmt: $72pred = call bool72($70compare_op.2, func=bool72, args=(Var($70compare_op.2, npyimpl.py:221),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:06,522 on stmt: branch $72pred, 74, 102
DEBUG 2022-02-14 16:38:06,522 ==== SSA block rewrite pass on 74
DEBUG 2022-02-14 16:38:06,522 Running <numba.core.ssa._FixSSAVars object at 0x7fa046fa5c70>
DEBUG 2022-02-14 16:38:06,522 on stmt: $const76.1 = const(int, 1)
DEBUG 2022-02-14 16:38:06,522 on stmt: $78binary_add.2 = dest_index + $const76.1
DEBUG 2022-02-14 16:38:06,522 find_def var='dest_index' stmt=$78binary_add.2 = dest_index + $const76.1
DEBUG 2022-02-14 16:38:06,522 find_def_from_top label 74
DEBUG 2022-02-14 16:38:06,522 idom 66 from label 74
DEBUG 2022-02-14 16:38:06,522 find_def_from_bottom label 66
DEBUG 2022-02-14 16:38:06,522 find_def_from_top label 66
DEBUG 2022-02-14 16:38:06,522 idom 58 from label 66
DEBUG 2022-02-14 16:38:06,522 find_def_from_bottom label 58
DEBUG 2022-02-14 16:38:06,522 find_def_from_top label 58
DEBUG 2022-02-14 16:38:06,522 idom 34 from label 58
DEBUG 2022-02-14 16:38:06,522 find_def_from_bottom label 34
DEBUG 2022-02-14 16:38:06,523 find_def_from_top label 34
DEBUG 2022-02-14 16:38:06,523 idom 26 from label 34
DEBUG 2022-02-14 16:38:06,523 find_def_from_bottom label 26
DEBUG 2022-02-14 16:38:06,523 replaced with: $78binary_add.2 = dest_index.2 + $const76.1
DEBUG 2022-02-14 16:38:06,523 on stmt: $80unary_negative.3 = unary(fn=<built-in function neg>, value=$78binary_add.2)
DEBUG 2022-02-14 16:38:06,523 on stmt: $82return_value.4 = cast(value=$80unary_negative.3)
DEBUG 2022-02-14 16:38:06,523 on stmt: return $82return_value.4
DEBUG 2022-02-14 16:38:06,523 ==== SSA block rewrite pass on 86
DEBUG 2022-02-14 16:38:06,523 Running <numba.core.ssa._FixSSAVars object at 0x7fa046fa5c70>
DEBUG 2022-02-14 16:38:06,523 on stmt: $const88.1 = const(int, 1)
DEBUG 2022-02-14 16:38:06,523 on stmt: $90compare_op.2 = src_dim_size != $const88.1
DEBUG 2022-02-14 16:38:06,523 on stmt: bool92 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:38:06,523 on stmt: $92pred = call bool92($90compare_op.2, func=bool92, args=(Var($90compare_op.2, npyimpl.py:223),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:06,523 on stmt: branch $92pred, 94, 102
DEBUG 2022-02-14 16:38:06,523 ==== SSA block rewrite pass on 94
DEBUG 2022-02-14 16:38:06,523 Running <numba.core.ssa._FixSSAVars object at 0x7fa046fa5c70>
DEBUG 2022-02-14 16:38:06,523 on stmt: dest_shape[dest_index] = src_dim_size
DEBUG 2022-02-14 16:38:06,523 find_def var='dest_index' stmt=dest_shape[dest_index] = src_dim_size
DEBUG 2022-02-14 16:38:06,523 find_def_from_top label 94
DEBUG 2022-02-14 16:38:06,523 idom 86 from label 94
DEBUG 2022-02-14 16:38:06,523 find_def_from_bottom label 86
DEBUG 2022-02-14 16:38:06,523 find_def_from_top label 86
DEBUG 2022-02-14 16:38:06,523 idom 34 from label 86
DEBUG 2022-02-14 16:38:06,523 find_def_from_bottom label 34
DEBUG 2022-02-14 16:38:06,523 find_def_from_top label 34
DEBUG 2022-02-14 16:38:06,523 idom 26 from label 34
DEBUG 2022-02-14 16:38:06,524 find_def_from_bottom label 26
DEBUG 2022-02-14 16:38:06,524 replaced with: dest_shape[dest_index.2] = src_dim_size
DEBUG 2022-02-14 16:38:06,524 on stmt: jump 102
DEBUG 2022-02-14 16:38:06,524 ==== SSA block rewrite pass on 102
DEBUG 2022-02-14 16:38:06,524 Running <numba.core.ssa._FixSSAVars object at 0x7fa046fa5c70>
DEBUG 2022-02-14 16:38:06,524 on stmt: $const104.1 = const(int, 1)
DEBUG 2022-02-14 16:38:06,524 on stmt: $106inplace_add.2 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=src_index.2, rhs=$const104.1, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:38:06,524 on stmt: src_index.1 = $106inplace_add.2
DEBUG 2022-02-14 16:38:06,524 on stmt: $const112.4 = const(int, 1)
DEBUG 2022-02-14 16:38:06,524 on stmt: $114inplace_add.5 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=dest_index, rhs=$const112.4, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:38:06,524 find_def var='dest_index' stmt=$114inplace_add.5 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=dest_index, rhs=$const112.4, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:38:06,524 find_def_from_top label 102
DEBUG 2022-02-14 16:38:06,524 idom 34 from label 102
DEBUG 2022-02-14 16:38:06,524 find_def_from_bottom label 34
DEBUG 2022-02-14 16:38:06,524 find_def_from_top label 34
DEBUG 2022-02-14 16:38:06,524 idom 26 from label 34
DEBUG 2022-02-14 16:38:06,524 find_def_from_bottom label 26
DEBUG 2022-02-14 16:38:06,524 replaced with: $114inplace_add.5 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=dest_index.2, rhs=$const112.4, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:38:06,524 on stmt: dest_index.1 = $114inplace_add.5
DEBUG 2022-02-14 16:38:06,525 on stmt: jump 26
DEBUG 2022-02-14 16:38:06,525 ==== SSA block rewrite pass on 120
DEBUG 2022-02-14 16:38:06,525 Running <numba.core.ssa._FixSSAVars object at 0x7fa046fa5c70>
DEBUG 2022-02-14 16:38:06,525 on stmt: $122return_value.1 = cast(value=dest_index)
DEBUG 2022-02-14 16:38:06,525 find_def var='dest_index' stmt=$122return_value.1 = cast(value=dest_index)
DEBUG 2022-02-14 16:38:06,525 find_def_from_top label 120
DEBUG 2022-02-14 16:38:06,525 idom 26 from label 120
DEBUG 2022-02-14 16:38:06,525 find_def_from_bottom label 26
DEBUG 2022-02-14 16:38:06,525 replaced with: $122return_value.1 = cast(value=dest_index.2)
DEBUG 2022-02-14 16:38:06,525 on stmt: return $122return_value.1
DEBUG 2022-02-14 16:38:07,232 bytecode dump:
>          0	NOP(arg=None, lineno=217)
           2	LOAD_DEREF(arg=1, lineno=217)
           4	LOAD_CONST(arg=1, lineno=217)
           6	CALL_FUNCTION(arg=1, lineno=217)
           8	STORE_FAST(arg=2, lineno=217)
          10	LOAD_DEREF(arg=1, lineno=218)
          12	LOAD_FAST(arg=0, lineno=218)
          14	CALL_FUNCTION(arg=1, lineno=218)
          16	STORE_FAST(arg=0, lineno=218)
          18	LOAD_FAST(arg=1, lineno=219)
          20	LOAD_CONST(arg=2, lineno=219)
          22	COMPARE_OP(arg=0, lineno=219)
          24	POP_JUMP_IF_FALSE(arg=98, lineno=219)
          26	LOAD_CONST(arg=3, lineno=220)
          28	STORE_FAST(arg=3, lineno=220)
          30	LOAD_FAST(arg=1, lineno=221)
          32	UNARY_NEGATIVE(arg=None, lineno=221)
          34	STORE_FAST(arg=4, lineno=221)
          36	LOAD_FAST(arg=4, lineno=222)
          38	LOAD_CONST(arg=2, lineno=222)
          40	COMPARE_OP(arg=0, lineno=222)
          42	POP_JUMP_IF_FALSE(arg=48, lineno=222)
          44	LOAD_GLOBAL(arg=0, lineno=223)
          46	RAISE_VARARGS(arg=1, lineno=223)
>         48	LOAD_DEREF(arg=0, lineno=224)
          50	POP_JUMP_IF_FALSE(arg=106, lineno=224)
          52	LOAD_FAST(arg=0, lineno=225)
          54	LOAD_CONST(arg=2, lineno=225)
          56	COMPARE_OP(arg=2, lineno=225)
          58	POP_JUMP_IF_FALSE(arg=76, lineno=225)
          60	LOAD_DEREF(arg=2, lineno=226)
          62	POP_JUMP_IF_FALSE(arg=68, lineno=226)
          64	LOAD_DEREF(arg=2, lineno=227)
          66	RETURN_VALUE(arg=None, lineno=227)
>         68	LOAD_GLOBAL(arg=1, lineno=229)
          70	LOAD_CONST(arg=4, lineno=229)
          72	CALL_FUNCTION(arg=1, lineno=229)
          74	RAISE_VARARGS(arg=1, lineno=229)
>         76	LOAD_FAST(arg=0, lineno=230)
          78	LOAD_CONST(arg=1, lineno=230)
          80	COMPARE_OP(arg=3, lineno=230)
          82	POP_JUMP_IF_FALSE(arg=106, lineno=230)
          84	LOAD_FAST(arg=0, lineno=230)
          86	LOAD_CONST(arg=5, lineno=230)
          88	COMPARE_OP(arg=3, lineno=230)
          90	POP_JUMP_IF_FALSE(arg=106, lineno=230)
          92	LOAD_CONST(arg=2, lineno=231)
          94	RETURN_VALUE(arg=None, lineno=231)
          96	JUMP_FORWARD(arg=8, lineno=231)
>         98	LOAD_CONST(arg=6, lineno=233)
         100	STORE_FAST(arg=3, lineno=233)
         102	LOAD_FAST(arg=1, lineno=234)
         104	STORE_FAST(arg=4, lineno=234)
>        106	LOAD_FAST(arg=4, lineno=235)
         108	LOAD_CONST(arg=7, lineno=235)
         110	COMPARE_OP(arg=4, lineno=235)
         112	POP_JUMP_IF_FALSE(arg=130, lineno=235)
         114	LOAD_GLOBAL(arg=2, lineno=237)
         116	LOAD_METHOD(arg=3, lineno=237)
         118	LOAD_FAST(arg=0, lineno=237)
         120	LOAD_GLOBAL(arg=4, lineno=237)
         122	LOAD_FAST(arg=1, lineno=237)
         124	CALL_FUNCTION(arg=1, lineno=237)
         126	CALL_METHOD(arg=2, lineno=237)
         128	RETURN_VALUE(arg=None, lineno=237)
>        130	LOAD_FAST(arg=4, lineno=238)
         132	LOAD_CONST(arg=2, lineno=238)
         134	COMPARE_OP(arg=3, lineno=238)
         136	POP_JUMP_IF_FALSE(arg=172, lineno=238)
         138	LOAD_FAST(arg=4, lineno=239)
         140	LOAD_CONST(arg=1, lineno=239)
         142	BINARY_AND(arg=None, lineno=239)
         144	POP_JUMP_IF_FALSE(arg=154, lineno=239)
         146	LOAD_FAST(arg=2, lineno=240)
         148	LOAD_FAST(arg=0, lineno=240)
         150	INPLACE_MULTIPLY(arg=None, lineno=240)
         152	STORE_FAST(arg=2, lineno=240)
>        154	LOAD_FAST(arg=4, lineno=241)
         156	LOAD_CONST(arg=1, lineno=241)
         158	INPLACE_RSHIFT(arg=None, lineno=241)
         160	STORE_FAST(arg=4, lineno=241)
         162	LOAD_FAST(arg=0, lineno=242)
         164	LOAD_FAST(arg=0, lineno=242)
         166	INPLACE_MULTIPLY(arg=None, lineno=242)
         168	STORE_FAST(arg=0, lineno=242)
         170	JUMP_ABSOLUTE(arg=130, lineno=242)
>        172	LOAD_FAST(arg=3, lineno=244)
         174	POP_JUMP_IF_FALSE(arg=184, lineno=244)
         176	LOAD_CONST(arg=8, lineno=244)
         178	LOAD_FAST(arg=2, lineno=244)
         180	BINARY_TRUE_DIVIDE(arg=None, lineno=244)
         182	RETURN_VALUE(arg=None, lineno=244)
>        184	LOAD_FAST(arg=2, lineno=244)
         186	RETURN_VALUE(arg=None, lineno=244)
DEBUG 2022-02-14 16:38:07,233 pending: deque([State(pc_initial=0 nstack_initial=0)])
DEBUG 2022-02-14 16:38:07,233 stack: []
DEBUG 2022-02-14 16:38:07,233 dispatch pc=0, inst=NOP(arg=None, lineno=217)
DEBUG 2022-02-14 16:38:07,233 stack []
DEBUG 2022-02-14 16:38:07,233 dispatch pc=2, inst=LOAD_DEREF(arg=1, lineno=217)
DEBUG 2022-02-14 16:38:07,233 stack []
DEBUG 2022-02-14 16:38:07,233 dispatch pc=4, inst=LOAD_CONST(arg=1, lineno=217)
DEBUG 2022-02-14 16:38:07,233 stack ['$2load_deref.0']
DEBUG 2022-02-14 16:38:07,233 dispatch pc=6, inst=CALL_FUNCTION(arg=1, lineno=217)
DEBUG 2022-02-14 16:38:07,233 stack ['$2load_deref.0', '$const4.1']
DEBUG 2022-02-14 16:38:07,233 dispatch pc=8, inst=STORE_FAST(arg=2, lineno=217)
DEBUG 2022-02-14 16:38:07,233 stack ['$6call_function.2']
DEBUG 2022-02-14 16:38:07,233 dispatch pc=10, inst=LOAD_DEREF(arg=1, lineno=218)
DEBUG 2022-02-14 16:38:07,233 stack []
DEBUG 2022-02-14 16:38:07,233 dispatch pc=12, inst=LOAD_FAST(arg=0, lineno=218)
DEBUG 2022-02-14 16:38:07,233 stack ['$10load_deref.3']
DEBUG 2022-02-14 16:38:07,233 dispatch pc=14, inst=CALL_FUNCTION(arg=1, lineno=218)
DEBUG 2022-02-14 16:38:07,233 stack ['$10load_deref.3', '$a12.4']
DEBUG 2022-02-14 16:38:07,233 dispatch pc=16, inst=STORE_FAST(arg=0, lineno=218)
DEBUG 2022-02-14 16:38:07,233 stack ['$14call_function.5']
DEBUG 2022-02-14 16:38:07,233 dispatch pc=18, inst=LOAD_FAST(arg=1, lineno=219)
DEBUG 2022-02-14 16:38:07,233 stack []
DEBUG 2022-02-14 16:38:07,233 dispatch pc=20, inst=LOAD_CONST(arg=2, lineno=219)
DEBUG 2022-02-14 16:38:07,233 stack ['$b18.6']
DEBUG 2022-02-14 16:38:07,234 dispatch pc=22, inst=COMPARE_OP(arg=0, lineno=219)
DEBUG 2022-02-14 16:38:07,234 stack ['$b18.6', '$const20.7']
DEBUG 2022-02-14 16:38:07,234 dispatch pc=24, inst=POP_JUMP_IF_FALSE(arg=98, lineno=219)
DEBUG 2022-02-14 16:38:07,234 stack ['$22compare_op.8']
DEBUG 2022-02-14 16:38:07,234 end state. edges=[Edge(pc=26, stack=(), blockstack=(), npush=0), Edge(pc=98, stack=(), blockstack=(), npush=0)]
DEBUG 2022-02-14 16:38:07,234 pending: deque([State(pc_initial=26 nstack_initial=0), State(pc_initial=98 nstack_initial=0)])
DEBUG 2022-02-14 16:38:07,234 stack: []
DEBUG 2022-02-14 16:38:07,234 dispatch pc=26, inst=LOAD_CONST(arg=3, lineno=220)
DEBUG 2022-02-14 16:38:07,234 stack []
DEBUG 2022-02-14 16:38:07,234 dispatch pc=28, inst=STORE_FAST(arg=3, lineno=220)
DEBUG 2022-02-14 16:38:07,234 stack ['$const26.0']
DEBUG 2022-02-14 16:38:07,234 dispatch pc=30, inst=LOAD_FAST(arg=1, lineno=221)
DEBUG 2022-02-14 16:38:07,234 stack []
DEBUG 2022-02-14 16:38:07,234 dispatch pc=32, inst=UNARY_NEGATIVE(arg=None, lineno=221)
DEBUG 2022-02-14 16:38:07,234 stack ['$b30.1']
DEBUG 2022-02-14 16:38:07,234 dispatch pc=34, inst=STORE_FAST(arg=4, lineno=221)
DEBUG 2022-02-14 16:38:07,234 stack ['$32unary_negative.2']
DEBUG 2022-02-14 16:38:07,234 dispatch pc=36, inst=LOAD_FAST(arg=4, lineno=222)
DEBUG 2022-02-14 16:38:07,234 stack []
DEBUG 2022-02-14 16:38:07,234 dispatch pc=38, inst=LOAD_CONST(arg=2, lineno=222)
DEBUG 2022-02-14 16:38:07,234 stack ['$exp36.3']
DEBUG 2022-02-14 16:38:07,234 dispatch pc=40, inst=COMPARE_OP(arg=0, lineno=222)
DEBUG 2022-02-14 16:38:07,234 stack ['$exp36.3', '$const38.4']
DEBUG 2022-02-14 16:38:07,234 dispatch pc=42, inst=POP_JUMP_IF_FALSE(arg=48, lineno=222)
DEBUG 2022-02-14 16:38:07,234 stack ['$40compare_op.5']
DEBUG 2022-02-14 16:38:07,235 end state. edges=[Edge(pc=44, stack=(), blockstack=(), npush=0), Edge(pc=48, stack=(), blockstack=(), npush=0)]
DEBUG 2022-02-14 16:38:07,235 pending: deque([State(pc_initial=98 nstack_initial=0), State(pc_initial=44 nstack_initial=0), State(pc_initial=48 nstack_initial=0)])
DEBUG 2022-02-14 16:38:07,235 stack: []
DEBUG 2022-02-14 16:38:07,235 dispatch pc=98, inst=LOAD_CONST(arg=6, lineno=233)
DEBUG 2022-02-14 16:38:07,235 stack []
DEBUG 2022-02-14 16:38:07,235 dispatch pc=100, inst=STORE_FAST(arg=3, lineno=233)
DEBUG 2022-02-14 16:38:07,235 stack ['$const98.0']
DEBUG 2022-02-14 16:38:07,235 dispatch pc=102, inst=LOAD_FAST(arg=1, lineno=234)
DEBUG 2022-02-14 16:38:07,235 stack []
DEBUG 2022-02-14 16:38:07,235 dispatch pc=104, inst=STORE_FAST(arg=4, lineno=234)
DEBUG 2022-02-14 16:38:07,235 stack ['$b102.1']
DEBUG 2022-02-14 16:38:07,235 end state. edges=[Edge(pc=106, stack=(), blockstack=(), npush=0)]
DEBUG 2022-02-14 16:38:07,235 pending: deque([State(pc_initial=44 nstack_initial=0), State(pc_initial=48 nstack_initial=0), State(pc_initial=106 nstack_initial=0)])
DEBUG 2022-02-14 16:38:07,235 stack: []
DEBUG 2022-02-14 16:38:07,235 dispatch pc=44, inst=LOAD_GLOBAL(arg=0, lineno=223)
DEBUG 2022-02-14 16:38:07,235 stack []
DEBUG 2022-02-14 16:38:07,235 dispatch pc=46, inst=RAISE_VARARGS(arg=1, lineno=223)
DEBUG 2022-02-14 16:38:07,235 stack ['$44load_global.0']
DEBUG 2022-02-14 16:38:07,235 end state. edges=[]
DEBUG 2022-02-14 16:38:07,235 pending: deque([State(pc_initial=48 nstack_initial=0), State(pc_initial=106 nstack_initial=0)])
DEBUG 2022-02-14 16:38:07,235 stack: []
DEBUG 2022-02-14 16:38:07,235 dispatch pc=48, inst=LOAD_DEREF(arg=0, lineno=224)
DEBUG 2022-02-14 16:38:07,235 stack []
DEBUG 2022-02-14 16:38:07,235 dispatch pc=50, inst=POP_JUMP_IF_FALSE(arg=106, lineno=224)
DEBUG 2022-02-14 16:38:07,235 stack ['$48load_deref.0']
DEBUG 2022-02-14 16:38:07,235 end state. edges=[Edge(pc=52, stack=(), blockstack=(), npush=0), Edge(pc=106, stack=(), blockstack=(), npush=0)]
DEBUG 2022-02-14 16:38:07,236 pending: deque([State(pc_initial=106 nstack_initial=0), State(pc_initial=52 nstack_initial=0), State(pc_initial=106 nstack_initial=0)])
DEBUG 2022-02-14 16:38:07,236 stack: []
DEBUG 2022-02-14 16:38:07,236 dispatch pc=106, inst=LOAD_FAST(arg=4, lineno=235)
DEBUG 2022-02-14 16:38:07,236 stack []
DEBUG 2022-02-14 16:38:07,236 dispatch pc=108, inst=LOAD_CONST(arg=7, lineno=235)
DEBUG 2022-02-14 16:38:07,236 stack ['$exp106.0']
DEBUG 2022-02-14 16:38:07,236 dispatch pc=110, inst=COMPARE_OP(arg=4, lineno=235)
DEBUG 2022-02-14 16:38:07,236 stack ['$exp106.0', '$const108.1']
DEBUG 2022-02-14 16:38:07,236 dispatch pc=112, inst=POP_JUMP_IF_FALSE(arg=130, lineno=235)
DEBUG 2022-02-14 16:38:07,236 stack ['$110compare_op.2']
DEBUG 2022-02-14 16:38:07,236 end state. edges=[Edge(pc=114, stack=(), blockstack=(), npush=0), Edge(pc=130, stack=(), blockstack=(), npush=0)]
DEBUG 2022-02-14 16:38:07,236 pending: deque([State(pc_initial=52 nstack_initial=0), State(pc_initial=106 nstack_initial=0), State(pc_initial=114 nstack_initial=0), State(pc_initial=130 nstack_initial=0)])
DEBUG 2022-02-14 16:38:07,236 stack: []
DEBUG 2022-02-14 16:38:07,236 dispatch pc=52, inst=LOAD_FAST(arg=0, lineno=225)
DEBUG 2022-02-14 16:38:07,236 stack []
DEBUG 2022-02-14 16:38:07,236 dispatch pc=54, inst=LOAD_CONST(arg=2, lineno=225)
DEBUG 2022-02-14 16:38:07,236 stack ['$a52.0']
DEBUG 2022-02-14 16:38:07,236 dispatch pc=56, inst=COMPARE_OP(arg=2, lineno=225)
DEBUG 2022-02-14 16:38:07,236 stack ['$a52.0', '$const54.1']
DEBUG 2022-02-14 16:38:07,236 dispatch pc=58, inst=POP_JUMP_IF_FALSE(arg=76, lineno=225)
DEBUG 2022-02-14 16:38:07,236 stack ['$56compare_op.2']
DEBUG 2022-02-14 16:38:07,236 end state. edges=[Edge(pc=60, stack=(), blockstack=(), npush=0), Edge(pc=76, stack=(), blockstack=(), npush=0)]
DEBUG 2022-02-14 16:38:07,236 pending: deque([State(pc_initial=106 nstack_initial=0), State(pc_initial=114 nstack_initial=0), State(pc_initial=130 nstack_initial=0), State(pc_initial=60 nstack_initial=0), State(pc_initial=76 nstack_initial=0)])
DEBUG 2022-02-14 16:38:07,236 pending: deque([State(pc_initial=114 nstack_initial=0), State(pc_initial=130 nstack_initial=0), State(pc_initial=60 nstack_initial=0), State(pc_initial=76 nstack_initial=0)])
DEBUG 2022-02-14 16:38:07,236 stack: []
DEBUG 2022-02-14 16:38:07,236 dispatch pc=114, inst=LOAD_GLOBAL(arg=2, lineno=237)
DEBUG 2022-02-14 16:38:07,237 stack []
DEBUG 2022-02-14 16:38:07,237 dispatch pc=116, inst=LOAD_METHOD(arg=3, lineno=237)
DEBUG 2022-02-14 16:38:07,237 stack ['$114load_global.0']
DEBUG 2022-02-14 16:38:07,237 dispatch pc=118, inst=LOAD_FAST(arg=0, lineno=237)
DEBUG 2022-02-14 16:38:07,237 stack ['$116load_method.1']
DEBUG 2022-02-14 16:38:07,237 dispatch pc=120, inst=LOAD_GLOBAL(arg=4, lineno=237)
DEBUG 2022-02-14 16:38:07,237 stack ['$116load_method.1', '$a118.2']
DEBUG 2022-02-14 16:38:07,237 dispatch pc=122, inst=LOAD_FAST(arg=1, lineno=237)
DEBUG 2022-02-14 16:38:07,237 stack ['$116load_method.1', '$a118.2', '$120load_global.3']
DEBUG 2022-02-14 16:38:07,237 dispatch pc=124, inst=CALL_FUNCTION(arg=1, lineno=237)
DEBUG 2022-02-14 16:38:07,237 stack ['$116load_method.1', '$a118.2', '$120load_global.3', '$b122.4']
DEBUG 2022-02-14 16:38:07,237 dispatch pc=126, inst=CALL_METHOD(arg=2, lineno=237)
DEBUG 2022-02-14 16:38:07,237 stack ['$116load_method.1', '$a118.2', '$124call_function.5']
DEBUG 2022-02-14 16:38:07,237 dispatch pc=128, inst=RETURN_VALUE(arg=None, lineno=237)
DEBUG 2022-02-14 16:38:07,237 stack ['$126call_method.6']
DEBUG 2022-02-14 16:38:07,237 end state. edges=[]
DEBUG 2022-02-14 16:38:07,237 pending: deque([State(pc_initial=130 nstack_initial=0), State(pc_initial=60 nstack_initial=0), State(pc_initial=76 nstack_initial=0)])
DEBUG 2022-02-14 16:38:07,237 stack: []
DEBUG 2022-02-14 16:38:07,237 dispatch pc=130, inst=LOAD_FAST(arg=4, lineno=238)
DEBUG 2022-02-14 16:38:07,237 stack []
DEBUG 2022-02-14 16:38:07,237 dispatch pc=132, inst=LOAD_CONST(arg=2, lineno=238)
DEBUG 2022-02-14 16:38:07,237 stack ['$exp130.0']
DEBUG 2022-02-14 16:38:07,237 dispatch pc=134, inst=COMPARE_OP(arg=3, lineno=238)
DEBUG 2022-02-14 16:38:07,237 stack ['$exp130.0', '$const132.1']
DEBUG 2022-02-14 16:38:07,237 dispatch pc=136, inst=POP_JUMP_IF_FALSE(arg=172, lineno=238)
DEBUG 2022-02-14 16:38:07,237 stack ['$134compare_op.2']
DEBUG 2022-02-14 16:38:07,238 end state. edges=[Edge(pc=138, stack=(), blockstack=(), npush=0), Edge(pc=172, stack=(), blockstack=(), npush=0)]
DEBUG 2022-02-14 16:38:07,238 pending: deque([State(pc_initial=60 nstack_initial=0), State(pc_initial=76 nstack_initial=0), State(pc_initial=138 nstack_initial=0), State(pc_initial=172 nstack_initial=0)])
DEBUG 2022-02-14 16:38:07,238 stack: []
DEBUG 2022-02-14 16:38:07,238 dispatch pc=60, inst=LOAD_DEREF(arg=2, lineno=226)
DEBUG 2022-02-14 16:38:07,238 stack []
DEBUG 2022-02-14 16:38:07,238 dispatch pc=62, inst=POP_JUMP_IF_FALSE(arg=68, lineno=226)
DEBUG 2022-02-14 16:38:07,238 stack ['$60load_deref.0']
DEBUG 2022-02-14 16:38:07,238 end state. edges=[Edge(pc=64, stack=(), blockstack=(), npush=0), Edge(pc=68, stack=(), blockstack=(), npush=0)]
DEBUG 2022-02-14 16:38:07,238 pending: deque([State(pc_initial=76 nstack_initial=0), State(pc_initial=138 nstack_initial=0), State(pc_initial=172 nstack_initial=0), State(pc_initial=64 nstack_initial=0), State(pc_initial=68 nstack_initial=0)])
DEBUG 2022-02-14 16:38:07,238 stack: []
DEBUG 2022-02-14 16:38:07,238 dispatch pc=76, inst=LOAD_FAST(arg=0, lineno=230)
DEBUG 2022-02-14 16:38:07,238 stack []
DEBUG 2022-02-14 16:38:07,238 dispatch pc=78, inst=LOAD_CONST(arg=1, lineno=230)
DEBUG 2022-02-14 16:38:07,238 stack ['$a76.0']
DEBUG 2022-02-14 16:38:07,238 dispatch pc=80, inst=COMPARE_OP(arg=3, lineno=230)
DEBUG 2022-02-14 16:38:07,238 stack ['$a76.0', '$const78.1']
DEBUG 2022-02-14 16:38:07,238 dispatch pc=82, inst=POP_JUMP_IF_FALSE(arg=106, lineno=230)
DEBUG 2022-02-14 16:38:07,238 stack ['$80compare_op.2']
DEBUG 2022-02-14 16:38:07,238 end state. edges=[Edge(pc=84, stack=(), blockstack=(), npush=0), Edge(pc=106, stack=(), blockstack=(), npush=0)]
DEBUG 2022-02-14 16:38:07,238 pending: deque([State(pc_initial=138 nstack_initial=0), State(pc_initial=172 nstack_initial=0), State(pc_initial=64 nstack_initial=0), State(pc_initial=68 nstack_initial=0), State(pc_initial=84 nstack_initial=0), State(pc_initial=106 nstack_initial=0)])
DEBUG 2022-02-14 16:38:07,238 stack: []
DEBUG 2022-02-14 16:38:07,238 dispatch pc=138, inst=LOAD_FAST(arg=4, lineno=239)
DEBUG 2022-02-14 16:38:07,238 stack []
DEBUG 2022-02-14 16:38:07,238 dispatch pc=140, inst=LOAD_CONST(arg=1, lineno=239)
DEBUG 2022-02-14 16:38:07,238 stack ['$exp138.0']
DEBUG 2022-02-14 16:38:07,239 dispatch pc=142, inst=BINARY_AND(arg=None, lineno=239)
DEBUG 2022-02-14 16:38:07,239 stack ['$exp138.0', '$const140.1']
DEBUG 2022-02-14 16:38:07,239 dispatch pc=144, inst=POP_JUMP_IF_FALSE(arg=154, lineno=239)
DEBUG 2022-02-14 16:38:07,239 stack ['$142binary_and.2']
DEBUG 2022-02-14 16:38:07,239 end state. edges=[Edge(pc=146, stack=(), blockstack=(), npush=0), Edge(pc=154, stack=(), blockstack=(), npush=0)]
DEBUG 2022-02-14 16:38:07,239 pending: deque([State(pc_initial=172 nstack_initial=0), State(pc_initial=64 nstack_initial=0), State(pc_initial=68 nstack_initial=0), State(pc_initial=84 nstack_initial=0), State(pc_initial=106 nstack_initial=0), State(pc_initial=146 nstack_initial=0), State(pc_initial=154 nstack_initial=0)])
DEBUG 2022-02-14 16:38:07,239 stack: []
DEBUG 2022-02-14 16:38:07,239 dispatch pc=172, inst=LOAD_FAST(arg=3, lineno=244)
DEBUG 2022-02-14 16:38:07,239 stack []
DEBUG 2022-02-14 16:38:07,239 dispatch pc=174, inst=POP_JUMP_IF_FALSE(arg=184, lineno=244)
DEBUG 2022-02-14 16:38:07,239 stack ['$invert172.0']
DEBUG 2022-02-14 16:38:07,239 end state. edges=[Edge(pc=176, stack=(), blockstack=(), npush=0), Edge(pc=184, stack=(), blockstack=(), npush=0)]
DEBUG 2022-02-14 16:38:07,239 pending: deque([State(pc_initial=64 nstack_initial=0), State(pc_initial=68 nstack_initial=0), State(pc_initial=84 nstack_initial=0), State(pc_initial=106 nstack_initial=0), State(pc_initial=146 nstack_initial=0), State(pc_initial=154 nstack_initial=0), State(pc_initial=176 nstack_initial=0), State(pc_initial=184 nstack_initial=0)])
DEBUG 2022-02-14 16:38:07,239 stack: []
DEBUG 2022-02-14 16:38:07,239 dispatch pc=64, inst=LOAD_DEREF(arg=2, lineno=227)
DEBUG 2022-02-14 16:38:07,239 stack []
DEBUG 2022-02-14 16:38:07,239 dispatch pc=66, inst=RETURN_VALUE(arg=None, lineno=227)
DEBUG 2022-02-14 16:38:07,239 stack ['$64load_deref.0']
DEBUG 2022-02-14 16:38:07,239 end state. edges=[]
DEBUG 2022-02-14 16:38:07,239 pending: deque([State(pc_initial=68 nstack_initial=0), State(pc_initial=84 nstack_initial=0), State(pc_initial=106 nstack_initial=0), State(pc_initial=146 nstack_initial=0), State(pc_initial=154 nstack_initial=0), State(pc_initial=176 nstack_initial=0), State(pc_initial=184 nstack_initial=0)])
DEBUG 2022-02-14 16:38:07,239 stack: []
DEBUG 2022-02-14 16:38:07,239 dispatch pc=68, inst=LOAD_GLOBAL(arg=1, lineno=229)
DEBUG 2022-02-14 16:38:07,239 stack []
DEBUG 2022-02-14 16:38:07,239 dispatch pc=70, inst=LOAD_CONST(arg=4, lineno=229)
DEBUG 2022-02-14 16:38:07,239 stack ['$68load_global.0']
DEBUG 2022-02-14 16:38:07,239 dispatch pc=72, inst=CALL_FUNCTION(arg=1, lineno=229)
DEBUG 2022-02-14 16:38:07,240 stack ['$68load_global.0', '$const70.1']
DEBUG 2022-02-14 16:38:07,240 dispatch pc=74, inst=RAISE_VARARGS(arg=1, lineno=229)
DEBUG 2022-02-14 16:38:07,240 stack ['$72call_function.2']
DEBUG 2022-02-14 16:38:07,240 end state. edges=[]
DEBUG 2022-02-14 16:38:07,240 pending: deque([State(pc_initial=84 nstack_initial=0), State(pc_initial=106 nstack_initial=0), State(pc_initial=146 nstack_initial=0), State(pc_initial=154 nstack_initial=0), State(pc_initial=176 nstack_initial=0), State(pc_initial=184 nstack_initial=0)])
DEBUG 2022-02-14 16:38:07,240 stack: []
DEBUG 2022-02-14 16:38:07,240 dispatch pc=84, inst=LOAD_FAST(arg=0, lineno=230)
DEBUG 2022-02-14 16:38:07,240 stack []
DEBUG 2022-02-14 16:38:07,240 dispatch pc=86, inst=LOAD_CONST(arg=5, lineno=230)
DEBUG 2022-02-14 16:38:07,240 stack ['$a84.0']
DEBUG 2022-02-14 16:38:07,240 dispatch pc=88, inst=COMPARE_OP(arg=3, lineno=230)
DEBUG 2022-02-14 16:38:07,240 stack ['$a84.0', '$const86.1']
DEBUG 2022-02-14 16:38:07,240 dispatch pc=90, inst=POP_JUMP_IF_FALSE(arg=106, lineno=230)
DEBUG 2022-02-14 16:38:07,240 stack ['$88compare_op.2']
DEBUG 2022-02-14 16:38:07,240 end state. edges=[Edge(pc=92, stack=(), blockstack=(), npush=0), Edge(pc=106, stack=(), blockstack=(), npush=0)]
DEBUG 2022-02-14 16:38:07,240 pending: deque([State(pc_initial=106 nstack_initial=0), State(pc_initial=146 nstack_initial=0), State(pc_initial=154 nstack_initial=0), State(pc_initial=176 nstack_initial=0), State(pc_initial=184 nstack_initial=0), State(pc_initial=92 nstack_initial=0), State(pc_initial=106 nstack_initial=0)])
DEBUG 2022-02-14 16:38:07,240 pending: deque([State(pc_initial=146 nstack_initial=0), State(pc_initial=154 nstack_initial=0), State(pc_initial=176 nstack_initial=0), State(pc_initial=184 nstack_initial=0), State(pc_initial=92 nstack_initial=0), State(pc_initial=106 nstack_initial=0)])
DEBUG 2022-02-14 16:38:07,240 stack: []
DEBUG 2022-02-14 16:38:07,240 dispatch pc=146, inst=LOAD_FAST(arg=2, lineno=240)
DEBUG 2022-02-14 16:38:07,240 stack []
DEBUG 2022-02-14 16:38:07,240 dispatch pc=148, inst=LOAD_FAST(arg=0, lineno=240)
DEBUG 2022-02-14 16:38:07,240 stack ['$r146.0']
DEBUG 2022-02-14 16:38:07,240 dispatch pc=150, inst=INPLACE_MULTIPLY(arg=None, lineno=240)
DEBUG 2022-02-14 16:38:07,240 stack ['$r146.0', '$a148.1']
DEBUG 2022-02-14 16:38:07,240 dispatch pc=152, inst=STORE_FAST(arg=2, lineno=240)
DEBUG 2022-02-14 16:38:07,240 stack ['$150inplace_multiply.2']
DEBUG 2022-02-14 16:38:07,241 end state. edges=[Edge(pc=154, stack=(), blockstack=(), npush=0)]
DEBUG 2022-02-14 16:38:07,241 pending: deque([State(pc_initial=154 nstack_initial=0), State(pc_initial=176 nstack_initial=0), State(pc_initial=184 nstack_initial=0), State(pc_initial=92 nstack_initial=0), State(pc_initial=106 nstack_initial=0), State(pc_initial=154 nstack_initial=0)])
DEBUG 2022-02-14 16:38:07,241 stack: []
DEBUG 2022-02-14 16:38:07,241 dispatch pc=154, inst=LOAD_FAST(arg=4, lineno=241)
DEBUG 2022-02-14 16:38:07,241 stack []
DEBUG 2022-02-14 16:38:07,241 dispatch pc=156, inst=LOAD_CONST(arg=1, lineno=241)
DEBUG 2022-02-14 16:38:07,241 stack ['$exp154.0']
DEBUG 2022-02-14 16:38:07,241 dispatch pc=158, inst=INPLACE_RSHIFT(arg=None, lineno=241)
DEBUG 2022-02-14 16:38:07,241 stack ['$exp154.0', '$const156.1']
DEBUG 2022-02-14 16:38:07,241 dispatch pc=160, inst=STORE_FAST(arg=4, lineno=241)
DEBUG 2022-02-14 16:38:07,241 stack ['$158inplace_rshift.2']
DEBUG 2022-02-14 16:38:07,241 dispatch pc=162, inst=LOAD_FAST(arg=0, lineno=242)
DEBUG 2022-02-14 16:38:07,241 stack []
DEBUG 2022-02-14 16:38:07,241 dispatch pc=164, inst=LOAD_FAST(arg=0, lineno=242)
DEBUG 2022-02-14 16:38:07,241 stack ['$a162.3']
DEBUG 2022-02-14 16:38:07,241 dispatch pc=166, inst=INPLACE_MULTIPLY(arg=None, lineno=242)
DEBUG 2022-02-14 16:38:07,241 stack ['$a162.3', '$a164.4']
DEBUG 2022-02-14 16:38:07,241 dispatch pc=168, inst=STORE_FAST(arg=0, lineno=242)
DEBUG 2022-02-14 16:38:07,241 stack ['$166inplace_multiply.5']
DEBUG 2022-02-14 16:38:07,241 dispatch pc=170, inst=JUMP_ABSOLUTE(arg=130, lineno=242)
DEBUG 2022-02-14 16:38:07,241 stack []
DEBUG 2022-02-14 16:38:07,241 end state. edges=[Edge(pc=130, stack=(), blockstack=(), npush=0)]
DEBUG 2022-02-14 16:38:07,242 pending: deque([State(pc_initial=176 nstack_initial=0), State(pc_initial=184 nstack_initial=0), State(pc_initial=92 nstack_initial=0), State(pc_initial=106 nstack_initial=0), State(pc_initial=154 nstack_initial=0), State(pc_initial=130 nstack_initial=0)])
DEBUG 2022-02-14 16:38:07,242 stack: []
DEBUG 2022-02-14 16:38:07,242 dispatch pc=176, inst=LOAD_CONST(arg=8, lineno=244)
DEBUG 2022-02-14 16:38:07,242 stack []
DEBUG 2022-02-14 16:38:07,242 dispatch pc=178, inst=LOAD_FAST(arg=2, lineno=244)
DEBUG 2022-02-14 16:38:07,242 stack ['$const176.0']
DEBUG 2022-02-14 16:38:07,242 dispatch pc=180, inst=BINARY_TRUE_DIVIDE(arg=None, lineno=244)
DEBUG 2022-02-14 16:38:07,242 stack ['$const176.0', '$r178.1']
DEBUG 2022-02-14 16:38:07,242 dispatch pc=182, inst=RETURN_VALUE(arg=None, lineno=244)
DEBUG 2022-02-14 16:38:07,242 stack ['$180binary_true_divide.2']
DEBUG 2022-02-14 16:38:07,242 end state. edges=[]
DEBUG 2022-02-14 16:38:07,242 pending: deque([State(pc_initial=184 nstack_initial=0), State(pc_initial=92 nstack_initial=0), State(pc_initial=106 nstack_initial=0), State(pc_initial=154 nstack_initial=0), State(pc_initial=130 nstack_initial=0)])
DEBUG 2022-02-14 16:38:07,242 stack: []
DEBUG 2022-02-14 16:38:07,243 dispatch pc=184, inst=LOAD_FAST(arg=2, lineno=244)
DEBUG 2022-02-14 16:38:07,243 stack []
DEBUG 2022-02-14 16:38:07,243 dispatch pc=186, inst=RETURN_VALUE(arg=None, lineno=244)
DEBUG 2022-02-14 16:38:07,243 stack ['$r184.0']
DEBUG 2022-02-14 16:38:07,243 end state. edges=[]
DEBUG 2022-02-14 16:38:07,243 pending: deque([State(pc_initial=92 nstack_initial=0), State(pc_initial=106 nstack_initial=0), State(pc_initial=154 nstack_initial=0), State(pc_initial=130 nstack_initial=0)])
DEBUG 2022-02-14 16:38:07,243 stack: []
DEBUG 2022-02-14 16:38:07,243 dispatch pc=92, inst=LOAD_CONST(arg=2, lineno=231)
DEBUG 2022-02-14 16:38:07,243 stack []
DEBUG 2022-02-14 16:38:07,243 dispatch pc=94, inst=RETURN_VALUE(arg=None, lineno=231)
DEBUG 2022-02-14 16:38:07,243 stack ['$const92.0']
DEBUG 2022-02-14 16:38:07,243 end state. edges=[]
DEBUG 2022-02-14 16:38:07,243 pending: deque([State(pc_initial=106 nstack_initial=0), State(pc_initial=154 nstack_initial=0), State(pc_initial=130 nstack_initial=0)])
DEBUG 2022-02-14 16:38:07,243 pending: deque([State(pc_initial=154 nstack_initial=0), State(pc_initial=130 nstack_initial=0)])
DEBUG 2022-02-14 16:38:07,244 pending: deque([State(pc_initial=130 nstack_initial=0)])
DEBUG 2022-02-14 16:38:07,244 -------------------------Prune PHIs-------------------------
DEBUG 2022-02-14 16:38:07,244 Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=26 nstack_initial=0): set(),
             State(pc_initial=44 nstack_initial=0): set(),
             State(pc_initial=48 nstack_initial=0): set(),
             State(pc_initial=52 nstack_initial=0): set(),
             State(pc_initial=60 nstack_initial=0): set(),
             State(pc_initial=64 nstack_initial=0): set(),
             State(pc_initial=68 nstack_initial=0): set(),
             State(pc_initial=76 nstack_initial=0): set(),
             State(pc_initial=84 nstack_initial=0): set(),
             State(pc_initial=92 nstack_initial=0): set(),
             State(pc_initial=98 nstack_initial=0): set(),
             State(pc_initial=106 nstack_initial=0): set(),
             State(pc_initial=114 nstack_initial=0): set(),
             State(pc_initial=130 nstack_initial=0): set(),
             State(pc_initial=138 nstack_initial=0): set(),
             State(pc_initial=146 nstack_initial=0): set(),
             State(pc_initial=154 nstack_initial=0): set(),
             State(pc_initial=172 nstack_initial=0): set(),
             State(pc_initial=176 nstack_initial=0): set(),
             State(pc_initial=184 nstack_initial=0): set()})
DEBUG 2022-02-14 16:38:07,245 defmap: {}
DEBUG 2022-02-14 16:38:07,245 phismap: defaultdict(<class 'set'>, {})
DEBUG 2022-02-14 16:38:07,245 changing phismap: defaultdict(<class 'set'>, {})
DEBUG 2022-02-14 16:38:07,245 keep phismap: {}
DEBUG 2022-02-14 16:38:07,245 new_out: defaultdict(<class 'dict'>, {})
DEBUG 2022-02-14 16:38:07,245 ----------------------DONE Prune PHIs-----------------------
DEBUG 2022-02-14 16:38:07,245 block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$2load_deref.0'}), (4, {'res': '$const4.1'}), (6, {'func': '$2load_deref.0', 'args': ['$const4.1'], 'res': '$6call_function.2'}), (8, {'value': '$6call_function.2'}), (10, {'res': '$10load_deref.3'}), (12, {'res': '$a12.4'}), (14, {'func': '$10load_deref.3', 'args': ['$a12.4'], 'res': '$14call_function.5'}), (16, {'value': '$14call_function.5'}), (18, {'res': '$b18.6'}), (20, {'res': '$const20.7'}), (22, {'lhs': '$b18.6', 'rhs': '$const20.7', 'res': '$22compare_op.8'}), (24, {'pred': '$22compare_op.8'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={26: (), 98: ()})
DEBUG 2022-02-14 16:38:07,245 block_infos State(pc_initial=26 nstack_initial=0):
AdaptBlockInfo(insts=((26, {'res': '$const26.0'}), (28, {'value': '$const26.0'}), (30, {'res': '$b30.1'}), (32, {'value': '$b30.1', 'res': '$32unary_negative.2'}), (34, {'value': '$32unary_negative.2'}), (36, {'res': '$exp36.3'}), (38, {'res': '$const38.4'}), (40, {'lhs': '$exp36.3', 'rhs': '$const38.4', 'res': '$40compare_op.5'}), (42, {'pred': '$40compare_op.5'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={44: (), 48: ()})
DEBUG 2022-02-14 16:38:07,246 block_infos State(pc_initial=44 nstack_initial=0):
AdaptBlockInfo(insts=((44, {'res': '$44load_global.0'}), (46, {'exc': '$44load_global.0'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG 2022-02-14 16:38:07,246 block_infos State(pc_initial=48 nstack_initial=0):
AdaptBlockInfo(insts=((48, {'res': '$48load_deref.0'}), (50, {'pred': '$48load_deref.0'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={52: (), 106: ()})
DEBUG 2022-02-14 16:38:07,246 block_infos State(pc_initial=52 nstack_initial=0):
AdaptBlockInfo(insts=((52, {'res': '$a52.0'}), (54, {'res': '$const54.1'}), (56, {'lhs': '$a52.0', 'rhs': '$const54.1', 'res': '$56compare_op.2'}), (58, {'pred': '$56compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={60: (), 76: ()})
DEBUG 2022-02-14 16:38:07,246 block_infos State(pc_initial=60 nstack_initial=0):
AdaptBlockInfo(insts=((60, {'res': '$60load_deref.0'}), (62, {'pred': '$60load_deref.0'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={64: (), 68: ()})
DEBUG 2022-02-14 16:38:07,246 block_infos State(pc_initial=64 nstack_initial=0):
AdaptBlockInfo(insts=((64, {'res': '$64load_deref.0'}), (66, {'retval': '$64load_deref.0', 'castval': '$66return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG 2022-02-14 16:38:07,246 block_infos State(pc_initial=68 nstack_initial=0):
AdaptBlockInfo(insts=((68, {'res': '$68load_global.0'}), (70, {'res': '$const70.1'}), (72, {'func': '$68load_global.0', 'args': ['$const70.1'], 'res': '$72call_function.2'}), (74, {'exc': '$72call_function.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG 2022-02-14 16:38:07,246 block_infos State(pc_initial=76 nstack_initial=0):
AdaptBlockInfo(insts=((76, {'res': '$a76.0'}), (78, {'res': '$const78.1'}), (80, {'lhs': '$a76.0', 'rhs': '$const78.1', 'res': '$80compare_op.2'}), (82, {'pred': '$80compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={84: (), 106: ()})
DEBUG 2022-02-14 16:38:07,246 block_infos State(pc_initial=84 nstack_initial=0):
AdaptBlockInfo(insts=((84, {'res': '$a84.0'}), (86, {'res': '$const86.1'}), (88, {'lhs': '$a84.0', 'rhs': '$const86.1', 'res': '$88compare_op.2'}), (90, {'pred': '$88compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={92: (), 106: ()})
DEBUG 2022-02-14 16:38:07,246 block_infos State(pc_initial=92 nstack_initial=0):
AdaptBlockInfo(insts=((92, {'res': '$const92.0'}), (94, {'retval': '$const92.0', 'castval': '$94return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG 2022-02-14 16:38:07,246 block_infos State(pc_initial=98 nstack_initial=0):
AdaptBlockInfo(insts=((98, {'res': '$const98.0'}), (100, {'value': '$const98.0'}), (102, {'res': '$b102.1'}), (104, {'value': '$b102.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={106: ()})
DEBUG 2022-02-14 16:38:07,246 block_infos State(pc_initial=106 nstack_initial=0):
AdaptBlockInfo(insts=((106, {'res': '$exp106.0'}), (108, {'res': '$const108.1'}), (110, {'lhs': '$exp106.0', 'rhs': '$const108.1', 'res': '$110compare_op.2'}), (112, {'pred': '$110compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={114: (), 130: ()})
DEBUG 2022-02-14 16:38:07,246 block_infos State(pc_initial=114 nstack_initial=0):
AdaptBlockInfo(insts=((114, {'res': '$114load_global.0'}), (116, {'item': '$114load_global.0', 'res': '$116load_method.1'}), (118, {'res': '$a118.2'}), (120, {'res': '$120load_global.3'}), (122, {'res': '$b122.4'}), (124, {'func': '$120load_global.3', 'args': ['$b122.4'], 'res': '$124call_function.5'}), (126, {'func': '$116load_method.1', 'args': ['$a118.2', '$124call_function.5'], 'res': '$126call_method.6'}), (128, {'retval': '$126call_method.6', 'castval': '$128return_value.7'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG 2022-02-14 16:38:07,247 block_infos State(pc_initial=130 nstack_initial=0):
AdaptBlockInfo(insts=((130, {'res': '$exp130.0'}), (132, {'res': '$const132.1'}), (134, {'lhs': '$exp130.0', 'rhs': '$const132.1', 'res': '$134compare_op.2'}), (136, {'pred': '$134compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={138: (), 172: ()})
DEBUG 2022-02-14 16:38:07,247 block_infos State(pc_initial=138 nstack_initial=0):
AdaptBlockInfo(insts=((138, {'res': '$exp138.0'}), (140, {'res': '$const140.1'}), (142, {'lhs': '$exp138.0', 'rhs': '$const140.1', 'res': '$142binary_and.2'}), (144, {'pred': '$142binary_and.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={146: (), 154: ()})
DEBUG 2022-02-14 16:38:07,247 block_infos State(pc_initial=146 nstack_initial=0):
AdaptBlockInfo(insts=((146, {'res': '$r146.0'}), (148, {'res': '$a148.1'}), (150, {'lhs': '$r146.0', 'rhs': '$a148.1', 'res': '$150inplace_multiply.2'}), (152, {'value': '$150inplace_multiply.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={154: ()})
DEBUG 2022-02-14 16:38:07,247 block_infos State(pc_initial=154 nstack_initial=0):
AdaptBlockInfo(insts=((154, {'res': '$exp154.0'}), (156, {'res': '$const156.1'}), (158, {'lhs': '$exp154.0', 'rhs': '$const156.1', 'res': '$158inplace_rshift.2'}), (160, {'value': '$158inplace_rshift.2'}), (162, {'res': '$a162.3'}), (164, {'res': '$a164.4'}), (166, {'lhs': '$a162.3', 'rhs': '$a164.4', 'res': '$166inplace_multiply.5'}), (168, {'value': '$166inplace_multiply.5'}), (170, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={130: ()})
DEBUG 2022-02-14 16:38:07,247 block_infos State(pc_initial=172 nstack_initial=0):
AdaptBlockInfo(insts=((172, {'res': '$invert172.0'}), (174, {'pred': '$invert172.0'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={176: (), 184: ()})
DEBUG 2022-02-14 16:38:07,247 block_infos State(pc_initial=176 nstack_initial=0):
AdaptBlockInfo(insts=((176, {'res': '$const176.0'}), (178, {'res': '$r178.1'}), (180, {'lhs': '$const176.0', 'rhs': '$r178.1', 'res': '$180binary_true_divide.2'}), (182, {'retval': '$180binary_true_divide.2', 'castval': '$182return_value.3'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG 2022-02-14 16:38:07,247 block_infos State(pc_initial=184 nstack_initial=0):
AdaptBlockInfo(insts=((184, {'res': '$r184.0'}), (186, {'retval': '$r184.0', 'castval': '$186return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG 2022-02-14 16:38:07,250 label 0:
    a = arg(0, name=a)                       ['a']
    b = arg(1, name=b)                       ['b']
    $2load_deref.0 = freevar(tp: float64)    ['$2load_deref.0']
    $const4.1 = const(int, 1)                ['$const4.1']
    r = call $2load_deref.0($const4.1, func=$2load_deref.0, args=[Var($const4.1, numbers.py:217)], kws=(), vararg=None, target=None) ['$2load_deref.0', '$const4.1', 'r']
    $10load_deref.3 = freevar(tp: float64)   ['$10load_deref.3']
    a.1 = call $10load_deref.3(a, func=$10load_deref.3, args=[Var(a, numbers.py:217)], kws=(), vararg=None, target=None) ['$10load_deref.3', 'a', 'a.1']
    $const20.7 = const(int, 0)               ['$const20.7']
    $22compare_op.8 = b < $const20.7         ['$22compare_op.8', '$const20.7', 'b']
    bool24 = global(bool: <class 'bool'>)    ['bool24']
    $24pred = call bool24($22compare_op.8, func=bool24, args=(Var($22compare_op.8, numbers.py:219),), kws=(), vararg=None, target=None) ['$22compare_op.8', '$24pred', 'bool24']
    branch $24pred, 26, 98                   ['$24pred']
label 26:
    invert = const(bool, True)               ['invert']
    exp = unary(fn=<built-in function neg>, value=b) ['b', 'exp']
    $const38.4 = const(int, 0)               ['$const38.4']
    $40compare_op.5 = exp < $const38.4       ['$40compare_op.5', '$const38.4', 'exp']
    bool42 = global(bool: <class 'bool'>)    ['bool42']
    $42pred = call bool42($40compare_op.5, func=bool42, args=(Var($40compare_op.5, numbers.py:222),), kws=(), vararg=None, target=None) ['$40compare_op.5', '$42pred', 'bool42']
    branch $42pred, 44, 48                   ['$42pred']
label 44:
    $44load_global.0 = global(OverflowError: <class 'OverflowError'>) ['$44load_global.0']
    raise $44load_global.0                   ['$44load_global.0']
label 48:
    $48load_deref.0 = freevar(is_integer: False) ['$48load_deref.0']
    bool50 = global(bool: <class 'bool'>)    ['bool50']
    $50pred = call bool50($48load_deref.0, func=bool50, args=(Var($48load_deref.0, numbers.py:224),), kws=(), vararg=None, target=None) ['$48load_deref.0', '$50pred', 'bool50']
    branch $50pred, 52, 106                  ['$50pred']
label 52:
    $const54.1 = const(int, 0)               ['$const54.1']
    $56compare_op.2 = a.1 == $const54.1      ['$56compare_op.2', '$const54.1', 'a.1']
    bool58 = global(bool: <class 'bool'>)    ['bool58']
    $58pred = call bool58($56compare_op.2, func=bool58, args=(Var($56compare_op.2, numbers.py:225),), kws=(), vararg=None, target=None) ['$56compare_op.2', '$58pred', 'bool58']
    branch $58pred, 60, 76                   ['$58pred']
label 60:
    $60load_deref.0 = freevar(zerodiv_return: False) ['$60load_deref.0']
    bool62 = global(bool: <class 'bool'>)    ['bool62']
    $62pred = call bool62($60load_deref.0, func=bool62, args=(Var($60load_deref.0, numbers.py:226),), kws=(), vararg=None, target=None) ['$60load_deref.0', '$62pred', 'bool62']
    branch $62pred, 64, 68                   ['$62pred']
label 64:
    $64load_deref.0 = freevar(zerodiv_return: False) ['$64load_deref.0']
    $66return_value.1 = cast(value=$64load_deref.0) ['$64load_deref.0', '$66return_value.1']
    return $66return_value.1                 ['$66return_value.1']
label 68:
    $68load_global.0 = global(ZeroDivisionError: <class 'ZeroDivisionError'>) ['$68load_global.0']
    $const70.1 = const(str, 0 cannot be raised to a negative power) ['$const70.1']
    $72call_function.2 = call $68load_global.0($const70.1, func=$68load_global.0, args=[Var($const70.1, numbers.py:229)], kws=(), vararg=None, target=None) ['$68load_global.0', '$72call_function.2', '$const70.1']
    raise $72call_function.2                 ['$72call_function.2']
label 76:
    $const78.1 = const(int, 1)               ['$const78.1']
    $80compare_op.2 = a.1 != $const78.1      ['$80compare_op.2', '$const78.1', 'a.1']
    bool82 = global(bool: <class 'bool'>)    ['bool82']
    $82pred = call bool82($80compare_op.2, func=bool82, args=(Var($80compare_op.2, numbers.py:230),), kws=(), vararg=None, target=None) ['$80compare_op.2', '$82pred', 'bool82']
    branch $82pred, 84, 106                  ['$82pred']
label 84:
    $const86.1 = const(int, -1)              ['$const86.1']
    $88compare_op.2 = a.1 != $const86.1      ['$88compare_op.2', '$const86.1', 'a.1']
    bool90 = global(bool: <class 'bool'>)    ['bool90']
    $90pred = call bool90($88compare_op.2, func=bool90, args=(Var($88compare_op.2, numbers.py:230),), kws=(), vararg=None, target=None) ['$88compare_op.2', '$90pred', 'bool90']
    branch $90pred, 92, 106                  ['$90pred']
label 92:
    $const92.0 = const(int, 0)               ['$const92.0']
    $94return_value.1 = cast(value=$const92.0) ['$94return_value.1', '$const92.0']
    return $94return_value.1                 ['$94return_value.1']
label 98:
    invert = const(bool, False)              ['invert']
    exp = b                                  ['b', 'exp']
    jump 106                                 []
label 106:
    $const108.1 = const(int, 65536)          ['$const108.1']
    $110compare_op.2 = exp > $const108.1     ['$110compare_op.2', '$const108.1', 'exp']
    bool112 = global(bool: <class 'bool'>)   ['bool112']
    $112pred = call bool112($110compare_op.2, func=bool112, args=(Var($110compare_op.2, numbers.py:235),), kws=(), vararg=None, target=None) ['$110compare_op.2', '$112pred', 'bool112']
    branch $112pred, 114, 130                ['$112pred']
label 114:
    $114load_global.0 = global(math: <module 'math' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/lib-dynload/math.cpython-39-x86_64-linux-gnu.so'>) ['$114load_global.0']
    $116load_method.1 = getattr(value=$114load_global.0, attr=pow) ['$114load_global.0', '$116load_method.1']
    $120load_global.3 = global(float: <class 'float'>) ['$120load_global.3']
    $124call_function.5 = call $120load_global.3(b, func=$120load_global.3, args=[Var(b, numbers.py:217)], kws=(), vararg=None, target=None) ['$120load_global.3', '$124call_function.5', 'b']
    $126call_method.6 = call $116load_method.1(a.1, $124call_function.5, func=$116load_method.1, args=[Var(a.1, numbers.py:218), Var($124call_function.5, numbers.py:237)], kws=(), vararg=None, target=None) ['$116load_method.1', '$124call_function.5', '$126call_method.6', 'a.1']
    $128return_value.7 = cast(value=$126call_method.6) ['$126call_method.6', '$128return_value.7']
    return $128return_value.7                ['$128return_value.7']
label 130:
    $const132.1 = const(int, 0)              ['$const132.1']
    $134compare_op.2 = exp != $const132.1    ['$134compare_op.2', '$const132.1', 'exp']
    bool136 = global(bool: <class 'bool'>)   ['bool136']
    $136pred = call bool136($134compare_op.2, func=bool136, args=(Var($134compare_op.2, numbers.py:238),), kws=(), vararg=None, target=None) ['$134compare_op.2', '$136pred', 'bool136']
    branch $136pred, 138, 172                ['$136pred']
label 138:
    $const140.1 = const(int, 1)              ['$const140.1']
    $142binary_and.2 = exp & $const140.1     ['$142binary_and.2', '$const140.1', 'exp']
    bool144 = global(bool: <class 'bool'>)   ['bool144']
    $144pred = call bool144($142binary_and.2, func=bool144, args=(Var($142binary_and.2, numbers.py:239),), kws=(), vararg=None, target=None) ['$142binary_and.2', '$144pred', 'bool144']
    branch $144pred, 146, 154                ['$144pred']
label 146:
    $150inplace_multiply.2 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=r, rhs=a.1, static_lhs=Undefined, static_rhs=Undefined) ['$150inplace_multiply.2', 'a.1', 'r']
    r = $150inplace_multiply.2               ['$150inplace_multiply.2', 'r']
    jump 154                                 []
label 154:
    $const156.1 = const(int, 1)              ['$const156.1']
    $158inplace_rshift.2 = inplace_binop(fn=<built-in function irshift>, immutable_fn=<built-in function rshift>, lhs=exp, rhs=$const156.1, static_lhs=Undefined, static_rhs=Undefined) ['$158inplace_rshift.2', '$const156.1', 'exp']
    exp = $158inplace_rshift.2               ['$158inplace_rshift.2', 'exp']
    $166inplace_multiply.5 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=a.1, rhs=a.1, static_lhs=Undefined, static_rhs=Undefined) ['$166inplace_multiply.5', 'a.1', 'a.1']
    a.1 = $166inplace_multiply.5             ['$166inplace_multiply.5', 'a.1']
    jump 130                                 []
label 172:
    bool174 = global(bool: <class 'bool'>)   ['bool174']
    $174pred = call bool174(invert, func=bool174, args=(Var(invert, numbers.py:220),), kws=(), vararg=None, target=None) ['$174pred', 'bool174', 'invert']
    branch $174pred, 176, 184                ['$174pred']
label 176:
    $const176.0 = const(float, 1.0)          ['$const176.0']
    $180binary_true_divide.2 = $const176.0 / r ['$180binary_true_divide.2', '$const176.0', 'r']
    $182return_value.3 = cast(value=$180binary_true_divide.2) ['$180binary_true_divide.2', '$182return_value.3']
    return $182return_value.3                ['$182return_value.3']
label 184:
    $186return_value.1 = cast(value=r)       ['$186return_value.1', 'r']
    return $186return_value.1                ['$186return_value.1']

DEBUG 2022-02-14 16:38:07,258 ==== SSA block analysis pass on 0
DEBUG 2022-02-14 16:38:07,258 Running <numba.core.ssa._GatherDefsHandler object at 0x7fa046131f10>
DEBUG 2022-02-14 16:38:07,258 on stmt: a = arg(0, name=a)
DEBUG 2022-02-14 16:38:07,258 on stmt: b = arg(1, name=b)
DEBUG 2022-02-14 16:38:07,258 on stmt: $2load_deref.0 = freevar(tp: float64)
DEBUG 2022-02-14 16:38:07,258 on stmt: $const4.1 = const(int, 1)
DEBUG 2022-02-14 16:38:07,258 on stmt: r = call $2load_deref.0($const4.1, func=$2load_deref.0, args=[Var($const4.1, numbers.py:217)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:07,258 on stmt: $10load_deref.3 = freevar(tp: float64)
DEBUG 2022-02-14 16:38:07,258 on stmt: a.1 = call $10load_deref.3(a, func=$10load_deref.3, args=[Var(a, numbers.py:217)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:07,258 on stmt: $const20.7 = const(int, 0)
DEBUG 2022-02-14 16:38:07,258 on stmt: $22compare_op.8 = b < $const20.7
DEBUG 2022-02-14 16:38:07,258 on stmt: bool24 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:38:07,258 on stmt: $24pred = call bool24($22compare_op.8, func=bool24, args=(Var($22compare_op.8, numbers.py:219),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:07,259 on stmt: branch $24pred, 26, 98
DEBUG 2022-02-14 16:38:07,259 ==== SSA block analysis pass on 26
DEBUG 2022-02-14 16:38:07,259 Running <numba.core.ssa._GatherDefsHandler object at 0x7fa046131f10>
DEBUG 2022-02-14 16:38:07,259 on stmt: invert = const(bool, True)
DEBUG 2022-02-14 16:38:07,259 on stmt: exp = unary(fn=<built-in function neg>, value=b)
DEBUG 2022-02-14 16:38:07,259 on stmt: $const38.4 = const(int, 0)
DEBUG 2022-02-14 16:38:07,259 on stmt: $40compare_op.5 = exp < $const38.4
DEBUG 2022-02-14 16:38:07,259 on stmt: bool42 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:38:07,259 on stmt: $42pred = call bool42($40compare_op.5, func=bool42, args=(Var($40compare_op.5, numbers.py:222),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:07,259 on stmt: branch $42pred, 44, 48
DEBUG 2022-02-14 16:38:07,259 ==== SSA block analysis pass on 44
DEBUG 2022-02-14 16:38:07,259 Running <numba.core.ssa._GatherDefsHandler object at 0x7fa046131f10>
DEBUG 2022-02-14 16:38:07,259 on stmt: $44load_global.0 = global(OverflowError: <class 'OverflowError'>)
DEBUG 2022-02-14 16:38:07,259 on stmt: <static> raise <class 'OverflowError'>
DEBUG 2022-02-14 16:38:07,260 ==== SSA block analysis pass on 48
DEBUG 2022-02-14 16:38:07,260 Running <numba.core.ssa._GatherDefsHandler object at 0x7fa046131f10>
DEBUG 2022-02-14 16:38:07,260 on stmt: $48load_deref.0 = freevar(is_integer: False)
DEBUG 2022-02-14 16:38:07,260 on stmt: bool50 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:38:07,260 on stmt: $50pred = call bool50($48load_deref.0, func=bool50, args=(Var($48load_deref.0, numbers.py:224),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:07,260 on stmt: jump 106
DEBUG 2022-02-14 16:38:07,260 ==== SSA block analysis pass on 98
DEBUG 2022-02-14 16:38:07,260 Running <numba.core.ssa._GatherDefsHandler object at 0x7fa046131f10>
DEBUG 2022-02-14 16:38:07,260 on stmt: invert = const(bool, False)
DEBUG 2022-02-14 16:38:07,260 on stmt: exp = b
DEBUG 2022-02-14 16:38:07,260 on stmt: jump 106
DEBUG 2022-02-14 16:38:07,260 ==== SSA block analysis pass on 106
DEBUG 2022-02-14 16:38:07,260 Running <numba.core.ssa._GatherDefsHandler object at 0x7fa046131f10>
DEBUG 2022-02-14 16:38:07,260 on stmt: $const108.1 = const(int, 65536)
DEBUG 2022-02-14 16:38:07,261 on stmt: $110compare_op.2 = exp > $const108.1
DEBUG 2022-02-14 16:38:07,261 on stmt: bool112 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:38:07,261 on stmt: $112pred = call bool112($110compare_op.2, func=bool112, args=(Var($110compare_op.2, numbers.py:235),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:07,261 on stmt: branch $112pred, 114, 130
DEBUG 2022-02-14 16:38:07,261 ==== SSA block analysis pass on 114
DEBUG 2022-02-14 16:38:07,261 Running <numba.core.ssa._GatherDefsHandler object at 0x7fa046131f10>
DEBUG 2022-02-14 16:38:07,261 on stmt: $114load_global.0 = global(math: <module 'math' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/lib-dynload/math.cpython-39-x86_64-linux-gnu.so'>)
DEBUG 2022-02-14 16:38:07,261 on stmt: $116load_method.1 = getattr(value=$114load_global.0, attr=pow)
DEBUG 2022-02-14 16:38:07,261 on stmt: $120load_global.3 = global(float: <class 'float'>)
DEBUG 2022-02-14 16:38:07,261 on stmt: $124call_function.5 = call $120load_global.3(b, func=$120load_global.3, args=[Var(b, numbers.py:217)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:07,261 on stmt: $126call_method.6 = call $116load_method.1(a.1, $124call_function.5, func=$116load_method.1, args=[Var(a.1, numbers.py:218), Var($124call_function.5, numbers.py:237)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:07,261 on stmt: $128return_value.7 = cast(value=$126call_method.6)
DEBUG 2022-02-14 16:38:07,261 on stmt: return $128return_value.7
DEBUG 2022-02-14 16:38:07,262 ==== SSA block analysis pass on 130
DEBUG 2022-02-14 16:38:07,262 Running <numba.core.ssa._GatherDefsHandler object at 0x7fa046131f10>
DEBUG 2022-02-14 16:38:07,262 on stmt: $const132.1 = const(int, 0)
DEBUG 2022-02-14 16:38:07,262 on stmt: $134compare_op.2 = exp != $const132.1
DEBUG 2022-02-14 16:38:07,262 on stmt: bool136 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:38:07,262 on stmt: $136pred = call bool136($134compare_op.2, func=bool136, args=(Var($134compare_op.2, numbers.py:238),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:07,262 on stmt: branch $136pred, 138, 172
DEBUG 2022-02-14 16:38:07,262 ==== SSA block analysis pass on 138
DEBUG 2022-02-14 16:38:07,262 Running <numba.core.ssa._GatherDefsHandler object at 0x7fa046131f10>
DEBUG 2022-02-14 16:38:07,262 on stmt: $const140.1 = const(int, 1)
DEBUG 2022-02-14 16:38:07,262 on stmt: $142binary_and.2 = exp & $const140.1
DEBUG 2022-02-14 16:38:07,262 on stmt: bool144 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:38:07,262 on stmt: $144pred = call bool144($142binary_and.2, func=bool144, args=(Var($142binary_and.2, numbers.py:239),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:07,263 on stmt: branch $144pred, 146, 154
DEBUG 2022-02-14 16:38:07,263 ==== SSA block analysis pass on 146
DEBUG 2022-02-14 16:38:07,263 Running <numba.core.ssa._GatherDefsHandler object at 0x7fa046131f10>
DEBUG 2022-02-14 16:38:07,263 on stmt: $150inplace_multiply.2 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=r, rhs=a.1, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:38:07,263 on stmt: r = $150inplace_multiply.2
DEBUG 2022-02-14 16:38:07,263 on stmt: jump 154
DEBUG 2022-02-14 16:38:07,263 ==== SSA block analysis pass on 154
DEBUG 2022-02-14 16:38:07,263 Running <numba.core.ssa._GatherDefsHandler object at 0x7fa046131f10>
DEBUG 2022-02-14 16:38:07,263 on stmt: $const156.1 = const(int, 1)
DEBUG 2022-02-14 16:38:07,263 on stmt: $158inplace_rshift.2 = inplace_binop(fn=<built-in function irshift>, immutable_fn=<built-in function rshift>, lhs=exp, rhs=$const156.1, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:38:07,263 on stmt: exp = $158inplace_rshift.2
DEBUG 2022-02-14 16:38:07,263 on stmt: $166inplace_multiply.5 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=a.1, rhs=a.1, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:38:07,263 on stmt: a.1 = $166inplace_multiply.5
DEBUG 2022-02-14 16:38:07,263 on stmt: jump 130
DEBUG 2022-02-14 16:38:07,263 ==== SSA block analysis pass on 172
DEBUG 2022-02-14 16:38:07,264 Running <numba.core.ssa._GatherDefsHandler object at 0x7fa046131f10>
DEBUG 2022-02-14 16:38:07,264 on stmt: bool174 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:38:07,264 on stmt: $174pred = call bool174(invert, func=bool174, args=(Var(invert, numbers.py:220),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:07,264 on stmt: branch $174pred, 176, 184
DEBUG 2022-02-14 16:38:07,264 ==== SSA block analysis pass on 176
DEBUG 2022-02-14 16:38:07,264 Running <numba.core.ssa._GatherDefsHandler object at 0x7fa046131f10>
DEBUG 2022-02-14 16:38:07,264 on stmt: $const176.0 = const(float, 1.0)
DEBUG 2022-02-14 16:38:07,264 on stmt: $180binary_true_divide.2 = $const176.0 / r
DEBUG 2022-02-14 16:38:07,264 on stmt: $182return_value.3 = cast(value=$180binary_true_divide.2)
DEBUG 2022-02-14 16:38:07,264 on stmt: return $182return_value.3
DEBUG 2022-02-14 16:38:07,264 ==== SSA block analysis pass on 184
DEBUG 2022-02-14 16:38:07,264 Running <numba.core.ssa._GatherDefsHandler object at 0x7fa046131f10>
DEBUG 2022-02-14 16:38:07,264 on stmt: $186return_value.1 = cast(value=r)
DEBUG 2022-02-14 16:38:07,264 on stmt: return $186return_value.1
DEBUG 2022-02-14 16:38:07,265 defs defaultdict(<class 'list'>,
            {'$10load_deref.3': [<numba.core.ir.Assign object at 0x7fa046117370>],
             '$110compare_op.2': [<numba.core.ir.Assign object at 0x7fa046129640>],
             '$112pred': [<numba.core.ir.Assign object at 0x7fa0461298b0>],
             '$114load_global.0': [<numba.core.ir.Assign object at 0x7fa046129af0>],
             '$116load_method.1': [<numba.core.ir.Assign object at 0x7fa046129c70>],
             '$120load_global.3': [<numba.core.ir.Assign object at 0x7fa046129f10>],
             '$124call_function.5': [<numba.core.ir.Assign object at 0x7fa04612b250>],
             '$126call_method.6': [<numba.core.ir.Assign object at 0x7fa04612b400>],
             '$128return_value.7': [<numba.core.ir.Assign object at 0x7fa04612b4f0>],
             '$134compare_op.2': [<numba.core.ir.Assign object at 0x7fa04612b9a0>],
             '$136pred': [<numba.core.ir.Assign object at 0x7fa04612bc10>],
             '$142binary_and.2': [<numba.core.ir.Assign object at 0x7fa04612d160>],
             '$144pred': [<numba.core.ir.Assign object at 0x7fa04612d3d0>],
             '$150inplace_multiply.2': [<numba.core.ir.Assign object at 0x7fa04612d880>],
             '$158inplace_rshift.2': [<numba.core.ir.Assign object at 0x7fa04612ddc0>],
             '$166inplace_multiply.5': [<numba.core.ir.Assign object at 0x7fa04612f280>],
             '$174pred': [<numba.core.ir.Assign object at 0x7fa04612f730>],
             '$180binary_true_divide.2': [<numba.core.ir.Assign object at 0x7fa04612fc40>],
             '$182return_value.3': [<numba.core.ir.Assign object at 0x7fa04612fd90>],
             '$186return_value.1': [<numba.core.ir.Assign object at 0x7fa046131130>],
             '$22compare_op.8': [<numba.core.ir.Assign object at 0x7fa046117b80>],
             '$24pred': [<numba.core.ir.Assign object at 0x7fa046117df0>],
             '$2load_deref.0': [<numba.core.ir.Assign object at 0x7fa046124100>],
             '$40compare_op.5': [<numba.core.ir.Assign object at 0x7fa046114880>],
             '$42pred': [<numba.core.ir.Assign object at 0x7fa046114af0>],
             '$44load_global.0': [<numba.core.ir.Assign object at 0x7fa046114c10>],
             '$48load_deref.0': [<numba.core.ir.Assign object at 0x7fa046114f10>],
             '$50pred': [<numba.core.ir.Assign object at 0x7fa04610f1f0>],
             '$const108.1': [<numba.core.ir.Assign object at 0x7fa046129490>],
             '$const132.1': [<numba.core.ir.Assign object at 0x7fa04612b7f0>],
             '$const140.1': [<numba.core.ir.Assign object at 0x7fa04612bf70>],
             '$const156.1': [<numba.core.ir.Assign object at 0x7fa04612dc10>],
             '$const176.0': [<numba.core.ir.Assign object at 0x7fa04612f970>],
             '$const20.7': [<numba.core.ir.Assign object at 0x7fa0461179d0>],
             '$const38.4': [<numba.core.ir.Assign object at 0x7fa0461146d0>],
             '$const4.1': [<numba.core.ir.Assign object at 0x7fa046124f10>],
             'a': [<numba.core.ir.Assign object at 0x7fa046124ac0>],
             'a.1': [<numba.core.ir.Assign object at 0x7fa046117670>,
                     <numba.core.ir.Assign object at 0x7fa04612f340>],
             'b': [<numba.core.ir.Assign object at 0x7fa0461241c0>],
             'bool112': [<numba.core.ir.Assign object at 0x7fa046129790>],
             'bool136': [<numba.core.ir.Assign object at 0x7fa04612baf0>],
             'bool144': [<numba.core.ir.Assign object at 0x7fa04612d2b0>],
             'bool174': [<numba.core.ir.Assign object at 0x7fa04612f610>],
             'bool24': [<numba.core.ir.Assign object at 0x7fa046117cd0>],
             'bool42': [<numba.core.ir.Assign object at 0x7fa0461149d0>],
             'bool50': [<numba.core.ir.Assign object at 0x7fa04610f0d0>],
             'exp': [<numba.core.ir.Assign object at 0x7fa046114310>,
                     <numba.core.ir.Assign object at 0x7fa046129220>,
                     <numba.core.ir.Assign object at 0x7fa04612de80>],
             'invert': [<numba.core.ir.Assign object at 0x7fa046117f10>,
                        <numba.core.ir.Assign object at 0x7fa04610bf10>],
             'r': [<numba.core.ir.Assign object at 0x7fa046117130>,
                   <numba.core.ir.Assign object at 0x7fa04612d940>]})
DEBUG 2022-02-14 16:38:07,265 SSA violators {'a.1', 'exp', 'invert', 'r'}
DEBUG 2022-02-14 16:38:07,266 Fix SSA violator on var a.1
DEBUG 2022-02-14 16:38:07,266 ==== SSA block rewrite pass on 0
DEBUG 2022-02-14 16:38:07,266 Running <numba.core.ssa._FreshVarHandler object at 0x7fa04630ebb0>
DEBUG 2022-02-14 16:38:07,266 on stmt: a = arg(0, name=a)
DEBUG 2022-02-14 16:38:07,266 on stmt: b = arg(1, name=b)
DEBUG 2022-02-14 16:38:07,266 on stmt: $2load_deref.0 = freevar(tp: float64)
DEBUG 2022-02-14 16:38:07,266 on stmt: $const4.1 = const(int, 1)
DEBUG 2022-02-14 16:38:07,266 on stmt: r = call $2load_deref.0($const4.1, func=$2load_deref.0, args=[Var($const4.1, numbers.py:217)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:07,266 on stmt: $10load_deref.3 = freevar(tp: float64)
DEBUG 2022-02-14 16:38:07,266 on stmt: a.1 = call $10load_deref.3(a, func=$10load_deref.3, args=[Var(a, numbers.py:217)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:07,266 first assign: a.1
DEBUG 2022-02-14 16:38:07,266 replaced with: a.1 = call $10load_deref.3(a, func=$10load_deref.3, args=[Var(a, numbers.py:217)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:07,266 on stmt: $const20.7 = const(int, 0)
DEBUG 2022-02-14 16:38:07,266 on stmt: $22compare_op.8 = b < $const20.7
DEBUG 2022-02-14 16:38:07,266 on stmt: bool24 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:38:07,266 on stmt: $24pred = call bool24($22compare_op.8, func=bool24, args=(Var($22compare_op.8, numbers.py:219),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:07,266 on stmt: branch $24pred, 26, 98
DEBUG 2022-02-14 16:38:07,266 ==== SSA block rewrite pass on 26
DEBUG 2022-02-14 16:38:07,266 Running <numba.core.ssa._FreshVarHandler object at 0x7fa04630ebb0>
DEBUG 2022-02-14 16:38:07,266 on stmt: invert = const(bool, True)
DEBUG 2022-02-14 16:38:07,266 on stmt: exp = unary(fn=<built-in function neg>, value=b)
DEBUG 2022-02-14 16:38:07,267 on stmt: $const38.4 = const(int, 0)
DEBUG 2022-02-14 16:38:07,267 on stmt: $40compare_op.5 = exp < $const38.4
DEBUG 2022-02-14 16:38:07,267 on stmt: bool42 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:38:07,267 on stmt: $42pred = call bool42($40compare_op.5, func=bool42, args=(Var($40compare_op.5, numbers.py:222),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:07,267 on stmt: branch $42pred, 44, 48
DEBUG 2022-02-14 16:38:07,267 ==== SSA block rewrite pass on 44
DEBUG 2022-02-14 16:38:07,267 Running <numba.core.ssa._FreshVarHandler object at 0x7fa04630ebb0>
DEBUG 2022-02-14 16:38:07,267 on stmt: $44load_global.0 = global(OverflowError: <class 'OverflowError'>)
DEBUG 2022-02-14 16:38:07,267 on stmt: <static> raise <class 'OverflowError'>
DEBUG 2022-02-14 16:38:07,267 ==== SSA block rewrite pass on 48
DEBUG 2022-02-14 16:38:07,267 Running <numba.core.ssa._FreshVarHandler object at 0x7fa04630ebb0>
DEBUG 2022-02-14 16:38:07,267 on stmt: $48load_deref.0 = freevar(is_integer: False)
DEBUG 2022-02-14 16:38:07,267 on stmt: bool50 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:38:07,267 on stmt: $50pred = call bool50($48load_deref.0, func=bool50, args=(Var($48load_deref.0, numbers.py:224),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:07,267 on stmt: jump 106
DEBUG 2022-02-14 16:38:07,267 ==== SSA block rewrite pass on 98
DEBUG 2022-02-14 16:38:07,267 Running <numba.core.ssa._FreshVarHandler object at 0x7fa04630ebb0>
DEBUG 2022-02-14 16:38:07,267 on stmt: invert = const(bool, False)
DEBUG 2022-02-14 16:38:07,267 on stmt: exp = b
DEBUG 2022-02-14 16:38:07,267 on stmt: jump 106
DEBUG 2022-02-14 16:38:07,267 ==== SSA block rewrite pass on 106
DEBUG 2022-02-14 16:38:07,267 Running <numba.core.ssa._FreshVarHandler object at 0x7fa04630ebb0>
DEBUG 2022-02-14 16:38:07,267 on stmt: $const108.1 = const(int, 65536)
DEBUG 2022-02-14 16:38:07,267 on stmt: $110compare_op.2 = exp > $const108.1
DEBUG 2022-02-14 16:38:07,267 on stmt: bool112 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:38:07,267 on stmt: $112pred = call bool112($110compare_op.2, func=bool112, args=(Var($110compare_op.2, numbers.py:235),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:07,268 on stmt: branch $112pred, 114, 130
DEBUG 2022-02-14 16:38:07,268 ==== SSA block rewrite pass on 114
DEBUG 2022-02-14 16:38:07,268 Running <numba.core.ssa._FreshVarHandler object at 0x7fa04630ebb0>
DEBUG 2022-02-14 16:38:07,268 on stmt: $114load_global.0 = global(math: <module 'math' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/lib-dynload/math.cpython-39-x86_64-linux-gnu.so'>)
DEBUG 2022-02-14 16:38:07,268 on stmt: $116load_method.1 = getattr(value=$114load_global.0, attr=pow)
DEBUG 2022-02-14 16:38:07,268 on stmt: $120load_global.3 = global(float: <class 'float'>)
DEBUG 2022-02-14 16:38:07,268 on stmt: $124call_function.5 = call $120load_global.3(b, func=$120load_global.3, args=[Var(b, numbers.py:217)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:07,268 on stmt: $126call_method.6 = call $116load_method.1(a.1, $124call_function.5, func=$116load_method.1, args=[Var(a.1, numbers.py:218), Var($124call_function.5, numbers.py:237)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:07,268 on stmt: $128return_value.7 = cast(value=$126call_method.6)
DEBUG 2022-02-14 16:38:07,268 on stmt: return $128return_value.7
DEBUG 2022-02-14 16:38:07,268 ==== SSA block rewrite pass on 130
DEBUG 2022-02-14 16:38:07,268 Running <numba.core.ssa._FreshVarHandler object at 0x7fa04630ebb0>
DEBUG 2022-02-14 16:38:07,268 on stmt: $const132.1 = const(int, 0)
DEBUG 2022-02-14 16:38:07,268 on stmt: $134compare_op.2 = exp != $const132.1
DEBUG 2022-02-14 16:38:07,268 on stmt: bool136 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:38:07,268 on stmt: $136pred = call bool136($134compare_op.2, func=bool136, args=(Var($134compare_op.2, numbers.py:238),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:07,268 on stmt: branch $136pred, 138, 172
DEBUG 2022-02-14 16:38:07,268 ==== SSA block rewrite pass on 138
DEBUG 2022-02-14 16:38:07,268 Running <numba.core.ssa._FreshVarHandler object at 0x7fa04630ebb0>
DEBUG 2022-02-14 16:38:07,268 on stmt: $const140.1 = const(int, 1)
DEBUG 2022-02-14 16:38:07,268 on stmt: $142binary_and.2 = exp & $const140.1
DEBUG 2022-02-14 16:38:07,268 on stmt: bool144 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:38:07,268 on stmt: $144pred = call bool144($142binary_and.2, func=bool144, args=(Var($142binary_and.2, numbers.py:239),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:07,268 on stmt: branch $144pred, 146, 154
DEBUG 2022-02-14 16:38:07,268 ==== SSA block rewrite pass on 146
DEBUG 2022-02-14 16:38:07,269 Running <numba.core.ssa._FreshVarHandler object at 0x7fa04630ebb0>
DEBUG 2022-02-14 16:38:07,269 on stmt: $150inplace_multiply.2 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=r, rhs=a.1, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:38:07,269 on stmt: r = $150inplace_multiply.2
DEBUG 2022-02-14 16:38:07,269 on stmt: jump 154
DEBUG 2022-02-14 16:38:07,269 ==== SSA block rewrite pass on 154
DEBUG 2022-02-14 16:38:07,269 Running <numba.core.ssa._FreshVarHandler object at 0x7fa04630ebb0>
DEBUG 2022-02-14 16:38:07,269 on stmt: $const156.1 = const(int, 1)
DEBUG 2022-02-14 16:38:07,269 on stmt: $158inplace_rshift.2 = inplace_binop(fn=<built-in function irshift>, immutable_fn=<built-in function rshift>, lhs=exp, rhs=$const156.1, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:38:07,269 on stmt: exp = $158inplace_rshift.2
DEBUG 2022-02-14 16:38:07,269 on stmt: $166inplace_multiply.5 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=a.1, rhs=a.1, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:38:07,269 on stmt: a.1 = $166inplace_multiply.5
DEBUG 2022-02-14 16:38:07,269 replaced with: a.1.1 = $166inplace_multiply.5
DEBUG 2022-02-14 16:38:07,269 on stmt: jump 130
DEBUG 2022-02-14 16:38:07,269 ==== SSA block rewrite pass on 172
DEBUG 2022-02-14 16:38:07,269 Running <numba.core.ssa._FreshVarHandler object at 0x7fa04630ebb0>
DEBUG 2022-02-14 16:38:07,269 on stmt: bool174 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:38:07,269 on stmt: $174pred = call bool174(invert, func=bool174, args=(Var(invert, numbers.py:220),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:07,269 on stmt: branch $174pred, 176, 184
DEBUG 2022-02-14 16:38:07,269 ==== SSA block rewrite pass on 176
DEBUG 2022-02-14 16:38:07,269 Running <numba.core.ssa._FreshVarHandler object at 0x7fa04630ebb0>
DEBUG 2022-02-14 16:38:07,269 on stmt: $const176.0 = const(float, 1.0)
DEBUG 2022-02-14 16:38:07,269 on stmt: $180binary_true_divide.2 = $const176.0 / r
DEBUG 2022-02-14 16:38:07,269 on stmt: $182return_value.3 = cast(value=$180binary_true_divide.2)
DEBUG 2022-02-14 16:38:07,269 on stmt: return $182return_value.3
DEBUG 2022-02-14 16:38:07,269 ==== SSA block rewrite pass on 184
DEBUG 2022-02-14 16:38:07,269 Running <numba.core.ssa._FreshVarHandler object at 0x7fa04630ebb0>
DEBUG 2022-02-14 16:38:07,269 on stmt: $186return_value.1 = cast(value=r)
DEBUG 2022-02-14 16:38:07,270 on stmt: return $186return_value.1
DEBUG 2022-02-14 16:38:07,270 Replaced assignments: defaultdict(<class 'list'>,
            {0: [<numba.core.ir.Assign object at 0x7fa04630efa0>],
             154: [<numba.core.ir.Assign object at 0x7fa046131550>]})
DEBUG 2022-02-14 16:38:07,270 ==== SSA block rewrite pass on 0
DEBUG 2022-02-14 16:38:07,270 Running <numba.core.ssa._FixSSAVars object at 0x7fa04630ebb0>
DEBUG 2022-02-14 16:38:07,270 on stmt: a = arg(0, name=a)
DEBUG 2022-02-14 16:38:07,270 on stmt: b = arg(1, name=b)
DEBUG 2022-02-14 16:38:07,270 on stmt: $2load_deref.0 = freevar(tp: float64)
DEBUG 2022-02-14 16:38:07,270 on stmt: $const4.1 = const(int, 1)
DEBUG 2022-02-14 16:38:07,270 on stmt: r = call $2load_deref.0($const4.1, func=$2load_deref.0, args=[Var($const4.1, numbers.py:217)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:07,270 on stmt: $10load_deref.3 = freevar(tp: float64)
DEBUG 2022-02-14 16:38:07,270 on stmt: a.1 = call $10load_deref.3(a, func=$10load_deref.3, args=[Var(a, numbers.py:217)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:07,270 on stmt: $const20.7 = const(int, 0)
DEBUG 2022-02-14 16:38:07,270 on stmt: $22compare_op.8 = b < $const20.7
DEBUG 2022-02-14 16:38:07,270 on stmt: bool24 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:38:07,270 on stmt: $24pred = call bool24($22compare_op.8, func=bool24, args=(Var($22compare_op.8, numbers.py:219),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:07,270 on stmt: branch $24pred, 26, 98
DEBUG 2022-02-14 16:38:07,270 ==== SSA block rewrite pass on 26
DEBUG 2022-02-14 16:38:07,270 Running <numba.core.ssa._FixSSAVars object at 0x7fa04630ebb0>
DEBUG 2022-02-14 16:38:07,270 on stmt: invert = const(bool, True)
DEBUG 2022-02-14 16:38:07,270 on stmt: exp = unary(fn=<built-in function neg>, value=b)
DEBUG 2022-02-14 16:38:07,271 on stmt: $const38.4 = const(int, 0)
DEBUG 2022-02-14 16:38:07,271 on stmt: $40compare_op.5 = exp < $const38.4
DEBUG 2022-02-14 16:38:07,271 on stmt: bool42 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:38:07,271 on stmt: $42pred = call bool42($40compare_op.5, func=bool42, args=(Var($40compare_op.5, numbers.py:222),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:07,271 on stmt: branch $42pred, 44, 48
DEBUG 2022-02-14 16:38:07,271 ==== SSA block rewrite pass on 44
DEBUG 2022-02-14 16:38:07,271 Running <numba.core.ssa._FixSSAVars object at 0x7fa04630ebb0>
DEBUG 2022-02-14 16:38:07,271 on stmt: $44load_global.0 = global(OverflowError: <class 'OverflowError'>)
DEBUG 2022-02-14 16:38:07,271 on stmt: <static> raise <class 'OverflowError'>
DEBUG 2022-02-14 16:38:07,271 ==== SSA block rewrite pass on 48
DEBUG 2022-02-14 16:38:07,271 Running <numba.core.ssa._FixSSAVars object at 0x7fa04630ebb0>
DEBUG 2022-02-14 16:38:07,271 on stmt: $48load_deref.0 = freevar(is_integer: False)
DEBUG 2022-02-14 16:38:07,271 on stmt: bool50 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:38:07,271 on stmt: $50pred = call bool50($48load_deref.0, func=bool50, args=(Var($48load_deref.0, numbers.py:224),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:07,271 on stmt: jump 106
DEBUG 2022-02-14 16:38:07,271 ==== SSA block rewrite pass on 98
DEBUG 2022-02-14 16:38:07,271 Running <numba.core.ssa._FixSSAVars object at 0x7fa04630ebb0>
DEBUG 2022-02-14 16:38:07,271 on stmt: invert = const(bool, False)
DEBUG 2022-02-14 16:38:07,272 on stmt: exp = b
DEBUG 2022-02-14 16:38:07,272 on stmt: jump 106
DEBUG 2022-02-14 16:38:07,272 ==== SSA block rewrite pass on 106
DEBUG 2022-02-14 16:38:07,272 Running <numba.core.ssa._FixSSAVars object at 0x7fa04630ebb0>
DEBUG 2022-02-14 16:38:07,272 on stmt: $const108.1 = const(int, 65536)
DEBUG 2022-02-14 16:38:07,272 on stmt: $110compare_op.2 = exp > $const108.1
DEBUG 2022-02-14 16:38:07,272 on stmt: bool112 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:38:07,272 on stmt: $112pred = call bool112($110compare_op.2, func=bool112, args=(Var($110compare_op.2, numbers.py:235),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:07,272 on stmt: branch $112pred, 114, 130
DEBUG 2022-02-14 16:38:07,272 ==== SSA block rewrite pass on 114
DEBUG 2022-02-14 16:38:07,272 Running <numba.core.ssa._FixSSAVars object at 0x7fa04630ebb0>
DEBUG 2022-02-14 16:38:07,272 on stmt: $114load_global.0 = global(math: <module 'math' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/lib-dynload/math.cpython-39-x86_64-linux-gnu.so'>)
DEBUG 2022-02-14 16:38:07,272 on stmt: $116load_method.1 = getattr(value=$114load_global.0, attr=pow)
DEBUG 2022-02-14 16:38:07,272 on stmt: $120load_global.3 = global(float: <class 'float'>)
DEBUG 2022-02-14 16:38:07,272 on stmt: $124call_function.5 = call $120load_global.3(b, func=$120load_global.3, args=[Var(b, numbers.py:217)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:07,272 on stmt: $126call_method.6 = call $116load_method.1(a.1, $124call_function.5, func=$116load_method.1, args=[Var(a.1, numbers.py:218), Var($124call_function.5, numbers.py:237)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:07,272 find_def var='a.1' stmt=$126call_method.6 = call $116load_method.1(a.1, $124call_function.5, func=$116load_method.1, args=[Var(a.1, numbers.py:218), Var($124call_function.5, numbers.py:237)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:07,272 find_def_from_top label 114
DEBUG 2022-02-14 16:38:07,273 idom 106 from label 114
DEBUG 2022-02-14 16:38:07,273 find_def_from_bottom label 106
DEBUG 2022-02-14 16:38:07,273 find_def_from_top label 106
DEBUG 2022-02-14 16:38:07,273 idom 0 from label 106
DEBUG 2022-02-14 16:38:07,273 find_def_from_bottom label 0
DEBUG 2022-02-14 16:38:07,273 on stmt: $128return_value.7 = cast(value=$126call_method.6)
DEBUG 2022-02-14 16:38:07,273 on stmt: return $128return_value.7
DEBUG 2022-02-14 16:38:07,273 ==== SSA block rewrite pass on 130
DEBUG 2022-02-14 16:38:07,273 Running <numba.core.ssa._FixSSAVars object at 0x7fa04630ebb0>
DEBUG 2022-02-14 16:38:07,273 on stmt: $const132.1 = const(int, 0)
DEBUG 2022-02-14 16:38:07,273 on stmt: $134compare_op.2 = exp != $const132.1
DEBUG 2022-02-14 16:38:07,273 on stmt: bool136 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:38:07,273 on stmt: $136pred = call bool136($134compare_op.2, func=bool136, args=(Var($134compare_op.2, numbers.py:238),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:07,273 on stmt: branch $136pred, 138, 172
DEBUG 2022-02-14 16:38:07,273 ==== SSA block rewrite pass on 138
DEBUG 2022-02-14 16:38:07,273 Running <numba.core.ssa._FixSSAVars object at 0x7fa04630ebb0>
DEBUG 2022-02-14 16:38:07,273 on stmt: $const140.1 = const(int, 1)
DEBUG 2022-02-14 16:38:07,273 on stmt: $142binary_and.2 = exp & $const140.1
DEBUG 2022-02-14 16:38:07,273 on stmt: bool144 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:38:07,273 on stmt: $144pred = call bool144($142binary_and.2, func=bool144, args=(Var($142binary_and.2, numbers.py:239),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:07,273 on stmt: branch $144pred, 146, 154
DEBUG 2022-02-14 16:38:07,274 ==== SSA block rewrite pass on 146
DEBUG 2022-02-14 16:38:07,274 Running <numba.core.ssa._FixSSAVars object at 0x7fa04630ebb0>
DEBUG 2022-02-14 16:38:07,274 on stmt: $150inplace_multiply.2 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=r, rhs=a.1, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:38:07,274 find_def var='a.1' stmt=$150inplace_multiply.2 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=r, rhs=a.1, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:38:07,274 find_def_from_top label 146
DEBUG 2022-02-14 16:38:07,274 idom 138 from label 146
DEBUG 2022-02-14 16:38:07,274 find_def_from_bottom label 138
DEBUG 2022-02-14 16:38:07,274 find_def_from_top label 138
DEBUG 2022-02-14 16:38:07,274 idom 130 from label 138
DEBUG 2022-02-14 16:38:07,274 find_def_from_bottom label 130
DEBUG 2022-02-14 16:38:07,274 find_def_from_top label 130
DEBUG 2022-02-14 16:38:07,274 insert phi node a.1.2 = phi(incoming_values=[], incoming_blocks=[]) at 130
DEBUG 2022-02-14 16:38:07,274 find_def_from_bottom label 106
DEBUG 2022-02-14 16:38:07,274 find_def_from_top label 106
DEBUG 2022-02-14 16:38:07,274 idom 0 from label 106
DEBUG 2022-02-14 16:38:07,274 find_def_from_bottom label 0
DEBUG 2022-02-14 16:38:07,274 incoming_def a.1 = call $10load_deref.3(a, func=$10load_deref.3, args=[Var(a, numbers.py:217)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:07,274 find_def_from_bottom label 154
DEBUG 2022-02-14 16:38:07,274 incoming_def a.1.1 = $166inplace_multiply.5
DEBUG 2022-02-14 16:38:07,274 replaced with: $150inplace_multiply.2 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=r, rhs=a.1.2, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:38:07,274 on stmt: r = $150inplace_multiply.2
DEBUG 2022-02-14 16:38:07,275 on stmt: jump 154
DEBUG 2022-02-14 16:38:07,275 ==== SSA block rewrite pass on 154
DEBUG 2022-02-14 16:38:07,275 Running <numba.core.ssa._FixSSAVars object at 0x7fa04630ebb0>
DEBUG 2022-02-14 16:38:07,275 on stmt: $const156.1 = const(int, 1)
DEBUG 2022-02-14 16:38:07,275 on stmt: $158inplace_rshift.2 = inplace_binop(fn=<built-in function irshift>, immutable_fn=<built-in function rshift>, lhs=exp, rhs=$const156.1, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:38:07,275 on stmt: exp = $158inplace_rshift.2
DEBUG 2022-02-14 16:38:07,275 on stmt: $166inplace_multiply.5 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=a.1, rhs=a.1, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:38:07,275 find_def var='a.1' stmt=$166inplace_multiply.5 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=a.1, rhs=a.1, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:38:07,275 find_def_from_top label 154
DEBUG 2022-02-14 16:38:07,275 idom 138 from label 154
DEBUG 2022-02-14 16:38:07,275 find_def_from_bottom label 138
DEBUG 2022-02-14 16:38:07,275 find_def_from_top label 138
DEBUG 2022-02-14 16:38:07,275 idom 130 from label 138
DEBUG 2022-02-14 16:38:07,275 find_def_from_bottom label 130
DEBUG 2022-02-14 16:38:07,275 replaced with: $166inplace_multiply.5 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=a.1.2, rhs=a.1.2, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:38:07,275 on stmt: a.1.1 = $166inplace_multiply.5
DEBUG 2022-02-14 16:38:07,275 on stmt: jump 130
DEBUG 2022-02-14 16:38:07,275 ==== SSA block rewrite pass on 172
DEBUG 2022-02-14 16:38:07,275 Running <numba.core.ssa._FixSSAVars object at 0x7fa04630ebb0>
DEBUG 2022-02-14 16:38:07,275 on stmt: bool174 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:38:07,276 on stmt: $174pred = call bool174(invert, func=bool174, args=(Var(invert, numbers.py:220),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:07,276 on stmt: branch $174pred, 176, 184
DEBUG 2022-02-14 16:38:07,276 ==== SSA block rewrite pass on 176
DEBUG 2022-02-14 16:38:07,276 Running <numba.core.ssa._FixSSAVars object at 0x7fa04630ebb0>
DEBUG 2022-02-14 16:38:07,276 on stmt: $const176.0 = const(float, 1.0)
DEBUG 2022-02-14 16:38:07,276 on stmt: $180binary_true_divide.2 = $const176.0 / r
DEBUG 2022-02-14 16:38:07,276 on stmt: $182return_value.3 = cast(value=$180binary_true_divide.2)
DEBUG 2022-02-14 16:38:07,276 on stmt: return $182return_value.3
DEBUG 2022-02-14 16:38:07,276 ==== SSA block rewrite pass on 184
DEBUG 2022-02-14 16:38:07,276 Running <numba.core.ssa._FixSSAVars object at 0x7fa04630ebb0>
DEBUG 2022-02-14 16:38:07,276 on stmt: $186return_value.1 = cast(value=r)
DEBUG 2022-02-14 16:38:07,276 on stmt: return $186return_value.1
DEBUG 2022-02-14 16:38:07,276 Fix SSA violator on var exp
DEBUG 2022-02-14 16:38:07,276 ==== SSA block rewrite pass on 0
DEBUG 2022-02-14 16:38:07,276 Running <numba.core.ssa._FreshVarHandler object at 0x7fa046131a90>
DEBUG 2022-02-14 16:38:07,276 on stmt: a = arg(0, name=a)
DEBUG 2022-02-14 16:38:07,276 on stmt: b = arg(1, name=b)
DEBUG 2022-02-14 16:38:07,276 on stmt: $2load_deref.0 = freevar(tp: float64)
DEBUG 2022-02-14 16:38:07,277 on stmt: $const4.1 = const(int, 1)
DEBUG 2022-02-14 16:38:07,277 on stmt: r = call $2load_deref.0($const4.1, func=$2load_deref.0, args=[Var($const4.1, numbers.py:217)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:07,277 on stmt: $10load_deref.3 = freevar(tp: float64)
DEBUG 2022-02-14 16:38:07,277 on stmt: a.1 = call $10load_deref.3(a, func=$10load_deref.3, args=[Var(a, numbers.py:217)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:07,277 on stmt: $const20.7 = const(int, 0)
DEBUG 2022-02-14 16:38:07,277 on stmt: $22compare_op.8 = b < $const20.7
DEBUG 2022-02-14 16:38:07,277 on stmt: bool24 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:38:07,277 on stmt: $24pred = call bool24($22compare_op.8, func=bool24, args=(Var($22compare_op.8, numbers.py:219),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:07,277 on stmt: branch $24pred, 26, 98
DEBUG 2022-02-14 16:38:07,277 ==== SSA block rewrite pass on 26
DEBUG 2022-02-14 16:38:07,277 Running <numba.core.ssa._FreshVarHandler object at 0x7fa046131a90>
DEBUG 2022-02-14 16:38:07,277 on stmt: invert = const(bool, True)
DEBUG 2022-02-14 16:38:07,277 on stmt: exp = unary(fn=<built-in function neg>, value=b)
DEBUG 2022-02-14 16:38:07,277 first assign: exp
DEBUG 2022-02-14 16:38:07,277 replaced with: exp = unary(fn=<built-in function neg>, value=b)
DEBUG 2022-02-14 16:38:07,277 on stmt: $const38.4 = const(int, 0)
DEBUG 2022-02-14 16:38:07,277 on stmt: $40compare_op.5 = exp < $const38.4
DEBUG 2022-02-14 16:38:07,277 on stmt: bool42 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:38:07,277 on stmt: $42pred = call bool42($40compare_op.5, func=bool42, args=(Var($40compare_op.5, numbers.py:222),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:07,277 on stmt: branch $42pred, 44, 48
DEBUG 2022-02-14 16:38:07,277 ==== SSA block rewrite pass on 44
DEBUG 2022-02-14 16:38:07,278 Running <numba.core.ssa._FreshVarHandler object at 0x7fa046131a90>
DEBUG 2022-02-14 16:38:07,278 on stmt: $44load_global.0 = global(OverflowError: <class 'OverflowError'>)
DEBUG 2022-02-14 16:38:07,278 on stmt: <static> raise <class 'OverflowError'>
DEBUG 2022-02-14 16:38:07,278 ==== SSA block rewrite pass on 48
DEBUG 2022-02-14 16:38:07,278 Running <numba.core.ssa._FreshVarHandler object at 0x7fa046131a90>
DEBUG 2022-02-14 16:38:07,278 on stmt: $48load_deref.0 = freevar(is_integer: False)
DEBUG 2022-02-14 16:38:07,278 on stmt: bool50 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:38:07,278 on stmt: $50pred = call bool50($48load_deref.0, func=bool50, args=(Var($48load_deref.0, numbers.py:224),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:07,278 on stmt: jump 106
DEBUG 2022-02-14 16:38:07,278 ==== SSA block rewrite pass on 98
DEBUG 2022-02-14 16:38:07,278 Running <numba.core.ssa._FreshVarHandler object at 0x7fa046131a90>
DEBUG 2022-02-14 16:38:07,278 on stmt: invert = const(bool, False)
DEBUG 2022-02-14 16:38:07,278 on stmt: exp = b
DEBUG 2022-02-14 16:38:07,278 replaced with: exp.1 = b
DEBUG 2022-02-14 16:38:07,278 on stmt: jump 106
DEBUG 2022-02-14 16:38:07,278 ==== SSA block rewrite pass on 106
DEBUG 2022-02-14 16:38:07,278 Running <numba.core.ssa._FreshVarHandler object at 0x7fa046131a90>
DEBUG 2022-02-14 16:38:07,278 on stmt: $const108.1 = const(int, 65536)
DEBUG 2022-02-14 16:38:07,278 on stmt: $110compare_op.2 = exp > $const108.1
DEBUG 2022-02-14 16:38:07,278 on stmt: bool112 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:38:07,278 on stmt: $112pred = call bool112($110compare_op.2, func=bool112, args=(Var($110compare_op.2, numbers.py:235),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:07,278 on stmt: branch $112pred, 114, 130
DEBUG 2022-02-14 16:38:07,278 ==== SSA block rewrite pass on 114
DEBUG 2022-02-14 16:38:07,278 Running <numba.core.ssa._FreshVarHandler object at 0x7fa046131a90>
DEBUG 2022-02-14 16:38:07,278 on stmt: $114load_global.0 = global(math: <module 'math' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/lib-dynload/math.cpython-39-x86_64-linux-gnu.so'>)
DEBUG 2022-02-14 16:38:07,279 on stmt: $116load_method.1 = getattr(value=$114load_global.0, attr=pow)
DEBUG 2022-02-14 16:38:07,279 on stmt: $120load_global.3 = global(float: <class 'float'>)
DEBUG 2022-02-14 16:38:07,279 on stmt: $124call_function.5 = call $120load_global.3(b, func=$120load_global.3, args=[Var(b, numbers.py:217)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:07,279 on stmt: $126call_method.6 = call $116load_method.1(a.1, $124call_function.5, func=$116load_method.1, args=[Var(a.1, numbers.py:218), Var($124call_function.5, numbers.py:237)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:07,279 on stmt: $128return_value.7 = cast(value=$126call_method.6)
DEBUG 2022-02-14 16:38:07,279 on stmt: return $128return_value.7
DEBUG 2022-02-14 16:38:07,279 ==== SSA block rewrite pass on 130
DEBUG 2022-02-14 16:38:07,279 Running <numba.core.ssa._FreshVarHandler object at 0x7fa046131a90>
DEBUG 2022-02-14 16:38:07,279 on stmt: a.1.2 = phi(incoming_values=[Var(a.1, numbers.py:218), Var(a.1.1, numbers.py:242)], incoming_blocks=[106, 154])
DEBUG 2022-02-14 16:38:07,279 on stmt: $const132.1 = const(int, 0)
DEBUG 2022-02-14 16:38:07,279 on stmt: $134compare_op.2 = exp != $const132.1
DEBUG 2022-02-14 16:38:07,279 on stmt: bool136 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:38:07,279 on stmt: $136pred = call bool136($134compare_op.2, func=bool136, args=(Var($134compare_op.2, numbers.py:238),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:07,279 on stmt: branch $136pred, 138, 172
DEBUG 2022-02-14 16:38:07,279 ==== SSA block rewrite pass on 138
DEBUG 2022-02-14 16:38:07,279 Running <numba.core.ssa._FreshVarHandler object at 0x7fa046131a90>
DEBUG 2022-02-14 16:38:07,279 on stmt: $const140.1 = const(int, 1)
DEBUG 2022-02-14 16:38:07,279 on stmt: $142binary_and.2 = exp & $const140.1
DEBUG 2022-02-14 16:38:07,279 on stmt: bool144 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:38:07,279 on stmt: $144pred = call bool144($142binary_and.2, func=bool144, args=(Var($142binary_and.2, numbers.py:239),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:07,279 on stmt: branch $144pred, 146, 154
DEBUG 2022-02-14 16:38:07,279 ==== SSA block rewrite pass on 146
DEBUG 2022-02-14 16:38:07,279 Running <numba.core.ssa._FreshVarHandler object at 0x7fa046131a90>
DEBUG 2022-02-14 16:38:07,279 on stmt: $150inplace_multiply.2 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=r, rhs=a.1.2, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:38:07,280 on stmt: r = $150inplace_multiply.2
DEBUG 2022-02-14 16:38:07,280 on stmt: jump 154
DEBUG 2022-02-14 16:38:07,280 ==== SSA block rewrite pass on 154
DEBUG 2022-02-14 16:38:07,280 Running <numba.core.ssa._FreshVarHandler object at 0x7fa046131a90>
DEBUG 2022-02-14 16:38:07,280 on stmt: $const156.1 = const(int, 1)
DEBUG 2022-02-14 16:38:07,280 on stmt: $158inplace_rshift.2 = inplace_binop(fn=<built-in function irshift>, immutable_fn=<built-in function rshift>, lhs=exp, rhs=$const156.1, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:38:07,280 on stmt: exp = $158inplace_rshift.2
DEBUG 2022-02-14 16:38:07,280 replaced with: exp.2 = $158inplace_rshift.2
DEBUG 2022-02-14 16:38:07,280 on stmt: $166inplace_multiply.5 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=a.1.2, rhs=a.1.2, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:38:07,280 on stmt: a.1.1 = $166inplace_multiply.5
DEBUG 2022-02-14 16:38:07,280 on stmt: jump 130
DEBUG 2022-02-14 16:38:07,280 ==== SSA block rewrite pass on 172
DEBUG 2022-02-14 16:38:07,280 Running <numba.core.ssa._FreshVarHandler object at 0x7fa046131a90>
DEBUG 2022-02-14 16:38:07,280 on stmt: bool174 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:38:07,280 on stmt: $174pred = call bool174(invert, func=bool174, args=(Var(invert, numbers.py:220),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:07,280 on stmt: branch $174pred, 176, 184
DEBUG 2022-02-14 16:38:07,280 ==== SSA block rewrite pass on 176
DEBUG 2022-02-14 16:38:07,280 Running <numba.core.ssa._FreshVarHandler object at 0x7fa046131a90>
DEBUG 2022-02-14 16:38:07,281 on stmt: $const176.0 = const(float, 1.0)
DEBUG 2022-02-14 16:38:07,281 on stmt: $180binary_true_divide.2 = $const176.0 / r
DEBUG 2022-02-14 16:38:07,281 on stmt: $182return_value.3 = cast(value=$180binary_true_divide.2)
DEBUG 2022-02-14 16:38:07,281 on stmt: return $182return_value.3
DEBUG 2022-02-14 16:38:07,281 ==== SSA block rewrite pass on 184
DEBUG 2022-02-14 16:38:07,281 Running <numba.core.ssa._FreshVarHandler object at 0x7fa046131a90>
DEBUG 2022-02-14 16:38:07,281 on stmt: $186return_value.1 = cast(value=r)
DEBUG 2022-02-14 16:38:07,281 on stmt: return $186return_value.1
DEBUG 2022-02-14 16:38:07,281 Replaced assignments: defaultdict(<class 'list'>,
            {26: [<numba.core.ir.Assign object at 0x7fa046131670>],
             98: [<numba.core.ir.Assign object at 0x7fa04630ec10>],
             154: [<numba.core.ir.Assign object at 0x7fa046124700>]})
DEBUG 2022-02-14 16:38:07,281 ==== SSA block rewrite pass on 0
DEBUG 2022-02-14 16:38:07,281 Running <numba.core.ssa._FixSSAVars object at 0x7fa04630ebb0>
DEBUG 2022-02-14 16:38:07,281 on stmt: a = arg(0, name=a)
DEBUG 2022-02-14 16:38:07,281 on stmt: b = arg(1, name=b)
DEBUG 2022-02-14 16:38:07,281 on stmt: $2load_deref.0 = freevar(tp: float64)
DEBUG 2022-02-14 16:38:07,281 on stmt: $const4.1 = const(int, 1)
DEBUG 2022-02-14 16:38:07,281 on stmt: r = call $2load_deref.0($const4.1, func=$2load_deref.0, args=[Var($const4.1, numbers.py:217)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:07,281 on stmt: $10load_deref.3 = freevar(tp: float64)
DEBUG 2022-02-14 16:38:07,281 on stmt: a.1 = call $10load_deref.3(a, func=$10load_deref.3, args=[Var(a, numbers.py:217)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:07,281 on stmt: $const20.7 = const(int, 0)
DEBUG 2022-02-14 16:38:07,281 on stmt: $22compare_op.8 = b < $const20.7
DEBUG 2022-02-14 16:38:07,282 on stmt: bool24 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:38:07,282 on stmt: $24pred = call bool24($22compare_op.8, func=bool24, args=(Var($22compare_op.8, numbers.py:219),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:07,282 on stmt: branch $24pred, 26, 98
DEBUG 2022-02-14 16:38:07,282 ==== SSA block rewrite pass on 26
DEBUG 2022-02-14 16:38:07,282 Running <numba.core.ssa._FixSSAVars object at 0x7fa04630ebb0>
DEBUG 2022-02-14 16:38:07,282 on stmt: invert = const(bool, True)
DEBUG 2022-02-14 16:38:07,282 on stmt: exp = unary(fn=<built-in function neg>, value=b)
DEBUG 2022-02-14 16:38:07,282 on stmt: $const38.4 = const(int, 0)
DEBUG 2022-02-14 16:38:07,282 on stmt: $40compare_op.5 = exp < $const38.4
DEBUG 2022-02-14 16:38:07,282 find_def var='exp' stmt=$40compare_op.5 = exp < $const38.4
DEBUG 2022-02-14 16:38:07,282 on stmt: bool42 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:38:07,282 on stmt: $42pred = call bool42($40compare_op.5, func=bool42, args=(Var($40compare_op.5, numbers.py:222),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:07,282 on stmt: branch $42pred, 44, 48
DEBUG 2022-02-14 16:38:07,282 ==== SSA block rewrite pass on 44
DEBUG 2022-02-14 16:38:07,282 Running <numba.core.ssa._FixSSAVars object at 0x7fa04630ebb0>
DEBUG 2022-02-14 16:38:07,282 on stmt: $44load_global.0 = global(OverflowError: <class 'OverflowError'>)
DEBUG 2022-02-14 16:38:07,282 on stmt: <static> raise <class 'OverflowError'>
DEBUG 2022-02-14 16:38:07,282 ==== SSA block rewrite pass on 48
DEBUG 2022-02-14 16:38:07,282 Running <numba.core.ssa._FixSSAVars object at 0x7fa04630ebb0>
DEBUG 2022-02-14 16:38:07,282 on stmt: $48load_deref.0 = freevar(is_integer: False)
DEBUG 2022-02-14 16:38:07,282 on stmt: bool50 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:38:07,282 on stmt: $50pred = call bool50($48load_deref.0, func=bool50, args=(Var($48load_deref.0, numbers.py:224),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:07,282 on stmt: jump 106
DEBUG 2022-02-14 16:38:07,282 ==== SSA block rewrite pass on 98
DEBUG 2022-02-14 16:38:07,283 Running <numba.core.ssa._FixSSAVars object at 0x7fa04630ebb0>
DEBUG 2022-02-14 16:38:07,283 on stmt: invert = const(bool, False)
DEBUG 2022-02-14 16:38:07,283 on stmt: exp.1 = b
DEBUG 2022-02-14 16:38:07,283 on stmt: jump 106
DEBUG 2022-02-14 16:38:07,283 ==== SSA block rewrite pass on 106
DEBUG 2022-02-14 16:38:07,283 Running <numba.core.ssa._FixSSAVars object at 0x7fa04630ebb0>
DEBUG 2022-02-14 16:38:07,283 on stmt: $const108.1 = const(int, 65536)
DEBUG 2022-02-14 16:38:07,283 on stmt: $110compare_op.2 = exp > $const108.1
DEBUG 2022-02-14 16:38:07,283 find_def var='exp' stmt=$110compare_op.2 = exp > $const108.1
DEBUG 2022-02-14 16:38:07,283 find_def_from_top label 106
DEBUG 2022-02-14 16:38:07,283 insert phi node exp.3 = phi(incoming_values=[], incoming_blocks=[]) at 106
DEBUG 2022-02-14 16:38:07,283 find_def_from_bottom label 48
DEBUG 2022-02-14 16:38:07,283 find_def_from_top label 48
DEBUG 2022-02-14 16:38:07,283 idom 26 from label 48
DEBUG 2022-02-14 16:38:07,283 find_def_from_bottom label 26
DEBUG 2022-02-14 16:38:07,283 incoming_def exp = unary(fn=<built-in function neg>, value=b)
DEBUG 2022-02-14 16:38:07,283 find_def_from_bottom label 98
DEBUG 2022-02-14 16:38:07,283 incoming_def exp.1 = b
DEBUG 2022-02-14 16:38:07,283 replaced with: $110compare_op.2 = exp.3 > $const108.1
DEBUG 2022-02-14 16:38:07,283 on stmt: bool112 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:38:07,283 on stmt: $112pred = call bool112($110compare_op.2, func=bool112, args=(Var($110compare_op.2, numbers.py:235),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:07,283 on stmt: branch $112pred, 114, 130
DEBUG 2022-02-14 16:38:07,283 ==== SSA block rewrite pass on 114
DEBUG 2022-02-14 16:38:07,283 Running <numba.core.ssa._FixSSAVars object at 0x7fa04630ebb0>
DEBUG 2022-02-14 16:38:07,284 on stmt: $114load_global.0 = global(math: <module 'math' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/lib-dynload/math.cpython-39-x86_64-linux-gnu.so'>)
DEBUG 2022-02-14 16:38:07,284 on stmt: $116load_method.1 = getattr(value=$114load_global.0, attr=pow)
DEBUG 2022-02-14 16:38:07,284 on stmt: $120load_global.3 = global(float: <class 'float'>)
DEBUG 2022-02-14 16:38:07,284 on stmt: $124call_function.5 = call $120load_global.3(b, func=$120load_global.3, args=[Var(b, numbers.py:217)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:07,284 on stmt: $126call_method.6 = call $116load_method.1(a.1, $124call_function.5, func=$116load_method.1, args=[Var(a.1, numbers.py:218), Var($124call_function.5, numbers.py:237)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:07,284 on stmt: $128return_value.7 = cast(value=$126call_method.6)
DEBUG 2022-02-14 16:38:07,284 on stmt: return $128return_value.7
DEBUG 2022-02-14 16:38:07,284 ==== SSA block rewrite pass on 130
DEBUG 2022-02-14 16:38:07,284 Running <numba.core.ssa._FixSSAVars object at 0x7fa04630ebb0>
DEBUG 2022-02-14 16:38:07,284 on stmt: a.1.2 = phi(incoming_values=[Var(a.1, numbers.py:218), Var(a.1.1, numbers.py:242)], incoming_blocks=[106, 154])
DEBUG 2022-02-14 16:38:07,284 on stmt: $const132.1 = const(int, 0)
DEBUG 2022-02-14 16:38:07,284 on stmt: $134compare_op.2 = exp != $const132.1
DEBUG 2022-02-14 16:38:07,284 find_def var='exp' stmt=$134compare_op.2 = exp != $const132.1
DEBUG 2022-02-14 16:38:07,284 find_def_from_top label 130
DEBUG 2022-02-14 16:38:07,284 insert phi node exp.4 = phi(incoming_values=[], incoming_blocks=[]) at 130
DEBUG 2022-02-14 16:38:07,284 find_def_from_bottom label 106
DEBUG 2022-02-14 16:38:07,284 incoming_def exp.3 = phi(incoming_values=[Var(exp, numbers.py:221), Var(exp.1, numbers.py:234)], incoming_blocks=[48, 98])
DEBUG 2022-02-14 16:38:07,284 find_def_from_bottom label 154
DEBUG 2022-02-14 16:38:07,284 incoming_def exp.2 = $158inplace_rshift.2
DEBUG 2022-02-14 16:38:07,284 replaced with: $134compare_op.2 = exp.4 != $const132.1
DEBUG 2022-02-14 16:38:07,284 on stmt: bool136 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:38:07,284 on stmt: $136pred = call bool136($134compare_op.2, func=bool136, args=(Var($134compare_op.2, numbers.py:238),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:07,284 on stmt: branch $136pred, 138, 172
DEBUG 2022-02-14 16:38:07,285 ==== SSA block rewrite pass on 138
DEBUG 2022-02-14 16:38:07,285 Running <numba.core.ssa._FixSSAVars object at 0x7fa04630ebb0>
DEBUG 2022-02-14 16:38:07,285 on stmt: $const140.1 = const(int, 1)
DEBUG 2022-02-14 16:38:07,285 on stmt: $142binary_and.2 = exp & $const140.1
DEBUG 2022-02-14 16:38:07,285 find_def var='exp' stmt=$142binary_and.2 = exp & $const140.1
DEBUG 2022-02-14 16:38:07,285 find_def_from_top label 138
DEBUG 2022-02-14 16:38:07,285 idom 130 from label 138
DEBUG 2022-02-14 16:38:07,285 find_def_from_bottom label 130
DEBUG 2022-02-14 16:38:07,285 replaced with: $142binary_and.2 = exp.4 & $const140.1
DEBUG 2022-02-14 16:38:07,285 on stmt: bool144 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:38:07,285 on stmt: $144pred = call bool144($142binary_and.2, func=bool144, args=(Var($142binary_and.2, numbers.py:239),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:07,285 on stmt: branch $144pred, 146, 154
DEBUG 2022-02-14 16:38:07,285 ==== SSA block rewrite pass on 146
DEBUG 2022-02-14 16:38:07,285 Running <numba.core.ssa._FixSSAVars object at 0x7fa04630ebb0>
DEBUG 2022-02-14 16:38:07,285 on stmt: $150inplace_multiply.2 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=r, rhs=a.1.2, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:38:07,285 on stmt: r = $150inplace_multiply.2
DEBUG 2022-02-14 16:38:07,285 on stmt: jump 154
DEBUG 2022-02-14 16:38:07,285 ==== SSA block rewrite pass on 154
DEBUG 2022-02-14 16:38:07,285 Running <numba.core.ssa._FixSSAVars object at 0x7fa04630ebb0>
DEBUG 2022-02-14 16:38:07,285 on stmt: $const156.1 = const(int, 1)
DEBUG 2022-02-14 16:38:07,285 on stmt: $158inplace_rshift.2 = inplace_binop(fn=<built-in function irshift>, immutable_fn=<built-in function rshift>, lhs=exp, rhs=$const156.1, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:38:07,285 find_def var='exp' stmt=$158inplace_rshift.2 = inplace_binop(fn=<built-in function irshift>, immutable_fn=<built-in function rshift>, lhs=exp, rhs=$const156.1, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:38:07,285 find_def_from_top label 154
DEBUG 2022-02-14 16:38:07,286 idom 138 from label 154
DEBUG 2022-02-14 16:38:07,286 find_def_from_bottom label 138
DEBUG 2022-02-14 16:38:07,286 find_def_from_top label 138
DEBUG 2022-02-14 16:38:07,286 idom 130 from label 138
DEBUG 2022-02-14 16:38:07,286 find_def_from_bottom label 130
DEBUG 2022-02-14 16:38:07,286 replaced with: $158inplace_rshift.2 = inplace_binop(fn=<built-in function irshift>, immutable_fn=<built-in function rshift>, lhs=exp.4, rhs=$const156.1, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:38:07,286 on stmt: exp.2 = $158inplace_rshift.2
DEBUG 2022-02-14 16:38:07,286 on stmt: $166inplace_multiply.5 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=a.1.2, rhs=a.1.2, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:38:07,286 on stmt: a.1.1 = $166inplace_multiply.5
DEBUG 2022-02-14 16:38:07,286 on stmt: jump 130
DEBUG 2022-02-14 16:38:07,286 ==== SSA block rewrite pass on 172
DEBUG 2022-02-14 16:38:07,286 Running <numba.core.ssa._FixSSAVars object at 0x7fa04630ebb0>
DEBUG 2022-02-14 16:38:07,286 on stmt: bool174 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:38:07,286 on stmt: $174pred = call bool174(invert, func=bool174, args=(Var(invert, numbers.py:220),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:07,286 on stmt: branch $174pred, 176, 184
DEBUG 2022-02-14 16:38:07,286 ==== SSA block rewrite pass on 176
DEBUG 2022-02-14 16:38:07,286 Running <numba.core.ssa._FixSSAVars object at 0x7fa04630ebb0>
DEBUG 2022-02-14 16:38:07,286 on stmt: $const176.0 = const(float, 1.0)
DEBUG 2022-02-14 16:38:07,286 on stmt: $180binary_true_divide.2 = $const176.0 / r
DEBUG 2022-02-14 16:38:07,286 on stmt: $182return_value.3 = cast(value=$180binary_true_divide.2)
DEBUG 2022-02-14 16:38:07,286 on stmt: return $182return_value.3
DEBUG 2022-02-14 16:38:07,286 ==== SSA block rewrite pass on 184
DEBUG 2022-02-14 16:38:07,286 Running <numba.core.ssa._FixSSAVars object at 0x7fa04630ebb0>
DEBUG 2022-02-14 16:38:07,286 on stmt: $186return_value.1 = cast(value=r)
DEBUG 2022-02-14 16:38:07,287 on stmt: return $186return_value.1
DEBUG 2022-02-14 16:38:07,287 Fix SSA violator on var invert
DEBUG 2022-02-14 16:38:07,287 ==== SSA block rewrite pass on 0
DEBUG 2022-02-14 16:38:07,287 Running <numba.core.ssa._FreshVarHandler object at 0x7fa046124130>
DEBUG 2022-02-14 16:38:07,287 on stmt: a = arg(0, name=a)
DEBUG 2022-02-14 16:38:07,287 on stmt: b = arg(1, name=b)
DEBUG 2022-02-14 16:38:07,287 on stmt: $2load_deref.0 = freevar(tp: float64)
DEBUG 2022-02-14 16:38:07,287 on stmt: $const4.1 = const(int, 1)
DEBUG 2022-02-14 16:38:07,287 on stmt: r = call $2load_deref.0($const4.1, func=$2load_deref.0, args=[Var($const4.1, numbers.py:217)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:07,287 on stmt: $10load_deref.3 = freevar(tp: float64)
DEBUG 2022-02-14 16:38:07,287 on stmt: a.1 = call $10load_deref.3(a, func=$10load_deref.3, args=[Var(a, numbers.py:217)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:07,287 on stmt: $const20.7 = const(int, 0)
DEBUG 2022-02-14 16:38:07,287 on stmt: $22compare_op.8 = b < $const20.7
DEBUG 2022-02-14 16:38:07,287 on stmt: bool24 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:38:07,287 on stmt: $24pred = call bool24($22compare_op.8, func=bool24, args=(Var($22compare_op.8, numbers.py:219),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:07,287 on stmt: branch $24pred, 26, 98
DEBUG 2022-02-14 16:38:07,287 ==== SSA block rewrite pass on 26
DEBUG 2022-02-14 16:38:07,287 Running <numba.core.ssa._FreshVarHandler object at 0x7fa046124130>
DEBUG 2022-02-14 16:38:07,287 on stmt: invert = const(bool, True)
DEBUG 2022-02-14 16:38:07,287 first assign: invert
DEBUG 2022-02-14 16:38:07,287 replaced with: invert = const(bool, True)
DEBUG 2022-02-14 16:38:07,287 on stmt: exp = unary(fn=<built-in function neg>, value=b)
DEBUG 2022-02-14 16:38:07,287 on stmt: $const38.4 = const(int, 0)
DEBUG 2022-02-14 16:38:07,287 on stmt: $40compare_op.5 = exp < $const38.4
DEBUG 2022-02-14 16:38:07,287 on stmt: bool42 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:38:07,287 on stmt: $42pred = call bool42($40compare_op.5, func=bool42, args=(Var($40compare_op.5, numbers.py:222),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:07,288 on stmt: branch $42pred, 44, 48
DEBUG 2022-02-14 16:38:07,288 ==== SSA block rewrite pass on 44
DEBUG 2022-02-14 16:38:07,288 Running <numba.core.ssa._FreshVarHandler object at 0x7fa046124130>
DEBUG 2022-02-14 16:38:07,288 on stmt: $44load_global.0 = global(OverflowError: <class 'OverflowError'>)
DEBUG 2022-02-14 16:38:07,288 on stmt: <static> raise <class 'OverflowError'>
DEBUG 2022-02-14 16:38:07,288 ==== SSA block rewrite pass on 48
DEBUG 2022-02-14 16:38:07,288 Running <numba.core.ssa._FreshVarHandler object at 0x7fa046124130>
DEBUG 2022-02-14 16:38:07,288 on stmt: $48load_deref.0 = freevar(is_integer: False)
DEBUG 2022-02-14 16:38:07,288 on stmt: bool50 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:38:07,288 on stmt: $50pred = call bool50($48load_deref.0, func=bool50, args=(Var($48load_deref.0, numbers.py:224),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:07,288 on stmt: jump 106
DEBUG 2022-02-14 16:38:07,288 ==== SSA block rewrite pass on 98
DEBUG 2022-02-14 16:38:07,288 Running <numba.core.ssa._FreshVarHandler object at 0x7fa046124130>
DEBUG 2022-02-14 16:38:07,288 on stmt: invert = const(bool, False)
DEBUG 2022-02-14 16:38:07,288 replaced with: invert.1 = const(bool, False)
DEBUG 2022-02-14 16:38:07,288 on stmt: exp.1 = b
DEBUG 2022-02-14 16:38:07,288 on stmt: jump 106
DEBUG 2022-02-14 16:38:07,288 ==== SSA block rewrite pass on 106
DEBUG 2022-02-14 16:38:07,288 Running <numba.core.ssa._FreshVarHandler object at 0x7fa046124130>
DEBUG 2022-02-14 16:38:07,288 on stmt: exp.3 = phi(incoming_values=[Var(exp, numbers.py:221), Var(exp.1, numbers.py:234)], incoming_blocks=[48, 98])
DEBUG 2022-02-14 16:38:07,288 on stmt: $const108.1 = const(int, 65536)
DEBUG 2022-02-14 16:38:07,288 on stmt: $110compare_op.2 = exp.3 > $const108.1
DEBUG 2022-02-14 16:38:07,288 on stmt: bool112 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:38:07,288 on stmt: $112pred = call bool112($110compare_op.2, func=bool112, args=(Var($110compare_op.2, numbers.py:235),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:07,288 on stmt: branch $112pred, 114, 130
DEBUG 2022-02-14 16:38:07,288 ==== SSA block rewrite pass on 114
DEBUG 2022-02-14 16:38:07,289 Running <numba.core.ssa._FreshVarHandler object at 0x7fa046124130>
DEBUG 2022-02-14 16:38:07,289 on stmt: $114load_global.0 = global(math: <module 'math' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/lib-dynload/math.cpython-39-x86_64-linux-gnu.so'>)
DEBUG 2022-02-14 16:38:07,289 on stmt: $116load_method.1 = getattr(value=$114load_global.0, attr=pow)
DEBUG 2022-02-14 16:38:07,289 on stmt: $120load_global.3 = global(float: <class 'float'>)
DEBUG 2022-02-14 16:38:07,289 on stmt: $124call_function.5 = call $120load_global.3(b, func=$120load_global.3, args=[Var(b, numbers.py:217)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:07,289 on stmt: $126call_method.6 = call $116load_method.1(a.1, $124call_function.5, func=$116load_method.1, args=[Var(a.1, numbers.py:218), Var($124call_function.5, numbers.py:237)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:07,289 on stmt: $128return_value.7 = cast(value=$126call_method.6)
DEBUG 2022-02-14 16:38:07,289 on stmt: return $128return_value.7
DEBUG 2022-02-14 16:38:07,289 ==== SSA block rewrite pass on 130
DEBUG 2022-02-14 16:38:07,289 Running <numba.core.ssa._FreshVarHandler object at 0x7fa046124130>
DEBUG 2022-02-14 16:38:07,289 on stmt: exp.4 = phi(incoming_values=[Var(exp.3, numbers.py:235), Var(exp.2, numbers.py:241)], incoming_blocks=[106, 154])
DEBUG 2022-02-14 16:38:07,289 on stmt: a.1.2 = phi(incoming_values=[Var(a.1, numbers.py:218), Var(a.1.1, numbers.py:242)], incoming_blocks=[106, 154])
DEBUG 2022-02-14 16:38:07,289 on stmt: $const132.1 = const(int, 0)
DEBUG 2022-02-14 16:38:07,289 on stmt: $134compare_op.2 = exp.4 != $const132.1
DEBUG 2022-02-14 16:38:07,289 on stmt: bool136 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:38:07,289 on stmt: $136pred = call bool136($134compare_op.2, func=bool136, args=(Var($134compare_op.2, numbers.py:238),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:07,289 on stmt: branch $136pred, 138, 172
DEBUG 2022-02-14 16:38:07,289 ==== SSA block rewrite pass on 138
DEBUG 2022-02-14 16:38:07,289 Running <numba.core.ssa._FreshVarHandler object at 0x7fa046124130>
DEBUG 2022-02-14 16:38:07,289 on stmt: $const140.1 = const(int, 1)
DEBUG 2022-02-14 16:38:07,289 on stmt: $142binary_and.2 = exp.4 & $const140.1
DEBUG 2022-02-14 16:38:07,289 on stmt: bool144 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:38:07,289 on stmt: $144pred = call bool144($142binary_and.2, func=bool144, args=(Var($142binary_and.2, numbers.py:239),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:07,289 on stmt: branch $144pred, 146, 154
DEBUG 2022-02-14 16:38:07,290 ==== SSA block rewrite pass on 146
DEBUG 2022-02-14 16:38:07,290 Running <numba.core.ssa._FreshVarHandler object at 0x7fa046124130>
DEBUG 2022-02-14 16:38:07,290 on stmt: $150inplace_multiply.2 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=r, rhs=a.1.2, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:38:07,290 on stmt: r = $150inplace_multiply.2
DEBUG 2022-02-14 16:38:07,290 on stmt: jump 154
DEBUG 2022-02-14 16:38:07,290 ==== SSA block rewrite pass on 154
DEBUG 2022-02-14 16:38:07,290 Running <numba.core.ssa._FreshVarHandler object at 0x7fa046124130>
DEBUG 2022-02-14 16:38:07,290 on stmt: $const156.1 = const(int, 1)
DEBUG 2022-02-14 16:38:07,290 on stmt: $158inplace_rshift.2 = inplace_binop(fn=<built-in function irshift>, immutable_fn=<built-in function rshift>, lhs=exp.4, rhs=$const156.1, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:38:07,290 on stmt: exp.2 = $158inplace_rshift.2
DEBUG 2022-02-14 16:38:07,290 on stmt: $166inplace_multiply.5 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=a.1.2, rhs=a.1.2, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:38:07,290 on stmt: a.1.1 = $166inplace_multiply.5
DEBUG 2022-02-14 16:38:07,290 on stmt: jump 130
DEBUG 2022-02-14 16:38:07,290 ==== SSA block rewrite pass on 172
DEBUG 2022-02-14 16:38:07,290 Running <numba.core.ssa._FreshVarHandler object at 0x7fa046124130>
DEBUG 2022-02-14 16:38:07,290 on stmt: bool174 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:38:07,290 on stmt: $174pred = call bool174(invert, func=bool174, args=(Var(invert, numbers.py:220),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:07,290 on stmt: branch $174pred, 176, 184
DEBUG 2022-02-14 16:38:07,290 ==== SSA block rewrite pass on 176
DEBUG 2022-02-14 16:38:07,290 Running <numba.core.ssa._FreshVarHandler object at 0x7fa046124130>
DEBUG 2022-02-14 16:38:07,290 on stmt: $const176.0 = const(float, 1.0)
DEBUG 2022-02-14 16:38:07,290 on stmt: $180binary_true_divide.2 = $const176.0 / r
DEBUG 2022-02-14 16:38:07,290 on stmt: $182return_value.3 = cast(value=$180binary_true_divide.2)
DEBUG 2022-02-14 16:38:07,290 on stmt: return $182return_value.3
DEBUG 2022-02-14 16:38:07,290 ==== SSA block rewrite pass on 184
DEBUG 2022-02-14 16:38:07,290 Running <numba.core.ssa._FreshVarHandler object at 0x7fa046124130>
DEBUG 2022-02-14 16:38:07,290 on stmt: $186return_value.1 = cast(value=r)
DEBUG 2022-02-14 16:38:07,291 on stmt: return $186return_value.1
DEBUG 2022-02-14 16:38:07,291 Replaced assignments: defaultdict(<class 'list'>,
            {26: [<numba.core.ir.Assign object at 0x7fa046124430>],
             98: [<numba.core.ir.Assign object at 0x7fa04630ed30>]})
DEBUG 2022-02-14 16:38:07,291 ==== SSA block rewrite pass on 0
DEBUG 2022-02-14 16:38:07,291 Running <numba.core.ssa._FixSSAVars object at 0x7fa04630ebb0>
DEBUG 2022-02-14 16:38:07,291 on stmt: a = arg(0, name=a)
DEBUG 2022-02-14 16:38:07,291 on stmt: b = arg(1, name=b)
DEBUG 2022-02-14 16:38:07,291 on stmt: $2load_deref.0 = freevar(tp: float64)
DEBUG 2022-02-14 16:38:07,291 on stmt: $const4.1 = const(int, 1)
DEBUG 2022-02-14 16:38:07,291 on stmt: r = call $2load_deref.0($const4.1, func=$2load_deref.0, args=[Var($const4.1, numbers.py:217)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:07,291 on stmt: $10load_deref.3 = freevar(tp: float64)
DEBUG 2022-02-14 16:38:07,291 on stmt: a.1 = call $10load_deref.3(a, func=$10load_deref.3, args=[Var(a, numbers.py:217)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:07,291 on stmt: $const20.7 = const(int, 0)
DEBUG 2022-02-14 16:38:07,291 on stmt: $22compare_op.8 = b < $const20.7
DEBUG 2022-02-14 16:38:07,291 on stmt: bool24 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:38:07,291 on stmt: $24pred = call bool24($22compare_op.8, func=bool24, args=(Var($22compare_op.8, numbers.py:219),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:07,291 on stmt: branch $24pred, 26, 98
DEBUG 2022-02-14 16:38:07,291 ==== SSA block rewrite pass on 26
DEBUG 2022-02-14 16:38:07,291 Running <numba.core.ssa._FixSSAVars object at 0x7fa04630ebb0>
DEBUG 2022-02-14 16:38:07,291 on stmt: invert = const(bool, True)
DEBUG 2022-02-14 16:38:07,291 on stmt: exp = unary(fn=<built-in function neg>, value=b)
DEBUG 2022-02-14 16:38:07,291 on stmt: $const38.4 = const(int, 0)
DEBUG 2022-02-14 16:38:07,291 on stmt: $40compare_op.5 = exp < $const38.4
DEBUG 2022-02-14 16:38:07,291 on stmt: bool42 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:38:07,292 on stmt: $42pred = call bool42($40compare_op.5, func=bool42, args=(Var($40compare_op.5, numbers.py:222),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:07,292 on stmt: branch $42pred, 44, 48
DEBUG 2022-02-14 16:38:07,292 ==== SSA block rewrite pass on 44
DEBUG 2022-02-14 16:38:07,292 Running <numba.core.ssa._FixSSAVars object at 0x7fa04630ebb0>
DEBUG 2022-02-14 16:38:07,292 on stmt: $44load_global.0 = global(OverflowError: <class 'OverflowError'>)
DEBUG 2022-02-14 16:38:07,292 on stmt: <static> raise <class 'OverflowError'>
DEBUG 2022-02-14 16:38:07,292 ==== SSA block rewrite pass on 48
DEBUG 2022-02-14 16:38:07,292 Running <numba.core.ssa._FixSSAVars object at 0x7fa04630ebb0>
DEBUG 2022-02-14 16:38:07,292 on stmt: $48load_deref.0 = freevar(is_integer: False)
DEBUG 2022-02-14 16:38:07,292 on stmt: bool50 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:38:07,292 on stmt: $50pred = call bool50($48load_deref.0, func=bool50, args=(Var($48load_deref.0, numbers.py:224),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:07,292 on stmt: jump 106
DEBUG 2022-02-14 16:38:07,292 ==== SSA block rewrite pass on 98
DEBUG 2022-02-14 16:38:07,292 Running <numba.core.ssa._FixSSAVars object at 0x7fa04630ebb0>
DEBUG 2022-02-14 16:38:07,292 on stmt: invert.1 = const(bool, False)
DEBUG 2022-02-14 16:38:07,292 on stmt: exp.1 = b
DEBUG 2022-02-14 16:38:07,292 on stmt: jump 106
DEBUG 2022-02-14 16:38:07,292 ==== SSA block rewrite pass on 106
DEBUG 2022-02-14 16:38:07,292 Running <numba.core.ssa._FixSSAVars object at 0x7fa04630ebb0>
DEBUG 2022-02-14 16:38:07,292 on stmt: exp.3 = phi(incoming_values=[Var(exp, numbers.py:221), Var(exp.1, numbers.py:234)], incoming_blocks=[48, 98])
DEBUG 2022-02-14 16:38:07,292 on stmt: $const108.1 = const(int, 65536)
DEBUG 2022-02-14 16:38:07,292 on stmt: $110compare_op.2 = exp.3 > $const108.1
DEBUG 2022-02-14 16:38:07,293 on stmt: bool112 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:38:07,293 on stmt: $112pred = call bool112($110compare_op.2, func=bool112, args=(Var($110compare_op.2, numbers.py:235),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:07,293 on stmt: branch $112pred, 114, 130
DEBUG 2022-02-14 16:38:07,293 ==== SSA block rewrite pass on 114
DEBUG 2022-02-14 16:38:07,293 Running <numba.core.ssa._FixSSAVars object at 0x7fa04630ebb0>
DEBUG 2022-02-14 16:38:07,293 on stmt: $114load_global.0 = global(math: <module 'math' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/lib-dynload/math.cpython-39-x86_64-linux-gnu.so'>)
DEBUG 2022-02-14 16:38:07,293 on stmt: $116load_method.1 = getattr(value=$114load_global.0, attr=pow)
DEBUG 2022-02-14 16:38:07,293 on stmt: $120load_global.3 = global(float: <class 'float'>)
DEBUG 2022-02-14 16:38:07,293 on stmt: $124call_function.5 = call $120load_global.3(b, func=$120load_global.3, args=[Var(b, numbers.py:217)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:07,293 on stmt: $126call_method.6 = call $116load_method.1(a.1, $124call_function.5, func=$116load_method.1, args=[Var(a.1, numbers.py:218), Var($124call_function.5, numbers.py:237)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:07,293 on stmt: $128return_value.7 = cast(value=$126call_method.6)
DEBUG 2022-02-14 16:38:07,293 on stmt: return $128return_value.7
DEBUG 2022-02-14 16:38:07,293 ==== SSA block rewrite pass on 130
DEBUG 2022-02-14 16:38:07,293 Running <numba.core.ssa._FixSSAVars object at 0x7fa04630ebb0>
DEBUG 2022-02-14 16:38:07,293 on stmt: exp.4 = phi(incoming_values=[Var(exp.3, numbers.py:235), Var(exp.2, numbers.py:241)], incoming_blocks=[106, 154])
DEBUG 2022-02-14 16:38:07,293 on stmt: a.1.2 = phi(incoming_values=[Var(a.1, numbers.py:218), Var(a.1.1, numbers.py:242)], incoming_blocks=[106, 154])
DEBUG 2022-02-14 16:38:07,293 on stmt: $const132.1 = const(int, 0)
DEBUG 2022-02-14 16:38:07,293 on stmt: $134compare_op.2 = exp.4 != $const132.1
DEBUG 2022-02-14 16:38:07,293 on stmt: bool136 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:38:07,293 on stmt: $136pred = call bool136($134compare_op.2, func=bool136, args=(Var($134compare_op.2, numbers.py:238),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:07,294 on stmt: branch $136pred, 138, 172
DEBUG 2022-02-14 16:38:07,294 ==== SSA block rewrite pass on 138
DEBUG 2022-02-14 16:38:07,294 Running <numba.core.ssa._FixSSAVars object at 0x7fa04630ebb0>
DEBUG 2022-02-14 16:38:07,294 on stmt: $const140.1 = const(int, 1)
DEBUG 2022-02-14 16:38:07,294 on stmt: $142binary_and.2 = exp.4 & $const140.1
DEBUG 2022-02-14 16:38:07,294 on stmt: bool144 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:38:07,294 on stmt: $144pred = call bool144($142binary_and.2, func=bool144, args=(Var($142binary_and.2, numbers.py:239),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:07,294 on stmt: branch $144pred, 146, 154
DEBUG 2022-02-14 16:38:07,294 ==== SSA block rewrite pass on 146
DEBUG 2022-02-14 16:38:07,294 Running <numba.core.ssa._FixSSAVars object at 0x7fa04630ebb0>
DEBUG 2022-02-14 16:38:07,294 on stmt: $150inplace_multiply.2 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=r, rhs=a.1.2, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:38:07,294 on stmt: r = $150inplace_multiply.2
DEBUG 2022-02-14 16:38:07,294 on stmt: jump 154
DEBUG 2022-02-14 16:38:07,294 ==== SSA block rewrite pass on 154
DEBUG 2022-02-14 16:38:07,294 Running <numba.core.ssa._FixSSAVars object at 0x7fa04630ebb0>
DEBUG 2022-02-14 16:38:07,294 on stmt: $const156.1 = const(int, 1)
DEBUG 2022-02-14 16:38:07,294 on stmt: $158inplace_rshift.2 = inplace_binop(fn=<built-in function irshift>, immutable_fn=<built-in function rshift>, lhs=exp.4, rhs=$const156.1, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:38:07,294 on stmt: exp.2 = $158inplace_rshift.2
DEBUG 2022-02-14 16:38:07,294 on stmt: $166inplace_multiply.5 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=a.1.2, rhs=a.1.2, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:38:07,294 on stmt: a.1.1 = $166inplace_multiply.5
DEBUG 2022-02-14 16:38:07,294 on stmt: jump 130
DEBUG 2022-02-14 16:38:07,294 ==== SSA block rewrite pass on 172
DEBUG 2022-02-14 16:38:07,295 Running <numba.core.ssa._FixSSAVars object at 0x7fa04630ebb0>
DEBUG 2022-02-14 16:38:07,295 on stmt: bool174 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:38:07,295 on stmt: $174pred = call bool174(invert, func=bool174, args=(Var(invert, numbers.py:220),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:07,295 find_def var='invert' stmt=$174pred = call bool174(invert, func=bool174, args=(Var(invert, numbers.py:220),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:07,295 find_def_from_top label 172
DEBUG 2022-02-14 16:38:07,295 idom 130 from label 172
DEBUG 2022-02-14 16:38:07,295 find_def_from_bottom label 130
DEBUG 2022-02-14 16:38:07,295 find_def_from_top label 130
DEBUG 2022-02-14 16:38:07,295 idom 106 from label 130
DEBUG 2022-02-14 16:38:07,295 find_def_from_bottom label 106
DEBUG 2022-02-14 16:38:07,295 find_def_from_top label 106
DEBUG 2022-02-14 16:38:07,295 insert phi node invert.2 = phi(incoming_values=[], incoming_blocks=[]) at 106
DEBUG 2022-02-14 16:38:07,295 find_def_from_bottom label 48
DEBUG 2022-02-14 16:38:07,295 find_def_from_top label 48
DEBUG 2022-02-14 16:38:07,295 idom 26 from label 48
DEBUG 2022-02-14 16:38:07,295 find_def_from_bottom label 26
DEBUG 2022-02-14 16:38:07,295 incoming_def invert = const(bool, True)
DEBUG 2022-02-14 16:38:07,295 find_def_from_bottom label 98
DEBUG 2022-02-14 16:38:07,295 incoming_def invert.1 = const(bool, False)
DEBUG 2022-02-14 16:38:07,295 replaced with: $174pred = call bool174(invert.2, func=bool174, args=(Var(invert.2, numbers.py:244),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:07,295 on stmt: branch $174pred, 176, 184
DEBUG 2022-02-14 16:38:07,295 ==== SSA block rewrite pass on 176
DEBUG 2022-02-14 16:38:07,295 Running <numba.core.ssa._FixSSAVars object at 0x7fa04630ebb0>
DEBUG 2022-02-14 16:38:07,296 on stmt: $const176.0 = const(float, 1.0)
DEBUG 2022-02-14 16:38:07,296 on stmt: $180binary_true_divide.2 = $const176.0 / r
DEBUG 2022-02-14 16:38:07,296 on stmt: $182return_value.3 = cast(value=$180binary_true_divide.2)
DEBUG 2022-02-14 16:38:07,296 on stmt: return $182return_value.3
DEBUG 2022-02-14 16:38:07,296 ==== SSA block rewrite pass on 184
DEBUG 2022-02-14 16:38:07,296 Running <numba.core.ssa._FixSSAVars object at 0x7fa04630ebb0>
DEBUG 2022-02-14 16:38:07,296 on stmt: $186return_value.1 = cast(value=r)
DEBUG 2022-02-14 16:38:07,296 on stmt: return $186return_value.1
DEBUG 2022-02-14 16:38:07,296 Fix SSA violator on var r
DEBUG 2022-02-14 16:38:07,296 ==== SSA block rewrite pass on 0
DEBUG 2022-02-14 16:38:07,296 Running <numba.core.ssa._FreshVarHandler object at 0x7fa0461248b0>
DEBUG 2022-02-14 16:38:07,296 on stmt: a = arg(0, name=a)
DEBUG 2022-02-14 16:38:07,296 on stmt: b = arg(1, name=b)
DEBUG 2022-02-14 16:38:07,296 on stmt: $2load_deref.0 = freevar(tp: float64)
DEBUG 2022-02-14 16:38:07,296 on stmt: $const4.1 = const(int, 1)
DEBUG 2022-02-14 16:38:07,296 on stmt: r = call $2load_deref.0($const4.1, func=$2load_deref.0, args=[Var($const4.1, numbers.py:217)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:07,296 first assign: r
DEBUG 2022-02-14 16:38:07,296 replaced with: r = call $2load_deref.0($const4.1, func=$2load_deref.0, args=[Var($const4.1, numbers.py:217)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:07,296 on stmt: $10load_deref.3 = freevar(tp: float64)
DEBUG 2022-02-14 16:38:07,296 on stmt: a.1 = call $10load_deref.3(a, func=$10load_deref.3, args=[Var(a, numbers.py:217)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:07,296 on stmt: $const20.7 = const(int, 0)
DEBUG 2022-02-14 16:38:07,296 on stmt: $22compare_op.8 = b < $const20.7
DEBUG 2022-02-14 16:38:07,296 on stmt: bool24 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:38:07,297 on stmt: $24pred = call bool24($22compare_op.8, func=bool24, args=(Var($22compare_op.8, numbers.py:219),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:07,297 on stmt: branch $24pred, 26, 98
DEBUG 2022-02-14 16:38:07,297 ==== SSA block rewrite pass on 26
DEBUG 2022-02-14 16:38:07,297 Running <numba.core.ssa._FreshVarHandler object at 0x7fa0461248b0>
DEBUG 2022-02-14 16:38:07,297 on stmt: invert = const(bool, True)
DEBUG 2022-02-14 16:38:07,297 on stmt: exp = unary(fn=<built-in function neg>, value=b)
DEBUG 2022-02-14 16:38:07,297 on stmt: $const38.4 = const(int, 0)
DEBUG 2022-02-14 16:38:07,297 on stmt: $40compare_op.5 = exp < $const38.4
DEBUG 2022-02-14 16:38:07,297 on stmt: bool42 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:38:07,297 on stmt: $42pred = call bool42($40compare_op.5, func=bool42, args=(Var($40compare_op.5, numbers.py:222),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:07,297 on stmt: branch $42pred, 44, 48
DEBUG 2022-02-14 16:38:07,297 ==== SSA block rewrite pass on 44
DEBUG 2022-02-14 16:38:07,297 Running <numba.core.ssa._FreshVarHandler object at 0x7fa0461248b0>
DEBUG 2022-02-14 16:38:07,297 on stmt: $44load_global.0 = global(OverflowError: <class 'OverflowError'>)
DEBUG 2022-02-14 16:38:07,297 on stmt: <static> raise <class 'OverflowError'>
DEBUG 2022-02-14 16:38:07,297 ==== SSA block rewrite pass on 48
DEBUG 2022-02-14 16:38:07,297 Running <numba.core.ssa._FreshVarHandler object at 0x7fa0461248b0>
DEBUG 2022-02-14 16:38:07,297 on stmt: $48load_deref.0 = freevar(is_integer: False)
DEBUG 2022-02-14 16:38:07,298 on stmt: bool50 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:38:07,298 on stmt: $50pred = call bool50($48load_deref.0, func=bool50, args=(Var($48load_deref.0, numbers.py:224),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:07,298 on stmt: jump 106
DEBUG 2022-02-14 16:38:07,298 ==== SSA block rewrite pass on 98
DEBUG 2022-02-14 16:38:07,298 Running <numba.core.ssa._FreshVarHandler object at 0x7fa0461248b0>
DEBUG 2022-02-14 16:38:07,298 on stmt: invert.1 = const(bool, False)
DEBUG 2022-02-14 16:38:07,298 on stmt: exp.1 = b
DEBUG 2022-02-14 16:38:07,298 on stmt: jump 106
DEBUG 2022-02-14 16:38:07,298 ==== SSA block rewrite pass on 106
DEBUG 2022-02-14 16:38:07,298 Running <numba.core.ssa._FreshVarHandler object at 0x7fa0461248b0>
DEBUG 2022-02-14 16:38:07,298 on stmt: invert.2 = phi(incoming_values=[Var(invert, numbers.py:220), Var(invert.1, numbers.py:233)], incoming_blocks=[48, 98])
DEBUG 2022-02-14 16:38:07,298 on stmt: exp.3 = phi(incoming_values=[Var(exp, numbers.py:221), Var(exp.1, numbers.py:234)], incoming_blocks=[48, 98])
DEBUG 2022-02-14 16:38:07,298 on stmt: $const108.1 = const(int, 65536)
DEBUG 2022-02-14 16:38:07,298 on stmt: $110compare_op.2 = exp.3 > $const108.1
DEBUG 2022-02-14 16:38:07,298 on stmt: bool112 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:38:07,298 on stmt: $112pred = call bool112($110compare_op.2, func=bool112, args=(Var($110compare_op.2, numbers.py:235),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:07,298 on stmt: branch $112pred, 114, 130
DEBUG 2022-02-14 16:38:07,298 ==== SSA block rewrite pass on 114
DEBUG 2022-02-14 16:38:07,298 Running <numba.core.ssa._FreshVarHandler object at 0x7fa0461248b0>
DEBUG 2022-02-14 16:38:07,298 on stmt: $114load_global.0 = global(math: <module 'math' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/lib-dynload/math.cpython-39-x86_64-linux-gnu.so'>)
DEBUG 2022-02-14 16:38:07,299 on stmt: $116load_method.1 = getattr(value=$114load_global.0, attr=pow)
DEBUG 2022-02-14 16:38:07,299 on stmt: $120load_global.3 = global(float: <class 'float'>)
DEBUG 2022-02-14 16:38:07,299 on stmt: $124call_function.5 = call $120load_global.3(b, func=$120load_global.3, args=[Var(b, numbers.py:217)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:07,299 on stmt: $126call_method.6 = call $116load_method.1(a.1, $124call_function.5, func=$116load_method.1, args=[Var(a.1, numbers.py:218), Var($124call_function.5, numbers.py:237)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:07,299 on stmt: $128return_value.7 = cast(value=$126call_method.6)
DEBUG 2022-02-14 16:38:07,299 on stmt: return $128return_value.7
DEBUG 2022-02-14 16:38:07,299 ==== SSA block rewrite pass on 130
DEBUG 2022-02-14 16:38:07,299 Running <numba.core.ssa._FreshVarHandler object at 0x7fa0461248b0>
DEBUG 2022-02-14 16:38:07,299 on stmt: exp.4 = phi(incoming_values=[Var(exp.3, numbers.py:235), Var(exp.2, numbers.py:241)], incoming_blocks=[106, 154])
DEBUG 2022-02-14 16:38:07,299 on stmt: a.1.2 = phi(incoming_values=[Var(a.1, numbers.py:218), Var(a.1.1, numbers.py:242)], incoming_blocks=[106, 154])
DEBUG 2022-02-14 16:38:07,299 on stmt: $const132.1 = const(int, 0)
DEBUG 2022-02-14 16:38:07,299 on stmt: $134compare_op.2 = exp.4 != $const132.1
DEBUG 2022-02-14 16:38:07,299 on stmt: bool136 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:38:07,299 on stmt: $136pred = call bool136($134compare_op.2, func=bool136, args=(Var($134compare_op.2, numbers.py:238),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:07,299 on stmt: branch $136pred, 138, 172
DEBUG 2022-02-14 16:38:07,299 ==== SSA block rewrite pass on 138
DEBUG 2022-02-14 16:38:07,299 Running <numba.core.ssa._FreshVarHandler object at 0x7fa0461248b0>
DEBUG 2022-02-14 16:38:07,299 on stmt: $const140.1 = const(int, 1)
DEBUG 2022-02-14 16:38:07,299 on stmt: $142binary_and.2 = exp.4 & $const140.1
DEBUG 2022-02-14 16:38:07,299 on stmt: bool144 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:38:07,300 on stmt: $144pred = call bool144($142binary_and.2, func=bool144, args=(Var($142binary_and.2, numbers.py:239),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:07,300 on stmt: branch $144pred, 146, 154
DEBUG 2022-02-14 16:38:07,300 ==== SSA block rewrite pass on 146
DEBUG 2022-02-14 16:38:07,300 Running <numba.core.ssa._FreshVarHandler object at 0x7fa0461248b0>
DEBUG 2022-02-14 16:38:07,300 on stmt: $150inplace_multiply.2 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=r, rhs=a.1.2, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:38:07,300 on stmt: r = $150inplace_multiply.2
DEBUG 2022-02-14 16:38:07,300 replaced with: r.1 = $150inplace_multiply.2
DEBUG 2022-02-14 16:38:07,300 on stmt: jump 154
DEBUG 2022-02-14 16:38:07,300 ==== SSA block rewrite pass on 154
DEBUG 2022-02-14 16:38:07,300 Running <numba.core.ssa._FreshVarHandler object at 0x7fa0461248b0>
DEBUG 2022-02-14 16:38:07,300 on stmt: $const156.1 = const(int, 1)
DEBUG 2022-02-14 16:38:07,300 on stmt: $158inplace_rshift.2 = inplace_binop(fn=<built-in function irshift>, immutable_fn=<built-in function rshift>, lhs=exp.4, rhs=$const156.1, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:38:07,300 on stmt: exp.2 = $158inplace_rshift.2
DEBUG 2022-02-14 16:38:07,300 on stmt: $166inplace_multiply.5 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=a.1.2, rhs=a.1.2, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:38:07,300 on stmt: a.1.1 = $166inplace_multiply.5
DEBUG 2022-02-14 16:38:07,300 on stmt: jump 130
DEBUG 2022-02-14 16:38:07,300 ==== SSA block rewrite pass on 172
DEBUG 2022-02-14 16:38:07,300 Running <numba.core.ssa._FreshVarHandler object at 0x7fa0461248b0>
DEBUG 2022-02-14 16:38:07,300 on stmt: bool174 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:38:07,300 on stmt: $174pred = call bool174(invert.2, func=bool174, args=(Var(invert.2, numbers.py:244),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:07,300 on stmt: branch $174pred, 176, 184
DEBUG 2022-02-14 16:38:07,301 ==== SSA block rewrite pass on 176
DEBUG 2022-02-14 16:38:07,301 Running <numba.core.ssa._FreshVarHandler object at 0x7fa0461248b0>
DEBUG 2022-02-14 16:38:07,301 on stmt: $const176.0 = const(float, 1.0)
DEBUG 2022-02-14 16:38:07,301 on stmt: $180binary_true_divide.2 = $const176.0 / r
DEBUG 2022-02-14 16:38:07,301 on stmt: $182return_value.3 = cast(value=$180binary_true_divide.2)
DEBUG 2022-02-14 16:38:07,301 on stmt: return $182return_value.3
DEBUG 2022-02-14 16:38:07,301 ==== SSA block rewrite pass on 184
DEBUG 2022-02-14 16:38:07,301 Running <numba.core.ssa._FreshVarHandler object at 0x7fa0461248b0>
DEBUG 2022-02-14 16:38:07,301 on stmt: $186return_value.1 = cast(value=r)
DEBUG 2022-02-14 16:38:07,301 on stmt: return $186return_value.1
DEBUG 2022-02-14 16:38:07,301 Replaced assignments: defaultdict(<class 'list'>,
            {0: [<numba.core.ir.Assign object at 0x7fa046124c40>],
             146: [<numba.core.ir.Assign object at 0x7fa0461325b0>]})
DEBUG 2022-02-14 16:38:07,301 ==== SSA block rewrite pass on 0
DEBUG 2022-02-14 16:38:07,301 Running <numba.core.ssa._FixSSAVars object at 0x7fa046131400>
DEBUG 2022-02-14 16:38:07,301 on stmt: a = arg(0, name=a)
DEBUG 2022-02-14 16:38:07,301 on stmt: b = arg(1, name=b)
DEBUG 2022-02-14 16:38:07,301 on stmt: $2load_deref.0 = freevar(tp: float64)
DEBUG 2022-02-14 16:38:07,301 on stmt: $const4.1 = const(int, 1)
DEBUG 2022-02-14 16:38:07,301 on stmt: r = call $2load_deref.0($const4.1, func=$2load_deref.0, args=[Var($const4.1, numbers.py:217)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:07,301 on stmt: $10load_deref.3 = freevar(tp: float64)
DEBUG 2022-02-14 16:38:07,301 on stmt: a.1 = call $10load_deref.3(a, func=$10load_deref.3, args=[Var(a, numbers.py:217)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:07,302 on stmt: $const20.7 = const(int, 0)
DEBUG 2022-02-14 16:38:07,302 on stmt: $22compare_op.8 = b < $const20.7
DEBUG 2022-02-14 16:38:07,302 on stmt: bool24 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:38:07,302 on stmt: $24pred = call bool24($22compare_op.8, func=bool24, args=(Var($22compare_op.8, numbers.py:219),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:07,302 on stmt: branch $24pred, 26, 98
DEBUG 2022-02-14 16:38:07,302 ==== SSA block rewrite pass on 26
DEBUG 2022-02-14 16:38:07,302 Running <numba.core.ssa._FixSSAVars object at 0x7fa046131400>
DEBUG 2022-02-14 16:38:07,302 on stmt: invert = const(bool, True)
DEBUG 2022-02-14 16:38:07,302 on stmt: exp = unary(fn=<built-in function neg>, value=b)
DEBUG 2022-02-14 16:38:07,302 on stmt: $const38.4 = const(int, 0)
DEBUG 2022-02-14 16:38:07,302 on stmt: $40compare_op.5 = exp < $const38.4
DEBUG 2022-02-14 16:38:07,302 on stmt: bool42 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:38:07,302 on stmt: $42pred = call bool42($40compare_op.5, func=bool42, args=(Var($40compare_op.5, numbers.py:222),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:07,302 on stmt: branch $42pred, 44, 48
DEBUG 2022-02-14 16:38:07,302 ==== SSA block rewrite pass on 44
DEBUG 2022-02-14 16:38:07,302 Running <numba.core.ssa._FixSSAVars object at 0x7fa046131400>
DEBUG 2022-02-14 16:38:07,302 on stmt: $44load_global.0 = global(OverflowError: <class 'OverflowError'>)
DEBUG 2022-02-14 16:38:07,302 on stmt: <static> raise <class 'OverflowError'>
DEBUG 2022-02-14 16:38:07,302 ==== SSA block rewrite pass on 48
DEBUG 2022-02-14 16:38:07,302 Running <numba.core.ssa._FixSSAVars object at 0x7fa046131400>
DEBUG 2022-02-14 16:38:07,303 on stmt: $48load_deref.0 = freevar(is_integer: False)
DEBUG 2022-02-14 16:38:07,303 on stmt: bool50 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:38:07,303 on stmt: $50pred = call bool50($48load_deref.0, func=bool50, args=(Var($48load_deref.0, numbers.py:224),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:07,303 on stmt: jump 106
DEBUG 2022-02-14 16:38:07,303 ==== SSA block rewrite pass on 98
DEBUG 2022-02-14 16:38:07,303 Running <numba.core.ssa._FixSSAVars object at 0x7fa046131400>
DEBUG 2022-02-14 16:38:07,303 on stmt: invert.1 = const(bool, False)
DEBUG 2022-02-14 16:38:07,303 on stmt: exp.1 = b
DEBUG 2022-02-14 16:38:07,303 on stmt: jump 106
DEBUG 2022-02-14 16:38:07,303 ==== SSA block rewrite pass on 106
DEBUG 2022-02-14 16:38:07,303 Running <numba.core.ssa._FixSSAVars object at 0x7fa046131400>
DEBUG 2022-02-14 16:38:07,303 on stmt: invert.2 = phi(incoming_values=[Var(invert, numbers.py:220), Var(invert.1, numbers.py:233)], incoming_blocks=[48, 98])
DEBUG 2022-02-14 16:38:07,303 on stmt: exp.3 = phi(incoming_values=[Var(exp, numbers.py:221), Var(exp.1, numbers.py:234)], incoming_blocks=[48, 98])
DEBUG 2022-02-14 16:38:07,303 on stmt: $const108.1 = const(int, 65536)
DEBUG 2022-02-14 16:38:07,303 on stmt: $110compare_op.2 = exp.3 > $const108.1
DEBUG 2022-02-14 16:38:07,303 on stmt: bool112 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:38:07,303 on stmt: $112pred = call bool112($110compare_op.2, func=bool112, args=(Var($110compare_op.2, numbers.py:235),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:07,303 on stmt: branch $112pred, 114, 130
DEBUG 2022-02-14 16:38:07,303 ==== SSA block rewrite pass on 114
DEBUG 2022-02-14 16:38:07,303 Running <numba.core.ssa._FixSSAVars object at 0x7fa046131400>
DEBUG 2022-02-14 16:38:07,303 on stmt: $114load_global.0 = global(math: <module 'math' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/lib-dynload/math.cpython-39-x86_64-linux-gnu.so'>)
DEBUG 2022-02-14 16:38:07,304 on stmt: $116load_method.1 = getattr(value=$114load_global.0, attr=pow)
DEBUG 2022-02-14 16:38:07,304 on stmt: $120load_global.3 = global(float: <class 'float'>)
DEBUG 2022-02-14 16:38:07,304 on stmt: $124call_function.5 = call $120load_global.3(b, func=$120load_global.3, args=[Var(b, numbers.py:217)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:07,304 on stmt: $126call_method.6 = call $116load_method.1(a.1, $124call_function.5, func=$116load_method.1, args=[Var(a.1, numbers.py:218), Var($124call_function.5, numbers.py:237)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:07,304 on stmt: $128return_value.7 = cast(value=$126call_method.6)
DEBUG 2022-02-14 16:38:07,304 on stmt: return $128return_value.7
DEBUG 2022-02-14 16:38:07,304 ==== SSA block rewrite pass on 130
DEBUG 2022-02-14 16:38:07,304 Running <numba.core.ssa._FixSSAVars object at 0x7fa046131400>
DEBUG 2022-02-14 16:38:07,304 on stmt: exp.4 = phi(incoming_values=[Var(exp.3, numbers.py:235), Var(exp.2, numbers.py:241)], incoming_blocks=[106, 154])
DEBUG 2022-02-14 16:38:07,304 on stmt: a.1.2 = phi(incoming_values=[Var(a.1, numbers.py:218), Var(a.1.1, numbers.py:242)], incoming_blocks=[106, 154])
DEBUG 2022-02-14 16:38:07,304 on stmt: $const132.1 = const(int, 0)
DEBUG 2022-02-14 16:38:07,304 on stmt: $134compare_op.2 = exp.4 != $const132.1
DEBUG 2022-02-14 16:38:07,304 on stmt: bool136 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:38:07,304 on stmt: $136pred = call bool136($134compare_op.2, func=bool136, args=(Var($134compare_op.2, numbers.py:238),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:07,304 on stmt: branch $136pred, 138, 172
DEBUG 2022-02-14 16:38:07,304 ==== SSA block rewrite pass on 138
DEBUG 2022-02-14 16:38:07,304 Running <numba.core.ssa._FixSSAVars object at 0x7fa046131400>
DEBUG 2022-02-14 16:38:07,304 on stmt: $const140.1 = const(int, 1)
DEBUG 2022-02-14 16:38:07,304 on stmt: $142binary_and.2 = exp.4 & $const140.1
DEBUG 2022-02-14 16:38:07,305 on stmt: bool144 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:38:07,305 on stmt: $144pred = call bool144($142binary_and.2, func=bool144, args=(Var($142binary_and.2, numbers.py:239),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:07,305 on stmt: branch $144pred, 146, 154
DEBUG 2022-02-14 16:38:07,305 ==== SSA block rewrite pass on 146
DEBUG 2022-02-14 16:38:07,305 Running <numba.core.ssa._FixSSAVars object at 0x7fa046131400>
DEBUG 2022-02-14 16:38:07,305 on stmt: $150inplace_multiply.2 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=r, rhs=a.1.2, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:38:07,305 find_def var='r' stmt=$150inplace_multiply.2 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=r, rhs=a.1.2, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:38:07,305 find_def_from_top label 146
DEBUG 2022-02-14 16:38:07,305 idom 138 from label 146
DEBUG 2022-02-14 16:38:07,305 find_def_from_bottom label 138
DEBUG 2022-02-14 16:38:07,305 find_def_from_top label 138
DEBUG 2022-02-14 16:38:07,305 idom 130 from label 138
DEBUG 2022-02-14 16:38:07,305 find_def_from_bottom label 130
DEBUG 2022-02-14 16:38:07,305 find_def_from_top label 130
DEBUG 2022-02-14 16:38:07,305 insert phi node r.2 = phi(incoming_values=[], incoming_blocks=[]) at 130
DEBUG 2022-02-14 16:38:07,305 find_def_from_bottom label 106
DEBUG 2022-02-14 16:38:07,305 find_def_from_top label 106
DEBUG 2022-02-14 16:38:07,305 idom 0 from label 106
DEBUG 2022-02-14 16:38:07,305 find_def_from_bottom label 0
DEBUG 2022-02-14 16:38:07,305 incoming_def r = call $2load_deref.0($const4.1, func=$2load_deref.0, args=[Var($const4.1, numbers.py:217)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:07,305 find_def_from_bottom label 154
DEBUG 2022-02-14 16:38:07,305 find_def_from_top label 154
DEBUG 2022-02-14 16:38:07,306 insert phi node r.3 = phi(incoming_values=[], incoming_blocks=[]) at 154
DEBUG 2022-02-14 16:38:07,306 find_def_from_bottom label 138
DEBUG 2022-02-14 16:38:07,306 find_def_from_top label 138
DEBUG 2022-02-14 16:38:07,306 idom 130 from label 138
DEBUG 2022-02-14 16:38:07,306 find_def_from_bottom label 130
DEBUG 2022-02-14 16:38:07,306 incoming_def r.2 = phi(incoming_values=[Var(r, numbers.py:217)], incoming_blocks=[106])
DEBUG 2022-02-14 16:38:07,306 find_def_from_bottom label 146
DEBUG 2022-02-14 16:38:07,306 incoming_def r.1 = $150inplace_multiply.2
DEBUG 2022-02-14 16:38:07,306 incoming_def r.3 = phi(incoming_values=[Var(r.2, numbers.py:240), Var(r.1, numbers.py:240)], incoming_blocks=[138, 146])
DEBUG 2022-02-14 16:38:07,306 replaced with: $150inplace_multiply.2 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=r.2, rhs=a.1.2, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:38:07,306 on stmt: r.1 = $150inplace_multiply.2
DEBUG 2022-02-14 16:38:07,306 on stmt: jump 154
DEBUG 2022-02-14 16:38:07,306 ==== SSA block rewrite pass on 154
DEBUG 2022-02-14 16:38:07,306 Running <numba.core.ssa._FixSSAVars object at 0x7fa046131400>
DEBUG 2022-02-14 16:38:07,306 on stmt: $const156.1 = const(int, 1)
DEBUG 2022-02-14 16:38:07,306 on stmt: $158inplace_rshift.2 = inplace_binop(fn=<built-in function irshift>, immutable_fn=<built-in function rshift>, lhs=exp.4, rhs=$const156.1, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:38:07,306 on stmt: exp.2 = $158inplace_rshift.2
DEBUG 2022-02-14 16:38:07,306 on stmt: $166inplace_multiply.5 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=a.1.2, rhs=a.1.2, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:38:07,306 on stmt: a.1.1 = $166inplace_multiply.5
DEBUG 2022-02-14 16:38:07,306 on stmt: jump 130
DEBUG 2022-02-14 16:38:07,307 ==== SSA block rewrite pass on 172
DEBUG 2022-02-14 16:38:07,307 Running <numba.core.ssa._FixSSAVars object at 0x7fa046131400>
DEBUG 2022-02-14 16:38:07,307 on stmt: bool174 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:38:07,307 on stmt: $174pred = call bool174(invert.2, func=bool174, args=(Var(invert.2, numbers.py:244),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:07,307 on stmt: branch $174pred, 176, 184
DEBUG 2022-02-14 16:38:07,307 ==== SSA block rewrite pass on 176
DEBUG 2022-02-14 16:38:07,307 Running <numba.core.ssa._FixSSAVars object at 0x7fa046131400>
DEBUG 2022-02-14 16:38:07,307 on stmt: $const176.0 = const(float, 1.0)
DEBUG 2022-02-14 16:38:07,307 on stmt: $180binary_true_divide.2 = $const176.0 / r
DEBUG 2022-02-14 16:38:07,307 find_def var='r' stmt=$180binary_true_divide.2 = $const176.0 / r
DEBUG 2022-02-14 16:38:07,307 find_def_from_top label 176
DEBUG 2022-02-14 16:38:07,307 idom 172 from label 176
DEBUG 2022-02-14 16:38:07,307 find_def_from_bottom label 172
DEBUG 2022-02-14 16:38:07,307 find_def_from_top label 172
DEBUG 2022-02-14 16:38:07,307 idom 130 from label 172
DEBUG 2022-02-14 16:38:07,307 find_def_from_bottom label 130
DEBUG 2022-02-14 16:38:07,307 replaced with: $180binary_true_divide.2 = $const176.0 / r.2
DEBUG 2022-02-14 16:38:07,307 on stmt: $182return_value.3 = cast(value=$180binary_true_divide.2)
DEBUG 2022-02-14 16:38:07,307 on stmt: return $182return_value.3
DEBUG 2022-02-14 16:38:07,307 ==== SSA block rewrite pass on 184
DEBUG 2022-02-14 16:38:07,307 Running <numba.core.ssa._FixSSAVars object at 0x7fa046131400>
DEBUG 2022-02-14 16:38:07,307 on stmt: $186return_value.1 = cast(value=r)
DEBUG 2022-02-14 16:38:07,308 find_def var='r' stmt=$186return_value.1 = cast(value=r)
DEBUG 2022-02-14 16:38:07,308 find_def_from_top label 184
DEBUG 2022-02-14 16:38:07,308 idom 172 from label 184
DEBUG 2022-02-14 16:38:07,308 find_def_from_bottom label 172
DEBUG 2022-02-14 16:38:07,308 find_def_from_top label 172
DEBUG 2022-02-14 16:38:07,308 idom 130 from label 172
DEBUG 2022-02-14 16:38:07,308 find_def_from_bottom label 130
DEBUG 2022-02-14 16:38:07,308 replaced with: $186return_value.1 = cast(value=r.2)
DEBUG 2022-02-14 16:38:07,308 on stmt: return $186return_value.1
DEBUG 2022-02-14 16:38:14,269 bytecode dump:
>          0	NOP(arg=None, lineno=217)
           2	LOAD_DEREF(arg=1, lineno=217)
           4	LOAD_CONST(arg=1, lineno=217)
           6	CALL_FUNCTION(arg=1, lineno=217)
           8	STORE_FAST(arg=2, lineno=217)
          10	LOAD_DEREF(arg=1, lineno=218)
          12	LOAD_FAST(arg=0, lineno=218)
          14	CALL_FUNCTION(arg=1, lineno=218)
          16	STORE_FAST(arg=0, lineno=218)
          18	LOAD_FAST(arg=1, lineno=219)
          20	LOAD_CONST(arg=2, lineno=219)
          22	COMPARE_OP(arg=0, lineno=219)
          24	POP_JUMP_IF_FALSE(arg=98, lineno=219)
          26	LOAD_CONST(arg=3, lineno=220)
          28	STORE_FAST(arg=3, lineno=220)
          30	LOAD_FAST(arg=1, lineno=221)
          32	UNARY_NEGATIVE(arg=None, lineno=221)
          34	STORE_FAST(arg=4, lineno=221)
          36	LOAD_FAST(arg=4, lineno=222)
          38	LOAD_CONST(arg=2, lineno=222)
          40	COMPARE_OP(arg=0, lineno=222)
          42	POP_JUMP_IF_FALSE(arg=48, lineno=222)
          44	LOAD_GLOBAL(arg=0, lineno=223)
          46	RAISE_VARARGS(arg=1, lineno=223)
>         48	LOAD_DEREF(arg=0, lineno=224)
          50	POP_JUMP_IF_FALSE(arg=106, lineno=224)
          52	LOAD_FAST(arg=0, lineno=225)
          54	LOAD_CONST(arg=2, lineno=225)
          56	COMPARE_OP(arg=2, lineno=225)
          58	POP_JUMP_IF_FALSE(arg=76, lineno=225)
          60	LOAD_DEREF(arg=2, lineno=226)
          62	POP_JUMP_IF_FALSE(arg=68, lineno=226)
          64	LOAD_DEREF(arg=2, lineno=227)
          66	RETURN_VALUE(arg=None, lineno=227)
>         68	LOAD_GLOBAL(arg=1, lineno=229)
          70	LOAD_CONST(arg=4, lineno=229)
          72	CALL_FUNCTION(arg=1, lineno=229)
          74	RAISE_VARARGS(arg=1, lineno=229)
>         76	LOAD_FAST(arg=0, lineno=230)
          78	LOAD_CONST(arg=1, lineno=230)
          80	COMPARE_OP(arg=3, lineno=230)
          82	POP_JUMP_IF_FALSE(arg=106, lineno=230)
          84	LOAD_FAST(arg=0, lineno=230)
          86	LOAD_CONST(arg=5, lineno=230)
          88	COMPARE_OP(arg=3, lineno=230)
          90	POP_JUMP_IF_FALSE(arg=106, lineno=230)
          92	LOAD_CONST(arg=2, lineno=231)
          94	RETURN_VALUE(arg=None, lineno=231)
          96	JUMP_FORWARD(arg=8, lineno=231)
>         98	LOAD_CONST(arg=6, lineno=233)
         100	STORE_FAST(arg=3, lineno=233)
         102	LOAD_FAST(arg=1, lineno=234)
         104	STORE_FAST(arg=4, lineno=234)
>        106	LOAD_FAST(arg=4, lineno=235)
         108	LOAD_CONST(arg=7, lineno=235)
         110	COMPARE_OP(arg=4, lineno=235)
         112	POP_JUMP_IF_FALSE(arg=130, lineno=235)
         114	LOAD_GLOBAL(arg=2, lineno=237)
         116	LOAD_METHOD(arg=3, lineno=237)
         118	LOAD_FAST(arg=0, lineno=237)
         120	LOAD_GLOBAL(arg=4, lineno=237)
         122	LOAD_FAST(arg=1, lineno=237)
         124	CALL_FUNCTION(arg=1, lineno=237)
         126	CALL_METHOD(arg=2, lineno=237)
         128	RETURN_VALUE(arg=None, lineno=237)
>        130	LOAD_FAST(arg=4, lineno=238)
         132	LOAD_CONST(arg=2, lineno=238)
         134	COMPARE_OP(arg=3, lineno=238)
         136	POP_JUMP_IF_FALSE(arg=172, lineno=238)
         138	LOAD_FAST(arg=4, lineno=239)
         140	LOAD_CONST(arg=1, lineno=239)
         142	BINARY_AND(arg=None, lineno=239)
         144	POP_JUMP_IF_FALSE(arg=154, lineno=239)
         146	LOAD_FAST(arg=2, lineno=240)
         148	LOAD_FAST(arg=0, lineno=240)
         150	INPLACE_MULTIPLY(arg=None, lineno=240)
         152	STORE_FAST(arg=2, lineno=240)
>        154	LOAD_FAST(arg=4, lineno=241)
         156	LOAD_CONST(arg=1, lineno=241)
         158	INPLACE_RSHIFT(arg=None, lineno=241)
         160	STORE_FAST(arg=4, lineno=241)
         162	LOAD_FAST(arg=0, lineno=242)
         164	LOAD_FAST(arg=0, lineno=242)
         166	INPLACE_MULTIPLY(arg=None, lineno=242)
         168	STORE_FAST(arg=0, lineno=242)
         170	JUMP_ABSOLUTE(arg=130, lineno=242)
>        172	LOAD_FAST(arg=3, lineno=244)
         174	POP_JUMP_IF_FALSE(arg=184, lineno=244)
         176	LOAD_CONST(arg=8, lineno=244)
         178	LOAD_FAST(arg=2, lineno=244)
         180	BINARY_TRUE_DIVIDE(arg=None, lineno=244)
         182	RETURN_VALUE(arg=None, lineno=244)
>        184	LOAD_FAST(arg=2, lineno=244)
         186	RETURN_VALUE(arg=None, lineno=244)
DEBUG 2022-02-14 16:38:14,269 pending: deque([State(pc_initial=0 nstack_initial=0)])
DEBUG 2022-02-14 16:38:14,269 stack: []
DEBUG 2022-02-14 16:38:14,269 dispatch pc=0, inst=NOP(arg=None, lineno=217)
DEBUG 2022-02-14 16:38:14,269 stack []
DEBUG 2022-02-14 16:38:14,269 dispatch pc=2, inst=LOAD_DEREF(arg=1, lineno=217)
DEBUG 2022-02-14 16:38:14,269 stack []
DEBUG 2022-02-14 16:38:14,269 dispatch pc=4, inst=LOAD_CONST(arg=1, lineno=217)
DEBUG 2022-02-14 16:38:14,269 stack ['$2load_deref.0']
DEBUG 2022-02-14 16:38:14,269 dispatch pc=6, inst=CALL_FUNCTION(arg=1, lineno=217)
DEBUG 2022-02-14 16:38:14,269 stack ['$2load_deref.0', '$const4.1']
DEBUG 2022-02-14 16:38:14,270 dispatch pc=8, inst=STORE_FAST(arg=2, lineno=217)
DEBUG 2022-02-14 16:38:14,270 stack ['$6call_function.2']
DEBUG 2022-02-14 16:38:14,270 dispatch pc=10, inst=LOAD_DEREF(arg=1, lineno=218)
DEBUG 2022-02-14 16:38:14,270 stack []
DEBUG 2022-02-14 16:38:14,270 dispatch pc=12, inst=LOAD_FAST(arg=0, lineno=218)
DEBUG 2022-02-14 16:38:14,270 stack ['$10load_deref.3']
DEBUG 2022-02-14 16:38:14,270 dispatch pc=14, inst=CALL_FUNCTION(arg=1, lineno=218)
DEBUG 2022-02-14 16:38:14,270 stack ['$10load_deref.3', '$a12.4']
DEBUG 2022-02-14 16:38:14,270 dispatch pc=16, inst=STORE_FAST(arg=0, lineno=218)
DEBUG 2022-02-14 16:38:14,270 stack ['$14call_function.5']
DEBUG 2022-02-14 16:38:14,270 dispatch pc=18, inst=LOAD_FAST(arg=1, lineno=219)
DEBUG 2022-02-14 16:38:14,270 stack []
DEBUG 2022-02-14 16:38:14,270 dispatch pc=20, inst=LOAD_CONST(arg=2, lineno=219)
DEBUG 2022-02-14 16:38:14,270 stack ['$b18.6']
DEBUG 2022-02-14 16:38:14,270 dispatch pc=22, inst=COMPARE_OP(arg=0, lineno=219)
DEBUG 2022-02-14 16:38:14,270 stack ['$b18.6', '$const20.7']
DEBUG 2022-02-14 16:38:14,270 dispatch pc=24, inst=POP_JUMP_IF_FALSE(arg=98, lineno=219)
DEBUG 2022-02-14 16:38:14,270 stack ['$22compare_op.8']
DEBUG 2022-02-14 16:38:14,270 end state. edges=[Edge(pc=26, stack=(), blockstack=(), npush=0), Edge(pc=98, stack=(), blockstack=(), npush=0)]
DEBUG 2022-02-14 16:38:14,270 pending: deque([State(pc_initial=26 nstack_initial=0), State(pc_initial=98 nstack_initial=0)])
DEBUG 2022-02-14 16:38:14,270 stack: []
DEBUG 2022-02-14 16:38:14,270 dispatch pc=26, inst=LOAD_CONST(arg=3, lineno=220)
DEBUG 2022-02-14 16:38:14,270 stack []
DEBUG 2022-02-14 16:38:14,270 dispatch pc=28, inst=STORE_FAST(arg=3, lineno=220)
DEBUG 2022-02-14 16:38:14,271 stack ['$const26.0']
DEBUG 2022-02-14 16:38:14,271 dispatch pc=30, inst=LOAD_FAST(arg=1, lineno=221)
DEBUG 2022-02-14 16:38:14,271 stack []
DEBUG 2022-02-14 16:38:14,271 dispatch pc=32, inst=UNARY_NEGATIVE(arg=None, lineno=221)
DEBUG 2022-02-14 16:38:14,271 stack ['$b30.1']
DEBUG 2022-02-14 16:38:14,271 dispatch pc=34, inst=STORE_FAST(arg=4, lineno=221)
DEBUG 2022-02-14 16:38:14,271 stack ['$32unary_negative.2']
DEBUG 2022-02-14 16:38:14,271 dispatch pc=36, inst=LOAD_FAST(arg=4, lineno=222)
DEBUG 2022-02-14 16:38:14,271 stack []
DEBUG 2022-02-14 16:38:14,271 dispatch pc=38, inst=LOAD_CONST(arg=2, lineno=222)
DEBUG 2022-02-14 16:38:14,271 stack ['$exp36.3']
DEBUG 2022-02-14 16:38:14,271 dispatch pc=40, inst=COMPARE_OP(arg=0, lineno=222)
DEBUG 2022-02-14 16:38:14,271 stack ['$exp36.3', '$const38.4']
DEBUG 2022-02-14 16:38:14,271 dispatch pc=42, inst=POP_JUMP_IF_FALSE(arg=48, lineno=222)
DEBUG 2022-02-14 16:38:14,271 stack ['$40compare_op.5']
DEBUG 2022-02-14 16:38:14,271 end state. edges=[Edge(pc=44, stack=(), blockstack=(), npush=0), Edge(pc=48, stack=(), blockstack=(), npush=0)]
DEBUG 2022-02-14 16:38:14,271 pending: deque([State(pc_initial=98 nstack_initial=0), State(pc_initial=44 nstack_initial=0), State(pc_initial=48 nstack_initial=0)])
DEBUG 2022-02-14 16:38:14,271 stack: []
DEBUG 2022-02-14 16:38:14,271 dispatch pc=98, inst=LOAD_CONST(arg=6, lineno=233)
DEBUG 2022-02-14 16:38:14,271 stack []
DEBUG 2022-02-14 16:38:14,272 dispatch pc=100, inst=STORE_FAST(arg=3, lineno=233)
DEBUG 2022-02-14 16:38:14,272 stack ['$const98.0']
DEBUG 2022-02-14 16:38:14,272 dispatch pc=102, inst=LOAD_FAST(arg=1, lineno=234)
DEBUG 2022-02-14 16:38:14,272 stack []
DEBUG 2022-02-14 16:38:14,272 dispatch pc=104, inst=STORE_FAST(arg=4, lineno=234)
DEBUG 2022-02-14 16:38:14,272 stack ['$b102.1']
DEBUG 2022-02-14 16:38:14,272 end state. edges=[Edge(pc=106, stack=(), blockstack=(), npush=0)]
DEBUG 2022-02-14 16:38:14,272 pending: deque([State(pc_initial=44 nstack_initial=0), State(pc_initial=48 nstack_initial=0), State(pc_initial=106 nstack_initial=0)])
DEBUG 2022-02-14 16:38:14,272 stack: []
DEBUG 2022-02-14 16:38:14,272 dispatch pc=44, inst=LOAD_GLOBAL(arg=0, lineno=223)
DEBUG 2022-02-14 16:38:14,272 stack []
DEBUG 2022-02-14 16:38:14,272 dispatch pc=46, inst=RAISE_VARARGS(arg=1, lineno=223)
DEBUG 2022-02-14 16:38:14,272 stack ['$44load_global.0']
DEBUG 2022-02-14 16:38:14,272 end state. edges=[]
DEBUG 2022-02-14 16:38:14,272 pending: deque([State(pc_initial=48 nstack_initial=0), State(pc_initial=106 nstack_initial=0)])
DEBUG 2022-02-14 16:38:14,272 stack: []
DEBUG 2022-02-14 16:38:14,272 dispatch pc=48, inst=LOAD_DEREF(arg=0, lineno=224)
DEBUG 2022-02-14 16:38:14,272 stack []
DEBUG 2022-02-14 16:38:14,272 dispatch pc=50, inst=POP_JUMP_IF_FALSE(arg=106, lineno=224)
DEBUG 2022-02-14 16:38:14,272 stack ['$48load_deref.0']
DEBUG 2022-02-14 16:38:14,273 end state. edges=[Edge(pc=52, stack=(), blockstack=(), npush=0), Edge(pc=106, stack=(), blockstack=(), npush=0)]
DEBUG 2022-02-14 16:38:14,273 pending: deque([State(pc_initial=106 nstack_initial=0), State(pc_initial=52 nstack_initial=0), State(pc_initial=106 nstack_initial=0)])
DEBUG 2022-02-14 16:38:14,273 stack: []
DEBUG 2022-02-14 16:38:14,273 dispatch pc=106, inst=LOAD_FAST(arg=4, lineno=235)
DEBUG 2022-02-14 16:38:14,273 stack []
DEBUG 2022-02-14 16:38:14,273 dispatch pc=108, inst=LOAD_CONST(arg=7, lineno=235)
DEBUG 2022-02-14 16:38:14,273 stack ['$exp106.0']
DEBUG 2022-02-14 16:38:14,273 dispatch pc=110, inst=COMPARE_OP(arg=4, lineno=235)
DEBUG 2022-02-14 16:38:14,273 stack ['$exp106.0', '$const108.1']
DEBUG 2022-02-14 16:38:14,273 dispatch pc=112, inst=POP_JUMP_IF_FALSE(arg=130, lineno=235)
DEBUG 2022-02-14 16:38:14,273 stack ['$110compare_op.2']
DEBUG 2022-02-14 16:38:14,273 end state. edges=[Edge(pc=114, stack=(), blockstack=(), npush=0), Edge(pc=130, stack=(), blockstack=(), npush=0)]
DEBUG 2022-02-14 16:38:14,273 pending: deque([State(pc_initial=52 nstack_initial=0), State(pc_initial=106 nstack_initial=0), State(pc_initial=114 nstack_initial=0), State(pc_initial=130 nstack_initial=0)])
DEBUG 2022-02-14 16:38:14,273 stack: []
DEBUG 2022-02-14 16:38:14,273 dispatch pc=52, inst=LOAD_FAST(arg=0, lineno=225)
DEBUG 2022-02-14 16:38:14,273 stack []
DEBUG 2022-02-14 16:38:14,273 dispatch pc=54, inst=LOAD_CONST(arg=2, lineno=225)
DEBUG 2022-02-14 16:38:14,273 stack ['$a52.0']
DEBUG 2022-02-14 16:38:14,273 dispatch pc=56, inst=COMPARE_OP(arg=2, lineno=225)
DEBUG 2022-02-14 16:38:14,273 stack ['$a52.0', '$const54.1']
DEBUG 2022-02-14 16:38:14,273 dispatch pc=58, inst=POP_JUMP_IF_FALSE(arg=76, lineno=225)
DEBUG 2022-02-14 16:38:14,274 stack ['$56compare_op.2']
DEBUG 2022-02-14 16:38:14,274 end state. edges=[Edge(pc=60, stack=(), blockstack=(), npush=0), Edge(pc=76, stack=(), blockstack=(), npush=0)]
DEBUG 2022-02-14 16:38:14,274 pending: deque([State(pc_initial=106 nstack_initial=0), State(pc_initial=114 nstack_initial=0), State(pc_initial=130 nstack_initial=0), State(pc_initial=60 nstack_initial=0), State(pc_initial=76 nstack_initial=0)])
DEBUG 2022-02-14 16:38:14,274 pending: deque([State(pc_initial=114 nstack_initial=0), State(pc_initial=130 nstack_initial=0), State(pc_initial=60 nstack_initial=0), State(pc_initial=76 nstack_initial=0)])
DEBUG 2022-02-14 16:38:14,274 stack: []
DEBUG 2022-02-14 16:38:14,274 dispatch pc=114, inst=LOAD_GLOBAL(arg=2, lineno=237)
DEBUG 2022-02-14 16:38:14,274 stack []
DEBUG 2022-02-14 16:38:14,274 dispatch pc=116, inst=LOAD_METHOD(arg=3, lineno=237)
DEBUG 2022-02-14 16:38:14,274 stack ['$114load_global.0']
DEBUG 2022-02-14 16:38:14,274 dispatch pc=118, inst=LOAD_FAST(arg=0, lineno=237)
DEBUG 2022-02-14 16:38:14,274 stack ['$116load_method.1']
DEBUG 2022-02-14 16:38:14,274 dispatch pc=120, inst=LOAD_GLOBAL(arg=4, lineno=237)
DEBUG 2022-02-14 16:38:14,274 stack ['$116load_method.1', '$a118.2']
DEBUG 2022-02-14 16:38:14,274 dispatch pc=122, inst=LOAD_FAST(arg=1, lineno=237)
DEBUG 2022-02-14 16:38:14,274 stack ['$116load_method.1', '$a118.2', '$120load_global.3']
DEBUG 2022-02-14 16:38:14,274 dispatch pc=124, inst=CALL_FUNCTION(arg=1, lineno=237)
DEBUG 2022-02-14 16:38:14,274 stack ['$116load_method.1', '$a118.2', '$120load_global.3', '$b122.4']
DEBUG 2022-02-14 16:38:14,274 dispatch pc=126, inst=CALL_METHOD(arg=2, lineno=237)
DEBUG 2022-02-14 16:38:14,274 stack ['$116load_method.1', '$a118.2', '$124call_function.5']
DEBUG 2022-02-14 16:38:14,274 dispatch pc=128, inst=RETURN_VALUE(arg=None, lineno=237)
DEBUG 2022-02-14 16:38:14,275 stack ['$126call_method.6']
DEBUG 2022-02-14 16:38:14,275 end state. edges=[]
DEBUG 2022-02-14 16:38:14,275 pending: deque([State(pc_initial=130 nstack_initial=0), State(pc_initial=60 nstack_initial=0), State(pc_initial=76 nstack_initial=0)])
DEBUG 2022-02-14 16:38:14,275 stack: []
DEBUG 2022-02-14 16:38:14,275 dispatch pc=130, inst=LOAD_FAST(arg=4, lineno=238)
DEBUG 2022-02-14 16:38:14,275 stack []
DEBUG 2022-02-14 16:38:14,275 dispatch pc=132, inst=LOAD_CONST(arg=2, lineno=238)
DEBUG 2022-02-14 16:38:14,275 stack ['$exp130.0']
DEBUG 2022-02-14 16:38:14,275 dispatch pc=134, inst=COMPARE_OP(arg=3, lineno=238)
DEBUG 2022-02-14 16:38:14,275 stack ['$exp130.0', '$const132.1']
DEBUG 2022-02-14 16:38:14,275 dispatch pc=136, inst=POP_JUMP_IF_FALSE(arg=172, lineno=238)
DEBUG 2022-02-14 16:38:14,275 stack ['$134compare_op.2']
DEBUG 2022-02-14 16:38:14,275 end state. edges=[Edge(pc=138, stack=(), blockstack=(), npush=0), Edge(pc=172, stack=(), blockstack=(), npush=0)]
DEBUG 2022-02-14 16:38:14,275 pending: deque([State(pc_initial=60 nstack_initial=0), State(pc_initial=76 nstack_initial=0), State(pc_initial=138 nstack_initial=0), State(pc_initial=172 nstack_initial=0)])
DEBUG 2022-02-14 16:38:14,275 stack: []
DEBUG 2022-02-14 16:38:14,275 dispatch pc=60, inst=LOAD_DEREF(arg=2, lineno=226)
DEBUG 2022-02-14 16:38:14,275 stack []
DEBUG 2022-02-14 16:38:14,275 dispatch pc=62, inst=POP_JUMP_IF_FALSE(arg=68, lineno=226)
DEBUG 2022-02-14 16:38:14,275 stack ['$60load_deref.0']
DEBUG 2022-02-14 16:38:14,275 end state. edges=[Edge(pc=64, stack=(), blockstack=(), npush=0), Edge(pc=68, stack=(), blockstack=(), npush=0)]
DEBUG 2022-02-14 16:38:14,275 pending: deque([State(pc_initial=76 nstack_initial=0), State(pc_initial=138 nstack_initial=0), State(pc_initial=172 nstack_initial=0), State(pc_initial=64 nstack_initial=0), State(pc_initial=68 nstack_initial=0)])
DEBUG 2022-02-14 16:38:14,276 stack: []
DEBUG 2022-02-14 16:38:14,276 dispatch pc=76, inst=LOAD_FAST(arg=0, lineno=230)
DEBUG 2022-02-14 16:38:14,276 stack []
DEBUG 2022-02-14 16:38:14,276 dispatch pc=78, inst=LOAD_CONST(arg=1, lineno=230)
DEBUG 2022-02-14 16:38:14,276 stack ['$a76.0']
DEBUG 2022-02-14 16:38:14,276 dispatch pc=80, inst=COMPARE_OP(arg=3, lineno=230)
DEBUG 2022-02-14 16:38:14,276 stack ['$a76.0', '$const78.1']
DEBUG 2022-02-14 16:38:14,276 dispatch pc=82, inst=POP_JUMP_IF_FALSE(arg=106, lineno=230)
DEBUG 2022-02-14 16:38:14,276 stack ['$80compare_op.2']
DEBUG 2022-02-14 16:38:14,276 end state. edges=[Edge(pc=84, stack=(), blockstack=(), npush=0), Edge(pc=106, stack=(), blockstack=(), npush=0)]
DEBUG 2022-02-14 16:38:14,276 pending: deque([State(pc_initial=138 nstack_initial=0), State(pc_initial=172 nstack_initial=0), State(pc_initial=64 nstack_initial=0), State(pc_initial=68 nstack_initial=0), State(pc_initial=84 nstack_initial=0), State(pc_initial=106 nstack_initial=0)])
DEBUG 2022-02-14 16:38:14,276 stack: []
DEBUG 2022-02-14 16:38:14,276 dispatch pc=138, inst=LOAD_FAST(arg=4, lineno=239)
DEBUG 2022-02-14 16:38:14,276 stack []
DEBUG 2022-02-14 16:38:14,276 dispatch pc=140, inst=LOAD_CONST(arg=1, lineno=239)
DEBUG 2022-02-14 16:38:14,276 stack ['$exp138.0']
DEBUG 2022-02-14 16:38:14,276 dispatch pc=142, inst=BINARY_AND(arg=None, lineno=239)
DEBUG 2022-02-14 16:38:14,276 stack ['$exp138.0', '$const140.1']
DEBUG 2022-02-14 16:38:14,276 dispatch pc=144, inst=POP_JUMP_IF_FALSE(arg=154, lineno=239)
DEBUG 2022-02-14 16:38:14,276 stack ['$142binary_and.2']
DEBUG 2022-02-14 16:38:14,276 end state. edges=[Edge(pc=146, stack=(), blockstack=(), npush=0), Edge(pc=154, stack=(), blockstack=(), npush=0)]
DEBUG 2022-02-14 16:38:14,277 pending: deque([State(pc_initial=172 nstack_initial=0), State(pc_initial=64 nstack_initial=0), State(pc_initial=68 nstack_initial=0), State(pc_initial=84 nstack_initial=0), State(pc_initial=106 nstack_initial=0), State(pc_initial=146 nstack_initial=0), State(pc_initial=154 nstack_initial=0)])
DEBUG 2022-02-14 16:38:14,277 stack: []
DEBUG 2022-02-14 16:38:14,277 dispatch pc=172, inst=LOAD_FAST(arg=3, lineno=244)
DEBUG 2022-02-14 16:38:14,277 stack []
DEBUG 2022-02-14 16:38:14,277 dispatch pc=174, inst=POP_JUMP_IF_FALSE(arg=184, lineno=244)
DEBUG 2022-02-14 16:38:14,277 stack ['$invert172.0']
DEBUG 2022-02-14 16:38:14,277 end state. edges=[Edge(pc=176, stack=(), blockstack=(), npush=0), Edge(pc=184, stack=(), blockstack=(), npush=0)]
DEBUG 2022-02-14 16:38:14,277 pending: deque([State(pc_initial=64 nstack_initial=0), State(pc_initial=68 nstack_initial=0), State(pc_initial=84 nstack_initial=0), State(pc_initial=106 nstack_initial=0), State(pc_initial=146 nstack_initial=0), State(pc_initial=154 nstack_initial=0), State(pc_initial=176 nstack_initial=0), State(pc_initial=184 nstack_initial=0)])
DEBUG 2022-02-14 16:38:14,277 stack: []
DEBUG 2022-02-14 16:38:14,277 dispatch pc=64, inst=LOAD_DEREF(arg=2, lineno=227)
DEBUG 2022-02-14 16:38:14,277 stack []
DEBUG 2022-02-14 16:38:14,277 dispatch pc=66, inst=RETURN_VALUE(arg=None, lineno=227)
DEBUG 2022-02-14 16:38:14,277 stack ['$64load_deref.0']
DEBUG 2022-02-14 16:38:14,277 end state. edges=[]
DEBUG 2022-02-14 16:38:14,277 pending: deque([State(pc_initial=68 nstack_initial=0), State(pc_initial=84 nstack_initial=0), State(pc_initial=106 nstack_initial=0), State(pc_initial=146 nstack_initial=0), State(pc_initial=154 nstack_initial=0), State(pc_initial=176 nstack_initial=0), State(pc_initial=184 nstack_initial=0)])
DEBUG 2022-02-14 16:38:14,277 stack: []
DEBUG 2022-02-14 16:38:14,277 dispatch pc=68, inst=LOAD_GLOBAL(arg=1, lineno=229)
DEBUG 2022-02-14 16:38:14,277 stack []
DEBUG 2022-02-14 16:38:14,277 dispatch pc=70, inst=LOAD_CONST(arg=4, lineno=229)
DEBUG 2022-02-14 16:38:14,277 stack ['$68load_global.0']
DEBUG 2022-02-14 16:38:14,277 dispatch pc=72, inst=CALL_FUNCTION(arg=1, lineno=229)
DEBUG 2022-02-14 16:38:14,278 stack ['$68load_global.0', '$const70.1']
DEBUG 2022-02-14 16:38:14,278 dispatch pc=74, inst=RAISE_VARARGS(arg=1, lineno=229)
DEBUG 2022-02-14 16:38:14,278 stack ['$72call_function.2']
DEBUG 2022-02-14 16:38:14,278 end state. edges=[]
DEBUG 2022-02-14 16:38:14,278 pending: deque([State(pc_initial=84 nstack_initial=0), State(pc_initial=106 nstack_initial=0), State(pc_initial=146 nstack_initial=0), State(pc_initial=154 nstack_initial=0), State(pc_initial=176 nstack_initial=0), State(pc_initial=184 nstack_initial=0)])
DEBUG 2022-02-14 16:38:14,278 stack: []
DEBUG 2022-02-14 16:38:14,278 dispatch pc=84, inst=LOAD_FAST(arg=0, lineno=230)
DEBUG 2022-02-14 16:38:14,278 stack []
DEBUG 2022-02-14 16:38:14,278 dispatch pc=86, inst=LOAD_CONST(arg=5, lineno=230)
DEBUG 2022-02-14 16:38:14,278 stack ['$a84.0']
DEBUG 2022-02-14 16:38:14,278 dispatch pc=88, inst=COMPARE_OP(arg=3, lineno=230)
DEBUG 2022-02-14 16:38:14,278 stack ['$a84.0', '$const86.1']
DEBUG 2022-02-14 16:38:14,278 dispatch pc=90, inst=POP_JUMP_IF_FALSE(arg=106, lineno=230)
DEBUG 2022-02-14 16:38:14,278 stack ['$88compare_op.2']
DEBUG 2022-02-14 16:38:14,278 end state. edges=[Edge(pc=92, stack=(), blockstack=(), npush=0), Edge(pc=106, stack=(), blockstack=(), npush=0)]
DEBUG 2022-02-14 16:38:14,278 pending: deque([State(pc_initial=106 nstack_initial=0), State(pc_initial=146 nstack_initial=0), State(pc_initial=154 nstack_initial=0), State(pc_initial=176 nstack_initial=0), State(pc_initial=184 nstack_initial=0), State(pc_initial=92 nstack_initial=0), State(pc_initial=106 nstack_initial=0)])
DEBUG 2022-02-14 16:38:14,278 pending: deque([State(pc_initial=146 nstack_initial=0), State(pc_initial=154 nstack_initial=0), State(pc_initial=176 nstack_initial=0), State(pc_initial=184 nstack_initial=0), State(pc_initial=92 nstack_initial=0), State(pc_initial=106 nstack_initial=0)])
DEBUG 2022-02-14 16:38:14,278 stack: []
DEBUG 2022-02-14 16:38:14,278 dispatch pc=146, inst=LOAD_FAST(arg=2, lineno=240)
DEBUG 2022-02-14 16:38:14,278 stack []
DEBUG 2022-02-14 16:38:14,279 dispatch pc=148, inst=LOAD_FAST(arg=0, lineno=240)
DEBUG 2022-02-14 16:38:14,279 stack ['$r146.0']
DEBUG 2022-02-14 16:38:14,279 dispatch pc=150, inst=INPLACE_MULTIPLY(arg=None, lineno=240)
DEBUG 2022-02-14 16:38:14,279 stack ['$r146.0', '$a148.1']
DEBUG 2022-02-14 16:38:14,279 dispatch pc=152, inst=STORE_FAST(arg=2, lineno=240)
DEBUG 2022-02-14 16:38:14,279 stack ['$150inplace_multiply.2']
DEBUG 2022-02-14 16:38:14,279 end state. edges=[Edge(pc=154, stack=(), blockstack=(), npush=0)]
DEBUG 2022-02-14 16:38:14,279 pending: deque([State(pc_initial=154 nstack_initial=0), State(pc_initial=176 nstack_initial=0), State(pc_initial=184 nstack_initial=0), State(pc_initial=92 nstack_initial=0), State(pc_initial=106 nstack_initial=0), State(pc_initial=154 nstack_initial=0)])
DEBUG 2022-02-14 16:38:14,279 stack: []
DEBUG 2022-02-14 16:38:14,279 dispatch pc=154, inst=LOAD_FAST(arg=4, lineno=241)
DEBUG 2022-02-14 16:38:14,279 stack []
DEBUG 2022-02-14 16:38:14,279 dispatch pc=156, inst=LOAD_CONST(arg=1, lineno=241)
DEBUG 2022-02-14 16:38:14,279 stack ['$exp154.0']
DEBUG 2022-02-14 16:38:14,279 dispatch pc=158, inst=INPLACE_RSHIFT(arg=None, lineno=241)
DEBUG 2022-02-14 16:38:14,279 stack ['$exp154.0', '$const156.1']
DEBUG 2022-02-14 16:38:14,279 dispatch pc=160, inst=STORE_FAST(arg=4, lineno=241)
DEBUG 2022-02-14 16:38:14,279 stack ['$158inplace_rshift.2']
DEBUG 2022-02-14 16:38:14,279 dispatch pc=162, inst=LOAD_FAST(arg=0, lineno=242)
DEBUG 2022-02-14 16:38:14,279 stack []
DEBUG 2022-02-14 16:38:14,279 dispatch pc=164, inst=LOAD_FAST(arg=0, lineno=242)
DEBUG 2022-02-14 16:38:14,279 stack ['$a162.3']
DEBUG 2022-02-14 16:38:14,280 dispatch pc=166, inst=INPLACE_MULTIPLY(arg=None, lineno=242)
DEBUG 2022-02-14 16:38:14,280 stack ['$a162.3', '$a164.4']
DEBUG 2022-02-14 16:38:14,280 dispatch pc=168, inst=STORE_FAST(arg=0, lineno=242)
DEBUG 2022-02-14 16:38:14,280 stack ['$166inplace_multiply.5']
DEBUG 2022-02-14 16:38:14,280 dispatch pc=170, inst=JUMP_ABSOLUTE(arg=130, lineno=242)
DEBUG 2022-02-14 16:38:14,280 stack []
DEBUG 2022-02-14 16:38:14,280 end state. edges=[Edge(pc=130, stack=(), blockstack=(), npush=0)]
DEBUG 2022-02-14 16:38:14,280 pending: deque([State(pc_initial=176 nstack_initial=0), State(pc_initial=184 nstack_initial=0), State(pc_initial=92 nstack_initial=0), State(pc_initial=106 nstack_initial=0), State(pc_initial=154 nstack_initial=0), State(pc_initial=130 nstack_initial=0)])
DEBUG 2022-02-14 16:38:14,280 stack: []
DEBUG 2022-02-14 16:38:14,280 dispatch pc=176, inst=LOAD_CONST(arg=8, lineno=244)
DEBUG 2022-02-14 16:38:14,280 stack []
DEBUG 2022-02-14 16:38:14,280 dispatch pc=178, inst=LOAD_FAST(arg=2, lineno=244)
DEBUG 2022-02-14 16:38:14,280 stack ['$const176.0']
DEBUG 2022-02-14 16:38:14,280 dispatch pc=180, inst=BINARY_TRUE_DIVIDE(arg=None, lineno=244)
DEBUG 2022-02-14 16:38:14,280 stack ['$const176.0', '$r178.1']
DEBUG 2022-02-14 16:38:14,280 dispatch pc=182, inst=RETURN_VALUE(arg=None, lineno=244)
DEBUG 2022-02-14 16:38:14,280 stack ['$180binary_true_divide.2']
DEBUG 2022-02-14 16:38:14,280 end state. edges=[]
DEBUG 2022-02-14 16:38:14,280 pending: deque([State(pc_initial=184 nstack_initial=0), State(pc_initial=92 nstack_initial=0), State(pc_initial=106 nstack_initial=0), State(pc_initial=154 nstack_initial=0), State(pc_initial=130 nstack_initial=0)])
DEBUG 2022-02-14 16:38:14,280 stack: []
DEBUG 2022-02-14 16:38:14,280 dispatch pc=184, inst=LOAD_FAST(arg=2, lineno=244)
DEBUG 2022-02-14 16:38:14,280 stack []
DEBUG 2022-02-14 16:38:14,281 dispatch pc=186, inst=RETURN_VALUE(arg=None, lineno=244)
DEBUG 2022-02-14 16:38:14,281 stack ['$r184.0']
DEBUG 2022-02-14 16:38:14,281 end state. edges=[]
DEBUG 2022-02-14 16:38:14,281 pending: deque([State(pc_initial=92 nstack_initial=0), State(pc_initial=106 nstack_initial=0), State(pc_initial=154 nstack_initial=0), State(pc_initial=130 nstack_initial=0)])
DEBUG 2022-02-14 16:38:14,281 stack: []
DEBUG 2022-02-14 16:38:14,281 dispatch pc=92, inst=LOAD_CONST(arg=2, lineno=231)
DEBUG 2022-02-14 16:38:14,281 stack []
DEBUG 2022-02-14 16:38:14,281 dispatch pc=94, inst=RETURN_VALUE(arg=None, lineno=231)
DEBUG 2022-02-14 16:38:14,281 stack ['$const92.0']
DEBUG 2022-02-14 16:38:14,281 end state. edges=[]
DEBUG 2022-02-14 16:38:14,281 pending: deque([State(pc_initial=106 nstack_initial=0), State(pc_initial=154 nstack_initial=0), State(pc_initial=130 nstack_initial=0)])
DEBUG 2022-02-14 16:38:14,281 pending: deque([State(pc_initial=154 nstack_initial=0), State(pc_initial=130 nstack_initial=0)])
DEBUG 2022-02-14 16:38:14,281 pending: deque([State(pc_initial=130 nstack_initial=0)])
DEBUG 2022-02-14 16:38:14,281 -------------------------Prune PHIs-------------------------
DEBUG 2022-02-14 16:38:14,281 Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=26 nstack_initial=0): set(),
             State(pc_initial=44 nstack_initial=0): set(),
             State(pc_initial=48 nstack_initial=0): set(),
             State(pc_initial=52 nstack_initial=0): set(),
             State(pc_initial=60 nstack_initial=0): set(),
             State(pc_initial=64 nstack_initial=0): set(),
             State(pc_initial=68 nstack_initial=0): set(),
             State(pc_initial=76 nstack_initial=0): set(),
             State(pc_initial=84 nstack_initial=0): set(),
             State(pc_initial=92 nstack_initial=0): set(),
             State(pc_initial=98 nstack_initial=0): set(),
             State(pc_initial=106 nstack_initial=0): set(),
             State(pc_initial=114 nstack_initial=0): set(),
             State(pc_initial=130 nstack_initial=0): set(),
             State(pc_initial=138 nstack_initial=0): set(),
             State(pc_initial=146 nstack_initial=0): set(),
             State(pc_initial=154 nstack_initial=0): set(),
             State(pc_initial=172 nstack_initial=0): set(),
             State(pc_initial=176 nstack_initial=0): set(),
             State(pc_initial=184 nstack_initial=0): set()})
DEBUG 2022-02-14 16:38:14,282 defmap: {}
DEBUG 2022-02-14 16:38:14,282 phismap: defaultdict(<class 'set'>, {})
DEBUG 2022-02-14 16:38:14,282 changing phismap: defaultdict(<class 'set'>, {})
DEBUG 2022-02-14 16:38:14,282 keep phismap: {}
DEBUG 2022-02-14 16:38:14,282 new_out: defaultdict(<class 'dict'>, {})
DEBUG 2022-02-14 16:38:14,282 ----------------------DONE Prune PHIs-----------------------
DEBUG 2022-02-14 16:38:14,282 block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$2load_deref.0'}), (4, {'res': '$const4.1'}), (6, {'func': '$2load_deref.0', 'args': ['$const4.1'], 'res': '$6call_function.2'}), (8, {'value': '$6call_function.2'}), (10, {'res': '$10load_deref.3'}), (12, {'res': '$a12.4'}), (14, {'func': '$10load_deref.3', 'args': ['$a12.4'], 'res': '$14call_function.5'}), (16, {'value': '$14call_function.5'}), (18, {'res': '$b18.6'}), (20, {'res': '$const20.7'}), (22, {'lhs': '$b18.6', 'rhs': '$const20.7', 'res': '$22compare_op.8'}), (24, {'pred': '$22compare_op.8'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={26: (), 98: ()})
DEBUG 2022-02-14 16:38:14,282 block_infos State(pc_initial=26 nstack_initial=0):
AdaptBlockInfo(insts=((26, {'res': '$const26.0'}), (28, {'value': '$const26.0'}), (30, {'res': '$b30.1'}), (32, {'value': '$b30.1', 'res': '$32unary_negative.2'}), (34, {'value': '$32unary_negative.2'}), (36, {'res': '$exp36.3'}), (38, {'res': '$const38.4'}), (40, {'lhs': '$exp36.3', 'rhs': '$const38.4', 'res': '$40compare_op.5'}), (42, {'pred': '$40compare_op.5'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={44: (), 48: ()})
DEBUG 2022-02-14 16:38:14,282 block_infos State(pc_initial=44 nstack_initial=0):
AdaptBlockInfo(insts=((44, {'res': '$44load_global.0'}), (46, {'exc': '$44load_global.0'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG 2022-02-14 16:38:14,282 block_infos State(pc_initial=48 nstack_initial=0):
AdaptBlockInfo(insts=((48, {'res': '$48load_deref.0'}), (50, {'pred': '$48load_deref.0'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={52: (), 106: ()})
DEBUG 2022-02-14 16:38:14,282 block_infos State(pc_initial=52 nstack_initial=0):
AdaptBlockInfo(insts=((52, {'res': '$a52.0'}), (54, {'res': '$const54.1'}), (56, {'lhs': '$a52.0', 'rhs': '$const54.1', 'res': '$56compare_op.2'}), (58, {'pred': '$56compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={60: (), 76: ()})
DEBUG 2022-02-14 16:38:14,283 block_infos State(pc_initial=60 nstack_initial=0):
AdaptBlockInfo(insts=((60, {'res': '$60load_deref.0'}), (62, {'pred': '$60load_deref.0'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={64: (), 68: ()})
DEBUG 2022-02-14 16:38:14,283 block_infos State(pc_initial=64 nstack_initial=0):
AdaptBlockInfo(insts=((64, {'res': '$64load_deref.0'}), (66, {'retval': '$64load_deref.0', 'castval': '$66return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG 2022-02-14 16:38:14,283 block_infos State(pc_initial=68 nstack_initial=0):
AdaptBlockInfo(insts=((68, {'res': '$68load_global.0'}), (70, {'res': '$const70.1'}), (72, {'func': '$68load_global.0', 'args': ['$const70.1'], 'res': '$72call_function.2'}), (74, {'exc': '$72call_function.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG 2022-02-14 16:38:14,283 block_infos State(pc_initial=76 nstack_initial=0):
AdaptBlockInfo(insts=((76, {'res': '$a76.0'}), (78, {'res': '$const78.1'}), (80, {'lhs': '$a76.0', 'rhs': '$const78.1', 'res': '$80compare_op.2'}), (82, {'pred': '$80compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={84: (), 106: ()})
DEBUG 2022-02-14 16:38:14,283 block_infos State(pc_initial=84 nstack_initial=0):
AdaptBlockInfo(insts=((84, {'res': '$a84.0'}), (86, {'res': '$const86.1'}), (88, {'lhs': '$a84.0', 'rhs': '$const86.1', 'res': '$88compare_op.2'}), (90, {'pred': '$88compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={92: (), 106: ()})
DEBUG 2022-02-14 16:38:14,283 block_infos State(pc_initial=92 nstack_initial=0):
AdaptBlockInfo(insts=((92, {'res': '$const92.0'}), (94, {'retval': '$const92.0', 'castval': '$94return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG 2022-02-14 16:38:14,283 block_infos State(pc_initial=98 nstack_initial=0):
AdaptBlockInfo(insts=((98, {'res': '$const98.0'}), (100, {'value': '$const98.0'}), (102, {'res': '$b102.1'}), (104, {'value': '$b102.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={106: ()})
DEBUG 2022-02-14 16:38:14,283 block_infos State(pc_initial=106 nstack_initial=0):
AdaptBlockInfo(insts=((106, {'res': '$exp106.0'}), (108, {'res': '$const108.1'}), (110, {'lhs': '$exp106.0', 'rhs': '$const108.1', 'res': '$110compare_op.2'}), (112, {'pred': '$110compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={114: (), 130: ()})
DEBUG 2022-02-14 16:38:14,284 block_infos State(pc_initial=114 nstack_initial=0):
AdaptBlockInfo(insts=((114, {'res': '$114load_global.0'}), (116, {'item': '$114load_global.0', 'res': '$116load_method.1'}), (118, {'res': '$a118.2'}), (120, {'res': '$120load_global.3'}), (122, {'res': '$b122.4'}), (124, {'func': '$120load_global.3', 'args': ['$b122.4'], 'res': '$124call_function.5'}), (126, {'func': '$116load_method.1', 'args': ['$a118.2', '$124call_function.5'], 'res': '$126call_method.6'}), (128, {'retval': '$126call_method.6', 'castval': '$128return_value.7'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG 2022-02-14 16:38:14,284 block_infos State(pc_initial=130 nstack_initial=0):
AdaptBlockInfo(insts=((130, {'res': '$exp130.0'}), (132, {'res': '$const132.1'}), (134, {'lhs': '$exp130.0', 'rhs': '$const132.1', 'res': '$134compare_op.2'}), (136, {'pred': '$134compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={138: (), 172: ()})
DEBUG 2022-02-14 16:38:14,284 block_infos State(pc_initial=138 nstack_initial=0):
AdaptBlockInfo(insts=((138, {'res': '$exp138.0'}), (140, {'res': '$const140.1'}), (142, {'lhs': '$exp138.0', 'rhs': '$const140.1', 'res': '$142binary_and.2'}), (144, {'pred': '$142binary_and.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={146: (), 154: ()})
DEBUG 2022-02-14 16:38:14,284 block_infos State(pc_initial=146 nstack_initial=0):
AdaptBlockInfo(insts=((146, {'res': '$r146.0'}), (148, {'res': '$a148.1'}), (150, {'lhs': '$r146.0', 'rhs': '$a148.1', 'res': '$150inplace_multiply.2'}), (152, {'value': '$150inplace_multiply.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={154: ()})
DEBUG 2022-02-14 16:38:14,284 block_infos State(pc_initial=154 nstack_initial=0):
AdaptBlockInfo(insts=((154, {'res': '$exp154.0'}), (156, {'res': '$const156.1'}), (158, {'lhs': '$exp154.0', 'rhs': '$const156.1', 'res': '$158inplace_rshift.2'}), (160, {'value': '$158inplace_rshift.2'}), (162, {'res': '$a162.3'}), (164, {'res': '$a164.4'}), (166, {'lhs': '$a162.3', 'rhs': '$a164.4', 'res': '$166inplace_multiply.5'}), (168, {'value': '$166inplace_multiply.5'}), (170, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={130: ()})
DEBUG 2022-02-14 16:38:14,284 block_infos State(pc_initial=172 nstack_initial=0):
AdaptBlockInfo(insts=((172, {'res': '$invert172.0'}), (174, {'pred': '$invert172.0'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={176: (), 184: ()})
DEBUG 2022-02-14 16:38:14,284 block_infos State(pc_initial=176 nstack_initial=0):
AdaptBlockInfo(insts=((176, {'res': '$const176.0'}), (178, {'res': '$r178.1'}), (180, {'lhs': '$const176.0', 'rhs': '$r178.1', 'res': '$180binary_true_divide.2'}), (182, {'retval': '$180binary_true_divide.2', 'castval': '$182return_value.3'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG 2022-02-14 16:38:14,284 block_infos State(pc_initial=184 nstack_initial=0):
AdaptBlockInfo(insts=((184, {'res': '$r184.0'}), (186, {'retval': '$r184.0', 'castval': '$186return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG 2022-02-14 16:38:14,287 label 0:
    a = arg(0, name=a)                       ['a']
    b = arg(1, name=b)                       ['b']
    $2load_deref.0 = freevar(tp: float64)    ['$2load_deref.0']
    $const4.1 = const(int, 1)                ['$const4.1']
    r = call $2load_deref.0($const4.1, func=$2load_deref.0, args=[Var($const4.1, numbers.py:217)], kws=(), vararg=None, target=None) ['$2load_deref.0', '$const4.1', 'r']
    $10load_deref.3 = freevar(tp: float64)   ['$10load_deref.3']
    a.1 = call $10load_deref.3(a, func=$10load_deref.3, args=[Var(a, numbers.py:217)], kws=(), vararg=None, target=None) ['$10load_deref.3', 'a', 'a.1']
    $const20.7 = const(int, 0)               ['$const20.7']
    $22compare_op.8 = b < $const20.7         ['$22compare_op.8', '$const20.7', 'b']
    bool24 = global(bool: <class 'bool'>)    ['bool24']
    $24pred = call bool24($22compare_op.8, func=bool24, args=(Var($22compare_op.8, numbers.py:219),), kws=(), vararg=None, target=None) ['$22compare_op.8', '$24pred', 'bool24']
    branch $24pred, 26, 98                   ['$24pred']
label 26:
    invert = const(bool, True)               ['invert']
    exp = unary(fn=<built-in function neg>, value=b) ['b', 'exp']
    $const38.4 = const(int, 0)               ['$const38.4']
    $40compare_op.5 = exp < $const38.4       ['$40compare_op.5', '$const38.4', 'exp']
    bool42 = global(bool: <class 'bool'>)    ['bool42']
    $42pred = call bool42($40compare_op.5, func=bool42, args=(Var($40compare_op.5, numbers.py:222),), kws=(), vararg=None, target=None) ['$40compare_op.5', '$42pred', 'bool42']
    branch $42pred, 44, 48                   ['$42pred']
label 44:
    $44load_global.0 = global(OverflowError: <class 'OverflowError'>) ['$44load_global.0']
    raise $44load_global.0                   ['$44load_global.0']
label 48:
    $48load_deref.0 = freevar(is_integer: False) ['$48load_deref.0']
    bool50 = global(bool: <class 'bool'>)    ['bool50']
    $50pred = call bool50($48load_deref.0, func=bool50, args=(Var($48load_deref.0, numbers.py:224),), kws=(), vararg=None, target=None) ['$48load_deref.0', '$50pred', 'bool50']
    branch $50pred, 52, 106                  ['$50pred']
label 52:
    $const54.1 = const(int, 0)               ['$const54.1']
    $56compare_op.2 = a.1 == $const54.1      ['$56compare_op.2', '$const54.1', 'a.1']
    bool58 = global(bool: <class 'bool'>)    ['bool58']
    $58pred = call bool58($56compare_op.2, func=bool58, args=(Var($56compare_op.2, numbers.py:225),), kws=(), vararg=None, target=None) ['$56compare_op.2', '$58pred', 'bool58']
    branch $58pred, 60, 76                   ['$58pred']
label 60:
    $60load_deref.0 = freevar(zerodiv_return: False) ['$60load_deref.0']
    bool62 = global(bool: <class 'bool'>)    ['bool62']
    $62pred = call bool62($60load_deref.0, func=bool62, args=(Var($60load_deref.0, numbers.py:226),), kws=(), vararg=None, target=None) ['$60load_deref.0', '$62pred', 'bool62']
    branch $62pred, 64, 68                   ['$62pred']
label 64:
    $64load_deref.0 = freevar(zerodiv_return: False) ['$64load_deref.0']
    $66return_value.1 = cast(value=$64load_deref.0) ['$64load_deref.0', '$66return_value.1']
    return $66return_value.1                 ['$66return_value.1']
label 68:
    $68load_global.0 = global(ZeroDivisionError: <class 'ZeroDivisionError'>) ['$68load_global.0']
    $const70.1 = const(str, 0 cannot be raised to a negative power) ['$const70.1']
    $72call_function.2 = call $68load_global.0($const70.1, func=$68load_global.0, args=[Var($const70.1, numbers.py:229)], kws=(), vararg=None, target=None) ['$68load_global.0', '$72call_function.2', '$const70.1']
    raise $72call_function.2                 ['$72call_function.2']
label 76:
    $const78.1 = const(int, 1)               ['$const78.1']
    $80compare_op.2 = a.1 != $const78.1      ['$80compare_op.2', '$const78.1', 'a.1']
    bool82 = global(bool: <class 'bool'>)    ['bool82']
    $82pred = call bool82($80compare_op.2, func=bool82, args=(Var($80compare_op.2, numbers.py:230),), kws=(), vararg=None, target=None) ['$80compare_op.2', '$82pred', 'bool82']
    branch $82pred, 84, 106                  ['$82pred']
label 84:
    $const86.1 = const(int, -1)              ['$const86.1']
    $88compare_op.2 = a.1 != $const86.1      ['$88compare_op.2', '$const86.1', 'a.1']
    bool90 = global(bool: <class 'bool'>)    ['bool90']
    $90pred = call bool90($88compare_op.2, func=bool90, args=(Var($88compare_op.2, numbers.py:230),), kws=(), vararg=None, target=None) ['$88compare_op.2', '$90pred', 'bool90']
    branch $90pred, 92, 106                  ['$90pred']
label 92:
    $const92.0 = const(int, 0)               ['$const92.0']
    $94return_value.1 = cast(value=$const92.0) ['$94return_value.1', '$const92.0']
    return $94return_value.1                 ['$94return_value.1']
label 98:
    invert = const(bool, False)              ['invert']
    exp = b                                  ['b', 'exp']
    jump 106                                 []
label 106:
    $const108.1 = const(int, 65536)          ['$const108.1']
    $110compare_op.2 = exp > $const108.1     ['$110compare_op.2', '$const108.1', 'exp']
    bool112 = global(bool: <class 'bool'>)   ['bool112']
    $112pred = call bool112($110compare_op.2, func=bool112, args=(Var($110compare_op.2, numbers.py:235),), kws=(), vararg=None, target=None) ['$110compare_op.2', '$112pred', 'bool112']
    branch $112pred, 114, 130                ['$112pred']
label 114:
    $114load_global.0 = global(math: <module 'math' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/lib-dynload/math.cpython-39-x86_64-linux-gnu.so'>) ['$114load_global.0']
    $116load_method.1 = getattr(value=$114load_global.0, attr=pow) ['$114load_global.0', '$116load_method.1']
    $120load_global.3 = global(float: <class 'float'>) ['$120load_global.3']
    $124call_function.5 = call $120load_global.3(b, func=$120load_global.3, args=[Var(b, numbers.py:217)], kws=(), vararg=None, target=None) ['$120load_global.3', '$124call_function.5', 'b']
    $126call_method.6 = call $116load_method.1(a.1, $124call_function.5, func=$116load_method.1, args=[Var(a.1, numbers.py:218), Var($124call_function.5, numbers.py:237)], kws=(), vararg=None, target=None) ['$116load_method.1', '$124call_function.5', '$126call_method.6', 'a.1']
    $128return_value.7 = cast(value=$126call_method.6) ['$126call_method.6', '$128return_value.7']
    return $128return_value.7                ['$128return_value.7']
label 130:
    $const132.1 = const(int, 0)              ['$const132.1']
    $134compare_op.2 = exp != $const132.1    ['$134compare_op.2', '$const132.1', 'exp']
    bool136 = global(bool: <class 'bool'>)   ['bool136']
    $136pred = call bool136($134compare_op.2, func=bool136, args=(Var($134compare_op.2, numbers.py:238),), kws=(), vararg=None, target=None) ['$134compare_op.2', '$136pred', 'bool136']
    branch $136pred, 138, 172                ['$136pred']
label 138:
    $const140.1 = const(int, 1)              ['$const140.1']
    $142binary_and.2 = exp & $const140.1     ['$142binary_and.2', '$const140.1', 'exp']
    bool144 = global(bool: <class 'bool'>)   ['bool144']
    $144pred = call bool144($142binary_and.2, func=bool144, args=(Var($142binary_and.2, numbers.py:239),), kws=(), vararg=None, target=None) ['$142binary_and.2', '$144pred', 'bool144']
    branch $144pred, 146, 154                ['$144pred']
label 146:
    $150inplace_multiply.2 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=r, rhs=a.1, static_lhs=Undefined, static_rhs=Undefined) ['$150inplace_multiply.2', 'a.1', 'r']
    r = $150inplace_multiply.2               ['$150inplace_multiply.2', 'r']
    jump 154                                 []
label 154:
    $const156.1 = const(int, 1)              ['$const156.1']
    $158inplace_rshift.2 = inplace_binop(fn=<built-in function irshift>, immutable_fn=<built-in function rshift>, lhs=exp, rhs=$const156.1, static_lhs=Undefined, static_rhs=Undefined) ['$158inplace_rshift.2', '$const156.1', 'exp']
    exp = $158inplace_rshift.2               ['$158inplace_rshift.2', 'exp']
    $166inplace_multiply.5 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=a.1, rhs=a.1, static_lhs=Undefined, static_rhs=Undefined) ['$166inplace_multiply.5', 'a.1', 'a.1']
    a.1 = $166inplace_multiply.5             ['$166inplace_multiply.5', 'a.1']
    jump 130                                 []
label 172:
    bool174 = global(bool: <class 'bool'>)   ['bool174']
    $174pred = call bool174(invert, func=bool174, args=(Var(invert, numbers.py:220),), kws=(), vararg=None, target=None) ['$174pred', 'bool174', 'invert']
    branch $174pred, 176, 184                ['$174pred']
label 176:
    $const176.0 = const(float, 1.0)          ['$const176.0']
    $180binary_true_divide.2 = $const176.0 / r ['$180binary_true_divide.2', '$const176.0', 'r']
    $182return_value.3 = cast(value=$180binary_true_divide.2) ['$180binary_true_divide.2', '$182return_value.3']
    return $182return_value.3                ['$182return_value.3']
label 184:
    $186return_value.1 = cast(value=r)       ['$186return_value.1', 'r']
    return $186return_value.1                ['$186return_value.1']

DEBUG 2022-02-14 16:38:14,295 ==== SSA block analysis pass on 0
DEBUG 2022-02-14 16:38:14,295 Running <numba.core.ssa._GatherDefsHandler object at 0x7fa045dcff40>
DEBUG 2022-02-14 16:38:14,295 on stmt: a = arg(0, name=a)
DEBUG 2022-02-14 16:38:14,295 on stmt: b = arg(1, name=b)
DEBUG 2022-02-14 16:38:14,295 on stmt: $2load_deref.0 = freevar(tp: float64)
DEBUG 2022-02-14 16:38:14,295 on stmt: $const4.1 = const(int, 1)
DEBUG 2022-02-14 16:38:14,295 on stmt: r = call $2load_deref.0($const4.1, func=$2load_deref.0, args=[Var($const4.1, numbers.py:217)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:14,295 on stmt: $10load_deref.3 = freevar(tp: float64)
DEBUG 2022-02-14 16:38:14,295 on stmt: a.1 = call $10load_deref.3(a, func=$10load_deref.3, args=[Var(a, numbers.py:217)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:14,295 on stmt: $const20.7 = const(int, 0)
DEBUG 2022-02-14 16:38:14,296 on stmt: $22compare_op.8 = b < $const20.7
DEBUG 2022-02-14 16:38:14,296 on stmt: bool24 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:38:14,296 on stmt: $24pred = call bool24($22compare_op.8, func=bool24, args=(Var($22compare_op.8, numbers.py:219),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:14,296 on stmt: branch $24pred, 26, 98
DEBUG 2022-02-14 16:38:14,296 ==== SSA block analysis pass on 26
DEBUG 2022-02-14 16:38:14,296 Running <numba.core.ssa._GatherDefsHandler object at 0x7fa045dcff40>
DEBUG 2022-02-14 16:38:14,296 on stmt: invert = const(bool, True)
DEBUG 2022-02-14 16:38:14,296 on stmt: exp = unary(fn=<built-in function neg>, value=b)
DEBUG 2022-02-14 16:38:14,296 on stmt: $const38.4 = const(int, 0)
DEBUG 2022-02-14 16:38:14,296 on stmt: $40compare_op.5 = exp < $const38.4
DEBUG 2022-02-14 16:38:14,296 on stmt: bool42 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:38:14,296 on stmt: $42pred = call bool42($40compare_op.5, func=bool42, args=(Var($40compare_op.5, numbers.py:222),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:14,296 on stmt: branch $42pred, 44, 48
DEBUG 2022-02-14 16:38:14,296 ==== SSA block analysis pass on 44
DEBUG 2022-02-14 16:38:14,296 Running <numba.core.ssa._GatherDefsHandler object at 0x7fa045dcff40>
DEBUG 2022-02-14 16:38:14,296 on stmt: $44load_global.0 = global(OverflowError: <class 'OverflowError'>)
DEBUG 2022-02-14 16:38:14,296 on stmt: <static> raise <class 'OverflowError'>
DEBUG 2022-02-14 16:38:14,296 ==== SSA block analysis pass on 48
DEBUG 2022-02-14 16:38:14,296 Running <numba.core.ssa._GatherDefsHandler object at 0x7fa045dcff40>
DEBUG 2022-02-14 16:38:14,296 on stmt: $48load_deref.0 = freevar(is_integer: False)
DEBUG 2022-02-14 16:38:14,296 on stmt: bool50 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:38:14,296 on stmt: $50pred = call bool50($48load_deref.0, func=bool50, args=(Var($48load_deref.0, numbers.py:224),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:14,296 on stmt: jump 106
DEBUG 2022-02-14 16:38:14,296 ==== SSA block analysis pass on 98
DEBUG 2022-02-14 16:38:14,296 Running <numba.core.ssa._GatherDefsHandler object at 0x7fa045dcff40>
DEBUG 2022-02-14 16:38:14,297 on stmt: invert = const(bool, False)
DEBUG 2022-02-14 16:38:14,297 on stmt: exp = b
DEBUG 2022-02-14 16:38:14,297 on stmt: jump 106
DEBUG 2022-02-14 16:38:14,297 ==== SSA block analysis pass on 106
DEBUG 2022-02-14 16:38:14,297 Running <numba.core.ssa._GatherDefsHandler object at 0x7fa045dcff40>
DEBUG 2022-02-14 16:38:14,297 on stmt: $const108.1 = const(int, 65536)
DEBUG 2022-02-14 16:38:14,297 on stmt: $110compare_op.2 = exp > $const108.1
DEBUG 2022-02-14 16:38:14,297 on stmt: bool112 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:38:14,297 on stmt: $112pred = call bool112($110compare_op.2, func=bool112, args=(Var($110compare_op.2, numbers.py:235),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:14,297 on stmt: branch $112pred, 114, 130
DEBUG 2022-02-14 16:38:14,297 ==== SSA block analysis pass on 114
DEBUG 2022-02-14 16:38:14,297 Running <numba.core.ssa._GatherDefsHandler object at 0x7fa045dcff40>
DEBUG 2022-02-14 16:38:14,297 on stmt: $114load_global.0 = global(math: <module 'math' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/lib-dynload/math.cpython-39-x86_64-linux-gnu.so'>)
DEBUG 2022-02-14 16:38:14,297 on stmt: $116load_method.1 = getattr(value=$114load_global.0, attr=pow)
DEBUG 2022-02-14 16:38:14,297 on stmt: $120load_global.3 = global(float: <class 'float'>)
DEBUG 2022-02-14 16:38:14,297 on stmt: $124call_function.5 = call $120load_global.3(b, func=$120load_global.3, args=[Var(b, numbers.py:217)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:14,297 on stmt: $126call_method.6 = call $116load_method.1(a.1, $124call_function.5, func=$116load_method.1, args=[Var(a.1, numbers.py:218), Var($124call_function.5, numbers.py:237)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:14,297 on stmt: $128return_value.7 = cast(value=$126call_method.6)
DEBUG 2022-02-14 16:38:14,297 on stmt: return $128return_value.7
DEBUG 2022-02-14 16:38:14,297 ==== SSA block analysis pass on 130
DEBUG 2022-02-14 16:38:14,297 Running <numba.core.ssa._GatherDefsHandler object at 0x7fa045dcff40>
DEBUG 2022-02-14 16:38:14,297 on stmt: $const132.1 = const(int, 0)
DEBUG 2022-02-14 16:38:14,297 on stmt: $134compare_op.2 = exp != $const132.1
DEBUG 2022-02-14 16:38:14,297 on stmt: bool136 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:38:14,298 on stmt: $136pred = call bool136($134compare_op.2, func=bool136, args=(Var($134compare_op.2, numbers.py:238),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:14,298 on stmt: branch $136pred, 138, 172
DEBUG 2022-02-14 16:38:14,298 ==== SSA block analysis pass on 138
DEBUG 2022-02-14 16:38:14,298 Running <numba.core.ssa._GatherDefsHandler object at 0x7fa045dcff40>
DEBUG 2022-02-14 16:38:14,298 on stmt: $const140.1 = const(int, 1)
DEBUG 2022-02-14 16:38:14,298 on stmt: $142binary_and.2 = exp & $const140.1
DEBUG 2022-02-14 16:38:14,298 on stmt: bool144 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:38:14,298 on stmt: $144pred = call bool144($142binary_and.2, func=bool144, args=(Var($142binary_and.2, numbers.py:239),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:14,298 on stmt: branch $144pred, 146, 154
DEBUG 2022-02-14 16:38:14,298 ==== SSA block analysis pass on 146
DEBUG 2022-02-14 16:38:14,298 Running <numba.core.ssa._GatherDefsHandler object at 0x7fa045dcff40>
DEBUG 2022-02-14 16:38:14,298 on stmt: $150inplace_multiply.2 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=r, rhs=a.1, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:38:14,298 on stmt: r = $150inplace_multiply.2
DEBUG 2022-02-14 16:38:14,298 on stmt: jump 154
DEBUG 2022-02-14 16:38:14,298 ==== SSA block analysis pass on 154
DEBUG 2022-02-14 16:38:14,298 Running <numba.core.ssa._GatherDefsHandler object at 0x7fa045dcff40>
DEBUG 2022-02-14 16:38:14,298 on stmt: $const156.1 = const(int, 1)
DEBUG 2022-02-14 16:38:14,298 on stmt: $158inplace_rshift.2 = inplace_binop(fn=<built-in function irshift>, immutable_fn=<built-in function rshift>, lhs=exp, rhs=$const156.1, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:38:14,298 on stmt: exp = $158inplace_rshift.2
DEBUG 2022-02-14 16:38:14,298 on stmt: $166inplace_multiply.5 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=a.1, rhs=a.1, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:38:14,298 on stmt: a.1 = $166inplace_multiply.5
DEBUG 2022-02-14 16:38:14,298 on stmt: jump 130
DEBUG 2022-02-14 16:38:14,298 ==== SSA block analysis pass on 172
DEBUG 2022-02-14 16:38:14,298 Running <numba.core.ssa._GatherDefsHandler object at 0x7fa045dcff40>
DEBUG 2022-02-14 16:38:14,298 on stmt: bool174 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:38:14,298 on stmt: $174pred = call bool174(invert, func=bool174, args=(Var(invert, numbers.py:220),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:14,299 on stmt: branch $174pred, 176, 184
DEBUG 2022-02-14 16:38:14,299 ==== SSA block analysis pass on 176
DEBUG 2022-02-14 16:38:14,299 Running <numba.core.ssa._GatherDefsHandler object at 0x7fa045dcff40>
DEBUG 2022-02-14 16:38:14,299 on stmt: $const176.0 = const(float, 1.0)
DEBUG 2022-02-14 16:38:14,299 on stmt: $180binary_true_divide.2 = $const176.0 / r
DEBUG 2022-02-14 16:38:14,299 on stmt: $182return_value.3 = cast(value=$180binary_true_divide.2)
DEBUG 2022-02-14 16:38:14,299 on stmt: return $182return_value.3
DEBUG 2022-02-14 16:38:14,299 ==== SSA block analysis pass on 184
DEBUG 2022-02-14 16:38:14,299 Running <numba.core.ssa._GatherDefsHandler object at 0x7fa045dcff40>
DEBUG 2022-02-14 16:38:14,299 on stmt: $186return_value.1 = cast(value=r)
DEBUG 2022-02-14 16:38:14,299 on stmt: return $186return_value.1
DEBUG 2022-02-14 16:38:14,300 defs defaultdict(<class 'list'>,
            {'$10load_deref.3': [<numba.core.ir.Assign object at 0x7fa046e163a0>],
             '$110compare_op.2': [<numba.core.ir.Assign object at 0x7fa045e47ee0>],
             '$112pred': [<numba.core.ir.Assign object at 0x7fa045dc9190>],
             '$114load_global.0': [<numba.core.ir.Assign object at 0x7fa045dc93d0>],
             '$116load_method.1': [<numba.core.ir.Assign object at 0x7fa045dc9550>],
             '$120load_global.3': [<numba.core.ir.Assign object at 0x7fa045dc97f0>],
             '$124call_function.5': [<numba.core.ir.Assign object at 0x7fa045dc9af0>],
             '$126call_method.6': [<numba.core.ir.Assign object at 0x7fa045dc9ca0>],
             '$128return_value.7': [<numba.core.ir.Assign object at 0x7fa045dc9d90>],
             '$134compare_op.2': [<numba.core.ir.Assign object at 0x7fa045dcb280>],
             '$136pred': [<numba.core.ir.Assign object at 0x7fa045dcb4f0>],
             '$142binary_and.2': [<numba.core.ir.Assign object at 0x7fa045dcba00>],
             '$144pred': [<numba.core.ir.Assign object at 0x7fa045dcbc70>],
             '$150inplace_multiply.2': [<numba.core.ir.Assign object at 0x7fa045dcd160>],
             '$158inplace_rshift.2': [<numba.core.ir.Assign object at 0x7fa045dcd6a0>],
             '$166inplace_multiply.5': [<numba.core.ir.Assign object at 0x7fa045dcdb20>],
             '$174pred': [<numba.core.ir.Assign object at 0x7fa045dcdfd0>],
             '$180binary_true_divide.2': [<numba.core.ir.Assign object at 0x7fa045dcf520>],
             '$182return_value.3': [<numba.core.ir.Assign object at 0x7fa045dcf670>],
             '$186return_value.1': [<numba.core.ir.Assign object at 0x7fa045dcf9d0>],
             '$22compare_op.8': [<numba.core.ir.Assign object at 0x7fa046e115e0>],
             '$24pred': [<numba.core.ir.Assign object at 0x7fa046e110d0>],
             '$2load_deref.0': [<numba.core.ir.Assign object at 0x7fa046e074c0>],
             '$40compare_op.5': [<numba.core.ir.Assign object at 0x7fa046181250>],
             '$42pred': [<numba.core.ir.Assign object at 0x7fa046f4d610>],
             '$44load_global.0': [<numba.core.ir.Assign object at 0x7fa046f4d580>],
             '$48load_deref.0': [<numba.core.ir.Assign object at 0x7fa046f4dd90>],
             '$50pred': [<numba.core.ir.Assign object at 0x7fa046d56cd0>],
             '$const108.1': [<numba.core.ir.Assign object at 0x7fa045e47d30>],
             '$const132.1': [<numba.core.ir.Assign object at 0x7fa045dcb0d0>],
             '$const140.1': [<numba.core.ir.Assign object at 0x7fa045dcb850>],
             '$const156.1': [<numba.core.ir.Assign object at 0x7fa045dcd4f0>],
             '$const176.0': [<numba.core.ir.Assign object at 0x7fa045dcf250>],
             '$const20.7': [<numba.core.ir.Assign object at 0x7fa046e118b0>],
             '$const38.4': [<numba.core.ir.Assign object at 0x7fa046df4d30>],
             '$const4.1': [<numba.core.ir.Assign object at 0x7fa046e07160>],
             'a': [<numba.core.ir.Assign object at 0x7fa046f64400>],
             'a.1': [<numba.core.ir.Assign object at 0x7fa046e168b0>,
                     <numba.core.ir.Assign object at 0x7fa045dcdbe0>],
             'b': [<numba.core.ir.Assign object at 0x7fa046e07cd0>],
             'bool112': [<numba.core.ir.Assign object at 0x7fa045dc9070>],
             'bool136': [<numba.core.ir.Assign object at 0x7fa045dcb3d0>],
             'bool144': [<numba.core.ir.Assign object at 0x7fa045dcbb50>],
             'bool174': [<numba.core.ir.Assign object at 0x7fa045dcdeb0>],
             'bool24': [<numba.core.ir.Assign object at 0x7fa046e11430>],
             'bool42': [<numba.core.ir.Assign object at 0x7fa046f4da00>],
             'bool50': [<numba.core.ir.Assign object at 0x7fa046d56d30>],
             'exp': [<numba.core.ir.Assign object at 0x7fa046df4460>,
                     <numba.core.ir.Assign object at 0x7fa045e47ac0>,
                     <numba.core.ir.Assign object at 0x7fa045dcd760>],
             'invert': [<numba.core.ir.Assign object at 0x7fa046e11220>,
                        <numba.core.ir.Assign object at 0x7fa045e477f0>],
             'r': [<numba.core.ir.Assign object at 0x7fa046e070a0>,
                   <numba.core.ir.Assign object at 0x7fa045dcd220>]})
DEBUG 2022-02-14 16:38:14,300 SSA violators {'a.1', 'exp', 'invert', 'r'}
DEBUG 2022-02-14 16:38:14,300 Fix SSA violator on var a.1
DEBUG 2022-02-14 16:38:14,300 ==== SSA block rewrite pass on 0
DEBUG 2022-02-14 16:38:14,300 Running <numba.core.ssa._FreshVarHandler object at 0x7fa045dcfd00>
DEBUG 2022-02-14 16:38:14,300 on stmt: a = arg(0, name=a)
DEBUG 2022-02-14 16:38:14,300 on stmt: b = arg(1, name=b)
DEBUG 2022-02-14 16:38:14,300 on stmt: $2load_deref.0 = freevar(tp: float64)
DEBUG 2022-02-14 16:38:14,300 on stmt: $const4.1 = const(int, 1)
DEBUG 2022-02-14 16:38:14,300 on stmt: r = call $2load_deref.0($const4.1, func=$2load_deref.0, args=[Var($const4.1, numbers.py:217)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:14,300 on stmt: $10load_deref.3 = freevar(tp: float64)
DEBUG 2022-02-14 16:38:14,300 on stmt: a.1 = call $10load_deref.3(a, func=$10load_deref.3, args=[Var(a, numbers.py:217)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:14,300 first assign: a.1
DEBUG 2022-02-14 16:38:14,300 replaced with: a.1 = call $10load_deref.3(a, func=$10load_deref.3, args=[Var(a, numbers.py:217)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:14,300 on stmt: $const20.7 = const(int, 0)
DEBUG 2022-02-14 16:38:14,300 on stmt: $22compare_op.8 = b < $const20.7
DEBUG 2022-02-14 16:38:14,301 on stmt: bool24 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:38:14,301 on stmt: $24pred = call bool24($22compare_op.8, func=bool24, args=(Var($22compare_op.8, numbers.py:219),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:14,301 on stmt: branch $24pred, 26, 98
DEBUG 2022-02-14 16:38:14,301 ==== SSA block rewrite pass on 26
DEBUG 2022-02-14 16:38:14,301 Running <numba.core.ssa._FreshVarHandler object at 0x7fa045dcfd00>
DEBUG 2022-02-14 16:38:14,301 on stmt: invert = const(bool, True)
DEBUG 2022-02-14 16:38:14,301 on stmt: exp = unary(fn=<built-in function neg>, value=b)
DEBUG 2022-02-14 16:38:14,301 on stmt: $const38.4 = const(int, 0)
DEBUG 2022-02-14 16:38:14,301 on stmt: $40compare_op.5 = exp < $const38.4
DEBUG 2022-02-14 16:38:14,301 on stmt: bool42 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:38:14,301 on stmt: $42pred = call bool42($40compare_op.5, func=bool42, args=(Var($40compare_op.5, numbers.py:222),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:14,301 on stmt: branch $42pred, 44, 48
DEBUG 2022-02-14 16:38:14,301 ==== SSA block rewrite pass on 44
DEBUG 2022-02-14 16:38:14,301 Running <numba.core.ssa._FreshVarHandler object at 0x7fa045dcfd00>
DEBUG 2022-02-14 16:38:14,301 on stmt: $44load_global.0 = global(OverflowError: <class 'OverflowError'>)
DEBUG 2022-02-14 16:38:14,301 on stmt: <static> raise <class 'OverflowError'>
DEBUG 2022-02-14 16:38:14,301 ==== SSA block rewrite pass on 48
DEBUG 2022-02-14 16:38:14,301 Running <numba.core.ssa._FreshVarHandler object at 0x7fa045dcfd00>
DEBUG 2022-02-14 16:38:14,301 on stmt: $48load_deref.0 = freevar(is_integer: False)
DEBUG 2022-02-14 16:38:14,301 on stmt: bool50 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:38:14,301 on stmt: $50pred = call bool50($48load_deref.0, func=bool50, args=(Var($48load_deref.0, numbers.py:224),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:14,301 on stmt: jump 106
DEBUG 2022-02-14 16:38:14,302 ==== SSA block rewrite pass on 98
DEBUG 2022-02-14 16:38:14,302 Running <numba.core.ssa._FreshVarHandler object at 0x7fa045dcfd00>
DEBUG 2022-02-14 16:38:14,302 on stmt: invert = const(bool, False)
DEBUG 2022-02-14 16:38:14,302 on stmt: exp = b
DEBUG 2022-02-14 16:38:14,302 on stmt: jump 106
DEBUG 2022-02-14 16:38:14,302 ==== SSA block rewrite pass on 106
DEBUG 2022-02-14 16:38:14,302 Running <numba.core.ssa._FreshVarHandler object at 0x7fa045dcfd00>
DEBUG 2022-02-14 16:38:14,302 on stmt: $const108.1 = const(int, 65536)
DEBUG 2022-02-14 16:38:14,302 on stmt: $110compare_op.2 = exp > $const108.1
DEBUG 2022-02-14 16:38:14,302 on stmt: bool112 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:38:14,302 on stmt: $112pred = call bool112($110compare_op.2, func=bool112, args=(Var($110compare_op.2, numbers.py:235),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:14,302 on stmt: branch $112pred, 114, 130
DEBUG 2022-02-14 16:38:14,302 ==== SSA block rewrite pass on 114
DEBUG 2022-02-14 16:38:14,302 Running <numba.core.ssa._FreshVarHandler object at 0x7fa045dcfd00>
DEBUG 2022-02-14 16:38:14,302 on stmt: $114load_global.0 = global(math: <module 'math' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/lib-dynload/math.cpython-39-x86_64-linux-gnu.so'>)
DEBUG 2022-02-14 16:38:14,302 on stmt: $116load_method.1 = getattr(value=$114load_global.0, attr=pow)
DEBUG 2022-02-14 16:38:14,302 on stmt: $120load_global.3 = global(float: <class 'float'>)
DEBUG 2022-02-14 16:38:14,302 on stmt: $124call_function.5 = call $120load_global.3(b, func=$120load_global.3, args=[Var(b, numbers.py:217)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:14,302 on stmt: $126call_method.6 = call $116load_method.1(a.1, $124call_function.5, func=$116load_method.1, args=[Var(a.1, numbers.py:218), Var($124call_function.5, numbers.py:237)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:14,302 on stmt: $128return_value.7 = cast(value=$126call_method.6)
DEBUG 2022-02-14 16:38:14,302 on stmt: return $128return_value.7
DEBUG 2022-02-14 16:38:14,302 ==== SSA block rewrite pass on 130
DEBUG 2022-02-14 16:38:14,302 Running <numba.core.ssa._FreshVarHandler object at 0x7fa045dcfd00>
DEBUG 2022-02-14 16:38:14,303 on stmt: $const132.1 = const(int, 0)
DEBUG 2022-02-14 16:38:14,303 on stmt: $134compare_op.2 = exp != $const132.1
DEBUG 2022-02-14 16:38:14,303 on stmt: bool136 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:38:14,303 on stmt: $136pred = call bool136($134compare_op.2, func=bool136, args=(Var($134compare_op.2, numbers.py:238),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:14,303 on stmt: branch $136pred, 138, 172
DEBUG 2022-02-14 16:38:14,303 ==== SSA block rewrite pass on 138
DEBUG 2022-02-14 16:38:14,303 Running <numba.core.ssa._FreshVarHandler object at 0x7fa045dcfd00>
DEBUG 2022-02-14 16:38:14,303 on stmt: $const140.1 = const(int, 1)
DEBUG 2022-02-14 16:38:14,303 on stmt: $142binary_and.2 = exp & $const140.1
DEBUG 2022-02-14 16:38:14,303 on stmt: bool144 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:38:14,303 on stmt: $144pred = call bool144($142binary_and.2, func=bool144, args=(Var($142binary_and.2, numbers.py:239),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:14,303 on stmt: branch $144pred, 146, 154
DEBUG 2022-02-14 16:38:14,303 ==== SSA block rewrite pass on 146
DEBUG 2022-02-14 16:38:14,303 Running <numba.core.ssa._FreshVarHandler object at 0x7fa045dcfd00>
DEBUG 2022-02-14 16:38:14,303 on stmt: $150inplace_multiply.2 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=r, rhs=a.1, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:38:14,303 on stmt: r = $150inplace_multiply.2
DEBUG 2022-02-14 16:38:14,303 on stmt: jump 154
DEBUG 2022-02-14 16:38:14,303 ==== SSA block rewrite pass on 154
DEBUG 2022-02-14 16:38:14,303 Running <numba.core.ssa._FreshVarHandler object at 0x7fa045dcfd00>
DEBUG 2022-02-14 16:38:14,303 on stmt: $const156.1 = const(int, 1)
DEBUG 2022-02-14 16:38:14,303 on stmt: $158inplace_rshift.2 = inplace_binop(fn=<built-in function irshift>, immutable_fn=<built-in function rshift>, lhs=exp, rhs=$const156.1, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:38:14,303 on stmt: exp = $158inplace_rshift.2
DEBUG 2022-02-14 16:38:14,303 on stmt: $166inplace_multiply.5 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=a.1, rhs=a.1, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:38:14,303 on stmt: a.1 = $166inplace_multiply.5
DEBUG 2022-02-14 16:38:14,303 replaced with: a.1.1 = $166inplace_multiply.5
DEBUG 2022-02-14 16:38:14,304 on stmt: jump 130
DEBUG 2022-02-14 16:38:14,304 ==== SSA block rewrite pass on 172
DEBUG 2022-02-14 16:38:14,304 Running <numba.core.ssa._FreshVarHandler object at 0x7fa045dcfd00>
DEBUG 2022-02-14 16:38:14,304 on stmt: bool174 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:38:14,304 on stmt: $174pred = call bool174(invert, func=bool174, args=(Var(invert, numbers.py:220),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:14,304 on stmt: branch $174pred, 176, 184
DEBUG 2022-02-14 16:38:14,304 ==== SSA block rewrite pass on 176
DEBUG 2022-02-14 16:38:14,304 Running <numba.core.ssa._FreshVarHandler object at 0x7fa045dcfd00>
DEBUG 2022-02-14 16:38:14,304 on stmt: $const176.0 = const(float, 1.0)
DEBUG 2022-02-14 16:38:14,304 on stmt: $180binary_true_divide.2 = $const176.0 / r
DEBUG 2022-02-14 16:38:14,304 on stmt: $182return_value.3 = cast(value=$180binary_true_divide.2)
DEBUG 2022-02-14 16:38:14,304 on stmt: return $182return_value.3
DEBUG 2022-02-14 16:38:14,304 ==== SSA block rewrite pass on 184
DEBUG 2022-02-14 16:38:14,304 Running <numba.core.ssa._FreshVarHandler object at 0x7fa045dcfd00>
DEBUG 2022-02-14 16:38:14,304 on stmt: $186return_value.1 = cast(value=r)
DEBUG 2022-02-14 16:38:14,304 on stmt: return $186return_value.1
DEBUG 2022-02-14 16:38:14,304 Replaced assignments: defaultdict(<class 'list'>,
            {0: [<numba.core.ir.Assign object at 0x7fa046196d30>],
             154: [<numba.core.ir.Assign object at 0x7fa046f64490>]})
DEBUG 2022-02-14 16:38:14,304 ==== SSA block rewrite pass on 0
DEBUG 2022-02-14 16:38:14,304 Running <numba.core.ssa._FixSSAVars object at 0x7fa045dcfd00>
DEBUG 2022-02-14 16:38:14,304 on stmt: a = arg(0, name=a)
DEBUG 2022-02-14 16:38:14,304 on stmt: b = arg(1, name=b)
DEBUG 2022-02-14 16:38:14,304 on stmt: $2load_deref.0 = freevar(tp: float64)
DEBUG 2022-02-14 16:38:14,304 on stmt: $const4.1 = const(int, 1)
DEBUG 2022-02-14 16:38:14,305 on stmt: r = call $2load_deref.0($const4.1, func=$2load_deref.0, args=[Var($const4.1, numbers.py:217)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:14,305 on stmt: $10load_deref.3 = freevar(tp: float64)
DEBUG 2022-02-14 16:38:14,305 on stmt: a.1 = call $10load_deref.3(a, func=$10load_deref.3, args=[Var(a, numbers.py:217)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:14,305 on stmt: $const20.7 = const(int, 0)
DEBUG 2022-02-14 16:38:14,305 on stmt: $22compare_op.8 = b < $const20.7
DEBUG 2022-02-14 16:38:14,305 on stmt: bool24 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:38:14,305 on stmt: $24pred = call bool24($22compare_op.8, func=bool24, args=(Var($22compare_op.8, numbers.py:219),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:14,305 on stmt: branch $24pred, 26, 98
DEBUG 2022-02-14 16:38:14,305 ==== SSA block rewrite pass on 26
DEBUG 2022-02-14 16:38:14,305 Running <numba.core.ssa._FixSSAVars object at 0x7fa045dcfd00>
DEBUG 2022-02-14 16:38:14,305 on stmt: invert = const(bool, True)
DEBUG 2022-02-14 16:38:14,305 on stmt: exp = unary(fn=<built-in function neg>, value=b)
DEBUG 2022-02-14 16:38:14,305 on stmt: $const38.4 = const(int, 0)
DEBUG 2022-02-14 16:38:14,305 on stmt: $40compare_op.5 = exp < $const38.4
DEBUG 2022-02-14 16:38:14,305 on stmt: bool42 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:38:14,305 on stmt: $42pred = call bool42($40compare_op.5, func=bool42, args=(Var($40compare_op.5, numbers.py:222),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:14,305 on stmt: branch $42pred, 44, 48
DEBUG 2022-02-14 16:38:14,305 ==== SSA block rewrite pass on 44
DEBUG 2022-02-14 16:38:14,305 Running <numba.core.ssa._FixSSAVars object at 0x7fa045dcfd00>
DEBUG 2022-02-14 16:38:14,305 on stmt: $44load_global.0 = global(OverflowError: <class 'OverflowError'>)
DEBUG 2022-02-14 16:38:14,305 on stmt: <static> raise <class 'OverflowError'>
DEBUG 2022-02-14 16:38:14,306 ==== SSA block rewrite pass on 48
DEBUG 2022-02-14 16:38:14,306 Running <numba.core.ssa._FixSSAVars object at 0x7fa045dcfd00>
DEBUG 2022-02-14 16:38:14,306 on stmt: $48load_deref.0 = freevar(is_integer: False)
DEBUG 2022-02-14 16:38:14,306 on stmt: bool50 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:38:14,306 on stmt: $50pred = call bool50($48load_deref.0, func=bool50, args=(Var($48load_deref.0, numbers.py:224),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:14,306 on stmt: jump 106
DEBUG 2022-02-14 16:38:14,306 ==== SSA block rewrite pass on 98
DEBUG 2022-02-14 16:38:14,306 Running <numba.core.ssa._FixSSAVars object at 0x7fa045dcfd00>
DEBUG 2022-02-14 16:38:14,306 on stmt: invert = const(bool, False)
DEBUG 2022-02-14 16:38:14,306 on stmt: exp = b
DEBUG 2022-02-14 16:38:14,306 on stmt: jump 106
DEBUG 2022-02-14 16:38:14,306 ==== SSA block rewrite pass on 106
DEBUG 2022-02-14 16:38:14,306 Running <numba.core.ssa._FixSSAVars object at 0x7fa045dcfd00>
DEBUG 2022-02-14 16:38:14,306 on stmt: $const108.1 = const(int, 65536)
DEBUG 2022-02-14 16:38:14,306 on stmt: $110compare_op.2 = exp > $const108.1
DEBUG 2022-02-14 16:38:14,306 on stmt: bool112 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:38:14,306 on stmt: $112pred = call bool112($110compare_op.2, func=bool112, args=(Var($110compare_op.2, numbers.py:235),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:14,306 on stmt: branch $112pred, 114, 130
DEBUG 2022-02-14 16:38:14,306 ==== SSA block rewrite pass on 114
DEBUG 2022-02-14 16:38:14,306 Running <numba.core.ssa._FixSSAVars object at 0x7fa045dcfd00>
DEBUG 2022-02-14 16:38:14,306 on stmt: $114load_global.0 = global(math: <module 'math' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/lib-dynload/math.cpython-39-x86_64-linux-gnu.so'>)
DEBUG 2022-02-14 16:38:14,306 on stmt: $116load_method.1 = getattr(value=$114load_global.0, attr=pow)
DEBUG 2022-02-14 16:38:14,306 on stmt: $120load_global.3 = global(float: <class 'float'>)
DEBUG 2022-02-14 16:38:14,307 on stmt: $124call_function.5 = call $120load_global.3(b, func=$120load_global.3, args=[Var(b, numbers.py:217)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:14,307 on stmt: $126call_method.6 = call $116load_method.1(a.1, $124call_function.5, func=$116load_method.1, args=[Var(a.1, numbers.py:218), Var($124call_function.5, numbers.py:237)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:14,307 find_def var='a.1' stmt=$126call_method.6 = call $116load_method.1(a.1, $124call_function.5, func=$116load_method.1, args=[Var(a.1, numbers.py:218), Var($124call_function.5, numbers.py:237)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:14,307 find_def_from_top label 114
DEBUG 2022-02-14 16:38:14,307 idom 106 from label 114
DEBUG 2022-02-14 16:38:14,307 find_def_from_bottom label 106
DEBUG 2022-02-14 16:38:14,307 find_def_from_top label 106
DEBUG 2022-02-14 16:38:14,307 idom 0 from label 106
DEBUG 2022-02-14 16:38:14,307 find_def_from_bottom label 0
DEBUG 2022-02-14 16:38:14,307 on stmt: $128return_value.7 = cast(value=$126call_method.6)
DEBUG 2022-02-14 16:38:14,307 on stmt: return $128return_value.7
DEBUG 2022-02-14 16:38:14,307 ==== SSA block rewrite pass on 130
DEBUG 2022-02-14 16:38:14,307 Running <numba.core.ssa._FixSSAVars object at 0x7fa045dcfd00>
DEBUG 2022-02-14 16:38:14,307 on stmt: $const132.1 = const(int, 0)
DEBUG 2022-02-14 16:38:14,307 on stmt: $134compare_op.2 = exp != $const132.1
DEBUG 2022-02-14 16:38:14,307 on stmt: bool136 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:38:14,307 on stmt: $136pred = call bool136($134compare_op.2, func=bool136, args=(Var($134compare_op.2, numbers.py:238),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:14,307 on stmt: branch $136pred, 138, 172
DEBUG 2022-02-14 16:38:14,307 ==== SSA block rewrite pass on 138
DEBUG 2022-02-14 16:38:14,307 Running <numba.core.ssa._FixSSAVars object at 0x7fa045dcfd00>
DEBUG 2022-02-14 16:38:14,307 on stmt: $const140.1 = const(int, 1)
DEBUG 2022-02-14 16:38:14,307 on stmt: $142binary_and.2 = exp & $const140.1
DEBUG 2022-02-14 16:38:14,307 on stmt: bool144 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:38:14,308 on stmt: $144pred = call bool144($142binary_and.2, func=bool144, args=(Var($142binary_and.2, numbers.py:239),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:14,308 on stmt: branch $144pred, 146, 154
DEBUG 2022-02-14 16:38:14,308 ==== SSA block rewrite pass on 146
DEBUG 2022-02-14 16:38:14,308 Running <numba.core.ssa._FixSSAVars object at 0x7fa045dcfd00>
DEBUG 2022-02-14 16:38:14,308 on stmt: $150inplace_multiply.2 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=r, rhs=a.1, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:38:14,308 find_def var='a.1' stmt=$150inplace_multiply.2 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=r, rhs=a.1, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:38:14,308 find_def_from_top label 146
DEBUG 2022-02-14 16:38:14,308 idom 138 from label 146
DEBUG 2022-02-14 16:38:14,308 find_def_from_bottom label 138
DEBUG 2022-02-14 16:38:14,308 find_def_from_top label 138
DEBUG 2022-02-14 16:38:14,308 idom 130 from label 138
DEBUG 2022-02-14 16:38:14,308 find_def_from_bottom label 130
DEBUG 2022-02-14 16:38:14,308 find_def_from_top label 130
DEBUG 2022-02-14 16:38:14,308 insert phi node a.1.2 = phi(incoming_values=[], incoming_blocks=[]) at 130
DEBUG 2022-02-14 16:38:14,308 find_def_from_bottom label 106
DEBUG 2022-02-14 16:38:14,308 find_def_from_top label 106
DEBUG 2022-02-14 16:38:14,308 idom 0 from label 106
DEBUG 2022-02-14 16:38:14,308 find_def_from_bottom label 0
DEBUG 2022-02-14 16:38:14,308 incoming_def a.1 = call $10load_deref.3(a, func=$10load_deref.3, args=[Var(a, numbers.py:217)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:14,308 find_def_from_bottom label 154
DEBUG 2022-02-14 16:38:14,308 incoming_def a.1.1 = $166inplace_multiply.5
DEBUG 2022-02-14 16:38:14,308 replaced with: $150inplace_multiply.2 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=r, rhs=a.1.2, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:38:14,308 on stmt: r = $150inplace_multiply.2
DEBUG 2022-02-14 16:38:14,308 on stmt: jump 154
DEBUG 2022-02-14 16:38:14,309 ==== SSA block rewrite pass on 154
DEBUG 2022-02-14 16:38:14,309 Running <numba.core.ssa._FixSSAVars object at 0x7fa045dcfd00>
DEBUG 2022-02-14 16:38:14,309 on stmt: $const156.1 = const(int, 1)
DEBUG 2022-02-14 16:38:14,309 on stmt: $158inplace_rshift.2 = inplace_binop(fn=<built-in function irshift>, immutable_fn=<built-in function rshift>, lhs=exp, rhs=$const156.1, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:38:14,309 on stmt: exp = $158inplace_rshift.2
DEBUG 2022-02-14 16:38:14,309 on stmt: $166inplace_multiply.5 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=a.1, rhs=a.1, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:38:14,309 find_def var='a.1' stmt=$166inplace_multiply.5 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=a.1, rhs=a.1, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:38:14,309 find_def_from_top label 154
DEBUG 2022-02-14 16:38:14,309 idom 138 from label 154
DEBUG 2022-02-14 16:38:14,309 find_def_from_bottom label 138
DEBUG 2022-02-14 16:38:14,309 find_def_from_top label 138
DEBUG 2022-02-14 16:38:14,309 idom 130 from label 138
DEBUG 2022-02-14 16:38:14,309 find_def_from_bottom label 130
DEBUG 2022-02-14 16:38:14,309 replaced with: $166inplace_multiply.5 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=a.1.2, rhs=a.1.2, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:38:14,309 on stmt: a.1.1 = $166inplace_multiply.5
DEBUG 2022-02-14 16:38:14,309 on stmt: jump 130
DEBUG 2022-02-14 16:38:14,309 ==== SSA block rewrite pass on 172
DEBUG 2022-02-14 16:38:14,309 Running <numba.core.ssa._FixSSAVars object at 0x7fa045dcfd00>
DEBUG 2022-02-14 16:38:14,309 on stmt: bool174 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:38:14,309 on stmt: $174pred = call bool174(invert, func=bool174, args=(Var(invert, numbers.py:220),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:14,309 on stmt: branch $174pred, 176, 184
DEBUG 2022-02-14 16:38:14,309 ==== SSA block rewrite pass on 176
DEBUG 2022-02-14 16:38:14,309 Running <numba.core.ssa._FixSSAVars object at 0x7fa045dcfd00>
DEBUG 2022-02-14 16:38:14,309 on stmt: $const176.0 = const(float, 1.0)
DEBUG 2022-02-14 16:38:14,309 on stmt: $180binary_true_divide.2 = $const176.0 / r
DEBUG 2022-02-14 16:38:14,310 on stmt: $182return_value.3 = cast(value=$180binary_true_divide.2)
DEBUG 2022-02-14 16:38:14,310 on stmt: return $182return_value.3
DEBUG 2022-02-14 16:38:14,310 ==== SSA block rewrite pass on 184
DEBUG 2022-02-14 16:38:14,310 Running <numba.core.ssa._FixSSAVars object at 0x7fa045dcfd00>
DEBUG 2022-02-14 16:38:14,310 on stmt: $186return_value.1 = cast(value=r)
DEBUG 2022-02-14 16:38:14,310 on stmt: return $186return_value.1
DEBUG 2022-02-14 16:38:14,310 Fix SSA violator on var exp
DEBUG 2022-02-14 16:38:14,310 ==== SSA block rewrite pass on 0
DEBUG 2022-02-14 16:38:14,310 Running <numba.core.ssa._FreshVarHandler object at 0x7fa046f64c70>
DEBUG 2022-02-14 16:38:14,310 on stmt: a = arg(0, name=a)
DEBUG 2022-02-14 16:38:14,310 on stmt: b = arg(1, name=b)
DEBUG 2022-02-14 16:38:14,310 on stmt: $2load_deref.0 = freevar(tp: float64)
DEBUG 2022-02-14 16:38:14,310 on stmt: $const4.1 = const(int, 1)
DEBUG 2022-02-14 16:38:14,310 on stmt: r = call $2load_deref.0($const4.1, func=$2load_deref.0, args=[Var($const4.1, numbers.py:217)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:14,310 on stmt: $10load_deref.3 = freevar(tp: float64)
DEBUG 2022-02-14 16:38:14,310 on stmt: a.1 = call $10load_deref.3(a, func=$10load_deref.3, args=[Var(a, numbers.py:217)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:14,310 on stmt: $const20.7 = const(int, 0)
DEBUG 2022-02-14 16:38:14,310 on stmt: $22compare_op.8 = b < $const20.7
DEBUG 2022-02-14 16:38:14,310 on stmt: bool24 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:38:14,310 on stmt: $24pred = call bool24($22compare_op.8, func=bool24, args=(Var($22compare_op.8, numbers.py:219),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:14,310 on stmt: branch $24pred, 26, 98
DEBUG 2022-02-14 16:38:14,310 ==== SSA block rewrite pass on 26
DEBUG 2022-02-14 16:38:14,310 Running <numba.core.ssa._FreshVarHandler object at 0x7fa046f64c70>
DEBUG 2022-02-14 16:38:14,311 on stmt: invert = const(bool, True)
DEBUG 2022-02-14 16:38:14,311 on stmt: exp = unary(fn=<built-in function neg>, value=b)
DEBUG 2022-02-14 16:38:14,311 first assign: exp
DEBUG 2022-02-14 16:38:14,311 replaced with: exp = unary(fn=<built-in function neg>, value=b)
DEBUG 2022-02-14 16:38:14,311 on stmt: $const38.4 = const(int, 0)
DEBUG 2022-02-14 16:38:14,311 on stmt: $40compare_op.5 = exp < $const38.4
DEBUG 2022-02-14 16:38:14,311 on stmt: bool42 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:38:14,311 on stmt: $42pred = call bool42($40compare_op.5, func=bool42, args=(Var($40compare_op.5, numbers.py:222),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:14,311 on stmt: branch $42pred, 44, 48
DEBUG 2022-02-14 16:38:14,311 ==== SSA block rewrite pass on 44
DEBUG 2022-02-14 16:38:14,311 Running <numba.core.ssa._FreshVarHandler object at 0x7fa046f64c70>
DEBUG 2022-02-14 16:38:14,311 on stmt: $44load_global.0 = global(OverflowError: <class 'OverflowError'>)
DEBUG 2022-02-14 16:38:14,311 on stmt: <static> raise <class 'OverflowError'>
DEBUG 2022-02-14 16:38:14,311 ==== SSA block rewrite pass on 48
DEBUG 2022-02-14 16:38:14,311 Running <numba.core.ssa._FreshVarHandler object at 0x7fa046f64c70>
DEBUG 2022-02-14 16:38:14,311 on stmt: $48load_deref.0 = freevar(is_integer: False)
DEBUG 2022-02-14 16:38:14,311 on stmt: bool50 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:38:14,311 on stmt: $50pred = call bool50($48load_deref.0, func=bool50, args=(Var($48load_deref.0, numbers.py:224),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:14,311 on stmt: jump 106
DEBUG 2022-02-14 16:38:14,311 ==== SSA block rewrite pass on 98
DEBUG 2022-02-14 16:38:14,311 Running <numba.core.ssa._FreshVarHandler object at 0x7fa046f64c70>
DEBUG 2022-02-14 16:38:14,311 on stmt: invert = const(bool, False)
DEBUG 2022-02-14 16:38:14,311 on stmt: exp = b
DEBUG 2022-02-14 16:38:14,311 replaced with: exp.1 = b
DEBUG 2022-02-14 16:38:14,311 on stmt: jump 106
DEBUG 2022-02-14 16:38:14,312 ==== SSA block rewrite pass on 106
DEBUG 2022-02-14 16:38:14,312 Running <numba.core.ssa._FreshVarHandler object at 0x7fa046f64c70>
DEBUG 2022-02-14 16:38:14,312 on stmt: $const108.1 = const(int, 65536)
DEBUG 2022-02-14 16:38:14,312 on stmt: $110compare_op.2 = exp > $const108.1
DEBUG 2022-02-14 16:38:14,312 on stmt: bool112 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:38:14,312 on stmt: $112pred = call bool112($110compare_op.2, func=bool112, args=(Var($110compare_op.2, numbers.py:235),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:14,312 on stmt: branch $112pred, 114, 130
DEBUG 2022-02-14 16:38:14,312 ==== SSA block rewrite pass on 114
DEBUG 2022-02-14 16:38:14,312 Running <numba.core.ssa._FreshVarHandler object at 0x7fa046f64c70>
DEBUG 2022-02-14 16:38:14,312 on stmt: $114load_global.0 = global(math: <module 'math' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/lib-dynload/math.cpython-39-x86_64-linux-gnu.so'>)
DEBUG 2022-02-14 16:38:14,312 on stmt: $116load_method.1 = getattr(value=$114load_global.0, attr=pow)
DEBUG 2022-02-14 16:38:14,312 on stmt: $120load_global.3 = global(float: <class 'float'>)
DEBUG 2022-02-14 16:38:14,312 on stmt: $124call_function.5 = call $120load_global.3(b, func=$120load_global.3, args=[Var(b, numbers.py:217)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:14,312 on stmt: $126call_method.6 = call $116load_method.1(a.1, $124call_function.5, func=$116load_method.1, args=[Var(a.1, numbers.py:218), Var($124call_function.5, numbers.py:237)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:14,312 on stmt: $128return_value.7 = cast(value=$126call_method.6)
DEBUG 2022-02-14 16:38:14,312 on stmt: return $128return_value.7
DEBUG 2022-02-14 16:38:14,312 ==== SSA block rewrite pass on 130
DEBUG 2022-02-14 16:38:14,312 Running <numba.core.ssa._FreshVarHandler object at 0x7fa046f64c70>
DEBUG 2022-02-14 16:38:14,312 on stmt: a.1.2 = phi(incoming_values=[Var(a.1, numbers.py:218), Var(a.1.1, numbers.py:242)], incoming_blocks=[106, 154])
DEBUG 2022-02-14 16:38:14,312 on stmt: $const132.1 = const(int, 0)
DEBUG 2022-02-14 16:38:14,312 on stmt: $134compare_op.2 = exp != $const132.1
DEBUG 2022-02-14 16:38:14,312 on stmt: bool136 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:38:14,312 on stmt: $136pred = call bool136($134compare_op.2, func=bool136, args=(Var($134compare_op.2, numbers.py:238),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:14,312 on stmt: branch $136pred, 138, 172
DEBUG 2022-02-14 16:38:14,313 ==== SSA block rewrite pass on 138
DEBUG 2022-02-14 16:38:14,313 Running <numba.core.ssa._FreshVarHandler object at 0x7fa046f64c70>
DEBUG 2022-02-14 16:38:14,313 on stmt: $const140.1 = const(int, 1)
DEBUG 2022-02-14 16:38:14,313 on stmt: $142binary_and.2 = exp & $const140.1
DEBUG 2022-02-14 16:38:14,313 on stmt: bool144 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:38:14,313 on stmt: $144pred = call bool144($142binary_and.2, func=bool144, args=(Var($142binary_and.2, numbers.py:239),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:14,313 on stmt: branch $144pred, 146, 154
DEBUG 2022-02-14 16:38:14,313 ==== SSA block rewrite pass on 146
DEBUG 2022-02-14 16:38:14,313 Running <numba.core.ssa._FreshVarHandler object at 0x7fa046f64c70>
DEBUG 2022-02-14 16:38:14,313 on stmt: $150inplace_multiply.2 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=r, rhs=a.1.2, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:38:14,313 on stmt: r = $150inplace_multiply.2
DEBUG 2022-02-14 16:38:14,313 on stmt: jump 154
DEBUG 2022-02-14 16:38:14,313 ==== SSA block rewrite pass on 154
DEBUG 2022-02-14 16:38:14,313 Running <numba.core.ssa._FreshVarHandler object at 0x7fa046f64c70>
DEBUG 2022-02-14 16:38:14,313 on stmt: $const156.1 = const(int, 1)
DEBUG 2022-02-14 16:38:14,313 on stmt: $158inplace_rshift.2 = inplace_binop(fn=<built-in function irshift>, immutable_fn=<built-in function rshift>, lhs=exp, rhs=$const156.1, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:38:14,313 on stmt: exp = $158inplace_rshift.2
DEBUG 2022-02-14 16:38:14,313 replaced with: exp.2 = $158inplace_rshift.2
DEBUG 2022-02-14 16:38:14,313 on stmt: $166inplace_multiply.5 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=a.1.2, rhs=a.1.2, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:38:14,313 on stmt: a.1.1 = $166inplace_multiply.5
DEBUG 2022-02-14 16:38:14,313 on stmt: jump 130
DEBUG 2022-02-14 16:38:14,313 ==== SSA block rewrite pass on 172
DEBUG 2022-02-14 16:38:14,313 Running <numba.core.ssa._FreshVarHandler object at 0x7fa046f64c70>
DEBUG 2022-02-14 16:38:14,313 on stmt: bool174 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:38:14,313 on stmt: $174pred = call bool174(invert, func=bool174, args=(Var(invert, numbers.py:220),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:14,314 on stmt: branch $174pred, 176, 184
DEBUG 2022-02-14 16:38:14,314 ==== SSA block rewrite pass on 176
DEBUG 2022-02-14 16:38:14,314 Running <numba.core.ssa._FreshVarHandler object at 0x7fa046f64c70>
DEBUG 2022-02-14 16:38:14,314 on stmt: $const176.0 = const(float, 1.0)
DEBUG 2022-02-14 16:38:14,314 on stmt: $180binary_true_divide.2 = $const176.0 / r
DEBUG 2022-02-14 16:38:14,314 on stmt: $182return_value.3 = cast(value=$180binary_true_divide.2)
DEBUG 2022-02-14 16:38:14,314 on stmt: return $182return_value.3
DEBUG 2022-02-14 16:38:14,314 ==== SSA block rewrite pass on 184
DEBUG 2022-02-14 16:38:14,314 Running <numba.core.ssa._FreshVarHandler object at 0x7fa046f64c70>
DEBUG 2022-02-14 16:38:14,314 on stmt: $186return_value.1 = cast(value=r)
DEBUG 2022-02-14 16:38:14,314 on stmt: return $186return_value.1
DEBUG 2022-02-14 16:38:14,314 Replaced assignments: defaultdict(<class 'list'>,
            {26: [<numba.core.ir.Assign object at 0x7fa046f64220>],
             98: [<numba.core.ir.Assign object at 0x7fa046f64160>],
             154: [<numba.core.ir.Assign object at 0x7fa045dd22e0>]})
DEBUG 2022-02-14 16:38:14,314 ==== SSA block rewrite pass on 0
DEBUG 2022-02-14 16:38:14,314 Running <numba.core.ssa._FixSSAVars object at 0x7fa045dcfd00>
DEBUG 2022-02-14 16:38:14,314 on stmt: a = arg(0, name=a)
DEBUG 2022-02-14 16:38:14,314 on stmt: b = arg(1, name=b)
DEBUG 2022-02-14 16:38:14,314 on stmt: $2load_deref.0 = freevar(tp: float64)
DEBUG 2022-02-14 16:38:14,314 on stmt: $const4.1 = const(int, 1)
DEBUG 2022-02-14 16:38:14,314 on stmt: r = call $2load_deref.0($const4.1, func=$2load_deref.0, args=[Var($const4.1, numbers.py:217)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:14,314 on stmt: $10load_deref.3 = freevar(tp: float64)
DEBUG 2022-02-14 16:38:14,314 on stmt: a.1 = call $10load_deref.3(a, func=$10load_deref.3, args=[Var(a, numbers.py:217)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:14,314 on stmt: $const20.7 = const(int, 0)
DEBUG 2022-02-14 16:38:14,314 on stmt: $22compare_op.8 = b < $const20.7
DEBUG 2022-02-14 16:38:14,315 on stmt: bool24 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:38:14,315 on stmt: $24pred = call bool24($22compare_op.8, func=bool24, args=(Var($22compare_op.8, numbers.py:219),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:14,315 on stmt: branch $24pred, 26, 98
DEBUG 2022-02-14 16:38:14,315 ==== SSA block rewrite pass on 26
DEBUG 2022-02-14 16:38:14,315 Running <numba.core.ssa._FixSSAVars object at 0x7fa045dcfd00>
DEBUG 2022-02-14 16:38:14,315 on stmt: invert = const(bool, True)
DEBUG 2022-02-14 16:38:14,315 on stmt: exp = unary(fn=<built-in function neg>, value=b)
DEBUG 2022-02-14 16:38:14,315 on stmt: $const38.4 = const(int, 0)
DEBUG 2022-02-14 16:38:14,315 on stmt: $40compare_op.5 = exp < $const38.4
DEBUG 2022-02-14 16:38:14,315 find_def var='exp' stmt=$40compare_op.5 = exp < $const38.4
DEBUG 2022-02-14 16:38:14,315 on stmt: bool42 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:38:14,315 on stmt: $42pred = call bool42($40compare_op.5, func=bool42, args=(Var($40compare_op.5, numbers.py:222),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:14,315 on stmt: branch $42pred, 44, 48
DEBUG 2022-02-14 16:38:14,315 ==== SSA block rewrite pass on 44
DEBUG 2022-02-14 16:38:14,315 Running <numba.core.ssa._FixSSAVars object at 0x7fa045dcfd00>
DEBUG 2022-02-14 16:38:14,315 on stmt: $44load_global.0 = global(OverflowError: <class 'OverflowError'>)
DEBUG 2022-02-14 16:38:14,315 on stmt: <static> raise <class 'OverflowError'>
DEBUG 2022-02-14 16:38:14,315 ==== SSA block rewrite pass on 48
DEBUG 2022-02-14 16:38:14,315 Running <numba.core.ssa._FixSSAVars object at 0x7fa045dcfd00>
DEBUG 2022-02-14 16:38:14,315 on stmt: $48load_deref.0 = freevar(is_integer: False)
DEBUG 2022-02-14 16:38:14,315 on stmt: bool50 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:38:14,315 on stmt: $50pred = call bool50($48load_deref.0, func=bool50, args=(Var($48load_deref.0, numbers.py:224),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:14,315 on stmt: jump 106
DEBUG 2022-02-14 16:38:14,315 ==== SSA block rewrite pass on 98
DEBUG 2022-02-14 16:38:14,315 Running <numba.core.ssa._FixSSAVars object at 0x7fa045dcfd00>
DEBUG 2022-02-14 16:38:14,316 on stmt: invert = const(bool, False)
DEBUG 2022-02-14 16:38:14,316 on stmt: exp.1 = b
DEBUG 2022-02-14 16:38:14,316 on stmt: jump 106
DEBUG 2022-02-14 16:38:14,316 ==== SSA block rewrite pass on 106
DEBUG 2022-02-14 16:38:14,316 Running <numba.core.ssa._FixSSAVars object at 0x7fa045dcfd00>
DEBUG 2022-02-14 16:38:14,316 on stmt: $const108.1 = const(int, 65536)
DEBUG 2022-02-14 16:38:14,316 on stmt: $110compare_op.2 = exp > $const108.1
DEBUG 2022-02-14 16:38:14,316 find_def var='exp' stmt=$110compare_op.2 = exp > $const108.1
DEBUG 2022-02-14 16:38:14,316 find_def_from_top label 106
DEBUG 2022-02-14 16:38:14,316 insert phi node exp.3 = phi(incoming_values=[], incoming_blocks=[]) at 106
DEBUG 2022-02-14 16:38:14,316 find_def_from_bottom label 48
DEBUG 2022-02-14 16:38:14,316 find_def_from_top label 48
DEBUG 2022-02-14 16:38:14,316 idom 26 from label 48
DEBUG 2022-02-14 16:38:14,316 find_def_from_bottom label 26
DEBUG 2022-02-14 16:38:14,316 incoming_def exp = unary(fn=<built-in function neg>, value=b)
DEBUG 2022-02-14 16:38:14,316 find_def_from_bottom label 98
DEBUG 2022-02-14 16:38:14,316 incoming_def exp.1 = b
DEBUG 2022-02-14 16:38:14,317 replaced with: $110compare_op.2 = exp.3 > $const108.1
DEBUG 2022-02-14 16:38:14,317 on stmt: bool112 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:38:14,317 on stmt: $112pred = call bool112($110compare_op.2, func=bool112, args=(Var($110compare_op.2, numbers.py:235),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:14,317 on stmt: branch $112pred, 114, 130
DEBUG 2022-02-14 16:38:14,317 ==== SSA block rewrite pass on 114
DEBUG 2022-02-14 16:38:14,317 Running <numba.core.ssa._FixSSAVars object at 0x7fa045dcfd00>
DEBUG 2022-02-14 16:38:14,317 on stmt: $114load_global.0 = global(math: <module 'math' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/lib-dynload/math.cpython-39-x86_64-linux-gnu.so'>)
DEBUG 2022-02-14 16:38:14,317 on stmt: $116load_method.1 = getattr(value=$114load_global.0, attr=pow)
DEBUG 2022-02-14 16:38:14,317 on stmt: $120load_global.3 = global(float: <class 'float'>)
DEBUG 2022-02-14 16:38:14,317 on stmt: $124call_function.5 = call $120load_global.3(b, func=$120load_global.3, args=[Var(b, numbers.py:217)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:14,317 on stmt: $126call_method.6 = call $116load_method.1(a.1, $124call_function.5, func=$116load_method.1, args=[Var(a.1, numbers.py:218), Var($124call_function.5, numbers.py:237)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:14,317 on stmt: $128return_value.7 = cast(value=$126call_method.6)
DEBUG 2022-02-14 16:38:14,317 on stmt: return $128return_value.7
DEBUG 2022-02-14 16:38:14,317 ==== SSA block rewrite pass on 130
DEBUG 2022-02-14 16:38:14,317 Running <numba.core.ssa._FixSSAVars object at 0x7fa045dcfd00>
DEBUG 2022-02-14 16:38:14,317 on stmt: a.1.2 = phi(incoming_values=[Var(a.1, numbers.py:218), Var(a.1.1, numbers.py:242)], incoming_blocks=[106, 154])
DEBUG 2022-02-14 16:38:14,317 on stmt: $const132.1 = const(int, 0)
DEBUG 2022-02-14 16:38:14,317 on stmt: $134compare_op.2 = exp != $const132.1
DEBUG 2022-02-14 16:38:14,317 find_def var='exp' stmt=$134compare_op.2 = exp != $const132.1
DEBUG 2022-02-14 16:38:14,318 find_def_from_top label 130
DEBUG 2022-02-14 16:38:14,318 insert phi node exp.4 = phi(incoming_values=[], incoming_blocks=[]) at 130
DEBUG 2022-02-14 16:38:14,318 find_def_from_bottom label 106
DEBUG 2022-02-14 16:38:14,318 incoming_def exp.3 = phi(incoming_values=[Var(exp, numbers.py:221), Var(exp.1, numbers.py:234)], incoming_blocks=[48, 98])
DEBUG 2022-02-14 16:38:14,318 find_def_from_bottom label 154
DEBUG 2022-02-14 16:38:14,318 incoming_def exp.2 = $158inplace_rshift.2
DEBUG 2022-02-14 16:38:14,318 replaced with: $134compare_op.2 = exp.4 != $const132.1
DEBUG 2022-02-14 16:38:14,318 on stmt: bool136 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:38:14,318 on stmt: $136pred = call bool136($134compare_op.2, func=bool136, args=(Var($134compare_op.2, numbers.py:238),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:14,318 on stmt: branch $136pred, 138, 172
DEBUG 2022-02-14 16:38:14,318 ==== SSA block rewrite pass on 138
DEBUG 2022-02-14 16:38:14,318 Running <numba.core.ssa._FixSSAVars object at 0x7fa045dcfd00>
DEBUG 2022-02-14 16:38:14,318 on stmt: $const140.1 = const(int, 1)
DEBUG 2022-02-14 16:38:14,318 on stmt: $142binary_and.2 = exp & $const140.1
DEBUG 2022-02-14 16:38:14,318 find_def var='exp' stmt=$142binary_and.2 = exp & $const140.1
DEBUG 2022-02-14 16:38:14,318 find_def_from_top label 138
DEBUG 2022-02-14 16:38:14,318 idom 130 from label 138
DEBUG 2022-02-14 16:38:14,318 find_def_from_bottom label 130
DEBUG 2022-02-14 16:38:14,318 replaced with: $142binary_and.2 = exp.4 & $const140.1
DEBUG 2022-02-14 16:38:14,319 on stmt: bool144 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:38:14,319 on stmt: $144pred = call bool144($142binary_and.2, func=bool144, args=(Var($142binary_and.2, numbers.py:239),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:14,319 on stmt: branch $144pred, 146, 154
DEBUG 2022-02-14 16:38:14,319 ==== SSA block rewrite pass on 146
DEBUG 2022-02-14 16:38:14,319 Running <numba.core.ssa._FixSSAVars object at 0x7fa045dcfd00>
DEBUG 2022-02-14 16:38:14,319 on stmt: $150inplace_multiply.2 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=r, rhs=a.1.2, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:38:14,319 on stmt: r = $150inplace_multiply.2
DEBUG 2022-02-14 16:38:14,319 on stmt: jump 154
DEBUG 2022-02-14 16:38:14,319 ==== SSA block rewrite pass on 154
DEBUG 2022-02-14 16:38:14,319 Running <numba.core.ssa._FixSSAVars object at 0x7fa045dcfd00>
DEBUG 2022-02-14 16:38:14,319 on stmt: $const156.1 = const(int, 1)
DEBUG 2022-02-14 16:38:14,319 on stmt: $158inplace_rshift.2 = inplace_binop(fn=<built-in function irshift>, immutable_fn=<built-in function rshift>, lhs=exp, rhs=$const156.1, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:38:14,319 find_def var='exp' stmt=$158inplace_rshift.2 = inplace_binop(fn=<built-in function irshift>, immutable_fn=<built-in function rshift>, lhs=exp, rhs=$const156.1, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:38:14,319 find_def_from_top label 154
DEBUG 2022-02-14 16:38:14,319 idom 138 from label 154
DEBUG 2022-02-14 16:38:14,319 find_def_from_bottom label 138
DEBUG 2022-02-14 16:38:14,319 find_def_from_top label 138
DEBUG 2022-02-14 16:38:14,319 idom 130 from label 138
DEBUG 2022-02-14 16:38:14,320 find_def_from_bottom label 130
DEBUG 2022-02-14 16:38:14,320 replaced with: $158inplace_rshift.2 = inplace_binop(fn=<built-in function irshift>, immutable_fn=<built-in function rshift>, lhs=exp.4, rhs=$const156.1, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:38:14,320 on stmt: exp.2 = $158inplace_rshift.2
DEBUG 2022-02-14 16:38:14,320 on stmt: $166inplace_multiply.5 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=a.1.2, rhs=a.1.2, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:38:14,320 on stmt: a.1.1 = $166inplace_multiply.5
DEBUG 2022-02-14 16:38:14,320 on stmt: jump 130
DEBUG 2022-02-14 16:38:14,320 ==== SSA block rewrite pass on 172
DEBUG 2022-02-14 16:38:14,320 Running <numba.core.ssa._FixSSAVars object at 0x7fa045dcfd00>
DEBUG 2022-02-14 16:38:14,320 on stmt: bool174 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:38:14,320 on stmt: $174pred = call bool174(invert, func=bool174, args=(Var(invert, numbers.py:220),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:14,320 on stmt: branch $174pred, 176, 184
DEBUG 2022-02-14 16:38:14,320 ==== SSA block rewrite pass on 176
DEBUG 2022-02-14 16:38:14,320 Running <numba.core.ssa._FixSSAVars object at 0x7fa045dcfd00>
DEBUG 2022-02-14 16:38:14,320 on stmt: $const176.0 = const(float, 1.0)
DEBUG 2022-02-14 16:38:14,320 on stmt: $180binary_true_divide.2 = $const176.0 / r
DEBUG 2022-02-14 16:38:14,320 on stmt: $182return_value.3 = cast(value=$180binary_true_divide.2)
DEBUG 2022-02-14 16:38:14,320 on stmt: return $182return_value.3
DEBUG 2022-02-14 16:38:14,320 ==== SSA block rewrite pass on 184
DEBUG 2022-02-14 16:38:14,320 Running <numba.core.ssa._FixSSAVars object at 0x7fa045dcfd00>
DEBUG 2022-02-14 16:38:14,321 on stmt: $186return_value.1 = cast(value=r)
DEBUG 2022-02-14 16:38:14,321 on stmt: return $186return_value.1
DEBUG 2022-02-14 16:38:14,321 Fix SSA violator on var invert
DEBUG 2022-02-14 16:38:14,321 ==== SSA block rewrite pass on 0
DEBUG 2022-02-14 16:38:14,321 Running <numba.core.ssa._FreshVarHandler object at 0x7fa046196820>
DEBUG 2022-02-14 16:38:14,321 on stmt: a = arg(0, name=a)
DEBUG 2022-02-14 16:38:14,321 on stmt: b = arg(1, name=b)
DEBUG 2022-02-14 16:38:14,321 on stmt: $2load_deref.0 = freevar(tp: float64)
DEBUG 2022-02-14 16:38:14,321 on stmt: $const4.1 = const(int, 1)
DEBUG 2022-02-14 16:38:14,321 on stmt: r = call $2load_deref.0($const4.1, func=$2load_deref.0, args=[Var($const4.1, numbers.py:217)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:14,321 on stmt: $10load_deref.3 = freevar(tp: float64)
DEBUG 2022-02-14 16:38:14,321 on stmt: a.1 = call $10load_deref.3(a, func=$10load_deref.3, args=[Var(a, numbers.py:217)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:14,321 on stmt: $const20.7 = const(int, 0)
DEBUG 2022-02-14 16:38:14,321 on stmt: $22compare_op.8 = b < $const20.7
DEBUG 2022-02-14 16:38:14,321 on stmt: bool24 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:38:14,321 on stmt: $24pred = call bool24($22compare_op.8, func=bool24, args=(Var($22compare_op.8, numbers.py:219),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:14,321 on stmt: branch $24pred, 26, 98
DEBUG 2022-02-14 16:38:14,321 ==== SSA block rewrite pass on 26
DEBUG 2022-02-14 16:38:14,322 Running <numba.core.ssa._FreshVarHandler object at 0x7fa046196820>
DEBUG 2022-02-14 16:38:14,322 on stmt: invert = const(bool, True)
DEBUG 2022-02-14 16:38:14,322 first assign: invert
DEBUG 2022-02-14 16:38:14,322 replaced with: invert = const(bool, True)
DEBUG 2022-02-14 16:38:14,322 on stmt: exp = unary(fn=<built-in function neg>, value=b)
DEBUG 2022-02-14 16:38:14,322 on stmt: $const38.4 = const(int, 0)
DEBUG 2022-02-14 16:38:14,322 on stmt: $40compare_op.5 = exp < $const38.4
DEBUG 2022-02-14 16:38:14,322 on stmt: bool42 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:38:14,322 on stmt: $42pred = call bool42($40compare_op.5, func=bool42, args=(Var($40compare_op.5, numbers.py:222),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:14,322 on stmt: branch $42pred, 44, 48
DEBUG 2022-02-14 16:38:14,322 ==== SSA block rewrite pass on 44
DEBUG 2022-02-14 16:38:14,322 Running <numba.core.ssa._FreshVarHandler object at 0x7fa046196820>
DEBUG 2022-02-14 16:38:14,322 on stmt: $44load_global.0 = global(OverflowError: <class 'OverflowError'>)
DEBUG 2022-02-14 16:38:14,322 on stmt: <static> raise <class 'OverflowError'>
DEBUG 2022-02-14 16:38:14,322 ==== SSA block rewrite pass on 48
DEBUG 2022-02-14 16:38:14,322 Running <numba.core.ssa._FreshVarHandler object at 0x7fa046196820>
DEBUG 2022-02-14 16:38:14,322 on stmt: $48load_deref.0 = freevar(is_integer: False)
DEBUG 2022-02-14 16:38:14,322 on stmt: bool50 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:38:14,322 on stmt: $50pred = call bool50($48load_deref.0, func=bool50, args=(Var($48load_deref.0, numbers.py:224),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:14,322 on stmt: jump 106
DEBUG 2022-02-14 16:38:14,323 ==== SSA block rewrite pass on 98
DEBUG 2022-02-14 16:38:14,323 Running <numba.core.ssa._FreshVarHandler object at 0x7fa046196820>
DEBUG 2022-02-14 16:38:14,323 on stmt: invert = const(bool, False)
DEBUG 2022-02-14 16:38:14,323 replaced with: invert.1 = const(bool, False)
DEBUG 2022-02-14 16:38:14,323 on stmt: exp.1 = b
DEBUG 2022-02-14 16:38:14,323 on stmt: jump 106
DEBUG 2022-02-14 16:38:14,323 ==== SSA block rewrite pass on 106
DEBUG 2022-02-14 16:38:14,323 Running <numba.core.ssa._FreshVarHandler object at 0x7fa046196820>
DEBUG 2022-02-14 16:38:14,323 on stmt: exp.3 = phi(incoming_values=[Var(exp, numbers.py:221), Var(exp.1, numbers.py:234)], incoming_blocks=[48, 98])
DEBUG 2022-02-14 16:38:14,323 on stmt: $const108.1 = const(int, 65536)
DEBUG 2022-02-14 16:38:14,323 on stmt: $110compare_op.2 = exp.3 > $const108.1
DEBUG 2022-02-14 16:38:14,323 on stmt: bool112 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:38:14,323 on stmt: $112pred = call bool112($110compare_op.2, func=bool112, args=(Var($110compare_op.2, numbers.py:235),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:14,323 on stmt: branch $112pred, 114, 130
DEBUG 2022-02-14 16:38:14,323 ==== SSA block rewrite pass on 114
DEBUG 2022-02-14 16:38:14,323 Running <numba.core.ssa._FreshVarHandler object at 0x7fa046196820>
DEBUG 2022-02-14 16:38:14,323 on stmt: $114load_global.0 = global(math: <module 'math' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/lib-dynload/math.cpython-39-x86_64-linux-gnu.so'>)
DEBUG 2022-02-14 16:38:14,323 on stmt: $116load_method.1 = getattr(value=$114load_global.0, attr=pow)
DEBUG 2022-02-14 16:38:14,323 on stmt: $120load_global.3 = global(float: <class 'float'>)
DEBUG 2022-02-14 16:38:14,323 on stmt: $124call_function.5 = call $120load_global.3(b, func=$120load_global.3, args=[Var(b, numbers.py:217)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:14,324 on stmt: $126call_method.6 = call $116load_method.1(a.1, $124call_function.5, func=$116load_method.1, args=[Var(a.1, numbers.py:218), Var($124call_function.5, numbers.py:237)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:14,324 on stmt: $128return_value.7 = cast(value=$126call_method.6)
DEBUG 2022-02-14 16:38:14,324 on stmt: return $128return_value.7
DEBUG 2022-02-14 16:38:14,324 ==== SSA block rewrite pass on 130
DEBUG 2022-02-14 16:38:14,324 Running <numba.core.ssa._FreshVarHandler object at 0x7fa046196820>
DEBUG 2022-02-14 16:38:14,324 on stmt: exp.4 = phi(incoming_values=[Var(exp.3, numbers.py:235), Var(exp.2, numbers.py:241)], incoming_blocks=[106, 154])
DEBUG 2022-02-14 16:38:14,324 on stmt: a.1.2 = phi(incoming_values=[Var(a.1, numbers.py:218), Var(a.1.1, numbers.py:242)], incoming_blocks=[106, 154])
DEBUG 2022-02-14 16:38:14,324 on stmt: $const132.1 = const(int, 0)
DEBUG 2022-02-14 16:38:14,324 on stmt: $134compare_op.2 = exp.4 != $const132.1
DEBUG 2022-02-14 16:38:14,324 on stmt: bool136 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:38:14,324 on stmt: $136pred = call bool136($134compare_op.2, func=bool136, args=(Var($134compare_op.2, numbers.py:238),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:14,324 on stmt: branch $136pred, 138, 172
DEBUG 2022-02-14 16:38:14,324 ==== SSA block rewrite pass on 138
DEBUG 2022-02-14 16:38:14,324 Running <numba.core.ssa._FreshVarHandler object at 0x7fa046196820>
DEBUG 2022-02-14 16:38:14,324 on stmt: $const140.1 = const(int, 1)
DEBUG 2022-02-14 16:38:14,324 on stmt: $142binary_and.2 = exp.4 & $const140.1
DEBUG 2022-02-14 16:38:14,324 on stmt: bool144 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:38:14,324 on stmt: $144pred = call bool144($142binary_and.2, func=bool144, args=(Var($142binary_and.2, numbers.py:239),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:14,324 on stmt: branch $144pred, 146, 154
DEBUG 2022-02-14 16:38:14,324 ==== SSA block rewrite pass on 146
DEBUG 2022-02-14 16:38:14,325 Running <numba.core.ssa._FreshVarHandler object at 0x7fa046196820>
DEBUG 2022-02-14 16:38:14,325 on stmt: $150inplace_multiply.2 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=r, rhs=a.1.2, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:38:14,325 on stmt: r = $150inplace_multiply.2
DEBUG 2022-02-14 16:38:14,325 on stmt: jump 154
DEBUG 2022-02-14 16:38:14,325 ==== SSA block rewrite pass on 154
DEBUG 2022-02-14 16:38:14,325 Running <numba.core.ssa._FreshVarHandler object at 0x7fa046196820>
DEBUG 2022-02-14 16:38:14,325 on stmt: $const156.1 = const(int, 1)
DEBUG 2022-02-14 16:38:14,325 on stmt: $158inplace_rshift.2 = inplace_binop(fn=<built-in function irshift>, immutable_fn=<built-in function rshift>, lhs=exp.4, rhs=$const156.1, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:38:14,325 on stmt: exp.2 = $158inplace_rshift.2
DEBUG 2022-02-14 16:38:14,325 on stmt: $166inplace_multiply.5 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=a.1.2, rhs=a.1.2, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:38:14,325 on stmt: a.1.1 = $166inplace_multiply.5
DEBUG 2022-02-14 16:38:14,325 on stmt: jump 130
DEBUG 2022-02-14 16:38:14,325 ==== SSA block rewrite pass on 172
DEBUG 2022-02-14 16:38:14,325 Running <numba.core.ssa._FreshVarHandler object at 0x7fa046196820>
DEBUG 2022-02-14 16:38:14,325 on stmt: bool174 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:38:14,325 on stmt: $174pred = call bool174(invert, func=bool174, args=(Var(invert, numbers.py:220),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:14,325 on stmt: branch $174pred, 176, 184
DEBUG 2022-02-14 16:38:14,325 ==== SSA block rewrite pass on 176
DEBUG 2022-02-14 16:38:14,325 Running <numba.core.ssa._FreshVarHandler object at 0x7fa046196820>
DEBUG 2022-02-14 16:38:14,325 on stmt: $const176.0 = const(float, 1.0)
DEBUG 2022-02-14 16:38:14,325 on stmt: $180binary_true_divide.2 = $const176.0 / r
DEBUG 2022-02-14 16:38:14,325 on stmt: $182return_value.3 = cast(value=$180binary_true_divide.2)
DEBUG 2022-02-14 16:38:14,326 on stmt: return $182return_value.3
DEBUG 2022-02-14 16:38:14,326 ==== SSA block rewrite pass on 184
DEBUG 2022-02-14 16:38:14,326 Running <numba.core.ssa._FreshVarHandler object at 0x7fa046196820>
DEBUG 2022-02-14 16:38:14,326 on stmt: $186return_value.1 = cast(value=r)
DEBUG 2022-02-14 16:38:14,326 on stmt: return $186return_value.1
DEBUG 2022-02-14 16:38:14,326 Replaced assignments: defaultdict(<class 'list'>,
            {26: [<numba.core.ir.Assign object at 0x7fa046f64c40>],
             98: [<numba.core.ir.Assign object at 0x7fa046f64bb0>]})
DEBUG 2022-02-14 16:38:14,326 ==== SSA block rewrite pass on 0
DEBUG 2022-02-14 16:38:14,326 Running <numba.core.ssa._FixSSAVars object at 0x7fa046f64730>
DEBUG 2022-02-14 16:38:14,326 on stmt: a = arg(0, name=a)
DEBUG 2022-02-14 16:38:14,326 on stmt: b = arg(1, name=b)
DEBUG 2022-02-14 16:38:14,326 on stmt: $2load_deref.0 = freevar(tp: float64)
DEBUG 2022-02-14 16:38:14,326 on stmt: $const4.1 = const(int, 1)
DEBUG 2022-02-14 16:38:14,326 on stmt: r = call $2load_deref.0($const4.1, func=$2load_deref.0, args=[Var($const4.1, numbers.py:217)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:14,326 on stmt: $10load_deref.3 = freevar(tp: float64)
DEBUG 2022-02-14 16:38:14,326 on stmt: a.1 = call $10load_deref.3(a, func=$10load_deref.3, args=[Var(a, numbers.py:217)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:14,326 on stmt: $const20.7 = const(int, 0)
DEBUG 2022-02-14 16:38:14,326 on stmt: $22compare_op.8 = b < $const20.7
DEBUG 2022-02-14 16:38:14,326 on stmt: bool24 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:38:14,326 on stmt: $24pred = call bool24($22compare_op.8, func=bool24, args=(Var($22compare_op.8, numbers.py:219),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:14,327 on stmt: branch $24pred, 26, 98
DEBUG 2022-02-14 16:38:14,327 ==== SSA block rewrite pass on 26
DEBUG 2022-02-14 16:38:14,327 Running <numba.core.ssa._FixSSAVars object at 0x7fa046f64730>
DEBUG 2022-02-14 16:38:14,327 on stmt: invert = const(bool, True)
DEBUG 2022-02-14 16:38:14,327 on stmt: exp = unary(fn=<built-in function neg>, value=b)
DEBUG 2022-02-14 16:38:14,327 on stmt: $const38.4 = const(int, 0)
DEBUG 2022-02-14 16:38:14,327 on stmt: $40compare_op.5 = exp < $const38.4
DEBUG 2022-02-14 16:38:14,327 on stmt: bool42 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:38:14,327 on stmt: $42pred = call bool42($40compare_op.5, func=bool42, args=(Var($40compare_op.5, numbers.py:222),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:14,327 on stmt: branch $42pred, 44, 48
DEBUG 2022-02-14 16:38:14,327 ==== SSA block rewrite pass on 44
DEBUG 2022-02-14 16:38:14,327 Running <numba.core.ssa._FixSSAVars object at 0x7fa046f64730>
DEBUG 2022-02-14 16:38:14,327 on stmt: $44load_global.0 = global(OverflowError: <class 'OverflowError'>)
DEBUG 2022-02-14 16:38:14,327 on stmt: <static> raise <class 'OverflowError'>
DEBUG 2022-02-14 16:38:14,327 ==== SSA block rewrite pass on 48
DEBUG 2022-02-14 16:38:14,327 Running <numba.core.ssa._FixSSAVars object at 0x7fa046f64730>
DEBUG 2022-02-14 16:38:14,327 on stmt: $48load_deref.0 = freevar(is_integer: False)
DEBUG 2022-02-14 16:38:14,327 on stmt: bool50 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:38:14,327 on stmt: $50pred = call bool50($48load_deref.0, func=bool50, args=(Var($48load_deref.0, numbers.py:224),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:14,327 on stmt: jump 106
DEBUG 2022-02-14 16:38:14,328 ==== SSA block rewrite pass on 98
DEBUG 2022-02-14 16:38:14,328 Running <numba.core.ssa._FixSSAVars object at 0x7fa046f64730>
DEBUG 2022-02-14 16:38:14,328 on stmt: invert.1 = const(bool, False)
DEBUG 2022-02-14 16:38:14,328 on stmt: exp.1 = b
DEBUG 2022-02-14 16:38:14,328 on stmt: jump 106
DEBUG 2022-02-14 16:38:14,328 ==== SSA block rewrite pass on 106
DEBUG 2022-02-14 16:38:14,328 Running <numba.core.ssa._FixSSAVars object at 0x7fa046f64730>
DEBUG 2022-02-14 16:38:14,328 on stmt: exp.3 = phi(incoming_values=[Var(exp, numbers.py:221), Var(exp.1, numbers.py:234)], incoming_blocks=[48, 98])
DEBUG 2022-02-14 16:38:14,328 on stmt: $const108.1 = const(int, 65536)
DEBUG 2022-02-14 16:38:14,328 on stmt: $110compare_op.2 = exp.3 > $const108.1
DEBUG 2022-02-14 16:38:14,328 on stmt: bool112 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:38:14,328 on stmt: $112pred = call bool112($110compare_op.2, func=bool112, args=(Var($110compare_op.2, numbers.py:235),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:14,328 on stmt: branch $112pred, 114, 130
DEBUG 2022-02-14 16:38:14,328 ==== SSA block rewrite pass on 114
DEBUG 2022-02-14 16:38:14,328 Running <numba.core.ssa._FixSSAVars object at 0x7fa046f64730>
DEBUG 2022-02-14 16:38:14,328 on stmt: $114load_global.0 = global(math: <module 'math' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/lib-dynload/math.cpython-39-x86_64-linux-gnu.so'>)
DEBUG 2022-02-14 16:38:14,328 on stmt: $116load_method.1 = getattr(value=$114load_global.0, attr=pow)
DEBUG 2022-02-14 16:38:14,328 on stmt: $120load_global.3 = global(float: <class 'float'>)
DEBUG 2022-02-14 16:38:14,328 on stmt: $124call_function.5 = call $120load_global.3(b, func=$120load_global.3, args=[Var(b, numbers.py:217)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:14,328 on stmt: $126call_method.6 = call $116load_method.1(a.1, $124call_function.5, func=$116load_method.1, args=[Var(a.1, numbers.py:218), Var($124call_function.5, numbers.py:237)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:14,329 on stmt: $128return_value.7 = cast(value=$126call_method.6)
DEBUG 2022-02-14 16:38:14,329 on stmt: return $128return_value.7
DEBUG 2022-02-14 16:38:14,329 ==== SSA block rewrite pass on 130
DEBUG 2022-02-14 16:38:14,329 Running <numba.core.ssa._FixSSAVars object at 0x7fa046f64730>
DEBUG 2022-02-14 16:38:14,329 on stmt: exp.4 = phi(incoming_values=[Var(exp.3, numbers.py:235), Var(exp.2, numbers.py:241)], incoming_blocks=[106, 154])
DEBUG 2022-02-14 16:38:14,329 on stmt: a.1.2 = phi(incoming_values=[Var(a.1, numbers.py:218), Var(a.1.1, numbers.py:242)], incoming_blocks=[106, 154])
DEBUG 2022-02-14 16:38:14,329 on stmt: $const132.1 = const(int, 0)
DEBUG 2022-02-14 16:38:14,329 on stmt: $134compare_op.2 = exp.4 != $const132.1
DEBUG 2022-02-14 16:38:14,329 on stmt: bool136 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:38:14,329 on stmt: $136pred = call bool136($134compare_op.2, func=bool136, args=(Var($134compare_op.2, numbers.py:238),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:14,329 on stmt: branch $136pred, 138, 172
DEBUG 2022-02-14 16:38:14,329 ==== SSA block rewrite pass on 138
DEBUG 2022-02-14 16:38:14,329 Running <numba.core.ssa._FixSSAVars object at 0x7fa046f64730>
DEBUG 2022-02-14 16:38:14,329 on stmt: $const140.1 = const(int, 1)
DEBUG 2022-02-14 16:38:14,329 on stmt: $142binary_and.2 = exp.4 & $const140.1
DEBUG 2022-02-14 16:38:14,329 on stmt: bool144 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:38:14,329 on stmt: $144pred = call bool144($142binary_and.2, func=bool144, args=(Var($142binary_and.2, numbers.py:239),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:14,329 on stmt: branch $144pred, 146, 154
DEBUG 2022-02-14 16:38:14,329 ==== SSA block rewrite pass on 146
DEBUG 2022-02-14 16:38:14,330 Running <numba.core.ssa._FixSSAVars object at 0x7fa046f64730>
DEBUG 2022-02-14 16:38:14,330 on stmt: $150inplace_multiply.2 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=r, rhs=a.1.2, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:38:14,330 on stmt: r = $150inplace_multiply.2
DEBUG 2022-02-14 16:38:14,330 on stmt: jump 154
DEBUG 2022-02-14 16:38:14,330 ==== SSA block rewrite pass on 154
DEBUG 2022-02-14 16:38:14,330 Running <numba.core.ssa._FixSSAVars object at 0x7fa046f64730>
DEBUG 2022-02-14 16:38:14,330 on stmt: $const156.1 = const(int, 1)
DEBUG 2022-02-14 16:38:14,330 on stmt: $158inplace_rshift.2 = inplace_binop(fn=<built-in function irshift>, immutable_fn=<built-in function rshift>, lhs=exp.4, rhs=$const156.1, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:38:14,330 on stmt: exp.2 = $158inplace_rshift.2
DEBUG 2022-02-14 16:38:14,330 on stmt: $166inplace_multiply.5 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=a.1.2, rhs=a.1.2, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:38:14,330 on stmt: a.1.1 = $166inplace_multiply.5
DEBUG 2022-02-14 16:38:14,330 on stmt: jump 130
DEBUG 2022-02-14 16:38:14,330 ==== SSA block rewrite pass on 172
DEBUG 2022-02-14 16:38:14,330 Running <numba.core.ssa._FixSSAVars object at 0x7fa046f64730>
DEBUG 2022-02-14 16:38:14,330 on stmt: bool174 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:38:14,330 on stmt: $174pred = call bool174(invert, func=bool174, args=(Var(invert, numbers.py:220),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:14,330 find_def var='invert' stmt=$174pred = call bool174(invert, func=bool174, args=(Var(invert, numbers.py:220),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:14,330 find_def_from_top label 172
DEBUG 2022-02-14 16:38:14,330 idom 130 from label 172
DEBUG 2022-02-14 16:38:14,330 find_def_from_bottom label 130
DEBUG 2022-02-14 16:38:14,330 find_def_from_top label 130
DEBUG 2022-02-14 16:38:14,331 idom 106 from label 130
DEBUG 2022-02-14 16:38:14,331 find_def_from_bottom label 106
DEBUG 2022-02-14 16:38:14,331 find_def_from_top label 106
DEBUG 2022-02-14 16:38:14,331 insert phi node invert.2 = phi(incoming_values=[], incoming_blocks=[]) at 106
DEBUG 2022-02-14 16:38:14,331 find_def_from_bottom label 48
DEBUG 2022-02-14 16:38:14,331 find_def_from_top label 48
DEBUG 2022-02-14 16:38:14,331 idom 26 from label 48
DEBUG 2022-02-14 16:38:14,331 find_def_from_bottom label 26
DEBUG 2022-02-14 16:38:14,331 incoming_def invert = const(bool, True)
DEBUG 2022-02-14 16:38:14,331 find_def_from_bottom label 98
DEBUG 2022-02-14 16:38:14,331 incoming_def invert.1 = const(bool, False)
DEBUG 2022-02-14 16:38:14,331 replaced with: $174pred = call bool174(invert.2, func=bool174, args=(Var(invert.2, numbers.py:244),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:14,331 on stmt: branch $174pred, 176, 184
DEBUG 2022-02-14 16:38:14,331 ==== SSA block rewrite pass on 176
DEBUG 2022-02-14 16:38:14,331 Running <numba.core.ssa._FixSSAVars object at 0x7fa046f64730>
DEBUG 2022-02-14 16:38:14,331 on stmt: $const176.0 = const(float, 1.0)
DEBUG 2022-02-14 16:38:14,331 on stmt: $180binary_true_divide.2 = $const176.0 / r
DEBUG 2022-02-14 16:38:14,331 on stmt: $182return_value.3 = cast(value=$180binary_true_divide.2)
DEBUG 2022-02-14 16:38:14,331 on stmt: return $182return_value.3
DEBUG 2022-02-14 16:38:14,331 ==== SSA block rewrite pass on 184
DEBUG 2022-02-14 16:38:14,332 Running <numba.core.ssa._FixSSAVars object at 0x7fa046f64730>
DEBUG 2022-02-14 16:38:14,332 on stmt: $186return_value.1 = cast(value=r)
DEBUG 2022-02-14 16:38:14,332 on stmt: return $186return_value.1
DEBUG 2022-02-14 16:38:14,332 Fix SSA violator on var r
DEBUG 2022-02-14 16:38:14,332 ==== SSA block rewrite pass on 0
DEBUG 2022-02-14 16:38:14,332 Running <numba.core.ssa._FreshVarHandler object at 0x7fa045dd2eb0>
DEBUG 2022-02-14 16:38:14,332 on stmt: a = arg(0, name=a)
DEBUG 2022-02-14 16:38:14,332 on stmt: b = arg(1, name=b)
DEBUG 2022-02-14 16:38:14,332 on stmt: $2load_deref.0 = freevar(tp: float64)
DEBUG 2022-02-14 16:38:14,332 on stmt: $const4.1 = const(int, 1)
DEBUG 2022-02-14 16:38:14,332 on stmt: r = call $2load_deref.0($const4.1, func=$2load_deref.0, args=[Var($const4.1, numbers.py:217)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:14,332 first assign: r
DEBUG 2022-02-14 16:38:14,332 replaced with: r = call $2load_deref.0($const4.1, func=$2load_deref.0, args=[Var($const4.1, numbers.py:217)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:14,332 on stmt: $10load_deref.3 = freevar(tp: float64)
DEBUG 2022-02-14 16:38:14,332 on stmt: a.1 = call $10load_deref.3(a, func=$10load_deref.3, args=[Var(a, numbers.py:217)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:14,332 on stmt: $const20.7 = const(int, 0)
DEBUG 2022-02-14 16:38:14,332 on stmt: $22compare_op.8 = b < $const20.7
DEBUG 2022-02-14 16:38:14,332 on stmt: bool24 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:38:14,332 on stmt: $24pred = call bool24($22compare_op.8, func=bool24, args=(Var($22compare_op.8, numbers.py:219),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:14,332 on stmt: branch $24pred, 26, 98
DEBUG 2022-02-14 16:38:14,333 ==== SSA block rewrite pass on 26
DEBUG 2022-02-14 16:38:14,333 Running <numba.core.ssa._FreshVarHandler object at 0x7fa045dd2eb0>
DEBUG 2022-02-14 16:38:14,333 on stmt: invert = const(bool, True)
DEBUG 2022-02-14 16:38:14,333 on stmt: exp = unary(fn=<built-in function neg>, value=b)
DEBUG 2022-02-14 16:38:14,333 on stmt: $const38.4 = const(int, 0)
DEBUG 2022-02-14 16:38:14,333 on stmt: $40compare_op.5 = exp < $const38.4
DEBUG 2022-02-14 16:38:14,333 on stmt: bool42 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:38:14,333 on stmt: $42pred = call bool42($40compare_op.5, func=bool42, args=(Var($40compare_op.5, numbers.py:222),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:14,333 on stmt: branch $42pred, 44, 48
DEBUG 2022-02-14 16:38:14,333 ==== SSA block rewrite pass on 44
DEBUG 2022-02-14 16:38:14,333 Running <numba.core.ssa._FreshVarHandler object at 0x7fa045dd2eb0>
DEBUG 2022-02-14 16:38:14,333 on stmt: $44load_global.0 = global(OverflowError: <class 'OverflowError'>)
DEBUG 2022-02-14 16:38:14,333 on stmt: <static> raise <class 'OverflowError'>
DEBUG 2022-02-14 16:38:14,333 ==== SSA block rewrite pass on 48
DEBUG 2022-02-14 16:38:14,333 Running <numba.core.ssa._FreshVarHandler object at 0x7fa045dd2eb0>
DEBUG 2022-02-14 16:38:14,333 on stmt: $48load_deref.0 = freevar(is_integer: False)
DEBUG 2022-02-14 16:38:14,334 on stmt: bool50 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:38:14,334 on stmt: $50pred = call bool50($48load_deref.0, func=bool50, args=(Var($48load_deref.0, numbers.py:224),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:14,334 on stmt: jump 106
DEBUG 2022-02-14 16:38:14,334 ==== SSA block rewrite pass on 98
DEBUG 2022-02-14 16:38:14,334 Running <numba.core.ssa._FreshVarHandler object at 0x7fa045dd2eb0>
DEBUG 2022-02-14 16:38:14,334 on stmt: invert.1 = const(bool, False)
DEBUG 2022-02-14 16:38:14,334 on stmt: exp.1 = b
DEBUG 2022-02-14 16:38:14,334 on stmt: jump 106
DEBUG 2022-02-14 16:38:14,334 ==== SSA block rewrite pass on 106
DEBUG 2022-02-14 16:38:14,334 Running <numba.core.ssa._FreshVarHandler object at 0x7fa045dd2eb0>
DEBUG 2022-02-14 16:38:14,334 on stmt: invert.2 = phi(incoming_values=[Var(invert, numbers.py:220), Var(invert.1, numbers.py:233)], incoming_blocks=[48, 98])
DEBUG 2022-02-14 16:38:14,334 on stmt: exp.3 = phi(incoming_values=[Var(exp, numbers.py:221), Var(exp.1, numbers.py:234)], incoming_blocks=[48, 98])
DEBUG 2022-02-14 16:38:14,334 on stmt: $const108.1 = const(int, 65536)
DEBUG 2022-02-14 16:38:14,334 on stmt: $110compare_op.2 = exp.3 > $const108.1
DEBUG 2022-02-14 16:38:14,334 on stmt: bool112 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:38:14,334 on stmt: $112pred = call bool112($110compare_op.2, func=bool112, args=(Var($110compare_op.2, numbers.py:235),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:14,334 on stmt: branch $112pred, 114, 130
DEBUG 2022-02-14 16:38:14,334 ==== SSA block rewrite pass on 114
DEBUG 2022-02-14 16:38:14,334 Running <numba.core.ssa._FreshVarHandler object at 0x7fa045dd2eb0>
DEBUG 2022-02-14 16:38:14,334 on stmt: $114load_global.0 = global(math: <module 'math' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/lib-dynload/math.cpython-39-x86_64-linux-gnu.so'>)
DEBUG 2022-02-14 16:38:14,334 on stmt: $116load_method.1 = getattr(value=$114load_global.0, attr=pow)
DEBUG 2022-02-14 16:38:14,335 on stmt: $120load_global.3 = global(float: <class 'float'>)
DEBUG 2022-02-14 16:38:14,335 on stmt: $124call_function.5 = call $120load_global.3(b, func=$120load_global.3, args=[Var(b, numbers.py:217)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:14,335 on stmt: $126call_method.6 = call $116load_method.1(a.1, $124call_function.5, func=$116load_method.1, args=[Var(a.1, numbers.py:218), Var($124call_function.5, numbers.py:237)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:14,335 on stmt: $128return_value.7 = cast(value=$126call_method.6)
DEBUG 2022-02-14 16:38:14,335 on stmt: return $128return_value.7
DEBUG 2022-02-14 16:38:14,335 ==== SSA block rewrite pass on 130
DEBUG 2022-02-14 16:38:14,335 Running <numba.core.ssa._FreshVarHandler object at 0x7fa045dd2eb0>
DEBUG 2022-02-14 16:38:14,335 on stmt: exp.4 = phi(incoming_values=[Var(exp.3, numbers.py:235), Var(exp.2, numbers.py:241)], incoming_blocks=[106, 154])
DEBUG 2022-02-14 16:38:14,335 on stmt: a.1.2 = phi(incoming_values=[Var(a.1, numbers.py:218), Var(a.1.1, numbers.py:242)], incoming_blocks=[106, 154])
DEBUG 2022-02-14 16:38:14,335 on stmt: $const132.1 = const(int, 0)
DEBUG 2022-02-14 16:38:14,335 on stmt: $134compare_op.2 = exp.4 != $const132.1
DEBUG 2022-02-14 16:38:14,335 on stmt: bool136 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:38:14,335 on stmt: $136pred = call bool136($134compare_op.2, func=bool136, args=(Var($134compare_op.2, numbers.py:238),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:14,335 on stmt: branch $136pred, 138, 172
DEBUG 2022-02-14 16:38:14,335 ==== SSA block rewrite pass on 138
DEBUG 2022-02-14 16:38:14,335 Running <numba.core.ssa._FreshVarHandler object at 0x7fa045dd2eb0>
DEBUG 2022-02-14 16:38:14,335 on stmt: $const140.1 = const(int, 1)
DEBUG 2022-02-14 16:38:14,335 on stmt: $142binary_and.2 = exp.4 & $const140.1
DEBUG 2022-02-14 16:38:14,335 on stmt: bool144 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:38:14,335 on stmt: $144pred = call bool144($142binary_and.2, func=bool144, args=(Var($142binary_and.2, numbers.py:239),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:14,336 on stmt: branch $144pred, 146, 154
DEBUG 2022-02-14 16:38:14,336 ==== SSA block rewrite pass on 146
DEBUG 2022-02-14 16:38:14,336 Running <numba.core.ssa._FreshVarHandler object at 0x7fa045dd2eb0>
DEBUG 2022-02-14 16:38:14,336 on stmt: $150inplace_multiply.2 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=r, rhs=a.1.2, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:38:14,336 on stmt: r = $150inplace_multiply.2
DEBUG 2022-02-14 16:38:14,336 replaced with: r.1 = $150inplace_multiply.2
DEBUG 2022-02-14 16:38:14,336 on stmt: jump 154
DEBUG 2022-02-14 16:38:14,336 ==== SSA block rewrite pass on 154
DEBUG 2022-02-14 16:38:14,336 Running <numba.core.ssa._FreshVarHandler object at 0x7fa045dd2eb0>
DEBUG 2022-02-14 16:38:14,336 on stmt: $const156.1 = const(int, 1)
DEBUG 2022-02-14 16:38:14,336 on stmt: $158inplace_rshift.2 = inplace_binop(fn=<built-in function irshift>, immutable_fn=<built-in function rshift>, lhs=exp.4, rhs=$const156.1, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:38:14,336 on stmt: exp.2 = $158inplace_rshift.2
DEBUG 2022-02-14 16:38:14,336 on stmt: $166inplace_multiply.5 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=a.1.2, rhs=a.1.2, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:38:14,336 on stmt: a.1.1 = $166inplace_multiply.5
DEBUG 2022-02-14 16:38:14,336 on stmt: jump 130
DEBUG 2022-02-14 16:38:14,336 ==== SSA block rewrite pass on 172
DEBUG 2022-02-14 16:38:14,336 Running <numba.core.ssa._FreshVarHandler object at 0x7fa045dd2eb0>
DEBUG 2022-02-14 16:38:14,336 on stmt: bool174 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:38:14,336 on stmt: $174pred = call bool174(invert.2, func=bool174, args=(Var(invert.2, numbers.py:244),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:14,336 on stmt: branch $174pred, 176, 184
DEBUG 2022-02-14 16:38:14,336 ==== SSA block rewrite pass on 176
DEBUG 2022-02-14 16:38:14,336 Running <numba.core.ssa._FreshVarHandler object at 0x7fa045dd2eb0>
DEBUG 2022-02-14 16:38:14,336 on stmt: $const176.0 = const(float, 1.0)
DEBUG 2022-02-14 16:38:14,336 on stmt: $180binary_true_divide.2 = $const176.0 / r
DEBUG 2022-02-14 16:38:14,337 on stmt: $182return_value.3 = cast(value=$180binary_true_divide.2)
DEBUG 2022-02-14 16:38:14,337 on stmt: return $182return_value.3
DEBUG 2022-02-14 16:38:14,337 ==== SSA block rewrite pass on 184
DEBUG 2022-02-14 16:38:14,337 Running <numba.core.ssa._FreshVarHandler object at 0x7fa045dd2eb0>
DEBUG 2022-02-14 16:38:14,337 on stmt: $186return_value.1 = cast(value=r)
DEBUG 2022-02-14 16:38:14,337 on stmt: return $186return_value.1
DEBUG 2022-02-14 16:38:14,337 Replaced assignments: defaultdict(<class 'list'>,
            {0: [<numba.core.ir.Assign object at 0x7fa045dd2df0>],
             146: [<numba.core.ir.Assign object at 0x7fa046f644c0>]})
DEBUG 2022-02-14 16:38:14,337 ==== SSA block rewrite pass on 0
DEBUG 2022-02-14 16:38:14,337 Running <numba.core.ssa._FixSSAVars object at 0x7fa046196820>
DEBUG 2022-02-14 16:38:14,337 on stmt: a = arg(0, name=a)
DEBUG 2022-02-14 16:38:14,337 on stmt: b = arg(1, name=b)
DEBUG 2022-02-14 16:38:14,337 on stmt: $2load_deref.0 = freevar(tp: float64)
DEBUG 2022-02-14 16:38:14,337 on stmt: $const4.1 = const(int, 1)
DEBUG 2022-02-14 16:38:14,337 on stmt: r = call $2load_deref.0($const4.1, func=$2load_deref.0, args=[Var($const4.1, numbers.py:217)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:14,337 on stmt: $10load_deref.3 = freevar(tp: float64)
DEBUG 2022-02-14 16:38:14,337 on stmt: a.1 = call $10load_deref.3(a, func=$10load_deref.3, args=[Var(a, numbers.py:217)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:14,337 on stmt: $const20.7 = const(int, 0)
DEBUG 2022-02-14 16:38:14,337 on stmt: $22compare_op.8 = b < $const20.7
DEBUG 2022-02-14 16:38:14,337 on stmt: bool24 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:38:14,337 on stmt: $24pred = call bool24($22compare_op.8, func=bool24, args=(Var($22compare_op.8, numbers.py:219),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:14,337 on stmt: branch $24pred, 26, 98
DEBUG 2022-02-14 16:38:14,338 ==== SSA block rewrite pass on 26
DEBUG 2022-02-14 16:38:14,338 Running <numba.core.ssa._FixSSAVars object at 0x7fa046196820>
DEBUG 2022-02-14 16:38:14,338 on stmt: invert = const(bool, True)
DEBUG 2022-02-14 16:38:14,338 on stmt: exp = unary(fn=<built-in function neg>, value=b)
DEBUG 2022-02-14 16:38:14,338 on stmt: $const38.4 = const(int, 0)
DEBUG 2022-02-14 16:38:14,338 on stmt: $40compare_op.5 = exp < $const38.4
DEBUG 2022-02-14 16:38:14,338 on stmt: bool42 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:38:14,338 on stmt: $42pred = call bool42($40compare_op.5, func=bool42, args=(Var($40compare_op.5, numbers.py:222),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:14,338 on stmt: branch $42pred, 44, 48
DEBUG 2022-02-14 16:38:14,338 ==== SSA block rewrite pass on 44
DEBUG 2022-02-14 16:38:14,338 Running <numba.core.ssa._FixSSAVars object at 0x7fa046196820>
DEBUG 2022-02-14 16:38:14,338 on stmt: $44load_global.0 = global(OverflowError: <class 'OverflowError'>)
DEBUG 2022-02-14 16:38:14,338 on stmt: <static> raise <class 'OverflowError'>
DEBUG 2022-02-14 16:38:14,338 ==== SSA block rewrite pass on 48
DEBUG 2022-02-14 16:38:14,338 Running <numba.core.ssa._FixSSAVars object at 0x7fa046196820>
DEBUG 2022-02-14 16:38:14,338 on stmt: $48load_deref.0 = freevar(is_integer: False)
DEBUG 2022-02-14 16:38:14,338 on stmt: bool50 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:38:14,338 on stmt: $50pred = call bool50($48load_deref.0, func=bool50, args=(Var($48load_deref.0, numbers.py:224),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:14,338 on stmt: jump 106
DEBUG 2022-02-14 16:38:14,338 ==== SSA block rewrite pass on 98
DEBUG 2022-02-14 16:38:14,338 Running <numba.core.ssa._FixSSAVars object at 0x7fa046196820>
DEBUG 2022-02-14 16:38:14,338 on stmt: invert.1 = const(bool, False)
DEBUG 2022-02-14 16:38:14,338 on stmt: exp.1 = b
DEBUG 2022-02-14 16:38:14,338 on stmt: jump 106
DEBUG 2022-02-14 16:38:14,339 ==== SSA block rewrite pass on 106
DEBUG 2022-02-14 16:38:14,339 Running <numba.core.ssa._FixSSAVars object at 0x7fa046196820>
DEBUG 2022-02-14 16:38:14,339 on stmt: invert.2 = phi(incoming_values=[Var(invert, numbers.py:220), Var(invert.1, numbers.py:233)], incoming_blocks=[48, 98])
DEBUG 2022-02-14 16:38:14,339 on stmt: exp.3 = phi(incoming_values=[Var(exp, numbers.py:221), Var(exp.1, numbers.py:234)], incoming_blocks=[48, 98])
DEBUG 2022-02-14 16:38:14,339 on stmt: $const108.1 = const(int, 65536)
DEBUG 2022-02-14 16:38:14,339 on stmt: $110compare_op.2 = exp.3 > $const108.1
DEBUG 2022-02-14 16:38:14,339 on stmt: bool112 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:38:14,339 on stmt: $112pred = call bool112($110compare_op.2, func=bool112, args=(Var($110compare_op.2, numbers.py:235),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:14,339 on stmt: branch $112pred, 114, 130
DEBUG 2022-02-14 16:38:14,339 ==== SSA block rewrite pass on 114
DEBUG 2022-02-14 16:38:14,339 Running <numba.core.ssa._FixSSAVars object at 0x7fa046196820>
DEBUG 2022-02-14 16:38:14,339 on stmt: $114load_global.0 = global(math: <module 'math' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/lib-dynload/math.cpython-39-x86_64-linux-gnu.so'>)
DEBUG 2022-02-14 16:38:14,339 on stmt: $116load_method.1 = getattr(value=$114load_global.0, attr=pow)
DEBUG 2022-02-14 16:38:14,339 on stmt: $120load_global.3 = global(float: <class 'float'>)
DEBUG 2022-02-14 16:38:14,339 on stmt: $124call_function.5 = call $120load_global.3(b, func=$120load_global.3, args=[Var(b, numbers.py:217)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:14,339 on stmt: $126call_method.6 = call $116load_method.1(a.1, $124call_function.5, func=$116load_method.1, args=[Var(a.1, numbers.py:218), Var($124call_function.5, numbers.py:237)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:14,339 on stmt: $128return_value.7 = cast(value=$126call_method.6)
DEBUG 2022-02-14 16:38:14,339 on stmt: return $128return_value.7
DEBUG 2022-02-14 16:38:14,339 ==== SSA block rewrite pass on 130
DEBUG 2022-02-14 16:38:14,339 Running <numba.core.ssa._FixSSAVars object at 0x7fa046196820>
DEBUG 2022-02-14 16:38:14,339 on stmt: exp.4 = phi(incoming_values=[Var(exp.3, numbers.py:235), Var(exp.2, numbers.py:241)], incoming_blocks=[106, 154])
DEBUG 2022-02-14 16:38:14,340 on stmt: a.1.2 = phi(incoming_values=[Var(a.1, numbers.py:218), Var(a.1.1, numbers.py:242)], incoming_blocks=[106, 154])
DEBUG 2022-02-14 16:38:14,340 on stmt: $const132.1 = const(int, 0)
DEBUG 2022-02-14 16:38:14,340 on stmt: $134compare_op.2 = exp.4 != $const132.1
DEBUG 2022-02-14 16:38:14,340 on stmt: bool136 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:38:14,340 on stmt: $136pred = call bool136($134compare_op.2, func=bool136, args=(Var($134compare_op.2, numbers.py:238),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:14,340 on stmt: branch $136pred, 138, 172
DEBUG 2022-02-14 16:38:14,340 ==== SSA block rewrite pass on 138
DEBUG 2022-02-14 16:38:14,340 Running <numba.core.ssa._FixSSAVars object at 0x7fa046196820>
DEBUG 2022-02-14 16:38:14,340 on stmt: $const140.1 = const(int, 1)
DEBUG 2022-02-14 16:38:14,340 on stmt: $142binary_and.2 = exp.4 & $const140.1
DEBUG 2022-02-14 16:38:14,340 on stmt: bool144 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:38:14,340 on stmt: $144pred = call bool144($142binary_and.2, func=bool144, args=(Var($142binary_and.2, numbers.py:239),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:14,340 on stmt: branch $144pred, 146, 154
DEBUG 2022-02-14 16:38:14,340 ==== SSA block rewrite pass on 146
DEBUG 2022-02-14 16:38:14,340 Running <numba.core.ssa._FixSSAVars object at 0x7fa046196820>
DEBUG 2022-02-14 16:38:14,340 on stmt: $150inplace_multiply.2 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=r, rhs=a.1.2, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:38:14,340 find_def var='r' stmt=$150inplace_multiply.2 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=r, rhs=a.1.2, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:38:14,340 find_def_from_top label 146
DEBUG 2022-02-14 16:38:14,340 idom 138 from label 146
DEBUG 2022-02-14 16:38:14,340 find_def_from_bottom label 138
DEBUG 2022-02-14 16:38:14,340 find_def_from_top label 138
DEBUG 2022-02-14 16:38:14,340 idom 130 from label 138
DEBUG 2022-02-14 16:38:14,340 find_def_from_bottom label 130
DEBUG 2022-02-14 16:38:14,340 find_def_from_top label 130
DEBUG 2022-02-14 16:38:14,340 insert phi node r.2 = phi(incoming_values=[], incoming_blocks=[]) at 130
DEBUG 2022-02-14 16:38:14,341 find_def_from_bottom label 106
DEBUG 2022-02-14 16:38:14,341 find_def_from_top label 106
DEBUG 2022-02-14 16:38:14,341 idom 0 from label 106
DEBUG 2022-02-14 16:38:14,341 find_def_from_bottom label 0
DEBUG 2022-02-14 16:38:14,341 incoming_def r = call $2load_deref.0($const4.1, func=$2load_deref.0, args=[Var($const4.1, numbers.py:217)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:14,341 find_def_from_bottom label 154
DEBUG 2022-02-14 16:38:14,341 find_def_from_top label 154
DEBUG 2022-02-14 16:38:14,341 insert phi node r.3 = phi(incoming_values=[], incoming_blocks=[]) at 154
DEBUG 2022-02-14 16:38:14,341 find_def_from_bottom label 138
DEBUG 2022-02-14 16:38:14,341 find_def_from_top label 138
DEBUG 2022-02-14 16:38:14,341 idom 130 from label 138
DEBUG 2022-02-14 16:38:14,341 find_def_from_bottom label 130
DEBUG 2022-02-14 16:38:14,341 incoming_def r.2 = phi(incoming_values=[Var(r, numbers.py:217)], incoming_blocks=[106])
DEBUG 2022-02-14 16:38:14,341 find_def_from_bottom label 146
DEBUG 2022-02-14 16:38:14,341 incoming_def r.1 = $150inplace_multiply.2
DEBUG 2022-02-14 16:38:14,341 incoming_def r.3 = phi(incoming_values=[Var(r.2, numbers.py:240), Var(r.1, numbers.py:240)], incoming_blocks=[138, 146])
DEBUG 2022-02-14 16:38:14,341 replaced with: $150inplace_multiply.2 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=r.2, rhs=a.1.2, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:38:14,341 on stmt: r.1 = $150inplace_multiply.2
DEBUG 2022-02-14 16:38:14,341 on stmt: jump 154
DEBUG 2022-02-14 16:38:14,341 ==== SSA block rewrite pass on 154
DEBUG 2022-02-14 16:38:14,341 Running <numba.core.ssa._FixSSAVars object at 0x7fa046196820>
DEBUG 2022-02-14 16:38:14,341 on stmt: $const156.1 = const(int, 1)
DEBUG 2022-02-14 16:38:14,341 on stmt: $158inplace_rshift.2 = inplace_binop(fn=<built-in function irshift>, immutable_fn=<built-in function rshift>, lhs=exp.4, rhs=$const156.1, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:38:14,341 on stmt: exp.2 = $158inplace_rshift.2
DEBUG 2022-02-14 16:38:14,341 on stmt: $166inplace_multiply.5 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=a.1.2, rhs=a.1.2, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:38:14,342 on stmt: a.1.1 = $166inplace_multiply.5
DEBUG 2022-02-14 16:38:14,342 on stmt: jump 130
DEBUG 2022-02-14 16:38:14,342 ==== SSA block rewrite pass on 172
DEBUG 2022-02-14 16:38:14,342 Running <numba.core.ssa._FixSSAVars object at 0x7fa046196820>
DEBUG 2022-02-14 16:38:14,342 on stmt: bool174 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:38:14,342 on stmt: $174pred = call bool174(invert.2, func=bool174, args=(Var(invert.2, numbers.py:244),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:14,342 on stmt: branch $174pred, 176, 184
DEBUG 2022-02-14 16:38:14,342 ==== SSA block rewrite pass on 176
DEBUG 2022-02-14 16:38:14,342 Running <numba.core.ssa._FixSSAVars object at 0x7fa046196820>
DEBUG 2022-02-14 16:38:14,342 on stmt: $const176.0 = const(float, 1.0)
DEBUG 2022-02-14 16:38:14,342 on stmt: $180binary_true_divide.2 = $const176.0 / r
DEBUG 2022-02-14 16:38:14,342 find_def var='r' stmt=$180binary_true_divide.2 = $const176.0 / r
DEBUG 2022-02-14 16:38:14,342 find_def_from_top label 176
DEBUG 2022-02-14 16:38:14,342 idom 172 from label 176
DEBUG 2022-02-14 16:38:14,342 find_def_from_bottom label 172
DEBUG 2022-02-14 16:38:14,342 find_def_from_top label 172
DEBUG 2022-02-14 16:38:14,342 idom 130 from label 172
DEBUG 2022-02-14 16:38:14,342 find_def_from_bottom label 130
DEBUG 2022-02-14 16:38:14,342 replaced with: $180binary_true_divide.2 = $const176.0 / r.2
DEBUG 2022-02-14 16:38:14,342 on stmt: $182return_value.3 = cast(value=$180binary_true_divide.2)
DEBUG 2022-02-14 16:38:14,342 on stmt: return $182return_value.3
DEBUG 2022-02-14 16:38:14,342 ==== SSA block rewrite pass on 184
DEBUG 2022-02-14 16:38:14,342 Running <numba.core.ssa._FixSSAVars object at 0x7fa046196820>
DEBUG 2022-02-14 16:38:14,343 on stmt: $186return_value.1 = cast(value=r)
DEBUG 2022-02-14 16:38:14,343 find_def var='r' stmt=$186return_value.1 = cast(value=r)
DEBUG 2022-02-14 16:38:14,343 find_def_from_top label 184
DEBUG 2022-02-14 16:38:14,343 idom 172 from label 184
DEBUG 2022-02-14 16:38:14,343 find_def_from_bottom label 172
DEBUG 2022-02-14 16:38:14,343 find_def_from_top label 172
DEBUG 2022-02-14 16:38:14,343 idom 130 from label 172
DEBUG 2022-02-14 16:38:14,343 find_def_from_bottom label 130
DEBUG 2022-02-14 16:38:14,343 replaced with: $186return_value.1 = cast(value=r.2)
DEBUG 2022-02-14 16:38:14,343 on stmt: return $186return_value.1
DEBUG 2022-02-14 16:38:17,975 bytecode dump:
>          0	NOP(arg=None, lineno=83)
           2	LOAD_FAST(arg=1, lineno=83)
           4	LOAD_CONST(arg=1, lineno=83)
           6	BINARY_SUBSCR(arg=None, lineno=83)
           8	STORE_FAST(arg=7, lineno=83)
          10	LOAD_FAST(arg=0, lineno=84)
          12	LOAD_CONST(arg=1, lineno=84)
          14	LOAD_CONST(arg=0, lineno=84)
          16	LOAD_CONST(arg=0, lineno=84)
          18	BUILD_SLICE(arg=2, lineno=84)
          20	BUILD_TUPLE(arg=2, lineno=84)
          22	BINARY_SUBSCR(arg=None, lineno=84)
          24	STORE_FAST(arg=8, lineno=84)
          26	LOAD_FAST(arg=1, lineno=88)
          28	LOAD_CONST(arg=2, lineno=88)
          30	BINARY_SUBSCR(arg=None, lineno=88)
          32	STORE_FAST(arg=9, lineno=88)
          34	LOAD_FAST(arg=0, lineno=89)
          36	LOAD_CONST(arg=2, lineno=89)
          38	LOAD_CONST(arg=0, lineno=89)
          40	LOAD_CONST(arg=0, lineno=89)
          42	BUILD_SLICE(arg=2, lineno=89)
          44	BUILD_TUPLE(arg=2, lineno=89)
          46	BINARY_SUBSCR(arg=None, lineno=89)
          48	STORE_FAST(arg=10, lineno=89)
          50	LOAD_FAST(arg=0, lineno=91)
          52	LOAD_ATTR(arg=0, lineno=91)
          54	LOAD_CONST(arg=1, lineno=91)
          56	BINARY_SUBSCR(arg=None, lineno=91)
          58	STORE_FAST(arg=11, lineno=91)
          60	LOAD_CONST(arg=3, lineno=92)
          62	LOAD_FAST(arg=2, lineno=92)
          64	LOAD_METHOD(arg=1, lineno=92)
          66	CALL_METHOD(arg=0, lineno=92)
          68	BINARY_MULTIPLY(arg=None, lineno=92)
          70	LOAD_CONST(arg=2, lineno=92)
          72	BINARY_ADD(arg=None, lineno=92)
          74	STORE_FAST(arg=12, lineno=92)
          76	LOAD_FAST(arg=12, lineno=93)
          78	LOAD_CONST(arg=3, lineno=93)
          80	LOAD_FAST(arg=3, lineno=93)
          82	BINARY_MULTIPLY(arg=None, lineno=93)
          84	BINARY_ADD(arg=None, lineno=93)
          86	LOAD_FAST(arg=4, lineno=93)
          88	BINARY_ADD(arg=None, lineno=93)
          90	LOAD_CONST(arg=2, lineno=93)
          92	BINARY_ADD(arg=None, lineno=93)
          94	STORE_FAST(arg=13, lineno=93)
          96	LOAD_GLOBAL(arg=2, lineno=95)
          98	LOAD_METHOD(arg=3, lineno=95)
         100	LOAD_GLOBAL(arg=2, lineno=95)
         102	LOAD_METHOD(arg=4, lineno=95)
         104	LOAD_FAST(arg=3, lineno=95)
         106	LOAD_CONST(arg=2, lineno=95)
         108	BUILD_LIST(arg=2, lineno=95)
         110	CALL_METHOD(arg=1, lineno=95)
         112	LOAD_FAST(arg=2, lineno=95)
         114	BUILD_TUPLE(arg=2, lineno=95)
         116	CALL_METHOD(arg=1, lineno=95)
         118	STORE_FAST(arg=14, lineno=95)
         120	LOAD_GLOBAL(arg=2, lineno=96)
         122	LOAD_METHOD(arg=5, lineno=96)
         124	LOAD_FAST(arg=14, lineno=96)
         126	LOAD_CONST(arg=2, lineno=96)
         128	BINARY_ADD(arg=None, lineno=96)
         130	CALL_METHOD(arg=1, lineno=96)
         132	STORE_FAST(arg=15, lineno=96)
         134	LOAD_FAST(arg=14, lineno=98)
         136	LOAD_METHOD(arg=6, lineno=98)
         138	CALL_METHOD(arg=0, lineno=98)
         140	LOAD_FAST(arg=4, lineno=98)
         142	BINARY_ADD(arg=None, lineno=98)
         144	STORE_FAST(arg=16, lineno=98)
         146	LOAD_GLOBAL(arg=7, lineno=99)
         148	LOAD_FAST(arg=16, lineno=99)
         150	CALL_FUNCTION(arg=1, lineno=99)
         152	STORE_FAST(arg=17, lineno=99)
         154	LOAD_GLOBAL(arg=2, lineno=101)
         156	LOAD_ATTR(arg=8, lineno=101)
         158	LOAD_CONST(arg=3, lineno=101)
         160	LOAD_FAST(arg=3, lineno=101)
         162	BINARY_MULTIPLY(arg=None, lineno=101)
         164	LOAD_FAST(arg=4, lineno=101)
         166	BINARY_ADD(arg=None, lineno=101)
         168	LOAD_CONST(arg=3, lineno=101)
         170	BINARY_ADD(arg=None, lineno=101)
         172	LOAD_GLOBAL(arg=2, lineno=101)
         174	LOAD_ATTR(arg=9, lineno=101)
         176	LOAD_CONST(arg=4, lineno=101)
         178	CALL_FUNCTION_KW(arg=2, lineno=101)
         180	STORE_FAST(arg=18, lineno=101)
         182	LOAD_GLOBAL(arg=10, lineno=102)
         184	LOAD_METHOD(arg=11, lineno=102)
         186	LOAD_FAST(arg=15, lineno=102)
         188	CALL_METHOD(arg=1, lineno=102)
         190	GET_ITER(arg=None, lineno=102)
>        192	FOR_ITER(arg=470, lineno=102)
         196	STORE_FAST(arg=19, lineno=102)
         198	LOAD_GLOBAL(arg=2, lineno=104)
         200	LOAD_ATTR(arg=8, lineno=104)
         202	LOAD_CONST(arg=3, lineno=104)
         204	LOAD_FAST(arg=3, lineno=104)
         206	BINARY_MULTIPLY(arg=None, lineno=104)
         208	LOAD_FAST(arg=4, lineno=104)
         210	BINARY_ADD(arg=None, lineno=104)
         212	LOAD_CONST(arg=3, lineno=104)
         214	BINARY_ADD(arg=None, lineno=104)
         216	LOAD_GLOBAL(arg=2, lineno=104)
         218	LOAD_ATTR(arg=9, lineno=104)
         220	LOAD_CONST(arg=4, lineno=104)
         222	CALL_FUNCTION_KW(arg=2, lineno=104)
         224	STORE_FAST(arg=20, lineno=104)
         226	LOAD_GLOBAL(arg=12, lineno=106)
         228	LOAD_FAST(arg=19, lineno=106)
         230	LOAD_FAST(arg=14, lineno=106)
         232	CALL_FUNCTION(arg=2, lineno=106)
         234	STORE_FAST(arg=21, lineno=106)
         236	LOAD_FAST(arg=21, lineno=107)
         238	LOAD_METHOD(arg=1, lineno=107)
         240	CALL_METHOD(arg=0, lineno=107)
         242	STORE_FAST(arg=22, lineno=107)
         244	LOAD_CONST(arg=5, lineno=109)
         246	STORE_FAST(arg=23, lineno=109)
         248	LOAD_GLOBAL(arg=13, lineno=110)
         250	LOAD_CONST(arg=2, lineno=110)
         252	LOAD_FAST(arg=11, lineno=110)
         254	LOAD_CONST(arg=3, lineno=110)
         256	BINARY_FLOOR_DIVIDE(arg=None, lineno=110)
         258	CALL_FUNCTION(arg=2, lineno=110)
         260	GET_ITER(arg=None, lineno=110)
>        262	FOR_ITER(arg=30, lineno=110)
         264	STORE_FAST(arg=24, lineno=110)
         266	LOAD_FAST(arg=23, lineno=111)
         268	LOAD_FAST(arg=17, lineno=111)
         270	LOAD_FAST(arg=14, lineno=111)
         272	LOAD_FAST(arg=24, lineno=111)
         274	BINARY_SUBSCR(arg=None, lineno=111)
         276	LOAD_FAST(arg=21, lineno=111)
         278	LOAD_FAST(arg=24, lineno=111)
         280	BINARY_SUBSCR(arg=None, lineno=111)
         282	BUILD_TUPLE(arg=2, lineno=111)
         284	BINARY_SUBSCR(arg=None, lineno=111)
         286	INPLACE_MULTIPLY(arg=None, lineno=111)
         288	STORE_FAST(arg=23, lineno=111)
         290	JUMP_ABSOLUTE(arg=262, lineno=111)
>        294	LOAD_FAST(arg=6, lineno=113)
         296	POP_JUMP_IF_FALSE(arg=314, lineno=113)
         300	LOAD_CONST(arg=3, lineno=114)
         302	LOAD_FAST(arg=21, lineno=114)
         304	BINARY_MULTIPLY(arg=None, lineno=114)
         306	LOAD_FAST(arg=14, lineno=114)
         308	BINARY_SUBTRACT(arg=None, lineno=114)
         310	STORE_FAST(arg=25, lineno=114)
         312	JUMP_FORWARD(arg=4, lineno=114)
>        314	LOAD_FAST(arg=21, lineno=116)
         316	STORE_FAST(arg=25, lineno=116)
>        318	LOAD_GLOBAL(arg=14, lineno=118)
         320	LOAD_FAST(arg=25, lineno=118)
         322	LOAD_FAST(arg=0, lineno=118)
         324	LOAD_FAST(arg=1, lineno=118)
         326	LOAD_FAST(arg=8, lineno=118)
         328	CALL_FUNCTION(arg=4, lineno=118)
         330	UNPACK_SEQUENCE(arg=4, lineno=118)
         332	STORE_FAST(arg=26, lineno=118)
         334	STORE_FAST(arg=27, lineno=118)
         336	STORE_FAST(arg=28, lineno=118)
         338	STORE_FAST(arg=29, lineno=118)
         340	LOAD_GLOBAL(arg=15, lineno=120)
         342	LOAD_FAST(arg=26, lineno=120)
         344	CALL_FUNCTION(arg=1, lineno=120)
         346	STORE_FAST(arg=30, lineno=120)
         348	LOAD_FAST(arg=21, lineno=122)
         350	LOAD_CONST(arg=1, lineno=122)
         352	BINARY_SUBSCR(arg=None, lineno=122)
         354	LOAD_CONST(arg=1, lineno=122)
         356	COMPARE_OP(arg=2, lineno=122)
         358	POP_JUMP_IF_FALSE(arg=450, lineno=122)
         362	LOAD_FAST(arg=21, lineno=122)
         364	LOAD_CONST(arg=2, lineno=122)
         366	BINARY_SUBSCR(arg=None, lineno=122)
         368	LOAD_CONST(arg=1, lineno=122)
         370	COMPARE_OP(arg=2, lineno=122)
         372	POP_JUMP_IF_FALSE(arg=450, lineno=122)
         376	LOAD_GLOBAL(arg=16, lineno=123)
         378	LOAD_FAST(arg=25, lineno=123)
         380	LOAD_FAST(arg=10, lineno=123)
         382	CALL_FUNCTION(arg=2, lineno=123)
         384	STORE_FAST(arg=31, lineno=123)
         386	LOAD_CONST(arg=6, lineno=124)
         388	LOAD_FAST(arg=12, lineno=124)
         390	LOAD_CONST(arg=3, lineno=124)
         392	BINARY_FLOOR_DIVIDE(arg=None, lineno=124)
         394	LOAD_FAST(arg=22, lineno=124)
         396	BINARY_SUBTRACT(arg=None, lineno=124)
         398	BINARY_POWER(arg=None, lineno=124)
         400	STORE_FAST(arg=32, lineno=124)
         402	LOAD_GLOBAL(arg=17, lineno=125)
         404	LOAD_FAST(arg=30, lineno=125)
         406	LOAD_FAST(arg=26, lineno=125)
         408	LOAD_FAST(arg=27, lineno=125)
         410	LOAD_FAST(arg=28, lineno=125)
         412	LOAD_FAST(arg=12, lineno=125)
         414	LOAD_FAST(arg=9, lineno=125)
         416	LOAD_FAST(arg=31, lineno=125)
         418	CALL_FUNCTION(arg=7, lineno=125)
         420	LOAD_FAST(arg=12, lineno=125)
         422	BINARY_SUBSCR(arg=None, lineno=125)
         424	STORE_FAST(arg=33, lineno=125)
         426	LOAD_FAST(arg=18, lineno=126)
         428	LOAD_CONST(arg=1, lineno=126)
         430	DUP_TOP_TWO(arg=None, lineno=126)
         432	BINARY_SUBSCR(arg=None, lineno=126)
         434	LOAD_FAST(arg=23, lineno=126)
         436	LOAD_FAST(arg=32, lineno=126)
         438	BINARY_MULTIPLY(arg=None, lineno=126)
         440	LOAD_FAST(arg=33, lineno=126)
         442	BINARY_MULTIPLY(arg=None, lineno=126)
         444	INPLACE_ADD(arg=None, lineno=126)
         446	ROT_THREE(arg=None, lineno=126)
         448	STORE_SUBSCR(arg=None, lineno=126)
>        450	LOAD_GLOBAL(arg=18, lineno=128)
         452	LOAD_FAST(arg=30, lineno=128)
         454	LOAD_FAST(arg=26, lineno=128)
         456	LOAD_FAST(arg=27, lineno=128)
         458	LOAD_FAST(arg=28, lineno=128)
         460	LOAD_FAST(arg=13, lineno=128)
         462	CALL_FUNCTION(arg=5, lineno=128)
         464	STORE_FAST(arg=34, lineno=128)
         466	LOAD_GLOBAL(arg=17, lineno=129)
         468	LOAD_FAST(arg=30, lineno=129)
         470	LOAD_FAST(arg=26, lineno=129)
         472	LOAD_FAST(arg=27, lineno=129)
         474	LOAD_FAST(arg=28, lineno=129)
         476	LOAD_FAST(arg=13, lineno=129)
         478	LOAD_FAST(arg=7, lineno=129)
         480	LOAD_FAST(arg=29, lineno=129)
         482	CALL_FUNCTION(arg=7, lineno=129)
         484	STORE_FAST(arg=35, lineno=129)
         486	LOAD_GLOBAL(arg=13, lineno=131)
         488	LOAD_CONST(arg=3, lineno=131)
         490	LOAD_FAST(arg=21, lineno=131)
         492	LOAD_CONST(arg=1, lineno=131)
         494	BINARY_SUBSCR(arg=None, lineno=131)
         496	BINARY_MULTIPLY(arg=None, lineno=131)
         498	LOAD_CONST(arg=2, lineno=131)
         500	BINARY_ADD(arg=None, lineno=131)
         502	LOAD_CONST(arg=3, lineno=131)
         504	LOAD_FAST(arg=3, lineno=131)
         506	BINARY_MULTIPLY(arg=None, lineno=131)
         508	LOAD_FAST(arg=4, lineno=131)
         510	BINARY_ADD(arg=None, lineno=131)
         512	LOAD_CONST(arg=3, lineno=131)
         514	BINARY_ADD(arg=None, lineno=131)
         516	CALL_FUNCTION(arg=2, lineno=131)
         518	GET_ITER(arg=None, lineno=131)
>        520	FOR_ITER(arg=134, lineno=131)
         522	STORE_FAST(arg=36, lineno=131)
         524	LOAD_FAST(arg=12, lineno=132)
         526	LOAD_FAST(arg=36, lineno=132)
         528	BINARY_ADD(arg=None, lineno=132)
         530	STORE_FAST(arg=37, lineno=132)
         532	LOAD_CONST(arg=6, lineno=133)
         534	LOAD_FAST(arg=37, lineno=133)
         536	LOAD_CONST(arg=3, lineno=133)
         538	BINARY_FLOOR_DIVIDE(arg=None, lineno=133)
         540	LOAD_FAST(arg=22, lineno=133)
         542	BINARY_SUBTRACT(arg=None, lineno=133)
         544	BINARY_POWER(arg=None, lineno=133)
         546	STORE_FAST(arg=32, lineno=133)
         548	LOAD_FAST(arg=17, lineno=135)
         550	LOAD_FAST(arg=36, lineno=135)
         552	LOAD_CONST(arg=2, lineno=135)
         554	BINARY_SUBTRACT(arg=None, lineno=135)
         556	LOAD_CONST(arg=3, lineno=135)
         558	BINARY_FLOOR_DIVIDE(arg=None, lineno=135)
         560	LOAD_FAST(arg=21, lineno=135)
         562	LOAD_CONST(arg=1, lineno=135)
         564	BINARY_SUBSCR(arg=None, lineno=135)
         566	BUILD_TUPLE(arg=2, lineno=135)
         568	BINARY_SUBSCR(arg=None, lineno=135)
         570	LOAD_FAST(arg=23, lineno=135)
         572	BINARY_MULTIPLY(arg=None, lineno=135)
         574	STORE_FAST(arg=38, lineno=135)
         576	LOAD_FAST(arg=37, lineno=137)
         578	LOAD_CONST(arg=3, lineno=137)
         580	BINARY_MODULO(arg=None, lineno=137)
         582	LOAD_CONST(arg=1, lineno=137)
         584	COMPARE_OP(arg=2, lineno=137)
         586	POP_JUMP_IF_FALSE(arg=624, lineno=137)
         590	LOAD_FAST(arg=20, lineno=138)
         592	LOAD_FAST(arg=36, lineno=138)
         594	DUP_TOP_TWO(arg=None, lineno=138)
         596	BINARY_SUBSCR(arg=None, lineno=138)
         598	LOAD_FAST(arg=38, lineno=138)
         600	LOAD_FAST(arg=32, lineno=138)
         602	BINARY_MULTIPLY(arg=None, lineno=138)
         604	LOAD_FAST(arg=34, lineno=138)
         606	LOAD_FAST(arg=37, lineno=138)
         608	LOAD_CONST(arg=3, lineno=138)
         610	BINARY_FLOOR_DIVIDE(arg=None, lineno=138)
         612	BINARY_SUBSCR(arg=None, lineno=138)
         614	BINARY_MULTIPLY(arg=None, lineno=138)
         616	INPLACE_ADD(arg=None, lineno=138)
         618	ROT_THREE(arg=None, lineno=138)
         620	STORE_SUBSCR(arg=None, lineno=138)
         622	JUMP_FORWARD(arg=28, lineno=138)
>        624	LOAD_FAST(arg=20, lineno=140)
         626	LOAD_FAST(arg=36, lineno=140)
         628	DUP_TOP_TWO(arg=None, lineno=140)
         630	BINARY_SUBSCR(arg=None, lineno=140)
         632	LOAD_FAST(arg=38, lineno=140)
         634	LOAD_FAST(arg=32, lineno=140)
         636	BINARY_MULTIPLY(arg=None, lineno=140)
         638	LOAD_FAST(arg=35, lineno=140)
         640	LOAD_FAST(arg=37, lineno=140)
         642	BINARY_SUBSCR(arg=None, lineno=140)
         644	BINARY_MULTIPLY(arg=None, lineno=140)
         646	INPLACE_ADD(arg=None, lineno=140)
         648	ROT_THREE(arg=None, lineno=140)
         650	STORE_SUBSCR(arg=None, lineno=140)
>        652	JUMP_ABSOLUTE(arg=520, lineno=140)
>        656	LOAD_FAST(arg=18, lineno=142)
         658	LOAD_FAST(arg=20, lineno=142)
         660	INPLACE_ADD(arg=None, lineno=142)
         662	STORE_FAST(arg=18, lineno=142)
         664	JUMP_ABSOLUTE(arg=192, lineno=142)
>        666	LOAD_FAST(arg=6, lineno=144)
         668	POP_JUMP_IF_FALSE(arg=726, lineno=144)
         672	LOAD_GLOBAL(arg=13, lineno=145)
         674	LOAD_FAST(arg=18, lineno=145)
         676	LOAD_ATTR(arg=0, lineno=145)
         678	LOAD_CONST(arg=1, lineno=145)
         680	BINARY_SUBSCR(arg=None, lineno=145)
         682	CALL_FUNCTION(arg=1, lineno=145)
         684	GET_ITER(arg=None, lineno=145)
>        686	FOR_ITER(arg=38, lineno=145)
         688	STORE_FAST(arg=19, lineno=145)
         690	LOAD_FAST(arg=12, lineno=146)
         692	LOAD_FAST(arg=19, lineno=146)
         694	BINARY_ADD(arg=None, lineno=146)
         696	STORE_FAST(arg=39, lineno=146)
         698	LOAD_FAST(arg=18, lineno=147)
         700	LOAD_FAST(arg=19, lineno=147)
         702	DUP_TOP_TWO(arg=None, lineno=147)
         704	BINARY_SUBSCR(arg=None, lineno=147)
         706	LOAD_CONST(arg=7, lineno=147)
         708	LOAD_FAST(arg=39, lineno=147)
         710	LOAD_CONST(arg=3, lineno=147)
         712	BINARY_FLOOR_DIVIDE(arg=None, lineno=147)
         714	BINARY_POWER(arg=None, lineno=147)
         716	INPLACE_MULTIPLY(arg=None, lineno=147)
         718	ROT_THREE(arg=None, lineno=147)
         720	STORE_SUBSCR(arg=None, lineno=147)
         722	JUMP_ABSOLUTE(arg=686, lineno=147)
>        726	LOAD_FAST(arg=18, lineno=149)
         728	RETURN_VALUE(arg=None, lineno=149)
DEBUG 2022-02-14 16:38:17,975 pending: deque([State(pc_initial=0 nstack_initial=0)])
DEBUG 2022-02-14 16:38:17,975 stack: []
DEBUG 2022-02-14 16:38:17,975 dispatch pc=0, inst=NOP(arg=None, lineno=83)
DEBUG 2022-02-14 16:38:17,975 stack []
DEBUG 2022-02-14 16:38:17,975 dispatch pc=2, inst=LOAD_FAST(arg=1, lineno=83)
DEBUG 2022-02-14 16:38:17,975 stack []
DEBUG 2022-02-14 16:38:17,975 dispatch pc=4, inst=LOAD_CONST(arg=1, lineno=83)
DEBUG 2022-02-14 16:38:17,975 stack ['$D2.0']
DEBUG 2022-02-14 16:38:17,976 dispatch pc=6, inst=BINARY_SUBSCR(arg=None, lineno=83)
DEBUG 2022-02-14 16:38:17,976 stack ['$D2.0', '$const4.1']
DEBUG 2022-02-14 16:38:17,976 dispatch pc=8, inst=STORE_FAST(arg=7, lineno=83)
DEBUG 2022-02-14 16:38:17,976 stack ['$6binary_subscr.2']
DEBUG 2022-02-14 16:38:17,976 dispatch pc=10, inst=LOAD_FAST(arg=0, lineno=84)
DEBUG 2022-02-14 16:38:17,976 stack []
DEBUG 2022-02-14 16:38:17,976 dispatch pc=12, inst=LOAD_CONST(arg=1, lineno=84)
DEBUG 2022-02-14 16:38:17,976 stack ['$A10.3']
DEBUG 2022-02-14 16:38:17,976 dispatch pc=14, inst=LOAD_CONST(arg=0, lineno=84)
DEBUG 2022-02-14 16:38:17,976 stack ['$A10.3', '$const12.4']
DEBUG 2022-02-14 16:38:17,976 dispatch pc=16, inst=LOAD_CONST(arg=0, lineno=84)
DEBUG 2022-02-14 16:38:17,976 stack ['$A10.3', '$const12.4', '$const14.5']
DEBUG 2022-02-14 16:38:17,976 dispatch pc=18, inst=BUILD_SLICE(arg=2, lineno=84)
DEBUG 2022-02-14 16:38:17,976 stack ['$A10.3', '$const12.4', '$const14.5', '$const16.6']
DEBUG 2022-02-14 16:38:17,976 dispatch pc=20, inst=BUILD_TUPLE(arg=2, lineno=84)
DEBUG 2022-02-14 16:38:17,976 stack ['$A10.3', '$const12.4', '$18build_slice.8']
DEBUG 2022-02-14 16:38:17,977 dispatch pc=22, inst=BINARY_SUBSCR(arg=None, lineno=84)
DEBUG 2022-02-14 16:38:17,977 stack ['$A10.3', '$20build_tuple.9']
DEBUG 2022-02-14 16:38:17,977 dispatch pc=24, inst=STORE_FAST(arg=8, lineno=84)
DEBUG 2022-02-14 16:38:17,977 stack ['$22binary_subscr.10']
DEBUG 2022-02-14 16:38:17,977 dispatch pc=26, inst=LOAD_FAST(arg=1, lineno=88)
DEBUG 2022-02-14 16:38:17,977 stack []
DEBUG 2022-02-14 16:38:17,977 dispatch pc=28, inst=LOAD_CONST(arg=2, lineno=88)
DEBUG 2022-02-14 16:38:17,977 stack ['$D26.11']
DEBUG 2022-02-14 16:38:17,977 dispatch pc=30, inst=BINARY_SUBSCR(arg=None, lineno=88)
DEBUG 2022-02-14 16:38:17,977 stack ['$D26.11', '$const28.12']
DEBUG 2022-02-14 16:38:17,977 dispatch pc=32, inst=STORE_FAST(arg=9, lineno=88)
DEBUG 2022-02-14 16:38:17,977 stack ['$30binary_subscr.13']
DEBUG 2022-02-14 16:38:17,977 dispatch pc=34, inst=LOAD_FAST(arg=0, lineno=89)
DEBUG 2022-02-14 16:38:17,977 stack []
DEBUG 2022-02-14 16:38:17,977 dispatch pc=36, inst=LOAD_CONST(arg=2, lineno=89)
DEBUG 2022-02-14 16:38:17,977 stack ['$A34.14']
DEBUG 2022-02-14 16:38:17,978 dispatch pc=38, inst=LOAD_CONST(arg=0, lineno=89)
DEBUG 2022-02-14 16:38:17,978 stack ['$A34.14', '$const36.15']
DEBUG 2022-02-14 16:38:17,978 dispatch pc=40, inst=LOAD_CONST(arg=0, lineno=89)
DEBUG 2022-02-14 16:38:17,978 stack ['$A34.14', '$const36.15', '$const38.16']
DEBUG 2022-02-14 16:38:17,978 dispatch pc=42, inst=BUILD_SLICE(arg=2, lineno=89)
DEBUG 2022-02-14 16:38:17,978 stack ['$A34.14', '$const36.15', '$const38.16', '$const40.17']
DEBUG 2022-02-14 16:38:17,978 dispatch pc=44, inst=BUILD_TUPLE(arg=2, lineno=89)
DEBUG 2022-02-14 16:38:17,978 stack ['$A34.14', '$const36.15', '$42build_slice.19']
DEBUG 2022-02-14 16:38:17,978 dispatch pc=46, inst=BINARY_SUBSCR(arg=None, lineno=89)
DEBUG 2022-02-14 16:38:17,978 stack ['$A34.14', '$44build_tuple.20']
DEBUG 2022-02-14 16:38:17,978 dispatch pc=48, inst=STORE_FAST(arg=10, lineno=89)
DEBUG 2022-02-14 16:38:17,978 stack ['$46binary_subscr.21']
DEBUG 2022-02-14 16:38:17,978 dispatch pc=50, inst=LOAD_FAST(arg=0, lineno=91)
DEBUG 2022-02-14 16:38:17,978 stack []
DEBUG 2022-02-14 16:38:17,978 dispatch pc=52, inst=LOAD_ATTR(arg=0, lineno=91)
DEBUG 2022-02-14 16:38:17,978 stack ['$A50.22']
DEBUG 2022-02-14 16:38:17,979 dispatch pc=54, inst=LOAD_CONST(arg=1, lineno=91)
DEBUG 2022-02-14 16:38:17,979 stack ['$52load_attr.23']
DEBUG 2022-02-14 16:38:17,979 dispatch pc=56, inst=BINARY_SUBSCR(arg=None, lineno=91)
DEBUG 2022-02-14 16:38:17,979 stack ['$52load_attr.23', '$const54.24']
DEBUG 2022-02-14 16:38:17,979 dispatch pc=58, inst=STORE_FAST(arg=11, lineno=91)
DEBUG 2022-02-14 16:38:17,979 stack ['$56binary_subscr.25']
DEBUG 2022-02-14 16:38:17,979 dispatch pc=60, inst=LOAD_CONST(arg=3, lineno=92)
DEBUG 2022-02-14 16:38:17,979 stack []
DEBUG 2022-02-14 16:38:17,979 dispatch pc=62, inst=LOAD_FAST(arg=2, lineno=92)
DEBUG 2022-02-14 16:38:17,979 stack ['$const60.26']
DEBUG 2022-02-14 16:38:17,979 dispatch pc=64, inst=LOAD_METHOD(arg=1, lineno=92)
DEBUG 2022-02-14 16:38:17,979 stack ['$const60.26', '$fixed_edge_reps62.27']
DEBUG 2022-02-14 16:38:17,979 dispatch pc=66, inst=CALL_METHOD(arg=0, lineno=92)
DEBUG 2022-02-14 16:38:17,979 stack ['$const60.26', '$64load_method.28']
DEBUG 2022-02-14 16:38:17,979 dispatch pc=68, inst=BINARY_MULTIPLY(arg=None, lineno=92)
DEBUG 2022-02-14 16:38:17,979 stack ['$const60.26', '$66call_method.29']
DEBUG 2022-02-14 16:38:17,980 dispatch pc=70, inst=LOAD_CONST(arg=2, lineno=92)
DEBUG 2022-02-14 16:38:17,980 stack ['$68binary_multiply.30']
DEBUG 2022-02-14 16:38:17,980 dispatch pc=72, inst=BINARY_ADD(arg=None, lineno=92)
DEBUG 2022-02-14 16:38:17,980 stack ['$68binary_multiply.30', '$const70.31']
DEBUG 2022-02-14 16:38:17,980 dispatch pc=74, inst=STORE_FAST(arg=12, lineno=92)
DEBUG 2022-02-14 16:38:17,980 stack ['$72binary_add.32']
DEBUG 2022-02-14 16:38:17,980 dispatch pc=76, inst=LOAD_FAST(arg=12, lineno=93)
DEBUG 2022-02-14 16:38:17,980 stack []
DEBUG 2022-02-14 16:38:17,980 dispatch pc=78, inst=LOAD_CONST(arg=3, lineno=93)
DEBUG 2022-02-14 16:38:17,980 stack ['$N_fixed76.33']
DEBUG 2022-02-14 16:38:17,980 dispatch pc=80, inst=LOAD_FAST(arg=3, lineno=93)
DEBUG 2022-02-14 16:38:17,980 stack ['$N_fixed76.33', '$const78.34']
DEBUG 2022-02-14 16:38:17,980 dispatch pc=82, inst=BINARY_MULTIPLY(arg=None, lineno=93)
DEBUG 2022-02-14 16:38:17,980 stack ['$N_fixed76.33', '$const78.34', '$batch_max80.35']
DEBUG 2022-02-14 16:38:17,980 dispatch pc=84, inst=BINARY_ADD(arg=None, lineno=93)
DEBUG 2022-02-14 16:38:17,980 stack ['$N_fixed76.33', '$82binary_multiply.36']
DEBUG 2022-02-14 16:38:17,981 dispatch pc=86, inst=LOAD_FAST(arg=4, lineno=93)
DEBUG 2022-02-14 16:38:17,981 stack ['$84binary_add.37']
DEBUG 2022-02-14 16:38:17,981 dispatch pc=88, inst=BINARY_ADD(arg=None, lineno=93)
DEBUG 2022-02-14 16:38:17,981 stack ['$84binary_add.37', '$even_cutoff86.38']
DEBUG 2022-02-14 16:38:17,981 dispatch pc=90, inst=LOAD_CONST(arg=2, lineno=93)
DEBUG 2022-02-14 16:38:17,981 stack ['$88binary_add.39']
DEBUG 2022-02-14 16:38:17,981 dispatch pc=92, inst=BINARY_ADD(arg=None, lineno=93)
DEBUG 2022-02-14 16:38:17,981 stack ['$88binary_add.39', '$const90.40']
DEBUG 2022-02-14 16:38:17,981 dispatch pc=94, inst=STORE_FAST(arg=13, lineno=93)
DEBUG 2022-02-14 16:38:17,981 stack ['$92binary_add.41']
DEBUG 2022-02-14 16:38:17,981 dispatch pc=96, inst=LOAD_GLOBAL(arg=2, lineno=95)
DEBUG 2022-02-14 16:38:17,981 stack []
DEBUG 2022-02-14 16:38:17,981 dispatch pc=98, inst=LOAD_METHOD(arg=3, lineno=95)
DEBUG 2022-02-14 16:38:17,981 stack ['$96load_global.42']
DEBUG 2022-02-14 16:38:17,981 dispatch pc=100, inst=LOAD_GLOBAL(arg=2, lineno=95)
DEBUG 2022-02-14 16:38:17,981 stack ['$98load_method.43']
DEBUG 2022-02-14 16:38:17,982 dispatch pc=102, inst=LOAD_METHOD(arg=4, lineno=95)
DEBUG 2022-02-14 16:38:17,982 stack ['$98load_method.43', '$100load_global.44']
DEBUG 2022-02-14 16:38:17,982 dispatch pc=104, inst=LOAD_FAST(arg=3, lineno=95)
DEBUG 2022-02-14 16:38:17,982 stack ['$98load_method.43', '$102load_method.45']
DEBUG 2022-02-14 16:38:17,982 dispatch pc=106, inst=LOAD_CONST(arg=2, lineno=95)
DEBUG 2022-02-14 16:38:17,982 stack ['$98load_method.43', '$102load_method.45', '$batch_max104.46']
DEBUG 2022-02-14 16:38:17,982 dispatch pc=108, inst=BUILD_LIST(arg=2, lineno=95)
DEBUG 2022-02-14 16:38:17,982 stack ['$98load_method.43', '$102load_method.45', '$batch_max104.46', '$const106.47']
DEBUG 2022-02-14 16:38:17,982 dispatch pc=110, inst=CALL_METHOD(arg=1, lineno=95)
DEBUG 2022-02-14 16:38:17,982 stack ['$98load_method.43', '$102load_method.45', '$108build_list.48']
DEBUG 2022-02-14 16:38:17,982 dispatch pc=112, inst=LOAD_FAST(arg=2, lineno=95)
DEBUG 2022-02-14 16:38:17,982 stack ['$98load_method.43', '$110call_method.49']
DEBUG 2022-02-14 16:38:17,982 dispatch pc=114, inst=BUILD_TUPLE(arg=2, lineno=95)
DEBUG 2022-02-14 16:38:17,982 stack ['$98load_method.43', '$110call_method.49', '$fixed_edge_reps112.50']
DEBUG 2022-02-14 16:38:17,982 dispatch pc=116, inst=CALL_METHOD(arg=1, lineno=95)
DEBUG 2022-02-14 16:38:17,983 stack ['$98load_method.43', '$114build_tuple.51']
DEBUG 2022-02-14 16:38:17,983 dispatch pc=118, inst=STORE_FAST(arg=14, lineno=95)
DEBUG 2022-02-14 16:38:17,983 stack ['$116call_method.52']
DEBUG 2022-02-14 16:38:17,983 dispatch pc=120, inst=LOAD_GLOBAL(arg=2, lineno=96)
DEBUG 2022-02-14 16:38:17,983 stack []
DEBUG 2022-02-14 16:38:17,983 dispatch pc=122, inst=LOAD_METHOD(arg=5, lineno=96)
DEBUG 2022-02-14 16:38:17,983 stack ['$120load_global.53']
DEBUG 2022-02-14 16:38:17,983 dispatch pc=124, inst=LOAD_FAST(arg=14, lineno=96)
DEBUG 2022-02-14 16:38:17,983 stack ['$122load_method.54']
DEBUG 2022-02-14 16:38:17,983 dispatch pc=126, inst=LOAD_CONST(arg=2, lineno=96)
DEBUG 2022-02-14 16:38:17,983 stack ['$122load_method.54', '$edge_reps124.55']
DEBUG 2022-02-14 16:38:17,983 dispatch pc=128, inst=BINARY_ADD(arg=None, lineno=96)
DEBUG 2022-02-14 16:38:17,983 stack ['$122load_method.54', '$edge_reps124.55', '$const126.56']
DEBUG 2022-02-14 16:38:17,983 dispatch pc=130, inst=CALL_METHOD(arg=1, lineno=96)
DEBUG 2022-02-14 16:38:17,983 stack ['$122load_method.54', '$128binary_add.57']
DEBUG 2022-02-14 16:38:17,983 dispatch pc=132, inst=STORE_FAST(arg=15, lineno=96)
DEBUG 2022-02-14 16:38:17,984 stack ['$130call_method.58']
DEBUG 2022-02-14 16:38:17,984 dispatch pc=134, inst=LOAD_FAST(arg=14, lineno=98)
DEBUG 2022-02-14 16:38:17,984 stack []
DEBUG 2022-02-14 16:38:17,984 dispatch pc=136, inst=LOAD_METHOD(arg=6, lineno=98)
DEBUG 2022-02-14 16:38:17,984 stack ['$edge_reps134.59']
DEBUG 2022-02-14 16:38:17,984 dispatch pc=138, inst=CALL_METHOD(arg=0, lineno=98)
DEBUG 2022-02-14 16:38:17,984 stack ['$136load_method.60']
DEBUG 2022-02-14 16:38:17,984 dispatch pc=140, inst=LOAD_FAST(arg=4, lineno=98)
DEBUG 2022-02-14 16:38:17,984 stack ['$138call_method.61']
DEBUG 2022-02-14 16:38:17,984 dispatch pc=142, inst=BINARY_ADD(arg=None, lineno=98)
DEBUG 2022-02-14 16:38:17,984 stack ['$138call_method.61', '$even_cutoff140.62']
DEBUG 2022-02-14 16:38:17,984 dispatch pc=144, inst=STORE_FAST(arg=16, lineno=98)
DEBUG 2022-02-14 16:38:17,984 stack ['$142binary_add.63']
DEBUG 2022-02-14 16:38:17,984 dispatch pc=146, inst=LOAD_GLOBAL(arg=7, lineno=99)
DEBUG 2022-02-14 16:38:17,984 stack []
DEBUG 2022-02-14 16:38:17,985 dispatch pc=148, inst=LOAD_FAST(arg=16, lineno=99)
DEBUG 2022-02-14 16:38:17,985 stack ['$146load_global.64']
DEBUG 2022-02-14 16:38:17,985 dispatch pc=150, inst=CALL_FUNCTION(arg=1, lineno=99)
DEBUG 2022-02-14 16:38:17,985 stack ['$146load_global.64', '$max_binom148.65']
DEBUG 2022-02-14 16:38:17,985 dispatch pc=152, inst=STORE_FAST(arg=17, lineno=99)
DEBUG 2022-02-14 16:38:17,985 stack ['$150call_function.66']
DEBUG 2022-02-14 16:38:17,985 dispatch pc=154, inst=LOAD_GLOBAL(arg=2, lineno=101)
DEBUG 2022-02-14 16:38:17,985 stack []
DEBUG 2022-02-14 16:38:17,985 dispatch pc=156, inst=LOAD_ATTR(arg=8, lineno=101)
DEBUG 2022-02-14 16:38:17,985 stack ['$154load_global.67']
DEBUG 2022-02-14 16:38:17,985 dispatch pc=158, inst=LOAD_CONST(arg=3, lineno=101)
DEBUG 2022-02-14 16:38:17,985 stack ['$156load_attr.68']
DEBUG 2022-02-14 16:38:17,985 dispatch pc=160, inst=LOAD_FAST(arg=3, lineno=101)
DEBUG 2022-02-14 16:38:17,985 stack ['$156load_attr.68', '$const158.69']
DEBUG 2022-02-14 16:38:17,985 dispatch pc=162, inst=BINARY_MULTIPLY(arg=None, lineno=101)
DEBUG 2022-02-14 16:38:17,985 stack ['$156load_attr.68', '$const158.69', '$batch_max160.70']
DEBUG 2022-02-14 16:38:17,985 dispatch pc=164, inst=LOAD_FAST(arg=4, lineno=101)
DEBUG 2022-02-14 16:38:17,985 stack ['$156load_attr.68', '$162binary_multiply.71']
DEBUG 2022-02-14 16:38:17,985 dispatch pc=166, inst=BINARY_ADD(arg=None, lineno=101)
DEBUG 2022-02-14 16:38:17,985 stack ['$156load_attr.68', '$162binary_multiply.71', '$even_cutoff164.72']
DEBUG 2022-02-14 16:38:17,985 dispatch pc=168, inst=LOAD_CONST(arg=3, lineno=101)
DEBUG 2022-02-14 16:38:17,985 stack ['$156load_attr.68', '$166binary_add.73']
DEBUG 2022-02-14 16:38:17,985 dispatch pc=170, inst=BINARY_ADD(arg=None, lineno=101)
DEBUG 2022-02-14 16:38:17,985 stack ['$156load_attr.68', '$166binary_add.73', '$const168.74']
DEBUG 2022-02-14 16:38:17,986 dispatch pc=172, inst=LOAD_GLOBAL(arg=2, lineno=101)
DEBUG 2022-02-14 16:38:17,986 stack ['$156load_attr.68', '$170binary_add.75']
DEBUG 2022-02-14 16:38:17,986 dispatch pc=174, inst=LOAD_ATTR(arg=9, lineno=101)
DEBUG 2022-02-14 16:38:17,986 stack ['$156load_attr.68', '$170binary_add.75', '$172load_global.76']
DEBUG 2022-02-14 16:38:17,986 dispatch pc=176, inst=LOAD_CONST(arg=4, lineno=101)
DEBUG 2022-02-14 16:38:17,986 stack ['$156load_attr.68', '$170binary_add.75', '$174load_attr.77']
DEBUG 2022-02-14 16:38:17,986 dispatch pc=178, inst=CALL_FUNCTION_KW(arg=2, lineno=101)
DEBUG 2022-02-14 16:38:17,986 stack ['$156load_attr.68', '$170binary_add.75', '$174load_attr.77', '$const176.78']
DEBUG 2022-02-14 16:38:17,986 dispatch pc=180, inst=STORE_FAST(arg=18, lineno=101)
DEBUG 2022-02-14 16:38:17,986 stack ['$178call_function_kw.79']
DEBUG 2022-02-14 16:38:17,986 dispatch pc=182, inst=LOAD_GLOBAL(arg=10, lineno=102)
DEBUG 2022-02-14 16:38:17,986 stack []
DEBUG 2022-02-14 16:38:17,986 dispatch pc=184, inst=LOAD_METHOD(arg=11, lineno=102)
DEBUG 2022-02-14 16:38:17,986 stack ['$182load_global.80']
DEBUG 2022-02-14 16:38:17,986 dispatch pc=186, inst=LOAD_FAST(arg=15, lineno=102)
DEBUG 2022-02-14 16:38:17,986 stack ['$184load_method.81']
DEBUG 2022-02-14 16:38:17,986 dispatch pc=188, inst=CALL_METHOD(arg=1, lineno=102)
DEBUG 2022-02-14 16:38:17,986 stack ['$184load_method.81', '$steps186.82']
DEBUG 2022-02-14 16:38:17,986 dispatch pc=190, inst=GET_ITER(arg=None, lineno=102)
DEBUG 2022-02-14 16:38:17,986 stack ['$188call_method.83']
DEBUG 2022-02-14 16:38:17,986 end state. edges=[Edge(pc=192, stack=('$190get_iter.84',), blockstack=(), npush=0)]
DEBUG 2022-02-14 16:38:17,986 pending: deque([State(pc_initial=192 nstack_initial=1)])
DEBUG 2022-02-14 16:38:17,987 stack: ['$phi192.0']
DEBUG 2022-02-14 16:38:17,987 dispatch pc=192, inst=FOR_ITER(arg=470, lineno=102)
DEBUG 2022-02-14 16:38:17,987 stack ['$phi192.0']
DEBUG 2022-02-14 16:38:17,987 end state. edges=[Edge(pc=666, stack=(), blockstack=(), npush=0), Edge(pc=196, stack=('$phi192.0', '$192for_iter.2'), blockstack=(), npush=0)]
DEBUG 2022-02-14 16:38:17,987 pending: deque([State(pc_initial=666 nstack_initial=0), State(pc_initial=196 nstack_initial=2)])
DEBUG 2022-02-14 16:38:17,987 stack: []
DEBUG 2022-02-14 16:38:17,987 dispatch pc=666, inst=LOAD_FAST(arg=6, lineno=144)
DEBUG 2022-02-14 16:38:17,987 stack []
DEBUG 2022-02-14 16:38:17,987 dispatch pc=668, inst=POP_JUMP_IF_FALSE(arg=726, lineno=144)
DEBUG 2022-02-14 16:38:17,987 stack ['$glynn666.0']
DEBUG 2022-02-14 16:38:17,987 end state. edges=[Edge(pc=672, stack=(), blockstack=(), npush=0), Edge(pc=726, stack=(), blockstack=(), npush=0)]
DEBUG 2022-02-14 16:38:17,987 pending: deque([State(pc_initial=196 nstack_initial=2), State(pc_initial=672 nstack_initial=0), State(pc_initial=726 nstack_initial=0)])
DEBUG 2022-02-14 16:38:17,987 stack: ['$phi196.0', '$phi196.1']
DEBUG 2022-02-14 16:38:17,987 dispatch pc=196, inst=STORE_FAST(arg=19, lineno=102)
DEBUG 2022-02-14 16:38:17,987 stack ['$phi196.0', '$phi196.1']
DEBUG 2022-02-14 16:38:17,987 dispatch pc=198, inst=LOAD_GLOBAL(arg=2, lineno=104)
DEBUG 2022-02-14 16:38:17,987 stack ['$phi196.0']
DEBUG 2022-02-14 16:38:17,987 dispatch pc=200, inst=LOAD_ATTR(arg=8, lineno=104)
DEBUG 2022-02-14 16:38:17,987 stack ['$phi196.0', '$198load_global.2']
DEBUG 2022-02-14 16:38:17,987 dispatch pc=202, inst=LOAD_CONST(arg=3, lineno=104)
DEBUG 2022-02-14 16:38:17,987 stack ['$phi196.0', '$200load_attr.3']
DEBUG 2022-02-14 16:38:17,987 dispatch pc=204, inst=LOAD_FAST(arg=3, lineno=104)
DEBUG 2022-02-14 16:38:17,987 stack ['$phi196.0', '$200load_attr.3', '$const202.4']
DEBUG 2022-02-14 16:38:17,987 dispatch pc=206, inst=BINARY_MULTIPLY(arg=None, lineno=104)
DEBUG 2022-02-14 16:38:17,987 stack ['$phi196.0', '$200load_attr.3', '$const202.4', '$batch_max204.5']
DEBUG 2022-02-14 16:38:17,988 dispatch pc=208, inst=LOAD_FAST(arg=4, lineno=104)
DEBUG 2022-02-14 16:38:17,988 stack ['$phi196.0', '$200load_attr.3', '$206binary_multiply.6']
DEBUG 2022-02-14 16:38:17,988 dispatch pc=210, inst=BINARY_ADD(arg=None, lineno=104)
DEBUG 2022-02-14 16:38:17,988 stack ['$phi196.0', '$200load_attr.3', '$206binary_multiply.6', '$even_cutoff208.7']
DEBUG 2022-02-14 16:38:17,988 dispatch pc=212, inst=LOAD_CONST(arg=3, lineno=104)
DEBUG 2022-02-14 16:38:17,988 stack ['$phi196.0', '$200load_attr.3', '$210binary_add.8']
DEBUG 2022-02-14 16:38:17,988 dispatch pc=214, inst=BINARY_ADD(arg=None, lineno=104)
DEBUG 2022-02-14 16:38:17,988 stack ['$phi196.0', '$200load_attr.3', '$210binary_add.8', '$const212.9']
DEBUG 2022-02-14 16:38:17,988 dispatch pc=216, inst=LOAD_GLOBAL(arg=2, lineno=104)
DEBUG 2022-02-14 16:38:17,988 stack ['$phi196.0', '$200load_attr.3', '$214binary_add.10']
DEBUG 2022-02-14 16:38:17,988 dispatch pc=218, inst=LOAD_ATTR(arg=9, lineno=104)
DEBUG 2022-02-14 16:38:17,988 stack ['$phi196.0', '$200load_attr.3', '$214binary_add.10', '$216load_global.11']
DEBUG 2022-02-14 16:38:17,988 dispatch pc=220, inst=LOAD_CONST(arg=4, lineno=104)
DEBUG 2022-02-14 16:38:17,988 stack ['$phi196.0', '$200load_attr.3', '$214binary_add.10', '$218load_attr.12']
DEBUG 2022-02-14 16:38:17,988 dispatch pc=222, inst=CALL_FUNCTION_KW(arg=2, lineno=104)
DEBUG 2022-02-14 16:38:17,988 stack ['$phi196.0', '$200load_attr.3', '$214binary_add.10', '$218load_attr.12', '$const220.13']
DEBUG 2022-02-14 16:38:17,988 dispatch pc=224, inst=STORE_FAST(arg=20, lineno=104)
DEBUG 2022-02-14 16:38:17,989 stack ['$phi196.0', '$222call_function_kw.14']
DEBUG 2022-02-14 16:38:17,989 dispatch pc=226, inst=LOAD_GLOBAL(arg=12, lineno=106)
DEBUG 2022-02-14 16:38:17,989 stack ['$phi196.0']
DEBUG 2022-02-14 16:38:17,989 dispatch pc=228, inst=LOAD_FAST(arg=19, lineno=106)
DEBUG 2022-02-14 16:38:17,989 stack ['$phi196.0', '$226load_global.15']
DEBUG 2022-02-14 16:38:17,989 dispatch pc=230, inst=LOAD_FAST(arg=14, lineno=106)
DEBUG 2022-02-14 16:38:17,989 stack ['$phi196.0', '$226load_global.15', '$j228.16']
DEBUG 2022-02-14 16:38:17,989 dispatch pc=232, inst=CALL_FUNCTION(arg=2, lineno=106)
DEBUG 2022-02-14 16:38:17,989 stack ['$phi196.0', '$226load_global.15', '$j228.16', '$edge_reps230.17']
DEBUG 2022-02-14 16:38:17,989 dispatch pc=234, inst=STORE_FAST(arg=21, lineno=106)
DEBUG 2022-02-14 16:38:17,989 stack ['$phi196.0', '$232call_function.18']
DEBUG 2022-02-14 16:38:17,989 dispatch pc=236, inst=LOAD_FAST(arg=21, lineno=107)
DEBUG 2022-02-14 16:38:17,989 stack ['$phi196.0']
DEBUG 2022-02-14 16:38:17,989 dispatch pc=238, inst=LOAD_METHOD(arg=1, lineno=107)
DEBUG 2022-02-14 16:38:17,989 stack ['$phi196.0', '$kept_edges236.19']
DEBUG 2022-02-14 16:38:17,989 dispatch pc=240, inst=CALL_METHOD(arg=0, lineno=107)
DEBUG 2022-02-14 16:38:17,989 stack ['$phi196.0', '$238load_method.20']
DEBUG 2022-02-14 16:38:17,989 dispatch pc=242, inst=STORE_FAST(arg=22, lineno=107)
DEBUG 2022-02-14 16:38:17,989 stack ['$phi196.0', '$240call_method.21']
DEBUG 2022-02-14 16:38:17,989 dispatch pc=244, inst=LOAD_CONST(arg=5, lineno=109)
DEBUG 2022-02-14 16:38:17,989 stack ['$phi196.0']
DEBUG 2022-02-14 16:38:17,989 dispatch pc=246, inst=STORE_FAST(arg=23, lineno=109)
DEBUG 2022-02-14 16:38:17,989 stack ['$phi196.0', '$const244.22']
DEBUG 2022-02-14 16:38:17,989 dispatch pc=248, inst=LOAD_GLOBAL(arg=13, lineno=110)
DEBUG 2022-02-14 16:38:17,989 stack ['$phi196.0']
DEBUG 2022-02-14 16:38:17,989 dispatch pc=250, inst=LOAD_CONST(arg=2, lineno=110)
DEBUG 2022-02-14 16:38:17,990 stack ['$phi196.0', '$248load_global.23']
DEBUG 2022-02-14 16:38:17,990 dispatch pc=252, inst=LOAD_FAST(arg=11, lineno=110)
DEBUG 2022-02-14 16:38:17,990 stack ['$phi196.0', '$248load_global.23', '$const250.24']
DEBUG 2022-02-14 16:38:17,990 dispatch pc=254, inst=LOAD_CONST(arg=3, lineno=110)
DEBUG 2022-02-14 16:38:17,990 stack ['$phi196.0', '$248load_global.23', '$const250.24', '$n252.25']
DEBUG 2022-02-14 16:38:17,990 dispatch pc=256, inst=BINARY_FLOOR_DIVIDE(arg=None, lineno=110)
DEBUG 2022-02-14 16:38:17,990 stack ['$phi196.0', '$248load_global.23', '$const250.24', '$n252.25', '$const254.26']
DEBUG 2022-02-14 16:38:17,990 dispatch pc=258, inst=CALL_FUNCTION(arg=2, lineno=110)
DEBUG 2022-02-14 16:38:17,990 stack ['$phi196.0', '$248load_global.23', '$const250.24', '$256binary_floor_divide.27']
DEBUG 2022-02-14 16:38:17,990 dispatch pc=260, inst=GET_ITER(arg=None, lineno=110)
DEBUG 2022-02-14 16:38:17,990 stack ['$phi196.0', '$258call_function.28']
DEBUG 2022-02-14 16:38:17,990 end state. edges=[Edge(pc=262, stack=('$phi196.0', '$260get_iter.29'), blockstack=(), npush=0)]
DEBUG 2022-02-14 16:38:17,990 pending: deque([State(pc_initial=672 nstack_initial=0), State(pc_initial=726 nstack_initial=0), State(pc_initial=262 nstack_initial=2)])
DEBUG 2022-02-14 16:38:17,990 stack: []
DEBUG 2022-02-14 16:38:17,990 dispatch pc=672, inst=LOAD_GLOBAL(arg=13, lineno=145)
DEBUG 2022-02-14 16:38:17,990 stack []
DEBUG 2022-02-14 16:38:17,990 dispatch pc=674, inst=LOAD_FAST(arg=18, lineno=145)
DEBUG 2022-02-14 16:38:17,990 stack ['$672load_global.0']
DEBUG 2022-02-14 16:38:17,990 dispatch pc=676, inst=LOAD_ATTR(arg=0, lineno=145)
DEBUG 2022-02-14 16:38:17,990 stack ['$672load_global.0', '$H_batch674.1']
DEBUG 2022-02-14 16:38:17,990 dispatch pc=678, inst=LOAD_CONST(arg=1, lineno=145)
DEBUG 2022-02-14 16:38:17,990 stack ['$672load_global.0', '$676load_attr.2']
DEBUG 2022-02-14 16:38:17,990 dispatch pc=680, inst=BINARY_SUBSCR(arg=None, lineno=145)
DEBUG 2022-02-14 16:38:17,990 stack ['$672load_global.0', '$676load_attr.2', '$const678.3']
DEBUG 2022-02-14 16:38:17,990 dispatch pc=682, inst=CALL_FUNCTION(arg=1, lineno=145)
DEBUG 2022-02-14 16:38:17,991 stack ['$672load_global.0', '$680binary_subscr.4']
DEBUG 2022-02-14 16:38:17,991 dispatch pc=684, inst=GET_ITER(arg=None, lineno=145)
DEBUG 2022-02-14 16:38:17,991 stack ['$682call_function.5']
DEBUG 2022-02-14 16:38:17,991 end state. edges=[Edge(pc=686, stack=('$684get_iter.6',), blockstack=(), npush=0)]
DEBUG 2022-02-14 16:38:17,991 pending: deque([State(pc_initial=726 nstack_initial=0), State(pc_initial=262 nstack_initial=2), State(pc_initial=686 nstack_initial=1)])
DEBUG 2022-02-14 16:38:17,991 stack: []
DEBUG 2022-02-14 16:38:17,991 dispatch pc=726, inst=LOAD_FAST(arg=18, lineno=149)
DEBUG 2022-02-14 16:38:17,991 stack []
DEBUG 2022-02-14 16:38:17,991 dispatch pc=728, inst=RETURN_VALUE(arg=None, lineno=149)
DEBUG 2022-02-14 16:38:17,991 stack ['$H_batch726.0']
DEBUG 2022-02-14 16:38:17,991 end state. edges=[]
DEBUG 2022-02-14 16:38:17,991 pending: deque([State(pc_initial=262 nstack_initial=2), State(pc_initial=686 nstack_initial=1)])
DEBUG 2022-02-14 16:38:17,991 stack: ['$phi262.0', '$phi262.1']
DEBUG 2022-02-14 16:38:17,991 dispatch pc=262, inst=FOR_ITER(arg=30, lineno=110)
DEBUG 2022-02-14 16:38:17,991 stack ['$phi262.0', '$phi262.1']
DEBUG 2022-02-14 16:38:17,991 end state. edges=[Edge(pc=294, stack=('$phi262.0',), blockstack=(), npush=0), Edge(pc=264, stack=('$phi262.0', '$phi262.1', '$262for_iter.3'), blockstack=(), npush=0)]
DEBUG 2022-02-14 16:38:17,991 pending: deque([State(pc_initial=686 nstack_initial=1), State(pc_initial=294 nstack_initial=1), State(pc_initial=264 nstack_initial=3)])
DEBUG 2022-02-14 16:38:17,991 stack: ['$phi686.0']
DEBUG 2022-02-14 16:38:17,991 dispatch pc=686, inst=FOR_ITER(arg=38, lineno=145)
DEBUG 2022-02-14 16:38:17,991 stack ['$phi686.0']
DEBUG 2022-02-14 16:38:17,991 end state. edges=[Edge(pc=726, stack=(), blockstack=(), npush=0), Edge(pc=688, stack=('$phi686.0', '$686for_iter.2'), blockstack=(), npush=0)]
DEBUG 2022-02-14 16:38:17,991 pending: deque([State(pc_initial=294 nstack_initial=1), State(pc_initial=264 nstack_initial=3), State(pc_initial=726 nstack_initial=0), State(pc_initial=688 nstack_initial=2)])
DEBUG 2022-02-14 16:38:17,991 stack: ['$phi294.0']
DEBUG 2022-02-14 16:38:17,991 dispatch pc=294, inst=LOAD_FAST(arg=6, lineno=113)
DEBUG 2022-02-14 16:38:17,992 stack ['$phi294.0']
DEBUG 2022-02-14 16:38:17,992 dispatch pc=296, inst=POP_JUMP_IF_FALSE(arg=314, lineno=113)
DEBUG 2022-02-14 16:38:17,992 stack ['$phi294.0', '$glynn294.1']
DEBUG 2022-02-14 16:38:17,992 end state. edges=[Edge(pc=300, stack=('$phi294.0',), blockstack=(), npush=0), Edge(pc=314, stack=('$phi294.0',), blockstack=(), npush=0)]
DEBUG 2022-02-14 16:38:17,992 pending: deque([State(pc_initial=264 nstack_initial=3), State(pc_initial=726 nstack_initial=0), State(pc_initial=688 nstack_initial=2), State(pc_initial=300 nstack_initial=1), State(pc_initial=314 nstack_initial=1)])
DEBUG 2022-02-14 16:38:17,992 stack: ['$phi264.0', '$phi264.1', '$phi264.2']
DEBUG 2022-02-14 16:38:17,992 dispatch pc=264, inst=STORE_FAST(arg=24, lineno=110)
DEBUG 2022-02-14 16:38:17,992 stack ['$phi264.0', '$phi264.1', '$phi264.2']
DEBUG 2022-02-14 16:38:17,992 dispatch pc=266, inst=LOAD_FAST(arg=23, lineno=111)
DEBUG 2022-02-14 16:38:17,992 stack ['$phi264.0', '$phi264.1']
DEBUG 2022-02-14 16:38:17,992 dispatch pc=268, inst=LOAD_FAST(arg=17, lineno=111)
DEBUG 2022-02-14 16:38:17,992 stack ['$phi264.0', '$phi264.1', '$binom_prod266.3']
DEBUG 2022-02-14 16:38:17,992 dispatch pc=270, inst=LOAD_FAST(arg=14, lineno=111)
DEBUG 2022-02-14 16:38:17,992 stack ['$phi264.0', '$phi264.1', '$binom_prod266.3', '$binoms268.4']
DEBUG 2022-02-14 16:38:17,992 dispatch pc=272, inst=LOAD_FAST(arg=24, lineno=111)
DEBUG 2022-02-14 16:38:17,992 stack ['$phi264.0', '$phi264.1', '$binom_prod266.3', '$binoms268.4', '$edge_reps270.5']
DEBUG 2022-02-14 16:38:17,992 dispatch pc=274, inst=BINARY_SUBSCR(arg=None, lineno=111)
DEBUG 2022-02-14 16:38:17,992 stack ['$phi264.0', '$phi264.1', '$binom_prod266.3', '$binoms268.4', '$edge_reps270.5', '$i272.6']
DEBUG 2022-02-14 16:38:17,992 dispatch pc=276, inst=LOAD_FAST(arg=21, lineno=111)
DEBUG 2022-02-14 16:38:17,992 stack ['$phi264.0', '$phi264.1', '$binom_prod266.3', '$binoms268.4', '$274binary_subscr.7']
DEBUG 2022-02-14 16:38:17,992 dispatch pc=278, inst=LOAD_FAST(arg=24, lineno=111)
DEBUG 2022-02-14 16:38:17,992 stack ['$phi264.0', '$phi264.1', '$binom_prod266.3', '$binoms268.4', '$274binary_subscr.7', '$kept_edges276.8']
DEBUG 2022-02-14 16:38:17,992 dispatch pc=280, inst=BINARY_SUBSCR(arg=None, lineno=111)
DEBUG 2022-02-14 16:38:17,992 stack ['$phi264.0', '$phi264.1', '$binom_prod266.3', '$binoms268.4', '$274binary_subscr.7', '$kept_edges276.8', '$i278.9']
DEBUG 2022-02-14 16:38:17,992 dispatch pc=282, inst=BUILD_TUPLE(arg=2, lineno=111)
DEBUG 2022-02-14 16:38:17,992 stack ['$phi264.0', '$phi264.1', '$binom_prod266.3', '$binoms268.4', '$274binary_subscr.7', '$280binary_subscr.10']
DEBUG 2022-02-14 16:38:17,993 dispatch pc=284, inst=BINARY_SUBSCR(arg=None, lineno=111)
DEBUG 2022-02-14 16:38:17,993 stack ['$phi264.0', '$phi264.1', '$binom_prod266.3', '$binoms268.4', '$282build_tuple.11']
DEBUG 2022-02-14 16:38:17,993 dispatch pc=286, inst=INPLACE_MULTIPLY(arg=None, lineno=111)
DEBUG 2022-02-14 16:38:17,993 stack ['$phi264.0', '$phi264.1', '$binom_prod266.3', '$284binary_subscr.12']
DEBUG 2022-02-14 16:38:17,993 dispatch pc=288, inst=STORE_FAST(arg=23, lineno=111)
DEBUG 2022-02-14 16:38:17,993 stack ['$phi264.0', '$phi264.1', '$286inplace_multiply.13']
DEBUG 2022-02-14 16:38:17,993 dispatch pc=290, inst=JUMP_ABSOLUTE(arg=262, lineno=111)
DEBUG 2022-02-14 16:38:17,993 stack ['$phi264.0', '$phi264.1']
DEBUG 2022-02-14 16:38:17,993 end state. edges=[Edge(pc=262, stack=('$phi264.0', '$phi264.1'), blockstack=(), npush=0)]
DEBUG 2022-02-14 16:38:17,993 pending: deque([State(pc_initial=726 nstack_initial=0), State(pc_initial=688 nstack_initial=2), State(pc_initial=300 nstack_initial=1), State(pc_initial=314 nstack_initial=1), State(pc_initial=262 nstack_initial=2)])
DEBUG 2022-02-14 16:38:17,993 pending: deque([State(pc_initial=688 nstack_initial=2), State(pc_initial=300 nstack_initial=1), State(pc_initial=314 nstack_initial=1), State(pc_initial=262 nstack_initial=2)])
DEBUG 2022-02-14 16:38:17,993 stack: ['$phi688.0', '$phi688.1']
DEBUG 2022-02-14 16:38:17,993 dispatch pc=688, inst=STORE_FAST(arg=19, lineno=145)
DEBUG 2022-02-14 16:38:17,993 stack ['$phi688.0', '$phi688.1']
DEBUG 2022-02-14 16:38:17,993 dispatch pc=690, inst=LOAD_FAST(arg=12, lineno=146)
DEBUG 2022-02-14 16:38:17,993 stack ['$phi688.0']
DEBUG 2022-02-14 16:38:17,993 dispatch pc=692, inst=LOAD_FAST(arg=19, lineno=146)
DEBUG 2022-02-14 16:38:17,993 stack ['$phi688.0', '$N_fixed690.2']
DEBUG 2022-02-14 16:38:17,993 dispatch pc=694, inst=BINARY_ADD(arg=None, lineno=146)
DEBUG 2022-02-14 16:38:17,993 stack ['$phi688.0', '$N_fixed690.2', '$j692.3']
DEBUG 2022-02-14 16:38:17,993 dispatch pc=696, inst=STORE_FAST(arg=39, lineno=146)
DEBUG 2022-02-14 16:38:17,993 stack ['$phi688.0', '$694binary_add.4']
DEBUG 2022-02-14 16:38:17,993 dispatch pc=698, inst=LOAD_FAST(arg=18, lineno=147)
DEBUG 2022-02-14 16:38:17,993 stack ['$phi688.0']
DEBUG 2022-02-14 16:38:17,993 dispatch pc=700, inst=LOAD_FAST(arg=19, lineno=147)
DEBUG 2022-02-14 16:38:17,993 stack ['$phi688.0', '$H_batch698.5']
DEBUG 2022-02-14 16:38:17,993 dispatch pc=702, inst=DUP_TOP_TWO(arg=None, lineno=147)
DEBUG 2022-02-14 16:38:17,994 stack ['$phi688.0', '$H_batch698.5', '$j700.6']
DEBUG 2022-02-14 16:38:17,994 dispatch pc=704, inst=BINARY_SUBSCR(arg=None, lineno=147)
DEBUG 2022-02-14 16:38:17,994 stack ['$phi688.0', '$H_batch698.5', '$j700.6', '$702dup_top_two.7', '$702dup_top_two.8']
DEBUG 2022-02-14 16:38:17,994 dispatch pc=706, inst=LOAD_CONST(arg=7, lineno=147)
DEBUG 2022-02-14 16:38:17,994 stack ['$phi688.0', '$H_batch698.5', '$j700.6', '$704binary_subscr.9']
DEBUG 2022-02-14 16:38:17,994 dispatch pc=708, inst=LOAD_FAST(arg=39, lineno=147)
DEBUG 2022-02-14 16:38:17,994 stack ['$phi688.0', '$H_batch698.5', '$j700.6', '$704binary_subscr.9', '$const706.10']
DEBUG 2022-02-14 16:38:17,994 dispatch pc=710, inst=LOAD_CONST(arg=3, lineno=147)
DEBUG 2022-02-14 16:38:17,994 stack ['$phi688.0', '$H_batch698.5', '$j700.6', '$704binary_subscr.9', '$const706.10', '$x708.11']
DEBUG 2022-02-14 16:38:17,994 dispatch pc=712, inst=BINARY_FLOOR_DIVIDE(arg=None, lineno=147)
DEBUG 2022-02-14 16:38:17,994 stack ['$phi688.0', '$H_batch698.5', '$j700.6', '$704binary_subscr.9', '$const706.10', '$x708.11', '$const710.12']
DEBUG 2022-02-14 16:38:17,994 dispatch pc=714, inst=BINARY_POWER(arg=None, lineno=147)
DEBUG 2022-02-14 16:38:17,994 stack ['$phi688.0', '$H_batch698.5', '$j700.6', '$704binary_subscr.9', '$const706.10', '$712binary_floor_divide.13']
DEBUG 2022-02-14 16:38:17,994 dispatch pc=716, inst=INPLACE_MULTIPLY(arg=None, lineno=147)
DEBUG 2022-02-14 16:38:17,994 stack ['$phi688.0', '$H_batch698.5', '$j700.6', '$704binary_subscr.9', '$714binary_power.14']
DEBUG 2022-02-14 16:38:17,994 dispatch pc=718, inst=ROT_THREE(arg=None, lineno=147)
DEBUG 2022-02-14 16:38:17,994 stack ['$phi688.0', '$H_batch698.5', '$j700.6', '$716inplace_multiply.15']
DEBUG 2022-02-14 16:38:17,994 dispatch pc=720, inst=STORE_SUBSCR(arg=None, lineno=147)
DEBUG 2022-02-14 16:38:17,994 stack ['$phi688.0', '$716inplace_multiply.15', '$H_batch698.5', '$j700.6']
DEBUG 2022-02-14 16:38:17,994 dispatch pc=722, inst=JUMP_ABSOLUTE(arg=686, lineno=147)
DEBUG 2022-02-14 16:38:17,994 stack ['$phi688.0']
DEBUG 2022-02-14 16:38:17,994 end state. edges=[Edge(pc=686, stack=('$phi688.0',), blockstack=(), npush=0)]
DEBUG 2022-02-14 16:38:17,994 pending: deque([State(pc_initial=300 nstack_initial=1), State(pc_initial=314 nstack_initial=1), State(pc_initial=262 nstack_initial=2), State(pc_initial=686 nstack_initial=1)])
DEBUG 2022-02-14 16:38:17,994 stack: ['$phi300.0']
DEBUG 2022-02-14 16:38:17,994 dispatch pc=300, inst=LOAD_CONST(arg=3, lineno=114)
DEBUG 2022-02-14 16:38:17,995 stack ['$phi300.0']
DEBUG 2022-02-14 16:38:17,995 dispatch pc=302, inst=LOAD_FAST(arg=21, lineno=114)
DEBUG 2022-02-14 16:38:17,995 stack ['$phi300.0', '$const300.1']
DEBUG 2022-02-14 16:38:17,995 dispatch pc=304, inst=BINARY_MULTIPLY(arg=None, lineno=114)
DEBUG 2022-02-14 16:38:17,995 stack ['$phi300.0', '$const300.1', '$kept_edges302.2']
DEBUG 2022-02-14 16:38:17,995 dispatch pc=306, inst=LOAD_FAST(arg=14, lineno=114)
DEBUG 2022-02-14 16:38:17,995 stack ['$phi300.0', '$304binary_multiply.3']
DEBUG 2022-02-14 16:38:17,995 dispatch pc=308, inst=BINARY_SUBTRACT(arg=None, lineno=114)
DEBUG 2022-02-14 16:38:17,995 stack ['$phi300.0', '$304binary_multiply.3', '$edge_reps306.4']
DEBUG 2022-02-14 16:38:17,995 dispatch pc=310, inst=STORE_FAST(arg=25, lineno=114)
DEBUG 2022-02-14 16:38:17,995 stack ['$phi300.0', '$308binary_subtract.5']
DEBUG 2022-02-14 16:38:17,995 dispatch pc=312, inst=JUMP_FORWARD(arg=4, lineno=114)
DEBUG 2022-02-14 16:38:17,995 stack ['$phi300.0']
DEBUG 2022-02-14 16:38:17,995 end state. edges=[Edge(pc=318, stack=('$phi300.0',), blockstack=(), npush=0)]
DEBUG 2022-02-14 16:38:17,995 pending: deque([State(pc_initial=314 nstack_initial=1), State(pc_initial=262 nstack_initial=2), State(pc_initial=686 nstack_initial=1), State(pc_initial=318 nstack_initial=1)])
DEBUG 2022-02-14 16:38:17,995 stack: ['$phi314.0']
DEBUG 2022-02-14 16:38:17,995 dispatch pc=314, inst=LOAD_FAST(arg=21, lineno=116)
DEBUG 2022-02-14 16:38:17,995 stack ['$phi314.0']
DEBUG 2022-02-14 16:38:17,995 dispatch pc=316, inst=STORE_FAST(arg=25, lineno=116)
DEBUG 2022-02-14 16:38:17,995 stack ['$phi314.0', '$kept_edges314.1']
DEBUG 2022-02-14 16:38:17,995 end state. edges=[Edge(pc=318, stack=('$phi314.0',), blockstack=(), npush=0)]
DEBUG 2022-02-14 16:38:17,995 pending: deque([State(pc_initial=262 nstack_initial=2), State(pc_initial=686 nstack_initial=1), State(pc_initial=318 nstack_initial=1), State(pc_initial=318 nstack_initial=1)])
DEBUG 2022-02-14 16:38:17,995 pending: deque([State(pc_initial=686 nstack_initial=1), State(pc_initial=318 nstack_initial=1), State(pc_initial=318 nstack_initial=1)])
DEBUG 2022-02-14 16:38:17,995 pending: deque([State(pc_initial=318 nstack_initial=1), State(pc_initial=318 nstack_initial=1)])
DEBUG 2022-02-14 16:38:17,995 stack: ['$phi318.0']
DEBUG 2022-02-14 16:38:17,996 dispatch pc=318, inst=LOAD_GLOBAL(arg=14, lineno=118)
DEBUG 2022-02-14 16:38:17,996 stack ['$phi318.0']
DEBUG 2022-02-14 16:38:17,996 dispatch pc=320, inst=LOAD_FAST(arg=25, lineno=118)
DEBUG 2022-02-14 16:38:17,996 stack ['$phi318.0', '$318load_global.1']
DEBUG 2022-02-14 16:38:17,996 dispatch pc=322, inst=LOAD_FAST(arg=0, lineno=118)
DEBUG 2022-02-14 16:38:17,996 stack ['$phi318.0', '$318load_global.1', '$delta320.2']
DEBUG 2022-02-14 16:38:17,996 dispatch pc=324, inst=LOAD_FAST(arg=1, lineno=118)
DEBUG 2022-02-14 16:38:17,996 stack ['$phi318.0', '$318load_global.1', '$delta320.2', '$A322.3']
DEBUG 2022-02-14 16:38:17,996 dispatch pc=326, inst=LOAD_FAST(arg=8, lineno=118)
DEBUG 2022-02-14 16:38:17,996 stack ['$phi318.0', '$318load_global.1', '$delta320.2', '$A322.3', '$D324.4']
DEBUG 2022-02-14 16:38:17,996 dispatch pc=328, inst=CALL_FUNCTION(arg=4, lineno=118)
DEBUG 2022-02-14 16:38:17,996 stack ['$phi318.0', '$318load_global.1', '$delta320.2', '$A322.3', '$D324.4', '$oddV326.5']
DEBUG 2022-02-14 16:38:17,996 dispatch pc=330, inst=UNPACK_SEQUENCE(arg=4, lineno=118)
DEBUG 2022-02-14 16:38:17,996 stack ['$phi318.0', '$328call_function.6']
DEBUG 2022-02-14 16:38:17,996 dispatch pc=332, inst=STORE_FAST(arg=26, lineno=118)
DEBUG 2022-02-14 16:38:17,996 stack ['$phi318.0', '$330unpack_sequence.10', '$330unpack_sequence.9', '$330unpack_sequence.8', '$330unpack_sequence.7']
DEBUG 2022-02-14 16:38:17,996 dispatch pc=334, inst=STORE_FAST(arg=27, lineno=118)
DEBUG 2022-02-14 16:38:17,996 stack ['$phi318.0', '$330unpack_sequence.10', '$330unpack_sequence.9', '$330unpack_sequence.8']
DEBUG 2022-02-14 16:38:17,996 dispatch pc=336, inst=STORE_FAST(arg=28, lineno=118)
DEBUG 2022-02-14 16:38:17,996 stack ['$phi318.0', '$330unpack_sequence.10', '$330unpack_sequence.9']
DEBUG 2022-02-14 16:38:17,996 dispatch pc=338, inst=STORE_FAST(arg=29, lineno=118)
DEBUG 2022-02-14 16:38:17,996 stack ['$phi318.0', '$330unpack_sequence.10']
DEBUG 2022-02-14 16:38:17,996 dispatch pc=340, inst=LOAD_GLOBAL(arg=15, lineno=120)
DEBUG 2022-02-14 16:38:17,996 stack ['$phi318.0']
DEBUG 2022-02-14 16:38:17,996 dispatch pc=342, inst=LOAD_FAST(arg=26, lineno=120)
DEBUG 2022-02-14 16:38:17,996 stack ['$phi318.0', '$340load_global.12']
DEBUG 2022-02-14 16:38:17,996 dispatch pc=344, inst=CALL_FUNCTION(arg=1, lineno=120)
DEBUG 2022-02-14 16:38:17,997 stack ['$phi318.0', '$340load_global.12', '$AX_S342.13']
DEBUG 2022-02-14 16:38:17,997 dispatch pc=346, inst=STORE_FAST(arg=30, lineno=120)
DEBUG 2022-02-14 16:38:17,997 stack ['$phi318.0', '$344call_function.14']
DEBUG 2022-02-14 16:38:17,997 dispatch pc=348, inst=LOAD_FAST(arg=21, lineno=122)
DEBUG 2022-02-14 16:38:17,997 stack ['$phi318.0']
DEBUG 2022-02-14 16:38:17,997 dispatch pc=350, inst=LOAD_CONST(arg=1, lineno=122)
DEBUG 2022-02-14 16:38:17,997 stack ['$phi318.0', '$kept_edges348.15']
DEBUG 2022-02-14 16:38:17,997 dispatch pc=352, inst=BINARY_SUBSCR(arg=None, lineno=122)
DEBUG 2022-02-14 16:38:17,997 stack ['$phi318.0', '$kept_edges348.15', '$const350.16']
DEBUG 2022-02-14 16:38:17,997 dispatch pc=354, inst=LOAD_CONST(arg=1, lineno=122)
DEBUG 2022-02-14 16:38:17,997 stack ['$phi318.0', '$352binary_subscr.17']
DEBUG 2022-02-14 16:38:17,997 dispatch pc=356, inst=COMPARE_OP(arg=2, lineno=122)
DEBUG 2022-02-14 16:38:17,997 stack ['$phi318.0', '$352binary_subscr.17', '$const354.18']
DEBUG 2022-02-14 16:38:17,997 dispatch pc=358, inst=POP_JUMP_IF_FALSE(arg=450, lineno=122)
DEBUG 2022-02-14 16:38:17,997 stack ['$phi318.0', '$356compare_op.19']
DEBUG 2022-02-14 16:38:17,997 end state. edges=[Edge(pc=362, stack=('$phi318.0',), blockstack=(), npush=0), Edge(pc=450, stack=('$phi318.0',), blockstack=(), npush=0)]
DEBUG 2022-02-14 16:38:17,997 pending: deque([State(pc_initial=318 nstack_initial=1), State(pc_initial=362 nstack_initial=1), State(pc_initial=450 nstack_initial=1)])
DEBUG 2022-02-14 16:38:17,997 pending: deque([State(pc_initial=362 nstack_initial=1), State(pc_initial=450 nstack_initial=1)])
DEBUG 2022-02-14 16:38:17,997 stack: ['$phi362.0']
DEBUG 2022-02-14 16:38:17,997 dispatch pc=362, inst=LOAD_FAST(arg=21, lineno=122)
DEBUG 2022-02-14 16:38:17,997 stack ['$phi362.0']
DEBUG 2022-02-14 16:38:17,997 dispatch pc=364, inst=LOAD_CONST(arg=2, lineno=122)
DEBUG 2022-02-14 16:38:17,997 stack ['$phi362.0', '$kept_edges362.1']
DEBUG 2022-02-14 16:38:17,997 dispatch pc=366, inst=BINARY_SUBSCR(arg=None, lineno=122)
DEBUG 2022-02-14 16:38:17,997 stack ['$phi362.0', '$kept_edges362.1', '$const364.2']
DEBUG 2022-02-14 16:38:17,997 dispatch pc=368, inst=LOAD_CONST(arg=1, lineno=122)
DEBUG 2022-02-14 16:38:17,998 stack ['$phi362.0', '$366binary_subscr.3']
DEBUG 2022-02-14 16:38:17,998 dispatch pc=370, inst=COMPARE_OP(arg=2, lineno=122)
DEBUG 2022-02-14 16:38:17,998 stack ['$phi362.0', '$366binary_subscr.3', '$const368.4']
DEBUG 2022-02-14 16:38:17,998 dispatch pc=372, inst=POP_JUMP_IF_FALSE(arg=450, lineno=122)
DEBUG 2022-02-14 16:38:17,998 stack ['$phi362.0', '$370compare_op.5']
DEBUG 2022-02-14 16:38:17,998 end state. edges=[Edge(pc=376, stack=('$phi362.0',), blockstack=(), npush=0), Edge(pc=450, stack=('$phi362.0',), blockstack=(), npush=0)]
DEBUG 2022-02-14 16:38:17,998 pending: deque([State(pc_initial=450 nstack_initial=1), State(pc_initial=376 nstack_initial=1), State(pc_initial=450 nstack_initial=1)])
DEBUG 2022-02-14 16:38:17,998 stack: ['$phi450.0']
DEBUG 2022-02-14 16:38:17,998 dispatch pc=450, inst=LOAD_GLOBAL(arg=18, lineno=128)
DEBUG 2022-02-14 16:38:17,998 stack ['$phi450.0']
DEBUG 2022-02-14 16:38:17,998 dispatch pc=452, inst=LOAD_FAST(arg=30, lineno=128)
DEBUG 2022-02-14 16:38:17,998 stack ['$phi450.0', '$450load_global.1']
DEBUG 2022-02-14 16:38:17,998 dispatch pc=454, inst=LOAD_FAST(arg=26, lineno=128)
DEBUG 2022-02-14 16:38:17,998 stack ['$phi450.0', '$450load_global.1', '$E452.2']
DEBUG 2022-02-14 16:38:17,998 dispatch pc=456, inst=LOAD_FAST(arg=27, lineno=128)
DEBUG 2022-02-14 16:38:17,998 stack ['$phi450.0', '$450load_global.1', '$E452.2', '$AX_S454.3']
DEBUG 2022-02-14 16:38:17,998 dispatch pc=458, inst=LOAD_FAST(arg=28, lineno=128)
DEBUG 2022-02-14 16:38:17,998 stack ['$phi450.0', '$450load_global.1', '$E452.2', '$AX_S454.3', '$XD_S456.4']
DEBUG 2022-02-14 16:38:17,998 dispatch pc=460, inst=LOAD_FAST(arg=13, lineno=128)
DEBUG 2022-02-14 16:38:17,998 stack ['$phi450.0', '$450load_global.1', '$E452.2', '$AX_S454.3', '$XD_S456.4', '$D_S458.5']
DEBUG 2022-02-14 16:38:17,998 dispatch pc=462, inst=CALL_FUNCTION(arg=5, lineno=128)
DEBUG 2022-02-14 16:38:17,998 stack ['$phi450.0', '$450load_global.1', '$E452.2', '$AX_S454.3', '$XD_S456.4', '$D_S458.5', '$N_max460.6']
DEBUG 2022-02-14 16:38:17,998 dispatch pc=464, inst=STORE_FAST(arg=34, lineno=128)
DEBUG 2022-02-14 16:38:17,998 stack ['$phi450.0', '$462call_function.7']
DEBUG 2022-02-14 16:38:17,998 dispatch pc=466, inst=LOAD_GLOBAL(arg=17, lineno=129)
DEBUG 2022-02-14 16:38:17,998 stack ['$phi450.0']
DEBUG 2022-02-14 16:38:17,999 dispatch pc=468, inst=LOAD_FAST(arg=30, lineno=129)
DEBUG 2022-02-14 16:38:17,999 stack ['$phi450.0', '$466load_global.8']
DEBUG 2022-02-14 16:38:17,999 dispatch pc=470, inst=LOAD_FAST(arg=26, lineno=129)
DEBUG 2022-02-14 16:38:17,999 stack ['$phi450.0', '$466load_global.8', '$E468.9']
DEBUG 2022-02-14 16:38:17,999 dispatch pc=472, inst=LOAD_FAST(arg=27, lineno=129)
DEBUG 2022-02-14 16:38:17,999 stack ['$phi450.0', '$466load_global.8', '$E468.9', '$AX_S470.10']
DEBUG 2022-02-14 16:38:17,999 dispatch pc=474, inst=LOAD_FAST(arg=28, lineno=129)
DEBUG 2022-02-14 16:38:17,999 stack ['$phi450.0', '$466load_global.8', '$E468.9', '$AX_S470.10', '$XD_S472.11']
DEBUG 2022-02-14 16:38:17,999 dispatch pc=476, inst=LOAD_FAST(arg=13, lineno=129)
DEBUG 2022-02-14 16:38:17,999 stack ['$phi450.0', '$466load_global.8', '$E468.9', '$AX_S470.10', '$XD_S472.11', '$D_S474.12']
DEBUG 2022-02-14 16:38:17,999 dispatch pc=478, inst=LOAD_FAST(arg=7, lineno=129)
DEBUG 2022-02-14 16:38:17,999 stack ['$phi450.0', '$466load_global.8', '$E468.9', '$AX_S470.10', '$XD_S472.11', '$D_S474.12', '$N_max476.13']
DEBUG 2022-02-14 16:38:17,999 dispatch pc=480, inst=LOAD_FAST(arg=29, lineno=129)
DEBUG 2022-02-14 16:38:17,999 stack ['$phi450.0', '$466load_global.8', '$E468.9', '$AX_S470.10', '$XD_S472.11', '$D_S474.12', '$N_max476.13', '$oddloop478.14']
DEBUG 2022-02-14 16:38:17,999 dispatch pc=482, inst=CALL_FUNCTION(arg=7, lineno=129)
DEBUG 2022-02-14 16:38:17,999 stack ['$phi450.0', '$466load_global.8', '$E468.9', '$AX_S470.10', '$XD_S472.11', '$D_S474.12', '$N_max476.13', '$oddloop478.14', '$oddVX_S480.15']
DEBUG 2022-02-14 16:38:17,999 dispatch pc=484, inst=STORE_FAST(arg=35, lineno=129)
DEBUG 2022-02-14 16:38:17,999 stack ['$phi450.0', '$482call_function.16']
DEBUG 2022-02-14 16:38:17,999 dispatch pc=486, inst=LOAD_GLOBAL(arg=13, lineno=131)
DEBUG 2022-02-14 16:38:17,999 stack ['$phi450.0']
DEBUG 2022-02-14 16:38:17,999 dispatch pc=488, inst=LOAD_CONST(arg=3, lineno=131)
DEBUG 2022-02-14 16:38:17,999 stack ['$phi450.0', '$486load_global.17']
DEBUG 2022-02-14 16:38:17,999 dispatch pc=490, inst=LOAD_FAST(arg=21, lineno=131)
DEBUG 2022-02-14 16:38:17,999 stack ['$phi450.0', '$486load_global.17', '$const488.18']
DEBUG 2022-02-14 16:38:18,000 dispatch pc=492, inst=LOAD_CONST(arg=1, lineno=131)
DEBUG 2022-02-14 16:38:18,000 stack ['$phi450.0', '$486load_global.17', '$const488.18', '$kept_edges490.19']
DEBUG 2022-02-14 16:38:18,000 dispatch pc=494, inst=BINARY_SUBSCR(arg=None, lineno=131)
DEBUG 2022-02-14 16:38:18,000 stack ['$phi450.0', '$486load_global.17', '$const488.18', '$kept_edges490.19', '$const492.20']
DEBUG 2022-02-14 16:38:18,000 dispatch pc=496, inst=BINARY_MULTIPLY(arg=None, lineno=131)
DEBUG 2022-02-14 16:38:18,000 stack ['$phi450.0', '$486load_global.17', '$const488.18', '$494binary_subscr.21']
DEBUG 2022-02-14 16:38:18,000 dispatch pc=498, inst=LOAD_CONST(arg=2, lineno=131)
DEBUG 2022-02-14 16:38:18,000 stack ['$phi450.0', '$486load_global.17', '$496binary_multiply.22']
DEBUG 2022-02-14 16:38:18,000 dispatch pc=500, inst=BINARY_ADD(arg=None, lineno=131)
DEBUG 2022-02-14 16:38:18,000 stack ['$phi450.0', '$486load_global.17', '$496binary_multiply.22', '$const498.23']
DEBUG 2022-02-14 16:38:18,000 dispatch pc=502, inst=LOAD_CONST(arg=3, lineno=131)
DEBUG 2022-02-14 16:38:18,000 stack ['$phi450.0', '$486load_global.17', '$500binary_add.24']
DEBUG 2022-02-14 16:38:18,000 dispatch pc=504, inst=LOAD_FAST(arg=3, lineno=131)
DEBUG 2022-02-14 16:38:18,000 stack ['$phi450.0', '$486load_global.17', '$500binary_add.24', '$const502.25']
DEBUG 2022-02-14 16:38:18,000 dispatch pc=506, inst=BINARY_MULTIPLY(arg=None, lineno=131)
DEBUG 2022-02-14 16:38:18,000 stack ['$phi450.0', '$486load_global.17', '$500binary_add.24', '$const502.25', '$batch_max504.26']
DEBUG 2022-02-14 16:38:18,000 dispatch pc=508, inst=LOAD_FAST(arg=4, lineno=131)
DEBUG 2022-02-14 16:38:18,000 stack ['$phi450.0', '$486load_global.17', '$500binary_add.24', '$506binary_multiply.27']
DEBUG 2022-02-14 16:38:18,000 dispatch pc=510, inst=BINARY_ADD(arg=None, lineno=131)
DEBUG 2022-02-14 16:38:18,000 stack ['$phi450.0', '$486load_global.17', '$500binary_add.24', '$506binary_multiply.27', '$even_cutoff508.28']
DEBUG 2022-02-14 16:38:18,000 dispatch pc=512, inst=LOAD_CONST(arg=3, lineno=131)
DEBUG 2022-02-14 16:38:18,000 stack ['$phi450.0', '$486load_global.17', '$500binary_add.24', '$510binary_add.29']
DEBUG 2022-02-14 16:38:18,000 dispatch pc=514, inst=BINARY_ADD(arg=None, lineno=131)
DEBUG 2022-02-14 16:38:18,000 stack ['$phi450.0', '$486load_global.17', '$500binary_add.24', '$510binary_add.29', '$const512.30']
DEBUG 2022-02-14 16:38:18,000 dispatch pc=516, inst=CALL_FUNCTION(arg=2, lineno=131)
DEBUG 2022-02-14 16:38:18,000 stack ['$phi450.0', '$486load_global.17', '$500binary_add.24', '$514binary_add.31']
DEBUG 2022-02-14 16:38:18,001 dispatch pc=518, inst=GET_ITER(arg=None, lineno=131)
DEBUG 2022-02-14 16:38:18,001 stack ['$phi450.0', '$516call_function.32']
DEBUG 2022-02-14 16:38:18,001 end state. edges=[Edge(pc=520, stack=('$phi450.0', '$518get_iter.33'), blockstack=(), npush=0)]
DEBUG 2022-02-14 16:38:18,001 pending: deque([State(pc_initial=376 nstack_initial=1), State(pc_initial=450 nstack_initial=1), State(pc_initial=520 nstack_initial=2)])
DEBUG 2022-02-14 16:38:18,001 stack: ['$phi376.0']
DEBUG 2022-02-14 16:38:18,001 dispatch pc=376, inst=LOAD_GLOBAL(arg=16, lineno=123)
DEBUG 2022-02-14 16:38:18,001 stack ['$phi376.0']
DEBUG 2022-02-14 16:38:18,001 dispatch pc=378, inst=LOAD_FAST(arg=25, lineno=123)
DEBUG 2022-02-14 16:38:18,001 stack ['$phi376.0', '$376load_global.1']
DEBUG 2022-02-14 16:38:18,001 dispatch pc=380, inst=LOAD_FAST(arg=10, lineno=123)
DEBUG 2022-02-14 16:38:18,001 stack ['$phi376.0', '$376load_global.1', '$delta378.2']
DEBUG 2022-02-14 16:38:18,001 dispatch pc=382, inst=CALL_FUNCTION(arg=2, lineno=123)
DEBUG 2022-02-14 16:38:18,001 stack ['$phi376.0', '$376load_global.1', '$delta378.2', '$oddV0380.3']
DEBUG 2022-02-14 16:38:18,001 dispatch pc=384, inst=STORE_FAST(arg=31, lineno=123)
DEBUG 2022-02-14 16:38:18,001 stack ['$phi376.0', '$382call_function.4']
DEBUG 2022-02-14 16:38:18,001 dispatch pc=386, inst=LOAD_CONST(arg=6, lineno=124)
DEBUG 2022-02-14 16:38:18,001 stack ['$phi376.0']
DEBUG 2022-02-14 16:38:18,001 dispatch pc=388, inst=LOAD_FAST(arg=12, lineno=124)
DEBUG 2022-02-14 16:38:18,001 stack ['$phi376.0', '$const386.5']
DEBUG 2022-02-14 16:38:18,001 dispatch pc=390, inst=LOAD_CONST(arg=3, lineno=124)
DEBUG 2022-02-14 16:38:18,001 stack ['$phi376.0', '$const386.5', '$N_fixed388.6']
DEBUG 2022-02-14 16:38:18,001 dispatch pc=392, inst=BINARY_FLOOR_DIVIDE(arg=None, lineno=124)
DEBUG 2022-02-14 16:38:18,001 stack ['$phi376.0', '$const386.5', '$N_fixed388.6', '$const390.7']
DEBUG 2022-02-14 16:38:18,001 dispatch pc=394, inst=LOAD_FAST(arg=22, lineno=124)
DEBUG 2022-02-14 16:38:18,002 stack ['$phi376.0', '$const386.5', '$392binary_floor_divide.8']
DEBUG 2022-02-14 16:38:18,002 dispatch pc=396, inst=BINARY_SUBTRACT(arg=None, lineno=124)
DEBUG 2022-02-14 16:38:18,002 stack ['$phi376.0', '$const386.5', '$392binary_floor_divide.8', '$edges_sum394.9']
DEBUG 2022-02-14 16:38:18,002 dispatch pc=398, inst=BINARY_POWER(arg=None, lineno=124)
DEBUG 2022-02-14 16:38:18,002 stack ['$phi376.0', '$const386.5', '$396binary_subtract.10']
DEBUG 2022-02-14 16:38:18,002 dispatch pc=400, inst=STORE_FAST(arg=32, lineno=124)
DEBUG 2022-02-14 16:38:18,002 stack ['$phi376.0', '$398binary_power.11']
DEBUG 2022-02-14 16:38:18,002 dispatch pc=402, inst=LOAD_GLOBAL(arg=17, lineno=125)
DEBUG 2022-02-14 16:38:18,002 stack ['$phi376.0']
DEBUG 2022-02-14 16:38:18,002 dispatch pc=404, inst=LOAD_FAST(arg=30, lineno=125)
DEBUG 2022-02-14 16:38:18,002 stack ['$phi376.0', '$402load_global.12']
DEBUG 2022-02-14 16:38:18,002 dispatch pc=406, inst=LOAD_FAST(arg=26, lineno=125)
DEBUG 2022-02-14 16:38:18,002 stack ['$phi376.0', '$402load_global.12', '$E404.13']
DEBUG 2022-02-14 16:38:18,002 dispatch pc=408, inst=LOAD_FAST(arg=27, lineno=125)
DEBUG 2022-02-14 16:38:18,002 stack ['$phi376.0', '$402load_global.12', '$E404.13', '$AX_S406.14']
DEBUG 2022-02-14 16:38:18,002 dispatch pc=410, inst=LOAD_FAST(arg=28, lineno=125)
DEBUG 2022-02-14 16:38:18,002 stack ['$phi376.0', '$402load_global.12', '$E404.13', '$AX_S406.14', '$XD_S408.15']
DEBUG 2022-02-14 16:38:18,002 dispatch pc=412, inst=LOAD_FAST(arg=12, lineno=125)
DEBUG 2022-02-14 16:38:18,002 stack ['$phi376.0', '$402load_global.12', '$E404.13', '$AX_S406.14', '$XD_S408.15', '$D_S410.16']
DEBUG 2022-02-14 16:38:18,002 dispatch pc=414, inst=LOAD_FAST(arg=9, lineno=125)
DEBUG 2022-02-14 16:38:18,002 stack ['$phi376.0', '$402load_global.12', '$E404.13', '$AX_S406.14', '$XD_S408.15', '$D_S410.16', '$N_fixed412.17']
DEBUG 2022-02-14 16:38:18,002 dispatch pc=416, inst=LOAD_FAST(arg=31, lineno=125)
DEBUG 2022-02-14 16:38:18,002 stack ['$phi376.0', '$402load_global.12', '$E404.13', '$AX_S406.14', '$XD_S408.15', '$D_S410.16', '$N_fixed412.17', '$oddloop0414.18']
DEBUG 2022-02-14 16:38:18,002 dispatch pc=418, inst=CALL_FUNCTION(arg=7, lineno=125)
DEBUG 2022-02-14 16:38:18,002 stack ['$phi376.0', '$402load_global.12', '$E404.13', '$AX_S406.14', '$XD_S408.15', '$D_S410.16', '$N_fixed412.17', '$oddloop0414.18', '$oddVX_S0416.19']
DEBUG 2022-02-14 16:38:18,003 dispatch pc=420, inst=LOAD_FAST(arg=12, lineno=125)
DEBUG 2022-02-14 16:38:18,003 stack ['$phi376.0', '$418call_function.20']
DEBUG 2022-02-14 16:38:18,003 dispatch pc=422, inst=BINARY_SUBSCR(arg=None, lineno=125)
DEBUG 2022-02-14 16:38:18,003 stack ['$phi376.0', '$418call_function.20', '$N_fixed420.21']
DEBUG 2022-02-14 16:38:18,003 dispatch pc=424, inst=STORE_FAST(arg=33, lineno=125)
DEBUG 2022-02-14 16:38:18,003 stack ['$phi376.0', '$422binary_subscr.22']
DEBUG 2022-02-14 16:38:18,003 dispatch pc=426, inst=LOAD_FAST(arg=18, lineno=126)
DEBUG 2022-02-14 16:38:18,003 stack ['$phi376.0']
DEBUG 2022-02-14 16:38:18,003 dispatch pc=428, inst=LOAD_CONST(arg=1, lineno=126)
DEBUG 2022-02-14 16:38:18,003 stack ['$phi376.0', '$H_batch426.23']
DEBUG 2022-02-14 16:38:18,003 dispatch pc=430, inst=DUP_TOP_TWO(arg=None, lineno=126)
DEBUG 2022-02-14 16:38:18,003 stack ['$phi376.0', '$H_batch426.23', '$const428.24']
DEBUG 2022-02-14 16:38:18,003 dispatch pc=432, inst=BINARY_SUBSCR(arg=None, lineno=126)
DEBUG 2022-02-14 16:38:18,003 stack ['$phi376.0', '$H_batch426.23', '$const428.24', '$430dup_top_two.25', '$430dup_top_two.26']
DEBUG 2022-02-14 16:38:18,003 dispatch pc=434, inst=LOAD_FAST(arg=23, lineno=126)
DEBUG 2022-02-14 16:38:18,003 stack ['$phi376.0', '$H_batch426.23', '$const428.24', '$432binary_subscr.27']
DEBUG 2022-02-14 16:38:18,003 dispatch pc=436, inst=LOAD_FAST(arg=32, lineno=126)
DEBUG 2022-02-14 16:38:18,003 stack ['$phi376.0', '$H_batch426.23', '$const428.24', '$432binary_subscr.27', '$binom_prod434.28']
DEBUG 2022-02-14 16:38:18,003 dispatch pc=438, inst=BINARY_MULTIPLY(arg=None, lineno=126)
DEBUG 2022-02-14 16:38:18,003 stack ['$phi376.0', '$H_batch426.23', '$const428.24', '$432binary_subscr.27', '$binom_prod434.28', '$plus_minus436.29']
DEBUG 2022-02-14 16:38:18,003 dispatch pc=440, inst=LOAD_FAST(arg=33, lineno=126)
DEBUG 2022-02-14 16:38:18,003 stack ['$phi376.0', '$H_batch426.23', '$const428.24', '$432binary_subscr.27', '$438binary_multiply.30']
DEBUG 2022-02-14 16:38:18,004 dispatch pc=442, inst=BINARY_MULTIPLY(arg=None, lineno=126)
DEBUG 2022-02-14 16:38:18,004 stack ['$phi376.0', '$H_batch426.23', '$const428.24', '$432binary_subscr.27', '$438binary_multiply.30', '$f440.31']
DEBUG 2022-02-14 16:38:18,004 dispatch pc=444, inst=INPLACE_ADD(arg=None, lineno=126)
DEBUG 2022-02-14 16:38:18,004 stack ['$phi376.0', '$H_batch426.23', '$const428.24', '$432binary_subscr.27', '$442binary_multiply.32']
DEBUG 2022-02-14 16:38:18,004 dispatch pc=446, inst=ROT_THREE(arg=None, lineno=126)
DEBUG 2022-02-14 16:38:18,004 stack ['$phi376.0', '$H_batch426.23', '$const428.24', '$444inplace_add.33']
DEBUG 2022-02-14 16:38:18,004 dispatch pc=448, inst=STORE_SUBSCR(arg=None, lineno=126)
DEBUG 2022-02-14 16:38:18,004 stack ['$phi376.0', '$444inplace_add.33', '$H_batch426.23', '$const428.24']
DEBUG 2022-02-14 16:38:18,004 end state. edges=[Edge(pc=450, stack=('$phi376.0',), blockstack=(), npush=0)]
DEBUG 2022-02-14 16:38:18,004 pending: deque([State(pc_initial=450 nstack_initial=1), State(pc_initial=520 nstack_initial=2), State(pc_initial=450 nstack_initial=1)])
DEBUG 2022-02-14 16:38:18,004 pending: deque([State(pc_initial=520 nstack_initial=2), State(pc_initial=450 nstack_initial=1)])
DEBUG 2022-02-14 16:38:18,004 stack: ['$phi520.0', '$phi520.1']
DEBUG 2022-02-14 16:38:18,004 dispatch pc=520, inst=FOR_ITER(arg=134, lineno=131)
DEBUG 2022-02-14 16:38:18,004 stack ['$phi520.0', '$phi520.1']
DEBUG 2022-02-14 16:38:18,004 end state. edges=[Edge(pc=656, stack=('$phi520.0',), blockstack=(), npush=0), Edge(pc=522, stack=('$phi520.0', '$phi520.1', '$520for_iter.3'), blockstack=(), npush=0)]
DEBUG 2022-02-14 16:38:18,004 pending: deque([State(pc_initial=450 nstack_initial=1), State(pc_initial=656 nstack_initial=1), State(pc_initial=522 nstack_initial=3)])
DEBUG 2022-02-14 16:38:18,004 pending: deque([State(pc_initial=656 nstack_initial=1), State(pc_initial=522 nstack_initial=3)])
DEBUG 2022-02-14 16:38:18,004 stack: ['$phi656.0']
DEBUG 2022-02-14 16:38:18,004 dispatch pc=656, inst=LOAD_FAST(arg=18, lineno=142)
DEBUG 2022-02-14 16:38:18,004 stack ['$phi656.0']
DEBUG 2022-02-14 16:38:18,004 dispatch pc=658, inst=LOAD_FAST(arg=20, lineno=142)
DEBUG 2022-02-14 16:38:18,004 stack ['$phi656.0', '$H_batch656.1']
DEBUG 2022-02-14 16:38:18,004 dispatch pc=660, inst=INPLACE_ADD(arg=None, lineno=142)
DEBUG 2022-02-14 16:38:18,004 stack ['$phi656.0', '$H_batch656.1', '$Hnew658.2']
DEBUG 2022-02-14 16:38:18,004 dispatch pc=662, inst=STORE_FAST(arg=18, lineno=142)
DEBUG 2022-02-14 16:38:18,005 stack ['$phi656.0', '$660inplace_add.3']
DEBUG 2022-02-14 16:38:18,005 dispatch pc=664, inst=JUMP_ABSOLUTE(arg=192, lineno=142)
DEBUG 2022-02-14 16:38:18,005 stack ['$phi656.0']
DEBUG 2022-02-14 16:38:18,005 end state. edges=[Edge(pc=192, stack=('$phi656.0',), blockstack=(), npush=0)]
DEBUG 2022-02-14 16:38:18,005 pending: deque([State(pc_initial=522 nstack_initial=3), State(pc_initial=192 nstack_initial=1)])
DEBUG 2022-02-14 16:38:18,005 stack: ['$phi522.0', '$phi522.1', '$phi522.2']
DEBUG 2022-02-14 16:38:18,005 dispatch pc=522, inst=STORE_FAST(arg=36, lineno=131)
DEBUG 2022-02-14 16:38:18,005 stack ['$phi522.0', '$phi522.1', '$phi522.2']
DEBUG 2022-02-14 16:38:18,005 dispatch pc=524, inst=LOAD_FAST(arg=12, lineno=132)
DEBUG 2022-02-14 16:38:18,005 stack ['$phi522.0', '$phi522.1']
DEBUG 2022-02-14 16:38:18,005 dispatch pc=526, inst=LOAD_FAST(arg=36, lineno=132)
DEBUG 2022-02-14 16:38:18,005 stack ['$phi522.0', '$phi522.1', '$N_fixed524.3']
DEBUG 2022-02-14 16:38:18,005 dispatch pc=528, inst=BINARY_ADD(arg=None, lineno=132)
DEBUG 2022-02-14 16:38:18,005 stack ['$phi522.0', '$phi522.1', '$N_fixed524.3', '$N_det526.4']
DEBUG 2022-02-14 16:38:18,005 dispatch pc=530, inst=STORE_FAST(arg=37, lineno=132)
DEBUG 2022-02-14 16:38:18,005 stack ['$phi522.0', '$phi522.1', '$528binary_add.5']
DEBUG 2022-02-14 16:38:18,005 dispatch pc=532, inst=LOAD_CONST(arg=6, lineno=133)
DEBUG 2022-02-14 16:38:18,005 stack ['$phi522.0', '$phi522.1']
DEBUG 2022-02-14 16:38:18,005 dispatch pc=534, inst=LOAD_FAST(arg=37, lineno=133)
DEBUG 2022-02-14 16:38:18,005 stack ['$phi522.0', '$phi522.1', '$const532.6']
DEBUG 2022-02-14 16:38:18,005 dispatch pc=536, inst=LOAD_CONST(arg=3, lineno=133)
DEBUG 2022-02-14 16:38:18,005 stack ['$phi522.0', '$phi522.1', '$const532.6', '$N534.7']
DEBUG 2022-02-14 16:38:18,005 dispatch pc=538, inst=BINARY_FLOOR_DIVIDE(arg=None, lineno=133)
DEBUG 2022-02-14 16:38:18,005 stack ['$phi522.0', '$phi522.1', '$const532.6', '$N534.7', '$const536.8']
DEBUG 2022-02-14 16:38:18,005 dispatch pc=540, inst=LOAD_FAST(arg=22, lineno=133)
DEBUG 2022-02-14 16:38:18,005 stack ['$phi522.0', '$phi522.1', '$const532.6', '$538binary_floor_divide.9']
DEBUG 2022-02-14 16:38:18,006 dispatch pc=542, inst=BINARY_SUBTRACT(arg=None, lineno=133)
DEBUG 2022-02-14 16:38:18,006 stack ['$phi522.0', '$phi522.1', '$const532.6', '$538binary_floor_divide.9', '$edges_sum540.10']
DEBUG 2022-02-14 16:38:18,006 dispatch pc=544, inst=BINARY_POWER(arg=None, lineno=133)
DEBUG 2022-02-14 16:38:18,006 stack ['$phi522.0', '$phi522.1', '$const532.6', '$542binary_subtract.11']
DEBUG 2022-02-14 16:38:18,006 dispatch pc=546, inst=STORE_FAST(arg=32, lineno=133)
DEBUG 2022-02-14 16:38:18,006 stack ['$phi522.0', '$phi522.1', '$544binary_power.12']
DEBUG 2022-02-14 16:38:18,006 dispatch pc=548, inst=LOAD_FAST(arg=17, lineno=135)
DEBUG 2022-02-14 16:38:18,006 stack ['$phi522.0', '$phi522.1']
DEBUG 2022-02-14 16:38:18,006 dispatch pc=550, inst=LOAD_FAST(arg=36, lineno=135)
DEBUG 2022-02-14 16:38:18,006 stack ['$phi522.0', '$phi522.1', '$binoms548.13']
DEBUG 2022-02-14 16:38:18,006 dispatch pc=552, inst=LOAD_CONST(arg=2, lineno=135)
DEBUG 2022-02-14 16:38:18,006 stack ['$phi522.0', '$phi522.1', '$binoms548.13', '$N_det550.14']
DEBUG 2022-02-14 16:38:18,006 dispatch pc=554, inst=BINARY_SUBTRACT(arg=None, lineno=135)
DEBUG 2022-02-14 16:38:18,006 stack ['$phi522.0', '$phi522.1', '$binoms548.13', '$N_det550.14', '$const552.15']
DEBUG 2022-02-14 16:38:18,006 dispatch pc=556, inst=LOAD_CONST(arg=3, lineno=135)
DEBUG 2022-02-14 16:38:18,006 stack ['$phi522.0', '$phi522.1', '$binoms548.13', '$554binary_subtract.16']
DEBUG 2022-02-14 16:38:18,006 dispatch pc=558, inst=BINARY_FLOOR_DIVIDE(arg=None, lineno=135)
DEBUG 2022-02-14 16:38:18,006 stack ['$phi522.0', '$phi522.1', '$binoms548.13', '$554binary_subtract.16', '$const556.17']
DEBUG 2022-02-14 16:38:18,006 dispatch pc=560, inst=LOAD_FAST(arg=21, lineno=135)
DEBUG 2022-02-14 16:38:18,006 stack ['$phi522.0', '$phi522.1', '$binoms548.13', '$558binary_floor_divide.18']
DEBUG 2022-02-14 16:38:18,006 dispatch pc=562, inst=LOAD_CONST(arg=1, lineno=135)
DEBUG 2022-02-14 16:38:18,006 stack ['$phi522.0', '$phi522.1', '$binoms548.13', '$558binary_floor_divide.18', '$kept_edges560.19']
DEBUG 2022-02-14 16:38:18,006 dispatch pc=564, inst=BINARY_SUBSCR(arg=None, lineno=135)
DEBUG 2022-02-14 16:38:18,006 stack ['$phi522.0', '$phi522.1', '$binoms548.13', '$558binary_floor_divide.18', '$kept_edges560.19', '$const562.20']
DEBUG 2022-02-14 16:38:18,006 dispatch pc=566, inst=BUILD_TUPLE(arg=2, lineno=135)
DEBUG 2022-02-14 16:38:18,007 stack ['$phi522.0', '$phi522.1', '$binoms548.13', '$558binary_floor_divide.18', '$564binary_subscr.21']
DEBUG 2022-02-14 16:38:18,007 dispatch pc=568, inst=BINARY_SUBSCR(arg=None, lineno=135)
DEBUG 2022-02-14 16:38:18,007 stack ['$phi522.0', '$phi522.1', '$binoms548.13', '$566build_tuple.22']
DEBUG 2022-02-14 16:38:18,007 dispatch pc=570, inst=LOAD_FAST(arg=23, lineno=135)
DEBUG 2022-02-14 16:38:18,007 stack ['$phi522.0', '$phi522.1', '$568binary_subscr.23']
DEBUG 2022-02-14 16:38:18,007 dispatch pc=572, inst=BINARY_MULTIPLY(arg=None, lineno=135)
DEBUG 2022-02-14 16:38:18,007 stack ['$phi522.0', '$phi522.1', '$568binary_subscr.23', '$binom_prod570.24']
DEBUG 2022-02-14 16:38:18,007 dispatch pc=574, inst=STORE_FAST(arg=38, lineno=135)
DEBUG 2022-02-14 16:38:18,007 stack ['$phi522.0', '$phi522.1', '$572binary_multiply.25']
DEBUG 2022-02-14 16:38:18,007 dispatch pc=576, inst=LOAD_FAST(arg=37, lineno=137)
DEBUG 2022-02-14 16:38:18,007 stack ['$phi522.0', '$phi522.1']
DEBUG 2022-02-14 16:38:18,007 dispatch pc=578, inst=LOAD_CONST(arg=3, lineno=137)
DEBUG 2022-02-14 16:38:18,007 stack ['$phi522.0', '$phi522.1', '$N576.26']
DEBUG 2022-02-14 16:38:18,007 dispatch pc=580, inst=BINARY_MODULO(arg=None, lineno=137)
DEBUG 2022-02-14 16:38:18,007 stack ['$phi522.0', '$phi522.1', '$N576.26', '$const578.27']
DEBUG 2022-02-14 16:38:18,007 dispatch pc=582, inst=LOAD_CONST(arg=1, lineno=137)
DEBUG 2022-02-14 16:38:18,007 stack ['$phi522.0', '$phi522.1', '$580binary_modulo.28']
DEBUG 2022-02-14 16:38:18,007 dispatch pc=584, inst=COMPARE_OP(arg=2, lineno=137)
DEBUG 2022-02-14 16:38:18,007 stack ['$phi522.0', '$phi522.1', '$580binary_modulo.28', '$const582.29']
DEBUG 2022-02-14 16:38:18,007 dispatch pc=586, inst=POP_JUMP_IF_FALSE(arg=624, lineno=137)
DEBUG 2022-02-14 16:38:18,007 stack ['$phi522.0', '$phi522.1', '$584compare_op.30']
DEBUG 2022-02-14 16:38:18,007 end state. edges=[Edge(pc=590, stack=('$phi522.0', '$phi522.1'), blockstack=(), npush=0), Edge(pc=624, stack=('$phi522.0', '$phi522.1'), blockstack=(), npush=0)]
DEBUG 2022-02-14 16:38:18,007 pending: deque([State(pc_initial=192 nstack_initial=1), State(pc_initial=590 nstack_initial=2), State(pc_initial=624 nstack_initial=2)])
DEBUG 2022-02-14 16:38:18,007 pending: deque([State(pc_initial=590 nstack_initial=2), State(pc_initial=624 nstack_initial=2)])
DEBUG 2022-02-14 16:38:18,007 stack: ['$phi590.0', '$phi590.1']
DEBUG 2022-02-14 16:38:18,008 dispatch pc=590, inst=LOAD_FAST(arg=20, lineno=138)
DEBUG 2022-02-14 16:38:18,008 stack ['$phi590.0', '$phi590.1']
DEBUG 2022-02-14 16:38:18,008 dispatch pc=592, inst=LOAD_FAST(arg=36, lineno=138)
DEBUG 2022-02-14 16:38:18,008 stack ['$phi590.0', '$phi590.1', '$Hnew590.2']
DEBUG 2022-02-14 16:38:18,008 dispatch pc=594, inst=DUP_TOP_TWO(arg=None, lineno=138)
DEBUG 2022-02-14 16:38:18,008 stack ['$phi590.0', '$phi590.1', '$Hnew590.2', '$N_det592.3']
DEBUG 2022-02-14 16:38:18,008 dispatch pc=596, inst=BINARY_SUBSCR(arg=None, lineno=138)
DEBUG 2022-02-14 16:38:18,008 stack ['$phi590.0', '$phi590.1', '$Hnew590.2', '$N_det592.3', '$594dup_top_two.4', '$594dup_top_two.5']
DEBUG 2022-02-14 16:38:18,008 dispatch pc=598, inst=LOAD_FAST(arg=38, lineno=138)
DEBUG 2022-02-14 16:38:18,008 stack ['$phi590.0', '$phi590.1', '$Hnew590.2', '$N_det592.3', '$596binary_subscr.6']
DEBUG 2022-02-14 16:38:18,008 dispatch pc=600, inst=LOAD_FAST(arg=32, lineno=138)
DEBUG 2022-02-14 16:38:18,008 stack ['$phi590.0', '$phi590.1', '$Hnew590.2', '$N_det592.3', '$596binary_subscr.6', '$n_det_binom_prod598.7']
DEBUG 2022-02-14 16:38:18,008 dispatch pc=602, inst=BINARY_MULTIPLY(arg=None, lineno=138)
DEBUG 2022-02-14 16:38:18,008 stack ['$phi590.0', '$phi590.1', '$Hnew590.2', '$N_det592.3', '$596binary_subscr.6', '$n_det_binom_prod598.7', '$plus_minus600.8']
DEBUG 2022-02-14 16:38:18,008 dispatch pc=604, inst=LOAD_FAST(arg=34, lineno=138)
DEBUG 2022-02-14 16:38:18,008 stack ['$phi590.0', '$phi590.1', '$Hnew590.2', '$N_det592.3', '$596binary_subscr.6', '$602binary_multiply.9']
DEBUG 2022-02-14 16:38:18,008 dispatch pc=606, inst=LOAD_FAST(arg=37, lineno=138)
DEBUG 2022-02-14 16:38:18,008 stack ['$phi590.0', '$phi590.1', '$Hnew590.2', '$N_det592.3', '$596binary_subscr.6', '$602binary_multiply.9', '$f_even604.10']
DEBUG 2022-02-14 16:38:18,008 dispatch pc=608, inst=LOAD_CONST(arg=3, lineno=138)
DEBUG 2022-02-14 16:38:18,008 stack ['$phi590.0', '$phi590.1', '$Hnew590.2', '$N_det592.3', '$596binary_subscr.6', '$602binary_multiply.9', '$f_even604.10', '$N606.11']
DEBUG 2022-02-14 16:38:18,008 dispatch pc=610, inst=BINARY_FLOOR_DIVIDE(arg=None, lineno=138)
DEBUG 2022-02-14 16:38:18,008 stack ['$phi590.0', '$phi590.1', '$Hnew590.2', '$N_det592.3', '$596binary_subscr.6', '$602binary_multiply.9', '$f_even604.10', '$N606.11', '$const608.12']
DEBUG 2022-02-14 16:38:18,008 dispatch pc=612, inst=BINARY_SUBSCR(arg=None, lineno=138)
DEBUG 2022-02-14 16:38:18,008 stack ['$phi590.0', '$phi590.1', '$Hnew590.2', '$N_det592.3', '$596binary_subscr.6', '$602binary_multiply.9', '$f_even604.10', '$610binary_floor_divide.13']
DEBUG 2022-02-14 16:38:18,008 dispatch pc=614, inst=BINARY_MULTIPLY(arg=None, lineno=138)
DEBUG 2022-02-14 16:38:18,008 stack ['$phi590.0', '$phi590.1', '$Hnew590.2', '$N_det592.3', '$596binary_subscr.6', '$602binary_multiply.9', '$612binary_subscr.14']
DEBUG 2022-02-14 16:38:18,008 dispatch pc=616, inst=INPLACE_ADD(arg=None, lineno=138)
DEBUG 2022-02-14 16:38:18,008 stack ['$phi590.0', '$phi590.1', '$Hnew590.2', '$N_det592.3', '$596binary_subscr.6', '$614binary_multiply.15']
DEBUG 2022-02-14 16:38:18,009 dispatch pc=618, inst=ROT_THREE(arg=None, lineno=138)
DEBUG 2022-02-14 16:38:18,009 stack ['$phi590.0', '$phi590.1', '$Hnew590.2', '$N_det592.3', '$616inplace_add.16']
DEBUG 2022-02-14 16:38:18,009 dispatch pc=620, inst=STORE_SUBSCR(arg=None, lineno=138)
DEBUG 2022-02-14 16:38:18,009 stack ['$phi590.0', '$phi590.1', '$616inplace_add.16', '$Hnew590.2', '$N_det592.3']
DEBUG 2022-02-14 16:38:18,009 dispatch pc=622, inst=JUMP_FORWARD(arg=28, lineno=138)
DEBUG 2022-02-14 16:38:18,009 stack ['$phi590.0', '$phi590.1']
DEBUG 2022-02-14 16:38:18,009 end state. edges=[Edge(pc=652, stack=('$phi590.0', '$phi590.1'), blockstack=(), npush=0)]
DEBUG 2022-02-14 16:38:18,009 pending: deque([State(pc_initial=624 nstack_initial=2), State(pc_initial=652 nstack_initial=2)])
DEBUG 2022-02-14 16:38:18,009 stack: ['$phi624.0', '$phi624.1']
DEBUG 2022-02-14 16:38:18,009 dispatch pc=624, inst=LOAD_FAST(arg=20, lineno=140)
DEBUG 2022-02-14 16:38:18,009 stack ['$phi624.0', '$phi624.1']
DEBUG 2022-02-14 16:38:18,009 dispatch pc=626, inst=LOAD_FAST(arg=36, lineno=140)
DEBUG 2022-02-14 16:38:18,009 stack ['$phi624.0', '$phi624.1', '$Hnew624.2']
DEBUG 2022-02-14 16:38:18,009 dispatch pc=628, inst=DUP_TOP_TWO(arg=None, lineno=140)
DEBUG 2022-02-14 16:38:18,009 stack ['$phi624.0', '$phi624.1', '$Hnew624.2', '$N_det626.3']
DEBUG 2022-02-14 16:38:18,009 dispatch pc=630, inst=BINARY_SUBSCR(arg=None, lineno=140)
DEBUG 2022-02-14 16:38:18,009 stack ['$phi624.0', '$phi624.1', '$Hnew624.2', '$N_det626.3', '$628dup_top_two.4', '$628dup_top_two.5']
DEBUG 2022-02-14 16:38:18,009 dispatch pc=632, inst=LOAD_FAST(arg=38, lineno=140)
DEBUG 2022-02-14 16:38:18,009 stack ['$phi624.0', '$phi624.1', '$Hnew624.2', '$N_det626.3', '$630binary_subscr.6']
DEBUG 2022-02-14 16:38:18,009 dispatch pc=634, inst=LOAD_FAST(arg=32, lineno=140)
DEBUG 2022-02-14 16:38:18,009 stack ['$phi624.0', '$phi624.1', '$Hnew624.2', '$N_det626.3', '$630binary_subscr.6', '$n_det_binom_prod632.7']
DEBUG 2022-02-14 16:38:18,009 dispatch pc=636, inst=BINARY_MULTIPLY(arg=None, lineno=140)
DEBUG 2022-02-14 16:38:18,009 stack ['$phi624.0', '$phi624.1', '$Hnew624.2', '$N_det626.3', '$630binary_subscr.6', '$n_det_binom_prod632.7', '$plus_minus634.8']
DEBUG 2022-02-14 16:38:18,009 dispatch pc=638, inst=LOAD_FAST(arg=35, lineno=140)
DEBUG 2022-02-14 16:38:18,009 stack ['$phi624.0', '$phi624.1', '$Hnew624.2', '$N_det626.3', '$630binary_subscr.6', '$636binary_multiply.9']
DEBUG 2022-02-14 16:38:18,009 dispatch pc=640, inst=LOAD_FAST(arg=37, lineno=140)
DEBUG 2022-02-14 16:38:18,009 stack ['$phi624.0', '$phi624.1', '$Hnew624.2', '$N_det626.3', '$630binary_subscr.6', '$636binary_multiply.9', '$f_odd638.10']
DEBUG 2022-02-14 16:38:18,010 dispatch pc=642, inst=BINARY_SUBSCR(arg=None, lineno=140)
DEBUG 2022-02-14 16:38:18,010 stack ['$phi624.0', '$phi624.1', '$Hnew624.2', '$N_det626.3', '$630binary_subscr.6', '$636binary_multiply.9', '$f_odd638.10', '$N640.11']
DEBUG 2022-02-14 16:38:18,010 dispatch pc=644, inst=BINARY_MULTIPLY(arg=None, lineno=140)
DEBUG 2022-02-14 16:38:18,010 stack ['$phi624.0', '$phi624.1', '$Hnew624.2', '$N_det626.3', '$630binary_subscr.6', '$636binary_multiply.9', '$642binary_subscr.12']
DEBUG 2022-02-14 16:38:18,010 dispatch pc=646, inst=INPLACE_ADD(arg=None, lineno=140)
DEBUG 2022-02-14 16:38:18,010 stack ['$phi624.0', '$phi624.1', '$Hnew624.2', '$N_det626.3', '$630binary_subscr.6', '$644binary_multiply.13']
DEBUG 2022-02-14 16:38:18,010 dispatch pc=648, inst=ROT_THREE(arg=None, lineno=140)
DEBUG 2022-02-14 16:38:18,010 stack ['$phi624.0', '$phi624.1', '$Hnew624.2', '$N_det626.3', '$646inplace_add.14']
DEBUG 2022-02-14 16:38:18,010 dispatch pc=650, inst=STORE_SUBSCR(arg=None, lineno=140)
DEBUG 2022-02-14 16:38:18,010 stack ['$phi624.0', '$phi624.1', '$646inplace_add.14', '$Hnew624.2', '$N_det626.3']
DEBUG 2022-02-14 16:38:18,010 end state. edges=[Edge(pc=652, stack=('$phi624.0', '$phi624.1'), blockstack=(), npush=0)]
DEBUG 2022-02-14 16:38:18,010 pending: deque([State(pc_initial=652 nstack_initial=2), State(pc_initial=652 nstack_initial=2)])
DEBUG 2022-02-14 16:38:18,010 stack: ['$phi652.0', '$phi652.1']
DEBUG 2022-02-14 16:38:18,010 dispatch pc=652, inst=JUMP_ABSOLUTE(arg=520, lineno=140)
DEBUG 2022-02-14 16:38:18,010 stack ['$phi652.0', '$phi652.1']
DEBUG 2022-02-14 16:38:18,010 end state. edges=[Edge(pc=520, stack=('$phi652.0', '$phi652.1'), blockstack=(), npush=0)]
DEBUG 2022-02-14 16:38:18,010 pending: deque([State(pc_initial=652 nstack_initial=2), State(pc_initial=520 nstack_initial=2)])
DEBUG 2022-02-14 16:38:18,010 pending: deque([State(pc_initial=520 nstack_initial=2)])
DEBUG 2022-02-14 16:38:18,010 -------------------------Prune PHIs-------------------------
DEBUG 2022-02-14 16:38:18,010 Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=192 nstack_initial=1): {'$phi192.0'},
             State(pc_initial=196 nstack_initial=2): {'$phi196.1'},
             State(pc_initial=262 nstack_initial=2): {'$phi262.1'},
             State(pc_initial=264 nstack_initial=3): {'$phi264.2'},
             State(pc_initial=294 nstack_initial=1): set(),
             State(pc_initial=300 nstack_initial=1): set(),
             State(pc_initial=314 nstack_initial=1): set(),
             State(pc_initial=318 nstack_initial=1): set(),
             State(pc_initial=362 nstack_initial=1): set(),
             State(pc_initial=376 nstack_initial=1): set(),
             State(pc_initial=450 nstack_initial=1): set(),
             State(pc_initial=520 nstack_initial=2): {'$phi520.1'},
             State(pc_initial=522 nstack_initial=3): {'$phi522.2'},
             State(pc_initial=590 nstack_initial=2): set(),
             State(pc_initial=624 nstack_initial=2): set(),
             State(pc_initial=652 nstack_initial=2): set(),
             State(pc_initial=656 nstack_initial=1): set(),
             State(pc_initial=666 nstack_initial=0): set(),
             State(pc_initial=672 nstack_initial=0): set(),
             State(pc_initial=686 nstack_initial=1): {'$phi686.0'},
             State(pc_initial=688 nstack_initial=2): {'$phi688.1'},
             State(pc_initial=726 nstack_initial=0): set()})
DEBUG 2022-02-14 16:38:18,011 defmap: {'$phi192.0': State(pc_initial=0 nstack_initial=0),
 '$phi196.1': State(pc_initial=192 nstack_initial=1),
 '$phi262.1': State(pc_initial=196 nstack_initial=2),
 '$phi264.2': State(pc_initial=262 nstack_initial=2),
 '$phi520.1': State(pc_initial=450 nstack_initial=1),
 '$phi522.2': State(pc_initial=520 nstack_initial=2),
 '$phi686.0': State(pc_initial=672 nstack_initial=0),
 '$phi688.1': State(pc_initial=686 nstack_initial=1)}
DEBUG 2022-02-14 16:38:18,011 phismap: defaultdict(<class 'set'>,
            {'$phi192.0': {('$190get_iter.84',
                            State(pc_initial=0 nstack_initial=0)),
                           ('$phi656.0',
                            State(pc_initial=656 nstack_initial=1))},
             '$phi196.0': {('$phi192.0',
                            State(pc_initial=192 nstack_initial=1))},
             '$phi196.1': {('$192for_iter.2',
                            State(pc_initial=192 nstack_initial=1))},
             '$phi262.0': {('$phi196.0',
                            State(pc_initial=196 nstack_initial=2)),
                           ('$phi264.0',
                            State(pc_initial=264 nstack_initial=3))},
             '$phi262.1': {('$260get_iter.29',
                            State(pc_initial=196 nstack_initial=2)),
                           ('$phi264.1',
                            State(pc_initial=264 nstack_initial=3))},
             '$phi264.0': {('$phi262.0',
                            State(pc_initial=262 nstack_initial=2))},
             '$phi264.1': {('$phi262.1',
                            State(pc_initial=262 nstack_initial=2))},
             '$phi264.2': {('$262for_iter.3',
                            State(pc_initial=262 nstack_initial=2))},
             '$phi294.0': {('$phi262.0',
                            State(pc_initial=262 nstack_initial=2))},
             '$phi300.0': {('$phi294.0',
                            State(pc_initial=294 nstack_initial=1))},
             '$phi314.0': {('$phi294.0',
                            State(pc_initial=294 nstack_initial=1))},
             '$phi318.0': {('$phi300.0',
                            State(pc_initial=300 nstack_initial=1)),
                           ('$phi314.0',
                            State(pc_initial=314 nstack_initial=1))},
             '$phi362.0': {('$phi318.0',
                            State(pc_initial=318 nstack_initial=1))},
             '$phi376.0': {('$phi362.0',
                            State(pc_initial=362 nstack_initial=1))},
             '$phi450.0': {('$phi318.0',
                            State(pc_initial=318 nstack_initial=1)),
                           ('$phi362.0',
                            State(pc_initial=362 nstack_initial=1)),
                           ('$phi376.0',
                            State(pc_initial=376 nstack_initial=1))},
             '$phi520.0': {('$phi450.0',
                            State(pc_initial=450 nstack_initial=1)),
                           ('$phi652.0',
                            State(pc_initial=652 nstack_initial=2))},
             '$phi520.1': {('$518get_iter.33',
                            State(pc_initial=450 nstack_initial=1)),
                           ('$phi652.1',
                            State(pc_initial=652 nstack_initial=2))},
             '$phi522.0': {('$phi520.0',
                            State(pc_initial=520 nstack_initial=2))},
             '$phi522.1': {('$phi520.1',
                            State(pc_initial=520 nstack_initial=2))},
             '$phi522.2': {('$520for_iter.3',
                            State(pc_initial=520 nstack_initial=2))},
             '$phi590.0': {('$phi522.0',
                            State(pc_initial=522 nstack_initial=3))},
             '$phi590.1': {('$phi522.1',
                            State(pc_initial=522 nstack_initial=3))},
             '$phi624.0': {('$phi522.0',
                            State(pc_initial=522 nstack_initial=3))},
             '$phi624.1': {('$phi522.1',
                            State(pc_initial=522 nstack_initial=3))},
             '$phi652.0': {('$phi590.0',
                            State(pc_initial=590 nstack_initial=2)),
                           ('$phi624.0',
                            State(pc_initial=624 nstack_initial=2))},
             '$phi652.1': {('$phi590.1',
                            State(pc_initial=590 nstack_initial=2)),
                           ('$phi624.1',
                            State(pc_initial=624 nstack_initial=2))},
             '$phi656.0': {('$phi520.0',
                            State(pc_initial=520 nstack_initial=2))},
             '$phi686.0': {('$684get_iter.6',
                            State(pc_initial=672 nstack_initial=0)),
                           ('$phi688.0',
                            State(pc_initial=688 nstack_initial=2))},
             '$phi688.0': {('$phi686.0',
                            State(pc_initial=686 nstack_initial=1))},
             '$phi688.1': {('$686for_iter.2',
                            State(pc_initial=686 nstack_initial=1))}})
DEBUG 2022-02-14 16:38:18,012 changing phismap: defaultdict(<class 'set'>,
            {'$phi192.0': {('$190get_iter.84',
                            State(pc_initial=0 nstack_initial=0)),
                           ('$phi520.0',
                            State(pc_initial=520 nstack_initial=2))},
             '$phi196.0': {('$190get_iter.84',
                            State(pc_initial=0 nstack_initial=0)),
                           ('$phi520.0',
                            State(pc_initial=520 nstack_initial=2))},
             '$phi196.1': {('$192for_iter.2',
                            State(pc_initial=192 nstack_initial=1))},
             '$phi262.0': {('$190get_iter.84',
                            State(pc_initial=0 nstack_initial=0)),
                           ('$phi262.0',
                            State(pc_initial=262 nstack_initial=2)),
                           ('$phi520.0',
                            State(pc_initial=520 nstack_initial=2))},
             '$phi262.1': {('$260get_iter.29',
                            State(pc_initial=196 nstack_initial=2)),
                           ('$phi262.1',
                            State(pc_initial=262 nstack_initial=2))},
             '$phi264.0': {('$190get_iter.84',
                            State(pc_initial=0 nstack_initial=0)),
                           ('$phi520.0',
                            State(pc_initial=520 nstack_initial=2))},
             '$phi264.1': {('$260get_iter.29',
                            State(pc_initial=196 nstack_initial=2))},
             '$phi264.2': {('$262for_iter.3',
                            State(pc_initial=262 nstack_initial=2))},
             '$phi294.0': {('$190get_iter.84',
                            State(pc_initial=0 nstack_initial=0)),
                           ('$phi520.0',
                            State(pc_initial=520 nstack_initial=2))},
             '$phi300.0': {('$190get_iter.84',
                            State(pc_initial=0 nstack_initial=0)),
                           ('$phi520.0',
                            State(pc_initial=520 nstack_initial=2))},
             '$phi314.0': {('$190get_iter.84',
                            State(pc_initial=0 nstack_initial=0)),
                           ('$phi520.0',
                            State(pc_initial=520 nstack_initial=2))},
             '$phi318.0': {('$190get_iter.84',
                            State(pc_initial=0 nstack_initial=0)),
                           ('$phi520.0',
                            State(pc_initial=520 nstack_initial=2))},
             '$phi362.0': {('$190get_iter.84',
                            State(pc_initial=0 nstack_initial=0)),
                           ('$phi520.0',
                            State(pc_initial=520 nstack_initial=2))},
             '$phi376.0': {('$190get_iter.84',
                            State(pc_initial=0 nstack_initial=0)),
                           ('$phi520.0',
                            State(pc_initial=520 nstack_initial=2))},
             '$phi450.0': {('$190get_iter.84',
                            State(pc_initial=0 nstack_initial=0)),
                           ('$phi520.0',
                            State(pc_initial=520 nstack_initial=2))},
             '$phi520.0': {('$190get_iter.84',
                            State(pc_initial=0 nstack_initial=0)),
                           ('$phi520.0',
                            State(pc_initial=520 nstack_initial=2)),
                           ('$phi590.0',
                            State(pc_initial=590 nstack_initial=2)),
                           ('$phi624.0',
                            State(pc_initial=624 nstack_initial=2))},
             '$phi520.1': {('$518get_iter.33',
                            State(pc_initial=450 nstack_initial=1)),
                           ('$phi590.1',
                            State(pc_initial=590 nstack_initial=2)),
                           ('$phi624.1',
                            State(pc_initial=624 nstack_initial=2))},
             '$phi522.0': {('$190get_iter.84',
                            State(pc_initial=0 nstack_initial=0)),
                           ('$phi590.0',
                            State(pc_initial=590 nstack_initial=2)),
                           ('$phi624.0',
                            State(pc_initial=624 nstack_initial=2))},
             '$phi522.1': {('$518get_iter.33',
                            State(pc_initial=450 nstack_initial=1)),
                           ('$phi590.1',
                            State(pc_initial=590 nstack_initial=2)),
                           ('$phi624.1',
                            State(pc_initial=624 nstack_initial=2))},
             '$phi522.2': {('$520for_iter.3',
                            State(pc_initial=520 nstack_initial=2))},
             '$phi590.0': {('$190get_iter.84',
                            State(pc_initial=0 nstack_initial=0)),
                           ('$phi590.0',
                            State(pc_initial=590 nstack_initial=2)),
                           ('$phi624.0',
                            State(pc_initial=624 nstack_initial=2))},
             '$phi590.1': {('$518get_iter.33',
                            State(pc_initial=450 nstack_initial=1)),
                           ('$phi590.1',
                            State(pc_initial=590 nstack_initial=2)),
                           ('$phi624.1',
                            State(pc_initial=624 nstack_initial=2))},
             '$phi624.0': {('$190get_iter.84',
                            State(pc_initial=0 nstack_initial=0)),
                           ('$phi590.0',
                            State(pc_initial=590 nstack_initial=2)),
                           ('$phi624.0',
                            State(pc_initial=624 nstack_initial=2))},
             '$phi624.1': {('$518get_iter.33',
                            State(pc_initial=450 nstack_initial=1)),
                           ('$phi590.1',
                            State(pc_initial=590 nstack_initial=2)),
                           ('$phi624.1',
                            State(pc_initial=624 nstack_initial=2))},
             '$phi652.0': {('$190get_iter.84',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi652.1': {('$518get_iter.33',
                            State(pc_initial=450 nstack_initial=1))},
             '$phi656.0': {('$190get_iter.84',
                            State(pc_initial=0 nstack_initial=0)),
                           ('$phi590.0',
                            State(pc_initial=590 nstack_initial=2)),
                           ('$phi624.0',
                            State(pc_initial=624 nstack_initial=2))},
             '$phi686.0': {('$684get_iter.6',
                            State(pc_initial=672 nstack_initial=0)),
                           ('$phi686.0',
                            State(pc_initial=686 nstack_initial=1))},
             '$phi688.0': {('$684get_iter.6',
                            State(pc_initial=672 nstack_initial=0))},
             '$phi688.1': {('$686for_iter.2',
                            State(pc_initial=686 nstack_initial=1))}})
DEBUG 2022-02-14 16:38:18,014 changing phismap: defaultdict(<class 'set'>,
            {'$phi192.0': {('$190get_iter.84',
                            State(pc_initial=0 nstack_initial=0)),
                           ('$phi590.0',
                            State(pc_initial=590 nstack_initial=2)),
                           ('$phi624.0',
                            State(pc_initial=624 nstack_initial=2))},
             '$phi196.0': {('$190get_iter.84',
                            State(pc_initial=0 nstack_initial=0)),
                           ('$phi590.0',
                            State(pc_initial=590 nstack_initial=2)),
                           ('$phi624.0',
                            State(pc_initial=624 nstack_initial=2))},
             '$phi196.1': {('$192for_iter.2',
                            State(pc_initial=192 nstack_initial=1))},
             '$phi262.0': {('$190get_iter.84',
                            State(pc_initial=0 nstack_initial=0)),
                           ('$phi590.0',
                            State(pc_initial=590 nstack_initial=2)),
                           ('$phi624.0',
                            State(pc_initial=624 nstack_initial=2))},
             '$phi262.1': {('$260get_iter.29',
                            State(pc_initial=196 nstack_initial=2))},
             '$phi264.0': {('$190get_iter.84',
                            State(pc_initial=0 nstack_initial=0)),
                           ('$phi590.0',
                            State(pc_initial=590 nstack_initial=2)),
                           ('$phi624.0',
                            State(pc_initial=624 nstack_initial=2))},
             '$phi264.1': {('$260get_iter.29',
                            State(pc_initial=196 nstack_initial=2))},
             '$phi264.2': {('$262for_iter.3',
                            State(pc_initial=262 nstack_initial=2))},
             '$phi294.0': {('$190get_iter.84',
                            State(pc_initial=0 nstack_initial=0)),
                           ('$phi590.0',
                            State(pc_initial=590 nstack_initial=2)),
                           ('$phi624.0',
                            State(pc_initial=624 nstack_initial=2))},
             '$phi300.0': {('$190get_iter.84',
                            State(pc_initial=0 nstack_initial=0)),
                           ('$phi590.0',
                            State(pc_initial=590 nstack_initial=2)),
                           ('$phi624.0',
                            State(pc_initial=624 nstack_initial=2))},
             '$phi314.0': {('$190get_iter.84',
                            State(pc_initial=0 nstack_initial=0)),
                           ('$phi590.0',
                            State(pc_initial=590 nstack_initial=2)),
                           ('$phi624.0',
                            State(pc_initial=624 nstack_initial=2))},
             '$phi318.0': {('$190get_iter.84',
                            State(pc_initial=0 nstack_initial=0)),
                           ('$phi590.0',
                            State(pc_initial=590 nstack_initial=2)),
                           ('$phi624.0',
                            State(pc_initial=624 nstack_initial=2))},
             '$phi362.0': {('$190get_iter.84',
                            State(pc_initial=0 nstack_initial=0)),
                           ('$phi590.0',
                            State(pc_initial=590 nstack_initial=2)),
                           ('$phi624.0',
                            State(pc_initial=624 nstack_initial=2))},
             '$phi376.0': {('$190get_iter.84',
                            State(pc_initial=0 nstack_initial=0)),
                           ('$phi590.0',
                            State(pc_initial=590 nstack_initial=2)),
                           ('$phi624.0',
                            State(pc_initial=624 nstack_initial=2))},
             '$phi450.0': {('$190get_iter.84',
                            State(pc_initial=0 nstack_initial=0)),
                           ('$phi590.0',
                            State(pc_initial=590 nstack_initial=2)),
                           ('$phi624.0',
                            State(pc_initial=624 nstack_initial=2))},
             '$phi520.0': {('$190get_iter.84',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi520.1': {('$518get_iter.33',
                            State(pc_initial=450 nstack_initial=1))},
             '$phi522.0': {('$190get_iter.84',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi522.1': {('$518get_iter.33',
                            State(pc_initial=450 nstack_initial=1))},
             '$phi522.2': {('$520for_iter.3',
                            State(pc_initial=520 nstack_initial=2))},
             '$phi590.0': {('$190get_iter.84',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi590.1': {('$518get_iter.33',
                            State(pc_initial=450 nstack_initial=1))},
             '$phi624.0': {('$190get_iter.84',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi624.1': {('$518get_iter.33',
                            State(pc_initial=450 nstack_initial=1))},
             '$phi652.0': {('$190get_iter.84',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi652.1': {('$518get_iter.33',
                            State(pc_initial=450 nstack_initial=1))},
             '$phi656.0': {('$190get_iter.84',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi686.0': {('$684get_iter.6',
                            State(pc_initial=672 nstack_initial=0))},
             '$phi688.0': {('$684get_iter.6',
                            State(pc_initial=672 nstack_initial=0))},
             '$phi688.1': {('$686for_iter.2',
                            State(pc_initial=686 nstack_initial=1))}})
DEBUG 2022-02-14 16:38:18,015 changing phismap: defaultdict(<class 'set'>,
            {'$phi192.0': {('$190get_iter.84',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi196.0': {('$190get_iter.84',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi196.1': {('$192for_iter.2',
                            State(pc_initial=192 nstack_initial=1))},
             '$phi262.0': {('$190get_iter.84',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi262.1': {('$260get_iter.29',
                            State(pc_initial=196 nstack_initial=2))},
             '$phi264.0': {('$190get_iter.84',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi264.1': {('$260get_iter.29',
                            State(pc_initial=196 nstack_initial=2))},
             '$phi264.2': {('$262for_iter.3',
                            State(pc_initial=262 nstack_initial=2))},
             '$phi294.0': {('$190get_iter.84',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi300.0': {('$190get_iter.84',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi314.0': {('$190get_iter.84',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi318.0': {('$190get_iter.84',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi362.0': {('$190get_iter.84',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi376.0': {('$190get_iter.84',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi450.0': {('$190get_iter.84',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi520.0': {('$190get_iter.84',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi520.1': {('$518get_iter.33',
                            State(pc_initial=450 nstack_initial=1))},
             '$phi522.0': {('$190get_iter.84',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi522.1': {('$518get_iter.33',
                            State(pc_initial=450 nstack_initial=1))},
             '$phi522.2': {('$520for_iter.3',
                            State(pc_initial=520 nstack_initial=2))},
             '$phi590.0': {('$190get_iter.84',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi590.1': {('$518get_iter.33',
                            State(pc_initial=450 nstack_initial=1))},
             '$phi624.0': {('$190get_iter.84',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi624.1': {('$518get_iter.33',
                            State(pc_initial=450 nstack_initial=1))},
             '$phi652.0': {('$190get_iter.84',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi652.1': {('$518get_iter.33',
                            State(pc_initial=450 nstack_initial=1))},
             '$phi656.0': {('$190get_iter.84',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi686.0': {('$684get_iter.6',
                            State(pc_initial=672 nstack_initial=0))},
             '$phi688.0': {('$684get_iter.6',
                            State(pc_initial=672 nstack_initial=0))},
             '$phi688.1': {('$686for_iter.2',
                            State(pc_initial=686 nstack_initial=1))}})
DEBUG 2022-02-14 16:38:18,016 changing phismap: defaultdict(<class 'set'>,
            {'$phi192.0': {('$190get_iter.84',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi196.0': {('$190get_iter.84',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi196.1': {('$192for_iter.2',
                            State(pc_initial=192 nstack_initial=1))},
             '$phi262.0': {('$190get_iter.84',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi262.1': {('$260get_iter.29',
                            State(pc_initial=196 nstack_initial=2))},
             '$phi264.0': {('$190get_iter.84',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi264.1': {('$260get_iter.29',
                            State(pc_initial=196 nstack_initial=2))},
             '$phi264.2': {('$262for_iter.3',
                            State(pc_initial=262 nstack_initial=2))},
             '$phi294.0': {('$190get_iter.84',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi300.0': {('$190get_iter.84',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi314.0': {('$190get_iter.84',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi318.0': {('$190get_iter.84',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi362.0': {('$190get_iter.84',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi376.0': {('$190get_iter.84',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi450.0': {('$190get_iter.84',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi520.0': {('$190get_iter.84',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi520.1': {('$518get_iter.33',
                            State(pc_initial=450 nstack_initial=1))},
             '$phi522.0': {('$190get_iter.84',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi522.1': {('$518get_iter.33',
                            State(pc_initial=450 nstack_initial=1))},
             '$phi522.2': {('$520for_iter.3',
                            State(pc_initial=520 nstack_initial=2))},
             '$phi590.0': {('$190get_iter.84',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi590.1': {('$518get_iter.33',
                            State(pc_initial=450 nstack_initial=1))},
             '$phi624.0': {('$190get_iter.84',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi624.1': {('$518get_iter.33',
                            State(pc_initial=450 nstack_initial=1))},
             '$phi652.0': {('$190get_iter.84',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi652.1': {('$518get_iter.33',
                            State(pc_initial=450 nstack_initial=1))},
             '$phi656.0': {('$190get_iter.84',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi686.0': {('$684get_iter.6',
                            State(pc_initial=672 nstack_initial=0))},
             '$phi688.0': {('$684get_iter.6',
                            State(pc_initial=672 nstack_initial=0))},
             '$phi688.1': {('$686for_iter.2',
                            State(pc_initial=686 nstack_initial=1))}})
DEBUG 2022-02-14 16:38:18,017 keep phismap: {'$phi192.0': {('$190get_iter.84', State(pc_initial=0 nstack_initial=0))},
 '$phi196.1': {('$192for_iter.2', State(pc_initial=192 nstack_initial=1))},
 '$phi262.1': {('$260get_iter.29', State(pc_initial=196 nstack_initial=2))},
 '$phi264.2': {('$262for_iter.3', State(pc_initial=262 nstack_initial=2))},
 '$phi520.1': {('$518get_iter.33', State(pc_initial=450 nstack_initial=1))},
 '$phi522.2': {('$520for_iter.3', State(pc_initial=520 nstack_initial=2))},
 '$phi686.0': {('$684get_iter.6', State(pc_initial=672 nstack_initial=0))},
 '$phi688.1': {('$686for_iter.2', State(pc_initial=686 nstack_initial=1))}}
DEBUG 2022-02-14 16:38:18,017 new_out: defaultdict(<class 'dict'>,
            {State(pc_initial=0 nstack_initial=0): {'$phi192.0': '$190get_iter.84'},
             State(pc_initial=192 nstack_initial=1): {'$phi196.1': '$192for_iter.2'},
             State(pc_initial=196 nstack_initial=2): {'$phi262.1': '$260get_iter.29'},
             State(pc_initial=262 nstack_initial=2): {'$phi264.2': '$262for_iter.3'},
             State(pc_initial=450 nstack_initial=1): {'$phi520.1': '$518get_iter.33'},
             State(pc_initial=520 nstack_initial=2): {'$phi522.2': '$520for_iter.3'},
             State(pc_initial=672 nstack_initial=0): {'$phi686.0': '$684get_iter.6'},
             State(pc_initial=686 nstack_initial=1): {'$phi688.1': '$686for_iter.2'}})
DEBUG 2022-02-14 16:38:18,018 ----------------------DONE Prune PHIs-----------------------
DEBUG 2022-02-14 16:38:18,018 block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$D2.0'}), (4, {'res': '$const4.1'}), (6, {'index': '$const4.1', 'target': '$D2.0', 'res': '$6binary_subscr.2'}), (8, {'value': '$6binary_subscr.2'}), (10, {'res': '$A10.3'}), (12, {'res': '$const12.4'}), (14, {'res': '$const14.5'}), (16, {'res': '$const16.6'}), (18, {'start': '$const14.5', 'stop': '$const16.6', 'step': None, 'res': '$18build_slice.8', 'slicevar': '$18build_slice.7'}), (20, {'items': ['$const12.4', '$18build_slice.8'], 'res': '$20build_tuple.9'}), (22, {'index': '$20build_tuple.9', 'target': '$A10.3', 'res': '$22binary_subscr.10'}), (24, {'value': '$22binary_subscr.10'}), (26, {'res': '$D26.11'}), (28, {'res': '$const28.12'}), (30, {'index': '$const28.12', 'target': '$D26.11', 'res': '$30binary_subscr.13'}), (32, {'value': '$30binary_subscr.13'}), (34, {'res': '$A34.14'}), (36, {'res': '$const36.15'}), (38, {'res': '$const38.16'}), (40, {'res': '$const40.17'}), (42, {'start': '$const38.16', 'stop': '$const40.17', 'step': None, 'res': '$42build_slice.19', 'slicevar': '$42build_slice.18'}), (44, {'items': ['$const36.15', '$42build_slice.19'], 'res': '$44build_tuple.20'}), (46, {'index': '$44build_tuple.20', 'target': '$A34.14', 'res': '$46binary_subscr.21'}), (48, {'value': '$46binary_subscr.21'}), (50, {'res': '$A50.22'}), (52, {'item': '$A50.22', 'res': '$52load_attr.23'}), (54, {'res': '$const54.24'}), (56, {'index': '$const54.24', 'target': '$52load_attr.23', 'res': '$56binary_subscr.25'}), (58, {'value': '$56binary_subscr.25'}), (60, {'res': '$const60.26'}), (62, {'res': '$fixed_edge_reps62.27'}), (64, {'item': '$fixed_edge_reps62.27', 'res': '$64load_method.28'}), (66, {'func': '$64load_method.28', 'args': [], 'res': '$66call_method.29'}), (68, {'lhs': '$const60.26', 'rhs': '$66call_method.29', 'res': '$68binary_multiply.30'}), (70, {'res': '$const70.31'}), (72, {'lhs': '$68binary_multiply.30', 'rhs': '$const70.31', 'res': '$72binary_add.32'}), (74, {'value': '$72binary_add.32'}), (76, {'res': '$N_fixed76.33'}), (78, {'res': '$const78.34'}), (80, {'res': '$batch_max80.35'}), (82, {'lhs': '$const78.34', 'rhs': '$batch_max80.35', 'res': '$82binary_multiply.36'}), (84, {'lhs': '$N_fixed76.33', 'rhs': '$82binary_multiply.36', 'res': '$84binary_add.37'}), (86, {'res': '$even_cutoff86.38'}), (88, {'lhs': '$84binary_add.37', 'rhs': '$even_cutoff86.38', 'res': '$88binary_add.39'}), (90, {'res': '$const90.40'}), (92, {'lhs': '$88binary_add.39', 'rhs': '$const90.40', 'res': '$92binary_add.41'}), (94, {'value': '$92binary_add.41'}), (96, {'res': '$96load_global.42'}), (98, {'item': '$96load_global.42', 'res': '$98load_method.43'}), (100, {'res': '$100load_global.44'}), (102, {'item': '$100load_global.44', 'res': '$102load_method.45'}), (104, {'res': '$batch_max104.46'}), (106, {'res': '$const106.47'}), (108, {'items': ['$batch_max104.46', '$const106.47'], 'res': '$108build_list.48'}), (110, {'func': '$102load_method.45', 'args': ['$108build_list.48'], 'res': '$110call_method.49'}), (112, {'res': '$fixed_edge_reps112.50'}), (114, {'items': ['$110call_method.49', '$fixed_edge_reps112.50'], 'res': '$114build_tuple.51'}), (116, {'func': '$98load_method.43', 'args': ['$114build_tuple.51'], 'res': '$116call_method.52'}), (118, {'value': '$116call_method.52'}), (120, {'res': '$120load_global.53'}), (122, {'item': '$120load_global.53', 'res': '$122load_method.54'}), (124, {'res': '$edge_reps124.55'}), (126, {'res': '$const126.56'}), (128, {'lhs': '$edge_reps124.55', 'rhs': '$const126.56', 'res': '$128binary_add.57'}), (130, {'func': '$122load_method.54', 'args': ['$128binary_add.57'], 'res': '$130call_method.58'}), (132, {'value': '$130call_method.58'}), (134, {'res': '$edge_reps134.59'}), (136, {'item': '$edge_reps134.59', 'res': '$136load_method.60'}), (138, {'func': '$136load_method.60', 'args': [], 'res': '$138call_method.61'}), (140, {'res': '$even_cutoff140.62'}), (142, {'lhs': '$138call_method.61', 'rhs': '$even_cutoff140.62', 'res': '$142binary_add.63'}), (144, {'value': '$142binary_add.63'}), (146, {'res': '$146load_global.64'}), (148, {'res': '$max_binom148.65'}), (150, {'func': '$146load_global.64', 'args': ['$max_binom148.65'], 'res': '$150call_function.66'}), (152, {'value': '$150call_function.66'}), (154, {'res': '$154load_global.67'}), (156, {'item': '$154load_global.67', 'res': '$156load_attr.68'}), (158, {'res': '$const158.69'}), (160, {'res': '$batch_max160.70'}), (162, {'lhs': '$const158.69', 'rhs': '$batch_max160.70', 'res': '$162binary_multiply.71'}), (164, {'res': '$even_cutoff164.72'}), (166, {'lhs': '$162binary_multiply.71', 'rhs': '$even_cutoff164.72', 'res': '$166binary_add.73'}), (168, {'res': '$const168.74'}), (170, {'lhs': '$166binary_add.73', 'rhs': '$const168.74', 'res': '$170binary_add.75'}), (172, {'res': '$172load_global.76'}), (174, {'item': '$172load_global.76', 'res': '$174load_attr.77'}), (176, {'res': '$const176.78'}), (178, {'func': '$156load_attr.68', 'args': ['$170binary_add.75', '$174load_attr.77'], 'names': '$const176.78', 'res': '$178call_function_kw.79'}), (180, {'value': '$178call_function_kw.79'}), (182, {'res': '$182load_global.80'}), (184, {'item': '$182load_global.80', 'res': '$184load_method.81'}), (186, {'res': '$steps186.82'}), (188, {'func': '$184load_method.81', 'args': ['$steps186.82'], 'res': '$188call_method.83'}), (190, {'value': '$188call_method.83', 'res': '$190get_iter.84'})), outgoing_phis={'$phi192.0': '$190get_iter.84'}, blockstack=(), active_try_block=None, outgoing_edgepushed={192: ('$190get_iter.84',)})
DEBUG 2022-02-14 16:38:18,018 block_infos State(pc_initial=192 nstack_initial=1):
AdaptBlockInfo(insts=((192, {'iterator': '$phi192.0', 'pair': '$192for_iter.1', 'indval': '$192for_iter.2', 'pred': '$192for_iter.3'}),), outgoing_phis={'$phi196.1': '$192for_iter.2'}, blockstack=(), active_try_block=None, outgoing_edgepushed={666: (), 196: ('$phi192.0', '$192for_iter.2')})
DEBUG 2022-02-14 16:38:18,018 block_infos State(pc_initial=196 nstack_initial=2):
AdaptBlockInfo(insts=((196, {'value': '$phi196.1'}), (198, {'res': '$198load_global.2'}), (200, {'item': '$198load_global.2', 'res': '$200load_attr.3'}), (202, {'res': '$const202.4'}), (204, {'res': '$batch_max204.5'}), (206, {'lhs': '$const202.4', 'rhs': '$batch_max204.5', 'res': '$206binary_multiply.6'}), (208, {'res': '$even_cutoff208.7'}), (210, {'lhs': '$206binary_multiply.6', 'rhs': '$even_cutoff208.7', 'res': '$210binary_add.8'}), (212, {'res': '$const212.9'}), (214, {'lhs': '$210binary_add.8', 'rhs': '$const212.9', 'res': '$214binary_add.10'}), (216, {'res': '$216load_global.11'}), (218, {'item': '$216load_global.11', 'res': '$218load_attr.12'}), (220, {'res': '$const220.13'}), (222, {'func': '$200load_attr.3', 'args': ['$214binary_add.10', '$218load_attr.12'], 'names': '$const220.13', 'res': '$222call_function_kw.14'}), (224, {'value': '$222call_function_kw.14'}), (226, {'res': '$226load_global.15'}), (228, {'res': '$j228.16'}), (230, {'res': '$edge_reps230.17'}), (232, {'func': '$226load_global.15', 'args': ['$j228.16', '$edge_reps230.17'], 'res': '$232call_function.18'}), (234, {'value': '$232call_function.18'}), (236, {'res': '$kept_edges236.19'}), (238, {'item': '$kept_edges236.19', 'res': '$238load_method.20'}), (240, {'func': '$238load_method.20', 'args': [], 'res': '$240call_method.21'}), (242, {'value': '$240call_method.21'}), (244, {'res': '$const244.22'}), (246, {'value': '$const244.22'}), (248, {'res': '$248load_global.23'}), (250, {'res': '$const250.24'}), (252, {'res': '$n252.25'}), (254, {'res': '$const254.26'}), (256, {'lhs': '$n252.25', 'rhs': '$const254.26', 'res': '$256binary_floor_divide.27'}), (258, {'func': '$248load_global.23', 'args': ['$const250.24', '$256binary_floor_divide.27'], 'res': '$258call_function.28'}), (260, {'value': '$258call_function.28', 'res': '$260get_iter.29'})), outgoing_phis={'$phi262.1': '$260get_iter.29'}, blockstack=(), active_try_block=None, outgoing_edgepushed={262: ('$phi196.0', '$260get_iter.29')})
DEBUG 2022-02-14 16:38:18,018 block_infos State(pc_initial=262 nstack_initial=2):
AdaptBlockInfo(insts=((262, {'iterator': '$phi262.1', 'pair': '$262for_iter.2', 'indval': '$262for_iter.3', 'pred': '$262for_iter.4'}),), outgoing_phis={'$phi264.2': '$262for_iter.3'}, blockstack=(), active_try_block=None, outgoing_edgepushed={294: ('$phi262.0',), 264: ('$phi262.0', '$phi262.1', '$262for_iter.3')})
DEBUG 2022-02-14 16:38:18,018 block_infos State(pc_initial=264 nstack_initial=3):
AdaptBlockInfo(insts=((264, {'value': '$phi264.2'}), (266, {'res': '$binom_prod266.3'}), (268, {'res': '$binoms268.4'}), (270, {'res': '$edge_reps270.5'}), (272, {'res': '$i272.6'}), (274, {'index': '$i272.6', 'target': '$edge_reps270.5', 'res': '$274binary_subscr.7'}), (276, {'res': '$kept_edges276.8'}), (278, {'res': '$i278.9'}), (280, {'index': '$i278.9', 'target': '$kept_edges276.8', 'res': '$280binary_subscr.10'}), (282, {'items': ['$274binary_subscr.7', '$280binary_subscr.10'], 'res': '$282build_tuple.11'}), (284, {'index': '$282build_tuple.11', 'target': '$binoms268.4', 'res': '$284binary_subscr.12'}), (286, {'lhs': '$binom_prod266.3', 'rhs': '$284binary_subscr.12', 'res': '$286inplace_multiply.13'}), (288, {'value': '$286inplace_multiply.13'}), (290, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={262: ('$phi264.0', '$phi264.1')})
DEBUG 2022-02-14 16:38:18,018 block_infos State(pc_initial=294 nstack_initial=1):
AdaptBlockInfo(insts=((294, {'res': '$glynn294.1'}), (296, {'pred': '$glynn294.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={300: ('$phi294.0',), 314: ('$phi294.0',)})
DEBUG 2022-02-14 16:38:18,018 block_infos State(pc_initial=300 nstack_initial=1):
AdaptBlockInfo(insts=((300, {'res': '$const300.1'}), (302, {'res': '$kept_edges302.2'}), (304, {'lhs': '$const300.1', 'rhs': '$kept_edges302.2', 'res': '$304binary_multiply.3'}), (306, {'res': '$edge_reps306.4'}), (308, {'lhs': '$304binary_multiply.3', 'rhs': '$edge_reps306.4', 'res': '$308binary_subtract.5'}), (310, {'value': '$308binary_subtract.5'}), (312, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={318: ('$phi300.0',)})
DEBUG 2022-02-14 16:38:18,018 block_infos State(pc_initial=314 nstack_initial=1):
AdaptBlockInfo(insts=((314, {'res': '$kept_edges314.1'}), (316, {'value': '$kept_edges314.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={318: ('$phi314.0',)})
DEBUG 2022-02-14 16:38:18,018 block_infos State(pc_initial=318 nstack_initial=1):
AdaptBlockInfo(insts=((318, {'res': '$318load_global.1'}), (320, {'res': '$delta320.2'}), (322, {'res': '$A322.3'}), (324, {'res': '$D324.4'}), (326, {'res': '$oddV326.5'}), (328, {'func': '$318load_global.1', 'args': ['$delta320.2', '$A322.3', '$D324.4', '$oddV326.5'], 'res': '$328call_function.6'}), (330, {'iterable': '$328call_function.6', 'stores': ['$330unpack_sequence.7', '$330unpack_sequence.8', '$330unpack_sequence.9', '$330unpack_sequence.10'], 'tupleobj': '$330unpack_sequence.11'}), (332, {'value': '$330unpack_sequence.7'}), (334, {'value': '$330unpack_sequence.8'}), (336, {'value': '$330unpack_sequence.9'}), (338, {'value': '$330unpack_sequence.10'}), (340, {'res': '$340load_global.12'}), (342, {'res': '$AX_S342.13'}), (344, {'func': '$340load_global.12', 'args': ['$AX_S342.13'], 'res': '$344call_function.14'}), (346, {'value': '$344call_function.14'}), (348, {'res': '$kept_edges348.15'}), (350, {'res': '$const350.16'}), (352, {'index': '$const350.16', 'target': '$kept_edges348.15', 'res': '$352binary_subscr.17'}), (354, {'res': '$const354.18'}), (356, {'lhs': '$352binary_subscr.17', 'rhs': '$const354.18', 'res': '$356compare_op.19'}), (358, {'pred': '$356compare_op.19'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={362: ('$phi318.0',), 450: ('$phi318.0',)})
DEBUG 2022-02-14 16:38:18,018 block_infos State(pc_initial=362 nstack_initial=1):
AdaptBlockInfo(insts=((362, {'res': '$kept_edges362.1'}), (364, {'res': '$const364.2'}), (366, {'index': '$const364.2', 'target': '$kept_edges362.1', 'res': '$366binary_subscr.3'}), (368, {'res': '$const368.4'}), (370, {'lhs': '$366binary_subscr.3', 'rhs': '$const368.4', 'res': '$370compare_op.5'}), (372, {'pred': '$370compare_op.5'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={376: ('$phi362.0',), 450: ('$phi362.0',)})
DEBUG 2022-02-14 16:38:18,018 block_infos State(pc_initial=376 nstack_initial=1):
AdaptBlockInfo(insts=((376, {'res': '$376load_global.1'}), (378, {'res': '$delta378.2'}), (380, {'res': '$oddV0380.3'}), (382, {'func': '$376load_global.1', 'args': ['$delta378.2', '$oddV0380.3'], 'res': '$382call_function.4'}), (384, {'value': '$382call_function.4'}), (386, {'res': '$const386.5'}), (388, {'res': '$N_fixed388.6'}), (390, {'res': '$const390.7'}), (392, {'lhs': '$N_fixed388.6', 'rhs': '$const390.7', 'res': '$392binary_floor_divide.8'}), (394, {'res': '$edges_sum394.9'}), (396, {'lhs': '$392binary_floor_divide.8', 'rhs': '$edges_sum394.9', 'res': '$396binary_subtract.10'}), (398, {'lhs': '$const386.5', 'rhs': '$396binary_subtract.10', 'res': '$398binary_power.11'}), (400, {'value': '$398binary_power.11'}), (402, {'res': '$402load_global.12'}), (404, {'res': '$E404.13'}), (406, {'res': '$AX_S406.14'}), (408, {'res': '$XD_S408.15'}), (410, {'res': '$D_S410.16'}), (412, {'res': '$N_fixed412.17'}), (414, {'res': '$oddloop0414.18'}), (416, {'res': '$oddVX_S0416.19'}), (418, {'func': '$402load_global.12', 'args': ['$E404.13', '$AX_S406.14', '$XD_S408.15', '$D_S410.16', '$N_fixed412.17', '$oddloop0414.18', '$oddVX_S0416.19'], 'res': '$418call_function.20'}), (420, {'res': '$N_fixed420.21'}), (422, {'index': '$N_fixed420.21', 'target': '$418call_function.20', 'res': '$422binary_subscr.22'}), (424, {'value': '$422binary_subscr.22'}), (426, {'res': '$H_batch426.23'}), (428, {'res': '$const428.24'}), (430, {'orig': ['$H_batch426.23', '$const428.24'], 'duped': ['$430dup_top_two.25', '$430dup_top_two.26']}), (432, {'index': '$430dup_top_two.26', 'target': '$430dup_top_two.25', 'res': '$432binary_subscr.27'}), (434, {'res': '$binom_prod434.28'}), (436, {'res': '$plus_minus436.29'}), (438, {'lhs': '$binom_prod434.28', 'rhs': '$plus_minus436.29', 'res': '$438binary_multiply.30'}), (440, {'res': '$f440.31'}), (442, {'lhs': '$438binary_multiply.30', 'rhs': '$f440.31', 'res': '$442binary_multiply.32'}), (444, {'lhs': '$432binary_subscr.27', 'rhs': '$442binary_multiply.32', 'res': '$444inplace_add.33'}), (448, {'target': '$H_batch426.23', 'index': '$const428.24', 'value': '$444inplace_add.33'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={450: ('$phi376.0',)})
DEBUG 2022-02-14 16:38:18,019 block_infos State(pc_initial=450 nstack_initial=1):
AdaptBlockInfo(insts=((450, {'res': '$450load_global.1'}), (452, {'res': '$E452.2'}), (454, {'res': '$AX_S454.3'}), (456, {'res': '$XD_S456.4'}), (458, {'res': '$D_S458.5'}), (460, {'res': '$N_max460.6'}), (462, {'func': '$450load_global.1', 'args': ['$E452.2', '$AX_S454.3', '$XD_S456.4', '$D_S458.5', '$N_max460.6'], 'res': '$462call_function.7'}), (464, {'value': '$462call_function.7'}), (466, {'res': '$466load_global.8'}), (468, {'res': '$E468.9'}), (470, {'res': '$AX_S470.10'}), (472, {'res': '$XD_S472.11'}), (474, {'res': '$D_S474.12'}), (476, {'res': '$N_max476.13'}), (478, {'res': '$oddloop478.14'}), (480, {'res': '$oddVX_S480.15'}), (482, {'func': '$466load_global.8', 'args': ['$E468.9', '$AX_S470.10', '$XD_S472.11', '$D_S474.12', '$N_max476.13', '$oddloop478.14', '$oddVX_S480.15'], 'res': '$482call_function.16'}), (484, {'value': '$482call_function.16'}), (486, {'res': '$486load_global.17'}), (488, {'res': '$const488.18'}), (490, {'res': '$kept_edges490.19'}), (492, {'res': '$const492.20'}), (494, {'index': '$const492.20', 'target': '$kept_edges490.19', 'res': '$494binary_subscr.21'}), (496, {'lhs': '$const488.18', 'rhs': '$494binary_subscr.21', 'res': '$496binary_multiply.22'}), (498, {'res': '$const498.23'}), (500, {'lhs': '$496binary_multiply.22', 'rhs': '$const498.23', 'res': '$500binary_add.24'}), (502, {'res': '$const502.25'}), (504, {'res': '$batch_max504.26'}), (506, {'lhs': '$const502.25', 'rhs': '$batch_max504.26', 'res': '$506binary_multiply.27'}), (508, {'res': '$even_cutoff508.28'}), (510, {'lhs': '$506binary_multiply.27', 'rhs': '$even_cutoff508.28', 'res': '$510binary_add.29'}), (512, {'res': '$const512.30'}), (514, {'lhs': '$510binary_add.29', 'rhs': '$const512.30', 'res': '$514binary_add.31'}), (516, {'func': '$486load_global.17', 'args': ['$500binary_add.24', '$514binary_add.31'], 'res': '$516call_function.32'}), (518, {'value': '$516call_function.32', 'res': '$518get_iter.33'})), outgoing_phis={'$phi520.1': '$518get_iter.33'}, blockstack=(), active_try_block=None, outgoing_edgepushed={520: ('$phi450.0', '$518get_iter.33')})
DEBUG 2022-02-14 16:38:18,019 block_infos State(pc_initial=520 nstack_initial=2):
AdaptBlockInfo(insts=((520, {'iterator': '$phi520.1', 'pair': '$520for_iter.2', 'indval': '$520for_iter.3', 'pred': '$520for_iter.4'}),), outgoing_phis={'$phi522.2': '$520for_iter.3'}, blockstack=(), active_try_block=None, outgoing_edgepushed={656: ('$phi520.0',), 522: ('$phi520.0', '$phi520.1', '$520for_iter.3')})
DEBUG 2022-02-14 16:38:18,019 block_infos State(pc_initial=522 nstack_initial=3):
AdaptBlockInfo(insts=((522, {'value': '$phi522.2'}), (524, {'res': '$N_fixed524.3'}), (526, {'res': '$N_det526.4'}), (528, {'lhs': '$N_fixed524.3', 'rhs': '$N_det526.4', 'res': '$528binary_add.5'}), (530, {'value': '$528binary_add.5'}), (532, {'res': '$const532.6'}), (534, {'res': '$N534.7'}), (536, {'res': '$const536.8'}), (538, {'lhs': '$N534.7', 'rhs': '$const536.8', 'res': '$538binary_floor_divide.9'}), (540, {'res': '$edges_sum540.10'}), (542, {'lhs': '$538binary_floor_divide.9', 'rhs': '$edges_sum540.10', 'res': '$542binary_subtract.11'}), (544, {'lhs': '$const532.6', 'rhs': '$542binary_subtract.11', 'res': '$544binary_power.12'}), (546, {'value': '$544binary_power.12'}), (548, {'res': '$binoms548.13'}), (550, {'res': '$N_det550.14'}), (552, {'res': '$const552.15'}), (554, {'lhs': '$N_det550.14', 'rhs': '$const552.15', 'res': '$554binary_subtract.16'}), (556, {'res': '$const556.17'}), (558, {'lhs': '$554binary_subtract.16', 'rhs': '$const556.17', 'res': '$558binary_floor_divide.18'}), (560, {'res': '$kept_edges560.19'}), (562, {'res': '$const562.20'}), (564, {'index': '$const562.20', 'target': '$kept_edges560.19', 'res': '$564binary_subscr.21'}), (566, {'items': ['$558binary_floor_divide.18', '$564binary_subscr.21'], 'res': '$566build_tuple.22'}), (568, {'index': '$566build_tuple.22', 'target': '$binoms548.13', 'res': '$568binary_subscr.23'}), (570, {'res': '$binom_prod570.24'}), (572, {'lhs': '$568binary_subscr.23', 'rhs': '$binom_prod570.24', 'res': '$572binary_multiply.25'}), (574, {'value': '$572binary_multiply.25'}), (576, {'res': '$N576.26'}), (578, {'res': '$const578.27'}), (580, {'lhs': '$N576.26', 'rhs': '$const578.27', 'res': '$580binary_modulo.28'}), (582, {'res': '$const582.29'}), (584, {'lhs': '$580binary_modulo.28', 'rhs': '$const582.29', 'res': '$584compare_op.30'}), (586, {'pred': '$584compare_op.30'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={590: ('$phi522.0', '$phi522.1'), 624: ('$phi522.0', '$phi522.1')})
DEBUG 2022-02-14 16:38:18,019 block_infos State(pc_initial=590 nstack_initial=2):
AdaptBlockInfo(insts=((590, {'res': '$Hnew590.2'}), (592, {'res': '$N_det592.3'}), (594, {'orig': ['$Hnew590.2', '$N_det592.3'], 'duped': ['$594dup_top_two.4', '$594dup_top_two.5']}), (596, {'index': '$594dup_top_two.5', 'target': '$594dup_top_two.4', 'res': '$596binary_subscr.6'}), (598, {'res': '$n_det_binom_prod598.7'}), (600, {'res': '$plus_minus600.8'}), (602, {'lhs': '$n_det_binom_prod598.7', 'rhs': '$plus_minus600.8', 'res': '$602binary_multiply.9'}), (604, {'res': '$f_even604.10'}), (606, {'res': '$N606.11'}), (608, {'res': '$const608.12'}), (610, {'lhs': '$N606.11', 'rhs': '$const608.12', 'res': '$610binary_floor_divide.13'}), (612, {'index': '$610binary_floor_divide.13', 'target': '$f_even604.10', 'res': '$612binary_subscr.14'}), (614, {'lhs': '$602binary_multiply.9', 'rhs': '$612binary_subscr.14', 'res': '$614binary_multiply.15'}), (616, {'lhs': '$596binary_subscr.6', 'rhs': '$614binary_multiply.15', 'res': '$616inplace_add.16'}), (620, {'target': '$Hnew590.2', 'index': '$N_det592.3', 'value': '$616inplace_add.16'}), (622, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={652: ('$phi590.0', '$phi590.1')})
DEBUG 2022-02-14 16:38:18,019 block_infos State(pc_initial=624 nstack_initial=2):
AdaptBlockInfo(insts=((624, {'res': '$Hnew624.2'}), (626, {'res': '$N_det626.3'}), (628, {'orig': ['$Hnew624.2', '$N_det626.3'], 'duped': ['$628dup_top_two.4', '$628dup_top_two.5']}), (630, {'index': '$628dup_top_two.5', 'target': '$628dup_top_two.4', 'res': '$630binary_subscr.6'}), (632, {'res': '$n_det_binom_prod632.7'}), (634, {'res': '$plus_minus634.8'}), (636, {'lhs': '$n_det_binom_prod632.7', 'rhs': '$plus_minus634.8', 'res': '$636binary_multiply.9'}), (638, {'res': '$f_odd638.10'}), (640, {'res': '$N640.11'}), (642, {'index': '$N640.11', 'target': '$f_odd638.10', 'res': '$642binary_subscr.12'}), (644, {'lhs': '$636binary_multiply.9', 'rhs': '$642binary_subscr.12', 'res': '$644binary_multiply.13'}), (646, {'lhs': '$630binary_subscr.6', 'rhs': '$644binary_multiply.13', 'res': '$646inplace_add.14'}), (650, {'target': '$Hnew624.2', 'index': '$N_det626.3', 'value': '$646inplace_add.14'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={652: ('$phi624.0', '$phi624.1')})
DEBUG 2022-02-14 16:38:18,019 block_infos State(pc_initial=652 nstack_initial=2):
AdaptBlockInfo(insts=((652, {}),), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={520: ('$phi652.0', '$phi652.1')})
DEBUG 2022-02-14 16:38:18,019 block_infos State(pc_initial=656 nstack_initial=1):
AdaptBlockInfo(insts=((656, {'res': '$H_batch656.1'}), (658, {'res': '$Hnew658.2'}), (660, {'lhs': '$H_batch656.1', 'rhs': '$Hnew658.2', 'res': '$660inplace_add.3'}), (662, {'value': '$660inplace_add.3'}), (664, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={192: ('$phi656.0',)})
DEBUG 2022-02-14 16:38:18,019 block_infos State(pc_initial=666 nstack_initial=0):
AdaptBlockInfo(insts=((666, {'res': '$glynn666.0'}), (668, {'pred': '$glynn666.0'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={672: (), 726: ()})
DEBUG 2022-02-14 16:38:18,019 block_infos State(pc_initial=672 nstack_initial=0):
AdaptBlockInfo(insts=((672, {'res': '$672load_global.0'}), (674, {'res': '$H_batch674.1'}), (676, {'item': '$H_batch674.1', 'res': '$676load_attr.2'}), (678, {'res': '$const678.3'}), (680, {'index': '$const678.3', 'target': '$676load_attr.2', 'res': '$680binary_subscr.4'}), (682, {'func': '$672load_global.0', 'args': ['$680binary_subscr.4'], 'res': '$682call_function.5'}), (684, {'value': '$682call_function.5', 'res': '$684get_iter.6'})), outgoing_phis={'$phi686.0': '$684get_iter.6'}, blockstack=(), active_try_block=None, outgoing_edgepushed={686: ('$684get_iter.6',)})
DEBUG 2022-02-14 16:38:18,019 block_infos State(pc_initial=686 nstack_initial=1):
AdaptBlockInfo(insts=((686, {'iterator': '$phi686.0', 'pair': '$686for_iter.1', 'indval': '$686for_iter.2', 'pred': '$686for_iter.3'}),), outgoing_phis={'$phi688.1': '$686for_iter.2'}, blockstack=(), active_try_block=None, outgoing_edgepushed={726: (), 688: ('$phi686.0', '$686for_iter.2')})
DEBUG 2022-02-14 16:38:18,019 block_infos State(pc_initial=688 nstack_initial=2):
AdaptBlockInfo(insts=((688, {'value': '$phi688.1'}), (690, {'res': '$N_fixed690.2'}), (692, {'res': '$j692.3'}), (694, {'lhs': '$N_fixed690.2', 'rhs': '$j692.3', 'res': '$694binary_add.4'}), (696, {'value': '$694binary_add.4'}), (698, {'res': '$H_batch698.5'}), (700, {'res': '$j700.6'}), (702, {'orig': ['$H_batch698.5', '$j700.6'], 'duped': ['$702dup_top_two.7', '$702dup_top_two.8']}), (704, {'index': '$702dup_top_two.8', 'target': '$702dup_top_two.7', 'res': '$704binary_subscr.9'}), (706, {'res': '$const706.10'}), (708, {'res': '$x708.11'}), (710, {'res': '$const710.12'}), (712, {'lhs': '$x708.11', 'rhs': '$const710.12', 'res': '$712binary_floor_divide.13'}), (714, {'lhs': '$const706.10', 'rhs': '$712binary_floor_divide.13', 'res': '$714binary_power.14'}), (716, {'lhs': '$704binary_subscr.9', 'rhs': '$714binary_power.14', 'res': '$716inplace_multiply.15'}), (720, {'target': '$H_batch698.5', 'index': '$j700.6', 'value': '$716inplace_multiply.15'}), (722, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={686: ('$phi688.0',)})
DEBUG 2022-02-14 16:38:18,019 block_infos State(pc_initial=726 nstack_initial=0):
AdaptBlockInfo(insts=((726, {'res': '$H_batch726.0'}), (728, {'retval': '$H_batch726.0', 'castval': '$728return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG 2022-02-14 16:38:18,026 label 0:
    A = arg(0, name=A)                       ['A']
    D = arg(1, name=D)                       ['D']
    fixed_edge_reps = arg(2, name=fixed_edge_reps) ['fixed_edge_reps']
    batch_max = arg(3, name=batch_max)       ['batch_max']
    even_cutoff = arg(4, name=even_cutoff)   ['even_cutoff']
    oddmode = arg(5, name=oddmode)           ['oddmode']
    glynn = arg(6, name=glynn)               ['glynn']
    $const4.1 = const(int, 0)                ['$const4.1']
    oddloop = getitem(value=D, index=$const4.1, fn=<built-in function getitem>) ['$const4.1', 'D', 'oddloop']
    $const12.4 = const(int, 0)               ['$const12.4']
    $const14.5 = const(NoneType, None)       ['$const14.5']
    $const16.6 = const(NoneType, None)       ['$const16.6']
    $18build_slice.7 = global(slice: <class 'slice'>) ['$18build_slice.7']
    $18build_slice.8 = call $18build_slice.7($const14.5, $const16.6, func=$18build_slice.7, args=(Var($const14.5, loop_hafnian_batch.py:84), Var($const16.6, loop_hafnian_batch.py:84)), kws=(), vararg=None, target=None) ['$18build_slice.7', '$18build_slice.8', '$const14.5', '$const16.6']
    $20build_tuple.9 = build_tuple(items=[Var($const12.4, loop_hafnian_batch.py:84), Var($18build_slice.8, loop_hafnian_batch.py:84)]) ['$18build_slice.8', '$20build_tuple.9', '$const12.4']
    oddV = getitem(value=A, index=$20build_tuple.9, fn=<built-in function getitem>) ['$20build_tuple.9', 'A', 'oddV']
    $const28.12 = const(int, 1)              ['$const28.12']
    oddloop0 = getitem(value=D, index=$const28.12, fn=<built-in function getitem>) ['$const28.12', 'D', 'oddloop0']
    $const36.15 = const(int, 1)              ['$const36.15']
    $const38.16 = const(NoneType, None)      ['$const38.16']
    $const40.17 = const(NoneType, None)      ['$const40.17']
    $42build_slice.18 = global(slice: <class 'slice'>) ['$42build_slice.18']
    $42build_slice.19 = call $42build_slice.18($const38.16, $const40.17, func=$42build_slice.18, args=(Var($const38.16, loop_hafnian_batch.py:89), Var($const40.17, loop_hafnian_batch.py:89)), kws=(), vararg=None, target=None) ['$42build_slice.18', '$42build_slice.19', '$const38.16', '$const40.17']
    $44build_tuple.20 = build_tuple(items=[Var($const36.15, loop_hafnian_batch.py:89), Var($42build_slice.19, loop_hafnian_batch.py:89)]) ['$42build_slice.19', '$44build_tuple.20', '$const36.15']
    oddV0 = getitem(value=A, index=$44build_tuple.20, fn=<built-in function getitem>) ['$44build_tuple.20', 'A', 'oddV0']
    $52load_attr.23 = getattr(value=A, attr=shape) ['$52load_attr.23', 'A']
    $const54.24 = const(int, 0)              ['$const54.24']
    n = getitem(value=$52load_attr.23, index=$const54.24, fn=<built-in function getitem>) ['$52load_attr.23', '$const54.24', 'n']
    $const60.26 = const(int, 2)              ['$const60.26']
    $64load_method.28 = getattr(value=fixed_edge_reps, attr=sum) ['$64load_method.28', 'fixed_edge_reps']
    $66call_method.29 = call $64load_method.28(func=$64load_method.28, args=[], kws=(), vararg=None, target=None) ['$64load_method.28', '$66call_method.29']
    $68binary_multiply.30 = $const60.26 * $66call_method.29 ['$66call_method.29', '$68binary_multiply.30', '$const60.26']
    $const70.31 = const(int, 1)              ['$const70.31']
    N_fixed = $68binary_multiply.30 + $const70.31 ['$68binary_multiply.30', '$const70.31', 'N_fixed']
    $const78.34 = const(int, 2)              ['$const78.34']
    $82binary_multiply.36 = $const78.34 * batch_max ['$82binary_multiply.36', '$const78.34', 'batch_max']
    $84binary_add.37 = N_fixed + $82binary_multiply.36 ['$82binary_multiply.36', '$84binary_add.37', 'N_fixed']
    $88binary_add.39 = $84binary_add.37 + even_cutoff ['$84binary_add.37', '$88binary_add.39', 'even_cutoff']
    $const90.40 = const(int, 1)              ['$const90.40']
    N_max = $88binary_add.39 + $const90.40   ['$88binary_add.39', '$const90.40', 'N_max']
    $96load_global.42 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>) ['$96load_global.42']
    $98load_method.43 = getattr(value=$96load_global.42, attr=concatenate) ['$96load_global.42', '$98load_method.43']
    $100load_global.44 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>) ['$100load_global.44']
    $102load_method.45 = getattr(value=$100load_global.44, attr=array) ['$100load_global.44', '$102load_method.45']
    $const106.47 = const(int, 1)             ['$const106.47']
    $108build_list.48 = build_list(items=[Var(batch_max, loop_hafnian_batch.py:83), Var($const106.47, loop_hafnian_batch.py:95)]) ['$108build_list.48', '$const106.47', 'batch_max']
    $110call_method.49 = call $102load_method.45($108build_list.48, func=$102load_method.45, args=[Var($108build_list.48, loop_hafnian_batch.py:95)], kws=(), vararg=None, target=None) ['$102load_method.45', '$108build_list.48', '$110call_method.49']
    $114build_tuple.51 = build_tuple(items=[Var($110call_method.49, loop_hafnian_batch.py:95), Var(fixed_edge_reps, loop_hafnian_batch.py:83)]) ['$110call_method.49', '$114build_tuple.51', 'fixed_edge_reps']
    edge_reps = call $98load_method.43($114build_tuple.51, func=$98load_method.43, args=[Var($114build_tuple.51, loop_hafnian_batch.py:95)], kws=(), vararg=None, target=None) ['$114build_tuple.51', '$98load_method.43', 'edge_reps']
    $120load_global.53 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>) ['$120load_global.53']
    $122load_method.54 = getattr(value=$120load_global.53, attr=prod) ['$120load_global.53', '$122load_method.54']
    $const126.56 = const(int, 1)             ['$const126.56']
    $128binary_add.57 = edge_reps + $const126.56 ['$128binary_add.57', '$const126.56', 'edge_reps']
    steps = call $122load_method.54($128binary_add.57, func=$122load_method.54, args=[Var($128binary_add.57, loop_hafnian_batch.py:96)], kws=(), vararg=None, target=None) ['$122load_method.54', '$128binary_add.57', 'steps']
    $136load_method.60 = getattr(value=edge_reps, attr=max) ['$136load_method.60', 'edge_reps']
    $138call_method.61 = call $136load_method.60(func=$136load_method.60, args=[], kws=(), vararg=None, target=None) ['$136load_method.60', '$138call_method.61']
    max_binom = $138call_method.61 + even_cutoff ['$138call_method.61', 'even_cutoff', 'max_binom']
    $146load_global.64 = global(precompute_binoms: CPUDispatcher(<function precompute_binoms at 0x7fa047ebe310>)) ['$146load_global.64']
    binoms = call $146load_global.64(max_binom, func=$146load_global.64, args=[Var(max_binom, loop_hafnian_batch.py:98)], kws=(), vararg=None, target=None) ['$146load_global.64', 'binoms', 'max_binom']
    $154load_global.67 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>) ['$154load_global.67']
    $156load_attr.68 = getattr(value=$154load_global.67, attr=zeros) ['$154load_global.67', '$156load_attr.68']
    $const158.69 = const(int, 2)             ['$const158.69']
    $162binary_multiply.71 = $const158.69 * batch_max ['$162binary_multiply.71', '$const158.69', 'batch_max']
    $166binary_add.73 = $162binary_multiply.71 + even_cutoff ['$162binary_multiply.71', '$166binary_add.73', 'even_cutoff']
    $const168.74 = const(int, 2)             ['$const168.74']
    $170binary_add.75 = $166binary_add.73 + $const168.74 ['$166binary_add.73', '$170binary_add.75', '$const168.74']
    $172load_global.76 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>) ['$172load_global.76']
    $174load_attr.77 = getattr(value=$172load_global.76, attr=complex128) ['$172load_global.76', '$174load_attr.77']
    H_batch = call $156load_attr.68($170binary_add.75, func=$156load_attr.68, args=[Var($170binary_add.75, loop_hafnian_batch.py:101)], kws=[('dtype', Var($174load_attr.77, loop_hafnian_batch.py:101))], vararg=None, target=None) ['$156load_attr.68', '$170binary_add.75', '$174load_attr.77', 'H_batch']
    $182load_global.80 = global(numba: <module 'numba' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numba/__init__.py'>) ['$182load_global.80']
    $184load_method.81 = getattr(value=$182load_global.80, attr=prange) ['$182load_global.80', '$184load_method.81']
    $188call_method.83 = call $184load_method.81(steps, func=$184load_method.81, args=[Var(steps, loop_hafnian_batch.py:96)], kws=(), vararg=None, target=None) ['$184load_method.81', '$188call_method.83', 'steps']
    $190get_iter.84 = getiter(value=$188call_method.83) ['$188call_method.83', '$190get_iter.84']
    $phi192.0 = $190get_iter.84              ['$190get_iter.84', '$phi192.0']
    jump 192                                 []
label 192:
    $192for_iter.1 = iternext(value=$phi192.0) ['$192for_iter.1', '$phi192.0']
    $192for_iter.2 = pair_first(value=$192for_iter.1) ['$192for_iter.1', '$192for_iter.2']
    $192for_iter.3 = pair_second(value=$192for_iter.1) ['$192for_iter.1', '$192for_iter.3']
    $phi196.1 = $192for_iter.2               ['$192for_iter.2', '$phi196.1']
    branch $192for_iter.3, 196, 666          ['$192for_iter.3']
label 196:
    j = $phi196.1                            ['$phi196.1', 'j']
    $198load_global.2 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>) ['$198load_global.2']
    $200load_attr.3 = getattr(value=$198load_global.2, attr=zeros) ['$198load_global.2', '$200load_attr.3']
    $const202.4 = const(int, 2)              ['$const202.4']
    $206binary_multiply.6 = $const202.4 * batch_max ['$206binary_multiply.6', '$const202.4', 'batch_max']
    $210binary_add.8 = $206binary_multiply.6 + even_cutoff ['$206binary_multiply.6', '$210binary_add.8', 'even_cutoff']
    $const212.9 = const(int, 2)              ['$const212.9']
    $214binary_add.10 = $210binary_add.8 + $const212.9 ['$210binary_add.8', '$214binary_add.10', '$const212.9']
    $216load_global.11 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>) ['$216load_global.11']
    $218load_attr.12 = getattr(value=$216load_global.11, attr=complex128) ['$216load_global.11', '$218load_attr.12']
    Hnew = call $200load_attr.3($214binary_add.10, func=$200load_attr.3, args=[Var($214binary_add.10, loop_hafnian_batch.py:104)], kws=[('dtype', Var($218load_attr.12, loop_hafnian_batch.py:104))], vararg=None, target=None) ['$200load_attr.3', '$214binary_add.10', '$218load_attr.12', 'Hnew']
    $226load_global.15 = global(find_kept_edges: CPUDispatcher(<function find_kept_edges at 0x7fa047ebe790>)) ['$226load_global.15']
    kept_edges = call $226load_global.15(j, edge_reps, func=$226load_global.15, args=[Var(j, loop_hafnian_batch.py:102), Var(edge_reps, loop_hafnian_batch.py:95)], kws=(), vararg=None, target=None) ['$226load_global.15', 'edge_reps', 'j', 'kept_edges']
    $238load_method.20 = getattr(value=kept_edges, attr=sum) ['$238load_method.20', 'kept_edges']
    edges_sum = call $238load_method.20(func=$238load_method.20, args=[], kws=(), vararg=None, target=None) ['$238load_method.20', 'edges_sum']
    binom_prod = const(float, 1.0)           ['binom_prod']
    $248load_global.23 = global(range: <class 'range'>) ['$248load_global.23']
    $const250.24 = const(int, 1)             ['$const250.24']
    $const254.26 = const(int, 2)             ['$const254.26']
    $256binary_floor_divide.27 = n // $const254.26 ['$256binary_floor_divide.27', '$const254.26', 'n']
    $258call_function.28 = call $248load_global.23($const250.24, $256binary_floor_divide.27, func=$248load_global.23, args=[Var($const250.24, loop_hafnian_batch.py:110), Var($256binary_floor_divide.27, loop_hafnian_batch.py:110)], kws=(), vararg=None, target=None) ['$248load_global.23', '$256binary_floor_divide.27', '$258call_function.28', '$const250.24']
    $260get_iter.29 = getiter(value=$258call_function.28) ['$258call_function.28', '$260get_iter.29']
    $phi262.1 = $260get_iter.29              ['$260get_iter.29', '$phi262.1']
    jump 262                                 []
label 262:
    $262for_iter.2 = iternext(value=$phi262.1) ['$262for_iter.2', '$phi262.1']
    $262for_iter.3 = pair_first(value=$262for_iter.2) ['$262for_iter.2', '$262for_iter.3']
    $262for_iter.4 = pair_second(value=$262for_iter.2) ['$262for_iter.2', '$262for_iter.4']
    $phi264.2 = $262for_iter.3               ['$262for_iter.3', '$phi264.2']
    branch $262for_iter.4, 264, 294          ['$262for_iter.4']
label 264:
    i = $phi264.2                            ['$phi264.2', 'i']
    $274binary_subscr.7 = getitem(value=edge_reps, index=i, fn=<built-in function getitem>) ['$274binary_subscr.7', 'edge_reps', 'i']
    $280binary_subscr.10 = getitem(value=kept_edges, index=i, fn=<built-in function getitem>) ['$280binary_subscr.10', 'i', 'kept_edges']
    $282build_tuple.11 = build_tuple(items=[Var($274binary_subscr.7, loop_hafnian_batch.py:111), Var($280binary_subscr.10, loop_hafnian_batch.py:111)]) ['$274binary_subscr.7', '$280binary_subscr.10', '$282build_tuple.11']
    $284binary_subscr.12 = getitem(value=binoms, index=$282build_tuple.11, fn=<built-in function getitem>) ['$282build_tuple.11', '$284binary_subscr.12', 'binoms']
    $286inplace_multiply.13 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=binom_prod, rhs=$284binary_subscr.12, static_lhs=Undefined, static_rhs=Undefined) ['$284binary_subscr.12', '$286inplace_multiply.13', 'binom_prod']
    binom_prod = $286inplace_multiply.13     ['$286inplace_multiply.13', 'binom_prod']
    jump 262                                 []
label 294:
    bool296 = global(bool: <class 'bool'>)   ['bool296']
    $296pred = call bool296(glynn, func=bool296, args=(Var(glynn, loop_hafnian_batch.py:83),), kws=(), vararg=None, target=None) ['$296pred', 'bool296', 'glynn']
    branch $296pred, 300, 314                ['$296pred']
label 300:
    $const300.1 = const(int, 2)              ['$const300.1']
    $304binary_multiply.3 = $const300.1 * kept_edges ['$304binary_multiply.3', '$const300.1', 'kept_edges']
    delta = $304binary_multiply.3 - edge_reps ['$304binary_multiply.3', 'delta', 'edge_reps']
    jump 318                                 []
label 314:
    delta = kept_edges                       ['delta', 'kept_edges']
    jump 318                                 []
label 318:
    $318load_global.1 = global(get_submatrices: CPUDispatcher(<function get_submatrices at 0x7fa047ebed30>)) ['$318load_global.1']
    $328call_function.6 = call $318load_global.1(delta, A, D, oddV, func=$318load_global.1, args=[Var(delta, loop_hafnian_batch.py:114), Var(A, loop_hafnian_batch.py:83), Var(D, loop_hafnian_batch.py:83), Var(oddV, loop_hafnian_batch.py:84)], kws=(), vararg=None, target=None) ['$318load_global.1', '$328call_function.6', 'A', 'D', 'delta', 'oddV']
    $330unpack_sequence.11 = exhaust_iter(value=$328call_function.6, count=4) ['$328call_function.6', '$330unpack_sequence.11']
    $330unpack_sequence.7 = static_getitem(value=$330unpack_sequence.11, index=0, index_var=None, fn=<built-in function getitem>) ['$330unpack_sequence.11', '$330unpack_sequence.7']
    $330unpack_sequence.8 = static_getitem(value=$330unpack_sequence.11, index=1, index_var=None, fn=<built-in function getitem>) ['$330unpack_sequence.11', '$330unpack_sequence.8']
    $330unpack_sequence.9 = static_getitem(value=$330unpack_sequence.11, index=2, index_var=None, fn=<built-in function getitem>) ['$330unpack_sequence.11', '$330unpack_sequence.9']
    $330unpack_sequence.10 = static_getitem(value=$330unpack_sequence.11, index=3, index_var=None, fn=<built-in function getitem>) ['$330unpack_sequence.10', '$330unpack_sequence.11']
    AX_S = $330unpack_sequence.7             ['$330unpack_sequence.7', 'AX_S']
    XD_S = $330unpack_sequence.8             ['$330unpack_sequence.8', 'XD_S']
    D_S = $330unpack_sequence.9              ['$330unpack_sequence.9', 'D_S']
    oddVX_S = $330unpack_sequence.10         ['$330unpack_sequence.10', 'oddVX_S']
    $340load_global.12 = global(eigvals: CPUDispatcher(<function eigvals at 0x7fa047e5d430>)) ['$340load_global.12']
    E = call $340load_global.12(AX_S, func=$340load_global.12, args=[Var(AX_S, loop_hafnian_batch.py:118)], kws=(), vararg=None, target=None) ['$340load_global.12', 'AX_S', 'E']
    $const350.16 = const(int, 0)             ['$const350.16']
    $352binary_subscr.17 = getitem(value=kept_edges, index=$const350.16, fn=<built-in function getitem>) ['$352binary_subscr.17', '$const350.16', 'kept_edges']
    $const354.18 = const(int, 0)             ['$const354.18']
    $356compare_op.19 = $352binary_subscr.17 == $const354.18 ['$352binary_subscr.17', '$356compare_op.19', '$const354.18']
    bool358 = global(bool: <class 'bool'>)   ['bool358']
    $358pred = call bool358($356compare_op.19, func=bool358, args=(Var($356compare_op.19, loop_hafnian_batch.py:122),), kws=(), vararg=None, target=None) ['$356compare_op.19', '$358pred', 'bool358']
    branch $358pred, 362, 450                ['$358pred']
label 362:
    $const364.2 = const(int, 1)              ['$const364.2']
    $366binary_subscr.3 = getitem(value=kept_edges, index=$const364.2, fn=<built-in function getitem>) ['$366binary_subscr.3', '$const364.2', 'kept_edges']
    $const368.4 = const(int, 0)              ['$const368.4']
    $370compare_op.5 = $366binary_subscr.3 == $const368.4 ['$366binary_subscr.3', '$370compare_op.5', '$const368.4']
    bool372 = global(bool: <class 'bool'>)   ['bool372']
    $372pred = call bool372($370compare_op.5, func=bool372, args=(Var($370compare_op.5, loop_hafnian_batch.py:122),), kws=(), vararg=None, target=None) ['$370compare_op.5', '$372pred', 'bool372']
    branch $372pred, 376, 450                ['$372pred']
label 376:
    $376load_global.1 = global(get_submatrix_batch_odd0: CPUDispatcher(<function get_submatrix_batch_odd0 at 0x7fa047ebef70>)) ['$376load_global.1']
    oddVX_S0 = call $376load_global.1(delta, oddV0, func=$376load_global.1, args=[Var(delta, loop_hafnian_batch.py:114), Var(oddV0, loop_hafnian_batch.py:89)], kws=(), vararg=None, target=None) ['$376load_global.1', 'delta', 'oddV0', 'oddVX_S0']
    $const386.5 = const(int, -1)             ['$const386.5']
    $const390.7 = const(int, 2)              ['$const390.7']
    $392binary_floor_divide.8 = N_fixed // $const390.7 ['$392binary_floor_divide.8', '$const390.7', 'N_fixed']
    $396binary_subtract.10 = $392binary_floor_divide.8 - edges_sum ['$392binary_floor_divide.8', '$396binary_subtract.10', 'edges_sum']
    plus_minus = $const386.5 ** $396binary_subtract.10 ['$396binary_subtract.10', '$const386.5', 'plus_minus']
    $402load_global.12 = global(f_loop_odd: CPUDispatcher(<function f_loop_odd at 0x7fa047ebeb80>)) ['$402load_global.12']
    $418call_function.20 = call $402load_global.12(E, AX_S, XD_S, D_S, N_fixed, oddloop0, oddVX_S0, func=$402load_global.12, args=[Var(E, loop_hafnian_batch.py:120), Var(AX_S, loop_hafnian_batch.py:118), Var(XD_S, loop_hafnian_batch.py:118), Var(D_S, loop_hafnian_batch.py:118), Var(N_fixed, loop_hafnian_batch.py:92), Var(oddloop0, loop_hafnian_batch.py:88), Var(oddVX_S0, loop_hafnian_batch.py:123)], kws=(), vararg=None, target=None) ['$402load_global.12', '$418call_function.20', 'AX_S', 'D_S', 'E', 'N_fixed', 'XD_S', 'oddVX_S0', 'oddloop0']
    f = getitem(value=$418call_function.20, index=N_fixed, fn=<built-in function getitem>) ['$418call_function.20', 'N_fixed', 'f']
    $const428.24 = const(int, 0)             ['$const428.24']
    $432binary_subscr.27 = getitem(value=H_batch, index=$const428.24, fn=<built-in function getitem>) ['$432binary_subscr.27', '$const428.24', 'H_batch']
    $438binary_multiply.30 = binom_prod * plus_minus ['$438binary_multiply.30', 'binom_prod', 'plus_minus']
    $442binary_multiply.32 = $438binary_multiply.30 * f ['$438binary_multiply.30', '$442binary_multiply.32', 'f']
    $444inplace_add.33 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$432binary_subscr.27, rhs=$442binary_multiply.32, static_lhs=Undefined, static_rhs=Undefined) ['$432binary_subscr.27', '$442binary_multiply.32', '$444inplace_add.33']
    H_batch[$const428.24] = $444inplace_add.33 ['$444inplace_add.33', '$const428.24', 'H_batch']
    jump 450                                 []
label 450:
    $450load_global.1 = global(f_loop: CPUDispatcher(<function f_loop at 0x7fa047ebe9d0>)) ['$450load_global.1']
    f_even = call $450load_global.1(E, AX_S, XD_S, D_S, N_max, func=$450load_global.1, args=[Var(E, loop_hafnian_batch.py:120), Var(AX_S, loop_hafnian_batch.py:118), Var(XD_S, loop_hafnian_batch.py:118), Var(D_S, loop_hafnian_batch.py:118), Var(N_max, loop_hafnian_batch.py:93)], kws=(), vararg=None, target=None) ['$450load_global.1', 'AX_S', 'D_S', 'E', 'N_max', 'XD_S', 'f_even']
    $466load_global.8 = global(f_loop_odd: CPUDispatcher(<function f_loop_odd at 0x7fa047ebeb80>)) ['$466load_global.8']
    f_odd = call $466load_global.8(E, AX_S, XD_S, D_S, N_max, oddloop, oddVX_S, func=$466load_global.8, args=[Var(E, loop_hafnian_batch.py:120), Var(AX_S, loop_hafnian_batch.py:118), Var(XD_S, loop_hafnian_batch.py:118), Var(D_S, loop_hafnian_batch.py:118), Var(N_max, loop_hafnian_batch.py:93), Var(oddloop, loop_hafnian_batch.py:83), Var(oddVX_S, loop_hafnian_batch.py:118)], kws=(), vararg=None, target=None) ['$466load_global.8', 'AX_S', 'D_S', 'E', 'N_max', 'XD_S', 'f_odd', 'oddVX_S', 'oddloop']
    $486load_global.17 = global(range: <class 'range'>) ['$486load_global.17']
    $const488.18 = const(int, 2)             ['$const488.18']
    $const492.20 = const(int, 0)             ['$const492.20']
    $494binary_subscr.21 = getitem(value=kept_edges, index=$const492.20, fn=<built-in function getitem>) ['$494binary_subscr.21', '$const492.20', 'kept_edges']
    $496binary_multiply.22 = $const488.18 * $494binary_subscr.21 ['$494binary_subscr.21', '$496binary_multiply.22', '$const488.18']
    $const498.23 = const(int, 1)             ['$const498.23']
    $500binary_add.24 = $496binary_multiply.22 + $const498.23 ['$496binary_multiply.22', '$500binary_add.24', '$const498.23']
    $const502.25 = const(int, 2)             ['$const502.25']
    $506binary_multiply.27 = $const502.25 * batch_max ['$506binary_multiply.27', '$const502.25', 'batch_max']
    $510binary_add.29 = $506binary_multiply.27 + even_cutoff ['$506binary_multiply.27', '$510binary_add.29', 'even_cutoff']
    $const512.30 = const(int, 2)             ['$const512.30']
    $514binary_add.31 = $510binary_add.29 + $const512.30 ['$510binary_add.29', '$514binary_add.31', '$const512.30']
    $516call_function.32 = call $486load_global.17($500binary_add.24, $514binary_add.31, func=$486load_global.17, args=[Var($500binary_add.24, loop_hafnian_batch.py:131), Var($514binary_add.31, loop_hafnian_batch.py:131)], kws=(), vararg=None, target=None) ['$486load_global.17', '$500binary_add.24', '$514binary_add.31', '$516call_function.32']
    $518get_iter.33 = getiter(value=$516call_function.32) ['$516call_function.32', '$518get_iter.33']
    $phi520.1 = $518get_iter.33              ['$518get_iter.33', '$phi520.1']
    jump 520                                 []
label 520:
    $520for_iter.2 = iternext(value=$phi520.1) ['$520for_iter.2', '$phi520.1']
    $520for_iter.3 = pair_first(value=$520for_iter.2) ['$520for_iter.2', '$520for_iter.3']
    $520for_iter.4 = pair_second(value=$520for_iter.2) ['$520for_iter.2', '$520for_iter.4']
    $phi522.2 = $520for_iter.3               ['$520for_iter.3', '$phi522.2']
    branch $520for_iter.4, 522, 656          ['$520for_iter.4']
label 522:
    N_det = $phi522.2                        ['$phi522.2', 'N_det']
    N = N_fixed + N_det                      ['N', 'N_det', 'N_fixed']
    $const532.6 = const(int, -1)             ['$const532.6']
    $const536.8 = const(int, 2)              ['$const536.8']
    $538binary_floor_divide.9 = N // $const536.8 ['$538binary_floor_divide.9', '$const536.8', 'N']
    $542binary_subtract.11 = $538binary_floor_divide.9 - edges_sum ['$538binary_floor_divide.9', '$542binary_subtract.11', 'edges_sum']
    plus_minus = $const532.6 ** $542binary_subtract.11 ['$542binary_subtract.11', '$const532.6', 'plus_minus']
    $const552.15 = const(int, 1)             ['$const552.15']
    $554binary_subtract.16 = N_det - $const552.15 ['$554binary_subtract.16', '$const552.15', 'N_det']
    $const556.17 = const(int, 2)             ['$const556.17']
    $558binary_floor_divide.18 = $554binary_subtract.16 // $const556.17 ['$554binary_subtract.16', '$558binary_floor_divide.18', '$const556.17']
    $const562.20 = const(int, 0)             ['$const562.20']
    $564binary_subscr.21 = getitem(value=kept_edges, index=$const562.20, fn=<built-in function getitem>) ['$564binary_subscr.21', '$const562.20', 'kept_edges']
    $566build_tuple.22 = build_tuple(items=[Var($558binary_floor_divide.18, loop_hafnian_batch.py:135), Var($564binary_subscr.21, loop_hafnian_batch.py:135)]) ['$558binary_floor_divide.18', '$564binary_subscr.21', '$566build_tuple.22']
    $568binary_subscr.23 = getitem(value=binoms, index=$566build_tuple.22, fn=<built-in function getitem>) ['$566build_tuple.22', '$568binary_subscr.23', 'binoms']
    n_det_binom_prod = $568binary_subscr.23 * binom_prod ['$568binary_subscr.23', 'binom_prod', 'n_det_binom_prod']
    $const578.27 = const(int, 2)             ['$const578.27']
    $580binary_modulo.28 = N % $const578.27  ['$580binary_modulo.28', '$const578.27', 'N']
    $const582.29 = const(int, 0)             ['$const582.29']
    $584compare_op.30 = $580binary_modulo.28 == $const582.29 ['$580binary_modulo.28', '$584compare_op.30', '$const582.29']
    bool586 = global(bool: <class 'bool'>)   ['bool586']
    $586pred = call bool586($584compare_op.30, func=bool586, args=(Var($584compare_op.30, loop_hafnian_batch.py:137),), kws=(), vararg=None, target=None) ['$584compare_op.30', '$586pred', 'bool586']
    branch $586pred, 590, 624                ['$586pred']
label 590:
    $596binary_subscr.6 = getitem(value=Hnew, index=N_det, fn=<built-in function getitem>) ['$596binary_subscr.6', 'Hnew', 'N_det']
    $602binary_multiply.9 = n_det_binom_prod * plus_minus ['$602binary_multiply.9', 'n_det_binom_prod', 'plus_minus']
    $const608.12 = const(int, 2)             ['$const608.12']
    $610binary_floor_divide.13 = N // $const608.12 ['$610binary_floor_divide.13', '$const608.12', 'N']
    $612binary_subscr.14 = getitem(value=f_even, index=$610binary_floor_divide.13, fn=<built-in function getitem>) ['$610binary_floor_divide.13', '$612binary_subscr.14', 'f_even']
    $614binary_multiply.15 = $602binary_multiply.9 * $612binary_subscr.14 ['$602binary_multiply.9', '$612binary_subscr.14', '$614binary_multiply.15']
    $616inplace_add.16 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$596binary_subscr.6, rhs=$614binary_multiply.15, static_lhs=Undefined, static_rhs=Undefined) ['$596binary_subscr.6', '$614binary_multiply.15', '$616inplace_add.16']
    Hnew[N_det] = $616inplace_add.16         ['$616inplace_add.16', 'Hnew', 'N_det']
    jump 652                                 []
label 624:
    $630binary_subscr.6 = getitem(value=Hnew, index=N_det, fn=<built-in function getitem>) ['$630binary_subscr.6', 'Hnew', 'N_det']
    $636binary_multiply.9 = n_det_binom_prod * plus_minus ['$636binary_multiply.9', 'n_det_binom_prod', 'plus_minus']
    $642binary_subscr.12 = getitem(value=f_odd, index=N, fn=<built-in function getitem>) ['$642binary_subscr.12', 'N', 'f_odd']
    $644binary_multiply.13 = $636binary_multiply.9 * $642binary_subscr.12 ['$636binary_multiply.9', '$642binary_subscr.12', '$644binary_multiply.13']
    $646inplace_add.14 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$630binary_subscr.6, rhs=$644binary_multiply.13, static_lhs=Undefined, static_rhs=Undefined) ['$630binary_subscr.6', '$644binary_multiply.13', '$646inplace_add.14']
    Hnew[N_det] = $646inplace_add.14         ['$646inplace_add.14', 'Hnew', 'N_det']
    jump 652                                 []
label 652:
    jump 520                                 []
label 656:
    $660inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=H_batch, rhs=Hnew, static_lhs=Undefined, static_rhs=Undefined) ['$660inplace_add.3', 'H_batch', 'Hnew']
    H_batch = $660inplace_add.3              ['$660inplace_add.3', 'H_batch']
    jump 192                                 []
label 666:
    bool668 = global(bool: <class 'bool'>)   ['bool668']
    $668pred = call bool668(glynn, func=bool668, args=(Var(glynn, loop_hafnian_batch.py:83),), kws=(), vararg=None, target=None) ['$668pred', 'bool668', 'glynn']
    branch $668pred, 672, 726                ['$668pred']
label 672:
    $672load_global.0 = global(range: <class 'range'>) ['$672load_global.0']
    $676load_attr.2 = getattr(value=H_batch, attr=shape) ['$676load_attr.2', 'H_batch']
    $const678.3 = const(int, 0)              ['$const678.3']
    $680binary_subscr.4 = getitem(value=$676load_attr.2, index=$const678.3, fn=<built-in function getitem>) ['$676load_attr.2', '$680binary_subscr.4', '$const678.3']
    $682call_function.5 = call $672load_global.0($680binary_subscr.4, func=$672load_global.0, args=[Var($680binary_subscr.4, loop_hafnian_batch.py:145)], kws=(), vararg=None, target=None) ['$672load_global.0', '$680binary_subscr.4', '$682call_function.5']
    $684get_iter.6 = getiter(value=$682call_function.5) ['$682call_function.5', '$684get_iter.6']
    $phi686.0 = $684get_iter.6               ['$684get_iter.6', '$phi686.0']
    jump 686                                 []
label 686:
    $686for_iter.1 = iternext(value=$phi686.0) ['$686for_iter.1', '$phi686.0']
    $686for_iter.2 = pair_first(value=$686for_iter.1) ['$686for_iter.1', '$686for_iter.2']
    $686for_iter.3 = pair_second(value=$686for_iter.1) ['$686for_iter.1', '$686for_iter.3']
    $phi688.1 = $686for_iter.2               ['$686for_iter.2', '$phi688.1']
    branch $686for_iter.3, 688, 726          ['$686for_iter.3']
label 688:
    j = $phi688.1                            ['$phi688.1', 'j']
    x = N_fixed + j                          ['N_fixed', 'j', 'x']
    $704binary_subscr.9 = getitem(value=H_batch, index=j, fn=<built-in function getitem>) ['$704binary_subscr.9', 'H_batch', 'j']
    $const706.10 = const(float, 0.5)         ['$const706.10']
    $const710.12 = const(int, 2)             ['$const710.12']
    $712binary_floor_divide.13 = x // $const710.12 ['$712binary_floor_divide.13', '$const710.12', 'x']
    $714binary_power.14 = $const706.10 ** $712binary_floor_divide.13 ['$712binary_floor_divide.13', '$714binary_power.14', '$const706.10']
    $716inplace_multiply.15 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=$704binary_subscr.9, rhs=$714binary_power.14, static_lhs=Undefined, static_rhs=Undefined) ['$704binary_subscr.9', '$714binary_power.14', '$716inplace_multiply.15']
    H_batch[j] = $716inplace_multiply.15     ['$716inplace_multiply.15', 'H_batch', 'j']
    jump 686                                 []
label 726:
    $728return_value.1 = cast(value=H_batch) ['$728return_value.1', 'H_batch']
    return $728return_value.1                ['$728return_value.1']

DEBUG 2022-02-14 16:38:18,047 ==== SSA block analysis pass on 0
DEBUG 2022-02-14 16:38:18,047 Running <numba.core.ssa._GatherDefsHandler object at 0x7fa041ed4c70>
DEBUG 2022-02-14 16:38:18,047 on stmt: A = arg(0, name=A)
DEBUG 2022-02-14 16:38:18,047 on stmt: D = arg(1, name=D)
DEBUG 2022-02-14 16:38:18,047 on stmt: fixed_edge_reps = arg(2, name=fixed_edge_reps)
DEBUG 2022-02-14 16:38:18,047 on stmt: batch_max = arg(3, name=batch_max)
DEBUG 2022-02-14 16:38:18,047 on stmt: even_cutoff = arg(4, name=even_cutoff)
DEBUG 2022-02-14 16:38:18,047 on stmt: oddmode = arg(5, name=oddmode)
DEBUG 2022-02-14 16:38:18,047 on stmt: glynn = arg(6, name=glynn)
DEBUG 2022-02-14 16:38:18,047 on stmt: $const4.1 = const(int, 0)
DEBUG 2022-02-14 16:38:18,048 on stmt: oddloop = static_getitem(value=D, index=0, index_var=$const4.1, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:18,048 on stmt: $const12.4 = const(int, 0)
DEBUG 2022-02-14 16:38:18,048 on stmt: $const14.5 = const(NoneType, None)
DEBUG 2022-02-14 16:38:18,048 on stmt: $const16.6 = const(NoneType, None)
DEBUG 2022-02-14 16:38:18,048 on stmt: $18build_slice.7 = global(slice: <class 'slice'>)
DEBUG 2022-02-14 16:38:18,048 on stmt: $18build_slice.8 = call $18build_slice.7($const14.5, $const16.6, func=$18build_slice.7, args=(Var($const14.5, loop_hafnian_batch.py:84), Var($const16.6, loop_hafnian_batch.py:84)), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:18,048 on stmt: $20build_tuple.9 = build_tuple(items=[Var($const12.4, loop_hafnian_batch.py:84), Var($18build_slice.8, loop_hafnian_batch.py:84)])
DEBUG 2022-02-14 16:38:18,048 on stmt: oddV = static_getitem(value=A, index=(0, slice(None, None, None)), index_var=$20build_tuple.9, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:18,048 on stmt: $const28.12 = const(int, 1)
DEBUG 2022-02-14 16:38:18,048 on stmt: oddloop0 = static_getitem(value=D, index=1, index_var=$const28.12, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:18,048 on stmt: $const36.15 = const(int, 1)
DEBUG 2022-02-14 16:38:18,048 on stmt: $const38.16 = const(NoneType, None)
DEBUG 2022-02-14 16:38:18,048 on stmt: $const40.17 = const(NoneType, None)
DEBUG 2022-02-14 16:38:18,048 on stmt: $42build_slice.18 = global(slice: <class 'slice'>)
DEBUG 2022-02-14 16:38:18,048 on stmt: $42build_slice.19 = call $42build_slice.18($const38.16, $const40.17, func=$42build_slice.18, args=(Var($const38.16, loop_hafnian_batch.py:89), Var($const40.17, loop_hafnian_batch.py:89)), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:18,048 on stmt: $44build_tuple.20 = build_tuple(items=[Var($const36.15, loop_hafnian_batch.py:89), Var($42build_slice.19, loop_hafnian_batch.py:89)])
DEBUG 2022-02-14 16:38:18,048 on stmt: oddV0 = static_getitem(value=A, index=(1, slice(None, None, None)), index_var=$44build_tuple.20, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:18,048 on stmt: $52load_attr.23 = getattr(value=A, attr=shape)
DEBUG 2022-02-14 16:38:18,048 on stmt: $const54.24 = const(int, 0)
DEBUG 2022-02-14 16:38:18,048 on stmt: n = static_getitem(value=$52load_attr.23, index=0, index_var=$const54.24, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:18,048 on stmt: $const60.26 = const(int, 2)
DEBUG 2022-02-14 16:38:18,048 on stmt: $64load_method.28 = getattr(value=fixed_edge_reps, attr=sum)
DEBUG 2022-02-14 16:38:18,048 on stmt: $66call_method.29 = call $64load_method.28(func=$64load_method.28, args=[], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:18,048 on stmt: $68binary_multiply.30 = $const60.26 * $66call_method.29
DEBUG 2022-02-14 16:38:18,049 on stmt: $const70.31 = const(int, 1)
DEBUG 2022-02-14 16:38:18,049 on stmt: N_fixed = $68binary_multiply.30 + $const70.31
DEBUG 2022-02-14 16:38:18,049 on stmt: $const78.34 = const(int, 2)
DEBUG 2022-02-14 16:38:18,049 on stmt: $82binary_multiply.36 = $const78.34 * batch_max
DEBUG 2022-02-14 16:38:18,049 on stmt: $84binary_add.37 = N_fixed + $82binary_multiply.36
DEBUG 2022-02-14 16:38:18,049 on stmt: $88binary_add.39 = $84binary_add.37 + even_cutoff
DEBUG 2022-02-14 16:38:18,049 on stmt: $const90.40 = const(int, 1)
DEBUG 2022-02-14 16:38:18,049 on stmt: N_max = $88binary_add.39 + $const90.40
DEBUG 2022-02-14 16:38:18,049 on stmt: $96load_global.42 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:38:18,049 on stmt: $98load_method.43 = getattr(value=$96load_global.42, attr=concatenate)
DEBUG 2022-02-14 16:38:18,049 on stmt: $100load_global.44 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:38:18,049 on stmt: $102load_method.45 = getattr(value=$100load_global.44, attr=array)
DEBUG 2022-02-14 16:38:18,049 on stmt: $const106.47 = const(int, 1)
DEBUG 2022-02-14 16:38:18,049 on stmt: $108build_list.48 = build_list(items=[Var(batch_max, loop_hafnian_batch.py:83), Var($const106.47, loop_hafnian_batch.py:95)])
DEBUG 2022-02-14 16:38:18,049 on stmt: $110call_method.49 = call $102load_method.45($108build_list.48, func=$102load_method.45, args=[Var($108build_list.48, loop_hafnian_batch.py:95)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:18,049 on stmt: $114build_tuple.51 = build_tuple(items=[Var($110call_method.49, loop_hafnian_batch.py:95), Var(fixed_edge_reps, loop_hafnian_batch.py:83)])
DEBUG 2022-02-14 16:38:18,049 on stmt: edge_reps = call $98load_method.43($114build_tuple.51, func=$98load_method.43, args=[Var($114build_tuple.51, loop_hafnian_batch.py:95)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:18,049 on stmt: $120load_global.53 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:38:18,049 on stmt: $122load_method.54 = getattr(value=$120load_global.53, attr=prod)
DEBUG 2022-02-14 16:38:18,049 on stmt: $const126.56 = const(int, 1)
DEBUG 2022-02-14 16:38:18,049 on stmt: $128binary_add.57 = edge_reps + $const126.56
DEBUG 2022-02-14 16:38:18,049 on stmt: steps = call $122load_method.54($128binary_add.57, func=$122load_method.54, args=[Var($128binary_add.57, loop_hafnian_batch.py:96)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:18,049 on stmt: $136load_method.60 = getattr(value=edge_reps, attr=max)
DEBUG 2022-02-14 16:38:18,049 on stmt: $138call_method.61 = call $136load_method.60(func=$136load_method.60, args=[], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:18,050 on stmt: max_binom = $138call_method.61 + even_cutoff
DEBUG 2022-02-14 16:38:18,050 on stmt: $146load_global.64 = global(precompute_binoms: CPUDispatcher(<function precompute_binoms at 0x7fa047ebe310>))
DEBUG 2022-02-14 16:38:18,050 on stmt: binoms = call $146load_global.64(max_binom, func=$146load_global.64, args=[Var(max_binom, loop_hafnian_batch.py:98)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:18,050 on stmt: $154load_global.67 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:38:18,050 on stmt: $156load_attr.68 = getattr(value=$154load_global.67, attr=zeros)
DEBUG 2022-02-14 16:38:18,050 on stmt: $const158.69 = const(int, 2)
DEBUG 2022-02-14 16:38:18,050 on stmt: $162binary_multiply.71 = $const158.69 * batch_max
DEBUG 2022-02-14 16:38:18,050 on stmt: $166binary_add.73 = $162binary_multiply.71 + even_cutoff
DEBUG 2022-02-14 16:38:18,050 on stmt: $const168.74 = const(int, 2)
DEBUG 2022-02-14 16:38:18,050 on stmt: $170binary_add.75 = $166binary_add.73 + $const168.74
DEBUG 2022-02-14 16:38:18,050 on stmt: $172load_global.76 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:38:18,050 on stmt: $174load_attr.77 = getattr(value=$172load_global.76, attr=complex128)
DEBUG 2022-02-14 16:38:18,050 on stmt: H_batch = call $156load_attr.68($170binary_add.75, func=$156load_attr.68, args=[Var($170binary_add.75, loop_hafnian_batch.py:101)], kws=[('dtype', Var($174load_attr.77, loop_hafnian_batch.py:101))], vararg=None, target=None)
DEBUG 2022-02-14 16:38:18,050 on stmt: $182load_global.80 = global(numba: <module 'numba' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numba/__init__.py'>)
DEBUG 2022-02-14 16:38:18,050 on stmt: $184load_method.81 = getattr(value=$182load_global.80, attr=prange)
DEBUG 2022-02-14 16:38:18,050 on stmt: $188call_method.83 = call $184load_method.81(steps, func=$184load_method.81, args=[Var(steps, loop_hafnian_batch.py:96)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:18,050 on stmt: $190get_iter.84 = getiter(value=$188call_method.83)
DEBUG 2022-02-14 16:38:18,050 on stmt: $phi192.0 = $190get_iter.84
DEBUG 2022-02-14 16:38:18,050 on stmt: jump 192
DEBUG 2022-02-14 16:38:18,050 ==== SSA block analysis pass on 192
DEBUG 2022-02-14 16:38:18,050 Running <numba.core.ssa._GatherDefsHandler object at 0x7fa041ed4c70>
DEBUG 2022-02-14 16:38:18,050 on stmt: $192for_iter.1 = iternext(value=$phi192.0)
DEBUG 2022-02-14 16:38:18,050 on stmt: $192for_iter.2 = pair_first(value=$192for_iter.1)
DEBUG 2022-02-14 16:38:18,051 on stmt: $192for_iter.3 = pair_second(value=$192for_iter.1)
DEBUG 2022-02-14 16:38:18,051 on stmt: $phi196.1 = $192for_iter.2
DEBUG 2022-02-14 16:38:18,051 on stmt: branch $192for_iter.3, 196, 666
DEBUG 2022-02-14 16:38:18,051 ==== SSA block analysis pass on 196
DEBUG 2022-02-14 16:38:18,051 Running <numba.core.ssa._GatherDefsHandler object at 0x7fa041ed4c70>
DEBUG 2022-02-14 16:38:18,051 on stmt: j = $phi196.1
DEBUG 2022-02-14 16:38:18,051 on stmt: $198load_global.2 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:38:18,051 on stmt: $200load_attr.3 = getattr(value=$198load_global.2, attr=zeros)
DEBUG 2022-02-14 16:38:18,051 on stmt: $const202.4 = const(int, 2)
DEBUG 2022-02-14 16:38:18,051 on stmt: $206binary_multiply.6 = $const202.4 * batch_max
DEBUG 2022-02-14 16:38:18,051 on stmt: $210binary_add.8 = $206binary_multiply.6 + even_cutoff
DEBUG 2022-02-14 16:38:18,051 on stmt: $const212.9 = const(int, 2)
DEBUG 2022-02-14 16:38:18,051 on stmt: $214binary_add.10 = $210binary_add.8 + $const212.9
DEBUG 2022-02-14 16:38:18,051 on stmt: $216load_global.11 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:38:18,051 on stmt: $218load_attr.12 = getattr(value=$216load_global.11, attr=complex128)
DEBUG 2022-02-14 16:38:18,051 on stmt: Hnew = call $200load_attr.3($214binary_add.10, func=$200load_attr.3, args=[Var($214binary_add.10, loop_hafnian_batch.py:104)], kws=[('dtype', Var($218load_attr.12, loop_hafnian_batch.py:104))], vararg=None, target=None)
DEBUG 2022-02-14 16:38:18,051 on stmt: $226load_global.15 = global(find_kept_edges: CPUDispatcher(<function find_kept_edges at 0x7fa047ebe790>))
DEBUG 2022-02-14 16:38:18,051 on stmt: kept_edges = call $226load_global.15(j, edge_reps, func=$226load_global.15, args=[Var(j, loop_hafnian_batch.py:102), Var(edge_reps, loop_hafnian_batch.py:95)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:18,051 on stmt: $238load_method.20 = getattr(value=kept_edges, attr=sum)
DEBUG 2022-02-14 16:38:18,051 on stmt: edges_sum = call $238load_method.20(func=$238load_method.20, args=[], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:18,051 on stmt: binom_prod = const(float, 1.0)
DEBUG 2022-02-14 16:38:18,051 on stmt: $248load_global.23 = global(range: <class 'range'>)
DEBUG 2022-02-14 16:38:18,051 on stmt: $const250.24 = const(int, 1)
DEBUG 2022-02-14 16:38:18,051 on stmt: $const254.26 = const(int, 2)
DEBUG 2022-02-14 16:38:18,051 on stmt: $256binary_floor_divide.27 = n // $const254.26
DEBUG 2022-02-14 16:38:18,052 on stmt: $258call_function.28 = call $248load_global.23($const250.24, $256binary_floor_divide.27, func=$248load_global.23, args=[Var($const250.24, loop_hafnian_batch.py:110), Var($256binary_floor_divide.27, loop_hafnian_batch.py:110)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:18,052 on stmt: $260get_iter.29 = getiter(value=$258call_function.28)
DEBUG 2022-02-14 16:38:18,052 on stmt: $phi262.1 = $260get_iter.29
DEBUG 2022-02-14 16:38:18,052 on stmt: jump 262
DEBUG 2022-02-14 16:38:18,052 ==== SSA block analysis pass on 262
DEBUG 2022-02-14 16:38:18,052 Running <numba.core.ssa._GatherDefsHandler object at 0x7fa041ed4c70>
DEBUG 2022-02-14 16:38:18,052 on stmt: $262for_iter.2 = iternext(value=$phi262.1)
DEBUG 2022-02-14 16:38:18,052 on stmt: $262for_iter.3 = pair_first(value=$262for_iter.2)
DEBUG 2022-02-14 16:38:18,052 on stmt: $262for_iter.4 = pair_second(value=$262for_iter.2)
DEBUG 2022-02-14 16:38:18,052 on stmt: $phi264.2 = $262for_iter.3
DEBUG 2022-02-14 16:38:18,052 on stmt: branch $262for_iter.4, 264, 294
DEBUG 2022-02-14 16:38:18,052 ==== SSA block analysis pass on 264
DEBUG 2022-02-14 16:38:18,052 Running <numba.core.ssa._GatherDefsHandler object at 0x7fa041ed4c70>
DEBUG 2022-02-14 16:38:18,052 on stmt: i = $phi264.2
DEBUG 2022-02-14 16:38:18,052 on stmt: $274binary_subscr.7 = getitem(value=edge_reps, index=i, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:18,052 on stmt: $280binary_subscr.10 = getitem(value=kept_edges, index=i, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:18,052 on stmt: $282build_tuple.11 = build_tuple(items=[Var($274binary_subscr.7, loop_hafnian_batch.py:111), Var($280binary_subscr.10, loop_hafnian_batch.py:111)])
DEBUG 2022-02-14 16:38:18,053 on stmt: $284binary_subscr.12 = getitem(value=binoms, index=$282build_tuple.11, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:18,053 on stmt: $286inplace_multiply.13 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=binom_prod, rhs=$284binary_subscr.12, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:38:18,053 on stmt: binom_prod = $286inplace_multiply.13
DEBUG 2022-02-14 16:38:18,053 on stmt: jump 262
DEBUG 2022-02-14 16:38:18,053 ==== SSA block analysis pass on 294
DEBUG 2022-02-14 16:38:18,053 Running <numba.core.ssa._GatherDefsHandler object at 0x7fa041ed4c70>
DEBUG 2022-02-14 16:38:18,053 on stmt: bool296 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:38:18,053 on stmt: $296pred = call bool296(glynn, func=bool296, args=(Var(glynn, loop_hafnian_batch.py:83),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:18,053 on stmt: branch $296pred, 300, 314
DEBUG 2022-02-14 16:38:18,053 ==== SSA block analysis pass on 300
DEBUG 2022-02-14 16:38:18,053 Running <numba.core.ssa._GatherDefsHandler object at 0x7fa041ed4c70>
DEBUG 2022-02-14 16:38:18,053 on stmt: $const300.1 = const(int, 2)
DEBUG 2022-02-14 16:38:18,053 on stmt: $304binary_multiply.3 = $const300.1 * kept_edges
DEBUG 2022-02-14 16:38:18,053 on stmt: delta = $304binary_multiply.3 - edge_reps
DEBUG 2022-02-14 16:38:18,053 on stmt: jump 318
DEBUG 2022-02-14 16:38:18,053 ==== SSA block analysis pass on 314
DEBUG 2022-02-14 16:38:18,053 Running <numba.core.ssa._GatherDefsHandler object at 0x7fa041ed4c70>
DEBUG 2022-02-14 16:38:18,053 on stmt: delta = kept_edges
DEBUG 2022-02-14 16:38:18,053 on stmt: jump 318
DEBUG 2022-02-14 16:38:18,053 ==== SSA block analysis pass on 318
DEBUG 2022-02-14 16:38:18,053 Running <numba.core.ssa._GatherDefsHandler object at 0x7fa041ed4c70>
DEBUG 2022-02-14 16:38:18,053 on stmt: $318load_global.1 = global(get_submatrices: CPUDispatcher(<function get_submatrices at 0x7fa047ebed30>))
DEBUG 2022-02-14 16:38:18,054 on stmt: $328call_function.6 = call $318load_global.1(delta, A, D, oddV, func=$318load_global.1, args=[Var(delta, loop_hafnian_batch.py:114), Var(A, loop_hafnian_batch.py:83), Var(D, loop_hafnian_batch.py:83), Var(oddV, loop_hafnian_batch.py:84)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:18,054 on stmt: $330unpack_sequence.11 = exhaust_iter(value=$328call_function.6, count=4)
DEBUG 2022-02-14 16:38:18,054 on stmt: $330unpack_sequence.7 = static_getitem(value=$330unpack_sequence.11, index=0, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:18,054 on stmt: $330unpack_sequence.8 = static_getitem(value=$330unpack_sequence.11, index=1, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:18,054 on stmt: $330unpack_sequence.9 = static_getitem(value=$330unpack_sequence.11, index=2, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:18,054 on stmt: $330unpack_sequence.10 = static_getitem(value=$330unpack_sequence.11, index=3, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:18,054 on stmt: AX_S = $330unpack_sequence.7
DEBUG 2022-02-14 16:38:18,054 on stmt: XD_S = $330unpack_sequence.8
DEBUG 2022-02-14 16:38:18,054 on stmt: D_S = $330unpack_sequence.9
DEBUG 2022-02-14 16:38:18,054 on stmt: oddVX_S = $330unpack_sequence.10
DEBUG 2022-02-14 16:38:18,054 on stmt: $340load_global.12 = global(eigvals: CPUDispatcher(<function eigvals at 0x7fa047e5d430>))
DEBUG 2022-02-14 16:38:18,054 on stmt: E = call $340load_global.12(AX_S, func=$340load_global.12, args=[Var(AX_S, loop_hafnian_batch.py:118)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:18,054 on stmt: $const350.16 = const(int, 0)
DEBUG 2022-02-14 16:38:18,054 on stmt: $352binary_subscr.17 = static_getitem(value=kept_edges, index=0, index_var=$const350.16, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:18,054 on stmt: $const354.18 = const(int, 0)
DEBUG 2022-02-14 16:38:18,054 on stmt: $356compare_op.19 = $352binary_subscr.17 == $const354.18
DEBUG 2022-02-14 16:38:18,054 on stmt: bool358 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:38:18,054 on stmt: $358pred = call bool358($356compare_op.19, func=bool358, args=(Var($356compare_op.19, loop_hafnian_batch.py:122),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:18,054 on stmt: branch $358pred, 362, 450
DEBUG 2022-02-14 16:38:18,054 ==== SSA block analysis pass on 362
DEBUG 2022-02-14 16:38:18,054 Running <numba.core.ssa._GatherDefsHandler object at 0x7fa041ed4c70>
DEBUG 2022-02-14 16:38:18,054 on stmt: $const364.2 = const(int, 1)
DEBUG 2022-02-14 16:38:18,054 on stmt: $366binary_subscr.3 = static_getitem(value=kept_edges, index=1, index_var=$const364.2, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:18,054 on stmt: $const368.4 = const(int, 0)
DEBUG 2022-02-14 16:38:18,055 on stmt: $370compare_op.5 = $366binary_subscr.3 == $const368.4
DEBUG 2022-02-14 16:38:18,055 on stmt: bool372 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:38:18,055 on stmt: $372pred = call bool372($370compare_op.5, func=bool372, args=(Var($370compare_op.5, loop_hafnian_batch.py:122),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:18,055 on stmt: branch $372pred, 376, 450
DEBUG 2022-02-14 16:38:18,055 ==== SSA block analysis pass on 376
DEBUG 2022-02-14 16:38:18,055 Running <numba.core.ssa._GatherDefsHandler object at 0x7fa041ed4c70>
DEBUG 2022-02-14 16:38:18,055 on stmt: $376load_global.1 = global(get_submatrix_batch_odd0: CPUDispatcher(<function get_submatrix_batch_odd0 at 0x7fa047ebef70>))
DEBUG 2022-02-14 16:38:18,055 on stmt: oddVX_S0 = call $376load_global.1(delta, oddV0, func=$376load_global.1, args=[Var(delta, loop_hafnian_batch.py:114), Var(oddV0, loop_hafnian_batch.py:89)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:18,055 on stmt: $const386.5 = const(int, -1)
DEBUG 2022-02-14 16:38:18,055 on stmt: $const390.7 = const(int, 2)
DEBUG 2022-02-14 16:38:18,055 on stmt: $392binary_floor_divide.8 = N_fixed // $const390.7
DEBUG 2022-02-14 16:38:18,055 on stmt: $396binary_subtract.10 = $392binary_floor_divide.8 - edges_sum
DEBUG 2022-02-14 16:38:18,055 on stmt: plus_minus = $const386.5 ** $396binary_subtract.10
DEBUG 2022-02-14 16:38:18,055 on stmt: $402load_global.12 = global(f_loop_odd: CPUDispatcher(<function f_loop_odd at 0x7fa047ebeb80>))
DEBUG 2022-02-14 16:38:18,055 on stmt: $418call_function.20 = call $402load_global.12(E, AX_S, XD_S, D_S, N_fixed, oddloop0, oddVX_S0, func=$402load_global.12, args=[Var(E, loop_hafnian_batch.py:120), Var(AX_S, loop_hafnian_batch.py:118), Var(XD_S, loop_hafnian_batch.py:118), Var(D_S, loop_hafnian_batch.py:118), Var(N_fixed, loop_hafnian_batch.py:92), Var(oddloop0, loop_hafnian_batch.py:88), Var(oddVX_S0, loop_hafnian_batch.py:123)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:18,055 on stmt: f = getitem(value=$418call_function.20, index=N_fixed, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:18,055 on stmt: $const428.24 = const(int, 0)
DEBUG 2022-02-14 16:38:18,055 on stmt: $432binary_subscr.27 = static_getitem(value=H_batch, index=0, index_var=$const428.24, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:18,055 on stmt: $438binary_multiply.30 = binom_prod * plus_minus
DEBUG 2022-02-14 16:38:18,055 on stmt: $442binary_multiply.32 = $438binary_multiply.30 * f
DEBUG 2022-02-14 16:38:18,055 on stmt: $444inplace_add.33 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$432binary_subscr.27, rhs=$442binary_multiply.32, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:38:18,055 on stmt: H_batch[0] = $444inplace_add.33
DEBUG 2022-02-14 16:38:18,055 on stmt: jump 450
DEBUG 2022-02-14 16:38:18,056 ==== SSA block analysis pass on 450
DEBUG 2022-02-14 16:38:18,056 Running <numba.core.ssa._GatherDefsHandler object at 0x7fa041ed4c70>
DEBUG 2022-02-14 16:38:18,056 on stmt: $450load_global.1 = global(f_loop: CPUDispatcher(<function f_loop at 0x7fa047ebe9d0>))
DEBUG 2022-02-14 16:38:18,056 on stmt: f_even = call $450load_global.1(E, AX_S, XD_S, D_S, N_max, func=$450load_global.1, args=[Var(E, loop_hafnian_batch.py:120), Var(AX_S, loop_hafnian_batch.py:118), Var(XD_S, loop_hafnian_batch.py:118), Var(D_S, loop_hafnian_batch.py:118), Var(N_max, loop_hafnian_batch.py:93)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:18,056 on stmt: $466load_global.8 = global(f_loop_odd: CPUDispatcher(<function f_loop_odd at 0x7fa047ebeb80>))
DEBUG 2022-02-14 16:38:18,056 on stmt: f_odd = call $466load_global.8(E, AX_S, XD_S, D_S, N_max, oddloop, oddVX_S, func=$466load_global.8, args=[Var(E, loop_hafnian_batch.py:120), Var(AX_S, loop_hafnian_batch.py:118), Var(XD_S, loop_hafnian_batch.py:118), Var(D_S, loop_hafnian_batch.py:118), Var(N_max, loop_hafnian_batch.py:93), Var(oddloop, loop_hafnian_batch.py:83), Var(oddVX_S, loop_hafnian_batch.py:118)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:18,056 on stmt: $486load_global.17 = global(range: <class 'range'>)
DEBUG 2022-02-14 16:38:18,056 on stmt: $const488.18 = const(int, 2)
DEBUG 2022-02-14 16:38:18,056 on stmt: $const492.20 = const(int, 0)
DEBUG 2022-02-14 16:38:18,056 on stmt: $494binary_subscr.21 = static_getitem(value=kept_edges, index=0, index_var=$const492.20, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:18,056 on stmt: $496binary_multiply.22 = $const488.18 * $494binary_subscr.21
DEBUG 2022-02-14 16:38:18,056 on stmt: $const498.23 = const(int, 1)
DEBUG 2022-02-14 16:38:18,056 on stmt: $500binary_add.24 = $496binary_multiply.22 + $const498.23
DEBUG 2022-02-14 16:38:18,056 on stmt: $const502.25 = const(int, 2)
DEBUG 2022-02-14 16:38:18,056 on stmt: $506binary_multiply.27 = $const502.25 * batch_max
DEBUG 2022-02-14 16:38:18,056 on stmt: $510binary_add.29 = $506binary_multiply.27 + even_cutoff
DEBUG 2022-02-14 16:38:18,056 on stmt: $const512.30 = const(int, 2)
DEBUG 2022-02-14 16:38:18,056 on stmt: $514binary_add.31 = $510binary_add.29 + $const512.30
DEBUG 2022-02-14 16:38:18,056 on stmt: $516call_function.32 = call $486load_global.17($500binary_add.24, $514binary_add.31, func=$486load_global.17, args=[Var($500binary_add.24, loop_hafnian_batch.py:131), Var($514binary_add.31, loop_hafnian_batch.py:131)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:18,056 on stmt: $518get_iter.33 = getiter(value=$516call_function.32)
DEBUG 2022-02-14 16:38:18,056 on stmt: $phi520.1 = $518get_iter.33
DEBUG 2022-02-14 16:38:18,056 on stmt: jump 520
DEBUG 2022-02-14 16:38:18,056 ==== SSA block analysis pass on 520
DEBUG 2022-02-14 16:38:18,056 Running <numba.core.ssa._GatherDefsHandler object at 0x7fa041ed4c70>
DEBUG 2022-02-14 16:38:18,057 on stmt: $520for_iter.2 = iternext(value=$phi520.1)
DEBUG 2022-02-14 16:38:18,057 on stmt: $520for_iter.3 = pair_first(value=$520for_iter.2)
DEBUG 2022-02-14 16:38:18,057 on stmt: $520for_iter.4 = pair_second(value=$520for_iter.2)
DEBUG 2022-02-14 16:38:18,057 on stmt: $phi522.2 = $520for_iter.3
DEBUG 2022-02-14 16:38:18,057 on stmt: branch $520for_iter.4, 522, 656
DEBUG 2022-02-14 16:38:18,057 ==== SSA block analysis pass on 522
DEBUG 2022-02-14 16:38:18,057 Running <numba.core.ssa._GatherDefsHandler object at 0x7fa041ed4c70>
DEBUG 2022-02-14 16:38:18,057 on stmt: N_det = $phi522.2
DEBUG 2022-02-14 16:38:18,057 on stmt: N = N_fixed + N_det
DEBUG 2022-02-14 16:38:18,057 on stmt: $const532.6 = const(int, -1)
DEBUG 2022-02-14 16:38:18,057 on stmt: $const536.8 = const(int, 2)
DEBUG 2022-02-14 16:38:18,057 on stmt: $538binary_floor_divide.9 = N // $const536.8
DEBUG 2022-02-14 16:38:18,057 on stmt: $542binary_subtract.11 = $538binary_floor_divide.9 - edges_sum
DEBUG 2022-02-14 16:38:18,057 on stmt: plus_minus = $const532.6 ** $542binary_subtract.11
DEBUG 2022-02-14 16:38:18,057 on stmt: $const552.15 = const(int, 1)
DEBUG 2022-02-14 16:38:18,057 on stmt: $554binary_subtract.16 = N_det - $const552.15
DEBUG 2022-02-14 16:38:18,057 on stmt: $const556.17 = const(int, 2)
DEBUG 2022-02-14 16:38:18,057 on stmt: $558binary_floor_divide.18 = $554binary_subtract.16 // $const556.17
DEBUG 2022-02-14 16:38:18,057 on stmt: $const562.20 = const(int, 0)
DEBUG 2022-02-14 16:38:18,057 on stmt: $564binary_subscr.21 = static_getitem(value=kept_edges, index=0, index_var=$const562.20, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:18,057 on stmt: $566build_tuple.22 = build_tuple(items=[Var($558binary_floor_divide.18, loop_hafnian_batch.py:135), Var($564binary_subscr.21, loop_hafnian_batch.py:135)])
DEBUG 2022-02-14 16:38:18,057 on stmt: $568binary_subscr.23 = getitem(value=binoms, index=$566build_tuple.22, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:18,057 on stmt: n_det_binom_prod = $568binary_subscr.23 * binom_prod
DEBUG 2022-02-14 16:38:18,057 on stmt: $const578.27 = const(int, 2)
DEBUG 2022-02-14 16:38:18,057 on stmt: $580binary_modulo.28 = N % $const578.27
DEBUG 2022-02-14 16:38:18,057 on stmt: $const582.29 = const(int, 0)
DEBUG 2022-02-14 16:38:18,058 on stmt: $584compare_op.30 = $580binary_modulo.28 == $const582.29
DEBUG 2022-02-14 16:38:18,058 on stmt: bool586 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:38:18,058 on stmt: $586pred = call bool586($584compare_op.30, func=bool586, args=(Var($584compare_op.30, loop_hafnian_batch.py:137),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:18,058 on stmt: branch $586pred, 590, 624
DEBUG 2022-02-14 16:38:18,058 ==== SSA block analysis pass on 590
DEBUG 2022-02-14 16:38:18,058 Running <numba.core.ssa._GatherDefsHandler object at 0x7fa041ed4c70>
DEBUG 2022-02-14 16:38:18,058 on stmt: $596binary_subscr.6 = getitem(value=Hnew, index=N_det, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:18,058 on stmt: $602binary_multiply.9 = n_det_binom_prod * plus_minus
DEBUG 2022-02-14 16:38:18,058 on stmt: $const608.12 = const(int, 2)
DEBUG 2022-02-14 16:38:18,058 on stmt: $610binary_floor_divide.13 = N // $const608.12
DEBUG 2022-02-14 16:38:18,058 on stmt: $612binary_subscr.14 = getitem(value=f_even, index=$610binary_floor_divide.13, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:18,058 on stmt: $614binary_multiply.15 = $602binary_multiply.9 * $612binary_subscr.14
DEBUG 2022-02-14 16:38:18,058 on stmt: $616inplace_add.16 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$596binary_subscr.6, rhs=$614binary_multiply.15, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:38:18,058 on stmt: Hnew[N_det] = $616inplace_add.16
DEBUG 2022-02-14 16:38:18,058 on stmt: jump 652
DEBUG 2022-02-14 16:38:18,058 ==== SSA block analysis pass on 624
DEBUG 2022-02-14 16:38:18,058 Running <numba.core.ssa._GatherDefsHandler object at 0x7fa041ed4c70>
DEBUG 2022-02-14 16:38:18,058 on stmt: $630binary_subscr.6 = getitem(value=Hnew, index=N_det, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:18,058 on stmt: $636binary_multiply.9 = n_det_binom_prod * plus_minus
DEBUG 2022-02-14 16:38:18,058 on stmt: $642binary_subscr.12 = getitem(value=f_odd, index=N, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:18,058 on stmt: $644binary_multiply.13 = $636binary_multiply.9 * $642binary_subscr.12
DEBUG 2022-02-14 16:38:18,058 on stmt: $646inplace_add.14 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$630binary_subscr.6, rhs=$644binary_multiply.13, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:38:18,059 on stmt: Hnew[N_det] = $646inplace_add.14
DEBUG 2022-02-14 16:38:18,059 on stmt: jump 652
DEBUG 2022-02-14 16:38:18,059 ==== SSA block analysis pass on 652
DEBUG 2022-02-14 16:38:18,059 Running <numba.core.ssa._GatherDefsHandler object at 0x7fa041ed4c70>
DEBUG 2022-02-14 16:38:18,059 on stmt: jump 520
DEBUG 2022-02-14 16:38:18,059 ==== SSA block analysis pass on 656
DEBUG 2022-02-14 16:38:18,059 Running <numba.core.ssa._GatherDefsHandler object at 0x7fa041ed4c70>
DEBUG 2022-02-14 16:38:18,059 on stmt: $660inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=H_batch, rhs=Hnew, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:38:18,059 on stmt: H_batch = $660inplace_add.3
DEBUG 2022-02-14 16:38:18,059 on stmt: jump 192
DEBUG 2022-02-14 16:38:18,059 ==== SSA block analysis pass on 666
DEBUG 2022-02-14 16:38:18,059 Running <numba.core.ssa._GatherDefsHandler object at 0x7fa041ed4c70>
DEBUG 2022-02-14 16:38:18,059 on stmt: bool668 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:38:18,059 on stmt: $668pred = call bool668(glynn, func=bool668, args=(Var(glynn, loop_hafnian_batch.py:83),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:18,059 on stmt: branch $668pred, 672, 726
DEBUG 2022-02-14 16:38:18,059 ==== SSA block analysis pass on 672
DEBUG 2022-02-14 16:38:18,059 Running <numba.core.ssa._GatherDefsHandler object at 0x7fa041ed4c70>
DEBUG 2022-02-14 16:38:18,059 on stmt: $672load_global.0 = global(range: <class 'range'>)
DEBUG 2022-02-14 16:38:18,059 on stmt: $676load_attr.2 = getattr(value=H_batch, attr=shape)
DEBUG 2022-02-14 16:38:18,059 on stmt: $const678.3 = const(int, 0)
DEBUG 2022-02-14 16:38:18,059 on stmt: $680binary_subscr.4 = static_getitem(value=$676load_attr.2, index=0, index_var=$const678.3, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:18,059 on stmt: $682call_function.5 = call $672load_global.0($680binary_subscr.4, func=$672load_global.0, args=[Var($680binary_subscr.4, loop_hafnian_batch.py:145)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:18,059 on stmt: $684get_iter.6 = getiter(value=$682call_function.5)
DEBUG 2022-02-14 16:38:18,059 on stmt: $phi686.0 = $684get_iter.6
DEBUG 2022-02-14 16:38:18,059 on stmt: jump 686
DEBUG 2022-02-14 16:38:18,059 ==== SSA block analysis pass on 686
DEBUG 2022-02-14 16:38:18,059 Running <numba.core.ssa._GatherDefsHandler object at 0x7fa041ed4c70>
DEBUG 2022-02-14 16:38:18,060 on stmt: $686for_iter.1 = iternext(value=$phi686.0)
DEBUG 2022-02-14 16:38:18,060 on stmt: $686for_iter.2 = pair_first(value=$686for_iter.1)
DEBUG 2022-02-14 16:38:18,060 on stmt: $686for_iter.3 = pair_second(value=$686for_iter.1)
DEBUG 2022-02-14 16:38:18,060 on stmt: $phi688.1 = $686for_iter.2
DEBUG 2022-02-14 16:38:18,060 on stmt: branch $686for_iter.3, 688, 726
DEBUG 2022-02-14 16:38:18,060 ==== SSA block analysis pass on 688
DEBUG 2022-02-14 16:38:18,060 Running <numba.core.ssa._GatherDefsHandler object at 0x7fa041ed4c70>
DEBUG 2022-02-14 16:38:18,060 on stmt: j = $phi688.1
DEBUG 2022-02-14 16:38:18,060 on stmt: x = N_fixed + j
DEBUG 2022-02-14 16:38:18,060 on stmt: $704binary_subscr.9 = getitem(value=H_batch, index=j, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:18,060 on stmt: $const706.10 = const(float, 0.5)
DEBUG 2022-02-14 16:38:18,060 on stmt: $const710.12 = const(int, 2)
DEBUG 2022-02-14 16:38:18,060 on stmt: $712binary_floor_divide.13 = x // $const710.12
DEBUG 2022-02-14 16:38:18,060 on stmt: $714binary_power.14 = $const706.10 ** $712binary_floor_divide.13
DEBUG 2022-02-14 16:38:18,060 on stmt: $716inplace_multiply.15 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=$704binary_subscr.9, rhs=$714binary_power.14, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:38:18,060 on stmt: H_batch[j] = $716inplace_multiply.15
DEBUG 2022-02-14 16:38:18,060 on stmt: jump 686
DEBUG 2022-02-14 16:38:18,060 ==== SSA block analysis pass on 726
DEBUG 2022-02-14 16:38:18,060 Running <numba.core.ssa._GatherDefsHandler object at 0x7fa041ed4c70>
DEBUG 2022-02-14 16:38:18,060 on stmt: $728return_value.1 = cast(value=H_batch)
DEBUG 2022-02-14 16:38:18,060 on stmt: return $728return_value.1
DEBUG 2022-02-14 16:38:18,062 defs defaultdict(<class 'list'>,
            {'$100load_global.44': [<numba.core.ir.Assign object at 0x7fa045726160>],
             '$102load_method.45': [<numba.core.ir.Assign object at 0x7fa0457262e0>],
             '$108build_list.48': [<numba.core.ir.Assign object at 0x7fa045726730>],
             '$110call_method.49': [<numba.core.ir.Assign object at 0x7fa045726910>],
             '$114build_tuple.51': [<numba.core.ir.Assign object at 0x7fa045726b50>],
             '$120load_global.53': [<numba.core.ir.Assign object at 0x7fa045726f40>],
             '$122load_method.54': [<numba.core.ir.Assign object at 0x7fa045728100>],
             '$128binary_add.57': [<numba.core.ir.Assign object at 0x7fa045728550>],
             '$136load_method.60': [<numba.core.ir.Assign object at 0x7fa045728a60>],
             '$138call_method.61': [<numba.core.ir.Assign object at 0x7fa045728c70>],
             '$146load_global.64': [<numba.core.ir.Assign object at 0x7fa04572a160>],
             '$154load_global.67': [<numba.core.ir.Assign object at 0x7fa04572a6a0>],
             '$156load_attr.68': [<numba.core.ir.Assign object at 0x7fa04572a820>],
             '$162binary_multiply.71': [<numba.core.ir.Assign object at 0x7fa04572ac70>],
             '$166binary_add.73': [<numba.core.ir.Assign object at 0x7fa04572af10>],
             '$170binary_add.75': [<numba.core.ir.Assign object at 0x7fa04572c250>],
             '$172load_global.76': [<numba.core.ir.Assign object at 0x7fa04572c3a0>],
             '$174load_attr.77': [<numba.core.ir.Assign object at 0x7fa04572c520>],
             '$182load_global.80': [<numba.core.ir.Assign object at 0x7fa04572cb20>],
             '$184load_method.81': [<numba.core.ir.Assign object at 0x7fa04572cca0>],
             '$188call_method.83': [<numba.core.ir.Assign object at 0x7fa04572cfd0>],
             '$18build_slice.7': [<numba.core.ir.Assign object at 0x7fa045715580>],
             '$18build_slice.8': [<numba.core.ir.Assign object at 0x7fa0457156a0>],
             '$190get_iter.84': [<numba.core.ir.Assign object at 0x7fa04572f100>],
             '$192for_iter.1': [<numba.core.ir.Assign object at 0x7fa0457210d0>],
             '$192for_iter.2': [<numba.core.ir.Assign object at 0x7fa045721d30>],
             '$192for_iter.3': [<numba.core.ir.Assign object at 0x7fa045726e50>],
             '$198load_global.2': [<numba.core.ir.Assign object at 0x7fa04571c100>],
             '$200load_attr.3': [<numba.core.ir.Assign object at 0x7fa04571c160>],
             '$206binary_multiply.6': [<numba.core.ir.Assign object at 0x7fa04572f5b0>],
             '$20build_tuple.9': [<numba.core.ir.Assign object at 0x7fa045715850>],
             '$210binary_add.8': [<numba.core.ir.Assign object at 0x7fa04572f850>],
             '$214binary_add.10': [<numba.core.ir.Assign object at 0x7fa04572fb50>],
             '$216load_global.11': [<numba.core.ir.Assign object at 0x7fa04572fca0>],
             '$218load_attr.12': [<numba.core.ir.Assign object at 0x7fa04572fe20>],
             '$226load_global.15': [<numba.core.ir.Assign object at 0x7fa045730460>],
             '$238load_method.20': [<numba.core.ir.Assign object at 0x7fa045730be0>],
             '$248load_global.23': [<numba.core.ir.Assign object at 0x7fa0457322e0>],
             '$256binary_floor_divide.27': [<numba.core.ir.Assign object at 0x7fa0457328b0>],
             '$258call_function.28': [<numba.core.ir.Assign object at 0x7fa045732a60>],
             '$260get_iter.29': [<numba.core.ir.Assign object at 0x7fa045732b80>],
             '$262for_iter.2': [<numba.core.ir.Assign object at 0x7fa045732160>],
             '$262for_iter.3': [<numba.core.ir.Assign object at 0x7fa045732c70>],
             '$262for_iter.4': [<numba.core.ir.Assign object at 0x7fa045732d90>],
             '$274binary_subscr.7': [<numba.core.ir.Assign object at 0x7fa0457346d0>],
             '$280binary_subscr.10': [<numba.core.ir.Assign object at 0x7fa045734a90>],
             '$282build_tuple.11': [<numba.core.ir.Assign object at 0x7fa045734c10>],
             '$284binary_subscr.12': [<numba.core.ir.Assign object at 0x7fa045734d90>],
             '$286inplace_multiply.13': [<numba.core.ir.Assign object at 0x7fa045734f10>],
             '$296pred': [<numba.core.ir.Assign object at 0x7fa0457372e0>],
             '$304binary_multiply.3': [<numba.core.ir.Assign object at 0x7fa0457377f0>],
             '$318load_global.1': [<numba.core.ir.Assign object at 0x7fa045739040>],
             '$328call_function.6': [<numba.core.ir.Assign object at 0x7fa0457396a0>],
             '$330unpack_sequence.10': [<numba.core.ir.Assign object at 0x7fa045739ca0>],
             '$330unpack_sequence.11': [<numba.core.ir.Assign object at 0x7fa0457397f0>],
             '$330unpack_sequence.7': [<numba.core.ir.Assign object at 0x7fa045739940>],
             '$330unpack_sequence.8': [<numba.core.ir.Assign object at 0x7fa045739a60>],
             '$330unpack_sequence.9': [<numba.core.ir.Assign object at 0x7fa045739b80>],
             '$340load_global.12': [<numba.core.ir.Assign object at 0x7fa04573b280>],
             '$352binary_subscr.17': [<numba.core.ir.Assign object at 0x7fa0458549a0>],
             '$356compare_op.19': [<numba.core.ir.Assign object at 0x7fa04573bd90>],
             '$358pred': [<numba.core.ir.Assign object at 0x7fa04573d040>],
             '$366binary_subscr.3': [<numba.core.ir.Assign object at 0x7fa045854bb0>],
             '$370compare_op.5': [<numba.core.ir.Assign object at 0x7fa04573d610>],
             '$372pred': [<numba.core.ir.Assign object at 0x7fa04573d880>],
             '$376load_global.1': [<numba.core.ir.Assign object at 0x7fa04573dac0>],
             '$392binary_floor_divide.8': [<numba.core.ir.Assign object at 0x7fa04573f5b0>],
             '$396binary_subtract.10': [<numba.core.ir.Assign object at 0x7fa04573f850>],
             '$402load_global.12': [<numba.core.ir.Assign object at 0x7fa04573fc40>],
             '$418call_function.20': [<numba.core.ir.Assign object at 0x7fa045741640>],
             '$42build_slice.18': [<numba.core.ir.Assign object at 0x7fa04571d760>],
             '$42build_slice.19': [<numba.core.ir.Assign object at 0x7fa04571d880>],
             '$432binary_subscr.27': [<numba.core.ir.Assign object at 0x7fa045854430>],
             '$438binary_multiply.30': [<numba.core.ir.Assign object at 0x7fa0457433d0>],
             '$442binary_multiply.32': [<numba.core.ir.Assign object at 0x7fa045743670>],
             '$444inplace_add.33': [<numba.core.ir.Assign object at 0x7fa0457437f0>],
             '$44build_tuple.20': [<numba.core.ir.Assign object at 0x7fa04571da30>],
             '$450load_global.1': [<numba.core.ir.Assign object at 0x7fa04573fd60>],
             '$466load_global.8': [<numba.core.ir.Assign object at 0x7fa045743d00>],
             '$486load_global.17': [<numba.core.ir.Assign object at 0x7fa045745940>],
             '$494binary_subscr.21': [<numba.core.ir.Assign object at 0x7fa045854f70>],
             '$496binary_multiply.22': [<numba.core.ir.Assign object at 0x7fa0457470d0>],
             '$500binary_add.24': [<numba.core.ir.Assign object at 0x7fa0457473d0>],
             '$506binary_multiply.27': [<numba.core.ir.Assign object at 0x7fa0457477f0>],
             '$510binary_add.29': [<numba.core.ir.Assign object at 0x7fa045747a90>],
             '$514binary_add.31': [<numba.core.ir.Assign object at 0x7fa045747d90>],
             '$516call_function.32': [<numba.core.ir.Assign object at 0x7fa045747f40>],
             '$518get_iter.33': [<numba.core.ir.Assign object at 0x7fa041ec20a0>],
             '$520for_iter.2': [<numba.core.ir.Assign object at 0x7fa045745130>],
             '$520for_iter.3': [<numba.core.ir.Assign object at 0x7fa045745490>],
             '$520for_iter.4': [<numba.core.ir.Assign object at 0x7fa045745c70>],
             '$52load_attr.23': [<numba.core.ir.Assign object at 0x7fa04571df40>],
             '$538binary_floor_divide.9': [<numba.core.ir.Assign object at 0x7fa041ec2d90>],
             '$542binary_subtract.11': [<numba.core.ir.Assign object at 0x7fa041ec5070>],
             '$554binary_subtract.16': [<numba.core.ir.Assign object at 0x7fa041ec57f0>],
             '$558binary_floor_divide.18': [<numba.core.ir.Assign object at 0x7fa041ec5af0>],
             '$564binary_subscr.21': [<numba.core.ir.Assign object at 0x7fa046a577f0>],
             '$566build_tuple.22': [<numba.core.ir.Assign object at 0x7fa041ec70d0>],
             '$568binary_subscr.23': [<numba.core.ir.Assign object at 0x7fa041ec7250>],
             '$580binary_modulo.28': [<numba.core.ir.Assign object at 0x7fa041ec7a30>],
             '$584compare_op.30': [<numba.core.ir.Assign object at 0x7fa041ec7d30>],
             '$586pred': [<numba.core.ir.Assign object at 0x7fa041ec7fa0>],
             '$596binary_subscr.6': [<numba.core.ir.Assign object at 0x7fa041ec91f0>],
             '$602binary_multiply.9': [<numba.core.ir.Assign object at 0x7fa041ec95b0>],
             '$610binary_floor_divide.13': [<numba.core.ir.Assign object at 0x7fa041ec9af0>],
             '$612binary_subscr.14': [<numba.core.ir.Assign object at 0x7fa041ec9c70>],
             '$614binary_multiply.15': [<numba.core.ir.Assign object at 0x7fa041ec9df0>],
             '$616inplace_add.16': [<numba.core.ir.Assign object at 0x7fa041ec9f70>],
             '$630binary_subscr.6': [<numba.core.ir.Assign object at 0x7fa041ecb490>],
             '$636binary_multiply.9': [<numba.core.ir.Assign object at 0x7fa041ecb850>],
             '$642binary_subscr.12': [<numba.core.ir.Assign object at 0x7fa041ecbc10>],
             '$644binary_multiply.13': [<numba.core.ir.Assign object at 0x7fa041ecbd90>],
             '$646inplace_add.14': [<numba.core.ir.Assign object at 0x7fa041ecbf10>],
             '$64load_method.28': [<numba.core.ir.Assign object at 0x7fa0457247c0>],
             '$660inplace_add.3': [<numba.core.ir.Assign object at 0x7fa041ecd370>],
             '$668pred': [<numba.core.ir.Assign object at 0x7fa041ecd880>],
             '$66call_method.29': [<numba.core.ir.Assign object at 0x7fa0457249d0>],
             '$672load_global.0': [<numba.core.ir.Assign object at 0x7fa041ecdac0>],
             '$676load_attr.2': [<numba.core.ir.Assign object at 0x7fa041ecdd60>],
             '$680binary_subscr.4': [<numba.core.ir.Assign object at 0x7fa0470c8fd0>],
             '$682call_function.5': [<numba.core.ir.Assign object at 0x7fa041ecf280>],
             '$684get_iter.6': [<numba.core.ir.Assign object at 0x7fa041ecf3a0>],
             '$686for_iter.1': [<numba.core.ir.Assign object at 0x7fa041ecf6d0>],
             '$686for_iter.2': [<numba.core.ir.Assign object at 0x7fa041ecf7f0>],
             '$686for_iter.3': [<numba.core.ir.Assign object at 0x7fa041ecf910>],
             '$68binary_multiply.30': [<numba.core.ir.Assign object at 0x7fa045724af0>],
             '$704binary_subscr.9': [<numba.core.ir.Assign object at 0x7fa041ed2670>],
             '$712binary_floor_divide.13': [<numba.core.ir.Assign object at 0x7fa041ed2c10>],
             '$714binary_power.14': [<numba.core.ir.Assign object at 0x7fa041ed2d90>],
             '$716inplace_multiply.15': [<numba.core.ir.Assign object at 0x7fa041ed2f10>],
             '$728return_value.1': [<numba.core.ir.Assign object at 0x7fa041ecf580>],
             '$82binary_multiply.36': [<numba.core.ir.Assign object at 0x7fa045721490>],
             '$84binary_add.37': [<numba.core.ir.Assign object at 0x7fa045721610>],
             '$88binary_add.39': [<numba.core.ir.Assign object at 0x7fa0457218b0>],
             '$96load_global.42': [<numba.core.ir.Assign object at 0x7fa045721e20>],
             '$98load_method.43': [<numba.core.ir.Assign object at 0x7fa045721fa0>],
             '$const106.47': [<numba.core.ir.Assign object at 0x7fa045726580>],
             '$const12.4': [<numba.core.ir.Assign object at 0x7fa045715100>],
             '$const126.56': [<numba.core.ir.Assign object at 0x7fa0457283a0>],
             '$const14.5': [<numba.core.ir.Assign object at 0x7fa045715280>],
             '$const158.69': [<numba.core.ir.Assign object at 0x7fa04572a9a0>],
             '$const16.6': [<numba.core.ir.Assign object at 0x7fa045715400>],
             '$const168.74': [<numba.core.ir.Assign object at 0x7fa04572c0a0>],
             '$const202.4': [<numba.core.ir.Assign object at 0x7fa04572f2e0>],
             '$const212.9': [<numba.core.ir.Assign object at 0x7fa04572f9a0>],
             '$const250.24': [<numba.core.ir.Assign object at 0x7fa045732460>],
             '$const254.26': [<numba.core.ir.Assign object at 0x7fa045732700>],
             '$const28.12': [<numba.core.ir.Assign object at 0x7fa045715d60>],
             '$const300.1': [<numba.core.ir.Assign object at 0x7fa045737520>],
             '$const350.16': [<numba.core.ir.Assign object at 0x7fa04573b8e0>],
             '$const354.18': [<numba.core.ir.Assign object at 0x7fa04573bbe0>],
             '$const36.15': [<numba.core.ir.Assign object at 0x7fa04571d2e0>],
             '$const364.2': [<numba.core.ir.Assign object at 0x7fa04573d160>],
             '$const368.4': [<numba.core.ir.Assign object at 0x7fa04573d460>],
             '$const38.16': [<numba.core.ir.Assign object at 0x7fa04571d460>],
             '$const386.5': [<numba.core.ir.Assign object at 0x7fa04573f160>],
             '$const390.7': [<numba.core.ir.Assign object at 0x7fa04573f400>],
             '$const4.1': [<numba.core.ir.Assign object at 0x7fa04571cb80>],
             '$const40.17': [<numba.core.ir.Assign object at 0x7fa04571d5e0>],
             '$const428.24': [<numba.core.ir.Assign object at 0x7fa045741c40>],
             '$const488.18': [<numba.core.ir.Assign object at 0x7fa045745ac0>],
             '$const492.20': [<numba.core.ir.Assign object at 0x7fa045745d60>],
             '$const498.23': [<numba.core.ir.Assign object at 0x7fa045747220>],
             '$const502.25': [<numba.core.ir.Assign object at 0x7fa045747520>],
             '$const512.30': [<numba.core.ir.Assign object at 0x7fa045747be0>],
             '$const532.6': [<numba.core.ir.Assign object at 0x7fa041ec2940>],
             '$const536.8': [<numba.core.ir.Assign object at 0x7fa041ec2be0>],
             '$const54.24': [<numba.core.ir.Assign object at 0x7fa045724100>],
             '$const552.15': [<numba.core.ir.Assign object at 0x7fa041ec5640>],
             '$const556.17': [<numba.core.ir.Assign object at 0x7fa041ec5940>],
             '$const562.20': [<numba.core.ir.Assign object at 0x7fa041ec5d60>],
             '$const578.27': [<numba.core.ir.Assign object at 0x7fa041ec7880>],
             '$const582.29': [<numba.core.ir.Assign object at 0x7fa041ec7b80>],
             '$const60.26': [<numba.core.ir.Assign object at 0x7fa045724520>],
             '$const608.12': [<numba.core.ir.Assign object at 0x7fa041ec9940>],
             '$const678.3': [<numba.core.ir.Assign object at 0x7fa041ecdee0>],
             '$const70.31': [<numba.core.ir.Assign object at 0x7fa045724c40>],
             '$const706.10': [<numba.core.ir.Assign object at 0x7fa041ed27c0>],
             '$const710.12': [<numba.core.ir.Assign object at 0x7fa041ed2a60>],
             '$const78.34': [<numba.core.ir.Assign object at 0x7fa0457211c0>],
             '$const90.40': [<numba.core.ir.Assign object at 0x7fa045721a00>],
             '$phi192.0': [<numba.core.ir.Assign object at 0x7fa045715b50>],
             '$phi196.1': [<numba.core.ir.Assign object at 0x7fa0457246d0>],
             '$phi262.1': [<numba.core.ir.Assign object at 0x7fa04572f490>],
             '$phi264.2': [<numba.core.ir.Assign object at 0x7fa045730af0>],
             '$phi520.1': [<numba.core.ir.Assign object at 0x7fa0457412b0>],
             '$phi522.2': [<numba.core.ir.Assign object at 0x7fa045743eb0>],
             '$phi686.0': [<numba.core.ir.Assign object at 0x7fa041ecdc70>],
             '$phi688.1': [<numba.core.ir.Assign object at 0x7fa041ecf610>],
             'A': [<numba.core.ir.Assign object at 0x7fa04571c220>],
             'AX_S': [<numba.core.ir.Assign object at 0x7fa045739d60>],
             'D': [<numba.core.ir.Assign object at 0x7fa04571c340>],
             'D_S': [<numba.core.ir.Assign object at 0x7fa045739fa0>],
             'E': [<numba.core.ir.Assign object at 0x7fa04573b580>],
             'H_batch': [<numba.core.ir.Assign object at 0x7fa04572c9a0>,
                         <numba.core.ir.Assign object at 0x7fa041ecd430>],
             'Hnew': [<numba.core.ir.Assign object at 0x7fa0457302e0>],
             'N': [<numba.core.ir.Assign object at 0x7fa041ec26d0>],
             'N_det': [<numba.core.ir.Assign object at 0x7fa041ec22e0>],
             'N_fixed': [<numba.core.ir.Assign object at 0x7fa045724df0>],
             'N_max': [<numba.core.ir.Assign object at 0x7fa045721bb0>],
             'XD_S': [<numba.core.ir.Assign object at 0x7fa045739e80>],
             'batch_max': [<numba.core.ir.Assign object at 0x7fa04571c580>],
             'binom_prod': [<numba.core.ir.Assign object at 0x7fa045732040>,
                            <numba.core.ir.Assign object at 0x7fa045734fd0>],
             'binoms': [<numba.core.ir.Assign object at 0x7fa04572a460>],
             'bool296': [<numba.core.ir.Assign object at 0x7fa0457371c0>],
             'bool358': [<numba.core.ir.Assign object at 0x7fa04573bee0>],
             'bool372': [<numba.core.ir.Assign object at 0x7fa04573d760>],
             'bool586': [<numba.core.ir.Assign object at 0x7fa041ec7e80>],
             'bool668': [<numba.core.ir.Assign object at 0x7fa041ecd760>],
             'delta': [<numba.core.ir.Assign object at 0x7fa045737a90>,
                       <numba.core.ir.Assign object at 0x7fa045737df0>],
             'edge_reps': [<numba.core.ir.Assign object at 0x7fa045726d30>],
             'edges_sum': [<numba.core.ir.Assign object at 0x7fa045730df0>],
             'even_cutoff': [<numba.core.ir.Assign object at 0x7fa04571c6a0>],
             'f': [<numba.core.ir.Assign object at 0x7fa0457418b0>],
             'f_even': [<numba.core.ir.Assign object at 0x7fa045743ac0>],
             'f_odd': [<numba.core.ir.Assign object at 0x7fa045745700>],
             'fixed_edge_reps': [<numba.core.ir.Assign object at 0x7fa04571c460>],
             'glynn': [<numba.core.ir.Assign object at 0x7fa04571c8e0>],
             'i': [<numba.core.ir.Assign object at 0x7fa0457340a0>],
             'j': [<numba.core.ir.Assign object at 0x7fa04572aac0>,
                   <numba.core.ir.Assign object at 0x7fa041ecfbb0>],
             'kept_edges': [<numba.core.ir.Assign object at 0x7fa045730880>],
             'max_binom': [<numba.core.ir.Assign object at 0x7fa045728eb0>],
             'n': [<numba.core.ir.Assign object at 0x7fa041ed41f0>],
             'n_det_binom_prod': [<numba.core.ir.Assign object at 0x7fa041ec74f0>],
             'oddV': [<numba.core.ir.Assign object at 0x7fa0470f69a0>],
             'oddV0': [<numba.core.ir.Assign object at 0x7fa041ed4f40>],
             'oddVX_S': [<numba.core.ir.Assign object at 0x7fa04573b100>],
             'oddVX_S0': [<numba.core.ir.Assign object at 0x7fa04573dee0>],
             'oddloop': [<numba.core.ir.Assign object at 0x7fa045854d00>],
             'oddloop0': [<numba.core.ir.Assign object at 0x7fa041ed4fa0>],
             'oddmode': [<numba.core.ir.Assign object at 0x7fa04571c7c0>],
             'plus_minus': [<numba.core.ir.Assign object at 0x7fa04573f9d0>,
                            <numba.core.ir.Assign object at 0x7fa041ec51f0>],
             'steps': [<numba.core.ir.Assign object at 0x7fa045728730>],
             'x': [<numba.core.ir.Assign object at 0x7fa041ecff70>]})
DEBUG 2022-02-14 16:38:18,062 SSA violators {'j', 'binom_prod', 'H_batch', 'plus_minus', 'delta'}
DEBUG 2022-02-14 16:38:18,062 Fix SSA violator on var j
DEBUG 2022-02-14 16:38:18,062 ==== SSA block rewrite pass on 0
DEBUG 2022-02-14 16:38:18,062 Running <numba.core.ssa._FreshVarHandler object at 0x7fa0469602e0>
DEBUG 2022-02-14 16:38:18,062 on stmt: A = arg(0, name=A)
DEBUG 2022-02-14 16:38:18,062 on stmt: D = arg(1, name=D)
DEBUG 2022-02-14 16:38:18,062 on stmt: fixed_edge_reps = arg(2, name=fixed_edge_reps)
DEBUG 2022-02-14 16:38:18,062 on stmt: batch_max = arg(3, name=batch_max)
DEBUG 2022-02-14 16:38:18,062 on stmt: even_cutoff = arg(4, name=even_cutoff)
DEBUG 2022-02-14 16:38:18,062 on stmt: oddmode = arg(5, name=oddmode)
DEBUG 2022-02-14 16:38:18,062 on stmt: glynn = arg(6, name=glynn)
DEBUG 2022-02-14 16:38:18,063 on stmt: $const4.1 = const(int, 0)
DEBUG 2022-02-14 16:38:18,063 on stmt: oddloop = static_getitem(value=D, index=0, index_var=$const4.1, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:18,063 on stmt: $const12.4 = const(int, 0)
DEBUG 2022-02-14 16:38:18,063 on stmt: $const14.5 = const(NoneType, None)
DEBUG 2022-02-14 16:38:18,063 on stmt: $const16.6 = const(NoneType, None)
DEBUG 2022-02-14 16:38:18,063 on stmt: $18build_slice.7 = global(slice: <class 'slice'>)
DEBUG 2022-02-14 16:38:18,063 on stmt: $18build_slice.8 = call $18build_slice.7($const14.5, $const16.6, func=$18build_slice.7, args=(Var($const14.5, loop_hafnian_batch.py:84), Var($const16.6, loop_hafnian_batch.py:84)), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:18,063 on stmt: $20build_tuple.9 = build_tuple(items=[Var($const12.4, loop_hafnian_batch.py:84), Var($18build_slice.8, loop_hafnian_batch.py:84)])
DEBUG 2022-02-14 16:38:18,063 on stmt: oddV = static_getitem(value=A, index=(0, slice(None, None, None)), index_var=$20build_tuple.9, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:18,063 on stmt: $const28.12 = const(int, 1)
DEBUG 2022-02-14 16:38:18,063 on stmt: oddloop0 = static_getitem(value=D, index=1, index_var=$const28.12, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:18,063 on stmt: $const36.15 = const(int, 1)
DEBUG 2022-02-14 16:38:18,063 on stmt: $const38.16 = const(NoneType, None)
DEBUG 2022-02-14 16:38:18,063 on stmt: $const40.17 = const(NoneType, None)
DEBUG 2022-02-14 16:38:18,063 on stmt: $42build_slice.18 = global(slice: <class 'slice'>)
DEBUG 2022-02-14 16:38:18,063 on stmt: $42build_slice.19 = call $42build_slice.18($const38.16, $const40.17, func=$42build_slice.18, args=(Var($const38.16, loop_hafnian_batch.py:89), Var($const40.17, loop_hafnian_batch.py:89)), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:18,063 on stmt: $44build_tuple.20 = build_tuple(items=[Var($const36.15, loop_hafnian_batch.py:89), Var($42build_slice.19, loop_hafnian_batch.py:89)])
DEBUG 2022-02-14 16:38:18,063 on stmt: oddV0 = static_getitem(value=A, index=(1, slice(None, None, None)), index_var=$44build_tuple.20, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:18,063 on stmt: $52load_attr.23 = getattr(value=A, attr=shape)
DEBUG 2022-02-14 16:38:18,063 on stmt: $const54.24 = const(int, 0)
DEBUG 2022-02-14 16:38:18,063 on stmt: n = static_getitem(value=$52load_attr.23, index=0, index_var=$const54.24, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:18,063 on stmt: $const60.26 = const(int, 2)
DEBUG 2022-02-14 16:38:18,063 on stmt: $64load_method.28 = getattr(value=fixed_edge_reps, attr=sum)
DEBUG 2022-02-14 16:38:18,063 on stmt: $66call_method.29 = call $64load_method.28(func=$64load_method.28, args=[], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:18,063 on stmt: $68binary_multiply.30 = $const60.26 * $66call_method.29
DEBUG 2022-02-14 16:38:18,064 on stmt: $const70.31 = const(int, 1)
DEBUG 2022-02-14 16:38:18,064 on stmt: N_fixed = $68binary_multiply.30 + $const70.31
DEBUG 2022-02-14 16:38:18,064 on stmt: $const78.34 = const(int, 2)
DEBUG 2022-02-14 16:38:18,064 on stmt: $82binary_multiply.36 = $const78.34 * batch_max
DEBUG 2022-02-14 16:38:18,064 on stmt: $84binary_add.37 = N_fixed + $82binary_multiply.36
DEBUG 2022-02-14 16:38:18,064 on stmt: $88binary_add.39 = $84binary_add.37 + even_cutoff
DEBUG 2022-02-14 16:38:18,064 on stmt: $const90.40 = const(int, 1)
DEBUG 2022-02-14 16:38:18,064 on stmt: N_max = $88binary_add.39 + $const90.40
DEBUG 2022-02-14 16:38:18,064 on stmt: $96load_global.42 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:38:18,064 on stmt: $98load_method.43 = getattr(value=$96load_global.42, attr=concatenate)
DEBUG 2022-02-14 16:38:18,064 on stmt: $100load_global.44 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:38:18,064 on stmt: $102load_method.45 = getattr(value=$100load_global.44, attr=array)
DEBUG 2022-02-14 16:38:18,064 on stmt: $const106.47 = const(int, 1)
DEBUG 2022-02-14 16:38:18,064 on stmt: $108build_list.48 = build_list(items=[Var(batch_max, loop_hafnian_batch.py:83), Var($const106.47, loop_hafnian_batch.py:95)])
DEBUG 2022-02-14 16:38:18,064 on stmt: $110call_method.49 = call $102load_method.45($108build_list.48, func=$102load_method.45, args=[Var($108build_list.48, loop_hafnian_batch.py:95)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:18,064 on stmt: $114build_tuple.51 = build_tuple(items=[Var($110call_method.49, loop_hafnian_batch.py:95), Var(fixed_edge_reps, loop_hafnian_batch.py:83)])
DEBUG 2022-02-14 16:38:18,064 on stmt: edge_reps = call $98load_method.43($114build_tuple.51, func=$98load_method.43, args=[Var($114build_tuple.51, loop_hafnian_batch.py:95)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:18,064 on stmt: $120load_global.53 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:38:18,064 on stmt: $122load_method.54 = getattr(value=$120load_global.53, attr=prod)
DEBUG 2022-02-14 16:38:18,064 on stmt: $const126.56 = const(int, 1)
DEBUG 2022-02-14 16:38:18,064 on stmt: $128binary_add.57 = edge_reps + $const126.56
DEBUG 2022-02-14 16:38:18,064 on stmt: steps = call $122load_method.54($128binary_add.57, func=$122load_method.54, args=[Var($128binary_add.57, loop_hafnian_batch.py:96)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:18,064 on stmt: $136load_method.60 = getattr(value=edge_reps, attr=max)
DEBUG 2022-02-14 16:38:18,064 on stmt: $138call_method.61 = call $136load_method.60(func=$136load_method.60, args=[], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:18,064 on stmt: max_binom = $138call_method.61 + even_cutoff
DEBUG 2022-02-14 16:38:18,065 on stmt: $146load_global.64 = global(precompute_binoms: CPUDispatcher(<function precompute_binoms at 0x7fa047ebe310>))
DEBUG 2022-02-14 16:38:18,065 on stmt: binoms = call $146load_global.64(max_binom, func=$146load_global.64, args=[Var(max_binom, loop_hafnian_batch.py:98)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:18,065 on stmt: $154load_global.67 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:38:18,065 on stmt: $156load_attr.68 = getattr(value=$154load_global.67, attr=zeros)
DEBUG 2022-02-14 16:38:18,065 on stmt: $const158.69 = const(int, 2)
DEBUG 2022-02-14 16:38:18,065 on stmt: $162binary_multiply.71 = $const158.69 * batch_max
DEBUG 2022-02-14 16:38:18,065 on stmt: $166binary_add.73 = $162binary_multiply.71 + even_cutoff
DEBUG 2022-02-14 16:38:18,065 on stmt: $const168.74 = const(int, 2)
DEBUG 2022-02-14 16:38:18,065 on stmt: $170binary_add.75 = $166binary_add.73 + $const168.74
DEBUG 2022-02-14 16:38:18,065 on stmt: $172load_global.76 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:38:18,065 on stmt: $174load_attr.77 = getattr(value=$172load_global.76, attr=complex128)
DEBUG 2022-02-14 16:38:18,065 on stmt: H_batch = call $156load_attr.68($170binary_add.75, func=$156load_attr.68, args=[Var($170binary_add.75, loop_hafnian_batch.py:101)], kws=[('dtype', Var($174load_attr.77, loop_hafnian_batch.py:101))], vararg=None, target=None)
DEBUG 2022-02-14 16:38:18,065 on stmt: $182load_global.80 = global(numba: <module 'numba' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numba/__init__.py'>)
DEBUG 2022-02-14 16:38:18,065 on stmt: $184load_method.81 = getattr(value=$182load_global.80, attr=prange)
DEBUG 2022-02-14 16:38:18,065 on stmt: $188call_method.83 = call $184load_method.81(steps, func=$184load_method.81, args=[Var(steps, loop_hafnian_batch.py:96)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:18,065 on stmt: $190get_iter.84 = getiter(value=$188call_method.83)
DEBUG 2022-02-14 16:38:18,065 on stmt: $phi192.0 = $190get_iter.84
DEBUG 2022-02-14 16:38:18,065 on stmt: jump 192
DEBUG 2022-02-14 16:38:18,065 ==== SSA block rewrite pass on 192
DEBUG 2022-02-14 16:38:18,065 Running <numba.core.ssa._FreshVarHandler object at 0x7fa0469602e0>
DEBUG 2022-02-14 16:38:18,065 on stmt: $192for_iter.1 = iternext(value=$phi192.0)
DEBUG 2022-02-14 16:38:18,065 on stmt: $192for_iter.2 = pair_first(value=$192for_iter.1)
DEBUG 2022-02-14 16:38:18,065 on stmt: $192for_iter.3 = pair_second(value=$192for_iter.1)
DEBUG 2022-02-14 16:38:18,065 on stmt: $phi196.1 = $192for_iter.2
DEBUG 2022-02-14 16:38:18,065 on stmt: branch $192for_iter.3, 196, 666
DEBUG 2022-02-14 16:38:18,065 ==== SSA block rewrite pass on 196
DEBUG 2022-02-14 16:38:18,065 Running <numba.core.ssa._FreshVarHandler object at 0x7fa0469602e0>
DEBUG 2022-02-14 16:38:18,066 on stmt: j = $phi196.1
DEBUG 2022-02-14 16:38:18,066 first assign: j
DEBUG 2022-02-14 16:38:18,066 replaced with: j = $phi196.1
DEBUG 2022-02-14 16:38:18,066 on stmt: $198load_global.2 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:38:18,066 on stmt: $200load_attr.3 = getattr(value=$198load_global.2, attr=zeros)
DEBUG 2022-02-14 16:38:18,066 on stmt: $const202.4 = const(int, 2)
DEBUG 2022-02-14 16:38:18,066 on stmt: $206binary_multiply.6 = $const202.4 * batch_max
DEBUG 2022-02-14 16:38:18,066 on stmt: $210binary_add.8 = $206binary_multiply.6 + even_cutoff
DEBUG 2022-02-14 16:38:18,066 on stmt: $const212.9 = const(int, 2)
DEBUG 2022-02-14 16:38:18,066 on stmt: $214binary_add.10 = $210binary_add.8 + $const212.9
DEBUG 2022-02-14 16:38:18,066 on stmt: $216load_global.11 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:38:18,066 on stmt: $218load_attr.12 = getattr(value=$216load_global.11, attr=complex128)
DEBUG 2022-02-14 16:38:18,066 on stmt: Hnew = call $200load_attr.3($214binary_add.10, func=$200load_attr.3, args=[Var($214binary_add.10, loop_hafnian_batch.py:104)], kws=[('dtype', Var($218load_attr.12, loop_hafnian_batch.py:104))], vararg=None, target=None)
DEBUG 2022-02-14 16:38:18,066 on stmt: $226load_global.15 = global(find_kept_edges: CPUDispatcher(<function find_kept_edges at 0x7fa047ebe790>))
DEBUG 2022-02-14 16:38:18,066 on stmt: kept_edges = call $226load_global.15(j, edge_reps, func=$226load_global.15, args=[Var(j, loop_hafnian_batch.py:102), Var(edge_reps, loop_hafnian_batch.py:95)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:18,066 on stmt: $238load_method.20 = getattr(value=kept_edges, attr=sum)
DEBUG 2022-02-14 16:38:18,066 on stmt: edges_sum = call $238load_method.20(func=$238load_method.20, args=[], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:18,066 on stmt: binom_prod = const(float, 1.0)
DEBUG 2022-02-14 16:38:18,066 on stmt: $248load_global.23 = global(range: <class 'range'>)
DEBUG 2022-02-14 16:38:18,066 on stmt: $const250.24 = const(int, 1)
DEBUG 2022-02-14 16:38:18,066 on stmt: $const254.26 = const(int, 2)
DEBUG 2022-02-14 16:38:18,066 on stmt: $256binary_floor_divide.27 = n // $const254.26
DEBUG 2022-02-14 16:38:18,066 on stmt: $258call_function.28 = call $248load_global.23($const250.24, $256binary_floor_divide.27, func=$248load_global.23, args=[Var($const250.24, loop_hafnian_batch.py:110), Var($256binary_floor_divide.27, loop_hafnian_batch.py:110)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:18,066 on stmt: $260get_iter.29 = getiter(value=$258call_function.28)
DEBUG 2022-02-14 16:38:18,066 on stmt: $phi262.1 = $260get_iter.29
DEBUG 2022-02-14 16:38:18,067 on stmt: jump 262
DEBUG 2022-02-14 16:38:18,067 ==== SSA block rewrite pass on 262
DEBUG 2022-02-14 16:38:18,067 Running <numba.core.ssa._FreshVarHandler object at 0x7fa0469602e0>
DEBUG 2022-02-14 16:38:18,067 on stmt: $262for_iter.2 = iternext(value=$phi262.1)
DEBUG 2022-02-14 16:38:18,067 on stmt: $262for_iter.3 = pair_first(value=$262for_iter.2)
DEBUG 2022-02-14 16:38:18,067 on stmt: $262for_iter.4 = pair_second(value=$262for_iter.2)
DEBUG 2022-02-14 16:38:18,067 on stmt: $phi264.2 = $262for_iter.3
DEBUG 2022-02-14 16:38:18,067 on stmt: branch $262for_iter.4, 264, 294
DEBUG 2022-02-14 16:38:18,067 ==== SSA block rewrite pass on 264
DEBUG 2022-02-14 16:38:18,067 Running <numba.core.ssa._FreshVarHandler object at 0x7fa0469602e0>
DEBUG 2022-02-14 16:38:18,067 on stmt: i = $phi264.2
DEBUG 2022-02-14 16:38:18,067 on stmt: $274binary_subscr.7 = getitem(value=edge_reps, index=i, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:18,067 on stmt: $280binary_subscr.10 = getitem(value=kept_edges, index=i, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:18,067 on stmt: $282build_tuple.11 = build_tuple(items=[Var($274binary_subscr.7, loop_hafnian_batch.py:111), Var($280binary_subscr.10, loop_hafnian_batch.py:111)])
DEBUG 2022-02-14 16:38:18,067 on stmt: $284binary_subscr.12 = getitem(value=binoms, index=$282build_tuple.11, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:18,067 on stmt: $286inplace_multiply.13 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=binom_prod, rhs=$284binary_subscr.12, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:38:18,067 on stmt: binom_prod = $286inplace_multiply.13
DEBUG 2022-02-14 16:38:18,067 on stmt: jump 262
DEBUG 2022-02-14 16:38:18,067 ==== SSA block rewrite pass on 294
DEBUG 2022-02-14 16:38:18,067 Running <numba.core.ssa._FreshVarHandler object at 0x7fa0469602e0>
DEBUG 2022-02-14 16:38:18,067 on stmt: bool296 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:38:18,067 on stmt: $296pred = call bool296(glynn, func=bool296, args=(Var(glynn, loop_hafnian_batch.py:83),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:18,067 on stmt: branch $296pred, 300, 314
DEBUG 2022-02-14 16:38:18,067 ==== SSA block rewrite pass on 300
DEBUG 2022-02-14 16:38:18,067 Running <numba.core.ssa._FreshVarHandler object at 0x7fa0469602e0>
DEBUG 2022-02-14 16:38:18,067 on stmt: $const300.1 = const(int, 2)
DEBUG 2022-02-14 16:38:18,067 on stmt: $304binary_multiply.3 = $const300.1 * kept_edges
DEBUG 2022-02-14 16:38:18,068 on stmt: delta = $304binary_multiply.3 - edge_reps
DEBUG 2022-02-14 16:38:18,068 on stmt: jump 318
DEBUG 2022-02-14 16:38:18,068 ==== SSA block rewrite pass on 314
DEBUG 2022-02-14 16:38:18,068 Running <numba.core.ssa._FreshVarHandler object at 0x7fa0469602e0>
DEBUG 2022-02-14 16:38:18,068 on stmt: delta = kept_edges
DEBUG 2022-02-14 16:38:18,068 on stmt: jump 318
DEBUG 2022-02-14 16:38:18,068 ==== SSA block rewrite pass on 318
DEBUG 2022-02-14 16:38:18,068 Running <numba.core.ssa._FreshVarHandler object at 0x7fa0469602e0>
DEBUG 2022-02-14 16:38:18,068 on stmt: $318load_global.1 = global(get_submatrices: CPUDispatcher(<function get_submatrices at 0x7fa047ebed30>))
DEBUG 2022-02-14 16:38:18,068 on stmt: $328call_function.6 = call $318load_global.1(delta, A, D, oddV, func=$318load_global.1, args=[Var(delta, loop_hafnian_batch.py:114), Var(A, loop_hafnian_batch.py:83), Var(D, loop_hafnian_batch.py:83), Var(oddV, loop_hafnian_batch.py:84)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:18,068 on stmt: $330unpack_sequence.11 = exhaust_iter(value=$328call_function.6, count=4)
DEBUG 2022-02-14 16:38:18,068 on stmt: $330unpack_sequence.7 = static_getitem(value=$330unpack_sequence.11, index=0, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:18,068 on stmt: $330unpack_sequence.8 = static_getitem(value=$330unpack_sequence.11, index=1, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:18,068 on stmt: $330unpack_sequence.9 = static_getitem(value=$330unpack_sequence.11, index=2, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:18,068 on stmt: $330unpack_sequence.10 = static_getitem(value=$330unpack_sequence.11, index=3, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:18,068 on stmt: AX_S = $330unpack_sequence.7
DEBUG 2022-02-14 16:38:18,068 on stmt: XD_S = $330unpack_sequence.8
DEBUG 2022-02-14 16:38:18,068 on stmt: D_S = $330unpack_sequence.9
DEBUG 2022-02-14 16:38:18,068 on stmt: oddVX_S = $330unpack_sequence.10
DEBUG 2022-02-14 16:38:18,068 on stmt: $340load_global.12 = global(eigvals: CPUDispatcher(<function eigvals at 0x7fa047e5d430>))
DEBUG 2022-02-14 16:38:18,068 on stmt: E = call $340load_global.12(AX_S, func=$340load_global.12, args=[Var(AX_S, loop_hafnian_batch.py:118)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:18,068 on stmt: $const350.16 = const(int, 0)
DEBUG 2022-02-14 16:38:18,068 on stmt: $352binary_subscr.17 = static_getitem(value=kept_edges, index=0, index_var=$const350.16, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:18,068 on stmt: $const354.18 = const(int, 0)
DEBUG 2022-02-14 16:38:18,068 on stmt: $356compare_op.19 = $352binary_subscr.17 == $const354.18
DEBUG 2022-02-14 16:38:18,068 on stmt: bool358 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:38:18,068 on stmt: $358pred = call bool358($356compare_op.19, func=bool358, args=(Var($356compare_op.19, loop_hafnian_batch.py:122),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:18,068 on stmt: branch $358pred, 362, 450
DEBUG 2022-02-14 16:38:18,069 ==== SSA block rewrite pass on 362
DEBUG 2022-02-14 16:38:18,069 Running <numba.core.ssa._FreshVarHandler object at 0x7fa0469602e0>
DEBUG 2022-02-14 16:38:18,069 on stmt: $const364.2 = const(int, 1)
DEBUG 2022-02-14 16:38:18,069 on stmt: $366binary_subscr.3 = static_getitem(value=kept_edges, index=1, index_var=$const364.2, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:18,069 on stmt: $const368.4 = const(int, 0)
DEBUG 2022-02-14 16:38:18,069 on stmt: $370compare_op.5 = $366binary_subscr.3 == $const368.4
DEBUG 2022-02-14 16:38:18,069 on stmt: bool372 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:38:18,069 on stmt: $372pred = call bool372($370compare_op.5, func=bool372, args=(Var($370compare_op.5, loop_hafnian_batch.py:122),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:18,069 on stmt: branch $372pred, 376, 450
DEBUG 2022-02-14 16:38:18,069 ==== SSA block rewrite pass on 376
DEBUG 2022-02-14 16:38:18,069 Running <numba.core.ssa._FreshVarHandler object at 0x7fa0469602e0>
DEBUG 2022-02-14 16:38:18,069 on stmt: $376load_global.1 = global(get_submatrix_batch_odd0: CPUDispatcher(<function get_submatrix_batch_odd0 at 0x7fa047ebef70>))
DEBUG 2022-02-14 16:38:18,069 on stmt: oddVX_S0 = call $376load_global.1(delta, oddV0, func=$376load_global.1, args=[Var(delta, loop_hafnian_batch.py:114), Var(oddV0, loop_hafnian_batch.py:89)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:18,069 on stmt: $const386.5 = const(int, -1)
DEBUG 2022-02-14 16:38:18,069 on stmt: $const390.7 = const(int, 2)
DEBUG 2022-02-14 16:38:18,069 on stmt: $392binary_floor_divide.8 = N_fixed // $const390.7
DEBUG 2022-02-14 16:38:18,069 on stmt: $396binary_subtract.10 = $392binary_floor_divide.8 - edges_sum
DEBUG 2022-02-14 16:38:18,069 on stmt: plus_minus = $const386.5 ** $396binary_subtract.10
DEBUG 2022-02-14 16:38:18,069 on stmt: $402load_global.12 = global(f_loop_odd: CPUDispatcher(<function f_loop_odd at 0x7fa047ebeb80>))
DEBUG 2022-02-14 16:38:18,069 on stmt: $418call_function.20 = call $402load_global.12(E, AX_S, XD_S, D_S, N_fixed, oddloop0, oddVX_S0, func=$402load_global.12, args=[Var(E, loop_hafnian_batch.py:120), Var(AX_S, loop_hafnian_batch.py:118), Var(XD_S, loop_hafnian_batch.py:118), Var(D_S, loop_hafnian_batch.py:118), Var(N_fixed, loop_hafnian_batch.py:92), Var(oddloop0, loop_hafnian_batch.py:88), Var(oddVX_S0, loop_hafnian_batch.py:123)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:18,069 on stmt: f = getitem(value=$418call_function.20, index=N_fixed, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:18,069 on stmt: $const428.24 = const(int, 0)
DEBUG 2022-02-14 16:38:18,069 on stmt: $432binary_subscr.27 = static_getitem(value=H_batch, index=0, index_var=$const428.24, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:18,069 on stmt: $438binary_multiply.30 = binom_prod * plus_minus
DEBUG 2022-02-14 16:38:18,069 on stmt: $442binary_multiply.32 = $438binary_multiply.30 * f
DEBUG 2022-02-14 16:38:18,070 on stmt: $444inplace_add.33 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$432binary_subscr.27, rhs=$442binary_multiply.32, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:38:18,070 on stmt: H_batch[0] = $444inplace_add.33
DEBUG 2022-02-14 16:38:18,070 on stmt: jump 450
DEBUG 2022-02-14 16:38:18,070 ==== SSA block rewrite pass on 450
DEBUG 2022-02-14 16:38:18,070 Running <numba.core.ssa._FreshVarHandler object at 0x7fa0469602e0>
DEBUG 2022-02-14 16:38:18,070 on stmt: $450load_global.1 = global(f_loop: CPUDispatcher(<function f_loop at 0x7fa047ebe9d0>))
DEBUG 2022-02-14 16:38:18,070 on stmt: f_even = call $450load_global.1(E, AX_S, XD_S, D_S, N_max, func=$450load_global.1, args=[Var(E, loop_hafnian_batch.py:120), Var(AX_S, loop_hafnian_batch.py:118), Var(XD_S, loop_hafnian_batch.py:118), Var(D_S, loop_hafnian_batch.py:118), Var(N_max, loop_hafnian_batch.py:93)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:18,070 on stmt: $466load_global.8 = global(f_loop_odd: CPUDispatcher(<function f_loop_odd at 0x7fa047ebeb80>))
DEBUG 2022-02-14 16:38:18,070 on stmt: f_odd = call $466load_global.8(E, AX_S, XD_S, D_S, N_max, oddloop, oddVX_S, func=$466load_global.8, args=[Var(E, loop_hafnian_batch.py:120), Var(AX_S, loop_hafnian_batch.py:118), Var(XD_S, loop_hafnian_batch.py:118), Var(D_S, loop_hafnian_batch.py:118), Var(N_max, loop_hafnian_batch.py:93), Var(oddloop, loop_hafnian_batch.py:83), Var(oddVX_S, loop_hafnian_batch.py:118)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:18,070 on stmt: $486load_global.17 = global(range: <class 'range'>)
DEBUG 2022-02-14 16:38:18,070 on stmt: $const488.18 = const(int, 2)
DEBUG 2022-02-14 16:38:18,070 on stmt: $const492.20 = const(int, 0)
DEBUG 2022-02-14 16:38:18,070 on stmt: $494binary_subscr.21 = static_getitem(value=kept_edges, index=0, index_var=$const492.20, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:18,070 on stmt: $496binary_multiply.22 = $const488.18 * $494binary_subscr.21
DEBUG 2022-02-14 16:38:18,070 on stmt: $const498.23 = const(int, 1)
DEBUG 2022-02-14 16:38:18,070 on stmt: $500binary_add.24 = $496binary_multiply.22 + $const498.23
DEBUG 2022-02-14 16:38:18,070 on stmt: $const502.25 = const(int, 2)
DEBUG 2022-02-14 16:38:18,070 on stmt: $506binary_multiply.27 = $const502.25 * batch_max
DEBUG 2022-02-14 16:38:18,070 on stmt: $510binary_add.29 = $506binary_multiply.27 + even_cutoff
DEBUG 2022-02-14 16:38:18,070 on stmt: $const512.30 = const(int, 2)
DEBUG 2022-02-14 16:38:18,070 on stmt: $514binary_add.31 = $510binary_add.29 + $const512.30
DEBUG 2022-02-14 16:38:18,070 on stmt: $516call_function.32 = call $486load_global.17($500binary_add.24, $514binary_add.31, func=$486load_global.17, args=[Var($500binary_add.24, loop_hafnian_batch.py:131), Var($514binary_add.31, loop_hafnian_batch.py:131)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:18,070 on stmt: $518get_iter.33 = getiter(value=$516call_function.32)
DEBUG 2022-02-14 16:38:18,070 on stmt: $phi520.1 = $518get_iter.33
DEBUG 2022-02-14 16:38:18,071 on stmt: jump 520
DEBUG 2022-02-14 16:38:18,071 ==== SSA block rewrite pass on 520
DEBUG 2022-02-14 16:38:18,071 Running <numba.core.ssa._FreshVarHandler object at 0x7fa0469602e0>
DEBUG 2022-02-14 16:38:18,071 on stmt: $520for_iter.2 = iternext(value=$phi520.1)
DEBUG 2022-02-14 16:38:18,071 on stmt: $520for_iter.3 = pair_first(value=$520for_iter.2)
DEBUG 2022-02-14 16:38:18,071 on stmt: $520for_iter.4 = pair_second(value=$520for_iter.2)
DEBUG 2022-02-14 16:38:18,071 on stmt: $phi522.2 = $520for_iter.3
DEBUG 2022-02-14 16:38:18,071 on stmt: branch $520for_iter.4, 522, 656
DEBUG 2022-02-14 16:38:18,071 ==== SSA block rewrite pass on 522
DEBUG 2022-02-14 16:38:18,071 Running <numba.core.ssa._FreshVarHandler object at 0x7fa0469602e0>
DEBUG 2022-02-14 16:38:18,071 on stmt: N_det = $phi522.2
DEBUG 2022-02-14 16:38:18,071 on stmt: N = N_fixed + N_det
DEBUG 2022-02-14 16:38:18,071 on stmt: $const532.6 = const(int, -1)
DEBUG 2022-02-14 16:38:18,071 on stmt: $const536.8 = const(int, 2)
DEBUG 2022-02-14 16:38:18,071 on stmt: $538binary_floor_divide.9 = N // $const536.8
DEBUG 2022-02-14 16:38:18,071 on stmt: $542binary_subtract.11 = $538binary_floor_divide.9 - edges_sum
DEBUG 2022-02-14 16:38:18,071 on stmt: plus_minus = $const532.6 ** $542binary_subtract.11
DEBUG 2022-02-14 16:38:18,071 on stmt: $const552.15 = const(int, 1)
DEBUG 2022-02-14 16:38:18,071 on stmt: $554binary_subtract.16 = N_det - $const552.15
DEBUG 2022-02-14 16:38:18,071 on stmt: $const556.17 = const(int, 2)
DEBUG 2022-02-14 16:38:18,071 on stmt: $558binary_floor_divide.18 = $554binary_subtract.16 // $const556.17
DEBUG 2022-02-14 16:38:18,071 on stmt: $const562.20 = const(int, 0)
DEBUG 2022-02-14 16:38:18,071 on stmt: $564binary_subscr.21 = static_getitem(value=kept_edges, index=0, index_var=$const562.20, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:18,071 on stmt: $566build_tuple.22 = build_tuple(items=[Var($558binary_floor_divide.18, loop_hafnian_batch.py:135), Var($564binary_subscr.21, loop_hafnian_batch.py:135)])
DEBUG 2022-02-14 16:38:18,072 on stmt: $568binary_subscr.23 = getitem(value=binoms, index=$566build_tuple.22, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:18,072 on stmt: n_det_binom_prod = $568binary_subscr.23 * binom_prod
DEBUG 2022-02-14 16:38:18,072 on stmt: $const578.27 = const(int, 2)
DEBUG 2022-02-14 16:38:18,072 on stmt: $580binary_modulo.28 = N % $const578.27
DEBUG 2022-02-14 16:38:18,072 on stmt: $const582.29 = const(int, 0)
DEBUG 2022-02-14 16:38:18,072 on stmt: $584compare_op.30 = $580binary_modulo.28 == $const582.29
DEBUG 2022-02-14 16:38:18,072 on stmt: bool586 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:38:18,072 on stmt: $586pred = call bool586($584compare_op.30, func=bool586, args=(Var($584compare_op.30, loop_hafnian_batch.py:137),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:18,072 on stmt: branch $586pred, 590, 624
DEBUG 2022-02-14 16:38:18,072 ==== SSA block rewrite pass on 590
DEBUG 2022-02-14 16:38:18,072 Running <numba.core.ssa._FreshVarHandler object at 0x7fa0469602e0>
DEBUG 2022-02-14 16:38:18,072 on stmt: $596binary_subscr.6 = getitem(value=Hnew, index=N_det, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:18,072 on stmt: $602binary_multiply.9 = n_det_binom_prod * plus_minus
DEBUG 2022-02-14 16:38:18,072 on stmt: $const608.12 = const(int, 2)
DEBUG 2022-02-14 16:38:18,072 on stmt: $610binary_floor_divide.13 = N // $const608.12
DEBUG 2022-02-14 16:38:18,072 on stmt: $612binary_subscr.14 = getitem(value=f_even, index=$610binary_floor_divide.13, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:18,072 on stmt: $614binary_multiply.15 = $602binary_multiply.9 * $612binary_subscr.14
DEBUG 2022-02-14 16:38:18,072 on stmt: $616inplace_add.16 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$596binary_subscr.6, rhs=$614binary_multiply.15, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:38:18,072 on stmt: Hnew[N_det] = $616inplace_add.16
DEBUG 2022-02-14 16:38:18,072 on stmt: jump 652
DEBUG 2022-02-14 16:38:18,072 ==== SSA block rewrite pass on 624
DEBUG 2022-02-14 16:38:18,072 Running <numba.core.ssa._FreshVarHandler object at 0x7fa0469602e0>
DEBUG 2022-02-14 16:38:18,072 on stmt: $630binary_subscr.6 = getitem(value=Hnew, index=N_det, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:18,073 on stmt: $636binary_multiply.9 = n_det_binom_prod * plus_minus
DEBUG 2022-02-14 16:38:18,073 on stmt: $642binary_subscr.12 = getitem(value=f_odd, index=N, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:18,073 on stmt: $644binary_multiply.13 = $636binary_multiply.9 * $642binary_subscr.12
DEBUG 2022-02-14 16:38:18,073 on stmt: $646inplace_add.14 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$630binary_subscr.6, rhs=$644binary_multiply.13, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:38:18,073 on stmt: Hnew[N_det] = $646inplace_add.14
DEBUG 2022-02-14 16:38:18,073 on stmt: jump 652
DEBUG 2022-02-14 16:38:18,073 ==== SSA block rewrite pass on 652
DEBUG 2022-02-14 16:38:18,073 Running <numba.core.ssa._FreshVarHandler object at 0x7fa0469602e0>
DEBUG 2022-02-14 16:38:18,073 on stmt: jump 520
DEBUG 2022-02-14 16:38:18,073 ==== SSA block rewrite pass on 656
DEBUG 2022-02-14 16:38:18,073 Running <numba.core.ssa._FreshVarHandler object at 0x7fa0469602e0>
DEBUG 2022-02-14 16:38:18,073 on stmt: $660inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=H_batch, rhs=Hnew, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:38:18,073 on stmt: H_batch = $660inplace_add.3
DEBUG 2022-02-14 16:38:18,073 on stmt: jump 192
DEBUG 2022-02-14 16:38:18,073 ==== SSA block rewrite pass on 666
DEBUG 2022-02-14 16:38:18,073 Running <numba.core.ssa._FreshVarHandler object at 0x7fa0469602e0>
DEBUG 2022-02-14 16:38:18,073 on stmt: bool668 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:38:18,073 on stmt: $668pred = call bool668(glynn, func=bool668, args=(Var(glynn, loop_hafnian_batch.py:83),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:18,073 on stmt: branch $668pred, 672, 726
DEBUG 2022-02-14 16:38:18,073 ==== SSA block rewrite pass on 672
DEBUG 2022-02-14 16:38:18,073 Running <numba.core.ssa._FreshVarHandler object at 0x7fa0469602e0>
DEBUG 2022-02-14 16:38:18,073 on stmt: $672load_global.0 = global(range: <class 'range'>)
DEBUG 2022-02-14 16:38:18,073 on stmt: $676load_attr.2 = getattr(value=H_batch, attr=shape)
DEBUG 2022-02-14 16:38:18,073 on stmt: $const678.3 = const(int, 0)
DEBUG 2022-02-14 16:38:18,073 on stmt: $680binary_subscr.4 = static_getitem(value=$676load_attr.2, index=0, index_var=$const678.3, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:18,073 on stmt: $682call_function.5 = call $672load_global.0($680binary_subscr.4, func=$672load_global.0, args=[Var($680binary_subscr.4, loop_hafnian_batch.py:145)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:18,074 on stmt: $684get_iter.6 = getiter(value=$682call_function.5)
DEBUG 2022-02-14 16:38:18,074 on stmt: $phi686.0 = $684get_iter.6
DEBUG 2022-02-14 16:38:18,074 on stmt: jump 686
DEBUG 2022-02-14 16:38:18,074 ==== SSA block rewrite pass on 686
DEBUG 2022-02-14 16:38:18,074 Running <numba.core.ssa._FreshVarHandler object at 0x7fa0469602e0>
DEBUG 2022-02-14 16:38:18,074 on stmt: $686for_iter.1 = iternext(value=$phi686.0)
DEBUG 2022-02-14 16:38:18,074 on stmt: $686for_iter.2 = pair_first(value=$686for_iter.1)
DEBUG 2022-02-14 16:38:18,074 on stmt: $686for_iter.3 = pair_second(value=$686for_iter.1)
DEBUG 2022-02-14 16:38:18,074 on stmt: $phi688.1 = $686for_iter.2
DEBUG 2022-02-14 16:38:18,074 on stmt: branch $686for_iter.3, 688, 726
DEBUG 2022-02-14 16:38:18,074 ==== SSA block rewrite pass on 688
DEBUG 2022-02-14 16:38:18,074 Running <numba.core.ssa._FreshVarHandler object at 0x7fa0469602e0>
DEBUG 2022-02-14 16:38:18,074 on stmt: j = $phi688.1
DEBUG 2022-02-14 16:38:18,074 replaced with: j.1 = $phi688.1
DEBUG 2022-02-14 16:38:18,074 on stmt: x = N_fixed + j
DEBUG 2022-02-14 16:38:18,074 on stmt: $704binary_subscr.9 = getitem(value=H_batch, index=j, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:18,074 on stmt: $const706.10 = const(float, 0.5)
DEBUG 2022-02-14 16:38:18,074 on stmt: $const710.12 = const(int, 2)
DEBUG 2022-02-14 16:38:18,074 on stmt: $712binary_floor_divide.13 = x // $const710.12
DEBUG 2022-02-14 16:38:18,074 on stmt: $714binary_power.14 = $const706.10 ** $712binary_floor_divide.13
DEBUG 2022-02-14 16:38:18,074 on stmt: $716inplace_multiply.15 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=$704binary_subscr.9, rhs=$714binary_power.14, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:38:18,074 on stmt: H_batch[j] = $716inplace_multiply.15
DEBUG 2022-02-14 16:38:18,074 on stmt: jump 686
DEBUG 2022-02-14 16:38:18,074 ==== SSA block rewrite pass on 726
DEBUG 2022-02-14 16:38:18,074 Running <numba.core.ssa._FreshVarHandler object at 0x7fa0469602e0>
DEBUG 2022-02-14 16:38:18,074 on stmt: $728return_value.1 = cast(value=H_batch)
DEBUG 2022-02-14 16:38:18,075 on stmt: return $728return_value.1
DEBUG 2022-02-14 16:38:18,075 Replaced assignments: defaultdict(<class 'list'>,
            {196: [<numba.core.ir.Assign object at 0x7fa041ed4be0>],
             688: [<numba.core.ir.Assign object at 0x7fa041ed4430>]})
DEBUG 2022-02-14 16:38:18,075 ==== SSA block rewrite pass on 0
DEBUG 2022-02-14 16:38:18,075 Running <numba.core.ssa._FixSSAVars object at 0x7fa0469602e0>
DEBUG 2022-02-14 16:38:18,075 on stmt: A = arg(0, name=A)
DEBUG 2022-02-14 16:38:18,075 on stmt: D = arg(1, name=D)
DEBUG 2022-02-14 16:38:18,075 on stmt: fixed_edge_reps = arg(2, name=fixed_edge_reps)
DEBUG 2022-02-14 16:38:18,075 on stmt: batch_max = arg(3, name=batch_max)
DEBUG 2022-02-14 16:38:18,075 on stmt: even_cutoff = arg(4, name=even_cutoff)
DEBUG 2022-02-14 16:38:18,075 on stmt: oddmode = arg(5, name=oddmode)
DEBUG 2022-02-14 16:38:18,075 on stmt: glynn = arg(6, name=glynn)
DEBUG 2022-02-14 16:38:18,075 on stmt: $const4.1 = const(int, 0)
DEBUG 2022-02-14 16:38:18,075 on stmt: oddloop = static_getitem(value=D, index=0, index_var=$const4.1, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:18,075 on stmt: $const12.4 = const(int, 0)
DEBUG 2022-02-14 16:38:18,075 on stmt: $const14.5 = const(NoneType, None)
DEBUG 2022-02-14 16:38:18,075 on stmt: $const16.6 = const(NoneType, None)
DEBUG 2022-02-14 16:38:18,075 on stmt: $18build_slice.7 = global(slice: <class 'slice'>)
DEBUG 2022-02-14 16:38:18,075 on stmt: $18build_slice.8 = call $18build_slice.7($const14.5, $const16.6, func=$18build_slice.7, args=(Var($const14.5, loop_hafnian_batch.py:84), Var($const16.6, loop_hafnian_batch.py:84)), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:18,075 on stmt: $20build_tuple.9 = build_tuple(items=[Var($const12.4, loop_hafnian_batch.py:84), Var($18build_slice.8, loop_hafnian_batch.py:84)])
DEBUG 2022-02-14 16:38:18,075 on stmt: oddV = static_getitem(value=A, index=(0, slice(None, None, None)), index_var=$20build_tuple.9, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:18,075 on stmt: $const28.12 = const(int, 1)
DEBUG 2022-02-14 16:38:18,075 on stmt: oddloop0 = static_getitem(value=D, index=1, index_var=$const28.12, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:18,075 on stmt: $const36.15 = const(int, 1)
DEBUG 2022-02-14 16:38:18,075 on stmt: $const38.16 = const(NoneType, None)
DEBUG 2022-02-14 16:38:18,076 on stmt: $const40.17 = const(NoneType, None)
DEBUG 2022-02-14 16:38:18,076 on stmt: $42build_slice.18 = global(slice: <class 'slice'>)
DEBUG 2022-02-14 16:38:18,076 on stmt: $42build_slice.19 = call $42build_slice.18($const38.16, $const40.17, func=$42build_slice.18, args=(Var($const38.16, loop_hafnian_batch.py:89), Var($const40.17, loop_hafnian_batch.py:89)), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:18,076 on stmt: $44build_tuple.20 = build_tuple(items=[Var($const36.15, loop_hafnian_batch.py:89), Var($42build_slice.19, loop_hafnian_batch.py:89)])
DEBUG 2022-02-14 16:38:18,076 on stmt: oddV0 = static_getitem(value=A, index=(1, slice(None, None, None)), index_var=$44build_tuple.20, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:18,076 on stmt: $52load_attr.23 = getattr(value=A, attr=shape)
DEBUG 2022-02-14 16:38:18,076 on stmt: $const54.24 = const(int, 0)
DEBUG 2022-02-14 16:38:18,076 on stmt: n = static_getitem(value=$52load_attr.23, index=0, index_var=$const54.24, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:18,076 on stmt: $const60.26 = const(int, 2)
DEBUG 2022-02-14 16:38:18,076 on stmt: $64load_method.28 = getattr(value=fixed_edge_reps, attr=sum)
DEBUG 2022-02-14 16:38:18,076 on stmt: $66call_method.29 = call $64load_method.28(func=$64load_method.28, args=[], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:18,076 on stmt: $68binary_multiply.30 = $const60.26 * $66call_method.29
DEBUG 2022-02-14 16:38:18,076 on stmt: $const70.31 = const(int, 1)
DEBUG 2022-02-14 16:38:18,076 on stmt: N_fixed = $68binary_multiply.30 + $const70.31
DEBUG 2022-02-14 16:38:18,076 on stmt: $const78.34 = const(int, 2)
DEBUG 2022-02-14 16:38:18,076 on stmt: $82binary_multiply.36 = $const78.34 * batch_max
DEBUG 2022-02-14 16:38:18,076 on stmt: $84binary_add.37 = N_fixed + $82binary_multiply.36
DEBUG 2022-02-14 16:38:18,076 on stmt: $88binary_add.39 = $84binary_add.37 + even_cutoff
DEBUG 2022-02-14 16:38:18,076 on stmt: $const90.40 = const(int, 1)
DEBUG 2022-02-14 16:38:18,076 on stmt: N_max = $88binary_add.39 + $const90.40
DEBUG 2022-02-14 16:38:18,076 on stmt: $96load_global.42 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:38:18,076 on stmt: $98load_method.43 = getattr(value=$96load_global.42, attr=concatenate)
DEBUG 2022-02-14 16:38:18,077 on stmt: $100load_global.44 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:38:18,077 on stmt: $102load_method.45 = getattr(value=$100load_global.44, attr=array)
DEBUG 2022-02-14 16:38:18,077 on stmt: $const106.47 = const(int, 1)
DEBUG 2022-02-14 16:38:18,077 on stmt: $108build_list.48 = build_list(items=[Var(batch_max, loop_hafnian_batch.py:83), Var($const106.47, loop_hafnian_batch.py:95)])
DEBUG 2022-02-14 16:38:18,077 on stmt: $110call_method.49 = call $102load_method.45($108build_list.48, func=$102load_method.45, args=[Var($108build_list.48, loop_hafnian_batch.py:95)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:18,077 on stmt: $114build_tuple.51 = build_tuple(items=[Var($110call_method.49, loop_hafnian_batch.py:95), Var(fixed_edge_reps, loop_hafnian_batch.py:83)])
DEBUG 2022-02-14 16:38:18,077 on stmt: edge_reps = call $98load_method.43($114build_tuple.51, func=$98load_method.43, args=[Var($114build_tuple.51, loop_hafnian_batch.py:95)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:18,077 on stmt: $120load_global.53 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:38:18,077 on stmt: $122load_method.54 = getattr(value=$120load_global.53, attr=prod)
DEBUG 2022-02-14 16:38:18,077 on stmt: $const126.56 = const(int, 1)
DEBUG 2022-02-14 16:38:18,077 on stmt: $128binary_add.57 = edge_reps + $const126.56
DEBUG 2022-02-14 16:38:18,077 on stmt: steps = call $122load_method.54($128binary_add.57, func=$122load_method.54, args=[Var($128binary_add.57, loop_hafnian_batch.py:96)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:18,077 on stmt: $136load_method.60 = getattr(value=edge_reps, attr=max)
DEBUG 2022-02-14 16:38:18,077 on stmt: $138call_method.61 = call $136load_method.60(func=$136load_method.60, args=[], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:18,077 on stmt: max_binom = $138call_method.61 + even_cutoff
DEBUG 2022-02-14 16:38:18,077 on stmt: $146load_global.64 = global(precompute_binoms: CPUDispatcher(<function precompute_binoms at 0x7fa047ebe310>))
DEBUG 2022-02-14 16:38:18,077 on stmt: binoms = call $146load_global.64(max_binom, func=$146load_global.64, args=[Var(max_binom, loop_hafnian_batch.py:98)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:18,077 on stmt: $154load_global.67 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:38:18,077 on stmt: $156load_attr.68 = getattr(value=$154load_global.67, attr=zeros)
DEBUG 2022-02-14 16:38:18,077 on stmt: $const158.69 = const(int, 2)
DEBUG 2022-02-14 16:38:18,077 on stmt: $162binary_multiply.71 = $const158.69 * batch_max
DEBUG 2022-02-14 16:38:18,078 on stmt: $166binary_add.73 = $162binary_multiply.71 + even_cutoff
DEBUG 2022-02-14 16:38:18,078 on stmt: $const168.74 = const(int, 2)
DEBUG 2022-02-14 16:38:18,078 on stmt: $170binary_add.75 = $166binary_add.73 + $const168.74
DEBUG 2022-02-14 16:38:18,078 on stmt: $172load_global.76 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:38:18,078 on stmt: $174load_attr.77 = getattr(value=$172load_global.76, attr=complex128)
DEBUG 2022-02-14 16:38:18,078 on stmt: H_batch = call $156load_attr.68($170binary_add.75, func=$156load_attr.68, args=[Var($170binary_add.75, loop_hafnian_batch.py:101)], kws=[('dtype', Var($174load_attr.77, loop_hafnian_batch.py:101))], vararg=None, target=None)
DEBUG 2022-02-14 16:38:18,078 on stmt: $182load_global.80 = global(numba: <module 'numba' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numba/__init__.py'>)
DEBUG 2022-02-14 16:38:18,078 on stmt: $184load_method.81 = getattr(value=$182load_global.80, attr=prange)
DEBUG 2022-02-14 16:38:18,078 on stmt: $188call_method.83 = call $184load_method.81(steps, func=$184load_method.81, args=[Var(steps, loop_hafnian_batch.py:96)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:18,078 on stmt: $190get_iter.84 = getiter(value=$188call_method.83)
DEBUG 2022-02-14 16:38:18,078 on stmt: $phi192.0 = $190get_iter.84
DEBUG 2022-02-14 16:38:18,078 on stmt: jump 192
DEBUG 2022-02-14 16:38:18,078 ==== SSA block rewrite pass on 192
DEBUG 2022-02-14 16:38:18,078 Running <numba.core.ssa._FixSSAVars object at 0x7fa0469602e0>
DEBUG 2022-02-14 16:38:18,078 on stmt: $192for_iter.1 = iternext(value=$phi192.0)
DEBUG 2022-02-14 16:38:18,078 on stmt: $192for_iter.2 = pair_first(value=$192for_iter.1)
DEBUG 2022-02-14 16:38:18,078 on stmt: $192for_iter.3 = pair_second(value=$192for_iter.1)
DEBUG 2022-02-14 16:38:18,078 on stmt: $phi196.1 = $192for_iter.2
DEBUG 2022-02-14 16:38:18,078 on stmt: branch $192for_iter.3, 196, 666
DEBUG 2022-02-14 16:38:18,078 ==== SSA block rewrite pass on 196
DEBUG 2022-02-14 16:38:18,078 Running <numba.core.ssa._FixSSAVars object at 0x7fa0469602e0>
DEBUG 2022-02-14 16:38:18,078 on stmt: j = $phi196.1
DEBUG 2022-02-14 16:38:18,078 on stmt: $198load_global.2 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:38:18,079 on stmt: $200load_attr.3 = getattr(value=$198load_global.2, attr=zeros)
DEBUG 2022-02-14 16:38:18,079 on stmt: $const202.4 = const(int, 2)
DEBUG 2022-02-14 16:38:18,079 on stmt: $206binary_multiply.6 = $const202.4 * batch_max
DEBUG 2022-02-14 16:38:18,079 on stmt: $210binary_add.8 = $206binary_multiply.6 + even_cutoff
DEBUG 2022-02-14 16:38:18,079 on stmt: $const212.9 = const(int, 2)
DEBUG 2022-02-14 16:38:18,079 on stmt: $214binary_add.10 = $210binary_add.8 + $const212.9
DEBUG 2022-02-14 16:38:18,079 on stmt: $216load_global.11 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:38:18,079 on stmt: $218load_attr.12 = getattr(value=$216load_global.11, attr=complex128)
DEBUG 2022-02-14 16:38:18,079 on stmt: Hnew = call $200load_attr.3($214binary_add.10, func=$200load_attr.3, args=[Var($214binary_add.10, loop_hafnian_batch.py:104)], kws=[('dtype', Var($218load_attr.12, loop_hafnian_batch.py:104))], vararg=None, target=None)
DEBUG 2022-02-14 16:38:18,079 on stmt: $226load_global.15 = global(find_kept_edges: CPUDispatcher(<function find_kept_edges at 0x7fa047ebe790>))
DEBUG 2022-02-14 16:38:18,079 on stmt: kept_edges = call $226load_global.15(j, edge_reps, func=$226load_global.15, args=[Var(j, loop_hafnian_batch.py:102), Var(edge_reps, loop_hafnian_batch.py:95)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:18,079 find_def var='j' stmt=kept_edges = call $226load_global.15(j, edge_reps, func=$226load_global.15, args=[Var(j, loop_hafnian_batch.py:102), Var(edge_reps, loop_hafnian_batch.py:95)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:18,079 on stmt: $238load_method.20 = getattr(value=kept_edges, attr=sum)
DEBUG 2022-02-14 16:38:18,079 on stmt: edges_sum = call $238load_method.20(func=$238load_method.20, args=[], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:18,079 on stmt: binom_prod = const(float, 1.0)
DEBUG 2022-02-14 16:38:18,079 on stmt: $248load_global.23 = global(range: <class 'range'>)
DEBUG 2022-02-14 16:38:18,079 on stmt: $const250.24 = const(int, 1)
DEBUG 2022-02-14 16:38:18,079 on stmt: $const254.26 = const(int, 2)
DEBUG 2022-02-14 16:38:18,079 on stmt: $256binary_floor_divide.27 = n // $const254.26
DEBUG 2022-02-14 16:38:18,079 on stmt: $258call_function.28 = call $248load_global.23($const250.24, $256binary_floor_divide.27, func=$248load_global.23, args=[Var($const250.24, loop_hafnian_batch.py:110), Var($256binary_floor_divide.27, loop_hafnian_batch.py:110)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:18,079 on stmt: $260get_iter.29 = getiter(value=$258call_function.28)
DEBUG 2022-02-14 16:38:18,080 on stmt: $phi262.1 = $260get_iter.29
DEBUG 2022-02-14 16:38:18,080 on stmt: jump 262
DEBUG 2022-02-14 16:38:18,080 ==== SSA block rewrite pass on 262
DEBUG 2022-02-14 16:38:18,080 Running <numba.core.ssa._FixSSAVars object at 0x7fa0469602e0>
DEBUG 2022-02-14 16:38:18,080 on stmt: $262for_iter.2 = iternext(value=$phi262.1)
DEBUG 2022-02-14 16:38:18,080 on stmt: $262for_iter.3 = pair_first(value=$262for_iter.2)
DEBUG 2022-02-14 16:38:18,080 on stmt: $262for_iter.4 = pair_second(value=$262for_iter.2)
DEBUG 2022-02-14 16:38:18,080 on stmt: $phi264.2 = $262for_iter.3
DEBUG 2022-02-14 16:38:18,080 on stmt: branch $262for_iter.4, 264, 294
DEBUG 2022-02-14 16:38:18,080 ==== SSA block rewrite pass on 264
DEBUG 2022-02-14 16:38:18,080 Running <numba.core.ssa._FixSSAVars object at 0x7fa0469602e0>
DEBUG 2022-02-14 16:38:18,080 on stmt: i = $phi264.2
DEBUG 2022-02-14 16:38:18,080 on stmt: $274binary_subscr.7 = getitem(value=edge_reps, index=i, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:18,080 on stmt: $280binary_subscr.10 = getitem(value=kept_edges, index=i, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:18,080 on stmt: $282build_tuple.11 = build_tuple(items=[Var($274binary_subscr.7, loop_hafnian_batch.py:111), Var($280binary_subscr.10, loop_hafnian_batch.py:111)])
DEBUG 2022-02-14 16:38:18,080 on stmt: $284binary_subscr.12 = getitem(value=binoms, index=$282build_tuple.11, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:18,080 on stmt: $286inplace_multiply.13 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=binom_prod, rhs=$284binary_subscr.12, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:38:18,080 on stmt: binom_prod = $286inplace_multiply.13
DEBUG 2022-02-14 16:38:18,080 on stmt: jump 262
DEBUG 2022-02-14 16:38:18,080 ==== SSA block rewrite pass on 294
DEBUG 2022-02-14 16:38:18,080 Running <numba.core.ssa._FixSSAVars object at 0x7fa0469602e0>
DEBUG 2022-02-14 16:38:18,080 on stmt: bool296 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:38:18,080 on stmt: $296pred = call bool296(glynn, func=bool296, args=(Var(glynn, loop_hafnian_batch.py:83),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:18,081 on stmt: branch $296pred, 300, 314
DEBUG 2022-02-14 16:38:18,081 ==== SSA block rewrite pass on 300
DEBUG 2022-02-14 16:38:18,081 Running <numba.core.ssa._FixSSAVars object at 0x7fa0469602e0>
DEBUG 2022-02-14 16:38:18,081 on stmt: $const300.1 = const(int, 2)
DEBUG 2022-02-14 16:38:18,081 on stmt: $304binary_multiply.3 = $const300.1 * kept_edges
DEBUG 2022-02-14 16:38:18,081 on stmt: delta = $304binary_multiply.3 - edge_reps
DEBUG 2022-02-14 16:38:18,081 on stmt: jump 318
DEBUG 2022-02-14 16:38:18,081 ==== SSA block rewrite pass on 314
DEBUG 2022-02-14 16:38:18,081 Running <numba.core.ssa._FixSSAVars object at 0x7fa0469602e0>
DEBUG 2022-02-14 16:38:18,081 on stmt: delta = kept_edges
DEBUG 2022-02-14 16:38:18,081 on stmt: jump 318
DEBUG 2022-02-14 16:38:18,081 ==== SSA block rewrite pass on 318
DEBUG 2022-02-14 16:38:18,081 Running <numba.core.ssa._FixSSAVars object at 0x7fa0469602e0>
DEBUG 2022-02-14 16:38:18,081 on stmt: $318load_global.1 = global(get_submatrices: CPUDispatcher(<function get_submatrices at 0x7fa047ebed30>))
DEBUG 2022-02-14 16:38:18,081 on stmt: $328call_function.6 = call $318load_global.1(delta, A, D, oddV, func=$318load_global.1, args=[Var(delta, loop_hafnian_batch.py:114), Var(A, loop_hafnian_batch.py:83), Var(D, loop_hafnian_batch.py:83), Var(oddV, loop_hafnian_batch.py:84)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:18,081 on stmt: $330unpack_sequence.11 = exhaust_iter(value=$328call_function.6, count=4)
DEBUG 2022-02-14 16:38:18,081 on stmt: $330unpack_sequence.7 = static_getitem(value=$330unpack_sequence.11, index=0, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:18,081 on stmt: $330unpack_sequence.8 = static_getitem(value=$330unpack_sequence.11, index=1, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:18,081 on stmt: $330unpack_sequence.9 = static_getitem(value=$330unpack_sequence.11, index=2, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:18,081 on stmt: $330unpack_sequence.10 = static_getitem(value=$330unpack_sequence.11, index=3, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:18,081 on stmt: AX_S = $330unpack_sequence.7
DEBUG 2022-02-14 16:38:18,081 on stmt: XD_S = $330unpack_sequence.8
DEBUG 2022-02-14 16:38:18,081 on stmt: D_S = $330unpack_sequence.9
DEBUG 2022-02-14 16:38:18,082 on stmt: oddVX_S = $330unpack_sequence.10
DEBUG 2022-02-14 16:38:18,082 on stmt: $340load_global.12 = global(eigvals: CPUDispatcher(<function eigvals at 0x7fa047e5d430>))
DEBUG 2022-02-14 16:38:18,082 on stmt: E = call $340load_global.12(AX_S, func=$340load_global.12, args=[Var(AX_S, loop_hafnian_batch.py:118)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:18,082 on stmt: $const350.16 = const(int, 0)
DEBUG 2022-02-14 16:38:18,082 on stmt: $352binary_subscr.17 = static_getitem(value=kept_edges, index=0, index_var=$const350.16, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:18,082 on stmt: $const354.18 = const(int, 0)
DEBUG 2022-02-14 16:38:18,082 on stmt: $356compare_op.19 = $352binary_subscr.17 == $const354.18
DEBUG 2022-02-14 16:38:18,082 on stmt: bool358 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:38:18,082 on stmt: $358pred = call bool358($356compare_op.19, func=bool358, args=(Var($356compare_op.19, loop_hafnian_batch.py:122),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:18,082 on stmt: branch $358pred, 362, 450
DEBUG 2022-02-14 16:38:18,082 ==== SSA block rewrite pass on 362
DEBUG 2022-02-14 16:38:18,082 Running <numba.core.ssa._FixSSAVars object at 0x7fa0469602e0>
DEBUG 2022-02-14 16:38:18,082 on stmt: $const364.2 = const(int, 1)
DEBUG 2022-02-14 16:38:18,082 on stmt: $366binary_subscr.3 = static_getitem(value=kept_edges, index=1, index_var=$const364.2, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:18,082 on stmt: $const368.4 = const(int, 0)
DEBUG 2022-02-14 16:38:18,082 on stmt: $370compare_op.5 = $366binary_subscr.3 == $const368.4
DEBUG 2022-02-14 16:38:18,082 on stmt: bool372 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:38:18,082 on stmt: $372pred = call bool372($370compare_op.5, func=bool372, args=(Var($370compare_op.5, loop_hafnian_batch.py:122),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:18,082 on stmt: branch $372pred, 376, 450
DEBUG 2022-02-14 16:38:18,082 ==== SSA block rewrite pass on 376
DEBUG 2022-02-14 16:38:18,082 Running <numba.core.ssa._FixSSAVars object at 0x7fa0469602e0>
DEBUG 2022-02-14 16:38:18,082 on stmt: $376load_global.1 = global(get_submatrix_batch_odd0: CPUDispatcher(<function get_submatrix_batch_odd0 at 0x7fa047ebef70>))
DEBUG 2022-02-14 16:38:18,082 on stmt: oddVX_S0 = call $376load_global.1(delta, oddV0, func=$376load_global.1, args=[Var(delta, loop_hafnian_batch.py:114), Var(oddV0, loop_hafnian_batch.py:89)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:18,083 on stmt: $const386.5 = const(int, -1)
DEBUG 2022-02-14 16:38:18,083 on stmt: $const390.7 = const(int, 2)
DEBUG 2022-02-14 16:38:18,083 on stmt: $392binary_floor_divide.8 = N_fixed // $const390.7
DEBUG 2022-02-14 16:38:18,083 on stmt: $396binary_subtract.10 = $392binary_floor_divide.8 - edges_sum
DEBUG 2022-02-14 16:38:18,083 on stmt: plus_minus = $const386.5 ** $396binary_subtract.10
DEBUG 2022-02-14 16:38:18,083 on stmt: $402load_global.12 = global(f_loop_odd: CPUDispatcher(<function f_loop_odd at 0x7fa047ebeb80>))
DEBUG 2022-02-14 16:38:18,083 on stmt: $418call_function.20 = call $402load_global.12(E, AX_S, XD_S, D_S, N_fixed, oddloop0, oddVX_S0, func=$402load_global.12, args=[Var(E, loop_hafnian_batch.py:120), Var(AX_S, loop_hafnian_batch.py:118), Var(XD_S, loop_hafnian_batch.py:118), Var(D_S, loop_hafnian_batch.py:118), Var(N_fixed, loop_hafnian_batch.py:92), Var(oddloop0, loop_hafnian_batch.py:88), Var(oddVX_S0, loop_hafnian_batch.py:123)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:18,083 on stmt: f = getitem(value=$418call_function.20, index=N_fixed, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:18,083 on stmt: $const428.24 = const(int, 0)
DEBUG 2022-02-14 16:38:18,083 on stmt: $432binary_subscr.27 = static_getitem(value=H_batch, index=0, index_var=$const428.24, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:18,083 on stmt: $438binary_multiply.30 = binom_prod * plus_minus
DEBUG 2022-02-14 16:38:18,083 on stmt: $442binary_multiply.32 = $438binary_multiply.30 * f
DEBUG 2022-02-14 16:38:18,083 on stmt: $444inplace_add.33 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$432binary_subscr.27, rhs=$442binary_multiply.32, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:38:18,083 on stmt: H_batch[0] = $444inplace_add.33
DEBUG 2022-02-14 16:38:18,083 on stmt: jump 450
DEBUG 2022-02-14 16:38:18,083 ==== SSA block rewrite pass on 450
DEBUG 2022-02-14 16:38:18,083 Running <numba.core.ssa._FixSSAVars object at 0x7fa0469602e0>
DEBUG 2022-02-14 16:38:18,083 on stmt: $450load_global.1 = global(f_loop: CPUDispatcher(<function f_loop at 0x7fa047ebe9d0>))
DEBUG 2022-02-14 16:38:18,083 on stmt: f_even = call $450load_global.1(E, AX_S, XD_S, D_S, N_max, func=$450load_global.1, args=[Var(E, loop_hafnian_batch.py:120), Var(AX_S, loop_hafnian_batch.py:118), Var(XD_S, loop_hafnian_batch.py:118), Var(D_S, loop_hafnian_batch.py:118), Var(N_max, loop_hafnian_batch.py:93)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:18,083 on stmt: $466load_global.8 = global(f_loop_odd: CPUDispatcher(<function f_loop_odd at 0x7fa047ebeb80>))
DEBUG 2022-02-14 16:38:18,083 on stmt: f_odd = call $466load_global.8(E, AX_S, XD_S, D_S, N_max, oddloop, oddVX_S, func=$466load_global.8, args=[Var(E, loop_hafnian_batch.py:120), Var(AX_S, loop_hafnian_batch.py:118), Var(XD_S, loop_hafnian_batch.py:118), Var(D_S, loop_hafnian_batch.py:118), Var(N_max, loop_hafnian_batch.py:93), Var(oddloop, loop_hafnian_batch.py:83), Var(oddVX_S, loop_hafnian_batch.py:118)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:18,084 on stmt: $486load_global.17 = global(range: <class 'range'>)
DEBUG 2022-02-14 16:38:18,084 on stmt: $const488.18 = const(int, 2)
DEBUG 2022-02-14 16:38:18,084 on stmt: $const492.20 = const(int, 0)
DEBUG 2022-02-14 16:38:18,084 on stmt: $494binary_subscr.21 = static_getitem(value=kept_edges, index=0, index_var=$const492.20, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:18,084 on stmt: $496binary_multiply.22 = $const488.18 * $494binary_subscr.21
DEBUG 2022-02-14 16:38:18,084 on stmt: $const498.23 = const(int, 1)
DEBUG 2022-02-14 16:38:18,084 on stmt: $500binary_add.24 = $496binary_multiply.22 + $const498.23
DEBUG 2022-02-14 16:38:18,084 on stmt: $const502.25 = const(int, 2)
DEBUG 2022-02-14 16:38:18,084 on stmt: $506binary_multiply.27 = $const502.25 * batch_max
DEBUG 2022-02-14 16:38:18,084 on stmt: $510binary_add.29 = $506binary_multiply.27 + even_cutoff
DEBUG 2022-02-14 16:38:18,084 on stmt: $const512.30 = const(int, 2)
DEBUG 2022-02-14 16:38:18,084 on stmt: $514binary_add.31 = $510binary_add.29 + $const512.30
DEBUG 2022-02-14 16:38:18,084 on stmt: $516call_function.32 = call $486load_global.17($500binary_add.24, $514binary_add.31, func=$486load_global.17, args=[Var($500binary_add.24, loop_hafnian_batch.py:131), Var($514binary_add.31, loop_hafnian_batch.py:131)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:18,084 on stmt: $518get_iter.33 = getiter(value=$516call_function.32)
DEBUG 2022-02-14 16:38:18,084 on stmt: $phi520.1 = $518get_iter.33
DEBUG 2022-02-14 16:38:18,084 on stmt: jump 520
DEBUG 2022-02-14 16:38:18,084 ==== SSA block rewrite pass on 520
DEBUG 2022-02-14 16:38:18,084 Running <numba.core.ssa._FixSSAVars object at 0x7fa0469602e0>
DEBUG 2022-02-14 16:38:18,084 on stmt: $520for_iter.2 = iternext(value=$phi520.1)
DEBUG 2022-02-14 16:38:18,084 on stmt: $520for_iter.3 = pair_first(value=$520for_iter.2)
DEBUG 2022-02-14 16:38:18,084 on stmt: $520for_iter.4 = pair_second(value=$520for_iter.2)
DEBUG 2022-02-14 16:38:18,084 on stmt: $phi522.2 = $520for_iter.3
DEBUG 2022-02-14 16:38:18,084 on stmt: branch $520for_iter.4, 522, 656
DEBUG 2022-02-14 16:38:18,084 ==== SSA block rewrite pass on 522
DEBUG 2022-02-14 16:38:18,084 Running <numba.core.ssa._FixSSAVars object at 0x7fa0469602e0>
DEBUG 2022-02-14 16:38:18,084 on stmt: N_det = $phi522.2
DEBUG 2022-02-14 16:38:18,084 on stmt: N = N_fixed + N_det
DEBUG 2022-02-14 16:38:18,085 on stmt: $const532.6 = const(int, -1)
DEBUG 2022-02-14 16:38:18,085 on stmt: $const536.8 = const(int, 2)
DEBUG 2022-02-14 16:38:18,085 on stmt: $538binary_floor_divide.9 = N // $const536.8
DEBUG 2022-02-14 16:38:18,085 on stmt: $542binary_subtract.11 = $538binary_floor_divide.9 - edges_sum
DEBUG 2022-02-14 16:38:18,085 on stmt: plus_minus = $const532.6 ** $542binary_subtract.11
DEBUG 2022-02-14 16:38:18,085 on stmt: $const552.15 = const(int, 1)
DEBUG 2022-02-14 16:38:18,085 on stmt: $554binary_subtract.16 = N_det - $const552.15
DEBUG 2022-02-14 16:38:18,085 on stmt: $const556.17 = const(int, 2)
DEBUG 2022-02-14 16:38:18,085 on stmt: $558binary_floor_divide.18 = $554binary_subtract.16 // $const556.17
DEBUG 2022-02-14 16:38:18,085 on stmt: $const562.20 = const(int, 0)
DEBUG 2022-02-14 16:38:18,085 on stmt: $564binary_subscr.21 = static_getitem(value=kept_edges, index=0, index_var=$const562.20, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:18,085 on stmt: $566build_tuple.22 = build_tuple(items=[Var($558binary_floor_divide.18, loop_hafnian_batch.py:135), Var($564binary_subscr.21, loop_hafnian_batch.py:135)])
DEBUG 2022-02-14 16:38:18,085 on stmt: $568binary_subscr.23 = getitem(value=binoms, index=$566build_tuple.22, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:18,085 on stmt: n_det_binom_prod = $568binary_subscr.23 * binom_prod
DEBUG 2022-02-14 16:38:18,085 on stmt: $const578.27 = const(int, 2)
DEBUG 2022-02-14 16:38:18,085 on stmt: $580binary_modulo.28 = N % $const578.27
DEBUG 2022-02-14 16:38:18,085 on stmt: $const582.29 = const(int, 0)
DEBUG 2022-02-14 16:38:18,085 on stmt: $584compare_op.30 = $580binary_modulo.28 == $const582.29
DEBUG 2022-02-14 16:38:18,085 on stmt: bool586 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:38:18,085 on stmt: $586pred = call bool586($584compare_op.30, func=bool586, args=(Var($584compare_op.30, loop_hafnian_batch.py:137),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:18,085 on stmt: branch $586pred, 590, 624
DEBUG 2022-02-14 16:38:18,085 ==== SSA block rewrite pass on 590
DEBUG 2022-02-14 16:38:18,085 Running <numba.core.ssa._FixSSAVars object at 0x7fa0469602e0>
DEBUG 2022-02-14 16:38:18,085 on stmt: $596binary_subscr.6 = getitem(value=Hnew, index=N_det, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:18,086 on stmt: $602binary_multiply.9 = n_det_binom_prod * plus_minus
DEBUG 2022-02-14 16:38:18,086 on stmt: $const608.12 = const(int, 2)
DEBUG 2022-02-14 16:38:18,086 on stmt: $610binary_floor_divide.13 = N // $const608.12
DEBUG 2022-02-14 16:38:18,086 on stmt: $612binary_subscr.14 = getitem(value=f_even, index=$610binary_floor_divide.13, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:18,086 on stmt: $614binary_multiply.15 = $602binary_multiply.9 * $612binary_subscr.14
DEBUG 2022-02-14 16:38:18,086 on stmt: $616inplace_add.16 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$596binary_subscr.6, rhs=$614binary_multiply.15, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:38:18,086 on stmt: Hnew[N_det] = $616inplace_add.16
DEBUG 2022-02-14 16:38:18,086 on stmt: jump 652
DEBUG 2022-02-14 16:38:18,086 ==== SSA block rewrite pass on 624
DEBUG 2022-02-14 16:38:18,086 Running <numba.core.ssa._FixSSAVars object at 0x7fa0469602e0>
DEBUG 2022-02-14 16:38:18,086 on stmt: $630binary_subscr.6 = getitem(value=Hnew, index=N_det, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:18,086 on stmt: $636binary_multiply.9 = n_det_binom_prod * plus_minus
DEBUG 2022-02-14 16:38:18,086 on stmt: $642binary_subscr.12 = getitem(value=f_odd, index=N, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:18,086 on stmt: $644binary_multiply.13 = $636binary_multiply.9 * $642binary_subscr.12
DEBUG 2022-02-14 16:38:18,086 on stmt: $646inplace_add.14 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$630binary_subscr.6, rhs=$644binary_multiply.13, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:38:18,086 on stmt: Hnew[N_det] = $646inplace_add.14
DEBUG 2022-02-14 16:38:18,086 on stmt: jump 652
DEBUG 2022-02-14 16:38:18,086 ==== SSA block rewrite pass on 652
DEBUG 2022-02-14 16:38:18,086 Running <numba.core.ssa._FixSSAVars object at 0x7fa0469602e0>
DEBUG 2022-02-14 16:38:18,086 on stmt: jump 520
DEBUG 2022-02-14 16:38:18,086 ==== SSA block rewrite pass on 656
DEBUG 2022-02-14 16:38:18,086 Running <numba.core.ssa._FixSSAVars object at 0x7fa0469602e0>
DEBUG 2022-02-14 16:38:18,087 on stmt: $660inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=H_batch, rhs=Hnew, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:38:18,087 on stmt: H_batch = $660inplace_add.3
DEBUG 2022-02-14 16:38:18,087 on stmt: jump 192
DEBUG 2022-02-14 16:38:18,087 ==== SSA block rewrite pass on 666
DEBUG 2022-02-14 16:38:18,087 Running <numba.core.ssa._FixSSAVars object at 0x7fa0469602e0>
DEBUG 2022-02-14 16:38:18,087 on stmt: bool668 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:38:18,087 on stmt: $668pred = call bool668(glynn, func=bool668, args=(Var(glynn, loop_hafnian_batch.py:83),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:18,087 on stmt: branch $668pred, 672, 726
DEBUG 2022-02-14 16:38:18,087 ==== SSA block rewrite pass on 672
DEBUG 2022-02-14 16:38:18,087 Running <numba.core.ssa._FixSSAVars object at 0x7fa0469602e0>
DEBUG 2022-02-14 16:38:18,087 on stmt: $672load_global.0 = global(range: <class 'range'>)
DEBUG 2022-02-14 16:38:18,087 on stmt: $676load_attr.2 = getattr(value=H_batch, attr=shape)
DEBUG 2022-02-14 16:38:18,087 on stmt: $const678.3 = const(int, 0)
DEBUG 2022-02-14 16:38:18,087 on stmt: $680binary_subscr.4 = static_getitem(value=$676load_attr.2, index=0, index_var=$const678.3, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:18,087 on stmt: $682call_function.5 = call $672load_global.0($680binary_subscr.4, func=$672load_global.0, args=[Var($680binary_subscr.4, loop_hafnian_batch.py:145)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:18,087 on stmt: $684get_iter.6 = getiter(value=$682call_function.5)
DEBUG 2022-02-14 16:38:18,087 on stmt: $phi686.0 = $684get_iter.6
DEBUG 2022-02-14 16:38:18,087 on stmt: jump 686
DEBUG 2022-02-14 16:38:18,087 ==== SSA block rewrite pass on 686
DEBUG 2022-02-14 16:38:18,087 Running <numba.core.ssa._FixSSAVars object at 0x7fa0469602e0>
DEBUG 2022-02-14 16:38:18,087 on stmt: $686for_iter.1 = iternext(value=$phi686.0)
DEBUG 2022-02-14 16:38:18,087 on stmt: $686for_iter.2 = pair_first(value=$686for_iter.1)
DEBUG 2022-02-14 16:38:18,087 on stmt: $686for_iter.3 = pair_second(value=$686for_iter.1)
DEBUG 2022-02-14 16:38:18,088 on stmt: $phi688.1 = $686for_iter.2
DEBUG 2022-02-14 16:38:18,088 on stmt: branch $686for_iter.3, 688, 726
DEBUG 2022-02-14 16:38:18,088 ==== SSA block rewrite pass on 688
DEBUG 2022-02-14 16:38:18,088 Running <numba.core.ssa._FixSSAVars object at 0x7fa0469602e0>
DEBUG 2022-02-14 16:38:18,088 on stmt: j.1 = $phi688.1
DEBUG 2022-02-14 16:38:18,088 on stmt: x = N_fixed + j
DEBUG 2022-02-14 16:38:18,088 find_def var='j' stmt=x = N_fixed + j
DEBUG 2022-02-14 16:38:18,088 replaced with: x = N_fixed + j.1
DEBUG 2022-02-14 16:38:18,088 on stmt: $704binary_subscr.9 = getitem(value=H_batch, index=j, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:18,088 find_def var='j' stmt=$704binary_subscr.9 = getitem(value=H_batch, index=j, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:18,088 replaced with: $704binary_subscr.9 = getitem(value=H_batch, index=j.1, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:18,088 on stmt: $const706.10 = const(float, 0.5)
DEBUG 2022-02-14 16:38:18,088 on stmt: $const710.12 = const(int, 2)
DEBUG 2022-02-14 16:38:18,088 on stmt: $712binary_floor_divide.13 = x // $const710.12
DEBUG 2022-02-14 16:38:18,088 on stmt: $714binary_power.14 = $const706.10 ** $712binary_floor_divide.13
DEBUG 2022-02-14 16:38:18,088 on stmt: $716inplace_multiply.15 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=$704binary_subscr.9, rhs=$714binary_power.14, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:38:18,088 on stmt: H_batch[j] = $716inplace_multiply.15
DEBUG 2022-02-14 16:38:18,088 find_def var='j' stmt=H_batch[j] = $716inplace_multiply.15
DEBUG 2022-02-14 16:38:18,088 replaced with: H_batch[j.1] = $716inplace_multiply.15
DEBUG 2022-02-14 16:38:18,088 on stmt: jump 686
DEBUG 2022-02-14 16:38:18,088 ==== SSA block rewrite pass on 726
DEBUG 2022-02-14 16:38:18,088 Running <numba.core.ssa._FixSSAVars object at 0x7fa0469602e0>
DEBUG 2022-02-14 16:38:18,089 on stmt: $728return_value.1 = cast(value=H_batch)
DEBUG 2022-02-14 16:38:18,089 on stmt: return $728return_value.1
DEBUG 2022-02-14 16:38:18,089 Fix SSA violator on var binom_prod
DEBUG 2022-02-14 16:38:18,089 ==== SSA block rewrite pass on 0
DEBUG 2022-02-14 16:38:18,089 Running <numba.core.ssa._FreshVarHandler object at 0x7fa046a325e0>
DEBUG 2022-02-14 16:38:18,089 on stmt: A = arg(0, name=A)
DEBUG 2022-02-14 16:38:18,089 on stmt: D = arg(1, name=D)
DEBUG 2022-02-14 16:38:18,089 on stmt: fixed_edge_reps = arg(2, name=fixed_edge_reps)
DEBUG 2022-02-14 16:38:18,089 on stmt: batch_max = arg(3, name=batch_max)
DEBUG 2022-02-14 16:38:18,089 on stmt: even_cutoff = arg(4, name=even_cutoff)
DEBUG 2022-02-14 16:38:18,089 on stmt: oddmode = arg(5, name=oddmode)
DEBUG 2022-02-14 16:38:18,089 on stmt: glynn = arg(6, name=glynn)
DEBUG 2022-02-14 16:38:18,089 on stmt: $const4.1 = const(int, 0)
DEBUG 2022-02-14 16:38:18,089 on stmt: oddloop = static_getitem(value=D, index=0, index_var=$const4.1, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:18,089 on stmt: $const12.4 = const(int, 0)
DEBUG 2022-02-14 16:38:18,089 on stmt: $const14.5 = const(NoneType, None)
DEBUG 2022-02-14 16:38:18,089 on stmt: $const16.6 = const(NoneType, None)
DEBUG 2022-02-14 16:38:18,089 on stmt: $18build_slice.7 = global(slice: <class 'slice'>)
DEBUG 2022-02-14 16:38:18,089 on stmt: $18build_slice.8 = call $18build_slice.7($const14.5, $const16.6, func=$18build_slice.7, args=(Var($const14.5, loop_hafnian_batch.py:84), Var($const16.6, loop_hafnian_batch.py:84)), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:18,089 on stmt: $20build_tuple.9 = build_tuple(items=[Var($const12.4, loop_hafnian_batch.py:84), Var($18build_slice.8, loop_hafnian_batch.py:84)])
DEBUG 2022-02-14 16:38:18,089 on stmt: oddV = static_getitem(value=A, index=(0, slice(None, None, None)), index_var=$20build_tuple.9, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:18,089 on stmt: $const28.12 = const(int, 1)
DEBUG 2022-02-14 16:38:18,089 on stmt: oddloop0 = static_getitem(value=D, index=1, index_var=$const28.12, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:18,090 on stmt: $const36.15 = const(int, 1)
DEBUG 2022-02-14 16:38:18,090 on stmt: $const38.16 = const(NoneType, None)
DEBUG 2022-02-14 16:38:18,090 on stmt: $const40.17 = const(NoneType, None)
DEBUG 2022-02-14 16:38:18,090 on stmt: $42build_slice.18 = global(slice: <class 'slice'>)
DEBUG 2022-02-14 16:38:18,090 on stmt: $42build_slice.19 = call $42build_slice.18($const38.16, $const40.17, func=$42build_slice.18, args=(Var($const38.16, loop_hafnian_batch.py:89), Var($const40.17, loop_hafnian_batch.py:89)), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:18,090 on stmt: $44build_tuple.20 = build_tuple(items=[Var($const36.15, loop_hafnian_batch.py:89), Var($42build_slice.19, loop_hafnian_batch.py:89)])
DEBUG 2022-02-14 16:38:18,090 on stmt: oddV0 = static_getitem(value=A, index=(1, slice(None, None, None)), index_var=$44build_tuple.20, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:18,090 on stmt: $52load_attr.23 = getattr(value=A, attr=shape)
DEBUG 2022-02-14 16:38:18,090 on stmt: $const54.24 = const(int, 0)
DEBUG 2022-02-14 16:38:18,090 on stmt: n = static_getitem(value=$52load_attr.23, index=0, index_var=$const54.24, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:18,090 on stmt: $const60.26 = const(int, 2)
DEBUG 2022-02-14 16:38:18,090 on stmt: $64load_method.28 = getattr(value=fixed_edge_reps, attr=sum)
DEBUG 2022-02-14 16:38:18,090 on stmt: $66call_method.29 = call $64load_method.28(func=$64load_method.28, args=[], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:18,090 on stmt: $68binary_multiply.30 = $const60.26 * $66call_method.29
DEBUG 2022-02-14 16:38:18,090 on stmt: $const70.31 = const(int, 1)
DEBUG 2022-02-14 16:38:18,090 on stmt: N_fixed = $68binary_multiply.30 + $const70.31
DEBUG 2022-02-14 16:38:18,090 on stmt: $const78.34 = const(int, 2)
DEBUG 2022-02-14 16:38:18,090 on stmt: $82binary_multiply.36 = $const78.34 * batch_max
DEBUG 2022-02-14 16:38:18,090 on stmt: $84binary_add.37 = N_fixed + $82binary_multiply.36
DEBUG 2022-02-14 16:38:18,090 on stmt: $88binary_add.39 = $84binary_add.37 + even_cutoff
DEBUG 2022-02-14 16:38:18,090 on stmt: $const90.40 = const(int, 1)
DEBUG 2022-02-14 16:38:18,090 on stmt: N_max = $88binary_add.39 + $const90.40
DEBUG 2022-02-14 16:38:18,090 on stmt: $96load_global.42 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:38:18,091 on stmt: $98load_method.43 = getattr(value=$96load_global.42, attr=concatenate)
DEBUG 2022-02-14 16:38:18,091 on stmt: $100load_global.44 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:38:18,091 on stmt: $102load_method.45 = getattr(value=$100load_global.44, attr=array)
DEBUG 2022-02-14 16:38:18,091 on stmt: $const106.47 = const(int, 1)
DEBUG 2022-02-14 16:38:18,091 on stmt: $108build_list.48 = build_list(items=[Var(batch_max, loop_hafnian_batch.py:83), Var($const106.47, loop_hafnian_batch.py:95)])
DEBUG 2022-02-14 16:38:18,091 on stmt: $110call_method.49 = call $102load_method.45($108build_list.48, func=$102load_method.45, args=[Var($108build_list.48, loop_hafnian_batch.py:95)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:18,091 on stmt: $114build_tuple.51 = build_tuple(items=[Var($110call_method.49, loop_hafnian_batch.py:95), Var(fixed_edge_reps, loop_hafnian_batch.py:83)])
DEBUG 2022-02-14 16:38:18,091 on stmt: edge_reps = call $98load_method.43($114build_tuple.51, func=$98load_method.43, args=[Var($114build_tuple.51, loop_hafnian_batch.py:95)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:18,091 on stmt: $120load_global.53 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:38:18,091 on stmt: $122load_method.54 = getattr(value=$120load_global.53, attr=prod)
DEBUG 2022-02-14 16:38:18,091 on stmt: $const126.56 = const(int, 1)
DEBUG 2022-02-14 16:38:18,091 on stmt: $128binary_add.57 = edge_reps + $const126.56
DEBUG 2022-02-14 16:38:18,091 on stmt: steps = call $122load_method.54($128binary_add.57, func=$122load_method.54, args=[Var($128binary_add.57, loop_hafnian_batch.py:96)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:18,091 on stmt: $136load_method.60 = getattr(value=edge_reps, attr=max)
DEBUG 2022-02-14 16:38:18,091 on stmt: $138call_method.61 = call $136load_method.60(func=$136load_method.60, args=[], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:18,091 on stmt: max_binom = $138call_method.61 + even_cutoff
DEBUG 2022-02-14 16:38:18,091 on stmt: $146load_global.64 = global(precompute_binoms: CPUDispatcher(<function precompute_binoms at 0x7fa047ebe310>))
DEBUG 2022-02-14 16:38:18,091 on stmt: binoms = call $146load_global.64(max_binom, func=$146load_global.64, args=[Var(max_binom, loop_hafnian_batch.py:98)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:18,091 on stmt: $154load_global.67 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:38:18,091 on stmt: $156load_attr.68 = getattr(value=$154load_global.67, attr=zeros)
DEBUG 2022-02-14 16:38:18,091 on stmt: $const158.69 = const(int, 2)
DEBUG 2022-02-14 16:38:18,091 on stmt: $162binary_multiply.71 = $const158.69 * batch_max
DEBUG 2022-02-14 16:38:18,091 on stmt: $166binary_add.73 = $162binary_multiply.71 + even_cutoff
DEBUG 2022-02-14 16:38:18,092 on stmt: $const168.74 = const(int, 2)
DEBUG 2022-02-14 16:38:18,092 on stmt: $170binary_add.75 = $166binary_add.73 + $const168.74
DEBUG 2022-02-14 16:38:18,092 on stmt: $172load_global.76 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:38:18,092 on stmt: $174load_attr.77 = getattr(value=$172load_global.76, attr=complex128)
DEBUG 2022-02-14 16:38:18,092 on stmt: H_batch = call $156load_attr.68($170binary_add.75, func=$156load_attr.68, args=[Var($170binary_add.75, loop_hafnian_batch.py:101)], kws=[('dtype', Var($174load_attr.77, loop_hafnian_batch.py:101))], vararg=None, target=None)
DEBUG 2022-02-14 16:38:18,092 on stmt: $182load_global.80 = global(numba: <module 'numba' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numba/__init__.py'>)
DEBUG 2022-02-14 16:38:18,092 on stmt: $184load_method.81 = getattr(value=$182load_global.80, attr=prange)
DEBUG 2022-02-14 16:38:18,092 on stmt: $188call_method.83 = call $184load_method.81(steps, func=$184load_method.81, args=[Var(steps, loop_hafnian_batch.py:96)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:18,092 on stmt: $190get_iter.84 = getiter(value=$188call_method.83)
DEBUG 2022-02-14 16:38:18,092 on stmt: $phi192.0 = $190get_iter.84
DEBUG 2022-02-14 16:38:18,092 on stmt: jump 192
DEBUG 2022-02-14 16:38:18,092 ==== SSA block rewrite pass on 192
DEBUG 2022-02-14 16:38:18,092 Running <numba.core.ssa._FreshVarHandler object at 0x7fa046a325e0>
DEBUG 2022-02-14 16:38:18,092 on stmt: $192for_iter.1 = iternext(value=$phi192.0)
DEBUG 2022-02-14 16:38:18,092 on stmt: $192for_iter.2 = pair_first(value=$192for_iter.1)
DEBUG 2022-02-14 16:38:18,092 on stmt: $192for_iter.3 = pair_second(value=$192for_iter.1)
DEBUG 2022-02-14 16:38:18,092 on stmt: $phi196.1 = $192for_iter.2
DEBUG 2022-02-14 16:38:18,092 on stmt: branch $192for_iter.3, 196, 666
DEBUG 2022-02-14 16:38:18,092 ==== SSA block rewrite pass on 196
DEBUG 2022-02-14 16:38:18,092 Running <numba.core.ssa._FreshVarHandler object at 0x7fa046a325e0>
DEBUG 2022-02-14 16:38:18,092 on stmt: j = $phi196.1
DEBUG 2022-02-14 16:38:18,092 on stmt: $198load_global.2 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:38:18,092 on stmt: $200load_attr.3 = getattr(value=$198load_global.2, attr=zeros)
DEBUG 2022-02-14 16:38:18,092 on stmt: $const202.4 = const(int, 2)
DEBUG 2022-02-14 16:38:18,092 on stmt: $206binary_multiply.6 = $const202.4 * batch_max
DEBUG 2022-02-14 16:38:18,093 on stmt: $210binary_add.8 = $206binary_multiply.6 + even_cutoff
DEBUG 2022-02-14 16:38:18,093 on stmt: $const212.9 = const(int, 2)
DEBUG 2022-02-14 16:38:18,093 on stmt: $214binary_add.10 = $210binary_add.8 + $const212.9
DEBUG 2022-02-14 16:38:18,093 on stmt: $216load_global.11 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:38:18,093 on stmt: $218load_attr.12 = getattr(value=$216load_global.11, attr=complex128)
DEBUG 2022-02-14 16:38:18,093 on stmt: Hnew = call $200load_attr.3($214binary_add.10, func=$200load_attr.3, args=[Var($214binary_add.10, loop_hafnian_batch.py:104)], kws=[('dtype', Var($218load_attr.12, loop_hafnian_batch.py:104))], vararg=None, target=None)
DEBUG 2022-02-14 16:38:18,093 on stmt: $226load_global.15 = global(find_kept_edges: CPUDispatcher(<function find_kept_edges at 0x7fa047ebe790>))
DEBUG 2022-02-14 16:38:18,093 on stmt: kept_edges = call $226load_global.15(j, edge_reps, func=$226load_global.15, args=[Var(j, loop_hafnian_batch.py:102), Var(edge_reps, loop_hafnian_batch.py:95)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:18,093 on stmt: $238load_method.20 = getattr(value=kept_edges, attr=sum)
DEBUG 2022-02-14 16:38:18,093 on stmt: edges_sum = call $238load_method.20(func=$238load_method.20, args=[], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:18,093 on stmt: binom_prod = const(float, 1.0)
DEBUG 2022-02-14 16:38:18,093 first assign: binom_prod
DEBUG 2022-02-14 16:38:18,093 replaced with: binom_prod = const(float, 1.0)
DEBUG 2022-02-14 16:38:18,093 on stmt: $248load_global.23 = global(range: <class 'range'>)
DEBUG 2022-02-14 16:38:18,093 on stmt: $const250.24 = const(int, 1)
DEBUG 2022-02-14 16:38:18,093 on stmt: $const254.26 = const(int, 2)
DEBUG 2022-02-14 16:38:18,093 on stmt: $256binary_floor_divide.27 = n // $const254.26
DEBUG 2022-02-14 16:38:18,093 on stmt: $258call_function.28 = call $248load_global.23($const250.24, $256binary_floor_divide.27, func=$248load_global.23, args=[Var($const250.24, loop_hafnian_batch.py:110), Var($256binary_floor_divide.27, loop_hafnian_batch.py:110)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:18,093 on stmt: $260get_iter.29 = getiter(value=$258call_function.28)
DEBUG 2022-02-14 16:38:18,093 on stmt: $phi262.1 = $260get_iter.29
DEBUG 2022-02-14 16:38:18,093 on stmt: jump 262
DEBUG 2022-02-14 16:38:18,093 ==== SSA block rewrite pass on 262
DEBUG 2022-02-14 16:38:18,093 Running <numba.core.ssa._FreshVarHandler object at 0x7fa046a325e0>
DEBUG 2022-02-14 16:38:18,093 on stmt: $262for_iter.2 = iternext(value=$phi262.1)
DEBUG 2022-02-14 16:38:18,094 on stmt: $262for_iter.3 = pair_first(value=$262for_iter.2)
DEBUG 2022-02-14 16:38:18,094 on stmt: $262for_iter.4 = pair_second(value=$262for_iter.2)
DEBUG 2022-02-14 16:38:18,094 on stmt: $phi264.2 = $262for_iter.3
DEBUG 2022-02-14 16:38:18,094 on stmt: branch $262for_iter.4, 264, 294
DEBUG 2022-02-14 16:38:18,094 ==== SSA block rewrite pass on 264
DEBUG 2022-02-14 16:38:18,094 Running <numba.core.ssa._FreshVarHandler object at 0x7fa046a325e0>
DEBUG 2022-02-14 16:38:18,094 on stmt: i = $phi264.2
DEBUG 2022-02-14 16:38:18,094 on stmt: $274binary_subscr.7 = getitem(value=edge_reps, index=i, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:18,094 on stmt: $280binary_subscr.10 = getitem(value=kept_edges, index=i, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:18,094 on stmt: $282build_tuple.11 = build_tuple(items=[Var($274binary_subscr.7, loop_hafnian_batch.py:111), Var($280binary_subscr.10, loop_hafnian_batch.py:111)])
DEBUG 2022-02-14 16:38:18,094 on stmt: $284binary_subscr.12 = getitem(value=binoms, index=$282build_tuple.11, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:18,094 on stmt: $286inplace_multiply.13 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=binom_prod, rhs=$284binary_subscr.12, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:38:18,094 on stmt: binom_prod = $286inplace_multiply.13
DEBUG 2022-02-14 16:38:18,094 replaced with: binom_prod.1 = $286inplace_multiply.13
DEBUG 2022-02-14 16:38:18,094 on stmt: jump 262
DEBUG 2022-02-14 16:38:18,094 ==== SSA block rewrite pass on 294
DEBUG 2022-02-14 16:38:18,094 Running <numba.core.ssa._FreshVarHandler object at 0x7fa046a325e0>
DEBUG 2022-02-14 16:38:18,094 on stmt: bool296 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:38:18,094 on stmt: $296pred = call bool296(glynn, func=bool296, args=(Var(glynn, loop_hafnian_batch.py:83),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:18,094 on stmt: branch $296pred, 300, 314
DEBUG 2022-02-14 16:38:18,094 ==== SSA block rewrite pass on 300
DEBUG 2022-02-14 16:38:18,094 Running <numba.core.ssa._FreshVarHandler object at 0x7fa046a325e0>
DEBUG 2022-02-14 16:38:18,094 on stmt: $const300.1 = const(int, 2)
DEBUG 2022-02-14 16:38:18,094 on stmt: $304binary_multiply.3 = $const300.1 * kept_edges
DEBUG 2022-02-14 16:38:18,094 on stmt: delta = $304binary_multiply.3 - edge_reps
DEBUG 2022-02-14 16:38:18,094 on stmt: jump 318
DEBUG 2022-02-14 16:38:18,094 ==== SSA block rewrite pass on 314
DEBUG 2022-02-14 16:38:18,095 Running <numba.core.ssa._FreshVarHandler object at 0x7fa046a325e0>
DEBUG 2022-02-14 16:38:18,095 on stmt: delta = kept_edges
DEBUG 2022-02-14 16:38:18,095 on stmt: jump 318
DEBUG 2022-02-14 16:38:18,095 ==== SSA block rewrite pass on 318
DEBUG 2022-02-14 16:38:18,095 Running <numba.core.ssa._FreshVarHandler object at 0x7fa046a325e0>
DEBUG 2022-02-14 16:38:18,095 on stmt: $318load_global.1 = global(get_submatrices: CPUDispatcher(<function get_submatrices at 0x7fa047ebed30>))
DEBUG 2022-02-14 16:38:18,095 on stmt: $328call_function.6 = call $318load_global.1(delta, A, D, oddV, func=$318load_global.1, args=[Var(delta, loop_hafnian_batch.py:114), Var(A, loop_hafnian_batch.py:83), Var(D, loop_hafnian_batch.py:83), Var(oddV, loop_hafnian_batch.py:84)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:18,095 on stmt: $330unpack_sequence.11 = exhaust_iter(value=$328call_function.6, count=4)
DEBUG 2022-02-14 16:38:18,095 on stmt: $330unpack_sequence.7 = static_getitem(value=$330unpack_sequence.11, index=0, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:18,095 on stmt: $330unpack_sequence.8 = static_getitem(value=$330unpack_sequence.11, index=1, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:18,095 on stmt: $330unpack_sequence.9 = static_getitem(value=$330unpack_sequence.11, index=2, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:18,095 on stmt: $330unpack_sequence.10 = static_getitem(value=$330unpack_sequence.11, index=3, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:18,095 on stmt: AX_S = $330unpack_sequence.7
DEBUG 2022-02-14 16:38:18,095 on stmt: XD_S = $330unpack_sequence.8
DEBUG 2022-02-14 16:38:18,095 on stmt: D_S = $330unpack_sequence.9
DEBUG 2022-02-14 16:38:18,095 on stmt: oddVX_S = $330unpack_sequence.10
DEBUG 2022-02-14 16:38:18,095 on stmt: $340load_global.12 = global(eigvals: CPUDispatcher(<function eigvals at 0x7fa047e5d430>))
DEBUG 2022-02-14 16:38:18,095 on stmt: E = call $340load_global.12(AX_S, func=$340load_global.12, args=[Var(AX_S, loop_hafnian_batch.py:118)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:18,095 on stmt: $const350.16 = const(int, 0)
DEBUG 2022-02-14 16:38:18,095 on stmt: $352binary_subscr.17 = static_getitem(value=kept_edges, index=0, index_var=$const350.16, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:18,095 on stmt: $const354.18 = const(int, 0)
DEBUG 2022-02-14 16:38:18,095 on stmt: $356compare_op.19 = $352binary_subscr.17 == $const354.18
DEBUG 2022-02-14 16:38:18,095 on stmt: bool358 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:38:18,095 on stmt: $358pred = call bool358($356compare_op.19, func=bool358, args=(Var($356compare_op.19, loop_hafnian_batch.py:122),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:18,095 on stmt: branch $358pred, 362, 450
DEBUG 2022-02-14 16:38:18,095 ==== SSA block rewrite pass on 362
DEBUG 2022-02-14 16:38:18,095 Running <numba.core.ssa._FreshVarHandler object at 0x7fa046a325e0>
DEBUG 2022-02-14 16:38:18,096 on stmt: $const364.2 = const(int, 1)
DEBUG 2022-02-14 16:38:18,096 on stmt: $366binary_subscr.3 = static_getitem(value=kept_edges, index=1, index_var=$const364.2, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:18,096 on stmt: $const368.4 = const(int, 0)
DEBUG 2022-02-14 16:38:18,096 on stmt: $370compare_op.5 = $366binary_subscr.3 == $const368.4
DEBUG 2022-02-14 16:38:18,096 on stmt: bool372 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:38:18,096 on stmt: $372pred = call bool372($370compare_op.5, func=bool372, args=(Var($370compare_op.5, loop_hafnian_batch.py:122),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:18,096 on stmt: branch $372pred, 376, 450
DEBUG 2022-02-14 16:38:18,096 ==== SSA block rewrite pass on 376
DEBUG 2022-02-14 16:38:18,096 Running <numba.core.ssa._FreshVarHandler object at 0x7fa046a325e0>
DEBUG 2022-02-14 16:38:18,096 on stmt: $376load_global.1 = global(get_submatrix_batch_odd0: CPUDispatcher(<function get_submatrix_batch_odd0 at 0x7fa047ebef70>))
DEBUG 2022-02-14 16:38:18,096 on stmt: oddVX_S0 = call $376load_global.1(delta, oddV0, func=$376load_global.1, args=[Var(delta, loop_hafnian_batch.py:114), Var(oddV0, loop_hafnian_batch.py:89)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:18,096 on stmt: $const386.5 = const(int, -1)
DEBUG 2022-02-14 16:38:18,096 on stmt: $const390.7 = const(int, 2)
DEBUG 2022-02-14 16:38:18,096 on stmt: $392binary_floor_divide.8 = N_fixed // $const390.7
DEBUG 2022-02-14 16:38:18,096 on stmt: $396binary_subtract.10 = $392binary_floor_divide.8 - edges_sum
DEBUG 2022-02-14 16:38:18,096 on stmt: plus_minus = $const386.5 ** $396binary_subtract.10
DEBUG 2022-02-14 16:38:18,096 on stmt: $402load_global.12 = global(f_loop_odd: CPUDispatcher(<function f_loop_odd at 0x7fa047ebeb80>))
DEBUG 2022-02-14 16:38:18,096 on stmt: $418call_function.20 = call $402load_global.12(E, AX_S, XD_S, D_S, N_fixed, oddloop0, oddVX_S0, func=$402load_global.12, args=[Var(E, loop_hafnian_batch.py:120), Var(AX_S, loop_hafnian_batch.py:118), Var(XD_S, loop_hafnian_batch.py:118), Var(D_S, loop_hafnian_batch.py:118), Var(N_fixed, loop_hafnian_batch.py:92), Var(oddloop0, loop_hafnian_batch.py:88), Var(oddVX_S0, loop_hafnian_batch.py:123)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:18,096 on stmt: f = getitem(value=$418call_function.20, index=N_fixed, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:18,096 on stmt: $const428.24 = const(int, 0)
DEBUG 2022-02-14 16:38:18,096 on stmt: $432binary_subscr.27 = static_getitem(value=H_batch, index=0, index_var=$const428.24, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:18,096 on stmt: $438binary_multiply.30 = binom_prod * plus_minus
DEBUG 2022-02-14 16:38:18,096 on stmt: $442binary_multiply.32 = $438binary_multiply.30 * f
DEBUG 2022-02-14 16:38:18,096 on stmt: $444inplace_add.33 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$432binary_subscr.27, rhs=$442binary_multiply.32, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:38:18,096 on stmt: H_batch[0] = $444inplace_add.33
DEBUG 2022-02-14 16:38:18,097 on stmt: jump 450
DEBUG 2022-02-14 16:38:18,097 ==== SSA block rewrite pass on 450
DEBUG 2022-02-14 16:38:18,097 Running <numba.core.ssa._FreshVarHandler object at 0x7fa046a325e0>
DEBUG 2022-02-14 16:38:18,097 on stmt: $450load_global.1 = global(f_loop: CPUDispatcher(<function f_loop at 0x7fa047ebe9d0>))
DEBUG 2022-02-14 16:38:18,097 on stmt: f_even = call $450load_global.1(E, AX_S, XD_S, D_S, N_max, func=$450load_global.1, args=[Var(E, loop_hafnian_batch.py:120), Var(AX_S, loop_hafnian_batch.py:118), Var(XD_S, loop_hafnian_batch.py:118), Var(D_S, loop_hafnian_batch.py:118), Var(N_max, loop_hafnian_batch.py:93)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:18,097 on stmt: $466load_global.8 = global(f_loop_odd: CPUDispatcher(<function f_loop_odd at 0x7fa047ebeb80>))
DEBUG 2022-02-14 16:38:18,097 on stmt: f_odd = call $466load_global.8(E, AX_S, XD_S, D_S, N_max, oddloop, oddVX_S, func=$466load_global.8, args=[Var(E, loop_hafnian_batch.py:120), Var(AX_S, loop_hafnian_batch.py:118), Var(XD_S, loop_hafnian_batch.py:118), Var(D_S, loop_hafnian_batch.py:118), Var(N_max, loop_hafnian_batch.py:93), Var(oddloop, loop_hafnian_batch.py:83), Var(oddVX_S, loop_hafnian_batch.py:118)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:18,097 on stmt: $486load_global.17 = global(range: <class 'range'>)
DEBUG 2022-02-14 16:38:18,097 on stmt: $const488.18 = const(int, 2)
DEBUG 2022-02-14 16:38:18,097 on stmt: $const492.20 = const(int, 0)
DEBUG 2022-02-14 16:38:18,097 on stmt: $494binary_subscr.21 = static_getitem(value=kept_edges, index=0, index_var=$const492.20, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:18,097 on stmt: $496binary_multiply.22 = $const488.18 * $494binary_subscr.21
DEBUG 2022-02-14 16:38:18,097 on stmt: $const498.23 = const(int, 1)
DEBUG 2022-02-14 16:38:18,097 on stmt: $500binary_add.24 = $496binary_multiply.22 + $const498.23
DEBUG 2022-02-14 16:38:18,097 on stmt: $const502.25 = const(int, 2)
DEBUG 2022-02-14 16:38:18,097 on stmt: $506binary_multiply.27 = $const502.25 * batch_max
DEBUG 2022-02-14 16:38:18,097 on stmt: $510binary_add.29 = $506binary_multiply.27 + even_cutoff
DEBUG 2022-02-14 16:38:18,097 on stmt: $const512.30 = const(int, 2)
DEBUG 2022-02-14 16:38:18,097 on stmt: $514binary_add.31 = $510binary_add.29 + $const512.30
DEBUG 2022-02-14 16:38:18,097 on stmt: $516call_function.32 = call $486load_global.17($500binary_add.24, $514binary_add.31, func=$486load_global.17, args=[Var($500binary_add.24, loop_hafnian_batch.py:131), Var($514binary_add.31, loop_hafnian_batch.py:131)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:18,097 on stmt: $518get_iter.33 = getiter(value=$516call_function.32)
DEBUG 2022-02-14 16:38:18,097 on stmt: $phi520.1 = $518get_iter.33
DEBUG 2022-02-14 16:38:18,097 on stmt: jump 520
DEBUG 2022-02-14 16:38:18,097 ==== SSA block rewrite pass on 520
DEBUG 2022-02-14 16:38:18,097 Running <numba.core.ssa._FreshVarHandler object at 0x7fa046a325e0>
DEBUG 2022-02-14 16:38:18,097 on stmt: $520for_iter.2 = iternext(value=$phi520.1)
DEBUG 2022-02-14 16:38:18,098 on stmt: $520for_iter.3 = pair_first(value=$520for_iter.2)
DEBUG 2022-02-14 16:38:18,098 on stmt: $520for_iter.4 = pair_second(value=$520for_iter.2)
DEBUG 2022-02-14 16:38:18,098 on stmt: $phi522.2 = $520for_iter.3
DEBUG 2022-02-14 16:38:18,098 on stmt: branch $520for_iter.4, 522, 656
DEBUG 2022-02-14 16:38:18,098 ==== SSA block rewrite pass on 522
DEBUG 2022-02-14 16:38:18,098 Running <numba.core.ssa._FreshVarHandler object at 0x7fa046a325e0>
DEBUG 2022-02-14 16:38:18,098 on stmt: N_det = $phi522.2
DEBUG 2022-02-14 16:38:18,098 on stmt: N = N_fixed + N_det
DEBUG 2022-02-14 16:38:18,098 on stmt: $const532.6 = const(int, -1)
DEBUG 2022-02-14 16:38:18,098 on stmt: $const536.8 = const(int, 2)
DEBUG 2022-02-14 16:38:18,098 on stmt: $538binary_floor_divide.9 = N // $const536.8
DEBUG 2022-02-14 16:38:18,098 on stmt: $542binary_subtract.11 = $538binary_floor_divide.9 - edges_sum
DEBUG 2022-02-14 16:38:18,098 on stmt: plus_minus = $const532.6 ** $542binary_subtract.11
DEBUG 2022-02-14 16:38:18,098 on stmt: $const552.15 = const(int, 1)
DEBUG 2022-02-14 16:38:18,098 on stmt: $554binary_subtract.16 = N_det - $const552.15
DEBUG 2022-02-14 16:38:18,098 on stmt: $const556.17 = const(int, 2)
DEBUG 2022-02-14 16:38:18,098 on stmt: $558binary_floor_divide.18 = $554binary_subtract.16 // $const556.17
DEBUG 2022-02-14 16:38:18,098 on stmt: $const562.20 = const(int, 0)
DEBUG 2022-02-14 16:38:18,098 on stmt: $564binary_subscr.21 = static_getitem(value=kept_edges, index=0, index_var=$const562.20, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:18,098 on stmt: $566build_tuple.22 = build_tuple(items=[Var($558binary_floor_divide.18, loop_hafnian_batch.py:135), Var($564binary_subscr.21, loop_hafnian_batch.py:135)])
DEBUG 2022-02-14 16:38:18,098 on stmt: $568binary_subscr.23 = getitem(value=binoms, index=$566build_tuple.22, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:18,098 on stmt: n_det_binom_prod = $568binary_subscr.23 * binom_prod
DEBUG 2022-02-14 16:38:18,098 on stmt: $const578.27 = const(int, 2)
DEBUG 2022-02-14 16:38:18,098 on stmt: $580binary_modulo.28 = N % $const578.27
DEBUG 2022-02-14 16:38:18,098 on stmt: $const582.29 = const(int, 0)
DEBUG 2022-02-14 16:38:18,098 on stmt: $584compare_op.30 = $580binary_modulo.28 == $const582.29
DEBUG 2022-02-14 16:38:18,098 on stmt: bool586 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:38:18,099 on stmt: $586pred = call bool586($584compare_op.30, func=bool586, args=(Var($584compare_op.30, loop_hafnian_batch.py:137),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:18,099 on stmt: branch $586pred, 590, 624
DEBUG 2022-02-14 16:38:18,099 ==== SSA block rewrite pass on 590
DEBUG 2022-02-14 16:38:18,099 Running <numba.core.ssa._FreshVarHandler object at 0x7fa046a325e0>
DEBUG 2022-02-14 16:38:18,099 on stmt: $596binary_subscr.6 = getitem(value=Hnew, index=N_det, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:18,099 on stmt: $602binary_multiply.9 = n_det_binom_prod * plus_minus
DEBUG 2022-02-14 16:38:18,099 on stmt: $const608.12 = const(int, 2)
DEBUG 2022-02-14 16:38:18,099 on stmt: $610binary_floor_divide.13 = N // $const608.12
DEBUG 2022-02-14 16:38:18,099 on stmt: $612binary_subscr.14 = getitem(value=f_even, index=$610binary_floor_divide.13, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:18,099 on stmt: $614binary_multiply.15 = $602binary_multiply.9 * $612binary_subscr.14
DEBUG 2022-02-14 16:38:18,099 on stmt: $616inplace_add.16 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$596binary_subscr.6, rhs=$614binary_multiply.15, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:38:18,099 on stmt: Hnew[N_det] = $616inplace_add.16
DEBUG 2022-02-14 16:38:18,099 on stmt: jump 652
DEBUG 2022-02-14 16:38:18,099 ==== SSA block rewrite pass on 624
DEBUG 2022-02-14 16:38:18,099 Running <numba.core.ssa._FreshVarHandler object at 0x7fa046a325e0>
DEBUG 2022-02-14 16:38:18,099 on stmt: $630binary_subscr.6 = getitem(value=Hnew, index=N_det, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:18,099 on stmt: $636binary_multiply.9 = n_det_binom_prod * plus_minus
DEBUG 2022-02-14 16:38:18,099 on stmt: $642binary_subscr.12 = getitem(value=f_odd, index=N, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:18,099 on stmt: $644binary_multiply.13 = $636binary_multiply.9 * $642binary_subscr.12
DEBUG 2022-02-14 16:38:18,099 on stmt: $646inplace_add.14 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$630binary_subscr.6, rhs=$644binary_multiply.13, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:38:18,099 on stmt: Hnew[N_det] = $646inplace_add.14
DEBUG 2022-02-14 16:38:18,099 on stmt: jump 652
DEBUG 2022-02-14 16:38:18,099 ==== SSA block rewrite pass on 652
DEBUG 2022-02-14 16:38:18,099 Running <numba.core.ssa._FreshVarHandler object at 0x7fa046a325e0>
DEBUG 2022-02-14 16:38:18,099 on stmt: jump 520
DEBUG 2022-02-14 16:38:18,099 ==== SSA block rewrite pass on 656
DEBUG 2022-02-14 16:38:18,099 Running <numba.core.ssa._FreshVarHandler object at 0x7fa046a325e0>
DEBUG 2022-02-14 16:38:18,099 on stmt: $660inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=H_batch, rhs=Hnew, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:38:18,100 on stmt: H_batch = $660inplace_add.3
DEBUG 2022-02-14 16:38:18,100 on stmt: jump 192
DEBUG 2022-02-14 16:38:18,100 ==== SSA block rewrite pass on 666
DEBUG 2022-02-14 16:38:18,100 Running <numba.core.ssa._FreshVarHandler object at 0x7fa046a325e0>
DEBUG 2022-02-14 16:38:18,100 on stmt: bool668 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:38:18,100 on stmt: $668pred = call bool668(glynn, func=bool668, args=(Var(glynn, loop_hafnian_batch.py:83),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:18,100 on stmt: branch $668pred, 672, 726
DEBUG 2022-02-14 16:38:18,100 ==== SSA block rewrite pass on 672
DEBUG 2022-02-14 16:38:18,100 Running <numba.core.ssa._FreshVarHandler object at 0x7fa046a325e0>
DEBUG 2022-02-14 16:38:18,100 on stmt: $672load_global.0 = global(range: <class 'range'>)
DEBUG 2022-02-14 16:38:18,100 on stmt: $676load_attr.2 = getattr(value=H_batch, attr=shape)
DEBUG 2022-02-14 16:38:18,100 on stmt: $const678.3 = const(int, 0)
DEBUG 2022-02-14 16:38:18,100 on stmt: $680binary_subscr.4 = static_getitem(value=$676load_attr.2, index=0, index_var=$const678.3, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:18,100 on stmt: $682call_function.5 = call $672load_global.0($680binary_subscr.4, func=$672load_global.0, args=[Var($680binary_subscr.4, loop_hafnian_batch.py:145)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:18,100 on stmt: $684get_iter.6 = getiter(value=$682call_function.5)
DEBUG 2022-02-14 16:38:18,100 on stmt: $phi686.0 = $684get_iter.6
DEBUG 2022-02-14 16:38:18,100 on stmt: jump 686
DEBUG 2022-02-14 16:38:18,100 ==== SSA block rewrite pass on 686
DEBUG 2022-02-14 16:38:18,100 Running <numba.core.ssa._FreshVarHandler object at 0x7fa046a325e0>
DEBUG 2022-02-14 16:38:18,100 on stmt: $686for_iter.1 = iternext(value=$phi686.0)
DEBUG 2022-02-14 16:38:18,100 on stmt: $686for_iter.2 = pair_first(value=$686for_iter.1)
DEBUG 2022-02-14 16:38:18,100 on stmt: $686for_iter.3 = pair_second(value=$686for_iter.1)
DEBUG 2022-02-14 16:38:18,100 on stmt: $phi688.1 = $686for_iter.2
DEBUG 2022-02-14 16:38:18,100 on stmt: branch $686for_iter.3, 688, 726
DEBUG 2022-02-14 16:38:18,100 ==== SSA block rewrite pass on 688
DEBUG 2022-02-14 16:38:18,100 Running <numba.core.ssa._FreshVarHandler object at 0x7fa046a325e0>
DEBUG 2022-02-14 16:38:18,100 on stmt: j.1 = $phi688.1
DEBUG 2022-02-14 16:38:18,101 on stmt: x = N_fixed + j.1
DEBUG 2022-02-14 16:38:18,101 on stmt: $704binary_subscr.9 = getitem(value=H_batch, index=j.1, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:18,101 on stmt: $const706.10 = const(float, 0.5)
DEBUG 2022-02-14 16:38:18,101 on stmt: $const710.12 = const(int, 2)
DEBUG 2022-02-14 16:38:18,101 on stmt: $712binary_floor_divide.13 = x // $const710.12
DEBUG 2022-02-14 16:38:18,101 on stmt: $714binary_power.14 = $const706.10 ** $712binary_floor_divide.13
DEBUG 2022-02-14 16:38:18,101 on stmt: $716inplace_multiply.15 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=$704binary_subscr.9, rhs=$714binary_power.14, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:38:18,101 on stmt: H_batch[j.1] = $716inplace_multiply.15
DEBUG 2022-02-14 16:38:18,101 on stmt: jump 686
DEBUG 2022-02-14 16:38:18,101 ==== SSA block rewrite pass on 726
DEBUG 2022-02-14 16:38:18,101 Running <numba.core.ssa._FreshVarHandler object at 0x7fa046a325e0>
DEBUG 2022-02-14 16:38:18,101 on stmt: $728return_value.1 = cast(value=H_batch)
DEBUG 2022-02-14 16:38:18,101 on stmt: return $728return_value.1
DEBUG 2022-02-14 16:38:18,101 Replaced assignments: defaultdict(<class 'list'>,
            {196: [<numba.core.ir.Assign object at 0x7fa041ed4bb0>],
             264: [<numba.core.ir.Assign object at 0x7fa041ed4910>]})
DEBUG 2022-02-14 16:38:18,101 ==== SSA block rewrite pass on 0
DEBUG 2022-02-14 16:38:18,101 Running <numba.core.ssa._FixSSAVars object at 0x7fa041ed4a30>
DEBUG 2022-02-14 16:38:18,101 on stmt: A = arg(0, name=A)
DEBUG 2022-02-14 16:38:18,101 on stmt: D = arg(1, name=D)
DEBUG 2022-02-14 16:38:18,101 on stmt: fixed_edge_reps = arg(2, name=fixed_edge_reps)
DEBUG 2022-02-14 16:38:18,101 on stmt: batch_max = arg(3, name=batch_max)
DEBUG 2022-02-14 16:38:18,101 on stmt: even_cutoff = arg(4, name=even_cutoff)
DEBUG 2022-02-14 16:38:18,101 on stmt: oddmode = arg(5, name=oddmode)
DEBUG 2022-02-14 16:38:18,101 on stmt: glynn = arg(6, name=glynn)
DEBUG 2022-02-14 16:38:18,101 on stmt: $const4.1 = const(int, 0)
DEBUG 2022-02-14 16:38:18,101 on stmt: oddloop = static_getitem(value=D, index=0, index_var=$const4.1, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:18,102 on stmt: $const12.4 = const(int, 0)
DEBUG 2022-02-14 16:38:18,102 on stmt: $const14.5 = const(NoneType, None)
DEBUG 2022-02-14 16:38:18,102 on stmt: $const16.6 = const(NoneType, None)
DEBUG 2022-02-14 16:38:18,102 on stmt: $18build_slice.7 = global(slice: <class 'slice'>)
DEBUG 2022-02-14 16:38:18,102 on stmt: $18build_slice.8 = call $18build_slice.7($const14.5, $const16.6, func=$18build_slice.7, args=(Var($const14.5, loop_hafnian_batch.py:84), Var($const16.6, loop_hafnian_batch.py:84)), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:18,102 on stmt: $20build_tuple.9 = build_tuple(items=[Var($const12.4, loop_hafnian_batch.py:84), Var($18build_slice.8, loop_hafnian_batch.py:84)])
DEBUG 2022-02-14 16:38:18,102 on stmt: oddV = static_getitem(value=A, index=(0, slice(None, None, None)), index_var=$20build_tuple.9, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:18,102 on stmt: $const28.12 = const(int, 1)
DEBUG 2022-02-14 16:38:18,102 on stmt: oddloop0 = static_getitem(value=D, index=1, index_var=$const28.12, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:18,102 on stmt: $const36.15 = const(int, 1)
DEBUG 2022-02-14 16:38:18,102 on stmt: $const38.16 = const(NoneType, None)
DEBUG 2022-02-14 16:38:18,102 on stmt: $const40.17 = const(NoneType, None)
DEBUG 2022-02-14 16:38:18,102 on stmt: $42build_slice.18 = global(slice: <class 'slice'>)
DEBUG 2022-02-14 16:38:18,102 on stmt: $42build_slice.19 = call $42build_slice.18($const38.16, $const40.17, func=$42build_slice.18, args=(Var($const38.16, loop_hafnian_batch.py:89), Var($const40.17, loop_hafnian_batch.py:89)), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:18,102 on stmt: $44build_tuple.20 = build_tuple(items=[Var($const36.15, loop_hafnian_batch.py:89), Var($42build_slice.19, loop_hafnian_batch.py:89)])
DEBUG 2022-02-14 16:38:18,102 on stmt: oddV0 = static_getitem(value=A, index=(1, slice(None, None, None)), index_var=$44build_tuple.20, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:18,102 on stmt: $52load_attr.23 = getattr(value=A, attr=shape)
DEBUG 2022-02-14 16:38:18,102 on stmt: $const54.24 = const(int, 0)
DEBUG 2022-02-14 16:38:18,102 on stmt: n = static_getitem(value=$52load_attr.23, index=0, index_var=$const54.24, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:18,102 on stmt: $const60.26 = const(int, 2)
DEBUG 2022-02-14 16:38:18,102 on stmt: $64load_method.28 = getattr(value=fixed_edge_reps, attr=sum)
DEBUG 2022-02-14 16:38:18,102 on stmt: $66call_method.29 = call $64load_method.28(func=$64load_method.28, args=[], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:18,103 on stmt: $68binary_multiply.30 = $const60.26 * $66call_method.29
DEBUG 2022-02-14 16:38:18,103 on stmt: $const70.31 = const(int, 1)
DEBUG 2022-02-14 16:38:18,103 on stmt: N_fixed = $68binary_multiply.30 + $const70.31
DEBUG 2022-02-14 16:38:18,103 on stmt: $const78.34 = const(int, 2)
DEBUG 2022-02-14 16:38:18,103 on stmt: $82binary_multiply.36 = $const78.34 * batch_max
DEBUG 2022-02-14 16:38:18,103 on stmt: $84binary_add.37 = N_fixed + $82binary_multiply.36
DEBUG 2022-02-14 16:38:18,103 on stmt: $88binary_add.39 = $84binary_add.37 + even_cutoff
DEBUG 2022-02-14 16:38:18,103 on stmt: $const90.40 = const(int, 1)
DEBUG 2022-02-14 16:38:18,103 on stmt: N_max = $88binary_add.39 + $const90.40
DEBUG 2022-02-14 16:38:18,103 on stmt: $96load_global.42 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:38:18,103 on stmt: $98load_method.43 = getattr(value=$96load_global.42, attr=concatenate)
DEBUG 2022-02-14 16:38:18,103 on stmt: $100load_global.44 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:38:18,103 on stmt: $102load_method.45 = getattr(value=$100load_global.44, attr=array)
DEBUG 2022-02-14 16:38:18,103 on stmt: $const106.47 = const(int, 1)
DEBUG 2022-02-14 16:38:18,103 on stmt: $108build_list.48 = build_list(items=[Var(batch_max, loop_hafnian_batch.py:83), Var($const106.47, loop_hafnian_batch.py:95)])
DEBUG 2022-02-14 16:38:18,103 on stmt: $110call_method.49 = call $102load_method.45($108build_list.48, func=$102load_method.45, args=[Var($108build_list.48, loop_hafnian_batch.py:95)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:18,103 on stmt: $114build_tuple.51 = build_tuple(items=[Var($110call_method.49, loop_hafnian_batch.py:95), Var(fixed_edge_reps, loop_hafnian_batch.py:83)])
DEBUG 2022-02-14 16:38:18,103 on stmt: edge_reps = call $98load_method.43($114build_tuple.51, func=$98load_method.43, args=[Var($114build_tuple.51, loop_hafnian_batch.py:95)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:18,103 on stmt: $120load_global.53 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:38:18,103 on stmt: $122load_method.54 = getattr(value=$120load_global.53, attr=prod)
DEBUG 2022-02-14 16:38:18,103 on stmt: $const126.56 = const(int, 1)
DEBUG 2022-02-14 16:38:18,103 on stmt: $128binary_add.57 = edge_reps + $const126.56
DEBUG 2022-02-14 16:38:18,103 on stmt: steps = call $122load_method.54($128binary_add.57, func=$122load_method.54, args=[Var($128binary_add.57, loop_hafnian_batch.py:96)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:18,104 on stmt: $136load_method.60 = getattr(value=edge_reps, attr=max)
DEBUG 2022-02-14 16:38:18,104 on stmt: $138call_method.61 = call $136load_method.60(func=$136load_method.60, args=[], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:18,104 on stmt: max_binom = $138call_method.61 + even_cutoff
DEBUG 2022-02-14 16:38:18,104 on stmt: $146load_global.64 = global(precompute_binoms: CPUDispatcher(<function precompute_binoms at 0x7fa047ebe310>))
DEBUG 2022-02-14 16:38:18,104 on stmt: binoms = call $146load_global.64(max_binom, func=$146load_global.64, args=[Var(max_binom, loop_hafnian_batch.py:98)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:18,104 on stmt: $154load_global.67 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:38:18,104 on stmt: $156load_attr.68 = getattr(value=$154load_global.67, attr=zeros)
DEBUG 2022-02-14 16:38:18,104 on stmt: $const158.69 = const(int, 2)
DEBUG 2022-02-14 16:38:18,104 on stmt: $162binary_multiply.71 = $const158.69 * batch_max
DEBUG 2022-02-14 16:38:18,104 on stmt: $166binary_add.73 = $162binary_multiply.71 + even_cutoff
DEBUG 2022-02-14 16:38:18,104 on stmt: $const168.74 = const(int, 2)
DEBUG 2022-02-14 16:38:18,104 on stmt: $170binary_add.75 = $166binary_add.73 + $const168.74
DEBUG 2022-02-14 16:38:18,104 on stmt: $172load_global.76 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:38:18,104 on stmt: $174load_attr.77 = getattr(value=$172load_global.76, attr=complex128)
DEBUG 2022-02-14 16:38:18,104 on stmt: H_batch = call $156load_attr.68($170binary_add.75, func=$156load_attr.68, args=[Var($170binary_add.75, loop_hafnian_batch.py:101)], kws=[('dtype', Var($174load_attr.77, loop_hafnian_batch.py:101))], vararg=None, target=None)
DEBUG 2022-02-14 16:38:18,104 on stmt: $182load_global.80 = global(numba: <module 'numba' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numba/__init__.py'>)
DEBUG 2022-02-14 16:38:18,104 on stmt: $184load_method.81 = getattr(value=$182load_global.80, attr=prange)
DEBUG 2022-02-14 16:38:18,104 on stmt: $188call_method.83 = call $184load_method.81(steps, func=$184load_method.81, args=[Var(steps, loop_hafnian_batch.py:96)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:18,104 on stmt: $190get_iter.84 = getiter(value=$188call_method.83)
DEBUG 2022-02-14 16:38:18,104 on stmt: $phi192.0 = $190get_iter.84
DEBUG 2022-02-14 16:38:18,104 on stmt: jump 192
DEBUG 2022-02-14 16:38:18,104 ==== SSA block rewrite pass on 192
DEBUG 2022-02-14 16:38:18,105 Running <numba.core.ssa._FixSSAVars object at 0x7fa041ed4a30>
DEBUG 2022-02-14 16:38:18,105 on stmt: $192for_iter.1 = iternext(value=$phi192.0)
DEBUG 2022-02-14 16:38:18,105 on stmt: $192for_iter.2 = pair_first(value=$192for_iter.1)
DEBUG 2022-02-14 16:38:18,105 on stmt: $192for_iter.3 = pair_second(value=$192for_iter.1)
DEBUG 2022-02-14 16:38:18,105 on stmt: $phi196.1 = $192for_iter.2
DEBUG 2022-02-14 16:38:18,105 on stmt: branch $192for_iter.3, 196, 666
DEBUG 2022-02-14 16:38:18,105 ==== SSA block rewrite pass on 196
DEBUG 2022-02-14 16:38:18,105 Running <numba.core.ssa._FixSSAVars object at 0x7fa041ed4a30>
DEBUG 2022-02-14 16:38:18,105 on stmt: j = $phi196.1
DEBUG 2022-02-14 16:38:18,105 on stmt: $198load_global.2 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:38:18,105 on stmt: $200load_attr.3 = getattr(value=$198load_global.2, attr=zeros)
DEBUG 2022-02-14 16:38:18,105 on stmt: $const202.4 = const(int, 2)
DEBUG 2022-02-14 16:38:18,105 on stmt: $206binary_multiply.6 = $const202.4 * batch_max
DEBUG 2022-02-14 16:38:18,105 on stmt: $210binary_add.8 = $206binary_multiply.6 + even_cutoff
DEBUG 2022-02-14 16:38:18,105 on stmt: $const212.9 = const(int, 2)
DEBUG 2022-02-14 16:38:18,105 on stmt: $214binary_add.10 = $210binary_add.8 + $const212.9
DEBUG 2022-02-14 16:38:18,105 on stmt: $216load_global.11 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:38:18,105 on stmt: $218load_attr.12 = getattr(value=$216load_global.11, attr=complex128)
DEBUG 2022-02-14 16:38:18,105 on stmt: Hnew = call $200load_attr.3($214binary_add.10, func=$200load_attr.3, args=[Var($214binary_add.10, loop_hafnian_batch.py:104)], kws=[('dtype', Var($218load_attr.12, loop_hafnian_batch.py:104))], vararg=None, target=None)
DEBUG 2022-02-14 16:38:18,105 on stmt: $226load_global.15 = global(find_kept_edges: CPUDispatcher(<function find_kept_edges at 0x7fa047ebe790>))
DEBUG 2022-02-14 16:38:18,105 on stmt: kept_edges = call $226load_global.15(j, edge_reps, func=$226load_global.15, args=[Var(j, loop_hafnian_batch.py:102), Var(edge_reps, loop_hafnian_batch.py:95)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:18,105 on stmt: $238load_method.20 = getattr(value=kept_edges, attr=sum)
DEBUG 2022-02-14 16:38:18,105 on stmt: edges_sum = call $238load_method.20(func=$238load_method.20, args=[], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:18,105 on stmt: binom_prod = const(float, 1.0)
DEBUG 2022-02-14 16:38:18,106 on stmt: $248load_global.23 = global(range: <class 'range'>)
DEBUG 2022-02-14 16:38:18,106 on stmt: $const250.24 = const(int, 1)
DEBUG 2022-02-14 16:38:18,106 on stmt: $const254.26 = const(int, 2)
DEBUG 2022-02-14 16:38:18,106 on stmt: $256binary_floor_divide.27 = n // $const254.26
DEBUG 2022-02-14 16:38:18,106 on stmt: $258call_function.28 = call $248load_global.23($const250.24, $256binary_floor_divide.27, func=$248load_global.23, args=[Var($const250.24, loop_hafnian_batch.py:110), Var($256binary_floor_divide.27, loop_hafnian_batch.py:110)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:18,106 on stmt: $260get_iter.29 = getiter(value=$258call_function.28)
DEBUG 2022-02-14 16:38:18,106 on stmt: $phi262.1 = $260get_iter.29
DEBUG 2022-02-14 16:38:18,106 on stmt: jump 262
DEBUG 2022-02-14 16:38:18,106 ==== SSA block rewrite pass on 262
DEBUG 2022-02-14 16:38:18,106 Running <numba.core.ssa._FixSSAVars object at 0x7fa041ed4a30>
DEBUG 2022-02-14 16:38:18,106 on stmt: $262for_iter.2 = iternext(value=$phi262.1)
DEBUG 2022-02-14 16:38:18,106 on stmt: $262for_iter.3 = pair_first(value=$262for_iter.2)
DEBUG 2022-02-14 16:38:18,106 on stmt: $262for_iter.4 = pair_second(value=$262for_iter.2)
DEBUG 2022-02-14 16:38:18,106 on stmt: $phi264.2 = $262for_iter.3
DEBUG 2022-02-14 16:38:18,106 on stmt: branch $262for_iter.4, 264, 294
DEBUG 2022-02-14 16:38:18,106 ==== SSA block rewrite pass on 264
DEBUG 2022-02-14 16:38:18,106 Running <numba.core.ssa._FixSSAVars object at 0x7fa041ed4a30>
DEBUG 2022-02-14 16:38:18,106 on stmt: i = $phi264.2
DEBUG 2022-02-14 16:38:18,106 on stmt: $274binary_subscr.7 = getitem(value=edge_reps, index=i, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:18,106 on stmt: $280binary_subscr.10 = getitem(value=kept_edges, index=i, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:18,106 on stmt: $282build_tuple.11 = build_tuple(items=[Var($274binary_subscr.7, loop_hafnian_batch.py:111), Var($280binary_subscr.10, loop_hafnian_batch.py:111)])
DEBUG 2022-02-14 16:38:18,106 on stmt: $284binary_subscr.12 = getitem(value=binoms, index=$282build_tuple.11, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:18,106 on stmt: $286inplace_multiply.13 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=binom_prod, rhs=$284binary_subscr.12, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:38:18,106 find_def var='binom_prod' stmt=$286inplace_multiply.13 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=binom_prod, rhs=$284binary_subscr.12, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:38:18,106 find_def_from_top label 264
DEBUG 2022-02-14 16:38:18,107 idom 262 from label 264
DEBUG 2022-02-14 16:38:18,107 find_def_from_bottom label 262
DEBUG 2022-02-14 16:38:18,107 find_def_from_top label 262
DEBUG 2022-02-14 16:38:18,107 insert phi node binom_prod.2 = phi(incoming_values=[], incoming_blocks=[]) at 262
DEBUG 2022-02-14 16:38:18,107 find_def_from_bottom label 264
DEBUG 2022-02-14 16:38:18,107 incoming_def binom_prod.1 = $286inplace_multiply.13
DEBUG 2022-02-14 16:38:18,107 find_def_from_bottom label 196
DEBUG 2022-02-14 16:38:18,107 incoming_def binom_prod = const(float, 1.0)
DEBUG 2022-02-14 16:38:18,107 replaced with: $286inplace_multiply.13 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=binom_prod.2, rhs=$284binary_subscr.12, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:38:18,107 on stmt: binom_prod.1 = $286inplace_multiply.13
DEBUG 2022-02-14 16:38:18,107 on stmt: jump 262
DEBUG 2022-02-14 16:38:18,107 ==== SSA block rewrite pass on 294
DEBUG 2022-02-14 16:38:18,107 Running <numba.core.ssa._FixSSAVars object at 0x7fa041ed4a30>
DEBUG 2022-02-14 16:38:18,107 on stmt: bool296 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:38:18,107 on stmt: $296pred = call bool296(glynn, func=bool296, args=(Var(glynn, loop_hafnian_batch.py:83),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:18,107 on stmt: branch $296pred, 300, 314
DEBUG 2022-02-14 16:38:18,107 ==== SSA block rewrite pass on 300
DEBUG 2022-02-14 16:38:18,107 Running <numba.core.ssa._FixSSAVars object at 0x7fa041ed4a30>
DEBUG 2022-02-14 16:38:18,107 on stmt: $const300.1 = const(int, 2)
DEBUG 2022-02-14 16:38:18,107 on stmt: $304binary_multiply.3 = $const300.1 * kept_edges
DEBUG 2022-02-14 16:38:18,107 on stmt: delta = $304binary_multiply.3 - edge_reps
DEBUG 2022-02-14 16:38:18,107 on stmt: jump 318
DEBUG 2022-02-14 16:38:18,107 ==== SSA block rewrite pass on 314
DEBUG 2022-02-14 16:38:18,107 Running <numba.core.ssa._FixSSAVars object at 0x7fa041ed4a30>
DEBUG 2022-02-14 16:38:18,107 on stmt: delta = kept_edges
DEBUG 2022-02-14 16:38:18,108 on stmt: jump 318
DEBUG 2022-02-14 16:38:18,108 ==== SSA block rewrite pass on 318
DEBUG 2022-02-14 16:38:18,108 Running <numba.core.ssa._FixSSAVars object at 0x7fa041ed4a30>
DEBUG 2022-02-14 16:38:18,108 on stmt: $318load_global.1 = global(get_submatrices: CPUDispatcher(<function get_submatrices at 0x7fa047ebed30>))
DEBUG 2022-02-14 16:38:18,108 on stmt: $328call_function.6 = call $318load_global.1(delta, A, D, oddV, func=$318load_global.1, args=[Var(delta, loop_hafnian_batch.py:114), Var(A, loop_hafnian_batch.py:83), Var(D, loop_hafnian_batch.py:83), Var(oddV, loop_hafnian_batch.py:84)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:18,108 on stmt: $330unpack_sequence.11 = exhaust_iter(value=$328call_function.6, count=4)
DEBUG 2022-02-14 16:38:18,108 on stmt: $330unpack_sequence.7 = static_getitem(value=$330unpack_sequence.11, index=0, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:18,108 on stmt: $330unpack_sequence.8 = static_getitem(value=$330unpack_sequence.11, index=1, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:18,108 on stmt: $330unpack_sequence.9 = static_getitem(value=$330unpack_sequence.11, index=2, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:18,108 on stmt: $330unpack_sequence.10 = static_getitem(value=$330unpack_sequence.11, index=3, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:18,108 on stmt: AX_S = $330unpack_sequence.7
DEBUG 2022-02-14 16:38:18,108 on stmt: XD_S = $330unpack_sequence.8
DEBUG 2022-02-14 16:38:18,108 on stmt: D_S = $330unpack_sequence.9
DEBUG 2022-02-14 16:38:18,108 on stmt: oddVX_S = $330unpack_sequence.10
DEBUG 2022-02-14 16:38:18,108 on stmt: $340load_global.12 = global(eigvals: CPUDispatcher(<function eigvals at 0x7fa047e5d430>))
DEBUG 2022-02-14 16:38:18,108 on stmt: E = call $340load_global.12(AX_S, func=$340load_global.12, args=[Var(AX_S, loop_hafnian_batch.py:118)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:18,108 on stmt: $const350.16 = const(int, 0)
DEBUG 2022-02-14 16:38:18,108 on stmt: $352binary_subscr.17 = static_getitem(value=kept_edges, index=0, index_var=$const350.16, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:18,108 on stmt: $const354.18 = const(int, 0)
DEBUG 2022-02-14 16:38:18,108 on stmt: $356compare_op.19 = $352binary_subscr.17 == $const354.18
DEBUG 2022-02-14 16:38:18,108 on stmt: bool358 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:38:18,108 on stmt: $358pred = call bool358($356compare_op.19, func=bool358, args=(Var($356compare_op.19, loop_hafnian_batch.py:122),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:18,108 on stmt: branch $358pred, 362, 450
DEBUG 2022-02-14 16:38:18,108 ==== SSA block rewrite pass on 362
DEBUG 2022-02-14 16:38:18,108 Running <numba.core.ssa._FixSSAVars object at 0x7fa041ed4a30>
DEBUG 2022-02-14 16:38:18,109 on stmt: $const364.2 = const(int, 1)
DEBUG 2022-02-14 16:38:18,109 on stmt: $366binary_subscr.3 = static_getitem(value=kept_edges, index=1, index_var=$const364.2, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:18,109 on stmt: $const368.4 = const(int, 0)
DEBUG 2022-02-14 16:38:18,109 on stmt: $370compare_op.5 = $366binary_subscr.3 == $const368.4
DEBUG 2022-02-14 16:38:18,109 on stmt: bool372 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:38:18,109 on stmt: $372pred = call bool372($370compare_op.5, func=bool372, args=(Var($370compare_op.5, loop_hafnian_batch.py:122),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:18,109 on stmt: branch $372pred, 376, 450
DEBUG 2022-02-14 16:38:18,109 ==== SSA block rewrite pass on 376
DEBUG 2022-02-14 16:38:18,109 Running <numba.core.ssa._FixSSAVars object at 0x7fa041ed4a30>
DEBUG 2022-02-14 16:38:18,109 on stmt: $376load_global.1 = global(get_submatrix_batch_odd0: CPUDispatcher(<function get_submatrix_batch_odd0 at 0x7fa047ebef70>))
DEBUG 2022-02-14 16:38:18,109 on stmt: oddVX_S0 = call $376load_global.1(delta, oddV0, func=$376load_global.1, args=[Var(delta, loop_hafnian_batch.py:114), Var(oddV0, loop_hafnian_batch.py:89)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:18,109 on stmt: $const386.5 = const(int, -1)
DEBUG 2022-02-14 16:38:18,109 on stmt: $const390.7 = const(int, 2)
DEBUG 2022-02-14 16:38:18,109 on stmt: $392binary_floor_divide.8 = N_fixed // $const390.7
DEBUG 2022-02-14 16:38:18,109 on stmt: $396binary_subtract.10 = $392binary_floor_divide.8 - edges_sum
DEBUG 2022-02-14 16:38:18,109 on stmt: plus_minus = $const386.5 ** $396binary_subtract.10
DEBUG 2022-02-14 16:38:18,109 on stmt: $402load_global.12 = global(f_loop_odd: CPUDispatcher(<function f_loop_odd at 0x7fa047ebeb80>))
DEBUG 2022-02-14 16:38:18,109 on stmt: $418call_function.20 = call $402load_global.12(E, AX_S, XD_S, D_S, N_fixed, oddloop0, oddVX_S0, func=$402load_global.12, args=[Var(E, loop_hafnian_batch.py:120), Var(AX_S, loop_hafnian_batch.py:118), Var(XD_S, loop_hafnian_batch.py:118), Var(D_S, loop_hafnian_batch.py:118), Var(N_fixed, loop_hafnian_batch.py:92), Var(oddloop0, loop_hafnian_batch.py:88), Var(oddVX_S0, loop_hafnian_batch.py:123)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:18,109 on stmt: f = getitem(value=$418call_function.20, index=N_fixed, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:18,109 on stmt: $const428.24 = const(int, 0)
DEBUG 2022-02-14 16:38:18,109 on stmt: $432binary_subscr.27 = static_getitem(value=H_batch, index=0, index_var=$const428.24, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:18,109 on stmt: $438binary_multiply.30 = binom_prod * plus_minus
DEBUG 2022-02-14 16:38:18,109 find_def var='binom_prod' stmt=$438binary_multiply.30 = binom_prod * plus_minus
DEBUG 2022-02-14 16:38:18,110 find_def_from_top label 376
DEBUG 2022-02-14 16:38:18,110 idom 362 from label 376
DEBUG 2022-02-14 16:38:18,110 find_def_from_bottom label 362
DEBUG 2022-02-14 16:38:18,110 find_def_from_top label 362
DEBUG 2022-02-14 16:38:18,110 idom 318 from label 362
DEBUG 2022-02-14 16:38:18,110 find_def_from_bottom label 318
DEBUG 2022-02-14 16:38:18,110 find_def_from_top label 318
DEBUG 2022-02-14 16:38:18,110 idom 294 from label 318
DEBUG 2022-02-14 16:38:18,110 find_def_from_bottom label 294
DEBUG 2022-02-14 16:38:18,110 find_def_from_top label 294
DEBUG 2022-02-14 16:38:18,110 idom 262 from label 294
DEBUG 2022-02-14 16:38:18,110 find_def_from_bottom label 262
DEBUG 2022-02-14 16:38:18,110 replaced with: $438binary_multiply.30 = binom_prod.2 * plus_minus
DEBUG 2022-02-14 16:38:18,110 on stmt: $442binary_multiply.32 = $438binary_multiply.30 * f
DEBUG 2022-02-14 16:38:18,110 on stmt: $444inplace_add.33 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$432binary_subscr.27, rhs=$442binary_multiply.32, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:38:18,110 on stmt: H_batch[0] = $444inplace_add.33
DEBUG 2022-02-14 16:38:18,110 on stmt: jump 450
DEBUG 2022-02-14 16:38:18,110 ==== SSA block rewrite pass on 450
DEBUG 2022-02-14 16:38:18,110 Running <numba.core.ssa._FixSSAVars object at 0x7fa041ed4a30>
DEBUG 2022-02-14 16:38:18,110 on stmt: $450load_global.1 = global(f_loop: CPUDispatcher(<function f_loop at 0x7fa047ebe9d0>))
DEBUG 2022-02-14 16:38:18,110 on stmt: f_even = call $450load_global.1(E, AX_S, XD_S, D_S, N_max, func=$450load_global.1, args=[Var(E, loop_hafnian_batch.py:120), Var(AX_S, loop_hafnian_batch.py:118), Var(XD_S, loop_hafnian_batch.py:118), Var(D_S, loop_hafnian_batch.py:118), Var(N_max, loop_hafnian_batch.py:93)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:18,110 on stmt: $466load_global.8 = global(f_loop_odd: CPUDispatcher(<function f_loop_odd at 0x7fa047ebeb80>))
DEBUG 2022-02-14 16:38:18,110 on stmt: f_odd = call $466load_global.8(E, AX_S, XD_S, D_S, N_max, oddloop, oddVX_S, func=$466load_global.8, args=[Var(E, loop_hafnian_batch.py:120), Var(AX_S, loop_hafnian_batch.py:118), Var(XD_S, loop_hafnian_batch.py:118), Var(D_S, loop_hafnian_batch.py:118), Var(N_max, loop_hafnian_batch.py:93), Var(oddloop, loop_hafnian_batch.py:83), Var(oddVX_S, loop_hafnian_batch.py:118)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:18,110 on stmt: $486load_global.17 = global(range: <class 'range'>)
DEBUG 2022-02-14 16:38:18,110 on stmt: $const488.18 = const(int, 2)
DEBUG 2022-02-14 16:38:18,111 on stmt: $const492.20 = const(int, 0)
DEBUG 2022-02-14 16:38:18,111 on stmt: $494binary_subscr.21 = static_getitem(value=kept_edges, index=0, index_var=$const492.20, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:18,111 on stmt: $496binary_multiply.22 = $const488.18 * $494binary_subscr.21
DEBUG 2022-02-14 16:38:18,111 on stmt: $const498.23 = const(int, 1)
DEBUG 2022-02-14 16:38:18,111 on stmt: $500binary_add.24 = $496binary_multiply.22 + $const498.23
DEBUG 2022-02-14 16:38:18,111 on stmt: $const502.25 = const(int, 2)
DEBUG 2022-02-14 16:38:18,111 on stmt: $506binary_multiply.27 = $const502.25 * batch_max
DEBUG 2022-02-14 16:38:18,111 on stmt: $510binary_add.29 = $506binary_multiply.27 + even_cutoff
DEBUG 2022-02-14 16:38:18,111 on stmt: $const512.30 = const(int, 2)
DEBUG 2022-02-14 16:38:18,111 on stmt: $514binary_add.31 = $510binary_add.29 + $const512.30
DEBUG 2022-02-14 16:38:18,111 on stmt: $516call_function.32 = call $486load_global.17($500binary_add.24, $514binary_add.31, func=$486load_global.17, args=[Var($500binary_add.24, loop_hafnian_batch.py:131), Var($514binary_add.31, loop_hafnian_batch.py:131)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:18,111 on stmt: $518get_iter.33 = getiter(value=$516call_function.32)
DEBUG 2022-02-14 16:38:18,111 on stmt: $phi520.1 = $518get_iter.33
DEBUG 2022-02-14 16:38:18,111 on stmt: jump 520
DEBUG 2022-02-14 16:38:18,111 ==== SSA block rewrite pass on 520
DEBUG 2022-02-14 16:38:18,111 Running <numba.core.ssa._FixSSAVars object at 0x7fa041ed4a30>
DEBUG 2022-02-14 16:38:18,111 on stmt: $520for_iter.2 = iternext(value=$phi520.1)
DEBUG 2022-02-14 16:38:18,111 on stmt: $520for_iter.3 = pair_first(value=$520for_iter.2)
DEBUG 2022-02-14 16:38:18,111 on stmt: $520for_iter.4 = pair_second(value=$520for_iter.2)
DEBUG 2022-02-14 16:38:18,111 on stmt: $phi522.2 = $520for_iter.3
DEBUG 2022-02-14 16:38:18,111 on stmt: branch $520for_iter.4, 522, 656
DEBUG 2022-02-14 16:38:18,111 ==== SSA block rewrite pass on 522
DEBUG 2022-02-14 16:38:18,111 Running <numba.core.ssa._FixSSAVars object at 0x7fa041ed4a30>
DEBUG 2022-02-14 16:38:18,111 on stmt: N_det = $phi522.2
DEBUG 2022-02-14 16:38:18,111 on stmt: N = N_fixed + N_det
DEBUG 2022-02-14 16:38:18,111 on stmt: $const532.6 = const(int, -1)
DEBUG 2022-02-14 16:38:18,112 on stmt: $const536.8 = const(int, 2)
DEBUG 2022-02-14 16:38:18,112 on stmt: $538binary_floor_divide.9 = N // $const536.8
DEBUG 2022-02-14 16:38:18,112 on stmt: $542binary_subtract.11 = $538binary_floor_divide.9 - edges_sum
DEBUG 2022-02-14 16:38:18,112 on stmt: plus_minus = $const532.6 ** $542binary_subtract.11
DEBUG 2022-02-14 16:38:18,112 on stmt: $const552.15 = const(int, 1)
DEBUG 2022-02-14 16:38:18,112 on stmt: $554binary_subtract.16 = N_det - $const552.15
DEBUG 2022-02-14 16:38:18,112 on stmt: $const556.17 = const(int, 2)
DEBUG 2022-02-14 16:38:18,112 on stmt: $558binary_floor_divide.18 = $554binary_subtract.16 // $const556.17
DEBUG 2022-02-14 16:38:18,112 on stmt: $const562.20 = const(int, 0)
DEBUG 2022-02-14 16:38:18,112 on stmt: $564binary_subscr.21 = static_getitem(value=kept_edges, index=0, index_var=$const562.20, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:18,112 on stmt: $566build_tuple.22 = build_tuple(items=[Var($558binary_floor_divide.18, loop_hafnian_batch.py:135), Var($564binary_subscr.21, loop_hafnian_batch.py:135)])
DEBUG 2022-02-14 16:38:18,112 on stmt: $568binary_subscr.23 = getitem(value=binoms, index=$566build_tuple.22, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:18,112 on stmt: n_det_binom_prod = $568binary_subscr.23 * binom_prod
DEBUG 2022-02-14 16:38:18,112 find_def var='binom_prod' stmt=n_det_binom_prod = $568binary_subscr.23 * binom_prod
DEBUG 2022-02-14 16:38:18,112 find_def_from_top label 522
DEBUG 2022-02-14 16:38:18,112 idom 520 from label 522
DEBUG 2022-02-14 16:38:18,112 find_def_from_bottom label 520
DEBUG 2022-02-14 16:38:18,112 find_def_from_top label 520
DEBUG 2022-02-14 16:38:18,112 idom 450 from label 520
DEBUG 2022-02-14 16:38:18,112 find_def_from_bottom label 450
DEBUG 2022-02-14 16:38:18,112 find_def_from_top label 450
DEBUG 2022-02-14 16:38:18,112 idom 318 from label 450
DEBUG 2022-02-14 16:38:18,112 find_def_from_bottom label 318
DEBUG 2022-02-14 16:38:18,112 find_def_from_top label 318
DEBUG 2022-02-14 16:38:18,112 idom 294 from label 318
DEBUG 2022-02-14 16:38:18,112 find_def_from_bottom label 294
DEBUG 2022-02-14 16:38:18,112 find_def_from_top label 294
DEBUG 2022-02-14 16:38:18,112 idom 262 from label 294
DEBUG 2022-02-14 16:38:18,112 find_def_from_bottom label 262
DEBUG 2022-02-14 16:38:18,113 replaced with: n_det_binom_prod = $568binary_subscr.23 * binom_prod.2
DEBUG 2022-02-14 16:38:18,113 on stmt: $const578.27 = const(int, 2)
DEBUG 2022-02-14 16:38:18,113 on stmt: $580binary_modulo.28 = N % $const578.27
DEBUG 2022-02-14 16:38:18,113 on stmt: $const582.29 = const(int, 0)
DEBUG 2022-02-14 16:38:18,113 on stmt: $584compare_op.30 = $580binary_modulo.28 == $const582.29
DEBUG 2022-02-14 16:38:18,113 on stmt: bool586 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:38:18,113 on stmt: $586pred = call bool586($584compare_op.30, func=bool586, args=(Var($584compare_op.30, loop_hafnian_batch.py:137),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:18,113 on stmt: branch $586pred, 590, 624
DEBUG 2022-02-14 16:38:18,113 ==== SSA block rewrite pass on 590
DEBUG 2022-02-14 16:38:18,113 Running <numba.core.ssa._FixSSAVars object at 0x7fa041ed4a30>
DEBUG 2022-02-14 16:38:18,113 on stmt: $596binary_subscr.6 = getitem(value=Hnew, index=N_det, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:18,113 on stmt: $602binary_multiply.9 = n_det_binom_prod * plus_minus
DEBUG 2022-02-14 16:38:18,113 on stmt: $const608.12 = const(int, 2)
DEBUG 2022-02-14 16:38:18,113 on stmt: $610binary_floor_divide.13 = N // $const608.12
DEBUG 2022-02-14 16:38:18,113 on stmt: $612binary_subscr.14 = getitem(value=f_even, index=$610binary_floor_divide.13, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:18,113 on stmt: $614binary_multiply.15 = $602binary_multiply.9 * $612binary_subscr.14
DEBUG 2022-02-14 16:38:18,113 on stmt: $616inplace_add.16 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$596binary_subscr.6, rhs=$614binary_multiply.15, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:38:18,113 on stmt: Hnew[N_det] = $616inplace_add.16
DEBUG 2022-02-14 16:38:18,113 on stmt: jump 652
DEBUG 2022-02-14 16:38:18,113 ==== SSA block rewrite pass on 624
DEBUG 2022-02-14 16:38:18,113 Running <numba.core.ssa._FixSSAVars object at 0x7fa041ed4a30>
DEBUG 2022-02-14 16:38:18,113 on stmt: $630binary_subscr.6 = getitem(value=Hnew, index=N_det, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:18,113 on stmt: $636binary_multiply.9 = n_det_binom_prod * plus_minus
DEBUG 2022-02-14 16:38:18,113 on stmt: $642binary_subscr.12 = getitem(value=f_odd, index=N, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:18,113 on stmt: $644binary_multiply.13 = $636binary_multiply.9 * $642binary_subscr.12
DEBUG 2022-02-14 16:38:18,113 on stmt: $646inplace_add.14 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$630binary_subscr.6, rhs=$644binary_multiply.13, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:38:18,114 on stmt: Hnew[N_det] = $646inplace_add.14
DEBUG 2022-02-14 16:38:18,114 on stmt: jump 652
DEBUG 2022-02-14 16:38:18,114 ==== SSA block rewrite pass on 652
DEBUG 2022-02-14 16:38:18,114 Running <numba.core.ssa._FixSSAVars object at 0x7fa041ed4a30>
DEBUG 2022-02-14 16:38:18,114 on stmt: jump 520
DEBUG 2022-02-14 16:38:18,114 ==== SSA block rewrite pass on 656
DEBUG 2022-02-14 16:38:18,114 Running <numba.core.ssa._FixSSAVars object at 0x7fa041ed4a30>
DEBUG 2022-02-14 16:38:18,114 on stmt: $660inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=H_batch, rhs=Hnew, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:38:18,114 on stmt: H_batch = $660inplace_add.3
DEBUG 2022-02-14 16:38:18,114 on stmt: jump 192
DEBUG 2022-02-14 16:38:18,114 ==== SSA block rewrite pass on 666
DEBUG 2022-02-14 16:38:18,114 Running <numba.core.ssa._FixSSAVars object at 0x7fa041ed4a30>
DEBUG 2022-02-14 16:38:18,114 on stmt: bool668 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:38:18,114 on stmt: $668pred = call bool668(glynn, func=bool668, args=(Var(glynn, loop_hafnian_batch.py:83),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:18,114 on stmt: branch $668pred, 672, 726
DEBUG 2022-02-14 16:38:18,114 ==== SSA block rewrite pass on 672
DEBUG 2022-02-14 16:38:18,114 Running <numba.core.ssa._FixSSAVars object at 0x7fa041ed4a30>
DEBUG 2022-02-14 16:38:18,114 on stmt: $672load_global.0 = global(range: <class 'range'>)
DEBUG 2022-02-14 16:38:18,114 on stmt: $676load_attr.2 = getattr(value=H_batch, attr=shape)
DEBUG 2022-02-14 16:38:18,114 on stmt: $const678.3 = const(int, 0)
DEBUG 2022-02-14 16:38:18,114 on stmt: $680binary_subscr.4 = static_getitem(value=$676load_attr.2, index=0, index_var=$const678.3, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:18,114 on stmt: $682call_function.5 = call $672load_global.0($680binary_subscr.4, func=$672load_global.0, args=[Var($680binary_subscr.4, loop_hafnian_batch.py:145)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:18,114 on stmt: $684get_iter.6 = getiter(value=$682call_function.5)
DEBUG 2022-02-14 16:38:18,114 on stmt: $phi686.0 = $684get_iter.6
DEBUG 2022-02-14 16:38:18,114 on stmt: jump 686
DEBUG 2022-02-14 16:38:18,114 ==== SSA block rewrite pass on 686
DEBUG 2022-02-14 16:38:18,114 Running <numba.core.ssa._FixSSAVars object at 0x7fa041ed4a30>
DEBUG 2022-02-14 16:38:18,115 on stmt: $686for_iter.1 = iternext(value=$phi686.0)
DEBUG 2022-02-14 16:38:18,115 on stmt: $686for_iter.2 = pair_first(value=$686for_iter.1)
DEBUG 2022-02-14 16:38:18,115 on stmt: $686for_iter.3 = pair_second(value=$686for_iter.1)
DEBUG 2022-02-14 16:38:18,115 on stmt: $phi688.1 = $686for_iter.2
DEBUG 2022-02-14 16:38:18,115 on stmt: branch $686for_iter.3, 688, 726
DEBUG 2022-02-14 16:38:18,115 ==== SSA block rewrite pass on 688
DEBUG 2022-02-14 16:38:18,115 Running <numba.core.ssa._FixSSAVars object at 0x7fa041ed4a30>
DEBUG 2022-02-14 16:38:18,115 on stmt: j.1 = $phi688.1
DEBUG 2022-02-14 16:38:18,115 on stmt: x = N_fixed + j.1
DEBUG 2022-02-14 16:38:18,115 on stmt: $704binary_subscr.9 = getitem(value=H_batch, index=j.1, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:18,115 on stmt: $const706.10 = const(float, 0.5)
DEBUG 2022-02-14 16:38:18,115 on stmt: $const710.12 = const(int, 2)
DEBUG 2022-02-14 16:38:18,115 on stmt: $712binary_floor_divide.13 = x // $const710.12
DEBUG 2022-02-14 16:38:18,115 on stmt: $714binary_power.14 = $const706.10 ** $712binary_floor_divide.13
DEBUG 2022-02-14 16:38:18,115 on stmt: $716inplace_multiply.15 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=$704binary_subscr.9, rhs=$714binary_power.14, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:38:18,115 on stmt: H_batch[j.1] = $716inplace_multiply.15
DEBUG 2022-02-14 16:38:18,115 on stmt: jump 686
DEBUG 2022-02-14 16:38:18,115 ==== SSA block rewrite pass on 726
DEBUG 2022-02-14 16:38:18,115 Running <numba.core.ssa._FixSSAVars object at 0x7fa041ed4a30>
DEBUG 2022-02-14 16:38:18,115 on stmt: $728return_value.1 = cast(value=H_batch)
DEBUG 2022-02-14 16:38:18,115 on stmt: return $728return_value.1
DEBUG 2022-02-14 16:38:18,115 Fix SSA violator on var H_batch
DEBUG 2022-02-14 16:38:18,115 ==== SSA block rewrite pass on 0
DEBUG 2022-02-14 16:38:18,115 Running <numba.core.ssa._FreshVarHandler object at 0x7fa0469602e0>
DEBUG 2022-02-14 16:38:18,115 on stmt: A = arg(0, name=A)
DEBUG 2022-02-14 16:38:18,116 on stmt: D = arg(1, name=D)
DEBUG 2022-02-14 16:38:18,116 on stmt: fixed_edge_reps = arg(2, name=fixed_edge_reps)
DEBUG 2022-02-14 16:38:18,116 on stmt: batch_max = arg(3, name=batch_max)
DEBUG 2022-02-14 16:38:18,116 on stmt: even_cutoff = arg(4, name=even_cutoff)
DEBUG 2022-02-14 16:38:18,116 on stmt: oddmode = arg(5, name=oddmode)
DEBUG 2022-02-14 16:38:18,116 on stmt: glynn = arg(6, name=glynn)
DEBUG 2022-02-14 16:38:18,116 on stmt: $const4.1 = const(int, 0)
DEBUG 2022-02-14 16:38:18,116 on stmt: oddloop = static_getitem(value=D, index=0, index_var=$const4.1, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:18,116 on stmt: $const12.4 = const(int, 0)
DEBUG 2022-02-14 16:38:18,116 on stmt: $const14.5 = const(NoneType, None)
DEBUG 2022-02-14 16:38:18,116 on stmt: $const16.6 = const(NoneType, None)
DEBUG 2022-02-14 16:38:18,116 on stmt: $18build_slice.7 = global(slice: <class 'slice'>)
DEBUG 2022-02-14 16:38:18,116 on stmt: $18build_slice.8 = call $18build_slice.7($const14.5, $const16.6, func=$18build_slice.7, args=(Var($const14.5, loop_hafnian_batch.py:84), Var($const16.6, loop_hafnian_batch.py:84)), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:18,116 on stmt: $20build_tuple.9 = build_tuple(items=[Var($const12.4, loop_hafnian_batch.py:84), Var($18build_slice.8, loop_hafnian_batch.py:84)])
DEBUG 2022-02-14 16:38:18,116 on stmt: oddV = static_getitem(value=A, index=(0, slice(None, None, None)), index_var=$20build_tuple.9, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:18,116 on stmt: $const28.12 = const(int, 1)
DEBUG 2022-02-14 16:38:18,116 on stmt: oddloop0 = static_getitem(value=D, index=1, index_var=$const28.12, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:18,116 on stmt: $const36.15 = const(int, 1)
DEBUG 2022-02-14 16:38:18,116 on stmt: $const38.16 = const(NoneType, None)
DEBUG 2022-02-14 16:38:18,116 on stmt: $const40.17 = const(NoneType, None)
DEBUG 2022-02-14 16:38:18,116 on stmt: $42build_slice.18 = global(slice: <class 'slice'>)
DEBUG 2022-02-14 16:38:18,116 on stmt: $42build_slice.19 = call $42build_slice.18($const38.16, $const40.17, func=$42build_slice.18, args=(Var($const38.16, loop_hafnian_batch.py:89), Var($const40.17, loop_hafnian_batch.py:89)), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:18,116 on stmt: $44build_tuple.20 = build_tuple(items=[Var($const36.15, loop_hafnian_batch.py:89), Var($42build_slice.19, loop_hafnian_batch.py:89)])
DEBUG 2022-02-14 16:38:18,116 on stmt: oddV0 = static_getitem(value=A, index=(1, slice(None, None, None)), index_var=$44build_tuple.20, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:18,116 on stmt: $52load_attr.23 = getattr(value=A, attr=shape)
DEBUG 2022-02-14 16:38:18,116 on stmt: $const54.24 = const(int, 0)
DEBUG 2022-02-14 16:38:18,116 on stmt: n = static_getitem(value=$52load_attr.23, index=0, index_var=$const54.24, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:18,116 on stmt: $const60.26 = const(int, 2)
DEBUG 2022-02-14 16:38:18,117 on stmt: $64load_method.28 = getattr(value=fixed_edge_reps, attr=sum)
DEBUG 2022-02-14 16:38:18,117 on stmt: $66call_method.29 = call $64load_method.28(func=$64load_method.28, args=[], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:18,117 on stmt: $68binary_multiply.30 = $const60.26 * $66call_method.29
DEBUG 2022-02-14 16:38:18,117 on stmt: $const70.31 = const(int, 1)
DEBUG 2022-02-14 16:38:18,117 on stmt: N_fixed = $68binary_multiply.30 + $const70.31
DEBUG 2022-02-14 16:38:18,117 on stmt: $const78.34 = const(int, 2)
DEBUG 2022-02-14 16:38:18,117 on stmt: $82binary_multiply.36 = $const78.34 * batch_max
DEBUG 2022-02-14 16:38:18,117 on stmt: $84binary_add.37 = N_fixed + $82binary_multiply.36
DEBUG 2022-02-14 16:38:18,117 on stmt: $88binary_add.39 = $84binary_add.37 + even_cutoff
DEBUG 2022-02-14 16:38:18,117 on stmt: $const90.40 = const(int, 1)
DEBUG 2022-02-14 16:38:18,117 on stmt: N_max = $88binary_add.39 + $const90.40
DEBUG 2022-02-14 16:38:18,117 on stmt: $96load_global.42 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:38:18,117 on stmt: $98load_method.43 = getattr(value=$96load_global.42, attr=concatenate)
DEBUG 2022-02-14 16:38:18,117 on stmt: $100load_global.44 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:38:18,117 on stmt: $102load_method.45 = getattr(value=$100load_global.44, attr=array)
DEBUG 2022-02-14 16:38:18,117 on stmt: $const106.47 = const(int, 1)
DEBUG 2022-02-14 16:38:18,117 on stmt: $108build_list.48 = build_list(items=[Var(batch_max, loop_hafnian_batch.py:83), Var($const106.47, loop_hafnian_batch.py:95)])
DEBUG 2022-02-14 16:38:18,117 on stmt: $110call_method.49 = call $102load_method.45($108build_list.48, func=$102load_method.45, args=[Var($108build_list.48, loop_hafnian_batch.py:95)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:18,117 on stmt: $114build_tuple.51 = build_tuple(items=[Var($110call_method.49, loop_hafnian_batch.py:95), Var(fixed_edge_reps, loop_hafnian_batch.py:83)])
DEBUG 2022-02-14 16:38:18,117 on stmt: edge_reps = call $98load_method.43($114build_tuple.51, func=$98load_method.43, args=[Var($114build_tuple.51, loop_hafnian_batch.py:95)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:18,117 on stmt: $120load_global.53 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:38:18,117 on stmt: $122load_method.54 = getattr(value=$120load_global.53, attr=prod)
DEBUG 2022-02-14 16:38:18,117 on stmt: $const126.56 = const(int, 1)
DEBUG 2022-02-14 16:38:18,117 on stmt: $128binary_add.57 = edge_reps + $const126.56
DEBUG 2022-02-14 16:38:18,117 on stmt: steps = call $122load_method.54($128binary_add.57, func=$122load_method.54, args=[Var($128binary_add.57, loop_hafnian_batch.py:96)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:18,118 on stmt: $136load_method.60 = getattr(value=edge_reps, attr=max)
DEBUG 2022-02-14 16:38:18,118 on stmt: $138call_method.61 = call $136load_method.60(func=$136load_method.60, args=[], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:18,118 on stmt: max_binom = $138call_method.61 + even_cutoff
DEBUG 2022-02-14 16:38:18,118 on stmt: $146load_global.64 = global(precompute_binoms: CPUDispatcher(<function precompute_binoms at 0x7fa047ebe310>))
DEBUG 2022-02-14 16:38:18,118 on stmt: binoms = call $146load_global.64(max_binom, func=$146load_global.64, args=[Var(max_binom, loop_hafnian_batch.py:98)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:18,118 on stmt: $154load_global.67 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:38:18,118 on stmt: $156load_attr.68 = getattr(value=$154load_global.67, attr=zeros)
DEBUG 2022-02-14 16:38:18,118 on stmt: $const158.69 = const(int, 2)
DEBUG 2022-02-14 16:38:18,118 on stmt: $162binary_multiply.71 = $const158.69 * batch_max
DEBUG 2022-02-14 16:38:18,118 on stmt: $166binary_add.73 = $162binary_multiply.71 + even_cutoff
DEBUG 2022-02-14 16:38:18,118 on stmt: $const168.74 = const(int, 2)
DEBUG 2022-02-14 16:38:18,118 on stmt: $170binary_add.75 = $166binary_add.73 + $const168.74
DEBUG 2022-02-14 16:38:18,118 on stmt: $172load_global.76 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:38:18,118 on stmt: $174load_attr.77 = getattr(value=$172load_global.76, attr=complex128)
DEBUG 2022-02-14 16:38:18,118 on stmt: H_batch = call $156load_attr.68($170binary_add.75, func=$156load_attr.68, args=[Var($170binary_add.75, loop_hafnian_batch.py:101)], kws=[('dtype', Var($174load_attr.77, loop_hafnian_batch.py:101))], vararg=None, target=None)
DEBUG 2022-02-14 16:38:18,118 first assign: H_batch
DEBUG 2022-02-14 16:38:18,118 replaced with: H_batch = call $156load_attr.68($170binary_add.75, func=$156load_attr.68, args=[Var($170binary_add.75, loop_hafnian_batch.py:101)], kws=[('dtype', Var($174load_attr.77, loop_hafnian_batch.py:101))], vararg=None, target=None)
DEBUG 2022-02-14 16:38:18,118 on stmt: $182load_global.80 = global(numba: <module 'numba' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numba/__init__.py'>)
DEBUG 2022-02-14 16:38:18,118 on stmt: $184load_method.81 = getattr(value=$182load_global.80, attr=prange)
DEBUG 2022-02-14 16:38:18,118 on stmt: $188call_method.83 = call $184load_method.81(steps, func=$184load_method.81, args=[Var(steps, loop_hafnian_batch.py:96)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:18,118 on stmt: $190get_iter.84 = getiter(value=$188call_method.83)
DEBUG 2022-02-14 16:38:18,118 on stmt: $phi192.0 = $190get_iter.84
DEBUG 2022-02-14 16:38:18,118 on stmt: jump 192
DEBUG 2022-02-14 16:38:18,118 ==== SSA block rewrite pass on 192
DEBUG 2022-02-14 16:38:18,119 Running <numba.core.ssa._FreshVarHandler object at 0x7fa0469602e0>
DEBUG 2022-02-14 16:38:18,119 on stmt: $192for_iter.1 = iternext(value=$phi192.0)
DEBUG 2022-02-14 16:38:18,119 on stmt: $192for_iter.2 = pair_first(value=$192for_iter.1)
DEBUG 2022-02-14 16:38:18,119 on stmt: $192for_iter.3 = pair_second(value=$192for_iter.1)
DEBUG 2022-02-14 16:38:18,119 on stmt: $phi196.1 = $192for_iter.2
DEBUG 2022-02-14 16:38:18,119 on stmt: branch $192for_iter.3, 196, 666
DEBUG 2022-02-14 16:38:18,119 ==== SSA block rewrite pass on 196
DEBUG 2022-02-14 16:38:18,119 Running <numba.core.ssa._FreshVarHandler object at 0x7fa0469602e0>
DEBUG 2022-02-14 16:38:18,119 on stmt: j = $phi196.1
DEBUG 2022-02-14 16:38:18,119 on stmt: $198load_global.2 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:38:18,119 on stmt: $200load_attr.3 = getattr(value=$198load_global.2, attr=zeros)
DEBUG 2022-02-14 16:38:18,119 on stmt: $const202.4 = const(int, 2)
DEBUG 2022-02-14 16:38:18,119 on stmt: $206binary_multiply.6 = $const202.4 * batch_max
DEBUG 2022-02-14 16:38:18,119 on stmt: $210binary_add.8 = $206binary_multiply.6 + even_cutoff
DEBUG 2022-02-14 16:38:18,119 on stmt: $const212.9 = const(int, 2)
DEBUG 2022-02-14 16:38:18,119 on stmt: $214binary_add.10 = $210binary_add.8 + $const212.9
DEBUG 2022-02-14 16:38:18,119 on stmt: $216load_global.11 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:38:18,119 on stmt: $218load_attr.12 = getattr(value=$216load_global.11, attr=complex128)
DEBUG 2022-02-14 16:38:18,119 on stmt: Hnew = call $200load_attr.3($214binary_add.10, func=$200load_attr.3, args=[Var($214binary_add.10, loop_hafnian_batch.py:104)], kws=[('dtype', Var($218load_attr.12, loop_hafnian_batch.py:104))], vararg=None, target=None)
DEBUG 2022-02-14 16:38:18,119 on stmt: $226load_global.15 = global(find_kept_edges: CPUDispatcher(<function find_kept_edges at 0x7fa047ebe790>))
DEBUG 2022-02-14 16:38:18,119 on stmt: kept_edges = call $226load_global.15(j, edge_reps, func=$226load_global.15, args=[Var(j, loop_hafnian_batch.py:102), Var(edge_reps, loop_hafnian_batch.py:95)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:18,119 on stmt: $238load_method.20 = getattr(value=kept_edges, attr=sum)
DEBUG 2022-02-14 16:38:18,119 on stmt: edges_sum = call $238load_method.20(func=$238load_method.20, args=[], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:18,119 on stmt: binom_prod = const(float, 1.0)
DEBUG 2022-02-14 16:38:18,119 on stmt: $248load_global.23 = global(range: <class 'range'>)
DEBUG 2022-02-14 16:38:18,120 on stmt: $const250.24 = const(int, 1)
DEBUG 2022-02-14 16:38:18,120 on stmt: $const254.26 = const(int, 2)
DEBUG 2022-02-14 16:38:18,120 on stmt: $256binary_floor_divide.27 = n // $const254.26
DEBUG 2022-02-14 16:38:18,120 on stmt: $258call_function.28 = call $248load_global.23($const250.24, $256binary_floor_divide.27, func=$248load_global.23, args=[Var($const250.24, loop_hafnian_batch.py:110), Var($256binary_floor_divide.27, loop_hafnian_batch.py:110)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:18,120 on stmt: $260get_iter.29 = getiter(value=$258call_function.28)
DEBUG 2022-02-14 16:38:18,120 on stmt: $phi262.1 = $260get_iter.29
DEBUG 2022-02-14 16:38:18,120 on stmt: jump 262
DEBUG 2022-02-14 16:38:18,120 ==== SSA block rewrite pass on 262
DEBUG 2022-02-14 16:38:18,120 Running <numba.core.ssa._FreshVarHandler object at 0x7fa0469602e0>
DEBUG 2022-02-14 16:38:18,120 on stmt: binom_prod.2 = phi(incoming_values=[Var(binom_prod.1, loop_hafnian_batch.py:111), Var(binom_prod, loop_hafnian_batch.py:109)], incoming_blocks=[264, 196])
DEBUG 2022-02-14 16:38:18,120 on stmt: $262for_iter.2 = iternext(value=$phi262.1)
DEBUG 2022-02-14 16:38:18,120 on stmt: $262for_iter.3 = pair_first(value=$262for_iter.2)
DEBUG 2022-02-14 16:38:18,120 on stmt: $262for_iter.4 = pair_second(value=$262for_iter.2)
DEBUG 2022-02-14 16:38:18,120 on stmt: $phi264.2 = $262for_iter.3
DEBUG 2022-02-14 16:38:18,120 on stmt: branch $262for_iter.4, 264, 294
DEBUG 2022-02-14 16:38:18,120 ==== SSA block rewrite pass on 264
DEBUG 2022-02-14 16:38:18,120 Running <numba.core.ssa._FreshVarHandler object at 0x7fa0469602e0>
DEBUG 2022-02-14 16:38:18,120 on stmt: i = $phi264.2
DEBUG 2022-02-14 16:38:18,120 on stmt: $274binary_subscr.7 = getitem(value=edge_reps, index=i, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:18,120 on stmt: $280binary_subscr.10 = getitem(value=kept_edges, index=i, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:18,121 on stmt: $282build_tuple.11 = build_tuple(items=[Var($274binary_subscr.7, loop_hafnian_batch.py:111), Var($280binary_subscr.10, loop_hafnian_batch.py:111)])
DEBUG 2022-02-14 16:38:18,121 on stmt: $284binary_subscr.12 = getitem(value=binoms, index=$282build_tuple.11, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:18,121 on stmt: $286inplace_multiply.13 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=binom_prod.2, rhs=$284binary_subscr.12, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:38:18,121 on stmt: binom_prod.1 = $286inplace_multiply.13
DEBUG 2022-02-14 16:38:18,121 on stmt: jump 262
DEBUG 2022-02-14 16:38:18,121 ==== SSA block rewrite pass on 294
DEBUG 2022-02-14 16:38:18,121 Running <numba.core.ssa._FreshVarHandler object at 0x7fa0469602e0>
DEBUG 2022-02-14 16:38:18,121 on stmt: bool296 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:38:18,121 on stmt: $296pred = call bool296(glynn, func=bool296, args=(Var(glynn, loop_hafnian_batch.py:83),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:18,121 on stmt: branch $296pred, 300, 314
DEBUG 2022-02-14 16:38:18,121 ==== SSA block rewrite pass on 300
DEBUG 2022-02-14 16:38:18,121 Running <numba.core.ssa._FreshVarHandler object at 0x7fa0469602e0>
DEBUG 2022-02-14 16:38:18,121 on stmt: $const300.1 = const(int, 2)
DEBUG 2022-02-14 16:38:18,121 on stmt: $304binary_multiply.3 = $const300.1 * kept_edges
DEBUG 2022-02-14 16:38:18,121 on stmt: delta = $304binary_multiply.3 - edge_reps
DEBUG 2022-02-14 16:38:18,121 on stmt: jump 318
DEBUG 2022-02-14 16:38:18,121 ==== SSA block rewrite pass on 314
DEBUG 2022-02-14 16:38:18,121 Running <numba.core.ssa._FreshVarHandler object at 0x7fa0469602e0>
DEBUG 2022-02-14 16:38:18,121 on stmt: delta = kept_edges
DEBUG 2022-02-14 16:38:18,121 on stmt: jump 318
DEBUG 2022-02-14 16:38:18,121 ==== SSA block rewrite pass on 318
DEBUG 2022-02-14 16:38:18,121 Running <numba.core.ssa._FreshVarHandler object at 0x7fa0469602e0>
DEBUG 2022-02-14 16:38:18,121 on stmt: $318load_global.1 = global(get_submatrices: CPUDispatcher(<function get_submatrices at 0x7fa047ebed30>))
DEBUG 2022-02-14 16:38:18,121 on stmt: $328call_function.6 = call $318load_global.1(delta, A, D, oddV, func=$318load_global.1, args=[Var(delta, loop_hafnian_batch.py:114), Var(A, loop_hafnian_batch.py:83), Var(D, loop_hafnian_batch.py:83), Var(oddV, loop_hafnian_batch.py:84)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:18,122 on stmt: $330unpack_sequence.11 = exhaust_iter(value=$328call_function.6, count=4)
DEBUG 2022-02-14 16:38:18,122 on stmt: $330unpack_sequence.7 = static_getitem(value=$330unpack_sequence.11, index=0, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:18,122 on stmt: $330unpack_sequence.8 = static_getitem(value=$330unpack_sequence.11, index=1, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:18,122 on stmt: $330unpack_sequence.9 = static_getitem(value=$330unpack_sequence.11, index=2, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:18,122 on stmt: $330unpack_sequence.10 = static_getitem(value=$330unpack_sequence.11, index=3, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:18,122 on stmt: AX_S = $330unpack_sequence.7
DEBUG 2022-02-14 16:38:18,122 on stmt: XD_S = $330unpack_sequence.8
DEBUG 2022-02-14 16:38:18,122 on stmt: D_S = $330unpack_sequence.9
DEBUG 2022-02-14 16:38:18,122 on stmt: oddVX_S = $330unpack_sequence.10
DEBUG 2022-02-14 16:38:18,122 on stmt: $340load_global.12 = global(eigvals: CPUDispatcher(<function eigvals at 0x7fa047e5d430>))
DEBUG 2022-02-14 16:38:18,122 on stmt: E = call $340load_global.12(AX_S, func=$340load_global.12, args=[Var(AX_S, loop_hafnian_batch.py:118)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:18,122 on stmt: $const350.16 = const(int, 0)
DEBUG 2022-02-14 16:38:18,122 on stmt: $352binary_subscr.17 = static_getitem(value=kept_edges, index=0, index_var=$const350.16, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:18,122 on stmt: $const354.18 = const(int, 0)
DEBUG 2022-02-14 16:38:18,122 on stmt: $356compare_op.19 = $352binary_subscr.17 == $const354.18
DEBUG 2022-02-14 16:38:18,122 on stmt: bool358 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:38:18,122 on stmt: $358pred = call bool358($356compare_op.19, func=bool358, args=(Var($356compare_op.19, loop_hafnian_batch.py:122),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:18,122 on stmt: branch $358pred, 362, 450
DEBUG 2022-02-14 16:38:18,122 ==== SSA block rewrite pass on 362
DEBUG 2022-02-14 16:38:18,122 Running <numba.core.ssa._FreshVarHandler object at 0x7fa0469602e0>
DEBUG 2022-02-14 16:38:18,122 on stmt: $const364.2 = const(int, 1)
DEBUG 2022-02-14 16:38:18,122 on stmt: $366binary_subscr.3 = static_getitem(value=kept_edges, index=1, index_var=$const364.2, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:18,122 on stmt: $const368.4 = const(int, 0)
DEBUG 2022-02-14 16:38:18,122 on stmt: $370compare_op.5 = $366binary_subscr.3 == $const368.4
DEBUG 2022-02-14 16:38:18,123 on stmt: bool372 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:38:18,123 on stmt: $372pred = call bool372($370compare_op.5, func=bool372, args=(Var($370compare_op.5, loop_hafnian_batch.py:122),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:18,123 on stmt: branch $372pred, 376, 450
DEBUG 2022-02-14 16:38:18,123 ==== SSA block rewrite pass on 376
DEBUG 2022-02-14 16:38:18,123 Running <numba.core.ssa._FreshVarHandler object at 0x7fa0469602e0>
DEBUG 2022-02-14 16:38:18,123 on stmt: $376load_global.1 = global(get_submatrix_batch_odd0: CPUDispatcher(<function get_submatrix_batch_odd0 at 0x7fa047ebef70>))
DEBUG 2022-02-14 16:38:18,123 on stmt: oddVX_S0 = call $376load_global.1(delta, oddV0, func=$376load_global.1, args=[Var(delta, loop_hafnian_batch.py:114), Var(oddV0, loop_hafnian_batch.py:89)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:18,123 on stmt: $const386.5 = const(int, -1)
DEBUG 2022-02-14 16:38:18,123 on stmt: $const390.7 = const(int, 2)
DEBUG 2022-02-14 16:38:18,123 on stmt: $392binary_floor_divide.8 = N_fixed // $const390.7
DEBUG 2022-02-14 16:38:18,123 on stmt: $396binary_subtract.10 = $392binary_floor_divide.8 - edges_sum
DEBUG 2022-02-14 16:38:18,123 on stmt: plus_minus = $const386.5 ** $396binary_subtract.10
DEBUG 2022-02-14 16:38:18,123 on stmt: $402load_global.12 = global(f_loop_odd: CPUDispatcher(<function f_loop_odd at 0x7fa047ebeb80>))
DEBUG 2022-02-14 16:38:18,123 on stmt: $418call_function.20 = call $402load_global.12(E, AX_S, XD_S, D_S, N_fixed, oddloop0, oddVX_S0, func=$402load_global.12, args=[Var(E, loop_hafnian_batch.py:120), Var(AX_S, loop_hafnian_batch.py:118), Var(XD_S, loop_hafnian_batch.py:118), Var(D_S, loop_hafnian_batch.py:118), Var(N_fixed, loop_hafnian_batch.py:92), Var(oddloop0, loop_hafnian_batch.py:88), Var(oddVX_S0, loop_hafnian_batch.py:123)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:18,123 on stmt: f = getitem(value=$418call_function.20, index=N_fixed, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:18,123 on stmt: $const428.24 = const(int, 0)
DEBUG 2022-02-14 16:38:18,123 on stmt: $432binary_subscr.27 = static_getitem(value=H_batch, index=0, index_var=$const428.24, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:18,123 on stmt: $438binary_multiply.30 = binom_prod.2 * plus_minus
DEBUG 2022-02-14 16:38:18,123 on stmt: $442binary_multiply.32 = $438binary_multiply.30 * f
DEBUG 2022-02-14 16:38:18,123 on stmt: $444inplace_add.33 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$432binary_subscr.27, rhs=$442binary_multiply.32, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:38:18,123 on stmt: H_batch[0] = $444inplace_add.33
DEBUG 2022-02-14 16:38:18,123 on stmt: jump 450
DEBUG 2022-02-14 16:38:18,123 ==== SSA block rewrite pass on 450
DEBUG 2022-02-14 16:38:18,124 Running <numba.core.ssa._FreshVarHandler object at 0x7fa0469602e0>
DEBUG 2022-02-14 16:38:18,124 on stmt: $450load_global.1 = global(f_loop: CPUDispatcher(<function f_loop at 0x7fa047ebe9d0>))
DEBUG 2022-02-14 16:38:18,124 on stmt: f_even = call $450load_global.1(E, AX_S, XD_S, D_S, N_max, func=$450load_global.1, args=[Var(E, loop_hafnian_batch.py:120), Var(AX_S, loop_hafnian_batch.py:118), Var(XD_S, loop_hafnian_batch.py:118), Var(D_S, loop_hafnian_batch.py:118), Var(N_max, loop_hafnian_batch.py:93)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:18,124 on stmt: $466load_global.8 = global(f_loop_odd: CPUDispatcher(<function f_loop_odd at 0x7fa047ebeb80>))
DEBUG 2022-02-14 16:38:18,124 on stmt: f_odd = call $466load_global.8(E, AX_S, XD_S, D_S, N_max, oddloop, oddVX_S, func=$466load_global.8, args=[Var(E, loop_hafnian_batch.py:120), Var(AX_S, loop_hafnian_batch.py:118), Var(XD_S, loop_hafnian_batch.py:118), Var(D_S, loop_hafnian_batch.py:118), Var(N_max, loop_hafnian_batch.py:93), Var(oddloop, loop_hafnian_batch.py:83), Var(oddVX_S, loop_hafnian_batch.py:118)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:18,124 on stmt: $486load_global.17 = global(range: <class 'range'>)
DEBUG 2022-02-14 16:38:18,124 on stmt: $const488.18 = const(int, 2)
DEBUG 2022-02-14 16:38:18,124 on stmt: $const492.20 = const(int, 0)
DEBUG 2022-02-14 16:38:18,124 on stmt: $494binary_subscr.21 = static_getitem(value=kept_edges, index=0, index_var=$const492.20, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:18,124 on stmt: $496binary_multiply.22 = $const488.18 * $494binary_subscr.21
DEBUG 2022-02-14 16:38:18,124 on stmt: $const498.23 = const(int, 1)
DEBUG 2022-02-14 16:38:18,124 on stmt: $500binary_add.24 = $496binary_multiply.22 + $const498.23
DEBUG 2022-02-14 16:38:18,124 on stmt: $const502.25 = const(int, 2)
DEBUG 2022-02-14 16:38:18,124 on stmt: $506binary_multiply.27 = $const502.25 * batch_max
DEBUG 2022-02-14 16:38:18,124 on stmt: $510binary_add.29 = $506binary_multiply.27 + even_cutoff
DEBUG 2022-02-14 16:38:18,124 on stmt: $const512.30 = const(int, 2)
DEBUG 2022-02-14 16:38:18,124 on stmt: $514binary_add.31 = $510binary_add.29 + $const512.30
DEBUG 2022-02-14 16:38:18,124 on stmt: $516call_function.32 = call $486load_global.17($500binary_add.24, $514binary_add.31, func=$486load_global.17, args=[Var($500binary_add.24, loop_hafnian_batch.py:131), Var($514binary_add.31, loop_hafnian_batch.py:131)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:18,124 on stmt: $518get_iter.33 = getiter(value=$516call_function.32)
DEBUG 2022-02-14 16:38:18,124 on stmt: $phi520.1 = $518get_iter.33
DEBUG 2022-02-14 16:38:18,124 on stmt: jump 520
DEBUG 2022-02-14 16:38:18,124 ==== SSA block rewrite pass on 520
DEBUG 2022-02-14 16:38:18,124 Running <numba.core.ssa._FreshVarHandler object at 0x7fa0469602e0>
DEBUG 2022-02-14 16:38:18,124 on stmt: $520for_iter.2 = iternext(value=$phi520.1)
DEBUG 2022-02-14 16:38:18,125 on stmt: $520for_iter.3 = pair_first(value=$520for_iter.2)
DEBUG 2022-02-14 16:38:18,125 on stmt: $520for_iter.4 = pair_second(value=$520for_iter.2)
DEBUG 2022-02-14 16:38:18,125 on stmt: $phi522.2 = $520for_iter.3
DEBUG 2022-02-14 16:38:18,125 on stmt: branch $520for_iter.4, 522, 656
DEBUG 2022-02-14 16:38:18,125 ==== SSA block rewrite pass on 522
DEBUG 2022-02-14 16:38:18,125 Running <numba.core.ssa._FreshVarHandler object at 0x7fa0469602e0>
DEBUG 2022-02-14 16:38:18,125 on stmt: N_det = $phi522.2
DEBUG 2022-02-14 16:38:18,125 on stmt: N = N_fixed + N_det
DEBUG 2022-02-14 16:38:18,125 on stmt: $const532.6 = const(int, -1)
DEBUG 2022-02-14 16:38:18,125 on stmt: $const536.8 = const(int, 2)
DEBUG 2022-02-14 16:38:18,125 on stmt: $538binary_floor_divide.9 = N // $const536.8
DEBUG 2022-02-14 16:38:18,125 on stmt: $542binary_subtract.11 = $538binary_floor_divide.9 - edges_sum
DEBUG 2022-02-14 16:38:18,125 on stmt: plus_minus = $const532.6 ** $542binary_subtract.11
DEBUG 2022-02-14 16:38:18,125 on stmt: $const552.15 = const(int, 1)
DEBUG 2022-02-14 16:38:18,125 on stmt: $554binary_subtract.16 = N_det - $const552.15
DEBUG 2022-02-14 16:38:18,125 on stmt: $const556.17 = const(int, 2)
DEBUG 2022-02-14 16:38:18,125 on stmt: $558binary_floor_divide.18 = $554binary_subtract.16 // $const556.17
DEBUG 2022-02-14 16:38:18,125 on stmt: $const562.20 = const(int, 0)
DEBUG 2022-02-14 16:38:18,125 on stmt: $564binary_subscr.21 = static_getitem(value=kept_edges, index=0, index_var=$const562.20, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:18,125 on stmt: $566build_tuple.22 = build_tuple(items=[Var($558binary_floor_divide.18, loop_hafnian_batch.py:135), Var($564binary_subscr.21, loop_hafnian_batch.py:135)])
DEBUG 2022-02-14 16:38:18,125 on stmt: $568binary_subscr.23 = getitem(value=binoms, index=$566build_tuple.22, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:18,125 on stmt: n_det_binom_prod = $568binary_subscr.23 * binom_prod.2
DEBUG 2022-02-14 16:38:18,125 on stmt: $const578.27 = const(int, 2)
DEBUG 2022-02-14 16:38:18,125 on stmt: $580binary_modulo.28 = N % $const578.27
DEBUG 2022-02-14 16:38:18,125 on stmt: $const582.29 = const(int, 0)
DEBUG 2022-02-14 16:38:18,125 on stmt: $584compare_op.30 = $580binary_modulo.28 == $const582.29
DEBUG 2022-02-14 16:38:18,126 on stmt: bool586 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:38:18,126 on stmt: $586pred = call bool586($584compare_op.30, func=bool586, args=(Var($584compare_op.30, loop_hafnian_batch.py:137),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:18,126 on stmt: branch $586pred, 590, 624
DEBUG 2022-02-14 16:38:18,126 ==== SSA block rewrite pass on 590
DEBUG 2022-02-14 16:38:18,126 Running <numba.core.ssa._FreshVarHandler object at 0x7fa0469602e0>
DEBUG 2022-02-14 16:38:18,126 on stmt: $596binary_subscr.6 = getitem(value=Hnew, index=N_det, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:18,126 on stmt: $602binary_multiply.9 = n_det_binom_prod * plus_minus
DEBUG 2022-02-14 16:38:18,126 on stmt: $const608.12 = const(int, 2)
DEBUG 2022-02-14 16:38:18,126 on stmt: $610binary_floor_divide.13 = N // $const608.12
DEBUG 2022-02-14 16:38:18,126 on stmt: $612binary_subscr.14 = getitem(value=f_even, index=$610binary_floor_divide.13, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:18,126 on stmt: $614binary_multiply.15 = $602binary_multiply.9 * $612binary_subscr.14
DEBUG 2022-02-14 16:38:18,126 on stmt: $616inplace_add.16 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$596binary_subscr.6, rhs=$614binary_multiply.15, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:38:18,126 on stmt: Hnew[N_det] = $616inplace_add.16
DEBUG 2022-02-14 16:38:18,126 on stmt: jump 652
DEBUG 2022-02-14 16:38:18,126 ==== SSA block rewrite pass on 624
DEBUG 2022-02-14 16:38:18,126 Running <numba.core.ssa._FreshVarHandler object at 0x7fa0469602e0>
DEBUG 2022-02-14 16:38:18,126 on stmt: $630binary_subscr.6 = getitem(value=Hnew, index=N_det, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:18,126 on stmt: $636binary_multiply.9 = n_det_binom_prod * plus_minus
DEBUG 2022-02-14 16:38:18,126 on stmt: $642binary_subscr.12 = getitem(value=f_odd, index=N, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:18,126 on stmt: $644binary_multiply.13 = $636binary_multiply.9 * $642binary_subscr.12
DEBUG 2022-02-14 16:38:18,126 on stmt: $646inplace_add.14 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$630binary_subscr.6, rhs=$644binary_multiply.13, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:38:18,126 on stmt: Hnew[N_det] = $646inplace_add.14
DEBUG 2022-02-14 16:38:18,126 on stmt: jump 652
DEBUG 2022-02-14 16:38:18,126 ==== SSA block rewrite pass on 652
DEBUG 2022-02-14 16:38:18,126 Running <numba.core.ssa._FreshVarHandler object at 0x7fa0469602e0>
DEBUG 2022-02-14 16:38:18,127 on stmt: jump 520
DEBUG 2022-02-14 16:38:18,127 ==== SSA block rewrite pass on 656
DEBUG 2022-02-14 16:38:18,127 Running <numba.core.ssa._FreshVarHandler object at 0x7fa0469602e0>
DEBUG 2022-02-14 16:38:18,127 on stmt: $660inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=H_batch, rhs=Hnew, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:38:18,127 on stmt: H_batch = $660inplace_add.3
DEBUG 2022-02-14 16:38:18,127 replaced with: H_batch.1 = $660inplace_add.3
DEBUG 2022-02-14 16:38:18,127 on stmt: jump 192
DEBUG 2022-02-14 16:38:18,127 ==== SSA block rewrite pass on 666
DEBUG 2022-02-14 16:38:18,127 Running <numba.core.ssa._FreshVarHandler object at 0x7fa0469602e0>
DEBUG 2022-02-14 16:38:18,127 on stmt: bool668 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:38:18,127 on stmt: $668pred = call bool668(glynn, func=bool668, args=(Var(glynn, loop_hafnian_batch.py:83),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:18,127 on stmt: branch $668pred, 672, 726
DEBUG 2022-02-14 16:38:18,127 ==== SSA block rewrite pass on 672
DEBUG 2022-02-14 16:38:18,127 Running <numba.core.ssa._FreshVarHandler object at 0x7fa0469602e0>
DEBUG 2022-02-14 16:38:18,127 on stmt: $672load_global.0 = global(range: <class 'range'>)
DEBUG 2022-02-14 16:38:18,127 on stmt: $676load_attr.2 = getattr(value=H_batch, attr=shape)
DEBUG 2022-02-14 16:38:18,127 on stmt: $const678.3 = const(int, 0)
DEBUG 2022-02-14 16:38:18,127 on stmt: $680binary_subscr.4 = static_getitem(value=$676load_attr.2, index=0, index_var=$const678.3, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:18,127 on stmt: $682call_function.5 = call $672load_global.0($680binary_subscr.4, func=$672load_global.0, args=[Var($680binary_subscr.4, loop_hafnian_batch.py:145)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:18,127 on stmt: $684get_iter.6 = getiter(value=$682call_function.5)
DEBUG 2022-02-14 16:38:18,127 on stmt: $phi686.0 = $684get_iter.6
DEBUG 2022-02-14 16:38:18,127 on stmt: jump 686
DEBUG 2022-02-14 16:38:18,127 ==== SSA block rewrite pass on 686
DEBUG 2022-02-14 16:38:18,127 Running <numba.core.ssa._FreshVarHandler object at 0x7fa0469602e0>
DEBUG 2022-02-14 16:38:18,127 on stmt: $686for_iter.1 = iternext(value=$phi686.0)
DEBUG 2022-02-14 16:38:18,127 on stmt: $686for_iter.2 = pair_first(value=$686for_iter.1)
DEBUG 2022-02-14 16:38:18,127 on stmt: $686for_iter.3 = pair_second(value=$686for_iter.1)
DEBUG 2022-02-14 16:38:18,127 on stmt: $phi688.1 = $686for_iter.2
DEBUG 2022-02-14 16:38:18,128 on stmt: branch $686for_iter.3, 688, 726
DEBUG 2022-02-14 16:38:18,128 ==== SSA block rewrite pass on 688
DEBUG 2022-02-14 16:38:18,128 Running <numba.core.ssa._FreshVarHandler object at 0x7fa0469602e0>
DEBUG 2022-02-14 16:38:18,128 on stmt: j.1 = $phi688.1
DEBUG 2022-02-14 16:38:18,128 on stmt: x = N_fixed + j.1
DEBUG 2022-02-14 16:38:18,128 on stmt: $704binary_subscr.9 = getitem(value=H_batch, index=j.1, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:18,128 on stmt: $const706.10 = const(float, 0.5)
DEBUG 2022-02-14 16:38:18,128 on stmt: $const710.12 = const(int, 2)
DEBUG 2022-02-14 16:38:18,128 on stmt: $712binary_floor_divide.13 = x // $const710.12
DEBUG 2022-02-14 16:38:18,128 on stmt: $714binary_power.14 = $const706.10 ** $712binary_floor_divide.13
DEBUG 2022-02-14 16:38:18,128 on stmt: $716inplace_multiply.15 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=$704binary_subscr.9, rhs=$714binary_power.14, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:38:18,128 on stmt: H_batch[j.1] = $716inplace_multiply.15
DEBUG 2022-02-14 16:38:18,128 on stmt: jump 686
DEBUG 2022-02-14 16:38:18,128 ==== SSA block rewrite pass on 726
DEBUG 2022-02-14 16:38:18,128 Running <numba.core.ssa._FreshVarHandler object at 0x7fa0469602e0>
DEBUG 2022-02-14 16:38:18,128 on stmt: $728return_value.1 = cast(value=H_batch)
DEBUG 2022-02-14 16:38:18,128 on stmt: return $728return_value.1
DEBUG 2022-02-14 16:38:18,128 Replaced assignments: defaultdict(<class 'list'>,
            {0: [<numba.core.ir.Assign object at 0x7fa041ed47f0>],
             656: [<numba.core.ir.Assign object at 0x7fa041ed4a00>]})
DEBUG 2022-02-14 16:38:18,128 ==== SSA block rewrite pass on 0
DEBUG 2022-02-14 16:38:18,128 Running <numba.core.ssa._FixSSAVars object at 0x7fa041ed6f10>
DEBUG 2022-02-14 16:38:18,128 on stmt: A = arg(0, name=A)
DEBUG 2022-02-14 16:38:18,128 on stmt: D = arg(1, name=D)
DEBUG 2022-02-14 16:38:18,128 on stmt: fixed_edge_reps = arg(2, name=fixed_edge_reps)
DEBUG 2022-02-14 16:38:18,128 on stmt: batch_max = arg(3, name=batch_max)
DEBUG 2022-02-14 16:38:18,128 on stmt: even_cutoff = arg(4, name=even_cutoff)
DEBUG 2022-02-14 16:38:18,128 on stmt: oddmode = arg(5, name=oddmode)
DEBUG 2022-02-14 16:38:18,128 on stmt: glynn = arg(6, name=glynn)
DEBUG 2022-02-14 16:38:18,129 on stmt: $const4.1 = const(int, 0)
DEBUG 2022-02-14 16:38:18,129 on stmt: oddloop = static_getitem(value=D, index=0, index_var=$const4.1, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:18,129 on stmt: $const12.4 = const(int, 0)
DEBUG 2022-02-14 16:38:18,129 on stmt: $const14.5 = const(NoneType, None)
DEBUG 2022-02-14 16:38:18,129 on stmt: $const16.6 = const(NoneType, None)
DEBUG 2022-02-14 16:38:18,129 on stmt: $18build_slice.7 = global(slice: <class 'slice'>)
DEBUG 2022-02-14 16:38:18,129 on stmt: $18build_slice.8 = call $18build_slice.7($const14.5, $const16.6, func=$18build_slice.7, args=(Var($const14.5, loop_hafnian_batch.py:84), Var($const16.6, loop_hafnian_batch.py:84)), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:18,129 on stmt: $20build_tuple.9 = build_tuple(items=[Var($const12.4, loop_hafnian_batch.py:84), Var($18build_slice.8, loop_hafnian_batch.py:84)])
DEBUG 2022-02-14 16:38:18,129 on stmt: oddV = static_getitem(value=A, index=(0, slice(None, None, None)), index_var=$20build_tuple.9, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:18,129 on stmt: $const28.12 = const(int, 1)
DEBUG 2022-02-14 16:38:18,129 on stmt: oddloop0 = static_getitem(value=D, index=1, index_var=$const28.12, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:18,129 on stmt: $const36.15 = const(int, 1)
DEBUG 2022-02-14 16:38:18,129 on stmt: $const38.16 = const(NoneType, None)
DEBUG 2022-02-14 16:38:18,129 on stmt: $const40.17 = const(NoneType, None)
DEBUG 2022-02-14 16:38:18,129 on stmt: $42build_slice.18 = global(slice: <class 'slice'>)
DEBUG 2022-02-14 16:38:18,129 on stmt: $42build_slice.19 = call $42build_slice.18($const38.16, $const40.17, func=$42build_slice.18, args=(Var($const38.16, loop_hafnian_batch.py:89), Var($const40.17, loop_hafnian_batch.py:89)), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:18,129 on stmt: $44build_tuple.20 = build_tuple(items=[Var($const36.15, loop_hafnian_batch.py:89), Var($42build_slice.19, loop_hafnian_batch.py:89)])
DEBUG 2022-02-14 16:38:18,129 on stmt: oddV0 = static_getitem(value=A, index=(1, slice(None, None, None)), index_var=$44build_tuple.20, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:18,129 on stmt: $52load_attr.23 = getattr(value=A, attr=shape)
DEBUG 2022-02-14 16:38:18,129 on stmt: $const54.24 = const(int, 0)
DEBUG 2022-02-14 16:38:18,129 on stmt: n = static_getitem(value=$52load_attr.23, index=0, index_var=$const54.24, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:18,129 on stmt: $const60.26 = const(int, 2)
DEBUG 2022-02-14 16:38:18,129 on stmt: $64load_method.28 = getattr(value=fixed_edge_reps, attr=sum)
DEBUG 2022-02-14 16:38:18,129 on stmt: $66call_method.29 = call $64load_method.28(func=$64load_method.28, args=[], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:18,129 on stmt: $68binary_multiply.30 = $const60.26 * $66call_method.29
DEBUG 2022-02-14 16:38:18,129 on stmt: $const70.31 = const(int, 1)
DEBUG 2022-02-14 16:38:18,130 on stmt: N_fixed = $68binary_multiply.30 + $const70.31
DEBUG 2022-02-14 16:38:18,130 on stmt: $const78.34 = const(int, 2)
DEBUG 2022-02-14 16:38:18,130 on stmt: $82binary_multiply.36 = $const78.34 * batch_max
DEBUG 2022-02-14 16:38:18,130 on stmt: $84binary_add.37 = N_fixed + $82binary_multiply.36
DEBUG 2022-02-14 16:38:18,130 on stmt: $88binary_add.39 = $84binary_add.37 + even_cutoff
DEBUG 2022-02-14 16:38:18,130 on stmt: $const90.40 = const(int, 1)
DEBUG 2022-02-14 16:38:18,130 on stmt: N_max = $88binary_add.39 + $const90.40
DEBUG 2022-02-14 16:38:18,130 on stmt: $96load_global.42 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:38:18,130 on stmt: $98load_method.43 = getattr(value=$96load_global.42, attr=concatenate)
DEBUG 2022-02-14 16:38:18,130 on stmt: $100load_global.44 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:38:18,130 on stmt: $102load_method.45 = getattr(value=$100load_global.44, attr=array)
DEBUG 2022-02-14 16:38:18,130 on stmt: $const106.47 = const(int, 1)
DEBUG 2022-02-14 16:38:18,130 on stmt: $108build_list.48 = build_list(items=[Var(batch_max, loop_hafnian_batch.py:83), Var($const106.47, loop_hafnian_batch.py:95)])
DEBUG 2022-02-14 16:38:18,130 on stmt: $110call_method.49 = call $102load_method.45($108build_list.48, func=$102load_method.45, args=[Var($108build_list.48, loop_hafnian_batch.py:95)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:18,130 on stmt: $114build_tuple.51 = build_tuple(items=[Var($110call_method.49, loop_hafnian_batch.py:95), Var(fixed_edge_reps, loop_hafnian_batch.py:83)])
DEBUG 2022-02-14 16:38:18,130 on stmt: edge_reps = call $98load_method.43($114build_tuple.51, func=$98load_method.43, args=[Var($114build_tuple.51, loop_hafnian_batch.py:95)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:18,130 on stmt: $120load_global.53 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:38:18,130 on stmt: $122load_method.54 = getattr(value=$120load_global.53, attr=prod)
DEBUG 2022-02-14 16:38:18,130 on stmt: $const126.56 = const(int, 1)
DEBUG 2022-02-14 16:38:18,130 on stmt: $128binary_add.57 = edge_reps + $const126.56
DEBUG 2022-02-14 16:38:18,130 on stmt: steps = call $122load_method.54($128binary_add.57, func=$122load_method.54, args=[Var($128binary_add.57, loop_hafnian_batch.py:96)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:18,130 on stmt: $136load_method.60 = getattr(value=edge_reps, attr=max)
DEBUG 2022-02-14 16:38:18,131 on stmt: $138call_method.61 = call $136load_method.60(func=$136load_method.60, args=[], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:18,131 on stmt: max_binom = $138call_method.61 + even_cutoff
DEBUG 2022-02-14 16:38:18,131 on stmt: $146load_global.64 = global(precompute_binoms: CPUDispatcher(<function precompute_binoms at 0x7fa047ebe310>))
DEBUG 2022-02-14 16:38:18,131 on stmt: binoms = call $146load_global.64(max_binom, func=$146load_global.64, args=[Var(max_binom, loop_hafnian_batch.py:98)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:18,131 on stmt: $154load_global.67 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:38:18,131 on stmt: $156load_attr.68 = getattr(value=$154load_global.67, attr=zeros)
DEBUG 2022-02-14 16:38:18,131 on stmt: $const158.69 = const(int, 2)
DEBUG 2022-02-14 16:38:18,131 on stmt: $162binary_multiply.71 = $const158.69 * batch_max
DEBUG 2022-02-14 16:38:18,131 on stmt: $166binary_add.73 = $162binary_multiply.71 + even_cutoff
DEBUG 2022-02-14 16:38:18,131 on stmt: $const168.74 = const(int, 2)
DEBUG 2022-02-14 16:38:18,131 on stmt: $170binary_add.75 = $166binary_add.73 + $const168.74
DEBUG 2022-02-14 16:38:18,131 on stmt: $172load_global.76 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:38:18,131 on stmt: $174load_attr.77 = getattr(value=$172load_global.76, attr=complex128)
DEBUG 2022-02-14 16:38:18,131 on stmt: H_batch = call $156load_attr.68($170binary_add.75, func=$156load_attr.68, args=[Var($170binary_add.75, loop_hafnian_batch.py:101)], kws=[('dtype', Var($174load_attr.77, loop_hafnian_batch.py:101))], vararg=None, target=None)
DEBUG 2022-02-14 16:38:18,131 on stmt: $182load_global.80 = global(numba: <module 'numba' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numba/__init__.py'>)
DEBUG 2022-02-14 16:38:18,131 on stmt: $184load_method.81 = getattr(value=$182load_global.80, attr=prange)
DEBUG 2022-02-14 16:38:18,131 on stmt: $188call_method.83 = call $184load_method.81(steps, func=$184load_method.81, args=[Var(steps, loop_hafnian_batch.py:96)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:18,131 on stmt: $190get_iter.84 = getiter(value=$188call_method.83)
DEBUG 2022-02-14 16:38:18,131 on stmt: $phi192.0 = $190get_iter.84
DEBUG 2022-02-14 16:38:18,131 on stmt: jump 192
DEBUG 2022-02-14 16:38:18,131 ==== SSA block rewrite pass on 192
DEBUG 2022-02-14 16:38:18,131 Running <numba.core.ssa._FixSSAVars object at 0x7fa041ed6f10>
DEBUG 2022-02-14 16:38:18,131 on stmt: $192for_iter.1 = iternext(value=$phi192.0)
DEBUG 2022-02-14 16:38:18,131 on stmt: $192for_iter.2 = pair_first(value=$192for_iter.1)
DEBUG 2022-02-14 16:38:18,131 on stmt: $192for_iter.3 = pair_second(value=$192for_iter.1)
DEBUG 2022-02-14 16:38:18,132 on stmt: $phi196.1 = $192for_iter.2
DEBUG 2022-02-14 16:38:18,132 on stmt: branch $192for_iter.3, 196, 666
DEBUG 2022-02-14 16:38:18,132 ==== SSA block rewrite pass on 196
DEBUG 2022-02-14 16:38:18,132 Running <numba.core.ssa._FixSSAVars object at 0x7fa041ed6f10>
DEBUG 2022-02-14 16:38:18,132 on stmt: j = $phi196.1
DEBUG 2022-02-14 16:38:18,132 on stmt: $198load_global.2 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:38:18,132 on stmt: $200load_attr.3 = getattr(value=$198load_global.2, attr=zeros)
DEBUG 2022-02-14 16:38:18,132 on stmt: $const202.4 = const(int, 2)
DEBUG 2022-02-14 16:38:18,132 on stmt: $206binary_multiply.6 = $const202.4 * batch_max
DEBUG 2022-02-14 16:38:18,132 on stmt: $210binary_add.8 = $206binary_multiply.6 + even_cutoff
DEBUG 2022-02-14 16:38:18,132 on stmt: $const212.9 = const(int, 2)
DEBUG 2022-02-14 16:38:18,132 on stmt: $214binary_add.10 = $210binary_add.8 + $const212.9
DEBUG 2022-02-14 16:38:18,132 on stmt: $216load_global.11 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:38:18,132 on stmt: $218load_attr.12 = getattr(value=$216load_global.11, attr=complex128)
DEBUG 2022-02-14 16:38:18,132 on stmt: Hnew = call $200load_attr.3($214binary_add.10, func=$200load_attr.3, args=[Var($214binary_add.10, loop_hafnian_batch.py:104)], kws=[('dtype', Var($218load_attr.12, loop_hafnian_batch.py:104))], vararg=None, target=None)
DEBUG 2022-02-14 16:38:18,132 on stmt: $226load_global.15 = global(find_kept_edges: CPUDispatcher(<function find_kept_edges at 0x7fa047ebe790>))
DEBUG 2022-02-14 16:38:18,132 on stmt: kept_edges = call $226load_global.15(j, edge_reps, func=$226load_global.15, args=[Var(j, loop_hafnian_batch.py:102), Var(edge_reps, loop_hafnian_batch.py:95)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:18,132 on stmt: $238load_method.20 = getattr(value=kept_edges, attr=sum)
DEBUG 2022-02-14 16:38:18,132 on stmt: edges_sum = call $238load_method.20(func=$238load_method.20, args=[], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:18,132 on stmt: binom_prod = const(float, 1.0)
DEBUG 2022-02-14 16:38:18,132 on stmt: $248load_global.23 = global(range: <class 'range'>)
DEBUG 2022-02-14 16:38:18,132 on stmt: $const250.24 = const(int, 1)
DEBUG 2022-02-14 16:38:18,132 on stmt: $const254.26 = const(int, 2)
DEBUG 2022-02-14 16:38:18,132 on stmt: $256binary_floor_divide.27 = n // $const254.26
DEBUG 2022-02-14 16:38:18,132 on stmt: $258call_function.28 = call $248load_global.23($const250.24, $256binary_floor_divide.27, func=$248load_global.23, args=[Var($const250.24, loop_hafnian_batch.py:110), Var($256binary_floor_divide.27, loop_hafnian_batch.py:110)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:18,132 on stmt: $260get_iter.29 = getiter(value=$258call_function.28)
DEBUG 2022-02-14 16:38:18,133 on stmt: $phi262.1 = $260get_iter.29
DEBUG 2022-02-14 16:38:18,133 on stmt: jump 262
DEBUG 2022-02-14 16:38:18,133 ==== SSA block rewrite pass on 262
DEBUG 2022-02-14 16:38:18,133 Running <numba.core.ssa._FixSSAVars object at 0x7fa041ed6f10>
DEBUG 2022-02-14 16:38:18,133 on stmt: binom_prod.2 = phi(incoming_values=[Var(binom_prod.1, loop_hafnian_batch.py:111), Var(binom_prod, loop_hafnian_batch.py:109)], incoming_blocks=[264, 196])
DEBUG 2022-02-14 16:38:18,133 on stmt: $262for_iter.2 = iternext(value=$phi262.1)
DEBUG 2022-02-14 16:38:18,133 on stmt: $262for_iter.3 = pair_first(value=$262for_iter.2)
DEBUG 2022-02-14 16:38:18,133 on stmt: $262for_iter.4 = pair_second(value=$262for_iter.2)
DEBUG 2022-02-14 16:38:18,133 on stmt: $phi264.2 = $262for_iter.3
DEBUG 2022-02-14 16:38:18,133 on stmt: branch $262for_iter.4, 264, 294
DEBUG 2022-02-14 16:38:18,133 ==== SSA block rewrite pass on 264
DEBUG 2022-02-14 16:38:18,133 Running <numba.core.ssa._FixSSAVars object at 0x7fa041ed6f10>
DEBUG 2022-02-14 16:38:18,133 on stmt: i = $phi264.2
DEBUG 2022-02-14 16:38:18,133 on stmt: $274binary_subscr.7 = getitem(value=edge_reps, index=i, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:18,133 on stmt: $280binary_subscr.10 = getitem(value=kept_edges, index=i, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:18,133 on stmt: $282build_tuple.11 = build_tuple(items=[Var($274binary_subscr.7, loop_hafnian_batch.py:111), Var($280binary_subscr.10, loop_hafnian_batch.py:111)])
DEBUG 2022-02-14 16:38:18,133 on stmt: $284binary_subscr.12 = getitem(value=binoms, index=$282build_tuple.11, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:18,133 on stmt: $286inplace_multiply.13 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=binom_prod.2, rhs=$284binary_subscr.12, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:38:18,133 on stmt: binom_prod.1 = $286inplace_multiply.13
DEBUG 2022-02-14 16:38:18,133 on stmt: jump 262
DEBUG 2022-02-14 16:38:18,133 ==== SSA block rewrite pass on 294
DEBUG 2022-02-14 16:38:18,133 Running <numba.core.ssa._FixSSAVars object at 0x7fa041ed6f10>
DEBUG 2022-02-14 16:38:18,133 on stmt: bool296 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:38:18,133 on stmt: $296pred = call bool296(glynn, func=bool296, args=(Var(glynn, loop_hafnian_batch.py:83),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:18,133 on stmt: branch $296pred, 300, 314
DEBUG 2022-02-14 16:38:18,133 ==== SSA block rewrite pass on 300
DEBUG 2022-02-14 16:38:18,133 Running <numba.core.ssa._FixSSAVars object at 0x7fa041ed6f10>
DEBUG 2022-02-14 16:38:18,134 on stmt: $const300.1 = const(int, 2)
DEBUG 2022-02-14 16:38:18,134 on stmt: $304binary_multiply.3 = $const300.1 * kept_edges
DEBUG 2022-02-14 16:38:18,134 on stmt: delta = $304binary_multiply.3 - edge_reps
DEBUG 2022-02-14 16:38:18,134 on stmt: jump 318
DEBUG 2022-02-14 16:38:18,134 ==== SSA block rewrite pass on 314
DEBUG 2022-02-14 16:38:18,134 Running <numba.core.ssa._FixSSAVars object at 0x7fa041ed6f10>
DEBUG 2022-02-14 16:38:18,134 on stmt: delta = kept_edges
DEBUG 2022-02-14 16:38:18,134 on stmt: jump 318
DEBUG 2022-02-14 16:38:18,134 ==== SSA block rewrite pass on 318
DEBUG 2022-02-14 16:38:18,134 Running <numba.core.ssa._FixSSAVars object at 0x7fa041ed6f10>
DEBUG 2022-02-14 16:38:18,134 on stmt: $318load_global.1 = global(get_submatrices: CPUDispatcher(<function get_submatrices at 0x7fa047ebed30>))
DEBUG 2022-02-14 16:38:18,134 on stmt: $328call_function.6 = call $318load_global.1(delta, A, D, oddV, func=$318load_global.1, args=[Var(delta, loop_hafnian_batch.py:114), Var(A, loop_hafnian_batch.py:83), Var(D, loop_hafnian_batch.py:83), Var(oddV, loop_hafnian_batch.py:84)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:18,134 on stmt: $330unpack_sequence.11 = exhaust_iter(value=$328call_function.6, count=4)
DEBUG 2022-02-14 16:38:18,134 on stmt: $330unpack_sequence.7 = static_getitem(value=$330unpack_sequence.11, index=0, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:18,134 on stmt: $330unpack_sequence.8 = static_getitem(value=$330unpack_sequence.11, index=1, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:18,134 on stmt: $330unpack_sequence.9 = static_getitem(value=$330unpack_sequence.11, index=2, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:18,134 on stmt: $330unpack_sequence.10 = static_getitem(value=$330unpack_sequence.11, index=3, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:18,134 on stmt: AX_S = $330unpack_sequence.7
DEBUG 2022-02-14 16:38:18,134 on stmt: XD_S = $330unpack_sequence.8
DEBUG 2022-02-14 16:38:18,134 on stmt: D_S = $330unpack_sequence.9
DEBUG 2022-02-14 16:38:18,134 on stmt: oddVX_S = $330unpack_sequence.10
DEBUG 2022-02-14 16:38:18,134 on stmt: $340load_global.12 = global(eigvals: CPUDispatcher(<function eigvals at 0x7fa047e5d430>))
DEBUG 2022-02-14 16:38:18,134 on stmt: E = call $340load_global.12(AX_S, func=$340load_global.12, args=[Var(AX_S, loop_hafnian_batch.py:118)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:18,134 on stmt: $const350.16 = const(int, 0)
DEBUG 2022-02-14 16:38:18,135 on stmt: $352binary_subscr.17 = static_getitem(value=kept_edges, index=0, index_var=$const350.16, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:18,135 on stmt: $const354.18 = const(int, 0)
DEBUG 2022-02-14 16:38:18,135 on stmt: $356compare_op.19 = $352binary_subscr.17 == $const354.18
DEBUG 2022-02-14 16:38:18,135 on stmt: bool358 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:38:18,135 on stmt: $358pred = call bool358($356compare_op.19, func=bool358, args=(Var($356compare_op.19, loop_hafnian_batch.py:122),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:18,135 on stmt: branch $358pred, 362, 450
DEBUG 2022-02-14 16:38:18,135 ==== SSA block rewrite pass on 362
DEBUG 2022-02-14 16:38:18,135 Running <numba.core.ssa._FixSSAVars object at 0x7fa041ed6f10>
DEBUG 2022-02-14 16:38:18,135 on stmt: $const364.2 = const(int, 1)
DEBUG 2022-02-14 16:38:18,135 on stmt: $366binary_subscr.3 = static_getitem(value=kept_edges, index=1, index_var=$const364.2, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:18,135 on stmt: $const368.4 = const(int, 0)
DEBUG 2022-02-14 16:38:18,135 on stmt: $370compare_op.5 = $366binary_subscr.3 == $const368.4
DEBUG 2022-02-14 16:38:18,135 on stmt: bool372 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:38:18,135 on stmt: $372pred = call bool372($370compare_op.5, func=bool372, args=(Var($370compare_op.5, loop_hafnian_batch.py:122),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:18,135 on stmt: branch $372pred, 376, 450
DEBUG 2022-02-14 16:38:18,135 ==== SSA block rewrite pass on 376
DEBUG 2022-02-14 16:38:18,135 Running <numba.core.ssa._FixSSAVars object at 0x7fa041ed6f10>
DEBUG 2022-02-14 16:38:18,135 on stmt: $376load_global.1 = global(get_submatrix_batch_odd0: CPUDispatcher(<function get_submatrix_batch_odd0 at 0x7fa047ebef70>))
DEBUG 2022-02-14 16:38:18,135 on stmt: oddVX_S0 = call $376load_global.1(delta, oddV0, func=$376load_global.1, args=[Var(delta, loop_hafnian_batch.py:114), Var(oddV0, loop_hafnian_batch.py:89)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:18,135 on stmt: $const386.5 = const(int, -1)
DEBUG 2022-02-14 16:38:18,135 on stmt: $const390.7 = const(int, 2)
DEBUG 2022-02-14 16:38:18,135 on stmt: $392binary_floor_divide.8 = N_fixed // $const390.7
DEBUG 2022-02-14 16:38:18,135 on stmt: $396binary_subtract.10 = $392binary_floor_divide.8 - edges_sum
DEBUG 2022-02-14 16:38:18,135 on stmt: plus_minus = $const386.5 ** $396binary_subtract.10
DEBUG 2022-02-14 16:38:18,135 on stmt: $402load_global.12 = global(f_loop_odd: CPUDispatcher(<function f_loop_odd at 0x7fa047ebeb80>))
DEBUG 2022-02-14 16:38:18,136 on stmt: $418call_function.20 = call $402load_global.12(E, AX_S, XD_S, D_S, N_fixed, oddloop0, oddVX_S0, func=$402load_global.12, args=[Var(E, loop_hafnian_batch.py:120), Var(AX_S, loop_hafnian_batch.py:118), Var(XD_S, loop_hafnian_batch.py:118), Var(D_S, loop_hafnian_batch.py:118), Var(N_fixed, loop_hafnian_batch.py:92), Var(oddloop0, loop_hafnian_batch.py:88), Var(oddVX_S0, loop_hafnian_batch.py:123)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:18,136 on stmt: f = getitem(value=$418call_function.20, index=N_fixed, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:18,136 on stmt: $const428.24 = const(int, 0)
DEBUG 2022-02-14 16:38:18,136 on stmt: $432binary_subscr.27 = static_getitem(value=H_batch, index=0, index_var=$const428.24, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:18,136 find_def var='H_batch' stmt=$432binary_subscr.27 = static_getitem(value=H_batch, index=0, index_var=$const428.24, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:18,136 find_def_from_top label 376
DEBUG 2022-02-14 16:38:18,136 idom 362 from label 376
DEBUG 2022-02-14 16:38:18,136 find_def_from_bottom label 362
DEBUG 2022-02-14 16:38:18,136 find_def_from_top label 362
DEBUG 2022-02-14 16:38:18,136 idom 318 from label 362
DEBUG 2022-02-14 16:38:18,136 find_def_from_bottom label 318
DEBUG 2022-02-14 16:38:18,136 find_def_from_top label 318
DEBUG 2022-02-14 16:38:18,136 idom 294 from label 318
DEBUG 2022-02-14 16:38:18,136 find_def_from_bottom label 294
DEBUG 2022-02-14 16:38:18,136 find_def_from_top label 294
DEBUG 2022-02-14 16:38:18,136 idom 262 from label 294
DEBUG 2022-02-14 16:38:18,136 find_def_from_bottom label 262
DEBUG 2022-02-14 16:38:18,136 find_def_from_top label 262
DEBUG 2022-02-14 16:38:18,136 idom 196 from label 262
DEBUG 2022-02-14 16:38:18,136 find_def_from_bottom label 196
DEBUG 2022-02-14 16:38:18,136 find_def_from_top label 196
DEBUG 2022-02-14 16:38:18,136 idom 192 from label 196
DEBUG 2022-02-14 16:38:18,136 find_def_from_bottom label 192
DEBUG 2022-02-14 16:38:18,136 find_def_from_top label 192
DEBUG 2022-02-14 16:38:18,136 insert phi node H_batch.2 = phi(incoming_values=[], incoming_blocks=[]) at 192
DEBUG 2022-02-14 16:38:18,136 find_def_from_bottom label 0
DEBUG 2022-02-14 16:38:18,136 incoming_def H_batch = call $156load_attr.68($170binary_add.75, func=$156load_attr.68, args=[Var($170binary_add.75, loop_hafnian_batch.py:101)], kws=[('dtype', Var($174load_attr.77, loop_hafnian_batch.py:101))], vararg=None, target=None)
DEBUG 2022-02-14 16:38:18,137 find_def_from_bottom label 656
DEBUG 2022-02-14 16:38:18,137 incoming_def H_batch.1 = $660inplace_add.3
DEBUG 2022-02-14 16:38:18,137 replaced with: $432binary_subscr.27 = static_getitem(value=H_batch.2, index=0, index_var=$const428.24, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:18,137 on stmt: $438binary_multiply.30 = binom_prod.2 * plus_minus
DEBUG 2022-02-14 16:38:18,137 on stmt: $442binary_multiply.32 = $438binary_multiply.30 * f
DEBUG 2022-02-14 16:38:18,137 on stmt: $444inplace_add.33 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$432binary_subscr.27, rhs=$442binary_multiply.32, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:38:18,137 on stmt: H_batch[0] = $444inplace_add.33
DEBUG 2022-02-14 16:38:18,137 find_def var='H_batch' stmt=H_batch[0] = $444inplace_add.33
DEBUG 2022-02-14 16:38:18,137 find_def_from_top label 376
DEBUG 2022-02-14 16:38:18,137 idom 362 from label 376
DEBUG 2022-02-14 16:38:18,137 find_def_from_bottom label 362
DEBUG 2022-02-14 16:38:18,137 find_def_from_top label 362
DEBUG 2022-02-14 16:38:18,137 idom 318 from label 362
DEBUG 2022-02-14 16:38:18,137 find_def_from_bottom label 318
DEBUG 2022-02-14 16:38:18,137 find_def_from_top label 318
DEBUG 2022-02-14 16:38:18,137 idom 294 from label 318
DEBUG 2022-02-14 16:38:18,137 find_def_from_bottom label 294
DEBUG 2022-02-14 16:38:18,137 find_def_from_top label 294
DEBUG 2022-02-14 16:38:18,137 idom 262 from label 294
DEBUG 2022-02-14 16:38:18,137 find_def_from_bottom label 262
DEBUG 2022-02-14 16:38:18,137 find_def_from_top label 262
DEBUG 2022-02-14 16:38:18,137 idom 196 from label 262
DEBUG 2022-02-14 16:38:18,137 find_def_from_bottom label 196
DEBUG 2022-02-14 16:38:18,137 find_def_from_top label 196
DEBUG 2022-02-14 16:38:18,138 idom 192 from label 196
DEBUG 2022-02-14 16:38:18,138 find_def_from_bottom label 192
DEBUG 2022-02-14 16:38:18,138 replaced with: H_batch.2[0] = $444inplace_add.33
DEBUG 2022-02-14 16:38:18,138 on stmt: jump 450
DEBUG 2022-02-14 16:38:18,138 ==== SSA block rewrite pass on 450
DEBUG 2022-02-14 16:38:18,138 Running <numba.core.ssa._FixSSAVars object at 0x7fa041ed6f10>
DEBUG 2022-02-14 16:38:18,138 on stmt: $450load_global.1 = global(f_loop: CPUDispatcher(<function f_loop at 0x7fa047ebe9d0>))
DEBUG 2022-02-14 16:38:18,138 on stmt: f_even = call $450load_global.1(E, AX_S, XD_S, D_S, N_max, func=$450load_global.1, args=[Var(E, loop_hafnian_batch.py:120), Var(AX_S, loop_hafnian_batch.py:118), Var(XD_S, loop_hafnian_batch.py:118), Var(D_S, loop_hafnian_batch.py:118), Var(N_max, loop_hafnian_batch.py:93)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:18,138 on stmt: $466load_global.8 = global(f_loop_odd: CPUDispatcher(<function f_loop_odd at 0x7fa047ebeb80>))
DEBUG 2022-02-14 16:38:18,138 on stmt: f_odd = call $466load_global.8(E, AX_S, XD_S, D_S, N_max, oddloop, oddVX_S, func=$466load_global.8, args=[Var(E, loop_hafnian_batch.py:120), Var(AX_S, loop_hafnian_batch.py:118), Var(XD_S, loop_hafnian_batch.py:118), Var(D_S, loop_hafnian_batch.py:118), Var(N_max, loop_hafnian_batch.py:93), Var(oddloop, loop_hafnian_batch.py:83), Var(oddVX_S, loop_hafnian_batch.py:118)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:18,138 on stmt: $486load_global.17 = global(range: <class 'range'>)
DEBUG 2022-02-14 16:38:18,138 on stmt: $const488.18 = const(int, 2)
DEBUG 2022-02-14 16:38:18,138 on stmt: $const492.20 = const(int, 0)
DEBUG 2022-02-14 16:38:18,138 on stmt: $494binary_subscr.21 = static_getitem(value=kept_edges, index=0, index_var=$const492.20, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:18,138 on stmt: $496binary_multiply.22 = $const488.18 * $494binary_subscr.21
DEBUG 2022-02-14 16:38:18,138 on stmt: $const498.23 = const(int, 1)
DEBUG 2022-02-14 16:38:18,138 on stmt: $500binary_add.24 = $496binary_multiply.22 + $const498.23
DEBUG 2022-02-14 16:38:18,138 on stmt: $const502.25 = const(int, 2)
DEBUG 2022-02-14 16:38:18,138 on stmt: $506binary_multiply.27 = $const502.25 * batch_max
DEBUG 2022-02-14 16:38:18,138 on stmt: $510binary_add.29 = $506binary_multiply.27 + even_cutoff
DEBUG 2022-02-14 16:38:18,138 on stmt: $const512.30 = const(int, 2)
DEBUG 2022-02-14 16:38:18,138 on stmt: $514binary_add.31 = $510binary_add.29 + $const512.30
DEBUG 2022-02-14 16:38:18,139 on stmt: $516call_function.32 = call $486load_global.17($500binary_add.24, $514binary_add.31, func=$486load_global.17, args=[Var($500binary_add.24, loop_hafnian_batch.py:131), Var($514binary_add.31, loop_hafnian_batch.py:131)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:18,139 on stmt: $518get_iter.33 = getiter(value=$516call_function.32)
DEBUG 2022-02-14 16:38:18,139 on stmt: $phi520.1 = $518get_iter.33
DEBUG 2022-02-14 16:38:18,139 on stmt: jump 520
DEBUG 2022-02-14 16:38:18,139 ==== SSA block rewrite pass on 520
DEBUG 2022-02-14 16:38:18,139 Running <numba.core.ssa._FixSSAVars object at 0x7fa041ed6f10>
DEBUG 2022-02-14 16:38:18,139 on stmt: $520for_iter.2 = iternext(value=$phi520.1)
DEBUG 2022-02-14 16:38:18,139 on stmt: $520for_iter.3 = pair_first(value=$520for_iter.2)
DEBUG 2022-02-14 16:38:18,139 on stmt: $520for_iter.4 = pair_second(value=$520for_iter.2)
DEBUG 2022-02-14 16:38:18,139 on stmt: $phi522.2 = $520for_iter.3
DEBUG 2022-02-14 16:38:18,139 on stmt: branch $520for_iter.4, 522, 656
DEBUG 2022-02-14 16:38:18,139 ==== SSA block rewrite pass on 522
DEBUG 2022-02-14 16:38:18,139 Running <numba.core.ssa._FixSSAVars object at 0x7fa041ed6f10>
DEBUG 2022-02-14 16:38:18,139 on stmt: N_det = $phi522.2
DEBUG 2022-02-14 16:38:18,139 on stmt: N = N_fixed + N_det
DEBUG 2022-02-14 16:38:18,139 on stmt: $const532.6 = const(int, -1)
DEBUG 2022-02-14 16:38:18,139 on stmt: $const536.8 = const(int, 2)
DEBUG 2022-02-14 16:38:18,139 on stmt: $538binary_floor_divide.9 = N // $const536.8
DEBUG 2022-02-14 16:38:18,139 on stmt: $542binary_subtract.11 = $538binary_floor_divide.9 - edges_sum
DEBUG 2022-02-14 16:38:18,139 on stmt: plus_minus = $const532.6 ** $542binary_subtract.11
DEBUG 2022-02-14 16:38:18,139 on stmt: $const552.15 = const(int, 1)
DEBUG 2022-02-14 16:38:18,139 on stmt: $554binary_subtract.16 = N_det - $const552.15
DEBUG 2022-02-14 16:38:18,139 on stmt: $const556.17 = const(int, 2)
DEBUG 2022-02-14 16:38:18,139 on stmt: $558binary_floor_divide.18 = $554binary_subtract.16 // $const556.17
DEBUG 2022-02-14 16:38:18,139 on stmt: $const562.20 = const(int, 0)
DEBUG 2022-02-14 16:38:18,139 on stmt: $564binary_subscr.21 = static_getitem(value=kept_edges, index=0, index_var=$const562.20, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:18,140 on stmt: $566build_tuple.22 = build_tuple(items=[Var($558binary_floor_divide.18, loop_hafnian_batch.py:135), Var($564binary_subscr.21, loop_hafnian_batch.py:135)])
DEBUG 2022-02-14 16:38:18,140 on stmt: $568binary_subscr.23 = getitem(value=binoms, index=$566build_tuple.22, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:18,140 on stmt: n_det_binom_prod = $568binary_subscr.23 * binom_prod.2
DEBUG 2022-02-14 16:38:18,140 on stmt: $const578.27 = const(int, 2)
DEBUG 2022-02-14 16:38:18,140 on stmt: $580binary_modulo.28 = N % $const578.27
DEBUG 2022-02-14 16:38:18,140 on stmt: $const582.29 = const(int, 0)
DEBUG 2022-02-14 16:38:18,140 on stmt: $584compare_op.30 = $580binary_modulo.28 == $const582.29
DEBUG 2022-02-14 16:38:18,140 on stmt: bool586 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:38:18,140 on stmt: $586pred = call bool586($584compare_op.30, func=bool586, args=(Var($584compare_op.30, loop_hafnian_batch.py:137),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:18,140 on stmt: branch $586pred, 590, 624
DEBUG 2022-02-14 16:38:18,140 ==== SSA block rewrite pass on 590
DEBUG 2022-02-14 16:38:18,140 Running <numba.core.ssa._FixSSAVars object at 0x7fa041ed6f10>
DEBUG 2022-02-14 16:38:18,140 on stmt: $596binary_subscr.6 = getitem(value=Hnew, index=N_det, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:18,140 on stmt: $602binary_multiply.9 = n_det_binom_prod * plus_minus
DEBUG 2022-02-14 16:38:18,140 on stmt: $const608.12 = const(int, 2)
DEBUG 2022-02-14 16:38:18,140 on stmt: $610binary_floor_divide.13 = N // $const608.12
DEBUG 2022-02-14 16:38:18,140 on stmt: $612binary_subscr.14 = getitem(value=f_even, index=$610binary_floor_divide.13, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:18,140 on stmt: $614binary_multiply.15 = $602binary_multiply.9 * $612binary_subscr.14
DEBUG 2022-02-14 16:38:18,140 on stmt: $616inplace_add.16 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$596binary_subscr.6, rhs=$614binary_multiply.15, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:38:18,140 on stmt: Hnew[N_det] = $616inplace_add.16
DEBUG 2022-02-14 16:38:18,140 on stmt: jump 652
DEBUG 2022-02-14 16:38:18,140 ==== SSA block rewrite pass on 624
DEBUG 2022-02-14 16:38:18,140 Running <numba.core.ssa._FixSSAVars object at 0x7fa041ed6f10>
DEBUG 2022-02-14 16:38:18,140 on stmt: $630binary_subscr.6 = getitem(value=Hnew, index=N_det, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:18,141 on stmt: $636binary_multiply.9 = n_det_binom_prod * plus_minus
DEBUG 2022-02-14 16:38:18,141 on stmt: $642binary_subscr.12 = getitem(value=f_odd, index=N, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:18,141 on stmt: $644binary_multiply.13 = $636binary_multiply.9 * $642binary_subscr.12
DEBUG 2022-02-14 16:38:18,141 on stmt: $646inplace_add.14 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$630binary_subscr.6, rhs=$644binary_multiply.13, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:38:18,141 on stmt: Hnew[N_det] = $646inplace_add.14
DEBUG 2022-02-14 16:38:18,141 on stmt: jump 652
DEBUG 2022-02-14 16:38:18,141 ==== SSA block rewrite pass on 652
DEBUG 2022-02-14 16:38:18,141 Running <numba.core.ssa._FixSSAVars object at 0x7fa041ed6f10>
DEBUG 2022-02-14 16:38:18,141 on stmt: jump 520
DEBUG 2022-02-14 16:38:18,141 ==== SSA block rewrite pass on 656
DEBUG 2022-02-14 16:38:18,141 Running <numba.core.ssa._FixSSAVars object at 0x7fa041ed6f10>
DEBUG 2022-02-14 16:38:18,141 on stmt: $660inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=H_batch, rhs=Hnew, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:38:18,141 find_def var='H_batch' stmt=$660inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=H_batch, rhs=Hnew, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:38:18,141 find_def_from_top label 656
DEBUG 2022-02-14 16:38:18,141 idom 520 from label 656
DEBUG 2022-02-14 16:38:18,141 find_def_from_bottom label 520
DEBUG 2022-02-14 16:38:18,141 find_def_from_top label 520
DEBUG 2022-02-14 16:38:18,141 idom 450 from label 520
DEBUG 2022-02-14 16:38:18,141 find_def_from_bottom label 450
DEBUG 2022-02-14 16:38:18,141 find_def_from_top label 450
DEBUG 2022-02-14 16:38:18,141 idom 318 from label 450
DEBUG 2022-02-14 16:38:18,141 find_def_from_bottom label 318
DEBUG 2022-02-14 16:38:18,141 find_def_from_top label 318
DEBUG 2022-02-14 16:38:18,141 idom 294 from label 318
DEBUG 2022-02-14 16:38:18,141 find_def_from_bottom label 294
DEBUG 2022-02-14 16:38:18,141 find_def_from_top label 294
DEBUG 2022-02-14 16:38:18,141 idom 262 from label 294
DEBUG 2022-02-14 16:38:18,141 find_def_from_bottom label 262
DEBUG 2022-02-14 16:38:18,142 find_def_from_top label 262
DEBUG 2022-02-14 16:38:18,142 idom 196 from label 262
DEBUG 2022-02-14 16:38:18,142 find_def_from_bottom label 196
DEBUG 2022-02-14 16:38:18,142 find_def_from_top label 196
DEBUG 2022-02-14 16:38:18,142 idom 192 from label 196
DEBUG 2022-02-14 16:38:18,142 find_def_from_bottom label 192
DEBUG 2022-02-14 16:38:18,142 replaced with: $660inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=H_batch.2, rhs=Hnew, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:38:18,142 on stmt: H_batch.1 = $660inplace_add.3
DEBUG 2022-02-14 16:38:18,142 on stmt: jump 192
DEBUG 2022-02-14 16:38:18,142 ==== SSA block rewrite pass on 666
DEBUG 2022-02-14 16:38:18,142 Running <numba.core.ssa._FixSSAVars object at 0x7fa041ed6f10>
DEBUG 2022-02-14 16:38:18,142 on stmt: bool668 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:38:18,142 on stmt: $668pred = call bool668(glynn, func=bool668, args=(Var(glynn, loop_hafnian_batch.py:83),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:18,142 on stmt: branch $668pred, 672, 726
DEBUG 2022-02-14 16:38:18,142 ==== SSA block rewrite pass on 672
DEBUG 2022-02-14 16:38:18,142 Running <numba.core.ssa._FixSSAVars object at 0x7fa041ed6f10>
DEBUG 2022-02-14 16:38:18,142 on stmt: $672load_global.0 = global(range: <class 'range'>)
DEBUG 2022-02-14 16:38:18,142 on stmt: $676load_attr.2 = getattr(value=H_batch, attr=shape)
DEBUG 2022-02-14 16:38:18,142 find_def var='H_batch' stmt=$676load_attr.2 = getattr(value=H_batch, attr=shape)
DEBUG 2022-02-14 16:38:18,142 find_def_from_top label 672
DEBUG 2022-02-14 16:38:18,142 idom 666 from label 672
DEBUG 2022-02-14 16:38:18,142 find_def_from_bottom label 666
DEBUG 2022-02-14 16:38:18,142 find_def_from_top label 666
DEBUG 2022-02-14 16:38:18,142 idom 192 from label 666
DEBUG 2022-02-14 16:38:18,142 find_def_from_bottom label 192
DEBUG 2022-02-14 16:38:18,143 replaced with: $676load_attr.2 = getattr(value=H_batch.2, attr=shape)
DEBUG 2022-02-14 16:38:18,143 on stmt: $const678.3 = const(int, 0)
DEBUG 2022-02-14 16:38:18,143 on stmt: $680binary_subscr.4 = static_getitem(value=$676load_attr.2, index=0, index_var=$const678.3, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:18,143 on stmt: $682call_function.5 = call $672load_global.0($680binary_subscr.4, func=$672load_global.0, args=[Var($680binary_subscr.4, loop_hafnian_batch.py:145)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:18,143 on stmt: $684get_iter.6 = getiter(value=$682call_function.5)
DEBUG 2022-02-14 16:38:18,143 on stmt: $phi686.0 = $684get_iter.6
DEBUG 2022-02-14 16:38:18,143 on stmt: jump 686
DEBUG 2022-02-14 16:38:18,143 ==== SSA block rewrite pass on 686
DEBUG 2022-02-14 16:38:18,143 Running <numba.core.ssa._FixSSAVars object at 0x7fa041ed6f10>
DEBUG 2022-02-14 16:38:18,143 on stmt: $686for_iter.1 = iternext(value=$phi686.0)
DEBUG 2022-02-14 16:38:18,143 on stmt: $686for_iter.2 = pair_first(value=$686for_iter.1)
DEBUG 2022-02-14 16:38:18,143 on stmt: $686for_iter.3 = pair_second(value=$686for_iter.1)
DEBUG 2022-02-14 16:38:18,143 on stmt: $phi688.1 = $686for_iter.2
DEBUG 2022-02-14 16:38:18,143 on stmt: branch $686for_iter.3, 688, 726
DEBUG 2022-02-14 16:38:18,143 ==== SSA block rewrite pass on 688
DEBUG 2022-02-14 16:38:18,143 Running <numba.core.ssa._FixSSAVars object at 0x7fa041ed6f10>
DEBUG 2022-02-14 16:38:18,143 on stmt: j.1 = $phi688.1
DEBUG 2022-02-14 16:38:18,143 on stmt: x = N_fixed + j.1
DEBUG 2022-02-14 16:38:18,143 on stmt: $704binary_subscr.9 = getitem(value=H_batch, index=j.1, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:18,143 find_def var='H_batch' stmt=$704binary_subscr.9 = getitem(value=H_batch, index=j.1, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:18,143 find_def_from_top label 688
DEBUG 2022-02-14 16:38:18,143 idom 686 from label 688
DEBUG 2022-02-14 16:38:18,143 find_def_from_bottom label 686
DEBUG 2022-02-14 16:38:18,143 find_def_from_top label 686
DEBUG 2022-02-14 16:38:18,143 idom 672 from label 686
DEBUG 2022-02-14 16:38:18,143 find_def_from_bottom label 672
DEBUG 2022-02-14 16:38:18,144 find_def_from_top label 672
DEBUG 2022-02-14 16:38:18,144 idom 666 from label 672
DEBUG 2022-02-14 16:38:18,144 find_def_from_bottom label 666
DEBUG 2022-02-14 16:38:18,144 find_def_from_top label 666
DEBUG 2022-02-14 16:38:18,144 idom 192 from label 666
DEBUG 2022-02-14 16:38:18,144 find_def_from_bottom label 192
DEBUG 2022-02-14 16:38:18,144 replaced with: $704binary_subscr.9 = getitem(value=H_batch.2, index=j.1, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:18,144 on stmt: $const706.10 = const(float, 0.5)
DEBUG 2022-02-14 16:38:18,144 on stmt: $const710.12 = const(int, 2)
DEBUG 2022-02-14 16:38:18,144 on stmt: $712binary_floor_divide.13 = x // $const710.12
DEBUG 2022-02-14 16:38:18,144 on stmt: $714binary_power.14 = $const706.10 ** $712binary_floor_divide.13
DEBUG 2022-02-14 16:38:18,144 on stmt: $716inplace_multiply.15 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=$704binary_subscr.9, rhs=$714binary_power.14, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:38:18,144 on stmt: H_batch[j.1] = $716inplace_multiply.15
DEBUG 2022-02-14 16:38:18,144 find_def var='H_batch' stmt=H_batch[j.1] = $716inplace_multiply.15
DEBUG 2022-02-14 16:38:18,144 find_def_from_top label 688
DEBUG 2022-02-14 16:38:18,144 idom 686 from label 688
DEBUG 2022-02-14 16:38:18,144 find_def_from_bottom label 686
DEBUG 2022-02-14 16:38:18,144 find_def_from_top label 686
DEBUG 2022-02-14 16:38:18,144 idom 672 from label 686
DEBUG 2022-02-14 16:38:18,144 find_def_from_bottom label 672
DEBUG 2022-02-14 16:38:18,144 find_def_from_top label 672
DEBUG 2022-02-14 16:38:18,144 idom 666 from label 672
DEBUG 2022-02-14 16:38:18,144 find_def_from_bottom label 666
DEBUG 2022-02-14 16:38:18,144 find_def_from_top label 666
DEBUG 2022-02-14 16:38:18,144 idom 192 from label 666
DEBUG 2022-02-14 16:38:18,144 find_def_from_bottom label 192
DEBUG 2022-02-14 16:38:18,144 replaced with: H_batch.2[j.1] = $716inplace_multiply.15
DEBUG 2022-02-14 16:38:18,144 on stmt: jump 686
DEBUG 2022-02-14 16:38:18,145 ==== SSA block rewrite pass on 726
DEBUG 2022-02-14 16:38:18,145 Running <numba.core.ssa._FixSSAVars object at 0x7fa041ed6f10>
DEBUG 2022-02-14 16:38:18,145 on stmt: $728return_value.1 = cast(value=H_batch)
DEBUG 2022-02-14 16:38:18,145 find_def var='H_batch' stmt=$728return_value.1 = cast(value=H_batch)
DEBUG 2022-02-14 16:38:18,145 find_def_from_top label 726
DEBUG 2022-02-14 16:38:18,145 idom 666 from label 726
DEBUG 2022-02-14 16:38:18,145 find_def_from_bottom label 666
DEBUG 2022-02-14 16:38:18,145 find_def_from_top label 666
DEBUG 2022-02-14 16:38:18,145 idom 192 from label 666
DEBUG 2022-02-14 16:38:18,145 find_def_from_bottom label 192
DEBUG 2022-02-14 16:38:18,145 replaced with: $728return_value.1 = cast(value=H_batch.2)
DEBUG 2022-02-14 16:38:18,145 on stmt: return $728return_value.1
DEBUG 2022-02-14 16:38:18,145 Fix SSA violator on var plus_minus
DEBUG 2022-02-14 16:38:18,145 ==== SSA block rewrite pass on 0
DEBUG 2022-02-14 16:38:18,145 Running <numba.core.ssa._FreshVarHandler object at 0x7fa041ed43a0>
DEBUG 2022-02-14 16:38:18,145 on stmt: A = arg(0, name=A)
DEBUG 2022-02-14 16:38:18,145 on stmt: D = arg(1, name=D)
DEBUG 2022-02-14 16:38:18,145 on stmt: fixed_edge_reps = arg(2, name=fixed_edge_reps)
DEBUG 2022-02-14 16:38:18,145 on stmt: batch_max = arg(3, name=batch_max)
DEBUG 2022-02-14 16:38:18,145 on stmt: even_cutoff = arg(4, name=even_cutoff)
DEBUG 2022-02-14 16:38:18,145 on stmt: oddmode = arg(5, name=oddmode)
DEBUG 2022-02-14 16:38:18,145 on stmt: glynn = arg(6, name=glynn)
DEBUG 2022-02-14 16:38:18,145 on stmt: $const4.1 = const(int, 0)
DEBUG 2022-02-14 16:38:18,145 on stmt: oddloop = static_getitem(value=D, index=0, index_var=$const4.1, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:18,145 on stmt: $const12.4 = const(int, 0)
DEBUG 2022-02-14 16:38:18,145 on stmt: $const14.5 = const(NoneType, None)
DEBUG 2022-02-14 16:38:18,145 on stmt: $const16.6 = const(NoneType, None)
DEBUG 2022-02-14 16:38:18,145 on stmt: $18build_slice.7 = global(slice: <class 'slice'>)
DEBUG 2022-02-14 16:38:18,146 on stmt: $18build_slice.8 = call $18build_slice.7($const14.5, $const16.6, func=$18build_slice.7, args=(Var($const14.5, loop_hafnian_batch.py:84), Var($const16.6, loop_hafnian_batch.py:84)), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:18,146 on stmt: $20build_tuple.9 = build_tuple(items=[Var($const12.4, loop_hafnian_batch.py:84), Var($18build_slice.8, loop_hafnian_batch.py:84)])
DEBUG 2022-02-14 16:38:18,146 on stmt: oddV = static_getitem(value=A, index=(0, slice(None, None, None)), index_var=$20build_tuple.9, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:18,146 on stmt: $const28.12 = const(int, 1)
DEBUG 2022-02-14 16:38:18,146 on stmt: oddloop0 = static_getitem(value=D, index=1, index_var=$const28.12, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:18,146 on stmt: $const36.15 = const(int, 1)
DEBUG 2022-02-14 16:38:18,146 on stmt: $const38.16 = const(NoneType, None)
DEBUG 2022-02-14 16:38:18,146 on stmt: $const40.17 = const(NoneType, None)
DEBUG 2022-02-14 16:38:18,146 on stmt: $42build_slice.18 = global(slice: <class 'slice'>)
DEBUG 2022-02-14 16:38:18,146 on stmt: $42build_slice.19 = call $42build_slice.18($const38.16, $const40.17, func=$42build_slice.18, args=(Var($const38.16, loop_hafnian_batch.py:89), Var($const40.17, loop_hafnian_batch.py:89)), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:18,146 on stmt: $44build_tuple.20 = build_tuple(items=[Var($const36.15, loop_hafnian_batch.py:89), Var($42build_slice.19, loop_hafnian_batch.py:89)])
DEBUG 2022-02-14 16:38:18,146 on stmt: oddV0 = static_getitem(value=A, index=(1, slice(None, None, None)), index_var=$44build_tuple.20, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:18,146 on stmt: $52load_attr.23 = getattr(value=A, attr=shape)
DEBUG 2022-02-14 16:38:18,146 on stmt: $const54.24 = const(int, 0)
DEBUG 2022-02-14 16:38:18,146 on stmt: n = static_getitem(value=$52load_attr.23, index=0, index_var=$const54.24, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:18,146 on stmt: $const60.26 = const(int, 2)
DEBUG 2022-02-14 16:38:18,146 on stmt: $64load_method.28 = getattr(value=fixed_edge_reps, attr=sum)
DEBUG 2022-02-14 16:38:18,146 on stmt: $66call_method.29 = call $64load_method.28(func=$64load_method.28, args=[], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:18,146 on stmt: $68binary_multiply.30 = $const60.26 * $66call_method.29
DEBUG 2022-02-14 16:38:18,146 on stmt: $const70.31 = const(int, 1)
DEBUG 2022-02-14 16:38:18,146 on stmt: N_fixed = $68binary_multiply.30 + $const70.31
DEBUG 2022-02-14 16:38:18,146 on stmt: $const78.34 = const(int, 2)
DEBUG 2022-02-14 16:38:18,146 on stmt: $82binary_multiply.36 = $const78.34 * batch_max
DEBUG 2022-02-14 16:38:18,147 on stmt: $84binary_add.37 = N_fixed + $82binary_multiply.36
DEBUG 2022-02-14 16:38:18,147 on stmt: $88binary_add.39 = $84binary_add.37 + even_cutoff
DEBUG 2022-02-14 16:38:18,147 on stmt: $const90.40 = const(int, 1)
DEBUG 2022-02-14 16:38:18,147 on stmt: N_max = $88binary_add.39 + $const90.40
DEBUG 2022-02-14 16:38:18,147 on stmt: $96load_global.42 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:38:18,147 on stmt: $98load_method.43 = getattr(value=$96load_global.42, attr=concatenate)
DEBUG 2022-02-14 16:38:18,147 on stmt: $100load_global.44 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:38:18,147 on stmt: $102load_method.45 = getattr(value=$100load_global.44, attr=array)
DEBUG 2022-02-14 16:38:18,147 on stmt: $const106.47 = const(int, 1)
DEBUG 2022-02-14 16:38:18,147 on stmt: $108build_list.48 = build_list(items=[Var(batch_max, loop_hafnian_batch.py:83), Var($const106.47, loop_hafnian_batch.py:95)])
DEBUG 2022-02-14 16:38:18,147 on stmt: $110call_method.49 = call $102load_method.45($108build_list.48, func=$102load_method.45, args=[Var($108build_list.48, loop_hafnian_batch.py:95)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:18,147 on stmt: $114build_tuple.51 = build_tuple(items=[Var($110call_method.49, loop_hafnian_batch.py:95), Var(fixed_edge_reps, loop_hafnian_batch.py:83)])
DEBUG 2022-02-14 16:38:18,147 on stmt: edge_reps = call $98load_method.43($114build_tuple.51, func=$98load_method.43, args=[Var($114build_tuple.51, loop_hafnian_batch.py:95)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:18,147 on stmt: $120load_global.53 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:38:18,147 on stmt: $122load_method.54 = getattr(value=$120load_global.53, attr=prod)
DEBUG 2022-02-14 16:38:18,147 on stmt: $const126.56 = const(int, 1)
DEBUG 2022-02-14 16:38:18,147 on stmt: $128binary_add.57 = edge_reps + $const126.56
DEBUG 2022-02-14 16:38:18,147 on stmt: steps = call $122load_method.54($128binary_add.57, func=$122load_method.54, args=[Var($128binary_add.57, loop_hafnian_batch.py:96)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:18,147 on stmt: $136load_method.60 = getattr(value=edge_reps, attr=max)
DEBUG 2022-02-14 16:38:18,147 on stmt: $138call_method.61 = call $136load_method.60(func=$136load_method.60, args=[], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:18,147 on stmt: max_binom = $138call_method.61 + even_cutoff
DEBUG 2022-02-14 16:38:18,147 on stmt: $146load_global.64 = global(precompute_binoms: CPUDispatcher(<function precompute_binoms at 0x7fa047ebe310>))
DEBUG 2022-02-14 16:38:18,147 on stmt: binoms = call $146load_global.64(max_binom, func=$146load_global.64, args=[Var(max_binom, loop_hafnian_batch.py:98)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:18,147 on stmt: $154load_global.67 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:38:18,147 on stmt: $156load_attr.68 = getattr(value=$154load_global.67, attr=zeros)
DEBUG 2022-02-14 16:38:18,148 on stmt: $const158.69 = const(int, 2)
DEBUG 2022-02-14 16:38:18,148 on stmt: $162binary_multiply.71 = $const158.69 * batch_max
DEBUG 2022-02-14 16:38:18,148 on stmt: $166binary_add.73 = $162binary_multiply.71 + even_cutoff
DEBUG 2022-02-14 16:38:18,148 on stmt: $const168.74 = const(int, 2)
DEBUG 2022-02-14 16:38:18,148 on stmt: $170binary_add.75 = $166binary_add.73 + $const168.74
DEBUG 2022-02-14 16:38:18,148 on stmt: $172load_global.76 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:38:18,148 on stmt: $174load_attr.77 = getattr(value=$172load_global.76, attr=complex128)
DEBUG 2022-02-14 16:38:18,148 on stmt: H_batch = call $156load_attr.68($170binary_add.75, func=$156load_attr.68, args=[Var($170binary_add.75, loop_hafnian_batch.py:101)], kws=[('dtype', Var($174load_attr.77, loop_hafnian_batch.py:101))], vararg=None, target=None)
DEBUG 2022-02-14 16:38:18,148 on stmt: $182load_global.80 = global(numba: <module 'numba' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numba/__init__.py'>)
DEBUG 2022-02-14 16:38:18,148 on stmt: $184load_method.81 = getattr(value=$182load_global.80, attr=prange)
DEBUG 2022-02-14 16:38:18,148 on stmt: $188call_method.83 = call $184load_method.81(steps, func=$184load_method.81, args=[Var(steps, loop_hafnian_batch.py:96)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:18,148 on stmt: $190get_iter.84 = getiter(value=$188call_method.83)
DEBUG 2022-02-14 16:38:18,148 on stmt: $phi192.0 = $190get_iter.84
DEBUG 2022-02-14 16:38:18,148 on stmt: jump 192
DEBUG 2022-02-14 16:38:18,148 ==== SSA block rewrite pass on 192
DEBUG 2022-02-14 16:38:18,148 Running <numba.core.ssa._FreshVarHandler object at 0x7fa041ed43a0>
DEBUG 2022-02-14 16:38:18,148 on stmt: H_batch.2 = phi(incoming_values=[Var(H_batch, loop_hafnian_batch.py:101), Var(H_batch.1, loop_hafnian_batch.py:142)], incoming_blocks=[0, 656])
DEBUG 2022-02-14 16:38:18,148 on stmt: $192for_iter.1 = iternext(value=$phi192.0)
DEBUG 2022-02-14 16:38:18,148 on stmt: $192for_iter.2 = pair_first(value=$192for_iter.1)
DEBUG 2022-02-14 16:38:18,148 on stmt: $192for_iter.3 = pair_second(value=$192for_iter.1)
DEBUG 2022-02-14 16:38:18,148 on stmt: $phi196.1 = $192for_iter.2
DEBUG 2022-02-14 16:38:18,148 on stmt: branch $192for_iter.3, 196, 666
DEBUG 2022-02-14 16:38:18,148 ==== SSA block rewrite pass on 196
DEBUG 2022-02-14 16:38:18,148 Running <numba.core.ssa._FreshVarHandler object at 0x7fa041ed43a0>
DEBUG 2022-02-14 16:38:18,148 on stmt: j = $phi196.1
DEBUG 2022-02-14 16:38:18,148 on stmt: $198load_global.2 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:38:18,148 on stmt: $200load_attr.3 = getattr(value=$198load_global.2, attr=zeros)
DEBUG 2022-02-14 16:38:18,149 on stmt: $const202.4 = const(int, 2)
DEBUG 2022-02-14 16:38:18,149 on stmt: $206binary_multiply.6 = $const202.4 * batch_max
DEBUG 2022-02-14 16:38:18,149 on stmt: $210binary_add.8 = $206binary_multiply.6 + even_cutoff
DEBUG 2022-02-14 16:38:18,149 on stmt: $const212.9 = const(int, 2)
DEBUG 2022-02-14 16:38:18,149 on stmt: $214binary_add.10 = $210binary_add.8 + $const212.9
DEBUG 2022-02-14 16:38:18,149 on stmt: $216load_global.11 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:38:18,149 on stmt: $218load_attr.12 = getattr(value=$216load_global.11, attr=complex128)
DEBUG 2022-02-14 16:38:18,149 on stmt: Hnew = call $200load_attr.3($214binary_add.10, func=$200load_attr.3, args=[Var($214binary_add.10, loop_hafnian_batch.py:104)], kws=[('dtype', Var($218load_attr.12, loop_hafnian_batch.py:104))], vararg=None, target=None)
DEBUG 2022-02-14 16:38:18,149 on stmt: $226load_global.15 = global(find_kept_edges: CPUDispatcher(<function find_kept_edges at 0x7fa047ebe790>))
DEBUG 2022-02-14 16:38:18,149 on stmt: kept_edges = call $226load_global.15(j, edge_reps, func=$226load_global.15, args=[Var(j, loop_hafnian_batch.py:102), Var(edge_reps, loop_hafnian_batch.py:95)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:18,149 on stmt: $238load_method.20 = getattr(value=kept_edges, attr=sum)
DEBUG 2022-02-14 16:38:18,149 on stmt: edges_sum = call $238load_method.20(func=$238load_method.20, args=[], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:18,149 on stmt: binom_prod = const(float, 1.0)
DEBUG 2022-02-14 16:38:18,149 on stmt: $248load_global.23 = global(range: <class 'range'>)
DEBUG 2022-02-14 16:38:18,149 on stmt: $const250.24 = const(int, 1)
DEBUG 2022-02-14 16:38:18,149 on stmt: $const254.26 = const(int, 2)
DEBUG 2022-02-14 16:38:18,149 on stmt: $256binary_floor_divide.27 = n // $const254.26
DEBUG 2022-02-14 16:38:18,149 on stmt: $258call_function.28 = call $248load_global.23($const250.24, $256binary_floor_divide.27, func=$248load_global.23, args=[Var($const250.24, loop_hafnian_batch.py:110), Var($256binary_floor_divide.27, loop_hafnian_batch.py:110)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:18,149 on stmt: $260get_iter.29 = getiter(value=$258call_function.28)
DEBUG 2022-02-14 16:38:18,149 on stmt: $phi262.1 = $260get_iter.29
DEBUG 2022-02-14 16:38:18,149 on stmt: jump 262
DEBUG 2022-02-14 16:38:18,149 ==== SSA block rewrite pass on 262
DEBUG 2022-02-14 16:38:18,149 Running <numba.core.ssa._FreshVarHandler object at 0x7fa041ed43a0>
DEBUG 2022-02-14 16:38:18,149 on stmt: binom_prod.2 = phi(incoming_values=[Var(binom_prod.1, loop_hafnian_batch.py:111), Var(binom_prod, loop_hafnian_batch.py:109)], incoming_blocks=[264, 196])
DEBUG 2022-02-14 16:38:18,150 on stmt: $262for_iter.2 = iternext(value=$phi262.1)
DEBUG 2022-02-14 16:38:18,150 on stmt: $262for_iter.3 = pair_first(value=$262for_iter.2)
DEBUG 2022-02-14 16:38:18,150 on stmt: $262for_iter.4 = pair_second(value=$262for_iter.2)
DEBUG 2022-02-14 16:38:18,150 on stmt: $phi264.2 = $262for_iter.3
DEBUG 2022-02-14 16:38:18,150 on stmt: branch $262for_iter.4, 264, 294
DEBUG 2022-02-14 16:38:18,150 ==== SSA block rewrite pass on 264
DEBUG 2022-02-14 16:38:18,150 Running <numba.core.ssa._FreshVarHandler object at 0x7fa041ed43a0>
DEBUG 2022-02-14 16:38:18,150 on stmt: i = $phi264.2
DEBUG 2022-02-14 16:38:18,150 on stmt: $274binary_subscr.7 = getitem(value=edge_reps, index=i, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:18,150 on stmt: $280binary_subscr.10 = getitem(value=kept_edges, index=i, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:18,150 on stmt: $282build_tuple.11 = build_tuple(items=[Var($274binary_subscr.7, loop_hafnian_batch.py:111), Var($280binary_subscr.10, loop_hafnian_batch.py:111)])
DEBUG 2022-02-14 16:38:18,150 on stmt: $284binary_subscr.12 = getitem(value=binoms, index=$282build_tuple.11, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:18,150 on stmt: $286inplace_multiply.13 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=binom_prod.2, rhs=$284binary_subscr.12, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:38:18,150 on stmt: binom_prod.1 = $286inplace_multiply.13
DEBUG 2022-02-14 16:38:18,150 on stmt: jump 262
DEBUG 2022-02-14 16:38:18,150 ==== SSA block rewrite pass on 294
DEBUG 2022-02-14 16:38:18,150 Running <numba.core.ssa._FreshVarHandler object at 0x7fa041ed43a0>
DEBUG 2022-02-14 16:38:18,150 on stmt: bool296 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:38:18,150 on stmt: $296pred = call bool296(glynn, func=bool296, args=(Var(glynn, loop_hafnian_batch.py:83),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:18,150 on stmt: branch $296pred, 300, 314
DEBUG 2022-02-14 16:38:18,150 ==== SSA block rewrite pass on 300
DEBUG 2022-02-14 16:38:18,150 Running <numba.core.ssa._FreshVarHandler object at 0x7fa041ed43a0>
DEBUG 2022-02-14 16:38:18,150 on stmt: $const300.1 = const(int, 2)
DEBUG 2022-02-14 16:38:18,150 on stmt: $304binary_multiply.3 = $const300.1 * kept_edges
DEBUG 2022-02-14 16:38:18,150 on stmt: delta = $304binary_multiply.3 - edge_reps
DEBUG 2022-02-14 16:38:18,150 on stmt: jump 318
DEBUG 2022-02-14 16:38:18,151 ==== SSA block rewrite pass on 314
DEBUG 2022-02-14 16:38:18,151 Running <numba.core.ssa._FreshVarHandler object at 0x7fa041ed43a0>
DEBUG 2022-02-14 16:38:18,151 on stmt: delta = kept_edges
DEBUG 2022-02-14 16:38:18,151 on stmt: jump 318
DEBUG 2022-02-14 16:38:18,151 ==== SSA block rewrite pass on 318
DEBUG 2022-02-14 16:38:18,151 Running <numba.core.ssa._FreshVarHandler object at 0x7fa041ed43a0>
DEBUG 2022-02-14 16:38:18,151 on stmt: $318load_global.1 = global(get_submatrices: CPUDispatcher(<function get_submatrices at 0x7fa047ebed30>))
DEBUG 2022-02-14 16:38:18,151 on stmt: $328call_function.6 = call $318load_global.1(delta, A, D, oddV, func=$318load_global.1, args=[Var(delta, loop_hafnian_batch.py:114), Var(A, loop_hafnian_batch.py:83), Var(D, loop_hafnian_batch.py:83), Var(oddV, loop_hafnian_batch.py:84)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:18,151 on stmt: $330unpack_sequence.11 = exhaust_iter(value=$328call_function.6, count=4)
DEBUG 2022-02-14 16:38:18,151 on stmt: $330unpack_sequence.7 = static_getitem(value=$330unpack_sequence.11, index=0, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:18,151 on stmt: $330unpack_sequence.8 = static_getitem(value=$330unpack_sequence.11, index=1, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:18,151 on stmt: $330unpack_sequence.9 = static_getitem(value=$330unpack_sequence.11, index=2, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:18,151 on stmt: $330unpack_sequence.10 = static_getitem(value=$330unpack_sequence.11, index=3, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:18,151 on stmt: AX_S = $330unpack_sequence.7
DEBUG 2022-02-14 16:38:18,151 on stmt: XD_S = $330unpack_sequence.8
DEBUG 2022-02-14 16:38:18,151 on stmt: D_S = $330unpack_sequence.9
DEBUG 2022-02-14 16:38:18,151 on stmt: oddVX_S = $330unpack_sequence.10
DEBUG 2022-02-14 16:38:18,151 on stmt: $340load_global.12 = global(eigvals: CPUDispatcher(<function eigvals at 0x7fa047e5d430>))
DEBUG 2022-02-14 16:38:18,151 on stmt: E = call $340load_global.12(AX_S, func=$340load_global.12, args=[Var(AX_S, loop_hafnian_batch.py:118)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:18,151 on stmt: $const350.16 = const(int, 0)
DEBUG 2022-02-14 16:38:18,151 on stmt: $352binary_subscr.17 = static_getitem(value=kept_edges, index=0, index_var=$const350.16, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:18,151 on stmt: $const354.18 = const(int, 0)
DEBUG 2022-02-14 16:38:18,151 on stmt: $356compare_op.19 = $352binary_subscr.17 == $const354.18
DEBUG 2022-02-14 16:38:18,151 on stmt: bool358 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:38:18,151 on stmt: $358pred = call bool358($356compare_op.19, func=bool358, args=(Var($356compare_op.19, loop_hafnian_batch.py:122),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:18,151 on stmt: branch $358pred, 362, 450
DEBUG 2022-02-14 16:38:18,151 ==== SSA block rewrite pass on 362
DEBUG 2022-02-14 16:38:18,151 Running <numba.core.ssa._FreshVarHandler object at 0x7fa041ed43a0>
DEBUG 2022-02-14 16:38:18,152 on stmt: $const364.2 = const(int, 1)
DEBUG 2022-02-14 16:38:18,152 on stmt: $366binary_subscr.3 = static_getitem(value=kept_edges, index=1, index_var=$const364.2, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:18,152 on stmt: $const368.4 = const(int, 0)
DEBUG 2022-02-14 16:38:18,152 on stmt: $370compare_op.5 = $366binary_subscr.3 == $const368.4
DEBUG 2022-02-14 16:38:18,152 on stmt: bool372 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:38:18,152 on stmt: $372pred = call bool372($370compare_op.5, func=bool372, args=(Var($370compare_op.5, loop_hafnian_batch.py:122),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:18,152 on stmt: branch $372pred, 376, 450
DEBUG 2022-02-14 16:38:18,152 ==== SSA block rewrite pass on 376
DEBUG 2022-02-14 16:38:18,152 Running <numba.core.ssa._FreshVarHandler object at 0x7fa041ed43a0>
DEBUG 2022-02-14 16:38:18,152 on stmt: $376load_global.1 = global(get_submatrix_batch_odd0: CPUDispatcher(<function get_submatrix_batch_odd0 at 0x7fa047ebef70>))
DEBUG 2022-02-14 16:38:18,152 on stmt: oddVX_S0 = call $376load_global.1(delta, oddV0, func=$376load_global.1, args=[Var(delta, loop_hafnian_batch.py:114), Var(oddV0, loop_hafnian_batch.py:89)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:18,152 on stmt: $const386.5 = const(int, -1)
DEBUG 2022-02-14 16:38:18,152 on stmt: $const390.7 = const(int, 2)
DEBUG 2022-02-14 16:38:18,152 on stmt: $392binary_floor_divide.8 = N_fixed // $const390.7
DEBUG 2022-02-14 16:38:18,152 on stmt: $396binary_subtract.10 = $392binary_floor_divide.8 - edges_sum
DEBUG 2022-02-14 16:38:18,152 on stmt: plus_minus = $const386.5 ** $396binary_subtract.10
DEBUG 2022-02-14 16:38:18,152 first assign: plus_minus
DEBUG 2022-02-14 16:38:18,152 replaced with: plus_minus = $const386.5 ** $396binary_subtract.10
DEBUG 2022-02-14 16:38:18,152 on stmt: $402load_global.12 = global(f_loop_odd: CPUDispatcher(<function f_loop_odd at 0x7fa047ebeb80>))
DEBUG 2022-02-14 16:38:18,152 on stmt: $418call_function.20 = call $402load_global.12(E, AX_S, XD_S, D_S, N_fixed, oddloop0, oddVX_S0, func=$402load_global.12, args=[Var(E, loop_hafnian_batch.py:120), Var(AX_S, loop_hafnian_batch.py:118), Var(XD_S, loop_hafnian_batch.py:118), Var(D_S, loop_hafnian_batch.py:118), Var(N_fixed, loop_hafnian_batch.py:92), Var(oddloop0, loop_hafnian_batch.py:88), Var(oddVX_S0, loop_hafnian_batch.py:123)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:18,152 on stmt: f = getitem(value=$418call_function.20, index=N_fixed, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:18,152 on stmt: $const428.24 = const(int, 0)
DEBUG 2022-02-14 16:38:18,152 on stmt: $432binary_subscr.27 = static_getitem(value=H_batch.2, index=0, index_var=$const428.24, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:18,152 on stmt: $438binary_multiply.30 = binom_prod.2 * plus_minus
DEBUG 2022-02-14 16:38:18,152 on stmt: $442binary_multiply.32 = $438binary_multiply.30 * f
DEBUG 2022-02-14 16:38:18,153 on stmt: $444inplace_add.33 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$432binary_subscr.27, rhs=$442binary_multiply.32, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:38:18,153 on stmt: H_batch.2[0] = $444inplace_add.33
DEBUG 2022-02-14 16:38:18,153 on stmt: jump 450
DEBUG 2022-02-14 16:38:18,153 ==== SSA block rewrite pass on 450
DEBUG 2022-02-14 16:38:18,153 Running <numba.core.ssa._FreshVarHandler object at 0x7fa041ed43a0>
DEBUG 2022-02-14 16:38:18,153 on stmt: $450load_global.1 = global(f_loop: CPUDispatcher(<function f_loop at 0x7fa047ebe9d0>))
DEBUG 2022-02-14 16:38:18,153 on stmt: f_even = call $450load_global.1(E, AX_S, XD_S, D_S, N_max, func=$450load_global.1, args=[Var(E, loop_hafnian_batch.py:120), Var(AX_S, loop_hafnian_batch.py:118), Var(XD_S, loop_hafnian_batch.py:118), Var(D_S, loop_hafnian_batch.py:118), Var(N_max, loop_hafnian_batch.py:93)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:18,153 on stmt: $466load_global.8 = global(f_loop_odd: CPUDispatcher(<function f_loop_odd at 0x7fa047ebeb80>))
DEBUG 2022-02-14 16:38:18,153 on stmt: f_odd = call $466load_global.8(E, AX_S, XD_S, D_S, N_max, oddloop, oddVX_S, func=$466load_global.8, args=[Var(E, loop_hafnian_batch.py:120), Var(AX_S, loop_hafnian_batch.py:118), Var(XD_S, loop_hafnian_batch.py:118), Var(D_S, loop_hafnian_batch.py:118), Var(N_max, loop_hafnian_batch.py:93), Var(oddloop, loop_hafnian_batch.py:83), Var(oddVX_S, loop_hafnian_batch.py:118)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:18,153 on stmt: $486load_global.17 = global(range: <class 'range'>)
DEBUG 2022-02-14 16:38:18,153 on stmt: $const488.18 = const(int, 2)
DEBUG 2022-02-14 16:38:18,153 on stmt: $const492.20 = const(int, 0)
DEBUG 2022-02-14 16:38:18,153 on stmt: $494binary_subscr.21 = static_getitem(value=kept_edges, index=0, index_var=$const492.20, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:18,153 on stmt: $496binary_multiply.22 = $const488.18 * $494binary_subscr.21
DEBUG 2022-02-14 16:38:18,153 on stmt: $const498.23 = const(int, 1)
DEBUG 2022-02-14 16:38:18,153 on stmt: $500binary_add.24 = $496binary_multiply.22 + $const498.23
DEBUG 2022-02-14 16:38:18,153 on stmt: $const502.25 = const(int, 2)
DEBUG 2022-02-14 16:38:18,153 on stmt: $506binary_multiply.27 = $const502.25 * batch_max
DEBUG 2022-02-14 16:38:18,153 on stmt: $510binary_add.29 = $506binary_multiply.27 + even_cutoff
DEBUG 2022-02-14 16:38:18,153 on stmt: $const512.30 = const(int, 2)
DEBUG 2022-02-14 16:38:18,153 on stmt: $514binary_add.31 = $510binary_add.29 + $const512.30
DEBUG 2022-02-14 16:38:18,154 on stmt: $516call_function.32 = call $486load_global.17($500binary_add.24, $514binary_add.31, func=$486load_global.17, args=[Var($500binary_add.24, loop_hafnian_batch.py:131), Var($514binary_add.31, loop_hafnian_batch.py:131)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:18,154 on stmt: $518get_iter.33 = getiter(value=$516call_function.32)
DEBUG 2022-02-14 16:38:18,154 on stmt: $phi520.1 = $518get_iter.33
DEBUG 2022-02-14 16:38:18,154 on stmt: jump 520
DEBUG 2022-02-14 16:38:18,154 ==== SSA block rewrite pass on 520
DEBUG 2022-02-14 16:38:18,154 Running <numba.core.ssa._FreshVarHandler object at 0x7fa041ed43a0>
DEBUG 2022-02-14 16:38:18,154 on stmt: $520for_iter.2 = iternext(value=$phi520.1)
DEBUG 2022-02-14 16:38:18,154 on stmt: $520for_iter.3 = pair_first(value=$520for_iter.2)
DEBUG 2022-02-14 16:38:18,154 on stmt: $520for_iter.4 = pair_second(value=$520for_iter.2)
DEBUG 2022-02-14 16:38:18,154 on stmt: $phi522.2 = $520for_iter.3
DEBUG 2022-02-14 16:38:18,154 on stmt: branch $520for_iter.4, 522, 656
DEBUG 2022-02-14 16:38:18,154 ==== SSA block rewrite pass on 522
DEBUG 2022-02-14 16:38:18,154 Running <numba.core.ssa._FreshVarHandler object at 0x7fa041ed43a0>
DEBUG 2022-02-14 16:38:18,154 on stmt: N_det = $phi522.2
DEBUG 2022-02-14 16:38:18,154 on stmt: N = N_fixed + N_det
DEBUG 2022-02-14 16:38:18,154 on stmt: $const532.6 = const(int, -1)
DEBUG 2022-02-14 16:38:18,154 on stmt: $const536.8 = const(int, 2)
DEBUG 2022-02-14 16:38:18,154 on stmt: $538binary_floor_divide.9 = N // $const536.8
DEBUG 2022-02-14 16:38:18,154 on stmt: $542binary_subtract.11 = $538binary_floor_divide.9 - edges_sum
DEBUG 2022-02-14 16:38:18,154 on stmt: plus_minus = $const532.6 ** $542binary_subtract.11
DEBUG 2022-02-14 16:38:18,155 replaced with: plus_minus.1 = $const532.6 ** $542binary_subtract.11
DEBUG 2022-02-14 16:38:18,155 on stmt: $const552.15 = const(int, 1)
DEBUG 2022-02-14 16:38:18,155 on stmt: $554binary_subtract.16 = N_det - $const552.15
DEBUG 2022-02-14 16:38:18,155 on stmt: $const556.17 = const(int, 2)
DEBUG 2022-02-14 16:38:18,155 on stmt: $558binary_floor_divide.18 = $554binary_subtract.16 // $const556.17
DEBUG 2022-02-14 16:38:18,155 on stmt: $const562.20 = const(int, 0)
DEBUG 2022-02-14 16:38:18,155 on stmt: $564binary_subscr.21 = static_getitem(value=kept_edges, index=0, index_var=$const562.20, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:18,155 on stmt: $566build_tuple.22 = build_tuple(items=[Var($558binary_floor_divide.18, loop_hafnian_batch.py:135), Var($564binary_subscr.21, loop_hafnian_batch.py:135)])
DEBUG 2022-02-14 16:38:18,155 on stmt: $568binary_subscr.23 = getitem(value=binoms, index=$566build_tuple.22, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:18,155 on stmt: n_det_binom_prod = $568binary_subscr.23 * binom_prod.2
DEBUG 2022-02-14 16:38:18,155 on stmt: $const578.27 = const(int, 2)
DEBUG 2022-02-14 16:38:18,155 on stmt: $580binary_modulo.28 = N % $const578.27
DEBUG 2022-02-14 16:38:18,155 on stmt: $const582.29 = const(int, 0)
DEBUG 2022-02-14 16:38:18,155 on stmt: $584compare_op.30 = $580binary_modulo.28 == $const582.29
DEBUG 2022-02-14 16:38:18,155 on stmt: bool586 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:38:18,155 on stmt: $586pred = call bool586($584compare_op.30, func=bool586, args=(Var($584compare_op.30, loop_hafnian_batch.py:137),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:18,155 on stmt: branch $586pred, 590, 624
DEBUG 2022-02-14 16:38:18,155 ==== SSA block rewrite pass on 590
DEBUG 2022-02-14 16:38:18,156 Running <numba.core.ssa._FreshVarHandler object at 0x7fa041ed43a0>
DEBUG 2022-02-14 16:38:18,156 on stmt: $596binary_subscr.6 = getitem(value=Hnew, index=N_det, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:18,156 on stmt: $602binary_multiply.9 = n_det_binom_prod * plus_minus
DEBUG 2022-02-14 16:38:18,156 on stmt: $const608.12 = const(int, 2)
DEBUG 2022-02-14 16:38:18,156 on stmt: $610binary_floor_divide.13 = N // $const608.12
DEBUG 2022-02-14 16:38:18,156 on stmt: $612binary_subscr.14 = getitem(value=f_even, index=$610binary_floor_divide.13, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:18,156 on stmt: $614binary_multiply.15 = $602binary_multiply.9 * $612binary_subscr.14
DEBUG 2022-02-14 16:38:18,156 on stmt: $616inplace_add.16 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$596binary_subscr.6, rhs=$614binary_multiply.15, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:38:18,156 on stmt: Hnew[N_det] = $616inplace_add.16
DEBUG 2022-02-14 16:38:18,156 on stmt: jump 652
DEBUG 2022-02-14 16:38:18,156 ==== SSA block rewrite pass on 624
DEBUG 2022-02-14 16:38:18,156 Running <numba.core.ssa._FreshVarHandler object at 0x7fa041ed43a0>
DEBUG 2022-02-14 16:38:18,156 on stmt: $630binary_subscr.6 = getitem(value=Hnew, index=N_det, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:18,156 on stmt: $636binary_multiply.9 = n_det_binom_prod * plus_minus
DEBUG 2022-02-14 16:38:18,156 on stmt: $642binary_subscr.12 = getitem(value=f_odd, index=N, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:18,156 on stmt: $644binary_multiply.13 = $636binary_multiply.9 * $642binary_subscr.12
DEBUG 2022-02-14 16:38:18,156 on stmt: $646inplace_add.14 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$630binary_subscr.6, rhs=$644binary_multiply.13, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:38:18,156 on stmt: Hnew[N_det] = $646inplace_add.14
DEBUG 2022-02-14 16:38:18,156 on stmt: jump 652
DEBUG 2022-02-14 16:38:18,156 ==== SSA block rewrite pass on 652
DEBUG 2022-02-14 16:38:18,156 Running <numba.core.ssa._FreshVarHandler object at 0x7fa041ed43a0>
DEBUG 2022-02-14 16:38:18,156 on stmt: jump 520
DEBUG 2022-02-14 16:38:18,156 ==== SSA block rewrite pass on 656
DEBUG 2022-02-14 16:38:18,157 Running <numba.core.ssa._FreshVarHandler object at 0x7fa041ed43a0>
DEBUG 2022-02-14 16:38:18,157 on stmt: $660inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=H_batch.2, rhs=Hnew, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:38:18,157 on stmt: H_batch.1 = $660inplace_add.3
DEBUG 2022-02-14 16:38:18,157 on stmt: jump 192
DEBUG 2022-02-14 16:38:18,157 ==== SSA block rewrite pass on 666
DEBUG 2022-02-14 16:38:18,157 Running <numba.core.ssa._FreshVarHandler object at 0x7fa041ed43a0>
DEBUG 2022-02-14 16:38:18,157 on stmt: bool668 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:38:18,157 on stmt: $668pred = call bool668(glynn, func=bool668, args=(Var(glynn, loop_hafnian_batch.py:83),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:18,157 on stmt: branch $668pred, 672, 726
DEBUG 2022-02-14 16:38:18,157 ==== SSA block rewrite pass on 672
DEBUG 2022-02-14 16:38:18,157 Running <numba.core.ssa._FreshVarHandler object at 0x7fa041ed43a0>
DEBUG 2022-02-14 16:38:18,157 on stmt: $672load_global.0 = global(range: <class 'range'>)
DEBUG 2022-02-14 16:38:18,157 on stmt: $676load_attr.2 = getattr(value=H_batch.2, attr=shape)
DEBUG 2022-02-14 16:38:18,157 on stmt: $const678.3 = const(int, 0)
DEBUG 2022-02-14 16:38:18,157 on stmt: $680binary_subscr.4 = static_getitem(value=$676load_attr.2, index=0, index_var=$const678.3, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:18,157 on stmt: $682call_function.5 = call $672load_global.0($680binary_subscr.4, func=$672load_global.0, args=[Var($680binary_subscr.4, loop_hafnian_batch.py:145)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:18,157 on stmt: $684get_iter.6 = getiter(value=$682call_function.5)
DEBUG 2022-02-14 16:38:18,157 on stmt: $phi686.0 = $684get_iter.6
DEBUG 2022-02-14 16:38:18,157 on stmt: jump 686
DEBUG 2022-02-14 16:38:18,157 ==== SSA block rewrite pass on 686
DEBUG 2022-02-14 16:38:18,157 Running <numba.core.ssa._FreshVarHandler object at 0x7fa041ed43a0>
DEBUG 2022-02-14 16:38:18,157 on stmt: $686for_iter.1 = iternext(value=$phi686.0)
DEBUG 2022-02-14 16:38:18,157 on stmt: $686for_iter.2 = pair_first(value=$686for_iter.1)
DEBUG 2022-02-14 16:38:18,157 on stmt: $686for_iter.3 = pair_second(value=$686for_iter.1)
DEBUG 2022-02-14 16:38:18,157 on stmt: $phi688.1 = $686for_iter.2
DEBUG 2022-02-14 16:38:18,157 on stmt: branch $686for_iter.3, 688, 726
DEBUG 2022-02-14 16:38:18,158 ==== SSA block rewrite pass on 688
DEBUG 2022-02-14 16:38:18,158 Running <numba.core.ssa._FreshVarHandler object at 0x7fa041ed43a0>
DEBUG 2022-02-14 16:38:18,158 on stmt: j.1 = $phi688.1
DEBUG 2022-02-14 16:38:18,158 on stmt: x = N_fixed + j.1
DEBUG 2022-02-14 16:38:18,158 on stmt: $704binary_subscr.9 = getitem(value=H_batch.2, index=j.1, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:18,158 on stmt: $const706.10 = const(float, 0.5)
DEBUG 2022-02-14 16:38:18,158 on stmt: $const710.12 = const(int, 2)
DEBUG 2022-02-14 16:38:18,158 on stmt: $712binary_floor_divide.13 = x // $const710.12
DEBUG 2022-02-14 16:38:18,158 on stmt: $714binary_power.14 = $const706.10 ** $712binary_floor_divide.13
DEBUG 2022-02-14 16:38:18,158 on stmt: $716inplace_multiply.15 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=$704binary_subscr.9, rhs=$714binary_power.14, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:38:18,158 on stmt: H_batch.2[j.1] = $716inplace_multiply.15
DEBUG 2022-02-14 16:38:18,158 on stmt: jump 686
DEBUG 2022-02-14 16:38:18,158 ==== SSA block rewrite pass on 726
DEBUG 2022-02-14 16:38:18,158 Running <numba.core.ssa._FreshVarHandler object at 0x7fa041ed43a0>
DEBUG 2022-02-14 16:38:18,158 on stmt: $728return_value.1 = cast(value=H_batch.2)
DEBUG 2022-02-14 16:38:18,158 on stmt: return $728return_value.1
DEBUG 2022-02-14 16:38:18,158 Replaced assignments: defaultdict(<class 'list'>,
            {376: [<numba.core.ir.Assign object at 0x7fa041ed4e50>],
             522: [<numba.core.ir.Assign object at 0x7fa041ed4670>]})
DEBUG 2022-02-14 16:38:18,158 ==== SSA block rewrite pass on 0
DEBUG 2022-02-14 16:38:18,158 Running <numba.core.ssa._FixSSAVars object at 0x7fa046a325e0>
DEBUG 2022-02-14 16:38:18,158 on stmt: A = arg(0, name=A)
DEBUG 2022-02-14 16:38:18,158 on stmt: D = arg(1, name=D)
DEBUG 2022-02-14 16:38:18,158 on stmt: fixed_edge_reps = arg(2, name=fixed_edge_reps)
DEBUG 2022-02-14 16:38:18,158 on stmt: batch_max = arg(3, name=batch_max)
DEBUG 2022-02-14 16:38:18,158 on stmt: even_cutoff = arg(4, name=even_cutoff)
DEBUG 2022-02-14 16:38:18,158 on stmt: oddmode = arg(5, name=oddmode)
DEBUG 2022-02-14 16:38:18,159 on stmt: glynn = arg(6, name=glynn)
DEBUG 2022-02-14 16:38:18,159 on stmt: $const4.1 = const(int, 0)
DEBUG 2022-02-14 16:38:18,159 on stmt: oddloop = static_getitem(value=D, index=0, index_var=$const4.1, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:18,159 on stmt: $const12.4 = const(int, 0)
DEBUG 2022-02-14 16:38:18,159 on stmt: $const14.5 = const(NoneType, None)
DEBUG 2022-02-14 16:38:18,159 on stmt: $const16.6 = const(NoneType, None)
DEBUG 2022-02-14 16:38:18,159 on stmt: $18build_slice.7 = global(slice: <class 'slice'>)
DEBUG 2022-02-14 16:38:18,159 on stmt: $18build_slice.8 = call $18build_slice.7($const14.5, $const16.6, func=$18build_slice.7, args=(Var($const14.5, loop_hafnian_batch.py:84), Var($const16.6, loop_hafnian_batch.py:84)), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:18,159 on stmt: $20build_tuple.9 = build_tuple(items=[Var($const12.4, loop_hafnian_batch.py:84), Var($18build_slice.8, loop_hafnian_batch.py:84)])
DEBUG 2022-02-14 16:38:18,159 on stmt: oddV = static_getitem(value=A, index=(0, slice(None, None, None)), index_var=$20build_tuple.9, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:18,159 on stmt: $const28.12 = const(int, 1)
DEBUG 2022-02-14 16:38:18,159 on stmt: oddloop0 = static_getitem(value=D, index=1, index_var=$const28.12, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:18,159 on stmt: $const36.15 = const(int, 1)
DEBUG 2022-02-14 16:38:18,159 on stmt: $const38.16 = const(NoneType, None)
DEBUG 2022-02-14 16:38:18,159 on stmt: $const40.17 = const(NoneType, None)
DEBUG 2022-02-14 16:38:18,159 on stmt: $42build_slice.18 = global(slice: <class 'slice'>)
DEBUG 2022-02-14 16:38:18,159 on stmt: $42build_slice.19 = call $42build_slice.18($const38.16, $const40.17, func=$42build_slice.18, args=(Var($const38.16, loop_hafnian_batch.py:89), Var($const40.17, loop_hafnian_batch.py:89)), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:18,159 on stmt: $44build_tuple.20 = build_tuple(items=[Var($const36.15, loop_hafnian_batch.py:89), Var($42build_slice.19, loop_hafnian_batch.py:89)])
DEBUG 2022-02-14 16:38:18,159 on stmt: oddV0 = static_getitem(value=A, index=(1, slice(None, None, None)), index_var=$44build_tuple.20, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:18,159 on stmt: $52load_attr.23 = getattr(value=A, attr=shape)
DEBUG 2022-02-14 16:38:18,159 on stmt: $const54.24 = const(int, 0)
DEBUG 2022-02-14 16:38:18,159 on stmt: n = static_getitem(value=$52load_attr.23, index=0, index_var=$const54.24, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:18,159 on stmt: $const60.26 = const(int, 2)
DEBUG 2022-02-14 16:38:18,159 on stmt: $64load_method.28 = getattr(value=fixed_edge_reps, attr=sum)
DEBUG 2022-02-14 16:38:18,160 on stmt: $66call_method.29 = call $64load_method.28(func=$64load_method.28, args=[], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:18,160 on stmt: $68binary_multiply.30 = $const60.26 * $66call_method.29
DEBUG 2022-02-14 16:38:18,160 on stmt: $const70.31 = const(int, 1)
DEBUG 2022-02-14 16:38:18,160 on stmt: N_fixed = $68binary_multiply.30 + $const70.31
DEBUG 2022-02-14 16:38:18,160 on stmt: $const78.34 = const(int, 2)
DEBUG 2022-02-14 16:38:18,160 on stmt: $82binary_multiply.36 = $const78.34 * batch_max
DEBUG 2022-02-14 16:38:18,160 on stmt: $84binary_add.37 = N_fixed + $82binary_multiply.36
DEBUG 2022-02-14 16:38:18,160 on stmt: $88binary_add.39 = $84binary_add.37 + even_cutoff
DEBUG 2022-02-14 16:38:18,160 on stmt: $const90.40 = const(int, 1)
DEBUG 2022-02-14 16:38:18,160 on stmt: N_max = $88binary_add.39 + $const90.40
DEBUG 2022-02-14 16:38:18,160 on stmt: $96load_global.42 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:38:18,160 on stmt: $98load_method.43 = getattr(value=$96load_global.42, attr=concatenate)
DEBUG 2022-02-14 16:38:18,160 on stmt: $100load_global.44 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:38:18,160 on stmt: $102load_method.45 = getattr(value=$100load_global.44, attr=array)
DEBUG 2022-02-14 16:38:18,160 on stmt: $const106.47 = const(int, 1)
DEBUG 2022-02-14 16:38:18,160 on stmt: $108build_list.48 = build_list(items=[Var(batch_max, loop_hafnian_batch.py:83), Var($const106.47, loop_hafnian_batch.py:95)])
DEBUG 2022-02-14 16:38:18,160 on stmt: $110call_method.49 = call $102load_method.45($108build_list.48, func=$102load_method.45, args=[Var($108build_list.48, loop_hafnian_batch.py:95)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:18,160 on stmt: $114build_tuple.51 = build_tuple(items=[Var($110call_method.49, loop_hafnian_batch.py:95), Var(fixed_edge_reps, loop_hafnian_batch.py:83)])
DEBUG 2022-02-14 16:38:18,160 on stmt: edge_reps = call $98load_method.43($114build_tuple.51, func=$98load_method.43, args=[Var($114build_tuple.51, loop_hafnian_batch.py:95)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:18,160 on stmt: $120load_global.53 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:38:18,160 on stmt: $122load_method.54 = getattr(value=$120load_global.53, attr=prod)
DEBUG 2022-02-14 16:38:18,160 on stmt: $const126.56 = const(int, 1)
DEBUG 2022-02-14 16:38:18,160 on stmt: $128binary_add.57 = edge_reps + $const126.56
DEBUG 2022-02-14 16:38:18,161 on stmt: steps = call $122load_method.54($128binary_add.57, func=$122load_method.54, args=[Var($128binary_add.57, loop_hafnian_batch.py:96)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:18,161 on stmt: $136load_method.60 = getattr(value=edge_reps, attr=max)
DEBUG 2022-02-14 16:38:18,161 on stmt: $138call_method.61 = call $136load_method.60(func=$136load_method.60, args=[], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:18,161 on stmt: max_binom = $138call_method.61 + even_cutoff
DEBUG 2022-02-14 16:38:18,161 on stmt: $146load_global.64 = global(precompute_binoms: CPUDispatcher(<function precompute_binoms at 0x7fa047ebe310>))
DEBUG 2022-02-14 16:38:18,161 on stmt: binoms = call $146load_global.64(max_binom, func=$146load_global.64, args=[Var(max_binom, loop_hafnian_batch.py:98)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:18,161 on stmt: $154load_global.67 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:38:18,161 on stmt: $156load_attr.68 = getattr(value=$154load_global.67, attr=zeros)
DEBUG 2022-02-14 16:38:18,161 on stmt: $const158.69 = const(int, 2)
DEBUG 2022-02-14 16:38:18,161 on stmt: $162binary_multiply.71 = $const158.69 * batch_max
DEBUG 2022-02-14 16:38:18,161 on stmt: $166binary_add.73 = $162binary_multiply.71 + even_cutoff
DEBUG 2022-02-14 16:38:18,161 on stmt: $const168.74 = const(int, 2)
DEBUG 2022-02-14 16:38:18,161 on stmt: $170binary_add.75 = $166binary_add.73 + $const168.74
DEBUG 2022-02-14 16:38:18,161 on stmt: $172load_global.76 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:38:18,161 on stmt: $174load_attr.77 = getattr(value=$172load_global.76, attr=complex128)
DEBUG 2022-02-14 16:38:18,161 on stmt: H_batch = call $156load_attr.68($170binary_add.75, func=$156load_attr.68, args=[Var($170binary_add.75, loop_hafnian_batch.py:101)], kws=[('dtype', Var($174load_attr.77, loop_hafnian_batch.py:101))], vararg=None, target=None)
DEBUG 2022-02-14 16:38:18,161 on stmt: $182load_global.80 = global(numba: <module 'numba' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numba/__init__.py'>)
DEBUG 2022-02-14 16:38:18,161 on stmt: $184load_method.81 = getattr(value=$182load_global.80, attr=prange)
DEBUG 2022-02-14 16:38:18,161 on stmt: $188call_method.83 = call $184load_method.81(steps, func=$184load_method.81, args=[Var(steps, loop_hafnian_batch.py:96)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:18,161 on stmt: $190get_iter.84 = getiter(value=$188call_method.83)
DEBUG 2022-02-14 16:38:18,161 on stmt: $phi192.0 = $190get_iter.84
DEBUG 2022-02-14 16:38:18,161 on stmt: jump 192
DEBUG 2022-02-14 16:38:18,162 ==== SSA block rewrite pass on 192
DEBUG 2022-02-14 16:38:18,162 Running <numba.core.ssa._FixSSAVars object at 0x7fa046a325e0>
DEBUG 2022-02-14 16:38:18,162 on stmt: H_batch.2 = phi(incoming_values=[Var(H_batch, loop_hafnian_batch.py:101), Var(H_batch.1, loop_hafnian_batch.py:142)], incoming_blocks=[0, 656])
DEBUG 2022-02-14 16:38:18,162 on stmt: $192for_iter.1 = iternext(value=$phi192.0)
DEBUG 2022-02-14 16:38:18,162 on stmt: $192for_iter.2 = pair_first(value=$192for_iter.1)
DEBUG 2022-02-14 16:38:18,162 on stmt: $192for_iter.3 = pair_second(value=$192for_iter.1)
DEBUG 2022-02-14 16:38:18,162 on stmt: $phi196.1 = $192for_iter.2
DEBUG 2022-02-14 16:38:18,162 on stmt: branch $192for_iter.3, 196, 666
DEBUG 2022-02-14 16:38:18,162 ==== SSA block rewrite pass on 196
DEBUG 2022-02-14 16:38:18,162 Running <numba.core.ssa._FixSSAVars object at 0x7fa046a325e0>
DEBUG 2022-02-14 16:38:18,162 on stmt: j = $phi196.1
DEBUG 2022-02-14 16:38:18,162 on stmt: $198load_global.2 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:38:18,162 on stmt: $200load_attr.3 = getattr(value=$198load_global.2, attr=zeros)
DEBUG 2022-02-14 16:38:18,162 on stmt: $const202.4 = const(int, 2)
DEBUG 2022-02-14 16:38:18,162 on stmt: $206binary_multiply.6 = $const202.4 * batch_max
DEBUG 2022-02-14 16:38:18,162 on stmt: $210binary_add.8 = $206binary_multiply.6 + even_cutoff
DEBUG 2022-02-14 16:38:18,162 on stmt: $const212.9 = const(int, 2)
DEBUG 2022-02-14 16:38:18,162 on stmt: $214binary_add.10 = $210binary_add.8 + $const212.9
DEBUG 2022-02-14 16:38:18,162 on stmt: $216load_global.11 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:38:18,162 on stmt: $218load_attr.12 = getattr(value=$216load_global.11, attr=complex128)
DEBUG 2022-02-14 16:38:18,162 on stmt: Hnew = call $200load_attr.3($214binary_add.10, func=$200load_attr.3, args=[Var($214binary_add.10, loop_hafnian_batch.py:104)], kws=[('dtype', Var($218load_attr.12, loop_hafnian_batch.py:104))], vararg=None, target=None)
DEBUG 2022-02-14 16:38:18,162 on stmt: $226load_global.15 = global(find_kept_edges: CPUDispatcher(<function find_kept_edges at 0x7fa047ebe790>))
DEBUG 2022-02-14 16:38:18,162 on stmt: kept_edges = call $226load_global.15(j, edge_reps, func=$226load_global.15, args=[Var(j, loop_hafnian_batch.py:102), Var(edge_reps, loop_hafnian_batch.py:95)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:18,163 on stmt: $238load_method.20 = getattr(value=kept_edges, attr=sum)
DEBUG 2022-02-14 16:38:18,163 on stmt: edges_sum = call $238load_method.20(func=$238load_method.20, args=[], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:18,163 on stmt: binom_prod = const(float, 1.0)
DEBUG 2022-02-14 16:38:18,163 on stmt: $248load_global.23 = global(range: <class 'range'>)
DEBUG 2022-02-14 16:38:18,163 on stmt: $const250.24 = const(int, 1)
DEBUG 2022-02-14 16:38:18,163 on stmt: $const254.26 = const(int, 2)
DEBUG 2022-02-14 16:38:18,163 on stmt: $256binary_floor_divide.27 = n // $const254.26
DEBUG 2022-02-14 16:38:18,163 on stmt: $258call_function.28 = call $248load_global.23($const250.24, $256binary_floor_divide.27, func=$248load_global.23, args=[Var($const250.24, loop_hafnian_batch.py:110), Var($256binary_floor_divide.27, loop_hafnian_batch.py:110)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:18,163 on stmt: $260get_iter.29 = getiter(value=$258call_function.28)
DEBUG 2022-02-14 16:38:18,163 on stmt: $phi262.1 = $260get_iter.29
DEBUG 2022-02-14 16:38:18,163 on stmt: jump 262
DEBUG 2022-02-14 16:38:18,163 ==== SSA block rewrite pass on 262
DEBUG 2022-02-14 16:38:18,163 Running <numba.core.ssa._FixSSAVars object at 0x7fa046a325e0>
DEBUG 2022-02-14 16:38:18,163 on stmt: binom_prod.2 = phi(incoming_values=[Var(binom_prod.1, loop_hafnian_batch.py:111), Var(binom_prod, loop_hafnian_batch.py:109)], incoming_blocks=[264, 196])
DEBUG 2022-02-14 16:38:18,163 on stmt: $262for_iter.2 = iternext(value=$phi262.1)
DEBUG 2022-02-14 16:38:18,163 on stmt: $262for_iter.3 = pair_first(value=$262for_iter.2)
DEBUG 2022-02-14 16:38:18,163 on stmt: $262for_iter.4 = pair_second(value=$262for_iter.2)
DEBUG 2022-02-14 16:38:18,163 on stmt: $phi264.2 = $262for_iter.3
DEBUG 2022-02-14 16:38:18,163 on stmt: branch $262for_iter.4, 264, 294
DEBUG 2022-02-14 16:38:18,163 ==== SSA block rewrite pass on 264
DEBUG 2022-02-14 16:38:18,163 Running <numba.core.ssa._FixSSAVars object at 0x7fa046a325e0>
DEBUG 2022-02-14 16:38:18,163 on stmt: i = $phi264.2
DEBUG 2022-02-14 16:38:18,163 on stmt: $274binary_subscr.7 = getitem(value=edge_reps, index=i, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:18,163 on stmt: $280binary_subscr.10 = getitem(value=kept_edges, index=i, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:18,163 on stmt: $282build_tuple.11 = build_tuple(items=[Var($274binary_subscr.7, loop_hafnian_batch.py:111), Var($280binary_subscr.10, loop_hafnian_batch.py:111)])
DEBUG 2022-02-14 16:38:18,163 on stmt: $284binary_subscr.12 = getitem(value=binoms, index=$282build_tuple.11, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:18,164 on stmt: $286inplace_multiply.13 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=binom_prod.2, rhs=$284binary_subscr.12, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:38:18,164 on stmt: binom_prod.1 = $286inplace_multiply.13
DEBUG 2022-02-14 16:38:18,164 on stmt: jump 262
DEBUG 2022-02-14 16:38:18,164 ==== SSA block rewrite pass on 294
DEBUG 2022-02-14 16:38:18,164 Running <numba.core.ssa._FixSSAVars object at 0x7fa046a325e0>
DEBUG 2022-02-14 16:38:18,164 on stmt: bool296 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:38:18,164 on stmt: $296pred = call bool296(glynn, func=bool296, args=(Var(glynn, loop_hafnian_batch.py:83),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:18,164 on stmt: branch $296pred, 300, 314
DEBUG 2022-02-14 16:38:18,164 ==== SSA block rewrite pass on 300
DEBUG 2022-02-14 16:38:18,164 Running <numba.core.ssa._FixSSAVars object at 0x7fa046a325e0>
DEBUG 2022-02-14 16:38:18,164 on stmt: $const300.1 = const(int, 2)
DEBUG 2022-02-14 16:38:18,164 on stmt: $304binary_multiply.3 = $const300.1 * kept_edges
DEBUG 2022-02-14 16:38:18,164 on stmt: delta = $304binary_multiply.3 - edge_reps
DEBUG 2022-02-14 16:38:18,164 on stmt: jump 318
DEBUG 2022-02-14 16:38:18,164 ==== SSA block rewrite pass on 314
DEBUG 2022-02-14 16:38:18,164 Running <numba.core.ssa._FixSSAVars object at 0x7fa046a325e0>
DEBUG 2022-02-14 16:38:18,164 on stmt: delta = kept_edges
DEBUG 2022-02-14 16:38:18,164 on stmt: jump 318
DEBUG 2022-02-14 16:38:18,164 ==== SSA block rewrite pass on 318
DEBUG 2022-02-14 16:38:18,164 Running <numba.core.ssa._FixSSAVars object at 0x7fa046a325e0>
DEBUG 2022-02-14 16:38:18,164 on stmt: $318load_global.1 = global(get_submatrices: CPUDispatcher(<function get_submatrices at 0x7fa047ebed30>))
DEBUG 2022-02-14 16:38:18,164 on stmt: $328call_function.6 = call $318load_global.1(delta, A, D, oddV, func=$318load_global.1, args=[Var(delta, loop_hafnian_batch.py:114), Var(A, loop_hafnian_batch.py:83), Var(D, loop_hafnian_batch.py:83), Var(oddV, loop_hafnian_batch.py:84)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:18,164 on stmt: $330unpack_sequence.11 = exhaust_iter(value=$328call_function.6, count=4)
DEBUG 2022-02-14 16:38:18,164 on stmt: $330unpack_sequence.7 = static_getitem(value=$330unpack_sequence.11, index=0, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:18,164 on stmt: $330unpack_sequence.8 = static_getitem(value=$330unpack_sequence.11, index=1, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:18,164 on stmt: $330unpack_sequence.9 = static_getitem(value=$330unpack_sequence.11, index=2, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:18,164 on stmt: $330unpack_sequence.10 = static_getitem(value=$330unpack_sequence.11, index=3, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:18,165 on stmt: AX_S = $330unpack_sequence.7
DEBUG 2022-02-14 16:38:18,165 on stmt: XD_S = $330unpack_sequence.8
DEBUG 2022-02-14 16:38:18,165 on stmt: D_S = $330unpack_sequence.9
DEBUG 2022-02-14 16:38:18,165 on stmt: oddVX_S = $330unpack_sequence.10
DEBUG 2022-02-14 16:38:18,165 on stmt: $340load_global.12 = global(eigvals: CPUDispatcher(<function eigvals at 0x7fa047e5d430>))
DEBUG 2022-02-14 16:38:18,165 on stmt: E = call $340load_global.12(AX_S, func=$340load_global.12, args=[Var(AX_S, loop_hafnian_batch.py:118)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:18,165 on stmt: $const350.16 = const(int, 0)
DEBUG 2022-02-14 16:38:18,165 on stmt: $352binary_subscr.17 = static_getitem(value=kept_edges, index=0, index_var=$const350.16, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:18,165 on stmt: $const354.18 = const(int, 0)
DEBUG 2022-02-14 16:38:18,165 on stmt: $356compare_op.19 = $352binary_subscr.17 == $const354.18
DEBUG 2022-02-14 16:38:18,165 on stmt: bool358 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:38:18,165 on stmt: $358pred = call bool358($356compare_op.19, func=bool358, args=(Var($356compare_op.19, loop_hafnian_batch.py:122),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:18,165 on stmt: branch $358pred, 362, 450
DEBUG 2022-02-14 16:38:18,165 ==== SSA block rewrite pass on 362
DEBUG 2022-02-14 16:38:18,165 Running <numba.core.ssa._FixSSAVars object at 0x7fa046a325e0>
DEBUG 2022-02-14 16:38:18,165 on stmt: $const364.2 = const(int, 1)
DEBUG 2022-02-14 16:38:18,165 on stmt: $366binary_subscr.3 = static_getitem(value=kept_edges, index=1, index_var=$const364.2, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:18,165 on stmt: $const368.4 = const(int, 0)
DEBUG 2022-02-14 16:38:18,165 on stmt: $370compare_op.5 = $366binary_subscr.3 == $const368.4
DEBUG 2022-02-14 16:38:18,165 on stmt: bool372 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:38:18,165 on stmt: $372pred = call bool372($370compare_op.5, func=bool372, args=(Var($370compare_op.5, loop_hafnian_batch.py:122),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:18,165 on stmt: branch $372pred, 376, 450
DEBUG 2022-02-14 16:38:18,165 ==== SSA block rewrite pass on 376
DEBUG 2022-02-14 16:38:18,165 Running <numba.core.ssa._FixSSAVars object at 0x7fa046a325e0>
DEBUG 2022-02-14 16:38:18,165 on stmt: $376load_global.1 = global(get_submatrix_batch_odd0: CPUDispatcher(<function get_submatrix_batch_odd0 at 0x7fa047ebef70>))
DEBUG 2022-02-14 16:38:18,165 on stmt: oddVX_S0 = call $376load_global.1(delta, oddV0, func=$376load_global.1, args=[Var(delta, loop_hafnian_batch.py:114), Var(oddV0, loop_hafnian_batch.py:89)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:18,166 on stmt: $const386.5 = const(int, -1)
DEBUG 2022-02-14 16:38:18,166 on stmt: $const390.7 = const(int, 2)
DEBUG 2022-02-14 16:38:18,166 on stmt: $392binary_floor_divide.8 = N_fixed // $const390.7
DEBUG 2022-02-14 16:38:18,166 on stmt: $396binary_subtract.10 = $392binary_floor_divide.8 - edges_sum
DEBUG 2022-02-14 16:38:18,166 on stmt: plus_minus = $const386.5 ** $396binary_subtract.10
DEBUG 2022-02-14 16:38:18,166 on stmt: $402load_global.12 = global(f_loop_odd: CPUDispatcher(<function f_loop_odd at 0x7fa047ebeb80>))
DEBUG 2022-02-14 16:38:18,166 on stmt: $418call_function.20 = call $402load_global.12(E, AX_S, XD_S, D_S, N_fixed, oddloop0, oddVX_S0, func=$402load_global.12, args=[Var(E, loop_hafnian_batch.py:120), Var(AX_S, loop_hafnian_batch.py:118), Var(XD_S, loop_hafnian_batch.py:118), Var(D_S, loop_hafnian_batch.py:118), Var(N_fixed, loop_hafnian_batch.py:92), Var(oddloop0, loop_hafnian_batch.py:88), Var(oddVX_S0, loop_hafnian_batch.py:123)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:18,166 on stmt: f = getitem(value=$418call_function.20, index=N_fixed, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:18,166 on stmt: $const428.24 = const(int, 0)
DEBUG 2022-02-14 16:38:18,166 on stmt: $432binary_subscr.27 = static_getitem(value=H_batch.2, index=0, index_var=$const428.24, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:18,166 on stmt: $438binary_multiply.30 = binom_prod.2 * plus_minus
DEBUG 2022-02-14 16:38:18,166 find_def var='plus_minus' stmt=$438binary_multiply.30 = binom_prod.2 * plus_minus
DEBUG 2022-02-14 16:38:18,166 on stmt: $442binary_multiply.32 = $438binary_multiply.30 * f
DEBUG 2022-02-14 16:38:18,166 on stmt: $444inplace_add.33 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$432binary_subscr.27, rhs=$442binary_multiply.32, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:38:18,166 on stmt: H_batch.2[0] = $444inplace_add.33
DEBUG 2022-02-14 16:38:18,166 on stmt: jump 450
DEBUG 2022-02-14 16:38:18,166 ==== SSA block rewrite pass on 450
DEBUG 2022-02-14 16:38:18,166 Running <numba.core.ssa._FixSSAVars object at 0x7fa046a325e0>
DEBUG 2022-02-14 16:38:18,166 on stmt: $450load_global.1 = global(f_loop: CPUDispatcher(<function f_loop at 0x7fa047ebe9d0>))
DEBUG 2022-02-14 16:38:18,166 on stmt: f_even = call $450load_global.1(E, AX_S, XD_S, D_S, N_max, func=$450load_global.1, args=[Var(E, loop_hafnian_batch.py:120), Var(AX_S, loop_hafnian_batch.py:118), Var(XD_S, loop_hafnian_batch.py:118), Var(D_S, loop_hafnian_batch.py:118), Var(N_max, loop_hafnian_batch.py:93)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:18,166 on stmt: $466load_global.8 = global(f_loop_odd: CPUDispatcher(<function f_loop_odd at 0x7fa047ebeb80>))
DEBUG 2022-02-14 16:38:18,166 on stmt: f_odd = call $466load_global.8(E, AX_S, XD_S, D_S, N_max, oddloop, oddVX_S, func=$466load_global.8, args=[Var(E, loop_hafnian_batch.py:120), Var(AX_S, loop_hafnian_batch.py:118), Var(XD_S, loop_hafnian_batch.py:118), Var(D_S, loop_hafnian_batch.py:118), Var(N_max, loop_hafnian_batch.py:93), Var(oddloop, loop_hafnian_batch.py:83), Var(oddVX_S, loop_hafnian_batch.py:118)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:18,167 on stmt: $486load_global.17 = global(range: <class 'range'>)
DEBUG 2022-02-14 16:38:18,167 on stmt: $const488.18 = const(int, 2)
DEBUG 2022-02-14 16:38:18,167 on stmt: $const492.20 = const(int, 0)
DEBUG 2022-02-14 16:38:18,167 on stmt: $494binary_subscr.21 = static_getitem(value=kept_edges, index=0, index_var=$const492.20, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:18,167 on stmt: $496binary_multiply.22 = $const488.18 * $494binary_subscr.21
DEBUG 2022-02-14 16:38:18,167 on stmt: $const498.23 = const(int, 1)
DEBUG 2022-02-14 16:38:18,167 on stmt: $500binary_add.24 = $496binary_multiply.22 + $const498.23
DEBUG 2022-02-14 16:38:18,167 on stmt: $const502.25 = const(int, 2)
DEBUG 2022-02-14 16:38:18,167 on stmt: $506binary_multiply.27 = $const502.25 * batch_max
DEBUG 2022-02-14 16:38:18,167 on stmt: $510binary_add.29 = $506binary_multiply.27 + even_cutoff
DEBUG 2022-02-14 16:38:18,167 on stmt: $const512.30 = const(int, 2)
DEBUG 2022-02-14 16:38:18,167 on stmt: $514binary_add.31 = $510binary_add.29 + $const512.30
DEBUG 2022-02-14 16:38:18,167 on stmt: $516call_function.32 = call $486load_global.17($500binary_add.24, $514binary_add.31, func=$486load_global.17, args=[Var($500binary_add.24, loop_hafnian_batch.py:131), Var($514binary_add.31, loop_hafnian_batch.py:131)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:18,167 on stmt: $518get_iter.33 = getiter(value=$516call_function.32)
DEBUG 2022-02-14 16:38:18,167 on stmt: $phi520.1 = $518get_iter.33
DEBUG 2022-02-14 16:38:18,167 on stmt: jump 520
DEBUG 2022-02-14 16:38:18,167 ==== SSA block rewrite pass on 520
DEBUG 2022-02-14 16:38:18,167 Running <numba.core.ssa._FixSSAVars object at 0x7fa046a325e0>
DEBUG 2022-02-14 16:38:18,167 on stmt: $520for_iter.2 = iternext(value=$phi520.1)
DEBUG 2022-02-14 16:38:18,167 on stmt: $520for_iter.3 = pair_first(value=$520for_iter.2)
DEBUG 2022-02-14 16:38:18,167 on stmt: $520for_iter.4 = pair_second(value=$520for_iter.2)
DEBUG 2022-02-14 16:38:18,167 on stmt: $phi522.2 = $520for_iter.3
DEBUG 2022-02-14 16:38:18,167 on stmt: branch $520for_iter.4, 522, 656
DEBUG 2022-02-14 16:38:18,167 ==== SSA block rewrite pass on 522
DEBUG 2022-02-14 16:38:18,167 Running <numba.core.ssa._FixSSAVars object at 0x7fa046a325e0>
DEBUG 2022-02-14 16:38:18,167 on stmt: N_det = $phi522.2
DEBUG 2022-02-14 16:38:18,168 on stmt: N = N_fixed + N_det
DEBUG 2022-02-14 16:38:18,168 on stmt: $const532.6 = const(int, -1)
DEBUG 2022-02-14 16:38:18,168 on stmt: $const536.8 = const(int, 2)
DEBUG 2022-02-14 16:38:18,168 on stmt: $538binary_floor_divide.9 = N // $const536.8
DEBUG 2022-02-14 16:38:18,168 on stmt: $542binary_subtract.11 = $538binary_floor_divide.9 - edges_sum
DEBUG 2022-02-14 16:38:18,168 on stmt: plus_minus.1 = $const532.6 ** $542binary_subtract.11
DEBUG 2022-02-14 16:38:18,168 on stmt: $const552.15 = const(int, 1)
DEBUG 2022-02-14 16:38:18,168 on stmt: $554binary_subtract.16 = N_det - $const552.15
DEBUG 2022-02-14 16:38:18,168 on stmt: $const556.17 = const(int, 2)
DEBUG 2022-02-14 16:38:18,168 on stmt: $558binary_floor_divide.18 = $554binary_subtract.16 // $const556.17
DEBUG 2022-02-14 16:38:18,168 on stmt: $const562.20 = const(int, 0)
DEBUG 2022-02-14 16:38:18,168 on stmt: $564binary_subscr.21 = static_getitem(value=kept_edges, index=0, index_var=$const562.20, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:18,168 on stmt: $566build_tuple.22 = build_tuple(items=[Var($558binary_floor_divide.18, loop_hafnian_batch.py:135), Var($564binary_subscr.21, loop_hafnian_batch.py:135)])
DEBUG 2022-02-14 16:38:18,168 on stmt: $568binary_subscr.23 = getitem(value=binoms, index=$566build_tuple.22, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:18,168 on stmt: n_det_binom_prod = $568binary_subscr.23 * binom_prod.2
DEBUG 2022-02-14 16:38:18,168 on stmt: $const578.27 = const(int, 2)
DEBUG 2022-02-14 16:38:18,168 on stmt: $580binary_modulo.28 = N % $const578.27
DEBUG 2022-02-14 16:38:18,168 on stmt: $const582.29 = const(int, 0)
DEBUG 2022-02-14 16:38:18,168 on stmt: $584compare_op.30 = $580binary_modulo.28 == $const582.29
DEBUG 2022-02-14 16:38:18,168 on stmt: bool586 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:38:18,168 on stmt: $586pred = call bool586($584compare_op.30, func=bool586, args=(Var($584compare_op.30, loop_hafnian_batch.py:137),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:18,168 on stmt: branch $586pred, 590, 624
DEBUG 2022-02-14 16:38:18,168 ==== SSA block rewrite pass on 590
DEBUG 2022-02-14 16:38:18,168 Running <numba.core.ssa._FixSSAVars object at 0x7fa046a325e0>
DEBUG 2022-02-14 16:38:18,168 on stmt: $596binary_subscr.6 = getitem(value=Hnew, index=N_det, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:18,168 on stmt: $602binary_multiply.9 = n_det_binom_prod * plus_minus
DEBUG 2022-02-14 16:38:18,168 find_def var='plus_minus' stmt=$602binary_multiply.9 = n_det_binom_prod * plus_minus
DEBUG 2022-02-14 16:38:18,169 find_def_from_top label 590
DEBUG 2022-02-14 16:38:18,169 idom 522 from label 590
DEBUG 2022-02-14 16:38:18,169 find_def_from_bottom label 522
DEBUG 2022-02-14 16:38:18,169 replaced with: $602binary_multiply.9 = n_det_binom_prod * plus_minus.1
DEBUG 2022-02-14 16:38:18,169 on stmt: $const608.12 = const(int, 2)
DEBUG 2022-02-14 16:38:18,169 on stmt: $610binary_floor_divide.13 = N // $const608.12
DEBUG 2022-02-14 16:38:18,169 on stmt: $612binary_subscr.14 = getitem(value=f_even, index=$610binary_floor_divide.13, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:18,169 on stmt: $614binary_multiply.15 = $602binary_multiply.9 * $612binary_subscr.14
DEBUG 2022-02-14 16:38:18,169 on stmt: $616inplace_add.16 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$596binary_subscr.6, rhs=$614binary_multiply.15, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:38:18,169 on stmt: Hnew[N_det] = $616inplace_add.16
DEBUG 2022-02-14 16:38:18,169 on stmt: jump 652
DEBUG 2022-02-14 16:38:18,169 ==== SSA block rewrite pass on 624
DEBUG 2022-02-14 16:38:18,169 Running <numba.core.ssa._FixSSAVars object at 0x7fa046a325e0>
DEBUG 2022-02-14 16:38:18,169 on stmt: $630binary_subscr.6 = getitem(value=Hnew, index=N_det, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:18,169 on stmt: $636binary_multiply.9 = n_det_binom_prod * plus_minus
DEBUG 2022-02-14 16:38:18,169 find_def var='plus_minus' stmt=$636binary_multiply.9 = n_det_binom_prod * plus_minus
DEBUG 2022-02-14 16:38:18,169 find_def_from_top label 624
DEBUG 2022-02-14 16:38:18,169 idom 522 from label 624
DEBUG 2022-02-14 16:38:18,169 find_def_from_bottom label 522
DEBUG 2022-02-14 16:38:18,169 replaced with: $636binary_multiply.9 = n_det_binom_prod * plus_minus.1
DEBUG 2022-02-14 16:38:18,169 on stmt: $642binary_subscr.12 = getitem(value=f_odd, index=N, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:18,169 on stmt: $644binary_multiply.13 = $636binary_multiply.9 * $642binary_subscr.12
DEBUG 2022-02-14 16:38:18,169 on stmt: $646inplace_add.14 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$630binary_subscr.6, rhs=$644binary_multiply.13, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:38:18,169 on stmt: Hnew[N_det] = $646inplace_add.14
DEBUG 2022-02-14 16:38:18,169 on stmt: jump 652
DEBUG 2022-02-14 16:38:18,170 ==== SSA block rewrite pass on 652
DEBUG 2022-02-14 16:38:18,170 Running <numba.core.ssa._FixSSAVars object at 0x7fa046a325e0>
DEBUG 2022-02-14 16:38:18,170 on stmt: jump 520
DEBUG 2022-02-14 16:38:18,170 ==== SSA block rewrite pass on 656
DEBUG 2022-02-14 16:38:18,170 Running <numba.core.ssa._FixSSAVars object at 0x7fa046a325e0>
DEBUG 2022-02-14 16:38:18,170 on stmt: $660inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=H_batch.2, rhs=Hnew, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:38:18,170 on stmt: H_batch.1 = $660inplace_add.3
DEBUG 2022-02-14 16:38:18,170 on stmt: jump 192
DEBUG 2022-02-14 16:38:18,170 ==== SSA block rewrite pass on 666
DEBUG 2022-02-14 16:38:18,170 Running <numba.core.ssa._FixSSAVars object at 0x7fa046a325e0>
DEBUG 2022-02-14 16:38:18,170 on stmt: bool668 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:38:18,170 on stmt: $668pred = call bool668(glynn, func=bool668, args=(Var(glynn, loop_hafnian_batch.py:83),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:18,170 on stmt: branch $668pred, 672, 726
DEBUG 2022-02-14 16:38:18,170 ==== SSA block rewrite pass on 672
DEBUG 2022-02-14 16:38:18,170 Running <numba.core.ssa._FixSSAVars object at 0x7fa046a325e0>
DEBUG 2022-02-14 16:38:18,170 on stmt: $672load_global.0 = global(range: <class 'range'>)
DEBUG 2022-02-14 16:38:18,170 on stmt: $676load_attr.2 = getattr(value=H_batch.2, attr=shape)
DEBUG 2022-02-14 16:38:18,170 on stmt: $const678.3 = const(int, 0)
DEBUG 2022-02-14 16:38:18,170 on stmt: $680binary_subscr.4 = static_getitem(value=$676load_attr.2, index=0, index_var=$const678.3, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:18,170 on stmt: $682call_function.5 = call $672load_global.0($680binary_subscr.4, func=$672load_global.0, args=[Var($680binary_subscr.4, loop_hafnian_batch.py:145)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:18,170 on stmt: $684get_iter.6 = getiter(value=$682call_function.5)
DEBUG 2022-02-14 16:38:18,170 on stmt: $phi686.0 = $684get_iter.6
DEBUG 2022-02-14 16:38:18,170 on stmt: jump 686
DEBUG 2022-02-14 16:38:18,170 ==== SSA block rewrite pass on 686
DEBUG 2022-02-14 16:38:18,170 Running <numba.core.ssa._FixSSAVars object at 0x7fa046a325e0>
DEBUG 2022-02-14 16:38:18,171 on stmt: $686for_iter.1 = iternext(value=$phi686.0)
DEBUG 2022-02-14 16:38:18,171 on stmt: $686for_iter.2 = pair_first(value=$686for_iter.1)
DEBUG 2022-02-14 16:38:18,171 on stmt: $686for_iter.3 = pair_second(value=$686for_iter.1)
DEBUG 2022-02-14 16:38:18,171 on stmt: $phi688.1 = $686for_iter.2
DEBUG 2022-02-14 16:38:18,171 on stmt: branch $686for_iter.3, 688, 726
DEBUG 2022-02-14 16:38:18,171 ==== SSA block rewrite pass on 688
DEBUG 2022-02-14 16:38:18,171 Running <numba.core.ssa._FixSSAVars object at 0x7fa046a325e0>
DEBUG 2022-02-14 16:38:18,171 on stmt: j.1 = $phi688.1
DEBUG 2022-02-14 16:38:18,171 on stmt: x = N_fixed + j.1
DEBUG 2022-02-14 16:38:18,171 on stmt: $704binary_subscr.9 = getitem(value=H_batch.2, index=j.1, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:18,171 on stmt: $const706.10 = const(float, 0.5)
DEBUG 2022-02-14 16:38:18,171 on stmt: $const710.12 = const(int, 2)
DEBUG 2022-02-14 16:38:18,171 on stmt: $712binary_floor_divide.13 = x // $const710.12
DEBUG 2022-02-14 16:38:18,171 on stmt: $714binary_power.14 = $const706.10 ** $712binary_floor_divide.13
DEBUG 2022-02-14 16:38:18,171 on stmt: $716inplace_multiply.15 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=$704binary_subscr.9, rhs=$714binary_power.14, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:38:18,171 on stmt: H_batch.2[j.1] = $716inplace_multiply.15
DEBUG 2022-02-14 16:38:18,171 on stmt: jump 686
DEBUG 2022-02-14 16:38:18,171 ==== SSA block rewrite pass on 726
DEBUG 2022-02-14 16:38:18,171 Running <numba.core.ssa._FixSSAVars object at 0x7fa046a325e0>
DEBUG 2022-02-14 16:38:18,171 on stmt: $728return_value.1 = cast(value=H_batch.2)
DEBUG 2022-02-14 16:38:18,171 on stmt: return $728return_value.1
DEBUG 2022-02-14 16:38:18,171 Fix SSA violator on var delta
DEBUG 2022-02-14 16:38:18,171 ==== SSA block rewrite pass on 0
DEBUG 2022-02-14 16:38:18,171 Running <numba.core.ssa._FreshVarHandler object at 0x7fa041ed6f40>
DEBUG 2022-02-14 16:38:18,171 on stmt: A = arg(0, name=A)
DEBUG 2022-02-14 16:38:18,172 on stmt: D = arg(1, name=D)
DEBUG 2022-02-14 16:38:18,172 on stmt: fixed_edge_reps = arg(2, name=fixed_edge_reps)
DEBUG 2022-02-14 16:38:18,172 on stmt: batch_max = arg(3, name=batch_max)
DEBUG 2022-02-14 16:38:18,172 on stmt: even_cutoff = arg(4, name=even_cutoff)
DEBUG 2022-02-14 16:38:18,172 on stmt: oddmode = arg(5, name=oddmode)
DEBUG 2022-02-14 16:38:18,172 on stmt: glynn = arg(6, name=glynn)
DEBUG 2022-02-14 16:38:18,172 on stmt: $const4.1 = const(int, 0)
DEBUG 2022-02-14 16:38:18,172 on stmt: oddloop = static_getitem(value=D, index=0, index_var=$const4.1, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:18,172 on stmt: $const12.4 = const(int, 0)
DEBUG 2022-02-14 16:38:18,172 on stmt: $const14.5 = const(NoneType, None)
DEBUG 2022-02-14 16:38:18,172 on stmt: $const16.6 = const(NoneType, None)
DEBUG 2022-02-14 16:38:18,172 on stmt: $18build_slice.7 = global(slice: <class 'slice'>)
DEBUG 2022-02-14 16:38:18,172 on stmt: $18build_slice.8 = call $18build_slice.7($const14.5, $const16.6, func=$18build_slice.7, args=(Var($const14.5, loop_hafnian_batch.py:84), Var($const16.6, loop_hafnian_batch.py:84)), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:18,172 on stmt: $20build_tuple.9 = build_tuple(items=[Var($const12.4, loop_hafnian_batch.py:84), Var($18build_slice.8, loop_hafnian_batch.py:84)])
DEBUG 2022-02-14 16:38:18,172 on stmt: oddV = static_getitem(value=A, index=(0, slice(None, None, None)), index_var=$20build_tuple.9, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:18,172 on stmt: $const28.12 = const(int, 1)
DEBUG 2022-02-14 16:38:18,172 on stmt: oddloop0 = static_getitem(value=D, index=1, index_var=$const28.12, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:18,172 on stmt: $const36.15 = const(int, 1)
DEBUG 2022-02-14 16:38:18,172 on stmt: $const38.16 = const(NoneType, None)
DEBUG 2022-02-14 16:38:18,172 on stmt: $const40.17 = const(NoneType, None)
DEBUG 2022-02-14 16:38:18,172 on stmt: $42build_slice.18 = global(slice: <class 'slice'>)
DEBUG 2022-02-14 16:38:18,172 on stmt: $42build_slice.19 = call $42build_slice.18($const38.16, $const40.17, func=$42build_slice.18, args=(Var($const38.16, loop_hafnian_batch.py:89), Var($const40.17, loop_hafnian_batch.py:89)), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:18,172 on stmt: $44build_tuple.20 = build_tuple(items=[Var($const36.15, loop_hafnian_batch.py:89), Var($42build_slice.19, loop_hafnian_batch.py:89)])
DEBUG 2022-02-14 16:38:18,172 on stmt: oddV0 = static_getitem(value=A, index=(1, slice(None, None, None)), index_var=$44build_tuple.20, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:18,172 on stmt: $52load_attr.23 = getattr(value=A, attr=shape)
DEBUG 2022-02-14 16:38:18,173 on stmt: $const54.24 = const(int, 0)
DEBUG 2022-02-14 16:38:18,173 on stmt: n = static_getitem(value=$52load_attr.23, index=0, index_var=$const54.24, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:18,173 on stmt: $const60.26 = const(int, 2)
DEBUG 2022-02-14 16:38:18,173 on stmt: $64load_method.28 = getattr(value=fixed_edge_reps, attr=sum)
DEBUG 2022-02-14 16:38:18,173 on stmt: $66call_method.29 = call $64load_method.28(func=$64load_method.28, args=[], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:18,173 on stmt: $68binary_multiply.30 = $const60.26 * $66call_method.29
DEBUG 2022-02-14 16:38:18,173 on stmt: $const70.31 = const(int, 1)
DEBUG 2022-02-14 16:38:18,173 on stmt: N_fixed = $68binary_multiply.30 + $const70.31
DEBUG 2022-02-14 16:38:18,173 on stmt: $const78.34 = const(int, 2)
DEBUG 2022-02-14 16:38:18,173 on stmt: $82binary_multiply.36 = $const78.34 * batch_max
DEBUG 2022-02-14 16:38:18,173 on stmt: $84binary_add.37 = N_fixed + $82binary_multiply.36
DEBUG 2022-02-14 16:38:18,173 on stmt: $88binary_add.39 = $84binary_add.37 + even_cutoff
DEBUG 2022-02-14 16:38:18,173 on stmt: $const90.40 = const(int, 1)
DEBUG 2022-02-14 16:38:18,173 on stmt: N_max = $88binary_add.39 + $const90.40
DEBUG 2022-02-14 16:38:18,173 on stmt: $96load_global.42 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:38:18,173 on stmt: $98load_method.43 = getattr(value=$96load_global.42, attr=concatenate)
DEBUG 2022-02-14 16:38:18,173 on stmt: $100load_global.44 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:38:18,173 on stmt: $102load_method.45 = getattr(value=$100load_global.44, attr=array)
DEBUG 2022-02-14 16:38:18,173 on stmt: $const106.47 = const(int, 1)
DEBUG 2022-02-14 16:38:18,173 on stmt: $108build_list.48 = build_list(items=[Var(batch_max, loop_hafnian_batch.py:83), Var($const106.47, loop_hafnian_batch.py:95)])
DEBUG 2022-02-14 16:38:18,173 on stmt: $110call_method.49 = call $102load_method.45($108build_list.48, func=$102load_method.45, args=[Var($108build_list.48, loop_hafnian_batch.py:95)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:18,173 on stmt: $114build_tuple.51 = build_tuple(items=[Var($110call_method.49, loop_hafnian_batch.py:95), Var(fixed_edge_reps, loop_hafnian_batch.py:83)])
DEBUG 2022-02-14 16:38:18,173 on stmt: edge_reps = call $98load_method.43($114build_tuple.51, func=$98load_method.43, args=[Var($114build_tuple.51, loop_hafnian_batch.py:95)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:18,173 on stmt: $120load_global.53 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:38:18,174 on stmt: $122load_method.54 = getattr(value=$120load_global.53, attr=prod)
DEBUG 2022-02-14 16:38:18,174 on stmt: $const126.56 = const(int, 1)
DEBUG 2022-02-14 16:38:18,174 on stmt: $128binary_add.57 = edge_reps + $const126.56
DEBUG 2022-02-14 16:38:18,174 on stmt: steps = call $122load_method.54($128binary_add.57, func=$122load_method.54, args=[Var($128binary_add.57, loop_hafnian_batch.py:96)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:18,174 on stmt: $136load_method.60 = getattr(value=edge_reps, attr=max)
DEBUG 2022-02-14 16:38:18,174 on stmt: $138call_method.61 = call $136load_method.60(func=$136load_method.60, args=[], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:18,174 on stmt: max_binom = $138call_method.61 + even_cutoff
DEBUG 2022-02-14 16:38:18,174 on stmt: $146load_global.64 = global(precompute_binoms: CPUDispatcher(<function precompute_binoms at 0x7fa047ebe310>))
DEBUG 2022-02-14 16:38:18,174 on stmt: binoms = call $146load_global.64(max_binom, func=$146load_global.64, args=[Var(max_binom, loop_hafnian_batch.py:98)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:18,174 on stmt: $154load_global.67 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:38:18,174 on stmt: $156load_attr.68 = getattr(value=$154load_global.67, attr=zeros)
DEBUG 2022-02-14 16:38:18,174 on stmt: $const158.69 = const(int, 2)
DEBUG 2022-02-14 16:38:18,174 on stmt: $162binary_multiply.71 = $const158.69 * batch_max
DEBUG 2022-02-14 16:38:18,174 on stmt: $166binary_add.73 = $162binary_multiply.71 + even_cutoff
DEBUG 2022-02-14 16:38:18,174 on stmt: $const168.74 = const(int, 2)
DEBUG 2022-02-14 16:38:18,174 on stmt: $170binary_add.75 = $166binary_add.73 + $const168.74
DEBUG 2022-02-14 16:38:18,174 on stmt: $172load_global.76 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:38:18,174 on stmt: $174load_attr.77 = getattr(value=$172load_global.76, attr=complex128)
DEBUG 2022-02-14 16:38:18,174 on stmt: H_batch = call $156load_attr.68($170binary_add.75, func=$156load_attr.68, args=[Var($170binary_add.75, loop_hafnian_batch.py:101)], kws=[('dtype', Var($174load_attr.77, loop_hafnian_batch.py:101))], vararg=None, target=None)
DEBUG 2022-02-14 16:38:18,174 on stmt: $182load_global.80 = global(numba: <module 'numba' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numba/__init__.py'>)
DEBUG 2022-02-14 16:38:18,174 on stmt: $184load_method.81 = getattr(value=$182load_global.80, attr=prange)
DEBUG 2022-02-14 16:38:18,174 on stmt: $188call_method.83 = call $184load_method.81(steps, func=$184load_method.81, args=[Var(steps, loop_hafnian_batch.py:96)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:18,174 on stmt: $190get_iter.84 = getiter(value=$188call_method.83)
DEBUG 2022-02-14 16:38:18,175 on stmt: $phi192.0 = $190get_iter.84
DEBUG 2022-02-14 16:38:18,175 on stmt: jump 192
DEBUG 2022-02-14 16:38:18,175 ==== SSA block rewrite pass on 192
DEBUG 2022-02-14 16:38:18,175 Running <numba.core.ssa._FreshVarHandler object at 0x7fa041ed6f40>
DEBUG 2022-02-14 16:38:18,175 on stmt: H_batch.2 = phi(incoming_values=[Var(H_batch, loop_hafnian_batch.py:101), Var(H_batch.1, loop_hafnian_batch.py:142)], incoming_blocks=[0, 656])
DEBUG 2022-02-14 16:38:18,175 on stmt: $192for_iter.1 = iternext(value=$phi192.0)
DEBUG 2022-02-14 16:38:18,175 on stmt: $192for_iter.2 = pair_first(value=$192for_iter.1)
DEBUG 2022-02-14 16:38:18,175 on stmt: $192for_iter.3 = pair_second(value=$192for_iter.1)
DEBUG 2022-02-14 16:38:18,175 on stmt: $phi196.1 = $192for_iter.2
DEBUG 2022-02-14 16:38:18,175 on stmt: branch $192for_iter.3, 196, 666
DEBUG 2022-02-14 16:38:18,175 ==== SSA block rewrite pass on 196
DEBUG 2022-02-14 16:38:18,175 Running <numba.core.ssa._FreshVarHandler object at 0x7fa041ed6f40>
DEBUG 2022-02-14 16:38:18,175 on stmt: j = $phi196.1
DEBUG 2022-02-14 16:38:18,175 on stmt: $198load_global.2 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:38:18,175 on stmt: $200load_attr.3 = getattr(value=$198load_global.2, attr=zeros)
DEBUG 2022-02-14 16:38:18,175 on stmt: $const202.4 = const(int, 2)
DEBUG 2022-02-14 16:38:18,175 on stmt: $206binary_multiply.6 = $const202.4 * batch_max
DEBUG 2022-02-14 16:38:18,175 on stmt: $210binary_add.8 = $206binary_multiply.6 + even_cutoff
DEBUG 2022-02-14 16:38:18,175 on stmt: $const212.9 = const(int, 2)
DEBUG 2022-02-14 16:38:18,175 on stmt: $214binary_add.10 = $210binary_add.8 + $const212.9
DEBUG 2022-02-14 16:38:18,175 on stmt: $216load_global.11 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:38:18,175 on stmt: $218load_attr.12 = getattr(value=$216load_global.11, attr=complex128)
DEBUG 2022-02-14 16:38:18,175 on stmt: Hnew = call $200load_attr.3($214binary_add.10, func=$200load_attr.3, args=[Var($214binary_add.10, loop_hafnian_batch.py:104)], kws=[('dtype', Var($218load_attr.12, loop_hafnian_batch.py:104))], vararg=None, target=None)
DEBUG 2022-02-14 16:38:18,175 on stmt: $226load_global.15 = global(find_kept_edges: CPUDispatcher(<function find_kept_edges at 0x7fa047ebe790>))
DEBUG 2022-02-14 16:38:18,175 on stmt: kept_edges = call $226load_global.15(j, edge_reps, func=$226load_global.15, args=[Var(j, loop_hafnian_batch.py:102), Var(edge_reps, loop_hafnian_batch.py:95)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:18,176 on stmt: $238load_method.20 = getattr(value=kept_edges, attr=sum)
DEBUG 2022-02-14 16:38:18,176 on stmt: edges_sum = call $238load_method.20(func=$238load_method.20, args=[], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:18,176 on stmt: binom_prod = const(float, 1.0)
DEBUG 2022-02-14 16:38:18,176 on stmt: $248load_global.23 = global(range: <class 'range'>)
DEBUG 2022-02-14 16:38:18,176 on stmt: $const250.24 = const(int, 1)
DEBUG 2022-02-14 16:38:18,176 on stmt: $const254.26 = const(int, 2)
DEBUG 2022-02-14 16:38:18,176 on stmt: $256binary_floor_divide.27 = n // $const254.26
DEBUG 2022-02-14 16:38:18,176 on stmt: $258call_function.28 = call $248load_global.23($const250.24, $256binary_floor_divide.27, func=$248load_global.23, args=[Var($const250.24, loop_hafnian_batch.py:110), Var($256binary_floor_divide.27, loop_hafnian_batch.py:110)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:18,176 on stmt: $260get_iter.29 = getiter(value=$258call_function.28)
DEBUG 2022-02-14 16:38:18,176 on stmt: $phi262.1 = $260get_iter.29
DEBUG 2022-02-14 16:38:18,176 on stmt: jump 262
DEBUG 2022-02-14 16:38:18,176 ==== SSA block rewrite pass on 262
DEBUG 2022-02-14 16:38:18,176 Running <numba.core.ssa._FreshVarHandler object at 0x7fa041ed6f40>
DEBUG 2022-02-14 16:38:18,176 on stmt: binom_prod.2 = phi(incoming_values=[Var(binom_prod.1, loop_hafnian_batch.py:111), Var(binom_prod, loop_hafnian_batch.py:109)], incoming_blocks=[264, 196])
DEBUG 2022-02-14 16:38:18,176 on stmt: $262for_iter.2 = iternext(value=$phi262.1)
DEBUG 2022-02-14 16:38:18,176 on stmt: $262for_iter.3 = pair_first(value=$262for_iter.2)
DEBUG 2022-02-14 16:38:18,176 on stmt: $262for_iter.4 = pair_second(value=$262for_iter.2)
DEBUG 2022-02-14 16:38:18,176 on stmt: $phi264.2 = $262for_iter.3
DEBUG 2022-02-14 16:38:18,176 on stmt: branch $262for_iter.4, 264, 294
DEBUG 2022-02-14 16:38:18,176 ==== SSA block rewrite pass on 264
DEBUG 2022-02-14 16:38:18,176 Running <numba.core.ssa._FreshVarHandler object at 0x7fa041ed6f40>
DEBUG 2022-02-14 16:38:18,176 on stmt: i = $phi264.2
DEBUG 2022-02-14 16:38:18,176 on stmt: $274binary_subscr.7 = getitem(value=edge_reps, index=i, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:18,176 on stmt: $280binary_subscr.10 = getitem(value=kept_edges, index=i, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:18,177 on stmt: $282build_tuple.11 = build_tuple(items=[Var($274binary_subscr.7, loop_hafnian_batch.py:111), Var($280binary_subscr.10, loop_hafnian_batch.py:111)])
DEBUG 2022-02-14 16:38:18,177 on stmt: $284binary_subscr.12 = getitem(value=binoms, index=$282build_tuple.11, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:18,177 on stmt: $286inplace_multiply.13 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=binom_prod.2, rhs=$284binary_subscr.12, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:38:18,177 on stmt: binom_prod.1 = $286inplace_multiply.13
DEBUG 2022-02-14 16:38:18,177 on stmt: jump 262
DEBUG 2022-02-14 16:38:18,177 ==== SSA block rewrite pass on 294
DEBUG 2022-02-14 16:38:18,177 Running <numba.core.ssa._FreshVarHandler object at 0x7fa041ed6f40>
DEBUG 2022-02-14 16:38:18,177 on stmt: bool296 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:38:18,177 on stmt: $296pred = call bool296(glynn, func=bool296, args=(Var(glynn, loop_hafnian_batch.py:83),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:18,177 on stmt: branch $296pred, 300, 314
DEBUG 2022-02-14 16:38:18,177 ==== SSA block rewrite pass on 300
DEBUG 2022-02-14 16:38:18,177 Running <numba.core.ssa._FreshVarHandler object at 0x7fa041ed6f40>
DEBUG 2022-02-14 16:38:18,177 on stmt: $const300.1 = const(int, 2)
DEBUG 2022-02-14 16:38:18,177 on stmt: $304binary_multiply.3 = $const300.1 * kept_edges
DEBUG 2022-02-14 16:38:18,177 on stmt: delta = $304binary_multiply.3 - edge_reps
DEBUG 2022-02-14 16:38:18,177 first assign: delta
DEBUG 2022-02-14 16:38:18,177 replaced with: delta = $304binary_multiply.3 - edge_reps
DEBUG 2022-02-14 16:38:18,177 on stmt: jump 318
DEBUG 2022-02-14 16:38:18,177 ==== SSA block rewrite pass on 314
DEBUG 2022-02-14 16:38:18,177 Running <numba.core.ssa._FreshVarHandler object at 0x7fa041ed6f40>
DEBUG 2022-02-14 16:38:18,177 on stmt: delta = kept_edges
DEBUG 2022-02-14 16:38:18,177 replaced with: delta.1 = kept_edges
DEBUG 2022-02-14 16:38:18,177 on stmt: jump 318
DEBUG 2022-02-14 16:38:18,177 ==== SSA block rewrite pass on 318
DEBUG 2022-02-14 16:38:18,177 Running <numba.core.ssa._FreshVarHandler object at 0x7fa041ed6f40>
DEBUG 2022-02-14 16:38:18,177 on stmt: $318load_global.1 = global(get_submatrices: CPUDispatcher(<function get_submatrices at 0x7fa047ebed30>))
DEBUG 2022-02-14 16:38:18,178 on stmt: $328call_function.6 = call $318load_global.1(delta, A, D, oddV, func=$318load_global.1, args=[Var(delta, loop_hafnian_batch.py:114), Var(A, loop_hafnian_batch.py:83), Var(D, loop_hafnian_batch.py:83), Var(oddV, loop_hafnian_batch.py:84)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:18,178 on stmt: $330unpack_sequence.11 = exhaust_iter(value=$328call_function.6, count=4)
DEBUG 2022-02-14 16:38:18,178 on stmt: $330unpack_sequence.7 = static_getitem(value=$330unpack_sequence.11, index=0, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:18,178 on stmt: $330unpack_sequence.8 = static_getitem(value=$330unpack_sequence.11, index=1, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:18,178 on stmt: $330unpack_sequence.9 = static_getitem(value=$330unpack_sequence.11, index=2, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:18,178 on stmt: $330unpack_sequence.10 = static_getitem(value=$330unpack_sequence.11, index=3, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:18,178 on stmt: AX_S = $330unpack_sequence.7
DEBUG 2022-02-14 16:38:18,178 on stmt: XD_S = $330unpack_sequence.8
DEBUG 2022-02-14 16:38:18,178 on stmt: D_S = $330unpack_sequence.9
DEBUG 2022-02-14 16:38:18,178 on stmt: oddVX_S = $330unpack_sequence.10
DEBUG 2022-02-14 16:38:18,178 on stmt: $340load_global.12 = global(eigvals: CPUDispatcher(<function eigvals at 0x7fa047e5d430>))
DEBUG 2022-02-14 16:38:18,178 on stmt: E = call $340load_global.12(AX_S, func=$340load_global.12, args=[Var(AX_S, loop_hafnian_batch.py:118)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:18,178 on stmt: $const350.16 = const(int, 0)
DEBUG 2022-02-14 16:38:18,178 on stmt: $352binary_subscr.17 = static_getitem(value=kept_edges, index=0, index_var=$const350.16, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:18,178 on stmt: $const354.18 = const(int, 0)
DEBUG 2022-02-14 16:38:18,178 on stmt: $356compare_op.19 = $352binary_subscr.17 == $const354.18
DEBUG 2022-02-14 16:38:18,178 on stmt: bool358 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:38:18,178 on stmt: $358pred = call bool358($356compare_op.19, func=bool358, args=(Var($356compare_op.19, loop_hafnian_batch.py:122),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:18,178 on stmt: branch $358pred, 362, 450
DEBUG 2022-02-14 16:38:18,178 ==== SSA block rewrite pass on 362
DEBUG 2022-02-14 16:38:18,178 Running <numba.core.ssa._FreshVarHandler object at 0x7fa041ed6f40>
DEBUG 2022-02-14 16:38:18,178 on stmt: $const364.2 = const(int, 1)
DEBUG 2022-02-14 16:38:18,178 on stmt: $366binary_subscr.3 = static_getitem(value=kept_edges, index=1, index_var=$const364.2, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:18,178 on stmt: $const368.4 = const(int, 0)
DEBUG 2022-02-14 16:38:18,178 on stmt: $370compare_op.5 = $366binary_subscr.3 == $const368.4
DEBUG 2022-02-14 16:38:18,179 on stmt: bool372 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:38:18,179 on stmt: $372pred = call bool372($370compare_op.5, func=bool372, args=(Var($370compare_op.5, loop_hafnian_batch.py:122),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:18,179 on stmt: branch $372pred, 376, 450
DEBUG 2022-02-14 16:38:18,179 ==== SSA block rewrite pass on 376
DEBUG 2022-02-14 16:38:18,179 Running <numba.core.ssa._FreshVarHandler object at 0x7fa041ed6f40>
DEBUG 2022-02-14 16:38:18,179 on stmt: $376load_global.1 = global(get_submatrix_batch_odd0: CPUDispatcher(<function get_submatrix_batch_odd0 at 0x7fa047ebef70>))
DEBUG 2022-02-14 16:38:18,179 on stmt: oddVX_S0 = call $376load_global.1(delta, oddV0, func=$376load_global.1, args=[Var(delta, loop_hafnian_batch.py:114), Var(oddV0, loop_hafnian_batch.py:89)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:18,179 on stmt: $const386.5 = const(int, -1)
DEBUG 2022-02-14 16:38:18,179 on stmt: $const390.7 = const(int, 2)
DEBUG 2022-02-14 16:38:18,179 on stmt: $392binary_floor_divide.8 = N_fixed // $const390.7
DEBUG 2022-02-14 16:38:18,179 on stmt: $396binary_subtract.10 = $392binary_floor_divide.8 - edges_sum
DEBUG 2022-02-14 16:38:18,179 on stmt: plus_minus = $const386.5 ** $396binary_subtract.10
DEBUG 2022-02-14 16:38:18,179 on stmt: $402load_global.12 = global(f_loop_odd: CPUDispatcher(<function f_loop_odd at 0x7fa047ebeb80>))
DEBUG 2022-02-14 16:38:18,179 on stmt: $418call_function.20 = call $402load_global.12(E, AX_S, XD_S, D_S, N_fixed, oddloop0, oddVX_S0, func=$402load_global.12, args=[Var(E, loop_hafnian_batch.py:120), Var(AX_S, loop_hafnian_batch.py:118), Var(XD_S, loop_hafnian_batch.py:118), Var(D_S, loop_hafnian_batch.py:118), Var(N_fixed, loop_hafnian_batch.py:92), Var(oddloop0, loop_hafnian_batch.py:88), Var(oddVX_S0, loop_hafnian_batch.py:123)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:18,179 on stmt: f = getitem(value=$418call_function.20, index=N_fixed, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:18,179 on stmt: $const428.24 = const(int, 0)
DEBUG 2022-02-14 16:38:18,179 on stmt: $432binary_subscr.27 = static_getitem(value=H_batch.2, index=0, index_var=$const428.24, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:18,179 on stmt: $438binary_multiply.30 = binom_prod.2 * plus_minus
DEBUG 2022-02-14 16:38:18,179 on stmt: $442binary_multiply.32 = $438binary_multiply.30 * f
DEBUG 2022-02-14 16:38:18,179 on stmt: $444inplace_add.33 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$432binary_subscr.27, rhs=$442binary_multiply.32, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:38:18,179 on stmt: H_batch.2[0] = $444inplace_add.33
DEBUG 2022-02-14 16:38:18,179 on stmt: jump 450
DEBUG 2022-02-14 16:38:18,179 ==== SSA block rewrite pass on 450
DEBUG 2022-02-14 16:38:18,180 Running <numba.core.ssa._FreshVarHandler object at 0x7fa041ed6f40>
DEBUG 2022-02-14 16:38:18,180 on stmt: $450load_global.1 = global(f_loop: CPUDispatcher(<function f_loop at 0x7fa047ebe9d0>))
DEBUG 2022-02-14 16:38:18,180 on stmt: f_even = call $450load_global.1(E, AX_S, XD_S, D_S, N_max, func=$450load_global.1, args=[Var(E, loop_hafnian_batch.py:120), Var(AX_S, loop_hafnian_batch.py:118), Var(XD_S, loop_hafnian_batch.py:118), Var(D_S, loop_hafnian_batch.py:118), Var(N_max, loop_hafnian_batch.py:93)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:18,180 on stmt: $466load_global.8 = global(f_loop_odd: CPUDispatcher(<function f_loop_odd at 0x7fa047ebeb80>))
DEBUG 2022-02-14 16:38:18,180 on stmt: f_odd = call $466load_global.8(E, AX_S, XD_S, D_S, N_max, oddloop, oddVX_S, func=$466load_global.8, args=[Var(E, loop_hafnian_batch.py:120), Var(AX_S, loop_hafnian_batch.py:118), Var(XD_S, loop_hafnian_batch.py:118), Var(D_S, loop_hafnian_batch.py:118), Var(N_max, loop_hafnian_batch.py:93), Var(oddloop, loop_hafnian_batch.py:83), Var(oddVX_S, loop_hafnian_batch.py:118)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:18,180 on stmt: $486load_global.17 = global(range: <class 'range'>)
DEBUG 2022-02-14 16:38:18,180 on stmt: $const488.18 = const(int, 2)
DEBUG 2022-02-14 16:38:18,180 on stmt: $const492.20 = const(int, 0)
DEBUG 2022-02-14 16:38:18,180 on stmt: $494binary_subscr.21 = static_getitem(value=kept_edges, index=0, index_var=$const492.20, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:18,180 on stmt: $496binary_multiply.22 = $const488.18 * $494binary_subscr.21
DEBUG 2022-02-14 16:38:18,180 on stmt: $const498.23 = const(int, 1)
DEBUG 2022-02-14 16:38:18,180 on stmt: $500binary_add.24 = $496binary_multiply.22 + $const498.23
DEBUG 2022-02-14 16:38:18,180 on stmt: $const502.25 = const(int, 2)
DEBUG 2022-02-14 16:38:18,180 on stmt: $506binary_multiply.27 = $const502.25 * batch_max
DEBUG 2022-02-14 16:38:18,180 on stmt: $510binary_add.29 = $506binary_multiply.27 + even_cutoff
DEBUG 2022-02-14 16:38:18,180 on stmt: $const512.30 = const(int, 2)
DEBUG 2022-02-14 16:38:18,180 on stmt: $514binary_add.31 = $510binary_add.29 + $const512.30
DEBUG 2022-02-14 16:38:18,180 on stmt: $516call_function.32 = call $486load_global.17($500binary_add.24, $514binary_add.31, func=$486load_global.17, args=[Var($500binary_add.24, loop_hafnian_batch.py:131), Var($514binary_add.31, loop_hafnian_batch.py:131)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:18,180 on stmt: $518get_iter.33 = getiter(value=$516call_function.32)
DEBUG 2022-02-14 16:38:18,181 on stmt: $phi520.1 = $518get_iter.33
DEBUG 2022-02-14 16:38:18,181 on stmt: jump 520
DEBUG 2022-02-14 16:38:18,181 ==== SSA block rewrite pass on 520
DEBUG 2022-02-14 16:38:18,181 Running <numba.core.ssa._FreshVarHandler object at 0x7fa041ed6f40>
DEBUG 2022-02-14 16:38:18,181 on stmt: $520for_iter.2 = iternext(value=$phi520.1)
DEBUG 2022-02-14 16:38:18,181 on stmt: $520for_iter.3 = pair_first(value=$520for_iter.2)
DEBUG 2022-02-14 16:38:18,181 on stmt: $520for_iter.4 = pair_second(value=$520for_iter.2)
DEBUG 2022-02-14 16:38:18,181 on stmt: $phi522.2 = $520for_iter.3
DEBUG 2022-02-14 16:38:18,181 on stmt: branch $520for_iter.4, 522, 656
DEBUG 2022-02-14 16:38:18,181 ==== SSA block rewrite pass on 522
DEBUG 2022-02-14 16:38:18,181 Running <numba.core.ssa._FreshVarHandler object at 0x7fa041ed6f40>
DEBUG 2022-02-14 16:38:18,181 on stmt: N_det = $phi522.2
DEBUG 2022-02-14 16:38:18,181 on stmt: N = N_fixed + N_det
DEBUG 2022-02-14 16:38:18,181 on stmt: $const532.6 = const(int, -1)
DEBUG 2022-02-14 16:38:18,181 on stmt: $const536.8 = const(int, 2)
DEBUG 2022-02-14 16:38:18,182 on stmt: $538binary_floor_divide.9 = N // $const536.8
DEBUG 2022-02-14 16:38:18,182 on stmt: $542binary_subtract.11 = $538binary_floor_divide.9 - edges_sum
DEBUG 2022-02-14 16:38:18,182 on stmt: plus_minus.1 = $const532.6 ** $542binary_subtract.11
DEBUG 2022-02-14 16:38:18,182 on stmt: $const552.15 = const(int, 1)
DEBUG 2022-02-14 16:38:18,182 on stmt: $554binary_subtract.16 = N_det - $const552.15
DEBUG 2022-02-14 16:38:18,182 on stmt: $const556.17 = const(int, 2)
DEBUG 2022-02-14 16:38:18,182 on stmt: $558binary_floor_divide.18 = $554binary_subtract.16 // $const556.17
DEBUG 2022-02-14 16:38:18,182 on stmt: $const562.20 = const(int, 0)
DEBUG 2022-02-14 16:38:18,182 on stmt: $564binary_subscr.21 = static_getitem(value=kept_edges, index=0, index_var=$const562.20, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:18,182 on stmt: $566build_tuple.22 = build_tuple(items=[Var($558binary_floor_divide.18, loop_hafnian_batch.py:135), Var($564binary_subscr.21, loop_hafnian_batch.py:135)])
DEBUG 2022-02-14 16:38:18,182 on stmt: $568binary_subscr.23 = getitem(value=binoms, index=$566build_tuple.22, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:18,182 on stmt: n_det_binom_prod = $568binary_subscr.23 * binom_prod.2
DEBUG 2022-02-14 16:38:18,182 on stmt: $const578.27 = const(int, 2)
DEBUG 2022-02-14 16:38:18,183 on stmt: $580binary_modulo.28 = N % $const578.27
DEBUG 2022-02-14 16:38:18,183 on stmt: $const582.29 = const(int, 0)
DEBUG 2022-02-14 16:38:18,183 on stmt: $584compare_op.30 = $580binary_modulo.28 == $const582.29
DEBUG 2022-02-14 16:38:18,183 on stmt: bool586 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:38:18,183 on stmt: $586pred = call bool586($584compare_op.30, func=bool586, args=(Var($584compare_op.30, loop_hafnian_batch.py:137),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:18,183 on stmt: branch $586pred, 590, 624
DEBUG 2022-02-14 16:38:18,183 ==== SSA block rewrite pass on 590
DEBUG 2022-02-14 16:38:18,183 Running <numba.core.ssa._FreshVarHandler object at 0x7fa041ed6f40>
DEBUG 2022-02-14 16:38:18,183 on stmt: $596binary_subscr.6 = getitem(value=Hnew, index=N_det, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:18,183 on stmt: $602binary_multiply.9 = n_det_binom_prod * plus_minus.1
DEBUG 2022-02-14 16:38:18,183 on stmt: $const608.12 = const(int, 2)
DEBUG 2022-02-14 16:38:18,183 on stmt: $610binary_floor_divide.13 = N // $const608.12
DEBUG 2022-02-14 16:38:18,183 on stmt: $612binary_subscr.14 = getitem(value=f_even, index=$610binary_floor_divide.13, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:18,183 on stmt: $614binary_multiply.15 = $602binary_multiply.9 * $612binary_subscr.14
DEBUG 2022-02-14 16:38:18,184 on stmt: $616inplace_add.16 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$596binary_subscr.6, rhs=$614binary_multiply.15, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:38:18,184 on stmt: Hnew[N_det] = $616inplace_add.16
DEBUG 2022-02-14 16:38:18,184 on stmt: jump 652
DEBUG 2022-02-14 16:38:18,184 ==== SSA block rewrite pass on 624
DEBUG 2022-02-14 16:38:18,184 Running <numba.core.ssa._FreshVarHandler object at 0x7fa041ed6f40>
DEBUG 2022-02-14 16:38:18,184 on stmt: $630binary_subscr.6 = getitem(value=Hnew, index=N_det, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:18,184 on stmt: $636binary_multiply.9 = n_det_binom_prod * plus_minus.1
DEBUG 2022-02-14 16:38:18,184 on stmt: $642binary_subscr.12 = getitem(value=f_odd, index=N, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:18,184 on stmt: $644binary_multiply.13 = $636binary_multiply.9 * $642binary_subscr.12
DEBUG 2022-02-14 16:38:18,184 on stmt: $646inplace_add.14 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$630binary_subscr.6, rhs=$644binary_multiply.13, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:38:18,184 on stmt: Hnew[N_det] = $646inplace_add.14
DEBUG 2022-02-14 16:38:18,184 on stmt: jump 652
DEBUG 2022-02-14 16:38:18,184 ==== SSA block rewrite pass on 652
DEBUG 2022-02-14 16:38:18,184 Running <numba.core.ssa._FreshVarHandler object at 0x7fa041ed6f40>
DEBUG 2022-02-14 16:38:18,184 on stmt: jump 520
DEBUG 2022-02-14 16:38:18,185 ==== SSA block rewrite pass on 656
DEBUG 2022-02-14 16:38:18,185 Running <numba.core.ssa._FreshVarHandler object at 0x7fa041ed6f40>
DEBUG 2022-02-14 16:38:18,185 on stmt: $660inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=H_batch.2, rhs=Hnew, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:38:18,185 on stmt: H_batch.1 = $660inplace_add.3
DEBUG 2022-02-14 16:38:18,185 on stmt: jump 192
DEBUG 2022-02-14 16:38:18,185 ==== SSA block rewrite pass on 666
DEBUG 2022-02-14 16:38:18,185 Running <numba.core.ssa._FreshVarHandler object at 0x7fa041ed6f40>
DEBUG 2022-02-14 16:38:18,185 on stmt: bool668 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:38:18,185 on stmt: $668pred = call bool668(glynn, func=bool668, args=(Var(glynn, loop_hafnian_batch.py:83),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:18,185 on stmt: branch $668pred, 672, 726
DEBUG 2022-02-14 16:38:18,185 ==== SSA block rewrite pass on 672
DEBUG 2022-02-14 16:38:18,185 Running <numba.core.ssa._FreshVarHandler object at 0x7fa041ed6f40>
DEBUG 2022-02-14 16:38:18,185 on stmt: $672load_global.0 = global(range: <class 'range'>)
DEBUG 2022-02-14 16:38:18,185 on stmt: $676load_attr.2 = getattr(value=H_batch.2, attr=shape)
DEBUG 2022-02-14 16:38:18,185 on stmt: $const678.3 = const(int, 0)
DEBUG 2022-02-14 16:38:18,185 on stmt: $680binary_subscr.4 = static_getitem(value=$676load_attr.2, index=0, index_var=$const678.3, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:18,186 on stmt: $682call_function.5 = call $672load_global.0($680binary_subscr.4, func=$672load_global.0, args=[Var($680binary_subscr.4, loop_hafnian_batch.py:145)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:18,186 on stmt: $684get_iter.6 = getiter(value=$682call_function.5)
DEBUG 2022-02-14 16:38:18,186 on stmt: $phi686.0 = $684get_iter.6
DEBUG 2022-02-14 16:38:18,186 on stmt: jump 686
DEBUG 2022-02-14 16:38:18,186 ==== SSA block rewrite pass on 686
DEBUG 2022-02-14 16:38:18,186 Running <numba.core.ssa._FreshVarHandler object at 0x7fa041ed6f40>
DEBUG 2022-02-14 16:38:18,186 on stmt: $686for_iter.1 = iternext(value=$phi686.0)
DEBUG 2022-02-14 16:38:18,186 on stmt: $686for_iter.2 = pair_first(value=$686for_iter.1)
DEBUG 2022-02-14 16:38:18,186 on stmt: $686for_iter.3 = pair_second(value=$686for_iter.1)
DEBUG 2022-02-14 16:38:18,186 on stmt: $phi688.1 = $686for_iter.2
DEBUG 2022-02-14 16:38:18,186 on stmt: branch $686for_iter.3, 688, 726
DEBUG 2022-02-14 16:38:18,186 ==== SSA block rewrite pass on 688
DEBUG 2022-02-14 16:38:18,186 Running <numba.core.ssa._FreshVarHandler object at 0x7fa041ed6f40>
DEBUG 2022-02-14 16:38:18,186 on stmt: j.1 = $phi688.1
DEBUG 2022-02-14 16:38:18,186 on stmt: x = N_fixed + j.1
DEBUG 2022-02-14 16:38:18,187 on stmt: $704binary_subscr.9 = getitem(value=H_batch.2, index=j.1, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:18,187 on stmt: $const706.10 = const(float, 0.5)
DEBUG 2022-02-14 16:38:18,187 on stmt: $const710.12 = const(int, 2)
DEBUG 2022-02-14 16:38:18,187 on stmt: $712binary_floor_divide.13 = x // $const710.12
DEBUG 2022-02-14 16:38:18,187 on stmt: $714binary_power.14 = $const706.10 ** $712binary_floor_divide.13
DEBUG 2022-02-14 16:38:18,187 on stmt: $716inplace_multiply.15 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=$704binary_subscr.9, rhs=$714binary_power.14, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:38:18,187 on stmt: H_batch.2[j.1] = $716inplace_multiply.15
DEBUG 2022-02-14 16:38:18,187 on stmt: jump 686
DEBUG 2022-02-14 16:38:18,187 ==== SSA block rewrite pass on 726
DEBUG 2022-02-14 16:38:18,187 Running <numba.core.ssa._FreshVarHandler object at 0x7fa041ed6f40>
DEBUG 2022-02-14 16:38:18,187 on stmt: $728return_value.1 = cast(value=H_batch.2)
DEBUG 2022-02-14 16:38:18,187 on stmt: return $728return_value.1
DEBUG 2022-02-14 16:38:18,187 Replaced assignments: defaultdict(<class 'list'>,
            {300: [<numba.core.ir.Assign object at 0x7fa041ed4dc0>],
             314: [<numba.core.ir.Assign object at 0x7fa041ed4490>]})
DEBUG 2022-02-14 16:38:18,188 ==== SSA block rewrite pass on 0
DEBUG 2022-02-14 16:38:18,188 Running <numba.core.ssa._FixSSAVars object at 0x7fa041ed49a0>
DEBUG 2022-02-14 16:38:18,188 on stmt: A = arg(0, name=A)
DEBUG 2022-02-14 16:38:18,188 on stmt: D = arg(1, name=D)
DEBUG 2022-02-14 16:38:18,188 on stmt: fixed_edge_reps = arg(2, name=fixed_edge_reps)
DEBUG 2022-02-14 16:38:18,188 on stmt: batch_max = arg(3, name=batch_max)
DEBUG 2022-02-14 16:38:18,188 on stmt: even_cutoff = arg(4, name=even_cutoff)
DEBUG 2022-02-14 16:38:18,188 on stmt: oddmode = arg(5, name=oddmode)
DEBUG 2022-02-14 16:38:18,188 on stmt: glynn = arg(6, name=glynn)
DEBUG 2022-02-14 16:38:18,188 on stmt: $const4.1 = const(int, 0)
DEBUG 2022-02-14 16:38:18,188 on stmt: oddloop = static_getitem(value=D, index=0, index_var=$const4.1, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:18,188 on stmt: $const12.4 = const(int, 0)
DEBUG 2022-02-14 16:38:18,188 on stmt: $const14.5 = const(NoneType, None)
DEBUG 2022-02-14 16:38:18,188 on stmt: $const16.6 = const(NoneType, None)
DEBUG 2022-02-14 16:38:18,188 on stmt: $18build_slice.7 = global(slice: <class 'slice'>)
DEBUG 2022-02-14 16:38:18,189 on stmt: $18build_slice.8 = call $18build_slice.7($const14.5, $const16.6, func=$18build_slice.7, args=(Var($const14.5, loop_hafnian_batch.py:84), Var($const16.6, loop_hafnian_batch.py:84)), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:18,189 on stmt: $20build_tuple.9 = build_tuple(items=[Var($const12.4, loop_hafnian_batch.py:84), Var($18build_slice.8, loop_hafnian_batch.py:84)])
DEBUG 2022-02-14 16:38:18,189 on stmt: oddV = static_getitem(value=A, index=(0, slice(None, None, None)), index_var=$20build_tuple.9, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:18,189 on stmt: $const28.12 = const(int, 1)
DEBUG 2022-02-14 16:38:18,189 on stmt: oddloop0 = static_getitem(value=D, index=1, index_var=$const28.12, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:18,189 on stmt: $const36.15 = const(int, 1)
DEBUG 2022-02-14 16:38:18,189 on stmt: $const38.16 = const(NoneType, None)
DEBUG 2022-02-14 16:38:18,189 on stmt: $const40.17 = const(NoneType, None)
DEBUG 2022-02-14 16:38:18,189 on stmt: $42build_slice.18 = global(slice: <class 'slice'>)
DEBUG 2022-02-14 16:38:18,189 on stmt: $42build_slice.19 = call $42build_slice.18($const38.16, $const40.17, func=$42build_slice.18, args=(Var($const38.16, loop_hafnian_batch.py:89), Var($const40.17, loop_hafnian_batch.py:89)), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:18,189 on stmt: $44build_tuple.20 = build_tuple(items=[Var($const36.15, loop_hafnian_batch.py:89), Var($42build_slice.19, loop_hafnian_batch.py:89)])
DEBUG 2022-02-14 16:38:18,189 on stmt: oddV0 = static_getitem(value=A, index=(1, slice(None, None, None)), index_var=$44build_tuple.20, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:18,190 on stmt: $52load_attr.23 = getattr(value=A, attr=shape)
DEBUG 2022-02-14 16:38:18,190 on stmt: $const54.24 = const(int, 0)
DEBUG 2022-02-14 16:38:18,190 on stmt: n = static_getitem(value=$52load_attr.23, index=0, index_var=$const54.24, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:18,190 on stmt: $const60.26 = const(int, 2)
DEBUG 2022-02-14 16:38:18,190 on stmt: $64load_method.28 = getattr(value=fixed_edge_reps, attr=sum)
DEBUG 2022-02-14 16:38:18,190 on stmt: $66call_method.29 = call $64load_method.28(func=$64load_method.28, args=[], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:18,190 on stmt: $68binary_multiply.30 = $const60.26 * $66call_method.29
DEBUG 2022-02-14 16:38:18,190 on stmt: $const70.31 = const(int, 1)
DEBUG 2022-02-14 16:38:18,190 on stmt: N_fixed = $68binary_multiply.30 + $const70.31
DEBUG 2022-02-14 16:38:18,190 on stmt: $const78.34 = const(int, 2)
DEBUG 2022-02-14 16:38:18,190 on stmt: $82binary_multiply.36 = $const78.34 * batch_max
DEBUG 2022-02-14 16:38:18,190 on stmt: $84binary_add.37 = N_fixed + $82binary_multiply.36
DEBUG 2022-02-14 16:38:18,190 on stmt: $88binary_add.39 = $84binary_add.37 + even_cutoff
DEBUG 2022-02-14 16:38:18,190 on stmt: $const90.40 = const(int, 1)
DEBUG 2022-02-14 16:38:18,191 on stmt: N_max = $88binary_add.39 + $const90.40
DEBUG 2022-02-14 16:38:18,191 on stmt: $96load_global.42 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:38:18,191 on stmt: $98load_method.43 = getattr(value=$96load_global.42, attr=concatenate)
DEBUG 2022-02-14 16:38:18,191 on stmt: $100load_global.44 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:38:18,191 on stmt: $102load_method.45 = getattr(value=$100load_global.44, attr=array)
DEBUG 2022-02-14 16:38:18,191 on stmt: $const106.47 = const(int, 1)
DEBUG 2022-02-14 16:38:18,191 on stmt: $108build_list.48 = build_list(items=[Var(batch_max, loop_hafnian_batch.py:83), Var($const106.47, loop_hafnian_batch.py:95)])
DEBUG 2022-02-14 16:38:18,191 on stmt: $110call_method.49 = call $102load_method.45($108build_list.48, func=$102load_method.45, args=[Var($108build_list.48, loop_hafnian_batch.py:95)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:18,191 on stmt: $114build_tuple.51 = build_tuple(items=[Var($110call_method.49, loop_hafnian_batch.py:95), Var(fixed_edge_reps, loop_hafnian_batch.py:83)])
DEBUG 2022-02-14 16:38:18,191 on stmt: edge_reps = call $98load_method.43($114build_tuple.51, func=$98load_method.43, args=[Var($114build_tuple.51, loop_hafnian_batch.py:95)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:18,191 on stmt: $120load_global.53 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:38:18,191 on stmt: $122load_method.54 = getattr(value=$120load_global.53, attr=prod)
DEBUG 2022-02-14 16:38:18,191 on stmt: $const126.56 = const(int, 1)
DEBUG 2022-02-14 16:38:18,192 on stmt: $128binary_add.57 = edge_reps + $const126.56
DEBUG 2022-02-14 16:38:18,192 on stmt: steps = call $122load_method.54($128binary_add.57, func=$122load_method.54, args=[Var($128binary_add.57, loop_hafnian_batch.py:96)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:18,192 on stmt: $136load_method.60 = getattr(value=edge_reps, attr=max)
DEBUG 2022-02-14 16:38:18,192 on stmt: $138call_method.61 = call $136load_method.60(func=$136load_method.60, args=[], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:18,192 on stmt: max_binom = $138call_method.61 + even_cutoff
DEBUG 2022-02-14 16:38:18,192 on stmt: $146load_global.64 = global(precompute_binoms: CPUDispatcher(<function precompute_binoms at 0x7fa047ebe310>))
DEBUG 2022-02-14 16:38:18,192 on stmt: binoms = call $146load_global.64(max_binom, func=$146load_global.64, args=[Var(max_binom, loop_hafnian_batch.py:98)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:18,192 on stmt: $154load_global.67 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:38:18,192 on stmt: $156load_attr.68 = getattr(value=$154load_global.67, attr=zeros)
DEBUG 2022-02-14 16:38:18,192 on stmt: $const158.69 = const(int, 2)
DEBUG 2022-02-14 16:38:18,192 on stmt: $162binary_multiply.71 = $const158.69 * batch_max
DEBUG 2022-02-14 16:38:18,192 on stmt: $166binary_add.73 = $162binary_multiply.71 + even_cutoff
DEBUG 2022-02-14 16:38:18,192 on stmt: $const168.74 = const(int, 2)
DEBUG 2022-02-14 16:38:18,193 on stmt: $170binary_add.75 = $166binary_add.73 + $const168.74
DEBUG 2022-02-14 16:38:18,193 on stmt: $172load_global.76 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:38:18,193 on stmt: $174load_attr.77 = getattr(value=$172load_global.76, attr=complex128)
DEBUG 2022-02-14 16:38:18,193 on stmt: H_batch = call $156load_attr.68($170binary_add.75, func=$156load_attr.68, args=[Var($170binary_add.75, loop_hafnian_batch.py:101)], kws=[('dtype', Var($174load_attr.77, loop_hafnian_batch.py:101))], vararg=None, target=None)
DEBUG 2022-02-14 16:38:18,193 on stmt: $182load_global.80 = global(numba: <module 'numba' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numba/__init__.py'>)
DEBUG 2022-02-14 16:38:18,193 on stmt: $184load_method.81 = getattr(value=$182load_global.80, attr=prange)
DEBUG 2022-02-14 16:38:18,193 on stmt: $188call_method.83 = call $184load_method.81(steps, func=$184load_method.81, args=[Var(steps, loop_hafnian_batch.py:96)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:18,193 on stmt: $190get_iter.84 = getiter(value=$188call_method.83)
DEBUG 2022-02-14 16:38:18,193 on stmt: $phi192.0 = $190get_iter.84
DEBUG 2022-02-14 16:38:18,193 on stmt: jump 192
DEBUG 2022-02-14 16:38:18,193 ==== SSA block rewrite pass on 192
DEBUG 2022-02-14 16:38:18,193 Running <numba.core.ssa._FixSSAVars object at 0x7fa041ed49a0>
DEBUG 2022-02-14 16:38:18,193 on stmt: H_batch.2 = phi(incoming_values=[Var(H_batch, loop_hafnian_batch.py:101), Var(H_batch.1, loop_hafnian_batch.py:142)], incoming_blocks=[0, 656])
DEBUG 2022-02-14 16:38:18,193 on stmt: $192for_iter.1 = iternext(value=$phi192.0)
DEBUG 2022-02-14 16:38:18,194 on stmt: $192for_iter.2 = pair_first(value=$192for_iter.1)
DEBUG 2022-02-14 16:38:18,194 on stmt: $192for_iter.3 = pair_second(value=$192for_iter.1)
DEBUG 2022-02-14 16:38:18,194 on stmt: $phi196.1 = $192for_iter.2
DEBUG 2022-02-14 16:38:18,194 on stmt: branch $192for_iter.3, 196, 666
DEBUG 2022-02-14 16:38:18,194 ==== SSA block rewrite pass on 196
DEBUG 2022-02-14 16:38:18,194 Running <numba.core.ssa._FixSSAVars object at 0x7fa041ed49a0>
DEBUG 2022-02-14 16:38:18,194 on stmt: j = $phi196.1
DEBUG 2022-02-14 16:38:18,194 on stmt: $198load_global.2 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:38:18,194 on stmt: $200load_attr.3 = getattr(value=$198load_global.2, attr=zeros)
DEBUG 2022-02-14 16:38:18,194 on stmt: $const202.4 = const(int, 2)
DEBUG 2022-02-14 16:38:18,194 on stmt: $206binary_multiply.6 = $const202.4 * batch_max
DEBUG 2022-02-14 16:38:18,194 on stmt: $210binary_add.8 = $206binary_multiply.6 + even_cutoff
DEBUG 2022-02-14 16:38:18,194 on stmt: $const212.9 = const(int, 2)
DEBUG 2022-02-14 16:38:18,194 on stmt: $214binary_add.10 = $210binary_add.8 + $const212.9
DEBUG 2022-02-14 16:38:18,194 on stmt: $216load_global.11 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:38:18,194 on stmt: $218load_attr.12 = getattr(value=$216load_global.11, attr=complex128)
DEBUG 2022-02-14 16:38:18,195 on stmt: Hnew = call $200load_attr.3($214binary_add.10, func=$200load_attr.3, args=[Var($214binary_add.10, loop_hafnian_batch.py:104)], kws=[('dtype', Var($218load_attr.12, loop_hafnian_batch.py:104))], vararg=None, target=None)
DEBUG 2022-02-14 16:38:18,195 on stmt: $226load_global.15 = global(find_kept_edges: CPUDispatcher(<function find_kept_edges at 0x7fa047ebe790>))
DEBUG 2022-02-14 16:38:18,195 on stmt: kept_edges = call $226load_global.15(j, edge_reps, func=$226load_global.15, args=[Var(j, loop_hafnian_batch.py:102), Var(edge_reps, loop_hafnian_batch.py:95)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:18,195 on stmt: $238load_method.20 = getattr(value=kept_edges, attr=sum)
DEBUG 2022-02-14 16:38:18,195 on stmt: edges_sum = call $238load_method.20(func=$238load_method.20, args=[], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:18,195 on stmt: binom_prod = const(float, 1.0)
DEBUG 2022-02-14 16:38:18,195 on stmt: $248load_global.23 = global(range: <class 'range'>)
DEBUG 2022-02-14 16:38:18,195 on stmt: $const250.24 = const(int, 1)
DEBUG 2022-02-14 16:38:18,195 on stmt: $const254.26 = const(int, 2)
DEBUG 2022-02-14 16:38:18,195 on stmt: $256binary_floor_divide.27 = n // $const254.26
DEBUG 2022-02-14 16:38:18,195 on stmt: $258call_function.28 = call $248load_global.23($const250.24, $256binary_floor_divide.27, func=$248load_global.23, args=[Var($const250.24, loop_hafnian_batch.py:110), Var($256binary_floor_divide.27, loop_hafnian_batch.py:110)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:18,195 on stmt: $260get_iter.29 = getiter(value=$258call_function.28)
DEBUG 2022-02-14 16:38:18,195 on stmt: $phi262.1 = $260get_iter.29
DEBUG 2022-02-14 16:38:18,196 on stmt: jump 262
DEBUG 2022-02-14 16:38:18,196 ==== SSA block rewrite pass on 262
DEBUG 2022-02-14 16:38:18,196 Running <numba.core.ssa._FixSSAVars object at 0x7fa041ed49a0>
DEBUG 2022-02-14 16:38:18,196 on stmt: binom_prod.2 = phi(incoming_values=[Var(binom_prod.1, loop_hafnian_batch.py:111), Var(binom_prod, loop_hafnian_batch.py:109)], incoming_blocks=[264, 196])
DEBUG 2022-02-14 16:38:18,196 on stmt: $262for_iter.2 = iternext(value=$phi262.1)
DEBUG 2022-02-14 16:38:18,196 on stmt: $262for_iter.3 = pair_first(value=$262for_iter.2)
DEBUG 2022-02-14 16:38:18,196 on stmt: $262for_iter.4 = pair_second(value=$262for_iter.2)
DEBUG 2022-02-14 16:38:18,196 on stmt: $phi264.2 = $262for_iter.3
DEBUG 2022-02-14 16:38:18,196 on stmt: branch $262for_iter.4, 264, 294
DEBUG 2022-02-14 16:38:18,196 ==== SSA block rewrite pass on 264
DEBUG 2022-02-14 16:38:18,196 Running <numba.core.ssa._FixSSAVars object at 0x7fa041ed49a0>
DEBUG 2022-02-14 16:38:18,196 on stmt: i = $phi264.2
DEBUG 2022-02-14 16:38:18,196 on stmt: $274binary_subscr.7 = getitem(value=edge_reps, index=i, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:18,196 on stmt: $280binary_subscr.10 = getitem(value=kept_edges, index=i, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:18,196 on stmt: $282build_tuple.11 = build_tuple(items=[Var($274binary_subscr.7, loop_hafnian_batch.py:111), Var($280binary_subscr.10, loop_hafnian_batch.py:111)])
DEBUG 2022-02-14 16:38:18,196 on stmt: $284binary_subscr.12 = getitem(value=binoms, index=$282build_tuple.11, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:18,197 on stmt: $286inplace_multiply.13 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=binom_prod.2, rhs=$284binary_subscr.12, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:38:18,197 on stmt: binom_prod.1 = $286inplace_multiply.13
DEBUG 2022-02-14 16:38:18,197 on stmt: jump 262
DEBUG 2022-02-14 16:38:18,197 ==== SSA block rewrite pass on 294
DEBUG 2022-02-14 16:38:18,197 Running <numba.core.ssa._FixSSAVars object at 0x7fa041ed49a0>
DEBUG 2022-02-14 16:38:18,197 on stmt: bool296 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:38:18,197 on stmt: $296pred = call bool296(glynn, func=bool296, args=(Var(glynn, loop_hafnian_batch.py:83),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:18,197 on stmt: branch $296pred, 300, 314
DEBUG 2022-02-14 16:38:18,197 ==== SSA block rewrite pass on 300
DEBUG 2022-02-14 16:38:18,197 Running <numba.core.ssa._FixSSAVars object at 0x7fa041ed49a0>
DEBUG 2022-02-14 16:38:18,197 on stmt: $const300.1 = const(int, 2)
DEBUG 2022-02-14 16:38:18,197 on stmt: $304binary_multiply.3 = $const300.1 * kept_edges
DEBUG 2022-02-14 16:38:18,197 on stmt: delta = $304binary_multiply.3 - edge_reps
DEBUG 2022-02-14 16:38:18,197 on stmt: jump 318
DEBUG 2022-02-14 16:38:18,197 ==== SSA block rewrite pass on 314
DEBUG 2022-02-14 16:38:18,198 Running <numba.core.ssa._FixSSAVars object at 0x7fa041ed49a0>
DEBUG 2022-02-14 16:38:18,198 on stmt: delta.1 = kept_edges
DEBUG 2022-02-14 16:38:18,198 on stmt: jump 318
DEBUG 2022-02-14 16:38:18,198 ==== SSA block rewrite pass on 318
DEBUG 2022-02-14 16:38:18,198 Running <numba.core.ssa._FixSSAVars object at 0x7fa041ed49a0>
DEBUG 2022-02-14 16:38:18,198 on stmt: $318load_global.1 = global(get_submatrices: CPUDispatcher(<function get_submatrices at 0x7fa047ebed30>))
DEBUG 2022-02-14 16:38:18,198 on stmt: $328call_function.6 = call $318load_global.1(delta, A, D, oddV, func=$318load_global.1, args=[Var(delta, loop_hafnian_batch.py:114), Var(A, loop_hafnian_batch.py:83), Var(D, loop_hafnian_batch.py:83), Var(oddV, loop_hafnian_batch.py:84)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:18,198 find_def var='delta' stmt=$328call_function.6 = call $318load_global.1(delta, A, D, oddV, func=$318load_global.1, args=[Var(delta, loop_hafnian_batch.py:114), Var(A, loop_hafnian_batch.py:83), Var(D, loop_hafnian_batch.py:83), Var(oddV, loop_hafnian_batch.py:84)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:18,198 find_def_from_top label 318
DEBUG 2022-02-14 16:38:18,198 insert phi node delta.2 = phi(incoming_values=[], incoming_blocks=[]) at 318
DEBUG 2022-02-14 16:38:18,198 find_def_from_bottom label 314
DEBUG 2022-02-14 16:38:18,198 incoming_def delta.1 = kept_edges
DEBUG 2022-02-14 16:38:18,198 find_def_from_bottom label 300
DEBUG 2022-02-14 16:38:18,199 incoming_def delta = $304binary_multiply.3 - edge_reps
DEBUG 2022-02-14 16:38:18,199 replaced with: $328call_function.6 = call $318load_global.1(delta.2, A, D, oddV, func=$318load_global.1, args=[Var(delta.2, loop_hafnian_batch.py:118), Var(A, loop_hafnian_batch.py:83), Var(D, loop_hafnian_batch.py:83), Var(oddV, loop_hafnian_batch.py:84)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:18,199 on stmt: $330unpack_sequence.11 = exhaust_iter(value=$328call_function.6, count=4)
DEBUG 2022-02-14 16:38:18,199 on stmt: $330unpack_sequence.7 = static_getitem(value=$330unpack_sequence.11, index=0, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:18,199 on stmt: $330unpack_sequence.8 = static_getitem(value=$330unpack_sequence.11, index=1, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:18,199 on stmt: $330unpack_sequence.9 = static_getitem(value=$330unpack_sequence.11, index=2, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:18,199 on stmt: $330unpack_sequence.10 = static_getitem(value=$330unpack_sequence.11, index=3, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:18,199 on stmt: AX_S = $330unpack_sequence.7
DEBUG 2022-02-14 16:38:18,199 on stmt: XD_S = $330unpack_sequence.8
DEBUG 2022-02-14 16:38:18,199 on stmt: D_S = $330unpack_sequence.9
DEBUG 2022-02-14 16:38:18,199 on stmt: oddVX_S = $330unpack_sequence.10
DEBUG 2022-02-14 16:38:18,199 on stmt: $340load_global.12 = global(eigvals: CPUDispatcher(<function eigvals at 0x7fa047e5d430>))
DEBUG 2022-02-14 16:38:18,199 on stmt: E = call $340load_global.12(AX_S, func=$340load_global.12, args=[Var(AX_S, loop_hafnian_batch.py:118)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:18,199 on stmt: $const350.16 = const(int, 0)
DEBUG 2022-02-14 16:38:18,200 on stmt: $352binary_subscr.17 = static_getitem(value=kept_edges, index=0, index_var=$const350.16, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:18,200 on stmt: $const354.18 = const(int, 0)
DEBUG 2022-02-14 16:38:18,200 on stmt: $356compare_op.19 = $352binary_subscr.17 == $const354.18
DEBUG 2022-02-14 16:38:18,200 on stmt: bool358 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:38:18,200 on stmt: $358pred = call bool358($356compare_op.19, func=bool358, args=(Var($356compare_op.19, loop_hafnian_batch.py:122),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:18,200 on stmt: branch $358pred, 362, 450
DEBUG 2022-02-14 16:38:18,200 ==== SSA block rewrite pass on 362
DEBUG 2022-02-14 16:38:18,200 Running <numba.core.ssa._FixSSAVars object at 0x7fa041ed49a0>
DEBUG 2022-02-14 16:38:18,200 on stmt: $const364.2 = const(int, 1)
DEBUG 2022-02-14 16:38:18,200 on stmt: $366binary_subscr.3 = static_getitem(value=kept_edges, index=1, index_var=$const364.2, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:18,200 on stmt: $const368.4 = const(int, 0)
DEBUG 2022-02-14 16:38:18,200 on stmt: $370compare_op.5 = $366binary_subscr.3 == $const368.4
DEBUG 2022-02-14 16:38:18,200 on stmt: bool372 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:38:18,200 on stmt: $372pred = call bool372($370compare_op.5, func=bool372, args=(Var($370compare_op.5, loop_hafnian_batch.py:122),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:18,201 on stmt: branch $372pred, 376, 450
DEBUG 2022-02-14 16:38:18,201 ==== SSA block rewrite pass on 376
DEBUG 2022-02-14 16:38:18,201 Running <numba.core.ssa._FixSSAVars object at 0x7fa041ed49a0>
DEBUG 2022-02-14 16:38:18,201 on stmt: $376load_global.1 = global(get_submatrix_batch_odd0: CPUDispatcher(<function get_submatrix_batch_odd0 at 0x7fa047ebef70>))
DEBUG 2022-02-14 16:38:18,201 on stmt: oddVX_S0 = call $376load_global.1(delta, oddV0, func=$376load_global.1, args=[Var(delta, loop_hafnian_batch.py:114), Var(oddV0, loop_hafnian_batch.py:89)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:18,201 find_def var='delta' stmt=oddVX_S0 = call $376load_global.1(delta, oddV0, func=$376load_global.1, args=[Var(delta, loop_hafnian_batch.py:114), Var(oddV0, loop_hafnian_batch.py:89)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:18,201 find_def_from_top label 376
DEBUG 2022-02-14 16:38:18,201 idom 362 from label 376
DEBUG 2022-02-14 16:38:18,201 find_def_from_bottom label 362
DEBUG 2022-02-14 16:38:18,201 find_def_from_top label 362
DEBUG 2022-02-14 16:38:18,201 idom 318 from label 362
DEBUG 2022-02-14 16:38:18,201 find_def_from_bottom label 318
DEBUG 2022-02-14 16:38:18,201 replaced with: oddVX_S0 = call $376load_global.1(delta.2, oddV0, func=$376load_global.1, args=[Var(delta.2, loop_hafnian_batch.py:118), Var(oddV0, loop_hafnian_batch.py:89)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:18,201 on stmt: $const386.5 = const(int, -1)
DEBUG 2022-02-14 16:38:18,202 on stmt: $const390.7 = const(int, 2)
DEBUG 2022-02-14 16:38:18,202 on stmt: $392binary_floor_divide.8 = N_fixed // $const390.7
DEBUG 2022-02-14 16:38:18,202 on stmt: $396binary_subtract.10 = $392binary_floor_divide.8 - edges_sum
DEBUG 2022-02-14 16:38:18,202 on stmt: plus_minus = $const386.5 ** $396binary_subtract.10
DEBUG 2022-02-14 16:38:18,202 on stmt: $402load_global.12 = global(f_loop_odd: CPUDispatcher(<function f_loop_odd at 0x7fa047ebeb80>))
DEBUG 2022-02-14 16:38:18,202 on stmt: $418call_function.20 = call $402load_global.12(E, AX_S, XD_S, D_S, N_fixed, oddloop0, oddVX_S0, func=$402load_global.12, args=[Var(E, loop_hafnian_batch.py:120), Var(AX_S, loop_hafnian_batch.py:118), Var(XD_S, loop_hafnian_batch.py:118), Var(D_S, loop_hafnian_batch.py:118), Var(N_fixed, loop_hafnian_batch.py:92), Var(oddloop0, loop_hafnian_batch.py:88), Var(oddVX_S0, loop_hafnian_batch.py:123)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:18,202 on stmt: f = getitem(value=$418call_function.20, index=N_fixed, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:18,202 on stmt: $const428.24 = const(int, 0)
DEBUG 2022-02-14 16:38:18,202 on stmt: $432binary_subscr.27 = static_getitem(value=H_batch.2, index=0, index_var=$const428.24, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:18,202 on stmt: $438binary_multiply.30 = binom_prod.2 * plus_minus
DEBUG 2022-02-14 16:38:18,202 on stmt: $442binary_multiply.32 = $438binary_multiply.30 * f
DEBUG 2022-02-14 16:38:18,202 on stmt: $444inplace_add.33 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$432binary_subscr.27, rhs=$442binary_multiply.32, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:38:18,203 on stmt: H_batch.2[0] = $444inplace_add.33
DEBUG 2022-02-14 16:38:18,203 on stmt: jump 450
DEBUG 2022-02-14 16:38:18,203 ==== SSA block rewrite pass on 450
DEBUG 2022-02-14 16:38:18,203 Running <numba.core.ssa._FixSSAVars object at 0x7fa041ed49a0>
DEBUG 2022-02-14 16:38:18,203 on stmt: $450load_global.1 = global(f_loop: CPUDispatcher(<function f_loop at 0x7fa047ebe9d0>))
DEBUG 2022-02-14 16:38:18,203 on stmt: f_even = call $450load_global.1(E, AX_S, XD_S, D_S, N_max, func=$450load_global.1, args=[Var(E, loop_hafnian_batch.py:120), Var(AX_S, loop_hafnian_batch.py:118), Var(XD_S, loop_hafnian_batch.py:118), Var(D_S, loop_hafnian_batch.py:118), Var(N_max, loop_hafnian_batch.py:93)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:18,203 on stmt: $466load_global.8 = global(f_loop_odd: CPUDispatcher(<function f_loop_odd at 0x7fa047ebeb80>))
DEBUG 2022-02-14 16:38:18,203 on stmt: f_odd = call $466load_global.8(E, AX_S, XD_S, D_S, N_max, oddloop, oddVX_S, func=$466load_global.8, args=[Var(E, loop_hafnian_batch.py:120), Var(AX_S, loop_hafnian_batch.py:118), Var(XD_S, loop_hafnian_batch.py:118), Var(D_S, loop_hafnian_batch.py:118), Var(N_max, loop_hafnian_batch.py:93), Var(oddloop, loop_hafnian_batch.py:83), Var(oddVX_S, loop_hafnian_batch.py:118)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:18,203 on stmt: $486load_global.17 = global(range: <class 'range'>)
DEBUG 2022-02-14 16:38:18,203 on stmt: $const488.18 = const(int, 2)
DEBUG 2022-02-14 16:38:18,203 on stmt: $const492.20 = const(int, 0)
DEBUG 2022-02-14 16:38:18,203 on stmt: $494binary_subscr.21 = static_getitem(value=kept_edges, index=0, index_var=$const492.20, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:18,204 on stmt: $496binary_multiply.22 = $const488.18 * $494binary_subscr.21
DEBUG 2022-02-14 16:38:18,204 on stmt: $const498.23 = const(int, 1)
DEBUG 2022-02-14 16:38:18,204 on stmt: $500binary_add.24 = $496binary_multiply.22 + $const498.23
DEBUG 2022-02-14 16:38:18,204 on stmt: $const502.25 = const(int, 2)
DEBUG 2022-02-14 16:38:18,204 on stmt: $506binary_multiply.27 = $const502.25 * batch_max
DEBUG 2022-02-14 16:38:18,204 on stmt: $510binary_add.29 = $506binary_multiply.27 + even_cutoff
DEBUG 2022-02-14 16:38:18,204 on stmt: $const512.30 = const(int, 2)
DEBUG 2022-02-14 16:38:18,204 on stmt: $514binary_add.31 = $510binary_add.29 + $const512.30
DEBUG 2022-02-14 16:38:18,204 on stmt: $516call_function.32 = call $486load_global.17($500binary_add.24, $514binary_add.31, func=$486load_global.17, args=[Var($500binary_add.24, loop_hafnian_batch.py:131), Var($514binary_add.31, loop_hafnian_batch.py:131)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:18,204 on stmt: $518get_iter.33 = getiter(value=$516call_function.32)
DEBUG 2022-02-14 16:38:18,204 on stmt: $phi520.1 = $518get_iter.33
DEBUG 2022-02-14 16:38:18,204 on stmt: jump 520
DEBUG 2022-02-14 16:38:18,204 ==== SSA block rewrite pass on 520
DEBUG 2022-02-14 16:38:18,205 Running <numba.core.ssa._FixSSAVars object at 0x7fa041ed49a0>
DEBUG 2022-02-14 16:38:18,205 on stmt: $520for_iter.2 = iternext(value=$phi520.1)
DEBUG 2022-02-14 16:38:18,205 on stmt: $520for_iter.3 = pair_first(value=$520for_iter.2)
DEBUG 2022-02-14 16:38:18,205 on stmt: $520for_iter.4 = pair_second(value=$520for_iter.2)
DEBUG 2022-02-14 16:38:18,205 on stmt: $phi522.2 = $520for_iter.3
DEBUG 2022-02-14 16:38:18,205 on stmt: branch $520for_iter.4, 522, 656
DEBUG 2022-02-14 16:38:18,205 ==== SSA block rewrite pass on 522
DEBUG 2022-02-14 16:38:18,205 Running <numba.core.ssa._FixSSAVars object at 0x7fa041ed49a0>
DEBUG 2022-02-14 16:38:18,205 on stmt: N_det = $phi522.2
DEBUG 2022-02-14 16:38:18,205 on stmt: N = N_fixed + N_det
DEBUG 2022-02-14 16:38:18,205 on stmt: $const532.6 = const(int, -1)
DEBUG 2022-02-14 16:38:18,205 on stmt: $const536.8 = const(int, 2)
DEBUG 2022-02-14 16:38:18,205 on stmt: $538binary_floor_divide.9 = N // $const536.8
DEBUG 2022-02-14 16:38:18,205 on stmt: $542binary_subtract.11 = $538binary_floor_divide.9 - edges_sum
DEBUG 2022-02-14 16:38:18,206 on stmt: plus_minus.1 = $const532.6 ** $542binary_subtract.11
DEBUG 2022-02-14 16:38:18,206 on stmt: $const552.15 = const(int, 1)
DEBUG 2022-02-14 16:38:18,206 on stmt: $554binary_subtract.16 = N_det - $const552.15
DEBUG 2022-02-14 16:38:18,206 on stmt: $const556.17 = const(int, 2)
DEBUG 2022-02-14 16:38:18,206 on stmt: $558binary_floor_divide.18 = $554binary_subtract.16 // $const556.17
DEBUG 2022-02-14 16:38:18,206 on stmt: $const562.20 = const(int, 0)
DEBUG 2022-02-14 16:38:18,206 on stmt: $564binary_subscr.21 = static_getitem(value=kept_edges, index=0, index_var=$const562.20, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:18,206 on stmt: $566build_tuple.22 = build_tuple(items=[Var($558binary_floor_divide.18, loop_hafnian_batch.py:135), Var($564binary_subscr.21, loop_hafnian_batch.py:135)])
DEBUG 2022-02-14 16:38:18,206 on stmt: $568binary_subscr.23 = getitem(value=binoms, index=$566build_tuple.22, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:18,206 on stmt: n_det_binom_prod = $568binary_subscr.23 * binom_prod.2
DEBUG 2022-02-14 16:38:18,206 on stmt: $const578.27 = const(int, 2)
DEBUG 2022-02-14 16:38:18,206 on stmt: $580binary_modulo.28 = N % $const578.27
DEBUG 2022-02-14 16:38:18,207 on stmt: $const582.29 = const(int, 0)
DEBUG 2022-02-14 16:38:18,207 on stmt: $584compare_op.30 = $580binary_modulo.28 == $const582.29
DEBUG 2022-02-14 16:38:18,207 on stmt: bool586 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:38:18,207 on stmt: $586pred = call bool586($584compare_op.30, func=bool586, args=(Var($584compare_op.30, loop_hafnian_batch.py:137),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:18,207 on stmt: branch $586pred, 590, 624
DEBUG 2022-02-14 16:38:18,207 ==== SSA block rewrite pass on 590
DEBUG 2022-02-14 16:38:18,207 Running <numba.core.ssa._FixSSAVars object at 0x7fa041ed49a0>
DEBUG 2022-02-14 16:38:18,207 on stmt: $596binary_subscr.6 = getitem(value=Hnew, index=N_det, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:18,207 on stmt: $602binary_multiply.9 = n_det_binom_prod * plus_minus.1
DEBUG 2022-02-14 16:38:18,207 on stmt: $const608.12 = const(int, 2)
DEBUG 2022-02-14 16:38:18,207 on stmt: $610binary_floor_divide.13 = N // $const608.12
DEBUG 2022-02-14 16:38:18,207 on stmt: $612binary_subscr.14 = getitem(value=f_even, index=$610binary_floor_divide.13, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:18,207 on stmt: $614binary_multiply.15 = $602binary_multiply.9 * $612binary_subscr.14
DEBUG 2022-02-14 16:38:18,208 on stmt: $616inplace_add.16 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$596binary_subscr.6, rhs=$614binary_multiply.15, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:38:18,208 on stmt: Hnew[N_det] = $616inplace_add.16
DEBUG 2022-02-14 16:38:18,208 on stmt: jump 652
DEBUG 2022-02-14 16:38:18,208 ==== SSA block rewrite pass on 624
DEBUG 2022-02-14 16:38:18,208 Running <numba.core.ssa._FixSSAVars object at 0x7fa041ed49a0>
DEBUG 2022-02-14 16:38:18,208 on stmt: $630binary_subscr.6 = getitem(value=Hnew, index=N_det, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:18,208 on stmt: $636binary_multiply.9 = n_det_binom_prod * plus_minus.1
DEBUG 2022-02-14 16:38:18,208 on stmt: $642binary_subscr.12 = getitem(value=f_odd, index=N, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:18,208 on stmt: $644binary_multiply.13 = $636binary_multiply.9 * $642binary_subscr.12
DEBUG 2022-02-14 16:38:18,208 on stmt: $646inplace_add.14 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$630binary_subscr.6, rhs=$644binary_multiply.13, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:38:18,208 on stmt: Hnew[N_det] = $646inplace_add.14
DEBUG 2022-02-14 16:38:18,208 on stmt: jump 652
DEBUG 2022-02-14 16:38:18,209 ==== SSA block rewrite pass on 652
DEBUG 2022-02-14 16:38:18,209 Running <numba.core.ssa._FixSSAVars object at 0x7fa041ed49a0>
DEBUG 2022-02-14 16:38:18,209 on stmt: jump 520
DEBUG 2022-02-14 16:38:18,209 ==== SSA block rewrite pass on 656
DEBUG 2022-02-14 16:38:18,209 Running <numba.core.ssa._FixSSAVars object at 0x7fa041ed49a0>
DEBUG 2022-02-14 16:38:18,209 on stmt: $660inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=H_batch.2, rhs=Hnew, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:38:18,209 on stmt: H_batch.1 = $660inplace_add.3
DEBUG 2022-02-14 16:38:18,209 on stmt: jump 192
DEBUG 2022-02-14 16:38:18,209 ==== SSA block rewrite pass on 666
DEBUG 2022-02-14 16:38:18,209 Running <numba.core.ssa._FixSSAVars object at 0x7fa041ed49a0>
DEBUG 2022-02-14 16:38:18,209 on stmt: bool668 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:38:18,209 on stmt: $668pred = call bool668(glynn, func=bool668, args=(Var(glynn, loop_hafnian_batch.py:83),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:18,209 on stmt: branch $668pred, 672, 726
DEBUG 2022-02-14 16:38:18,209 ==== SSA block rewrite pass on 672
DEBUG 2022-02-14 16:38:18,210 Running <numba.core.ssa._FixSSAVars object at 0x7fa041ed49a0>
DEBUG 2022-02-14 16:38:18,210 on stmt: $672load_global.0 = global(range: <class 'range'>)
DEBUG 2022-02-14 16:38:18,210 on stmt: $676load_attr.2 = getattr(value=H_batch.2, attr=shape)
DEBUG 2022-02-14 16:38:18,210 on stmt: $const678.3 = const(int, 0)
DEBUG 2022-02-14 16:38:18,210 on stmt: $680binary_subscr.4 = static_getitem(value=$676load_attr.2, index=0, index_var=$const678.3, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:18,210 on stmt: $682call_function.5 = call $672load_global.0($680binary_subscr.4, func=$672load_global.0, args=[Var($680binary_subscr.4, loop_hafnian_batch.py:145)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:18,210 on stmt: $684get_iter.6 = getiter(value=$682call_function.5)
DEBUG 2022-02-14 16:38:18,210 on stmt: $phi686.0 = $684get_iter.6
DEBUG 2022-02-14 16:38:18,210 on stmt: jump 686
DEBUG 2022-02-14 16:38:18,210 ==== SSA block rewrite pass on 686
DEBUG 2022-02-14 16:38:18,210 Running <numba.core.ssa._FixSSAVars object at 0x7fa041ed49a0>
DEBUG 2022-02-14 16:38:18,210 on stmt: $686for_iter.1 = iternext(value=$phi686.0)
DEBUG 2022-02-14 16:38:18,210 on stmt: $686for_iter.2 = pair_first(value=$686for_iter.1)
DEBUG 2022-02-14 16:38:18,211 on stmt: $686for_iter.3 = pair_second(value=$686for_iter.1)
DEBUG 2022-02-14 16:38:18,211 on stmt: $phi688.1 = $686for_iter.2
DEBUG 2022-02-14 16:38:18,211 on stmt: branch $686for_iter.3, 688, 726
DEBUG 2022-02-14 16:38:18,211 ==== SSA block rewrite pass on 688
DEBUG 2022-02-14 16:38:18,211 Running <numba.core.ssa._FixSSAVars object at 0x7fa041ed49a0>
DEBUG 2022-02-14 16:38:18,211 on stmt: j.1 = $phi688.1
DEBUG 2022-02-14 16:38:18,211 on stmt: x = N_fixed + j.1
DEBUG 2022-02-14 16:38:18,211 on stmt: $704binary_subscr.9 = getitem(value=H_batch.2, index=j.1, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:18,211 on stmt: $const706.10 = const(float, 0.5)
DEBUG 2022-02-14 16:38:18,211 on stmt: $const710.12 = const(int, 2)
DEBUG 2022-02-14 16:38:18,211 on stmt: $712binary_floor_divide.13 = x // $const710.12
DEBUG 2022-02-14 16:38:18,211 on stmt: $714binary_power.14 = $const706.10 ** $712binary_floor_divide.13
DEBUG 2022-02-14 16:38:18,211 on stmt: $716inplace_multiply.15 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=$704binary_subscr.9, rhs=$714binary_power.14, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:38:18,211 on stmt: H_batch.2[j.1] = $716inplace_multiply.15
DEBUG 2022-02-14 16:38:18,212 on stmt: jump 686
DEBUG 2022-02-14 16:38:18,212 ==== SSA block rewrite pass on 726
DEBUG 2022-02-14 16:38:18,212 Running <numba.core.ssa._FixSSAVars object at 0x7fa041ed49a0>
DEBUG 2022-02-14 16:38:18,212 on stmt: $728return_value.1 = cast(value=H_batch.2)
DEBUG 2022-02-14 16:38:18,212 on stmt: return $728return_value.1
DEBUG 2022-02-14 16:38:18,243 bytecode dump:
>          0	NOP(arg=None, lineno=218)
           2	LOAD_GLOBAL(arg=0, lineno=218)
           4	LOAD_METHOD(arg=1, lineno=218)
           6	LOAD_FAST(arg=0, lineno=218)
           8	LOAD_FAST(arg=0, lineno=218)
          10	BUILD_TUPLE(arg=2, lineno=218)
          12	CALL_METHOD(arg=1, lineno=218)
          14	STORE_FAST(arg=2, lineno=218)
          16	LOAD_GLOBAL(arg=0, lineno=219)
          18	LOAD_METHOD(arg=2, lineno=219)
          20	LOAD_FAST(arg=2, lineno=219)
          22	LOAD_CONST(arg=1, lineno=219)
          24	COMPARE_OP(arg=3, lineno=219)
          26	CALL_METHOD(arg=1, lineno=219)
          28	LOAD_CONST(arg=1, lineno=219)
          30	BINARY_SUBSCR(arg=None, lineno=219)
          32	STORE_FAST(arg=3, lineno=219)
          34	LOAD_GLOBAL(arg=3, lineno=220)
          36	LOAD_FAST(arg=3, lineno=220)
          38	CALL_FUNCTION(arg=1, lineno=220)
          40	LOAD_CONST(arg=2, lineno=220)
          42	BINARY_FLOOR_DIVIDE(arg=None, lineno=220)
          44	STORE_FAST(arg=4, lineno=220)
          46	LOAD_FAST(arg=0, lineno=222)
          48	LOAD_GLOBAL(arg=0, lineno=222)
          50	LOAD_METHOD(arg=2, lineno=222)
          52	LOAD_FAST(arg=0, lineno=222)
          54	LOAD_CONST(arg=1, lineno=222)
          56	COMPARE_OP(arg=3, lineno=222)
          58	CALL_METHOD(arg=1, lineno=222)
          60	BINARY_SUBSCR(arg=None, lineno=222)
          62	STORE_FAST(arg=5, lineno=222)
          64	LOAD_FAST(arg=1, lineno=223)
          66	LOAD_FAST(arg=3, lineno=223)
          68	BINARY_SUBSCR(arg=None, lineno=223)
          70	STORE_FAST(arg=6, lineno=223)
          72	LOAD_GLOBAL(arg=0, lineno=224)
          74	LOAD_ATTR(arg=4, lineno=224)
          76	LOAD_FAST(arg=6, lineno=224)
          78	LOAD_GLOBAL(arg=0, lineno=224)
          80	LOAD_ATTR(arg=5, lineno=224)
          82	LOAD_CONST(arg=3, lineno=224)
          84	CALL_FUNCTION_KW(arg=2, lineno=224)
          86	STORE_FAST(arg=7, lineno=224)
          88	LOAD_FAST(arg=5, lineno=225)
          90	LOAD_FAST(arg=6, lineno=225)
          92	LOAD_FAST(arg=4, lineno=225)
          94	LOAD_CONST(arg=0, lineno=225)
          96	BUILD_SLICE(arg=2, lineno=225)
          98	BINARY_SUBSCR(arg=None, lineno=225)
         100	BINARY_MULTIPLY(arg=None, lineno=225)
         102	LOAD_FAST(arg=7, lineno=225)
         104	LOAD_CONST(arg=0, lineno=225)
         106	LOAD_FAST(arg=4, lineno=225)
         108	BUILD_SLICE(arg=2, lineno=225)
         110	STORE_SUBSCR(arg=None, lineno=225)
         112	LOAD_FAST(arg=5, lineno=226)
         114	LOAD_FAST(arg=6, lineno=226)
         116	LOAD_CONST(arg=0, lineno=226)
         118	LOAD_FAST(arg=4, lineno=226)
         120	BUILD_SLICE(arg=2, lineno=226)
         122	BINARY_SUBSCR(arg=None, lineno=226)
         124	BINARY_MULTIPLY(arg=None, lineno=226)
         126	LOAD_FAST(arg=7, lineno=226)
         128	LOAD_FAST(arg=4, lineno=226)
         130	LOAD_CONST(arg=0, lineno=226)
         132	BUILD_SLICE(arg=2, lineno=226)
         134	STORE_SUBSCR(arg=None, lineno=226)
         136	LOAD_FAST(arg=7, lineno=228)
         138	RETURN_VALUE(arg=None, lineno=228)
DEBUG 2022-02-14 16:38:18,244 pending: deque([State(pc_initial=0 nstack_initial=0)])
DEBUG 2022-02-14 16:38:18,244 stack: []
DEBUG 2022-02-14 16:38:18,244 dispatch pc=0, inst=NOP(arg=None, lineno=218)
DEBUG 2022-02-14 16:38:18,244 stack []
DEBUG 2022-02-14 16:38:18,244 dispatch pc=2, inst=LOAD_GLOBAL(arg=0, lineno=218)
DEBUG 2022-02-14 16:38:18,244 stack []
DEBUG 2022-02-14 16:38:18,244 dispatch pc=4, inst=LOAD_METHOD(arg=1, lineno=218)
DEBUG 2022-02-14 16:38:18,244 stack ['$2load_global.0']
DEBUG 2022-02-14 16:38:18,244 dispatch pc=6, inst=LOAD_FAST(arg=0, lineno=218)
DEBUG 2022-02-14 16:38:18,244 stack ['$4load_method.1']
DEBUG 2022-02-14 16:38:18,244 dispatch pc=8, inst=LOAD_FAST(arg=0, lineno=218)
DEBUG 2022-02-14 16:38:18,244 stack ['$4load_method.1', '$kept_edges6.2']
DEBUG 2022-02-14 16:38:18,244 dispatch pc=10, inst=BUILD_TUPLE(arg=2, lineno=218)
DEBUG 2022-02-14 16:38:18,244 stack ['$4load_method.1', '$kept_edges6.2', '$kept_edges8.3']
DEBUG 2022-02-14 16:38:18,244 dispatch pc=12, inst=CALL_METHOD(arg=1, lineno=218)
DEBUG 2022-02-14 16:38:18,244 stack ['$4load_method.1', '$10build_tuple.4']
DEBUG 2022-02-14 16:38:18,244 dispatch pc=14, inst=STORE_FAST(arg=2, lineno=218)
DEBUG 2022-02-14 16:38:18,244 stack ['$12call_method.5']
DEBUG 2022-02-14 16:38:18,244 dispatch pc=16, inst=LOAD_GLOBAL(arg=0, lineno=219)
DEBUG 2022-02-14 16:38:18,244 stack []
DEBUG 2022-02-14 16:38:18,245 dispatch pc=18, inst=LOAD_METHOD(arg=2, lineno=219)
DEBUG 2022-02-14 16:38:18,245 stack ['$16load_global.6']
DEBUG 2022-02-14 16:38:18,245 dispatch pc=20, inst=LOAD_FAST(arg=2, lineno=219)
DEBUG 2022-02-14 16:38:18,245 stack ['$18load_method.7']
DEBUG 2022-02-14 16:38:18,245 dispatch pc=22, inst=LOAD_CONST(arg=1, lineno=219)
DEBUG 2022-02-14 16:38:18,245 stack ['$18load_method.7', '$z20.8']
DEBUG 2022-02-14 16:38:18,245 dispatch pc=24, inst=COMPARE_OP(arg=3, lineno=219)
DEBUG 2022-02-14 16:38:18,245 stack ['$18load_method.7', '$z20.8', '$const22.9']
DEBUG 2022-02-14 16:38:18,245 dispatch pc=26, inst=CALL_METHOD(arg=1, lineno=219)
DEBUG 2022-02-14 16:38:18,245 stack ['$18load_method.7', '$24compare_op.10']
DEBUG 2022-02-14 16:38:18,245 dispatch pc=28, inst=LOAD_CONST(arg=1, lineno=219)
DEBUG 2022-02-14 16:38:18,245 stack ['$26call_method.11']
DEBUG 2022-02-14 16:38:18,245 dispatch pc=30, inst=BINARY_SUBSCR(arg=None, lineno=219)
DEBUG 2022-02-14 16:38:18,245 stack ['$26call_method.11', '$const28.12']
DEBUG 2022-02-14 16:38:18,245 dispatch pc=32, inst=STORE_FAST(arg=3, lineno=219)
DEBUG 2022-02-14 16:38:18,245 stack ['$30binary_subscr.13']
DEBUG 2022-02-14 16:38:18,245 dispatch pc=34, inst=LOAD_GLOBAL(arg=3, lineno=220)
DEBUG 2022-02-14 16:38:18,245 stack []
DEBUG 2022-02-14 16:38:18,245 dispatch pc=36, inst=LOAD_FAST(arg=3, lineno=220)
DEBUG 2022-02-14 16:38:18,245 stack ['$34load_global.14']
DEBUG 2022-02-14 16:38:18,245 dispatch pc=38, inst=CALL_FUNCTION(arg=1, lineno=220)
DEBUG 2022-02-14 16:38:18,245 stack ['$34load_global.14', '$nonzero_rows36.15']
DEBUG 2022-02-14 16:38:18,245 dispatch pc=40, inst=LOAD_CONST(arg=2, lineno=220)
DEBUG 2022-02-14 16:38:18,245 stack ['$38call_function.16']
DEBUG 2022-02-14 16:38:18,245 dispatch pc=42, inst=BINARY_FLOOR_DIVIDE(arg=None, lineno=220)
DEBUG 2022-02-14 16:38:18,245 stack ['$38call_function.16', '$const40.17']
DEBUG 2022-02-14 16:38:18,246 dispatch pc=44, inst=STORE_FAST(arg=4, lineno=220)
DEBUG 2022-02-14 16:38:18,246 stack ['$42binary_floor_divide.18']
DEBUG 2022-02-14 16:38:18,246 dispatch pc=46, inst=LOAD_FAST(arg=0, lineno=222)
DEBUG 2022-02-14 16:38:18,246 stack []
DEBUG 2022-02-14 16:38:18,246 dispatch pc=48, inst=LOAD_GLOBAL(arg=0, lineno=222)
DEBUG 2022-02-14 16:38:18,246 stack ['$kept_edges46.19']
DEBUG 2022-02-14 16:38:18,246 dispatch pc=50, inst=LOAD_METHOD(arg=2, lineno=222)
DEBUG 2022-02-14 16:38:18,246 stack ['$kept_edges46.19', '$48load_global.20']
DEBUG 2022-02-14 16:38:18,246 dispatch pc=52, inst=LOAD_FAST(arg=0, lineno=222)
DEBUG 2022-02-14 16:38:18,246 stack ['$kept_edges46.19', '$50load_method.21']
DEBUG 2022-02-14 16:38:18,246 dispatch pc=54, inst=LOAD_CONST(arg=1, lineno=222)
DEBUG 2022-02-14 16:38:18,246 stack ['$kept_edges46.19', '$50load_method.21', '$kept_edges52.22']
DEBUG 2022-02-14 16:38:18,246 dispatch pc=56, inst=COMPARE_OP(arg=3, lineno=222)
DEBUG 2022-02-14 16:38:18,246 stack ['$kept_edges46.19', '$50load_method.21', '$kept_edges52.22', '$const54.23']
DEBUG 2022-02-14 16:38:18,246 dispatch pc=58, inst=CALL_METHOD(arg=1, lineno=222)
DEBUG 2022-02-14 16:38:18,246 stack ['$kept_edges46.19', '$50load_method.21', '$56compare_op.24']
DEBUG 2022-02-14 16:38:18,246 dispatch pc=60, inst=BINARY_SUBSCR(arg=None, lineno=222)
DEBUG 2022-02-14 16:38:18,246 stack ['$kept_edges46.19', '$58call_method.25']
DEBUG 2022-02-14 16:38:18,246 dispatch pc=62, inst=STORE_FAST(arg=5, lineno=222)
DEBUG 2022-02-14 16:38:18,246 stack ['$60binary_subscr.26']
DEBUG 2022-02-14 16:38:18,246 dispatch pc=64, inst=LOAD_FAST(arg=1, lineno=223)
DEBUG 2022-02-14 16:38:18,246 stack []
DEBUG 2022-02-14 16:38:18,246 dispatch pc=66, inst=LOAD_FAST(arg=3, lineno=223)
DEBUG 2022-02-14 16:38:18,246 stack ['$oddV064.27']
DEBUG 2022-02-14 16:38:18,246 dispatch pc=68, inst=BINARY_SUBSCR(arg=None, lineno=223)
DEBUG 2022-02-14 16:38:18,247 stack ['$oddV064.27', '$nonzero_rows66.28']
DEBUG 2022-02-14 16:38:18,247 dispatch pc=70, inst=STORE_FAST(arg=6, lineno=223)
DEBUG 2022-02-14 16:38:18,247 stack ['$68binary_subscr.29']
DEBUG 2022-02-14 16:38:18,247 dispatch pc=72, inst=LOAD_GLOBAL(arg=0, lineno=224)
DEBUG 2022-02-14 16:38:18,247 stack []
DEBUG 2022-02-14 16:38:18,247 dispatch pc=74, inst=LOAD_ATTR(arg=4, lineno=224)
DEBUG 2022-02-14 16:38:18,247 stack ['$72load_global.30']
DEBUG 2022-02-14 16:38:18,247 dispatch pc=76, inst=LOAD_FAST(arg=6, lineno=224)
DEBUG 2022-02-14 16:38:18,247 stack ['$74load_attr.31']
DEBUG 2022-02-14 16:38:18,247 dispatch pc=78, inst=LOAD_GLOBAL(arg=0, lineno=224)
DEBUG 2022-02-14 16:38:18,247 stack ['$74load_attr.31', '$oddV_nonzero076.32']
DEBUG 2022-02-14 16:38:18,247 dispatch pc=80, inst=LOAD_ATTR(arg=5, lineno=224)
DEBUG 2022-02-14 16:38:18,247 stack ['$74load_attr.31', '$oddV_nonzero076.32', '$78load_global.33']
DEBUG 2022-02-14 16:38:18,247 dispatch pc=82, inst=LOAD_CONST(arg=3, lineno=224)
DEBUG 2022-02-14 16:38:18,247 stack ['$74load_attr.31', '$oddV_nonzero076.32', '$80load_attr.34']
DEBUG 2022-02-14 16:38:18,247 dispatch pc=84, inst=CALL_FUNCTION_KW(arg=2, lineno=224)
DEBUG 2022-02-14 16:38:18,247 stack ['$74load_attr.31', '$oddV_nonzero076.32', '$80load_attr.34', '$const82.35']
DEBUG 2022-02-14 16:38:18,247 dispatch pc=86, inst=STORE_FAST(arg=7, lineno=224)
DEBUG 2022-02-14 16:38:18,247 stack ['$84call_function_kw.36']
DEBUG 2022-02-14 16:38:18,247 dispatch pc=88, inst=LOAD_FAST(arg=5, lineno=225)
DEBUG 2022-02-14 16:38:18,247 stack []
DEBUG 2022-02-14 16:38:18,247 dispatch pc=90, inst=LOAD_FAST(arg=6, lineno=225)
DEBUG 2022-02-14 16:38:18,247 stack ['$kept_edges_nonzero88.37']
DEBUG 2022-02-14 16:38:18,247 dispatch pc=92, inst=LOAD_FAST(arg=4, lineno=225)
DEBUG 2022-02-14 16:38:18,247 stack ['$kept_edges_nonzero88.37', '$oddV_nonzero090.38']
DEBUG 2022-02-14 16:38:18,247 dispatch pc=94, inst=LOAD_CONST(arg=0, lineno=225)
DEBUG 2022-02-14 16:38:18,248 stack ['$kept_edges_nonzero88.37', '$oddV_nonzero090.38', '$n_nonzero_edges92.39']
DEBUG 2022-02-14 16:38:18,248 dispatch pc=96, inst=BUILD_SLICE(arg=2, lineno=225)
DEBUG 2022-02-14 16:38:18,248 stack ['$kept_edges_nonzero88.37', '$oddV_nonzero090.38', '$n_nonzero_edges92.39', '$const94.40']
DEBUG 2022-02-14 16:38:18,248 dispatch pc=98, inst=BINARY_SUBSCR(arg=None, lineno=225)
DEBUG 2022-02-14 16:38:18,248 stack ['$kept_edges_nonzero88.37', '$oddV_nonzero090.38', '$96build_slice.42']
DEBUG 2022-02-14 16:38:18,248 dispatch pc=100, inst=BINARY_MULTIPLY(arg=None, lineno=225)
DEBUG 2022-02-14 16:38:18,248 stack ['$kept_edges_nonzero88.37', '$98binary_subscr.43']
DEBUG 2022-02-14 16:38:18,248 dispatch pc=102, inst=LOAD_FAST(arg=7, lineno=225)
DEBUG 2022-02-14 16:38:18,248 stack ['$100binary_multiply.44']
DEBUG 2022-02-14 16:38:18,248 dispatch pc=104, inst=LOAD_CONST(arg=0, lineno=225)
DEBUG 2022-02-14 16:38:18,248 stack ['$100binary_multiply.44', '$oddVX_nonzero0102.45']
DEBUG 2022-02-14 16:38:18,248 dispatch pc=106, inst=LOAD_FAST(arg=4, lineno=225)
DEBUG 2022-02-14 16:38:18,248 stack ['$100binary_multiply.44', '$oddVX_nonzero0102.45', '$const104.46']
DEBUG 2022-02-14 16:38:18,248 dispatch pc=108, inst=BUILD_SLICE(arg=2, lineno=225)
DEBUG 2022-02-14 16:38:18,248 stack ['$100binary_multiply.44', '$oddVX_nonzero0102.45', '$const104.46', '$n_nonzero_edges106.47']
DEBUG 2022-02-14 16:38:18,248 dispatch pc=110, inst=STORE_SUBSCR(arg=None, lineno=225)
DEBUG 2022-02-14 16:38:18,248 stack ['$100binary_multiply.44', '$oddVX_nonzero0102.45', '$108build_slice.49']
DEBUG 2022-02-14 16:38:18,248 dispatch pc=112, inst=LOAD_FAST(arg=5, lineno=226)
DEBUG 2022-02-14 16:38:18,248 stack []
DEBUG 2022-02-14 16:38:18,248 dispatch pc=114, inst=LOAD_FAST(arg=6, lineno=226)
DEBUG 2022-02-14 16:38:18,248 stack ['$kept_edges_nonzero112.50']
DEBUG 2022-02-14 16:38:18,248 dispatch pc=116, inst=LOAD_CONST(arg=0, lineno=226)
DEBUG 2022-02-14 16:38:18,248 stack ['$kept_edges_nonzero112.50', '$oddV_nonzero0114.51']
DEBUG 2022-02-14 16:38:18,248 dispatch pc=118, inst=LOAD_FAST(arg=4, lineno=226)
DEBUG 2022-02-14 16:38:18,248 stack ['$kept_edges_nonzero112.50', '$oddV_nonzero0114.51', '$const116.52']
DEBUG 2022-02-14 16:38:18,248 dispatch pc=120, inst=BUILD_SLICE(arg=2, lineno=226)
DEBUG 2022-02-14 16:38:18,248 stack ['$kept_edges_nonzero112.50', '$oddV_nonzero0114.51', '$const116.52', '$n_nonzero_edges118.53']
DEBUG 2022-02-14 16:38:18,249 dispatch pc=122, inst=BINARY_SUBSCR(arg=None, lineno=226)
DEBUG 2022-02-14 16:38:18,249 stack ['$kept_edges_nonzero112.50', '$oddV_nonzero0114.51', '$120build_slice.55']
DEBUG 2022-02-14 16:38:18,249 dispatch pc=124, inst=BINARY_MULTIPLY(arg=None, lineno=226)
DEBUG 2022-02-14 16:38:18,249 stack ['$kept_edges_nonzero112.50', '$122binary_subscr.56']
DEBUG 2022-02-14 16:38:18,249 dispatch pc=126, inst=LOAD_FAST(arg=7, lineno=226)
DEBUG 2022-02-14 16:38:18,249 stack ['$124binary_multiply.57']
DEBUG 2022-02-14 16:38:18,249 dispatch pc=128, inst=LOAD_FAST(arg=4, lineno=226)
DEBUG 2022-02-14 16:38:18,249 stack ['$124binary_multiply.57', '$oddVX_nonzero0126.58']
DEBUG 2022-02-14 16:38:18,249 dispatch pc=130, inst=LOAD_CONST(arg=0, lineno=226)
DEBUG 2022-02-14 16:38:18,249 stack ['$124binary_multiply.57', '$oddVX_nonzero0126.58', '$n_nonzero_edges128.59']
DEBUG 2022-02-14 16:38:18,249 dispatch pc=132, inst=BUILD_SLICE(arg=2, lineno=226)
DEBUG 2022-02-14 16:38:18,249 stack ['$124binary_multiply.57', '$oddVX_nonzero0126.58', '$n_nonzero_edges128.59', '$const130.60']
DEBUG 2022-02-14 16:38:18,249 dispatch pc=134, inst=STORE_SUBSCR(arg=None, lineno=226)
DEBUG 2022-02-14 16:38:18,249 stack ['$124binary_multiply.57', '$oddVX_nonzero0126.58', '$132build_slice.62']
DEBUG 2022-02-14 16:38:18,249 dispatch pc=136, inst=LOAD_FAST(arg=7, lineno=228)
DEBUG 2022-02-14 16:38:18,249 stack []
DEBUG 2022-02-14 16:38:18,249 dispatch pc=138, inst=RETURN_VALUE(arg=None, lineno=228)
DEBUG 2022-02-14 16:38:18,249 stack ['$oddVX_nonzero0136.63']
DEBUG 2022-02-14 16:38:18,249 end state. edges=[]
DEBUG 2022-02-14 16:38:18,249 -------------------------Prune PHIs-------------------------
DEBUG 2022-02-14 16:38:18,249 Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
DEBUG 2022-02-14 16:38:18,249 defmap: {}
DEBUG 2022-02-14 16:38:18,249 phismap: defaultdict(<class 'set'>, {})
DEBUG 2022-02-14 16:38:18,249 changing phismap: defaultdict(<class 'set'>, {})
DEBUG 2022-02-14 16:38:18,250 keep phismap: {}
DEBUG 2022-02-14 16:38:18,250 new_out: defaultdict(<class 'dict'>, {})
DEBUG 2022-02-14 16:38:18,250 ----------------------DONE Prune PHIs-----------------------
DEBUG 2022-02-14 16:38:18,250 block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$2load_global.0'}), (4, {'item': '$2load_global.0', 'res': '$4load_method.1'}), (6, {'res': '$kept_edges6.2'}), (8, {'res': '$kept_edges8.3'}), (10, {'items': ['$kept_edges6.2', '$kept_edges8.3'], 'res': '$10build_tuple.4'}), (12, {'func': '$4load_method.1', 'args': ['$10build_tuple.4'], 'res': '$12call_method.5'}), (14, {'value': '$12call_method.5'}), (16, {'res': '$16load_global.6'}), (18, {'item': '$16load_global.6', 'res': '$18load_method.7'}), (20, {'res': '$z20.8'}), (22, {'res': '$const22.9'}), (24, {'lhs': '$z20.8', 'rhs': '$const22.9', 'res': '$24compare_op.10'}), (26, {'func': '$18load_method.7', 'args': ['$24compare_op.10'], 'res': '$26call_method.11'}), (28, {'res': '$const28.12'}), (30, {'index': '$const28.12', 'target': '$26call_method.11', 'res': '$30binary_subscr.13'}), (32, {'value': '$30binary_subscr.13'}), (34, {'res': '$34load_global.14'}), (36, {'res': '$nonzero_rows36.15'}), (38, {'func': '$34load_global.14', 'args': ['$nonzero_rows36.15'], 'res': '$38call_function.16'}), (40, {'res': '$const40.17'}), (42, {'lhs': '$38call_function.16', 'rhs': '$const40.17', 'res': '$42binary_floor_divide.18'}), (44, {'value': '$42binary_floor_divide.18'}), (46, {'res': '$kept_edges46.19'}), (48, {'res': '$48load_global.20'}), (50, {'item': '$48load_global.20', 'res': '$50load_method.21'}), (52, {'res': '$kept_edges52.22'}), (54, {'res': '$const54.23'}), (56, {'lhs': '$kept_edges52.22', 'rhs': '$const54.23', 'res': '$56compare_op.24'}), (58, {'func': '$50load_method.21', 'args': ['$56compare_op.24'], 'res': '$58call_method.25'}), (60, {'index': '$58call_method.25', 'target': '$kept_edges46.19', 'res': '$60binary_subscr.26'}), (62, {'value': '$60binary_subscr.26'}), (64, {'res': '$oddV064.27'}), (66, {'res': '$nonzero_rows66.28'}), (68, {'index': '$nonzero_rows66.28', 'target': '$oddV064.27', 'res': '$68binary_subscr.29'}), (70, {'value': '$68binary_subscr.29'}), (72, {'res': '$72load_global.30'}), (74, {'item': '$72load_global.30', 'res': '$74load_attr.31'}), (76, {'res': '$oddV_nonzero076.32'}), (78, {'res': '$78load_global.33'}), (80, {'item': '$78load_global.33', 'res': '$80load_attr.34'}), (82, {'res': '$const82.35'}), (84, {'func': '$74load_attr.31', 'args': ['$oddV_nonzero076.32', '$80load_attr.34'], 'names': '$const82.35', 'res': '$84call_function_kw.36'}), (86, {'value': '$84call_function_kw.36'}), (88, {'res': '$kept_edges_nonzero88.37'}), (90, {'res': '$oddV_nonzero090.38'}), (92, {'res': '$n_nonzero_edges92.39'}), (94, {'res': '$const94.40'}), (96, {'start': '$n_nonzero_edges92.39', 'stop': '$const94.40', 'step': None, 'res': '$96build_slice.42', 'slicevar': '$96build_slice.41'}), (98, {'index': '$96build_slice.42', 'target': '$oddV_nonzero090.38', 'res': '$98binary_subscr.43'}), (100, {'lhs': '$kept_edges_nonzero88.37', 'rhs': '$98binary_subscr.43', 'res': '$100binary_multiply.44'}), (102, {'res': '$oddVX_nonzero0102.45'}), (104, {'res': '$const104.46'}), (106, {'res': '$n_nonzero_edges106.47'}), (108, {'start': '$const104.46', 'stop': '$n_nonzero_edges106.47', 'step': None, 'res': '$108build_slice.49', 'slicevar': '$108build_slice.48'}), (110, {'target': '$oddVX_nonzero0102.45', 'index': '$108build_slice.49', 'value': '$100binary_multiply.44'}), (112, {'res': '$kept_edges_nonzero112.50'}), (114, {'res': '$oddV_nonzero0114.51'}), (116, {'res': '$const116.52'}), (118, {'res': '$n_nonzero_edges118.53'}), (120, {'start': '$const116.52', 'stop': '$n_nonzero_edges118.53', 'step': None, 'res': '$120build_slice.55', 'slicevar': '$120build_slice.54'}), (122, {'index': '$120build_slice.55', 'target': '$oddV_nonzero0114.51', 'res': '$122binary_subscr.56'}), (124, {'lhs': '$kept_edges_nonzero112.50', 'rhs': '$122binary_subscr.56', 'res': '$124binary_multiply.57'}), (126, {'res': '$oddVX_nonzero0126.58'}), (128, {'res': '$n_nonzero_edges128.59'}), (130, {'res': '$const130.60'}), (132, {'start': '$n_nonzero_edges128.59', 'stop': '$const130.60', 'step': None, 'res': '$132build_slice.62', 'slicevar': '$132build_slice.61'}), (134, {'target': '$oddVX_nonzero0126.58', 'index': '$132build_slice.62', 'value': '$124binary_multiply.57'}), (136, {'res': '$oddVX_nonzero0136.63'}), (138, {'retval': '$oddVX_nonzero0136.63', 'castval': '$138return_value.64'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG 2022-02-14 16:38:18,251 label 0:
    kept_edges = arg(0, name=kept_edges)     ['kept_edges']
    oddV0 = arg(1, name=oddV0)               ['oddV0']
    $2load_global.0 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>) ['$2load_global.0']
    $4load_method.1 = getattr(value=$2load_global.0, attr=concatenate) ['$2load_global.0', '$4load_method.1']
    $10build_tuple.4 = build_tuple(items=[Var(kept_edges, _loop_hafnian_subroutines.py:218), Var(kept_edges, _loop_hafnian_subroutines.py:218)]) ['$10build_tuple.4', 'kept_edges', 'kept_edges']
    z = call $4load_method.1($10build_tuple.4, func=$4load_method.1, args=[Var($10build_tuple.4, _loop_hafnian_subroutines.py:218)], kws=(), vararg=None, target=None) ['$10build_tuple.4', '$4load_method.1', 'z']
    $16load_global.6 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>) ['$16load_global.6']
    $18load_method.7 = getattr(value=$16load_global.6, attr=where) ['$16load_global.6', '$18load_method.7']
    $const22.9 = const(int, 0)               ['$const22.9']
    $24compare_op.10 = z != $const22.9       ['$24compare_op.10', '$const22.9', 'z']
    $26call_method.11 = call $18load_method.7($24compare_op.10, func=$18load_method.7, args=[Var($24compare_op.10, _loop_hafnian_subroutines.py:219)], kws=(), vararg=None, target=None) ['$18load_method.7', '$24compare_op.10', '$26call_method.11']
    $const28.12 = const(int, 0)              ['$const28.12']
    nonzero_rows = getitem(value=$26call_method.11, index=$const28.12, fn=<built-in function getitem>) ['$26call_method.11', '$const28.12', 'nonzero_rows']
    $34load_global.14 = global(len: <built-in function len>) ['$34load_global.14']
    $38call_function.16 = call $34load_global.14(nonzero_rows, func=$34load_global.14, args=[Var(nonzero_rows, _loop_hafnian_subroutines.py:219)], kws=(), vararg=None, target=None) ['$34load_global.14', '$38call_function.16', 'nonzero_rows']
    $const40.17 = const(int, 2)              ['$const40.17']
    n_nonzero_edges = $38call_function.16 // $const40.17 ['$38call_function.16', '$const40.17', 'n_nonzero_edges']
    $48load_global.20 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>) ['$48load_global.20']
    $50load_method.21 = getattr(value=$48load_global.20, attr=where) ['$48load_global.20', '$50load_method.21']
    $const54.23 = const(int, 0)              ['$const54.23']
    $56compare_op.24 = kept_edges != $const54.23 ['$56compare_op.24', '$const54.23', 'kept_edges']
    $58call_method.25 = call $50load_method.21($56compare_op.24, func=$50load_method.21, args=[Var($56compare_op.24, _loop_hafnian_subroutines.py:222)], kws=(), vararg=None, target=None) ['$50load_method.21', '$56compare_op.24', '$58call_method.25']
    kept_edges_nonzero = getitem(value=kept_edges, index=$58call_method.25, fn=<built-in function getitem>) ['$58call_method.25', 'kept_edges', 'kept_edges_nonzero']
    oddV_nonzero0 = getitem(value=oddV0, index=nonzero_rows, fn=<built-in function getitem>) ['nonzero_rows', 'oddV0', 'oddV_nonzero0']
    $72load_global.30 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>) ['$72load_global.30']
    $74load_attr.31 = getattr(value=$72load_global.30, attr=empty_like) ['$72load_global.30', '$74load_attr.31']
    $78load_global.33 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>) ['$78load_global.33']
    $80load_attr.34 = getattr(value=$78load_global.33, attr=complex128) ['$78load_global.33', '$80load_attr.34']
    oddVX_nonzero0 = call $74load_attr.31(oddV_nonzero0, func=$74load_attr.31, args=[Var(oddV_nonzero0, _loop_hafnian_subroutines.py:223)], kws=[('dtype', Var($80load_attr.34, _loop_hafnian_subroutines.py:224))], vararg=None, target=None) ['$74load_attr.31', '$80load_attr.34', 'oddVX_nonzero0', 'oddV_nonzero0']
    $const94.40 = const(NoneType, None)      ['$const94.40']
    $96build_slice.41 = global(slice: <class 'slice'>) ['$96build_slice.41']
    $96build_slice.42 = call $96build_slice.41(n_nonzero_edges, $const94.40, func=$96build_slice.41, args=(Var(n_nonzero_edges, _loop_hafnian_subroutines.py:220), Var($const94.40, _loop_hafnian_subroutines.py:225)), kws=(), vararg=None, target=None) ['$96build_slice.41', '$96build_slice.42', '$const94.40', 'n_nonzero_edges']
    $98binary_subscr.43 = getitem(value=oddV_nonzero0, index=$96build_slice.42, fn=<built-in function getitem>) ['$96build_slice.42', '$98binary_subscr.43', 'oddV_nonzero0']
    $100binary_multiply.44 = kept_edges_nonzero * $98binary_subscr.43 ['$100binary_multiply.44', '$98binary_subscr.43', 'kept_edges_nonzero']
    $const104.46 = const(NoneType, None)     ['$const104.46']
    $108build_slice.48 = global(slice: <class 'slice'>) ['$108build_slice.48']
    $108build_slice.49 = call $108build_slice.48($const104.46, n_nonzero_edges, func=$108build_slice.48, args=(Var($const104.46, _loop_hafnian_subroutines.py:225), Var(n_nonzero_edges, _loop_hafnian_subroutines.py:220)), kws=(), vararg=None, target=None) ['$108build_slice.48', '$108build_slice.49', '$const104.46', 'n_nonzero_edges']
    oddVX_nonzero0[$108build_slice.49] = $100binary_multiply.44 ['$100binary_multiply.44', '$108build_slice.49', 'oddVX_nonzero0']
    $const116.52 = const(NoneType, None)     ['$const116.52']
    $120build_slice.54 = global(slice: <class 'slice'>) ['$120build_slice.54']
    $120build_slice.55 = call $120build_slice.54($const116.52, n_nonzero_edges, func=$120build_slice.54, args=(Var($const116.52, _loop_hafnian_subroutines.py:226), Var(n_nonzero_edges, _loop_hafnian_subroutines.py:220)), kws=(), vararg=None, target=None) ['$120build_slice.54', '$120build_slice.55', '$const116.52', 'n_nonzero_edges']
    $122binary_subscr.56 = getitem(value=oddV_nonzero0, index=$120build_slice.55, fn=<built-in function getitem>) ['$120build_slice.55', '$122binary_subscr.56', 'oddV_nonzero0']
    $124binary_multiply.57 = kept_edges_nonzero * $122binary_subscr.56 ['$122binary_subscr.56', '$124binary_multiply.57', 'kept_edges_nonzero']
    $const130.60 = const(NoneType, None)     ['$const130.60']
    $132build_slice.61 = global(slice: <class 'slice'>) ['$132build_slice.61']
    $132build_slice.62 = call $132build_slice.61(n_nonzero_edges, $const130.60, func=$132build_slice.61, args=(Var(n_nonzero_edges, _loop_hafnian_subroutines.py:220), Var($const130.60, _loop_hafnian_subroutines.py:226)), kws=(), vararg=None, target=None) ['$132build_slice.61', '$132build_slice.62', '$const130.60', 'n_nonzero_edges']
    oddVX_nonzero0[$132build_slice.62] = $124binary_multiply.57 ['$124binary_multiply.57', '$132build_slice.62', 'oddVX_nonzero0']
    $138return_value.64 = cast(value=oddVX_nonzero0) ['$138return_value.64', 'oddVX_nonzero0']
    return $138return_value.64               ['$138return_value.64']

DEBUG 2022-02-14 16:38:18,256 ==== SSA block analysis pass on 0
DEBUG 2022-02-14 16:38:18,256 Running <numba.core.ssa._GatherDefsHandler object at 0x7fa045de00d0>
DEBUG 2022-02-14 16:38:18,256 on stmt: kept_edges = arg(0, name=kept_edges)
DEBUG 2022-02-14 16:38:18,256 on stmt: oddV0 = arg(1, name=oddV0)
DEBUG 2022-02-14 16:38:18,256 on stmt: $2load_global.0 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:38:18,256 on stmt: $4load_method.1 = getattr(value=$2load_global.0, attr=concatenate)
DEBUG 2022-02-14 16:38:18,256 on stmt: $10build_tuple.4 = build_tuple(items=[Var(kept_edges, _loop_hafnian_subroutines.py:218), Var(kept_edges, _loop_hafnian_subroutines.py:218)])
DEBUG 2022-02-14 16:38:18,256 on stmt: z = call $4load_method.1($10build_tuple.4, func=$4load_method.1, args=[Var($10build_tuple.4, _loop_hafnian_subroutines.py:218)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:18,257 on stmt: $16load_global.6 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:38:18,257 on stmt: $18load_method.7 = getattr(value=$16load_global.6, attr=where)
DEBUG 2022-02-14 16:38:18,257 on stmt: $const22.9 = const(int, 0)
DEBUG 2022-02-14 16:38:18,257 on stmt: $24compare_op.10 = z != $const22.9
DEBUG 2022-02-14 16:38:18,257 on stmt: $26call_method.11 = call $18load_method.7($24compare_op.10, func=$18load_method.7, args=[Var($24compare_op.10, _loop_hafnian_subroutines.py:219)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:18,257 on stmt: $const28.12 = const(int, 0)
DEBUG 2022-02-14 16:38:18,257 on stmt: nonzero_rows = static_getitem(value=$26call_method.11, index=0, index_var=$const28.12, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:18,257 on stmt: $34load_global.14 = global(len: <built-in function len>)
DEBUG 2022-02-14 16:38:18,257 on stmt: $38call_function.16 = call $34load_global.14(nonzero_rows, func=$34load_global.14, args=[Var(nonzero_rows, _loop_hafnian_subroutines.py:219)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:18,257 on stmt: $const40.17 = const(int, 2)
DEBUG 2022-02-14 16:38:18,257 on stmt: n_nonzero_edges = $38call_function.16 // $const40.17
DEBUG 2022-02-14 16:38:18,257 on stmt: $48load_global.20 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:38:18,258 on stmt: $50load_method.21 = getattr(value=$48load_global.20, attr=where)
DEBUG 2022-02-14 16:38:18,258 on stmt: $const54.23 = const(int, 0)
DEBUG 2022-02-14 16:38:18,258 on stmt: $56compare_op.24 = kept_edges != $const54.23
DEBUG 2022-02-14 16:38:18,258 on stmt: $58call_method.25 = call $50load_method.21($56compare_op.24, func=$50load_method.21, args=[Var($56compare_op.24, _loop_hafnian_subroutines.py:222)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:18,258 on stmt: kept_edges_nonzero = getitem(value=kept_edges, index=$58call_method.25, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:18,258 on stmt: oddV_nonzero0 = getitem(value=oddV0, index=nonzero_rows, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:18,258 on stmt: $72load_global.30 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:38:18,258 on stmt: $74load_attr.31 = getattr(value=$72load_global.30, attr=empty_like)
DEBUG 2022-02-14 16:38:18,258 on stmt: $78load_global.33 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:38:18,258 on stmt: $80load_attr.34 = getattr(value=$78load_global.33, attr=complex128)
DEBUG 2022-02-14 16:38:18,258 on stmt: oddVX_nonzero0 = call $74load_attr.31(oddV_nonzero0, func=$74load_attr.31, args=[Var(oddV_nonzero0, _loop_hafnian_subroutines.py:223)], kws=[('dtype', Var($80load_attr.34, _loop_hafnian_subroutines.py:224))], vararg=None, target=None)
DEBUG 2022-02-14 16:38:18,258 on stmt: $const94.40 = const(NoneType, None)
DEBUG 2022-02-14 16:38:18,258 on stmt: $96build_slice.41 = global(slice: <class 'slice'>)
DEBUG 2022-02-14 16:38:18,258 on stmt: $96build_slice.42 = call $96build_slice.41(n_nonzero_edges, $const94.40, func=$96build_slice.41, args=(Var(n_nonzero_edges, _loop_hafnian_subroutines.py:220), Var($const94.40, _loop_hafnian_subroutines.py:225)), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:18,258 on stmt: $98binary_subscr.43 = getitem(value=oddV_nonzero0, index=$96build_slice.42, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:18,258 on stmt: $100binary_multiply.44 = kept_edges_nonzero * $98binary_subscr.43
DEBUG 2022-02-14 16:38:18,258 on stmt: $const104.46 = const(NoneType, None)
DEBUG 2022-02-14 16:38:18,258 on stmt: $108build_slice.48 = global(slice: <class 'slice'>)
DEBUG 2022-02-14 16:38:18,258 on stmt: $108build_slice.49 = call $108build_slice.48($const104.46, n_nonzero_edges, func=$108build_slice.48, args=(Var($const104.46, _loop_hafnian_subroutines.py:225), Var(n_nonzero_edges, _loop_hafnian_subroutines.py:220)), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:18,258 on stmt: oddVX_nonzero0[$108build_slice.49] = $100binary_multiply.44
DEBUG 2022-02-14 16:38:18,258 on stmt: $const116.52 = const(NoneType, None)
DEBUG 2022-02-14 16:38:18,259 on stmt: $120build_slice.54 = global(slice: <class 'slice'>)
DEBUG 2022-02-14 16:38:18,259 on stmt: $120build_slice.55 = call $120build_slice.54($const116.52, n_nonzero_edges, func=$120build_slice.54, args=(Var($const116.52, _loop_hafnian_subroutines.py:226), Var(n_nonzero_edges, _loop_hafnian_subroutines.py:220)), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:18,259 on stmt: $122binary_subscr.56 = getitem(value=oddV_nonzero0, index=$120build_slice.55, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:18,259 on stmt: $124binary_multiply.57 = kept_edges_nonzero * $122binary_subscr.56
DEBUG 2022-02-14 16:38:18,259 on stmt: $const130.60 = const(NoneType, None)
DEBUG 2022-02-14 16:38:18,259 on stmt: $132build_slice.61 = global(slice: <class 'slice'>)
DEBUG 2022-02-14 16:38:18,259 on stmt: $132build_slice.62 = call $132build_slice.61(n_nonzero_edges, $const130.60, func=$132build_slice.61, args=(Var(n_nonzero_edges, _loop_hafnian_subroutines.py:220), Var($const130.60, _loop_hafnian_subroutines.py:226)), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:18,259 on stmt: oddVX_nonzero0[$132build_slice.62] = $124binary_multiply.57
DEBUG 2022-02-14 16:38:18,259 on stmt: $138return_value.64 = cast(value=oddVX_nonzero0)
DEBUG 2022-02-14 16:38:18,259 on stmt: return $138return_value.64
DEBUG 2022-02-14 16:38:18,259 defs defaultdict(<class 'list'>,
            {'$100binary_multiply.44': [<numba.core.ir.Assign object at 0x7fa045839ee0>],
             '$108build_slice.48': [<numba.core.ir.Assign object at 0x7fa045de08b0>],
             '$108build_slice.49': [<numba.core.ir.Assign object at 0x7fa045de0580>],
             '$10build_tuple.4': [<numba.core.ir.Assign object at 0x7fa045854700>],
             '$120build_slice.54': [<numba.core.ir.Assign object at 0x7fa045de6460>],
             '$120build_slice.55': [<numba.core.ir.Assign object at 0x7fa045de60d0>],
             '$122binary_subscr.56': [<numba.core.ir.Assign object at 0x7fa045de6af0>],
             '$124binary_multiply.57': [<numba.core.ir.Assign object at 0x7fa045de69a0>],
             '$132build_slice.61': [<numba.core.ir.Assign object at 0x7fa041eebd30>],
             '$132build_slice.62': [<numba.core.ir.Assign object at 0x7fa041eebe50>],
             '$138return_value.64': [<numba.core.ir.Assign object at 0x7fa041eee1f0>],
             '$16load_global.6': [<numba.core.ir.Assign object at 0x7fa045dee3a0>],
             '$18load_method.7': [<numba.core.ir.Assign object at 0x7fa045dee7c0>],
             '$24compare_op.10': [<numba.core.ir.Assign object at 0x7fa045deed00>],
             '$26call_method.11': [<numba.core.ir.Assign object at 0x7fa045deeac0>],
             '$2load_global.0': [<numba.core.ir.Assign object at 0x7fa045839e20>],
             '$34load_global.14': [<numba.core.ir.Assign object at 0x7fa045deeeb0>],
             '$38call_function.16': [<numba.core.ir.Assign object at 0x7fa045df39d0>],
             '$48load_global.20': [<numba.core.ir.Assign object at 0x7fa045df3ca0>],
             '$4load_method.1': [<numba.core.ir.Assign object at 0x7fa045854340>],
             '$50load_method.21': [<numba.core.ir.Assign object at 0x7fa045df30d0>],
             '$56compare_op.24': [<numba.core.ir.Assign object at 0x7fa045dea130>],
             '$58call_method.25': [<numba.core.ir.Assign object at 0x7fa045dea6a0>],
             '$72load_global.30': [<numba.core.ir.Assign object at 0x7fa045dea820>],
             '$74load_attr.31': [<numba.core.ir.Assign object at 0x7fa045dea940>],
             '$78load_global.33': [<numba.core.ir.Assign object at 0x7fa045ddf4f0>],
             '$80load_attr.34': [<numba.core.ir.Assign object at 0x7fa045ddf040>],
             '$96build_slice.41': [<numba.core.ir.Assign object at 0x7fa045ddf0d0>],
             '$96build_slice.42': [<numba.core.ir.Assign object at 0x7fa045ddfa60>],
             '$98binary_subscr.43': [<numba.core.ir.Assign object at 0x7fa045de6cd0>],
             '$const104.46': [<numba.core.ir.Assign object at 0x7fa045de0a30>],
             '$const116.52': [<numba.core.ir.Assign object at 0x7fa045de66a0>],
             '$const130.60': [<numba.core.ir.Assign object at 0x7fa041eebbb0>],
             '$const22.9': [<numba.core.ir.Assign object at 0x7fa045deef40>],
             '$const28.12': [<numba.core.ir.Assign object at 0x7fa045deec70>],
             '$const40.17': [<numba.core.ir.Assign object at 0x7fa045df34c0>],
             '$const54.23': [<numba.core.ir.Assign object at 0x7fa045df3d60>],
             '$const94.40': [<numba.core.ir.Assign object at 0x7fa045ddf910>],
             'kept_edges': [<numba.core.ir.Assign object at 0x7fa045de0130>],
             'kept_edges_nonzero': [<numba.core.ir.Assign object at 0x7fa045deac40>],
             'n_nonzero_edges': [<numba.core.ir.Assign object at 0x7fa045df3610>],
             'nonzero_rows': [<numba.core.ir.Assign object at 0x7fa045de6910>],
             'oddV0': [<numba.core.ir.Assign object at 0x7fa045dd3f10>],
             'oddVX_nonzero0': [<numba.core.ir.Assign object at 0x7fa045ddfa90>],
             'oddV_nonzero0': [<numba.core.ir.Assign object at 0x7fa045dea040>],
             'z': [<numba.core.ir.Assign object at 0x7fa0458543a0>]})
DEBUG 2022-02-14 16:38:18,259 SSA violators set()
DEBUG 2022-02-14 16:38:18,283 bytecode dump:
>          0	NOP(arg=None, lineno=218)
           2	LOAD_FAST(arg=0, lineno=218)
           4	LOAD_CONST(arg=1, lineno=1)
           6	COMPARE_OP(arg=3, lineno=1)
           8	RETURN_VALUE(arg=None, lineno=1)
DEBUG 2022-02-14 16:38:18,283 pending: deque([State(pc_initial=0 nstack_initial=0)])
DEBUG 2022-02-14 16:38:18,283 stack: []
DEBUG 2022-02-14 16:38:18,284 dispatch pc=0, inst=NOP(arg=None, lineno=218)
DEBUG 2022-02-14 16:38:18,284 stack []
DEBUG 2022-02-14 16:38:18,284 dispatch pc=2, inst=LOAD_FAST(arg=0, lineno=218)
DEBUG 2022-02-14 16:38:18,284 stack []
DEBUG 2022-02-14 16:38:18,284 dispatch pc=4, inst=LOAD_CONST(arg=1, lineno=1)
DEBUG 2022-02-14 16:38:18,284 stack ['$z_12.0']
DEBUG 2022-02-14 16:38:18,284 dispatch pc=6, inst=COMPARE_OP(arg=3, lineno=1)
DEBUG 2022-02-14 16:38:18,284 stack ['$z_12.0', '$const4.1']
DEBUG 2022-02-14 16:38:18,284 dispatch pc=8, inst=RETURN_VALUE(arg=None, lineno=1)
DEBUG 2022-02-14 16:38:18,284 stack ['$6compare_op.2']
DEBUG 2022-02-14 16:38:18,284 end state. edges=[]
DEBUG 2022-02-14 16:38:18,284 -------------------------Prune PHIs-------------------------
DEBUG 2022-02-14 16:38:18,284 Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
DEBUG 2022-02-14 16:38:18,284 defmap: {}
DEBUG 2022-02-14 16:38:18,284 phismap: defaultdict(<class 'set'>, {})
DEBUG 2022-02-14 16:38:18,284 changing phismap: defaultdict(<class 'set'>, {})
DEBUG 2022-02-14 16:38:18,284 keep phismap: {}
DEBUG 2022-02-14 16:38:18,284 new_out: defaultdict(<class 'dict'>, {})
DEBUG 2022-02-14 16:38:18,284 ----------------------DONE Prune PHIs-----------------------
DEBUG 2022-02-14 16:38:18,284 block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$z_12.0'}), (4, {'res': '$const4.1'}), (6, {'lhs': '$z_12.0', 'rhs': '$const4.1', 'res': '$6compare_op.2'}), (8, {'retval': '$6compare_op.2', 'castval': '$8return_value.3'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG 2022-02-14 16:38:18,285 label 0:
    z_1 = arg(0, name=z_1)                   ['z_1']
    $const4.1 = const(int, 0)                ['$const4.1']
    $6compare_op.2 = z_1 != $const4.1        ['$6compare_op.2', '$const4.1', 'z_1']
    $8return_value.3 = cast(value=$6compare_op.2) ['$6compare_op.2', '$8return_value.3']
    return $8return_value.3                  ['$8return_value.3']

DEBUG 2022-02-14 16:38:18,286 ==== SSA block analysis pass on 0
DEBUG 2022-02-14 16:38:18,286 Running <numba.core.ssa._GatherDefsHandler object at 0x7fa041e84970>
DEBUG 2022-02-14 16:38:18,286 on stmt: z_1 = arg(0, name=z_1)
DEBUG 2022-02-14 16:38:18,286 on stmt: $const4.1 = const(int, 0)
DEBUG 2022-02-14 16:38:18,286 on stmt: $6compare_op.2 = z_1 != $const4.1
DEBUG 2022-02-14 16:38:18,286 on stmt: $8return_value.3 = cast(value=$6compare_op.2)
DEBUG 2022-02-14 16:38:18,286 on stmt: return $8return_value.3
DEBUG 2022-02-14 16:38:18,286 defs defaultdict(<class 'list'>,
            {'$6compare_op.2': [<numba.core.ir.Assign object at 0x7fa041e8a460>],
             '$8return_value.3': [<numba.core.ir.Assign object at 0x7fa041e8a5b0>],
             '$const4.1': [<numba.core.ir.Assign object at 0x7fa041e8a2b0>],
             'z_1': [<numba.core.ir.Assign object at 0x7fa041e841f0>]})
DEBUG 2022-02-14 16:38:18,286 SSA violators set()
DEBUG 2022-02-14 16:38:18,303 bytecode dump:
>          0	NOP(arg=None, lineno=218)
           2	LOAD_FAST(arg=0, lineno=218)
           4	LOAD_CONST(arg=1, lineno=1)
           6	COMPARE_OP(arg=3, lineno=1)
           8	RETURN_VALUE(arg=None, lineno=1)
DEBUG 2022-02-14 16:38:18,303 pending: deque([State(pc_initial=0 nstack_initial=0)])
DEBUG 2022-02-14 16:38:18,303 stack: []
DEBUG 2022-02-14 16:38:18,303 dispatch pc=0, inst=NOP(arg=None, lineno=218)
DEBUG 2022-02-14 16:38:18,304 stack []
DEBUG 2022-02-14 16:38:18,304 dispatch pc=2, inst=LOAD_FAST(arg=0, lineno=218)
DEBUG 2022-02-14 16:38:18,304 stack []
DEBUG 2022-02-14 16:38:18,304 dispatch pc=4, inst=LOAD_CONST(arg=1, lineno=1)
DEBUG 2022-02-14 16:38:18,304 stack ['$kept_edges_12.0']
DEBUG 2022-02-14 16:38:18,304 dispatch pc=6, inst=COMPARE_OP(arg=3, lineno=1)
DEBUG 2022-02-14 16:38:18,304 stack ['$kept_edges_12.0', '$const4.1']
DEBUG 2022-02-14 16:38:18,304 dispatch pc=8, inst=RETURN_VALUE(arg=None, lineno=1)
DEBUG 2022-02-14 16:38:18,304 stack ['$6compare_op.2']
DEBUG 2022-02-14 16:38:18,304 end state. edges=[]
DEBUG 2022-02-14 16:38:18,304 -------------------------Prune PHIs-------------------------
DEBUG 2022-02-14 16:38:18,304 Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
DEBUG 2022-02-14 16:38:18,304 defmap: {}
DEBUG 2022-02-14 16:38:18,304 phismap: defaultdict(<class 'set'>, {})
DEBUG 2022-02-14 16:38:18,304 changing phismap: defaultdict(<class 'set'>, {})
DEBUG 2022-02-14 16:38:18,304 keep phismap: {}
DEBUG 2022-02-14 16:38:18,304 new_out: defaultdict(<class 'dict'>, {})
DEBUG 2022-02-14 16:38:18,304 ----------------------DONE Prune PHIs-----------------------
DEBUG 2022-02-14 16:38:18,304 block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$kept_edges_12.0'}), (4, {'res': '$const4.1'}), (6, {'lhs': '$kept_edges_12.0', 'rhs': '$const4.1', 'res': '$6compare_op.2'}), (8, {'retval': '$6compare_op.2', 'castval': '$8return_value.3'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG 2022-02-14 16:38:18,305 label 0:
    kept_edges_1 = arg(0, name=kept_edges_1) ['kept_edges_1']
    $const4.1 = const(int, 0)                ['$const4.1']
    $6compare_op.2 = kept_edges_1 != $const4.1 ['$6compare_op.2', '$const4.1', 'kept_edges_1']
    $8return_value.3 = cast(value=$6compare_op.2) ['$6compare_op.2', '$8return_value.3']
    return $8return_value.3                  ['$8return_value.3']

DEBUG 2022-02-14 16:38:18,306 ==== SSA block analysis pass on 0
DEBUG 2022-02-14 16:38:18,306 Running <numba.core.ssa._GatherDefsHandler object at 0x7fa041e42af0>
DEBUG 2022-02-14 16:38:18,306 on stmt: kept_edges_1 = arg(0, name=kept_edges_1)
DEBUG 2022-02-14 16:38:18,306 on stmt: $const4.1 = const(int, 0)
DEBUG 2022-02-14 16:38:18,306 on stmt: $6compare_op.2 = kept_edges_1 != $const4.1
DEBUG 2022-02-14 16:38:18,306 on stmt: $8return_value.3 = cast(value=$6compare_op.2)
DEBUG 2022-02-14 16:38:18,306 on stmt: return $8return_value.3
DEBUG 2022-02-14 16:38:18,306 defs defaultdict(<class 'list'>,
            {'$6compare_op.2': [<numba.core.ir.Assign object at 0x7fa041e485e0>],
             '$8return_value.3': [<numba.core.ir.Assign object at 0x7fa041e48730>],
             '$const4.1': [<numba.core.ir.Assign object at 0x7fa041e48430>],
             'kept_edges_1': [<numba.core.ir.Assign object at 0x7fa041e421f0>]})
DEBUG 2022-02-14 16:38:18,306 SSA violators set()
DEBUG 2022-02-14 16:38:18,332 bytecode dump:
>          0	NOP(arg=None, lineno=222)
           2	LOAD_FAST(arg=1, lineno=222)
           4	LOAD_FAST(arg=0, lineno=225)
           6	BINARY_MULTIPLY(arg=None, lineno=1)
           8	RETURN_VALUE(arg=None, lineno=1)
DEBUG 2022-02-14 16:38:18,332 pending: deque([State(pc_initial=0 nstack_initial=0)])
DEBUG 2022-02-14 16:38:18,332 stack: []
DEBUG 2022-02-14 16:38:18,332 dispatch pc=0, inst=NOP(arg=None, lineno=222)
DEBUG 2022-02-14 16:38:18,332 stack []
DEBUG 2022-02-14 16:38:18,332 dispatch pc=2, inst=LOAD_FAST(arg=1, lineno=222)
DEBUG 2022-02-14 16:38:18,332 stack []
DEBUG 2022-02-14 16:38:18,332 dispatch pc=4, inst=LOAD_FAST(arg=0, lineno=225)
DEBUG 2022-02-14 16:38:18,332 stack ['$kept_edges_nonzero_12.0']
DEBUG 2022-02-14 16:38:18,332 dispatch pc=6, inst=BINARY_MULTIPLY(arg=None, lineno=1)
DEBUG 2022-02-14 16:38:18,332 stack ['$kept_edges_nonzero_12.0', '$_98binary_subscr_43_14.1']
DEBUG 2022-02-14 16:38:18,332 dispatch pc=8, inst=RETURN_VALUE(arg=None, lineno=1)
DEBUG 2022-02-14 16:38:18,332 stack ['$6binary_multiply.2']
DEBUG 2022-02-14 16:38:18,332 end state. edges=[]
DEBUG 2022-02-14 16:38:18,332 -------------------------Prune PHIs-------------------------
DEBUG 2022-02-14 16:38:18,333 Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
DEBUG 2022-02-14 16:38:18,333 defmap: {}
DEBUG 2022-02-14 16:38:18,333 phismap: defaultdict(<class 'set'>, {})
DEBUG 2022-02-14 16:38:18,333 changing phismap: defaultdict(<class 'set'>, {})
DEBUG 2022-02-14 16:38:18,333 keep phismap: {}
DEBUG 2022-02-14 16:38:18,333 new_out: defaultdict(<class 'dict'>, {})
DEBUG 2022-02-14 16:38:18,333 ----------------------DONE Prune PHIs-----------------------
DEBUG 2022-02-14 16:38:18,333 block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$kept_edges_nonzero_12.0'}), (4, {'res': '$_98binary_subscr_43_14.1'}), (6, {'lhs': '$kept_edges_nonzero_12.0', 'rhs': '$_98binary_subscr_43_14.1', 'res': '$6binary_multiply.2'}), (8, {'retval': '$6binary_multiply.2', 'castval': '$8return_value.3'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG 2022-02-14 16:38:18,333 label 0:
    _98binary_subscr_43_1 = arg(0, name=_98binary_subscr_43_1) ['_98binary_subscr_43_1']
    kept_edges_nonzero_1 = arg(1, name=kept_edges_nonzero_1) ['kept_edges_nonzero_1']
    $6binary_multiply.2 = kept_edges_nonzero_1 * _98binary_subscr_43_1 ['$6binary_multiply.2', '_98binary_subscr_43_1', 'kept_edges_nonzero_1']
    $8return_value.3 = cast(value=$6binary_multiply.2) ['$6binary_multiply.2', '$8return_value.3']
    return $8return_value.3                  ['$8return_value.3']

DEBUG 2022-02-14 16:38:18,334 ==== SSA block analysis pass on 0
DEBUG 2022-02-14 16:38:18,334 Running <numba.core.ssa._GatherDefsHandler object at 0x7fa041dcb2e0>
DEBUG 2022-02-14 16:38:18,334 on stmt: _98binary_subscr_43_1 = arg(0, name=_98binary_subscr_43_1)
DEBUG 2022-02-14 16:38:18,334 on stmt: kept_edges_nonzero_1 = arg(1, name=kept_edges_nonzero_1)
DEBUG 2022-02-14 16:38:18,334 on stmt: $6binary_multiply.2 = kept_edges_nonzero_1 * _98binary_subscr_43_1
DEBUG 2022-02-14 16:38:18,335 on stmt: $8return_value.3 = cast(value=$6binary_multiply.2)
DEBUG 2022-02-14 16:38:18,335 on stmt: return $8return_value.3
DEBUG 2022-02-14 16:38:18,335 defs defaultdict(<class 'list'>,
            {'$6binary_multiply.2': [<numba.core.ir.Assign object at 0x7fa041dcf040>],
             '$8return_value.3': [<numba.core.ir.Assign object at 0x7fa041dcf190>],
             '_98binary_subscr_43_1': [<numba.core.ir.Assign object at 0x7fa041dcb130>],
             'kept_edges_nonzero_1': [<numba.core.ir.Assign object at 0x7fa041dcb310>]})
DEBUG 2022-02-14 16:38:18,335 SSA violators set()
DEBUG 2022-02-14 16:38:18,361 bytecode dump:
>          0	NOP(arg=None, lineno=222)
           2	LOAD_FAST(arg=1, lineno=222)
           4	LOAD_FAST(arg=0, lineno=226)
           6	BINARY_MULTIPLY(arg=None, lineno=1)
           8	RETURN_VALUE(arg=None, lineno=1)
DEBUG 2022-02-14 16:38:18,361 pending: deque([State(pc_initial=0 nstack_initial=0)])
DEBUG 2022-02-14 16:38:18,361 stack: []
DEBUG 2022-02-14 16:38:18,362 dispatch pc=0, inst=NOP(arg=None, lineno=222)
DEBUG 2022-02-14 16:38:18,362 stack []
DEBUG 2022-02-14 16:38:18,362 dispatch pc=2, inst=LOAD_FAST(arg=1, lineno=222)
DEBUG 2022-02-14 16:38:18,362 stack []
DEBUG 2022-02-14 16:38:18,362 dispatch pc=4, inst=LOAD_FAST(arg=0, lineno=226)
DEBUG 2022-02-14 16:38:18,362 stack ['$kept_edges_nonzero_22.0']
DEBUG 2022-02-14 16:38:18,362 dispatch pc=6, inst=BINARY_MULTIPLY(arg=None, lineno=1)
DEBUG 2022-02-14 16:38:18,362 stack ['$kept_edges_nonzero_22.0', '$_122binary_subscr_56_14.1']
DEBUG 2022-02-14 16:38:18,362 dispatch pc=8, inst=RETURN_VALUE(arg=None, lineno=1)
DEBUG 2022-02-14 16:38:18,362 stack ['$6binary_multiply.2']
DEBUG 2022-02-14 16:38:18,362 end state. edges=[]
DEBUG 2022-02-14 16:38:18,362 -------------------------Prune PHIs-------------------------
DEBUG 2022-02-14 16:38:18,362 Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
DEBUG 2022-02-14 16:38:18,362 defmap: {}
DEBUG 2022-02-14 16:38:18,362 phismap: defaultdict(<class 'set'>, {})
DEBUG 2022-02-14 16:38:18,362 changing phismap: defaultdict(<class 'set'>, {})
DEBUG 2022-02-14 16:38:18,362 keep phismap: {}
DEBUG 2022-02-14 16:38:18,362 new_out: defaultdict(<class 'dict'>, {})
DEBUG 2022-02-14 16:38:18,362 ----------------------DONE Prune PHIs-----------------------
DEBUG 2022-02-14 16:38:18,362 block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$kept_edges_nonzero_22.0'}), (4, {'res': '$_122binary_subscr_56_14.1'}), (6, {'lhs': '$kept_edges_nonzero_22.0', 'rhs': '$_122binary_subscr_56_14.1', 'res': '$6binary_multiply.2'}), (8, {'retval': '$6binary_multiply.2', 'castval': '$8return_value.3'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG 2022-02-14 16:38:18,363 label 0:
    _122binary_subscr_56_1 = arg(0, name=_122binary_subscr_56_1) ['_122binary_subscr_56_1']
    kept_edges_nonzero_2 = arg(1, name=kept_edges_nonzero_2) ['kept_edges_nonzero_2']
    $6binary_multiply.2 = kept_edges_nonzero_2 * _122binary_subscr_56_1 ['$6binary_multiply.2', '_122binary_subscr_56_1', 'kept_edges_nonzero_2']
    $8return_value.3 = cast(value=$6binary_multiply.2) ['$6binary_multiply.2', '$8return_value.3']
    return $8return_value.3                  ['$8return_value.3']

DEBUG 2022-02-14 16:38:18,364 ==== SSA block analysis pass on 0
DEBUG 2022-02-14 16:38:18,364 Running <numba.core.ssa._GatherDefsHandler object at 0x7fa041d76a00>
DEBUG 2022-02-14 16:38:18,364 on stmt: _122binary_subscr_56_1 = arg(0, name=_122binary_subscr_56_1)
DEBUG 2022-02-14 16:38:18,364 on stmt: kept_edges_nonzero_2 = arg(1, name=kept_edges_nonzero_2)
DEBUG 2022-02-14 16:38:18,364 on stmt: $6binary_multiply.2 = kept_edges_nonzero_2 * _122binary_subscr_56_1
DEBUG 2022-02-14 16:38:18,364 on stmt: $8return_value.3 = cast(value=$6binary_multiply.2)
DEBUG 2022-02-14 16:38:18,364 on stmt: return $8return_value.3
DEBUG 2022-02-14 16:38:18,364 defs defaultdict(<class 'list'>,
            {'$6binary_multiply.2': [<numba.core.ir.Assign object at 0x7fa041d7cb80>],
             '$8return_value.3': [<numba.core.ir.Assign object at 0x7fa041d7ccd0>],
             '_122binary_subscr_56_1': [<numba.core.ir.Assign object at 0x7fa041d7c1f0>],
             'kept_edges_nonzero_2': [<numba.core.ir.Assign object at 0x7fa041d7c0d0>]})
DEBUG 2022-02-14 16:38:18,364 SSA violators set()
DEBUG 2022-02-14 16:38:18,953 bytecode dump:
>          0	NOP(arg=None, lineno=159)
           2	LOAD_FAST(arg=0, lineno=159)
           4	LOAD_METHOD(arg=0, lineno=159)
           6	CALL_METHOD(arg=0, lineno=159)
           8	STORE_FAST(arg=7, lineno=159)
          10	LOAD_CONST(arg=1, lineno=161)
          12	STORE_FAST(arg=8, lineno=161)
          14	LOAD_GLOBAL(arg=1, lineno=162)
          16	LOAD_ATTR(arg=2, lineno=162)
          18	LOAD_CONST(arg=2, lineno=162)
          20	LOAD_FAST(arg=4, lineno=162)
          22	LOAD_CONST(arg=3, lineno=162)
          24	BINARY_ADD(arg=None, lineno=162)
          26	BUILD_TUPLE(arg=2, lineno=162)
          28	LOAD_GLOBAL(arg=1, lineno=162)
          30	LOAD_ATTR(arg=3, lineno=162)
          32	LOAD_CONST(arg=4, lineno=162)
          34	CALL_FUNCTION_KW(arg=2, lineno=162)
          36	STORE_FAST(arg=9, lineno=162)
          38	LOAD_CONST(arg=3, lineno=163)
          40	LOAD_FAST(arg=9, lineno=163)
          42	LOAD_CONST(arg=5, lineno=163)
          44	STORE_SUBSCR(arg=None, lineno=163)
          46	LOAD_GLOBAL(arg=4, lineno=164)
          48	LOAD_CONST(arg=3, lineno=164)
          50	LOAD_FAST(arg=4, lineno=164)
          52	LOAD_CONST(arg=3, lineno=164)
          54	BINARY_ADD(arg=None, lineno=164)
          56	CALL_FUNCTION(arg=2, lineno=164)
          58	GET_ITER(arg=None, lineno=164)
>         60	FOR_ITER(arg=240, lineno=164)
          62	STORE_FAST(arg=10, lineno=164)
          64	LOAD_FAST(arg=10, lineno=165)
          66	LOAD_CONST(arg=3, lineno=165)
          68	COMPARE_OP(arg=2, lineno=165)
          70	POP_JUMP_IF_FALSE(arg=78, lineno=165)
          72	LOAD_FAST(arg=5, lineno=166)
          74	STORE_FAST(arg=11, lineno=166)
          76	JUMP_FORWARD(arg=62, lineno=166)
>         78	LOAD_FAST(arg=10, lineno=167)
          80	LOAD_CONST(arg=2, lineno=167)
          82	BINARY_MODULO(arg=None, lineno=167)
          84	LOAD_CONST(arg=1, lineno=167)
          86	COMPARE_OP(arg=2, lineno=167)
          88	POP_JUMP_IF_FALSE(arg=124, lineno=167)
          90	LOAD_FAST(arg=7, lineno=168)
          92	LOAD_METHOD(arg=5, lineno=168)
          94	CALL_METHOD(arg=0, lineno=168)
          96	LOAD_FAST(arg=10, lineno=168)
          98	BINARY_TRUE_DIVIDE(arg=None, lineno=168)
         100	LOAD_FAST(arg=2, lineno=168)
         102	LOAD_FAST(arg=3, lineno=168)
         104	BINARY_MATRIX_MULTIPLY(arg=None, lineno=168)
         106	LOAD_CONST(arg=2, lineno=168)
         108	BINARY_TRUE_DIVIDE(arg=None, lineno=168)
         110	BINARY_ADD(arg=None, lineno=168)
         112	STORE_FAST(arg=11, lineno=168)
         114	LOAD_FAST(arg=7, lineno=169)
         116	LOAD_FAST(arg=0, lineno=169)
         118	INPLACE_MULTIPLY(arg=None, lineno=169)
         120	STORE_FAST(arg=7, lineno=169)
         122	JUMP_FORWARD(arg=16, lineno=169)
>        124	LOAD_FAST(arg=6, lineno=171)
         126	LOAD_FAST(arg=3, lineno=171)
         128	BINARY_MATRIX_MULTIPLY(arg=None, lineno=171)
         130	STORE_FAST(arg=11, lineno=171)
         132	LOAD_FAST(arg=1, lineno=172)
         134	LOAD_FAST(arg=3, lineno=172)
         136	BINARY_MATRIX_MULTIPLY(arg=None, lineno=172)
         138	STORE_FAST(arg=3, lineno=172)
>        140	LOAD_CONST(arg=3, lineno=174)
         142	STORE_FAST(arg=12, lineno=174)
         144	LOAD_CONST(arg=3, lineno=175)
         146	LOAD_FAST(arg=8, lineno=175)
         148	BINARY_SUBTRACT(arg=None, lineno=175)
         150	STORE_FAST(arg=8, lineno=175)
         152	LOAD_FAST(arg=9, lineno=176)
         154	LOAD_CONST(arg=3, lineno=176)
         156	LOAD_FAST(arg=8, lineno=176)
         158	BINARY_SUBTRACT(arg=None, lineno=176)
         160	LOAD_CONST(arg=0, lineno=176)
         162	LOAD_CONST(arg=0, lineno=176)
         164	BUILD_SLICE(arg=2, lineno=176)
         166	BUILD_TUPLE(arg=2, lineno=176)
         168	BINARY_SUBSCR(arg=None, lineno=176)
         170	LOAD_FAST(arg=9, lineno=176)
         172	LOAD_FAST(arg=8, lineno=176)
         174	LOAD_CONST(arg=0, lineno=176)
         176	LOAD_CONST(arg=0, lineno=176)
         178	BUILD_SLICE(arg=2, lineno=176)
         180	BUILD_TUPLE(arg=2, lineno=176)
         182	STORE_SUBSCR(arg=None, lineno=176)
         184	LOAD_GLOBAL(arg=4, lineno=177)
         186	LOAD_CONST(arg=3, lineno=177)
         188	LOAD_FAST(arg=4, lineno=177)
         190	LOAD_FAST(arg=10, lineno=177)
         192	BINARY_FLOOR_DIVIDE(arg=None, lineno=177)
         194	LOAD_CONST(arg=3, lineno=177)
         196	BINARY_ADD(arg=None, lineno=177)
         198	CALL_FUNCTION(arg=2, lineno=177)
         200	GET_ITER(arg=None, lineno=177)
>        202	FOR_ITER(arg=96, lineno=177)
         204	STORE_FAST(arg=13, lineno=177)
         206	LOAD_FAST(arg=12, lineno=178)
         208	LOAD_FAST(arg=11, lineno=178)
         210	LOAD_FAST(arg=13, lineno=178)
         212	BINARY_TRUE_DIVIDE(arg=None, lineno=178)
         214	INPLACE_MULTIPLY(arg=None, lineno=178)
         216	STORE_FAST(arg=12, lineno=178)
         218	LOAD_GLOBAL(arg=4, lineno=179)
         220	LOAD_FAST(arg=10, lineno=179)
         222	LOAD_FAST(arg=13, lineno=179)
         224	BINARY_MULTIPLY(arg=None, lineno=179)
         226	LOAD_CONST(arg=3, lineno=179)
         228	BINARY_ADD(arg=None, lineno=179)
         230	LOAD_FAST(arg=4, lineno=179)
         232	LOAD_CONST(arg=2, lineno=179)
         234	BINARY_ADD(arg=None, lineno=179)
         236	CALL_FUNCTION(arg=2, lineno=179)
         238	GET_ITER(arg=None, lineno=179)
>        240	FOR_ITER(arg=56, lineno=179)
         242	STORE_FAST(arg=14, lineno=179)
         244	LOAD_FAST(arg=9, lineno=180)
         246	LOAD_FAST(arg=8, lineno=180)
         248	LOAD_FAST(arg=14, lineno=180)
         250	LOAD_CONST(arg=3, lineno=180)
         252	BINARY_SUBTRACT(arg=None, lineno=180)
         254	BUILD_TUPLE(arg=2, lineno=180)
         256	DUP_TOP_TWO(arg=None, lineno=180)
         258	BINARY_SUBSCR(arg=None, lineno=180)
         260	LOAD_FAST(arg=9, lineno=180)
         262	LOAD_CONST(arg=3, lineno=180)
         264	LOAD_FAST(arg=8, lineno=180)
         266	BINARY_SUBTRACT(arg=None, lineno=180)
         268	LOAD_FAST(arg=14, lineno=180)
         270	LOAD_FAST(arg=10, lineno=180)
         272	LOAD_FAST(arg=13, lineno=180)
         274	BINARY_MULTIPLY(arg=None, lineno=180)
         276	BINARY_SUBTRACT(arg=None, lineno=180)
         278	LOAD_CONST(arg=3, lineno=180)
         280	BINARY_SUBTRACT(arg=None, lineno=180)
         282	BUILD_TUPLE(arg=2, lineno=180)
         284	BINARY_SUBSCR(arg=None, lineno=180)
         286	LOAD_FAST(arg=12, lineno=180)
         288	BINARY_MULTIPLY(arg=None, lineno=180)
         290	INPLACE_ADD(arg=None, lineno=180)
         292	ROT_THREE(arg=None, lineno=180)
         294	STORE_SUBSCR(arg=None, lineno=180)
         296	JUMP_ABSOLUTE(arg=240, lineno=180)
>        298	JUMP_ABSOLUTE(arg=202, lineno=180)
>        300	JUMP_ABSOLUTE(arg=60, lineno=180)
>        302	LOAD_FAST(arg=9, lineno=182)
         304	LOAD_FAST(arg=8, lineno=182)
         306	LOAD_CONST(arg=0, lineno=182)
         308	LOAD_CONST(arg=0, lineno=182)
         310	BUILD_SLICE(arg=2, lineno=182)
         312	BUILD_TUPLE(arg=2, lineno=182)
         314	BINARY_SUBSCR(arg=None, lineno=182)
         316	RETURN_VALUE(arg=None, lineno=182)
DEBUG 2022-02-14 16:38:18,953 pending: deque([State(pc_initial=0 nstack_initial=0)])
DEBUG 2022-02-14 16:38:18,953 stack: []
DEBUG 2022-02-14 16:38:18,953 dispatch pc=0, inst=NOP(arg=None, lineno=159)
DEBUG 2022-02-14 16:38:18,953 stack []
DEBUG 2022-02-14 16:38:18,953 dispatch pc=2, inst=LOAD_FAST(arg=0, lineno=159)
DEBUG 2022-02-14 16:38:18,953 stack []
DEBUG 2022-02-14 16:38:18,953 dispatch pc=4, inst=LOAD_METHOD(arg=0, lineno=159)
DEBUG 2022-02-14 16:38:18,953 stack ['$E2.0']
DEBUG 2022-02-14 16:38:18,953 dispatch pc=6, inst=CALL_METHOD(arg=0, lineno=159)
DEBUG 2022-02-14 16:38:18,953 stack ['$4load_method.1']
DEBUG 2022-02-14 16:38:18,953 dispatch pc=8, inst=STORE_FAST(arg=7, lineno=159)
DEBUG 2022-02-14 16:38:18,953 stack ['$6call_method.2']
DEBUG 2022-02-14 16:38:18,953 dispatch pc=10, inst=LOAD_CONST(arg=1, lineno=161)
DEBUG 2022-02-14 16:38:18,953 stack []
DEBUG 2022-02-14 16:38:18,954 dispatch pc=12, inst=STORE_FAST(arg=8, lineno=161)
DEBUG 2022-02-14 16:38:18,954 stack ['$const10.3']
DEBUG 2022-02-14 16:38:18,954 dispatch pc=14, inst=LOAD_GLOBAL(arg=1, lineno=162)
DEBUG 2022-02-14 16:38:18,954 stack []
DEBUG 2022-02-14 16:38:18,954 dispatch pc=16, inst=LOAD_ATTR(arg=2, lineno=162)
DEBUG 2022-02-14 16:38:18,954 stack ['$14load_global.4']
DEBUG 2022-02-14 16:38:18,954 dispatch pc=18, inst=LOAD_CONST(arg=2, lineno=162)
DEBUG 2022-02-14 16:38:18,954 stack ['$16load_attr.5']
DEBUG 2022-02-14 16:38:18,954 dispatch pc=20, inst=LOAD_FAST(arg=4, lineno=162)
DEBUG 2022-02-14 16:38:18,954 stack ['$16load_attr.5', '$const18.6']
DEBUG 2022-02-14 16:38:18,954 dispatch pc=22, inst=LOAD_CONST(arg=3, lineno=162)
DEBUG 2022-02-14 16:38:18,954 stack ['$16load_attr.5', '$const18.6', '$n20.7']
DEBUG 2022-02-14 16:38:18,954 dispatch pc=24, inst=BINARY_ADD(arg=None, lineno=162)
DEBUG 2022-02-14 16:38:18,954 stack ['$16load_attr.5', '$const18.6', '$n20.7', '$const22.8']
DEBUG 2022-02-14 16:38:18,954 dispatch pc=26, inst=BUILD_TUPLE(arg=2, lineno=162)
DEBUG 2022-02-14 16:38:18,954 stack ['$16load_attr.5', '$const18.6', '$24binary_add.9']
DEBUG 2022-02-14 16:38:18,954 dispatch pc=28, inst=LOAD_GLOBAL(arg=1, lineno=162)
DEBUG 2022-02-14 16:38:18,954 stack ['$16load_attr.5', '$26build_tuple.10']
DEBUG 2022-02-14 16:38:18,954 dispatch pc=30, inst=LOAD_ATTR(arg=3, lineno=162)
DEBUG 2022-02-14 16:38:18,954 stack ['$16load_attr.5', '$26build_tuple.10', '$28load_global.11']
DEBUG 2022-02-14 16:38:18,954 dispatch pc=32, inst=LOAD_CONST(arg=4, lineno=162)
DEBUG 2022-02-14 16:38:18,954 stack ['$16load_attr.5', '$26build_tuple.10', '$30load_attr.12']
DEBUG 2022-02-14 16:38:18,954 dispatch pc=34, inst=CALL_FUNCTION_KW(arg=2, lineno=162)
DEBUG 2022-02-14 16:38:18,954 stack ['$16load_attr.5', '$26build_tuple.10', '$30load_attr.12', '$const32.13']
DEBUG 2022-02-14 16:38:18,955 dispatch pc=36, inst=STORE_FAST(arg=9, lineno=162)
DEBUG 2022-02-14 16:38:18,955 stack ['$34call_function_kw.14']
DEBUG 2022-02-14 16:38:18,955 dispatch pc=38, inst=LOAD_CONST(arg=3, lineno=163)
DEBUG 2022-02-14 16:38:18,955 stack []
DEBUG 2022-02-14 16:38:18,955 dispatch pc=40, inst=LOAD_FAST(arg=9, lineno=163)
DEBUG 2022-02-14 16:38:18,955 stack ['$const38.15']
DEBUG 2022-02-14 16:38:18,955 dispatch pc=42, inst=LOAD_CONST(arg=5, lineno=163)
DEBUG 2022-02-14 16:38:18,955 stack ['$const38.15', '$comb40.16']
DEBUG 2022-02-14 16:38:18,955 dispatch pc=44, inst=STORE_SUBSCR(arg=None, lineno=163)
DEBUG 2022-02-14 16:38:18,955 stack ['$const38.15', '$comb40.16', '$const42.17']
DEBUG 2022-02-14 16:38:18,955 dispatch pc=46, inst=LOAD_GLOBAL(arg=4, lineno=164)
DEBUG 2022-02-14 16:38:18,955 stack []
DEBUG 2022-02-14 16:38:18,955 dispatch pc=48, inst=LOAD_CONST(arg=3, lineno=164)
DEBUG 2022-02-14 16:38:18,955 stack ['$46load_global.18']
DEBUG 2022-02-14 16:38:18,955 dispatch pc=50, inst=LOAD_FAST(arg=4, lineno=164)
DEBUG 2022-02-14 16:38:18,955 stack ['$46load_global.18', '$const48.19']
DEBUG 2022-02-14 16:38:18,955 dispatch pc=52, inst=LOAD_CONST(arg=3, lineno=164)
DEBUG 2022-02-14 16:38:18,955 stack ['$46load_global.18', '$const48.19', '$n50.20']
DEBUG 2022-02-14 16:38:18,955 dispatch pc=54, inst=BINARY_ADD(arg=None, lineno=164)
DEBUG 2022-02-14 16:38:18,955 stack ['$46load_global.18', '$const48.19', '$n50.20', '$const52.21']
DEBUG 2022-02-14 16:38:18,955 dispatch pc=56, inst=CALL_FUNCTION(arg=2, lineno=164)
DEBUG 2022-02-14 16:38:18,955 stack ['$46load_global.18', '$const48.19', '$54binary_add.22']
DEBUG 2022-02-14 16:38:18,955 dispatch pc=58, inst=GET_ITER(arg=None, lineno=164)
DEBUG 2022-02-14 16:38:18,955 stack ['$56call_function.23']
DEBUG 2022-02-14 16:38:18,956 end state. edges=[Edge(pc=60, stack=('$58get_iter.24',), blockstack=(), npush=0)]
DEBUG 2022-02-14 16:38:18,956 pending: deque([State(pc_initial=60 nstack_initial=1)])
DEBUG 2022-02-14 16:38:18,956 stack: ['$phi60.0']
DEBUG 2022-02-14 16:38:18,956 dispatch pc=60, inst=FOR_ITER(arg=240, lineno=164)
DEBUG 2022-02-14 16:38:18,956 stack ['$phi60.0']
DEBUG 2022-02-14 16:38:18,956 end state. edges=[Edge(pc=302, stack=(), blockstack=(), npush=0), Edge(pc=62, stack=('$phi60.0', '$60for_iter.2'), blockstack=(), npush=0)]
DEBUG 2022-02-14 16:38:18,956 pending: deque([State(pc_initial=302 nstack_initial=0), State(pc_initial=62 nstack_initial=2)])
DEBUG 2022-02-14 16:38:18,956 stack: []
DEBUG 2022-02-14 16:38:18,956 dispatch pc=302, inst=LOAD_FAST(arg=9, lineno=182)
DEBUG 2022-02-14 16:38:18,956 stack []
DEBUG 2022-02-14 16:38:18,956 dispatch pc=304, inst=LOAD_FAST(arg=8, lineno=182)
DEBUG 2022-02-14 16:38:18,956 stack ['$comb302.0']
DEBUG 2022-02-14 16:38:18,956 dispatch pc=306, inst=LOAD_CONST(arg=0, lineno=182)
DEBUG 2022-02-14 16:38:18,956 stack ['$comb302.0', '$count304.1']
DEBUG 2022-02-14 16:38:18,956 dispatch pc=308, inst=LOAD_CONST(arg=0, lineno=182)
DEBUG 2022-02-14 16:38:18,956 stack ['$comb302.0', '$count304.1', '$const306.2']
DEBUG 2022-02-14 16:38:18,956 dispatch pc=310, inst=BUILD_SLICE(arg=2, lineno=182)
DEBUG 2022-02-14 16:38:18,956 stack ['$comb302.0', '$count304.1', '$const306.2', '$const308.3']
DEBUG 2022-02-14 16:38:18,956 dispatch pc=312, inst=BUILD_TUPLE(arg=2, lineno=182)
DEBUG 2022-02-14 16:38:18,956 stack ['$comb302.0', '$count304.1', '$310build_slice.5']
DEBUG 2022-02-14 16:38:18,956 dispatch pc=314, inst=BINARY_SUBSCR(arg=None, lineno=182)
DEBUG 2022-02-14 16:38:18,956 stack ['$comb302.0', '$312build_tuple.6']
DEBUG 2022-02-14 16:38:18,956 dispatch pc=316, inst=RETURN_VALUE(arg=None, lineno=182)
DEBUG 2022-02-14 16:38:18,956 stack ['$314binary_subscr.7']
DEBUG 2022-02-14 16:38:18,956 end state. edges=[]
DEBUG 2022-02-14 16:38:18,957 pending: deque([State(pc_initial=62 nstack_initial=2)])
DEBUG 2022-02-14 16:38:18,957 stack: ['$phi62.0', '$phi62.1']
DEBUG 2022-02-14 16:38:18,957 dispatch pc=62, inst=STORE_FAST(arg=10, lineno=164)
DEBUG 2022-02-14 16:38:18,957 stack ['$phi62.0', '$phi62.1']
DEBUG 2022-02-14 16:38:18,957 dispatch pc=64, inst=LOAD_FAST(arg=10, lineno=165)
DEBUG 2022-02-14 16:38:18,957 stack ['$phi62.0']
DEBUG 2022-02-14 16:38:18,957 dispatch pc=66, inst=LOAD_CONST(arg=3, lineno=165)
DEBUG 2022-02-14 16:38:18,957 stack ['$phi62.0', '$i64.2']
DEBUG 2022-02-14 16:38:18,957 dispatch pc=68, inst=COMPARE_OP(arg=2, lineno=165)
DEBUG 2022-02-14 16:38:18,957 stack ['$phi62.0', '$i64.2', '$const66.3']
DEBUG 2022-02-14 16:38:18,957 dispatch pc=70, inst=POP_JUMP_IF_FALSE(arg=78, lineno=165)
DEBUG 2022-02-14 16:38:18,957 stack ['$phi62.0', '$68compare_op.4']
DEBUG 2022-02-14 16:38:18,957 end state. edges=[Edge(pc=72, stack=('$phi62.0',), blockstack=(), npush=0), Edge(pc=78, stack=('$phi62.0',), blockstack=(), npush=0)]
DEBUG 2022-02-14 16:38:18,957 pending: deque([State(pc_initial=72 nstack_initial=1), State(pc_initial=78 nstack_initial=1)])
DEBUG 2022-02-14 16:38:18,957 stack: ['$phi72.0']
DEBUG 2022-02-14 16:38:18,957 dispatch pc=72, inst=LOAD_FAST(arg=5, lineno=166)
DEBUG 2022-02-14 16:38:18,957 stack ['$phi72.0']
DEBUG 2022-02-14 16:38:18,957 dispatch pc=74, inst=STORE_FAST(arg=11, lineno=166)
DEBUG 2022-02-14 16:38:18,957 stack ['$phi72.0', '$oddloop72.1']
DEBUG 2022-02-14 16:38:18,957 dispatch pc=76, inst=JUMP_FORWARD(arg=62, lineno=166)
DEBUG 2022-02-14 16:38:18,957 stack ['$phi72.0']
DEBUG 2022-02-14 16:38:18,957 end state. edges=[Edge(pc=140, stack=('$phi72.0',), blockstack=(), npush=0)]
DEBUG 2022-02-14 16:38:18,957 pending: deque([State(pc_initial=78 nstack_initial=1), State(pc_initial=140 nstack_initial=1)])
DEBUG 2022-02-14 16:38:18,957 stack: ['$phi78.0']
DEBUG 2022-02-14 16:38:18,957 dispatch pc=78, inst=LOAD_FAST(arg=10, lineno=167)
DEBUG 2022-02-14 16:38:18,957 stack ['$phi78.0']
DEBUG 2022-02-14 16:38:18,958 dispatch pc=80, inst=LOAD_CONST(arg=2, lineno=167)
DEBUG 2022-02-14 16:38:18,958 stack ['$phi78.0', '$i78.1']
DEBUG 2022-02-14 16:38:18,958 dispatch pc=82, inst=BINARY_MODULO(arg=None, lineno=167)
DEBUG 2022-02-14 16:38:18,958 stack ['$phi78.0', '$i78.1', '$const80.2']
DEBUG 2022-02-14 16:38:18,958 dispatch pc=84, inst=LOAD_CONST(arg=1, lineno=167)
DEBUG 2022-02-14 16:38:18,958 stack ['$phi78.0', '$82binary_modulo.3']
DEBUG 2022-02-14 16:38:18,958 dispatch pc=86, inst=COMPARE_OP(arg=2, lineno=167)
DEBUG 2022-02-14 16:38:18,958 stack ['$phi78.0', '$82binary_modulo.3', '$const84.4']
DEBUG 2022-02-14 16:38:18,958 dispatch pc=88, inst=POP_JUMP_IF_FALSE(arg=124, lineno=167)
DEBUG 2022-02-14 16:38:18,958 stack ['$phi78.0', '$86compare_op.5']
DEBUG 2022-02-14 16:38:18,958 end state. edges=[Edge(pc=90, stack=('$phi78.0',), blockstack=(), npush=0), Edge(pc=124, stack=('$phi78.0',), blockstack=(), npush=0)]
DEBUG 2022-02-14 16:38:18,958 pending: deque([State(pc_initial=140 nstack_initial=1), State(pc_initial=90 nstack_initial=1), State(pc_initial=124 nstack_initial=1)])
DEBUG 2022-02-14 16:38:18,958 stack: ['$phi140.0']
DEBUG 2022-02-14 16:38:18,958 dispatch pc=140, inst=LOAD_CONST(arg=3, lineno=174)
DEBUG 2022-02-14 16:38:18,958 stack ['$phi140.0']
DEBUG 2022-02-14 16:38:18,958 dispatch pc=142, inst=STORE_FAST(arg=12, lineno=174)
DEBUG 2022-02-14 16:38:18,958 stack ['$phi140.0', '$const140.1']
DEBUG 2022-02-14 16:38:18,958 dispatch pc=144, inst=LOAD_CONST(arg=3, lineno=175)
DEBUG 2022-02-14 16:38:18,958 stack ['$phi140.0']
DEBUG 2022-02-14 16:38:18,958 dispatch pc=146, inst=LOAD_FAST(arg=8, lineno=175)
DEBUG 2022-02-14 16:38:18,958 stack ['$phi140.0', '$const144.2']
DEBUG 2022-02-14 16:38:18,958 dispatch pc=148, inst=BINARY_SUBTRACT(arg=None, lineno=175)
DEBUG 2022-02-14 16:38:18,958 stack ['$phi140.0', '$const144.2', '$count146.3']
DEBUG 2022-02-14 16:38:18,958 dispatch pc=150, inst=STORE_FAST(arg=8, lineno=175)
DEBUG 2022-02-14 16:38:18,958 stack ['$phi140.0', '$148binary_subtract.4']
DEBUG 2022-02-14 16:38:18,959 dispatch pc=152, inst=LOAD_FAST(arg=9, lineno=176)
DEBUG 2022-02-14 16:38:18,959 stack ['$phi140.0']
DEBUG 2022-02-14 16:38:18,959 dispatch pc=154, inst=LOAD_CONST(arg=3, lineno=176)
DEBUG 2022-02-14 16:38:18,959 stack ['$phi140.0', '$comb152.5']
DEBUG 2022-02-14 16:38:18,959 dispatch pc=156, inst=LOAD_FAST(arg=8, lineno=176)
DEBUG 2022-02-14 16:38:18,959 stack ['$phi140.0', '$comb152.5', '$const154.6']
DEBUG 2022-02-14 16:38:18,959 dispatch pc=158, inst=BINARY_SUBTRACT(arg=None, lineno=176)
DEBUG 2022-02-14 16:38:18,959 stack ['$phi140.0', '$comb152.5', '$const154.6', '$count156.7']
DEBUG 2022-02-14 16:38:18,959 dispatch pc=160, inst=LOAD_CONST(arg=0, lineno=176)
DEBUG 2022-02-14 16:38:18,959 stack ['$phi140.0', '$comb152.5', '$158binary_subtract.8']
DEBUG 2022-02-14 16:38:18,959 dispatch pc=162, inst=LOAD_CONST(arg=0, lineno=176)
DEBUG 2022-02-14 16:38:18,959 stack ['$phi140.0', '$comb152.5', '$158binary_subtract.8', '$const160.9']
DEBUG 2022-02-14 16:38:18,959 dispatch pc=164, inst=BUILD_SLICE(arg=2, lineno=176)
DEBUG 2022-02-14 16:38:18,959 stack ['$phi140.0', '$comb152.5', '$158binary_subtract.8', '$const160.9', '$const162.10']
DEBUG 2022-02-14 16:38:18,959 dispatch pc=166, inst=BUILD_TUPLE(arg=2, lineno=176)
DEBUG 2022-02-14 16:38:18,959 stack ['$phi140.0', '$comb152.5', '$158binary_subtract.8', '$164build_slice.12']
DEBUG 2022-02-14 16:38:18,959 dispatch pc=168, inst=BINARY_SUBSCR(arg=None, lineno=176)
DEBUG 2022-02-14 16:38:18,959 stack ['$phi140.0', '$comb152.5', '$166build_tuple.13']
DEBUG 2022-02-14 16:38:18,959 dispatch pc=170, inst=LOAD_FAST(arg=9, lineno=176)
DEBUG 2022-02-14 16:38:18,959 stack ['$phi140.0', '$168binary_subscr.14']
DEBUG 2022-02-14 16:38:18,959 dispatch pc=172, inst=LOAD_FAST(arg=8, lineno=176)
DEBUG 2022-02-14 16:38:18,959 stack ['$phi140.0', '$168binary_subscr.14', '$comb170.15']
DEBUG 2022-02-14 16:38:18,959 dispatch pc=174, inst=LOAD_CONST(arg=0, lineno=176)
DEBUG 2022-02-14 16:38:18,959 stack ['$phi140.0', '$168binary_subscr.14', '$comb170.15', '$count172.16']
DEBUG 2022-02-14 16:38:18,959 dispatch pc=176, inst=LOAD_CONST(arg=0, lineno=176)
DEBUG 2022-02-14 16:38:18,959 stack ['$phi140.0', '$168binary_subscr.14', '$comb170.15', '$count172.16', '$const174.17']
DEBUG 2022-02-14 16:38:18,960 dispatch pc=178, inst=BUILD_SLICE(arg=2, lineno=176)
DEBUG 2022-02-14 16:38:18,960 stack ['$phi140.0', '$168binary_subscr.14', '$comb170.15', '$count172.16', '$const174.17', '$const176.18']
DEBUG 2022-02-14 16:38:18,960 dispatch pc=180, inst=BUILD_TUPLE(arg=2, lineno=176)
DEBUG 2022-02-14 16:38:18,960 stack ['$phi140.0', '$168binary_subscr.14', '$comb170.15', '$count172.16', '$178build_slice.20']
DEBUG 2022-02-14 16:38:18,960 dispatch pc=182, inst=STORE_SUBSCR(arg=None, lineno=176)
DEBUG 2022-02-14 16:38:18,960 stack ['$phi140.0', '$168binary_subscr.14', '$comb170.15', '$180build_tuple.21']
DEBUG 2022-02-14 16:38:18,960 dispatch pc=184, inst=LOAD_GLOBAL(arg=4, lineno=177)
DEBUG 2022-02-14 16:38:18,960 stack ['$phi140.0']
DEBUG 2022-02-14 16:38:18,960 dispatch pc=186, inst=LOAD_CONST(arg=3, lineno=177)
DEBUG 2022-02-14 16:38:18,960 stack ['$phi140.0', '$184load_global.22']
DEBUG 2022-02-14 16:38:18,960 dispatch pc=188, inst=LOAD_FAST(arg=4, lineno=177)
DEBUG 2022-02-14 16:38:18,960 stack ['$phi140.0', '$184load_global.22', '$const186.23']
DEBUG 2022-02-14 16:38:18,960 dispatch pc=190, inst=LOAD_FAST(arg=10, lineno=177)
DEBUG 2022-02-14 16:38:18,960 stack ['$phi140.0', '$184load_global.22', '$const186.23', '$n188.24']
DEBUG 2022-02-14 16:38:18,960 dispatch pc=192, inst=BINARY_FLOOR_DIVIDE(arg=None, lineno=177)
DEBUG 2022-02-14 16:38:18,960 stack ['$phi140.0', '$184load_global.22', '$const186.23', '$n188.24', '$i190.25']
DEBUG 2022-02-14 16:38:18,960 dispatch pc=194, inst=LOAD_CONST(arg=3, lineno=177)
DEBUG 2022-02-14 16:38:18,960 stack ['$phi140.0', '$184load_global.22', '$const186.23', '$192binary_floor_divide.26']
DEBUG 2022-02-14 16:38:18,960 dispatch pc=196, inst=BINARY_ADD(arg=None, lineno=177)
DEBUG 2022-02-14 16:38:18,960 stack ['$phi140.0', '$184load_global.22', '$const186.23', '$192binary_floor_divide.26', '$const194.27']
DEBUG 2022-02-14 16:38:18,960 dispatch pc=198, inst=CALL_FUNCTION(arg=2, lineno=177)
DEBUG 2022-02-14 16:38:18,960 stack ['$phi140.0', '$184load_global.22', '$const186.23', '$196binary_add.28']
DEBUG 2022-02-14 16:38:18,960 dispatch pc=200, inst=GET_ITER(arg=None, lineno=177)
DEBUG 2022-02-14 16:38:18,960 stack ['$phi140.0', '$198call_function.29']
DEBUG 2022-02-14 16:38:18,960 end state. edges=[Edge(pc=202, stack=('$phi140.0', '$200get_iter.30'), blockstack=(), npush=0)]
DEBUG 2022-02-14 16:38:18,960 pending: deque([State(pc_initial=90 nstack_initial=1), State(pc_initial=124 nstack_initial=1), State(pc_initial=202 nstack_initial=2)])
DEBUG 2022-02-14 16:38:18,961 stack: ['$phi90.0']
DEBUG 2022-02-14 16:38:18,961 dispatch pc=90, inst=LOAD_FAST(arg=7, lineno=168)
DEBUG 2022-02-14 16:38:18,961 stack ['$phi90.0']
DEBUG 2022-02-14 16:38:18,961 dispatch pc=92, inst=LOAD_METHOD(arg=5, lineno=168)
DEBUG 2022-02-14 16:38:18,961 stack ['$phi90.0', '$E_k90.1']
DEBUG 2022-02-14 16:38:18,961 dispatch pc=94, inst=CALL_METHOD(arg=0, lineno=168)
DEBUG 2022-02-14 16:38:18,961 stack ['$phi90.0', '$92load_method.2']
DEBUG 2022-02-14 16:38:18,961 dispatch pc=96, inst=LOAD_FAST(arg=10, lineno=168)
DEBUG 2022-02-14 16:38:18,961 stack ['$phi90.0', '$94call_method.3']
DEBUG 2022-02-14 16:38:18,961 dispatch pc=98, inst=BINARY_TRUE_DIVIDE(arg=None, lineno=168)
DEBUG 2022-02-14 16:38:18,961 stack ['$phi90.0', '$94call_method.3', '$i96.4']
DEBUG 2022-02-14 16:38:18,961 dispatch pc=100, inst=LOAD_FAST(arg=2, lineno=168)
DEBUG 2022-02-14 16:38:18,961 stack ['$phi90.0', '$98binary_true_divide.5']
DEBUG 2022-02-14 16:38:18,961 dispatch pc=102, inst=LOAD_FAST(arg=3, lineno=168)
DEBUG 2022-02-14 16:38:18,961 stack ['$phi90.0', '$98binary_true_divide.5', '$XD_S100.6']
DEBUG 2022-02-14 16:38:18,961 dispatch pc=104, inst=BINARY_MATRIX_MULTIPLY(arg=None, lineno=168)
DEBUG 2022-02-14 16:38:18,961 stack ['$phi90.0', '$98binary_true_divide.5', '$XD_S100.6', '$D_S102.7']
DEBUG 2022-02-14 16:38:18,961 dispatch pc=106, inst=LOAD_CONST(arg=2, lineno=168)
DEBUG 2022-02-14 16:38:18,961 stack ['$phi90.0', '$98binary_true_divide.5', '$104binary_matrix_multiply.8']
DEBUG 2022-02-14 16:38:18,961 dispatch pc=108, inst=BINARY_TRUE_DIVIDE(arg=None, lineno=168)
DEBUG 2022-02-14 16:38:18,961 stack ['$phi90.0', '$98binary_true_divide.5', '$104binary_matrix_multiply.8', '$const106.9']
DEBUG 2022-02-14 16:38:18,961 dispatch pc=110, inst=BINARY_ADD(arg=None, lineno=168)
DEBUG 2022-02-14 16:38:18,961 stack ['$phi90.0', '$98binary_true_divide.5', '$108binary_true_divide.10']
DEBUG 2022-02-14 16:38:18,961 dispatch pc=112, inst=STORE_FAST(arg=11, lineno=168)
DEBUG 2022-02-14 16:38:18,961 stack ['$phi90.0', '$110binary_add.11']
DEBUG 2022-02-14 16:38:18,961 dispatch pc=114, inst=LOAD_FAST(arg=7, lineno=169)
DEBUG 2022-02-14 16:38:18,962 stack ['$phi90.0']
DEBUG 2022-02-14 16:38:18,962 dispatch pc=116, inst=LOAD_FAST(arg=0, lineno=169)
DEBUG 2022-02-14 16:38:18,962 stack ['$phi90.0', '$E_k114.12']
DEBUG 2022-02-14 16:38:18,962 dispatch pc=118, inst=INPLACE_MULTIPLY(arg=None, lineno=169)
DEBUG 2022-02-14 16:38:18,962 stack ['$phi90.0', '$E_k114.12', '$E116.13']
DEBUG 2022-02-14 16:38:18,962 dispatch pc=120, inst=STORE_FAST(arg=7, lineno=169)
DEBUG 2022-02-14 16:38:18,962 stack ['$phi90.0', '$118inplace_multiply.14']
DEBUG 2022-02-14 16:38:18,962 dispatch pc=122, inst=JUMP_FORWARD(arg=16, lineno=169)
DEBUG 2022-02-14 16:38:18,962 stack ['$phi90.0']
DEBUG 2022-02-14 16:38:18,962 end state. edges=[Edge(pc=140, stack=('$phi90.0',), blockstack=(), npush=0)]
DEBUG 2022-02-14 16:38:18,962 pending: deque([State(pc_initial=124 nstack_initial=1), State(pc_initial=202 nstack_initial=2), State(pc_initial=140 nstack_initial=1)])
DEBUG 2022-02-14 16:38:18,962 stack: ['$phi124.0']
DEBUG 2022-02-14 16:38:18,962 dispatch pc=124, inst=LOAD_FAST(arg=6, lineno=171)
DEBUG 2022-02-14 16:38:18,962 stack ['$phi124.0']
DEBUG 2022-02-14 16:38:18,962 dispatch pc=126, inst=LOAD_FAST(arg=3, lineno=171)
DEBUG 2022-02-14 16:38:18,962 stack ['$phi124.0', '$oddVX_S124.1']
DEBUG 2022-02-14 16:38:18,962 dispatch pc=128, inst=BINARY_MATRIX_MULTIPLY(arg=None, lineno=171)
DEBUG 2022-02-14 16:38:18,962 stack ['$phi124.0', '$oddVX_S124.1', '$D_S126.2']
DEBUG 2022-02-14 16:38:18,962 dispatch pc=130, inst=STORE_FAST(arg=11, lineno=171)
DEBUG 2022-02-14 16:38:18,962 stack ['$phi124.0', '$128binary_matrix_multiply.3']
DEBUG 2022-02-14 16:38:18,962 dispatch pc=132, inst=LOAD_FAST(arg=1, lineno=172)
DEBUG 2022-02-14 16:38:18,962 stack ['$phi124.0']
DEBUG 2022-02-14 16:38:18,962 dispatch pc=134, inst=LOAD_FAST(arg=3, lineno=172)
DEBUG 2022-02-14 16:38:18,962 stack ['$phi124.0', '$AX_S132.4']
DEBUG 2022-02-14 16:38:18,962 dispatch pc=136, inst=BINARY_MATRIX_MULTIPLY(arg=None, lineno=172)
DEBUG 2022-02-14 16:38:18,962 stack ['$phi124.0', '$AX_S132.4', '$D_S134.5']
DEBUG 2022-02-14 16:38:18,963 dispatch pc=138, inst=STORE_FAST(arg=3, lineno=172)
DEBUG 2022-02-14 16:38:18,963 stack ['$phi124.0', '$136binary_matrix_multiply.6']
DEBUG 2022-02-14 16:38:18,963 end state. edges=[Edge(pc=140, stack=('$phi124.0',), blockstack=(), npush=0)]
DEBUG 2022-02-14 16:38:18,963 pending: deque([State(pc_initial=202 nstack_initial=2), State(pc_initial=140 nstack_initial=1), State(pc_initial=140 nstack_initial=1)])
DEBUG 2022-02-14 16:38:18,963 stack: ['$phi202.0', '$phi202.1']
DEBUG 2022-02-14 16:38:18,963 dispatch pc=202, inst=FOR_ITER(arg=96, lineno=177)
DEBUG 2022-02-14 16:38:18,963 stack ['$phi202.0', '$phi202.1']
DEBUG 2022-02-14 16:38:18,963 end state. edges=[Edge(pc=300, stack=('$phi202.0',), blockstack=(), npush=0), Edge(pc=204, stack=('$phi202.0', '$phi202.1', '$202for_iter.3'), blockstack=(), npush=0)]
DEBUG 2022-02-14 16:38:18,963 pending: deque([State(pc_initial=140 nstack_initial=1), State(pc_initial=140 nstack_initial=1), State(pc_initial=300 nstack_initial=1), State(pc_initial=204 nstack_initial=3)])
DEBUG 2022-02-14 16:38:18,963 pending: deque([State(pc_initial=140 nstack_initial=1), State(pc_initial=300 nstack_initial=1), State(pc_initial=204 nstack_initial=3)])
DEBUG 2022-02-14 16:38:18,963 pending: deque([State(pc_initial=300 nstack_initial=1), State(pc_initial=204 nstack_initial=3)])
DEBUG 2022-02-14 16:38:18,963 stack: ['$phi300.0']
DEBUG 2022-02-14 16:38:18,963 dispatch pc=300, inst=JUMP_ABSOLUTE(arg=60, lineno=180)
DEBUG 2022-02-14 16:38:18,963 stack ['$phi300.0']
DEBUG 2022-02-14 16:38:18,963 end state. edges=[Edge(pc=60, stack=('$phi300.0',), blockstack=(), npush=0)]
DEBUG 2022-02-14 16:38:18,963 pending: deque([State(pc_initial=204 nstack_initial=3), State(pc_initial=60 nstack_initial=1)])
DEBUG 2022-02-14 16:38:18,963 stack: ['$phi204.0', '$phi204.1', '$phi204.2']
DEBUG 2022-02-14 16:38:18,963 dispatch pc=204, inst=STORE_FAST(arg=13, lineno=177)
DEBUG 2022-02-14 16:38:18,963 stack ['$phi204.0', '$phi204.1', '$phi204.2']
DEBUG 2022-02-14 16:38:18,963 dispatch pc=206, inst=LOAD_FAST(arg=12, lineno=178)
DEBUG 2022-02-14 16:38:18,963 stack ['$phi204.0', '$phi204.1']
DEBUG 2022-02-14 16:38:18,963 dispatch pc=208, inst=LOAD_FAST(arg=11, lineno=178)
DEBUG 2022-02-14 16:38:18,963 stack ['$phi204.0', '$phi204.1', '$powfactor206.3']
DEBUG 2022-02-14 16:38:18,964 dispatch pc=210, inst=LOAD_FAST(arg=13, lineno=178)
DEBUG 2022-02-14 16:38:18,964 stack ['$phi204.0', '$phi204.1', '$powfactor206.3', '$factor208.4']
DEBUG 2022-02-14 16:38:18,964 dispatch pc=212, inst=BINARY_TRUE_DIVIDE(arg=None, lineno=178)
DEBUG 2022-02-14 16:38:18,964 stack ['$phi204.0', '$phi204.1', '$powfactor206.3', '$factor208.4', '$j210.5']
DEBUG 2022-02-14 16:38:18,964 dispatch pc=214, inst=INPLACE_MULTIPLY(arg=None, lineno=178)
DEBUG 2022-02-14 16:38:18,964 stack ['$phi204.0', '$phi204.1', '$powfactor206.3', '$212binary_true_divide.6']
DEBUG 2022-02-14 16:38:18,964 dispatch pc=216, inst=STORE_FAST(arg=12, lineno=178)
DEBUG 2022-02-14 16:38:18,964 stack ['$phi204.0', '$phi204.1', '$214inplace_multiply.7']
DEBUG 2022-02-14 16:38:18,964 dispatch pc=218, inst=LOAD_GLOBAL(arg=4, lineno=179)
DEBUG 2022-02-14 16:38:18,964 stack ['$phi204.0', '$phi204.1']
DEBUG 2022-02-14 16:38:18,964 dispatch pc=220, inst=LOAD_FAST(arg=10, lineno=179)
DEBUG 2022-02-14 16:38:18,964 stack ['$phi204.0', '$phi204.1', '$218load_global.8']
DEBUG 2022-02-14 16:38:18,964 dispatch pc=222, inst=LOAD_FAST(arg=13, lineno=179)
DEBUG 2022-02-14 16:38:18,964 stack ['$phi204.0', '$phi204.1', '$218load_global.8', '$i220.9']
DEBUG 2022-02-14 16:38:18,964 dispatch pc=224, inst=BINARY_MULTIPLY(arg=None, lineno=179)
DEBUG 2022-02-14 16:38:18,964 stack ['$phi204.0', '$phi204.1', '$218load_global.8', '$i220.9', '$j222.10']
DEBUG 2022-02-14 16:38:18,964 dispatch pc=226, inst=LOAD_CONST(arg=3, lineno=179)
DEBUG 2022-02-14 16:38:18,964 stack ['$phi204.0', '$phi204.1', '$218load_global.8', '$224binary_multiply.11']
DEBUG 2022-02-14 16:38:18,964 dispatch pc=228, inst=BINARY_ADD(arg=None, lineno=179)
DEBUG 2022-02-14 16:38:18,964 stack ['$phi204.0', '$phi204.1', '$218load_global.8', '$224binary_multiply.11', '$const226.12']
DEBUG 2022-02-14 16:38:18,964 dispatch pc=230, inst=LOAD_FAST(arg=4, lineno=179)
DEBUG 2022-02-14 16:38:18,964 stack ['$phi204.0', '$phi204.1', '$218load_global.8', '$228binary_add.13']
DEBUG 2022-02-14 16:38:18,964 dispatch pc=232, inst=LOAD_CONST(arg=2, lineno=179)
DEBUG 2022-02-14 16:38:18,964 stack ['$phi204.0', '$phi204.1', '$218load_global.8', '$228binary_add.13', '$n230.14']
DEBUG 2022-02-14 16:38:18,964 dispatch pc=234, inst=BINARY_ADD(arg=None, lineno=179)
DEBUG 2022-02-14 16:38:18,964 stack ['$phi204.0', '$phi204.1', '$218load_global.8', '$228binary_add.13', '$n230.14', '$const232.15']
DEBUG 2022-02-14 16:38:18,964 dispatch pc=236, inst=CALL_FUNCTION(arg=2, lineno=179)
DEBUG 2022-02-14 16:38:18,965 stack ['$phi204.0', '$phi204.1', '$218load_global.8', '$228binary_add.13', '$234binary_add.16']
DEBUG 2022-02-14 16:38:18,965 dispatch pc=238, inst=GET_ITER(arg=None, lineno=179)
DEBUG 2022-02-14 16:38:18,965 stack ['$phi204.0', '$phi204.1', '$236call_function.17']
DEBUG 2022-02-14 16:38:18,965 end state. edges=[Edge(pc=240, stack=('$phi204.0', '$phi204.1', '$238get_iter.18'), blockstack=(), npush=0)]
DEBUG 2022-02-14 16:38:18,965 pending: deque([State(pc_initial=60 nstack_initial=1), State(pc_initial=240 nstack_initial=3)])
DEBUG 2022-02-14 16:38:18,965 pending: deque([State(pc_initial=240 nstack_initial=3)])
DEBUG 2022-02-14 16:38:18,965 stack: ['$phi240.0', '$phi240.1', '$phi240.2']
DEBUG 2022-02-14 16:38:18,965 dispatch pc=240, inst=FOR_ITER(arg=56, lineno=179)
DEBUG 2022-02-14 16:38:18,965 stack ['$phi240.0', '$phi240.1', '$phi240.2']
DEBUG 2022-02-14 16:38:18,965 end state. edges=[Edge(pc=298, stack=('$phi240.0', '$phi240.1'), blockstack=(), npush=0), Edge(pc=242, stack=('$phi240.0', '$phi240.1', '$phi240.2', '$240for_iter.4'), blockstack=(), npush=0)]
DEBUG 2022-02-14 16:38:18,965 pending: deque([State(pc_initial=298 nstack_initial=2), State(pc_initial=242 nstack_initial=4)])
DEBUG 2022-02-14 16:38:18,965 stack: ['$phi298.0', '$phi298.1']
DEBUG 2022-02-14 16:38:18,965 dispatch pc=298, inst=JUMP_ABSOLUTE(arg=202, lineno=180)
DEBUG 2022-02-14 16:38:18,965 stack ['$phi298.0', '$phi298.1']
DEBUG 2022-02-14 16:38:18,965 end state. edges=[Edge(pc=202, stack=('$phi298.0', '$phi298.1'), blockstack=(), npush=0)]
DEBUG 2022-02-14 16:38:18,965 pending: deque([State(pc_initial=242 nstack_initial=4), State(pc_initial=202 nstack_initial=2)])
DEBUG 2022-02-14 16:38:18,965 stack: ['$phi242.0', '$phi242.1', '$phi242.2', '$phi242.3']
DEBUG 2022-02-14 16:38:18,965 dispatch pc=242, inst=STORE_FAST(arg=14, lineno=179)
DEBUG 2022-02-14 16:38:18,965 stack ['$phi242.0', '$phi242.1', '$phi242.2', '$phi242.3']
DEBUG 2022-02-14 16:38:18,965 dispatch pc=244, inst=LOAD_FAST(arg=9, lineno=180)
DEBUG 2022-02-14 16:38:18,965 stack ['$phi242.0', '$phi242.1', '$phi242.2']
DEBUG 2022-02-14 16:38:18,965 dispatch pc=246, inst=LOAD_FAST(arg=8, lineno=180)
DEBUG 2022-02-14 16:38:18,965 stack ['$phi242.0', '$phi242.1', '$phi242.2', '$comb244.4']
DEBUG 2022-02-14 16:38:18,965 dispatch pc=248, inst=LOAD_FAST(arg=14, lineno=180)
DEBUG 2022-02-14 16:38:18,965 stack ['$phi242.0', '$phi242.1', '$phi242.2', '$comb244.4', '$count246.5']
DEBUG 2022-02-14 16:38:18,966 dispatch pc=250, inst=LOAD_CONST(arg=3, lineno=180)
DEBUG 2022-02-14 16:38:18,966 stack ['$phi242.0', '$phi242.1', '$phi242.2', '$comb244.4', '$count246.5', '$k248.6']
DEBUG 2022-02-14 16:38:18,966 dispatch pc=252, inst=BINARY_SUBTRACT(arg=None, lineno=180)
DEBUG 2022-02-14 16:38:18,966 stack ['$phi242.0', '$phi242.1', '$phi242.2', '$comb244.4', '$count246.5', '$k248.6', '$const250.7']
DEBUG 2022-02-14 16:38:18,966 dispatch pc=254, inst=BUILD_TUPLE(arg=2, lineno=180)
DEBUG 2022-02-14 16:38:18,966 stack ['$phi242.0', '$phi242.1', '$phi242.2', '$comb244.4', '$count246.5', '$252binary_subtract.8']
DEBUG 2022-02-14 16:38:18,966 dispatch pc=256, inst=DUP_TOP_TWO(arg=None, lineno=180)
DEBUG 2022-02-14 16:38:18,966 stack ['$phi242.0', '$phi242.1', '$phi242.2', '$comb244.4', '$254build_tuple.9']
DEBUG 2022-02-14 16:38:18,966 dispatch pc=258, inst=BINARY_SUBSCR(arg=None, lineno=180)
DEBUG 2022-02-14 16:38:18,966 stack ['$phi242.0', '$phi242.1', '$phi242.2', '$comb244.4', '$254build_tuple.9', '$256dup_top_two.10', '$256dup_top_two.11']
DEBUG 2022-02-14 16:38:18,966 dispatch pc=260, inst=LOAD_FAST(arg=9, lineno=180)
DEBUG 2022-02-14 16:38:18,966 stack ['$phi242.0', '$phi242.1', '$phi242.2', '$comb244.4', '$254build_tuple.9', '$258binary_subscr.12']
DEBUG 2022-02-14 16:38:18,966 dispatch pc=262, inst=LOAD_CONST(arg=3, lineno=180)
DEBUG 2022-02-14 16:38:18,966 stack ['$phi242.0', '$phi242.1', '$phi242.2', '$comb244.4', '$254build_tuple.9', '$258binary_subscr.12', '$comb260.13']
DEBUG 2022-02-14 16:38:18,966 dispatch pc=264, inst=LOAD_FAST(arg=8, lineno=180)
DEBUG 2022-02-14 16:38:18,966 stack ['$phi242.0', '$phi242.1', '$phi242.2', '$comb244.4', '$254build_tuple.9', '$258binary_subscr.12', '$comb260.13', '$const262.14']
DEBUG 2022-02-14 16:38:18,966 dispatch pc=266, inst=BINARY_SUBTRACT(arg=None, lineno=180)
DEBUG 2022-02-14 16:38:18,966 stack ['$phi242.0', '$phi242.1', '$phi242.2', '$comb244.4', '$254build_tuple.9', '$258binary_subscr.12', '$comb260.13', '$const262.14', '$count264.15']
DEBUG 2022-02-14 16:38:18,966 dispatch pc=268, inst=LOAD_FAST(arg=14, lineno=180)
DEBUG 2022-02-14 16:38:18,966 stack ['$phi242.0', '$phi242.1', '$phi242.2', '$comb244.4', '$254build_tuple.9', '$258binary_subscr.12', '$comb260.13', '$266binary_subtract.16']
DEBUG 2022-02-14 16:38:18,966 dispatch pc=270, inst=LOAD_FAST(arg=10, lineno=180)
DEBUG 2022-02-14 16:38:18,966 stack ['$phi242.0', '$phi242.1', '$phi242.2', '$comb244.4', '$254build_tuple.9', '$258binary_subscr.12', '$comb260.13', '$266binary_subtract.16', '$k268.17']
DEBUG 2022-02-14 16:38:18,966 dispatch pc=272, inst=LOAD_FAST(arg=13, lineno=180)
DEBUG 2022-02-14 16:38:18,966 stack ['$phi242.0', '$phi242.1', '$phi242.2', '$comb244.4', '$254build_tuple.9', '$258binary_subscr.12', '$comb260.13', '$266binary_subtract.16', '$k268.17', '$i270.18']
DEBUG 2022-02-14 16:38:18,966 dispatch pc=274, inst=BINARY_MULTIPLY(arg=None, lineno=180)
DEBUG 2022-02-14 16:38:18,966 stack ['$phi242.0', '$phi242.1', '$phi242.2', '$comb244.4', '$254build_tuple.9', '$258binary_subscr.12', '$comb260.13', '$266binary_subtract.16', '$k268.17', '$i270.18', '$j272.19']
DEBUG 2022-02-14 16:38:18,967 dispatch pc=276, inst=BINARY_SUBTRACT(arg=None, lineno=180)
DEBUG 2022-02-14 16:38:18,967 stack ['$phi242.0', '$phi242.1', '$phi242.2', '$comb244.4', '$254build_tuple.9', '$258binary_subscr.12', '$comb260.13', '$266binary_subtract.16', '$k268.17', '$274binary_multiply.20']
DEBUG 2022-02-14 16:38:18,967 dispatch pc=278, inst=LOAD_CONST(arg=3, lineno=180)
DEBUG 2022-02-14 16:38:18,967 stack ['$phi242.0', '$phi242.1', '$phi242.2', '$comb244.4', '$254build_tuple.9', '$258binary_subscr.12', '$comb260.13', '$266binary_subtract.16', '$276binary_subtract.21']
DEBUG 2022-02-14 16:38:18,967 dispatch pc=280, inst=BINARY_SUBTRACT(arg=None, lineno=180)
DEBUG 2022-02-14 16:38:18,967 stack ['$phi242.0', '$phi242.1', '$phi242.2', '$comb244.4', '$254build_tuple.9', '$258binary_subscr.12', '$comb260.13', '$266binary_subtract.16', '$276binary_subtract.21', '$const278.22']
DEBUG 2022-02-14 16:38:18,967 dispatch pc=282, inst=BUILD_TUPLE(arg=2, lineno=180)
DEBUG 2022-02-14 16:38:18,967 stack ['$phi242.0', '$phi242.1', '$phi242.2', '$comb244.4', '$254build_tuple.9', '$258binary_subscr.12', '$comb260.13', '$266binary_subtract.16', '$280binary_subtract.23']
DEBUG 2022-02-14 16:38:18,967 dispatch pc=284, inst=BINARY_SUBSCR(arg=None, lineno=180)
DEBUG 2022-02-14 16:38:18,967 stack ['$phi242.0', '$phi242.1', '$phi242.2', '$comb244.4', '$254build_tuple.9', '$258binary_subscr.12', '$comb260.13', '$282build_tuple.24']
DEBUG 2022-02-14 16:38:18,967 dispatch pc=286, inst=LOAD_FAST(arg=12, lineno=180)
DEBUG 2022-02-14 16:38:18,967 stack ['$phi242.0', '$phi242.1', '$phi242.2', '$comb244.4', '$254build_tuple.9', '$258binary_subscr.12', '$284binary_subscr.25']
DEBUG 2022-02-14 16:38:18,967 dispatch pc=288, inst=BINARY_MULTIPLY(arg=None, lineno=180)
DEBUG 2022-02-14 16:38:18,967 stack ['$phi242.0', '$phi242.1', '$phi242.2', '$comb244.4', '$254build_tuple.9', '$258binary_subscr.12', '$284binary_subscr.25', '$powfactor286.26']
DEBUG 2022-02-14 16:38:18,967 dispatch pc=290, inst=INPLACE_ADD(arg=None, lineno=180)
DEBUG 2022-02-14 16:38:18,967 stack ['$phi242.0', '$phi242.1', '$phi242.2', '$comb244.4', '$254build_tuple.9', '$258binary_subscr.12', '$288binary_multiply.27']
DEBUG 2022-02-14 16:38:18,967 dispatch pc=292, inst=ROT_THREE(arg=None, lineno=180)
DEBUG 2022-02-14 16:38:18,967 stack ['$phi242.0', '$phi242.1', '$phi242.2', '$comb244.4', '$254build_tuple.9', '$290inplace_add.28']
DEBUG 2022-02-14 16:38:18,967 dispatch pc=294, inst=STORE_SUBSCR(arg=None, lineno=180)
DEBUG 2022-02-14 16:38:18,967 stack ['$phi242.0', '$phi242.1', '$phi242.2', '$290inplace_add.28', '$comb244.4', '$254build_tuple.9']
DEBUG 2022-02-14 16:38:18,967 dispatch pc=296, inst=JUMP_ABSOLUTE(arg=240, lineno=180)
DEBUG 2022-02-14 16:38:18,967 stack ['$phi242.0', '$phi242.1', '$phi242.2']
DEBUG 2022-02-14 16:38:18,967 end state. edges=[Edge(pc=240, stack=('$phi242.0', '$phi242.1', '$phi242.2'), blockstack=(), npush=0)]
DEBUG 2022-02-14 16:38:18,967 pending: deque([State(pc_initial=202 nstack_initial=2), State(pc_initial=240 nstack_initial=3)])
DEBUG 2022-02-14 16:38:18,967 pending: deque([State(pc_initial=240 nstack_initial=3)])
DEBUG 2022-02-14 16:38:18,968 -------------------------Prune PHIs-------------------------
DEBUG 2022-02-14 16:38:18,968 Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=60 nstack_initial=1): {'$phi60.0'},
             State(pc_initial=62 nstack_initial=2): {'$phi62.1'},
             State(pc_initial=72 nstack_initial=1): set(),
             State(pc_initial=78 nstack_initial=1): set(),
             State(pc_initial=90 nstack_initial=1): set(),
             State(pc_initial=124 nstack_initial=1): set(),
             State(pc_initial=140 nstack_initial=1): set(),
             State(pc_initial=202 nstack_initial=2): {'$phi202.1'},
             State(pc_initial=204 nstack_initial=3): {'$phi204.2'},
             State(pc_initial=240 nstack_initial=3): {'$phi240.2'},
             State(pc_initial=242 nstack_initial=4): {'$phi242.3'},
             State(pc_initial=298 nstack_initial=2): set(),
             State(pc_initial=300 nstack_initial=1): set(),
             State(pc_initial=302 nstack_initial=0): set()})
DEBUG 2022-02-14 16:38:18,968 defmap: {'$phi202.1': State(pc_initial=140 nstack_initial=1),
 '$phi204.2': State(pc_initial=202 nstack_initial=2),
 '$phi240.2': State(pc_initial=204 nstack_initial=3),
 '$phi242.3': State(pc_initial=240 nstack_initial=3),
 '$phi60.0': State(pc_initial=0 nstack_initial=0),
 '$phi62.1': State(pc_initial=60 nstack_initial=1)}
DEBUG 2022-02-14 16:38:18,968 phismap: defaultdict(<class 'set'>,
            {'$phi124.0': {('$phi78.0', State(pc_initial=78 nstack_initial=1))},
             '$phi140.0': {('$phi124.0',
                            State(pc_initial=124 nstack_initial=1)),
                           ('$phi72.0', State(pc_initial=72 nstack_initial=1)),
                           ('$phi90.0', State(pc_initial=90 nstack_initial=1))},
             '$phi202.0': {('$phi140.0',
                            State(pc_initial=140 nstack_initial=1)),
                           ('$phi298.0',
                            State(pc_initial=298 nstack_initial=2))},
             '$phi202.1': {('$200get_iter.30',
                            State(pc_initial=140 nstack_initial=1)),
                           ('$phi298.1',
                            State(pc_initial=298 nstack_initial=2))},
             '$phi204.0': {('$phi202.0',
                            State(pc_initial=202 nstack_initial=2))},
             '$phi204.1': {('$phi202.1',
                            State(pc_initial=202 nstack_initial=2))},
             '$phi204.2': {('$202for_iter.3',
                            State(pc_initial=202 nstack_initial=2))},
             '$phi240.0': {('$phi204.0',
                            State(pc_initial=204 nstack_initial=3)),
                           ('$phi242.0',
                            State(pc_initial=242 nstack_initial=4))},
             '$phi240.1': {('$phi204.1',
                            State(pc_initial=204 nstack_initial=3)),
                           ('$phi242.1',
                            State(pc_initial=242 nstack_initial=4))},
             '$phi240.2': {('$238get_iter.18',
                            State(pc_initial=204 nstack_initial=3)),
                           ('$phi242.2',
                            State(pc_initial=242 nstack_initial=4))},
             '$phi242.0': {('$phi240.0',
                            State(pc_initial=240 nstack_initial=3))},
             '$phi242.1': {('$phi240.1',
                            State(pc_initial=240 nstack_initial=3))},
             '$phi242.2': {('$phi240.2',
                            State(pc_initial=240 nstack_initial=3))},
             '$phi242.3': {('$240for_iter.4',
                            State(pc_initial=240 nstack_initial=3))},
             '$phi298.0': {('$phi240.0',
                            State(pc_initial=240 nstack_initial=3))},
             '$phi298.1': {('$phi240.1',
                            State(pc_initial=240 nstack_initial=3))},
             '$phi300.0': {('$phi202.0',
                            State(pc_initial=202 nstack_initial=2))},
             '$phi60.0': {('$58get_iter.24',
                           State(pc_initial=0 nstack_initial=0)),
                          ('$phi300.0',
                           State(pc_initial=300 nstack_initial=1))},
             '$phi62.0': {('$phi60.0', State(pc_initial=60 nstack_initial=1))},
             '$phi62.1': {('$60for_iter.2',
                           State(pc_initial=60 nstack_initial=1))},
             '$phi72.0': {('$phi62.0', State(pc_initial=62 nstack_initial=2))},
             '$phi78.0': {('$phi62.0', State(pc_initial=62 nstack_initial=2))},
             '$phi90.0': {('$phi78.0', State(pc_initial=78 nstack_initial=1))}})
DEBUG 2022-02-14 16:38:18,969 changing phismap: defaultdict(<class 'set'>,
            {'$phi124.0': {('$phi62.0', State(pc_initial=62 nstack_initial=2))},
             '$phi140.0': {('$phi62.0', State(pc_initial=62 nstack_initial=2)),
                           ('$phi78.0', State(pc_initial=78 nstack_initial=1))},
             '$phi202.0': {('$phi240.0',
                            State(pc_initial=240 nstack_initial=3)),
                           ('$phi62.0', State(pc_initial=62 nstack_initial=2)),
                           ('$phi78.0', State(pc_initial=78 nstack_initial=1))},
             '$phi202.1': {('$200get_iter.30',
                            State(pc_initial=140 nstack_initial=1)),
                           ('$phi240.1',
                            State(pc_initial=240 nstack_initial=3))},
             '$phi204.0': {('$phi240.0',
                            State(pc_initial=240 nstack_initial=3)),
                           ('$phi62.0', State(pc_initial=62 nstack_initial=2)),
                           ('$phi78.0', State(pc_initial=78 nstack_initial=1))},
             '$phi204.1': {('$200get_iter.30',
                            State(pc_initial=140 nstack_initial=1)),
                           ('$phi240.1',
                            State(pc_initial=240 nstack_initial=3))},
             '$phi204.2': {('$202for_iter.3',
                            State(pc_initial=202 nstack_initial=2))},
             '$phi240.0': {('$phi240.0',
                            State(pc_initial=240 nstack_initial=3)),
                           ('$phi62.0', State(pc_initial=62 nstack_initial=2)),
                           ('$phi78.0', State(pc_initial=78 nstack_initial=1))},
             '$phi240.1': {('$200get_iter.30',
                            State(pc_initial=140 nstack_initial=1)),
                           ('$phi240.1',
                            State(pc_initial=240 nstack_initial=3))},
             '$phi240.2': {('$238get_iter.18',
                            State(pc_initial=204 nstack_initial=3)),
                           ('$phi240.2',
                            State(pc_initial=240 nstack_initial=3))},
             '$phi242.0': {('$phi62.0', State(pc_initial=62 nstack_initial=2)),
                           ('$phi78.0', State(pc_initial=78 nstack_initial=1))},
             '$phi242.1': {('$200get_iter.30',
                            State(pc_initial=140 nstack_initial=1))},
             '$phi242.2': {('$238get_iter.18',
                            State(pc_initial=204 nstack_initial=3))},
             '$phi242.3': {('$240for_iter.4',
                            State(pc_initial=240 nstack_initial=3))},
             '$phi298.0': {('$phi62.0', State(pc_initial=62 nstack_initial=2)),
                           ('$phi78.0', State(pc_initial=78 nstack_initial=1))},
             '$phi298.1': {('$200get_iter.30',
                            State(pc_initial=140 nstack_initial=1))},
             '$phi300.0': {('$phi240.0',
                            State(pc_initial=240 nstack_initial=3)),
                           ('$phi62.0', State(pc_initial=62 nstack_initial=2)),
                           ('$phi78.0', State(pc_initial=78 nstack_initial=1))},
             '$phi60.0': {('$58get_iter.24',
                           State(pc_initial=0 nstack_initial=0)),
                          ('$phi240.0', State(pc_initial=240 nstack_initial=3)),
                          ('$phi62.0', State(pc_initial=62 nstack_initial=2)),
                          ('$phi78.0', State(pc_initial=78 nstack_initial=1))},
             '$phi62.0': {('$58get_iter.24',
                           State(pc_initial=0 nstack_initial=0)),
                          ('$phi240.0', State(pc_initial=240 nstack_initial=3)),
                          ('$phi62.0', State(pc_initial=62 nstack_initial=2)),
                          ('$phi78.0', State(pc_initial=78 nstack_initial=1))},
             '$phi62.1': {('$60for_iter.2',
                           State(pc_initial=60 nstack_initial=1))},
             '$phi72.0': {('$58get_iter.24',
                           State(pc_initial=0 nstack_initial=0)),
                          ('$phi240.0', State(pc_initial=240 nstack_initial=3)),
                          ('$phi78.0', State(pc_initial=78 nstack_initial=1))},
             '$phi78.0': {('$58get_iter.24',
                           State(pc_initial=0 nstack_initial=0)),
                          ('$phi240.0', State(pc_initial=240 nstack_initial=3)),
                          ('$phi78.0', State(pc_initial=78 nstack_initial=1))},
             '$phi90.0': {('$58get_iter.24',
                           State(pc_initial=0 nstack_initial=0)),
                          ('$phi240.0',
                           State(pc_initial=240 nstack_initial=3))}})
DEBUG 2022-02-14 16:38:18,970 changing phismap: defaultdict(<class 'set'>,
            {'$phi124.0': {('$58get_iter.24',
                            State(pc_initial=0 nstack_initial=0)),
                           ('$phi240.0',
                            State(pc_initial=240 nstack_initial=3))},
             '$phi140.0': {('$58get_iter.24',
                            State(pc_initial=0 nstack_initial=0)),
                           ('$phi240.0',
                            State(pc_initial=240 nstack_initial=3))},
             '$phi202.0': {('$58get_iter.24',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi202.1': {('$200get_iter.30',
                            State(pc_initial=140 nstack_initial=1))},
             '$phi204.0': {('$58get_iter.24',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi204.1': {('$200get_iter.30',
                            State(pc_initial=140 nstack_initial=1))},
             '$phi204.2': {('$202for_iter.3',
                            State(pc_initial=202 nstack_initial=2))},
             '$phi240.0': {('$58get_iter.24',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi240.1': {('$200get_iter.30',
                            State(pc_initial=140 nstack_initial=1))},
             '$phi240.2': {('$238get_iter.18',
                            State(pc_initial=204 nstack_initial=3))},
             '$phi242.0': {('$58get_iter.24',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi242.1': {('$200get_iter.30',
                            State(pc_initial=140 nstack_initial=1))},
             '$phi242.2': {('$238get_iter.18',
                            State(pc_initial=204 nstack_initial=3))},
             '$phi242.3': {('$240for_iter.4',
                            State(pc_initial=240 nstack_initial=3))},
             '$phi298.0': {('$58get_iter.24',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi298.1': {('$200get_iter.30',
                            State(pc_initial=140 nstack_initial=1))},
             '$phi300.0': {('$58get_iter.24',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi60.0': {('$58get_iter.24',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi62.0': {('$58get_iter.24',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi62.1': {('$60for_iter.2',
                           State(pc_initial=60 nstack_initial=1))},
             '$phi72.0': {('$58get_iter.24',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi78.0': {('$58get_iter.24',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi90.0': {('$58get_iter.24',
                           State(pc_initial=0 nstack_initial=0))}})
DEBUG 2022-02-14 16:38:18,971 changing phismap: defaultdict(<class 'set'>,
            {'$phi124.0': {('$58get_iter.24',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi140.0': {('$58get_iter.24',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi202.0': {('$58get_iter.24',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi202.1': {('$200get_iter.30',
                            State(pc_initial=140 nstack_initial=1))},
             '$phi204.0': {('$58get_iter.24',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi204.1': {('$200get_iter.30',
                            State(pc_initial=140 nstack_initial=1))},
             '$phi204.2': {('$202for_iter.3',
                            State(pc_initial=202 nstack_initial=2))},
             '$phi240.0': {('$58get_iter.24',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi240.1': {('$200get_iter.30',
                            State(pc_initial=140 nstack_initial=1))},
             '$phi240.2': {('$238get_iter.18',
                            State(pc_initial=204 nstack_initial=3))},
             '$phi242.0': {('$58get_iter.24',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi242.1': {('$200get_iter.30',
                            State(pc_initial=140 nstack_initial=1))},
             '$phi242.2': {('$238get_iter.18',
                            State(pc_initial=204 nstack_initial=3))},
             '$phi242.3': {('$240for_iter.4',
                            State(pc_initial=240 nstack_initial=3))},
             '$phi298.0': {('$58get_iter.24',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi298.1': {('$200get_iter.30',
                            State(pc_initial=140 nstack_initial=1))},
             '$phi300.0': {('$58get_iter.24',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi60.0': {('$58get_iter.24',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi62.0': {('$58get_iter.24',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi62.1': {('$60for_iter.2',
                           State(pc_initial=60 nstack_initial=1))},
             '$phi72.0': {('$58get_iter.24',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi78.0': {('$58get_iter.24',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi90.0': {('$58get_iter.24',
                           State(pc_initial=0 nstack_initial=0))}})
DEBUG 2022-02-14 16:38:18,972 changing phismap: defaultdict(<class 'set'>,
            {'$phi124.0': {('$58get_iter.24',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi140.0': {('$58get_iter.24',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi202.0': {('$58get_iter.24',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi202.1': {('$200get_iter.30',
                            State(pc_initial=140 nstack_initial=1))},
             '$phi204.0': {('$58get_iter.24',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi204.1': {('$200get_iter.30',
                            State(pc_initial=140 nstack_initial=1))},
             '$phi204.2': {('$202for_iter.3',
                            State(pc_initial=202 nstack_initial=2))},
             '$phi240.0': {('$58get_iter.24',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi240.1': {('$200get_iter.30',
                            State(pc_initial=140 nstack_initial=1))},
             '$phi240.2': {('$238get_iter.18',
                            State(pc_initial=204 nstack_initial=3))},
             '$phi242.0': {('$58get_iter.24',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi242.1': {('$200get_iter.30',
                            State(pc_initial=140 nstack_initial=1))},
             '$phi242.2': {('$238get_iter.18',
                            State(pc_initial=204 nstack_initial=3))},
             '$phi242.3': {('$240for_iter.4',
                            State(pc_initial=240 nstack_initial=3))},
             '$phi298.0': {('$58get_iter.24',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi298.1': {('$200get_iter.30',
                            State(pc_initial=140 nstack_initial=1))},
             '$phi300.0': {('$58get_iter.24',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi60.0': {('$58get_iter.24',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi62.0': {('$58get_iter.24',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi62.1': {('$60for_iter.2',
                           State(pc_initial=60 nstack_initial=1))},
             '$phi72.0': {('$58get_iter.24',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi78.0': {('$58get_iter.24',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi90.0': {('$58get_iter.24',
                           State(pc_initial=0 nstack_initial=0))}})
DEBUG 2022-02-14 16:38:18,973 keep phismap: {'$phi202.1': {('$200get_iter.30', State(pc_initial=140 nstack_initial=1))},
 '$phi204.2': {('$202for_iter.3', State(pc_initial=202 nstack_initial=2))},
 '$phi240.2': {('$238get_iter.18', State(pc_initial=204 nstack_initial=3))},
 '$phi242.3': {('$240for_iter.4', State(pc_initial=240 nstack_initial=3))},
 '$phi60.0': {('$58get_iter.24', State(pc_initial=0 nstack_initial=0))},
 '$phi62.1': {('$60for_iter.2', State(pc_initial=60 nstack_initial=1))}}
DEBUG 2022-02-14 16:38:18,973 new_out: defaultdict(<class 'dict'>,
            {State(pc_initial=0 nstack_initial=0): {'$phi60.0': '$58get_iter.24'},
             State(pc_initial=60 nstack_initial=1): {'$phi62.1': '$60for_iter.2'},
             State(pc_initial=140 nstack_initial=1): {'$phi202.1': '$200get_iter.30'},
             State(pc_initial=202 nstack_initial=2): {'$phi204.2': '$202for_iter.3'},
             State(pc_initial=204 nstack_initial=3): {'$phi240.2': '$238get_iter.18'},
             State(pc_initial=240 nstack_initial=3): {'$phi242.3': '$240for_iter.4'}})
DEBUG 2022-02-14 16:38:18,973 ----------------------DONE Prune PHIs-----------------------
DEBUG 2022-02-14 16:38:18,973 block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$E2.0'}), (4, {'item': '$E2.0', 'res': '$4load_method.1'}), (6, {'func': '$4load_method.1', 'args': [], 'res': '$6call_method.2'}), (8, {'value': '$6call_method.2'}), (10, {'res': '$const10.3'}), (12, {'value': '$const10.3'}), (14, {'res': '$14load_global.4'}), (16, {'item': '$14load_global.4', 'res': '$16load_attr.5'}), (18, {'res': '$const18.6'}), (20, {'res': '$n20.7'}), (22, {'res': '$const22.8'}), (24, {'lhs': '$n20.7', 'rhs': '$const22.8', 'res': '$24binary_add.9'}), (26, {'items': ['$const18.6', '$24binary_add.9'], 'res': '$26build_tuple.10'}), (28, {'res': '$28load_global.11'}), (30, {'item': '$28load_global.11', 'res': '$30load_attr.12'}), (32, {'res': '$const32.13'}), (34, {'func': '$16load_attr.5', 'args': ['$26build_tuple.10', '$30load_attr.12'], 'names': '$const32.13', 'res': '$34call_function_kw.14'}), (36, {'value': '$34call_function_kw.14'}), (38, {'res': '$const38.15'}), (40, {'res': '$comb40.16'}), (42, {'res': '$const42.17'}), (44, {'target': '$comb40.16', 'index': '$const42.17', 'value': '$const38.15'}), (46, {'res': '$46load_global.18'}), (48, {'res': '$const48.19'}), (50, {'res': '$n50.20'}), (52, {'res': '$const52.21'}), (54, {'lhs': '$n50.20', 'rhs': '$const52.21', 'res': '$54binary_add.22'}), (56, {'func': '$46load_global.18', 'args': ['$const48.19', '$54binary_add.22'], 'res': '$56call_function.23'}), (58, {'value': '$56call_function.23', 'res': '$58get_iter.24'})), outgoing_phis={'$phi60.0': '$58get_iter.24'}, blockstack=(), active_try_block=None, outgoing_edgepushed={60: ('$58get_iter.24',)})
DEBUG 2022-02-14 16:38:18,973 block_infos State(pc_initial=60 nstack_initial=1):
AdaptBlockInfo(insts=((60, {'iterator': '$phi60.0', 'pair': '$60for_iter.1', 'indval': '$60for_iter.2', 'pred': '$60for_iter.3'}),), outgoing_phis={'$phi62.1': '$60for_iter.2'}, blockstack=(), active_try_block=None, outgoing_edgepushed={302: (), 62: ('$phi60.0', '$60for_iter.2')})
DEBUG 2022-02-14 16:38:18,973 block_infos State(pc_initial=62 nstack_initial=2):
AdaptBlockInfo(insts=((62, {'value': '$phi62.1'}), (64, {'res': '$i64.2'}), (66, {'res': '$const66.3'}), (68, {'lhs': '$i64.2', 'rhs': '$const66.3', 'res': '$68compare_op.4'}), (70, {'pred': '$68compare_op.4'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={72: ('$phi62.0',), 78: ('$phi62.0',)})
DEBUG 2022-02-14 16:38:18,973 block_infos State(pc_initial=72 nstack_initial=1):
AdaptBlockInfo(insts=((72, {'res': '$oddloop72.1'}), (74, {'value': '$oddloop72.1'}), (76, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={140: ('$phi72.0',)})
DEBUG 2022-02-14 16:38:18,973 block_infos State(pc_initial=78 nstack_initial=1):
AdaptBlockInfo(insts=((78, {'res': '$i78.1'}), (80, {'res': '$const80.2'}), (82, {'lhs': '$i78.1', 'rhs': '$const80.2', 'res': '$82binary_modulo.3'}), (84, {'res': '$const84.4'}), (86, {'lhs': '$82binary_modulo.3', 'rhs': '$const84.4', 'res': '$86compare_op.5'}), (88, {'pred': '$86compare_op.5'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={90: ('$phi78.0',), 124: ('$phi78.0',)})
DEBUG 2022-02-14 16:38:18,973 block_infos State(pc_initial=90 nstack_initial=1):
AdaptBlockInfo(insts=((90, {'res': '$E_k90.1'}), (92, {'item': '$E_k90.1', 'res': '$92load_method.2'}), (94, {'func': '$92load_method.2', 'args': [], 'res': '$94call_method.3'}), (96, {'res': '$i96.4'}), (98, {'lhs': '$94call_method.3', 'rhs': '$i96.4', 'res': '$98binary_true_divide.5'}), (100, {'res': '$XD_S100.6'}), (102, {'res': '$D_S102.7'}), (104, {'lhs': '$XD_S100.6', 'rhs': '$D_S102.7', 'res': '$104binary_matrix_multiply.8'}), (106, {'res': '$const106.9'}), (108, {'lhs': '$104binary_matrix_multiply.8', 'rhs': '$const106.9', 'res': '$108binary_true_divide.10'}), (110, {'lhs': '$98binary_true_divide.5', 'rhs': '$108binary_true_divide.10', 'res': '$110binary_add.11'}), (112, {'value': '$110binary_add.11'}), (114, {'res': '$E_k114.12'}), (116, {'res': '$E116.13'}), (118, {'lhs': '$E_k114.12', 'rhs': '$E116.13', 'res': '$118inplace_multiply.14'}), (120, {'value': '$118inplace_multiply.14'}), (122, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={140: ('$phi90.0',)})
DEBUG 2022-02-14 16:38:18,974 block_infos State(pc_initial=124 nstack_initial=1):
AdaptBlockInfo(insts=((124, {'res': '$oddVX_S124.1'}), (126, {'res': '$D_S126.2'}), (128, {'lhs': '$oddVX_S124.1', 'rhs': '$D_S126.2', 'res': '$128binary_matrix_multiply.3'}), (130, {'value': '$128binary_matrix_multiply.3'}), (132, {'res': '$AX_S132.4'}), (134, {'res': '$D_S134.5'}), (136, {'lhs': '$AX_S132.4', 'rhs': '$D_S134.5', 'res': '$136binary_matrix_multiply.6'}), (138, {'value': '$136binary_matrix_multiply.6'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={140: ('$phi124.0',)})
DEBUG 2022-02-14 16:38:18,974 block_infos State(pc_initial=140 nstack_initial=1):
AdaptBlockInfo(insts=((140, {'res': '$const140.1'}), (142, {'value': '$const140.1'}), (144, {'res': '$const144.2'}), (146, {'res': '$count146.3'}), (148, {'lhs': '$const144.2', 'rhs': '$count146.3', 'res': '$148binary_subtract.4'}), (150, {'value': '$148binary_subtract.4'}), (152, {'res': '$comb152.5'}), (154, {'res': '$const154.6'}), (156, {'res': '$count156.7'}), (158, {'lhs': '$const154.6', 'rhs': '$count156.7', 'res': '$158binary_subtract.8'}), (160, {'res': '$const160.9'}), (162, {'res': '$const162.10'}), (164, {'start': '$const160.9', 'stop': '$const162.10', 'step': None, 'res': '$164build_slice.12', 'slicevar': '$164build_slice.11'}), (166, {'items': ['$158binary_subtract.8', '$164build_slice.12'], 'res': '$166build_tuple.13'}), (168, {'index': '$166build_tuple.13', 'target': '$comb152.5', 'res': '$168binary_subscr.14'}), (170, {'res': '$comb170.15'}), (172, {'res': '$count172.16'}), (174, {'res': '$const174.17'}), (176, {'res': '$const176.18'}), (178, {'start': '$const174.17', 'stop': '$const176.18', 'step': None, 'res': '$178build_slice.20', 'slicevar': '$178build_slice.19'}), (180, {'items': ['$count172.16', '$178build_slice.20'], 'res': '$180build_tuple.21'}), (182, {'target': '$comb170.15', 'index': '$180build_tuple.21', 'value': '$168binary_subscr.14'}), (184, {'res': '$184load_global.22'}), (186, {'res': '$const186.23'}), (188, {'res': '$n188.24'}), (190, {'res': '$i190.25'}), (192, {'lhs': '$n188.24', 'rhs': '$i190.25', 'res': '$192binary_floor_divide.26'}), (194, {'res': '$const194.27'}), (196, {'lhs': '$192binary_floor_divide.26', 'rhs': '$const194.27', 'res': '$196binary_add.28'}), (198, {'func': '$184load_global.22', 'args': ['$const186.23', '$196binary_add.28'], 'res': '$198call_function.29'}), (200, {'value': '$198call_function.29', 'res': '$200get_iter.30'})), outgoing_phis={'$phi202.1': '$200get_iter.30'}, blockstack=(), active_try_block=None, outgoing_edgepushed={202: ('$phi140.0', '$200get_iter.30')})
DEBUG 2022-02-14 16:38:18,974 block_infos State(pc_initial=202 nstack_initial=2):
AdaptBlockInfo(insts=((202, {'iterator': '$phi202.1', 'pair': '$202for_iter.2', 'indval': '$202for_iter.3', 'pred': '$202for_iter.4'}),), outgoing_phis={'$phi204.2': '$202for_iter.3'}, blockstack=(), active_try_block=None, outgoing_edgepushed={300: ('$phi202.0',), 204: ('$phi202.0', '$phi202.1', '$202for_iter.3')})
DEBUG 2022-02-14 16:38:18,974 block_infos State(pc_initial=204 nstack_initial=3):
AdaptBlockInfo(insts=((204, {'value': '$phi204.2'}), (206, {'res': '$powfactor206.3'}), (208, {'res': '$factor208.4'}), (210, {'res': '$j210.5'}), (212, {'lhs': '$factor208.4', 'rhs': '$j210.5', 'res': '$212binary_true_divide.6'}), (214, {'lhs': '$powfactor206.3', 'rhs': '$212binary_true_divide.6', 'res': '$214inplace_multiply.7'}), (216, {'value': '$214inplace_multiply.7'}), (218, {'res': '$218load_global.8'}), (220, {'res': '$i220.9'}), (222, {'res': '$j222.10'}), (224, {'lhs': '$i220.9', 'rhs': '$j222.10', 'res': '$224binary_multiply.11'}), (226, {'res': '$const226.12'}), (228, {'lhs': '$224binary_multiply.11', 'rhs': '$const226.12', 'res': '$228binary_add.13'}), (230, {'res': '$n230.14'}), (232, {'res': '$const232.15'}), (234, {'lhs': '$n230.14', 'rhs': '$const232.15', 'res': '$234binary_add.16'}), (236, {'func': '$218load_global.8', 'args': ['$228binary_add.13', '$234binary_add.16'], 'res': '$236call_function.17'}), (238, {'value': '$236call_function.17', 'res': '$238get_iter.18'})), outgoing_phis={'$phi240.2': '$238get_iter.18'}, blockstack=(), active_try_block=None, outgoing_edgepushed={240: ('$phi204.0', '$phi204.1', '$238get_iter.18')})
DEBUG 2022-02-14 16:38:18,974 block_infos State(pc_initial=240 nstack_initial=3):
AdaptBlockInfo(insts=((240, {'iterator': '$phi240.2', 'pair': '$240for_iter.3', 'indval': '$240for_iter.4', 'pred': '$240for_iter.5'}),), outgoing_phis={'$phi242.3': '$240for_iter.4'}, blockstack=(), active_try_block=None, outgoing_edgepushed={298: ('$phi240.0', '$phi240.1'), 242: ('$phi240.0', '$phi240.1', '$phi240.2', '$240for_iter.4')})
DEBUG 2022-02-14 16:38:18,974 block_infos State(pc_initial=242 nstack_initial=4):
AdaptBlockInfo(insts=((242, {'value': '$phi242.3'}), (244, {'res': '$comb244.4'}), (246, {'res': '$count246.5'}), (248, {'res': '$k248.6'}), (250, {'res': '$const250.7'}), (252, {'lhs': '$k248.6', 'rhs': '$const250.7', 'res': '$252binary_subtract.8'}), (254, {'items': ['$count246.5', '$252binary_subtract.8'], 'res': '$254build_tuple.9'}), (256, {'orig': ['$comb244.4', '$254build_tuple.9'], 'duped': ['$256dup_top_two.10', '$256dup_top_two.11']}), (258, {'index': '$256dup_top_two.11', 'target': '$256dup_top_two.10', 'res': '$258binary_subscr.12'}), (260, {'res': '$comb260.13'}), (262, {'res': '$const262.14'}), (264, {'res': '$count264.15'}), (266, {'lhs': '$const262.14', 'rhs': '$count264.15', 'res': '$266binary_subtract.16'}), (268, {'res': '$k268.17'}), (270, {'res': '$i270.18'}), (272, {'res': '$j272.19'}), (274, {'lhs': '$i270.18', 'rhs': '$j272.19', 'res': '$274binary_multiply.20'}), (276, {'lhs': '$k268.17', 'rhs': '$274binary_multiply.20', 'res': '$276binary_subtract.21'}), (278, {'res': '$const278.22'}), (280, {'lhs': '$276binary_subtract.21', 'rhs': '$const278.22', 'res': '$280binary_subtract.23'}), (282, {'items': ['$266binary_subtract.16', '$280binary_subtract.23'], 'res': '$282build_tuple.24'}), (284, {'index': '$282build_tuple.24', 'target': '$comb260.13', 'res': '$284binary_subscr.25'}), (286, {'res': '$powfactor286.26'}), (288, {'lhs': '$284binary_subscr.25', 'rhs': '$powfactor286.26', 'res': '$288binary_multiply.27'}), (290, {'lhs': '$258binary_subscr.12', 'rhs': '$288binary_multiply.27', 'res': '$290inplace_add.28'}), (294, {'target': '$comb244.4', 'index': '$254build_tuple.9', 'value': '$290inplace_add.28'}), (296, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={240: ('$phi242.0', '$phi242.1', '$phi242.2')})
DEBUG 2022-02-14 16:38:18,974 block_infos State(pc_initial=298 nstack_initial=2):
AdaptBlockInfo(insts=((298, {}),), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={202: ('$phi298.0', '$phi298.1')})
DEBUG 2022-02-14 16:38:18,974 block_infos State(pc_initial=300 nstack_initial=1):
AdaptBlockInfo(insts=((300, {}),), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={60: ('$phi300.0',)})
DEBUG 2022-02-14 16:38:18,974 block_infos State(pc_initial=302 nstack_initial=0):
AdaptBlockInfo(insts=((302, {'res': '$comb302.0'}), (304, {'res': '$count304.1'}), (306, {'res': '$const306.2'}), (308, {'res': '$const308.3'}), (310, {'start': '$const306.2', 'stop': '$const308.3', 'step': None, 'res': '$310build_slice.5', 'slicevar': '$310build_slice.4'}), (312, {'items': ['$count304.1', '$310build_slice.5'], 'res': '$312build_tuple.6'}), (314, {'index': '$312build_tuple.6', 'target': '$comb302.0', 'res': '$314binary_subscr.7'}), (316, {'retval': '$314binary_subscr.7', 'castval': '$316return_value.8'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG 2022-02-14 16:38:18,978 label 0:
    E = arg(0, name=E)                       ['E']
    AX_S = arg(1, name=AX_S)                 ['AX_S']
    XD_S = arg(2, name=XD_S)                 ['XD_S']
    D_S = arg(3, name=D_S)                   ['D_S']
    n = arg(4, name=n)                       ['n']
    oddloop = arg(5, name=oddloop)           ['oddloop']
    oddVX_S = arg(6, name=oddVX_S)           ['oddVX_S']
    $4load_method.1 = getattr(value=E, attr=copy) ['$4load_method.1', 'E']
    E_k = call $4load_method.1(func=$4load_method.1, args=[], kws=(), vararg=None, target=None) ['$4load_method.1', 'E_k']
    count = const(int, 0)                    ['count']
    $14load_global.4 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>) ['$14load_global.4']
    $16load_attr.5 = getattr(value=$14load_global.4, attr=zeros) ['$14load_global.4', '$16load_attr.5']
    $const18.6 = const(int, 2)               ['$const18.6']
    $const22.8 = const(int, 1)               ['$const22.8']
    $24binary_add.9 = n + $const22.8         ['$24binary_add.9', '$const22.8', 'n']
    $26build_tuple.10 = build_tuple(items=[Var($const18.6, _loop_hafnian_subroutines.py:162), Var($24binary_add.9, _loop_hafnian_subroutines.py:162)]) ['$24binary_add.9', '$26build_tuple.10', '$const18.6']
    $28load_global.11 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>) ['$28load_global.11']
    $30load_attr.12 = getattr(value=$28load_global.11, attr=complex128) ['$28load_global.11', '$30load_attr.12']
    comb = call $16load_attr.5($26build_tuple.10, func=$16load_attr.5, args=[Var($26build_tuple.10, _loop_hafnian_subroutines.py:162)], kws=[('dtype', Var($30load_attr.12, _loop_hafnian_subroutines.py:162))], vararg=None, target=None) ['$16load_attr.5', '$26build_tuple.10', '$30load_attr.12', 'comb']
    $const38.15 = const(int, 1)              ['$const38.15']
    $const_0 = const(int, 0)                 ['$const_0']
    $const_0.1 = const(int, 0)               ['$const_0.1']
    $const42.17 = build_tuple(items=[Var($const_0, _loop_hafnian_subroutines.py:163), Var($const_0.1, _loop_hafnian_subroutines.py:163)]) ['$const42.17', '$const_0', '$const_0.1']
    comb[$const42.17] = $const38.15          ['$const38.15', '$const42.17', 'comb']
    $46load_global.18 = global(range: <class 'range'>) ['$46load_global.18']
    $const48.19 = const(int, 1)              ['$const48.19']
    $const52.21 = const(int, 1)              ['$const52.21']
    $54binary_add.22 = n + $const52.21       ['$54binary_add.22', '$const52.21', 'n']
    $56call_function.23 = call $46load_global.18($const48.19, $54binary_add.22, func=$46load_global.18, args=[Var($const48.19, _loop_hafnian_subroutines.py:164), Var($54binary_add.22, _loop_hafnian_subroutines.py:164)], kws=(), vararg=None, target=None) ['$46load_global.18', '$54binary_add.22', '$56call_function.23', '$const48.19']
    $58get_iter.24 = getiter(value=$56call_function.23) ['$56call_function.23', '$58get_iter.24']
    $phi60.0 = $58get_iter.24                ['$58get_iter.24', '$phi60.0']
    jump 60                                  []
label 60:
    $60for_iter.1 = iternext(value=$phi60.0) ['$60for_iter.1', '$phi60.0']
    $60for_iter.2 = pair_first(value=$60for_iter.1) ['$60for_iter.1', '$60for_iter.2']
    $60for_iter.3 = pair_second(value=$60for_iter.1) ['$60for_iter.1', '$60for_iter.3']
    $phi62.1 = $60for_iter.2                 ['$60for_iter.2', '$phi62.1']
    branch $60for_iter.3, 62, 302            ['$60for_iter.3']
label 62:
    i = $phi62.1                             ['$phi62.1', 'i']
    $const66.3 = const(int, 1)               ['$const66.3']
    $68compare_op.4 = i == $const66.3        ['$68compare_op.4', '$const66.3', 'i']
    bool70 = global(bool: <class 'bool'>)    ['bool70']
    $70pred = call bool70($68compare_op.4, func=bool70, args=(Var($68compare_op.4, _loop_hafnian_subroutines.py:165),), kws=(), vararg=None, target=None) ['$68compare_op.4', '$70pred', 'bool70']
    branch $70pred, 72, 78                   ['$70pred']
label 72:
    factor = oddloop                         ['factor', 'oddloop']
    jump 140                                 []
label 78:
    $const80.2 = const(int, 2)               ['$const80.2']
    $82binary_modulo.3 = i % $const80.2      ['$82binary_modulo.3', '$const80.2', 'i']
    $const84.4 = const(int, 0)               ['$const84.4']
    $86compare_op.5 = $82binary_modulo.3 == $const84.4 ['$82binary_modulo.3', '$86compare_op.5', '$const84.4']
    bool88 = global(bool: <class 'bool'>)    ['bool88']
    $88pred = call bool88($86compare_op.5, func=bool88, args=(Var($86compare_op.5, _loop_hafnian_subroutines.py:167),), kws=(), vararg=None, target=None) ['$86compare_op.5', '$88pred', 'bool88']
    branch $88pred, 90, 124                  ['$88pred']
label 90:
    $92load_method.2 = getattr(value=E_k, attr=sum) ['$92load_method.2', 'E_k']
    $94call_method.3 = call $92load_method.2(func=$92load_method.2, args=[], kws=(), vararg=None, target=None) ['$92load_method.2', '$94call_method.3']
    $98binary_true_divide.5 = $94call_method.3 / i ['$94call_method.3', '$98binary_true_divide.5', 'i']
    $104binary_matrix_multiply.8 = XD_S <built-in function matmul> D_S ['$104binary_matrix_multiply.8', 'D_S', 'XD_S']
    $const106.9 = const(int, 2)              ['$const106.9']
    $108binary_true_divide.10 = $104binary_matrix_multiply.8 / $const106.9 ['$104binary_matrix_multiply.8', '$108binary_true_divide.10', '$const106.9']
    factor = $98binary_true_divide.5 + $108binary_true_divide.10 ['$108binary_true_divide.10', '$98binary_true_divide.5', 'factor']
    $118inplace_multiply.14 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=E_k, rhs=E, static_lhs=Undefined, static_rhs=Undefined) ['$118inplace_multiply.14', 'E', 'E_k']
    E_k = $118inplace_multiply.14            ['$118inplace_multiply.14', 'E_k']
    jump 140                                 []
label 124:
    factor = oddVX_S <built-in function matmul> D_S ['D_S', 'factor', 'oddVX_S']
    $136binary_matrix_multiply.6 = AX_S <built-in function matmul> D_S ['$136binary_matrix_multiply.6', 'AX_S', 'D_S']
    D_S = $136binary_matrix_multiply.6       ['$136binary_matrix_multiply.6', 'D_S']
    jump 140                                 []
label 140:
    powfactor = const(int, 1)                ['powfactor']
    $const144.2 = const(int, 1)              ['$const144.2']
    $148binary_subtract.4 = $const144.2 - count ['$148binary_subtract.4', '$const144.2', 'count']
    count = $148binary_subtract.4            ['$148binary_subtract.4', 'count']
    $const154.6 = const(int, 1)              ['$const154.6']
    $158binary_subtract.8 = $const154.6 - count ['$158binary_subtract.8', '$const154.6', 'count']
    $const160.9 = const(NoneType, None)      ['$const160.9']
    $const162.10 = const(NoneType, None)     ['$const162.10']
    $164build_slice.11 = global(slice: <class 'slice'>) ['$164build_slice.11']
    $164build_slice.12 = call $164build_slice.11($const160.9, $const162.10, func=$164build_slice.11, args=(Var($const160.9, _loop_hafnian_subroutines.py:176), Var($const162.10, _loop_hafnian_subroutines.py:176)), kws=(), vararg=None, target=None) ['$164build_slice.11', '$164build_slice.12', '$const160.9', '$const162.10']
    $166build_tuple.13 = build_tuple(items=[Var($158binary_subtract.8, _loop_hafnian_subroutines.py:176), Var($164build_slice.12, _loop_hafnian_subroutines.py:176)]) ['$158binary_subtract.8', '$164build_slice.12', '$166build_tuple.13']
    $168binary_subscr.14 = getitem(value=comb, index=$166build_tuple.13, fn=<built-in function getitem>) ['$166build_tuple.13', '$168binary_subscr.14', 'comb']
    $const174.17 = const(NoneType, None)     ['$const174.17']
    $const176.18 = const(NoneType, None)     ['$const176.18']
    $178build_slice.19 = global(slice: <class 'slice'>) ['$178build_slice.19']
    $178build_slice.20 = call $178build_slice.19($const174.17, $const176.18, func=$178build_slice.19, args=(Var($const174.17, _loop_hafnian_subroutines.py:176), Var($const176.18, _loop_hafnian_subroutines.py:176)), kws=(), vararg=None, target=None) ['$178build_slice.19', '$178build_slice.20', '$const174.17', '$const176.18']
    $180build_tuple.21 = build_tuple(items=[Var(count, _loop_hafnian_subroutines.py:161), Var($178build_slice.20, _loop_hafnian_subroutines.py:176)]) ['$178build_slice.20', '$180build_tuple.21', 'count']
    comb[$180build_tuple.21] = $168binary_subscr.14 ['$168binary_subscr.14', '$180build_tuple.21', 'comb']
    $184load_global.22 = global(range: <class 'range'>) ['$184load_global.22']
    $const186.23 = const(int, 1)             ['$const186.23']
    $192binary_floor_divide.26 = n // i      ['$192binary_floor_divide.26', 'i', 'n']
    $const194.27 = const(int, 1)             ['$const194.27']
    $196binary_add.28 = $192binary_floor_divide.26 + $const194.27 ['$192binary_floor_divide.26', '$196binary_add.28', '$const194.27']
    $198call_function.29 = call $184load_global.22($const186.23, $196binary_add.28, func=$184load_global.22, args=[Var($const186.23, _loop_hafnian_subroutines.py:177), Var($196binary_add.28, _loop_hafnian_subroutines.py:177)], kws=(), vararg=None, target=None) ['$184load_global.22', '$196binary_add.28', '$198call_function.29', '$const186.23']
    $200get_iter.30 = getiter(value=$198call_function.29) ['$198call_function.29', '$200get_iter.30']
    $phi202.1 = $200get_iter.30              ['$200get_iter.30', '$phi202.1']
    jump 202                                 []
label 202:
    $202for_iter.2 = iternext(value=$phi202.1) ['$202for_iter.2', '$phi202.1']
    $202for_iter.3 = pair_first(value=$202for_iter.2) ['$202for_iter.2', '$202for_iter.3']
    $202for_iter.4 = pair_second(value=$202for_iter.2) ['$202for_iter.2', '$202for_iter.4']
    $phi204.2 = $202for_iter.3               ['$202for_iter.3', '$phi204.2']
    branch $202for_iter.4, 204, 300          ['$202for_iter.4']
label 204:
    j = $phi204.2                            ['$phi204.2', 'j']
    $212binary_true_divide.6 = factor / j    ['$212binary_true_divide.6', 'factor', 'j']
    $214inplace_multiply.7 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=powfactor, rhs=$212binary_true_divide.6, static_lhs=Undefined, static_rhs=Undefined) ['$212binary_true_divide.6', '$214inplace_multiply.7', 'powfactor']
    powfactor = $214inplace_multiply.7       ['$214inplace_multiply.7', 'powfactor']
    $218load_global.8 = global(range: <class 'range'>) ['$218load_global.8']
    $224binary_multiply.11 = i * j           ['$224binary_multiply.11', 'i', 'j']
    $const226.12 = const(int, 1)             ['$const226.12']
    $228binary_add.13 = $224binary_multiply.11 + $const226.12 ['$224binary_multiply.11', '$228binary_add.13', '$const226.12']
    $const232.15 = const(int, 2)             ['$const232.15']
    $234binary_add.16 = n + $const232.15     ['$234binary_add.16', '$const232.15', 'n']
    $236call_function.17 = call $218load_global.8($228binary_add.13, $234binary_add.16, func=$218load_global.8, args=[Var($228binary_add.13, _loop_hafnian_subroutines.py:179), Var($234binary_add.16, _loop_hafnian_subroutines.py:179)], kws=(), vararg=None, target=None) ['$218load_global.8', '$228binary_add.13', '$234binary_add.16', '$236call_function.17']
    $238get_iter.18 = getiter(value=$236call_function.17) ['$236call_function.17', '$238get_iter.18']
    $phi240.2 = $238get_iter.18              ['$238get_iter.18', '$phi240.2']
    jump 240                                 []
label 240:
    $240for_iter.3 = iternext(value=$phi240.2) ['$240for_iter.3', '$phi240.2']
    $240for_iter.4 = pair_first(value=$240for_iter.3) ['$240for_iter.3', '$240for_iter.4']
    $240for_iter.5 = pair_second(value=$240for_iter.3) ['$240for_iter.3', '$240for_iter.5']
    $phi242.3 = $240for_iter.4               ['$240for_iter.4', '$phi242.3']
    branch $240for_iter.5, 242, 298          ['$240for_iter.5']
label 242:
    k = $phi242.3                            ['$phi242.3', 'k']
    $const250.7 = const(int, 1)              ['$const250.7']
    $252binary_subtract.8 = k - $const250.7  ['$252binary_subtract.8', '$const250.7', 'k']
    $254build_tuple.9 = build_tuple(items=[Var(count, _loop_hafnian_subroutines.py:161), Var($252binary_subtract.8, _loop_hafnian_subroutines.py:180)]) ['$252binary_subtract.8', '$254build_tuple.9', 'count']
    $258binary_subscr.12 = getitem(value=comb, index=$254build_tuple.9, fn=<built-in function getitem>) ['$254build_tuple.9', '$258binary_subscr.12', 'comb']
    $const262.14 = const(int, 1)             ['$const262.14']
    $266binary_subtract.16 = $const262.14 - count ['$266binary_subtract.16', '$const262.14', 'count']
    $274binary_multiply.20 = i * j           ['$274binary_multiply.20', 'i', 'j']
    $276binary_subtract.21 = k - $274binary_multiply.20 ['$274binary_multiply.20', '$276binary_subtract.21', 'k']
    $const278.22 = const(int, 1)             ['$const278.22']
    $280binary_subtract.23 = $276binary_subtract.21 - $const278.22 ['$276binary_subtract.21', '$280binary_subtract.23', '$const278.22']
    $282build_tuple.24 = build_tuple(items=[Var($266binary_subtract.16, _loop_hafnian_subroutines.py:180), Var($280binary_subtract.23, _loop_hafnian_subroutines.py:180)]) ['$266binary_subtract.16', '$280binary_subtract.23', '$282build_tuple.24']
    $284binary_subscr.25 = getitem(value=comb, index=$282build_tuple.24, fn=<built-in function getitem>) ['$282build_tuple.24', '$284binary_subscr.25', 'comb']
    $288binary_multiply.27 = $284binary_subscr.25 * powfactor ['$284binary_subscr.25', '$288binary_multiply.27', 'powfactor']
    $290inplace_add.28 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$258binary_subscr.12, rhs=$288binary_multiply.27, static_lhs=Undefined, static_rhs=Undefined) ['$258binary_subscr.12', '$288binary_multiply.27', '$290inplace_add.28']
    comb[$254build_tuple.9] = $290inplace_add.28 ['$254build_tuple.9', '$290inplace_add.28', 'comb']
    jump 240                                 []
label 298:
    jump 202                                 []
label 300:
    jump 60                                  []
label 302:
    $const306.2 = const(NoneType, None)      ['$const306.2']
    $const308.3 = const(NoneType, None)      ['$const308.3']
    $310build_slice.4 = global(slice: <class 'slice'>) ['$310build_slice.4']
    $310build_slice.5 = call $310build_slice.4($const306.2, $const308.3, func=$310build_slice.4, args=(Var($const306.2, _loop_hafnian_subroutines.py:182), Var($const308.3, _loop_hafnian_subroutines.py:182)), kws=(), vararg=None, target=None) ['$310build_slice.4', '$310build_slice.5', '$const306.2', '$const308.3']
    $312build_tuple.6 = build_tuple(items=[Var(count, _loop_hafnian_subroutines.py:161), Var($310build_slice.5, _loop_hafnian_subroutines.py:182)]) ['$310build_slice.5', '$312build_tuple.6', 'count']
    $314binary_subscr.7 = getitem(value=comb, index=$312build_tuple.6, fn=<built-in function getitem>) ['$312build_tuple.6', '$314binary_subscr.7', 'comb']
    $316return_value.8 = cast(value=$314binary_subscr.7) ['$314binary_subscr.7', '$316return_value.8']
    return $316return_value.8                ['$316return_value.8']

DEBUG 2022-02-14 16:38:18,989 ==== SSA block analysis pass on 0
DEBUG 2022-02-14 16:38:18,989 Running <numba.core.ssa._GatherDefsHandler object at 0x7fa046317220>
DEBUG 2022-02-14 16:38:18,989 on stmt: E = arg(0, name=E)
DEBUG 2022-02-14 16:38:18,989 on stmt: AX_S = arg(1, name=AX_S)
DEBUG 2022-02-14 16:38:18,989 on stmt: XD_S = arg(2, name=XD_S)
DEBUG 2022-02-14 16:38:18,989 on stmt: D_S = arg(3, name=D_S)
DEBUG 2022-02-14 16:38:18,989 on stmt: n = arg(4, name=n)
DEBUG 2022-02-14 16:38:18,989 on stmt: oddloop = arg(5, name=oddloop)
DEBUG 2022-02-14 16:38:18,989 on stmt: oddVX_S = arg(6, name=oddVX_S)
DEBUG 2022-02-14 16:38:18,989 on stmt: $4load_method.1 = getattr(value=E, attr=copy)
DEBUG 2022-02-14 16:38:18,989 on stmt: E_k = call $4load_method.1(func=$4load_method.1, args=[], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:18,989 on stmt: count = const(int, 0)
DEBUG 2022-02-14 16:38:18,989 on stmt: $14load_global.4 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:38:18,989 on stmt: $16load_attr.5 = getattr(value=$14load_global.4, attr=zeros)
DEBUG 2022-02-14 16:38:18,989 on stmt: $const18.6 = const(int, 2)
DEBUG 2022-02-14 16:38:18,989 on stmt: $const22.8 = const(int, 1)
DEBUG 2022-02-14 16:38:18,989 on stmt: $24binary_add.9 = n + $const22.8
DEBUG 2022-02-14 16:38:18,989 on stmt: $26build_tuple.10 = build_tuple(items=[Var($const18.6, _loop_hafnian_subroutines.py:162), Var($24binary_add.9, _loop_hafnian_subroutines.py:162)])
DEBUG 2022-02-14 16:38:18,990 on stmt: $28load_global.11 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:38:18,990 on stmt: $30load_attr.12 = getattr(value=$28load_global.11, attr=complex128)
DEBUG 2022-02-14 16:38:18,990 on stmt: comb = call $16load_attr.5($26build_tuple.10, func=$16load_attr.5, args=[Var($26build_tuple.10, _loop_hafnian_subroutines.py:162)], kws=[('dtype', Var($30load_attr.12, _loop_hafnian_subroutines.py:162))], vararg=None, target=None)
DEBUG 2022-02-14 16:38:18,990 on stmt: $const38.15 = const(int, 1)
DEBUG 2022-02-14 16:38:18,990 on stmt: $const_0 = const(int, 0)
DEBUG 2022-02-14 16:38:18,990 on stmt: $const_0.1 = const(int, 0)
DEBUG 2022-02-14 16:38:18,990 on stmt: $const42.17 = build_tuple(items=[Var($const_0, _loop_hafnian_subroutines.py:163), Var($const_0.1, _loop_hafnian_subroutines.py:163)])
DEBUG 2022-02-14 16:38:18,990 on stmt: comb[(0, 0)] = $const38.15
DEBUG 2022-02-14 16:38:18,990 on stmt: $46load_global.18 = global(range: <class 'range'>)
DEBUG 2022-02-14 16:38:18,990 on stmt: $const48.19 = const(int, 1)
DEBUG 2022-02-14 16:38:18,990 on stmt: $const52.21 = const(int, 1)
DEBUG 2022-02-14 16:38:18,990 on stmt: $54binary_add.22 = n + $const52.21
DEBUG 2022-02-14 16:38:18,990 on stmt: $56call_function.23 = call $46load_global.18($const48.19, $54binary_add.22, func=$46load_global.18, args=[Var($const48.19, _loop_hafnian_subroutines.py:164), Var($54binary_add.22, _loop_hafnian_subroutines.py:164)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:18,990 on stmt: $58get_iter.24 = getiter(value=$56call_function.23)
DEBUG 2022-02-14 16:38:18,990 on stmt: $phi60.0 = $58get_iter.24
DEBUG 2022-02-14 16:38:18,990 on stmt: jump 60
DEBUG 2022-02-14 16:38:18,990 ==== SSA block analysis pass on 60
DEBUG 2022-02-14 16:38:18,990 Running <numba.core.ssa._GatherDefsHandler object at 0x7fa046317220>
DEBUG 2022-02-14 16:38:18,990 on stmt: $60for_iter.1 = iternext(value=$phi60.0)
DEBUG 2022-02-14 16:38:18,990 on stmt: $60for_iter.2 = pair_first(value=$60for_iter.1)
DEBUG 2022-02-14 16:38:18,990 on stmt: $60for_iter.3 = pair_second(value=$60for_iter.1)
DEBUG 2022-02-14 16:38:18,990 on stmt: $phi62.1 = $60for_iter.2
DEBUG 2022-02-14 16:38:18,990 on stmt: branch $60for_iter.3, 62, 302
DEBUG 2022-02-14 16:38:18,990 ==== SSA block analysis pass on 62
DEBUG 2022-02-14 16:38:18,991 Running <numba.core.ssa._GatherDefsHandler object at 0x7fa046317220>
DEBUG 2022-02-14 16:38:18,991 on stmt: i = $phi62.1
DEBUG 2022-02-14 16:38:18,991 on stmt: $const66.3 = const(int, 1)
DEBUG 2022-02-14 16:38:18,991 on stmt: $68compare_op.4 = i == $const66.3
DEBUG 2022-02-14 16:38:18,991 on stmt: bool70 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:38:18,991 on stmt: $70pred = call bool70($68compare_op.4, func=bool70, args=(Var($68compare_op.4, _loop_hafnian_subroutines.py:165),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:18,991 on stmt: branch $70pred, 72, 78
DEBUG 2022-02-14 16:38:18,991 ==== SSA block analysis pass on 72
DEBUG 2022-02-14 16:38:18,991 Running <numba.core.ssa._GatherDefsHandler object at 0x7fa046317220>
DEBUG 2022-02-14 16:38:18,991 on stmt: factor = oddloop
DEBUG 2022-02-14 16:38:18,991 on stmt: jump 140
DEBUG 2022-02-14 16:38:18,991 ==== SSA block analysis pass on 78
DEBUG 2022-02-14 16:38:18,991 Running <numba.core.ssa._GatherDefsHandler object at 0x7fa046317220>
DEBUG 2022-02-14 16:38:18,991 on stmt: $const80.2 = const(int, 2)
DEBUG 2022-02-14 16:38:18,991 on stmt: $82binary_modulo.3 = i % $const80.2
DEBUG 2022-02-14 16:38:18,991 on stmt: $const84.4 = const(int, 0)
DEBUG 2022-02-14 16:38:18,991 on stmt: $86compare_op.5 = $82binary_modulo.3 == $const84.4
DEBUG 2022-02-14 16:38:18,991 on stmt: bool88 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:38:18,991 on stmt: $88pred = call bool88($86compare_op.5, func=bool88, args=(Var($86compare_op.5, _loop_hafnian_subroutines.py:167),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:18,991 on stmt: branch $88pred, 90, 124
DEBUG 2022-02-14 16:38:18,991 ==== SSA block analysis pass on 90
DEBUG 2022-02-14 16:38:18,991 Running <numba.core.ssa._GatherDefsHandler object at 0x7fa046317220>
DEBUG 2022-02-14 16:38:18,991 on stmt: $92load_method.2 = getattr(value=E_k, attr=sum)
DEBUG 2022-02-14 16:38:18,991 on stmt: $94call_method.3 = call $92load_method.2(func=$92load_method.2, args=[], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:18,991 on stmt: $98binary_true_divide.5 = $94call_method.3 / i
DEBUG 2022-02-14 16:38:18,991 on stmt: $104binary_matrix_multiply.8 = XD_S <built-in function matmul> D_S
DEBUG 2022-02-14 16:38:18,992 on stmt: $const106.9 = const(int, 2)
DEBUG 2022-02-14 16:38:18,992 on stmt: $108binary_true_divide.10 = $104binary_matrix_multiply.8 / $const106.9
DEBUG 2022-02-14 16:38:18,992 on stmt: factor = $98binary_true_divide.5 + $108binary_true_divide.10
DEBUG 2022-02-14 16:38:18,992 on stmt: $118inplace_multiply.14 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=E_k, rhs=E, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:38:18,992 on stmt: E_k = $118inplace_multiply.14
DEBUG 2022-02-14 16:38:18,992 on stmt: jump 140
DEBUG 2022-02-14 16:38:18,992 ==== SSA block analysis pass on 124
DEBUG 2022-02-14 16:38:18,992 Running <numba.core.ssa._GatherDefsHandler object at 0x7fa046317220>
DEBUG 2022-02-14 16:38:18,992 on stmt: factor = oddVX_S <built-in function matmul> D_S
DEBUG 2022-02-14 16:38:18,992 on stmt: $136binary_matrix_multiply.6 = AX_S <built-in function matmul> D_S
DEBUG 2022-02-14 16:38:18,992 on stmt: D_S = $136binary_matrix_multiply.6
DEBUG 2022-02-14 16:38:18,992 on stmt: jump 140
DEBUG 2022-02-14 16:38:18,992 ==== SSA block analysis pass on 140
DEBUG 2022-02-14 16:38:18,992 Running <numba.core.ssa._GatherDefsHandler object at 0x7fa046317220>
DEBUG 2022-02-14 16:38:18,992 on stmt: powfactor = const(int, 1)
DEBUG 2022-02-14 16:38:18,992 on stmt: $const144.2 = const(int, 1)
DEBUG 2022-02-14 16:38:18,992 on stmt: $148binary_subtract.4 = $const144.2 - count
DEBUG 2022-02-14 16:38:18,992 on stmt: count = $148binary_subtract.4
DEBUG 2022-02-14 16:38:18,992 on stmt: $const154.6 = const(int, 1)
DEBUG 2022-02-14 16:38:18,992 on stmt: $158binary_subtract.8 = $const154.6 - count
DEBUG 2022-02-14 16:38:18,992 on stmt: $const160.9 = const(NoneType, None)
DEBUG 2022-02-14 16:38:18,992 on stmt: $const162.10 = const(NoneType, None)
DEBUG 2022-02-14 16:38:18,992 on stmt: $164build_slice.11 = global(slice: <class 'slice'>)
DEBUG 2022-02-14 16:38:18,992 on stmt: $164build_slice.12 = call $164build_slice.11($const160.9, $const162.10, func=$164build_slice.11, args=(Var($const160.9, _loop_hafnian_subroutines.py:176), Var($const162.10, _loop_hafnian_subroutines.py:176)), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:18,992 on stmt: $166build_tuple.13 = build_tuple(items=[Var($158binary_subtract.8, _loop_hafnian_subroutines.py:176), Var($164build_slice.12, _loop_hafnian_subroutines.py:176)])
DEBUG 2022-02-14 16:38:18,992 on stmt: $168binary_subscr.14 = getitem(value=comb, index=$166build_tuple.13, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:18,993 on stmt: $const174.17 = const(NoneType, None)
DEBUG 2022-02-14 16:38:18,993 on stmt: $const176.18 = const(NoneType, None)
DEBUG 2022-02-14 16:38:18,993 on stmt: $178build_slice.19 = global(slice: <class 'slice'>)
DEBUG 2022-02-14 16:38:18,993 on stmt: $178build_slice.20 = call $178build_slice.19($const174.17, $const176.18, func=$178build_slice.19, args=(Var($const174.17, _loop_hafnian_subroutines.py:176), Var($const176.18, _loop_hafnian_subroutines.py:176)), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:18,993 on stmt: $180build_tuple.21 = build_tuple(items=[Var(count, _loop_hafnian_subroutines.py:161), Var($178build_slice.20, _loop_hafnian_subroutines.py:176)])
DEBUG 2022-02-14 16:38:18,993 on stmt: comb[$180build_tuple.21] = $168binary_subscr.14
DEBUG 2022-02-14 16:38:18,993 on stmt: $184load_global.22 = global(range: <class 'range'>)
DEBUG 2022-02-14 16:38:18,993 on stmt: $const186.23 = const(int, 1)
DEBUG 2022-02-14 16:38:18,993 on stmt: $192binary_floor_divide.26 = n // i
DEBUG 2022-02-14 16:38:18,993 on stmt: $const194.27 = const(int, 1)
DEBUG 2022-02-14 16:38:18,993 on stmt: $196binary_add.28 = $192binary_floor_divide.26 + $const194.27
DEBUG 2022-02-14 16:38:18,993 on stmt: $198call_function.29 = call $184load_global.22($const186.23, $196binary_add.28, func=$184load_global.22, args=[Var($const186.23, _loop_hafnian_subroutines.py:177), Var($196binary_add.28, _loop_hafnian_subroutines.py:177)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:18,993 on stmt: $200get_iter.30 = getiter(value=$198call_function.29)
DEBUG 2022-02-14 16:38:18,993 on stmt: $phi202.1 = $200get_iter.30
DEBUG 2022-02-14 16:38:18,993 on stmt: jump 202
DEBUG 2022-02-14 16:38:18,993 ==== SSA block analysis pass on 202
DEBUG 2022-02-14 16:38:18,993 Running <numba.core.ssa._GatherDefsHandler object at 0x7fa046317220>
DEBUG 2022-02-14 16:38:18,993 on stmt: $202for_iter.2 = iternext(value=$phi202.1)
DEBUG 2022-02-14 16:38:18,993 on stmt: $202for_iter.3 = pair_first(value=$202for_iter.2)
DEBUG 2022-02-14 16:38:18,993 on stmt: $202for_iter.4 = pair_second(value=$202for_iter.2)
DEBUG 2022-02-14 16:38:18,993 on stmt: $phi204.2 = $202for_iter.3
DEBUG 2022-02-14 16:38:18,993 on stmt: branch $202for_iter.4, 204, 300
DEBUG 2022-02-14 16:38:18,993 ==== SSA block analysis pass on 204
DEBUG 2022-02-14 16:38:18,993 Running <numba.core.ssa._GatherDefsHandler object at 0x7fa046317220>
DEBUG 2022-02-14 16:38:18,993 on stmt: j = $phi204.2
DEBUG 2022-02-14 16:38:18,993 on stmt: $212binary_true_divide.6 = factor / j
DEBUG 2022-02-14 16:38:18,994 on stmt: $214inplace_multiply.7 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=powfactor, rhs=$212binary_true_divide.6, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:38:18,994 on stmt: powfactor = $214inplace_multiply.7
DEBUG 2022-02-14 16:38:18,994 on stmt: $218load_global.8 = global(range: <class 'range'>)
DEBUG 2022-02-14 16:38:18,994 on stmt: $224binary_multiply.11 = i * j
DEBUG 2022-02-14 16:38:18,994 on stmt: $const226.12 = const(int, 1)
DEBUG 2022-02-14 16:38:18,994 on stmt: $228binary_add.13 = $224binary_multiply.11 + $const226.12
DEBUG 2022-02-14 16:38:18,994 on stmt: $const232.15 = const(int, 2)
DEBUG 2022-02-14 16:38:18,994 on stmt: $234binary_add.16 = n + $const232.15
DEBUG 2022-02-14 16:38:18,994 on stmt: $236call_function.17 = call $218load_global.8($228binary_add.13, $234binary_add.16, func=$218load_global.8, args=[Var($228binary_add.13, _loop_hafnian_subroutines.py:179), Var($234binary_add.16, _loop_hafnian_subroutines.py:179)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:18,994 on stmt: $238get_iter.18 = getiter(value=$236call_function.17)
DEBUG 2022-02-14 16:38:18,994 on stmt: $phi240.2 = $238get_iter.18
DEBUG 2022-02-14 16:38:18,994 on stmt: jump 240
DEBUG 2022-02-14 16:38:18,994 ==== SSA block analysis pass on 240
DEBUG 2022-02-14 16:38:18,994 Running <numba.core.ssa._GatherDefsHandler object at 0x7fa046317220>
DEBUG 2022-02-14 16:38:18,994 on stmt: $240for_iter.3 = iternext(value=$phi240.2)
DEBUG 2022-02-14 16:38:18,994 on stmt: $240for_iter.4 = pair_first(value=$240for_iter.3)
DEBUG 2022-02-14 16:38:18,994 on stmt: $240for_iter.5 = pair_second(value=$240for_iter.3)
DEBUG 2022-02-14 16:38:18,994 on stmt: $phi242.3 = $240for_iter.4
DEBUG 2022-02-14 16:38:18,994 on stmt: branch $240for_iter.5, 242, 298
DEBUG 2022-02-14 16:38:18,994 ==== SSA block analysis pass on 242
DEBUG 2022-02-14 16:38:18,994 Running <numba.core.ssa._GatherDefsHandler object at 0x7fa046317220>
DEBUG 2022-02-14 16:38:18,994 on stmt: k = $phi242.3
DEBUG 2022-02-14 16:38:18,994 on stmt: $const250.7 = const(int, 1)
DEBUG 2022-02-14 16:38:18,994 on stmt: $252binary_subtract.8 = k - $const250.7
DEBUG 2022-02-14 16:38:18,994 on stmt: $254build_tuple.9 = build_tuple(items=[Var(count, _loop_hafnian_subroutines.py:161), Var($252binary_subtract.8, _loop_hafnian_subroutines.py:180)])
DEBUG 2022-02-14 16:38:18,995 on stmt: $258binary_subscr.12 = getitem(value=comb, index=$254build_tuple.9, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:18,995 on stmt: $const262.14 = const(int, 1)
DEBUG 2022-02-14 16:38:18,995 on stmt: $266binary_subtract.16 = $const262.14 - count
DEBUG 2022-02-14 16:38:18,995 on stmt: $274binary_multiply.20 = i * j
DEBUG 2022-02-14 16:38:18,995 on stmt: $276binary_subtract.21 = k - $274binary_multiply.20
DEBUG 2022-02-14 16:38:18,995 on stmt: $const278.22 = const(int, 1)
DEBUG 2022-02-14 16:38:18,995 on stmt: $280binary_subtract.23 = $276binary_subtract.21 - $const278.22
DEBUG 2022-02-14 16:38:18,995 on stmt: $282build_tuple.24 = build_tuple(items=[Var($266binary_subtract.16, _loop_hafnian_subroutines.py:180), Var($280binary_subtract.23, _loop_hafnian_subroutines.py:180)])
DEBUG 2022-02-14 16:38:18,995 on stmt: $284binary_subscr.25 = getitem(value=comb, index=$282build_tuple.24, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:18,995 on stmt: $288binary_multiply.27 = $284binary_subscr.25 * powfactor
DEBUG 2022-02-14 16:38:18,995 on stmt: $290inplace_add.28 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$258binary_subscr.12, rhs=$288binary_multiply.27, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:38:18,995 on stmt: comb[$254build_tuple.9] = $290inplace_add.28
DEBUG 2022-02-14 16:38:18,995 on stmt: jump 240
DEBUG 2022-02-14 16:38:18,995 ==== SSA block analysis pass on 298
DEBUG 2022-02-14 16:38:18,995 Running <numba.core.ssa._GatherDefsHandler object at 0x7fa046317220>
DEBUG 2022-02-14 16:38:18,995 on stmt: jump 202
DEBUG 2022-02-14 16:38:18,995 ==== SSA block analysis pass on 300
DEBUG 2022-02-14 16:38:18,995 Running <numba.core.ssa._GatherDefsHandler object at 0x7fa046317220>
DEBUG 2022-02-14 16:38:18,995 on stmt: jump 60
DEBUG 2022-02-14 16:38:18,995 ==== SSA block analysis pass on 302
DEBUG 2022-02-14 16:38:18,995 Running <numba.core.ssa._GatherDefsHandler object at 0x7fa046317220>
DEBUG 2022-02-14 16:38:18,995 on stmt: $const306.2 = const(NoneType, None)
DEBUG 2022-02-14 16:38:18,995 on stmt: $const308.3 = const(NoneType, None)
DEBUG 2022-02-14 16:38:18,995 on stmt: $310build_slice.4 = global(slice: <class 'slice'>)
DEBUG 2022-02-14 16:38:18,995 on stmt: $310build_slice.5 = call $310build_slice.4($const306.2, $const308.3, func=$310build_slice.4, args=(Var($const306.2, _loop_hafnian_subroutines.py:182), Var($const308.3, _loop_hafnian_subroutines.py:182)), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:18,995 on stmt: $312build_tuple.6 = build_tuple(items=[Var(count, _loop_hafnian_subroutines.py:161), Var($310build_slice.5, _loop_hafnian_subroutines.py:182)])
DEBUG 2022-02-14 16:38:18,995 on stmt: $314binary_subscr.7 = getitem(value=comb, index=$312build_tuple.6, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:18,995 on stmt: $316return_value.8 = cast(value=$314binary_subscr.7)
DEBUG 2022-02-14 16:38:18,996 on stmt: return $316return_value.8
DEBUG 2022-02-14 16:38:18,997 defs defaultdict(<class 'list'>,
            {'$104binary_matrix_multiply.8': [<numba.core.ir.Assign object at 0x7fa0468df040>],
             '$108binary_true_divide.10': [<numba.core.ir.Assign object at 0x7fa046d83bb0>],
             '$118inplace_multiply.14': [<numba.core.ir.Assign object at 0x7fa046d83280>],
             '$136binary_matrix_multiply.6': [<numba.core.ir.Assign object at 0x7fa046d834f0>],
             '$148binary_subtract.4': [<numba.core.ir.Assign object at 0x7fa046196b80>],
             '$14load_global.4': [<numba.core.ir.Assign object at 0x7fa0462272e0>],
             '$158binary_subtract.8': [<numba.core.ir.Assign object at 0x7fa046195fa0>],
             '$164build_slice.11': [<numba.core.ir.Assign object at 0x7fa046195250>],
             '$164build_slice.12': [<numba.core.ir.Assign object at 0x7fa046195430>],
             '$166build_tuple.13': [<numba.core.ir.Assign object at 0x7fa046195610>],
             '$168binary_subscr.14': [<numba.core.ir.Assign object at 0x7fa0461956d0>],
             '$16load_attr.5': [<numba.core.ir.Assign object at 0x7fa046227460>],
             '$178build_slice.19': [<numba.core.ir.Assign object at 0x7fa046fa2400>],
             '$178build_slice.20': [<numba.core.ir.Assign object at 0x7fa046fa2790>],
             '$180build_tuple.21': [<numba.core.ir.Assign object at 0x7fa046fa2760>],
             '$184load_global.22': [<numba.core.ir.Assign object at 0x7fa046fa2fd0>],
             '$192binary_floor_divide.26': [<numba.core.ir.Assign object at 0x7fa046fa2d00>],
             '$196binary_add.28': [<numba.core.ir.Assign object at 0x7fa046f825b0>],
             '$198call_function.29': [<numba.core.ir.Assign object at 0x7fa046f821f0>],
             '$200get_iter.30': [<numba.core.ir.Assign object at 0x7fa046f82280>],
             '$202for_iter.2': [<numba.core.ir.Assign object at 0x7fa046f82310>],
             '$202for_iter.3': [<numba.core.ir.Assign object at 0x7fa046f824f0>],
             '$202for_iter.4': [<numba.core.ir.Assign object at 0x7fa046f827c0>],
             '$212binary_true_divide.6': [<numba.core.ir.Assign object at 0x7fa046f82f10>],
             '$214inplace_multiply.7': [<numba.core.ir.Assign object at 0x7fa0461bc370>],
             '$218load_global.8': [<numba.core.ir.Assign object at 0x7fa0461bc610>],
             '$224binary_multiply.11': [<numba.core.ir.Assign object at 0x7fa0461bce20>],
             '$228binary_add.13': [<numba.core.ir.Assign object at 0x7fa0461bcc10>],
             '$234binary_add.16': [<numba.core.ir.Assign object at 0x7fa0461bc190>],
             '$236call_function.17': [<numba.core.ir.Assign object at 0x7fa0461bdac0>],
             '$238get_iter.18': [<numba.core.ir.Assign object at 0x7fa0461bdc40>],
             '$240for_iter.3': [<numba.core.ir.Assign object at 0x7fa0461bd5b0>],
             '$240for_iter.4': [<numba.core.ir.Assign object at 0x7fa0461bd6d0>],
             '$240for_iter.5': [<numba.core.ir.Assign object at 0x7fa0461bd8e0>],
             '$24binary_add.9': [<numba.core.ir.Assign object at 0x7fa046227a30>],
             '$252binary_subtract.8': [<numba.core.ir.Assign object at 0x7fa0461bdc10>],
             '$254build_tuple.9': [<numba.core.ir.Assign object at 0x7fa046dbe250>],
             '$258binary_subscr.12': [<numba.core.ir.Assign object at 0x7fa046dbe760>],
             '$266binary_subtract.16': [<numba.core.ir.Assign object at 0x7fa046dbefa0>],
             '$26build_tuple.10': [<numba.core.ir.Assign object at 0x7fa046227b50>],
             '$274binary_multiply.20': [<numba.core.ir.Assign object at 0x7fa046dbeb80>],
             '$276binary_subtract.21': [<numba.core.ir.Assign object at 0x7fa047184550>],
             '$280binary_subtract.23': [<numba.core.ir.Assign object at 0x7fa047184340>],
             '$282build_tuple.24': [<numba.core.ir.Assign object at 0x7fa0471841c0>],
             '$284binary_subscr.25': [<numba.core.ir.Assign object at 0x7fa047184700>],
             '$288binary_multiply.27': [<numba.core.ir.Assign object at 0x7fa047184b20>],
             '$28load_global.11': [<numba.core.ir.Assign object at 0x7fa046227e80>],
             '$290inplace_add.28': [<numba.core.ir.Assign object at 0x7fa0471847f0>],
             '$30load_attr.12': [<numba.core.ir.Assign object at 0x7fa046227e50>],
             '$310build_slice.4': [<numba.core.ir.Assign object at 0x7fa046d7c910>],
             '$310build_slice.5': [<numba.core.ir.Assign object at 0x7fa046d7cd30>],
             '$312build_tuple.6': [<numba.core.ir.Assign object at 0x7fa046d7c7c0>],
             '$314binary_subscr.7': [<numba.core.ir.Assign object at 0x7fa046d7c100>],
             '$316return_value.8': [<numba.core.ir.Assign object at 0x7fa046d7c250>],
             '$46load_global.18': [<numba.core.ir.Assign object at 0x7fa046249df0>],
             '$4load_method.1': [<numba.core.ir.Assign object at 0x7fa04602fdf0>],
             '$54binary_add.22': [<numba.core.ir.Assign object at 0x7fa0461242e0>],
             '$56call_function.23': [<numba.core.ir.Assign object at 0x7fa04612fcd0>],
             '$58get_iter.24': [<numba.core.ir.Assign object at 0x7fa04612f280>],
             '$60for_iter.1': [<numba.core.ir.Assign object at 0x7fa04612f3a0>],
             '$60for_iter.2': [<numba.core.ir.Assign object at 0x7fa04610ffd0>],
             '$60for_iter.3': [<numba.core.ir.Assign object at 0x7fa04610fb80>],
             '$68compare_op.4': [<numba.core.ir.Assign object at 0x7fa0461293a0>],
             '$70pred': [<numba.core.ir.Assign object at 0x7fa04612bcd0>],
             '$82binary_modulo.3': [<numba.core.ir.Assign object at 0x7fa04630e5b0>],
             '$86compare_op.5': [<numba.core.ir.Assign object at 0x7fa04630e040>],
             '$88pred': [<numba.core.ir.Assign object at 0x7fa0468dfe50>],
             '$92load_method.2': [<numba.core.ir.Assign object at 0x7fa0468df910>],
             '$94call_method.3': [<numba.core.ir.Assign object at 0x7fa0468df790>],
             '$98binary_true_divide.5': [<numba.core.ir.Assign object at 0x7fa0468df5e0>],
             '$const106.9': [<numba.core.ir.Assign object at 0x7fa0468dfa90>],
             '$const144.2': [<numba.core.ir.Assign object at 0x7fa04612d880>],
             '$const154.6': [<numba.core.ir.Assign object at 0x7fa046195be0>],
             '$const160.9': [<numba.core.ir.Assign object at 0x7fa046195f10>],
             '$const162.10': [<numba.core.ir.Assign object at 0x7fa046195940>],
             '$const174.17': [<numba.core.ir.Assign object at 0x7fa046fa2a60>],
             '$const176.18': [<numba.core.ir.Assign object at 0x7fa046fa2670>],
             '$const18.6': [<numba.core.ir.Assign object at 0x7fa0462275e0>],
             '$const186.23': [<numba.core.ir.Assign object at 0x7fa046fa2c70>],
             '$const194.27': [<numba.core.ir.Assign object at 0x7fa046fa2f10>],
             '$const22.8': [<numba.core.ir.Assign object at 0x7fa046227910>],
             '$const226.12': [<numba.core.ir.Assign object at 0x7fa0461bc850>],
             '$const232.15': [<numba.core.ir.Assign object at 0x7fa0461bc880>],
             '$const250.7': [<numba.core.ir.Assign object at 0x7fa0461bdee0>],
             '$const262.14': [<numba.core.ir.Assign object at 0x7fa046dbe100>],
             '$const278.22': [<numba.core.ir.Assign object at 0x7fa0471843d0>],
             '$const306.2': [<numba.core.ir.Assign object at 0x7fa047184f40>],
             '$const308.3': [<numba.core.ir.Assign object at 0x7fa046d7c6d0>],
             '$const38.15': [<numba.core.ir.Assign object at 0x7fa046249640>],
             '$const42.17': [<numba.core.ir.Assign object at 0x7fa046249b80>],
             '$const48.19': [<numba.core.ir.Assign object at 0x7fa046249d60>],
             '$const52.21': [<numba.core.ir.Assign object at 0x7fa046124370>],
             '$const66.3': [<numba.core.ir.Assign object at 0x7fa04610f880>],
             '$const80.2': [<numba.core.ir.Assign object at 0x7fa04630e460>],
             '$const84.4': [<numba.core.ir.Assign object at 0x7fa04630e370>],
             '$const_0': [<numba.core.ir.Assign object at 0x7fa046249940>],
             '$const_0.1': [<numba.core.ir.Assign object at 0x7fa046249a90>],
             '$phi202.1': [<numba.core.ir.Assign object at 0x7fa04612de50>],
             '$phi204.2': [<numba.core.ir.Assign object at 0x7fa046fa20a0>],
             '$phi240.2': [<numba.core.ir.Assign object at 0x7fa046f82a90>],
             '$phi242.3': [<numba.core.ir.Assign object at 0x7fa0461bde80>],
             '$phi60.0': [<numba.core.ir.Assign object at 0x7fa04602fd90>],
             '$phi62.1': [<numba.core.ir.Assign object at 0x7fa041e1d580>],
             'AX_S': [<numba.core.ir.Assign object at 0x7fa041eeeb20>],
             'D_S': [<numba.core.ir.Assign object at 0x7fa041eeedf0>,
                     <numba.core.ir.Assign object at 0x7fa04612d1f0>],
             'E': [<numba.core.ir.Assign object at 0x7fa041eeef10>],
             'E_k': [<numba.core.ir.Assign object at 0x7fa0461af700>,
                     <numba.core.ir.Assign object at 0x7fa046d83370>],
             'XD_S': [<numba.core.ir.Assign object at 0x7fa041eee760>],
             'bool70': [<numba.core.ir.Assign object at 0x7fa0461291c0>],
             'bool88': [<numba.core.ir.Assign object at 0x7fa0468dfc10>],
             'comb': [<numba.core.ir.Assign object at 0x7fa0462494c0>],
             'count': [<numba.core.ir.Assign object at 0x7fa046227fd0>,
                       <numba.core.ir.Assign object at 0x7fa046196f70>],
             'factor': [<numba.core.ir.Assign object at 0x7fa04630ecd0>,
                        <numba.core.ir.Assign object at 0x7fa046d83d90>,
                        <numba.core.ir.Assign object at 0x7fa046d83610>],
             'i': [<numba.core.ir.Assign object at 0x7fa04610f520>],
             'j': [<numba.core.ir.Assign object at 0x7fa046f82af0>],
             'k': [<numba.core.ir.Assign object at 0x7fa0461bd2b0>],
             'n': [<numba.core.ir.Assign object at 0x7fa041eee940>],
             'oddVX_S': [<numba.core.ir.Assign object at 0x7fa041eee670>],
             'oddloop': [<numba.core.ir.Assign object at 0x7fa041eee430>],
             'powfactor': [<numba.core.ir.Assign object at 0x7fa0468dfd00>,
                           <numba.core.ir.Assign object at 0x7fa0461bca00>]})
DEBUG 2022-02-14 16:38:18,997 SSA violators {'factor', 'powfactor', 'D_S', 'E_k', 'count'}
DEBUG 2022-02-14 16:38:18,997 Fix SSA violator on var factor
DEBUG 2022-02-14 16:38:18,997 ==== SSA block rewrite pass on 0
DEBUG 2022-02-14 16:38:18,997 Running <numba.core.ssa._FreshVarHandler object at 0x7fa0461327c0>
DEBUG 2022-02-14 16:38:18,997 on stmt: E = arg(0, name=E)
DEBUG 2022-02-14 16:38:18,997 on stmt: AX_S = arg(1, name=AX_S)
DEBUG 2022-02-14 16:38:18,997 on stmt: XD_S = arg(2, name=XD_S)
DEBUG 2022-02-14 16:38:18,997 on stmt: D_S = arg(3, name=D_S)
DEBUG 2022-02-14 16:38:18,997 on stmt: n = arg(4, name=n)
DEBUG 2022-02-14 16:38:18,997 on stmt: oddloop = arg(5, name=oddloop)
DEBUG 2022-02-14 16:38:18,997 on stmt: oddVX_S = arg(6, name=oddVX_S)
DEBUG 2022-02-14 16:38:18,997 on stmt: $4load_method.1 = getattr(value=E, attr=copy)
DEBUG 2022-02-14 16:38:18,997 on stmt: E_k = call $4load_method.1(func=$4load_method.1, args=[], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:18,997 on stmt: count = const(int, 0)
DEBUG 2022-02-14 16:38:18,997 on stmt: $14load_global.4 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:38:18,997 on stmt: $16load_attr.5 = getattr(value=$14load_global.4, attr=zeros)
DEBUG 2022-02-14 16:38:18,997 on stmt: $const18.6 = const(int, 2)
DEBUG 2022-02-14 16:38:18,997 on stmt: $const22.8 = const(int, 1)
DEBUG 2022-02-14 16:38:18,997 on stmt: $24binary_add.9 = n + $const22.8
DEBUG 2022-02-14 16:38:18,997 on stmt: $26build_tuple.10 = build_tuple(items=[Var($const18.6, _loop_hafnian_subroutines.py:162), Var($24binary_add.9, _loop_hafnian_subroutines.py:162)])
DEBUG 2022-02-14 16:38:18,997 on stmt: $28load_global.11 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:38:18,998 on stmt: $30load_attr.12 = getattr(value=$28load_global.11, attr=complex128)
DEBUG 2022-02-14 16:38:18,998 on stmt: comb = call $16load_attr.5($26build_tuple.10, func=$16load_attr.5, args=[Var($26build_tuple.10, _loop_hafnian_subroutines.py:162)], kws=[('dtype', Var($30load_attr.12, _loop_hafnian_subroutines.py:162))], vararg=None, target=None)
DEBUG 2022-02-14 16:38:18,998 on stmt: $const38.15 = const(int, 1)
DEBUG 2022-02-14 16:38:18,998 on stmt: $const_0 = const(int, 0)
DEBUG 2022-02-14 16:38:18,998 on stmt: $const_0.1 = const(int, 0)
DEBUG 2022-02-14 16:38:18,998 on stmt: $const42.17 = build_tuple(items=[Var($const_0, _loop_hafnian_subroutines.py:163), Var($const_0.1, _loop_hafnian_subroutines.py:163)])
DEBUG 2022-02-14 16:38:18,998 on stmt: comb[(0, 0)] = $const38.15
DEBUG 2022-02-14 16:38:18,998 on stmt: $46load_global.18 = global(range: <class 'range'>)
DEBUG 2022-02-14 16:38:18,998 on stmt: $const48.19 = const(int, 1)
DEBUG 2022-02-14 16:38:18,998 on stmt: $const52.21 = const(int, 1)
DEBUG 2022-02-14 16:38:18,998 on stmt: $54binary_add.22 = n + $const52.21
DEBUG 2022-02-14 16:38:18,998 on stmt: $56call_function.23 = call $46load_global.18($const48.19, $54binary_add.22, func=$46load_global.18, args=[Var($const48.19, _loop_hafnian_subroutines.py:164), Var($54binary_add.22, _loop_hafnian_subroutines.py:164)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:18,998 on stmt: $58get_iter.24 = getiter(value=$56call_function.23)
DEBUG 2022-02-14 16:38:18,998 on stmt: $phi60.0 = $58get_iter.24
DEBUG 2022-02-14 16:38:18,998 on stmt: jump 60
DEBUG 2022-02-14 16:38:18,998 ==== SSA block rewrite pass on 60
DEBUG 2022-02-14 16:38:18,998 Running <numba.core.ssa._FreshVarHandler object at 0x7fa0461327c0>
DEBUG 2022-02-14 16:38:18,998 on stmt: $60for_iter.1 = iternext(value=$phi60.0)
DEBUG 2022-02-14 16:38:18,998 on stmt: $60for_iter.2 = pair_first(value=$60for_iter.1)
DEBUG 2022-02-14 16:38:18,998 on stmt: $60for_iter.3 = pair_second(value=$60for_iter.1)
DEBUG 2022-02-14 16:38:18,998 on stmt: $phi62.1 = $60for_iter.2
DEBUG 2022-02-14 16:38:18,998 on stmt: branch $60for_iter.3, 62, 302
DEBUG 2022-02-14 16:38:18,998 ==== SSA block rewrite pass on 62
DEBUG 2022-02-14 16:38:18,998 Running <numba.core.ssa._FreshVarHandler object at 0x7fa0461327c0>
DEBUG 2022-02-14 16:38:18,998 on stmt: i = $phi62.1
DEBUG 2022-02-14 16:38:18,998 on stmt: $const66.3 = const(int, 1)
DEBUG 2022-02-14 16:38:18,999 on stmt: $68compare_op.4 = i == $const66.3
DEBUG 2022-02-14 16:38:18,999 on stmt: bool70 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:38:18,999 on stmt: $70pred = call bool70($68compare_op.4, func=bool70, args=(Var($68compare_op.4, _loop_hafnian_subroutines.py:165),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:18,999 on stmt: branch $70pred, 72, 78
DEBUG 2022-02-14 16:38:18,999 ==== SSA block rewrite pass on 72
DEBUG 2022-02-14 16:38:18,999 Running <numba.core.ssa._FreshVarHandler object at 0x7fa0461327c0>
DEBUG 2022-02-14 16:38:18,999 on stmt: factor = oddloop
DEBUG 2022-02-14 16:38:18,999 first assign: factor
DEBUG 2022-02-14 16:38:18,999 replaced with: factor = oddloop
DEBUG 2022-02-14 16:38:18,999 on stmt: jump 140
DEBUG 2022-02-14 16:38:18,999 ==== SSA block rewrite pass on 78
DEBUG 2022-02-14 16:38:18,999 Running <numba.core.ssa._FreshVarHandler object at 0x7fa0461327c0>
DEBUG 2022-02-14 16:38:18,999 on stmt: $const80.2 = const(int, 2)
DEBUG 2022-02-14 16:38:18,999 on stmt: $82binary_modulo.3 = i % $const80.2
DEBUG 2022-02-14 16:38:18,999 on stmt: $const84.4 = const(int, 0)
DEBUG 2022-02-14 16:38:18,999 on stmt: $86compare_op.5 = $82binary_modulo.3 == $const84.4
DEBUG 2022-02-14 16:38:18,999 on stmt: bool88 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:38:18,999 on stmt: $88pred = call bool88($86compare_op.5, func=bool88, args=(Var($86compare_op.5, _loop_hafnian_subroutines.py:167),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:18,999 on stmt: branch $88pred, 90, 124
DEBUG 2022-02-14 16:38:18,999 ==== SSA block rewrite pass on 90
DEBUG 2022-02-14 16:38:18,999 Running <numba.core.ssa._FreshVarHandler object at 0x7fa0461327c0>
DEBUG 2022-02-14 16:38:18,999 on stmt: $92load_method.2 = getattr(value=E_k, attr=sum)
DEBUG 2022-02-14 16:38:18,999 on stmt: $94call_method.3 = call $92load_method.2(func=$92load_method.2, args=[], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:18,999 on stmt: $98binary_true_divide.5 = $94call_method.3 / i
DEBUG 2022-02-14 16:38:18,999 on stmt: $104binary_matrix_multiply.8 = XD_S <built-in function matmul> D_S
DEBUG 2022-02-14 16:38:18,999 on stmt: $const106.9 = const(int, 2)
DEBUG 2022-02-14 16:38:18,999 on stmt: $108binary_true_divide.10 = $104binary_matrix_multiply.8 / $const106.9
DEBUG 2022-02-14 16:38:19,000 on stmt: factor = $98binary_true_divide.5 + $108binary_true_divide.10
DEBUG 2022-02-14 16:38:19,000 replaced with: factor.1 = $98binary_true_divide.5 + $108binary_true_divide.10
DEBUG 2022-02-14 16:38:19,000 on stmt: $118inplace_multiply.14 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=E_k, rhs=E, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:38:19,000 on stmt: E_k = $118inplace_multiply.14
DEBUG 2022-02-14 16:38:19,000 on stmt: jump 140
DEBUG 2022-02-14 16:38:19,000 ==== SSA block rewrite pass on 124
DEBUG 2022-02-14 16:38:19,000 Running <numba.core.ssa._FreshVarHandler object at 0x7fa0461327c0>
DEBUG 2022-02-14 16:38:19,000 on stmt: factor = oddVX_S <built-in function matmul> D_S
DEBUG 2022-02-14 16:38:19,000 replaced with: factor.2 = oddVX_S <built-in function matmul> D_S
DEBUG 2022-02-14 16:38:19,000 on stmt: $136binary_matrix_multiply.6 = AX_S <built-in function matmul> D_S
DEBUG 2022-02-14 16:38:19,000 on stmt: D_S = $136binary_matrix_multiply.6
DEBUG 2022-02-14 16:38:19,000 on stmt: jump 140
DEBUG 2022-02-14 16:38:19,000 ==== SSA block rewrite pass on 140
DEBUG 2022-02-14 16:38:19,000 Running <numba.core.ssa._FreshVarHandler object at 0x7fa0461327c0>
DEBUG 2022-02-14 16:38:19,000 on stmt: powfactor = const(int, 1)
DEBUG 2022-02-14 16:38:19,000 on stmt: $const144.2 = const(int, 1)
DEBUG 2022-02-14 16:38:19,000 on stmt: $148binary_subtract.4 = $const144.2 - count
DEBUG 2022-02-14 16:38:19,000 on stmt: count = $148binary_subtract.4
DEBUG 2022-02-14 16:38:19,000 on stmt: $const154.6 = const(int, 1)
DEBUG 2022-02-14 16:38:19,000 on stmt: $158binary_subtract.8 = $const154.6 - count
DEBUG 2022-02-14 16:38:19,000 on stmt: $const160.9 = const(NoneType, None)
DEBUG 2022-02-14 16:38:19,000 on stmt: $const162.10 = const(NoneType, None)
DEBUG 2022-02-14 16:38:19,000 on stmt: $164build_slice.11 = global(slice: <class 'slice'>)
DEBUG 2022-02-14 16:38:19,000 on stmt: $164build_slice.12 = call $164build_slice.11($const160.9, $const162.10, func=$164build_slice.11, args=(Var($const160.9, _loop_hafnian_subroutines.py:176), Var($const162.10, _loop_hafnian_subroutines.py:176)), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:19,000 on stmt: $166build_tuple.13 = build_tuple(items=[Var($158binary_subtract.8, _loop_hafnian_subroutines.py:176), Var($164build_slice.12, _loop_hafnian_subroutines.py:176)])
DEBUG 2022-02-14 16:38:19,001 on stmt: $168binary_subscr.14 = getitem(value=comb, index=$166build_tuple.13, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:19,001 on stmt: $const174.17 = const(NoneType, None)
DEBUG 2022-02-14 16:38:19,001 on stmt: $const176.18 = const(NoneType, None)
DEBUG 2022-02-14 16:38:19,001 on stmt: $178build_slice.19 = global(slice: <class 'slice'>)
DEBUG 2022-02-14 16:38:19,001 on stmt: $178build_slice.20 = call $178build_slice.19($const174.17, $const176.18, func=$178build_slice.19, args=(Var($const174.17, _loop_hafnian_subroutines.py:176), Var($const176.18, _loop_hafnian_subroutines.py:176)), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:19,001 on stmt: $180build_tuple.21 = build_tuple(items=[Var(count, _loop_hafnian_subroutines.py:161), Var($178build_slice.20, _loop_hafnian_subroutines.py:176)])
DEBUG 2022-02-14 16:38:19,001 on stmt: comb[$180build_tuple.21] = $168binary_subscr.14
DEBUG 2022-02-14 16:38:19,001 on stmt: $184load_global.22 = global(range: <class 'range'>)
DEBUG 2022-02-14 16:38:19,001 on stmt: $const186.23 = const(int, 1)
DEBUG 2022-02-14 16:38:19,001 on stmt: $192binary_floor_divide.26 = n // i
DEBUG 2022-02-14 16:38:19,001 on stmt: $const194.27 = const(int, 1)
DEBUG 2022-02-14 16:38:19,001 on stmt: $196binary_add.28 = $192binary_floor_divide.26 + $const194.27
DEBUG 2022-02-14 16:38:19,001 on stmt: $198call_function.29 = call $184load_global.22($const186.23, $196binary_add.28, func=$184load_global.22, args=[Var($const186.23, _loop_hafnian_subroutines.py:177), Var($196binary_add.28, _loop_hafnian_subroutines.py:177)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:19,001 on stmt: $200get_iter.30 = getiter(value=$198call_function.29)
DEBUG 2022-02-14 16:38:19,001 on stmt: $phi202.1 = $200get_iter.30
DEBUG 2022-02-14 16:38:19,001 on stmt: jump 202
DEBUG 2022-02-14 16:38:19,001 ==== SSA block rewrite pass on 202
DEBUG 2022-02-14 16:38:19,001 Running <numba.core.ssa._FreshVarHandler object at 0x7fa0461327c0>
DEBUG 2022-02-14 16:38:19,001 on stmt: $202for_iter.2 = iternext(value=$phi202.1)
DEBUG 2022-02-14 16:38:19,001 on stmt: $202for_iter.3 = pair_first(value=$202for_iter.2)
DEBUG 2022-02-14 16:38:19,001 on stmt: $202for_iter.4 = pair_second(value=$202for_iter.2)
DEBUG 2022-02-14 16:38:19,001 on stmt: $phi204.2 = $202for_iter.3
DEBUG 2022-02-14 16:38:19,001 on stmt: branch $202for_iter.4, 204, 300
DEBUG 2022-02-14 16:38:19,001 ==== SSA block rewrite pass on 204
DEBUG 2022-02-14 16:38:19,001 Running <numba.core.ssa._FreshVarHandler object at 0x7fa0461327c0>
DEBUG 2022-02-14 16:38:19,001 on stmt: j = $phi204.2
DEBUG 2022-02-14 16:38:19,001 on stmt: $212binary_true_divide.6 = factor / j
DEBUG 2022-02-14 16:38:19,002 on stmt: $214inplace_multiply.7 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=powfactor, rhs=$212binary_true_divide.6, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:38:19,002 on stmt: powfactor = $214inplace_multiply.7
DEBUG 2022-02-14 16:38:19,002 on stmt: $218load_global.8 = global(range: <class 'range'>)
DEBUG 2022-02-14 16:38:19,002 on stmt: $224binary_multiply.11 = i * j
DEBUG 2022-02-14 16:38:19,002 on stmt: $const226.12 = const(int, 1)
DEBUG 2022-02-14 16:38:19,002 on stmt: $228binary_add.13 = $224binary_multiply.11 + $const226.12
DEBUG 2022-02-14 16:38:19,002 on stmt: $const232.15 = const(int, 2)
DEBUG 2022-02-14 16:38:19,002 on stmt: $234binary_add.16 = n + $const232.15
DEBUG 2022-02-14 16:38:19,002 on stmt: $236call_function.17 = call $218load_global.8($228binary_add.13, $234binary_add.16, func=$218load_global.8, args=[Var($228binary_add.13, _loop_hafnian_subroutines.py:179), Var($234binary_add.16, _loop_hafnian_subroutines.py:179)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:19,002 on stmt: $238get_iter.18 = getiter(value=$236call_function.17)
DEBUG 2022-02-14 16:38:19,002 on stmt: $phi240.2 = $238get_iter.18
DEBUG 2022-02-14 16:38:19,002 on stmt: jump 240
DEBUG 2022-02-14 16:38:19,002 ==== SSA block rewrite pass on 240
DEBUG 2022-02-14 16:38:19,002 Running <numba.core.ssa._FreshVarHandler object at 0x7fa0461327c0>
DEBUG 2022-02-14 16:38:19,002 on stmt: $240for_iter.3 = iternext(value=$phi240.2)
DEBUG 2022-02-14 16:38:19,002 on stmt: $240for_iter.4 = pair_first(value=$240for_iter.3)
DEBUG 2022-02-14 16:38:19,002 on stmt: $240for_iter.5 = pair_second(value=$240for_iter.3)
DEBUG 2022-02-14 16:38:19,002 on stmt: $phi242.3 = $240for_iter.4
DEBUG 2022-02-14 16:38:19,002 on stmt: branch $240for_iter.5, 242, 298
DEBUG 2022-02-14 16:38:19,002 ==== SSA block rewrite pass on 242
DEBUG 2022-02-14 16:38:19,002 Running <numba.core.ssa._FreshVarHandler object at 0x7fa0461327c0>
DEBUG 2022-02-14 16:38:19,002 on stmt: k = $phi242.3
DEBUG 2022-02-14 16:38:19,002 on stmt: $const250.7 = const(int, 1)
DEBUG 2022-02-14 16:38:19,002 on stmt: $252binary_subtract.8 = k - $const250.7
DEBUG 2022-02-14 16:38:19,002 on stmt: $254build_tuple.9 = build_tuple(items=[Var(count, _loop_hafnian_subroutines.py:161), Var($252binary_subtract.8, _loop_hafnian_subroutines.py:180)])
DEBUG 2022-02-14 16:38:19,003 on stmt: $258binary_subscr.12 = getitem(value=comb, index=$254build_tuple.9, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:19,003 on stmt: $const262.14 = const(int, 1)
DEBUG 2022-02-14 16:38:19,003 on stmt: $266binary_subtract.16 = $const262.14 - count
DEBUG 2022-02-14 16:38:19,003 on stmt: $274binary_multiply.20 = i * j
DEBUG 2022-02-14 16:38:19,003 on stmt: $276binary_subtract.21 = k - $274binary_multiply.20
DEBUG 2022-02-14 16:38:19,003 on stmt: $const278.22 = const(int, 1)
DEBUG 2022-02-14 16:38:19,003 on stmt: $280binary_subtract.23 = $276binary_subtract.21 - $const278.22
DEBUG 2022-02-14 16:38:19,003 on stmt: $282build_tuple.24 = build_tuple(items=[Var($266binary_subtract.16, _loop_hafnian_subroutines.py:180), Var($280binary_subtract.23, _loop_hafnian_subroutines.py:180)])
DEBUG 2022-02-14 16:38:19,003 on stmt: $284binary_subscr.25 = getitem(value=comb, index=$282build_tuple.24, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:19,003 on stmt: $288binary_multiply.27 = $284binary_subscr.25 * powfactor
DEBUG 2022-02-14 16:38:19,003 on stmt: $290inplace_add.28 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$258binary_subscr.12, rhs=$288binary_multiply.27, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:38:19,003 on stmt: comb[$254build_tuple.9] = $290inplace_add.28
DEBUG 2022-02-14 16:38:19,003 on stmt: jump 240
DEBUG 2022-02-14 16:38:19,003 ==== SSA block rewrite pass on 298
DEBUG 2022-02-14 16:38:19,003 Running <numba.core.ssa._FreshVarHandler object at 0x7fa0461327c0>
DEBUG 2022-02-14 16:38:19,003 on stmt: jump 202
DEBUG 2022-02-14 16:38:19,003 ==== SSA block rewrite pass on 300
DEBUG 2022-02-14 16:38:19,003 Running <numba.core.ssa._FreshVarHandler object at 0x7fa0461327c0>
DEBUG 2022-02-14 16:38:19,003 on stmt: jump 60
DEBUG 2022-02-14 16:38:19,003 ==== SSA block rewrite pass on 302
DEBUG 2022-02-14 16:38:19,003 Running <numba.core.ssa._FreshVarHandler object at 0x7fa0461327c0>
DEBUG 2022-02-14 16:38:19,003 on stmt: $const306.2 = const(NoneType, None)
DEBUG 2022-02-14 16:38:19,003 on stmt: $const308.3 = const(NoneType, None)
DEBUG 2022-02-14 16:38:19,003 on stmt: $310build_slice.4 = global(slice: <class 'slice'>)
DEBUG 2022-02-14 16:38:19,003 on stmt: $310build_slice.5 = call $310build_slice.4($const306.2, $const308.3, func=$310build_slice.4, args=(Var($const306.2, _loop_hafnian_subroutines.py:182), Var($const308.3, _loop_hafnian_subroutines.py:182)), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:19,003 on stmt: $312build_tuple.6 = build_tuple(items=[Var(count, _loop_hafnian_subroutines.py:161), Var($310build_slice.5, _loop_hafnian_subroutines.py:182)])
DEBUG 2022-02-14 16:38:19,003 on stmt: $314binary_subscr.7 = getitem(value=comb, index=$312build_tuple.6, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:19,004 on stmt: $316return_value.8 = cast(value=$314binary_subscr.7)
DEBUG 2022-02-14 16:38:19,004 on stmt: return $316return_value.8
DEBUG 2022-02-14 16:38:19,004 Replaced assignments: defaultdict(<class 'list'>,
            {72: [<numba.core.ir.Assign object at 0x7fa046132fa0>],
             90: [<numba.core.ir.Assign object at 0x7fa046132c70>],
             124: [<numba.core.ir.Assign object at 0x7fa046dbe730>]})
DEBUG 2022-02-14 16:38:19,004 ==== SSA block rewrite pass on 0
DEBUG 2022-02-14 16:38:19,004 Running <numba.core.ssa._FixSSAVars object at 0x7fa0461327c0>
DEBUG 2022-02-14 16:38:19,004 on stmt: E = arg(0, name=E)
DEBUG 2022-02-14 16:38:19,004 on stmt: AX_S = arg(1, name=AX_S)
DEBUG 2022-02-14 16:38:19,004 on stmt: XD_S = arg(2, name=XD_S)
DEBUG 2022-02-14 16:38:19,004 on stmt: D_S = arg(3, name=D_S)
DEBUG 2022-02-14 16:38:19,004 on stmt: n = arg(4, name=n)
DEBUG 2022-02-14 16:38:19,004 on stmt: oddloop = arg(5, name=oddloop)
DEBUG 2022-02-14 16:38:19,004 on stmt: oddVX_S = arg(6, name=oddVX_S)
DEBUG 2022-02-14 16:38:19,004 on stmt: $4load_method.1 = getattr(value=E, attr=copy)
DEBUG 2022-02-14 16:38:19,004 on stmt: E_k = call $4load_method.1(func=$4load_method.1, args=[], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:19,004 on stmt: count = const(int, 0)
DEBUG 2022-02-14 16:38:19,004 on stmt: $14load_global.4 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:38:19,004 on stmt: $16load_attr.5 = getattr(value=$14load_global.4, attr=zeros)
DEBUG 2022-02-14 16:38:19,004 on stmt: $const18.6 = const(int, 2)
DEBUG 2022-02-14 16:38:19,004 on stmt: $const22.8 = const(int, 1)
DEBUG 2022-02-14 16:38:19,004 on stmt: $24binary_add.9 = n + $const22.8
DEBUG 2022-02-14 16:38:19,004 on stmt: $26build_tuple.10 = build_tuple(items=[Var($const18.6, _loop_hafnian_subroutines.py:162), Var($24binary_add.9, _loop_hafnian_subroutines.py:162)])
DEBUG 2022-02-14 16:38:19,004 on stmt: $28load_global.11 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:38:19,005 on stmt: $30load_attr.12 = getattr(value=$28load_global.11, attr=complex128)
DEBUG 2022-02-14 16:38:19,005 on stmt: comb = call $16load_attr.5($26build_tuple.10, func=$16load_attr.5, args=[Var($26build_tuple.10, _loop_hafnian_subroutines.py:162)], kws=[('dtype', Var($30load_attr.12, _loop_hafnian_subroutines.py:162))], vararg=None, target=None)
DEBUG 2022-02-14 16:38:19,005 on stmt: $const38.15 = const(int, 1)
DEBUG 2022-02-14 16:38:19,005 on stmt: $const_0 = const(int, 0)
DEBUG 2022-02-14 16:38:19,005 on stmt: $const_0.1 = const(int, 0)
DEBUG 2022-02-14 16:38:19,005 on stmt: $const42.17 = build_tuple(items=[Var($const_0, _loop_hafnian_subroutines.py:163), Var($const_0.1, _loop_hafnian_subroutines.py:163)])
DEBUG 2022-02-14 16:38:19,005 on stmt: comb[(0, 0)] = $const38.15
DEBUG 2022-02-14 16:38:19,005 on stmt: $46load_global.18 = global(range: <class 'range'>)
DEBUG 2022-02-14 16:38:19,005 on stmt: $const48.19 = const(int, 1)
DEBUG 2022-02-14 16:38:19,005 on stmt: $const52.21 = const(int, 1)
DEBUG 2022-02-14 16:38:19,005 on stmt: $54binary_add.22 = n + $const52.21
DEBUG 2022-02-14 16:38:19,005 on stmt: $56call_function.23 = call $46load_global.18($const48.19, $54binary_add.22, func=$46load_global.18, args=[Var($const48.19, _loop_hafnian_subroutines.py:164), Var($54binary_add.22, _loop_hafnian_subroutines.py:164)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:19,005 on stmt: $58get_iter.24 = getiter(value=$56call_function.23)
DEBUG 2022-02-14 16:38:19,005 on stmt: $phi60.0 = $58get_iter.24
DEBUG 2022-02-14 16:38:19,005 on stmt: jump 60
DEBUG 2022-02-14 16:38:19,005 ==== SSA block rewrite pass on 60
DEBUG 2022-02-14 16:38:19,005 Running <numba.core.ssa._FixSSAVars object at 0x7fa0461327c0>
DEBUG 2022-02-14 16:38:19,005 on stmt: $60for_iter.1 = iternext(value=$phi60.0)
DEBUG 2022-02-14 16:38:19,005 on stmt: $60for_iter.2 = pair_first(value=$60for_iter.1)
DEBUG 2022-02-14 16:38:19,005 on stmt: $60for_iter.3 = pair_second(value=$60for_iter.1)
DEBUG 2022-02-14 16:38:19,005 on stmt: $phi62.1 = $60for_iter.2
DEBUG 2022-02-14 16:38:19,005 on stmt: branch $60for_iter.3, 62, 302
DEBUG 2022-02-14 16:38:19,006 ==== SSA block rewrite pass on 62
DEBUG 2022-02-14 16:38:19,006 Running <numba.core.ssa._FixSSAVars object at 0x7fa0461327c0>
DEBUG 2022-02-14 16:38:19,006 on stmt: i = $phi62.1
DEBUG 2022-02-14 16:38:19,006 on stmt: $const66.3 = const(int, 1)
DEBUG 2022-02-14 16:38:19,006 on stmt: $68compare_op.4 = i == $const66.3
DEBUG 2022-02-14 16:38:19,006 on stmt: bool70 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:38:19,006 on stmt: $70pred = call bool70($68compare_op.4, func=bool70, args=(Var($68compare_op.4, _loop_hafnian_subroutines.py:165),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:19,006 on stmt: branch $70pred, 72, 78
DEBUG 2022-02-14 16:38:19,006 ==== SSA block rewrite pass on 72
DEBUG 2022-02-14 16:38:19,006 Running <numba.core.ssa._FixSSAVars object at 0x7fa0461327c0>
DEBUG 2022-02-14 16:38:19,006 on stmt: factor = oddloop
DEBUG 2022-02-14 16:38:19,006 on stmt: jump 140
DEBUG 2022-02-14 16:38:19,006 ==== SSA block rewrite pass on 78
DEBUG 2022-02-14 16:38:19,006 Running <numba.core.ssa._FixSSAVars object at 0x7fa0461327c0>
DEBUG 2022-02-14 16:38:19,006 on stmt: $const80.2 = const(int, 2)
DEBUG 2022-02-14 16:38:19,006 on stmt: $82binary_modulo.3 = i % $const80.2
DEBUG 2022-02-14 16:38:19,006 on stmt: $const84.4 = const(int, 0)
DEBUG 2022-02-14 16:38:19,006 on stmt: $86compare_op.5 = $82binary_modulo.3 == $const84.4
DEBUG 2022-02-14 16:38:19,006 on stmt: bool88 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:38:19,006 on stmt: $88pred = call bool88($86compare_op.5, func=bool88, args=(Var($86compare_op.5, _loop_hafnian_subroutines.py:167),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:19,006 on stmt: branch $88pred, 90, 124
DEBUG 2022-02-14 16:38:19,006 ==== SSA block rewrite pass on 90
DEBUG 2022-02-14 16:38:19,006 Running <numba.core.ssa._FixSSAVars object at 0x7fa0461327c0>
DEBUG 2022-02-14 16:38:19,006 on stmt: $92load_method.2 = getattr(value=E_k, attr=sum)
DEBUG 2022-02-14 16:38:19,006 on stmt: $94call_method.3 = call $92load_method.2(func=$92load_method.2, args=[], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:19,007 on stmt: $98binary_true_divide.5 = $94call_method.3 / i
DEBUG 2022-02-14 16:38:19,007 on stmt: $104binary_matrix_multiply.8 = XD_S <built-in function matmul> D_S
DEBUG 2022-02-14 16:38:19,007 on stmt: $const106.9 = const(int, 2)
DEBUG 2022-02-14 16:38:19,007 on stmt: $108binary_true_divide.10 = $104binary_matrix_multiply.8 / $const106.9
DEBUG 2022-02-14 16:38:19,007 on stmt: factor.1 = $98binary_true_divide.5 + $108binary_true_divide.10
DEBUG 2022-02-14 16:38:19,007 on stmt: $118inplace_multiply.14 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=E_k, rhs=E, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:38:19,007 on stmt: E_k = $118inplace_multiply.14
DEBUG 2022-02-14 16:38:19,007 on stmt: jump 140
DEBUG 2022-02-14 16:38:19,007 ==== SSA block rewrite pass on 124
DEBUG 2022-02-14 16:38:19,007 Running <numba.core.ssa._FixSSAVars object at 0x7fa0461327c0>
DEBUG 2022-02-14 16:38:19,007 on stmt: factor.2 = oddVX_S <built-in function matmul> D_S
DEBUG 2022-02-14 16:38:19,007 on stmt: $136binary_matrix_multiply.6 = AX_S <built-in function matmul> D_S
DEBUG 2022-02-14 16:38:19,007 on stmt: D_S = $136binary_matrix_multiply.6
DEBUG 2022-02-14 16:38:19,007 on stmt: jump 140
DEBUG 2022-02-14 16:38:19,007 ==== SSA block rewrite pass on 140
DEBUG 2022-02-14 16:38:19,007 Running <numba.core.ssa._FixSSAVars object at 0x7fa0461327c0>
DEBUG 2022-02-14 16:38:19,007 on stmt: powfactor = const(int, 1)
DEBUG 2022-02-14 16:38:19,007 on stmt: $const144.2 = const(int, 1)
DEBUG 2022-02-14 16:38:19,007 on stmt: $148binary_subtract.4 = $const144.2 - count
DEBUG 2022-02-14 16:38:19,007 on stmt: count = $148binary_subtract.4
DEBUG 2022-02-14 16:38:19,007 on stmt: $const154.6 = const(int, 1)
DEBUG 2022-02-14 16:38:19,007 on stmt: $158binary_subtract.8 = $const154.6 - count
DEBUG 2022-02-14 16:38:19,007 on stmt: $const160.9 = const(NoneType, None)
DEBUG 2022-02-14 16:38:19,008 on stmt: $const162.10 = const(NoneType, None)
DEBUG 2022-02-14 16:38:19,008 on stmt: $164build_slice.11 = global(slice: <class 'slice'>)
DEBUG 2022-02-14 16:38:19,008 on stmt: $164build_slice.12 = call $164build_slice.11($const160.9, $const162.10, func=$164build_slice.11, args=(Var($const160.9, _loop_hafnian_subroutines.py:176), Var($const162.10, _loop_hafnian_subroutines.py:176)), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:19,008 on stmt: $166build_tuple.13 = build_tuple(items=[Var($158binary_subtract.8, _loop_hafnian_subroutines.py:176), Var($164build_slice.12, _loop_hafnian_subroutines.py:176)])
DEBUG 2022-02-14 16:38:19,008 on stmt: $168binary_subscr.14 = getitem(value=comb, index=$166build_tuple.13, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:19,008 on stmt: $const174.17 = const(NoneType, None)
DEBUG 2022-02-14 16:38:19,008 on stmt: $const176.18 = const(NoneType, None)
DEBUG 2022-02-14 16:38:19,008 on stmt: $178build_slice.19 = global(slice: <class 'slice'>)
DEBUG 2022-02-14 16:38:19,008 on stmt: $178build_slice.20 = call $178build_slice.19($const174.17, $const176.18, func=$178build_slice.19, args=(Var($const174.17, _loop_hafnian_subroutines.py:176), Var($const176.18, _loop_hafnian_subroutines.py:176)), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:19,008 on stmt: $180build_tuple.21 = build_tuple(items=[Var(count, _loop_hafnian_subroutines.py:161), Var($178build_slice.20, _loop_hafnian_subroutines.py:176)])
DEBUG 2022-02-14 16:38:19,008 on stmt: comb[$180build_tuple.21] = $168binary_subscr.14
DEBUG 2022-02-14 16:38:19,008 on stmt: $184load_global.22 = global(range: <class 'range'>)
DEBUG 2022-02-14 16:38:19,008 on stmt: $const186.23 = const(int, 1)
DEBUG 2022-02-14 16:38:19,008 on stmt: $192binary_floor_divide.26 = n // i
DEBUG 2022-02-14 16:38:19,008 on stmt: $const194.27 = const(int, 1)
DEBUG 2022-02-14 16:38:19,008 on stmt: $196binary_add.28 = $192binary_floor_divide.26 + $const194.27
DEBUG 2022-02-14 16:38:19,008 on stmt: $198call_function.29 = call $184load_global.22($const186.23, $196binary_add.28, func=$184load_global.22, args=[Var($const186.23, _loop_hafnian_subroutines.py:177), Var($196binary_add.28, _loop_hafnian_subroutines.py:177)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:19,008 on stmt: $200get_iter.30 = getiter(value=$198call_function.29)
DEBUG 2022-02-14 16:38:19,008 on stmt: $phi202.1 = $200get_iter.30
DEBUG 2022-02-14 16:38:19,008 on stmt: jump 202
DEBUG 2022-02-14 16:38:19,008 ==== SSA block rewrite pass on 202
DEBUG 2022-02-14 16:38:19,008 Running <numba.core.ssa._FixSSAVars object at 0x7fa0461327c0>
DEBUG 2022-02-14 16:38:19,009 on stmt: $202for_iter.2 = iternext(value=$phi202.1)
DEBUG 2022-02-14 16:38:19,009 on stmt: $202for_iter.3 = pair_first(value=$202for_iter.2)
DEBUG 2022-02-14 16:38:19,009 on stmt: $202for_iter.4 = pair_second(value=$202for_iter.2)
DEBUG 2022-02-14 16:38:19,009 on stmt: $phi204.2 = $202for_iter.3
DEBUG 2022-02-14 16:38:19,009 on stmt: branch $202for_iter.4, 204, 300
DEBUG 2022-02-14 16:38:19,009 ==== SSA block rewrite pass on 204
DEBUG 2022-02-14 16:38:19,009 Running <numba.core.ssa._FixSSAVars object at 0x7fa0461327c0>
DEBUG 2022-02-14 16:38:19,009 on stmt: j = $phi204.2
DEBUG 2022-02-14 16:38:19,009 on stmt: $212binary_true_divide.6 = factor / j
DEBUG 2022-02-14 16:38:19,009 find_def var='factor' stmt=$212binary_true_divide.6 = factor / j
DEBUG 2022-02-14 16:38:19,009 find_def_from_top label 204
DEBUG 2022-02-14 16:38:19,009 idom 202 from label 204
DEBUG 2022-02-14 16:38:19,009 find_def_from_bottom label 202
DEBUG 2022-02-14 16:38:19,009 find_def_from_top label 202
DEBUG 2022-02-14 16:38:19,009 idom 140 from label 202
DEBUG 2022-02-14 16:38:19,009 find_def_from_bottom label 140
DEBUG 2022-02-14 16:38:19,009 find_def_from_top label 140
DEBUG 2022-02-14 16:38:19,009 insert phi node factor.3 = phi(incoming_values=[], incoming_blocks=[]) at 140
DEBUG 2022-02-14 16:38:19,009 find_def_from_bottom label 72
DEBUG 2022-02-14 16:38:19,009 incoming_def factor = oddloop
DEBUG 2022-02-14 16:38:19,009 find_def_from_bottom label 90
DEBUG 2022-02-14 16:38:19,009 incoming_def factor.1 = $98binary_true_divide.5 + $108binary_true_divide.10
DEBUG 2022-02-14 16:38:19,009 find_def_from_bottom label 124
DEBUG 2022-02-14 16:38:19,009 incoming_def factor.2 = oddVX_S <built-in function matmul> D_S
DEBUG 2022-02-14 16:38:19,009 replaced with: $212binary_true_divide.6 = factor.3 / j
DEBUG 2022-02-14 16:38:19,009 on stmt: $214inplace_multiply.7 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=powfactor, rhs=$212binary_true_divide.6, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:38:19,010 on stmt: powfactor = $214inplace_multiply.7
DEBUG 2022-02-14 16:38:19,010 on stmt: $218load_global.8 = global(range: <class 'range'>)
DEBUG 2022-02-14 16:38:19,010 on stmt: $224binary_multiply.11 = i * j
DEBUG 2022-02-14 16:38:19,010 on stmt: $const226.12 = const(int, 1)
DEBUG 2022-02-14 16:38:19,010 on stmt: $228binary_add.13 = $224binary_multiply.11 + $const226.12
DEBUG 2022-02-14 16:38:19,010 on stmt: $const232.15 = const(int, 2)
DEBUG 2022-02-14 16:38:19,010 on stmt: $234binary_add.16 = n + $const232.15
DEBUG 2022-02-14 16:38:19,010 on stmt: $236call_function.17 = call $218load_global.8($228binary_add.13, $234binary_add.16, func=$218load_global.8, args=[Var($228binary_add.13, _loop_hafnian_subroutines.py:179), Var($234binary_add.16, _loop_hafnian_subroutines.py:179)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:19,010 on stmt: $238get_iter.18 = getiter(value=$236call_function.17)
DEBUG 2022-02-14 16:38:19,010 on stmt: $phi240.2 = $238get_iter.18
DEBUG 2022-02-14 16:38:19,010 on stmt: jump 240
DEBUG 2022-02-14 16:38:19,010 ==== SSA block rewrite pass on 240
DEBUG 2022-02-14 16:38:19,010 Running <numba.core.ssa._FixSSAVars object at 0x7fa0461327c0>
DEBUG 2022-02-14 16:38:19,010 on stmt: $240for_iter.3 = iternext(value=$phi240.2)
DEBUG 2022-02-14 16:38:19,010 on stmt: $240for_iter.4 = pair_first(value=$240for_iter.3)
DEBUG 2022-02-14 16:38:19,010 on stmt: $240for_iter.5 = pair_second(value=$240for_iter.3)
DEBUG 2022-02-14 16:38:19,010 on stmt: $phi242.3 = $240for_iter.4
DEBUG 2022-02-14 16:38:19,010 on stmt: branch $240for_iter.5, 242, 298
DEBUG 2022-02-14 16:38:19,010 ==== SSA block rewrite pass on 242
DEBUG 2022-02-14 16:38:19,010 Running <numba.core.ssa._FixSSAVars object at 0x7fa0461327c0>
DEBUG 2022-02-14 16:38:19,010 on stmt: k = $phi242.3
DEBUG 2022-02-14 16:38:19,010 on stmt: $const250.7 = const(int, 1)
DEBUG 2022-02-14 16:38:19,010 on stmt: $252binary_subtract.8 = k - $const250.7
DEBUG 2022-02-14 16:38:19,010 on stmt: $254build_tuple.9 = build_tuple(items=[Var(count, _loop_hafnian_subroutines.py:161), Var($252binary_subtract.8, _loop_hafnian_subroutines.py:180)])
DEBUG 2022-02-14 16:38:19,011 on stmt: $258binary_subscr.12 = getitem(value=comb, index=$254build_tuple.9, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:19,011 on stmt: $const262.14 = const(int, 1)
DEBUG 2022-02-14 16:38:19,011 on stmt: $266binary_subtract.16 = $const262.14 - count
DEBUG 2022-02-14 16:38:19,011 on stmt: $274binary_multiply.20 = i * j
DEBUG 2022-02-14 16:38:19,011 on stmt: $276binary_subtract.21 = k - $274binary_multiply.20
DEBUG 2022-02-14 16:38:19,011 on stmt: $const278.22 = const(int, 1)
DEBUG 2022-02-14 16:38:19,011 on stmt: $280binary_subtract.23 = $276binary_subtract.21 - $const278.22
DEBUG 2022-02-14 16:38:19,011 on stmt: $282build_tuple.24 = build_tuple(items=[Var($266binary_subtract.16, _loop_hafnian_subroutines.py:180), Var($280binary_subtract.23, _loop_hafnian_subroutines.py:180)])
DEBUG 2022-02-14 16:38:19,011 on stmt: $284binary_subscr.25 = getitem(value=comb, index=$282build_tuple.24, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:19,011 on stmt: $288binary_multiply.27 = $284binary_subscr.25 * powfactor
DEBUG 2022-02-14 16:38:19,011 on stmt: $290inplace_add.28 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$258binary_subscr.12, rhs=$288binary_multiply.27, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:38:19,011 on stmt: comb[$254build_tuple.9] = $290inplace_add.28
DEBUG 2022-02-14 16:38:19,011 on stmt: jump 240
DEBUG 2022-02-14 16:38:19,011 ==== SSA block rewrite pass on 298
DEBUG 2022-02-14 16:38:19,011 Running <numba.core.ssa._FixSSAVars object at 0x7fa0461327c0>
DEBUG 2022-02-14 16:38:19,011 on stmt: jump 202
DEBUG 2022-02-14 16:38:19,011 ==== SSA block rewrite pass on 300
DEBUG 2022-02-14 16:38:19,011 Running <numba.core.ssa._FixSSAVars object at 0x7fa0461327c0>
DEBUG 2022-02-14 16:38:19,011 on stmt: jump 60
DEBUG 2022-02-14 16:38:19,011 ==== SSA block rewrite pass on 302
DEBUG 2022-02-14 16:38:19,011 Running <numba.core.ssa._FixSSAVars object at 0x7fa0461327c0>
DEBUG 2022-02-14 16:38:19,011 on stmt: $const306.2 = const(NoneType, None)
DEBUG 2022-02-14 16:38:19,011 on stmt: $const308.3 = const(NoneType, None)
DEBUG 2022-02-14 16:38:19,012 on stmt: $310build_slice.4 = global(slice: <class 'slice'>)
DEBUG 2022-02-14 16:38:19,012 on stmt: $310build_slice.5 = call $310build_slice.4($const306.2, $const308.3, func=$310build_slice.4, args=(Var($const306.2, _loop_hafnian_subroutines.py:182), Var($const308.3, _loop_hafnian_subroutines.py:182)), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:19,012 on stmt: $312build_tuple.6 = build_tuple(items=[Var(count, _loop_hafnian_subroutines.py:161), Var($310build_slice.5, _loop_hafnian_subroutines.py:182)])
DEBUG 2022-02-14 16:38:19,012 on stmt: $314binary_subscr.7 = getitem(value=comb, index=$312build_tuple.6, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:19,012 on stmt: $316return_value.8 = cast(value=$314binary_subscr.7)
DEBUG 2022-02-14 16:38:19,012 on stmt: return $316return_value.8
DEBUG 2022-02-14 16:38:19,012 Fix SSA violator on var powfactor
DEBUG 2022-02-14 16:38:19,012 ==== SSA block rewrite pass on 0
DEBUG 2022-02-14 16:38:19,012 Running <numba.core.ssa._FreshVarHandler object at 0x7fa047184ac0>
DEBUG 2022-02-14 16:38:19,012 on stmt: E = arg(0, name=E)
DEBUG 2022-02-14 16:38:19,012 on stmt: AX_S = arg(1, name=AX_S)
DEBUG 2022-02-14 16:38:19,012 on stmt: XD_S = arg(2, name=XD_S)
DEBUG 2022-02-14 16:38:19,012 on stmt: D_S = arg(3, name=D_S)
DEBUG 2022-02-14 16:38:19,012 on stmt: n = arg(4, name=n)
DEBUG 2022-02-14 16:38:19,012 on stmt: oddloop = arg(5, name=oddloop)
DEBUG 2022-02-14 16:38:19,012 on stmt: oddVX_S = arg(6, name=oddVX_S)
DEBUG 2022-02-14 16:38:19,012 on stmt: $4load_method.1 = getattr(value=E, attr=copy)
DEBUG 2022-02-14 16:38:19,012 on stmt: E_k = call $4load_method.1(func=$4load_method.1, args=[], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:19,012 on stmt: count = const(int, 0)
DEBUG 2022-02-14 16:38:19,012 on stmt: $14load_global.4 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:38:19,012 on stmt: $16load_attr.5 = getattr(value=$14load_global.4, attr=zeros)
DEBUG 2022-02-14 16:38:19,012 on stmt: $const18.6 = const(int, 2)
DEBUG 2022-02-14 16:38:19,012 on stmt: $const22.8 = const(int, 1)
DEBUG 2022-02-14 16:38:19,012 on stmt: $24binary_add.9 = n + $const22.8
DEBUG 2022-02-14 16:38:19,012 on stmt: $26build_tuple.10 = build_tuple(items=[Var($const18.6, _loop_hafnian_subroutines.py:162), Var($24binary_add.9, _loop_hafnian_subroutines.py:162)])
DEBUG 2022-02-14 16:38:19,012 on stmt: $28load_global.11 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:38:19,013 on stmt: $30load_attr.12 = getattr(value=$28load_global.11, attr=complex128)
DEBUG 2022-02-14 16:38:19,013 on stmt: comb = call $16load_attr.5($26build_tuple.10, func=$16load_attr.5, args=[Var($26build_tuple.10, _loop_hafnian_subroutines.py:162)], kws=[('dtype', Var($30load_attr.12, _loop_hafnian_subroutines.py:162))], vararg=None, target=None)
DEBUG 2022-02-14 16:38:19,013 on stmt: $const38.15 = const(int, 1)
DEBUG 2022-02-14 16:38:19,013 on stmt: $const_0 = const(int, 0)
DEBUG 2022-02-14 16:38:19,013 on stmt: $const_0.1 = const(int, 0)
DEBUG 2022-02-14 16:38:19,013 on stmt: $const42.17 = build_tuple(items=[Var($const_0, _loop_hafnian_subroutines.py:163), Var($const_0.1, _loop_hafnian_subroutines.py:163)])
DEBUG 2022-02-14 16:38:19,013 on stmt: comb[(0, 0)] = $const38.15
DEBUG 2022-02-14 16:38:19,013 on stmt: $46load_global.18 = global(range: <class 'range'>)
DEBUG 2022-02-14 16:38:19,013 on stmt: $const48.19 = const(int, 1)
DEBUG 2022-02-14 16:38:19,013 on stmt: $const52.21 = const(int, 1)
DEBUG 2022-02-14 16:38:19,013 on stmt: $54binary_add.22 = n + $const52.21
DEBUG 2022-02-14 16:38:19,013 on stmt: $56call_function.23 = call $46load_global.18($const48.19, $54binary_add.22, func=$46load_global.18, args=[Var($const48.19, _loop_hafnian_subroutines.py:164), Var($54binary_add.22, _loop_hafnian_subroutines.py:164)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:19,013 on stmt: $58get_iter.24 = getiter(value=$56call_function.23)
DEBUG 2022-02-14 16:38:19,013 on stmt: $phi60.0 = $58get_iter.24
DEBUG 2022-02-14 16:38:19,013 on stmt: jump 60
DEBUG 2022-02-14 16:38:19,013 ==== SSA block rewrite pass on 60
DEBUG 2022-02-14 16:38:19,013 Running <numba.core.ssa._FreshVarHandler object at 0x7fa047184ac0>
DEBUG 2022-02-14 16:38:19,013 on stmt: $60for_iter.1 = iternext(value=$phi60.0)
DEBUG 2022-02-14 16:38:19,013 on stmt: $60for_iter.2 = pair_first(value=$60for_iter.1)
DEBUG 2022-02-14 16:38:19,013 on stmt: $60for_iter.3 = pair_second(value=$60for_iter.1)
DEBUG 2022-02-14 16:38:19,013 on stmt: $phi62.1 = $60for_iter.2
DEBUG 2022-02-14 16:38:19,013 on stmt: branch $60for_iter.3, 62, 302
DEBUG 2022-02-14 16:38:19,013 ==== SSA block rewrite pass on 62
DEBUG 2022-02-14 16:38:19,013 Running <numba.core.ssa._FreshVarHandler object at 0x7fa047184ac0>
DEBUG 2022-02-14 16:38:19,013 on stmt: i = $phi62.1
DEBUG 2022-02-14 16:38:19,013 on stmt: $const66.3 = const(int, 1)
DEBUG 2022-02-14 16:38:19,013 on stmt: $68compare_op.4 = i == $const66.3
DEBUG 2022-02-14 16:38:19,014 on stmt: bool70 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:38:19,014 on stmt: $70pred = call bool70($68compare_op.4, func=bool70, args=(Var($68compare_op.4, _loop_hafnian_subroutines.py:165),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:19,014 on stmt: branch $70pred, 72, 78
DEBUG 2022-02-14 16:38:19,014 ==== SSA block rewrite pass on 72
DEBUG 2022-02-14 16:38:19,014 Running <numba.core.ssa._FreshVarHandler object at 0x7fa047184ac0>
DEBUG 2022-02-14 16:38:19,014 on stmt: factor = oddloop
DEBUG 2022-02-14 16:38:19,014 on stmt: jump 140
DEBUG 2022-02-14 16:38:19,014 ==== SSA block rewrite pass on 78
DEBUG 2022-02-14 16:38:19,014 Running <numba.core.ssa._FreshVarHandler object at 0x7fa047184ac0>
DEBUG 2022-02-14 16:38:19,014 on stmt: $const80.2 = const(int, 2)
DEBUG 2022-02-14 16:38:19,014 on stmt: $82binary_modulo.3 = i % $const80.2
DEBUG 2022-02-14 16:38:19,014 on stmt: $const84.4 = const(int, 0)
DEBUG 2022-02-14 16:38:19,014 on stmt: $86compare_op.5 = $82binary_modulo.3 == $const84.4
DEBUG 2022-02-14 16:38:19,014 on stmt: bool88 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:38:19,014 on stmt: $88pred = call bool88($86compare_op.5, func=bool88, args=(Var($86compare_op.5, _loop_hafnian_subroutines.py:167),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:19,014 on stmt: branch $88pred, 90, 124
DEBUG 2022-02-14 16:38:19,014 ==== SSA block rewrite pass on 90
DEBUG 2022-02-14 16:38:19,014 Running <numba.core.ssa._FreshVarHandler object at 0x7fa047184ac0>
DEBUG 2022-02-14 16:38:19,014 on stmt: $92load_method.2 = getattr(value=E_k, attr=sum)
DEBUG 2022-02-14 16:38:19,014 on stmt: $94call_method.3 = call $92load_method.2(func=$92load_method.2, args=[], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:19,014 on stmt: $98binary_true_divide.5 = $94call_method.3 / i
DEBUG 2022-02-14 16:38:19,014 on stmt: $104binary_matrix_multiply.8 = XD_S <built-in function matmul> D_S
DEBUG 2022-02-14 16:38:19,014 on stmt: $const106.9 = const(int, 2)
DEBUG 2022-02-14 16:38:19,014 on stmt: $108binary_true_divide.10 = $104binary_matrix_multiply.8 / $const106.9
DEBUG 2022-02-14 16:38:19,014 on stmt: factor.1 = $98binary_true_divide.5 + $108binary_true_divide.10
DEBUG 2022-02-14 16:38:19,015 on stmt: $118inplace_multiply.14 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=E_k, rhs=E, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:38:19,015 on stmt: E_k = $118inplace_multiply.14
DEBUG 2022-02-14 16:38:19,015 on stmt: jump 140
DEBUG 2022-02-14 16:38:19,015 ==== SSA block rewrite pass on 124
DEBUG 2022-02-14 16:38:19,015 Running <numba.core.ssa._FreshVarHandler object at 0x7fa047184ac0>
DEBUG 2022-02-14 16:38:19,015 on stmt: factor.2 = oddVX_S <built-in function matmul> D_S
DEBUG 2022-02-14 16:38:19,015 on stmt: $136binary_matrix_multiply.6 = AX_S <built-in function matmul> D_S
DEBUG 2022-02-14 16:38:19,015 on stmt: D_S = $136binary_matrix_multiply.6
DEBUG 2022-02-14 16:38:19,015 on stmt: jump 140
DEBUG 2022-02-14 16:38:19,015 ==== SSA block rewrite pass on 140
DEBUG 2022-02-14 16:38:19,015 Running <numba.core.ssa._FreshVarHandler object at 0x7fa047184ac0>
DEBUG 2022-02-14 16:38:19,015 on stmt: factor.3 = phi(incoming_values=[Var(factor, _loop_hafnian_subroutines.py:166), Var(factor.1, _loop_hafnian_subroutines.py:168), Var(factor.2, _loop_hafnian_subroutines.py:171)], incoming_blocks=[72, 90, 124])
DEBUG 2022-02-14 16:38:19,015 on stmt: powfactor = const(int, 1)
DEBUG 2022-02-14 16:38:19,015 first assign: powfactor
DEBUG 2022-02-14 16:38:19,015 replaced with: powfactor = const(int, 1)
DEBUG 2022-02-14 16:38:19,015 on stmt: $const144.2 = const(int, 1)
DEBUG 2022-02-14 16:38:19,015 on stmt: $148binary_subtract.4 = $const144.2 - count
DEBUG 2022-02-14 16:38:19,015 on stmt: count = $148binary_subtract.4
DEBUG 2022-02-14 16:38:19,015 on stmt: $const154.6 = const(int, 1)
DEBUG 2022-02-14 16:38:19,015 on stmt: $158binary_subtract.8 = $const154.6 - count
DEBUG 2022-02-14 16:38:19,015 on stmt: $const160.9 = const(NoneType, None)
DEBUG 2022-02-14 16:38:19,015 on stmt: $const162.10 = const(NoneType, None)
DEBUG 2022-02-14 16:38:19,015 on stmt: $164build_slice.11 = global(slice: <class 'slice'>)
DEBUG 2022-02-14 16:38:19,015 on stmt: $164build_slice.12 = call $164build_slice.11($const160.9, $const162.10, func=$164build_slice.11, args=(Var($const160.9, _loop_hafnian_subroutines.py:176), Var($const162.10, _loop_hafnian_subroutines.py:176)), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:19,015 on stmt: $166build_tuple.13 = build_tuple(items=[Var($158binary_subtract.8, _loop_hafnian_subroutines.py:176), Var($164build_slice.12, _loop_hafnian_subroutines.py:176)])
DEBUG 2022-02-14 16:38:19,016 on stmt: $168binary_subscr.14 = getitem(value=comb, index=$166build_tuple.13, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:19,016 on stmt: $const174.17 = const(NoneType, None)
DEBUG 2022-02-14 16:38:19,016 on stmt: $const176.18 = const(NoneType, None)
DEBUG 2022-02-14 16:38:19,016 on stmt: $178build_slice.19 = global(slice: <class 'slice'>)
DEBUG 2022-02-14 16:38:19,016 on stmt: $178build_slice.20 = call $178build_slice.19($const174.17, $const176.18, func=$178build_slice.19, args=(Var($const174.17, _loop_hafnian_subroutines.py:176), Var($const176.18, _loop_hafnian_subroutines.py:176)), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:19,016 on stmt: $180build_tuple.21 = build_tuple(items=[Var(count, _loop_hafnian_subroutines.py:161), Var($178build_slice.20, _loop_hafnian_subroutines.py:176)])
DEBUG 2022-02-14 16:38:19,016 on stmt: comb[$180build_tuple.21] = $168binary_subscr.14
DEBUG 2022-02-14 16:38:19,016 on stmt: $184load_global.22 = global(range: <class 'range'>)
DEBUG 2022-02-14 16:38:19,016 on stmt: $const186.23 = const(int, 1)
DEBUG 2022-02-14 16:38:19,016 on stmt: $192binary_floor_divide.26 = n // i
DEBUG 2022-02-14 16:38:19,016 on stmt: $const194.27 = const(int, 1)
DEBUG 2022-02-14 16:38:19,016 on stmt: $196binary_add.28 = $192binary_floor_divide.26 + $const194.27
DEBUG 2022-02-14 16:38:19,016 on stmt: $198call_function.29 = call $184load_global.22($const186.23, $196binary_add.28, func=$184load_global.22, args=[Var($const186.23, _loop_hafnian_subroutines.py:177), Var($196binary_add.28, _loop_hafnian_subroutines.py:177)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:19,016 on stmt: $200get_iter.30 = getiter(value=$198call_function.29)
DEBUG 2022-02-14 16:38:19,016 on stmt: $phi202.1 = $200get_iter.30
DEBUG 2022-02-14 16:38:19,016 on stmt: jump 202
DEBUG 2022-02-14 16:38:19,016 ==== SSA block rewrite pass on 202
DEBUG 2022-02-14 16:38:19,016 Running <numba.core.ssa._FreshVarHandler object at 0x7fa047184ac0>
DEBUG 2022-02-14 16:38:19,016 on stmt: $202for_iter.2 = iternext(value=$phi202.1)
DEBUG 2022-02-14 16:38:19,016 on stmt: $202for_iter.3 = pair_first(value=$202for_iter.2)
DEBUG 2022-02-14 16:38:19,016 on stmt: $202for_iter.4 = pair_second(value=$202for_iter.2)
DEBUG 2022-02-14 16:38:19,016 on stmt: $phi204.2 = $202for_iter.3
DEBUG 2022-02-14 16:38:19,016 on stmt: branch $202for_iter.4, 204, 300
DEBUG 2022-02-14 16:38:19,016 ==== SSA block rewrite pass on 204
DEBUG 2022-02-14 16:38:19,016 Running <numba.core.ssa._FreshVarHandler object at 0x7fa047184ac0>
DEBUG 2022-02-14 16:38:19,016 on stmt: j = $phi204.2
DEBUG 2022-02-14 16:38:19,016 on stmt: $212binary_true_divide.6 = factor.3 / j
DEBUG 2022-02-14 16:38:19,017 on stmt: $214inplace_multiply.7 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=powfactor, rhs=$212binary_true_divide.6, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:38:19,017 on stmt: powfactor = $214inplace_multiply.7
DEBUG 2022-02-14 16:38:19,017 replaced with: powfactor.1 = $214inplace_multiply.7
DEBUG 2022-02-14 16:38:19,017 on stmt: $218load_global.8 = global(range: <class 'range'>)
DEBUG 2022-02-14 16:38:19,017 on stmt: $224binary_multiply.11 = i * j
DEBUG 2022-02-14 16:38:19,017 on stmt: $const226.12 = const(int, 1)
DEBUG 2022-02-14 16:38:19,017 on stmt: $228binary_add.13 = $224binary_multiply.11 + $const226.12
DEBUG 2022-02-14 16:38:19,017 on stmt: $const232.15 = const(int, 2)
DEBUG 2022-02-14 16:38:19,017 on stmt: $234binary_add.16 = n + $const232.15
DEBUG 2022-02-14 16:38:19,017 on stmt: $236call_function.17 = call $218load_global.8($228binary_add.13, $234binary_add.16, func=$218load_global.8, args=[Var($228binary_add.13, _loop_hafnian_subroutines.py:179), Var($234binary_add.16, _loop_hafnian_subroutines.py:179)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:19,017 on stmt: $238get_iter.18 = getiter(value=$236call_function.17)
DEBUG 2022-02-14 16:38:19,017 on stmt: $phi240.2 = $238get_iter.18
DEBUG 2022-02-14 16:38:19,017 on stmt: jump 240
DEBUG 2022-02-14 16:38:19,017 ==== SSA block rewrite pass on 240
DEBUG 2022-02-14 16:38:19,017 Running <numba.core.ssa._FreshVarHandler object at 0x7fa047184ac0>
DEBUG 2022-02-14 16:38:19,017 on stmt: $240for_iter.3 = iternext(value=$phi240.2)
DEBUG 2022-02-14 16:38:19,017 on stmt: $240for_iter.4 = pair_first(value=$240for_iter.3)
DEBUG 2022-02-14 16:38:19,017 on stmt: $240for_iter.5 = pair_second(value=$240for_iter.3)
DEBUG 2022-02-14 16:38:19,017 on stmt: $phi242.3 = $240for_iter.4
DEBUG 2022-02-14 16:38:19,017 on stmt: branch $240for_iter.5, 242, 298
DEBUG 2022-02-14 16:38:19,017 ==== SSA block rewrite pass on 242
DEBUG 2022-02-14 16:38:19,017 Running <numba.core.ssa._FreshVarHandler object at 0x7fa047184ac0>
DEBUG 2022-02-14 16:38:19,017 on stmt: k = $phi242.3
DEBUG 2022-02-14 16:38:19,017 on stmt: $const250.7 = const(int, 1)
DEBUG 2022-02-14 16:38:19,017 on stmt: $252binary_subtract.8 = k - $const250.7
DEBUG 2022-02-14 16:38:19,017 on stmt: $254build_tuple.9 = build_tuple(items=[Var(count, _loop_hafnian_subroutines.py:161), Var($252binary_subtract.8, _loop_hafnian_subroutines.py:180)])
DEBUG 2022-02-14 16:38:19,017 on stmt: $258binary_subscr.12 = getitem(value=comb, index=$254build_tuple.9, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:19,018 on stmt: $const262.14 = const(int, 1)
DEBUG 2022-02-14 16:38:19,018 on stmt: $266binary_subtract.16 = $const262.14 - count
DEBUG 2022-02-14 16:38:19,018 on stmt: $274binary_multiply.20 = i * j
DEBUG 2022-02-14 16:38:19,018 on stmt: $276binary_subtract.21 = k - $274binary_multiply.20
DEBUG 2022-02-14 16:38:19,018 on stmt: $const278.22 = const(int, 1)
DEBUG 2022-02-14 16:38:19,018 on stmt: $280binary_subtract.23 = $276binary_subtract.21 - $const278.22
DEBUG 2022-02-14 16:38:19,018 on stmt: $282build_tuple.24 = build_tuple(items=[Var($266binary_subtract.16, _loop_hafnian_subroutines.py:180), Var($280binary_subtract.23, _loop_hafnian_subroutines.py:180)])
DEBUG 2022-02-14 16:38:19,018 on stmt: $284binary_subscr.25 = getitem(value=comb, index=$282build_tuple.24, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:19,018 on stmt: $288binary_multiply.27 = $284binary_subscr.25 * powfactor
DEBUG 2022-02-14 16:38:19,018 on stmt: $290inplace_add.28 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$258binary_subscr.12, rhs=$288binary_multiply.27, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:38:19,018 on stmt: comb[$254build_tuple.9] = $290inplace_add.28
DEBUG 2022-02-14 16:38:19,018 on stmt: jump 240
DEBUG 2022-02-14 16:38:19,018 ==== SSA block rewrite pass on 298
DEBUG 2022-02-14 16:38:19,018 Running <numba.core.ssa._FreshVarHandler object at 0x7fa047184ac0>
DEBUG 2022-02-14 16:38:19,018 on stmt: jump 202
DEBUG 2022-02-14 16:38:19,018 ==== SSA block rewrite pass on 300
DEBUG 2022-02-14 16:38:19,018 Running <numba.core.ssa._FreshVarHandler object at 0x7fa047184ac0>
DEBUG 2022-02-14 16:38:19,018 on stmt: jump 60
DEBUG 2022-02-14 16:38:19,018 ==== SSA block rewrite pass on 302
DEBUG 2022-02-14 16:38:19,018 Running <numba.core.ssa._FreshVarHandler object at 0x7fa047184ac0>
DEBUG 2022-02-14 16:38:19,018 on stmt: $const306.2 = const(NoneType, None)
DEBUG 2022-02-14 16:38:19,018 on stmt: $const308.3 = const(NoneType, None)
DEBUG 2022-02-14 16:38:19,018 on stmt: $310build_slice.4 = global(slice: <class 'slice'>)
DEBUG 2022-02-14 16:38:19,019 on stmt: $310build_slice.5 = call $310build_slice.4($const306.2, $const308.3, func=$310build_slice.4, args=(Var($const306.2, _loop_hafnian_subroutines.py:182), Var($const308.3, _loop_hafnian_subroutines.py:182)), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:19,019 on stmt: $312build_tuple.6 = build_tuple(items=[Var(count, _loop_hafnian_subroutines.py:161), Var($310build_slice.5, _loop_hafnian_subroutines.py:182)])
DEBUG 2022-02-14 16:38:19,019 on stmt: $314binary_subscr.7 = getitem(value=comb, index=$312build_tuple.6, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:19,019 on stmt: $316return_value.8 = cast(value=$314binary_subscr.7)
DEBUG 2022-02-14 16:38:19,019 on stmt: return $316return_value.8
DEBUG 2022-02-14 16:38:19,019 Replaced assignments: defaultdict(<class 'list'>,
            {140: [<numba.core.ir.Assign object at 0x7fa0461327c0>],
             204: [<numba.core.ir.Assign object at 0x7fa041eef430>]})
DEBUG 2022-02-14 16:38:19,019 ==== SSA block rewrite pass on 0
DEBUG 2022-02-14 16:38:19,019 Running <numba.core.ssa._FixSSAVars object at 0x7fa041ef1f10>
DEBUG 2022-02-14 16:38:19,019 on stmt: E = arg(0, name=E)
DEBUG 2022-02-14 16:38:19,019 on stmt: AX_S = arg(1, name=AX_S)
DEBUG 2022-02-14 16:38:19,019 on stmt: XD_S = arg(2, name=XD_S)
DEBUG 2022-02-14 16:38:19,019 on stmt: D_S = arg(3, name=D_S)
DEBUG 2022-02-14 16:38:19,019 on stmt: n = arg(4, name=n)
DEBUG 2022-02-14 16:38:19,019 on stmt: oddloop = arg(5, name=oddloop)
DEBUG 2022-02-14 16:38:19,019 on stmt: oddVX_S = arg(6, name=oddVX_S)
DEBUG 2022-02-14 16:38:19,019 on stmt: $4load_method.1 = getattr(value=E, attr=copy)
DEBUG 2022-02-14 16:38:19,019 on stmt: E_k = call $4load_method.1(func=$4load_method.1, args=[], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:19,019 on stmt: count = const(int, 0)
DEBUG 2022-02-14 16:38:19,019 on stmt: $14load_global.4 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:38:19,019 on stmt: $16load_attr.5 = getattr(value=$14load_global.4, attr=zeros)
DEBUG 2022-02-14 16:38:19,019 on stmt: $const18.6 = const(int, 2)
DEBUG 2022-02-14 16:38:19,019 on stmt: $const22.8 = const(int, 1)
DEBUG 2022-02-14 16:38:19,019 on stmt: $24binary_add.9 = n + $const22.8
DEBUG 2022-02-14 16:38:19,019 on stmt: $26build_tuple.10 = build_tuple(items=[Var($const18.6, _loop_hafnian_subroutines.py:162), Var($24binary_add.9, _loop_hafnian_subroutines.py:162)])
DEBUG 2022-02-14 16:38:19,020 on stmt: $28load_global.11 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:38:19,020 on stmt: $30load_attr.12 = getattr(value=$28load_global.11, attr=complex128)
DEBUG 2022-02-14 16:38:19,020 on stmt: comb = call $16load_attr.5($26build_tuple.10, func=$16load_attr.5, args=[Var($26build_tuple.10, _loop_hafnian_subroutines.py:162)], kws=[('dtype', Var($30load_attr.12, _loop_hafnian_subroutines.py:162))], vararg=None, target=None)
DEBUG 2022-02-14 16:38:19,020 on stmt: $const38.15 = const(int, 1)
DEBUG 2022-02-14 16:38:19,020 on stmt: $const_0 = const(int, 0)
DEBUG 2022-02-14 16:38:19,020 on stmt: $const_0.1 = const(int, 0)
DEBUG 2022-02-14 16:38:19,020 on stmt: $const42.17 = build_tuple(items=[Var($const_0, _loop_hafnian_subroutines.py:163), Var($const_0.1, _loop_hafnian_subroutines.py:163)])
DEBUG 2022-02-14 16:38:19,020 on stmt: comb[(0, 0)] = $const38.15
DEBUG 2022-02-14 16:38:19,020 on stmt: $46load_global.18 = global(range: <class 'range'>)
DEBUG 2022-02-14 16:38:19,020 on stmt: $const48.19 = const(int, 1)
DEBUG 2022-02-14 16:38:19,020 on stmt: $const52.21 = const(int, 1)
DEBUG 2022-02-14 16:38:19,020 on stmt: $54binary_add.22 = n + $const52.21
DEBUG 2022-02-14 16:38:19,020 on stmt: $56call_function.23 = call $46load_global.18($const48.19, $54binary_add.22, func=$46load_global.18, args=[Var($const48.19, _loop_hafnian_subroutines.py:164), Var($54binary_add.22, _loop_hafnian_subroutines.py:164)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:19,020 on stmt: $58get_iter.24 = getiter(value=$56call_function.23)
DEBUG 2022-02-14 16:38:19,020 on stmt: $phi60.0 = $58get_iter.24
DEBUG 2022-02-14 16:38:19,020 on stmt: jump 60
DEBUG 2022-02-14 16:38:19,020 ==== SSA block rewrite pass on 60
DEBUG 2022-02-14 16:38:19,020 Running <numba.core.ssa._FixSSAVars object at 0x7fa041ef1f10>
DEBUG 2022-02-14 16:38:19,020 on stmt: $60for_iter.1 = iternext(value=$phi60.0)
DEBUG 2022-02-14 16:38:19,020 on stmt: $60for_iter.2 = pair_first(value=$60for_iter.1)
DEBUG 2022-02-14 16:38:19,020 on stmt: $60for_iter.3 = pair_second(value=$60for_iter.1)
DEBUG 2022-02-14 16:38:19,020 on stmt: $phi62.1 = $60for_iter.2
DEBUG 2022-02-14 16:38:19,020 on stmt: branch $60for_iter.3, 62, 302
DEBUG 2022-02-14 16:38:19,020 ==== SSA block rewrite pass on 62
DEBUG 2022-02-14 16:38:19,021 Running <numba.core.ssa._FixSSAVars object at 0x7fa041ef1f10>
DEBUG 2022-02-14 16:38:19,021 on stmt: i = $phi62.1
DEBUG 2022-02-14 16:38:19,021 on stmt: $const66.3 = const(int, 1)
DEBUG 2022-02-14 16:38:19,021 on stmt: $68compare_op.4 = i == $const66.3
DEBUG 2022-02-14 16:38:19,021 on stmt: bool70 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:38:19,021 on stmt: $70pred = call bool70($68compare_op.4, func=bool70, args=(Var($68compare_op.4, _loop_hafnian_subroutines.py:165),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:19,021 on stmt: branch $70pred, 72, 78
DEBUG 2022-02-14 16:38:19,021 ==== SSA block rewrite pass on 72
DEBUG 2022-02-14 16:38:19,021 Running <numba.core.ssa._FixSSAVars object at 0x7fa041ef1f10>
DEBUG 2022-02-14 16:38:19,021 on stmt: factor = oddloop
DEBUG 2022-02-14 16:38:19,021 on stmt: jump 140
DEBUG 2022-02-14 16:38:19,021 ==== SSA block rewrite pass on 78
DEBUG 2022-02-14 16:38:19,021 Running <numba.core.ssa._FixSSAVars object at 0x7fa041ef1f10>
DEBUG 2022-02-14 16:38:19,021 on stmt: $const80.2 = const(int, 2)
DEBUG 2022-02-14 16:38:19,021 on stmt: $82binary_modulo.3 = i % $const80.2
DEBUG 2022-02-14 16:38:19,021 on stmt: $const84.4 = const(int, 0)
DEBUG 2022-02-14 16:38:19,021 on stmt: $86compare_op.5 = $82binary_modulo.3 == $const84.4
DEBUG 2022-02-14 16:38:19,021 on stmt: bool88 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:38:19,021 on stmt: $88pred = call bool88($86compare_op.5, func=bool88, args=(Var($86compare_op.5, _loop_hafnian_subroutines.py:167),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:19,021 on stmt: branch $88pred, 90, 124
DEBUG 2022-02-14 16:38:19,021 ==== SSA block rewrite pass on 90
DEBUG 2022-02-14 16:38:19,021 Running <numba.core.ssa._FixSSAVars object at 0x7fa041ef1f10>
DEBUG 2022-02-14 16:38:19,021 on stmt: $92load_method.2 = getattr(value=E_k, attr=sum)
DEBUG 2022-02-14 16:38:19,021 on stmt: $94call_method.3 = call $92load_method.2(func=$92load_method.2, args=[], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:19,021 on stmt: $98binary_true_divide.5 = $94call_method.3 / i
DEBUG 2022-02-14 16:38:19,021 on stmt: $104binary_matrix_multiply.8 = XD_S <built-in function matmul> D_S
DEBUG 2022-02-14 16:38:19,022 on stmt: $const106.9 = const(int, 2)
DEBUG 2022-02-14 16:38:19,022 on stmt: $108binary_true_divide.10 = $104binary_matrix_multiply.8 / $const106.9
DEBUG 2022-02-14 16:38:19,022 on stmt: factor.1 = $98binary_true_divide.5 + $108binary_true_divide.10
DEBUG 2022-02-14 16:38:19,022 on stmt: $118inplace_multiply.14 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=E_k, rhs=E, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:38:19,022 on stmt: E_k = $118inplace_multiply.14
DEBUG 2022-02-14 16:38:19,022 on stmt: jump 140
DEBUG 2022-02-14 16:38:19,022 ==== SSA block rewrite pass on 124
DEBUG 2022-02-14 16:38:19,022 Running <numba.core.ssa._FixSSAVars object at 0x7fa041ef1f10>
DEBUG 2022-02-14 16:38:19,022 on stmt: factor.2 = oddVX_S <built-in function matmul> D_S
DEBUG 2022-02-14 16:38:19,022 on stmt: $136binary_matrix_multiply.6 = AX_S <built-in function matmul> D_S
DEBUG 2022-02-14 16:38:19,022 on stmt: D_S = $136binary_matrix_multiply.6
DEBUG 2022-02-14 16:38:19,022 on stmt: jump 140
DEBUG 2022-02-14 16:38:19,022 ==== SSA block rewrite pass on 140
DEBUG 2022-02-14 16:38:19,022 Running <numba.core.ssa._FixSSAVars object at 0x7fa041ef1f10>
DEBUG 2022-02-14 16:38:19,022 on stmt: factor.3 = phi(incoming_values=[Var(factor, _loop_hafnian_subroutines.py:166), Var(factor.1, _loop_hafnian_subroutines.py:168), Var(factor.2, _loop_hafnian_subroutines.py:171)], incoming_blocks=[72, 90, 124])
DEBUG 2022-02-14 16:38:19,022 on stmt: powfactor = const(int, 1)
DEBUG 2022-02-14 16:38:19,022 on stmt: $const144.2 = const(int, 1)
DEBUG 2022-02-14 16:38:19,022 on stmt: $148binary_subtract.4 = $const144.2 - count
DEBUG 2022-02-14 16:38:19,022 on stmt: count = $148binary_subtract.4
DEBUG 2022-02-14 16:38:19,022 on stmt: $const154.6 = const(int, 1)
DEBUG 2022-02-14 16:38:19,022 on stmt: $158binary_subtract.8 = $const154.6 - count
DEBUG 2022-02-14 16:38:19,022 on stmt: $const160.9 = const(NoneType, None)
DEBUG 2022-02-14 16:38:19,022 on stmt: $const162.10 = const(NoneType, None)
DEBUG 2022-02-14 16:38:19,023 on stmt: $164build_slice.11 = global(slice: <class 'slice'>)
DEBUG 2022-02-14 16:38:19,023 on stmt: $164build_slice.12 = call $164build_slice.11($const160.9, $const162.10, func=$164build_slice.11, args=(Var($const160.9, _loop_hafnian_subroutines.py:176), Var($const162.10, _loop_hafnian_subroutines.py:176)), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:19,023 on stmt: $166build_tuple.13 = build_tuple(items=[Var($158binary_subtract.8, _loop_hafnian_subroutines.py:176), Var($164build_slice.12, _loop_hafnian_subroutines.py:176)])
DEBUG 2022-02-14 16:38:19,023 on stmt: $168binary_subscr.14 = getitem(value=comb, index=$166build_tuple.13, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:19,023 on stmt: $const174.17 = const(NoneType, None)
DEBUG 2022-02-14 16:38:19,023 on stmt: $const176.18 = const(NoneType, None)
DEBUG 2022-02-14 16:38:19,023 on stmt: $178build_slice.19 = global(slice: <class 'slice'>)
DEBUG 2022-02-14 16:38:19,023 on stmt: $178build_slice.20 = call $178build_slice.19($const174.17, $const176.18, func=$178build_slice.19, args=(Var($const174.17, _loop_hafnian_subroutines.py:176), Var($const176.18, _loop_hafnian_subroutines.py:176)), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:19,023 on stmt: $180build_tuple.21 = build_tuple(items=[Var(count, _loop_hafnian_subroutines.py:161), Var($178build_slice.20, _loop_hafnian_subroutines.py:176)])
DEBUG 2022-02-14 16:38:19,023 on stmt: comb[$180build_tuple.21] = $168binary_subscr.14
DEBUG 2022-02-14 16:38:19,023 on stmt: $184load_global.22 = global(range: <class 'range'>)
DEBUG 2022-02-14 16:38:19,023 on stmt: $const186.23 = const(int, 1)
DEBUG 2022-02-14 16:38:19,023 on stmt: $192binary_floor_divide.26 = n // i
DEBUG 2022-02-14 16:38:19,023 on stmt: $const194.27 = const(int, 1)
DEBUG 2022-02-14 16:38:19,023 on stmt: $196binary_add.28 = $192binary_floor_divide.26 + $const194.27
DEBUG 2022-02-14 16:38:19,023 on stmt: $198call_function.29 = call $184load_global.22($const186.23, $196binary_add.28, func=$184load_global.22, args=[Var($const186.23, _loop_hafnian_subroutines.py:177), Var($196binary_add.28, _loop_hafnian_subroutines.py:177)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:19,023 on stmt: $200get_iter.30 = getiter(value=$198call_function.29)
DEBUG 2022-02-14 16:38:19,023 on stmt: $phi202.1 = $200get_iter.30
DEBUG 2022-02-14 16:38:19,023 on stmt: jump 202
DEBUG 2022-02-14 16:38:19,023 ==== SSA block rewrite pass on 202
DEBUG 2022-02-14 16:38:19,023 Running <numba.core.ssa._FixSSAVars object at 0x7fa041ef1f10>
DEBUG 2022-02-14 16:38:19,023 on stmt: $202for_iter.2 = iternext(value=$phi202.1)
DEBUG 2022-02-14 16:38:19,023 on stmt: $202for_iter.3 = pair_first(value=$202for_iter.2)
DEBUG 2022-02-14 16:38:19,023 on stmt: $202for_iter.4 = pair_second(value=$202for_iter.2)
DEBUG 2022-02-14 16:38:19,023 on stmt: $phi204.2 = $202for_iter.3
DEBUG 2022-02-14 16:38:19,024 on stmt: branch $202for_iter.4, 204, 300
DEBUG 2022-02-14 16:38:19,024 ==== SSA block rewrite pass on 204
DEBUG 2022-02-14 16:38:19,024 Running <numba.core.ssa._FixSSAVars object at 0x7fa041ef1f10>
DEBUG 2022-02-14 16:38:19,024 on stmt: j = $phi204.2
DEBUG 2022-02-14 16:38:19,024 on stmt: $212binary_true_divide.6 = factor.3 / j
DEBUG 2022-02-14 16:38:19,024 on stmt: $214inplace_multiply.7 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=powfactor, rhs=$212binary_true_divide.6, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:38:19,024 find_def var='powfactor' stmt=$214inplace_multiply.7 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=powfactor, rhs=$212binary_true_divide.6, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:38:19,024 find_def_from_top label 204
DEBUG 2022-02-14 16:38:19,024 idom 202 from label 204
DEBUG 2022-02-14 16:38:19,024 find_def_from_bottom label 202
DEBUG 2022-02-14 16:38:19,024 find_def_from_top label 202
DEBUG 2022-02-14 16:38:19,024 insert phi node powfactor.2 = phi(incoming_values=[], incoming_blocks=[]) at 202
DEBUG 2022-02-14 16:38:19,024 find_def_from_bottom label 298
DEBUG 2022-02-14 16:38:19,024 find_def_from_top label 298
DEBUG 2022-02-14 16:38:19,024 idom 240 from label 298
DEBUG 2022-02-14 16:38:19,024 find_def_from_bottom label 240
DEBUG 2022-02-14 16:38:19,024 find_def_from_top label 240
DEBUG 2022-02-14 16:38:19,024 idom 204 from label 240
DEBUG 2022-02-14 16:38:19,024 find_def_from_bottom label 204
DEBUG 2022-02-14 16:38:19,024 incoming_def powfactor.1 = $214inplace_multiply.7
DEBUG 2022-02-14 16:38:19,024 find_def_from_bottom label 140
DEBUG 2022-02-14 16:38:19,024 incoming_def powfactor = const(int, 1)
DEBUG 2022-02-14 16:38:19,024 replaced with: $214inplace_multiply.7 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=powfactor.2, rhs=$212binary_true_divide.6, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:38:19,024 on stmt: powfactor.1 = $214inplace_multiply.7
DEBUG 2022-02-14 16:38:19,024 on stmt: $218load_global.8 = global(range: <class 'range'>)
DEBUG 2022-02-14 16:38:19,024 on stmt: $224binary_multiply.11 = i * j
DEBUG 2022-02-14 16:38:19,024 on stmt: $const226.12 = const(int, 1)
DEBUG 2022-02-14 16:38:19,024 on stmt: $228binary_add.13 = $224binary_multiply.11 + $const226.12
DEBUG 2022-02-14 16:38:19,025 on stmt: $const232.15 = const(int, 2)
DEBUG 2022-02-14 16:38:19,025 on stmt: $234binary_add.16 = n + $const232.15
DEBUG 2022-02-14 16:38:19,025 on stmt: $236call_function.17 = call $218load_global.8($228binary_add.13, $234binary_add.16, func=$218load_global.8, args=[Var($228binary_add.13, _loop_hafnian_subroutines.py:179), Var($234binary_add.16, _loop_hafnian_subroutines.py:179)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:19,025 on stmt: $238get_iter.18 = getiter(value=$236call_function.17)
DEBUG 2022-02-14 16:38:19,025 on stmt: $phi240.2 = $238get_iter.18
DEBUG 2022-02-14 16:38:19,025 on stmt: jump 240
DEBUG 2022-02-14 16:38:19,025 ==== SSA block rewrite pass on 240
DEBUG 2022-02-14 16:38:19,025 Running <numba.core.ssa._FixSSAVars object at 0x7fa041ef1f10>
DEBUG 2022-02-14 16:38:19,025 on stmt: $240for_iter.3 = iternext(value=$phi240.2)
DEBUG 2022-02-14 16:38:19,025 on stmt: $240for_iter.4 = pair_first(value=$240for_iter.3)
DEBUG 2022-02-14 16:38:19,025 on stmt: $240for_iter.5 = pair_second(value=$240for_iter.3)
DEBUG 2022-02-14 16:38:19,025 on stmt: $phi242.3 = $240for_iter.4
DEBUG 2022-02-14 16:38:19,025 on stmt: branch $240for_iter.5, 242, 298
DEBUG 2022-02-14 16:38:19,025 ==== SSA block rewrite pass on 242
DEBUG 2022-02-14 16:38:19,025 Running <numba.core.ssa._FixSSAVars object at 0x7fa041ef1f10>
DEBUG 2022-02-14 16:38:19,025 on stmt: k = $phi242.3
DEBUG 2022-02-14 16:38:19,025 on stmt: $const250.7 = const(int, 1)
DEBUG 2022-02-14 16:38:19,025 on stmt: $252binary_subtract.8 = k - $const250.7
DEBUG 2022-02-14 16:38:19,025 on stmt: $254build_tuple.9 = build_tuple(items=[Var(count, _loop_hafnian_subroutines.py:161), Var($252binary_subtract.8, _loop_hafnian_subroutines.py:180)])
DEBUG 2022-02-14 16:38:19,025 on stmt: $258binary_subscr.12 = getitem(value=comb, index=$254build_tuple.9, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:19,025 on stmt: $const262.14 = const(int, 1)
DEBUG 2022-02-14 16:38:19,025 on stmt: $266binary_subtract.16 = $const262.14 - count
DEBUG 2022-02-14 16:38:19,025 on stmt: $274binary_multiply.20 = i * j
DEBUG 2022-02-14 16:38:19,025 on stmt: $276binary_subtract.21 = k - $274binary_multiply.20
DEBUG 2022-02-14 16:38:19,025 on stmt: $const278.22 = const(int, 1)
DEBUG 2022-02-14 16:38:19,025 on stmt: $280binary_subtract.23 = $276binary_subtract.21 - $const278.22
DEBUG 2022-02-14 16:38:19,025 on stmt: $282build_tuple.24 = build_tuple(items=[Var($266binary_subtract.16, _loop_hafnian_subroutines.py:180), Var($280binary_subtract.23, _loop_hafnian_subroutines.py:180)])
DEBUG 2022-02-14 16:38:19,026 on stmt: $284binary_subscr.25 = getitem(value=comb, index=$282build_tuple.24, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:19,026 on stmt: $288binary_multiply.27 = $284binary_subscr.25 * powfactor
DEBUG 2022-02-14 16:38:19,026 find_def var='powfactor' stmt=$288binary_multiply.27 = $284binary_subscr.25 * powfactor
DEBUG 2022-02-14 16:38:19,026 find_def_from_top label 242
DEBUG 2022-02-14 16:38:19,026 idom 240 from label 242
DEBUG 2022-02-14 16:38:19,026 find_def_from_bottom label 240
DEBUG 2022-02-14 16:38:19,026 find_def_from_top label 240
DEBUG 2022-02-14 16:38:19,026 idom 204 from label 240
DEBUG 2022-02-14 16:38:19,026 find_def_from_bottom label 204
DEBUG 2022-02-14 16:38:19,026 replaced with: $288binary_multiply.27 = $284binary_subscr.25 * powfactor.1
DEBUG 2022-02-14 16:38:19,026 on stmt: $290inplace_add.28 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$258binary_subscr.12, rhs=$288binary_multiply.27, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:38:19,026 on stmt: comb[$254build_tuple.9] = $290inplace_add.28
DEBUG 2022-02-14 16:38:19,026 on stmt: jump 240
DEBUG 2022-02-14 16:38:19,026 ==== SSA block rewrite pass on 298
DEBUG 2022-02-14 16:38:19,026 Running <numba.core.ssa._FixSSAVars object at 0x7fa041ef1f10>
DEBUG 2022-02-14 16:38:19,026 on stmt: jump 202
DEBUG 2022-02-14 16:38:19,026 ==== SSA block rewrite pass on 300
DEBUG 2022-02-14 16:38:19,026 Running <numba.core.ssa._FixSSAVars object at 0x7fa041ef1f10>
DEBUG 2022-02-14 16:38:19,026 on stmt: jump 60
DEBUG 2022-02-14 16:38:19,026 ==== SSA block rewrite pass on 302
DEBUG 2022-02-14 16:38:19,026 Running <numba.core.ssa._FixSSAVars object at 0x7fa041ef1f10>
DEBUG 2022-02-14 16:38:19,026 on stmt: $const306.2 = const(NoneType, None)
DEBUG 2022-02-14 16:38:19,026 on stmt: $const308.3 = const(NoneType, None)
DEBUG 2022-02-14 16:38:19,026 on stmt: $310build_slice.4 = global(slice: <class 'slice'>)
DEBUG 2022-02-14 16:38:19,026 on stmt: $310build_slice.5 = call $310build_slice.4($const306.2, $const308.3, func=$310build_slice.4, args=(Var($const306.2, _loop_hafnian_subroutines.py:182), Var($const308.3, _loop_hafnian_subroutines.py:182)), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:19,027 on stmt: $312build_tuple.6 = build_tuple(items=[Var(count, _loop_hafnian_subroutines.py:161), Var($310build_slice.5, _loop_hafnian_subroutines.py:182)])
DEBUG 2022-02-14 16:38:19,027 on stmt: $314binary_subscr.7 = getitem(value=comb, index=$312build_tuple.6, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:19,027 on stmt: $316return_value.8 = cast(value=$314binary_subscr.7)
DEBUG 2022-02-14 16:38:19,027 on stmt: return $316return_value.8
DEBUG 2022-02-14 16:38:19,027 Fix SSA violator on var D_S
DEBUG 2022-02-14 16:38:19,027 ==== SSA block rewrite pass on 0
DEBUG 2022-02-14 16:38:19,027 Running <numba.core.ssa._FreshVarHandler object at 0x7fa041eefa90>
DEBUG 2022-02-14 16:38:19,027 on stmt: E = arg(0, name=E)
DEBUG 2022-02-14 16:38:19,027 on stmt: AX_S = arg(1, name=AX_S)
DEBUG 2022-02-14 16:38:19,027 on stmt: XD_S = arg(2, name=XD_S)
DEBUG 2022-02-14 16:38:19,027 on stmt: D_S = arg(3, name=D_S)
DEBUG 2022-02-14 16:38:19,027 first assign: D_S
DEBUG 2022-02-14 16:38:19,027 replaced with: D_S = arg(3, name=D_S)
DEBUG 2022-02-14 16:38:19,027 on stmt: n = arg(4, name=n)
DEBUG 2022-02-14 16:38:19,027 on stmt: oddloop = arg(5, name=oddloop)
DEBUG 2022-02-14 16:38:19,027 on stmt: oddVX_S = arg(6, name=oddVX_S)
DEBUG 2022-02-14 16:38:19,027 on stmt: $4load_method.1 = getattr(value=E, attr=copy)
DEBUG 2022-02-14 16:38:19,027 on stmt: E_k = call $4load_method.1(func=$4load_method.1, args=[], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:19,027 on stmt: count = const(int, 0)
DEBUG 2022-02-14 16:38:19,027 on stmt: $14load_global.4 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:38:19,027 on stmt: $16load_attr.5 = getattr(value=$14load_global.4, attr=zeros)
DEBUG 2022-02-14 16:38:19,027 on stmt: $const18.6 = const(int, 2)
DEBUG 2022-02-14 16:38:19,027 on stmt: $const22.8 = const(int, 1)
DEBUG 2022-02-14 16:38:19,027 on stmt: $24binary_add.9 = n + $const22.8
DEBUG 2022-02-14 16:38:19,027 on stmt: $26build_tuple.10 = build_tuple(items=[Var($const18.6, _loop_hafnian_subroutines.py:162), Var($24binary_add.9, _loop_hafnian_subroutines.py:162)])
DEBUG 2022-02-14 16:38:19,027 on stmt: $28load_global.11 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:38:19,028 on stmt: $30load_attr.12 = getattr(value=$28load_global.11, attr=complex128)
DEBUG 2022-02-14 16:38:19,028 on stmt: comb = call $16load_attr.5($26build_tuple.10, func=$16load_attr.5, args=[Var($26build_tuple.10, _loop_hafnian_subroutines.py:162)], kws=[('dtype', Var($30load_attr.12, _loop_hafnian_subroutines.py:162))], vararg=None, target=None)
DEBUG 2022-02-14 16:38:19,028 on stmt: $const38.15 = const(int, 1)
DEBUG 2022-02-14 16:38:19,028 on stmt: $const_0 = const(int, 0)
DEBUG 2022-02-14 16:38:19,028 on stmt: $const_0.1 = const(int, 0)
DEBUG 2022-02-14 16:38:19,028 on stmt: $const42.17 = build_tuple(items=[Var($const_0, _loop_hafnian_subroutines.py:163), Var($const_0.1, _loop_hafnian_subroutines.py:163)])
DEBUG 2022-02-14 16:38:19,028 on stmt: comb[(0, 0)] = $const38.15
DEBUG 2022-02-14 16:38:19,028 on stmt: $46load_global.18 = global(range: <class 'range'>)
DEBUG 2022-02-14 16:38:19,028 on stmt: $const48.19 = const(int, 1)
DEBUG 2022-02-14 16:38:19,028 on stmt: $const52.21 = const(int, 1)
DEBUG 2022-02-14 16:38:19,028 on stmt: $54binary_add.22 = n + $const52.21
DEBUG 2022-02-14 16:38:19,028 on stmt: $56call_function.23 = call $46load_global.18($const48.19, $54binary_add.22, func=$46load_global.18, args=[Var($const48.19, _loop_hafnian_subroutines.py:164), Var($54binary_add.22, _loop_hafnian_subroutines.py:164)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:19,028 on stmt: $58get_iter.24 = getiter(value=$56call_function.23)
DEBUG 2022-02-14 16:38:19,028 on stmt: $phi60.0 = $58get_iter.24
DEBUG 2022-02-14 16:38:19,028 on stmt: jump 60
DEBUG 2022-02-14 16:38:19,028 ==== SSA block rewrite pass on 60
DEBUG 2022-02-14 16:38:19,028 Running <numba.core.ssa._FreshVarHandler object at 0x7fa041eefa90>
DEBUG 2022-02-14 16:38:19,028 on stmt: $60for_iter.1 = iternext(value=$phi60.0)
DEBUG 2022-02-14 16:38:19,028 on stmt: $60for_iter.2 = pair_first(value=$60for_iter.1)
DEBUG 2022-02-14 16:38:19,028 on stmt: $60for_iter.3 = pair_second(value=$60for_iter.1)
DEBUG 2022-02-14 16:38:19,028 on stmt: $phi62.1 = $60for_iter.2
DEBUG 2022-02-14 16:38:19,028 on stmt: branch $60for_iter.3, 62, 302
DEBUG 2022-02-14 16:38:19,028 ==== SSA block rewrite pass on 62
DEBUG 2022-02-14 16:38:19,028 Running <numba.core.ssa._FreshVarHandler object at 0x7fa041eefa90>
DEBUG 2022-02-14 16:38:19,028 on stmt: i = $phi62.1
DEBUG 2022-02-14 16:38:19,028 on stmt: $const66.3 = const(int, 1)
DEBUG 2022-02-14 16:38:19,028 on stmt: $68compare_op.4 = i == $const66.3
DEBUG 2022-02-14 16:38:19,029 on stmt: bool70 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:38:19,029 on stmt: $70pred = call bool70($68compare_op.4, func=bool70, args=(Var($68compare_op.4, _loop_hafnian_subroutines.py:165),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:19,029 on stmt: branch $70pred, 72, 78
DEBUG 2022-02-14 16:38:19,029 ==== SSA block rewrite pass on 72
DEBUG 2022-02-14 16:38:19,029 Running <numba.core.ssa._FreshVarHandler object at 0x7fa041eefa90>
DEBUG 2022-02-14 16:38:19,029 on stmt: factor = oddloop
DEBUG 2022-02-14 16:38:19,029 on stmt: jump 140
DEBUG 2022-02-14 16:38:19,029 ==== SSA block rewrite pass on 78
DEBUG 2022-02-14 16:38:19,029 Running <numba.core.ssa._FreshVarHandler object at 0x7fa041eefa90>
DEBUG 2022-02-14 16:38:19,029 on stmt: $const80.2 = const(int, 2)
DEBUG 2022-02-14 16:38:19,029 on stmt: $82binary_modulo.3 = i % $const80.2
DEBUG 2022-02-14 16:38:19,029 on stmt: $const84.4 = const(int, 0)
DEBUG 2022-02-14 16:38:19,029 on stmt: $86compare_op.5 = $82binary_modulo.3 == $const84.4
DEBUG 2022-02-14 16:38:19,029 on stmt: bool88 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:38:19,029 on stmt: $88pred = call bool88($86compare_op.5, func=bool88, args=(Var($86compare_op.5, _loop_hafnian_subroutines.py:167),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:19,029 on stmt: branch $88pred, 90, 124
DEBUG 2022-02-14 16:38:19,029 ==== SSA block rewrite pass on 90
DEBUG 2022-02-14 16:38:19,029 Running <numba.core.ssa._FreshVarHandler object at 0x7fa041eefa90>
DEBUG 2022-02-14 16:38:19,029 on stmt: $92load_method.2 = getattr(value=E_k, attr=sum)
DEBUG 2022-02-14 16:38:19,029 on stmt: $94call_method.3 = call $92load_method.2(func=$92load_method.2, args=[], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:19,029 on stmt: $98binary_true_divide.5 = $94call_method.3 / i
DEBUG 2022-02-14 16:38:19,029 on stmt: $104binary_matrix_multiply.8 = XD_S <built-in function matmul> D_S
DEBUG 2022-02-14 16:38:19,029 on stmt: $const106.9 = const(int, 2)
DEBUG 2022-02-14 16:38:19,029 on stmt: $108binary_true_divide.10 = $104binary_matrix_multiply.8 / $const106.9
DEBUG 2022-02-14 16:38:19,029 on stmt: factor.1 = $98binary_true_divide.5 + $108binary_true_divide.10
DEBUG 2022-02-14 16:38:19,029 on stmt: $118inplace_multiply.14 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=E_k, rhs=E, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:38:19,030 on stmt: E_k = $118inplace_multiply.14
DEBUG 2022-02-14 16:38:19,030 on stmt: jump 140
DEBUG 2022-02-14 16:38:19,030 ==== SSA block rewrite pass on 124
DEBUG 2022-02-14 16:38:19,030 Running <numba.core.ssa._FreshVarHandler object at 0x7fa041eefa90>
DEBUG 2022-02-14 16:38:19,030 on stmt: factor.2 = oddVX_S <built-in function matmul> D_S
DEBUG 2022-02-14 16:38:19,030 on stmt: $136binary_matrix_multiply.6 = AX_S <built-in function matmul> D_S
DEBUG 2022-02-14 16:38:19,030 on stmt: D_S = $136binary_matrix_multiply.6
DEBUG 2022-02-14 16:38:19,030 replaced with: D_S.1 = $136binary_matrix_multiply.6
DEBUG 2022-02-14 16:38:19,030 on stmt: jump 140
DEBUG 2022-02-14 16:38:19,030 ==== SSA block rewrite pass on 140
DEBUG 2022-02-14 16:38:19,030 Running <numba.core.ssa._FreshVarHandler object at 0x7fa041eefa90>
DEBUG 2022-02-14 16:38:19,030 on stmt: factor.3 = phi(incoming_values=[Var(factor, _loop_hafnian_subroutines.py:166), Var(factor.1, _loop_hafnian_subroutines.py:168), Var(factor.2, _loop_hafnian_subroutines.py:171)], incoming_blocks=[72, 90, 124])
DEBUG 2022-02-14 16:38:19,030 on stmt: powfactor = const(int, 1)
DEBUG 2022-02-14 16:38:19,030 on stmt: $const144.2 = const(int, 1)
DEBUG 2022-02-14 16:38:19,030 on stmt: $148binary_subtract.4 = $const144.2 - count
DEBUG 2022-02-14 16:38:19,030 on stmt: count = $148binary_subtract.4
DEBUG 2022-02-14 16:38:19,030 on stmt: $const154.6 = const(int, 1)
DEBUG 2022-02-14 16:38:19,030 on stmt: $158binary_subtract.8 = $const154.6 - count
DEBUG 2022-02-14 16:38:19,030 on stmt: $const160.9 = const(NoneType, None)
DEBUG 2022-02-14 16:38:19,030 on stmt: $const162.10 = const(NoneType, None)
DEBUG 2022-02-14 16:38:19,030 on stmt: $164build_slice.11 = global(slice: <class 'slice'>)
DEBUG 2022-02-14 16:38:19,030 on stmt: $164build_slice.12 = call $164build_slice.11($const160.9, $const162.10, func=$164build_slice.11, args=(Var($const160.9, _loop_hafnian_subroutines.py:176), Var($const162.10, _loop_hafnian_subroutines.py:176)), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:19,030 on stmt: $166build_tuple.13 = build_tuple(items=[Var($158binary_subtract.8, _loop_hafnian_subroutines.py:176), Var($164build_slice.12, _loop_hafnian_subroutines.py:176)])
DEBUG 2022-02-14 16:38:19,030 on stmt: $168binary_subscr.14 = getitem(value=comb, index=$166build_tuple.13, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:19,030 on stmt: $const174.17 = const(NoneType, None)
DEBUG 2022-02-14 16:38:19,030 on stmt: $const176.18 = const(NoneType, None)
DEBUG 2022-02-14 16:38:19,030 on stmt: $178build_slice.19 = global(slice: <class 'slice'>)
DEBUG 2022-02-14 16:38:19,031 on stmt: $178build_slice.20 = call $178build_slice.19($const174.17, $const176.18, func=$178build_slice.19, args=(Var($const174.17, _loop_hafnian_subroutines.py:176), Var($const176.18, _loop_hafnian_subroutines.py:176)), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:19,031 on stmt: $180build_tuple.21 = build_tuple(items=[Var(count, _loop_hafnian_subroutines.py:161), Var($178build_slice.20, _loop_hafnian_subroutines.py:176)])
DEBUG 2022-02-14 16:38:19,031 on stmt: comb[$180build_tuple.21] = $168binary_subscr.14
DEBUG 2022-02-14 16:38:19,031 on stmt: $184load_global.22 = global(range: <class 'range'>)
DEBUG 2022-02-14 16:38:19,031 on stmt: $const186.23 = const(int, 1)
DEBUG 2022-02-14 16:38:19,031 on stmt: $192binary_floor_divide.26 = n // i
DEBUG 2022-02-14 16:38:19,031 on stmt: $const194.27 = const(int, 1)
DEBUG 2022-02-14 16:38:19,031 on stmt: $196binary_add.28 = $192binary_floor_divide.26 + $const194.27
DEBUG 2022-02-14 16:38:19,031 on stmt: $198call_function.29 = call $184load_global.22($const186.23, $196binary_add.28, func=$184load_global.22, args=[Var($const186.23, _loop_hafnian_subroutines.py:177), Var($196binary_add.28, _loop_hafnian_subroutines.py:177)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:19,031 on stmt: $200get_iter.30 = getiter(value=$198call_function.29)
DEBUG 2022-02-14 16:38:19,031 on stmt: $phi202.1 = $200get_iter.30
DEBUG 2022-02-14 16:38:19,031 on stmt: jump 202
DEBUG 2022-02-14 16:38:19,031 ==== SSA block rewrite pass on 202
DEBUG 2022-02-14 16:38:19,031 Running <numba.core.ssa._FreshVarHandler object at 0x7fa041eefa90>
DEBUG 2022-02-14 16:38:19,031 on stmt: powfactor.2 = phi(incoming_values=[Var(powfactor.1, _loop_hafnian_subroutines.py:178), Var(powfactor, _loop_hafnian_subroutines.py:174)], incoming_blocks=[298, 140])
DEBUG 2022-02-14 16:38:19,031 on stmt: $202for_iter.2 = iternext(value=$phi202.1)
DEBUG 2022-02-14 16:38:19,031 on stmt: $202for_iter.3 = pair_first(value=$202for_iter.2)
DEBUG 2022-02-14 16:38:19,031 on stmt: $202for_iter.4 = pair_second(value=$202for_iter.2)
DEBUG 2022-02-14 16:38:19,031 on stmt: $phi204.2 = $202for_iter.3
DEBUG 2022-02-14 16:38:19,031 on stmt: branch $202for_iter.4, 204, 300
DEBUG 2022-02-14 16:38:19,031 ==== SSA block rewrite pass on 204
DEBUG 2022-02-14 16:38:19,031 Running <numba.core.ssa._FreshVarHandler object at 0x7fa041eefa90>
DEBUG 2022-02-14 16:38:19,031 on stmt: j = $phi204.2
DEBUG 2022-02-14 16:38:19,031 on stmt: $212binary_true_divide.6 = factor.3 / j
DEBUG 2022-02-14 16:38:19,031 on stmt: $214inplace_multiply.7 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=powfactor.2, rhs=$212binary_true_divide.6, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:38:19,031 on stmt: powfactor.1 = $214inplace_multiply.7
DEBUG 2022-02-14 16:38:19,031 on stmt: $218load_global.8 = global(range: <class 'range'>)
DEBUG 2022-02-14 16:38:19,032 on stmt: $224binary_multiply.11 = i * j
DEBUG 2022-02-14 16:38:19,032 on stmt: $const226.12 = const(int, 1)
DEBUG 2022-02-14 16:38:19,032 on stmt: $228binary_add.13 = $224binary_multiply.11 + $const226.12
DEBUG 2022-02-14 16:38:19,032 on stmt: $const232.15 = const(int, 2)
DEBUG 2022-02-14 16:38:19,032 on stmt: $234binary_add.16 = n + $const232.15
DEBUG 2022-02-14 16:38:19,032 on stmt: $236call_function.17 = call $218load_global.8($228binary_add.13, $234binary_add.16, func=$218load_global.8, args=[Var($228binary_add.13, _loop_hafnian_subroutines.py:179), Var($234binary_add.16, _loop_hafnian_subroutines.py:179)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:19,032 on stmt: $238get_iter.18 = getiter(value=$236call_function.17)
DEBUG 2022-02-14 16:38:19,032 on stmt: $phi240.2 = $238get_iter.18
DEBUG 2022-02-14 16:38:19,032 on stmt: jump 240
DEBUG 2022-02-14 16:38:19,032 ==== SSA block rewrite pass on 240
DEBUG 2022-02-14 16:38:19,032 Running <numba.core.ssa._FreshVarHandler object at 0x7fa041eefa90>
DEBUG 2022-02-14 16:38:19,032 on stmt: $240for_iter.3 = iternext(value=$phi240.2)
DEBUG 2022-02-14 16:38:19,032 on stmt: $240for_iter.4 = pair_first(value=$240for_iter.3)
DEBUG 2022-02-14 16:38:19,032 on stmt: $240for_iter.5 = pair_second(value=$240for_iter.3)
DEBUG 2022-02-14 16:38:19,032 on stmt: $phi242.3 = $240for_iter.4
DEBUG 2022-02-14 16:38:19,032 on stmt: branch $240for_iter.5, 242, 298
DEBUG 2022-02-14 16:38:19,032 ==== SSA block rewrite pass on 242
DEBUG 2022-02-14 16:38:19,032 Running <numba.core.ssa._FreshVarHandler object at 0x7fa041eefa90>
DEBUG 2022-02-14 16:38:19,032 on stmt: k = $phi242.3
DEBUG 2022-02-14 16:38:19,032 on stmt: $const250.7 = const(int, 1)
DEBUG 2022-02-14 16:38:19,032 on stmt: $252binary_subtract.8 = k - $const250.7
DEBUG 2022-02-14 16:38:19,032 on stmt: $254build_tuple.9 = build_tuple(items=[Var(count, _loop_hafnian_subroutines.py:161), Var($252binary_subtract.8, _loop_hafnian_subroutines.py:180)])
DEBUG 2022-02-14 16:38:19,032 on stmt: $258binary_subscr.12 = getitem(value=comb, index=$254build_tuple.9, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:19,032 on stmt: $const262.14 = const(int, 1)
DEBUG 2022-02-14 16:38:19,032 on stmt: $266binary_subtract.16 = $const262.14 - count
DEBUG 2022-02-14 16:38:19,032 on stmt: $274binary_multiply.20 = i * j
DEBUG 2022-02-14 16:38:19,032 on stmt: $276binary_subtract.21 = k - $274binary_multiply.20
DEBUG 2022-02-14 16:38:19,032 on stmt: $const278.22 = const(int, 1)
DEBUG 2022-02-14 16:38:19,033 on stmt: $280binary_subtract.23 = $276binary_subtract.21 - $const278.22
DEBUG 2022-02-14 16:38:19,033 on stmt: $282build_tuple.24 = build_tuple(items=[Var($266binary_subtract.16, _loop_hafnian_subroutines.py:180), Var($280binary_subtract.23, _loop_hafnian_subroutines.py:180)])
DEBUG 2022-02-14 16:38:19,033 on stmt: $284binary_subscr.25 = getitem(value=comb, index=$282build_tuple.24, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:19,033 on stmt: $288binary_multiply.27 = $284binary_subscr.25 * powfactor.1
DEBUG 2022-02-14 16:38:19,033 on stmt: $290inplace_add.28 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$258binary_subscr.12, rhs=$288binary_multiply.27, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:38:19,033 on stmt: comb[$254build_tuple.9] = $290inplace_add.28
DEBUG 2022-02-14 16:38:19,033 on stmt: jump 240
DEBUG 2022-02-14 16:38:19,033 ==== SSA block rewrite pass on 298
DEBUG 2022-02-14 16:38:19,033 Running <numba.core.ssa._FreshVarHandler object at 0x7fa041eefa90>
DEBUG 2022-02-14 16:38:19,033 on stmt: jump 202
DEBUG 2022-02-14 16:38:19,033 ==== SSA block rewrite pass on 300
DEBUG 2022-02-14 16:38:19,033 Running <numba.core.ssa._FreshVarHandler object at 0x7fa041eefa90>
DEBUG 2022-02-14 16:38:19,033 on stmt: jump 60
DEBUG 2022-02-14 16:38:19,033 ==== SSA block rewrite pass on 302
DEBUG 2022-02-14 16:38:19,033 Running <numba.core.ssa._FreshVarHandler object at 0x7fa041eefa90>
DEBUG 2022-02-14 16:38:19,033 on stmt: $const306.2 = const(NoneType, None)
DEBUG 2022-02-14 16:38:19,033 on stmt: $const308.3 = const(NoneType, None)
DEBUG 2022-02-14 16:38:19,033 on stmt: $310build_slice.4 = global(slice: <class 'slice'>)
DEBUG 2022-02-14 16:38:19,033 on stmt: $310build_slice.5 = call $310build_slice.4($const306.2, $const308.3, func=$310build_slice.4, args=(Var($const306.2, _loop_hafnian_subroutines.py:182), Var($const308.3, _loop_hafnian_subroutines.py:182)), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:19,033 on stmt: $312build_tuple.6 = build_tuple(items=[Var(count, _loop_hafnian_subroutines.py:161), Var($310build_slice.5, _loop_hafnian_subroutines.py:182)])
DEBUG 2022-02-14 16:38:19,033 on stmt: $314binary_subscr.7 = getitem(value=comb, index=$312build_tuple.6, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:19,033 on stmt: $316return_value.8 = cast(value=$314binary_subscr.7)
DEBUG 2022-02-14 16:38:19,033 on stmt: return $316return_value.8
DEBUG 2022-02-14 16:38:19,033 Replaced assignments: defaultdict(<class 'list'>,
            {0: [<numba.core.ir.Assign object at 0x7fa041eef5b0>],
             124: [<numba.core.ir.Assign object at 0x7fa046132c40>]})
DEBUG 2022-02-14 16:38:19,033 ==== SSA block rewrite pass on 0
DEBUG 2022-02-14 16:38:19,034 Running <numba.core.ssa._FixSSAVars object at 0x7fa047184ac0>
DEBUG 2022-02-14 16:38:19,034 on stmt: E = arg(0, name=E)
DEBUG 2022-02-14 16:38:19,034 on stmt: AX_S = arg(1, name=AX_S)
DEBUG 2022-02-14 16:38:19,034 on stmt: XD_S = arg(2, name=XD_S)
DEBUG 2022-02-14 16:38:19,034 on stmt: D_S = arg(3, name=D_S)
DEBUG 2022-02-14 16:38:19,034 on stmt: n = arg(4, name=n)
DEBUG 2022-02-14 16:38:19,034 on stmt: oddloop = arg(5, name=oddloop)
DEBUG 2022-02-14 16:38:19,034 on stmt: oddVX_S = arg(6, name=oddVX_S)
DEBUG 2022-02-14 16:38:19,034 on stmt: $4load_method.1 = getattr(value=E, attr=copy)
DEBUG 2022-02-14 16:38:19,034 on stmt: E_k = call $4load_method.1(func=$4load_method.1, args=[], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:19,034 on stmt: count = const(int, 0)
DEBUG 2022-02-14 16:38:19,034 on stmt: $14load_global.4 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:38:19,034 on stmt: $16load_attr.5 = getattr(value=$14load_global.4, attr=zeros)
DEBUG 2022-02-14 16:38:19,034 on stmt: $const18.6 = const(int, 2)
DEBUG 2022-02-14 16:38:19,034 on stmt: $const22.8 = const(int, 1)
DEBUG 2022-02-14 16:38:19,034 on stmt: $24binary_add.9 = n + $const22.8
DEBUG 2022-02-14 16:38:19,034 on stmt: $26build_tuple.10 = build_tuple(items=[Var($const18.6, _loop_hafnian_subroutines.py:162), Var($24binary_add.9, _loop_hafnian_subroutines.py:162)])
DEBUG 2022-02-14 16:38:19,034 on stmt: $28load_global.11 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:38:19,034 on stmt: $30load_attr.12 = getattr(value=$28load_global.11, attr=complex128)
DEBUG 2022-02-14 16:38:19,034 on stmt: comb = call $16load_attr.5($26build_tuple.10, func=$16load_attr.5, args=[Var($26build_tuple.10, _loop_hafnian_subroutines.py:162)], kws=[('dtype', Var($30load_attr.12, _loop_hafnian_subroutines.py:162))], vararg=None, target=None)
DEBUG 2022-02-14 16:38:19,034 on stmt: $const38.15 = const(int, 1)
DEBUG 2022-02-14 16:38:19,034 on stmt: $const_0 = const(int, 0)
DEBUG 2022-02-14 16:38:19,034 on stmt: $const_0.1 = const(int, 0)
DEBUG 2022-02-14 16:38:19,034 on stmt: $const42.17 = build_tuple(items=[Var($const_0, _loop_hafnian_subroutines.py:163), Var($const_0.1, _loop_hafnian_subroutines.py:163)])
DEBUG 2022-02-14 16:38:19,035 on stmt: comb[(0, 0)] = $const38.15
DEBUG 2022-02-14 16:38:19,035 on stmt: $46load_global.18 = global(range: <class 'range'>)
DEBUG 2022-02-14 16:38:19,035 on stmt: $const48.19 = const(int, 1)
DEBUG 2022-02-14 16:38:19,035 on stmt: $const52.21 = const(int, 1)
DEBUG 2022-02-14 16:38:19,035 on stmt: $54binary_add.22 = n + $const52.21
DEBUG 2022-02-14 16:38:19,035 on stmt: $56call_function.23 = call $46load_global.18($const48.19, $54binary_add.22, func=$46load_global.18, args=[Var($const48.19, _loop_hafnian_subroutines.py:164), Var($54binary_add.22, _loop_hafnian_subroutines.py:164)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:19,035 on stmt: $58get_iter.24 = getiter(value=$56call_function.23)
DEBUG 2022-02-14 16:38:19,035 on stmt: $phi60.0 = $58get_iter.24
DEBUG 2022-02-14 16:38:19,035 on stmt: jump 60
DEBUG 2022-02-14 16:38:19,035 ==== SSA block rewrite pass on 60
DEBUG 2022-02-14 16:38:19,035 Running <numba.core.ssa._FixSSAVars object at 0x7fa047184ac0>
DEBUG 2022-02-14 16:38:19,035 on stmt: $60for_iter.1 = iternext(value=$phi60.0)
DEBUG 2022-02-14 16:38:19,035 on stmt: $60for_iter.2 = pair_first(value=$60for_iter.1)
DEBUG 2022-02-14 16:38:19,035 on stmt: $60for_iter.3 = pair_second(value=$60for_iter.1)
DEBUG 2022-02-14 16:38:19,035 on stmt: $phi62.1 = $60for_iter.2
DEBUG 2022-02-14 16:38:19,035 on stmt: branch $60for_iter.3, 62, 302
DEBUG 2022-02-14 16:38:19,035 ==== SSA block rewrite pass on 62
DEBUG 2022-02-14 16:38:19,035 Running <numba.core.ssa._FixSSAVars object at 0x7fa047184ac0>
DEBUG 2022-02-14 16:38:19,035 on stmt: i = $phi62.1
DEBUG 2022-02-14 16:38:19,035 on stmt: $const66.3 = const(int, 1)
DEBUG 2022-02-14 16:38:19,035 on stmt: $68compare_op.4 = i == $const66.3
DEBUG 2022-02-14 16:38:19,035 on stmt: bool70 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:38:19,035 on stmt: $70pred = call bool70($68compare_op.4, func=bool70, args=(Var($68compare_op.4, _loop_hafnian_subroutines.py:165),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:19,035 on stmt: branch $70pred, 72, 78
DEBUG 2022-02-14 16:38:19,035 ==== SSA block rewrite pass on 72
DEBUG 2022-02-14 16:38:19,035 Running <numba.core.ssa._FixSSAVars object at 0x7fa047184ac0>
DEBUG 2022-02-14 16:38:19,035 on stmt: factor = oddloop
DEBUG 2022-02-14 16:38:19,036 on stmt: jump 140
DEBUG 2022-02-14 16:38:19,036 ==== SSA block rewrite pass on 78
DEBUG 2022-02-14 16:38:19,036 Running <numba.core.ssa._FixSSAVars object at 0x7fa047184ac0>
DEBUG 2022-02-14 16:38:19,036 on stmt: $const80.2 = const(int, 2)
DEBUG 2022-02-14 16:38:19,036 on stmt: $82binary_modulo.3 = i % $const80.2
DEBUG 2022-02-14 16:38:19,036 on stmt: $const84.4 = const(int, 0)
DEBUG 2022-02-14 16:38:19,036 on stmt: $86compare_op.5 = $82binary_modulo.3 == $const84.4
DEBUG 2022-02-14 16:38:19,036 on stmt: bool88 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:38:19,036 on stmt: $88pred = call bool88($86compare_op.5, func=bool88, args=(Var($86compare_op.5, _loop_hafnian_subroutines.py:167),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:19,036 on stmt: branch $88pred, 90, 124
DEBUG 2022-02-14 16:38:19,036 ==== SSA block rewrite pass on 90
DEBUG 2022-02-14 16:38:19,036 Running <numba.core.ssa._FixSSAVars object at 0x7fa047184ac0>
DEBUG 2022-02-14 16:38:19,036 on stmt: $92load_method.2 = getattr(value=E_k, attr=sum)
DEBUG 2022-02-14 16:38:19,036 on stmt: $94call_method.3 = call $92load_method.2(func=$92load_method.2, args=[], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:19,036 on stmt: $98binary_true_divide.5 = $94call_method.3 / i
DEBUG 2022-02-14 16:38:19,036 on stmt: $104binary_matrix_multiply.8 = XD_S <built-in function matmul> D_S
DEBUG 2022-02-14 16:38:19,036 find_def var='D_S' stmt=$104binary_matrix_multiply.8 = XD_S <built-in function matmul> D_S
DEBUG 2022-02-14 16:38:19,036 find_def_from_top label 90
DEBUG 2022-02-14 16:38:19,036 idom 78 from label 90
DEBUG 2022-02-14 16:38:19,036 find_def_from_bottom label 78
DEBUG 2022-02-14 16:38:19,036 find_def_from_top label 78
DEBUG 2022-02-14 16:38:19,036 idom 62 from label 78
DEBUG 2022-02-14 16:38:19,036 find_def_from_bottom label 62
DEBUG 2022-02-14 16:38:19,036 find_def_from_top label 62
DEBUG 2022-02-14 16:38:19,036 idom 60 from label 62
DEBUG 2022-02-14 16:38:19,036 find_def_from_bottom label 60
DEBUG 2022-02-14 16:38:19,036 find_def_from_top label 60
DEBUG 2022-02-14 16:38:19,036 insert phi node D_S.2 = phi(incoming_values=[], incoming_blocks=[]) at 60
DEBUG 2022-02-14 16:38:19,037 find_def_from_bottom label 0
DEBUG 2022-02-14 16:38:19,037 incoming_def D_S = arg(3, name=D_S)
DEBUG 2022-02-14 16:38:19,037 find_def_from_bottom label 300
DEBUG 2022-02-14 16:38:19,037 find_def_from_top label 300
DEBUG 2022-02-14 16:38:19,037 idom 202 from label 300
DEBUG 2022-02-14 16:38:19,037 find_def_from_bottom label 202
DEBUG 2022-02-14 16:38:19,037 find_def_from_top label 202
DEBUG 2022-02-14 16:38:19,037 idom 140 from label 202
DEBUG 2022-02-14 16:38:19,037 find_def_from_bottom label 140
DEBUG 2022-02-14 16:38:19,037 find_def_from_top label 140
DEBUG 2022-02-14 16:38:19,037 insert phi node D_S.3 = phi(incoming_values=[], incoming_blocks=[]) at 140
DEBUG 2022-02-14 16:38:19,037 find_def_from_bottom label 72
DEBUG 2022-02-14 16:38:19,037 find_def_from_top label 72
DEBUG 2022-02-14 16:38:19,037 idom 62 from label 72
DEBUG 2022-02-14 16:38:19,037 find_def_from_bottom label 62
DEBUG 2022-02-14 16:38:19,037 find_def_from_top label 62
DEBUG 2022-02-14 16:38:19,037 idom 60 from label 62
DEBUG 2022-02-14 16:38:19,037 find_def_from_bottom label 60
DEBUG 2022-02-14 16:38:19,037 incoming_def D_S.2 = phi(incoming_values=[Var(D_S, _loop_hafnian_subroutines.py:159)], incoming_blocks=[0])
DEBUG 2022-02-14 16:38:19,037 find_def_from_bottom label 90
DEBUG 2022-02-14 16:38:19,037 find_def_from_top label 90
DEBUG 2022-02-14 16:38:19,037 idom 78 from label 90
DEBUG 2022-02-14 16:38:19,037 find_def_from_bottom label 78
DEBUG 2022-02-14 16:38:19,037 find_def_from_top label 78
DEBUG 2022-02-14 16:38:19,037 idom 62 from label 78
DEBUG 2022-02-14 16:38:19,037 find_def_from_bottom label 62
DEBUG 2022-02-14 16:38:19,037 find_def_from_top label 62
DEBUG 2022-02-14 16:38:19,037 idom 60 from label 62
DEBUG 2022-02-14 16:38:19,037 find_def_from_bottom label 60
DEBUG 2022-02-14 16:38:19,037 incoming_def D_S.2 = phi(incoming_values=[Var(D_S, _loop_hafnian_subroutines.py:159)], incoming_blocks=[0])
DEBUG 2022-02-14 16:38:19,037 find_def_from_bottom label 124
DEBUG 2022-02-14 16:38:19,038 incoming_def D_S.1 = $136binary_matrix_multiply.6
DEBUG 2022-02-14 16:38:19,038 incoming_def D_S.3 = phi(incoming_values=[Var(D_S.2, _loop_hafnian_subroutines.py:168), Var(D_S.2, _loop_hafnian_subroutines.py:168), Var(D_S.1, _loop_hafnian_subroutines.py:172)], incoming_blocks=[72, 90, 124])
DEBUG 2022-02-14 16:38:19,038 replaced with: $104binary_matrix_multiply.8 = XD_S <built-in function matmul> D_S.2
DEBUG 2022-02-14 16:38:19,038 on stmt: $const106.9 = const(int, 2)
DEBUG 2022-02-14 16:38:19,038 on stmt: $108binary_true_divide.10 = $104binary_matrix_multiply.8 / $const106.9
DEBUG 2022-02-14 16:38:19,038 on stmt: factor.1 = $98binary_true_divide.5 + $108binary_true_divide.10
DEBUG 2022-02-14 16:38:19,038 on stmt: $118inplace_multiply.14 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=E_k, rhs=E, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:38:19,038 on stmt: E_k = $118inplace_multiply.14
DEBUG 2022-02-14 16:38:19,038 on stmt: jump 140
DEBUG 2022-02-14 16:38:19,038 ==== SSA block rewrite pass on 124
DEBUG 2022-02-14 16:38:19,038 Running <numba.core.ssa._FixSSAVars object at 0x7fa047184ac0>
DEBUG 2022-02-14 16:38:19,038 on stmt: factor.2 = oddVX_S <built-in function matmul> D_S
DEBUG 2022-02-14 16:38:19,038 find_def var='D_S' stmt=factor.2 = oddVX_S <built-in function matmul> D_S
DEBUG 2022-02-14 16:38:19,038 find_def_from_top label 124
DEBUG 2022-02-14 16:38:19,038 idom 78 from label 124
DEBUG 2022-02-14 16:38:19,038 find_def_from_bottom label 78
DEBUG 2022-02-14 16:38:19,038 find_def_from_top label 78
DEBUG 2022-02-14 16:38:19,038 idom 62 from label 78
DEBUG 2022-02-14 16:38:19,038 find_def_from_bottom label 62
DEBUG 2022-02-14 16:38:19,038 find_def_from_top label 62
DEBUG 2022-02-14 16:38:19,038 idom 60 from label 62
DEBUG 2022-02-14 16:38:19,038 find_def_from_bottom label 60
DEBUG 2022-02-14 16:38:19,038 replaced with: factor.2 = oddVX_S <built-in function matmul> D_S.2
DEBUG 2022-02-14 16:38:19,038 on stmt: $136binary_matrix_multiply.6 = AX_S <built-in function matmul> D_S
DEBUG 2022-02-14 16:38:19,039 find_def var='D_S' stmt=$136binary_matrix_multiply.6 = AX_S <built-in function matmul> D_S
DEBUG 2022-02-14 16:38:19,039 find_def_from_top label 124
DEBUG 2022-02-14 16:38:19,039 idom 78 from label 124
DEBUG 2022-02-14 16:38:19,039 find_def_from_bottom label 78
DEBUG 2022-02-14 16:38:19,039 find_def_from_top label 78
DEBUG 2022-02-14 16:38:19,039 idom 62 from label 78
DEBUG 2022-02-14 16:38:19,039 find_def_from_bottom label 62
DEBUG 2022-02-14 16:38:19,039 find_def_from_top label 62
DEBUG 2022-02-14 16:38:19,039 idom 60 from label 62
DEBUG 2022-02-14 16:38:19,039 find_def_from_bottom label 60
DEBUG 2022-02-14 16:38:19,039 replaced with: $136binary_matrix_multiply.6 = AX_S <built-in function matmul> D_S.2
DEBUG 2022-02-14 16:38:19,039 on stmt: D_S.1 = $136binary_matrix_multiply.6
DEBUG 2022-02-14 16:38:19,039 on stmt: jump 140
DEBUG 2022-02-14 16:38:19,039 ==== SSA block rewrite pass on 140
DEBUG 2022-02-14 16:38:19,039 Running <numba.core.ssa._FixSSAVars object at 0x7fa047184ac0>
DEBUG 2022-02-14 16:38:19,039 on stmt: factor.3 = phi(incoming_values=[Var(factor, _loop_hafnian_subroutines.py:166), Var(factor.1, _loop_hafnian_subroutines.py:168), Var(factor.2, _loop_hafnian_subroutines.py:171)], incoming_blocks=[72, 90, 124])
DEBUG 2022-02-14 16:38:19,039 on stmt: powfactor = const(int, 1)
DEBUG 2022-02-14 16:38:19,039 on stmt: $const144.2 = const(int, 1)
DEBUG 2022-02-14 16:38:19,039 on stmt: $148binary_subtract.4 = $const144.2 - count
DEBUG 2022-02-14 16:38:19,039 on stmt: count = $148binary_subtract.4
DEBUG 2022-02-14 16:38:19,039 on stmt: $const154.6 = const(int, 1)
DEBUG 2022-02-14 16:38:19,039 on stmt: $158binary_subtract.8 = $const154.6 - count
DEBUG 2022-02-14 16:38:19,039 on stmt: $const160.9 = const(NoneType, None)
DEBUG 2022-02-14 16:38:19,039 on stmt: $const162.10 = const(NoneType, None)
DEBUG 2022-02-14 16:38:19,039 on stmt: $164build_slice.11 = global(slice: <class 'slice'>)
DEBUG 2022-02-14 16:38:19,039 on stmt: $164build_slice.12 = call $164build_slice.11($const160.9, $const162.10, func=$164build_slice.11, args=(Var($const160.9, _loop_hafnian_subroutines.py:176), Var($const162.10, _loop_hafnian_subroutines.py:176)), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:19,040 on stmt: $166build_tuple.13 = build_tuple(items=[Var($158binary_subtract.8, _loop_hafnian_subroutines.py:176), Var($164build_slice.12, _loop_hafnian_subroutines.py:176)])
DEBUG 2022-02-14 16:38:19,040 on stmt: $168binary_subscr.14 = getitem(value=comb, index=$166build_tuple.13, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:19,040 on stmt: $const174.17 = const(NoneType, None)
DEBUG 2022-02-14 16:38:19,040 on stmt: $const176.18 = const(NoneType, None)
DEBUG 2022-02-14 16:38:19,040 on stmt: $178build_slice.19 = global(slice: <class 'slice'>)
DEBUG 2022-02-14 16:38:19,040 on stmt: $178build_slice.20 = call $178build_slice.19($const174.17, $const176.18, func=$178build_slice.19, args=(Var($const174.17, _loop_hafnian_subroutines.py:176), Var($const176.18, _loop_hafnian_subroutines.py:176)), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:19,040 on stmt: $180build_tuple.21 = build_tuple(items=[Var(count, _loop_hafnian_subroutines.py:161), Var($178build_slice.20, _loop_hafnian_subroutines.py:176)])
DEBUG 2022-02-14 16:38:19,040 on stmt: comb[$180build_tuple.21] = $168binary_subscr.14
DEBUG 2022-02-14 16:38:19,040 on stmt: $184load_global.22 = global(range: <class 'range'>)
DEBUG 2022-02-14 16:38:19,040 on stmt: $const186.23 = const(int, 1)
DEBUG 2022-02-14 16:38:19,040 on stmt: $192binary_floor_divide.26 = n // i
DEBUG 2022-02-14 16:38:19,040 on stmt: $const194.27 = const(int, 1)
DEBUG 2022-02-14 16:38:19,040 on stmt: $196binary_add.28 = $192binary_floor_divide.26 + $const194.27
DEBUG 2022-02-14 16:38:19,040 on stmt: $198call_function.29 = call $184load_global.22($const186.23, $196binary_add.28, func=$184load_global.22, args=[Var($const186.23, _loop_hafnian_subroutines.py:177), Var($196binary_add.28, _loop_hafnian_subroutines.py:177)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:19,040 on stmt: $200get_iter.30 = getiter(value=$198call_function.29)
DEBUG 2022-02-14 16:38:19,040 on stmt: $phi202.1 = $200get_iter.30
DEBUG 2022-02-14 16:38:19,040 on stmt: jump 202
DEBUG 2022-02-14 16:38:19,040 ==== SSA block rewrite pass on 202
DEBUG 2022-02-14 16:38:19,040 Running <numba.core.ssa._FixSSAVars object at 0x7fa047184ac0>
DEBUG 2022-02-14 16:38:19,040 on stmt: powfactor.2 = phi(incoming_values=[Var(powfactor.1, _loop_hafnian_subroutines.py:178), Var(powfactor, _loop_hafnian_subroutines.py:174)], incoming_blocks=[298, 140])
DEBUG 2022-02-14 16:38:19,040 on stmt: $202for_iter.2 = iternext(value=$phi202.1)
DEBUG 2022-02-14 16:38:19,040 on stmt: $202for_iter.3 = pair_first(value=$202for_iter.2)
DEBUG 2022-02-14 16:38:19,040 on stmt: $202for_iter.4 = pair_second(value=$202for_iter.2)
DEBUG 2022-02-14 16:38:19,040 on stmt: $phi204.2 = $202for_iter.3
DEBUG 2022-02-14 16:38:19,041 on stmt: branch $202for_iter.4, 204, 300
DEBUG 2022-02-14 16:38:19,041 ==== SSA block rewrite pass on 204
DEBUG 2022-02-14 16:38:19,041 Running <numba.core.ssa._FixSSAVars object at 0x7fa047184ac0>
DEBUG 2022-02-14 16:38:19,041 on stmt: j = $phi204.2
DEBUG 2022-02-14 16:38:19,041 on stmt: $212binary_true_divide.6 = factor.3 / j
DEBUG 2022-02-14 16:38:19,041 on stmt: $214inplace_multiply.7 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=powfactor.2, rhs=$212binary_true_divide.6, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:38:19,041 on stmt: powfactor.1 = $214inplace_multiply.7
DEBUG 2022-02-14 16:38:19,041 on stmt: $218load_global.8 = global(range: <class 'range'>)
DEBUG 2022-02-14 16:38:19,041 on stmt: $224binary_multiply.11 = i * j
DEBUG 2022-02-14 16:38:19,041 on stmt: $const226.12 = const(int, 1)
DEBUG 2022-02-14 16:38:19,041 on stmt: $228binary_add.13 = $224binary_multiply.11 + $const226.12
DEBUG 2022-02-14 16:38:19,041 on stmt: $const232.15 = const(int, 2)
DEBUG 2022-02-14 16:38:19,041 on stmt: $234binary_add.16 = n + $const232.15
DEBUG 2022-02-14 16:38:19,041 on stmt: $236call_function.17 = call $218load_global.8($228binary_add.13, $234binary_add.16, func=$218load_global.8, args=[Var($228binary_add.13, _loop_hafnian_subroutines.py:179), Var($234binary_add.16, _loop_hafnian_subroutines.py:179)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:19,041 on stmt: $238get_iter.18 = getiter(value=$236call_function.17)
DEBUG 2022-02-14 16:38:19,041 on stmt: $phi240.2 = $238get_iter.18
DEBUG 2022-02-14 16:38:19,041 on stmt: jump 240
DEBUG 2022-02-14 16:38:19,041 ==== SSA block rewrite pass on 240
DEBUG 2022-02-14 16:38:19,041 Running <numba.core.ssa._FixSSAVars object at 0x7fa047184ac0>
DEBUG 2022-02-14 16:38:19,041 on stmt: $240for_iter.3 = iternext(value=$phi240.2)
DEBUG 2022-02-14 16:38:19,041 on stmt: $240for_iter.4 = pair_first(value=$240for_iter.3)
DEBUG 2022-02-14 16:38:19,041 on stmt: $240for_iter.5 = pair_second(value=$240for_iter.3)
DEBUG 2022-02-14 16:38:19,041 on stmt: $phi242.3 = $240for_iter.4
DEBUG 2022-02-14 16:38:19,041 on stmt: branch $240for_iter.5, 242, 298
DEBUG 2022-02-14 16:38:19,041 ==== SSA block rewrite pass on 242
DEBUG 2022-02-14 16:38:19,042 Running <numba.core.ssa._FixSSAVars object at 0x7fa047184ac0>
DEBUG 2022-02-14 16:38:19,042 on stmt: k = $phi242.3
DEBUG 2022-02-14 16:38:19,042 on stmt: $const250.7 = const(int, 1)
DEBUG 2022-02-14 16:38:19,042 on stmt: $252binary_subtract.8 = k - $const250.7
DEBUG 2022-02-14 16:38:19,042 on stmt: $254build_tuple.9 = build_tuple(items=[Var(count, _loop_hafnian_subroutines.py:161), Var($252binary_subtract.8, _loop_hafnian_subroutines.py:180)])
DEBUG 2022-02-14 16:38:19,042 on stmt: $258binary_subscr.12 = getitem(value=comb, index=$254build_tuple.9, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:19,042 on stmt: $const262.14 = const(int, 1)
DEBUG 2022-02-14 16:38:19,042 on stmt: $266binary_subtract.16 = $const262.14 - count
DEBUG 2022-02-14 16:38:19,042 on stmt: $274binary_multiply.20 = i * j
DEBUG 2022-02-14 16:38:19,042 on stmt: $276binary_subtract.21 = k - $274binary_multiply.20
DEBUG 2022-02-14 16:38:19,042 on stmt: $const278.22 = const(int, 1)
DEBUG 2022-02-14 16:38:19,042 on stmt: $280binary_subtract.23 = $276binary_subtract.21 - $const278.22
DEBUG 2022-02-14 16:38:19,042 on stmt: $282build_tuple.24 = build_tuple(items=[Var($266binary_subtract.16, _loop_hafnian_subroutines.py:180), Var($280binary_subtract.23, _loop_hafnian_subroutines.py:180)])
DEBUG 2022-02-14 16:38:19,042 on stmt: $284binary_subscr.25 = getitem(value=comb, index=$282build_tuple.24, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:19,042 on stmt: $288binary_multiply.27 = $284binary_subscr.25 * powfactor.1
DEBUG 2022-02-14 16:38:19,042 on stmt: $290inplace_add.28 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$258binary_subscr.12, rhs=$288binary_multiply.27, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:38:19,042 on stmt: comb[$254build_tuple.9] = $290inplace_add.28
DEBUG 2022-02-14 16:38:19,042 on stmt: jump 240
DEBUG 2022-02-14 16:38:19,042 ==== SSA block rewrite pass on 298
DEBUG 2022-02-14 16:38:19,042 Running <numba.core.ssa._FixSSAVars object at 0x7fa047184ac0>
DEBUG 2022-02-14 16:38:19,042 on stmt: jump 202
DEBUG 2022-02-14 16:38:19,042 ==== SSA block rewrite pass on 300
DEBUG 2022-02-14 16:38:19,042 Running <numba.core.ssa._FixSSAVars object at 0x7fa047184ac0>
DEBUG 2022-02-14 16:38:19,042 on stmt: jump 60
DEBUG 2022-02-14 16:38:19,042 ==== SSA block rewrite pass on 302
DEBUG 2022-02-14 16:38:19,042 Running <numba.core.ssa._FixSSAVars object at 0x7fa047184ac0>
DEBUG 2022-02-14 16:38:19,043 on stmt: $const306.2 = const(NoneType, None)
DEBUG 2022-02-14 16:38:19,043 on stmt: $const308.3 = const(NoneType, None)
DEBUG 2022-02-14 16:38:19,043 on stmt: $310build_slice.4 = global(slice: <class 'slice'>)
DEBUG 2022-02-14 16:38:19,043 on stmt: $310build_slice.5 = call $310build_slice.4($const306.2, $const308.3, func=$310build_slice.4, args=(Var($const306.2, _loop_hafnian_subroutines.py:182), Var($const308.3, _loop_hafnian_subroutines.py:182)), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:19,043 on stmt: $312build_tuple.6 = build_tuple(items=[Var(count, _loop_hafnian_subroutines.py:161), Var($310build_slice.5, _loop_hafnian_subroutines.py:182)])
DEBUG 2022-02-14 16:38:19,043 on stmt: $314binary_subscr.7 = getitem(value=comb, index=$312build_tuple.6, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:19,043 on stmt: $316return_value.8 = cast(value=$314binary_subscr.7)
DEBUG 2022-02-14 16:38:19,043 on stmt: return $316return_value.8
DEBUG 2022-02-14 16:38:19,043 Fix SSA violator on var E_k
DEBUG 2022-02-14 16:38:19,043 ==== SSA block rewrite pass on 0
DEBUG 2022-02-14 16:38:19,043 Running <numba.core.ssa._FreshVarHandler object at 0x7fa041ef1d30>
DEBUG 2022-02-14 16:38:19,043 on stmt: E = arg(0, name=E)
DEBUG 2022-02-14 16:38:19,043 on stmt: AX_S = arg(1, name=AX_S)
DEBUG 2022-02-14 16:38:19,043 on stmt: XD_S = arg(2, name=XD_S)
DEBUG 2022-02-14 16:38:19,043 on stmt: D_S = arg(3, name=D_S)
DEBUG 2022-02-14 16:38:19,043 on stmt: n = arg(4, name=n)
DEBUG 2022-02-14 16:38:19,043 on stmt: oddloop = arg(5, name=oddloop)
DEBUG 2022-02-14 16:38:19,043 on stmt: oddVX_S = arg(6, name=oddVX_S)
DEBUG 2022-02-14 16:38:19,043 on stmt: $4load_method.1 = getattr(value=E, attr=copy)
DEBUG 2022-02-14 16:38:19,043 on stmt: E_k = call $4load_method.1(func=$4load_method.1, args=[], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:19,043 first assign: E_k
DEBUG 2022-02-14 16:38:19,043 replaced with: E_k = call $4load_method.1(func=$4load_method.1, args=[], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:19,043 on stmt: count = const(int, 0)
DEBUG 2022-02-14 16:38:19,043 on stmt: $14load_global.4 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:38:19,043 on stmt: $16load_attr.5 = getattr(value=$14load_global.4, attr=zeros)
DEBUG 2022-02-14 16:38:19,043 on stmt: $const18.6 = const(int, 2)
DEBUG 2022-02-14 16:38:19,043 on stmt: $const22.8 = const(int, 1)
DEBUG 2022-02-14 16:38:19,044 on stmt: $24binary_add.9 = n + $const22.8
DEBUG 2022-02-14 16:38:19,044 on stmt: $26build_tuple.10 = build_tuple(items=[Var($const18.6, _loop_hafnian_subroutines.py:162), Var($24binary_add.9, _loop_hafnian_subroutines.py:162)])
DEBUG 2022-02-14 16:38:19,044 on stmt: $28load_global.11 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:38:19,044 on stmt: $30load_attr.12 = getattr(value=$28load_global.11, attr=complex128)
DEBUG 2022-02-14 16:38:19,044 on stmt: comb = call $16load_attr.5($26build_tuple.10, func=$16load_attr.5, args=[Var($26build_tuple.10, _loop_hafnian_subroutines.py:162)], kws=[('dtype', Var($30load_attr.12, _loop_hafnian_subroutines.py:162))], vararg=None, target=None)
DEBUG 2022-02-14 16:38:19,044 on stmt: $const38.15 = const(int, 1)
DEBUG 2022-02-14 16:38:19,044 on stmt: $const_0 = const(int, 0)
DEBUG 2022-02-14 16:38:19,044 on stmt: $const_0.1 = const(int, 0)
DEBUG 2022-02-14 16:38:19,044 on stmt: $const42.17 = build_tuple(items=[Var($const_0, _loop_hafnian_subroutines.py:163), Var($const_0.1, _loop_hafnian_subroutines.py:163)])
DEBUG 2022-02-14 16:38:19,044 on stmt: comb[(0, 0)] = $const38.15
DEBUG 2022-02-14 16:38:19,044 on stmt: $46load_global.18 = global(range: <class 'range'>)
DEBUG 2022-02-14 16:38:19,044 on stmt: $const48.19 = const(int, 1)
DEBUG 2022-02-14 16:38:19,044 on stmt: $const52.21 = const(int, 1)
DEBUG 2022-02-14 16:38:19,044 on stmt: $54binary_add.22 = n + $const52.21
DEBUG 2022-02-14 16:38:19,044 on stmt: $56call_function.23 = call $46load_global.18($const48.19, $54binary_add.22, func=$46load_global.18, args=[Var($const48.19, _loop_hafnian_subroutines.py:164), Var($54binary_add.22, _loop_hafnian_subroutines.py:164)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:19,044 on stmt: $58get_iter.24 = getiter(value=$56call_function.23)
DEBUG 2022-02-14 16:38:19,044 on stmt: $phi60.0 = $58get_iter.24
DEBUG 2022-02-14 16:38:19,044 on stmt: jump 60
DEBUG 2022-02-14 16:38:19,044 ==== SSA block rewrite pass on 60
DEBUG 2022-02-14 16:38:19,044 Running <numba.core.ssa._FreshVarHandler object at 0x7fa041ef1d30>
DEBUG 2022-02-14 16:38:19,044 on stmt: D_S.2 = phi(incoming_values=[Var(D_S, _loop_hafnian_subroutines.py:159), Var(D_S.3, _loop_hafnian_subroutines.py:168)], incoming_blocks=[0, 300])
DEBUG 2022-02-14 16:38:19,044 on stmt: $60for_iter.1 = iternext(value=$phi60.0)
DEBUG 2022-02-14 16:38:19,044 on stmt: $60for_iter.2 = pair_first(value=$60for_iter.1)
DEBUG 2022-02-14 16:38:19,044 on stmt: $60for_iter.3 = pair_second(value=$60for_iter.1)
DEBUG 2022-02-14 16:38:19,044 on stmt: $phi62.1 = $60for_iter.2
DEBUG 2022-02-14 16:38:19,044 on stmt: branch $60for_iter.3, 62, 302
DEBUG 2022-02-14 16:38:19,045 ==== SSA block rewrite pass on 62
DEBUG 2022-02-14 16:38:19,045 Running <numba.core.ssa._FreshVarHandler object at 0x7fa041ef1d30>
DEBUG 2022-02-14 16:38:19,045 on stmt: i = $phi62.1
DEBUG 2022-02-14 16:38:19,045 on stmt: $const66.3 = const(int, 1)
DEBUG 2022-02-14 16:38:19,045 on stmt: $68compare_op.4 = i == $const66.3
DEBUG 2022-02-14 16:38:19,045 on stmt: bool70 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:38:19,045 on stmt: $70pred = call bool70($68compare_op.4, func=bool70, args=(Var($68compare_op.4, _loop_hafnian_subroutines.py:165),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:19,045 on stmt: branch $70pred, 72, 78
DEBUG 2022-02-14 16:38:19,045 ==== SSA block rewrite pass on 72
DEBUG 2022-02-14 16:38:19,045 Running <numba.core.ssa._FreshVarHandler object at 0x7fa041ef1d30>
DEBUG 2022-02-14 16:38:19,045 on stmt: factor = oddloop
DEBUG 2022-02-14 16:38:19,045 on stmt: jump 140
DEBUG 2022-02-14 16:38:19,045 ==== SSA block rewrite pass on 78
DEBUG 2022-02-14 16:38:19,045 Running <numba.core.ssa._FreshVarHandler object at 0x7fa041ef1d30>
DEBUG 2022-02-14 16:38:19,045 on stmt: $const80.2 = const(int, 2)
DEBUG 2022-02-14 16:38:19,045 on stmt: $82binary_modulo.3 = i % $const80.2
DEBUG 2022-02-14 16:38:19,045 on stmt: $const84.4 = const(int, 0)
DEBUG 2022-02-14 16:38:19,045 on stmt: $86compare_op.5 = $82binary_modulo.3 == $const84.4
DEBUG 2022-02-14 16:38:19,045 on stmt: bool88 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:38:19,045 on stmt: $88pred = call bool88($86compare_op.5, func=bool88, args=(Var($86compare_op.5, _loop_hafnian_subroutines.py:167),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:19,045 on stmt: branch $88pred, 90, 124
DEBUG 2022-02-14 16:38:19,045 ==== SSA block rewrite pass on 90
DEBUG 2022-02-14 16:38:19,045 Running <numba.core.ssa._FreshVarHandler object at 0x7fa041ef1d30>
DEBUG 2022-02-14 16:38:19,045 on stmt: $92load_method.2 = getattr(value=E_k, attr=sum)
DEBUG 2022-02-14 16:38:19,045 on stmt: $94call_method.3 = call $92load_method.2(func=$92load_method.2, args=[], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:19,045 on stmt: $98binary_true_divide.5 = $94call_method.3 / i
DEBUG 2022-02-14 16:38:19,045 on stmt: $104binary_matrix_multiply.8 = XD_S <built-in function matmul> D_S.2
DEBUG 2022-02-14 16:38:19,046 on stmt: $const106.9 = const(int, 2)
DEBUG 2022-02-14 16:38:19,046 on stmt: $108binary_true_divide.10 = $104binary_matrix_multiply.8 / $const106.9
DEBUG 2022-02-14 16:38:19,046 on stmt: factor.1 = $98binary_true_divide.5 + $108binary_true_divide.10
DEBUG 2022-02-14 16:38:19,046 on stmt: $118inplace_multiply.14 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=E_k, rhs=E, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:38:19,046 on stmt: E_k = $118inplace_multiply.14
DEBUG 2022-02-14 16:38:19,046 replaced with: E_k.1 = $118inplace_multiply.14
DEBUG 2022-02-14 16:38:19,046 on stmt: jump 140
DEBUG 2022-02-14 16:38:19,046 ==== SSA block rewrite pass on 124
DEBUG 2022-02-14 16:38:19,046 Running <numba.core.ssa._FreshVarHandler object at 0x7fa041ef1d30>
DEBUG 2022-02-14 16:38:19,046 on stmt: factor.2 = oddVX_S <built-in function matmul> D_S.2
DEBUG 2022-02-14 16:38:19,046 on stmt: $136binary_matrix_multiply.6 = AX_S <built-in function matmul> D_S.2
DEBUG 2022-02-14 16:38:19,046 on stmt: D_S.1 = $136binary_matrix_multiply.6
DEBUG 2022-02-14 16:38:19,046 on stmt: jump 140
DEBUG 2022-02-14 16:38:19,046 ==== SSA block rewrite pass on 140
DEBUG 2022-02-14 16:38:19,046 Running <numba.core.ssa._FreshVarHandler object at 0x7fa041ef1d30>
DEBUG 2022-02-14 16:38:19,046 on stmt: D_S.3 = phi(incoming_values=[Var(D_S.2, _loop_hafnian_subroutines.py:168), Var(D_S.2, _loop_hafnian_subroutines.py:168), Var(D_S.1, _loop_hafnian_subroutines.py:172)], incoming_blocks=[72, 90, 124])
DEBUG 2022-02-14 16:38:19,046 on stmt: factor.3 = phi(incoming_values=[Var(factor, _loop_hafnian_subroutines.py:166), Var(factor.1, _loop_hafnian_subroutines.py:168), Var(factor.2, _loop_hafnian_subroutines.py:171)], incoming_blocks=[72, 90, 124])
DEBUG 2022-02-14 16:38:19,046 on stmt: powfactor = const(int, 1)
DEBUG 2022-02-14 16:38:19,046 on stmt: $const144.2 = const(int, 1)
DEBUG 2022-02-14 16:38:19,046 on stmt: $148binary_subtract.4 = $const144.2 - count
DEBUG 2022-02-14 16:38:19,046 on stmt: count = $148binary_subtract.4
DEBUG 2022-02-14 16:38:19,046 on stmt: $const154.6 = const(int, 1)
DEBUG 2022-02-14 16:38:19,046 on stmt: $158binary_subtract.8 = $const154.6 - count
DEBUG 2022-02-14 16:38:19,046 on stmt: $const160.9 = const(NoneType, None)
DEBUG 2022-02-14 16:38:19,046 on stmt: $const162.10 = const(NoneType, None)
DEBUG 2022-02-14 16:38:19,046 on stmt: $164build_slice.11 = global(slice: <class 'slice'>)
DEBUG 2022-02-14 16:38:19,047 on stmt: $164build_slice.12 = call $164build_slice.11($const160.9, $const162.10, func=$164build_slice.11, args=(Var($const160.9, _loop_hafnian_subroutines.py:176), Var($const162.10, _loop_hafnian_subroutines.py:176)), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:19,047 on stmt: $166build_tuple.13 = build_tuple(items=[Var($158binary_subtract.8, _loop_hafnian_subroutines.py:176), Var($164build_slice.12, _loop_hafnian_subroutines.py:176)])
DEBUG 2022-02-14 16:38:19,047 on stmt: $168binary_subscr.14 = getitem(value=comb, index=$166build_tuple.13, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:19,047 on stmt: $const174.17 = const(NoneType, None)
DEBUG 2022-02-14 16:38:19,047 on stmt: $const176.18 = const(NoneType, None)
DEBUG 2022-02-14 16:38:19,047 on stmt: $178build_slice.19 = global(slice: <class 'slice'>)
DEBUG 2022-02-14 16:38:19,047 on stmt: $178build_slice.20 = call $178build_slice.19($const174.17, $const176.18, func=$178build_slice.19, args=(Var($const174.17, _loop_hafnian_subroutines.py:176), Var($const176.18, _loop_hafnian_subroutines.py:176)), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:19,047 on stmt: $180build_tuple.21 = build_tuple(items=[Var(count, _loop_hafnian_subroutines.py:161), Var($178build_slice.20, _loop_hafnian_subroutines.py:176)])
DEBUG 2022-02-14 16:38:19,047 on stmt: comb[$180build_tuple.21] = $168binary_subscr.14
DEBUG 2022-02-14 16:38:19,047 on stmt: $184load_global.22 = global(range: <class 'range'>)
DEBUG 2022-02-14 16:38:19,047 on stmt: $const186.23 = const(int, 1)
DEBUG 2022-02-14 16:38:19,047 on stmt: $192binary_floor_divide.26 = n // i
DEBUG 2022-02-14 16:38:19,047 on stmt: $const194.27 = const(int, 1)
DEBUG 2022-02-14 16:38:19,047 on stmt: $196binary_add.28 = $192binary_floor_divide.26 + $const194.27
DEBUG 2022-02-14 16:38:19,047 on stmt: $198call_function.29 = call $184load_global.22($const186.23, $196binary_add.28, func=$184load_global.22, args=[Var($const186.23, _loop_hafnian_subroutines.py:177), Var($196binary_add.28, _loop_hafnian_subroutines.py:177)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:19,047 on stmt: $200get_iter.30 = getiter(value=$198call_function.29)
DEBUG 2022-02-14 16:38:19,047 on stmt: $phi202.1 = $200get_iter.30
DEBUG 2022-02-14 16:38:19,047 on stmt: jump 202
DEBUG 2022-02-14 16:38:19,047 ==== SSA block rewrite pass on 202
DEBUG 2022-02-14 16:38:19,047 Running <numba.core.ssa._FreshVarHandler object at 0x7fa041ef1d30>
DEBUG 2022-02-14 16:38:19,047 on stmt: powfactor.2 = phi(incoming_values=[Var(powfactor.1, _loop_hafnian_subroutines.py:178), Var(powfactor, _loop_hafnian_subroutines.py:174)], incoming_blocks=[298, 140])
DEBUG 2022-02-14 16:38:19,047 on stmt: $202for_iter.2 = iternext(value=$phi202.1)
DEBUG 2022-02-14 16:38:19,047 on stmt: $202for_iter.3 = pair_first(value=$202for_iter.2)
DEBUG 2022-02-14 16:38:19,047 on stmt: $202for_iter.4 = pair_second(value=$202for_iter.2)
DEBUG 2022-02-14 16:38:19,048 on stmt: $phi204.2 = $202for_iter.3
DEBUG 2022-02-14 16:38:19,048 on stmt: branch $202for_iter.4, 204, 300
DEBUG 2022-02-14 16:38:19,048 ==== SSA block rewrite pass on 204
DEBUG 2022-02-14 16:38:19,048 Running <numba.core.ssa._FreshVarHandler object at 0x7fa041ef1d30>
DEBUG 2022-02-14 16:38:19,048 on stmt: j = $phi204.2
DEBUG 2022-02-14 16:38:19,048 on stmt: $212binary_true_divide.6 = factor.3 / j
DEBUG 2022-02-14 16:38:19,048 on stmt: $214inplace_multiply.7 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=powfactor.2, rhs=$212binary_true_divide.6, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:38:19,048 on stmt: powfactor.1 = $214inplace_multiply.7
DEBUG 2022-02-14 16:38:19,048 on stmt: $218load_global.8 = global(range: <class 'range'>)
DEBUG 2022-02-14 16:38:19,048 on stmt: $224binary_multiply.11 = i * j
DEBUG 2022-02-14 16:38:19,048 on stmt: $const226.12 = const(int, 1)
DEBUG 2022-02-14 16:38:19,048 on stmt: $228binary_add.13 = $224binary_multiply.11 + $const226.12
DEBUG 2022-02-14 16:38:19,048 on stmt: $const232.15 = const(int, 2)
DEBUG 2022-02-14 16:38:19,048 on stmt: $234binary_add.16 = n + $const232.15
DEBUG 2022-02-14 16:38:19,048 on stmt: $236call_function.17 = call $218load_global.8($228binary_add.13, $234binary_add.16, func=$218load_global.8, args=[Var($228binary_add.13, _loop_hafnian_subroutines.py:179), Var($234binary_add.16, _loop_hafnian_subroutines.py:179)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:19,048 on stmt: $238get_iter.18 = getiter(value=$236call_function.17)
DEBUG 2022-02-14 16:38:19,048 on stmt: $phi240.2 = $238get_iter.18
DEBUG 2022-02-14 16:38:19,048 on stmt: jump 240
DEBUG 2022-02-14 16:38:19,048 ==== SSA block rewrite pass on 240
DEBUG 2022-02-14 16:38:19,048 Running <numba.core.ssa._FreshVarHandler object at 0x7fa041ef1d30>
DEBUG 2022-02-14 16:38:19,048 on stmt: $240for_iter.3 = iternext(value=$phi240.2)
DEBUG 2022-02-14 16:38:19,048 on stmt: $240for_iter.4 = pair_first(value=$240for_iter.3)
DEBUG 2022-02-14 16:38:19,048 on stmt: $240for_iter.5 = pair_second(value=$240for_iter.3)
DEBUG 2022-02-14 16:38:19,048 on stmt: $phi242.3 = $240for_iter.4
DEBUG 2022-02-14 16:38:19,048 on stmt: branch $240for_iter.5, 242, 298
DEBUG 2022-02-14 16:38:19,048 ==== SSA block rewrite pass on 242
DEBUG 2022-02-14 16:38:19,048 Running <numba.core.ssa._FreshVarHandler object at 0x7fa041ef1d30>
DEBUG 2022-02-14 16:38:19,048 on stmt: k = $phi242.3
DEBUG 2022-02-14 16:38:19,049 on stmt: $const250.7 = const(int, 1)
DEBUG 2022-02-14 16:38:19,049 on stmt: $252binary_subtract.8 = k - $const250.7
DEBUG 2022-02-14 16:38:19,049 on stmt: $254build_tuple.9 = build_tuple(items=[Var(count, _loop_hafnian_subroutines.py:161), Var($252binary_subtract.8, _loop_hafnian_subroutines.py:180)])
DEBUG 2022-02-14 16:38:19,049 on stmt: $258binary_subscr.12 = getitem(value=comb, index=$254build_tuple.9, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:19,049 on stmt: $const262.14 = const(int, 1)
DEBUG 2022-02-14 16:38:19,049 on stmt: $266binary_subtract.16 = $const262.14 - count
DEBUG 2022-02-14 16:38:19,049 on stmt: $274binary_multiply.20 = i * j
DEBUG 2022-02-14 16:38:19,049 on stmt: $276binary_subtract.21 = k - $274binary_multiply.20
DEBUG 2022-02-14 16:38:19,049 on stmt: $const278.22 = const(int, 1)
DEBUG 2022-02-14 16:38:19,049 on stmt: $280binary_subtract.23 = $276binary_subtract.21 - $const278.22
DEBUG 2022-02-14 16:38:19,049 on stmt: $282build_tuple.24 = build_tuple(items=[Var($266binary_subtract.16, _loop_hafnian_subroutines.py:180), Var($280binary_subtract.23, _loop_hafnian_subroutines.py:180)])
DEBUG 2022-02-14 16:38:19,049 on stmt: $284binary_subscr.25 = getitem(value=comb, index=$282build_tuple.24, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:19,049 on stmt: $288binary_multiply.27 = $284binary_subscr.25 * powfactor.1
DEBUG 2022-02-14 16:38:19,049 on stmt: $290inplace_add.28 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$258binary_subscr.12, rhs=$288binary_multiply.27, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:38:19,049 on stmt: comb[$254build_tuple.9] = $290inplace_add.28
DEBUG 2022-02-14 16:38:19,049 on stmt: jump 240
DEBUG 2022-02-14 16:38:19,049 ==== SSA block rewrite pass on 298
DEBUG 2022-02-14 16:38:19,049 Running <numba.core.ssa._FreshVarHandler object at 0x7fa041ef1d30>
DEBUG 2022-02-14 16:38:19,049 on stmt: jump 202
DEBUG 2022-02-14 16:38:19,049 ==== SSA block rewrite pass on 300
DEBUG 2022-02-14 16:38:19,049 Running <numba.core.ssa._FreshVarHandler object at 0x7fa041ef1d30>
DEBUG 2022-02-14 16:38:19,049 on stmt: jump 60
DEBUG 2022-02-14 16:38:19,049 ==== SSA block rewrite pass on 302
DEBUG 2022-02-14 16:38:19,049 Running <numba.core.ssa._FreshVarHandler object at 0x7fa041ef1d30>
DEBUG 2022-02-14 16:38:19,049 on stmt: $const306.2 = const(NoneType, None)
DEBUG 2022-02-14 16:38:19,049 on stmt: $const308.3 = const(NoneType, None)
DEBUG 2022-02-14 16:38:19,049 on stmt: $310build_slice.4 = global(slice: <class 'slice'>)
DEBUG 2022-02-14 16:38:19,050 on stmt: $310build_slice.5 = call $310build_slice.4($const306.2, $const308.3, func=$310build_slice.4, args=(Var($const306.2, _loop_hafnian_subroutines.py:182), Var($const308.3, _loop_hafnian_subroutines.py:182)), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:19,050 on stmt: $312build_tuple.6 = build_tuple(items=[Var(count, _loop_hafnian_subroutines.py:161), Var($310build_slice.5, _loop_hafnian_subroutines.py:182)])
DEBUG 2022-02-14 16:38:19,050 on stmt: $314binary_subscr.7 = getitem(value=comb, index=$312build_tuple.6, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:19,050 on stmt: $316return_value.8 = cast(value=$314binary_subscr.7)
DEBUG 2022-02-14 16:38:19,050 on stmt: return $316return_value.8
DEBUG 2022-02-14 16:38:19,050 Replaced assignments: defaultdict(<class 'list'>,
            {0: [<numba.core.ir.Assign object at 0x7fa046317160>],
             90: [<numba.core.ir.Assign object at 0x7fa046132310>]})
DEBUG 2022-02-14 16:38:19,050 ==== SSA block rewrite pass on 0
DEBUG 2022-02-14 16:38:19,050 Running <numba.core.ssa._FixSSAVars object at 0x7fa046317f70>
DEBUG 2022-02-14 16:38:19,050 on stmt: E = arg(0, name=E)
DEBUG 2022-02-14 16:38:19,050 on stmt: AX_S = arg(1, name=AX_S)
DEBUG 2022-02-14 16:38:19,050 on stmt: XD_S = arg(2, name=XD_S)
DEBUG 2022-02-14 16:38:19,050 on stmt: D_S = arg(3, name=D_S)
DEBUG 2022-02-14 16:38:19,050 on stmt: n = arg(4, name=n)
DEBUG 2022-02-14 16:38:19,050 on stmt: oddloop = arg(5, name=oddloop)
DEBUG 2022-02-14 16:38:19,050 on stmt: oddVX_S = arg(6, name=oddVX_S)
DEBUG 2022-02-14 16:38:19,050 on stmt: $4load_method.1 = getattr(value=E, attr=copy)
DEBUG 2022-02-14 16:38:19,050 on stmt: E_k = call $4load_method.1(func=$4load_method.1, args=[], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:19,050 on stmt: count = const(int, 0)
DEBUG 2022-02-14 16:38:19,050 on stmt: $14load_global.4 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:38:19,050 on stmt: $16load_attr.5 = getattr(value=$14load_global.4, attr=zeros)
DEBUG 2022-02-14 16:38:19,050 on stmt: $const18.6 = const(int, 2)
DEBUG 2022-02-14 16:38:19,050 on stmt: $const22.8 = const(int, 1)
DEBUG 2022-02-14 16:38:19,050 on stmt: $24binary_add.9 = n + $const22.8
DEBUG 2022-02-14 16:38:19,050 on stmt: $26build_tuple.10 = build_tuple(items=[Var($const18.6, _loop_hafnian_subroutines.py:162), Var($24binary_add.9, _loop_hafnian_subroutines.py:162)])
DEBUG 2022-02-14 16:38:19,051 on stmt: $28load_global.11 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:38:19,051 on stmt: $30load_attr.12 = getattr(value=$28load_global.11, attr=complex128)
DEBUG 2022-02-14 16:38:19,051 on stmt: comb = call $16load_attr.5($26build_tuple.10, func=$16load_attr.5, args=[Var($26build_tuple.10, _loop_hafnian_subroutines.py:162)], kws=[('dtype', Var($30load_attr.12, _loop_hafnian_subroutines.py:162))], vararg=None, target=None)
DEBUG 2022-02-14 16:38:19,051 on stmt: $const38.15 = const(int, 1)
DEBUG 2022-02-14 16:38:19,051 on stmt: $const_0 = const(int, 0)
DEBUG 2022-02-14 16:38:19,051 on stmt: $const_0.1 = const(int, 0)
DEBUG 2022-02-14 16:38:19,051 on stmt: $const42.17 = build_tuple(items=[Var($const_0, _loop_hafnian_subroutines.py:163), Var($const_0.1, _loop_hafnian_subroutines.py:163)])
DEBUG 2022-02-14 16:38:19,051 on stmt: comb[(0, 0)] = $const38.15
DEBUG 2022-02-14 16:38:19,051 on stmt: $46load_global.18 = global(range: <class 'range'>)
DEBUG 2022-02-14 16:38:19,051 on stmt: $const48.19 = const(int, 1)
DEBUG 2022-02-14 16:38:19,051 on stmt: $const52.21 = const(int, 1)
DEBUG 2022-02-14 16:38:19,051 on stmt: $54binary_add.22 = n + $const52.21
DEBUG 2022-02-14 16:38:19,051 on stmt: $56call_function.23 = call $46load_global.18($const48.19, $54binary_add.22, func=$46load_global.18, args=[Var($const48.19, _loop_hafnian_subroutines.py:164), Var($54binary_add.22, _loop_hafnian_subroutines.py:164)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:19,051 on stmt: $58get_iter.24 = getiter(value=$56call_function.23)
DEBUG 2022-02-14 16:38:19,051 on stmt: $phi60.0 = $58get_iter.24
DEBUG 2022-02-14 16:38:19,051 on stmt: jump 60
DEBUG 2022-02-14 16:38:19,051 ==== SSA block rewrite pass on 60
DEBUG 2022-02-14 16:38:19,051 Running <numba.core.ssa._FixSSAVars object at 0x7fa046317f70>
DEBUG 2022-02-14 16:38:19,051 on stmt: D_S.2 = phi(incoming_values=[Var(D_S, _loop_hafnian_subroutines.py:159), Var(D_S.3, _loop_hafnian_subroutines.py:168)], incoming_blocks=[0, 300])
DEBUG 2022-02-14 16:38:19,051 on stmt: $60for_iter.1 = iternext(value=$phi60.0)
DEBUG 2022-02-14 16:38:19,051 on stmt: $60for_iter.2 = pair_first(value=$60for_iter.1)
DEBUG 2022-02-14 16:38:19,051 on stmt: $60for_iter.3 = pair_second(value=$60for_iter.1)
DEBUG 2022-02-14 16:38:19,051 on stmt: $phi62.1 = $60for_iter.2
DEBUG 2022-02-14 16:38:19,051 on stmt: branch $60for_iter.3, 62, 302
DEBUG 2022-02-14 16:38:19,051 ==== SSA block rewrite pass on 62
DEBUG 2022-02-14 16:38:19,052 Running <numba.core.ssa._FixSSAVars object at 0x7fa046317f70>
DEBUG 2022-02-14 16:38:19,052 on stmt: i = $phi62.1
DEBUG 2022-02-14 16:38:19,052 on stmt: $const66.3 = const(int, 1)
DEBUG 2022-02-14 16:38:19,052 on stmt: $68compare_op.4 = i == $const66.3
DEBUG 2022-02-14 16:38:19,052 on stmt: bool70 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:38:19,052 on stmt: $70pred = call bool70($68compare_op.4, func=bool70, args=(Var($68compare_op.4, _loop_hafnian_subroutines.py:165),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:19,052 on stmt: branch $70pred, 72, 78
DEBUG 2022-02-14 16:38:19,052 ==== SSA block rewrite pass on 72
DEBUG 2022-02-14 16:38:19,052 Running <numba.core.ssa._FixSSAVars object at 0x7fa046317f70>
DEBUG 2022-02-14 16:38:19,052 on stmt: factor = oddloop
DEBUG 2022-02-14 16:38:19,052 on stmt: jump 140
DEBUG 2022-02-14 16:38:19,052 ==== SSA block rewrite pass on 78
DEBUG 2022-02-14 16:38:19,052 Running <numba.core.ssa._FixSSAVars object at 0x7fa046317f70>
DEBUG 2022-02-14 16:38:19,052 on stmt: $const80.2 = const(int, 2)
DEBUG 2022-02-14 16:38:19,052 on stmt: $82binary_modulo.3 = i % $const80.2
DEBUG 2022-02-14 16:38:19,052 on stmt: $const84.4 = const(int, 0)
DEBUG 2022-02-14 16:38:19,052 on stmt: $86compare_op.5 = $82binary_modulo.3 == $const84.4
DEBUG 2022-02-14 16:38:19,052 on stmt: bool88 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:38:19,052 on stmt: $88pred = call bool88($86compare_op.5, func=bool88, args=(Var($86compare_op.5, _loop_hafnian_subroutines.py:167),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:19,052 on stmt: branch $88pred, 90, 124
DEBUG 2022-02-14 16:38:19,052 ==== SSA block rewrite pass on 90
DEBUG 2022-02-14 16:38:19,052 Running <numba.core.ssa._FixSSAVars object at 0x7fa046317f70>
DEBUG 2022-02-14 16:38:19,052 on stmt: $92load_method.2 = getattr(value=E_k, attr=sum)
DEBUG 2022-02-14 16:38:19,052 find_def var='E_k' stmt=$92load_method.2 = getattr(value=E_k, attr=sum)
DEBUG 2022-02-14 16:38:19,052 find_def_from_top label 90
DEBUG 2022-02-14 16:38:19,052 idom 78 from label 90
DEBUG 2022-02-14 16:38:19,053 find_def_from_bottom label 78
DEBUG 2022-02-14 16:38:19,053 find_def_from_top label 78
DEBUG 2022-02-14 16:38:19,053 idom 62 from label 78
DEBUG 2022-02-14 16:38:19,053 find_def_from_bottom label 62
DEBUG 2022-02-14 16:38:19,053 find_def_from_top label 62
DEBUG 2022-02-14 16:38:19,053 idom 60 from label 62
DEBUG 2022-02-14 16:38:19,053 find_def_from_bottom label 60
DEBUG 2022-02-14 16:38:19,053 find_def_from_top label 60
DEBUG 2022-02-14 16:38:19,053 insert phi node E_k.2 = phi(incoming_values=[], incoming_blocks=[]) at 60
DEBUG 2022-02-14 16:38:19,053 find_def_from_bottom label 0
DEBUG 2022-02-14 16:38:19,053 incoming_def E_k = call $4load_method.1(func=$4load_method.1, args=[], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:19,053 find_def_from_bottom label 300
DEBUG 2022-02-14 16:38:19,053 find_def_from_top label 300
DEBUG 2022-02-14 16:38:19,053 idom 202 from label 300
DEBUG 2022-02-14 16:38:19,053 find_def_from_bottom label 202
DEBUG 2022-02-14 16:38:19,053 find_def_from_top label 202
DEBUG 2022-02-14 16:38:19,053 idom 140 from label 202
DEBUG 2022-02-14 16:38:19,053 find_def_from_bottom label 140
DEBUG 2022-02-14 16:38:19,053 find_def_from_top label 140
DEBUG 2022-02-14 16:38:19,053 insert phi node E_k.3 = phi(incoming_values=[], incoming_blocks=[]) at 140
DEBUG 2022-02-14 16:38:19,053 find_def_from_bottom label 72
DEBUG 2022-02-14 16:38:19,053 find_def_from_top label 72
DEBUG 2022-02-14 16:38:19,053 idom 62 from label 72
DEBUG 2022-02-14 16:38:19,053 find_def_from_bottom label 62
DEBUG 2022-02-14 16:38:19,053 find_def_from_top label 62
DEBUG 2022-02-14 16:38:19,053 idom 60 from label 62
DEBUG 2022-02-14 16:38:19,053 find_def_from_bottom label 60
DEBUG 2022-02-14 16:38:19,053 incoming_def E_k.2 = phi(incoming_values=[Var(E_k, _loop_hafnian_subroutines.py:159)], incoming_blocks=[0])
DEBUG 2022-02-14 16:38:19,054 find_def_from_bottom label 90
DEBUG 2022-02-14 16:38:19,054 incoming_def E_k.1 = $118inplace_multiply.14
DEBUG 2022-02-14 16:38:19,054 find_def_from_bottom label 124
DEBUG 2022-02-14 16:38:19,054 find_def_from_top label 124
DEBUG 2022-02-14 16:38:19,054 idom 78 from label 124
DEBUG 2022-02-14 16:38:19,054 find_def_from_bottom label 78
DEBUG 2022-02-14 16:38:19,054 find_def_from_top label 78
DEBUG 2022-02-14 16:38:19,054 idom 62 from label 78
DEBUG 2022-02-14 16:38:19,054 find_def_from_bottom label 62
DEBUG 2022-02-14 16:38:19,054 find_def_from_top label 62
DEBUG 2022-02-14 16:38:19,054 idom 60 from label 62
DEBUG 2022-02-14 16:38:19,054 find_def_from_bottom label 60
DEBUG 2022-02-14 16:38:19,054 incoming_def E_k.2 = phi(incoming_values=[Var(E_k, _loop_hafnian_subroutines.py:159)], incoming_blocks=[0])
DEBUG 2022-02-14 16:38:19,054 incoming_def E_k.3 = phi(incoming_values=[Var(E_k.2, _loop_hafnian_subroutines.py:168), Var(E_k.1, _loop_hafnian_subroutines.py:169), Var(E_k.2, _loop_hafnian_subroutines.py:168)], incoming_blocks=[72, 90, 124])
DEBUG 2022-02-14 16:38:19,054 replaced with: $92load_method.2 = getattr(value=E_k.2, attr=sum)
DEBUG 2022-02-14 16:38:19,054 on stmt: $94call_method.3 = call $92load_method.2(func=$92load_method.2, args=[], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:19,054 on stmt: $98binary_true_divide.5 = $94call_method.3 / i
DEBUG 2022-02-14 16:38:19,054 on stmt: $104binary_matrix_multiply.8 = XD_S <built-in function matmul> D_S.2
DEBUG 2022-02-14 16:38:19,054 on stmt: $const106.9 = const(int, 2)
DEBUG 2022-02-14 16:38:19,054 on stmt: $108binary_true_divide.10 = $104binary_matrix_multiply.8 / $const106.9
DEBUG 2022-02-14 16:38:19,054 on stmt: factor.1 = $98binary_true_divide.5 + $108binary_true_divide.10
DEBUG 2022-02-14 16:38:19,054 on stmt: $118inplace_multiply.14 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=E_k, rhs=E, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:38:19,054 find_def var='E_k' stmt=$118inplace_multiply.14 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=E_k, rhs=E, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:38:19,055 find_def_from_top label 90
DEBUG 2022-02-14 16:38:19,055 idom 78 from label 90
DEBUG 2022-02-14 16:38:19,055 find_def_from_bottom label 78
DEBUG 2022-02-14 16:38:19,055 find_def_from_top label 78
DEBUG 2022-02-14 16:38:19,055 idom 62 from label 78
DEBUG 2022-02-14 16:38:19,055 find_def_from_bottom label 62
DEBUG 2022-02-14 16:38:19,055 find_def_from_top label 62
DEBUG 2022-02-14 16:38:19,055 idom 60 from label 62
DEBUG 2022-02-14 16:38:19,055 find_def_from_bottom label 60
DEBUG 2022-02-14 16:38:19,055 replaced with: $118inplace_multiply.14 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=E_k.2, rhs=E, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:38:19,055 on stmt: E_k.1 = $118inplace_multiply.14
DEBUG 2022-02-14 16:38:19,055 on stmt: jump 140
DEBUG 2022-02-14 16:38:19,055 ==== SSA block rewrite pass on 124
DEBUG 2022-02-14 16:38:19,055 Running <numba.core.ssa._FixSSAVars object at 0x7fa046317f70>
DEBUG 2022-02-14 16:38:19,055 on stmt: factor.2 = oddVX_S <built-in function matmul> D_S.2
DEBUG 2022-02-14 16:38:19,055 on stmt: $136binary_matrix_multiply.6 = AX_S <built-in function matmul> D_S.2
DEBUG 2022-02-14 16:38:19,055 on stmt: D_S.1 = $136binary_matrix_multiply.6
DEBUG 2022-02-14 16:38:19,055 on stmt: jump 140
DEBUG 2022-02-14 16:38:19,055 ==== SSA block rewrite pass on 140
DEBUG 2022-02-14 16:38:19,055 Running <numba.core.ssa._FixSSAVars object at 0x7fa046317f70>
DEBUG 2022-02-14 16:38:19,055 on stmt: D_S.3 = phi(incoming_values=[Var(D_S.2, _loop_hafnian_subroutines.py:168), Var(D_S.2, _loop_hafnian_subroutines.py:168), Var(D_S.1, _loop_hafnian_subroutines.py:172)], incoming_blocks=[72, 90, 124])
DEBUG 2022-02-14 16:38:19,055 on stmt: factor.3 = phi(incoming_values=[Var(factor, _loop_hafnian_subroutines.py:166), Var(factor.1, _loop_hafnian_subroutines.py:168), Var(factor.2, _loop_hafnian_subroutines.py:171)], incoming_blocks=[72, 90, 124])
DEBUG 2022-02-14 16:38:19,055 on stmt: powfactor = const(int, 1)
DEBUG 2022-02-14 16:38:19,055 on stmt: $const144.2 = const(int, 1)
DEBUG 2022-02-14 16:38:19,055 on stmt: $148binary_subtract.4 = $const144.2 - count
DEBUG 2022-02-14 16:38:19,055 on stmt: count = $148binary_subtract.4
DEBUG 2022-02-14 16:38:19,056 on stmt: $const154.6 = const(int, 1)
DEBUG 2022-02-14 16:38:19,056 on stmt: $158binary_subtract.8 = $const154.6 - count
DEBUG 2022-02-14 16:38:19,056 on stmt: $const160.9 = const(NoneType, None)
DEBUG 2022-02-14 16:38:19,056 on stmt: $const162.10 = const(NoneType, None)
DEBUG 2022-02-14 16:38:19,056 on stmt: $164build_slice.11 = global(slice: <class 'slice'>)
DEBUG 2022-02-14 16:38:19,056 on stmt: $164build_slice.12 = call $164build_slice.11($const160.9, $const162.10, func=$164build_slice.11, args=(Var($const160.9, _loop_hafnian_subroutines.py:176), Var($const162.10, _loop_hafnian_subroutines.py:176)), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:19,056 on stmt: $166build_tuple.13 = build_tuple(items=[Var($158binary_subtract.8, _loop_hafnian_subroutines.py:176), Var($164build_slice.12, _loop_hafnian_subroutines.py:176)])
DEBUG 2022-02-14 16:38:19,056 on stmt: $168binary_subscr.14 = getitem(value=comb, index=$166build_tuple.13, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:19,056 on stmt: $const174.17 = const(NoneType, None)
DEBUG 2022-02-14 16:38:19,056 on stmt: $const176.18 = const(NoneType, None)
DEBUG 2022-02-14 16:38:19,056 on stmt: $178build_slice.19 = global(slice: <class 'slice'>)
DEBUG 2022-02-14 16:38:19,056 on stmt: $178build_slice.20 = call $178build_slice.19($const174.17, $const176.18, func=$178build_slice.19, args=(Var($const174.17, _loop_hafnian_subroutines.py:176), Var($const176.18, _loop_hafnian_subroutines.py:176)), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:19,056 on stmt: $180build_tuple.21 = build_tuple(items=[Var(count, _loop_hafnian_subroutines.py:161), Var($178build_slice.20, _loop_hafnian_subroutines.py:176)])
DEBUG 2022-02-14 16:38:19,056 on stmt: comb[$180build_tuple.21] = $168binary_subscr.14
DEBUG 2022-02-14 16:38:19,056 on stmt: $184load_global.22 = global(range: <class 'range'>)
DEBUG 2022-02-14 16:38:19,056 on stmt: $const186.23 = const(int, 1)
DEBUG 2022-02-14 16:38:19,056 on stmt: $192binary_floor_divide.26 = n // i
DEBUG 2022-02-14 16:38:19,056 on stmt: $const194.27 = const(int, 1)
DEBUG 2022-02-14 16:38:19,056 on stmt: $196binary_add.28 = $192binary_floor_divide.26 + $const194.27
DEBUG 2022-02-14 16:38:19,056 on stmt: $198call_function.29 = call $184load_global.22($const186.23, $196binary_add.28, func=$184load_global.22, args=[Var($const186.23, _loop_hafnian_subroutines.py:177), Var($196binary_add.28, _loop_hafnian_subroutines.py:177)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:19,056 on stmt: $200get_iter.30 = getiter(value=$198call_function.29)
DEBUG 2022-02-14 16:38:19,056 on stmt: $phi202.1 = $200get_iter.30
DEBUG 2022-02-14 16:38:19,056 on stmt: jump 202
DEBUG 2022-02-14 16:38:19,056 ==== SSA block rewrite pass on 202
DEBUG 2022-02-14 16:38:19,057 Running <numba.core.ssa._FixSSAVars object at 0x7fa046317f70>
DEBUG 2022-02-14 16:38:19,057 on stmt: powfactor.2 = phi(incoming_values=[Var(powfactor.1, _loop_hafnian_subroutines.py:178), Var(powfactor, _loop_hafnian_subroutines.py:174)], incoming_blocks=[298, 140])
DEBUG 2022-02-14 16:38:19,057 on stmt: $202for_iter.2 = iternext(value=$phi202.1)
DEBUG 2022-02-14 16:38:19,057 on stmt: $202for_iter.3 = pair_first(value=$202for_iter.2)
DEBUG 2022-02-14 16:38:19,057 on stmt: $202for_iter.4 = pair_second(value=$202for_iter.2)
DEBUG 2022-02-14 16:38:19,057 on stmt: $phi204.2 = $202for_iter.3
DEBUG 2022-02-14 16:38:19,057 on stmt: branch $202for_iter.4, 204, 300
DEBUG 2022-02-14 16:38:19,057 ==== SSA block rewrite pass on 204
DEBUG 2022-02-14 16:38:19,057 Running <numba.core.ssa._FixSSAVars object at 0x7fa046317f70>
DEBUG 2022-02-14 16:38:19,057 on stmt: j = $phi204.2
DEBUG 2022-02-14 16:38:19,057 on stmt: $212binary_true_divide.6 = factor.3 / j
DEBUG 2022-02-14 16:38:19,057 on stmt: $214inplace_multiply.7 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=powfactor.2, rhs=$212binary_true_divide.6, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:38:19,057 on stmt: powfactor.1 = $214inplace_multiply.7
DEBUG 2022-02-14 16:38:19,057 on stmt: $218load_global.8 = global(range: <class 'range'>)
DEBUG 2022-02-14 16:38:19,057 on stmt: $224binary_multiply.11 = i * j
DEBUG 2022-02-14 16:38:19,057 on stmt: $const226.12 = const(int, 1)
DEBUG 2022-02-14 16:38:19,057 on stmt: $228binary_add.13 = $224binary_multiply.11 + $const226.12
DEBUG 2022-02-14 16:38:19,057 on stmt: $const232.15 = const(int, 2)
DEBUG 2022-02-14 16:38:19,057 on stmt: $234binary_add.16 = n + $const232.15
DEBUG 2022-02-14 16:38:19,057 on stmt: $236call_function.17 = call $218load_global.8($228binary_add.13, $234binary_add.16, func=$218load_global.8, args=[Var($228binary_add.13, _loop_hafnian_subroutines.py:179), Var($234binary_add.16, _loop_hafnian_subroutines.py:179)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:19,057 on stmt: $238get_iter.18 = getiter(value=$236call_function.17)
DEBUG 2022-02-14 16:38:19,057 on stmt: $phi240.2 = $238get_iter.18
DEBUG 2022-02-14 16:38:19,057 on stmt: jump 240
DEBUG 2022-02-14 16:38:19,057 ==== SSA block rewrite pass on 240
DEBUG 2022-02-14 16:38:19,057 Running <numba.core.ssa._FixSSAVars object at 0x7fa046317f70>
DEBUG 2022-02-14 16:38:19,058 on stmt: $240for_iter.3 = iternext(value=$phi240.2)
DEBUG 2022-02-14 16:38:19,058 on stmt: $240for_iter.4 = pair_first(value=$240for_iter.3)
DEBUG 2022-02-14 16:38:19,058 on stmt: $240for_iter.5 = pair_second(value=$240for_iter.3)
DEBUG 2022-02-14 16:38:19,058 on stmt: $phi242.3 = $240for_iter.4
DEBUG 2022-02-14 16:38:19,058 on stmt: branch $240for_iter.5, 242, 298
DEBUG 2022-02-14 16:38:19,058 ==== SSA block rewrite pass on 242
DEBUG 2022-02-14 16:38:19,058 Running <numba.core.ssa._FixSSAVars object at 0x7fa046317f70>
DEBUG 2022-02-14 16:38:19,058 on stmt: k = $phi242.3
DEBUG 2022-02-14 16:38:19,058 on stmt: $const250.7 = const(int, 1)
DEBUG 2022-02-14 16:38:19,058 on stmt: $252binary_subtract.8 = k - $const250.7
DEBUG 2022-02-14 16:38:19,058 on stmt: $254build_tuple.9 = build_tuple(items=[Var(count, _loop_hafnian_subroutines.py:161), Var($252binary_subtract.8, _loop_hafnian_subroutines.py:180)])
DEBUG 2022-02-14 16:38:19,058 on stmt: $258binary_subscr.12 = getitem(value=comb, index=$254build_tuple.9, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:19,058 on stmt: $const262.14 = const(int, 1)
DEBUG 2022-02-14 16:38:19,058 on stmt: $266binary_subtract.16 = $const262.14 - count
DEBUG 2022-02-14 16:38:19,058 on stmt: $274binary_multiply.20 = i * j
DEBUG 2022-02-14 16:38:19,058 on stmt: $276binary_subtract.21 = k - $274binary_multiply.20
DEBUG 2022-02-14 16:38:19,058 on stmt: $const278.22 = const(int, 1)
DEBUG 2022-02-14 16:38:19,058 on stmt: $280binary_subtract.23 = $276binary_subtract.21 - $const278.22
DEBUG 2022-02-14 16:38:19,058 on stmt: $282build_tuple.24 = build_tuple(items=[Var($266binary_subtract.16, _loop_hafnian_subroutines.py:180), Var($280binary_subtract.23, _loop_hafnian_subroutines.py:180)])
DEBUG 2022-02-14 16:38:19,058 on stmt: $284binary_subscr.25 = getitem(value=comb, index=$282build_tuple.24, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:19,058 on stmt: $288binary_multiply.27 = $284binary_subscr.25 * powfactor.1
DEBUG 2022-02-14 16:38:19,058 on stmt: $290inplace_add.28 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$258binary_subscr.12, rhs=$288binary_multiply.27, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:38:19,058 on stmt: comb[$254build_tuple.9] = $290inplace_add.28
DEBUG 2022-02-14 16:38:19,058 on stmt: jump 240
DEBUG 2022-02-14 16:38:19,059 ==== SSA block rewrite pass on 298
DEBUG 2022-02-14 16:38:19,059 Running <numba.core.ssa._FixSSAVars object at 0x7fa046317f70>
DEBUG 2022-02-14 16:38:19,059 on stmt: jump 202
DEBUG 2022-02-14 16:38:19,059 ==== SSA block rewrite pass on 300
DEBUG 2022-02-14 16:38:19,059 Running <numba.core.ssa._FixSSAVars object at 0x7fa046317f70>
DEBUG 2022-02-14 16:38:19,059 on stmt: jump 60
DEBUG 2022-02-14 16:38:19,059 ==== SSA block rewrite pass on 302
DEBUG 2022-02-14 16:38:19,059 Running <numba.core.ssa._FixSSAVars object at 0x7fa046317f70>
DEBUG 2022-02-14 16:38:19,059 on stmt: $const306.2 = const(NoneType, None)
DEBUG 2022-02-14 16:38:19,059 on stmt: $const308.3 = const(NoneType, None)
DEBUG 2022-02-14 16:38:19,059 on stmt: $310build_slice.4 = global(slice: <class 'slice'>)
DEBUG 2022-02-14 16:38:19,059 on stmt: $310build_slice.5 = call $310build_slice.4($const306.2, $const308.3, func=$310build_slice.4, args=(Var($const306.2, _loop_hafnian_subroutines.py:182), Var($const308.3, _loop_hafnian_subroutines.py:182)), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:19,059 on stmt: $312build_tuple.6 = build_tuple(items=[Var(count, _loop_hafnian_subroutines.py:161), Var($310build_slice.5, _loop_hafnian_subroutines.py:182)])
DEBUG 2022-02-14 16:38:19,059 on stmt: $314binary_subscr.7 = getitem(value=comb, index=$312build_tuple.6, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:19,059 on stmt: $316return_value.8 = cast(value=$314binary_subscr.7)
DEBUG 2022-02-14 16:38:19,059 on stmt: return $316return_value.8
DEBUG 2022-02-14 16:38:19,059 Fix SSA violator on var count
DEBUG 2022-02-14 16:38:19,059 ==== SSA block rewrite pass on 0
DEBUG 2022-02-14 16:38:19,059 Running <numba.core.ssa._FreshVarHandler object at 0x7fa041dc0820>
DEBUG 2022-02-14 16:38:19,059 on stmt: E = arg(0, name=E)
DEBUG 2022-02-14 16:38:19,059 on stmt: AX_S = arg(1, name=AX_S)
DEBUG 2022-02-14 16:38:19,059 on stmt: XD_S = arg(2, name=XD_S)
DEBUG 2022-02-14 16:38:19,059 on stmt: D_S = arg(3, name=D_S)
DEBUG 2022-02-14 16:38:19,059 on stmt: n = arg(4, name=n)
DEBUG 2022-02-14 16:38:19,059 on stmt: oddloop = arg(5, name=oddloop)
DEBUG 2022-02-14 16:38:19,059 on stmt: oddVX_S = arg(6, name=oddVX_S)
DEBUG 2022-02-14 16:38:19,059 on stmt: $4load_method.1 = getattr(value=E, attr=copy)
DEBUG 2022-02-14 16:38:19,059 on stmt: E_k = call $4load_method.1(func=$4load_method.1, args=[], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:19,060 on stmt: count = const(int, 0)
DEBUG 2022-02-14 16:38:19,060 first assign: count
DEBUG 2022-02-14 16:38:19,060 replaced with: count = const(int, 0)
DEBUG 2022-02-14 16:38:19,060 on stmt: $14load_global.4 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:38:19,060 on stmt: $16load_attr.5 = getattr(value=$14load_global.4, attr=zeros)
DEBUG 2022-02-14 16:38:19,060 on stmt: $const18.6 = const(int, 2)
DEBUG 2022-02-14 16:38:19,060 on stmt: $const22.8 = const(int, 1)
DEBUG 2022-02-14 16:38:19,060 on stmt: $24binary_add.9 = n + $const22.8
DEBUG 2022-02-14 16:38:19,060 on stmt: $26build_tuple.10 = build_tuple(items=[Var($const18.6, _loop_hafnian_subroutines.py:162), Var($24binary_add.9, _loop_hafnian_subroutines.py:162)])
DEBUG 2022-02-14 16:38:19,060 on stmt: $28load_global.11 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:38:19,060 on stmt: $30load_attr.12 = getattr(value=$28load_global.11, attr=complex128)
DEBUG 2022-02-14 16:38:19,060 on stmt: comb = call $16load_attr.5($26build_tuple.10, func=$16load_attr.5, args=[Var($26build_tuple.10, _loop_hafnian_subroutines.py:162)], kws=[('dtype', Var($30load_attr.12, _loop_hafnian_subroutines.py:162))], vararg=None, target=None)
DEBUG 2022-02-14 16:38:19,060 on stmt: $const38.15 = const(int, 1)
DEBUG 2022-02-14 16:38:19,060 on stmt: $const_0 = const(int, 0)
DEBUG 2022-02-14 16:38:19,060 on stmt: $const_0.1 = const(int, 0)
DEBUG 2022-02-14 16:38:19,060 on stmt: $const42.17 = build_tuple(items=[Var($const_0, _loop_hafnian_subroutines.py:163), Var($const_0.1, _loop_hafnian_subroutines.py:163)])
DEBUG 2022-02-14 16:38:19,060 on stmt: comb[(0, 0)] = $const38.15
DEBUG 2022-02-14 16:38:19,060 on stmt: $46load_global.18 = global(range: <class 'range'>)
DEBUG 2022-02-14 16:38:19,060 on stmt: $const48.19 = const(int, 1)
DEBUG 2022-02-14 16:38:19,060 on stmt: $const52.21 = const(int, 1)
DEBUG 2022-02-14 16:38:19,060 on stmt: $54binary_add.22 = n + $const52.21
DEBUG 2022-02-14 16:38:19,060 on stmt: $56call_function.23 = call $46load_global.18($const48.19, $54binary_add.22, func=$46load_global.18, args=[Var($const48.19, _loop_hafnian_subroutines.py:164), Var($54binary_add.22, _loop_hafnian_subroutines.py:164)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:19,060 on stmt: $58get_iter.24 = getiter(value=$56call_function.23)
DEBUG 2022-02-14 16:38:19,060 on stmt: $phi60.0 = $58get_iter.24
DEBUG 2022-02-14 16:38:19,060 on stmt: jump 60
DEBUG 2022-02-14 16:38:19,060 ==== SSA block rewrite pass on 60
DEBUG 2022-02-14 16:38:19,061 Running <numba.core.ssa._FreshVarHandler object at 0x7fa041dc0820>
DEBUG 2022-02-14 16:38:19,061 on stmt: E_k.2 = phi(incoming_values=[Var(E_k, _loop_hafnian_subroutines.py:159), Var(E_k.3, _loop_hafnian_subroutines.py:168)], incoming_blocks=[0, 300])
DEBUG 2022-02-14 16:38:19,061 on stmt: D_S.2 = phi(incoming_values=[Var(D_S, _loop_hafnian_subroutines.py:159), Var(D_S.3, _loop_hafnian_subroutines.py:168)], incoming_blocks=[0, 300])
DEBUG 2022-02-14 16:38:19,061 on stmt: $60for_iter.1 = iternext(value=$phi60.0)
DEBUG 2022-02-14 16:38:19,061 on stmt: $60for_iter.2 = pair_first(value=$60for_iter.1)
DEBUG 2022-02-14 16:38:19,061 on stmt: $60for_iter.3 = pair_second(value=$60for_iter.1)
DEBUG 2022-02-14 16:38:19,061 on stmt: $phi62.1 = $60for_iter.2
DEBUG 2022-02-14 16:38:19,061 on stmt: branch $60for_iter.3, 62, 302
DEBUG 2022-02-14 16:38:19,061 ==== SSA block rewrite pass on 62
DEBUG 2022-02-14 16:38:19,061 Running <numba.core.ssa._FreshVarHandler object at 0x7fa041dc0820>
DEBUG 2022-02-14 16:38:19,061 on stmt: i = $phi62.1
DEBUG 2022-02-14 16:38:19,061 on stmt: $const66.3 = const(int, 1)
DEBUG 2022-02-14 16:38:19,061 on stmt: $68compare_op.4 = i == $const66.3
DEBUG 2022-02-14 16:38:19,061 on stmt: bool70 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:38:19,061 on stmt: $70pred = call bool70($68compare_op.4, func=bool70, args=(Var($68compare_op.4, _loop_hafnian_subroutines.py:165),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:19,061 on stmt: branch $70pred, 72, 78
DEBUG 2022-02-14 16:38:19,061 ==== SSA block rewrite pass on 72
DEBUG 2022-02-14 16:38:19,061 Running <numba.core.ssa._FreshVarHandler object at 0x7fa041dc0820>
DEBUG 2022-02-14 16:38:19,061 on stmt: factor = oddloop
DEBUG 2022-02-14 16:38:19,061 on stmt: jump 140
DEBUG 2022-02-14 16:38:19,061 ==== SSA block rewrite pass on 78
DEBUG 2022-02-14 16:38:19,061 Running <numba.core.ssa._FreshVarHandler object at 0x7fa041dc0820>
DEBUG 2022-02-14 16:38:19,061 on stmt: $const80.2 = const(int, 2)
DEBUG 2022-02-14 16:38:19,061 on stmt: $82binary_modulo.3 = i % $const80.2
DEBUG 2022-02-14 16:38:19,061 on stmt: $const84.4 = const(int, 0)
DEBUG 2022-02-14 16:38:19,061 on stmt: $86compare_op.5 = $82binary_modulo.3 == $const84.4
DEBUG 2022-02-14 16:38:19,061 on stmt: bool88 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:38:19,061 on stmt: $88pred = call bool88($86compare_op.5, func=bool88, args=(Var($86compare_op.5, _loop_hafnian_subroutines.py:167),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:19,062 on stmt: branch $88pred, 90, 124
DEBUG 2022-02-14 16:38:19,062 ==== SSA block rewrite pass on 90
DEBUG 2022-02-14 16:38:19,062 Running <numba.core.ssa._FreshVarHandler object at 0x7fa041dc0820>
DEBUG 2022-02-14 16:38:19,062 on stmt: $92load_method.2 = getattr(value=E_k.2, attr=sum)
DEBUG 2022-02-14 16:38:19,062 on stmt: $94call_method.3 = call $92load_method.2(func=$92load_method.2, args=[], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:19,062 on stmt: $98binary_true_divide.5 = $94call_method.3 / i
DEBUG 2022-02-14 16:38:19,062 on stmt: $104binary_matrix_multiply.8 = XD_S <built-in function matmul> D_S.2
DEBUG 2022-02-14 16:38:19,062 on stmt: $const106.9 = const(int, 2)
DEBUG 2022-02-14 16:38:19,062 on stmt: $108binary_true_divide.10 = $104binary_matrix_multiply.8 / $const106.9
DEBUG 2022-02-14 16:38:19,062 on stmt: factor.1 = $98binary_true_divide.5 + $108binary_true_divide.10
DEBUG 2022-02-14 16:38:19,062 on stmt: $118inplace_multiply.14 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=E_k.2, rhs=E, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:38:19,062 on stmt: E_k.1 = $118inplace_multiply.14
DEBUG 2022-02-14 16:38:19,062 on stmt: jump 140
DEBUG 2022-02-14 16:38:19,062 ==== SSA block rewrite pass on 124
DEBUG 2022-02-14 16:38:19,062 Running <numba.core.ssa._FreshVarHandler object at 0x7fa041dc0820>
DEBUG 2022-02-14 16:38:19,062 on stmt: factor.2 = oddVX_S <built-in function matmul> D_S.2
DEBUG 2022-02-14 16:38:19,062 on stmt: $136binary_matrix_multiply.6 = AX_S <built-in function matmul> D_S.2
DEBUG 2022-02-14 16:38:19,062 on stmt: D_S.1 = $136binary_matrix_multiply.6
DEBUG 2022-02-14 16:38:19,062 on stmt: jump 140
DEBUG 2022-02-14 16:38:19,062 ==== SSA block rewrite pass on 140
DEBUG 2022-02-14 16:38:19,062 Running <numba.core.ssa._FreshVarHandler object at 0x7fa041dc0820>
DEBUG 2022-02-14 16:38:19,062 on stmt: E_k.3 = phi(incoming_values=[Var(E_k.2, _loop_hafnian_subroutines.py:168), Var(E_k.1, _loop_hafnian_subroutines.py:169), Var(E_k.2, _loop_hafnian_subroutines.py:168)], incoming_blocks=[72, 90, 124])
DEBUG 2022-02-14 16:38:19,062 on stmt: D_S.3 = phi(incoming_values=[Var(D_S.2, _loop_hafnian_subroutines.py:168), Var(D_S.2, _loop_hafnian_subroutines.py:168), Var(D_S.1, _loop_hafnian_subroutines.py:172)], incoming_blocks=[72, 90, 124])
DEBUG 2022-02-14 16:38:19,062 on stmt: factor.3 = phi(incoming_values=[Var(factor, _loop_hafnian_subroutines.py:166), Var(factor.1, _loop_hafnian_subroutines.py:168), Var(factor.2, _loop_hafnian_subroutines.py:171)], incoming_blocks=[72, 90, 124])
DEBUG 2022-02-14 16:38:19,062 on stmt: powfactor = const(int, 1)
DEBUG 2022-02-14 16:38:19,062 on stmt: $const144.2 = const(int, 1)
DEBUG 2022-02-14 16:38:19,063 on stmt: $148binary_subtract.4 = $const144.2 - count
DEBUG 2022-02-14 16:38:19,063 on stmt: count = $148binary_subtract.4
DEBUG 2022-02-14 16:38:19,063 replaced with: count.1 = $148binary_subtract.4
DEBUG 2022-02-14 16:38:19,063 on stmt: $const154.6 = const(int, 1)
DEBUG 2022-02-14 16:38:19,063 on stmt: $158binary_subtract.8 = $const154.6 - count
DEBUG 2022-02-14 16:38:19,063 on stmt: $const160.9 = const(NoneType, None)
DEBUG 2022-02-14 16:38:19,063 on stmt: $const162.10 = const(NoneType, None)
DEBUG 2022-02-14 16:38:19,063 on stmt: $164build_slice.11 = global(slice: <class 'slice'>)
DEBUG 2022-02-14 16:38:19,063 on stmt: $164build_slice.12 = call $164build_slice.11($const160.9, $const162.10, func=$164build_slice.11, args=(Var($const160.9, _loop_hafnian_subroutines.py:176), Var($const162.10, _loop_hafnian_subroutines.py:176)), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:19,063 on stmt: $166build_tuple.13 = build_tuple(items=[Var($158binary_subtract.8, _loop_hafnian_subroutines.py:176), Var($164build_slice.12, _loop_hafnian_subroutines.py:176)])
DEBUG 2022-02-14 16:38:19,063 on stmt: $168binary_subscr.14 = getitem(value=comb, index=$166build_tuple.13, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:19,063 on stmt: $const174.17 = const(NoneType, None)
DEBUG 2022-02-14 16:38:19,063 on stmt: $const176.18 = const(NoneType, None)
DEBUG 2022-02-14 16:38:19,063 on stmt: $178build_slice.19 = global(slice: <class 'slice'>)
DEBUG 2022-02-14 16:38:19,063 on stmt: $178build_slice.20 = call $178build_slice.19($const174.17, $const176.18, func=$178build_slice.19, args=(Var($const174.17, _loop_hafnian_subroutines.py:176), Var($const176.18, _loop_hafnian_subroutines.py:176)), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:19,063 on stmt: $180build_tuple.21 = build_tuple(items=[Var(count, _loop_hafnian_subroutines.py:161), Var($178build_slice.20, _loop_hafnian_subroutines.py:176)])
DEBUG 2022-02-14 16:38:19,063 on stmt: comb[$180build_tuple.21] = $168binary_subscr.14
DEBUG 2022-02-14 16:38:19,063 on stmt: $184load_global.22 = global(range: <class 'range'>)
DEBUG 2022-02-14 16:38:19,063 on stmt: $const186.23 = const(int, 1)
DEBUG 2022-02-14 16:38:19,063 on stmt: $192binary_floor_divide.26 = n // i
DEBUG 2022-02-14 16:38:19,063 on stmt: $const194.27 = const(int, 1)
DEBUG 2022-02-14 16:38:19,063 on stmt: $196binary_add.28 = $192binary_floor_divide.26 + $const194.27
DEBUG 2022-02-14 16:38:19,063 on stmt: $198call_function.29 = call $184load_global.22($const186.23, $196binary_add.28, func=$184load_global.22, args=[Var($const186.23, _loop_hafnian_subroutines.py:177), Var($196binary_add.28, _loop_hafnian_subroutines.py:177)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:19,063 on stmt: $200get_iter.30 = getiter(value=$198call_function.29)
DEBUG 2022-02-14 16:38:19,063 on stmt: $phi202.1 = $200get_iter.30
DEBUG 2022-02-14 16:38:19,063 on stmt: jump 202
DEBUG 2022-02-14 16:38:19,064 ==== SSA block rewrite pass on 202
DEBUG 2022-02-14 16:38:19,064 Running <numba.core.ssa._FreshVarHandler object at 0x7fa041dc0820>
DEBUG 2022-02-14 16:38:19,064 on stmt: powfactor.2 = phi(incoming_values=[Var(powfactor.1, _loop_hafnian_subroutines.py:178), Var(powfactor, _loop_hafnian_subroutines.py:174)], incoming_blocks=[298, 140])
DEBUG 2022-02-14 16:38:19,064 on stmt: $202for_iter.2 = iternext(value=$phi202.1)
DEBUG 2022-02-14 16:38:19,064 on stmt: $202for_iter.3 = pair_first(value=$202for_iter.2)
DEBUG 2022-02-14 16:38:19,064 on stmt: $202for_iter.4 = pair_second(value=$202for_iter.2)
DEBUG 2022-02-14 16:38:19,064 on stmt: $phi204.2 = $202for_iter.3
DEBUG 2022-02-14 16:38:19,064 on stmt: branch $202for_iter.4, 204, 300
DEBUG 2022-02-14 16:38:19,064 ==== SSA block rewrite pass on 204
DEBUG 2022-02-14 16:38:19,064 Running <numba.core.ssa._FreshVarHandler object at 0x7fa041dc0820>
DEBUG 2022-02-14 16:38:19,064 on stmt: j = $phi204.2
DEBUG 2022-02-14 16:38:19,064 on stmt: $212binary_true_divide.6 = factor.3 / j
DEBUG 2022-02-14 16:38:19,064 on stmt: $214inplace_multiply.7 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=powfactor.2, rhs=$212binary_true_divide.6, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:38:19,064 on stmt: powfactor.1 = $214inplace_multiply.7
DEBUG 2022-02-14 16:38:19,064 on stmt: $218load_global.8 = global(range: <class 'range'>)
DEBUG 2022-02-14 16:38:19,064 on stmt: $224binary_multiply.11 = i * j
DEBUG 2022-02-14 16:38:19,064 on stmt: $const226.12 = const(int, 1)
DEBUG 2022-02-14 16:38:19,064 on stmt: $228binary_add.13 = $224binary_multiply.11 + $const226.12
DEBUG 2022-02-14 16:38:19,064 on stmt: $const232.15 = const(int, 2)
DEBUG 2022-02-14 16:38:19,064 on stmt: $234binary_add.16 = n + $const232.15
DEBUG 2022-02-14 16:38:19,064 on stmt: $236call_function.17 = call $218load_global.8($228binary_add.13, $234binary_add.16, func=$218load_global.8, args=[Var($228binary_add.13, _loop_hafnian_subroutines.py:179), Var($234binary_add.16, _loop_hafnian_subroutines.py:179)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:19,064 on stmt: $238get_iter.18 = getiter(value=$236call_function.17)
DEBUG 2022-02-14 16:38:19,064 on stmt: $phi240.2 = $238get_iter.18
DEBUG 2022-02-14 16:38:19,064 on stmt: jump 240
DEBUG 2022-02-14 16:38:19,064 ==== SSA block rewrite pass on 240
DEBUG 2022-02-14 16:38:19,064 Running <numba.core.ssa._FreshVarHandler object at 0x7fa041dc0820>
DEBUG 2022-02-14 16:38:19,064 on stmt: $240for_iter.3 = iternext(value=$phi240.2)
DEBUG 2022-02-14 16:38:19,065 on stmt: $240for_iter.4 = pair_first(value=$240for_iter.3)
DEBUG 2022-02-14 16:38:19,065 on stmt: $240for_iter.5 = pair_second(value=$240for_iter.3)
DEBUG 2022-02-14 16:38:19,065 on stmt: $phi242.3 = $240for_iter.4
DEBUG 2022-02-14 16:38:19,065 on stmt: branch $240for_iter.5, 242, 298
DEBUG 2022-02-14 16:38:19,065 ==== SSA block rewrite pass on 242
DEBUG 2022-02-14 16:38:19,065 Running <numba.core.ssa._FreshVarHandler object at 0x7fa041dc0820>
DEBUG 2022-02-14 16:38:19,065 on stmt: k = $phi242.3
DEBUG 2022-02-14 16:38:19,065 on stmt: $const250.7 = const(int, 1)
DEBUG 2022-02-14 16:38:19,065 on stmt: $252binary_subtract.8 = k - $const250.7
DEBUG 2022-02-14 16:38:19,065 on stmt: $254build_tuple.9 = build_tuple(items=[Var(count, _loop_hafnian_subroutines.py:161), Var($252binary_subtract.8, _loop_hafnian_subroutines.py:180)])
DEBUG 2022-02-14 16:38:19,065 on stmt: $258binary_subscr.12 = getitem(value=comb, index=$254build_tuple.9, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:19,065 on stmt: $const262.14 = const(int, 1)
DEBUG 2022-02-14 16:38:19,065 on stmt: $266binary_subtract.16 = $const262.14 - count
DEBUG 2022-02-14 16:38:19,065 on stmt: $274binary_multiply.20 = i * j
DEBUG 2022-02-14 16:38:19,065 on stmt: $276binary_subtract.21 = k - $274binary_multiply.20
DEBUG 2022-02-14 16:38:19,065 on stmt: $const278.22 = const(int, 1)
DEBUG 2022-02-14 16:38:19,065 on stmt: $280binary_subtract.23 = $276binary_subtract.21 - $const278.22
DEBUG 2022-02-14 16:38:19,065 on stmt: $282build_tuple.24 = build_tuple(items=[Var($266binary_subtract.16, _loop_hafnian_subroutines.py:180), Var($280binary_subtract.23, _loop_hafnian_subroutines.py:180)])
DEBUG 2022-02-14 16:38:19,065 on stmt: $284binary_subscr.25 = getitem(value=comb, index=$282build_tuple.24, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:19,065 on stmt: $288binary_multiply.27 = $284binary_subscr.25 * powfactor.1
DEBUG 2022-02-14 16:38:19,065 on stmt: $290inplace_add.28 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$258binary_subscr.12, rhs=$288binary_multiply.27, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:38:19,065 on stmt: comb[$254build_tuple.9] = $290inplace_add.28
DEBUG 2022-02-14 16:38:19,065 on stmt: jump 240
DEBUG 2022-02-14 16:38:19,065 ==== SSA block rewrite pass on 298
DEBUG 2022-02-14 16:38:19,065 Running <numba.core.ssa._FreshVarHandler object at 0x7fa041dc0820>
DEBUG 2022-02-14 16:38:19,065 on stmt: jump 202
DEBUG 2022-02-14 16:38:19,066 ==== SSA block rewrite pass on 300
DEBUG 2022-02-14 16:38:19,066 Running <numba.core.ssa._FreshVarHandler object at 0x7fa041dc0820>
DEBUG 2022-02-14 16:38:19,066 on stmt: jump 60
DEBUG 2022-02-14 16:38:19,066 ==== SSA block rewrite pass on 302
DEBUG 2022-02-14 16:38:19,066 Running <numba.core.ssa._FreshVarHandler object at 0x7fa041dc0820>
DEBUG 2022-02-14 16:38:19,066 on stmt: $const306.2 = const(NoneType, None)
DEBUG 2022-02-14 16:38:19,066 on stmt: $const308.3 = const(NoneType, None)
DEBUG 2022-02-14 16:38:19,066 on stmt: $310build_slice.4 = global(slice: <class 'slice'>)
DEBUG 2022-02-14 16:38:19,066 on stmt: $310build_slice.5 = call $310build_slice.4($const306.2, $const308.3, func=$310build_slice.4, args=(Var($const306.2, _loop_hafnian_subroutines.py:182), Var($const308.3, _loop_hafnian_subroutines.py:182)), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:19,066 on stmt: $312build_tuple.6 = build_tuple(items=[Var(count, _loop_hafnian_subroutines.py:161), Var($310build_slice.5, _loop_hafnian_subroutines.py:182)])
DEBUG 2022-02-14 16:38:19,066 on stmt: $314binary_subscr.7 = getitem(value=comb, index=$312build_tuple.6, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:19,066 on stmt: $316return_value.8 = cast(value=$314binary_subscr.7)
DEBUG 2022-02-14 16:38:19,066 on stmt: return $316return_value.8
DEBUG 2022-02-14 16:38:19,066 Replaced assignments: defaultdict(<class 'list'>,
            {0: [<numba.core.ir.Assign object at 0x7fa041eef400>],
             140: [<numba.core.ir.Assign object at 0x7fa046317340>]})
DEBUG 2022-02-14 16:38:19,066 ==== SSA block rewrite pass on 0
DEBUG 2022-02-14 16:38:19,066 Running <numba.core.ssa._FixSSAVars object at 0x7fa041ef1fd0>
DEBUG 2022-02-14 16:38:19,066 on stmt: E = arg(0, name=E)
DEBUG 2022-02-14 16:38:19,066 on stmt: AX_S = arg(1, name=AX_S)
DEBUG 2022-02-14 16:38:19,066 on stmt: XD_S = arg(2, name=XD_S)
DEBUG 2022-02-14 16:38:19,066 on stmt: D_S = arg(3, name=D_S)
DEBUG 2022-02-14 16:38:19,066 on stmt: n = arg(4, name=n)
DEBUG 2022-02-14 16:38:19,066 on stmt: oddloop = arg(5, name=oddloop)
DEBUG 2022-02-14 16:38:19,066 on stmt: oddVX_S = arg(6, name=oddVX_S)
DEBUG 2022-02-14 16:38:19,066 on stmt: $4load_method.1 = getattr(value=E, attr=copy)
DEBUG 2022-02-14 16:38:19,066 on stmt: E_k = call $4load_method.1(func=$4load_method.1, args=[], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:19,067 on stmt: count = const(int, 0)
DEBUG 2022-02-14 16:38:19,067 on stmt: $14load_global.4 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:38:19,067 on stmt: $16load_attr.5 = getattr(value=$14load_global.4, attr=zeros)
DEBUG 2022-02-14 16:38:19,067 on stmt: $const18.6 = const(int, 2)
DEBUG 2022-02-14 16:38:19,067 on stmt: $const22.8 = const(int, 1)
DEBUG 2022-02-14 16:38:19,067 on stmt: $24binary_add.9 = n + $const22.8
DEBUG 2022-02-14 16:38:19,067 on stmt: $26build_tuple.10 = build_tuple(items=[Var($const18.6, _loop_hafnian_subroutines.py:162), Var($24binary_add.9, _loop_hafnian_subroutines.py:162)])
DEBUG 2022-02-14 16:38:19,067 on stmt: $28load_global.11 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:38:19,067 on stmt: $30load_attr.12 = getattr(value=$28load_global.11, attr=complex128)
DEBUG 2022-02-14 16:38:19,067 on stmt: comb = call $16load_attr.5($26build_tuple.10, func=$16load_attr.5, args=[Var($26build_tuple.10, _loop_hafnian_subroutines.py:162)], kws=[('dtype', Var($30load_attr.12, _loop_hafnian_subroutines.py:162))], vararg=None, target=None)
DEBUG 2022-02-14 16:38:19,067 on stmt: $const38.15 = const(int, 1)
DEBUG 2022-02-14 16:38:19,067 on stmt: $const_0 = const(int, 0)
DEBUG 2022-02-14 16:38:19,067 on stmt: $const_0.1 = const(int, 0)
DEBUG 2022-02-14 16:38:19,067 on stmt: $const42.17 = build_tuple(items=[Var($const_0, _loop_hafnian_subroutines.py:163), Var($const_0.1, _loop_hafnian_subroutines.py:163)])
DEBUG 2022-02-14 16:38:19,067 on stmt: comb[(0, 0)] = $const38.15
DEBUG 2022-02-14 16:38:19,067 on stmt: $46load_global.18 = global(range: <class 'range'>)
DEBUG 2022-02-14 16:38:19,067 on stmt: $const48.19 = const(int, 1)
DEBUG 2022-02-14 16:38:19,067 on stmt: $const52.21 = const(int, 1)
DEBUG 2022-02-14 16:38:19,067 on stmt: $54binary_add.22 = n + $const52.21
DEBUG 2022-02-14 16:38:19,067 on stmt: $56call_function.23 = call $46load_global.18($const48.19, $54binary_add.22, func=$46load_global.18, args=[Var($const48.19, _loop_hafnian_subroutines.py:164), Var($54binary_add.22, _loop_hafnian_subroutines.py:164)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:19,067 on stmt: $58get_iter.24 = getiter(value=$56call_function.23)
DEBUG 2022-02-14 16:38:19,067 on stmt: $phi60.0 = $58get_iter.24
DEBUG 2022-02-14 16:38:19,067 on stmt: jump 60
DEBUG 2022-02-14 16:38:19,067 ==== SSA block rewrite pass on 60
DEBUG 2022-02-14 16:38:19,067 Running <numba.core.ssa._FixSSAVars object at 0x7fa041ef1fd0>
DEBUG 2022-02-14 16:38:19,068 on stmt: E_k.2 = phi(incoming_values=[Var(E_k, _loop_hafnian_subroutines.py:159), Var(E_k.3, _loop_hafnian_subroutines.py:168)], incoming_blocks=[0, 300])
DEBUG 2022-02-14 16:38:19,068 on stmt: D_S.2 = phi(incoming_values=[Var(D_S, _loop_hafnian_subroutines.py:159), Var(D_S.3, _loop_hafnian_subroutines.py:168)], incoming_blocks=[0, 300])
DEBUG 2022-02-14 16:38:19,068 on stmt: $60for_iter.1 = iternext(value=$phi60.0)
DEBUG 2022-02-14 16:38:19,068 on stmt: $60for_iter.2 = pair_first(value=$60for_iter.1)
DEBUG 2022-02-14 16:38:19,068 on stmt: $60for_iter.3 = pair_second(value=$60for_iter.1)
DEBUG 2022-02-14 16:38:19,068 on stmt: $phi62.1 = $60for_iter.2
DEBUG 2022-02-14 16:38:19,068 on stmt: branch $60for_iter.3, 62, 302
DEBUG 2022-02-14 16:38:19,068 ==== SSA block rewrite pass on 62
DEBUG 2022-02-14 16:38:19,068 Running <numba.core.ssa._FixSSAVars object at 0x7fa041ef1fd0>
DEBUG 2022-02-14 16:38:19,068 on stmt: i = $phi62.1
DEBUG 2022-02-14 16:38:19,068 on stmt: $const66.3 = const(int, 1)
DEBUG 2022-02-14 16:38:19,068 on stmt: $68compare_op.4 = i == $const66.3
DEBUG 2022-02-14 16:38:19,068 on stmt: bool70 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:38:19,068 on stmt: $70pred = call bool70($68compare_op.4, func=bool70, args=(Var($68compare_op.4, _loop_hafnian_subroutines.py:165),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:19,068 on stmt: branch $70pred, 72, 78
DEBUG 2022-02-14 16:38:19,068 ==== SSA block rewrite pass on 72
DEBUG 2022-02-14 16:38:19,068 Running <numba.core.ssa._FixSSAVars object at 0x7fa041ef1fd0>
DEBUG 2022-02-14 16:38:19,068 on stmt: factor = oddloop
DEBUG 2022-02-14 16:38:19,068 on stmt: jump 140
DEBUG 2022-02-14 16:38:19,068 ==== SSA block rewrite pass on 78
DEBUG 2022-02-14 16:38:19,068 Running <numba.core.ssa._FixSSAVars object at 0x7fa041ef1fd0>
DEBUG 2022-02-14 16:38:19,068 on stmt: $const80.2 = const(int, 2)
DEBUG 2022-02-14 16:38:19,068 on stmt: $82binary_modulo.3 = i % $const80.2
DEBUG 2022-02-14 16:38:19,068 on stmt: $const84.4 = const(int, 0)
DEBUG 2022-02-14 16:38:19,068 on stmt: $86compare_op.5 = $82binary_modulo.3 == $const84.4
DEBUG 2022-02-14 16:38:19,068 on stmt: bool88 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:38:19,069 on stmt: $88pred = call bool88($86compare_op.5, func=bool88, args=(Var($86compare_op.5, _loop_hafnian_subroutines.py:167),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:19,069 on stmt: branch $88pred, 90, 124
DEBUG 2022-02-14 16:38:19,069 ==== SSA block rewrite pass on 90
DEBUG 2022-02-14 16:38:19,069 Running <numba.core.ssa._FixSSAVars object at 0x7fa041ef1fd0>
DEBUG 2022-02-14 16:38:19,069 on stmt: $92load_method.2 = getattr(value=E_k.2, attr=sum)
DEBUG 2022-02-14 16:38:19,069 on stmt: $94call_method.3 = call $92load_method.2(func=$92load_method.2, args=[], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:19,069 on stmt: $98binary_true_divide.5 = $94call_method.3 / i
DEBUG 2022-02-14 16:38:19,069 on stmt: $104binary_matrix_multiply.8 = XD_S <built-in function matmul> D_S.2
DEBUG 2022-02-14 16:38:19,069 on stmt: $const106.9 = const(int, 2)
DEBUG 2022-02-14 16:38:19,069 on stmt: $108binary_true_divide.10 = $104binary_matrix_multiply.8 / $const106.9
DEBUG 2022-02-14 16:38:19,069 on stmt: factor.1 = $98binary_true_divide.5 + $108binary_true_divide.10
DEBUG 2022-02-14 16:38:19,069 on stmt: $118inplace_multiply.14 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=E_k.2, rhs=E, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:38:19,069 on stmt: E_k.1 = $118inplace_multiply.14
DEBUG 2022-02-14 16:38:19,069 on stmt: jump 140
DEBUG 2022-02-14 16:38:19,069 ==== SSA block rewrite pass on 124
DEBUG 2022-02-14 16:38:19,069 Running <numba.core.ssa._FixSSAVars object at 0x7fa041ef1fd0>
DEBUG 2022-02-14 16:38:19,069 on stmt: factor.2 = oddVX_S <built-in function matmul> D_S.2
DEBUG 2022-02-14 16:38:19,069 on stmt: $136binary_matrix_multiply.6 = AX_S <built-in function matmul> D_S.2
DEBUG 2022-02-14 16:38:19,069 on stmt: D_S.1 = $136binary_matrix_multiply.6
DEBUG 2022-02-14 16:38:19,069 on stmt: jump 140
DEBUG 2022-02-14 16:38:19,069 ==== SSA block rewrite pass on 140
DEBUG 2022-02-14 16:38:19,069 Running <numba.core.ssa._FixSSAVars object at 0x7fa041ef1fd0>
DEBUG 2022-02-14 16:38:19,069 on stmt: E_k.3 = phi(incoming_values=[Var(E_k.2, _loop_hafnian_subroutines.py:168), Var(E_k.1, _loop_hafnian_subroutines.py:169), Var(E_k.2, _loop_hafnian_subroutines.py:168)], incoming_blocks=[72, 90, 124])
DEBUG 2022-02-14 16:38:19,069 on stmt: D_S.3 = phi(incoming_values=[Var(D_S.2, _loop_hafnian_subroutines.py:168), Var(D_S.2, _loop_hafnian_subroutines.py:168), Var(D_S.1, _loop_hafnian_subroutines.py:172)], incoming_blocks=[72, 90, 124])
DEBUG 2022-02-14 16:38:19,069 on stmt: factor.3 = phi(incoming_values=[Var(factor, _loop_hafnian_subroutines.py:166), Var(factor.1, _loop_hafnian_subroutines.py:168), Var(factor.2, _loop_hafnian_subroutines.py:171)], incoming_blocks=[72, 90, 124])
DEBUG 2022-02-14 16:38:19,070 on stmt: powfactor = const(int, 1)
DEBUG 2022-02-14 16:38:19,070 on stmt: $const144.2 = const(int, 1)
DEBUG 2022-02-14 16:38:19,070 on stmt: $148binary_subtract.4 = $const144.2 - count
DEBUG 2022-02-14 16:38:19,070 find_def var='count' stmt=$148binary_subtract.4 = $const144.2 - count
DEBUG 2022-02-14 16:38:19,070 find_def_from_top label 140
DEBUG 2022-02-14 16:38:19,070 idom 62 from label 140
DEBUG 2022-02-14 16:38:19,070 find_def_from_bottom label 62
DEBUG 2022-02-14 16:38:19,070 find_def_from_top label 62
DEBUG 2022-02-14 16:38:19,070 idom 60 from label 62
DEBUG 2022-02-14 16:38:19,070 find_def_from_bottom label 60
DEBUG 2022-02-14 16:38:19,070 find_def_from_top label 60
DEBUG 2022-02-14 16:38:19,070 insert phi node count.2 = phi(incoming_values=[], incoming_blocks=[]) at 60
DEBUG 2022-02-14 16:38:19,070 find_def_from_bottom label 0
DEBUG 2022-02-14 16:38:19,070 incoming_def count = const(int, 0)
DEBUG 2022-02-14 16:38:19,070 find_def_from_bottom label 300
DEBUG 2022-02-14 16:38:19,070 find_def_from_top label 300
DEBUG 2022-02-14 16:38:19,070 idom 202 from label 300
DEBUG 2022-02-14 16:38:19,070 find_def_from_bottom label 202
DEBUG 2022-02-14 16:38:19,070 find_def_from_top label 202
DEBUG 2022-02-14 16:38:19,070 idom 140 from label 202
DEBUG 2022-02-14 16:38:19,070 find_def_from_bottom label 140
DEBUG 2022-02-14 16:38:19,070 incoming_def count.1 = $148binary_subtract.4
DEBUG 2022-02-14 16:38:19,070 replaced with: $148binary_subtract.4 = $const144.2 - count.2
DEBUG 2022-02-14 16:38:19,070 on stmt: count.1 = $148binary_subtract.4
DEBUG 2022-02-14 16:38:19,070 on stmt: $const154.6 = const(int, 1)
DEBUG 2022-02-14 16:38:19,070 on stmt: $158binary_subtract.8 = $const154.6 - count
DEBUG 2022-02-14 16:38:19,070 find_def var='count' stmt=$158binary_subtract.8 = $const154.6 - count
DEBUG 2022-02-14 16:38:19,071 replaced with: $158binary_subtract.8 = $const154.6 - count.1
DEBUG 2022-02-14 16:38:19,071 on stmt: $const160.9 = const(NoneType, None)
DEBUG 2022-02-14 16:38:19,071 on stmt: $const162.10 = const(NoneType, None)
DEBUG 2022-02-14 16:38:19,071 on stmt: $164build_slice.11 = global(slice: <class 'slice'>)
DEBUG 2022-02-14 16:38:19,071 on stmt: $164build_slice.12 = call $164build_slice.11($const160.9, $const162.10, func=$164build_slice.11, args=(Var($const160.9, _loop_hafnian_subroutines.py:176), Var($const162.10, _loop_hafnian_subroutines.py:176)), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:19,071 on stmt: $166build_tuple.13 = build_tuple(items=[Var($158binary_subtract.8, _loop_hafnian_subroutines.py:176), Var($164build_slice.12, _loop_hafnian_subroutines.py:176)])
DEBUG 2022-02-14 16:38:19,071 on stmt: $168binary_subscr.14 = getitem(value=comb, index=$166build_tuple.13, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:19,071 on stmt: $const174.17 = const(NoneType, None)
DEBUG 2022-02-14 16:38:19,071 on stmt: $const176.18 = const(NoneType, None)
DEBUG 2022-02-14 16:38:19,071 on stmt: $178build_slice.19 = global(slice: <class 'slice'>)
DEBUG 2022-02-14 16:38:19,071 on stmt: $178build_slice.20 = call $178build_slice.19($const174.17, $const176.18, func=$178build_slice.19, args=(Var($const174.17, _loop_hafnian_subroutines.py:176), Var($const176.18, _loop_hafnian_subroutines.py:176)), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:19,071 on stmt: $180build_tuple.21 = build_tuple(items=[Var(count, _loop_hafnian_subroutines.py:161), Var($178build_slice.20, _loop_hafnian_subroutines.py:176)])
DEBUG 2022-02-14 16:38:19,071 find_def var='count' stmt=$180build_tuple.21 = build_tuple(items=[Var(count, _loop_hafnian_subroutines.py:161), Var($178build_slice.20, _loop_hafnian_subroutines.py:176)])
DEBUG 2022-02-14 16:38:19,071 replaced with: $180build_tuple.21 = build_tuple(items=[Var(count.1, _loop_hafnian_subroutines.py:175), Var($178build_slice.20, _loop_hafnian_subroutines.py:176)])
DEBUG 2022-02-14 16:38:19,071 on stmt: comb[$180build_tuple.21] = $168binary_subscr.14
DEBUG 2022-02-14 16:38:19,071 on stmt: $184load_global.22 = global(range: <class 'range'>)
DEBUG 2022-02-14 16:38:19,071 on stmt: $const186.23 = const(int, 1)
DEBUG 2022-02-14 16:38:19,071 on stmt: $192binary_floor_divide.26 = n // i
DEBUG 2022-02-14 16:38:19,071 on stmt: $const194.27 = const(int, 1)
DEBUG 2022-02-14 16:38:19,071 on stmt: $196binary_add.28 = $192binary_floor_divide.26 + $const194.27
DEBUG 2022-02-14 16:38:19,071 on stmt: $198call_function.29 = call $184load_global.22($const186.23, $196binary_add.28, func=$184load_global.22, args=[Var($const186.23, _loop_hafnian_subroutines.py:177), Var($196binary_add.28, _loop_hafnian_subroutines.py:177)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:19,072 on stmt: $200get_iter.30 = getiter(value=$198call_function.29)
DEBUG 2022-02-14 16:38:19,072 on stmt: $phi202.1 = $200get_iter.30
DEBUG 2022-02-14 16:38:19,072 on stmt: jump 202
DEBUG 2022-02-14 16:38:19,072 ==== SSA block rewrite pass on 202
DEBUG 2022-02-14 16:38:19,072 Running <numba.core.ssa._FixSSAVars object at 0x7fa041ef1fd0>
DEBUG 2022-02-14 16:38:19,072 on stmt: powfactor.2 = phi(incoming_values=[Var(powfactor.1, _loop_hafnian_subroutines.py:178), Var(powfactor, _loop_hafnian_subroutines.py:174)], incoming_blocks=[298, 140])
DEBUG 2022-02-14 16:38:19,072 on stmt: $202for_iter.2 = iternext(value=$phi202.1)
DEBUG 2022-02-14 16:38:19,072 on stmt: $202for_iter.3 = pair_first(value=$202for_iter.2)
DEBUG 2022-02-14 16:38:19,072 on stmt: $202for_iter.4 = pair_second(value=$202for_iter.2)
DEBUG 2022-02-14 16:38:19,072 on stmt: $phi204.2 = $202for_iter.3
DEBUG 2022-02-14 16:38:19,072 on stmt: branch $202for_iter.4, 204, 300
DEBUG 2022-02-14 16:38:19,072 ==== SSA block rewrite pass on 204
DEBUG 2022-02-14 16:38:19,072 Running <numba.core.ssa._FixSSAVars object at 0x7fa041ef1fd0>
DEBUG 2022-02-14 16:38:19,072 on stmt: j = $phi204.2
DEBUG 2022-02-14 16:38:19,072 on stmt: $212binary_true_divide.6 = factor.3 / j
DEBUG 2022-02-14 16:38:19,072 on stmt: $214inplace_multiply.7 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=powfactor.2, rhs=$212binary_true_divide.6, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:38:19,072 on stmt: powfactor.1 = $214inplace_multiply.7
DEBUG 2022-02-14 16:38:19,072 on stmt: $218load_global.8 = global(range: <class 'range'>)
DEBUG 2022-02-14 16:38:19,072 on stmt: $224binary_multiply.11 = i * j
DEBUG 2022-02-14 16:38:19,072 on stmt: $const226.12 = const(int, 1)
DEBUG 2022-02-14 16:38:19,072 on stmt: $228binary_add.13 = $224binary_multiply.11 + $const226.12
DEBUG 2022-02-14 16:38:19,072 on stmt: $const232.15 = const(int, 2)
DEBUG 2022-02-14 16:38:19,072 on stmt: $234binary_add.16 = n + $const232.15
DEBUG 2022-02-14 16:38:19,072 on stmt: $236call_function.17 = call $218load_global.8($228binary_add.13, $234binary_add.16, func=$218load_global.8, args=[Var($228binary_add.13, _loop_hafnian_subroutines.py:179), Var($234binary_add.16, _loop_hafnian_subroutines.py:179)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:19,072 on stmt: $238get_iter.18 = getiter(value=$236call_function.17)
DEBUG 2022-02-14 16:38:19,072 on stmt: $phi240.2 = $238get_iter.18
DEBUG 2022-02-14 16:38:19,073 on stmt: jump 240
DEBUG 2022-02-14 16:38:19,073 ==== SSA block rewrite pass on 240
DEBUG 2022-02-14 16:38:19,073 Running <numba.core.ssa._FixSSAVars object at 0x7fa041ef1fd0>
DEBUG 2022-02-14 16:38:19,073 on stmt: $240for_iter.3 = iternext(value=$phi240.2)
DEBUG 2022-02-14 16:38:19,073 on stmt: $240for_iter.4 = pair_first(value=$240for_iter.3)
DEBUG 2022-02-14 16:38:19,073 on stmt: $240for_iter.5 = pair_second(value=$240for_iter.3)
DEBUG 2022-02-14 16:38:19,073 on stmt: $phi242.3 = $240for_iter.4
DEBUG 2022-02-14 16:38:19,073 on stmt: branch $240for_iter.5, 242, 298
DEBUG 2022-02-14 16:38:19,073 ==== SSA block rewrite pass on 242
DEBUG 2022-02-14 16:38:19,073 Running <numba.core.ssa._FixSSAVars object at 0x7fa041ef1fd0>
DEBUG 2022-02-14 16:38:19,073 on stmt: k = $phi242.3
DEBUG 2022-02-14 16:38:19,073 on stmt: $const250.7 = const(int, 1)
DEBUG 2022-02-14 16:38:19,073 on stmt: $252binary_subtract.8 = k - $const250.7
DEBUG 2022-02-14 16:38:19,073 on stmt: $254build_tuple.9 = build_tuple(items=[Var(count, _loop_hafnian_subroutines.py:161), Var($252binary_subtract.8, _loop_hafnian_subroutines.py:180)])
DEBUG 2022-02-14 16:38:19,073 find_def var='count' stmt=$254build_tuple.9 = build_tuple(items=[Var(count, _loop_hafnian_subroutines.py:161), Var($252binary_subtract.8, _loop_hafnian_subroutines.py:180)])
DEBUG 2022-02-14 16:38:19,073 find_def_from_top label 242
DEBUG 2022-02-14 16:38:19,073 idom 240 from label 242
DEBUG 2022-02-14 16:38:19,073 find_def_from_bottom label 240
DEBUG 2022-02-14 16:38:19,073 find_def_from_top label 240
DEBUG 2022-02-14 16:38:19,073 idom 204 from label 240
DEBUG 2022-02-14 16:38:19,073 find_def_from_bottom label 204
DEBUG 2022-02-14 16:38:19,073 find_def_from_top label 204
DEBUG 2022-02-14 16:38:19,073 idom 202 from label 204
DEBUG 2022-02-14 16:38:19,073 find_def_from_bottom label 202
DEBUG 2022-02-14 16:38:19,073 find_def_from_top label 202
DEBUG 2022-02-14 16:38:19,073 idom 140 from label 202
DEBUG 2022-02-14 16:38:19,073 find_def_from_bottom label 140
DEBUG 2022-02-14 16:38:19,074 replaced with: $254build_tuple.9 = build_tuple(items=[Var(count.1, _loop_hafnian_subroutines.py:175), Var($252binary_subtract.8, _loop_hafnian_subroutines.py:180)])
DEBUG 2022-02-14 16:38:19,074 on stmt: $258binary_subscr.12 = getitem(value=comb, index=$254build_tuple.9, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:19,074 on stmt: $const262.14 = const(int, 1)
DEBUG 2022-02-14 16:38:19,074 on stmt: $266binary_subtract.16 = $const262.14 - count
DEBUG 2022-02-14 16:38:19,074 find_def var='count' stmt=$266binary_subtract.16 = $const262.14 - count
DEBUG 2022-02-14 16:38:19,074 find_def_from_top label 242
DEBUG 2022-02-14 16:38:19,074 idom 240 from label 242
DEBUG 2022-02-14 16:38:19,074 find_def_from_bottom label 240
DEBUG 2022-02-14 16:38:19,074 find_def_from_top label 240
DEBUG 2022-02-14 16:38:19,074 idom 204 from label 240
DEBUG 2022-02-14 16:38:19,074 find_def_from_bottom label 204
DEBUG 2022-02-14 16:38:19,074 find_def_from_top label 204
DEBUG 2022-02-14 16:38:19,074 idom 202 from label 204
DEBUG 2022-02-14 16:38:19,074 find_def_from_bottom label 202
DEBUG 2022-02-14 16:38:19,074 find_def_from_top label 202
DEBUG 2022-02-14 16:38:19,074 idom 140 from label 202
DEBUG 2022-02-14 16:38:19,074 find_def_from_bottom label 140
DEBUG 2022-02-14 16:38:19,074 replaced with: $266binary_subtract.16 = $const262.14 - count.1
DEBUG 2022-02-14 16:38:19,074 on stmt: $274binary_multiply.20 = i * j
DEBUG 2022-02-14 16:38:19,074 on stmt: $276binary_subtract.21 = k - $274binary_multiply.20
DEBUG 2022-02-14 16:38:19,074 on stmt: $const278.22 = const(int, 1)
DEBUG 2022-02-14 16:38:19,074 on stmt: $280binary_subtract.23 = $276binary_subtract.21 - $const278.22
DEBUG 2022-02-14 16:38:19,074 on stmt: $282build_tuple.24 = build_tuple(items=[Var($266binary_subtract.16, _loop_hafnian_subroutines.py:180), Var($280binary_subtract.23, _loop_hafnian_subroutines.py:180)])
DEBUG 2022-02-14 16:38:19,074 on stmt: $284binary_subscr.25 = getitem(value=comb, index=$282build_tuple.24, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:19,074 on stmt: $288binary_multiply.27 = $284binary_subscr.25 * powfactor.1
DEBUG 2022-02-14 16:38:19,075 on stmt: $290inplace_add.28 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$258binary_subscr.12, rhs=$288binary_multiply.27, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:38:19,075 on stmt: comb[$254build_tuple.9] = $290inplace_add.28
DEBUG 2022-02-14 16:38:19,075 on stmt: jump 240
DEBUG 2022-02-14 16:38:19,075 ==== SSA block rewrite pass on 298
DEBUG 2022-02-14 16:38:19,075 Running <numba.core.ssa._FixSSAVars object at 0x7fa041ef1fd0>
DEBUG 2022-02-14 16:38:19,075 on stmt: jump 202
DEBUG 2022-02-14 16:38:19,075 ==== SSA block rewrite pass on 300
DEBUG 2022-02-14 16:38:19,075 Running <numba.core.ssa._FixSSAVars object at 0x7fa041ef1fd0>
DEBUG 2022-02-14 16:38:19,075 on stmt: jump 60
DEBUG 2022-02-14 16:38:19,075 ==== SSA block rewrite pass on 302
DEBUG 2022-02-14 16:38:19,075 Running <numba.core.ssa._FixSSAVars object at 0x7fa041ef1fd0>
DEBUG 2022-02-14 16:38:19,075 on stmt: $const306.2 = const(NoneType, None)
DEBUG 2022-02-14 16:38:19,075 on stmt: $const308.3 = const(NoneType, None)
DEBUG 2022-02-14 16:38:19,075 on stmt: $310build_slice.4 = global(slice: <class 'slice'>)
DEBUG 2022-02-14 16:38:19,075 on stmt: $310build_slice.5 = call $310build_slice.4($const306.2, $const308.3, func=$310build_slice.4, args=(Var($const306.2, _loop_hafnian_subroutines.py:182), Var($const308.3, _loop_hafnian_subroutines.py:182)), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:19,075 on stmt: $312build_tuple.6 = build_tuple(items=[Var(count, _loop_hafnian_subroutines.py:161), Var($310build_slice.5, _loop_hafnian_subroutines.py:182)])
DEBUG 2022-02-14 16:38:19,075 find_def var='count' stmt=$312build_tuple.6 = build_tuple(items=[Var(count, _loop_hafnian_subroutines.py:161), Var($310build_slice.5, _loop_hafnian_subroutines.py:182)])
DEBUG 2022-02-14 16:38:19,075 find_def_from_top label 302
DEBUG 2022-02-14 16:38:19,075 idom 60 from label 302
DEBUG 2022-02-14 16:38:19,075 find_def_from_bottom label 60
DEBUG 2022-02-14 16:38:19,075 replaced with: $312build_tuple.6 = build_tuple(items=[Var(count.2, _loop_hafnian_subroutines.py:174), Var($310build_slice.5, _loop_hafnian_subroutines.py:182)])
DEBUG 2022-02-14 16:38:19,075 on stmt: $314binary_subscr.7 = getitem(value=comb, index=$312build_tuple.6, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:19,075 on stmt: $316return_value.8 = cast(value=$314binary_subscr.7)
DEBUG 2022-02-14 16:38:19,075 on stmt: return $316return_value.8
DEBUG 2022-02-14 16:38:19,538 bytecode dump:
>          0	NOP(arg=None, lineno=254)
           2	LOAD_GLOBAL(arg=0, lineno=254)
           4	LOAD_ATTR(arg=1, lineno=254)
           6	LOAD_ATTR(arg=2, lineno=254)
           8	LOAD_METHOD(arg=3, lineno=254)
          10	CALL_METHOD(arg=0, lineno=254)
          12	POP_TOP(arg=None, lineno=254)
          14	LOAD_DEREF(arg=0, lineno=255)
          16	STORE_FAST(arg=1, lineno=255)
          18	LOAD_GLOBAL(arg=0, lineno=256)
          20	LOAD_ATTR(arg=1, lineno=256)
          22	LOAD_ATTR(arg=2, lineno=256)
          24	LOAD_METHOD(arg=4, lineno=256)
          26	LOAD_GLOBAL(arg=5, lineno=256)
          28	LOAD_FAST(arg=0, lineno=256)
          30	CALL_FUNCTION(arg=1, lineno=256)
          32	CALL_METHOD(arg=1, lineno=256)
          34	GET_ITER(arg=None, lineno=256)
>         36	FOR_ITER(arg=16, lineno=256)
          38	STORE_FAST(arg=2, lineno=256)
          40	LOAD_FAST(arg=1, lineno=257)
          42	LOAD_FAST(arg=0, lineno=257)
          44	LOAD_FAST(arg=2, lineno=257)
          46	BINARY_SUBSCR(arg=None, lineno=257)
          48	INPLACE_ADD(arg=None, lineno=257)
          50	STORE_FAST(arg=1, lineno=257)
          52	JUMP_ABSOLUTE(arg=36, lineno=257)
>         54	LOAD_FAST(arg=1, lineno=258)
          56	RETURN_VALUE(arg=None, lineno=258)
DEBUG 2022-02-14 16:38:19,538 pending: deque([State(pc_initial=0 nstack_initial=0)])
DEBUG 2022-02-14 16:38:19,538 stack: []
DEBUG 2022-02-14 16:38:19,538 dispatch pc=0, inst=NOP(arg=None, lineno=254)
DEBUG 2022-02-14 16:38:19,538 stack []
DEBUG 2022-02-14 16:38:19,538 dispatch pc=2, inst=LOAD_GLOBAL(arg=0, lineno=254)
DEBUG 2022-02-14 16:38:19,538 stack []
DEBUG 2022-02-14 16:38:19,538 dispatch pc=4, inst=LOAD_ATTR(arg=1, lineno=254)
DEBUG 2022-02-14 16:38:19,539 stack ['$2load_global.0']
DEBUG 2022-02-14 16:38:19,539 dispatch pc=6, inst=LOAD_ATTR(arg=2, lineno=254)
DEBUG 2022-02-14 16:38:19,539 stack ['$4load_attr.1']
DEBUG 2022-02-14 16:38:19,539 dispatch pc=8, inst=LOAD_METHOD(arg=3, lineno=254)
DEBUG 2022-02-14 16:38:19,539 stack ['$6load_attr.2']
DEBUG 2022-02-14 16:38:19,539 dispatch pc=10, inst=CALL_METHOD(arg=0, lineno=254)
DEBUG 2022-02-14 16:38:19,539 stack ['$8load_method.3']
DEBUG 2022-02-14 16:38:19,539 dispatch pc=12, inst=POP_TOP(arg=None, lineno=254)
DEBUG 2022-02-14 16:38:19,539 stack ['$10call_method.4']
DEBUG 2022-02-14 16:38:19,539 dispatch pc=14, inst=LOAD_DEREF(arg=0, lineno=255)
DEBUG 2022-02-14 16:38:19,539 stack []
DEBUG 2022-02-14 16:38:19,539 dispatch pc=16, inst=STORE_FAST(arg=1, lineno=255)
DEBUG 2022-02-14 16:38:19,539 stack ['$14load_deref.5']
DEBUG 2022-02-14 16:38:19,539 dispatch pc=18, inst=LOAD_GLOBAL(arg=0, lineno=256)
DEBUG 2022-02-14 16:38:19,539 stack []
DEBUG 2022-02-14 16:38:19,539 dispatch pc=20, inst=LOAD_ATTR(arg=1, lineno=256)
DEBUG 2022-02-14 16:38:19,539 stack ['$18load_global.6']
DEBUG 2022-02-14 16:38:19,539 dispatch pc=22, inst=LOAD_ATTR(arg=2, lineno=256)
DEBUG 2022-02-14 16:38:19,539 stack ['$20load_attr.7']
DEBUG 2022-02-14 16:38:19,539 dispatch pc=24, inst=LOAD_METHOD(arg=4, lineno=256)
DEBUG 2022-02-14 16:38:19,539 stack ['$22load_attr.8']
DEBUG 2022-02-14 16:38:19,539 dispatch pc=26, inst=LOAD_GLOBAL(arg=5, lineno=256)
DEBUG 2022-02-14 16:38:19,539 stack ['$24load_method.9']
DEBUG 2022-02-14 16:38:19,539 dispatch pc=28, inst=LOAD_FAST(arg=0, lineno=256)
DEBUG 2022-02-14 16:38:19,540 stack ['$24load_method.9', '$26load_global.10']
DEBUG 2022-02-14 16:38:19,540 dispatch pc=30, inst=CALL_FUNCTION(arg=1, lineno=256)
DEBUG 2022-02-14 16:38:19,540 stack ['$24load_method.9', '$26load_global.10', '$in_arr28.11']
DEBUG 2022-02-14 16:38:19,540 dispatch pc=32, inst=CALL_METHOD(arg=1, lineno=256)
DEBUG 2022-02-14 16:38:19,540 stack ['$24load_method.9', '$30call_function.12']
DEBUG 2022-02-14 16:38:19,540 dispatch pc=34, inst=GET_ITER(arg=None, lineno=256)
DEBUG 2022-02-14 16:38:19,540 stack ['$32call_method.13']
DEBUG 2022-02-14 16:38:19,540 end state. edges=[Edge(pc=36, stack=('$34get_iter.14',), blockstack=(), npush=0)]
DEBUG 2022-02-14 16:38:19,540 pending: deque([State(pc_initial=36 nstack_initial=1)])
DEBUG 2022-02-14 16:38:19,540 stack: ['$phi36.0']
DEBUG 2022-02-14 16:38:19,540 dispatch pc=36, inst=FOR_ITER(arg=16, lineno=256)
DEBUG 2022-02-14 16:38:19,540 stack ['$phi36.0']
DEBUG 2022-02-14 16:38:19,540 end state. edges=[Edge(pc=54, stack=(), blockstack=(), npush=0), Edge(pc=38, stack=('$phi36.0', '$36for_iter.2'), blockstack=(), npush=0)]
DEBUG 2022-02-14 16:38:19,540 pending: deque([State(pc_initial=54 nstack_initial=0), State(pc_initial=38 nstack_initial=2)])
DEBUG 2022-02-14 16:38:19,540 stack: []
DEBUG 2022-02-14 16:38:19,540 dispatch pc=54, inst=LOAD_FAST(arg=1, lineno=258)
DEBUG 2022-02-14 16:38:19,540 stack []
DEBUG 2022-02-14 16:38:19,540 dispatch pc=56, inst=RETURN_VALUE(arg=None, lineno=258)
DEBUG 2022-02-14 16:38:19,540 stack ['$val54.0']
DEBUG 2022-02-14 16:38:19,540 end state. edges=[]
DEBUG 2022-02-14 16:38:19,540 pending: deque([State(pc_initial=38 nstack_initial=2)])
DEBUG 2022-02-14 16:38:19,540 stack: ['$phi38.0', '$phi38.1']
DEBUG 2022-02-14 16:38:19,540 dispatch pc=38, inst=STORE_FAST(arg=2, lineno=256)
DEBUG 2022-02-14 16:38:19,540 stack ['$phi38.0', '$phi38.1']
DEBUG 2022-02-14 16:38:19,541 dispatch pc=40, inst=LOAD_FAST(arg=1, lineno=257)
DEBUG 2022-02-14 16:38:19,541 stack ['$phi38.0']
DEBUG 2022-02-14 16:38:19,541 dispatch pc=42, inst=LOAD_FAST(arg=0, lineno=257)
DEBUG 2022-02-14 16:38:19,541 stack ['$phi38.0', '$val40.2']
DEBUG 2022-02-14 16:38:19,541 dispatch pc=44, inst=LOAD_FAST(arg=2, lineno=257)
DEBUG 2022-02-14 16:38:19,541 stack ['$phi38.0', '$val40.2', '$in_arr42.3']
DEBUG 2022-02-14 16:38:19,541 dispatch pc=46, inst=BINARY_SUBSCR(arg=None, lineno=257)
DEBUG 2022-02-14 16:38:19,541 stack ['$phi38.0', '$val40.2', '$in_arr42.3', '$i44.4']
DEBUG 2022-02-14 16:38:19,541 dispatch pc=48, inst=INPLACE_ADD(arg=None, lineno=257)
DEBUG 2022-02-14 16:38:19,541 stack ['$phi38.0', '$val40.2', '$46binary_subscr.5']
DEBUG 2022-02-14 16:38:19,541 dispatch pc=50, inst=STORE_FAST(arg=1, lineno=257)
DEBUG 2022-02-14 16:38:19,541 stack ['$phi38.0', '$48inplace_add.6']
DEBUG 2022-02-14 16:38:19,541 dispatch pc=52, inst=JUMP_ABSOLUTE(arg=36, lineno=257)
DEBUG 2022-02-14 16:38:19,541 stack ['$phi38.0']
DEBUG 2022-02-14 16:38:19,541 end state. edges=[Edge(pc=36, stack=('$phi38.0',), blockstack=(), npush=0)]
DEBUG 2022-02-14 16:38:19,541 pending: deque([State(pc_initial=36 nstack_initial=1)])
DEBUG 2022-02-14 16:38:19,541 -------------------------Prune PHIs-------------------------
DEBUG 2022-02-14 16:38:19,541 Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=36 nstack_initial=1): {'$phi36.0'},
             State(pc_initial=38 nstack_initial=2): {'$phi38.1'},
             State(pc_initial=54 nstack_initial=0): set()})
DEBUG 2022-02-14 16:38:19,541 defmap: {'$phi36.0': State(pc_initial=0 nstack_initial=0),
 '$phi38.1': State(pc_initial=36 nstack_initial=1)}
DEBUG 2022-02-14 16:38:19,541 phismap: defaultdict(<class 'set'>,
            {'$phi36.0': {('$34get_iter.14',
                           State(pc_initial=0 nstack_initial=0)),
                          ('$phi38.0', State(pc_initial=38 nstack_initial=2))},
             '$phi38.0': {('$phi36.0', State(pc_initial=36 nstack_initial=1))},
             '$phi38.1': {('$36for_iter.2',
                           State(pc_initial=36 nstack_initial=1))}})
DEBUG 2022-02-14 16:38:19,542 changing phismap: defaultdict(<class 'set'>,
            {'$phi36.0': {('$34get_iter.14',
                           State(pc_initial=0 nstack_initial=0)),
                          ('$phi36.0', State(pc_initial=36 nstack_initial=1))},
             '$phi38.0': {('$34get_iter.14',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi38.1': {('$36for_iter.2',
                           State(pc_initial=36 nstack_initial=1))}})
DEBUG 2022-02-14 16:38:19,542 changing phismap: defaultdict(<class 'set'>,
            {'$phi36.0': {('$34get_iter.14',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi38.0': {('$34get_iter.14',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi38.1': {('$36for_iter.2',
                           State(pc_initial=36 nstack_initial=1))}})
DEBUG 2022-02-14 16:38:19,542 changing phismap: defaultdict(<class 'set'>,
            {'$phi36.0': {('$34get_iter.14',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi38.0': {('$34get_iter.14',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi38.1': {('$36for_iter.2',
                           State(pc_initial=36 nstack_initial=1))}})
DEBUG 2022-02-14 16:38:19,542 keep phismap: {'$phi36.0': {('$34get_iter.14', State(pc_initial=0 nstack_initial=0))},
 '$phi38.1': {('$36for_iter.2', State(pc_initial=36 nstack_initial=1))}}
DEBUG 2022-02-14 16:38:19,542 new_out: defaultdict(<class 'dict'>,
            {State(pc_initial=0 nstack_initial=0): {'$phi36.0': '$34get_iter.14'},
             State(pc_initial=36 nstack_initial=1): {'$phi38.1': '$36for_iter.2'}})
DEBUG 2022-02-14 16:38:19,543 ----------------------DONE Prune PHIs-----------------------
DEBUG 2022-02-14 16:38:19,543 block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$2load_global.0'}), (4, {'item': '$2load_global.0', 'res': '$4load_attr.1'}), (6, {'item': '$4load_attr.1', 'res': '$6load_attr.2'}), (8, {'item': '$6load_attr.2', 'res': '$8load_method.3'}), (10, {'func': '$8load_method.3', 'args': [], 'res': '$10call_method.4'}), (14, {'res': '$14load_deref.5'}), (16, {'value': '$14load_deref.5'}), (18, {'res': '$18load_global.6'}), (20, {'item': '$18load_global.6', 'res': '$20load_attr.7'}), (22, {'item': '$20load_attr.7', 'res': '$22load_attr.8'}), (24, {'item': '$22load_attr.8', 'res': '$24load_method.9'}), (26, {'res': '$26load_global.10'}), (28, {'res': '$in_arr28.11'}), (30, {'func': '$26load_global.10', 'args': ['$in_arr28.11'], 'res': '$30call_function.12'}), (32, {'func': '$24load_method.9', 'args': ['$30call_function.12'], 'res': '$32call_method.13'}), (34, {'value': '$32call_method.13', 'res': '$34get_iter.14'})), outgoing_phis={'$phi36.0': '$34get_iter.14'}, blockstack=(), active_try_block=None, outgoing_edgepushed={36: ('$34get_iter.14',)})
DEBUG 2022-02-14 16:38:19,543 block_infos State(pc_initial=36 nstack_initial=1):
AdaptBlockInfo(insts=((36, {'iterator': '$phi36.0', 'pair': '$36for_iter.1', 'indval': '$36for_iter.2', 'pred': '$36for_iter.3'}),), outgoing_phis={'$phi38.1': '$36for_iter.2'}, blockstack=(), active_try_block=None, outgoing_edgepushed={54: (), 38: ('$phi36.0', '$36for_iter.2')})
DEBUG 2022-02-14 16:38:19,543 block_infos State(pc_initial=38 nstack_initial=2):
AdaptBlockInfo(insts=((38, {'value': '$phi38.1'}), (40, {'res': '$val40.2'}), (42, {'res': '$in_arr42.3'}), (44, {'res': '$i44.4'}), (46, {'index': '$i44.4', 'target': '$in_arr42.3', 'res': '$46binary_subscr.5'}), (48, {'lhs': '$val40.2', 'rhs': '$46binary_subscr.5', 'res': '$48inplace_add.6'}), (50, {'value': '$48inplace_add.6'}), (52, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={36: ('$phi38.0',)})
DEBUG 2022-02-14 16:38:19,543 block_infos State(pc_initial=54 nstack_initial=0):
AdaptBlockInfo(insts=((54, {'res': '$val54.0'}), (56, {'retval': '$val54.0', 'castval': '$56return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG 2022-02-14 16:38:19,546 label 0:
    in_arr = arg(0, name=in_arr)             ['in_arr']
    $2load_global.0 = global(numba: <module 'numba' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numba/__init__.py'>) ['$2load_global.0']
    $4load_attr.1 = getattr(value=$2load_global.0, attr=parfors) ['$2load_global.0', '$4load_attr.1']
    $6load_attr.2 = getattr(value=$4load_attr.1, attr=parfor) ['$4load_attr.1', '$6load_attr.2']
    $8load_method.3 = getattr(value=$6load_attr.2, attr=init_prange) ['$6load_attr.2', '$8load_method.3']
    $10call_method.4 = call $8load_method.3(func=$8load_method.3, args=[], kws=(), vararg=None, target=None) ['$10call_method.4', '$8load_method.3']
    val = freevar(zero: 0)                   ['val']
    $18load_global.6 = global(numba: <module 'numba' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numba/__init__.py'>) ['$18load_global.6']
    $20load_attr.7 = getattr(value=$18load_global.6, attr=parfors) ['$18load_global.6', '$20load_attr.7']
    $22load_attr.8 = getattr(value=$20load_attr.7, attr=parfor) ['$20load_attr.7', '$22load_attr.8']
    $24load_method.9 = getattr(value=$22load_attr.8, attr=internal_prange) ['$22load_attr.8', '$24load_method.9']
    $26load_global.10 = global(len: <built-in function len>) ['$26load_global.10']
    $30call_function.12 = call $26load_global.10(in_arr, func=$26load_global.10, args=[Var(in_arr, parfor.py:254)], kws=(), vararg=None, target=None) ['$26load_global.10', '$30call_function.12', 'in_arr']
    $32call_method.13 = call $24load_method.9($30call_function.12, func=$24load_method.9, args=[Var($30call_function.12, parfor.py:256)], kws=(), vararg=None, target=None) ['$24load_method.9', '$30call_function.12', '$32call_method.13']
    $34get_iter.14 = getiter(value=$32call_method.13) ['$32call_method.13', '$34get_iter.14']
    $phi36.0 = $34get_iter.14                ['$34get_iter.14', '$phi36.0']
    jump 36                                  []
label 36:
    $36for_iter.1 = iternext(value=$phi36.0) ['$36for_iter.1', '$phi36.0']
    $36for_iter.2 = pair_first(value=$36for_iter.1) ['$36for_iter.1', '$36for_iter.2']
    $36for_iter.3 = pair_second(value=$36for_iter.1) ['$36for_iter.1', '$36for_iter.3']
    $phi38.1 = $36for_iter.2                 ['$36for_iter.2', '$phi38.1']
    branch $36for_iter.3, 38, 54             ['$36for_iter.3']
label 38:
    i = $phi38.1                             ['$phi38.1', 'i']
    $46binary_subscr.5 = getitem(value=in_arr, index=i, fn=<built-in function getitem>) ['$46binary_subscr.5', 'i', 'in_arr']
    $48inplace_add.6 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=val, rhs=$46binary_subscr.5, static_lhs=Undefined, static_rhs=Undefined) ['$46binary_subscr.5', '$48inplace_add.6', 'val']
    val = $48inplace_add.6                   ['$48inplace_add.6', 'val']
    jump 36                                  []
label 54:
    $56return_value.1 = cast(value=val)      ['$56return_value.1', 'val']
    return $56return_value.1                 ['$56return_value.1']

DEBUG 2022-02-14 16:38:19,552 bytecode dump:
>          0	NOP(arg=None, lineno=254)
           2	LOAD_GLOBAL(arg=0, lineno=254)
           4	LOAD_ATTR(arg=1, lineno=254)
           6	LOAD_ATTR(arg=2, lineno=254)
           8	LOAD_METHOD(arg=3, lineno=254)
          10	CALL_METHOD(arg=0, lineno=254)
          12	POP_TOP(arg=None, lineno=254)
          14	LOAD_DEREF(arg=0, lineno=255)
          16	STORE_FAST(arg=1, lineno=255)
          18	LOAD_GLOBAL(arg=0, lineno=256)
          20	LOAD_ATTR(arg=1, lineno=256)
          22	LOAD_ATTR(arg=2, lineno=256)
          24	LOAD_METHOD(arg=4, lineno=256)
          26	LOAD_GLOBAL(arg=5, lineno=256)
          28	LOAD_FAST(arg=0, lineno=256)
          30	CALL_FUNCTION(arg=1, lineno=256)
          32	CALL_METHOD(arg=1, lineno=256)
          34	GET_ITER(arg=None, lineno=256)
>         36	FOR_ITER(arg=16, lineno=256)
          38	STORE_FAST(arg=2, lineno=256)
          40	LOAD_FAST(arg=1, lineno=257)
          42	LOAD_FAST(arg=0, lineno=257)
          44	LOAD_FAST(arg=2, lineno=257)
          46	BINARY_SUBSCR(arg=None, lineno=257)
          48	INPLACE_ADD(arg=None, lineno=257)
          50	STORE_FAST(arg=1, lineno=257)
          52	JUMP_ABSOLUTE(arg=36, lineno=257)
>         54	LOAD_FAST(arg=1, lineno=258)
          56	RETURN_VALUE(arg=None, lineno=258)
DEBUG 2022-02-14 16:38:19,552 pending: deque([State(pc_initial=0 nstack_initial=0)])
DEBUG 2022-02-14 16:38:19,552 stack: []
DEBUG 2022-02-14 16:38:19,553 dispatch pc=0, inst=NOP(arg=None, lineno=254)
DEBUG 2022-02-14 16:38:19,553 stack []
DEBUG 2022-02-14 16:38:19,553 dispatch pc=2, inst=LOAD_GLOBAL(arg=0, lineno=254)
DEBUG 2022-02-14 16:38:19,553 stack []
DEBUG 2022-02-14 16:38:19,553 dispatch pc=4, inst=LOAD_ATTR(arg=1, lineno=254)
DEBUG 2022-02-14 16:38:19,553 stack ['$2load_global.0']
DEBUG 2022-02-14 16:38:19,553 dispatch pc=6, inst=LOAD_ATTR(arg=2, lineno=254)
DEBUG 2022-02-14 16:38:19,553 stack ['$4load_attr.1']
DEBUG 2022-02-14 16:38:19,553 dispatch pc=8, inst=LOAD_METHOD(arg=3, lineno=254)
DEBUG 2022-02-14 16:38:19,553 stack ['$6load_attr.2']
DEBUG 2022-02-14 16:38:19,553 dispatch pc=10, inst=CALL_METHOD(arg=0, lineno=254)
DEBUG 2022-02-14 16:38:19,553 stack ['$8load_method.3']
DEBUG 2022-02-14 16:38:19,553 dispatch pc=12, inst=POP_TOP(arg=None, lineno=254)
DEBUG 2022-02-14 16:38:19,553 stack ['$10call_method.4']
DEBUG 2022-02-14 16:38:19,553 dispatch pc=14, inst=LOAD_DEREF(arg=0, lineno=255)
DEBUG 2022-02-14 16:38:19,553 stack []
DEBUG 2022-02-14 16:38:19,553 dispatch pc=16, inst=STORE_FAST(arg=1, lineno=255)
DEBUG 2022-02-14 16:38:19,553 stack ['$14load_deref.5']
DEBUG 2022-02-14 16:38:19,553 dispatch pc=18, inst=LOAD_GLOBAL(arg=0, lineno=256)
DEBUG 2022-02-14 16:38:19,553 stack []
DEBUG 2022-02-14 16:38:19,554 dispatch pc=20, inst=LOAD_ATTR(arg=1, lineno=256)
DEBUG 2022-02-14 16:38:19,554 stack ['$18load_global.6']
DEBUG 2022-02-14 16:38:19,554 dispatch pc=22, inst=LOAD_ATTR(arg=2, lineno=256)
DEBUG 2022-02-14 16:38:19,554 stack ['$20load_attr.7']
DEBUG 2022-02-14 16:38:19,554 dispatch pc=24, inst=LOAD_METHOD(arg=4, lineno=256)
DEBUG 2022-02-14 16:38:19,554 stack ['$22load_attr.8']
DEBUG 2022-02-14 16:38:19,554 dispatch pc=26, inst=LOAD_GLOBAL(arg=5, lineno=256)
DEBUG 2022-02-14 16:38:19,554 stack ['$24load_method.9']
DEBUG 2022-02-14 16:38:19,554 dispatch pc=28, inst=LOAD_FAST(arg=0, lineno=256)
DEBUG 2022-02-14 16:38:19,554 stack ['$24load_method.9', '$26load_global.10']
DEBUG 2022-02-14 16:38:19,554 dispatch pc=30, inst=CALL_FUNCTION(arg=1, lineno=256)
DEBUG 2022-02-14 16:38:19,554 stack ['$24load_method.9', '$26load_global.10', '$in_arr28.11']
DEBUG 2022-02-14 16:38:19,554 dispatch pc=32, inst=CALL_METHOD(arg=1, lineno=256)
DEBUG 2022-02-14 16:38:19,554 stack ['$24load_method.9', '$30call_function.12']
DEBUG 2022-02-14 16:38:19,554 dispatch pc=34, inst=GET_ITER(arg=None, lineno=256)
DEBUG 2022-02-14 16:38:19,554 stack ['$32call_method.13']
DEBUG 2022-02-14 16:38:19,554 end state. edges=[Edge(pc=36, stack=('$34get_iter.14',), blockstack=(), npush=0)]
DEBUG 2022-02-14 16:38:19,554 pending: deque([State(pc_initial=36 nstack_initial=1)])
DEBUG 2022-02-14 16:38:19,554 stack: ['$phi36.0']
DEBUG 2022-02-14 16:38:19,554 dispatch pc=36, inst=FOR_ITER(arg=16, lineno=256)
DEBUG 2022-02-14 16:38:19,554 stack ['$phi36.0']
DEBUG 2022-02-14 16:38:19,554 end state. edges=[Edge(pc=54, stack=(), blockstack=(), npush=0), Edge(pc=38, stack=('$phi36.0', '$36for_iter.2'), blockstack=(), npush=0)]
DEBUG 2022-02-14 16:38:19,554 pending: deque([State(pc_initial=54 nstack_initial=0), State(pc_initial=38 nstack_initial=2)])
DEBUG 2022-02-14 16:38:19,554 stack: []
DEBUG 2022-02-14 16:38:19,555 dispatch pc=54, inst=LOAD_FAST(arg=1, lineno=258)
DEBUG 2022-02-14 16:38:19,555 stack []
DEBUG 2022-02-14 16:38:19,555 dispatch pc=56, inst=RETURN_VALUE(arg=None, lineno=258)
DEBUG 2022-02-14 16:38:19,555 stack ['$val54.0']
DEBUG 2022-02-14 16:38:19,555 end state. edges=[]
DEBUG 2022-02-14 16:38:19,555 pending: deque([State(pc_initial=38 nstack_initial=2)])
DEBUG 2022-02-14 16:38:19,555 stack: ['$phi38.0', '$phi38.1']
DEBUG 2022-02-14 16:38:19,555 dispatch pc=38, inst=STORE_FAST(arg=2, lineno=256)
DEBUG 2022-02-14 16:38:19,555 stack ['$phi38.0', '$phi38.1']
DEBUG 2022-02-14 16:38:19,555 dispatch pc=40, inst=LOAD_FAST(arg=1, lineno=257)
DEBUG 2022-02-14 16:38:19,555 stack ['$phi38.0']
DEBUG 2022-02-14 16:38:19,555 dispatch pc=42, inst=LOAD_FAST(arg=0, lineno=257)
DEBUG 2022-02-14 16:38:19,555 stack ['$phi38.0', '$val40.2']
DEBUG 2022-02-14 16:38:19,555 dispatch pc=44, inst=LOAD_FAST(arg=2, lineno=257)
DEBUG 2022-02-14 16:38:19,555 stack ['$phi38.0', '$val40.2', '$in_arr42.3']
DEBUG 2022-02-14 16:38:19,555 dispatch pc=46, inst=BINARY_SUBSCR(arg=None, lineno=257)
DEBUG 2022-02-14 16:38:19,555 stack ['$phi38.0', '$val40.2', '$in_arr42.3', '$i44.4']
DEBUG 2022-02-14 16:38:19,555 dispatch pc=48, inst=INPLACE_ADD(arg=None, lineno=257)
DEBUG 2022-02-14 16:38:19,555 stack ['$phi38.0', '$val40.2', '$46binary_subscr.5']
DEBUG 2022-02-14 16:38:19,555 dispatch pc=50, inst=STORE_FAST(arg=1, lineno=257)
DEBUG 2022-02-14 16:38:19,555 stack ['$phi38.0', '$48inplace_add.6']
DEBUG 2022-02-14 16:38:19,555 dispatch pc=52, inst=JUMP_ABSOLUTE(arg=36, lineno=257)
DEBUG 2022-02-14 16:38:19,555 stack ['$phi38.0']
DEBUG 2022-02-14 16:38:19,556 end state. edges=[Edge(pc=36, stack=('$phi38.0',), blockstack=(), npush=0)]
DEBUG 2022-02-14 16:38:19,556 pending: deque([State(pc_initial=36 nstack_initial=1)])
DEBUG 2022-02-14 16:38:19,556 -------------------------Prune PHIs-------------------------
DEBUG 2022-02-14 16:38:19,556 Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=36 nstack_initial=1): {'$phi36.0'},
             State(pc_initial=38 nstack_initial=2): {'$phi38.1'},
             State(pc_initial=54 nstack_initial=0): set()})
DEBUG 2022-02-14 16:38:19,556 defmap: {'$phi36.0': State(pc_initial=0 nstack_initial=0),
 '$phi38.1': State(pc_initial=36 nstack_initial=1)}
DEBUG 2022-02-14 16:38:19,556 phismap: defaultdict(<class 'set'>,
            {'$phi36.0': {('$34get_iter.14',
                           State(pc_initial=0 nstack_initial=0)),
                          ('$phi38.0', State(pc_initial=38 nstack_initial=2))},
             '$phi38.0': {('$phi36.0', State(pc_initial=36 nstack_initial=1))},
             '$phi38.1': {('$36for_iter.2',
                           State(pc_initial=36 nstack_initial=1))}})
DEBUG 2022-02-14 16:38:19,556 changing phismap: defaultdict(<class 'set'>,
            {'$phi36.0': {('$34get_iter.14',
                           State(pc_initial=0 nstack_initial=0)),
                          ('$phi36.0', State(pc_initial=36 nstack_initial=1))},
             '$phi38.0': {('$34get_iter.14',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi38.1': {('$36for_iter.2',
                           State(pc_initial=36 nstack_initial=1))}})
DEBUG 2022-02-14 16:38:19,556 changing phismap: defaultdict(<class 'set'>,
            {'$phi36.0': {('$34get_iter.14',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi38.0': {('$34get_iter.14',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi38.1': {('$36for_iter.2',
                           State(pc_initial=36 nstack_initial=1))}})
DEBUG 2022-02-14 16:38:19,557 changing phismap: defaultdict(<class 'set'>,
            {'$phi36.0': {('$34get_iter.14',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi38.0': {('$34get_iter.14',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi38.1': {('$36for_iter.2',
                           State(pc_initial=36 nstack_initial=1))}})
DEBUG 2022-02-14 16:38:19,557 keep phismap: {'$phi36.0': {('$34get_iter.14', State(pc_initial=0 nstack_initial=0))},
 '$phi38.1': {('$36for_iter.2', State(pc_initial=36 nstack_initial=1))}}
DEBUG 2022-02-14 16:38:19,557 new_out: defaultdict(<class 'dict'>,
            {State(pc_initial=0 nstack_initial=0): {'$phi36.0': '$34get_iter.14'},
             State(pc_initial=36 nstack_initial=1): {'$phi38.1': '$36for_iter.2'}})
DEBUG 2022-02-14 16:38:19,557 ----------------------DONE Prune PHIs-----------------------
DEBUG 2022-02-14 16:38:19,557 block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$2load_global.0'}), (4, {'item': '$2load_global.0', 'res': '$4load_attr.1'}), (6, {'item': '$4load_attr.1', 'res': '$6load_attr.2'}), (8, {'item': '$6load_attr.2', 'res': '$8load_method.3'}), (10, {'func': '$8load_method.3', 'args': [], 'res': '$10call_method.4'}), (14, {'res': '$14load_deref.5'}), (16, {'value': '$14load_deref.5'}), (18, {'res': '$18load_global.6'}), (20, {'item': '$18load_global.6', 'res': '$20load_attr.7'}), (22, {'item': '$20load_attr.7', 'res': '$22load_attr.8'}), (24, {'item': '$22load_attr.8', 'res': '$24load_method.9'}), (26, {'res': '$26load_global.10'}), (28, {'res': '$in_arr28.11'}), (30, {'func': '$26load_global.10', 'args': ['$in_arr28.11'], 'res': '$30call_function.12'}), (32, {'func': '$24load_method.9', 'args': ['$30call_function.12'], 'res': '$32call_method.13'}), (34, {'value': '$32call_method.13', 'res': '$34get_iter.14'})), outgoing_phis={'$phi36.0': '$34get_iter.14'}, blockstack=(), active_try_block=None, outgoing_edgepushed={36: ('$34get_iter.14',)})
DEBUG 2022-02-14 16:38:19,557 block_infos State(pc_initial=36 nstack_initial=1):
AdaptBlockInfo(insts=((36, {'iterator': '$phi36.0', 'pair': '$36for_iter.1', 'indval': '$36for_iter.2', 'pred': '$36for_iter.3'}),), outgoing_phis={'$phi38.1': '$36for_iter.2'}, blockstack=(), active_try_block=None, outgoing_edgepushed={54: (), 38: ('$phi36.0', '$36for_iter.2')})
DEBUG 2022-02-14 16:38:19,557 block_infos State(pc_initial=38 nstack_initial=2):
AdaptBlockInfo(insts=((38, {'value': '$phi38.1'}), (40, {'res': '$val40.2'}), (42, {'res': '$in_arr42.3'}), (44, {'res': '$i44.4'}), (46, {'index': '$i44.4', 'target': '$in_arr42.3', 'res': '$46binary_subscr.5'}), (48, {'lhs': '$val40.2', 'rhs': '$46binary_subscr.5', 'res': '$48inplace_add.6'}), (50, {'value': '$48inplace_add.6'}), (52, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={36: ('$phi38.0',)})
DEBUG 2022-02-14 16:38:19,557 block_infos State(pc_initial=54 nstack_initial=0):
AdaptBlockInfo(insts=((54, {'res': '$val54.0'}), (56, {'retval': '$val54.0', 'castval': '$56return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG 2022-02-14 16:38:19,558 label 0:
    in_arr = arg(0, name=in_arr)             ['in_arr']
    $2load_global.0 = global(numba: <module 'numba' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numba/__init__.py'>) ['$2load_global.0']
    $4load_attr.1 = getattr(value=$2load_global.0, attr=parfors) ['$2load_global.0', '$4load_attr.1']
    $6load_attr.2 = getattr(value=$4load_attr.1, attr=parfor) ['$4load_attr.1', '$6load_attr.2']
    $8load_method.3 = getattr(value=$6load_attr.2, attr=init_prange) ['$6load_attr.2', '$8load_method.3']
    $10call_method.4 = call $8load_method.3(func=$8load_method.3, args=[], kws=(), vararg=None, target=None) ['$10call_method.4', '$8load_method.3']
    val = freevar(zero: 0)                   ['val']
    $18load_global.6 = global(numba: <module 'numba' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numba/__init__.py'>) ['$18load_global.6']
    $20load_attr.7 = getattr(value=$18load_global.6, attr=parfors) ['$18load_global.6', '$20load_attr.7']
    $22load_attr.8 = getattr(value=$20load_attr.7, attr=parfor) ['$20load_attr.7', '$22load_attr.8']
    $24load_method.9 = getattr(value=$22load_attr.8, attr=internal_prange) ['$22load_attr.8', '$24load_method.9']
    $26load_global.10 = global(len: <built-in function len>) ['$26load_global.10']
    $30call_function.12 = call $26load_global.10(in_arr, func=$26load_global.10, args=[Var(in_arr, parfor.py:254)], kws=(), vararg=None, target=None) ['$26load_global.10', '$30call_function.12', 'in_arr']
    $32call_method.13 = call $24load_method.9($30call_function.12, func=$24load_method.9, args=[Var($30call_function.12, parfor.py:256)], kws=(), vararg=None, target=None) ['$24load_method.9', '$30call_function.12', '$32call_method.13']
    $34get_iter.14 = getiter(value=$32call_method.13) ['$32call_method.13', '$34get_iter.14']
    $phi36.0 = $34get_iter.14                ['$34get_iter.14', '$phi36.0']
    jump 36                                  []
label 36:
    $36for_iter.1 = iternext(value=$phi36.0) ['$36for_iter.1', '$phi36.0']
    $36for_iter.2 = pair_first(value=$36for_iter.1) ['$36for_iter.1', '$36for_iter.2']
    $36for_iter.3 = pair_second(value=$36for_iter.1) ['$36for_iter.1', '$36for_iter.3']
    $phi38.1 = $36for_iter.2                 ['$36for_iter.2', '$phi38.1']
    branch $36for_iter.3, 38, 54             ['$36for_iter.3']
label 38:
    i = $phi38.1                             ['$phi38.1', 'i']
    $46binary_subscr.5 = getitem(value=in_arr, index=i, fn=<built-in function getitem>) ['$46binary_subscr.5', 'i', 'in_arr']
    $48inplace_add.6 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=val, rhs=$46binary_subscr.5, static_lhs=Undefined, static_rhs=Undefined) ['$46binary_subscr.5', '$48inplace_add.6', 'val']
    val = $48inplace_add.6                   ['$48inplace_add.6', 'val']
    jump 36                                  []
label 54:
    $56return_value.1 = cast(value=val)      ['$56return_value.1', 'val']
    return $56return_value.1                 ['$56return_value.1']

DEBUG 2022-02-14 16:38:19,564 bytecode dump:
>          0	NOP(arg=None, lineno=276)
           2	LOAD_GLOBAL(arg=0, lineno=276)
           4	LOAD_ATTR(arg=1, lineno=276)
           6	LOAD_ATTR(arg=2, lineno=276)
           8	LOAD_METHOD(arg=3, lineno=276)
          10	CALL_METHOD(arg=0, lineno=276)
          12	POP_TOP(arg=None, lineno=276)
          14	LOAD_DEREF(arg=0, lineno=277)
          16	STORE_FAST(arg=1, lineno=277)
          18	LOAD_GLOBAL(arg=0, lineno=278)
          20	LOAD_ATTR(arg=1, lineno=278)
          22	LOAD_ATTR(arg=2, lineno=278)
          24	LOAD_METHOD(arg=4, lineno=278)
          26	LOAD_GLOBAL(arg=5, lineno=278)
          28	LOAD_FAST(arg=0, lineno=278)
          30	CALL_FUNCTION(arg=1, lineno=278)
          32	CALL_METHOD(arg=1, lineno=278)
          34	GET_ITER(arg=None, lineno=278)
>         36	FOR_ITER(arg=16, lineno=278)
          38	STORE_FAST(arg=2, lineno=278)
          40	LOAD_FAST(arg=1, lineno=279)
          42	LOAD_FAST(arg=0, lineno=279)
          44	LOAD_FAST(arg=2, lineno=279)
          46	BINARY_SUBSCR(arg=None, lineno=279)
          48	INPLACE_MULTIPLY(arg=None, lineno=279)
          50	STORE_FAST(arg=1, lineno=279)
          52	JUMP_ABSOLUTE(arg=36, lineno=279)
>         54	LOAD_FAST(arg=1, lineno=280)
          56	RETURN_VALUE(arg=None, lineno=280)
DEBUG 2022-02-14 16:38:19,564 pending: deque([State(pc_initial=0 nstack_initial=0)])
DEBUG 2022-02-14 16:38:19,564 stack: []
DEBUG 2022-02-14 16:38:19,564 dispatch pc=0, inst=NOP(arg=None, lineno=276)
DEBUG 2022-02-14 16:38:19,564 stack []
DEBUG 2022-02-14 16:38:19,564 dispatch pc=2, inst=LOAD_GLOBAL(arg=0, lineno=276)
DEBUG 2022-02-14 16:38:19,564 stack []
DEBUG 2022-02-14 16:38:19,564 dispatch pc=4, inst=LOAD_ATTR(arg=1, lineno=276)
DEBUG 2022-02-14 16:38:19,564 stack ['$2load_global.0']
DEBUG 2022-02-14 16:38:19,564 dispatch pc=6, inst=LOAD_ATTR(arg=2, lineno=276)
DEBUG 2022-02-14 16:38:19,565 stack ['$4load_attr.1']
DEBUG 2022-02-14 16:38:19,565 dispatch pc=8, inst=LOAD_METHOD(arg=3, lineno=276)
DEBUG 2022-02-14 16:38:19,565 stack ['$6load_attr.2']
DEBUG 2022-02-14 16:38:19,565 dispatch pc=10, inst=CALL_METHOD(arg=0, lineno=276)
DEBUG 2022-02-14 16:38:19,565 stack ['$8load_method.3']
DEBUG 2022-02-14 16:38:19,565 dispatch pc=12, inst=POP_TOP(arg=None, lineno=276)
DEBUG 2022-02-14 16:38:19,565 stack ['$10call_method.4']
DEBUG 2022-02-14 16:38:19,565 dispatch pc=14, inst=LOAD_DEREF(arg=0, lineno=277)
DEBUG 2022-02-14 16:38:19,565 stack []
DEBUG 2022-02-14 16:38:19,565 dispatch pc=16, inst=STORE_FAST(arg=1, lineno=277)
DEBUG 2022-02-14 16:38:19,565 stack ['$14load_deref.5']
DEBUG 2022-02-14 16:38:19,565 dispatch pc=18, inst=LOAD_GLOBAL(arg=0, lineno=278)
DEBUG 2022-02-14 16:38:19,565 stack []
DEBUG 2022-02-14 16:38:19,565 dispatch pc=20, inst=LOAD_ATTR(arg=1, lineno=278)
DEBUG 2022-02-14 16:38:19,565 stack ['$18load_global.6']
DEBUG 2022-02-14 16:38:19,565 dispatch pc=22, inst=LOAD_ATTR(arg=2, lineno=278)
DEBUG 2022-02-14 16:38:19,565 stack ['$20load_attr.7']
DEBUG 2022-02-14 16:38:19,565 dispatch pc=24, inst=LOAD_METHOD(arg=4, lineno=278)
DEBUG 2022-02-14 16:38:19,565 stack ['$22load_attr.8']
DEBUG 2022-02-14 16:38:19,565 dispatch pc=26, inst=LOAD_GLOBAL(arg=5, lineno=278)
DEBUG 2022-02-14 16:38:19,565 stack ['$24load_method.9']
DEBUG 2022-02-14 16:38:19,565 dispatch pc=28, inst=LOAD_FAST(arg=0, lineno=278)
DEBUG 2022-02-14 16:38:19,565 stack ['$24load_method.9', '$26load_global.10']
DEBUG 2022-02-14 16:38:19,565 dispatch pc=30, inst=CALL_FUNCTION(arg=1, lineno=278)
DEBUG 2022-02-14 16:38:19,565 stack ['$24load_method.9', '$26load_global.10', '$in_arr28.11']
DEBUG 2022-02-14 16:38:19,565 dispatch pc=32, inst=CALL_METHOD(arg=1, lineno=278)
DEBUG 2022-02-14 16:38:19,566 stack ['$24load_method.9', '$30call_function.12']
DEBUG 2022-02-14 16:38:19,566 dispatch pc=34, inst=GET_ITER(arg=None, lineno=278)
DEBUG 2022-02-14 16:38:19,566 stack ['$32call_method.13']
DEBUG 2022-02-14 16:38:19,566 end state. edges=[Edge(pc=36, stack=('$34get_iter.14',), blockstack=(), npush=0)]
DEBUG 2022-02-14 16:38:19,566 pending: deque([State(pc_initial=36 nstack_initial=1)])
DEBUG 2022-02-14 16:38:19,566 stack: ['$phi36.0']
DEBUG 2022-02-14 16:38:19,566 dispatch pc=36, inst=FOR_ITER(arg=16, lineno=278)
DEBUG 2022-02-14 16:38:19,566 stack ['$phi36.0']
DEBUG 2022-02-14 16:38:19,566 end state. edges=[Edge(pc=54, stack=(), blockstack=(), npush=0), Edge(pc=38, stack=('$phi36.0', '$36for_iter.2'), blockstack=(), npush=0)]
DEBUG 2022-02-14 16:38:19,566 pending: deque([State(pc_initial=54 nstack_initial=0), State(pc_initial=38 nstack_initial=2)])
DEBUG 2022-02-14 16:38:19,566 stack: []
DEBUG 2022-02-14 16:38:19,566 dispatch pc=54, inst=LOAD_FAST(arg=1, lineno=280)
DEBUG 2022-02-14 16:38:19,566 stack []
DEBUG 2022-02-14 16:38:19,566 dispatch pc=56, inst=RETURN_VALUE(arg=None, lineno=280)
DEBUG 2022-02-14 16:38:19,566 stack ['$val54.0']
DEBUG 2022-02-14 16:38:19,566 end state. edges=[]
DEBUG 2022-02-14 16:38:19,566 pending: deque([State(pc_initial=38 nstack_initial=2)])
DEBUG 2022-02-14 16:38:19,566 stack: ['$phi38.0', '$phi38.1']
DEBUG 2022-02-14 16:38:19,566 dispatch pc=38, inst=STORE_FAST(arg=2, lineno=278)
DEBUG 2022-02-14 16:38:19,566 stack ['$phi38.0', '$phi38.1']
DEBUG 2022-02-14 16:38:19,566 dispatch pc=40, inst=LOAD_FAST(arg=1, lineno=279)
DEBUG 2022-02-14 16:38:19,566 stack ['$phi38.0']
DEBUG 2022-02-14 16:38:19,566 dispatch pc=42, inst=LOAD_FAST(arg=0, lineno=279)
DEBUG 2022-02-14 16:38:19,567 stack ['$phi38.0', '$val40.2']
DEBUG 2022-02-14 16:38:19,567 dispatch pc=44, inst=LOAD_FAST(arg=2, lineno=279)
DEBUG 2022-02-14 16:38:19,567 stack ['$phi38.0', '$val40.2', '$in_arr42.3']
DEBUG 2022-02-14 16:38:19,567 dispatch pc=46, inst=BINARY_SUBSCR(arg=None, lineno=279)
DEBUG 2022-02-14 16:38:19,567 stack ['$phi38.0', '$val40.2', '$in_arr42.3', '$i44.4']
DEBUG 2022-02-14 16:38:19,567 dispatch pc=48, inst=INPLACE_MULTIPLY(arg=None, lineno=279)
DEBUG 2022-02-14 16:38:19,567 stack ['$phi38.0', '$val40.2', '$46binary_subscr.5']
DEBUG 2022-02-14 16:38:19,567 dispatch pc=50, inst=STORE_FAST(arg=1, lineno=279)
DEBUG 2022-02-14 16:38:19,567 stack ['$phi38.0', '$48inplace_multiply.6']
DEBUG 2022-02-14 16:38:19,567 dispatch pc=52, inst=JUMP_ABSOLUTE(arg=36, lineno=279)
DEBUG 2022-02-14 16:38:19,567 stack ['$phi38.0']
DEBUG 2022-02-14 16:38:19,567 end state. edges=[Edge(pc=36, stack=('$phi38.0',), blockstack=(), npush=0)]
DEBUG 2022-02-14 16:38:19,567 pending: deque([State(pc_initial=36 nstack_initial=1)])
DEBUG 2022-02-14 16:38:19,567 -------------------------Prune PHIs-------------------------
DEBUG 2022-02-14 16:38:19,567 Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=36 nstack_initial=1): {'$phi36.0'},
             State(pc_initial=38 nstack_initial=2): {'$phi38.1'},
             State(pc_initial=54 nstack_initial=0): set()})
DEBUG 2022-02-14 16:38:19,567 defmap: {'$phi36.0': State(pc_initial=0 nstack_initial=0),
 '$phi38.1': State(pc_initial=36 nstack_initial=1)}
DEBUG 2022-02-14 16:38:19,567 phismap: defaultdict(<class 'set'>,
            {'$phi36.0': {('$34get_iter.14',
                           State(pc_initial=0 nstack_initial=0)),
                          ('$phi38.0', State(pc_initial=38 nstack_initial=2))},
             '$phi38.0': {('$phi36.0', State(pc_initial=36 nstack_initial=1))},
             '$phi38.1': {('$36for_iter.2',
                           State(pc_initial=36 nstack_initial=1))}})
DEBUG 2022-02-14 16:38:19,567 changing phismap: defaultdict(<class 'set'>,
            {'$phi36.0': {('$34get_iter.14',
                           State(pc_initial=0 nstack_initial=0)),
                          ('$phi36.0', State(pc_initial=36 nstack_initial=1))},
             '$phi38.0': {('$34get_iter.14',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi38.1': {('$36for_iter.2',
                           State(pc_initial=36 nstack_initial=1))}})
DEBUG 2022-02-14 16:38:19,568 changing phismap: defaultdict(<class 'set'>,
            {'$phi36.0': {('$34get_iter.14',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi38.0': {('$34get_iter.14',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi38.1': {('$36for_iter.2',
                           State(pc_initial=36 nstack_initial=1))}})
DEBUG 2022-02-14 16:38:19,568 changing phismap: defaultdict(<class 'set'>,
            {'$phi36.0': {('$34get_iter.14',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi38.0': {('$34get_iter.14',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi38.1': {('$36for_iter.2',
                           State(pc_initial=36 nstack_initial=1))}})
DEBUG 2022-02-14 16:38:19,568 keep phismap: {'$phi36.0': {('$34get_iter.14', State(pc_initial=0 nstack_initial=0))},
 '$phi38.1': {('$36for_iter.2', State(pc_initial=36 nstack_initial=1))}}
DEBUG 2022-02-14 16:38:19,568 new_out: defaultdict(<class 'dict'>,
            {State(pc_initial=0 nstack_initial=0): {'$phi36.0': '$34get_iter.14'},
             State(pc_initial=36 nstack_initial=1): {'$phi38.1': '$36for_iter.2'}})
DEBUG 2022-02-14 16:38:19,568 ----------------------DONE Prune PHIs-----------------------
DEBUG 2022-02-14 16:38:19,568 block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$2load_global.0'}), (4, {'item': '$2load_global.0', 'res': '$4load_attr.1'}), (6, {'item': '$4load_attr.1', 'res': '$6load_attr.2'}), (8, {'item': '$6load_attr.2', 'res': '$8load_method.3'}), (10, {'func': '$8load_method.3', 'args': [], 'res': '$10call_method.4'}), (14, {'res': '$14load_deref.5'}), (16, {'value': '$14load_deref.5'}), (18, {'res': '$18load_global.6'}), (20, {'item': '$18load_global.6', 'res': '$20load_attr.7'}), (22, {'item': '$20load_attr.7', 'res': '$22load_attr.8'}), (24, {'item': '$22load_attr.8', 'res': '$24load_method.9'}), (26, {'res': '$26load_global.10'}), (28, {'res': '$in_arr28.11'}), (30, {'func': '$26load_global.10', 'args': ['$in_arr28.11'], 'res': '$30call_function.12'}), (32, {'func': '$24load_method.9', 'args': ['$30call_function.12'], 'res': '$32call_method.13'}), (34, {'value': '$32call_method.13', 'res': '$34get_iter.14'})), outgoing_phis={'$phi36.0': '$34get_iter.14'}, blockstack=(), active_try_block=None, outgoing_edgepushed={36: ('$34get_iter.14',)})
DEBUG 2022-02-14 16:38:19,568 block_infos State(pc_initial=36 nstack_initial=1):
AdaptBlockInfo(insts=((36, {'iterator': '$phi36.0', 'pair': '$36for_iter.1', 'indval': '$36for_iter.2', 'pred': '$36for_iter.3'}),), outgoing_phis={'$phi38.1': '$36for_iter.2'}, blockstack=(), active_try_block=None, outgoing_edgepushed={54: (), 38: ('$phi36.0', '$36for_iter.2')})
DEBUG 2022-02-14 16:38:19,568 block_infos State(pc_initial=38 nstack_initial=2):
AdaptBlockInfo(insts=((38, {'value': '$phi38.1'}), (40, {'res': '$val40.2'}), (42, {'res': '$in_arr42.3'}), (44, {'res': '$i44.4'}), (46, {'index': '$i44.4', 'target': '$in_arr42.3', 'res': '$46binary_subscr.5'}), (48, {'lhs': '$val40.2', 'rhs': '$46binary_subscr.5', 'res': '$48inplace_multiply.6'}), (50, {'value': '$48inplace_multiply.6'}), (52, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={36: ('$phi38.0',)})
DEBUG 2022-02-14 16:38:19,569 block_infos State(pc_initial=54 nstack_initial=0):
AdaptBlockInfo(insts=((54, {'res': '$val54.0'}), (56, {'retval': '$val54.0', 'castval': '$56return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG 2022-02-14 16:38:19,569 label 0:
    in_arr = arg(0, name=in_arr)             ['in_arr']
    $2load_global.0 = global(numba: <module 'numba' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numba/__init__.py'>) ['$2load_global.0']
    $4load_attr.1 = getattr(value=$2load_global.0, attr=parfors) ['$2load_global.0', '$4load_attr.1']
    $6load_attr.2 = getattr(value=$4load_attr.1, attr=parfor) ['$4load_attr.1', '$6load_attr.2']
    $8load_method.3 = getattr(value=$6load_attr.2, attr=init_prange) ['$6load_attr.2', '$8load_method.3']
    $10call_method.4 = call $8load_method.3(func=$8load_method.3, args=[], kws=(), vararg=None, target=None) ['$10call_method.4', '$8load_method.3']
    val = freevar(one: 1)                    ['val']
    $18load_global.6 = global(numba: <module 'numba' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numba/__init__.py'>) ['$18load_global.6']
    $20load_attr.7 = getattr(value=$18load_global.6, attr=parfors) ['$18load_global.6', '$20load_attr.7']
    $22load_attr.8 = getattr(value=$20load_attr.7, attr=parfor) ['$20load_attr.7', '$22load_attr.8']
    $24load_method.9 = getattr(value=$22load_attr.8, attr=internal_prange) ['$22load_attr.8', '$24load_method.9']
    $26load_global.10 = global(len: <built-in function len>) ['$26load_global.10']
    $30call_function.12 = call $26load_global.10(in_arr, func=$26load_global.10, args=[Var(in_arr, parfor.py:276)], kws=(), vararg=None, target=None) ['$26load_global.10', '$30call_function.12', 'in_arr']
    $32call_method.13 = call $24load_method.9($30call_function.12, func=$24load_method.9, args=[Var($30call_function.12, parfor.py:278)], kws=(), vararg=None, target=None) ['$24load_method.9', '$30call_function.12', '$32call_method.13']
    $34get_iter.14 = getiter(value=$32call_method.13) ['$32call_method.13', '$34get_iter.14']
    $phi36.0 = $34get_iter.14                ['$34get_iter.14', '$phi36.0']
    jump 36                                  []
label 36:
    $36for_iter.1 = iternext(value=$phi36.0) ['$36for_iter.1', '$phi36.0']
    $36for_iter.2 = pair_first(value=$36for_iter.1) ['$36for_iter.1', '$36for_iter.2']
    $36for_iter.3 = pair_second(value=$36for_iter.1) ['$36for_iter.1', '$36for_iter.3']
    $phi38.1 = $36for_iter.2                 ['$36for_iter.2', '$phi38.1']
    branch $36for_iter.3, 38, 54             ['$36for_iter.3']
label 38:
    i = $phi38.1                             ['$phi38.1', 'i']
    $46binary_subscr.5 = getitem(value=in_arr, index=i, fn=<built-in function getitem>) ['$46binary_subscr.5', 'i', 'in_arr']
    $48inplace_multiply.6 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=val, rhs=$46binary_subscr.5, static_lhs=Undefined, static_rhs=Undefined) ['$46binary_subscr.5', '$48inplace_multiply.6', 'val']
    val = $48inplace_multiply.6              ['$48inplace_multiply.6', 'val']
    jump 36                                  []
label 54:
    $56return_value.1 = cast(value=val)      ['$56return_value.1', 'val']
    return $56return_value.1                 ['$56return_value.1']

DEBUG 2022-02-14 16:38:19,575 bytecode dump:
>          0	NOP(arg=None, lineno=154)
           2	LOAD_GLOBAL(arg=0, lineno=154)
           4	LOAD_ATTR(arg=1, lineno=154)
           6	LOAD_ATTR(arg=2, lineno=154)
           8	LOAD_METHOD(arg=3, lineno=154)
          10	CALL_METHOD(arg=0, lineno=154)
          12	POP_TOP(arg=None, lineno=154)
          14	LOAD_GLOBAL(arg=4, lineno=155)
          16	LOAD_GLOBAL(arg=5, lineno=155)
          18	LOAD_FAST(arg=0, lineno=155)
          20	CALL_FUNCTION(arg=1, lineno=155)
          22	CALL_FUNCTION(arg=1, lineno=155)
          24	POP_TOP(arg=None, lineno=155)
          26	LOAD_GLOBAL(arg=0, lineno=156)
          28	LOAD_ATTR(arg=6, lineno=156)
          30	LOAD_ATTR(arg=7, lineno=156)
          32	LOAD_METHOD(arg=8, lineno=156)
          34	LOAD_FAST(arg=0, lineno=156)
          36	LOAD_ATTR(arg=9, lineno=156)
          38	CALL_METHOD(arg=1, lineno=156)
          40	STORE_FAST(arg=1, lineno=156)
          42	LOAD_GLOBAL(arg=0, lineno=157)
          44	LOAD_ATTR(arg=1, lineno=157)
          46	LOAD_ATTR(arg=2, lineno=157)
          48	LOAD_METHOD(arg=10, lineno=157)
          50	LOAD_GLOBAL(arg=5, lineno=157)
          52	LOAD_FAST(arg=0, lineno=157)
          54	CALL_FUNCTION(arg=1, lineno=157)
          56	CALL_METHOD(arg=1, lineno=157)
          58	GET_ITER(arg=None, lineno=157)
>         60	FOR_ITER(arg=18, lineno=157)
          62	STORE_FAST(arg=2, lineno=157)
          64	LOAD_GLOBAL(arg=11, lineno=158)
          66	LOAD_FAST(arg=1, lineno=158)
          68	LOAD_FAST(arg=0, lineno=158)
          70	LOAD_FAST(arg=2, lineno=158)
          72	BINARY_SUBSCR(arg=None, lineno=158)
          74	CALL_FUNCTION(arg=2, lineno=158)
          76	STORE_FAST(arg=1, lineno=158)
          78	JUMP_ABSOLUTE(arg=60, lineno=158)
>         80	LOAD_FAST(arg=1, lineno=159)
          82	RETURN_VALUE(arg=None, lineno=159)
DEBUG 2022-02-14 16:38:19,575 pending: deque([State(pc_initial=0 nstack_initial=0)])
DEBUG 2022-02-14 16:38:19,575 stack: []
DEBUG 2022-02-14 16:38:19,575 dispatch pc=0, inst=NOP(arg=None, lineno=154)
DEBUG 2022-02-14 16:38:19,575 stack []
DEBUG 2022-02-14 16:38:19,575 dispatch pc=2, inst=LOAD_GLOBAL(arg=0, lineno=154)
DEBUG 2022-02-14 16:38:19,575 stack []
DEBUG 2022-02-14 16:38:19,575 dispatch pc=4, inst=LOAD_ATTR(arg=1, lineno=154)
DEBUG 2022-02-14 16:38:19,575 stack ['$2load_global.0']
DEBUG 2022-02-14 16:38:19,576 dispatch pc=6, inst=LOAD_ATTR(arg=2, lineno=154)
DEBUG 2022-02-14 16:38:19,576 stack ['$4load_attr.1']
DEBUG 2022-02-14 16:38:19,576 dispatch pc=8, inst=LOAD_METHOD(arg=3, lineno=154)
DEBUG 2022-02-14 16:38:19,576 stack ['$6load_attr.2']
DEBUG 2022-02-14 16:38:19,576 dispatch pc=10, inst=CALL_METHOD(arg=0, lineno=154)
DEBUG 2022-02-14 16:38:19,576 stack ['$8load_method.3']
DEBUG 2022-02-14 16:38:19,576 dispatch pc=12, inst=POP_TOP(arg=None, lineno=154)
DEBUG 2022-02-14 16:38:19,576 stack ['$10call_method.4']
DEBUG 2022-02-14 16:38:19,576 dispatch pc=14, inst=LOAD_GLOBAL(arg=4, lineno=155)
DEBUG 2022-02-14 16:38:19,576 stack []
DEBUG 2022-02-14 16:38:19,576 dispatch pc=16, inst=LOAD_GLOBAL(arg=5, lineno=155)
DEBUG 2022-02-14 16:38:19,576 stack ['$14load_global.5']
DEBUG 2022-02-14 16:38:19,576 dispatch pc=18, inst=LOAD_FAST(arg=0, lineno=155)
DEBUG 2022-02-14 16:38:19,576 stack ['$14load_global.5', '$16load_global.6']
DEBUG 2022-02-14 16:38:19,576 dispatch pc=20, inst=CALL_FUNCTION(arg=1, lineno=155)
DEBUG 2022-02-14 16:38:19,576 stack ['$14load_global.5', '$16load_global.6', '$in_arr18.7']
DEBUG 2022-02-14 16:38:19,576 dispatch pc=22, inst=CALL_FUNCTION(arg=1, lineno=155)
DEBUG 2022-02-14 16:38:19,576 stack ['$14load_global.5', '$20call_function.8']
DEBUG 2022-02-14 16:38:19,576 dispatch pc=24, inst=POP_TOP(arg=None, lineno=155)
DEBUG 2022-02-14 16:38:19,576 stack ['$22call_function.9']
DEBUG 2022-02-14 16:38:19,576 dispatch pc=26, inst=LOAD_GLOBAL(arg=0, lineno=156)
DEBUG 2022-02-14 16:38:19,576 stack []
DEBUG 2022-02-14 16:38:19,576 dispatch pc=28, inst=LOAD_ATTR(arg=6, lineno=156)
DEBUG 2022-02-14 16:38:19,576 stack ['$26load_global.10']
DEBUG 2022-02-14 16:38:19,576 dispatch pc=30, inst=LOAD_ATTR(arg=7, lineno=156)
DEBUG 2022-02-14 16:38:19,576 stack ['$28load_attr.11']
DEBUG 2022-02-14 16:38:19,576 dispatch pc=32, inst=LOAD_METHOD(arg=8, lineno=156)
DEBUG 2022-02-14 16:38:19,577 stack ['$30load_attr.12']
DEBUG 2022-02-14 16:38:19,577 dispatch pc=34, inst=LOAD_FAST(arg=0, lineno=156)
DEBUG 2022-02-14 16:38:19,577 stack ['$32load_method.13']
DEBUG 2022-02-14 16:38:19,577 dispatch pc=36, inst=LOAD_ATTR(arg=9, lineno=156)
DEBUG 2022-02-14 16:38:19,577 stack ['$32load_method.13', '$in_arr34.14']
DEBUG 2022-02-14 16:38:19,577 dispatch pc=38, inst=CALL_METHOD(arg=1, lineno=156)
DEBUG 2022-02-14 16:38:19,577 stack ['$32load_method.13', '$36load_attr.15']
DEBUG 2022-02-14 16:38:19,577 dispatch pc=40, inst=STORE_FAST(arg=1, lineno=156)
DEBUG 2022-02-14 16:38:19,577 stack ['$38call_method.16']
DEBUG 2022-02-14 16:38:19,577 dispatch pc=42, inst=LOAD_GLOBAL(arg=0, lineno=157)
DEBUG 2022-02-14 16:38:19,577 stack []
DEBUG 2022-02-14 16:38:19,577 dispatch pc=44, inst=LOAD_ATTR(arg=1, lineno=157)
DEBUG 2022-02-14 16:38:19,577 stack ['$42load_global.17']
DEBUG 2022-02-14 16:38:19,577 dispatch pc=46, inst=LOAD_ATTR(arg=2, lineno=157)
DEBUG 2022-02-14 16:38:19,577 stack ['$44load_attr.18']
DEBUG 2022-02-14 16:38:19,577 dispatch pc=48, inst=LOAD_METHOD(arg=10, lineno=157)
DEBUG 2022-02-14 16:38:19,577 stack ['$46load_attr.19']
DEBUG 2022-02-14 16:38:19,577 dispatch pc=50, inst=LOAD_GLOBAL(arg=5, lineno=157)
DEBUG 2022-02-14 16:38:19,577 stack ['$48load_method.20']
DEBUG 2022-02-14 16:38:19,577 dispatch pc=52, inst=LOAD_FAST(arg=0, lineno=157)
DEBUG 2022-02-14 16:38:19,577 stack ['$48load_method.20', '$50load_global.21']
DEBUG 2022-02-14 16:38:19,577 dispatch pc=54, inst=CALL_FUNCTION(arg=1, lineno=157)
DEBUG 2022-02-14 16:38:19,577 stack ['$48load_method.20', '$50load_global.21', '$in_arr52.22']
DEBUG 2022-02-14 16:38:19,577 dispatch pc=56, inst=CALL_METHOD(arg=1, lineno=157)
DEBUG 2022-02-14 16:38:19,577 stack ['$48load_method.20', '$54call_function.23']
DEBUG 2022-02-14 16:38:19,577 dispatch pc=58, inst=GET_ITER(arg=None, lineno=157)
DEBUG 2022-02-14 16:38:19,577 stack ['$56call_method.24']
DEBUG 2022-02-14 16:38:19,578 end state. edges=[Edge(pc=60, stack=('$58get_iter.25',), blockstack=(), npush=0)]
DEBUG 2022-02-14 16:38:19,578 pending: deque([State(pc_initial=60 nstack_initial=1)])
DEBUG 2022-02-14 16:38:19,578 stack: ['$phi60.0']
DEBUG 2022-02-14 16:38:19,578 dispatch pc=60, inst=FOR_ITER(arg=18, lineno=157)
DEBUG 2022-02-14 16:38:19,578 stack ['$phi60.0']
DEBUG 2022-02-14 16:38:19,578 end state. edges=[Edge(pc=80, stack=(), blockstack=(), npush=0), Edge(pc=62, stack=('$phi60.0', '$60for_iter.2'), blockstack=(), npush=0)]
DEBUG 2022-02-14 16:38:19,578 pending: deque([State(pc_initial=80 nstack_initial=0), State(pc_initial=62 nstack_initial=2)])
DEBUG 2022-02-14 16:38:19,578 stack: []
DEBUG 2022-02-14 16:38:19,578 dispatch pc=80, inst=LOAD_FAST(arg=1, lineno=159)
DEBUG 2022-02-14 16:38:19,578 stack []
DEBUG 2022-02-14 16:38:19,578 dispatch pc=82, inst=RETURN_VALUE(arg=None, lineno=159)
DEBUG 2022-02-14 16:38:19,578 stack ['$val80.0']
DEBUG 2022-02-14 16:38:19,578 end state. edges=[]
DEBUG 2022-02-14 16:38:19,578 pending: deque([State(pc_initial=62 nstack_initial=2)])
DEBUG 2022-02-14 16:38:19,578 stack: ['$phi62.0', '$phi62.1']
DEBUG 2022-02-14 16:38:19,578 dispatch pc=62, inst=STORE_FAST(arg=2, lineno=157)
DEBUG 2022-02-14 16:38:19,578 stack ['$phi62.0', '$phi62.1']
DEBUG 2022-02-14 16:38:19,578 dispatch pc=64, inst=LOAD_GLOBAL(arg=11, lineno=158)
DEBUG 2022-02-14 16:38:19,578 stack ['$phi62.0']
DEBUG 2022-02-14 16:38:19,578 dispatch pc=66, inst=LOAD_FAST(arg=1, lineno=158)
DEBUG 2022-02-14 16:38:19,578 stack ['$phi62.0', '$64load_global.2']
DEBUG 2022-02-14 16:38:19,578 dispatch pc=68, inst=LOAD_FAST(arg=0, lineno=158)
DEBUG 2022-02-14 16:38:19,578 stack ['$phi62.0', '$64load_global.2', '$val66.3']
DEBUG 2022-02-14 16:38:19,578 dispatch pc=70, inst=LOAD_FAST(arg=2, lineno=158)
DEBUG 2022-02-14 16:38:19,578 stack ['$phi62.0', '$64load_global.2', '$val66.3', '$in_arr68.4']
DEBUG 2022-02-14 16:38:19,579 dispatch pc=72, inst=BINARY_SUBSCR(arg=None, lineno=158)
DEBUG 2022-02-14 16:38:19,579 stack ['$phi62.0', '$64load_global.2', '$val66.3', '$in_arr68.4', '$i70.5']
DEBUG 2022-02-14 16:38:19,579 dispatch pc=74, inst=CALL_FUNCTION(arg=2, lineno=158)
DEBUG 2022-02-14 16:38:19,579 stack ['$phi62.0', '$64load_global.2', '$val66.3', '$72binary_subscr.6']
DEBUG 2022-02-14 16:38:19,579 dispatch pc=76, inst=STORE_FAST(arg=1, lineno=158)
DEBUG 2022-02-14 16:38:19,579 stack ['$phi62.0', '$74call_function.7']
DEBUG 2022-02-14 16:38:19,579 dispatch pc=78, inst=JUMP_ABSOLUTE(arg=60, lineno=158)
DEBUG 2022-02-14 16:38:19,579 stack ['$phi62.0']
DEBUG 2022-02-14 16:38:19,579 end state. edges=[Edge(pc=60, stack=('$phi62.0',), blockstack=(), npush=0)]
DEBUG 2022-02-14 16:38:19,579 pending: deque([State(pc_initial=60 nstack_initial=1)])
DEBUG 2022-02-14 16:38:19,579 -------------------------Prune PHIs-------------------------
DEBUG 2022-02-14 16:38:19,579 Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=60 nstack_initial=1): {'$phi60.0'},
             State(pc_initial=62 nstack_initial=2): {'$phi62.1'},
             State(pc_initial=80 nstack_initial=0): set()})
DEBUG 2022-02-14 16:38:19,579 defmap: {'$phi60.0': State(pc_initial=0 nstack_initial=0),
 '$phi62.1': State(pc_initial=60 nstack_initial=1)}
DEBUG 2022-02-14 16:38:19,579 phismap: defaultdict(<class 'set'>,
            {'$phi60.0': {('$58get_iter.25',
                           State(pc_initial=0 nstack_initial=0)),
                          ('$phi62.0', State(pc_initial=62 nstack_initial=2))},
             '$phi62.0': {('$phi60.0', State(pc_initial=60 nstack_initial=1))},
             '$phi62.1': {('$60for_iter.2',
                           State(pc_initial=60 nstack_initial=1))}})
DEBUG 2022-02-14 16:38:19,580 changing phismap: defaultdict(<class 'set'>,
            {'$phi60.0': {('$58get_iter.25',
                           State(pc_initial=0 nstack_initial=0)),
                          ('$phi60.0', State(pc_initial=60 nstack_initial=1))},
             '$phi62.0': {('$58get_iter.25',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi62.1': {('$60for_iter.2',
                           State(pc_initial=60 nstack_initial=1))}})
DEBUG 2022-02-14 16:38:19,580 changing phismap: defaultdict(<class 'set'>,
            {'$phi60.0': {('$58get_iter.25',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi62.0': {('$58get_iter.25',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi62.1': {('$60for_iter.2',
                           State(pc_initial=60 nstack_initial=1))}})
DEBUG 2022-02-14 16:38:19,580 changing phismap: defaultdict(<class 'set'>,
            {'$phi60.0': {('$58get_iter.25',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi62.0': {('$58get_iter.25',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi62.1': {('$60for_iter.2',
                           State(pc_initial=60 nstack_initial=1))}})
DEBUG 2022-02-14 16:38:19,580 keep phismap: {'$phi60.0': {('$58get_iter.25', State(pc_initial=0 nstack_initial=0))},
 '$phi62.1': {('$60for_iter.2', State(pc_initial=60 nstack_initial=1))}}
DEBUG 2022-02-14 16:38:19,580 new_out: defaultdict(<class 'dict'>,
            {State(pc_initial=0 nstack_initial=0): {'$phi60.0': '$58get_iter.25'},
             State(pc_initial=60 nstack_initial=1): {'$phi62.1': '$60for_iter.2'}})
DEBUG 2022-02-14 16:38:19,580 ----------------------DONE Prune PHIs-----------------------
DEBUG 2022-02-14 16:38:19,580 block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$2load_global.0'}), (4, {'item': '$2load_global.0', 'res': '$4load_attr.1'}), (6, {'item': '$4load_attr.1', 'res': '$6load_attr.2'}), (8, {'item': '$6load_attr.2', 'res': '$8load_method.3'}), (10, {'func': '$8load_method.3', 'args': [], 'res': '$10call_method.4'}), (14, {'res': '$14load_global.5'}), (16, {'res': '$16load_global.6'}), (18, {'res': '$in_arr18.7'}), (20, {'func': '$16load_global.6', 'args': ['$in_arr18.7'], 'res': '$20call_function.8'}), (22, {'func': '$14load_global.5', 'args': ['$20call_function.8'], 'res': '$22call_function.9'}), (26, {'res': '$26load_global.10'}), (28, {'item': '$26load_global.10', 'res': '$28load_attr.11'}), (30, {'item': '$28load_attr.11', 'res': '$30load_attr.12'}), (32, {'item': '$30load_attr.12', 'res': '$32load_method.13'}), (34, {'res': '$in_arr34.14'}), (36, {'item': '$in_arr34.14', 'res': '$36load_attr.15'}), (38, {'func': '$32load_method.13', 'args': ['$36load_attr.15'], 'res': '$38call_method.16'}), (40, {'value': '$38call_method.16'}), (42, {'res': '$42load_global.17'}), (44, {'item': '$42load_global.17', 'res': '$44load_attr.18'}), (46, {'item': '$44load_attr.18', 'res': '$46load_attr.19'}), (48, {'item': '$46load_attr.19', 'res': '$48load_method.20'}), (50, {'res': '$50load_global.21'}), (52, {'res': '$in_arr52.22'}), (54, {'func': '$50load_global.21', 'args': ['$in_arr52.22'], 'res': '$54call_function.23'}), (56, {'func': '$48load_method.20', 'args': ['$54call_function.23'], 'res': '$56call_method.24'}), (58, {'value': '$56call_method.24', 'res': '$58get_iter.25'})), outgoing_phis={'$phi60.0': '$58get_iter.25'}, blockstack=(), active_try_block=None, outgoing_edgepushed={60: ('$58get_iter.25',)})
DEBUG 2022-02-14 16:38:19,580 block_infos State(pc_initial=60 nstack_initial=1):
AdaptBlockInfo(insts=((60, {'iterator': '$phi60.0', 'pair': '$60for_iter.1', 'indval': '$60for_iter.2', 'pred': '$60for_iter.3'}),), outgoing_phis={'$phi62.1': '$60for_iter.2'}, blockstack=(), active_try_block=None, outgoing_edgepushed={80: (), 62: ('$phi60.0', '$60for_iter.2')})
DEBUG 2022-02-14 16:38:19,581 block_infos State(pc_initial=62 nstack_initial=2):
AdaptBlockInfo(insts=((62, {'value': '$phi62.1'}), (64, {'res': '$64load_global.2'}), (66, {'res': '$val66.3'}), (68, {'res': '$in_arr68.4'}), (70, {'res': '$i70.5'}), (72, {'index': '$i70.5', 'target': '$in_arr68.4', 'res': '$72binary_subscr.6'}), (74, {'func': '$64load_global.2', 'args': ['$val66.3', '$72binary_subscr.6'], 'res': '$74call_function.7'}), (76, {'value': '$74call_function.7'}), (78, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={60: ('$phi62.0',)})
DEBUG 2022-02-14 16:38:19,581 block_infos State(pc_initial=80 nstack_initial=0):
AdaptBlockInfo(insts=((80, {'res': '$val80.0'}), (82, {'retval': '$val80.0', 'castval': '$82return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG 2022-02-14 16:38:19,582 label 0:
    in_arr = arg(0, name=in_arr)             ['in_arr']
    $2load_global.0 = global(numba: <module 'numba' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numba/__init__.py'>) ['$2load_global.0']
    $4load_attr.1 = getattr(value=$2load_global.0, attr=parfors) ['$2load_global.0', '$4load_attr.1']
    $6load_attr.2 = getattr(value=$4load_attr.1, attr=parfor) ['$4load_attr.1', '$6load_attr.2']
    $8load_method.3 = getattr(value=$6load_attr.2, attr=init_prange) ['$6load_attr.2', '$8load_method.3']
    $10call_method.4 = call $8load_method.3(func=$8load_method.3, args=[], kws=(), vararg=None, target=None) ['$10call_method.4', '$8load_method.3']
    $14load_global.5 = global(max_checker: <function max_checker at 0x7fa04ab0fee0>) ['$14load_global.5']
    $16load_global.6 = global(len: <built-in function len>) ['$16load_global.6']
    $20call_function.8 = call $16load_global.6(in_arr, func=$16load_global.6, args=[Var(in_arr, parfor.py:154)], kws=(), vararg=None, target=None) ['$16load_global.6', '$20call_function.8', 'in_arr']
    $22call_function.9 = call $14load_global.5($20call_function.8, func=$14load_global.5, args=[Var($20call_function.8, parfor.py:155)], kws=(), vararg=None, target=None) ['$14load_global.5', '$20call_function.8', '$22call_function.9']
    $26load_global.10 = global(numba: <module 'numba' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numba/__init__.py'>) ['$26load_global.10']
    $28load_attr.11 = getattr(value=$26load_global.10, attr=cpython) ['$26load_global.10', '$28load_attr.11']
    $30load_attr.12 = getattr(value=$28load_attr.11, attr=builtins) ['$28load_attr.11', '$30load_attr.12']
    $32load_method.13 = getattr(value=$30load_attr.12, attr=get_type_min_value) ['$30load_attr.12', '$32load_method.13']
    $36load_attr.15 = getattr(value=in_arr, attr=dtype) ['$36load_attr.15', 'in_arr']
    val = call $32load_method.13($36load_attr.15, func=$32load_method.13, args=[Var($36load_attr.15, parfor.py:156)], kws=(), vararg=None, target=None) ['$32load_method.13', '$36load_attr.15', 'val']
    $42load_global.17 = global(numba: <module 'numba' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numba/__init__.py'>) ['$42load_global.17']
    $44load_attr.18 = getattr(value=$42load_global.17, attr=parfors) ['$42load_global.17', '$44load_attr.18']
    $46load_attr.19 = getattr(value=$44load_attr.18, attr=parfor) ['$44load_attr.18', '$46load_attr.19']
    $48load_method.20 = getattr(value=$46load_attr.19, attr=internal_prange) ['$46load_attr.19', '$48load_method.20']
    $50load_global.21 = global(len: <built-in function len>) ['$50load_global.21']
    $54call_function.23 = call $50load_global.21(in_arr, func=$50load_global.21, args=[Var(in_arr, parfor.py:154)], kws=(), vararg=None, target=None) ['$50load_global.21', '$54call_function.23', 'in_arr']
    $56call_method.24 = call $48load_method.20($54call_function.23, func=$48load_method.20, args=[Var($54call_function.23, parfor.py:157)], kws=(), vararg=None, target=None) ['$48load_method.20', '$54call_function.23', '$56call_method.24']
    $58get_iter.25 = getiter(value=$56call_method.24) ['$56call_method.24', '$58get_iter.25']
    $phi60.0 = $58get_iter.25                ['$58get_iter.25', '$phi60.0']
    jump 60                                  []
label 60:
    $60for_iter.1 = iternext(value=$phi60.0) ['$60for_iter.1', '$phi60.0']
    $60for_iter.2 = pair_first(value=$60for_iter.1) ['$60for_iter.1', '$60for_iter.2']
    $60for_iter.3 = pair_second(value=$60for_iter.1) ['$60for_iter.1', '$60for_iter.3']
    $phi62.1 = $60for_iter.2                 ['$60for_iter.2', '$phi62.1']
    branch $60for_iter.3, 62, 80             ['$60for_iter.3']
label 62:
    i = $phi62.1                             ['$phi62.1', 'i']
    $64load_global.2 = global(max: <built-in function max>) ['$64load_global.2']
    $72binary_subscr.6 = getitem(value=in_arr, index=i, fn=<built-in function getitem>) ['$72binary_subscr.6', 'i', 'in_arr']
    val = call $64load_global.2(val, $72binary_subscr.6, func=$64load_global.2, args=[Var(val, parfor.py:156), Var($72binary_subscr.6, parfor.py:158)], kws=(), vararg=None, target=None) ['$64load_global.2', '$72binary_subscr.6', 'val', 'val']
    jump 60                                  []
label 80:
    $82return_value.1 = cast(value=val)      ['$82return_value.1', 'val']
    return $82return_value.1                 ['$82return_value.1']

DEBUG 2022-02-14 16:38:20,159 bytecode dump:
>          0	NOP(arg=None, lineno=2)
           2	LOAD_FAST(arg=2, lineno=2)
           4	LOAD_CONST(arg=1, lineno=2)
           6	BINARY_SUBSCR(arg=None, lineno=2)
           8	STORE_FAST(arg=3, lineno=2)
          10	LOAD_GLOBAL(arg=0, lineno=3)
          12	LOAD_FAST(arg=0, lineno=3)
          14	LOAD_CONST(arg=1, lineno=3)
          16	BINARY_SUBSCR(arg=None, lineno=3)
          18	LOAD_FAST(arg=0, lineno=3)
          20	LOAD_CONST(arg=2, lineno=3)
          22	BINARY_SUBSCR(arg=None, lineno=3)
          24	LOAD_GLOBAL(arg=1, lineno=3)
          26	LOAD_METHOD(arg=2, lineno=3)
          28	LOAD_CONST(arg=2, lineno=3)
          30	CALL_METHOD(arg=1, lineno=3)
          32	BINARY_ADD(arg=None, lineno=3)
          34	CALL_FUNCTION(arg=2, lineno=3)
          36	GET_ITER(arg=None, lineno=3)
>         38	FOR_ITER(arg=8, lineno=3)
          40	STORE_FAST(arg=4, lineno=3)
          42	LOAD_CONST(arg=1, lineno=4)
          44	STORE_FAST(arg=5, lineno=4)
          46	JUMP_ABSOLUTE(arg=38, lineno=4)
>         48	LOAD_FAST(arg=3, lineno=5)
          50	LOAD_FAST(arg=2, lineno=5)
          52	LOAD_CONST(arg=1, lineno=5)
          54	STORE_SUBSCR(arg=None, lineno=5)
          56	LOAD_CONST(arg=0, lineno=6)
          58	RETURN_VALUE(arg=None, lineno=6)
DEBUG 2022-02-14 16:38:20,159 pending: deque([State(pc_initial=0 nstack_initial=0)])
DEBUG 2022-02-14 16:38:20,159 stack: []
DEBUG 2022-02-14 16:38:20,159 dispatch pc=0, inst=NOP(arg=None, lineno=2)
DEBUG 2022-02-14 16:38:20,159 stack []
DEBUG 2022-02-14 16:38:20,159 dispatch pc=2, inst=LOAD_FAST(arg=2, lineno=2)
DEBUG 2022-02-14 16:38:20,159 stack []
DEBUG 2022-02-14 16:38:20,159 dispatch pc=4, inst=LOAD_CONST(arg=1, lineno=2)
DEBUG 2022-02-14 16:38:20,160 stack ['$val_1179__arr2.0']
DEBUG 2022-02-14 16:38:20,160 dispatch pc=6, inst=BINARY_SUBSCR(arg=None, lineno=2)
DEBUG 2022-02-14 16:38:20,160 stack ['$val_1179__arr2.0', '$const4.1']
DEBUG 2022-02-14 16:38:20,160 dispatch pc=8, inst=STORE_FAST(arg=3, lineno=2)
DEBUG 2022-02-14 16:38:20,160 stack ['$6binary_subscr.2']
DEBUG 2022-02-14 16:38:20,160 dispatch pc=10, inst=LOAD_GLOBAL(arg=0, lineno=3)
DEBUG 2022-02-14 16:38:20,160 stack []
DEBUG 2022-02-14 16:38:20,160 dispatch pc=12, inst=LOAD_FAST(arg=0, lineno=3)
DEBUG 2022-02-14 16:38:20,160 stack ['$10load_global.3']
DEBUG 2022-02-14 16:38:20,160 dispatch pc=14, inst=LOAD_CONST(arg=1, lineno=3)
DEBUG 2022-02-14 16:38:20,160 stack ['$10load_global.3', '$sched12.4']
DEBUG 2022-02-14 16:38:20,160 dispatch pc=16, inst=BINARY_SUBSCR(arg=None, lineno=3)
DEBUG 2022-02-14 16:38:20,160 stack ['$10load_global.3', '$sched12.4', '$const14.5']
DEBUG 2022-02-14 16:38:20,160 dispatch pc=18, inst=LOAD_FAST(arg=0, lineno=3)
DEBUG 2022-02-14 16:38:20,160 stack ['$10load_global.3', '$16binary_subscr.6']
DEBUG 2022-02-14 16:38:20,160 dispatch pc=20, inst=LOAD_CONST(arg=2, lineno=3)
DEBUG 2022-02-14 16:38:20,160 stack ['$10load_global.3', '$16binary_subscr.6', '$sched18.7']
DEBUG 2022-02-14 16:38:20,160 dispatch pc=22, inst=BINARY_SUBSCR(arg=None, lineno=3)
DEBUG 2022-02-14 16:38:20,160 stack ['$10load_global.3', '$16binary_subscr.6', '$sched18.7', '$const20.8']
DEBUG 2022-02-14 16:38:20,160 dispatch pc=24, inst=LOAD_GLOBAL(arg=1, lineno=3)
DEBUG 2022-02-14 16:38:20,160 stack ['$10load_global.3', '$16binary_subscr.6', '$22binary_subscr.9']
DEBUG 2022-02-14 16:38:20,160 dispatch pc=26, inst=LOAD_METHOD(arg=2, lineno=3)
DEBUG 2022-02-14 16:38:20,160 stack ['$10load_global.3', '$16binary_subscr.6', '$22binary_subscr.9', '$24load_global.10']
DEBUG 2022-02-14 16:38:20,160 dispatch pc=28, inst=LOAD_CONST(arg=2, lineno=3)
DEBUG 2022-02-14 16:38:20,160 stack ['$10load_global.3', '$16binary_subscr.6', '$22binary_subscr.9', '$26load_method.11']
DEBUG 2022-02-14 16:38:20,161 dispatch pc=30, inst=CALL_METHOD(arg=1, lineno=3)
DEBUG 2022-02-14 16:38:20,161 stack ['$10load_global.3', '$16binary_subscr.6', '$22binary_subscr.9', '$26load_method.11', '$const28.12']
DEBUG 2022-02-14 16:38:20,161 dispatch pc=32, inst=BINARY_ADD(arg=None, lineno=3)
DEBUG 2022-02-14 16:38:20,161 stack ['$10load_global.3', '$16binary_subscr.6', '$22binary_subscr.9', '$30call_method.13']
DEBUG 2022-02-14 16:38:20,161 dispatch pc=34, inst=CALL_FUNCTION(arg=2, lineno=3)
DEBUG 2022-02-14 16:38:20,161 stack ['$10load_global.3', '$16binary_subscr.6', '$32binary_add.14']
DEBUG 2022-02-14 16:38:20,161 dispatch pc=36, inst=GET_ITER(arg=None, lineno=3)
DEBUG 2022-02-14 16:38:20,161 stack ['$34call_function.15']
DEBUG 2022-02-14 16:38:20,161 end state. edges=[Edge(pc=38, stack=('$36get_iter.16',), blockstack=(), npush=0)]
DEBUG 2022-02-14 16:38:20,161 pending: deque([State(pc_initial=38 nstack_initial=1)])
DEBUG 2022-02-14 16:38:20,161 stack: ['$phi38.0']
DEBUG 2022-02-14 16:38:20,161 dispatch pc=38, inst=FOR_ITER(arg=8, lineno=3)
DEBUG 2022-02-14 16:38:20,161 stack ['$phi38.0']
DEBUG 2022-02-14 16:38:20,161 end state. edges=[Edge(pc=48, stack=(), blockstack=(), npush=0), Edge(pc=40, stack=('$phi38.0', '$38for_iter.2'), blockstack=(), npush=0)]
DEBUG 2022-02-14 16:38:20,161 pending: deque([State(pc_initial=48 nstack_initial=0), State(pc_initial=40 nstack_initial=2)])
DEBUG 2022-02-14 16:38:20,161 stack: []
DEBUG 2022-02-14 16:38:20,161 dispatch pc=48, inst=LOAD_FAST(arg=3, lineno=5)
DEBUG 2022-02-14 16:38:20,161 stack []
DEBUG 2022-02-14 16:38:20,161 dispatch pc=50, inst=LOAD_FAST(arg=2, lineno=5)
DEBUG 2022-02-14 16:38:20,161 stack ['$val_117948.0']
DEBUG 2022-02-14 16:38:20,161 dispatch pc=52, inst=LOAD_CONST(arg=1, lineno=5)
DEBUG 2022-02-14 16:38:20,161 stack ['$val_117948.0', '$val_1179__arr50.1']
DEBUG 2022-02-14 16:38:20,161 dispatch pc=54, inst=STORE_SUBSCR(arg=None, lineno=5)
DEBUG 2022-02-14 16:38:20,161 stack ['$val_117948.0', '$val_1179__arr50.1', '$const52.2']
DEBUG 2022-02-14 16:38:20,162 dispatch pc=56, inst=LOAD_CONST(arg=0, lineno=6)
DEBUG 2022-02-14 16:38:20,162 stack []
DEBUG 2022-02-14 16:38:20,162 dispatch pc=58, inst=RETURN_VALUE(arg=None, lineno=6)
DEBUG 2022-02-14 16:38:20,162 stack ['$const56.3']
DEBUG 2022-02-14 16:38:20,162 end state. edges=[]
DEBUG 2022-02-14 16:38:20,162 pending: deque([State(pc_initial=40 nstack_initial=2)])
DEBUG 2022-02-14 16:38:20,162 stack: ['$phi40.0', '$phi40.1']
DEBUG 2022-02-14 16:38:20,162 dispatch pc=40, inst=STORE_FAST(arg=4, lineno=3)
DEBUG 2022-02-14 16:38:20,162 stack ['$phi40.0', '$phi40.1']
DEBUG 2022-02-14 16:38:20,162 dispatch pc=42, inst=LOAD_CONST(arg=1, lineno=4)
DEBUG 2022-02-14 16:38:20,162 stack ['$phi40.0']
DEBUG 2022-02-14 16:38:20,162 dispatch pc=44, inst=STORE_FAST(arg=5, lineno=4)
DEBUG 2022-02-14 16:38:20,162 stack ['$phi40.0', '$const42.2']
DEBUG 2022-02-14 16:38:20,162 dispatch pc=46, inst=JUMP_ABSOLUTE(arg=38, lineno=4)
DEBUG 2022-02-14 16:38:20,162 stack ['$phi40.0']
DEBUG 2022-02-14 16:38:20,162 end state. edges=[Edge(pc=38, stack=('$phi40.0',), blockstack=(), npush=0)]
DEBUG 2022-02-14 16:38:20,162 pending: deque([State(pc_initial=38 nstack_initial=1)])
DEBUG 2022-02-14 16:38:20,162 -------------------------Prune PHIs-------------------------
DEBUG 2022-02-14 16:38:20,162 Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=38 nstack_initial=1): {'$phi38.0'},
             State(pc_initial=40 nstack_initial=2): {'$phi40.1'},
             State(pc_initial=48 nstack_initial=0): set()})
DEBUG 2022-02-14 16:38:20,162 defmap: {'$phi38.0': State(pc_initial=0 nstack_initial=0),
 '$phi40.1': State(pc_initial=38 nstack_initial=1)}
DEBUG 2022-02-14 16:38:20,163 phismap: defaultdict(<class 'set'>,
            {'$phi38.0': {('$36get_iter.16',
                           State(pc_initial=0 nstack_initial=0)),
                          ('$phi40.0', State(pc_initial=40 nstack_initial=2))},
             '$phi40.0': {('$phi38.0', State(pc_initial=38 nstack_initial=1))},
             '$phi40.1': {('$38for_iter.2',
                           State(pc_initial=38 nstack_initial=1))}})
DEBUG 2022-02-14 16:38:20,163 changing phismap: defaultdict(<class 'set'>,
            {'$phi38.0': {('$36get_iter.16',
                           State(pc_initial=0 nstack_initial=0)),
                          ('$phi38.0', State(pc_initial=38 nstack_initial=1))},
             '$phi40.0': {('$36get_iter.16',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi40.1': {('$38for_iter.2',
                           State(pc_initial=38 nstack_initial=1))}})
DEBUG 2022-02-14 16:38:20,163 changing phismap: defaultdict(<class 'set'>,
            {'$phi38.0': {('$36get_iter.16',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi40.0': {('$36get_iter.16',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi40.1': {('$38for_iter.2',
                           State(pc_initial=38 nstack_initial=1))}})
DEBUG 2022-02-14 16:38:20,163 changing phismap: defaultdict(<class 'set'>,
            {'$phi38.0': {('$36get_iter.16',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi40.0': {('$36get_iter.16',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi40.1': {('$38for_iter.2',
                           State(pc_initial=38 nstack_initial=1))}})
DEBUG 2022-02-14 16:38:20,163 keep phismap: {'$phi38.0': {('$36get_iter.16', State(pc_initial=0 nstack_initial=0))},
 '$phi40.1': {('$38for_iter.2', State(pc_initial=38 nstack_initial=1))}}
DEBUG 2022-02-14 16:38:20,163 new_out: defaultdict(<class 'dict'>,
            {State(pc_initial=0 nstack_initial=0): {'$phi38.0': '$36get_iter.16'},
             State(pc_initial=38 nstack_initial=1): {'$phi40.1': '$38for_iter.2'}})
DEBUG 2022-02-14 16:38:20,164 ----------------------DONE Prune PHIs-----------------------
DEBUG 2022-02-14 16:38:20,164 block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$val_1179__arr2.0'}), (4, {'res': '$const4.1'}), (6, {'index': '$const4.1', 'target': '$val_1179__arr2.0', 'res': '$6binary_subscr.2'}), (8, {'value': '$6binary_subscr.2'}), (10, {'res': '$10load_global.3'}), (12, {'res': '$sched12.4'}), (14, {'res': '$const14.5'}), (16, {'index': '$const14.5', 'target': '$sched12.4', 'res': '$16binary_subscr.6'}), (18, {'res': '$sched18.7'}), (20, {'res': '$const20.8'}), (22, {'index': '$const20.8', 'target': '$sched18.7', 'res': '$22binary_subscr.9'}), (24, {'res': '$24load_global.10'}), (26, {'item': '$24load_global.10', 'res': '$26load_method.11'}), (28, {'res': '$const28.12'}), (30, {'func': '$26load_method.11', 'args': ['$const28.12'], 'res': '$30call_method.13'}), (32, {'lhs': '$22binary_subscr.9', 'rhs': '$30call_method.13', 'res': '$32binary_add.14'}), (34, {'func': '$10load_global.3', 'args': ['$16binary_subscr.6', '$32binary_add.14'], 'res': '$34call_function.15'}), (36, {'value': '$34call_function.15', 'res': '$36get_iter.16'})), outgoing_phis={'$phi38.0': '$36get_iter.16'}, blockstack=(), active_try_block=None, outgoing_edgepushed={38: ('$36get_iter.16',)})
DEBUG 2022-02-14 16:38:20,164 block_infos State(pc_initial=38 nstack_initial=1):
AdaptBlockInfo(insts=((38, {'iterator': '$phi38.0', 'pair': '$38for_iter.1', 'indval': '$38for_iter.2', 'pred': '$38for_iter.3'}),), outgoing_phis={'$phi40.1': '$38for_iter.2'}, blockstack=(), active_try_block=None, outgoing_edgepushed={48: (), 40: ('$phi38.0', '$38for_iter.2')})
DEBUG 2022-02-14 16:38:20,164 block_infos State(pc_initial=40 nstack_initial=2):
AdaptBlockInfo(insts=((40, {'value': '$phi40.1'}), (42, {'res': '$const42.2'}), (44, {'value': '$const42.2'}), (46, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={38: ('$phi40.0',)})
DEBUG 2022-02-14 16:38:20,164 block_infos State(pc_initial=48 nstack_initial=0):
AdaptBlockInfo(insts=((48, {'res': '$val_117948.0'}), (50, {'res': '$val_1179__arr50.1'}), (52, {'res': '$const52.2'}), (54, {'target': '$val_1179__arr50.1', 'index': '$const52.2', 'value': '$val_117948.0'}), (56, {'res': '$const56.3'}), (58, {'retval': '$const56.3', 'castval': '$58return_value.4'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG 2022-02-14 16:38:20,165 label 0:
    sched = arg(0, name=sched)               ['sched']
    fixed__edge__reps = arg(1, name=fixed__edge__reps) ['fixed__edge__reps']
    val_1179__arr = arg(2, name=val_1179__arr) ['val_1179__arr']
    $const4.1 = const(int, 0)                ['$const4.1']
    val_1179 = getitem(value=val_1179__arr, index=$const4.1, fn=<built-in function getitem>) ['$const4.1', 'val_1179', 'val_1179__arr']
    $10load_global.3 = global(range: <class 'range'>) ['$10load_global.3']
    $const14.5 = const(int, 0)               ['$const14.5']
    $16binary_subscr.6 = getitem(value=sched, index=$const14.5, fn=<built-in function getitem>) ['$16binary_subscr.6', '$const14.5', 'sched']
    $const20.8 = const(int, 1)               ['$const20.8']
    $22binary_subscr.9 = getitem(value=sched, index=$const20.8, fn=<built-in function getitem>) ['$22binary_subscr.9', '$const20.8', 'sched']
    $24load_global.10 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>) ['$24load_global.10']
    $26load_method.11 = getattr(value=$24load_global.10, attr=uint8) ['$24load_global.10', '$26load_method.11']
    $const28.12 = const(int, 1)              ['$const28.12']
    $30call_method.13 = call $26load_method.11($const28.12, func=$26load_method.11, args=[Var($const28.12, <string>:3)], kws=(), vararg=None, target=None) ['$26load_method.11', '$30call_method.13', '$const28.12']
    $32binary_add.14 = $22binary_subscr.9 + $30call_method.13 ['$22binary_subscr.9', '$30call_method.13', '$32binary_add.14']
    $34call_function.15 = call $10load_global.3($16binary_subscr.6, $32binary_add.14, func=$10load_global.3, args=[Var($16binary_subscr.6, <string>:3), Var($32binary_add.14, <string>:3)], kws=(), vararg=None, target=None) ['$10load_global.3', '$16binary_subscr.6', '$32binary_add.14', '$34call_function.15']
    $36get_iter.16 = getiter(value=$34call_function.15) ['$34call_function.15', '$36get_iter.16']
    $phi38.0 = $36get_iter.16                ['$36get_iter.16', '$phi38.0']
    jump 38                                  []
label 38:
    $38for_iter.1 = iternext(value=$phi38.0) ['$38for_iter.1', '$phi38.0']
    $38for_iter.2 = pair_first(value=$38for_iter.1) ['$38for_iter.1', '$38for_iter.2']
    $38for_iter.3 = pair_second(value=$38for_iter.1) ['$38for_iter.1', '$38for_iter.3']
    $phi40.1 = $38for_iter.2                 ['$38for_iter.2', '$phi40.1']
    branch $38for_iter.3, 40, 48             ['$38for_iter.3']
label 40:
    parfor__index_1375 = $phi40.1            ['$phi40.1', 'parfor__index_1375']
    __sentinel__0 = const(int, 0)            ['__sentinel__0']
    jump 38                                  []
label 48:
    $const52.2 = const(int, 0)               ['$const52.2']
    val_1179__arr[$const52.2] = val_1179     ['$const52.2', 'val_1179', 'val_1179__arr']
    $const56.3 = const(NoneType, None)       ['$const56.3']
    $58return_value.4 = cast(value=$const56.3) ['$58return_value.4', '$const56.3']
    return $58return_value.4                 ['$58return_value.4']

DEBUG 2022-02-14 16:38:20,169 ==== SSA block analysis pass on 0
DEBUG 2022-02-14 16:38:20,169 Running <numba.core.ssa._GatherDefsHandler object at 0x7fa0462b4790>
DEBUG 2022-02-14 16:38:20,169 on stmt: sched.1871 = arg(0, name=sched)
DEBUG 2022-02-14 16:38:20,169 on stmt: fixed__edge__reps = arg(1, name=fixed__edge__reps)
DEBUG 2022-02-14 16:38:20,169 on stmt: val_1179__arr = arg(2, name=val_1179__arr)
DEBUG 2022-02-14 16:38:20,169 on stmt: $const4.1.1872 = const(int, 0)
DEBUG 2022-02-14 16:38:20,169 on stmt: val_1179 = getitem(value=val_1179__arr, index=$const4.1.1872, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:20,169 on stmt: $10load_global.3.1873 = global(range: <class 'range'>)
DEBUG 2022-02-14 16:38:20,169 on stmt: $const14.5.1874 = const(int, 0)
DEBUG 2022-02-14 16:38:20,169 on stmt: $16binary_subscr.6.1875 = getitem(value=sched.1871, index=$const14.5.1874, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:20,169 on stmt: $const20.8.1876 = const(int, 1)
DEBUG 2022-02-14 16:38:20,170 on stmt: $22binary_subscr.9.1877 = getitem(value=sched.1871, index=$const20.8.1876, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:20,170 on stmt: $24load_global.10.1878 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:38:20,170 on stmt: $26load_method.11.1879 = getattr(value=$24load_global.10.1878, attr=uint8)
DEBUG 2022-02-14 16:38:20,170 on stmt: $const28.12.1880 = const(int, 1)
DEBUG 2022-02-14 16:38:20,170 on stmt: $30call_method.13.1881 = call $26load_method.11.1879($const28.12.1880, func=$26load_method.11.1879, args=[Var($const28.12.1880, <string>:3)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:20,170 on stmt: $32binary_add.14.1882 = $22binary_subscr.9.1877 + $30call_method.13.1881
DEBUG 2022-02-14 16:38:20,170 on stmt: $34call_function.15.1883 = call $10load_global.3.1873($16binary_subscr.6.1875, $32binary_add.14.1882, func=$10load_global.3.1873, args=[Var($16binary_subscr.6.1875, <string>:3), Var($32binary_add.14.1882, <string>:3)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:20,170 on stmt: $36get_iter.16.1884 = getiter(value=$34call_function.15.1883)
DEBUG 2022-02-14 16:38:20,170 on stmt: $phi38.0.1885 = $36get_iter.16.1884
DEBUG 2022-02-14 16:38:20,170 on stmt: jump 38
DEBUG 2022-02-14 16:38:20,170 ==== SSA block analysis pass on 38
DEBUG 2022-02-14 16:38:20,170 Running <numba.core.ssa._GatherDefsHandler object at 0x7fa0462b4790>
DEBUG 2022-02-14 16:38:20,170 on stmt: $38for_iter.1.1886 = iternext(value=$phi38.0.1885)
DEBUG 2022-02-14 16:38:20,170 on stmt: $38for_iter.2.1887 = pair_first(value=$38for_iter.1.1886)
DEBUG 2022-02-14 16:38:20,170 on stmt: $38for_iter.3.1888 = pair_second(value=$38for_iter.1.1886)
DEBUG 2022-02-14 16:38:20,170 on stmt: $phi40.1.1889 = $38for_iter.2.1887
DEBUG 2022-02-14 16:38:20,170 on stmt: branch $38for_iter.3.1888, 40, 246
DEBUG 2022-02-14 16:38:20,170 ==== SSA block analysis pass on 40
DEBUG 2022-02-14 16:38:20,170 Running <numba.core.ssa._GatherDefsHandler object at 0x7fa0462b4790>
DEBUG 2022-02-14 16:38:20,170 on stmt: parfor__index_1375 = $phi40.1.1889
DEBUG 2022-02-14 16:38:20,170 on stmt: jump 48
DEBUG 2022-02-14 16:38:20,170 ==== SSA block analysis pass on 246
DEBUG 2022-02-14 16:38:20,170 Running <numba.core.ssa._GatherDefsHandler object at 0x7fa0462b4790>
DEBUG 2022-02-14 16:38:20,170 on stmt: $const52.2.1890 = const(int, 0)
DEBUG 2022-02-14 16:38:20,170 on stmt: val_1179__arr[$const52.2.1890] = val_1179
DEBUG 2022-02-14 16:38:20,171 on stmt: $const56.3.1891 = const(NoneType, None)
DEBUG 2022-02-14 16:38:20,171 on stmt: $58return_value.4.1892 = cast(value=$const56.3.1891)
DEBUG 2022-02-14 16:38:20,171 on stmt: return $58return_value.4.1892
DEBUG 2022-02-14 16:38:20,171 ==== SSA block analysis pass on 48
DEBUG 2022-02-14 16:38:20,171 Running <numba.core.ssa._GatherDefsHandler object at 0x7fa0462b4790>
DEBUG 2022-02-14 16:38:20,171 on stmt: $46binary_subscr.5.1198 = getitem(value=fixed__edge__reps, index=parfor__index_1375, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:20,171 on stmt: $val.1179.1824 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=val_1179, rhs=$46binary_subscr.5.1198, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:38:20,171 on stmt: val_1179 = $val.1179.1824
DEBUG 2022-02-14 16:38:20,171 on stmt: jump 245
DEBUG 2022-02-14 16:38:20,171 ==== SSA block analysis pass on 245
DEBUG 2022-02-14 16:38:20,171 Running <numba.core.ssa._GatherDefsHandler object at 0x7fa0462b4790>
DEBUG 2022-02-14 16:38:20,171 on stmt: jump 38
DEBUG 2022-02-14 16:38:20,171 defs defaultdict(<class 'list'>,
            {'$10load_global.3.1873': [<numba.core.ir.Assign object at 0x7fa046291a60>],
             '$16binary_subscr.6.1875': [<numba.core.ir.Assign object at 0x7fa0462914f0>],
             '$22binary_subscr.9.1877': [<numba.core.ir.Assign object at 0x7fa046291af0>],
             '$24load_global.10.1878': [<numba.core.ir.Assign object at 0x7fa0462916a0>],
             '$26load_method.11.1879': [<numba.core.ir.Assign object at 0x7fa04628c130>],
             '$30call_method.13.1881': [<numba.core.ir.Assign object at 0x7fa04628c4c0>],
             '$32binary_add.14.1882': [<numba.core.ir.Assign object at 0x7fa04628c5e0>],
             '$34call_function.15.1883': [<numba.core.ir.Assign object at 0x7fa04628c790>],
             '$36get_iter.16.1884': [<numba.core.ir.Assign object at 0x7fa04628c8b0>],
             '$38for_iter.1.1886': [<numba.core.ir.Assign object at 0x7fa04628cac0>],
             '$38for_iter.2.1887': [<numba.core.ir.Assign object at 0x7fa04628cbe0>],
             '$38for_iter.3.1888': [<numba.core.ir.Assign object at 0x7fa04628cd00>],
             '$46binary_subscr.5.1198': [<numba.core.ir.Assign object at 0x7fa046841c40>],
             '$58return_value.4.1892': [<numba.core.ir.Assign object at 0x7fa0462acb50>],
             '$const14.5.1874': [<numba.core.ir.Assign object at 0x7fa046291700>],
             '$const20.8.1876': [<numba.core.ir.Assign object at 0x7fa046291220>],
             '$const28.12.1880': [<numba.core.ir.Assign object at 0x7fa04628c2b0>],
             '$const4.1.1872': [<numba.core.ir.Assign object at 0x7fa046291df0>],
             '$const52.2.1890': [<numba.core.ir.Assign object at 0x7fa0462ac790>],
             '$const56.3.1891': [<numba.core.ir.Assign object at 0x7fa0462ac9d0>],
             '$phi38.0.1885': [<numba.core.ir.Assign object at 0x7fa046291d60>],
             '$phi40.1.1889': [<numba.core.ir.Assign object at 0x7fa04628ca00>],
             '$val.1179.1824': [<numba.core.ir.Assign object at 0x7fa046841e20>],
             'fixed__edge__reps': [<numba.core.ir.Assign object at 0x7fa04628fb20>],
             'parfor__index_1375': [<numba.core.ir.Assign object at 0x7fa04628cfd0>],
             'sched.1871': [<numba.core.ir.Assign object at 0x7fa04628fc10>],
             'val_1179': [<numba.core.ir.Assign object at 0x7fa046291070>,
                          <numba.core.ir.Assign object at 0x7fa046841d30>],
             'val_1179__arr': [<numba.core.ir.Assign object at 0x7fa0457a9940>]})
DEBUG 2022-02-14 16:38:20,171 SSA violators {'val_1179'}
DEBUG 2022-02-14 16:38:20,171 Fix SSA violator on var val_1179
DEBUG 2022-02-14 16:38:20,171 ==== SSA block rewrite pass on 0
DEBUG 2022-02-14 16:38:20,171 Running <numba.core.ssa._FreshVarHandler object at 0x7fa0462b45e0>
DEBUG 2022-02-14 16:38:20,171 on stmt: sched.1871 = arg(0, name=sched)
DEBUG 2022-02-14 16:38:20,171 on stmt: fixed__edge__reps = arg(1, name=fixed__edge__reps)
DEBUG 2022-02-14 16:38:20,171 on stmt: val_1179__arr = arg(2, name=val_1179__arr)
DEBUG 2022-02-14 16:38:20,172 on stmt: $const4.1.1872 = const(int, 0)
DEBUG 2022-02-14 16:38:20,172 on stmt: val_1179 = getitem(value=val_1179__arr, index=$const4.1.1872, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:20,172 first assign: val_1179
DEBUG 2022-02-14 16:38:20,172 replaced with: val_1179 = getitem(value=val_1179__arr, index=$const4.1.1872, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:20,172 on stmt: $10load_global.3.1873 = global(range: <class 'range'>)
DEBUG 2022-02-14 16:38:20,172 on stmt: $const14.5.1874 = const(int, 0)
DEBUG 2022-02-14 16:38:20,172 on stmt: $16binary_subscr.6.1875 = getitem(value=sched.1871, index=$const14.5.1874, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:20,172 on stmt: $const20.8.1876 = const(int, 1)
DEBUG 2022-02-14 16:38:20,172 on stmt: $22binary_subscr.9.1877 = getitem(value=sched.1871, index=$const20.8.1876, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:20,172 on stmt: $24load_global.10.1878 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:38:20,172 on stmt: $26load_method.11.1879 = getattr(value=$24load_global.10.1878, attr=uint8)
DEBUG 2022-02-14 16:38:20,172 on stmt: $const28.12.1880 = const(int, 1)
DEBUG 2022-02-14 16:38:20,172 on stmt: $30call_method.13.1881 = call $26load_method.11.1879($const28.12.1880, func=$26load_method.11.1879, args=[Var($const28.12.1880, <string>:3)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:20,172 on stmt: $32binary_add.14.1882 = $22binary_subscr.9.1877 + $30call_method.13.1881
DEBUG 2022-02-14 16:38:20,172 on stmt: $34call_function.15.1883 = call $10load_global.3.1873($16binary_subscr.6.1875, $32binary_add.14.1882, func=$10load_global.3.1873, args=[Var($16binary_subscr.6.1875, <string>:3), Var($32binary_add.14.1882, <string>:3)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:20,172 on stmt: $36get_iter.16.1884 = getiter(value=$34call_function.15.1883)
DEBUG 2022-02-14 16:38:20,172 on stmt: $phi38.0.1885 = $36get_iter.16.1884
DEBUG 2022-02-14 16:38:20,172 on stmt: jump 38
DEBUG 2022-02-14 16:38:20,172 ==== SSA block rewrite pass on 38
DEBUG 2022-02-14 16:38:20,172 Running <numba.core.ssa._FreshVarHandler object at 0x7fa0462b45e0>
DEBUG 2022-02-14 16:38:20,173 on stmt: $38for_iter.1.1886 = iternext(value=$phi38.0.1885)
DEBUG 2022-02-14 16:38:20,173 on stmt: $38for_iter.2.1887 = pair_first(value=$38for_iter.1.1886)
DEBUG 2022-02-14 16:38:20,173 on stmt: $38for_iter.3.1888 = pair_second(value=$38for_iter.1.1886)
DEBUG 2022-02-14 16:38:20,173 on stmt: $phi40.1.1889 = $38for_iter.2.1887
DEBUG 2022-02-14 16:38:20,173 on stmt: branch $38for_iter.3.1888, 40, 246
DEBUG 2022-02-14 16:38:20,173 ==== SSA block rewrite pass on 40
DEBUG 2022-02-14 16:38:20,173 Running <numba.core.ssa._FreshVarHandler object at 0x7fa0462b45e0>
DEBUG 2022-02-14 16:38:20,173 on stmt: parfor__index_1375 = $phi40.1.1889
DEBUG 2022-02-14 16:38:20,173 on stmt: jump 48
DEBUG 2022-02-14 16:38:20,173 ==== SSA block rewrite pass on 246
DEBUG 2022-02-14 16:38:20,173 Running <numba.core.ssa._FreshVarHandler object at 0x7fa0462b45e0>
DEBUG 2022-02-14 16:38:20,173 on stmt: $const52.2.1890 = const(int, 0)
DEBUG 2022-02-14 16:38:20,173 on stmt: val_1179__arr[$const52.2.1890] = val_1179
DEBUG 2022-02-14 16:38:20,173 on stmt: $const56.3.1891 = const(NoneType, None)
DEBUG 2022-02-14 16:38:20,173 on stmt: $58return_value.4.1892 = cast(value=$const56.3.1891)
DEBUG 2022-02-14 16:38:20,173 on stmt: return $58return_value.4.1892
DEBUG 2022-02-14 16:38:20,173 ==== SSA block rewrite pass on 48
DEBUG 2022-02-14 16:38:20,173 Running <numba.core.ssa._FreshVarHandler object at 0x7fa0462b45e0>
DEBUG 2022-02-14 16:38:20,173 on stmt: $46binary_subscr.5.1198 = getitem(value=fixed__edge__reps, index=parfor__index_1375, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:20,173 on stmt: $val.1179.1824 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=val_1179, rhs=$46binary_subscr.5.1198, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:38:20,173 on stmt: val_1179 = $val.1179.1824
DEBUG 2022-02-14 16:38:20,174 replaced with: val_1179.1 = $val.1179.1824
DEBUG 2022-02-14 16:38:20,174 on stmt: jump 245
DEBUG 2022-02-14 16:38:20,174 ==== SSA block rewrite pass on 245
DEBUG 2022-02-14 16:38:20,174 Running <numba.core.ssa._FreshVarHandler object at 0x7fa0462b45e0>
DEBUG 2022-02-14 16:38:20,174 on stmt: jump 38
DEBUG 2022-02-14 16:38:20,174 Replaced assignments: defaultdict(<class 'list'>,
            {0: [<numba.core.ir.Assign object at 0x7fa0462b4850>],
             48: [<numba.core.ir.Assign object at 0x7fa0462b4ee0>]})
DEBUG 2022-02-14 16:38:20,174 ==== SSA block rewrite pass on 0
DEBUG 2022-02-14 16:38:20,174 Running <numba.core.ssa._FixSSAVars object at 0x7fa0462b45e0>
DEBUG 2022-02-14 16:38:20,174 on stmt: sched.1871 = arg(0, name=sched)
DEBUG 2022-02-14 16:38:20,174 on stmt: fixed__edge__reps = arg(1, name=fixed__edge__reps)
DEBUG 2022-02-14 16:38:20,174 on stmt: val_1179__arr = arg(2, name=val_1179__arr)
DEBUG 2022-02-14 16:38:20,174 on stmt: $const4.1.1872 = const(int, 0)
DEBUG 2022-02-14 16:38:20,174 on stmt: val_1179 = getitem(value=val_1179__arr, index=$const4.1.1872, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:20,174 on stmt: $10load_global.3.1873 = global(range: <class 'range'>)
DEBUG 2022-02-14 16:38:20,174 on stmt: $const14.5.1874 = const(int, 0)
DEBUG 2022-02-14 16:38:20,174 on stmt: $16binary_subscr.6.1875 = getitem(value=sched.1871, index=$const14.5.1874, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:20,174 on stmt: $const20.8.1876 = const(int, 1)
DEBUG 2022-02-14 16:38:20,174 on stmt: $22binary_subscr.9.1877 = getitem(value=sched.1871, index=$const20.8.1876, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:20,174 on stmt: $24load_global.10.1878 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:38:20,174 on stmt: $26load_method.11.1879 = getattr(value=$24load_global.10.1878, attr=uint8)
DEBUG 2022-02-14 16:38:20,174 on stmt: $const28.12.1880 = const(int, 1)
DEBUG 2022-02-14 16:38:20,174 on stmt: $30call_method.13.1881 = call $26load_method.11.1879($const28.12.1880, func=$26load_method.11.1879, args=[Var($const28.12.1880, <string>:3)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:20,174 on stmt: $32binary_add.14.1882 = $22binary_subscr.9.1877 + $30call_method.13.1881
DEBUG 2022-02-14 16:38:20,175 on stmt: $34call_function.15.1883 = call $10load_global.3.1873($16binary_subscr.6.1875, $32binary_add.14.1882, func=$10load_global.3.1873, args=[Var($16binary_subscr.6.1875, <string>:3), Var($32binary_add.14.1882, <string>:3)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:20,175 on stmt: $36get_iter.16.1884 = getiter(value=$34call_function.15.1883)
DEBUG 2022-02-14 16:38:20,175 on stmt: $phi38.0.1885 = $36get_iter.16.1884
DEBUG 2022-02-14 16:38:20,175 on stmt: jump 38
DEBUG 2022-02-14 16:38:20,175 ==== SSA block rewrite pass on 38
DEBUG 2022-02-14 16:38:20,175 Running <numba.core.ssa._FixSSAVars object at 0x7fa0462b45e0>
DEBUG 2022-02-14 16:38:20,175 on stmt: $38for_iter.1.1886 = iternext(value=$phi38.0.1885)
DEBUG 2022-02-14 16:38:20,175 on stmt: $38for_iter.2.1887 = pair_first(value=$38for_iter.1.1886)
DEBUG 2022-02-14 16:38:20,175 on stmt: $38for_iter.3.1888 = pair_second(value=$38for_iter.1.1886)
DEBUG 2022-02-14 16:38:20,175 on stmt: $phi40.1.1889 = $38for_iter.2.1887
DEBUG 2022-02-14 16:38:20,175 on stmt: branch $38for_iter.3.1888, 40, 246
DEBUG 2022-02-14 16:38:20,175 ==== SSA block rewrite pass on 40
DEBUG 2022-02-14 16:38:20,175 Running <numba.core.ssa._FixSSAVars object at 0x7fa0462b45e0>
DEBUG 2022-02-14 16:38:20,175 on stmt: parfor__index_1375 = $phi40.1.1889
DEBUG 2022-02-14 16:38:20,175 on stmt: jump 48
DEBUG 2022-02-14 16:38:20,175 ==== SSA block rewrite pass on 246
DEBUG 2022-02-14 16:38:20,175 Running <numba.core.ssa._FixSSAVars object at 0x7fa0462b45e0>
DEBUG 2022-02-14 16:38:20,175 on stmt: $const52.2.1890 = const(int, 0)
DEBUG 2022-02-14 16:38:20,175 on stmt: val_1179__arr[$const52.2.1890] = val_1179
DEBUG 2022-02-14 16:38:20,175 find_def var='val_1179' stmt=val_1179__arr[$const52.2.1890] = val_1179
DEBUG 2022-02-14 16:38:20,175 find_def_from_top label 246
DEBUG 2022-02-14 16:38:20,175 idom 38 from label 246
DEBUG 2022-02-14 16:38:20,175 find_def_from_bottom label 38
DEBUG 2022-02-14 16:38:20,175 find_def_from_top label 38
DEBUG 2022-02-14 16:38:20,175 insert phi node val_1179.2 = phi(incoming_values=[], incoming_blocks=[]) at 38
DEBUG 2022-02-14 16:38:20,176 find_def_from_bottom label 0
DEBUG 2022-02-14 16:38:20,176 incoming_def val_1179 = getitem(value=val_1179__arr, index=$const4.1.1872, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:20,176 find_def_from_bottom label 245
DEBUG 2022-02-14 16:38:20,176 find_def_from_top label 245
DEBUG 2022-02-14 16:38:20,176 idom 48 from label 245
DEBUG 2022-02-14 16:38:20,176 find_def_from_bottom label 48
DEBUG 2022-02-14 16:38:20,176 incoming_def val_1179.1 = $val.1179.1824
DEBUG 2022-02-14 16:38:20,176 replaced with: val_1179__arr[$const52.2.1890] = val_1179.2
DEBUG 2022-02-14 16:38:20,176 on stmt: $const56.3.1891 = const(NoneType, None)
DEBUG 2022-02-14 16:38:20,176 on stmt: $58return_value.4.1892 = cast(value=$const56.3.1891)
DEBUG 2022-02-14 16:38:20,176 on stmt: return $58return_value.4.1892
DEBUG 2022-02-14 16:38:20,176 ==== SSA block rewrite pass on 48
DEBUG 2022-02-14 16:38:20,176 Running <numba.core.ssa._FixSSAVars object at 0x7fa0462b45e0>
DEBUG 2022-02-14 16:38:20,176 on stmt: $46binary_subscr.5.1198 = getitem(value=fixed__edge__reps, index=parfor__index_1375, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:20,176 on stmt: $val.1179.1824 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=val_1179, rhs=$46binary_subscr.5.1198, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:38:20,176 find_def var='val_1179' stmt=$val.1179.1824 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=val_1179, rhs=$46binary_subscr.5.1198, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:38:20,176 find_def_from_top label 48
DEBUG 2022-02-14 16:38:20,176 idom 40 from label 48
DEBUG 2022-02-14 16:38:20,176 find_def_from_bottom label 40
DEBUG 2022-02-14 16:38:20,176 find_def_from_top label 40
DEBUG 2022-02-14 16:38:20,176 idom 38 from label 40
DEBUG 2022-02-14 16:38:20,176 find_def_from_bottom label 38
DEBUG 2022-02-14 16:38:20,176 replaced with: $val.1179.1824 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=val_1179.2, rhs=$46binary_subscr.5.1198, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:38:20,176 on stmt: val_1179.1 = $val.1179.1824
DEBUG 2022-02-14 16:38:20,176 on stmt: jump 245
DEBUG 2022-02-14 16:38:20,177 ==== SSA block rewrite pass on 245
DEBUG 2022-02-14 16:38:20,177 Running <numba.core.ssa._FixSSAVars object at 0x7fa0462b45e0>
DEBUG 2022-02-14 16:38:20,177 on stmt: jump 38
DEBUG 2022-02-14 16:38:20,642 bytecode dump:
>          0	NOP(arg=None, lineno=2)
           2	LOAD_FAST(arg=2, lineno=2)
           4	LOAD_CONST(arg=1, lineno=2)
           6	BINARY_SUBSCR(arg=None, lineno=2)
           8	STORE_FAST(arg=4, lineno=2)
          10	LOAD_FAST(arg=3, lineno=3)
          12	LOAD_CONST(arg=1, lineno=3)
          14	BINARY_SUBSCR(arg=None, lineno=3)
          16	STORE_FAST(arg=5, lineno=3)
          18	LOAD_GLOBAL(arg=0, lineno=4)
          20	LOAD_FAST(arg=0, lineno=4)
          22	LOAD_CONST(arg=1, lineno=4)
          24	BINARY_SUBSCR(arg=None, lineno=4)
          26	LOAD_FAST(arg=0, lineno=4)
          28	LOAD_CONST(arg=2, lineno=4)
          30	BINARY_SUBSCR(arg=None, lineno=4)
          32	LOAD_GLOBAL(arg=1, lineno=4)
          34	LOAD_METHOD(arg=2, lineno=4)
          36	LOAD_CONST(arg=2, lineno=4)
          38	CALL_METHOD(arg=1, lineno=4)
          40	BINARY_ADD(arg=None, lineno=4)
          42	CALL_FUNCTION(arg=2, lineno=4)
          44	GET_ITER(arg=None, lineno=4)
>         46	FOR_ITER(arg=8, lineno=4)
          48	STORE_FAST(arg=6, lineno=4)
          50	LOAD_CONST(arg=1, lineno=5)
          52	STORE_FAST(arg=7, lineno=5)
          54	JUMP_ABSOLUTE(arg=46, lineno=5)
>         56	LOAD_FAST(arg=4, lineno=6)
          58	LOAD_FAST(arg=2, lineno=6)
          60	LOAD_CONST(arg=1, lineno=6)
          62	STORE_SUBSCR(arg=None, lineno=6)
          64	LOAD_FAST(arg=5, lineno=7)
          66	LOAD_FAST(arg=3, lineno=7)
          68	LOAD_CONST(arg=1, lineno=7)
          70	STORE_SUBSCR(arg=None, lineno=7)
          72	LOAD_CONST(arg=0, lineno=8)
          74	RETURN_VALUE(arg=None, lineno=8)
DEBUG 2022-02-14 16:38:20,642 pending: deque([State(pc_initial=0 nstack_initial=0)])
DEBUG 2022-02-14 16:38:20,642 stack: []
DEBUG 2022-02-14 16:38:20,643 dispatch pc=0, inst=NOP(arg=None, lineno=2)
DEBUG 2022-02-14 16:38:20,643 stack []
DEBUG 2022-02-14 16:38:20,643 dispatch pc=2, inst=LOAD_FAST(arg=2, lineno=2)
DEBUG 2022-02-14 16:38:20,643 stack []
DEBUG 2022-02-14 16:38:20,643 dispatch pc=4, inst=LOAD_CONST(arg=1, lineno=2)
DEBUG 2022-02-14 16:38:20,643 stack ['$val_1250__arr2.0']
DEBUG 2022-02-14 16:38:20,643 dispatch pc=6, inst=BINARY_SUBSCR(arg=None, lineno=2)
DEBUG 2022-02-14 16:38:20,643 stack ['$val_1250__arr2.0', '$const4.1']
DEBUG 2022-02-14 16:38:20,643 dispatch pc=8, inst=STORE_FAST(arg=4, lineno=2)
DEBUG 2022-02-14 16:38:20,643 stack ['$6binary_subscr.2']
DEBUG 2022-02-14 16:38:20,643 dispatch pc=10, inst=LOAD_FAST(arg=3, lineno=3)
DEBUG 2022-02-14 16:38:20,643 stack []
DEBUG 2022-02-14 16:38:20,643 dispatch pc=12, inst=LOAD_CONST(arg=1, lineno=3)
DEBUG 2022-02-14 16:38:20,643 stack ['$val_1209__arr10.3']
DEBUG 2022-02-14 16:38:20,643 dispatch pc=14, inst=BINARY_SUBSCR(arg=None, lineno=3)
DEBUG 2022-02-14 16:38:20,643 stack ['$val_1209__arr10.3', '$const12.4']
DEBUG 2022-02-14 16:38:20,643 dispatch pc=16, inst=STORE_FAST(arg=5, lineno=3)
DEBUG 2022-02-14 16:38:20,643 stack ['$14binary_subscr.5']
DEBUG 2022-02-14 16:38:20,643 dispatch pc=18, inst=LOAD_GLOBAL(arg=0, lineno=4)
DEBUG 2022-02-14 16:38:20,643 stack []
DEBUG 2022-02-14 16:38:20,643 dispatch pc=20, inst=LOAD_FAST(arg=0, lineno=4)
DEBUG 2022-02-14 16:38:20,643 stack ['$18load_global.6']
DEBUG 2022-02-14 16:38:20,643 dispatch pc=22, inst=LOAD_CONST(arg=1, lineno=4)
DEBUG 2022-02-14 16:38:20,643 stack ['$18load_global.6', '$sched20.7']
DEBUG 2022-02-14 16:38:20,643 dispatch pc=24, inst=BINARY_SUBSCR(arg=None, lineno=4)
DEBUG 2022-02-14 16:38:20,644 stack ['$18load_global.6', '$sched20.7', '$const22.8']
DEBUG 2022-02-14 16:38:20,644 dispatch pc=26, inst=LOAD_FAST(arg=0, lineno=4)
DEBUG 2022-02-14 16:38:20,644 stack ['$18load_global.6', '$24binary_subscr.9']
DEBUG 2022-02-14 16:38:20,644 dispatch pc=28, inst=LOAD_CONST(arg=2, lineno=4)
DEBUG 2022-02-14 16:38:20,644 stack ['$18load_global.6', '$24binary_subscr.9', '$sched26.10']
DEBUG 2022-02-14 16:38:20,644 dispatch pc=30, inst=BINARY_SUBSCR(arg=None, lineno=4)
DEBUG 2022-02-14 16:38:20,644 stack ['$18load_global.6', '$24binary_subscr.9', '$sched26.10', '$const28.11']
DEBUG 2022-02-14 16:38:20,644 dispatch pc=32, inst=LOAD_GLOBAL(arg=1, lineno=4)
DEBUG 2022-02-14 16:38:20,644 stack ['$18load_global.6', '$24binary_subscr.9', '$30binary_subscr.12']
DEBUG 2022-02-14 16:38:20,644 dispatch pc=34, inst=LOAD_METHOD(arg=2, lineno=4)
DEBUG 2022-02-14 16:38:20,644 stack ['$18load_global.6', '$24binary_subscr.9', '$30binary_subscr.12', '$32load_global.13']
DEBUG 2022-02-14 16:38:20,644 dispatch pc=36, inst=LOAD_CONST(arg=2, lineno=4)
DEBUG 2022-02-14 16:38:20,644 stack ['$18load_global.6', '$24binary_subscr.9', '$30binary_subscr.12', '$34load_method.14']
DEBUG 2022-02-14 16:38:20,644 dispatch pc=38, inst=CALL_METHOD(arg=1, lineno=4)
DEBUG 2022-02-14 16:38:20,644 stack ['$18load_global.6', '$24binary_subscr.9', '$30binary_subscr.12', '$34load_method.14', '$const36.15']
DEBUG 2022-02-14 16:38:20,644 dispatch pc=40, inst=BINARY_ADD(arg=None, lineno=4)
DEBUG 2022-02-14 16:38:20,644 stack ['$18load_global.6', '$24binary_subscr.9', '$30binary_subscr.12', '$38call_method.16']
DEBUG 2022-02-14 16:38:20,644 dispatch pc=42, inst=CALL_FUNCTION(arg=2, lineno=4)
DEBUG 2022-02-14 16:38:20,644 stack ['$18load_global.6', '$24binary_subscr.9', '$40binary_add.17']
DEBUG 2022-02-14 16:38:20,644 dispatch pc=44, inst=GET_ITER(arg=None, lineno=4)
DEBUG 2022-02-14 16:38:20,644 stack ['$42call_function.18']
DEBUG 2022-02-14 16:38:20,644 end state. edges=[Edge(pc=46, stack=('$44get_iter.19',), blockstack=(), npush=0)]
DEBUG 2022-02-14 16:38:20,644 pending: deque([State(pc_initial=46 nstack_initial=1)])
DEBUG 2022-02-14 16:38:20,644 stack: ['$phi46.0']
DEBUG 2022-02-14 16:38:20,644 dispatch pc=46, inst=FOR_ITER(arg=8, lineno=4)
DEBUG 2022-02-14 16:38:20,645 stack ['$phi46.0']
DEBUG 2022-02-14 16:38:20,645 end state. edges=[Edge(pc=56, stack=(), blockstack=(), npush=0), Edge(pc=48, stack=('$phi46.0', '$46for_iter.2'), blockstack=(), npush=0)]
DEBUG 2022-02-14 16:38:20,645 pending: deque([State(pc_initial=56 nstack_initial=0), State(pc_initial=48 nstack_initial=2)])
DEBUG 2022-02-14 16:38:20,645 stack: []
DEBUG 2022-02-14 16:38:20,645 dispatch pc=56, inst=LOAD_FAST(arg=4, lineno=6)
DEBUG 2022-02-14 16:38:20,645 stack []
DEBUG 2022-02-14 16:38:20,645 dispatch pc=58, inst=LOAD_FAST(arg=2, lineno=6)
DEBUG 2022-02-14 16:38:20,645 stack ['$val_125056.0']
DEBUG 2022-02-14 16:38:20,645 dispatch pc=60, inst=LOAD_CONST(arg=1, lineno=6)
DEBUG 2022-02-14 16:38:20,645 stack ['$val_125056.0', '$val_1250__arr58.1']
DEBUG 2022-02-14 16:38:20,645 dispatch pc=62, inst=STORE_SUBSCR(arg=None, lineno=6)
DEBUG 2022-02-14 16:38:20,645 stack ['$val_125056.0', '$val_1250__arr58.1', '$const60.2']
DEBUG 2022-02-14 16:38:20,645 dispatch pc=64, inst=LOAD_FAST(arg=5, lineno=7)
DEBUG 2022-02-14 16:38:20,645 stack []
DEBUG 2022-02-14 16:38:20,645 dispatch pc=66, inst=LOAD_FAST(arg=3, lineno=7)
DEBUG 2022-02-14 16:38:20,645 stack ['$val_120964.3']
DEBUG 2022-02-14 16:38:20,645 dispatch pc=68, inst=LOAD_CONST(arg=1, lineno=7)
DEBUG 2022-02-14 16:38:20,645 stack ['$val_120964.3', '$val_1209__arr66.4']
DEBUG 2022-02-14 16:38:20,645 dispatch pc=70, inst=STORE_SUBSCR(arg=None, lineno=7)
DEBUG 2022-02-14 16:38:20,645 stack ['$val_120964.3', '$val_1209__arr66.4', '$const68.5']
DEBUG 2022-02-14 16:38:20,645 dispatch pc=72, inst=LOAD_CONST(arg=0, lineno=8)
DEBUG 2022-02-14 16:38:20,645 stack []
DEBUG 2022-02-14 16:38:20,645 dispatch pc=74, inst=RETURN_VALUE(arg=None, lineno=8)
DEBUG 2022-02-14 16:38:20,645 stack ['$const72.6']
DEBUG 2022-02-14 16:38:20,645 end state. edges=[]
DEBUG 2022-02-14 16:38:20,646 pending: deque([State(pc_initial=48 nstack_initial=2)])
DEBUG 2022-02-14 16:38:20,646 stack: ['$phi48.0', '$phi48.1']
DEBUG 2022-02-14 16:38:20,646 dispatch pc=48, inst=STORE_FAST(arg=6, lineno=4)
DEBUG 2022-02-14 16:38:20,646 stack ['$phi48.0', '$phi48.1']
DEBUG 2022-02-14 16:38:20,646 dispatch pc=50, inst=LOAD_CONST(arg=1, lineno=5)
DEBUG 2022-02-14 16:38:20,646 stack ['$phi48.0']
DEBUG 2022-02-14 16:38:20,646 dispatch pc=52, inst=STORE_FAST(arg=7, lineno=5)
DEBUG 2022-02-14 16:38:20,646 stack ['$phi48.0', '$const50.2']
DEBUG 2022-02-14 16:38:20,646 dispatch pc=54, inst=JUMP_ABSOLUTE(arg=46, lineno=5)
DEBUG 2022-02-14 16:38:20,646 stack ['$phi48.0']
DEBUG 2022-02-14 16:38:20,646 end state. edges=[Edge(pc=46, stack=('$phi48.0',), blockstack=(), npush=0)]
DEBUG 2022-02-14 16:38:20,646 pending: deque([State(pc_initial=46 nstack_initial=1)])
DEBUG 2022-02-14 16:38:20,646 -------------------------Prune PHIs-------------------------
DEBUG 2022-02-14 16:38:20,646 Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=46 nstack_initial=1): {'$phi46.0'},
             State(pc_initial=48 nstack_initial=2): {'$phi48.1'},
             State(pc_initial=56 nstack_initial=0): set()})
DEBUG 2022-02-14 16:38:20,646 defmap: {'$phi46.0': State(pc_initial=0 nstack_initial=0),
 '$phi48.1': State(pc_initial=46 nstack_initial=1)}
DEBUG 2022-02-14 16:38:20,646 phismap: defaultdict(<class 'set'>,
            {'$phi46.0': {('$44get_iter.19',
                           State(pc_initial=0 nstack_initial=0)),
                          ('$phi48.0', State(pc_initial=48 nstack_initial=2))},
             '$phi48.0': {('$phi46.0', State(pc_initial=46 nstack_initial=1))},
             '$phi48.1': {('$46for_iter.2',
                           State(pc_initial=46 nstack_initial=1))}})
DEBUG 2022-02-14 16:38:20,646 changing phismap: defaultdict(<class 'set'>,
            {'$phi46.0': {('$44get_iter.19',
                           State(pc_initial=0 nstack_initial=0)),
                          ('$phi46.0', State(pc_initial=46 nstack_initial=1))},
             '$phi48.0': {('$44get_iter.19',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi48.1': {('$46for_iter.2',
                           State(pc_initial=46 nstack_initial=1))}})
DEBUG 2022-02-14 16:38:20,647 changing phismap: defaultdict(<class 'set'>,
            {'$phi46.0': {('$44get_iter.19',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi48.0': {('$44get_iter.19',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi48.1': {('$46for_iter.2',
                           State(pc_initial=46 nstack_initial=1))}})
DEBUG 2022-02-14 16:38:20,647 changing phismap: defaultdict(<class 'set'>,
            {'$phi46.0': {('$44get_iter.19',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi48.0': {('$44get_iter.19',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi48.1': {('$46for_iter.2',
                           State(pc_initial=46 nstack_initial=1))}})
DEBUG 2022-02-14 16:38:20,647 keep phismap: {'$phi46.0': {('$44get_iter.19', State(pc_initial=0 nstack_initial=0))},
 '$phi48.1': {('$46for_iter.2', State(pc_initial=46 nstack_initial=1))}}
DEBUG 2022-02-14 16:38:20,647 new_out: defaultdict(<class 'dict'>,
            {State(pc_initial=0 nstack_initial=0): {'$phi46.0': '$44get_iter.19'},
             State(pc_initial=46 nstack_initial=1): {'$phi48.1': '$46for_iter.2'}})
DEBUG 2022-02-14 16:38:20,647 ----------------------DONE Prune PHIs-----------------------
DEBUG 2022-02-14 16:38:20,647 block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$val_1250__arr2.0'}), (4, {'res': '$const4.1'}), (6, {'index': '$const4.1', 'target': '$val_1250__arr2.0', 'res': '$6binary_subscr.2'}), (8, {'value': '$6binary_subscr.2'}), (10, {'res': '$val_1209__arr10.3'}), (12, {'res': '$const12.4'}), (14, {'index': '$const12.4', 'target': '$val_1209__arr10.3', 'res': '$14binary_subscr.5'}), (16, {'value': '$14binary_subscr.5'}), (18, {'res': '$18load_global.6'}), (20, {'res': '$sched20.7'}), (22, {'res': '$const22.8'}), (24, {'index': '$const22.8', 'target': '$sched20.7', 'res': '$24binary_subscr.9'}), (26, {'res': '$sched26.10'}), (28, {'res': '$const28.11'}), (30, {'index': '$const28.11', 'target': '$sched26.10', 'res': '$30binary_subscr.12'}), (32, {'res': '$32load_global.13'}), (34, {'item': '$32load_global.13', 'res': '$34load_method.14'}), (36, {'res': '$const36.15'}), (38, {'func': '$34load_method.14', 'args': ['$const36.15'], 'res': '$38call_method.16'}), (40, {'lhs': '$30binary_subscr.12', 'rhs': '$38call_method.16', 'res': '$40binary_add.17'}), (42, {'func': '$18load_global.6', 'args': ['$24binary_subscr.9', '$40binary_add.17'], 'res': '$42call_function.18'}), (44, {'value': '$42call_function.18', 'res': '$44get_iter.19'})), outgoing_phis={'$phi46.0': '$44get_iter.19'}, blockstack=(), active_try_block=None, outgoing_edgepushed={46: ('$44get_iter.19',)})
DEBUG 2022-02-14 16:38:20,648 block_infos State(pc_initial=46 nstack_initial=1):
AdaptBlockInfo(insts=((46, {'iterator': '$phi46.0', 'pair': '$46for_iter.1', 'indval': '$46for_iter.2', 'pred': '$46for_iter.3'}),), outgoing_phis={'$phi48.1': '$46for_iter.2'}, blockstack=(), active_try_block=None, outgoing_edgepushed={56: (), 48: ('$phi46.0', '$46for_iter.2')})
DEBUG 2022-02-14 16:38:20,648 block_infos State(pc_initial=48 nstack_initial=2):
AdaptBlockInfo(insts=((48, {'value': '$phi48.1'}), (50, {'res': '$const50.2'}), (52, {'value': '$const50.2'}), (54, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={46: ('$phi48.0',)})
DEBUG 2022-02-14 16:38:20,648 block_infos State(pc_initial=56 nstack_initial=0):
AdaptBlockInfo(insts=((56, {'res': '$val_125056.0'}), (58, {'res': '$val_1250__arr58.1'}), (60, {'res': '$const60.2'}), (62, {'target': '$val_1250__arr58.1', 'index': '$const60.2', 'value': '$val_125056.0'}), (64, {'res': '$val_120964.3'}), (66, {'res': '$val_1209__arr66.4'}), (68, {'res': '$const68.5'}), (70, {'target': '$val_1209__arr66.4', 'index': '$const68.5', 'value': '$val_120964.3'}), (72, {'res': '$const72.6'}), (74, {'retval': '$const72.6', 'castval': '$74return_value.7'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG 2022-02-14 16:38:20,649 label 0:
    sched = arg(0, name=sched)               ['sched']
    edge__reps = arg(1, name=edge__reps)     ['edge__reps']
    val_1250__arr = arg(2, name=val_1250__arr) ['val_1250__arr']
    val_1209__arr = arg(3, name=val_1209__arr) ['val_1209__arr']
    $const4.1 = const(int, 0)                ['$const4.1']
    val_1250 = getitem(value=val_1250__arr, index=$const4.1, fn=<built-in function getitem>) ['$const4.1', 'val_1250', 'val_1250__arr']
    $const12.4 = const(int, 0)               ['$const12.4']
    val_1209 = getitem(value=val_1209__arr, index=$const12.4, fn=<built-in function getitem>) ['$const12.4', 'val_1209', 'val_1209__arr']
    $18load_global.6 = global(range: <class 'range'>) ['$18load_global.6']
    $const22.8 = const(int, 0)               ['$const22.8']
    $24binary_subscr.9 = getitem(value=sched, index=$const22.8, fn=<built-in function getitem>) ['$24binary_subscr.9', '$const22.8', 'sched']
    $const28.11 = const(int, 1)              ['$const28.11']
    $30binary_subscr.12 = getitem(value=sched, index=$const28.11, fn=<built-in function getitem>) ['$30binary_subscr.12', '$const28.11', 'sched']
    $32load_global.13 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>) ['$32load_global.13']
    $34load_method.14 = getattr(value=$32load_global.13, attr=uint8) ['$32load_global.13', '$34load_method.14']
    $const36.15 = const(int, 1)              ['$const36.15']
    $38call_method.16 = call $34load_method.14($const36.15, func=$34load_method.14, args=[Var($const36.15, <string>:4)], kws=(), vararg=None, target=None) ['$34load_method.14', '$38call_method.16', '$const36.15']
    $40binary_add.17 = $30binary_subscr.12 + $38call_method.16 ['$30binary_subscr.12', '$38call_method.16', '$40binary_add.17']
    $42call_function.18 = call $18load_global.6($24binary_subscr.9, $40binary_add.17, func=$18load_global.6, args=[Var($24binary_subscr.9, <string>:4), Var($40binary_add.17, <string>:4)], kws=(), vararg=None, target=None) ['$18load_global.6', '$24binary_subscr.9', '$40binary_add.17', '$42call_function.18']
    $44get_iter.19 = getiter(value=$42call_function.18) ['$42call_function.18', '$44get_iter.19']
    $phi46.0 = $44get_iter.19                ['$44get_iter.19', '$phi46.0']
    jump 46                                  []
label 46:
    $46for_iter.1 = iternext(value=$phi46.0) ['$46for_iter.1', '$phi46.0']
    $46for_iter.2 = pair_first(value=$46for_iter.1) ['$46for_iter.1', '$46for_iter.2']
    $46for_iter.3 = pair_second(value=$46for_iter.1) ['$46for_iter.1', '$46for_iter.3']
    $phi48.1 = $46for_iter.2                 ['$46for_iter.2', '$phi48.1']
    branch $46for_iter.3, 48, 56             ['$46for_iter.3']
label 48:
    parfor__index_1349 = $phi48.1            ['$phi48.1', 'parfor__index_1349']
    __sentinel__0 = const(int, 0)            ['__sentinel__0']
    jump 46                                  []
label 56:
    $const60.2 = const(int, 0)               ['$const60.2']
    val_1250__arr[$const60.2] = val_1250     ['$const60.2', 'val_1250', 'val_1250__arr']
    $const68.5 = const(int, 0)               ['$const68.5']
    val_1209__arr[$const68.5] = val_1209     ['$const68.5', 'val_1209', 'val_1209__arr']
    $const72.6 = const(NoneType, None)       ['$const72.6']
    $74return_value.7 = cast(value=$const72.6) ['$74return_value.7', '$const72.6']
    return $74return_value.7                 ['$74return_value.7']

DEBUG 2022-02-14 16:38:20,654 ==== SSA block analysis pass on 0
DEBUG 2022-02-14 16:38:20,654 Running <numba.core.ssa._GatherDefsHandler object at 0x7fa041df9730>
DEBUG 2022-02-14 16:38:20,654 on stmt: sched.1947 = arg(0, name=sched)
DEBUG 2022-02-14 16:38:20,654 on stmt: edge__reps = arg(1, name=edge__reps)
DEBUG 2022-02-14 16:38:20,654 on stmt: val_1250__arr = arg(2, name=val_1250__arr)
DEBUG 2022-02-14 16:38:20,654 on stmt: val_1209__arr = arg(3, name=val_1209__arr)
DEBUG 2022-02-14 16:38:20,654 on stmt: $const4.1.1948 = const(int, 0)
DEBUG 2022-02-14 16:38:20,654 on stmt: val_1250 = getitem(value=val_1250__arr, index=$const4.1.1948, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:20,654 on stmt: $const12.4.1949 = const(int, 0)
DEBUG 2022-02-14 16:38:20,654 on stmt: val_1209 = getitem(value=val_1209__arr, index=$const12.4.1949, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:20,655 on stmt: $18load_global.6.1950 = global(range: <class 'range'>)
DEBUG 2022-02-14 16:38:20,655 on stmt: $const22.8.1951 = const(int, 0)
DEBUG 2022-02-14 16:38:20,655 on stmt: $24binary_subscr.9.1952 = getitem(value=sched.1947, index=$const22.8.1951, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:20,655 on stmt: $const28.11.1953 = const(int, 1)
DEBUG 2022-02-14 16:38:20,655 on stmt: $30binary_subscr.12.1954 = getitem(value=sched.1947, index=$const28.11.1953, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:20,655 on stmt: $32load_global.13.1955 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:38:20,655 on stmt: $34load_method.14.1956 = getattr(value=$32load_global.13.1955, attr=uint8)
DEBUG 2022-02-14 16:38:20,655 on stmt: $const36.15.1957 = const(int, 1)
DEBUG 2022-02-14 16:38:20,655 on stmt: $38call_method.16.1958 = call $34load_method.14.1956($const36.15.1957, func=$34load_method.14.1956, args=[Var($const36.15.1957, <string>:4)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:20,655 on stmt: $40binary_add.17.1959 = $30binary_subscr.12.1954 + $38call_method.16.1958
DEBUG 2022-02-14 16:38:20,655 on stmt: $42call_function.18.1960 = call $18load_global.6.1950($24binary_subscr.9.1952, $40binary_add.17.1959, func=$18load_global.6.1950, args=[Var($24binary_subscr.9.1952, <string>:4), Var($40binary_add.17.1959, <string>:4)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:20,655 on stmt: $44get_iter.19.1961 = getiter(value=$42call_function.18.1960)
DEBUG 2022-02-14 16:38:20,655 on stmt: $phi46.0.1962 = $44get_iter.19.1961
DEBUG 2022-02-14 16:38:20,655 on stmt: $arg_out_var.1355 = const(int, 1)
DEBUG 2022-02-14 16:38:20,655 on stmt: $64load_global.2.1266 = global(max: <built-in function max>)
DEBUG 2022-02-14 16:38:20,655 on stmt: jump 46
DEBUG 2022-02-14 16:38:20,655 ==== SSA block analysis pass on 46
DEBUG 2022-02-14 16:38:20,655 Running <numba.core.ssa._GatherDefsHandler object at 0x7fa041df9730>
DEBUG 2022-02-14 16:38:20,655 on stmt: $46for_iter.1.1963 = iternext(value=$phi46.0.1962)
DEBUG 2022-02-14 16:38:20,655 on stmt: $46for_iter.2.1964 = pair_first(value=$46for_iter.1.1963)
DEBUG 2022-02-14 16:38:20,655 on stmt: $46for_iter.3.1965 = pair_second(value=$46for_iter.1.1963)
DEBUG 2022-02-14 16:38:20,655 on stmt: $phi48.1.1966 = $46for_iter.2.1964
DEBUG 2022-02-14 16:38:20,655 on stmt: branch $46for_iter.3.1965, 48, 1227
DEBUG 2022-02-14 16:38:20,655 ==== SSA block analysis pass on 48
DEBUG 2022-02-14 16:38:20,656 Running <numba.core.ssa._GatherDefsHandler object at 0x7fa041df9730>
DEBUG 2022-02-14 16:38:20,656 on stmt: parfor__index_1349 = $phi48.1.1966
DEBUG 2022-02-14 16:38:20,656 on stmt: jump 56
DEBUG 2022-02-14 16:38:20,656 ==== SSA block analysis pass on 1227
DEBUG 2022-02-14 16:38:20,656 Running <numba.core.ssa._GatherDefsHandler object at 0x7fa041df9730>
DEBUG 2022-02-14 16:38:20,656 on stmt: $const60.2.1967 = const(int, 0)
DEBUG 2022-02-14 16:38:20,656 on stmt: val_1250__arr[$const60.2.1967] = val_1250
DEBUG 2022-02-14 16:38:20,656 on stmt: $const68.5.1968 = const(int, 0)
DEBUG 2022-02-14 16:38:20,656 on stmt: val_1209__arr[$const68.5.1968] = val_1209
DEBUG 2022-02-14 16:38:20,656 on stmt: $const72.6.1969 = const(NoneType, None)
DEBUG 2022-02-14 16:38:20,656 on stmt: $74return_value.7.1970 = cast(value=$const72.6.1969)
DEBUG 2022-02-14 16:38:20,656 on stmt: return $74return_value.7.1970
DEBUG 2022-02-14 16:38:20,656 ==== SSA block analysis pass on 56
DEBUG 2022-02-14 16:38:20,656 Running <numba.core.ssa._GatherDefsHandler object at 0x7fa041df9730>
DEBUG 2022-02-14 16:38:20,656 on stmt: $arg_out_var.1354 = getitem(value=edge__reps, index=parfor__index_1349, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:20,656 on stmt: $expr_out_var.1353 = $arg_out_var.1354 + $arg_out_var.1355
DEBUG 2022-02-14 16:38:20,656 on stmt: $val.1209.1825 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=val_1209, rhs=$expr_out_var.1353, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:38:20,656 on stmt: val_1209 = $val.1209.1825
DEBUG 2022-02-14 16:38:20,656 on stmt: $72binary_subscr.6.1270 = getitem(value=edge__reps, index=parfor__index_1349, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:20,656 on stmt: val_1250 = call $64load_global.2.1266(val_1250, $72binary_subscr.6.1270, func=$64load_global.2.1266, args=[Var(val_1250, parfor.py:156), Var($72binary_subscr.6.1270, parfor.py:158)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:20,656 on stmt: jump 1226
DEBUG 2022-02-14 16:38:20,656 ==== SSA block analysis pass on 1226
DEBUG 2022-02-14 16:38:20,656 Running <numba.core.ssa._GatherDefsHandler object at 0x7fa041df9730>
DEBUG 2022-02-14 16:38:20,656 on stmt: jump 46
DEBUG 2022-02-14 16:38:20,657 defs defaultdict(<class 'list'>,
            {'$18load_global.6.1950': [<numba.core.ir.Assign object at 0x7fa041dd0520>],
             '$24binary_subscr.9.1952': [<numba.core.ir.Assign object at 0x7fa041dd00d0>],
             '$30binary_subscr.12.1954': [<numba.core.ir.Assign object at 0x7fa041dd0f70>],
             '$32load_global.13.1955': [<numba.core.ir.Assign object at 0x7fa041dd1100>],
             '$34load_method.14.1956': [<numba.core.ir.Assign object at 0x7fa041dd1280>],
             '$38call_method.16.1958': [<numba.core.ir.Assign object at 0x7fa041dd1610>],
             '$40binary_add.17.1959': [<numba.core.ir.Assign object at 0x7fa041dd1730>],
             '$42call_function.18.1960': [<numba.core.ir.Assign object at 0x7fa041dd18e0>],
             '$44get_iter.19.1961': [<numba.core.ir.Assign object at 0x7fa041dd1a00>],
             '$46for_iter.1.1963': [<numba.core.ir.Assign object at 0x7fa041dd1b50>],
             '$46for_iter.2.1964': [<numba.core.ir.Assign object at 0x7fa041dd1c70>],
             '$46for_iter.3.1965': [<numba.core.ir.Assign object at 0x7fa041dd1d90>],
             '$64load_global.2.1266': [<numba.core.ir.Assign object at 0x7fa046833490>],
             '$72binary_subscr.6.1270': [<numba.core.ir.Assign object at 0x7fa046833a90>],
             '$74return_value.7.1970': [<numba.core.ir.Assign object at 0x7fa041dd30a0>],
             '$arg_out_var.1354': [<numba.core.ir.Assign object at 0x7fa046631ee0>],
             '$arg_out_var.1355': [<numba.core.ir.Assign object at 0x7fa046631ca0>],
             '$const12.4.1949': [<numba.core.ir.Assign object at 0x7fa041dd0940>],
             '$const22.8.1951': [<numba.core.ir.Assign object at 0x7fa041dd0280>],
             '$const28.11.1953': [<numba.core.ir.Assign object at 0x7fa041dd0dc0>],
             '$const36.15.1957': [<numba.core.ir.Assign object at 0x7fa041dd1400>],
             '$const4.1.1948': [<numba.core.ir.Assign object at 0x7fa041d64ca0>],
             '$const60.2.1967': [<numba.core.ir.Assign object at 0x7fa041deb1f0>],
             '$const68.5.1968': [<numba.core.ir.Assign object at 0x7fa041deb3d0>],
             '$const72.6.1969': [<numba.core.ir.Assign object at 0x7fa041deb460>],
             '$expr_out_var.1353': [<numba.core.ir.Assign object at 0x7fa046631b50>],
             '$phi46.0.1962': [<numba.core.ir.Assign object at 0x7fa041dd0b50>],
             '$phi48.1.1966': [<numba.core.ir.Assign object at 0x7fa041dd1a60>],
             '$val.1209.1825': [<numba.core.ir.Assign object at 0x7fa04684edf0>],
             'edge__reps': [<numba.core.ir.Assign object at 0x7fa041ddfe20>],
             'parfor__index_1349': [<numba.core.ir.Assign object at 0x7fa041debfd0>],
             'sched.1947': [<numba.core.ir.Assign object at 0x7fa041ddfaf0>],
             'val_1209': [<numba.core.ir.Assign object at 0x7fa041dd0790>,
                          <numba.core.ir.Assign object at 0x7fa04684e970>],
             'val_1209__arr': [<numba.core.ir.Assign object at 0x7fa041ddfd60>],
             'val_1250': [<numba.core.ir.Assign object at 0x7fa046f503d0>,
                          <numba.core.ir.Assign object at 0x7fa046833550>],
             'val_1250__arr': [<numba.core.ir.Assign object at 0x7fa041ddfeb0>]})
DEBUG 2022-02-14 16:38:20,657 SSA violators {'val_1250', 'val_1209'}
DEBUG 2022-02-14 16:38:20,657 Fix SSA violator on var val_1250
DEBUG 2022-02-14 16:38:20,657 ==== SSA block rewrite pass on 0
DEBUG 2022-02-14 16:38:20,657 Running <numba.core.ssa._FreshVarHandler object at 0x7fa0471e56d0>
DEBUG 2022-02-14 16:38:20,657 on stmt: sched.1947 = arg(0, name=sched)
DEBUG 2022-02-14 16:38:20,657 on stmt: edge__reps = arg(1, name=edge__reps)
DEBUG 2022-02-14 16:38:20,657 on stmt: val_1250__arr = arg(2, name=val_1250__arr)
DEBUG 2022-02-14 16:38:20,657 on stmt: val_1209__arr = arg(3, name=val_1209__arr)
DEBUG 2022-02-14 16:38:20,657 on stmt: $const4.1.1948 = const(int, 0)
DEBUG 2022-02-14 16:38:20,657 on stmt: val_1250 = getitem(value=val_1250__arr, index=$const4.1.1948, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:20,657 first assign: val_1250
DEBUG 2022-02-14 16:38:20,657 replaced with: val_1250 = getitem(value=val_1250__arr, index=$const4.1.1948, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:20,658 on stmt: $const12.4.1949 = const(int, 0)
DEBUG 2022-02-14 16:38:20,658 on stmt: val_1209 = getitem(value=val_1209__arr, index=$const12.4.1949, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:20,658 on stmt: $18load_global.6.1950 = global(range: <class 'range'>)
DEBUG 2022-02-14 16:38:20,658 on stmt: $const22.8.1951 = const(int, 0)
DEBUG 2022-02-14 16:38:20,658 on stmt: $24binary_subscr.9.1952 = getitem(value=sched.1947, index=$const22.8.1951, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:20,658 on stmt: $const28.11.1953 = const(int, 1)
DEBUG 2022-02-14 16:38:20,658 on stmt: $30binary_subscr.12.1954 = getitem(value=sched.1947, index=$const28.11.1953, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:20,658 on stmt: $32load_global.13.1955 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:38:20,658 on stmt: $34load_method.14.1956 = getattr(value=$32load_global.13.1955, attr=uint8)
DEBUG 2022-02-14 16:38:20,658 on stmt: $const36.15.1957 = const(int, 1)
DEBUG 2022-02-14 16:38:20,658 on stmt: $38call_method.16.1958 = call $34load_method.14.1956($const36.15.1957, func=$34load_method.14.1956, args=[Var($const36.15.1957, <string>:4)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:20,658 on stmt: $40binary_add.17.1959 = $30binary_subscr.12.1954 + $38call_method.16.1958
DEBUG 2022-02-14 16:38:20,658 on stmt: $42call_function.18.1960 = call $18load_global.6.1950($24binary_subscr.9.1952, $40binary_add.17.1959, func=$18load_global.6.1950, args=[Var($24binary_subscr.9.1952, <string>:4), Var($40binary_add.17.1959, <string>:4)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:20,658 on stmt: $44get_iter.19.1961 = getiter(value=$42call_function.18.1960)
DEBUG 2022-02-14 16:38:20,658 on stmt: $phi46.0.1962 = $44get_iter.19.1961
DEBUG 2022-02-14 16:38:20,658 on stmt: $arg_out_var.1355 = const(int, 1)
DEBUG 2022-02-14 16:38:20,658 on stmt: $64load_global.2.1266 = global(max: <built-in function max>)
DEBUG 2022-02-14 16:38:20,658 on stmt: jump 46
DEBUG 2022-02-14 16:38:20,658 ==== SSA block rewrite pass on 46
DEBUG 2022-02-14 16:38:20,658 Running <numba.core.ssa._FreshVarHandler object at 0x7fa0471e56d0>
DEBUG 2022-02-14 16:38:20,658 on stmt: $46for_iter.1.1963 = iternext(value=$phi46.0.1962)
DEBUG 2022-02-14 16:38:20,658 on stmt: $46for_iter.2.1964 = pair_first(value=$46for_iter.1.1963)
DEBUG 2022-02-14 16:38:20,658 on stmt: $46for_iter.3.1965 = pair_second(value=$46for_iter.1.1963)
DEBUG 2022-02-14 16:38:20,659 on stmt: $phi48.1.1966 = $46for_iter.2.1964
DEBUG 2022-02-14 16:38:20,659 on stmt: branch $46for_iter.3.1965, 48, 1227
DEBUG 2022-02-14 16:38:20,659 ==== SSA block rewrite pass on 48
DEBUG 2022-02-14 16:38:20,659 Running <numba.core.ssa._FreshVarHandler object at 0x7fa0471e56d0>
DEBUG 2022-02-14 16:38:20,659 on stmt: parfor__index_1349 = $phi48.1.1966
DEBUG 2022-02-14 16:38:20,659 on stmt: jump 56
DEBUG 2022-02-14 16:38:20,659 ==== SSA block rewrite pass on 1227
DEBUG 2022-02-14 16:38:20,659 Running <numba.core.ssa._FreshVarHandler object at 0x7fa0471e56d0>
DEBUG 2022-02-14 16:38:20,659 on stmt: $const60.2.1967 = const(int, 0)
DEBUG 2022-02-14 16:38:20,659 on stmt: val_1250__arr[$const60.2.1967] = val_1250
DEBUG 2022-02-14 16:38:20,659 on stmt: $const68.5.1968 = const(int, 0)
DEBUG 2022-02-14 16:38:20,659 on stmt: val_1209__arr[$const68.5.1968] = val_1209
DEBUG 2022-02-14 16:38:20,659 on stmt: $const72.6.1969 = const(NoneType, None)
DEBUG 2022-02-14 16:38:20,659 on stmt: $74return_value.7.1970 = cast(value=$const72.6.1969)
DEBUG 2022-02-14 16:38:20,659 on stmt: return $74return_value.7.1970
DEBUG 2022-02-14 16:38:20,659 ==== SSA block rewrite pass on 56
DEBUG 2022-02-14 16:38:20,659 Running <numba.core.ssa._FreshVarHandler object at 0x7fa0471e56d0>
DEBUG 2022-02-14 16:38:20,659 on stmt: $arg_out_var.1354 = getitem(value=edge__reps, index=parfor__index_1349, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:20,659 on stmt: $expr_out_var.1353 = $arg_out_var.1354 + $arg_out_var.1355
DEBUG 2022-02-14 16:38:20,659 on stmt: $val.1209.1825 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=val_1209, rhs=$expr_out_var.1353, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:38:20,659 on stmt: val_1209 = $val.1209.1825
DEBUG 2022-02-14 16:38:20,659 on stmt: $72binary_subscr.6.1270 = getitem(value=edge__reps, index=parfor__index_1349, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:20,659 on stmt: val_1250 = call $64load_global.2.1266(val_1250, $72binary_subscr.6.1270, func=$64load_global.2.1266, args=[Var(val_1250, parfor.py:156), Var($72binary_subscr.6.1270, parfor.py:158)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:20,659 replaced with: val_1250.1 = call $64load_global.2.1266(val_1250, $72binary_subscr.6.1270, func=$64load_global.2.1266, args=[Var(val_1250, parfor.py:156), Var($72binary_subscr.6.1270, parfor.py:158)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:20,659 on stmt: jump 1226
DEBUG 2022-02-14 16:38:20,660 ==== SSA block rewrite pass on 1226
DEBUG 2022-02-14 16:38:20,660 Running <numba.core.ssa._FreshVarHandler object at 0x7fa0471e56d0>
DEBUG 2022-02-14 16:38:20,660 on stmt: jump 46
DEBUG 2022-02-14 16:38:20,660 Replaced assignments: defaultdict(<class 'list'>,
            {0: [<numba.core.ir.Assign object at 0x7fa041df9400>],
             56: [<numba.core.ir.Assign object at 0x7fa041ddbb50>]})
DEBUG 2022-02-14 16:38:20,660 ==== SSA block rewrite pass on 0
DEBUG 2022-02-14 16:38:20,660 Running <numba.core.ssa._FixSSAVars object at 0x7fa0471e56d0>
DEBUG 2022-02-14 16:38:20,660 on stmt: sched.1947 = arg(0, name=sched)
DEBUG 2022-02-14 16:38:20,660 on stmt: edge__reps = arg(1, name=edge__reps)
DEBUG 2022-02-14 16:38:20,660 on stmt: val_1250__arr = arg(2, name=val_1250__arr)
DEBUG 2022-02-14 16:38:20,660 on stmt: val_1209__arr = arg(3, name=val_1209__arr)
DEBUG 2022-02-14 16:38:20,660 on stmt: $const4.1.1948 = const(int, 0)
DEBUG 2022-02-14 16:38:20,660 on stmt: val_1250 = getitem(value=val_1250__arr, index=$const4.1.1948, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:20,660 on stmt: $const12.4.1949 = const(int, 0)
DEBUG 2022-02-14 16:38:20,660 on stmt: val_1209 = getitem(value=val_1209__arr, index=$const12.4.1949, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:20,660 on stmt: $18load_global.6.1950 = global(range: <class 'range'>)
DEBUG 2022-02-14 16:38:20,660 on stmt: $const22.8.1951 = const(int, 0)
DEBUG 2022-02-14 16:38:20,660 on stmt: $24binary_subscr.9.1952 = getitem(value=sched.1947, index=$const22.8.1951, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:20,660 on stmt: $const28.11.1953 = const(int, 1)
DEBUG 2022-02-14 16:38:20,660 on stmt: $30binary_subscr.12.1954 = getitem(value=sched.1947, index=$const28.11.1953, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:20,660 on stmt: $32load_global.13.1955 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:38:20,660 on stmt: $34load_method.14.1956 = getattr(value=$32load_global.13.1955, attr=uint8)
DEBUG 2022-02-14 16:38:20,660 on stmt: $const36.15.1957 = const(int, 1)
DEBUG 2022-02-14 16:38:20,660 on stmt: $38call_method.16.1958 = call $34load_method.14.1956($const36.15.1957, func=$34load_method.14.1956, args=[Var($const36.15.1957, <string>:4)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:20,660 on stmt: $40binary_add.17.1959 = $30binary_subscr.12.1954 + $38call_method.16.1958
DEBUG 2022-02-14 16:38:20,661 on stmt: $42call_function.18.1960 = call $18load_global.6.1950($24binary_subscr.9.1952, $40binary_add.17.1959, func=$18load_global.6.1950, args=[Var($24binary_subscr.9.1952, <string>:4), Var($40binary_add.17.1959, <string>:4)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:20,661 on stmt: $44get_iter.19.1961 = getiter(value=$42call_function.18.1960)
DEBUG 2022-02-14 16:38:20,661 on stmt: $phi46.0.1962 = $44get_iter.19.1961
DEBUG 2022-02-14 16:38:20,661 on stmt: $arg_out_var.1355 = const(int, 1)
DEBUG 2022-02-14 16:38:20,661 on stmt: $64load_global.2.1266 = global(max: <built-in function max>)
DEBUG 2022-02-14 16:38:20,661 on stmt: jump 46
DEBUG 2022-02-14 16:38:20,661 ==== SSA block rewrite pass on 46
DEBUG 2022-02-14 16:38:20,661 Running <numba.core.ssa._FixSSAVars object at 0x7fa0471e56d0>
DEBUG 2022-02-14 16:38:20,661 on stmt: $46for_iter.1.1963 = iternext(value=$phi46.0.1962)
DEBUG 2022-02-14 16:38:20,661 on stmt: $46for_iter.2.1964 = pair_first(value=$46for_iter.1.1963)
DEBUG 2022-02-14 16:38:20,661 on stmt: $46for_iter.3.1965 = pair_second(value=$46for_iter.1.1963)
DEBUG 2022-02-14 16:38:20,661 on stmt: $phi48.1.1966 = $46for_iter.2.1964
DEBUG 2022-02-14 16:38:20,661 on stmt: branch $46for_iter.3.1965, 48, 1227
DEBUG 2022-02-14 16:38:20,661 ==== SSA block rewrite pass on 48
DEBUG 2022-02-14 16:38:20,661 Running <numba.core.ssa._FixSSAVars object at 0x7fa0471e56d0>
DEBUG 2022-02-14 16:38:20,661 on stmt: parfor__index_1349 = $phi48.1.1966
DEBUG 2022-02-14 16:38:20,661 on stmt: jump 56
DEBUG 2022-02-14 16:38:20,661 ==== SSA block rewrite pass on 1227
DEBUG 2022-02-14 16:38:20,661 Running <numba.core.ssa._FixSSAVars object at 0x7fa0471e56d0>
DEBUG 2022-02-14 16:38:20,661 on stmt: $const60.2.1967 = const(int, 0)
DEBUG 2022-02-14 16:38:20,661 on stmt: val_1250__arr[$const60.2.1967] = val_1250
DEBUG 2022-02-14 16:38:20,661 find_def var='val_1250' stmt=val_1250__arr[$const60.2.1967] = val_1250
DEBUG 2022-02-14 16:38:20,662 find_def_from_top label 1227
DEBUG 2022-02-14 16:38:20,662 idom 46 from label 1227
DEBUG 2022-02-14 16:38:20,662 find_def_from_bottom label 46
DEBUG 2022-02-14 16:38:20,662 find_def_from_top label 46
DEBUG 2022-02-14 16:38:20,662 insert phi node val_1250.2 = phi(incoming_values=[], incoming_blocks=[]) at 46
DEBUG 2022-02-14 16:38:20,662 find_def_from_bottom label 0
DEBUG 2022-02-14 16:38:20,662 incoming_def val_1250 = getitem(value=val_1250__arr, index=$const4.1.1948, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:20,662 find_def_from_bottom label 1226
DEBUG 2022-02-14 16:38:20,662 find_def_from_top label 1226
DEBUG 2022-02-14 16:38:20,662 idom 56 from label 1226
DEBUG 2022-02-14 16:38:20,662 find_def_from_bottom label 56
DEBUG 2022-02-14 16:38:20,662 incoming_def val_1250.1 = call $64load_global.2.1266(val_1250, $72binary_subscr.6.1270, func=$64load_global.2.1266, args=[Var(val_1250, parfor.py:156), Var($72binary_subscr.6.1270, parfor.py:158)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:20,662 replaced with: val_1250__arr[$const60.2.1967] = val_1250.2
DEBUG 2022-02-14 16:38:20,662 on stmt: $const68.5.1968 = const(int, 0)
DEBUG 2022-02-14 16:38:20,662 on stmt: val_1209__arr[$const68.5.1968] = val_1209
DEBUG 2022-02-14 16:38:20,662 on stmt: $const72.6.1969 = const(NoneType, None)
DEBUG 2022-02-14 16:38:20,662 on stmt: $74return_value.7.1970 = cast(value=$const72.6.1969)
DEBUG 2022-02-14 16:38:20,662 on stmt: return $74return_value.7.1970
DEBUG 2022-02-14 16:38:20,662 ==== SSA block rewrite pass on 56
DEBUG 2022-02-14 16:38:20,662 Running <numba.core.ssa._FixSSAVars object at 0x7fa0471e56d0>
DEBUG 2022-02-14 16:38:20,662 on stmt: $arg_out_var.1354 = getitem(value=edge__reps, index=parfor__index_1349, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:20,662 on stmt: $expr_out_var.1353 = $arg_out_var.1354 + $arg_out_var.1355
DEBUG 2022-02-14 16:38:20,662 on stmt: $val.1209.1825 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=val_1209, rhs=$expr_out_var.1353, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:38:20,663 on stmt: val_1209 = $val.1209.1825
DEBUG 2022-02-14 16:38:20,663 on stmt: $72binary_subscr.6.1270 = getitem(value=edge__reps, index=parfor__index_1349, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:20,663 on stmt: val_1250.1 = call $64load_global.2.1266(val_1250, $72binary_subscr.6.1270, func=$64load_global.2.1266, args=[Var(val_1250, parfor.py:156), Var($72binary_subscr.6.1270, parfor.py:158)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:20,663 find_def var='val_1250' stmt=val_1250.1 = call $64load_global.2.1266(val_1250, $72binary_subscr.6.1270, func=$64load_global.2.1266, args=[Var(val_1250, parfor.py:156), Var($72binary_subscr.6.1270, parfor.py:158)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:20,663 find_def_from_top label 56
DEBUG 2022-02-14 16:38:20,663 idom 48 from label 56
DEBUG 2022-02-14 16:38:20,663 find_def_from_bottom label 48
DEBUG 2022-02-14 16:38:20,663 find_def_from_top label 48
DEBUG 2022-02-14 16:38:20,663 idom 46 from label 48
DEBUG 2022-02-14 16:38:20,663 find_def_from_bottom label 46
DEBUG 2022-02-14 16:38:20,663 replaced with: val_1250.1 = call $64load_global.2.1266(val_1250.2, $72binary_subscr.6.1270, func=$64load_global.2.1266, args=[Var(val_1250.2, <string>:6), Var($72binary_subscr.6.1270, parfor.py:158)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:20,663 on stmt: jump 1226
DEBUG 2022-02-14 16:38:20,663 ==== SSA block rewrite pass on 1226
DEBUG 2022-02-14 16:38:20,663 Running <numba.core.ssa._FixSSAVars object at 0x7fa0471e56d0>
DEBUG 2022-02-14 16:38:20,663 on stmt: jump 46
DEBUG 2022-02-14 16:38:20,663 Fix SSA violator on var val_1209
DEBUG 2022-02-14 16:38:20,663 ==== SSA block rewrite pass on 0
DEBUG 2022-02-14 16:38:20,663 Running <numba.core.ssa._FreshVarHandler object at 0x7fa0467ccc70>
DEBUG 2022-02-14 16:38:20,663 on stmt: sched.1947 = arg(0, name=sched)
DEBUG 2022-02-14 16:38:20,663 on stmt: edge__reps = arg(1, name=edge__reps)
DEBUG 2022-02-14 16:38:20,663 on stmt: val_1250__arr = arg(2, name=val_1250__arr)
DEBUG 2022-02-14 16:38:20,663 on stmt: val_1209__arr = arg(3, name=val_1209__arr)
DEBUG 2022-02-14 16:38:20,664 on stmt: $const4.1.1948 = const(int, 0)
DEBUG 2022-02-14 16:38:20,664 on stmt: val_1250 = getitem(value=val_1250__arr, index=$const4.1.1948, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:20,664 on stmt: $const12.4.1949 = const(int, 0)
DEBUG 2022-02-14 16:38:20,664 on stmt: val_1209 = getitem(value=val_1209__arr, index=$const12.4.1949, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:20,664 first assign: val_1209
DEBUG 2022-02-14 16:38:20,664 replaced with: val_1209 = getitem(value=val_1209__arr, index=$const12.4.1949, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:20,664 on stmt: $18load_global.6.1950 = global(range: <class 'range'>)
DEBUG 2022-02-14 16:38:20,664 on stmt: $const22.8.1951 = const(int, 0)
DEBUG 2022-02-14 16:38:20,664 on stmt: $24binary_subscr.9.1952 = getitem(value=sched.1947, index=$const22.8.1951, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:20,664 on stmt: $const28.11.1953 = const(int, 1)
DEBUG 2022-02-14 16:38:20,664 on stmt: $30binary_subscr.12.1954 = getitem(value=sched.1947, index=$const28.11.1953, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:20,664 on stmt: $32load_global.13.1955 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:38:20,664 on stmt: $34load_method.14.1956 = getattr(value=$32load_global.13.1955, attr=uint8)
DEBUG 2022-02-14 16:38:20,664 on stmt: $const36.15.1957 = const(int, 1)
DEBUG 2022-02-14 16:38:20,664 on stmt: $38call_method.16.1958 = call $34load_method.14.1956($const36.15.1957, func=$34load_method.14.1956, args=[Var($const36.15.1957, <string>:4)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:20,664 on stmt: $40binary_add.17.1959 = $30binary_subscr.12.1954 + $38call_method.16.1958
DEBUG 2022-02-14 16:38:20,664 on stmt: $42call_function.18.1960 = call $18load_global.6.1950($24binary_subscr.9.1952, $40binary_add.17.1959, func=$18load_global.6.1950, args=[Var($24binary_subscr.9.1952, <string>:4), Var($40binary_add.17.1959, <string>:4)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:20,664 on stmt: $44get_iter.19.1961 = getiter(value=$42call_function.18.1960)
DEBUG 2022-02-14 16:38:20,664 on stmt: $phi46.0.1962 = $44get_iter.19.1961
DEBUG 2022-02-14 16:38:20,664 on stmt: $arg_out_var.1355 = const(int, 1)
DEBUG 2022-02-14 16:38:20,664 on stmt: $64load_global.2.1266 = global(max: <built-in function max>)
DEBUG 2022-02-14 16:38:20,664 on stmt: jump 46
DEBUG 2022-02-14 16:38:20,664 ==== SSA block rewrite pass on 46
DEBUG 2022-02-14 16:38:20,664 Running <numba.core.ssa._FreshVarHandler object at 0x7fa0467ccc70>
DEBUG 2022-02-14 16:38:20,664 on stmt: val_1250.2 = phi(incoming_values=[Var(val_1250, <string>:2), Var(val_1250.1, parfor.py:158)], incoming_blocks=[0, 1226])
DEBUG 2022-02-14 16:38:20,664 on stmt: $46for_iter.1.1963 = iternext(value=$phi46.0.1962)
DEBUG 2022-02-14 16:38:20,665 on stmt: $46for_iter.2.1964 = pair_first(value=$46for_iter.1.1963)
DEBUG 2022-02-14 16:38:20,665 on stmt: $46for_iter.3.1965 = pair_second(value=$46for_iter.1.1963)
DEBUG 2022-02-14 16:38:20,665 on stmt: $phi48.1.1966 = $46for_iter.2.1964
DEBUG 2022-02-14 16:38:20,665 on stmt: branch $46for_iter.3.1965, 48, 1227
DEBUG 2022-02-14 16:38:20,665 ==== SSA block rewrite pass on 48
DEBUG 2022-02-14 16:38:20,665 Running <numba.core.ssa._FreshVarHandler object at 0x7fa0467ccc70>
DEBUG 2022-02-14 16:38:20,665 on stmt: parfor__index_1349 = $phi48.1.1966
DEBUG 2022-02-14 16:38:20,665 on stmt: jump 56
DEBUG 2022-02-14 16:38:20,665 ==== SSA block rewrite pass on 1227
DEBUG 2022-02-14 16:38:20,665 Running <numba.core.ssa._FreshVarHandler object at 0x7fa0467ccc70>
DEBUG 2022-02-14 16:38:20,665 on stmt: $const60.2.1967 = const(int, 0)
DEBUG 2022-02-14 16:38:20,665 on stmt: val_1250__arr[$const60.2.1967] = val_1250.2
DEBUG 2022-02-14 16:38:20,665 on stmt: $const68.5.1968 = const(int, 0)
DEBUG 2022-02-14 16:38:20,665 on stmt: val_1209__arr[$const68.5.1968] = val_1209
DEBUG 2022-02-14 16:38:20,665 on stmt: $const72.6.1969 = const(NoneType, None)
DEBUG 2022-02-14 16:38:20,665 on stmt: $74return_value.7.1970 = cast(value=$const72.6.1969)
DEBUG 2022-02-14 16:38:20,665 on stmt: return $74return_value.7.1970
DEBUG 2022-02-14 16:38:20,665 ==== SSA block rewrite pass on 56
DEBUG 2022-02-14 16:38:20,665 Running <numba.core.ssa._FreshVarHandler object at 0x7fa0467ccc70>
DEBUG 2022-02-14 16:38:20,665 on stmt: $arg_out_var.1354 = getitem(value=edge__reps, index=parfor__index_1349, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:20,665 on stmt: $expr_out_var.1353 = $arg_out_var.1354 + $arg_out_var.1355
DEBUG 2022-02-14 16:38:20,665 on stmt: $val.1209.1825 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=val_1209, rhs=$expr_out_var.1353, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:38:20,665 on stmt: val_1209 = $val.1209.1825
DEBUG 2022-02-14 16:38:20,665 replaced with: val_1209.1 = $val.1209.1825
DEBUG 2022-02-14 16:38:20,665 on stmt: $72binary_subscr.6.1270 = getitem(value=edge__reps, index=parfor__index_1349, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:20,665 on stmt: val_1250.1 = call $64load_global.2.1266(val_1250.2, $72binary_subscr.6.1270, func=$64load_global.2.1266, args=[Var(val_1250.2, <string>:6), Var($72binary_subscr.6.1270, parfor.py:158)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:20,666 on stmt: jump 1226
DEBUG 2022-02-14 16:38:20,666 ==== SSA block rewrite pass on 1226
DEBUG 2022-02-14 16:38:20,666 Running <numba.core.ssa._FreshVarHandler object at 0x7fa0467ccc70>
DEBUG 2022-02-14 16:38:20,666 on stmt: jump 46
DEBUG 2022-02-14 16:38:20,666 Replaced assignments: defaultdict(<class 'list'>,
            {0: [<numba.core.ir.Assign object at 0x7fa041ddff70>],
             56: [<numba.core.ir.Assign object at 0x7fa041ddb8e0>]})
DEBUG 2022-02-14 16:38:20,666 ==== SSA block rewrite pass on 0
DEBUG 2022-02-14 16:38:20,666 Running <numba.core.ssa._FixSSAVars object at 0x7fa0471e56d0>
DEBUG 2022-02-14 16:38:20,666 on stmt: sched.1947 = arg(0, name=sched)
DEBUG 2022-02-14 16:38:20,666 on stmt: edge__reps = arg(1, name=edge__reps)
DEBUG 2022-02-14 16:38:20,666 on stmt: val_1250__arr = arg(2, name=val_1250__arr)
DEBUG 2022-02-14 16:38:20,666 on stmt: val_1209__arr = arg(3, name=val_1209__arr)
DEBUG 2022-02-14 16:38:20,666 on stmt: $const4.1.1948 = const(int, 0)
DEBUG 2022-02-14 16:38:20,666 on stmt: val_1250 = getitem(value=val_1250__arr, index=$const4.1.1948, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:20,666 on stmt: $const12.4.1949 = const(int, 0)
DEBUG 2022-02-14 16:38:20,666 on stmt: val_1209 = getitem(value=val_1209__arr, index=$const12.4.1949, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:20,666 on stmt: $18load_global.6.1950 = global(range: <class 'range'>)
DEBUG 2022-02-14 16:38:20,666 on stmt: $const22.8.1951 = const(int, 0)
DEBUG 2022-02-14 16:38:20,666 on stmt: $24binary_subscr.9.1952 = getitem(value=sched.1947, index=$const22.8.1951, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:20,666 on stmt: $const28.11.1953 = const(int, 1)
DEBUG 2022-02-14 16:38:20,666 on stmt: $30binary_subscr.12.1954 = getitem(value=sched.1947, index=$const28.11.1953, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:20,666 on stmt: $32load_global.13.1955 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:38:20,666 on stmt: $34load_method.14.1956 = getattr(value=$32load_global.13.1955, attr=uint8)
DEBUG 2022-02-14 16:38:20,666 on stmt: $const36.15.1957 = const(int, 1)
DEBUG 2022-02-14 16:38:20,666 on stmt: $38call_method.16.1958 = call $34load_method.14.1956($const36.15.1957, func=$34load_method.14.1956, args=[Var($const36.15.1957, <string>:4)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:20,667 on stmt: $40binary_add.17.1959 = $30binary_subscr.12.1954 + $38call_method.16.1958
DEBUG 2022-02-14 16:38:20,667 on stmt: $42call_function.18.1960 = call $18load_global.6.1950($24binary_subscr.9.1952, $40binary_add.17.1959, func=$18load_global.6.1950, args=[Var($24binary_subscr.9.1952, <string>:4), Var($40binary_add.17.1959, <string>:4)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:20,667 on stmt: $44get_iter.19.1961 = getiter(value=$42call_function.18.1960)
DEBUG 2022-02-14 16:38:20,667 on stmt: $phi46.0.1962 = $44get_iter.19.1961
DEBUG 2022-02-14 16:38:20,667 on stmt: $arg_out_var.1355 = const(int, 1)
DEBUG 2022-02-14 16:38:20,667 on stmt: $64load_global.2.1266 = global(max: <built-in function max>)
DEBUG 2022-02-14 16:38:20,667 on stmt: jump 46
DEBUG 2022-02-14 16:38:20,667 ==== SSA block rewrite pass on 46
DEBUG 2022-02-14 16:38:20,667 Running <numba.core.ssa._FixSSAVars object at 0x7fa0471e56d0>
DEBUG 2022-02-14 16:38:20,667 on stmt: val_1250.2 = phi(incoming_values=[Var(val_1250, <string>:2), Var(val_1250.1, parfor.py:158)], incoming_blocks=[0, 1226])
DEBUG 2022-02-14 16:38:20,667 on stmt: $46for_iter.1.1963 = iternext(value=$phi46.0.1962)
DEBUG 2022-02-14 16:38:20,667 on stmt: $46for_iter.2.1964 = pair_first(value=$46for_iter.1.1963)
DEBUG 2022-02-14 16:38:20,667 on stmt: $46for_iter.3.1965 = pair_second(value=$46for_iter.1.1963)
DEBUG 2022-02-14 16:38:20,667 on stmt: $phi48.1.1966 = $46for_iter.2.1964
DEBUG 2022-02-14 16:38:20,667 on stmt: branch $46for_iter.3.1965, 48, 1227
DEBUG 2022-02-14 16:38:20,667 ==== SSA block rewrite pass on 48
DEBUG 2022-02-14 16:38:20,667 Running <numba.core.ssa._FixSSAVars object at 0x7fa0471e56d0>
DEBUG 2022-02-14 16:38:20,667 on stmt: parfor__index_1349 = $phi48.1.1966
DEBUG 2022-02-14 16:38:20,667 on stmt: jump 56
DEBUG 2022-02-14 16:38:20,667 ==== SSA block rewrite pass on 1227
DEBUG 2022-02-14 16:38:20,667 Running <numba.core.ssa._FixSSAVars object at 0x7fa0471e56d0>
DEBUG 2022-02-14 16:38:20,667 on stmt: $const60.2.1967 = const(int, 0)
DEBUG 2022-02-14 16:38:20,667 on stmt: val_1250__arr[$const60.2.1967] = val_1250.2
DEBUG 2022-02-14 16:38:20,667 on stmt: $const68.5.1968 = const(int, 0)
DEBUG 2022-02-14 16:38:20,667 on stmt: val_1209__arr[$const68.5.1968] = val_1209
DEBUG 2022-02-14 16:38:20,667 find_def var='val_1209' stmt=val_1209__arr[$const68.5.1968] = val_1209
DEBUG 2022-02-14 16:38:20,667 find_def_from_top label 1227
DEBUG 2022-02-14 16:38:20,667 idom 46 from label 1227
DEBUG 2022-02-14 16:38:20,667 find_def_from_bottom label 46
DEBUG 2022-02-14 16:38:20,668 find_def_from_top label 46
DEBUG 2022-02-14 16:38:20,668 insert phi node val_1209.2 = phi(incoming_values=[], incoming_blocks=[]) at 46
DEBUG 2022-02-14 16:38:20,668 find_def_from_bottom label 0
DEBUG 2022-02-14 16:38:20,668 incoming_def val_1209 = getitem(value=val_1209__arr, index=$const12.4.1949, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:20,668 find_def_from_bottom label 1226
DEBUG 2022-02-14 16:38:20,668 find_def_from_top label 1226
DEBUG 2022-02-14 16:38:20,668 idom 56 from label 1226
DEBUG 2022-02-14 16:38:20,668 find_def_from_bottom label 56
DEBUG 2022-02-14 16:38:20,668 incoming_def val_1209.1 = $val.1209.1825
DEBUG 2022-02-14 16:38:20,668 replaced with: val_1209__arr[$const68.5.1968] = val_1209.2
DEBUG 2022-02-14 16:38:20,668 on stmt: $const72.6.1969 = const(NoneType, None)
DEBUG 2022-02-14 16:38:20,668 on stmt: $74return_value.7.1970 = cast(value=$const72.6.1969)
DEBUG 2022-02-14 16:38:20,668 on stmt: return $74return_value.7.1970
DEBUG 2022-02-14 16:38:20,668 ==== SSA block rewrite pass on 56
DEBUG 2022-02-14 16:38:20,668 Running <numba.core.ssa._FixSSAVars object at 0x7fa0471e56d0>
DEBUG 2022-02-14 16:38:20,668 on stmt: $arg_out_var.1354 = getitem(value=edge__reps, index=parfor__index_1349, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:20,668 on stmt: $expr_out_var.1353 = $arg_out_var.1354 + $arg_out_var.1355
DEBUG 2022-02-14 16:38:20,668 on stmt: $val.1209.1825 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=val_1209, rhs=$expr_out_var.1353, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:38:20,668 find_def var='val_1209' stmt=$val.1209.1825 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=val_1209, rhs=$expr_out_var.1353, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:38:20,668 find_def_from_top label 56
DEBUG 2022-02-14 16:38:20,668 idom 48 from label 56
DEBUG 2022-02-14 16:38:20,668 find_def_from_bottom label 48
DEBUG 2022-02-14 16:38:20,668 find_def_from_top label 48
DEBUG 2022-02-14 16:38:20,668 idom 46 from label 48
DEBUG 2022-02-14 16:38:20,668 find_def_from_bottom label 46
DEBUG 2022-02-14 16:38:20,668 replaced with: $val.1209.1825 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=val_1209.2, rhs=$expr_out_var.1353, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:38:20,668 on stmt: val_1209.1 = $val.1209.1825
DEBUG 2022-02-14 16:38:20,669 on stmt: $72binary_subscr.6.1270 = getitem(value=edge__reps, index=parfor__index_1349, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:20,669 on stmt: val_1250.1 = call $64load_global.2.1266(val_1250.2, $72binary_subscr.6.1270, func=$64load_global.2.1266, args=[Var(val_1250.2, <string>:6), Var($72binary_subscr.6.1270, parfor.py:158)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:20,669 on stmt: jump 1226
DEBUG 2022-02-14 16:38:20,669 ==== SSA block rewrite pass on 1226
DEBUG 2022-02-14 16:38:20,669 Running <numba.core.ssa._FixSSAVars object at 0x7fa0471e56d0>
DEBUG 2022-02-14 16:38:20,669 on stmt: jump 46
DEBUG 2022-02-14 16:38:20,907 bytecode dump:
>          0	NOP(arg=None, lineno=2)
           2	LOAD_GLOBAL(arg=0, lineno=2)
           4	LOAD_FAST(arg=0, lineno=2)
           6	LOAD_CONST(arg=1, lineno=2)
           8	BINARY_SUBSCR(arg=None, lineno=2)
          10	LOAD_FAST(arg=0, lineno=2)
          12	LOAD_CONST(arg=2, lineno=2)
          14	BINARY_SUBSCR(arg=None, lineno=2)
          16	LOAD_GLOBAL(arg=1, lineno=2)
          18	LOAD_METHOD(arg=2, lineno=2)
          20	LOAD_CONST(arg=2, lineno=2)
          22	CALL_METHOD(arg=1, lineno=2)
          24	BINARY_ADD(arg=None, lineno=2)
          26	CALL_FUNCTION(arg=2, lineno=2)
          28	GET_ITER(arg=None, lineno=2)
>         30	FOR_ITER(arg=8, lineno=2)
          32	STORE_FAST(arg=2, lineno=2)
          34	LOAD_CONST(arg=1, lineno=3)
          36	STORE_FAST(arg=3, lineno=3)
          38	JUMP_ABSOLUTE(arg=30, lineno=3)
>         40	LOAD_CONST(arg=0, lineno=4)
          42	RETURN_VALUE(arg=None, lineno=4)
DEBUG 2022-02-14 16:38:20,907 pending: deque([State(pc_initial=0 nstack_initial=0)])
DEBUG 2022-02-14 16:38:20,907 stack: []
DEBUG 2022-02-14 16:38:20,907 dispatch pc=0, inst=NOP(arg=None, lineno=2)
DEBUG 2022-02-14 16:38:20,907 stack []
DEBUG 2022-02-14 16:38:20,907 dispatch pc=2, inst=LOAD_GLOBAL(arg=0, lineno=2)
DEBUG 2022-02-14 16:38:20,907 stack []
DEBUG 2022-02-14 16:38:20,907 dispatch pc=4, inst=LOAD_FAST(arg=0, lineno=2)
DEBUG 2022-02-14 16:38:20,907 stack ['$2load_global.0']
DEBUG 2022-02-14 16:38:20,907 dispatch pc=6, inst=LOAD_CONST(arg=1, lineno=2)
DEBUG 2022-02-14 16:38:20,907 stack ['$2load_global.0', '$sched4.1']
DEBUG 2022-02-14 16:38:20,907 dispatch pc=8, inst=BINARY_SUBSCR(arg=None, lineno=2)
DEBUG 2022-02-14 16:38:20,907 stack ['$2load_global.0', '$sched4.1', '$const6.2']
DEBUG 2022-02-14 16:38:20,908 dispatch pc=10, inst=LOAD_FAST(arg=0, lineno=2)
DEBUG 2022-02-14 16:38:20,908 stack ['$2load_global.0', '$8binary_subscr.3']
DEBUG 2022-02-14 16:38:20,908 dispatch pc=12, inst=LOAD_CONST(arg=2, lineno=2)
DEBUG 2022-02-14 16:38:20,908 stack ['$2load_global.0', '$8binary_subscr.3', '$sched10.4']
DEBUG 2022-02-14 16:38:20,908 dispatch pc=14, inst=BINARY_SUBSCR(arg=None, lineno=2)
DEBUG 2022-02-14 16:38:20,908 stack ['$2load_global.0', '$8binary_subscr.3', '$sched10.4', '$const12.5']
DEBUG 2022-02-14 16:38:20,908 dispatch pc=16, inst=LOAD_GLOBAL(arg=1, lineno=2)
DEBUG 2022-02-14 16:38:20,908 stack ['$2load_global.0', '$8binary_subscr.3', '$14binary_subscr.6']
DEBUG 2022-02-14 16:38:20,908 dispatch pc=18, inst=LOAD_METHOD(arg=2, lineno=2)
DEBUG 2022-02-14 16:38:20,908 stack ['$2load_global.0', '$8binary_subscr.3', '$14binary_subscr.6', '$16load_global.7']
DEBUG 2022-02-14 16:38:20,908 dispatch pc=20, inst=LOAD_CONST(arg=2, lineno=2)
DEBUG 2022-02-14 16:38:20,908 stack ['$2load_global.0', '$8binary_subscr.3', '$14binary_subscr.6', '$18load_method.8']
DEBUG 2022-02-14 16:38:20,908 dispatch pc=22, inst=CALL_METHOD(arg=1, lineno=2)
DEBUG 2022-02-14 16:38:20,908 stack ['$2load_global.0', '$8binary_subscr.3', '$14binary_subscr.6', '$18load_method.8', '$const20.9']
DEBUG 2022-02-14 16:38:20,908 dispatch pc=24, inst=BINARY_ADD(arg=None, lineno=2)
DEBUG 2022-02-14 16:38:20,908 stack ['$2load_global.0', '$8binary_subscr.3', '$14binary_subscr.6', '$22call_method.10']
DEBUG 2022-02-14 16:38:20,908 dispatch pc=26, inst=CALL_FUNCTION(arg=2, lineno=2)
DEBUG 2022-02-14 16:38:20,908 stack ['$2load_global.0', '$8binary_subscr.3', '$24binary_add.11']
DEBUG 2022-02-14 16:38:20,908 dispatch pc=28, inst=GET_ITER(arg=None, lineno=2)
DEBUG 2022-02-14 16:38:20,908 stack ['$26call_function.12']
DEBUG 2022-02-14 16:38:20,908 end state. edges=[Edge(pc=30, stack=('$28get_iter.13',), blockstack=(), npush=0)]
DEBUG 2022-02-14 16:38:20,909 pending: deque([State(pc_initial=30 nstack_initial=1)])
DEBUG 2022-02-14 16:38:20,909 stack: ['$phi30.0']
DEBUG 2022-02-14 16:38:20,909 dispatch pc=30, inst=FOR_ITER(arg=8, lineno=2)
DEBUG 2022-02-14 16:38:20,909 stack ['$phi30.0']
DEBUG 2022-02-14 16:38:20,909 end state. edges=[Edge(pc=40, stack=(), blockstack=(), npush=0), Edge(pc=32, stack=('$phi30.0', '$30for_iter.2'), blockstack=(), npush=0)]
DEBUG 2022-02-14 16:38:20,909 pending: deque([State(pc_initial=40 nstack_initial=0), State(pc_initial=32 nstack_initial=2)])
DEBUG 2022-02-14 16:38:20,909 stack: []
DEBUG 2022-02-14 16:38:20,909 dispatch pc=40, inst=LOAD_CONST(arg=0, lineno=4)
DEBUG 2022-02-14 16:38:20,909 stack []
DEBUG 2022-02-14 16:38:20,909 dispatch pc=42, inst=RETURN_VALUE(arg=None, lineno=4)
DEBUG 2022-02-14 16:38:20,909 stack ['$const40.0']
DEBUG 2022-02-14 16:38:20,909 end state. edges=[]
DEBUG 2022-02-14 16:38:20,909 pending: deque([State(pc_initial=32 nstack_initial=2)])
DEBUG 2022-02-14 16:38:20,909 stack: ['$phi32.0', '$phi32.1']
DEBUG 2022-02-14 16:38:20,909 dispatch pc=32, inst=STORE_FAST(arg=2, lineno=2)
DEBUG 2022-02-14 16:38:20,909 stack ['$phi32.0', '$phi32.1']
DEBUG 2022-02-14 16:38:20,909 dispatch pc=34, inst=LOAD_CONST(arg=1, lineno=3)
DEBUG 2022-02-14 16:38:20,909 stack ['$phi32.0']
DEBUG 2022-02-14 16:38:20,909 dispatch pc=36, inst=STORE_FAST(arg=3, lineno=3)
DEBUG 2022-02-14 16:38:20,909 stack ['$phi32.0', '$const34.2']
DEBUG 2022-02-14 16:38:20,909 dispatch pc=38, inst=JUMP_ABSOLUTE(arg=30, lineno=3)
DEBUG 2022-02-14 16:38:20,909 stack ['$phi32.0']
DEBUG 2022-02-14 16:38:20,909 end state. edges=[Edge(pc=30, stack=('$phi32.0',), blockstack=(), npush=0)]
DEBUG 2022-02-14 16:38:20,909 pending: deque([State(pc_initial=30 nstack_initial=1)])
DEBUG 2022-02-14 16:38:20,909 -------------------------Prune PHIs-------------------------
DEBUG 2022-02-14 16:38:20,910 Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=30 nstack_initial=1): {'$phi30.0'},
             State(pc_initial=32 nstack_initial=2): {'$phi32.1'},
             State(pc_initial=40 nstack_initial=0): set()})
DEBUG 2022-02-14 16:38:20,910 defmap: {'$phi30.0': State(pc_initial=0 nstack_initial=0),
 '$phi32.1': State(pc_initial=30 nstack_initial=1)}
DEBUG 2022-02-14 16:38:20,910 phismap: defaultdict(<class 'set'>,
            {'$phi30.0': {('$28get_iter.13',
                           State(pc_initial=0 nstack_initial=0)),
                          ('$phi32.0', State(pc_initial=32 nstack_initial=2))},
             '$phi32.0': {('$phi30.0', State(pc_initial=30 nstack_initial=1))},
             '$phi32.1': {('$30for_iter.2',
                           State(pc_initial=30 nstack_initial=1))}})
DEBUG 2022-02-14 16:38:20,910 changing phismap: defaultdict(<class 'set'>,
            {'$phi30.0': {('$28get_iter.13',
                           State(pc_initial=0 nstack_initial=0)),
                          ('$phi30.0', State(pc_initial=30 nstack_initial=1))},
             '$phi32.0': {('$28get_iter.13',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi32.1': {('$30for_iter.2',
                           State(pc_initial=30 nstack_initial=1))}})
DEBUG 2022-02-14 16:38:20,910 changing phismap: defaultdict(<class 'set'>,
            {'$phi30.0': {('$28get_iter.13',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi32.0': {('$28get_iter.13',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi32.1': {('$30for_iter.2',
                           State(pc_initial=30 nstack_initial=1))}})
DEBUG 2022-02-14 16:38:20,910 changing phismap: defaultdict(<class 'set'>,
            {'$phi30.0': {('$28get_iter.13',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi32.0': {('$28get_iter.13',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi32.1': {('$30for_iter.2',
                           State(pc_initial=30 nstack_initial=1))}})
DEBUG 2022-02-14 16:38:20,911 keep phismap: {'$phi30.0': {('$28get_iter.13', State(pc_initial=0 nstack_initial=0))},
 '$phi32.1': {('$30for_iter.2', State(pc_initial=30 nstack_initial=1))}}
DEBUG 2022-02-14 16:38:20,911 new_out: defaultdict(<class 'dict'>,
            {State(pc_initial=0 nstack_initial=0): {'$phi30.0': '$28get_iter.13'},
             State(pc_initial=30 nstack_initial=1): {'$phi32.1': '$30for_iter.2'}})
DEBUG 2022-02-14 16:38:20,911 ----------------------DONE Prune PHIs-----------------------
DEBUG 2022-02-14 16:38:20,911 block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$2load_global.0'}), (4, {'res': '$sched4.1'}), (6, {'res': '$const6.2'}), (8, {'index': '$const6.2', 'target': '$sched4.1', 'res': '$8binary_subscr.3'}), (10, {'res': '$sched10.4'}), (12, {'res': '$const12.5'}), (14, {'index': '$const12.5', 'target': '$sched10.4', 'res': '$14binary_subscr.6'}), (16, {'res': '$16load_global.7'}), (18, {'item': '$16load_global.7', 'res': '$18load_method.8'}), (20, {'res': '$const20.9'}), (22, {'func': '$18load_method.8', 'args': ['$const20.9'], 'res': '$22call_method.10'}), (24, {'lhs': '$14binary_subscr.6', 'rhs': '$22call_method.10', 'res': '$24binary_add.11'}), (26, {'func': '$2load_global.0', 'args': ['$8binary_subscr.3', '$24binary_add.11'], 'res': '$26call_function.12'}), (28, {'value': '$26call_function.12', 'res': '$28get_iter.13'})), outgoing_phis={'$phi30.0': '$28get_iter.13'}, blockstack=(), active_try_block=None, outgoing_edgepushed={30: ('$28get_iter.13',)})
DEBUG 2022-02-14 16:38:20,911 block_infos State(pc_initial=30 nstack_initial=1):
AdaptBlockInfo(insts=((30, {'iterator': '$phi30.0', 'pair': '$30for_iter.1', 'indval': '$30for_iter.2', 'pred': '$30for_iter.3'}),), outgoing_phis={'$phi32.1': '$30for_iter.2'}, blockstack=(), active_try_block=None, outgoing_edgepushed={40: (), 32: ('$phi30.0', '$30for_iter.2')})
DEBUG 2022-02-14 16:38:20,911 block_infos State(pc_initial=32 nstack_initial=2):
AdaptBlockInfo(insts=((32, {'value': '$phi32.1'}), (34, {'res': '$const34.2'}), (36, {'value': '$const34.2'}), (38, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={30: ('$phi32.0',)})
DEBUG 2022-02-14 16:38:20,911 block_infos State(pc_initial=40 nstack_initial=0):
AdaptBlockInfo(insts=((40, {'res': '$const40.0'}), (42, {'retval': '$const40.0', 'castval': '$42return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG 2022-02-14 16:38:20,912 label 0:
    sched = arg(0, name=sched)               ['sched']
    H__batch = arg(1, name=H__batch)         ['H__batch']
    $2load_global.0 = global(range: <class 'range'>) ['$2load_global.0']
    $const6.2 = const(int, 0)                ['$const6.2']
    $8binary_subscr.3 = getitem(value=sched, index=$const6.2, fn=<built-in function getitem>) ['$8binary_subscr.3', '$const6.2', 'sched']
    $const12.5 = const(int, 1)               ['$const12.5']
    $14binary_subscr.6 = getitem(value=sched, index=$const12.5, fn=<built-in function getitem>) ['$14binary_subscr.6', '$const12.5', 'sched']
    $16load_global.7 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>) ['$16load_global.7']
    $18load_method.8 = getattr(value=$16load_global.7, attr=uint8) ['$16load_global.7', '$18load_method.8']
    $const20.9 = const(int, 1)               ['$const20.9']
    $22call_method.10 = call $18load_method.8($const20.9, func=$18load_method.8, args=[Var($const20.9, <string>:2)], kws=(), vararg=None, target=None) ['$18load_method.8', '$22call_method.10', '$const20.9']
    $24binary_add.11 = $14binary_subscr.6 + $22call_method.10 ['$14binary_subscr.6', '$22call_method.10', '$24binary_add.11']
    $26call_function.12 = call $2load_global.0($8binary_subscr.3, $24binary_add.11, func=$2load_global.0, args=[Var($8binary_subscr.3, <string>:2), Var($24binary_add.11, <string>:2)], kws=(), vararg=None, target=None) ['$24binary_add.11', '$26call_function.12', '$2load_global.0', '$8binary_subscr.3']
    $28get_iter.13 = getiter(value=$26call_function.12) ['$26call_function.12', '$28get_iter.13']
    $phi30.0 = $28get_iter.13                ['$28get_iter.13', '$phi30.0']
    jump 30                                  []
label 30:
    $30for_iter.1 = iternext(value=$phi30.0) ['$30for_iter.1', '$phi30.0']
    $30for_iter.2 = pair_first(value=$30for_iter.1) ['$30for_iter.1', '$30for_iter.2']
    $30for_iter.3 = pair_second(value=$30for_iter.1) ['$30for_iter.1', '$30for_iter.3']
    $phi32.1 = $30for_iter.2                 ['$30for_iter.2', '$phi32.1']
    branch $30for_iter.3, 32, 40             ['$30for_iter.3']
label 32:
    parfor__index_1356 = $phi32.1            ['$phi32.1', 'parfor__index_1356']
    __sentinel__0 = const(int, 0)            ['__sentinel__0']
    jump 30                                  []
label 40:
    $const40.0 = const(NoneType, None)       ['$const40.0']
    $42return_value.1 = cast(value=$const40.0) ['$42return_value.1', '$const40.0']
    return $42return_value.1                 ['$42return_value.1']

DEBUG 2022-02-14 16:38:20,916 ==== SSA block analysis pass on 0
DEBUG 2022-02-14 16:38:20,917 Running <numba.core.ssa._GatherDefsHandler object at 0x7fa041ccaac0>
DEBUG 2022-02-14 16:38:20,917 on stmt: sched.2017 = arg(0, name=sched)
DEBUG 2022-02-14 16:38:20,917 on stmt: H__batch = arg(1, name=H__batch)
DEBUG 2022-02-14 16:38:20,917 on stmt: $2load_global.0.2018 = global(range: <class 'range'>)
DEBUG 2022-02-14 16:38:20,917 on stmt: $const6.2.2019 = const(int, 0)
DEBUG 2022-02-14 16:38:20,917 on stmt: $8binary_subscr.3.2020 = getitem(value=sched.2017, index=$const6.2.2019, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:20,917 on stmt: $const12.5.2021 = const(int, 1)
DEBUG 2022-02-14 16:38:20,917 on stmt: $14binary_subscr.6.2022 = getitem(value=sched.2017, index=$const12.5.2021, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:20,917 on stmt: $16load_global.7.2023 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:38:20,917 on stmt: $18load_method.8.2024 = getattr(value=$16load_global.7.2023, attr=uint8)
DEBUG 2022-02-14 16:38:20,917 on stmt: $const20.9.2025 = const(int, 1)
DEBUG 2022-02-14 16:38:20,917 on stmt: $22call_method.10.2026 = call $18load_method.8.2024($const20.9.2025, func=$18load_method.8.2024, args=[Var($const20.9.2025, <string>:2)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:20,917 on stmt: $24binary_add.11.2027 = $14binary_subscr.6.2022 + $22call_method.10.2026
DEBUG 2022-02-14 16:38:20,917 on stmt: $26call_function.12.2028 = call $2load_global.0.2018($8binary_subscr.3.2020, $24binary_add.11.2027, func=$2load_global.0.2018, args=[Var($8binary_subscr.3.2020, <string>:2), Var($24binary_add.11.2027, <string>:2)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:20,917 on stmt: $28get_iter.13.2029 = getiter(value=$26call_function.12.2028)
DEBUG 2022-02-14 16:38:20,917 on stmt: $phi30.0.2030 = $28get_iter.13.2029
DEBUG 2022-02-14 16:38:20,918 on stmt: $expr_out_var.1360 = const(complex128, 0j)
DEBUG 2022-02-14 16:38:20,918 on stmt: jump 30
DEBUG 2022-02-14 16:38:20,918 ==== SSA block analysis pass on 30
DEBUG 2022-02-14 16:38:20,918 Running <numba.core.ssa._GatherDefsHandler object at 0x7fa041ccaac0>
DEBUG 2022-02-14 16:38:20,918 on stmt: $30for_iter.1.2031 = iternext(value=$phi30.0.2030)
DEBUG 2022-02-14 16:38:20,918 on stmt: $30for_iter.2.2032 = pair_first(value=$30for_iter.1.2031)
DEBUG 2022-02-14 16:38:20,918 on stmt: $30for_iter.3.2033 = pair_second(value=$30for_iter.1.2031)
DEBUG 2022-02-14 16:38:20,918 on stmt: $phi32.1.2034 = $30for_iter.2.2032
DEBUG 2022-02-14 16:38:20,918 on stmt: branch $30for_iter.3.2033, 32, 1212
DEBUG 2022-02-14 16:38:20,918 ==== SSA block analysis pass on 32
DEBUG 2022-02-14 16:38:20,918 Running <numba.core.ssa._GatherDefsHandler object at 0x7fa041ccaac0>
DEBUG 2022-02-14 16:38:20,918 on stmt: parfor__index_1356 = $phi32.1.2034
DEBUG 2022-02-14 16:38:20,918 on stmt: jump 40
DEBUG 2022-02-14 16:38:20,918 ==== SSA block analysis pass on 1212
DEBUG 2022-02-14 16:38:20,918 Running <numba.core.ssa._GatherDefsHandler object at 0x7fa041ccaac0>
DEBUG 2022-02-14 16:38:20,918 on stmt: $const40.0.2035 = const(NoneType, None)
DEBUG 2022-02-14 16:38:20,918 on stmt: $42return_value.1.2036 = cast(value=$const40.0.2035)
DEBUG 2022-02-14 16:38:20,918 on stmt: return $42return_value.1.2036
DEBUG 2022-02-14 16:38:20,919 ==== SSA block analysis pass on 40
DEBUG 2022-02-14 16:38:20,919 Running <numba.core.ssa._GatherDefsHandler object at 0x7fa041ccaac0>
DEBUG 2022-02-14 16:38:20,919 on stmt: H__batch[parfor__index_1356] = $expr_out_var.1360
DEBUG 2022-02-14 16:38:20,919 on stmt: jump 1211
DEBUG 2022-02-14 16:38:20,919 ==== SSA block analysis pass on 1211
DEBUG 2022-02-14 16:38:20,919 Running <numba.core.ssa._GatherDefsHandler object at 0x7fa041ccaac0>
DEBUG 2022-02-14 16:38:20,919 on stmt: jump 30
DEBUG 2022-02-14 16:38:20,919 defs defaultdict(<class 'list'>,
            {'$14binary_subscr.6.2022': [<numba.core.ir.Assign object at 0x7fa041cdcb80>],
             '$16load_global.7.2023': [<numba.core.ir.Assign object at 0x7fa041cdccd0>],
             '$18load_method.8.2024': [<numba.core.ir.Assign object at 0x7fa041cdce50>],
             '$22call_method.10.2026': [<numba.core.ir.Assign object at 0x7fa041cda220>],
             '$24binary_add.11.2027': [<numba.core.ir.Assign object at 0x7fa041cda340>],
             '$26call_function.12.2028': [<numba.core.ir.Assign object at 0x7fa041cda4f0>],
             '$28get_iter.13.2029': [<numba.core.ir.Assign object at 0x7fa041cda610>],
             '$2load_global.0.2018': [<numba.core.ir.Assign object at 0x7fa041cdc430>],
             '$30for_iter.1.2031': [<numba.core.ir.Assign object at 0x7fa041cda8e0>],
             '$30for_iter.2.2032': [<numba.core.ir.Assign object at 0x7fa041cdaa00>],
             '$30for_iter.3.2033': [<numba.core.ir.Assign object at 0x7fa041cdab20>],
             '$42return_value.1.2036': [<numba.core.ir.Assign object at 0x7fa041cde4f0>],
             '$8binary_subscr.3.2020': [<numba.core.ir.Assign object at 0x7fa041cdc760>],
             '$const12.5.2021': [<numba.core.ir.Assign object at 0x7fa041cdc9d0>],
             '$const20.9.2025': [<numba.core.ir.Assign object at 0x7fa041cdcfd0>],
             '$const40.0.2035': [<numba.core.ir.Assign object at 0x7fa041cde370>],
             '$const6.2.2019': [<numba.core.ir.Assign object at 0x7fa041cdc190>],
             '$expr_out_var.1360': [<numba.core.ir.Assign object at 0x7fa041ee0d30>],
             '$phi30.0.2030': [<numba.core.ir.Assign object at 0x7fa041cdc280>],
             '$phi32.1.2034': [<numba.core.ir.Assign object at 0x7fa041cda820>],
             'H__batch': [<numba.core.ir.Assign object at 0x7fa041cdc5b0>],
             'parfor__index_1356': [<numba.core.ir.Assign object at 0x7fa041cdadf0>],
             'sched.2017': [<numba.core.ir.Assign object at 0x7fa041cdc670>]})
DEBUG 2022-02-14 16:38:20,919 SSA violators set()
DEBUG 2022-02-14 16:38:21,087 bytecode dump:
>          0	NOP(arg=None, lineno=2)
           2	LOAD_GLOBAL(arg=0, lineno=2)
           4	LOAD_METHOD(arg=1, lineno=2)
           6	LOAD_FAST(arg=17, lineno=2)
           8	CALL_METHOD(arg=1, lineno=2)
          10	STORE_FAST(arg=18, lineno=2)
          12	LOAD_GLOBAL(arg=2, lineno=3)
          14	LOAD_FAST(arg=0, lineno=3)
          16	LOAD_CONST(arg=1, lineno=3)
          18	BINARY_SUBSCR(arg=None, lineno=3)
          20	LOAD_FAST(arg=0, lineno=3)
          22	LOAD_CONST(arg=2, lineno=3)
          24	BINARY_SUBSCR(arg=None, lineno=3)
          26	LOAD_GLOBAL(arg=0, lineno=3)
          28	LOAD_METHOD(arg=3, lineno=3)
          30	LOAD_CONST(arg=2, lineno=3)
          32	CALL_METHOD(arg=1, lineno=3)
          34	BINARY_ADD(arg=None, lineno=3)
          36	CALL_FUNCTION(arg=2, lineno=3)
          38	GET_ITER(arg=None, lineno=3)
>         40	FOR_ITER(arg=8, lineno=3)
          42	STORE_FAST(arg=19, lineno=3)
          44	LOAD_CONST(arg=1, lineno=4)
          46	STORE_FAST(arg=20, lineno=4)
          48	JUMP_ABSOLUTE(arg=40, lineno=4)
>         50	LOAD_FAST(arg=18, lineno=5)
          52	LOAD_CONST(arg=0, lineno=5)
          54	LOAD_CONST(arg=0, lineno=5)
          56	BUILD_SLICE(arg=2, lineno=5)
          58	BINARY_SUBSCR(arg=None, lineno=5)
          60	LOAD_FAST(arg=17, lineno=5)
          62	LOAD_CONST(arg=0, lineno=5)
          64	LOAD_CONST(arg=0, lineno=5)
          66	BUILD_SLICE(arg=2, lineno=5)
          68	STORE_SUBSCR(arg=None, lineno=5)
          70	LOAD_CONST(arg=0, lineno=6)
          72	RETURN_VALUE(arg=None, lineno=6)
DEBUG 2022-02-14 16:38:21,088 pending: deque([State(pc_initial=0 nstack_initial=0)])
DEBUG 2022-02-14 16:38:21,088 stack: []
DEBUG 2022-02-14 16:38:21,088 dispatch pc=0, inst=NOP(arg=None, lineno=2)
DEBUG 2022-02-14 16:38:21,088 stack []
DEBUG 2022-02-14 16:38:21,088 dispatch pc=2, inst=LOAD_GLOBAL(arg=0, lineno=2)
DEBUG 2022-02-14 16:38:21,088 stack []
DEBUG 2022-02-14 16:38:21,088 dispatch pc=4, inst=LOAD_METHOD(arg=1, lineno=2)
DEBUG 2022-02-14 16:38:21,088 stack ['$2load_global.0']
DEBUG 2022-02-14 16:38:21,088 dispatch pc=6, inst=LOAD_FAST(arg=17, lineno=2)
DEBUG 2022-02-14 16:38:21,088 stack ['$4load_method.1']
DEBUG 2022-02-14 16:38:21,088 dispatch pc=8, inst=CALL_METHOD(arg=1, lineno=2)
DEBUG 2022-02-14 16:38:21,088 stack ['$4load_method.1', '$H__batch_2__arr6.2']
DEBUG 2022-02-14 16:38:21,088 dispatch pc=10, inst=STORE_FAST(arg=18, lineno=2)
DEBUG 2022-02-14 16:38:21,088 stack ['$8call_method.3']
DEBUG 2022-02-14 16:38:21,088 dispatch pc=12, inst=LOAD_GLOBAL(arg=2, lineno=3)
DEBUG 2022-02-14 16:38:21,088 stack []
DEBUG 2022-02-14 16:38:21,088 dispatch pc=14, inst=LOAD_FAST(arg=0, lineno=3)
DEBUG 2022-02-14 16:38:21,088 stack ['$12load_global.4']
DEBUG 2022-02-14 16:38:21,088 dispatch pc=16, inst=LOAD_CONST(arg=1, lineno=3)
DEBUG 2022-02-14 16:38:21,088 stack ['$12load_global.4', '$sched14.5']
DEBUG 2022-02-14 16:38:21,089 dispatch pc=18, inst=BINARY_SUBSCR(arg=None, lineno=3)
DEBUG 2022-02-14 16:38:21,089 stack ['$12load_global.4', '$sched14.5', '$const16.6']
DEBUG 2022-02-14 16:38:21,089 dispatch pc=20, inst=LOAD_FAST(arg=0, lineno=3)
DEBUG 2022-02-14 16:38:21,089 stack ['$12load_global.4', '$18binary_subscr.7']
DEBUG 2022-02-14 16:38:21,089 dispatch pc=22, inst=LOAD_CONST(arg=2, lineno=3)
DEBUG 2022-02-14 16:38:21,089 stack ['$12load_global.4', '$18binary_subscr.7', '$sched20.8']
DEBUG 2022-02-14 16:38:21,089 dispatch pc=24, inst=BINARY_SUBSCR(arg=None, lineno=3)
DEBUG 2022-02-14 16:38:21,089 stack ['$12load_global.4', '$18binary_subscr.7', '$sched20.8', '$const22.9']
DEBUG 2022-02-14 16:38:21,089 dispatch pc=26, inst=LOAD_GLOBAL(arg=0, lineno=3)
DEBUG 2022-02-14 16:38:21,089 stack ['$12load_global.4', '$18binary_subscr.7', '$24binary_subscr.10']
DEBUG 2022-02-14 16:38:21,089 dispatch pc=28, inst=LOAD_METHOD(arg=3, lineno=3)
DEBUG 2022-02-14 16:38:21,089 stack ['$12load_global.4', '$18binary_subscr.7', '$24binary_subscr.10', '$26load_global.11']
DEBUG 2022-02-14 16:38:21,089 dispatch pc=30, inst=LOAD_CONST(arg=2, lineno=3)
DEBUG 2022-02-14 16:38:21,089 stack ['$12load_global.4', '$18binary_subscr.7', '$24binary_subscr.10', '$28load_method.12']
DEBUG 2022-02-14 16:38:21,089 dispatch pc=32, inst=CALL_METHOD(arg=1, lineno=3)
DEBUG 2022-02-14 16:38:21,089 stack ['$12load_global.4', '$18binary_subscr.7', '$24binary_subscr.10', '$28load_method.12', '$const30.13']
DEBUG 2022-02-14 16:38:21,089 dispatch pc=34, inst=BINARY_ADD(arg=None, lineno=3)
DEBUG 2022-02-14 16:38:21,089 stack ['$12load_global.4', '$18binary_subscr.7', '$24binary_subscr.10', '$32call_method.14']
DEBUG 2022-02-14 16:38:21,089 dispatch pc=36, inst=CALL_FUNCTION(arg=2, lineno=3)
DEBUG 2022-02-14 16:38:21,090 stack ['$12load_global.4', '$18binary_subscr.7', '$34binary_add.15']
DEBUG 2022-02-14 16:38:21,090 dispatch pc=38, inst=GET_ITER(arg=None, lineno=3)
DEBUG 2022-02-14 16:38:21,090 stack ['$36call_function.16']
DEBUG 2022-02-14 16:38:21,090 end state. edges=[Edge(pc=40, stack=('$38get_iter.17',), blockstack=(), npush=0)]
DEBUG 2022-02-14 16:38:21,090 pending: deque([State(pc_initial=40 nstack_initial=1)])
DEBUG 2022-02-14 16:38:21,090 stack: ['$phi40.0']
DEBUG 2022-02-14 16:38:21,090 dispatch pc=40, inst=FOR_ITER(arg=8, lineno=3)
DEBUG 2022-02-14 16:38:21,090 stack ['$phi40.0']
DEBUG 2022-02-14 16:38:21,090 end state. edges=[Edge(pc=50, stack=(), blockstack=(), npush=0), Edge(pc=42, stack=('$phi40.0', '$40for_iter.2'), blockstack=(), npush=0)]
DEBUG 2022-02-14 16:38:21,090 pending: deque([State(pc_initial=50 nstack_initial=0), State(pc_initial=42 nstack_initial=2)])
DEBUG 2022-02-14 16:38:21,090 stack: []
DEBUG 2022-02-14 16:38:21,090 dispatch pc=50, inst=LOAD_FAST(arg=18, lineno=5)
DEBUG 2022-02-14 16:38:21,090 stack []
DEBUG 2022-02-14 16:38:21,090 dispatch pc=52, inst=LOAD_CONST(arg=0, lineno=5)
DEBUG 2022-02-14 16:38:21,090 stack ['$H__batch_250.0']
DEBUG 2022-02-14 16:38:21,090 dispatch pc=54, inst=LOAD_CONST(arg=0, lineno=5)
DEBUG 2022-02-14 16:38:21,090 stack ['$H__batch_250.0', '$const52.1']
DEBUG 2022-02-14 16:38:21,090 dispatch pc=56, inst=BUILD_SLICE(arg=2, lineno=5)
DEBUG 2022-02-14 16:38:21,091 stack ['$H__batch_250.0', '$const52.1', '$const54.2']
DEBUG 2022-02-14 16:38:21,091 dispatch pc=58, inst=BINARY_SUBSCR(arg=None, lineno=5)
DEBUG 2022-02-14 16:38:21,091 stack ['$H__batch_250.0', '$56build_slice.4']
DEBUG 2022-02-14 16:38:21,091 dispatch pc=60, inst=LOAD_FAST(arg=17, lineno=5)
DEBUG 2022-02-14 16:38:21,091 stack ['$58binary_subscr.5']
DEBUG 2022-02-14 16:38:21,091 dispatch pc=62, inst=LOAD_CONST(arg=0, lineno=5)
DEBUG 2022-02-14 16:38:21,091 stack ['$58binary_subscr.5', '$H__batch_2__arr60.6']
DEBUG 2022-02-14 16:38:21,091 dispatch pc=64, inst=LOAD_CONST(arg=0, lineno=5)
DEBUG 2022-02-14 16:38:21,091 stack ['$58binary_subscr.5', '$H__batch_2__arr60.6', '$const62.7']
DEBUG 2022-02-14 16:38:21,091 dispatch pc=66, inst=BUILD_SLICE(arg=2, lineno=5)
DEBUG 2022-02-14 16:38:21,091 stack ['$58binary_subscr.5', '$H__batch_2__arr60.6', '$const62.7', '$const64.8']
DEBUG 2022-02-14 16:38:21,091 dispatch pc=68, inst=STORE_SUBSCR(arg=None, lineno=5)
DEBUG 2022-02-14 16:38:21,091 stack ['$58binary_subscr.5', '$H__batch_2__arr60.6', '$66build_slice.10']
DEBUG 2022-02-14 16:38:21,091 dispatch pc=70, inst=LOAD_CONST(arg=0, lineno=6)
DEBUG 2022-02-14 16:38:21,091 stack []
DEBUG 2022-02-14 16:38:21,091 dispatch pc=72, inst=RETURN_VALUE(arg=None, lineno=6)
DEBUG 2022-02-14 16:38:21,091 stack ['$const70.11']
DEBUG 2022-02-14 16:38:21,091 end state. edges=[]
DEBUG 2022-02-14 16:38:21,091 pending: deque([State(pc_initial=42 nstack_initial=2)])
DEBUG 2022-02-14 16:38:21,092 stack: ['$phi42.0', '$phi42.1']
DEBUG 2022-02-14 16:38:21,092 dispatch pc=42, inst=STORE_FAST(arg=19, lineno=3)
DEBUG 2022-02-14 16:38:21,092 stack ['$phi42.0', '$phi42.1']
DEBUG 2022-02-14 16:38:21,092 dispatch pc=44, inst=LOAD_CONST(arg=1, lineno=4)
DEBUG 2022-02-14 16:38:21,092 stack ['$phi42.0']
DEBUG 2022-02-14 16:38:21,092 dispatch pc=46, inst=STORE_FAST(arg=20, lineno=4)
DEBUG 2022-02-14 16:38:21,092 stack ['$phi42.0', '$const44.2']
DEBUG 2022-02-14 16:38:21,092 dispatch pc=48, inst=JUMP_ABSOLUTE(arg=40, lineno=4)
DEBUG 2022-02-14 16:38:21,092 stack ['$phi42.0']
DEBUG 2022-02-14 16:38:21,092 end state. edges=[Edge(pc=40, stack=('$phi42.0',), blockstack=(), npush=0)]
DEBUG 2022-02-14 16:38:21,092 pending: deque([State(pc_initial=40 nstack_initial=1)])
DEBUG 2022-02-14 16:38:21,092 -------------------------Prune PHIs-------------------------
DEBUG 2022-02-14 16:38:21,092 Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=40 nstack_initial=1): {'$phi40.0'},
             State(pc_initial=42 nstack_initial=2): {'$phi42.1'},
             State(pc_initial=50 nstack_initial=0): set()})
DEBUG 2022-02-14 16:38:21,092 defmap: {'$phi40.0': State(pc_initial=0 nstack_initial=0),
 '$phi42.1': State(pc_initial=40 nstack_initial=1)}
DEBUG 2022-02-14 16:38:21,092 phismap: defaultdict(<class 'set'>,
            {'$phi40.0': {('$38get_iter.17',
                           State(pc_initial=0 nstack_initial=0)),
                          ('$phi42.0', State(pc_initial=42 nstack_initial=2))},
             '$phi42.0': {('$phi40.0', State(pc_initial=40 nstack_initial=1))},
             '$phi42.1': {('$40for_iter.2',
                           State(pc_initial=40 nstack_initial=1))}})
DEBUG 2022-02-14 16:38:21,093 changing phismap: defaultdict(<class 'set'>,
            {'$phi40.0': {('$38get_iter.17',
                           State(pc_initial=0 nstack_initial=0)),
                          ('$phi40.0', State(pc_initial=40 nstack_initial=1))},
             '$phi42.0': {('$38get_iter.17',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi42.1': {('$40for_iter.2',
                           State(pc_initial=40 nstack_initial=1))}})
DEBUG 2022-02-14 16:38:21,093 changing phismap: defaultdict(<class 'set'>,
            {'$phi40.0': {('$38get_iter.17',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi42.0': {('$38get_iter.17',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi42.1': {('$40for_iter.2',
                           State(pc_initial=40 nstack_initial=1))}})
DEBUG 2022-02-14 16:38:21,093 changing phismap: defaultdict(<class 'set'>,
            {'$phi40.0': {('$38get_iter.17',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi42.0': {('$38get_iter.17',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi42.1': {('$40for_iter.2',
                           State(pc_initial=40 nstack_initial=1))}})
DEBUG 2022-02-14 16:38:21,093 keep phismap: {'$phi40.0': {('$38get_iter.17', State(pc_initial=0 nstack_initial=0))},
 '$phi42.1': {('$40for_iter.2', State(pc_initial=40 nstack_initial=1))}}
DEBUG 2022-02-14 16:38:21,093 new_out: defaultdict(<class 'dict'>,
            {State(pc_initial=0 nstack_initial=0): {'$phi40.0': '$38get_iter.17'},
             State(pc_initial=40 nstack_initial=1): {'$phi42.1': '$40for_iter.2'}})
DEBUG 2022-02-14 16:38:21,094 ----------------------DONE Prune PHIs-----------------------
DEBUG 2022-02-14 16:38:21,094 block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$2load_global.0'}), (4, {'item': '$2load_global.0', 'res': '$4load_method.1'}), (6, {'res': '$H__batch_2__arr6.2'}), (8, {'func': '$4load_method.1', 'args': ['$H__batch_2__arr6.2'], 'res': '$8call_method.3'}), (10, {'value': '$8call_method.3'}), (12, {'res': '$12load_global.4'}), (14, {'res': '$sched14.5'}), (16, {'res': '$const16.6'}), (18, {'index': '$const16.6', 'target': '$sched14.5', 'res': '$18binary_subscr.7'}), (20, {'res': '$sched20.8'}), (22, {'res': '$const22.9'}), (24, {'index': '$const22.9', 'target': '$sched20.8', 'res': '$24binary_subscr.10'}), (26, {'res': '$26load_global.11'}), (28, {'item': '$26load_global.11', 'res': '$28load_method.12'}), (30, {'res': '$const30.13'}), (32, {'func': '$28load_method.12', 'args': ['$const30.13'], 'res': '$32call_method.14'}), (34, {'lhs': '$24binary_subscr.10', 'rhs': '$32call_method.14', 'res': '$34binary_add.15'}), (36, {'func': '$12load_global.4', 'args': ['$18binary_subscr.7', '$34binary_add.15'], 'res': '$36call_function.16'}), (38, {'value': '$36call_function.16', 'res': '$38get_iter.17'})), outgoing_phis={'$phi40.0': '$38get_iter.17'}, blockstack=(), active_try_block=None, outgoing_edgepushed={40: ('$38get_iter.17',)})
DEBUG 2022-02-14 16:38:21,094 block_infos State(pc_initial=40 nstack_initial=1):
AdaptBlockInfo(insts=((40, {'iterator': '$phi40.0', 'pair': '$40for_iter.1', 'indval': '$40for_iter.2', 'pred': '$40for_iter.3'}),), outgoing_phis={'$phi42.1': '$40for_iter.2'}, blockstack=(), active_try_block=None, outgoing_edgepushed={50: (), 42: ('$phi40.0', '$40for_iter.2')})
DEBUG 2022-02-14 16:38:21,094 block_infos State(pc_initial=42 nstack_initial=2):
AdaptBlockInfo(insts=((42, {'value': '$phi42.1'}), (44, {'res': '$const44.2'}), (46, {'value': '$const44.2'}), (48, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={40: ('$phi42.0',)})
DEBUG 2022-02-14 16:38:21,094 block_infos State(pc_initial=50 nstack_initial=0):
AdaptBlockInfo(insts=((50, {'res': '$H__batch_250.0'}), (52, {'res': '$const52.1'}), (54, {'res': '$const54.2'}), (56, {'start': '$const52.1', 'stop': '$const54.2', 'step': None, 'res': '$56build_slice.4', 'slicevar': '$56build_slice.3'}), (58, {'index': '$56build_slice.4', 'target': '$H__batch_250.0', 'res': '$58binary_subscr.5'}), (60, {'res': '$H__batch_2__arr60.6'}), (62, {'res': '$const62.7'}), (64, {'res': '$const64.8'}), (66, {'start': '$const62.7', 'stop': '$const64.8', 'step': None, 'res': '$66build_slice.10', 'slicevar': '$66build_slice.9'}), (68, {'target': '$H__batch_2__arr60.6', 'index': '$66build_slice.10', 'value': '$58binary_subscr.5'}), (70, {'res': '$const70.11'}), (72, {'retval': '$const70.11', 'castval': '$72return_value.12'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG 2022-02-14 16:38:21,095 label 0:
    sched = arg(0, name=sched)               ['sched']
    _170binary__add_75 = arg(1, name=_170binary__add_75) ['_170binary__add_75']
    A = arg(2, name=A)                       ['A']
    D = arg(3, name=D)                       ['D']
    N__fixed = arg(4, name=N__fixed)         ['N__fixed']
    N__max = arg(5, name=N__max)             ['N__max']
    batch__max = arg(6, name=batch__max)     ['batch__max']
    binoms = arg(7, name=binoms)             ['binoms']
    edge__reps = arg(8, name=edge__reps)     ['edge__reps']
    edge__reps__size0_1303 = arg(9, name=edge__reps__size0_1303) ['edge__reps__size0_1303']
    even__cutoff = arg(10, name=even__cutoff) ['even__cutoff']
    glynn = arg(11, name=glynn)              ['glynn']
    n = arg(12, name=n)                      ['n']
    oddV = arg(13, name=oddV)                ['oddV']
    oddV0 = arg(14, name=oddV0)              ['oddV0']
    oddloop = arg(15, name=oddloop)          ['oddloop']
    oddloop0 = arg(16, name=oddloop0)        ['oddloop0']
    H__batch_2__arr = arg(17, name=H__batch_2__arr) ['H__batch_2__arr']
    $2load_global.0 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>) ['$2load_global.0']
    $4load_method.1 = getattr(value=$2load_global.0, attr=copy) ['$2load_global.0', '$4load_method.1']
    H__batch_2 = call $4load_method.1(H__batch_2__arr, func=$4load_method.1, args=[Var(H__batch_2__arr, <string>:2)], kws=(), vararg=None, target=None) ['$4load_method.1', 'H__batch_2', 'H__batch_2__arr']
    $12load_global.4 = global(range: <class 'range'>) ['$12load_global.4']
    $const16.6 = const(int, 0)               ['$const16.6']
    $18binary_subscr.7 = getitem(value=sched, index=$const16.6, fn=<built-in function getitem>) ['$18binary_subscr.7', '$const16.6', 'sched']
    $const22.9 = const(int, 1)               ['$const22.9']
    $24binary_subscr.10 = getitem(value=sched, index=$const22.9, fn=<built-in function getitem>) ['$24binary_subscr.10', '$const22.9', 'sched']
    $26load_global.11 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>) ['$26load_global.11']
    $28load_method.12 = getattr(value=$26load_global.11, attr=uint8) ['$26load_global.11', '$28load_method.12']
    $const30.13 = const(int, 1)              ['$const30.13']
    $32call_method.14 = call $28load_method.12($const30.13, func=$28load_method.12, args=[Var($const30.13, <string>:3)], kws=(), vararg=None, target=None) ['$28load_method.12', '$32call_method.14', '$const30.13']
    $34binary_add.15 = $24binary_subscr.10 + $32call_method.14 ['$24binary_subscr.10', '$32call_method.14', '$34binary_add.15']
    $36call_function.16 = call $12load_global.4($18binary_subscr.7, $34binary_add.15, func=$12load_global.4, args=[Var($18binary_subscr.7, <string>:3), Var($34binary_add.15, <string>:3)], kws=(), vararg=None, target=None) ['$12load_global.4', '$18binary_subscr.7', '$34binary_add.15', '$36call_function.16']
    $38get_iter.17 = getiter(value=$36call_function.16) ['$36call_function.16', '$38get_iter.17']
    $phi40.0 = $38get_iter.17                ['$38get_iter.17', '$phi40.0']
    jump 40                                  []
label 40:
    $40for_iter.1 = iternext(value=$phi40.0) ['$40for_iter.1', '$phi40.0']
    $40for_iter.2 = pair_first(value=$40for_iter.1) ['$40for_iter.1', '$40for_iter.2']
    $40for_iter.3 = pair_second(value=$40for_iter.1) ['$40for_iter.1', '$40for_iter.3']
    $phi42.1 = $40for_iter.2                 ['$40for_iter.2', '$phi42.1']
    branch $40for_iter.3, 42, 50             ['$40for_iter.3']
label 42:
    parfor__index_1383 = $phi42.1            ['$phi42.1', 'parfor__index_1383']
    __sentinel__0 = const(int, 0)            ['__sentinel__0']
    jump 40                                  []
label 50:
    $const52.1 = const(NoneType, None)       ['$const52.1']
    $const54.2 = const(NoneType, None)       ['$const54.2']
    $56build_slice.3 = global(slice: <class 'slice'>) ['$56build_slice.3']
    $56build_slice.4 = call $56build_slice.3($const52.1, $const54.2, func=$56build_slice.3, args=(Var($const52.1, <string>:5), Var($const54.2, <string>:5)), kws=(), vararg=None, target=None) ['$56build_slice.3', '$56build_slice.4', '$const52.1', '$const54.2']
    $58binary_subscr.5 = getitem(value=H__batch_2, index=$56build_slice.4, fn=<built-in function getitem>) ['$56build_slice.4', '$58binary_subscr.5', 'H__batch_2']
    $const62.7 = const(NoneType, None)       ['$const62.7']
    $const64.8 = const(NoneType, None)       ['$const64.8']
    $66build_slice.9 = global(slice: <class 'slice'>) ['$66build_slice.9']
    $66build_slice.10 = call $66build_slice.9($const62.7, $const64.8, func=$66build_slice.9, args=(Var($const62.7, <string>:5), Var($const64.8, <string>:5)), kws=(), vararg=None, target=None) ['$66build_slice.10', '$66build_slice.9', '$const62.7', '$const64.8']
    H__batch_2__arr[$66build_slice.10] = $58binary_subscr.5 ['$58binary_subscr.5', '$66build_slice.10', 'H__batch_2__arr']
    $const70.11 = const(NoneType, None)      ['$const70.11']
    $72return_value.12 = cast(value=$const70.11) ['$72return_value.12', '$const70.11']
    return $72return_value.12                ['$72return_value.12']

DEBUG 2022-02-14 16:38:21,126 ==== SSA block analysis pass on 0
DEBUG 2022-02-14 16:38:21,126 Running <numba.core.ssa._GatherDefsHandler object at 0x7fa041d3ac70>
DEBUG 2022-02-14 16:38:21,126 on stmt: sched.2060 = arg(0, name=sched)
DEBUG 2022-02-14 16:38:21,126 on stmt: _170binary__add_75 = arg(1, name=_170binary__add_75)
DEBUG 2022-02-14 16:38:21,126 on stmt: A = arg(2, name=A)
DEBUG 2022-02-14 16:38:21,126 on stmt: D = arg(3, name=D)
DEBUG 2022-02-14 16:38:21,126 on stmt: N__fixed = arg(4, name=N__fixed)
DEBUG 2022-02-14 16:38:21,126 on stmt: N__max = arg(5, name=N__max)
DEBUG 2022-02-14 16:38:21,126 on stmt: batch__max = arg(6, name=batch__max)
DEBUG 2022-02-14 16:38:21,126 on stmt: binoms = arg(7, name=binoms)
DEBUG 2022-02-14 16:38:21,126 on stmt: edge__reps = arg(8, name=edge__reps)
DEBUG 2022-02-14 16:38:21,126 on stmt: edge__reps__size0_1303 = arg(9, name=edge__reps__size0_1303)
DEBUG 2022-02-14 16:38:21,126 on stmt: even__cutoff = arg(10, name=even__cutoff)
DEBUG 2022-02-14 16:38:21,126 on stmt: glynn = arg(11, name=glynn)
DEBUG 2022-02-14 16:38:21,127 on stmt: n = arg(12, name=n)
DEBUG 2022-02-14 16:38:21,127 on stmt: oddV = arg(13, name=oddV)
DEBUG 2022-02-14 16:38:21,127 on stmt: oddV0 = arg(14, name=oddV0)
DEBUG 2022-02-14 16:38:21,127 on stmt: oddloop = arg(15, name=oddloop)
DEBUG 2022-02-14 16:38:21,127 on stmt: oddloop0 = arg(16, name=oddloop0)
DEBUG 2022-02-14 16:38:21,127 on stmt: H__batch_2__arr = arg(17, name=H__batch_2__arr)
DEBUG 2022-02-14 16:38:21,127 on stmt: $2load_global.0.2061 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:38:21,127 on stmt: $4load_method.1.2062 = getattr(value=$2load_global.0.2061, attr=copy)
DEBUG 2022-02-14 16:38:21,127 on stmt: H__batch_2 = call $4load_method.1.2062(H__batch_2__arr, func=$4load_method.1.2062, args=[Var(H__batch_2__arr, <string>:2)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:21,127 on stmt: $12load_global.4.2063 = global(range: <class 'range'>)
DEBUG 2022-02-14 16:38:21,127 on stmt: $const16.6.2064 = const(int, 0)
DEBUG 2022-02-14 16:38:21,127 on stmt: $18binary_subscr.7.2065 = getitem(value=sched.2060, index=$const16.6.2064, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:21,127 on stmt: $const22.9.2066 = const(int, 1)
DEBUG 2022-02-14 16:38:21,127 on stmt: $24binary_subscr.10.2067 = getitem(value=sched.2060, index=$const22.9.2066, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:21,127 on stmt: $26load_global.11.2068 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:38:21,127 on stmt: $28load_method.12.2069 = getattr(value=$26load_global.11.2068, attr=uint8)
DEBUG 2022-02-14 16:38:21,127 on stmt: $const30.13.2070 = const(int, 1)
DEBUG 2022-02-14 16:38:21,127 on stmt: $32call_method.14.2071 = call $28load_method.12.2069($const30.13.2070, func=$28load_method.12.2069, args=[Var($const30.13.2070, <string>:3)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:21,127 on stmt: $34binary_add.15.2072 = $24binary_subscr.10.2067 + $32call_method.14.2071
DEBUG 2022-02-14 16:38:21,127 on stmt: $36call_function.16.2073 = call $12load_global.4.2063($18binary_subscr.7.2065, $34binary_add.15.2072, func=$12load_global.4.2063, args=[Var($18binary_subscr.7.2065, <string>:3), Var($34binary_add.15.2072, <string>:3)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:21,128 on stmt: $38get_iter.17.2074 = getiter(value=$36call_function.16.2073)
DEBUG 2022-02-14 16:38:21,128 on stmt: $phi40.0.2075 = $38get_iter.17.2074
DEBUG 2022-02-14 16:38:21,128 on stmt: bool296 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:38:21,128 on stmt: msg.1313 = const(str, Sizes of kept_edges, edge_reps do not match on /home/adi/GBS/gbs/loop_hafnian_batch.py (114))
DEBUG 2022-02-14 16:38:21,128 on stmt: assert.1314 = global(assert_equiv: <intrinsic assert_equiv>)
DEBUG 2022-02-14 16:38:21,128 on stmt: $np_g_var.1367 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:38:21,128 on stmt: $empty_attr_attr.1368 = getattr(value=$np_g_var.1367, attr=empty)
DEBUG 2022-02-14 16:38:21,128 on stmt: $np_typ_var.1369 = getattr(value=$np_g_var.1367, attr=int64)
DEBUG 2022-02-14 16:38:21,128 on stmt: delta = call $empty_attr_attr.1368(edge__reps__size0_1303, $np_typ_var.1369, func=$empty_attr_attr.1368, args=[Var(edge__reps__size0_1303, loop_hafnian_batch.py:95), Var($np_typ_var.1369, loop_hafnian_batch.py:114)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:21,128 on stmt: msg.1344 = const(str, Sizes of H_batch.2, Hnew do not match on /home/adi/GBS/gbs/loop_hafnian_batch.py (142))
DEBUG 2022-02-14 16:38:21,128 on stmt: assert.1345 = global(assert_equiv: <intrinsic assert_equiv>)
DEBUG 2022-02-14 16:38:21,128 on stmt: $318load_global.1 = global(get_submatrices: CPUDispatcher(<function get_submatrices at 0x7fa047ebed30>))
DEBUG 2022-02-14 16:38:21,128 on stmt: $340load_global.12 = global(eigvals: CPUDispatcher(<function eigvals at 0x7fa047e5d430>))
DEBUG 2022-02-14 16:38:21,128 on stmt: $const350.16 = const(int, 0)
DEBUG 2022-02-14 16:38:21,128 on stmt: $const354.18 = const(int, 0)
DEBUG 2022-02-14 16:38:21,128 on stmt: bool358 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:38:21,128 on stmt: $const364.2 = const(int, 1)
DEBUG 2022-02-14 16:38:21,128 on stmt: $const368.4 = const(int, 0)
DEBUG 2022-02-14 16:38:21,128 on stmt: bool372 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:38:21,128 on stmt: $450load_global.1 = global(f_loop: CPUDispatcher(<function f_loop at 0x7fa047ebe9d0>))
DEBUG 2022-02-14 16:38:21,129 on stmt: $466load_global.8 = global(f_loop_odd: CPUDispatcher(<function f_loop_odd at 0x7fa047ebeb80>))
DEBUG 2022-02-14 16:38:21,129 on stmt: $486load_global.17 = global(range: <class 'range'>)
DEBUG 2022-02-14 16:38:21,129 on stmt: $const488.18 = const(int, 2)
DEBUG 2022-02-14 16:38:21,129 on stmt: $const492.20 = const(int, 0)
DEBUG 2022-02-14 16:38:21,129 on stmt: $const498.23 = const(int, 1)
DEBUG 2022-02-14 16:38:21,129 on stmt: $const502.25 = const(int, 2)
DEBUG 2022-02-14 16:38:21,129 on stmt: $506binary_multiply.27 = $const502.25 * batch__max
DEBUG 2022-02-14 16:38:21,129 on stmt: $510binary_add.29 = $506binary_multiply.27 + even__cutoff
DEBUG 2022-02-14 16:38:21,129 on stmt: $const512.30 = const(int, 2)
DEBUG 2022-02-14 16:38:21,129 on stmt: $514binary_add.31 = $510binary_add.29 + $const512.30
DEBUG 2022-02-14 16:38:21,129 on stmt: $const202.4 = const(int, 2)
DEBUG 2022-02-14 16:38:21,129 on stmt: $206binary_multiply.6 = $const202.4 * batch__max
DEBUG 2022-02-14 16:38:21,129 on stmt: $210binary_add.8 = $206binary_multiply.6 + even__cutoff
DEBUG 2022-02-14 16:38:21,129 on stmt: $const212.9 = const(int, 2)
DEBUG 2022-02-14 16:38:21,129 on stmt: $214binary_add.10 = $210binary_add.8 + $const212.9
DEBUG 2022-02-14 16:38:21,129 on stmt: $226load_global.15 = global(find_kept_edges: CPUDispatcher(<function find_kept_edges at 0x7fa047ebe790>))
DEBUG 2022-02-14 16:38:21,129 on stmt: $np_g_var.1362 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:38:21,129 on stmt: $empty_attr_attr.1363 = getattr(value=$np_g_var.1362, attr=empty)
DEBUG 2022-02-14 16:38:21,129 on stmt: $np_typ_var.1364 = getattr(value=$np_g_var.1362, attr=complex128)
DEBUG 2022-02-14 16:38:21,129 on stmt: Hnew = call $empty_attr_attr.1363($214binary_add.10, $np_typ_var.1364, func=$empty_attr_attr.1363, args=[Var($214binary_add.10, loop_hafnian_batch.py:104), Var($np_typ_var.1364, loop_hafnian_batch.py:104)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:21,129 on stmt: binom_prod = const(float, 1.0)
DEBUG 2022-02-14 16:38:21,130 on stmt: $248load_global.23 = global(range: <class 'range'>)
DEBUG 2022-02-14 16:38:21,130 on stmt: $const250.24 = const(int, 1)
DEBUG 2022-02-14 16:38:21,130 on stmt: $const254.26 = const(int, 2)
DEBUG 2022-02-14 16:38:21,130 on stmt: $256binary_floor_divide.27 = n // $const254.26
DEBUG 2022-02-14 16:38:21,130 on stmt: $const532.6 = const(int, -1)
DEBUG 2022-02-14 16:38:21,130 on stmt: $const536.8 = const(int, 2)
DEBUG 2022-02-14 16:38:21,130 on stmt: $const552.15 = const(int, 1)
DEBUG 2022-02-14 16:38:21,130 on stmt: $const556.17 = const(int, 2)
DEBUG 2022-02-14 16:38:21,130 on stmt: $const562.20 = const(int, 0)
DEBUG 2022-02-14 16:38:21,130 on stmt: $const578.27 = const(int, 2)
DEBUG 2022-02-14 16:38:21,130 on stmt: $const582.29 = const(int, 0)
DEBUG 2022-02-14 16:38:21,130 on stmt: bool586 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:38:21,130 on stmt: $376load_global.1 = global(get_submatrix_batch_odd0: CPUDispatcher(<function get_submatrix_batch_odd0 at 0x7fa047ebef70>))
DEBUG 2022-02-14 16:38:21,130 on stmt: $const386.5 = const(int, -1)
DEBUG 2022-02-14 16:38:21,130 on stmt: $const390.7 = const(int, 2)
DEBUG 2022-02-14 16:38:21,130 on stmt: $392binary_floor_divide.8 = N__fixed // $const390.7
DEBUG 2022-02-14 16:38:21,130 on stmt: $402load_global.12 = global(f_loop_odd: CPUDispatcher(<function f_loop_odd at 0x7fa047ebeb80>))
DEBUG 2022-02-14 16:38:21,130 on stmt: $const428.24 = const(int, 0)
DEBUG 2022-02-14 16:38:21,130 on stmt: $const608.12 = const(int, 2)
DEBUG 2022-02-14 16:38:21,130 on stmt: jump 40
DEBUG 2022-02-14 16:38:21,130 ==== SSA block analysis pass on 40
DEBUG 2022-02-14 16:38:21,131 Running <numba.core.ssa._GatherDefsHandler object at 0x7fa041d3ac70>
DEBUG 2022-02-14 16:38:21,131 on stmt: $40for_iter.1.2076 = iternext(value=$phi40.0.2075)
DEBUG 2022-02-14 16:38:21,131 on stmt: $40for_iter.2.2077 = pair_first(value=$40for_iter.1.2076)
DEBUG 2022-02-14 16:38:21,131 on stmt: $40for_iter.3.2078 = pair_second(value=$40for_iter.1.2076)
DEBUG 2022-02-14 16:38:21,131 on stmt: $phi42.1.2079 = $40for_iter.2.2077
DEBUG 2022-02-14 16:38:21,131 on stmt: branch $40for_iter.3.2078, 42, 1224
DEBUG 2022-02-14 16:38:21,131 ==== SSA block analysis pass on 42
DEBUG 2022-02-14 16:38:21,131 Running <numba.core.ssa._GatherDefsHandler object at 0x7fa041d3ac70>
DEBUG 2022-02-14 16:38:21,131 on stmt: parfor__index_1383 = $phi42.1.2079
DEBUG 2022-02-14 16:38:21,131 on stmt: jump 50
DEBUG 2022-02-14 16:38:21,131 ==== SSA block analysis pass on 1224
DEBUG 2022-02-14 16:38:21,131 Running <numba.core.ssa._GatherDefsHandler object at 0x7fa041d3ac70>
DEBUG 2022-02-14 16:38:21,131 on stmt: $const52.1.2080 = const(NoneType, None)
DEBUG 2022-02-14 16:38:21,131 on stmt: $const54.2.2081 = const(NoneType, None)
DEBUG 2022-02-14 16:38:21,131 on stmt: $56build_slice.3.2082 = global(slice: <class 'slice'>)
DEBUG 2022-02-14 16:38:21,131 on stmt: $56build_slice.4.2083 = call $56build_slice.3.2082($const52.1.2080, $const54.2.2081, func=$56build_slice.3.2082, args=(Var($const52.1.2080, <string>:5), Var($const54.2.2081, <string>:5)), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:21,131 on stmt: $58binary_subscr.5.2084 = getitem(value=H__batch_2, index=$56build_slice.4.2083, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:21,131 on stmt: $const62.7.2085 = const(NoneType, None)
DEBUG 2022-02-14 16:38:21,131 on stmt: $const64.8.2086 = const(NoneType, None)
DEBUG 2022-02-14 16:38:21,131 on stmt: $66build_slice.9.2087 = global(slice: <class 'slice'>)
DEBUG 2022-02-14 16:38:21,131 on stmt: $66build_slice.10.2088 = call $66build_slice.9.2087($const62.7.2085, $const64.8.2086, func=$66build_slice.9.2087, args=(Var($const62.7.2085, <string>:5), Var($const64.8.2086, <string>:5)), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:21,131 on stmt: H__batch_2__arr[$66build_slice.10.2088] = $58binary_subscr.5.2084
DEBUG 2022-02-14 16:38:21,132 on stmt: $const70.11.2089 = const(NoneType, None)
DEBUG 2022-02-14 16:38:21,132 on stmt: $72return_value.12.2090 = cast(value=$const70.11.2089)
DEBUG 2022-02-14 16:38:21,132 on stmt: return $72return_value.12.2090
DEBUG 2022-02-14 16:38:21,132 ==== SSA block analysis pass on 1062
DEBUG 2022-02-14 16:38:21,132 Running <numba.core.ssa._GatherDefsHandler object at 0x7fa041d3ac70>
DEBUG 2022-02-14 16:38:21,132 on stmt: jump 1003
DEBUG 2022-02-14 16:38:21,132 ==== SSA block analysis pass on 675
DEBUG 2022-02-14 16:38:21,132 Running <numba.core.ssa._GatherDefsHandler object at 0x7fa041d3ac70>
DEBUG 2022-02-14 16:38:21,132 on stmt: $274binary_subscr.7 = getitem(value=edge__reps, index=$i.1405, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:21,132 on stmt: $280binary_subscr.10 = getitem(value=kept_edges, index=$i.1405, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:21,132 on stmt: $282build_tuple.11 = build_tuple(items=[Var($274binary_subscr.7, loop_hafnian_batch.py:111), Var($280binary_subscr.10, loop_hafnian_batch.py:111)])
DEBUG 2022-02-14 16:38:21,132 on stmt: $284binary_subscr.12 = getitem(value=binoms, index=$282build_tuple.11, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:21,132 on stmt: $binom_prod.2.1826 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=binom_prod.2, rhs=$284binary_subscr.12, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:38:21,132 on stmt: binom_prod.2 = $binom_prod.2.1826
DEBUG 2022-02-14 16:38:21,132 on stmt: jump 501
DEBUG 2022-02-14 16:38:21,132 ==== SSA block analysis pass on 703
DEBUG 2022-02-14 16:38:21,132 Running <numba.core.ssa._GatherDefsHandler object at 0x7fa041d3ac70>
DEBUG 2022-02-14 16:38:21,132 on stmt: $296pred = call bool296(glynn, func=bool296, args=(Var(glynn, loop_hafnian_batch.py:83),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:21,132 on stmt: branch $296pred, 707, 717
DEBUG 2022-02-14 16:38:21,132 ==== SSA block analysis pass on 707
DEBUG 2022-02-14 16:38:21,132 Running <numba.core.ssa._GatherDefsHandler object at 0x7fa041d3ac70>
DEBUG 2022-02-14 16:38:21,132 on stmt: ret.1315 = call assert.1314(msg.1313, kept_edges_size0.1311, edge__reps__size0_1303, func=assert.1314, args=[Var(msg.1313, loop_hafnian_batch.py:114), Var(kept_edges_size0.1311, loop_hafnian_batch.py:106), Var(edge__reps__size0_1303, loop_hafnian_batch.py:95)], kws={}, vararg=None, target=None)
DEBUG 2022-02-14 16:38:21,133 on stmt: id=14[LoopNest(index_variable = parfor_index.1366, range = (0, edge__reps__size0_1303, 1))]{1223: <ir.Block at /home/adi/GBS/gbs/loop_hafnian_batch.py (114)>}Var(parfor_index.1366, loop_hafnian_batch.py:114)
DEBUG 2022-02-14 16:38:21,133 on stmt: delta.2 = delta
DEBUG 2022-02-14 16:38:21,133 on stmt: jump 723
DEBUG 2022-02-14 16:38:21,133 ==== SSA block analysis pass on 717
DEBUG 2022-02-14 16:38:21,133 Running <numba.core.ssa._GatherDefsHandler object at 0x7fa041d3ac70>
DEBUG 2022-02-14 16:38:21,133 on stmt: delta.2 = kept_edges
DEBUG 2022-02-14 16:38:21,133 on stmt: jump 723
DEBUG 2022-02-14 16:38:21,133 ==== SSA block analysis pass on 1078
DEBUG 2022-02-14 16:38:21,133 Running <numba.core.ssa._GatherDefsHandler object at 0x7fa041d3ac70>
DEBUG 2022-02-14 16:38:21,133 on stmt: ret.1346 = call assert.1345(msg.1344, _170binary__add_75, $214binary_add.10, func=assert.1345, args=[Var(msg.1344, loop_hafnian_batch.py:142), Var(_170binary__add_75, loop_hafnian_batch.py:101), Var($214binary_add.10, loop_hafnian_batch.py:104)], kws={}, vararg=None, target=None)
DEBUG 2022-02-14 16:38:21,133 on stmt: $H_batch.2.1827 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=H__batch_2, rhs=Hnew, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:38:21,133 on stmt: H__batch_2 = $H_batch.2.1827
DEBUG 2022-02-14 16:38:21,133 on stmt: jump 1117
DEBUG 2022-02-14 16:38:21,133 ==== SSA block analysis pass on 723
DEBUG 2022-02-14 16:38:21,133 Running <numba.core.ssa._GatherDefsHandler object at 0x7fa041d3ac70>
DEBUG 2022-02-14 16:38:21,133 on stmt: $328call_function.6 = call $318load_global.1(delta.2, A, D, oddV, func=$318load_global.1, args=[Var(delta.2, loop_hafnian_batch.py:118), Var(A, loop_hafnian_batch.py:83), Var(D, loop_hafnian_batch.py:83), Var(oddV, loop_hafnian_batch.py:84)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:21,133 on stmt: $330unpack_sequence.11 = exhaust_iter(value=$328call_function.6, count=4)
DEBUG 2022-02-14 16:38:21,133 on stmt: $AX_S.1399 = static_getitem(value=$330unpack_sequence.11, index=0, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:21,133 on stmt: $XD_S.1397 = static_getitem(value=$330unpack_sequence.11, index=1, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:21,133 on stmt: $D_S.1404 = static_getitem(value=$330unpack_sequence.11, index=2, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:21,133 on stmt: $oddVX_S.1398 = static_getitem(value=$330unpack_sequence.11, index=3, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:21,134 on stmt: E = call $340load_global.12($AX_S.1399, func=$340load_global.12, args=[Var($AX_S.1399, loop_hafnian_batch.py:118)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:21,134 on stmt: $352binary_subscr.17 = static_getitem(value=kept_edges, index=0, index_var=$const350.16, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:21,134 on stmt: $356compare_op.19 = $352binary_subscr.17 == $const354.18
DEBUG 2022-02-14 16:38:21,134 on stmt: $358pred = call bool358($356compare_op.19, func=bool358, args=(Var($356compare_op.19, loop_hafnian_batch.py:122),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:21,134 on stmt: branch $358pred, 737, 777
DEBUG 2022-02-14 16:38:21,134 ==== SSA block analysis pass on 737
DEBUG 2022-02-14 16:38:21,134 Running <numba.core.ssa._GatherDefsHandler object at 0x7fa041d3ac70>
DEBUG 2022-02-14 16:38:21,134 on stmt: $366binary_subscr.3 = static_getitem(value=kept_edges, index=1, index_var=$const364.2, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:21,134 on stmt: $370compare_op.5 = $366binary_subscr.3 == $const368.4
DEBUG 2022-02-14 16:38:21,134 on stmt: $372pred = call bool372($370compare_op.5, func=bool372, args=(Var($370compare_op.5, loop_hafnian_batch.py:122),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:21,134 on stmt: branch $372pred, 739, 777
DEBUG 2022-02-14 16:38:21,134 ==== SSA block analysis pass on 777
DEBUG 2022-02-14 16:38:21,134 Running <numba.core.ssa._GatherDefsHandler object at 0x7fa041d3ac70>
DEBUG 2022-02-14 16:38:21,134 on stmt: f_even = call $450load_global.1(E, $AX_S.1399, $XD_S.1397, $D_S.1404, N__max, func=$450load_global.1, args=[Var(E, loop_hafnian_batch.py:120), Var($AX_S.1399, loop_hafnian_batch.py:118), Var($XD_S.1397, loop_hafnian_batch.py:118), Var($D_S.1404, loop_hafnian_batch.py:118), Var(N__max, loop_hafnian_batch.py:93)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:21,134 on stmt: f_odd = call $466load_global.8(E, $AX_S.1399, $XD_S.1397, $D_S.1404, N__max, oddloop, $oddVX_S.1398, func=$466load_global.8, args=[Var(E, loop_hafnian_batch.py:120), Var($AX_S.1399, loop_hafnian_batch.py:118), Var($XD_S.1397, loop_hafnian_batch.py:118), Var($D_S.1404, loop_hafnian_batch.py:118), Var(N__max, loop_hafnian_batch.py:93), Var(oddloop, loop_hafnian_batch.py:83), Var($oddVX_S.1398, loop_hafnian_batch.py:118)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:21,134 on stmt: $494binary_subscr.21 = static_getitem(value=kept_edges, index=0, index_var=$const492.20, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:21,135 on stmt: $496binary_multiply.22 = $const488.18 * $494binary_subscr.21
DEBUG 2022-02-14 16:38:21,135 on stmt: $500binary_add.24 = $496binary_multiply.22 + $const498.23
DEBUG 2022-02-14 16:38:21,135 on stmt: $516call_function.32 = call $486load_global.17($500binary_add.24, $514binary_add.31, func=$486load_global.17, args=[Var($500binary_add.24, loop_hafnian_batch.py:131), Var($514binary_add.31, loop_hafnian_batch.py:131)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:21,135 on stmt: $518get_iter.33 = getiter(value=$516call_function.32)
DEBUG 2022-02-14 16:38:21,135 on stmt: jump 1003
DEBUG 2022-02-14 16:38:21,135 ==== SSA block analysis pass on 1003
DEBUG 2022-02-14 16:38:21,135 Running <numba.core.ssa._GatherDefsHandler object at 0x7fa041d3ac70>
DEBUG 2022-02-14 16:38:21,135 on stmt: $520for_iter.2 = iternext(value=$518get_iter.33)
DEBUG 2022-02-14 16:38:21,135 on stmt: $N_det.1409 = pair_first(value=$520for_iter.2)
DEBUG 2022-02-14 16:38:21,135 on stmt: $520for_iter.4 = pair_second(value=$520for_iter.2)
DEBUG 2022-02-14 16:38:21,135 on stmt: branch $520for_iter.4, 1005, 1078
DEBUG 2022-02-14 16:38:21,135 ==== SSA block analysis pass on 50
DEBUG 2022-02-14 16:38:21,135 Running <numba.core.ssa._GatherDefsHandler object at 0x7fa041d3ac70>
DEBUG 2022-02-14 16:38:21,135 on stmt: j = parfor__index_1383
DEBUG 2022-02-14 16:38:21,135 on stmt: id=13[LoopNest(index_variable = parfor_index.1361, range = (0, $214binary_add.10, 1))]{1222: <ir.Block at /home/adi/GBS/gbs/loop_hafnian_batch.py (104)>}Var(parfor_index.1361, loop_hafnian_batch.py:104)
DEBUG 2022-02-14 16:38:21,135 on stmt: kept_edges = call $226load_global.15(j, edge__reps, func=$226load_global.15, args=[Var(j, loop_hafnian_batch.py:102), Var(edge__reps, loop_hafnian_batch.py:95)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:21,135 on stmt: kept_edges_shape.1310 = getattr(value=kept_edges, attr=shape)
DEBUG 2022-02-14 16:38:21,135 on stmt: kept_edges_size0.1311 = static_getitem(value=kept_edges_shape.1310, index=0, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:21,135 on stmt: binom_prod.2 = binom_prod
DEBUG 2022-02-14 16:38:21,136 on stmt: id=18[LoopNest(index_variable = parfor_index.1381, range = (0, kept_edges_size0.1311, 1))]{573: <ir.Block at /home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numba/parfors/parfor.py (256)>}Var(parfor_index.1381, parfor.py:256)
DEBUG 2022-02-14 16:38:21,136 on stmt: $258call_function.28 = call $248load_global.23($const250.24, $256binary_floor_divide.27, func=$248load_global.23, args=[Var($const250.24, loop_hafnian_batch.py:110), Var($256binary_floor_divide.27, loop_hafnian_batch.py:110)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:21,136 on stmt: $260get_iter.29 = getiter(value=$258call_function.28)
DEBUG 2022-02-14 16:38:21,136 on stmt: jump 501
DEBUG 2022-02-14 16:38:21,136 ==== SSA block analysis pass on 1005
DEBUG 2022-02-14 16:38:21,136 Running <numba.core.ssa._GatherDefsHandler object at 0x7fa041d3ac70>
DEBUG 2022-02-14 16:38:21,136 on stmt: N = N__fixed + $N_det.1409
DEBUG 2022-02-14 16:38:21,136 on stmt: $538binary_floor_divide.9 = N // $const536.8
DEBUG 2022-02-14 16:38:21,136 on stmt: $542binary_subtract.11 = $538binary_floor_divide.9 - val.1149
DEBUG 2022-02-14 16:38:21,136 on stmt: plus_minus.1 = $const532.6 ** $542binary_subtract.11
DEBUG 2022-02-14 16:38:21,136 on stmt: $554binary_subtract.16 = $N_det.1409 - $const552.15
DEBUG 2022-02-14 16:38:21,136 on stmt: $558binary_floor_divide.18 = $554binary_subtract.16 // $const556.17
DEBUG 2022-02-14 16:38:21,136 on stmt: $564binary_subscr.21 = static_getitem(value=kept_edges, index=0, index_var=$const562.20, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:21,136 on stmt: $566build_tuple.22 = build_tuple(items=[Var($558binary_floor_divide.18, loop_hafnian_batch.py:135), Var($564binary_subscr.21, loop_hafnian_batch.py:135)])
DEBUG 2022-02-14 16:38:21,136 on stmt: $568binary_subscr.23 = getitem(value=binoms, index=$566build_tuple.22, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:21,136 on stmt: n_det_binom_prod = $568binary_subscr.23 * binom_prod.2
DEBUG 2022-02-14 16:38:21,136 on stmt: $580binary_modulo.28 = N % $const578.27
DEBUG 2022-02-14 16:38:21,136 on stmt: $584compare_op.30 = $580binary_modulo.28 == $const582.29
DEBUG 2022-02-14 16:38:21,136 on stmt: $586pred = call bool586($584compare_op.30, func=bool586, args=(Var($584compare_op.30, loop_hafnian_batch.py:137),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:21,137 on stmt: branch $586pred, 1021, 1060
DEBUG 2022-02-14 16:38:21,137 ==== SSA block analysis pass on 739
DEBUG 2022-02-14 16:38:21,137 Running <numba.core.ssa._GatherDefsHandler object at 0x7fa041d3ac70>
DEBUG 2022-02-14 16:38:21,137 on stmt: oddVX_S0 = call $376load_global.1(delta.2, oddV0, func=$376load_global.1, args=[Var(delta.2, loop_hafnian_batch.py:118), Var(oddV0, loop_hafnian_batch.py:89)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:21,137 on stmt: $396binary_subtract.10 = $392binary_floor_divide.8 - val.1149
DEBUG 2022-02-14 16:38:21,137 on stmt: plus_minus = $const386.5 ** $396binary_subtract.10
DEBUG 2022-02-14 16:38:21,137 on stmt: $418call_function.20 = call $402load_global.12(E, $AX_S.1399, $XD_S.1397, $D_S.1404, N__fixed, oddloop0, oddVX_S0, func=$402load_global.12, args=[Var(E, loop_hafnian_batch.py:120), Var($AX_S.1399, loop_hafnian_batch.py:118), Var($XD_S.1397, loop_hafnian_batch.py:118), Var($D_S.1404, loop_hafnian_batch.py:118), Var(N__fixed, loop_hafnian_batch.py:92), Var(oddloop0, loop_hafnian_batch.py:88), Var(oddVX_S0, loop_hafnian_batch.py:123)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:21,137 on stmt: f = getitem(value=$418call_function.20, index=N__fixed, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:21,137 on stmt: $432binary_subscr.27 = static_getitem(value=H__batch_2, index=0, index_var=$const428.24, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:21,137 on stmt: $438binary_multiply.30 = binom_prod.2 * plus_minus
DEBUG 2022-02-14 16:38:21,137 on stmt: $442binary_multiply.32 = $438binary_multiply.30 * f
DEBUG 2022-02-14 16:38:21,137 on stmt: $444inplace_add.33 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$432binary_subscr.27, rhs=$442binary_multiply.32, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:38:21,137 on stmt: H__batch_2[0] = $444inplace_add.33
DEBUG 2022-02-14 16:38:21,137 on stmt: jump 777
DEBUG 2022-02-14 16:38:21,137 ==== SSA block analysis pass on 501
DEBUG 2022-02-14 16:38:21,137 Running <numba.core.ssa._GatherDefsHandler object at 0x7fa041d3ac70>
DEBUG 2022-02-14 16:38:21,137 on stmt: $262for_iter.2 = iternext(value=$260get_iter.29)
DEBUG 2022-02-14 16:38:21,137 on stmt: $i.1405 = pair_first(value=$262for_iter.2)
DEBUG 2022-02-14 16:38:21,137 on stmt: $262for_iter.4 = pair_second(value=$262for_iter.2)
DEBUG 2022-02-14 16:38:21,138 on stmt: branch $262for_iter.4, 675, 703
DEBUG 2022-02-14 16:38:21,138 ==== SSA block analysis pass on 1021
DEBUG 2022-02-14 16:38:21,138 Running <numba.core.ssa._GatherDefsHandler object at 0x7fa041d3ac70>
DEBUG 2022-02-14 16:38:21,138 on stmt: $596binary_subscr.6 = getitem(value=Hnew, index=$N_det.1409, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:21,138 on stmt: $602binary_multiply.9 = n_det_binom_prod * plus_minus.1
DEBUG 2022-02-14 16:38:21,138 on stmt: $610binary_floor_divide.13 = N // $const608.12
DEBUG 2022-02-14 16:38:21,138 on stmt: $612binary_subscr.14 = getitem(value=f_even, index=$610binary_floor_divide.13, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:21,138 on stmt: $614binary_multiply.15 = $602binary_multiply.9 * $612binary_subscr.14
DEBUG 2022-02-14 16:38:21,138 on stmt: $616inplace_add.16 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$596binary_subscr.6, rhs=$614binary_multiply.15, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:38:21,138 on stmt: Hnew[$N_det.1409] = $616inplace_add.16
DEBUG 2022-02-14 16:38:21,138 on stmt: jump 1062
DEBUG 2022-02-14 16:38:21,138 ==== SSA block analysis pass on 1060
DEBUG 2022-02-14 16:38:21,138 Running <numba.core.ssa._GatherDefsHandler object at 0x7fa041d3ac70>
DEBUG 2022-02-14 16:38:21,138 on stmt: $630binary_subscr.6 = getitem(value=Hnew, index=$N_det.1409, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:21,138 on stmt: $636binary_multiply.9 = n_det_binom_prod * plus_minus.1
DEBUG 2022-02-14 16:38:21,138 on stmt: $642binary_subscr.12 = getitem(value=f_odd, index=N, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:21,138 on stmt: $644binary_multiply.13 = $636binary_multiply.9 * $642binary_subscr.12
DEBUG 2022-02-14 16:38:21,138 on stmt: $646inplace_add.14 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$630binary_subscr.6, rhs=$644binary_multiply.13, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:38:21,139 on stmt: Hnew[$N_det.1409] = $646inplace_add.14
DEBUG 2022-02-14 16:38:21,139 on stmt: jump 1062
DEBUG 2022-02-14 16:38:21,139 ==== SSA block analysis pass on 1117
DEBUG 2022-02-14 16:38:21,139 Running <numba.core.ssa._GatherDefsHandler object at 0x7fa041d3ac70>
DEBUG 2022-02-14 16:38:21,139 on stmt: jump 40
DEBUG 2022-02-14 16:38:21,141 defs defaultdict(<class 'list'>,
            {'$12load_global.4.2063': [<numba.core.ir.Assign object at 0x7fa041d109a0>],
             '$18binary_subscr.7.2065': [<numba.core.ir.Assign object at 0x7fa041d10df0>],
             '$206binary_multiply.6': [<numba.core.ir.Assign object at 0x7fa04572f5b0>],
             '$210binary_add.8': [<numba.core.ir.Assign object at 0x7fa04572f850>],
             '$214binary_add.10': [<numba.core.ir.Assign object at 0x7fa04572fb50>],
             '$226load_global.15': [<numba.core.ir.Assign object at 0x7fa045730460>],
             '$248load_global.23': [<numba.core.ir.Assign object at 0x7fa0457322e0>],
             '$24binary_subscr.10.2067': [<numba.core.ir.Assign object at 0x7fa041d30250>],
             '$256binary_floor_divide.27': [<numba.core.ir.Assign object at 0x7fa0457328b0>],
             '$258call_function.28': [<numba.core.ir.Assign object at 0x7fa045732a60>],
             '$260get_iter.29': [<numba.core.ir.Assign object at 0x7fa045732b80>],
             '$262for_iter.2': [<numba.core.ir.Assign object at 0x7fa045732160>],
             '$262for_iter.4': [<numba.core.ir.Assign object at 0x7fa045732d90>],
             '$26load_global.11.2068': [<numba.core.ir.Assign object at 0x7fa041d303a0>],
             '$274binary_subscr.7': [<numba.core.ir.Assign object at 0x7fa0457346d0>],
             '$280binary_subscr.10': [<numba.core.ir.Assign object at 0x7fa045734a90>],
             '$282build_tuple.11': [<numba.core.ir.Assign object at 0x7fa045734c10>],
             '$284binary_subscr.12': [<numba.core.ir.Assign object at 0x7fa045734d90>],
             '$28load_method.12.2069': [<numba.core.ir.Assign object at 0x7fa041d30520>],
             '$296pred': [<numba.core.ir.Assign object at 0x7fa0457372e0>],
             '$2load_global.0.2061': [<numba.core.ir.Assign object at 0x7fa041d10130>],
             '$318load_global.1': [<numba.core.ir.Assign object at 0x7fa045739040>],
             '$328call_function.6': [<numba.core.ir.Assign object at 0x7fa041ed6250>],
             '$32call_method.14.2071': [<numba.core.ir.Assign object at 0x7fa041d308b0>],
             '$330unpack_sequence.11': [<numba.core.ir.Assign object at 0x7fa0457397f0>],
             '$340load_global.12': [<numba.core.ir.Assign object at 0x7fa04573b280>],
             '$34binary_add.15.2072': [<numba.core.ir.Assign object at 0x7fa041d309d0>],
             '$352binary_subscr.17': [<numba.core.ir.Assign object at 0x7fa0458549a0>],
             '$356compare_op.19': [<numba.core.ir.Assign object at 0x7fa04573bd90>],
             '$358pred': [<numba.core.ir.Assign object at 0x7fa04573d040>],
             '$366binary_subscr.3': [<numba.core.ir.Assign object at 0x7fa045854bb0>],
             '$36call_function.16.2073': [<numba.core.ir.Assign object at 0x7fa041d30b80>],
             '$370compare_op.5': [<numba.core.ir.Assign object at 0x7fa04573d610>],
             '$372pred': [<numba.core.ir.Assign object at 0x7fa04573d880>],
             '$376load_global.1': [<numba.core.ir.Assign object at 0x7fa04573dac0>],
             '$38get_iter.17.2074': [<numba.core.ir.Assign object at 0x7fa041d30ca0>],
             '$392binary_floor_divide.8': [<numba.core.ir.Assign object at 0x7fa04573f5b0>],
             '$396binary_subtract.10': [<numba.core.ir.Assign object at 0x7fa04573f850>],
             '$402load_global.12': [<numba.core.ir.Assign object at 0x7fa04573fc40>],
             '$40for_iter.1.2076': [<numba.core.ir.Assign object at 0x7fa041d30eb0>],
             '$40for_iter.2.2077': [<numba.core.ir.Assign object at 0x7fa041d30fd0>],
             '$40for_iter.3.2078': [<numba.core.ir.Assign object at 0x7fa041d3e130>],
             '$418call_function.20': [<numba.core.ir.Assign object at 0x7fa045741640>],
             '$432binary_subscr.27': [<numba.core.ir.Assign object at 0x7fa041ed6370>],
             '$438binary_multiply.30': [<numba.core.ir.Assign object at 0x7fa041ed6220>],
             '$442binary_multiply.32': [<numba.core.ir.Assign object at 0x7fa045743670>],
             '$444inplace_add.33': [<numba.core.ir.Assign object at 0x7fa0457437f0>],
             '$450load_global.1': [<numba.core.ir.Assign object at 0x7fa04573fd60>],
             '$466load_global.8': [<numba.core.ir.Assign object at 0x7fa045743d00>],
             '$486load_global.17': [<numba.core.ir.Assign object at 0x7fa045745940>],
             '$494binary_subscr.21': [<numba.core.ir.Assign object at 0x7fa045854f70>],
             '$496binary_multiply.22': [<numba.core.ir.Assign object at 0x7fa0457470d0>],
             '$4load_method.1.2062': [<numba.core.ir.Assign object at 0x7fa041d10460>],
             '$500binary_add.24': [<numba.core.ir.Assign object at 0x7fa0457473d0>],
             '$506binary_multiply.27': [<numba.core.ir.Assign object at 0x7fa0457477f0>],
             '$510binary_add.29': [<numba.core.ir.Assign object at 0x7fa045747a90>],
             '$514binary_add.31': [<numba.core.ir.Assign object at 0x7fa045747d90>],
             '$516call_function.32': [<numba.core.ir.Assign object at 0x7fa045747f40>],
             '$518get_iter.33': [<numba.core.ir.Assign object at 0x7fa041ec20a0>],
             '$520for_iter.2': [<numba.core.ir.Assign object at 0x7fa045745130>],
             '$520for_iter.4': [<numba.core.ir.Assign object at 0x7fa045745c70>],
             '$538binary_floor_divide.9': [<numba.core.ir.Assign object at 0x7fa041ec2d90>],
             '$542binary_subtract.11': [<numba.core.ir.Assign object at 0x7fa041ec5070>],
             '$554binary_subtract.16': [<numba.core.ir.Assign object at 0x7fa041ec57f0>],
             '$558binary_floor_divide.18': [<numba.core.ir.Assign object at 0x7fa041ec5af0>],
             '$564binary_subscr.21': [<numba.core.ir.Assign object at 0x7fa046a577f0>],
             '$566build_tuple.22': [<numba.core.ir.Assign object at 0x7fa041ec70d0>],
             '$568binary_subscr.23': [<numba.core.ir.Assign object at 0x7fa041ec7250>],
             '$56build_slice.3.2082': [<numba.core.ir.Assign object at 0x7fa041d3ed60>],
             '$56build_slice.4.2083': [<numba.core.ir.Assign object at 0x7fa041d3ee80>],
             '$580binary_modulo.28': [<numba.core.ir.Assign object at 0x7fa041ec7a30>],
             '$584compare_op.30': [<numba.core.ir.Assign object at 0x7fa041ec7d30>],
             '$586pred': [<numba.core.ir.Assign object at 0x7fa041ec7fa0>],
             '$58binary_subscr.5.2084': [<numba.core.ir.Assign object at 0x7fa041d3ce50>],
             '$596binary_subscr.6': [<numba.core.ir.Assign object at 0x7fa041ec91f0>],
             '$602binary_multiply.9': [<numba.core.ir.Assign object at 0x7fa041edc610>],
             '$610binary_floor_divide.13': [<numba.core.ir.Assign object at 0x7fa041ec9af0>],
             '$612binary_subscr.14': [<numba.core.ir.Assign object at 0x7fa041ec9c70>],
             '$614binary_multiply.15': [<numba.core.ir.Assign object at 0x7fa041ec9df0>],
             '$616inplace_add.16': [<numba.core.ir.Assign object at 0x7fa041ec9f70>],
             '$630binary_subscr.6': [<numba.core.ir.Assign object at 0x7fa041ecb490>],
             '$636binary_multiply.9': [<numba.core.ir.Assign object at 0x7fa041edc250>],
             '$642binary_subscr.12': [<numba.core.ir.Assign object at 0x7fa041ecbc10>],
             '$644binary_multiply.13': [<numba.core.ir.Assign object at 0x7fa041ecbd90>],
             '$646inplace_add.14': [<numba.core.ir.Assign object at 0x7fa041ecbf10>],
             '$66build_slice.10.2088': [<numba.core.ir.Assign object at 0x7fa041d389d0>],
             '$66build_slice.9.2087': [<numba.core.ir.Assign object at 0x7fa041d38fd0>],
             '$72return_value.12.2090': [<numba.core.ir.Assign object at 0x7fa041d38700>],
             '$AX_S.1399': [<numba.core.ir.Assign object at 0x7fa045739940>],
             '$D_S.1404': [<numba.core.ir.Assign object at 0x7fa045739b80>],
             '$H_batch.2.1827': [<numba.core.ir.Assign object at 0x7fa041edc220>],
             '$N_det.1409': [<numba.core.ir.Assign object at 0x7fa045745490>],
             '$XD_S.1397': [<numba.core.ir.Assign object at 0x7fa045739a60>],
             '$binom_prod.2.1826': [<numba.core.ir.Assign object at 0x7fa041ed6550>],
             '$const16.6.2064': [<numba.core.ir.Assign object at 0x7fa041d10c40>],
             '$const202.4': [<numba.core.ir.Assign object at 0x7fa04572f2e0>],
             '$const212.9': [<numba.core.ir.Assign object at 0x7fa04572f9a0>],
             '$const22.9.2066': [<numba.core.ir.Assign object at 0x7fa041d300a0>],
             '$const250.24': [<numba.core.ir.Assign object at 0x7fa045732460>],
             '$const254.26': [<numba.core.ir.Assign object at 0x7fa045732700>],
             '$const30.13.2070': [<numba.core.ir.Assign object at 0x7fa041d306a0>],
             '$const350.16': [<numba.core.ir.Assign object at 0x7fa04573b8e0>],
             '$const354.18': [<numba.core.ir.Assign object at 0x7fa04573bbe0>],
             '$const364.2': [<numba.core.ir.Assign object at 0x7fa04573d160>],
             '$const368.4': [<numba.core.ir.Assign object at 0x7fa04573d460>],
             '$const386.5': [<numba.core.ir.Assign object at 0x7fa04573f160>],
             '$const390.7': [<numba.core.ir.Assign object at 0x7fa04573f400>],
             '$const428.24': [<numba.core.ir.Assign object at 0x7fa045741c40>],
             '$const488.18': [<numba.core.ir.Assign object at 0x7fa045745ac0>],
             '$const492.20': [<numba.core.ir.Assign object at 0x7fa045745d60>],
             '$const498.23': [<numba.core.ir.Assign object at 0x7fa045747220>],
             '$const502.25': [<numba.core.ir.Assign object at 0x7fa045747520>],
             '$const512.30': [<numba.core.ir.Assign object at 0x7fa045747be0>],
             '$const52.1.2080': [<numba.core.ir.Assign object at 0x7fa041d3ea60>],
             '$const532.6': [<numba.core.ir.Assign object at 0x7fa041ec2940>],
             '$const536.8': [<numba.core.ir.Assign object at 0x7fa041ec2be0>],
             '$const54.2.2081': [<numba.core.ir.Assign object at 0x7fa041d3ebe0>],
             '$const552.15': [<numba.core.ir.Assign object at 0x7fa041ec5640>],
             '$const556.17': [<numba.core.ir.Assign object at 0x7fa041ec5940>],
             '$const562.20': [<numba.core.ir.Assign object at 0x7fa041ec5d60>],
             '$const578.27': [<numba.core.ir.Assign object at 0x7fa041ec7880>],
             '$const582.29': [<numba.core.ir.Assign object at 0x7fa041ec7b80>],
             '$const608.12': [<numba.core.ir.Assign object at 0x7fa041ec9940>],
             '$const62.7.2085': [<numba.core.ir.Assign object at 0x7fa04622e910>],
             '$const64.8.2086': [<numba.core.ir.Assign object at 0x7fa041d38dc0>],
             '$const70.11.2089': [<numba.core.ir.Assign object at 0x7fa041d38bb0>],
             '$empty_attr_attr.1363': [<numba.core.ir.Assign object at 0x7fa04663f460>],
             '$empty_attr_attr.1368': [<numba.core.ir.Assign object at 0x7fa04663fc10>],
             '$i.1405': [<numba.core.ir.Assign object at 0x7fa045732c70>],
             '$np_g_var.1362': [<numba.core.ir.Assign object at 0x7fa04663f340>],
             '$np_g_var.1367': [<numba.core.ir.Assign object at 0x7fa04663faf0>],
             '$np_typ_var.1364': [<numba.core.ir.Assign object at 0x7fa04663f550>],
             '$np_typ_var.1369': [<numba.core.ir.Assign object at 0x7fa04663fd00>],
             '$oddVX_S.1398': [<numba.core.ir.Assign object at 0x7fa045739ca0>],
             '$phi40.0.2075': [<numba.core.ir.Assign object at 0x7fa041d10610>],
             '$phi42.1.2079': [<numba.core.ir.Assign object at 0x7fa041d30df0>],
             'A': [<numba.core.ir.Assign object at 0x7fa041d3f7f0>],
             'D': [<numba.core.ir.Assign object at 0x7fa041d3f6d0>],
             'E': [<numba.core.ir.Assign object at 0x7fa04573b580>],
             'H__batch_2': [<numba.core.ir.Assign object at 0x7fa041d10790>,
                            <numba.core.ir.Assign object at 0x7fa041ed4550>],
             'H__batch_2__arr': [<numba.core.ir.Assign object at 0x7fa041d103d0>],
             'Hnew': [<numba.core.ir.Assign object at 0x7fa04663f640>],
             'N': [<numba.core.ir.Assign object at 0x7fa041ec26d0>],
             'N__fixed': [<numba.core.ir.Assign object at 0x7fa041d3f370>],
             'N__max': [<numba.core.ir.Assign object at 0x7fa041d3f250>],
             '_170binary__add_75': [<numba.core.ir.Assign object at 0x7fa041d3f910>],
             'assert.1314': [<numba.core.ir.Assign object at 0x7fa041edee20>],
             'assert.1345': [<numba.core.ir.Assign object at 0x7fa046632940>],
             'batch__max': [<numba.core.ir.Assign object at 0x7fa041d3f130>],
             'binom_prod': [<numba.core.ir.Assign object at 0x7fa041ed4bb0>],
             'binom_prod.2': [<numba.core.ir.Assign object at 0x7fa041edf6a0>,
                              <numba.core.ir.Assign object at 0x7fa041edfa60>],
             'binoms': [<numba.core.ir.Assign object at 0x7fa041d3d610>],
             'bool296': [<numba.core.ir.Assign object at 0x7fa0457371c0>],
             'bool358': [<numba.core.ir.Assign object at 0x7fa04573bee0>],
             'bool372': [<numba.core.ir.Assign object at 0x7fa04573d760>],
             'bool586': [<numba.core.ir.Assign object at 0x7fa041ec7e80>],
             'delta': [<numba.core.ir.Assign object at 0x7fa04663fdf0>],
             'delta.2': [<numba.core.ir.Assign object at 0x7fa041edf2b0>,
                         <numba.core.ir.Assign object at 0x7fa041ed4850>],
             'edge__reps': [<numba.core.ir.Assign object at 0x7fa041d3dc10>],
             'edge__reps__size0_1303': [<numba.core.ir.Assign object at 0x7fa041d3df70>],
             'even__cutoff': [<numba.core.ir.Assign object at 0x7fa041d3de50>],
             'f': [<numba.core.ir.Assign object at 0x7fa0457418b0>],
             'f_even': [<numba.core.ir.Assign object at 0x7fa045743ac0>],
             'f_odd': [<numba.core.ir.Assign object at 0x7fa045745700>],
             'glynn': [<numba.core.ir.Assign object at 0x7fa041d3dbe0>],
             'j': [<numba.core.ir.Assign object at 0x7fa041ed4be0>],
             'kept_edges': [<numba.core.ir.Assign object at 0x7fa045730880>],
             'kept_edges_shape.1310': [<numba.core.ir.Assign object at 0x7fa041ef3c70>],
             'kept_edges_size0.1311': [<numba.core.ir.Assign object at 0x7fa041ef38e0>],
             'msg.1313': [<numba.core.ir.Assign object at 0x7fa041edef40>],
             'msg.1344': [<numba.core.ir.Assign object at 0x7fa0466329a0>],
             'n': [<numba.core.ir.Assign object at 0x7fa041d3d310>],
             'n_det_binom_prod': [<numba.core.ir.Assign object at 0x7fa041ed6b20>],
             'oddV': [<numba.core.ir.Assign object at 0x7fa041d3d4c0>],
             'oddV0': [<numba.core.ir.Assign object at 0x7fa041d3d130>],
             'oddVX_S0': [<numba.core.ir.Assign object at 0x7fa041edcaf0>],
             'oddloop': [<numba.core.ir.Assign object at 0x7fa041ed49d0>],
             'oddloop0': [<numba.core.ir.Assign object at 0x7fa041d102b0>],
             'parfor__index_1383': [<numba.core.ir.Assign object at 0x7fa041d3e400>],
             'plus_minus': [<numba.core.ir.Assign object at 0x7fa041ed4e50>],
             'plus_minus.1': [<numba.core.ir.Assign object at 0x7fa041ed4670>],
             'ret.1315': [<numba.core.ir.Assign object at 0x7fa041edeca0>],
             'ret.1346': [<numba.core.ir.Assign object at 0x7fa0466326d0>],
             'sched.2060': [<numba.core.ir.Assign object at 0x7fa041d3fa30>]})
DEBUG 2022-02-14 16:38:21,141 SSA violators {'H__batch_2', 'binom_prod.2', 'delta.2'}
DEBUG 2022-02-14 16:38:21,141 Fix SSA violator on var H__batch_2
DEBUG 2022-02-14 16:38:21,141 ==== SSA block rewrite pass on 0
DEBUG 2022-02-14 16:38:21,141 Running <numba.core.ssa._FreshVarHandler object at 0x7fa041d36ee0>
DEBUG 2022-02-14 16:38:21,141 on stmt: sched.2060 = arg(0, name=sched)
DEBUG 2022-02-14 16:38:21,141 on stmt: _170binary__add_75 = arg(1, name=_170binary__add_75)
DEBUG 2022-02-14 16:38:21,141 on stmt: A = arg(2, name=A)
DEBUG 2022-02-14 16:38:21,141 on stmt: D = arg(3, name=D)
DEBUG 2022-02-14 16:38:21,142 on stmt: N__fixed = arg(4, name=N__fixed)
DEBUG 2022-02-14 16:38:21,142 on stmt: N__max = arg(5, name=N__max)
DEBUG 2022-02-14 16:38:21,142 on stmt: batch__max = arg(6, name=batch__max)
DEBUG 2022-02-14 16:38:21,142 on stmt: binoms = arg(7, name=binoms)
DEBUG 2022-02-14 16:38:21,142 on stmt: edge__reps = arg(8, name=edge__reps)
DEBUG 2022-02-14 16:38:21,142 on stmt: edge__reps__size0_1303 = arg(9, name=edge__reps__size0_1303)
DEBUG 2022-02-14 16:38:21,142 on stmt: even__cutoff = arg(10, name=even__cutoff)
DEBUG 2022-02-14 16:38:21,142 on stmt: glynn = arg(11, name=glynn)
DEBUG 2022-02-14 16:38:21,142 on stmt: n = arg(12, name=n)
DEBUG 2022-02-14 16:38:21,142 on stmt: oddV = arg(13, name=oddV)
DEBUG 2022-02-14 16:38:21,142 on stmt: oddV0 = arg(14, name=oddV0)
DEBUG 2022-02-14 16:38:21,142 on stmt: oddloop = arg(15, name=oddloop)
DEBUG 2022-02-14 16:38:21,142 on stmt: oddloop0 = arg(16, name=oddloop0)
DEBUG 2022-02-14 16:38:21,142 on stmt: H__batch_2__arr = arg(17, name=H__batch_2__arr)
DEBUG 2022-02-14 16:38:21,142 on stmt: $2load_global.0.2061 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:38:21,142 on stmt: $4load_method.1.2062 = getattr(value=$2load_global.0.2061, attr=copy)
DEBUG 2022-02-14 16:38:21,142 on stmt: H__batch_2 = call $4load_method.1.2062(H__batch_2__arr, func=$4load_method.1.2062, args=[Var(H__batch_2__arr, <string>:2)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:21,142 first assign: H__batch_2
DEBUG 2022-02-14 16:38:21,142 replaced with: H__batch_2 = call $4load_method.1.2062(H__batch_2__arr, func=$4load_method.1.2062, args=[Var(H__batch_2__arr, <string>:2)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:21,142 on stmt: $12load_global.4.2063 = global(range: <class 'range'>)
DEBUG 2022-02-14 16:38:21,142 on stmt: $const16.6.2064 = const(int, 0)
DEBUG 2022-02-14 16:38:21,143 on stmt: $18binary_subscr.7.2065 = getitem(value=sched.2060, index=$const16.6.2064, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:21,143 on stmt: $const22.9.2066 = const(int, 1)
DEBUG 2022-02-14 16:38:21,143 on stmt: $24binary_subscr.10.2067 = getitem(value=sched.2060, index=$const22.9.2066, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:21,143 on stmt: $26load_global.11.2068 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:38:21,143 on stmt: $28load_method.12.2069 = getattr(value=$26load_global.11.2068, attr=uint8)
DEBUG 2022-02-14 16:38:21,143 on stmt: $const30.13.2070 = const(int, 1)
DEBUG 2022-02-14 16:38:21,143 on stmt: $32call_method.14.2071 = call $28load_method.12.2069($const30.13.2070, func=$28load_method.12.2069, args=[Var($const30.13.2070, <string>:3)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:21,143 on stmt: $34binary_add.15.2072 = $24binary_subscr.10.2067 + $32call_method.14.2071
DEBUG 2022-02-14 16:38:21,143 on stmt: $36call_function.16.2073 = call $12load_global.4.2063($18binary_subscr.7.2065, $34binary_add.15.2072, func=$12load_global.4.2063, args=[Var($18binary_subscr.7.2065, <string>:3), Var($34binary_add.15.2072, <string>:3)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:21,143 on stmt: $38get_iter.17.2074 = getiter(value=$36call_function.16.2073)
DEBUG 2022-02-14 16:38:21,143 on stmt: $phi40.0.2075 = $38get_iter.17.2074
DEBUG 2022-02-14 16:38:21,143 on stmt: bool296 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:38:21,143 on stmt: msg.1313 = const(str, Sizes of kept_edges, edge_reps do not match on /home/adi/GBS/gbs/loop_hafnian_batch.py (114))
DEBUG 2022-02-14 16:38:21,143 on stmt: assert.1314 = global(assert_equiv: <intrinsic assert_equiv>)
DEBUG 2022-02-14 16:38:21,143 on stmt: $np_g_var.1367 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:38:21,143 on stmt: $empty_attr_attr.1368 = getattr(value=$np_g_var.1367, attr=empty)
DEBUG 2022-02-14 16:38:21,143 on stmt: $np_typ_var.1369 = getattr(value=$np_g_var.1367, attr=int64)
DEBUG 2022-02-14 16:38:21,143 on stmt: delta = call $empty_attr_attr.1368(edge__reps__size0_1303, $np_typ_var.1369, func=$empty_attr_attr.1368, args=[Var(edge__reps__size0_1303, loop_hafnian_batch.py:95), Var($np_typ_var.1369, loop_hafnian_batch.py:114)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:21,143 on stmt: msg.1344 = const(str, Sizes of H_batch.2, Hnew do not match on /home/adi/GBS/gbs/loop_hafnian_batch.py (142))
DEBUG 2022-02-14 16:38:21,143 on stmt: assert.1345 = global(assert_equiv: <intrinsic assert_equiv>)
DEBUG 2022-02-14 16:38:21,144 on stmt: $318load_global.1 = global(get_submatrices: CPUDispatcher(<function get_submatrices at 0x7fa047ebed30>))
DEBUG 2022-02-14 16:38:21,144 on stmt: $340load_global.12 = global(eigvals: CPUDispatcher(<function eigvals at 0x7fa047e5d430>))
DEBUG 2022-02-14 16:38:21,144 on stmt: $const350.16 = const(int, 0)
DEBUG 2022-02-14 16:38:21,144 on stmt: $const354.18 = const(int, 0)
DEBUG 2022-02-14 16:38:21,144 on stmt: bool358 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:38:21,144 on stmt: $const364.2 = const(int, 1)
DEBUG 2022-02-14 16:38:21,144 on stmt: $const368.4 = const(int, 0)
DEBUG 2022-02-14 16:38:21,144 on stmt: bool372 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:38:21,144 on stmt: $450load_global.1 = global(f_loop: CPUDispatcher(<function f_loop at 0x7fa047ebe9d0>))
DEBUG 2022-02-14 16:38:21,144 on stmt: $466load_global.8 = global(f_loop_odd: CPUDispatcher(<function f_loop_odd at 0x7fa047ebeb80>))
DEBUG 2022-02-14 16:38:21,144 on stmt: $486load_global.17 = global(range: <class 'range'>)
DEBUG 2022-02-14 16:38:21,144 on stmt: $const488.18 = const(int, 2)
DEBUG 2022-02-14 16:38:21,144 on stmt: $const492.20 = const(int, 0)
DEBUG 2022-02-14 16:38:21,144 on stmt: $const498.23 = const(int, 1)
DEBUG 2022-02-14 16:38:21,144 on stmt: $const502.25 = const(int, 2)
DEBUG 2022-02-14 16:38:21,144 on stmt: $506binary_multiply.27 = $const502.25 * batch__max
DEBUG 2022-02-14 16:38:21,144 on stmt: $510binary_add.29 = $506binary_multiply.27 + even__cutoff
DEBUG 2022-02-14 16:38:21,144 on stmt: $const512.30 = const(int, 2)
DEBUG 2022-02-14 16:38:21,144 on stmt: $514binary_add.31 = $510binary_add.29 + $const512.30
DEBUG 2022-02-14 16:38:21,144 on stmt: $const202.4 = const(int, 2)
DEBUG 2022-02-14 16:38:21,144 on stmt: $206binary_multiply.6 = $const202.4 * batch__max
DEBUG 2022-02-14 16:38:21,144 on stmt: $210binary_add.8 = $206binary_multiply.6 + even__cutoff
DEBUG 2022-02-14 16:38:21,145 on stmt: $const212.9 = const(int, 2)
DEBUG 2022-02-14 16:38:21,145 on stmt: $214binary_add.10 = $210binary_add.8 + $const212.9
DEBUG 2022-02-14 16:38:21,145 on stmt: $226load_global.15 = global(find_kept_edges: CPUDispatcher(<function find_kept_edges at 0x7fa047ebe790>))
DEBUG 2022-02-14 16:38:21,145 on stmt: $np_g_var.1362 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:38:21,145 on stmt: $empty_attr_attr.1363 = getattr(value=$np_g_var.1362, attr=empty)
DEBUG 2022-02-14 16:38:21,145 on stmt: $np_typ_var.1364 = getattr(value=$np_g_var.1362, attr=complex128)
DEBUG 2022-02-14 16:38:21,145 on stmt: Hnew = call $empty_attr_attr.1363($214binary_add.10, $np_typ_var.1364, func=$empty_attr_attr.1363, args=[Var($214binary_add.10, loop_hafnian_batch.py:104), Var($np_typ_var.1364, loop_hafnian_batch.py:104)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:21,145 on stmt: binom_prod = const(float, 1.0)
DEBUG 2022-02-14 16:38:21,145 on stmt: $248load_global.23 = global(range: <class 'range'>)
DEBUG 2022-02-14 16:38:21,145 on stmt: $const250.24 = const(int, 1)
DEBUG 2022-02-14 16:38:21,145 on stmt: $const254.26 = const(int, 2)
DEBUG 2022-02-14 16:38:21,145 on stmt: $256binary_floor_divide.27 = n // $const254.26
DEBUG 2022-02-14 16:38:21,145 on stmt: $const532.6 = const(int, -1)
DEBUG 2022-02-14 16:38:21,145 on stmt: $const536.8 = const(int, 2)
DEBUG 2022-02-14 16:38:21,145 on stmt: $const552.15 = const(int, 1)
DEBUG 2022-02-14 16:38:21,145 on stmt: $const556.17 = const(int, 2)
DEBUG 2022-02-14 16:38:21,145 on stmt: $const562.20 = const(int, 0)
DEBUG 2022-02-14 16:38:21,145 on stmt: $const578.27 = const(int, 2)
DEBUG 2022-02-14 16:38:21,145 on stmt: $const582.29 = const(int, 0)
DEBUG 2022-02-14 16:38:21,145 on stmt: bool586 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:38:21,146 on stmt: $376load_global.1 = global(get_submatrix_batch_odd0: CPUDispatcher(<function get_submatrix_batch_odd0 at 0x7fa047ebef70>))
DEBUG 2022-02-14 16:38:21,146 on stmt: $const386.5 = const(int, -1)
DEBUG 2022-02-14 16:38:21,146 on stmt: $const390.7 = const(int, 2)
DEBUG 2022-02-14 16:38:21,146 on stmt: $392binary_floor_divide.8 = N__fixed // $const390.7
DEBUG 2022-02-14 16:38:21,146 on stmt: $402load_global.12 = global(f_loop_odd: CPUDispatcher(<function f_loop_odd at 0x7fa047ebeb80>))
DEBUG 2022-02-14 16:38:21,146 on stmt: $const428.24 = const(int, 0)
DEBUG 2022-02-14 16:38:21,146 on stmt: $const608.12 = const(int, 2)
DEBUG 2022-02-14 16:38:21,146 on stmt: jump 40
DEBUG 2022-02-14 16:38:21,146 ==== SSA block rewrite pass on 40
DEBUG 2022-02-14 16:38:21,146 Running <numba.core.ssa._FreshVarHandler object at 0x7fa041d36ee0>
DEBUG 2022-02-14 16:38:21,146 on stmt: $40for_iter.1.2076 = iternext(value=$phi40.0.2075)
DEBUG 2022-02-14 16:38:21,146 on stmt: $40for_iter.2.2077 = pair_first(value=$40for_iter.1.2076)
DEBUG 2022-02-14 16:38:21,146 on stmt: $40for_iter.3.2078 = pair_second(value=$40for_iter.1.2076)
DEBUG 2022-02-14 16:38:21,146 on stmt: $phi42.1.2079 = $40for_iter.2.2077
DEBUG 2022-02-14 16:38:21,146 on stmt: branch $40for_iter.3.2078, 42, 1224
DEBUG 2022-02-14 16:38:21,146 ==== SSA block rewrite pass on 42
DEBUG 2022-02-14 16:38:21,146 Running <numba.core.ssa._FreshVarHandler object at 0x7fa041d36ee0>
DEBUG 2022-02-14 16:38:21,146 on stmt: parfor__index_1383 = $phi42.1.2079
DEBUG 2022-02-14 16:38:21,147 on stmt: jump 50
DEBUG 2022-02-14 16:38:21,147 ==== SSA block rewrite pass on 1224
DEBUG 2022-02-14 16:38:21,147 Running <numba.core.ssa._FreshVarHandler object at 0x7fa041d36ee0>
DEBUG 2022-02-14 16:38:21,147 on stmt: $const52.1.2080 = const(NoneType, None)
DEBUG 2022-02-14 16:38:21,147 on stmt: $const54.2.2081 = const(NoneType, None)
DEBUG 2022-02-14 16:38:21,147 on stmt: $56build_slice.3.2082 = global(slice: <class 'slice'>)
DEBUG 2022-02-14 16:38:21,147 on stmt: $56build_slice.4.2083 = call $56build_slice.3.2082($const52.1.2080, $const54.2.2081, func=$56build_slice.3.2082, args=(Var($const52.1.2080, <string>:5), Var($const54.2.2081, <string>:5)), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:21,147 on stmt: $58binary_subscr.5.2084 = getitem(value=H__batch_2, index=$56build_slice.4.2083, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:21,147 on stmt: $const62.7.2085 = const(NoneType, None)
DEBUG 2022-02-14 16:38:21,147 on stmt: $const64.8.2086 = const(NoneType, None)
DEBUG 2022-02-14 16:38:21,147 on stmt: $66build_slice.9.2087 = global(slice: <class 'slice'>)
DEBUG 2022-02-14 16:38:21,147 on stmt: $66build_slice.10.2088 = call $66build_slice.9.2087($const62.7.2085, $const64.8.2086, func=$66build_slice.9.2087, args=(Var($const62.7.2085, <string>:5), Var($const64.8.2086, <string>:5)), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:21,147 on stmt: H__batch_2__arr[$66build_slice.10.2088] = $58binary_subscr.5.2084
DEBUG 2022-02-14 16:38:21,147 on stmt: $const70.11.2089 = const(NoneType, None)
DEBUG 2022-02-14 16:38:21,147 on stmt: $72return_value.12.2090 = cast(value=$const70.11.2089)
DEBUG 2022-02-14 16:38:21,147 on stmt: return $72return_value.12.2090
DEBUG 2022-02-14 16:38:21,147 ==== SSA block rewrite pass on 1062
DEBUG 2022-02-14 16:38:21,147 Running <numba.core.ssa._FreshVarHandler object at 0x7fa041d36ee0>
DEBUG 2022-02-14 16:38:21,147 on stmt: jump 1003
DEBUG 2022-02-14 16:38:21,147 ==== SSA block rewrite pass on 675
DEBUG 2022-02-14 16:38:21,147 Running <numba.core.ssa._FreshVarHandler object at 0x7fa041d36ee0>
DEBUG 2022-02-14 16:38:21,147 on stmt: $274binary_subscr.7 = getitem(value=edge__reps, index=$i.1405, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:21,148 on stmt: $280binary_subscr.10 = getitem(value=kept_edges, index=$i.1405, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:21,148 on stmt: $282build_tuple.11 = build_tuple(items=[Var($274binary_subscr.7, loop_hafnian_batch.py:111), Var($280binary_subscr.10, loop_hafnian_batch.py:111)])
DEBUG 2022-02-14 16:38:21,148 on stmt: $284binary_subscr.12 = getitem(value=binoms, index=$282build_tuple.11, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:21,148 on stmt: $binom_prod.2.1826 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=binom_prod.2, rhs=$284binary_subscr.12, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:38:21,148 on stmt: binom_prod.2 = $binom_prod.2.1826
DEBUG 2022-02-14 16:38:21,148 on stmt: jump 501
DEBUG 2022-02-14 16:38:21,148 ==== SSA block rewrite pass on 703
DEBUG 2022-02-14 16:38:21,148 Running <numba.core.ssa._FreshVarHandler object at 0x7fa041d36ee0>
DEBUG 2022-02-14 16:38:21,148 on stmt: $296pred = call bool296(glynn, func=bool296, args=(Var(glynn, loop_hafnian_batch.py:83),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:21,148 on stmt: branch $296pred, 707, 717
DEBUG 2022-02-14 16:38:21,148 ==== SSA block rewrite pass on 707
DEBUG 2022-02-14 16:38:21,148 Running <numba.core.ssa._FreshVarHandler object at 0x7fa041d36ee0>
DEBUG 2022-02-14 16:38:21,148 on stmt: ret.1315 = call assert.1314(msg.1313, kept_edges_size0.1311, edge__reps__size0_1303, func=assert.1314, args=[Var(msg.1313, loop_hafnian_batch.py:114), Var(kept_edges_size0.1311, loop_hafnian_batch.py:106), Var(edge__reps__size0_1303, loop_hafnian_batch.py:95)], kws={}, vararg=None, target=None)
DEBUG 2022-02-14 16:38:21,148 on stmt: id=14[LoopNest(index_variable = parfor_index.1366, range = (0, edge__reps__size0_1303, 1))]{1223: <ir.Block at /home/adi/GBS/gbs/loop_hafnian_batch.py (114)>}Var(parfor_index.1366, loop_hafnian_batch.py:114)
DEBUG 2022-02-14 16:38:21,148 on stmt: delta.2 = delta
DEBUG 2022-02-14 16:38:21,148 on stmt: jump 723
DEBUG 2022-02-14 16:38:21,148 ==== SSA block rewrite pass on 717
DEBUG 2022-02-14 16:38:21,148 Running <numba.core.ssa._FreshVarHandler object at 0x7fa041d36ee0>
DEBUG 2022-02-14 16:38:21,148 on stmt: delta.2 = kept_edges
DEBUG 2022-02-14 16:38:21,148 on stmt: jump 723
DEBUG 2022-02-14 16:38:21,148 ==== SSA block rewrite pass on 1078
DEBUG 2022-02-14 16:38:21,149 Running <numba.core.ssa._FreshVarHandler object at 0x7fa041d36ee0>
DEBUG 2022-02-14 16:38:21,149 on stmt: ret.1346 = call assert.1345(msg.1344, _170binary__add_75, $214binary_add.10, func=assert.1345, args=[Var(msg.1344, loop_hafnian_batch.py:142), Var(_170binary__add_75, loop_hafnian_batch.py:101), Var($214binary_add.10, loop_hafnian_batch.py:104)], kws={}, vararg=None, target=None)
DEBUG 2022-02-14 16:38:21,149 on stmt: $H_batch.2.1827 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=H__batch_2, rhs=Hnew, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:38:21,149 on stmt: H__batch_2 = $H_batch.2.1827
DEBUG 2022-02-14 16:38:21,149 replaced with: H__batch_2.1 = $H_batch.2.1827
DEBUG 2022-02-14 16:38:21,149 on stmt: jump 1117
DEBUG 2022-02-14 16:38:21,149 ==== SSA block rewrite pass on 723
DEBUG 2022-02-14 16:38:21,149 Running <numba.core.ssa._FreshVarHandler object at 0x7fa041d36ee0>
DEBUG 2022-02-14 16:38:21,149 on stmt: $328call_function.6 = call $318load_global.1(delta.2, A, D, oddV, func=$318load_global.1, args=[Var(delta.2, loop_hafnian_batch.py:118), Var(A, loop_hafnian_batch.py:83), Var(D, loop_hafnian_batch.py:83), Var(oddV, loop_hafnian_batch.py:84)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:21,149 on stmt: $330unpack_sequence.11 = exhaust_iter(value=$328call_function.6, count=4)
DEBUG 2022-02-14 16:38:21,149 on stmt: $AX_S.1399 = static_getitem(value=$330unpack_sequence.11, index=0, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:21,149 on stmt: $XD_S.1397 = static_getitem(value=$330unpack_sequence.11, index=1, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:21,149 on stmt: $D_S.1404 = static_getitem(value=$330unpack_sequence.11, index=2, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:21,149 on stmt: $oddVX_S.1398 = static_getitem(value=$330unpack_sequence.11, index=3, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:21,149 on stmt: E = call $340load_global.12($AX_S.1399, func=$340load_global.12, args=[Var($AX_S.1399, loop_hafnian_batch.py:118)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:21,149 on stmt: $352binary_subscr.17 = static_getitem(value=kept_edges, index=0, index_var=$const350.16, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:21,149 on stmt: $356compare_op.19 = $352binary_subscr.17 == $const354.18
DEBUG 2022-02-14 16:38:21,149 on stmt: $358pred = call bool358($356compare_op.19, func=bool358, args=(Var($356compare_op.19, loop_hafnian_batch.py:122),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:21,149 on stmt: branch $358pred, 737, 777
DEBUG 2022-02-14 16:38:21,150 ==== SSA block rewrite pass on 737
DEBUG 2022-02-14 16:38:21,150 Running <numba.core.ssa._FreshVarHandler object at 0x7fa041d36ee0>
DEBUG 2022-02-14 16:38:21,150 on stmt: $366binary_subscr.3 = static_getitem(value=kept_edges, index=1, index_var=$const364.2, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:21,150 on stmt: $370compare_op.5 = $366binary_subscr.3 == $const368.4
DEBUG 2022-02-14 16:38:21,150 on stmt: $372pred = call bool372($370compare_op.5, func=bool372, args=(Var($370compare_op.5, loop_hafnian_batch.py:122),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:21,150 on stmt: branch $372pred, 739, 777
DEBUG 2022-02-14 16:38:21,150 ==== SSA block rewrite pass on 777
DEBUG 2022-02-14 16:38:21,150 Running <numba.core.ssa._FreshVarHandler object at 0x7fa041d36ee0>
DEBUG 2022-02-14 16:38:21,150 on stmt: f_even = call $450load_global.1(E, $AX_S.1399, $XD_S.1397, $D_S.1404, N__max, func=$450load_global.1, args=[Var(E, loop_hafnian_batch.py:120), Var($AX_S.1399, loop_hafnian_batch.py:118), Var($XD_S.1397, loop_hafnian_batch.py:118), Var($D_S.1404, loop_hafnian_batch.py:118), Var(N__max, loop_hafnian_batch.py:93)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:21,150 on stmt: f_odd = call $466load_global.8(E, $AX_S.1399, $XD_S.1397, $D_S.1404, N__max, oddloop, $oddVX_S.1398, func=$466load_global.8, args=[Var(E, loop_hafnian_batch.py:120), Var($AX_S.1399, loop_hafnian_batch.py:118), Var($XD_S.1397, loop_hafnian_batch.py:118), Var($D_S.1404, loop_hafnian_batch.py:118), Var(N__max, loop_hafnian_batch.py:93), Var(oddloop, loop_hafnian_batch.py:83), Var($oddVX_S.1398, loop_hafnian_batch.py:118)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:21,150 on stmt: $494binary_subscr.21 = static_getitem(value=kept_edges, index=0, index_var=$const492.20, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:21,150 on stmt: $496binary_multiply.22 = $const488.18 * $494binary_subscr.21
DEBUG 2022-02-14 16:38:21,150 on stmt: $500binary_add.24 = $496binary_multiply.22 + $const498.23
DEBUG 2022-02-14 16:38:21,150 on stmt: $516call_function.32 = call $486load_global.17($500binary_add.24, $514binary_add.31, func=$486load_global.17, args=[Var($500binary_add.24, loop_hafnian_batch.py:131), Var($514binary_add.31, loop_hafnian_batch.py:131)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:21,150 on stmt: $518get_iter.33 = getiter(value=$516call_function.32)
DEBUG 2022-02-14 16:38:21,150 on stmt: jump 1003
DEBUG 2022-02-14 16:38:21,150 ==== SSA block rewrite pass on 1003
DEBUG 2022-02-14 16:38:21,150 Running <numba.core.ssa._FreshVarHandler object at 0x7fa041d36ee0>
DEBUG 2022-02-14 16:38:21,151 on stmt: $520for_iter.2 = iternext(value=$518get_iter.33)
DEBUG 2022-02-14 16:38:21,151 on stmt: $N_det.1409 = pair_first(value=$520for_iter.2)
DEBUG 2022-02-14 16:38:21,151 on stmt: $520for_iter.4 = pair_second(value=$520for_iter.2)
DEBUG 2022-02-14 16:38:21,151 on stmt: branch $520for_iter.4, 1005, 1078
DEBUG 2022-02-14 16:38:21,151 ==== SSA block rewrite pass on 50
DEBUG 2022-02-14 16:38:21,151 Running <numba.core.ssa._FreshVarHandler object at 0x7fa041d36ee0>
DEBUG 2022-02-14 16:38:21,151 on stmt: j = parfor__index_1383
DEBUG 2022-02-14 16:38:21,151 on stmt: id=13[LoopNest(index_variable = parfor_index.1361, range = (0, $214binary_add.10, 1))]{1222: <ir.Block at /home/adi/GBS/gbs/loop_hafnian_batch.py (104)>}Var(parfor_index.1361, loop_hafnian_batch.py:104)
DEBUG 2022-02-14 16:38:21,151 on stmt: kept_edges = call $226load_global.15(j, edge__reps, func=$226load_global.15, args=[Var(j, loop_hafnian_batch.py:102), Var(edge__reps, loop_hafnian_batch.py:95)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:21,151 on stmt: kept_edges_shape.1310 = getattr(value=kept_edges, attr=shape)
DEBUG 2022-02-14 16:38:21,151 on stmt: kept_edges_size0.1311 = static_getitem(value=kept_edges_shape.1310, index=0, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:21,151 on stmt: binom_prod.2 = binom_prod
DEBUG 2022-02-14 16:38:21,151 on stmt: id=18[LoopNest(index_variable = parfor_index.1381, range = (0, kept_edges_size0.1311, 1))]{573: <ir.Block at /home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numba/parfors/parfor.py (256)>}Var(parfor_index.1381, parfor.py:256)
DEBUG 2022-02-14 16:38:21,151 on stmt: $258call_function.28 = call $248load_global.23($const250.24, $256binary_floor_divide.27, func=$248load_global.23, args=[Var($const250.24, loop_hafnian_batch.py:110), Var($256binary_floor_divide.27, loop_hafnian_batch.py:110)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:21,151 on stmt: $260get_iter.29 = getiter(value=$258call_function.28)
DEBUG 2022-02-14 16:38:21,151 on stmt: jump 501
DEBUG 2022-02-14 16:38:21,151 ==== SSA block rewrite pass on 1005
DEBUG 2022-02-14 16:38:21,151 Running <numba.core.ssa._FreshVarHandler object at 0x7fa041d36ee0>
DEBUG 2022-02-14 16:38:21,151 on stmt: N = N__fixed + $N_det.1409
DEBUG 2022-02-14 16:38:21,152 on stmt: $538binary_floor_divide.9 = N // $const536.8
DEBUG 2022-02-14 16:38:21,152 on stmt: $542binary_subtract.11 = $538binary_floor_divide.9 - val.1149
DEBUG 2022-02-14 16:38:21,152 on stmt: plus_minus.1 = $const532.6 ** $542binary_subtract.11
DEBUG 2022-02-14 16:38:21,152 on stmt: $554binary_subtract.16 = $N_det.1409 - $const552.15
DEBUG 2022-02-14 16:38:21,152 on stmt: $558binary_floor_divide.18 = $554binary_subtract.16 // $const556.17
DEBUG 2022-02-14 16:38:21,152 on stmt: $564binary_subscr.21 = static_getitem(value=kept_edges, index=0, index_var=$const562.20, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:21,152 on stmt: $566build_tuple.22 = build_tuple(items=[Var($558binary_floor_divide.18, loop_hafnian_batch.py:135), Var($564binary_subscr.21, loop_hafnian_batch.py:135)])
DEBUG 2022-02-14 16:38:21,152 on stmt: $568binary_subscr.23 = getitem(value=binoms, index=$566build_tuple.22, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:21,152 on stmt: n_det_binom_prod = $568binary_subscr.23 * binom_prod.2
DEBUG 2022-02-14 16:38:21,152 on stmt: $580binary_modulo.28 = N % $const578.27
DEBUG 2022-02-14 16:38:21,152 on stmt: $584compare_op.30 = $580binary_modulo.28 == $const582.29
DEBUG 2022-02-14 16:38:21,152 on stmt: $586pred = call bool586($584compare_op.30, func=bool586, args=(Var($584compare_op.30, loop_hafnian_batch.py:137),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:21,152 on stmt: branch $586pred, 1021, 1060
DEBUG 2022-02-14 16:38:21,152 ==== SSA block rewrite pass on 739
DEBUG 2022-02-14 16:38:21,152 Running <numba.core.ssa._FreshVarHandler object at 0x7fa041d36ee0>
DEBUG 2022-02-14 16:38:21,152 on stmt: oddVX_S0 = call $376load_global.1(delta.2, oddV0, func=$376load_global.1, args=[Var(delta.2, loop_hafnian_batch.py:118), Var(oddV0, loop_hafnian_batch.py:89)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:21,152 on stmt: $396binary_subtract.10 = $392binary_floor_divide.8 - val.1149
DEBUG 2022-02-14 16:38:21,152 on stmt: plus_minus = $const386.5 ** $396binary_subtract.10
DEBUG 2022-02-14 16:38:21,152 on stmt: $418call_function.20 = call $402load_global.12(E, $AX_S.1399, $XD_S.1397, $D_S.1404, N__fixed, oddloop0, oddVX_S0, func=$402load_global.12, args=[Var(E, loop_hafnian_batch.py:120), Var($AX_S.1399, loop_hafnian_batch.py:118), Var($XD_S.1397, loop_hafnian_batch.py:118), Var($D_S.1404, loop_hafnian_batch.py:118), Var(N__fixed, loop_hafnian_batch.py:92), Var(oddloop0, loop_hafnian_batch.py:88), Var(oddVX_S0, loop_hafnian_batch.py:123)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:21,152 on stmt: f = getitem(value=$418call_function.20, index=N__fixed, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:21,153 on stmt: $432binary_subscr.27 = static_getitem(value=H__batch_2, index=0, index_var=$const428.24, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:21,153 on stmt: $438binary_multiply.30 = binom_prod.2 * plus_minus
DEBUG 2022-02-14 16:38:21,153 on stmt: $442binary_multiply.32 = $438binary_multiply.30 * f
DEBUG 2022-02-14 16:38:21,153 on stmt: $444inplace_add.33 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$432binary_subscr.27, rhs=$442binary_multiply.32, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:38:21,153 on stmt: H__batch_2[0] = $444inplace_add.33
DEBUG 2022-02-14 16:38:21,153 on stmt: jump 777
DEBUG 2022-02-14 16:38:21,153 ==== SSA block rewrite pass on 501
DEBUG 2022-02-14 16:38:21,153 Running <numba.core.ssa._FreshVarHandler object at 0x7fa041d36ee0>
DEBUG 2022-02-14 16:38:21,153 on stmt: $262for_iter.2 = iternext(value=$260get_iter.29)
DEBUG 2022-02-14 16:38:21,153 on stmt: $i.1405 = pair_first(value=$262for_iter.2)
DEBUG 2022-02-14 16:38:21,153 on stmt: $262for_iter.4 = pair_second(value=$262for_iter.2)
DEBUG 2022-02-14 16:38:21,153 on stmt: branch $262for_iter.4, 675, 703
DEBUG 2022-02-14 16:38:21,153 ==== SSA block rewrite pass on 1021
DEBUG 2022-02-14 16:38:21,153 Running <numba.core.ssa._FreshVarHandler object at 0x7fa041d36ee0>
DEBUG 2022-02-14 16:38:21,153 on stmt: $596binary_subscr.6 = getitem(value=Hnew, index=$N_det.1409, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:21,153 on stmt: $602binary_multiply.9 = n_det_binom_prod * plus_minus.1
DEBUG 2022-02-14 16:38:21,153 on stmt: $610binary_floor_divide.13 = N // $const608.12
DEBUG 2022-02-14 16:38:21,153 on stmt: $612binary_subscr.14 = getitem(value=f_even, index=$610binary_floor_divide.13, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:21,153 on stmt: $614binary_multiply.15 = $602binary_multiply.9 * $612binary_subscr.14
DEBUG 2022-02-14 16:38:21,153 on stmt: $616inplace_add.16 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$596binary_subscr.6, rhs=$614binary_multiply.15, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:38:21,153 on stmt: Hnew[$N_det.1409] = $616inplace_add.16
DEBUG 2022-02-14 16:38:21,154 on stmt: jump 1062
DEBUG 2022-02-14 16:38:21,154 ==== SSA block rewrite pass on 1060
DEBUG 2022-02-14 16:38:21,154 Running <numba.core.ssa._FreshVarHandler object at 0x7fa041d36ee0>
DEBUG 2022-02-14 16:38:21,154 on stmt: $630binary_subscr.6 = getitem(value=Hnew, index=$N_det.1409, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:21,154 on stmt: $636binary_multiply.9 = n_det_binom_prod * plus_minus.1
DEBUG 2022-02-14 16:38:21,154 on stmt: $642binary_subscr.12 = getitem(value=f_odd, index=N, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:21,154 on stmt: $644binary_multiply.13 = $636binary_multiply.9 * $642binary_subscr.12
DEBUG 2022-02-14 16:38:21,154 on stmt: $646inplace_add.14 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$630binary_subscr.6, rhs=$644binary_multiply.13, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:38:21,154 on stmt: Hnew[$N_det.1409] = $646inplace_add.14
DEBUG 2022-02-14 16:38:21,154 on stmt: jump 1062
DEBUG 2022-02-14 16:38:21,154 ==== SSA block rewrite pass on 1117
DEBUG 2022-02-14 16:38:21,154 Running <numba.core.ssa._FreshVarHandler object at 0x7fa041d36ee0>
DEBUG 2022-02-14 16:38:21,154 on stmt: jump 40
DEBUG 2022-02-14 16:38:21,154 Replaced assignments: defaultdict(<class 'list'>,
            {0: [<numba.core.ir.Assign object at 0x7fa041d36e20>],
             1078: [<numba.core.ir.Assign object at 0x7fa041d363a0>]})
DEBUG 2022-02-14 16:38:21,154 ==== SSA block rewrite pass on 0
DEBUG 2022-02-14 16:38:21,154 Running <numba.core.ssa._FixSSAVars object at 0x7fa041d36ee0>
DEBUG 2022-02-14 16:38:21,154 on stmt: sched.2060 = arg(0, name=sched)
DEBUG 2022-02-14 16:38:21,154 on stmt: _170binary__add_75 = arg(1, name=_170binary__add_75)
DEBUG 2022-02-14 16:38:21,155 on stmt: A = arg(2, name=A)
DEBUG 2022-02-14 16:38:21,155 on stmt: D = arg(3, name=D)
DEBUG 2022-02-14 16:38:21,155 on stmt: N__fixed = arg(4, name=N__fixed)
DEBUG 2022-02-14 16:38:21,155 on stmt: N__max = arg(5, name=N__max)
DEBUG 2022-02-14 16:38:21,155 on stmt: batch__max = arg(6, name=batch__max)
DEBUG 2022-02-14 16:38:21,155 on stmt: binoms = arg(7, name=binoms)
DEBUG 2022-02-14 16:38:21,155 on stmt: edge__reps = arg(8, name=edge__reps)
DEBUG 2022-02-14 16:38:21,155 on stmt: edge__reps__size0_1303 = arg(9, name=edge__reps__size0_1303)
DEBUG 2022-02-14 16:38:21,155 on stmt: even__cutoff = arg(10, name=even__cutoff)
DEBUG 2022-02-14 16:38:21,155 on stmt: glynn = arg(11, name=glynn)
DEBUG 2022-02-14 16:38:21,155 on stmt: n = arg(12, name=n)
DEBUG 2022-02-14 16:38:21,155 on stmt: oddV = arg(13, name=oddV)
DEBUG 2022-02-14 16:38:21,155 on stmt: oddV0 = arg(14, name=oddV0)
DEBUG 2022-02-14 16:38:21,155 on stmt: oddloop = arg(15, name=oddloop)
DEBUG 2022-02-14 16:38:21,155 on stmt: oddloop0 = arg(16, name=oddloop0)
DEBUG 2022-02-14 16:38:21,155 on stmt: H__batch_2__arr = arg(17, name=H__batch_2__arr)
DEBUG 2022-02-14 16:38:21,155 on stmt: $2load_global.0.2061 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:38:21,155 on stmt: $4load_method.1.2062 = getattr(value=$2load_global.0.2061, attr=copy)
DEBUG 2022-02-14 16:38:21,155 on stmt: H__batch_2 = call $4load_method.1.2062(H__batch_2__arr, func=$4load_method.1.2062, args=[Var(H__batch_2__arr, <string>:2)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:21,155 on stmt: $12load_global.4.2063 = global(range: <class 'range'>)
DEBUG 2022-02-14 16:38:21,156 on stmt: $const16.6.2064 = const(int, 0)
DEBUG 2022-02-14 16:38:21,156 on stmt: $18binary_subscr.7.2065 = getitem(value=sched.2060, index=$const16.6.2064, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:21,156 on stmt: $const22.9.2066 = const(int, 1)
DEBUG 2022-02-14 16:38:21,156 on stmt: $24binary_subscr.10.2067 = getitem(value=sched.2060, index=$const22.9.2066, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:21,156 on stmt: $26load_global.11.2068 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:38:21,156 on stmt: $28load_method.12.2069 = getattr(value=$26load_global.11.2068, attr=uint8)
DEBUG 2022-02-14 16:38:21,156 on stmt: $const30.13.2070 = const(int, 1)
DEBUG 2022-02-14 16:38:21,156 on stmt: $32call_method.14.2071 = call $28load_method.12.2069($const30.13.2070, func=$28load_method.12.2069, args=[Var($const30.13.2070, <string>:3)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:21,156 on stmt: $34binary_add.15.2072 = $24binary_subscr.10.2067 + $32call_method.14.2071
DEBUG 2022-02-14 16:38:21,156 on stmt: $36call_function.16.2073 = call $12load_global.4.2063($18binary_subscr.7.2065, $34binary_add.15.2072, func=$12load_global.4.2063, args=[Var($18binary_subscr.7.2065, <string>:3), Var($34binary_add.15.2072, <string>:3)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:21,156 on stmt: $38get_iter.17.2074 = getiter(value=$36call_function.16.2073)
DEBUG 2022-02-14 16:38:21,156 on stmt: $phi40.0.2075 = $38get_iter.17.2074
DEBUG 2022-02-14 16:38:21,156 on stmt: bool296 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:38:21,156 on stmt: msg.1313 = const(str, Sizes of kept_edges, edge_reps do not match on /home/adi/GBS/gbs/loop_hafnian_batch.py (114))
DEBUG 2022-02-14 16:38:21,156 on stmt: assert.1314 = global(assert_equiv: <intrinsic assert_equiv>)
DEBUG 2022-02-14 16:38:21,156 on stmt: $np_g_var.1367 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:38:21,156 on stmt: $empty_attr_attr.1368 = getattr(value=$np_g_var.1367, attr=empty)
DEBUG 2022-02-14 16:38:21,156 on stmt: $np_typ_var.1369 = getattr(value=$np_g_var.1367, attr=int64)
DEBUG 2022-02-14 16:38:21,157 on stmt: delta = call $empty_attr_attr.1368(edge__reps__size0_1303, $np_typ_var.1369, func=$empty_attr_attr.1368, args=[Var(edge__reps__size0_1303, loop_hafnian_batch.py:95), Var($np_typ_var.1369, loop_hafnian_batch.py:114)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:21,157 on stmt: msg.1344 = const(str, Sizes of H_batch.2, Hnew do not match on /home/adi/GBS/gbs/loop_hafnian_batch.py (142))
DEBUG 2022-02-14 16:38:21,157 on stmt: assert.1345 = global(assert_equiv: <intrinsic assert_equiv>)
DEBUG 2022-02-14 16:38:21,157 on stmt: $318load_global.1 = global(get_submatrices: CPUDispatcher(<function get_submatrices at 0x7fa047ebed30>))
DEBUG 2022-02-14 16:38:21,157 on stmt: $340load_global.12 = global(eigvals: CPUDispatcher(<function eigvals at 0x7fa047e5d430>))
DEBUG 2022-02-14 16:38:21,157 on stmt: $const350.16 = const(int, 0)
DEBUG 2022-02-14 16:38:21,157 on stmt: $const354.18 = const(int, 0)
DEBUG 2022-02-14 16:38:21,157 on stmt: bool358 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:38:21,157 on stmt: $const364.2 = const(int, 1)
DEBUG 2022-02-14 16:38:21,157 on stmt: $const368.4 = const(int, 0)
DEBUG 2022-02-14 16:38:21,157 on stmt: bool372 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:38:21,157 on stmt: $450load_global.1 = global(f_loop: CPUDispatcher(<function f_loop at 0x7fa047ebe9d0>))
DEBUG 2022-02-14 16:38:21,157 on stmt: $466load_global.8 = global(f_loop_odd: CPUDispatcher(<function f_loop_odd at 0x7fa047ebeb80>))
DEBUG 2022-02-14 16:38:21,157 on stmt: $486load_global.17 = global(range: <class 'range'>)
DEBUG 2022-02-14 16:38:21,157 on stmt: $const488.18 = const(int, 2)
DEBUG 2022-02-14 16:38:21,158 on stmt: $const492.20 = const(int, 0)
DEBUG 2022-02-14 16:38:21,158 on stmt: $const498.23 = const(int, 1)
DEBUG 2022-02-14 16:38:21,158 on stmt: $const502.25 = const(int, 2)
DEBUG 2022-02-14 16:38:21,158 on stmt: $506binary_multiply.27 = $const502.25 * batch__max
DEBUG 2022-02-14 16:38:21,158 on stmt: $510binary_add.29 = $506binary_multiply.27 + even__cutoff
DEBUG 2022-02-14 16:38:21,158 on stmt: $const512.30 = const(int, 2)
DEBUG 2022-02-14 16:38:21,158 on stmt: $514binary_add.31 = $510binary_add.29 + $const512.30
DEBUG 2022-02-14 16:38:21,158 on stmt: $const202.4 = const(int, 2)
DEBUG 2022-02-14 16:38:21,158 on stmt: $206binary_multiply.6 = $const202.4 * batch__max
DEBUG 2022-02-14 16:38:21,158 on stmt: $210binary_add.8 = $206binary_multiply.6 + even__cutoff
DEBUG 2022-02-14 16:38:21,158 on stmt: $const212.9 = const(int, 2)
DEBUG 2022-02-14 16:38:21,158 on stmt: $214binary_add.10 = $210binary_add.8 + $const212.9
DEBUG 2022-02-14 16:38:21,158 on stmt: $226load_global.15 = global(find_kept_edges: CPUDispatcher(<function find_kept_edges at 0x7fa047ebe790>))
DEBUG 2022-02-14 16:38:21,158 on stmt: $np_g_var.1362 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:38:21,158 on stmt: $empty_attr_attr.1363 = getattr(value=$np_g_var.1362, attr=empty)
DEBUG 2022-02-14 16:38:21,159 on stmt: $np_typ_var.1364 = getattr(value=$np_g_var.1362, attr=complex128)
DEBUG 2022-02-14 16:38:21,159 on stmt: Hnew = call $empty_attr_attr.1363($214binary_add.10, $np_typ_var.1364, func=$empty_attr_attr.1363, args=[Var($214binary_add.10, loop_hafnian_batch.py:104), Var($np_typ_var.1364, loop_hafnian_batch.py:104)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:21,159 on stmt: binom_prod = const(float, 1.0)
DEBUG 2022-02-14 16:38:21,159 on stmt: $248load_global.23 = global(range: <class 'range'>)
DEBUG 2022-02-14 16:38:21,159 on stmt: $const250.24 = const(int, 1)
DEBUG 2022-02-14 16:38:21,159 on stmt: $const254.26 = const(int, 2)
DEBUG 2022-02-14 16:38:21,159 on stmt: $256binary_floor_divide.27 = n // $const254.26
DEBUG 2022-02-14 16:38:21,159 on stmt: $const532.6 = const(int, -1)
DEBUG 2022-02-14 16:38:21,159 on stmt: $const536.8 = const(int, 2)
DEBUG 2022-02-14 16:38:21,159 on stmt: $const552.15 = const(int, 1)
DEBUG 2022-02-14 16:38:21,159 on stmt: $const556.17 = const(int, 2)
DEBUG 2022-02-14 16:38:21,159 on stmt: $const562.20 = const(int, 0)
DEBUG 2022-02-14 16:38:21,159 on stmt: $const578.27 = const(int, 2)
DEBUG 2022-02-14 16:38:21,159 on stmt: $const582.29 = const(int, 0)
DEBUG 2022-02-14 16:38:21,159 on stmt: bool586 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:38:21,159 on stmt: $376load_global.1 = global(get_submatrix_batch_odd0: CPUDispatcher(<function get_submatrix_batch_odd0 at 0x7fa047ebef70>))
DEBUG 2022-02-14 16:38:21,159 on stmt: $const386.5 = const(int, -1)
DEBUG 2022-02-14 16:38:21,160 on stmt: $const390.7 = const(int, 2)
DEBUG 2022-02-14 16:38:21,160 on stmt: $392binary_floor_divide.8 = N__fixed // $const390.7
DEBUG 2022-02-14 16:38:21,160 on stmt: $402load_global.12 = global(f_loop_odd: CPUDispatcher(<function f_loop_odd at 0x7fa047ebeb80>))
DEBUG 2022-02-14 16:38:21,160 on stmt: $const428.24 = const(int, 0)
DEBUG 2022-02-14 16:38:21,160 on stmt: $const608.12 = const(int, 2)
DEBUG 2022-02-14 16:38:21,160 on stmt: jump 40
DEBUG 2022-02-14 16:38:21,160 ==== SSA block rewrite pass on 40
DEBUG 2022-02-14 16:38:21,160 Running <numba.core.ssa._FixSSAVars object at 0x7fa041d36ee0>
DEBUG 2022-02-14 16:38:21,160 on stmt: $40for_iter.1.2076 = iternext(value=$phi40.0.2075)
DEBUG 2022-02-14 16:38:21,160 on stmt: $40for_iter.2.2077 = pair_first(value=$40for_iter.1.2076)
DEBUG 2022-02-14 16:38:21,160 on stmt: $40for_iter.3.2078 = pair_second(value=$40for_iter.1.2076)
DEBUG 2022-02-14 16:38:21,160 on stmt: $phi42.1.2079 = $40for_iter.2.2077
DEBUG 2022-02-14 16:38:21,160 on stmt: branch $40for_iter.3.2078, 42, 1224
DEBUG 2022-02-14 16:38:21,160 ==== SSA block rewrite pass on 42
DEBUG 2022-02-14 16:38:21,160 Running <numba.core.ssa._FixSSAVars object at 0x7fa041d36ee0>
DEBUG 2022-02-14 16:38:21,160 on stmt: parfor__index_1383 = $phi42.1.2079
DEBUG 2022-02-14 16:38:21,160 on stmt: jump 50
DEBUG 2022-02-14 16:38:21,160 ==== SSA block rewrite pass on 1224
DEBUG 2022-02-14 16:38:21,160 Running <numba.core.ssa._FixSSAVars object at 0x7fa041d36ee0>
DEBUG 2022-02-14 16:38:21,160 on stmt: $const52.1.2080 = const(NoneType, None)
DEBUG 2022-02-14 16:38:21,160 on stmt: $const54.2.2081 = const(NoneType, None)
DEBUG 2022-02-14 16:38:21,161 on stmt: $56build_slice.3.2082 = global(slice: <class 'slice'>)
DEBUG 2022-02-14 16:38:21,161 on stmt: $56build_slice.4.2083 = call $56build_slice.3.2082($const52.1.2080, $const54.2.2081, func=$56build_slice.3.2082, args=(Var($const52.1.2080, <string>:5), Var($const54.2.2081, <string>:5)), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:21,161 on stmt: $58binary_subscr.5.2084 = getitem(value=H__batch_2, index=$56build_slice.4.2083, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:21,161 find_def var='H__batch_2' stmt=$58binary_subscr.5.2084 = getitem(value=H__batch_2, index=$56build_slice.4.2083, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:21,161 find_def_from_top label 1224
DEBUG 2022-02-14 16:38:21,161 idom 40 from label 1224
DEBUG 2022-02-14 16:38:21,161 find_def_from_bottom label 40
DEBUG 2022-02-14 16:38:21,161 find_def_from_top label 40
DEBUG 2022-02-14 16:38:21,161 insert phi node H__batch_2.2 = phi(incoming_values=[], incoming_blocks=[]) at 40
DEBUG 2022-02-14 16:38:21,161 find_def_from_bottom label 0
DEBUG 2022-02-14 16:38:21,161 incoming_def H__batch_2 = call $4load_method.1.2062(H__batch_2__arr, func=$4load_method.1.2062, args=[Var(H__batch_2__arr, <string>:2)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:21,161 find_def_from_bottom label 1117
DEBUG 2022-02-14 16:38:21,161 find_def_from_top label 1117
DEBUG 2022-02-14 16:38:21,161 idom 1078 from label 1117
DEBUG 2022-02-14 16:38:21,161 find_def_from_bottom label 1078
DEBUG 2022-02-14 16:38:21,161 incoming_def H__batch_2.1 = $H_batch.2.1827
DEBUG 2022-02-14 16:38:21,161 replaced with: $58binary_subscr.5.2084 = getitem(value=H__batch_2.2, index=$56build_slice.4.2083, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:21,161 on stmt: $const62.7.2085 = const(NoneType, None)
DEBUG 2022-02-14 16:38:21,161 on stmt: $const64.8.2086 = const(NoneType, None)
DEBUG 2022-02-14 16:38:21,161 on stmt: $66build_slice.9.2087 = global(slice: <class 'slice'>)
DEBUG 2022-02-14 16:38:21,162 on stmt: $66build_slice.10.2088 = call $66build_slice.9.2087($const62.7.2085, $const64.8.2086, func=$66build_slice.9.2087, args=(Var($const62.7.2085, <string>:5), Var($const64.8.2086, <string>:5)), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:21,162 on stmt: H__batch_2__arr[$66build_slice.10.2088] = $58binary_subscr.5.2084
DEBUG 2022-02-14 16:38:21,162 on stmt: $const70.11.2089 = const(NoneType, None)
DEBUG 2022-02-14 16:38:21,162 on stmt: $72return_value.12.2090 = cast(value=$const70.11.2089)
DEBUG 2022-02-14 16:38:21,162 on stmt: return $72return_value.12.2090
DEBUG 2022-02-14 16:38:21,162 ==== SSA block rewrite pass on 1062
DEBUG 2022-02-14 16:38:21,162 Running <numba.core.ssa._FixSSAVars object at 0x7fa041d36ee0>
DEBUG 2022-02-14 16:38:21,162 on stmt: jump 1003
DEBUG 2022-02-14 16:38:21,162 ==== SSA block rewrite pass on 675
DEBUG 2022-02-14 16:38:21,162 Running <numba.core.ssa._FixSSAVars object at 0x7fa041d36ee0>
DEBUG 2022-02-14 16:38:21,162 on stmt: $274binary_subscr.7 = getitem(value=edge__reps, index=$i.1405, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:21,162 on stmt: $280binary_subscr.10 = getitem(value=kept_edges, index=$i.1405, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:21,162 on stmt: $282build_tuple.11 = build_tuple(items=[Var($274binary_subscr.7, loop_hafnian_batch.py:111), Var($280binary_subscr.10, loop_hafnian_batch.py:111)])
DEBUG 2022-02-14 16:38:21,162 on stmt: $284binary_subscr.12 = getitem(value=binoms, index=$282build_tuple.11, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:21,162 on stmt: $binom_prod.2.1826 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=binom_prod.2, rhs=$284binary_subscr.12, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:38:21,162 on stmt: binom_prod.2 = $binom_prod.2.1826
DEBUG 2022-02-14 16:38:21,162 on stmt: jump 501
DEBUG 2022-02-14 16:38:21,162 ==== SSA block rewrite pass on 703
DEBUG 2022-02-14 16:38:21,163 Running <numba.core.ssa._FixSSAVars object at 0x7fa041d36ee0>
DEBUG 2022-02-14 16:38:21,163 on stmt: $296pred = call bool296(glynn, func=bool296, args=(Var(glynn, loop_hafnian_batch.py:83),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:21,163 on stmt: branch $296pred, 707, 717
DEBUG 2022-02-14 16:38:21,163 ==== SSA block rewrite pass on 707
DEBUG 2022-02-14 16:38:21,163 Running <numba.core.ssa._FixSSAVars object at 0x7fa041d36ee0>
DEBUG 2022-02-14 16:38:21,163 on stmt: ret.1315 = call assert.1314(msg.1313, kept_edges_size0.1311, edge__reps__size0_1303, func=assert.1314, args=[Var(msg.1313, loop_hafnian_batch.py:114), Var(kept_edges_size0.1311, loop_hafnian_batch.py:106), Var(edge__reps__size0_1303, loop_hafnian_batch.py:95)], kws={}, vararg=None, target=None)
DEBUG 2022-02-14 16:38:21,163 on stmt: id=14[LoopNest(index_variable = parfor_index.1366, range = (0, edge__reps__size0_1303, 1))]{1223: <ir.Block at /home/adi/GBS/gbs/loop_hafnian_batch.py (114)>}Var(parfor_index.1366, loop_hafnian_batch.py:114)
DEBUG 2022-02-14 16:38:21,163 on stmt: delta.2 = delta
DEBUG 2022-02-14 16:38:21,163 on stmt: jump 723
DEBUG 2022-02-14 16:38:21,163 ==== SSA block rewrite pass on 717
DEBUG 2022-02-14 16:38:21,163 Running <numba.core.ssa._FixSSAVars object at 0x7fa041d36ee0>
DEBUG 2022-02-14 16:38:21,163 on stmt: delta.2 = kept_edges
DEBUG 2022-02-14 16:38:21,163 on stmt: jump 723
DEBUG 2022-02-14 16:38:21,163 ==== SSA block rewrite pass on 1078
DEBUG 2022-02-14 16:38:21,163 Running <numba.core.ssa._FixSSAVars object at 0x7fa041d36ee0>
DEBUG 2022-02-14 16:38:21,163 on stmt: ret.1346 = call assert.1345(msg.1344, _170binary__add_75, $214binary_add.10, func=assert.1345, args=[Var(msg.1344, loop_hafnian_batch.py:142), Var(_170binary__add_75, loop_hafnian_batch.py:101), Var($214binary_add.10, loop_hafnian_batch.py:104)], kws={}, vararg=None, target=None)
DEBUG 2022-02-14 16:38:21,163 on stmt: $H_batch.2.1827 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=H__batch_2, rhs=Hnew, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:38:21,163 find_def var='H__batch_2' stmt=$H_batch.2.1827 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=H__batch_2, rhs=Hnew, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:38:21,164 find_def_from_top label 1078
DEBUG 2022-02-14 16:38:21,164 idom 1003 from label 1078
DEBUG 2022-02-14 16:38:21,164 find_def_from_bottom label 1003
DEBUG 2022-02-14 16:38:21,164 find_def_from_top label 1003
DEBUG 2022-02-14 16:38:21,164 idom 777 from label 1003
DEBUG 2022-02-14 16:38:21,164 find_def_from_bottom label 777
DEBUG 2022-02-14 16:38:21,164 find_def_from_top label 777
DEBUG 2022-02-14 16:38:21,164 idom 723 from label 777
DEBUG 2022-02-14 16:38:21,164 find_def_from_bottom label 723
DEBUG 2022-02-14 16:38:21,164 find_def_from_top label 723
DEBUG 2022-02-14 16:38:21,164 idom 703 from label 723
DEBUG 2022-02-14 16:38:21,164 find_def_from_bottom label 703
DEBUG 2022-02-14 16:38:21,164 find_def_from_top label 703
DEBUG 2022-02-14 16:38:21,164 idom 501 from label 703
DEBUG 2022-02-14 16:38:21,164 find_def_from_bottom label 501
DEBUG 2022-02-14 16:38:21,164 find_def_from_top label 501
DEBUG 2022-02-14 16:38:21,164 idom 50 from label 501
DEBUG 2022-02-14 16:38:21,164 find_def_from_bottom label 50
DEBUG 2022-02-14 16:38:21,164 find_def_from_top label 50
DEBUG 2022-02-14 16:38:21,164 idom 42 from label 50
DEBUG 2022-02-14 16:38:21,164 find_def_from_bottom label 42
DEBUG 2022-02-14 16:38:21,164 find_def_from_top label 42
DEBUG 2022-02-14 16:38:21,164 idom 40 from label 42
DEBUG 2022-02-14 16:38:21,164 find_def_from_bottom label 40
DEBUG 2022-02-14 16:38:21,164 replaced with: $H_batch.2.1827 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=H__batch_2.2, rhs=Hnew, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:38:21,165 on stmt: H__batch_2.1 = $H_batch.2.1827
DEBUG 2022-02-14 16:38:21,165 on stmt: jump 1117
DEBUG 2022-02-14 16:38:21,165 ==== SSA block rewrite pass on 723
DEBUG 2022-02-14 16:38:21,165 Running <numba.core.ssa._FixSSAVars object at 0x7fa041d36ee0>
DEBUG 2022-02-14 16:38:21,165 on stmt: $328call_function.6 = call $318load_global.1(delta.2, A, D, oddV, func=$318load_global.1, args=[Var(delta.2, loop_hafnian_batch.py:118), Var(A, loop_hafnian_batch.py:83), Var(D, loop_hafnian_batch.py:83), Var(oddV, loop_hafnian_batch.py:84)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:21,165 on stmt: $330unpack_sequence.11 = exhaust_iter(value=$328call_function.6, count=4)
DEBUG 2022-02-14 16:38:21,165 on stmt: $AX_S.1399 = static_getitem(value=$330unpack_sequence.11, index=0, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:21,165 on stmt: $XD_S.1397 = static_getitem(value=$330unpack_sequence.11, index=1, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:21,165 on stmt: $D_S.1404 = static_getitem(value=$330unpack_sequence.11, index=2, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:21,165 on stmt: $oddVX_S.1398 = static_getitem(value=$330unpack_sequence.11, index=3, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:21,165 on stmt: E = call $340load_global.12($AX_S.1399, func=$340load_global.12, args=[Var($AX_S.1399, loop_hafnian_batch.py:118)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:21,165 on stmt: $352binary_subscr.17 = static_getitem(value=kept_edges, index=0, index_var=$const350.16, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:21,165 on stmt: $356compare_op.19 = $352binary_subscr.17 == $const354.18
DEBUG 2022-02-14 16:38:21,165 on stmt: $358pred = call bool358($356compare_op.19, func=bool358, args=(Var($356compare_op.19, loop_hafnian_batch.py:122),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:21,165 on stmt: branch $358pred, 737, 777
DEBUG 2022-02-14 16:38:21,165 ==== SSA block rewrite pass on 737
DEBUG 2022-02-14 16:38:21,165 Running <numba.core.ssa._FixSSAVars object at 0x7fa041d36ee0>
DEBUG 2022-02-14 16:38:21,165 on stmt: $366binary_subscr.3 = static_getitem(value=kept_edges, index=1, index_var=$const364.2, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:21,166 on stmt: $370compare_op.5 = $366binary_subscr.3 == $const368.4
DEBUG 2022-02-14 16:38:21,166 on stmt: $372pred = call bool372($370compare_op.5, func=bool372, args=(Var($370compare_op.5, loop_hafnian_batch.py:122),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:21,166 on stmt: branch $372pred, 739, 777
DEBUG 2022-02-14 16:38:21,166 ==== SSA block rewrite pass on 777
DEBUG 2022-02-14 16:38:21,166 Running <numba.core.ssa._FixSSAVars object at 0x7fa041d36ee0>
DEBUG 2022-02-14 16:38:21,166 on stmt: f_even = call $450load_global.1(E, $AX_S.1399, $XD_S.1397, $D_S.1404, N__max, func=$450load_global.1, args=[Var(E, loop_hafnian_batch.py:120), Var($AX_S.1399, loop_hafnian_batch.py:118), Var($XD_S.1397, loop_hafnian_batch.py:118), Var($D_S.1404, loop_hafnian_batch.py:118), Var(N__max, loop_hafnian_batch.py:93)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:21,166 on stmt: f_odd = call $466load_global.8(E, $AX_S.1399, $XD_S.1397, $D_S.1404, N__max, oddloop, $oddVX_S.1398, func=$466load_global.8, args=[Var(E, loop_hafnian_batch.py:120), Var($AX_S.1399, loop_hafnian_batch.py:118), Var($XD_S.1397, loop_hafnian_batch.py:118), Var($D_S.1404, loop_hafnian_batch.py:118), Var(N__max, loop_hafnian_batch.py:93), Var(oddloop, loop_hafnian_batch.py:83), Var($oddVX_S.1398, loop_hafnian_batch.py:118)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:21,166 on stmt: $494binary_subscr.21 = static_getitem(value=kept_edges, index=0, index_var=$const492.20, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:21,166 on stmt: $496binary_multiply.22 = $const488.18 * $494binary_subscr.21
DEBUG 2022-02-14 16:38:21,166 on stmt: $500binary_add.24 = $496binary_multiply.22 + $const498.23
DEBUG 2022-02-14 16:38:21,166 on stmt: $516call_function.32 = call $486load_global.17($500binary_add.24, $514binary_add.31, func=$486load_global.17, args=[Var($500binary_add.24, loop_hafnian_batch.py:131), Var($514binary_add.31, loop_hafnian_batch.py:131)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:21,166 on stmt: $518get_iter.33 = getiter(value=$516call_function.32)
DEBUG 2022-02-14 16:38:21,166 on stmt: jump 1003
DEBUG 2022-02-14 16:38:21,166 ==== SSA block rewrite pass on 1003
DEBUG 2022-02-14 16:38:21,166 Running <numba.core.ssa._FixSSAVars object at 0x7fa041d36ee0>
DEBUG 2022-02-14 16:38:21,166 on stmt: $520for_iter.2 = iternext(value=$518get_iter.33)
DEBUG 2022-02-14 16:38:21,166 on stmt: $N_det.1409 = pair_first(value=$520for_iter.2)
DEBUG 2022-02-14 16:38:21,167 on stmt: $520for_iter.4 = pair_second(value=$520for_iter.2)
DEBUG 2022-02-14 16:38:21,167 on stmt: branch $520for_iter.4, 1005, 1078
DEBUG 2022-02-14 16:38:21,167 ==== SSA block rewrite pass on 50
DEBUG 2022-02-14 16:38:21,167 Running <numba.core.ssa._FixSSAVars object at 0x7fa041d36ee0>
DEBUG 2022-02-14 16:38:21,167 on stmt: j = parfor__index_1383
DEBUG 2022-02-14 16:38:21,167 on stmt: id=13[LoopNest(index_variable = parfor_index.1361, range = (0, $214binary_add.10, 1))]{1222: <ir.Block at /home/adi/GBS/gbs/loop_hafnian_batch.py (104)>}Var(parfor_index.1361, loop_hafnian_batch.py:104)
DEBUG 2022-02-14 16:38:21,167 on stmt: kept_edges = call $226load_global.15(j, edge__reps, func=$226load_global.15, args=[Var(j, loop_hafnian_batch.py:102), Var(edge__reps, loop_hafnian_batch.py:95)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:21,167 on stmt: kept_edges_shape.1310 = getattr(value=kept_edges, attr=shape)
DEBUG 2022-02-14 16:38:21,167 on stmt: kept_edges_size0.1311 = static_getitem(value=kept_edges_shape.1310, index=0, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:21,167 on stmt: binom_prod.2 = binom_prod
DEBUG 2022-02-14 16:38:21,167 on stmt: id=18[LoopNest(index_variable = parfor_index.1381, range = (0, kept_edges_size0.1311, 1))]{573: <ir.Block at /home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numba/parfors/parfor.py (256)>}Var(parfor_index.1381, parfor.py:256)
DEBUG 2022-02-14 16:38:21,167 on stmt: $258call_function.28 = call $248load_global.23($const250.24, $256binary_floor_divide.27, func=$248load_global.23, args=[Var($const250.24, loop_hafnian_batch.py:110), Var($256binary_floor_divide.27, loop_hafnian_batch.py:110)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:21,167 on stmt: $260get_iter.29 = getiter(value=$258call_function.28)
DEBUG 2022-02-14 16:38:21,167 on stmt: jump 501
DEBUG 2022-02-14 16:38:21,167 ==== SSA block rewrite pass on 1005
DEBUG 2022-02-14 16:38:21,167 Running <numba.core.ssa._FixSSAVars object at 0x7fa041d36ee0>
DEBUG 2022-02-14 16:38:21,167 on stmt: N = N__fixed + $N_det.1409
DEBUG 2022-02-14 16:38:21,167 on stmt: $538binary_floor_divide.9 = N // $const536.8
DEBUG 2022-02-14 16:38:21,168 on stmt: $542binary_subtract.11 = $538binary_floor_divide.9 - val.1149
DEBUG 2022-02-14 16:38:21,168 on stmt: plus_minus.1 = $const532.6 ** $542binary_subtract.11
DEBUG 2022-02-14 16:38:21,168 on stmt: $554binary_subtract.16 = $N_det.1409 - $const552.15
DEBUG 2022-02-14 16:38:21,168 on stmt: $558binary_floor_divide.18 = $554binary_subtract.16 // $const556.17
DEBUG 2022-02-14 16:38:21,168 on stmt: $564binary_subscr.21 = static_getitem(value=kept_edges, index=0, index_var=$const562.20, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:21,168 on stmt: $566build_tuple.22 = build_tuple(items=[Var($558binary_floor_divide.18, loop_hafnian_batch.py:135), Var($564binary_subscr.21, loop_hafnian_batch.py:135)])
DEBUG 2022-02-14 16:38:21,168 on stmt: $568binary_subscr.23 = getitem(value=binoms, index=$566build_tuple.22, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:21,168 on stmt: n_det_binom_prod = $568binary_subscr.23 * binom_prod.2
DEBUG 2022-02-14 16:38:21,168 on stmt: $580binary_modulo.28 = N % $const578.27
DEBUG 2022-02-14 16:38:21,168 on stmt: $584compare_op.30 = $580binary_modulo.28 == $const582.29
DEBUG 2022-02-14 16:38:21,168 on stmt: $586pred = call bool586($584compare_op.30, func=bool586, args=(Var($584compare_op.30, loop_hafnian_batch.py:137),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:21,168 on stmt: branch $586pred, 1021, 1060
DEBUG 2022-02-14 16:38:21,168 ==== SSA block rewrite pass on 739
DEBUG 2022-02-14 16:38:21,168 Running <numba.core.ssa._FixSSAVars object at 0x7fa041d36ee0>
DEBUG 2022-02-14 16:38:21,168 on stmt: oddVX_S0 = call $376load_global.1(delta.2, oddV0, func=$376load_global.1, args=[Var(delta.2, loop_hafnian_batch.py:118), Var(oddV0, loop_hafnian_batch.py:89)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:21,168 on stmt: $396binary_subtract.10 = $392binary_floor_divide.8 - val.1149
DEBUG 2022-02-14 16:38:21,169 on stmt: plus_minus = $const386.5 ** $396binary_subtract.10
DEBUG 2022-02-14 16:38:21,169 on stmt: $418call_function.20 = call $402load_global.12(E, $AX_S.1399, $XD_S.1397, $D_S.1404, N__fixed, oddloop0, oddVX_S0, func=$402load_global.12, args=[Var(E, loop_hafnian_batch.py:120), Var($AX_S.1399, loop_hafnian_batch.py:118), Var($XD_S.1397, loop_hafnian_batch.py:118), Var($D_S.1404, loop_hafnian_batch.py:118), Var(N__fixed, loop_hafnian_batch.py:92), Var(oddloop0, loop_hafnian_batch.py:88), Var(oddVX_S0, loop_hafnian_batch.py:123)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:21,169 on stmt: f = getitem(value=$418call_function.20, index=N__fixed, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:21,169 on stmt: $432binary_subscr.27 = static_getitem(value=H__batch_2, index=0, index_var=$const428.24, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:21,169 find_def var='H__batch_2' stmt=$432binary_subscr.27 = static_getitem(value=H__batch_2, index=0, index_var=$const428.24, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:21,169 find_def_from_top label 739
DEBUG 2022-02-14 16:38:21,169 idom 737 from label 739
DEBUG 2022-02-14 16:38:21,169 find_def_from_bottom label 737
DEBUG 2022-02-14 16:38:21,169 find_def_from_top label 737
DEBUG 2022-02-14 16:38:21,169 idom 723 from label 737
DEBUG 2022-02-14 16:38:21,169 find_def_from_bottom label 723
DEBUG 2022-02-14 16:38:21,169 find_def_from_top label 723
DEBUG 2022-02-14 16:38:21,169 idom 703 from label 723
DEBUG 2022-02-14 16:38:21,169 find_def_from_bottom label 703
DEBUG 2022-02-14 16:38:21,169 find_def_from_top label 703
DEBUG 2022-02-14 16:38:21,169 idom 501 from label 703
DEBUG 2022-02-14 16:38:21,169 find_def_from_bottom label 501
DEBUG 2022-02-14 16:38:21,169 find_def_from_top label 501
DEBUG 2022-02-14 16:38:21,169 idom 50 from label 501
DEBUG 2022-02-14 16:38:21,169 find_def_from_bottom label 50
DEBUG 2022-02-14 16:38:21,169 find_def_from_top label 50
DEBUG 2022-02-14 16:38:21,169 idom 42 from label 50
DEBUG 2022-02-14 16:38:21,170 find_def_from_bottom label 42
DEBUG 2022-02-14 16:38:21,170 find_def_from_top label 42
DEBUG 2022-02-14 16:38:21,170 idom 40 from label 42
DEBUG 2022-02-14 16:38:21,170 find_def_from_bottom label 40
DEBUG 2022-02-14 16:38:21,170 replaced with: $432binary_subscr.27 = static_getitem(value=H__batch_2.2, index=0, index_var=$const428.24, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:21,170 on stmt: $438binary_multiply.30 = binom_prod.2 * plus_minus
DEBUG 2022-02-14 16:38:21,170 on stmt: $442binary_multiply.32 = $438binary_multiply.30 * f
DEBUG 2022-02-14 16:38:21,170 on stmt: $444inplace_add.33 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$432binary_subscr.27, rhs=$442binary_multiply.32, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:38:21,170 on stmt: H__batch_2[0] = $444inplace_add.33
DEBUG 2022-02-14 16:38:21,170 find_def var='H__batch_2' stmt=H__batch_2[0] = $444inplace_add.33
DEBUG 2022-02-14 16:38:21,170 find_def_from_top label 739
DEBUG 2022-02-14 16:38:21,170 idom 737 from label 739
DEBUG 2022-02-14 16:38:21,170 find_def_from_bottom label 737
DEBUG 2022-02-14 16:38:21,170 find_def_from_top label 737
DEBUG 2022-02-14 16:38:21,170 idom 723 from label 737
DEBUG 2022-02-14 16:38:21,170 find_def_from_bottom label 723
DEBUG 2022-02-14 16:38:21,170 find_def_from_top label 723
DEBUG 2022-02-14 16:38:21,170 idom 703 from label 723
DEBUG 2022-02-14 16:38:21,170 find_def_from_bottom label 703
DEBUG 2022-02-14 16:38:21,171 find_def_from_top label 703
DEBUG 2022-02-14 16:38:21,171 idom 501 from label 703
DEBUG 2022-02-14 16:38:21,171 find_def_from_bottom label 501
DEBUG 2022-02-14 16:38:21,171 find_def_from_top label 501
DEBUG 2022-02-14 16:38:21,171 idom 50 from label 501
DEBUG 2022-02-14 16:38:21,171 find_def_from_bottom label 50
DEBUG 2022-02-14 16:38:21,171 find_def_from_top label 50
DEBUG 2022-02-14 16:38:21,171 idom 42 from label 50
DEBUG 2022-02-14 16:38:21,171 find_def_from_bottom label 42
DEBUG 2022-02-14 16:38:21,171 find_def_from_top label 42
DEBUG 2022-02-14 16:38:21,171 idom 40 from label 42
DEBUG 2022-02-14 16:38:21,171 find_def_from_bottom label 40
DEBUG 2022-02-14 16:38:21,171 replaced with: H__batch_2.2[0] = $444inplace_add.33
DEBUG 2022-02-14 16:38:21,171 on stmt: jump 777
DEBUG 2022-02-14 16:38:21,171 ==== SSA block rewrite pass on 501
DEBUG 2022-02-14 16:38:21,171 Running <numba.core.ssa._FixSSAVars object at 0x7fa041d36ee0>
DEBUG 2022-02-14 16:38:21,171 on stmt: $262for_iter.2 = iternext(value=$260get_iter.29)
DEBUG 2022-02-14 16:38:21,171 on stmt: $i.1405 = pair_first(value=$262for_iter.2)
DEBUG 2022-02-14 16:38:21,171 on stmt: $262for_iter.4 = pair_second(value=$262for_iter.2)
DEBUG 2022-02-14 16:38:21,171 on stmt: branch $262for_iter.4, 675, 703
DEBUG 2022-02-14 16:38:21,171 ==== SSA block rewrite pass on 1021
DEBUG 2022-02-14 16:38:21,171 Running <numba.core.ssa._FixSSAVars object at 0x7fa041d36ee0>
DEBUG 2022-02-14 16:38:21,172 on stmt: $596binary_subscr.6 = getitem(value=Hnew, index=$N_det.1409, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:21,172 on stmt: $602binary_multiply.9 = n_det_binom_prod * plus_minus.1
DEBUG 2022-02-14 16:38:21,172 on stmt: $610binary_floor_divide.13 = N // $const608.12
DEBUG 2022-02-14 16:38:21,172 on stmt: $612binary_subscr.14 = getitem(value=f_even, index=$610binary_floor_divide.13, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:21,172 on stmt: $614binary_multiply.15 = $602binary_multiply.9 * $612binary_subscr.14
DEBUG 2022-02-14 16:38:21,172 on stmt: $616inplace_add.16 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$596binary_subscr.6, rhs=$614binary_multiply.15, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:38:21,172 on stmt: Hnew[$N_det.1409] = $616inplace_add.16
DEBUG 2022-02-14 16:38:21,172 on stmt: jump 1062
DEBUG 2022-02-14 16:38:21,172 ==== SSA block rewrite pass on 1060
DEBUG 2022-02-14 16:38:21,172 Running <numba.core.ssa._FixSSAVars object at 0x7fa041d36ee0>
DEBUG 2022-02-14 16:38:21,172 on stmt: $630binary_subscr.6 = getitem(value=Hnew, index=$N_det.1409, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:21,172 on stmt: $636binary_multiply.9 = n_det_binom_prod * plus_minus.1
DEBUG 2022-02-14 16:38:21,172 on stmt: $642binary_subscr.12 = getitem(value=f_odd, index=N, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:21,172 on stmt: $644binary_multiply.13 = $636binary_multiply.9 * $642binary_subscr.12
DEBUG 2022-02-14 16:38:21,172 on stmt: $646inplace_add.14 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$630binary_subscr.6, rhs=$644binary_multiply.13, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:38:21,172 on stmt: Hnew[$N_det.1409] = $646inplace_add.14
DEBUG 2022-02-14 16:38:21,172 on stmt: jump 1062
DEBUG 2022-02-14 16:38:21,172 ==== SSA block rewrite pass on 1117
DEBUG 2022-02-14 16:38:21,172 Running <numba.core.ssa._FixSSAVars object at 0x7fa041d36ee0>
DEBUG 2022-02-14 16:38:21,173 on stmt: jump 40
DEBUG 2022-02-14 16:38:21,173 Fix SSA violator on var binom_prod.2
DEBUG 2022-02-14 16:38:21,173 ==== SSA block rewrite pass on 0
DEBUG 2022-02-14 16:38:21,173 Running <numba.core.ssa._FreshVarHandler object at 0x7fa041d363d0>
DEBUG 2022-02-14 16:38:21,173 on stmt: sched.2060 = arg(0, name=sched)
DEBUG 2022-02-14 16:38:21,173 on stmt: _170binary__add_75 = arg(1, name=_170binary__add_75)
DEBUG 2022-02-14 16:38:21,173 on stmt: A = arg(2, name=A)
DEBUG 2022-02-14 16:38:21,173 on stmt: D = arg(3, name=D)
DEBUG 2022-02-14 16:38:21,173 on stmt: N__fixed = arg(4, name=N__fixed)
DEBUG 2022-02-14 16:38:21,173 on stmt: N__max = arg(5, name=N__max)
DEBUG 2022-02-14 16:38:21,173 on stmt: batch__max = arg(6, name=batch__max)
DEBUG 2022-02-14 16:38:21,173 on stmt: binoms = arg(7, name=binoms)
DEBUG 2022-02-14 16:38:21,173 on stmt: edge__reps = arg(8, name=edge__reps)
DEBUG 2022-02-14 16:38:21,173 on stmt: edge__reps__size0_1303 = arg(9, name=edge__reps__size0_1303)
DEBUG 2022-02-14 16:38:21,173 on stmt: even__cutoff = arg(10, name=even__cutoff)
DEBUG 2022-02-14 16:38:21,173 on stmt: glynn = arg(11, name=glynn)
DEBUG 2022-02-14 16:38:21,173 on stmt: n = arg(12, name=n)
DEBUG 2022-02-14 16:38:21,173 on stmt: oddV = arg(13, name=oddV)
DEBUG 2022-02-14 16:38:21,173 on stmt: oddV0 = arg(14, name=oddV0)
DEBUG 2022-02-14 16:38:21,173 on stmt: oddloop = arg(15, name=oddloop)
DEBUG 2022-02-14 16:38:21,173 on stmt: oddloop0 = arg(16, name=oddloop0)
DEBUG 2022-02-14 16:38:21,173 on stmt: H__batch_2__arr = arg(17, name=H__batch_2__arr)
DEBUG 2022-02-14 16:38:21,173 on stmt: $2load_global.0.2061 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:38:21,174 on stmt: $4load_method.1.2062 = getattr(value=$2load_global.0.2061, attr=copy)
DEBUG 2022-02-14 16:38:21,174 on stmt: H__batch_2 = call $4load_method.1.2062(H__batch_2__arr, func=$4load_method.1.2062, args=[Var(H__batch_2__arr, <string>:2)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:21,174 on stmt: $12load_global.4.2063 = global(range: <class 'range'>)
DEBUG 2022-02-14 16:38:21,174 on stmt: $const16.6.2064 = const(int, 0)
DEBUG 2022-02-14 16:38:21,174 on stmt: $18binary_subscr.7.2065 = getitem(value=sched.2060, index=$const16.6.2064, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:21,174 on stmt: $const22.9.2066 = const(int, 1)
DEBUG 2022-02-14 16:38:21,174 on stmt: $24binary_subscr.10.2067 = getitem(value=sched.2060, index=$const22.9.2066, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:21,174 on stmt: $26load_global.11.2068 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:38:21,174 on stmt: $28load_method.12.2069 = getattr(value=$26load_global.11.2068, attr=uint8)
DEBUG 2022-02-14 16:38:21,174 on stmt: $const30.13.2070 = const(int, 1)
DEBUG 2022-02-14 16:38:21,174 on stmt: $32call_method.14.2071 = call $28load_method.12.2069($const30.13.2070, func=$28load_method.12.2069, args=[Var($const30.13.2070, <string>:3)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:21,174 on stmt: $34binary_add.15.2072 = $24binary_subscr.10.2067 + $32call_method.14.2071
DEBUG 2022-02-14 16:38:21,174 on stmt: $36call_function.16.2073 = call $12load_global.4.2063($18binary_subscr.7.2065, $34binary_add.15.2072, func=$12load_global.4.2063, args=[Var($18binary_subscr.7.2065, <string>:3), Var($34binary_add.15.2072, <string>:3)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:21,174 on stmt: $38get_iter.17.2074 = getiter(value=$36call_function.16.2073)
DEBUG 2022-02-14 16:38:21,174 on stmt: $phi40.0.2075 = $38get_iter.17.2074
DEBUG 2022-02-14 16:38:21,174 on stmt: bool296 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:38:21,174 on stmt: msg.1313 = const(str, Sizes of kept_edges, edge_reps do not match on /home/adi/GBS/gbs/loop_hafnian_batch.py (114))
DEBUG 2022-02-14 16:38:21,174 on stmt: assert.1314 = global(assert_equiv: <intrinsic assert_equiv>)
DEBUG 2022-02-14 16:38:21,174 on stmt: $np_g_var.1367 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:38:21,175 on stmt: $empty_attr_attr.1368 = getattr(value=$np_g_var.1367, attr=empty)
DEBUG 2022-02-14 16:38:21,175 on stmt: $np_typ_var.1369 = getattr(value=$np_g_var.1367, attr=int64)
DEBUG 2022-02-14 16:38:21,175 on stmt: delta = call $empty_attr_attr.1368(edge__reps__size0_1303, $np_typ_var.1369, func=$empty_attr_attr.1368, args=[Var(edge__reps__size0_1303, loop_hafnian_batch.py:95), Var($np_typ_var.1369, loop_hafnian_batch.py:114)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:21,175 on stmt: msg.1344 = const(str, Sizes of H_batch.2, Hnew do not match on /home/adi/GBS/gbs/loop_hafnian_batch.py (142))
DEBUG 2022-02-14 16:38:21,175 on stmt: assert.1345 = global(assert_equiv: <intrinsic assert_equiv>)
DEBUG 2022-02-14 16:38:21,175 on stmt: $318load_global.1 = global(get_submatrices: CPUDispatcher(<function get_submatrices at 0x7fa047ebed30>))
DEBUG 2022-02-14 16:38:21,175 on stmt: $340load_global.12 = global(eigvals: CPUDispatcher(<function eigvals at 0x7fa047e5d430>))
DEBUG 2022-02-14 16:38:21,175 on stmt: $const350.16 = const(int, 0)
DEBUG 2022-02-14 16:38:21,175 on stmt: $const354.18 = const(int, 0)
DEBUG 2022-02-14 16:38:21,175 on stmt: bool358 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:38:21,175 on stmt: $const364.2 = const(int, 1)
DEBUG 2022-02-14 16:38:21,175 on stmt: $const368.4 = const(int, 0)
DEBUG 2022-02-14 16:38:21,175 on stmt: bool372 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:38:21,175 on stmt: $450load_global.1 = global(f_loop: CPUDispatcher(<function f_loop at 0x7fa047ebe9d0>))
DEBUG 2022-02-14 16:38:21,175 on stmt: $466load_global.8 = global(f_loop_odd: CPUDispatcher(<function f_loop_odd at 0x7fa047ebeb80>))
DEBUG 2022-02-14 16:38:21,176 on stmt: $486load_global.17 = global(range: <class 'range'>)
DEBUG 2022-02-14 16:38:21,176 on stmt: $const488.18 = const(int, 2)
DEBUG 2022-02-14 16:38:21,176 on stmt: $const492.20 = const(int, 0)
DEBUG 2022-02-14 16:38:21,176 on stmt: $const498.23 = const(int, 1)
DEBUG 2022-02-14 16:38:21,176 on stmt: $const502.25 = const(int, 2)
DEBUG 2022-02-14 16:38:21,176 on stmt: $506binary_multiply.27 = $const502.25 * batch__max
DEBUG 2022-02-14 16:38:21,176 on stmt: $510binary_add.29 = $506binary_multiply.27 + even__cutoff
DEBUG 2022-02-14 16:38:21,176 on stmt: $const512.30 = const(int, 2)
DEBUG 2022-02-14 16:38:21,176 on stmt: $514binary_add.31 = $510binary_add.29 + $const512.30
DEBUG 2022-02-14 16:38:21,176 on stmt: $const202.4 = const(int, 2)
DEBUG 2022-02-14 16:38:21,176 on stmt: $206binary_multiply.6 = $const202.4 * batch__max
DEBUG 2022-02-14 16:38:21,176 on stmt: $210binary_add.8 = $206binary_multiply.6 + even__cutoff
DEBUG 2022-02-14 16:38:21,176 on stmt: $const212.9 = const(int, 2)
DEBUG 2022-02-14 16:38:21,176 on stmt: $214binary_add.10 = $210binary_add.8 + $const212.9
DEBUG 2022-02-14 16:38:21,176 on stmt: $226load_global.15 = global(find_kept_edges: CPUDispatcher(<function find_kept_edges at 0x7fa047ebe790>))
DEBUG 2022-02-14 16:38:21,176 on stmt: $np_g_var.1362 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:38:21,176 on stmt: $empty_attr_attr.1363 = getattr(value=$np_g_var.1362, attr=empty)
DEBUG 2022-02-14 16:38:21,176 on stmt: $np_typ_var.1364 = getattr(value=$np_g_var.1362, attr=complex128)
DEBUG 2022-02-14 16:38:21,176 on stmt: Hnew = call $empty_attr_attr.1363($214binary_add.10, $np_typ_var.1364, func=$empty_attr_attr.1363, args=[Var($214binary_add.10, loop_hafnian_batch.py:104), Var($np_typ_var.1364, loop_hafnian_batch.py:104)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:21,177 on stmt: binom_prod = const(float, 1.0)
DEBUG 2022-02-14 16:38:21,177 on stmt: $248load_global.23 = global(range: <class 'range'>)
DEBUG 2022-02-14 16:38:21,177 on stmt: $const250.24 = const(int, 1)
DEBUG 2022-02-14 16:38:21,177 on stmt: $const254.26 = const(int, 2)
DEBUG 2022-02-14 16:38:21,177 on stmt: $256binary_floor_divide.27 = n // $const254.26
DEBUG 2022-02-14 16:38:21,177 on stmt: $const532.6 = const(int, -1)
DEBUG 2022-02-14 16:38:21,177 on stmt: $const536.8 = const(int, 2)
DEBUG 2022-02-14 16:38:21,177 on stmt: $const552.15 = const(int, 1)
DEBUG 2022-02-14 16:38:21,177 on stmt: $const556.17 = const(int, 2)
DEBUG 2022-02-14 16:38:21,177 on stmt: $const562.20 = const(int, 0)
DEBUG 2022-02-14 16:38:21,177 on stmt: $const578.27 = const(int, 2)
DEBUG 2022-02-14 16:38:21,177 on stmt: $const582.29 = const(int, 0)
DEBUG 2022-02-14 16:38:21,177 on stmt: bool586 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:38:21,177 on stmt: $376load_global.1 = global(get_submatrix_batch_odd0: CPUDispatcher(<function get_submatrix_batch_odd0 at 0x7fa047ebef70>))
DEBUG 2022-02-14 16:38:21,177 on stmt: $const386.5 = const(int, -1)
DEBUG 2022-02-14 16:38:21,177 on stmt: $const390.7 = const(int, 2)
DEBUG 2022-02-14 16:38:21,177 on stmt: $392binary_floor_divide.8 = N__fixed // $const390.7
DEBUG 2022-02-14 16:38:21,177 on stmt: $402load_global.12 = global(f_loop_odd: CPUDispatcher(<function f_loop_odd at 0x7fa047ebeb80>))
DEBUG 2022-02-14 16:38:21,177 on stmt: $const428.24 = const(int, 0)
DEBUG 2022-02-14 16:38:21,177 on stmt: $const608.12 = const(int, 2)
DEBUG 2022-02-14 16:38:21,177 on stmt: jump 40
DEBUG 2022-02-14 16:38:21,177 ==== SSA block rewrite pass on 40
DEBUG 2022-02-14 16:38:21,177 Running <numba.core.ssa._FreshVarHandler object at 0x7fa041d363d0>
DEBUG 2022-02-14 16:38:21,178 on stmt: H__batch_2.2 = phi(incoming_values=[Var(H__batch_2, <string>:2), Var(H__batch_2.1, loop_hafnian_batch.py:142)], incoming_blocks=[0, 1117])
DEBUG 2022-02-14 16:38:21,178 on stmt: $40for_iter.1.2076 = iternext(value=$phi40.0.2075)
DEBUG 2022-02-14 16:38:21,178 on stmt: $40for_iter.2.2077 = pair_first(value=$40for_iter.1.2076)
DEBUG 2022-02-14 16:38:21,178 on stmt: $40for_iter.3.2078 = pair_second(value=$40for_iter.1.2076)
DEBUG 2022-02-14 16:38:21,178 on stmt: $phi42.1.2079 = $40for_iter.2.2077
DEBUG 2022-02-14 16:38:21,178 on stmt: branch $40for_iter.3.2078, 42, 1224
DEBUG 2022-02-14 16:38:21,178 ==== SSA block rewrite pass on 42
DEBUG 2022-02-14 16:38:21,178 Running <numba.core.ssa._FreshVarHandler object at 0x7fa041d363d0>
DEBUG 2022-02-14 16:38:21,178 on stmt: parfor__index_1383 = $phi42.1.2079
DEBUG 2022-02-14 16:38:21,178 on stmt: jump 50
DEBUG 2022-02-14 16:38:21,178 ==== SSA block rewrite pass on 1224
DEBUG 2022-02-14 16:38:21,178 Running <numba.core.ssa._FreshVarHandler object at 0x7fa041d363d0>
DEBUG 2022-02-14 16:38:21,178 on stmt: $const52.1.2080 = const(NoneType, None)
DEBUG 2022-02-14 16:38:21,178 on stmt: $const54.2.2081 = const(NoneType, None)
DEBUG 2022-02-14 16:38:21,178 on stmt: $56build_slice.3.2082 = global(slice: <class 'slice'>)
DEBUG 2022-02-14 16:38:21,178 on stmt: $56build_slice.4.2083 = call $56build_slice.3.2082($const52.1.2080, $const54.2.2081, func=$56build_slice.3.2082, args=(Var($const52.1.2080, <string>:5), Var($const54.2.2081, <string>:5)), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:21,178 on stmt: $58binary_subscr.5.2084 = getitem(value=H__batch_2.2, index=$56build_slice.4.2083, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:21,178 on stmt: $const62.7.2085 = const(NoneType, None)
DEBUG 2022-02-14 16:38:21,178 on stmt: $const64.8.2086 = const(NoneType, None)
DEBUG 2022-02-14 16:38:21,178 on stmt: $66build_slice.9.2087 = global(slice: <class 'slice'>)
DEBUG 2022-02-14 16:38:21,178 on stmt: $66build_slice.10.2088 = call $66build_slice.9.2087($const62.7.2085, $const64.8.2086, func=$66build_slice.9.2087, args=(Var($const62.7.2085, <string>:5), Var($const64.8.2086, <string>:5)), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:21,179 on stmt: H__batch_2__arr[$66build_slice.10.2088] = $58binary_subscr.5.2084
DEBUG 2022-02-14 16:38:21,179 on stmt: $const70.11.2089 = const(NoneType, None)
DEBUG 2022-02-14 16:38:21,179 on stmt: $72return_value.12.2090 = cast(value=$const70.11.2089)
DEBUG 2022-02-14 16:38:21,179 on stmt: return $72return_value.12.2090
DEBUG 2022-02-14 16:38:21,179 ==== SSA block rewrite pass on 1062
DEBUG 2022-02-14 16:38:21,179 Running <numba.core.ssa._FreshVarHandler object at 0x7fa041d363d0>
DEBUG 2022-02-14 16:38:21,179 on stmt: jump 1003
DEBUG 2022-02-14 16:38:21,179 ==== SSA block rewrite pass on 675
DEBUG 2022-02-14 16:38:21,179 Running <numba.core.ssa._FreshVarHandler object at 0x7fa041d363d0>
DEBUG 2022-02-14 16:38:21,179 on stmt: $274binary_subscr.7 = getitem(value=edge__reps, index=$i.1405, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:21,179 on stmt: $280binary_subscr.10 = getitem(value=kept_edges, index=$i.1405, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:21,179 on stmt: $282build_tuple.11 = build_tuple(items=[Var($274binary_subscr.7, loop_hafnian_batch.py:111), Var($280binary_subscr.10, loop_hafnian_batch.py:111)])
DEBUG 2022-02-14 16:38:21,179 on stmt: $284binary_subscr.12 = getitem(value=binoms, index=$282build_tuple.11, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:21,179 on stmt: $binom_prod.2.1826 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=binom_prod.2, rhs=$284binary_subscr.12, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:38:21,179 on stmt: binom_prod.2 = $binom_prod.2.1826
DEBUG 2022-02-14 16:38:21,179 first assign: binom_prod.2
DEBUG 2022-02-14 16:38:21,179 replaced with: binom_prod.2 = $binom_prod.2.1826
DEBUG 2022-02-14 16:38:21,179 on stmt: jump 501
DEBUG 2022-02-14 16:38:21,179 ==== SSA block rewrite pass on 703
DEBUG 2022-02-14 16:38:21,179 Running <numba.core.ssa._FreshVarHandler object at 0x7fa041d363d0>
DEBUG 2022-02-14 16:38:21,179 on stmt: $296pred = call bool296(glynn, func=bool296, args=(Var(glynn, loop_hafnian_batch.py:83),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:21,180 on stmt: branch $296pred, 707, 717
DEBUG 2022-02-14 16:38:21,180 ==== SSA block rewrite pass on 707
DEBUG 2022-02-14 16:38:21,180 Running <numba.core.ssa._FreshVarHandler object at 0x7fa041d363d0>
DEBUG 2022-02-14 16:38:21,180 on stmt: ret.1315 = call assert.1314(msg.1313, kept_edges_size0.1311, edge__reps__size0_1303, func=assert.1314, args=[Var(msg.1313, loop_hafnian_batch.py:114), Var(kept_edges_size0.1311, loop_hafnian_batch.py:106), Var(edge__reps__size0_1303, loop_hafnian_batch.py:95)], kws={}, vararg=None, target=None)
DEBUG 2022-02-14 16:38:21,180 on stmt: id=14[LoopNest(index_variable = parfor_index.1366, range = (0, edge__reps__size0_1303, 1))]{1223: <ir.Block at /home/adi/GBS/gbs/loop_hafnian_batch.py (114)>}Var(parfor_index.1366, loop_hafnian_batch.py:114)
DEBUG 2022-02-14 16:38:21,180 on stmt: delta.2 = delta
DEBUG 2022-02-14 16:38:21,180 on stmt: jump 723
DEBUG 2022-02-14 16:38:21,180 ==== SSA block rewrite pass on 717
DEBUG 2022-02-14 16:38:21,180 Running <numba.core.ssa._FreshVarHandler object at 0x7fa041d363d0>
DEBUG 2022-02-14 16:38:21,180 on stmt: delta.2 = kept_edges
DEBUG 2022-02-14 16:38:21,180 on stmt: jump 723
DEBUG 2022-02-14 16:38:21,180 ==== SSA block rewrite pass on 1078
DEBUG 2022-02-14 16:38:21,180 Running <numba.core.ssa._FreshVarHandler object at 0x7fa041d363d0>
DEBUG 2022-02-14 16:38:21,180 on stmt: ret.1346 = call assert.1345(msg.1344, _170binary__add_75, $214binary_add.10, func=assert.1345, args=[Var(msg.1344, loop_hafnian_batch.py:142), Var(_170binary__add_75, loop_hafnian_batch.py:101), Var($214binary_add.10, loop_hafnian_batch.py:104)], kws={}, vararg=None, target=None)
DEBUG 2022-02-14 16:38:21,180 on stmt: $H_batch.2.1827 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=H__batch_2.2, rhs=Hnew, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:38:21,180 on stmt: H__batch_2.1 = $H_batch.2.1827
DEBUG 2022-02-14 16:38:21,180 on stmt: jump 1117
DEBUG 2022-02-14 16:38:21,181 ==== SSA block rewrite pass on 723
DEBUG 2022-02-14 16:38:21,181 Running <numba.core.ssa._FreshVarHandler object at 0x7fa041d363d0>
DEBUG 2022-02-14 16:38:21,181 on stmt: $328call_function.6 = call $318load_global.1(delta.2, A, D, oddV, func=$318load_global.1, args=[Var(delta.2, loop_hafnian_batch.py:118), Var(A, loop_hafnian_batch.py:83), Var(D, loop_hafnian_batch.py:83), Var(oddV, loop_hafnian_batch.py:84)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:21,181 on stmt: $330unpack_sequence.11 = exhaust_iter(value=$328call_function.6, count=4)
DEBUG 2022-02-14 16:38:21,181 on stmt: $AX_S.1399 = static_getitem(value=$330unpack_sequence.11, index=0, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:21,181 on stmt: $XD_S.1397 = static_getitem(value=$330unpack_sequence.11, index=1, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:21,181 on stmt: $D_S.1404 = static_getitem(value=$330unpack_sequence.11, index=2, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:21,181 on stmt: $oddVX_S.1398 = static_getitem(value=$330unpack_sequence.11, index=3, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:21,181 on stmt: E = call $340load_global.12($AX_S.1399, func=$340load_global.12, args=[Var($AX_S.1399, loop_hafnian_batch.py:118)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:21,181 on stmt: $352binary_subscr.17 = static_getitem(value=kept_edges, index=0, index_var=$const350.16, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:21,181 on stmt: $356compare_op.19 = $352binary_subscr.17 == $const354.18
DEBUG 2022-02-14 16:38:21,181 on stmt: $358pred = call bool358($356compare_op.19, func=bool358, args=(Var($356compare_op.19, loop_hafnian_batch.py:122),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:21,181 on stmt: branch $358pred, 737, 777
DEBUG 2022-02-14 16:38:21,181 ==== SSA block rewrite pass on 737
DEBUG 2022-02-14 16:38:21,181 Running <numba.core.ssa._FreshVarHandler object at 0x7fa041d363d0>
DEBUG 2022-02-14 16:38:21,181 on stmt: $366binary_subscr.3 = static_getitem(value=kept_edges, index=1, index_var=$const364.2, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:21,181 on stmt: $370compare_op.5 = $366binary_subscr.3 == $const368.4
DEBUG 2022-02-14 16:38:21,181 on stmt: $372pred = call bool372($370compare_op.5, func=bool372, args=(Var($370compare_op.5, loop_hafnian_batch.py:122),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:21,181 on stmt: branch $372pred, 739, 777
DEBUG 2022-02-14 16:38:21,182 ==== SSA block rewrite pass on 777
DEBUG 2022-02-14 16:38:21,182 Running <numba.core.ssa._FreshVarHandler object at 0x7fa041d363d0>
DEBUG 2022-02-14 16:38:21,182 on stmt: f_even = call $450load_global.1(E, $AX_S.1399, $XD_S.1397, $D_S.1404, N__max, func=$450load_global.1, args=[Var(E, loop_hafnian_batch.py:120), Var($AX_S.1399, loop_hafnian_batch.py:118), Var($XD_S.1397, loop_hafnian_batch.py:118), Var($D_S.1404, loop_hafnian_batch.py:118), Var(N__max, loop_hafnian_batch.py:93)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:21,182 on stmt: f_odd = call $466load_global.8(E, $AX_S.1399, $XD_S.1397, $D_S.1404, N__max, oddloop, $oddVX_S.1398, func=$466load_global.8, args=[Var(E, loop_hafnian_batch.py:120), Var($AX_S.1399, loop_hafnian_batch.py:118), Var($XD_S.1397, loop_hafnian_batch.py:118), Var($D_S.1404, loop_hafnian_batch.py:118), Var(N__max, loop_hafnian_batch.py:93), Var(oddloop, loop_hafnian_batch.py:83), Var($oddVX_S.1398, loop_hafnian_batch.py:118)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:21,182 on stmt: $494binary_subscr.21 = static_getitem(value=kept_edges, index=0, index_var=$const492.20, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:21,182 on stmt: $496binary_multiply.22 = $const488.18 * $494binary_subscr.21
DEBUG 2022-02-14 16:38:21,182 on stmt: $500binary_add.24 = $496binary_multiply.22 + $const498.23
DEBUG 2022-02-14 16:38:21,182 on stmt: $516call_function.32 = call $486load_global.17($500binary_add.24, $514binary_add.31, func=$486load_global.17, args=[Var($500binary_add.24, loop_hafnian_batch.py:131), Var($514binary_add.31, loop_hafnian_batch.py:131)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:21,182 on stmt: $518get_iter.33 = getiter(value=$516call_function.32)
DEBUG 2022-02-14 16:38:21,182 on stmt: jump 1003
DEBUG 2022-02-14 16:38:21,182 ==== SSA block rewrite pass on 1003
DEBUG 2022-02-14 16:38:21,182 Running <numba.core.ssa._FreshVarHandler object at 0x7fa041d363d0>
DEBUG 2022-02-14 16:38:21,182 on stmt: $520for_iter.2 = iternext(value=$518get_iter.33)
DEBUG 2022-02-14 16:38:21,182 on stmt: $N_det.1409 = pair_first(value=$520for_iter.2)
DEBUG 2022-02-14 16:38:21,182 on stmt: $520for_iter.4 = pair_second(value=$520for_iter.2)
DEBUG 2022-02-14 16:38:21,182 on stmt: branch $520for_iter.4, 1005, 1078
DEBUG 2022-02-14 16:38:21,182 ==== SSA block rewrite pass on 50
DEBUG 2022-02-14 16:38:21,183 Running <numba.core.ssa._FreshVarHandler object at 0x7fa041d363d0>
DEBUG 2022-02-14 16:38:21,183 on stmt: j = parfor__index_1383
DEBUG 2022-02-14 16:38:21,183 on stmt: id=13[LoopNest(index_variable = parfor_index.1361, range = (0, $214binary_add.10, 1))]{1222: <ir.Block at /home/adi/GBS/gbs/loop_hafnian_batch.py (104)>}Var(parfor_index.1361, loop_hafnian_batch.py:104)
DEBUG 2022-02-14 16:38:21,183 on stmt: kept_edges = call $226load_global.15(j, edge__reps, func=$226load_global.15, args=[Var(j, loop_hafnian_batch.py:102), Var(edge__reps, loop_hafnian_batch.py:95)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:21,183 on stmt: kept_edges_shape.1310 = getattr(value=kept_edges, attr=shape)
DEBUG 2022-02-14 16:38:21,183 on stmt: kept_edges_size0.1311 = static_getitem(value=kept_edges_shape.1310, index=0, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:21,183 on stmt: binom_prod.2 = binom_prod
DEBUG 2022-02-14 16:38:21,183 replaced with: binom_prod.2.1 = binom_prod
DEBUG 2022-02-14 16:38:21,183 on stmt: id=18[LoopNest(index_variable = parfor_index.1381, range = (0, kept_edges_size0.1311, 1))]{573: <ir.Block at /home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numba/parfors/parfor.py (256)>}Var(parfor_index.1381, parfor.py:256)
DEBUG 2022-02-14 16:38:21,183 on stmt: $258call_function.28 = call $248load_global.23($const250.24, $256binary_floor_divide.27, func=$248load_global.23, args=[Var($const250.24, loop_hafnian_batch.py:110), Var($256binary_floor_divide.27, loop_hafnian_batch.py:110)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:21,183 on stmt: $260get_iter.29 = getiter(value=$258call_function.28)
DEBUG 2022-02-14 16:38:21,183 on stmt: jump 501
DEBUG 2022-02-14 16:38:21,183 ==== SSA block rewrite pass on 1005
DEBUG 2022-02-14 16:38:21,183 Running <numba.core.ssa._FreshVarHandler object at 0x7fa041d363d0>
DEBUG 2022-02-14 16:38:21,183 on stmt: N = N__fixed + $N_det.1409
DEBUG 2022-02-14 16:38:21,183 on stmt: $538binary_floor_divide.9 = N // $const536.8
DEBUG 2022-02-14 16:38:21,183 on stmt: $542binary_subtract.11 = $538binary_floor_divide.9 - val.1149
DEBUG 2022-02-14 16:38:21,183 on stmt: plus_minus.1 = $const532.6 ** $542binary_subtract.11
DEBUG 2022-02-14 16:38:21,183 on stmt: $554binary_subtract.16 = $N_det.1409 - $const552.15
DEBUG 2022-02-14 16:38:21,184 on stmt: $558binary_floor_divide.18 = $554binary_subtract.16 // $const556.17
DEBUG 2022-02-14 16:38:21,184 on stmt: $564binary_subscr.21 = static_getitem(value=kept_edges, index=0, index_var=$const562.20, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:21,184 on stmt: $566build_tuple.22 = build_tuple(items=[Var($558binary_floor_divide.18, loop_hafnian_batch.py:135), Var($564binary_subscr.21, loop_hafnian_batch.py:135)])
DEBUG 2022-02-14 16:38:21,184 on stmt: $568binary_subscr.23 = getitem(value=binoms, index=$566build_tuple.22, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:21,184 on stmt: n_det_binom_prod = $568binary_subscr.23 * binom_prod.2
DEBUG 2022-02-14 16:38:21,184 on stmt: $580binary_modulo.28 = N % $const578.27
DEBUG 2022-02-14 16:38:21,184 on stmt: $584compare_op.30 = $580binary_modulo.28 == $const582.29
DEBUG 2022-02-14 16:38:21,184 on stmt: $586pred = call bool586($584compare_op.30, func=bool586, args=(Var($584compare_op.30, loop_hafnian_batch.py:137),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:21,184 on stmt: branch $586pred, 1021, 1060
DEBUG 2022-02-14 16:38:21,184 ==== SSA block rewrite pass on 739
DEBUG 2022-02-14 16:38:21,184 Running <numba.core.ssa._FreshVarHandler object at 0x7fa041d363d0>
DEBUG 2022-02-14 16:38:21,184 on stmt: oddVX_S0 = call $376load_global.1(delta.2, oddV0, func=$376load_global.1, args=[Var(delta.2, loop_hafnian_batch.py:118), Var(oddV0, loop_hafnian_batch.py:89)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:21,184 on stmt: $396binary_subtract.10 = $392binary_floor_divide.8 - val.1149
DEBUG 2022-02-14 16:38:21,184 on stmt: plus_minus = $const386.5 ** $396binary_subtract.10
DEBUG 2022-02-14 16:38:21,184 on stmt: $418call_function.20 = call $402load_global.12(E, $AX_S.1399, $XD_S.1397, $D_S.1404, N__fixed, oddloop0, oddVX_S0, func=$402load_global.12, args=[Var(E, loop_hafnian_batch.py:120), Var($AX_S.1399, loop_hafnian_batch.py:118), Var($XD_S.1397, loop_hafnian_batch.py:118), Var($D_S.1404, loop_hafnian_batch.py:118), Var(N__fixed, loop_hafnian_batch.py:92), Var(oddloop0, loop_hafnian_batch.py:88), Var(oddVX_S0, loop_hafnian_batch.py:123)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:21,184 on stmt: f = getitem(value=$418call_function.20, index=N__fixed, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:21,184 on stmt: $432binary_subscr.27 = static_getitem(value=H__batch_2.2, index=0, index_var=$const428.24, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:21,184 on stmt: $438binary_multiply.30 = binom_prod.2 * plus_minus
DEBUG 2022-02-14 16:38:21,184 on stmt: $442binary_multiply.32 = $438binary_multiply.30 * f
DEBUG 2022-02-14 16:38:21,185 on stmt: $444inplace_add.33 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$432binary_subscr.27, rhs=$442binary_multiply.32, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:38:21,185 on stmt: H__batch_2.2[0] = $444inplace_add.33
DEBUG 2022-02-14 16:38:21,185 on stmt: jump 777
DEBUG 2022-02-14 16:38:21,185 ==== SSA block rewrite pass on 501
DEBUG 2022-02-14 16:38:21,185 Running <numba.core.ssa._FreshVarHandler object at 0x7fa041d363d0>
DEBUG 2022-02-14 16:38:21,185 on stmt: $262for_iter.2 = iternext(value=$260get_iter.29)
DEBUG 2022-02-14 16:38:21,185 on stmt: $i.1405 = pair_first(value=$262for_iter.2)
DEBUG 2022-02-14 16:38:21,185 on stmt: $262for_iter.4 = pair_second(value=$262for_iter.2)
DEBUG 2022-02-14 16:38:21,185 on stmt: branch $262for_iter.4, 675, 703
DEBUG 2022-02-14 16:38:21,185 ==== SSA block rewrite pass on 1021
DEBUG 2022-02-14 16:38:21,185 Running <numba.core.ssa._FreshVarHandler object at 0x7fa041d363d0>
DEBUG 2022-02-14 16:38:21,185 on stmt: $596binary_subscr.6 = getitem(value=Hnew, index=$N_det.1409, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:21,185 on stmt: $602binary_multiply.9 = n_det_binom_prod * plus_minus.1
DEBUG 2022-02-14 16:38:21,185 on stmt: $610binary_floor_divide.13 = N // $const608.12
DEBUG 2022-02-14 16:38:21,185 on stmt: $612binary_subscr.14 = getitem(value=f_even, index=$610binary_floor_divide.13, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:21,185 on stmt: $614binary_multiply.15 = $602binary_multiply.9 * $612binary_subscr.14
DEBUG 2022-02-14 16:38:21,185 on stmt: $616inplace_add.16 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$596binary_subscr.6, rhs=$614binary_multiply.15, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:38:21,185 on stmt: Hnew[$N_det.1409] = $616inplace_add.16
DEBUG 2022-02-14 16:38:21,185 on stmt: jump 1062
DEBUG 2022-02-14 16:38:21,185 ==== SSA block rewrite pass on 1060
DEBUG 2022-02-14 16:38:21,185 Running <numba.core.ssa._FreshVarHandler object at 0x7fa041d363d0>
DEBUG 2022-02-14 16:38:21,185 on stmt: $630binary_subscr.6 = getitem(value=Hnew, index=$N_det.1409, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:21,186 on stmt: $636binary_multiply.9 = n_det_binom_prod * plus_minus.1
DEBUG 2022-02-14 16:38:21,186 on stmt: $642binary_subscr.12 = getitem(value=f_odd, index=N, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:21,186 on stmt: $644binary_multiply.13 = $636binary_multiply.9 * $642binary_subscr.12
DEBUG 2022-02-14 16:38:21,186 on stmt: $646inplace_add.14 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$630binary_subscr.6, rhs=$644binary_multiply.13, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:38:21,186 on stmt: Hnew[$N_det.1409] = $646inplace_add.14
DEBUG 2022-02-14 16:38:21,186 on stmt: jump 1062
DEBUG 2022-02-14 16:38:21,186 ==== SSA block rewrite pass on 1117
DEBUG 2022-02-14 16:38:21,186 Running <numba.core.ssa._FreshVarHandler object at 0x7fa041d363d0>
DEBUG 2022-02-14 16:38:21,186 on stmt: jump 40
DEBUG 2022-02-14 16:38:21,186 Replaced assignments: defaultdict(<class 'list'>,
            {50: [<numba.core.ir.Assign object at 0x7fa041d23130>],
             675: [<numba.core.ir.Assign object at 0x7fa041d36580>]})
DEBUG 2022-02-14 16:38:21,186 ==== SSA block rewrite pass on 0
DEBUG 2022-02-14 16:38:21,186 Running <numba.core.ssa._FixSSAVars object at 0x7fa041d23f70>
DEBUG 2022-02-14 16:38:21,186 on stmt: sched.2060 = arg(0, name=sched)
DEBUG 2022-02-14 16:38:21,186 on stmt: _170binary__add_75 = arg(1, name=_170binary__add_75)
DEBUG 2022-02-14 16:38:21,186 on stmt: A = arg(2, name=A)
DEBUG 2022-02-14 16:38:21,186 on stmt: D = arg(3, name=D)
DEBUG 2022-02-14 16:38:21,186 on stmt: N__fixed = arg(4, name=N__fixed)
DEBUG 2022-02-14 16:38:21,186 on stmt: N__max = arg(5, name=N__max)
DEBUG 2022-02-14 16:38:21,186 on stmt: batch__max = arg(6, name=batch__max)
DEBUG 2022-02-14 16:38:21,186 on stmt: binoms = arg(7, name=binoms)
DEBUG 2022-02-14 16:38:21,187 on stmt: edge__reps = arg(8, name=edge__reps)
DEBUG 2022-02-14 16:38:21,187 on stmt: edge__reps__size0_1303 = arg(9, name=edge__reps__size0_1303)
DEBUG 2022-02-14 16:38:21,187 on stmt: even__cutoff = arg(10, name=even__cutoff)
DEBUG 2022-02-14 16:38:21,187 on stmt: glynn = arg(11, name=glynn)
DEBUG 2022-02-14 16:38:21,187 on stmt: n = arg(12, name=n)
DEBUG 2022-02-14 16:38:21,187 on stmt: oddV = arg(13, name=oddV)
DEBUG 2022-02-14 16:38:21,187 on stmt: oddV0 = arg(14, name=oddV0)
DEBUG 2022-02-14 16:38:21,187 on stmt: oddloop = arg(15, name=oddloop)
DEBUG 2022-02-14 16:38:21,187 on stmt: oddloop0 = arg(16, name=oddloop0)
DEBUG 2022-02-14 16:38:21,187 on stmt: H__batch_2__arr = arg(17, name=H__batch_2__arr)
DEBUG 2022-02-14 16:38:21,187 on stmt: $2load_global.0.2061 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:38:21,187 on stmt: $4load_method.1.2062 = getattr(value=$2load_global.0.2061, attr=copy)
DEBUG 2022-02-14 16:38:21,187 on stmt: H__batch_2 = call $4load_method.1.2062(H__batch_2__arr, func=$4load_method.1.2062, args=[Var(H__batch_2__arr, <string>:2)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:21,187 on stmt: $12load_global.4.2063 = global(range: <class 'range'>)
DEBUG 2022-02-14 16:38:21,187 on stmt: $const16.6.2064 = const(int, 0)
DEBUG 2022-02-14 16:38:21,187 on stmt: $18binary_subscr.7.2065 = getitem(value=sched.2060, index=$const16.6.2064, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:21,187 on stmt: $const22.9.2066 = const(int, 1)
DEBUG 2022-02-14 16:38:21,187 on stmt: $24binary_subscr.10.2067 = getitem(value=sched.2060, index=$const22.9.2066, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:21,187 on stmt: $26load_global.11.2068 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:38:21,187 on stmt: $28load_method.12.2069 = getattr(value=$26load_global.11.2068, attr=uint8)
DEBUG 2022-02-14 16:38:21,187 on stmt: $const30.13.2070 = const(int, 1)
DEBUG 2022-02-14 16:38:21,188 on stmt: $32call_method.14.2071 = call $28load_method.12.2069($const30.13.2070, func=$28load_method.12.2069, args=[Var($const30.13.2070, <string>:3)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:21,188 on stmt: $34binary_add.15.2072 = $24binary_subscr.10.2067 + $32call_method.14.2071
DEBUG 2022-02-14 16:38:21,188 on stmt: $36call_function.16.2073 = call $12load_global.4.2063($18binary_subscr.7.2065, $34binary_add.15.2072, func=$12load_global.4.2063, args=[Var($18binary_subscr.7.2065, <string>:3), Var($34binary_add.15.2072, <string>:3)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:21,188 on stmt: $38get_iter.17.2074 = getiter(value=$36call_function.16.2073)
DEBUG 2022-02-14 16:38:21,188 on stmt: $phi40.0.2075 = $38get_iter.17.2074
DEBUG 2022-02-14 16:38:21,188 on stmt: bool296 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:38:21,188 on stmt: msg.1313 = const(str, Sizes of kept_edges, edge_reps do not match on /home/adi/GBS/gbs/loop_hafnian_batch.py (114))
DEBUG 2022-02-14 16:38:21,188 on stmt: assert.1314 = global(assert_equiv: <intrinsic assert_equiv>)
DEBUG 2022-02-14 16:38:21,188 on stmt: $np_g_var.1367 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:38:21,188 on stmt: $empty_attr_attr.1368 = getattr(value=$np_g_var.1367, attr=empty)
DEBUG 2022-02-14 16:38:21,188 on stmt: $np_typ_var.1369 = getattr(value=$np_g_var.1367, attr=int64)
DEBUG 2022-02-14 16:38:21,188 on stmt: delta = call $empty_attr_attr.1368(edge__reps__size0_1303, $np_typ_var.1369, func=$empty_attr_attr.1368, args=[Var(edge__reps__size0_1303, loop_hafnian_batch.py:95), Var($np_typ_var.1369, loop_hafnian_batch.py:114)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:21,188 on stmt: msg.1344 = const(str, Sizes of H_batch.2, Hnew do not match on /home/adi/GBS/gbs/loop_hafnian_batch.py (142))
DEBUG 2022-02-14 16:38:21,188 on stmt: assert.1345 = global(assert_equiv: <intrinsic assert_equiv>)
DEBUG 2022-02-14 16:38:21,188 on stmt: $318load_global.1 = global(get_submatrices: CPUDispatcher(<function get_submatrices at 0x7fa047ebed30>))
DEBUG 2022-02-14 16:38:21,188 on stmt: $340load_global.12 = global(eigvals: CPUDispatcher(<function eigvals at 0x7fa047e5d430>))
DEBUG 2022-02-14 16:38:21,188 on stmt: $const350.16 = const(int, 0)
DEBUG 2022-02-14 16:38:21,188 on stmt: $const354.18 = const(int, 0)
DEBUG 2022-02-14 16:38:21,188 on stmt: bool358 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:38:21,189 on stmt: $const364.2 = const(int, 1)
DEBUG 2022-02-14 16:38:21,189 on stmt: $const368.4 = const(int, 0)
DEBUG 2022-02-14 16:38:21,189 on stmt: bool372 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:38:21,189 on stmt: $450load_global.1 = global(f_loop: CPUDispatcher(<function f_loop at 0x7fa047ebe9d0>))
DEBUG 2022-02-14 16:38:21,189 on stmt: $466load_global.8 = global(f_loop_odd: CPUDispatcher(<function f_loop_odd at 0x7fa047ebeb80>))
DEBUG 2022-02-14 16:38:21,189 on stmt: $486load_global.17 = global(range: <class 'range'>)
DEBUG 2022-02-14 16:38:21,189 on stmt: $const488.18 = const(int, 2)
DEBUG 2022-02-14 16:38:21,189 on stmt: $const492.20 = const(int, 0)
DEBUG 2022-02-14 16:38:21,189 on stmt: $const498.23 = const(int, 1)
DEBUG 2022-02-14 16:38:21,189 on stmt: $const502.25 = const(int, 2)
DEBUG 2022-02-14 16:38:21,189 on stmt: $506binary_multiply.27 = $const502.25 * batch__max
DEBUG 2022-02-14 16:38:21,189 on stmt: $510binary_add.29 = $506binary_multiply.27 + even__cutoff
DEBUG 2022-02-14 16:38:21,189 on stmt: $const512.30 = const(int, 2)
DEBUG 2022-02-14 16:38:21,189 on stmt: $514binary_add.31 = $510binary_add.29 + $const512.30
DEBUG 2022-02-14 16:38:21,189 on stmt: $const202.4 = const(int, 2)
DEBUG 2022-02-14 16:38:21,189 on stmt: $206binary_multiply.6 = $const202.4 * batch__max
DEBUG 2022-02-14 16:38:21,189 on stmt: $210binary_add.8 = $206binary_multiply.6 + even__cutoff
DEBUG 2022-02-14 16:38:21,189 on stmt: $const212.9 = const(int, 2)
DEBUG 2022-02-14 16:38:21,189 on stmt: $214binary_add.10 = $210binary_add.8 + $const212.9
DEBUG 2022-02-14 16:38:21,189 on stmt: $226load_global.15 = global(find_kept_edges: CPUDispatcher(<function find_kept_edges at 0x7fa047ebe790>))
DEBUG 2022-02-14 16:38:21,190 on stmt: $np_g_var.1362 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:38:21,190 on stmt: $empty_attr_attr.1363 = getattr(value=$np_g_var.1362, attr=empty)
DEBUG 2022-02-14 16:38:21,190 on stmt: $np_typ_var.1364 = getattr(value=$np_g_var.1362, attr=complex128)
DEBUG 2022-02-14 16:38:21,190 on stmt: Hnew = call $empty_attr_attr.1363($214binary_add.10, $np_typ_var.1364, func=$empty_attr_attr.1363, args=[Var($214binary_add.10, loop_hafnian_batch.py:104), Var($np_typ_var.1364, loop_hafnian_batch.py:104)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:21,190 on stmt: binom_prod = const(float, 1.0)
DEBUG 2022-02-14 16:38:21,190 on stmt: $248load_global.23 = global(range: <class 'range'>)
DEBUG 2022-02-14 16:38:21,190 on stmt: $const250.24 = const(int, 1)
DEBUG 2022-02-14 16:38:21,190 on stmt: $const254.26 = const(int, 2)
DEBUG 2022-02-14 16:38:21,190 on stmt: $256binary_floor_divide.27 = n // $const254.26
DEBUG 2022-02-14 16:38:21,190 on stmt: $const532.6 = const(int, -1)
DEBUG 2022-02-14 16:38:21,190 on stmt: $const536.8 = const(int, 2)
DEBUG 2022-02-14 16:38:21,190 on stmt: $const552.15 = const(int, 1)
DEBUG 2022-02-14 16:38:21,190 on stmt: $const556.17 = const(int, 2)
DEBUG 2022-02-14 16:38:21,190 on stmt: $const562.20 = const(int, 0)
DEBUG 2022-02-14 16:38:21,190 on stmt: $const578.27 = const(int, 2)
DEBUG 2022-02-14 16:38:21,190 on stmt: $const582.29 = const(int, 0)
DEBUG 2022-02-14 16:38:21,190 on stmt: bool586 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:38:21,190 on stmt: $376load_global.1 = global(get_submatrix_batch_odd0: CPUDispatcher(<function get_submatrix_batch_odd0 at 0x7fa047ebef70>))
DEBUG 2022-02-14 16:38:21,191 on stmt: $const386.5 = const(int, -1)
DEBUG 2022-02-14 16:38:21,191 on stmt: $const390.7 = const(int, 2)
DEBUG 2022-02-14 16:38:21,191 on stmt: $392binary_floor_divide.8 = N__fixed // $const390.7
DEBUG 2022-02-14 16:38:21,191 on stmt: $402load_global.12 = global(f_loop_odd: CPUDispatcher(<function f_loop_odd at 0x7fa047ebeb80>))
DEBUG 2022-02-14 16:38:21,191 on stmt: $const428.24 = const(int, 0)
DEBUG 2022-02-14 16:38:21,191 on stmt: $const608.12 = const(int, 2)
DEBUG 2022-02-14 16:38:21,191 on stmt: jump 40
DEBUG 2022-02-14 16:38:21,191 ==== SSA block rewrite pass on 40
DEBUG 2022-02-14 16:38:21,191 Running <numba.core.ssa._FixSSAVars object at 0x7fa041d23f70>
DEBUG 2022-02-14 16:38:21,191 on stmt: H__batch_2.2 = phi(incoming_values=[Var(H__batch_2, <string>:2), Var(H__batch_2.1, loop_hafnian_batch.py:142)], incoming_blocks=[0, 1117])
DEBUG 2022-02-14 16:38:21,191 on stmt: $40for_iter.1.2076 = iternext(value=$phi40.0.2075)
DEBUG 2022-02-14 16:38:21,191 on stmt: $40for_iter.2.2077 = pair_first(value=$40for_iter.1.2076)
DEBUG 2022-02-14 16:38:21,191 on stmt: $40for_iter.3.2078 = pair_second(value=$40for_iter.1.2076)
DEBUG 2022-02-14 16:38:21,191 on stmt: $phi42.1.2079 = $40for_iter.2.2077
DEBUG 2022-02-14 16:38:21,191 on stmt: branch $40for_iter.3.2078, 42, 1224
DEBUG 2022-02-14 16:38:21,191 ==== SSA block rewrite pass on 42
DEBUG 2022-02-14 16:38:21,191 Running <numba.core.ssa._FixSSAVars object at 0x7fa041d23f70>
DEBUG 2022-02-14 16:38:21,192 on stmt: parfor__index_1383 = $phi42.1.2079
DEBUG 2022-02-14 16:38:21,192 on stmt: jump 50
DEBUG 2022-02-14 16:38:21,192 ==== SSA block rewrite pass on 1224
DEBUG 2022-02-14 16:38:21,192 Running <numba.core.ssa._FixSSAVars object at 0x7fa041d23f70>
DEBUG 2022-02-14 16:38:21,192 on stmt: $const52.1.2080 = const(NoneType, None)
DEBUG 2022-02-14 16:38:21,192 on stmt: $const54.2.2081 = const(NoneType, None)
DEBUG 2022-02-14 16:38:21,192 on stmt: $56build_slice.3.2082 = global(slice: <class 'slice'>)
DEBUG 2022-02-14 16:38:21,192 on stmt: $56build_slice.4.2083 = call $56build_slice.3.2082($const52.1.2080, $const54.2.2081, func=$56build_slice.3.2082, args=(Var($const52.1.2080, <string>:5), Var($const54.2.2081, <string>:5)), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:21,192 on stmt: $58binary_subscr.5.2084 = getitem(value=H__batch_2.2, index=$56build_slice.4.2083, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:21,192 on stmt: $const62.7.2085 = const(NoneType, None)
DEBUG 2022-02-14 16:38:21,192 on stmt: $const64.8.2086 = const(NoneType, None)
DEBUG 2022-02-14 16:38:21,192 on stmt: $66build_slice.9.2087 = global(slice: <class 'slice'>)
DEBUG 2022-02-14 16:38:21,192 on stmt: $66build_slice.10.2088 = call $66build_slice.9.2087($const62.7.2085, $const64.8.2086, func=$66build_slice.9.2087, args=(Var($const62.7.2085, <string>:5), Var($const64.8.2086, <string>:5)), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:21,192 on stmt: H__batch_2__arr[$66build_slice.10.2088] = $58binary_subscr.5.2084
DEBUG 2022-02-14 16:38:21,192 on stmt: $const70.11.2089 = const(NoneType, None)
DEBUG 2022-02-14 16:38:21,192 on stmt: $72return_value.12.2090 = cast(value=$const70.11.2089)
DEBUG 2022-02-14 16:38:21,192 on stmt: return $72return_value.12.2090
DEBUG 2022-02-14 16:38:21,192 ==== SSA block rewrite pass on 1062
DEBUG 2022-02-14 16:38:21,192 Running <numba.core.ssa._FixSSAVars object at 0x7fa041d23f70>
DEBUG 2022-02-14 16:38:21,193 on stmt: jump 1003
DEBUG 2022-02-14 16:38:21,193 ==== SSA block rewrite pass on 675
DEBUG 2022-02-14 16:38:21,193 Running <numba.core.ssa._FixSSAVars object at 0x7fa041d23f70>
DEBUG 2022-02-14 16:38:21,193 on stmt: $274binary_subscr.7 = getitem(value=edge__reps, index=$i.1405, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:21,193 on stmt: $280binary_subscr.10 = getitem(value=kept_edges, index=$i.1405, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:21,193 on stmt: $282build_tuple.11 = build_tuple(items=[Var($274binary_subscr.7, loop_hafnian_batch.py:111), Var($280binary_subscr.10, loop_hafnian_batch.py:111)])
DEBUG 2022-02-14 16:38:21,193 on stmt: $284binary_subscr.12 = getitem(value=binoms, index=$282build_tuple.11, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:21,193 on stmt: $binom_prod.2.1826 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=binom_prod.2, rhs=$284binary_subscr.12, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:38:21,193 find_def var='binom_prod.2' stmt=$binom_prod.2.1826 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=binom_prod.2, rhs=$284binary_subscr.12, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:38:21,193 find_def_from_top label 675
DEBUG 2022-02-14 16:38:21,193 idom 501 from label 675
DEBUG 2022-02-14 16:38:21,193 find_def_from_bottom label 501
DEBUG 2022-02-14 16:38:21,193 find_def_from_top label 501
DEBUG 2022-02-14 16:38:21,193 insert phi node binom_prod.2.2 = phi(incoming_values=[], incoming_blocks=[]) at 501
DEBUG 2022-02-14 16:38:21,193 find_def_from_bottom label 50
DEBUG 2022-02-14 16:38:21,193 incoming_def binom_prod.2.1 = binom_prod
DEBUG 2022-02-14 16:38:21,193 find_def_from_bottom label 675
DEBUG 2022-02-14 16:38:21,193 incoming_def binom_prod.2 = $binom_prod.2.1826
DEBUG 2022-02-14 16:38:21,193 replaced with: $binom_prod.2.1826 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=binom_prod.2.2, rhs=$284binary_subscr.12, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:38:21,193 on stmt: binom_prod.2 = $binom_prod.2.1826
DEBUG 2022-02-14 16:38:21,194 on stmt: jump 501
DEBUG 2022-02-14 16:38:21,194 ==== SSA block rewrite pass on 703
DEBUG 2022-02-14 16:38:21,194 Running <numba.core.ssa._FixSSAVars object at 0x7fa041d23f70>
DEBUG 2022-02-14 16:38:21,194 on stmt: $296pred = call bool296(glynn, func=bool296, args=(Var(glynn, loop_hafnian_batch.py:83),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:21,194 on stmt: branch $296pred, 707, 717
DEBUG 2022-02-14 16:38:21,194 ==== SSA block rewrite pass on 707
DEBUG 2022-02-14 16:38:21,194 Running <numba.core.ssa._FixSSAVars object at 0x7fa041d23f70>
DEBUG 2022-02-14 16:38:21,194 on stmt: ret.1315 = call assert.1314(msg.1313, kept_edges_size0.1311, edge__reps__size0_1303, func=assert.1314, args=[Var(msg.1313, loop_hafnian_batch.py:114), Var(kept_edges_size0.1311, loop_hafnian_batch.py:106), Var(edge__reps__size0_1303, loop_hafnian_batch.py:95)], kws={}, vararg=None, target=None)
DEBUG 2022-02-14 16:38:21,194 on stmt: id=14[LoopNest(index_variable = parfor_index.1366, range = (0, edge__reps__size0_1303, 1))]{1223: <ir.Block at /home/adi/GBS/gbs/loop_hafnian_batch.py (114)>}Var(parfor_index.1366, loop_hafnian_batch.py:114)
DEBUG 2022-02-14 16:38:21,194 on stmt: delta.2 = delta
DEBUG 2022-02-14 16:38:21,194 on stmt: jump 723
DEBUG 2022-02-14 16:38:21,194 ==== SSA block rewrite pass on 717
DEBUG 2022-02-14 16:38:21,194 Running <numba.core.ssa._FixSSAVars object at 0x7fa041d23f70>
DEBUG 2022-02-14 16:38:21,194 on stmt: delta.2 = kept_edges
DEBUG 2022-02-14 16:38:21,194 on stmt: jump 723
DEBUG 2022-02-14 16:38:21,194 ==== SSA block rewrite pass on 1078
DEBUG 2022-02-14 16:38:21,194 Running <numba.core.ssa._FixSSAVars object at 0x7fa041d23f70>
DEBUG 2022-02-14 16:38:21,194 on stmt: ret.1346 = call assert.1345(msg.1344, _170binary__add_75, $214binary_add.10, func=assert.1345, args=[Var(msg.1344, loop_hafnian_batch.py:142), Var(_170binary__add_75, loop_hafnian_batch.py:101), Var($214binary_add.10, loop_hafnian_batch.py:104)], kws={}, vararg=None, target=None)
DEBUG 2022-02-14 16:38:21,194 on stmt: $H_batch.2.1827 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=H__batch_2.2, rhs=Hnew, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:38:21,195 on stmt: H__batch_2.1 = $H_batch.2.1827
DEBUG 2022-02-14 16:38:21,195 on stmt: jump 1117
DEBUG 2022-02-14 16:38:21,195 ==== SSA block rewrite pass on 723
DEBUG 2022-02-14 16:38:21,195 Running <numba.core.ssa._FixSSAVars object at 0x7fa041d23f70>
DEBUG 2022-02-14 16:38:21,195 on stmt: $328call_function.6 = call $318load_global.1(delta.2, A, D, oddV, func=$318load_global.1, args=[Var(delta.2, loop_hafnian_batch.py:118), Var(A, loop_hafnian_batch.py:83), Var(D, loop_hafnian_batch.py:83), Var(oddV, loop_hafnian_batch.py:84)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:21,195 on stmt: $330unpack_sequence.11 = exhaust_iter(value=$328call_function.6, count=4)
DEBUG 2022-02-14 16:38:21,195 on stmt: $AX_S.1399 = static_getitem(value=$330unpack_sequence.11, index=0, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:21,195 on stmt: $XD_S.1397 = static_getitem(value=$330unpack_sequence.11, index=1, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:21,195 on stmt: $D_S.1404 = static_getitem(value=$330unpack_sequence.11, index=2, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:21,195 on stmt: $oddVX_S.1398 = static_getitem(value=$330unpack_sequence.11, index=3, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:21,195 on stmt: E = call $340load_global.12($AX_S.1399, func=$340load_global.12, args=[Var($AX_S.1399, loop_hafnian_batch.py:118)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:21,195 on stmt: $352binary_subscr.17 = static_getitem(value=kept_edges, index=0, index_var=$const350.16, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:21,195 on stmt: $356compare_op.19 = $352binary_subscr.17 == $const354.18
DEBUG 2022-02-14 16:38:21,195 on stmt: $358pred = call bool358($356compare_op.19, func=bool358, args=(Var($356compare_op.19, loop_hafnian_batch.py:122),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:21,195 on stmt: branch $358pred, 737, 777
DEBUG 2022-02-14 16:38:21,195 ==== SSA block rewrite pass on 737
DEBUG 2022-02-14 16:38:21,195 Running <numba.core.ssa._FixSSAVars object at 0x7fa041d23f70>
DEBUG 2022-02-14 16:38:21,195 on stmt: $366binary_subscr.3 = static_getitem(value=kept_edges, index=1, index_var=$const364.2, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:21,195 on stmt: $370compare_op.5 = $366binary_subscr.3 == $const368.4
DEBUG 2022-02-14 16:38:21,196 on stmt: $372pred = call bool372($370compare_op.5, func=bool372, args=(Var($370compare_op.5, loop_hafnian_batch.py:122),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:21,196 on stmt: branch $372pred, 739, 777
DEBUG 2022-02-14 16:38:21,196 ==== SSA block rewrite pass on 777
DEBUG 2022-02-14 16:38:21,196 Running <numba.core.ssa._FixSSAVars object at 0x7fa041d23f70>
DEBUG 2022-02-14 16:38:21,196 on stmt: f_even = call $450load_global.1(E, $AX_S.1399, $XD_S.1397, $D_S.1404, N__max, func=$450load_global.1, args=[Var(E, loop_hafnian_batch.py:120), Var($AX_S.1399, loop_hafnian_batch.py:118), Var($XD_S.1397, loop_hafnian_batch.py:118), Var($D_S.1404, loop_hafnian_batch.py:118), Var(N__max, loop_hafnian_batch.py:93)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:21,196 on stmt: f_odd = call $466load_global.8(E, $AX_S.1399, $XD_S.1397, $D_S.1404, N__max, oddloop, $oddVX_S.1398, func=$466load_global.8, args=[Var(E, loop_hafnian_batch.py:120), Var($AX_S.1399, loop_hafnian_batch.py:118), Var($XD_S.1397, loop_hafnian_batch.py:118), Var($D_S.1404, loop_hafnian_batch.py:118), Var(N__max, loop_hafnian_batch.py:93), Var(oddloop, loop_hafnian_batch.py:83), Var($oddVX_S.1398, loop_hafnian_batch.py:118)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:21,196 on stmt: $494binary_subscr.21 = static_getitem(value=kept_edges, index=0, index_var=$const492.20, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:21,196 on stmt: $496binary_multiply.22 = $const488.18 * $494binary_subscr.21
DEBUG 2022-02-14 16:38:21,196 on stmt: $500binary_add.24 = $496binary_multiply.22 + $const498.23
DEBUG 2022-02-14 16:38:21,196 on stmt: $516call_function.32 = call $486load_global.17($500binary_add.24, $514binary_add.31, func=$486load_global.17, args=[Var($500binary_add.24, loop_hafnian_batch.py:131), Var($514binary_add.31, loop_hafnian_batch.py:131)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:21,196 on stmt: $518get_iter.33 = getiter(value=$516call_function.32)
DEBUG 2022-02-14 16:38:21,196 on stmt: jump 1003
DEBUG 2022-02-14 16:38:21,196 ==== SSA block rewrite pass on 1003
DEBUG 2022-02-14 16:38:21,196 Running <numba.core.ssa._FixSSAVars object at 0x7fa041d23f70>
DEBUG 2022-02-14 16:38:21,196 on stmt: $520for_iter.2 = iternext(value=$518get_iter.33)
DEBUG 2022-02-14 16:38:21,196 on stmt: $N_det.1409 = pair_first(value=$520for_iter.2)
DEBUG 2022-02-14 16:38:21,196 on stmt: $520for_iter.4 = pair_second(value=$520for_iter.2)
DEBUG 2022-02-14 16:38:21,196 on stmt: branch $520for_iter.4, 1005, 1078
DEBUG 2022-02-14 16:38:21,197 ==== SSA block rewrite pass on 50
DEBUG 2022-02-14 16:38:21,197 Running <numba.core.ssa._FixSSAVars object at 0x7fa041d23f70>
DEBUG 2022-02-14 16:38:21,197 on stmt: j = parfor__index_1383
DEBUG 2022-02-14 16:38:21,197 on stmt: id=13[LoopNest(index_variable = parfor_index.1361, range = (0, $214binary_add.10, 1))]{1222: <ir.Block at /home/adi/GBS/gbs/loop_hafnian_batch.py (104)>}Var(parfor_index.1361, loop_hafnian_batch.py:104)
DEBUG 2022-02-14 16:38:21,197 on stmt: kept_edges = call $226load_global.15(j, edge__reps, func=$226load_global.15, args=[Var(j, loop_hafnian_batch.py:102), Var(edge__reps, loop_hafnian_batch.py:95)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:21,197 on stmt: kept_edges_shape.1310 = getattr(value=kept_edges, attr=shape)
DEBUG 2022-02-14 16:38:21,197 on stmt: kept_edges_size0.1311 = static_getitem(value=kept_edges_shape.1310, index=0, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:21,197 on stmt: binom_prod.2.1 = binom_prod
DEBUG 2022-02-14 16:38:21,197 on stmt: id=18[LoopNest(index_variable = parfor_index.1381, range = (0, kept_edges_size0.1311, 1))]{573: <ir.Block at /home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numba/parfors/parfor.py (256)>}Var(parfor_index.1381, parfor.py:256)
DEBUG 2022-02-14 16:38:21,197 on stmt: $258call_function.28 = call $248load_global.23($const250.24, $256binary_floor_divide.27, func=$248load_global.23, args=[Var($const250.24, loop_hafnian_batch.py:110), Var($256binary_floor_divide.27, loop_hafnian_batch.py:110)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:21,197 on stmt: $260get_iter.29 = getiter(value=$258call_function.28)
DEBUG 2022-02-14 16:38:21,197 on stmt: jump 501
DEBUG 2022-02-14 16:38:21,197 ==== SSA block rewrite pass on 1005
DEBUG 2022-02-14 16:38:21,197 Running <numba.core.ssa._FixSSAVars object at 0x7fa041d23f70>
DEBUG 2022-02-14 16:38:21,197 on stmt: N = N__fixed + $N_det.1409
DEBUG 2022-02-14 16:38:21,197 on stmt: $538binary_floor_divide.9 = N // $const536.8
DEBUG 2022-02-14 16:38:21,197 on stmt: $542binary_subtract.11 = $538binary_floor_divide.9 - val.1149
DEBUG 2022-02-14 16:38:21,197 on stmt: plus_minus.1 = $const532.6 ** $542binary_subtract.11
DEBUG 2022-02-14 16:38:21,197 on stmt: $554binary_subtract.16 = $N_det.1409 - $const552.15
DEBUG 2022-02-14 16:38:21,197 on stmt: $558binary_floor_divide.18 = $554binary_subtract.16 // $const556.17
DEBUG 2022-02-14 16:38:21,198 on stmt: $564binary_subscr.21 = static_getitem(value=kept_edges, index=0, index_var=$const562.20, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:21,198 on stmt: $566build_tuple.22 = build_tuple(items=[Var($558binary_floor_divide.18, loop_hafnian_batch.py:135), Var($564binary_subscr.21, loop_hafnian_batch.py:135)])
DEBUG 2022-02-14 16:38:21,198 on stmt: $568binary_subscr.23 = getitem(value=binoms, index=$566build_tuple.22, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:21,198 on stmt: n_det_binom_prod = $568binary_subscr.23 * binom_prod.2
DEBUG 2022-02-14 16:38:21,198 find_def var='binom_prod.2' stmt=n_det_binom_prod = $568binary_subscr.23 * binom_prod.2
DEBUG 2022-02-14 16:38:21,198 find_def_from_top label 1005
DEBUG 2022-02-14 16:38:21,198 idom 1003 from label 1005
DEBUG 2022-02-14 16:38:21,198 find_def_from_bottom label 1003
DEBUG 2022-02-14 16:38:21,198 find_def_from_top label 1003
DEBUG 2022-02-14 16:38:21,198 idom 777 from label 1003
DEBUG 2022-02-14 16:38:21,198 find_def_from_bottom label 777
DEBUG 2022-02-14 16:38:21,198 find_def_from_top label 777
DEBUG 2022-02-14 16:38:21,198 idom 723 from label 777
DEBUG 2022-02-14 16:38:21,198 find_def_from_bottom label 723
DEBUG 2022-02-14 16:38:21,198 find_def_from_top label 723
DEBUG 2022-02-14 16:38:21,198 idom 703 from label 723
DEBUG 2022-02-14 16:38:21,198 find_def_from_bottom label 703
DEBUG 2022-02-14 16:38:21,198 find_def_from_top label 703
DEBUG 2022-02-14 16:38:21,198 idom 501 from label 703
DEBUG 2022-02-14 16:38:21,198 find_def_from_bottom label 501
DEBUG 2022-02-14 16:38:21,198 replaced with: n_det_binom_prod = $568binary_subscr.23 * binom_prod.2.2
DEBUG 2022-02-14 16:38:21,199 on stmt: $580binary_modulo.28 = N % $const578.27
DEBUG 2022-02-14 16:38:21,199 on stmt: $584compare_op.30 = $580binary_modulo.28 == $const582.29
DEBUG 2022-02-14 16:38:21,199 on stmt: $586pred = call bool586($584compare_op.30, func=bool586, args=(Var($584compare_op.30, loop_hafnian_batch.py:137),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:21,199 on stmt: branch $586pred, 1021, 1060
DEBUG 2022-02-14 16:38:21,199 ==== SSA block rewrite pass on 739
DEBUG 2022-02-14 16:38:21,199 Running <numba.core.ssa._FixSSAVars object at 0x7fa041d23f70>
DEBUG 2022-02-14 16:38:21,199 on stmt: oddVX_S0 = call $376load_global.1(delta.2, oddV0, func=$376load_global.1, args=[Var(delta.2, loop_hafnian_batch.py:118), Var(oddV0, loop_hafnian_batch.py:89)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:21,199 on stmt: $396binary_subtract.10 = $392binary_floor_divide.8 - val.1149
DEBUG 2022-02-14 16:38:21,199 on stmt: plus_minus = $const386.5 ** $396binary_subtract.10
DEBUG 2022-02-14 16:38:21,199 on stmt: $418call_function.20 = call $402load_global.12(E, $AX_S.1399, $XD_S.1397, $D_S.1404, N__fixed, oddloop0, oddVX_S0, func=$402load_global.12, args=[Var(E, loop_hafnian_batch.py:120), Var($AX_S.1399, loop_hafnian_batch.py:118), Var($XD_S.1397, loop_hafnian_batch.py:118), Var($D_S.1404, loop_hafnian_batch.py:118), Var(N__fixed, loop_hafnian_batch.py:92), Var(oddloop0, loop_hafnian_batch.py:88), Var(oddVX_S0, loop_hafnian_batch.py:123)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:21,199 on stmt: f = getitem(value=$418call_function.20, index=N__fixed, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:21,199 on stmt: $432binary_subscr.27 = static_getitem(value=H__batch_2.2, index=0, index_var=$const428.24, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:21,199 on stmt: $438binary_multiply.30 = binom_prod.2 * plus_minus
DEBUG 2022-02-14 16:38:21,199 find_def var='binom_prod.2' stmt=$438binary_multiply.30 = binom_prod.2 * plus_minus
DEBUG 2022-02-14 16:38:21,199 find_def_from_top label 739
DEBUG 2022-02-14 16:38:21,199 idom 737 from label 739
DEBUG 2022-02-14 16:38:21,199 find_def_from_bottom label 737
DEBUG 2022-02-14 16:38:21,199 find_def_from_top label 737
DEBUG 2022-02-14 16:38:21,199 idom 723 from label 737
DEBUG 2022-02-14 16:38:21,200 find_def_from_bottom label 723
DEBUG 2022-02-14 16:38:21,200 find_def_from_top label 723
DEBUG 2022-02-14 16:38:21,200 idom 703 from label 723
DEBUG 2022-02-14 16:38:21,200 find_def_from_bottom label 703
DEBUG 2022-02-14 16:38:21,200 find_def_from_top label 703
DEBUG 2022-02-14 16:38:21,200 idom 501 from label 703
DEBUG 2022-02-14 16:38:21,200 find_def_from_bottom label 501
DEBUG 2022-02-14 16:38:21,200 replaced with: $438binary_multiply.30 = binom_prod.2.2 * plus_minus
DEBUG 2022-02-14 16:38:21,200 on stmt: $442binary_multiply.32 = $438binary_multiply.30 * f
DEBUG 2022-02-14 16:38:21,200 on stmt: $444inplace_add.33 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$432binary_subscr.27, rhs=$442binary_multiply.32, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:38:21,200 on stmt: H__batch_2.2[0] = $444inplace_add.33
DEBUG 2022-02-14 16:38:21,200 on stmt: jump 777
DEBUG 2022-02-14 16:38:21,200 ==== SSA block rewrite pass on 501
DEBUG 2022-02-14 16:38:21,200 Running <numba.core.ssa._FixSSAVars object at 0x7fa041d23f70>
DEBUG 2022-02-14 16:38:21,200 on stmt: $262for_iter.2 = iternext(value=$260get_iter.29)
DEBUG 2022-02-14 16:38:21,200 on stmt: $i.1405 = pair_first(value=$262for_iter.2)
DEBUG 2022-02-14 16:38:21,200 on stmt: $262for_iter.4 = pair_second(value=$262for_iter.2)
DEBUG 2022-02-14 16:38:21,200 on stmt: branch $262for_iter.4, 675, 703
DEBUG 2022-02-14 16:38:21,200 ==== SSA block rewrite pass on 1021
DEBUG 2022-02-14 16:38:21,200 Running <numba.core.ssa._FixSSAVars object at 0x7fa041d23f70>
DEBUG 2022-02-14 16:38:21,200 on stmt: $596binary_subscr.6 = getitem(value=Hnew, index=$N_det.1409, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:21,201 on stmt: $602binary_multiply.9 = n_det_binom_prod * plus_minus.1
DEBUG 2022-02-14 16:38:21,201 on stmt: $610binary_floor_divide.13 = N // $const608.12
DEBUG 2022-02-14 16:38:21,201 on stmt: $612binary_subscr.14 = getitem(value=f_even, index=$610binary_floor_divide.13, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:21,201 on stmt: $614binary_multiply.15 = $602binary_multiply.9 * $612binary_subscr.14
DEBUG 2022-02-14 16:38:21,201 on stmt: $616inplace_add.16 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$596binary_subscr.6, rhs=$614binary_multiply.15, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:38:21,201 on stmt: Hnew[$N_det.1409] = $616inplace_add.16
DEBUG 2022-02-14 16:38:21,201 on stmt: jump 1062
DEBUG 2022-02-14 16:38:21,201 ==== SSA block rewrite pass on 1060
DEBUG 2022-02-14 16:38:21,201 Running <numba.core.ssa._FixSSAVars object at 0x7fa041d23f70>
DEBUG 2022-02-14 16:38:21,201 on stmt: $630binary_subscr.6 = getitem(value=Hnew, index=$N_det.1409, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:21,201 on stmt: $636binary_multiply.9 = n_det_binom_prod * plus_minus.1
DEBUG 2022-02-14 16:38:21,201 on stmt: $642binary_subscr.12 = getitem(value=f_odd, index=N, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:21,201 on stmt: $644binary_multiply.13 = $636binary_multiply.9 * $642binary_subscr.12
DEBUG 2022-02-14 16:38:21,201 on stmt: $646inplace_add.14 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$630binary_subscr.6, rhs=$644binary_multiply.13, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:38:21,201 on stmt: Hnew[$N_det.1409] = $646inplace_add.14
DEBUG 2022-02-14 16:38:21,201 on stmt: jump 1062
DEBUG 2022-02-14 16:38:21,201 ==== SSA block rewrite pass on 1117
DEBUG 2022-02-14 16:38:21,201 Running <numba.core.ssa._FixSSAVars object at 0x7fa041d23f70>
DEBUG 2022-02-14 16:38:21,201 on stmt: jump 40
DEBUG 2022-02-14 16:38:21,201 Fix SSA violator on var delta.2
DEBUG 2022-02-14 16:38:21,202 ==== SSA block rewrite pass on 0
DEBUG 2022-02-14 16:38:21,202 Running <numba.core.ssa._FreshVarHandler object at 0x7fa041d36730>
DEBUG 2022-02-14 16:38:21,202 on stmt: sched.2060 = arg(0, name=sched)
DEBUG 2022-02-14 16:38:21,202 on stmt: _170binary__add_75 = arg(1, name=_170binary__add_75)
DEBUG 2022-02-14 16:38:21,202 on stmt: A = arg(2, name=A)
DEBUG 2022-02-14 16:38:21,202 on stmt: D = arg(3, name=D)
DEBUG 2022-02-14 16:38:21,202 on stmt: N__fixed = arg(4, name=N__fixed)
DEBUG 2022-02-14 16:38:21,202 on stmt: N__max = arg(5, name=N__max)
DEBUG 2022-02-14 16:38:21,202 on stmt: batch__max = arg(6, name=batch__max)
DEBUG 2022-02-14 16:38:21,202 on stmt: binoms = arg(7, name=binoms)
DEBUG 2022-02-14 16:38:21,202 on stmt: edge__reps = arg(8, name=edge__reps)
DEBUG 2022-02-14 16:38:21,202 on stmt: edge__reps__size0_1303 = arg(9, name=edge__reps__size0_1303)
DEBUG 2022-02-14 16:38:21,202 on stmt: even__cutoff = arg(10, name=even__cutoff)
DEBUG 2022-02-14 16:38:21,202 on stmt: glynn = arg(11, name=glynn)
DEBUG 2022-02-14 16:38:21,202 on stmt: n = arg(12, name=n)
DEBUG 2022-02-14 16:38:21,202 on stmt: oddV = arg(13, name=oddV)
DEBUG 2022-02-14 16:38:21,202 on stmt: oddV0 = arg(14, name=oddV0)
DEBUG 2022-02-14 16:38:21,202 on stmt: oddloop = arg(15, name=oddloop)
DEBUG 2022-02-14 16:38:21,202 on stmt: oddloop0 = arg(16, name=oddloop0)
DEBUG 2022-02-14 16:38:21,202 on stmt: H__batch_2__arr = arg(17, name=H__batch_2__arr)
DEBUG 2022-02-14 16:38:21,202 on stmt: $2load_global.0.2061 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:38:21,202 on stmt: $4load_method.1.2062 = getattr(value=$2load_global.0.2061, attr=copy)
DEBUG 2022-02-14 16:38:21,203 on stmt: H__batch_2 = call $4load_method.1.2062(H__batch_2__arr, func=$4load_method.1.2062, args=[Var(H__batch_2__arr, <string>:2)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:21,203 on stmt: $12load_global.4.2063 = global(range: <class 'range'>)
DEBUG 2022-02-14 16:38:21,203 on stmt: $const16.6.2064 = const(int, 0)
DEBUG 2022-02-14 16:38:21,203 on stmt: $18binary_subscr.7.2065 = getitem(value=sched.2060, index=$const16.6.2064, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:21,203 on stmt: $const22.9.2066 = const(int, 1)
DEBUG 2022-02-14 16:38:21,203 on stmt: $24binary_subscr.10.2067 = getitem(value=sched.2060, index=$const22.9.2066, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:21,203 on stmt: $26load_global.11.2068 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:38:21,203 on stmt: $28load_method.12.2069 = getattr(value=$26load_global.11.2068, attr=uint8)
DEBUG 2022-02-14 16:38:21,203 on stmt: $const30.13.2070 = const(int, 1)
DEBUG 2022-02-14 16:38:21,203 on stmt: $32call_method.14.2071 = call $28load_method.12.2069($const30.13.2070, func=$28load_method.12.2069, args=[Var($const30.13.2070, <string>:3)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:21,203 on stmt: $34binary_add.15.2072 = $24binary_subscr.10.2067 + $32call_method.14.2071
DEBUG 2022-02-14 16:38:21,203 on stmt: $36call_function.16.2073 = call $12load_global.4.2063($18binary_subscr.7.2065, $34binary_add.15.2072, func=$12load_global.4.2063, args=[Var($18binary_subscr.7.2065, <string>:3), Var($34binary_add.15.2072, <string>:3)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:21,203 on stmt: $38get_iter.17.2074 = getiter(value=$36call_function.16.2073)
DEBUG 2022-02-14 16:38:21,203 on stmt: $phi40.0.2075 = $38get_iter.17.2074
DEBUG 2022-02-14 16:38:21,203 on stmt: bool296 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:38:21,203 on stmt: msg.1313 = const(str, Sizes of kept_edges, edge_reps do not match on /home/adi/GBS/gbs/loop_hafnian_batch.py (114))
DEBUG 2022-02-14 16:38:21,203 on stmt: assert.1314 = global(assert_equiv: <intrinsic assert_equiv>)
DEBUG 2022-02-14 16:38:21,203 on stmt: $np_g_var.1367 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:38:21,203 on stmt: $empty_attr_attr.1368 = getattr(value=$np_g_var.1367, attr=empty)
DEBUG 2022-02-14 16:38:21,203 on stmt: $np_typ_var.1369 = getattr(value=$np_g_var.1367, attr=int64)
DEBUG 2022-02-14 16:38:21,203 on stmt: delta = call $empty_attr_attr.1368(edge__reps__size0_1303, $np_typ_var.1369, func=$empty_attr_attr.1368, args=[Var(edge__reps__size0_1303, loop_hafnian_batch.py:95), Var($np_typ_var.1369, loop_hafnian_batch.py:114)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:21,203 on stmt: msg.1344 = const(str, Sizes of H_batch.2, Hnew do not match on /home/adi/GBS/gbs/loop_hafnian_batch.py (142))
DEBUG 2022-02-14 16:38:21,203 on stmt: assert.1345 = global(assert_equiv: <intrinsic assert_equiv>)
DEBUG 2022-02-14 16:38:21,204 on stmt: $318load_global.1 = global(get_submatrices: CPUDispatcher(<function get_submatrices at 0x7fa047ebed30>))
DEBUG 2022-02-14 16:38:21,204 on stmt: $340load_global.12 = global(eigvals: CPUDispatcher(<function eigvals at 0x7fa047e5d430>))
DEBUG 2022-02-14 16:38:21,204 on stmt: $const350.16 = const(int, 0)
DEBUG 2022-02-14 16:38:21,204 on stmt: $const354.18 = const(int, 0)
DEBUG 2022-02-14 16:38:21,204 on stmt: bool358 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:38:21,204 on stmt: $const364.2 = const(int, 1)
DEBUG 2022-02-14 16:38:21,204 on stmt: $const368.4 = const(int, 0)
DEBUG 2022-02-14 16:38:21,204 on stmt: bool372 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:38:21,204 on stmt: $450load_global.1 = global(f_loop: CPUDispatcher(<function f_loop at 0x7fa047ebe9d0>))
DEBUG 2022-02-14 16:38:21,204 on stmt: $466load_global.8 = global(f_loop_odd: CPUDispatcher(<function f_loop_odd at 0x7fa047ebeb80>))
DEBUG 2022-02-14 16:38:21,204 on stmt: $486load_global.17 = global(range: <class 'range'>)
DEBUG 2022-02-14 16:38:21,204 on stmt: $const488.18 = const(int, 2)
DEBUG 2022-02-14 16:38:21,204 on stmt: $const492.20 = const(int, 0)
DEBUG 2022-02-14 16:38:21,204 on stmt: $const498.23 = const(int, 1)
DEBUG 2022-02-14 16:38:21,204 on stmt: $const502.25 = const(int, 2)
DEBUG 2022-02-14 16:38:21,204 on stmt: $506binary_multiply.27 = $const502.25 * batch__max
DEBUG 2022-02-14 16:38:21,204 on stmt: $510binary_add.29 = $506binary_multiply.27 + even__cutoff
DEBUG 2022-02-14 16:38:21,204 on stmt: $const512.30 = const(int, 2)
DEBUG 2022-02-14 16:38:21,204 on stmt: $514binary_add.31 = $510binary_add.29 + $const512.30
DEBUG 2022-02-14 16:38:21,204 on stmt: $const202.4 = const(int, 2)
DEBUG 2022-02-14 16:38:21,204 on stmt: $206binary_multiply.6 = $const202.4 * batch__max
DEBUG 2022-02-14 16:38:21,204 on stmt: $210binary_add.8 = $206binary_multiply.6 + even__cutoff
DEBUG 2022-02-14 16:38:21,204 on stmt: $const212.9 = const(int, 2)
DEBUG 2022-02-14 16:38:21,205 on stmt: $214binary_add.10 = $210binary_add.8 + $const212.9
DEBUG 2022-02-14 16:38:21,205 on stmt: $226load_global.15 = global(find_kept_edges: CPUDispatcher(<function find_kept_edges at 0x7fa047ebe790>))
DEBUG 2022-02-14 16:38:21,205 on stmt: $np_g_var.1362 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:38:21,205 on stmt: $empty_attr_attr.1363 = getattr(value=$np_g_var.1362, attr=empty)
DEBUG 2022-02-14 16:38:21,205 on stmt: $np_typ_var.1364 = getattr(value=$np_g_var.1362, attr=complex128)
DEBUG 2022-02-14 16:38:21,205 on stmt: Hnew = call $empty_attr_attr.1363($214binary_add.10, $np_typ_var.1364, func=$empty_attr_attr.1363, args=[Var($214binary_add.10, loop_hafnian_batch.py:104), Var($np_typ_var.1364, loop_hafnian_batch.py:104)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:21,205 on stmt: binom_prod = const(float, 1.0)
DEBUG 2022-02-14 16:38:21,205 on stmt: $248load_global.23 = global(range: <class 'range'>)
DEBUG 2022-02-14 16:38:21,205 on stmt: $const250.24 = const(int, 1)
DEBUG 2022-02-14 16:38:21,205 on stmt: $const254.26 = const(int, 2)
DEBUG 2022-02-14 16:38:21,205 on stmt: $256binary_floor_divide.27 = n // $const254.26
DEBUG 2022-02-14 16:38:21,205 on stmt: $const532.6 = const(int, -1)
DEBUG 2022-02-14 16:38:21,205 on stmt: $const536.8 = const(int, 2)
DEBUG 2022-02-14 16:38:21,205 on stmt: $const552.15 = const(int, 1)
DEBUG 2022-02-14 16:38:21,205 on stmt: $const556.17 = const(int, 2)
DEBUG 2022-02-14 16:38:21,205 on stmt: $const562.20 = const(int, 0)
DEBUG 2022-02-14 16:38:21,205 on stmt: $const578.27 = const(int, 2)
DEBUG 2022-02-14 16:38:21,205 on stmt: $const582.29 = const(int, 0)
DEBUG 2022-02-14 16:38:21,205 on stmt: bool586 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:38:21,205 on stmt: $376load_global.1 = global(get_submatrix_batch_odd0: CPUDispatcher(<function get_submatrix_batch_odd0 at 0x7fa047ebef70>))
DEBUG 2022-02-14 16:38:21,205 on stmt: $const386.5 = const(int, -1)
DEBUG 2022-02-14 16:38:21,205 on stmt: $const390.7 = const(int, 2)
DEBUG 2022-02-14 16:38:21,205 on stmt: $392binary_floor_divide.8 = N__fixed // $const390.7
DEBUG 2022-02-14 16:38:21,206 on stmt: $402load_global.12 = global(f_loop_odd: CPUDispatcher(<function f_loop_odd at 0x7fa047ebeb80>))
DEBUG 2022-02-14 16:38:21,206 on stmt: $const428.24 = const(int, 0)
DEBUG 2022-02-14 16:38:21,206 on stmt: $const608.12 = const(int, 2)
DEBUG 2022-02-14 16:38:21,206 on stmt: jump 40
DEBUG 2022-02-14 16:38:21,206 ==== SSA block rewrite pass on 40
DEBUG 2022-02-14 16:38:21,206 Running <numba.core.ssa._FreshVarHandler object at 0x7fa041d36730>
DEBUG 2022-02-14 16:38:21,206 on stmt: H__batch_2.2 = phi(incoming_values=[Var(H__batch_2, <string>:2), Var(H__batch_2.1, loop_hafnian_batch.py:142)], incoming_blocks=[0, 1117])
DEBUG 2022-02-14 16:38:21,206 on stmt: $40for_iter.1.2076 = iternext(value=$phi40.0.2075)
DEBUG 2022-02-14 16:38:21,206 on stmt: $40for_iter.2.2077 = pair_first(value=$40for_iter.1.2076)
DEBUG 2022-02-14 16:38:21,206 on stmt: $40for_iter.3.2078 = pair_second(value=$40for_iter.1.2076)
DEBUG 2022-02-14 16:38:21,206 on stmt: $phi42.1.2079 = $40for_iter.2.2077
DEBUG 2022-02-14 16:38:21,206 on stmt: branch $40for_iter.3.2078, 42, 1224
DEBUG 2022-02-14 16:38:21,206 ==== SSA block rewrite pass on 42
DEBUG 2022-02-14 16:38:21,206 Running <numba.core.ssa._FreshVarHandler object at 0x7fa041d36730>
DEBUG 2022-02-14 16:38:21,206 on stmt: parfor__index_1383 = $phi42.1.2079
DEBUG 2022-02-14 16:38:21,206 on stmt: jump 50
DEBUG 2022-02-14 16:38:21,206 ==== SSA block rewrite pass on 1224
DEBUG 2022-02-14 16:38:21,206 Running <numba.core.ssa._FreshVarHandler object at 0x7fa041d36730>
DEBUG 2022-02-14 16:38:21,206 on stmt: $const52.1.2080 = const(NoneType, None)
DEBUG 2022-02-14 16:38:21,206 on stmt: $const54.2.2081 = const(NoneType, None)
DEBUG 2022-02-14 16:38:21,206 on stmt: $56build_slice.3.2082 = global(slice: <class 'slice'>)
DEBUG 2022-02-14 16:38:21,206 on stmt: $56build_slice.4.2083 = call $56build_slice.3.2082($const52.1.2080, $const54.2.2081, func=$56build_slice.3.2082, args=(Var($const52.1.2080, <string>:5), Var($const54.2.2081, <string>:5)), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:21,207 on stmt: $58binary_subscr.5.2084 = getitem(value=H__batch_2.2, index=$56build_slice.4.2083, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:21,207 on stmt: $const62.7.2085 = const(NoneType, None)
DEBUG 2022-02-14 16:38:21,207 on stmt: $const64.8.2086 = const(NoneType, None)
DEBUG 2022-02-14 16:38:21,207 on stmt: $66build_slice.9.2087 = global(slice: <class 'slice'>)
DEBUG 2022-02-14 16:38:21,207 on stmt: $66build_slice.10.2088 = call $66build_slice.9.2087($const62.7.2085, $const64.8.2086, func=$66build_slice.9.2087, args=(Var($const62.7.2085, <string>:5), Var($const64.8.2086, <string>:5)), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:21,207 on stmt: H__batch_2__arr[$66build_slice.10.2088] = $58binary_subscr.5.2084
DEBUG 2022-02-14 16:38:21,207 on stmt: $const70.11.2089 = const(NoneType, None)
DEBUG 2022-02-14 16:38:21,207 on stmt: $72return_value.12.2090 = cast(value=$const70.11.2089)
DEBUG 2022-02-14 16:38:21,207 on stmt: return $72return_value.12.2090
DEBUG 2022-02-14 16:38:21,207 ==== SSA block rewrite pass on 1062
DEBUG 2022-02-14 16:38:21,207 Running <numba.core.ssa._FreshVarHandler object at 0x7fa041d36730>
DEBUG 2022-02-14 16:38:21,207 on stmt: jump 1003
DEBUG 2022-02-14 16:38:21,207 ==== SSA block rewrite pass on 675
DEBUG 2022-02-14 16:38:21,207 Running <numba.core.ssa._FreshVarHandler object at 0x7fa041d36730>
DEBUG 2022-02-14 16:38:21,207 on stmt: $274binary_subscr.7 = getitem(value=edge__reps, index=$i.1405, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:21,207 on stmt: $280binary_subscr.10 = getitem(value=kept_edges, index=$i.1405, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:21,207 on stmt: $282build_tuple.11 = build_tuple(items=[Var($274binary_subscr.7, loop_hafnian_batch.py:111), Var($280binary_subscr.10, loop_hafnian_batch.py:111)])
DEBUG 2022-02-14 16:38:21,207 on stmt: $284binary_subscr.12 = getitem(value=binoms, index=$282build_tuple.11, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:21,207 on stmt: $binom_prod.2.1826 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=binom_prod.2.2, rhs=$284binary_subscr.12, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:38:21,207 on stmt: binom_prod.2 = $binom_prod.2.1826
DEBUG 2022-02-14 16:38:21,207 on stmt: jump 501
DEBUG 2022-02-14 16:38:21,208 ==== SSA block rewrite pass on 703
DEBUG 2022-02-14 16:38:21,208 Running <numba.core.ssa._FreshVarHandler object at 0x7fa041d36730>
DEBUG 2022-02-14 16:38:21,208 on stmt: $296pred = call bool296(glynn, func=bool296, args=(Var(glynn, loop_hafnian_batch.py:83),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:21,208 on stmt: branch $296pred, 707, 717
DEBUG 2022-02-14 16:38:21,208 ==== SSA block rewrite pass on 707
DEBUG 2022-02-14 16:38:21,208 Running <numba.core.ssa._FreshVarHandler object at 0x7fa041d36730>
DEBUG 2022-02-14 16:38:21,208 on stmt: ret.1315 = call assert.1314(msg.1313, kept_edges_size0.1311, edge__reps__size0_1303, func=assert.1314, args=[Var(msg.1313, loop_hafnian_batch.py:114), Var(kept_edges_size0.1311, loop_hafnian_batch.py:106), Var(edge__reps__size0_1303, loop_hafnian_batch.py:95)], kws={}, vararg=None, target=None)
DEBUG 2022-02-14 16:38:21,208 on stmt: id=14[LoopNest(index_variable = parfor_index.1366, range = (0, edge__reps__size0_1303, 1))]{1223: <ir.Block at /home/adi/GBS/gbs/loop_hafnian_batch.py (114)>}Var(parfor_index.1366, loop_hafnian_batch.py:114)
DEBUG 2022-02-14 16:38:21,208 on stmt: delta.2 = delta
DEBUG 2022-02-14 16:38:21,208 first assign: delta.2
DEBUG 2022-02-14 16:38:21,208 replaced with: delta.2 = delta
DEBUG 2022-02-14 16:38:21,208 on stmt: jump 723
DEBUG 2022-02-14 16:38:21,208 ==== SSA block rewrite pass on 717
DEBUG 2022-02-14 16:38:21,208 Running <numba.core.ssa._FreshVarHandler object at 0x7fa041d36730>
DEBUG 2022-02-14 16:38:21,208 on stmt: delta.2 = kept_edges
DEBUG 2022-02-14 16:38:21,208 replaced with: delta.2.1 = kept_edges
DEBUG 2022-02-14 16:38:21,208 on stmt: jump 723
DEBUG 2022-02-14 16:38:21,208 ==== SSA block rewrite pass on 1078
DEBUG 2022-02-14 16:38:21,209 Running <numba.core.ssa._FreshVarHandler object at 0x7fa041d36730>
DEBUG 2022-02-14 16:38:21,209 on stmt: ret.1346 = call assert.1345(msg.1344, _170binary__add_75, $214binary_add.10, func=assert.1345, args=[Var(msg.1344, loop_hafnian_batch.py:142), Var(_170binary__add_75, loop_hafnian_batch.py:101), Var($214binary_add.10, loop_hafnian_batch.py:104)], kws={}, vararg=None, target=None)
DEBUG 2022-02-14 16:38:21,209 on stmt: $H_batch.2.1827 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=H__batch_2.2, rhs=Hnew, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:38:21,209 on stmt: H__batch_2.1 = $H_batch.2.1827
DEBUG 2022-02-14 16:38:21,209 on stmt: jump 1117
DEBUG 2022-02-14 16:38:21,209 ==== SSA block rewrite pass on 723
DEBUG 2022-02-14 16:38:21,209 Running <numba.core.ssa._FreshVarHandler object at 0x7fa041d36730>
DEBUG 2022-02-14 16:38:21,209 on stmt: $328call_function.6 = call $318load_global.1(delta.2, A, D, oddV, func=$318load_global.1, args=[Var(delta.2, loop_hafnian_batch.py:118), Var(A, loop_hafnian_batch.py:83), Var(D, loop_hafnian_batch.py:83), Var(oddV, loop_hafnian_batch.py:84)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:21,209 on stmt: $330unpack_sequence.11 = exhaust_iter(value=$328call_function.6, count=4)
DEBUG 2022-02-14 16:38:21,209 on stmt: $AX_S.1399 = static_getitem(value=$330unpack_sequence.11, index=0, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:21,209 on stmt: $XD_S.1397 = static_getitem(value=$330unpack_sequence.11, index=1, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:21,209 on stmt: $D_S.1404 = static_getitem(value=$330unpack_sequence.11, index=2, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:21,209 on stmt: $oddVX_S.1398 = static_getitem(value=$330unpack_sequence.11, index=3, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:21,209 on stmt: E = call $340load_global.12($AX_S.1399, func=$340load_global.12, args=[Var($AX_S.1399, loop_hafnian_batch.py:118)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:21,209 on stmt: $352binary_subscr.17 = static_getitem(value=kept_edges, index=0, index_var=$const350.16, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:21,209 on stmt: $356compare_op.19 = $352binary_subscr.17 == $const354.18
DEBUG 2022-02-14 16:38:21,209 on stmt: $358pred = call bool358($356compare_op.19, func=bool358, args=(Var($356compare_op.19, loop_hafnian_batch.py:122),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:21,209 on stmt: branch $358pred, 737, 777
DEBUG 2022-02-14 16:38:21,210 ==== SSA block rewrite pass on 737
DEBUG 2022-02-14 16:38:21,210 Running <numba.core.ssa._FreshVarHandler object at 0x7fa041d36730>
DEBUG 2022-02-14 16:38:21,210 on stmt: $366binary_subscr.3 = static_getitem(value=kept_edges, index=1, index_var=$const364.2, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:21,210 on stmt: $370compare_op.5 = $366binary_subscr.3 == $const368.4
DEBUG 2022-02-14 16:38:21,210 on stmt: $372pred = call bool372($370compare_op.5, func=bool372, args=(Var($370compare_op.5, loop_hafnian_batch.py:122),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:21,210 on stmt: branch $372pred, 739, 777
DEBUG 2022-02-14 16:38:21,210 ==== SSA block rewrite pass on 777
DEBUG 2022-02-14 16:38:21,210 Running <numba.core.ssa._FreshVarHandler object at 0x7fa041d36730>
DEBUG 2022-02-14 16:38:21,210 on stmt: f_even = call $450load_global.1(E, $AX_S.1399, $XD_S.1397, $D_S.1404, N__max, func=$450load_global.1, args=[Var(E, loop_hafnian_batch.py:120), Var($AX_S.1399, loop_hafnian_batch.py:118), Var($XD_S.1397, loop_hafnian_batch.py:118), Var($D_S.1404, loop_hafnian_batch.py:118), Var(N__max, loop_hafnian_batch.py:93)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:21,210 on stmt: f_odd = call $466load_global.8(E, $AX_S.1399, $XD_S.1397, $D_S.1404, N__max, oddloop, $oddVX_S.1398, func=$466load_global.8, args=[Var(E, loop_hafnian_batch.py:120), Var($AX_S.1399, loop_hafnian_batch.py:118), Var($XD_S.1397, loop_hafnian_batch.py:118), Var($D_S.1404, loop_hafnian_batch.py:118), Var(N__max, loop_hafnian_batch.py:93), Var(oddloop, loop_hafnian_batch.py:83), Var($oddVX_S.1398, loop_hafnian_batch.py:118)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:21,210 on stmt: $494binary_subscr.21 = static_getitem(value=kept_edges, index=0, index_var=$const492.20, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:21,210 on stmt: $496binary_multiply.22 = $const488.18 * $494binary_subscr.21
DEBUG 2022-02-14 16:38:21,210 on stmt: $500binary_add.24 = $496binary_multiply.22 + $const498.23
DEBUG 2022-02-14 16:38:21,210 on stmt: $516call_function.32 = call $486load_global.17($500binary_add.24, $514binary_add.31, func=$486load_global.17, args=[Var($500binary_add.24, loop_hafnian_batch.py:131), Var($514binary_add.31, loop_hafnian_batch.py:131)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:21,210 on stmt: $518get_iter.33 = getiter(value=$516call_function.32)
DEBUG 2022-02-14 16:38:21,210 on stmt: jump 1003
DEBUG 2022-02-14 16:38:21,210 ==== SSA block rewrite pass on 1003
DEBUG 2022-02-14 16:38:21,210 Running <numba.core.ssa._FreshVarHandler object at 0x7fa041d36730>
DEBUG 2022-02-14 16:38:21,211 on stmt: $520for_iter.2 = iternext(value=$518get_iter.33)
DEBUG 2022-02-14 16:38:21,211 on stmt: $N_det.1409 = pair_first(value=$520for_iter.2)
DEBUG 2022-02-14 16:38:21,211 on stmt: $520for_iter.4 = pair_second(value=$520for_iter.2)
DEBUG 2022-02-14 16:38:21,211 on stmt: branch $520for_iter.4, 1005, 1078
DEBUG 2022-02-14 16:38:21,211 ==== SSA block rewrite pass on 50
DEBUG 2022-02-14 16:38:21,211 Running <numba.core.ssa._FreshVarHandler object at 0x7fa041d36730>
DEBUG 2022-02-14 16:38:21,211 on stmt: j = parfor__index_1383
DEBUG 2022-02-14 16:38:21,211 on stmt: id=13[LoopNest(index_variable = parfor_index.1361, range = (0, $214binary_add.10, 1))]{1222: <ir.Block at /home/adi/GBS/gbs/loop_hafnian_batch.py (104)>}Var(parfor_index.1361, loop_hafnian_batch.py:104)
DEBUG 2022-02-14 16:38:21,211 on stmt: kept_edges = call $226load_global.15(j, edge__reps, func=$226load_global.15, args=[Var(j, loop_hafnian_batch.py:102), Var(edge__reps, loop_hafnian_batch.py:95)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:21,211 on stmt: kept_edges_shape.1310 = getattr(value=kept_edges, attr=shape)
DEBUG 2022-02-14 16:38:21,211 on stmt: kept_edges_size0.1311 = static_getitem(value=kept_edges_shape.1310, index=0, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:21,211 on stmt: binom_prod.2.1 = binom_prod
DEBUG 2022-02-14 16:38:21,211 on stmt: id=18[LoopNest(index_variable = parfor_index.1381, range = (0, kept_edges_size0.1311, 1))]{573: <ir.Block at /home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numba/parfors/parfor.py (256)>}Var(parfor_index.1381, parfor.py:256)
DEBUG 2022-02-14 16:38:21,211 on stmt: $258call_function.28 = call $248load_global.23($const250.24, $256binary_floor_divide.27, func=$248load_global.23, args=[Var($const250.24, loop_hafnian_batch.py:110), Var($256binary_floor_divide.27, loop_hafnian_batch.py:110)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:21,211 on stmt: $260get_iter.29 = getiter(value=$258call_function.28)
DEBUG 2022-02-14 16:38:21,211 on stmt: jump 501
DEBUG 2022-02-14 16:38:21,211 ==== SSA block rewrite pass on 1005
DEBUG 2022-02-14 16:38:21,211 Running <numba.core.ssa._FreshVarHandler object at 0x7fa041d36730>
DEBUG 2022-02-14 16:38:21,211 on stmt: N = N__fixed + $N_det.1409
DEBUG 2022-02-14 16:38:21,211 on stmt: $538binary_floor_divide.9 = N // $const536.8
DEBUG 2022-02-14 16:38:21,211 on stmt: $542binary_subtract.11 = $538binary_floor_divide.9 - val.1149
DEBUG 2022-02-14 16:38:21,212 on stmt: plus_minus.1 = $const532.6 ** $542binary_subtract.11
DEBUG 2022-02-14 16:38:21,212 on stmt: $554binary_subtract.16 = $N_det.1409 - $const552.15
DEBUG 2022-02-14 16:38:21,212 on stmt: $558binary_floor_divide.18 = $554binary_subtract.16 // $const556.17
DEBUG 2022-02-14 16:38:21,212 on stmt: $564binary_subscr.21 = static_getitem(value=kept_edges, index=0, index_var=$const562.20, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:21,212 on stmt: $566build_tuple.22 = build_tuple(items=[Var($558binary_floor_divide.18, loop_hafnian_batch.py:135), Var($564binary_subscr.21, loop_hafnian_batch.py:135)])
DEBUG 2022-02-14 16:38:21,212 on stmt: $568binary_subscr.23 = getitem(value=binoms, index=$566build_tuple.22, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:21,212 on stmt: n_det_binom_prod = $568binary_subscr.23 * binom_prod.2.2
DEBUG 2022-02-14 16:38:21,212 on stmt: $580binary_modulo.28 = N % $const578.27
DEBUG 2022-02-14 16:38:21,212 on stmt: $584compare_op.30 = $580binary_modulo.28 == $const582.29
DEBUG 2022-02-14 16:38:21,212 on stmt: $586pred = call bool586($584compare_op.30, func=bool586, args=(Var($584compare_op.30, loop_hafnian_batch.py:137),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:21,212 on stmt: branch $586pred, 1021, 1060
DEBUG 2022-02-14 16:38:21,212 ==== SSA block rewrite pass on 739
DEBUG 2022-02-14 16:38:21,212 Running <numba.core.ssa._FreshVarHandler object at 0x7fa041d36730>
DEBUG 2022-02-14 16:38:21,212 on stmt: oddVX_S0 = call $376load_global.1(delta.2, oddV0, func=$376load_global.1, args=[Var(delta.2, loop_hafnian_batch.py:118), Var(oddV0, loop_hafnian_batch.py:89)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:21,213 on stmt: $396binary_subtract.10 = $392binary_floor_divide.8 - val.1149
DEBUG 2022-02-14 16:38:21,213 on stmt: plus_minus = $const386.5 ** $396binary_subtract.10
DEBUG 2022-02-14 16:38:21,213 on stmt: $418call_function.20 = call $402load_global.12(E, $AX_S.1399, $XD_S.1397, $D_S.1404, N__fixed, oddloop0, oddVX_S0, func=$402load_global.12, args=[Var(E, loop_hafnian_batch.py:120), Var($AX_S.1399, loop_hafnian_batch.py:118), Var($XD_S.1397, loop_hafnian_batch.py:118), Var($D_S.1404, loop_hafnian_batch.py:118), Var(N__fixed, loop_hafnian_batch.py:92), Var(oddloop0, loop_hafnian_batch.py:88), Var(oddVX_S0, loop_hafnian_batch.py:123)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:21,213 on stmt: f = getitem(value=$418call_function.20, index=N__fixed, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:21,213 on stmt: $432binary_subscr.27 = static_getitem(value=H__batch_2.2, index=0, index_var=$const428.24, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:21,213 on stmt: $438binary_multiply.30 = binom_prod.2.2 * plus_minus
DEBUG 2022-02-14 16:38:21,213 on stmt: $442binary_multiply.32 = $438binary_multiply.30 * f
DEBUG 2022-02-14 16:38:21,213 on stmt: $444inplace_add.33 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$432binary_subscr.27, rhs=$442binary_multiply.32, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:38:21,213 on stmt: H__batch_2.2[0] = $444inplace_add.33
DEBUG 2022-02-14 16:38:21,213 on stmt: jump 777
DEBUG 2022-02-14 16:38:21,213 ==== SSA block rewrite pass on 501
DEBUG 2022-02-14 16:38:21,213 Running <numba.core.ssa._FreshVarHandler object at 0x7fa041d36730>
DEBUG 2022-02-14 16:38:21,213 on stmt: binom_prod.2.2 = phi(incoming_values=[Var(binom_prod.2.1, loop_hafnian_batch.py:109), Var(binom_prod.2, loop_hafnian_batch.py:110)], incoming_blocks=[50, 675])
DEBUG 2022-02-14 16:38:21,213 on stmt: $262for_iter.2 = iternext(value=$260get_iter.29)
DEBUG 2022-02-14 16:38:21,213 on stmt: $i.1405 = pair_first(value=$262for_iter.2)
DEBUG 2022-02-14 16:38:21,213 on stmt: $262for_iter.4 = pair_second(value=$262for_iter.2)
DEBUG 2022-02-14 16:38:21,213 on stmt: branch $262for_iter.4, 675, 703
DEBUG 2022-02-14 16:38:21,213 ==== SSA block rewrite pass on 1021
DEBUG 2022-02-14 16:38:21,213 Running <numba.core.ssa._FreshVarHandler object at 0x7fa041d36730>
DEBUG 2022-02-14 16:38:21,214 on stmt: $596binary_subscr.6 = getitem(value=Hnew, index=$N_det.1409, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:21,214 on stmt: $602binary_multiply.9 = n_det_binom_prod * plus_minus.1
DEBUG 2022-02-14 16:38:21,214 on stmt: $610binary_floor_divide.13 = N // $const608.12
DEBUG 2022-02-14 16:38:21,214 on stmt: $612binary_subscr.14 = getitem(value=f_even, index=$610binary_floor_divide.13, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:21,214 on stmt: $614binary_multiply.15 = $602binary_multiply.9 * $612binary_subscr.14
DEBUG 2022-02-14 16:38:21,214 on stmt: $616inplace_add.16 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$596binary_subscr.6, rhs=$614binary_multiply.15, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:38:21,214 on stmt: Hnew[$N_det.1409] = $616inplace_add.16
DEBUG 2022-02-14 16:38:21,214 on stmt: jump 1062
DEBUG 2022-02-14 16:38:21,214 ==== SSA block rewrite pass on 1060
DEBUG 2022-02-14 16:38:21,214 Running <numba.core.ssa._FreshVarHandler object at 0x7fa041d36730>
DEBUG 2022-02-14 16:38:21,214 on stmt: $630binary_subscr.6 = getitem(value=Hnew, index=$N_det.1409, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:21,214 on stmt: $636binary_multiply.9 = n_det_binom_prod * plus_minus.1
DEBUG 2022-02-14 16:38:21,214 on stmt: $642binary_subscr.12 = getitem(value=f_odd, index=N, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:21,214 on stmt: $644binary_multiply.13 = $636binary_multiply.9 * $642binary_subscr.12
DEBUG 2022-02-14 16:38:21,214 on stmt: $646inplace_add.14 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$630binary_subscr.6, rhs=$644binary_multiply.13, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:38:21,214 on stmt: Hnew[$N_det.1409] = $646inplace_add.14
DEBUG 2022-02-14 16:38:21,214 on stmt: jump 1062
DEBUG 2022-02-14 16:38:21,214 ==== SSA block rewrite pass on 1117
DEBUG 2022-02-14 16:38:21,214 Running <numba.core.ssa._FreshVarHandler object at 0x7fa041d36730>
DEBUG 2022-02-14 16:38:21,214 on stmt: jump 40
DEBUG 2022-02-14 16:38:21,215 Replaced assignments: defaultdict(<class 'list'>,
            {707: [<numba.core.ir.Assign object at 0x7fa041d362e0>],
             717: [<numba.core.ir.Assign object at 0x7fa041d23370>]})
DEBUG 2022-02-14 16:38:21,215 ==== SSA block rewrite pass on 0
DEBUG 2022-02-14 16:38:21,215 Running <numba.core.ssa._FixSSAVars object at 0x7fa041d23f70>
DEBUG 2022-02-14 16:38:21,215 on stmt: sched.2060 = arg(0, name=sched)
DEBUG 2022-02-14 16:38:21,215 on stmt: _170binary__add_75 = arg(1, name=_170binary__add_75)
DEBUG 2022-02-14 16:38:21,215 on stmt: A = arg(2, name=A)
DEBUG 2022-02-14 16:38:21,215 on stmt: D = arg(3, name=D)
DEBUG 2022-02-14 16:38:21,215 on stmt: N__fixed = arg(4, name=N__fixed)
DEBUG 2022-02-14 16:38:21,215 on stmt: N__max = arg(5, name=N__max)
DEBUG 2022-02-14 16:38:21,215 on stmt: batch__max = arg(6, name=batch__max)
DEBUG 2022-02-14 16:38:21,215 on stmt: binoms = arg(7, name=binoms)
DEBUG 2022-02-14 16:38:21,215 on stmt: edge__reps = arg(8, name=edge__reps)
DEBUG 2022-02-14 16:38:21,215 on stmt: edge__reps__size0_1303 = arg(9, name=edge__reps__size0_1303)
DEBUG 2022-02-14 16:38:21,215 on stmt: even__cutoff = arg(10, name=even__cutoff)
DEBUG 2022-02-14 16:38:21,215 on stmt: glynn = arg(11, name=glynn)
DEBUG 2022-02-14 16:38:21,215 on stmt: n = arg(12, name=n)
DEBUG 2022-02-14 16:38:21,215 on stmt: oddV = arg(13, name=oddV)
DEBUG 2022-02-14 16:38:21,215 on stmt: oddV0 = arg(14, name=oddV0)
DEBUG 2022-02-14 16:38:21,215 on stmt: oddloop = arg(15, name=oddloop)
DEBUG 2022-02-14 16:38:21,215 on stmt: oddloop0 = arg(16, name=oddloop0)
DEBUG 2022-02-14 16:38:21,215 on stmt: H__batch_2__arr = arg(17, name=H__batch_2__arr)
DEBUG 2022-02-14 16:38:21,215 on stmt: $2load_global.0.2061 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:38:21,216 on stmt: $4load_method.1.2062 = getattr(value=$2load_global.0.2061, attr=copy)
DEBUG 2022-02-14 16:38:21,216 on stmt: H__batch_2 = call $4load_method.1.2062(H__batch_2__arr, func=$4load_method.1.2062, args=[Var(H__batch_2__arr, <string>:2)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:21,216 on stmt: $12load_global.4.2063 = global(range: <class 'range'>)
DEBUG 2022-02-14 16:38:21,216 on stmt: $const16.6.2064 = const(int, 0)
DEBUG 2022-02-14 16:38:21,216 on stmt: $18binary_subscr.7.2065 = getitem(value=sched.2060, index=$const16.6.2064, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:21,216 on stmt: $const22.9.2066 = const(int, 1)
DEBUG 2022-02-14 16:38:21,216 on stmt: $24binary_subscr.10.2067 = getitem(value=sched.2060, index=$const22.9.2066, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:21,216 on stmt: $26load_global.11.2068 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:38:21,216 on stmt: $28load_method.12.2069 = getattr(value=$26load_global.11.2068, attr=uint8)
DEBUG 2022-02-14 16:38:21,216 on stmt: $const30.13.2070 = const(int, 1)
DEBUG 2022-02-14 16:38:21,216 on stmt: $32call_method.14.2071 = call $28load_method.12.2069($const30.13.2070, func=$28load_method.12.2069, args=[Var($const30.13.2070, <string>:3)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:21,216 on stmt: $34binary_add.15.2072 = $24binary_subscr.10.2067 + $32call_method.14.2071
DEBUG 2022-02-14 16:38:21,216 on stmt: $36call_function.16.2073 = call $12load_global.4.2063($18binary_subscr.7.2065, $34binary_add.15.2072, func=$12load_global.4.2063, args=[Var($18binary_subscr.7.2065, <string>:3), Var($34binary_add.15.2072, <string>:3)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:21,216 on stmt: $38get_iter.17.2074 = getiter(value=$36call_function.16.2073)
DEBUG 2022-02-14 16:38:21,216 on stmt: $phi40.0.2075 = $38get_iter.17.2074
DEBUG 2022-02-14 16:38:21,216 on stmt: bool296 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:38:21,216 on stmt: msg.1313 = const(str, Sizes of kept_edges, edge_reps do not match on /home/adi/GBS/gbs/loop_hafnian_batch.py (114))
DEBUG 2022-02-14 16:38:21,216 on stmt: assert.1314 = global(assert_equiv: <intrinsic assert_equiv>)
DEBUG 2022-02-14 16:38:21,216 on stmt: $np_g_var.1367 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:38:21,216 on stmt: $empty_attr_attr.1368 = getattr(value=$np_g_var.1367, attr=empty)
DEBUG 2022-02-14 16:38:21,217 on stmt: $np_typ_var.1369 = getattr(value=$np_g_var.1367, attr=int64)
DEBUG 2022-02-14 16:38:21,217 on stmt: delta = call $empty_attr_attr.1368(edge__reps__size0_1303, $np_typ_var.1369, func=$empty_attr_attr.1368, args=[Var(edge__reps__size0_1303, loop_hafnian_batch.py:95), Var($np_typ_var.1369, loop_hafnian_batch.py:114)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:21,217 on stmt: msg.1344 = const(str, Sizes of H_batch.2, Hnew do not match on /home/adi/GBS/gbs/loop_hafnian_batch.py (142))
DEBUG 2022-02-14 16:38:21,217 on stmt: assert.1345 = global(assert_equiv: <intrinsic assert_equiv>)
DEBUG 2022-02-14 16:38:21,217 on stmt: $318load_global.1 = global(get_submatrices: CPUDispatcher(<function get_submatrices at 0x7fa047ebed30>))
DEBUG 2022-02-14 16:38:21,217 on stmt: $340load_global.12 = global(eigvals: CPUDispatcher(<function eigvals at 0x7fa047e5d430>))
DEBUG 2022-02-14 16:38:21,217 on stmt: $const350.16 = const(int, 0)
DEBUG 2022-02-14 16:38:21,217 on stmt: $const354.18 = const(int, 0)
DEBUG 2022-02-14 16:38:21,217 on stmt: bool358 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:38:21,217 on stmt: $const364.2 = const(int, 1)
DEBUG 2022-02-14 16:38:21,217 on stmt: $const368.4 = const(int, 0)
DEBUG 2022-02-14 16:38:21,217 on stmt: bool372 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:38:21,217 on stmt: $450load_global.1 = global(f_loop: CPUDispatcher(<function f_loop at 0x7fa047ebe9d0>))
DEBUG 2022-02-14 16:38:21,217 on stmt: $466load_global.8 = global(f_loop_odd: CPUDispatcher(<function f_loop_odd at 0x7fa047ebeb80>))
DEBUG 2022-02-14 16:38:21,217 on stmt: $486load_global.17 = global(range: <class 'range'>)
DEBUG 2022-02-14 16:38:21,217 on stmt: $const488.18 = const(int, 2)
DEBUG 2022-02-14 16:38:21,217 on stmt: $const492.20 = const(int, 0)
DEBUG 2022-02-14 16:38:21,217 on stmt: $const498.23 = const(int, 1)
DEBUG 2022-02-14 16:38:21,217 on stmt: $const502.25 = const(int, 2)
DEBUG 2022-02-14 16:38:21,217 on stmt: $506binary_multiply.27 = $const502.25 * batch__max
DEBUG 2022-02-14 16:38:21,217 on stmt: $510binary_add.29 = $506binary_multiply.27 + even__cutoff
DEBUG 2022-02-14 16:38:21,218 on stmt: $const512.30 = const(int, 2)
DEBUG 2022-02-14 16:38:21,218 on stmt: $514binary_add.31 = $510binary_add.29 + $const512.30
DEBUG 2022-02-14 16:38:21,218 on stmt: $const202.4 = const(int, 2)
DEBUG 2022-02-14 16:38:21,218 on stmt: $206binary_multiply.6 = $const202.4 * batch__max
DEBUG 2022-02-14 16:38:21,218 on stmt: $210binary_add.8 = $206binary_multiply.6 + even__cutoff
DEBUG 2022-02-14 16:38:21,218 on stmt: $const212.9 = const(int, 2)
DEBUG 2022-02-14 16:38:21,218 on stmt: $214binary_add.10 = $210binary_add.8 + $const212.9
DEBUG 2022-02-14 16:38:21,218 on stmt: $226load_global.15 = global(find_kept_edges: CPUDispatcher(<function find_kept_edges at 0x7fa047ebe790>))
DEBUG 2022-02-14 16:38:21,218 on stmt: $np_g_var.1362 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:38:21,218 on stmt: $empty_attr_attr.1363 = getattr(value=$np_g_var.1362, attr=empty)
DEBUG 2022-02-14 16:38:21,218 on stmt: $np_typ_var.1364 = getattr(value=$np_g_var.1362, attr=complex128)
DEBUG 2022-02-14 16:38:21,218 on stmt: Hnew = call $empty_attr_attr.1363($214binary_add.10, $np_typ_var.1364, func=$empty_attr_attr.1363, args=[Var($214binary_add.10, loop_hafnian_batch.py:104), Var($np_typ_var.1364, loop_hafnian_batch.py:104)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:21,218 on stmt: binom_prod = const(float, 1.0)
DEBUG 2022-02-14 16:38:21,218 on stmt: $248load_global.23 = global(range: <class 'range'>)
DEBUG 2022-02-14 16:38:21,218 on stmt: $const250.24 = const(int, 1)
DEBUG 2022-02-14 16:38:21,218 on stmt: $const254.26 = const(int, 2)
DEBUG 2022-02-14 16:38:21,218 on stmt: $256binary_floor_divide.27 = n // $const254.26
DEBUG 2022-02-14 16:38:21,218 on stmt: $const532.6 = const(int, -1)
DEBUG 2022-02-14 16:38:21,218 on stmt: $const536.8 = const(int, 2)
DEBUG 2022-02-14 16:38:21,219 on stmt: $const552.15 = const(int, 1)
DEBUG 2022-02-14 16:38:21,219 on stmt: $const556.17 = const(int, 2)
DEBUG 2022-02-14 16:38:21,219 on stmt: $const562.20 = const(int, 0)
DEBUG 2022-02-14 16:38:21,219 on stmt: $const578.27 = const(int, 2)
DEBUG 2022-02-14 16:38:21,219 on stmt: $const582.29 = const(int, 0)
DEBUG 2022-02-14 16:38:21,219 on stmt: bool586 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:38:21,219 on stmt: $376load_global.1 = global(get_submatrix_batch_odd0: CPUDispatcher(<function get_submatrix_batch_odd0 at 0x7fa047ebef70>))
DEBUG 2022-02-14 16:38:21,219 on stmt: $const386.5 = const(int, -1)
DEBUG 2022-02-14 16:38:21,219 on stmt: $const390.7 = const(int, 2)
DEBUG 2022-02-14 16:38:21,219 on stmt: $392binary_floor_divide.8 = N__fixed // $const390.7
DEBUG 2022-02-14 16:38:21,219 on stmt: $402load_global.12 = global(f_loop_odd: CPUDispatcher(<function f_loop_odd at 0x7fa047ebeb80>))
DEBUG 2022-02-14 16:38:21,219 on stmt: $const428.24 = const(int, 0)
DEBUG 2022-02-14 16:38:21,219 on stmt: $const608.12 = const(int, 2)
DEBUG 2022-02-14 16:38:21,219 on stmt: jump 40
DEBUG 2022-02-14 16:38:21,219 ==== SSA block rewrite pass on 40
DEBUG 2022-02-14 16:38:21,219 Running <numba.core.ssa._FixSSAVars object at 0x7fa041d23f70>
DEBUG 2022-02-14 16:38:21,219 on stmt: H__batch_2.2 = phi(incoming_values=[Var(H__batch_2, <string>:2), Var(H__batch_2.1, loop_hafnian_batch.py:142)], incoming_blocks=[0, 1117])
DEBUG 2022-02-14 16:38:21,219 on stmt: $40for_iter.1.2076 = iternext(value=$phi40.0.2075)
DEBUG 2022-02-14 16:38:21,219 on stmt: $40for_iter.2.2077 = pair_first(value=$40for_iter.1.2076)
DEBUG 2022-02-14 16:38:21,219 on stmt: $40for_iter.3.2078 = pair_second(value=$40for_iter.1.2076)
DEBUG 2022-02-14 16:38:21,219 on stmt: $phi42.1.2079 = $40for_iter.2.2077
DEBUG 2022-02-14 16:38:21,219 on stmt: branch $40for_iter.3.2078, 42, 1224
DEBUG 2022-02-14 16:38:21,219 ==== SSA block rewrite pass on 42
DEBUG 2022-02-14 16:38:21,220 Running <numba.core.ssa._FixSSAVars object at 0x7fa041d23f70>
DEBUG 2022-02-14 16:38:21,220 on stmt: parfor__index_1383 = $phi42.1.2079
DEBUG 2022-02-14 16:38:21,220 on stmt: jump 50
DEBUG 2022-02-14 16:38:21,220 ==== SSA block rewrite pass on 1224
DEBUG 2022-02-14 16:38:21,220 Running <numba.core.ssa._FixSSAVars object at 0x7fa041d23f70>
DEBUG 2022-02-14 16:38:21,220 on stmt: $const52.1.2080 = const(NoneType, None)
DEBUG 2022-02-14 16:38:21,220 on stmt: $const54.2.2081 = const(NoneType, None)
DEBUG 2022-02-14 16:38:21,220 on stmt: $56build_slice.3.2082 = global(slice: <class 'slice'>)
DEBUG 2022-02-14 16:38:21,220 on stmt: $56build_slice.4.2083 = call $56build_slice.3.2082($const52.1.2080, $const54.2.2081, func=$56build_slice.3.2082, args=(Var($const52.1.2080, <string>:5), Var($const54.2.2081, <string>:5)), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:21,220 on stmt: $58binary_subscr.5.2084 = getitem(value=H__batch_2.2, index=$56build_slice.4.2083, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:21,220 on stmt: $const62.7.2085 = const(NoneType, None)
DEBUG 2022-02-14 16:38:21,220 on stmt: $const64.8.2086 = const(NoneType, None)
DEBUG 2022-02-14 16:38:21,220 on stmt: $66build_slice.9.2087 = global(slice: <class 'slice'>)
DEBUG 2022-02-14 16:38:21,220 on stmt: $66build_slice.10.2088 = call $66build_slice.9.2087($const62.7.2085, $const64.8.2086, func=$66build_slice.9.2087, args=(Var($const62.7.2085, <string>:5), Var($const64.8.2086, <string>:5)), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:21,220 on stmt: H__batch_2__arr[$66build_slice.10.2088] = $58binary_subscr.5.2084
DEBUG 2022-02-14 16:38:21,220 on stmt: $const70.11.2089 = const(NoneType, None)
DEBUG 2022-02-14 16:38:21,220 on stmt: $72return_value.12.2090 = cast(value=$const70.11.2089)
DEBUG 2022-02-14 16:38:21,220 on stmt: return $72return_value.12.2090
DEBUG 2022-02-14 16:38:21,220 ==== SSA block rewrite pass on 1062
DEBUG 2022-02-14 16:38:21,220 Running <numba.core.ssa._FixSSAVars object at 0x7fa041d23f70>
DEBUG 2022-02-14 16:38:21,220 on stmt: jump 1003
DEBUG 2022-02-14 16:38:21,221 ==== SSA block rewrite pass on 675
DEBUG 2022-02-14 16:38:21,221 Running <numba.core.ssa._FixSSAVars object at 0x7fa041d23f70>
DEBUG 2022-02-14 16:38:21,221 on stmt: $274binary_subscr.7 = getitem(value=edge__reps, index=$i.1405, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:21,221 on stmt: $280binary_subscr.10 = getitem(value=kept_edges, index=$i.1405, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:21,221 on stmt: $282build_tuple.11 = build_tuple(items=[Var($274binary_subscr.7, loop_hafnian_batch.py:111), Var($280binary_subscr.10, loop_hafnian_batch.py:111)])
DEBUG 2022-02-14 16:38:21,221 on stmt: $284binary_subscr.12 = getitem(value=binoms, index=$282build_tuple.11, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:21,221 on stmt: $binom_prod.2.1826 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=binom_prod.2.2, rhs=$284binary_subscr.12, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:38:21,221 on stmt: binom_prod.2 = $binom_prod.2.1826
DEBUG 2022-02-14 16:38:21,221 on stmt: jump 501
DEBUG 2022-02-14 16:38:21,221 ==== SSA block rewrite pass on 703
DEBUG 2022-02-14 16:38:21,221 Running <numba.core.ssa._FixSSAVars object at 0x7fa041d23f70>
DEBUG 2022-02-14 16:38:21,221 on stmt: $296pred = call bool296(glynn, func=bool296, args=(Var(glynn, loop_hafnian_batch.py:83),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:21,221 on stmt: branch $296pred, 707, 717
DEBUG 2022-02-14 16:38:21,221 ==== SSA block rewrite pass on 707
DEBUG 2022-02-14 16:38:21,221 Running <numba.core.ssa._FixSSAVars object at 0x7fa041d23f70>
DEBUG 2022-02-14 16:38:21,221 on stmt: ret.1315 = call assert.1314(msg.1313, kept_edges_size0.1311, edge__reps__size0_1303, func=assert.1314, args=[Var(msg.1313, loop_hafnian_batch.py:114), Var(kept_edges_size0.1311, loop_hafnian_batch.py:106), Var(edge__reps__size0_1303, loop_hafnian_batch.py:95)], kws={}, vararg=None, target=None)
DEBUG 2022-02-14 16:38:21,221 on stmt: id=14[LoopNest(index_variable = parfor_index.1366, range = (0, edge__reps__size0_1303, 1))]{1223: <ir.Block at /home/adi/GBS/gbs/loop_hafnian_batch.py (114)>}Var(parfor_index.1366, loop_hafnian_batch.py:114)
DEBUG 2022-02-14 16:38:21,221 on stmt: delta.2 = delta
DEBUG 2022-02-14 16:38:21,221 on stmt: jump 723
DEBUG 2022-02-14 16:38:21,222 ==== SSA block rewrite pass on 717
DEBUG 2022-02-14 16:38:21,222 Running <numba.core.ssa._FixSSAVars object at 0x7fa041d23f70>
DEBUG 2022-02-14 16:38:21,222 on stmt: delta.2.1 = kept_edges
DEBUG 2022-02-14 16:38:21,222 on stmt: jump 723
DEBUG 2022-02-14 16:38:21,222 ==== SSA block rewrite pass on 1078
DEBUG 2022-02-14 16:38:21,222 Running <numba.core.ssa._FixSSAVars object at 0x7fa041d23f70>
DEBUG 2022-02-14 16:38:21,222 on stmt: ret.1346 = call assert.1345(msg.1344, _170binary__add_75, $214binary_add.10, func=assert.1345, args=[Var(msg.1344, loop_hafnian_batch.py:142), Var(_170binary__add_75, loop_hafnian_batch.py:101), Var($214binary_add.10, loop_hafnian_batch.py:104)], kws={}, vararg=None, target=None)
DEBUG 2022-02-14 16:38:21,222 on stmt: $H_batch.2.1827 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=H__batch_2.2, rhs=Hnew, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:38:21,222 on stmt: H__batch_2.1 = $H_batch.2.1827
DEBUG 2022-02-14 16:38:21,222 on stmt: jump 1117
DEBUG 2022-02-14 16:38:21,222 ==== SSA block rewrite pass on 723
DEBUG 2022-02-14 16:38:21,222 Running <numba.core.ssa._FixSSAVars object at 0x7fa041d23f70>
DEBUG 2022-02-14 16:38:21,222 on stmt: $328call_function.6 = call $318load_global.1(delta.2, A, D, oddV, func=$318load_global.1, args=[Var(delta.2, loop_hafnian_batch.py:118), Var(A, loop_hafnian_batch.py:83), Var(D, loop_hafnian_batch.py:83), Var(oddV, loop_hafnian_batch.py:84)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:21,222 find_def var='delta.2' stmt=$328call_function.6 = call $318load_global.1(delta.2, A, D, oddV, func=$318load_global.1, args=[Var(delta.2, loop_hafnian_batch.py:118), Var(A, loop_hafnian_batch.py:83), Var(D, loop_hafnian_batch.py:83), Var(oddV, loop_hafnian_batch.py:84)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:21,222 find_def_from_top label 723
DEBUG 2022-02-14 16:38:21,222 insert phi node delta.2.2 = phi(incoming_values=[], incoming_blocks=[]) at 723
DEBUG 2022-02-14 16:38:21,222 find_def_from_bottom label 707
DEBUG 2022-02-14 16:38:21,222 incoming_def delta.2 = delta
DEBUG 2022-02-14 16:38:21,222 find_def_from_bottom label 717
DEBUG 2022-02-14 16:38:21,222 incoming_def delta.2.1 = kept_edges
DEBUG 2022-02-14 16:38:21,223 replaced with: $328call_function.6 = call $318load_global.1(delta.2.2, A, D, oddV, func=$318load_global.1, args=[Var(delta.2.2, loop_hafnian_batch.py:118), Var(A, loop_hafnian_batch.py:83), Var(D, loop_hafnian_batch.py:83), Var(oddV, loop_hafnian_batch.py:84)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:21,223 on stmt: $330unpack_sequence.11 = exhaust_iter(value=$328call_function.6, count=4)
DEBUG 2022-02-14 16:38:21,223 on stmt: $AX_S.1399 = static_getitem(value=$330unpack_sequence.11, index=0, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:21,223 on stmt: $XD_S.1397 = static_getitem(value=$330unpack_sequence.11, index=1, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:21,223 on stmt: $D_S.1404 = static_getitem(value=$330unpack_sequence.11, index=2, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:21,223 on stmt: $oddVX_S.1398 = static_getitem(value=$330unpack_sequence.11, index=3, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:21,223 on stmt: E = call $340load_global.12($AX_S.1399, func=$340load_global.12, args=[Var($AX_S.1399, loop_hafnian_batch.py:118)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:21,223 on stmt: $352binary_subscr.17 = static_getitem(value=kept_edges, index=0, index_var=$const350.16, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:21,223 on stmt: $356compare_op.19 = $352binary_subscr.17 == $const354.18
DEBUG 2022-02-14 16:38:21,223 on stmt: $358pred = call bool358($356compare_op.19, func=bool358, args=(Var($356compare_op.19, loop_hafnian_batch.py:122),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:21,223 on stmt: branch $358pred, 737, 777
DEBUG 2022-02-14 16:38:21,223 ==== SSA block rewrite pass on 737
DEBUG 2022-02-14 16:38:21,223 Running <numba.core.ssa._FixSSAVars object at 0x7fa041d23f70>
DEBUG 2022-02-14 16:38:21,223 on stmt: $366binary_subscr.3 = static_getitem(value=kept_edges, index=1, index_var=$const364.2, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:21,224 on stmt: $370compare_op.5 = $366binary_subscr.3 == $const368.4
DEBUG 2022-02-14 16:38:21,224 on stmt: $372pred = call bool372($370compare_op.5, func=bool372, args=(Var($370compare_op.5, loop_hafnian_batch.py:122),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:21,224 on stmt: branch $372pred, 739, 777
DEBUG 2022-02-14 16:38:21,224 ==== SSA block rewrite pass on 777
DEBUG 2022-02-14 16:38:21,224 Running <numba.core.ssa._FixSSAVars object at 0x7fa041d23f70>
DEBUG 2022-02-14 16:38:21,224 on stmt: f_even = call $450load_global.1(E, $AX_S.1399, $XD_S.1397, $D_S.1404, N__max, func=$450load_global.1, args=[Var(E, loop_hafnian_batch.py:120), Var($AX_S.1399, loop_hafnian_batch.py:118), Var($XD_S.1397, loop_hafnian_batch.py:118), Var($D_S.1404, loop_hafnian_batch.py:118), Var(N__max, loop_hafnian_batch.py:93)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:21,224 on stmt: f_odd = call $466load_global.8(E, $AX_S.1399, $XD_S.1397, $D_S.1404, N__max, oddloop, $oddVX_S.1398, func=$466load_global.8, args=[Var(E, loop_hafnian_batch.py:120), Var($AX_S.1399, loop_hafnian_batch.py:118), Var($XD_S.1397, loop_hafnian_batch.py:118), Var($D_S.1404, loop_hafnian_batch.py:118), Var(N__max, loop_hafnian_batch.py:93), Var(oddloop, loop_hafnian_batch.py:83), Var($oddVX_S.1398, loop_hafnian_batch.py:118)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:21,224 on stmt: $494binary_subscr.21 = static_getitem(value=kept_edges, index=0, index_var=$const492.20, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:21,224 on stmt: $496binary_multiply.22 = $const488.18 * $494binary_subscr.21
DEBUG 2022-02-14 16:38:21,224 on stmt: $500binary_add.24 = $496binary_multiply.22 + $const498.23
DEBUG 2022-02-14 16:38:21,224 on stmt: $516call_function.32 = call $486load_global.17($500binary_add.24, $514binary_add.31, func=$486load_global.17, args=[Var($500binary_add.24, loop_hafnian_batch.py:131), Var($514binary_add.31, loop_hafnian_batch.py:131)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:21,224 on stmt: $518get_iter.33 = getiter(value=$516call_function.32)
DEBUG 2022-02-14 16:38:21,224 on stmt: jump 1003
DEBUG 2022-02-14 16:38:21,224 ==== SSA block rewrite pass on 1003
DEBUG 2022-02-14 16:38:21,224 Running <numba.core.ssa._FixSSAVars object at 0x7fa041d23f70>
DEBUG 2022-02-14 16:38:21,225 on stmt: $520for_iter.2 = iternext(value=$518get_iter.33)
DEBUG 2022-02-14 16:38:21,225 on stmt: $N_det.1409 = pair_first(value=$520for_iter.2)
DEBUG 2022-02-14 16:38:21,225 on stmt: $520for_iter.4 = pair_second(value=$520for_iter.2)
DEBUG 2022-02-14 16:38:21,225 on stmt: branch $520for_iter.4, 1005, 1078
DEBUG 2022-02-14 16:38:21,225 ==== SSA block rewrite pass on 50
DEBUG 2022-02-14 16:38:21,225 Running <numba.core.ssa._FixSSAVars object at 0x7fa041d23f70>
DEBUG 2022-02-14 16:38:21,225 on stmt: j = parfor__index_1383
DEBUG 2022-02-14 16:38:21,225 on stmt: id=13[LoopNest(index_variable = parfor_index.1361, range = (0, $214binary_add.10, 1))]{1222: <ir.Block at /home/adi/GBS/gbs/loop_hafnian_batch.py (104)>}Var(parfor_index.1361, loop_hafnian_batch.py:104)
DEBUG 2022-02-14 16:38:21,225 on stmt: kept_edges = call $226load_global.15(j, edge__reps, func=$226load_global.15, args=[Var(j, loop_hafnian_batch.py:102), Var(edge__reps, loop_hafnian_batch.py:95)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:21,225 on stmt: kept_edges_shape.1310 = getattr(value=kept_edges, attr=shape)
DEBUG 2022-02-14 16:38:21,225 on stmt: kept_edges_size0.1311 = static_getitem(value=kept_edges_shape.1310, index=0, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:21,225 on stmt: binom_prod.2.1 = binom_prod
DEBUG 2022-02-14 16:38:21,225 on stmt: id=18[LoopNest(index_variable = parfor_index.1381, range = (0, kept_edges_size0.1311, 1))]{573: <ir.Block at /home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numba/parfors/parfor.py (256)>}Var(parfor_index.1381, parfor.py:256)
DEBUG 2022-02-14 16:38:21,225 on stmt: $258call_function.28 = call $248load_global.23($const250.24, $256binary_floor_divide.27, func=$248load_global.23, args=[Var($const250.24, loop_hafnian_batch.py:110), Var($256binary_floor_divide.27, loop_hafnian_batch.py:110)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:21,226 on stmt: $260get_iter.29 = getiter(value=$258call_function.28)
DEBUG 2022-02-14 16:38:21,226 on stmt: jump 501
DEBUG 2022-02-14 16:38:21,226 ==== SSA block rewrite pass on 1005
DEBUG 2022-02-14 16:38:21,226 Running <numba.core.ssa._FixSSAVars object at 0x7fa041d23f70>
DEBUG 2022-02-14 16:38:21,226 on stmt: N = N__fixed + $N_det.1409
DEBUG 2022-02-14 16:38:21,226 on stmt: $538binary_floor_divide.9 = N // $const536.8
DEBUG 2022-02-14 16:38:21,226 on stmt: $542binary_subtract.11 = $538binary_floor_divide.9 - val.1149
DEBUG 2022-02-14 16:38:21,226 on stmt: plus_minus.1 = $const532.6 ** $542binary_subtract.11
DEBUG 2022-02-14 16:38:21,226 on stmt: $554binary_subtract.16 = $N_det.1409 - $const552.15
DEBUG 2022-02-14 16:38:21,226 on stmt: $558binary_floor_divide.18 = $554binary_subtract.16 // $const556.17
DEBUG 2022-02-14 16:38:21,226 on stmt: $564binary_subscr.21 = static_getitem(value=kept_edges, index=0, index_var=$const562.20, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:21,226 on stmt: $566build_tuple.22 = build_tuple(items=[Var($558binary_floor_divide.18, loop_hafnian_batch.py:135), Var($564binary_subscr.21, loop_hafnian_batch.py:135)])
DEBUG 2022-02-14 16:38:21,226 on stmt: $568binary_subscr.23 = getitem(value=binoms, index=$566build_tuple.22, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:21,226 on stmt: n_det_binom_prod = $568binary_subscr.23 * binom_prod.2.2
DEBUG 2022-02-14 16:38:21,226 on stmt: $580binary_modulo.28 = N % $const578.27
DEBUG 2022-02-14 16:38:21,226 on stmt: $584compare_op.30 = $580binary_modulo.28 == $const582.29
DEBUG 2022-02-14 16:38:21,226 on stmt: $586pred = call bool586($584compare_op.30, func=bool586, args=(Var($584compare_op.30, loop_hafnian_batch.py:137),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:21,227 on stmt: branch $586pred, 1021, 1060
DEBUG 2022-02-14 16:38:21,227 ==== SSA block rewrite pass on 739
DEBUG 2022-02-14 16:38:21,227 Running <numba.core.ssa._FixSSAVars object at 0x7fa041d23f70>
DEBUG 2022-02-14 16:38:21,227 on stmt: oddVX_S0 = call $376load_global.1(delta.2, oddV0, func=$376load_global.1, args=[Var(delta.2, loop_hafnian_batch.py:118), Var(oddV0, loop_hafnian_batch.py:89)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:21,227 find_def var='delta.2' stmt=oddVX_S0 = call $376load_global.1(delta.2, oddV0, func=$376load_global.1, args=[Var(delta.2, loop_hafnian_batch.py:118), Var(oddV0, loop_hafnian_batch.py:89)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:21,227 find_def_from_top label 739
DEBUG 2022-02-14 16:38:21,227 idom 737 from label 739
DEBUG 2022-02-14 16:38:21,227 find_def_from_bottom label 737
DEBUG 2022-02-14 16:38:21,227 find_def_from_top label 737
DEBUG 2022-02-14 16:38:21,227 idom 723 from label 737
DEBUG 2022-02-14 16:38:21,227 find_def_from_bottom label 723
DEBUG 2022-02-14 16:38:21,227 replaced with: oddVX_S0 = call $376load_global.1(delta.2.2, oddV0, func=$376load_global.1, args=[Var(delta.2.2, loop_hafnian_batch.py:118), Var(oddV0, loop_hafnian_batch.py:89)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:21,227 on stmt: $396binary_subtract.10 = $392binary_floor_divide.8 - val.1149
DEBUG 2022-02-14 16:38:21,227 on stmt: plus_minus = $const386.5 ** $396binary_subtract.10
DEBUG 2022-02-14 16:38:21,227 on stmt: $418call_function.20 = call $402load_global.12(E, $AX_S.1399, $XD_S.1397, $D_S.1404, N__fixed, oddloop0, oddVX_S0, func=$402load_global.12, args=[Var(E, loop_hafnian_batch.py:120), Var($AX_S.1399, loop_hafnian_batch.py:118), Var($XD_S.1397, loop_hafnian_batch.py:118), Var($D_S.1404, loop_hafnian_batch.py:118), Var(N__fixed, loop_hafnian_batch.py:92), Var(oddloop0, loop_hafnian_batch.py:88), Var(oddVX_S0, loop_hafnian_batch.py:123)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:21,227 on stmt: f = getitem(value=$418call_function.20, index=N__fixed, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:21,227 on stmt: $432binary_subscr.27 = static_getitem(value=H__batch_2.2, index=0, index_var=$const428.24, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:21,227 on stmt: $438binary_multiply.30 = binom_prod.2.2 * plus_minus
DEBUG 2022-02-14 16:38:21,227 on stmt: $442binary_multiply.32 = $438binary_multiply.30 * f
DEBUG 2022-02-14 16:38:21,227 on stmt: $444inplace_add.33 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$432binary_subscr.27, rhs=$442binary_multiply.32, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:38:21,227 on stmt: H__batch_2.2[0] = $444inplace_add.33
DEBUG 2022-02-14 16:38:21,227 on stmt: jump 777
DEBUG 2022-02-14 16:38:21,228 ==== SSA block rewrite pass on 501
DEBUG 2022-02-14 16:38:21,228 Running <numba.core.ssa._FixSSAVars object at 0x7fa041d23f70>
DEBUG 2022-02-14 16:38:21,228 on stmt: binom_prod.2.2 = phi(incoming_values=[Var(binom_prod.2.1, loop_hafnian_batch.py:109), Var(binom_prod.2, loop_hafnian_batch.py:110)], incoming_blocks=[50, 675])
DEBUG 2022-02-14 16:38:21,228 on stmt: $262for_iter.2 = iternext(value=$260get_iter.29)
DEBUG 2022-02-14 16:38:21,228 on stmt: $i.1405 = pair_first(value=$262for_iter.2)
DEBUG 2022-02-14 16:38:21,228 on stmt: $262for_iter.4 = pair_second(value=$262for_iter.2)
DEBUG 2022-02-14 16:38:21,228 on stmt: branch $262for_iter.4, 675, 703
DEBUG 2022-02-14 16:38:21,228 ==== SSA block rewrite pass on 1021
DEBUG 2022-02-14 16:38:21,228 Running <numba.core.ssa._FixSSAVars object at 0x7fa041d23f70>
DEBUG 2022-02-14 16:38:21,228 on stmt: $596binary_subscr.6 = getitem(value=Hnew, index=$N_det.1409, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:21,228 on stmt: $602binary_multiply.9 = n_det_binom_prod * plus_minus.1
DEBUG 2022-02-14 16:38:21,228 on stmt: $610binary_floor_divide.13 = N // $const608.12
DEBUG 2022-02-14 16:38:21,228 on stmt: $612binary_subscr.14 = getitem(value=f_even, index=$610binary_floor_divide.13, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:21,228 on stmt: $614binary_multiply.15 = $602binary_multiply.9 * $612binary_subscr.14
DEBUG 2022-02-14 16:38:21,228 on stmt: $616inplace_add.16 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$596binary_subscr.6, rhs=$614binary_multiply.15, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:38:21,228 on stmt: Hnew[$N_det.1409] = $616inplace_add.16
DEBUG 2022-02-14 16:38:21,228 on stmt: jump 1062
DEBUG 2022-02-14 16:38:21,228 ==== SSA block rewrite pass on 1060
DEBUG 2022-02-14 16:38:21,228 Running <numba.core.ssa._FixSSAVars object at 0x7fa041d23f70>
DEBUG 2022-02-14 16:38:21,228 on stmt: $630binary_subscr.6 = getitem(value=Hnew, index=$N_det.1409, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:21,228 on stmt: $636binary_multiply.9 = n_det_binom_prod * plus_minus.1
DEBUG 2022-02-14 16:38:21,228 on stmt: $642binary_subscr.12 = getitem(value=f_odd, index=N, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:38:21,228 on stmt: $644binary_multiply.13 = $636binary_multiply.9 * $642binary_subscr.12
DEBUG 2022-02-14 16:38:21,228 on stmt: $646inplace_add.14 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$630binary_subscr.6, rhs=$644binary_multiply.13, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:38:21,229 on stmt: Hnew[$N_det.1409] = $646inplace_add.14
DEBUG 2022-02-14 16:38:21,229 on stmt: jump 1062
DEBUG 2022-02-14 16:38:21,229 ==== SSA block rewrite pass on 1117
DEBUG 2022-02-14 16:38:21,229 Running <numba.core.ssa._FixSSAVars object at 0x7fa041d23f70>
DEBUG 2022-02-14 16:38:21,229 on stmt: jump 40
DEBUG 2022-02-14 16:38:21,764 bytecode dump:
>          0	NOP(arg=None, lineno=217)
           2	LOAD_DEREF(arg=1, lineno=217)
           4	LOAD_CONST(arg=1, lineno=217)
           6	CALL_FUNCTION(arg=1, lineno=217)
           8	STORE_FAST(arg=2, lineno=217)
          10	LOAD_DEREF(arg=1, lineno=218)
          12	LOAD_FAST(arg=0, lineno=218)
          14	CALL_FUNCTION(arg=1, lineno=218)
          16	STORE_FAST(arg=0, lineno=218)
          18	LOAD_FAST(arg=1, lineno=219)
          20	LOAD_CONST(arg=2, lineno=219)
          22	COMPARE_OP(arg=0, lineno=219)
          24	POP_JUMP_IF_FALSE(arg=98, lineno=219)
          26	LOAD_CONST(arg=3, lineno=220)
          28	STORE_FAST(arg=3, lineno=220)
          30	LOAD_FAST(arg=1, lineno=221)
          32	UNARY_NEGATIVE(arg=None, lineno=221)
          34	STORE_FAST(arg=4, lineno=221)
          36	LOAD_FAST(arg=4, lineno=222)
          38	LOAD_CONST(arg=2, lineno=222)
          40	COMPARE_OP(arg=0, lineno=222)
          42	POP_JUMP_IF_FALSE(arg=48, lineno=222)
          44	LOAD_GLOBAL(arg=0, lineno=223)
          46	RAISE_VARARGS(arg=1, lineno=223)
>         48	LOAD_DEREF(arg=0, lineno=224)
          50	POP_JUMP_IF_FALSE(arg=106, lineno=224)
          52	LOAD_FAST(arg=0, lineno=225)
          54	LOAD_CONST(arg=2, lineno=225)
          56	COMPARE_OP(arg=2, lineno=225)
          58	POP_JUMP_IF_FALSE(arg=76, lineno=225)
          60	LOAD_DEREF(arg=2, lineno=226)
          62	POP_JUMP_IF_FALSE(arg=68, lineno=226)
          64	LOAD_DEREF(arg=2, lineno=227)
          66	RETURN_VALUE(arg=None, lineno=227)
>         68	LOAD_GLOBAL(arg=1, lineno=229)
          70	LOAD_CONST(arg=4, lineno=229)
          72	CALL_FUNCTION(arg=1, lineno=229)
          74	RAISE_VARARGS(arg=1, lineno=229)
>         76	LOAD_FAST(arg=0, lineno=230)
          78	LOAD_CONST(arg=1, lineno=230)
          80	COMPARE_OP(arg=3, lineno=230)
          82	POP_JUMP_IF_FALSE(arg=106, lineno=230)
          84	LOAD_FAST(arg=0, lineno=230)
          86	LOAD_CONST(arg=5, lineno=230)
          88	COMPARE_OP(arg=3, lineno=230)
          90	POP_JUMP_IF_FALSE(arg=106, lineno=230)
          92	LOAD_CONST(arg=2, lineno=231)
          94	RETURN_VALUE(arg=None, lineno=231)
          96	JUMP_FORWARD(arg=8, lineno=231)
>         98	LOAD_CONST(arg=6, lineno=233)
         100	STORE_FAST(arg=3, lineno=233)
         102	LOAD_FAST(arg=1, lineno=234)
         104	STORE_FAST(arg=4, lineno=234)
>        106	LOAD_FAST(arg=4, lineno=235)
         108	LOAD_CONST(arg=7, lineno=235)
         110	COMPARE_OP(arg=4, lineno=235)
         112	POP_JUMP_IF_FALSE(arg=130, lineno=235)
         114	LOAD_GLOBAL(arg=2, lineno=237)
         116	LOAD_METHOD(arg=3, lineno=237)
         118	LOAD_FAST(arg=0, lineno=237)
         120	LOAD_GLOBAL(arg=4, lineno=237)
         122	LOAD_FAST(arg=1, lineno=237)
         124	CALL_FUNCTION(arg=1, lineno=237)
         126	CALL_METHOD(arg=2, lineno=237)
         128	RETURN_VALUE(arg=None, lineno=237)
>        130	LOAD_FAST(arg=4, lineno=238)
         132	LOAD_CONST(arg=2, lineno=238)
         134	COMPARE_OP(arg=3, lineno=238)
         136	POP_JUMP_IF_FALSE(arg=172, lineno=238)
         138	LOAD_FAST(arg=4, lineno=239)
         140	LOAD_CONST(arg=1, lineno=239)
         142	BINARY_AND(arg=None, lineno=239)
         144	POP_JUMP_IF_FALSE(arg=154, lineno=239)
         146	LOAD_FAST(arg=2, lineno=240)
         148	LOAD_FAST(arg=0, lineno=240)
         150	INPLACE_MULTIPLY(arg=None, lineno=240)
         152	STORE_FAST(arg=2, lineno=240)
>        154	LOAD_FAST(arg=4, lineno=241)
         156	LOAD_CONST(arg=1, lineno=241)
         158	INPLACE_RSHIFT(arg=None, lineno=241)
         160	STORE_FAST(arg=4, lineno=241)
         162	LOAD_FAST(arg=0, lineno=242)
         164	LOAD_FAST(arg=0, lineno=242)
         166	INPLACE_MULTIPLY(arg=None, lineno=242)
         168	STORE_FAST(arg=0, lineno=242)
         170	JUMP_ABSOLUTE(arg=130, lineno=242)
>        172	LOAD_FAST(arg=3, lineno=244)
         174	POP_JUMP_IF_FALSE(arg=184, lineno=244)
         176	LOAD_CONST(arg=8, lineno=244)
         178	LOAD_FAST(arg=2, lineno=244)
         180	BINARY_TRUE_DIVIDE(arg=None, lineno=244)
         182	RETURN_VALUE(arg=None, lineno=244)
>        184	LOAD_FAST(arg=2, lineno=244)
         186	RETURN_VALUE(arg=None, lineno=244)
DEBUG 2022-02-14 16:38:21,764 pending: deque([State(pc_initial=0 nstack_initial=0)])
DEBUG 2022-02-14 16:38:21,764 stack: []
DEBUG 2022-02-14 16:38:21,764 dispatch pc=0, inst=NOP(arg=None, lineno=217)
DEBUG 2022-02-14 16:38:21,765 stack []
DEBUG 2022-02-14 16:38:21,765 dispatch pc=2, inst=LOAD_DEREF(arg=1, lineno=217)
DEBUG 2022-02-14 16:38:21,765 stack []
DEBUG 2022-02-14 16:38:21,765 dispatch pc=4, inst=LOAD_CONST(arg=1, lineno=217)
DEBUG 2022-02-14 16:38:21,765 stack ['$2load_deref.0']
DEBUG 2022-02-14 16:38:21,765 dispatch pc=6, inst=CALL_FUNCTION(arg=1, lineno=217)
DEBUG 2022-02-14 16:38:21,765 stack ['$2load_deref.0', '$const4.1']
DEBUG 2022-02-14 16:38:21,765 dispatch pc=8, inst=STORE_FAST(arg=2, lineno=217)
DEBUG 2022-02-14 16:38:21,765 stack ['$6call_function.2']
DEBUG 2022-02-14 16:38:21,765 dispatch pc=10, inst=LOAD_DEREF(arg=1, lineno=218)
DEBUG 2022-02-14 16:38:21,765 stack []
DEBUG 2022-02-14 16:38:21,765 dispatch pc=12, inst=LOAD_FAST(arg=0, lineno=218)
DEBUG 2022-02-14 16:38:21,765 stack ['$10load_deref.3']
DEBUG 2022-02-14 16:38:21,765 dispatch pc=14, inst=CALL_FUNCTION(arg=1, lineno=218)
DEBUG 2022-02-14 16:38:21,765 stack ['$10load_deref.3', '$a12.4']
DEBUG 2022-02-14 16:38:21,765 dispatch pc=16, inst=STORE_FAST(arg=0, lineno=218)
DEBUG 2022-02-14 16:38:21,765 stack ['$14call_function.5']
DEBUG 2022-02-14 16:38:21,765 dispatch pc=18, inst=LOAD_FAST(arg=1, lineno=219)
DEBUG 2022-02-14 16:38:21,765 stack []
DEBUG 2022-02-14 16:38:21,765 dispatch pc=20, inst=LOAD_CONST(arg=2, lineno=219)
DEBUG 2022-02-14 16:38:21,765 stack ['$b18.6']
DEBUG 2022-02-14 16:38:21,765 dispatch pc=22, inst=COMPARE_OP(arg=0, lineno=219)
DEBUG 2022-02-14 16:38:21,765 stack ['$b18.6', '$const20.7']
DEBUG 2022-02-14 16:38:21,765 dispatch pc=24, inst=POP_JUMP_IF_FALSE(arg=98, lineno=219)
DEBUG 2022-02-14 16:38:21,765 stack ['$22compare_op.8']
DEBUG 2022-02-14 16:38:21,765 end state. edges=[Edge(pc=26, stack=(), blockstack=(), npush=0), Edge(pc=98, stack=(), blockstack=(), npush=0)]
DEBUG 2022-02-14 16:38:21,766 pending: deque([State(pc_initial=26 nstack_initial=0), State(pc_initial=98 nstack_initial=0)])
DEBUG 2022-02-14 16:38:21,766 stack: []
DEBUG 2022-02-14 16:38:21,766 dispatch pc=26, inst=LOAD_CONST(arg=3, lineno=220)
DEBUG 2022-02-14 16:38:21,766 stack []
DEBUG 2022-02-14 16:38:21,766 dispatch pc=28, inst=STORE_FAST(arg=3, lineno=220)
DEBUG 2022-02-14 16:38:21,766 stack ['$const26.0']
DEBUG 2022-02-14 16:38:21,766 dispatch pc=30, inst=LOAD_FAST(arg=1, lineno=221)
DEBUG 2022-02-14 16:38:21,766 stack []
DEBUG 2022-02-14 16:38:21,766 dispatch pc=32, inst=UNARY_NEGATIVE(arg=None, lineno=221)
DEBUG 2022-02-14 16:38:21,766 stack ['$b30.1']
DEBUG 2022-02-14 16:38:21,766 dispatch pc=34, inst=STORE_FAST(arg=4, lineno=221)
DEBUG 2022-02-14 16:38:21,766 stack ['$32unary_negative.2']
DEBUG 2022-02-14 16:38:21,766 dispatch pc=36, inst=LOAD_FAST(arg=4, lineno=222)
DEBUG 2022-02-14 16:38:21,766 stack []
DEBUG 2022-02-14 16:38:21,766 dispatch pc=38, inst=LOAD_CONST(arg=2, lineno=222)
DEBUG 2022-02-14 16:38:21,766 stack ['$exp36.3']
DEBUG 2022-02-14 16:38:21,766 dispatch pc=40, inst=COMPARE_OP(arg=0, lineno=222)
DEBUG 2022-02-14 16:38:21,766 stack ['$exp36.3', '$const38.4']
DEBUG 2022-02-14 16:38:21,766 dispatch pc=42, inst=POP_JUMP_IF_FALSE(arg=48, lineno=222)
DEBUG 2022-02-14 16:38:21,766 stack ['$40compare_op.5']
DEBUG 2022-02-14 16:38:21,766 end state. edges=[Edge(pc=44, stack=(), blockstack=(), npush=0), Edge(pc=48, stack=(), blockstack=(), npush=0)]
DEBUG 2022-02-14 16:38:21,766 pending: deque([State(pc_initial=98 nstack_initial=0), State(pc_initial=44 nstack_initial=0), State(pc_initial=48 nstack_initial=0)])
DEBUG 2022-02-14 16:38:21,766 stack: []
DEBUG 2022-02-14 16:38:21,766 dispatch pc=98, inst=LOAD_CONST(arg=6, lineno=233)
DEBUG 2022-02-14 16:38:21,766 stack []
DEBUG 2022-02-14 16:38:21,767 dispatch pc=100, inst=STORE_FAST(arg=3, lineno=233)
DEBUG 2022-02-14 16:38:21,767 stack ['$const98.0']
DEBUG 2022-02-14 16:38:21,767 dispatch pc=102, inst=LOAD_FAST(arg=1, lineno=234)
DEBUG 2022-02-14 16:38:21,767 stack []
DEBUG 2022-02-14 16:38:21,767 dispatch pc=104, inst=STORE_FAST(arg=4, lineno=234)
DEBUG 2022-02-14 16:38:21,767 stack ['$b102.1']
DEBUG 2022-02-14 16:38:21,767 end state. edges=[Edge(pc=106, stack=(), blockstack=(), npush=0)]
DEBUG 2022-02-14 16:38:21,767 pending: deque([State(pc_initial=44 nstack_initial=0), State(pc_initial=48 nstack_initial=0), State(pc_initial=106 nstack_initial=0)])
DEBUG 2022-02-14 16:38:21,767 stack: []
DEBUG 2022-02-14 16:38:21,767 dispatch pc=44, inst=LOAD_GLOBAL(arg=0, lineno=223)
DEBUG 2022-02-14 16:38:21,767 stack []
DEBUG 2022-02-14 16:38:21,767 dispatch pc=46, inst=RAISE_VARARGS(arg=1, lineno=223)
DEBUG 2022-02-14 16:38:21,767 stack ['$44load_global.0']
DEBUG 2022-02-14 16:38:21,767 end state. edges=[]
DEBUG 2022-02-14 16:38:21,767 pending: deque([State(pc_initial=48 nstack_initial=0), State(pc_initial=106 nstack_initial=0)])
DEBUG 2022-02-14 16:38:21,767 stack: []
DEBUG 2022-02-14 16:38:21,767 dispatch pc=48, inst=LOAD_DEREF(arg=0, lineno=224)
DEBUG 2022-02-14 16:38:21,767 stack []
DEBUG 2022-02-14 16:38:21,767 dispatch pc=50, inst=POP_JUMP_IF_FALSE(arg=106, lineno=224)
DEBUG 2022-02-14 16:38:21,767 stack ['$48load_deref.0']
DEBUG 2022-02-14 16:38:21,767 end state. edges=[Edge(pc=52, stack=(), blockstack=(), npush=0), Edge(pc=106, stack=(), blockstack=(), npush=0)]
DEBUG 2022-02-14 16:38:21,767 pending: deque([State(pc_initial=106 nstack_initial=0), State(pc_initial=52 nstack_initial=0), State(pc_initial=106 nstack_initial=0)])
DEBUG 2022-02-14 16:38:21,767 stack: []
DEBUG 2022-02-14 16:38:21,767 dispatch pc=106, inst=LOAD_FAST(arg=4, lineno=235)
DEBUG 2022-02-14 16:38:21,768 stack []
DEBUG 2022-02-14 16:38:21,768 dispatch pc=108, inst=LOAD_CONST(arg=7, lineno=235)
DEBUG 2022-02-14 16:38:21,768 stack ['$exp106.0']
DEBUG 2022-02-14 16:38:21,768 dispatch pc=110, inst=COMPARE_OP(arg=4, lineno=235)
DEBUG 2022-02-14 16:38:21,768 stack ['$exp106.0', '$const108.1']
DEBUG 2022-02-14 16:38:21,768 dispatch pc=112, inst=POP_JUMP_IF_FALSE(arg=130, lineno=235)
DEBUG 2022-02-14 16:38:21,768 stack ['$110compare_op.2']
DEBUG 2022-02-14 16:38:21,768 end state. edges=[Edge(pc=114, stack=(), blockstack=(), npush=0), Edge(pc=130, stack=(), blockstack=(), npush=0)]
DEBUG 2022-02-14 16:38:21,768 pending: deque([State(pc_initial=52 nstack_initial=0), State(pc_initial=106 nstack_initial=0), State(pc_initial=114 nstack_initial=0), State(pc_initial=130 nstack_initial=0)])
DEBUG 2022-02-14 16:38:21,768 stack: []
DEBUG 2022-02-14 16:38:21,768 dispatch pc=52, inst=LOAD_FAST(arg=0, lineno=225)
DEBUG 2022-02-14 16:38:21,768 stack []
DEBUG 2022-02-14 16:38:21,768 dispatch pc=54, inst=LOAD_CONST(arg=2, lineno=225)
DEBUG 2022-02-14 16:38:21,768 stack ['$a52.0']
DEBUG 2022-02-14 16:38:21,768 dispatch pc=56, inst=COMPARE_OP(arg=2, lineno=225)
DEBUG 2022-02-14 16:38:21,768 stack ['$a52.0', '$const54.1']
DEBUG 2022-02-14 16:38:21,768 dispatch pc=58, inst=POP_JUMP_IF_FALSE(arg=76, lineno=225)
DEBUG 2022-02-14 16:38:21,768 stack ['$56compare_op.2']
DEBUG 2022-02-14 16:38:21,768 end state. edges=[Edge(pc=60, stack=(), blockstack=(), npush=0), Edge(pc=76, stack=(), blockstack=(), npush=0)]
DEBUG 2022-02-14 16:38:21,768 pending: deque([State(pc_initial=106 nstack_initial=0), State(pc_initial=114 nstack_initial=0), State(pc_initial=130 nstack_initial=0), State(pc_initial=60 nstack_initial=0), State(pc_initial=76 nstack_initial=0)])
DEBUG 2022-02-14 16:38:21,768 pending: deque([State(pc_initial=114 nstack_initial=0), State(pc_initial=130 nstack_initial=0), State(pc_initial=60 nstack_initial=0), State(pc_initial=76 nstack_initial=0)])
DEBUG 2022-02-14 16:38:21,768 stack: []
DEBUG 2022-02-14 16:38:21,768 dispatch pc=114, inst=LOAD_GLOBAL(arg=2, lineno=237)
DEBUG 2022-02-14 16:38:21,768 stack []
DEBUG 2022-02-14 16:38:21,768 dispatch pc=116, inst=LOAD_METHOD(arg=3, lineno=237)
DEBUG 2022-02-14 16:38:21,768 stack ['$114load_global.0']
DEBUG 2022-02-14 16:38:21,769 dispatch pc=118, inst=LOAD_FAST(arg=0, lineno=237)
DEBUG 2022-02-14 16:38:21,769 stack ['$116load_method.1']
DEBUG 2022-02-14 16:38:21,769 dispatch pc=120, inst=LOAD_GLOBAL(arg=4, lineno=237)
DEBUG 2022-02-14 16:38:21,769 stack ['$116load_method.1', '$a118.2']
DEBUG 2022-02-14 16:38:21,769 dispatch pc=122, inst=LOAD_FAST(arg=1, lineno=237)
DEBUG 2022-02-14 16:38:21,769 stack ['$116load_method.1', '$a118.2', '$120load_global.3']
DEBUG 2022-02-14 16:38:21,769 dispatch pc=124, inst=CALL_FUNCTION(arg=1, lineno=237)
DEBUG 2022-02-14 16:38:21,769 stack ['$116load_method.1', '$a118.2', '$120load_global.3', '$b122.4']
DEBUG 2022-02-14 16:38:21,769 dispatch pc=126, inst=CALL_METHOD(arg=2, lineno=237)
DEBUG 2022-02-14 16:38:21,769 stack ['$116load_method.1', '$a118.2', '$124call_function.5']
DEBUG 2022-02-14 16:38:21,769 dispatch pc=128, inst=RETURN_VALUE(arg=None, lineno=237)
DEBUG 2022-02-14 16:38:21,769 stack ['$126call_method.6']
DEBUG 2022-02-14 16:38:21,769 end state. edges=[]
DEBUG 2022-02-14 16:38:21,769 pending: deque([State(pc_initial=130 nstack_initial=0), State(pc_initial=60 nstack_initial=0), State(pc_initial=76 nstack_initial=0)])
DEBUG 2022-02-14 16:38:21,769 stack: []
DEBUG 2022-02-14 16:38:21,769 dispatch pc=130, inst=LOAD_FAST(arg=4, lineno=238)
DEBUG 2022-02-14 16:38:21,769 stack []
DEBUG 2022-02-14 16:38:21,769 dispatch pc=132, inst=LOAD_CONST(arg=2, lineno=238)
DEBUG 2022-02-14 16:38:21,769 stack ['$exp130.0']
DEBUG 2022-02-14 16:38:21,769 dispatch pc=134, inst=COMPARE_OP(arg=3, lineno=238)
DEBUG 2022-02-14 16:38:21,769 stack ['$exp130.0', '$const132.1']
DEBUG 2022-02-14 16:38:21,769 dispatch pc=136, inst=POP_JUMP_IF_FALSE(arg=172, lineno=238)
DEBUG 2022-02-14 16:38:21,769 stack ['$134compare_op.2']
DEBUG 2022-02-14 16:38:21,769 end state. edges=[Edge(pc=138, stack=(), blockstack=(), npush=0), Edge(pc=172, stack=(), blockstack=(), npush=0)]
DEBUG 2022-02-14 16:38:21,769 pending: deque([State(pc_initial=60 nstack_initial=0), State(pc_initial=76 nstack_initial=0), State(pc_initial=138 nstack_initial=0), State(pc_initial=172 nstack_initial=0)])
DEBUG 2022-02-14 16:38:21,769 stack: []
DEBUG 2022-02-14 16:38:21,769 dispatch pc=60, inst=LOAD_DEREF(arg=2, lineno=226)
DEBUG 2022-02-14 16:38:21,770 stack []
DEBUG 2022-02-14 16:38:21,770 dispatch pc=62, inst=POP_JUMP_IF_FALSE(arg=68, lineno=226)
DEBUG 2022-02-14 16:38:21,770 stack ['$60load_deref.0']
DEBUG 2022-02-14 16:38:21,770 end state. edges=[Edge(pc=64, stack=(), blockstack=(), npush=0), Edge(pc=68, stack=(), blockstack=(), npush=0)]
DEBUG 2022-02-14 16:38:21,770 pending: deque([State(pc_initial=76 nstack_initial=0), State(pc_initial=138 nstack_initial=0), State(pc_initial=172 nstack_initial=0), State(pc_initial=64 nstack_initial=0), State(pc_initial=68 nstack_initial=0)])
DEBUG 2022-02-14 16:38:21,770 stack: []
DEBUG 2022-02-14 16:38:21,770 dispatch pc=76, inst=LOAD_FAST(arg=0, lineno=230)
DEBUG 2022-02-14 16:38:21,770 stack []
DEBUG 2022-02-14 16:38:21,770 dispatch pc=78, inst=LOAD_CONST(arg=1, lineno=230)
DEBUG 2022-02-14 16:38:21,770 stack ['$a76.0']
DEBUG 2022-02-14 16:38:21,770 dispatch pc=80, inst=COMPARE_OP(arg=3, lineno=230)
DEBUG 2022-02-14 16:38:21,770 stack ['$a76.0', '$const78.1']
DEBUG 2022-02-14 16:38:21,770 dispatch pc=82, inst=POP_JUMP_IF_FALSE(arg=106, lineno=230)
DEBUG 2022-02-14 16:38:21,770 stack ['$80compare_op.2']
DEBUG 2022-02-14 16:38:21,770 end state. edges=[Edge(pc=84, stack=(), blockstack=(), npush=0), Edge(pc=106, stack=(), blockstack=(), npush=0)]
DEBUG 2022-02-14 16:38:21,770 pending: deque([State(pc_initial=138 nstack_initial=0), State(pc_initial=172 nstack_initial=0), State(pc_initial=64 nstack_initial=0), State(pc_initial=68 nstack_initial=0), State(pc_initial=84 nstack_initial=0), State(pc_initial=106 nstack_initial=0)])
DEBUG 2022-02-14 16:38:21,770 stack: []
DEBUG 2022-02-14 16:38:21,770 dispatch pc=138, inst=LOAD_FAST(arg=4, lineno=239)
DEBUG 2022-02-14 16:38:21,770 stack []
DEBUG 2022-02-14 16:38:21,770 dispatch pc=140, inst=LOAD_CONST(arg=1, lineno=239)
DEBUG 2022-02-14 16:38:21,770 stack ['$exp138.0']
DEBUG 2022-02-14 16:38:21,770 dispatch pc=142, inst=BINARY_AND(arg=None, lineno=239)
DEBUG 2022-02-14 16:38:21,770 stack ['$exp138.0', '$const140.1']
DEBUG 2022-02-14 16:38:21,770 dispatch pc=144, inst=POP_JUMP_IF_FALSE(arg=154, lineno=239)
DEBUG 2022-02-14 16:38:21,770 stack ['$142binary_and.2']
DEBUG 2022-02-14 16:38:21,771 end state. edges=[Edge(pc=146, stack=(), blockstack=(), npush=0), Edge(pc=154, stack=(), blockstack=(), npush=0)]
DEBUG 2022-02-14 16:38:21,771 pending: deque([State(pc_initial=172 nstack_initial=0), State(pc_initial=64 nstack_initial=0), State(pc_initial=68 nstack_initial=0), State(pc_initial=84 nstack_initial=0), State(pc_initial=106 nstack_initial=0), State(pc_initial=146 nstack_initial=0), State(pc_initial=154 nstack_initial=0)])
DEBUG 2022-02-14 16:38:21,771 stack: []
DEBUG 2022-02-14 16:38:21,771 dispatch pc=172, inst=LOAD_FAST(arg=3, lineno=244)
DEBUG 2022-02-14 16:38:21,771 stack []
DEBUG 2022-02-14 16:38:21,771 dispatch pc=174, inst=POP_JUMP_IF_FALSE(arg=184, lineno=244)
DEBUG 2022-02-14 16:38:21,771 stack ['$invert172.0']
DEBUG 2022-02-14 16:38:21,771 end state. edges=[Edge(pc=176, stack=(), blockstack=(), npush=0), Edge(pc=184, stack=(), blockstack=(), npush=0)]
DEBUG 2022-02-14 16:38:21,771 pending: deque([State(pc_initial=64 nstack_initial=0), State(pc_initial=68 nstack_initial=0), State(pc_initial=84 nstack_initial=0), State(pc_initial=106 nstack_initial=0), State(pc_initial=146 nstack_initial=0), State(pc_initial=154 nstack_initial=0), State(pc_initial=176 nstack_initial=0), State(pc_initial=184 nstack_initial=0)])
DEBUG 2022-02-14 16:38:21,771 stack: []
DEBUG 2022-02-14 16:38:21,771 dispatch pc=64, inst=LOAD_DEREF(arg=2, lineno=227)
DEBUG 2022-02-14 16:38:21,771 stack []
DEBUG 2022-02-14 16:38:21,771 dispatch pc=66, inst=RETURN_VALUE(arg=None, lineno=227)
DEBUG 2022-02-14 16:38:21,771 stack ['$64load_deref.0']
DEBUG 2022-02-14 16:38:21,771 end state. edges=[]
DEBUG 2022-02-14 16:38:21,771 pending: deque([State(pc_initial=68 nstack_initial=0), State(pc_initial=84 nstack_initial=0), State(pc_initial=106 nstack_initial=0), State(pc_initial=146 nstack_initial=0), State(pc_initial=154 nstack_initial=0), State(pc_initial=176 nstack_initial=0), State(pc_initial=184 nstack_initial=0)])
DEBUG 2022-02-14 16:38:21,771 stack: []
DEBUG 2022-02-14 16:38:21,771 dispatch pc=68, inst=LOAD_GLOBAL(arg=1, lineno=229)
DEBUG 2022-02-14 16:38:21,771 stack []
DEBUG 2022-02-14 16:38:21,771 dispatch pc=70, inst=LOAD_CONST(arg=4, lineno=229)
DEBUG 2022-02-14 16:38:21,771 stack ['$68load_global.0']
DEBUG 2022-02-14 16:38:21,771 dispatch pc=72, inst=CALL_FUNCTION(arg=1, lineno=229)
DEBUG 2022-02-14 16:38:21,771 stack ['$68load_global.0', '$const70.1']
DEBUG 2022-02-14 16:38:21,771 dispatch pc=74, inst=RAISE_VARARGS(arg=1, lineno=229)
DEBUG 2022-02-14 16:38:21,771 stack ['$72call_function.2']
DEBUG 2022-02-14 16:38:21,772 end state. edges=[]
DEBUG 2022-02-14 16:38:21,772 pending: deque([State(pc_initial=84 nstack_initial=0), State(pc_initial=106 nstack_initial=0), State(pc_initial=146 nstack_initial=0), State(pc_initial=154 nstack_initial=0), State(pc_initial=176 nstack_initial=0), State(pc_initial=184 nstack_initial=0)])
DEBUG 2022-02-14 16:38:21,772 stack: []
DEBUG 2022-02-14 16:38:21,772 dispatch pc=84, inst=LOAD_FAST(arg=0, lineno=230)
DEBUG 2022-02-14 16:38:21,772 stack []
DEBUG 2022-02-14 16:38:21,772 dispatch pc=86, inst=LOAD_CONST(arg=5, lineno=230)
DEBUG 2022-02-14 16:38:21,772 stack ['$a84.0']
DEBUG 2022-02-14 16:38:21,772 dispatch pc=88, inst=COMPARE_OP(arg=3, lineno=230)
DEBUG 2022-02-14 16:38:21,772 stack ['$a84.0', '$const86.1']
DEBUG 2022-02-14 16:38:21,772 dispatch pc=90, inst=POP_JUMP_IF_FALSE(arg=106, lineno=230)
DEBUG 2022-02-14 16:38:21,772 stack ['$88compare_op.2']
DEBUG 2022-02-14 16:38:21,772 end state. edges=[Edge(pc=92, stack=(), blockstack=(), npush=0), Edge(pc=106, stack=(), blockstack=(), npush=0)]
DEBUG 2022-02-14 16:38:21,772 pending: deque([State(pc_initial=106 nstack_initial=0), State(pc_initial=146 nstack_initial=0), State(pc_initial=154 nstack_initial=0), State(pc_initial=176 nstack_initial=0), State(pc_initial=184 nstack_initial=0), State(pc_initial=92 nstack_initial=0), State(pc_initial=106 nstack_initial=0)])
DEBUG 2022-02-14 16:38:21,772 pending: deque([State(pc_initial=146 nstack_initial=0), State(pc_initial=154 nstack_initial=0), State(pc_initial=176 nstack_initial=0), State(pc_initial=184 nstack_initial=0), State(pc_initial=92 nstack_initial=0), State(pc_initial=106 nstack_initial=0)])
DEBUG 2022-02-14 16:38:21,772 stack: []
DEBUG 2022-02-14 16:38:21,772 dispatch pc=146, inst=LOAD_FAST(arg=2, lineno=240)
DEBUG 2022-02-14 16:38:21,772 stack []
DEBUG 2022-02-14 16:38:21,772 dispatch pc=148, inst=LOAD_FAST(arg=0, lineno=240)
DEBUG 2022-02-14 16:38:21,772 stack ['$r146.0']
DEBUG 2022-02-14 16:38:21,772 dispatch pc=150, inst=INPLACE_MULTIPLY(arg=None, lineno=240)
DEBUG 2022-02-14 16:38:21,772 stack ['$r146.0', '$a148.1']
DEBUG 2022-02-14 16:38:21,772 dispatch pc=152, inst=STORE_FAST(arg=2, lineno=240)
DEBUG 2022-02-14 16:38:21,772 stack ['$150inplace_multiply.2']
DEBUG 2022-02-14 16:38:21,772 end state. edges=[Edge(pc=154, stack=(), blockstack=(), npush=0)]
DEBUG 2022-02-14 16:38:21,772 pending: deque([State(pc_initial=154 nstack_initial=0), State(pc_initial=176 nstack_initial=0), State(pc_initial=184 nstack_initial=0), State(pc_initial=92 nstack_initial=0), State(pc_initial=106 nstack_initial=0), State(pc_initial=154 nstack_initial=0)])
DEBUG 2022-02-14 16:38:21,772 stack: []
DEBUG 2022-02-14 16:38:21,772 dispatch pc=154, inst=LOAD_FAST(arg=4, lineno=241)
DEBUG 2022-02-14 16:38:21,773 stack []
DEBUG 2022-02-14 16:38:21,773 dispatch pc=156, inst=LOAD_CONST(arg=1, lineno=241)
DEBUG 2022-02-14 16:38:21,773 stack ['$exp154.0']
DEBUG 2022-02-14 16:38:21,773 dispatch pc=158, inst=INPLACE_RSHIFT(arg=None, lineno=241)
DEBUG 2022-02-14 16:38:21,773 stack ['$exp154.0', '$const156.1']
DEBUG 2022-02-14 16:38:21,773 dispatch pc=160, inst=STORE_FAST(arg=4, lineno=241)
DEBUG 2022-02-14 16:38:21,773 stack ['$158inplace_rshift.2']
DEBUG 2022-02-14 16:38:21,773 dispatch pc=162, inst=LOAD_FAST(arg=0, lineno=242)
DEBUG 2022-02-14 16:38:21,773 stack []
DEBUG 2022-02-14 16:38:21,773 dispatch pc=164, inst=LOAD_FAST(arg=0, lineno=242)
DEBUG 2022-02-14 16:38:21,773 stack ['$a162.3']
DEBUG 2022-02-14 16:38:21,773 dispatch pc=166, inst=INPLACE_MULTIPLY(arg=None, lineno=242)
DEBUG 2022-02-14 16:38:21,773 stack ['$a162.3', '$a164.4']
DEBUG 2022-02-14 16:38:21,773 dispatch pc=168, inst=STORE_FAST(arg=0, lineno=242)
DEBUG 2022-02-14 16:38:21,773 stack ['$166inplace_multiply.5']
DEBUG 2022-02-14 16:38:21,773 dispatch pc=170, inst=JUMP_ABSOLUTE(arg=130, lineno=242)
DEBUG 2022-02-14 16:38:21,773 stack []
DEBUG 2022-02-14 16:38:21,773 end state. edges=[Edge(pc=130, stack=(), blockstack=(), npush=0)]
DEBUG 2022-02-14 16:38:21,773 pending: deque([State(pc_initial=176 nstack_initial=0), State(pc_initial=184 nstack_initial=0), State(pc_initial=92 nstack_initial=0), State(pc_initial=106 nstack_initial=0), State(pc_initial=154 nstack_initial=0), State(pc_initial=130 nstack_initial=0)])
DEBUG 2022-02-14 16:38:21,773 stack: []
DEBUG 2022-02-14 16:38:21,773 dispatch pc=176, inst=LOAD_CONST(arg=8, lineno=244)
DEBUG 2022-02-14 16:38:21,773 stack []
DEBUG 2022-02-14 16:38:21,773 dispatch pc=178, inst=LOAD_FAST(arg=2, lineno=244)
DEBUG 2022-02-14 16:38:21,773 stack ['$const176.0']
DEBUG 2022-02-14 16:38:21,773 dispatch pc=180, inst=BINARY_TRUE_DIVIDE(arg=None, lineno=244)
DEBUG 2022-02-14 16:38:21,773 stack ['$const176.0', '$r178.1']
DEBUG 2022-02-14 16:38:21,773 dispatch pc=182, inst=RETURN_VALUE(arg=None, lineno=244)
DEBUG 2022-02-14 16:38:21,774 stack ['$180binary_true_divide.2']
DEBUG 2022-02-14 16:38:21,774 end state. edges=[]
DEBUG 2022-02-14 16:38:21,774 pending: deque([State(pc_initial=184 nstack_initial=0), State(pc_initial=92 nstack_initial=0), State(pc_initial=106 nstack_initial=0), State(pc_initial=154 nstack_initial=0), State(pc_initial=130 nstack_initial=0)])
DEBUG 2022-02-14 16:38:21,774 stack: []
DEBUG 2022-02-14 16:38:21,774 dispatch pc=184, inst=LOAD_FAST(arg=2, lineno=244)
DEBUG 2022-02-14 16:38:21,774 stack []
DEBUG 2022-02-14 16:38:21,774 dispatch pc=186, inst=RETURN_VALUE(arg=None, lineno=244)
DEBUG 2022-02-14 16:38:21,774 stack ['$r184.0']
DEBUG 2022-02-14 16:38:21,774 end state. edges=[]
DEBUG 2022-02-14 16:38:21,774 pending: deque([State(pc_initial=92 nstack_initial=0), State(pc_initial=106 nstack_initial=0), State(pc_initial=154 nstack_initial=0), State(pc_initial=130 nstack_initial=0)])
DEBUG 2022-02-14 16:38:21,774 stack: []
DEBUG 2022-02-14 16:38:21,774 dispatch pc=92, inst=LOAD_CONST(arg=2, lineno=231)
DEBUG 2022-02-14 16:38:21,774 stack []
DEBUG 2022-02-14 16:38:21,774 dispatch pc=94, inst=RETURN_VALUE(arg=None, lineno=231)
DEBUG 2022-02-14 16:38:21,774 stack ['$const92.0']
DEBUG 2022-02-14 16:38:21,774 end state. edges=[]
DEBUG 2022-02-14 16:38:21,774 pending: deque([State(pc_initial=106 nstack_initial=0), State(pc_initial=154 nstack_initial=0), State(pc_initial=130 nstack_initial=0)])
DEBUG 2022-02-14 16:38:21,774 pending: deque([State(pc_initial=154 nstack_initial=0), State(pc_initial=130 nstack_initial=0)])
DEBUG 2022-02-14 16:38:21,774 pending: deque([State(pc_initial=130 nstack_initial=0)])
DEBUG 2022-02-14 16:38:21,774 -------------------------Prune PHIs-------------------------
DEBUG 2022-02-14 16:38:21,774 Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=26 nstack_initial=0): set(),
             State(pc_initial=44 nstack_initial=0): set(),
             State(pc_initial=48 nstack_initial=0): set(),
             State(pc_initial=52 nstack_initial=0): set(),
             State(pc_initial=60 nstack_initial=0): set(),
             State(pc_initial=64 nstack_initial=0): set(),
             State(pc_initial=68 nstack_initial=0): set(),
             State(pc_initial=76 nstack_initial=0): set(),
             State(pc_initial=84 nstack_initial=0): set(),
             State(pc_initial=92 nstack_initial=0): set(),
             State(pc_initial=98 nstack_initial=0): set(),
             State(pc_initial=106 nstack_initial=0): set(),
             State(pc_initial=114 nstack_initial=0): set(),
             State(pc_initial=130 nstack_initial=0): set(),
             State(pc_initial=138 nstack_initial=0): set(),
             State(pc_initial=146 nstack_initial=0): set(),
             State(pc_initial=154 nstack_initial=0): set(),
             State(pc_initial=172 nstack_initial=0): set(),
             State(pc_initial=176 nstack_initial=0): set(),
             State(pc_initial=184 nstack_initial=0): set()})
DEBUG 2022-02-14 16:38:21,775 defmap: {}
DEBUG 2022-02-14 16:38:21,775 phismap: defaultdict(<class 'set'>, {})
DEBUG 2022-02-14 16:38:21,775 changing phismap: defaultdict(<class 'set'>, {})
DEBUG 2022-02-14 16:38:21,775 keep phismap: {}
DEBUG 2022-02-14 16:38:21,775 new_out: defaultdict(<class 'dict'>, {})
DEBUG 2022-02-14 16:38:21,775 ----------------------DONE Prune PHIs-----------------------
DEBUG 2022-02-14 16:38:21,775 block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$2load_deref.0'}), (4, {'res': '$const4.1'}), (6, {'func': '$2load_deref.0', 'args': ['$const4.1'], 'res': '$6call_function.2'}), (8, {'value': '$6call_function.2'}), (10, {'res': '$10load_deref.3'}), (12, {'res': '$a12.4'}), (14, {'func': '$10load_deref.3', 'args': ['$a12.4'], 'res': '$14call_function.5'}), (16, {'value': '$14call_function.5'}), (18, {'res': '$b18.6'}), (20, {'res': '$const20.7'}), (22, {'lhs': '$b18.6', 'rhs': '$const20.7', 'res': '$22compare_op.8'}), (24, {'pred': '$22compare_op.8'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={26: (), 98: ()})
DEBUG 2022-02-14 16:38:21,775 block_infos State(pc_initial=26 nstack_initial=0):
AdaptBlockInfo(insts=((26, {'res': '$const26.0'}), (28, {'value': '$const26.0'}), (30, {'res': '$b30.1'}), (32, {'value': '$b30.1', 'res': '$32unary_negative.2'}), (34, {'value': '$32unary_negative.2'}), (36, {'res': '$exp36.3'}), (38, {'res': '$const38.4'}), (40, {'lhs': '$exp36.3', 'rhs': '$const38.4', 'res': '$40compare_op.5'}), (42, {'pred': '$40compare_op.5'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={44: (), 48: ()})
DEBUG 2022-02-14 16:38:21,775 block_infos State(pc_initial=44 nstack_initial=0):
AdaptBlockInfo(insts=((44, {'res': '$44load_global.0'}), (46, {'exc': '$44load_global.0'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG 2022-02-14 16:38:21,775 block_infos State(pc_initial=48 nstack_initial=0):
AdaptBlockInfo(insts=((48, {'res': '$48load_deref.0'}), (50, {'pred': '$48load_deref.0'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={52: (), 106: ()})
DEBUG 2022-02-14 16:38:21,775 block_infos State(pc_initial=52 nstack_initial=0):
AdaptBlockInfo(insts=((52, {'res': '$a52.0'}), (54, {'res': '$const54.1'}), (56, {'lhs': '$a52.0', 'rhs': '$const54.1', 'res': '$56compare_op.2'}), (58, {'pred': '$56compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={60: (), 76: ()})
DEBUG 2022-02-14 16:38:21,775 block_infos State(pc_initial=60 nstack_initial=0):
AdaptBlockInfo(insts=((60, {'res': '$60load_deref.0'}), (62, {'pred': '$60load_deref.0'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={64: (), 68: ()})
DEBUG 2022-02-14 16:38:21,775 block_infos State(pc_initial=64 nstack_initial=0):
AdaptBlockInfo(insts=((64, {'res': '$64load_deref.0'}), (66, {'retval': '$64load_deref.0', 'castval': '$66return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG 2022-02-14 16:38:21,776 block_infos State(pc_initial=68 nstack_initial=0):
AdaptBlockInfo(insts=((68, {'res': '$68load_global.0'}), (70, {'res': '$const70.1'}), (72, {'func': '$68load_global.0', 'args': ['$const70.1'], 'res': '$72call_function.2'}), (74, {'exc': '$72call_function.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG 2022-02-14 16:38:21,776 block_infos State(pc_initial=76 nstack_initial=0):
AdaptBlockInfo(insts=((76, {'res': '$a76.0'}), (78, {'res': '$const78.1'}), (80, {'lhs': '$a76.0', 'rhs': '$const78.1', 'res': '$80compare_op.2'}), (82, {'pred': '$80compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={84: (), 106: ()})
DEBUG 2022-02-14 16:38:21,776 block_infos State(pc_initial=84 nstack_initial=0):
AdaptBlockInfo(insts=((84, {'res': '$a84.0'}), (86, {'res': '$const86.1'}), (88, {'lhs': '$a84.0', 'rhs': '$const86.1', 'res': '$88compare_op.2'}), (90, {'pred': '$88compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={92: (), 106: ()})
DEBUG 2022-02-14 16:38:21,776 block_infos State(pc_initial=92 nstack_initial=0):
AdaptBlockInfo(insts=((92, {'res': '$const92.0'}), (94, {'retval': '$const92.0', 'castval': '$94return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG 2022-02-14 16:38:21,776 block_infos State(pc_initial=98 nstack_initial=0):
AdaptBlockInfo(insts=((98, {'res': '$const98.0'}), (100, {'value': '$const98.0'}), (102, {'res': '$b102.1'}), (104, {'value': '$b102.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={106: ()})
DEBUG 2022-02-14 16:38:21,776 block_infos State(pc_initial=106 nstack_initial=0):
AdaptBlockInfo(insts=((106, {'res': '$exp106.0'}), (108, {'res': '$const108.1'}), (110, {'lhs': '$exp106.0', 'rhs': '$const108.1', 'res': '$110compare_op.2'}), (112, {'pred': '$110compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={114: (), 130: ()})
DEBUG 2022-02-14 16:38:21,776 block_infos State(pc_initial=114 nstack_initial=0):
AdaptBlockInfo(insts=((114, {'res': '$114load_global.0'}), (116, {'item': '$114load_global.0', 'res': '$116load_method.1'}), (118, {'res': '$a118.2'}), (120, {'res': '$120load_global.3'}), (122, {'res': '$b122.4'}), (124, {'func': '$120load_global.3', 'args': ['$b122.4'], 'res': '$124call_function.5'}), (126, {'func': '$116load_method.1', 'args': ['$a118.2', '$124call_function.5'], 'res': '$126call_method.6'}), (128, {'retval': '$126call_method.6', 'castval': '$128return_value.7'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG 2022-02-14 16:38:21,776 block_infos State(pc_initial=130 nstack_initial=0):
AdaptBlockInfo(insts=((130, {'res': '$exp130.0'}), (132, {'res': '$const132.1'}), (134, {'lhs': '$exp130.0', 'rhs': '$const132.1', 'res': '$134compare_op.2'}), (136, {'pred': '$134compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={138: (), 172: ()})
DEBUG 2022-02-14 16:38:21,776 block_infos State(pc_initial=138 nstack_initial=0):
AdaptBlockInfo(insts=((138, {'res': '$exp138.0'}), (140, {'res': '$const140.1'}), (142, {'lhs': '$exp138.0', 'rhs': '$const140.1', 'res': '$142binary_and.2'}), (144, {'pred': '$142binary_and.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={146: (), 154: ()})
DEBUG 2022-02-14 16:38:21,776 block_infos State(pc_initial=146 nstack_initial=0):
AdaptBlockInfo(insts=((146, {'res': '$r146.0'}), (148, {'res': '$a148.1'}), (150, {'lhs': '$r146.0', 'rhs': '$a148.1', 'res': '$150inplace_multiply.2'}), (152, {'value': '$150inplace_multiply.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={154: ()})
DEBUG 2022-02-14 16:38:21,776 block_infos State(pc_initial=154 nstack_initial=0):
AdaptBlockInfo(insts=((154, {'res': '$exp154.0'}), (156, {'res': '$const156.1'}), (158, {'lhs': '$exp154.0', 'rhs': '$const156.1', 'res': '$158inplace_rshift.2'}), (160, {'value': '$158inplace_rshift.2'}), (162, {'res': '$a162.3'}), (164, {'res': '$a164.4'}), (166, {'lhs': '$a162.3', 'rhs': '$a164.4', 'res': '$166inplace_multiply.5'}), (168, {'value': '$166inplace_multiply.5'}), (170, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={130: ()})
DEBUG 2022-02-14 16:38:21,776 block_infos State(pc_initial=172 nstack_initial=0):
AdaptBlockInfo(insts=((172, {'res': '$invert172.0'}), (174, {'pred': '$invert172.0'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={176: (), 184: ()})
DEBUG 2022-02-14 16:38:21,776 block_infos State(pc_initial=176 nstack_initial=0):
AdaptBlockInfo(insts=((176, {'res': '$const176.0'}), (178, {'res': '$r178.1'}), (180, {'lhs': '$const176.0', 'rhs': '$r178.1', 'res': '$180binary_true_divide.2'}), (182, {'retval': '$180binary_true_divide.2', 'castval': '$182return_value.3'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG 2022-02-14 16:38:21,776 block_infos State(pc_initial=184 nstack_initial=0):
AdaptBlockInfo(insts=((184, {'res': '$r184.0'}), (186, {'retval': '$r184.0', 'castval': '$186return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG 2022-02-14 16:38:21,778 label 0:
    a = arg(0, name=a)                       ['a']
    b = arg(1, name=b)                       ['b']
    $2load_deref.0 = freevar(tp: int64)      ['$2load_deref.0']
    $const4.1 = const(int, 1)                ['$const4.1']
    r = call $2load_deref.0($const4.1, func=$2load_deref.0, args=[Var($const4.1, numbers.py:217)], kws=(), vararg=None, target=None) ['$2load_deref.0', '$const4.1', 'r']
    $10load_deref.3 = freevar(tp: int64)     ['$10load_deref.3']
    a.1 = call $10load_deref.3(a, func=$10load_deref.3, args=[Var(a, numbers.py:217)], kws=(), vararg=None, target=None) ['$10load_deref.3', 'a', 'a.1']
    $const20.7 = const(int, 0)               ['$const20.7']
    $22compare_op.8 = b < $const20.7         ['$22compare_op.8', '$const20.7', 'b']
    bool24 = global(bool: <class 'bool'>)    ['bool24']
    $24pred = call bool24($22compare_op.8, func=bool24, args=(Var($22compare_op.8, numbers.py:219),), kws=(), vararg=None, target=None) ['$22compare_op.8', '$24pred', 'bool24']
    branch $24pred, 26, 98                   ['$24pred']
label 26:
    invert = const(bool, True)               ['invert']
    exp = unary(fn=<built-in function neg>, value=b) ['b', 'exp']
    $const38.4 = const(int, 0)               ['$const38.4']
    $40compare_op.5 = exp < $const38.4       ['$40compare_op.5', '$const38.4', 'exp']
    bool42 = global(bool: <class 'bool'>)    ['bool42']
    $42pred = call bool42($40compare_op.5, func=bool42, args=(Var($40compare_op.5, numbers.py:222),), kws=(), vararg=None, target=None) ['$40compare_op.5', '$42pred', 'bool42']
    branch $42pred, 44, 48                   ['$42pred']
label 44:
    $44load_global.0 = global(OverflowError: <class 'OverflowError'>) ['$44load_global.0']
    raise $44load_global.0                   ['$44load_global.0']
label 48:
    $48load_deref.0 = freevar(is_integer: True) ['$48load_deref.0']
    bool50 = global(bool: <class 'bool'>)    ['bool50']
    $50pred = call bool50($48load_deref.0, func=bool50, args=(Var($48load_deref.0, numbers.py:224),), kws=(), vararg=None, target=None) ['$48load_deref.0', '$50pred', 'bool50']
    branch $50pred, 52, 106                  ['$50pred']
label 52:
    $const54.1 = const(int, 0)               ['$const54.1']
    $56compare_op.2 = a.1 == $const54.1      ['$56compare_op.2', '$const54.1', 'a.1']
    bool58 = global(bool: <class 'bool'>)    ['bool58']
    $58pred = call bool58($56compare_op.2, func=bool58, args=(Var($56compare_op.2, numbers.py:225),), kws=(), vararg=None, target=None) ['$56compare_op.2', '$58pred', 'bool58']
    branch $58pred, 60, 76                   ['$58pred']
label 60:
    $60load_deref.0 = freevar(zerodiv_return: -9223372036854775808) ['$60load_deref.0']
    bool62 = global(bool: <class 'bool'>)    ['bool62']
    $62pred = call bool62($60load_deref.0, func=bool62, args=(Var($60load_deref.0, numbers.py:226),), kws=(), vararg=None, target=None) ['$60load_deref.0', '$62pred', 'bool62']
    branch $62pred, 64, 68                   ['$62pred']
label 64:
    $64load_deref.0 = freevar(zerodiv_return: -9223372036854775808) ['$64load_deref.0']
    $66return_value.1 = cast(value=$64load_deref.0) ['$64load_deref.0', '$66return_value.1']
    return $66return_value.1                 ['$66return_value.1']
label 68:
    $68load_global.0 = global(ZeroDivisionError: <class 'ZeroDivisionError'>) ['$68load_global.0']
    $const70.1 = const(str, 0 cannot be raised to a negative power) ['$const70.1']
    $72call_function.2 = call $68load_global.0($const70.1, func=$68load_global.0, args=[Var($const70.1, numbers.py:229)], kws=(), vararg=None, target=None) ['$68load_global.0', '$72call_function.2', '$const70.1']
    raise $72call_function.2                 ['$72call_function.2']
label 76:
    $const78.1 = const(int, 1)               ['$const78.1']
    $80compare_op.2 = a.1 != $const78.1      ['$80compare_op.2', '$const78.1', 'a.1']
    bool82 = global(bool: <class 'bool'>)    ['bool82']
    $82pred = call bool82($80compare_op.2, func=bool82, args=(Var($80compare_op.2, numbers.py:230),), kws=(), vararg=None, target=None) ['$80compare_op.2', '$82pred', 'bool82']
    branch $82pred, 84, 106                  ['$82pred']
label 84:
    $const86.1 = const(int, -1)              ['$const86.1']
    $88compare_op.2 = a.1 != $const86.1      ['$88compare_op.2', '$const86.1', 'a.1']
    bool90 = global(bool: <class 'bool'>)    ['bool90']
    $90pred = call bool90($88compare_op.2, func=bool90, args=(Var($88compare_op.2, numbers.py:230),), kws=(), vararg=None, target=None) ['$88compare_op.2', '$90pred', 'bool90']
    branch $90pred, 92, 106                  ['$90pred']
label 92:
    $const92.0 = const(int, 0)               ['$const92.0']
    $94return_value.1 = cast(value=$const92.0) ['$94return_value.1', '$const92.0']
    return $94return_value.1                 ['$94return_value.1']
label 98:
    invert = const(bool, False)              ['invert']
    exp = b                                  ['b', 'exp']
    jump 106                                 []
label 106:
    $const108.1 = const(int, 65536)          ['$const108.1']
    $110compare_op.2 = exp > $const108.1     ['$110compare_op.2', '$const108.1', 'exp']
    bool112 = global(bool: <class 'bool'>)   ['bool112']
    $112pred = call bool112($110compare_op.2, func=bool112, args=(Var($110compare_op.2, numbers.py:235),), kws=(), vararg=None, target=None) ['$110compare_op.2', '$112pred', 'bool112']
    branch $112pred, 114, 130                ['$112pred']
label 114:
    $114load_global.0 = global(math: <module 'math' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/lib-dynload/math.cpython-39-x86_64-linux-gnu.so'>) ['$114load_global.0']
    $116load_method.1 = getattr(value=$114load_global.0, attr=pow) ['$114load_global.0', '$116load_method.1']
    $120load_global.3 = global(float: <class 'float'>) ['$120load_global.3']
    $124call_function.5 = call $120load_global.3(b, func=$120load_global.3, args=[Var(b, numbers.py:217)], kws=(), vararg=None, target=None) ['$120load_global.3', '$124call_function.5', 'b']
    $126call_method.6 = call $116load_method.1(a.1, $124call_function.5, func=$116load_method.1, args=[Var(a.1, numbers.py:218), Var($124call_function.5, numbers.py:237)], kws=(), vararg=None, target=None) ['$116load_method.1', '$124call_function.5', '$126call_method.6', 'a.1']
    $128return_value.7 = cast(value=$126call_method.6) ['$126call_method.6', '$128return_value.7']
    return $128return_value.7                ['$128return_value.7']
label 130:
    $const132.1 = const(int, 0)              ['$const132.1']
    $134compare_op.2 = exp != $const132.1    ['$134compare_op.2', '$const132.1', 'exp']
    bool136 = global(bool: <class 'bool'>)   ['bool136']
    $136pred = call bool136($134compare_op.2, func=bool136, args=(Var($134compare_op.2, numbers.py:238),), kws=(), vararg=None, target=None) ['$134compare_op.2', '$136pred', 'bool136']
    branch $136pred, 138, 172                ['$136pred']
label 138:
    $const140.1 = const(int, 1)              ['$const140.1']
    $142binary_and.2 = exp & $const140.1     ['$142binary_and.2', '$const140.1', 'exp']
    bool144 = global(bool: <class 'bool'>)   ['bool144']
    $144pred = call bool144($142binary_and.2, func=bool144, args=(Var($142binary_and.2, numbers.py:239),), kws=(), vararg=None, target=None) ['$142binary_and.2', '$144pred', 'bool144']
    branch $144pred, 146, 154                ['$144pred']
label 146:
    $150inplace_multiply.2 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=r, rhs=a.1, static_lhs=Undefined, static_rhs=Undefined) ['$150inplace_multiply.2', 'a.1', 'r']
    r = $150inplace_multiply.2               ['$150inplace_multiply.2', 'r']
    jump 154                                 []
label 154:
    $const156.1 = const(int, 1)              ['$const156.1']
    $158inplace_rshift.2 = inplace_binop(fn=<built-in function irshift>, immutable_fn=<built-in function rshift>, lhs=exp, rhs=$const156.1, static_lhs=Undefined, static_rhs=Undefined) ['$158inplace_rshift.2', '$const156.1', 'exp']
    exp = $158inplace_rshift.2               ['$158inplace_rshift.2', 'exp']
    $166inplace_multiply.5 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=a.1, rhs=a.1, static_lhs=Undefined, static_rhs=Undefined) ['$166inplace_multiply.5', 'a.1', 'a.1']
    a.1 = $166inplace_multiply.5             ['$166inplace_multiply.5', 'a.1']
    jump 130                                 []
label 172:
    bool174 = global(bool: <class 'bool'>)   ['bool174']
    $174pred = call bool174(invert, func=bool174, args=(Var(invert, numbers.py:220),), kws=(), vararg=None, target=None) ['$174pred', 'bool174', 'invert']
    branch $174pred, 176, 184                ['$174pred']
label 176:
    $const176.0 = const(float, 1.0)          ['$const176.0']
    $180binary_true_divide.2 = $const176.0 / r ['$180binary_true_divide.2', '$const176.0', 'r']
    $182return_value.3 = cast(value=$180binary_true_divide.2) ['$180binary_true_divide.2', '$182return_value.3']
    return $182return_value.3                ['$182return_value.3']
label 184:
    $186return_value.1 = cast(value=r)       ['$186return_value.1', 'r']
    return $186return_value.1                ['$186return_value.1']

DEBUG 2022-02-14 16:38:21,787 ==== SSA block analysis pass on 0
DEBUG 2022-02-14 16:38:21,787 Running <numba.core.ssa._GatherDefsHandler object at 0x7fa0462ad5e0>
DEBUG 2022-02-14 16:38:21,787 on stmt: a = arg(0, name=a)
DEBUG 2022-02-14 16:38:21,787 on stmt: b = arg(1, name=b)
DEBUG 2022-02-14 16:38:21,787 on stmt: $2load_deref.0 = freevar(tp: int64)
DEBUG 2022-02-14 16:38:21,787 on stmt: $const4.1 = const(int, 1)
DEBUG 2022-02-14 16:38:21,787 on stmt: r = call $2load_deref.0($const4.1, func=$2load_deref.0, args=[Var($const4.1, numbers.py:217)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:21,787 on stmt: $10load_deref.3 = freevar(tp: int64)
DEBUG 2022-02-14 16:38:21,787 on stmt: a.1 = call $10load_deref.3(a, func=$10load_deref.3, args=[Var(a, numbers.py:217)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:21,787 on stmt: $const20.7 = const(int, 0)
DEBUG 2022-02-14 16:38:21,787 on stmt: $22compare_op.8 = b < $const20.7
DEBUG 2022-02-14 16:38:21,787 on stmt: bool24 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:38:21,787 on stmt: $24pred = call bool24($22compare_op.8, func=bool24, args=(Var($22compare_op.8, numbers.py:219),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:21,787 on stmt: branch $24pred, 26, 98
DEBUG 2022-02-14 16:38:21,787 ==== SSA block analysis pass on 26
DEBUG 2022-02-14 16:38:21,787 Running <numba.core.ssa._GatherDefsHandler object at 0x7fa0462ad5e0>
DEBUG 2022-02-14 16:38:21,787 on stmt: invert = const(bool, True)
DEBUG 2022-02-14 16:38:21,787 on stmt: exp = unary(fn=<built-in function neg>, value=b)
DEBUG 2022-02-14 16:38:21,787 on stmt: $const38.4 = const(int, 0)
DEBUG 2022-02-14 16:38:21,788 on stmt: $40compare_op.5 = exp < $const38.4
DEBUG 2022-02-14 16:38:21,788 on stmt: bool42 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:38:21,788 on stmt: $42pred = call bool42($40compare_op.5, func=bool42, args=(Var($40compare_op.5, numbers.py:222),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:21,788 on stmt: branch $42pred, 44, 48
DEBUG 2022-02-14 16:38:21,788 ==== SSA block analysis pass on 44
DEBUG 2022-02-14 16:38:21,788 Running <numba.core.ssa._GatherDefsHandler object at 0x7fa0462ad5e0>
DEBUG 2022-02-14 16:38:21,788 on stmt: $44load_global.0 = global(OverflowError: <class 'OverflowError'>)
DEBUG 2022-02-14 16:38:21,788 on stmt: <static> raise <class 'OverflowError'>
DEBUG 2022-02-14 16:38:21,788 ==== SSA block analysis pass on 48
DEBUG 2022-02-14 16:38:21,788 Running <numba.core.ssa._GatherDefsHandler object at 0x7fa0462ad5e0>
DEBUG 2022-02-14 16:38:21,788 on stmt: $48load_deref.0 = freevar(is_integer: True)
DEBUG 2022-02-14 16:38:21,788 on stmt: bool50 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:38:21,788 on stmt: $50pred = call bool50($48load_deref.0, func=bool50, args=(Var($48load_deref.0, numbers.py:224),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:21,788 on stmt: jump 52
DEBUG 2022-02-14 16:38:21,788 ==== SSA block analysis pass on 52
DEBUG 2022-02-14 16:38:21,788 Running <numba.core.ssa._GatherDefsHandler object at 0x7fa0462ad5e0>
DEBUG 2022-02-14 16:38:21,788 on stmt: $const54.1 = const(int, 0)
DEBUG 2022-02-14 16:38:21,788 on stmt: $56compare_op.2 = a.1 == $const54.1
DEBUG 2022-02-14 16:38:21,788 on stmt: bool58 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:38:21,788 on stmt: $58pred = call bool58($56compare_op.2, func=bool58, args=(Var($56compare_op.2, numbers.py:225),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:21,788 on stmt: branch $58pred, 60, 76
DEBUG 2022-02-14 16:38:21,788 ==== SSA block analysis pass on 60
DEBUG 2022-02-14 16:38:21,788 Running <numba.core.ssa._GatherDefsHandler object at 0x7fa0462ad5e0>
DEBUG 2022-02-14 16:38:21,788 on stmt: $60load_deref.0 = freevar(zerodiv_return: -9223372036854775808)
DEBUG 2022-02-14 16:38:21,788 on stmt: bool62 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:38:21,788 on stmt: $62pred = call bool62($60load_deref.0, func=bool62, args=(Var($60load_deref.0, numbers.py:226),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:21,789 on stmt: jump 64
DEBUG 2022-02-14 16:38:21,789 ==== SSA block analysis pass on 64
DEBUG 2022-02-14 16:38:21,789 Running <numba.core.ssa._GatherDefsHandler object at 0x7fa0462ad5e0>
DEBUG 2022-02-14 16:38:21,789 on stmt: $64load_deref.0 = freevar(zerodiv_return: -9223372036854775808)
DEBUG 2022-02-14 16:38:21,789 on stmt: $66return_value.1 = cast(value=$64load_deref.0)
DEBUG 2022-02-14 16:38:21,789 on stmt: return $66return_value.1
DEBUG 2022-02-14 16:38:21,789 ==== SSA block analysis pass on 76
DEBUG 2022-02-14 16:38:21,789 Running <numba.core.ssa._GatherDefsHandler object at 0x7fa0462ad5e0>
DEBUG 2022-02-14 16:38:21,789 on stmt: $const78.1 = const(int, 1)
DEBUG 2022-02-14 16:38:21,789 on stmt: $80compare_op.2 = a.1 != $const78.1
DEBUG 2022-02-14 16:38:21,789 on stmt: bool82 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:38:21,789 on stmt: $82pred = call bool82($80compare_op.2, func=bool82, args=(Var($80compare_op.2, numbers.py:230),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:21,789 on stmt: branch $82pred, 84, 106
DEBUG 2022-02-14 16:38:21,789 ==== SSA block analysis pass on 84
DEBUG 2022-02-14 16:38:21,789 Running <numba.core.ssa._GatherDefsHandler object at 0x7fa0462ad5e0>
DEBUG 2022-02-14 16:38:21,789 on stmt: $const86.1 = const(int, -1)
DEBUG 2022-02-14 16:38:21,789 on stmt: $88compare_op.2 = a.1 != $const86.1
DEBUG 2022-02-14 16:38:21,789 on stmt: bool90 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:38:21,789 on stmt: $90pred = call bool90($88compare_op.2, func=bool90, args=(Var($88compare_op.2, numbers.py:230),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:21,789 on stmt: branch $90pred, 92, 106
DEBUG 2022-02-14 16:38:21,789 ==== SSA block analysis pass on 92
DEBUG 2022-02-14 16:38:21,789 Running <numba.core.ssa._GatherDefsHandler object at 0x7fa0462ad5e0>
DEBUG 2022-02-14 16:38:21,789 on stmt: $const92.0 = const(int, 0)
DEBUG 2022-02-14 16:38:21,789 on stmt: $94return_value.1 = cast(value=$const92.0)
DEBUG 2022-02-14 16:38:21,789 on stmt: return $94return_value.1
DEBUG 2022-02-14 16:38:21,789 ==== SSA block analysis pass on 98
DEBUG 2022-02-14 16:38:21,790 Running <numba.core.ssa._GatherDefsHandler object at 0x7fa0462ad5e0>
DEBUG 2022-02-14 16:38:21,790 on stmt: invert = const(bool, False)
DEBUG 2022-02-14 16:38:21,790 on stmt: exp = b
DEBUG 2022-02-14 16:38:21,790 on stmt: jump 106
DEBUG 2022-02-14 16:38:21,790 ==== SSA block analysis pass on 106
DEBUG 2022-02-14 16:38:21,790 Running <numba.core.ssa._GatherDefsHandler object at 0x7fa0462ad5e0>
DEBUG 2022-02-14 16:38:21,790 on stmt: $const108.1 = const(int, 65536)
DEBUG 2022-02-14 16:38:21,790 on stmt: $110compare_op.2 = exp > $const108.1
DEBUG 2022-02-14 16:38:21,790 on stmt: bool112 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:38:21,790 on stmt: $112pred = call bool112($110compare_op.2, func=bool112, args=(Var($110compare_op.2, numbers.py:235),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:21,790 on stmt: branch $112pred, 114, 130
DEBUG 2022-02-14 16:38:21,790 ==== SSA block analysis pass on 114
DEBUG 2022-02-14 16:38:21,790 Running <numba.core.ssa._GatherDefsHandler object at 0x7fa0462ad5e0>
DEBUG 2022-02-14 16:38:21,790 on stmt: $114load_global.0 = global(math: <module 'math' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/lib-dynload/math.cpython-39-x86_64-linux-gnu.so'>)
DEBUG 2022-02-14 16:38:21,790 on stmt: $116load_method.1 = getattr(value=$114load_global.0, attr=pow)
DEBUG 2022-02-14 16:38:21,790 on stmt: $120load_global.3 = global(float: <class 'float'>)
DEBUG 2022-02-14 16:38:21,790 on stmt: $124call_function.5 = call $120load_global.3(b, func=$120load_global.3, args=[Var(b, numbers.py:217)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:21,790 on stmt: $126call_method.6 = call $116load_method.1(a.1, $124call_function.5, func=$116load_method.1, args=[Var(a.1, numbers.py:218), Var($124call_function.5, numbers.py:237)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:21,790 on stmt: $128return_value.7 = cast(value=$126call_method.6)
DEBUG 2022-02-14 16:38:21,790 on stmt: return $128return_value.7
DEBUG 2022-02-14 16:38:21,790 ==== SSA block analysis pass on 130
DEBUG 2022-02-14 16:38:21,790 Running <numba.core.ssa._GatherDefsHandler object at 0x7fa0462ad5e0>
DEBUG 2022-02-14 16:38:21,790 on stmt: $const132.1 = const(int, 0)
DEBUG 2022-02-14 16:38:21,790 on stmt: $134compare_op.2 = exp != $const132.1
DEBUG 2022-02-14 16:38:21,790 on stmt: bool136 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:38:21,791 on stmt: $136pred = call bool136($134compare_op.2, func=bool136, args=(Var($134compare_op.2, numbers.py:238),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:21,791 on stmt: branch $136pred, 138, 172
DEBUG 2022-02-14 16:38:21,791 ==== SSA block analysis pass on 138
DEBUG 2022-02-14 16:38:21,791 Running <numba.core.ssa._GatherDefsHandler object at 0x7fa0462ad5e0>
DEBUG 2022-02-14 16:38:21,791 on stmt: $const140.1 = const(int, 1)
DEBUG 2022-02-14 16:38:21,791 on stmt: $142binary_and.2 = exp & $const140.1
DEBUG 2022-02-14 16:38:21,791 on stmt: bool144 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:38:21,791 on stmt: $144pred = call bool144($142binary_and.2, func=bool144, args=(Var($142binary_and.2, numbers.py:239),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:21,791 on stmt: branch $144pred, 146, 154
DEBUG 2022-02-14 16:38:21,791 ==== SSA block analysis pass on 146
DEBUG 2022-02-14 16:38:21,791 Running <numba.core.ssa._GatherDefsHandler object at 0x7fa0462ad5e0>
DEBUG 2022-02-14 16:38:21,791 on stmt: $150inplace_multiply.2 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=r, rhs=a.1, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:38:21,791 on stmt: r = $150inplace_multiply.2
DEBUG 2022-02-14 16:38:21,791 on stmt: jump 154
DEBUG 2022-02-14 16:38:21,791 ==== SSA block analysis pass on 154
DEBUG 2022-02-14 16:38:21,791 Running <numba.core.ssa._GatherDefsHandler object at 0x7fa0462ad5e0>
DEBUG 2022-02-14 16:38:21,791 on stmt: $const156.1 = const(int, 1)
DEBUG 2022-02-14 16:38:21,791 on stmt: $158inplace_rshift.2 = inplace_binop(fn=<built-in function irshift>, immutable_fn=<built-in function rshift>, lhs=exp, rhs=$const156.1, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:38:21,791 on stmt: exp = $158inplace_rshift.2
DEBUG 2022-02-14 16:38:21,791 on stmt: $166inplace_multiply.5 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=a.1, rhs=a.1, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:38:21,791 on stmt: a.1 = $166inplace_multiply.5
DEBUG 2022-02-14 16:38:21,791 on stmt: jump 130
DEBUG 2022-02-14 16:38:21,791 ==== SSA block analysis pass on 172
DEBUG 2022-02-14 16:38:21,791 Running <numba.core.ssa._GatherDefsHandler object at 0x7fa0462ad5e0>
DEBUG 2022-02-14 16:38:21,791 on stmt: bool174 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:38:21,792 on stmt: $174pred = call bool174(invert, func=bool174, args=(Var(invert, numbers.py:220),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:21,792 on stmt: branch $174pred, 176, 184
DEBUG 2022-02-14 16:38:21,792 ==== SSA block analysis pass on 176
DEBUG 2022-02-14 16:38:21,792 Running <numba.core.ssa._GatherDefsHandler object at 0x7fa0462ad5e0>
DEBUG 2022-02-14 16:38:21,792 on stmt: $const176.0 = const(float, 1.0)
DEBUG 2022-02-14 16:38:21,792 on stmt: $180binary_true_divide.2 = $const176.0 / r
DEBUG 2022-02-14 16:38:21,792 on stmt: $182return_value.3 = cast(value=$180binary_true_divide.2)
DEBUG 2022-02-14 16:38:21,792 on stmt: return $182return_value.3
DEBUG 2022-02-14 16:38:21,792 ==== SSA block analysis pass on 184
DEBUG 2022-02-14 16:38:21,792 Running <numba.core.ssa._GatherDefsHandler object at 0x7fa0462ad5e0>
DEBUG 2022-02-14 16:38:21,792 on stmt: $186return_value.1 = cast(value=r)
DEBUG 2022-02-14 16:38:21,792 on stmt: return $186return_value.1
DEBUG 2022-02-14 16:38:21,793 defs defaultdict(<class 'list'>,
            {'$10load_deref.3': [<numba.core.ir.Assign object at 0x7fa0457a92e0>],
             '$110compare_op.2': [<numba.core.ir.Assign object at 0x7fa046062370>],
             '$112pred': [<numba.core.ir.Assign object at 0x7fa0460621f0>],
             '$114load_global.0': [<numba.core.ir.Assign object at 0x7fa045f5c7c0>],
             '$116load_method.1': [<numba.core.ir.Assign object at 0x7fa045f5c2e0>],
             '$120load_global.3': [<numba.core.ir.Assign object at 0x7fa045f12100>],
             '$124call_function.5': [<numba.core.ir.Assign object at 0x7fa045f12c40>],
             '$126call_method.6': [<numba.core.ir.Assign object at 0x7fa046e7c580>],
             '$128return_value.7': [<numba.core.ir.Assign object at 0x7fa046e7c0a0>],
             '$134compare_op.2': [<numba.core.ir.Assign object at 0x7fa0461f09a0>],
             '$136pred': [<numba.core.ir.Assign object at 0x7fa0462b1070>],
             '$142binary_and.2': [<numba.core.ir.Assign object at 0x7fa046c95ac0>],
             '$144pred': [<numba.core.ir.Assign object at 0x7fa046c95ee0>],
             '$150inplace_multiply.2': [<numba.core.ir.Assign object at 0x7fa046e9a070>],
             '$158inplace_rshift.2': [<numba.core.ir.Assign object at 0x7fa0462b6a30>],
             '$166inplace_multiply.5': [<numba.core.ir.Assign object at 0x7fa0462b6dc0>],
             '$174pred': [<numba.core.ir.Assign object at 0x7fa0462b6e80>],
             '$180binary_true_divide.2': [<numba.core.ir.Assign object at 0x7fa0462b40d0>],
             '$182return_value.3': [<numba.core.ir.Assign object at 0x7fa046f2d130>],
             '$186return_value.1': [<numba.core.ir.Assign object at 0x7fa046f2da30>],
             '$22compare_op.8': [<numba.core.ir.Assign object at 0x7fa046045fd0>],
             '$24pred': [<numba.core.ir.Assign object at 0x7fa046045eb0>],
             '$2load_deref.0': [<numba.core.ir.Assign object at 0x7fa046fda2b0>],
             '$40compare_op.5': [<numba.core.ir.Assign object at 0x7fa0457fcd60>],
             '$42pred': [<numba.core.ir.Assign object at 0x7fa0457fcb50>],
             '$44load_global.0': [<numba.core.ir.Assign object at 0x7fa0457fc4f0>],
             '$48load_deref.0': [<numba.core.ir.Assign object at 0x7fa0457fc5b0>],
             '$50pred': [<numba.core.ir.Assign object at 0x7fa0457fc490>],
             '$56compare_op.2': [<numba.core.ir.Assign object at 0x7fa045762eb0>],
             '$58pred': [<numba.core.ir.Assign object at 0x7fa045762be0>],
             '$60load_deref.0': [<numba.core.ir.Assign object at 0x7fa0457629a0>],
             '$62pred': [<numba.core.ir.Assign object at 0x7fa045762580>],
             '$64load_deref.0': [<numba.core.ir.Assign object at 0x7fa045762460>],
             '$66return_value.1': [<numba.core.ir.Assign object at 0x7fa0457622e0>],
             '$80compare_op.2': [<numba.core.ir.Assign object at 0x7fa045ecc1c0>],
             '$82pred': [<numba.core.ir.Assign object at 0x7fa045ecc640>],
             '$88compare_op.2': [<numba.core.ir.Assign object at 0x7fa045eafd60>],
             '$90pred': [<numba.core.ir.Assign object at 0x7fa045e67a90>],
             '$94return_value.1': [<numba.core.ir.Assign object at 0x7fa045e675b0>],
             '$const108.1': [<numba.core.ir.Assign object at 0x7fa046062d00>],
             '$const132.1': [<numba.core.ir.Assign object at 0x7fa046e7c8b0>],
             '$const140.1': [<numba.core.ir.Assign object at 0x7fa041ef1d90>],
             '$const156.1': [<numba.core.ir.Assign object at 0x7fa046382100>],
             '$const176.0': [<numba.core.ir.Assign object at 0x7fa0462b4e80>],
             '$const20.7': [<numba.core.ir.Assign object at 0x7fa046071be0>],
             '$const38.4': [<numba.core.ir.Assign object at 0x7fa0457fcd30>],
             '$const4.1': [<numba.core.ir.Assign object at 0x7fa046d7ca30>],
             '$const54.1': [<numba.core.ir.Assign object at 0x7fa045762ee0>],
             '$const78.1': [<numba.core.ir.Assign object at 0x7fa046fa4d60>],
             '$const86.1': [<numba.core.ir.Assign object at 0x7fa045eaf880>],
             '$const92.0': [<numba.core.ir.Assign object at 0x7fa045e67700>],
             'a': [<numba.core.ir.Assign object at 0x7fa046fda280>],
             'a.1': [<numba.core.ir.Assign object at 0x7fa0457a9100>,
                     <numba.core.ir.Assign object at 0x7fa0462b6610>],
             'b': [<numba.core.ir.Assign object at 0x7fa046fda640>],
             'bool112': [<numba.core.ir.Assign object at 0x7fa046062820>],
             'bool136': [<numba.core.ir.Assign object at 0x7fa0462b1490>],
             'bool144': [<numba.core.ir.Assign object at 0x7fa046c95190>],
             'bool174': [<numba.core.ir.Assign object at 0x7fa0462b6fd0>],
             'bool24': [<numba.core.ir.Assign object at 0x7fa046045cd0>],
             'bool42': [<numba.core.ir.Assign object at 0x7fa0457fca30>],
             'bool50': [<numba.core.ir.Assign object at 0x7fa0457fc370>],
             'bool58': [<numba.core.ir.Assign object at 0x7fa045762b80>],
             'bool62': [<numba.core.ir.Assign object at 0x7fa045762820>],
             'bool82': [<numba.core.ir.Assign object at 0x7fa045eccc40>],
             'bool90': [<numba.core.ir.Assign object at 0x7fa045eafb50>],
             'exp': [<numba.core.ir.Assign object at 0x7fa046045970>,
                     <numba.core.ir.Assign object at 0x7fa0461dfd90>,
                     <numba.core.ir.Assign object at 0x7fa0462b6cd0>],
             'invert': [<numba.core.ir.Assign object at 0x7fa046045a90>,
                        <numba.core.ir.Assign object at 0x7fa046e029a0>],
             'r': [<numba.core.ir.Assign object at 0x7fa0457a9520>,
                   <numba.core.ir.Assign object at 0x7fa046e9a250>]})
DEBUG 2022-02-14 16:38:21,793 SSA violators {'a.1', 'exp', 'invert', 'r'}
DEBUG 2022-02-14 16:38:21,793 Fix SSA violator on var a.1
DEBUG 2022-02-14 16:38:21,793 ==== SSA block rewrite pass on 0
DEBUG 2022-02-14 16:38:21,793 Running <numba.core.ssa._FreshVarHandler object at 0x7fa046fddcd0>
DEBUG 2022-02-14 16:38:21,793 on stmt: a = arg(0, name=a)
DEBUG 2022-02-14 16:38:21,793 on stmt: b = arg(1, name=b)
DEBUG 2022-02-14 16:38:21,793 on stmt: $2load_deref.0 = freevar(tp: int64)
DEBUG 2022-02-14 16:38:21,793 on stmt: $const4.1 = const(int, 1)
DEBUG 2022-02-14 16:38:21,793 on stmt: r = call $2load_deref.0($const4.1, func=$2load_deref.0, args=[Var($const4.1, numbers.py:217)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:21,793 on stmt: $10load_deref.3 = freevar(tp: int64)
DEBUG 2022-02-14 16:38:21,793 on stmt: a.1 = call $10load_deref.3(a, func=$10load_deref.3, args=[Var(a, numbers.py:217)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:21,793 first assign: a.1
DEBUG 2022-02-14 16:38:21,793 replaced with: a.1 = call $10load_deref.3(a, func=$10load_deref.3, args=[Var(a, numbers.py:217)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:21,793 on stmt: $const20.7 = const(int, 0)
DEBUG 2022-02-14 16:38:21,793 on stmt: $22compare_op.8 = b < $const20.7
DEBUG 2022-02-14 16:38:21,793 on stmt: bool24 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:38:21,793 on stmt: $24pred = call bool24($22compare_op.8, func=bool24, args=(Var($22compare_op.8, numbers.py:219),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:21,793 on stmt: branch $24pred, 26, 98
DEBUG 2022-02-14 16:38:21,793 ==== SSA block rewrite pass on 26
DEBUG 2022-02-14 16:38:21,793 Running <numba.core.ssa._FreshVarHandler object at 0x7fa046fddcd0>
DEBUG 2022-02-14 16:38:21,793 on stmt: invert = const(bool, True)
DEBUG 2022-02-14 16:38:21,793 on stmt: exp = unary(fn=<built-in function neg>, value=b)
DEBUG 2022-02-14 16:38:21,793 on stmt: $const38.4 = const(int, 0)
DEBUG 2022-02-14 16:38:21,793 on stmt: $40compare_op.5 = exp < $const38.4
DEBUG 2022-02-14 16:38:21,794 on stmt: bool42 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:38:21,794 on stmt: $42pred = call bool42($40compare_op.5, func=bool42, args=(Var($40compare_op.5, numbers.py:222),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:21,794 on stmt: branch $42pred, 44, 48
DEBUG 2022-02-14 16:38:21,794 ==== SSA block rewrite pass on 44
DEBUG 2022-02-14 16:38:21,794 Running <numba.core.ssa._FreshVarHandler object at 0x7fa046fddcd0>
DEBUG 2022-02-14 16:38:21,794 on stmt: $44load_global.0 = global(OverflowError: <class 'OverflowError'>)
DEBUG 2022-02-14 16:38:21,794 on stmt: <static> raise <class 'OverflowError'>
DEBUG 2022-02-14 16:38:21,794 ==== SSA block rewrite pass on 48
DEBUG 2022-02-14 16:38:21,794 Running <numba.core.ssa._FreshVarHandler object at 0x7fa046fddcd0>
DEBUG 2022-02-14 16:38:21,794 on stmt: $48load_deref.0 = freevar(is_integer: True)
DEBUG 2022-02-14 16:38:21,794 on stmt: bool50 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:38:21,794 on stmt: $50pred = call bool50($48load_deref.0, func=bool50, args=(Var($48load_deref.0, numbers.py:224),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:21,794 on stmt: jump 52
DEBUG 2022-02-14 16:38:21,794 ==== SSA block rewrite pass on 52
DEBUG 2022-02-14 16:38:21,794 Running <numba.core.ssa._FreshVarHandler object at 0x7fa046fddcd0>
DEBUG 2022-02-14 16:38:21,794 on stmt: $const54.1 = const(int, 0)
DEBUG 2022-02-14 16:38:21,794 on stmt: $56compare_op.2 = a.1 == $const54.1
DEBUG 2022-02-14 16:38:21,794 on stmt: bool58 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:38:21,794 on stmt: $58pred = call bool58($56compare_op.2, func=bool58, args=(Var($56compare_op.2, numbers.py:225),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:21,794 on stmt: branch $58pred, 60, 76
DEBUG 2022-02-14 16:38:21,794 ==== SSA block rewrite pass on 60
DEBUG 2022-02-14 16:38:21,794 Running <numba.core.ssa._FreshVarHandler object at 0x7fa046fddcd0>
DEBUG 2022-02-14 16:38:21,794 on stmt: $60load_deref.0 = freevar(zerodiv_return: -9223372036854775808)
DEBUG 2022-02-14 16:38:21,794 on stmt: bool62 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:38:21,794 on stmt: $62pred = call bool62($60load_deref.0, func=bool62, args=(Var($60load_deref.0, numbers.py:226),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:21,794 on stmt: jump 64
DEBUG 2022-02-14 16:38:21,795 ==== SSA block rewrite pass on 64
DEBUG 2022-02-14 16:38:21,795 Running <numba.core.ssa._FreshVarHandler object at 0x7fa046fddcd0>
DEBUG 2022-02-14 16:38:21,795 on stmt: $64load_deref.0 = freevar(zerodiv_return: -9223372036854775808)
DEBUG 2022-02-14 16:38:21,795 on stmt: $66return_value.1 = cast(value=$64load_deref.0)
DEBUG 2022-02-14 16:38:21,795 on stmt: return $66return_value.1
DEBUG 2022-02-14 16:38:21,795 ==== SSA block rewrite pass on 76
DEBUG 2022-02-14 16:38:21,795 Running <numba.core.ssa._FreshVarHandler object at 0x7fa046fddcd0>
DEBUG 2022-02-14 16:38:21,795 on stmt: $const78.1 = const(int, 1)
DEBUG 2022-02-14 16:38:21,795 on stmt: $80compare_op.2 = a.1 != $const78.1
DEBUG 2022-02-14 16:38:21,795 on stmt: bool82 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:38:21,795 on stmt: $82pred = call bool82($80compare_op.2, func=bool82, args=(Var($80compare_op.2, numbers.py:230),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:21,795 on stmt: branch $82pred, 84, 106
DEBUG 2022-02-14 16:38:21,795 ==== SSA block rewrite pass on 84
DEBUG 2022-02-14 16:38:21,795 Running <numba.core.ssa._FreshVarHandler object at 0x7fa046fddcd0>
DEBUG 2022-02-14 16:38:21,795 on stmt: $const86.1 = const(int, -1)
DEBUG 2022-02-14 16:38:21,795 on stmt: $88compare_op.2 = a.1 != $const86.1
DEBUG 2022-02-14 16:38:21,795 on stmt: bool90 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:38:21,795 on stmt: $90pred = call bool90($88compare_op.2, func=bool90, args=(Var($88compare_op.2, numbers.py:230),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:21,795 on stmt: branch $90pred, 92, 106
DEBUG 2022-02-14 16:38:21,795 ==== SSA block rewrite pass on 92
DEBUG 2022-02-14 16:38:21,795 Running <numba.core.ssa._FreshVarHandler object at 0x7fa046fddcd0>
DEBUG 2022-02-14 16:38:21,795 on stmt: $const92.0 = const(int, 0)
DEBUG 2022-02-14 16:38:21,795 on stmt: $94return_value.1 = cast(value=$const92.0)
DEBUG 2022-02-14 16:38:21,795 on stmt: return $94return_value.1
DEBUG 2022-02-14 16:38:21,795 ==== SSA block rewrite pass on 98
DEBUG 2022-02-14 16:38:21,795 Running <numba.core.ssa._FreshVarHandler object at 0x7fa046fddcd0>
DEBUG 2022-02-14 16:38:21,795 on stmt: invert = const(bool, False)
DEBUG 2022-02-14 16:38:21,795 on stmt: exp = b
DEBUG 2022-02-14 16:38:21,796 on stmt: jump 106
DEBUG 2022-02-14 16:38:21,796 ==== SSA block rewrite pass on 106
DEBUG 2022-02-14 16:38:21,796 Running <numba.core.ssa._FreshVarHandler object at 0x7fa046fddcd0>
DEBUG 2022-02-14 16:38:21,796 on stmt: $const108.1 = const(int, 65536)
DEBUG 2022-02-14 16:38:21,796 on stmt: $110compare_op.2 = exp > $const108.1
DEBUG 2022-02-14 16:38:21,796 on stmt: bool112 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:38:21,796 on stmt: $112pred = call bool112($110compare_op.2, func=bool112, args=(Var($110compare_op.2, numbers.py:235),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:21,796 on stmt: branch $112pred, 114, 130
DEBUG 2022-02-14 16:38:21,796 ==== SSA block rewrite pass on 114
DEBUG 2022-02-14 16:38:21,796 Running <numba.core.ssa._FreshVarHandler object at 0x7fa046fddcd0>
DEBUG 2022-02-14 16:38:21,796 on stmt: $114load_global.0 = global(math: <module 'math' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/lib-dynload/math.cpython-39-x86_64-linux-gnu.so'>)
DEBUG 2022-02-14 16:38:21,796 on stmt: $116load_method.1 = getattr(value=$114load_global.0, attr=pow)
DEBUG 2022-02-14 16:38:21,796 on stmt: $120load_global.3 = global(float: <class 'float'>)
DEBUG 2022-02-14 16:38:21,796 on stmt: $124call_function.5 = call $120load_global.3(b, func=$120load_global.3, args=[Var(b, numbers.py:217)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:21,796 on stmt: $126call_method.6 = call $116load_method.1(a.1, $124call_function.5, func=$116load_method.1, args=[Var(a.1, numbers.py:218), Var($124call_function.5, numbers.py:237)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:21,796 on stmt: $128return_value.7 = cast(value=$126call_method.6)
DEBUG 2022-02-14 16:38:21,796 on stmt: return $128return_value.7
DEBUG 2022-02-14 16:38:21,796 ==== SSA block rewrite pass on 130
DEBUG 2022-02-14 16:38:21,796 Running <numba.core.ssa._FreshVarHandler object at 0x7fa046fddcd0>
DEBUG 2022-02-14 16:38:21,796 on stmt: $const132.1 = const(int, 0)
DEBUG 2022-02-14 16:38:21,796 on stmt: $134compare_op.2 = exp != $const132.1
DEBUG 2022-02-14 16:38:21,796 on stmt: bool136 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:38:21,796 on stmt: $136pred = call bool136($134compare_op.2, func=bool136, args=(Var($134compare_op.2, numbers.py:238),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:21,796 on stmt: branch $136pred, 138, 172
DEBUG 2022-02-14 16:38:21,796 ==== SSA block rewrite pass on 138
DEBUG 2022-02-14 16:38:21,796 Running <numba.core.ssa._FreshVarHandler object at 0x7fa046fddcd0>
DEBUG 2022-02-14 16:38:21,796 on stmt: $const140.1 = const(int, 1)
DEBUG 2022-02-14 16:38:21,797 on stmt: $142binary_and.2 = exp & $const140.1
DEBUG 2022-02-14 16:38:21,797 on stmt: bool144 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:38:21,797 on stmt: $144pred = call bool144($142binary_and.2, func=bool144, args=(Var($142binary_and.2, numbers.py:239),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:21,797 on stmt: branch $144pred, 146, 154
DEBUG 2022-02-14 16:38:21,797 ==== SSA block rewrite pass on 146
DEBUG 2022-02-14 16:38:21,797 Running <numba.core.ssa._FreshVarHandler object at 0x7fa046fddcd0>
DEBUG 2022-02-14 16:38:21,797 on stmt: $150inplace_multiply.2 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=r, rhs=a.1, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:38:21,797 on stmt: r = $150inplace_multiply.2
DEBUG 2022-02-14 16:38:21,797 on stmt: jump 154
DEBUG 2022-02-14 16:38:21,797 ==== SSA block rewrite pass on 154
DEBUG 2022-02-14 16:38:21,797 Running <numba.core.ssa._FreshVarHandler object at 0x7fa046fddcd0>
DEBUG 2022-02-14 16:38:21,797 on stmt: $const156.1 = const(int, 1)
DEBUG 2022-02-14 16:38:21,797 on stmt: $158inplace_rshift.2 = inplace_binop(fn=<built-in function irshift>, immutable_fn=<built-in function rshift>, lhs=exp, rhs=$const156.1, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:38:21,797 on stmt: exp = $158inplace_rshift.2
DEBUG 2022-02-14 16:38:21,797 on stmt: $166inplace_multiply.5 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=a.1, rhs=a.1, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:38:21,797 on stmt: a.1 = $166inplace_multiply.5
DEBUG 2022-02-14 16:38:21,797 replaced with: a.1.1 = $166inplace_multiply.5
DEBUG 2022-02-14 16:38:21,797 on stmt: jump 130
DEBUG 2022-02-14 16:38:21,797 ==== SSA block rewrite pass on 172
DEBUG 2022-02-14 16:38:21,797 Running <numba.core.ssa._FreshVarHandler object at 0x7fa046fddcd0>
DEBUG 2022-02-14 16:38:21,797 on stmt: bool174 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:38:21,797 on stmt: $174pred = call bool174(invert, func=bool174, args=(Var(invert, numbers.py:220),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:21,797 on stmt: branch $174pred, 176, 184
DEBUG 2022-02-14 16:38:21,797 ==== SSA block rewrite pass on 176
DEBUG 2022-02-14 16:38:21,797 Running <numba.core.ssa._FreshVarHandler object at 0x7fa046fddcd0>
DEBUG 2022-02-14 16:38:21,797 on stmt: $const176.0 = const(float, 1.0)
DEBUG 2022-02-14 16:38:21,797 on stmt: $180binary_true_divide.2 = $const176.0 / r
DEBUG 2022-02-14 16:38:21,797 on stmt: $182return_value.3 = cast(value=$180binary_true_divide.2)
DEBUG 2022-02-14 16:38:21,797 on stmt: return $182return_value.3
DEBUG 2022-02-14 16:38:21,798 ==== SSA block rewrite pass on 184
DEBUG 2022-02-14 16:38:21,798 Running <numba.core.ssa._FreshVarHandler object at 0x7fa046fddcd0>
DEBUG 2022-02-14 16:38:21,798 on stmt: $186return_value.1 = cast(value=r)
DEBUG 2022-02-14 16:38:21,798 on stmt: return $186return_value.1
DEBUG 2022-02-14 16:38:21,798 Replaced assignments: defaultdict(<class 'list'>,
            {0: [<numba.core.ir.Assign object at 0x7fa046fdd580>],
             154: [<numba.core.ir.Assign object at 0x7fa0462ba760>]})
DEBUG 2022-02-14 16:38:21,798 ==== SSA block rewrite pass on 0
DEBUG 2022-02-14 16:38:21,798 Running <numba.core.ssa._FixSSAVars object at 0x7fa046fddcd0>
DEBUG 2022-02-14 16:38:21,798 on stmt: a = arg(0, name=a)
DEBUG 2022-02-14 16:38:21,798 on stmt: b = arg(1, name=b)
DEBUG 2022-02-14 16:38:21,798 on stmt: $2load_deref.0 = freevar(tp: int64)
DEBUG 2022-02-14 16:38:21,798 on stmt: $const4.1 = const(int, 1)
DEBUG 2022-02-14 16:38:21,798 on stmt: r = call $2load_deref.0($const4.1, func=$2load_deref.0, args=[Var($const4.1, numbers.py:217)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:21,798 on stmt: $10load_deref.3 = freevar(tp: int64)
DEBUG 2022-02-14 16:38:21,798 on stmt: a.1 = call $10load_deref.3(a, func=$10load_deref.3, args=[Var(a, numbers.py:217)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:21,798 on stmt: $const20.7 = const(int, 0)
DEBUG 2022-02-14 16:38:21,798 on stmt: $22compare_op.8 = b < $const20.7
DEBUG 2022-02-14 16:38:21,798 on stmt: bool24 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:38:21,798 on stmt: $24pred = call bool24($22compare_op.8, func=bool24, args=(Var($22compare_op.8, numbers.py:219),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:21,798 on stmt: branch $24pred, 26, 98
DEBUG 2022-02-14 16:38:21,798 ==== SSA block rewrite pass on 26
DEBUG 2022-02-14 16:38:21,798 Running <numba.core.ssa._FixSSAVars object at 0x7fa046fddcd0>
DEBUG 2022-02-14 16:38:21,798 on stmt: invert = const(bool, True)
DEBUG 2022-02-14 16:38:21,798 on stmt: exp = unary(fn=<built-in function neg>, value=b)
DEBUG 2022-02-14 16:38:21,799 on stmt: $const38.4 = const(int, 0)
DEBUG 2022-02-14 16:38:21,799 on stmt: $40compare_op.5 = exp < $const38.4
DEBUG 2022-02-14 16:38:21,799 on stmt: bool42 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:38:21,799 on stmt: $42pred = call bool42($40compare_op.5, func=bool42, args=(Var($40compare_op.5, numbers.py:222),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:21,799 on stmt: branch $42pred, 44, 48
DEBUG 2022-02-14 16:38:21,799 ==== SSA block rewrite pass on 44
DEBUG 2022-02-14 16:38:21,799 Running <numba.core.ssa._FixSSAVars object at 0x7fa046fddcd0>
DEBUG 2022-02-14 16:38:21,799 on stmt: $44load_global.0 = global(OverflowError: <class 'OverflowError'>)
DEBUG 2022-02-14 16:38:21,799 on stmt: <static> raise <class 'OverflowError'>
DEBUG 2022-02-14 16:38:21,799 ==== SSA block rewrite pass on 48
DEBUG 2022-02-14 16:38:21,799 Running <numba.core.ssa._FixSSAVars object at 0x7fa046fddcd0>
DEBUG 2022-02-14 16:38:21,799 on stmt: $48load_deref.0 = freevar(is_integer: True)
DEBUG 2022-02-14 16:38:21,799 on stmt: bool50 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:38:21,799 on stmt: $50pred = call bool50($48load_deref.0, func=bool50, args=(Var($48load_deref.0, numbers.py:224),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:21,799 on stmt: jump 52
DEBUG 2022-02-14 16:38:21,799 ==== SSA block rewrite pass on 52
DEBUG 2022-02-14 16:38:21,799 Running <numba.core.ssa._FixSSAVars object at 0x7fa046fddcd0>
DEBUG 2022-02-14 16:38:21,799 on stmt: $const54.1 = const(int, 0)
DEBUG 2022-02-14 16:38:21,799 on stmt: $56compare_op.2 = a.1 == $const54.1
DEBUG 2022-02-14 16:38:21,799 find_def var='a.1' stmt=$56compare_op.2 = a.1 == $const54.1
DEBUG 2022-02-14 16:38:21,799 find_def_from_top label 52
DEBUG 2022-02-14 16:38:21,799 idom 48 from label 52
DEBUG 2022-02-14 16:38:21,799 find_def_from_bottom label 48
DEBUG 2022-02-14 16:38:21,799 find_def_from_top label 48
DEBUG 2022-02-14 16:38:21,799 idom 26 from label 48
DEBUG 2022-02-14 16:38:21,799 find_def_from_bottom label 26
DEBUG 2022-02-14 16:38:21,799 find_def_from_top label 26
DEBUG 2022-02-14 16:38:21,800 idom 0 from label 26
DEBUG 2022-02-14 16:38:21,800 find_def_from_bottom label 0
DEBUG 2022-02-14 16:38:21,800 on stmt: bool58 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:38:21,800 on stmt: $58pred = call bool58($56compare_op.2, func=bool58, args=(Var($56compare_op.2, numbers.py:225),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:21,800 on stmt: branch $58pred, 60, 76
DEBUG 2022-02-14 16:38:21,800 ==== SSA block rewrite pass on 60
DEBUG 2022-02-14 16:38:21,800 Running <numba.core.ssa._FixSSAVars object at 0x7fa046fddcd0>
DEBUG 2022-02-14 16:38:21,800 on stmt: $60load_deref.0 = freevar(zerodiv_return: -9223372036854775808)
DEBUG 2022-02-14 16:38:21,800 on stmt: bool62 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:38:21,800 on stmt: $62pred = call bool62($60load_deref.0, func=bool62, args=(Var($60load_deref.0, numbers.py:226),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:21,800 on stmt: jump 64
DEBUG 2022-02-14 16:38:21,800 ==== SSA block rewrite pass on 64
DEBUG 2022-02-14 16:38:21,800 Running <numba.core.ssa._FixSSAVars object at 0x7fa046fddcd0>
DEBUG 2022-02-14 16:38:21,800 on stmt: $64load_deref.0 = freevar(zerodiv_return: -9223372036854775808)
DEBUG 2022-02-14 16:38:21,800 on stmt: $66return_value.1 = cast(value=$64load_deref.0)
DEBUG 2022-02-14 16:38:21,800 on stmt: return $66return_value.1
DEBUG 2022-02-14 16:38:21,800 ==== SSA block rewrite pass on 76
DEBUG 2022-02-14 16:38:21,800 Running <numba.core.ssa._FixSSAVars object at 0x7fa046fddcd0>
DEBUG 2022-02-14 16:38:21,800 on stmt: $const78.1 = const(int, 1)
DEBUG 2022-02-14 16:38:21,800 on stmt: $80compare_op.2 = a.1 != $const78.1
DEBUG 2022-02-14 16:38:21,800 find_def var='a.1' stmt=$80compare_op.2 = a.1 != $const78.1
DEBUG 2022-02-14 16:38:21,800 find_def_from_top label 76
DEBUG 2022-02-14 16:38:21,800 idom 52 from label 76
DEBUG 2022-02-14 16:38:21,800 find_def_from_bottom label 52
DEBUG 2022-02-14 16:38:21,800 find_def_from_top label 52
DEBUG 2022-02-14 16:38:21,800 idom 48 from label 52
DEBUG 2022-02-14 16:38:21,800 find_def_from_bottom label 48
DEBUG 2022-02-14 16:38:21,800 find_def_from_top label 48
DEBUG 2022-02-14 16:38:21,800 idom 26 from label 48
DEBUG 2022-02-14 16:38:21,801 find_def_from_bottom label 26
DEBUG 2022-02-14 16:38:21,801 find_def_from_top label 26
DEBUG 2022-02-14 16:38:21,801 idom 0 from label 26
DEBUG 2022-02-14 16:38:21,801 find_def_from_bottom label 0
DEBUG 2022-02-14 16:38:21,801 on stmt: bool82 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:38:21,801 on stmt: $82pred = call bool82($80compare_op.2, func=bool82, args=(Var($80compare_op.2, numbers.py:230),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:21,801 on stmt: branch $82pred, 84, 106
DEBUG 2022-02-14 16:38:21,801 ==== SSA block rewrite pass on 84
DEBUG 2022-02-14 16:38:21,801 Running <numba.core.ssa._FixSSAVars object at 0x7fa046fddcd0>
DEBUG 2022-02-14 16:38:21,801 on stmt: $const86.1 = const(int, -1)
DEBUG 2022-02-14 16:38:21,801 on stmt: $88compare_op.2 = a.1 != $const86.1
DEBUG 2022-02-14 16:38:21,801 find_def var='a.1' stmt=$88compare_op.2 = a.1 != $const86.1
DEBUG 2022-02-14 16:38:21,801 find_def_from_top label 84
DEBUG 2022-02-14 16:38:21,801 idom 76 from label 84
DEBUG 2022-02-14 16:38:21,801 find_def_from_bottom label 76
DEBUG 2022-02-14 16:38:21,801 find_def_from_top label 76
DEBUG 2022-02-14 16:38:21,801 idom 52 from label 76
DEBUG 2022-02-14 16:38:21,801 find_def_from_bottom label 52
DEBUG 2022-02-14 16:38:21,801 find_def_from_top label 52
DEBUG 2022-02-14 16:38:21,801 idom 48 from label 52
DEBUG 2022-02-14 16:38:21,801 find_def_from_bottom label 48
DEBUG 2022-02-14 16:38:21,801 find_def_from_top label 48
DEBUG 2022-02-14 16:38:21,801 idom 26 from label 48
DEBUG 2022-02-14 16:38:21,801 find_def_from_bottom label 26
DEBUG 2022-02-14 16:38:21,801 find_def_from_top label 26
DEBUG 2022-02-14 16:38:21,801 idom 0 from label 26
DEBUG 2022-02-14 16:38:21,801 find_def_from_bottom label 0
DEBUG 2022-02-14 16:38:21,801 on stmt: bool90 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:38:21,801 on stmt: $90pred = call bool90($88compare_op.2, func=bool90, args=(Var($88compare_op.2, numbers.py:230),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:21,801 on stmt: branch $90pred, 92, 106
DEBUG 2022-02-14 16:38:21,802 ==== SSA block rewrite pass on 92
DEBUG 2022-02-14 16:38:21,802 Running <numba.core.ssa._FixSSAVars object at 0x7fa046fddcd0>
DEBUG 2022-02-14 16:38:21,802 on stmt: $const92.0 = const(int, 0)
DEBUG 2022-02-14 16:38:21,802 on stmt: $94return_value.1 = cast(value=$const92.0)
DEBUG 2022-02-14 16:38:21,802 on stmt: return $94return_value.1
DEBUG 2022-02-14 16:38:21,802 ==== SSA block rewrite pass on 98
DEBUG 2022-02-14 16:38:21,802 Running <numba.core.ssa._FixSSAVars object at 0x7fa046fddcd0>
DEBUG 2022-02-14 16:38:21,802 on stmt: invert = const(bool, False)
DEBUG 2022-02-14 16:38:21,802 on stmt: exp = b
DEBUG 2022-02-14 16:38:21,802 on stmt: jump 106
DEBUG 2022-02-14 16:38:21,802 ==== SSA block rewrite pass on 106
DEBUG 2022-02-14 16:38:21,802 Running <numba.core.ssa._FixSSAVars object at 0x7fa046fddcd0>
DEBUG 2022-02-14 16:38:21,802 on stmt: $const108.1 = const(int, 65536)
DEBUG 2022-02-14 16:38:21,802 on stmt: $110compare_op.2 = exp > $const108.1
DEBUG 2022-02-14 16:38:21,802 on stmt: bool112 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:38:21,802 on stmt: $112pred = call bool112($110compare_op.2, func=bool112, args=(Var($110compare_op.2, numbers.py:235),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:21,802 on stmt: branch $112pred, 114, 130
DEBUG 2022-02-14 16:38:21,802 ==== SSA block rewrite pass on 114
DEBUG 2022-02-14 16:38:21,802 Running <numba.core.ssa._FixSSAVars object at 0x7fa046fddcd0>
DEBUG 2022-02-14 16:38:21,802 on stmt: $114load_global.0 = global(math: <module 'math' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/lib-dynload/math.cpython-39-x86_64-linux-gnu.so'>)
DEBUG 2022-02-14 16:38:21,802 on stmt: $116load_method.1 = getattr(value=$114load_global.0, attr=pow)
DEBUG 2022-02-14 16:38:21,802 on stmt: $120load_global.3 = global(float: <class 'float'>)
DEBUG 2022-02-14 16:38:21,802 on stmt: $124call_function.5 = call $120load_global.3(b, func=$120load_global.3, args=[Var(b, numbers.py:217)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:21,802 on stmt: $126call_method.6 = call $116load_method.1(a.1, $124call_function.5, func=$116load_method.1, args=[Var(a.1, numbers.py:218), Var($124call_function.5, numbers.py:237)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:21,803 find_def var='a.1' stmt=$126call_method.6 = call $116load_method.1(a.1, $124call_function.5, func=$116load_method.1, args=[Var(a.1, numbers.py:218), Var($124call_function.5, numbers.py:237)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:21,803 find_def_from_top label 114
DEBUG 2022-02-14 16:38:21,803 idom 106 from label 114
DEBUG 2022-02-14 16:38:21,803 find_def_from_bottom label 106
DEBUG 2022-02-14 16:38:21,803 find_def_from_top label 106
DEBUG 2022-02-14 16:38:21,803 idom 0 from label 106
DEBUG 2022-02-14 16:38:21,803 find_def_from_bottom label 0
DEBUG 2022-02-14 16:38:21,803 on stmt: $128return_value.7 = cast(value=$126call_method.6)
DEBUG 2022-02-14 16:38:21,803 on stmt: return $128return_value.7
DEBUG 2022-02-14 16:38:21,803 ==== SSA block rewrite pass on 130
DEBUG 2022-02-14 16:38:21,803 Running <numba.core.ssa._FixSSAVars object at 0x7fa046fddcd0>
DEBUG 2022-02-14 16:38:21,803 on stmt: $const132.1 = const(int, 0)
DEBUG 2022-02-14 16:38:21,803 on stmt: $134compare_op.2 = exp != $const132.1
DEBUG 2022-02-14 16:38:21,803 on stmt: bool136 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:38:21,803 on stmt: $136pred = call bool136($134compare_op.2, func=bool136, args=(Var($134compare_op.2, numbers.py:238),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:21,803 on stmt: branch $136pred, 138, 172
DEBUG 2022-02-14 16:38:21,803 ==== SSA block rewrite pass on 138
DEBUG 2022-02-14 16:38:21,803 Running <numba.core.ssa._FixSSAVars object at 0x7fa046fddcd0>
DEBUG 2022-02-14 16:38:21,803 on stmt: $const140.1 = const(int, 1)
DEBUG 2022-02-14 16:38:21,803 on stmt: $142binary_and.2 = exp & $const140.1
DEBUG 2022-02-14 16:38:21,803 on stmt: bool144 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:38:21,803 on stmt: $144pred = call bool144($142binary_and.2, func=bool144, args=(Var($142binary_and.2, numbers.py:239),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:21,803 on stmt: branch $144pred, 146, 154
DEBUG 2022-02-14 16:38:21,803 ==== SSA block rewrite pass on 146
DEBUG 2022-02-14 16:38:21,803 Running <numba.core.ssa._FixSSAVars object at 0x7fa046fddcd0>
DEBUG 2022-02-14 16:38:21,803 on stmt: $150inplace_multiply.2 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=r, rhs=a.1, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:38:21,804 find_def var='a.1' stmt=$150inplace_multiply.2 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=r, rhs=a.1, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:38:21,804 find_def_from_top label 146
DEBUG 2022-02-14 16:38:21,804 idom 138 from label 146
DEBUG 2022-02-14 16:38:21,804 find_def_from_bottom label 138
DEBUG 2022-02-14 16:38:21,804 find_def_from_top label 138
DEBUG 2022-02-14 16:38:21,804 idom 130 from label 138
DEBUG 2022-02-14 16:38:21,804 find_def_from_bottom label 130
DEBUG 2022-02-14 16:38:21,804 find_def_from_top label 130
DEBUG 2022-02-14 16:38:21,804 insert phi node a.1.2 = phi(incoming_values=[], incoming_blocks=[]) at 130
DEBUG 2022-02-14 16:38:21,804 find_def_from_bottom label 106
DEBUG 2022-02-14 16:38:21,804 find_def_from_top label 106
DEBUG 2022-02-14 16:38:21,804 idom 0 from label 106
DEBUG 2022-02-14 16:38:21,804 find_def_from_bottom label 0
DEBUG 2022-02-14 16:38:21,804 incoming_def a.1 = call $10load_deref.3(a, func=$10load_deref.3, args=[Var(a, numbers.py:217)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:21,804 find_def_from_bottom label 154
DEBUG 2022-02-14 16:38:21,804 incoming_def a.1.1 = $166inplace_multiply.5
DEBUG 2022-02-14 16:38:21,804 replaced with: $150inplace_multiply.2 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=r, rhs=a.1.2, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:38:21,804 on stmt: r = $150inplace_multiply.2
DEBUG 2022-02-14 16:38:21,804 on stmt: jump 154
DEBUG 2022-02-14 16:38:21,804 ==== SSA block rewrite pass on 154
DEBUG 2022-02-14 16:38:21,804 Running <numba.core.ssa._FixSSAVars object at 0x7fa046fddcd0>
DEBUG 2022-02-14 16:38:21,804 on stmt: $const156.1 = const(int, 1)
DEBUG 2022-02-14 16:38:21,804 on stmt: $158inplace_rshift.2 = inplace_binop(fn=<built-in function irshift>, immutable_fn=<built-in function rshift>, lhs=exp, rhs=$const156.1, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:38:21,804 on stmt: exp = $158inplace_rshift.2
DEBUG 2022-02-14 16:38:21,804 on stmt: $166inplace_multiply.5 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=a.1, rhs=a.1, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:38:21,804 find_def var='a.1' stmt=$166inplace_multiply.5 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=a.1, rhs=a.1, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:38:21,805 find_def_from_top label 154
DEBUG 2022-02-14 16:38:21,805 idom 138 from label 154
DEBUG 2022-02-14 16:38:21,805 find_def_from_bottom label 138
DEBUG 2022-02-14 16:38:21,805 find_def_from_top label 138
DEBUG 2022-02-14 16:38:21,805 idom 130 from label 138
DEBUG 2022-02-14 16:38:21,805 find_def_from_bottom label 130
DEBUG 2022-02-14 16:38:21,805 replaced with: $166inplace_multiply.5 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=a.1.2, rhs=a.1.2, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:38:21,805 on stmt: a.1.1 = $166inplace_multiply.5
DEBUG 2022-02-14 16:38:21,805 on stmt: jump 130
DEBUG 2022-02-14 16:38:21,805 ==== SSA block rewrite pass on 172
DEBUG 2022-02-14 16:38:21,805 Running <numba.core.ssa._FixSSAVars object at 0x7fa046fddcd0>
DEBUG 2022-02-14 16:38:21,805 on stmt: bool174 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:38:21,805 on stmt: $174pred = call bool174(invert, func=bool174, args=(Var(invert, numbers.py:220),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:21,805 on stmt: branch $174pred, 176, 184
DEBUG 2022-02-14 16:38:21,805 ==== SSA block rewrite pass on 176
DEBUG 2022-02-14 16:38:21,805 Running <numba.core.ssa._FixSSAVars object at 0x7fa046fddcd0>
DEBUG 2022-02-14 16:38:21,805 on stmt: $const176.0 = const(float, 1.0)
DEBUG 2022-02-14 16:38:21,805 on stmt: $180binary_true_divide.2 = $const176.0 / r
DEBUG 2022-02-14 16:38:21,805 on stmt: $182return_value.3 = cast(value=$180binary_true_divide.2)
DEBUG 2022-02-14 16:38:21,805 on stmt: return $182return_value.3
DEBUG 2022-02-14 16:38:21,805 ==== SSA block rewrite pass on 184
DEBUG 2022-02-14 16:38:21,805 Running <numba.core.ssa._FixSSAVars object at 0x7fa046fddcd0>
DEBUG 2022-02-14 16:38:21,805 on stmt: $186return_value.1 = cast(value=r)
DEBUG 2022-02-14 16:38:21,805 on stmt: return $186return_value.1
DEBUG 2022-02-14 16:38:21,805 Fix SSA violator on var exp
DEBUG 2022-02-14 16:38:21,805 ==== SSA block rewrite pass on 0
DEBUG 2022-02-14 16:38:21,806 Running <numba.core.ssa._FreshVarHandler object at 0x7fa0462ba490>
DEBUG 2022-02-14 16:38:21,806 on stmt: a = arg(0, name=a)
DEBUG 2022-02-14 16:38:21,806 on stmt: b = arg(1, name=b)
DEBUG 2022-02-14 16:38:21,806 on stmt: $2load_deref.0 = freevar(tp: int64)
DEBUG 2022-02-14 16:38:21,806 on stmt: $const4.1 = const(int, 1)
DEBUG 2022-02-14 16:38:21,806 on stmt: r = call $2load_deref.0($const4.1, func=$2load_deref.0, args=[Var($const4.1, numbers.py:217)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:21,806 on stmt: $10load_deref.3 = freevar(tp: int64)
DEBUG 2022-02-14 16:38:21,806 on stmt: a.1 = call $10load_deref.3(a, func=$10load_deref.3, args=[Var(a, numbers.py:217)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:21,806 on stmt: $const20.7 = const(int, 0)
DEBUG 2022-02-14 16:38:21,806 on stmt: $22compare_op.8 = b < $const20.7
DEBUG 2022-02-14 16:38:21,806 on stmt: bool24 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:38:21,806 on stmt: $24pred = call bool24($22compare_op.8, func=bool24, args=(Var($22compare_op.8, numbers.py:219),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:21,806 on stmt: branch $24pred, 26, 98
DEBUG 2022-02-14 16:38:21,806 ==== SSA block rewrite pass on 26
DEBUG 2022-02-14 16:38:21,806 Running <numba.core.ssa._FreshVarHandler object at 0x7fa0462ba490>
DEBUG 2022-02-14 16:38:21,806 on stmt: invert = const(bool, True)
DEBUG 2022-02-14 16:38:21,806 on stmt: exp = unary(fn=<built-in function neg>, value=b)
DEBUG 2022-02-14 16:38:21,806 first assign: exp
DEBUG 2022-02-14 16:38:21,806 replaced with: exp = unary(fn=<built-in function neg>, value=b)
DEBUG 2022-02-14 16:38:21,806 on stmt: $const38.4 = const(int, 0)
DEBUG 2022-02-14 16:38:21,806 on stmt: $40compare_op.5 = exp < $const38.4
DEBUG 2022-02-14 16:38:21,806 on stmt: bool42 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:38:21,806 on stmt: $42pred = call bool42($40compare_op.5, func=bool42, args=(Var($40compare_op.5, numbers.py:222),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:21,806 on stmt: branch $42pred, 44, 48
DEBUG 2022-02-14 16:38:21,806 ==== SSA block rewrite pass on 44
DEBUG 2022-02-14 16:38:21,807 Running <numba.core.ssa._FreshVarHandler object at 0x7fa0462ba490>
DEBUG 2022-02-14 16:38:21,807 on stmt: $44load_global.0 = global(OverflowError: <class 'OverflowError'>)
DEBUG 2022-02-14 16:38:21,807 on stmt: <static> raise <class 'OverflowError'>
DEBUG 2022-02-14 16:38:21,807 ==== SSA block rewrite pass on 48
DEBUG 2022-02-14 16:38:21,807 Running <numba.core.ssa._FreshVarHandler object at 0x7fa0462ba490>
DEBUG 2022-02-14 16:38:21,807 on stmt: $48load_deref.0 = freevar(is_integer: True)
DEBUG 2022-02-14 16:38:21,807 on stmt: bool50 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:38:21,807 on stmt: $50pred = call bool50($48load_deref.0, func=bool50, args=(Var($48load_deref.0, numbers.py:224),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:21,807 on stmt: jump 52
DEBUG 2022-02-14 16:38:21,807 ==== SSA block rewrite pass on 52
DEBUG 2022-02-14 16:38:21,807 Running <numba.core.ssa._FreshVarHandler object at 0x7fa0462ba490>
DEBUG 2022-02-14 16:38:21,807 on stmt: $const54.1 = const(int, 0)
DEBUG 2022-02-14 16:38:21,807 on stmt: $56compare_op.2 = a.1 == $const54.1
DEBUG 2022-02-14 16:38:21,807 on stmt: bool58 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:38:21,807 on stmt: $58pred = call bool58($56compare_op.2, func=bool58, args=(Var($56compare_op.2, numbers.py:225),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:21,807 on stmt: branch $58pred, 60, 76
DEBUG 2022-02-14 16:38:21,807 ==== SSA block rewrite pass on 60
DEBUG 2022-02-14 16:38:21,807 Running <numba.core.ssa._FreshVarHandler object at 0x7fa0462ba490>
DEBUG 2022-02-14 16:38:21,807 on stmt: $60load_deref.0 = freevar(zerodiv_return: -9223372036854775808)
DEBUG 2022-02-14 16:38:21,807 on stmt: bool62 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:38:21,807 on stmt: $62pred = call bool62($60load_deref.0, func=bool62, args=(Var($60load_deref.0, numbers.py:226),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:21,807 on stmt: jump 64
DEBUG 2022-02-14 16:38:21,807 ==== SSA block rewrite pass on 64
DEBUG 2022-02-14 16:38:21,807 Running <numba.core.ssa._FreshVarHandler object at 0x7fa0462ba490>
DEBUG 2022-02-14 16:38:21,807 on stmt: $64load_deref.0 = freevar(zerodiv_return: -9223372036854775808)
DEBUG 2022-02-14 16:38:21,807 on stmt: $66return_value.1 = cast(value=$64load_deref.0)
DEBUG 2022-02-14 16:38:21,807 on stmt: return $66return_value.1
DEBUG 2022-02-14 16:38:21,807 ==== SSA block rewrite pass on 76
DEBUG 2022-02-14 16:38:21,808 Running <numba.core.ssa._FreshVarHandler object at 0x7fa0462ba490>
DEBUG 2022-02-14 16:38:21,808 on stmt: $const78.1 = const(int, 1)
DEBUG 2022-02-14 16:38:21,808 on stmt: $80compare_op.2 = a.1 != $const78.1
DEBUG 2022-02-14 16:38:21,808 on stmt: bool82 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:38:21,808 on stmt: $82pred = call bool82($80compare_op.2, func=bool82, args=(Var($80compare_op.2, numbers.py:230),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:21,808 on stmt: branch $82pred, 84, 106
DEBUG 2022-02-14 16:38:21,808 ==== SSA block rewrite pass on 84
DEBUG 2022-02-14 16:38:21,808 Running <numba.core.ssa._FreshVarHandler object at 0x7fa0462ba490>
DEBUG 2022-02-14 16:38:21,808 on stmt: $const86.1 = const(int, -1)
DEBUG 2022-02-14 16:38:21,808 on stmt: $88compare_op.2 = a.1 != $const86.1
DEBUG 2022-02-14 16:38:21,808 on stmt: bool90 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:38:21,808 on stmt: $90pred = call bool90($88compare_op.2, func=bool90, args=(Var($88compare_op.2, numbers.py:230),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:21,808 on stmt: branch $90pred, 92, 106
DEBUG 2022-02-14 16:38:21,808 ==== SSA block rewrite pass on 92
DEBUG 2022-02-14 16:38:21,808 Running <numba.core.ssa._FreshVarHandler object at 0x7fa0462ba490>
DEBUG 2022-02-14 16:38:21,808 on stmt: $const92.0 = const(int, 0)
DEBUG 2022-02-14 16:38:21,808 on stmt: $94return_value.1 = cast(value=$const92.0)
DEBUG 2022-02-14 16:38:21,808 on stmt: return $94return_value.1
DEBUG 2022-02-14 16:38:21,808 ==== SSA block rewrite pass on 98
DEBUG 2022-02-14 16:38:21,808 Running <numba.core.ssa._FreshVarHandler object at 0x7fa0462ba490>
DEBUG 2022-02-14 16:38:21,808 on stmt: invert = const(bool, False)
DEBUG 2022-02-14 16:38:21,808 on stmt: exp = b
DEBUG 2022-02-14 16:38:21,808 replaced with: exp.1 = b
DEBUG 2022-02-14 16:38:21,808 on stmt: jump 106
DEBUG 2022-02-14 16:38:21,809 ==== SSA block rewrite pass on 106
DEBUG 2022-02-14 16:38:21,809 Running <numba.core.ssa._FreshVarHandler object at 0x7fa0462ba490>
DEBUG 2022-02-14 16:38:21,809 on stmt: $const108.1 = const(int, 65536)
DEBUG 2022-02-14 16:38:21,809 on stmt: $110compare_op.2 = exp > $const108.1
DEBUG 2022-02-14 16:38:21,809 on stmt: bool112 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:38:21,809 on stmt: $112pred = call bool112($110compare_op.2, func=bool112, args=(Var($110compare_op.2, numbers.py:235),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:21,809 on stmt: branch $112pred, 114, 130
DEBUG 2022-02-14 16:38:21,809 ==== SSA block rewrite pass on 114
DEBUG 2022-02-14 16:38:21,809 Running <numba.core.ssa._FreshVarHandler object at 0x7fa0462ba490>
DEBUG 2022-02-14 16:38:21,809 on stmt: $114load_global.0 = global(math: <module 'math' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/lib-dynload/math.cpython-39-x86_64-linux-gnu.so'>)
DEBUG 2022-02-14 16:38:21,809 on stmt: $116load_method.1 = getattr(value=$114load_global.0, attr=pow)
DEBUG 2022-02-14 16:38:21,809 on stmt: $120load_global.3 = global(float: <class 'float'>)
DEBUG 2022-02-14 16:38:21,809 on stmt: $124call_function.5 = call $120load_global.3(b, func=$120load_global.3, args=[Var(b, numbers.py:217)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:21,809 on stmt: $126call_method.6 = call $116load_method.1(a.1, $124call_function.5, func=$116load_method.1, args=[Var(a.1, numbers.py:218), Var($124call_function.5, numbers.py:237)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:21,809 on stmt: $128return_value.7 = cast(value=$126call_method.6)
DEBUG 2022-02-14 16:38:21,809 on stmt: return $128return_value.7
DEBUG 2022-02-14 16:38:21,809 ==== SSA block rewrite pass on 130
DEBUG 2022-02-14 16:38:21,809 Running <numba.core.ssa._FreshVarHandler object at 0x7fa0462ba490>
DEBUG 2022-02-14 16:38:21,809 on stmt: a.1.2 = phi(incoming_values=[Var(a.1, numbers.py:218), Var(a.1.1, numbers.py:242)], incoming_blocks=[106, 154])
DEBUG 2022-02-14 16:38:21,809 on stmt: $const132.1 = const(int, 0)
DEBUG 2022-02-14 16:38:21,809 on stmt: $134compare_op.2 = exp != $const132.1
DEBUG 2022-02-14 16:38:21,809 on stmt: bool136 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:38:21,809 on stmt: $136pred = call bool136($134compare_op.2, func=bool136, args=(Var($134compare_op.2, numbers.py:238),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:21,809 on stmt: branch $136pred, 138, 172
DEBUG 2022-02-14 16:38:21,809 ==== SSA block rewrite pass on 138
DEBUG 2022-02-14 16:38:21,810 Running <numba.core.ssa._FreshVarHandler object at 0x7fa0462ba490>
DEBUG 2022-02-14 16:38:21,810 on stmt: $const140.1 = const(int, 1)
DEBUG 2022-02-14 16:38:21,810 on stmt: $142binary_and.2 = exp & $const140.1
DEBUG 2022-02-14 16:38:21,810 on stmt: bool144 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:38:21,810 on stmt: $144pred = call bool144($142binary_and.2, func=bool144, args=(Var($142binary_and.2, numbers.py:239),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:21,810 on stmt: branch $144pred, 146, 154
DEBUG 2022-02-14 16:38:21,810 ==== SSA block rewrite pass on 146
DEBUG 2022-02-14 16:38:21,810 Running <numba.core.ssa._FreshVarHandler object at 0x7fa0462ba490>
DEBUG 2022-02-14 16:38:21,810 on stmt: $150inplace_multiply.2 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=r, rhs=a.1.2, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:38:21,810 on stmt: r = $150inplace_multiply.2
DEBUG 2022-02-14 16:38:21,810 on stmt: jump 154
DEBUG 2022-02-14 16:38:21,810 ==== SSA block rewrite pass on 154
DEBUG 2022-02-14 16:38:21,810 Running <numba.core.ssa._FreshVarHandler object at 0x7fa0462ba490>
DEBUG 2022-02-14 16:38:21,810 on stmt: $const156.1 = const(int, 1)
DEBUG 2022-02-14 16:38:21,810 on stmt: $158inplace_rshift.2 = inplace_binop(fn=<built-in function irshift>, immutable_fn=<built-in function rshift>, lhs=exp, rhs=$const156.1, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:38:21,810 on stmt: exp = $158inplace_rshift.2
DEBUG 2022-02-14 16:38:21,810 replaced with: exp.2 = $158inplace_rshift.2
DEBUG 2022-02-14 16:38:21,810 on stmt: $166inplace_multiply.5 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=a.1.2, rhs=a.1.2, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:38:21,810 on stmt: a.1.1 = $166inplace_multiply.5
DEBUG 2022-02-14 16:38:21,810 on stmt: jump 130
DEBUG 2022-02-14 16:38:21,810 ==== SSA block rewrite pass on 172
DEBUG 2022-02-14 16:38:21,810 Running <numba.core.ssa._FreshVarHandler object at 0x7fa0462ba490>
DEBUG 2022-02-14 16:38:21,810 on stmt: bool174 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:38:21,810 on stmt: $174pred = call bool174(invert, func=bool174, args=(Var(invert, numbers.py:220),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:21,810 on stmt: branch $174pred, 176, 184
DEBUG 2022-02-14 16:38:21,811 ==== SSA block rewrite pass on 176
DEBUG 2022-02-14 16:38:21,811 Running <numba.core.ssa._FreshVarHandler object at 0x7fa0462ba490>
DEBUG 2022-02-14 16:38:21,811 on stmt: $const176.0 = const(float, 1.0)
DEBUG 2022-02-14 16:38:21,811 on stmt: $180binary_true_divide.2 = $const176.0 / r
DEBUG 2022-02-14 16:38:21,811 on stmt: $182return_value.3 = cast(value=$180binary_true_divide.2)
DEBUG 2022-02-14 16:38:21,811 on stmt: return $182return_value.3
DEBUG 2022-02-14 16:38:21,811 ==== SSA block rewrite pass on 184
DEBUG 2022-02-14 16:38:21,811 Running <numba.core.ssa._FreshVarHandler object at 0x7fa0462ba490>
DEBUG 2022-02-14 16:38:21,811 on stmt: $186return_value.1 = cast(value=r)
DEBUG 2022-02-14 16:38:21,811 on stmt: return $186return_value.1
DEBUG 2022-02-14 16:38:21,811 Replaced assignments: defaultdict(<class 'list'>,
            {26: [<numba.core.ir.Assign object at 0x7fa0462ba400>],
             98: [<numba.core.ir.Assign object at 0x7fa046fdd8e0>],
             154: [<numba.core.ir.Assign object at 0x7fa0462ad880>]})
DEBUG 2022-02-14 16:38:21,811 ==== SSA block rewrite pass on 0
DEBUG 2022-02-14 16:38:21,811 Running <numba.core.ssa._FixSSAVars object at 0x7fa0462ad910>
DEBUG 2022-02-14 16:38:21,811 on stmt: a = arg(0, name=a)
DEBUG 2022-02-14 16:38:21,811 on stmt: b = arg(1, name=b)
DEBUG 2022-02-14 16:38:21,811 on stmt: $2load_deref.0 = freevar(tp: int64)
DEBUG 2022-02-14 16:38:21,811 on stmt: $const4.1 = const(int, 1)
DEBUG 2022-02-14 16:38:21,811 on stmt: r = call $2load_deref.0($const4.1, func=$2load_deref.0, args=[Var($const4.1, numbers.py:217)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:21,811 on stmt: $10load_deref.3 = freevar(tp: int64)
DEBUG 2022-02-14 16:38:21,811 on stmt: a.1 = call $10load_deref.3(a, func=$10load_deref.3, args=[Var(a, numbers.py:217)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:21,811 on stmt: $const20.7 = const(int, 0)
DEBUG 2022-02-14 16:38:21,811 on stmt: $22compare_op.8 = b < $const20.7
DEBUG 2022-02-14 16:38:21,811 on stmt: bool24 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:38:21,811 on stmt: $24pred = call bool24($22compare_op.8, func=bool24, args=(Var($22compare_op.8, numbers.py:219),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:21,811 on stmt: branch $24pred, 26, 98
DEBUG 2022-02-14 16:38:21,811 ==== SSA block rewrite pass on 26
DEBUG 2022-02-14 16:38:21,812 Running <numba.core.ssa._FixSSAVars object at 0x7fa0462ad910>
DEBUG 2022-02-14 16:38:21,812 on stmt: invert = const(bool, True)
DEBUG 2022-02-14 16:38:21,812 on stmt: exp = unary(fn=<built-in function neg>, value=b)
DEBUG 2022-02-14 16:38:21,812 on stmt: $const38.4 = const(int, 0)
DEBUG 2022-02-14 16:38:21,812 on stmt: $40compare_op.5 = exp < $const38.4
DEBUG 2022-02-14 16:38:21,812 find_def var='exp' stmt=$40compare_op.5 = exp < $const38.4
DEBUG 2022-02-14 16:38:21,812 on stmt: bool42 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:38:21,812 on stmt: $42pred = call bool42($40compare_op.5, func=bool42, args=(Var($40compare_op.5, numbers.py:222),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:21,812 on stmt: branch $42pred, 44, 48
DEBUG 2022-02-14 16:38:21,812 ==== SSA block rewrite pass on 44
DEBUG 2022-02-14 16:38:21,812 Running <numba.core.ssa._FixSSAVars object at 0x7fa0462ad910>
DEBUG 2022-02-14 16:38:21,812 on stmt: $44load_global.0 = global(OverflowError: <class 'OverflowError'>)
DEBUG 2022-02-14 16:38:21,812 on stmt: <static> raise <class 'OverflowError'>
DEBUG 2022-02-14 16:38:21,812 ==== SSA block rewrite pass on 48
DEBUG 2022-02-14 16:38:21,812 Running <numba.core.ssa._FixSSAVars object at 0x7fa0462ad910>
DEBUG 2022-02-14 16:38:21,812 on stmt: $48load_deref.0 = freevar(is_integer: True)
DEBUG 2022-02-14 16:38:21,812 on stmt: bool50 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:38:21,812 on stmt: $50pred = call bool50($48load_deref.0, func=bool50, args=(Var($48load_deref.0, numbers.py:224),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:21,812 on stmt: jump 52
DEBUG 2022-02-14 16:38:21,812 ==== SSA block rewrite pass on 52
DEBUG 2022-02-14 16:38:21,812 Running <numba.core.ssa._FixSSAVars object at 0x7fa0462ad910>
DEBUG 2022-02-14 16:38:21,812 on stmt: $const54.1 = const(int, 0)
DEBUG 2022-02-14 16:38:21,812 on stmt: $56compare_op.2 = a.1 == $const54.1
DEBUG 2022-02-14 16:38:21,812 on stmt: bool58 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:38:21,812 on stmt: $58pred = call bool58($56compare_op.2, func=bool58, args=(Var($56compare_op.2, numbers.py:225),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:21,812 on stmt: branch $58pred, 60, 76
DEBUG 2022-02-14 16:38:21,812 ==== SSA block rewrite pass on 60
DEBUG 2022-02-14 16:38:21,813 Running <numba.core.ssa._FixSSAVars object at 0x7fa0462ad910>
DEBUG 2022-02-14 16:38:21,813 on stmt: $60load_deref.0 = freevar(zerodiv_return: -9223372036854775808)
DEBUG 2022-02-14 16:38:21,813 on stmt: bool62 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:38:21,813 on stmt: $62pred = call bool62($60load_deref.0, func=bool62, args=(Var($60load_deref.0, numbers.py:226),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:21,813 on stmt: jump 64
DEBUG 2022-02-14 16:38:21,813 ==== SSA block rewrite pass on 64
DEBUG 2022-02-14 16:38:21,813 Running <numba.core.ssa._FixSSAVars object at 0x7fa0462ad910>
DEBUG 2022-02-14 16:38:21,813 on stmt: $64load_deref.0 = freevar(zerodiv_return: -9223372036854775808)
DEBUG 2022-02-14 16:38:21,813 on stmt: $66return_value.1 = cast(value=$64load_deref.0)
DEBUG 2022-02-14 16:38:21,813 on stmt: return $66return_value.1
DEBUG 2022-02-14 16:38:21,813 ==== SSA block rewrite pass on 76
DEBUG 2022-02-14 16:38:21,813 Running <numba.core.ssa._FixSSAVars object at 0x7fa0462ad910>
DEBUG 2022-02-14 16:38:21,813 on stmt: $const78.1 = const(int, 1)
DEBUG 2022-02-14 16:38:21,813 on stmt: $80compare_op.2 = a.1 != $const78.1
DEBUG 2022-02-14 16:38:21,813 on stmt: bool82 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:38:21,813 on stmt: $82pred = call bool82($80compare_op.2, func=bool82, args=(Var($80compare_op.2, numbers.py:230),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:21,813 on stmt: branch $82pred, 84, 106
DEBUG 2022-02-14 16:38:21,813 ==== SSA block rewrite pass on 84
DEBUG 2022-02-14 16:38:21,813 Running <numba.core.ssa._FixSSAVars object at 0x7fa0462ad910>
DEBUG 2022-02-14 16:38:21,813 on stmt: $const86.1 = const(int, -1)
DEBUG 2022-02-14 16:38:21,813 on stmt: $88compare_op.2 = a.1 != $const86.1
DEBUG 2022-02-14 16:38:21,813 on stmt: bool90 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:38:21,813 on stmt: $90pred = call bool90($88compare_op.2, func=bool90, args=(Var($88compare_op.2, numbers.py:230),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:21,813 on stmt: branch $90pred, 92, 106
DEBUG 2022-02-14 16:38:21,813 ==== SSA block rewrite pass on 92
DEBUG 2022-02-14 16:38:21,813 Running <numba.core.ssa._FixSSAVars object at 0x7fa0462ad910>
DEBUG 2022-02-14 16:38:21,813 on stmt: $const92.0 = const(int, 0)
DEBUG 2022-02-14 16:38:21,814 on stmt: $94return_value.1 = cast(value=$const92.0)
DEBUG 2022-02-14 16:38:21,814 on stmt: return $94return_value.1
DEBUG 2022-02-14 16:38:21,814 ==== SSA block rewrite pass on 98
DEBUG 2022-02-14 16:38:21,814 Running <numba.core.ssa._FixSSAVars object at 0x7fa0462ad910>
DEBUG 2022-02-14 16:38:21,814 on stmt: invert = const(bool, False)
DEBUG 2022-02-14 16:38:21,814 on stmt: exp.1 = b
DEBUG 2022-02-14 16:38:21,814 on stmt: jump 106
DEBUG 2022-02-14 16:38:21,814 ==== SSA block rewrite pass on 106
DEBUG 2022-02-14 16:38:21,814 Running <numba.core.ssa._FixSSAVars object at 0x7fa0462ad910>
DEBUG 2022-02-14 16:38:21,814 on stmt: $const108.1 = const(int, 65536)
DEBUG 2022-02-14 16:38:21,814 on stmt: $110compare_op.2 = exp > $const108.1
DEBUG 2022-02-14 16:38:21,814 find_def var='exp' stmt=$110compare_op.2 = exp > $const108.1
DEBUG 2022-02-14 16:38:21,814 find_def_from_top label 106
DEBUG 2022-02-14 16:38:21,814 insert phi node exp.3 = phi(incoming_values=[], incoming_blocks=[]) at 106
DEBUG 2022-02-14 16:38:21,814 find_def_from_bottom label 98
DEBUG 2022-02-14 16:38:21,814 incoming_def exp.1 = b
DEBUG 2022-02-14 16:38:21,814 find_def_from_bottom label 76
DEBUG 2022-02-14 16:38:21,814 find_def_from_top label 76
DEBUG 2022-02-14 16:38:21,814 idom 52 from label 76
DEBUG 2022-02-14 16:38:21,814 find_def_from_bottom label 52
DEBUG 2022-02-14 16:38:21,814 find_def_from_top label 52
DEBUG 2022-02-14 16:38:21,814 idom 48 from label 52
DEBUG 2022-02-14 16:38:21,814 find_def_from_bottom label 48
DEBUG 2022-02-14 16:38:21,814 find_def_from_top label 48
DEBUG 2022-02-14 16:38:21,814 idom 26 from label 48
DEBUG 2022-02-14 16:38:21,814 find_def_from_bottom label 26
DEBUG 2022-02-14 16:38:21,814 incoming_def exp = unary(fn=<built-in function neg>, value=b)
DEBUG 2022-02-14 16:38:21,814 find_def_from_bottom label 84
DEBUG 2022-02-14 16:38:21,814 find_def_from_top label 84
DEBUG 2022-02-14 16:38:21,815 idom 76 from label 84
DEBUG 2022-02-14 16:38:21,815 find_def_from_bottom label 76
DEBUG 2022-02-14 16:38:21,815 find_def_from_top label 76
DEBUG 2022-02-14 16:38:21,815 idom 52 from label 76
DEBUG 2022-02-14 16:38:21,815 find_def_from_bottom label 52
DEBUG 2022-02-14 16:38:21,815 find_def_from_top label 52
DEBUG 2022-02-14 16:38:21,815 idom 48 from label 52
DEBUG 2022-02-14 16:38:21,815 find_def_from_bottom label 48
DEBUG 2022-02-14 16:38:21,815 find_def_from_top label 48
DEBUG 2022-02-14 16:38:21,815 idom 26 from label 48
DEBUG 2022-02-14 16:38:21,815 find_def_from_bottom label 26
DEBUG 2022-02-14 16:38:21,815 incoming_def exp = unary(fn=<built-in function neg>, value=b)
DEBUG 2022-02-14 16:38:21,815 replaced with: $110compare_op.2 = exp.3 > $const108.1
DEBUG 2022-02-14 16:38:21,815 on stmt: bool112 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:38:21,815 on stmt: $112pred = call bool112($110compare_op.2, func=bool112, args=(Var($110compare_op.2, numbers.py:235),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:21,815 on stmt: branch $112pred, 114, 130
DEBUG 2022-02-14 16:38:21,815 ==== SSA block rewrite pass on 114
DEBUG 2022-02-14 16:38:21,815 Running <numba.core.ssa._FixSSAVars object at 0x7fa0462ad910>
DEBUG 2022-02-14 16:38:21,815 on stmt: $114load_global.0 = global(math: <module 'math' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/lib-dynload/math.cpython-39-x86_64-linux-gnu.so'>)
DEBUG 2022-02-14 16:38:21,815 on stmt: $116load_method.1 = getattr(value=$114load_global.0, attr=pow)
DEBUG 2022-02-14 16:38:21,815 on stmt: $120load_global.3 = global(float: <class 'float'>)
DEBUG 2022-02-14 16:38:21,815 on stmt: $124call_function.5 = call $120load_global.3(b, func=$120load_global.3, args=[Var(b, numbers.py:217)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:21,815 on stmt: $126call_method.6 = call $116load_method.1(a.1, $124call_function.5, func=$116load_method.1, args=[Var(a.1, numbers.py:218), Var($124call_function.5, numbers.py:237)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:21,815 on stmt: $128return_value.7 = cast(value=$126call_method.6)
DEBUG 2022-02-14 16:38:21,815 on stmt: return $128return_value.7
DEBUG 2022-02-14 16:38:21,815 ==== SSA block rewrite pass on 130
DEBUG 2022-02-14 16:38:21,815 Running <numba.core.ssa._FixSSAVars object at 0x7fa0462ad910>
DEBUG 2022-02-14 16:38:21,815 on stmt: a.1.2 = phi(incoming_values=[Var(a.1, numbers.py:218), Var(a.1.1, numbers.py:242)], incoming_blocks=[106, 154])
DEBUG 2022-02-14 16:38:21,816 on stmt: $const132.1 = const(int, 0)
DEBUG 2022-02-14 16:38:21,816 on stmt: $134compare_op.2 = exp != $const132.1
DEBUG 2022-02-14 16:38:21,816 find_def var='exp' stmt=$134compare_op.2 = exp != $const132.1
DEBUG 2022-02-14 16:38:21,816 find_def_from_top label 130
DEBUG 2022-02-14 16:38:21,816 insert phi node exp.4 = phi(incoming_values=[], incoming_blocks=[]) at 130
DEBUG 2022-02-14 16:38:21,816 find_def_from_bottom label 106
DEBUG 2022-02-14 16:38:21,816 incoming_def exp.3 = phi(incoming_values=[Var(exp.1, numbers.py:234), Var(exp, numbers.py:221), Var(exp, numbers.py:221)], incoming_blocks=[98, 76, 84])
DEBUG 2022-02-14 16:38:21,816 find_def_from_bottom label 154
DEBUG 2022-02-14 16:38:21,816 incoming_def exp.2 = $158inplace_rshift.2
DEBUG 2022-02-14 16:38:21,816 replaced with: $134compare_op.2 = exp.4 != $const132.1
DEBUG 2022-02-14 16:38:21,816 on stmt: bool136 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:38:21,816 on stmt: $136pred = call bool136($134compare_op.2, func=bool136, args=(Var($134compare_op.2, numbers.py:238),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:21,816 on stmt: branch $136pred, 138, 172
DEBUG 2022-02-14 16:38:21,816 ==== SSA block rewrite pass on 138
DEBUG 2022-02-14 16:38:21,816 Running <numba.core.ssa._FixSSAVars object at 0x7fa0462ad910>
DEBUG 2022-02-14 16:38:21,816 on stmt: $const140.1 = const(int, 1)
DEBUG 2022-02-14 16:38:21,816 on stmt: $142binary_and.2 = exp & $const140.1
DEBUG 2022-02-14 16:38:21,816 find_def var='exp' stmt=$142binary_and.2 = exp & $const140.1
DEBUG 2022-02-14 16:38:21,816 find_def_from_top label 138
DEBUG 2022-02-14 16:38:21,816 idom 130 from label 138
DEBUG 2022-02-14 16:38:21,816 find_def_from_bottom label 130
DEBUG 2022-02-14 16:38:21,816 replaced with: $142binary_and.2 = exp.4 & $const140.1
DEBUG 2022-02-14 16:38:21,816 on stmt: bool144 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:38:21,816 on stmt: $144pred = call bool144($142binary_and.2, func=bool144, args=(Var($142binary_and.2, numbers.py:239),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:21,816 on stmt: branch $144pred, 146, 154
DEBUG 2022-02-14 16:38:21,817 ==== SSA block rewrite pass on 146
DEBUG 2022-02-14 16:38:21,817 Running <numba.core.ssa._FixSSAVars object at 0x7fa0462ad910>
DEBUG 2022-02-14 16:38:21,817 on stmt: $150inplace_multiply.2 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=r, rhs=a.1.2, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:38:21,817 on stmt: r = $150inplace_multiply.2
DEBUG 2022-02-14 16:38:21,817 on stmt: jump 154
DEBUG 2022-02-14 16:38:21,817 ==== SSA block rewrite pass on 154
DEBUG 2022-02-14 16:38:21,817 Running <numba.core.ssa._FixSSAVars object at 0x7fa0462ad910>
DEBUG 2022-02-14 16:38:21,817 on stmt: $const156.1 = const(int, 1)
DEBUG 2022-02-14 16:38:21,817 on stmt: $158inplace_rshift.2 = inplace_binop(fn=<built-in function irshift>, immutable_fn=<built-in function rshift>, lhs=exp, rhs=$const156.1, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:38:21,817 find_def var='exp' stmt=$158inplace_rshift.2 = inplace_binop(fn=<built-in function irshift>, immutable_fn=<built-in function rshift>, lhs=exp, rhs=$const156.1, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:38:21,817 find_def_from_top label 154
DEBUG 2022-02-14 16:38:21,817 idom 138 from label 154
DEBUG 2022-02-14 16:38:21,817 find_def_from_bottom label 138
DEBUG 2022-02-14 16:38:21,817 find_def_from_top label 138
DEBUG 2022-02-14 16:38:21,817 idom 130 from label 138
DEBUG 2022-02-14 16:38:21,817 find_def_from_bottom label 130
DEBUG 2022-02-14 16:38:21,817 replaced with: $158inplace_rshift.2 = inplace_binop(fn=<built-in function irshift>, immutable_fn=<built-in function rshift>, lhs=exp.4, rhs=$const156.1, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:38:21,817 on stmt: exp.2 = $158inplace_rshift.2
DEBUG 2022-02-14 16:38:21,817 on stmt: $166inplace_multiply.5 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=a.1.2, rhs=a.1.2, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:38:21,817 on stmt: a.1.1 = $166inplace_multiply.5
DEBUG 2022-02-14 16:38:21,817 on stmt: jump 130
DEBUG 2022-02-14 16:38:21,817 ==== SSA block rewrite pass on 172
DEBUG 2022-02-14 16:38:21,817 Running <numba.core.ssa._FixSSAVars object at 0x7fa0462ad910>
DEBUG 2022-02-14 16:38:21,817 on stmt: bool174 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:38:21,817 on stmt: $174pred = call bool174(invert, func=bool174, args=(Var(invert, numbers.py:220),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:21,818 on stmt: branch $174pred, 176, 184
DEBUG 2022-02-14 16:38:21,818 ==== SSA block rewrite pass on 176
DEBUG 2022-02-14 16:38:21,818 Running <numba.core.ssa._FixSSAVars object at 0x7fa0462ad910>
DEBUG 2022-02-14 16:38:21,818 on stmt: $const176.0 = const(float, 1.0)
DEBUG 2022-02-14 16:38:21,818 on stmt: $180binary_true_divide.2 = $const176.0 / r
DEBUG 2022-02-14 16:38:21,818 on stmt: $182return_value.3 = cast(value=$180binary_true_divide.2)
DEBUG 2022-02-14 16:38:21,818 on stmt: return $182return_value.3
DEBUG 2022-02-14 16:38:21,818 ==== SSA block rewrite pass on 184
DEBUG 2022-02-14 16:38:21,818 Running <numba.core.ssa._FixSSAVars object at 0x7fa0462ad910>
DEBUG 2022-02-14 16:38:21,818 on stmt: $186return_value.1 = cast(value=r)
DEBUG 2022-02-14 16:38:21,818 on stmt: return $186return_value.1
DEBUG 2022-02-14 16:38:21,818 Fix SSA violator on var invert
DEBUG 2022-02-14 16:38:21,818 ==== SSA block rewrite pass on 0
DEBUG 2022-02-14 16:38:21,818 Running <numba.core.ssa._FreshVarHandler object at 0x7fa046fda2e0>
DEBUG 2022-02-14 16:38:21,818 on stmt: a = arg(0, name=a)
DEBUG 2022-02-14 16:38:21,818 on stmt: b = arg(1, name=b)
DEBUG 2022-02-14 16:38:21,818 on stmt: $2load_deref.0 = freevar(tp: int64)
DEBUG 2022-02-14 16:38:21,818 on stmt: $const4.1 = const(int, 1)
DEBUG 2022-02-14 16:38:21,818 on stmt: r = call $2load_deref.0($const4.1, func=$2load_deref.0, args=[Var($const4.1, numbers.py:217)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:21,818 on stmt: $10load_deref.3 = freevar(tp: int64)
DEBUG 2022-02-14 16:38:21,818 on stmt: a.1 = call $10load_deref.3(a, func=$10load_deref.3, args=[Var(a, numbers.py:217)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:21,818 on stmt: $const20.7 = const(int, 0)
DEBUG 2022-02-14 16:38:21,818 on stmt: $22compare_op.8 = b < $const20.7
DEBUG 2022-02-14 16:38:21,819 on stmt: bool24 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:38:21,819 on stmt: $24pred = call bool24($22compare_op.8, func=bool24, args=(Var($22compare_op.8, numbers.py:219),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:21,819 on stmt: branch $24pred, 26, 98
DEBUG 2022-02-14 16:38:21,819 ==== SSA block rewrite pass on 26
DEBUG 2022-02-14 16:38:21,819 Running <numba.core.ssa._FreshVarHandler object at 0x7fa046fda2e0>
DEBUG 2022-02-14 16:38:21,819 on stmt: invert = const(bool, True)
DEBUG 2022-02-14 16:38:21,819 first assign: invert
DEBUG 2022-02-14 16:38:21,819 replaced with: invert = const(bool, True)
DEBUG 2022-02-14 16:38:21,819 on stmt: exp = unary(fn=<built-in function neg>, value=b)
DEBUG 2022-02-14 16:38:21,819 on stmt: $const38.4 = const(int, 0)
DEBUG 2022-02-14 16:38:21,819 on stmt: $40compare_op.5 = exp < $const38.4
DEBUG 2022-02-14 16:38:21,819 on stmt: bool42 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:38:21,819 on stmt: $42pred = call bool42($40compare_op.5, func=bool42, args=(Var($40compare_op.5, numbers.py:222),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:21,819 on stmt: branch $42pred, 44, 48
DEBUG 2022-02-14 16:38:21,819 ==== SSA block rewrite pass on 44
DEBUG 2022-02-14 16:38:21,819 Running <numba.core.ssa._FreshVarHandler object at 0x7fa046fda2e0>
DEBUG 2022-02-14 16:38:21,819 on stmt: $44load_global.0 = global(OverflowError: <class 'OverflowError'>)
DEBUG 2022-02-14 16:38:21,819 on stmt: <static> raise <class 'OverflowError'>
DEBUG 2022-02-14 16:38:21,819 ==== SSA block rewrite pass on 48
DEBUG 2022-02-14 16:38:21,819 Running <numba.core.ssa._FreshVarHandler object at 0x7fa046fda2e0>
DEBUG 2022-02-14 16:38:21,819 on stmt: $48load_deref.0 = freevar(is_integer: True)
DEBUG 2022-02-14 16:38:21,819 on stmt: bool50 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:38:21,819 on stmt: $50pred = call bool50($48load_deref.0, func=bool50, args=(Var($48load_deref.0, numbers.py:224),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:21,819 on stmt: jump 52
DEBUG 2022-02-14 16:38:21,819 ==== SSA block rewrite pass on 52
DEBUG 2022-02-14 16:38:21,819 Running <numba.core.ssa._FreshVarHandler object at 0x7fa046fda2e0>
DEBUG 2022-02-14 16:38:21,820 on stmt: $const54.1 = const(int, 0)
DEBUG 2022-02-14 16:38:21,820 on stmt: $56compare_op.2 = a.1 == $const54.1
DEBUG 2022-02-14 16:38:21,820 on stmt: bool58 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:38:21,820 on stmt: $58pred = call bool58($56compare_op.2, func=bool58, args=(Var($56compare_op.2, numbers.py:225),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:21,820 on stmt: branch $58pred, 60, 76
DEBUG 2022-02-14 16:38:21,820 ==== SSA block rewrite pass on 60
DEBUG 2022-02-14 16:38:21,820 Running <numba.core.ssa._FreshVarHandler object at 0x7fa046fda2e0>
DEBUG 2022-02-14 16:38:21,820 on stmt: $60load_deref.0 = freevar(zerodiv_return: -9223372036854775808)
DEBUG 2022-02-14 16:38:21,820 on stmt: bool62 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:38:21,820 on stmt: $62pred = call bool62($60load_deref.0, func=bool62, args=(Var($60load_deref.0, numbers.py:226),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:21,820 on stmt: jump 64
DEBUG 2022-02-14 16:38:21,820 ==== SSA block rewrite pass on 64
DEBUG 2022-02-14 16:38:21,820 Running <numba.core.ssa._FreshVarHandler object at 0x7fa046fda2e0>
DEBUG 2022-02-14 16:38:21,820 on stmt: $64load_deref.0 = freevar(zerodiv_return: -9223372036854775808)
DEBUG 2022-02-14 16:38:21,820 on stmt: $66return_value.1 = cast(value=$64load_deref.0)
DEBUG 2022-02-14 16:38:21,820 on stmt: return $66return_value.1
DEBUG 2022-02-14 16:38:21,820 ==== SSA block rewrite pass on 76
DEBUG 2022-02-14 16:38:21,820 Running <numba.core.ssa._FreshVarHandler object at 0x7fa046fda2e0>
DEBUG 2022-02-14 16:38:21,820 on stmt: $const78.1 = const(int, 1)
DEBUG 2022-02-14 16:38:21,820 on stmt: $80compare_op.2 = a.1 != $const78.1
DEBUG 2022-02-14 16:38:21,820 on stmt: bool82 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:38:21,820 on stmt: $82pred = call bool82($80compare_op.2, func=bool82, args=(Var($80compare_op.2, numbers.py:230),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:21,820 on stmt: branch $82pred, 84, 106
DEBUG 2022-02-14 16:38:21,820 ==== SSA block rewrite pass on 84
DEBUG 2022-02-14 16:38:21,820 Running <numba.core.ssa._FreshVarHandler object at 0x7fa046fda2e0>
DEBUG 2022-02-14 16:38:21,820 on stmt: $const86.1 = const(int, -1)
DEBUG 2022-02-14 16:38:21,820 on stmt: $88compare_op.2 = a.1 != $const86.1
DEBUG 2022-02-14 16:38:21,821 on stmt: bool90 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:38:21,821 on stmt: $90pred = call bool90($88compare_op.2, func=bool90, args=(Var($88compare_op.2, numbers.py:230),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:21,821 on stmt: branch $90pred, 92, 106
DEBUG 2022-02-14 16:38:21,821 ==== SSA block rewrite pass on 92
DEBUG 2022-02-14 16:38:21,821 Running <numba.core.ssa._FreshVarHandler object at 0x7fa046fda2e0>
DEBUG 2022-02-14 16:38:21,821 on stmt: $const92.0 = const(int, 0)
DEBUG 2022-02-14 16:38:21,821 on stmt: $94return_value.1 = cast(value=$const92.0)
DEBUG 2022-02-14 16:38:21,821 on stmt: return $94return_value.1
DEBUG 2022-02-14 16:38:21,821 ==== SSA block rewrite pass on 98
DEBUG 2022-02-14 16:38:21,821 Running <numba.core.ssa._FreshVarHandler object at 0x7fa046fda2e0>
DEBUG 2022-02-14 16:38:21,821 on stmt: invert = const(bool, False)
DEBUG 2022-02-14 16:38:21,821 replaced with: invert.1 = const(bool, False)
DEBUG 2022-02-14 16:38:21,821 on stmt: exp.1 = b
DEBUG 2022-02-14 16:38:21,821 on stmt: jump 106
DEBUG 2022-02-14 16:38:21,821 ==== SSA block rewrite pass on 106
DEBUG 2022-02-14 16:38:21,821 Running <numba.core.ssa._FreshVarHandler object at 0x7fa046fda2e0>
DEBUG 2022-02-14 16:38:21,821 on stmt: exp.3 = phi(incoming_values=[Var(exp.1, numbers.py:234), Var(exp, numbers.py:221), Var(exp, numbers.py:221)], incoming_blocks=[98, 76, 84])
DEBUG 2022-02-14 16:38:21,821 on stmt: $const108.1 = const(int, 65536)
DEBUG 2022-02-14 16:38:21,821 on stmt: $110compare_op.2 = exp.3 > $const108.1
DEBUG 2022-02-14 16:38:21,821 on stmt: bool112 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:38:21,821 on stmt: $112pred = call bool112($110compare_op.2, func=bool112, args=(Var($110compare_op.2, numbers.py:235),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:21,821 on stmt: branch $112pred, 114, 130
DEBUG 2022-02-14 16:38:21,821 ==== SSA block rewrite pass on 114
DEBUG 2022-02-14 16:38:21,821 Running <numba.core.ssa._FreshVarHandler object at 0x7fa046fda2e0>
DEBUG 2022-02-14 16:38:21,821 on stmt: $114load_global.0 = global(math: <module 'math' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/lib-dynload/math.cpython-39-x86_64-linux-gnu.so'>)
DEBUG 2022-02-14 16:38:21,821 on stmt: $116load_method.1 = getattr(value=$114load_global.0, attr=pow)
DEBUG 2022-02-14 16:38:21,822 on stmt: $120load_global.3 = global(float: <class 'float'>)
DEBUG 2022-02-14 16:38:21,822 on stmt: $124call_function.5 = call $120load_global.3(b, func=$120load_global.3, args=[Var(b, numbers.py:217)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:21,822 on stmt: $126call_method.6 = call $116load_method.1(a.1, $124call_function.5, func=$116load_method.1, args=[Var(a.1, numbers.py:218), Var($124call_function.5, numbers.py:237)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:21,822 on stmt: $128return_value.7 = cast(value=$126call_method.6)
DEBUG 2022-02-14 16:38:21,822 on stmt: return $128return_value.7
DEBUG 2022-02-14 16:38:21,822 ==== SSA block rewrite pass on 130
DEBUG 2022-02-14 16:38:21,822 Running <numba.core.ssa._FreshVarHandler object at 0x7fa046fda2e0>
DEBUG 2022-02-14 16:38:21,822 on stmt: exp.4 = phi(incoming_values=[Var(exp.3, numbers.py:235), Var(exp.2, numbers.py:241)], incoming_blocks=[106, 154])
DEBUG 2022-02-14 16:38:21,822 on stmt: a.1.2 = phi(incoming_values=[Var(a.1, numbers.py:218), Var(a.1.1, numbers.py:242)], incoming_blocks=[106, 154])
DEBUG 2022-02-14 16:38:21,822 on stmt: $const132.1 = const(int, 0)
DEBUG 2022-02-14 16:38:21,822 on stmt: $134compare_op.2 = exp.4 != $const132.1
DEBUG 2022-02-14 16:38:21,822 on stmt: bool136 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:38:21,822 on stmt: $136pred = call bool136($134compare_op.2, func=bool136, args=(Var($134compare_op.2, numbers.py:238),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:21,822 on stmt: branch $136pred, 138, 172
DEBUG 2022-02-14 16:38:21,822 ==== SSA block rewrite pass on 138
DEBUG 2022-02-14 16:38:21,822 Running <numba.core.ssa._FreshVarHandler object at 0x7fa046fda2e0>
DEBUG 2022-02-14 16:38:21,822 on stmt: $const140.1 = const(int, 1)
DEBUG 2022-02-14 16:38:21,822 on stmt: $142binary_and.2 = exp.4 & $const140.1
DEBUG 2022-02-14 16:38:21,822 on stmt: bool144 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:38:21,822 on stmt: $144pred = call bool144($142binary_and.2, func=bool144, args=(Var($142binary_and.2, numbers.py:239),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:21,822 on stmt: branch $144pred, 146, 154
DEBUG 2022-02-14 16:38:21,822 ==== SSA block rewrite pass on 146
DEBUG 2022-02-14 16:38:21,822 Running <numba.core.ssa._FreshVarHandler object at 0x7fa046fda2e0>
DEBUG 2022-02-14 16:38:21,822 on stmt: $150inplace_multiply.2 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=r, rhs=a.1.2, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:38:21,823 on stmt: r = $150inplace_multiply.2
DEBUG 2022-02-14 16:38:21,823 on stmt: jump 154
DEBUG 2022-02-14 16:38:21,823 ==== SSA block rewrite pass on 154
DEBUG 2022-02-14 16:38:21,823 Running <numba.core.ssa._FreshVarHandler object at 0x7fa046fda2e0>
DEBUG 2022-02-14 16:38:21,823 on stmt: $const156.1 = const(int, 1)
DEBUG 2022-02-14 16:38:21,823 on stmt: $158inplace_rshift.2 = inplace_binop(fn=<built-in function irshift>, immutable_fn=<built-in function rshift>, lhs=exp.4, rhs=$const156.1, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:38:21,823 on stmt: exp.2 = $158inplace_rshift.2
DEBUG 2022-02-14 16:38:21,823 on stmt: $166inplace_multiply.5 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=a.1.2, rhs=a.1.2, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:38:21,823 on stmt: a.1.1 = $166inplace_multiply.5
DEBUG 2022-02-14 16:38:21,823 on stmt: jump 130
DEBUG 2022-02-14 16:38:21,823 ==== SSA block rewrite pass on 172
DEBUG 2022-02-14 16:38:21,823 Running <numba.core.ssa._FreshVarHandler object at 0x7fa046fda2e0>
DEBUG 2022-02-14 16:38:21,823 on stmt: bool174 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:38:21,823 on stmt: $174pred = call bool174(invert, func=bool174, args=(Var(invert, numbers.py:220),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:21,823 on stmt: branch $174pred, 176, 184
DEBUG 2022-02-14 16:38:21,823 ==== SSA block rewrite pass on 176
DEBUG 2022-02-14 16:38:21,823 Running <numba.core.ssa._FreshVarHandler object at 0x7fa046fda2e0>
DEBUG 2022-02-14 16:38:21,823 on stmt: $const176.0 = const(float, 1.0)
DEBUG 2022-02-14 16:38:21,823 on stmt: $180binary_true_divide.2 = $const176.0 / r
DEBUG 2022-02-14 16:38:21,823 on stmt: $182return_value.3 = cast(value=$180binary_true_divide.2)
DEBUG 2022-02-14 16:38:21,823 on stmt: return $182return_value.3
DEBUG 2022-02-14 16:38:21,823 ==== SSA block rewrite pass on 184
DEBUG 2022-02-14 16:38:21,823 Running <numba.core.ssa._FreshVarHandler object at 0x7fa046fda2e0>
DEBUG 2022-02-14 16:38:21,823 on stmt: $186return_value.1 = cast(value=r)
DEBUG 2022-02-14 16:38:21,823 on stmt: return $186return_value.1
DEBUG 2022-02-14 16:38:21,823 Replaced assignments: defaultdict(<class 'list'>,
            {26: [<numba.core.ir.Assign object at 0x7fa0462ad160>],
             98: [<numba.core.ir.Assign object at 0x7fa0462ba850>]})
DEBUG 2022-02-14 16:38:21,824 ==== SSA block rewrite pass on 0
DEBUG 2022-02-14 16:38:21,824 Running <numba.core.ssa._FixSSAVars object at 0x7fa046fddcd0>
DEBUG 2022-02-14 16:38:21,824 on stmt: a = arg(0, name=a)
DEBUG 2022-02-14 16:38:21,824 on stmt: b = arg(1, name=b)
DEBUG 2022-02-14 16:38:21,824 on stmt: $2load_deref.0 = freevar(tp: int64)
DEBUG 2022-02-14 16:38:21,824 on stmt: $const4.1 = const(int, 1)
DEBUG 2022-02-14 16:38:21,824 on stmt: r = call $2load_deref.0($const4.1, func=$2load_deref.0, args=[Var($const4.1, numbers.py:217)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:21,824 on stmt: $10load_deref.3 = freevar(tp: int64)
DEBUG 2022-02-14 16:38:21,824 on stmt: a.1 = call $10load_deref.3(a, func=$10load_deref.3, args=[Var(a, numbers.py:217)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:21,824 on stmt: $const20.7 = const(int, 0)
DEBUG 2022-02-14 16:38:21,824 on stmt: $22compare_op.8 = b < $const20.7
DEBUG 2022-02-14 16:38:21,824 on stmt: bool24 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:38:21,824 on stmt: $24pred = call bool24($22compare_op.8, func=bool24, args=(Var($22compare_op.8, numbers.py:219),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:21,824 on stmt: branch $24pred, 26, 98
DEBUG 2022-02-14 16:38:21,824 ==== SSA block rewrite pass on 26
DEBUG 2022-02-14 16:38:21,824 Running <numba.core.ssa._FixSSAVars object at 0x7fa046fddcd0>
DEBUG 2022-02-14 16:38:21,824 on stmt: invert = const(bool, True)
DEBUG 2022-02-14 16:38:21,824 on stmt: exp = unary(fn=<built-in function neg>, value=b)
DEBUG 2022-02-14 16:38:21,824 on stmt: $const38.4 = const(int, 0)
DEBUG 2022-02-14 16:38:21,824 on stmt: $40compare_op.5 = exp < $const38.4
DEBUG 2022-02-14 16:38:21,824 on stmt: bool42 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:38:21,824 on stmt: $42pred = call bool42($40compare_op.5, func=bool42, args=(Var($40compare_op.5, numbers.py:222),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:21,825 on stmt: branch $42pred, 44, 48
DEBUG 2022-02-14 16:38:21,825 ==== SSA block rewrite pass on 44
DEBUG 2022-02-14 16:38:21,825 Running <numba.core.ssa._FixSSAVars object at 0x7fa046fddcd0>
DEBUG 2022-02-14 16:38:21,825 on stmt: $44load_global.0 = global(OverflowError: <class 'OverflowError'>)
DEBUG 2022-02-14 16:38:21,825 on stmt: <static> raise <class 'OverflowError'>
DEBUG 2022-02-14 16:38:21,825 ==== SSA block rewrite pass on 48
DEBUG 2022-02-14 16:38:21,825 Running <numba.core.ssa._FixSSAVars object at 0x7fa046fddcd0>
DEBUG 2022-02-14 16:38:21,825 on stmt: $48load_deref.0 = freevar(is_integer: True)
DEBUG 2022-02-14 16:38:21,825 on stmt: bool50 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:38:21,825 on stmt: $50pred = call bool50($48load_deref.0, func=bool50, args=(Var($48load_deref.0, numbers.py:224),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:21,825 on stmt: jump 52
DEBUG 2022-02-14 16:38:21,825 ==== SSA block rewrite pass on 52
DEBUG 2022-02-14 16:38:21,825 Running <numba.core.ssa._FixSSAVars object at 0x7fa046fddcd0>
DEBUG 2022-02-14 16:38:21,825 on stmt: $const54.1 = const(int, 0)
DEBUG 2022-02-14 16:38:21,825 on stmt: $56compare_op.2 = a.1 == $const54.1
DEBUG 2022-02-14 16:38:21,825 on stmt: bool58 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:38:21,825 on stmt: $58pred = call bool58($56compare_op.2, func=bool58, args=(Var($56compare_op.2, numbers.py:225),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:21,825 on stmt: branch $58pred, 60, 76
DEBUG 2022-02-14 16:38:21,825 ==== SSA block rewrite pass on 60
DEBUG 2022-02-14 16:38:21,825 Running <numba.core.ssa._FixSSAVars object at 0x7fa046fddcd0>
DEBUG 2022-02-14 16:38:21,825 on stmt: $60load_deref.0 = freevar(zerodiv_return: -9223372036854775808)
DEBUG 2022-02-14 16:38:21,825 on stmt: bool62 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:38:21,825 on stmt: $62pred = call bool62($60load_deref.0, func=bool62, args=(Var($60load_deref.0, numbers.py:226),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:21,826 on stmt: jump 64
DEBUG 2022-02-14 16:38:21,826 ==== SSA block rewrite pass on 64
DEBUG 2022-02-14 16:38:21,826 Running <numba.core.ssa._FixSSAVars object at 0x7fa046fddcd0>
DEBUG 2022-02-14 16:38:21,826 on stmt: $64load_deref.0 = freevar(zerodiv_return: -9223372036854775808)
DEBUG 2022-02-14 16:38:21,826 on stmt: $66return_value.1 = cast(value=$64load_deref.0)
DEBUG 2022-02-14 16:38:21,826 on stmt: return $66return_value.1
DEBUG 2022-02-14 16:38:21,826 ==== SSA block rewrite pass on 76
DEBUG 2022-02-14 16:38:21,826 Running <numba.core.ssa._FixSSAVars object at 0x7fa046fddcd0>
DEBUG 2022-02-14 16:38:21,826 on stmt: $const78.1 = const(int, 1)
DEBUG 2022-02-14 16:38:21,826 on stmt: $80compare_op.2 = a.1 != $const78.1
DEBUG 2022-02-14 16:38:21,826 on stmt: bool82 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:38:21,826 on stmt: $82pred = call bool82($80compare_op.2, func=bool82, args=(Var($80compare_op.2, numbers.py:230),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:21,826 on stmt: branch $82pred, 84, 106
DEBUG 2022-02-14 16:38:21,826 ==== SSA block rewrite pass on 84
DEBUG 2022-02-14 16:38:21,826 Running <numba.core.ssa._FixSSAVars object at 0x7fa046fddcd0>
DEBUG 2022-02-14 16:38:21,826 on stmt: $const86.1 = const(int, -1)
DEBUG 2022-02-14 16:38:21,826 on stmt: $88compare_op.2 = a.1 != $const86.1
DEBUG 2022-02-14 16:38:21,826 on stmt: bool90 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:38:21,826 on stmt: $90pred = call bool90($88compare_op.2, func=bool90, args=(Var($88compare_op.2, numbers.py:230),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:21,826 on stmt: branch $90pred, 92, 106
DEBUG 2022-02-14 16:38:21,826 ==== SSA block rewrite pass on 92
DEBUG 2022-02-14 16:38:21,826 Running <numba.core.ssa._FixSSAVars object at 0x7fa046fddcd0>
DEBUG 2022-02-14 16:38:21,826 on stmt: $const92.0 = const(int, 0)
DEBUG 2022-02-14 16:38:21,826 on stmt: $94return_value.1 = cast(value=$const92.0)
DEBUG 2022-02-14 16:38:21,826 on stmt: return $94return_value.1
DEBUG 2022-02-14 16:38:21,827 ==== SSA block rewrite pass on 98
DEBUG 2022-02-14 16:38:21,827 Running <numba.core.ssa._FixSSAVars object at 0x7fa046fddcd0>
DEBUG 2022-02-14 16:38:21,827 on stmt: invert.1 = const(bool, False)
DEBUG 2022-02-14 16:38:21,827 on stmt: exp.1 = b
DEBUG 2022-02-14 16:38:21,827 on stmt: jump 106
DEBUG 2022-02-14 16:38:21,827 ==== SSA block rewrite pass on 106
DEBUG 2022-02-14 16:38:21,827 Running <numba.core.ssa._FixSSAVars object at 0x7fa046fddcd0>
DEBUG 2022-02-14 16:38:21,827 on stmt: exp.3 = phi(incoming_values=[Var(exp.1, numbers.py:234), Var(exp, numbers.py:221), Var(exp, numbers.py:221)], incoming_blocks=[98, 76, 84])
DEBUG 2022-02-14 16:38:21,827 on stmt: $const108.1 = const(int, 65536)
DEBUG 2022-02-14 16:38:21,827 on stmt: $110compare_op.2 = exp.3 > $const108.1
DEBUG 2022-02-14 16:38:21,827 on stmt: bool112 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:38:21,827 on stmt: $112pred = call bool112($110compare_op.2, func=bool112, args=(Var($110compare_op.2, numbers.py:235),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:21,827 on stmt: branch $112pred, 114, 130
DEBUG 2022-02-14 16:38:21,827 ==== SSA block rewrite pass on 114
DEBUG 2022-02-14 16:38:21,827 Running <numba.core.ssa._FixSSAVars object at 0x7fa046fddcd0>
DEBUG 2022-02-14 16:38:21,827 on stmt: $114load_global.0 = global(math: <module 'math' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/lib-dynload/math.cpython-39-x86_64-linux-gnu.so'>)
DEBUG 2022-02-14 16:38:21,827 on stmt: $116load_method.1 = getattr(value=$114load_global.0, attr=pow)
DEBUG 2022-02-14 16:38:21,827 on stmt: $120load_global.3 = global(float: <class 'float'>)
DEBUG 2022-02-14 16:38:21,827 on stmt: $124call_function.5 = call $120load_global.3(b, func=$120load_global.3, args=[Var(b, numbers.py:217)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:21,827 on stmt: $126call_method.6 = call $116load_method.1(a.1, $124call_function.5, func=$116load_method.1, args=[Var(a.1, numbers.py:218), Var($124call_function.5, numbers.py:237)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:21,827 on stmt: $128return_value.7 = cast(value=$126call_method.6)
DEBUG 2022-02-14 16:38:21,827 on stmt: return $128return_value.7
DEBUG 2022-02-14 16:38:21,827 ==== SSA block rewrite pass on 130
DEBUG 2022-02-14 16:38:21,828 Running <numba.core.ssa._FixSSAVars object at 0x7fa046fddcd0>
DEBUG 2022-02-14 16:38:21,828 on stmt: exp.4 = phi(incoming_values=[Var(exp.3, numbers.py:235), Var(exp.2, numbers.py:241)], incoming_blocks=[106, 154])
DEBUG 2022-02-14 16:38:21,828 on stmt: a.1.2 = phi(incoming_values=[Var(a.1, numbers.py:218), Var(a.1.1, numbers.py:242)], incoming_blocks=[106, 154])
DEBUG 2022-02-14 16:38:21,828 on stmt: $const132.1 = const(int, 0)
DEBUG 2022-02-14 16:38:21,828 on stmt: $134compare_op.2 = exp.4 != $const132.1
DEBUG 2022-02-14 16:38:21,828 on stmt: bool136 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:38:21,828 on stmt: $136pred = call bool136($134compare_op.2, func=bool136, args=(Var($134compare_op.2, numbers.py:238),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:21,828 on stmt: branch $136pred, 138, 172
DEBUG 2022-02-14 16:38:21,828 ==== SSA block rewrite pass on 138
DEBUG 2022-02-14 16:38:21,828 Running <numba.core.ssa._FixSSAVars object at 0x7fa046fddcd0>
DEBUG 2022-02-14 16:38:21,828 on stmt: $const140.1 = const(int, 1)
DEBUG 2022-02-14 16:38:21,828 on stmt: $142binary_and.2 = exp.4 & $const140.1
DEBUG 2022-02-14 16:38:21,828 on stmt: bool144 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:38:21,828 on stmt: $144pred = call bool144($142binary_and.2, func=bool144, args=(Var($142binary_and.2, numbers.py:239),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:21,828 on stmt: branch $144pred, 146, 154
DEBUG 2022-02-14 16:38:21,828 ==== SSA block rewrite pass on 146
DEBUG 2022-02-14 16:38:21,828 Running <numba.core.ssa._FixSSAVars object at 0x7fa046fddcd0>
DEBUG 2022-02-14 16:38:21,828 on stmt: $150inplace_multiply.2 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=r, rhs=a.1.2, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:38:21,828 on stmt: r = $150inplace_multiply.2
DEBUG 2022-02-14 16:38:21,828 on stmt: jump 154
DEBUG 2022-02-14 16:38:21,828 ==== SSA block rewrite pass on 154
DEBUG 2022-02-14 16:38:21,828 Running <numba.core.ssa._FixSSAVars object at 0x7fa046fddcd0>
DEBUG 2022-02-14 16:38:21,828 on stmt: $const156.1 = const(int, 1)
DEBUG 2022-02-14 16:38:21,828 on stmt: $158inplace_rshift.2 = inplace_binop(fn=<built-in function irshift>, immutable_fn=<built-in function rshift>, lhs=exp.4, rhs=$const156.1, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:38:21,828 on stmt: exp.2 = $158inplace_rshift.2
DEBUG 2022-02-14 16:38:21,829 on stmt: $166inplace_multiply.5 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=a.1.2, rhs=a.1.2, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:38:21,829 on stmt: a.1.1 = $166inplace_multiply.5
DEBUG 2022-02-14 16:38:21,829 on stmt: jump 130
DEBUG 2022-02-14 16:38:21,829 ==== SSA block rewrite pass on 172
DEBUG 2022-02-14 16:38:21,829 Running <numba.core.ssa._FixSSAVars object at 0x7fa046fddcd0>
DEBUG 2022-02-14 16:38:21,829 on stmt: bool174 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:38:21,829 on stmt: $174pred = call bool174(invert, func=bool174, args=(Var(invert, numbers.py:220),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:21,829 find_def var='invert' stmt=$174pred = call bool174(invert, func=bool174, args=(Var(invert, numbers.py:220),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:21,829 find_def_from_top label 172
DEBUG 2022-02-14 16:38:21,829 idom 130 from label 172
DEBUG 2022-02-14 16:38:21,829 find_def_from_bottom label 130
DEBUG 2022-02-14 16:38:21,829 find_def_from_top label 130
DEBUG 2022-02-14 16:38:21,829 idom 106 from label 130
DEBUG 2022-02-14 16:38:21,829 find_def_from_bottom label 106
DEBUG 2022-02-14 16:38:21,829 find_def_from_top label 106
DEBUG 2022-02-14 16:38:21,829 insert phi node invert.2 = phi(incoming_values=[], incoming_blocks=[]) at 106
DEBUG 2022-02-14 16:38:21,829 find_def_from_bottom label 98
DEBUG 2022-02-14 16:38:21,829 incoming_def invert.1 = const(bool, False)
DEBUG 2022-02-14 16:38:21,829 find_def_from_bottom label 76
DEBUG 2022-02-14 16:38:21,829 find_def_from_top label 76
DEBUG 2022-02-14 16:38:21,829 idom 52 from label 76
DEBUG 2022-02-14 16:38:21,829 find_def_from_bottom label 52
DEBUG 2022-02-14 16:38:21,829 find_def_from_top label 52
DEBUG 2022-02-14 16:38:21,829 idom 48 from label 52
DEBUG 2022-02-14 16:38:21,829 find_def_from_bottom label 48
DEBUG 2022-02-14 16:38:21,829 find_def_from_top label 48
DEBUG 2022-02-14 16:38:21,829 idom 26 from label 48
DEBUG 2022-02-14 16:38:21,829 find_def_from_bottom label 26
DEBUG 2022-02-14 16:38:21,829 incoming_def invert = const(bool, True)
DEBUG 2022-02-14 16:38:21,830 find_def_from_bottom label 84
DEBUG 2022-02-14 16:38:21,830 find_def_from_top label 84
DEBUG 2022-02-14 16:38:21,830 idom 76 from label 84
DEBUG 2022-02-14 16:38:21,830 find_def_from_bottom label 76
DEBUG 2022-02-14 16:38:21,830 find_def_from_top label 76
DEBUG 2022-02-14 16:38:21,830 idom 52 from label 76
DEBUG 2022-02-14 16:38:21,830 find_def_from_bottom label 52
DEBUG 2022-02-14 16:38:21,830 find_def_from_top label 52
DEBUG 2022-02-14 16:38:21,830 idom 48 from label 52
DEBUG 2022-02-14 16:38:21,830 find_def_from_bottom label 48
DEBUG 2022-02-14 16:38:21,830 find_def_from_top label 48
DEBUG 2022-02-14 16:38:21,830 idom 26 from label 48
DEBUG 2022-02-14 16:38:21,830 find_def_from_bottom label 26
DEBUG 2022-02-14 16:38:21,830 incoming_def invert = const(bool, True)
DEBUG 2022-02-14 16:38:21,830 replaced with: $174pred = call bool174(invert.2, func=bool174, args=(Var(invert.2, numbers.py:244),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:21,830 on stmt: branch $174pred, 176, 184
DEBUG 2022-02-14 16:38:21,830 ==== SSA block rewrite pass on 176
DEBUG 2022-02-14 16:38:21,830 Running <numba.core.ssa._FixSSAVars object at 0x7fa046fddcd0>
DEBUG 2022-02-14 16:38:21,830 on stmt: $const176.0 = const(float, 1.0)
DEBUG 2022-02-14 16:38:21,830 on stmt: $180binary_true_divide.2 = $const176.0 / r
DEBUG 2022-02-14 16:38:21,830 on stmt: $182return_value.3 = cast(value=$180binary_true_divide.2)
DEBUG 2022-02-14 16:38:21,830 on stmt: return $182return_value.3
DEBUG 2022-02-14 16:38:21,830 ==== SSA block rewrite pass on 184
DEBUG 2022-02-14 16:38:21,830 Running <numba.core.ssa._FixSSAVars object at 0x7fa046fddcd0>
DEBUG 2022-02-14 16:38:21,830 on stmt: $186return_value.1 = cast(value=r)
DEBUG 2022-02-14 16:38:21,831 on stmt: return $186return_value.1
DEBUG 2022-02-14 16:38:21,831 Fix SSA violator on var r
DEBUG 2022-02-14 16:38:21,831 ==== SSA block rewrite pass on 0
DEBUG 2022-02-14 16:38:21,831 Running <numba.core.ssa._FreshVarHandler object at 0x7fa046f2d550>
DEBUG 2022-02-14 16:38:21,831 on stmt: a = arg(0, name=a)
DEBUG 2022-02-14 16:38:21,831 on stmt: b = arg(1, name=b)
DEBUG 2022-02-14 16:38:21,831 on stmt: $2load_deref.0 = freevar(tp: int64)
DEBUG 2022-02-14 16:38:21,831 on stmt: $const4.1 = const(int, 1)
DEBUG 2022-02-14 16:38:21,831 on stmt: r = call $2load_deref.0($const4.1, func=$2load_deref.0, args=[Var($const4.1, numbers.py:217)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:21,831 first assign: r
DEBUG 2022-02-14 16:38:21,831 replaced with: r = call $2load_deref.0($const4.1, func=$2load_deref.0, args=[Var($const4.1, numbers.py:217)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:21,831 on stmt: $10load_deref.3 = freevar(tp: int64)
DEBUG 2022-02-14 16:38:21,831 on stmt: a.1 = call $10load_deref.3(a, func=$10load_deref.3, args=[Var(a, numbers.py:217)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:21,831 on stmt: $const20.7 = const(int, 0)
DEBUG 2022-02-14 16:38:21,831 on stmt: $22compare_op.8 = b < $const20.7
DEBUG 2022-02-14 16:38:21,831 on stmt: bool24 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:38:21,831 on stmt: $24pred = call bool24($22compare_op.8, func=bool24, args=(Var($22compare_op.8, numbers.py:219),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:21,831 on stmt: branch $24pred, 26, 98
DEBUG 2022-02-14 16:38:21,831 ==== SSA block rewrite pass on 26
DEBUG 2022-02-14 16:38:21,831 Running <numba.core.ssa._FreshVarHandler object at 0x7fa046f2d550>
DEBUG 2022-02-14 16:38:21,831 on stmt: invert = const(bool, True)
DEBUG 2022-02-14 16:38:21,831 on stmt: exp = unary(fn=<built-in function neg>, value=b)
DEBUG 2022-02-14 16:38:21,831 on stmt: $const38.4 = const(int, 0)
DEBUG 2022-02-14 16:38:21,831 on stmt: $40compare_op.5 = exp < $const38.4
DEBUG 2022-02-14 16:38:21,831 on stmt: bool42 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:38:21,832 on stmt: $42pred = call bool42($40compare_op.5, func=bool42, args=(Var($40compare_op.5, numbers.py:222),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:21,832 on stmt: branch $42pred, 44, 48
DEBUG 2022-02-14 16:38:21,832 ==== SSA block rewrite pass on 44
DEBUG 2022-02-14 16:38:21,832 Running <numba.core.ssa._FreshVarHandler object at 0x7fa046f2d550>
DEBUG 2022-02-14 16:38:21,832 on stmt: $44load_global.0 = global(OverflowError: <class 'OverflowError'>)
DEBUG 2022-02-14 16:38:21,832 on stmt: <static> raise <class 'OverflowError'>
DEBUG 2022-02-14 16:38:21,832 ==== SSA block rewrite pass on 48
DEBUG 2022-02-14 16:38:21,832 Running <numba.core.ssa._FreshVarHandler object at 0x7fa046f2d550>
DEBUG 2022-02-14 16:38:21,832 on stmt: $48load_deref.0 = freevar(is_integer: True)
DEBUG 2022-02-14 16:38:21,832 on stmt: bool50 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:38:21,832 on stmt: $50pred = call bool50($48load_deref.0, func=bool50, args=(Var($48load_deref.0, numbers.py:224),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:21,832 on stmt: jump 52
DEBUG 2022-02-14 16:38:21,832 ==== SSA block rewrite pass on 52
DEBUG 2022-02-14 16:38:21,832 Running <numba.core.ssa._FreshVarHandler object at 0x7fa046f2d550>
DEBUG 2022-02-14 16:38:21,832 on stmt: $const54.1 = const(int, 0)
DEBUG 2022-02-14 16:38:21,832 on stmt: $56compare_op.2 = a.1 == $const54.1
DEBUG 2022-02-14 16:38:21,832 on stmt: bool58 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:38:21,832 on stmt: $58pred = call bool58($56compare_op.2, func=bool58, args=(Var($56compare_op.2, numbers.py:225),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:21,832 on stmt: branch $58pred, 60, 76
DEBUG 2022-02-14 16:38:21,832 ==== SSA block rewrite pass on 60
DEBUG 2022-02-14 16:38:21,832 Running <numba.core.ssa._FreshVarHandler object at 0x7fa046f2d550>
DEBUG 2022-02-14 16:38:21,832 on stmt: $60load_deref.0 = freevar(zerodiv_return: -9223372036854775808)
DEBUG 2022-02-14 16:38:21,832 on stmt: bool62 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:38:21,832 on stmt: $62pred = call bool62($60load_deref.0, func=bool62, args=(Var($60load_deref.0, numbers.py:226),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:21,832 on stmt: jump 64
DEBUG 2022-02-14 16:38:21,832 ==== SSA block rewrite pass on 64
DEBUG 2022-02-14 16:38:21,833 Running <numba.core.ssa._FreshVarHandler object at 0x7fa046f2d550>
DEBUG 2022-02-14 16:38:21,833 on stmt: $64load_deref.0 = freevar(zerodiv_return: -9223372036854775808)
DEBUG 2022-02-14 16:38:21,833 on stmt: $66return_value.1 = cast(value=$64load_deref.0)
DEBUG 2022-02-14 16:38:21,833 on stmt: return $66return_value.1
DEBUG 2022-02-14 16:38:21,833 ==== SSA block rewrite pass on 76
DEBUG 2022-02-14 16:38:21,833 Running <numba.core.ssa._FreshVarHandler object at 0x7fa046f2d550>
DEBUG 2022-02-14 16:38:21,833 on stmt: $const78.1 = const(int, 1)
DEBUG 2022-02-14 16:38:21,833 on stmt: $80compare_op.2 = a.1 != $const78.1
DEBUG 2022-02-14 16:38:21,833 on stmt: bool82 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:38:21,833 on stmt: $82pred = call bool82($80compare_op.2, func=bool82, args=(Var($80compare_op.2, numbers.py:230),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:21,833 on stmt: branch $82pred, 84, 106
DEBUG 2022-02-14 16:38:21,833 ==== SSA block rewrite pass on 84
DEBUG 2022-02-14 16:38:21,833 Running <numba.core.ssa._FreshVarHandler object at 0x7fa046f2d550>
DEBUG 2022-02-14 16:38:21,833 on stmt: $const86.1 = const(int, -1)
DEBUG 2022-02-14 16:38:21,833 on stmt: $88compare_op.2 = a.1 != $const86.1
DEBUG 2022-02-14 16:38:21,833 on stmt: bool90 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:38:21,833 on stmt: $90pred = call bool90($88compare_op.2, func=bool90, args=(Var($88compare_op.2, numbers.py:230),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:21,833 on stmt: branch $90pred, 92, 106
DEBUG 2022-02-14 16:38:21,833 ==== SSA block rewrite pass on 92
DEBUG 2022-02-14 16:38:21,833 Running <numba.core.ssa._FreshVarHandler object at 0x7fa046f2d550>
DEBUG 2022-02-14 16:38:21,833 on stmt: $const92.0 = const(int, 0)
DEBUG 2022-02-14 16:38:21,833 on stmt: $94return_value.1 = cast(value=$const92.0)
DEBUG 2022-02-14 16:38:21,833 on stmt: return $94return_value.1
DEBUG 2022-02-14 16:38:21,833 ==== SSA block rewrite pass on 98
DEBUG 2022-02-14 16:38:21,833 Running <numba.core.ssa._FreshVarHandler object at 0x7fa046f2d550>
DEBUG 2022-02-14 16:38:21,833 on stmt: invert.1 = const(bool, False)
DEBUG 2022-02-14 16:38:21,833 on stmt: exp.1 = b
DEBUG 2022-02-14 16:38:21,834 on stmt: jump 106
DEBUG 2022-02-14 16:38:21,834 ==== SSA block rewrite pass on 106
DEBUG 2022-02-14 16:38:21,834 Running <numba.core.ssa._FreshVarHandler object at 0x7fa046f2d550>
DEBUG 2022-02-14 16:38:21,834 on stmt: invert.2 = phi(incoming_values=[Var(invert.1, numbers.py:233), Var(invert, numbers.py:220), Var(invert, numbers.py:220)], incoming_blocks=[98, 76, 84])
DEBUG 2022-02-14 16:38:21,834 on stmt: exp.3 = phi(incoming_values=[Var(exp.1, numbers.py:234), Var(exp, numbers.py:221), Var(exp, numbers.py:221)], incoming_blocks=[98, 76, 84])
DEBUG 2022-02-14 16:38:21,834 on stmt: $const108.1 = const(int, 65536)
DEBUG 2022-02-14 16:38:21,834 on stmt: $110compare_op.2 = exp.3 > $const108.1
DEBUG 2022-02-14 16:38:21,834 on stmt: bool112 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:38:21,834 on stmt: $112pred = call bool112($110compare_op.2, func=bool112, args=(Var($110compare_op.2, numbers.py:235),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:21,834 on stmt: branch $112pred, 114, 130
DEBUG 2022-02-14 16:38:21,834 ==== SSA block rewrite pass on 114
DEBUG 2022-02-14 16:38:21,834 Running <numba.core.ssa._FreshVarHandler object at 0x7fa046f2d550>
DEBUG 2022-02-14 16:38:21,834 on stmt: $114load_global.0 = global(math: <module 'math' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/lib-dynload/math.cpython-39-x86_64-linux-gnu.so'>)
DEBUG 2022-02-14 16:38:21,834 on stmt: $116load_method.1 = getattr(value=$114load_global.0, attr=pow)
DEBUG 2022-02-14 16:38:21,834 on stmt: $120load_global.3 = global(float: <class 'float'>)
DEBUG 2022-02-14 16:38:21,834 on stmt: $124call_function.5 = call $120load_global.3(b, func=$120load_global.3, args=[Var(b, numbers.py:217)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:21,834 on stmt: $126call_method.6 = call $116load_method.1(a.1, $124call_function.5, func=$116load_method.1, args=[Var(a.1, numbers.py:218), Var($124call_function.5, numbers.py:237)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:21,834 on stmt: $128return_value.7 = cast(value=$126call_method.6)
DEBUG 2022-02-14 16:38:21,834 on stmt: return $128return_value.7
DEBUG 2022-02-14 16:38:21,834 ==== SSA block rewrite pass on 130
DEBUG 2022-02-14 16:38:21,834 Running <numba.core.ssa._FreshVarHandler object at 0x7fa046f2d550>
DEBUG 2022-02-14 16:38:21,834 on stmt: exp.4 = phi(incoming_values=[Var(exp.3, numbers.py:235), Var(exp.2, numbers.py:241)], incoming_blocks=[106, 154])
DEBUG 2022-02-14 16:38:21,834 on stmt: a.1.2 = phi(incoming_values=[Var(a.1, numbers.py:218), Var(a.1.1, numbers.py:242)], incoming_blocks=[106, 154])
DEBUG 2022-02-14 16:38:21,834 on stmt: $const132.1 = const(int, 0)
DEBUG 2022-02-14 16:38:21,835 on stmt: $134compare_op.2 = exp.4 != $const132.1
DEBUG 2022-02-14 16:38:21,835 on stmt: bool136 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:38:21,835 on stmt: $136pred = call bool136($134compare_op.2, func=bool136, args=(Var($134compare_op.2, numbers.py:238),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:21,835 on stmt: branch $136pred, 138, 172
DEBUG 2022-02-14 16:38:21,835 ==== SSA block rewrite pass on 138
DEBUG 2022-02-14 16:38:21,835 Running <numba.core.ssa._FreshVarHandler object at 0x7fa046f2d550>
DEBUG 2022-02-14 16:38:21,835 on stmt: $const140.1 = const(int, 1)
DEBUG 2022-02-14 16:38:21,835 on stmt: $142binary_and.2 = exp.4 & $const140.1
DEBUG 2022-02-14 16:38:21,835 on stmt: bool144 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:38:21,835 on stmt: $144pred = call bool144($142binary_and.2, func=bool144, args=(Var($142binary_and.2, numbers.py:239),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:21,835 on stmt: branch $144pred, 146, 154
DEBUG 2022-02-14 16:38:21,835 ==== SSA block rewrite pass on 146
DEBUG 2022-02-14 16:38:21,835 Running <numba.core.ssa._FreshVarHandler object at 0x7fa046f2d550>
DEBUG 2022-02-14 16:38:21,835 on stmt: $150inplace_multiply.2 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=r, rhs=a.1.2, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:38:21,835 on stmt: r = $150inplace_multiply.2
DEBUG 2022-02-14 16:38:21,835 replaced with: r.1 = $150inplace_multiply.2
DEBUG 2022-02-14 16:38:21,835 on stmt: jump 154
DEBUG 2022-02-14 16:38:21,835 ==== SSA block rewrite pass on 154
DEBUG 2022-02-14 16:38:21,835 Running <numba.core.ssa._FreshVarHandler object at 0x7fa046f2d550>
DEBUG 2022-02-14 16:38:21,835 on stmt: $const156.1 = const(int, 1)
DEBUG 2022-02-14 16:38:21,835 on stmt: $158inplace_rshift.2 = inplace_binop(fn=<built-in function irshift>, immutable_fn=<built-in function rshift>, lhs=exp.4, rhs=$const156.1, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:38:21,835 on stmt: exp.2 = $158inplace_rshift.2
DEBUG 2022-02-14 16:38:21,835 on stmt: $166inplace_multiply.5 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=a.1.2, rhs=a.1.2, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:38:21,835 on stmt: a.1.1 = $166inplace_multiply.5
DEBUG 2022-02-14 16:38:21,835 on stmt: jump 130
DEBUG 2022-02-14 16:38:21,836 ==== SSA block rewrite pass on 172
DEBUG 2022-02-14 16:38:21,836 Running <numba.core.ssa._FreshVarHandler object at 0x7fa046f2d550>
DEBUG 2022-02-14 16:38:21,836 on stmt: bool174 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:38:21,836 on stmt: $174pred = call bool174(invert.2, func=bool174, args=(Var(invert.2, numbers.py:244),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:21,836 on stmt: branch $174pred, 176, 184
DEBUG 2022-02-14 16:38:21,836 ==== SSA block rewrite pass on 176
DEBUG 2022-02-14 16:38:21,836 Running <numba.core.ssa._FreshVarHandler object at 0x7fa046f2d550>
DEBUG 2022-02-14 16:38:21,836 on stmt: $const176.0 = const(float, 1.0)
DEBUG 2022-02-14 16:38:21,836 on stmt: $180binary_true_divide.2 = $const176.0 / r
DEBUG 2022-02-14 16:38:21,836 on stmt: $182return_value.3 = cast(value=$180binary_true_divide.2)
DEBUG 2022-02-14 16:38:21,836 on stmt: return $182return_value.3
DEBUG 2022-02-14 16:38:21,836 ==== SSA block rewrite pass on 184
DEBUG 2022-02-14 16:38:21,836 Running <numba.core.ssa._FreshVarHandler object at 0x7fa046f2d550>
DEBUG 2022-02-14 16:38:21,836 on stmt: $186return_value.1 = cast(value=r)
DEBUG 2022-02-14 16:38:21,836 on stmt: return $186return_value.1
DEBUG 2022-02-14 16:38:21,836 Replaced assignments: defaultdict(<class 'list'>,
            {0: [<numba.core.ir.Assign object at 0x7fa046f2d670>],
             146: [<numba.core.ir.Assign object at 0x7fa0462a89a0>]})
DEBUG 2022-02-14 16:38:21,836 ==== SSA block rewrite pass on 0
DEBUG 2022-02-14 16:38:21,836 Running <numba.core.ssa._FixSSAVars object at 0x7fa046fda490>
DEBUG 2022-02-14 16:38:21,836 on stmt: a = arg(0, name=a)
DEBUG 2022-02-14 16:38:21,836 on stmt: b = arg(1, name=b)
DEBUG 2022-02-14 16:38:21,836 on stmt: $2load_deref.0 = freevar(tp: int64)
DEBUG 2022-02-14 16:38:21,836 on stmt: $const4.1 = const(int, 1)
DEBUG 2022-02-14 16:38:21,836 on stmt: r = call $2load_deref.0($const4.1, func=$2load_deref.0, args=[Var($const4.1, numbers.py:217)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:21,837 on stmt: $10load_deref.3 = freevar(tp: int64)
DEBUG 2022-02-14 16:38:21,837 on stmt: a.1 = call $10load_deref.3(a, func=$10load_deref.3, args=[Var(a, numbers.py:217)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:21,837 on stmt: $const20.7 = const(int, 0)
DEBUG 2022-02-14 16:38:21,837 on stmt: $22compare_op.8 = b < $const20.7
DEBUG 2022-02-14 16:38:21,837 on stmt: bool24 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:38:21,837 on stmt: $24pred = call bool24($22compare_op.8, func=bool24, args=(Var($22compare_op.8, numbers.py:219),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:21,837 on stmt: branch $24pred, 26, 98
DEBUG 2022-02-14 16:38:21,837 ==== SSA block rewrite pass on 26
DEBUG 2022-02-14 16:38:21,837 Running <numba.core.ssa._FixSSAVars object at 0x7fa046fda490>
DEBUG 2022-02-14 16:38:21,837 on stmt: invert = const(bool, True)
DEBUG 2022-02-14 16:38:21,837 on stmt: exp = unary(fn=<built-in function neg>, value=b)
DEBUG 2022-02-14 16:38:21,837 on stmt: $const38.4 = const(int, 0)
DEBUG 2022-02-14 16:38:21,837 on stmt: $40compare_op.5 = exp < $const38.4
DEBUG 2022-02-14 16:38:21,837 on stmt: bool42 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:38:21,837 on stmt: $42pred = call bool42($40compare_op.5, func=bool42, args=(Var($40compare_op.5, numbers.py:222),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:21,837 on stmt: branch $42pred, 44, 48
DEBUG 2022-02-14 16:38:21,837 ==== SSA block rewrite pass on 44
DEBUG 2022-02-14 16:38:21,837 Running <numba.core.ssa._FixSSAVars object at 0x7fa046fda490>
DEBUG 2022-02-14 16:38:21,837 on stmt: $44load_global.0 = global(OverflowError: <class 'OverflowError'>)
DEBUG 2022-02-14 16:38:21,837 on stmt: <static> raise <class 'OverflowError'>
DEBUG 2022-02-14 16:38:21,837 ==== SSA block rewrite pass on 48
DEBUG 2022-02-14 16:38:21,837 Running <numba.core.ssa._FixSSAVars object at 0x7fa046fda490>
DEBUG 2022-02-14 16:38:21,837 on stmt: $48load_deref.0 = freevar(is_integer: True)
DEBUG 2022-02-14 16:38:21,837 on stmt: bool50 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:38:21,838 on stmt: $50pred = call bool50($48load_deref.0, func=bool50, args=(Var($48load_deref.0, numbers.py:224),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:21,838 on stmt: jump 52
DEBUG 2022-02-14 16:38:21,838 ==== SSA block rewrite pass on 52
DEBUG 2022-02-14 16:38:21,838 Running <numba.core.ssa._FixSSAVars object at 0x7fa046fda490>
DEBUG 2022-02-14 16:38:21,838 on stmt: $const54.1 = const(int, 0)
DEBUG 2022-02-14 16:38:21,838 on stmt: $56compare_op.2 = a.1 == $const54.1
DEBUG 2022-02-14 16:38:21,838 on stmt: bool58 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:38:21,838 on stmt: $58pred = call bool58($56compare_op.2, func=bool58, args=(Var($56compare_op.2, numbers.py:225),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:21,838 on stmt: branch $58pred, 60, 76
DEBUG 2022-02-14 16:38:21,838 ==== SSA block rewrite pass on 60
DEBUG 2022-02-14 16:38:21,838 Running <numba.core.ssa._FixSSAVars object at 0x7fa046fda490>
DEBUG 2022-02-14 16:38:21,838 on stmt: $60load_deref.0 = freevar(zerodiv_return: -9223372036854775808)
DEBUG 2022-02-14 16:38:21,838 on stmt: bool62 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:38:21,838 on stmt: $62pred = call bool62($60load_deref.0, func=bool62, args=(Var($60load_deref.0, numbers.py:226),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:21,838 on stmt: jump 64
DEBUG 2022-02-14 16:38:21,838 ==== SSA block rewrite pass on 64
DEBUG 2022-02-14 16:38:21,838 Running <numba.core.ssa._FixSSAVars object at 0x7fa046fda490>
DEBUG 2022-02-14 16:38:21,838 on stmt: $64load_deref.0 = freevar(zerodiv_return: -9223372036854775808)
DEBUG 2022-02-14 16:38:21,838 on stmt: $66return_value.1 = cast(value=$64load_deref.0)
DEBUG 2022-02-14 16:38:21,838 on stmt: return $66return_value.1
DEBUG 2022-02-14 16:38:21,838 ==== SSA block rewrite pass on 76
DEBUG 2022-02-14 16:38:21,838 Running <numba.core.ssa._FixSSAVars object at 0x7fa046fda490>
DEBUG 2022-02-14 16:38:21,838 on stmt: $const78.1 = const(int, 1)
DEBUG 2022-02-14 16:38:21,838 on stmt: $80compare_op.2 = a.1 != $const78.1
DEBUG 2022-02-14 16:38:21,838 on stmt: bool82 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:38:21,839 on stmt: $82pred = call bool82($80compare_op.2, func=bool82, args=(Var($80compare_op.2, numbers.py:230),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:21,839 on stmt: branch $82pred, 84, 106
DEBUG 2022-02-14 16:38:21,839 ==== SSA block rewrite pass on 84
DEBUG 2022-02-14 16:38:21,839 Running <numba.core.ssa._FixSSAVars object at 0x7fa046fda490>
DEBUG 2022-02-14 16:38:21,839 on stmt: $const86.1 = const(int, -1)
DEBUG 2022-02-14 16:38:21,839 on stmt: $88compare_op.2 = a.1 != $const86.1
DEBUG 2022-02-14 16:38:21,839 on stmt: bool90 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:38:21,839 on stmt: $90pred = call bool90($88compare_op.2, func=bool90, args=(Var($88compare_op.2, numbers.py:230),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:21,839 on stmt: branch $90pred, 92, 106
DEBUG 2022-02-14 16:38:21,839 ==== SSA block rewrite pass on 92
DEBUG 2022-02-14 16:38:21,839 Running <numba.core.ssa._FixSSAVars object at 0x7fa046fda490>
DEBUG 2022-02-14 16:38:21,839 on stmt: $const92.0 = const(int, 0)
DEBUG 2022-02-14 16:38:21,839 on stmt: $94return_value.1 = cast(value=$const92.0)
DEBUG 2022-02-14 16:38:21,839 on stmt: return $94return_value.1
DEBUG 2022-02-14 16:38:21,839 ==== SSA block rewrite pass on 98
DEBUG 2022-02-14 16:38:21,839 Running <numba.core.ssa._FixSSAVars object at 0x7fa046fda490>
DEBUG 2022-02-14 16:38:21,839 on stmt: invert.1 = const(bool, False)
DEBUG 2022-02-14 16:38:21,839 on stmt: exp.1 = b
DEBUG 2022-02-14 16:38:21,839 on stmt: jump 106
DEBUG 2022-02-14 16:38:21,839 ==== SSA block rewrite pass on 106
DEBUG 2022-02-14 16:38:21,839 Running <numba.core.ssa._FixSSAVars object at 0x7fa046fda490>
DEBUG 2022-02-14 16:38:21,839 on stmt: invert.2 = phi(incoming_values=[Var(invert.1, numbers.py:233), Var(invert, numbers.py:220), Var(invert, numbers.py:220)], incoming_blocks=[98, 76, 84])
DEBUG 2022-02-14 16:38:21,839 on stmt: exp.3 = phi(incoming_values=[Var(exp.1, numbers.py:234), Var(exp, numbers.py:221), Var(exp, numbers.py:221)], incoming_blocks=[98, 76, 84])
DEBUG 2022-02-14 16:38:21,839 on stmt: $const108.1 = const(int, 65536)
DEBUG 2022-02-14 16:38:21,839 on stmt: $110compare_op.2 = exp.3 > $const108.1
DEBUG 2022-02-14 16:38:21,840 on stmt: bool112 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:38:21,840 on stmt: $112pred = call bool112($110compare_op.2, func=bool112, args=(Var($110compare_op.2, numbers.py:235),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:21,840 on stmt: branch $112pred, 114, 130
DEBUG 2022-02-14 16:38:21,840 ==== SSA block rewrite pass on 114
DEBUG 2022-02-14 16:38:21,840 Running <numba.core.ssa._FixSSAVars object at 0x7fa046fda490>
DEBUG 2022-02-14 16:38:21,840 on stmt: $114load_global.0 = global(math: <module 'math' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/lib-dynload/math.cpython-39-x86_64-linux-gnu.so'>)
DEBUG 2022-02-14 16:38:21,840 on stmt: $116load_method.1 = getattr(value=$114load_global.0, attr=pow)
DEBUG 2022-02-14 16:38:21,840 on stmt: $120load_global.3 = global(float: <class 'float'>)
DEBUG 2022-02-14 16:38:21,840 on stmt: $124call_function.5 = call $120load_global.3(b, func=$120load_global.3, args=[Var(b, numbers.py:217)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:21,840 on stmt: $126call_method.6 = call $116load_method.1(a.1, $124call_function.5, func=$116load_method.1, args=[Var(a.1, numbers.py:218), Var($124call_function.5, numbers.py:237)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:21,840 on stmt: $128return_value.7 = cast(value=$126call_method.6)
DEBUG 2022-02-14 16:38:21,840 on stmt: return $128return_value.7
DEBUG 2022-02-14 16:38:21,840 ==== SSA block rewrite pass on 130
DEBUG 2022-02-14 16:38:21,840 Running <numba.core.ssa._FixSSAVars object at 0x7fa046fda490>
DEBUG 2022-02-14 16:38:21,840 on stmt: exp.4 = phi(incoming_values=[Var(exp.3, numbers.py:235), Var(exp.2, numbers.py:241)], incoming_blocks=[106, 154])
DEBUG 2022-02-14 16:38:21,840 on stmt: a.1.2 = phi(incoming_values=[Var(a.1, numbers.py:218), Var(a.1.1, numbers.py:242)], incoming_blocks=[106, 154])
DEBUG 2022-02-14 16:38:21,840 on stmt: $const132.1 = const(int, 0)
DEBUG 2022-02-14 16:38:21,840 on stmt: $134compare_op.2 = exp.4 != $const132.1
DEBUG 2022-02-14 16:38:21,840 on stmt: bool136 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:38:21,840 on stmt: $136pred = call bool136($134compare_op.2, func=bool136, args=(Var($134compare_op.2, numbers.py:238),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:21,840 on stmt: branch $136pred, 138, 172
DEBUG 2022-02-14 16:38:21,840 ==== SSA block rewrite pass on 138
DEBUG 2022-02-14 16:38:21,840 Running <numba.core.ssa._FixSSAVars object at 0x7fa046fda490>
DEBUG 2022-02-14 16:38:21,840 on stmt: $const140.1 = const(int, 1)
DEBUG 2022-02-14 16:38:21,841 on stmt: $142binary_and.2 = exp.4 & $const140.1
DEBUG 2022-02-14 16:38:21,841 on stmt: bool144 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:38:21,841 on stmt: $144pred = call bool144($142binary_and.2, func=bool144, args=(Var($142binary_and.2, numbers.py:239),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:21,841 on stmt: branch $144pred, 146, 154
DEBUG 2022-02-14 16:38:21,841 ==== SSA block rewrite pass on 146
DEBUG 2022-02-14 16:38:21,841 Running <numba.core.ssa._FixSSAVars object at 0x7fa046fda490>
DEBUG 2022-02-14 16:38:21,841 on stmt: $150inplace_multiply.2 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=r, rhs=a.1.2, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:38:21,841 find_def var='r' stmt=$150inplace_multiply.2 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=r, rhs=a.1.2, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:38:21,841 find_def_from_top label 146
DEBUG 2022-02-14 16:38:21,841 idom 138 from label 146
DEBUG 2022-02-14 16:38:21,841 find_def_from_bottom label 138
DEBUG 2022-02-14 16:38:21,841 find_def_from_top label 138
DEBUG 2022-02-14 16:38:21,841 idom 130 from label 138
DEBUG 2022-02-14 16:38:21,841 find_def_from_bottom label 130
DEBUG 2022-02-14 16:38:21,841 find_def_from_top label 130
DEBUG 2022-02-14 16:38:21,841 insert phi node r.2 = phi(incoming_values=[], incoming_blocks=[]) at 130
DEBUG 2022-02-14 16:38:21,841 find_def_from_bottom label 106
DEBUG 2022-02-14 16:38:21,841 find_def_from_top label 106
DEBUG 2022-02-14 16:38:21,841 idom 0 from label 106
DEBUG 2022-02-14 16:38:21,841 find_def_from_bottom label 0
DEBUG 2022-02-14 16:38:21,841 incoming_def r = call $2load_deref.0($const4.1, func=$2load_deref.0, args=[Var($const4.1, numbers.py:217)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:21,841 find_def_from_bottom label 154
DEBUG 2022-02-14 16:38:21,841 find_def_from_top label 154
DEBUG 2022-02-14 16:38:21,841 insert phi node r.3 = phi(incoming_values=[], incoming_blocks=[]) at 154
DEBUG 2022-02-14 16:38:21,841 find_def_from_bottom label 138
DEBUG 2022-02-14 16:38:21,841 find_def_from_top label 138
DEBUG 2022-02-14 16:38:21,842 idom 130 from label 138
DEBUG 2022-02-14 16:38:21,842 find_def_from_bottom label 130
DEBUG 2022-02-14 16:38:21,842 incoming_def r.2 = phi(incoming_values=[Var(r, numbers.py:217)], incoming_blocks=[106])
DEBUG 2022-02-14 16:38:21,842 find_def_from_bottom label 146
DEBUG 2022-02-14 16:38:21,842 incoming_def r.1 = $150inplace_multiply.2
DEBUG 2022-02-14 16:38:21,842 incoming_def r.3 = phi(incoming_values=[Var(r.2, numbers.py:240), Var(r.1, numbers.py:240)], incoming_blocks=[138, 146])
DEBUG 2022-02-14 16:38:21,842 replaced with: $150inplace_multiply.2 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=r.2, rhs=a.1.2, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:38:21,842 on stmt: r.1 = $150inplace_multiply.2
DEBUG 2022-02-14 16:38:21,842 on stmt: jump 154
DEBUG 2022-02-14 16:38:21,842 ==== SSA block rewrite pass on 154
DEBUG 2022-02-14 16:38:21,842 Running <numba.core.ssa._FixSSAVars object at 0x7fa046fda490>
DEBUG 2022-02-14 16:38:21,842 on stmt: $const156.1 = const(int, 1)
DEBUG 2022-02-14 16:38:21,842 on stmt: $158inplace_rshift.2 = inplace_binop(fn=<built-in function irshift>, immutable_fn=<built-in function rshift>, lhs=exp.4, rhs=$const156.1, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:38:21,842 on stmt: exp.2 = $158inplace_rshift.2
DEBUG 2022-02-14 16:38:21,842 on stmt: $166inplace_multiply.5 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=a.1.2, rhs=a.1.2, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:38:21,842 on stmt: a.1.1 = $166inplace_multiply.5
DEBUG 2022-02-14 16:38:21,842 on stmt: jump 130
DEBUG 2022-02-14 16:38:21,842 ==== SSA block rewrite pass on 172
DEBUG 2022-02-14 16:38:21,842 Running <numba.core.ssa._FixSSAVars object at 0x7fa046fda490>
DEBUG 2022-02-14 16:38:21,842 on stmt: bool174 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:38:21,842 on stmt: $174pred = call bool174(invert.2, func=bool174, args=(Var(invert.2, numbers.py:244),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:38:21,842 on stmt: branch $174pred, 176, 184
DEBUG 2022-02-14 16:38:21,842 ==== SSA block rewrite pass on 176
DEBUG 2022-02-14 16:38:21,842 Running <numba.core.ssa._FixSSAVars object at 0x7fa046fda490>
DEBUG 2022-02-14 16:38:21,842 on stmt: $const176.0 = const(float, 1.0)
DEBUG 2022-02-14 16:38:21,843 on stmt: $180binary_true_divide.2 = $const176.0 / r
DEBUG 2022-02-14 16:38:21,843 find_def var='r' stmt=$180binary_true_divide.2 = $const176.0 / r
DEBUG 2022-02-14 16:38:21,843 find_def_from_top label 176
DEBUG 2022-02-14 16:38:21,843 idom 172 from label 176
DEBUG 2022-02-14 16:38:21,843 find_def_from_bottom label 172
DEBUG 2022-02-14 16:38:21,843 find_def_from_top label 172
DEBUG 2022-02-14 16:38:21,843 idom 130 from label 172
DEBUG 2022-02-14 16:38:21,843 find_def_from_bottom label 130
DEBUG 2022-02-14 16:38:21,843 replaced with: $180binary_true_divide.2 = $const176.0 / r.2
DEBUG 2022-02-14 16:38:21,843 on stmt: $182return_value.3 = cast(value=$180binary_true_divide.2)
DEBUG 2022-02-14 16:38:21,843 on stmt: return $182return_value.3
DEBUG 2022-02-14 16:38:21,843 ==== SSA block rewrite pass on 184
DEBUG 2022-02-14 16:38:21,843 Running <numba.core.ssa._FixSSAVars object at 0x7fa046fda490>
DEBUG 2022-02-14 16:38:21,843 on stmt: $186return_value.1 = cast(value=r)
DEBUG 2022-02-14 16:38:21,843 find_def var='r' stmt=$186return_value.1 = cast(value=r)
DEBUG 2022-02-14 16:38:21,843 find_def_from_top label 184
DEBUG 2022-02-14 16:38:21,843 idom 172 from label 184
DEBUG 2022-02-14 16:38:21,843 find_def_from_bottom label 172
DEBUG 2022-02-14 16:38:21,843 find_def_from_top label 172
DEBUG 2022-02-14 16:38:21,843 idom 130 from label 172
DEBUG 2022-02-14 16:38:21,843 find_def_from_bottom label 130
DEBUG 2022-02-14 16:38:21,843 replaced with: $186return_value.1 = cast(value=r.2)
DEBUG 2022-02-14 16:38:21,843 on stmt: return $186return_value.1
