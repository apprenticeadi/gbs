INFO 2022-01-28 15:49:16,111 Running chain rule sampling with PNRDs for [2, 3, 4] modes. n_samples = 4096
INFO 2022-01-28 15:49:16,111 Squeezing r = 1.55, coherent state alpha = 0.6
INFO 2022-01-28 15:49:16,111 This is a test run
INFO 2022-01-28 15:49:16,121 Test run with two squeezed modes with 20 samples
INFO 2022-01-28 15:49:16,121 U=[[-0.77094125+0.42143887j  0.20809956+0.42980628j]
 [ 0.25759401+0.40209973j -0.76230832+0.43686057j]]
INFO 2022-01-28 15:49:16,129 mu_test = [ 0. -0. -0.  0.], cov_test = [[ 8.07202383  7.91358974  5.21616915  4.85336358]
 [ 7.91358974  7.85464169  4.85336358  5.08284981]
 [ 5.21616915  4.85336358 14.17097665 -7.91358974]
 [ 4.85336358  5.08284981 -7.91358974 14.38835879]]
DEBUG 2022-01-28 15:49:16,141 bytecode dump:
>          0	NOP(arg=None, lineno=24)
           2	LOAD_FAST(arg=1, lineno=24)
           4	LOAD_CONST(arg=1, lineno=24)
           6	BINARY_SUBSCR(arg=None, lineno=24)
           8	STORE_FAST(arg=6, lineno=24)
          10	LOAD_FAST(arg=0, lineno=25)
          12	LOAD_CONST(arg=1, lineno=25)
          14	LOAD_CONST(arg=0, lineno=25)
          16	LOAD_CONST(arg=0, lineno=25)
          18	BUILD_SLICE(arg=2, lineno=25)
          20	BUILD_TUPLE(arg=2, lineno=25)
          22	BINARY_SUBSCR(arg=None, lineno=25)
          24	STORE_FAST(arg=7, lineno=25)
          26	LOAD_FAST(arg=0, lineno=27)
          28	LOAD_ATTR(arg=0, lineno=27)
          30	LOAD_CONST(arg=1, lineno=27)
          32	BINARY_SUBSCR(arg=None, lineno=27)
          34	STORE_FAST(arg=8, lineno=27)
          36	LOAD_CONST(arg=2, lineno=28)
          38	LOAD_FAST(arg=2, lineno=28)
          40	LOAD_METHOD(arg=1, lineno=28)
          42	CALL_METHOD(arg=0, lineno=28)
          44	BINARY_MULTIPLY(arg=None, lineno=28)
          46	STORE_FAST(arg=9, lineno=28)
          48	LOAD_FAST(arg=9, lineno=30)
          50	LOAD_CONST(arg=2, lineno=30)
          52	LOAD_FAST(arg=3, lineno=30)
          54	BINARY_MULTIPLY(arg=None, lineno=30)
          56	BINARY_ADD(arg=None, lineno=30)
          58	LOAD_FAST(arg=4, lineno=30)
          60	BINARY_ADD(arg=None, lineno=30)
          62	STORE_FAST(arg=10, lineno=30)
          64	LOAD_GLOBAL(arg=2, lineno=32)
          66	LOAD_METHOD(arg=3, lineno=32)
          68	LOAD_GLOBAL(arg=2, lineno=32)
          70	LOAD_METHOD(arg=4, lineno=32)
          72	LOAD_FAST(arg=3, lineno=32)
          74	BUILD_LIST(arg=1, lineno=32)
          76	CALL_METHOD(arg=1, lineno=32)
          78	LOAD_FAST(arg=2, lineno=32)
          80	BUILD_TUPLE(arg=2, lineno=32)
          82	CALL_METHOD(arg=1, lineno=32)
          84	STORE_FAST(arg=11, lineno=32)
          86	LOAD_GLOBAL(arg=2, lineno=33)
          88	LOAD_METHOD(arg=5, lineno=33)
          90	LOAD_FAST(arg=11, lineno=33)
          92	LOAD_CONST(arg=3, lineno=33)
          94	BINARY_ADD(arg=None, lineno=33)
          96	CALL_METHOD(arg=1, lineno=33)
          98	STORE_FAST(arg=12, lineno=33)
         100	LOAD_FAST(arg=11, lineno=35)
         102	LOAD_METHOD(arg=6, lineno=35)
         104	CALL_METHOD(arg=0, lineno=35)
         106	LOAD_FAST(arg=4, lineno=35)
         108	BINARY_ADD(arg=None, lineno=35)
         110	STORE_FAST(arg=13, lineno=35)
         112	LOAD_GLOBAL(arg=7, lineno=36)
         114	LOAD_FAST(arg=13, lineno=36)
         116	CALL_FUNCTION(arg=1, lineno=36)
         118	STORE_FAST(arg=14, lineno=36)
         120	LOAD_GLOBAL(arg=2, lineno=38)
         122	LOAD_ATTR(arg=8, lineno=38)
         124	LOAD_CONST(arg=2, lineno=38)
         126	LOAD_FAST(arg=3, lineno=38)
         128	BINARY_MULTIPLY(arg=None, lineno=38)
         130	LOAD_FAST(arg=4, lineno=38)
         132	BINARY_ADD(arg=None, lineno=38)
         134	LOAD_CONST(arg=3, lineno=38)
         136	BINARY_ADD(arg=None, lineno=38)
         138	LOAD_GLOBAL(arg=2, lineno=38)
         140	LOAD_ATTR(arg=9, lineno=38)
         142	LOAD_CONST(arg=4, lineno=38)
         144	CALL_FUNCTION_KW(arg=2, lineno=38)
         146	STORE_FAST(arg=15, lineno=38)
         148	LOAD_GLOBAL(arg=10, lineno=39)
         150	LOAD_METHOD(arg=11, lineno=39)
         152	LOAD_FAST(arg=12, lineno=39)
         154	CALL_METHOD(arg=1, lineno=39)
         156	GET_ITER(arg=None, lineno=39)
>        158	FOR_ITER(arg=358, lineno=39)
         162	STORE_FAST(arg=16, lineno=39)
         164	LOAD_GLOBAL(arg=2, lineno=41)
         166	LOAD_ATTR(arg=8, lineno=41)
         168	LOAD_CONST(arg=2, lineno=41)
         170	LOAD_FAST(arg=3, lineno=41)
         172	BINARY_MULTIPLY(arg=None, lineno=41)
         174	LOAD_FAST(arg=4, lineno=41)
         176	BINARY_ADD(arg=None, lineno=41)
         178	LOAD_CONST(arg=3, lineno=41)
         180	BINARY_ADD(arg=None, lineno=41)
         182	LOAD_GLOBAL(arg=2, lineno=41)
         184	LOAD_ATTR(arg=9, lineno=41)
         186	LOAD_CONST(arg=4, lineno=41)
         188	CALL_FUNCTION_KW(arg=2, lineno=41)
         190	STORE_FAST(arg=17, lineno=41)
         192	LOAD_GLOBAL(arg=12, lineno=43)
         194	LOAD_FAST(arg=16, lineno=43)
         196	LOAD_FAST(arg=11, lineno=43)
         198	CALL_FUNCTION(arg=2, lineno=43)
         200	STORE_FAST(arg=18, lineno=43)
         202	LOAD_FAST(arg=18, lineno=44)
         204	LOAD_METHOD(arg=1, lineno=44)
         206	CALL_METHOD(arg=0, lineno=44)
         208	STORE_FAST(arg=19, lineno=44)
         210	LOAD_CONST(arg=5, lineno=46)
         212	STORE_FAST(arg=20, lineno=46)
         214	LOAD_GLOBAL(arg=13, lineno=47)
         216	LOAD_CONST(arg=3, lineno=47)
         218	LOAD_FAST(arg=8, lineno=47)
         220	LOAD_CONST(arg=2, lineno=47)
         222	BINARY_FLOOR_DIVIDE(arg=None, lineno=47)
         224	CALL_FUNCTION(arg=2, lineno=47)
         226	GET_ITER(arg=None, lineno=47)
>        228	FOR_ITER(arg=28, lineno=47)
         230	STORE_FAST(arg=21, lineno=47)
         232	LOAD_FAST(arg=20, lineno=48)
         234	LOAD_FAST(arg=14, lineno=48)
         236	LOAD_FAST(arg=11, lineno=48)
         238	LOAD_FAST(arg=21, lineno=48)
         240	BINARY_SUBSCR(arg=None, lineno=48)
         242	LOAD_FAST(arg=18, lineno=48)
         244	LOAD_FAST(arg=21, lineno=48)
         246	BINARY_SUBSCR(arg=None, lineno=48)
         248	BUILD_TUPLE(arg=2, lineno=48)
         250	BINARY_SUBSCR(arg=None, lineno=48)
         252	INPLACE_MULTIPLY(arg=None, lineno=48)
         254	STORE_FAST(arg=20, lineno=48)
         256	JUMP_ABSOLUTE(arg=228, lineno=48)
>        258	LOAD_FAST(arg=5, lineno=50)
         260	POP_JUMP_IF_FALSE(arg=278, lineno=50)
         264	LOAD_CONST(arg=2, lineno=51)
         266	LOAD_FAST(arg=18, lineno=51)
         268	BINARY_MULTIPLY(arg=None, lineno=51)
         270	LOAD_FAST(arg=11, lineno=51)
         272	BINARY_SUBTRACT(arg=None, lineno=51)
         274	STORE_FAST(arg=22, lineno=51)
         276	JUMP_FORWARD(arg=4, lineno=51)
>        278	LOAD_FAST(arg=18, lineno=53)
         280	STORE_FAST(arg=22, lineno=53)
>        282	LOAD_GLOBAL(arg=14, lineno=55)
         284	LOAD_FAST(arg=22, lineno=55)
         286	LOAD_FAST(arg=0, lineno=55)
         288	LOAD_FAST(arg=1, lineno=55)
         290	LOAD_FAST(arg=7, lineno=55)
         292	CALL_FUNCTION(arg=4, lineno=55)
         294	UNPACK_SEQUENCE(arg=4, lineno=55)
         296	STORE_FAST(arg=23, lineno=55)
         298	STORE_FAST(arg=24, lineno=55)
         300	STORE_FAST(arg=25, lineno=55)
         302	STORE_FAST(arg=26, lineno=55)
         304	LOAD_GLOBAL(arg=15, lineno=57)
         306	LOAD_FAST(arg=23, lineno=57)
         308	CALL_FUNCTION(arg=1, lineno=57)
         310	STORE_FAST(arg=27, lineno=57)
         312	LOAD_GLOBAL(arg=16, lineno=61)
         314	LOAD_FAST(arg=27, lineno=61)
         316	LOAD_FAST(arg=23, lineno=61)
         318	LOAD_FAST(arg=24, lineno=61)
         320	LOAD_FAST(arg=25, lineno=61)
         322	LOAD_FAST(arg=10, lineno=61)
         324	CALL_FUNCTION(arg=5, lineno=61)
         326	STORE_FAST(arg=28, lineno=61)
         328	LOAD_GLOBAL(arg=17, lineno=62)
         330	LOAD_FAST(arg=27, lineno=62)
         332	LOAD_FAST(arg=23, lineno=62)
         334	LOAD_FAST(arg=24, lineno=62)
         336	LOAD_FAST(arg=25, lineno=62)
         338	LOAD_FAST(arg=10, lineno=62)
         340	LOAD_FAST(arg=6, lineno=62)
         342	LOAD_FAST(arg=26, lineno=62)
         344	CALL_FUNCTION(arg=7, lineno=62)
         346	STORE_FAST(arg=29, lineno=62)
         348	LOAD_GLOBAL(arg=13, lineno=64)
         350	LOAD_CONST(arg=2, lineno=64)
         352	LOAD_FAST(arg=18, lineno=64)
         354	LOAD_CONST(arg=1, lineno=64)
         356	BINARY_SUBSCR(arg=None, lineno=64)
         358	BINARY_MULTIPLY(arg=None, lineno=64)
         360	LOAD_CONST(arg=2, lineno=64)
         362	LOAD_FAST(arg=3, lineno=64)
         364	BINARY_MULTIPLY(arg=None, lineno=64)
         366	LOAD_FAST(arg=4, lineno=64)
         368	BINARY_ADD(arg=None, lineno=64)
         370	LOAD_CONST(arg=3, lineno=64)
         372	BINARY_ADD(arg=None, lineno=64)
         374	CALL_FUNCTION(arg=2, lineno=64)
         376	GET_ITER(arg=None, lineno=64)
>        378	FOR_ITER(arg=130, lineno=64)
         380	STORE_FAST(arg=30, lineno=64)
         382	LOAD_FAST(arg=9, lineno=65)
         384	LOAD_FAST(arg=30, lineno=65)
         386	BINARY_ADD(arg=None, lineno=65)
         388	STORE_FAST(arg=31, lineno=65)
         390	LOAD_CONST(arg=6, lineno=66)
         392	LOAD_FAST(arg=31, lineno=66)
         394	LOAD_CONST(arg=2, lineno=66)
         396	BINARY_FLOOR_DIVIDE(arg=None, lineno=66)
         398	LOAD_FAST(arg=19, lineno=66)
         400	BINARY_SUBTRACT(arg=None, lineno=66)
         402	BINARY_POWER(arg=None, lineno=66)
         404	STORE_FAST(arg=32, lineno=66)
         406	LOAD_FAST(arg=14, lineno=68)
         408	LOAD_FAST(arg=30, lineno=68)
         410	LOAD_CONST(arg=2, lineno=68)
         412	BINARY_FLOOR_DIVIDE(arg=None, lineno=68)
         414	LOAD_FAST(arg=18, lineno=68)
         416	LOAD_CONST(arg=1, lineno=68)
         418	BINARY_SUBSCR(arg=None, lineno=68)
         420	BUILD_TUPLE(arg=2, lineno=68)
         422	BINARY_SUBSCR(arg=None, lineno=68)
         424	LOAD_FAST(arg=20, lineno=68)
         426	BINARY_MULTIPLY(arg=None, lineno=68)
         428	STORE_FAST(arg=33, lineno=68)
         430	LOAD_FAST(arg=30, lineno=70)
         432	LOAD_CONST(arg=2, lineno=70)
         434	BINARY_MODULO(arg=None, lineno=70)
         436	LOAD_CONST(arg=1, lineno=70)
         438	COMPARE_OP(arg=2, lineno=70)
         440	POP_JUMP_IF_FALSE(arg=478, lineno=70)
         444	LOAD_FAST(arg=17, lineno=71)
         446	LOAD_FAST(arg=30, lineno=71)
         448	DUP_TOP_TWO(arg=None, lineno=71)
         450	BINARY_SUBSCR(arg=None, lineno=71)
         452	LOAD_FAST(arg=33, lineno=71)
         454	LOAD_FAST(arg=32, lineno=71)
         456	BINARY_MULTIPLY(arg=None, lineno=71)
         458	LOAD_FAST(arg=28, lineno=71)
         460	LOAD_FAST(arg=31, lineno=71)
         462	LOAD_CONST(arg=2, lineno=71)
         464	BINARY_FLOOR_DIVIDE(arg=None, lineno=71)
         466	BINARY_SUBSCR(arg=None, lineno=71)
         468	BINARY_MULTIPLY(arg=None, lineno=71)
         470	INPLACE_ADD(arg=None, lineno=71)
         472	ROT_THREE(arg=None, lineno=71)
         474	STORE_SUBSCR(arg=None, lineno=71)
         476	JUMP_FORWARD(arg=28, lineno=71)
>        478	LOAD_FAST(arg=17, lineno=73)
         480	LOAD_FAST(arg=30, lineno=73)
         482	DUP_TOP_TWO(arg=None, lineno=73)
         484	BINARY_SUBSCR(arg=None, lineno=73)
         486	LOAD_FAST(arg=33, lineno=73)
         488	LOAD_FAST(arg=32, lineno=73)
         490	BINARY_MULTIPLY(arg=None, lineno=73)
         492	LOAD_FAST(arg=29, lineno=73)
         494	LOAD_FAST(arg=31, lineno=73)
         496	BINARY_SUBSCR(arg=None, lineno=73)
         498	BINARY_MULTIPLY(arg=None, lineno=73)
         500	INPLACE_ADD(arg=None, lineno=73)
         502	ROT_THREE(arg=None, lineno=73)
         504	STORE_SUBSCR(arg=None, lineno=73)
>        506	JUMP_ABSOLUTE(arg=378, lineno=73)
>        510	LOAD_FAST(arg=15, lineno=75)
         512	LOAD_FAST(arg=17, lineno=75)
         514	INPLACE_ADD(arg=None, lineno=75)
         516	STORE_FAST(arg=15, lineno=75)
         518	JUMP_ABSOLUTE(arg=158, lineno=75)
>        520	LOAD_FAST(arg=5, lineno=77)
         522	POP_JUMP_IF_FALSE(arg=580, lineno=77)
         526	LOAD_GLOBAL(arg=13, lineno=78)
         528	LOAD_FAST(arg=15, lineno=78)
         530	LOAD_ATTR(arg=0, lineno=78)
         532	LOAD_CONST(arg=1, lineno=78)
         534	BINARY_SUBSCR(arg=None, lineno=78)
         536	CALL_FUNCTION(arg=1, lineno=78)
         538	GET_ITER(arg=None, lineno=78)
>        540	FOR_ITER(arg=38, lineno=78)
         542	STORE_FAST(arg=16, lineno=78)
         544	LOAD_FAST(arg=9, lineno=79)
         546	LOAD_FAST(arg=16, lineno=79)
         548	BINARY_ADD(arg=None, lineno=79)
         550	STORE_FAST(arg=34, lineno=79)
         552	LOAD_FAST(arg=15, lineno=80)
         554	LOAD_FAST(arg=16, lineno=80)
         556	DUP_TOP_TWO(arg=None, lineno=80)
         558	BINARY_SUBSCR(arg=None, lineno=80)
         560	LOAD_CONST(arg=7, lineno=80)
         562	LOAD_FAST(arg=34, lineno=80)
         564	LOAD_CONST(arg=2, lineno=80)
         566	BINARY_FLOOR_DIVIDE(arg=None, lineno=80)
         568	BINARY_POWER(arg=None, lineno=80)
         570	INPLACE_MULTIPLY(arg=None, lineno=80)
         572	ROT_THREE(arg=None, lineno=80)
         574	STORE_SUBSCR(arg=None, lineno=80)
         576	JUMP_ABSOLUTE(arg=540, lineno=80)
>        580	LOAD_FAST(arg=15, lineno=82)
         582	RETURN_VALUE(arg=None, lineno=82)
DEBUG 2022-01-28 15:49:16,151 pending: deque([State(pc_initial=0 nstack_initial=0)])
DEBUG 2022-01-28 15:49:16,151 stack: []
DEBUG 2022-01-28 15:49:16,151 dispatch pc=0, inst=NOP(arg=None, lineno=24)
DEBUG 2022-01-28 15:49:16,151 stack []
DEBUG 2022-01-28 15:49:16,151 dispatch pc=2, inst=LOAD_FAST(arg=1, lineno=24)
DEBUG 2022-01-28 15:49:16,151 stack []
DEBUG 2022-01-28 15:49:16,151 dispatch pc=4, inst=LOAD_CONST(arg=1, lineno=24)
DEBUG 2022-01-28 15:49:16,151 stack ['$D2.0']
DEBUG 2022-01-28 15:49:16,151 dispatch pc=6, inst=BINARY_SUBSCR(arg=None, lineno=24)
DEBUG 2022-01-28 15:49:16,151 stack ['$D2.0', '$const4.1']
DEBUG 2022-01-28 15:49:16,151 dispatch pc=8, inst=STORE_FAST(arg=6, lineno=24)
DEBUG 2022-01-28 15:49:16,151 stack ['$6binary_subscr.2']
DEBUG 2022-01-28 15:49:16,151 dispatch pc=10, inst=LOAD_FAST(arg=0, lineno=25)
DEBUG 2022-01-28 15:49:16,151 stack []
DEBUG 2022-01-28 15:49:16,151 dispatch pc=12, inst=LOAD_CONST(arg=1, lineno=25)
DEBUG 2022-01-28 15:49:16,151 stack ['$A10.3']
DEBUG 2022-01-28 15:49:16,151 dispatch pc=14, inst=LOAD_CONST(arg=0, lineno=25)
DEBUG 2022-01-28 15:49:16,151 stack ['$A10.3', '$const12.4']
DEBUG 2022-01-28 15:49:16,151 dispatch pc=16, inst=LOAD_CONST(arg=0, lineno=25)
DEBUG 2022-01-28 15:49:16,151 stack ['$A10.3', '$const12.4', '$const14.5']
DEBUG 2022-01-28 15:49:16,151 dispatch pc=18, inst=BUILD_SLICE(arg=2, lineno=25)
DEBUG 2022-01-28 15:49:16,151 stack ['$A10.3', '$const12.4', '$const14.5', '$const16.6']
DEBUG 2022-01-28 15:49:16,151 dispatch pc=20, inst=BUILD_TUPLE(arg=2, lineno=25)
DEBUG 2022-01-28 15:49:16,151 stack ['$A10.3', '$const12.4', '$18build_slice.8']
DEBUG 2022-01-28 15:49:16,151 dispatch pc=22, inst=BINARY_SUBSCR(arg=None, lineno=25)
DEBUG 2022-01-28 15:49:16,151 stack ['$A10.3', '$20build_tuple.9']
DEBUG 2022-01-28 15:49:16,151 dispatch pc=24, inst=STORE_FAST(arg=7, lineno=25)
DEBUG 2022-01-28 15:49:16,151 stack ['$22binary_subscr.10']
DEBUG 2022-01-28 15:49:16,151 dispatch pc=26, inst=LOAD_FAST(arg=0, lineno=27)
DEBUG 2022-01-28 15:49:16,151 stack []
DEBUG 2022-01-28 15:49:16,151 dispatch pc=28, inst=LOAD_ATTR(arg=0, lineno=27)
DEBUG 2022-01-28 15:49:16,151 stack ['$A26.11']
DEBUG 2022-01-28 15:49:16,151 dispatch pc=30, inst=LOAD_CONST(arg=1, lineno=27)
DEBUG 2022-01-28 15:49:16,151 stack ['$28load_attr.12']
DEBUG 2022-01-28 15:49:16,151 dispatch pc=32, inst=BINARY_SUBSCR(arg=None, lineno=27)
DEBUG 2022-01-28 15:49:16,151 stack ['$28load_attr.12', '$const30.13']
DEBUG 2022-01-28 15:49:16,151 dispatch pc=34, inst=STORE_FAST(arg=8, lineno=27)
DEBUG 2022-01-28 15:49:16,151 stack ['$32binary_subscr.14']
DEBUG 2022-01-28 15:49:16,151 dispatch pc=36, inst=LOAD_CONST(arg=2, lineno=28)
DEBUG 2022-01-28 15:49:16,151 stack []
DEBUG 2022-01-28 15:49:16,151 dispatch pc=38, inst=LOAD_FAST(arg=2, lineno=28)
DEBUG 2022-01-28 15:49:16,151 stack ['$const36.15']
DEBUG 2022-01-28 15:49:16,151 dispatch pc=40, inst=LOAD_METHOD(arg=1, lineno=28)
DEBUG 2022-01-28 15:49:16,151 stack ['$const36.15', '$fixed_edge_reps38.16']
DEBUG 2022-01-28 15:49:16,159 dispatch pc=42, inst=CALL_METHOD(arg=0, lineno=28)
DEBUG 2022-01-28 15:49:16,159 stack ['$const36.15', '$40load_method.17']
DEBUG 2022-01-28 15:49:16,159 dispatch pc=44, inst=BINARY_MULTIPLY(arg=None, lineno=28)
DEBUG 2022-01-28 15:49:16,159 stack ['$const36.15', '$42call_method.18']
DEBUG 2022-01-28 15:49:16,159 dispatch pc=46, inst=STORE_FAST(arg=9, lineno=28)
DEBUG 2022-01-28 15:49:16,159 stack ['$44binary_multiply.19']
DEBUG 2022-01-28 15:49:16,159 dispatch pc=48, inst=LOAD_FAST(arg=9, lineno=30)
DEBUG 2022-01-28 15:49:16,159 stack []
DEBUG 2022-01-28 15:49:16,159 dispatch pc=50, inst=LOAD_CONST(arg=2, lineno=30)
DEBUG 2022-01-28 15:49:16,159 stack ['$N_fixed48.20']
DEBUG 2022-01-28 15:49:16,159 dispatch pc=52, inst=LOAD_FAST(arg=3, lineno=30)
DEBUG 2022-01-28 15:49:16,159 stack ['$N_fixed48.20', '$const50.21']
DEBUG 2022-01-28 15:49:16,159 dispatch pc=54, inst=BINARY_MULTIPLY(arg=None, lineno=30)
DEBUG 2022-01-28 15:49:16,159 stack ['$N_fixed48.20', '$const50.21', '$batch_max52.22']
DEBUG 2022-01-28 15:49:16,161 dispatch pc=56, inst=BINARY_ADD(arg=None, lineno=30)
DEBUG 2022-01-28 15:49:16,161 stack ['$N_fixed48.20', '$54binary_multiply.23']
DEBUG 2022-01-28 15:49:16,161 dispatch pc=58, inst=LOAD_FAST(arg=4, lineno=30)
DEBUG 2022-01-28 15:49:16,161 stack ['$56binary_add.24']
DEBUG 2022-01-28 15:49:16,161 dispatch pc=60, inst=BINARY_ADD(arg=None, lineno=30)
DEBUG 2022-01-28 15:49:16,161 stack ['$56binary_add.24', '$odd_cutoff58.25']
DEBUG 2022-01-28 15:49:16,161 dispatch pc=62, inst=STORE_FAST(arg=10, lineno=30)
DEBUG 2022-01-28 15:49:16,161 stack ['$60binary_add.26']
DEBUG 2022-01-28 15:49:16,161 dispatch pc=64, inst=LOAD_GLOBAL(arg=2, lineno=32)
DEBUG 2022-01-28 15:49:16,161 stack []
DEBUG 2022-01-28 15:49:16,161 dispatch pc=66, inst=LOAD_METHOD(arg=3, lineno=32)
DEBUG 2022-01-28 15:49:16,161 stack ['$64load_global.27']
DEBUG 2022-01-28 15:49:16,161 dispatch pc=68, inst=LOAD_GLOBAL(arg=2, lineno=32)
DEBUG 2022-01-28 15:49:16,161 stack ['$66load_method.28']
DEBUG 2022-01-28 15:49:16,161 dispatch pc=70, inst=LOAD_METHOD(arg=4, lineno=32)
DEBUG 2022-01-28 15:49:16,161 stack ['$66load_method.28', '$68load_global.29']
DEBUG 2022-01-28 15:49:16,161 dispatch pc=72, inst=LOAD_FAST(arg=3, lineno=32)
DEBUG 2022-01-28 15:49:16,161 stack ['$66load_method.28', '$70load_method.30']
DEBUG 2022-01-28 15:49:16,161 dispatch pc=74, inst=BUILD_LIST(arg=1, lineno=32)
DEBUG 2022-01-28 15:49:16,161 stack ['$66load_method.28', '$70load_method.30', '$batch_max72.31']
DEBUG 2022-01-28 15:49:16,161 dispatch pc=76, inst=CALL_METHOD(arg=1, lineno=32)
DEBUG 2022-01-28 15:49:16,161 stack ['$66load_method.28', '$70load_method.30', '$74build_list.32']
DEBUG 2022-01-28 15:49:16,161 dispatch pc=78, inst=LOAD_FAST(arg=2, lineno=32)
DEBUG 2022-01-28 15:49:16,161 stack ['$66load_method.28', '$76call_method.33']
DEBUG 2022-01-28 15:49:16,161 dispatch pc=80, inst=BUILD_TUPLE(arg=2, lineno=32)
DEBUG 2022-01-28 15:49:16,161 stack ['$66load_method.28', '$76call_method.33', '$fixed_edge_reps78.34']
DEBUG 2022-01-28 15:49:16,161 dispatch pc=82, inst=CALL_METHOD(arg=1, lineno=32)
DEBUG 2022-01-28 15:49:16,161 stack ['$66load_method.28', '$80build_tuple.35']
DEBUG 2022-01-28 15:49:16,161 dispatch pc=84, inst=STORE_FAST(arg=11, lineno=32)
DEBUG 2022-01-28 15:49:16,161 stack ['$82call_method.36']
DEBUG 2022-01-28 15:49:16,161 dispatch pc=86, inst=LOAD_GLOBAL(arg=2, lineno=33)
DEBUG 2022-01-28 15:49:16,161 stack []
DEBUG 2022-01-28 15:49:16,161 dispatch pc=88, inst=LOAD_METHOD(arg=5, lineno=33)
DEBUG 2022-01-28 15:49:16,161 stack ['$86load_global.37']
DEBUG 2022-01-28 15:49:16,161 dispatch pc=90, inst=LOAD_FAST(arg=11, lineno=33)
DEBUG 2022-01-28 15:49:16,161 stack ['$88load_method.38']
DEBUG 2022-01-28 15:49:16,161 dispatch pc=92, inst=LOAD_CONST(arg=3, lineno=33)
DEBUG 2022-01-28 15:49:16,161 stack ['$88load_method.38', '$edge_reps90.39']
DEBUG 2022-01-28 15:49:16,161 dispatch pc=94, inst=BINARY_ADD(arg=None, lineno=33)
DEBUG 2022-01-28 15:49:16,161 stack ['$88load_method.38', '$edge_reps90.39', '$const92.40']
DEBUG 2022-01-28 15:49:16,161 dispatch pc=96, inst=CALL_METHOD(arg=1, lineno=33)
DEBUG 2022-01-28 15:49:16,161 stack ['$88load_method.38', '$94binary_add.41']
DEBUG 2022-01-28 15:49:16,161 dispatch pc=98, inst=STORE_FAST(arg=12, lineno=33)
DEBUG 2022-01-28 15:49:16,161 stack ['$96call_method.42']
DEBUG 2022-01-28 15:49:16,161 dispatch pc=100, inst=LOAD_FAST(arg=11, lineno=35)
DEBUG 2022-01-28 15:49:16,161 stack []
DEBUG 2022-01-28 15:49:16,161 dispatch pc=102, inst=LOAD_METHOD(arg=6, lineno=35)
DEBUG 2022-01-28 15:49:16,161 stack ['$edge_reps100.43']
DEBUG 2022-01-28 15:49:16,161 dispatch pc=104, inst=CALL_METHOD(arg=0, lineno=35)
DEBUG 2022-01-28 15:49:16,161 stack ['$102load_method.44']
DEBUG 2022-01-28 15:49:16,161 dispatch pc=106, inst=LOAD_FAST(arg=4, lineno=35)
DEBUG 2022-01-28 15:49:16,161 stack ['$104call_method.45']
DEBUG 2022-01-28 15:49:16,169 dispatch pc=108, inst=BINARY_ADD(arg=None, lineno=35)
DEBUG 2022-01-28 15:49:16,169 stack ['$104call_method.45', '$odd_cutoff106.46']
DEBUG 2022-01-28 15:49:16,169 dispatch pc=110, inst=STORE_FAST(arg=13, lineno=35)
DEBUG 2022-01-28 15:49:16,169 stack ['$108binary_add.47']
DEBUG 2022-01-28 15:49:16,169 dispatch pc=112, inst=LOAD_GLOBAL(arg=7, lineno=36)
DEBUG 2022-01-28 15:49:16,169 stack []
DEBUG 2022-01-28 15:49:16,169 dispatch pc=114, inst=LOAD_FAST(arg=13, lineno=36)
DEBUG 2022-01-28 15:49:16,169 stack ['$112load_global.48']
DEBUG 2022-01-28 15:49:16,169 dispatch pc=116, inst=CALL_FUNCTION(arg=1, lineno=36)
DEBUG 2022-01-28 15:49:16,169 stack ['$112load_global.48', '$max_binom114.49']
DEBUG 2022-01-28 15:49:16,169 dispatch pc=118, inst=STORE_FAST(arg=14, lineno=36)
DEBUG 2022-01-28 15:49:16,171 stack ['$116call_function.50']
DEBUG 2022-01-28 15:49:16,171 dispatch pc=120, inst=LOAD_GLOBAL(arg=2, lineno=38)
DEBUG 2022-01-28 15:49:16,171 stack []
DEBUG 2022-01-28 15:49:16,171 dispatch pc=122, inst=LOAD_ATTR(arg=8, lineno=38)
DEBUG 2022-01-28 15:49:16,171 stack ['$120load_global.51']
DEBUG 2022-01-28 15:49:16,171 dispatch pc=124, inst=LOAD_CONST(arg=2, lineno=38)
DEBUG 2022-01-28 15:49:16,171 stack ['$122load_attr.52']
DEBUG 2022-01-28 15:49:16,171 dispatch pc=126, inst=LOAD_FAST(arg=3, lineno=38)
DEBUG 2022-01-28 15:49:16,171 stack ['$122load_attr.52', '$const124.53']
DEBUG 2022-01-28 15:49:16,171 dispatch pc=128, inst=BINARY_MULTIPLY(arg=None, lineno=38)
DEBUG 2022-01-28 15:49:16,171 stack ['$122load_attr.52', '$const124.53', '$batch_max126.54']
DEBUG 2022-01-28 15:49:16,171 dispatch pc=130, inst=LOAD_FAST(arg=4, lineno=38)
DEBUG 2022-01-28 15:49:16,171 stack ['$122load_attr.52', '$128binary_multiply.55']
DEBUG 2022-01-28 15:49:16,171 dispatch pc=132, inst=BINARY_ADD(arg=None, lineno=38)
DEBUG 2022-01-28 15:49:16,171 stack ['$122load_attr.52', '$128binary_multiply.55', '$odd_cutoff130.56']
DEBUG 2022-01-28 15:49:16,171 dispatch pc=134, inst=LOAD_CONST(arg=3, lineno=38)
DEBUG 2022-01-28 15:49:16,171 stack ['$122load_attr.52', '$132binary_add.57']
DEBUG 2022-01-28 15:49:16,171 dispatch pc=136, inst=BINARY_ADD(arg=None, lineno=38)
DEBUG 2022-01-28 15:49:16,171 stack ['$122load_attr.52', '$132binary_add.57', '$const134.58']
DEBUG 2022-01-28 15:49:16,171 dispatch pc=138, inst=LOAD_GLOBAL(arg=2, lineno=38)
DEBUG 2022-01-28 15:49:16,171 stack ['$122load_attr.52', '$136binary_add.59']
DEBUG 2022-01-28 15:49:16,171 dispatch pc=140, inst=LOAD_ATTR(arg=9, lineno=38)
DEBUG 2022-01-28 15:49:16,171 stack ['$122load_attr.52', '$136binary_add.59', '$138load_global.60']
DEBUG 2022-01-28 15:49:16,171 dispatch pc=142, inst=LOAD_CONST(arg=4, lineno=38)
DEBUG 2022-01-28 15:49:16,171 stack ['$122load_attr.52', '$136binary_add.59', '$140load_attr.61']
DEBUG 2022-01-28 15:49:16,171 dispatch pc=144, inst=CALL_FUNCTION_KW(arg=2, lineno=38)
DEBUG 2022-01-28 15:49:16,171 stack ['$122load_attr.52', '$136binary_add.59', '$140load_attr.61', '$const142.62']
DEBUG 2022-01-28 15:49:16,171 dispatch pc=146, inst=STORE_FAST(arg=15, lineno=38)
DEBUG 2022-01-28 15:49:16,171 stack ['$144call_function_kw.63']
DEBUG 2022-01-28 15:49:16,171 dispatch pc=148, inst=LOAD_GLOBAL(arg=10, lineno=39)
DEBUG 2022-01-28 15:49:16,171 stack []
DEBUG 2022-01-28 15:49:16,171 dispatch pc=150, inst=LOAD_METHOD(arg=11, lineno=39)
DEBUG 2022-01-28 15:49:16,171 stack ['$148load_global.64']
DEBUG 2022-01-28 15:49:16,171 dispatch pc=152, inst=LOAD_FAST(arg=12, lineno=39)
DEBUG 2022-01-28 15:49:16,171 stack ['$150load_method.65']
DEBUG 2022-01-28 15:49:16,171 dispatch pc=154, inst=CALL_METHOD(arg=1, lineno=39)
DEBUG 2022-01-28 15:49:16,171 stack ['$150load_method.65', '$steps152.66']
DEBUG 2022-01-28 15:49:16,171 dispatch pc=156, inst=GET_ITER(arg=None, lineno=39)
DEBUG 2022-01-28 15:49:16,171 stack ['$154call_method.67']
DEBUG 2022-01-28 15:49:16,171 end state. edges=[Edge(pc=158, stack=('$156get_iter.68',), blockstack=(), npush=0)]
DEBUG 2022-01-28 15:49:16,171 pending: deque([State(pc_initial=158 nstack_initial=1)])
DEBUG 2022-01-28 15:49:16,171 stack: ['$phi158.0']
DEBUG 2022-01-28 15:49:16,171 dispatch pc=158, inst=FOR_ITER(arg=358, lineno=39)
DEBUG 2022-01-28 15:49:16,171 stack ['$phi158.0']
DEBUG 2022-01-28 15:49:16,171 end state. edges=[Edge(pc=520, stack=(), blockstack=(), npush=0), Edge(pc=162, stack=('$phi158.0', '$158for_iter.2'), blockstack=(), npush=0)]
DEBUG 2022-01-28 15:49:16,171 pending: deque([State(pc_initial=520 nstack_initial=0), State(pc_initial=162 nstack_initial=2)])
DEBUG 2022-01-28 15:49:16,171 stack: []
DEBUG 2022-01-28 15:49:16,171 dispatch pc=520, inst=LOAD_FAST(arg=5, lineno=77)
DEBUG 2022-01-28 15:49:16,171 stack []
DEBUG 2022-01-28 15:49:16,179 dispatch pc=522, inst=POP_JUMP_IF_FALSE(arg=580, lineno=77)
DEBUG 2022-01-28 15:49:16,179 stack ['$glynn520.0']
DEBUG 2022-01-28 15:49:16,179 end state. edges=[Edge(pc=526, stack=(), blockstack=(), npush=0), Edge(pc=580, stack=(), blockstack=(), npush=0)]
DEBUG 2022-01-28 15:49:16,179 pending: deque([State(pc_initial=162 nstack_initial=2), State(pc_initial=526 nstack_initial=0), State(pc_initial=580 nstack_initial=0)])
DEBUG 2022-01-28 15:49:16,179 stack: ['$phi162.0', '$phi162.1']
DEBUG 2022-01-28 15:49:16,179 dispatch pc=162, inst=STORE_FAST(arg=16, lineno=39)
DEBUG 2022-01-28 15:49:16,179 stack ['$phi162.0', '$phi162.1']
DEBUG 2022-01-28 15:49:16,179 dispatch pc=164, inst=LOAD_GLOBAL(arg=2, lineno=41)
DEBUG 2022-01-28 15:49:16,179 stack ['$phi162.0']
DEBUG 2022-01-28 15:49:16,179 dispatch pc=166, inst=LOAD_ATTR(arg=8, lineno=41)
DEBUG 2022-01-28 15:49:16,179 stack ['$phi162.0', '$164load_global.2']
DEBUG 2022-01-28 15:49:16,179 dispatch pc=168, inst=LOAD_CONST(arg=2, lineno=41)
DEBUG 2022-01-28 15:49:16,181 stack ['$phi162.0', '$166load_attr.3']
DEBUG 2022-01-28 15:49:16,181 dispatch pc=170, inst=LOAD_FAST(arg=3, lineno=41)
DEBUG 2022-01-28 15:49:16,181 stack ['$phi162.0', '$166load_attr.3', '$const168.4']
DEBUG 2022-01-28 15:49:16,181 dispatch pc=172, inst=BINARY_MULTIPLY(arg=None, lineno=41)
DEBUG 2022-01-28 15:49:16,181 stack ['$phi162.0', '$166load_attr.3', '$const168.4', '$batch_max170.5']
DEBUG 2022-01-28 15:49:16,181 dispatch pc=174, inst=LOAD_FAST(arg=4, lineno=41)
DEBUG 2022-01-28 15:49:16,181 stack ['$phi162.0', '$166load_attr.3', '$172binary_multiply.6']
DEBUG 2022-01-28 15:49:16,181 dispatch pc=176, inst=BINARY_ADD(arg=None, lineno=41)
DEBUG 2022-01-28 15:49:16,181 stack ['$phi162.0', '$166load_attr.3', '$172binary_multiply.6', '$odd_cutoff174.7']
DEBUG 2022-01-28 15:49:16,181 dispatch pc=178, inst=LOAD_CONST(arg=3, lineno=41)
DEBUG 2022-01-28 15:49:16,181 stack ['$phi162.0', '$166load_attr.3', '$176binary_add.8']
DEBUG 2022-01-28 15:49:16,181 dispatch pc=180, inst=BINARY_ADD(arg=None, lineno=41)
DEBUG 2022-01-28 15:49:16,181 stack ['$phi162.0', '$166load_attr.3', '$176binary_add.8', '$const178.9']
DEBUG 2022-01-28 15:49:16,181 dispatch pc=182, inst=LOAD_GLOBAL(arg=2, lineno=41)
DEBUG 2022-01-28 15:49:16,181 stack ['$phi162.0', '$166load_attr.3', '$180binary_add.10']
DEBUG 2022-01-28 15:49:16,181 dispatch pc=184, inst=LOAD_ATTR(arg=9, lineno=41)
DEBUG 2022-01-28 15:49:16,181 stack ['$phi162.0', '$166load_attr.3', '$180binary_add.10', '$182load_global.11']
DEBUG 2022-01-28 15:49:16,181 dispatch pc=186, inst=LOAD_CONST(arg=4, lineno=41)
DEBUG 2022-01-28 15:49:16,181 stack ['$phi162.0', '$166load_attr.3', '$180binary_add.10', '$184load_attr.12']
DEBUG 2022-01-28 15:49:16,181 dispatch pc=188, inst=CALL_FUNCTION_KW(arg=2, lineno=41)
DEBUG 2022-01-28 15:49:16,181 stack ['$phi162.0', '$166load_attr.3', '$180binary_add.10', '$184load_attr.12', '$const186.13']
DEBUG 2022-01-28 15:49:16,181 dispatch pc=190, inst=STORE_FAST(arg=17, lineno=41)
DEBUG 2022-01-28 15:49:16,181 stack ['$phi162.0', '$188call_function_kw.14']
DEBUG 2022-01-28 15:49:16,181 dispatch pc=192, inst=LOAD_GLOBAL(arg=12, lineno=43)
DEBUG 2022-01-28 15:49:16,181 stack ['$phi162.0']
DEBUG 2022-01-28 15:49:16,181 dispatch pc=194, inst=LOAD_FAST(arg=16, lineno=43)
DEBUG 2022-01-28 15:49:16,181 stack ['$phi162.0', '$192load_global.15']
DEBUG 2022-01-28 15:49:16,181 dispatch pc=196, inst=LOAD_FAST(arg=11, lineno=43)
DEBUG 2022-01-28 15:49:16,181 stack ['$phi162.0', '$192load_global.15', '$j194.16']
DEBUG 2022-01-28 15:49:16,181 dispatch pc=198, inst=CALL_FUNCTION(arg=2, lineno=43)
DEBUG 2022-01-28 15:49:16,181 stack ['$phi162.0', '$192load_global.15', '$j194.16', '$edge_reps196.17']
DEBUG 2022-01-28 15:49:16,181 dispatch pc=200, inst=STORE_FAST(arg=18, lineno=43)
DEBUG 2022-01-28 15:49:16,181 stack ['$phi162.0', '$198call_function.18']
DEBUG 2022-01-28 15:49:16,181 dispatch pc=202, inst=LOAD_FAST(arg=18, lineno=44)
DEBUG 2022-01-28 15:49:16,181 stack ['$phi162.0']
DEBUG 2022-01-28 15:49:16,181 dispatch pc=204, inst=LOAD_METHOD(arg=1, lineno=44)
DEBUG 2022-01-28 15:49:16,181 stack ['$phi162.0', '$kept_edges202.19']
DEBUG 2022-01-28 15:49:16,181 dispatch pc=206, inst=CALL_METHOD(arg=0, lineno=44)
DEBUG 2022-01-28 15:49:16,181 stack ['$phi162.0', '$204load_method.20']
DEBUG 2022-01-28 15:49:16,181 dispatch pc=208, inst=STORE_FAST(arg=19, lineno=44)
DEBUG 2022-01-28 15:49:16,181 stack ['$phi162.0', '$206call_method.21']
DEBUG 2022-01-28 15:49:16,181 dispatch pc=210, inst=LOAD_CONST(arg=5, lineno=46)
DEBUG 2022-01-28 15:49:16,181 stack ['$phi162.0']
DEBUG 2022-01-28 15:49:16,181 dispatch pc=212, inst=STORE_FAST(arg=20, lineno=46)
DEBUG 2022-01-28 15:49:16,181 stack ['$phi162.0', '$const210.22']
DEBUG 2022-01-28 15:49:16,181 dispatch pc=214, inst=LOAD_GLOBAL(arg=13, lineno=47)
DEBUG 2022-01-28 15:49:16,181 stack ['$phi162.0']
DEBUG 2022-01-28 15:49:16,181 dispatch pc=216, inst=LOAD_CONST(arg=3, lineno=47)
DEBUG 2022-01-28 15:49:16,181 stack ['$phi162.0', '$214load_global.23']
DEBUG 2022-01-28 15:49:16,181 dispatch pc=218, inst=LOAD_FAST(arg=8, lineno=47)
DEBUG 2022-01-28 15:49:16,181 stack ['$phi162.0', '$214load_global.23', '$const216.24']
DEBUG 2022-01-28 15:49:16,181 dispatch pc=220, inst=LOAD_CONST(arg=2, lineno=47)
DEBUG 2022-01-28 15:49:16,189 stack ['$phi162.0', '$214load_global.23', '$const216.24', '$n218.25']
DEBUG 2022-01-28 15:49:16,189 dispatch pc=222, inst=BINARY_FLOOR_DIVIDE(arg=None, lineno=47)
DEBUG 2022-01-28 15:49:16,189 stack ['$phi162.0', '$214load_global.23', '$const216.24', '$n218.25', '$const220.26']
DEBUG 2022-01-28 15:49:16,189 dispatch pc=224, inst=CALL_FUNCTION(arg=2, lineno=47)
DEBUG 2022-01-28 15:49:16,189 stack ['$phi162.0', '$214load_global.23', '$const216.24', '$222binary_floor_divide.27']
DEBUG 2022-01-28 15:49:16,189 dispatch pc=226, inst=GET_ITER(arg=None, lineno=47)
DEBUG 2022-01-28 15:49:16,189 stack ['$phi162.0', '$224call_function.28']
DEBUG 2022-01-28 15:49:16,189 end state. edges=[Edge(pc=228, stack=('$phi162.0', '$226get_iter.29'), blockstack=(), npush=0)]
DEBUG 2022-01-28 15:49:16,189 pending: deque([State(pc_initial=526 nstack_initial=0), State(pc_initial=580 nstack_initial=0), State(pc_initial=228 nstack_initial=2)])
DEBUG 2022-01-28 15:49:16,189 stack: []
DEBUG 2022-01-28 15:49:16,189 dispatch pc=526, inst=LOAD_GLOBAL(arg=13, lineno=78)
DEBUG 2022-01-28 15:49:16,189 stack []
DEBUG 2022-01-28 15:49:16,191 dispatch pc=528, inst=LOAD_FAST(arg=15, lineno=78)
DEBUG 2022-01-28 15:49:16,191 stack ['$526load_global.0']
DEBUG 2022-01-28 15:49:16,191 dispatch pc=530, inst=LOAD_ATTR(arg=0, lineno=78)
DEBUG 2022-01-28 15:49:16,191 stack ['$526load_global.0', '$H_batch528.1']
DEBUG 2022-01-28 15:49:16,191 dispatch pc=532, inst=LOAD_CONST(arg=1, lineno=78)
DEBUG 2022-01-28 15:49:16,191 stack ['$526load_global.0', '$530load_attr.2']
DEBUG 2022-01-28 15:49:16,191 dispatch pc=534, inst=BINARY_SUBSCR(arg=None, lineno=78)
DEBUG 2022-01-28 15:49:16,191 stack ['$526load_global.0', '$530load_attr.2', '$const532.3']
DEBUG 2022-01-28 15:49:16,191 dispatch pc=536, inst=CALL_FUNCTION(arg=1, lineno=78)
DEBUG 2022-01-28 15:49:16,191 stack ['$526load_global.0', '$534binary_subscr.4']
DEBUG 2022-01-28 15:49:16,191 dispatch pc=538, inst=GET_ITER(arg=None, lineno=78)
DEBUG 2022-01-28 15:49:16,191 stack ['$536call_function.5']
DEBUG 2022-01-28 15:49:16,191 end state. edges=[Edge(pc=540, stack=('$538get_iter.6',), blockstack=(), npush=0)]
DEBUG 2022-01-28 15:49:16,191 pending: deque([State(pc_initial=580 nstack_initial=0), State(pc_initial=228 nstack_initial=2), State(pc_initial=540 nstack_initial=1)])
DEBUG 2022-01-28 15:49:16,191 stack: []
DEBUG 2022-01-28 15:49:16,191 dispatch pc=580, inst=LOAD_FAST(arg=15, lineno=82)
DEBUG 2022-01-28 15:49:16,191 stack []
DEBUG 2022-01-28 15:49:16,191 dispatch pc=582, inst=RETURN_VALUE(arg=None, lineno=82)
DEBUG 2022-01-28 15:49:16,191 stack ['$H_batch580.0']
DEBUG 2022-01-28 15:49:16,191 end state. edges=[]
DEBUG 2022-01-28 15:49:16,191 pending: deque([State(pc_initial=228 nstack_initial=2), State(pc_initial=540 nstack_initial=1)])
DEBUG 2022-01-28 15:49:16,191 stack: ['$phi228.0', '$phi228.1']
DEBUG 2022-01-28 15:49:16,191 dispatch pc=228, inst=FOR_ITER(arg=28, lineno=47)
DEBUG 2022-01-28 15:49:16,191 stack ['$phi228.0', '$phi228.1']
DEBUG 2022-01-28 15:49:16,191 end state. edges=[Edge(pc=258, stack=('$phi228.0',), blockstack=(), npush=0), Edge(pc=230, stack=('$phi228.0', '$phi228.1', '$228for_iter.3'), blockstack=(), npush=0)]
DEBUG 2022-01-28 15:49:16,191 pending: deque([State(pc_initial=540 nstack_initial=1), State(pc_initial=258 nstack_initial=1), State(pc_initial=230 nstack_initial=3)])
DEBUG 2022-01-28 15:49:16,191 stack: ['$phi540.0']
DEBUG 2022-01-28 15:49:16,191 dispatch pc=540, inst=FOR_ITER(arg=38, lineno=78)
DEBUG 2022-01-28 15:49:16,191 stack ['$phi540.0']
DEBUG 2022-01-28 15:49:16,191 end state. edges=[Edge(pc=580, stack=(), blockstack=(), npush=0), Edge(pc=542, stack=('$phi540.0', '$540for_iter.2'), blockstack=(), npush=0)]
DEBUG 2022-01-28 15:49:16,191 pending: deque([State(pc_initial=258 nstack_initial=1), State(pc_initial=230 nstack_initial=3), State(pc_initial=580 nstack_initial=0), State(pc_initial=542 nstack_initial=2)])
DEBUG 2022-01-28 15:49:16,191 stack: ['$phi258.0']
DEBUG 2022-01-28 15:49:16,191 dispatch pc=258, inst=LOAD_FAST(arg=5, lineno=50)
DEBUG 2022-01-28 15:49:16,191 stack ['$phi258.0']
DEBUG 2022-01-28 15:49:16,191 dispatch pc=260, inst=POP_JUMP_IF_FALSE(arg=278, lineno=50)
DEBUG 2022-01-28 15:49:16,191 stack ['$phi258.0', '$glynn258.1']
DEBUG 2022-01-28 15:49:16,191 end state. edges=[Edge(pc=264, stack=('$phi258.0',), blockstack=(), npush=0), Edge(pc=278, stack=('$phi258.0',), blockstack=(), npush=0)]
DEBUG 2022-01-28 15:49:16,191 pending: deque([State(pc_initial=230 nstack_initial=3), State(pc_initial=580 nstack_initial=0), State(pc_initial=542 nstack_initial=2), State(pc_initial=264 nstack_initial=1), State(pc_initial=278 nstack_initial=1)])
DEBUG 2022-01-28 15:49:16,191 stack: ['$phi230.0', '$phi230.1', '$phi230.2']
DEBUG 2022-01-28 15:49:16,191 dispatch pc=230, inst=STORE_FAST(arg=21, lineno=47)
DEBUG 2022-01-28 15:49:16,191 stack ['$phi230.0', '$phi230.1', '$phi230.2']
DEBUG 2022-01-28 15:49:16,191 dispatch pc=232, inst=LOAD_FAST(arg=20, lineno=48)
DEBUG 2022-01-28 15:49:16,191 stack ['$phi230.0', '$phi230.1']
DEBUG 2022-01-28 15:49:16,191 dispatch pc=234, inst=LOAD_FAST(arg=14, lineno=48)
DEBUG 2022-01-28 15:49:16,191 stack ['$phi230.0', '$phi230.1', '$binom_prod232.3']
DEBUG 2022-01-28 15:49:16,191 dispatch pc=236, inst=LOAD_FAST(arg=11, lineno=48)
DEBUG 2022-01-28 15:49:16,191 stack ['$phi230.0', '$phi230.1', '$binom_prod232.3', '$binoms234.4']
DEBUG 2022-01-28 15:49:16,199 dispatch pc=238, inst=LOAD_FAST(arg=21, lineno=48)
DEBUG 2022-01-28 15:49:16,199 stack ['$phi230.0', '$phi230.1', '$binom_prod232.3', '$binoms234.4', '$edge_reps236.5']
DEBUG 2022-01-28 15:49:16,199 dispatch pc=240, inst=BINARY_SUBSCR(arg=None, lineno=48)
DEBUG 2022-01-28 15:49:16,199 stack ['$phi230.0', '$phi230.1', '$binom_prod232.3', '$binoms234.4', '$edge_reps236.5', '$i238.6']
DEBUG 2022-01-28 15:49:16,199 dispatch pc=242, inst=LOAD_FAST(arg=18, lineno=48)
DEBUG 2022-01-28 15:49:16,199 stack ['$phi230.0', '$phi230.1', '$binom_prod232.3', '$binoms234.4', '$240binary_subscr.7']
DEBUG 2022-01-28 15:49:16,199 dispatch pc=244, inst=LOAD_FAST(arg=21, lineno=48)
DEBUG 2022-01-28 15:49:16,199 stack ['$phi230.0', '$phi230.1', '$binom_prod232.3', '$binoms234.4', '$240binary_subscr.7', '$kept_edges242.8']
DEBUG 2022-01-28 15:49:16,199 dispatch pc=246, inst=BINARY_SUBSCR(arg=None, lineno=48)
DEBUG 2022-01-28 15:49:16,199 stack ['$phi230.0', '$phi230.1', '$binom_prod232.3', '$binoms234.4', '$240binary_subscr.7', '$kept_edges242.8', '$i244.9']
DEBUG 2022-01-28 15:49:16,199 dispatch pc=248, inst=BUILD_TUPLE(arg=2, lineno=48)
DEBUG 2022-01-28 15:49:16,199 stack ['$phi230.0', '$phi230.1', '$binom_prod232.3', '$binoms234.4', '$240binary_subscr.7', '$246binary_subscr.10']
DEBUG 2022-01-28 15:49:16,201 dispatch pc=250, inst=BINARY_SUBSCR(arg=None, lineno=48)
DEBUG 2022-01-28 15:49:16,201 stack ['$phi230.0', '$phi230.1', '$binom_prod232.3', '$binoms234.4', '$248build_tuple.11']
DEBUG 2022-01-28 15:49:16,201 dispatch pc=252, inst=INPLACE_MULTIPLY(arg=None, lineno=48)
DEBUG 2022-01-28 15:49:16,201 stack ['$phi230.0', '$phi230.1', '$binom_prod232.3', '$250binary_subscr.12']
DEBUG 2022-01-28 15:49:16,201 dispatch pc=254, inst=STORE_FAST(arg=20, lineno=48)
DEBUG 2022-01-28 15:49:16,201 stack ['$phi230.0', '$phi230.1', '$252inplace_multiply.13']
DEBUG 2022-01-28 15:49:16,201 dispatch pc=256, inst=JUMP_ABSOLUTE(arg=228, lineno=48)
DEBUG 2022-01-28 15:49:16,201 stack ['$phi230.0', '$phi230.1']
DEBUG 2022-01-28 15:49:16,201 end state. edges=[Edge(pc=228, stack=('$phi230.0', '$phi230.1'), blockstack=(), npush=0)]
DEBUG 2022-01-28 15:49:16,201 pending: deque([State(pc_initial=580 nstack_initial=0), State(pc_initial=542 nstack_initial=2), State(pc_initial=264 nstack_initial=1), State(pc_initial=278 nstack_initial=1), State(pc_initial=228 nstack_initial=2)])
DEBUG 2022-01-28 15:49:16,201 pending: deque([State(pc_initial=542 nstack_initial=2), State(pc_initial=264 nstack_initial=1), State(pc_initial=278 nstack_initial=1), State(pc_initial=228 nstack_initial=2)])
DEBUG 2022-01-28 15:49:16,201 stack: ['$phi542.0', '$phi542.1']
DEBUG 2022-01-28 15:49:16,201 dispatch pc=542, inst=STORE_FAST(arg=16, lineno=78)
DEBUG 2022-01-28 15:49:16,201 stack ['$phi542.0', '$phi542.1']
DEBUG 2022-01-28 15:49:16,201 dispatch pc=544, inst=LOAD_FAST(arg=9, lineno=79)
DEBUG 2022-01-28 15:49:16,201 stack ['$phi542.0']
DEBUG 2022-01-28 15:49:16,201 dispatch pc=546, inst=LOAD_FAST(arg=16, lineno=79)
DEBUG 2022-01-28 15:49:16,201 stack ['$phi542.0', '$N_fixed544.2']
DEBUG 2022-01-28 15:49:16,201 dispatch pc=548, inst=BINARY_ADD(arg=None, lineno=79)
DEBUG 2022-01-28 15:49:16,201 stack ['$phi542.0', '$N_fixed544.2', '$j546.3']
DEBUG 2022-01-28 15:49:16,201 dispatch pc=550, inst=STORE_FAST(arg=34, lineno=79)
DEBUG 2022-01-28 15:49:16,201 stack ['$phi542.0', '$548binary_add.4']
DEBUG 2022-01-28 15:49:16,201 dispatch pc=552, inst=LOAD_FAST(arg=15, lineno=80)
DEBUG 2022-01-28 15:49:16,201 stack ['$phi542.0']
DEBUG 2022-01-28 15:49:16,201 dispatch pc=554, inst=LOAD_FAST(arg=16, lineno=80)
DEBUG 2022-01-28 15:49:16,201 stack ['$phi542.0', '$H_batch552.5']
DEBUG 2022-01-28 15:49:16,201 dispatch pc=556, inst=DUP_TOP_TWO(arg=None, lineno=80)
DEBUG 2022-01-28 15:49:16,201 stack ['$phi542.0', '$H_batch552.5', '$j554.6']
DEBUG 2022-01-28 15:49:16,201 dispatch pc=558, inst=BINARY_SUBSCR(arg=None, lineno=80)
DEBUG 2022-01-28 15:49:16,201 stack ['$phi542.0', '$H_batch552.5', '$j554.6', '$556dup_top_two.7', '$556dup_top_two.8']
DEBUG 2022-01-28 15:49:16,201 dispatch pc=560, inst=LOAD_CONST(arg=7, lineno=80)
DEBUG 2022-01-28 15:49:16,201 stack ['$phi542.0', '$H_batch552.5', '$j554.6', '$558binary_subscr.9']
DEBUG 2022-01-28 15:49:16,201 dispatch pc=562, inst=LOAD_FAST(arg=34, lineno=80)
DEBUG 2022-01-28 15:49:16,201 stack ['$phi542.0', '$H_batch552.5', '$j554.6', '$558binary_subscr.9', '$const560.10']
DEBUG 2022-01-28 15:49:16,201 dispatch pc=564, inst=LOAD_CONST(arg=2, lineno=80)
DEBUG 2022-01-28 15:49:16,201 stack ['$phi542.0', '$H_batch552.5', '$j554.6', '$558binary_subscr.9', '$const560.10', '$x562.11']
DEBUG 2022-01-28 15:49:16,201 dispatch pc=566, inst=BINARY_FLOOR_DIVIDE(arg=None, lineno=80)
DEBUG 2022-01-28 15:49:16,201 stack ['$phi542.0', '$H_batch552.5', '$j554.6', '$558binary_subscr.9', '$const560.10', '$x562.11', '$const564.12']
DEBUG 2022-01-28 15:49:16,201 dispatch pc=568, inst=BINARY_POWER(arg=None, lineno=80)
DEBUG 2022-01-28 15:49:16,201 stack ['$phi542.0', '$H_batch552.5', '$j554.6', '$558binary_subscr.9', '$const560.10', '$566binary_floor_divide.13']
DEBUG 2022-01-28 15:49:16,201 dispatch pc=570, inst=INPLACE_MULTIPLY(arg=None, lineno=80)
DEBUG 2022-01-28 15:49:16,201 stack ['$phi542.0', '$H_batch552.5', '$j554.6', '$558binary_subscr.9', '$568binary_power.14']
DEBUG 2022-01-28 15:49:16,201 dispatch pc=572, inst=ROT_THREE(arg=None, lineno=80)
DEBUG 2022-01-28 15:49:16,201 stack ['$phi542.0', '$H_batch552.5', '$j554.6', '$570inplace_multiply.15']
DEBUG 2022-01-28 15:49:16,201 dispatch pc=574, inst=STORE_SUBSCR(arg=None, lineno=80)
DEBUG 2022-01-28 15:49:16,201 stack ['$phi542.0', '$570inplace_multiply.15', '$H_batch552.5', '$j554.6']
DEBUG 2022-01-28 15:49:16,201 dispatch pc=576, inst=JUMP_ABSOLUTE(arg=540, lineno=80)
DEBUG 2022-01-28 15:49:16,201 stack ['$phi542.0']
DEBUG 2022-01-28 15:49:16,201 end state. edges=[Edge(pc=540, stack=('$phi542.0',), blockstack=(), npush=0)]
DEBUG 2022-01-28 15:49:16,201 pending: deque([State(pc_initial=264 nstack_initial=1), State(pc_initial=278 nstack_initial=1), State(pc_initial=228 nstack_initial=2), State(pc_initial=540 nstack_initial=1)])
DEBUG 2022-01-28 15:49:16,201 stack: ['$phi264.0']
DEBUG 2022-01-28 15:49:16,209 dispatch pc=264, inst=LOAD_CONST(arg=2, lineno=51)
DEBUG 2022-01-28 15:49:16,209 stack ['$phi264.0']
DEBUG 2022-01-28 15:49:16,209 dispatch pc=266, inst=LOAD_FAST(arg=18, lineno=51)
DEBUG 2022-01-28 15:49:16,209 stack ['$phi264.0', '$const264.1']
DEBUG 2022-01-28 15:49:16,209 dispatch pc=268, inst=BINARY_MULTIPLY(arg=None, lineno=51)
DEBUG 2022-01-28 15:49:16,209 stack ['$phi264.0', '$const264.1', '$kept_edges266.2']
DEBUG 2022-01-28 15:49:16,209 dispatch pc=270, inst=LOAD_FAST(arg=11, lineno=51)
DEBUG 2022-01-28 15:49:16,209 stack ['$phi264.0', '$268binary_multiply.3']
DEBUG 2022-01-28 15:49:16,209 dispatch pc=272, inst=BINARY_SUBTRACT(arg=None, lineno=51)
DEBUG 2022-01-28 15:49:16,209 stack ['$phi264.0', '$268binary_multiply.3', '$edge_reps270.4']
DEBUG 2022-01-28 15:49:16,209 dispatch pc=274, inst=STORE_FAST(arg=22, lineno=51)
DEBUG 2022-01-28 15:49:16,209 stack ['$phi264.0', '$272binary_subtract.5']
DEBUG 2022-01-28 15:49:16,209 dispatch pc=276, inst=JUMP_FORWARD(arg=4, lineno=51)
DEBUG 2022-01-28 15:49:16,211 stack ['$phi264.0']
DEBUG 2022-01-28 15:49:16,211 end state. edges=[Edge(pc=282, stack=('$phi264.0',), blockstack=(), npush=0)]
DEBUG 2022-01-28 15:49:16,211 pending: deque([State(pc_initial=278 nstack_initial=1), State(pc_initial=228 nstack_initial=2), State(pc_initial=540 nstack_initial=1), State(pc_initial=282 nstack_initial=1)])
DEBUG 2022-01-28 15:49:16,211 stack: ['$phi278.0']
DEBUG 2022-01-28 15:49:16,211 dispatch pc=278, inst=LOAD_FAST(arg=18, lineno=53)
DEBUG 2022-01-28 15:49:16,211 stack ['$phi278.0']
DEBUG 2022-01-28 15:49:16,211 dispatch pc=280, inst=STORE_FAST(arg=22, lineno=53)
DEBUG 2022-01-28 15:49:16,211 stack ['$phi278.0', '$kept_edges278.1']
DEBUG 2022-01-28 15:49:16,211 end state. edges=[Edge(pc=282, stack=('$phi278.0',), blockstack=(), npush=0)]
DEBUG 2022-01-28 15:49:16,211 pending: deque([State(pc_initial=228 nstack_initial=2), State(pc_initial=540 nstack_initial=1), State(pc_initial=282 nstack_initial=1), State(pc_initial=282 nstack_initial=1)])
DEBUG 2022-01-28 15:49:16,211 pending: deque([State(pc_initial=540 nstack_initial=1), State(pc_initial=282 nstack_initial=1), State(pc_initial=282 nstack_initial=1)])
DEBUG 2022-01-28 15:49:16,211 pending: deque([State(pc_initial=282 nstack_initial=1), State(pc_initial=282 nstack_initial=1)])
DEBUG 2022-01-28 15:49:16,211 stack: ['$phi282.0']
DEBUG 2022-01-28 15:49:16,211 dispatch pc=282, inst=LOAD_GLOBAL(arg=14, lineno=55)
DEBUG 2022-01-28 15:49:16,211 stack ['$phi282.0']
DEBUG 2022-01-28 15:49:16,211 dispatch pc=284, inst=LOAD_FAST(arg=22, lineno=55)
DEBUG 2022-01-28 15:49:16,211 stack ['$phi282.0', '$282load_global.1']
DEBUG 2022-01-28 15:49:16,211 dispatch pc=286, inst=LOAD_FAST(arg=0, lineno=55)
DEBUG 2022-01-28 15:49:16,211 stack ['$phi282.0', '$282load_global.1', '$delta284.2']
DEBUG 2022-01-28 15:49:16,211 dispatch pc=288, inst=LOAD_FAST(arg=1, lineno=55)
DEBUG 2022-01-28 15:49:16,211 stack ['$phi282.0', '$282load_global.1', '$delta284.2', '$A286.3']
DEBUG 2022-01-28 15:49:16,211 dispatch pc=290, inst=LOAD_FAST(arg=7, lineno=55)
DEBUG 2022-01-28 15:49:16,211 stack ['$phi282.0', '$282load_global.1', '$delta284.2', '$A286.3', '$D288.4']
DEBUG 2022-01-28 15:49:16,211 dispatch pc=292, inst=CALL_FUNCTION(arg=4, lineno=55)
DEBUG 2022-01-28 15:49:16,211 stack ['$phi282.0', '$282load_global.1', '$delta284.2', '$A286.3', '$D288.4', '$oddV290.5']
DEBUG 2022-01-28 15:49:16,211 dispatch pc=294, inst=UNPACK_SEQUENCE(arg=4, lineno=55)
DEBUG 2022-01-28 15:49:16,211 stack ['$phi282.0', '$292call_function.6']
DEBUG 2022-01-28 15:49:16,211 dispatch pc=296, inst=STORE_FAST(arg=23, lineno=55)
DEBUG 2022-01-28 15:49:16,211 stack ['$phi282.0', '$294unpack_sequence.10', '$294unpack_sequence.9', '$294unpack_sequence.8', '$294unpack_sequence.7']
DEBUG 2022-01-28 15:49:16,211 dispatch pc=298, inst=STORE_FAST(arg=24, lineno=55)
DEBUG 2022-01-28 15:49:16,211 stack ['$phi282.0', '$294unpack_sequence.10', '$294unpack_sequence.9', '$294unpack_sequence.8']
DEBUG 2022-01-28 15:49:16,211 dispatch pc=300, inst=STORE_FAST(arg=25, lineno=55)
DEBUG 2022-01-28 15:49:16,211 stack ['$phi282.0', '$294unpack_sequence.10', '$294unpack_sequence.9']
DEBUG 2022-01-28 15:49:16,211 dispatch pc=302, inst=STORE_FAST(arg=26, lineno=55)
DEBUG 2022-01-28 15:49:16,211 stack ['$phi282.0', '$294unpack_sequence.10']
DEBUG 2022-01-28 15:49:16,211 dispatch pc=304, inst=LOAD_GLOBAL(arg=15, lineno=57)
DEBUG 2022-01-28 15:49:16,211 stack ['$phi282.0']
DEBUG 2022-01-28 15:49:16,211 dispatch pc=306, inst=LOAD_FAST(arg=23, lineno=57)
DEBUG 2022-01-28 15:49:16,211 stack ['$phi282.0', '$304load_global.12']
DEBUG 2022-01-28 15:49:16,211 dispatch pc=308, inst=CALL_FUNCTION(arg=1, lineno=57)
DEBUG 2022-01-28 15:49:16,211 stack ['$phi282.0', '$304load_global.12', '$AX_S306.13']
DEBUG 2022-01-28 15:49:16,211 dispatch pc=310, inst=STORE_FAST(arg=27, lineno=57)
DEBUG 2022-01-28 15:49:16,211 stack ['$phi282.0', '$308call_function.14']
DEBUG 2022-01-28 15:49:16,211 dispatch pc=312, inst=LOAD_GLOBAL(arg=16, lineno=61)
DEBUG 2022-01-28 15:49:16,211 stack ['$phi282.0']
DEBUG 2022-01-28 15:49:16,211 dispatch pc=314, inst=LOAD_FAST(arg=27, lineno=61)
DEBUG 2022-01-28 15:49:16,211 stack ['$phi282.0', '$312load_global.15']
DEBUG 2022-01-28 15:49:16,211 dispatch pc=316, inst=LOAD_FAST(arg=23, lineno=61)
DEBUG 2022-01-28 15:49:16,211 stack ['$phi282.0', '$312load_global.15', '$E314.16']
DEBUG 2022-01-28 15:49:16,211 dispatch pc=318, inst=LOAD_FAST(arg=24, lineno=61)
DEBUG 2022-01-28 15:49:16,211 stack ['$phi282.0', '$312load_global.15', '$E314.16', '$AX_S316.17']
DEBUG 2022-01-28 15:49:16,219 dispatch pc=320, inst=LOAD_FAST(arg=25, lineno=61)
DEBUG 2022-01-28 15:49:16,219 stack ['$phi282.0', '$312load_global.15', '$E314.16', '$AX_S316.17', '$XD_S318.18']
DEBUG 2022-01-28 15:49:16,219 dispatch pc=322, inst=LOAD_FAST(arg=10, lineno=61)
DEBUG 2022-01-28 15:49:16,219 stack ['$phi282.0', '$312load_global.15', '$E314.16', '$AX_S316.17', '$XD_S318.18', '$D_S320.19']
DEBUG 2022-01-28 15:49:16,219 dispatch pc=324, inst=CALL_FUNCTION(arg=5, lineno=61)
DEBUG 2022-01-28 15:49:16,219 stack ['$phi282.0', '$312load_global.15', '$E314.16', '$AX_S316.17', '$XD_S318.18', '$D_S320.19', '$N_max322.20']
DEBUG 2022-01-28 15:49:16,219 dispatch pc=326, inst=STORE_FAST(arg=28, lineno=61)
DEBUG 2022-01-28 15:49:16,219 stack ['$phi282.0', '$324call_function.21']
DEBUG 2022-01-28 15:49:16,219 dispatch pc=328, inst=LOAD_GLOBAL(arg=17, lineno=62)
DEBUG 2022-01-28 15:49:16,219 stack ['$phi282.0']
DEBUG 2022-01-28 15:49:16,219 dispatch pc=330, inst=LOAD_FAST(arg=27, lineno=62)
DEBUG 2022-01-28 15:49:16,219 stack ['$phi282.0', '$328load_global.22']
DEBUG 2022-01-28 15:49:16,219 dispatch pc=332, inst=LOAD_FAST(arg=23, lineno=62)
DEBUG 2022-01-28 15:49:16,219 stack ['$phi282.0', '$328load_global.22', '$E330.23']
DEBUG 2022-01-28 15:49:16,219 dispatch pc=334, inst=LOAD_FAST(arg=24, lineno=62)
DEBUG 2022-01-28 15:49:16,219 stack ['$phi282.0', '$328load_global.22', '$E330.23', '$AX_S332.24']
DEBUG 2022-01-28 15:49:16,219 dispatch pc=336, inst=LOAD_FAST(arg=25, lineno=62)
DEBUG 2022-01-28 15:49:16,219 stack ['$phi282.0', '$328load_global.22', '$E330.23', '$AX_S332.24', '$XD_S334.25']
DEBUG 2022-01-28 15:49:16,219 dispatch pc=338, inst=LOAD_FAST(arg=10, lineno=62)
DEBUG 2022-01-28 15:49:16,219 stack ['$phi282.0', '$328load_global.22', '$E330.23', '$AX_S332.24', '$XD_S334.25', '$D_S336.26']
DEBUG 2022-01-28 15:49:16,219 dispatch pc=340, inst=LOAD_FAST(arg=6, lineno=62)
DEBUG 2022-01-28 15:49:16,221 stack ['$phi282.0', '$328load_global.22', '$E330.23', '$AX_S332.24', '$XD_S334.25', '$D_S336.26', '$N_max338.27']
DEBUG 2022-01-28 15:49:16,221 dispatch pc=342, inst=LOAD_FAST(arg=26, lineno=62)
DEBUG 2022-01-28 15:49:16,221 stack ['$phi282.0', '$328load_global.22', '$E330.23', '$AX_S332.24', '$XD_S334.25', '$D_S336.26', '$N_max338.27', '$oddloop340.28']
DEBUG 2022-01-28 15:49:16,221 dispatch pc=344, inst=CALL_FUNCTION(arg=7, lineno=62)
DEBUG 2022-01-28 15:49:16,221 stack ['$phi282.0', '$328load_global.22', '$E330.23', '$AX_S332.24', '$XD_S334.25', '$D_S336.26', '$N_max338.27', '$oddloop340.28', '$oddVX_S342.29']
DEBUG 2022-01-28 15:49:16,221 dispatch pc=346, inst=STORE_FAST(arg=29, lineno=62)
DEBUG 2022-01-28 15:49:16,221 stack ['$phi282.0', '$344call_function.30']
DEBUG 2022-01-28 15:49:16,221 dispatch pc=348, inst=LOAD_GLOBAL(arg=13, lineno=64)
DEBUG 2022-01-28 15:49:16,221 stack ['$phi282.0']
DEBUG 2022-01-28 15:49:16,221 dispatch pc=350, inst=LOAD_CONST(arg=2, lineno=64)
DEBUG 2022-01-28 15:49:16,221 stack ['$phi282.0', '$348load_global.31']
DEBUG 2022-01-28 15:49:16,221 dispatch pc=352, inst=LOAD_FAST(arg=18, lineno=64)
DEBUG 2022-01-28 15:49:16,221 stack ['$phi282.0', '$348load_global.31', '$const350.32']
DEBUG 2022-01-28 15:49:16,221 dispatch pc=354, inst=LOAD_CONST(arg=1, lineno=64)
DEBUG 2022-01-28 15:49:16,221 stack ['$phi282.0', '$348load_global.31', '$const350.32', '$kept_edges352.33']
DEBUG 2022-01-28 15:49:16,221 dispatch pc=356, inst=BINARY_SUBSCR(arg=None, lineno=64)
DEBUG 2022-01-28 15:49:16,221 stack ['$phi282.0', '$348load_global.31', '$const350.32', '$kept_edges352.33', '$const354.34']
DEBUG 2022-01-28 15:49:16,221 dispatch pc=358, inst=BINARY_MULTIPLY(arg=None, lineno=64)
DEBUG 2022-01-28 15:49:16,221 stack ['$phi282.0', '$348load_global.31', '$const350.32', '$356binary_subscr.35']
DEBUG 2022-01-28 15:49:16,221 dispatch pc=360, inst=LOAD_CONST(arg=2, lineno=64)
DEBUG 2022-01-28 15:49:16,221 stack ['$phi282.0', '$348load_global.31', '$358binary_multiply.36']
DEBUG 2022-01-28 15:49:16,221 dispatch pc=362, inst=LOAD_FAST(arg=3, lineno=64)
DEBUG 2022-01-28 15:49:16,221 stack ['$phi282.0', '$348load_global.31', '$358binary_multiply.36', '$const360.37']
DEBUG 2022-01-28 15:49:16,221 dispatch pc=364, inst=BINARY_MULTIPLY(arg=None, lineno=64)
DEBUG 2022-01-28 15:49:16,221 stack ['$phi282.0', '$348load_global.31', '$358binary_multiply.36', '$const360.37', '$batch_max362.38']
DEBUG 2022-01-28 15:49:16,221 dispatch pc=366, inst=LOAD_FAST(arg=4, lineno=64)
DEBUG 2022-01-28 15:49:16,221 stack ['$phi282.0', '$348load_global.31', '$358binary_multiply.36', '$364binary_multiply.39']
DEBUG 2022-01-28 15:49:16,221 dispatch pc=368, inst=BINARY_ADD(arg=None, lineno=64)
DEBUG 2022-01-28 15:49:16,221 stack ['$phi282.0', '$348load_global.31', '$358binary_multiply.36', '$364binary_multiply.39', '$odd_cutoff366.40']
DEBUG 2022-01-28 15:49:16,221 dispatch pc=370, inst=LOAD_CONST(arg=3, lineno=64)
DEBUG 2022-01-28 15:49:16,221 stack ['$phi282.0', '$348load_global.31', '$358binary_multiply.36', '$368binary_add.41']
DEBUG 2022-01-28 15:49:16,221 dispatch pc=372, inst=BINARY_ADD(arg=None, lineno=64)
DEBUG 2022-01-28 15:49:16,221 stack ['$phi282.0', '$348load_global.31', '$358binary_multiply.36', '$368binary_add.41', '$const370.42']
DEBUG 2022-01-28 15:49:16,221 dispatch pc=374, inst=CALL_FUNCTION(arg=2, lineno=64)
DEBUG 2022-01-28 15:49:16,221 stack ['$phi282.0', '$348load_global.31', '$358binary_multiply.36', '$372binary_add.43']
DEBUG 2022-01-28 15:49:16,221 dispatch pc=376, inst=GET_ITER(arg=None, lineno=64)
DEBUG 2022-01-28 15:49:16,221 stack ['$phi282.0', '$374call_function.44']
DEBUG 2022-01-28 15:49:16,221 end state. edges=[Edge(pc=378, stack=('$phi282.0', '$376get_iter.45'), blockstack=(), npush=0)]
DEBUG 2022-01-28 15:49:16,221 pending: deque([State(pc_initial=282 nstack_initial=1), State(pc_initial=378 nstack_initial=2)])
DEBUG 2022-01-28 15:49:16,221 pending: deque([State(pc_initial=378 nstack_initial=2)])
DEBUG 2022-01-28 15:49:16,221 stack: ['$phi378.0', '$phi378.1']
DEBUG 2022-01-28 15:49:16,221 dispatch pc=378, inst=FOR_ITER(arg=130, lineno=64)
DEBUG 2022-01-28 15:49:16,221 stack ['$phi378.0', '$phi378.1']
DEBUG 2022-01-28 15:49:16,221 end state. edges=[Edge(pc=510, stack=('$phi378.0',), blockstack=(), npush=0), Edge(pc=380, stack=('$phi378.0', '$phi378.1', '$378for_iter.3'), blockstack=(), npush=0)]
DEBUG 2022-01-28 15:49:16,221 pending: deque([State(pc_initial=510 nstack_initial=1), State(pc_initial=380 nstack_initial=3)])
DEBUG 2022-01-28 15:49:16,221 stack: ['$phi510.0']
DEBUG 2022-01-28 15:49:16,221 dispatch pc=510, inst=LOAD_FAST(arg=15, lineno=75)
DEBUG 2022-01-28 15:49:16,221 stack ['$phi510.0']
DEBUG 2022-01-28 15:49:16,221 dispatch pc=512, inst=LOAD_FAST(arg=17, lineno=75)
DEBUG 2022-01-28 15:49:16,221 stack ['$phi510.0', '$H_batch510.1']
DEBUG 2022-01-28 15:49:16,221 dispatch pc=514, inst=INPLACE_ADD(arg=None, lineno=75)
DEBUG 2022-01-28 15:49:16,221 stack ['$phi510.0', '$H_batch510.1', '$Hnew512.2']
DEBUG 2022-01-28 15:49:16,221 dispatch pc=516, inst=STORE_FAST(arg=15, lineno=75)
DEBUG 2022-01-28 15:49:16,221 stack ['$phi510.0', '$514inplace_add.3']
DEBUG 2022-01-28 15:49:16,221 dispatch pc=518, inst=JUMP_ABSOLUTE(arg=158, lineno=75)
DEBUG 2022-01-28 15:49:16,221 stack ['$phi510.0']
DEBUG 2022-01-28 15:49:16,221 end state. edges=[Edge(pc=158, stack=('$phi510.0',), blockstack=(), npush=0)]
DEBUG 2022-01-28 15:49:16,221 pending: deque([State(pc_initial=380 nstack_initial=3), State(pc_initial=158 nstack_initial=1)])
DEBUG 2022-01-28 15:49:16,221 stack: ['$phi380.0', '$phi380.1', '$phi380.2']
DEBUG 2022-01-28 15:49:16,221 dispatch pc=380, inst=STORE_FAST(arg=30, lineno=64)
DEBUG 2022-01-28 15:49:16,221 stack ['$phi380.0', '$phi380.1', '$phi380.2']
DEBUG 2022-01-28 15:49:16,221 dispatch pc=382, inst=LOAD_FAST(arg=9, lineno=65)
DEBUG 2022-01-28 15:49:16,221 stack ['$phi380.0', '$phi380.1']
DEBUG 2022-01-28 15:49:16,221 dispatch pc=384, inst=LOAD_FAST(arg=30, lineno=65)
DEBUG 2022-01-28 15:49:16,221 stack ['$phi380.0', '$phi380.1', '$N_fixed382.3']
DEBUG 2022-01-28 15:49:16,221 dispatch pc=386, inst=BINARY_ADD(arg=None, lineno=65)
DEBUG 2022-01-28 15:49:16,221 stack ['$phi380.0', '$phi380.1', '$N_fixed382.3', '$N_det384.4']
DEBUG 2022-01-28 15:49:16,221 dispatch pc=388, inst=STORE_FAST(arg=31, lineno=65)
DEBUG 2022-01-28 15:49:16,221 stack ['$phi380.0', '$phi380.1', '$386binary_add.5']
DEBUG 2022-01-28 15:49:16,221 dispatch pc=390, inst=LOAD_CONST(arg=6, lineno=66)
DEBUG 2022-01-28 15:49:16,221 stack ['$phi380.0', '$phi380.1']
DEBUG 2022-01-28 15:49:16,221 dispatch pc=392, inst=LOAD_FAST(arg=31, lineno=66)
DEBUG 2022-01-28 15:49:16,221 stack ['$phi380.0', '$phi380.1', '$const390.6']
DEBUG 2022-01-28 15:49:16,221 dispatch pc=394, inst=LOAD_CONST(arg=2, lineno=66)
DEBUG 2022-01-28 15:49:16,221 stack ['$phi380.0', '$phi380.1', '$const390.6', '$N392.7']
DEBUG 2022-01-28 15:49:16,221 dispatch pc=396, inst=BINARY_FLOOR_DIVIDE(arg=None, lineno=66)
DEBUG 2022-01-28 15:49:16,221 stack ['$phi380.0', '$phi380.1', '$const390.6', '$N392.7', '$const394.8']
DEBUG 2022-01-28 15:49:16,221 dispatch pc=398, inst=LOAD_FAST(arg=19, lineno=66)
DEBUG 2022-01-28 15:49:16,221 stack ['$phi380.0', '$phi380.1', '$const390.6', '$396binary_floor_divide.9']
DEBUG 2022-01-28 15:49:16,221 dispatch pc=400, inst=BINARY_SUBTRACT(arg=None, lineno=66)
DEBUG 2022-01-28 15:49:16,221 stack ['$phi380.0', '$phi380.1', '$const390.6', '$396binary_floor_divide.9', '$edges_sum398.10']
DEBUG 2022-01-28 15:49:16,221 dispatch pc=402, inst=BINARY_POWER(arg=None, lineno=66)
DEBUG 2022-01-28 15:49:16,229 stack ['$phi380.0', '$phi380.1', '$const390.6', '$400binary_subtract.11']
DEBUG 2022-01-28 15:49:16,229 dispatch pc=404, inst=STORE_FAST(arg=32, lineno=66)
DEBUG 2022-01-28 15:49:16,229 stack ['$phi380.0', '$phi380.1', '$402binary_power.12']
DEBUG 2022-01-28 15:49:16,229 dispatch pc=406, inst=LOAD_FAST(arg=14, lineno=68)
DEBUG 2022-01-28 15:49:16,229 stack ['$phi380.0', '$phi380.1']
DEBUG 2022-01-28 15:49:16,229 dispatch pc=408, inst=LOAD_FAST(arg=30, lineno=68)
DEBUG 2022-01-28 15:49:16,229 stack ['$phi380.0', '$phi380.1', '$binoms406.13']
DEBUG 2022-01-28 15:49:16,229 dispatch pc=410, inst=LOAD_CONST(arg=2, lineno=68)
DEBUG 2022-01-28 15:49:16,229 stack ['$phi380.0', '$phi380.1', '$binoms406.13', '$N_det408.14']
DEBUG 2022-01-28 15:49:16,229 dispatch pc=412, inst=BINARY_FLOOR_DIVIDE(arg=None, lineno=68)
DEBUG 2022-01-28 15:49:16,229 stack ['$phi380.0', '$phi380.1', '$binoms406.13', '$N_det408.14', '$const410.15']
DEBUG 2022-01-28 15:49:16,229 dispatch pc=414, inst=LOAD_FAST(arg=18, lineno=68)
DEBUG 2022-01-28 15:49:16,229 stack ['$phi380.0', '$phi380.1', '$binoms406.13', '$412binary_floor_divide.16']
DEBUG 2022-01-28 15:49:16,229 dispatch pc=416, inst=LOAD_CONST(arg=1, lineno=68)
DEBUG 2022-01-28 15:49:16,229 stack ['$phi380.0', '$phi380.1', '$binoms406.13', '$412binary_floor_divide.16', '$kept_edges414.17']
DEBUG 2022-01-28 15:49:16,229 dispatch pc=418, inst=BINARY_SUBSCR(arg=None, lineno=68)
DEBUG 2022-01-28 15:49:16,229 stack ['$phi380.0', '$phi380.1', '$binoms406.13', '$412binary_floor_divide.16', '$kept_edges414.17', '$const416.18']
DEBUG 2022-01-28 15:49:16,229 dispatch pc=420, inst=BUILD_TUPLE(arg=2, lineno=68)
DEBUG 2022-01-28 15:49:16,229 stack ['$phi380.0', '$phi380.1', '$binoms406.13', '$412binary_floor_divide.16', '$418binary_subscr.19']
DEBUG 2022-01-28 15:49:16,229 dispatch pc=422, inst=BINARY_SUBSCR(arg=None, lineno=68)
DEBUG 2022-01-28 15:49:16,229 stack ['$phi380.0', '$phi380.1', '$binoms406.13', '$420build_tuple.20']
DEBUG 2022-01-28 15:49:16,231 dispatch pc=424, inst=LOAD_FAST(arg=20, lineno=68)
DEBUG 2022-01-28 15:49:16,231 stack ['$phi380.0', '$phi380.1', '$422binary_subscr.21']
DEBUG 2022-01-28 15:49:16,231 dispatch pc=426, inst=BINARY_MULTIPLY(arg=None, lineno=68)
DEBUG 2022-01-28 15:49:16,231 stack ['$phi380.0', '$phi380.1', '$422binary_subscr.21', '$binom_prod424.22']
DEBUG 2022-01-28 15:49:16,231 dispatch pc=428, inst=STORE_FAST(arg=33, lineno=68)
DEBUG 2022-01-28 15:49:16,231 stack ['$phi380.0', '$phi380.1', '$426binary_multiply.23']
DEBUG 2022-01-28 15:49:16,231 dispatch pc=430, inst=LOAD_FAST(arg=30, lineno=70)
DEBUG 2022-01-28 15:49:16,231 stack ['$phi380.0', '$phi380.1']
DEBUG 2022-01-28 15:49:16,231 dispatch pc=432, inst=LOAD_CONST(arg=2, lineno=70)
DEBUG 2022-01-28 15:49:16,231 stack ['$phi380.0', '$phi380.1', '$N_det430.24']
DEBUG 2022-01-28 15:49:16,231 dispatch pc=434, inst=BINARY_MODULO(arg=None, lineno=70)
DEBUG 2022-01-28 15:49:16,231 stack ['$phi380.0', '$phi380.1', '$N_det430.24', '$const432.25']
DEBUG 2022-01-28 15:49:16,231 dispatch pc=436, inst=LOAD_CONST(arg=1, lineno=70)
DEBUG 2022-01-28 15:49:16,231 stack ['$phi380.0', '$phi380.1', '$434binary_modulo.26']
DEBUG 2022-01-28 15:49:16,231 dispatch pc=438, inst=COMPARE_OP(arg=2, lineno=70)
DEBUG 2022-01-28 15:49:16,231 stack ['$phi380.0', '$phi380.1', '$434binary_modulo.26', '$const436.27']
DEBUG 2022-01-28 15:49:16,231 dispatch pc=440, inst=POP_JUMP_IF_FALSE(arg=478, lineno=70)
DEBUG 2022-01-28 15:49:16,231 stack ['$phi380.0', '$phi380.1', '$438compare_op.28']
DEBUG 2022-01-28 15:49:16,231 end state. edges=[Edge(pc=444, stack=('$phi380.0', '$phi380.1'), blockstack=(), npush=0), Edge(pc=478, stack=('$phi380.0', '$phi380.1'), blockstack=(), npush=0)]
DEBUG 2022-01-28 15:49:16,231 pending: deque([State(pc_initial=158 nstack_initial=1), State(pc_initial=444 nstack_initial=2), State(pc_initial=478 nstack_initial=2)])
DEBUG 2022-01-28 15:49:16,231 pending: deque([State(pc_initial=444 nstack_initial=2), State(pc_initial=478 nstack_initial=2)])
DEBUG 2022-01-28 15:49:16,231 stack: ['$phi444.0', '$phi444.1']
DEBUG 2022-01-28 15:49:16,231 dispatch pc=444, inst=LOAD_FAST(arg=17, lineno=71)
DEBUG 2022-01-28 15:49:16,231 stack ['$phi444.0', '$phi444.1']
DEBUG 2022-01-28 15:49:16,231 dispatch pc=446, inst=LOAD_FAST(arg=30, lineno=71)
DEBUG 2022-01-28 15:49:16,231 stack ['$phi444.0', '$phi444.1', '$Hnew444.2']
DEBUG 2022-01-28 15:49:16,231 dispatch pc=448, inst=DUP_TOP_TWO(arg=None, lineno=71)
DEBUG 2022-01-28 15:49:16,231 stack ['$phi444.0', '$phi444.1', '$Hnew444.2', '$N_det446.3']
DEBUG 2022-01-28 15:49:16,231 dispatch pc=450, inst=BINARY_SUBSCR(arg=None, lineno=71)
DEBUG 2022-01-28 15:49:16,231 stack ['$phi444.0', '$phi444.1', '$Hnew444.2', '$N_det446.3', '$448dup_top_two.4', '$448dup_top_two.5']
DEBUG 2022-01-28 15:49:16,231 dispatch pc=452, inst=LOAD_FAST(arg=33, lineno=71)
DEBUG 2022-01-28 15:49:16,231 stack ['$phi444.0', '$phi444.1', '$Hnew444.2', '$N_det446.3', '$450binary_subscr.6']
DEBUG 2022-01-28 15:49:16,231 dispatch pc=454, inst=LOAD_FAST(arg=32, lineno=71)
DEBUG 2022-01-28 15:49:16,231 stack ['$phi444.0', '$phi444.1', '$Hnew444.2', '$N_det446.3', '$450binary_subscr.6', '$n_det_binom_prod452.7']
DEBUG 2022-01-28 15:49:16,231 dispatch pc=456, inst=BINARY_MULTIPLY(arg=None, lineno=71)
DEBUG 2022-01-28 15:49:16,231 stack ['$phi444.0', '$phi444.1', '$Hnew444.2', '$N_det446.3', '$450binary_subscr.6', '$n_det_binom_prod452.7', '$plus_minus454.8']
DEBUG 2022-01-28 15:49:16,231 dispatch pc=458, inst=LOAD_FAST(arg=28, lineno=71)
DEBUG 2022-01-28 15:49:16,231 stack ['$phi444.0', '$phi444.1', '$Hnew444.2', '$N_det446.3', '$450binary_subscr.6', '$456binary_multiply.9']
DEBUG 2022-01-28 15:49:16,231 dispatch pc=460, inst=LOAD_FAST(arg=31, lineno=71)
DEBUG 2022-01-28 15:49:16,231 stack ['$phi444.0', '$phi444.1', '$Hnew444.2', '$N_det446.3', '$450binary_subscr.6', '$456binary_multiply.9', '$f_even458.10']
DEBUG 2022-01-28 15:49:16,231 dispatch pc=462, inst=LOAD_CONST(arg=2, lineno=71)
DEBUG 2022-01-28 15:49:16,231 stack ['$phi444.0', '$phi444.1', '$Hnew444.2', '$N_det446.3', '$450binary_subscr.6', '$456binary_multiply.9', '$f_even458.10', '$N460.11']
DEBUG 2022-01-28 15:49:16,231 dispatch pc=464, inst=BINARY_FLOOR_DIVIDE(arg=None, lineno=71)
DEBUG 2022-01-28 15:49:16,231 stack ['$phi444.0', '$phi444.1', '$Hnew444.2', '$N_det446.3', '$450binary_subscr.6', '$456binary_multiply.9', '$f_even458.10', '$N460.11', '$const462.12']
DEBUG 2022-01-28 15:49:16,231 dispatch pc=466, inst=BINARY_SUBSCR(arg=None, lineno=71)
DEBUG 2022-01-28 15:49:16,231 stack ['$phi444.0', '$phi444.1', '$Hnew444.2', '$N_det446.3', '$450binary_subscr.6', '$456binary_multiply.9', '$f_even458.10', '$464binary_floor_divide.13']
DEBUG 2022-01-28 15:49:16,231 dispatch pc=468, inst=BINARY_MULTIPLY(arg=None, lineno=71)
DEBUG 2022-01-28 15:49:16,231 stack ['$phi444.0', '$phi444.1', '$Hnew444.2', '$N_det446.3', '$450binary_subscr.6', '$456binary_multiply.9', '$466binary_subscr.14']
DEBUG 2022-01-28 15:49:16,231 dispatch pc=470, inst=INPLACE_ADD(arg=None, lineno=71)
DEBUG 2022-01-28 15:49:16,231 stack ['$phi444.0', '$phi444.1', '$Hnew444.2', '$N_det446.3', '$450binary_subscr.6', '$468binary_multiply.15']
DEBUG 2022-01-28 15:49:16,231 dispatch pc=472, inst=ROT_THREE(arg=None, lineno=71)
DEBUG 2022-01-28 15:49:16,231 stack ['$phi444.0', '$phi444.1', '$Hnew444.2', '$N_det446.3', '$470inplace_add.16']
DEBUG 2022-01-28 15:49:16,231 dispatch pc=474, inst=STORE_SUBSCR(arg=None, lineno=71)
DEBUG 2022-01-28 15:49:16,231 stack ['$phi444.0', '$phi444.1', '$470inplace_add.16', '$Hnew444.2', '$N_det446.3']
DEBUG 2022-01-28 15:49:16,231 dispatch pc=476, inst=JUMP_FORWARD(arg=28, lineno=71)
DEBUG 2022-01-28 15:49:16,231 stack ['$phi444.0', '$phi444.1']
DEBUG 2022-01-28 15:49:16,231 end state. edges=[Edge(pc=506, stack=('$phi444.0', '$phi444.1'), blockstack=(), npush=0)]
DEBUG 2022-01-28 15:49:16,231 pending: deque([State(pc_initial=478 nstack_initial=2), State(pc_initial=506 nstack_initial=2)])
DEBUG 2022-01-28 15:49:16,231 stack: ['$phi478.0', '$phi478.1']
DEBUG 2022-01-28 15:49:16,231 dispatch pc=478, inst=LOAD_FAST(arg=17, lineno=73)
DEBUG 2022-01-28 15:49:16,231 stack ['$phi478.0', '$phi478.1']
DEBUG 2022-01-28 15:49:16,231 dispatch pc=480, inst=LOAD_FAST(arg=30, lineno=73)
DEBUG 2022-01-28 15:49:16,231 stack ['$phi478.0', '$phi478.1', '$Hnew478.2']
DEBUG 2022-01-28 15:49:16,231 dispatch pc=482, inst=DUP_TOP_TWO(arg=None, lineno=73)
DEBUG 2022-01-28 15:49:16,231 stack ['$phi478.0', '$phi478.1', '$Hnew478.2', '$N_det480.3']
DEBUG 2022-01-28 15:49:16,231 dispatch pc=484, inst=BINARY_SUBSCR(arg=None, lineno=73)
DEBUG 2022-01-28 15:49:16,231 stack ['$phi478.0', '$phi478.1', '$Hnew478.2', '$N_det480.3', '$482dup_top_two.4', '$482dup_top_two.5']
DEBUG 2022-01-28 15:49:16,231 dispatch pc=486, inst=LOAD_FAST(arg=33, lineno=73)
DEBUG 2022-01-28 15:49:16,231 stack ['$phi478.0', '$phi478.1', '$Hnew478.2', '$N_det480.3', '$484binary_subscr.6']
DEBUG 2022-01-28 15:49:16,231 dispatch pc=488, inst=LOAD_FAST(arg=32, lineno=73)
DEBUG 2022-01-28 15:49:16,231 stack ['$phi478.0', '$phi478.1', '$Hnew478.2', '$N_det480.3', '$484binary_subscr.6', '$n_det_binom_prod486.7']
DEBUG 2022-01-28 15:49:16,231 dispatch pc=490, inst=BINARY_MULTIPLY(arg=None, lineno=73)
DEBUG 2022-01-28 15:49:16,231 stack ['$phi478.0', '$phi478.1', '$Hnew478.2', '$N_det480.3', '$484binary_subscr.6', '$n_det_binom_prod486.7', '$plus_minus488.8']
DEBUG 2022-01-28 15:49:16,231 dispatch pc=492, inst=LOAD_FAST(arg=29, lineno=73)
DEBUG 2022-01-28 15:49:16,231 stack ['$phi478.0', '$phi478.1', '$Hnew478.2', '$N_det480.3', '$484binary_subscr.6', '$490binary_multiply.9']
DEBUG 2022-01-28 15:49:16,231 dispatch pc=494, inst=LOAD_FAST(arg=31, lineno=73)
DEBUG 2022-01-28 15:49:16,231 stack ['$phi478.0', '$phi478.1', '$Hnew478.2', '$N_det480.3', '$484binary_subscr.6', '$490binary_multiply.9', '$f_odd492.10']
DEBUG 2022-01-28 15:49:16,231 dispatch pc=496, inst=BINARY_SUBSCR(arg=None, lineno=73)
DEBUG 2022-01-28 15:49:16,231 stack ['$phi478.0', '$phi478.1', '$Hnew478.2', '$N_det480.3', '$484binary_subscr.6', '$490binary_multiply.9', '$f_odd492.10', '$N494.11']
DEBUG 2022-01-28 15:49:16,231 dispatch pc=498, inst=BINARY_MULTIPLY(arg=None, lineno=73)
DEBUG 2022-01-28 15:49:16,231 stack ['$phi478.0', '$phi478.1', '$Hnew478.2', '$N_det480.3', '$484binary_subscr.6', '$490binary_multiply.9', '$496binary_subscr.12']
DEBUG 2022-01-28 15:49:16,231 dispatch pc=500, inst=INPLACE_ADD(arg=None, lineno=73)
DEBUG 2022-01-28 15:49:16,239 stack ['$phi478.0', '$phi478.1', '$Hnew478.2', '$N_det480.3', '$484binary_subscr.6', '$498binary_multiply.13']
DEBUG 2022-01-28 15:49:16,239 dispatch pc=502, inst=ROT_THREE(arg=None, lineno=73)
DEBUG 2022-01-28 15:49:16,239 stack ['$phi478.0', '$phi478.1', '$Hnew478.2', '$N_det480.3', '$500inplace_add.14']
DEBUG 2022-01-28 15:49:16,239 dispatch pc=504, inst=STORE_SUBSCR(arg=None, lineno=73)
DEBUG 2022-01-28 15:49:16,239 stack ['$phi478.0', '$phi478.1', '$500inplace_add.14', '$Hnew478.2', '$N_det480.3']
DEBUG 2022-01-28 15:49:16,239 end state. edges=[Edge(pc=506, stack=('$phi478.0', '$phi478.1'), blockstack=(), npush=0)]
DEBUG 2022-01-28 15:49:16,239 pending: deque([State(pc_initial=506 nstack_initial=2), State(pc_initial=506 nstack_initial=2)])
DEBUG 2022-01-28 15:49:16,239 stack: ['$phi506.0', '$phi506.1']
DEBUG 2022-01-28 15:49:16,239 dispatch pc=506, inst=JUMP_ABSOLUTE(arg=378, lineno=73)
DEBUG 2022-01-28 15:49:16,239 stack ['$phi506.0', '$phi506.1']
DEBUG 2022-01-28 15:49:16,239 end state. edges=[Edge(pc=378, stack=('$phi506.0', '$phi506.1'), blockstack=(), npush=0)]
DEBUG 2022-01-28 15:49:16,239 pending: deque([State(pc_initial=506 nstack_initial=2), State(pc_initial=378 nstack_initial=2)])
DEBUG 2022-01-28 15:49:16,239 pending: deque([State(pc_initial=378 nstack_initial=2)])
DEBUG 2022-01-28 15:49:16,239 -------------------------Prune PHIs-------------------------
DEBUG 2022-01-28 15:49:16,239 Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=158 nstack_initial=1): {'$phi158.0'},
             State(pc_initial=162 nstack_initial=2): {'$phi162.1'},
             State(pc_initial=228 nstack_initial=2): {'$phi228.1'},
             State(pc_initial=230 nstack_initial=3): {'$phi230.2'},
             State(pc_initial=258 nstack_initial=1): set(),
             State(pc_initial=264 nstack_initial=1): set(),
             State(pc_initial=278 nstack_initial=1): set(),
             State(pc_initial=282 nstack_initial=1): set(),
             State(pc_initial=378 nstack_initial=2): {'$phi378.1'},
             State(pc_initial=380 nstack_initial=3): {'$phi380.2'},
             State(pc_initial=444 nstack_initial=2): set(),
             State(pc_initial=478 nstack_initial=2): set(),
             State(pc_initial=506 nstack_initial=2): set(),
             State(pc_initial=510 nstack_initial=1): set(),
             State(pc_initial=520 nstack_initial=0): set(),
             State(pc_initial=526 nstack_initial=0): set(),
             State(pc_initial=540 nstack_initial=1): {'$phi540.0'},
             State(pc_initial=542 nstack_initial=2): {'$phi542.1'},
             State(pc_initial=580 nstack_initial=0): set()})
DEBUG 2022-01-28 15:49:16,241 defmap: {'$phi158.0': State(pc_initial=0 nstack_initial=0),
 '$phi162.1': State(pc_initial=158 nstack_initial=1),
 '$phi228.1': State(pc_initial=162 nstack_initial=2),
 '$phi230.2': State(pc_initial=228 nstack_initial=2),
 '$phi378.1': State(pc_initial=282 nstack_initial=1),
 '$phi380.2': State(pc_initial=378 nstack_initial=2),
 '$phi540.0': State(pc_initial=526 nstack_initial=0),
 '$phi542.1': State(pc_initial=540 nstack_initial=1)}
DEBUG 2022-01-28 15:49:16,241 phismap: defaultdict(<class 'set'>,
            {'$phi158.0': {('$156get_iter.68',
                            State(pc_initial=0 nstack_initial=0)),
                           ('$phi510.0',
                            State(pc_initial=510 nstack_initial=1))},
             '$phi162.0': {('$phi158.0',
                            State(pc_initial=158 nstack_initial=1))},
             '$phi162.1': {('$158for_iter.2',
                            State(pc_initial=158 nstack_initial=1))},
             '$phi228.0': {('$phi162.0',
                            State(pc_initial=162 nstack_initial=2)),
                           ('$phi230.0',
                            State(pc_initial=230 nstack_initial=3))},
             '$phi228.1': {('$226get_iter.29',
                            State(pc_initial=162 nstack_initial=2)),
                           ('$phi230.1',
                            State(pc_initial=230 nstack_initial=3))},
             '$phi230.0': {('$phi228.0',
                            State(pc_initial=228 nstack_initial=2))},
             '$phi230.1': {('$phi228.1',
                            State(pc_initial=228 nstack_initial=2))},
             '$phi230.2': {('$228for_iter.3',
                            State(pc_initial=228 nstack_initial=2))},
             '$phi258.0': {('$phi228.0',
                            State(pc_initial=228 nstack_initial=2))},
             '$phi264.0': {('$phi258.0',
                            State(pc_initial=258 nstack_initial=1))},
             '$phi278.0': {('$phi258.0',
                            State(pc_initial=258 nstack_initial=1))},
             '$phi282.0': {('$phi264.0',
                            State(pc_initial=264 nstack_initial=1)),
                           ('$phi278.0',
                            State(pc_initial=278 nstack_initial=1))},
             '$phi378.0': {('$phi282.0',
                            State(pc_initial=282 nstack_initial=1)),
                           ('$phi506.0',
                            State(pc_initial=506 nstack_initial=2))},
             '$phi378.1': {('$376get_iter.45',
                            State(pc_initial=282 nstack_initial=1)),
                           ('$phi506.1',
                            State(pc_initial=506 nstack_initial=2))},
             '$phi380.0': {('$phi378.0',
                            State(pc_initial=378 nstack_initial=2))},
             '$phi380.1': {('$phi378.1',
                            State(pc_initial=378 nstack_initial=2))},
             '$phi380.2': {('$378for_iter.3',
                            State(pc_initial=378 nstack_initial=2))},
             '$phi444.0': {('$phi380.0',
                            State(pc_initial=380 nstack_initial=3))},
             '$phi444.1': {('$phi380.1',
                            State(pc_initial=380 nstack_initial=3))},
             '$phi478.0': {('$phi380.0',
                            State(pc_initial=380 nstack_initial=3))},
             '$phi478.1': {('$phi380.1',
                            State(pc_initial=380 nstack_initial=3))},
             '$phi506.0': {('$phi444.0',
                            State(pc_initial=444 nstack_initial=2)),
                           ('$phi478.0',
                            State(pc_initial=478 nstack_initial=2))},
             '$phi506.1': {('$phi444.1',
                            State(pc_initial=444 nstack_initial=2)),
                           ('$phi478.1',
                            State(pc_initial=478 nstack_initial=2))},
             '$phi510.0': {('$phi378.0',
                            State(pc_initial=378 nstack_initial=2))},
             '$phi540.0': {('$538get_iter.6',
                            State(pc_initial=526 nstack_initial=0)),
                           ('$phi542.0',
                            State(pc_initial=542 nstack_initial=2))},
             '$phi542.0': {('$phi540.0',
                            State(pc_initial=540 nstack_initial=1))},
             '$phi542.1': {('$540for_iter.2',
                            State(pc_initial=540 nstack_initial=1))}})
DEBUG 2022-01-28 15:49:16,241 changing phismap: defaultdict(<class 'set'>,
            {'$phi158.0': {('$156get_iter.68',
                            State(pc_initial=0 nstack_initial=0)),
                           ('$phi378.0',
                            State(pc_initial=378 nstack_initial=2))},
             '$phi162.0': {('$156get_iter.68',
                            State(pc_initial=0 nstack_initial=0)),
                           ('$phi378.0',
                            State(pc_initial=378 nstack_initial=2))},
             '$phi162.1': {('$158for_iter.2',
                            State(pc_initial=158 nstack_initial=1))},
             '$phi228.0': {('$156get_iter.68',
                            State(pc_initial=0 nstack_initial=0)),
                           ('$phi228.0',
                            State(pc_initial=228 nstack_initial=2)),
                           ('$phi378.0',
                            State(pc_initial=378 nstack_initial=2))},
             '$phi228.1': {('$226get_iter.29',
                            State(pc_initial=162 nstack_initial=2)),
                           ('$phi228.1',
                            State(pc_initial=228 nstack_initial=2))},
             '$phi230.0': {('$156get_iter.68',
                            State(pc_initial=0 nstack_initial=0)),
                           ('$phi378.0',
                            State(pc_initial=378 nstack_initial=2))},
             '$phi230.1': {('$226get_iter.29',
                            State(pc_initial=162 nstack_initial=2))},
             '$phi230.2': {('$228for_iter.3',
                            State(pc_initial=228 nstack_initial=2))},
             '$phi258.0': {('$156get_iter.68',
                            State(pc_initial=0 nstack_initial=0)),
                           ('$phi378.0',
                            State(pc_initial=378 nstack_initial=2))},
             '$phi264.0': {('$156get_iter.68',
                            State(pc_initial=0 nstack_initial=0)),
                           ('$phi378.0',
                            State(pc_initial=378 nstack_initial=2))},
             '$phi278.0': {('$156get_iter.68',
                            State(pc_initial=0 nstack_initial=0)),
                           ('$phi378.0',
                            State(pc_initial=378 nstack_initial=2))},
             '$phi282.0': {('$156get_iter.68',
                            State(pc_initial=0 nstack_initial=0)),
                           ('$phi378.0',
                            State(pc_initial=378 nstack_initial=2))},
             '$phi378.0': {('$156get_iter.68',
                            State(pc_initial=0 nstack_initial=0)),
                           ('$phi378.0',
                            State(pc_initial=378 nstack_initial=2)),
                           ('$phi444.0',
                            State(pc_initial=444 nstack_initial=2)),
                           ('$phi478.0',
                            State(pc_initial=478 nstack_initial=2))},
             '$phi378.1': {('$376get_iter.45',
                            State(pc_initial=282 nstack_initial=1)),
                           ('$phi444.1',
                            State(pc_initial=444 nstack_initial=2)),
                           ('$phi478.1',
                            State(pc_initial=478 nstack_initial=2))},
             '$phi380.0': {('$156get_iter.68',
                            State(pc_initial=0 nstack_initial=0)),
                           ('$phi444.0',
                            State(pc_initial=444 nstack_initial=2)),
                           ('$phi478.0',
                            State(pc_initial=478 nstack_initial=2))},
             '$phi380.1': {('$376get_iter.45',
                            State(pc_initial=282 nstack_initial=1)),
                           ('$phi444.1',
                            State(pc_initial=444 nstack_initial=2)),
                           ('$phi478.1',
                            State(pc_initial=478 nstack_initial=2))},
             '$phi380.2': {('$378for_iter.3',
                            State(pc_initial=378 nstack_initial=2))},
             '$phi444.0': {('$156get_iter.68',
                            State(pc_initial=0 nstack_initial=0)),
                           ('$phi444.0',
                            State(pc_initial=444 nstack_initial=2)),
                           ('$phi478.0',
                            State(pc_initial=478 nstack_initial=2))},
             '$phi444.1': {('$376get_iter.45',
                            State(pc_initial=282 nstack_initial=1)),
                           ('$phi444.1',
                            State(pc_initial=444 nstack_initial=2)),
                           ('$phi478.1',
                            State(pc_initial=478 nstack_initial=2))},
             '$phi478.0': {('$156get_iter.68',
                            State(pc_initial=0 nstack_initial=0)),
                           ('$phi444.0',
                            State(pc_initial=444 nstack_initial=2)),
                           ('$phi478.0',
                            State(pc_initial=478 nstack_initial=2))},
             '$phi478.1': {('$376get_iter.45',
                            State(pc_initial=282 nstack_initial=1)),
                           ('$phi444.1',
                            State(pc_initial=444 nstack_initial=2)),
                           ('$phi478.1',
                            State(pc_initial=478 nstack_initial=2))},
             '$phi506.0': {('$156get_iter.68',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi506.1': {('$376get_iter.45',
                            State(pc_initial=282 nstack_initial=1))},
             '$phi510.0': {('$156get_iter.68',
                            State(pc_initial=0 nstack_initial=0)),
                           ('$phi444.0',
                            State(pc_initial=444 nstack_initial=2)),
                           ('$phi478.0',
                            State(pc_initial=478 nstack_initial=2))},
             '$phi540.0': {('$538get_iter.6',
                            State(pc_initial=526 nstack_initial=0)),
                           ('$phi540.0',
                            State(pc_initial=540 nstack_initial=1))},
             '$phi542.0': {('$538get_iter.6',
                            State(pc_initial=526 nstack_initial=0))},
             '$phi542.1': {('$540for_iter.2',
                            State(pc_initial=540 nstack_initial=1))}})
DEBUG 2022-01-28 15:49:16,241 changing phismap: defaultdict(<class 'set'>,
            {'$phi158.0': {('$156get_iter.68',
                            State(pc_initial=0 nstack_initial=0)),
                           ('$phi444.0',
                            State(pc_initial=444 nstack_initial=2)),
                           ('$phi478.0',
                            State(pc_initial=478 nstack_initial=2))},
             '$phi162.0': {('$156get_iter.68',
                            State(pc_initial=0 nstack_initial=0)),
                           ('$phi444.0',
                            State(pc_initial=444 nstack_initial=2)),
                           ('$phi478.0',
                            State(pc_initial=478 nstack_initial=2))},
             '$phi162.1': {('$158for_iter.2',
                            State(pc_initial=158 nstack_initial=1))},
             '$phi228.0': {('$156get_iter.68',
                            State(pc_initial=0 nstack_initial=0)),
                           ('$phi444.0',
                            State(pc_initial=444 nstack_initial=2)),
                           ('$phi478.0',
                            State(pc_initial=478 nstack_initial=2))},
             '$phi228.1': {('$226get_iter.29',
                            State(pc_initial=162 nstack_initial=2))},
             '$phi230.0': {('$156get_iter.68',
                            State(pc_initial=0 nstack_initial=0)),
                           ('$phi444.0',
                            State(pc_initial=444 nstack_initial=2)),
                           ('$phi478.0',
                            State(pc_initial=478 nstack_initial=2))},
             '$phi230.1': {('$226get_iter.29',
                            State(pc_initial=162 nstack_initial=2))},
             '$phi230.2': {('$228for_iter.3',
                            State(pc_initial=228 nstack_initial=2))},
             '$phi258.0': {('$156get_iter.68',
                            State(pc_initial=0 nstack_initial=0)),
                           ('$phi444.0',
                            State(pc_initial=444 nstack_initial=2)),
                           ('$phi478.0',
                            State(pc_initial=478 nstack_initial=2))},
             '$phi264.0': {('$156get_iter.68',
                            State(pc_initial=0 nstack_initial=0)),
                           ('$phi444.0',
                            State(pc_initial=444 nstack_initial=2)),
                           ('$phi478.0',
                            State(pc_initial=478 nstack_initial=2))},
             '$phi278.0': {('$156get_iter.68',
                            State(pc_initial=0 nstack_initial=0)),
                           ('$phi444.0',
                            State(pc_initial=444 nstack_initial=2)),
                           ('$phi478.0',
                            State(pc_initial=478 nstack_initial=2))},
             '$phi282.0': {('$156get_iter.68',
                            State(pc_initial=0 nstack_initial=0)),
                           ('$phi444.0',
                            State(pc_initial=444 nstack_initial=2)),
                           ('$phi478.0',
                            State(pc_initial=478 nstack_initial=2))},
             '$phi378.0': {('$156get_iter.68',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi378.1': {('$376get_iter.45',
                            State(pc_initial=282 nstack_initial=1))},
             '$phi380.0': {('$156get_iter.68',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi380.1': {('$376get_iter.45',
                            State(pc_initial=282 nstack_initial=1))},
             '$phi380.2': {('$378for_iter.3',
                            State(pc_initial=378 nstack_initial=2))},
             '$phi444.0': {('$156get_iter.68',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi444.1': {('$376get_iter.45',
                            State(pc_initial=282 nstack_initial=1))},
             '$phi478.0': {('$156get_iter.68',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi478.1': {('$376get_iter.45',
                            State(pc_initial=282 nstack_initial=1))},
             '$phi506.0': {('$156get_iter.68',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi506.1': {('$376get_iter.45',
                            State(pc_initial=282 nstack_initial=1))},
             '$phi510.0': {('$156get_iter.68',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi540.0': {('$538get_iter.6',
                            State(pc_initial=526 nstack_initial=0))},
             '$phi542.0': {('$538get_iter.6',
                            State(pc_initial=526 nstack_initial=0))},
             '$phi542.1': {('$540for_iter.2',
                            State(pc_initial=540 nstack_initial=1))}})
DEBUG 2022-01-28 15:49:16,241 changing phismap: defaultdict(<class 'set'>,
            {'$phi158.0': {('$156get_iter.68',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi162.0': {('$156get_iter.68',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi162.1': {('$158for_iter.2',
                            State(pc_initial=158 nstack_initial=1))},
             '$phi228.0': {('$156get_iter.68',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi228.1': {('$226get_iter.29',
                            State(pc_initial=162 nstack_initial=2))},
             '$phi230.0': {('$156get_iter.68',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi230.1': {('$226get_iter.29',
                            State(pc_initial=162 nstack_initial=2))},
             '$phi230.2': {('$228for_iter.3',
                            State(pc_initial=228 nstack_initial=2))},
             '$phi258.0': {('$156get_iter.68',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi264.0': {('$156get_iter.68',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi278.0': {('$156get_iter.68',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi282.0': {('$156get_iter.68',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi378.0': {('$156get_iter.68',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi378.1': {('$376get_iter.45',
                            State(pc_initial=282 nstack_initial=1))},
             '$phi380.0': {('$156get_iter.68',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi380.1': {('$376get_iter.45',
                            State(pc_initial=282 nstack_initial=1))},
             '$phi380.2': {('$378for_iter.3',
                            State(pc_initial=378 nstack_initial=2))},
             '$phi444.0': {('$156get_iter.68',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi444.1': {('$376get_iter.45',
                            State(pc_initial=282 nstack_initial=1))},
             '$phi478.0': {('$156get_iter.68',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi478.1': {('$376get_iter.45',
                            State(pc_initial=282 nstack_initial=1))},
             '$phi506.0': {('$156get_iter.68',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi506.1': {('$376get_iter.45',
                            State(pc_initial=282 nstack_initial=1))},
             '$phi510.0': {('$156get_iter.68',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi540.0': {('$538get_iter.6',
                            State(pc_initial=526 nstack_initial=0))},
             '$phi542.0': {('$538get_iter.6',
                            State(pc_initial=526 nstack_initial=0))},
             '$phi542.1': {('$540for_iter.2',
                            State(pc_initial=540 nstack_initial=1))}})
DEBUG 2022-01-28 15:49:16,241 changing phismap: defaultdict(<class 'set'>,
            {'$phi158.0': {('$156get_iter.68',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi162.0': {('$156get_iter.68',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi162.1': {('$158for_iter.2',
                            State(pc_initial=158 nstack_initial=1))},
             '$phi228.0': {('$156get_iter.68',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi228.1': {('$226get_iter.29',
                            State(pc_initial=162 nstack_initial=2))},
             '$phi230.0': {('$156get_iter.68',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi230.1': {('$226get_iter.29',
                            State(pc_initial=162 nstack_initial=2))},
             '$phi230.2': {('$228for_iter.3',
                            State(pc_initial=228 nstack_initial=2))},
             '$phi258.0': {('$156get_iter.68',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi264.0': {('$156get_iter.68',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi278.0': {('$156get_iter.68',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi282.0': {('$156get_iter.68',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi378.0': {('$156get_iter.68',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi378.1': {('$376get_iter.45',
                            State(pc_initial=282 nstack_initial=1))},
             '$phi380.0': {('$156get_iter.68',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi380.1': {('$376get_iter.45',
                            State(pc_initial=282 nstack_initial=1))},
             '$phi380.2': {('$378for_iter.3',
                            State(pc_initial=378 nstack_initial=2))},
             '$phi444.0': {('$156get_iter.68',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi444.1': {('$376get_iter.45',
                            State(pc_initial=282 nstack_initial=1))},
             '$phi478.0': {('$156get_iter.68',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi478.1': {('$376get_iter.45',
                            State(pc_initial=282 nstack_initial=1))},
             '$phi506.0': {('$156get_iter.68',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi506.1': {('$376get_iter.45',
                            State(pc_initial=282 nstack_initial=1))},
             '$phi510.0': {('$156get_iter.68',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi540.0': {('$538get_iter.6',
                            State(pc_initial=526 nstack_initial=0))},
             '$phi542.0': {('$538get_iter.6',
                            State(pc_initial=526 nstack_initial=0))},
             '$phi542.1': {('$540for_iter.2',
                            State(pc_initial=540 nstack_initial=1))}})
DEBUG 2022-01-28 15:49:16,249 keep phismap: {'$phi158.0': {('$156get_iter.68', State(pc_initial=0 nstack_initial=0))},
 '$phi162.1': {('$158for_iter.2', State(pc_initial=158 nstack_initial=1))},
 '$phi228.1': {('$226get_iter.29', State(pc_initial=162 nstack_initial=2))},
 '$phi230.2': {('$228for_iter.3', State(pc_initial=228 nstack_initial=2))},
 '$phi378.1': {('$376get_iter.45', State(pc_initial=282 nstack_initial=1))},
 '$phi380.2': {('$378for_iter.3', State(pc_initial=378 nstack_initial=2))},
 '$phi540.0': {('$538get_iter.6', State(pc_initial=526 nstack_initial=0))},
 '$phi542.1': {('$540for_iter.2', State(pc_initial=540 nstack_initial=1))}}
DEBUG 2022-01-28 15:49:16,249 new_out: defaultdict(<class 'dict'>,
            {State(pc_initial=0 nstack_initial=0): {'$phi158.0': '$156get_iter.68'},
             State(pc_initial=158 nstack_initial=1): {'$phi162.1': '$158for_iter.2'},
             State(pc_initial=162 nstack_initial=2): {'$phi228.1': '$226get_iter.29'},
             State(pc_initial=228 nstack_initial=2): {'$phi230.2': '$228for_iter.3'},
             State(pc_initial=282 nstack_initial=1): {'$phi378.1': '$376get_iter.45'},
             State(pc_initial=378 nstack_initial=2): {'$phi380.2': '$378for_iter.3'},
             State(pc_initial=526 nstack_initial=0): {'$phi540.0': '$538get_iter.6'},
             State(pc_initial=540 nstack_initial=1): {'$phi542.1': '$540for_iter.2'}})
DEBUG 2022-01-28 15:49:16,249 ----------------------DONE Prune PHIs-----------------------
DEBUG 2022-01-28 15:49:16,251 block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$D2.0'}), (4, {'res': '$const4.1'}), (6, {'index': '$const4.1', 'target': '$D2.0', 'res': '$6binary_subscr.2'}), (8, {'value': '$6binary_subscr.2'}), (10, {'res': '$A10.3'}), (12, {'res': '$const12.4'}), (14, {'res': '$const14.5'}), (16, {'res': '$const16.6'}), (18, {'start': '$const14.5', 'stop': '$const16.6', 'step': None, 'res': '$18build_slice.8', 'slicevar': '$18build_slice.7'}), (20, {'items': ['$const12.4', '$18build_slice.8'], 'res': '$20build_tuple.9'}), (22, {'index': '$20build_tuple.9', 'target': '$A10.3', 'res': '$22binary_subscr.10'}), (24, {'value': '$22binary_subscr.10'}), (26, {'res': '$A26.11'}), (28, {'item': '$A26.11', 'res': '$28load_attr.12'}), (30, {'res': '$const30.13'}), (32, {'index': '$const30.13', 'target': '$28load_attr.12', 'res': '$32binary_subscr.14'}), (34, {'value': '$32binary_subscr.14'}), (36, {'res': '$const36.15'}), (38, {'res': '$fixed_edge_reps38.16'}), (40, {'item': '$fixed_edge_reps38.16', 'res': '$40load_method.17'}), (42, {'func': '$40load_method.17', 'args': [], 'res': '$42call_method.18'}), (44, {'lhs': '$const36.15', 'rhs': '$42call_method.18', 'res': '$44binary_multiply.19'}), (46, {'value': '$44binary_multiply.19'}), (48, {'res': '$N_fixed48.20'}), (50, {'res': '$const50.21'}), (52, {'res': '$batch_max52.22'}), (54, {'lhs': '$const50.21', 'rhs': '$batch_max52.22', 'res': '$54binary_multiply.23'}), (56, {'lhs': '$N_fixed48.20', 'rhs': '$54binary_multiply.23', 'res': '$56binary_add.24'}), (58, {'res': '$odd_cutoff58.25'}), (60, {'lhs': '$56binary_add.24', 'rhs': '$odd_cutoff58.25', 'res': '$60binary_add.26'}), (62, {'value': '$60binary_add.26'}), (64, {'res': '$64load_global.27'}), (66, {'item': '$64load_global.27', 'res': '$66load_method.28'}), (68, {'res': '$68load_global.29'}), (70, {'item': '$68load_global.29', 'res': '$70load_method.30'}), (72, {'res': '$batch_max72.31'}), (74, {'items': ['$batch_max72.31'], 'res': '$74build_list.32'}), (76, {'func': '$70load_method.30', 'args': ['$74build_list.32'], 'res': '$76call_method.33'}), (78, {'res': '$fixed_edge_reps78.34'}), (80, {'items': ['$76call_method.33', '$fixed_edge_reps78.34'], 'res': '$80build_tuple.35'}), (82, {'func': '$66load_method.28', 'args': ['$80build_tuple.35'], 'res': '$82call_method.36'}), (84, {'value': '$82call_method.36'}), (86, {'res': '$86load_global.37'}), (88, {'item': '$86load_global.37', 'res': '$88load_method.38'}), (90, {'res': '$edge_reps90.39'}), (92, {'res': '$const92.40'}), (94, {'lhs': '$edge_reps90.39', 'rhs': '$const92.40', 'res': '$94binary_add.41'}), (96, {'func': '$88load_method.38', 'args': ['$94binary_add.41'], 'res': '$96call_method.42'}), (98, {'value': '$96call_method.42'}), (100, {'res': '$edge_reps100.43'}), (102, {'item': '$edge_reps100.43', 'res': '$102load_method.44'}), (104, {'func': '$102load_method.44', 'args': [], 'res': '$104call_method.45'}), (106, {'res': '$odd_cutoff106.46'}), (108, {'lhs': '$104call_method.45', 'rhs': '$odd_cutoff106.46', 'res': '$108binary_add.47'}), (110, {'value': '$108binary_add.47'}), (112, {'res': '$112load_global.48'}), (114, {'res': '$max_binom114.49'}), (116, {'func': '$112load_global.48', 'args': ['$max_binom114.49'], 'res': '$116call_function.50'}), (118, {'value': '$116call_function.50'}), (120, {'res': '$120load_global.51'}), (122, {'item': '$120load_global.51', 'res': '$122load_attr.52'}), (124, {'res': '$const124.53'}), (126, {'res': '$batch_max126.54'}), (128, {'lhs': '$const124.53', 'rhs': '$batch_max126.54', 'res': '$128binary_multiply.55'}), (130, {'res': '$odd_cutoff130.56'}), (132, {'lhs': '$128binary_multiply.55', 'rhs': '$odd_cutoff130.56', 'res': '$132binary_add.57'}), (134, {'res': '$const134.58'}), (136, {'lhs': '$132binary_add.57', 'rhs': '$const134.58', 'res': '$136binary_add.59'}), (138, {'res': '$138load_global.60'}), (140, {'item': '$138load_global.60', 'res': '$140load_attr.61'}), (142, {'res': '$const142.62'}), (144, {'func': '$122load_attr.52', 'args': ['$136binary_add.59', '$140load_attr.61'], 'names': '$const142.62', 'res': '$144call_function_kw.63'}), (146, {'value': '$144call_function_kw.63'}), (148, {'res': '$148load_global.64'}), (150, {'item': '$148load_global.64', 'res': '$150load_method.65'}), (152, {'res': '$steps152.66'}), (154, {'func': '$150load_method.65', 'args': ['$steps152.66'], 'res': '$154call_method.67'}), (156, {'value': '$154call_method.67', 'res': '$156get_iter.68'})), outgoing_phis={'$phi158.0': '$156get_iter.68'}, blockstack=(), active_try_block=None, outgoing_edgepushed={158: ('$156get_iter.68',)})
DEBUG 2022-01-28 15:49:16,251 block_infos State(pc_initial=158 nstack_initial=1):
AdaptBlockInfo(insts=((158, {'iterator': '$phi158.0', 'pair': '$158for_iter.1', 'indval': '$158for_iter.2', 'pred': '$158for_iter.3'}),), outgoing_phis={'$phi162.1': '$158for_iter.2'}, blockstack=(), active_try_block=None, outgoing_edgepushed={520: (), 162: ('$phi158.0', '$158for_iter.2')})
DEBUG 2022-01-28 15:49:16,251 block_infos State(pc_initial=162 nstack_initial=2):
AdaptBlockInfo(insts=((162, {'value': '$phi162.1'}), (164, {'res': '$164load_global.2'}), (166, {'item': '$164load_global.2', 'res': '$166load_attr.3'}), (168, {'res': '$const168.4'}), (170, {'res': '$batch_max170.5'}), (172, {'lhs': '$const168.4', 'rhs': '$batch_max170.5', 'res': '$172binary_multiply.6'}), (174, {'res': '$odd_cutoff174.7'}), (176, {'lhs': '$172binary_multiply.6', 'rhs': '$odd_cutoff174.7', 'res': '$176binary_add.8'}), (178, {'res': '$const178.9'}), (180, {'lhs': '$176binary_add.8', 'rhs': '$const178.9', 'res': '$180binary_add.10'}), (182, {'res': '$182load_global.11'}), (184, {'item': '$182load_global.11', 'res': '$184load_attr.12'}), (186, {'res': '$const186.13'}), (188, {'func': '$166load_attr.3', 'args': ['$180binary_add.10', '$184load_attr.12'], 'names': '$const186.13', 'res': '$188call_function_kw.14'}), (190, {'value': '$188call_function_kw.14'}), (192, {'res': '$192load_global.15'}), (194, {'res': '$j194.16'}), (196, {'res': '$edge_reps196.17'}), (198, {'func': '$192load_global.15', 'args': ['$j194.16', '$edge_reps196.17'], 'res': '$198call_function.18'}), (200, {'value': '$198call_function.18'}), (202, {'res': '$kept_edges202.19'}), (204, {'item': '$kept_edges202.19', 'res': '$204load_method.20'}), (206, {'func': '$204load_method.20', 'args': [], 'res': '$206call_method.21'}), (208, {'value': '$206call_method.21'}), (210, {'res': '$const210.22'}), (212, {'value': '$const210.22'}), (214, {'res': '$214load_global.23'}), (216, {'res': '$const216.24'}), (218, {'res': '$n218.25'}), (220, {'res': '$const220.26'}), (222, {'lhs': '$n218.25', 'rhs': '$const220.26', 'res': '$222binary_floor_divide.27'}), (224, {'func': '$214load_global.23', 'args': ['$const216.24', '$222binary_floor_divide.27'], 'res': '$224call_function.28'}), (226, {'value': '$224call_function.28', 'res': '$226get_iter.29'})), outgoing_phis={'$phi228.1': '$226get_iter.29'}, blockstack=(), active_try_block=None, outgoing_edgepushed={228: ('$phi162.0', '$226get_iter.29')})
DEBUG 2022-01-28 15:49:16,251 block_infos State(pc_initial=228 nstack_initial=2):
AdaptBlockInfo(insts=((228, {'iterator': '$phi228.1', 'pair': '$228for_iter.2', 'indval': '$228for_iter.3', 'pred': '$228for_iter.4'}),), outgoing_phis={'$phi230.2': '$228for_iter.3'}, blockstack=(), active_try_block=None, outgoing_edgepushed={258: ('$phi228.0',), 230: ('$phi228.0', '$phi228.1', '$228for_iter.3')})
DEBUG 2022-01-28 15:49:16,251 block_infos State(pc_initial=230 nstack_initial=3):
AdaptBlockInfo(insts=((230, {'value': '$phi230.2'}), (232, {'res': '$binom_prod232.3'}), (234, {'res': '$binoms234.4'}), (236, {'res': '$edge_reps236.5'}), (238, {'res': '$i238.6'}), (240, {'index': '$i238.6', 'target': '$edge_reps236.5', 'res': '$240binary_subscr.7'}), (242, {'res': '$kept_edges242.8'}), (244, {'res': '$i244.9'}), (246, {'index': '$i244.9', 'target': '$kept_edges242.8', 'res': '$246binary_subscr.10'}), (248, {'items': ['$240binary_subscr.7', '$246binary_subscr.10'], 'res': '$248build_tuple.11'}), (250, {'index': '$248build_tuple.11', 'target': '$binoms234.4', 'res': '$250binary_subscr.12'}), (252, {'lhs': '$binom_prod232.3', 'rhs': '$250binary_subscr.12', 'res': '$252inplace_multiply.13'}), (254, {'value': '$252inplace_multiply.13'}), (256, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={228: ('$phi230.0', '$phi230.1')})
DEBUG 2022-01-28 15:49:16,251 block_infos State(pc_initial=258 nstack_initial=1):
AdaptBlockInfo(insts=((258, {'res': '$glynn258.1'}), (260, {'pred': '$glynn258.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={264: ('$phi258.0',), 278: ('$phi258.0',)})
DEBUG 2022-01-28 15:49:16,251 block_infos State(pc_initial=264 nstack_initial=1):
AdaptBlockInfo(insts=((264, {'res': '$const264.1'}), (266, {'res': '$kept_edges266.2'}), (268, {'lhs': '$const264.1', 'rhs': '$kept_edges266.2', 'res': '$268binary_multiply.3'}), (270, {'res': '$edge_reps270.4'}), (272, {'lhs': '$268binary_multiply.3', 'rhs': '$edge_reps270.4', 'res': '$272binary_subtract.5'}), (274, {'value': '$272binary_subtract.5'}), (276, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={282: ('$phi264.0',)})
DEBUG 2022-01-28 15:49:16,251 block_infos State(pc_initial=278 nstack_initial=1):
AdaptBlockInfo(insts=((278, {'res': '$kept_edges278.1'}), (280, {'value': '$kept_edges278.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={282: ('$phi278.0',)})
DEBUG 2022-01-28 15:49:16,251 block_infos State(pc_initial=282 nstack_initial=1):
AdaptBlockInfo(insts=((282, {'res': '$282load_global.1'}), (284, {'res': '$delta284.2'}), (286, {'res': '$A286.3'}), (288, {'res': '$D288.4'}), (290, {'res': '$oddV290.5'}), (292, {'func': '$282load_global.1', 'args': ['$delta284.2', '$A286.3', '$D288.4', '$oddV290.5'], 'res': '$292call_function.6'}), (294, {'iterable': '$292call_function.6', 'stores': ['$294unpack_sequence.7', '$294unpack_sequence.8', '$294unpack_sequence.9', '$294unpack_sequence.10'], 'tupleobj': '$294unpack_sequence.11'}), (296, {'value': '$294unpack_sequence.7'}), (298, {'value': '$294unpack_sequence.8'}), (300, {'value': '$294unpack_sequence.9'}), (302, {'value': '$294unpack_sequence.10'}), (304, {'res': '$304load_global.12'}), (306, {'res': '$AX_S306.13'}), (308, {'func': '$304load_global.12', 'args': ['$AX_S306.13'], 'res': '$308call_function.14'}), (310, {'value': '$308call_function.14'}), (312, {'res': '$312load_global.15'}), (314, {'res': '$E314.16'}), (316, {'res': '$AX_S316.17'}), (318, {'res': '$XD_S318.18'}), (320, {'res': '$D_S320.19'}), (322, {'res': '$N_max322.20'}), (324, {'func': '$312load_global.15', 'args': ['$E314.16', '$AX_S316.17', '$XD_S318.18', '$D_S320.19', '$N_max322.20'], 'res': '$324call_function.21'}), (326, {'value': '$324call_function.21'}), (328, {'res': '$328load_global.22'}), (330, {'res': '$E330.23'}), (332, {'res': '$AX_S332.24'}), (334, {'res': '$XD_S334.25'}), (336, {'res': '$D_S336.26'}), (338, {'res': '$N_max338.27'}), (340, {'res': '$oddloop340.28'}), (342, {'res': '$oddVX_S342.29'}), (344, {'func': '$328load_global.22', 'args': ['$E330.23', '$AX_S332.24', '$XD_S334.25', '$D_S336.26', '$N_max338.27', '$oddloop340.28', '$oddVX_S342.29'], 'res': '$344call_function.30'}), (346, {'value': '$344call_function.30'}), (348, {'res': '$348load_global.31'}), (350, {'res': '$const350.32'}), (352, {'res': '$kept_edges352.33'}), (354, {'res': '$const354.34'}), (356, {'index': '$const354.34', 'target': '$kept_edges352.33', 'res': '$356binary_subscr.35'}), (358, {'lhs': '$const350.32', 'rhs': '$356binary_subscr.35', 'res': '$358binary_multiply.36'}), (360, {'res': '$const360.37'}), (362, {'res': '$batch_max362.38'}), (364, {'lhs': '$const360.37', 'rhs': '$batch_max362.38', 'res': '$364binary_multiply.39'}), (366, {'res': '$odd_cutoff366.40'}), (368, {'lhs': '$364binary_multiply.39', 'rhs': '$odd_cutoff366.40', 'res': '$368binary_add.41'}), (370, {'res': '$const370.42'}), (372, {'lhs': '$368binary_add.41', 'rhs': '$const370.42', 'res': '$372binary_add.43'}), (374, {'func': '$348load_global.31', 'args': ['$358binary_multiply.36', '$372binary_add.43'], 'res': '$374call_function.44'}), (376, {'value': '$374call_function.44', 'res': '$376get_iter.45'})), outgoing_phis={'$phi378.1': '$376get_iter.45'}, blockstack=(), active_try_block=None, outgoing_edgepushed={378: ('$phi282.0', '$376get_iter.45')})
DEBUG 2022-01-28 15:49:16,251 block_infos State(pc_initial=378 nstack_initial=2):
AdaptBlockInfo(insts=((378, {'iterator': '$phi378.1', 'pair': '$378for_iter.2', 'indval': '$378for_iter.3', 'pred': '$378for_iter.4'}),), outgoing_phis={'$phi380.2': '$378for_iter.3'}, blockstack=(), active_try_block=None, outgoing_edgepushed={510: ('$phi378.0',), 380: ('$phi378.0', '$phi378.1', '$378for_iter.3')})
DEBUG 2022-01-28 15:49:16,251 block_infos State(pc_initial=380 nstack_initial=3):
AdaptBlockInfo(insts=((380, {'value': '$phi380.2'}), (382, {'res': '$N_fixed382.3'}), (384, {'res': '$N_det384.4'}), (386, {'lhs': '$N_fixed382.3', 'rhs': '$N_det384.4', 'res': '$386binary_add.5'}), (388, {'value': '$386binary_add.5'}), (390, {'res': '$const390.6'}), (392, {'res': '$N392.7'}), (394, {'res': '$const394.8'}), (396, {'lhs': '$N392.7', 'rhs': '$const394.8', 'res': '$396binary_floor_divide.9'}), (398, {'res': '$edges_sum398.10'}), (400, {'lhs': '$396binary_floor_divide.9', 'rhs': '$edges_sum398.10', 'res': '$400binary_subtract.11'}), (402, {'lhs': '$const390.6', 'rhs': '$400binary_subtract.11', 'res': '$402binary_power.12'}), (404, {'value': '$402binary_power.12'}), (406, {'res': '$binoms406.13'}), (408, {'res': '$N_det408.14'}), (410, {'res': '$const410.15'}), (412, {'lhs': '$N_det408.14', 'rhs': '$const410.15', 'res': '$412binary_floor_divide.16'}), (414, {'res': '$kept_edges414.17'}), (416, {'res': '$const416.18'}), (418, {'index': '$const416.18', 'target': '$kept_edges414.17', 'res': '$418binary_subscr.19'}), (420, {'items': ['$412binary_floor_divide.16', '$418binary_subscr.19'], 'res': '$420build_tuple.20'}), (422, {'index': '$420build_tuple.20', 'target': '$binoms406.13', 'res': '$422binary_subscr.21'}), (424, {'res': '$binom_prod424.22'}), (426, {'lhs': '$422binary_subscr.21', 'rhs': '$binom_prod424.22', 'res': '$426binary_multiply.23'}), (428, {'value': '$426binary_multiply.23'}), (430, {'res': '$N_det430.24'}), (432, {'res': '$const432.25'}), (434, {'lhs': '$N_det430.24', 'rhs': '$const432.25', 'res': '$434binary_modulo.26'}), (436, {'res': '$const436.27'}), (438, {'lhs': '$434binary_modulo.26', 'rhs': '$const436.27', 'res': '$438compare_op.28'}), (440, {'pred': '$438compare_op.28'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={444: ('$phi380.0', '$phi380.1'), 478: ('$phi380.0', '$phi380.1')})
DEBUG 2022-01-28 15:49:16,251 block_infos State(pc_initial=444 nstack_initial=2):
AdaptBlockInfo(insts=((444, {'res': '$Hnew444.2'}), (446, {'res': '$N_det446.3'}), (448, {'orig': ['$Hnew444.2', '$N_det446.3'], 'duped': ['$448dup_top_two.4', '$448dup_top_two.5']}), (450, {'index': '$448dup_top_two.5', 'target': '$448dup_top_two.4', 'res': '$450binary_subscr.6'}), (452, {'res': '$n_det_binom_prod452.7'}), (454, {'res': '$plus_minus454.8'}), (456, {'lhs': '$n_det_binom_prod452.7', 'rhs': '$plus_minus454.8', 'res': '$456binary_multiply.9'}), (458, {'res': '$f_even458.10'}), (460, {'res': '$N460.11'}), (462, {'res': '$const462.12'}), (464, {'lhs': '$N460.11', 'rhs': '$const462.12', 'res': '$464binary_floor_divide.13'}), (466, {'index': '$464binary_floor_divide.13', 'target': '$f_even458.10', 'res': '$466binary_subscr.14'}), (468, {'lhs': '$456binary_multiply.9', 'rhs': '$466binary_subscr.14', 'res': '$468binary_multiply.15'}), (470, {'lhs': '$450binary_subscr.6', 'rhs': '$468binary_multiply.15', 'res': '$470inplace_add.16'}), (474, {'target': '$Hnew444.2', 'index': '$N_det446.3', 'value': '$470inplace_add.16'}), (476, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={506: ('$phi444.0', '$phi444.1')})
DEBUG 2022-01-28 15:49:16,251 block_infos State(pc_initial=478 nstack_initial=2):
AdaptBlockInfo(insts=((478, {'res': '$Hnew478.2'}), (480, {'res': '$N_det480.3'}), (482, {'orig': ['$Hnew478.2', '$N_det480.3'], 'duped': ['$482dup_top_two.4', '$482dup_top_two.5']}), (484, {'index': '$482dup_top_two.5', 'target': '$482dup_top_two.4', 'res': '$484binary_subscr.6'}), (486, {'res': '$n_det_binom_prod486.7'}), (488, {'res': '$plus_minus488.8'}), (490, {'lhs': '$n_det_binom_prod486.7', 'rhs': '$plus_minus488.8', 'res': '$490binary_multiply.9'}), (492, {'res': '$f_odd492.10'}), (494, {'res': '$N494.11'}), (496, {'index': '$N494.11', 'target': '$f_odd492.10', 'res': '$496binary_subscr.12'}), (498, {'lhs': '$490binary_multiply.9', 'rhs': '$496binary_subscr.12', 'res': '$498binary_multiply.13'}), (500, {'lhs': '$484binary_subscr.6', 'rhs': '$498binary_multiply.13', 'res': '$500inplace_add.14'}), (504, {'target': '$Hnew478.2', 'index': '$N_det480.3', 'value': '$500inplace_add.14'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={506: ('$phi478.0', '$phi478.1')})
DEBUG 2022-01-28 15:49:16,251 block_infos State(pc_initial=506 nstack_initial=2):
AdaptBlockInfo(insts=((506, {}),), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={378: ('$phi506.0', '$phi506.1')})
DEBUG 2022-01-28 15:49:16,251 block_infos State(pc_initial=510 nstack_initial=1):
AdaptBlockInfo(insts=((510, {'res': '$H_batch510.1'}), (512, {'res': '$Hnew512.2'}), (514, {'lhs': '$H_batch510.1', 'rhs': '$Hnew512.2', 'res': '$514inplace_add.3'}), (516, {'value': '$514inplace_add.3'}), (518, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={158: ('$phi510.0',)})
DEBUG 2022-01-28 15:49:16,251 block_infos State(pc_initial=520 nstack_initial=0):
AdaptBlockInfo(insts=((520, {'res': '$glynn520.0'}), (522, {'pred': '$glynn520.0'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={526: (), 580: ()})
DEBUG 2022-01-28 15:49:16,251 block_infos State(pc_initial=526 nstack_initial=0):
AdaptBlockInfo(insts=((526, {'res': '$526load_global.0'}), (528, {'res': '$H_batch528.1'}), (530, {'item': '$H_batch528.1', 'res': '$530load_attr.2'}), (532, {'res': '$const532.3'}), (534, {'index': '$const532.3', 'target': '$530load_attr.2', 'res': '$534binary_subscr.4'}), (536, {'func': '$526load_global.0', 'args': ['$534binary_subscr.4'], 'res': '$536call_function.5'}), (538, {'value': '$536call_function.5', 'res': '$538get_iter.6'})), outgoing_phis={'$phi540.0': '$538get_iter.6'}, blockstack=(), active_try_block=None, outgoing_edgepushed={540: ('$538get_iter.6',)})
DEBUG 2022-01-28 15:49:16,251 block_infos State(pc_initial=540 nstack_initial=1):
AdaptBlockInfo(insts=((540, {'iterator': '$phi540.0', 'pair': '$540for_iter.1', 'indval': '$540for_iter.2', 'pred': '$540for_iter.3'}),), outgoing_phis={'$phi542.1': '$540for_iter.2'}, blockstack=(), active_try_block=None, outgoing_edgepushed={580: (), 542: ('$phi540.0', '$540for_iter.2')})
DEBUG 2022-01-28 15:49:16,251 block_infos State(pc_initial=542 nstack_initial=2):
AdaptBlockInfo(insts=((542, {'value': '$phi542.1'}), (544, {'res': '$N_fixed544.2'}), (546, {'res': '$j546.3'}), (548, {'lhs': '$N_fixed544.2', 'rhs': '$j546.3', 'res': '$548binary_add.4'}), (550, {'value': '$548binary_add.4'}), (552, {'res': '$H_batch552.5'}), (554, {'res': '$j554.6'}), (556, {'orig': ['$H_batch552.5', '$j554.6'], 'duped': ['$556dup_top_two.7', '$556dup_top_two.8']}), (558, {'index': '$556dup_top_two.8', 'target': '$556dup_top_two.7', 'res': '$558binary_subscr.9'}), (560, {'res': '$const560.10'}), (562, {'res': '$x562.11'}), (564, {'res': '$const564.12'}), (566, {'lhs': '$x562.11', 'rhs': '$const564.12', 'res': '$566binary_floor_divide.13'}), (568, {'lhs': '$const560.10', 'rhs': '$566binary_floor_divide.13', 'res': '$568binary_power.14'}), (570, {'lhs': '$558binary_subscr.9', 'rhs': '$568binary_power.14', 'res': '$570inplace_multiply.15'}), (574, {'target': '$H_batch552.5', 'index': '$j554.6', 'value': '$570inplace_multiply.15'}), (576, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={540: ('$phi542.0',)})
DEBUG 2022-01-28 15:49:16,251 block_infos State(pc_initial=580 nstack_initial=0):
AdaptBlockInfo(insts=((580, {'res': '$H_batch580.0'}), (582, {'retval': '$H_batch580.0', 'castval': '$582return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG 2022-01-28 15:49:16,261 label 0:
    A = arg(0, name=A)                       ['A']
    D = arg(1, name=D)                       ['D']
    fixed_edge_reps = arg(2, name=fixed_edge_reps) ['fixed_edge_reps']
    batch_max = arg(3, name=batch_max)       ['batch_max']
    odd_cutoff = arg(4, name=odd_cutoff)     ['odd_cutoff']
    glynn = arg(5, name=glynn)               ['glynn']
    $const4.1 = const(int, 0)                ['$const4.1']
    oddloop = getitem(value=D, index=$const4.1, fn=<built-in function getitem>) ['$const4.1', 'D', 'oddloop']
    $const12.4 = const(int, 0)               ['$const12.4']
    $const14.5 = const(NoneType, None)       ['$const14.5']
    $const16.6 = const(NoneType, None)       ['$const16.6']
    $18build_slice.7 = global(slice: <class 'slice'>) ['$18build_slice.7']
    $18build_slice.8 = call $18build_slice.7($const14.5, $const16.6, func=$18build_slice.7, args=(Var($const14.5, loop_hafnian_batch.py:25), Var($const16.6, loop_hafnian_batch.py:25)), kws=(), vararg=None, target=None) ['$18build_slice.7', '$18build_slice.8', '$const14.5', '$const16.6']
    $20build_tuple.9 = build_tuple(items=[Var($const12.4, loop_hafnian_batch.py:25), Var($18build_slice.8, loop_hafnian_batch.py:25)]) ['$18build_slice.8', '$20build_tuple.9', '$const12.4']
    oddV = getitem(value=A, index=$20build_tuple.9, fn=<built-in function getitem>) ['$20build_tuple.9', 'A', 'oddV']
    $28load_attr.12 = getattr(value=A, attr=shape) ['$28load_attr.12', 'A']
    $const30.13 = const(int, 0)              ['$const30.13']
    n = getitem(value=$28load_attr.12, index=$const30.13, fn=<built-in function getitem>) ['$28load_attr.12', '$const30.13', 'n']
    $const36.15 = const(int, 2)              ['$const36.15']
    $40load_method.17 = getattr(value=fixed_edge_reps, attr=sum) ['$40load_method.17', 'fixed_edge_reps']
    $42call_method.18 = call $40load_method.17(func=$40load_method.17, args=[], kws=(), vararg=None, target=None) ['$40load_method.17', '$42call_method.18']
    N_fixed = $const36.15 * $42call_method.18 ['$42call_method.18', '$const36.15', 'N_fixed']
    $const50.21 = const(int, 2)              ['$const50.21']
    $54binary_multiply.23 = $const50.21 * batch_max ['$54binary_multiply.23', '$const50.21', 'batch_max']
    $56binary_add.24 = N_fixed + $54binary_multiply.23 ['$54binary_multiply.23', '$56binary_add.24', 'N_fixed']
    N_max = $56binary_add.24 + odd_cutoff    ['$56binary_add.24', 'N_max', 'odd_cutoff']
    $64load_global.27 = global(np: <module 'numpy' from 'C:\\Users\\zl4821\\Anaconda3\\envs\\GBS\\lib\\site-packages\\numpy\\__init__.py'>) ['$64load_global.27']
    $66load_method.28 = getattr(value=$64load_global.27, attr=concatenate) ['$64load_global.27', '$66load_method.28']
    $68load_global.29 = global(np: <module 'numpy' from 'C:\\Users\\zl4821\\Anaconda3\\envs\\GBS\\lib\\site-packages\\numpy\\__init__.py'>) ['$68load_global.29']
    $70load_method.30 = getattr(value=$68load_global.29, attr=array) ['$68load_global.29', '$70load_method.30']
    $74build_list.32 = build_list(items=[Var(batch_max, loop_hafnian_batch.py:24)]) ['$74build_list.32', 'batch_max']
    $76call_method.33 = call $70load_method.30($74build_list.32, func=$70load_method.30, args=[Var($74build_list.32, loop_hafnian_batch.py:32)], kws=(), vararg=None, target=None) ['$70load_method.30', '$74build_list.32', '$76call_method.33']
    $80build_tuple.35 = build_tuple(items=[Var($76call_method.33, loop_hafnian_batch.py:32), Var(fixed_edge_reps, loop_hafnian_batch.py:24)]) ['$76call_method.33', '$80build_tuple.35', 'fixed_edge_reps']
    edge_reps = call $66load_method.28($80build_tuple.35, func=$66load_method.28, args=[Var($80build_tuple.35, loop_hafnian_batch.py:32)], kws=(), vararg=None, target=None) ['$66load_method.28', '$80build_tuple.35', 'edge_reps']
    $86load_global.37 = global(np: <module 'numpy' from 'C:\\Users\\zl4821\\Anaconda3\\envs\\GBS\\lib\\site-packages\\numpy\\__init__.py'>) ['$86load_global.37']
    $88load_method.38 = getattr(value=$86load_global.37, attr=prod) ['$86load_global.37', '$88load_method.38']
    $const92.40 = const(int, 1)              ['$const92.40']
    $94binary_add.41 = edge_reps + $const92.40 ['$94binary_add.41', '$const92.40', 'edge_reps']
    steps = call $88load_method.38($94binary_add.41, func=$88load_method.38, args=[Var($94binary_add.41, loop_hafnian_batch.py:33)], kws=(), vararg=None, target=None) ['$88load_method.38', '$94binary_add.41', 'steps']
    $102load_method.44 = getattr(value=edge_reps, attr=max) ['$102load_method.44', 'edge_reps']
    $104call_method.45 = call $102load_method.44(func=$102load_method.44, args=[], kws=(), vararg=None, target=None) ['$102load_method.44', '$104call_method.45']
    max_binom = $104call_method.45 + odd_cutoff ['$104call_method.45', 'max_binom', 'odd_cutoff']
    $112load_global.48 = global(precompute_binoms: CPUDispatcher(<function precompute_binoms at 0x00000241074240D0>)) ['$112load_global.48']
    binoms = call $112load_global.48(max_binom, func=$112load_global.48, args=[Var(max_binom, loop_hafnian_batch.py:35)], kws=(), vararg=None, target=None) ['$112load_global.48', 'binoms', 'max_binom']
    $120load_global.51 = global(np: <module 'numpy' from 'C:\\Users\\zl4821\\Anaconda3\\envs\\GBS\\lib\\site-packages\\numpy\\__init__.py'>) ['$120load_global.51']
    $122load_attr.52 = getattr(value=$120load_global.51, attr=zeros) ['$120load_global.51', '$122load_attr.52']
    $const124.53 = const(int, 2)             ['$const124.53']
    $128binary_multiply.55 = $const124.53 * batch_max ['$128binary_multiply.55', '$const124.53', 'batch_max']
    $132binary_add.57 = $128binary_multiply.55 + odd_cutoff ['$128binary_multiply.55', '$132binary_add.57', 'odd_cutoff']
    $const134.58 = const(int, 1)             ['$const134.58']
    $136binary_add.59 = $132binary_add.57 + $const134.58 ['$132binary_add.57', '$136binary_add.59', '$const134.58']
    $138load_global.60 = global(np: <module 'numpy' from 'C:\\Users\\zl4821\\Anaconda3\\envs\\GBS\\lib\\site-packages\\numpy\\__init__.py'>) ['$138load_global.60']
    $140load_attr.61 = getattr(value=$138load_global.60, attr=complex128) ['$138load_global.60', '$140load_attr.61']
    H_batch = call $122load_attr.52($136binary_add.59, func=$122load_attr.52, args=[Var($136binary_add.59, loop_hafnian_batch.py:38)], kws=[('dtype', Var($140load_attr.61, loop_hafnian_batch.py:38))], vararg=None, target=None) ['$122load_attr.52', '$136binary_add.59', '$140load_attr.61', 'H_batch']
    $148load_global.64 = global(numba: <module 'numba' from 'C:\\Users\\zl4821\\Anaconda3\\envs\\GBS\\lib\\site-packages\\numba\\__init__.py'>) ['$148load_global.64']
    $150load_method.65 = getattr(value=$148load_global.64, attr=prange) ['$148load_global.64', '$150load_method.65']
    $154call_method.67 = call $150load_method.65(steps, func=$150load_method.65, args=[Var(steps, loop_hafnian_batch.py:33)], kws=(), vararg=None, target=None) ['$150load_method.65', '$154call_method.67', 'steps']
    $156get_iter.68 = getiter(value=$154call_method.67) ['$154call_method.67', '$156get_iter.68']
    $phi158.0 = $156get_iter.68              ['$156get_iter.68', '$phi158.0']
    jump 158                                 []
label 158:
    $158for_iter.1 = iternext(value=$phi158.0) ['$158for_iter.1', '$phi158.0']
    $158for_iter.2 = pair_first(value=$158for_iter.1) ['$158for_iter.1', '$158for_iter.2']
    $158for_iter.3 = pair_second(value=$158for_iter.1) ['$158for_iter.1', '$158for_iter.3']
    $phi162.1 = $158for_iter.2               ['$158for_iter.2', '$phi162.1']
    branch $158for_iter.3, 162, 520          ['$158for_iter.3']
label 162:
    j = $phi162.1                            ['$phi162.1', 'j']
    $164load_global.2 = global(np: <module 'numpy' from 'C:\\Users\\zl4821\\Anaconda3\\envs\\GBS\\lib\\site-packages\\numpy\\__init__.py'>) ['$164load_global.2']
    $166load_attr.3 = getattr(value=$164load_global.2, attr=zeros) ['$164load_global.2', '$166load_attr.3']
    $const168.4 = const(int, 2)              ['$const168.4']
    $172binary_multiply.6 = $const168.4 * batch_max ['$172binary_multiply.6', '$const168.4', 'batch_max']
    $176binary_add.8 = $172binary_multiply.6 + odd_cutoff ['$172binary_multiply.6', '$176binary_add.8', 'odd_cutoff']
    $const178.9 = const(int, 1)              ['$const178.9']
    $180binary_add.10 = $176binary_add.8 + $const178.9 ['$176binary_add.8', '$180binary_add.10', '$const178.9']
    $182load_global.11 = global(np: <module 'numpy' from 'C:\\Users\\zl4821\\Anaconda3\\envs\\GBS\\lib\\site-packages\\numpy\\__init__.py'>) ['$182load_global.11']
    $184load_attr.12 = getattr(value=$182load_global.11, attr=complex128) ['$182load_global.11', '$184load_attr.12']
    Hnew = call $166load_attr.3($180binary_add.10, func=$166load_attr.3, args=[Var($180binary_add.10, loop_hafnian_batch.py:41)], kws=[('dtype', Var($184load_attr.12, loop_hafnian_batch.py:41))], vararg=None, target=None) ['$166load_attr.3', '$180binary_add.10', '$184load_attr.12', 'Hnew']
    $192load_global.15 = global(find_kept_edges: CPUDispatcher(<function find_kept_edges at 0x0000024107424550>)) ['$192load_global.15']
    kept_edges = call $192load_global.15(j, edge_reps, func=$192load_global.15, args=[Var(j, loop_hafnian_batch.py:39), Var(edge_reps, loop_hafnian_batch.py:32)], kws=(), vararg=None, target=None) ['$192load_global.15', 'edge_reps', 'j', 'kept_edges']
    $204load_method.20 = getattr(value=kept_edges, attr=sum) ['$204load_method.20', 'kept_edges']
    edges_sum = call $204load_method.20(func=$204load_method.20, args=[], kws=(), vararg=None, target=None) ['$204load_method.20', 'edges_sum']
    binom_prod = const(float, 1.0)           ['binom_prod']
    $214load_global.23 = global(range: <class 'range'>) ['$214load_global.23']
    $const216.24 = const(int, 1)             ['$const216.24']
    $const220.26 = const(int, 2)             ['$const220.26']
    $222binary_floor_divide.27 = n // $const220.26 ['$222binary_floor_divide.27', '$const220.26', 'n']
    $224call_function.28 = call $214load_global.23($const216.24, $222binary_floor_divide.27, func=$214load_global.23, args=[Var($const216.24, loop_hafnian_batch.py:47), Var($222binary_floor_divide.27, loop_hafnian_batch.py:47)], kws=(), vararg=None, target=None) ['$214load_global.23', '$222binary_floor_divide.27', '$224call_function.28', '$const216.24']
    $226get_iter.29 = getiter(value=$224call_function.28) ['$224call_function.28', '$226get_iter.29']
    $phi228.1 = $226get_iter.29              ['$226get_iter.29', '$phi228.1']
    jump 228                                 []
label 228:
    $228for_iter.2 = iternext(value=$phi228.1) ['$228for_iter.2', '$phi228.1']
    $228for_iter.3 = pair_first(value=$228for_iter.2) ['$228for_iter.2', '$228for_iter.3']
    $228for_iter.4 = pair_second(value=$228for_iter.2) ['$228for_iter.2', '$228for_iter.4']
    $phi230.2 = $228for_iter.3               ['$228for_iter.3', '$phi230.2']
    branch $228for_iter.4, 230, 258          ['$228for_iter.4']
label 230:
    i = $phi230.2                            ['$phi230.2', 'i']
    $240binary_subscr.7 = getitem(value=edge_reps, index=i, fn=<built-in function getitem>) ['$240binary_subscr.7', 'edge_reps', 'i']
    $246binary_subscr.10 = getitem(value=kept_edges, index=i, fn=<built-in function getitem>) ['$246binary_subscr.10', 'i', 'kept_edges']
    $248build_tuple.11 = build_tuple(items=[Var($240binary_subscr.7, loop_hafnian_batch.py:48), Var($246binary_subscr.10, loop_hafnian_batch.py:48)]) ['$240binary_subscr.7', '$246binary_subscr.10', '$248build_tuple.11']
    $250binary_subscr.12 = getitem(value=binoms, index=$248build_tuple.11, fn=<built-in function getitem>) ['$248build_tuple.11', '$250binary_subscr.12', 'binoms']
    $252inplace_multiply.13 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=binom_prod, rhs=$250binary_subscr.12, static_lhs=Undefined, static_rhs=Undefined) ['$250binary_subscr.12', '$252inplace_multiply.13', 'binom_prod']
    binom_prod = $252inplace_multiply.13     ['$252inplace_multiply.13', 'binom_prod']
    jump 228                                 []
label 258:
    bool260 = global(bool: <class 'bool'>)   ['bool260']
    $260pred = call bool260(glynn, func=bool260, args=(Var(glynn, loop_hafnian_batch.py:24),), kws=(), vararg=None, target=None) ['$260pred', 'bool260', 'glynn']
    branch $260pred, 264, 278                ['$260pred']
label 264:
    $const264.1 = const(int, 2)              ['$const264.1']
    $268binary_multiply.3 = $const264.1 * kept_edges ['$268binary_multiply.3', '$const264.1', 'kept_edges']
    delta = $268binary_multiply.3 - edge_reps ['$268binary_multiply.3', 'delta', 'edge_reps']
    jump 282                                 []
label 278:
    delta = kept_edges                       ['delta', 'kept_edges']
    jump 282                                 []
label 282:
    $282load_global.1 = global(get_submatrices: CPUDispatcher(<function get_submatrices at 0x0000024107424E50>)) ['$282load_global.1']
    $292call_function.6 = call $282load_global.1(delta, A, D, oddV, func=$282load_global.1, args=[Var(delta, loop_hafnian_batch.py:51), Var(A, loop_hafnian_batch.py:24), Var(D, loop_hafnian_batch.py:24), Var(oddV, loop_hafnian_batch.py:25)], kws=(), vararg=None, target=None) ['$282load_global.1', '$292call_function.6', 'A', 'D', 'delta', 'oddV']
    $294unpack_sequence.11 = exhaust_iter(value=$292call_function.6, count=4) ['$292call_function.6', '$294unpack_sequence.11']
    $294unpack_sequence.7 = static_getitem(value=$294unpack_sequence.11, index=0, index_var=None, fn=<built-in function getitem>) ['$294unpack_sequence.11', '$294unpack_sequence.7']
    $294unpack_sequence.8 = static_getitem(value=$294unpack_sequence.11, index=1, index_var=None, fn=<built-in function getitem>) ['$294unpack_sequence.11', '$294unpack_sequence.8']
    $294unpack_sequence.9 = static_getitem(value=$294unpack_sequence.11, index=2, index_var=None, fn=<built-in function getitem>) ['$294unpack_sequence.11', '$294unpack_sequence.9']
    $294unpack_sequence.10 = static_getitem(value=$294unpack_sequence.11, index=3, index_var=None, fn=<built-in function getitem>) ['$294unpack_sequence.10', '$294unpack_sequence.11']
    AX_S = $294unpack_sequence.7             ['$294unpack_sequence.7', 'AX_S']
    XD_S = $294unpack_sequence.8             ['$294unpack_sequence.8', 'XD_S']
    D_S = $294unpack_sequence.9              ['$294unpack_sequence.9', 'D_S']
    oddVX_S = $294unpack_sequence.10         ['$294unpack_sequence.10', 'oddVX_S']
    $304load_global.12 = global(eigvals: CPUDispatcher(<function eigvals at 0x00000241074303A0>)) ['$304load_global.12']
    E = call $304load_global.12(AX_S, func=$304load_global.12, args=[Var(AX_S, loop_hafnian_batch.py:55)], kws=(), vararg=None, target=None) ['$304load_global.12', 'AX_S', 'E']
    $312load_global.15 = global(f_loop: CPUDispatcher(<function f_loop at 0x00000241074248B0>)) ['$312load_global.15']
    f_even = call $312load_global.15(E, AX_S, XD_S, D_S, N_max, func=$312load_global.15, args=[Var(E, loop_hafnian_batch.py:57), Var(AX_S, loop_hafnian_batch.py:55), Var(XD_S, loop_hafnian_batch.py:55), Var(D_S, loop_hafnian_batch.py:55), Var(N_max, loop_hafnian_batch.py:30)], kws=(), vararg=None, target=None) ['$312load_global.15', 'AX_S', 'D_S', 'E', 'N_max', 'XD_S', 'f_even']
    $328load_global.22 = global(f_loop_odd: CPUDispatcher(<function f_loop_odd at 0x0000024107424AF0>)) ['$328load_global.22']
    f_odd = call $328load_global.22(E, AX_S, XD_S, D_S, N_max, oddloop, oddVX_S, func=$328load_global.22, args=[Var(E, loop_hafnian_batch.py:57), Var(AX_S, loop_hafnian_batch.py:55), Var(XD_S, loop_hafnian_batch.py:55), Var(D_S, loop_hafnian_batch.py:55), Var(N_max, loop_hafnian_batch.py:30), Var(oddloop, loop_hafnian_batch.py:24), Var(oddVX_S, loop_hafnian_batch.py:55)], kws=(), vararg=None, target=None) ['$328load_global.22', 'AX_S', 'D_S', 'E', 'N_max', 'XD_S', 'f_odd', 'oddVX_S', 'oddloop']
    $348load_global.31 = global(range: <class 'range'>) ['$348load_global.31']
    $const350.32 = const(int, 2)             ['$const350.32']
    $const354.34 = const(int, 0)             ['$const354.34']
    $356binary_subscr.35 = getitem(value=kept_edges, index=$const354.34, fn=<built-in function getitem>) ['$356binary_subscr.35', '$const354.34', 'kept_edges']
    $358binary_multiply.36 = $const350.32 * $356binary_subscr.35 ['$356binary_subscr.35', '$358binary_multiply.36', '$const350.32']
    $const360.37 = const(int, 2)             ['$const360.37']
    $364binary_multiply.39 = $const360.37 * batch_max ['$364binary_multiply.39', '$const360.37', 'batch_max']
    $368binary_add.41 = $364binary_multiply.39 + odd_cutoff ['$364binary_multiply.39', '$368binary_add.41', 'odd_cutoff']
    $const370.42 = const(int, 1)             ['$const370.42']
    $372binary_add.43 = $368binary_add.41 + $const370.42 ['$368binary_add.41', '$372binary_add.43', '$const370.42']
    $374call_function.44 = call $348load_global.31($358binary_multiply.36, $372binary_add.43, func=$348load_global.31, args=[Var($358binary_multiply.36, loop_hafnian_batch.py:64), Var($372binary_add.43, loop_hafnian_batch.py:64)], kws=(), vararg=None, target=None) ['$348load_global.31', '$358binary_multiply.36', '$372binary_add.43', '$374call_function.44']
    $376get_iter.45 = getiter(value=$374call_function.44) ['$374call_function.44', '$376get_iter.45']
    $phi378.1 = $376get_iter.45              ['$376get_iter.45', '$phi378.1']
    jump 378                                 []
label 378:
    $378for_iter.2 = iternext(value=$phi378.1) ['$378for_iter.2', '$phi378.1']
    $378for_iter.3 = pair_first(value=$378for_iter.2) ['$378for_iter.2', '$378for_iter.3']
    $378for_iter.4 = pair_second(value=$378for_iter.2) ['$378for_iter.2', '$378for_iter.4']
    $phi380.2 = $378for_iter.3               ['$378for_iter.3', '$phi380.2']
    branch $378for_iter.4, 380, 510          ['$378for_iter.4']
label 380:
    N_det = $phi380.2                        ['$phi380.2', 'N_det']
    N = N_fixed + N_det                      ['N', 'N_det', 'N_fixed']
    $const390.6 = const(float, -1.0)         ['$const390.6']
    $const394.8 = const(int, 2)              ['$const394.8']
    $396binary_floor_divide.9 = N // $const394.8 ['$396binary_floor_divide.9', '$const394.8', 'N']
    $400binary_subtract.11 = $396binary_floor_divide.9 - edges_sum ['$396binary_floor_divide.9', '$400binary_subtract.11', 'edges_sum']
    plus_minus = $const390.6 ** $400binary_subtract.11 ['$400binary_subtract.11', '$const390.6', 'plus_minus']
    $const410.15 = const(int, 2)             ['$const410.15']
    $412binary_floor_divide.16 = N_det // $const410.15 ['$412binary_floor_divide.16', '$const410.15', 'N_det']
    $const416.18 = const(int, 0)             ['$const416.18']
    $418binary_subscr.19 = getitem(value=kept_edges, index=$const416.18, fn=<built-in function getitem>) ['$418binary_subscr.19', '$const416.18', 'kept_edges']
    $420build_tuple.20 = build_tuple(items=[Var($412binary_floor_divide.16, loop_hafnian_batch.py:68), Var($418binary_subscr.19, loop_hafnian_batch.py:68)]) ['$412binary_floor_divide.16', '$418binary_subscr.19', '$420build_tuple.20']
    $422binary_subscr.21 = getitem(value=binoms, index=$420build_tuple.20, fn=<built-in function getitem>) ['$420build_tuple.20', '$422binary_subscr.21', 'binoms']
    n_det_binom_prod = $422binary_subscr.21 * binom_prod ['$422binary_subscr.21', 'binom_prod', 'n_det_binom_prod']
    $const432.25 = const(int, 2)             ['$const432.25']
    $434binary_modulo.26 = N_det % $const432.25 ['$434binary_modulo.26', '$const432.25', 'N_det']
    $const436.27 = const(int, 0)             ['$const436.27']
    $438compare_op.28 = $434binary_modulo.26 == $const436.27 ['$434binary_modulo.26', '$438compare_op.28', '$const436.27']
    bool440 = global(bool: <class 'bool'>)   ['bool440']
    $440pred = call bool440($438compare_op.28, func=bool440, args=(Var($438compare_op.28, loop_hafnian_batch.py:70),), kws=(), vararg=None, target=None) ['$438compare_op.28', '$440pred', 'bool440']
    branch $440pred, 444, 478                ['$440pred']
label 444:
    $450binary_subscr.6 = getitem(value=Hnew, index=N_det, fn=<built-in function getitem>) ['$450binary_subscr.6', 'Hnew', 'N_det']
    $456binary_multiply.9 = n_det_binom_prod * plus_minus ['$456binary_multiply.9', 'n_det_binom_prod', 'plus_minus']
    $const462.12 = const(int, 2)             ['$const462.12']
    $464binary_floor_divide.13 = N // $const462.12 ['$464binary_floor_divide.13', '$const462.12', 'N']
    $466binary_subscr.14 = getitem(value=f_even, index=$464binary_floor_divide.13, fn=<built-in function getitem>) ['$464binary_floor_divide.13', '$466binary_subscr.14', 'f_even']
    $468binary_multiply.15 = $456binary_multiply.9 * $466binary_subscr.14 ['$456binary_multiply.9', '$466binary_subscr.14', '$468binary_multiply.15']
    $470inplace_add.16 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$450binary_subscr.6, rhs=$468binary_multiply.15, static_lhs=Undefined, static_rhs=Undefined) ['$450binary_subscr.6', '$468binary_multiply.15', '$470inplace_add.16']
    Hnew[N_det] = $470inplace_add.16         ['$470inplace_add.16', 'Hnew', 'N_det']
    jump 506                                 []
label 478:
    $484binary_subscr.6 = getitem(value=Hnew, index=N_det, fn=<built-in function getitem>) ['$484binary_subscr.6', 'Hnew', 'N_det']
    $490binary_multiply.9 = n_det_binom_prod * plus_minus ['$490binary_multiply.9', 'n_det_binom_prod', 'plus_minus']
    $496binary_subscr.12 = getitem(value=f_odd, index=N, fn=<built-in function getitem>) ['$496binary_subscr.12', 'N', 'f_odd']
    $498binary_multiply.13 = $490binary_multiply.9 * $496binary_subscr.12 ['$490binary_multiply.9', '$496binary_subscr.12', '$498binary_multiply.13']
    $500inplace_add.14 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$484binary_subscr.6, rhs=$498binary_multiply.13, static_lhs=Undefined, static_rhs=Undefined) ['$484binary_subscr.6', '$498binary_multiply.13', '$500inplace_add.14']
    Hnew[N_det] = $500inplace_add.14         ['$500inplace_add.14', 'Hnew', 'N_det']
    jump 506                                 []
label 506:
    jump 378                                 []
label 510:
    $514inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=H_batch, rhs=Hnew, static_lhs=Undefined, static_rhs=Undefined) ['$514inplace_add.3', 'H_batch', 'Hnew']
    H_batch = $514inplace_add.3              ['$514inplace_add.3', 'H_batch']
    jump 158                                 []
label 520:
    bool522 = global(bool: <class 'bool'>)   ['bool522']
    $522pred = call bool522(glynn, func=bool522, args=(Var(glynn, loop_hafnian_batch.py:24),), kws=(), vararg=None, target=None) ['$522pred', 'bool522', 'glynn']
    branch $522pred, 526, 580                ['$522pred']
label 526:
    $526load_global.0 = global(range: <class 'range'>) ['$526load_global.0']
    $530load_attr.2 = getattr(value=H_batch, attr=shape) ['$530load_attr.2', 'H_batch']
    $const532.3 = const(int, 0)              ['$const532.3']
    $534binary_subscr.4 = getitem(value=$530load_attr.2, index=$const532.3, fn=<built-in function getitem>) ['$530load_attr.2', '$534binary_subscr.4', '$const532.3']
    $536call_function.5 = call $526load_global.0($534binary_subscr.4, func=$526load_global.0, args=[Var($534binary_subscr.4, loop_hafnian_batch.py:78)], kws=(), vararg=None, target=None) ['$526load_global.0', '$534binary_subscr.4', '$536call_function.5']
    $538get_iter.6 = getiter(value=$536call_function.5) ['$536call_function.5', '$538get_iter.6']
    $phi540.0 = $538get_iter.6               ['$538get_iter.6', '$phi540.0']
    jump 540                                 []
label 540:
    $540for_iter.1 = iternext(value=$phi540.0) ['$540for_iter.1', '$phi540.0']
    $540for_iter.2 = pair_first(value=$540for_iter.1) ['$540for_iter.1', '$540for_iter.2']
    $540for_iter.3 = pair_second(value=$540for_iter.1) ['$540for_iter.1', '$540for_iter.3']
    $phi542.1 = $540for_iter.2               ['$540for_iter.2', '$phi542.1']
    branch $540for_iter.3, 542, 580          ['$540for_iter.3']
label 542:
    j = $phi542.1                            ['$phi542.1', 'j']
    x = N_fixed + j                          ['N_fixed', 'j', 'x']
    $558binary_subscr.9 = getitem(value=H_batch, index=j, fn=<built-in function getitem>) ['$558binary_subscr.9', 'H_batch', 'j']
    $const560.10 = const(float, 0.5)         ['$const560.10']
    $const564.12 = const(int, 2)             ['$const564.12']
    $566binary_floor_divide.13 = x // $const564.12 ['$566binary_floor_divide.13', '$const564.12', 'x']
    $568binary_power.14 = $const560.10 ** $566binary_floor_divide.13 ['$566binary_floor_divide.13', '$568binary_power.14', '$const560.10']
    $570inplace_multiply.15 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=$558binary_subscr.9, rhs=$568binary_power.14, static_lhs=Undefined, static_rhs=Undefined) ['$558binary_subscr.9', '$568binary_power.14', '$570inplace_multiply.15']
    H_batch[j] = $570inplace_multiply.15     ['$570inplace_multiply.15', 'H_batch', 'j']
    jump 540                                 []
label 580:
    $582return_value.1 = cast(value=H_batch) ['$582return_value.1', 'H_batch']
    return $582return_value.1                ['$582return_value.1']

DEBUG 2022-01-28 15:49:16,292 ==== SSA block analysis pass on 0
DEBUG 2022-01-28 15:49:16,292 Running <numba.core.ssa._GatherDefsHandler object at 0x000002410AF076D0>
DEBUG 2022-01-28 15:49:16,292 on stmt: A = arg(0, name=A)
DEBUG 2022-01-28 15:49:16,292 on stmt: D = arg(1, name=D)
DEBUG 2022-01-28 15:49:16,292 on stmt: fixed_edge_reps = arg(2, name=fixed_edge_reps)
DEBUG 2022-01-28 15:49:16,292 on stmt: batch_max = arg(3, name=batch_max)
DEBUG 2022-01-28 15:49:16,292 on stmt: odd_cutoff = arg(4, name=odd_cutoff)
DEBUG 2022-01-28 15:49:16,292 on stmt: glynn = arg(5, name=glynn)
DEBUG 2022-01-28 15:49:16,292 on stmt: $const4.1 = const(int, 0)
DEBUG 2022-01-28 15:49:16,292 on stmt: oddloop = static_getitem(value=D, index=0, index_var=$const4.1, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:16,292 on stmt: $const12.4 = const(int, 0)
DEBUG 2022-01-28 15:49:16,292 on stmt: $const14.5 = const(NoneType, None)
DEBUG 2022-01-28 15:49:16,292 on stmt: $const16.6 = const(NoneType, None)
DEBUG 2022-01-28 15:49:16,292 on stmt: $18build_slice.7 = global(slice: <class 'slice'>)
DEBUG 2022-01-28 15:49:16,292 on stmt: $18build_slice.8 = call $18build_slice.7($const14.5, $const16.6, func=$18build_slice.7, args=(Var($const14.5, loop_hafnian_batch.py:25), Var($const16.6, loop_hafnian_batch.py:25)), kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:16,292 on stmt: $20build_tuple.9 = build_tuple(items=[Var($const12.4, loop_hafnian_batch.py:25), Var($18build_slice.8, loop_hafnian_batch.py:25)])
DEBUG 2022-01-28 15:49:16,292 on stmt: oddV = static_getitem(value=A, index=(0, slice(None, None, None)), index_var=$20build_tuple.9, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:16,292 on stmt: $28load_attr.12 = getattr(value=A, attr=shape)
DEBUG 2022-01-28 15:49:16,292 on stmt: $const30.13 = const(int, 0)
DEBUG 2022-01-28 15:49:16,292 on stmt: n = static_getitem(value=$28load_attr.12, index=0, index_var=$const30.13, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:16,292 on stmt: $const36.15 = const(int, 2)
DEBUG 2022-01-28 15:49:16,292 on stmt: $40load_method.17 = getattr(value=fixed_edge_reps, attr=sum)
DEBUG 2022-01-28 15:49:16,292 on stmt: $42call_method.18 = call $40load_method.17(func=$40load_method.17, args=[], kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:16,292 on stmt: N_fixed = $const36.15 * $42call_method.18
DEBUG 2022-01-28 15:49:16,292 on stmt: $const50.21 = const(int, 2)
DEBUG 2022-01-28 15:49:16,292 on stmt: $54binary_multiply.23 = $const50.21 * batch_max
DEBUG 2022-01-28 15:49:16,292 on stmt: $56binary_add.24 = N_fixed + $54binary_multiply.23
DEBUG 2022-01-28 15:49:16,300 on stmt: N_max = $56binary_add.24 + odd_cutoff
DEBUG 2022-01-28 15:49:16,300 on stmt: $64load_global.27 = global(np: <module 'numpy' from 'C:\\Users\\zl4821\\Anaconda3\\envs\\GBS\\lib\\site-packages\\numpy\\__init__.py'>)
DEBUG 2022-01-28 15:49:16,300 on stmt: $66load_method.28 = getattr(value=$64load_global.27, attr=concatenate)
DEBUG 2022-01-28 15:49:16,300 on stmt: $68load_global.29 = global(np: <module 'numpy' from 'C:\\Users\\zl4821\\Anaconda3\\envs\\GBS\\lib\\site-packages\\numpy\\__init__.py'>)
DEBUG 2022-01-28 15:49:16,300 on stmt: $70load_method.30 = getattr(value=$68load_global.29, attr=array)
DEBUG 2022-01-28 15:49:16,300 on stmt: $74build_list.32 = build_list(items=[Var(batch_max, loop_hafnian_batch.py:24)])
DEBUG 2022-01-28 15:49:16,300 on stmt: $76call_method.33 = call $70load_method.30($74build_list.32, func=$70load_method.30, args=[Var($74build_list.32, loop_hafnian_batch.py:32)], kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:16,300 on stmt: $80build_tuple.35 = build_tuple(items=[Var($76call_method.33, loop_hafnian_batch.py:32), Var(fixed_edge_reps, loop_hafnian_batch.py:24)])
DEBUG 2022-01-28 15:49:16,300 on stmt: edge_reps = call $66load_method.28($80build_tuple.35, func=$66load_method.28, args=[Var($80build_tuple.35, loop_hafnian_batch.py:32)], kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:16,300 on stmt: $86load_global.37 = global(np: <module 'numpy' from 'C:\\Users\\zl4821\\Anaconda3\\envs\\GBS\\lib\\site-packages\\numpy\\__init__.py'>)
DEBUG 2022-01-28 15:49:16,300 on stmt: $88load_method.38 = getattr(value=$86load_global.37, attr=prod)
DEBUG 2022-01-28 15:49:16,300 on stmt: $const92.40 = const(int, 1)
DEBUG 2022-01-28 15:49:16,300 on stmt: $94binary_add.41 = edge_reps + $const92.40
DEBUG 2022-01-28 15:49:16,300 on stmt: steps = call $88load_method.38($94binary_add.41, func=$88load_method.38, args=[Var($94binary_add.41, loop_hafnian_batch.py:33)], kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:16,300 on stmt: $102load_method.44 = getattr(value=edge_reps, attr=max)
DEBUG 2022-01-28 15:49:16,300 on stmt: $104call_method.45 = call $102load_method.44(func=$102load_method.44, args=[], kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:16,300 on stmt: max_binom = $104call_method.45 + odd_cutoff
DEBUG 2022-01-28 15:49:16,300 on stmt: $112load_global.48 = global(precompute_binoms: CPUDispatcher(<function precompute_binoms at 0x00000241074240D0>))
DEBUG 2022-01-28 15:49:16,300 on stmt: binoms = call $112load_global.48(max_binom, func=$112load_global.48, args=[Var(max_binom, loop_hafnian_batch.py:35)], kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:16,302 on stmt: $120load_global.51 = global(np: <module 'numpy' from 'C:\\Users\\zl4821\\Anaconda3\\envs\\GBS\\lib\\site-packages\\numpy\\__init__.py'>)
DEBUG 2022-01-28 15:49:16,302 on stmt: $122load_attr.52 = getattr(value=$120load_global.51, attr=zeros)
DEBUG 2022-01-28 15:49:16,302 on stmt: $const124.53 = const(int, 2)
DEBUG 2022-01-28 15:49:16,302 on stmt: $128binary_multiply.55 = $const124.53 * batch_max
DEBUG 2022-01-28 15:49:16,302 on stmt: $132binary_add.57 = $128binary_multiply.55 + odd_cutoff
DEBUG 2022-01-28 15:49:16,302 on stmt: $const134.58 = const(int, 1)
DEBUG 2022-01-28 15:49:16,302 on stmt: $136binary_add.59 = $132binary_add.57 + $const134.58
DEBUG 2022-01-28 15:49:16,302 on stmt: $138load_global.60 = global(np: <module 'numpy' from 'C:\\Users\\zl4821\\Anaconda3\\envs\\GBS\\lib\\site-packages\\numpy\\__init__.py'>)
DEBUG 2022-01-28 15:49:16,302 on stmt: $140load_attr.61 = getattr(value=$138load_global.60, attr=complex128)
DEBUG 2022-01-28 15:49:16,302 on stmt: H_batch = call $122load_attr.52($136binary_add.59, func=$122load_attr.52, args=[Var($136binary_add.59, loop_hafnian_batch.py:38)], kws=[('dtype', Var($140load_attr.61, loop_hafnian_batch.py:38))], vararg=None, target=None)
DEBUG 2022-01-28 15:49:16,302 on stmt: $148load_global.64 = global(numba: <module 'numba' from 'C:\\Users\\zl4821\\Anaconda3\\envs\\GBS\\lib\\site-packages\\numba\\__init__.py'>)
DEBUG 2022-01-28 15:49:16,302 on stmt: $150load_method.65 = getattr(value=$148load_global.64, attr=prange)
DEBUG 2022-01-28 15:49:16,302 on stmt: $154call_method.67 = call $150load_method.65(steps, func=$150load_method.65, args=[Var(steps, loop_hafnian_batch.py:33)], kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:16,302 on stmt: $156get_iter.68 = getiter(value=$154call_method.67)
DEBUG 2022-01-28 15:49:16,302 on stmt: $phi158.0 = $156get_iter.68
DEBUG 2022-01-28 15:49:16,302 on stmt: jump 158
DEBUG 2022-01-28 15:49:16,302 ==== SSA block analysis pass on 158
DEBUG 2022-01-28 15:49:16,302 Running <numba.core.ssa._GatherDefsHandler object at 0x000002410AF076D0>
DEBUG 2022-01-28 15:49:16,302 on stmt: $158for_iter.1 = iternext(value=$phi158.0)
DEBUG 2022-01-28 15:49:16,302 on stmt: $158for_iter.2 = pair_first(value=$158for_iter.1)
DEBUG 2022-01-28 15:49:16,302 on stmt: $158for_iter.3 = pair_second(value=$158for_iter.1)
DEBUG 2022-01-28 15:49:16,302 on stmt: $phi162.1 = $158for_iter.2
DEBUG 2022-01-28 15:49:16,302 on stmt: branch $158for_iter.3, 162, 520
DEBUG 2022-01-28 15:49:16,302 ==== SSA block analysis pass on 162
DEBUG 2022-01-28 15:49:16,302 Running <numba.core.ssa._GatherDefsHandler object at 0x000002410AF076D0>
DEBUG 2022-01-28 15:49:16,302 on stmt: j = $phi162.1
DEBUG 2022-01-28 15:49:16,302 on stmt: $164load_global.2 = global(np: <module 'numpy' from 'C:\\Users\\zl4821\\Anaconda3\\envs\\GBS\\lib\\site-packages\\numpy\\__init__.py'>)
DEBUG 2022-01-28 15:49:16,302 on stmt: $166load_attr.3 = getattr(value=$164load_global.2, attr=zeros)
DEBUG 2022-01-28 15:49:16,302 on stmt: $const168.4 = const(int, 2)
DEBUG 2022-01-28 15:49:16,302 on stmt: $172binary_multiply.6 = $const168.4 * batch_max
DEBUG 2022-01-28 15:49:16,302 on stmt: $176binary_add.8 = $172binary_multiply.6 + odd_cutoff
DEBUG 2022-01-28 15:49:16,302 on stmt: $const178.9 = const(int, 1)
DEBUG 2022-01-28 15:49:16,302 on stmt: $180binary_add.10 = $176binary_add.8 + $const178.9
DEBUG 2022-01-28 15:49:16,302 on stmt: $182load_global.11 = global(np: <module 'numpy' from 'C:\\Users\\zl4821\\Anaconda3\\envs\\GBS\\lib\\site-packages\\numpy\\__init__.py'>)
DEBUG 2022-01-28 15:49:16,302 on stmt: $184load_attr.12 = getattr(value=$182load_global.11, attr=complex128)
DEBUG 2022-01-28 15:49:16,302 on stmt: Hnew = call $166load_attr.3($180binary_add.10, func=$166load_attr.3, args=[Var($180binary_add.10, loop_hafnian_batch.py:41)], kws=[('dtype', Var($184load_attr.12, loop_hafnian_batch.py:41))], vararg=None, target=None)
DEBUG 2022-01-28 15:49:16,302 on stmt: $192load_global.15 = global(find_kept_edges: CPUDispatcher(<function find_kept_edges at 0x0000024107424550>))
DEBUG 2022-01-28 15:49:16,302 on stmt: kept_edges = call $192load_global.15(j, edge_reps, func=$192load_global.15, args=[Var(j, loop_hafnian_batch.py:39), Var(edge_reps, loop_hafnian_batch.py:32)], kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:16,302 on stmt: $204load_method.20 = getattr(value=kept_edges, attr=sum)
DEBUG 2022-01-28 15:49:16,302 on stmt: edges_sum = call $204load_method.20(func=$204load_method.20, args=[], kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:16,302 on stmt: binom_prod = const(float, 1.0)
DEBUG 2022-01-28 15:49:16,302 on stmt: $214load_global.23 = global(range: <class 'range'>)
DEBUG 2022-01-28 15:49:16,302 on stmt: $const216.24 = const(int, 1)
DEBUG 2022-01-28 15:49:16,302 on stmt: $const220.26 = const(int, 2)
DEBUG 2022-01-28 15:49:16,302 on stmt: $222binary_floor_divide.27 = n // $const220.26
DEBUG 2022-01-28 15:49:16,302 on stmt: $224call_function.28 = call $214load_global.23($const216.24, $222binary_floor_divide.27, func=$214load_global.23, args=[Var($const216.24, loop_hafnian_batch.py:47), Var($222binary_floor_divide.27, loop_hafnian_batch.py:47)], kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:16,302 on stmt: $226get_iter.29 = getiter(value=$224call_function.28)
DEBUG 2022-01-28 15:49:16,302 on stmt: $phi228.1 = $226get_iter.29
DEBUG 2022-01-28 15:49:16,302 on stmt: jump 228
DEBUG 2022-01-28 15:49:16,302 ==== SSA block analysis pass on 228
DEBUG 2022-01-28 15:49:16,302 Running <numba.core.ssa._GatherDefsHandler object at 0x000002410AF076D0>
DEBUG 2022-01-28 15:49:16,302 on stmt: $228for_iter.2 = iternext(value=$phi228.1)
DEBUG 2022-01-28 15:49:16,302 on stmt: $228for_iter.3 = pair_first(value=$228for_iter.2)
DEBUG 2022-01-28 15:49:16,302 on stmt: $228for_iter.4 = pair_second(value=$228for_iter.2)
DEBUG 2022-01-28 15:49:16,302 on stmt: $phi230.2 = $228for_iter.3
DEBUG 2022-01-28 15:49:16,302 on stmt: branch $228for_iter.4, 230, 258
DEBUG 2022-01-28 15:49:16,302 ==== SSA block analysis pass on 230
DEBUG 2022-01-28 15:49:16,302 Running <numba.core.ssa._GatherDefsHandler object at 0x000002410AF076D0>
DEBUG 2022-01-28 15:49:16,302 on stmt: i = $phi230.2
DEBUG 2022-01-28 15:49:16,302 on stmt: $240binary_subscr.7 = getitem(value=edge_reps, index=i, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:16,302 on stmt: $246binary_subscr.10 = getitem(value=kept_edges, index=i, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:16,302 on stmt: $248build_tuple.11 = build_tuple(items=[Var($240binary_subscr.7, loop_hafnian_batch.py:48), Var($246binary_subscr.10, loop_hafnian_batch.py:48)])
DEBUG 2022-01-28 15:49:16,302 on stmt: $250binary_subscr.12 = getitem(value=binoms, index=$248build_tuple.11, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:16,302 on stmt: $252inplace_multiply.13 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=binom_prod, rhs=$250binary_subscr.12, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-01-28 15:49:16,302 on stmt: binom_prod = $252inplace_multiply.13
DEBUG 2022-01-28 15:49:16,302 on stmt: jump 228
DEBUG 2022-01-28 15:49:16,302 ==== SSA block analysis pass on 258
DEBUG 2022-01-28 15:49:16,302 Running <numba.core.ssa._GatherDefsHandler object at 0x000002410AF076D0>
DEBUG 2022-01-28 15:49:16,302 on stmt: bool260 = global(bool: <class 'bool'>)
DEBUG 2022-01-28 15:49:16,302 on stmt: $260pred = call bool260(glynn, func=bool260, args=(Var(glynn, loop_hafnian_batch.py:24),), kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:16,302 on stmt: branch $260pred, 264, 278
DEBUG 2022-01-28 15:49:16,302 ==== SSA block analysis pass on 264
DEBUG 2022-01-28 15:49:16,302 Running <numba.core.ssa._GatherDefsHandler object at 0x000002410AF076D0>
DEBUG 2022-01-28 15:49:16,302 on stmt: $const264.1 = const(int, 2)
DEBUG 2022-01-28 15:49:16,302 on stmt: $268binary_multiply.3 = $const264.1 * kept_edges
DEBUG 2022-01-28 15:49:16,302 on stmt: delta = $268binary_multiply.3 - edge_reps
DEBUG 2022-01-28 15:49:16,302 on stmt: jump 282
DEBUG 2022-01-28 15:49:16,310 ==== SSA block analysis pass on 278
DEBUG 2022-01-28 15:49:16,310 Running <numba.core.ssa._GatherDefsHandler object at 0x000002410AF076D0>
DEBUG 2022-01-28 15:49:16,310 on stmt: delta = kept_edges
DEBUG 2022-01-28 15:49:16,310 on stmt: jump 282
DEBUG 2022-01-28 15:49:16,310 ==== SSA block analysis pass on 282
DEBUG 2022-01-28 15:49:16,310 Running <numba.core.ssa._GatherDefsHandler object at 0x000002410AF076D0>
DEBUG 2022-01-28 15:49:16,310 on stmt: $282load_global.1 = global(get_submatrices: CPUDispatcher(<function get_submatrices at 0x0000024107424E50>))
DEBUG 2022-01-28 15:49:16,310 on stmt: $292call_function.6 = call $282load_global.1(delta, A, D, oddV, func=$282load_global.1, args=[Var(delta, loop_hafnian_batch.py:51), Var(A, loop_hafnian_batch.py:24), Var(D, loop_hafnian_batch.py:24), Var(oddV, loop_hafnian_batch.py:25)], kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:16,310 on stmt: $294unpack_sequence.11 = exhaust_iter(value=$292call_function.6, count=4)
DEBUG 2022-01-28 15:49:16,310 on stmt: $294unpack_sequence.7 = static_getitem(value=$294unpack_sequence.11, index=0, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:16,310 on stmt: $294unpack_sequence.8 = static_getitem(value=$294unpack_sequence.11, index=1, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:16,310 on stmt: $294unpack_sequence.9 = static_getitem(value=$294unpack_sequence.11, index=2, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:16,310 on stmt: $294unpack_sequence.10 = static_getitem(value=$294unpack_sequence.11, index=3, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:16,310 on stmt: AX_S = $294unpack_sequence.7
DEBUG 2022-01-28 15:49:16,310 on stmt: XD_S = $294unpack_sequence.8
DEBUG 2022-01-28 15:49:16,310 on stmt: D_S = $294unpack_sequence.9
DEBUG 2022-01-28 15:49:16,312 on stmt: oddVX_S = $294unpack_sequence.10
DEBUG 2022-01-28 15:49:16,312 on stmt: $304load_global.12 = global(eigvals: CPUDispatcher(<function eigvals at 0x00000241074303A0>))
DEBUG 2022-01-28 15:49:16,312 on stmt: E = call $304load_global.12(AX_S, func=$304load_global.12, args=[Var(AX_S, loop_hafnian_batch.py:55)], kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:16,312 on stmt: $312load_global.15 = global(f_loop: CPUDispatcher(<function f_loop at 0x00000241074248B0>))
DEBUG 2022-01-28 15:49:16,312 on stmt: f_even = call $312load_global.15(E, AX_S, XD_S, D_S, N_max, func=$312load_global.15, args=[Var(E, loop_hafnian_batch.py:57), Var(AX_S, loop_hafnian_batch.py:55), Var(XD_S, loop_hafnian_batch.py:55), Var(D_S, loop_hafnian_batch.py:55), Var(N_max, loop_hafnian_batch.py:30)], kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:16,312 on stmt: $328load_global.22 = global(f_loop_odd: CPUDispatcher(<function f_loop_odd at 0x0000024107424AF0>))
DEBUG 2022-01-28 15:49:16,312 on stmt: f_odd = call $328load_global.22(E, AX_S, XD_S, D_S, N_max, oddloop, oddVX_S, func=$328load_global.22, args=[Var(E, loop_hafnian_batch.py:57), Var(AX_S, loop_hafnian_batch.py:55), Var(XD_S, loop_hafnian_batch.py:55), Var(D_S, loop_hafnian_batch.py:55), Var(N_max, loop_hafnian_batch.py:30), Var(oddloop, loop_hafnian_batch.py:24), Var(oddVX_S, loop_hafnian_batch.py:55)], kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:16,312 on stmt: $348load_global.31 = global(range: <class 'range'>)
DEBUG 2022-01-28 15:49:16,312 on stmt: $const350.32 = const(int, 2)
DEBUG 2022-01-28 15:49:16,312 on stmt: $const354.34 = const(int, 0)
DEBUG 2022-01-28 15:49:16,312 on stmt: $356binary_subscr.35 = static_getitem(value=kept_edges, index=0, index_var=$const354.34, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:16,312 on stmt: $358binary_multiply.36 = $const350.32 * $356binary_subscr.35
DEBUG 2022-01-28 15:49:16,312 on stmt: $const360.37 = const(int, 2)
DEBUG 2022-01-28 15:49:16,312 on stmt: $364binary_multiply.39 = $const360.37 * batch_max
DEBUG 2022-01-28 15:49:16,312 on stmt: $368binary_add.41 = $364binary_multiply.39 + odd_cutoff
DEBUG 2022-01-28 15:49:16,312 on stmt: $const370.42 = const(int, 1)
DEBUG 2022-01-28 15:49:16,312 on stmt: $372binary_add.43 = $368binary_add.41 + $const370.42
DEBUG 2022-01-28 15:49:16,312 on stmt: $374call_function.44 = call $348load_global.31($358binary_multiply.36, $372binary_add.43, func=$348load_global.31, args=[Var($358binary_multiply.36, loop_hafnian_batch.py:64), Var($372binary_add.43, loop_hafnian_batch.py:64)], kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:16,312 on stmt: $376get_iter.45 = getiter(value=$374call_function.44)
DEBUG 2022-01-28 15:49:16,312 on stmt: $phi378.1 = $376get_iter.45
DEBUG 2022-01-28 15:49:16,312 on stmt: jump 378
DEBUG 2022-01-28 15:49:16,312 ==== SSA block analysis pass on 378
DEBUG 2022-01-28 15:49:16,312 Running <numba.core.ssa._GatherDefsHandler object at 0x000002410AF076D0>
DEBUG 2022-01-28 15:49:16,312 on stmt: $378for_iter.2 = iternext(value=$phi378.1)
DEBUG 2022-01-28 15:49:16,312 on stmt: $378for_iter.3 = pair_first(value=$378for_iter.2)
DEBUG 2022-01-28 15:49:16,312 on stmt: $378for_iter.4 = pair_second(value=$378for_iter.2)
DEBUG 2022-01-28 15:49:16,312 on stmt: $phi380.2 = $378for_iter.3
DEBUG 2022-01-28 15:49:16,312 on stmt: branch $378for_iter.4, 380, 510
DEBUG 2022-01-28 15:49:16,312 ==== SSA block analysis pass on 380
DEBUG 2022-01-28 15:49:16,312 Running <numba.core.ssa._GatherDefsHandler object at 0x000002410AF076D0>
DEBUG 2022-01-28 15:49:16,312 on stmt: N_det = $phi380.2
DEBUG 2022-01-28 15:49:16,312 on stmt: N = N_fixed + N_det
DEBUG 2022-01-28 15:49:16,312 on stmt: $const390.6 = const(float, -1.0)
DEBUG 2022-01-28 15:49:16,312 on stmt: $const394.8 = const(int, 2)
DEBUG 2022-01-28 15:49:16,312 on stmt: $396binary_floor_divide.9 = N // $const394.8
DEBUG 2022-01-28 15:49:16,312 on stmt: $400binary_subtract.11 = $396binary_floor_divide.9 - edges_sum
DEBUG 2022-01-28 15:49:16,312 on stmt: plus_minus = $const390.6 ** $400binary_subtract.11
DEBUG 2022-01-28 15:49:16,312 on stmt: $const410.15 = const(int, 2)
DEBUG 2022-01-28 15:49:16,312 on stmt: $412binary_floor_divide.16 = N_det // $const410.15
DEBUG 2022-01-28 15:49:16,312 on stmt: $const416.18 = const(int, 0)
DEBUG 2022-01-28 15:49:16,312 on stmt: $418binary_subscr.19 = static_getitem(value=kept_edges, index=0, index_var=$const416.18, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:16,312 on stmt: $420build_tuple.20 = build_tuple(items=[Var($412binary_floor_divide.16, loop_hafnian_batch.py:68), Var($418binary_subscr.19, loop_hafnian_batch.py:68)])
DEBUG 2022-01-28 15:49:16,312 on stmt: $422binary_subscr.21 = getitem(value=binoms, index=$420build_tuple.20, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:16,312 on stmt: n_det_binom_prod = $422binary_subscr.21 * binom_prod
DEBUG 2022-01-28 15:49:16,312 on stmt: $const432.25 = const(int, 2)
DEBUG 2022-01-28 15:49:16,312 on stmt: $434binary_modulo.26 = N_det % $const432.25
DEBUG 2022-01-28 15:49:16,312 on stmt: $const436.27 = const(int, 0)
DEBUG 2022-01-28 15:49:16,312 on stmt: $438compare_op.28 = $434binary_modulo.26 == $const436.27
DEBUG 2022-01-28 15:49:16,312 on stmt: bool440 = global(bool: <class 'bool'>)
DEBUG 2022-01-28 15:49:16,312 on stmt: $440pred = call bool440($438compare_op.28, func=bool440, args=(Var($438compare_op.28, loop_hafnian_batch.py:70),), kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:16,312 on stmt: branch $440pred, 444, 478
DEBUG 2022-01-28 15:49:16,312 ==== SSA block analysis pass on 444
DEBUG 2022-01-28 15:49:16,312 Running <numba.core.ssa._GatherDefsHandler object at 0x000002410AF076D0>
DEBUG 2022-01-28 15:49:16,312 on stmt: $450binary_subscr.6 = getitem(value=Hnew, index=N_det, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:16,312 on stmt: $456binary_multiply.9 = n_det_binom_prod * plus_minus
DEBUG 2022-01-28 15:49:16,312 on stmt: $const462.12 = const(int, 2)
DEBUG 2022-01-28 15:49:16,312 on stmt: $464binary_floor_divide.13 = N // $const462.12
DEBUG 2022-01-28 15:49:16,312 on stmt: $466binary_subscr.14 = getitem(value=f_even, index=$464binary_floor_divide.13, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:16,312 on stmt: $468binary_multiply.15 = $456binary_multiply.9 * $466binary_subscr.14
DEBUG 2022-01-28 15:49:16,312 on stmt: $470inplace_add.16 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$450binary_subscr.6, rhs=$468binary_multiply.15, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-01-28 15:49:16,312 on stmt: Hnew[N_det] = $470inplace_add.16
DEBUG 2022-01-28 15:49:16,312 on stmt: jump 506
DEBUG 2022-01-28 15:49:16,312 ==== SSA block analysis pass on 478
DEBUG 2022-01-28 15:49:16,312 Running <numba.core.ssa._GatherDefsHandler object at 0x000002410AF076D0>
DEBUG 2022-01-28 15:49:16,312 on stmt: $484binary_subscr.6 = getitem(value=Hnew, index=N_det, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:16,312 on stmt: $490binary_multiply.9 = n_det_binom_prod * plus_minus
DEBUG 2022-01-28 15:49:16,312 on stmt: $496binary_subscr.12 = getitem(value=f_odd, index=N, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:16,312 on stmt: $498binary_multiply.13 = $490binary_multiply.9 * $496binary_subscr.12
DEBUG 2022-01-28 15:49:16,312 on stmt: $500inplace_add.14 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$484binary_subscr.6, rhs=$498binary_multiply.13, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-01-28 15:49:16,312 on stmt: Hnew[N_det] = $500inplace_add.14
DEBUG 2022-01-28 15:49:16,312 on stmt: jump 506
DEBUG 2022-01-28 15:49:16,312 ==== SSA block analysis pass on 506
DEBUG 2022-01-28 15:49:16,312 Running <numba.core.ssa._GatherDefsHandler object at 0x000002410AF076D0>
DEBUG 2022-01-28 15:49:16,312 on stmt: jump 378
DEBUG 2022-01-28 15:49:16,312 ==== SSA block analysis pass on 510
DEBUG 2022-01-28 15:49:16,312 Running <numba.core.ssa._GatherDefsHandler object at 0x000002410AF076D0>
DEBUG 2022-01-28 15:49:16,312 on stmt: $514inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=H_batch, rhs=Hnew, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-01-28 15:49:16,312 on stmt: H_batch = $514inplace_add.3
DEBUG 2022-01-28 15:49:16,312 on stmt: jump 158
DEBUG 2022-01-28 15:49:16,312 ==== SSA block analysis pass on 520
DEBUG 2022-01-28 15:49:16,312 Running <numba.core.ssa._GatherDefsHandler object at 0x000002410AF076D0>
DEBUG 2022-01-28 15:49:16,312 on stmt: bool522 = global(bool: <class 'bool'>)
DEBUG 2022-01-28 15:49:16,312 on stmt: $522pred = call bool522(glynn, func=bool522, args=(Var(glynn, loop_hafnian_batch.py:24),), kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:16,312 on stmt: branch $522pred, 526, 580
DEBUG 2022-01-28 15:49:16,312 ==== SSA block analysis pass on 526
DEBUG 2022-01-28 15:49:16,312 Running <numba.core.ssa._GatherDefsHandler object at 0x000002410AF076D0>
DEBUG 2022-01-28 15:49:16,312 on stmt: $526load_global.0 = global(range: <class 'range'>)
DEBUG 2022-01-28 15:49:16,320 on stmt: $530load_attr.2 = getattr(value=H_batch, attr=shape)
DEBUG 2022-01-28 15:49:16,320 on stmt: $const532.3 = const(int, 0)
DEBUG 2022-01-28 15:49:16,320 on stmt: $534binary_subscr.4 = static_getitem(value=$530load_attr.2, index=0, index_var=$const532.3, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:16,320 on stmt: $536call_function.5 = call $526load_global.0($534binary_subscr.4, func=$526load_global.0, args=[Var($534binary_subscr.4, loop_hafnian_batch.py:78)], kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:16,320 on stmt: $538get_iter.6 = getiter(value=$536call_function.5)
DEBUG 2022-01-28 15:49:16,320 on stmt: $phi540.0 = $538get_iter.6
DEBUG 2022-01-28 15:49:16,320 on stmt: jump 540
DEBUG 2022-01-28 15:49:16,320 ==== SSA block analysis pass on 540
DEBUG 2022-01-28 15:49:16,320 Running <numba.core.ssa._GatherDefsHandler object at 0x000002410AF076D0>
DEBUG 2022-01-28 15:49:16,320 on stmt: $540for_iter.1 = iternext(value=$phi540.0)
DEBUG 2022-01-28 15:49:16,320 on stmt: $540for_iter.2 = pair_first(value=$540for_iter.1)
DEBUG 2022-01-28 15:49:16,320 on stmt: $540for_iter.3 = pair_second(value=$540for_iter.1)
DEBUG 2022-01-28 15:49:16,320 on stmt: $phi542.1 = $540for_iter.2
DEBUG 2022-01-28 15:49:16,320 on stmt: branch $540for_iter.3, 542, 580
DEBUG 2022-01-28 15:49:16,320 ==== SSA block analysis pass on 542
DEBUG 2022-01-28 15:49:16,320 Running <numba.core.ssa._GatherDefsHandler object at 0x000002410AF076D0>
DEBUG 2022-01-28 15:49:16,320 on stmt: j = $phi542.1
DEBUG 2022-01-28 15:49:16,320 on stmt: x = N_fixed + j
DEBUG 2022-01-28 15:49:16,320 on stmt: $558binary_subscr.9 = getitem(value=H_batch, index=j, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:16,320 on stmt: $const560.10 = const(float, 0.5)
DEBUG 2022-01-28 15:49:16,320 on stmt: $const564.12 = const(int, 2)
DEBUG 2022-01-28 15:49:16,320 on stmt: $566binary_floor_divide.13 = x // $const564.12
DEBUG 2022-01-28 15:49:16,320 on stmt: $568binary_power.14 = $const560.10 ** $566binary_floor_divide.13
DEBUG 2022-01-28 15:49:16,320 on stmt: $570inplace_multiply.15 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=$558binary_subscr.9, rhs=$568binary_power.14, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-01-28 15:49:16,320 on stmt: H_batch[j] = $570inplace_multiply.15
DEBUG 2022-01-28 15:49:16,320 on stmt: jump 540
DEBUG 2022-01-28 15:49:16,320 ==== SSA block analysis pass on 580
DEBUG 2022-01-28 15:49:16,320 Running <numba.core.ssa._GatherDefsHandler object at 0x000002410AF076D0>
DEBUG 2022-01-28 15:49:16,322 on stmt: $582return_value.1 = cast(value=H_batch)
DEBUG 2022-01-28 15:49:16,322 on stmt: return $582return_value.1
DEBUG 2022-01-28 15:49:16,322 defs defaultdict(<class 'list'>,
            {'$102load_method.44': [<numba.core.ir.Assign object at 0x0000024108C83280>],
             '$104call_method.45': [<numba.core.ir.Assign object at 0x0000024108C83490>],
             '$112load_global.48': [<numba.core.ir.Assign object at 0x0000024108C83940>],
             '$120load_global.51': [<numba.core.ir.Assign object at 0x0000024108C83E80>],
             '$122load_attr.52': [<numba.core.ir.Assign object at 0x0000024108C85040>],
             '$128binary_multiply.55': [<numba.core.ir.Assign object at 0x0000024108C85490>],
             '$132binary_add.57': [<numba.core.ir.Assign object at 0x0000024108C85730>],
             '$136binary_add.59': [<numba.core.ir.Assign object at 0x0000024108C85A30>],
             '$138load_global.60': [<numba.core.ir.Assign object at 0x0000024108C85B80>],
             '$140load_attr.61': [<numba.core.ir.Assign object at 0x0000024108C85D00>],
             '$148load_global.64': [<numba.core.ir.Assign object at 0x0000024108C87340>],
             '$150load_method.65': [<numba.core.ir.Assign object at 0x0000024108C874C0>],
             '$154call_method.67': [<numba.core.ir.Assign object at 0x0000024108C877F0>],
             '$156get_iter.68': [<numba.core.ir.Assign object at 0x0000024108C878E0>],
             '$158for_iter.1': [<numba.core.ir.Assign object at 0x0000024108C7D3A0>],
             '$158for_iter.2': [<numba.core.ir.Assign object at 0x0000024108C80190>],
             '$158for_iter.3': [<numba.core.ir.Assign object at 0x0000024108C80F70>],
             '$164load_global.2': [<numba.core.ir.Assign object at 0x0000024108C87670>],
             '$166load_attr.3': [<numba.core.ir.Assign object at 0x0000024108C87AC0>],
             '$172binary_multiply.6': [<numba.core.ir.Assign object at 0x0000024108C87F10>],
             '$176binary_add.8': [<numba.core.ir.Assign object at 0x0000024108C8B1F0>],
             '$180binary_add.10': [<numba.core.ir.Assign object at 0x0000024108C8B4F0>],
             '$182load_global.11': [<numba.core.ir.Assign object at 0x0000024108C8B640>],
             '$184load_attr.12': [<numba.core.ir.Assign object at 0x0000024108C8B7C0>],
             '$18build_slice.7': [<numba.core.ir.Assign object at 0x0000024108C77700>],
             '$18build_slice.8': [<numba.core.ir.Assign object at 0x0000024108C77820>],
             '$192load_global.15': [<numba.core.ir.Assign object at 0x0000024108C8BDC0>],
             '$204load_method.20': [<numba.core.ir.Assign object at 0x0000024108C8E580>],
             '$20build_tuple.9': [<numba.core.ir.Assign object at 0x0000024108C779D0>],
             '$214load_global.23': [<numba.core.ir.Assign object at 0x0000024108C8EC40>],
             '$222binary_floor_divide.27': [<numba.core.ir.Assign object at 0x0000024108C8F250>],
             '$224call_function.28': [<numba.core.ir.Assign object at 0x0000024108C8F400>],
             '$226get_iter.29': [<numba.core.ir.Assign object at 0x0000024108C8F520>],
             '$228for_iter.2': [<numba.core.ir.Assign object at 0x0000024108C8EB50>],
             '$228for_iter.3': [<numba.core.ir.Assign object at 0x0000024108C8F610>],
             '$228for_iter.4': [<numba.core.ir.Assign object at 0x0000024108C8F730>],
             '$240binary_subscr.7': [<numba.core.ir.Assign object at 0x0000024108C91070>],
             '$246binary_subscr.10': [<numba.core.ir.Assign object at 0x0000024108C91430>],
             '$248build_tuple.11': [<numba.core.ir.Assign object at 0x0000024108C915B0>],
             '$250binary_subscr.12': [<numba.core.ir.Assign object at 0x0000024108C91730>],
             '$252inplace_multiply.13': [<numba.core.ir.Assign object at 0x0000024108C918B0>],
             '$260pred': [<numba.core.ir.Assign object at 0x0000024108C91C40>],
             '$268binary_multiply.3': [<numba.core.ir.Assign object at 0x0000024108C93190>],
             '$282load_global.1': [<numba.core.ir.Assign object at 0x0000024108C939A0>],
             '$28load_attr.12': [<numba.core.ir.Assign object at 0x0000024108C77EE0>],
             '$292call_function.6': [<numba.core.ir.Assign object at 0x0000024108C95040>],
             '$294unpack_sequence.10': [<numba.core.ir.Assign object at 0x0000024108C95640>],
             '$294unpack_sequence.11': [<numba.core.ir.Assign object at 0x0000024108C95190>],
             '$294unpack_sequence.7': [<numba.core.ir.Assign object at 0x0000024108C952E0>],
             '$294unpack_sequence.8': [<numba.core.ir.Assign object at 0x0000024108C95400>],
             '$294unpack_sequence.9': [<numba.core.ir.Assign object at 0x0000024108C95520>],
             '$304load_global.12': [<numba.core.ir.Assign object at 0x0000024108C95BE0>],
             '$312load_global.15': [<numba.core.ir.Assign object at 0x0000024108C97160>],
             '$328load_global.22': [<numba.core.ir.Assign object at 0x0000024108C97B20>],
             '$348load_global.31': [<numba.core.ir.Assign object at 0x0000024108C9A760>],
             '$356binary_subscr.35': [<numba.core.ir.Assign object at 0x000002410AEDD970>],
             '$358binary_multiply.36': [<numba.core.ir.Assign object at 0x0000024108C9AEB0>],
             '$364binary_multiply.39': [<numba.core.ir.Assign object at 0x0000024108C9C310>],
             '$368binary_add.41': [<numba.core.ir.Assign object at 0x0000024108C9C5B0>],
             '$372binary_add.43': [<numba.core.ir.Assign object at 0x0000024108C9C8B0>],
             '$374call_function.44': [<numba.core.ir.Assign object at 0x0000024108C9CA60>],
             '$376get_iter.45': [<numba.core.ir.Assign object at 0x0000024108C9CB80>],
             '$378for_iter.2': [<numba.core.ir.Assign object at 0x0000024108C97DF0>],
             '$378for_iter.3': [<numba.core.ir.Assign object at 0x0000024108C9A190>],
             '$378for_iter.4': [<numba.core.ir.Assign object at 0x0000024108C9A670>],
             '$396binary_floor_divide.9': [<numba.core.ir.Assign object at 0x0000024108C9E670>],
             '$400binary_subtract.11': [<numba.core.ir.Assign object at 0x0000024108C9E910>],
             '$40load_method.17': [<numba.core.ir.Assign object at 0x0000024108C7A760>],
             '$412binary_floor_divide.16': [<numba.core.ir.Assign object at 0x000002410AED0130>],
             '$418binary_subscr.19': [<numba.core.ir.Assign object at 0x000002410AEDD880>],
             '$420build_tuple.20': [<numba.core.ir.Assign object at 0x000002410AED06D0>],
             '$422binary_subscr.21': [<numba.core.ir.Assign object at 0x000002410AED0850>],
             '$42call_method.18': [<numba.core.ir.Assign object at 0x0000024108C7A970>],
             '$434binary_modulo.26': [<numba.core.ir.Assign object at 0x000002410AED2070>],
             '$438compare_op.28': [<numba.core.ir.Assign object at 0x000002410AED2370>],
             '$440pred': [<numba.core.ir.Assign object at 0x000002410AED25E0>],
             '$450binary_subscr.6': [<numba.core.ir.Assign object at 0x000002410AED2850>],
             '$456binary_multiply.9': [<numba.core.ir.Assign object at 0x000002410AED2C10>],
             '$464binary_floor_divide.13': [<numba.core.ir.Assign object at 0x000002410AED5190>],
             '$466binary_subscr.14': [<numba.core.ir.Assign object at 0x000002410AED5310>],
             '$468binary_multiply.15': [<numba.core.ir.Assign object at 0x000002410AED5490>],
             '$470inplace_add.16': [<numba.core.ir.Assign object at 0x000002410AED5610>],
             '$484binary_subscr.6': [<numba.core.ir.Assign object at 0x000002410AED5AF0>],
             '$490binary_multiply.9': [<numba.core.ir.Assign object at 0x000002410AED5EB0>],
             '$496binary_subscr.12': [<numba.core.ir.Assign object at 0x000002410AED72B0>],
             '$498binary_multiply.13': [<numba.core.ir.Assign object at 0x000002410AED7430>],
             '$500inplace_add.14': [<numba.core.ir.Assign object at 0x000002410AED75B0>],
             '$514inplace_add.3': [<numba.core.ir.Assign object at 0x000002410AED79D0>],
             '$522pred': [<numba.core.ir.Assign object at 0x000002410AED7EE0>],
             '$526load_global.0': [<numba.core.ir.Assign object at 0x000002410AED9160>],
             '$530load_attr.2': [<numba.core.ir.Assign object at 0x000002410AED9400>],
             '$534binary_subscr.4': [<numba.core.ir.Assign object at 0x0000024108BEA4F0>],
             '$536call_function.5': [<numba.core.ir.Assign object at 0x000002410AED98E0>],
             '$538get_iter.6': [<numba.core.ir.Assign object at 0x000002410AED9A00>],
             '$540for_iter.1': [<numba.core.ir.Assign object at 0x000002410AED9D30>],
             '$540for_iter.2': [<numba.core.ir.Assign object at 0x000002410AED9E50>],
             '$540for_iter.3': [<numba.core.ir.Assign object at 0x000002410AED9F70>],
             '$54binary_multiply.23': [<numba.core.ir.Assign object at 0x0000024108C7D130>],
             '$558binary_subscr.9': [<numba.core.ir.Assign object at 0x000002410AEDBCD0>],
             '$566binary_floor_divide.13': [<numba.core.ir.Assign object at 0x000002410AEDD2B0>],
             '$568binary_power.14': [<numba.core.ir.Assign object at 0x000002410AEDD430>],
             '$56binary_add.24': [<numba.core.ir.Assign object at 0x0000024108C7D2B0>],
             '$570inplace_multiply.15': [<numba.core.ir.Assign object at 0x000002410AEDD5B0>],
             '$582return_value.1': [<numba.core.ir.Assign object at 0x000002410AED9BE0>],
             '$64load_global.27': [<numba.core.ir.Assign object at 0x0000024108C7D7C0>],
             '$66load_method.28': [<numba.core.ir.Assign object at 0x0000024108C7D940>],
             '$68load_global.29': [<numba.core.ir.Assign object at 0x0000024108C7DAC0>],
             '$70load_method.30': [<numba.core.ir.Assign object at 0x0000024108C7DC40>],
             '$74build_list.32': [<numba.core.ir.Assign object at 0x0000024108C7DF10>],
             '$76call_method.33': [<numba.core.ir.Assign object at 0x0000024108C80130>],
             '$80build_tuple.35': [<numba.core.ir.Assign object at 0x0000024108C80370>],
             '$86load_global.37': [<numba.core.ir.Assign object at 0x0000024108C80760>],
             '$88load_method.38': [<numba.core.ir.Assign object at 0x0000024108C808E0>],
             '$94binary_add.41': [<numba.core.ir.Assign object at 0x0000024108C80D30>],
             '$const12.4': [<numba.core.ir.Assign object at 0x0000024108C77280>],
             '$const124.53': [<numba.core.ir.Assign object at 0x0000024108C851C0>],
             '$const134.58': [<numba.core.ir.Assign object at 0x0000024108C85880>],
             '$const14.5': [<numba.core.ir.Assign object at 0x0000024108C77400>],
             '$const16.6': [<numba.core.ir.Assign object at 0x0000024108C77580>],
             '$const168.4': [<numba.core.ir.Assign object at 0x0000024108C87C40>],
             '$const178.9': [<numba.core.ir.Assign object at 0x0000024108C8B340>],
             '$const216.24': [<numba.core.ir.Assign object at 0x0000024108C8EDC0>],
             '$const220.26': [<numba.core.ir.Assign object at 0x0000024108C8F0A0>],
             '$const264.1': [<numba.core.ir.Assign object at 0x0000024108C91E80>],
             '$const30.13': [<numba.core.ir.Assign object at 0x0000024108C7A0A0>],
             '$const350.32': [<numba.core.ir.Assign object at 0x0000024108C9A8E0>],
             '$const354.34': [<numba.core.ir.Assign object at 0x0000024108C9AB80>],
             '$const36.15': [<numba.core.ir.Assign object at 0x0000024108C7A4C0>],
             '$const360.37': [<numba.core.ir.Assign object at 0x0000024108C9C040>],
             '$const370.42': [<numba.core.ir.Assign object at 0x0000024108C9C700>],
             '$const390.6': [<numba.core.ir.Assign object at 0x0000024108C9E220>],
             '$const394.8': [<numba.core.ir.Assign object at 0x0000024108C9E4C0>],
             '$const4.1': [<numba.core.ir.Assign object at 0x0000024108C2BD00>],
             '$const410.15': [<numba.core.ir.Assign object at 0x0000024108C9EF40>],
             '$const416.18': [<numba.core.ir.Assign object at 0x000002410AED03A0>],
             '$const432.25': [<numba.core.ir.Assign object at 0x000002410AED0E80>],
             '$const436.27': [<numba.core.ir.Assign object at 0x000002410AED21C0>],
             '$const462.12': [<numba.core.ir.Assign object at 0x000002410AED2FA0>],
             '$const50.21': [<numba.core.ir.Assign object at 0x0000024108C7AE20>],
             '$const532.3': [<numba.core.ir.Assign object at 0x000002410AED9580>],
             '$const560.10': [<numba.core.ir.Assign object at 0x000002410AEDBE20>],
             '$const564.12': [<numba.core.ir.Assign object at 0x000002410AEDD100>],
             '$const92.40': [<numba.core.ir.Assign object at 0x0000024108C80B80>],
             '$phi158.0': [<numba.core.ir.Assign object at 0x0000024108C77100>],
             '$phi162.1': [<numba.core.ir.Assign object at 0x0000024108C7ACA0>],
             '$phi228.1': [<numba.core.ir.Assign object at 0x0000024108C87DF0>],
             '$phi230.2': [<numba.core.ir.Assign object at 0x0000024108C8E490>],
             '$phi378.1': [<numba.core.ir.Assign object at 0x0000024108C95D90>],
             '$phi380.2': [<numba.core.ir.Assign object at 0x0000024108C97A30>],
             '$phi540.0': [<numba.core.ir.Assign object at 0x000002410AED9280>],
             '$phi542.1': [<numba.core.ir.Assign object at 0x000002410AED9C70>],
             'A': [<numba.core.ir.Assign object at 0x0000024108C2B730>],
             'AX_S': [<numba.core.ir.Assign object at 0x0000024108C95700>],
             'D': [<numba.core.ir.Assign object at 0x0000024108C2B850>],
             'D_S': [<numba.core.ir.Assign object at 0x0000024108C95940>],
             'E': [<numba.core.ir.Assign object at 0x0000024108C95EE0>],
             'H_batch': [<numba.core.ir.Assign object at 0x0000024108C871C0>,
                         <numba.core.ir.Assign object at 0x000002410AED7A90>],
             'Hnew': [<numba.core.ir.Assign object at 0x0000024108C8BC40>],
             'N': [<numba.core.ir.Assign object at 0x0000024108C9CF70>],
             'N_det': [<numba.core.ir.Assign object at 0x0000024108C9C1F0>],
             'N_fixed': [<numba.core.ir.Assign object at 0x0000024108C7AA90>],
             'N_max': [<numba.core.ir.Assign object at 0x0000024108C7D550>],
             'XD_S': [<numba.core.ir.Assign object at 0x0000024108C95820>],
             'batch_max': [<numba.core.ir.Assign object at 0x0000024108C2B0D0>],
             'binom_prod': [<numba.core.ir.Assign object at 0x0000024108C8E9A0>,
                            <numba.core.ir.Assign object at 0x0000024108C91970>],
             'binoms': [<numba.core.ir.Assign object at 0x0000024108C83C40>],
             'bool260': [<numba.core.ir.Assign object at 0x0000024108C91B20>],
             'bool440': [<numba.core.ir.Assign object at 0x000002410AED24C0>],
             'bool522': [<numba.core.ir.Assign object at 0x000002410AED7DC0>],
             'delta': [<numba.core.ir.Assign object at 0x0000024108C93430>,
                       <numba.core.ir.Assign object at 0x0000024108C93790>],
             'edge_reps': [<numba.core.ir.Assign object at 0x0000024108C80550>],
             'edges_sum': [<numba.core.ir.Assign object at 0x0000024108C8E790>],
             'f_even': [<numba.core.ir.Assign object at 0x0000024108C978E0>],
             'f_odd': [<numba.core.ir.Assign object at 0x0000024108C9A520>],
             'fixed_edge_reps': [<numba.core.ir.Assign object at 0x0000024108C2B550>],
             'glynn': [<numba.core.ir.Assign object at 0x0000024108C2BA60>],
             'i': [<numba.core.ir.Assign object at 0x0000024108C8FA00>],
             'j': [<numba.core.ir.Assign object at 0x0000024108C85610>,
                   <numba.core.ir.Assign object at 0x000002410AEDB250>],
             'kept_edges': [<numba.core.ir.Assign object at 0x0000024108C8E220>],
             'max_binom': [<numba.core.ir.Assign object at 0x0000024108C836D0>],
             'n': [<numba.core.ir.Assign object at 0x000002410AEDDC10>],
             'n_det_binom_prod': [<numba.core.ir.Assign object at 0x000002410AED0AF0>],
             'oddV': [<numba.core.ir.Assign object at 0x000002410AEDDB20>],
             'oddVX_S': [<numba.core.ir.Assign object at 0x0000024108C95A60>],
             'odd_cutoff': [<numba.core.ir.Assign object at 0x0000024108C2B940>],
             'oddloop': [<numba.core.ir.Assign object at 0x000002410AEDDA90>],
             'plus_minus': [<numba.core.ir.Assign object at 0x0000024108C9EA90>],
             'steps': [<numba.core.ir.Assign object at 0x0000024108C80F10>],
             'x': [<numba.core.ir.Assign object at 0x000002410AEDB610>]})
DEBUG 2022-01-28 15:49:16,322 SSA violators {'binom_prod', 'j', 'H_batch', 'delta'}
DEBUG 2022-01-28 15:49:16,322 Fix SSA violator on var binom_prod
DEBUG 2022-01-28 15:49:16,322 ==== SSA block rewrite pass on 0
DEBUG 2022-01-28 15:49:16,322 Running <numba.core.ssa._FreshVarHandler object at 0x000002410AEDDD00>
DEBUG 2022-01-28 15:49:16,322 on stmt: A = arg(0, name=A)
DEBUG 2022-01-28 15:49:16,322 on stmt: D = arg(1, name=D)
DEBUG 2022-01-28 15:49:16,322 on stmt: fixed_edge_reps = arg(2, name=fixed_edge_reps)
DEBUG 2022-01-28 15:49:16,322 on stmt: batch_max = arg(3, name=batch_max)
DEBUG 2022-01-28 15:49:16,322 on stmt: odd_cutoff = arg(4, name=odd_cutoff)
DEBUG 2022-01-28 15:49:16,322 on stmt: glynn = arg(5, name=glynn)
DEBUG 2022-01-28 15:49:16,322 on stmt: $const4.1 = const(int, 0)
DEBUG 2022-01-28 15:49:16,322 on stmt: oddloop = static_getitem(value=D, index=0, index_var=$const4.1, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:16,322 on stmt: $const12.4 = const(int, 0)
DEBUG 2022-01-28 15:49:16,322 on stmt: $const14.5 = const(NoneType, None)
DEBUG 2022-01-28 15:49:16,322 on stmt: $const16.6 = const(NoneType, None)
DEBUG 2022-01-28 15:49:16,322 on stmt: $18build_slice.7 = global(slice: <class 'slice'>)
DEBUG 2022-01-28 15:49:16,322 on stmt: $18build_slice.8 = call $18build_slice.7($const14.5, $const16.6, func=$18build_slice.7, args=(Var($const14.5, loop_hafnian_batch.py:25), Var($const16.6, loop_hafnian_batch.py:25)), kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:16,322 on stmt: $20build_tuple.9 = build_tuple(items=[Var($const12.4, loop_hafnian_batch.py:25), Var($18build_slice.8, loop_hafnian_batch.py:25)])
DEBUG 2022-01-28 15:49:16,322 on stmt: oddV = static_getitem(value=A, index=(0, slice(None, None, None)), index_var=$20build_tuple.9, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:16,322 on stmt: $28load_attr.12 = getattr(value=A, attr=shape)
DEBUG 2022-01-28 15:49:16,322 on stmt: $const30.13 = const(int, 0)
DEBUG 2022-01-28 15:49:16,322 on stmt: n = static_getitem(value=$28load_attr.12, index=0, index_var=$const30.13, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:16,322 on stmt: $const36.15 = const(int, 2)
DEBUG 2022-01-28 15:49:16,322 on stmt: $40load_method.17 = getattr(value=fixed_edge_reps, attr=sum)
DEBUG 2022-01-28 15:49:16,322 on stmt: $42call_method.18 = call $40load_method.17(func=$40load_method.17, args=[], kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:16,322 on stmt: N_fixed = $const36.15 * $42call_method.18
DEBUG 2022-01-28 15:49:16,322 on stmt: $const50.21 = const(int, 2)
DEBUG 2022-01-28 15:49:16,322 on stmt: $54binary_multiply.23 = $const50.21 * batch_max
DEBUG 2022-01-28 15:49:16,322 on stmt: $56binary_add.24 = N_fixed + $54binary_multiply.23
DEBUG 2022-01-28 15:49:16,322 on stmt: N_max = $56binary_add.24 + odd_cutoff
DEBUG 2022-01-28 15:49:16,322 on stmt: $64load_global.27 = global(np: <module 'numpy' from 'C:\\Users\\zl4821\\Anaconda3\\envs\\GBS\\lib\\site-packages\\numpy\\__init__.py'>)
DEBUG 2022-01-28 15:49:16,322 on stmt: $66load_method.28 = getattr(value=$64load_global.27, attr=concatenate)
DEBUG 2022-01-28 15:49:16,322 on stmt: $68load_global.29 = global(np: <module 'numpy' from 'C:\\Users\\zl4821\\Anaconda3\\envs\\GBS\\lib\\site-packages\\numpy\\__init__.py'>)
DEBUG 2022-01-28 15:49:16,322 on stmt: $70load_method.30 = getattr(value=$68load_global.29, attr=array)
DEBUG 2022-01-28 15:49:16,322 on stmt: $74build_list.32 = build_list(items=[Var(batch_max, loop_hafnian_batch.py:24)])
DEBUG 2022-01-28 15:49:16,322 on stmt: $76call_method.33 = call $70load_method.30($74build_list.32, func=$70load_method.30, args=[Var($74build_list.32, loop_hafnian_batch.py:32)], kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:16,322 on stmt: $80build_tuple.35 = build_tuple(items=[Var($76call_method.33, loop_hafnian_batch.py:32), Var(fixed_edge_reps, loop_hafnian_batch.py:24)])
DEBUG 2022-01-28 15:49:16,322 on stmt: edge_reps = call $66load_method.28($80build_tuple.35, func=$66load_method.28, args=[Var($80build_tuple.35, loop_hafnian_batch.py:32)], kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:16,322 on stmt: $86load_global.37 = global(np: <module 'numpy' from 'C:\\Users\\zl4821\\Anaconda3\\envs\\GBS\\lib\\site-packages\\numpy\\__init__.py'>)
DEBUG 2022-01-28 15:49:16,322 on stmt: $88load_method.38 = getattr(value=$86load_global.37, attr=prod)
DEBUG 2022-01-28 15:49:16,322 on stmt: $const92.40 = const(int, 1)
DEBUG 2022-01-28 15:49:16,322 on stmt: $94binary_add.41 = edge_reps + $const92.40
DEBUG 2022-01-28 15:49:16,322 on stmt: steps = call $88load_method.38($94binary_add.41, func=$88load_method.38, args=[Var($94binary_add.41, loop_hafnian_batch.py:33)], kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:16,322 on stmt: $102load_method.44 = getattr(value=edge_reps, attr=max)
DEBUG 2022-01-28 15:49:16,322 on stmt: $104call_method.45 = call $102load_method.44(func=$102load_method.44, args=[], kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:16,322 on stmt: max_binom = $104call_method.45 + odd_cutoff
DEBUG 2022-01-28 15:49:16,322 on stmt: $112load_global.48 = global(precompute_binoms: CPUDispatcher(<function precompute_binoms at 0x00000241074240D0>))
DEBUG 2022-01-28 15:49:16,322 on stmt: binoms = call $112load_global.48(max_binom, func=$112load_global.48, args=[Var(max_binom, loop_hafnian_batch.py:35)], kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:16,322 on stmt: $120load_global.51 = global(np: <module 'numpy' from 'C:\\Users\\zl4821\\Anaconda3\\envs\\GBS\\lib\\site-packages\\numpy\\__init__.py'>)
DEBUG 2022-01-28 15:49:16,322 on stmt: $122load_attr.52 = getattr(value=$120load_global.51, attr=zeros)
DEBUG 2022-01-28 15:49:16,322 on stmt: $const124.53 = const(int, 2)
DEBUG 2022-01-28 15:49:16,322 on stmt: $128binary_multiply.55 = $const124.53 * batch_max
DEBUG 2022-01-28 15:49:16,322 on stmt: $132binary_add.57 = $128binary_multiply.55 + odd_cutoff
DEBUG 2022-01-28 15:49:16,322 on stmt: $const134.58 = const(int, 1)
DEBUG 2022-01-28 15:49:16,322 on stmt: $136binary_add.59 = $132binary_add.57 + $const134.58
DEBUG 2022-01-28 15:49:16,330 on stmt: $138load_global.60 = global(np: <module 'numpy' from 'C:\\Users\\zl4821\\Anaconda3\\envs\\GBS\\lib\\site-packages\\numpy\\__init__.py'>)
DEBUG 2022-01-28 15:49:16,330 on stmt: $140load_attr.61 = getattr(value=$138load_global.60, attr=complex128)
DEBUG 2022-01-28 15:49:16,330 on stmt: H_batch = call $122load_attr.52($136binary_add.59, func=$122load_attr.52, args=[Var($136binary_add.59, loop_hafnian_batch.py:38)], kws=[('dtype', Var($140load_attr.61, loop_hafnian_batch.py:38))], vararg=None, target=None)
DEBUG 2022-01-28 15:49:16,330 on stmt: $148load_global.64 = global(numba: <module 'numba' from 'C:\\Users\\zl4821\\Anaconda3\\envs\\GBS\\lib\\site-packages\\numba\\__init__.py'>)
DEBUG 2022-01-28 15:49:16,330 on stmt: $150load_method.65 = getattr(value=$148load_global.64, attr=prange)
DEBUG 2022-01-28 15:49:16,330 on stmt: $154call_method.67 = call $150load_method.65(steps, func=$150load_method.65, args=[Var(steps, loop_hafnian_batch.py:33)], kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:16,330 on stmt: $156get_iter.68 = getiter(value=$154call_method.67)
DEBUG 2022-01-28 15:49:16,330 on stmt: $phi158.0 = $156get_iter.68
DEBUG 2022-01-28 15:49:16,330 on stmt: jump 158
DEBUG 2022-01-28 15:49:16,330 ==== SSA block rewrite pass on 158
DEBUG 2022-01-28 15:49:16,330 Running <numba.core.ssa._FreshVarHandler object at 0x000002410AEDDD00>
DEBUG 2022-01-28 15:49:16,330 on stmt: $158for_iter.1 = iternext(value=$phi158.0)
DEBUG 2022-01-28 15:49:16,330 on stmt: $158for_iter.2 = pair_first(value=$158for_iter.1)
DEBUG 2022-01-28 15:49:16,330 on stmt: $158for_iter.3 = pair_second(value=$158for_iter.1)
DEBUG 2022-01-28 15:49:16,330 on stmt: $phi162.1 = $158for_iter.2
DEBUG 2022-01-28 15:49:16,330 on stmt: branch $158for_iter.3, 162, 520
DEBUG 2022-01-28 15:49:16,332 ==== SSA block rewrite pass on 162
DEBUG 2022-01-28 15:49:16,332 Running <numba.core.ssa._FreshVarHandler object at 0x000002410AEDDD00>
DEBUG 2022-01-28 15:49:16,332 on stmt: j = $phi162.1
DEBUG 2022-01-28 15:49:16,332 on stmt: $164load_global.2 = global(np: <module 'numpy' from 'C:\\Users\\zl4821\\Anaconda3\\envs\\GBS\\lib\\site-packages\\numpy\\__init__.py'>)
DEBUG 2022-01-28 15:49:16,332 on stmt: $166load_attr.3 = getattr(value=$164load_global.2, attr=zeros)
DEBUG 2022-01-28 15:49:16,332 on stmt: $const168.4 = const(int, 2)
DEBUG 2022-01-28 15:49:16,332 on stmt: $172binary_multiply.6 = $const168.4 * batch_max
DEBUG 2022-01-28 15:49:16,332 on stmt: $176binary_add.8 = $172binary_multiply.6 + odd_cutoff
DEBUG 2022-01-28 15:49:16,332 on stmt: $const178.9 = const(int, 1)
DEBUG 2022-01-28 15:49:16,332 on stmt: $180binary_add.10 = $176binary_add.8 + $const178.9
DEBUG 2022-01-28 15:49:16,332 on stmt: $182load_global.11 = global(np: <module 'numpy' from 'C:\\Users\\zl4821\\Anaconda3\\envs\\GBS\\lib\\site-packages\\numpy\\__init__.py'>)
DEBUG 2022-01-28 15:49:16,332 on stmt: $184load_attr.12 = getattr(value=$182load_global.11, attr=complex128)
DEBUG 2022-01-28 15:49:16,332 on stmt: Hnew = call $166load_attr.3($180binary_add.10, func=$166load_attr.3, args=[Var($180binary_add.10, loop_hafnian_batch.py:41)], kws=[('dtype', Var($184load_attr.12, loop_hafnian_batch.py:41))], vararg=None, target=None)
DEBUG 2022-01-28 15:49:16,332 on stmt: $192load_global.15 = global(find_kept_edges: CPUDispatcher(<function find_kept_edges at 0x0000024107424550>))
DEBUG 2022-01-28 15:49:16,332 on stmt: kept_edges = call $192load_global.15(j, edge_reps, func=$192load_global.15, args=[Var(j, loop_hafnian_batch.py:39), Var(edge_reps, loop_hafnian_batch.py:32)], kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:16,332 on stmt: $204load_method.20 = getattr(value=kept_edges, attr=sum)
DEBUG 2022-01-28 15:49:16,332 on stmt: edges_sum = call $204load_method.20(func=$204load_method.20, args=[], kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:16,332 on stmt: binom_prod = const(float, 1.0)
DEBUG 2022-01-28 15:49:16,332 first assign: binom_prod
DEBUG 2022-01-28 15:49:16,332 replaced with: binom_prod = const(float, 1.0)
DEBUG 2022-01-28 15:49:16,332 on stmt: $214load_global.23 = global(range: <class 'range'>)
DEBUG 2022-01-28 15:49:16,332 on stmt: $const216.24 = const(int, 1)
DEBUG 2022-01-28 15:49:16,332 on stmt: $const220.26 = const(int, 2)
DEBUG 2022-01-28 15:49:16,332 on stmt: $222binary_floor_divide.27 = n // $const220.26
DEBUG 2022-01-28 15:49:16,332 on stmt: $224call_function.28 = call $214load_global.23($const216.24, $222binary_floor_divide.27, func=$214load_global.23, args=[Var($const216.24, loop_hafnian_batch.py:47), Var($222binary_floor_divide.27, loop_hafnian_batch.py:47)], kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:16,332 on stmt: $226get_iter.29 = getiter(value=$224call_function.28)
DEBUG 2022-01-28 15:49:16,332 on stmt: $phi228.1 = $226get_iter.29
DEBUG 2022-01-28 15:49:16,332 on stmt: jump 228
DEBUG 2022-01-28 15:49:16,332 ==== SSA block rewrite pass on 228
DEBUG 2022-01-28 15:49:16,332 Running <numba.core.ssa._FreshVarHandler object at 0x000002410AEDDD00>
DEBUG 2022-01-28 15:49:16,332 on stmt: $228for_iter.2 = iternext(value=$phi228.1)
DEBUG 2022-01-28 15:49:16,332 on stmt: $228for_iter.3 = pair_first(value=$228for_iter.2)
DEBUG 2022-01-28 15:49:16,332 on stmt: $228for_iter.4 = pair_second(value=$228for_iter.2)
DEBUG 2022-01-28 15:49:16,332 on stmt: $phi230.2 = $228for_iter.3
DEBUG 2022-01-28 15:49:16,332 on stmt: branch $228for_iter.4, 230, 258
DEBUG 2022-01-28 15:49:16,332 ==== SSA block rewrite pass on 230
DEBUG 2022-01-28 15:49:16,332 Running <numba.core.ssa._FreshVarHandler object at 0x000002410AEDDD00>
DEBUG 2022-01-28 15:49:16,332 on stmt: i = $phi230.2
DEBUG 2022-01-28 15:49:16,332 on stmt: $240binary_subscr.7 = getitem(value=edge_reps, index=i, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:16,332 on stmt: $246binary_subscr.10 = getitem(value=kept_edges, index=i, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:16,332 on stmt: $248build_tuple.11 = build_tuple(items=[Var($240binary_subscr.7, loop_hafnian_batch.py:48), Var($246binary_subscr.10, loop_hafnian_batch.py:48)])
DEBUG 2022-01-28 15:49:16,332 on stmt: $250binary_subscr.12 = getitem(value=binoms, index=$248build_tuple.11, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:16,332 on stmt: $252inplace_multiply.13 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=binom_prod, rhs=$250binary_subscr.12, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-01-28 15:49:16,332 on stmt: binom_prod = $252inplace_multiply.13
DEBUG 2022-01-28 15:49:16,332 replaced with: binom_prod.1 = $252inplace_multiply.13
DEBUG 2022-01-28 15:49:16,332 on stmt: jump 228
DEBUG 2022-01-28 15:49:16,332 ==== SSA block rewrite pass on 258
DEBUG 2022-01-28 15:49:16,332 Running <numba.core.ssa._FreshVarHandler object at 0x000002410AEDDD00>
DEBUG 2022-01-28 15:49:16,332 on stmt: bool260 = global(bool: <class 'bool'>)
DEBUG 2022-01-28 15:49:16,332 on stmt: $260pred = call bool260(glynn, func=bool260, args=(Var(glynn, loop_hafnian_batch.py:24),), kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:16,332 on stmt: branch $260pred, 264, 278
DEBUG 2022-01-28 15:49:16,332 ==== SSA block rewrite pass on 264
DEBUG 2022-01-28 15:49:16,332 Running <numba.core.ssa._FreshVarHandler object at 0x000002410AEDDD00>
DEBUG 2022-01-28 15:49:16,332 on stmt: $const264.1 = const(int, 2)
DEBUG 2022-01-28 15:49:16,332 on stmt: $268binary_multiply.3 = $const264.1 * kept_edges
DEBUG 2022-01-28 15:49:16,332 on stmt: delta = $268binary_multiply.3 - edge_reps
DEBUG 2022-01-28 15:49:16,332 on stmt: jump 282
DEBUG 2022-01-28 15:49:16,332 ==== SSA block rewrite pass on 278
DEBUG 2022-01-28 15:49:16,332 Running <numba.core.ssa._FreshVarHandler object at 0x000002410AEDDD00>
DEBUG 2022-01-28 15:49:16,332 on stmt: delta = kept_edges
DEBUG 2022-01-28 15:49:16,332 on stmt: jump 282
DEBUG 2022-01-28 15:49:16,332 ==== SSA block rewrite pass on 282
DEBUG 2022-01-28 15:49:16,332 Running <numba.core.ssa._FreshVarHandler object at 0x000002410AEDDD00>
DEBUG 2022-01-28 15:49:16,332 on stmt: $282load_global.1 = global(get_submatrices: CPUDispatcher(<function get_submatrices at 0x0000024107424E50>))
DEBUG 2022-01-28 15:49:16,332 on stmt: $292call_function.6 = call $282load_global.1(delta, A, D, oddV, func=$282load_global.1, args=[Var(delta, loop_hafnian_batch.py:51), Var(A, loop_hafnian_batch.py:24), Var(D, loop_hafnian_batch.py:24), Var(oddV, loop_hafnian_batch.py:25)], kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:16,332 on stmt: $294unpack_sequence.11 = exhaust_iter(value=$292call_function.6, count=4)
DEBUG 2022-01-28 15:49:16,332 on stmt: $294unpack_sequence.7 = static_getitem(value=$294unpack_sequence.11, index=0, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:16,332 on stmt: $294unpack_sequence.8 = static_getitem(value=$294unpack_sequence.11, index=1, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:16,332 on stmt: $294unpack_sequence.9 = static_getitem(value=$294unpack_sequence.11, index=2, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:16,332 on stmt: $294unpack_sequence.10 = static_getitem(value=$294unpack_sequence.11, index=3, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:16,332 on stmt: AX_S = $294unpack_sequence.7
DEBUG 2022-01-28 15:49:16,332 on stmt: XD_S = $294unpack_sequence.8
DEBUG 2022-01-28 15:49:16,332 on stmt: D_S = $294unpack_sequence.9
DEBUG 2022-01-28 15:49:16,332 on stmt: oddVX_S = $294unpack_sequence.10
DEBUG 2022-01-28 15:49:16,332 on stmt: $304load_global.12 = global(eigvals: CPUDispatcher(<function eigvals at 0x00000241074303A0>))
DEBUG 2022-01-28 15:49:16,340 on stmt: E = call $304load_global.12(AX_S, func=$304load_global.12, args=[Var(AX_S, loop_hafnian_batch.py:55)], kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:16,340 on stmt: $312load_global.15 = global(f_loop: CPUDispatcher(<function f_loop at 0x00000241074248B0>))
DEBUG 2022-01-28 15:49:16,340 on stmt: f_even = call $312load_global.15(E, AX_S, XD_S, D_S, N_max, func=$312load_global.15, args=[Var(E, loop_hafnian_batch.py:57), Var(AX_S, loop_hafnian_batch.py:55), Var(XD_S, loop_hafnian_batch.py:55), Var(D_S, loop_hafnian_batch.py:55), Var(N_max, loop_hafnian_batch.py:30)], kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:16,340 on stmt: $328load_global.22 = global(f_loop_odd: CPUDispatcher(<function f_loop_odd at 0x0000024107424AF0>))
DEBUG 2022-01-28 15:49:16,340 on stmt: f_odd = call $328load_global.22(E, AX_S, XD_S, D_S, N_max, oddloop, oddVX_S, func=$328load_global.22, args=[Var(E, loop_hafnian_batch.py:57), Var(AX_S, loop_hafnian_batch.py:55), Var(XD_S, loop_hafnian_batch.py:55), Var(D_S, loop_hafnian_batch.py:55), Var(N_max, loop_hafnian_batch.py:30), Var(oddloop, loop_hafnian_batch.py:24), Var(oddVX_S, loop_hafnian_batch.py:55)], kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:16,340 on stmt: $348load_global.31 = global(range: <class 'range'>)
DEBUG 2022-01-28 15:49:16,340 on stmt: $const350.32 = const(int, 2)
DEBUG 2022-01-28 15:49:16,340 on stmt: $const354.34 = const(int, 0)
DEBUG 2022-01-28 15:49:16,340 on stmt: $356binary_subscr.35 = static_getitem(value=kept_edges, index=0, index_var=$const354.34, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:16,340 on stmt: $358binary_multiply.36 = $const350.32 * $356binary_subscr.35
DEBUG 2022-01-28 15:49:16,340 on stmt: $const360.37 = const(int, 2)
DEBUG 2022-01-28 15:49:16,340 on stmt: $364binary_multiply.39 = $const360.37 * batch_max
DEBUG 2022-01-28 15:49:16,340 on stmt: $368binary_add.41 = $364binary_multiply.39 + odd_cutoff
DEBUG 2022-01-28 15:49:16,340 on stmt: $const370.42 = const(int, 1)
DEBUG 2022-01-28 15:49:16,340 on stmt: $372binary_add.43 = $368binary_add.41 + $const370.42
DEBUG 2022-01-28 15:49:16,340 on stmt: $374call_function.44 = call $348load_global.31($358binary_multiply.36, $372binary_add.43, func=$348load_global.31, args=[Var($358binary_multiply.36, loop_hafnian_batch.py:64), Var($372binary_add.43, loop_hafnian_batch.py:64)], kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:16,342 on stmt: $376get_iter.45 = getiter(value=$374call_function.44)
DEBUG 2022-01-28 15:49:16,342 on stmt: $phi378.1 = $376get_iter.45
DEBUG 2022-01-28 15:49:16,342 on stmt: jump 378
DEBUG 2022-01-28 15:49:16,342 ==== SSA block rewrite pass on 378
DEBUG 2022-01-28 15:49:16,342 Running <numba.core.ssa._FreshVarHandler object at 0x000002410AEDDD00>
DEBUG 2022-01-28 15:49:16,342 on stmt: $378for_iter.2 = iternext(value=$phi378.1)
DEBUG 2022-01-28 15:49:16,342 on stmt: $378for_iter.3 = pair_first(value=$378for_iter.2)
DEBUG 2022-01-28 15:49:16,342 on stmt: $378for_iter.4 = pair_second(value=$378for_iter.2)
DEBUG 2022-01-28 15:49:16,342 on stmt: $phi380.2 = $378for_iter.3
DEBUG 2022-01-28 15:49:16,342 on stmt: branch $378for_iter.4, 380, 510
DEBUG 2022-01-28 15:49:16,342 ==== SSA block rewrite pass on 380
DEBUG 2022-01-28 15:49:16,342 Running <numba.core.ssa._FreshVarHandler object at 0x000002410AEDDD00>
DEBUG 2022-01-28 15:49:16,342 on stmt: N_det = $phi380.2
DEBUG 2022-01-28 15:49:16,342 on stmt: N = N_fixed + N_det
DEBUG 2022-01-28 15:49:16,342 on stmt: $const390.6 = const(float, -1.0)
DEBUG 2022-01-28 15:49:16,342 on stmt: $const394.8 = const(int, 2)
DEBUG 2022-01-28 15:49:16,342 on stmt: $396binary_floor_divide.9 = N // $const394.8
DEBUG 2022-01-28 15:49:16,342 on stmt: $400binary_subtract.11 = $396binary_floor_divide.9 - edges_sum
DEBUG 2022-01-28 15:49:16,342 on stmt: plus_minus = $const390.6 ** $400binary_subtract.11
DEBUG 2022-01-28 15:49:16,342 on stmt: $const410.15 = const(int, 2)
DEBUG 2022-01-28 15:49:16,342 on stmt: $412binary_floor_divide.16 = N_det // $const410.15
DEBUG 2022-01-28 15:49:16,342 on stmt: $const416.18 = const(int, 0)
DEBUG 2022-01-28 15:49:16,342 on stmt: $418binary_subscr.19 = static_getitem(value=kept_edges, index=0, index_var=$const416.18, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:16,342 on stmt: $420build_tuple.20 = build_tuple(items=[Var($412binary_floor_divide.16, loop_hafnian_batch.py:68), Var($418binary_subscr.19, loop_hafnian_batch.py:68)])
DEBUG 2022-01-28 15:49:16,342 on stmt: $422binary_subscr.21 = getitem(value=binoms, index=$420build_tuple.20, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:16,342 on stmt: n_det_binom_prod = $422binary_subscr.21 * binom_prod
DEBUG 2022-01-28 15:49:16,342 on stmt: $const432.25 = const(int, 2)
DEBUG 2022-01-28 15:49:16,342 on stmt: $434binary_modulo.26 = N_det % $const432.25
DEBUG 2022-01-28 15:49:16,342 on stmt: $const436.27 = const(int, 0)
DEBUG 2022-01-28 15:49:16,342 on stmt: $438compare_op.28 = $434binary_modulo.26 == $const436.27
DEBUG 2022-01-28 15:49:16,342 on stmt: bool440 = global(bool: <class 'bool'>)
DEBUG 2022-01-28 15:49:16,342 on stmt: $440pred = call bool440($438compare_op.28, func=bool440, args=(Var($438compare_op.28, loop_hafnian_batch.py:70),), kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:16,342 on stmt: branch $440pred, 444, 478
DEBUG 2022-01-28 15:49:16,342 ==== SSA block rewrite pass on 444
DEBUG 2022-01-28 15:49:16,342 Running <numba.core.ssa._FreshVarHandler object at 0x000002410AEDDD00>
DEBUG 2022-01-28 15:49:16,342 on stmt: $450binary_subscr.6 = getitem(value=Hnew, index=N_det, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:16,342 on stmt: $456binary_multiply.9 = n_det_binom_prod * plus_minus
DEBUG 2022-01-28 15:49:16,342 on stmt: $const462.12 = const(int, 2)
DEBUG 2022-01-28 15:49:16,342 on stmt: $464binary_floor_divide.13 = N // $const462.12
DEBUG 2022-01-28 15:49:16,342 on stmt: $466binary_subscr.14 = getitem(value=f_even, index=$464binary_floor_divide.13, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:16,342 on stmt: $468binary_multiply.15 = $456binary_multiply.9 * $466binary_subscr.14
DEBUG 2022-01-28 15:49:16,342 on stmt: $470inplace_add.16 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$450binary_subscr.6, rhs=$468binary_multiply.15, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-01-28 15:49:16,342 on stmt: Hnew[N_det] = $470inplace_add.16
DEBUG 2022-01-28 15:49:16,342 on stmt: jump 506
DEBUG 2022-01-28 15:49:16,342 ==== SSA block rewrite pass on 478
DEBUG 2022-01-28 15:49:16,342 Running <numba.core.ssa._FreshVarHandler object at 0x000002410AEDDD00>
DEBUG 2022-01-28 15:49:16,342 on stmt: $484binary_subscr.6 = getitem(value=Hnew, index=N_det, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:16,342 on stmt: $490binary_multiply.9 = n_det_binom_prod * plus_minus
DEBUG 2022-01-28 15:49:16,342 on stmt: $496binary_subscr.12 = getitem(value=f_odd, index=N, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:16,342 on stmt: $498binary_multiply.13 = $490binary_multiply.9 * $496binary_subscr.12
DEBUG 2022-01-28 15:49:16,342 on stmt: $500inplace_add.14 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$484binary_subscr.6, rhs=$498binary_multiply.13, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-01-28 15:49:16,342 on stmt: Hnew[N_det] = $500inplace_add.14
DEBUG 2022-01-28 15:49:16,342 on stmt: jump 506
DEBUG 2022-01-28 15:49:16,342 ==== SSA block rewrite pass on 506
DEBUG 2022-01-28 15:49:16,342 Running <numba.core.ssa._FreshVarHandler object at 0x000002410AEDDD00>
DEBUG 2022-01-28 15:49:16,342 on stmt: jump 378
DEBUG 2022-01-28 15:49:16,342 ==== SSA block rewrite pass on 510
DEBUG 2022-01-28 15:49:16,342 Running <numba.core.ssa._FreshVarHandler object at 0x000002410AEDDD00>
DEBUG 2022-01-28 15:49:16,342 on stmt: $514inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=H_batch, rhs=Hnew, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-01-28 15:49:16,342 on stmt: H_batch = $514inplace_add.3
DEBUG 2022-01-28 15:49:16,342 on stmt: jump 158
DEBUG 2022-01-28 15:49:16,342 ==== SSA block rewrite pass on 520
DEBUG 2022-01-28 15:49:16,342 Running <numba.core.ssa._FreshVarHandler object at 0x000002410AEDDD00>
DEBUG 2022-01-28 15:49:16,342 on stmt: bool522 = global(bool: <class 'bool'>)
DEBUG 2022-01-28 15:49:16,342 on stmt: $522pred = call bool522(glynn, func=bool522, args=(Var(glynn, loop_hafnian_batch.py:24),), kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:16,342 on stmt: branch $522pred, 526, 580
DEBUG 2022-01-28 15:49:16,342 ==== SSA block rewrite pass on 526
DEBUG 2022-01-28 15:49:16,342 Running <numba.core.ssa._FreshVarHandler object at 0x000002410AEDDD00>
DEBUG 2022-01-28 15:49:16,342 on stmt: $526load_global.0 = global(range: <class 'range'>)
DEBUG 2022-01-28 15:49:16,342 on stmt: $530load_attr.2 = getattr(value=H_batch, attr=shape)
DEBUG 2022-01-28 15:49:16,342 on stmt: $const532.3 = const(int, 0)
DEBUG 2022-01-28 15:49:16,342 on stmt: $534binary_subscr.4 = static_getitem(value=$530load_attr.2, index=0, index_var=$const532.3, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:16,342 on stmt: $536call_function.5 = call $526load_global.0($534binary_subscr.4, func=$526load_global.0, args=[Var($534binary_subscr.4, loop_hafnian_batch.py:78)], kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:16,342 on stmt: $538get_iter.6 = getiter(value=$536call_function.5)
DEBUG 2022-01-28 15:49:16,350 on stmt: $phi540.0 = $538get_iter.6
DEBUG 2022-01-28 15:49:16,350 on stmt: jump 540
DEBUG 2022-01-28 15:49:16,350 ==== SSA block rewrite pass on 540
DEBUG 2022-01-28 15:49:16,350 Running <numba.core.ssa._FreshVarHandler object at 0x000002410AEDDD00>
DEBUG 2022-01-28 15:49:16,350 on stmt: $540for_iter.1 = iternext(value=$phi540.0)
DEBUG 2022-01-28 15:49:16,350 on stmt: $540for_iter.2 = pair_first(value=$540for_iter.1)
DEBUG 2022-01-28 15:49:16,350 on stmt: $540for_iter.3 = pair_second(value=$540for_iter.1)
DEBUG 2022-01-28 15:49:16,350 on stmt: $phi542.1 = $540for_iter.2
DEBUG 2022-01-28 15:49:16,350 on stmt: branch $540for_iter.3, 542, 580
DEBUG 2022-01-28 15:49:16,350 ==== SSA block rewrite pass on 542
DEBUG 2022-01-28 15:49:16,350 Running <numba.core.ssa._FreshVarHandler object at 0x000002410AEDDD00>
DEBUG 2022-01-28 15:49:16,352 on stmt: j = $phi542.1
DEBUG 2022-01-28 15:49:16,352 on stmt: x = N_fixed + j
DEBUG 2022-01-28 15:49:16,352 on stmt: $558binary_subscr.9 = getitem(value=H_batch, index=j, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:16,352 on stmt: $const560.10 = const(float, 0.5)
DEBUG 2022-01-28 15:49:16,352 on stmt: $const564.12 = const(int, 2)
DEBUG 2022-01-28 15:49:16,352 on stmt: $566binary_floor_divide.13 = x // $const564.12
DEBUG 2022-01-28 15:49:16,352 on stmt: $568binary_power.14 = $const560.10 ** $566binary_floor_divide.13
DEBUG 2022-01-28 15:49:16,352 on stmt: $570inplace_multiply.15 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=$558binary_subscr.9, rhs=$568binary_power.14, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-01-28 15:49:16,352 on stmt: H_batch[j] = $570inplace_multiply.15
DEBUG 2022-01-28 15:49:16,352 on stmt: jump 540
DEBUG 2022-01-28 15:49:16,352 ==== SSA block rewrite pass on 580
DEBUG 2022-01-28 15:49:16,352 Running <numba.core.ssa._FreshVarHandler object at 0x000002410AEDDD00>
DEBUG 2022-01-28 15:49:16,352 on stmt: $582return_value.1 = cast(value=H_batch)
DEBUG 2022-01-28 15:49:16,352 on stmt: return $582return_value.1
DEBUG 2022-01-28 15:49:16,352 Replaced assignments: defaultdict(<class 'list'>,
            {162: [<numba.core.ir.Assign object at 0x000002410AEDDE80>],
             230: [<numba.core.ir.Assign object at 0x000002410AF22040>]})
DEBUG 2022-01-28 15:49:16,352 ==== SSA block rewrite pass on 0
DEBUG 2022-01-28 15:49:16,352 Running <numba.core.ssa._FixSSAVars object at 0x000002410AEDDD00>
DEBUG 2022-01-28 15:49:16,352 on stmt: A = arg(0, name=A)
DEBUG 2022-01-28 15:49:16,352 on stmt: D = arg(1, name=D)
DEBUG 2022-01-28 15:49:16,352 on stmt: fixed_edge_reps = arg(2, name=fixed_edge_reps)
DEBUG 2022-01-28 15:49:16,352 on stmt: batch_max = arg(3, name=batch_max)
DEBUG 2022-01-28 15:49:16,352 on stmt: odd_cutoff = arg(4, name=odd_cutoff)
DEBUG 2022-01-28 15:49:16,352 on stmt: glynn = arg(5, name=glynn)
DEBUG 2022-01-28 15:49:16,352 on stmt: $const4.1 = const(int, 0)
DEBUG 2022-01-28 15:49:16,352 on stmt: oddloop = static_getitem(value=D, index=0, index_var=$const4.1, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:16,352 on stmt: $const12.4 = const(int, 0)
DEBUG 2022-01-28 15:49:16,352 on stmt: $const14.5 = const(NoneType, None)
DEBUG 2022-01-28 15:49:16,352 on stmt: $const16.6 = const(NoneType, None)
DEBUG 2022-01-28 15:49:16,352 on stmt: $18build_slice.7 = global(slice: <class 'slice'>)
DEBUG 2022-01-28 15:49:16,352 on stmt: $18build_slice.8 = call $18build_slice.7($const14.5, $const16.6, func=$18build_slice.7, args=(Var($const14.5, loop_hafnian_batch.py:25), Var($const16.6, loop_hafnian_batch.py:25)), kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:16,352 on stmt: $20build_tuple.9 = build_tuple(items=[Var($const12.4, loop_hafnian_batch.py:25), Var($18build_slice.8, loop_hafnian_batch.py:25)])
DEBUG 2022-01-28 15:49:16,352 on stmt: oddV = static_getitem(value=A, index=(0, slice(None, None, None)), index_var=$20build_tuple.9, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:16,352 on stmt: $28load_attr.12 = getattr(value=A, attr=shape)
DEBUG 2022-01-28 15:49:16,352 on stmt: $const30.13 = const(int, 0)
DEBUG 2022-01-28 15:49:16,352 on stmt: n = static_getitem(value=$28load_attr.12, index=0, index_var=$const30.13, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:16,352 on stmt: $const36.15 = const(int, 2)
DEBUG 2022-01-28 15:49:16,352 on stmt: $40load_method.17 = getattr(value=fixed_edge_reps, attr=sum)
DEBUG 2022-01-28 15:49:16,352 on stmt: $42call_method.18 = call $40load_method.17(func=$40load_method.17, args=[], kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:16,352 on stmt: N_fixed = $const36.15 * $42call_method.18
DEBUG 2022-01-28 15:49:16,352 on stmt: $const50.21 = const(int, 2)
DEBUG 2022-01-28 15:49:16,352 on stmt: $54binary_multiply.23 = $const50.21 * batch_max
DEBUG 2022-01-28 15:49:16,352 on stmt: $56binary_add.24 = N_fixed + $54binary_multiply.23
DEBUG 2022-01-28 15:49:16,352 on stmt: N_max = $56binary_add.24 + odd_cutoff
DEBUG 2022-01-28 15:49:16,352 on stmt: $64load_global.27 = global(np: <module 'numpy' from 'C:\\Users\\zl4821\\Anaconda3\\envs\\GBS\\lib\\site-packages\\numpy\\__init__.py'>)
DEBUG 2022-01-28 15:49:16,352 on stmt: $66load_method.28 = getattr(value=$64load_global.27, attr=concatenate)
DEBUG 2022-01-28 15:49:16,360 on stmt: $68load_global.29 = global(np: <module 'numpy' from 'C:\\Users\\zl4821\\Anaconda3\\envs\\GBS\\lib\\site-packages\\numpy\\__init__.py'>)
DEBUG 2022-01-28 15:49:16,360 on stmt: $70load_method.30 = getattr(value=$68load_global.29, attr=array)
DEBUG 2022-01-28 15:49:16,360 on stmt: $74build_list.32 = build_list(items=[Var(batch_max, loop_hafnian_batch.py:24)])
DEBUG 2022-01-28 15:49:16,360 on stmt: $76call_method.33 = call $70load_method.30($74build_list.32, func=$70load_method.30, args=[Var($74build_list.32, loop_hafnian_batch.py:32)], kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:16,360 on stmt: $80build_tuple.35 = build_tuple(items=[Var($76call_method.33, loop_hafnian_batch.py:32), Var(fixed_edge_reps, loop_hafnian_batch.py:24)])
DEBUG 2022-01-28 15:49:16,360 on stmt: edge_reps = call $66load_method.28($80build_tuple.35, func=$66load_method.28, args=[Var($80build_tuple.35, loop_hafnian_batch.py:32)], kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:16,360 on stmt: $86load_global.37 = global(np: <module 'numpy' from 'C:\\Users\\zl4821\\Anaconda3\\envs\\GBS\\lib\\site-packages\\numpy\\__init__.py'>)
DEBUG 2022-01-28 15:49:16,360 on stmt: $88load_method.38 = getattr(value=$86load_global.37, attr=prod)
DEBUG 2022-01-28 15:49:16,360 on stmt: $const92.40 = const(int, 1)
DEBUG 2022-01-28 15:49:16,360 on stmt: $94binary_add.41 = edge_reps + $const92.40
DEBUG 2022-01-28 15:49:16,362 on stmt: steps = call $88load_method.38($94binary_add.41, func=$88load_method.38, args=[Var($94binary_add.41, loop_hafnian_batch.py:33)], kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:16,362 on stmt: $102load_method.44 = getattr(value=edge_reps, attr=max)
DEBUG 2022-01-28 15:49:16,362 on stmt: $104call_method.45 = call $102load_method.44(func=$102load_method.44, args=[], kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:16,362 on stmt: max_binom = $104call_method.45 + odd_cutoff
DEBUG 2022-01-28 15:49:16,362 on stmt: $112load_global.48 = global(precompute_binoms: CPUDispatcher(<function precompute_binoms at 0x00000241074240D0>))
DEBUG 2022-01-28 15:49:16,362 on stmt: binoms = call $112load_global.48(max_binom, func=$112load_global.48, args=[Var(max_binom, loop_hafnian_batch.py:35)], kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:16,362 on stmt: $120load_global.51 = global(np: <module 'numpy' from 'C:\\Users\\zl4821\\Anaconda3\\envs\\GBS\\lib\\site-packages\\numpy\\__init__.py'>)
DEBUG 2022-01-28 15:49:16,362 on stmt: $122load_attr.52 = getattr(value=$120load_global.51, attr=zeros)
DEBUG 2022-01-28 15:49:16,362 on stmt: $const124.53 = const(int, 2)
DEBUG 2022-01-28 15:49:16,362 on stmt: $128binary_multiply.55 = $const124.53 * batch_max
DEBUG 2022-01-28 15:49:16,362 on stmt: $132binary_add.57 = $128binary_multiply.55 + odd_cutoff
DEBUG 2022-01-28 15:49:16,362 on stmt: $const134.58 = const(int, 1)
DEBUG 2022-01-28 15:49:16,362 on stmt: $136binary_add.59 = $132binary_add.57 + $const134.58
DEBUG 2022-01-28 15:49:16,362 on stmt: $138load_global.60 = global(np: <module 'numpy' from 'C:\\Users\\zl4821\\Anaconda3\\envs\\GBS\\lib\\site-packages\\numpy\\__init__.py'>)
DEBUG 2022-01-28 15:49:16,362 on stmt: $140load_attr.61 = getattr(value=$138load_global.60, attr=complex128)
DEBUG 2022-01-28 15:49:16,362 on stmt: H_batch = call $122load_attr.52($136binary_add.59, func=$122load_attr.52, args=[Var($136binary_add.59, loop_hafnian_batch.py:38)], kws=[('dtype', Var($140load_attr.61, loop_hafnian_batch.py:38))], vararg=None, target=None)
DEBUG 2022-01-28 15:49:16,362 on stmt: $148load_global.64 = global(numba: <module 'numba' from 'C:\\Users\\zl4821\\Anaconda3\\envs\\GBS\\lib\\site-packages\\numba\\__init__.py'>)
DEBUG 2022-01-28 15:49:16,362 on stmt: $150load_method.65 = getattr(value=$148load_global.64, attr=prange)
DEBUG 2022-01-28 15:49:16,362 on stmt: $154call_method.67 = call $150load_method.65(steps, func=$150load_method.65, args=[Var(steps, loop_hafnian_batch.py:33)], kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:16,362 on stmt: $156get_iter.68 = getiter(value=$154call_method.67)
DEBUG 2022-01-28 15:49:16,362 on stmt: $phi158.0 = $156get_iter.68
DEBUG 2022-01-28 15:49:16,362 on stmt: jump 158
DEBUG 2022-01-28 15:49:16,362 ==== SSA block rewrite pass on 158
DEBUG 2022-01-28 15:49:16,362 Running <numba.core.ssa._FixSSAVars object at 0x000002410AEDDD00>
DEBUG 2022-01-28 15:49:16,362 on stmt: $158for_iter.1 = iternext(value=$phi158.0)
DEBUG 2022-01-28 15:49:16,362 on stmt: $158for_iter.2 = pair_first(value=$158for_iter.1)
DEBUG 2022-01-28 15:49:16,362 on stmt: $158for_iter.3 = pair_second(value=$158for_iter.1)
DEBUG 2022-01-28 15:49:16,362 on stmt: $phi162.1 = $158for_iter.2
DEBUG 2022-01-28 15:49:16,362 on stmt: branch $158for_iter.3, 162, 520
DEBUG 2022-01-28 15:49:16,362 ==== SSA block rewrite pass on 162
DEBUG 2022-01-28 15:49:16,362 Running <numba.core.ssa._FixSSAVars object at 0x000002410AEDDD00>
DEBUG 2022-01-28 15:49:16,362 on stmt: j = $phi162.1
DEBUG 2022-01-28 15:49:16,362 on stmt: $164load_global.2 = global(np: <module 'numpy' from 'C:\\Users\\zl4821\\Anaconda3\\envs\\GBS\\lib\\site-packages\\numpy\\__init__.py'>)
DEBUG 2022-01-28 15:49:16,362 on stmt: $166load_attr.3 = getattr(value=$164load_global.2, attr=zeros)
DEBUG 2022-01-28 15:49:16,362 on stmt: $const168.4 = const(int, 2)
DEBUG 2022-01-28 15:49:16,362 on stmt: $172binary_multiply.6 = $const168.4 * batch_max
DEBUG 2022-01-28 15:49:16,362 on stmt: $176binary_add.8 = $172binary_multiply.6 + odd_cutoff
DEBUG 2022-01-28 15:49:16,362 on stmt: $const178.9 = const(int, 1)
DEBUG 2022-01-28 15:49:16,362 on stmt: $180binary_add.10 = $176binary_add.8 + $const178.9
DEBUG 2022-01-28 15:49:16,362 on stmt: $182load_global.11 = global(np: <module 'numpy' from 'C:\\Users\\zl4821\\Anaconda3\\envs\\GBS\\lib\\site-packages\\numpy\\__init__.py'>)
DEBUG 2022-01-28 15:49:16,362 on stmt: $184load_attr.12 = getattr(value=$182load_global.11, attr=complex128)
DEBUG 2022-01-28 15:49:16,362 on stmt: Hnew = call $166load_attr.3($180binary_add.10, func=$166load_attr.3, args=[Var($180binary_add.10, loop_hafnian_batch.py:41)], kws=[('dtype', Var($184load_attr.12, loop_hafnian_batch.py:41))], vararg=None, target=None)
DEBUG 2022-01-28 15:49:16,362 on stmt: $192load_global.15 = global(find_kept_edges: CPUDispatcher(<function find_kept_edges at 0x0000024107424550>))
DEBUG 2022-01-28 15:49:16,362 on stmt: kept_edges = call $192load_global.15(j, edge_reps, func=$192load_global.15, args=[Var(j, loop_hafnian_batch.py:39), Var(edge_reps, loop_hafnian_batch.py:32)], kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:16,362 on stmt: $204load_method.20 = getattr(value=kept_edges, attr=sum)
DEBUG 2022-01-28 15:49:16,362 on stmt: edges_sum = call $204load_method.20(func=$204load_method.20, args=[], kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:16,362 on stmt: binom_prod = const(float, 1.0)
DEBUG 2022-01-28 15:49:16,362 on stmt: $214load_global.23 = global(range: <class 'range'>)
DEBUG 2022-01-28 15:49:16,370 on stmt: $const216.24 = const(int, 1)
DEBUG 2022-01-28 15:49:16,370 on stmt: $const220.26 = const(int, 2)
DEBUG 2022-01-28 15:49:16,370 on stmt: $222binary_floor_divide.27 = n // $const220.26
DEBUG 2022-01-28 15:49:16,370 on stmt: $224call_function.28 = call $214load_global.23($const216.24, $222binary_floor_divide.27, func=$214load_global.23, args=[Var($const216.24, loop_hafnian_batch.py:47), Var($222binary_floor_divide.27, loop_hafnian_batch.py:47)], kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:16,370 on stmt: $226get_iter.29 = getiter(value=$224call_function.28)
DEBUG 2022-01-28 15:49:16,370 on stmt: $phi228.1 = $226get_iter.29
DEBUG 2022-01-28 15:49:16,370 on stmt: jump 228
DEBUG 2022-01-28 15:49:16,370 ==== SSA block rewrite pass on 228
DEBUG 2022-01-28 15:49:16,370 Running <numba.core.ssa._FixSSAVars object at 0x000002410AEDDD00>
DEBUG 2022-01-28 15:49:16,370 on stmt: $228for_iter.2 = iternext(value=$phi228.1)
DEBUG 2022-01-28 15:49:16,370 on stmt: $228for_iter.3 = pair_first(value=$228for_iter.2)
DEBUG 2022-01-28 15:49:16,372 on stmt: $228for_iter.4 = pair_second(value=$228for_iter.2)
DEBUG 2022-01-28 15:49:16,372 on stmt: $phi230.2 = $228for_iter.3
DEBUG 2022-01-28 15:49:16,372 on stmt: branch $228for_iter.4, 230, 258
DEBUG 2022-01-28 15:49:16,372 ==== SSA block rewrite pass on 230
DEBUG 2022-01-28 15:49:16,372 Running <numba.core.ssa._FixSSAVars object at 0x000002410AEDDD00>
DEBUG 2022-01-28 15:49:16,372 on stmt: i = $phi230.2
DEBUG 2022-01-28 15:49:16,372 on stmt: $240binary_subscr.7 = getitem(value=edge_reps, index=i, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:16,372 on stmt: $246binary_subscr.10 = getitem(value=kept_edges, index=i, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:16,372 on stmt: $248build_tuple.11 = build_tuple(items=[Var($240binary_subscr.7, loop_hafnian_batch.py:48), Var($246binary_subscr.10, loop_hafnian_batch.py:48)])
DEBUG 2022-01-28 15:49:16,372 on stmt: $250binary_subscr.12 = getitem(value=binoms, index=$248build_tuple.11, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:16,372 on stmt: $252inplace_multiply.13 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=binom_prod, rhs=$250binary_subscr.12, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-01-28 15:49:16,372 find_def var='binom_prod' stmt=$252inplace_multiply.13 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=binom_prod, rhs=$250binary_subscr.12, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-01-28 15:49:16,372 find_def_from_top label 230
DEBUG 2022-01-28 15:49:16,372 idom 228 from label 230
DEBUG 2022-01-28 15:49:16,372 find_def_from_bottom label 228
DEBUG 2022-01-28 15:49:16,372 find_def_from_top label 228
DEBUG 2022-01-28 15:49:16,372 insert phi node binom_prod.2 = phi(incoming_values=[], incoming_blocks=[]) at 228
DEBUG 2022-01-28 15:49:16,372 find_def_from_bottom label 162
DEBUG 2022-01-28 15:49:16,372 incoming_def binom_prod = const(float, 1.0)
DEBUG 2022-01-28 15:49:16,372 find_def_from_bottom label 230
DEBUG 2022-01-28 15:49:16,372 incoming_def binom_prod.1 = $252inplace_multiply.13
DEBUG 2022-01-28 15:49:16,372 replaced with: $252inplace_multiply.13 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=binom_prod.2, rhs=$250binary_subscr.12, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-01-28 15:49:16,372 on stmt: binom_prod.1 = $252inplace_multiply.13
DEBUG 2022-01-28 15:49:16,372 on stmt: jump 228
DEBUG 2022-01-28 15:49:16,372 ==== SSA block rewrite pass on 258
DEBUG 2022-01-28 15:49:16,372 Running <numba.core.ssa._FixSSAVars object at 0x000002410AEDDD00>
DEBUG 2022-01-28 15:49:16,372 on stmt: bool260 = global(bool: <class 'bool'>)
DEBUG 2022-01-28 15:49:16,372 on stmt: $260pred = call bool260(glynn, func=bool260, args=(Var(glynn, loop_hafnian_batch.py:24),), kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:16,372 on stmt: branch $260pred, 264, 278
DEBUG 2022-01-28 15:49:16,372 ==== SSA block rewrite pass on 264
DEBUG 2022-01-28 15:49:16,372 Running <numba.core.ssa._FixSSAVars object at 0x000002410AEDDD00>
DEBUG 2022-01-28 15:49:16,372 on stmt: $const264.1 = const(int, 2)
DEBUG 2022-01-28 15:49:16,372 on stmt: $268binary_multiply.3 = $const264.1 * kept_edges
DEBUG 2022-01-28 15:49:16,372 on stmt: delta = $268binary_multiply.3 - edge_reps
DEBUG 2022-01-28 15:49:16,372 on stmt: jump 282
DEBUG 2022-01-28 15:49:16,372 ==== SSA block rewrite pass on 278
DEBUG 2022-01-28 15:49:16,372 Running <numba.core.ssa._FixSSAVars object at 0x000002410AEDDD00>
DEBUG 2022-01-28 15:49:16,372 on stmt: delta = kept_edges
DEBUG 2022-01-28 15:49:16,372 on stmt: jump 282
DEBUG 2022-01-28 15:49:16,372 ==== SSA block rewrite pass on 282
DEBUG 2022-01-28 15:49:16,372 Running <numba.core.ssa._FixSSAVars object at 0x000002410AEDDD00>
DEBUG 2022-01-28 15:49:16,372 on stmt: $282load_global.1 = global(get_submatrices: CPUDispatcher(<function get_submatrices at 0x0000024107424E50>))
DEBUG 2022-01-28 15:49:16,372 on stmt: $292call_function.6 = call $282load_global.1(delta, A, D, oddV, func=$282load_global.1, args=[Var(delta, loop_hafnian_batch.py:51), Var(A, loop_hafnian_batch.py:24), Var(D, loop_hafnian_batch.py:24), Var(oddV, loop_hafnian_batch.py:25)], kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:16,372 on stmt: $294unpack_sequence.11 = exhaust_iter(value=$292call_function.6, count=4)
DEBUG 2022-01-28 15:49:16,372 on stmt: $294unpack_sequence.7 = static_getitem(value=$294unpack_sequence.11, index=0, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:16,372 on stmt: $294unpack_sequence.8 = static_getitem(value=$294unpack_sequence.11, index=1, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:16,372 on stmt: $294unpack_sequence.9 = static_getitem(value=$294unpack_sequence.11, index=2, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:16,372 on stmt: $294unpack_sequence.10 = static_getitem(value=$294unpack_sequence.11, index=3, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:16,372 on stmt: AX_S = $294unpack_sequence.7
DEBUG 2022-01-28 15:49:16,372 on stmt: XD_S = $294unpack_sequence.8
DEBUG 2022-01-28 15:49:16,372 on stmt: D_S = $294unpack_sequence.9
DEBUG 2022-01-28 15:49:16,372 on stmt: oddVX_S = $294unpack_sequence.10
DEBUG 2022-01-28 15:49:16,372 on stmt: $304load_global.12 = global(eigvals: CPUDispatcher(<function eigvals at 0x00000241074303A0>))
DEBUG 2022-01-28 15:49:16,372 on stmt: E = call $304load_global.12(AX_S, func=$304load_global.12, args=[Var(AX_S, loop_hafnian_batch.py:55)], kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:16,372 on stmt: $312load_global.15 = global(f_loop: CPUDispatcher(<function f_loop at 0x00000241074248B0>))
DEBUG 2022-01-28 15:49:16,372 on stmt: f_even = call $312load_global.15(E, AX_S, XD_S, D_S, N_max, func=$312load_global.15, args=[Var(E, loop_hafnian_batch.py:57), Var(AX_S, loop_hafnian_batch.py:55), Var(XD_S, loop_hafnian_batch.py:55), Var(D_S, loop_hafnian_batch.py:55), Var(N_max, loop_hafnian_batch.py:30)], kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:16,372 on stmt: $328load_global.22 = global(f_loop_odd: CPUDispatcher(<function f_loop_odd at 0x0000024107424AF0>))
DEBUG 2022-01-28 15:49:16,372 on stmt: f_odd = call $328load_global.22(E, AX_S, XD_S, D_S, N_max, oddloop, oddVX_S, func=$328load_global.22, args=[Var(E, loop_hafnian_batch.py:57), Var(AX_S, loop_hafnian_batch.py:55), Var(XD_S, loop_hafnian_batch.py:55), Var(D_S, loop_hafnian_batch.py:55), Var(N_max, loop_hafnian_batch.py:30), Var(oddloop, loop_hafnian_batch.py:24), Var(oddVX_S, loop_hafnian_batch.py:55)], kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:16,372 on stmt: $348load_global.31 = global(range: <class 'range'>)
DEBUG 2022-01-28 15:49:16,372 on stmt: $const350.32 = const(int, 2)
DEBUG 2022-01-28 15:49:16,372 on stmt: $const354.34 = const(int, 0)
DEBUG 2022-01-28 15:49:16,372 on stmt: $356binary_subscr.35 = static_getitem(value=kept_edges, index=0, index_var=$const354.34, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:16,372 on stmt: $358binary_multiply.36 = $const350.32 * $356binary_subscr.35
DEBUG 2022-01-28 15:49:16,372 on stmt: $const360.37 = const(int, 2)
DEBUG 2022-01-28 15:49:16,372 on stmt: $364binary_multiply.39 = $const360.37 * batch_max
DEBUG 2022-01-28 15:49:16,372 on stmt: $368binary_add.41 = $364binary_multiply.39 + odd_cutoff
DEBUG 2022-01-28 15:49:16,372 on stmt: $const370.42 = const(int, 1)
DEBUG 2022-01-28 15:49:16,372 on stmt: $372binary_add.43 = $368binary_add.41 + $const370.42
DEBUG 2022-01-28 15:49:16,372 on stmt: $374call_function.44 = call $348load_global.31($358binary_multiply.36, $372binary_add.43, func=$348load_global.31, args=[Var($358binary_multiply.36, loop_hafnian_batch.py:64), Var($372binary_add.43, loop_hafnian_batch.py:64)], kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:16,372 on stmt: $376get_iter.45 = getiter(value=$374call_function.44)
DEBUG 2022-01-28 15:49:16,372 on stmt: $phi378.1 = $376get_iter.45
DEBUG 2022-01-28 15:49:16,372 on stmt: jump 378
DEBUG 2022-01-28 15:49:16,372 ==== SSA block rewrite pass on 378
DEBUG 2022-01-28 15:49:16,372 Running <numba.core.ssa._FixSSAVars object at 0x000002410AEDDD00>
DEBUG 2022-01-28 15:49:16,380 on stmt: $378for_iter.2 = iternext(value=$phi378.1)
DEBUG 2022-01-28 15:49:16,380 on stmt: $378for_iter.3 = pair_first(value=$378for_iter.2)
DEBUG 2022-01-28 15:49:16,380 on stmt: $378for_iter.4 = pair_second(value=$378for_iter.2)
DEBUG 2022-01-28 15:49:16,380 on stmt: $phi380.2 = $378for_iter.3
DEBUG 2022-01-28 15:49:16,380 on stmt: branch $378for_iter.4, 380, 510
DEBUG 2022-01-28 15:49:16,380 ==== SSA block rewrite pass on 380
DEBUG 2022-01-28 15:49:16,380 Running <numba.core.ssa._FixSSAVars object at 0x000002410AEDDD00>
DEBUG 2022-01-28 15:49:16,380 on stmt: N_det = $phi380.2
DEBUG 2022-01-28 15:49:16,380 on stmt: N = N_fixed + N_det
DEBUG 2022-01-28 15:49:16,380 on stmt: $const390.6 = const(float, -1.0)
DEBUG 2022-01-28 15:49:16,380 on stmt: $const394.8 = const(int, 2)
DEBUG 2022-01-28 15:49:16,380 on stmt: $396binary_floor_divide.9 = N // $const394.8
DEBUG 2022-01-28 15:49:16,380 on stmt: $400binary_subtract.11 = $396binary_floor_divide.9 - edges_sum
DEBUG 2022-01-28 15:49:16,380 on stmt: plus_minus = $const390.6 ** $400binary_subtract.11
DEBUG 2022-01-28 15:49:16,380 on stmt: $const410.15 = const(int, 2)
DEBUG 2022-01-28 15:49:16,380 on stmt: $412binary_floor_divide.16 = N_det // $const410.15
DEBUG 2022-01-28 15:49:16,380 on stmt: $const416.18 = const(int, 0)
DEBUG 2022-01-28 15:49:16,380 on stmt: $418binary_subscr.19 = static_getitem(value=kept_edges, index=0, index_var=$const416.18, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:16,380 on stmt: $420build_tuple.20 = build_tuple(items=[Var($412binary_floor_divide.16, loop_hafnian_batch.py:68), Var($418binary_subscr.19, loop_hafnian_batch.py:68)])
DEBUG 2022-01-28 15:49:16,380 on stmt: $422binary_subscr.21 = getitem(value=binoms, index=$420build_tuple.20, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:16,380 on stmt: n_det_binom_prod = $422binary_subscr.21 * binom_prod
DEBUG 2022-01-28 15:49:16,380 find_def var='binom_prod' stmt=n_det_binom_prod = $422binary_subscr.21 * binom_prod
DEBUG 2022-01-28 15:49:16,380 find_def_from_top label 380
DEBUG 2022-01-28 15:49:16,380 idom 378 from label 380
DEBUG 2022-01-28 15:49:16,380 find_def_from_bottom label 378
DEBUG 2022-01-28 15:49:16,380 find_def_from_top label 378
DEBUG 2022-01-28 15:49:16,380 idom 282 from label 378
DEBUG 2022-01-28 15:49:16,380 find_def_from_bottom label 282
DEBUG 2022-01-28 15:49:16,380 find_def_from_top label 282
DEBUG 2022-01-28 15:49:16,380 idom 258 from label 282
DEBUG 2022-01-28 15:49:16,380 find_def_from_bottom label 258
DEBUG 2022-01-28 15:49:16,380 find_def_from_top label 258
DEBUG 2022-01-28 15:49:16,380 idom 228 from label 258
DEBUG 2022-01-28 15:49:16,380 find_def_from_bottom label 228
DEBUG 2022-01-28 15:49:16,380 replaced with: n_det_binom_prod = $422binary_subscr.21 * binom_prod.2
DEBUG 2022-01-28 15:49:16,380 on stmt: $const432.25 = const(int, 2)
DEBUG 2022-01-28 15:49:16,380 on stmt: $434binary_modulo.26 = N_det % $const432.25
DEBUG 2022-01-28 15:49:16,380 on stmt: $const436.27 = const(int, 0)
DEBUG 2022-01-28 15:49:16,380 on stmt: $438compare_op.28 = $434binary_modulo.26 == $const436.27
DEBUG 2022-01-28 15:49:16,380 on stmt: bool440 = global(bool: <class 'bool'>)
DEBUG 2022-01-28 15:49:16,380 on stmt: $440pred = call bool440($438compare_op.28, func=bool440, args=(Var($438compare_op.28, loop_hafnian_batch.py:70),), kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:16,380 on stmt: branch $440pred, 444, 478
DEBUG 2022-01-28 15:49:16,380 ==== SSA block rewrite pass on 444
DEBUG 2022-01-28 15:49:16,380 Running <numba.core.ssa._FixSSAVars object at 0x000002410AEDDD00>
DEBUG 2022-01-28 15:49:16,380 on stmt: $450binary_subscr.6 = getitem(value=Hnew, index=N_det, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:16,380 on stmt: $456binary_multiply.9 = n_det_binom_prod * plus_minus
DEBUG 2022-01-28 15:49:16,380 on stmt: $const462.12 = const(int, 2)
DEBUG 2022-01-28 15:49:16,380 on stmt: $464binary_floor_divide.13 = N // $const462.12
DEBUG 2022-01-28 15:49:16,380 on stmt: $466binary_subscr.14 = getitem(value=f_even, index=$464binary_floor_divide.13, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:16,380 on stmt: $468binary_multiply.15 = $456binary_multiply.9 * $466binary_subscr.14
DEBUG 2022-01-28 15:49:16,380 on stmt: $470inplace_add.16 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$450binary_subscr.6, rhs=$468binary_multiply.15, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-01-28 15:49:16,380 on stmt: Hnew[N_det] = $470inplace_add.16
DEBUG 2022-01-28 15:49:16,380 on stmt: jump 506
DEBUG 2022-01-28 15:49:16,380 ==== SSA block rewrite pass on 478
DEBUG 2022-01-28 15:49:16,380 Running <numba.core.ssa._FixSSAVars object at 0x000002410AEDDD00>
DEBUG 2022-01-28 15:49:16,380 on stmt: $484binary_subscr.6 = getitem(value=Hnew, index=N_det, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:16,380 on stmt: $490binary_multiply.9 = n_det_binom_prod * plus_minus
DEBUG 2022-01-28 15:49:16,380 on stmt: $496binary_subscr.12 = getitem(value=f_odd, index=N, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:16,380 on stmt: $498binary_multiply.13 = $490binary_multiply.9 * $496binary_subscr.12
DEBUG 2022-01-28 15:49:16,380 on stmt: $500inplace_add.14 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$484binary_subscr.6, rhs=$498binary_multiply.13, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-01-28 15:49:16,380 on stmt: Hnew[N_det] = $500inplace_add.14
DEBUG 2022-01-28 15:49:16,380 on stmt: jump 506
DEBUG 2022-01-28 15:49:16,380 ==== SSA block rewrite pass on 506
DEBUG 2022-01-28 15:49:16,380 Running <numba.core.ssa._FixSSAVars object at 0x000002410AEDDD00>
DEBUG 2022-01-28 15:49:16,380 on stmt: jump 378
DEBUG 2022-01-28 15:49:16,380 ==== SSA block rewrite pass on 510
DEBUG 2022-01-28 15:49:16,380 Running <numba.core.ssa._FixSSAVars object at 0x000002410AEDDD00>
DEBUG 2022-01-28 15:49:16,380 on stmt: $514inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=H_batch, rhs=Hnew, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-01-28 15:49:16,380 on stmt: H_batch = $514inplace_add.3
DEBUG 2022-01-28 15:49:16,380 on stmt: jump 158
DEBUG 2022-01-28 15:49:16,380 ==== SSA block rewrite pass on 520
DEBUG 2022-01-28 15:49:16,380 Running <numba.core.ssa._FixSSAVars object at 0x000002410AEDDD00>
DEBUG 2022-01-28 15:49:16,380 on stmt: bool522 = global(bool: <class 'bool'>)
DEBUG 2022-01-28 15:49:16,380 on stmt: $522pred = call bool522(glynn, func=bool522, args=(Var(glynn, loop_hafnian_batch.py:24),), kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:16,380 on stmt: branch $522pred, 526, 580
DEBUG 2022-01-28 15:49:16,380 ==== SSA block rewrite pass on 526
DEBUG 2022-01-28 15:49:16,380 Running <numba.core.ssa._FixSSAVars object at 0x000002410AEDDD00>
DEBUG 2022-01-28 15:49:16,380 on stmt: $526load_global.0 = global(range: <class 'range'>)
DEBUG 2022-01-28 15:49:16,380 on stmt: $530load_attr.2 = getattr(value=H_batch, attr=shape)
DEBUG 2022-01-28 15:49:16,380 on stmt: $const532.3 = const(int, 0)
DEBUG 2022-01-28 15:49:16,380 on stmt: $534binary_subscr.4 = static_getitem(value=$530load_attr.2, index=0, index_var=$const532.3, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:16,380 on stmt: $536call_function.5 = call $526load_global.0($534binary_subscr.4, func=$526load_global.0, args=[Var($534binary_subscr.4, loop_hafnian_batch.py:78)], kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:16,380 on stmt: $538get_iter.6 = getiter(value=$536call_function.5)
DEBUG 2022-01-28 15:49:16,380 on stmt: $phi540.0 = $538get_iter.6
DEBUG 2022-01-28 15:49:16,380 on stmt: jump 540
DEBUG 2022-01-28 15:49:16,380 ==== SSA block rewrite pass on 540
DEBUG 2022-01-28 15:49:16,380 Running <numba.core.ssa._FixSSAVars object at 0x000002410AEDDD00>
DEBUG 2022-01-28 15:49:16,380 on stmt: $540for_iter.1 = iternext(value=$phi540.0)
DEBUG 2022-01-28 15:49:16,380 on stmt: $540for_iter.2 = pair_first(value=$540for_iter.1)
DEBUG 2022-01-28 15:49:16,380 on stmt: $540for_iter.3 = pair_second(value=$540for_iter.1)
DEBUG 2022-01-28 15:49:16,380 on stmt: $phi542.1 = $540for_iter.2
DEBUG 2022-01-28 15:49:16,380 on stmt: branch $540for_iter.3, 542, 580
DEBUG 2022-01-28 15:49:16,380 ==== SSA block rewrite pass on 542
DEBUG 2022-01-28 15:49:16,380 Running <numba.core.ssa._FixSSAVars object at 0x000002410AEDDD00>
DEBUG 2022-01-28 15:49:16,380 on stmt: j = $phi542.1
DEBUG 2022-01-28 15:49:16,380 on stmt: x = N_fixed + j
DEBUG 2022-01-28 15:49:16,390 on stmt: $558binary_subscr.9 = getitem(value=H_batch, index=j, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:16,390 on stmt: $const560.10 = const(float, 0.5)
DEBUG 2022-01-28 15:49:16,390 on stmt: $const564.12 = const(int, 2)
DEBUG 2022-01-28 15:49:16,390 on stmt: $566binary_floor_divide.13 = x // $const564.12
DEBUG 2022-01-28 15:49:16,390 on stmt: $568binary_power.14 = $const560.10 ** $566binary_floor_divide.13
DEBUG 2022-01-28 15:49:16,390 on stmt: $570inplace_multiply.15 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=$558binary_subscr.9, rhs=$568binary_power.14, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-01-28 15:49:16,390 on stmt: H_batch[j] = $570inplace_multiply.15
DEBUG 2022-01-28 15:49:16,390 on stmt: jump 540
DEBUG 2022-01-28 15:49:16,390 ==== SSA block rewrite pass on 580
DEBUG 2022-01-28 15:49:16,390 Running <numba.core.ssa._FixSSAVars object at 0x000002410AEDDD00>
DEBUG 2022-01-28 15:49:16,390 on stmt: $582return_value.1 = cast(value=H_batch)
DEBUG 2022-01-28 15:49:16,390 on stmt: return $582return_value.1
DEBUG 2022-01-28 15:49:16,390 Fix SSA violator on var j
DEBUG 2022-01-28 15:49:16,390 ==== SSA block rewrite pass on 0
DEBUG 2022-01-28 15:49:16,390 Running <numba.core.ssa._FreshVarHandler object at 0x0000024108BEAA60>
DEBUG 2022-01-28 15:49:16,390 on stmt: A = arg(0, name=A)
DEBUG 2022-01-28 15:49:16,390 on stmt: D = arg(1, name=D)
DEBUG 2022-01-28 15:49:16,390 on stmt: fixed_edge_reps = arg(2, name=fixed_edge_reps)
DEBUG 2022-01-28 15:49:16,390 on stmt: batch_max = arg(3, name=batch_max)
DEBUG 2022-01-28 15:49:16,392 on stmt: odd_cutoff = arg(4, name=odd_cutoff)
DEBUG 2022-01-28 15:49:16,392 on stmt: glynn = arg(5, name=glynn)
DEBUG 2022-01-28 15:49:16,392 on stmt: $const4.1 = const(int, 0)
DEBUG 2022-01-28 15:49:16,392 on stmt: oddloop = static_getitem(value=D, index=0, index_var=$const4.1, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:16,392 on stmt: $const12.4 = const(int, 0)
DEBUG 2022-01-28 15:49:16,392 on stmt: $const14.5 = const(NoneType, None)
DEBUG 2022-01-28 15:49:16,392 on stmt: $const16.6 = const(NoneType, None)
DEBUG 2022-01-28 15:49:16,392 on stmt: $18build_slice.7 = global(slice: <class 'slice'>)
DEBUG 2022-01-28 15:49:16,392 on stmt: $18build_slice.8 = call $18build_slice.7($const14.5, $const16.6, func=$18build_slice.7, args=(Var($const14.5, loop_hafnian_batch.py:25), Var($const16.6, loop_hafnian_batch.py:25)), kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:16,392 on stmt: $20build_tuple.9 = build_tuple(items=[Var($const12.4, loop_hafnian_batch.py:25), Var($18build_slice.8, loop_hafnian_batch.py:25)])
DEBUG 2022-01-28 15:49:16,392 on stmt: oddV = static_getitem(value=A, index=(0, slice(None, None, None)), index_var=$20build_tuple.9, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:16,392 on stmt: $28load_attr.12 = getattr(value=A, attr=shape)
DEBUG 2022-01-28 15:49:16,392 on stmt: $const30.13 = const(int, 0)
DEBUG 2022-01-28 15:49:16,392 on stmt: n = static_getitem(value=$28load_attr.12, index=0, index_var=$const30.13, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:16,392 on stmt: $const36.15 = const(int, 2)
DEBUG 2022-01-28 15:49:16,392 on stmt: $40load_method.17 = getattr(value=fixed_edge_reps, attr=sum)
DEBUG 2022-01-28 15:49:16,392 on stmt: $42call_method.18 = call $40load_method.17(func=$40load_method.17, args=[], kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:16,392 on stmt: N_fixed = $const36.15 * $42call_method.18
DEBUG 2022-01-28 15:49:16,392 on stmt: $const50.21 = const(int, 2)
DEBUG 2022-01-28 15:49:16,392 on stmt: $54binary_multiply.23 = $const50.21 * batch_max
DEBUG 2022-01-28 15:49:16,392 on stmt: $56binary_add.24 = N_fixed + $54binary_multiply.23
DEBUG 2022-01-28 15:49:16,392 on stmt: N_max = $56binary_add.24 + odd_cutoff
DEBUG 2022-01-28 15:49:16,392 on stmt: $64load_global.27 = global(np: <module 'numpy' from 'C:\\Users\\zl4821\\Anaconda3\\envs\\GBS\\lib\\site-packages\\numpy\\__init__.py'>)
DEBUG 2022-01-28 15:49:16,392 on stmt: $66load_method.28 = getattr(value=$64load_global.27, attr=concatenate)
DEBUG 2022-01-28 15:49:16,392 on stmt: $68load_global.29 = global(np: <module 'numpy' from 'C:\\Users\\zl4821\\Anaconda3\\envs\\GBS\\lib\\site-packages\\numpy\\__init__.py'>)
DEBUG 2022-01-28 15:49:16,392 on stmt: $70load_method.30 = getattr(value=$68load_global.29, attr=array)
DEBUG 2022-01-28 15:49:16,392 on stmt: $74build_list.32 = build_list(items=[Var(batch_max, loop_hafnian_batch.py:24)])
DEBUG 2022-01-28 15:49:16,392 on stmt: $76call_method.33 = call $70load_method.30($74build_list.32, func=$70load_method.30, args=[Var($74build_list.32, loop_hafnian_batch.py:32)], kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:16,392 on stmt: $80build_tuple.35 = build_tuple(items=[Var($76call_method.33, loop_hafnian_batch.py:32), Var(fixed_edge_reps, loop_hafnian_batch.py:24)])
DEBUG 2022-01-28 15:49:16,392 on stmt: edge_reps = call $66load_method.28($80build_tuple.35, func=$66load_method.28, args=[Var($80build_tuple.35, loop_hafnian_batch.py:32)], kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:16,392 on stmt: $86load_global.37 = global(np: <module 'numpy' from 'C:\\Users\\zl4821\\Anaconda3\\envs\\GBS\\lib\\site-packages\\numpy\\__init__.py'>)
DEBUG 2022-01-28 15:49:16,392 on stmt: $88load_method.38 = getattr(value=$86load_global.37, attr=prod)
DEBUG 2022-01-28 15:49:16,392 on stmt: $const92.40 = const(int, 1)
DEBUG 2022-01-28 15:49:16,392 on stmt: $94binary_add.41 = edge_reps + $const92.40
DEBUG 2022-01-28 15:49:16,392 on stmt: steps = call $88load_method.38($94binary_add.41, func=$88load_method.38, args=[Var($94binary_add.41, loop_hafnian_batch.py:33)], kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:16,392 on stmt: $102load_method.44 = getattr(value=edge_reps, attr=max)
DEBUG 2022-01-28 15:49:16,392 on stmt: $104call_method.45 = call $102load_method.44(func=$102load_method.44, args=[], kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:16,392 on stmt: max_binom = $104call_method.45 + odd_cutoff
DEBUG 2022-01-28 15:49:16,392 on stmt: $112load_global.48 = global(precompute_binoms: CPUDispatcher(<function precompute_binoms at 0x00000241074240D0>))
DEBUG 2022-01-28 15:49:16,392 on stmt: binoms = call $112load_global.48(max_binom, func=$112load_global.48, args=[Var(max_binom, loop_hafnian_batch.py:35)], kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:16,392 on stmt: $120load_global.51 = global(np: <module 'numpy' from 'C:\\Users\\zl4821\\Anaconda3\\envs\\GBS\\lib\\site-packages\\numpy\\__init__.py'>)
DEBUG 2022-01-28 15:49:16,392 on stmt: $122load_attr.52 = getattr(value=$120load_global.51, attr=zeros)
DEBUG 2022-01-28 15:49:16,392 on stmt: $const124.53 = const(int, 2)
DEBUG 2022-01-28 15:49:16,392 on stmt: $128binary_multiply.55 = $const124.53 * batch_max
DEBUG 2022-01-28 15:49:16,392 on stmt: $132binary_add.57 = $128binary_multiply.55 + odd_cutoff
DEBUG 2022-01-28 15:49:16,392 on stmt: $const134.58 = const(int, 1)
DEBUG 2022-01-28 15:49:16,392 on stmt: $136binary_add.59 = $132binary_add.57 + $const134.58
DEBUG 2022-01-28 15:49:16,392 on stmt: $138load_global.60 = global(np: <module 'numpy' from 'C:\\Users\\zl4821\\Anaconda3\\envs\\GBS\\lib\\site-packages\\numpy\\__init__.py'>)
DEBUG 2022-01-28 15:49:16,392 on stmt: $140load_attr.61 = getattr(value=$138load_global.60, attr=complex128)
DEBUG 2022-01-28 15:49:16,392 on stmt: H_batch = call $122load_attr.52($136binary_add.59, func=$122load_attr.52, args=[Var($136binary_add.59, loop_hafnian_batch.py:38)], kws=[('dtype', Var($140load_attr.61, loop_hafnian_batch.py:38))], vararg=None, target=None)
DEBUG 2022-01-28 15:49:16,392 on stmt: $148load_global.64 = global(numba: <module 'numba' from 'C:\\Users\\zl4821\\Anaconda3\\envs\\GBS\\lib\\site-packages\\numba\\__init__.py'>)
DEBUG 2022-01-28 15:49:16,392 on stmt: $150load_method.65 = getattr(value=$148load_global.64, attr=prange)
DEBUG 2022-01-28 15:49:16,392 on stmt: $154call_method.67 = call $150load_method.65(steps, func=$150load_method.65, args=[Var(steps, loop_hafnian_batch.py:33)], kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:16,392 on stmt: $156get_iter.68 = getiter(value=$154call_method.67)
DEBUG 2022-01-28 15:49:16,392 on stmt: $phi158.0 = $156get_iter.68
DEBUG 2022-01-28 15:49:16,392 on stmt: jump 158
DEBUG 2022-01-28 15:49:16,392 ==== SSA block rewrite pass on 158
DEBUG 2022-01-28 15:49:16,392 Running <numba.core.ssa._FreshVarHandler object at 0x0000024108BEAA60>
DEBUG 2022-01-28 15:49:16,392 on stmt: $158for_iter.1 = iternext(value=$phi158.0)
DEBUG 2022-01-28 15:49:16,392 on stmt: $158for_iter.2 = pair_first(value=$158for_iter.1)
DEBUG 2022-01-28 15:49:16,392 on stmt: $158for_iter.3 = pair_second(value=$158for_iter.1)
DEBUG 2022-01-28 15:49:16,392 on stmt: $phi162.1 = $158for_iter.2
DEBUG 2022-01-28 15:49:16,392 on stmt: branch $158for_iter.3, 162, 520
DEBUG 2022-01-28 15:49:16,392 ==== SSA block rewrite pass on 162
DEBUG 2022-01-28 15:49:16,392 Running <numba.core.ssa._FreshVarHandler object at 0x0000024108BEAA60>
DEBUG 2022-01-28 15:49:16,392 on stmt: j = $phi162.1
DEBUG 2022-01-28 15:49:16,392 first assign: j
DEBUG 2022-01-28 15:49:16,392 replaced with: j = $phi162.1
DEBUG 2022-01-28 15:49:16,392 on stmt: $164load_global.2 = global(np: <module 'numpy' from 'C:\\Users\\zl4821\\Anaconda3\\envs\\GBS\\lib\\site-packages\\numpy\\__init__.py'>)
DEBUG 2022-01-28 15:49:16,392 on stmt: $166load_attr.3 = getattr(value=$164load_global.2, attr=zeros)
DEBUG 2022-01-28 15:49:16,392 on stmt: $const168.4 = const(int, 2)
DEBUG 2022-01-28 15:49:16,392 on stmt: $172binary_multiply.6 = $const168.4 * batch_max
DEBUG 2022-01-28 15:49:16,400 on stmt: $176binary_add.8 = $172binary_multiply.6 + odd_cutoff
DEBUG 2022-01-28 15:49:16,400 on stmt: $const178.9 = const(int, 1)
DEBUG 2022-01-28 15:49:16,400 on stmt: $180binary_add.10 = $176binary_add.8 + $const178.9
DEBUG 2022-01-28 15:49:16,400 on stmt: $182load_global.11 = global(np: <module 'numpy' from 'C:\\Users\\zl4821\\Anaconda3\\envs\\GBS\\lib\\site-packages\\numpy\\__init__.py'>)
DEBUG 2022-01-28 15:49:16,400 on stmt: $184load_attr.12 = getattr(value=$182load_global.11, attr=complex128)
DEBUG 2022-01-28 15:49:16,400 on stmt: Hnew = call $166load_attr.3($180binary_add.10, func=$166load_attr.3, args=[Var($180binary_add.10, loop_hafnian_batch.py:41)], kws=[('dtype', Var($184load_attr.12, loop_hafnian_batch.py:41))], vararg=None, target=None)
DEBUG 2022-01-28 15:49:16,400 on stmt: $192load_global.15 = global(find_kept_edges: CPUDispatcher(<function find_kept_edges at 0x0000024107424550>))
DEBUG 2022-01-28 15:49:16,400 on stmt: kept_edges = call $192load_global.15(j, edge_reps, func=$192load_global.15, args=[Var(j, loop_hafnian_batch.py:39), Var(edge_reps, loop_hafnian_batch.py:32)], kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:16,400 on stmt: $204load_method.20 = getattr(value=kept_edges, attr=sum)
DEBUG 2022-01-28 15:49:16,400 on stmt: edges_sum = call $204load_method.20(func=$204load_method.20, args=[], kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:16,400 on stmt: binom_prod = const(float, 1.0)
DEBUG 2022-01-28 15:49:16,400 on stmt: $214load_global.23 = global(range: <class 'range'>)
DEBUG 2022-01-28 15:49:16,400 on stmt: $const216.24 = const(int, 1)
DEBUG 2022-01-28 15:49:16,400 on stmt: $const220.26 = const(int, 2)
DEBUG 2022-01-28 15:49:16,400 on stmt: $222binary_floor_divide.27 = n // $const220.26
DEBUG 2022-01-28 15:49:16,400 on stmt: $224call_function.28 = call $214load_global.23($const216.24, $222binary_floor_divide.27, func=$214load_global.23, args=[Var($const216.24, loop_hafnian_batch.py:47), Var($222binary_floor_divide.27, loop_hafnian_batch.py:47)], kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:16,400 on stmt: $226get_iter.29 = getiter(value=$224call_function.28)
DEBUG 2022-01-28 15:49:16,400 on stmt: $phi228.1 = $226get_iter.29
DEBUG 2022-01-28 15:49:16,402 on stmt: jump 228
DEBUG 2022-01-28 15:49:16,402 ==== SSA block rewrite pass on 228
DEBUG 2022-01-28 15:49:16,402 Running <numba.core.ssa._FreshVarHandler object at 0x0000024108BEAA60>
DEBUG 2022-01-28 15:49:16,402 on stmt: binom_prod.2 = phi(incoming_values=[Var(binom_prod, loop_hafnian_batch.py:46), Var(binom_prod.1, loop_hafnian_batch.py:48)], incoming_blocks=[162, 230])
DEBUG 2022-01-28 15:49:16,402 on stmt: $228for_iter.2 = iternext(value=$phi228.1)
DEBUG 2022-01-28 15:49:16,402 on stmt: $228for_iter.3 = pair_first(value=$228for_iter.2)
DEBUG 2022-01-28 15:49:16,402 on stmt: $228for_iter.4 = pair_second(value=$228for_iter.2)
DEBUG 2022-01-28 15:49:16,402 on stmt: $phi230.2 = $228for_iter.3
DEBUG 2022-01-28 15:49:16,402 on stmt: branch $228for_iter.4, 230, 258
DEBUG 2022-01-28 15:49:16,402 ==== SSA block rewrite pass on 230
DEBUG 2022-01-28 15:49:16,402 Running <numba.core.ssa._FreshVarHandler object at 0x0000024108BEAA60>
DEBUG 2022-01-28 15:49:16,402 on stmt: i = $phi230.2
DEBUG 2022-01-28 15:49:16,402 on stmt: $240binary_subscr.7 = getitem(value=edge_reps, index=i, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:16,402 on stmt: $246binary_subscr.10 = getitem(value=kept_edges, index=i, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:16,402 on stmt: $248build_tuple.11 = build_tuple(items=[Var($240binary_subscr.7, loop_hafnian_batch.py:48), Var($246binary_subscr.10, loop_hafnian_batch.py:48)])
DEBUG 2022-01-28 15:49:16,402 on stmt: $250binary_subscr.12 = getitem(value=binoms, index=$248build_tuple.11, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:16,402 on stmt: $252inplace_multiply.13 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=binom_prod.2, rhs=$250binary_subscr.12, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-01-28 15:49:16,402 on stmt: binom_prod.1 = $252inplace_multiply.13
DEBUG 2022-01-28 15:49:16,402 on stmt: jump 228
DEBUG 2022-01-28 15:49:16,402 ==== SSA block rewrite pass on 258
DEBUG 2022-01-28 15:49:16,402 Running <numba.core.ssa._FreshVarHandler object at 0x0000024108BEAA60>
DEBUG 2022-01-28 15:49:16,402 on stmt: bool260 = global(bool: <class 'bool'>)
DEBUG 2022-01-28 15:49:16,402 on stmt: $260pred = call bool260(glynn, func=bool260, args=(Var(glynn, loop_hafnian_batch.py:24),), kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:16,402 on stmt: branch $260pred, 264, 278
DEBUG 2022-01-28 15:49:16,402 ==== SSA block rewrite pass on 264
DEBUG 2022-01-28 15:49:16,402 Running <numba.core.ssa._FreshVarHandler object at 0x0000024108BEAA60>
DEBUG 2022-01-28 15:49:16,402 on stmt: $const264.1 = const(int, 2)
DEBUG 2022-01-28 15:49:16,402 on stmt: $268binary_multiply.3 = $const264.1 * kept_edges
DEBUG 2022-01-28 15:49:16,402 on stmt: delta = $268binary_multiply.3 - edge_reps
DEBUG 2022-01-28 15:49:16,402 on stmt: jump 282
DEBUG 2022-01-28 15:49:16,402 ==== SSA block rewrite pass on 278
DEBUG 2022-01-28 15:49:16,402 Running <numba.core.ssa._FreshVarHandler object at 0x0000024108BEAA60>
DEBUG 2022-01-28 15:49:16,402 on stmt: delta = kept_edges
DEBUG 2022-01-28 15:49:16,402 on stmt: jump 282
DEBUG 2022-01-28 15:49:16,402 ==== SSA block rewrite pass on 282
DEBUG 2022-01-28 15:49:16,402 Running <numba.core.ssa._FreshVarHandler object at 0x0000024108BEAA60>
DEBUG 2022-01-28 15:49:16,402 on stmt: $282load_global.1 = global(get_submatrices: CPUDispatcher(<function get_submatrices at 0x0000024107424E50>))
DEBUG 2022-01-28 15:49:16,402 on stmt: $292call_function.6 = call $282load_global.1(delta, A, D, oddV, func=$282load_global.1, args=[Var(delta, loop_hafnian_batch.py:51), Var(A, loop_hafnian_batch.py:24), Var(D, loop_hafnian_batch.py:24), Var(oddV, loop_hafnian_batch.py:25)], kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:16,402 on stmt: $294unpack_sequence.11 = exhaust_iter(value=$292call_function.6, count=4)
DEBUG 2022-01-28 15:49:16,402 on stmt: $294unpack_sequence.7 = static_getitem(value=$294unpack_sequence.11, index=0, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:16,402 on stmt: $294unpack_sequence.8 = static_getitem(value=$294unpack_sequence.11, index=1, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:16,402 on stmt: $294unpack_sequence.9 = static_getitem(value=$294unpack_sequence.11, index=2, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:16,402 on stmt: $294unpack_sequence.10 = static_getitem(value=$294unpack_sequence.11, index=3, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:16,402 on stmt: AX_S = $294unpack_sequence.7
DEBUG 2022-01-28 15:49:16,402 on stmt: XD_S = $294unpack_sequence.8
DEBUG 2022-01-28 15:49:16,402 on stmt: D_S = $294unpack_sequence.9
DEBUG 2022-01-28 15:49:16,402 on stmt: oddVX_S = $294unpack_sequence.10
DEBUG 2022-01-28 15:49:16,402 on stmt: $304load_global.12 = global(eigvals: CPUDispatcher(<function eigvals at 0x00000241074303A0>))
DEBUG 2022-01-28 15:49:16,402 on stmt: E = call $304load_global.12(AX_S, func=$304load_global.12, args=[Var(AX_S, loop_hafnian_batch.py:55)], kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:16,402 on stmt: $312load_global.15 = global(f_loop: CPUDispatcher(<function f_loop at 0x00000241074248B0>))
DEBUG 2022-01-28 15:49:16,402 on stmt: f_even = call $312load_global.15(E, AX_S, XD_S, D_S, N_max, func=$312load_global.15, args=[Var(E, loop_hafnian_batch.py:57), Var(AX_S, loop_hafnian_batch.py:55), Var(XD_S, loop_hafnian_batch.py:55), Var(D_S, loop_hafnian_batch.py:55), Var(N_max, loop_hafnian_batch.py:30)], kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:16,402 on stmt: $328load_global.22 = global(f_loop_odd: CPUDispatcher(<function f_loop_odd at 0x0000024107424AF0>))
DEBUG 2022-01-28 15:49:16,402 on stmt: f_odd = call $328load_global.22(E, AX_S, XD_S, D_S, N_max, oddloop, oddVX_S, func=$328load_global.22, args=[Var(E, loop_hafnian_batch.py:57), Var(AX_S, loop_hafnian_batch.py:55), Var(XD_S, loop_hafnian_batch.py:55), Var(D_S, loop_hafnian_batch.py:55), Var(N_max, loop_hafnian_batch.py:30), Var(oddloop, loop_hafnian_batch.py:24), Var(oddVX_S, loop_hafnian_batch.py:55)], kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:16,402 on stmt: $348load_global.31 = global(range: <class 'range'>)
DEBUG 2022-01-28 15:49:16,402 on stmt: $const350.32 = const(int, 2)
DEBUG 2022-01-28 15:49:16,402 on stmt: $const354.34 = const(int, 0)
DEBUG 2022-01-28 15:49:16,402 on stmt: $356binary_subscr.35 = static_getitem(value=kept_edges, index=0, index_var=$const354.34, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:16,402 on stmt: $358binary_multiply.36 = $const350.32 * $356binary_subscr.35
DEBUG 2022-01-28 15:49:16,402 on stmt: $const360.37 = const(int, 2)
DEBUG 2022-01-28 15:49:16,402 on stmt: $364binary_multiply.39 = $const360.37 * batch_max
DEBUG 2022-01-28 15:49:16,402 on stmt: $368binary_add.41 = $364binary_multiply.39 + odd_cutoff
DEBUG 2022-01-28 15:49:16,402 on stmt: $const370.42 = const(int, 1)
DEBUG 2022-01-28 15:49:16,402 on stmt: $372binary_add.43 = $368binary_add.41 + $const370.42
DEBUG 2022-01-28 15:49:16,402 on stmt: $374call_function.44 = call $348load_global.31($358binary_multiply.36, $372binary_add.43, func=$348load_global.31, args=[Var($358binary_multiply.36, loop_hafnian_batch.py:64), Var($372binary_add.43, loop_hafnian_batch.py:64)], kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:16,402 on stmt: $376get_iter.45 = getiter(value=$374call_function.44)
DEBUG 2022-01-28 15:49:16,402 on stmt: $phi378.1 = $376get_iter.45
DEBUG 2022-01-28 15:49:16,402 on stmt: jump 378
DEBUG 2022-01-28 15:49:16,402 ==== SSA block rewrite pass on 378
DEBUG 2022-01-28 15:49:16,402 Running <numba.core.ssa._FreshVarHandler object at 0x0000024108BEAA60>
DEBUG 2022-01-28 15:49:16,402 on stmt: $378for_iter.2 = iternext(value=$phi378.1)
DEBUG 2022-01-28 15:49:16,402 on stmt: $378for_iter.3 = pair_first(value=$378for_iter.2)
DEBUG 2022-01-28 15:49:16,402 on stmt: $378for_iter.4 = pair_second(value=$378for_iter.2)
DEBUG 2022-01-28 15:49:16,402 on stmt: $phi380.2 = $378for_iter.3
DEBUG 2022-01-28 15:49:16,402 on stmt: branch $378for_iter.4, 380, 510
DEBUG 2022-01-28 15:49:16,402 ==== SSA block rewrite pass on 380
DEBUG 2022-01-28 15:49:16,402 Running <numba.core.ssa._FreshVarHandler object at 0x0000024108BEAA60>
DEBUG 2022-01-28 15:49:16,410 on stmt: N_det = $phi380.2
DEBUG 2022-01-28 15:49:16,410 on stmt: N = N_fixed + N_det
DEBUG 2022-01-28 15:49:16,410 on stmt: $const390.6 = const(float, -1.0)
DEBUG 2022-01-28 15:49:16,410 on stmt: $const394.8 = const(int, 2)
DEBUG 2022-01-28 15:49:16,410 on stmt: $396binary_floor_divide.9 = N // $const394.8
DEBUG 2022-01-28 15:49:16,410 on stmt: $400binary_subtract.11 = $396binary_floor_divide.9 - edges_sum
DEBUG 2022-01-28 15:49:16,410 on stmt: plus_minus = $const390.6 ** $400binary_subtract.11
DEBUG 2022-01-28 15:49:16,410 on stmt: $const410.15 = const(int, 2)
DEBUG 2022-01-28 15:49:16,410 on stmt: $412binary_floor_divide.16 = N_det // $const410.15
DEBUG 2022-01-28 15:49:16,410 on stmt: $const416.18 = const(int, 0)
DEBUG 2022-01-28 15:49:16,410 on stmt: $418binary_subscr.19 = static_getitem(value=kept_edges, index=0, index_var=$const416.18, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:16,410 on stmt: $420build_tuple.20 = build_tuple(items=[Var($412binary_floor_divide.16, loop_hafnian_batch.py:68), Var($418binary_subscr.19, loop_hafnian_batch.py:68)])
DEBUG 2022-01-28 15:49:16,410 on stmt: $422binary_subscr.21 = getitem(value=binoms, index=$420build_tuple.20, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:16,410 on stmt: n_det_binom_prod = $422binary_subscr.21 * binom_prod.2
DEBUG 2022-01-28 15:49:16,410 on stmt: $const432.25 = const(int, 2)
DEBUG 2022-01-28 15:49:16,410 on stmt: $434binary_modulo.26 = N_det % $const432.25
DEBUG 2022-01-28 15:49:16,410 on stmt: $const436.27 = const(int, 0)
DEBUG 2022-01-28 15:49:16,410 on stmt: $438compare_op.28 = $434binary_modulo.26 == $const436.27
DEBUG 2022-01-28 15:49:16,410 on stmt: bool440 = global(bool: <class 'bool'>)
DEBUG 2022-01-28 15:49:16,412 on stmt: $440pred = call bool440($438compare_op.28, func=bool440, args=(Var($438compare_op.28, loop_hafnian_batch.py:70),), kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:16,412 on stmt: branch $440pred, 444, 478
DEBUG 2022-01-28 15:49:16,412 ==== SSA block rewrite pass on 444
DEBUG 2022-01-28 15:49:16,412 Running <numba.core.ssa._FreshVarHandler object at 0x0000024108BEAA60>
DEBUG 2022-01-28 15:49:16,412 on stmt: $450binary_subscr.6 = getitem(value=Hnew, index=N_det, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:16,412 on stmt: $456binary_multiply.9 = n_det_binom_prod * plus_minus
DEBUG 2022-01-28 15:49:16,412 on stmt: $const462.12 = const(int, 2)
DEBUG 2022-01-28 15:49:16,412 on stmt: $464binary_floor_divide.13 = N // $const462.12
DEBUG 2022-01-28 15:49:16,412 on stmt: $466binary_subscr.14 = getitem(value=f_even, index=$464binary_floor_divide.13, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:16,412 on stmt: $468binary_multiply.15 = $456binary_multiply.9 * $466binary_subscr.14
DEBUG 2022-01-28 15:49:16,412 on stmt: $470inplace_add.16 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$450binary_subscr.6, rhs=$468binary_multiply.15, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-01-28 15:49:16,412 on stmt: Hnew[N_det] = $470inplace_add.16
DEBUG 2022-01-28 15:49:16,412 on stmt: jump 506
DEBUG 2022-01-28 15:49:16,412 ==== SSA block rewrite pass on 478
DEBUG 2022-01-28 15:49:16,412 Running <numba.core.ssa._FreshVarHandler object at 0x0000024108BEAA60>
DEBUG 2022-01-28 15:49:16,412 on stmt: $484binary_subscr.6 = getitem(value=Hnew, index=N_det, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:16,412 on stmt: $490binary_multiply.9 = n_det_binom_prod * plus_minus
DEBUG 2022-01-28 15:49:16,412 on stmt: $496binary_subscr.12 = getitem(value=f_odd, index=N, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:16,412 on stmt: $498binary_multiply.13 = $490binary_multiply.9 * $496binary_subscr.12
DEBUG 2022-01-28 15:49:16,412 on stmt: $500inplace_add.14 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$484binary_subscr.6, rhs=$498binary_multiply.13, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-01-28 15:49:16,412 on stmt: Hnew[N_det] = $500inplace_add.14
DEBUG 2022-01-28 15:49:16,412 on stmt: jump 506
DEBUG 2022-01-28 15:49:16,412 ==== SSA block rewrite pass on 506
DEBUG 2022-01-28 15:49:16,412 Running <numba.core.ssa._FreshVarHandler object at 0x0000024108BEAA60>
DEBUG 2022-01-28 15:49:16,412 on stmt: jump 378
DEBUG 2022-01-28 15:49:16,412 ==== SSA block rewrite pass on 510
DEBUG 2022-01-28 15:49:16,412 Running <numba.core.ssa._FreshVarHandler object at 0x0000024108BEAA60>
DEBUG 2022-01-28 15:49:16,412 on stmt: $514inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=H_batch, rhs=Hnew, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-01-28 15:49:16,412 on stmt: H_batch = $514inplace_add.3
DEBUG 2022-01-28 15:49:16,412 on stmt: jump 158
DEBUG 2022-01-28 15:49:16,412 ==== SSA block rewrite pass on 520
DEBUG 2022-01-28 15:49:16,412 Running <numba.core.ssa._FreshVarHandler object at 0x0000024108BEAA60>
DEBUG 2022-01-28 15:49:16,412 on stmt: bool522 = global(bool: <class 'bool'>)
DEBUG 2022-01-28 15:49:16,412 on stmt: $522pred = call bool522(glynn, func=bool522, args=(Var(glynn, loop_hafnian_batch.py:24),), kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:16,412 on stmt: branch $522pred, 526, 580
DEBUG 2022-01-28 15:49:16,412 ==== SSA block rewrite pass on 526
DEBUG 2022-01-28 15:49:16,412 Running <numba.core.ssa._FreshVarHandler object at 0x0000024108BEAA60>
DEBUG 2022-01-28 15:49:16,412 on stmt: $526load_global.0 = global(range: <class 'range'>)
DEBUG 2022-01-28 15:49:16,412 on stmt: $530load_attr.2 = getattr(value=H_batch, attr=shape)
DEBUG 2022-01-28 15:49:16,412 on stmt: $const532.3 = const(int, 0)
DEBUG 2022-01-28 15:49:16,412 on stmt: $534binary_subscr.4 = static_getitem(value=$530load_attr.2, index=0, index_var=$const532.3, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:16,412 on stmt: $536call_function.5 = call $526load_global.0($534binary_subscr.4, func=$526load_global.0, args=[Var($534binary_subscr.4, loop_hafnian_batch.py:78)], kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:16,412 on stmt: $538get_iter.6 = getiter(value=$536call_function.5)
DEBUG 2022-01-28 15:49:16,412 on stmt: $phi540.0 = $538get_iter.6
DEBUG 2022-01-28 15:49:16,412 on stmt: jump 540
DEBUG 2022-01-28 15:49:16,412 ==== SSA block rewrite pass on 540
DEBUG 2022-01-28 15:49:16,412 Running <numba.core.ssa._FreshVarHandler object at 0x0000024108BEAA60>
DEBUG 2022-01-28 15:49:16,412 on stmt: $540for_iter.1 = iternext(value=$phi540.0)
DEBUG 2022-01-28 15:49:16,412 on stmt: $540for_iter.2 = pair_first(value=$540for_iter.1)
DEBUG 2022-01-28 15:49:16,412 on stmt: $540for_iter.3 = pair_second(value=$540for_iter.1)
DEBUG 2022-01-28 15:49:16,412 on stmt: $phi542.1 = $540for_iter.2
DEBUG 2022-01-28 15:49:16,412 on stmt: branch $540for_iter.3, 542, 580
DEBUG 2022-01-28 15:49:16,412 ==== SSA block rewrite pass on 542
DEBUG 2022-01-28 15:49:16,412 Running <numba.core.ssa._FreshVarHandler object at 0x0000024108BEAA60>
DEBUG 2022-01-28 15:49:16,412 on stmt: j = $phi542.1
DEBUG 2022-01-28 15:49:16,412 replaced with: j.1 = $phi542.1
DEBUG 2022-01-28 15:49:16,412 on stmt: x = N_fixed + j
DEBUG 2022-01-28 15:49:16,412 on stmt: $558binary_subscr.9 = getitem(value=H_batch, index=j, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:16,412 on stmt: $const560.10 = const(float, 0.5)
DEBUG 2022-01-28 15:49:16,412 on stmt: $const564.12 = const(int, 2)
DEBUG 2022-01-28 15:49:16,412 on stmt: $566binary_floor_divide.13 = x // $const564.12
DEBUG 2022-01-28 15:49:16,412 on stmt: $568binary_power.14 = $const560.10 ** $566binary_floor_divide.13
DEBUG 2022-01-28 15:49:16,412 on stmt: $570inplace_multiply.15 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=$558binary_subscr.9, rhs=$568binary_power.14, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-01-28 15:49:16,412 on stmt: H_batch[j] = $570inplace_multiply.15
DEBUG 2022-01-28 15:49:16,412 on stmt: jump 540
DEBUG 2022-01-28 15:49:16,412 ==== SSA block rewrite pass on 580
DEBUG 2022-01-28 15:49:16,412 Running <numba.core.ssa._FreshVarHandler object at 0x0000024108BEAA60>
DEBUG 2022-01-28 15:49:16,412 on stmt: $582return_value.1 = cast(value=H_batch)
DEBUG 2022-01-28 15:49:16,412 on stmt: return $582return_value.1
DEBUG 2022-01-28 15:49:16,412 Replaced assignments: defaultdict(<class 'list'>,
            {162: [<numba.core.ir.Assign object at 0x000002410AEDDEB0>],
             542: [<numba.core.ir.Assign object at 0x000002410AF261F0>]})
DEBUG 2022-01-28 15:49:16,412 ==== SSA block rewrite pass on 0
DEBUG 2022-01-28 15:49:16,412 Running <numba.core.ssa._FixSSAVars object at 0x000002410AEDDD00>
DEBUG 2022-01-28 15:49:16,412 on stmt: A = arg(0, name=A)
DEBUG 2022-01-28 15:49:16,412 on stmt: D = arg(1, name=D)
DEBUG 2022-01-28 15:49:16,412 on stmt: fixed_edge_reps = arg(2, name=fixed_edge_reps)
DEBUG 2022-01-28 15:49:16,420 on stmt: batch_max = arg(3, name=batch_max)
DEBUG 2022-01-28 15:49:16,420 on stmt: odd_cutoff = arg(4, name=odd_cutoff)
DEBUG 2022-01-28 15:49:16,420 on stmt: glynn = arg(5, name=glynn)
DEBUG 2022-01-28 15:49:16,420 on stmt: $const4.1 = const(int, 0)
DEBUG 2022-01-28 15:49:16,420 on stmt: oddloop = static_getitem(value=D, index=0, index_var=$const4.1, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:16,420 on stmt: $const12.4 = const(int, 0)
DEBUG 2022-01-28 15:49:16,420 on stmt: $const14.5 = const(NoneType, None)
DEBUG 2022-01-28 15:49:16,420 on stmt: $const16.6 = const(NoneType, None)
DEBUG 2022-01-28 15:49:16,420 on stmt: $18build_slice.7 = global(slice: <class 'slice'>)
DEBUG 2022-01-28 15:49:16,420 on stmt: $18build_slice.8 = call $18build_slice.7($const14.5, $const16.6, func=$18build_slice.7, args=(Var($const14.5, loop_hafnian_batch.py:25), Var($const16.6, loop_hafnian_batch.py:25)), kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:16,420 on stmt: $20build_tuple.9 = build_tuple(items=[Var($const12.4, loop_hafnian_batch.py:25), Var($18build_slice.8, loop_hafnian_batch.py:25)])
DEBUG 2022-01-28 15:49:16,420 on stmt: oddV = static_getitem(value=A, index=(0, slice(None, None, None)), index_var=$20build_tuple.9, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:16,420 on stmt: $28load_attr.12 = getattr(value=A, attr=shape)
DEBUG 2022-01-28 15:49:16,420 on stmt: $const30.13 = const(int, 0)
DEBUG 2022-01-28 15:49:16,420 on stmt: n = static_getitem(value=$28load_attr.12, index=0, index_var=$const30.13, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:16,420 on stmt: $const36.15 = const(int, 2)
DEBUG 2022-01-28 15:49:16,420 on stmt: $40load_method.17 = getattr(value=fixed_edge_reps, attr=sum)
DEBUG 2022-01-28 15:49:16,420 on stmt: $42call_method.18 = call $40load_method.17(func=$40load_method.17, args=[], kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:16,420 on stmt: N_fixed = $const36.15 * $42call_method.18
DEBUG 2022-01-28 15:49:16,423 on stmt: $const50.21 = const(int, 2)
DEBUG 2022-01-28 15:49:16,423 on stmt: $54binary_multiply.23 = $const50.21 * batch_max
DEBUG 2022-01-28 15:49:16,423 on stmt: $56binary_add.24 = N_fixed + $54binary_multiply.23
DEBUG 2022-01-28 15:49:16,423 on stmt: N_max = $56binary_add.24 + odd_cutoff
DEBUG 2022-01-28 15:49:16,423 on stmt: $64load_global.27 = global(np: <module 'numpy' from 'C:\\Users\\zl4821\\Anaconda3\\envs\\GBS\\lib\\site-packages\\numpy\\__init__.py'>)
DEBUG 2022-01-28 15:49:16,423 on stmt: $66load_method.28 = getattr(value=$64load_global.27, attr=concatenate)
DEBUG 2022-01-28 15:49:16,423 on stmt: $68load_global.29 = global(np: <module 'numpy' from 'C:\\Users\\zl4821\\Anaconda3\\envs\\GBS\\lib\\site-packages\\numpy\\__init__.py'>)
DEBUG 2022-01-28 15:49:16,423 on stmt: $70load_method.30 = getattr(value=$68load_global.29, attr=array)
DEBUG 2022-01-28 15:49:16,423 on stmt: $74build_list.32 = build_list(items=[Var(batch_max, loop_hafnian_batch.py:24)])
DEBUG 2022-01-28 15:49:16,423 on stmt: $76call_method.33 = call $70load_method.30($74build_list.32, func=$70load_method.30, args=[Var($74build_list.32, loop_hafnian_batch.py:32)], kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:16,423 on stmt: $80build_tuple.35 = build_tuple(items=[Var($76call_method.33, loop_hafnian_batch.py:32), Var(fixed_edge_reps, loop_hafnian_batch.py:24)])
DEBUG 2022-01-28 15:49:16,423 on stmt: edge_reps = call $66load_method.28($80build_tuple.35, func=$66load_method.28, args=[Var($80build_tuple.35, loop_hafnian_batch.py:32)], kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:16,423 on stmt: $86load_global.37 = global(np: <module 'numpy' from 'C:\\Users\\zl4821\\Anaconda3\\envs\\GBS\\lib\\site-packages\\numpy\\__init__.py'>)
DEBUG 2022-01-28 15:49:16,423 on stmt: $88load_method.38 = getattr(value=$86load_global.37, attr=prod)
DEBUG 2022-01-28 15:49:16,423 on stmt: $const92.40 = const(int, 1)
DEBUG 2022-01-28 15:49:16,423 on stmt: $94binary_add.41 = edge_reps + $const92.40
DEBUG 2022-01-28 15:49:16,423 on stmt: steps = call $88load_method.38($94binary_add.41, func=$88load_method.38, args=[Var($94binary_add.41, loop_hafnian_batch.py:33)], kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:16,423 on stmt: $102load_method.44 = getattr(value=edge_reps, attr=max)
DEBUG 2022-01-28 15:49:16,423 on stmt: $104call_method.45 = call $102load_method.44(func=$102load_method.44, args=[], kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:16,423 on stmt: max_binom = $104call_method.45 + odd_cutoff
DEBUG 2022-01-28 15:49:16,423 on stmt: $112load_global.48 = global(precompute_binoms: CPUDispatcher(<function precompute_binoms at 0x00000241074240D0>))
DEBUG 2022-01-28 15:49:16,423 on stmt: binoms = call $112load_global.48(max_binom, func=$112load_global.48, args=[Var(max_binom, loop_hafnian_batch.py:35)], kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:16,423 on stmt: $120load_global.51 = global(np: <module 'numpy' from 'C:\\Users\\zl4821\\Anaconda3\\envs\\GBS\\lib\\site-packages\\numpy\\__init__.py'>)
DEBUG 2022-01-28 15:49:16,423 on stmt: $122load_attr.52 = getattr(value=$120load_global.51, attr=zeros)
DEBUG 2022-01-28 15:49:16,423 on stmt: $const124.53 = const(int, 2)
DEBUG 2022-01-28 15:49:16,423 on stmt: $128binary_multiply.55 = $const124.53 * batch_max
DEBUG 2022-01-28 15:49:16,423 on stmt: $132binary_add.57 = $128binary_multiply.55 + odd_cutoff
DEBUG 2022-01-28 15:49:16,423 on stmt: $const134.58 = const(int, 1)
DEBUG 2022-01-28 15:49:16,423 on stmt: $136binary_add.59 = $132binary_add.57 + $const134.58
DEBUG 2022-01-28 15:49:16,423 on stmt: $138load_global.60 = global(np: <module 'numpy' from 'C:\\Users\\zl4821\\Anaconda3\\envs\\GBS\\lib\\site-packages\\numpy\\__init__.py'>)
DEBUG 2022-01-28 15:49:16,423 on stmt: $140load_attr.61 = getattr(value=$138load_global.60, attr=complex128)
DEBUG 2022-01-28 15:49:16,423 on stmt: H_batch = call $122load_attr.52($136binary_add.59, func=$122load_attr.52, args=[Var($136binary_add.59, loop_hafnian_batch.py:38)], kws=[('dtype', Var($140load_attr.61, loop_hafnian_batch.py:38))], vararg=None, target=None)
DEBUG 2022-01-28 15:49:16,423 on stmt: $148load_global.64 = global(numba: <module 'numba' from 'C:\\Users\\zl4821\\Anaconda3\\envs\\GBS\\lib\\site-packages\\numba\\__init__.py'>)
DEBUG 2022-01-28 15:49:16,423 on stmt: $150load_method.65 = getattr(value=$148load_global.64, attr=prange)
DEBUG 2022-01-28 15:49:16,423 on stmt: $154call_method.67 = call $150load_method.65(steps, func=$150load_method.65, args=[Var(steps, loop_hafnian_batch.py:33)], kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:16,423 on stmt: $156get_iter.68 = getiter(value=$154call_method.67)
DEBUG 2022-01-28 15:49:16,423 on stmt: $phi158.0 = $156get_iter.68
DEBUG 2022-01-28 15:49:16,423 on stmt: jump 158
DEBUG 2022-01-28 15:49:16,423 ==== SSA block rewrite pass on 158
DEBUG 2022-01-28 15:49:16,423 Running <numba.core.ssa._FixSSAVars object at 0x000002410AEDDD00>
DEBUG 2022-01-28 15:49:16,423 on stmt: $158for_iter.1 = iternext(value=$phi158.0)
DEBUG 2022-01-28 15:49:16,423 on stmt: $158for_iter.2 = pair_first(value=$158for_iter.1)
DEBUG 2022-01-28 15:49:16,423 on stmt: $158for_iter.3 = pair_second(value=$158for_iter.1)
DEBUG 2022-01-28 15:49:16,423 on stmt: $phi162.1 = $158for_iter.2
DEBUG 2022-01-28 15:49:16,423 on stmt: branch $158for_iter.3, 162, 520
DEBUG 2022-01-28 15:49:16,423 ==== SSA block rewrite pass on 162
DEBUG 2022-01-28 15:49:16,423 Running <numba.core.ssa._FixSSAVars object at 0x000002410AEDDD00>
DEBUG 2022-01-28 15:49:16,423 on stmt: j = $phi162.1
DEBUG 2022-01-28 15:49:16,423 on stmt: $164load_global.2 = global(np: <module 'numpy' from 'C:\\Users\\zl4821\\Anaconda3\\envs\\GBS\\lib\\site-packages\\numpy\\__init__.py'>)
DEBUG 2022-01-28 15:49:16,423 on stmt: $166load_attr.3 = getattr(value=$164load_global.2, attr=zeros)
DEBUG 2022-01-28 15:49:16,423 on stmt: $const168.4 = const(int, 2)
DEBUG 2022-01-28 15:49:16,423 on stmt: $172binary_multiply.6 = $const168.4 * batch_max
DEBUG 2022-01-28 15:49:16,423 on stmt: $176binary_add.8 = $172binary_multiply.6 + odd_cutoff
DEBUG 2022-01-28 15:49:16,423 on stmt: $const178.9 = const(int, 1)
DEBUG 2022-01-28 15:49:16,423 on stmt: $180binary_add.10 = $176binary_add.8 + $const178.9
DEBUG 2022-01-28 15:49:16,423 on stmt: $182load_global.11 = global(np: <module 'numpy' from 'C:\\Users\\zl4821\\Anaconda3\\envs\\GBS\\lib\\site-packages\\numpy\\__init__.py'>)
DEBUG 2022-01-28 15:49:16,423 on stmt: $184load_attr.12 = getattr(value=$182load_global.11, attr=complex128)
DEBUG 2022-01-28 15:49:16,423 on stmt: Hnew = call $166load_attr.3($180binary_add.10, func=$166load_attr.3, args=[Var($180binary_add.10, loop_hafnian_batch.py:41)], kws=[('dtype', Var($184load_attr.12, loop_hafnian_batch.py:41))], vararg=None, target=None)
DEBUG 2022-01-28 15:49:16,423 on stmt: $192load_global.15 = global(find_kept_edges: CPUDispatcher(<function find_kept_edges at 0x0000024107424550>))
DEBUG 2022-01-28 15:49:16,423 on stmt: kept_edges = call $192load_global.15(j, edge_reps, func=$192load_global.15, args=[Var(j, loop_hafnian_batch.py:39), Var(edge_reps, loop_hafnian_batch.py:32)], kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:16,423 find_def var='j' stmt=kept_edges = call $192load_global.15(j, edge_reps, func=$192load_global.15, args=[Var(j, loop_hafnian_batch.py:39), Var(edge_reps, loop_hafnian_batch.py:32)], kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:16,423 on stmt: $204load_method.20 = getattr(value=kept_edges, attr=sum)
DEBUG 2022-01-28 15:49:16,423 on stmt: edges_sum = call $204load_method.20(func=$204load_method.20, args=[], kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:16,423 on stmt: binom_prod = const(float, 1.0)
DEBUG 2022-01-28 15:49:16,423 on stmt: $214load_global.23 = global(range: <class 'range'>)
DEBUG 2022-01-28 15:49:16,423 on stmt: $const216.24 = const(int, 1)
DEBUG 2022-01-28 15:49:16,423 on stmt: $const220.26 = const(int, 2)
DEBUG 2022-01-28 15:49:16,423 on stmt: $222binary_floor_divide.27 = n // $const220.26
DEBUG 2022-01-28 15:49:16,423 on stmt: $224call_function.28 = call $214load_global.23($const216.24, $222binary_floor_divide.27, func=$214load_global.23, args=[Var($const216.24, loop_hafnian_batch.py:47), Var($222binary_floor_divide.27, loop_hafnian_batch.py:47)], kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:16,423 on stmt: $226get_iter.29 = getiter(value=$224call_function.28)
DEBUG 2022-01-28 15:49:16,423 on stmt: $phi228.1 = $226get_iter.29
DEBUG 2022-01-28 15:49:16,431 on stmt: jump 228
DEBUG 2022-01-28 15:49:16,431 ==== SSA block rewrite pass on 228
DEBUG 2022-01-28 15:49:16,431 Running <numba.core.ssa._FixSSAVars object at 0x000002410AEDDD00>
DEBUG 2022-01-28 15:49:16,431 on stmt: binom_prod.2 = phi(incoming_values=[Var(binom_prod, loop_hafnian_batch.py:46), Var(binom_prod.1, loop_hafnian_batch.py:48)], incoming_blocks=[162, 230])
DEBUG 2022-01-28 15:49:16,431 on stmt: $228for_iter.2 = iternext(value=$phi228.1)
DEBUG 2022-01-28 15:49:16,431 on stmt: $228for_iter.3 = pair_first(value=$228for_iter.2)
DEBUG 2022-01-28 15:49:16,431 on stmt: $228for_iter.4 = pair_second(value=$228for_iter.2)
DEBUG 2022-01-28 15:49:16,431 on stmt: $phi230.2 = $228for_iter.3
DEBUG 2022-01-28 15:49:16,431 on stmt: branch $228for_iter.4, 230, 258
DEBUG 2022-01-28 15:49:16,431 ==== SSA block rewrite pass on 230
DEBUG 2022-01-28 15:49:16,431 Running <numba.core.ssa._FixSSAVars object at 0x000002410AEDDD00>
DEBUG 2022-01-28 15:49:16,431 on stmt: i = $phi230.2
DEBUG 2022-01-28 15:49:16,431 on stmt: $240binary_subscr.7 = getitem(value=edge_reps, index=i, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:16,431 on stmt: $246binary_subscr.10 = getitem(value=kept_edges, index=i, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:16,431 on stmt: $248build_tuple.11 = build_tuple(items=[Var($240binary_subscr.7, loop_hafnian_batch.py:48), Var($246binary_subscr.10, loop_hafnian_batch.py:48)])
DEBUG 2022-01-28 15:49:16,431 on stmt: $250binary_subscr.12 = getitem(value=binoms, index=$248build_tuple.11, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:16,431 on stmt: $252inplace_multiply.13 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=binom_prod.2, rhs=$250binary_subscr.12, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-01-28 15:49:16,431 on stmt: binom_prod.1 = $252inplace_multiply.13
DEBUG 2022-01-28 15:49:16,431 on stmt: jump 228
DEBUG 2022-01-28 15:49:16,433 ==== SSA block rewrite pass on 258
DEBUG 2022-01-28 15:49:16,433 Running <numba.core.ssa._FixSSAVars object at 0x000002410AEDDD00>
DEBUG 2022-01-28 15:49:16,433 on stmt: bool260 = global(bool: <class 'bool'>)
DEBUG 2022-01-28 15:49:16,433 on stmt: $260pred = call bool260(glynn, func=bool260, args=(Var(glynn, loop_hafnian_batch.py:24),), kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:16,433 on stmt: branch $260pred, 264, 278
DEBUG 2022-01-28 15:49:16,433 ==== SSA block rewrite pass on 264
DEBUG 2022-01-28 15:49:16,433 Running <numba.core.ssa._FixSSAVars object at 0x000002410AEDDD00>
DEBUG 2022-01-28 15:49:16,433 on stmt: $const264.1 = const(int, 2)
DEBUG 2022-01-28 15:49:16,433 on stmt: $268binary_multiply.3 = $const264.1 * kept_edges
DEBUG 2022-01-28 15:49:16,433 on stmt: delta = $268binary_multiply.3 - edge_reps
DEBUG 2022-01-28 15:49:16,433 on stmt: jump 282
DEBUG 2022-01-28 15:49:16,433 ==== SSA block rewrite pass on 278
DEBUG 2022-01-28 15:49:16,433 Running <numba.core.ssa._FixSSAVars object at 0x000002410AEDDD00>
DEBUG 2022-01-28 15:49:16,433 on stmt: delta = kept_edges
DEBUG 2022-01-28 15:49:16,433 on stmt: jump 282
DEBUG 2022-01-28 15:49:16,433 ==== SSA block rewrite pass on 282
DEBUG 2022-01-28 15:49:16,433 Running <numba.core.ssa._FixSSAVars object at 0x000002410AEDDD00>
DEBUG 2022-01-28 15:49:16,433 on stmt: $282load_global.1 = global(get_submatrices: CPUDispatcher(<function get_submatrices at 0x0000024107424E50>))
DEBUG 2022-01-28 15:49:16,433 on stmt: $292call_function.6 = call $282load_global.1(delta, A, D, oddV, func=$282load_global.1, args=[Var(delta, loop_hafnian_batch.py:51), Var(A, loop_hafnian_batch.py:24), Var(D, loop_hafnian_batch.py:24), Var(oddV, loop_hafnian_batch.py:25)], kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:16,433 on stmt: $294unpack_sequence.11 = exhaust_iter(value=$292call_function.6, count=4)
DEBUG 2022-01-28 15:49:16,433 on stmt: $294unpack_sequence.7 = static_getitem(value=$294unpack_sequence.11, index=0, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:16,433 on stmt: $294unpack_sequence.8 = static_getitem(value=$294unpack_sequence.11, index=1, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:16,433 on stmt: $294unpack_sequence.9 = static_getitem(value=$294unpack_sequence.11, index=2, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:16,433 on stmt: $294unpack_sequence.10 = static_getitem(value=$294unpack_sequence.11, index=3, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:16,433 on stmt: AX_S = $294unpack_sequence.7
DEBUG 2022-01-28 15:49:16,433 on stmt: XD_S = $294unpack_sequence.8
DEBUG 2022-01-28 15:49:16,433 on stmt: D_S = $294unpack_sequence.9
DEBUG 2022-01-28 15:49:16,433 on stmt: oddVX_S = $294unpack_sequence.10
DEBUG 2022-01-28 15:49:16,433 on stmt: $304load_global.12 = global(eigvals: CPUDispatcher(<function eigvals at 0x00000241074303A0>))
DEBUG 2022-01-28 15:49:16,433 on stmt: E = call $304load_global.12(AX_S, func=$304load_global.12, args=[Var(AX_S, loop_hafnian_batch.py:55)], kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:16,433 on stmt: $312load_global.15 = global(f_loop: CPUDispatcher(<function f_loop at 0x00000241074248B0>))
DEBUG 2022-01-28 15:49:16,433 on stmt: f_even = call $312load_global.15(E, AX_S, XD_S, D_S, N_max, func=$312load_global.15, args=[Var(E, loop_hafnian_batch.py:57), Var(AX_S, loop_hafnian_batch.py:55), Var(XD_S, loop_hafnian_batch.py:55), Var(D_S, loop_hafnian_batch.py:55), Var(N_max, loop_hafnian_batch.py:30)], kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:16,433 on stmt: $328load_global.22 = global(f_loop_odd: CPUDispatcher(<function f_loop_odd at 0x0000024107424AF0>))
DEBUG 2022-01-28 15:49:16,433 on stmt: f_odd = call $328load_global.22(E, AX_S, XD_S, D_S, N_max, oddloop, oddVX_S, func=$328load_global.22, args=[Var(E, loop_hafnian_batch.py:57), Var(AX_S, loop_hafnian_batch.py:55), Var(XD_S, loop_hafnian_batch.py:55), Var(D_S, loop_hafnian_batch.py:55), Var(N_max, loop_hafnian_batch.py:30), Var(oddloop, loop_hafnian_batch.py:24), Var(oddVX_S, loop_hafnian_batch.py:55)], kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:16,433 on stmt: $348load_global.31 = global(range: <class 'range'>)
DEBUG 2022-01-28 15:49:16,433 on stmt: $const350.32 = const(int, 2)
DEBUG 2022-01-28 15:49:16,433 on stmt: $const354.34 = const(int, 0)
DEBUG 2022-01-28 15:49:16,433 on stmt: $356binary_subscr.35 = static_getitem(value=kept_edges, index=0, index_var=$const354.34, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:16,433 on stmt: $358binary_multiply.36 = $const350.32 * $356binary_subscr.35
DEBUG 2022-01-28 15:49:16,433 on stmt: $const360.37 = const(int, 2)
DEBUG 2022-01-28 15:49:16,433 on stmt: $364binary_multiply.39 = $const360.37 * batch_max
DEBUG 2022-01-28 15:49:16,433 on stmt: $368binary_add.41 = $364binary_multiply.39 + odd_cutoff
DEBUG 2022-01-28 15:49:16,433 on stmt: $const370.42 = const(int, 1)
DEBUG 2022-01-28 15:49:16,433 on stmt: $372binary_add.43 = $368binary_add.41 + $const370.42
DEBUG 2022-01-28 15:49:16,433 on stmt: $374call_function.44 = call $348load_global.31($358binary_multiply.36, $372binary_add.43, func=$348load_global.31, args=[Var($358binary_multiply.36, loop_hafnian_batch.py:64), Var($372binary_add.43, loop_hafnian_batch.py:64)], kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:16,433 on stmt: $376get_iter.45 = getiter(value=$374call_function.44)
DEBUG 2022-01-28 15:49:16,433 on stmt: $phi378.1 = $376get_iter.45
DEBUG 2022-01-28 15:49:16,433 on stmt: jump 378
DEBUG 2022-01-28 15:49:16,433 ==== SSA block rewrite pass on 378
DEBUG 2022-01-28 15:49:16,433 Running <numba.core.ssa._FixSSAVars object at 0x000002410AEDDD00>
DEBUG 2022-01-28 15:49:16,433 on stmt: $378for_iter.2 = iternext(value=$phi378.1)
DEBUG 2022-01-28 15:49:16,433 on stmt: $378for_iter.3 = pair_first(value=$378for_iter.2)
DEBUG 2022-01-28 15:49:16,433 on stmt: $378for_iter.4 = pair_second(value=$378for_iter.2)
DEBUG 2022-01-28 15:49:16,433 on stmt: $phi380.2 = $378for_iter.3
DEBUG 2022-01-28 15:49:16,433 on stmt: branch $378for_iter.4, 380, 510
DEBUG 2022-01-28 15:49:16,433 ==== SSA block rewrite pass on 380
DEBUG 2022-01-28 15:49:16,433 Running <numba.core.ssa._FixSSAVars object at 0x000002410AEDDD00>
DEBUG 2022-01-28 15:49:16,433 on stmt: N_det = $phi380.2
DEBUG 2022-01-28 15:49:16,433 on stmt: N = N_fixed + N_det
DEBUG 2022-01-28 15:49:16,433 on stmt: $const390.6 = const(float, -1.0)
DEBUG 2022-01-28 15:49:16,433 on stmt: $const394.8 = const(int, 2)
DEBUG 2022-01-28 15:49:16,433 on stmt: $396binary_floor_divide.9 = N // $const394.8
DEBUG 2022-01-28 15:49:16,433 on stmt: $400binary_subtract.11 = $396binary_floor_divide.9 - edges_sum
DEBUG 2022-01-28 15:49:16,433 on stmt: plus_minus = $const390.6 ** $400binary_subtract.11
DEBUG 2022-01-28 15:49:16,433 on stmt: $const410.15 = const(int, 2)
DEBUG 2022-01-28 15:49:16,433 on stmt: $412binary_floor_divide.16 = N_det // $const410.15
DEBUG 2022-01-28 15:49:16,433 on stmt: $const416.18 = const(int, 0)
DEBUG 2022-01-28 15:49:16,433 on stmt: $418binary_subscr.19 = static_getitem(value=kept_edges, index=0, index_var=$const416.18, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:16,433 on stmt: $420build_tuple.20 = build_tuple(items=[Var($412binary_floor_divide.16, loop_hafnian_batch.py:68), Var($418binary_subscr.19, loop_hafnian_batch.py:68)])
DEBUG 2022-01-28 15:49:16,433 on stmt: $422binary_subscr.21 = getitem(value=binoms, index=$420build_tuple.20, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:16,441 on stmt: n_det_binom_prod = $422binary_subscr.21 * binom_prod.2
DEBUG 2022-01-28 15:49:16,441 on stmt: $const432.25 = const(int, 2)
DEBUG 2022-01-28 15:49:16,441 on stmt: $434binary_modulo.26 = N_det % $const432.25
DEBUG 2022-01-28 15:49:16,441 on stmt: $const436.27 = const(int, 0)
DEBUG 2022-01-28 15:49:16,441 on stmt: $438compare_op.28 = $434binary_modulo.26 == $const436.27
DEBUG 2022-01-28 15:49:16,441 on stmt: bool440 = global(bool: <class 'bool'>)
DEBUG 2022-01-28 15:49:16,441 on stmt: $440pred = call bool440($438compare_op.28, func=bool440, args=(Var($438compare_op.28, loop_hafnian_batch.py:70),), kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:16,441 on stmt: branch $440pred, 444, 478
DEBUG 2022-01-28 15:49:16,441 ==== SSA block rewrite pass on 444
DEBUG 2022-01-28 15:49:16,441 Running <numba.core.ssa._FixSSAVars object at 0x000002410AEDDD00>
DEBUG 2022-01-28 15:49:16,441 on stmt: $450binary_subscr.6 = getitem(value=Hnew, index=N_det, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:16,441 on stmt: $456binary_multiply.9 = n_det_binom_prod * plus_minus
DEBUG 2022-01-28 15:49:16,441 on stmt: $const462.12 = const(int, 2)
DEBUG 2022-01-28 15:49:16,441 on stmt: $464binary_floor_divide.13 = N // $const462.12
DEBUG 2022-01-28 15:49:16,441 on stmt: $466binary_subscr.14 = getitem(value=f_even, index=$464binary_floor_divide.13, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:16,441 on stmt: $468binary_multiply.15 = $456binary_multiply.9 * $466binary_subscr.14
DEBUG 2022-01-28 15:49:16,441 on stmt: $470inplace_add.16 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$450binary_subscr.6, rhs=$468binary_multiply.15, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-01-28 15:49:16,441 on stmt: Hnew[N_det] = $470inplace_add.16
DEBUG 2022-01-28 15:49:16,441 on stmt: jump 506
DEBUG 2022-01-28 15:49:16,443 ==== SSA block rewrite pass on 478
DEBUG 2022-01-28 15:49:16,443 Running <numba.core.ssa._FixSSAVars object at 0x000002410AEDDD00>
DEBUG 2022-01-28 15:49:16,443 on stmt: $484binary_subscr.6 = getitem(value=Hnew, index=N_det, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:16,443 on stmt: $490binary_multiply.9 = n_det_binom_prod * plus_minus
DEBUG 2022-01-28 15:49:16,443 on stmt: $496binary_subscr.12 = getitem(value=f_odd, index=N, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:16,443 on stmt: $498binary_multiply.13 = $490binary_multiply.9 * $496binary_subscr.12
DEBUG 2022-01-28 15:49:16,443 on stmt: $500inplace_add.14 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$484binary_subscr.6, rhs=$498binary_multiply.13, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-01-28 15:49:16,443 on stmt: Hnew[N_det] = $500inplace_add.14
DEBUG 2022-01-28 15:49:16,443 on stmt: jump 506
DEBUG 2022-01-28 15:49:16,443 ==== SSA block rewrite pass on 506
DEBUG 2022-01-28 15:49:16,443 Running <numba.core.ssa._FixSSAVars object at 0x000002410AEDDD00>
DEBUG 2022-01-28 15:49:16,443 on stmt: jump 378
DEBUG 2022-01-28 15:49:16,443 ==== SSA block rewrite pass on 510
DEBUG 2022-01-28 15:49:16,443 Running <numba.core.ssa._FixSSAVars object at 0x000002410AEDDD00>
DEBUG 2022-01-28 15:49:16,443 on stmt: $514inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=H_batch, rhs=Hnew, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-01-28 15:49:16,443 on stmt: H_batch = $514inplace_add.3
DEBUG 2022-01-28 15:49:16,443 on stmt: jump 158
DEBUG 2022-01-28 15:49:16,443 ==== SSA block rewrite pass on 520
DEBUG 2022-01-28 15:49:16,443 Running <numba.core.ssa._FixSSAVars object at 0x000002410AEDDD00>
DEBUG 2022-01-28 15:49:16,443 on stmt: bool522 = global(bool: <class 'bool'>)
DEBUG 2022-01-28 15:49:16,443 on stmt: $522pred = call bool522(glynn, func=bool522, args=(Var(glynn, loop_hafnian_batch.py:24),), kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:16,443 on stmt: branch $522pred, 526, 580
DEBUG 2022-01-28 15:49:16,443 ==== SSA block rewrite pass on 526
DEBUG 2022-01-28 15:49:16,443 Running <numba.core.ssa._FixSSAVars object at 0x000002410AEDDD00>
DEBUG 2022-01-28 15:49:16,443 on stmt: $526load_global.0 = global(range: <class 'range'>)
DEBUG 2022-01-28 15:49:16,443 on stmt: $530load_attr.2 = getattr(value=H_batch, attr=shape)
DEBUG 2022-01-28 15:49:16,443 on stmt: $const532.3 = const(int, 0)
DEBUG 2022-01-28 15:49:16,443 on stmt: $534binary_subscr.4 = static_getitem(value=$530load_attr.2, index=0, index_var=$const532.3, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:16,443 on stmt: $536call_function.5 = call $526load_global.0($534binary_subscr.4, func=$526load_global.0, args=[Var($534binary_subscr.4, loop_hafnian_batch.py:78)], kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:16,443 on stmt: $538get_iter.6 = getiter(value=$536call_function.5)
DEBUG 2022-01-28 15:49:16,443 on stmt: $phi540.0 = $538get_iter.6
DEBUG 2022-01-28 15:49:16,443 on stmt: jump 540
DEBUG 2022-01-28 15:49:16,443 ==== SSA block rewrite pass on 540
DEBUG 2022-01-28 15:49:16,443 Running <numba.core.ssa._FixSSAVars object at 0x000002410AEDDD00>
DEBUG 2022-01-28 15:49:16,443 on stmt: $540for_iter.1 = iternext(value=$phi540.0)
DEBUG 2022-01-28 15:49:16,443 on stmt: $540for_iter.2 = pair_first(value=$540for_iter.1)
DEBUG 2022-01-28 15:49:16,443 on stmt: $540for_iter.3 = pair_second(value=$540for_iter.1)
DEBUG 2022-01-28 15:49:16,443 on stmt: $phi542.1 = $540for_iter.2
DEBUG 2022-01-28 15:49:16,443 on stmt: branch $540for_iter.3, 542, 580
DEBUG 2022-01-28 15:49:16,443 ==== SSA block rewrite pass on 542
DEBUG 2022-01-28 15:49:16,443 Running <numba.core.ssa._FixSSAVars object at 0x000002410AEDDD00>
DEBUG 2022-01-28 15:49:16,443 on stmt: j.1 = $phi542.1
DEBUG 2022-01-28 15:49:16,443 on stmt: x = N_fixed + j
DEBUG 2022-01-28 15:49:16,443 find_def var='j' stmt=x = N_fixed + j
DEBUG 2022-01-28 15:49:16,443 replaced with: x = N_fixed + j.1
DEBUG 2022-01-28 15:49:16,443 on stmt: $558binary_subscr.9 = getitem(value=H_batch, index=j, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:16,443 find_def var='j' stmt=$558binary_subscr.9 = getitem(value=H_batch, index=j, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:16,443 replaced with: $558binary_subscr.9 = getitem(value=H_batch, index=j.1, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:16,443 on stmt: $const560.10 = const(float, 0.5)
DEBUG 2022-01-28 15:49:16,443 on stmt: $const564.12 = const(int, 2)
DEBUG 2022-01-28 15:49:16,443 on stmt: $566binary_floor_divide.13 = x // $const564.12
DEBUG 2022-01-28 15:49:16,443 on stmt: $568binary_power.14 = $const560.10 ** $566binary_floor_divide.13
DEBUG 2022-01-28 15:49:16,443 on stmt: $570inplace_multiply.15 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=$558binary_subscr.9, rhs=$568binary_power.14, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-01-28 15:49:16,443 on stmt: H_batch[j] = $570inplace_multiply.15
DEBUG 2022-01-28 15:49:16,443 find_def var='j' stmt=H_batch[j] = $570inplace_multiply.15
DEBUG 2022-01-28 15:49:16,443 replaced with: H_batch[j.1] = $570inplace_multiply.15
DEBUG 2022-01-28 15:49:16,443 on stmt: jump 540
DEBUG 2022-01-28 15:49:16,443 ==== SSA block rewrite pass on 580
DEBUG 2022-01-28 15:49:16,443 Running <numba.core.ssa._FixSSAVars object at 0x000002410AEDDD00>
DEBUG 2022-01-28 15:49:16,443 on stmt: $582return_value.1 = cast(value=H_batch)
DEBUG 2022-01-28 15:49:16,443 on stmt: return $582return_value.1
DEBUG 2022-01-28 15:49:16,443 Fix SSA violator on var H_batch
DEBUG 2022-01-28 15:49:16,443 ==== SSA block rewrite pass on 0
DEBUG 2022-01-28 15:49:16,443 Running <numba.core.ssa._FreshVarHandler object at 0x0000024108BEACA0>
DEBUG 2022-01-28 15:49:16,443 on stmt: A = arg(0, name=A)
DEBUG 2022-01-28 15:49:16,443 on stmt: D = arg(1, name=D)
DEBUG 2022-01-28 15:49:16,443 on stmt: fixed_edge_reps = arg(2, name=fixed_edge_reps)
DEBUG 2022-01-28 15:49:16,443 on stmt: batch_max = arg(3, name=batch_max)
DEBUG 2022-01-28 15:49:16,443 on stmt: odd_cutoff = arg(4, name=odd_cutoff)
DEBUG 2022-01-28 15:49:16,443 on stmt: glynn = arg(5, name=glynn)
DEBUG 2022-01-28 15:49:16,443 on stmt: $const4.1 = const(int, 0)
DEBUG 2022-01-28 15:49:16,443 on stmt: oddloop = static_getitem(value=D, index=0, index_var=$const4.1, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:16,443 on stmt: $const12.4 = const(int, 0)
DEBUG 2022-01-28 15:49:16,443 on stmt: $const14.5 = const(NoneType, None)
DEBUG 2022-01-28 15:49:16,443 on stmt: $const16.6 = const(NoneType, None)
DEBUG 2022-01-28 15:49:16,443 on stmt: $18build_slice.7 = global(slice: <class 'slice'>)
DEBUG 2022-01-28 15:49:16,443 on stmt: $18build_slice.8 = call $18build_slice.7($const14.5, $const16.6, func=$18build_slice.7, args=(Var($const14.5, loop_hafnian_batch.py:25), Var($const16.6, loop_hafnian_batch.py:25)), kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:16,443 on stmt: $20build_tuple.9 = build_tuple(items=[Var($const12.4, loop_hafnian_batch.py:25), Var($18build_slice.8, loop_hafnian_batch.py:25)])
DEBUG 2022-01-28 15:49:16,443 on stmt: oddV = static_getitem(value=A, index=(0, slice(None, None, None)), index_var=$20build_tuple.9, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:16,443 on stmt: $28load_attr.12 = getattr(value=A, attr=shape)
DEBUG 2022-01-28 15:49:16,443 on stmt: $const30.13 = const(int, 0)
DEBUG 2022-01-28 15:49:16,443 on stmt: n = static_getitem(value=$28load_attr.12, index=0, index_var=$const30.13, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:16,443 on stmt: $const36.15 = const(int, 2)
DEBUG 2022-01-28 15:49:16,451 on stmt: $40load_method.17 = getattr(value=fixed_edge_reps, attr=sum)
DEBUG 2022-01-28 15:49:16,451 on stmt: $42call_method.18 = call $40load_method.17(func=$40load_method.17, args=[], kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:16,451 on stmt: N_fixed = $const36.15 * $42call_method.18
DEBUG 2022-01-28 15:49:16,451 on stmt: $const50.21 = const(int, 2)
DEBUG 2022-01-28 15:49:16,451 on stmt: $54binary_multiply.23 = $const50.21 * batch_max
DEBUG 2022-01-28 15:49:16,451 on stmt: $56binary_add.24 = N_fixed + $54binary_multiply.23
DEBUG 2022-01-28 15:49:16,451 on stmt: N_max = $56binary_add.24 + odd_cutoff
DEBUG 2022-01-28 15:49:16,451 on stmt: $64load_global.27 = global(np: <module 'numpy' from 'C:\\Users\\zl4821\\Anaconda3\\envs\\GBS\\lib\\site-packages\\numpy\\__init__.py'>)
DEBUG 2022-01-28 15:49:16,451 on stmt: $66load_method.28 = getattr(value=$64load_global.27, attr=concatenate)
DEBUG 2022-01-28 15:49:16,451 on stmt: $68load_global.29 = global(np: <module 'numpy' from 'C:\\Users\\zl4821\\Anaconda3\\envs\\GBS\\lib\\site-packages\\numpy\\__init__.py'>)
DEBUG 2022-01-28 15:49:16,451 on stmt: $70load_method.30 = getattr(value=$68load_global.29, attr=array)
DEBUG 2022-01-28 15:49:16,451 on stmt: $74build_list.32 = build_list(items=[Var(batch_max, loop_hafnian_batch.py:24)])
DEBUG 2022-01-28 15:49:16,451 on stmt: $76call_method.33 = call $70load_method.30($74build_list.32, func=$70load_method.30, args=[Var($74build_list.32, loop_hafnian_batch.py:32)], kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:16,451 on stmt: $80build_tuple.35 = build_tuple(items=[Var($76call_method.33, loop_hafnian_batch.py:32), Var(fixed_edge_reps, loop_hafnian_batch.py:24)])
DEBUG 2022-01-28 15:49:16,451 on stmt: edge_reps = call $66load_method.28($80build_tuple.35, func=$66load_method.28, args=[Var($80build_tuple.35, loop_hafnian_batch.py:32)], kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:16,453 on stmt: $86load_global.37 = global(np: <module 'numpy' from 'C:\\Users\\zl4821\\Anaconda3\\envs\\GBS\\lib\\site-packages\\numpy\\__init__.py'>)
DEBUG 2022-01-28 15:49:16,453 on stmt: $88load_method.38 = getattr(value=$86load_global.37, attr=prod)
DEBUG 2022-01-28 15:49:16,453 on stmt: $const92.40 = const(int, 1)
DEBUG 2022-01-28 15:49:16,453 on stmt: $94binary_add.41 = edge_reps + $const92.40
DEBUG 2022-01-28 15:49:16,453 on stmt: steps = call $88load_method.38($94binary_add.41, func=$88load_method.38, args=[Var($94binary_add.41, loop_hafnian_batch.py:33)], kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:16,453 on stmt: $102load_method.44 = getattr(value=edge_reps, attr=max)
DEBUG 2022-01-28 15:49:16,453 on stmt: $104call_method.45 = call $102load_method.44(func=$102load_method.44, args=[], kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:16,453 on stmt: max_binom = $104call_method.45 + odd_cutoff
DEBUG 2022-01-28 15:49:16,453 on stmt: $112load_global.48 = global(precompute_binoms: CPUDispatcher(<function precompute_binoms at 0x00000241074240D0>))
DEBUG 2022-01-28 15:49:16,453 on stmt: binoms = call $112load_global.48(max_binom, func=$112load_global.48, args=[Var(max_binom, loop_hafnian_batch.py:35)], kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:16,453 on stmt: $120load_global.51 = global(np: <module 'numpy' from 'C:\\Users\\zl4821\\Anaconda3\\envs\\GBS\\lib\\site-packages\\numpy\\__init__.py'>)
DEBUG 2022-01-28 15:49:16,453 on stmt: $122load_attr.52 = getattr(value=$120load_global.51, attr=zeros)
DEBUG 2022-01-28 15:49:16,453 on stmt: $const124.53 = const(int, 2)
DEBUG 2022-01-28 15:49:16,453 on stmt: $128binary_multiply.55 = $const124.53 * batch_max
DEBUG 2022-01-28 15:49:16,453 on stmt: $132binary_add.57 = $128binary_multiply.55 + odd_cutoff
DEBUG 2022-01-28 15:49:16,453 on stmt: $const134.58 = const(int, 1)
DEBUG 2022-01-28 15:49:16,453 on stmt: $136binary_add.59 = $132binary_add.57 + $const134.58
DEBUG 2022-01-28 15:49:16,453 on stmt: $138load_global.60 = global(np: <module 'numpy' from 'C:\\Users\\zl4821\\Anaconda3\\envs\\GBS\\lib\\site-packages\\numpy\\__init__.py'>)
DEBUG 2022-01-28 15:49:16,453 on stmt: $140load_attr.61 = getattr(value=$138load_global.60, attr=complex128)
DEBUG 2022-01-28 15:49:16,453 on stmt: H_batch = call $122load_attr.52($136binary_add.59, func=$122load_attr.52, args=[Var($136binary_add.59, loop_hafnian_batch.py:38)], kws=[('dtype', Var($140load_attr.61, loop_hafnian_batch.py:38))], vararg=None, target=None)
DEBUG 2022-01-28 15:49:16,453 first assign: H_batch
DEBUG 2022-01-28 15:49:16,453 replaced with: H_batch = call $122load_attr.52($136binary_add.59, func=$122load_attr.52, args=[Var($136binary_add.59, loop_hafnian_batch.py:38)], kws=[('dtype', Var($140load_attr.61, loop_hafnian_batch.py:38))], vararg=None, target=None)
DEBUG 2022-01-28 15:49:16,453 on stmt: $148load_global.64 = global(numba: <module 'numba' from 'C:\\Users\\zl4821\\Anaconda3\\envs\\GBS\\lib\\site-packages\\numba\\__init__.py'>)
DEBUG 2022-01-28 15:49:16,453 on stmt: $150load_method.65 = getattr(value=$148load_global.64, attr=prange)
DEBUG 2022-01-28 15:49:16,453 on stmt: $154call_method.67 = call $150load_method.65(steps, func=$150load_method.65, args=[Var(steps, loop_hafnian_batch.py:33)], kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:16,453 on stmt: $156get_iter.68 = getiter(value=$154call_method.67)
DEBUG 2022-01-28 15:49:16,453 on stmt: $phi158.0 = $156get_iter.68
DEBUG 2022-01-28 15:49:16,453 on stmt: jump 158
DEBUG 2022-01-28 15:49:16,453 ==== SSA block rewrite pass on 158
DEBUG 2022-01-28 15:49:16,453 Running <numba.core.ssa._FreshVarHandler object at 0x0000024108BEACA0>
DEBUG 2022-01-28 15:49:16,453 on stmt: $158for_iter.1 = iternext(value=$phi158.0)
DEBUG 2022-01-28 15:49:16,453 on stmt: $158for_iter.2 = pair_first(value=$158for_iter.1)
DEBUG 2022-01-28 15:49:16,453 on stmt: $158for_iter.3 = pair_second(value=$158for_iter.1)
DEBUG 2022-01-28 15:49:16,453 on stmt: $phi162.1 = $158for_iter.2
DEBUG 2022-01-28 15:49:16,453 on stmt: branch $158for_iter.3, 162, 520
DEBUG 2022-01-28 15:49:16,453 ==== SSA block rewrite pass on 162
DEBUG 2022-01-28 15:49:16,453 Running <numba.core.ssa._FreshVarHandler object at 0x0000024108BEACA0>
DEBUG 2022-01-28 15:49:16,453 on stmt: j = $phi162.1
DEBUG 2022-01-28 15:49:16,453 on stmt: $164load_global.2 = global(np: <module 'numpy' from 'C:\\Users\\zl4821\\Anaconda3\\envs\\GBS\\lib\\site-packages\\numpy\\__init__.py'>)
DEBUG 2022-01-28 15:49:16,453 on stmt: $166load_attr.3 = getattr(value=$164load_global.2, attr=zeros)
DEBUG 2022-01-28 15:49:16,453 on stmt: $const168.4 = const(int, 2)
DEBUG 2022-01-28 15:49:16,453 on stmt: $172binary_multiply.6 = $const168.4 * batch_max
DEBUG 2022-01-28 15:49:16,453 on stmt: $176binary_add.8 = $172binary_multiply.6 + odd_cutoff
DEBUG 2022-01-28 15:49:16,453 on stmt: $const178.9 = const(int, 1)
DEBUG 2022-01-28 15:49:16,453 on stmt: $180binary_add.10 = $176binary_add.8 + $const178.9
DEBUG 2022-01-28 15:49:16,453 on stmt: $182load_global.11 = global(np: <module 'numpy' from 'C:\\Users\\zl4821\\Anaconda3\\envs\\GBS\\lib\\site-packages\\numpy\\__init__.py'>)
DEBUG 2022-01-28 15:49:16,453 on stmt: $184load_attr.12 = getattr(value=$182load_global.11, attr=complex128)
DEBUG 2022-01-28 15:49:16,453 on stmt: Hnew = call $166load_attr.3($180binary_add.10, func=$166load_attr.3, args=[Var($180binary_add.10, loop_hafnian_batch.py:41)], kws=[('dtype', Var($184load_attr.12, loop_hafnian_batch.py:41))], vararg=None, target=None)
DEBUG 2022-01-28 15:49:16,453 on stmt: $192load_global.15 = global(find_kept_edges: CPUDispatcher(<function find_kept_edges at 0x0000024107424550>))
DEBUG 2022-01-28 15:49:16,453 on stmt: kept_edges = call $192load_global.15(j, edge_reps, func=$192load_global.15, args=[Var(j, loop_hafnian_batch.py:39), Var(edge_reps, loop_hafnian_batch.py:32)], kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:16,453 on stmt: $204load_method.20 = getattr(value=kept_edges, attr=sum)
DEBUG 2022-01-28 15:49:16,453 on stmt: edges_sum = call $204load_method.20(func=$204load_method.20, args=[], kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:16,453 on stmt: binom_prod = const(float, 1.0)
DEBUG 2022-01-28 15:49:16,453 on stmt: $214load_global.23 = global(range: <class 'range'>)
DEBUG 2022-01-28 15:49:16,453 on stmt: $const216.24 = const(int, 1)
DEBUG 2022-01-28 15:49:16,453 on stmt: $const220.26 = const(int, 2)
DEBUG 2022-01-28 15:49:16,453 on stmt: $222binary_floor_divide.27 = n // $const220.26
DEBUG 2022-01-28 15:49:16,453 on stmt: $224call_function.28 = call $214load_global.23($const216.24, $222binary_floor_divide.27, func=$214load_global.23, args=[Var($const216.24, loop_hafnian_batch.py:47), Var($222binary_floor_divide.27, loop_hafnian_batch.py:47)], kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:16,453 on stmt: $226get_iter.29 = getiter(value=$224call_function.28)
DEBUG 2022-01-28 15:49:16,453 on stmt: $phi228.1 = $226get_iter.29
DEBUG 2022-01-28 15:49:16,453 on stmt: jump 228
DEBUG 2022-01-28 15:49:16,453 ==== SSA block rewrite pass on 228
DEBUG 2022-01-28 15:49:16,453 Running <numba.core.ssa._FreshVarHandler object at 0x0000024108BEACA0>
DEBUG 2022-01-28 15:49:16,453 on stmt: binom_prod.2 = phi(incoming_values=[Var(binom_prod, loop_hafnian_batch.py:46), Var(binom_prod.1, loop_hafnian_batch.py:48)], incoming_blocks=[162, 230])
DEBUG 2022-01-28 15:49:16,453 on stmt: $228for_iter.2 = iternext(value=$phi228.1)
DEBUG 2022-01-28 15:49:16,453 on stmt: $228for_iter.3 = pair_first(value=$228for_iter.2)
DEBUG 2022-01-28 15:49:16,453 on stmt: $228for_iter.4 = pair_second(value=$228for_iter.2)
DEBUG 2022-01-28 15:49:16,453 on stmt: $phi230.2 = $228for_iter.3
DEBUG 2022-01-28 15:49:16,453 on stmt: branch $228for_iter.4, 230, 258
DEBUG 2022-01-28 15:49:16,453 ==== SSA block rewrite pass on 230
DEBUG 2022-01-28 15:49:16,453 Running <numba.core.ssa._FreshVarHandler object at 0x0000024108BEACA0>
DEBUG 2022-01-28 15:49:16,453 on stmt: i = $phi230.2
DEBUG 2022-01-28 15:49:16,453 on stmt: $240binary_subscr.7 = getitem(value=edge_reps, index=i, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:16,453 on stmt: $246binary_subscr.10 = getitem(value=kept_edges, index=i, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:16,453 on stmt: $248build_tuple.11 = build_tuple(items=[Var($240binary_subscr.7, loop_hafnian_batch.py:48), Var($246binary_subscr.10, loop_hafnian_batch.py:48)])
DEBUG 2022-01-28 15:49:16,461 on stmt: $250binary_subscr.12 = getitem(value=binoms, index=$248build_tuple.11, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:16,461 on stmt: $252inplace_multiply.13 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=binom_prod.2, rhs=$250binary_subscr.12, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-01-28 15:49:16,461 on stmt: binom_prod.1 = $252inplace_multiply.13
DEBUG 2022-01-28 15:49:16,461 on stmt: jump 228
DEBUG 2022-01-28 15:49:16,461 ==== SSA block rewrite pass on 258
DEBUG 2022-01-28 15:49:16,461 Running <numba.core.ssa._FreshVarHandler object at 0x0000024108BEACA0>
DEBUG 2022-01-28 15:49:16,461 on stmt: bool260 = global(bool: <class 'bool'>)
DEBUG 2022-01-28 15:49:16,461 on stmt: $260pred = call bool260(glynn, func=bool260, args=(Var(glynn, loop_hafnian_batch.py:24),), kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:16,461 on stmt: branch $260pred, 264, 278
DEBUG 2022-01-28 15:49:16,461 ==== SSA block rewrite pass on 264
DEBUG 2022-01-28 15:49:16,461 Running <numba.core.ssa._FreshVarHandler object at 0x0000024108BEACA0>
DEBUG 2022-01-28 15:49:16,461 on stmt: $const264.1 = const(int, 2)
DEBUG 2022-01-28 15:49:16,461 on stmt: $268binary_multiply.3 = $const264.1 * kept_edges
DEBUG 2022-01-28 15:49:16,461 on stmt: delta = $268binary_multiply.3 - edge_reps
DEBUG 2022-01-28 15:49:16,461 on stmt: jump 282
DEBUG 2022-01-28 15:49:16,461 ==== SSA block rewrite pass on 278
DEBUG 2022-01-28 15:49:16,461 Running <numba.core.ssa._FreshVarHandler object at 0x0000024108BEACA0>
DEBUG 2022-01-28 15:49:16,461 on stmt: delta = kept_edges
DEBUG 2022-01-28 15:49:16,461 on stmt: jump 282
DEBUG 2022-01-28 15:49:16,461 ==== SSA block rewrite pass on 282
DEBUG 2022-01-28 15:49:16,463 Running <numba.core.ssa._FreshVarHandler object at 0x0000024108BEACA0>
DEBUG 2022-01-28 15:49:16,463 on stmt: $282load_global.1 = global(get_submatrices: CPUDispatcher(<function get_submatrices at 0x0000024107424E50>))
DEBUG 2022-01-28 15:49:16,463 on stmt: $292call_function.6 = call $282load_global.1(delta, A, D, oddV, func=$282load_global.1, args=[Var(delta, loop_hafnian_batch.py:51), Var(A, loop_hafnian_batch.py:24), Var(D, loop_hafnian_batch.py:24), Var(oddV, loop_hafnian_batch.py:25)], kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:16,463 on stmt: $294unpack_sequence.11 = exhaust_iter(value=$292call_function.6, count=4)
DEBUG 2022-01-28 15:49:16,463 on stmt: $294unpack_sequence.7 = static_getitem(value=$294unpack_sequence.11, index=0, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:16,463 on stmt: $294unpack_sequence.8 = static_getitem(value=$294unpack_sequence.11, index=1, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:16,463 on stmt: $294unpack_sequence.9 = static_getitem(value=$294unpack_sequence.11, index=2, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:16,463 on stmt: $294unpack_sequence.10 = static_getitem(value=$294unpack_sequence.11, index=3, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:16,463 on stmt: AX_S = $294unpack_sequence.7
DEBUG 2022-01-28 15:49:16,463 on stmt: XD_S = $294unpack_sequence.8
DEBUG 2022-01-28 15:49:16,463 on stmt: D_S = $294unpack_sequence.9
DEBUG 2022-01-28 15:49:16,463 on stmt: oddVX_S = $294unpack_sequence.10
DEBUG 2022-01-28 15:49:16,463 on stmt: $304load_global.12 = global(eigvals: CPUDispatcher(<function eigvals at 0x00000241074303A0>))
DEBUG 2022-01-28 15:49:16,463 on stmt: E = call $304load_global.12(AX_S, func=$304load_global.12, args=[Var(AX_S, loop_hafnian_batch.py:55)], kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:16,463 on stmt: $312load_global.15 = global(f_loop: CPUDispatcher(<function f_loop at 0x00000241074248B0>))
DEBUG 2022-01-28 15:49:16,463 on stmt: f_even = call $312load_global.15(E, AX_S, XD_S, D_S, N_max, func=$312load_global.15, args=[Var(E, loop_hafnian_batch.py:57), Var(AX_S, loop_hafnian_batch.py:55), Var(XD_S, loop_hafnian_batch.py:55), Var(D_S, loop_hafnian_batch.py:55), Var(N_max, loop_hafnian_batch.py:30)], kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:16,463 on stmt: $328load_global.22 = global(f_loop_odd: CPUDispatcher(<function f_loop_odd at 0x0000024107424AF0>))
DEBUG 2022-01-28 15:49:16,463 on stmt: f_odd = call $328load_global.22(E, AX_S, XD_S, D_S, N_max, oddloop, oddVX_S, func=$328load_global.22, args=[Var(E, loop_hafnian_batch.py:57), Var(AX_S, loop_hafnian_batch.py:55), Var(XD_S, loop_hafnian_batch.py:55), Var(D_S, loop_hafnian_batch.py:55), Var(N_max, loop_hafnian_batch.py:30), Var(oddloop, loop_hafnian_batch.py:24), Var(oddVX_S, loop_hafnian_batch.py:55)], kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:16,463 on stmt: $348load_global.31 = global(range: <class 'range'>)
DEBUG 2022-01-28 15:49:16,463 on stmt: $const350.32 = const(int, 2)
DEBUG 2022-01-28 15:49:16,463 on stmt: $const354.34 = const(int, 0)
DEBUG 2022-01-28 15:49:16,463 on stmt: $356binary_subscr.35 = static_getitem(value=kept_edges, index=0, index_var=$const354.34, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:16,463 on stmt: $358binary_multiply.36 = $const350.32 * $356binary_subscr.35
DEBUG 2022-01-28 15:49:16,463 on stmt: $const360.37 = const(int, 2)
DEBUG 2022-01-28 15:49:16,463 on stmt: $364binary_multiply.39 = $const360.37 * batch_max
DEBUG 2022-01-28 15:49:16,463 on stmt: $368binary_add.41 = $364binary_multiply.39 + odd_cutoff
DEBUG 2022-01-28 15:49:16,463 on stmt: $const370.42 = const(int, 1)
DEBUG 2022-01-28 15:49:16,463 on stmt: $372binary_add.43 = $368binary_add.41 + $const370.42
DEBUG 2022-01-28 15:49:16,463 on stmt: $374call_function.44 = call $348load_global.31($358binary_multiply.36, $372binary_add.43, func=$348load_global.31, args=[Var($358binary_multiply.36, loop_hafnian_batch.py:64), Var($372binary_add.43, loop_hafnian_batch.py:64)], kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:16,463 on stmt: $376get_iter.45 = getiter(value=$374call_function.44)
DEBUG 2022-01-28 15:49:16,463 on stmt: $phi378.1 = $376get_iter.45
DEBUG 2022-01-28 15:49:16,463 on stmt: jump 378
DEBUG 2022-01-28 15:49:16,463 ==== SSA block rewrite pass on 378
DEBUG 2022-01-28 15:49:16,463 Running <numba.core.ssa._FreshVarHandler object at 0x0000024108BEACA0>
DEBUG 2022-01-28 15:49:16,463 on stmt: $378for_iter.2 = iternext(value=$phi378.1)
DEBUG 2022-01-28 15:49:16,463 on stmt: $378for_iter.3 = pair_first(value=$378for_iter.2)
DEBUG 2022-01-28 15:49:16,463 on stmt: $378for_iter.4 = pair_second(value=$378for_iter.2)
DEBUG 2022-01-28 15:49:16,463 on stmt: $phi380.2 = $378for_iter.3
DEBUG 2022-01-28 15:49:16,463 on stmt: branch $378for_iter.4, 380, 510
DEBUG 2022-01-28 15:49:16,463 ==== SSA block rewrite pass on 380
DEBUG 2022-01-28 15:49:16,463 Running <numba.core.ssa._FreshVarHandler object at 0x0000024108BEACA0>
DEBUG 2022-01-28 15:49:16,463 on stmt: N_det = $phi380.2
DEBUG 2022-01-28 15:49:16,463 on stmt: N = N_fixed + N_det
DEBUG 2022-01-28 15:49:16,463 on stmt: $const390.6 = const(float, -1.0)
DEBUG 2022-01-28 15:49:16,463 on stmt: $const394.8 = const(int, 2)
DEBUG 2022-01-28 15:49:16,463 on stmt: $396binary_floor_divide.9 = N // $const394.8
DEBUG 2022-01-28 15:49:16,463 on stmt: $400binary_subtract.11 = $396binary_floor_divide.9 - edges_sum
DEBUG 2022-01-28 15:49:16,463 on stmt: plus_minus = $const390.6 ** $400binary_subtract.11
DEBUG 2022-01-28 15:49:16,463 on stmt: $const410.15 = const(int, 2)
DEBUG 2022-01-28 15:49:16,463 on stmt: $412binary_floor_divide.16 = N_det // $const410.15
DEBUG 2022-01-28 15:49:16,463 on stmt: $const416.18 = const(int, 0)
DEBUG 2022-01-28 15:49:16,463 on stmt: $418binary_subscr.19 = static_getitem(value=kept_edges, index=0, index_var=$const416.18, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:16,463 on stmt: $420build_tuple.20 = build_tuple(items=[Var($412binary_floor_divide.16, loop_hafnian_batch.py:68), Var($418binary_subscr.19, loop_hafnian_batch.py:68)])
DEBUG 2022-01-28 15:49:16,463 on stmt: $422binary_subscr.21 = getitem(value=binoms, index=$420build_tuple.20, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:16,463 on stmt: n_det_binom_prod = $422binary_subscr.21 * binom_prod.2
DEBUG 2022-01-28 15:49:16,463 on stmt: $const432.25 = const(int, 2)
DEBUG 2022-01-28 15:49:16,463 on stmt: $434binary_modulo.26 = N_det % $const432.25
DEBUG 2022-01-28 15:49:16,463 on stmt: $const436.27 = const(int, 0)
DEBUG 2022-01-28 15:49:16,463 on stmt: $438compare_op.28 = $434binary_modulo.26 == $const436.27
DEBUG 2022-01-28 15:49:16,463 on stmt: bool440 = global(bool: <class 'bool'>)
DEBUG 2022-01-28 15:49:16,463 on stmt: $440pred = call bool440($438compare_op.28, func=bool440, args=(Var($438compare_op.28, loop_hafnian_batch.py:70),), kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:16,463 on stmt: branch $440pred, 444, 478
DEBUG 2022-01-28 15:49:16,463 ==== SSA block rewrite pass on 444
DEBUG 2022-01-28 15:49:16,463 Running <numba.core.ssa._FreshVarHandler object at 0x0000024108BEACA0>
DEBUG 2022-01-28 15:49:16,463 on stmt: $450binary_subscr.6 = getitem(value=Hnew, index=N_det, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:16,463 on stmt: $456binary_multiply.9 = n_det_binom_prod * plus_minus
DEBUG 2022-01-28 15:49:16,463 on stmt: $const462.12 = const(int, 2)
DEBUG 2022-01-28 15:49:16,463 on stmt: $464binary_floor_divide.13 = N // $const462.12
DEBUG 2022-01-28 15:49:16,463 on stmt: $466binary_subscr.14 = getitem(value=f_even, index=$464binary_floor_divide.13, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:16,463 on stmt: $468binary_multiply.15 = $456binary_multiply.9 * $466binary_subscr.14
DEBUG 2022-01-28 15:49:16,463 on stmt: $470inplace_add.16 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$450binary_subscr.6, rhs=$468binary_multiply.15, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-01-28 15:49:16,463 on stmt: Hnew[N_det] = $470inplace_add.16
DEBUG 2022-01-28 15:49:16,463 on stmt: jump 506
DEBUG 2022-01-28 15:49:16,463 ==== SSA block rewrite pass on 478
DEBUG 2022-01-28 15:49:16,463 Running <numba.core.ssa._FreshVarHandler object at 0x0000024108BEACA0>
DEBUG 2022-01-28 15:49:16,463 on stmt: $484binary_subscr.6 = getitem(value=Hnew, index=N_det, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:16,463 on stmt: $490binary_multiply.9 = n_det_binom_prod * plus_minus
DEBUG 2022-01-28 15:49:16,463 on stmt: $496binary_subscr.12 = getitem(value=f_odd, index=N, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:16,463 on stmt: $498binary_multiply.13 = $490binary_multiply.9 * $496binary_subscr.12
DEBUG 2022-01-28 15:49:16,463 on stmt: $500inplace_add.14 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$484binary_subscr.6, rhs=$498binary_multiply.13, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-01-28 15:49:16,471 on stmt: Hnew[N_det] = $500inplace_add.14
DEBUG 2022-01-28 15:49:16,471 on stmt: jump 506
DEBUG 2022-01-28 15:49:16,471 ==== SSA block rewrite pass on 506
DEBUG 2022-01-28 15:49:16,471 Running <numba.core.ssa._FreshVarHandler object at 0x0000024108BEACA0>
DEBUG 2022-01-28 15:49:16,471 on stmt: jump 378
DEBUG 2022-01-28 15:49:16,471 ==== SSA block rewrite pass on 510
DEBUG 2022-01-28 15:49:16,471 Running <numba.core.ssa._FreshVarHandler object at 0x0000024108BEACA0>
DEBUG 2022-01-28 15:49:16,471 on stmt: $514inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=H_batch, rhs=Hnew, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-01-28 15:49:16,471 on stmt: H_batch = $514inplace_add.3
DEBUG 2022-01-28 15:49:16,471 replaced with: H_batch.1 = $514inplace_add.3
DEBUG 2022-01-28 15:49:16,471 on stmt: jump 158
DEBUG 2022-01-28 15:49:16,471 ==== SSA block rewrite pass on 520
DEBUG 2022-01-28 15:49:16,471 Running <numba.core.ssa._FreshVarHandler object at 0x0000024108BEACA0>
DEBUG 2022-01-28 15:49:16,473 on stmt: bool522 = global(bool: <class 'bool'>)
DEBUG 2022-01-28 15:49:16,473 on stmt: $522pred = call bool522(glynn, func=bool522, args=(Var(glynn, loop_hafnian_batch.py:24),), kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:16,473 on stmt: branch $522pred, 526, 580
DEBUG 2022-01-28 15:49:16,473 ==== SSA block rewrite pass on 526
DEBUG 2022-01-28 15:49:16,473 Running <numba.core.ssa._FreshVarHandler object at 0x0000024108BEACA0>
DEBUG 2022-01-28 15:49:16,473 on stmt: $526load_global.0 = global(range: <class 'range'>)
DEBUG 2022-01-28 15:49:16,473 on stmt: $530load_attr.2 = getattr(value=H_batch, attr=shape)
DEBUG 2022-01-28 15:49:16,473 on stmt: $const532.3 = const(int, 0)
DEBUG 2022-01-28 15:49:16,473 on stmt: $534binary_subscr.4 = static_getitem(value=$530load_attr.2, index=0, index_var=$const532.3, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:16,473 on stmt: $536call_function.5 = call $526load_global.0($534binary_subscr.4, func=$526load_global.0, args=[Var($534binary_subscr.4, loop_hafnian_batch.py:78)], kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:16,473 on stmt: $538get_iter.6 = getiter(value=$536call_function.5)
DEBUG 2022-01-28 15:49:16,473 on stmt: $phi540.0 = $538get_iter.6
DEBUG 2022-01-28 15:49:16,473 on stmt: jump 540
DEBUG 2022-01-28 15:49:16,473 ==== SSA block rewrite pass on 540
DEBUG 2022-01-28 15:49:16,473 Running <numba.core.ssa._FreshVarHandler object at 0x0000024108BEACA0>
DEBUG 2022-01-28 15:49:16,473 on stmt: $540for_iter.1 = iternext(value=$phi540.0)
DEBUG 2022-01-28 15:49:16,473 on stmt: $540for_iter.2 = pair_first(value=$540for_iter.1)
DEBUG 2022-01-28 15:49:16,473 on stmt: $540for_iter.3 = pair_second(value=$540for_iter.1)
DEBUG 2022-01-28 15:49:16,473 on stmt: $phi542.1 = $540for_iter.2
DEBUG 2022-01-28 15:49:16,473 on stmt: branch $540for_iter.3, 542, 580
DEBUG 2022-01-28 15:49:16,473 ==== SSA block rewrite pass on 542
DEBUG 2022-01-28 15:49:16,473 Running <numba.core.ssa._FreshVarHandler object at 0x0000024108BEACA0>
DEBUG 2022-01-28 15:49:16,473 on stmt: j.1 = $phi542.1
DEBUG 2022-01-28 15:49:16,473 on stmt: x = N_fixed + j.1
DEBUG 2022-01-28 15:49:16,473 on stmt: $558binary_subscr.9 = getitem(value=H_batch, index=j.1, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:16,473 on stmt: $const560.10 = const(float, 0.5)
DEBUG 2022-01-28 15:49:16,473 on stmt: $const564.12 = const(int, 2)
DEBUG 2022-01-28 15:49:16,473 on stmt: $566binary_floor_divide.13 = x // $const564.12
DEBUG 2022-01-28 15:49:16,473 on stmt: $568binary_power.14 = $const560.10 ** $566binary_floor_divide.13
DEBUG 2022-01-28 15:49:16,473 on stmt: $570inplace_multiply.15 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=$558binary_subscr.9, rhs=$568binary_power.14, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-01-28 15:49:16,473 on stmt: H_batch[j.1] = $570inplace_multiply.15
DEBUG 2022-01-28 15:49:16,473 on stmt: jump 540
DEBUG 2022-01-28 15:49:16,473 ==== SSA block rewrite pass on 580
DEBUG 2022-01-28 15:49:16,473 Running <numba.core.ssa._FreshVarHandler object at 0x0000024108BEACA0>
DEBUG 2022-01-28 15:49:16,473 on stmt: $582return_value.1 = cast(value=H_batch)
DEBUG 2022-01-28 15:49:16,473 on stmt: return $582return_value.1
DEBUG 2022-01-28 15:49:16,473 Replaced assignments: defaultdict(<class 'list'>,
            {0: [<numba.core.ir.Assign object at 0x000002410AEDDEE0>],
             510: [<numba.core.ir.Assign object at 0x000002410AF22580>]})
DEBUG 2022-01-28 15:49:16,473 ==== SSA block rewrite pass on 0
DEBUG 2022-01-28 15:49:16,473 Running <numba.core.ssa._FixSSAVars object at 0x000002410AF226D0>
DEBUG 2022-01-28 15:49:16,473 on stmt: A = arg(0, name=A)
DEBUG 2022-01-28 15:49:16,473 on stmt: D = arg(1, name=D)
DEBUG 2022-01-28 15:49:16,473 on stmt: fixed_edge_reps = arg(2, name=fixed_edge_reps)
DEBUG 2022-01-28 15:49:16,473 on stmt: batch_max = arg(3, name=batch_max)
DEBUG 2022-01-28 15:49:16,473 on stmt: odd_cutoff = arg(4, name=odd_cutoff)
DEBUG 2022-01-28 15:49:16,473 on stmt: glynn = arg(5, name=glynn)
DEBUG 2022-01-28 15:49:16,473 on stmt: $const4.1 = const(int, 0)
DEBUG 2022-01-28 15:49:16,473 on stmt: oddloop = static_getitem(value=D, index=0, index_var=$const4.1, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:16,473 on stmt: $const12.4 = const(int, 0)
DEBUG 2022-01-28 15:49:16,473 on stmt: $const14.5 = const(NoneType, None)
DEBUG 2022-01-28 15:49:16,473 on stmt: $const16.6 = const(NoneType, None)
DEBUG 2022-01-28 15:49:16,473 on stmt: $18build_slice.7 = global(slice: <class 'slice'>)
DEBUG 2022-01-28 15:49:16,473 on stmt: $18build_slice.8 = call $18build_slice.7($const14.5, $const16.6, func=$18build_slice.7, args=(Var($const14.5, loop_hafnian_batch.py:25), Var($const16.6, loop_hafnian_batch.py:25)), kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:16,473 on stmt: $20build_tuple.9 = build_tuple(items=[Var($const12.4, loop_hafnian_batch.py:25), Var($18build_slice.8, loop_hafnian_batch.py:25)])
DEBUG 2022-01-28 15:49:16,473 on stmt: oddV = static_getitem(value=A, index=(0, slice(None, None, None)), index_var=$20build_tuple.9, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:16,473 on stmt: $28load_attr.12 = getattr(value=A, attr=shape)
DEBUG 2022-01-28 15:49:16,473 on stmt: $const30.13 = const(int, 0)
DEBUG 2022-01-28 15:49:16,473 on stmt: n = static_getitem(value=$28load_attr.12, index=0, index_var=$const30.13, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:16,473 on stmt: $const36.15 = const(int, 2)
DEBUG 2022-01-28 15:49:16,473 on stmt: $40load_method.17 = getattr(value=fixed_edge_reps, attr=sum)
DEBUG 2022-01-28 15:49:16,473 on stmt: $42call_method.18 = call $40load_method.17(func=$40load_method.17, args=[], kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:16,473 on stmt: N_fixed = $const36.15 * $42call_method.18
DEBUG 2022-01-28 15:49:16,473 on stmt: $const50.21 = const(int, 2)
DEBUG 2022-01-28 15:49:16,473 on stmt: $54binary_multiply.23 = $const50.21 * batch_max
DEBUG 2022-01-28 15:49:16,473 on stmt: $56binary_add.24 = N_fixed + $54binary_multiply.23
DEBUG 2022-01-28 15:49:16,473 on stmt: N_max = $56binary_add.24 + odd_cutoff
DEBUG 2022-01-28 15:49:16,473 on stmt: $64load_global.27 = global(np: <module 'numpy' from 'C:\\Users\\zl4821\\Anaconda3\\envs\\GBS\\lib\\site-packages\\numpy\\__init__.py'>)
DEBUG 2022-01-28 15:49:16,473 on stmt: $66load_method.28 = getattr(value=$64load_global.27, attr=concatenate)
DEBUG 2022-01-28 15:49:16,473 on stmt: $68load_global.29 = global(np: <module 'numpy' from 'C:\\Users\\zl4821\\Anaconda3\\envs\\GBS\\lib\\site-packages\\numpy\\__init__.py'>)
DEBUG 2022-01-28 15:49:16,473 on stmt: $70load_method.30 = getattr(value=$68load_global.29, attr=array)
DEBUG 2022-01-28 15:49:16,473 on stmt: $74build_list.32 = build_list(items=[Var(batch_max, loop_hafnian_batch.py:24)])
DEBUG 2022-01-28 15:49:16,473 on stmt: $76call_method.33 = call $70load_method.30($74build_list.32, func=$70load_method.30, args=[Var($74build_list.32, loop_hafnian_batch.py:32)], kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:16,473 on stmt: $80build_tuple.35 = build_tuple(items=[Var($76call_method.33, loop_hafnian_batch.py:32), Var(fixed_edge_reps, loop_hafnian_batch.py:24)])
DEBUG 2022-01-28 15:49:16,473 on stmt: edge_reps = call $66load_method.28($80build_tuple.35, func=$66load_method.28, args=[Var($80build_tuple.35, loop_hafnian_batch.py:32)], kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:16,473 on stmt: $86load_global.37 = global(np: <module 'numpy' from 'C:\\Users\\zl4821\\Anaconda3\\envs\\GBS\\lib\\site-packages\\numpy\\__init__.py'>)
DEBUG 2022-01-28 15:49:16,473 on stmt: $88load_method.38 = getattr(value=$86load_global.37, attr=prod)
DEBUG 2022-01-28 15:49:16,473 on stmt: $const92.40 = const(int, 1)
DEBUG 2022-01-28 15:49:16,473 on stmt: $94binary_add.41 = edge_reps + $const92.40
DEBUG 2022-01-28 15:49:16,473 on stmt: steps = call $88load_method.38($94binary_add.41, func=$88load_method.38, args=[Var($94binary_add.41, loop_hafnian_batch.py:33)], kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:16,481 on stmt: $102load_method.44 = getattr(value=edge_reps, attr=max)
DEBUG 2022-01-28 15:49:16,481 on stmt: $104call_method.45 = call $102load_method.44(func=$102load_method.44, args=[], kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:16,481 on stmt: max_binom = $104call_method.45 + odd_cutoff
DEBUG 2022-01-28 15:49:16,481 on stmt: $112load_global.48 = global(precompute_binoms: CPUDispatcher(<function precompute_binoms at 0x00000241074240D0>))
DEBUG 2022-01-28 15:49:16,481 on stmt: binoms = call $112load_global.48(max_binom, func=$112load_global.48, args=[Var(max_binom, loop_hafnian_batch.py:35)], kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:16,481 on stmt: $120load_global.51 = global(np: <module 'numpy' from 'C:\\Users\\zl4821\\Anaconda3\\envs\\GBS\\lib\\site-packages\\numpy\\__init__.py'>)
DEBUG 2022-01-28 15:49:16,481 on stmt: $122load_attr.52 = getattr(value=$120load_global.51, attr=zeros)
DEBUG 2022-01-28 15:49:16,481 on stmt: $const124.53 = const(int, 2)
DEBUG 2022-01-28 15:49:16,481 on stmt: $128binary_multiply.55 = $const124.53 * batch_max
DEBUG 2022-01-28 15:49:16,481 on stmt: $132binary_add.57 = $128binary_multiply.55 + odd_cutoff
DEBUG 2022-01-28 15:49:16,481 on stmt: $const134.58 = const(int, 1)
DEBUG 2022-01-28 15:49:16,481 on stmt: $136binary_add.59 = $132binary_add.57 + $const134.58
DEBUG 2022-01-28 15:49:16,481 on stmt: $138load_global.60 = global(np: <module 'numpy' from 'C:\\Users\\zl4821\\Anaconda3\\envs\\GBS\\lib\\site-packages\\numpy\\__init__.py'>)
DEBUG 2022-01-28 15:49:16,481 on stmt: $140load_attr.61 = getattr(value=$138load_global.60, attr=complex128)
DEBUG 2022-01-28 15:49:16,481 on stmt: H_batch = call $122load_attr.52($136binary_add.59, func=$122load_attr.52, args=[Var($136binary_add.59, loop_hafnian_batch.py:38)], kws=[('dtype', Var($140load_attr.61, loop_hafnian_batch.py:38))], vararg=None, target=None)
DEBUG 2022-01-28 15:49:16,481 on stmt: $148load_global.64 = global(numba: <module 'numba' from 'C:\\Users\\zl4821\\Anaconda3\\envs\\GBS\\lib\\site-packages\\numba\\__init__.py'>)
DEBUG 2022-01-28 15:49:16,481 on stmt: $150load_method.65 = getattr(value=$148load_global.64, attr=prange)
DEBUG 2022-01-28 15:49:16,481 on stmt: $154call_method.67 = call $150load_method.65(steps, func=$150load_method.65, args=[Var(steps, loop_hafnian_batch.py:33)], kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:16,481 on stmt: $156get_iter.68 = getiter(value=$154call_method.67)
DEBUG 2022-01-28 15:49:16,483 on stmt: $phi158.0 = $156get_iter.68
DEBUG 2022-01-28 15:49:16,483 on stmt: jump 158
DEBUG 2022-01-28 15:49:16,483 ==== SSA block rewrite pass on 158
DEBUG 2022-01-28 15:49:16,483 Running <numba.core.ssa._FixSSAVars object at 0x000002410AF226D0>
DEBUG 2022-01-28 15:49:16,483 on stmt: $158for_iter.1 = iternext(value=$phi158.0)
DEBUG 2022-01-28 15:49:16,483 on stmt: $158for_iter.2 = pair_first(value=$158for_iter.1)
DEBUG 2022-01-28 15:49:16,483 on stmt: $158for_iter.3 = pair_second(value=$158for_iter.1)
DEBUG 2022-01-28 15:49:16,483 on stmt: $phi162.1 = $158for_iter.2
DEBUG 2022-01-28 15:49:16,483 on stmt: branch $158for_iter.3, 162, 520
DEBUG 2022-01-28 15:49:16,483 ==== SSA block rewrite pass on 162
DEBUG 2022-01-28 15:49:16,483 Running <numba.core.ssa._FixSSAVars object at 0x000002410AF226D0>
DEBUG 2022-01-28 15:49:16,483 on stmt: j = $phi162.1
DEBUG 2022-01-28 15:49:16,483 on stmt: $164load_global.2 = global(np: <module 'numpy' from 'C:\\Users\\zl4821\\Anaconda3\\envs\\GBS\\lib\\site-packages\\numpy\\__init__.py'>)
DEBUG 2022-01-28 15:49:16,483 on stmt: $166load_attr.3 = getattr(value=$164load_global.2, attr=zeros)
DEBUG 2022-01-28 15:49:16,483 on stmt: $const168.4 = const(int, 2)
DEBUG 2022-01-28 15:49:16,483 on stmt: $172binary_multiply.6 = $const168.4 * batch_max
DEBUG 2022-01-28 15:49:16,483 on stmt: $176binary_add.8 = $172binary_multiply.6 + odd_cutoff
DEBUG 2022-01-28 15:49:16,483 on stmt: $const178.9 = const(int, 1)
DEBUG 2022-01-28 15:49:16,483 on stmt: $180binary_add.10 = $176binary_add.8 + $const178.9
DEBUG 2022-01-28 15:49:16,483 on stmt: $182load_global.11 = global(np: <module 'numpy' from 'C:\\Users\\zl4821\\Anaconda3\\envs\\GBS\\lib\\site-packages\\numpy\\__init__.py'>)
DEBUG 2022-01-28 15:49:16,483 on stmt: $184load_attr.12 = getattr(value=$182load_global.11, attr=complex128)
DEBUG 2022-01-28 15:49:16,483 on stmt: Hnew = call $166load_attr.3($180binary_add.10, func=$166load_attr.3, args=[Var($180binary_add.10, loop_hafnian_batch.py:41)], kws=[('dtype', Var($184load_attr.12, loop_hafnian_batch.py:41))], vararg=None, target=None)
DEBUG 2022-01-28 15:49:16,483 on stmt: $192load_global.15 = global(find_kept_edges: CPUDispatcher(<function find_kept_edges at 0x0000024107424550>))
DEBUG 2022-01-28 15:49:16,483 on stmt: kept_edges = call $192load_global.15(j, edge_reps, func=$192load_global.15, args=[Var(j, loop_hafnian_batch.py:39), Var(edge_reps, loop_hafnian_batch.py:32)], kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:16,483 on stmt: $204load_method.20 = getattr(value=kept_edges, attr=sum)
DEBUG 2022-01-28 15:49:16,483 on stmt: edges_sum = call $204load_method.20(func=$204load_method.20, args=[], kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:16,483 on stmt: binom_prod = const(float, 1.0)
DEBUG 2022-01-28 15:49:16,483 on stmt: $214load_global.23 = global(range: <class 'range'>)
DEBUG 2022-01-28 15:49:16,483 on stmt: $const216.24 = const(int, 1)
DEBUG 2022-01-28 15:49:16,483 on stmt: $const220.26 = const(int, 2)
DEBUG 2022-01-28 15:49:16,483 on stmt: $222binary_floor_divide.27 = n // $const220.26
DEBUG 2022-01-28 15:49:16,483 on stmt: $224call_function.28 = call $214load_global.23($const216.24, $222binary_floor_divide.27, func=$214load_global.23, args=[Var($const216.24, loop_hafnian_batch.py:47), Var($222binary_floor_divide.27, loop_hafnian_batch.py:47)], kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:16,483 on stmt: $226get_iter.29 = getiter(value=$224call_function.28)
DEBUG 2022-01-28 15:49:16,483 on stmt: $phi228.1 = $226get_iter.29
DEBUG 2022-01-28 15:49:16,483 on stmt: jump 228
DEBUG 2022-01-28 15:49:16,483 ==== SSA block rewrite pass on 228
DEBUG 2022-01-28 15:49:16,483 Running <numba.core.ssa._FixSSAVars object at 0x000002410AF226D0>
DEBUG 2022-01-28 15:49:16,483 on stmt: binom_prod.2 = phi(incoming_values=[Var(binom_prod, loop_hafnian_batch.py:46), Var(binom_prod.1, loop_hafnian_batch.py:48)], incoming_blocks=[162, 230])
DEBUG 2022-01-28 15:49:16,483 on stmt: $228for_iter.2 = iternext(value=$phi228.1)
DEBUG 2022-01-28 15:49:16,483 on stmt: $228for_iter.3 = pair_first(value=$228for_iter.2)
DEBUG 2022-01-28 15:49:16,483 on stmt: $228for_iter.4 = pair_second(value=$228for_iter.2)
DEBUG 2022-01-28 15:49:16,483 on stmt: $phi230.2 = $228for_iter.3
DEBUG 2022-01-28 15:49:16,483 on stmt: branch $228for_iter.4, 230, 258
DEBUG 2022-01-28 15:49:16,483 ==== SSA block rewrite pass on 230
DEBUG 2022-01-28 15:49:16,483 Running <numba.core.ssa._FixSSAVars object at 0x000002410AF226D0>
DEBUG 2022-01-28 15:49:16,483 on stmt: i = $phi230.2
DEBUG 2022-01-28 15:49:16,483 on stmt: $240binary_subscr.7 = getitem(value=edge_reps, index=i, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:16,483 on stmt: $246binary_subscr.10 = getitem(value=kept_edges, index=i, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:16,483 on stmt: $248build_tuple.11 = build_tuple(items=[Var($240binary_subscr.7, loop_hafnian_batch.py:48), Var($246binary_subscr.10, loop_hafnian_batch.py:48)])
DEBUG 2022-01-28 15:49:16,483 on stmt: $250binary_subscr.12 = getitem(value=binoms, index=$248build_tuple.11, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:16,483 on stmt: $252inplace_multiply.13 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=binom_prod.2, rhs=$250binary_subscr.12, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-01-28 15:49:16,483 on stmt: binom_prod.1 = $252inplace_multiply.13
DEBUG 2022-01-28 15:49:16,483 on stmt: jump 228
DEBUG 2022-01-28 15:49:16,483 ==== SSA block rewrite pass on 258
DEBUG 2022-01-28 15:49:16,483 Running <numba.core.ssa._FixSSAVars object at 0x000002410AF226D0>
DEBUG 2022-01-28 15:49:16,483 on stmt: bool260 = global(bool: <class 'bool'>)
DEBUG 2022-01-28 15:49:16,483 on stmt: $260pred = call bool260(glynn, func=bool260, args=(Var(glynn, loop_hafnian_batch.py:24),), kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:16,483 on stmt: branch $260pred, 264, 278
DEBUG 2022-01-28 15:49:16,483 ==== SSA block rewrite pass on 264
DEBUG 2022-01-28 15:49:16,483 Running <numba.core.ssa._FixSSAVars object at 0x000002410AF226D0>
DEBUG 2022-01-28 15:49:16,483 on stmt: $const264.1 = const(int, 2)
DEBUG 2022-01-28 15:49:16,483 on stmt: $268binary_multiply.3 = $const264.1 * kept_edges
DEBUG 2022-01-28 15:49:16,483 on stmt: delta = $268binary_multiply.3 - edge_reps
DEBUG 2022-01-28 15:49:16,483 on stmt: jump 282
DEBUG 2022-01-28 15:49:16,483 ==== SSA block rewrite pass on 278
DEBUG 2022-01-28 15:49:16,483 Running <numba.core.ssa._FixSSAVars object at 0x000002410AF226D0>
DEBUG 2022-01-28 15:49:16,483 on stmt: delta = kept_edges
DEBUG 2022-01-28 15:49:16,483 on stmt: jump 282
DEBUG 2022-01-28 15:49:16,483 ==== SSA block rewrite pass on 282
DEBUG 2022-01-28 15:49:16,483 Running <numba.core.ssa._FixSSAVars object at 0x000002410AF226D0>
DEBUG 2022-01-28 15:49:16,483 on stmt: $282load_global.1 = global(get_submatrices: CPUDispatcher(<function get_submatrices at 0x0000024107424E50>))
DEBUG 2022-01-28 15:49:16,483 on stmt: $292call_function.6 = call $282load_global.1(delta, A, D, oddV, func=$282load_global.1, args=[Var(delta, loop_hafnian_batch.py:51), Var(A, loop_hafnian_batch.py:24), Var(D, loop_hafnian_batch.py:24), Var(oddV, loop_hafnian_batch.py:25)], kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:16,483 on stmt: $294unpack_sequence.11 = exhaust_iter(value=$292call_function.6, count=4)
DEBUG 2022-01-28 15:49:16,483 on stmt: $294unpack_sequence.7 = static_getitem(value=$294unpack_sequence.11, index=0, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:16,483 on stmt: $294unpack_sequence.8 = static_getitem(value=$294unpack_sequence.11, index=1, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:16,483 on stmt: $294unpack_sequence.9 = static_getitem(value=$294unpack_sequence.11, index=2, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:16,491 on stmt: $294unpack_sequence.10 = static_getitem(value=$294unpack_sequence.11, index=3, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:16,491 on stmt: AX_S = $294unpack_sequence.7
DEBUG 2022-01-28 15:49:16,491 on stmt: XD_S = $294unpack_sequence.8
DEBUG 2022-01-28 15:49:16,491 on stmt: D_S = $294unpack_sequence.9
DEBUG 2022-01-28 15:49:16,491 on stmt: oddVX_S = $294unpack_sequence.10
DEBUG 2022-01-28 15:49:16,491 on stmt: $304load_global.12 = global(eigvals: CPUDispatcher(<function eigvals at 0x00000241074303A0>))
DEBUG 2022-01-28 15:49:16,491 on stmt: E = call $304load_global.12(AX_S, func=$304load_global.12, args=[Var(AX_S, loop_hafnian_batch.py:55)], kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:16,491 on stmt: $312load_global.15 = global(f_loop: CPUDispatcher(<function f_loop at 0x00000241074248B0>))
DEBUG 2022-01-28 15:49:16,491 on stmt: f_even = call $312load_global.15(E, AX_S, XD_S, D_S, N_max, func=$312load_global.15, args=[Var(E, loop_hafnian_batch.py:57), Var(AX_S, loop_hafnian_batch.py:55), Var(XD_S, loop_hafnian_batch.py:55), Var(D_S, loop_hafnian_batch.py:55), Var(N_max, loop_hafnian_batch.py:30)], kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:16,491 on stmt: $328load_global.22 = global(f_loop_odd: CPUDispatcher(<function f_loop_odd at 0x0000024107424AF0>))
DEBUG 2022-01-28 15:49:16,491 on stmt: f_odd = call $328load_global.22(E, AX_S, XD_S, D_S, N_max, oddloop, oddVX_S, func=$328load_global.22, args=[Var(E, loop_hafnian_batch.py:57), Var(AX_S, loop_hafnian_batch.py:55), Var(XD_S, loop_hafnian_batch.py:55), Var(D_S, loop_hafnian_batch.py:55), Var(N_max, loop_hafnian_batch.py:30), Var(oddloop, loop_hafnian_batch.py:24), Var(oddVX_S, loop_hafnian_batch.py:55)], kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:16,493 on stmt: $348load_global.31 = global(range: <class 'range'>)
DEBUG 2022-01-28 15:49:16,493 on stmt: $const350.32 = const(int, 2)
DEBUG 2022-01-28 15:49:16,493 on stmt: $const354.34 = const(int, 0)
DEBUG 2022-01-28 15:49:16,493 on stmt: $356binary_subscr.35 = static_getitem(value=kept_edges, index=0, index_var=$const354.34, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:16,493 on stmt: $358binary_multiply.36 = $const350.32 * $356binary_subscr.35
DEBUG 2022-01-28 15:49:16,493 on stmt: $const360.37 = const(int, 2)
DEBUG 2022-01-28 15:49:16,493 on stmt: $364binary_multiply.39 = $const360.37 * batch_max
DEBUG 2022-01-28 15:49:16,493 on stmt: $368binary_add.41 = $364binary_multiply.39 + odd_cutoff
DEBUG 2022-01-28 15:49:16,493 on stmt: $const370.42 = const(int, 1)
DEBUG 2022-01-28 15:49:16,493 on stmt: $372binary_add.43 = $368binary_add.41 + $const370.42
DEBUG 2022-01-28 15:49:16,493 on stmt: $374call_function.44 = call $348load_global.31($358binary_multiply.36, $372binary_add.43, func=$348load_global.31, args=[Var($358binary_multiply.36, loop_hafnian_batch.py:64), Var($372binary_add.43, loop_hafnian_batch.py:64)], kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:16,493 on stmt: $376get_iter.45 = getiter(value=$374call_function.44)
DEBUG 2022-01-28 15:49:16,493 on stmt: $phi378.1 = $376get_iter.45
DEBUG 2022-01-28 15:49:16,493 on stmt: jump 378
DEBUG 2022-01-28 15:49:16,493 ==== SSA block rewrite pass on 378
DEBUG 2022-01-28 15:49:16,493 Running <numba.core.ssa._FixSSAVars object at 0x000002410AF226D0>
DEBUG 2022-01-28 15:49:16,493 on stmt: $378for_iter.2 = iternext(value=$phi378.1)
DEBUG 2022-01-28 15:49:16,493 on stmt: $378for_iter.3 = pair_first(value=$378for_iter.2)
DEBUG 2022-01-28 15:49:16,493 on stmt: $378for_iter.4 = pair_second(value=$378for_iter.2)
DEBUG 2022-01-28 15:49:16,493 on stmt: $phi380.2 = $378for_iter.3
DEBUG 2022-01-28 15:49:16,493 on stmt: branch $378for_iter.4, 380, 510
DEBUG 2022-01-28 15:49:16,493 ==== SSA block rewrite pass on 380
DEBUG 2022-01-28 15:49:16,493 Running <numba.core.ssa._FixSSAVars object at 0x000002410AF226D0>
DEBUG 2022-01-28 15:49:16,493 on stmt: N_det = $phi380.2
DEBUG 2022-01-28 15:49:16,493 on stmt: N = N_fixed + N_det
DEBUG 2022-01-28 15:49:16,493 on stmt: $const390.6 = const(float, -1.0)
DEBUG 2022-01-28 15:49:16,493 on stmt: $const394.8 = const(int, 2)
DEBUG 2022-01-28 15:49:16,493 on stmt: $396binary_floor_divide.9 = N // $const394.8
DEBUG 2022-01-28 15:49:16,493 on stmt: $400binary_subtract.11 = $396binary_floor_divide.9 - edges_sum
DEBUG 2022-01-28 15:49:16,493 on stmt: plus_minus = $const390.6 ** $400binary_subtract.11
DEBUG 2022-01-28 15:49:16,493 on stmt: $const410.15 = const(int, 2)
DEBUG 2022-01-28 15:49:16,493 on stmt: $412binary_floor_divide.16 = N_det // $const410.15
DEBUG 2022-01-28 15:49:16,493 on stmt: $const416.18 = const(int, 0)
DEBUG 2022-01-28 15:49:16,493 on stmt: $418binary_subscr.19 = static_getitem(value=kept_edges, index=0, index_var=$const416.18, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:16,493 on stmt: $420build_tuple.20 = build_tuple(items=[Var($412binary_floor_divide.16, loop_hafnian_batch.py:68), Var($418binary_subscr.19, loop_hafnian_batch.py:68)])
DEBUG 2022-01-28 15:49:16,493 on stmt: $422binary_subscr.21 = getitem(value=binoms, index=$420build_tuple.20, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:16,493 on stmt: n_det_binom_prod = $422binary_subscr.21 * binom_prod.2
DEBUG 2022-01-28 15:49:16,493 on stmt: $const432.25 = const(int, 2)
DEBUG 2022-01-28 15:49:16,493 on stmt: $434binary_modulo.26 = N_det % $const432.25
DEBUG 2022-01-28 15:49:16,493 on stmt: $const436.27 = const(int, 0)
DEBUG 2022-01-28 15:49:16,493 on stmt: $438compare_op.28 = $434binary_modulo.26 == $const436.27
DEBUG 2022-01-28 15:49:16,493 on stmt: bool440 = global(bool: <class 'bool'>)
DEBUG 2022-01-28 15:49:16,493 on stmt: $440pred = call bool440($438compare_op.28, func=bool440, args=(Var($438compare_op.28, loop_hafnian_batch.py:70),), kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:16,493 on stmt: branch $440pred, 444, 478
DEBUG 2022-01-28 15:49:16,493 ==== SSA block rewrite pass on 444
DEBUG 2022-01-28 15:49:16,493 Running <numba.core.ssa._FixSSAVars object at 0x000002410AF226D0>
DEBUG 2022-01-28 15:49:16,493 on stmt: $450binary_subscr.6 = getitem(value=Hnew, index=N_det, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:16,493 on stmt: $456binary_multiply.9 = n_det_binom_prod * plus_minus
DEBUG 2022-01-28 15:49:16,493 on stmt: $const462.12 = const(int, 2)
DEBUG 2022-01-28 15:49:16,493 on stmt: $464binary_floor_divide.13 = N // $const462.12
DEBUG 2022-01-28 15:49:16,493 on stmt: $466binary_subscr.14 = getitem(value=f_even, index=$464binary_floor_divide.13, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:16,493 on stmt: $468binary_multiply.15 = $456binary_multiply.9 * $466binary_subscr.14
DEBUG 2022-01-28 15:49:16,493 on stmt: $470inplace_add.16 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$450binary_subscr.6, rhs=$468binary_multiply.15, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-01-28 15:49:16,493 on stmt: Hnew[N_det] = $470inplace_add.16
DEBUG 2022-01-28 15:49:16,501 on stmt: jump 506
DEBUG 2022-01-28 15:49:16,501 ==== SSA block rewrite pass on 478
DEBUG 2022-01-28 15:49:16,501 Running <numba.core.ssa._FixSSAVars object at 0x000002410AF226D0>
DEBUG 2022-01-28 15:49:16,501 on stmt: $484binary_subscr.6 = getitem(value=Hnew, index=N_det, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:16,501 on stmt: $490binary_multiply.9 = n_det_binom_prod * plus_minus
DEBUG 2022-01-28 15:49:16,501 on stmt: $496binary_subscr.12 = getitem(value=f_odd, index=N, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:16,503 on stmt: $498binary_multiply.13 = $490binary_multiply.9 * $496binary_subscr.12
DEBUG 2022-01-28 15:49:16,503 on stmt: $500inplace_add.14 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$484binary_subscr.6, rhs=$498binary_multiply.13, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-01-28 15:49:16,503 on stmt: Hnew[N_det] = $500inplace_add.14
DEBUG 2022-01-28 15:49:16,503 on stmt: jump 506
DEBUG 2022-01-28 15:49:16,503 ==== SSA block rewrite pass on 506
DEBUG 2022-01-28 15:49:16,503 Running <numba.core.ssa._FixSSAVars object at 0x000002410AF226D0>
DEBUG 2022-01-28 15:49:16,503 on stmt: jump 378
DEBUG 2022-01-28 15:49:16,503 ==== SSA block rewrite pass on 510
DEBUG 2022-01-28 15:49:16,503 Running <numba.core.ssa._FixSSAVars object at 0x000002410AF226D0>
DEBUG 2022-01-28 15:49:16,503 on stmt: $514inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=H_batch, rhs=Hnew, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-01-28 15:49:16,503 find_def var='H_batch' stmt=$514inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=H_batch, rhs=Hnew, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-01-28 15:49:16,503 find_def_from_top label 510
DEBUG 2022-01-28 15:49:16,503 idom 378 from label 510
DEBUG 2022-01-28 15:49:16,503 find_def_from_bottom label 378
DEBUG 2022-01-28 15:49:16,503 find_def_from_top label 378
DEBUG 2022-01-28 15:49:16,503 idom 282 from label 378
DEBUG 2022-01-28 15:49:16,503 find_def_from_bottom label 282
DEBUG 2022-01-28 15:49:16,503 find_def_from_top label 282
DEBUG 2022-01-28 15:49:16,503 idom 258 from label 282
DEBUG 2022-01-28 15:49:16,503 find_def_from_bottom label 258
DEBUG 2022-01-28 15:49:16,503 find_def_from_top label 258
DEBUG 2022-01-28 15:49:16,503 idom 228 from label 258
DEBUG 2022-01-28 15:49:16,503 find_def_from_bottom label 228
DEBUG 2022-01-28 15:49:16,503 find_def_from_top label 228
DEBUG 2022-01-28 15:49:16,503 idom 162 from label 228
DEBUG 2022-01-28 15:49:16,503 find_def_from_bottom label 162
DEBUG 2022-01-28 15:49:16,503 find_def_from_top label 162
DEBUG 2022-01-28 15:49:16,503 idom 158 from label 162
DEBUG 2022-01-28 15:49:16,503 find_def_from_bottom label 158
DEBUG 2022-01-28 15:49:16,503 find_def_from_top label 158
DEBUG 2022-01-28 15:49:16,503 insert phi node H_batch.2 = phi(incoming_values=[], incoming_blocks=[]) at 158
DEBUG 2022-01-28 15:49:16,503 find_def_from_bottom label 0
DEBUG 2022-01-28 15:49:16,503 incoming_def H_batch = call $122load_attr.52($136binary_add.59, func=$122load_attr.52, args=[Var($136binary_add.59, loop_hafnian_batch.py:38)], kws=[('dtype', Var($140load_attr.61, loop_hafnian_batch.py:38))], vararg=None, target=None)
DEBUG 2022-01-28 15:49:16,503 find_def_from_bottom label 510
DEBUG 2022-01-28 15:49:16,503 incoming_def H_batch.1 = $514inplace_add.3
DEBUG 2022-01-28 15:49:16,503 replaced with: $514inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=H_batch.2, rhs=Hnew, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-01-28 15:49:16,503 on stmt: H_batch.1 = $514inplace_add.3
DEBUG 2022-01-28 15:49:16,503 on stmt: jump 158
DEBUG 2022-01-28 15:49:16,503 ==== SSA block rewrite pass on 520
DEBUG 2022-01-28 15:49:16,503 Running <numba.core.ssa._FixSSAVars object at 0x000002410AF226D0>
DEBUG 2022-01-28 15:49:16,503 on stmt: bool522 = global(bool: <class 'bool'>)
DEBUG 2022-01-28 15:49:16,503 on stmt: $522pred = call bool522(glynn, func=bool522, args=(Var(glynn, loop_hafnian_batch.py:24),), kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:16,503 on stmt: branch $522pred, 526, 580
DEBUG 2022-01-28 15:49:16,503 ==== SSA block rewrite pass on 526
DEBUG 2022-01-28 15:49:16,503 Running <numba.core.ssa._FixSSAVars object at 0x000002410AF226D0>
DEBUG 2022-01-28 15:49:16,503 on stmt: $526load_global.0 = global(range: <class 'range'>)
DEBUG 2022-01-28 15:49:16,503 on stmt: $530load_attr.2 = getattr(value=H_batch, attr=shape)
DEBUG 2022-01-28 15:49:16,503 find_def var='H_batch' stmt=$530load_attr.2 = getattr(value=H_batch, attr=shape)
DEBUG 2022-01-28 15:49:16,503 find_def_from_top label 526
DEBUG 2022-01-28 15:49:16,503 idom 520 from label 526
DEBUG 2022-01-28 15:49:16,503 find_def_from_bottom label 520
DEBUG 2022-01-28 15:49:16,503 find_def_from_top label 520
DEBUG 2022-01-28 15:49:16,503 idom 158 from label 520
DEBUG 2022-01-28 15:49:16,503 find_def_from_bottom label 158
DEBUG 2022-01-28 15:49:16,503 replaced with: $530load_attr.2 = getattr(value=H_batch.2, attr=shape)
DEBUG 2022-01-28 15:49:16,503 on stmt: $const532.3 = const(int, 0)
DEBUG 2022-01-28 15:49:16,503 on stmt: $534binary_subscr.4 = static_getitem(value=$530load_attr.2, index=0, index_var=$const532.3, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:16,503 on stmt: $536call_function.5 = call $526load_global.0($534binary_subscr.4, func=$526load_global.0, args=[Var($534binary_subscr.4, loop_hafnian_batch.py:78)], kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:16,503 on stmt: $538get_iter.6 = getiter(value=$536call_function.5)
DEBUG 2022-01-28 15:49:16,503 on stmt: $phi540.0 = $538get_iter.6
DEBUG 2022-01-28 15:49:16,503 on stmt: jump 540
DEBUG 2022-01-28 15:49:16,503 ==== SSA block rewrite pass on 540
DEBUG 2022-01-28 15:49:16,503 Running <numba.core.ssa._FixSSAVars object at 0x000002410AF226D0>
DEBUG 2022-01-28 15:49:16,511 on stmt: $540for_iter.1 = iternext(value=$phi540.0)
DEBUG 2022-01-28 15:49:16,511 on stmt: $540for_iter.2 = pair_first(value=$540for_iter.1)
DEBUG 2022-01-28 15:49:16,511 on stmt: $540for_iter.3 = pair_second(value=$540for_iter.1)
DEBUG 2022-01-28 15:49:16,511 on stmt: $phi542.1 = $540for_iter.2
DEBUG 2022-01-28 15:49:16,511 on stmt: branch $540for_iter.3, 542, 580
DEBUG 2022-01-28 15:49:16,511 ==== SSA block rewrite pass on 542
DEBUG 2022-01-28 15:49:16,511 Running <numba.core.ssa._FixSSAVars object at 0x000002410AF226D0>
DEBUG 2022-01-28 15:49:16,511 on stmt: j.1 = $phi542.1
DEBUG 2022-01-28 15:49:16,511 on stmt: x = N_fixed + j.1
DEBUG 2022-01-28 15:49:16,511 on stmt: $558binary_subscr.9 = getitem(value=H_batch, index=j.1, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:16,511 find_def var='H_batch' stmt=$558binary_subscr.9 = getitem(value=H_batch, index=j.1, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:16,511 find_def_from_top label 542
DEBUG 2022-01-28 15:49:16,511 idom 540 from label 542
DEBUG 2022-01-28 15:49:16,513 find_def_from_bottom label 540
DEBUG 2022-01-28 15:49:16,513 find_def_from_top label 540
DEBUG 2022-01-28 15:49:16,513 idom 526 from label 540
DEBUG 2022-01-28 15:49:16,513 find_def_from_bottom label 526
DEBUG 2022-01-28 15:49:16,513 find_def_from_top label 526
DEBUG 2022-01-28 15:49:16,513 idom 520 from label 526
DEBUG 2022-01-28 15:49:16,513 find_def_from_bottom label 520
DEBUG 2022-01-28 15:49:16,513 find_def_from_top label 520
DEBUG 2022-01-28 15:49:16,513 idom 158 from label 520
DEBUG 2022-01-28 15:49:16,513 find_def_from_bottom label 158
DEBUG 2022-01-28 15:49:16,513 replaced with: $558binary_subscr.9 = getitem(value=H_batch.2, index=j.1, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:16,513 on stmt: $const560.10 = const(float, 0.5)
DEBUG 2022-01-28 15:49:16,513 on stmt: $const564.12 = const(int, 2)
DEBUG 2022-01-28 15:49:16,513 on stmt: $566binary_floor_divide.13 = x // $const564.12
DEBUG 2022-01-28 15:49:16,513 on stmt: $568binary_power.14 = $const560.10 ** $566binary_floor_divide.13
DEBUG 2022-01-28 15:49:16,513 on stmt: $570inplace_multiply.15 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=$558binary_subscr.9, rhs=$568binary_power.14, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-01-28 15:49:16,513 on stmt: H_batch[j.1] = $570inplace_multiply.15
DEBUG 2022-01-28 15:49:16,513 find_def var='H_batch' stmt=H_batch[j.1] = $570inplace_multiply.15
DEBUG 2022-01-28 15:49:16,513 find_def_from_top label 542
DEBUG 2022-01-28 15:49:16,513 idom 540 from label 542
DEBUG 2022-01-28 15:49:16,513 find_def_from_bottom label 540
DEBUG 2022-01-28 15:49:16,513 find_def_from_top label 540
DEBUG 2022-01-28 15:49:16,513 idom 526 from label 540
DEBUG 2022-01-28 15:49:16,513 find_def_from_bottom label 526
DEBUG 2022-01-28 15:49:16,513 find_def_from_top label 526
DEBUG 2022-01-28 15:49:16,513 idom 520 from label 526
DEBUG 2022-01-28 15:49:16,513 find_def_from_bottom label 520
DEBUG 2022-01-28 15:49:16,513 find_def_from_top label 520
DEBUG 2022-01-28 15:49:16,513 idom 158 from label 520
DEBUG 2022-01-28 15:49:16,513 find_def_from_bottom label 158
DEBUG 2022-01-28 15:49:16,513 replaced with: H_batch.2[j.1] = $570inplace_multiply.15
DEBUG 2022-01-28 15:49:16,513 on stmt: jump 540
DEBUG 2022-01-28 15:49:16,513 ==== SSA block rewrite pass on 580
DEBUG 2022-01-28 15:49:16,513 Running <numba.core.ssa._FixSSAVars object at 0x000002410AF226D0>
DEBUG 2022-01-28 15:49:16,513 on stmt: $582return_value.1 = cast(value=H_batch)
DEBUG 2022-01-28 15:49:16,513 find_def var='H_batch' stmt=$582return_value.1 = cast(value=H_batch)
DEBUG 2022-01-28 15:49:16,513 find_def_from_top label 580
DEBUG 2022-01-28 15:49:16,513 idom 520 from label 580
DEBUG 2022-01-28 15:49:16,513 find_def_from_bottom label 520
DEBUG 2022-01-28 15:49:16,513 find_def_from_top label 520
DEBUG 2022-01-28 15:49:16,513 idom 158 from label 520
DEBUG 2022-01-28 15:49:16,513 find_def_from_bottom label 158
DEBUG 2022-01-28 15:49:16,513 replaced with: $582return_value.1 = cast(value=H_batch.2)
DEBUG 2022-01-28 15:49:16,513 on stmt: return $582return_value.1
DEBUG 2022-01-28 15:49:16,513 Fix SSA violator on var delta
DEBUG 2022-01-28 15:49:16,513 ==== SSA block rewrite pass on 0
DEBUG 2022-01-28 15:49:16,513 Running <numba.core.ssa._FreshVarHandler object at 0x0000024108BEA160>
DEBUG 2022-01-28 15:49:16,513 on stmt: A = arg(0, name=A)
DEBUG 2022-01-28 15:49:16,513 on stmt: D = arg(1, name=D)
DEBUG 2022-01-28 15:49:16,513 on stmt: fixed_edge_reps = arg(2, name=fixed_edge_reps)
DEBUG 2022-01-28 15:49:16,513 on stmt: batch_max = arg(3, name=batch_max)
DEBUG 2022-01-28 15:49:16,513 on stmt: odd_cutoff = arg(4, name=odd_cutoff)
DEBUG 2022-01-28 15:49:16,513 on stmt: glynn = arg(5, name=glynn)
DEBUG 2022-01-28 15:49:16,513 on stmt: $const4.1 = const(int, 0)
DEBUG 2022-01-28 15:49:16,521 on stmt: oddloop = static_getitem(value=D, index=0, index_var=$const4.1, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:16,521 on stmt: $const12.4 = const(int, 0)
DEBUG 2022-01-28 15:49:16,521 on stmt: $const14.5 = const(NoneType, None)
DEBUG 2022-01-28 15:49:16,521 on stmt: $const16.6 = const(NoneType, None)
DEBUG 2022-01-28 15:49:16,521 on stmt: $18build_slice.7 = global(slice: <class 'slice'>)
DEBUG 2022-01-28 15:49:16,521 on stmt: $18build_slice.8 = call $18build_slice.7($const14.5, $const16.6, func=$18build_slice.7, args=(Var($const14.5, loop_hafnian_batch.py:25), Var($const16.6, loop_hafnian_batch.py:25)), kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:16,521 on stmt: $20build_tuple.9 = build_tuple(items=[Var($const12.4, loop_hafnian_batch.py:25), Var($18build_slice.8, loop_hafnian_batch.py:25)])
DEBUG 2022-01-28 15:49:16,521 on stmt: oddV = static_getitem(value=A, index=(0, slice(None, None, None)), index_var=$20build_tuple.9, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:16,521 on stmt: $28load_attr.12 = getattr(value=A, attr=shape)
DEBUG 2022-01-28 15:49:16,521 on stmt: $const30.13 = const(int, 0)
DEBUG 2022-01-28 15:49:16,521 on stmt: n = static_getitem(value=$28load_attr.12, index=0, index_var=$const30.13, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:16,521 on stmt: $const36.15 = const(int, 2)
DEBUG 2022-01-28 15:49:16,521 on stmt: $40load_method.17 = getattr(value=fixed_edge_reps, attr=sum)
DEBUG 2022-01-28 15:49:16,521 on stmt: $42call_method.18 = call $40load_method.17(func=$40load_method.17, args=[], kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:16,523 on stmt: N_fixed = $const36.15 * $42call_method.18
DEBUG 2022-01-28 15:49:16,523 on stmt: $const50.21 = const(int, 2)
DEBUG 2022-01-28 15:49:16,523 on stmt: $54binary_multiply.23 = $const50.21 * batch_max
DEBUG 2022-01-28 15:49:16,523 on stmt: $56binary_add.24 = N_fixed + $54binary_multiply.23
DEBUG 2022-01-28 15:49:16,523 on stmt: N_max = $56binary_add.24 + odd_cutoff
DEBUG 2022-01-28 15:49:16,523 on stmt: $64load_global.27 = global(np: <module 'numpy' from 'C:\\Users\\zl4821\\Anaconda3\\envs\\GBS\\lib\\site-packages\\numpy\\__init__.py'>)
DEBUG 2022-01-28 15:49:16,523 on stmt: $66load_method.28 = getattr(value=$64load_global.27, attr=concatenate)
DEBUG 2022-01-28 15:49:16,523 on stmt: $68load_global.29 = global(np: <module 'numpy' from 'C:\\Users\\zl4821\\Anaconda3\\envs\\GBS\\lib\\site-packages\\numpy\\__init__.py'>)
DEBUG 2022-01-28 15:49:16,523 on stmt: $70load_method.30 = getattr(value=$68load_global.29, attr=array)
DEBUG 2022-01-28 15:49:16,523 on stmt: $74build_list.32 = build_list(items=[Var(batch_max, loop_hafnian_batch.py:24)])
DEBUG 2022-01-28 15:49:16,523 on stmt: $76call_method.33 = call $70load_method.30($74build_list.32, func=$70load_method.30, args=[Var($74build_list.32, loop_hafnian_batch.py:32)], kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:16,523 on stmt: $80build_tuple.35 = build_tuple(items=[Var($76call_method.33, loop_hafnian_batch.py:32), Var(fixed_edge_reps, loop_hafnian_batch.py:24)])
DEBUG 2022-01-28 15:49:16,523 on stmt: edge_reps = call $66load_method.28($80build_tuple.35, func=$66load_method.28, args=[Var($80build_tuple.35, loop_hafnian_batch.py:32)], kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:16,523 on stmt: $86load_global.37 = global(np: <module 'numpy' from 'C:\\Users\\zl4821\\Anaconda3\\envs\\GBS\\lib\\site-packages\\numpy\\__init__.py'>)
DEBUG 2022-01-28 15:49:16,523 on stmt: $88load_method.38 = getattr(value=$86load_global.37, attr=prod)
DEBUG 2022-01-28 15:49:16,523 on stmt: $const92.40 = const(int, 1)
DEBUG 2022-01-28 15:49:16,523 on stmt: $94binary_add.41 = edge_reps + $const92.40
DEBUG 2022-01-28 15:49:16,523 on stmt: steps = call $88load_method.38($94binary_add.41, func=$88load_method.38, args=[Var($94binary_add.41, loop_hafnian_batch.py:33)], kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:16,523 on stmt: $102load_method.44 = getattr(value=edge_reps, attr=max)
DEBUG 2022-01-28 15:49:16,523 on stmt: $104call_method.45 = call $102load_method.44(func=$102load_method.44, args=[], kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:16,523 on stmt: max_binom = $104call_method.45 + odd_cutoff
DEBUG 2022-01-28 15:49:16,523 on stmt: $112load_global.48 = global(precompute_binoms: CPUDispatcher(<function precompute_binoms at 0x00000241074240D0>))
DEBUG 2022-01-28 15:49:16,523 on stmt: binoms = call $112load_global.48(max_binom, func=$112load_global.48, args=[Var(max_binom, loop_hafnian_batch.py:35)], kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:16,523 on stmt: $120load_global.51 = global(np: <module 'numpy' from 'C:\\Users\\zl4821\\Anaconda3\\envs\\GBS\\lib\\site-packages\\numpy\\__init__.py'>)
DEBUG 2022-01-28 15:49:16,523 on stmt: $122load_attr.52 = getattr(value=$120load_global.51, attr=zeros)
DEBUG 2022-01-28 15:49:16,523 on stmt: $const124.53 = const(int, 2)
DEBUG 2022-01-28 15:49:16,523 on stmt: $128binary_multiply.55 = $const124.53 * batch_max
DEBUG 2022-01-28 15:49:16,523 on stmt: $132binary_add.57 = $128binary_multiply.55 + odd_cutoff
DEBUG 2022-01-28 15:49:16,523 on stmt: $const134.58 = const(int, 1)
DEBUG 2022-01-28 15:49:16,523 on stmt: $136binary_add.59 = $132binary_add.57 + $const134.58
DEBUG 2022-01-28 15:49:16,523 on stmt: $138load_global.60 = global(np: <module 'numpy' from 'C:\\Users\\zl4821\\Anaconda3\\envs\\GBS\\lib\\site-packages\\numpy\\__init__.py'>)
DEBUG 2022-01-28 15:49:16,523 on stmt: $140load_attr.61 = getattr(value=$138load_global.60, attr=complex128)
DEBUG 2022-01-28 15:49:16,523 on stmt: H_batch = call $122load_attr.52($136binary_add.59, func=$122load_attr.52, args=[Var($136binary_add.59, loop_hafnian_batch.py:38)], kws=[('dtype', Var($140load_attr.61, loop_hafnian_batch.py:38))], vararg=None, target=None)
DEBUG 2022-01-28 15:49:16,523 on stmt: $148load_global.64 = global(numba: <module 'numba' from 'C:\\Users\\zl4821\\Anaconda3\\envs\\GBS\\lib\\site-packages\\numba\\__init__.py'>)
DEBUG 2022-01-28 15:49:16,523 on stmt: $150load_method.65 = getattr(value=$148load_global.64, attr=prange)
DEBUG 2022-01-28 15:49:16,523 on stmt: $154call_method.67 = call $150load_method.65(steps, func=$150load_method.65, args=[Var(steps, loop_hafnian_batch.py:33)], kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:16,523 on stmt: $156get_iter.68 = getiter(value=$154call_method.67)
DEBUG 2022-01-28 15:49:16,523 on stmt: $phi158.0 = $156get_iter.68
DEBUG 2022-01-28 15:49:16,523 on stmt: jump 158
DEBUG 2022-01-28 15:49:16,523 ==== SSA block rewrite pass on 158
DEBUG 2022-01-28 15:49:16,523 Running <numba.core.ssa._FreshVarHandler object at 0x0000024108BEA160>
DEBUG 2022-01-28 15:49:16,523 on stmt: H_batch.2 = phi(incoming_values=[Var(H_batch, loop_hafnian_batch.py:38), Var(H_batch.1, loop_hafnian_batch.py:75)], incoming_blocks=[0, 510])
DEBUG 2022-01-28 15:49:16,523 on stmt: $158for_iter.1 = iternext(value=$phi158.0)
DEBUG 2022-01-28 15:49:16,523 on stmt: $158for_iter.2 = pair_first(value=$158for_iter.1)
DEBUG 2022-01-28 15:49:16,523 on stmt: $158for_iter.3 = pair_second(value=$158for_iter.1)
DEBUG 2022-01-28 15:49:16,523 on stmt: $phi162.1 = $158for_iter.2
DEBUG 2022-01-28 15:49:16,523 on stmt: branch $158for_iter.3, 162, 520
DEBUG 2022-01-28 15:49:16,523 ==== SSA block rewrite pass on 162
DEBUG 2022-01-28 15:49:16,523 Running <numba.core.ssa._FreshVarHandler object at 0x0000024108BEA160>
DEBUG 2022-01-28 15:49:16,523 on stmt: j = $phi162.1
DEBUG 2022-01-28 15:49:16,523 on stmt: $164load_global.2 = global(np: <module 'numpy' from 'C:\\Users\\zl4821\\Anaconda3\\envs\\GBS\\lib\\site-packages\\numpy\\__init__.py'>)
DEBUG 2022-01-28 15:49:16,523 on stmt: $166load_attr.3 = getattr(value=$164load_global.2, attr=zeros)
DEBUG 2022-01-28 15:49:16,523 on stmt: $const168.4 = const(int, 2)
DEBUG 2022-01-28 15:49:16,523 on stmt: $172binary_multiply.6 = $const168.4 * batch_max
DEBUG 2022-01-28 15:49:16,523 on stmt: $176binary_add.8 = $172binary_multiply.6 + odd_cutoff
DEBUG 2022-01-28 15:49:16,523 on stmt: $const178.9 = const(int, 1)
DEBUG 2022-01-28 15:49:16,523 on stmt: $180binary_add.10 = $176binary_add.8 + $const178.9
DEBUG 2022-01-28 15:49:16,523 on stmt: $182load_global.11 = global(np: <module 'numpy' from 'C:\\Users\\zl4821\\Anaconda3\\envs\\GBS\\lib\\site-packages\\numpy\\__init__.py'>)
DEBUG 2022-01-28 15:49:16,523 on stmt: $184load_attr.12 = getattr(value=$182load_global.11, attr=complex128)
DEBUG 2022-01-28 15:49:16,523 on stmt: Hnew = call $166load_attr.3($180binary_add.10, func=$166load_attr.3, args=[Var($180binary_add.10, loop_hafnian_batch.py:41)], kws=[('dtype', Var($184load_attr.12, loop_hafnian_batch.py:41))], vararg=None, target=None)
DEBUG 2022-01-28 15:49:16,523 on stmt: $192load_global.15 = global(find_kept_edges: CPUDispatcher(<function find_kept_edges at 0x0000024107424550>))
DEBUG 2022-01-28 15:49:16,523 on stmt: kept_edges = call $192load_global.15(j, edge_reps, func=$192load_global.15, args=[Var(j, loop_hafnian_batch.py:39), Var(edge_reps, loop_hafnian_batch.py:32)], kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:16,523 on stmt: $204load_method.20 = getattr(value=kept_edges, attr=sum)
DEBUG 2022-01-28 15:49:16,523 on stmt: edges_sum = call $204load_method.20(func=$204load_method.20, args=[], kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:16,523 on stmt: binom_prod = const(float, 1.0)
DEBUG 2022-01-28 15:49:16,523 on stmt: $214load_global.23 = global(range: <class 'range'>)
DEBUG 2022-01-28 15:49:16,523 on stmt: $const216.24 = const(int, 1)
DEBUG 2022-01-28 15:49:16,523 on stmt: $const220.26 = const(int, 2)
DEBUG 2022-01-28 15:49:16,523 on stmt: $222binary_floor_divide.27 = n // $const220.26
DEBUG 2022-01-28 15:49:16,523 on stmt: $224call_function.28 = call $214load_global.23($const216.24, $222binary_floor_divide.27, func=$214load_global.23, args=[Var($const216.24, loop_hafnian_batch.py:47), Var($222binary_floor_divide.27, loop_hafnian_batch.py:47)], kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:16,523 on stmt: $226get_iter.29 = getiter(value=$224call_function.28)
DEBUG 2022-01-28 15:49:16,523 on stmt: $phi228.1 = $226get_iter.29
DEBUG 2022-01-28 15:49:16,523 on stmt: jump 228
DEBUG 2022-01-28 15:49:16,523 ==== SSA block rewrite pass on 228
DEBUG 2022-01-28 15:49:16,523 Running <numba.core.ssa._FreshVarHandler object at 0x0000024108BEA160>
DEBUG 2022-01-28 15:49:16,523 on stmt: binom_prod.2 = phi(incoming_values=[Var(binom_prod, loop_hafnian_batch.py:46), Var(binom_prod.1, loop_hafnian_batch.py:48)], incoming_blocks=[162, 230])
DEBUG 2022-01-28 15:49:16,531 on stmt: $228for_iter.2 = iternext(value=$phi228.1)
DEBUG 2022-01-28 15:49:16,531 on stmt: $228for_iter.3 = pair_first(value=$228for_iter.2)
DEBUG 2022-01-28 15:49:16,531 on stmt: $228for_iter.4 = pair_second(value=$228for_iter.2)
DEBUG 2022-01-28 15:49:16,531 on stmt: $phi230.2 = $228for_iter.3
DEBUG 2022-01-28 15:49:16,531 on stmt: branch $228for_iter.4, 230, 258
DEBUG 2022-01-28 15:49:16,531 ==== SSA block rewrite pass on 230
DEBUG 2022-01-28 15:49:16,531 Running <numba.core.ssa._FreshVarHandler object at 0x0000024108BEA160>
DEBUG 2022-01-28 15:49:16,531 on stmt: i = $phi230.2
DEBUG 2022-01-28 15:49:16,531 on stmt: $240binary_subscr.7 = getitem(value=edge_reps, index=i, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:16,534 on stmt: $246binary_subscr.10 = getitem(value=kept_edges, index=i, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:16,534 on stmt: $248build_tuple.11 = build_tuple(items=[Var($240binary_subscr.7, loop_hafnian_batch.py:48), Var($246binary_subscr.10, loop_hafnian_batch.py:48)])
DEBUG 2022-01-28 15:49:16,534 on stmt: $250binary_subscr.12 = getitem(value=binoms, index=$248build_tuple.11, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:16,534 on stmt: $252inplace_multiply.13 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=binom_prod.2, rhs=$250binary_subscr.12, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-01-28 15:49:16,534 on stmt: binom_prod.1 = $252inplace_multiply.13
DEBUG 2022-01-28 15:49:16,534 on stmt: jump 228
DEBUG 2022-01-28 15:49:16,534 ==== SSA block rewrite pass on 258
DEBUG 2022-01-28 15:49:16,534 Running <numba.core.ssa._FreshVarHandler object at 0x0000024108BEA160>
DEBUG 2022-01-28 15:49:16,534 on stmt: bool260 = global(bool: <class 'bool'>)
DEBUG 2022-01-28 15:49:16,534 on stmt: $260pred = call bool260(glynn, func=bool260, args=(Var(glynn, loop_hafnian_batch.py:24),), kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:16,534 on stmt: branch $260pred, 264, 278
DEBUG 2022-01-28 15:49:16,534 ==== SSA block rewrite pass on 264
DEBUG 2022-01-28 15:49:16,534 Running <numba.core.ssa._FreshVarHandler object at 0x0000024108BEA160>
DEBUG 2022-01-28 15:49:16,534 on stmt: $const264.1 = const(int, 2)
DEBUG 2022-01-28 15:49:16,534 on stmt: $268binary_multiply.3 = $const264.1 * kept_edges
DEBUG 2022-01-28 15:49:16,534 on stmt: delta = $268binary_multiply.3 - edge_reps
DEBUG 2022-01-28 15:49:16,534 first assign: delta
DEBUG 2022-01-28 15:49:16,534 replaced with: delta = $268binary_multiply.3 - edge_reps
DEBUG 2022-01-28 15:49:16,534 on stmt: jump 282
DEBUG 2022-01-28 15:49:16,534 ==== SSA block rewrite pass on 278
DEBUG 2022-01-28 15:49:16,534 Running <numba.core.ssa._FreshVarHandler object at 0x0000024108BEA160>
DEBUG 2022-01-28 15:49:16,534 on stmt: delta = kept_edges
DEBUG 2022-01-28 15:49:16,534 replaced with: delta.1 = kept_edges
DEBUG 2022-01-28 15:49:16,534 on stmt: jump 282
DEBUG 2022-01-28 15:49:16,534 ==== SSA block rewrite pass on 282
DEBUG 2022-01-28 15:49:16,534 Running <numba.core.ssa._FreshVarHandler object at 0x0000024108BEA160>
DEBUG 2022-01-28 15:49:16,534 on stmt: $282load_global.1 = global(get_submatrices: CPUDispatcher(<function get_submatrices at 0x0000024107424E50>))
DEBUG 2022-01-28 15:49:16,534 on stmt: $292call_function.6 = call $282load_global.1(delta, A, D, oddV, func=$282load_global.1, args=[Var(delta, loop_hafnian_batch.py:51), Var(A, loop_hafnian_batch.py:24), Var(D, loop_hafnian_batch.py:24), Var(oddV, loop_hafnian_batch.py:25)], kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:16,534 on stmt: $294unpack_sequence.11 = exhaust_iter(value=$292call_function.6, count=4)
DEBUG 2022-01-28 15:49:16,534 on stmt: $294unpack_sequence.7 = static_getitem(value=$294unpack_sequence.11, index=0, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:16,534 on stmt: $294unpack_sequence.8 = static_getitem(value=$294unpack_sequence.11, index=1, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:16,534 on stmt: $294unpack_sequence.9 = static_getitem(value=$294unpack_sequence.11, index=2, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:16,534 on stmt: $294unpack_sequence.10 = static_getitem(value=$294unpack_sequence.11, index=3, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:16,534 on stmt: AX_S = $294unpack_sequence.7
DEBUG 2022-01-28 15:49:16,534 on stmt: XD_S = $294unpack_sequence.8
DEBUG 2022-01-28 15:49:16,534 on stmt: D_S = $294unpack_sequence.9
DEBUG 2022-01-28 15:49:16,534 on stmt: oddVX_S = $294unpack_sequence.10
DEBUG 2022-01-28 15:49:16,534 on stmt: $304load_global.12 = global(eigvals: CPUDispatcher(<function eigvals at 0x00000241074303A0>))
DEBUG 2022-01-28 15:49:16,534 on stmt: E = call $304load_global.12(AX_S, func=$304load_global.12, args=[Var(AX_S, loop_hafnian_batch.py:55)], kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:16,534 on stmt: $312load_global.15 = global(f_loop: CPUDispatcher(<function f_loop at 0x00000241074248B0>))
DEBUG 2022-01-28 15:49:16,534 on stmt: f_even = call $312load_global.15(E, AX_S, XD_S, D_S, N_max, func=$312load_global.15, args=[Var(E, loop_hafnian_batch.py:57), Var(AX_S, loop_hafnian_batch.py:55), Var(XD_S, loop_hafnian_batch.py:55), Var(D_S, loop_hafnian_batch.py:55), Var(N_max, loop_hafnian_batch.py:30)], kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:16,534 on stmt: $328load_global.22 = global(f_loop_odd: CPUDispatcher(<function f_loop_odd at 0x0000024107424AF0>))
DEBUG 2022-01-28 15:49:16,534 on stmt: f_odd = call $328load_global.22(E, AX_S, XD_S, D_S, N_max, oddloop, oddVX_S, func=$328load_global.22, args=[Var(E, loop_hafnian_batch.py:57), Var(AX_S, loop_hafnian_batch.py:55), Var(XD_S, loop_hafnian_batch.py:55), Var(D_S, loop_hafnian_batch.py:55), Var(N_max, loop_hafnian_batch.py:30), Var(oddloop, loop_hafnian_batch.py:24), Var(oddVX_S, loop_hafnian_batch.py:55)], kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:16,534 on stmt: $348load_global.31 = global(range: <class 'range'>)
DEBUG 2022-01-28 15:49:16,534 on stmt: $const350.32 = const(int, 2)
DEBUG 2022-01-28 15:49:16,534 on stmt: $const354.34 = const(int, 0)
DEBUG 2022-01-28 15:49:16,534 on stmt: $356binary_subscr.35 = static_getitem(value=kept_edges, index=0, index_var=$const354.34, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:16,534 on stmt: $358binary_multiply.36 = $const350.32 * $356binary_subscr.35
DEBUG 2022-01-28 15:49:16,534 on stmt: $const360.37 = const(int, 2)
DEBUG 2022-01-28 15:49:16,534 on stmt: $364binary_multiply.39 = $const360.37 * batch_max
DEBUG 2022-01-28 15:49:16,534 on stmt: $368binary_add.41 = $364binary_multiply.39 + odd_cutoff
DEBUG 2022-01-28 15:49:16,534 on stmt: $const370.42 = const(int, 1)
DEBUG 2022-01-28 15:49:16,534 on stmt: $372binary_add.43 = $368binary_add.41 + $const370.42
DEBUG 2022-01-28 15:49:16,534 on stmt: $374call_function.44 = call $348load_global.31($358binary_multiply.36, $372binary_add.43, func=$348load_global.31, args=[Var($358binary_multiply.36, loop_hafnian_batch.py:64), Var($372binary_add.43, loop_hafnian_batch.py:64)], kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:16,534 on stmt: $376get_iter.45 = getiter(value=$374call_function.44)
DEBUG 2022-01-28 15:49:16,534 on stmt: $phi378.1 = $376get_iter.45
DEBUG 2022-01-28 15:49:16,534 on stmt: jump 378
DEBUG 2022-01-28 15:49:16,534 ==== SSA block rewrite pass on 378
DEBUG 2022-01-28 15:49:16,534 Running <numba.core.ssa._FreshVarHandler object at 0x0000024108BEA160>
DEBUG 2022-01-28 15:49:16,534 on stmt: $378for_iter.2 = iternext(value=$phi378.1)
DEBUG 2022-01-28 15:49:16,534 on stmt: $378for_iter.3 = pair_first(value=$378for_iter.2)
DEBUG 2022-01-28 15:49:16,534 on stmt: $378for_iter.4 = pair_second(value=$378for_iter.2)
DEBUG 2022-01-28 15:49:16,534 on stmt: $phi380.2 = $378for_iter.3
DEBUG 2022-01-28 15:49:16,534 on stmt: branch $378for_iter.4, 380, 510
DEBUG 2022-01-28 15:49:16,534 ==== SSA block rewrite pass on 380
DEBUG 2022-01-28 15:49:16,534 Running <numba.core.ssa._FreshVarHandler object at 0x0000024108BEA160>
DEBUG 2022-01-28 15:49:16,534 on stmt: N_det = $phi380.2
DEBUG 2022-01-28 15:49:16,534 on stmt: N = N_fixed + N_det
DEBUG 2022-01-28 15:49:16,534 on stmt: $const390.6 = const(float, -1.0)
DEBUG 2022-01-28 15:49:16,534 on stmt: $const394.8 = const(int, 2)
DEBUG 2022-01-28 15:49:16,534 on stmt: $396binary_floor_divide.9 = N // $const394.8
DEBUG 2022-01-28 15:49:16,534 on stmt: $400binary_subtract.11 = $396binary_floor_divide.9 - edges_sum
DEBUG 2022-01-28 15:49:16,534 on stmt: plus_minus = $const390.6 ** $400binary_subtract.11
DEBUG 2022-01-28 15:49:16,534 on stmt: $const410.15 = const(int, 2)
DEBUG 2022-01-28 15:49:16,534 on stmt: $412binary_floor_divide.16 = N_det // $const410.15
DEBUG 2022-01-28 15:49:16,534 on stmt: $const416.18 = const(int, 0)
DEBUG 2022-01-28 15:49:16,534 on stmt: $418binary_subscr.19 = static_getitem(value=kept_edges, index=0, index_var=$const416.18, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:16,534 on stmt: $420build_tuple.20 = build_tuple(items=[Var($412binary_floor_divide.16, loop_hafnian_batch.py:68), Var($418binary_subscr.19, loop_hafnian_batch.py:68)])
DEBUG 2022-01-28 15:49:16,534 on stmt: $422binary_subscr.21 = getitem(value=binoms, index=$420build_tuple.20, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:16,534 on stmt: n_det_binom_prod = $422binary_subscr.21 * binom_prod.2
DEBUG 2022-01-28 15:49:16,534 on stmt: $const432.25 = const(int, 2)
DEBUG 2022-01-28 15:49:16,534 on stmt: $434binary_modulo.26 = N_det % $const432.25
DEBUG 2022-01-28 15:49:16,542 on stmt: $const436.27 = const(int, 0)
DEBUG 2022-01-28 15:49:16,542 on stmt: $438compare_op.28 = $434binary_modulo.26 == $const436.27
DEBUG 2022-01-28 15:49:16,542 on stmt: bool440 = global(bool: <class 'bool'>)
DEBUG 2022-01-28 15:49:16,542 on stmt: $440pred = call bool440($438compare_op.28, func=bool440, args=(Var($438compare_op.28, loop_hafnian_batch.py:70),), kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:16,542 on stmt: branch $440pred, 444, 478
DEBUG 2022-01-28 15:49:16,542 ==== SSA block rewrite pass on 444
DEBUG 2022-01-28 15:49:16,542 Running <numba.core.ssa._FreshVarHandler object at 0x0000024108BEA160>
DEBUG 2022-01-28 15:49:16,542 on stmt: $450binary_subscr.6 = getitem(value=Hnew, index=N_det, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:16,542 on stmt: $456binary_multiply.9 = n_det_binom_prod * plus_minus
DEBUG 2022-01-28 15:49:16,542 on stmt: $const462.12 = const(int, 2)
DEBUG 2022-01-28 15:49:16,542 on stmt: $464binary_floor_divide.13 = N // $const462.12
DEBUG 2022-01-28 15:49:16,542 on stmt: $466binary_subscr.14 = getitem(value=f_even, index=$464binary_floor_divide.13, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:16,542 on stmt: $468binary_multiply.15 = $456binary_multiply.9 * $466binary_subscr.14
DEBUG 2022-01-28 15:49:16,542 on stmt: $470inplace_add.16 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$450binary_subscr.6, rhs=$468binary_multiply.15, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-01-28 15:49:16,542 on stmt: Hnew[N_det] = $470inplace_add.16
DEBUG 2022-01-28 15:49:16,542 on stmt: jump 506
DEBUG 2022-01-28 15:49:16,542 ==== SSA block rewrite pass on 478
DEBUG 2022-01-28 15:49:16,542 Running <numba.core.ssa._FreshVarHandler object at 0x0000024108BEA160>
DEBUG 2022-01-28 15:49:16,542 on stmt: $484binary_subscr.6 = getitem(value=Hnew, index=N_det, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:16,542 on stmt: $490binary_multiply.9 = n_det_binom_prod * plus_minus
DEBUG 2022-01-28 15:49:16,542 on stmt: $496binary_subscr.12 = getitem(value=f_odd, index=N, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:16,542 on stmt: $498binary_multiply.13 = $490binary_multiply.9 * $496binary_subscr.12
DEBUG 2022-01-28 15:49:16,542 on stmt: $500inplace_add.14 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$484binary_subscr.6, rhs=$498binary_multiply.13, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-01-28 15:49:16,542 on stmt: Hnew[N_det] = $500inplace_add.14
DEBUG 2022-01-28 15:49:16,542 on stmt: jump 506
DEBUG 2022-01-28 15:49:16,542 ==== SSA block rewrite pass on 506
DEBUG 2022-01-28 15:49:16,542 Running <numba.core.ssa._FreshVarHandler object at 0x0000024108BEA160>
DEBUG 2022-01-28 15:49:16,544 on stmt: jump 378
DEBUG 2022-01-28 15:49:16,544 ==== SSA block rewrite pass on 510
DEBUG 2022-01-28 15:49:16,544 Running <numba.core.ssa._FreshVarHandler object at 0x0000024108BEA160>
DEBUG 2022-01-28 15:49:16,544 on stmt: $514inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=H_batch.2, rhs=Hnew, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-01-28 15:49:16,544 on stmt: H_batch.1 = $514inplace_add.3
DEBUG 2022-01-28 15:49:16,544 on stmt: jump 158
DEBUG 2022-01-28 15:49:16,544 ==== SSA block rewrite pass on 520
DEBUG 2022-01-28 15:49:16,544 Running <numba.core.ssa._FreshVarHandler object at 0x0000024108BEA160>
DEBUG 2022-01-28 15:49:16,544 on stmt: bool522 = global(bool: <class 'bool'>)
DEBUG 2022-01-28 15:49:16,544 on stmt: $522pred = call bool522(glynn, func=bool522, args=(Var(glynn, loop_hafnian_batch.py:24),), kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:16,544 on stmt: branch $522pred, 526, 580
DEBUG 2022-01-28 15:49:16,544 ==== SSA block rewrite pass on 526
DEBUG 2022-01-28 15:49:16,544 Running <numba.core.ssa._FreshVarHandler object at 0x0000024108BEA160>
DEBUG 2022-01-28 15:49:16,544 on stmt: $526load_global.0 = global(range: <class 'range'>)
DEBUG 2022-01-28 15:49:16,544 on stmt: $530load_attr.2 = getattr(value=H_batch.2, attr=shape)
DEBUG 2022-01-28 15:49:16,544 on stmt: $const532.3 = const(int, 0)
DEBUG 2022-01-28 15:49:16,544 on stmt: $534binary_subscr.4 = static_getitem(value=$530load_attr.2, index=0, index_var=$const532.3, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:16,544 on stmt: $536call_function.5 = call $526load_global.0($534binary_subscr.4, func=$526load_global.0, args=[Var($534binary_subscr.4, loop_hafnian_batch.py:78)], kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:16,544 on stmt: $538get_iter.6 = getiter(value=$536call_function.5)
DEBUG 2022-01-28 15:49:16,544 on stmt: $phi540.0 = $538get_iter.6
DEBUG 2022-01-28 15:49:16,544 on stmt: jump 540
DEBUG 2022-01-28 15:49:16,544 ==== SSA block rewrite pass on 540
DEBUG 2022-01-28 15:49:16,544 Running <numba.core.ssa._FreshVarHandler object at 0x0000024108BEA160>
DEBUG 2022-01-28 15:49:16,544 on stmt: $540for_iter.1 = iternext(value=$phi540.0)
DEBUG 2022-01-28 15:49:16,544 on stmt: $540for_iter.2 = pair_first(value=$540for_iter.1)
DEBUG 2022-01-28 15:49:16,544 on stmt: $540for_iter.3 = pair_second(value=$540for_iter.1)
DEBUG 2022-01-28 15:49:16,544 on stmt: $phi542.1 = $540for_iter.2
DEBUG 2022-01-28 15:49:16,544 on stmt: branch $540for_iter.3, 542, 580
DEBUG 2022-01-28 15:49:16,544 ==== SSA block rewrite pass on 542
DEBUG 2022-01-28 15:49:16,544 Running <numba.core.ssa._FreshVarHandler object at 0x0000024108BEA160>
DEBUG 2022-01-28 15:49:16,544 on stmt: j.1 = $phi542.1
DEBUG 2022-01-28 15:49:16,544 on stmt: x = N_fixed + j.1
DEBUG 2022-01-28 15:49:16,544 on stmt: $558binary_subscr.9 = getitem(value=H_batch.2, index=j.1, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:16,544 on stmt: $const560.10 = const(float, 0.5)
DEBUG 2022-01-28 15:49:16,544 on stmt: $const564.12 = const(int, 2)
DEBUG 2022-01-28 15:49:16,544 on stmt: $566binary_floor_divide.13 = x // $const564.12
DEBUG 2022-01-28 15:49:16,544 on stmt: $568binary_power.14 = $const560.10 ** $566binary_floor_divide.13
DEBUG 2022-01-28 15:49:16,544 on stmt: $570inplace_multiply.15 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=$558binary_subscr.9, rhs=$568binary_power.14, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-01-28 15:49:16,544 on stmt: H_batch.2[j.1] = $570inplace_multiply.15
DEBUG 2022-01-28 15:49:16,544 on stmt: jump 540
DEBUG 2022-01-28 15:49:16,544 ==== SSA block rewrite pass on 580
DEBUG 2022-01-28 15:49:16,544 Running <numba.core.ssa._FreshVarHandler object at 0x0000024108BEA160>
DEBUG 2022-01-28 15:49:16,544 on stmt: $582return_value.1 = cast(value=H_batch.2)
DEBUG 2022-01-28 15:49:16,544 on stmt: return $582return_value.1
DEBUG 2022-01-28 15:49:16,544 Replaced assignments: defaultdict(<class 'list'>,
            {264: [<numba.core.ir.Assign object at 0x000002410AF223D0>],
             278: [<numba.core.ir.Assign object at 0x000002410AF22280>]})
DEBUG 2022-01-28 15:49:16,544 ==== SSA block rewrite pass on 0
DEBUG 2022-01-28 15:49:16,544 Running <numba.core.ssa._FixSSAVars object at 0x000002410AF22F10>
DEBUG 2022-01-28 15:49:16,544 on stmt: A = arg(0, name=A)
DEBUG 2022-01-28 15:49:16,544 on stmt: D = arg(1, name=D)
DEBUG 2022-01-28 15:49:16,544 on stmt: fixed_edge_reps = arg(2, name=fixed_edge_reps)
DEBUG 2022-01-28 15:49:16,544 on stmt: batch_max = arg(3, name=batch_max)
DEBUG 2022-01-28 15:49:16,544 on stmt: odd_cutoff = arg(4, name=odd_cutoff)
DEBUG 2022-01-28 15:49:16,544 on stmt: glynn = arg(5, name=glynn)
DEBUG 2022-01-28 15:49:16,544 on stmt: $const4.1 = const(int, 0)
DEBUG 2022-01-28 15:49:16,544 on stmt: oddloop = static_getitem(value=D, index=0, index_var=$const4.1, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:16,544 on stmt: $const12.4 = const(int, 0)
DEBUG 2022-01-28 15:49:16,544 on stmt: $const14.5 = const(NoneType, None)
DEBUG 2022-01-28 15:49:16,544 on stmt: $const16.6 = const(NoneType, None)
DEBUG 2022-01-28 15:49:16,544 on stmt: $18build_slice.7 = global(slice: <class 'slice'>)
DEBUG 2022-01-28 15:49:16,544 on stmt: $18build_slice.8 = call $18build_slice.7($const14.5, $const16.6, func=$18build_slice.7, args=(Var($const14.5, loop_hafnian_batch.py:25), Var($const16.6, loop_hafnian_batch.py:25)), kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:16,544 on stmt: $20build_tuple.9 = build_tuple(items=[Var($const12.4, loop_hafnian_batch.py:25), Var($18build_slice.8, loop_hafnian_batch.py:25)])
DEBUG 2022-01-28 15:49:16,544 on stmt: oddV = static_getitem(value=A, index=(0, slice(None, None, None)), index_var=$20build_tuple.9, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:16,544 on stmt: $28load_attr.12 = getattr(value=A, attr=shape)
DEBUG 2022-01-28 15:49:16,544 on stmt: $const30.13 = const(int, 0)
DEBUG 2022-01-28 15:49:16,544 on stmt: n = static_getitem(value=$28load_attr.12, index=0, index_var=$const30.13, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:16,544 on stmt: $const36.15 = const(int, 2)
DEBUG 2022-01-28 15:49:16,544 on stmt: $40load_method.17 = getattr(value=fixed_edge_reps, attr=sum)
DEBUG 2022-01-28 15:49:16,544 on stmt: $42call_method.18 = call $40load_method.17(func=$40load_method.17, args=[], kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:16,544 on stmt: N_fixed = $const36.15 * $42call_method.18
DEBUG 2022-01-28 15:49:16,544 on stmt: $const50.21 = const(int, 2)
DEBUG 2022-01-28 15:49:16,544 on stmt: $54binary_multiply.23 = $const50.21 * batch_max
DEBUG 2022-01-28 15:49:16,544 on stmt: $56binary_add.24 = N_fixed + $54binary_multiply.23
DEBUG 2022-01-28 15:49:16,544 on stmt: N_max = $56binary_add.24 + odd_cutoff
DEBUG 2022-01-28 15:49:16,544 on stmt: $64load_global.27 = global(np: <module 'numpy' from 'C:\\Users\\zl4821\\Anaconda3\\envs\\GBS\\lib\\site-packages\\numpy\\__init__.py'>)
DEBUG 2022-01-28 15:49:16,544 on stmt: $66load_method.28 = getattr(value=$64load_global.27, attr=concatenate)
DEBUG 2022-01-28 15:49:16,544 on stmt: $68load_global.29 = global(np: <module 'numpy' from 'C:\\Users\\zl4821\\Anaconda3\\envs\\GBS\\lib\\site-packages\\numpy\\__init__.py'>)
DEBUG 2022-01-28 15:49:16,544 on stmt: $70load_method.30 = getattr(value=$68load_global.29, attr=array)
DEBUG 2022-01-28 15:49:16,544 on stmt: $74build_list.32 = build_list(items=[Var(batch_max, loop_hafnian_batch.py:24)])
DEBUG 2022-01-28 15:49:16,544 on stmt: $76call_method.33 = call $70load_method.30($74build_list.32, func=$70load_method.30, args=[Var($74build_list.32, loop_hafnian_batch.py:32)], kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:16,544 on stmt: $80build_tuple.35 = build_tuple(items=[Var($76call_method.33, loop_hafnian_batch.py:32), Var(fixed_edge_reps, loop_hafnian_batch.py:24)])
DEBUG 2022-01-28 15:49:16,544 on stmt: edge_reps = call $66load_method.28($80build_tuple.35, func=$66load_method.28, args=[Var($80build_tuple.35, loop_hafnian_batch.py:32)], kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:16,544 on stmt: $86load_global.37 = global(np: <module 'numpy' from 'C:\\Users\\zl4821\\Anaconda3\\envs\\GBS\\lib\\site-packages\\numpy\\__init__.py'>)
DEBUG 2022-01-28 15:49:16,552 on stmt: $88load_method.38 = getattr(value=$86load_global.37, attr=prod)
DEBUG 2022-01-28 15:49:16,552 on stmt: $const92.40 = const(int, 1)
DEBUG 2022-01-28 15:49:16,552 on stmt: $94binary_add.41 = edge_reps + $const92.40
DEBUG 2022-01-28 15:49:16,552 on stmt: steps = call $88load_method.38($94binary_add.41, func=$88load_method.38, args=[Var($94binary_add.41, loop_hafnian_batch.py:33)], kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:16,552 on stmt: $102load_method.44 = getattr(value=edge_reps, attr=max)
DEBUG 2022-01-28 15:49:16,552 on stmt: $104call_method.45 = call $102load_method.44(func=$102load_method.44, args=[], kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:16,552 on stmt: max_binom = $104call_method.45 + odd_cutoff
DEBUG 2022-01-28 15:49:16,552 on stmt: $112load_global.48 = global(precompute_binoms: CPUDispatcher(<function precompute_binoms at 0x00000241074240D0>))
DEBUG 2022-01-28 15:49:16,554 on stmt: binoms = call $112load_global.48(max_binom, func=$112load_global.48, args=[Var(max_binom, loop_hafnian_batch.py:35)], kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:16,554 on stmt: $120load_global.51 = global(np: <module 'numpy' from 'C:\\Users\\zl4821\\Anaconda3\\envs\\GBS\\lib\\site-packages\\numpy\\__init__.py'>)
DEBUG 2022-01-28 15:49:16,554 on stmt: $122load_attr.52 = getattr(value=$120load_global.51, attr=zeros)
DEBUG 2022-01-28 15:49:16,554 on stmt: $const124.53 = const(int, 2)
DEBUG 2022-01-28 15:49:16,554 on stmt: $128binary_multiply.55 = $const124.53 * batch_max
DEBUG 2022-01-28 15:49:16,554 on stmt: $132binary_add.57 = $128binary_multiply.55 + odd_cutoff
DEBUG 2022-01-28 15:49:16,554 on stmt: $const134.58 = const(int, 1)
DEBUG 2022-01-28 15:49:16,554 on stmt: $136binary_add.59 = $132binary_add.57 + $const134.58
DEBUG 2022-01-28 15:49:16,554 on stmt: $138load_global.60 = global(np: <module 'numpy' from 'C:\\Users\\zl4821\\Anaconda3\\envs\\GBS\\lib\\site-packages\\numpy\\__init__.py'>)
DEBUG 2022-01-28 15:49:16,554 on stmt: $140load_attr.61 = getattr(value=$138load_global.60, attr=complex128)
DEBUG 2022-01-28 15:49:16,554 on stmt: H_batch = call $122load_attr.52($136binary_add.59, func=$122load_attr.52, args=[Var($136binary_add.59, loop_hafnian_batch.py:38)], kws=[('dtype', Var($140load_attr.61, loop_hafnian_batch.py:38))], vararg=None, target=None)
DEBUG 2022-01-28 15:49:16,554 on stmt: $148load_global.64 = global(numba: <module 'numba' from 'C:\\Users\\zl4821\\Anaconda3\\envs\\GBS\\lib\\site-packages\\numba\\__init__.py'>)
DEBUG 2022-01-28 15:49:16,554 on stmt: $150load_method.65 = getattr(value=$148load_global.64, attr=prange)
DEBUG 2022-01-28 15:49:16,554 on stmt: $154call_method.67 = call $150load_method.65(steps, func=$150load_method.65, args=[Var(steps, loop_hafnian_batch.py:33)], kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:16,554 on stmt: $156get_iter.68 = getiter(value=$154call_method.67)
DEBUG 2022-01-28 15:49:16,554 on stmt: $phi158.0 = $156get_iter.68
DEBUG 2022-01-28 15:49:16,554 on stmt: jump 158
DEBUG 2022-01-28 15:49:16,554 ==== SSA block rewrite pass on 158
DEBUG 2022-01-28 15:49:16,554 Running <numba.core.ssa._FixSSAVars object at 0x000002410AF22F10>
DEBUG 2022-01-28 15:49:16,554 on stmt: H_batch.2 = phi(incoming_values=[Var(H_batch, loop_hafnian_batch.py:38), Var(H_batch.1, loop_hafnian_batch.py:75)], incoming_blocks=[0, 510])
DEBUG 2022-01-28 15:49:16,554 on stmt: $158for_iter.1 = iternext(value=$phi158.0)
DEBUG 2022-01-28 15:49:16,554 on stmt: $158for_iter.2 = pair_first(value=$158for_iter.1)
DEBUG 2022-01-28 15:49:16,554 on stmt: $158for_iter.3 = pair_second(value=$158for_iter.1)
DEBUG 2022-01-28 15:49:16,554 on stmt: $phi162.1 = $158for_iter.2
DEBUG 2022-01-28 15:49:16,554 on stmt: branch $158for_iter.3, 162, 520
DEBUG 2022-01-28 15:49:16,554 ==== SSA block rewrite pass on 162
DEBUG 2022-01-28 15:49:16,554 Running <numba.core.ssa._FixSSAVars object at 0x000002410AF22F10>
DEBUG 2022-01-28 15:49:16,554 on stmt: j = $phi162.1
DEBUG 2022-01-28 15:49:16,554 on stmt: $164load_global.2 = global(np: <module 'numpy' from 'C:\\Users\\zl4821\\Anaconda3\\envs\\GBS\\lib\\site-packages\\numpy\\__init__.py'>)
DEBUG 2022-01-28 15:49:16,554 on stmt: $166load_attr.3 = getattr(value=$164load_global.2, attr=zeros)
DEBUG 2022-01-28 15:49:16,554 on stmt: $const168.4 = const(int, 2)
DEBUG 2022-01-28 15:49:16,554 on stmt: $172binary_multiply.6 = $const168.4 * batch_max
DEBUG 2022-01-28 15:49:16,554 on stmt: $176binary_add.8 = $172binary_multiply.6 + odd_cutoff
DEBUG 2022-01-28 15:49:16,554 on stmt: $const178.9 = const(int, 1)
DEBUG 2022-01-28 15:49:16,554 on stmt: $180binary_add.10 = $176binary_add.8 + $const178.9
DEBUG 2022-01-28 15:49:16,554 on stmt: $182load_global.11 = global(np: <module 'numpy' from 'C:\\Users\\zl4821\\Anaconda3\\envs\\GBS\\lib\\site-packages\\numpy\\__init__.py'>)
DEBUG 2022-01-28 15:49:16,554 on stmt: $184load_attr.12 = getattr(value=$182load_global.11, attr=complex128)
DEBUG 2022-01-28 15:49:16,554 on stmt: Hnew = call $166load_attr.3($180binary_add.10, func=$166load_attr.3, args=[Var($180binary_add.10, loop_hafnian_batch.py:41)], kws=[('dtype', Var($184load_attr.12, loop_hafnian_batch.py:41))], vararg=None, target=None)
DEBUG 2022-01-28 15:49:16,554 on stmt: $192load_global.15 = global(find_kept_edges: CPUDispatcher(<function find_kept_edges at 0x0000024107424550>))
DEBUG 2022-01-28 15:49:16,554 on stmt: kept_edges = call $192load_global.15(j, edge_reps, func=$192load_global.15, args=[Var(j, loop_hafnian_batch.py:39), Var(edge_reps, loop_hafnian_batch.py:32)], kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:16,554 on stmt: $204load_method.20 = getattr(value=kept_edges, attr=sum)
DEBUG 2022-01-28 15:49:16,554 on stmt: edges_sum = call $204load_method.20(func=$204load_method.20, args=[], kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:16,554 on stmt: binom_prod = const(float, 1.0)
DEBUG 2022-01-28 15:49:16,554 on stmt: $214load_global.23 = global(range: <class 'range'>)
DEBUG 2022-01-28 15:49:16,554 on stmt: $const216.24 = const(int, 1)
DEBUG 2022-01-28 15:49:16,554 on stmt: $const220.26 = const(int, 2)
DEBUG 2022-01-28 15:49:16,554 on stmt: $222binary_floor_divide.27 = n // $const220.26
DEBUG 2022-01-28 15:49:16,554 on stmt: $224call_function.28 = call $214load_global.23($const216.24, $222binary_floor_divide.27, func=$214load_global.23, args=[Var($const216.24, loop_hafnian_batch.py:47), Var($222binary_floor_divide.27, loop_hafnian_batch.py:47)], kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:16,554 on stmt: $226get_iter.29 = getiter(value=$224call_function.28)
DEBUG 2022-01-28 15:49:16,554 on stmt: $phi228.1 = $226get_iter.29
DEBUG 2022-01-28 15:49:16,554 on stmt: jump 228
DEBUG 2022-01-28 15:49:16,554 ==== SSA block rewrite pass on 228
DEBUG 2022-01-28 15:49:16,554 Running <numba.core.ssa._FixSSAVars object at 0x000002410AF22F10>
DEBUG 2022-01-28 15:49:16,554 on stmt: binom_prod.2 = phi(incoming_values=[Var(binom_prod, loop_hafnian_batch.py:46), Var(binom_prod.1, loop_hafnian_batch.py:48)], incoming_blocks=[162, 230])
DEBUG 2022-01-28 15:49:16,554 on stmt: $228for_iter.2 = iternext(value=$phi228.1)
DEBUG 2022-01-28 15:49:16,562 on stmt: $228for_iter.3 = pair_first(value=$228for_iter.2)
DEBUG 2022-01-28 15:49:16,562 on stmt: $228for_iter.4 = pair_second(value=$228for_iter.2)
DEBUG 2022-01-28 15:49:16,562 on stmt: $phi230.2 = $228for_iter.3
DEBUG 2022-01-28 15:49:16,562 on stmt: branch $228for_iter.4, 230, 258
DEBUG 2022-01-28 15:49:16,562 ==== SSA block rewrite pass on 230
DEBUG 2022-01-28 15:49:16,562 Running <numba.core.ssa._FixSSAVars object at 0x000002410AF22F10>
DEBUG 2022-01-28 15:49:16,562 on stmt: i = $phi230.2
DEBUG 2022-01-28 15:49:16,562 on stmt: $240binary_subscr.7 = getitem(value=edge_reps, index=i, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:16,562 on stmt: $246binary_subscr.10 = getitem(value=kept_edges, index=i, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:16,562 on stmt: $248build_tuple.11 = build_tuple(items=[Var($240binary_subscr.7, loop_hafnian_batch.py:48), Var($246binary_subscr.10, loop_hafnian_batch.py:48)])
DEBUG 2022-01-28 15:49:16,562 on stmt: $250binary_subscr.12 = getitem(value=binoms, index=$248build_tuple.11, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:16,562 on stmt: $252inplace_multiply.13 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=binom_prod.2, rhs=$250binary_subscr.12, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-01-28 15:49:16,562 on stmt: binom_prod.1 = $252inplace_multiply.13
DEBUG 2022-01-28 15:49:16,562 on stmt: jump 228
DEBUG 2022-01-28 15:49:16,562 ==== SSA block rewrite pass on 258
DEBUG 2022-01-28 15:49:16,562 Running <numba.core.ssa._FixSSAVars object at 0x000002410AF22F10>
DEBUG 2022-01-28 15:49:16,562 on stmt: bool260 = global(bool: <class 'bool'>)
DEBUG 2022-01-28 15:49:16,564 on stmt: $260pred = call bool260(glynn, func=bool260, args=(Var(glynn, loop_hafnian_batch.py:24),), kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:16,564 on stmt: branch $260pred, 264, 278
DEBUG 2022-01-28 15:49:16,564 ==== SSA block rewrite pass on 264
DEBUG 2022-01-28 15:49:16,564 Running <numba.core.ssa._FixSSAVars object at 0x000002410AF22F10>
DEBUG 2022-01-28 15:49:16,564 on stmt: $const264.1 = const(int, 2)
DEBUG 2022-01-28 15:49:16,564 on stmt: $268binary_multiply.3 = $const264.1 * kept_edges
DEBUG 2022-01-28 15:49:16,564 on stmt: delta = $268binary_multiply.3 - edge_reps
DEBUG 2022-01-28 15:49:16,564 on stmt: jump 282
DEBUG 2022-01-28 15:49:16,564 ==== SSA block rewrite pass on 278
DEBUG 2022-01-28 15:49:16,564 Running <numba.core.ssa._FixSSAVars object at 0x000002410AF22F10>
DEBUG 2022-01-28 15:49:16,564 on stmt: delta.1 = kept_edges
DEBUG 2022-01-28 15:49:16,564 on stmt: jump 282
DEBUG 2022-01-28 15:49:16,564 ==== SSA block rewrite pass on 282
DEBUG 2022-01-28 15:49:16,564 Running <numba.core.ssa._FixSSAVars object at 0x000002410AF22F10>
DEBUG 2022-01-28 15:49:16,564 on stmt: $282load_global.1 = global(get_submatrices: CPUDispatcher(<function get_submatrices at 0x0000024107424E50>))
DEBUG 2022-01-28 15:49:16,564 on stmt: $292call_function.6 = call $282load_global.1(delta, A, D, oddV, func=$282load_global.1, args=[Var(delta, loop_hafnian_batch.py:51), Var(A, loop_hafnian_batch.py:24), Var(D, loop_hafnian_batch.py:24), Var(oddV, loop_hafnian_batch.py:25)], kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:16,564 find_def var='delta' stmt=$292call_function.6 = call $282load_global.1(delta, A, D, oddV, func=$282load_global.1, args=[Var(delta, loop_hafnian_batch.py:51), Var(A, loop_hafnian_batch.py:24), Var(D, loop_hafnian_batch.py:24), Var(oddV, loop_hafnian_batch.py:25)], kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:16,564 find_def_from_top label 282
DEBUG 2022-01-28 15:49:16,564 insert phi node delta.2 = phi(incoming_values=[], incoming_blocks=[]) at 282
DEBUG 2022-01-28 15:49:16,564 find_def_from_bottom label 264
DEBUG 2022-01-28 15:49:16,564 incoming_def delta = $268binary_multiply.3 - edge_reps
DEBUG 2022-01-28 15:49:16,564 find_def_from_bottom label 278
DEBUG 2022-01-28 15:49:16,564 incoming_def delta.1 = kept_edges
DEBUG 2022-01-28 15:49:16,564 replaced with: $292call_function.6 = call $282load_global.1(delta.2, A, D, oddV, func=$282load_global.1, args=[Var(delta.2, loop_hafnian_batch.py:55), Var(A, loop_hafnian_batch.py:24), Var(D, loop_hafnian_batch.py:24), Var(oddV, loop_hafnian_batch.py:25)], kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:16,564 on stmt: $294unpack_sequence.11 = exhaust_iter(value=$292call_function.6, count=4)
DEBUG 2022-01-28 15:49:16,564 on stmt: $294unpack_sequence.7 = static_getitem(value=$294unpack_sequence.11, index=0, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:16,564 on stmt: $294unpack_sequence.8 = static_getitem(value=$294unpack_sequence.11, index=1, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:16,564 on stmt: $294unpack_sequence.9 = static_getitem(value=$294unpack_sequence.11, index=2, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:16,564 on stmt: $294unpack_sequence.10 = static_getitem(value=$294unpack_sequence.11, index=3, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:16,564 on stmt: AX_S = $294unpack_sequence.7
DEBUG 2022-01-28 15:49:16,564 on stmt: XD_S = $294unpack_sequence.8
DEBUG 2022-01-28 15:49:16,564 on stmt: D_S = $294unpack_sequence.9
DEBUG 2022-01-28 15:49:16,564 on stmt: oddVX_S = $294unpack_sequence.10
DEBUG 2022-01-28 15:49:16,564 on stmt: $304load_global.12 = global(eigvals: CPUDispatcher(<function eigvals at 0x00000241074303A0>))
DEBUG 2022-01-28 15:49:16,564 on stmt: E = call $304load_global.12(AX_S, func=$304load_global.12, args=[Var(AX_S, loop_hafnian_batch.py:55)], kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:16,564 on stmt: $312load_global.15 = global(f_loop: CPUDispatcher(<function f_loop at 0x00000241074248B0>))
DEBUG 2022-01-28 15:49:16,564 on stmt: f_even = call $312load_global.15(E, AX_S, XD_S, D_S, N_max, func=$312load_global.15, args=[Var(E, loop_hafnian_batch.py:57), Var(AX_S, loop_hafnian_batch.py:55), Var(XD_S, loop_hafnian_batch.py:55), Var(D_S, loop_hafnian_batch.py:55), Var(N_max, loop_hafnian_batch.py:30)], kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:16,564 on stmt: $328load_global.22 = global(f_loop_odd: CPUDispatcher(<function f_loop_odd at 0x0000024107424AF0>))
DEBUG 2022-01-28 15:49:16,564 on stmt: f_odd = call $328load_global.22(E, AX_S, XD_S, D_S, N_max, oddloop, oddVX_S, func=$328load_global.22, args=[Var(E, loop_hafnian_batch.py:57), Var(AX_S, loop_hafnian_batch.py:55), Var(XD_S, loop_hafnian_batch.py:55), Var(D_S, loop_hafnian_batch.py:55), Var(N_max, loop_hafnian_batch.py:30), Var(oddloop, loop_hafnian_batch.py:24), Var(oddVX_S, loop_hafnian_batch.py:55)], kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:16,564 on stmt: $348load_global.31 = global(range: <class 'range'>)
DEBUG 2022-01-28 15:49:16,564 on stmt: $const350.32 = const(int, 2)
DEBUG 2022-01-28 15:49:16,564 on stmt: $const354.34 = const(int, 0)
DEBUG 2022-01-28 15:49:16,564 on stmt: $356binary_subscr.35 = static_getitem(value=kept_edges, index=0, index_var=$const354.34, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:16,564 on stmt: $358binary_multiply.36 = $const350.32 * $356binary_subscr.35
DEBUG 2022-01-28 15:49:16,564 on stmt: $const360.37 = const(int, 2)
DEBUG 2022-01-28 15:49:16,564 on stmt: $364binary_multiply.39 = $const360.37 * batch_max
DEBUG 2022-01-28 15:49:16,564 on stmt: $368binary_add.41 = $364binary_multiply.39 + odd_cutoff
DEBUG 2022-01-28 15:49:16,564 on stmt: $const370.42 = const(int, 1)
DEBUG 2022-01-28 15:49:16,564 on stmt: $372binary_add.43 = $368binary_add.41 + $const370.42
DEBUG 2022-01-28 15:49:16,564 on stmt: $374call_function.44 = call $348load_global.31($358binary_multiply.36, $372binary_add.43, func=$348load_global.31, args=[Var($358binary_multiply.36, loop_hafnian_batch.py:64), Var($372binary_add.43, loop_hafnian_batch.py:64)], kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:16,564 on stmt: $376get_iter.45 = getiter(value=$374call_function.44)
DEBUG 2022-01-28 15:49:16,564 on stmt: $phi378.1 = $376get_iter.45
DEBUG 2022-01-28 15:49:16,564 on stmt: jump 378
DEBUG 2022-01-28 15:49:16,564 ==== SSA block rewrite pass on 378
DEBUG 2022-01-28 15:49:16,564 Running <numba.core.ssa._FixSSAVars object at 0x000002410AF22F10>
DEBUG 2022-01-28 15:49:16,564 on stmt: $378for_iter.2 = iternext(value=$phi378.1)
DEBUG 2022-01-28 15:49:16,564 on stmt: $378for_iter.3 = pair_first(value=$378for_iter.2)
DEBUG 2022-01-28 15:49:16,564 on stmt: $378for_iter.4 = pair_second(value=$378for_iter.2)
DEBUG 2022-01-28 15:49:16,564 on stmt: $phi380.2 = $378for_iter.3
DEBUG 2022-01-28 15:49:16,564 on stmt: branch $378for_iter.4, 380, 510
DEBUG 2022-01-28 15:49:16,564 ==== SSA block rewrite pass on 380
DEBUG 2022-01-28 15:49:16,564 Running <numba.core.ssa._FixSSAVars object at 0x000002410AF22F10>
DEBUG 2022-01-28 15:49:16,572 on stmt: N_det = $phi380.2
DEBUG 2022-01-28 15:49:16,572 on stmt: N = N_fixed + N_det
DEBUG 2022-01-28 15:49:16,572 on stmt: $const390.6 = const(float, -1.0)
DEBUG 2022-01-28 15:49:16,572 on stmt: $const394.8 = const(int, 2)
DEBUG 2022-01-28 15:49:16,572 on stmt: $396binary_floor_divide.9 = N // $const394.8
DEBUG 2022-01-28 15:49:16,572 on stmt: $400binary_subtract.11 = $396binary_floor_divide.9 - edges_sum
DEBUG 2022-01-28 15:49:16,572 on stmt: plus_minus = $const390.6 ** $400binary_subtract.11
DEBUG 2022-01-28 15:49:16,572 on stmt: $const410.15 = const(int, 2)
DEBUG 2022-01-28 15:49:16,572 on stmt: $412binary_floor_divide.16 = N_det // $const410.15
DEBUG 2022-01-28 15:49:16,572 on stmt: $const416.18 = const(int, 0)
DEBUG 2022-01-28 15:49:16,572 on stmt: $418binary_subscr.19 = static_getitem(value=kept_edges, index=0, index_var=$const416.18, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:16,572 on stmt: $420build_tuple.20 = build_tuple(items=[Var($412binary_floor_divide.16, loop_hafnian_batch.py:68), Var($418binary_subscr.19, loop_hafnian_batch.py:68)])
DEBUG 2022-01-28 15:49:16,572 on stmt: $422binary_subscr.21 = getitem(value=binoms, index=$420build_tuple.20, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:16,574 on stmt: n_det_binom_prod = $422binary_subscr.21 * binom_prod.2
DEBUG 2022-01-28 15:49:16,574 on stmt: $const432.25 = const(int, 2)
DEBUG 2022-01-28 15:49:16,574 on stmt: $434binary_modulo.26 = N_det % $const432.25
DEBUG 2022-01-28 15:49:16,574 on stmt: $const436.27 = const(int, 0)
DEBUG 2022-01-28 15:49:16,574 on stmt: $438compare_op.28 = $434binary_modulo.26 == $const436.27
DEBUG 2022-01-28 15:49:16,574 on stmt: bool440 = global(bool: <class 'bool'>)
DEBUG 2022-01-28 15:49:16,574 on stmt: $440pred = call bool440($438compare_op.28, func=bool440, args=(Var($438compare_op.28, loop_hafnian_batch.py:70),), kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:16,574 on stmt: branch $440pred, 444, 478
DEBUG 2022-01-28 15:49:16,574 ==== SSA block rewrite pass on 444
DEBUG 2022-01-28 15:49:16,574 Running <numba.core.ssa._FixSSAVars object at 0x000002410AF22F10>
DEBUG 2022-01-28 15:49:16,574 on stmt: $450binary_subscr.6 = getitem(value=Hnew, index=N_det, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:16,574 on stmt: $456binary_multiply.9 = n_det_binom_prod * plus_minus
DEBUG 2022-01-28 15:49:16,574 on stmt: $const462.12 = const(int, 2)
DEBUG 2022-01-28 15:49:16,574 on stmt: $464binary_floor_divide.13 = N // $const462.12
DEBUG 2022-01-28 15:49:16,574 on stmt: $466binary_subscr.14 = getitem(value=f_even, index=$464binary_floor_divide.13, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:16,574 on stmt: $468binary_multiply.15 = $456binary_multiply.9 * $466binary_subscr.14
DEBUG 2022-01-28 15:49:16,574 on stmt: $470inplace_add.16 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$450binary_subscr.6, rhs=$468binary_multiply.15, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-01-28 15:49:16,574 on stmt: Hnew[N_det] = $470inplace_add.16
DEBUG 2022-01-28 15:49:16,574 on stmt: jump 506
DEBUG 2022-01-28 15:49:16,574 ==== SSA block rewrite pass on 478
DEBUG 2022-01-28 15:49:16,574 Running <numba.core.ssa._FixSSAVars object at 0x000002410AF22F10>
DEBUG 2022-01-28 15:49:16,574 on stmt: $484binary_subscr.6 = getitem(value=Hnew, index=N_det, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:16,574 on stmt: $490binary_multiply.9 = n_det_binom_prod * plus_minus
DEBUG 2022-01-28 15:49:16,574 on stmt: $496binary_subscr.12 = getitem(value=f_odd, index=N, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:16,574 on stmt: $498binary_multiply.13 = $490binary_multiply.9 * $496binary_subscr.12
DEBUG 2022-01-28 15:49:16,574 on stmt: $500inplace_add.14 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$484binary_subscr.6, rhs=$498binary_multiply.13, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-01-28 15:49:16,574 on stmt: Hnew[N_det] = $500inplace_add.14
DEBUG 2022-01-28 15:49:16,574 on stmt: jump 506
DEBUG 2022-01-28 15:49:16,574 ==== SSA block rewrite pass on 506
DEBUG 2022-01-28 15:49:16,574 Running <numba.core.ssa._FixSSAVars object at 0x000002410AF22F10>
DEBUG 2022-01-28 15:49:16,574 on stmt: jump 378
DEBUG 2022-01-28 15:49:16,574 ==== SSA block rewrite pass on 510
DEBUG 2022-01-28 15:49:16,574 Running <numba.core.ssa._FixSSAVars object at 0x000002410AF22F10>
DEBUG 2022-01-28 15:49:16,574 on stmt: $514inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=H_batch.2, rhs=Hnew, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-01-28 15:49:16,574 on stmt: H_batch.1 = $514inplace_add.3
DEBUG 2022-01-28 15:49:16,574 on stmt: jump 158
DEBUG 2022-01-28 15:49:16,574 ==== SSA block rewrite pass on 520
DEBUG 2022-01-28 15:49:16,574 Running <numba.core.ssa._FixSSAVars object at 0x000002410AF22F10>
DEBUG 2022-01-28 15:49:16,574 on stmt: bool522 = global(bool: <class 'bool'>)
DEBUG 2022-01-28 15:49:16,574 on stmt: $522pred = call bool522(glynn, func=bool522, args=(Var(glynn, loop_hafnian_batch.py:24),), kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:16,574 on stmt: branch $522pred, 526, 580
DEBUG 2022-01-28 15:49:16,574 ==== SSA block rewrite pass on 526
DEBUG 2022-01-28 15:49:16,574 Running <numba.core.ssa._FixSSAVars object at 0x000002410AF22F10>
DEBUG 2022-01-28 15:49:16,574 on stmt: $526load_global.0 = global(range: <class 'range'>)
DEBUG 2022-01-28 15:49:16,574 on stmt: $530load_attr.2 = getattr(value=H_batch.2, attr=shape)
DEBUG 2022-01-28 15:49:16,574 on stmt: $const532.3 = const(int, 0)
DEBUG 2022-01-28 15:49:16,574 on stmt: $534binary_subscr.4 = static_getitem(value=$530load_attr.2, index=0, index_var=$const532.3, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:16,574 on stmt: $536call_function.5 = call $526load_global.0($534binary_subscr.4, func=$526load_global.0, args=[Var($534binary_subscr.4, loop_hafnian_batch.py:78)], kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:16,574 on stmt: $538get_iter.6 = getiter(value=$536call_function.5)
DEBUG 2022-01-28 15:49:16,574 on stmt: $phi540.0 = $538get_iter.6
DEBUG 2022-01-28 15:49:16,574 on stmt: jump 540
DEBUG 2022-01-28 15:49:16,574 ==== SSA block rewrite pass on 540
DEBUG 2022-01-28 15:49:16,574 Running <numba.core.ssa._FixSSAVars object at 0x000002410AF22F10>
DEBUG 2022-01-28 15:49:16,574 on stmt: $540for_iter.1 = iternext(value=$phi540.0)
DEBUG 2022-01-28 15:49:16,574 on stmt: $540for_iter.2 = pair_first(value=$540for_iter.1)
DEBUG 2022-01-28 15:49:16,574 on stmt: $540for_iter.3 = pair_second(value=$540for_iter.1)
DEBUG 2022-01-28 15:49:16,574 on stmt: $phi542.1 = $540for_iter.2
DEBUG 2022-01-28 15:49:16,574 on stmt: branch $540for_iter.3, 542, 580
DEBUG 2022-01-28 15:49:16,574 ==== SSA block rewrite pass on 542
DEBUG 2022-01-28 15:49:16,574 Running <numba.core.ssa._FixSSAVars object at 0x000002410AF22F10>
DEBUG 2022-01-28 15:49:16,582 on stmt: j.1 = $phi542.1
DEBUG 2022-01-28 15:49:16,582 on stmt: x = N_fixed + j.1
DEBUG 2022-01-28 15:49:16,582 on stmt: $558binary_subscr.9 = getitem(value=H_batch.2, index=j.1, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:16,582 on stmt: $const560.10 = const(float, 0.5)
DEBUG 2022-01-28 15:49:16,582 on stmt: $const564.12 = const(int, 2)
DEBUG 2022-01-28 15:49:16,582 on stmt: $566binary_floor_divide.13 = x // $const564.12
DEBUG 2022-01-28 15:49:16,582 on stmt: $568binary_power.14 = $const560.10 ** $566binary_floor_divide.13
DEBUG 2022-01-28 15:49:16,582 on stmt: $570inplace_multiply.15 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=$558binary_subscr.9, rhs=$568binary_power.14, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-01-28 15:49:16,582 on stmt: H_batch.2[j.1] = $570inplace_multiply.15
DEBUG 2022-01-28 15:49:16,582 on stmt: jump 540
DEBUG 2022-01-28 15:49:16,582 ==== SSA block rewrite pass on 580
DEBUG 2022-01-28 15:49:16,582 Running <numba.core.ssa._FixSSAVars object at 0x000002410AF22F10>
DEBUG 2022-01-28 15:49:16,582 on stmt: $582return_value.1 = cast(value=H_batch.2)
DEBUG 2022-01-28 15:49:16,582 on stmt: return $582return_value.1
DEBUG 2022-01-28 15:49:16,594 bytecode dump:
>          0	NOP(arg=None, lineno=3)
           2	LOAD_GLOBAL(arg=0, lineno=3)
           4	LOAD_FAST(arg=0, lineno=3)
           6	CALL_FUNCTION(arg=1, lineno=3)
           8	RETURN_VALUE(arg=None, lineno=3)
DEBUG 2022-01-28 15:49:16,594 pending: deque([State(pc_initial=0 nstack_initial=0)])
DEBUG 2022-01-28 15:49:16,594 stack: []
DEBUG 2022-01-28 15:49:16,594 dispatch pc=0, inst=NOP(arg=None, lineno=3)
DEBUG 2022-01-28 15:49:16,594 stack []
DEBUG 2022-01-28 15:49:16,594 dispatch pc=2, inst=LOAD_GLOBAL(arg=0, lineno=3)
DEBUG 2022-01-28 15:49:16,594 stack []
DEBUG 2022-01-28 15:49:16,594 dispatch pc=4, inst=LOAD_FAST(arg=0, lineno=3)
DEBUG 2022-01-28 15:49:16,594 stack ['$2load_global.0']
DEBUG 2022-01-28 15:49:16,594 dispatch pc=6, inst=CALL_FUNCTION(arg=1, lineno=3)
DEBUG 2022-01-28 15:49:16,594 stack ['$2load_global.0', '$tmp04.1']
DEBUG 2022-01-28 15:49:16,602 dispatch pc=8, inst=RETURN_VALUE(arg=None, lineno=3)
DEBUG 2022-01-28 15:49:16,602 stack ['$6call_function.2']
DEBUG 2022-01-28 15:49:16,602 end state. edges=[]
DEBUG 2022-01-28 15:49:16,602 -------------------------Prune PHIs-------------------------
DEBUG 2022-01-28 15:49:16,602 Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
DEBUG 2022-01-28 15:49:16,602 defmap: {}
DEBUG 2022-01-28 15:49:16,602 phismap: defaultdict(<class 'set'>, {})
DEBUG 2022-01-28 15:49:16,602 changing phismap: defaultdict(<class 'set'>, {})
DEBUG 2022-01-28 15:49:16,602 keep phismap: {}
DEBUG 2022-01-28 15:49:16,602 new_out: defaultdict(<class 'dict'>, {})
DEBUG 2022-01-28 15:49:16,602 ----------------------DONE Prune PHIs-----------------------
DEBUG 2022-01-28 15:49:16,602 block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$2load_global.0'}), (4, {'res': '$tmp04.1'}), (6, {'func': '$2load_global.0', 'args': ['$tmp04.1'], 'res': '$6call_function.2'}), (8, {'retval': '$6call_function.2', 'castval': '$8return_value.3'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG 2022-01-28 15:49:16,602 label 0:
    tmp0 = arg(0, name=tmp0)                 ['tmp0']
    $2load_global.0 = global(intrin: <intrinsic stub>) ['$2load_global.0']
    $6call_function.2 = call $2load_global.0(tmp0, func=$2load_global.0, args=[Var(tmp0, <string>:3)], kws=(), vararg=None, target=None) ['$2load_global.0', '$6call_function.2', 'tmp0']
    $8return_value.3 = cast(value=$6call_function.2) ['$6call_function.2', '$8return_value.3']
    return $8return_value.3                  ['$8return_value.3']

DEBUG 2022-01-28 15:49:16,604 ==== SSA block analysis pass on 0
DEBUG 2022-01-28 15:49:16,604 Running <numba.core.ssa._GatherDefsHandler object at 0x000002410AFA1580>
DEBUG 2022-01-28 15:49:16,604 on stmt: tmp0 = arg(0, name=tmp0)
DEBUG 2022-01-28 15:49:16,604 on stmt: $2load_global.0 = global(intrin: <intrinsic stub>)
DEBUG 2022-01-28 15:49:16,604 on stmt: $6call_function.2 = call $2load_global.0(tmp0, func=$2load_global.0, args=[Var(tmp0, <string>:3)], kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:16,604 on stmt: $8return_value.3 = cast(value=$6call_function.2)
DEBUG 2022-01-28 15:49:16,604 on stmt: return $8return_value.3
DEBUG 2022-01-28 15:49:16,604 defs defaultdict(<class 'list'>,
            {'$2load_global.0': [<numba.core.ir.Assign object at 0x000002410AFA6490>],
             '$6call_function.2': [<numba.core.ir.Assign object at 0x000002410AFA6790>],
             '$8return_value.3': [<numba.core.ir.Assign object at 0x000002410AFA68B0>],
             'tmp0': [<numba.core.ir.Assign object at 0x000002410AF99BB0>]})
DEBUG 2022-01-28 15:49:16,604 SSA violators set()
DEBUG 2022-01-28 15:49:16,614 bytecode dump:
>          0	NOP(arg=None, lineno=3543)
           2	LOAD_FAST(arg=0, lineno=3543)
           4	LOAD_METHOD(arg=0, lineno=3543)
           6	LOAD_FAST(arg=1, lineno=3543)
           8	LOAD_FAST(arg=2, lineno=3543)
          10	CALL_METHOD(arg=2, lineno=3543)
          12	RETURN_VALUE(arg=None, lineno=3543)
DEBUG 2022-01-28 15:49:16,614 pending: deque([State(pc_initial=0 nstack_initial=0)])
DEBUG 2022-01-28 15:49:16,614 stack: []
DEBUG 2022-01-28 15:49:16,614 dispatch pc=0, inst=NOP(arg=None, lineno=3543)
DEBUG 2022-01-28 15:49:16,614 stack []
DEBUG 2022-01-28 15:49:16,614 dispatch pc=2, inst=LOAD_FAST(arg=0, lineno=3543)
DEBUG 2022-01-28 15:49:16,614 stack []
DEBUG 2022-01-28 15:49:16,614 dispatch pc=4, inst=LOAD_METHOD(arg=0, lineno=3543)
DEBUG 2022-01-28 15:49:16,614 stack ['$arrtype2.0']
DEBUG 2022-01-28 15:49:16,614 dispatch pc=6, inst=LOAD_FAST(arg=1, lineno=3543)
DEBUG 2022-01-28 15:49:16,614 stack ['$4load_method.1']
DEBUG 2022-01-28 15:49:16,614 dispatch pc=8, inst=LOAD_FAST(arg=2, lineno=3543)
DEBUG 2022-01-28 15:49:16,614 stack ['$4load_method.1', '$size6.2']
DEBUG 2022-01-28 15:49:16,614 dispatch pc=10, inst=CALL_METHOD(arg=2, lineno=3543)
DEBUG 2022-01-28 15:49:16,614 stack ['$4load_method.1', '$size6.2', '$align8.3']
DEBUG 2022-01-28 15:49:16,614 dispatch pc=12, inst=RETURN_VALUE(arg=None, lineno=3543)
DEBUG 2022-01-28 15:49:16,614 stack ['$10call_method.4']
DEBUG 2022-01-28 15:49:16,614 end state. edges=[]
DEBUG 2022-01-28 15:49:16,614 -------------------------Prune PHIs-------------------------
DEBUG 2022-01-28 15:49:16,614 Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
DEBUG 2022-01-28 15:49:16,614 defmap: {}
DEBUG 2022-01-28 15:49:16,614 phismap: defaultdict(<class 'set'>, {})
DEBUG 2022-01-28 15:49:16,614 changing phismap: defaultdict(<class 'set'>, {})
DEBUG 2022-01-28 15:49:16,614 keep phismap: {}
DEBUG 2022-01-28 15:49:16,614 new_out: defaultdict(<class 'dict'>, {})
DEBUG 2022-01-28 15:49:16,614 ----------------------DONE Prune PHIs-----------------------
DEBUG 2022-01-28 15:49:16,614 block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$arrtype2.0'}), (4, {'item': '$arrtype2.0', 'res': '$4load_method.1'}), (6, {'res': '$size6.2'}), (8, {'res': '$align8.3'}), (10, {'func': '$4load_method.1', 'args': ['$size6.2', '$align8.3'], 'res': '$10call_method.4'}), (12, {'retval': '$10call_method.4', 'castval': '$12return_value.5'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG 2022-01-28 15:49:16,614 label 0:
    arrtype = arg(0, name=arrtype)           ['arrtype']
    size = arg(1, name=size)                 ['size']
    align = arg(2, name=align)               ['align']
    $4load_method.1 = getattr(value=arrtype, attr=_allocate) ['$4load_method.1', 'arrtype']
    $10call_method.4 = call $4load_method.1(size, align, func=$4load_method.1, args=[Var(size, arrayobj.py:3543), Var(align, arrayobj.py:3543)], kws=(), vararg=None, target=None) ['$10call_method.4', '$4load_method.1', 'align', 'size']
    $12return_value.5 = cast(value=$10call_method.4) ['$10call_method.4', '$12return_value.5']
    return $12return_value.5                 ['$12return_value.5']

DEBUG 2022-01-28 15:49:16,624 ==== SSA block analysis pass on 0
DEBUG 2022-01-28 15:49:16,624 Running <numba.core.ssa._GatherDefsHandler object at 0x000002410AFE6CD0>
DEBUG 2022-01-28 15:49:16,624 on stmt: arrtype = arg(0, name=arrtype)
DEBUG 2022-01-28 15:49:16,624 on stmt: size = arg(1, name=size)
DEBUG 2022-01-28 15:49:16,624 on stmt: align = arg(2, name=align)
DEBUG 2022-01-28 15:49:16,624 on stmt: $4load_method.1 = getattr(value=arrtype, attr=_allocate)
DEBUG 2022-01-28 15:49:16,624 on stmt: $10call_method.4 = call $4load_method.1(size, align, func=$4load_method.1, args=[Var(size, arrayobj.py:3543), Var(align, arrayobj.py:3543)], kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:16,624 on stmt: $12return_value.5 = cast(value=$10call_method.4)
DEBUG 2022-01-28 15:49:16,624 on stmt: return $12return_value.5
DEBUG 2022-01-28 15:49:16,624 defs defaultdict(<class 'list'>,
            {'$10call_method.4': [<numba.core.ir.Assign object at 0x000002410AFEFB20>],
             '$12return_value.5': [<numba.core.ir.Assign object at 0x000002410AFEFC10>],
             '$4load_method.1': [<numba.core.ir.Assign object at 0x000002410AFEF6D0>],
             'align': [<numba.core.ir.Assign object at 0x000002410AFEF430>],
             'arrtype': [<numba.core.ir.Assign object at 0x000002410AFE6250>],
             'size': [<numba.core.ir.Assign object at 0x000002410AFE6430>]})
DEBUG 2022-01-28 15:49:16,624 SSA violators set()
DEBUG 2022-01-28 15:49:16,624 bytecode dump:
>          0	NOP(arg=None, lineno=3536)
           2	LOAD_GLOBAL(arg=0, lineno=3536)
           4	LOAD_FAST(arg=1, lineno=3536)
           6	LOAD_FAST(arg=2, lineno=3536)
           8	CALL_FUNCTION(arg=2, lineno=3536)
          10	RETURN_VALUE(arg=None, lineno=3536)
DEBUG 2022-01-28 15:49:16,624 pending: deque([State(pc_initial=0 nstack_initial=0)])
DEBUG 2022-01-28 15:49:16,624 stack: []
DEBUG 2022-01-28 15:49:16,624 dispatch pc=0, inst=NOP(arg=None, lineno=3536)
DEBUG 2022-01-28 15:49:16,624 stack []
DEBUG 2022-01-28 15:49:16,624 dispatch pc=2, inst=LOAD_GLOBAL(arg=0, lineno=3536)
DEBUG 2022-01-28 15:49:16,624 stack []
DEBUG 2022-01-28 15:49:16,624 dispatch pc=4, inst=LOAD_FAST(arg=1, lineno=3536)
DEBUG 2022-01-28 15:49:16,624 stack ['$2load_global.0']
DEBUG 2022-01-28 15:49:16,624 dispatch pc=6, inst=LOAD_FAST(arg=2, lineno=3536)
DEBUG 2022-01-28 15:49:16,624 stack ['$2load_global.0', '$allocsize4.1']
DEBUG 2022-01-28 15:49:16,624 dispatch pc=8, inst=CALL_FUNCTION(arg=2, lineno=3536)
DEBUG 2022-01-28 15:49:16,624 stack ['$2load_global.0', '$allocsize4.1', '$align6.2']
DEBUG 2022-01-28 15:49:16,624 dispatch pc=10, inst=RETURN_VALUE(arg=None, lineno=3536)
DEBUG 2022-01-28 15:49:16,624 stack ['$8call_function.3']
DEBUG 2022-01-28 15:49:16,624 end state. edges=[]
DEBUG 2022-01-28 15:49:16,624 -------------------------Prune PHIs-------------------------
DEBUG 2022-01-28 15:49:16,624 Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
DEBUG 2022-01-28 15:49:16,624 defmap: {}
DEBUG 2022-01-28 15:49:16,624 phismap: defaultdict(<class 'set'>, {})
DEBUG 2022-01-28 15:49:16,624 changing phismap: defaultdict(<class 'set'>, {})
DEBUG 2022-01-28 15:49:16,624 keep phismap: {}
DEBUG 2022-01-28 15:49:16,624 new_out: defaultdict(<class 'dict'>, {})
DEBUG 2022-01-28 15:49:16,624 ----------------------DONE Prune PHIs-----------------------
DEBUG 2022-01-28 15:49:16,624 block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$2load_global.0'}), (4, {'res': '$allocsize4.1'}), (6, {'res': '$align6.2'}), (8, {'func': '$2load_global.0', 'args': ['$allocsize4.1', '$align6.2'], 'res': '$8call_function.3'}), (10, {'retval': '$8call_function.3', 'castval': '$10return_value.4'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG 2022-01-28 15:49:16,632 label 0:
    cls = arg(0, name=cls)                   ['cls']
    allocsize = arg(1, name=allocsize)       ['allocsize']
    align = arg(2, name=align)               ['align']
    $2load_global.0 = global(intrin_alloc: <intrinsic intrin_alloc>) ['$2load_global.0']
    $8call_function.3 = call $2load_global.0(allocsize, align, func=$2load_global.0, args=[Var(allocsize, arrayobj.py:3536), Var(align, arrayobj.py:3536)], kws=(), vararg=None, target=None) ['$2load_global.0', '$8call_function.3', 'align', 'allocsize']
    $10return_value.4 = cast(value=$8call_function.3) ['$10return_value.4', '$8call_function.3']
    return $10return_value.4                 ['$10return_value.4']

DEBUG 2022-01-28 15:49:16,634 ==== SSA block analysis pass on 0
DEBUG 2022-01-28 15:49:16,634 Running <numba.core.ssa._GatherDefsHandler object at 0x000002410B06ADF0>
DEBUG 2022-01-28 15:49:16,634 on stmt: cls = arg(0, name=cls)
DEBUG 2022-01-28 15:49:16,634 on stmt: allocsize = arg(1, name=allocsize)
DEBUG 2022-01-28 15:49:16,634 on stmt: align = arg(2, name=align)
DEBUG 2022-01-28 15:49:16,634 on stmt: $2load_global.0 = global(intrin_alloc: <intrinsic intrin_alloc>)
DEBUG 2022-01-28 15:49:16,634 on stmt: $8call_function.3 = call $2load_global.0(allocsize, align, func=$2load_global.0, args=[Var(allocsize, arrayobj.py:3536), Var(align, arrayobj.py:3536)], kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:16,634 on stmt: $10return_value.4 = cast(value=$8call_function.3)
DEBUG 2022-01-28 15:49:16,634 on stmt: return $10return_value.4
DEBUG 2022-01-28 15:49:16,634 defs defaultdict(<class 'list'>,
            {'$10return_value.4': [<numba.core.ir.Assign object at 0x000002410B0736D0>],
             '$2load_global.0': [<numba.core.ir.Assign object at 0x000002410B073190>],
             '$8call_function.3': [<numba.core.ir.Assign object at 0x000002410B0735B0>],
             'align': [<numba.core.ir.Assign object at 0x000002410B06AFD0>],
             'allocsize': [<numba.core.ir.Assign object at 0x000002410B06A040>],
             'cls': [<numba.core.ir.Assign object at 0x000002410B06A520>]})
DEBUG 2022-01-28 15:49:16,634 SSA violators set()
DEBUG 2022-01-28 15:49:16,806 bytecode dump:
>          0	NOP(arg=None, lineno=3)
           2	LOAD_GLOBAL(arg=0, lineno=3)
           4	LOAD_FAST(arg=0, lineno=3)
           6	CALL_FUNCTION(arg=1, lineno=3)
           8	RETURN_VALUE(arg=None, lineno=3)
DEBUG 2022-01-28 15:49:16,806 pending: deque([State(pc_initial=0 nstack_initial=0)])
DEBUG 2022-01-28 15:49:16,806 stack: []
DEBUG 2022-01-28 15:49:16,806 dispatch pc=0, inst=NOP(arg=None, lineno=3)
DEBUG 2022-01-28 15:49:16,806 stack []
DEBUG 2022-01-28 15:49:16,806 dispatch pc=2, inst=LOAD_GLOBAL(arg=0, lineno=3)
DEBUG 2022-01-28 15:49:16,806 stack []
DEBUG 2022-01-28 15:49:16,806 dispatch pc=4, inst=LOAD_FAST(arg=0, lineno=3)
DEBUG 2022-01-28 15:49:16,806 stack ['$2load_global.0']
DEBUG 2022-01-28 15:49:16,806 dispatch pc=6, inst=CALL_FUNCTION(arg=1, lineno=3)
DEBUG 2022-01-28 15:49:16,806 stack ['$2load_global.0', '$tmp04.1']
DEBUG 2022-01-28 15:49:16,806 dispatch pc=8, inst=RETURN_VALUE(arg=None, lineno=3)
DEBUG 2022-01-28 15:49:16,806 stack ['$6call_function.2']
DEBUG 2022-01-28 15:49:16,806 end state. edges=[]
DEBUG 2022-01-28 15:49:16,806 -------------------------Prune PHIs-------------------------
DEBUG 2022-01-28 15:49:16,806 Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
DEBUG 2022-01-28 15:49:16,806 defmap: {}
DEBUG 2022-01-28 15:49:16,806 phismap: defaultdict(<class 'set'>, {})
DEBUG 2022-01-28 15:49:16,806 changing phismap: defaultdict(<class 'set'>, {})
DEBUG 2022-01-28 15:49:16,806 keep phismap: {}
DEBUG 2022-01-28 15:49:16,806 new_out: defaultdict(<class 'dict'>, {})
DEBUG 2022-01-28 15:49:16,806 ----------------------DONE Prune PHIs-----------------------
DEBUG 2022-01-28 15:49:16,806 block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$2load_global.0'}), (4, {'res': '$tmp04.1'}), (6, {'func': '$2load_global.0', 'args': ['$tmp04.1'], 'res': '$6call_function.2'}), (8, {'retval': '$6call_function.2', 'castval': '$8return_value.3'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG 2022-01-28 15:49:16,806 label 0:
    tmp0 = arg(0, name=tmp0)                 ['tmp0']
    $2load_global.0 = global(intrin: <intrinsic stub>) ['$2load_global.0']
    $6call_function.2 = call $2load_global.0(tmp0, func=$2load_global.0, args=[Var(tmp0, <string>:3)], kws=(), vararg=None, target=None) ['$2load_global.0', '$6call_function.2', 'tmp0']
    $8return_value.3 = cast(value=$6call_function.2) ['$6call_function.2', '$8return_value.3']
    return $8return_value.3                  ['$8return_value.3']

DEBUG 2022-01-28 15:49:16,806 ==== SSA block analysis pass on 0
DEBUG 2022-01-28 15:49:16,806 Running <numba.core.ssa._GatherDefsHandler object at 0x000002410B0E4CD0>
DEBUG 2022-01-28 15:49:16,806 on stmt: tmp0 = arg(0, name=tmp0)
DEBUG 2022-01-28 15:49:16,806 on stmt: $2load_global.0 = global(intrin: <intrinsic stub>)
DEBUG 2022-01-28 15:49:16,806 on stmt: $6call_function.2 = call $2load_global.0(tmp0, func=$2load_global.0, args=[Var(tmp0, <string>:3)], kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:16,806 on stmt: $8return_value.3 = cast(value=$6call_function.2)
DEBUG 2022-01-28 15:49:16,806 on stmt: return $8return_value.3
DEBUG 2022-01-28 15:49:16,806 defs defaultdict(<class 'list'>,
            {'$2load_global.0': [<numba.core.ir.Assign object at 0x000002410B0F2070>],
             '$6call_function.2': [<numba.core.ir.Assign object at 0x000002410B0F29D0>],
             '$8return_value.3': [<numba.core.ir.Assign object at 0x000002410B0F2AF0>],
             'tmp0': [<numba.core.ir.Assign object at 0x000002410B0F21F0>]})
DEBUG 2022-01-28 15:49:16,806 SSA violators set()
DEBUG 2022-01-28 15:49:17,008 bytecode dump:
>          0	NOP(arg=None, lineno=3)
           2	LOAD_GLOBAL(arg=0, lineno=3)
           4	LOAD_FAST(arg=0, lineno=3)
           6	LOAD_FAST(arg=1, lineno=3)
           8	CALL_FUNCTION(arg=2, lineno=3)
          10	RETURN_VALUE(arg=None, lineno=3)
DEBUG 2022-01-28 15:49:17,008 pending: deque([State(pc_initial=0 nstack_initial=0)])
DEBUG 2022-01-28 15:49:17,008 stack: []
DEBUG 2022-01-28 15:49:17,008 dispatch pc=0, inst=NOP(arg=None, lineno=3)
DEBUG 2022-01-28 15:49:17,008 stack []
DEBUG 2022-01-28 15:49:17,008 dispatch pc=2, inst=LOAD_GLOBAL(arg=0, lineno=3)
DEBUG 2022-01-28 15:49:17,008 stack []
DEBUG 2022-01-28 15:49:17,008 dispatch pc=4, inst=LOAD_FAST(arg=0, lineno=3)
DEBUG 2022-01-28 15:49:17,008 stack ['$2load_global.0']
DEBUG 2022-01-28 15:49:17,008 dispatch pc=6, inst=LOAD_FAST(arg=1, lineno=3)
DEBUG 2022-01-28 15:49:17,008 stack ['$2load_global.0', '$tmp04.1']
DEBUG 2022-01-28 15:49:17,008 dispatch pc=8, inst=CALL_FUNCTION(arg=2, lineno=3)
DEBUG 2022-01-28 15:49:17,008 stack ['$2load_global.0', '$tmp04.1', '$dtype6.2']
DEBUG 2022-01-28 15:49:17,008 dispatch pc=10, inst=RETURN_VALUE(arg=None, lineno=3)
DEBUG 2022-01-28 15:49:17,008 stack ['$8call_function.3']
DEBUG 2022-01-28 15:49:17,008 end state. edges=[]
DEBUG 2022-01-28 15:49:17,016 -------------------------Prune PHIs-------------------------
DEBUG 2022-01-28 15:49:17,016 Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
DEBUG 2022-01-28 15:49:17,016 defmap: {}
DEBUG 2022-01-28 15:49:17,016 phismap: defaultdict(<class 'set'>, {})
DEBUG 2022-01-28 15:49:17,016 changing phismap: defaultdict(<class 'set'>, {})
DEBUG 2022-01-28 15:49:17,016 keep phismap: {}
DEBUG 2022-01-28 15:49:17,016 new_out: defaultdict(<class 'dict'>, {})
DEBUG 2022-01-28 15:49:17,016 ----------------------DONE Prune PHIs-----------------------
DEBUG 2022-01-28 15:49:17,016 block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$2load_global.0'}), (4, {'res': '$tmp04.1'}), (6, {'res': '$dtype6.2'}), (8, {'func': '$2load_global.0', 'args': ['$tmp04.1', '$dtype6.2'], 'res': '$8call_function.3'}), (10, {'retval': '$8call_function.3', 'castval': '$10return_value.4'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG 2022-01-28 15:49:17,016 label 0:
    tmp0 = arg(0, name=tmp0)                 ['tmp0']
    dtype = arg(1, name=dtype)               ['dtype']
    $2load_global.0 = global(intrin: <intrinsic stub>) ['$2load_global.0']
    $8call_function.3 = call $2load_global.0(tmp0, dtype, func=$2load_global.0, args=[Var(tmp0, <string>:3), Var(dtype, <string>:3)], kws=(), vararg=None, target=None) ['$2load_global.0', '$8call_function.3', 'dtype', 'tmp0']
    $10return_value.4 = cast(value=$8call_function.3) ['$10return_value.4', '$8call_function.3']
    return $10return_value.4                 ['$10return_value.4']

DEBUG 2022-01-28 15:49:17,018 ==== SSA block analysis pass on 0
DEBUG 2022-01-28 15:49:17,018 Running <numba.core.ssa._GatherDefsHandler object at 0x000002410B163A00>
DEBUG 2022-01-28 15:49:17,018 on stmt: tmp0 = arg(0, name=tmp0)
DEBUG 2022-01-28 15:49:17,018 on stmt: dtype = arg(1, name=dtype)
DEBUG 2022-01-28 15:49:17,018 on stmt: $2load_global.0 = global(intrin: <intrinsic stub>)
DEBUG 2022-01-28 15:49:17,018 on stmt: $8call_function.3 = call $2load_global.0(tmp0, dtype, func=$2load_global.0, args=[Var(tmp0, <string>:3), Var(dtype, <string>:3)], kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:17,018 on stmt: $10return_value.4 = cast(value=$8call_function.3)
DEBUG 2022-01-28 15:49:17,018 on stmt: return $10return_value.4
DEBUG 2022-01-28 15:49:17,018 defs defaultdict(<class 'list'>,
            {'$10return_value.4': [<numba.core.ir.Assign object at 0x000002410B16DE50>],
             '$2load_global.0': [<numba.core.ir.Assign object at 0x000002410B16D910>],
             '$8call_function.3': [<numba.core.ir.Assign object at 0x000002410B16DD30>],
             'dtype': [<numba.core.ir.Assign object at 0x000002410B16D0D0>],
             'tmp0': [<numba.core.ir.Assign object at 0x000002410B16D1F0>]})
DEBUG 2022-01-28 15:49:17,018 SSA violators set()
DEBUG 2022-01-28 15:49:17,435 bytecode dump:
>          0	NOP(arg=None, lineno=254)
           2	LOAD_GLOBAL(arg=0, lineno=254)
           4	LOAD_ATTR(arg=1, lineno=254)
           6	LOAD_ATTR(arg=2, lineno=254)
           8	LOAD_METHOD(arg=3, lineno=254)
          10	CALL_METHOD(arg=0, lineno=254)
          12	POP_TOP(arg=None, lineno=254)
          14	LOAD_DEREF(arg=0, lineno=255)
          16	STORE_FAST(arg=1, lineno=255)
          18	LOAD_GLOBAL(arg=0, lineno=256)
          20	LOAD_ATTR(arg=1, lineno=256)
          22	LOAD_ATTR(arg=2, lineno=256)
          24	LOAD_METHOD(arg=4, lineno=256)
          26	LOAD_GLOBAL(arg=5, lineno=256)
          28	LOAD_FAST(arg=0, lineno=256)
          30	CALL_FUNCTION(arg=1, lineno=256)
          32	CALL_METHOD(arg=1, lineno=256)
          34	GET_ITER(arg=None, lineno=256)
>         36	FOR_ITER(arg=16, lineno=256)
          38	STORE_FAST(arg=2, lineno=256)
          40	LOAD_FAST(arg=1, lineno=257)
          42	LOAD_FAST(arg=0, lineno=257)
          44	LOAD_FAST(arg=2, lineno=257)
          46	BINARY_SUBSCR(arg=None, lineno=257)
          48	INPLACE_ADD(arg=None, lineno=257)
          50	STORE_FAST(arg=1, lineno=257)
          52	JUMP_ABSOLUTE(arg=36, lineno=257)
>         54	LOAD_FAST(arg=1, lineno=258)
          56	RETURN_VALUE(arg=None, lineno=258)
DEBUG 2022-01-28 15:49:17,435 pending: deque([State(pc_initial=0 nstack_initial=0)])
DEBUG 2022-01-28 15:49:17,435 stack: []
DEBUG 2022-01-28 15:49:17,435 dispatch pc=0, inst=NOP(arg=None, lineno=254)
DEBUG 2022-01-28 15:49:17,435 stack []
DEBUG 2022-01-28 15:49:17,435 dispatch pc=2, inst=LOAD_GLOBAL(arg=0, lineno=254)
DEBUG 2022-01-28 15:49:17,435 stack []
DEBUG 2022-01-28 15:49:17,435 dispatch pc=4, inst=LOAD_ATTR(arg=1, lineno=254)
DEBUG 2022-01-28 15:49:17,435 stack ['$2load_global.0']
DEBUG 2022-01-28 15:49:17,435 dispatch pc=6, inst=LOAD_ATTR(arg=2, lineno=254)
DEBUG 2022-01-28 15:49:17,435 stack ['$4load_attr.1']
DEBUG 2022-01-28 15:49:17,435 dispatch pc=8, inst=LOAD_METHOD(arg=3, lineno=254)
DEBUG 2022-01-28 15:49:17,435 stack ['$6load_attr.2']
DEBUG 2022-01-28 15:49:17,435 dispatch pc=10, inst=CALL_METHOD(arg=0, lineno=254)
DEBUG 2022-01-28 15:49:17,435 stack ['$8load_method.3']
DEBUG 2022-01-28 15:49:17,435 dispatch pc=12, inst=POP_TOP(arg=None, lineno=254)
DEBUG 2022-01-28 15:49:17,435 stack ['$10call_method.4']
DEBUG 2022-01-28 15:49:17,435 dispatch pc=14, inst=LOAD_DEREF(arg=0, lineno=255)
DEBUG 2022-01-28 15:49:17,435 stack []
DEBUG 2022-01-28 15:49:17,435 dispatch pc=16, inst=STORE_FAST(arg=1, lineno=255)
DEBUG 2022-01-28 15:49:17,435 stack ['$14load_deref.5']
DEBUG 2022-01-28 15:49:17,435 dispatch pc=18, inst=LOAD_GLOBAL(arg=0, lineno=256)
DEBUG 2022-01-28 15:49:17,435 stack []
DEBUG 2022-01-28 15:49:17,443 dispatch pc=20, inst=LOAD_ATTR(arg=1, lineno=256)
DEBUG 2022-01-28 15:49:17,443 stack ['$18load_global.6']
DEBUG 2022-01-28 15:49:17,443 dispatch pc=22, inst=LOAD_ATTR(arg=2, lineno=256)
DEBUG 2022-01-28 15:49:17,443 stack ['$20load_attr.7']
DEBUG 2022-01-28 15:49:17,443 dispatch pc=24, inst=LOAD_METHOD(arg=4, lineno=256)
DEBUG 2022-01-28 15:49:17,443 stack ['$22load_attr.8']
DEBUG 2022-01-28 15:49:17,443 dispatch pc=26, inst=LOAD_GLOBAL(arg=5, lineno=256)
DEBUG 2022-01-28 15:49:17,443 stack ['$24load_method.9']
DEBUG 2022-01-28 15:49:17,443 dispatch pc=28, inst=LOAD_FAST(arg=0, lineno=256)
DEBUG 2022-01-28 15:49:17,443 stack ['$24load_method.9', '$26load_global.10']
DEBUG 2022-01-28 15:49:17,443 dispatch pc=30, inst=CALL_FUNCTION(arg=1, lineno=256)
DEBUG 2022-01-28 15:49:17,443 stack ['$24load_method.9', '$26load_global.10', '$in_arr28.11']
DEBUG 2022-01-28 15:49:17,443 dispatch pc=32, inst=CALL_METHOD(arg=1, lineno=256)
DEBUG 2022-01-28 15:49:17,443 stack ['$24load_method.9', '$30call_function.12']
DEBUG 2022-01-28 15:49:17,443 dispatch pc=34, inst=GET_ITER(arg=None, lineno=256)
DEBUG 2022-01-28 15:49:17,443 stack ['$32call_method.13']
DEBUG 2022-01-28 15:49:17,443 end state. edges=[Edge(pc=36, stack=('$34get_iter.14',), blockstack=(), npush=0)]
DEBUG 2022-01-28 15:49:17,443 pending: deque([State(pc_initial=36 nstack_initial=1)])
DEBUG 2022-01-28 15:49:17,443 stack: ['$phi36.0']
DEBUG 2022-01-28 15:49:17,445 dispatch pc=36, inst=FOR_ITER(arg=16, lineno=256)
DEBUG 2022-01-28 15:49:17,445 stack ['$phi36.0']
DEBUG 2022-01-28 15:49:17,445 end state. edges=[Edge(pc=54, stack=(), blockstack=(), npush=0), Edge(pc=38, stack=('$phi36.0', '$36for_iter.2'), blockstack=(), npush=0)]
DEBUG 2022-01-28 15:49:17,445 pending: deque([State(pc_initial=54 nstack_initial=0), State(pc_initial=38 nstack_initial=2)])
DEBUG 2022-01-28 15:49:17,445 stack: []
DEBUG 2022-01-28 15:49:17,445 dispatch pc=54, inst=LOAD_FAST(arg=1, lineno=258)
DEBUG 2022-01-28 15:49:17,445 stack []
DEBUG 2022-01-28 15:49:17,445 dispatch pc=56, inst=RETURN_VALUE(arg=None, lineno=258)
DEBUG 2022-01-28 15:49:17,445 stack ['$val54.0']
DEBUG 2022-01-28 15:49:17,445 end state. edges=[]
DEBUG 2022-01-28 15:49:17,445 pending: deque([State(pc_initial=38 nstack_initial=2)])
DEBUG 2022-01-28 15:49:17,445 stack: ['$phi38.0', '$phi38.1']
DEBUG 2022-01-28 15:49:17,445 dispatch pc=38, inst=STORE_FAST(arg=2, lineno=256)
DEBUG 2022-01-28 15:49:17,445 stack ['$phi38.0', '$phi38.1']
DEBUG 2022-01-28 15:49:17,445 dispatch pc=40, inst=LOAD_FAST(arg=1, lineno=257)
DEBUG 2022-01-28 15:49:17,445 stack ['$phi38.0']
DEBUG 2022-01-28 15:49:17,445 dispatch pc=42, inst=LOAD_FAST(arg=0, lineno=257)
DEBUG 2022-01-28 15:49:17,445 stack ['$phi38.0', '$val40.2']
DEBUG 2022-01-28 15:49:17,445 dispatch pc=44, inst=LOAD_FAST(arg=2, lineno=257)
DEBUG 2022-01-28 15:49:17,445 stack ['$phi38.0', '$val40.2', '$in_arr42.3']
DEBUG 2022-01-28 15:49:17,445 dispatch pc=46, inst=BINARY_SUBSCR(arg=None, lineno=257)
DEBUG 2022-01-28 15:49:17,445 stack ['$phi38.0', '$val40.2', '$in_arr42.3', '$i44.4']
DEBUG 2022-01-28 15:49:17,445 dispatch pc=48, inst=INPLACE_ADD(arg=None, lineno=257)
DEBUG 2022-01-28 15:49:17,445 stack ['$phi38.0', '$val40.2', '$46binary_subscr.5']
DEBUG 2022-01-28 15:49:17,445 dispatch pc=50, inst=STORE_FAST(arg=1, lineno=257)
DEBUG 2022-01-28 15:49:17,445 stack ['$phi38.0', '$48inplace_add.6']
DEBUG 2022-01-28 15:49:17,445 dispatch pc=52, inst=JUMP_ABSOLUTE(arg=36, lineno=257)
DEBUG 2022-01-28 15:49:17,445 stack ['$phi38.0']
DEBUG 2022-01-28 15:49:17,445 end state. edges=[Edge(pc=36, stack=('$phi38.0',), blockstack=(), npush=0)]
DEBUG 2022-01-28 15:49:17,445 pending: deque([State(pc_initial=36 nstack_initial=1)])
DEBUG 2022-01-28 15:49:17,445 -------------------------Prune PHIs-------------------------
DEBUG 2022-01-28 15:49:17,445 Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=36 nstack_initial=1): {'$phi36.0'},
             State(pc_initial=38 nstack_initial=2): {'$phi38.1'},
             State(pc_initial=54 nstack_initial=0): set()})
DEBUG 2022-01-28 15:49:17,445 defmap: {'$phi36.0': State(pc_initial=0 nstack_initial=0),
 '$phi38.1': State(pc_initial=36 nstack_initial=1)}
DEBUG 2022-01-28 15:49:17,445 phismap: defaultdict(<class 'set'>,
            {'$phi36.0': {('$34get_iter.14',
                           State(pc_initial=0 nstack_initial=0)),
                          ('$phi38.0', State(pc_initial=38 nstack_initial=2))},
             '$phi38.0': {('$phi36.0', State(pc_initial=36 nstack_initial=1))},
             '$phi38.1': {('$36for_iter.2',
                           State(pc_initial=36 nstack_initial=1))}})
DEBUG 2022-01-28 15:49:17,445 changing phismap: defaultdict(<class 'set'>,
            {'$phi36.0': {('$34get_iter.14',
                           State(pc_initial=0 nstack_initial=0)),
                          ('$phi36.0', State(pc_initial=36 nstack_initial=1))},
             '$phi38.0': {('$34get_iter.14',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi38.1': {('$36for_iter.2',
                           State(pc_initial=36 nstack_initial=1))}})
DEBUG 2022-01-28 15:49:17,445 changing phismap: defaultdict(<class 'set'>,
            {'$phi36.0': {('$34get_iter.14',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi38.0': {('$34get_iter.14',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi38.1': {('$36for_iter.2',
                           State(pc_initial=36 nstack_initial=1))}})
DEBUG 2022-01-28 15:49:17,445 changing phismap: defaultdict(<class 'set'>,
            {'$phi36.0': {('$34get_iter.14',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi38.0': {('$34get_iter.14',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi38.1': {('$36for_iter.2',
                           State(pc_initial=36 nstack_initial=1))}})
DEBUG 2022-01-28 15:49:17,445 keep phismap: {'$phi36.0': {('$34get_iter.14', State(pc_initial=0 nstack_initial=0))},
 '$phi38.1': {('$36for_iter.2', State(pc_initial=36 nstack_initial=1))}}
DEBUG 2022-01-28 15:49:17,445 new_out: defaultdict(<class 'dict'>,
            {State(pc_initial=0 nstack_initial=0): {'$phi36.0': '$34get_iter.14'},
             State(pc_initial=36 nstack_initial=1): {'$phi38.1': '$36for_iter.2'}})
DEBUG 2022-01-28 15:49:17,445 ----------------------DONE Prune PHIs-----------------------
DEBUG 2022-01-28 15:49:17,445 block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$2load_global.0'}), (4, {'item': '$2load_global.0', 'res': '$4load_attr.1'}), (6, {'item': '$4load_attr.1', 'res': '$6load_attr.2'}), (8, {'item': '$6load_attr.2', 'res': '$8load_method.3'}), (10, {'func': '$8load_method.3', 'args': [], 'res': '$10call_method.4'}), (14, {'res': '$14load_deref.5'}), (16, {'value': '$14load_deref.5'}), (18, {'res': '$18load_global.6'}), (20, {'item': '$18load_global.6', 'res': '$20load_attr.7'}), (22, {'item': '$20load_attr.7', 'res': '$22load_attr.8'}), (24, {'item': '$22load_attr.8', 'res': '$24load_method.9'}), (26, {'res': '$26load_global.10'}), (28, {'res': '$in_arr28.11'}), (30, {'func': '$26load_global.10', 'args': ['$in_arr28.11'], 'res': '$30call_function.12'}), (32, {'func': '$24load_method.9', 'args': ['$30call_function.12'], 'res': '$32call_method.13'}), (34, {'value': '$32call_method.13', 'res': '$34get_iter.14'})), outgoing_phis={'$phi36.0': '$34get_iter.14'}, blockstack=(), active_try_block=None, outgoing_edgepushed={36: ('$34get_iter.14',)})
DEBUG 2022-01-28 15:49:17,445 block_infos State(pc_initial=36 nstack_initial=1):
AdaptBlockInfo(insts=((36, {'iterator': '$phi36.0', 'pair': '$36for_iter.1', 'indval': '$36for_iter.2', 'pred': '$36for_iter.3'}),), outgoing_phis={'$phi38.1': '$36for_iter.2'}, blockstack=(), active_try_block=None, outgoing_edgepushed={54: (), 38: ('$phi36.0', '$36for_iter.2')})
DEBUG 2022-01-28 15:49:17,445 block_infos State(pc_initial=38 nstack_initial=2):
AdaptBlockInfo(insts=((38, {'value': '$phi38.1'}), (40, {'res': '$val40.2'}), (42, {'res': '$in_arr42.3'}), (44, {'res': '$i44.4'}), (46, {'index': '$i44.4', 'target': '$in_arr42.3', 'res': '$46binary_subscr.5'}), (48, {'lhs': '$val40.2', 'rhs': '$46binary_subscr.5', 'res': '$48inplace_add.6'}), (50, {'value': '$48inplace_add.6'}), (52, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={36: ('$phi38.0',)})
DEBUG 2022-01-28 15:49:17,445 block_infos State(pc_initial=54 nstack_initial=0):
AdaptBlockInfo(insts=((54, {'res': '$val54.0'}), (56, {'retval': '$val54.0', 'castval': '$56return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG 2022-01-28 15:49:17,445 label 0:
    in_arr = arg(0, name=in_arr)             ['in_arr']
    $2load_global.0 = global(numba: <module 'numba' from 'C:\\Users\\zl4821\\Anaconda3\\envs\\GBS\\lib\\site-packages\\numba\\__init__.py'>) ['$2load_global.0']
    $4load_attr.1 = getattr(value=$2load_global.0, attr=parfors) ['$2load_global.0', '$4load_attr.1']
    $6load_attr.2 = getattr(value=$4load_attr.1, attr=parfor) ['$4load_attr.1', '$6load_attr.2']
    $8load_method.3 = getattr(value=$6load_attr.2, attr=init_prange) ['$6load_attr.2', '$8load_method.3']
    $10call_method.4 = call $8load_method.3(func=$8load_method.3, args=[], kws=(), vararg=None, target=None) ['$10call_method.4', '$8load_method.3']
    val = freevar(zero: 0)                   ['val']
    $18load_global.6 = global(numba: <module 'numba' from 'C:\\Users\\zl4821\\Anaconda3\\envs\\GBS\\lib\\site-packages\\numba\\__init__.py'>) ['$18load_global.6']
    $20load_attr.7 = getattr(value=$18load_global.6, attr=parfors) ['$18load_global.6', '$20load_attr.7']
    $22load_attr.8 = getattr(value=$20load_attr.7, attr=parfor) ['$20load_attr.7', '$22load_attr.8']
    $24load_method.9 = getattr(value=$22load_attr.8, attr=internal_prange) ['$22load_attr.8', '$24load_method.9']
    $26load_global.10 = global(len: <built-in function len>) ['$26load_global.10']
    $30call_function.12 = call $26load_global.10(in_arr, func=$26load_global.10, args=[Var(in_arr, parfor.py:254)], kws=(), vararg=None, target=None) ['$26load_global.10', '$30call_function.12', 'in_arr']
    $32call_method.13 = call $24load_method.9($30call_function.12, func=$24load_method.9, args=[Var($30call_function.12, parfor.py:256)], kws=(), vararg=None, target=None) ['$24load_method.9', '$30call_function.12', '$32call_method.13']
    $34get_iter.14 = getiter(value=$32call_method.13) ['$32call_method.13', '$34get_iter.14']
    $phi36.0 = $34get_iter.14                ['$34get_iter.14', '$phi36.0']
    jump 36                                  []
label 36:
    $36for_iter.1 = iternext(value=$phi36.0) ['$36for_iter.1', '$phi36.0']
    $36for_iter.2 = pair_first(value=$36for_iter.1) ['$36for_iter.1', '$36for_iter.2']
    $36for_iter.3 = pair_second(value=$36for_iter.1) ['$36for_iter.1', '$36for_iter.3']
    $phi38.1 = $36for_iter.2                 ['$36for_iter.2', '$phi38.1']
    branch $36for_iter.3, 38, 54             ['$36for_iter.3']
label 38:
    i = $phi38.1                             ['$phi38.1', 'i']
    $46binary_subscr.5 = getitem(value=in_arr, index=i, fn=<built-in function getitem>) ['$46binary_subscr.5', 'i', 'in_arr']
    $48inplace_add.6 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=val, rhs=$46binary_subscr.5, static_lhs=Undefined, static_rhs=Undefined) ['$46binary_subscr.5', '$48inplace_add.6', 'val']
    val = $48inplace_add.6                   ['$48inplace_add.6', 'val']
    jump 36                                  []
label 54:
    $56return_value.1 = cast(value=val)      ['$56return_value.1', 'val']
    return $56return_value.1                 ['$56return_value.1']

DEBUG 2022-01-28 15:49:17,456 bytecode dump:
>          0	NOP(arg=None, lineno=116)
           2	LOAD_CONST(arg=0, lineno=116)
           4	RETURN_VALUE(arg=None, lineno=116)
DEBUG 2022-01-28 15:49:17,456 pending: deque([State(pc_initial=0 nstack_initial=0)])
DEBUG 2022-01-28 15:49:17,456 stack: []
DEBUG 2022-01-28 15:49:17,456 dispatch pc=0, inst=NOP(arg=None, lineno=116)
DEBUG 2022-01-28 15:49:17,456 stack []
DEBUG 2022-01-28 15:49:17,456 dispatch pc=2, inst=LOAD_CONST(arg=0, lineno=116)
DEBUG 2022-01-28 15:49:17,456 stack []
DEBUG 2022-01-28 15:49:17,456 dispatch pc=4, inst=RETURN_VALUE(arg=None, lineno=116)
DEBUG 2022-01-28 15:49:17,456 stack ['$const2.0']
DEBUG 2022-01-28 15:49:17,456 end state. edges=[]
DEBUG 2022-01-28 15:49:17,456 -------------------------Prune PHIs-------------------------
DEBUG 2022-01-28 15:49:17,456 Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
DEBUG 2022-01-28 15:49:17,456 defmap: {}
DEBUG 2022-01-28 15:49:17,456 phismap: defaultdict(<class 'set'>, {})
DEBUG 2022-01-28 15:49:17,456 changing phismap: defaultdict(<class 'set'>, {})
DEBUG 2022-01-28 15:49:17,456 keep phismap: {}
DEBUG 2022-01-28 15:49:17,456 new_out: defaultdict(<class 'dict'>, {})
DEBUG 2022-01-28 15:49:17,456 ----------------------DONE Prune PHIs-----------------------
DEBUG 2022-01-28 15:49:17,456 block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$const2.0'}), (4, {'retval': '$const2.0', 'castval': '$4return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG 2022-01-28 15:49:17,456 label 0:
    $const2.0 = const(NoneType, None)        ['$const2.0']
    $4return_value.1 = cast(value=$const2.0) ['$4return_value.1', '$const2.0']
    return $4return_value.1                  ['$4return_value.1']

DEBUG 2022-01-28 15:49:17,456 ==== SSA block analysis pass on 0
DEBUG 2022-01-28 15:49:17,456 Running <numba.core.ssa._GatherDefsHandler object at 0x000002410B17A760>
DEBUG 2022-01-28 15:49:17,456 on stmt: $const2.0 = const(NoneType, None)
DEBUG 2022-01-28 15:49:17,456 on stmt: $4return_value.1 = cast(value=$const2.0)
DEBUG 2022-01-28 15:49:17,456 on stmt: return $4return_value.1
DEBUG 2022-01-28 15:49:17,456 defs defaultdict(<class 'list'>,
            {'$4return_value.1': [<numba.core.ir.Assign object at 0x000002410B17AD60>],
             '$const2.0': [<numba.core.ir.Assign object at 0x000002410B17A370>]})
DEBUG 2022-01-28 15:49:17,456 SSA violators set()
DEBUG 2022-01-28 15:49:17,476 bytecode dump:
>          0	NOP(arg=None, lineno=254)
           2	LOAD_GLOBAL(arg=0, lineno=254)
           4	LOAD_ATTR(arg=1, lineno=254)
           6	LOAD_ATTR(arg=2, lineno=254)
           8	LOAD_METHOD(arg=3, lineno=254)
          10	CALL_METHOD(arg=0, lineno=254)
          12	POP_TOP(arg=None, lineno=254)
          14	LOAD_DEREF(arg=0, lineno=255)
          16	STORE_FAST(arg=1, lineno=255)
          18	LOAD_GLOBAL(arg=0, lineno=256)
          20	LOAD_ATTR(arg=1, lineno=256)
          22	LOAD_ATTR(arg=2, lineno=256)
          24	LOAD_METHOD(arg=4, lineno=256)
          26	LOAD_GLOBAL(arg=5, lineno=256)
          28	LOAD_FAST(arg=0, lineno=256)
          30	CALL_FUNCTION(arg=1, lineno=256)
          32	CALL_METHOD(arg=1, lineno=256)
          34	GET_ITER(arg=None, lineno=256)
>         36	FOR_ITER(arg=16, lineno=256)
          38	STORE_FAST(arg=2, lineno=256)
          40	LOAD_FAST(arg=1, lineno=257)
          42	LOAD_FAST(arg=0, lineno=257)
          44	LOAD_FAST(arg=2, lineno=257)
          46	BINARY_SUBSCR(arg=None, lineno=257)
          48	INPLACE_ADD(arg=None, lineno=257)
          50	STORE_FAST(arg=1, lineno=257)
          52	JUMP_ABSOLUTE(arg=36, lineno=257)
>         54	LOAD_FAST(arg=1, lineno=258)
          56	RETURN_VALUE(arg=None, lineno=258)
DEBUG 2022-01-28 15:49:17,476 pending: deque([State(pc_initial=0 nstack_initial=0)])
DEBUG 2022-01-28 15:49:17,476 stack: []
DEBUG 2022-01-28 15:49:17,476 dispatch pc=0, inst=NOP(arg=None, lineno=254)
DEBUG 2022-01-28 15:49:17,476 stack []
DEBUG 2022-01-28 15:49:17,476 dispatch pc=2, inst=LOAD_GLOBAL(arg=0, lineno=254)
DEBUG 2022-01-28 15:49:17,476 stack []
DEBUG 2022-01-28 15:49:17,476 dispatch pc=4, inst=LOAD_ATTR(arg=1, lineno=254)
DEBUG 2022-01-28 15:49:17,476 stack ['$2load_global.0']
DEBUG 2022-01-28 15:49:17,476 dispatch pc=6, inst=LOAD_ATTR(arg=2, lineno=254)
DEBUG 2022-01-28 15:49:17,476 stack ['$4load_attr.1']
DEBUG 2022-01-28 15:49:17,476 dispatch pc=8, inst=LOAD_METHOD(arg=3, lineno=254)
DEBUG 2022-01-28 15:49:17,476 stack ['$6load_attr.2']
DEBUG 2022-01-28 15:49:17,476 dispatch pc=10, inst=CALL_METHOD(arg=0, lineno=254)
DEBUG 2022-01-28 15:49:17,476 stack ['$8load_method.3']
DEBUG 2022-01-28 15:49:17,476 dispatch pc=12, inst=POP_TOP(arg=None, lineno=254)
DEBUG 2022-01-28 15:49:17,476 stack ['$10call_method.4']
DEBUG 2022-01-28 15:49:17,476 dispatch pc=14, inst=LOAD_DEREF(arg=0, lineno=255)
DEBUG 2022-01-28 15:49:17,476 stack []
DEBUG 2022-01-28 15:49:17,476 dispatch pc=16, inst=STORE_FAST(arg=1, lineno=255)
DEBUG 2022-01-28 15:49:17,476 stack ['$14load_deref.5']
DEBUG 2022-01-28 15:49:17,476 dispatch pc=18, inst=LOAD_GLOBAL(arg=0, lineno=256)
DEBUG 2022-01-28 15:49:17,476 stack []
DEBUG 2022-01-28 15:49:17,476 dispatch pc=20, inst=LOAD_ATTR(arg=1, lineno=256)
DEBUG 2022-01-28 15:49:17,476 stack ['$18load_global.6']
DEBUG 2022-01-28 15:49:17,476 dispatch pc=22, inst=LOAD_ATTR(arg=2, lineno=256)
DEBUG 2022-01-28 15:49:17,476 stack ['$20load_attr.7']
DEBUG 2022-01-28 15:49:17,476 dispatch pc=24, inst=LOAD_METHOD(arg=4, lineno=256)
DEBUG 2022-01-28 15:49:17,476 stack ['$22load_attr.8']
DEBUG 2022-01-28 15:49:17,476 dispatch pc=26, inst=LOAD_GLOBAL(arg=5, lineno=256)
DEBUG 2022-01-28 15:49:17,476 stack ['$24load_method.9']
DEBUG 2022-01-28 15:49:17,476 dispatch pc=28, inst=LOAD_FAST(arg=0, lineno=256)
DEBUG 2022-01-28 15:49:17,476 stack ['$24load_method.9', '$26load_global.10']
DEBUG 2022-01-28 15:49:17,476 dispatch pc=30, inst=CALL_FUNCTION(arg=1, lineno=256)
DEBUG 2022-01-28 15:49:17,476 stack ['$24load_method.9', '$26load_global.10', '$in_arr28.11']
DEBUG 2022-01-28 15:49:17,476 dispatch pc=32, inst=CALL_METHOD(arg=1, lineno=256)
DEBUG 2022-01-28 15:49:17,476 stack ['$24load_method.9', '$30call_function.12']
DEBUG 2022-01-28 15:49:17,476 dispatch pc=34, inst=GET_ITER(arg=None, lineno=256)
DEBUG 2022-01-28 15:49:17,476 stack ['$32call_method.13']
DEBUG 2022-01-28 15:49:17,476 end state. edges=[Edge(pc=36, stack=('$34get_iter.14',), blockstack=(), npush=0)]
DEBUG 2022-01-28 15:49:17,476 pending: deque([State(pc_initial=36 nstack_initial=1)])
DEBUG 2022-01-28 15:49:17,476 stack: ['$phi36.0']
DEBUG 2022-01-28 15:49:17,476 dispatch pc=36, inst=FOR_ITER(arg=16, lineno=256)
DEBUG 2022-01-28 15:49:17,476 stack ['$phi36.0']
DEBUG 2022-01-28 15:49:17,476 end state. edges=[Edge(pc=54, stack=(), blockstack=(), npush=0), Edge(pc=38, stack=('$phi36.0', '$36for_iter.2'), blockstack=(), npush=0)]
DEBUG 2022-01-28 15:49:17,476 pending: deque([State(pc_initial=54 nstack_initial=0), State(pc_initial=38 nstack_initial=2)])
DEBUG 2022-01-28 15:49:17,476 stack: []
DEBUG 2022-01-28 15:49:17,476 dispatch pc=54, inst=LOAD_FAST(arg=1, lineno=258)
DEBUG 2022-01-28 15:49:17,476 stack []
DEBUG 2022-01-28 15:49:17,476 dispatch pc=56, inst=RETURN_VALUE(arg=None, lineno=258)
DEBUG 2022-01-28 15:49:17,476 stack ['$val54.0']
DEBUG 2022-01-28 15:49:17,476 end state. edges=[]
DEBUG 2022-01-28 15:49:17,476 pending: deque([State(pc_initial=38 nstack_initial=2)])
DEBUG 2022-01-28 15:49:17,476 stack: ['$phi38.0', '$phi38.1']
DEBUG 2022-01-28 15:49:17,476 dispatch pc=38, inst=STORE_FAST(arg=2, lineno=256)
DEBUG 2022-01-28 15:49:17,476 stack ['$phi38.0', '$phi38.1']
DEBUG 2022-01-28 15:49:17,476 dispatch pc=40, inst=LOAD_FAST(arg=1, lineno=257)
DEBUG 2022-01-28 15:49:17,476 stack ['$phi38.0']
DEBUG 2022-01-28 15:49:17,476 dispatch pc=42, inst=LOAD_FAST(arg=0, lineno=257)
DEBUG 2022-01-28 15:49:17,476 stack ['$phi38.0', '$val40.2']
DEBUG 2022-01-28 15:49:17,476 dispatch pc=44, inst=LOAD_FAST(arg=2, lineno=257)
DEBUG 2022-01-28 15:49:17,476 stack ['$phi38.0', '$val40.2', '$in_arr42.3']
DEBUG 2022-01-28 15:49:17,476 dispatch pc=46, inst=BINARY_SUBSCR(arg=None, lineno=257)
DEBUG 2022-01-28 15:49:17,476 stack ['$phi38.0', '$val40.2', '$in_arr42.3', '$i44.4']
DEBUG 2022-01-28 15:49:17,476 dispatch pc=48, inst=INPLACE_ADD(arg=None, lineno=257)
DEBUG 2022-01-28 15:49:17,476 stack ['$phi38.0', '$val40.2', '$46binary_subscr.5']
DEBUG 2022-01-28 15:49:17,484 dispatch pc=50, inst=STORE_FAST(arg=1, lineno=257)
DEBUG 2022-01-28 15:49:17,484 stack ['$phi38.0', '$48inplace_add.6']
DEBUG 2022-01-28 15:49:17,484 dispatch pc=52, inst=JUMP_ABSOLUTE(arg=36, lineno=257)
DEBUG 2022-01-28 15:49:17,484 stack ['$phi38.0']
DEBUG 2022-01-28 15:49:17,484 end state. edges=[Edge(pc=36, stack=('$phi38.0',), blockstack=(), npush=0)]
DEBUG 2022-01-28 15:49:17,484 pending: deque([State(pc_initial=36 nstack_initial=1)])
DEBUG 2022-01-28 15:49:17,484 -------------------------Prune PHIs-------------------------
DEBUG 2022-01-28 15:49:17,484 Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=36 nstack_initial=1): {'$phi36.0'},
             State(pc_initial=38 nstack_initial=2): {'$phi38.1'},
             State(pc_initial=54 nstack_initial=0): set()})
DEBUG 2022-01-28 15:49:17,484 defmap: {'$phi36.0': State(pc_initial=0 nstack_initial=0),
 '$phi38.1': State(pc_initial=36 nstack_initial=1)}
DEBUG 2022-01-28 15:49:17,484 phismap: defaultdict(<class 'set'>,
            {'$phi36.0': {('$34get_iter.14',
                           State(pc_initial=0 nstack_initial=0)),
                          ('$phi38.0', State(pc_initial=38 nstack_initial=2))},
             '$phi38.0': {('$phi36.0', State(pc_initial=36 nstack_initial=1))},
             '$phi38.1': {('$36for_iter.2',
                           State(pc_initial=36 nstack_initial=1))}})
DEBUG 2022-01-28 15:49:17,484 changing phismap: defaultdict(<class 'set'>,
            {'$phi36.0': {('$34get_iter.14',
                           State(pc_initial=0 nstack_initial=0)),
                          ('$phi36.0', State(pc_initial=36 nstack_initial=1))},
             '$phi38.0': {('$34get_iter.14',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi38.1': {('$36for_iter.2',
                           State(pc_initial=36 nstack_initial=1))}})
DEBUG 2022-01-28 15:49:17,484 changing phismap: defaultdict(<class 'set'>,
            {'$phi36.0': {('$34get_iter.14',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi38.0': {('$34get_iter.14',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi38.1': {('$36for_iter.2',
                           State(pc_initial=36 nstack_initial=1))}})
DEBUG 2022-01-28 15:49:17,486 changing phismap: defaultdict(<class 'set'>,
            {'$phi36.0': {('$34get_iter.14',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi38.0': {('$34get_iter.14',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi38.1': {('$36for_iter.2',
                           State(pc_initial=36 nstack_initial=1))}})
DEBUG 2022-01-28 15:49:17,486 keep phismap: {'$phi36.0': {('$34get_iter.14', State(pc_initial=0 nstack_initial=0))},
 '$phi38.1': {('$36for_iter.2', State(pc_initial=36 nstack_initial=1))}}
DEBUG 2022-01-28 15:49:17,486 new_out: defaultdict(<class 'dict'>,
            {State(pc_initial=0 nstack_initial=0): {'$phi36.0': '$34get_iter.14'},
             State(pc_initial=36 nstack_initial=1): {'$phi38.1': '$36for_iter.2'}})
DEBUG 2022-01-28 15:49:17,486 ----------------------DONE Prune PHIs-----------------------
DEBUG 2022-01-28 15:49:17,486 block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$2load_global.0'}), (4, {'item': '$2load_global.0', 'res': '$4load_attr.1'}), (6, {'item': '$4load_attr.1', 'res': '$6load_attr.2'}), (8, {'item': '$6load_attr.2', 'res': '$8load_method.3'}), (10, {'func': '$8load_method.3', 'args': [], 'res': '$10call_method.4'}), (14, {'res': '$14load_deref.5'}), (16, {'value': '$14load_deref.5'}), (18, {'res': '$18load_global.6'}), (20, {'item': '$18load_global.6', 'res': '$20load_attr.7'}), (22, {'item': '$20load_attr.7', 'res': '$22load_attr.8'}), (24, {'item': '$22load_attr.8', 'res': '$24load_method.9'}), (26, {'res': '$26load_global.10'}), (28, {'res': '$in_arr28.11'}), (30, {'func': '$26load_global.10', 'args': ['$in_arr28.11'], 'res': '$30call_function.12'}), (32, {'func': '$24load_method.9', 'args': ['$30call_function.12'], 'res': '$32call_method.13'}), (34, {'value': '$32call_method.13', 'res': '$34get_iter.14'})), outgoing_phis={'$phi36.0': '$34get_iter.14'}, blockstack=(), active_try_block=None, outgoing_edgepushed={36: ('$34get_iter.14',)})
DEBUG 2022-01-28 15:49:17,486 block_infos State(pc_initial=36 nstack_initial=1):
AdaptBlockInfo(insts=((36, {'iterator': '$phi36.0', 'pair': '$36for_iter.1', 'indval': '$36for_iter.2', 'pred': '$36for_iter.3'}),), outgoing_phis={'$phi38.1': '$36for_iter.2'}, blockstack=(), active_try_block=None, outgoing_edgepushed={54: (), 38: ('$phi36.0', '$36for_iter.2')})
DEBUG 2022-01-28 15:49:17,486 block_infos State(pc_initial=38 nstack_initial=2):
AdaptBlockInfo(insts=((38, {'value': '$phi38.1'}), (40, {'res': '$val40.2'}), (42, {'res': '$in_arr42.3'}), (44, {'res': '$i44.4'}), (46, {'index': '$i44.4', 'target': '$in_arr42.3', 'res': '$46binary_subscr.5'}), (48, {'lhs': '$val40.2', 'rhs': '$46binary_subscr.5', 'res': '$48inplace_add.6'}), (50, {'value': '$48inplace_add.6'}), (52, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={36: ('$phi38.0',)})
DEBUG 2022-01-28 15:49:17,486 block_infos State(pc_initial=54 nstack_initial=0):
AdaptBlockInfo(insts=((54, {'res': '$val54.0'}), (56, {'retval': '$val54.0', 'castval': '$56return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG 2022-01-28 15:49:17,486 label 0:
    in_arr = arg(0, name=in_arr)             ['in_arr']
    $2load_global.0 = global(numba: <module 'numba' from 'C:\\Users\\zl4821\\Anaconda3\\envs\\GBS\\lib\\site-packages\\numba\\__init__.py'>) ['$2load_global.0']
    $4load_attr.1 = getattr(value=$2load_global.0, attr=parfors) ['$2load_global.0', '$4load_attr.1']
    $6load_attr.2 = getattr(value=$4load_attr.1, attr=parfor) ['$4load_attr.1', '$6load_attr.2']
    $8load_method.3 = getattr(value=$6load_attr.2, attr=init_prange) ['$6load_attr.2', '$8load_method.3']
    $10call_method.4 = call $8load_method.3(func=$8load_method.3, args=[], kws=(), vararg=None, target=None) ['$10call_method.4', '$8load_method.3']
    val = freevar(zero: 0)                   ['val']
    $18load_global.6 = global(numba: <module 'numba' from 'C:\\Users\\zl4821\\Anaconda3\\envs\\GBS\\lib\\site-packages\\numba\\__init__.py'>) ['$18load_global.6']
    $20load_attr.7 = getattr(value=$18load_global.6, attr=parfors) ['$18load_global.6', '$20load_attr.7']
    $22load_attr.8 = getattr(value=$20load_attr.7, attr=parfor) ['$20load_attr.7', '$22load_attr.8']
    $24load_method.9 = getattr(value=$22load_attr.8, attr=internal_prange) ['$22load_attr.8', '$24load_method.9']
    $26load_global.10 = global(len: <built-in function len>) ['$26load_global.10']
    $30call_function.12 = call $26load_global.10(in_arr, func=$26load_global.10, args=[Var(in_arr, parfor.py:254)], kws=(), vararg=None, target=None) ['$26load_global.10', '$30call_function.12', 'in_arr']
    $32call_method.13 = call $24load_method.9($30call_function.12, func=$24load_method.9, args=[Var($30call_function.12, parfor.py:256)], kws=(), vararg=None, target=None) ['$24load_method.9', '$30call_function.12', '$32call_method.13']
    $34get_iter.14 = getiter(value=$32call_method.13) ['$32call_method.13', '$34get_iter.14']
    $phi36.0 = $34get_iter.14                ['$34get_iter.14', '$phi36.0']
    jump 36                                  []
label 36:
    $36for_iter.1 = iternext(value=$phi36.0) ['$36for_iter.1', '$phi36.0']
    $36for_iter.2 = pair_first(value=$36for_iter.1) ['$36for_iter.1', '$36for_iter.2']
    $36for_iter.3 = pair_second(value=$36for_iter.1) ['$36for_iter.1', '$36for_iter.3']
    $phi38.1 = $36for_iter.2                 ['$36for_iter.2', '$phi38.1']
    branch $36for_iter.3, 38, 54             ['$36for_iter.3']
label 38:
    i = $phi38.1                             ['$phi38.1', 'i']
    $46binary_subscr.5 = getitem(value=in_arr, index=i, fn=<built-in function getitem>) ['$46binary_subscr.5', 'i', 'in_arr']
    $48inplace_add.6 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=val, rhs=$46binary_subscr.5, static_lhs=Undefined, static_rhs=Undefined) ['$46binary_subscr.5', '$48inplace_add.6', 'val']
    val = $48inplace_add.6                   ['$48inplace_add.6', 'val']
    jump 36                                  []
label 54:
    $56return_value.1 = cast(value=val)      ['$56return_value.1', 'val']
    return $56return_value.1                 ['$56return_value.1']

DEBUG 2022-01-28 15:49:17,494 bytecode dump:
>          0	NOP(arg=None, lineno=276)
           2	LOAD_GLOBAL(arg=0, lineno=276)
           4	LOAD_ATTR(arg=1, lineno=276)
           6	LOAD_ATTR(arg=2, lineno=276)
           8	LOAD_METHOD(arg=3, lineno=276)
          10	CALL_METHOD(arg=0, lineno=276)
          12	POP_TOP(arg=None, lineno=276)
          14	LOAD_DEREF(arg=0, lineno=277)
          16	STORE_FAST(arg=1, lineno=277)
          18	LOAD_GLOBAL(arg=0, lineno=278)
          20	LOAD_ATTR(arg=1, lineno=278)
          22	LOAD_ATTR(arg=2, lineno=278)
          24	LOAD_METHOD(arg=4, lineno=278)
          26	LOAD_GLOBAL(arg=5, lineno=278)
          28	LOAD_FAST(arg=0, lineno=278)
          30	CALL_FUNCTION(arg=1, lineno=278)
          32	CALL_METHOD(arg=1, lineno=278)
          34	GET_ITER(arg=None, lineno=278)
>         36	FOR_ITER(arg=16, lineno=278)
          38	STORE_FAST(arg=2, lineno=278)
          40	LOAD_FAST(arg=1, lineno=279)
          42	LOAD_FAST(arg=0, lineno=279)
          44	LOAD_FAST(arg=2, lineno=279)
          46	BINARY_SUBSCR(arg=None, lineno=279)
          48	INPLACE_MULTIPLY(arg=None, lineno=279)
          50	STORE_FAST(arg=1, lineno=279)
          52	JUMP_ABSOLUTE(arg=36, lineno=279)
>         54	LOAD_FAST(arg=1, lineno=280)
          56	RETURN_VALUE(arg=None, lineno=280)
DEBUG 2022-01-28 15:49:17,494 pending: deque([State(pc_initial=0 nstack_initial=0)])
DEBUG 2022-01-28 15:49:17,494 stack: []
DEBUG 2022-01-28 15:49:17,494 dispatch pc=0, inst=NOP(arg=None, lineno=276)
DEBUG 2022-01-28 15:49:17,494 stack []
DEBUG 2022-01-28 15:49:17,494 dispatch pc=2, inst=LOAD_GLOBAL(arg=0, lineno=276)
DEBUG 2022-01-28 15:49:17,494 stack []
DEBUG 2022-01-28 15:49:17,494 dispatch pc=4, inst=LOAD_ATTR(arg=1, lineno=276)
DEBUG 2022-01-28 15:49:17,494 stack ['$2load_global.0']
DEBUG 2022-01-28 15:49:17,494 dispatch pc=6, inst=LOAD_ATTR(arg=2, lineno=276)
DEBUG 2022-01-28 15:49:17,494 stack ['$4load_attr.1']
DEBUG 2022-01-28 15:49:17,496 dispatch pc=8, inst=LOAD_METHOD(arg=3, lineno=276)
DEBUG 2022-01-28 15:49:17,496 stack ['$6load_attr.2']
DEBUG 2022-01-28 15:49:17,496 dispatch pc=10, inst=CALL_METHOD(arg=0, lineno=276)
DEBUG 2022-01-28 15:49:17,496 stack ['$8load_method.3']
DEBUG 2022-01-28 15:49:17,496 dispatch pc=12, inst=POP_TOP(arg=None, lineno=276)
DEBUG 2022-01-28 15:49:17,496 stack ['$10call_method.4']
DEBUG 2022-01-28 15:49:17,496 dispatch pc=14, inst=LOAD_DEREF(arg=0, lineno=277)
DEBUG 2022-01-28 15:49:17,496 stack []
DEBUG 2022-01-28 15:49:17,496 dispatch pc=16, inst=STORE_FAST(arg=1, lineno=277)
DEBUG 2022-01-28 15:49:17,496 stack ['$14load_deref.5']
DEBUG 2022-01-28 15:49:17,496 dispatch pc=18, inst=LOAD_GLOBAL(arg=0, lineno=278)
DEBUG 2022-01-28 15:49:17,496 stack []
DEBUG 2022-01-28 15:49:17,496 dispatch pc=20, inst=LOAD_ATTR(arg=1, lineno=278)
DEBUG 2022-01-28 15:49:17,496 stack ['$18load_global.6']
DEBUG 2022-01-28 15:49:17,496 dispatch pc=22, inst=LOAD_ATTR(arg=2, lineno=278)
DEBUG 2022-01-28 15:49:17,496 stack ['$20load_attr.7']
DEBUG 2022-01-28 15:49:17,496 dispatch pc=24, inst=LOAD_METHOD(arg=4, lineno=278)
DEBUG 2022-01-28 15:49:17,496 stack ['$22load_attr.8']
DEBUG 2022-01-28 15:49:17,496 dispatch pc=26, inst=LOAD_GLOBAL(arg=5, lineno=278)
DEBUG 2022-01-28 15:49:17,496 stack ['$24load_method.9']
DEBUG 2022-01-28 15:49:17,496 dispatch pc=28, inst=LOAD_FAST(arg=0, lineno=278)
DEBUG 2022-01-28 15:49:17,496 stack ['$24load_method.9', '$26load_global.10']
DEBUG 2022-01-28 15:49:17,496 dispatch pc=30, inst=CALL_FUNCTION(arg=1, lineno=278)
DEBUG 2022-01-28 15:49:17,496 stack ['$24load_method.9', '$26load_global.10', '$in_arr28.11']
DEBUG 2022-01-28 15:49:17,496 dispatch pc=32, inst=CALL_METHOD(arg=1, lineno=278)
DEBUG 2022-01-28 15:49:17,496 stack ['$24load_method.9', '$30call_function.12']
DEBUG 2022-01-28 15:49:17,496 dispatch pc=34, inst=GET_ITER(arg=None, lineno=278)
DEBUG 2022-01-28 15:49:17,496 stack ['$32call_method.13']
DEBUG 2022-01-28 15:49:17,496 end state. edges=[Edge(pc=36, stack=('$34get_iter.14',), blockstack=(), npush=0)]
DEBUG 2022-01-28 15:49:17,496 pending: deque([State(pc_initial=36 nstack_initial=1)])
DEBUG 2022-01-28 15:49:17,496 stack: ['$phi36.0']
DEBUG 2022-01-28 15:49:17,496 dispatch pc=36, inst=FOR_ITER(arg=16, lineno=278)
DEBUG 2022-01-28 15:49:17,496 stack ['$phi36.0']
DEBUG 2022-01-28 15:49:17,496 end state. edges=[Edge(pc=54, stack=(), blockstack=(), npush=0), Edge(pc=38, stack=('$phi36.0', '$36for_iter.2'), blockstack=(), npush=0)]
DEBUG 2022-01-28 15:49:17,496 pending: deque([State(pc_initial=54 nstack_initial=0), State(pc_initial=38 nstack_initial=2)])
DEBUG 2022-01-28 15:49:17,496 stack: []
DEBUG 2022-01-28 15:49:17,496 dispatch pc=54, inst=LOAD_FAST(arg=1, lineno=280)
DEBUG 2022-01-28 15:49:17,496 stack []
DEBUG 2022-01-28 15:49:17,496 dispatch pc=56, inst=RETURN_VALUE(arg=None, lineno=280)
DEBUG 2022-01-28 15:49:17,496 stack ['$val54.0']
DEBUG 2022-01-28 15:49:17,496 end state. edges=[]
DEBUG 2022-01-28 15:49:17,496 pending: deque([State(pc_initial=38 nstack_initial=2)])
DEBUG 2022-01-28 15:49:17,496 stack: ['$phi38.0', '$phi38.1']
DEBUG 2022-01-28 15:49:17,496 dispatch pc=38, inst=STORE_FAST(arg=2, lineno=278)
DEBUG 2022-01-28 15:49:17,496 stack ['$phi38.0', '$phi38.1']
DEBUG 2022-01-28 15:49:17,496 dispatch pc=40, inst=LOAD_FAST(arg=1, lineno=279)
DEBUG 2022-01-28 15:49:17,496 stack ['$phi38.0']
DEBUG 2022-01-28 15:49:17,496 dispatch pc=42, inst=LOAD_FAST(arg=0, lineno=279)
DEBUG 2022-01-28 15:49:17,496 stack ['$phi38.0', '$val40.2']
DEBUG 2022-01-28 15:49:17,496 dispatch pc=44, inst=LOAD_FAST(arg=2, lineno=279)
DEBUG 2022-01-28 15:49:17,496 stack ['$phi38.0', '$val40.2', '$in_arr42.3']
DEBUG 2022-01-28 15:49:17,496 dispatch pc=46, inst=BINARY_SUBSCR(arg=None, lineno=279)
DEBUG 2022-01-28 15:49:17,496 stack ['$phi38.0', '$val40.2', '$in_arr42.3', '$i44.4']
DEBUG 2022-01-28 15:49:17,496 dispatch pc=48, inst=INPLACE_MULTIPLY(arg=None, lineno=279)
DEBUG 2022-01-28 15:49:17,496 stack ['$phi38.0', '$val40.2', '$46binary_subscr.5']
DEBUG 2022-01-28 15:49:17,496 dispatch pc=50, inst=STORE_FAST(arg=1, lineno=279)
DEBUG 2022-01-28 15:49:17,496 stack ['$phi38.0', '$48inplace_multiply.6']
DEBUG 2022-01-28 15:49:17,496 dispatch pc=52, inst=JUMP_ABSOLUTE(arg=36, lineno=279)
DEBUG 2022-01-28 15:49:17,496 stack ['$phi38.0']
DEBUG 2022-01-28 15:49:17,496 end state. edges=[Edge(pc=36, stack=('$phi38.0',), blockstack=(), npush=0)]
DEBUG 2022-01-28 15:49:17,496 pending: deque([State(pc_initial=36 nstack_initial=1)])
DEBUG 2022-01-28 15:49:17,496 -------------------------Prune PHIs-------------------------
DEBUG 2022-01-28 15:49:17,496 Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=36 nstack_initial=1): {'$phi36.0'},
             State(pc_initial=38 nstack_initial=2): {'$phi38.1'},
             State(pc_initial=54 nstack_initial=0): set()})
DEBUG 2022-01-28 15:49:17,496 defmap: {'$phi36.0': State(pc_initial=0 nstack_initial=0),
 '$phi38.1': State(pc_initial=36 nstack_initial=1)}
DEBUG 2022-01-28 15:49:17,496 phismap: defaultdict(<class 'set'>,
            {'$phi36.0': {('$34get_iter.14',
                           State(pc_initial=0 nstack_initial=0)),
                          ('$phi38.0', State(pc_initial=38 nstack_initial=2))},
             '$phi38.0': {('$phi36.0', State(pc_initial=36 nstack_initial=1))},
             '$phi38.1': {('$36for_iter.2',
                           State(pc_initial=36 nstack_initial=1))}})
DEBUG 2022-01-28 15:49:17,496 changing phismap: defaultdict(<class 'set'>,
            {'$phi36.0': {('$34get_iter.14',
                           State(pc_initial=0 nstack_initial=0)),
                          ('$phi36.0', State(pc_initial=36 nstack_initial=1))},
             '$phi38.0': {('$34get_iter.14',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi38.1': {('$36for_iter.2',
                           State(pc_initial=36 nstack_initial=1))}})
DEBUG 2022-01-28 15:49:17,496 changing phismap: defaultdict(<class 'set'>,
            {'$phi36.0': {('$34get_iter.14',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi38.0': {('$34get_iter.14',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi38.1': {('$36for_iter.2',
                           State(pc_initial=36 nstack_initial=1))}})
DEBUG 2022-01-28 15:49:17,496 changing phismap: defaultdict(<class 'set'>,
            {'$phi36.0': {('$34get_iter.14',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi38.0': {('$34get_iter.14',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi38.1': {('$36for_iter.2',
                           State(pc_initial=36 nstack_initial=1))}})
DEBUG 2022-01-28 15:49:17,496 keep phismap: {'$phi36.0': {('$34get_iter.14', State(pc_initial=0 nstack_initial=0))},
 '$phi38.1': {('$36for_iter.2', State(pc_initial=36 nstack_initial=1))}}
DEBUG 2022-01-28 15:49:17,496 new_out: defaultdict(<class 'dict'>,
            {State(pc_initial=0 nstack_initial=0): {'$phi36.0': '$34get_iter.14'},
             State(pc_initial=36 nstack_initial=1): {'$phi38.1': '$36for_iter.2'}})
DEBUG 2022-01-28 15:49:17,496 ----------------------DONE Prune PHIs-----------------------
DEBUG 2022-01-28 15:49:17,496 block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$2load_global.0'}), (4, {'item': '$2load_global.0', 'res': '$4load_attr.1'}), (6, {'item': '$4load_attr.1', 'res': '$6load_attr.2'}), (8, {'item': '$6load_attr.2', 'res': '$8load_method.3'}), (10, {'func': '$8load_method.3', 'args': [], 'res': '$10call_method.4'}), (14, {'res': '$14load_deref.5'}), (16, {'value': '$14load_deref.5'}), (18, {'res': '$18load_global.6'}), (20, {'item': '$18load_global.6', 'res': '$20load_attr.7'}), (22, {'item': '$20load_attr.7', 'res': '$22load_attr.8'}), (24, {'item': '$22load_attr.8', 'res': '$24load_method.9'}), (26, {'res': '$26load_global.10'}), (28, {'res': '$in_arr28.11'}), (30, {'func': '$26load_global.10', 'args': ['$in_arr28.11'], 'res': '$30call_function.12'}), (32, {'func': '$24load_method.9', 'args': ['$30call_function.12'], 'res': '$32call_method.13'}), (34, {'value': '$32call_method.13', 'res': '$34get_iter.14'})), outgoing_phis={'$phi36.0': '$34get_iter.14'}, blockstack=(), active_try_block=None, outgoing_edgepushed={36: ('$34get_iter.14',)})
DEBUG 2022-01-28 15:49:17,504 block_infos State(pc_initial=36 nstack_initial=1):
AdaptBlockInfo(insts=((36, {'iterator': '$phi36.0', 'pair': '$36for_iter.1', 'indval': '$36for_iter.2', 'pred': '$36for_iter.3'}),), outgoing_phis={'$phi38.1': '$36for_iter.2'}, blockstack=(), active_try_block=None, outgoing_edgepushed={54: (), 38: ('$phi36.0', '$36for_iter.2')})
DEBUG 2022-01-28 15:49:17,504 block_infos State(pc_initial=38 nstack_initial=2):
AdaptBlockInfo(insts=((38, {'value': '$phi38.1'}), (40, {'res': '$val40.2'}), (42, {'res': '$in_arr42.3'}), (44, {'res': '$i44.4'}), (46, {'index': '$i44.4', 'target': '$in_arr42.3', 'res': '$46binary_subscr.5'}), (48, {'lhs': '$val40.2', 'rhs': '$46binary_subscr.5', 'res': '$48inplace_multiply.6'}), (50, {'value': '$48inplace_multiply.6'}), (52, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={36: ('$phi38.0',)})
DEBUG 2022-01-28 15:49:17,504 block_infos State(pc_initial=54 nstack_initial=0):
AdaptBlockInfo(insts=((54, {'res': '$val54.0'}), (56, {'retval': '$val54.0', 'castval': '$56return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG 2022-01-28 15:49:17,506 label 0:
    in_arr = arg(0, name=in_arr)             ['in_arr']
    $2load_global.0 = global(numba: <module 'numba' from 'C:\\Users\\zl4821\\Anaconda3\\envs\\GBS\\lib\\site-packages\\numba\\__init__.py'>) ['$2load_global.0']
    $4load_attr.1 = getattr(value=$2load_global.0, attr=parfors) ['$2load_global.0', '$4load_attr.1']
    $6load_attr.2 = getattr(value=$4load_attr.1, attr=parfor) ['$4load_attr.1', '$6load_attr.2']
    $8load_method.3 = getattr(value=$6load_attr.2, attr=init_prange) ['$6load_attr.2', '$8load_method.3']
    $10call_method.4 = call $8load_method.3(func=$8load_method.3, args=[], kws=(), vararg=None, target=None) ['$10call_method.4', '$8load_method.3']
    val = freevar(one: 1)                    ['val']
    $18load_global.6 = global(numba: <module 'numba' from 'C:\\Users\\zl4821\\Anaconda3\\envs\\GBS\\lib\\site-packages\\numba\\__init__.py'>) ['$18load_global.6']
    $20load_attr.7 = getattr(value=$18load_global.6, attr=parfors) ['$18load_global.6', '$20load_attr.7']
    $22load_attr.8 = getattr(value=$20load_attr.7, attr=parfor) ['$20load_attr.7', '$22load_attr.8']
    $24load_method.9 = getattr(value=$22load_attr.8, attr=internal_prange) ['$22load_attr.8', '$24load_method.9']
    $26load_global.10 = global(len: <built-in function len>) ['$26load_global.10']
    $30call_function.12 = call $26load_global.10(in_arr, func=$26load_global.10, args=[Var(in_arr, parfor.py:276)], kws=(), vararg=None, target=None) ['$26load_global.10', '$30call_function.12', 'in_arr']
    $32call_method.13 = call $24load_method.9($30call_function.12, func=$24load_method.9, args=[Var($30call_function.12, parfor.py:278)], kws=(), vararg=None, target=None) ['$24load_method.9', '$30call_function.12', '$32call_method.13']
    $34get_iter.14 = getiter(value=$32call_method.13) ['$32call_method.13', '$34get_iter.14']
    $phi36.0 = $34get_iter.14                ['$34get_iter.14', '$phi36.0']
    jump 36                                  []
label 36:
    $36for_iter.1 = iternext(value=$phi36.0) ['$36for_iter.1', '$phi36.0']
    $36for_iter.2 = pair_first(value=$36for_iter.1) ['$36for_iter.1', '$36for_iter.2']
    $36for_iter.3 = pair_second(value=$36for_iter.1) ['$36for_iter.1', '$36for_iter.3']
    $phi38.1 = $36for_iter.2                 ['$36for_iter.2', '$phi38.1']
    branch $36for_iter.3, 38, 54             ['$36for_iter.3']
label 38:
    i = $phi38.1                             ['$phi38.1', 'i']
    $46binary_subscr.5 = getitem(value=in_arr, index=i, fn=<built-in function getitem>) ['$46binary_subscr.5', 'i', 'in_arr']
    $48inplace_multiply.6 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=val, rhs=$46binary_subscr.5, static_lhs=Undefined, static_rhs=Undefined) ['$46binary_subscr.5', '$48inplace_multiply.6', 'val']
    val = $48inplace_multiply.6              ['$48inplace_multiply.6', 'val']
    jump 36                                  []
label 54:
    $56return_value.1 = cast(value=val)      ['$56return_value.1', 'val']
    return $56return_value.1                 ['$56return_value.1']

DEBUG 2022-01-28 15:49:17,506 bytecode dump:
>          0	NOP(arg=None, lineno=154)
           2	LOAD_GLOBAL(arg=0, lineno=154)
           4	LOAD_ATTR(arg=1, lineno=154)
           6	LOAD_ATTR(arg=2, lineno=154)
           8	LOAD_METHOD(arg=3, lineno=154)
          10	CALL_METHOD(arg=0, lineno=154)
          12	POP_TOP(arg=None, lineno=154)
          14	LOAD_GLOBAL(arg=4, lineno=155)
          16	LOAD_GLOBAL(arg=5, lineno=155)
          18	LOAD_FAST(arg=0, lineno=155)
          20	CALL_FUNCTION(arg=1, lineno=155)
          22	CALL_FUNCTION(arg=1, lineno=155)
          24	POP_TOP(arg=None, lineno=155)
          26	LOAD_GLOBAL(arg=0, lineno=156)
          28	LOAD_ATTR(arg=6, lineno=156)
          30	LOAD_ATTR(arg=7, lineno=156)
          32	LOAD_METHOD(arg=8, lineno=156)
          34	LOAD_FAST(arg=0, lineno=156)
          36	LOAD_ATTR(arg=9, lineno=156)
          38	CALL_METHOD(arg=1, lineno=156)
          40	STORE_FAST(arg=1, lineno=156)
          42	LOAD_GLOBAL(arg=0, lineno=157)
          44	LOAD_ATTR(arg=1, lineno=157)
          46	LOAD_ATTR(arg=2, lineno=157)
          48	LOAD_METHOD(arg=10, lineno=157)
          50	LOAD_GLOBAL(arg=5, lineno=157)
          52	LOAD_FAST(arg=0, lineno=157)
          54	CALL_FUNCTION(arg=1, lineno=157)
          56	CALL_METHOD(arg=1, lineno=157)
          58	GET_ITER(arg=None, lineno=157)
>         60	FOR_ITER(arg=18, lineno=157)
          62	STORE_FAST(arg=2, lineno=157)
          64	LOAD_GLOBAL(arg=11, lineno=158)
          66	LOAD_FAST(arg=1, lineno=158)
          68	LOAD_FAST(arg=0, lineno=158)
          70	LOAD_FAST(arg=2, lineno=158)
          72	BINARY_SUBSCR(arg=None, lineno=158)
          74	CALL_FUNCTION(arg=2, lineno=158)
          76	STORE_FAST(arg=1, lineno=158)
          78	JUMP_ABSOLUTE(arg=60, lineno=158)
>         80	LOAD_FAST(arg=1, lineno=159)
          82	RETURN_VALUE(arg=None, lineno=159)
DEBUG 2022-01-28 15:49:17,506 pending: deque([State(pc_initial=0 nstack_initial=0)])
DEBUG 2022-01-28 15:49:17,506 stack: []
DEBUG 2022-01-28 15:49:17,506 dispatch pc=0, inst=NOP(arg=None, lineno=154)
DEBUG 2022-01-28 15:49:17,506 stack []
DEBUG 2022-01-28 15:49:17,506 dispatch pc=2, inst=LOAD_GLOBAL(arg=0, lineno=154)
DEBUG 2022-01-28 15:49:17,506 stack []
DEBUG 2022-01-28 15:49:17,506 dispatch pc=4, inst=LOAD_ATTR(arg=1, lineno=154)
DEBUG 2022-01-28 15:49:17,506 stack ['$2load_global.0']
DEBUG 2022-01-28 15:49:17,506 dispatch pc=6, inst=LOAD_ATTR(arg=2, lineno=154)
DEBUG 2022-01-28 15:49:17,506 stack ['$4load_attr.1']
DEBUG 2022-01-28 15:49:17,514 dispatch pc=8, inst=LOAD_METHOD(arg=3, lineno=154)
DEBUG 2022-01-28 15:49:17,514 stack ['$6load_attr.2']
DEBUG 2022-01-28 15:49:17,514 dispatch pc=10, inst=CALL_METHOD(arg=0, lineno=154)
DEBUG 2022-01-28 15:49:17,514 stack ['$8load_method.3']
DEBUG 2022-01-28 15:49:17,514 dispatch pc=12, inst=POP_TOP(arg=None, lineno=154)
DEBUG 2022-01-28 15:49:17,514 stack ['$10call_method.4']
DEBUG 2022-01-28 15:49:17,514 dispatch pc=14, inst=LOAD_GLOBAL(arg=4, lineno=155)
DEBUG 2022-01-28 15:49:17,514 stack []
DEBUG 2022-01-28 15:49:17,514 dispatch pc=16, inst=LOAD_GLOBAL(arg=5, lineno=155)
DEBUG 2022-01-28 15:49:17,514 stack ['$14load_global.5']
DEBUG 2022-01-28 15:49:17,514 dispatch pc=18, inst=LOAD_FAST(arg=0, lineno=155)
DEBUG 2022-01-28 15:49:17,514 stack ['$14load_global.5', '$16load_global.6']
DEBUG 2022-01-28 15:49:17,514 dispatch pc=20, inst=CALL_FUNCTION(arg=1, lineno=155)
DEBUG 2022-01-28 15:49:17,514 stack ['$14load_global.5', '$16load_global.6', '$in_arr18.7']
DEBUG 2022-01-28 15:49:17,514 dispatch pc=22, inst=CALL_FUNCTION(arg=1, lineno=155)
DEBUG 2022-01-28 15:49:17,514 stack ['$14load_global.5', '$20call_function.8']
DEBUG 2022-01-28 15:49:17,514 dispatch pc=24, inst=POP_TOP(arg=None, lineno=155)
DEBUG 2022-01-28 15:49:17,514 stack ['$22call_function.9']
DEBUG 2022-01-28 15:49:17,514 dispatch pc=26, inst=LOAD_GLOBAL(arg=0, lineno=156)
DEBUG 2022-01-28 15:49:17,514 stack []
DEBUG 2022-01-28 15:49:17,517 dispatch pc=28, inst=LOAD_ATTR(arg=6, lineno=156)
DEBUG 2022-01-28 15:49:17,517 stack ['$26load_global.10']
DEBUG 2022-01-28 15:49:17,517 dispatch pc=30, inst=LOAD_ATTR(arg=7, lineno=156)
DEBUG 2022-01-28 15:49:17,517 stack ['$28load_attr.11']
DEBUG 2022-01-28 15:49:17,517 dispatch pc=32, inst=LOAD_METHOD(arg=8, lineno=156)
DEBUG 2022-01-28 15:49:17,517 stack ['$30load_attr.12']
DEBUG 2022-01-28 15:49:17,517 dispatch pc=34, inst=LOAD_FAST(arg=0, lineno=156)
DEBUG 2022-01-28 15:49:17,517 stack ['$32load_method.13']
DEBUG 2022-01-28 15:49:17,517 dispatch pc=36, inst=LOAD_ATTR(arg=9, lineno=156)
DEBUG 2022-01-28 15:49:17,517 stack ['$32load_method.13', '$in_arr34.14']
DEBUG 2022-01-28 15:49:17,517 dispatch pc=38, inst=CALL_METHOD(arg=1, lineno=156)
DEBUG 2022-01-28 15:49:17,517 stack ['$32load_method.13', '$36load_attr.15']
DEBUG 2022-01-28 15:49:17,517 dispatch pc=40, inst=STORE_FAST(arg=1, lineno=156)
DEBUG 2022-01-28 15:49:17,517 stack ['$38call_method.16']
DEBUG 2022-01-28 15:49:17,517 dispatch pc=42, inst=LOAD_GLOBAL(arg=0, lineno=157)
DEBUG 2022-01-28 15:49:17,517 stack []
DEBUG 2022-01-28 15:49:17,517 dispatch pc=44, inst=LOAD_ATTR(arg=1, lineno=157)
DEBUG 2022-01-28 15:49:17,517 stack ['$42load_global.17']
DEBUG 2022-01-28 15:49:17,517 dispatch pc=46, inst=LOAD_ATTR(arg=2, lineno=157)
DEBUG 2022-01-28 15:49:17,517 stack ['$44load_attr.18']
DEBUG 2022-01-28 15:49:17,517 dispatch pc=48, inst=LOAD_METHOD(arg=10, lineno=157)
DEBUG 2022-01-28 15:49:17,517 stack ['$46load_attr.19']
DEBUG 2022-01-28 15:49:17,517 dispatch pc=50, inst=LOAD_GLOBAL(arg=5, lineno=157)
DEBUG 2022-01-28 15:49:17,517 stack ['$48load_method.20']
DEBUG 2022-01-28 15:49:17,517 dispatch pc=52, inst=LOAD_FAST(arg=0, lineno=157)
DEBUG 2022-01-28 15:49:17,517 stack ['$48load_method.20', '$50load_global.21']
DEBUG 2022-01-28 15:49:17,517 dispatch pc=54, inst=CALL_FUNCTION(arg=1, lineno=157)
DEBUG 2022-01-28 15:49:17,517 stack ['$48load_method.20', '$50load_global.21', '$in_arr52.22']
DEBUG 2022-01-28 15:49:17,517 dispatch pc=56, inst=CALL_METHOD(arg=1, lineno=157)
DEBUG 2022-01-28 15:49:17,517 stack ['$48load_method.20', '$54call_function.23']
DEBUG 2022-01-28 15:49:17,517 dispatch pc=58, inst=GET_ITER(arg=None, lineno=157)
DEBUG 2022-01-28 15:49:17,517 stack ['$56call_method.24']
DEBUG 2022-01-28 15:49:17,517 end state. edges=[Edge(pc=60, stack=('$58get_iter.25',), blockstack=(), npush=0)]
DEBUG 2022-01-28 15:49:17,517 pending: deque([State(pc_initial=60 nstack_initial=1)])
DEBUG 2022-01-28 15:49:17,517 stack: ['$phi60.0']
DEBUG 2022-01-28 15:49:17,517 dispatch pc=60, inst=FOR_ITER(arg=18, lineno=157)
DEBUG 2022-01-28 15:49:17,517 stack ['$phi60.0']
DEBUG 2022-01-28 15:49:17,517 end state. edges=[Edge(pc=80, stack=(), blockstack=(), npush=0), Edge(pc=62, stack=('$phi60.0', '$60for_iter.2'), blockstack=(), npush=0)]
DEBUG 2022-01-28 15:49:17,517 pending: deque([State(pc_initial=80 nstack_initial=0), State(pc_initial=62 nstack_initial=2)])
DEBUG 2022-01-28 15:49:17,517 stack: []
DEBUG 2022-01-28 15:49:17,517 dispatch pc=80, inst=LOAD_FAST(arg=1, lineno=159)
DEBUG 2022-01-28 15:49:17,517 stack []
DEBUG 2022-01-28 15:49:17,517 dispatch pc=82, inst=RETURN_VALUE(arg=None, lineno=159)
DEBUG 2022-01-28 15:49:17,517 stack ['$val80.0']
DEBUG 2022-01-28 15:49:17,517 end state. edges=[]
DEBUG 2022-01-28 15:49:17,517 pending: deque([State(pc_initial=62 nstack_initial=2)])
DEBUG 2022-01-28 15:49:17,517 stack: ['$phi62.0', '$phi62.1']
DEBUG 2022-01-28 15:49:17,517 dispatch pc=62, inst=STORE_FAST(arg=2, lineno=157)
DEBUG 2022-01-28 15:49:17,517 stack ['$phi62.0', '$phi62.1']
DEBUG 2022-01-28 15:49:17,517 dispatch pc=64, inst=LOAD_GLOBAL(arg=11, lineno=158)
DEBUG 2022-01-28 15:49:17,517 stack ['$phi62.0']
DEBUG 2022-01-28 15:49:17,517 dispatch pc=66, inst=LOAD_FAST(arg=1, lineno=158)
DEBUG 2022-01-28 15:49:17,517 stack ['$phi62.0', '$64load_global.2']
DEBUG 2022-01-28 15:49:17,517 dispatch pc=68, inst=LOAD_FAST(arg=0, lineno=158)
DEBUG 2022-01-28 15:49:17,517 stack ['$phi62.0', '$64load_global.2', '$val66.3']
DEBUG 2022-01-28 15:49:17,517 dispatch pc=70, inst=LOAD_FAST(arg=2, lineno=158)
DEBUG 2022-01-28 15:49:17,517 stack ['$phi62.0', '$64load_global.2', '$val66.3', '$in_arr68.4']
DEBUG 2022-01-28 15:49:17,517 dispatch pc=72, inst=BINARY_SUBSCR(arg=None, lineno=158)
DEBUG 2022-01-28 15:49:17,517 stack ['$phi62.0', '$64load_global.2', '$val66.3', '$in_arr68.4', '$i70.5']
DEBUG 2022-01-28 15:49:17,517 dispatch pc=74, inst=CALL_FUNCTION(arg=2, lineno=158)
DEBUG 2022-01-28 15:49:17,517 stack ['$phi62.0', '$64load_global.2', '$val66.3', '$72binary_subscr.6']
DEBUG 2022-01-28 15:49:17,517 dispatch pc=76, inst=STORE_FAST(arg=1, lineno=158)
DEBUG 2022-01-28 15:49:17,517 stack ['$phi62.0', '$74call_function.7']
DEBUG 2022-01-28 15:49:17,517 dispatch pc=78, inst=JUMP_ABSOLUTE(arg=60, lineno=158)
DEBUG 2022-01-28 15:49:17,517 stack ['$phi62.0']
DEBUG 2022-01-28 15:49:17,517 end state. edges=[Edge(pc=60, stack=('$phi62.0',), blockstack=(), npush=0)]
DEBUG 2022-01-28 15:49:17,517 pending: deque([State(pc_initial=60 nstack_initial=1)])
DEBUG 2022-01-28 15:49:17,517 -------------------------Prune PHIs-------------------------
DEBUG 2022-01-28 15:49:17,517 Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=60 nstack_initial=1): {'$phi60.0'},
             State(pc_initial=62 nstack_initial=2): {'$phi62.1'},
             State(pc_initial=80 nstack_initial=0): set()})
DEBUG 2022-01-28 15:49:17,517 defmap: {'$phi60.0': State(pc_initial=0 nstack_initial=0),
 '$phi62.1': State(pc_initial=60 nstack_initial=1)}
DEBUG 2022-01-28 15:49:17,517 phismap: defaultdict(<class 'set'>,
            {'$phi60.0': {('$58get_iter.25',
                           State(pc_initial=0 nstack_initial=0)),
                          ('$phi62.0', State(pc_initial=62 nstack_initial=2))},
             '$phi62.0': {('$phi60.0', State(pc_initial=60 nstack_initial=1))},
             '$phi62.1': {('$60for_iter.2',
                           State(pc_initial=60 nstack_initial=1))}})
DEBUG 2022-01-28 15:49:17,517 changing phismap: defaultdict(<class 'set'>,
            {'$phi60.0': {('$58get_iter.25',
                           State(pc_initial=0 nstack_initial=0)),
                          ('$phi60.0', State(pc_initial=60 nstack_initial=1))},
             '$phi62.0': {('$58get_iter.25',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi62.1': {('$60for_iter.2',
                           State(pc_initial=60 nstack_initial=1))}})
DEBUG 2022-01-28 15:49:17,517 changing phismap: defaultdict(<class 'set'>,
            {'$phi60.0': {('$58get_iter.25',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi62.0': {('$58get_iter.25',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi62.1': {('$60for_iter.2',
                           State(pc_initial=60 nstack_initial=1))}})
DEBUG 2022-01-28 15:49:17,517 changing phismap: defaultdict(<class 'set'>,
            {'$phi60.0': {('$58get_iter.25',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi62.0': {('$58get_iter.25',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi62.1': {('$60for_iter.2',
                           State(pc_initial=60 nstack_initial=1))}})
DEBUG 2022-01-28 15:49:17,525 keep phismap: {'$phi60.0': {('$58get_iter.25', State(pc_initial=0 nstack_initial=0))},
 '$phi62.1': {('$60for_iter.2', State(pc_initial=60 nstack_initial=1))}}
DEBUG 2022-01-28 15:49:17,525 new_out: defaultdict(<class 'dict'>,
            {State(pc_initial=0 nstack_initial=0): {'$phi60.0': '$58get_iter.25'},
             State(pc_initial=60 nstack_initial=1): {'$phi62.1': '$60for_iter.2'}})
DEBUG 2022-01-28 15:49:17,525 ----------------------DONE Prune PHIs-----------------------
DEBUG 2022-01-28 15:49:17,525 block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$2load_global.0'}), (4, {'item': '$2load_global.0', 'res': '$4load_attr.1'}), (6, {'item': '$4load_attr.1', 'res': '$6load_attr.2'}), (8, {'item': '$6load_attr.2', 'res': '$8load_method.3'}), (10, {'func': '$8load_method.3', 'args': [], 'res': '$10call_method.4'}), (14, {'res': '$14load_global.5'}), (16, {'res': '$16load_global.6'}), (18, {'res': '$in_arr18.7'}), (20, {'func': '$16load_global.6', 'args': ['$in_arr18.7'], 'res': '$20call_function.8'}), (22, {'func': '$14load_global.5', 'args': ['$20call_function.8'], 'res': '$22call_function.9'}), (26, {'res': '$26load_global.10'}), (28, {'item': '$26load_global.10', 'res': '$28load_attr.11'}), (30, {'item': '$28load_attr.11', 'res': '$30load_attr.12'}), (32, {'item': '$30load_attr.12', 'res': '$32load_method.13'}), (34, {'res': '$in_arr34.14'}), (36, {'item': '$in_arr34.14', 'res': '$36load_attr.15'}), (38, {'func': '$32load_method.13', 'args': ['$36load_attr.15'], 'res': '$38call_method.16'}), (40, {'value': '$38call_method.16'}), (42, {'res': '$42load_global.17'}), (44, {'item': '$42load_global.17', 'res': '$44load_attr.18'}), (46, {'item': '$44load_attr.18', 'res': '$46load_attr.19'}), (48, {'item': '$46load_attr.19', 'res': '$48load_method.20'}), (50, {'res': '$50load_global.21'}), (52, {'res': '$in_arr52.22'}), (54, {'func': '$50load_global.21', 'args': ['$in_arr52.22'], 'res': '$54call_function.23'}), (56, {'func': '$48load_method.20', 'args': ['$54call_function.23'], 'res': '$56call_method.24'}), (58, {'value': '$56call_method.24', 'res': '$58get_iter.25'})), outgoing_phis={'$phi60.0': '$58get_iter.25'}, blockstack=(), active_try_block=None, outgoing_edgepushed={60: ('$58get_iter.25',)})
DEBUG 2022-01-28 15:49:17,525 block_infos State(pc_initial=60 nstack_initial=1):
AdaptBlockInfo(insts=((60, {'iterator': '$phi60.0', 'pair': '$60for_iter.1', 'indval': '$60for_iter.2', 'pred': '$60for_iter.3'}),), outgoing_phis={'$phi62.1': '$60for_iter.2'}, blockstack=(), active_try_block=None, outgoing_edgepushed={80: (), 62: ('$phi60.0', '$60for_iter.2')})
DEBUG 2022-01-28 15:49:17,525 block_infos State(pc_initial=62 nstack_initial=2):
AdaptBlockInfo(insts=((62, {'value': '$phi62.1'}), (64, {'res': '$64load_global.2'}), (66, {'res': '$val66.3'}), (68, {'res': '$in_arr68.4'}), (70, {'res': '$i70.5'}), (72, {'index': '$i70.5', 'target': '$in_arr68.4', 'res': '$72binary_subscr.6'}), (74, {'func': '$64load_global.2', 'args': ['$val66.3', '$72binary_subscr.6'], 'res': '$74call_function.7'}), (76, {'value': '$74call_function.7'}), (78, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={60: ('$phi62.0',)})
DEBUG 2022-01-28 15:49:17,525 block_infos State(pc_initial=80 nstack_initial=0):
AdaptBlockInfo(insts=((80, {'res': '$val80.0'}), (82, {'retval': '$val80.0', 'castval': '$82return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG 2022-01-28 15:49:17,527 label 0:
    in_arr = arg(0, name=in_arr)             ['in_arr']
    $2load_global.0 = global(numba: <module 'numba' from 'C:\\Users\\zl4821\\Anaconda3\\envs\\GBS\\lib\\site-packages\\numba\\__init__.py'>) ['$2load_global.0']
    $4load_attr.1 = getattr(value=$2load_global.0, attr=parfors) ['$2load_global.0', '$4load_attr.1']
    $6load_attr.2 = getattr(value=$4load_attr.1, attr=parfor) ['$4load_attr.1', '$6load_attr.2']
    $8load_method.3 = getattr(value=$6load_attr.2, attr=init_prange) ['$6load_attr.2', '$8load_method.3']
    $10call_method.4 = call $8load_method.3(func=$8load_method.3, args=[], kws=(), vararg=None, target=None) ['$10call_method.4', '$8load_method.3']
    $14load_global.5 = global(max_checker: <function max_checker at 0x0000024103BE6F70>) ['$14load_global.5']
    $16load_global.6 = global(len: <built-in function len>) ['$16load_global.6']
    $20call_function.8 = call $16load_global.6(in_arr, func=$16load_global.6, args=[Var(in_arr, parfor.py:154)], kws=(), vararg=None, target=None) ['$16load_global.6', '$20call_function.8', 'in_arr']
    $22call_function.9 = call $14load_global.5($20call_function.8, func=$14load_global.5, args=[Var($20call_function.8, parfor.py:155)], kws=(), vararg=None, target=None) ['$14load_global.5', '$20call_function.8', '$22call_function.9']
    $26load_global.10 = global(numba: <module 'numba' from 'C:\\Users\\zl4821\\Anaconda3\\envs\\GBS\\lib\\site-packages\\numba\\__init__.py'>) ['$26load_global.10']
    $28load_attr.11 = getattr(value=$26load_global.10, attr=cpython) ['$26load_global.10', '$28load_attr.11']
    $30load_attr.12 = getattr(value=$28load_attr.11, attr=builtins) ['$28load_attr.11', '$30load_attr.12']
    $32load_method.13 = getattr(value=$30load_attr.12, attr=get_type_min_value) ['$30load_attr.12', '$32load_method.13']
    $36load_attr.15 = getattr(value=in_arr, attr=dtype) ['$36load_attr.15', 'in_arr']
    val = call $32load_method.13($36load_attr.15, func=$32load_method.13, args=[Var($36load_attr.15, parfor.py:156)], kws=(), vararg=None, target=None) ['$32load_method.13', '$36load_attr.15', 'val']
    $42load_global.17 = global(numba: <module 'numba' from 'C:\\Users\\zl4821\\Anaconda3\\envs\\GBS\\lib\\site-packages\\numba\\__init__.py'>) ['$42load_global.17']
    $44load_attr.18 = getattr(value=$42load_global.17, attr=parfors) ['$42load_global.17', '$44load_attr.18']
    $46load_attr.19 = getattr(value=$44load_attr.18, attr=parfor) ['$44load_attr.18', '$46load_attr.19']
    $48load_method.20 = getattr(value=$46load_attr.19, attr=internal_prange) ['$46load_attr.19', '$48load_method.20']
    $50load_global.21 = global(len: <built-in function len>) ['$50load_global.21']
    $54call_function.23 = call $50load_global.21(in_arr, func=$50load_global.21, args=[Var(in_arr, parfor.py:154)], kws=(), vararg=None, target=None) ['$50load_global.21', '$54call_function.23', 'in_arr']
    $56call_method.24 = call $48load_method.20($54call_function.23, func=$48load_method.20, args=[Var($54call_function.23, parfor.py:157)], kws=(), vararg=None, target=None) ['$48load_method.20', '$54call_function.23', '$56call_method.24']
    $58get_iter.25 = getiter(value=$56call_method.24) ['$56call_method.24', '$58get_iter.25']
    $phi60.0 = $58get_iter.25                ['$58get_iter.25', '$phi60.0']
    jump 60                                  []
label 60:
    $60for_iter.1 = iternext(value=$phi60.0) ['$60for_iter.1', '$phi60.0']
    $60for_iter.2 = pair_first(value=$60for_iter.1) ['$60for_iter.1', '$60for_iter.2']
    $60for_iter.3 = pair_second(value=$60for_iter.1) ['$60for_iter.1', '$60for_iter.3']
    $phi62.1 = $60for_iter.2                 ['$60for_iter.2', '$phi62.1']
    branch $60for_iter.3, 62, 80             ['$60for_iter.3']
label 62:
    i = $phi62.1                             ['$phi62.1', 'i']
    $64load_global.2 = global(max: <built-in function max>) ['$64load_global.2']
    $72binary_subscr.6 = getitem(value=in_arr, index=i, fn=<built-in function getitem>) ['$72binary_subscr.6', 'i', 'in_arr']
    val = call $64load_global.2(val, $72binary_subscr.6, func=$64load_global.2, args=[Var(val, parfor.py:156), Var($72binary_subscr.6, parfor.py:158)], kws=(), vararg=None, target=None) ['$64load_global.2', '$72binary_subscr.6', 'val', 'val']
    jump 60                                  []
label 80:
    $82return_value.1 = cast(value=val)      ['$82return_value.1', 'val']
    return $82return_value.1                 ['$82return_value.1']

DEBUG 2022-01-28 15:49:17,527 bytecode dump:
>          0	NOP(arg=None, lineno=457)
           2	LOAD_FAST(arg=0, lineno=457)
           4	LOAD_CONST(arg=1, lineno=457)
           6	COMPARE_OP(arg=2, lineno=457)
           8	POP_JUMP_IF_FALSE(arg=18, lineno=457)
          10	LOAD_GLOBAL(arg=0, lineno=458)
          12	LOAD_CONST(arg=2, lineno=458)
          14	CALL_FUNCTION(arg=1, lineno=458)
          16	RAISE_VARARGS(arg=1, lineno=458)
>         18	LOAD_CONST(arg=0, lineno=458)
          20	RETURN_VALUE(arg=None, lineno=458)
DEBUG 2022-01-28 15:49:17,527 pending: deque([State(pc_initial=0 nstack_initial=0)])
DEBUG 2022-01-28 15:49:17,527 stack: []
DEBUG 2022-01-28 15:49:17,527 dispatch pc=0, inst=NOP(arg=None, lineno=457)
DEBUG 2022-01-28 15:49:17,527 stack []
DEBUG 2022-01-28 15:49:17,527 dispatch pc=2, inst=LOAD_FAST(arg=0, lineno=457)
DEBUG 2022-01-28 15:49:17,527 stack []
DEBUG 2022-01-28 15:49:17,527 dispatch pc=4, inst=LOAD_CONST(arg=1, lineno=457)
DEBUG 2022-01-28 15:49:17,527 stack ['$arr_size2.0']
DEBUG 2022-01-28 15:49:17,527 dispatch pc=6, inst=COMPARE_OP(arg=2, lineno=457)
DEBUG 2022-01-28 15:49:17,527 stack ['$arr_size2.0', '$const4.1']
DEBUG 2022-01-28 15:49:17,527 dispatch pc=8, inst=POP_JUMP_IF_FALSE(arg=18, lineno=457)
DEBUG 2022-01-28 15:49:17,527 stack ['$6compare_op.2']
DEBUG 2022-01-28 15:49:17,527 end state. edges=[Edge(pc=10, stack=(), blockstack=(), npush=0), Edge(pc=18, stack=(), blockstack=(), npush=0)]
DEBUG 2022-01-28 15:49:17,527 pending: deque([State(pc_initial=10 nstack_initial=0), State(pc_initial=18 nstack_initial=0)])
DEBUG 2022-01-28 15:49:17,527 stack: []
DEBUG 2022-01-28 15:49:17,527 dispatch pc=10, inst=LOAD_GLOBAL(arg=0, lineno=458)
DEBUG 2022-01-28 15:49:17,527 stack []
DEBUG 2022-01-28 15:49:17,527 dispatch pc=12, inst=LOAD_CONST(arg=2, lineno=458)
DEBUG 2022-01-28 15:49:17,527 stack ['$10load_global.0']
DEBUG 2022-01-28 15:49:17,527 dispatch pc=14, inst=CALL_FUNCTION(arg=1, lineno=458)
DEBUG 2022-01-28 15:49:17,527 stack ['$10load_global.0', '$const12.1']
DEBUG 2022-01-28 15:49:17,527 dispatch pc=16, inst=RAISE_VARARGS(arg=1, lineno=458)
DEBUG 2022-01-28 15:49:17,527 stack ['$14call_function.2']
DEBUG 2022-01-28 15:49:17,527 end state. edges=[]
DEBUG 2022-01-28 15:49:17,527 pending: deque([State(pc_initial=18 nstack_initial=0)])
DEBUG 2022-01-28 15:49:17,527 stack: []
DEBUG 2022-01-28 15:49:17,527 dispatch pc=18, inst=LOAD_CONST(arg=0, lineno=458)
DEBUG 2022-01-28 15:49:17,527 stack []
DEBUG 2022-01-28 15:49:17,527 dispatch pc=20, inst=RETURN_VALUE(arg=None, lineno=458)
DEBUG 2022-01-28 15:49:17,527 stack ['$const18.0']
DEBUG 2022-01-28 15:49:17,527 end state. edges=[]
DEBUG 2022-01-28 15:49:17,535 -------------------------Prune PHIs-------------------------
DEBUG 2022-01-28 15:49:17,535 Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=10 nstack_initial=0): set(),
             State(pc_initial=18 nstack_initial=0): set()})
DEBUG 2022-01-28 15:49:17,535 defmap: {}
DEBUG 2022-01-28 15:49:17,535 phismap: defaultdict(<class 'set'>, {})
DEBUG 2022-01-28 15:49:17,535 changing phismap: defaultdict(<class 'set'>, {})
DEBUG 2022-01-28 15:49:17,535 keep phismap: {}
DEBUG 2022-01-28 15:49:17,535 new_out: defaultdict(<class 'dict'>, {})
DEBUG 2022-01-28 15:49:17,535 ----------------------DONE Prune PHIs-----------------------
DEBUG 2022-01-28 15:49:17,535 block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$arr_size2.0'}), (4, {'res': '$const4.1'}), (6, {'lhs': '$arr_size2.0', 'rhs': '$const4.1', 'res': '$6compare_op.2'}), (8, {'pred': '$6compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={10: (), 18: ()})
DEBUG 2022-01-28 15:49:17,535 block_infos State(pc_initial=10 nstack_initial=0):
AdaptBlockInfo(insts=((10, {'res': '$10load_global.0'}), (12, {'res': '$const12.1'}), (14, {'func': '$10load_global.0', 'args': ['$const12.1'], 'res': '$14call_function.2'}), (16, {'exc': '$14call_function.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG 2022-01-28 15:49:17,535 block_infos State(pc_initial=18 nstack_initial=0):
AdaptBlockInfo(insts=((18, {'res': '$const18.0'}), (20, {'retval': '$const18.0', 'castval': '$20return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG 2022-01-28 15:49:17,535 label 0:
    arr_size = arg(0, name=arr_size)         ['arr_size']
    $const4.1 = const(int, 0)                ['$const4.1']
    $6compare_op.2 = arr_size == $const4.1   ['$6compare_op.2', '$const4.1', 'arr_size']
    bool8 = global(bool: <class 'bool'>)     ['bool8']
    $8pred = call bool8($6compare_op.2, func=bool8, args=(Var($6compare_op.2, parfor.py:457),), kws=(), vararg=None, target=None) ['$6compare_op.2', '$8pred', 'bool8']
    branch $8pred, 10, 18                    ['$8pred']
label 10:
    $10load_global.0 = global(ValueError: <class 'ValueError'>) ['$10load_global.0']
    $const12.1 = const(str, zero-size array to reduction operation maximum which has no identity) ['$const12.1']
    $14call_function.2 = call $10load_global.0($const12.1, func=$10load_global.0, args=[Var($const12.1, parfor.py:458)], kws=(), vararg=None, target=None) ['$10load_global.0', '$14call_function.2', '$const12.1']
    raise $14call_function.2                 ['$14call_function.2']
label 18:
    $const18.0 = const(NoneType, None)       ['$const18.0']
    $20return_value.1 = cast(value=$const18.0) ['$20return_value.1', '$const18.0']
    return $20return_value.1                 ['$20return_value.1']

DEBUG 2022-01-28 15:49:17,547 ==== SSA block analysis pass on 0
DEBUG 2022-01-28 15:49:17,547 Running <numba.core.ssa._GatherDefsHandler object at 0x000002410B0D2850>
DEBUG 2022-01-28 15:49:17,547 on stmt: arr_size = arg(0, name=arr_size)
DEBUG 2022-01-28 15:49:17,547 on stmt: $const4.1 = const(int, 0)
DEBUG 2022-01-28 15:49:17,547 on stmt: $6compare_op.2 = arr_size == $const4.1
DEBUG 2022-01-28 15:49:17,547 on stmt: bool8 = global(bool: <class 'bool'>)
DEBUG 2022-01-28 15:49:17,547 on stmt: $8pred = call bool8($6compare_op.2, func=bool8, args=(Var($6compare_op.2, parfor.py:457),), kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:17,547 on stmt: branch $8pred, 10, 18
DEBUG 2022-01-28 15:49:17,547 ==== SSA block analysis pass on 10
DEBUG 2022-01-28 15:49:17,547 Running <numba.core.ssa._GatherDefsHandler object at 0x000002410B0D2850>
DEBUG 2022-01-28 15:49:17,547 on stmt: $10load_global.0 = global(ValueError: <class 'ValueError'>)
DEBUG 2022-01-28 15:49:17,547 on stmt: $const12.1 = const(str, zero-size array to reduction operation maximum which has no identity)
DEBUG 2022-01-28 15:49:17,547 on stmt: $14call_function.2 = call $10load_global.0($const12.1, func=$10load_global.0, args=[Var($const12.1, parfor.py:458)], kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:17,547 on stmt: <static> raise <class 'ValueError'>('zero-size array to reduction operation maximum which has no identity')
DEBUG 2022-01-28 15:49:17,547 ==== SSA block analysis pass on 18
DEBUG 2022-01-28 15:49:17,547 Running <numba.core.ssa._GatherDefsHandler object at 0x000002410B0D2850>
DEBUG 2022-01-28 15:49:17,547 on stmt: $const18.0 = const(NoneType, None)
DEBUG 2022-01-28 15:49:17,547 on stmt: $20return_value.1 = cast(value=$const18.0)
DEBUG 2022-01-28 15:49:17,547 on stmt: return $20return_value.1
DEBUG 2022-01-28 15:49:17,547 defs defaultdict(<class 'list'>,
            {'$10load_global.0': [<numba.core.ir.Assign object at 0x000002410AFEEDF0>],
             '$14call_function.2': [<numba.core.ir.Assign object at 0x000002410AFEEAF0>],
             '$20return_value.1': [<numba.core.ir.Assign object at 0x000002410AFEE3A0>],
             '$6compare_op.2': [<numba.core.ir.Assign object at 0x000002410B0F6520>],
             '$8pred': [<numba.core.ir.Assign object at 0x000002410AFEE160>],
             '$const12.1': [<numba.core.ir.Assign object at 0x000002410AFEE070>],
             '$const18.0': [<numba.core.ir.Assign object at 0x000002410AFEE700>],
             '$const4.1': [<numba.core.ir.Assign object at 0x000002410B0F6D60>],
             'arr_size': [<numba.core.ir.Assign object at 0x000002410B0D2790>],
             'bool8': [<numba.core.ir.Assign object at 0x000002410AFEE190>]})
DEBUG 2022-01-28 15:49:17,547 SSA violators set()
DEBUG 2022-01-28 15:49:17,598 bytecode dump:
>          0	NOP(arg=None, lineno=610)
           2	LOAD_GLOBAL(arg=0, lineno=610)
           4	LOAD_FAST(arg=0, lineno=610)
           6	CALL_FUNCTION(arg=1, lineno=610)
           8	RETURN_VALUE(arg=None, lineno=610)
DEBUG 2022-01-28 15:49:17,598 pending: deque([State(pc_initial=0 nstack_initial=0)])
DEBUG 2022-01-28 15:49:17,598 stack: []
DEBUG 2022-01-28 15:49:17,598 dispatch pc=0, inst=NOP(arg=None, lineno=610)
DEBUG 2022-01-28 15:49:17,598 stack []
DEBUG 2022-01-28 15:49:17,598 dispatch pc=2, inst=LOAD_GLOBAL(arg=0, lineno=610)
DEBUG 2022-01-28 15:49:17,598 stack []
DEBUG 2022-01-28 15:49:17,598 dispatch pc=4, inst=LOAD_FAST(arg=0, lineno=610)
DEBUG 2022-01-28 15:49:17,598 stack ['$2load_global.0']
DEBUG 2022-01-28 15:49:17,598 dispatch pc=6, inst=CALL_FUNCTION(arg=1, lineno=610)
DEBUG 2022-01-28 15:49:17,598 stack ['$2load_global.0', '$desc4.1']
DEBUG 2022-01-28 15:49:17,598 dispatch pc=8, inst=RETURN_VALUE(arg=None, lineno=610)
DEBUG 2022-01-28 15:49:17,598 stack ['$6call_function.2']
DEBUG 2022-01-28 15:49:17,598 end state. edges=[]
DEBUG 2022-01-28 15:49:17,598 -------------------------Prune PHIs-------------------------
DEBUG 2022-01-28 15:49:17,598 Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
DEBUG 2022-01-28 15:49:17,598 defmap: {}
DEBUG 2022-01-28 15:49:17,598 phismap: defaultdict(<class 'set'>, {})
DEBUG 2022-01-28 15:49:17,598 changing phismap: defaultdict(<class 'set'>, {})
DEBUG 2022-01-28 15:49:17,598 keep phismap: {}
DEBUG 2022-01-28 15:49:17,598 new_out: defaultdict(<class 'dict'>, {})
DEBUG 2022-01-28 15:49:17,598 ----------------------DONE Prune PHIs-----------------------
DEBUG 2022-01-28 15:49:17,598 block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$2load_global.0'}), (4, {'res': '$desc4.1'}), (6, {'func': '$2load_global.0', 'args': ['$desc4.1'], 'res': '$6call_function.2'}), (8, {'retval': '$6call_function.2', 'castval': '$8return_value.3'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG 2022-01-28 15:49:17,598 label 0:
    desc = arg(0, name=desc)                 ['desc']
    $2load_global.0 = global(_make_dtype_object: <intrinsic _make_dtype_object>) ['$2load_global.0']
    $6call_function.2 = call $2load_global.0(desc, func=$2load_global.0, args=[Var(desc, npyimpl.py:610)], kws=(), vararg=None, target=None) ['$2load_global.0', '$6call_function.2', 'desc']
    $8return_value.3 = cast(value=$6call_function.2) ['$6call_function.2', '$8return_value.3']
    return $8return_value.3                  ['$8return_value.3']

DEBUG 2022-01-28 15:49:17,598 ==== SSA block analysis pass on 0
DEBUG 2022-01-28 15:49:17,598 Running <numba.core.ssa._GatherDefsHandler object at 0x000002410B14B9D0>
DEBUG 2022-01-28 15:49:17,598 on stmt: desc = arg(0, name=desc)
DEBUG 2022-01-28 15:49:17,598 on stmt: $2load_global.0 = global(_make_dtype_object: <intrinsic _make_dtype_object>)
DEBUG 2022-01-28 15:49:17,598 on stmt: $6call_function.2 = call $2load_global.0(desc, func=$2load_global.0, args=[Var(desc, npyimpl.py:610)], kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:17,598 on stmt: $8return_value.3 = cast(value=$6call_function.2)
DEBUG 2022-01-28 15:49:17,598 on stmt: return $8return_value.3
DEBUG 2022-01-28 15:49:17,598 defs defaultdict(<class 'list'>,
            {'$2load_global.0': [<numba.core.ir.Assign object at 0x000002410B0E42E0>],
             '$6call_function.2': [<numba.core.ir.Assign object at 0x000002410C1BC460>],
             '$8return_value.3': [<numba.core.ir.Assign object at 0x000002410C1BC580>],
             'desc': [<numba.core.ir.Assign object at 0x000002410B0D9F10>]})
DEBUG 2022-01-28 15:49:17,598 SSA violators set()
DEBUG 2022-01-28 15:49:17,628 bytecode dump:
>          0	NOP(arg=None, lineno=3)
           2	LOAD_GLOBAL(arg=0, lineno=3)
           4	LOAD_FAST(arg=0, lineno=3)
           6	LOAD_FAST(arg=1, lineno=3)
           8	CALL_FUNCTION(arg=2, lineno=3)
          10	RETURN_VALUE(arg=None, lineno=3)
DEBUG 2022-01-28 15:49:17,628 pending: deque([State(pc_initial=0 nstack_initial=0)])
DEBUG 2022-01-28 15:49:17,628 stack: []
DEBUG 2022-01-28 15:49:17,628 dispatch pc=0, inst=NOP(arg=None, lineno=3)
DEBUG 2022-01-28 15:49:17,628 stack []
DEBUG 2022-01-28 15:49:17,628 dispatch pc=2, inst=LOAD_GLOBAL(arg=0, lineno=3)
DEBUG 2022-01-28 15:49:17,628 stack []
DEBUG 2022-01-28 15:49:17,628 dispatch pc=4, inst=LOAD_FAST(arg=0, lineno=3)
DEBUG 2022-01-28 15:49:17,628 stack ['$2load_global.0']
DEBUG 2022-01-28 15:49:17,628 dispatch pc=6, inst=LOAD_FAST(arg=1, lineno=3)
DEBUG 2022-01-28 15:49:17,628 stack ['$2load_global.0', '$tmp04.1']
DEBUG 2022-01-28 15:49:17,628 dispatch pc=8, inst=CALL_FUNCTION(arg=2, lineno=3)
DEBUG 2022-01-28 15:49:17,628 stack ['$2load_global.0', '$tmp04.1', '$dtype6.2']
DEBUG 2022-01-28 15:49:17,628 dispatch pc=10, inst=RETURN_VALUE(arg=None, lineno=3)
DEBUG 2022-01-28 15:49:17,628 stack ['$8call_function.3']
DEBUG 2022-01-28 15:49:17,628 end state. edges=[]
DEBUG 2022-01-28 15:49:17,628 -------------------------Prune PHIs-------------------------
DEBUG 2022-01-28 15:49:17,628 Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
DEBUG 2022-01-28 15:49:17,628 defmap: {}
DEBUG 2022-01-28 15:49:17,628 phismap: defaultdict(<class 'set'>, {})
DEBUG 2022-01-28 15:49:17,628 changing phismap: defaultdict(<class 'set'>, {})
DEBUG 2022-01-28 15:49:17,628 keep phismap: {}
DEBUG 2022-01-28 15:49:17,628 new_out: defaultdict(<class 'dict'>, {})
DEBUG 2022-01-28 15:49:17,628 ----------------------DONE Prune PHIs-----------------------
DEBUG 2022-01-28 15:49:17,628 block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$2load_global.0'}), (4, {'res': '$tmp04.1'}), (6, {'res': '$dtype6.2'}), (8, {'func': '$2load_global.0', 'args': ['$tmp04.1', '$dtype6.2'], 'res': '$8call_function.3'}), (10, {'retval': '$8call_function.3', 'castval': '$10return_value.4'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG 2022-01-28 15:49:17,628 label 0:
    tmp0 = arg(0, name=tmp0)                 ['tmp0']
    dtype = arg(1, name=dtype)               ['dtype']
    $2load_global.0 = global(intrin: <intrinsic stub>) ['$2load_global.0']
    $8call_function.3 = call $2load_global.0(tmp0, dtype, func=$2load_global.0, args=[Var(tmp0, <string>:3), Var(dtype, <string>:3)], kws=(), vararg=None, target=None) ['$2load_global.0', '$8call_function.3', 'dtype', 'tmp0']
    $10return_value.4 = cast(value=$8call_function.3) ['$10return_value.4', '$8call_function.3']
    return $10return_value.4                 ['$10return_value.4']

DEBUG 2022-01-28 15:49:17,628 ==== SSA block analysis pass on 0
DEBUG 2022-01-28 15:49:17,628 Running <numba.core.ssa._GatherDefsHandler object at 0x000002410C1E1D30>
DEBUG 2022-01-28 15:49:17,628 on stmt: tmp0 = arg(0, name=tmp0)
DEBUG 2022-01-28 15:49:17,628 on stmt: dtype = arg(1, name=dtype)
DEBUG 2022-01-28 15:49:17,628 on stmt: $2load_global.0 = global(intrin: <intrinsic stub>)
DEBUG 2022-01-28 15:49:17,628 on stmt: $8call_function.3 = call $2load_global.0(tmp0, dtype, func=$2load_global.0, args=[Var(tmp0, <string>:3), Var(dtype, <string>:3)], kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:17,628 on stmt: $10return_value.4 = cast(value=$8call_function.3)
DEBUG 2022-01-28 15:49:17,628 on stmt: return $10return_value.4
DEBUG 2022-01-28 15:49:17,628 defs defaultdict(<class 'list'>,
            {'$10return_value.4': [<numba.core.ir.Assign object at 0x000002410C1E7580>],
             '$2load_global.0': [<numba.core.ir.Assign object at 0x000002410C1E1490>],
             '$8call_function.3': [<numba.core.ir.Assign object at 0x000002410C1E72E0>],
             'dtype': [<numba.core.ir.Assign object at 0x000002410C1E1AF0>],
             'tmp0': [<numba.core.ir.Assign object at 0x000002410C1E1880>]})
DEBUG 2022-01-28 15:49:17,628 SSA violators set()
DEBUG 2022-01-28 15:49:17,730 bytecode dump:
>          0	NOP(arg=None, lineno=3)
           2	LOAD_GLOBAL(arg=0, lineno=3)
           4	LOAD_FAST(arg=0, lineno=3)
           6	LOAD_FAST(arg=1, lineno=3)
           8	CALL_FUNCTION(arg=2, lineno=3)
          10	RETURN_VALUE(arg=None, lineno=3)
DEBUG 2022-01-28 15:49:17,730 pending: deque([State(pc_initial=0 nstack_initial=0)])
DEBUG 2022-01-28 15:49:17,730 stack: []
DEBUG 2022-01-28 15:49:17,730 dispatch pc=0, inst=NOP(arg=None, lineno=3)
DEBUG 2022-01-28 15:49:17,730 stack []
DEBUG 2022-01-28 15:49:17,730 dispatch pc=2, inst=LOAD_GLOBAL(arg=0, lineno=3)
DEBUG 2022-01-28 15:49:17,730 stack []
DEBUG 2022-01-28 15:49:17,730 dispatch pc=4, inst=LOAD_FAST(arg=0, lineno=3)
DEBUG 2022-01-28 15:49:17,730 stack ['$2load_global.0']
DEBUG 2022-01-28 15:49:17,730 dispatch pc=6, inst=LOAD_FAST(arg=1, lineno=3)
DEBUG 2022-01-28 15:49:17,730 stack ['$2load_global.0', '$tmp04.1']
DEBUG 2022-01-28 15:49:17,738 dispatch pc=8, inst=CALL_FUNCTION(arg=2, lineno=3)
DEBUG 2022-01-28 15:49:17,738 stack ['$2load_global.0', '$tmp04.1', '$tmp16.2']
DEBUG 2022-01-28 15:49:17,738 dispatch pc=10, inst=RETURN_VALUE(arg=None, lineno=3)
DEBUG 2022-01-28 15:49:17,738 stack ['$8call_function.3']
DEBUG 2022-01-28 15:49:17,738 end state. edges=[]
DEBUG 2022-01-28 15:49:17,738 -------------------------Prune PHIs-------------------------
DEBUG 2022-01-28 15:49:17,738 Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
DEBUG 2022-01-28 15:49:17,738 defmap: {}
DEBUG 2022-01-28 15:49:17,738 phismap: defaultdict(<class 'set'>, {})
DEBUG 2022-01-28 15:49:17,738 changing phismap: defaultdict(<class 'set'>, {})
DEBUG 2022-01-28 15:49:17,738 keep phismap: {}
DEBUG 2022-01-28 15:49:17,738 new_out: defaultdict(<class 'dict'>, {})
DEBUG 2022-01-28 15:49:17,738 ----------------------DONE Prune PHIs-----------------------
DEBUG 2022-01-28 15:49:17,738 block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$2load_global.0'}), (4, {'res': '$tmp04.1'}), (6, {'res': '$tmp16.2'}), (8, {'func': '$2load_global.0', 'args': ['$tmp04.1', '$tmp16.2'], 'res': '$8call_function.3'}), (10, {'retval': '$8call_function.3', 'castval': '$10return_value.4'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG 2022-01-28 15:49:17,740 label 0:
    tmp0 = arg(0, name=tmp0)                 ['tmp0']
    tmp1 = arg(1, name=tmp1)                 ['tmp1']
    $2load_global.0 = global(intrin: <intrinsic stub>) ['$2load_global.0']
    $8call_function.3 = call $2load_global.0(tmp0, tmp1, func=$2load_global.0, args=[Var(tmp0, <string>:3), Var(tmp1, <string>:3)], kws=(), vararg=None, target=None) ['$2load_global.0', '$8call_function.3', 'tmp0', 'tmp1']
    $10return_value.4 = cast(value=$8call_function.3) ['$10return_value.4', '$8call_function.3']
    return $10return_value.4                 ['$10return_value.4']

DEBUG 2022-01-28 15:49:17,740 ==== SSA block analysis pass on 0
DEBUG 2022-01-28 15:49:17,740 Running <numba.core.ssa._GatherDefsHandler object at 0x000002410C274FD0>
DEBUG 2022-01-28 15:49:17,740 on stmt: tmp0 = arg(0, name=tmp0)
DEBUG 2022-01-28 15:49:17,740 on stmt: tmp1 = arg(1, name=tmp1)
DEBUG 2022-01-28 15:49:17,740 on stmt: $2load_global.0 = global(intrin: <intrinsic stub>)
DEBUG 2022-01-28 15:49:17,740 on stmt: $8call_function.3 = call $2load_global.0(tmp0, tmp1, func=$2load_global.0, args=[Var(tmp0, <string>:3), Var(tmp1, <string>:3)], kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:17,740 on stmt: $10return_value.4 = cast(value=$8call_function.3)
DEBUG 2022-01-28 15:49:17,740 on stmt: return $10return_value.4
DEBUG 2022-01-28 15:49:17,740 defs defaultdict(<class 'list'>,
            {'$10return_value.4': [<numba.core.ir.Assign object at 0x000002410C270CA0>],
             '$2load_global.0': [<numba.core.ir.Assign object at 0x000002410C270760>],
             '$8call_function.3': [<numba.core.ir.Assign object at 0x000002410C270B80>],
             'tmp0': [<numba.core.ir.Assign object at 0x000002410C270190>],
             'tmp1': [<numba.core.ir.Assign object at 0x000002410C270070>]})
DEBUG 2022-01-28 15:49:17,740 SSA violators set()
DEBUG 2022-01-28 15:49:17,842 bytecode dump:
>          0	NOP(arg=None, lineno=3)
           2	LOAD_GLOBAL(arg=0, lineno=3)
           4	LOAD_FAST(arg=0, lineno=3)
           6	LOAD_FAST(arg=1, lineno=3)
           8	CALL_FUNCTION(arg=2, lineno=3)
          10	RETURN_VALUE(arg=None, lineno=3)
DEBUG 2022-01-28 15:49:17,842 pending: deque([State(pc_initial=0 nstack_initial=0)])
DEBUG 2022-01-28 15:49:17,842 stack: []
DEBUG 2022-01-28 15:49:17,842 dispatch pc=0, inst=NOP(arg=None, lineno=3)
DEBUG 2022-01-28 15:49:17,842 stack []
DEBUG 2022-01-28 15:49:17,842 dispatch pc=2, inst=LOAD_GLOBAL(arg=0, lineno=3)
DEBUG 2022-01-28 15:49:17,842 stack []
DEBUG 2022-01-28 15:49:17,842 dispatch pc=4, inst=LOAD_FAST(arg=0, lineno=3)
DEBUG 2022-01-28 15:49:17,842 stack ['$2load_global.0']
DEBUG 2022-01-28 15:49:17,842 dispatch pc=6, inst=LOAD_FAST(arg=1, lineno=3)
DEBUG 2022-01-28 15:49:17,842 stack ['$2load_global.0', '$tmp04.1']
DEBUG 2022-01-28 15:49:17,850 dispatch pc=8, inst=CALL_FUNCTION(arg=2, lineno=3)
DEBUG 2022-01-28 15:49:17,850 stack ['$2load_global.0', '$tmp04.1', '$tmp16.2']
DEBUG 2022-01-28 15:49:17,850 dispatch pc=10, inst=RETURN_VALUE(arg=None, lineno=3)
DEBUG 2022-01-28 15:49:17,850 stack ['$8call_function.3']
DEBUG 2022-01-28 15:49:17,850 end state. edges=[]
DEBUG 2022-01-28 15:49:17,850 -------------------------Prune PHIs-------------------------
DEBUG 2022-01-28 15:49:17,850 Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
DEBUG 2022-01-28 15:49:17,850 defmap: {}
DEBUG 2022-01-28 15:49:17,850 phismap: defaultdict(<class 'set'>, {})
DEBUG 2022-01-28 15:49:17,850 changing phismap: defaultdict(<class 'set'>, {})
DEBUG 2022-01-28 15:49:17,850 keep phismap: {}
DEBUG 2022-01-28 15:49:17,850 new_out: defaultdict(<class 'dict'>, {})
DEBUG 2022-01-28 15:49:17,850 ----------------------DONE Prune PHIs-----------------------
DEBUG 2022-01-28 15:49:17,850 block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$2load_global.0'}), (4, {'res': '$tmp04.1'}), (6, {'res': '$tmp16.2'}), (8, {'func': '$2load_global.0', 'args': ['$tmp04.1', '$tmp16.2'], 'res': '$8call_function.3'}), (10, {'retval': '$8call_function.3', 'castval': '$10return_value.4'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG 2022-01-28 15:49:17,852 label 0:
    tmp0 = arg(0, name=tmp0)                 ['tmp0']
    tmp1 = arg(1, name=tmp1)                 ['tmp1']
    $2load_global.0 = global(intrin: <intrinsic stub>) ['$2load_global.0']
    $8call_function.3 = call $2load_global.0(tmp0, tmp1, func=$2load_global.0, args=[Var(tmp0, <string>:3), Var(tmp1, <string>:3)], kws=(), vararg=None, target=None) ['$2load_global.0', '$8call_function.3', 'tmp0', 'tmp1']
    $10return_value.4 = cast(value=$8call_function.3) ['$10return_value.4', '$8call_function.3']
    return $10return_value.4                 ['$10return_value.4']

DEBUG 2022-01-28 15:49:17,852 ==== SSA block analysis pass on 0
DEBUG 2022-01-28 15:49:17,852 Running <numba.core.ssa._GatherDefsHandler object at 0x000002410C247D90>
DEBUG 2022-01-28 15:49:17,852 on stmt: tmp0 = arg(0, name=tmp0)
DEBUG 2022-01-28 15:49:17,852 on stmt: tmp1 = arg(1, name=tmp1)
DEBUG 2022-01-28 15:49:17,852 on stmt: $2load_global.0 = global(intrin: <intrinsic stub>)
DEBUG 2022-01-28 15:49:17,852 on stmt: $8call_function.3 = call $2load_global.0(tmp0, tmp1, func=$2load_global.0, args=[Var(tmp0, <string>:3), Var(tmp1, <string>:3)], kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:17,852 on stmt: $10return_value.4 = cast(value=$8call_function.3)
DEBUG 2022-01-28 15:49:17,852 on stmt: return $10return_value.4
DEBUG 2022-01-28 15:49:17,852 defs defaultdict(<class 'list'>,
            {'$10return_value.4': [<numba.core.ir.Assign object at 0x000002410C252C70>],
             '$2load_global.0': [<numba.core.ir.Assign object at 0x000002410C250C70>],
             '$8call_function.3': [<numba.core.ir.Assign object at 0x000002410C252910>],
             'tmp0': [<numba.core.ir.Assign object at 0x000002410C24BC70>],
             'tmp1': [<numba.core.ir.Assign object at 0x000002410C250880>]})
DEBUG 2022-01-28 15:49:17,852 SSA violators set()
DEBUG 2022-01-28 15:49:18,371 bytecode dump:
>          0	NOP(arg=None, lineno=3)
           2	LOAD_GLOBAL(arg=0, lineno=3)
           4	LOAD_FAST(arg=0, lineno=3)
           6	LOAD_FAST(arg=1, lineno=3)
           8	CALL_FUNCTION(arg=2, lineno=3)
          10	RETURN_VALUE(arg=None, lineno=3)
DEBUG 2022-01-28 15:49:18,371 pending: deque([State(pc_initial=0 nstack_initial=0)])
DEBUG 2022-01-28 15:49:18,371 stack: []
DEBUG 2022-01-28 15:49:18,371 dispatch pc=0, inst=NOP(arg=None, lineno=3)
DEBUG 2022-01-28 15:49:18,371 stack []
DEBUG 2022-01-28 15:49:18,371 dispatch pc=2, inst=LOAD_GLOBAL(arg=0, lineno=3)
DEBUG 2022-01-28 15:49:18,371 stack []
DEBUG 2022-01-28 15:49:18,371 dispatch pc=4, inst=LOAD_FAST(arg=0, lineno=3)
DEBUG 2022-01-28 15:49:18,371 stack ['$2load_global.0']
DEBUG 2022-01-28 15:49:18,371 dispatch pc=6, inst=LOAD_FAST(arg=1, lineno=3)
DEBUG 2022-01-28 15:49:18,371 stack ['$2load_global.0', '$tmp04.1']
DEBUG 2022-01-28 15:49:18,371 dispatch pc=8, inst=CALL_FUNCTION(arg=2, lineno=3)
DEBUG 2022-01-28 15:49:18,371 stack ['$2load_global.0', '$tmp04.1', '$dtype6.2']
DEBUG 2022-01-28 15:49:18,371 dispatch pc=10, inst=RETURN_VALUE(arg=None, lineno=3)
DEBUG 2022-01-28 15:49:18,371 stack ['$8call_function.3']
DEBUG 2022-01-28 15:49:18,371 end state. edges=[]
DEBUG 2022-01-28 15:49:18,371 -------------------------Prune PHIs-------------------------
DEBUG 2022-01-28 15:49:18,371 Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
DEBUG 2022-01-28 15:49:18,371 defmap: {}
DEBUG 2022-01-28 15:49:18,371 phismap: defaultdict(<class 'set'>, {})
DEBUG 2022-01-28 15:49:18,371 changing phismap: defaultdict(<class 'set'>, {})
DEBUG 2022-01-28 15:49:18,371 keep phismap: {}
DEBUG 2022-01-28 15:49:18,371 new_out: defaultdict(<class 'dict'>, {})
DEBUG 2022-01-28 15:49:18,371 ----------------------DONE Prune PHIs-----------------------
DEBUG 2022-01-28 15:49:18,371 block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$2load_global.0'}), (4, {'res': '$tmp04.1'}), (6, {'res': '$dtype6.2'}), (8, {'func': '$2load_global.0', 'args': ['$tmp04.1', '$dtype6.2'], 'res': '$8call_function.3'}), (10, {'retval': '$8call_function.3', 'castval': '$10return_value.4'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG 2022-01-28 15:49:18,371 label 0:
    tmp0 = arg(0, name=tmp0)                 ['tmp0']
    dtype = arg(1, name=dtype)               ['dtype']
    $2load_global.0 = global(intrin: <intrinsic stub>) ['$2load_global.0']
    $8call_function.3 = call $2load_global.0(tmp0, dtype, func=$2load_global.0, args=[Var(tmp0, <string>:3), Var(dtype, <string>:3)], kws=(), vararg=None, target=None) ['$2load_global.0', '$8call_function.3', 'dtype', 'tmp0']
    $10return_value.4 = cast(value=$8call_function.3) ['$10return_value.4', '$8call_function.3']
    return $10return_value.4                 ['$10return_value.4']

DEBUG 2022-01-28 15:49:18,379 ==== SSA block analysis pass on 0
DEBUG 2022-01-28 15:49:18,379 Running <numba.core.ssa._GatherDefsHandler object at 0x000002410C465C10>
DEBUG 2022-01-28 15:49:18,379 on stmt: tmp0 = arg(0, name=tmp0)
DEBUG 2022-01-28 15:49:18,379 on stmt: dtype = arg(1, name=dtype)
DEBUG 2022-01-28 15:49:18,379 on stmt: $2load_global.0 = global(intrin: <intrinsic stub>)
DEBUG 2022-01-28 15:49:18,379 on stmt: $8call_function.3 = call $2load_global.0(tmp0, dtype, func=$2load_global.0, args=[Var(tmp0, <string>:3), Var(dtype, <string>:3)], kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:18,379 on stmt: $10return_value.4 = cast(value=$8call_function.3)
DEBUG 2022-01-28 15:49:18,381 on stmt: return $10return_value.4
DEBUG 2022-01-28 15:49:18,381 defs defaultdict(<class 'list'>,
            {'$10return_value.4': [<numba.core.ir.Assign object at 0x000002410C4C6A90>],
             '$2load_global.0': [<numba.core.ir.Assign object at 0x000002410C4C6550>],
             '$8call_function.3': [<numba.core.ir.Assign object at 0x000002410C4C6970>],
             'dtype': [<numba.core.ir.Assign object at 0x000002410C4654F0>],
             'tmp0': [<numba.core.ir.Assign object at 0x000002410C465310>]})
DEBUG 2022-01-28 15:49:18,381 SSA violators set()
DEBUG 2022-01-28 15:49:18,463 bytecode dump:
>          0	NOP(arg=None, lineno=2)
           2	LOAD_FAST(arg=2, lineno=2)
           4	LOAD_CONST(arg=1, lineno=2)
           6	BINARY_SUBSCR(arg=None, lineno=2)
           8	STORE_FAST(arg=3, lineno=2)
          10	LOAD_GLOBAL(arg=0, lineno=3)
          12	LOAD_FAST(arg=0, lineno=3)
          14	LOAD_CONST(arg=1, lineno=3)
          16	BINARY_SUBSCR(arg=None, lineno=3)
          18	LOAD_FAST(arg=0, lineno=3)
          20	LOAD_CONST(arg=2, lineno=3)
          22	BINARY_SUBSCR(arg=None, lineno=3)
          24	LOAD_GLOBAL(arg=1, lineno=3)
          26	LOAD_METHOD(arg=2, lineno=3)
          28	LOAD_CONST(arg=2, lineno=3)
          30	CALL_METHOD(arg=1, lineno=3)
          32	BINARY_ADD(arg=None, lineno=3)
          34	CALL_FUNCTION(arg=2, lineno=3)
          36	GET_ITER(arg=None, lineno=3)
>         38	FOR_ITER(arg=8, lineno=3)
          40	STORE_FAST(arg=4, lineno=3)
          42	LOAD_CONST(arg=1, lineno=4)
          44	STORE_FAST(arg=5, lineno=4)
          46	JUMP_ABSOLUTE(arg=38, lineno=4)
>         48	LOAD_FAST(arg=3, lineno=5)
          50	LOAD_FAST(arg=2, lineno=5)
          52	LOAD_CONST(arg=1, lineno=5)
          54	STORE_SUBSCR(arg=None, lineno=5)
          56	LOAD_CONST(arg=0, lineno=6)
          58	RETURN_VALUE(arg=None, lineno=6)
DEBUG 2022-01-28 15:49:18,463 pending: deque([State(pc_initial=0 nstack_initial=0)])
DEBUG 2022-01-28 15:49:18,463 stack: []
DEBUG 2022-01-28 15:49:18,463 dispatch pc=0, inst=NOP(arg=None, lineno=2)
DEBUG 2022-01-28 15:49:18,463 stack []
DEBUG 2022-01-28 15:49:18,463 dispatch pc=2, inst=LOAD_FAST(arg=2, lineno=2)
DEBUG 2022-01-28 15:49:18,463 stack []
DEBUG 2022-01-28 15:49:18,463 dispatch pc=4, inst=LOAD_CONST(arg=1, lineno=2)
DEBUG 2022-01-28 15:49:18,463 stack ['$val_40__arr2.0']
DEBUG 2022-01-28 15:49:18,463 dispatch pc=6, inst=BINARY_SUBSCR(arg=None, lineno=2)
DEBUG 2022-01-28 15:49:18,463 stack ['$val_40__arr2.0', '$const4.1']
DEBUG 2022-01-28 15:49:18,463 dispatch pc=8, inst=STORE_FAST(arg=3, lineno=2)
DEBUG 2022-01-28 15:49:18,463 stack ['$6binary_subscr.2']
DEBUG 2022-01-28 15:49:18,463 dispatch pc=10, inst=LOAD_GLOBAL(arg=0, lineno=3)
DEBUG 2022-01-28 15:49:18,463 stack []
DEBUG 2022-01-28 15:49:18,463 dispatch pc=12, inst=LOAD_FAST(arg=0, lineno=3)
DEBUG 2022-01-28 15:49:18,463 stack ['$10load_global.3']
DEBUG 2022-01-28 15:49:18,463 dispatch pc=14, inst=LOAD_CONST(arg=1, lineno=3)
DEBUG 2022-01-28 15:49:18,463 stack ['$10load_global.3', '$sched12.4']
DEBUG 2022-01-28 15:49:18,463 dispatch pc=16, inst=BINARY_SUBSCR(arg=None, lineno=3)
DEBUG 2022-01-28 15:49:18,463 stack ['$10load_global.3', '$sched12.4', '$const14.5']
DEBUG 2022-01-28 15:49:18,463 dispatch pc=18, inst=LOAD_FAST(arg=0, lineno=3)
DEBUG 2022-01-28 15:49:18,463 stack ['$10load_global.3', '$16binary_subscr.6']
DEBUG 2022-01-28 15:49:18,463 dispatch pc=20, inst=LOAD_CONST(arg=2, lineno=3)
DEBUG 2022-01-28 15:49:18,463 stack ['$10load_global.3', '$16binary_subscr.6', '$sched18.7']
DEBUG 2022-01-28 15:49:18,463 dispatch pc=22, inst=BINARY_SUBSCR(arg=None, lineno=3)
DEBUG 2022-01-28 15:49:18,463 stack ['$10load_global.3', '$16binary_subscr.6', '$sched18.7', '$const20.8']
DEBUG 2022-01-28 15:49:18,463 dispatch pc=24, inst=LOAD_GLOBAL(arg=1, lineno=3)
DEBUG 2022-01-28 15:49:18,463 stack ['$10load_global.3', '$16binary_subscr.6', '$22binary_subscr.9']
DEBUG 2022-01-28 15:49:18,463 dispatch pc=26, inst=LOAD_METHOD(arg=2, lineno=3)
DEBUG 2022-01-28 15:49:18,463 stack ['$10load_global.3', '$16binary_subscr.6', '$22binary_subscr.9', '$24load_global.10']
DEBUG 2022-01-28 15:49:18,463 dispatch pc=28, inst=LOAD_CONST(arg=2, lineno=3)
DEBUG 2022-01-28 15:49:18,463 stack ['$10load_global.3', '$16binary_subscr.6', '$22binary_subscr.9', '$26load_method.11']
DEBUG 2022-01-28 15:49:18,463 dispatch pc=30, inst=CALL_METHOD(arg=1, lineno=3)
DEBUG 2022-01-28 15:49:18,463 stack ['$10load_global.3', '$16binary_subscr.6', '$22binary_subscr.9', '$26load_method.11', '$const28.12']
DEBUG 2022-01-28 15:49:18,463 dispatch pc=32, inst=BINARY_ADD(arg=None, lineno=3)
DEBUG 2022-01-28 15:49:18,463 stack ['$10load_global.3', '$16binary_subscr.6', '$22binary_subscr.9', '$30call_method.13']
DEBUG 2022-01-28 15:49:18,463 dispatch pc=34, inst=CALL_FUNCTION(arg=2, lineno=3)
DEBUG 2022-01-28 15:49:18,463 stack ['$10load_global.3', '$16binary_subscr.6', '$32binary_add.14']
DEBUG 2022-01-28 15:49:18,463 dispatch pc=36, inst=GET_ITER(arg=None, lineno=3)
DEBUG 2022-01-28 15:49:18,463 stack ['$34call_function.15']
DEBUG 2022-01-28 15:49:18,463 end state. edges=[Edge(pc=38, stack=('$36get_iter.16',), blockstack=(), npush=0)]
DEBUG 2022-01-28 15:49:18,463 pending: deque([State(pc_initial=38 nstack_initial=1)])
DEBUG 2022-01-28 15:49:18,463 stack: ['$phi38.0']
DEBUG 2022-01-28 15:49:18,463 dispatch pc=38, inst=FOR_ITER(arg=8, lineno=3)
DEBUG 2022-01-28 15:49:18,463 stack ['$phi38.0']
DEBUG 2022-01-28 15:49:18,463 end state. edges=[Edge(pc=48, stack=(), blockstack=(), npush=0), Edge(pc=40, stack=('$phi38.0', '$38for_iter.2'), blockstack=(), npush=0)]
DEBUG 2022-01-28 15:49:18,463 pending: deque([State(pc_initial=48 nstack_initial=0), State(pc_initial=40 nstack_initial=2)])
DEBUG 2022-01-28 15:49:18,463 stack: []
DEBUG 2022-01-28 15:49:18,463 dispatch pc=48, inst=LOAD_FAST(arg=3, lineno=5)
DEBUG 2022-01-28 15:49:18,463 stack []
DEBUG 2022-01-28 15:49:18,463 dispatch pc=50, inst=LOAD_FAST(arg=2, lineno=5)
DEBUG 2022-01-28 15:49:18,463 stack ['$val_4048.0']
DEBUG 2022-01-28 15:49:18,463 dispatch pc=52, inst=LOAD_CONST(arg=1, lineno=5)
DEBUG 2022-01-28 15:49:18,463 stack ['$val_4048.0', '$val_40__arr50.1']
DEBUG 2022-01-28 15:49:18,463 dispatch pc=54, inst=STORE_SUBSCR(arg=None, lineno=5)
DEBUG 2022-01-28 15:49:18,463 stack ['$val_4048.0', '$val_40__arr50.1', '$const52.2']
DEBUG 2022-01-28 15:49:18,463 dispatch pc=56, inst=LOAD_CONST(arg=0, lineno=6)
DEBUG 2022-01-28 15:49:18,463 stack []
DEBUG 2022-01-28 15:49:18,463 dispatch pc=58, inst=RETURN_VALUE(arg=None, lineno=6)
DEBUG 2022-01-28 15:49:18,463 stack ['$const56.3']
DEBUG 2022-01-28 15:49:18,463 end state. edges=[]
DEBUG 2022-01-28 15:49:18,463 pending: deque([State(pc_initial=40 nstack_initial=2)])
DEBUG 2022-01-28 15:49:18,463 stack: ['$phi40.0', '$phi40.1']
DEBUG 2022-01-28 15:49:18,463 dispatch pc=40, inst=STORE_FAST(arg=4, lineno=3)
DEBUG 2022-01-28 15:49:18,463 stack ['$phi40.0', '$phi40.1']
DEBUG 2022-01-28 15:49:18,463 dispatch pc=42, inst=LOAD_CONST(arg=1, lineno=4)
DEBUG 2022-01-28 15:49:18,471 stack ['$phi40.0']
DEBUG 2022-01-28 15:49:18,471 dispatch pc=44, inst=STORE_FAST(arg=5, lineno=4)
DEBUG 2022-01-28 15:49:18,471 stack ['$phi40.0', '$const42.2']
DEBUG 2022-01-28 15:49:18,471 dispatch pc=46, inst=JUMP_ABSOLUTE(arg=38, lineno=4)
DEBUG 2022-01-28 15:49:18,471 stack ['$phi40.0']
DEBUG 2022-01-28 15:49:18,471 end state. edges=[Edge(pc=38, stack=('$phi40.0',), blockstack=(), npush=0)]
DEBUG 2022-01-28 15:49:18,471 pending: deque([State(pc_initial=38 nstack_initial=1)])
DEBUG 2022-01-28 15:49:18,471 -------------------------Prune PHIs-------------------------
DEBUG 2022-01-28 15:49:18,471 Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=38 nstack_initial=1): {'$phi38.0'},
             State(pc_initial=40 nstack_initial=2): {'$phi40.1'},
             State(pc_initial=48 nstack_initial=0): set()})
DEBUG 2022-01-28 15:49:18,471 defmap: {'$phi38.0': State(pc_initial=0 nstack_initial=0),
 '$phi40.1': State(pc_initial=38 nstack_initial=1)}
DEBUG 2022-01-28 15:49:18,471 phismap: defaultdict(<class 'set'>,
            {'$phi38.0': {('$36get_iter.16',
                           State(pc_initial=0 nstack_initial=0)),
                          ('$phi40.0', State(pc_initial=40 nstack_initial=2))},
             '$phi40.0': {('$phi38.0', State(pc_initial=38 nstack_initial=1))},
             '$phi40.1': {('$38for_iter.2',
                           State(pc_initial=38 nstack_initial=1))}})
DEBUG 2022-01-28 15:49:18,471 changing phismap: defaultdict(<class 'set'>,
            {'$phi38.0': {('$36get_iter.16',
                           State(pc_initial=0 nstack_initial=0)),
                          ('$phi38.0', State(pc_initial=38 nstack_initial=1))},
             '$phi40.0': {('$36get_iter.16',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi40.1': {('$38for_iter.2',
                           State(pc_initial=38 nstack_initial=1))}})
DEBUG 2022-01-28 15:49:18,471 changing phismap: defaultdict(<class 'set'>,
            {'$phi38.0': {('$36get_iter.16',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi40.0': {('$36get_iter.16',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi40.1': {('$38for_iter.2',
                           State(pc_initial=38 nstack_initial=1))}})
DEBUG 2022-01-28 15:49:18,473 changing phismap: defaultdict(<class 'set'>,
            {'$phi38.0': {('$36get_iter.16',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi40.0': {('$36get_iter.16',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi40.1': {('$38for_iter.2',
                           State(pc_initial=38 nstack_initial=1))}})
DEBUG 2022-01-28 15:49:18,473 keep phismap: {'$phi38.0': {('$36get_iter.16', State(pc_initial=0 nstack_initial=0))},
 '$phi40.1': {('$38for_iter.2', State(pc_initial=38 nstack_initial=1))}}
DEBUG 2022-01-28 15:49:18,473 new_out: defaultdict(<class 'dict'>,
            {State(pc_initial=0 nstack_initial=0): {'$phi38.0': '$36get_iter.16'},
             State(pc_initial=38 nstack_initial=1): {'$phi40.1': '$38for_iter.2'}})
DEBUG 2022-01-28 15:49:18,473 ----------------------DONE Prune PHIs-----------------------
DEBUG 2022-01-28 15:49:18,473 block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$val_40__arr2.0'}), (4, {'res': '$const4.1'}), (6, {'index': '$const4.1', 'target': '$val_40__arr2.0', 'res': '$6binary_subscr.2'}), (8, {'value': '$6binary_subscr.2'}), (10, {'res': '$10load_global.3'}), (12, {'res': '$sched12.4'}), (14, {'res': '$const14.5'}), (16, {'index': '$const14.5', 'target': '$sched12.4', 'res': '$16binary_subscr.6'}), (18, {'res': '$sched18.7'}), (20, {'res': '$const20.8'}), (22, {'index': '$const20.8', 'target': '$sched18.7', 'res': '$22binary_subscr.9'}), (24, {'res': '$24load_global.10'}), (26, {'item': '$24load_global.10', 'res': '$26load_method.11'}), (28, {'res': '$const28.12'}), (30, {'func': '$26load_method.11', 'args': ['$const28.12'], 'res': '$30call_method.13'}), (32, {'lhs': '$22binary_subscr.9', 'rhs': '$30call_method.13', 'res': '$32binary_add.14'}), (34, {'func': '$10load_global.3', 'args': ['$16binary_subscr.6', '$32binary_add.14'], 'res': '$34call_function.15'}), (36, {'value': '$34call_function.15', 'res': '$36get_iter.16'})), outgoing_phis={'$phi38.0': '$36get_iter.16'}, blockstack=(), active_try_block=None, outgoing_edgepushed={38: ('$36get_iter.16',)})
DEBUG 2022-01-28 15:49:18,473 block_infos State(pc_initial=38 nstack_initial=1):
AdaptBlockInfo(insts=((38, {'iterator': '$phi38.0', 'pair': '$38for_iter.1', 'indval': '$38for_iter.2', 'pred': '$38for_iter.3'}),), outgoing_phis={'$phi40.1': '$38for_iter.2'}, blockstack=(), active_try_block=None, outgoing_edgepushed={48: (), 40: ('$phi38.0', '$38for_iter.2')})
DEBUG 2022-01-28 15:49:18,473 block_infos State(pc_initial=40 nstack_initial=2):
AdaptBlockInfo(insts=((40, {'value': '$phi40.1'}), (42, {'res': '$const42.2'}), (44, {'value': '$const42.2'}), (46, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={38: ('$phi40.0',)})
DEBUG 2022-01-28 15:49:18,473 block_infos State(pc_initial=48 nstack_initial=0):
AdaptBlockInfo(insts=((48, {'res': '$val_4048.0'}), (50, {'res': '$val_40__arr50.1'}), (52, {'res': '$const52.2'}), (54, {'target': '$val_40__arr50.1', 'index': '$const52.2', 'value': '$val_4048.0'}), (56, {'res': '$const56.3'}), (58, {'retval': '$const56.3', 'castval': '$58return_value.4'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG 2022-01-28 15:49:18,473 label 0:
    sched = arg(0, name=sched)               ['sched']
    fixed__edge__reps = arg(1, name=fixed__edge__reps) ['fixed__edge__reps']
    val_40__arr = arg(2, name=val_40__arr)   ['val_40__arr']
    $const4.1 = const(int, 0)                ['$const4.1']
    val_40 = getitem(value=val_40__arr, index=$const4.1, fn=<built-in function getitem>) ['$const4.1', 'val_40', 'val_40__arr']
    $10load_global.3 = global(range: <class 'range'>) ['$10load_global.3']
    $const14.5 = const(int, 0)               ['$const14.5']
    $16binary_subscr.6 = getitem(value=sched, index=$const14.5, fn=<built-in function getitem>) ['$16binary_subscr.6', '$const14.5', 'sched']
    $const20.8 = const(int, 1)               ['$const20.8']
    $22binary_subscr.9 = getitem(value=sched, index=$const20.8, fn=<built-in function getitem>) ['$22binary_subscr.9', '$const20.8', 'sched']
    $24load_global.10 = global(np: <module 'numpy' from 'C:\\Users\\zl4821\\Anaconda3\\envs\\GBS\\lib\\site-packages\\numpy\\__init__.py'>) ['$24load_global.10']
    $26load_method.11 = getattr(value=$24load_global.10, attr=uint8) ['$24load_global.10', '$26load_method.11']
    $const28.12 = const(int, 1)              ['$const28.12']
    $30call_method.13 = call $26load_method.11($const28.12, func=$26load_method.11, args=[Var($const28.12, <string>:3)], kws=(), vararg=None, target=None) ['$26load_method.11', '$30call_method.13', '$const28.12']
    $32binary_add.14 = $22binary_subscr.9 + $30call_method.13 ['$22binary_subscr.9', '$30call_method.13', '$32binary_add.14']
    $34call_function.15 = call $10load_global.3($16binary_subscr.6, $32binary_add.14, func=$10load_global.3, args=[Var($16binary_subscr.6, <string>:3), Var($32binary_add.14, <string>:3)], kws=(), vararg=None, target=None) ['$10load_global.3', '$16binary_subscr.6', '$32binary_add.14', '$34call_function.15']
    $36get_iter.16 = getiter(value=$34call_function.15) ['$34call_function.15', '$36get_iter.16']
    $phi38.0 = $36get_iter.16                ['$36get_iter.16', '$phi38.0']
    jump 38                                  []
label 38:
    $38for_iter.1 = iternext(value=$phi38.0) ['$38for_iter.1', '$phi38.0']
    $38for_iter.2 = pair_first(value=$38for_iter.1) ['$38for_iter.1', '$38for_iter.2']
    $38for_iter.3 = pair_second(value=$38for_iter.1) ['$38for_iter.1', '$38for_iter.3']
    $phi40.1 = $38for_iter.2                 ['$38for_iter.2', '$phi40.1']
    branch $38for_iter.3, 40, 48             ['$38for_iter.3']
label 40:
    parfor__index_224 = $phi40.1             ['$phi40.1', 'parfor__index_224']
    __sentinel__0 = const(int, 0)            ['__sentinel__0']
    jump 38                                  []
label 48:
    $const52.2 = const(int, 0)               ['$const52.2']
    val_40__arr[$const52.2] = val_40         ['$const52.2', 'val_40', 'val_40__arr']
    $const56.3 = const(NoneType, None)       ['$const56.3']
    $58return_value.4 = cast(value=$const56.3) ['$58return_value.4', '$const56.3']
    return $58return_value.4                 ['$58return_value.4']

DEBUG 2022-01-28 15:49:18,473 ==== SSA block analysis pass on 0
DEBUG 2022-01-28 15:49:18,473 Running <numba.core.ssa._GatherDefsHandler object at 0x000002410C557DF0>
DEBUG 2022-01-28 15:49:18,473 on stmt: sched.645 = arg(0, name=sched)
DEBUG 2022-01-28 15:49:18,473 on stmt: fixed__edge__reps = arg(1, name=fixed__edge__reps)
DEBUG 2022-01-28 15:49:18,473 on stmt: val_40__arr = arg(2, name=val_40__arr)
DEBUG 2022-01-28 15:49:18,481 on stmt: $const4.1.646 = const(int, 0)
DEBUG 2022-01-28 15:49:18,481 on stmt: val_40 = getitem(value=val_40__arr, index=$const4.1.646, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:18,481 on stmt: $10load_global.3.647 = global(range: <class 'range'>)
DEBUG 2022-01-28 15:49:18,481 on stmt: $const14.5.648 = const(int, 0)
DEBUG 2022-01-28 15:49:18,481 on stmt: $16binary_subscr.6.649 = getitem(value=sched.645, index=$const14.5.648, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:18,481 on stmt: $const20.8.650 = const(int, 1)
DEBUG 2022-01-28 15:49:18,481 on stmt: $22binary_subscr.9.651 = getitem(value=sched.645, index=$const20.8.650, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:18,481 on stmt: $24load_global.10.652 = global(np: <module 'numpy' from 'C:\\Users\\zl4821\\Anaconda3\\envs\\GBS\\lib\\site-packages\\numpy\\__init__.py'>)
DEBUG 2022-01-28 15:49:18,481 on stmt: $26load_method.11.653 = getattr(value=$24load_global.10.652, attr=uint8)
DEBUG 2022-01-28 15:49:18,481 on stmt: $const28.12.654 = const(int, 1)
DEBUG 2022-01-28 15:49:18,481 on stmt: $30call_method.13.655 = call $26load_method.11.653($const28.12.654, func=$26load_method.11.653, args=[Var($const28.12.654, <string>:3)], kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:18,481 on stmt: $32binary_add.14.656 = $22binary_subscr.9.651 + $30call_method.13.655
DEBUG 2022-01-28 15:49:18,481 on stmt: $34call_function.15.657 = call $10load_global.3.647($16binary_subscr.6.649, $32binary_add.14.656, func=$10load_global.3.647, args=[Var($16binary_subscr.6.649, <string>:3), Var($32binary_add.14.656, <string>:3)], kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:18,481 on stmt: $36get_iter.16.658 = getiter(value=$34call_function.15.657)
DEBUG 2022-01-28 15:49:18,481 on stmt: $phi38.0.659 = $36get_iter.16.658
DEBUG 2022-01-28 15:49:18,481 on stmt: jump 38
DEBUG 2022-01-28 15:49:18,481 ==== SSA block analysis pass on 38
DEBUG 2022-01-28 15:49:18,481 Running <numba.core.ssa._GatherDefsHandler object at 0x000002410C557DF0>
DEBUG 2022-01-28 15:49:18,481 on stmt: $38for_iter.1.660 = iternext(value=$phi38.0.659)
DEBUG 2022-01-28 15:49:18,483 on stmt: $38for_iter.2.661 = pair_first(value=$38for_iter.1.660)
DEBUG 2022-01-28 15:49:18,483 on stmt: $38for_iter.3.662 = pair_second(value=$38for_iter.1.660)
DEBUG 2022-01-28 15:49:18,483 on stmt: $phi40.1.663 = $38for_iter.2.661
DEBUG 2022-01-28 15:49:18,483 on stmt: branch $38for_iter.3.662, 40, 212
DEBUG 2022-01-28 15:49:18,483 ==== SSA block analysis pass on 40
DEBUG 2022-01-28 15:49:18,483 Running <numba.core.ssa._GatherDefsHandler object at 0x000002410C557DF0>
DEBUG 2022-01-28 15:49:18,483 on stmt: parfor__index_224 = $phi40.1.663
DEBUG 2022-01-28 15:49:18,483 on stmt: jump 48
DEBUG 2022-01-28 15:49:18,483 ==== SSA block analysis pass on 212
DEBUG 2022-01-28 15:49:18,483 Running <numba.core.ssa._GatherDefsHandler object at 0x000002410C557DF0>
DEBUG 2022-01-28 15:49:18,483 on stmt: $const52.2.664 = const(int, 0)
DEBUG 2022-01-28 15:49:18,483 on stmt: val_40__arr[$const52.2.664] = val_40
DEBUG 2022-01-28 15:49:18,483 on stmt: $const56.3.665 = const(NoneType, None)
DEBUG 2022-01-28 15:49:18,483 on stmt: $58return_value.4.666 = cast(value=$const56.3.665)
DEBUG 2022-01-28 15:49:18,483 on stmt: return $58return_value.4.666
DEBUG 2022-01-28 15:49:18,483 ==== SSA block analysis pass on 48
DEBUG 2022-01-28 15:49:18,483 Running <numba.core.ssa._GatherDefsHandler object at 0x000002410C557DF0>
DEBUG 2022-01-28 15:49:18,483 on stmt: $46binary_subscr.5.59 = getitem(value=fixed__edge__reps, index=parfor__index_224, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:18,483 on stmt: $val.40.598 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=val_40, rhs=$46binary_subscr.5.59, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-01-28 15:49:18,483 on stmt: val_40 = $val.40.598
DEBUG 2022-01-28 15:49:18,483 on stmt: jump 211
DEBUG 2022-01-28 15:49:18,483 ==== SSA block analysis pass on 211
DEBUG 2022-01-28 15:49:18,483 Running <numba.core.ssa._GatherDefsHandler object at 0x000002410C557DF0>
DEBUG 2022-01-28 15:49:18,483 on stmt: jump 38
DEBUG 2022-01-28 15:49:18,483 defs defaultdict(<class 'list'>,
            {'$10load_global.3.647': [<numba.core.ir.Assign object at 0x000002410C55FBE0>],
             '$16binary_subscr.6.649': [<numba.core.ir.Assign object at 0x000002410C55D070>],
             '$22binary_subscr.9.651': [<numba.core.ir.Assign object at 0x000002410C55D490>],
             '$24load_global.10.652': [<numba.core.ir.Assign object at 0x000002410C55D5E0>],
             '$26load_method.11.653': [<numba.core.ir.Assign object at 0x000002410C55D760>],
             '$30call_method.13.655': [<numba.core.ir.Assign object at 0x000002410C55DAF0>],
             '$32binary_add.14.656': [<numba.core.ir.Assign object at 0x000002410C55DC10>],
             '$34call_function.15.657': [<numba.core.ir.Assign object at 0x000002410C55DDC0>],
             '$36get_iter.16.658': [<numba.core.ir.Assign object at 0x000002410C55DEE0>],
             '$38for_iter.1.660': [<numba.core.ir.Assign object at 0x000002410C559130>],
             '$38for_iter.2.661': [<numba.core.ir.Assign object at 0x000002410C559250>],
             '$38for_iter.3.662': [<numba.core.ir.Assign object at 0x000002410C559370>],
             '$46binary_subscr.5.59': [<numba.core.ir.Assign object at 0x000002410B143910>],
             '$58return_value.4.666': [<numba.core.ir.Assign object at 0x000002410C5241C0>],
             '$const14.5.648': [<numba.core.ir.Assign object at 0x000002410C55FE80>],
             '$const20.8.650': [<numba.core.ir.Assign object at 0x000002410C55D2E0>],
             '$const28.12.654': [<numba.core.ir.Assign object at 0x000002410C55D8E0>],
             '$const4.1.646': [<numba.core.ir.Assign object at 0x000002410C55F7C0>],
             '$const52.2.664': [<numba.core.ir.Assign object at 0x000002410C559DC0>],
             '$const56.3.665': [<numba.core.ir.Assign object at 0x000002410C524040>],
             '$phi38.0.659': [<numba.core.ir.Assign object at 0x000002410C55F6D0>],
             '$phi40.1.663': [<numba.core.ir.Assign object at 0x000002410C559070>],
             '$val.40.598': [<numba.core.ir.Assign object at 0x000002410B143A90>],
             'fixed__edge__reps': [<numba.core.ir.Assign object at 0x000002410C55F400>],
             'parfor__index_224': [<numba.core.ir.Assign object at 0x000002410C559640>],
             'sched.645': [<numba.core.ir.Assign object at 0x000002410C55F2E0>],
             'val_40': [<numba.core.ir.Assign object at 0x000002410C55F970>,
                        <numba.core.ir.Assign object at 0x000002410B143B50>],
             'val_40__arr': [<numba.core.ir.Assign object at 0x000002410C55F520>]})
DEBUG 2022-01-28 15:49:18,483 SSA violators {'val_40'}
DEBUG 2022-01-28 15:49:18,483 Fix SSA violator on var val_40
DEBUG 2022-01-28 15:49:18,483 ==== SSA block rewrite pass on 0
DEBUG 2022-01-28 15:49:18,483 Running <numba.core.ssa._FreshVarHandler object at 0x000002410C557FA0>
DEBUG 2022-01-28 15:49:18,483 on stmt: sched.645 = arg(0, name=sched)
DEBUG 2022-01-28 15:49:18,483 on stmt: fixed__edge__reps = arg(1, name=fixed__edge__reps)
DEBUG 2022-01-28 15:49:18,483 on stmt: val_40__arr = arg(2, name=val_40__arr)
DEBUG 2022-01-28 15:49:18,483 on stmt: $const4.1.646 = const(int, 0)
DEBUG 2022-01-28 15:49:18,483 on stmt: val_40 = getitem(value=val_40__arr, index=$const4.1.646, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:18,483 first assign: val_40
DEBUG 2022-01-28 15:49:18,483 replaced with: val_40 = getitem(value=val_40__arr, index=$const4.1.646, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:18,483 on stmt: $10load_global.3.647 = global(range: <class 'range'>)
DEBUG 2022-01-28 15:49:18,483 on stmt: $const14.5.648 = const(int, 0)
DEBUG 2022-01-28 15:49:18,483 on stmt: $16binary_subscr.6.649 = getitem(value=sched.645, index=$const14.5.648, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:18,483 on stmt: $const20.8.650 = const(int, 1)
DEBUG 2022-01-28 15:49:18,483 on stmt: $22binary_subscr.9.651 = getitem(value=sched.645, index=$const20.8.650, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:18,483 on stmt: $24load_global.10.652 = global(np: <module 'numpy' from 'C:\\Users\\zl4821\\Anaconda3\\envs\\GBS\\lib\\site-packages\\numpy\\__init__.py'>)
DEBUG 2022-01-28 15:49:18,483 on stmt: $26load_method.11.653 = getattr(value=$24load_global.10.652, attr=uint8)
DEBUG 2022-01-28 15:49:18,483 on stmt: $const28.12.654 = const(int, 1)
DEBUG 2022-01-28 15:49:18,483 on stmt: $30call_method.13.655 = call $26load_method.11.653($const28.12.654, func=$26load_method.11.653, args=[Var($const28.12.654, <string>:3)], kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:18,483 on stmt: $32binary_add.14.656 = $22binary_subscr.9.651 + $30call_method.13.655
DEBUG 2022-01-28 15:49:18,483 on stmt: $34call_function.15.657 = call $10load_global.3.647($16binary_subscr.6.649, $32binary_add.14.656, func=$10load_global.3.647, args=[Var($16binary_subscr.6.649, <string>:3), Var($32binary_add.14.656, <string>:3)], kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:18,483 on stmt: $36get_iter.16.658 = getiter(value=$34call_function.15.657)
DEBUG 2022-01-28 15:49:18,483 on stmt: $phi38.0.659 = $36get_iter.16.658
DEBUG 2022-01-28 15:49:18,483 on stmt: jump 38
DEBUG 2022-01-28 15:49:18,483 ==== SSA block rewrite pass on 38
DEBUG 2022-01-28 15:49:18,483 Running <numba.core.ssa._FreshVarHandler object at 0x000002410C557FA0>
DEBUG 2022-01-28 15:49:18,483 on stmt: $38for_iter.1.660 = iternext(value=$phi38.0.659)
DEBUG 2022-01-28 15:49:18,483 on stmt: $38for_iter.2.661 = pair_first(value=$38for_iter.1.660)
DEBUG 2022-01-28 15:49:18,483 on stmt: $38for_iter.3.662 = pair_second(value=$38for_iter.1.660)
DEBUG 2022-01-28 15:49:18,483 on stmt: $phi40.1.663 = $38for_iter.2.661
DEBUG 2022-01-28 15:49:18,483 on stmt: branch $38for_iter.3.662, 40, 212
DEBUG 2022-01-28 15:49:18,483 ==== SSA block rewrite pass on 40
DEBUG 2022-01-28 15:49:18,483 Running <numba.core.ssa._FreshVarHandler object at 0x000002410C557FA0>
DEBUG 2022-01-28 15:49:18,483 on stmt: parfor__index_224 = $phi40.1.663
DEBUG 2022-01-28 15:49:18,483 on stmt: jump 48
DEBUG 2022-01-28 15:49:18,483 ==== SSA block rewrite pass on 212
DEBUG 2022-01-28 15:49:18,483 Running <numba.core.ssa._FreshVarHandler object at 0x000002410C557FA0>
DEBUG 2022-01-28 15:49:18,483 on stmt: $const52.2.664 = const(int, 0)
DEBUG 2022-01-28 15:49:18,483 on stmt: val_40__arr[$const52.2.664] = val_40
DEBUG 2022-01-28 15:49:18,483 on stmt: $const56.3.665 = const(NoneType, None)
DEBUG 2022-01-28 15:49:18,483 on stmt: $58return_value.4.666 = cast(value=$const56.3.665)
DEBUG 2022-01-28 15:49:18,483 on stmt: return $58return_value.4.666
DEBUG 2022-01-28 15:49:18,483 ==== SSA block rewrite pass on 48
DEBUG 2022-01-28 15:49:18,483 Running <numba.core.ssa._FreshVarHandler object at 0x000002410C557FA0>
DEBUG 2022-01-28 15:49:18,483 on stmt: $46binary_subscr.5.59 = getitem(value=fixed__edge__reps, index=parfor__index_224, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:18,483 on stmt: $val.40.598 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=val_40, rhs=$46binary_subscr.5.59, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-01-28 15:49:18,483 on stmt: val_40 = $val.40.598
DEBUG 2022-01-28 15:49:18,483 replaced with: val_40.1 = $val.40.598
DEBUG 2022-01-28 15:49:18,483 on stmt: jump 211
DEBUG 2022-01-28 15:49:18,483 ==== SSA block rewrite pass on 211
DEBUG 2022-01-28 15:49:18,483 Running <numba.core.ssa._FreshVarHandler object at 0x000002410C557FA0>
DEBUG 2022-01-28 15:49:18,483 on stmt: jump 38
DEBUG 2022-01-28 15:49:18,483 Replaced assignments: defaultdict(<class 'list'>,
            {0: [<numba.core.ir.Assign object at 0x000002410C557D60>],
             48: [<numba.core.ir.Assign object at 0x000002410C557A90>]})
DEBUG 2022-01-28 15:49:18,483 ==== SSA block rewrite pass on 0
DEBUG 2022-01-28 15:49:18,483 Running <numba.core.ssa._FixSSAVars object at 0x000002410C557FA0>
DEBUG 2022-01-28 15:49:18,483 on stmt: sched.645 = arg(0, name=sched)
DEBUG 2022-01-28 15:49:18,491 on stmt: fixed__edge__reps = arg(1, name=fixed__edge__reps)
DEBUG 2022-01-28 15:49:18,491 on stmt: val_40__arr = arg(2, name=val_40__arr)
DEBUG 2022-01-28 15:49:18,491 on stmt: $const4.1.646 = const(int, 0)
DEBUG 2022-01-28 15:49:18,491 on stmt: val_40 = getitem(value=val_40__arr, index=$const4.1.646, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:18,491 on stmt: $10load_global.3.647 = global(range: <class 'range'>)
DEBUG 2022-01-28 15:49:18,491 on stmt: $const14.5.648 = const(int, 0)
DEBUG 2022-01-28 15:49:18,491 on stmt: $16binary_subscr.6.649 = getitem(value=sched.645, index=$const14.5.648, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:18,491 on stmt: $const20.8.650 = const(int, 1)
DEBUG 2022-01-28 15:49:18,491 on stmt: $22binary_subscr.9.651 = getitem(value=sched.645, index=$const20.8.650, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:18,491 on stmt: $24load_global.10.652 = global(np: <module 'numpy' from 'C:\\Users\\zl4821\\Anaconda3\\envs\\GBS\\lib\\site-packages\\numpy\\__init__.py'>)
DEBUG 2022-01-28 15:49:18,491 on stmt: $26load_method.11.653 = getattr(value=$24load_global.10.652, attr=uint8)
DEBUG 2022-01-28 15:49:18,491 on stmt: $const28.12.654 = const(int, 1)
DEBUG 2022-01-28 15:49:18,491 on stmt: $30call_method.13.655 = call $26load_method.11.653($const28.12.654, func=$26load_method.11.653, args=[Var($const28.12.654, <string>:3)], kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:18,491 on stmt: $32binary_add.14.656 = $22binary_subscr.9.651 + $30call_method.13.655
DEBUG 2022-01-28 15:49:18,491 on stmt: $34call_function.15.657 = call $10load_global.3.647($16binary_subscr.6.649, $32binary_add.14.656, func=$10load_global.3.647, args=[Var($16binary_subscr.6.649, <string>:3), Var($32binary_add.14.656, <string>:3)], kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:18,491 on stmt: $36get_iter.16.658 = getiter(value=$34call_function.15.657)
DEBUG 2022-01-28 15:49:18,491 on stmt: $phi38.0.659 = $36get_iter.16.658
DEBUG 2022-01-28 15:49:18,491 on stmt: jump 38
DEBUG 2022-01-28 15:49:18,493 ==== SSA block rewrite pass on 38
DEBUG 2022-01-28 15:49:18,493 Running <numba.core.ssa._FixSSAVars object at 0x000002410C557FA0>
DEBUG 2022-01-28 15:49:18,493 on stmt: $38for_iter.1.660 = iternext(value=$phi38.0.659)
DEBUG 2022-01-28 15:49:18,493 on stmt: $38for_iter.2.661 = pair_first(value=$38for_iter.1.660)
DEBUG 2022-01-28 15:49:18,493 on stmt: $38for_iter.3.662 = pair_second(value=$38for_iter.1.660)
DEBUG 2022-01-28 15:49:18,493 on stmt: $phi40.1.663 = $38for_iter.2.661
DEBUG 2022-01-28 15:49:18,493 on stmt: branch $38for_iter.3.662, 40, 212
DEBUG 2022-01-28 15:49:18,493 ==== SSA block rewrite pass on 40
DEBUG 2022-01-28 15:49:18,493 Running <numba.core.ssa._FixSSAVars object at 0x000002410C557FA0>
DEBUG 2022-01-28 15:49:18,493 on stmt: parfor__index_224 = $phi40.1.663
DEBUG 2022-01-28 15:49:18,493 on stmt: jump 48
DEBUG 2022-01-28 15:49:18,493 ==== SSA block rewrite pass on 212
DEBUG 2022-01-28 15:49:18,493 Running <numba.core.ssa._FixSSAVars object at 0x000002410C557FA0>
DEBUG 2022-01-28 15:49:18,493 on stmt: $const52.2.664 = const(int, 0)
DEBUG 2022-01-28 15:49:18,493 on stmt: val_40__arr[$const52.2.664] = val_40
DEBUG 2022-01-28 15:49:18,493 find_def var='val_40' stmt=val_40__arr[$const52.2.664] = val_40
DEBUG 2022-01-28 15:49:18,493 find_def_from_top label 212
DEBUG 2022-01-28 15:49:18,493 idom 38 from label 212
DEBUG 2022-01-28 15:49:18,493 find_def_from_bottom label 38
DEBUG 2022-01-28 15:49:18,493 find_def_from_top label 38
DEBUG 2022-01-28 15:49:18,493 insert phi node val_40.2 = phi(incoming_values=[], incoming_blocks=[]) at 38
DEBUG 2022-01-28 15:49:18,493 find_def_from_bottom label 0
DEBUG 2022-01-28 15:49:18,493 incoming_def val_40 = getitem(value=val_40__arr, index=$const4.1.646, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:18,493 find_def_from_bottom label 211
DEBUG 2022-01-28 15:49:18,493 find_def_from_top label 211
DEBUG 2022-01-28 15:49:18,493 idom 48 from label 211
DEBUG 2022-01-28 15:49:18,493 find_def_from_bottom label 48
DEBUG 2022-01-28 15:49:18,493 incoming_def val_40.1 = $val.40.598
DEBUG 2022-01-28 15:49:18,493 replaced with: val_40__arr[$const52.2.664] = val_40.2
DEBUG 2022-01-28 15:49:18,493 on stmt: $const56.3.665 = const(NoneType, None)
DEBUG 2022-01-28 15:49:18,493 on stmt: $58return_value.4.666 = cast(value=$const56.3.665)
DEBUG 2022-01-28 15:49:18,493 on stmt: return $58return_value.4.666
DEBUG 2022-01-28 15:49:18,493 ==== SSA block rewrite pass on 48
DEBUG 2022-01-28 15:49:18,493 Running <numba.core.ssa._FixSSAVars object at 0x000002410C557FA0>
DEBUG 2022-01-28 15:49:18,493 on stmt: $46binary_subscr.5.59 = getitem(value=fixed__edge__reps, index=parfor__index_224, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:18,493 on stmt: $val.40.598 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=val_40, rhs=$46binary_subscr.5.59, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-01-28 15:49:18,493 find_def var='val_40' stmt=$val.40.598 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=val_40, rhs=$46binary_subscr.5.59, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-01-28 15:49:18,493 find_def_from_top label 48
DEBUG 2022-01-28 15:49:18,493 idom 40 from label 48
DEBUG 2022-01-28 15:49:18,493 find_def_from_bottom label 40
DEBUG 2022-01-28 15:49:18,493 find_def_from_top label 40
DEBUG 2022-01-28 15:49:18,493 idom 38 from label 40
DEBUG 2022-01-28 15:49:18,493 find_def_from_bottom label 38
DEBUG 2022-01-28 15:49:18,493 replaced with: $val.40.598 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=val_40.2, rhs=$46binary_subscr.5.59, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-01-28 15:49:18,493 on stmt: val_40.1 = $val.40.598
DEBUG 2022-01-28 15:49:18,493 on stmt: jump 211
DEBUG 2022-01-28 15:49:18,493 ==== SSA block rewrite pass on 211
DEBUG 2022-01-28 15:49:18,493 Running <numba.core.ssa._FixSSAVars object at 0x000002410C557FA0>
DEBUG 2022-01-28 15:49:18,493 on stmt: jump 38
DEBUG 2022-01-28 15:49:18,921 bytecode dump:
>          0	NOP(arg=None, lineno=2)
           2	LOAD_FAST(arg=2, lineno=2)
           4	LOAD_CONST(arg=1, lineno=2)
           6	BINARY_SUBSCR(arg=None, lineno=2)
           8	STORE_FAST(arg=4, lineno=2)
          10	LOAD_FAST(arg=3, lineno=3)
          12	LOAD_CONST(arg=1, lineno=3)
          14	BINARY_SUBSCR(arg=None, lineno=3)
          16	STORE_FAST(arg=5, lineno=3)
          18	LOAD_GLOBAL(arg=0, lineno=4)
          20	LOAD_FAST(arg=0, lineno=4)
          22	LOAD_CONST(arg=1, lineno=4)
          24	BINARY_SUBSCR(arg=None, lineno=4)
          26	LOAD_FAST(arg=0, lineno=4)
          28	LOAD_CONST(arg=2, lineno=4)
          30	BINARY_SUBSCR(arg=None, lineno=4)
          32	LOAD_GLOBAL(arg=1, lineno=4)
          34	LOAD_METHOD(arg=2, lineno=4)
          36	LOAD_CONST(arg=2, lineno=4)
          38	CALL_METHOD(arg=1, lineno=4)
          40	BINARY_ADD(arg=None, lineno=4)
          42	CALL_FUNCTION(arg=2, lineno=4)
          44	GET_ITER(arg=None, lineno=4)
>         46	FOR_ITER(arg=8, lineno=4)
          48	STORE_FAST(arg=6, lineno=4)
          50	LOAD_CONST(arg=1, lineno=5)
          52	STORE_FAST(arg=7, lineno=5)
          54	JUMP_ABSOLUTE(arg=46, lineno=5)
>         56	LOAD_FAST(arg=4, lineno=6)
          58	LOAD_FAST(arg=2, lineno=6)
          60	LOAD_CONST(arg=1, lineno=6)
          62	STORE_SUBSCR(arg=None, lineno=6)
          64	LOAD_FAST(arg=5, lineno=7)
          66	LOAD_FAST(arg=3, lineno=7)
          68	LOAD_CONST(arg=1, lineno=7)
          70	STORE_SUBSCR(arg=None, lineno=7)
          72	LOAD_CONST(arg=0, lineno=8)
          74	RETURN_VALUE(arg=None, lineno=8)
DEBUG 2022-01-28 15:49:18,921 pending: deque([State(pc_initial=0 nstack_initial=0)])
DEBUG 2022-01-28 15:49:18,921 stack: []
DEBUG 2022-01-28 15:49:18,921 dispatch pc=0, inst=NOP(arg=None, lineno=2)
DEBUG 2022-01-28 15:49:18,921 stack []
DEBUG 2022-01-28 15:49:18,921 dispatch pc=2, inst=LOAD_FAST(arg=2, lineno=2)
DEBUG 2022-01-28 15:49:18,921 stack []
DEBUG 2022-01-28 15:49:18,921 dispatch pc=4, inst=LOAD_CONST(arg=1, lineno=2)
DEBUG 2022-01-28 15:49:18,921 stack ['$val_111__arr2.0']
DEBUG 2022-01-28 15:49:18,921 dispatch pc=6, inst=BINARY_SUBSCR(arg=None, lineno=2)
DEBUG 2022-01-28 15:49:18,921 stack ['$val_111__arr2.0', '$const4.1']
DEBUG 2022-01-28 15:49:18,921 dispatch pc=8, inst=STORE_FAST(arg=4, lineno=2)
DEBUG 2022-01-28 15:49:18,921 stack ['$6binary_subscr.2']
DEBUG 2022-01-28 15:49:18,921 dispatch pc=10, inst=LOAD_FAST(arg=3, lineno=3)
DEBUG 2022-01-28 15:49:18,921 stack []
DEBUG 2022-01-28 15:49:18,921 dispatch pc=12, inst=LOAD_CONST(arg=1, lineno=3)
DEBUG 2022-01-28 15:49:18,921 stack ['$val_70__arr10.3']
DEBUG 2022-01-28 15:49:18,921 dispatch pc=14, inst=BINARY_SUBSCR(arg=None, lineno=3)
DEBUG 2022-01-28 15:49:18,921 stack ['$val_70__arr10.3', '$const12.4']
DEBUG 2022-01-28 15:49:18,921 dispatch pc=16, inst=STORE_FAST(arg=5, lineno=3)
DEBUG 2022-01-28 15:49:18,921 stack ['$14binary_subscr.5']
DEBUG 2022-01-28 15:49:18,921 dispatch pc=18, inst=LOAD_GLOBAL(arg=0, lineno=4)
DEBUG 2022-01-28 15:49:18,921 stack []
DEBUG 2022-01-28 15:49:18,921 dispatch pc=20, inst=LOAD_FAST(arg=0, lineno=4)
DEBUG 2022-01-28 15:49:18,921 stack ['$18load_global.6']
DEBUG 2022-01-28 15:49:18,921 dispatch pc=22, inst=LOAD_CONST(arg=1, lineno=4)
DEBUG 2022-01-28 15:49:18,921 stack ['$18load_global.6', '$sched20.7']
DEBUG 2022-01-28 15:49:18,921 dispatch pc=24, inst=BINARY_SUBSCR(arg=None, lineno=4)
DEBUG 2022-01-28 15:49:18,921 stack ['$18load_global.6', '$sched20.7', '$const22.8']
DEBUG 2022-01-28 15:49:18,921 dispatch pc=26, inst=LOAD_FAST(arg=0, lineno=4)
DEBUG 2022-01-28 15:49:18,921 stack ['$18load_global.6', '$24binary_subscr.9']
DEBUG 2022-01-28 15:49:18,921 dispatch pc=28, inst=LOAD_CONST(arg=2, lineno=4)
DEBUG 2022-01-28 15:49:18,921 stack ['$18load_global.6', '$24binary_subscr.9', '$sched26.10']
DEBUG 2022-01-28 15:49:18,929 dispatch pc=30, inst=BINARY_SUBSCR(arg=None, lineno=4)
DEBUG 2022-01-28 15:49:18,929 stack ['$18load_global.6', '$24binary_subscr.9', '$sched26.10', '$const28.11']
DEBUG 2022-01-28 15:49:18,929 dispatch pc=32, inst=LOAD_GLOBAL(arg=1, lineno=4)
DEBUG 2022-01-28 15:49:18,929 stack ['$18load_global.6', '$24binary_subscr.9', '$30binary_subscr.12']
DEBUG 2022-01-28 15:49:18,929 dispatch pc=34, inst=LOAD_METHOD(arg=2, lineno=4)
DEBUG 2022-01-28 15:49:18,929 stack ['$18load_global.6', '$24binary_subscr.9', '$30binary_subscr.12', '$32load_global.13']
DEBUG 2022-01-28 15:49:18,929 dispatch pc=36, inst=LOAD_CONST(arg=2, lineno=4)
DEBUG 2022-01-28 15:49:18,929 stack ['$18load_global.6', '$24binary_subscr.9', '$30binary_subscr.12', '$34load_method.14']
DEBUG 2022-01-28 15:49:18,929 dispatch pc=38, inst=CALL_METHOD(arg=1, lineno=4)
DEBUG 2022-01-28 15:49:18,929 stack ['$18load_global.6', '$24binary_subscr.9', '$30binary_subscr.12', '$34load_method.14', '$const36.15']
DEBUG 2022-01-28 15:49:18,929 dispatch pc=40, inst=BINARY_ADD(arg=None, lineno=4)
DEBUG 2022-01-28 15:49:18,929 stack ['$18load_global.6', '$24binary_subscr.9', '$30binary_subscr.12', '$38call_method.16']
DEBUG 2022-01-28 15:49:18,929 dispatch pc=42, inst=CALL_FUNCTION(arg=2, lineno=4)
DEBUG 2022-01-28 15:49:18,929 stack ['$18load_global.6', '$24binary_subscr.9', '$40binary_add.17']
DEBUG 2022-01-28 15:49:18,929 dispatch pc=44, inst=GET_ITER(arg=None, lineno=4)
DEBUG 2022-01-28 15:49:18,929 stack ['$42call_function.18']
DEBUG 2022-01-28 15:49:18,929 end state. edges=[Edge(pc=46, stack=('$44get_iter.19',), blockstack=(), npush=0)]
DEBUG 2022-01-28 15:49:18,929 pending: deque([State(pc_initial=46 nstack_initial=1)])
DEBUG 2022-01-28 15:49:18,929 stack: ['$phi46.0']
DEBUG 2022-01-28 15:49:18,929 dispatch pc=46, inst=FOR_ITER(arg=8, lineno=4)
DEBUG 2022-01-28 15:49:18,929 stack ['$phi46.0']
DEBUG 2022-01-28 15:49:18,929 end state. edges=[Edge(pc=56, stack=(), blockstack=(), npush=0), Edge(pc=48, stack=('$phi46.0', '$46for_iter.2'), blockstack=(), npush=0)]
DEBUG 2022-01-28 15:49:18,931 pending: deque([State(pc_initial=56 nstack_initial=0), State(pc_initial=48 nstack_initial=2)])
DEBUG 2022-01-28 15:49:18,931 stack: []
DEBUG 2022-01-28 15:49:18,931 dispatch pc=56, inst=LOAD_FAST(arg=4, lineno=6)
DEBUG 2022-01-28 15:49:18,931 stack []
DEBUG 2022-01-28 15:49:18,931 dispatch pc=58, inst=LOAD_FAST(arg=2, lineno=6)
DEBUG 2022-01-28 15:49:18,931 stack ['$val_11156.0']
DEBUG 2022-01-28 15:49:18,931 dispatch pc=60, inst=LOAD_CONST(arg=1, lineno=6)
DEBUG 2022-01-28 15:49:18,931 stack ['$val_11156.0', '$val_111__arr58.1']
DEBUG 2022-01-28 15:49:18,931 dispatch pc=62, inst=STORE_SUBSCR(arg=None, lineno=6)
DEBUG 2022-01-28 15:49:18,931 stack ['$val_11156.0', '$val_111__arr58.1', '$const60.2']
DEBUG 2022-01-28 15:49:18,931 dispatch pc=64, inst=LOAD_FAST(arg=5, lineno=7)
DEBUG 2022-01-28 15:49:18,931 stack []
DEBUG 2022-01-28 15:49:18,931 dispatch pc=66, inst=LOAD_FAST(arg=3, lineno=7)
DEBUG 2022-01-28 15:49:18,931 stack ['$val_7064.3']
DEBUG 2022-01-28 15:49:18,931 dispatch pc=68, inst=LOAD_CONST(arg=1, lineno=7)
DEBUG 2022-01-28 15:49:18,931 stack ['$val_7064.3', '$val_70__arr66.4']
DEBUG 2022-01-28 15:49:18,931 dispatch pc=70, inst=STORE_SUBSCR(arg=None, lineno=7)
DEBUG 2022-01-28 15:49:18,931 stack ['$val_7064.3', '$val_70__arr66.4', '$const68.5']
DEBUG 2022-01-28 15:49:18,931 dispatch pc=72, inst=LOAD_CONST(arg=0, lineno=8)
DEBUG 2022-01-28 15:49:18,931 stack []
DEBUG 2022-01-28 15:49:18,931 dispatch pc=74, inst=RETURN_VALUE(arg=None, lineno=8)
DEBUG 2022-01-28 15:49:18,931 stack ['$const72.6']
DEBUG 2022-01-28 15:49:18,931 end state. edges=[]
DEBUG 2022-01-28 15:49:18,931 pending: deque([State(pc_initial=48 nstack_initial=2)])
DEBUG 2022-01-28 15:49:18,931 stack: ['$phi48.0', '$phi48.1']
DEBUG 2022-01-28 15:49:18,931 dispatch pc=48, inst=STORE_FAST(arg=6, lineno=4)
DEBUG 2022-01-28 15:49:18,931 stack ['$phi48.0', '$phi48.1']
DEBUG 2022-01-28 15:49:18,931 dispatch pc=50, inst=LOAD_CONST(arg=1, lineno=5)
DEBUG 2022-01-28 15:49:18,931 stack ['$phi48.0']
DEBUG 2022-01-28 15:49:18,931 dispatch pc=52, inst=STORE_FAST(arg=7, lineno=5)
DEBUG 2022-01-28 15:49:18,931 stack ['$phi48.0', '$const50.2']
DEBUG 2022-01-28 15:49:18,931 dispatch pc=54, inst=JUMP_ABSOLUTE(arg=46, lineno=5)
DEBUG 2022-01-28 15:49:18,931 stack ['$phi48.0']
DEBUG 2022-01-28 15:49:18,931 end state. edges=[Edge(pc=46, stack=('$phi48.0',), blockstack=(), npush=0)]
DEBUG 2022-01-28 15:49:18,931 pending: deque([State(pc_initial=46 nstack_initial=1)])
DEBUG 2022-01-28 15:49:18,931 -------------------------Prune PHIs-------------------------
DEBUG 2022-01-28 15:49:18,931 Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=46 nstack_initial=1): {'$phi46.0'},
             State(pc_initial=48 nstack_initial=2): {'$phi48.1'},
             State(pc_initial=56 nstack_initial=0): set()})
DEBUG 2022-01-28 15:49:18,931 defmap: {'$phi46.0': State(pc_initial=0 nstack_initial=0),
 '$phi48.1': State(pc_initial=46 nstack_initial=1)}
DEBUG 2022-01-28 15:49:18,931 phismap: defaultdict(<class 'set'>,
            {'$phi46.0': {('$44get_iter.19',
                           State(pc_initial=0 nstack_initial=0)),
                          ('$phi48.0', State(pc_initial=48 nstack_initial=2))},
             '$phi48.0': {('$phi46.0', State(pc_initial=46 nstack_initial=1))},
             '$phi48.1': {('$46for_iter.2',
                           State(pc_initial=46 nstack_initial=1))}})
DEBUG 2022-01-28 15:49:18,931 changing phismap: defaultdict(<class 'set'>,
            {'$phi46.0': {('$44get_iter.19',
                           State(pc_initial=0 nstack_initial=0)),
                          ('$phi46.0', State(pc_initial=46 nstack_initial=1))},
             '$phi48.0': {('$44get_iter.19',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi48.1': {('$46for_iter.2',
                           State(pc_initial=46 nstack_initial=1))}})
DEBUG 2022-01-28 15:49:18,931 changing phismap: defaultdict(<class 'set'>,
            {'$phi46.0': {('$44get_iter.19',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi48.0': {('$44get_iter.19',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi48.1': {('$46for_iter.2',
                           State(pc_initial=46 nstack_initial=1))}})
DEBUG 2022-01-28 15:49:18,931 changing phismap: defaultdict(<class 'set'>,
            {'$phi46.0': {('$44get_iter.19',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi48.0': {('$44get_iter.19',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi48.1': {('$46for_iter.2',
                           State(pc_initial=46 nstack_initial=1))}})
DEBUG 2022-01-28 15:49:18,931 keep phismap: {'$phi46.0': {('$44get_iter.19', State(pc_initial=0 nstack_initial=0))},
 '$phi48.1': {('$46for_iter.2', State(pc_initial=46 nstack_initial=1))}}
DEBUG 2022-01-28 15:49:18,931 new_out: defaultdict(<class 'dict'>,
            {State(pc_initial=0 nstack_initial=0): {'$phi46.0': '$44get_iter.19'},
             State(pc_initial=46 nstack_initial=1): {'$phi48.1': '$46for_iter.2'}})
DEBUG 2022-01-28 15:49:18,931 ----------------------DONE Prune PHIs-----------------------
DEBUG 2022-01-28 15:49:18,931 block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$val_111__arr2.0'}), (4, {'res': '$const4.1'}), (6, {'index': '$const4.1', 'target': '$val_111__arr2.0', 'res': '$6binary_subscr.2'}), (8, {'value': '$6binary_subscr.2'}), (10, {'res': '$val_70__arr10.3'}), (12, {'res': '$const12.4'}), (14, {'index': '$const12.4', 'target': '$val_70__arr10.3', 'res': '$14binary_subscr.5'}), (16, {'value': '$14binary_subscr.5'}), (18, {'res': '$18load_global.6'}), (20, {'res': '$sched20.7'}), (22, {'res': '$const22.8'}), (24, {'index': '$const22.8', 'target': '$sched20.7', 'res': '$24binary_subscr.9'}), (26, {'res': '$sched26.10'}), (28, {'res': '$const28.11'}), (30, {'index': '$const28.11', 'target': '$sched26.10', 'res': '$30binary_subscr.12'}), (32, {'res': '$32load_global.13'}), (34, {'item': '$32load_global.13', 'res': '$34load_method.14'}), (36, {'res': '$const36.15'}), (38, {'func': '$34load_method.14', 'args': ['$const36.15'], 'res': '$38call_method.16'}), (40, {'lhs': '$30binary_subscr.12', 'rhs': '$38call_method.16', 'res': '$40binary_add.17'}), (42, {'func': '$18load_global.6', 'args': ['$24binary_subscr.9', '$40binary_add.17'], 'res': '$42call_function.18'}), (44, {'value': '$42call_function.18', 'res': '$44get_iter.19'})), outgoing_phis={'$phi46.0': '$44get_iter.19'}, blockstack=(), active_try_block=None, outgoing_edgepushed={46: ('$44get_iter.19',)})
DEBUG 2022-01-28 15:49:18,931 block_infos State(pc_initial=46 nstack_initial=1):
AdaptBlockInfo(insts=((46, {'iterator': '$phi46.0', 'pair': '$46for_iter.1', 'indval': '$46for_iter.2', 'pred': '$46for_iter.3'}),), outgoing_phis={'$phi48.1': '$46for_iter.2'}, blockstack=(), active_try_block=None, outgoing_edgepushed={56: (), 48: ('$phi46.0', '$46for_iter.2')})
DEBUG 2022-01-28 15:49:18,931 block_infos State(pc_initial=48 nstack_initial=2):
AdaptBlockInfo(insts=((48, {'value': '$phi48.1'}), (50, {'res': '$const50.2'}), (52, {'value': '$const50.2'}), (54, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={46: ('$phi48.0',)})
DEBUG 2022-01-28 15:49:18,931 block_infos State(pc_initial=56 nstack_initial=0):
AdaptBlockInfo(insts=((56, {'res': '$val_11156.0'}), (58, {'res': '$val_111__arr58.1'}), (60, {'res': '$const60.2'}), (62, {'target': '$val_111__arr58.1', 'index': '$const60.2', 'value': '$val_11156.0'}), (64, {'res': '$val_7064.3'}), (66, {'res': '$val_70__arr66.4'}), (68, {'res': '$const68.5'}), (70, {'target': '$val_70__arr66.4', 'index': '$const68.5', 'value': '$val_7064.3'}), (72, {'res': '$const72.6'}), (74, {'retval': '$const72.6', 'castval': '$74return_value.7'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG 2022-01-28 15:49:18,931 label 0:
    sched = arg(0, name=sched)               ['sched']
    edge__reps = arg(1, name=edge__reps)     ['edge__reps']
    val_111__arr = arg(2, name=val_111__arr) ['val_111__arr']
    val_70__arr = arg(3, name=val_70__arr)   ['val_70__arr']
    $const4.1 = const(int, 0)                ['$const4.1']
    val_111 = getitem(value=val_111__arr, index=$const4.1, fn=<built-in function getitem>) ['$const4.1', 'val_111', 'val_111__arr']
    $const12.4 = const(int, 0)               ['$const12.4']
    val_70 = getitem(value=val_70__arr, index=$const12.4, fn=<built-in function getitem>) ['$const12.4', 'val_70', 'val_70__arr']
    $18load_global.6 = global(range: <class 'range'>) ['$18load_global.6']
    $const22.8 = const(int, 0)               ['$const22.8']
    $24binary_subscr.9 = getitem(value=sched, index=$const22.8, fn=<built-in function getitem>) ['$24binary_subscr.9', '$const22.8', 'sched']
    $const28.11 = const(int, 1)              ['$const28.11']
    $30binary_subscr.12 = getitem(value=sched, index=$const28.11, fn=<built-in function getitem>) ['$30binary_subscr.12', '$const28.11', 'sched']
    $32load_global.13 = global(np: <module 'numpy' from 'C:\\Users\\zl4821\\Anaconda3\\envs\\GBS\\lib\\site-packages\\numpy\\__init__.py'>) ['$32load_global.13']
    $34load_method.14 = getattr(value=$32load_global.13, attr=uint8) ['$32load_global.13', '$34load_method.14']
    $const36.15 = const(int, 1)              ['$const36.15']
    $38call_method.16 = call $34load_method.14($const36.15, func=$34load_method.14, args=[Var($const36.15, <string>:4)], kws=(), vararg=None, target=None) ['$34load_method.14', '$38call_method.16', '$const36.15']
    $40binary_add.17 = $30binary_subscr.12 + $38call_method.16 ['$30binary_subscr.12', '$38call_method.16', '$40binary_add.17']
    $42call_function.18 = call $18load_global.6($24binary_subscr.9, $40binary_add.17, func=$18load_global.6, args=[Var($24binary_subscr.9, <string>:4), Var($40binary_add.17, <string>:4)], kws=(), vararg=None, target=None) ['$18load_global.6', '$24binary_subscr.9', '$40binary_add.17', '$42call_function.18']
    $44get_iter.19 = getiter(value=$42call_function.18) ['$42call_function.18', '$44get_iter.19']
    $phi46.0 = $44get_iter.19                ['$44get_iter.19', '$phi46.0']
    jump 46                                  []
label 46:
    $46for_iter.1 = iternext(value=$phi46.0) ['$46for_iter.1', '$phi46.0']
    $46for_iter.2 = pair_first(value=$46for_iter.1) ['$46for_iter.1', '$46for_iter.2']
    $46for_iter.3 = pair_second(value=$46for_iter.1) ['$46for_iter.1', '$46for_iter.3']
    $phi48.1 = $46for_iter.2                 ['$46for_iter.2', '$phi48.1']
    branch $46for_iter.3, 48, 56             ['$46for_iter.3']
label 48:
    parfor__index_196 = $phi48.1             ['$phi48.1', 'parfor__index_196']
    __sentinel__0 = const(int, 0)            ['__sentinel__0']
    jump 46                                  []
label 56:
    $const60.2 = const(int, 0)               ['$const60.2']
    val_111__arr[$const60.2] = val_111       ['$const60.2', 'val_111', 'val_111__arr']
    $const68.5 = const(int, 0)               ['$const68.5']
    val_70__arr[$const68.5] = val_70         ['$const68.5', 'val_70', 'val_70__arr']
    $const72.6 = const(NoneType, None)       ['$const72.6']
    $74return_value.7 = cast(value=$const72.6) ['$74return_value.7', '$const72.6']
    return $74return_value.7                 ['$74return_value.7']

DEBUG 2022-01-28 15:49:18,941 ==== SSA block analysis pass on 0
DEBUG 2022-01-28 15:49:18,941 Running <numba.core.ssa._GatherDefsHandler object at 0x000002410C7C7F40>
DEBUG 2022-01-28 15:49:18,941 on stmt: sched.721 = arg(0, name=sched)
DEBUG 2022-01-28 15:49:18,941 on stmt: edge__reps = arg(1, name=edge__reps)
DEBUG 2022-01-28 15:49:18,941 on stmt: val_111__arr = arg(2, name=val_111__arr)
DEBUG 2022-01-28 15:49:18,941 on stmt: val_70__arr = arg(3, name=val_70__arr)
DEBUG 2022-01-28 15:49:18,941 on stmt: $const4.1.722 = const(int, 0)
DEBUG 2022-01-28 15:49:18,941 on stmt: val_111 = getitem(value=val_111__arr, index=$const4.1.722, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:18,941 on stmt: $const12.4.723 = const(int, 0)
DEBUG 2022-01-28 15:49:18,941 on stmt: val_70 = getitem(value=val_70__arr, index=$const12.4.723, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:18,941 on stmt: $18load_global.6.724 = global(range: <class 'range'>)
DEBUG 2022-01-28 15:49:18,941 on stmt: $const22.8.725 = const(int, 0)
DEBUG 2022-01-28 15:49:18,941 on stmt: $24binary_subscr.9.726 = getitem(value=sched.721, index=$const22.8.725, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:18,941 on stmt: $const28.11.727 = const(int, 1)
DEBUG 2022-01-28 15:49:18,941 on stmt: $30binary_subscr.12.728 = getitem(value=sched.721, index=$const28.11.727, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:18,941 on stmt: $32load_global.13.729 = global(np: <module 'numpy' from 'C:\\Users\\zl4821\\Anaconda3\\envs\\GBS\\lib\\site-packages\\numpy\\__init__.py'>)
DEBUG 2022-01-28 15:49:18,941 on stmt: $34load_method.14.730 = getattr(value=$32load_global.13.729, attr=uint8)
DEBUG 2022-01-28 15:49:18,941 on stmt: $const36.15.731 = const(int, 1)
DEBUG 2022-01-28 15:49:18,941 on stmt: $38call_method.16.732 = call $34load_method.14.730($const36.15.731, func=$34load_method.14.730, args=[Var($const36.15.731, <string>:4)], kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:18,941 on stmt: $40binary_add.17.733 = $30binary_subscr.12.728 + $38call_method.16.732
DEBUG 2022-01-28 15:49:18,941 on stmt: $42call_function.18.734 = call $18load_global.6.724($24binary_subscr.9.726, $40binary_add.17.733, func=$18load_global.6.724, args=[Var($24binary_subscr.9.726, <string>:4), Var($40binary_add.17.733, <string>:4)], kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:18,941 on stmt: $44get_iter.19.735 = getiter(value=$42call_function.18.734)
DEBUG 2022-01-28 15:49:18,941 on stmt: $phi46.0.736 = $44get_iter.19.735
DEBUG 2022-01-28 15:49:18,941 on stmt: $arg_out_var.202 = const(int, 1)
DEBUG 2022-01-28 15:49:18,941 on stmt: $64load_global.2.127 = global(max: <built-in function max>)
DEBUG 2022-01-28 15:49:18,941 on stmt: jump 46
DEBUG 2022-01-28 15:49:18,941 ==== SSA block analysis pass on 46
DEBUG 2022-01-28 15:49:18,941 Running <numba.core.ssa._GatherDefsHandler object at 0x000002410C7C7F40>
DEBUG 2022-01-28 15:49:18,941 on stmt: $46for_iter.1.737 = iternext(value=$phi46.0.736)
DEBUG 2022-01-28 15:49:18,941 on stmt: $46for_iter.2.738 = pair_first(value=$46for_iter.1.737)
DEBUG 2022-01-28 15:49:18,941 on stmt: $46for_iter.3.739 = pair_second(value=$46for_iter.1.737)
DEBUG 2022-01-28 15:49:18,941 on stmt: $phi48.1.740 = $46for_iter.2.738
DEBUG 2022-01-28 15:49:18,941 on stmt: branch $46for_iter.3.739, 48, 892
DEBUG 2022-01-28 15:49:18,941 ==== SSA block analysis pass on 48
DEBUG 2022-01-28 15:49:18,941 Running <numba.core.ssa._GatherDefsHandler object at 0x000002410C7C7F40>
DEBUG 2022-01-28 15:49:18,941 on stmt: parfor__index_196 = $phi48.1.740
DEBUG 2022-01-28 15:49:18,941 on stmt: jump 56
DEBUG 2022-01-28 15:49:18,941 ==== SSA block analysis pass on 892
DEBUG 2022-01-28 15:49:18,941 Running <numba.core.ssa._GatherDefsHandler object at 0x000002410C7C7F40>
DEBUG 2022-01-28 15:49:18,941 on stmt: $const60.2.741 = const(int, 0)
DEBUG 2022-01-28 15:49:18,941 on stmt: val_111__arr[$const60.2.741] = val_111
DEBUG 2022-01-28 15:49:18,941 on stmt: $const68.5.742 = const(int, 0)
DEBUG 2022-01-28 15:49:18,941 on stmt: val_70__arr[$const68.5.742] = val_70
DEBUG 2022-01-28 15:49:18,941 on stmt: $const72.6.743 = const(NoneType, None)
DEBUG 2022-01-28 15:49:18,941 on stmt: $74return_value.7.744 = cast(value=$const72.6.743)
DEBUG 2022-01-28 15:49:18,941 on stmt: return $74return_value.7.744
DEBUG 2022-01-28 15:49:18,941 ==== SSA block analysis pass on 56
DEBUG 2022-01-28 15:49:18,949 Running <numba.core.ssa._GatherDefsHandler object at 0x000002410C7C7F40>
DEBUG 2022-01-28 15:49:18,949 on stmt: $arg_out_var.201 = getitem(value=edge__reps, index=parfor__index_196, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:18,949 on stmt: $expr_out_var.200 = $arg_out_var.201 + $arg_out_var.202
DEBUG 2022-01-28 15:49:18,949 on stmt: $val.70.599 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=val_70, rhs=$expr_out_var.200, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-01-28 15:49:18,949 on stmt: val_70 = $val.70.599
DEBUG 2022-01-28 15:49:18,949 on stmt: $72binary_subscr.6.131 = getitem(value=edge__reps, index=parfor__index_196, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:18,949 on stmt: val_111 = call $64load_global.2.127(val_111, $72binary_subscr.6.131, func=$64load_global.2.127, args=[Var(val_111, parfor.py:156), Var($72binary_subscr.6.131, parfor.py:158)], kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:18,949 on stmt: jump 891
DEBUG 2022-01-28 15:49:18,949 ==== SSA block analysis pass on 891
DEBUG 2022-01-28 15:49:18,949 Running <numba.core.ssa._GatherDefsHandler object at 0x000002410C7C7F40>
DEBUG 2022-01-28 15:49:18,949 on stmt: jump 46
DEBUG 2022-01-28 15:49:18,949 defs defaultdict(<class 'list'>,
            {'$18load_global.6.724': [<numba.core.ir.Assign object at 0x000002410C4034F0>],
             '$24binary_subscr.9.726': [<numba.core.ir.Assign object at 0x000002410C5B6100>],
             '$30binary_subscr.12.728': [<numba.core.ir.Assign object at 0x000002410C5B6520>],
             '$32load_global.13.729': [<numba.core.ir.Assign object at 0x000002410C5B6670>],
             '$34load_method.14.730': [<numba.core.ir.Assign object at 0x000002410C5B67F0>],
             '$38call_method.16.732': [<numba.core.ir.Assign object at 0x000002410C5B6B80>],
             '$40binary_add.17.733': [<numba.core.ir.Assign object at 0x000002410C5B6CA0>],
             '$42call_function.18.734': [<numba.core.ir.Assign object at 0x000002410C5B6E50>],
             '$44get_iter.19.735': [<numba.core.ir.Assign object at 0x000002410C5B6F70>],
             '$46for_iter.1.737': [<numba.core.ir.Assign object at 0x000002410C7DC100>],
             '$46for_iter.2.738': [<numba.core.ir.Assign object at 0x000002410C7DC220>],
             '$46for_iter.3.739': [<numba.core.ir.Assign object at 0x000002410C7DC340>],
             '$64load_global.2.127': [<numba.core.ir.Assign object at 0x000002410B083100>],
             '$72binary_subscr.6.131': [<numba.core.ir.Assign object at 0x000002410B0C17C0>],
             '$74return_value.7.744': [<numba.core.ir.Assign object at 0x000002410C7DE610>],
             '$arg_out_var.201': [<numba.core.ir.Assign object at 0x000002410C23ABB0>],
             '$arg_out_var.202': [<numba.core.ir.Assign object at 0x000002410C23AF40>],
             '$const12.4.723': [<numba.core.ir.Assign object at 0x000002410C7FAD90>],
             '$const22.8.725': [<numba.core.ir.Assign object at 0x000002410B07D190>],
             '$const28.11.727': [<numba.core.ir.Assign object at 0x000002410C5B6370>],
             '$const36.15.731': [<numba.core.ir.Assign object at 0x000002410C5B6970>],
             '$const4.1.722': [<numba.core.ir.Assign object at 0x000002410C5AB1F0>],
             '$const60.2.741': [<numba.core.ir.Assign object at 0x000002410C7DCD90>],
             '$const68.5.742': [<numba.core.ir.Assign object at 0x000002410C7DE250>],
             '$const72.6.743': [<numba.core.ir.Assign object at 0x000002410C7DE490>],
             '$expr_out_var.200': [<numba.core.ir.Assign object at 0x000002410C23E400>],
             '$phi46.0.736': [<numba.core.ir.Assign object at 0x000002410C7FAFA0>],
             '$phi48.1.740': [<numba.core.ir.Assign object at 0x000002410C5B6FD0>],
             '$val.70.599': [<numba.core.ir.Assign object at 0x000002410B12D1C0>],
             'edge__reps': [<numba.core.ir.Assign object at 0x000002410C5AB820>],
             'parfor__index_196': [<numba.core.ir.Assign object at 0x000002410C7DC610>],
             'sched.721': [<numba.core.ir.Assign object at 0x000002410C5AB940>],
             'val_111': [<numba.core.ir.Assign object at 0x000002410C5AB040>,
                         <numba.core.ir.Assign object at 0x000002410B0C1AC0>],
             'val_111__arr': [<numba.core.ir.Assign object at 0x000002410C5AB700>],
             'val_70': [<numba.core.ir.Assign object at 0x000002410C7FAAC0>,
                        <numba.core.ir.Assign object at 0x000002410B12D100>],
             'val_70__arr': [<numba.core.ir.Assign object at 0x000002410C5AB5E0>]})
DEBUG 2022-01-28 15:49:18,949 SSA violators {'val_70', 'val_111'}
DEBUG 2022-01-28 15:49:18,949 Fix SSA violator on var val_70
DEBUG 2022-01-28 15:49:18,949 ==== SSA block rewrite pass on 0
DEBUG 2022-01-28 15:49:18,951 Running <numba.core.ssa._FreshVarHandler object at 0x000002410C7C7DC0>
DEBUG 2022-01-28 15:49:18,951 on stmt: sched.721 = arg(0, name=sched)
DEBUG 2022-01-28 15:49:18,951 on stmt: edge__reps = arg(1, name=edge__reps)
DEBUG 2022-01-28 15:49:18,951 on stmt: val_111__arr = arg(2, name=val_111__arr)
DEBUG 2022-01-28 15:49:18,951 on stmt: val_70__arr = arg(3, name=val_70__arr)
DEBUG 2022-01-28 15:49:18,951 on stmt: $const4.1.722 = const(int, 0)
DEBUG 2022-01-28 15:49:18,951 on stmt: val_111 = getitem(value=val_111__arr, index=$const4.1.722, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:18,951 on stmt: $const12.4.723 = const(int, 0)
DEBUG 2022-01-28 15:49:18,951 on stmt: val_70 = getitem(value=val_70__arr, index=$const12.4.723, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:18,951 first assign: val_70
DEBUG 2022-01-28 15:49:18,951 replaced with: val_70 = getitem(value=val_70__arr, index=$const12.4.723, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:18,951 on stmt: $18load_global.6.724 = global(range: <class 'range'>)
DEBUG 2022-01-28 15:49:18,951 on stmt: $const22.8.725 = const(int, 0)
DEBUG 2022-01-28 15:49:18,951 on stmt: $24binary_subscr.9.726 = getitem(value=sched.721, index=$const22.8.725, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:18,951 on stmt: $const28.11.727 = const(int, 1)
DEBUG 2022-01-28 15:49:18,951 on stmt: $30binary_subscr.12.728 = getitem(value=sched.721, index=$const28.11.727, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:18,951 on stmt: $32load_global.13.729 = global(np: <module 'numpy' from 'C:\\Users\\zl4821\\Anaconda3\\envs\\GBS\\lib\\site-packages\\numpy\\__init__.py'>)
DEBUG 2022-01-28 15:49:18,951 on stmt: $34load_method.14.730 = getattr(value=$32load_global.13.729, attr=uint8)
DEBUG 2022-01-28 15:49:18,951 on stmt: $const36.15.731 = const(int, 1)
DEBUG 2022-01-28 15:49:18,951 on stmt: $38call_method.16.732 = call $34load_method.14.730($const36.15.731, func=$34load_method.14.730, args=[Var($const36.15.731, <string>:4)], kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:18,951 on stmt: $40binary_add.17.733 = $30binary_subscr.12.728 + $38call_method.16.732
DEBUG 2022-01-28 15:49:18,951 on stmt: $42call_function.18.734 = call $18load_global.6.724($24binary_subscr.9.726, $40binary_add.17.733, func=$18load_global.6.724, args=[Var($24binary_subscr.9.726, <string>:4), Var($40binary_add.17.733, <string>:4)], kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:18,951 on stmt: $44get_iter.19.735 = getiter(value=$42call_function.18.734)
DEBUG 2022-01-28 15:49:18,951 on stmt: $phi46.0.736 = $44get_iter.19.735
DEBUG 2022-01-28 15:49:18,951 on stmt: $arg_out_var.202 = const(int, 1)
DEBUG 2022-01-28 15:49:18,951 on stmt: $64load_global.2.127 = global(max: <built-in function max>)
DEBUG 2022-01-28 15:49:18,951 on stmt: jump 46
DEBUG 2022-01-28 15:49:18,951 ==== SSA block rewrite pass on 46
DEBUG 2022-01-28 15:49:18,951 Running <numba.core.ssa._FreshVarHandler object at 0x000002410C7C7DC0>
DEBUG 2022-01-28 15:49:18,951 on stmt: $46for_iter.1.737 = iternext(value=$phi46.0.736)
DEBUG 2022-01-28 15:49:18,951 on stmt: $46for_iter.2.738 = pair_first(value=$46for_iter.1.737)
DEBUG 2022-01-28 15:49:18,951 on stmt: $46for_iter.3.739 = pair_second(value=$46for_iter.1.737)
DEBUG 2022-01-28 15:49:18,951 on stmt: $phi48.1.740 = $46for_iter.2.738
DEBUG 2022-01-28 15:49:18,951 on stmt: branch $46for_iter.3.739, 48, 892
DEBUG 2022-01-28 15:49:18,951 ==== SSA block rewrite pass on 48
DEBUG 2022-01-28 15:49:18,951 Running <numba.core.ssa._FreshVarHandler object at 0x000002410C7C7DC0>
DEBUG 2022-01-28 15:49:18,951 on stmt: parfor__index_196 = $phi48.1.740
DEBUG 2022-01-28 15:49:18,951 on stmt: jump 56
DEBUG 2022-01-28 15:49:18,951 ==== SSA block rewrite pass on 892
DEBUG 2022-01-28 15:49:18,951 Running <numba.core.ssa._FreshVarHandler object at 0x000002410C7C7DC0>
DEBUG 2022-01-28 15:49:18,951 on stmt: $const60.2.741 = const(int, 0)
DEBUG 2022-01-28 15:49:18,951 on stmt: val_111__arr[$const60.2.741] = val_111
DEBUG 2022-01-28 15:49:18,951 on stmt: $const68.5.742 = const(int, 0)
DEBUG 2022-01-28 15:49:18,951 on stmt: val_70__arr[$const68.5.742] = val_70
DEBUG 2022-01-28 15:49:18,951 on stmt: $const72.6.743 = const(NoneType, None)
DEBUG 2022-01-28 15:49:18,951 on stmt: $74return_value.7.744 = cast(value=$const72.6.743)
DEBUG 2022-01-28 15:49:18,951 on stmt: return $74return_value.7.744
DEBUG 2022-01-28 15:49:18,951 ==== SSA block rewrite pass on 56
DEBUG 2022-01-28 15:49:18,951 Running <numba.core.ssa._FreshVarHandler object at 0x000002410C7C7DC0>
DEBUG 2022-01-28 15:49:18,951 on stmt: $arg_out_var.201 = getitem(value=edge__reps, index=parfor__index_196, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:18,951 on stmt: $expr_out_var.200 = $arg_out_var.201 + $arg_out_var.202
DEBUG 2022-01-28 15:49:18,951 on stmt: $val.70.599 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=val_70, rhs=$expr_out_var.200, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-01-28 15:49:18,951 on stmt: val_70 = $val.70.599
DEBUG 2022-01-28 15:49:18,951 replaced with: val_70.1 = $val.70.599
DEBUG 2022-01-28 15:49:18,951 on stmt: $72binary_subscr.6.131 = getitem(value=edge__reps, index=parfor__index_196, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:18,951 on stmt: val_111 = call $64load_global.2.127(val_111, $72binary_subscr.6.131, func=$64load_global.2.127, args=[Var(val_111, parfor.py:156), Var($72binary_subscr.6.131, parfor.py:158)], kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:18,951 on stmt: jump 891
DEBUG 2022-01-28 15:49:18,951 ==== SSA block rewrite pass on 891
DEBUG 2022-01-28 15:49:18,951 Running <numba.core.ssa._FreshVarHandler object at 0x000002410C7C7DC0>
DEBUG 2022-01-28 15:49:18,951 on stmt: jump 46
DEBUG 2022-01-28 15:49:18,951 Replaced assignments: defaultdict(<class 'list'>,
            {0: [<numba.core.ir.Assign object at 0x000002410C7C7D60>],
             56: [<numba.core.ir.Assign object at 0x000002410C7C7E50>]})
DEBUG 2022-01-28 15:49:18,951 ==== SSA block rewrite pass on 0
DEBUG 2022-01-28 15:49:18,951 Running <numba.core.ssa._FixSSAVars object at 0x000002410C7C7DC0>
DEBUG 2022-01-28 15:49:18,951 on stmt: sched.721 = arg(0, name=sched)
DEBUG 2022-01-28 15:49:18,951 on stmt: edge__reps = arg(1, name=edge__reps)
DEBUG 2022-01-28 15:49:18,951 on stmt: val_111__arr = arg(2, name=val_111__arr)
DEBUG 2022-01-28 15:49:18,951 on stmt: val_70__arr = arg(3, name=val_70__arr)
DEBUG 2022-01-28 15:49:18,951 on stmt: $const4.1.722 = const(int, 0)
DEBUG 2022-01-28 15:49:18,951 on stmt: val_111 = getitem(value=val_111__arr, index=$const4.1.722, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:18,951 on stmt: $const12.4.723 = const(int, 0)
DEBUG 2022-01-28 15:49:18,951 on stmt: val_70 = getitem(value=val_70__arr, index=$const12.4.723, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:18,951 on stmt: $18load_global.6.724 = global(range: <class 'range'>)
DEBUG 2022-01-28 15:49:18,951 on stmt: $const22.8.725 = const(int, 0)
DEBUG 2022-01-28 15:49:18,951 on stmt: $24binary_subscr.9.726 = getitem(value=sched.721, index=$const22.8.725, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:18,951 on stmt: $const28.11.727 = const(int, 1)
DEBUG 2022-01-28 15:49:18,951 on stmt: $30binary_subscr.12.728 = getitem(value=sched.721, index=$const28.11.727, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:18,951 on stmt: $32load_global.13.729 = global(np: <module 'numpy' from 'C:\\Users\\zl4821\\Anaconda3\\envs\\GBS\\lib\\site-packages\\numpy\\__init__.py'>)
DEBUG 2022-01-28 15:49:18,951 on stmt: $34load_method.14.730 = getattr(value=$32load_global.13.729, attr=uint8)
DEBUG 2022-01-28 15:49:18,951 on stmt: $const36.15.731 = const(int, 1)
DEBUG 2022-01-28 15:49:18,951 on stmt: $38call_method.16.732 = call $34load_method.14.730($const36.15.731, func=$34load_method.14.730, args=[Var($const36.15.731, <string>:4)], kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:18,951 on stmt: $40binary_add.17.733 = $30binary_subscr.12.728 + $38call_method.16.732
DEBUG 2022-01-28 15:49:18,951 on stmt: $42call_function.18.734 = call $18load_global.6.724($24binary_subscr.9.726, $40binary_add.17.733, func=$18load_global.6.724, args=[Var($24binary_subscr.9.726, <string>:4), Var($40binary_add.17.733, <string>:4)], kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:18,951 on stmt: $44get_iter.19.735 = getiter(value=$42call_function.18.734)
DEBUG 2022-01-28 15:49:18,951 on stmt: $phi46.0.736 = $44get_iter.19.735
DEBUG 2022-01-28 15:49:18,959 on stmt: $arg_out_var.202 = const(int, 1)
DEBUG 2022-01-28 15:49:18,959 on stmt: $64load_global.2.127 = global(max: <built-in function max>)
DEBUG 2022-01-28 15:49:18,959 on stmt: jump 46
DEBUG 2022-01-28 15:49:18,959 ==== SSA block rewrite pass on 46
DEBUG 2022-01-28 15:49:18,959 Running <numba.core.ssa._FixSSAVars object at 0x000002410C7C7DC0>
DEBUG 2022-01-28 15:49:18,959 on stmt: $46for_iter.1.737 = iternext(value=$phi46.0.736)
DEBUG 2022-01-28 15:49:18,959 on stmt: $46for_iter.2.738 = pair_first(value=$46for_iter.1.737)
DEBUG 2022-01-28 15:49:18,959 on stmt: $46for_iter.3.739 = pair_second(value=$46for_iter.1.737)
DEBUG 2022-01-28 15:49:18,959 on stmt: $phi48.1.740 = $46for_iter.2.738
DEBUG 2022-01-28 15:49:18,959 on stmt: branch $46for_iter.3.739, 48, 892
DEBUG 2022-01-28 15:49:18,959 ==== SSA block rewrite pass on 48
DEBUG 2022-01-28 15:49:18,959 Running <numba.core.ssa._FixSSAVars object at 0x000002410C7C7DC0>
DEBUG 2022-01-28 15:49:18,959 on stmt: parfor__index_196 = $phi48.1.740
DEBUG 2022-01-28 15:49:18,959 on stmt: jump 56
DEBUG 2022-01-28 15:49:18,959 ==== SSA block rewrite pass on 892
DEBUG 2022-01-28 15:49:18,959 Running <numba.core.ssa._FixSSAVars object at 0x000002410C7C7DC0>
DEBUG 2022-01-28 15:49:18,959 on stmt: $const60.2.741 = const(int, 0)
DEBUG 2022-01-28 15:49:18,959 on stmt: val_111__arr[$const60.2.741] = val_111
DEBUG 2022-01-28 15:49:18,961 on stmt: $const68.5.742 = const(int, 0)
DEBUG 2022-01-28 15:49:18,961 on stmt: val_70__arr[$const68.5.742] = val_70
DEBUG 2022-01-28 15:49:18,961 find_def var='val_70' stmt=val_70__arr[$const68.5.742] = val_70
DEBUG 2022-01-28 15:49:18,961 find_def_from_top label 892
DEBUG 2022-01-28 15:49:18,961 idom 46 from label 892
DEBUG 2022-01-28 15:49:18,961 find_def_from_bottom label 46
DEBUG 2022-01-28 15:49:18,961 find_def_from_top label 46
DEBUG 2022-01-28 15:49:18,961 insert phi node val_70.2 = phi(incoming_values=[], incoming_blocks=[]) at 46
DEBUG 2022-01-28 15:49:18,961 find_def_from_bottom label 0
DEBUG 2022-01-28 15:49:18,961 incoming_def val_70 = getitem(value=val_70__arr, index=$const12.4.723, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:18,961 find_def_from_bottom label 891
DEBUG 2022-01-28 15:49:18,961 find_def_from_top label 891
DEBUG 2022-01-28 15:49:18,961 idom 56 from label 891
DEBUG 2022-01-28 15:49:18,961 find_def_from_bottom label 56
DEBUG 2022-01-28 15:49:18,961 incoming_def val_70.1 = $val.70.599
DEBUG 2022-01-28 15:49:18,961 replaced with: val_70__arr[$const68.5.742] = val_70.2
DEBUG 2022-01-28 15:49:18,961 on stmt: $const72.6.743 = const(NoneType, None)
DEBUG 2022-01-28 15:49:18,961 on stmt: $74return_value.7.744 = cast(value=$const72.6.743)
DEBUG 2022-01-28 15:49:18,961 on stmt: return $74return_value.7.744
DEBUG 2022-01-28 15:49:18,961 ==== SSA block rewrite pass on 56
DEBUG 2022-01-28 15:49:18,961 Running <numba.core.ssa._FixSSAVars object at 0x000002410C7C7DC0>
DEBUG 2022-01-28 15:49:18,961 on stmt: $arg_out_var.201 = getitem(value=edge__reps, index=parfor__index_196, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:18,961 on stmt: $expr_out_var.200 = $arg_out_var.201 + $arg_out_var.202
DEBUG 2022-01-28 15:49:18,961 on stmt: $val.70.599 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=val_70, rhs=$expr_out_var.200, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-01-28 15:49:18,961 find_def var='val_70' stmt=$val.70.599 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=val_70, rhs=$expr_out_var.200, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-01-28 15:49:18,961 find_def_from_top label 56
DEBUG 2022-01-28 15:49:18,961 idom 48 from label 56
DEBUG 2022-01-28 15:49:18,961 find_def_from_bottom label 48
DEBUG 2022-01-28 15:49:18,961 find_def_from_top label 48
DEBUG 2022-01-28 15:49:18,961 idom 46 from label 48
DEBUG 2022-01-28 15:49:18,961 find_def_from_bottom label 46
DEBUG 2022-01-28 15:49:18,961 replaced with: $val.70.599 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=val_70.2, rhs=$expr_out_var.200, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-01-28 15:49:18,961 on stmt: val_70.1 = $val.70.599
DEBUG 2022-01-28 15:49:18,961 on stmt: $72binary_subscr.6.131 = getitem(value=edge__reps, index=parfor__index_196, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:18,961 on stmt: val_111 = call $64load_global.2.127(val_111, $72binary_subscr.6.131, func=$64load_global.2.127, args=[Var(val_111, parfor.py:156), Var($72binary_subscr.6.131, parfor.py:158)], kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:18,961 on stmt: jump 891
DEBUG 2022-01-28 15:49:18,961 ==== SSA block rewrite pass on 891
DEBUG 2022-01-28 15:49:18,961 Running <numba.core.ssa._FixSSAVars object at 0x000002410C7C7DC0>
DEBUG 2022-01-28 15:49:18,961 on stmt: jump 46
DEBUG 2022-01-28 15:49:18,961 Fix SSA violator on var val_111
DEBUG 2022-01-28 15:49:18,961 ==== SSA block rewrite pass on 0
DEBUG 2022-01-28 15:49:18,961 Running <numba.core.ssa._FreshVarHandler object at 0x000002410C7C71C0>
DEBUG 2022-01-28 15:49:18,961 on stmt: sched.721 = arg(0, name=sched)
DEBUG 2022-01-28 15:49:18,961 on stmt: edge__reps = arg(1, name=edge__reps)
DEBUG 2022-01-28 15:49:18,961 on stmt: val_111__arr = arg(2, name=val_111__arr)
DEBUG 2022-01-28 15:49:18,961 on stmt: val_70__arr = arg(3, name=val_70__arr)
DEBUG 2022-01-28 15:49:18,961 on stmt: $const4.1.722 = const(int, 0)
DEBUG 2022-01-28 15:49:18,961 on stmt: val_111 = getitem(value=val_111__arr, index=$const4.1.722, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:18,961 first assign: val_111
DEBUG 2022-01-28 15:49:18,961 replaced with: val_111 = getitem(value=val_111__arr, index=$const4.1.722, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:18,961 on stmt: $const12.4.723 = const(int, 0)
DEBUG 2022-01-28 15:49:18,961 on stmt: val_70 = getitem(value=val_70__arr, index=$const12.4.723, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:18,961 on stmt: $18load_global.6.724 = global(range: <class 'range'>)
DEBUG 2022-01-28 15:49:18,961 on stmt: $const22.8.725 = const(int, 0)
DEBUG 2022-01-28 15:49:18,961 on stmt: $24binary_subscr.9.726 = getitem(value=sched.721, index=$const22.8.725, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:18,961 on stmt: $const28.11.727 = const(int, 1)
DEBUG 2022-01-28 15:49:18,961 on stmt: $30binary_subscr.12.728 = getitem(value=sched.721, index=$const28.11.727, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:18,961 on stmt: $32load_global.13.729 = global(np: <module 'numpy' from 'C:\\Users\\zl4821\\Anaconda3\\envs\\GBS\\lib\\site-packages\\numpy\\__init__.py'>)
DEBUG 2022-01-28 15:49:18,961 on stmt: $34load_method.14.730 = getattr(value=$32load_global.13.729, attr=uint8)
DEBUG 2022-01-28 15:49:18,961 on stmt: $const36.15.731 = const(int, 1)
DEBUG 2022-01-28 15:49:18,961 on stmt: $38call_method.16.732 = call $34load_method.14.730($const36.15.731, func=$34load_method.14.730, args=[Var($const36.15.731, <string>:4)], kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:18,961 on stmt: $40binary_add.17.733 = $30binary_subscr.12.728 + $38call_method.16.732
DEBUG 2022-01-28 15:49:18,961 on stmt: $42call_function.18.734 = call $18load_global.6.724($24binary_subscr.9.726, $40binary_add.17.733, func=$18load_global.6.724, args=[Var($24binary_subscr.9.726, <string>:4), Var($40binary_add.17.733, <string>:4)], kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:18,961 on stmt: $44get_iter.19.735 = getiter(value=$42call_function.18.734)
DEBUG 2022-01-28 15:49:18,961 on stmt: $phi46.0.736 = $44get_iter.19.735
DEBUG 2022-01-28 15:49:18,961 on stmt: $arg_out_var.202 = const(int, 1)
DEBUG 2022-01-28 15:49:18,961 on stmt: $64load_global.2.127 = global(max: <built-in function max>)
DEBUG 2022-01-28 15:49:18,961 on stmt: jump 46
DEBUG 2022-01-28 15:49:18,961 ==== SSA block rewrite pass on 46
DEBUG 2022-01-28 15:49:18,961 Running <numba.core.ssa._FreshVarHandler object at 0x000002410C7C71C0>
DEBUG 2022-01-28 15:49:18,961 on stmt: val_70.2 = phi(incoming_values=[Var(val_70, <string>:3), Var(val_70.1, parfor.py:279)], incoming_blocks=[0, 891])
DEBUG 2022-01-28 15:49:18,961 on stmt: $46for_iter.1.737 = iternext(value=$phi46.0.736)
DEBUG 2022-01-28 15:49:18,961 on stmt: $46for_iter.2.738 = pair_first(value=$46for_iter.1.737)
DEBUG 2022-01-28 15:49:18,961 on stmt: $46for_iter.3.739 = pair_second(value=$46for_iter.1.737)
DEBUG 2022-01-28 15:49:18,961 on stmt: $phi48.1.740 = $46for_iter.2.738
DEBUG 2022-01-28 15:49:18,961 on stmt: branch $46for_iter.3.739, 48, 892
DEBUG 2022-01-28 15:49:18,961 ==== SSA block rewrite pass on 48
DEBUG 2022-01-28 15:49:18,961 Running <numba.core.ssa._FreshVarHandler object at 0x000002410C7C71C0>
DEBUG 2022-01-28 15:49:18,961 on stmt: parfor__index_196 = $phi48.1.740
DEBUG 2022-01-28 15:49:18,961 on stmt: jump 56
DEBUG 2022-01-28 15:49:18,961 ==== SSA block rewrite pass on 892
DEBUG 2022-01-28 15:49:18,961 Running <numba.core.ssa._FreshVarHandler object at 0x000002410C7C71C0>
DEBUG 2022-01-28 15:49:18,961 on stmt: $const60.2.741 = const(int, 0)
DEBUG 2022-01-28 15:49:18,961 on stmt: val_111__arr[$const60.2.741] = val_111
DEBUG 2022-01-28 15:49:18,961 on stmt: $const68.5.742 = const(int, 0)
DEBUG 2022-01-28 15:49:18,961 on stmt: val_70__arr[$const68.5.742] = val_70.2
DEBUG 2022-01-28 15:49:18,969 on stmt: $const72.6.743 = const(NoneType, None)
DEBUG 2022-01-28 15:49:18,969 on stmt: $74return_value.7.744 = cast(value=$const72.6.743)
DEBUG 2022-01-28 15:49:18,969 on stmt: return $74return_value.7.744
DEBUG 2022-01-28 15:49:18,969 ==== SSA block rewrite pass on 56
DEBUG 2022-01-28 15:49:18,969 Running <numba.core.ssa._FreshVarHandler object at 0x000002410C7C71C0>
DEBUG 2022-01-28 15:49:18,969 on stmt: $arg_out_var.201 = getitem(value=edge__reps, index=parfor__index_196, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:18,969 on stmt: $expr_out_var.200 = $arg_out_var.201 + $arg_out_var.202
DEBUG 2022-01-28 15:49:18,969 on stmt: $val.70.599 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=val_70.2, rhs=$expr_out_var.200, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-01-28 15:49:18,969 on stmt: val_70.1 = $val.70.599
DEBUG 2022-01-28 15:49:18,969 on stmt: $72binary_subscr.6.131 = getitem(value=edge__reps, index=parfor__index_196, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:18,969 on stmt: val_111 = call $64load_global.2.127(val_111, $72binary_subscr.6.131, func=$64load_global.2.127, args=[Var(val_111, parfor.py:156), Var($72binary_subscr.6.131, parfor.py:158)], kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:18,969 replaced with: val_111.1 = call $64load_global.2.127(val_111, $72binary_subscr.6.131, func=$64load_global.2.127, args=[Var(val_111, parfor.py:156), Var($72binary_subscr.6.131, parfor.py:158)], kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:18,969 on stmt: jump 891
DEBUG 2022-01-28 15:49:18,969 ==== SSA block rewrite pass on 891
DEBUG 2022-01-28 15:49:18,969 Running <numba.core.ssa._FreshVarHandler object at 0x000002410C7C71C0>
DEBUG 2022-01-28 15:49:18,969 on stmt: jump 46
DEBUG 2022-01-28 15:49:18,969 Replaced assignments: defaultdict(<class 'list'>,
            {0: [<numba.core.ir.Assign object at 0x000002410C7C7D30>],
             56: [<numba.core.ir.Assign object at 0x000002410C7CC0A0>]})
DEBUG 2022-01-28 15:49:18,969 ==== SSA block rewrite pass on 0
DEBUG 2022-01-28 15:49:18,969 Running <numba.core.ssa._FixSSAVars object at 0x000002410C7C73D0>
DEBUG 2022-01-28 15:49:18,969 on stmt: sched.721 = arg(0, name=sched)
DEBUG 2022-01-28 15:49:18,969 on stmt: edge__reps = arg(1, name=edge__reps)
DEBUG 2022-01-28 15:49:18,969 on stmt: val_111__arr = arg(2, name=val_111__arr)
DEBUG 2022-01-28 15:49:18,971 on stmt: val_70__arr = arg(3, name=val_70__arr)
DEBUG 2022-01-28 15:49:18,971 on stmt: $const4.1.722 = const(int, 0)
DEBUG 2022-01-28 15:49:18,971 on stmt: val_111 = getitem(value=val_111__arr, index=$const4.1.722, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:18,971 on stmt: $const12.4.723 = const(int, 0)
DEBUG 2022-01-28 15:49:18,971 on stmt: val_70 = getitem(value=val_70__arr, index=$const12.4.723, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:18,971 on stmt: $18load_global.6.724 = global(range: <class 'range'>)
DEBUG 2022-01-28 15:49:18,971 on stmt: $const22.8.725 = const(int, 0)
DEBUG 2022-01-28 15:49:18,971 on stmt: $24binary_subscr.9.726 = getitem(value=sched.721, index=$const22.8.725, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:18,971 on stmt: $const28.11.727 = const(int, 1)
DEBUG 2022-01-28 15:49:18,971 on stmt: $30binary_subscr.12.728 = getitem(value=sched.721, index=$const28.11.727, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:18,971 on stmt: $32load_global.13.729 = global(np: <module 'numpy' from 'C:\\Users\\zl4821\\Anaconda3\\envs\\GBS\\lib\\site-packages\\numpy\\__init__.py'>)
DEBUG 2022-01-28 15:49:18,971 on stmt: $34load_method.14.730 = getattr(value=$32load_global.13.729, attr=uint8)
DEBUG 2022-01-28 15:49:18,971 on stmt: $const36.15.731 = const(int, 1)
DEBUG 2022-01-28 15:49:18,971 on stmt: $38call_method.16.732 = call $34load_method.14.730($const36.15.731, func=$34load_method.14.730, args=[Var($const36.15.731, <string>:4)], kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:18,971 on stmt: $40binary_add.17.733 = $30binary_subscr.12.728 + $38call_method.16.732
DEBUG 2022-01-28 15:49:18,971 on stmt: $42call_function.18.734 = call $18load_global.6.724($24binary_subscr.9.726, $40binary_add.17.733, func=$18load_global.6.724, args=[Var($24binary_subscr.9.726, <string>:4), Var($40binary_add.17.733, <string>:4)], kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:18,971 on stmt: $44get_iter.19.735 = getiter(value=$42call_function.18.734)
DEBUG 2022-01-28 15:49:18,971 on stmt: $phi46.0.736 = $44get_iter.19.735
DEBUG 2022-01-28 15:49:18,971 on stmt: $arg_out_var.202 = const(int, 1)
DEBUG 2022-01-28 15:49:18,971 on stmt: $64load_global.2.127 = global(max: <built-in function max>)
DEBUG 2022-01-28 15:49:18,971 on stmt: jump 46
DEBUG 2022-01-28 15:49:18,971 ==== SSA block rewrite pass on 46
DEBUG 2022-01-28 15:49:18,971 Running <numba.core.ssa._FixSSAVars object at 0x000002410C7C73D0>
DEBUG 2022-01-28 15:49:18,971 on stmt: val_70.2 = phi(incoming_values=[Var(val_70, <string>:3), Var(val_70.1, parfor.py:279)], incoming_blocks=[0, 891])
DEBUG 2022-01-28 15:49:18,971 on stmt: $46for_iter.1.737 = iternext(value=$phi46.0.736)
DEBUG 2022-01-28 15:49:18,971 on stmt: $46for_iter.2.738 = pair_first(value=$46for_iter.1.737)
DEBUG 2022-01-28 15:49:18,971 on stmt: $46for_iter.3.739 = pair_second(value=$46for_iter.1.737)
DEBUG 2022-01-28 15:49:18,971 on stmt: $phi48.1.740 = $46for_iter.2.738
DEBUG 2022-01-28 15:49:18,971 on stmt: branch $46for_iter.3.739, 48, 892
DEBUG 2022-01-28 15:49:18,971 ==== SSA block rewrite pass on 48
DEBUG 2022-01-28 15:49:18,971 Running <numba.core.ssa._FixSSAVars object at 0x000002410C7C73D0>
DEBUG 2022-01-28 15:49:18,971 on stmt: parfor__index_196 = $phi48.1.740
DEBUG 2022-01-28 15:49:18,971 on stmt: jump 56
DEBUG 2022-01-28 15:49:18,971 ==== SSA block rewrite pass on 892
DEBUG 2022-01-28 15:49:18,971 Running <numba.core.ssa._FixSSAVars object at 0x000002410C7C73D0>
DEBUG 2022-01-28 15:49:18,971 on stmt: $const60.2.741 = const(int, 0)
DEBUG 2022-01-28 15:49:18,971 on stmt: val_111__arr[$const60.2.741] = val_111
DEBUG 2022-01-28 15:49:18,971 find_def var='val_111' stmt=val_111__arr[$const60.2.741] = val_111
DEBUG 2022-01-28 15:49:18,971 find_def_from_top label 892
DEBUG 2022-01-28 15:49:18,971 idom 46 from label 892
DEBUG 2022-01-28 15:49:18,971 find_def_from_bottom label 46
DEBUG 2022-01-28 15:49:18,971 find_def_from_top label 46
DEBUG 2022-01-28 15:49:18,971 insert phi node val_111.2 = phi(incoming_values=[], incoming_blocks=[]) at 46
DEBUG 2022-01-28 15:49:18,971 find_def_from_bottom label 0
DEBUG 2022-01-28 15:49:18,971 incoming_def val_111 = getitem(value=val_111__arr, index=$const4.1.722, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:18,971 find_def_from_bottom label 891
DEBUG 2022-01-28 15:49:18,971 find_def_from_top label 891
DEBUG 2022-01-28 15:49:18,971 idom 56 from label 891
DEBUG 2022-01-28 15:49:18,971 find_def_from_bottom label 56
DEBUG 2022-01-28 15:49:18,971 incoming_def val_111.1 = call $64load_global.2.127(val_111, $72binary_subscr.6.131, func=$64load_global.2.127, args=[Var(val_111, parfor.py:156), Var($72binary_subscr.6.131, parfor.py:158)], kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:18,971 replaced with: val_111__arr[$const60.2.741] = val_111.2
DEBUG 2022-01-28 15:49:18,971 on stmt: $const68.5.742 = const(int, 0)
DEBUG 2022-01-28 15:49:18,971 on stmt: val_70__arr[$const68.5.742] = val_70.2
DEBUG 2022-01-28 15:49:18,971 on stmt: $const72.6.743 = const(NoneType, None)
DEBUG 2022-01-28 15:49:18,971 on stmt: $74return_value.7.744 = cast(value=$const72.6.743)
DEBUG 2022-01-28 15:49:18,971 on stmt: return $74return_value.7.744
DEBUG 2022-01-28 15:49:18,971 ==== SSA block rewrite pass on 56
DEBUG 2022-01-28 15:49:18,971 Running <numba.core.ssa._FixSSAVars object at 0x000002410C7C73D0>
DEBUG 2022-01-28 15:49:18,971 on stmt: $arg_out_var.201 = getitem(value=edge__reps, index=parfor__index_196, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:18,971 on stmt: $expr_out_var.200 = $arg_out_var.201 + $arg_out_var.202
DEBUG 2022-01-28 15:49:18,971 on stmt: $val.70.599 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=val_70.2, rhs=$expr_out_var.200, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-01-28 15:49:18,971 on stmt: val_70.1 = $val.70.599
DEBUG 2022-01-28 15:49:18,971 on stmt: $72binary_subscr.6.131 = getitem(value=edge__reps, index=parfor__index_196, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:18,971 on stmt: val_111.1 = call $64load_global.2.127(val_111, $72binary_subscr.6.131, func=$64load_global.2.127, args=[Var(val_111, parfor.py:156), Var($72binary_subscr.6.131, parfor.py:158)], kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:18,971 find_def var='val_111' stmt=val_111.1 = call $64load_global.2.127(val_111, $72binary_subscr.6.131, func=$64load_global.2.127, args=[Var(val_111, parfor.py:156), Var($72binary_subscr.6.131, parfor.py:158)], kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:18,971 find_def_from_top label 56
DEBUG 2022-01-28 15:49:18,971 idom 48 from label 56
DEBUG 2022-01-28 15:49:18,971 find_def_from_bottom label 48
DEBUG 2022-01-28 15:49:18,971 find_def_from_top label 48
DEBUG 2022-01-28 15:49:18,971 idom 46 from label 48
DEBUG 2022-01-28 15:49:18,971 find_def_from_bottom label 46
DEBUG 2022-01-28 15:49:18,971 replaced with: val_111.1 = call $64load_global.2.127(val_111.2, $72binary_subscr.6.131, func=$64load_global.2.127, args=[Var(val_111.2, <string>:6), Var($72binary_subscr.6.131, parfor.py:158)], kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:18,971 on stmt: jump 891
DEBUG 2022-01-28 15:49:18,971 ==== SSA block rewrite pass on 891
DEBUG 2022-01-28 15:49:18,971 Running <numba.core.ssa._FixSSAVars object at 0x000002410C7C73D0>
DEBUG 2022-01-28 15:49:18,971 on stmt: jump 46
DEBUG 2022-01-28 15:49:19,266 bytecode dump:
>          0	NOP(arg=None, lineno=2)
           2	LOAD_GLOBAL(arg=0, lineno=2)
           4	LOAD_FAST(arg=0, lineno=2)
           6	LOAD_CONST(arg=1, lineno=2)
           8	BINARY_SUBSCR(arg=None, lineno=2)
          10	LOAD_FAST(arg=0, lineno=2)
          12	LOAD_CONST(arg=2, lineno=2)
          14	BINARY_SUBSCR(arg=None, lineno=2)
          16	LOAD_GLOBAL(arg=1, lineno=2)
          18	LOAD_METHOD(arg=2, lineno=2)
          20	LOAD_CONST(arg=2, lineno=2)
          22	CALL_METHOD(arg=1, lineno=2)
          24	BINARY_ADD(arg=None, lineno=2)
          26	CALL_FUNCTION(arg=2, lineno=2)
          28	GET_ITER(arg=None, lineno=2)
>         30	FOR_ITER(arg=8, lineno=2)
          32	STORE_FAST(arg=2, lineno=2)
          34	LOAD_CONST(arg=1, lineno=3)
          36	STORE_FAST(arg=3, lineno=3)
          38	JUMP_ABSOLUTE(arg=30, lineno=3)
>         40	LOAD_CONST(arg=0, lineno=4)
          42	RETURN_VALUE(arg=None, lineno=4)
DEBUG 2022-01-28 15:49:19,266 pending: deque([State(pc_initial=0 nstack_initial=0)])
DEBUG 2022-01-28 15:49:19,266 stack: []
DEBUG 2022-01-28 15:49:19,266 dispatch pc=0, inst=NOP(arg=None, lineno=2)
DEBUG 2022-01-28 15:49:19,266 stack []
DEBUG 2022-01-28 15:49:19,266 dispatch pc=2, inst=LOAD_GLOBAL(arg=0, lineno=2)
DEBUG 2022-01-28 15:49:19,266 stack []
DEBUG 2022-01-28 15:49:19,266 dispatch pc=4, inst=LOAD_FAST(arg=0, lineno=2)
DEBUG 2022-01-28 15:49:19,266 stack ['$2load_global.0']
DEBUG 2022-01-28 15:49:19,274 dispatch pc=6, inst=LOAD_CONST(arg=1, lineno=2)
DEBUG 2022-01-28 15:49:19,274 stack ['$2load_global.0', '$sched4.1']
DEBUG 2022-01-28 15:49:19,274 dispatch pc=8, inst=BINARY_SUBSCR(arg=None, lineno=2)
DEBUG 2022-01-28 15:49:19,274 stack ['$2load_global.0', '$sched4.1', '$const6.2']
DEBUG 2022-01-28 15:49:19,274 dispatch pc=10, inst=LOAD_FAST(arg=0, lineno=2)
DEBUG 2022-01-28 15:49:19,274 stack ['$2load_global.0', '$8binary_subscr.3']
DEBUG 2022-01-28 15:49:19,274 dispatch pc=12, inst=LOAD_CONST(arg=2, lineno=2)
DEBUG 2022-01-28 15:49:19,274 stack ['$2load_global.0', '$8binary_subscr.3', '$sched10.4']
DEBUG 2022-01-28 15:49:19,274 dispatch pc=14, inst=BINARY_SUBSCR(arg=None, lineno=2)
DEBUG 2022-01-28 15:49:19,274 stack ['$2load_global.0', '$8binary_subscr.3', '$sched10.4', '$const12.5']
DEBUG 2022-01-28 15:49:19,274 dispatch pc=16, inst=LOAD_GLOBAL(arg=1, lineno=2)
DEBUG 2022-01-28 15:49:19,274 stack ['$2load_global.0', '$8binary_subscr.3', '$14binary_subscr.6']
DEBUG 2022-01-28 15:49:19,274 dispatch pc=18, inst=LOAD_METHOD(arg=2, lineno=2)
DEBUG 2022-01-28 15:49:19,274 stack ['$2load_global.0', '$8binary_subscr.3', '$14binary_subscr.6', '$16load_global.7']
DEBUG 2022-01-28 15:49:19,274 dispatch pc=20, inst=LOAD_CONST(arg=2, lineno=2)
DEBUG 2022-01-28 15:49:19,274 stack ['$2load_global.0', '$8binary_subscr.3', '$14binary_subscr.6', '$18load_method.8']
DEBUG 2022-01-28 15:49:19,274 dispatch pc=22, inst=CALL_METHOD(arg=1, lineno=2)
DEBUG 2022-01-28 15:49:19,274 stack ['$2load_global.0', '$8binary_subscr.3', '$14binary_subscr.6', '$18load_method.8', '$const20.9']
DEBUG 2022-01-28 15:49:19,274 dispatch pc=24, inst=BINARY_ADD(arg=None, lineno=2)
DEBUG 2022-01-28 15:49:19,276 stack ['$2load_global.0', '$8binary_subscr.3', '$14binary_subscr.6', '$22call_method.10']
DEBUG 2022-01-28 15:49:19,276 dispatch pc=26, inst=CALL_FUNCTION(arg=2, lineno=2)
DEBUG 2022-01-28 15:49:19,276 stack ['$2load_global.0', '$8binary_subscr.3', '$24binary_add.11']
DEBUG 2022-01-28 15:49:19,276 dispatch pc=28, inst=GET_ITER(arg=None, lineno=2)
DEBUG 2022-01-28 15:49:19,276 stack ['$26call_function.12']
DEBUG 2022-01-28 15:49:19,276 end state. edges=[Edge(pc=30, stack=('$28get_iter.13',), blockstack=(), npush=0)]
DEBUG 2022-01-28 15:49:19,276 pending: deque([State(pc_initial=30 nstack_initial=1)])
DEBUG 2022-01-28 15:49:19,276 stack: ['$phi30.0']
DEBUG 2022-01-28 15:49:19,276 dispatch pc=30, inst=FOR_ITER(arg=8, lineno=2)
DEBUG 2022-01-28 15:49:19,276 stack ['$phi30.0']
DEBUG 2022-01-28 15:49:19,276 end state. edges=[Edge(pc=40, stack=(), blockstack=(), npush=0), Edge(pc=32, stack=('$phi30.0', '$30for_iter.2'), blockstack=(), npush=0)]
DEBUG 2022-01-28 15:49:19,276 pending: deque([State(pc_initial=40 nstack_initial=0), State(pc_initial=32 nstack_initial=2)])
DEBUG 2022-01-28 15:49:19,276 stack: []
DEBUG 2022-01-28 15:49:19,276 dispatch pc=40, inst=LOAD_CONST(arg=0, lineno=4)
DEBUG 2022-01-28 15:49:19,276 stack []
DEBUG 2022-01-28 15:49:19,276 dispatch pc=42, inst=RETURN_VALUE(arg=None, lineno=4)
DEBUG 2022-01-28 15:49:19,276 stack ['$const40.0']
DEBUG 2022-01-28 15:49:19,276 end state. edges=[]
DEBUG 2022-01-28 15:49:19,276 pending: deque([State(pc_initial=32 nstack_initial=2)])
DEBUG 2022-01-28 15:49:19,276 stack: ['$phi32.0', '$phi32.1']
DEBUG 2022-01-28 15:49:19,276 dispatch pc=32, inst=STORE_FAST(arg=2, lineno=2)
DEBUG 2022-01-28 15:49:19,276 stack ['$phi32.0', '$phi32.1']
DEBUG 2022-01-28 15:49:19,276 dispatch pc=34, inst=LOAD_CONST(arg=1, lineno=3)
DEBUG 2022-01-28 15:49:19,276 stack ['$phi32.0']
DEBUG 2022-01-28 15:49:19,276 dispatch pc=36, inst=STORE_FAST(arg=3, lineno=3)
DEBUG 2022-01-28 15:49:19,276 stack ['$phi32.0', '$const34.2']
DEBUG 2022-01-28 15:49:19,276 dispatch pc=38, inst=JUMP_ABSOLUTE(arg=30, lineno=3)
DEBUG 2022-01-28 15:49:19,276 stack ['$phi32.0']
DEBUG 2022-01-28 15:49:19,276 end state. edges=[Edge(pc=30, stack=('$phi32.0',), blockstack=(), npush=0)]
DEBUG 2022-01-28 15:49:19,276 pending: deque([State(pc_initial=30 nstack_initial=1)])
DEBUG 2022-01-28 15:49:19,276 -------------------------Prune PHIs-------------------------
DEBUG 2022-01-28 15:49:19,276 Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=30 nstack_initial=1): {'$phi30.0'},
             State(pc_initial=32 nstack_initial=2): {'$phi32.1'},
             State(pc_initial=40 nstack_initial=0): set()})
DEBUG 2022-01-28 15:49:19,276 defmap: {'$phi30.0': State(pc_initial=0 nstack_initial=0),
 '$phi32.1': State(pc_initial=30 nstack_initial=1)}
DEBUG 2022-01-28 15:49:19,276 phismap: defaultdict(<class 'set'>,
            {'$phi30.0': {('$28get_iter.13',
                           State(pc_initial=0 nstack_initial=0)),
                          ('$phi32.0', State(pc_initial=32 nstack_initial=2))},
             '$phi32.0': {('$phi30.0', State(pc_initial=30 nstack_initial=1))},
             '$phi32.1': {('$30for_iter.2',
                           State(pc_initial=30 nstack_initial=1))}})
DEBUG 2022-01-28 15:49:19,276 changing phismap: defaultdict(<class 'set'>,
            {'$phi30.0': {('$28get_iter.13',
                           State(pc_initial=0 nstack_initial=0)),
                          ('$phi30.0', State(pc_initial=30 nstack_initial=1))},
             '$phi32.0': {('$28get_iter.13',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi32.1': {('$30for_iter.2',
                           State(pc_initial=30 nstack_initial=1))}})
DEBUG 2022-01-28 15:49:19,276 changing phismap: defaultdict(<class 'set'>,
            {'$phi30.0': {('$28get_iter.13',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi32.0': {('$28get_iter.13',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi32.1': {('$30for_iter.2',
                           State(pc_initial=30 nstack_initial=1))}})
DEBUG 2022-01-28 15:49:19,276 changing phismap: defaultdict(<class 'set'>,
            {'$phi30.0': {('$28get_iter.13',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi32.0': {('$28get_iter.13',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi32.1': {('$30for_iter.2',
                           State(pc_initial=30 nstack_initial=1))}})
DEBUG 2022-01-28 15:49:19,276 keep phismap: {'$phi30.0': {('$28get_iter.13', State(pc_initial=0 nstack_initial=0))},
 '$phi32.1': {('$30for_iter.2', State(pc_initial=30 nstack_initial=1))}}
DEBUG 2022-01-28 15:49:19,276 new_out: defaultdict(<class 'dict'>,
            {State(pc_initial=0 nstack_initial=0): {'$phi30.0': '$28get_iter.13'},
             State(pc_initial=30 nstack_initial=1): {'$phi32.1': '$30for_iter.2'}})
DEBUG 2022-01-28 15:49:19,276 ----------------------DONE Prune PHIs-----------------------
DEBUG 2022-01-28 15:49:19,276 block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$2load_global.0'}), (4, {'res': '$sched4.1'}), (6, {'res': '$const6.2'}), (8, {'index': '$const6.2', 'target': '$sched4.1', 'res': '$8binary_subscr.3'}), (10, {'res': '$sched10.4'}), (12, {'res': '$const12.5'}), (14, {'index': '$const12.5', 'target': '$sched10.4', 'res': '$14binary_subscr.6'}), (16, {'res': '$16load_global.7'}), (18, {'item': '$16load_global.7', 'res': '$18load_method.8'}), (20, {'res': '$const20.9'}), (22, {'func': '$18load_method.8', 'args': ['$const20.9'], 'res': '$22call_method.10'}), (24, {'lhs': '$14binary_subscr.6', 'rhs': '$22call_method.10', 'res': '$24binary_add.11'}), (26, {'func': '$2load_global.0', 'args': ['$8binary_subscr.3', '$24binary_add.11'], 'res': '$26call_function.12'}), (28, {'value': '$26call_function.12', 'res': '$28get_iter.13'})), outgoing_phis={'$phi30.0': '$28get_iter.13'}, blockstack=(), active_try_block=None, outgoing_edgepushed={30: ('$28get_iter.13',)})
DEBUG 2022-01-28 15:49:19,276 block_infos State(pc_initial=30 nstack_initial=1):
AdaptBlockInfo(insts=((30, {'iterator': '$phi30.0', 'pair': '$30for_iter.1', 'indval': '$30for_iter.2', 'pred': '$30for_iter.3'}),), outgoing_phis={'$phi32.1': '$30for_iter.2'}, blockstack=(), active_try_block=None, outgoing_edgepushed={40: (), 32: ('$phi30.0', '$30for_iter.2')})
DEBUG 2022-01-28 15:49:19,276 block_infos State(pc_initial=32 nstack_initial=2):
AdaptBlockInfo(insts=((32, {'value': '$phi32.1'}), (34, {'res': '$const34.2'}), (36, {'value': '$const34.2'}), (38, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={30: ('$phi32.0',)})
DEBUG 2022-01-28 15:49:19,276 block_infos State(pc_initial=40 nstack_initial=0):
AdaptBlockInfo(insts=((40, {'res': '$const40.0'}), (42, {'retval': '$const40.0', 'castval': '$42return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG 2022-01-28 15:49:19,276 label 0:
    sched = arg(0, name=sched)               ['sched']
    H__batch = arg(1, name=H__batch)         ['H__batch']
    $2load_global.0 = global(range: <class 'range'>) ['$2load_global.0']
    $const6.2 = const(int, 0)                ['$const6.2']
    $8binary_subscr.3 = getitem(value=sched, index=$const6.2, fn=<built-in function getitem>) ['$8binary_subscr.3', '$const6.2', 'sched']
    $const12.5 = const(int, 1)               ['$const12.5']
    $14binary_subscr.6 = getitem(value=sched, index=$const12.5, fn=<built-in function getitem>) ['$14binary_subscr.6', '$const12.5', 'sched']
    $16load_global.7 = global(np: <module 'numpy' from 'C:\\Users\\zl4821\\Anaconda3\\envs\\GBS\\lib\\site-packages\\numpy\\__init__.py'>) ['$16load_global.7']
    $18load_method.8 = getattr(value=$16load_global.7, attr=uint8) ['$16load_global.7', '$18load_method.8']
    $const20.9 = const(int, 1)               ['$const20.9']
    $22call_method.10 = call $18load_method.8($const20.9, func=$18load_method.8, args=[Var($const20.9, <string>:2)], kws=(), vararg=None, target=None) ['$18load_method.8', '$22call_method.10', '$const20.9']
    $24binary_add.11 = $14binary_subscr.6 + $22call_method.10 ['$14binary_subscr.6', '$22call_method.10', '$24binary_add.11']
    $26call_function.12 = call $2load_global.0($8binary_subscr.3, $24binary_add.11, func=$2load_global.0, args=[Var($8binary_subscr.3, <string>:2), Var($24binary_add.11, <string>:2)], kws=(), vararg=None, target=None) ['$24binary_add.11', '$26call_function.12', '$2load_global.0', '$8binary_subscr.3']
    $28get_iter.13 = getiter(value=$26call_function.12) ['$26call_function.12', '$28get_iter.13']
    $phi30.0 = $28get_iter.13                ['$28get_iter.13', '$phi30.0']
    jump 30                                  []
label 30:
    $30for_iter.1 = iternext(value=$phi30.0) ['$30for_iter.1', '$phi30.0']
    $30for_iter.2 = pair_first(value=$30for_iter.1) ['$30for_iter.1', '$30for_iter.2']
    $30for_iter.3 = pair_second(value=$30for_iter.1) ['$30for_iter.1', '$30for_iter.3']
    $phi32.1 = $30for_iter.2                 ['$30for_iter.2', '$phi32.1']
    branch $30for_iter.3, 32, 40             ['$30for_iter.3']
label 32:
    parfor__index_203 = $phi32.1             ['$phi32.1', 'parfor__index_203']
    __sentinel__0 = const(int, 0)            ['__sentinel__0']
    jump 30                                  []
label 40:
    $const40.0 = const(NoneType, None)       ['$const40.0']
    $42return_value.1 = cast(value=$const40.0) ['$42return_value.1', '$const40.0']
    return $42return_value.1                 ['$42return_value.1']

DEBUG 2022-01-28 15:49:19,286 ==== SSA block analysis pass on 0
DEBUG 2022-01-28 15:49:19,286 Running <numba.core.ssa._GatherDefsHandler object at 0x000002410C87CF70>
DEBUG 2022-01-28 15:49:19,286 on stmt: sched.791 = arg(0, name=sched)
DEBUG 2022-01-28 15:49:19,286 on stmt: H__batch = arg(1, name=H__batch)
DEBUG 2022-01-28 15:49:19,286 on stmt: $2load_global.0.792 = global(range: <class 'range'>)
DEBUG 2022-01-28 15:49:19,286 on stmt: $const6.2.793 = const(int, 0)
DEBUG 2022-01-28 15:49:19,286 on stmt: $8binary_subscr.3.794 = getitem(value=sched.791, index=$const6.2.793, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:19,286 on stmt: $const12.5.795 = const(int, 1)
DEBUG 2022-01-28 15:49:19,286 on stmt: $14binary_subscr.6.796 = getitem(value=sched.791, index=$const12.5.795, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:19,286 on stmt: $16load_global.7.797 = global(np: <module 'numpy' from 'C:\\Users\\zl4821\\Anaconda3\\envs\\GBS\\lib\\site-packages\\numpy\\__init__.py'>)
DEBUG 2022-01-28 15:49:19,286 on stmt: $18load_method.8.798 = getattr(value=$16load_global.7.797, attr=uint8)
DEBUG 2022-01-28 15:49:19,286 on stmt: $const20.9.799 = const(int, 1)
DEBUG 2022-01-28 15:49:19,286 on stmt: $22call_method.10.800 = call $18load_method.8.798($const20.9.799, func=$18load_method.8.798, args=[Var($const20.9.799, <string>:2)], kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:19,286 on stmt: $24binary_add.11.801 = $14binary_subscr.6.796 + $22call_method.10.800
DEBUG 2022-01-28 15:49:19,286 on stmt: $26call_function.12.802 = call $2load_global.0.792($8binary_subscr.3.794, $24binary_add.11.801, func=$2load_global.0.792, args=[Var($8binary_subscr.3.794, <string>:2), Var($24binary_add.11.801, <string>:2)], kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:19,286 on stmt: $28get_iter.13.803 = getiter(value=$26call_function.12.802)
DEBUG 2022-01-28 15:49:19,286 on stmt: $phi30.0.804 = $28get_iter.13.803
DEBUG 2022-01-28 15:49:19,286 on stmt: $expr_out_var.207 = const(complex128, 0j)
DEBUG 2022-01-28 15:49:19,286 on stmt: jump 30
DEBUG 2022-01-28 15:49:19,286 ==== SSA block analysis pass on 30
DEBUG 2022-01-28 15:49:19,286 Running <numba.core.ssa._GatherDefsHandler object at 0x000002410C87CF70>
DEBUG 2022-01-28 15:49:19,286 on stmt: $30for_iter.1.805 = iternext(value=$phi30.0.804)
DEBUG 2022-01-28 15:49:19,286 on stmt: $30for_iter.2.806 = pair_first(value=$30for_iter.1.805)
DEBUG 2022-01-28 15:49:19,286 on stmt: $30for_iter.3.807 = pair_second(value=$30for_iter.1.805)
DEBUG 2022-01-28 15:49:19,286 on stmt: $phi32.1.808 = $30for_iter.2.806
DEBUG 2022-01-28 15:49:19,286 on stmt: branch $30for_iter.3.807, 32, 877
DEBUG 2022-01-28 15:49:19,286 ==== SSA block analysis pass on 32
DEBUG 2022-01-28 15:49:19,286 Running <numba.core.ssa._GatherDefsHandler object at 0x000002410C87CF70>
DEBUG 2022-01-28 15:49:19,286 on stmt: parfor__index_203 = $phi32.1.808
DEBUG 2022-01-28 15:49:19,286 on stmt: jump 40
DEBUG 2022-01-28 15:49:19,286 ==== SSA block analysis pass on 877
DEBUG 2022-01-28 15:49:19,286 Running <numba.core.ssa._GatherDefsHandler object at 0x000002410C87CF70>
DEBUG 2022-01-28 15:49:19,286 on stmt: $const40.0.809 = const(NoneType, None)
DEBUG 2022-01-28 15:49:19,286 on stmt: $42return_value.1.810 = cast(value=$const40.0.809)
DEBUG 2022-01-28 15:49:19,286 on stmt: return $42return_value.1.810
DEBUG 2022-01-28 15:49:19,286 ==== SSA block analysis pass on 40
DEBUG 2022-01-28 15:49:19,286 Running <numba.core.ssa._GatherDefsHandler object at 0x000002410C87CF70>
DEBUG 2022-01-28 15:49:19,286 on stmt: H__batch[parfor__index_203] = $expr_out_var.207
DEBUG 2022-01-28 15:49:19,286 on stmt: jump 876
DEBUG 2022-01-28 15:49:19,286 ==== SSA block analysis pass on 876
DEBUG 2022-01-28 15:49:19,286 Running <numba.core.ssa._GatherDefsHandler object at 0x000002410C87CF70>
DEBUG 2022-01-28 15:49:19,286 on stmt: jump 30
DEBUG 2022-01-28 15:49:19,286 defs defaultdict(<class 'list'>,
            {'$14binary_subscr.6.796': [<numba.core.ir.Assign object at 0x000002410C86E880>],
             '$16load_global.7.797': [<numba.core.ir.Assign object at 0x000002410C86EB80>],
             '$18load_method.8.798': [<numba.core.ir.Assign object at 0x000002410C86E610>],
             '$22call_method.10.800': [<numba.core.ir.Assign object at 0x000002410C86EE20>],
             '$24binary_add.11.801': [<numba.core.ir.Assign object at 0x000002410C86ECD0>],
             '$26call_function.12.802': [<numba.core.ir.Assign object at 0x000002410C86EA30>],
             '$28get_iter.13.803': [<numba.core.ir.Assign object at 0x000002410C86EA90>],
             '$2load_global.0.792': [<numba.core.ir.Assign object at 0x000002410C806550>],
             '$30for_iter.1.805': [<numba.core.ir.Assign object at 0x000002410C7BB5E0>],
             '$30for_iter.2.806': [<numba.core.ir.Assign object at 0x000002410C7BB6D0>],
             '$30for_iter.3.807': [<numba.core.ir.Assign object at 0x000002410C7BB850>],
             '$42return_value.1.810': [<numba.core.ir.Assign object at 0x000002410C7BBB80>],
             '$8binary_subscr.3.794': [<numba.core.ir.Assign object at 0x000002410C7DE3D0>],
             '$const12.5.795': [<numba.core.ir.Assign object at 0x000002410C5C3850>],
             '$const20.9.799': [<numba.core.ir.Assign object at 0x000002410C86E040>],
             '$const40.0.809': [<numba.core.ir.Assign object at 0x000002410C8521C0>],
             '$const6.2.793': [<numba.core.ir.Assign object at 0x000002410C7DE490>],
             '$expr_out_var.207': [<numba.core.ir.Assign object at 0x000002410C242340>],
             '$phi30.0.804': [<numba.core.ir.Assign object at 0x000002410C7DE6A0>],
             '$phi32.1.808': [<numba.core.ir.Assign object at 0x000002410C86E220>],
             'H__batch': [<numba.core.ir.Assign object at 0x000002410C8061F0>],
             'parfor__index_203': [<numba.core.ir.Assign object at 0x000002410C7BB220>],
             'sched.791': [<numba.core.ir.Assign object at 0x000002410C806130>]})
DEBUG 2022-01-28 15:49:19,286 SSA violators set()
DEBUG 2022-01-28 15:49:19,439 bytecode dump:
>          0	NOP(arg=None, lineno=3)
           2	LOAD_GLOBAL(arg=0, lineno=3)
           4	LOAD_FAST(arg=0, lineno=3)
           6	LOAD_FAST(arg=1, lineno=3)
           8	CALL_FUNCTION(arg=2, lineno=3)
          10	RETURN_VALUE(arg=None, lineno=3)
DEBUG 2022-01-28 15:49:19,439 pending: deque([State(pc_initial=0 nstack_initial=0)])
DEBUG 2022-01-28 15:49:19,439 stack: []
DEBUG 2022-01-28 15:49:19,439 dispatch pc=0, inst=NOP(arg=None, lineno=3)
DEBUG 2022-01-28 15:49:19,439 stack []
DEBUG 2022-01-28 15:49:19,439 dispatch pc=2, inst=LOAD_GLOBAL(arg=0, lineno=3)
DEBUG 2022-01-28 15:49:19,439 stack []
DEBUG 2022-01-28 15:49:19,439 dispatch pc=4, inst=LOAD_FAST(arg=0, lineno=3)
DEBUG 2022-01-28 15:49:19,439 stack ['$2load_global.0']
DEBUG 2022-01-28 15:49:19,439 dispatch pc=6, inst=LOAD_FAST(arg=1, lineno=3)
DEBUG 2022-01-28 15:49:19,439 stack ['$2load_global.0', '$tmp04.1']
DEBUG 2022-01-28 15:49:19,439 dispatch pc=8, inst=CALL_FUNCTION(arg=2, lineno=3)
DEBUG 2022-01-28 15:49:19,439 stack ['$2load_global.0', '$tmp04.1', '$dtype6.2']
DEBUG 2022-01-28 15:49:19,439 dispatch pc=10, inst=RETURN_VALUE(arg=None, lineno=3)
DEBUG 2022-01-28 15:49:19,439 stack ['$8call_function.3']
DEBUG 2022-01-28 15:49:19,439 end state. edges=[]
DEBUG 2022-01-28 15:49:19,439 -------------------------Prune PHIs-------------------------
DEBUG 2022-01-28 15:49:19,439 Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
DEBUG 2022-01-28 15:49:19,439 defmap: {}
DEBUG 2022-01-28 15:49:19,439 phismap: defaultdict(<class 'set'>, {})
DEBUG 2022-01-28 15:49:19,439 changing phismap: defaultdict(<class 'set'>, {})
DEBUG 2022-01-28 15:49:19,439 keep phismap: {}
DEBUG 2022-01-28 15:49:19,439 new_out: defaultdict(<class 'dict'>, {})
DEBUG 2022-01-28 15:49:19,439 ----------------------DONE Prune PHIs-----------------------
DEBUG 2022-01-28 15:49:19,439 block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$2load_global.0'}), (4, {'res': '$tmp04.1'}), (6, {'res': '$dtype6.2'}), (8, {'func': '$2load_global.0', 'args': ['$tmp04.1', '$dtype6.2'], 'res': '$8call_function.3'}), (10, {'retval': '$8call_function.3', 'castval': '$10return_value.4'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG 2022-01-28 15:49:19,439 label 0:
    tmp0 = arg(0, name=tmp0)                 ['tmp0']
    dtype = arg(1, name=dtype)               ['dtype']
    $2load_global.0 = global(intrin: <intrinsic stub>) ['$2load_global.0']
    $8call_function.3 = call $2load_global.0(tmp0, dtype, func=$2load_global.0, args=[Var(tmp0, <string>:3), Var(dtype, <string>:3)], kws=(), vararg=None, target=None) ['$2load_global.0', '$8call_function.3', 'dtype', 'tmp0']
    $10return_value.4 = cast(value=$8call_function.3) ['$10return_value.4', '$8call_function.3']
    return $10return_value.4                 ['$10return_value.4']

DEBUG 2022-01-28 15:49:19,439 ==== SSA block analysis pass on 0
DEBUG 2022-01-28 15:49:19,439 Running <numba.core.ssa._GatherDefsHandler object at 0x000002410C9CF910>
DEBUG 2022-01-28 15:49:19,439 on stmt: tmp0 = arg(0, name=tmp0)
DEBUG 2022-01-28 15:49:19,439 on stmt: dtype = arg(1, name=dtype)
DEBUG 2022-01-28 15:49:19,439 on stmt: $2load_global.0 = global(intrin: <intrinsic stub>)
DEBUG 2022-01-28 15:49:19,439 on stmt: $8call_function.3 = call $2load_global.0(tmp0, dtype, func=$2load_global.0, args=[Var(tmp0, <string>:3), Var(dtype, <string>:3)], kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:19,447 on stmt: $10return_value.4 = cast(value=$8call_function.3)
DEBUG 2022-01-28 15:49:19,447 on stmt: return $10return_value.4
DEBUG 2022-01-28 15:49:19,447 defs defaultdict(<class 'list'>,
            {'$10return_value.4': [<numba.core.ir.Assign object at 0x000002410C9DBCA0>],
             '$2load_global.0': [<numba.core.ir.Assign object at 0x000002410C9DB760>],
             '$8call_function.3': [<numba.core.ir.Assign object at 0x000002410C9DBB80>],
             'dtype': [<numba.core.ir.Assign object at 0x000002410C9DB070>],
             'tmp0': [<numba.core.ir.Assign object at 0x000002410C9DB190>]})
DEBUG 2022-01-28 15:49:19,447 SSA violators set()
DEBUG 2022-01-28 15:49:19,500 bytecode dump:
>          0	NOP(arg=None, lineno=3)
           2	LOAD_GLOBAL(arg=0, lineno=3)
           4	LOAD_FAST(arg=0, lineno=3)
           6	LOAD_FAST(arg=1, lineno=3)
           8	LOAD_FAST(arg=2, lineno=3)
          10	CALL_FUNCTION(arg=3, lineno=3)
          12	RETURN_VALUE(arg=None, lineno=3)
DEBUG 2022-01-28 15:49:19,500 pending: deque([State(pc_initial=0 nstack_initial=0)])
DEBUG 2022-01-28 15:49:19,500 stack: []
DEBUG 2022-01-28 15:49:19,500 dispatch pc=0, inst=NOP(arg=None, lineno=3)
DEBUG 2022-01-28 15:49:19,500 stack []
DEBUG 2022-01-28 15:49:19,500 dispatch pc=2, inst=LOAD_GLOBAL(arg=0, lineno=3)
DEBUG 2022-01-28 15:49:19,500 stack []
DEBUG 2022-01-28 15:49:19,500 dispatch pc=4, inst=LOAD_FAST(arg=0, lineno=3)
DEBUG 2022-01-28 15:49:19,500 stack ['$2load_global.0']
DEBUG 2022-01-28 15:49:19,500 dispatch pc=6, inst=LOAD_FAST(arg=1, lineno=3)
DEBUG 2022-01-28 15:49:19,500 stack ['$2load_global.0', '$tmp04.1']
DEBUG 2022-01-28 15:49:19,500 dispatch pc=8, inst=LOAD_FAST(arg=2, lineno=3)
DEBUG 2022-01-28 15:49:19,500 stack ['$2load_global.0', '$tmp04.1', '$tmp16.2']
DEBUG 2022-01-28 15:49:19,500 dispatch pc=10, inst=CALL_FUNCTION(arg=3, lineno=3)
DEBUG 2022-01-28 15:49:19,500 stack ['$2load_global.0', '$tmp04.1', '$tmp16.2', '$dtype8.3']
DEBUG 2022-01-28 15:49:19,500 dispatch pc=12, inst=RETURN_VALUE(arg=None, lineno=3)
DEBUG 2022-01-28 15:49:19,500 stack ['$10call_function.4']
DEBUG 2022-01-28 15:49:19,500 end state. edges=[]
DEBUG 2022-01-28 15:49:19,500 -------------------------Prune PHIs-------------------------
DEBUG 2022-01-28 15:49:19,500 Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
DEBUG 2022-01-28 15:49:19,500 defmap: {}
DEBUG 2022-01-28 15:49:19,500 phismap: defaultdict(<class 'set'>, {})
DEBUG 2022-01-28 15:49:19,500 changing phismap: defaultdict(<class 'set'>, {})
DEBUG 2022-01-28 15:49:19,500 keep phismap: {}
DEBUG 2022-01-28 15:49:19,500 new_out: defaultdict(<class 'dict'>, {})
DEBUG 2022-01-28 15:49:19,500 ----------------------DONE Prune PHIs-----------------------
DEBUG 2022-01-28 15:49:19,500 block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$2load_global.0'}), (4, {'res': '$tmp04.1'}), (6, {'res': '$tmp16.2'}), (8, {'res': '$dtype8.3'}), (10, {'func': '$2load_global.0', 'args': ['$tmp04.1', '$tmp16.2', '$dtype8.3'], 'res': '$10call_function.4'}), (12, {'retval': '$10call_function.4', 'castval': '$12return_value.5'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG 2022-01-28 15:49:19,500 label 0:
    tmp0 = arg(0, name=tmp0)                 ['tmp0']
    tmp1 = arg(1, name=tmp1)                 ['tmp1']
    dtype = arg(2, name=dtype)               ['dtype']
    $2load_global.0 = global(intrin: <intrinsic stub>) ['$2load_global.0']
    $10call_function.4 = call $2load_global.0(tmp0, tmp1, dtype, func=$2load_global.0, args=[Var(tmp0, <string>:3), Var(tmp1, <string>:3), Var(dtype, <string>:3)], kws=(), vararg=None, target=None) ['$10call_function.4', '$2load_global.0', 'dtype', 'tmp0', 'tmp1']
    $12return_value.5 = cast(value=$10call_function.4) ['$10call_function.4', '$12return_value.5']
    return $12return_value.5                 ['$12return_value.5']

DEBUG 2022-01-28 15:49:19,508 ==== SSA block analysis pass on 0
DEBUG 2022-01-28 15:49:19,508 Running <numba.core.ssa._GatherDefsHandler object at 0x000002410CA0F910>
DEBUG 2022-01-28 15:49:19,508 on stmt: tmp0 = arg(0, name=tmp0)
DEBUG 2022-01-28 15:49:19,508 on stmt: tmp1 = arg(1, name=tmp1)
DEBUG 2022-01-28 15:49:19,508 on stmt: dtype = arg(2, name=dtype)
DEBUG 2022-01-28 15:49:19,508 on stmt: $2load_global.0 = global(intrin: <intrinsic stub>)
DEBUG 2022-01-28 15:49:19,508 on stmt: $10call_function.4 = call $2load_global.0(tmp0, tmp1, dtype, func=$2load_global.0, args=[Var(tmp0, <string>:3), Var(tmp1, <string>:3), Var(dtype, <string>:3)], kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:19,510 on stmt: $12return_value.5 = cast(value=$10call_function.4)
DEBUG 2022-01-28 15:49:19,510 on stmt: return $12return_value.5
DEBUG 2022-01-28 15:49:19,510 defs defaultdict(<class 'list'>,
            {'$10call_function.4': [<numba.core.ir.Assign object at 0x000002410CA46FA0>],
             '$12return_value.5': [<numba.core.ir.Assign object at 0x000002410CA3F100>],
             '$2load_global.0': [<numba.core.ir.Assign object at 0x000002410CA46A60>],
             'dtype': [<numba.core.ir.Assign object at 0x000002410CA468E0>],
             'tmp0': [<numba.core.ir.Assign object at 0x000002410CA46190>],
             'tmp1': [<numba.core.ir.Assign object at 0x000002410CA46070>]})
DEBUG 2022-01-28 15:49:19,510 SSA violators set()
DEBUG 2022-01-28 15:49:19,510 bytecode dump:
>          0	NOP(arg=None, lineno=3693)
           2	LOAD_GLOBAL(arg=0, lineno=3693)
           4	LOAD_METHOD(arg=1, lineno=3693)
           6	LOAD_FAST(arg=0, lineno=3693)
           8	LOAD_FAST(arg=2, lineno=3693)
          10	CALL_METHOD(arg=2, lineno=3693)
          12	STORE_FAST(arg=3, lineno=3693)
          14	LOAD_GLOBAL(arg=0, lineno=3694)
          16	LOAD_METHOD(arg=2, lineno=3694)
          18	LOAD_FAST(arg=3, lineno=3694)
          20	LOAD_ATTR(arg=3, lineno=3694)
          22	CALL_METHOD(arg=1, lineno=3694)
          24	GET_ITER(arg=None, lineno=3694)
>         26	FOR_ITER(arg=12, lineno=3694)
          28	STORE_FAST(arg=4, lineno=3694)
          30	LOAD_FAST(arg=1, lineno=3695)
          32	LOAD_FAST(arg=3, lineno=3695)
          34	LOAD_FAST(arg=4, lineno=3695)
          36	STORE_SUBSCR(arg=None, lineno=3695)
          38	JUMP_ABSOLUTE(arg=26, lineno=3695)
>         40	LOAD_FAST(arg=3, lineno=3696)
          42	RETURN_VALUE(arg=None, lineno=3696)
DEBUG 2022-01-28 15:49:19,510 pending: deque([State(pc_initial=0 nstack_initial=0)])
DEBUG 2022-01-28 15:49:19,510 stack: []
DEBUG 2022-01-28 15:49:19,510 dispatch pc=0, inst=NOP(arg=None, lineno=3693)
DEBUG 2022-01-28 15:49:19,510 stack []
DEBUG 2022-01-28 15:49:19,510 dispatch pc=2, inst=LOAD_GLOBAL(arg=0, lineno=3693)
DEBUG 2022-01-28 15:49:19,510 stack []
DEBUG 2022-01-28 15:49:19,510 dispatch pc=4, inst=LOAD_METHOD(arg=1, lineno=3693)
DEBUG 2022-01-28 15:49:19,510 stack ['$2load_global.0']
DEBUG 2022-01-28 15:49:19,510 dispatch pc=6, inst=LOAD_FAST(arg=0, lineno=3693)
DEBUG 2022-01-28 15:49:19,510 stack ['$4load_method.1']
DEBUG 2022-01-28 15:49:19,510 dispatch pc=8, inst=LOAD_FAST(arg=2, lineno=3693)
DEBUG 2022-01-28 15:49:19,510 stack ['$4load_method.1', '$shape6.2']
DEBUG 2022-01-28 15:49:19,510 dispatch pc=10, inst=CALL_METHOD(arg=2, lineno=3693)
DEBUG 2022-01-28 15:49:19,510 stack ['$4load_method.1', '$shape6.2', '$dtype8.3']
DEBUG 2022-01-28 15:49:19,510 dispatch pc=12, inst=STORE_FAST(arg=3, lineno=3693)
DEBUG 2022-01-28 15:49:19,510 stack ['$10call_method.4']
DEBUG 2022-01-28 15:49:19,510 dispatch pc=14, inst=LOAD_GLOBAL(arg=0, lineno=3694)
DEBUG 2022-01-28 15:49:19,510 stack []
DEBUG 2022-01-28 15:49:19,510 dispatch pc=16, inst=LOAD_METHOD(arg=2, lineno=3694)
DEBUG 2022-01-28 15:49:19,510 stack ['$14load_global.5']
DEBUG 2022-01-28 15:49:19,510 dispatch pc=18, inst=LOAD_FAST(arg=3, lineno=3694)
DEBUG 2022-01-28 15:49:19,510 stack ['$16load_method.6']
DEBUG 2022-01-28 15:49:19,510 dispatch pc=20, inst=LOAD_ATTR(arg=3, lineno=3694)
DEBUG 2022-01-28 15:49:19,518 stack ['$16load_method.6', '$arr18.7']
DEBUG 2022-01-28 15:49:19,518 dispatch pc=22, inst=CALL_METHOD(arg=1, lineno=3694)
DEBUG 2022-01-28 15:49:19,518 stack ['$16load_method.6', '$20load_attr.8']
DEBUG 2022-01-28 15:49:19,518 dispatch pc=24, inst=GET_ITER(arg=None, lineno=3694)
DEBUG 2022-01-28 15:49:19,518 stack ['$22call_method.9']
DEBUG 2022-01-28 15:49:19,518 end state. edges=[Edge(pc=26, stack=('$24get_iter.10',), blockstack=(), npush=0)]
DEBUG 2022-01-28 15:49:19,518 pending: deque([State(pc_initial=26 nstack_initial=1)])
DEBUG 2022-01-28 15:49:19,518 stack: ['$phi26.0']
DEBUG 2022-01-28 15:49:19,518 dispatch pc=26, inst=FOR_ITER(arg=12, lineno=3694)
DEBUG 2022-01-28 15:49:19,518 stack ['$phi26.0']
DEBUG 2022-01-28 15:49:19,518 end state. edges=[Edge(pc=40, stack=(), blockstack=(), npush=0), Edge(pc=28, stack=('$phi26.0', '$26for_iter.2'), blockstack=(), npush=0)]
DEBUG 2022-01-28 15:49:19,518 pending: deque([State(pc_initial=40 nstack_initial=0), State(pc_initial=28 nstack_initial=2)])
DEBUG 2022-01-28 15:49:19,518 stack: []
DEBUG 2022-01-28 15:49:19,518 dispatch pc=40, inst=LOAD_FAST(arg=3, lineno=3696)
DEBUG 2022-01-28 15:49:19,518 stack []
DEBUG 2022-01-28 15:49:19,518 dispatch pc=42, inst=RETURN_VALUE(arg=None, lineno=3696)
DEBUG 2022-01-28 15:49:19,518 stack ['$arr40.0']
DEBUG 2022-01-28 15:49:19,518 end state. edges=[]
DEBUG 2022-01-28 15:49:19,518 pending: deque([State(pc_initial=28 nstack_initial=2)])
DEBUG 2022-01-28 15:49:19,518 stack: ['$phi28.0', '$phi28.1']
DEBUG 2022-01-28 15:49:19,518 dispatch pc=28, inst=STORE_FAST(arg=4, lineno=3694)
DEBUG 2022-01-28 15:49:19,520 stack ['$phi28.0', '$phi28.1']
DEBUG 2022-01-28 15:49:19,520 dispatch pc=30, inst=LOAD_FAST(arg=1, lineno=3695)
DEBUG 2022-01-28 15:49:19,520 stack ['$phi28.0']
DEBUG 2022-01-28 15:49:19,520 dispatch pc=32, inst=LOAD_FAST(arg=3, lineno=3695)
DEBUG 2022-01-28 15:49:19,520 stack ['$phi28.0', '$value30.2']
DEBUG 2022-01-28 15:49:19,520 dispatch pc=34, inst=LOAD_FAST(arg=4, lineno=3695)
DEBUG 2022-01-28 15:49:19,520 stack ['$phi28.0', '$value30.2', '$arr32.3']
DEBUG 2022-01-28 15:49:19,520 dispatch pc=36, inst=STORE_SUBSCR(arg=None, lineno=3695)
DEBUG 2022-01-28 15:49:19,520 stack ['$phi28.0', '$value30.2', '$arr32.3', '$idx34.4']
DEBUG 2022-01-28 15:49:19,520 dispatch pc=38, inst=JUMP_ABSOLUTE(arg=26, lineno=3695)
DEBUG 2022-01-28 15:49:19,520 stack ['$phi28.0']
DEBUG 2022-01-28 15:49:19,520 end state. edges=[Edge(pc=26, stack=('$phi28.0',), blockstack=(), npush=0)]
DEBUG 2022-01-28 15:49:19,520 pending: deque([State(pc_initial=26 nstack_initial=1)])
DEBUG 2022-01-28 15:49:19,520 -------------------------Prune PHIs-------------------------
DEBUG 2022-01-28 15:49:19,520 Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=26 nstack_initial=1): {'$phi26.0'},
             State(pc_initial=28 nstack_initial=2): {'$phi28.1'},
             State(pc_initial=40 nstack_initial=0): set()})
DEBUG 2022-01-28 15:49:19,520 defmap: {'$phi26.0': State(pc_initial=0 nstack_initial=0),
 '$phi28.1': State(pc_initial=26 nstack_initial=1)}
DEBUG 2022-01-28 15:49:19,520 phismap: defaultdict(<class 'set'>,
            {'$phi26.0': {('$24get_iter.10',
                           State(pc_initial=0 nstack_initial=0)),
                          ('$phi28.0', State(pc_initial=28 nstack_initial=2))},
             '$phi28.0': {('$phi26.0', State(pc_initial=26 nstack_initial=1))},
             '$phi28.1': {('$26for_iter.2',
                           State(pc_initial=26 nstack_initial=1))}})
DEBUG 2022-01-28 15:49:19,520 changing phismap: defaultdict(<class 'set'>,
            {'$phi26.0': {('$24get_iter.10',
                           State(pc_initial=0 nstack_initial=0)),
                          ('$phi26.0', State(pc_initial=26 nstack_initial=1))},
             '$phi28.0': {('$24get_iter.10',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi28.1': {('$26for_iter.2',
                           State(pc_initial=26 nstack_initial=1))}})
DEBUG 2022-01-28 15:49:19,520 changing phismap: defaultdict(<class 'set'>,
            {'$phi26.0': {('$24get_iter.10',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi28.0': {('$24get_iter.10',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi28.1': {('$26for_iter.2',
                           State(pc_initial=26 nstack_initial=1))}})
DEBUG 2022-01-28 15:49:19,520 changing phismap: defaultdict(<class 'set'>,
            {'$phi26.0': {('$24get_iter.10',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi28.0': {('$24get_iter.10',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi28.1': {('$26for_iter.2',
                           State(pc_initial=26 nstack_initial=1))}})
DEBUG 2022-01-28 15:49:19,520 keep phismap: {'$phi26.0': {('$24get_iter.10', State(pc_initial=0 nstack_initial=0))},
 '$phi28.1': {('$26for_iter.2', State(pc_initial=26 nstack_initial=1))}}
DEBUG 2022-01-28 15:49:19,520 new_out: defaultdict(<class 'dict'>,
            {State(pc_initial=0 nstack_initial=0): {'$phi26.0': '$24get_iter.10'},
             State(pc_initial=26 nstack_initial=1): {'$phi28.1': '$26for_iter.2'}})
DEBUG 2022-01-28 15:49:19,520 ----------------------DONE Prune PHIs-----------------------
DEBUG 2022-01-28 15:49:19,520 block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$2load_global.0'}), (4, {'item': '$2load_global.0', 'res': '$4load_method.1'}), (6, {'res': '$shape6.2'}), (8, {'res': '$dtype8.3'}), (10, {'func': '$4load_method.1', 'args': ['$shape6.2', '$dtype8.3'], 'res': '$10call_method.4'}), (12, {'value': '$10call_method.4'}), (14, {'res': '$14load_global.5'}), (16, {'item': '$14load_global.5', 'res': '$16load_method.6'}), (18, {'res': '$arr18.7'}), (20, {'item': '$arr18.7', 'res': '$20load_attr.8'}), (22, {'func': '$16load_method.6', 'args': ['$20load_attr.8'], 'res': '$22call_method.9'}), (24, {'value': '$22call_method.9', 'res': '$24get_iter.10'})), outgoing_phis={'$phi26.0': '$24get_iter.10'}, blockstack=(), active_try_block=None, outgoing_edgepushed={26: ('$24get_iter.10',)})
DEBUG 2022-01-28 15:49:19,520 block_infos State(pc_initial=26 nstack_initial=1):
AdaptBlockInfo(insts=((26, {'iterator': '$phi26.0', 'pair': '$26for_iter.1', 'indval': '$26for_iter.2', 'pred': '$26for_iter.3'}),), outgoing_phis={'$phi28.1': '$26for_iter.2'}, blockstack=(), active_try_block=None, outgoing_edgepushed={40: (), 28: ('$phi26.0', '$26for_iter.2')})
DEBUG 2022-01-28 15:49:19,520 block_infos State(pc_initial=28 nstack_initial=2):
AdaptBlockInfo(insts=((28, {'value': '$phi28.1'}), (30, {'res': '$value30.2'}), (32, {'res': '$arr32.3'}), (34, {'res': '$idx34.4'}), (36, {'target': '$arr32.3', 'index': '$idx34.4', 'value': '$value30.2'}), (38, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={26: ('$phi28.0',)})
DEBUG 2022-01-28 15:49:19,520 block_infos State(pc_initial=40 nstack_initial=0):
AdaptBlockInfo(insts=((40, {'res': '$arr40.0'}), (42, {'retval': '$arr40.0', 'castval': '$42return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG 2022-01-28 15:49:19,520 label 0:
    shape = arg(0, name=shape)               ['shape']
    value = arg(1, name=value)               ['value']
    dtype = arg(2, name=dtype)               ['dtype']
    $2load_global.0 = global(np: <module 'numpy' from 'C:\\Users\\zl4821\\Anaconda3\\envs\\GBS\\lib\\site-packages\\numpy\\__init__.py'>) ['$2load_global.0']
    $4load_method.1 = getattr(value=$2load_global.0, attr=empty) ['$2load_global.0', '$4load_method.1']
    arr = call $4load_method.1(shape, dtype, func=$4load_method.1, args=[Var(shape, arrayobj.py:3693), Var(dtype, arrayobj.py:3693)], kws=(), vararg=None, target=None) ['$4load_method.1', 'arr', 'dtype', 'shape']
    $14load_global.5 = global(np: <module 'numpy' from 'C:\\Users\\zl4821\\Anaconda3\\envs\\GBS\\lib\\site-packages\\numpy\\__init__.py'>) ['$14load_global.5']
    $16load_method.6 = getattr(value=$14load_global.5, attr=ndindex) ['$14load_global.5', '$16load_method.6']
    $20load_attr.8 = getattr(value=arr, attr=shape) ['$20load_attr.8', 'arr']
    $22call_method.9 = call $16load_method.6($20load_attr.8, func=$16load_method.6, args=[Var($20load_attr.8, arrayobj.py:3694)], kws=(), vararg=None, target=None) ['$16load_method.6', '$20load_attr.8', '$22call_method.9']
    $24get_iter.10 = getiter(value=$22call_method.9) ['$22call_method.9', '$24get_iter.10']
    $phi26.0 = $24get_iter.10                ['$24get_iter.10', '$phi26.0']
    jump 26                                  []
label 26:
    $26for_iter.1 = iternext(value=$phi26.0) ['$26for_iter.1', '$phi26.0']
    $26for_iter.2 = pair_first(value=$26for_iter.1) ['$26for_iter.1', '$26for_iter.2']
    $26for_iter.3 = pair_second(value=$26for_iter.1) ['$26for_iter.1', '$26for_iter.3']
    $phi28.1 = $26for_iter.2                 ['$26for_iter.2', '$phi28.1']
    branch $26for_iter.3, 28, 40             ['$26for_iter.3']
label 28:
    idx = $phi28.1                           ['$phi28.1', 'idx']
    arr[idx] = value                         ['arr', 'idx', 'value']
    jump 26                                  []
label 40:
    $42return_value.1 = cast(value=arr)      ['$42return_value.1', 'arr']
    return $42return_value.1                 ['$42return_value.1']

DEBUG 2022-01-28 15:49:19,520 ==== SSA block analysis pass on 0
DEBUG 2022-01-28 15:49:19,520 Running <numba.core.ssa._GatherDefsHandler object at 0x000002410CA52B80>
DEBUG 2022-01-28 15:49:19,520 on stmt: shape = arg(0, name=shape)
DEBUG 2022-01-28 15:49:19,520 on stmt: value = arg(1, name=value)
DEBUG 2022-01-28 15:49:19,520 on stmt: dtype = arg(2, name=dtype)
DEBUG 2022-01-28 15:49:19,520 on stmt: $2load_global.0 = global(np: <module 'numpy' from 'C:\\Users\\zl4821\\Anaconda3\\envs\\GBS\\lib\\site-packages\\numpy\\__init__.py'>)
DEBUG 2022-01-28 15:49:19,528 on stmt: $4load_method.1 = getattr(value=$2load_global.0, attr=empty)
DEBUG 2022-01-28 15:49:19,528 on stmt: arr = call $4load_method.1(shape, dtype, func=$4load_method.1, args=[Var(shape, arrayobj.py:3693), Var(dtype, arrayobj.py:3693)], kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:19,528 on stmt: $14load_global.5 = global(np: <module 'numpy' from 'C:\\Users\\zl4821\\Anaconda3\\envs\\GBS\\lib\\site-packages\\numpy\\__init__.py'>)
DEBUG 2022-01-28 15:49:19,528 on stmt: $16load_method.6 = getattr(value=$14load_global.5, attr=ndindex)
DEBUG 2022-01-28 15:49:19,528 on stmt: $20load_attr.8 = getattr(value=arr, attr=shape)
DEBUG 2022-01-28 15:49:19,528 on stmt: $22call_method.9 = call $16load_method.6($20load_attr.8, func=$16load_method.6, args=[Var($20load_attr.8, arrayobj.py:3694)], kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:19,528 on stmt: $24get_iter.10 = getiter(value=$22call_method.9)
DEBUG 2022-01-28 15:49:19,528 on stmt: $phi26.0 = $24get_iter.10
DEBUG 2022-01-28 15:49:19,528 on stmt: jump 26
DEBUG 2022-01-28 15:49:19,528 ==== SSA block analysis pass on 26
DEBUG 2022-01-28 15:49:19,528 Running <numba.core.ssa._GatherDefsHandler object at 0x000002410CA52B80>
DEBUG 2022-01-28 15:49:19,528 on stmt: $26for_iter.1 = iternext(value=$phi26.0)
DEBUG 2022-01-28 15:49:19,528 on stmt: $26for_iter.2 = pair_first(value=$26for_iter.1)
DEBUG 2022-01-28 15:49:19,528 on stmt: $26for_iter.3 = pair_second(value=$26for_iter.1)
DEBUG 2022-01-28 15:49:19,528 on stmt: $phi28.1 = $26for_iter.2
DEBUG 2022-01-28 15:49:19,528 on stmt: branch $26for_iter.3, 28, 40
DEBUG 2022-01-28 15:49:19,528 ==== SSA block analysis pass on 28
DEBUG 2022-01-28 15:49:19,530 Running <numba.core.ssa._GatherDefsHandler object at 0x000002410CA52B80>
DEBUG 2022-01-28 15:49:19,530 on stmt: idx = $phi28.1
DEBUG 2022-01-28 15:49:19,530 on stmt: arr[idx] = value
DEBUG 2022-01-28 15:49:19,530 on stmt: jump 26
DEBUG 2022-01-28 15:49:19,530 ==== SSA block analysis pass on 40
DEBUG 2022-01-28 15:49:19,530 Running <numba.core.ssa._GatherDefsHandler object at 0x000002410CA52B80>
DEBUG 2022-01-28 15:49:19,530 on stmt: $42return_value.1 = cast(value=arr)
DEBUG 2022-01-28 15:49:19,530 on stmt: return $42return_value.1
DEBUG 2022-01-28 15:49:19,530 defs defaultdict(<class 'list'>,
            {'$14load_global.5': [<numba.core.ir.Assign object at 0x000002410CA491C0>],
             '$16load_method.6': [<numba.core.ir.Assign object at 0x000002410CA36C70>],
             '$20load_attr.8': [<numba.core.ir.Assign object at 0x000002410CA3F430>],
             '$22call_method.9': [<numba.core.ir.Assign object at 0x000002410CA3F700>],
             '$24get_iter.10': [<numba.core.ir.Assign object at 0x000002410CA3F9A0>],
             '$26for_iter.1': [<numba.core.ir.Assign object at 0x000002410CA523A0>],
             '$26for_iter.2': [<numba.core.ir.Assign object at 0x000002410CA524C0>],
             '$26for_iter.3': [<numba.core.ir.Assign object at 0x000002410CA525E0>],
             '$2load_global.0': [<numba.core.ir.Assign object at 0x000002410CA521F0>],
             '$42return_value.1': [<numba.core.ir.Assign object at 0x000002410CA52FD0>],
             '$4load_method.1': [<numba.core.ir.Assign object at 0x000002410CA49D90>],
             '$phi26.0': [<numba.core.ir.Assign object at 0x000002410CA46730>],
             '$phi28.1': [<numba.core.ir.Assign object at 0x000002410CA522E0>],
             'arr': [<numba.core.ir.Assign object at 0x000002410CA493D0>],
             'dtype': [<numba.core.ir.Assign object at 0x000002410CA52070>],
             'idx': [<numba.core.ir.Assign object at 0x000002410CA528B0>],
             'shape': [<numba.core.ir.Assign object at 0x000002410CA490A0>],
             'value': [<numba.core.ir.Assign object at 0x000002410CA49F10>]})
DEBUG 2022-01-28 15:49:19,530 SSA violators set()
DEBUG 2022-01-28 15:49:19,530 bytecode dump:
>          0	NOP(arg=None, lineno=3)
           2	LOAD_GLOBAL(arg=0, lineno=3)
           4	LOAD_FAST(arg=0, lineno=3)
           6	LOAD_FAST(arg=1, lineno=3)
           8	CALL_FUNCTION(arg=2, lineno=3)
          10	RETURN_VALUE(arg=None, lineno=3)
DEBUG 2022-01-28 15:49:19,530 pending: deque([State(pc_initial=0 nstack_initial=0)])
DEBUG 2022-01-28 15:49:19,530 stack: []
DEBUG 2022-01-28 15:49:19,530 dispatch pc=0, inst=NOP(arg=None, lineno=3)
DEBUG 2022-01-28 15:49:19,530 stack []
DEBUG 2022-01-28 15:49:19,530 dispatch pc=2, inst=LOAD_GLOBAL(arg=0, lineno=3)
DEBUG 2022-01-28 15:49:19,530 stack []
DEBUG 2022-01-28 15:49:19,530 dispatch pc=4, inst=LOAD_FAST(arg=0, lineno=3)
DEBUG 2022-01-28 15:49:19,530 stack ['$2load_global.0']
DEBUG 2022-01-28 15:49:19,530 dispatch pc=6, inst=LOAD_FAST(arg=1, lineno=3)
DEBUG 2022-01-28 15:49:19,530 stack ['$2load_global.0', '$tmp04.1']
DEBUG 2022-01-28 15:49:19,530 dispatch pc=8, inst=CALL_FUNCTION(arg=2, lineno=3)
DEBUG 2022-01-28 15:49:19,530 stack ['$2load_global.0', '$tmp04.1', '$tmp16.2']
DEBUG 2022-01-28 15:49:19,530 dispatch pc=10, inst=RETURN_VALUE(arg=None, lineno=3)
DEBUG 2022-01-28 15:49:19,530 stack ['$8call_function.3']
DEBUG 2022-01-28 15:49:19,530 end state. edges=[]
DEBUG 2022-01-28 15:49:19,530 -------------------------Prune PHIs-------------------------
DEBUG 2022-01-28 15:49:19,530 Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
DEBUG 2022-01-28 15:49:19,530 defmap: {}
DEBUG 2022-01-28 15:49:19,530 phismap: defaultdict(<class 'set'>, {})
DEBUG 2022-01-28 15:49:19,530 changing phismap: defaultdict(<class 'set'>, {})
DEBUG 2022-01-28 15:49:19,530 keep phismap: {}
DEBUG 2022-01-28 15:49:19,530 new_out: defaultdict(<class 'dict'>, {})
DEBUG 2022-01-28 15:49:19,530 ----------------------DONE Prune PHIs-----------------------
DEBUG 2022-01-28 15:49:19,530 block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$2load_global.0'}), (4, {'res': '$tmp04.1'}), (6, {'res': '$tmp16.2'}), (8, {'func': '$2load_global.0', 'args': ['$tmp04.1', '$tmp16.2'], 'res': '$8call_function.3'}), (10, {'retval': '$8call_function.3', 'castval': '$10return_value.4'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG 2022-01-28 15:49:19,530 label 0:
    tmp0 = arg(0, name=tmp0)                 ['tmp0']
    tmp1 = arg(1, name=tmp1)                 ['tmp1']
    $2load_global.0 = global(intrin: <intrinsic stub>) ['$2load_global.0']
    $8call_function.3 = call $2load_global.0(tmp0, tmp1, func=$2load_global.0, args=[Var(tmp0, <string>:3), Var(tmp1, <string>:3)], kws=(), vararg=None, target=None) ['$2load_global.0', '$8call_function.3', 'tmp0', 'tmp1']
    $10return_value.4 = cast(value=$8call_function.3) ['$10return_value.4', '$8call_function.3']
    return $10return_value.4                 ['$10return_value.4']

DEBUG 2022-01-28 15:49:19,530 ==== SSA block analysis pass on 0
DEBUG 2022-01-28 15:49:19,530 Running <numba.core.ssa._GatherDefsHandler object at 0x000002410CA5EB20>
DEBUG 2022-01-28 15:49:19,530 on stmt: tmp0 = arg(0, name=tmp0)
DEBUG 2022-01-28 15:49:19,538 on stmt: tmp1 = arg(1, name=tmp1)
DEBUG 2022-01-28 15:49:19,538 on stmt: $2load_global.0 = global(intrin: <intrinsic stub>)
DEBUG 2022-01-28 15:49:19,538 on stmt: $8call_function.3 = call $2load_global.0(tmp0, tmp1, func=$2load_global.0, args=[Var(tmp0, <string>:3), Var(tmp1, <string>:3)], kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:19,538 on stmt: $10return_value.4 = cast(value=$8call_function.3)
DEBUG 2022-01-28 15:49:19,538 on stmt: return $10return_value.4
DEBUG 2022-01-28 15:49:19,538 defs defaultdict(<class 'list'>,
            {'$10return_value.4': [<numba.core.ir.Assign object at 0x000002410CA64A30>],
             '$2load_global.0': [<numba.core.ir.Assign object at 0x000002410CA644F0>],
             '$8call_function.3': [<numba.core.ir.Assign object at 0x000002410CA64910>],
             'tmp0': [<numba.core.ir.Assign object at 0x000002410CA64160>],
             'tmp1': [<numba.core.ir.Assign object at 0x000002410CA641C0>]})
DEBUG 2022-01-28 15:49:19,538 SSA violators set()
DEBUG 2022-01-28 15:49:19,771 bytecode dump:
>          0	NOP(arg=None, lineno=2)
           2	LOAD_GLOBAL(arg=0, lineno=2)
           4	LOAD_METHOD(arg=1, lineno=2)
           6	LOAD_FAST(arg=15, lineno=2)
           8	CALL_METHOD(arg=1, lineno=2)
          10	STORE_FAST(arg=16, lineno=2)
          12	LOAD_GLOBAL(arg=2, lineno=3)
          14	LOAD_FAST(arg=0, lineno=3)
          16	LOAD_CONST(arg=1, lineno=3)
          18	BINARY_SUBSCR(arg=None, lineno=3)
          20	LOAD_FAST(arg=0, lineno=3)
          22	LOAD_CONST(arg=2, lineno=3)
          24	BINARY_SUBSCR(arg=None, lineno=3)
          26	LOAD_GLOBAL(arg=0, lineno=3)
          28	LOAD_METHOD(arg=3, lineno=3)
          30	LOAD_CONST(arg=2, lineno=3)
          32	CALL_METHOD(arg=1, lineno=3)
          34	BINARY_ADD(arg=None, lineno=3)
          36	CALL_FUNCTION(arg=2, lineno=3)
          38	GET_ITER(arg=None, lineno=3)
>         40	FOR_ITER(arg=8, lineno=3)
          42	STORE_FAST(arg=17, lineno=3)
          44	LOAD_CONST(arg=1, lineno=4)
          46	STORE_FAST(arg=18, lineno=4)
          48	JUMP_ABSOLUTE(arg=40, lineno=4)
>         50	LOAD_FAST(arg=16, lineno=5)
          52	LOAD_CONST(arg=0, lineno=5)
          54	LOAD_CONST(arg=0, lineno=5)
          56	BUILD_SLICE(arg=2, lineno=5)
          58	BINARY_SUBSCR(arg=None, lineno=5)
          60	LOAD_FAST(arg=15, lineno=5)
          62	LOAD_CONST(arg=0, lineno=5)
          64	LOAD_CONST(arg=0, lineno=5)
          66	BUILD_SLICE(arg=2, lineno=5)
          68	STORE_SUBSCR(arg=None, lineno=5)
          70	LOAD_CONST(arg=0, lineno=6)
          72	RETURN_VALUE(arg=None, lineno=6)
DEBUG 2022-01-28 15:49:19,771 pending: deque([State(pc_initial=0 nstack_initial=0)])
DEBUG 2022-01-28 15:49:19,771 stack: []
DEBUG 2022-01-28 15:49:19,771 dispatch pc=0, inst=NOP(arg=None, lineno=2)
DEBUG 2022-01-28 15:49:19,771 stack []
DEBUG 2022-01-28 15:49:19,771 dispatch pc=2, inst=LOAD_GLOBAL(arg=0, lineno=2)
DEBUG 2022-01-28 15:49:19,771 stack []
DEBUG 2022-01-28 15:49:19,771 dispatch pc=4, inst=LOAD_METHOD(arg=1, lineno=2)
DEBUG 2022-01-28 15:49:19,771 stack ['$2load_global.0']
DEBUG 2022-01-28 15:49:19,771 dispatch pc=6, inst=LOAD_FAST(arg=15, lineno=2)
DEBUG 2022-01-28 15:49:19,771 stack ['$4load_method.1']
DEBUG 2022-01-28 15:49:19,771 dispatch pc=8, inst=CALL_METHOD(arg=1, lineno=2)
DEBUG 2022-01-28 15:49:19,771 stack ['$4load_method.1', '$H__batch_2__arr6.2']
DEBUG 2022-01-28 15:49:19,771 dispatch pc=10, inst=STORE_FAST(arg=16, lineno=2)
DEBUG 2022-01-28 15:49:19,771 stack ['$8call_method.3']
DEBUG 2022-01-28 15:49:19,771 dispatch pc=12, inst=LOAD_GLOBAL(arg=2, lineno=3)
DEBUG 2022-01-28 15:49:19,771 stack []
DEBUG 2022-01-28 15:49:19,771 dispatch pc=14, inst=LOAD_FAST(arg=0, lineno=3)
DEBUG 2022-01-28 15:49:19,771 stack ['$12load_global.4']
DEBUG 2022-01-28 15:49:19,771 dispatch pc=16, inst=LOAD_CONST(arg=1, lineno=3)
DEBUG 2022-01-28 15:49:19,771 stack ['$12load_global.4', '$sched14.5']
DEBUG 2022-01-28 15:49:19,771 dispatch pc=18, inst=BINARY_SUBSCR(arg=None, lineno=3)
DEBUG 2022-01-28 15:49:19,771 stack ['$12load_global.4', '$sched14.5', '$const16.6']
DEBUG 2022-01-28 15:49:19,771 dispatch pc=20, inst=LOAD_FAST(arg=0, lineno=3)
DEBUG 2022-01-28 15:49:19,771 stack ['$12load_global.4', '$18binary_subscr.7']
DEBUG 2022-01-28 15:49:19,771 dispatch pc=22, inst=LOAD_CONST(arg=2, lineno=3)
DEBUG 2022-01-28 15:49:19,771 stack ['$12load_global.4', '$18binary_subscr.7', '$sched20.8']
DEBUG 2022-01-28 15:49:19,771 dispatch pc=24, inst=BINARY_SUBSCR(arg=None, lineno=3)
DEBUG 2022-01-28 15:49:19,771 stack ['$12load_global.4', '$18binary_subscr.7', '$sched20.8', '$const22.9']
DEBUG 2022-01-28 15:49:19,771 dispatch pc=26, inst=LOAD_GLOBAL(arg=0, lineno=3)
DEBUG 2022-01-28 15:49:19,771 stack ['$12load_global.4', '$18binary_subscr.7', '$24binary_subscr.10']
DEBUG 2022-01-28 15:49:19,771 dispatch pc=28, inst=LOAD_METHOD(arg=3, lineno=3)
DEBUG 2022-01-28 15:49:19,771 stack ['$12load_global.4', '$18binary_subscr.7', '$24binary_subscr.10', '$26load_global.11']
DEBUG 2022-01-28 15:49:19,771 dispatch pc=30, inst=LOAD_CONST(arg=2, lineno=3)
DEBUG 2022-01-28 15:49:19,771 stack ['$12load_global.4', '$18binary_subscr.7', '$24binary_subscr.10', '$28load_method.12']
DEBUG 2022-01-28 15:49:19,771 dispatch pc=32, inst=CALL_METHOD(arg=1, lineno=3)
DEBUG 2022-01-28 15:49:19,771 stack ['$12load_global.4', '$18binary_subscr.7', '$24binary_subscr.10', '$28load_method.12', '$const30.13']
DEBUG 2022-01-28 15:49:19,771 dispatch pc=34, inst=BINARY_ADD(arg=None, lineno=3)
DEBUG 2022-01-28 15:49:19,771 stack ['$12load_global.4', '$18binary_subscr.7', '$24binary_subscr.10', '$32call_method.14']
DEBUG 2022-01-28 15:49:19,771 dispatch pc=36, inst=CALL_FUNCTION(arg=2, lineno=3)
DEBUG 2022-01-28 15:49:19,771 stack ['$12load_global.4', '$18binary_subscr.7', '$34binary_add.15']
DEBUG 2022-01-28 15:49:19,771 dispatch pc=38, inst=GET_ITER(arg=None, lineno=3)
DEBUG 2022-01-28 15:49:19,771 stack ['$36call_function.16']
DEBUG 2022-01-28 15:49:19,771 end state. edges=[Edge(pc=40, stack=('$38get_iter.17',), blockstack=(), npush=0)]
DEBUG 2022-01-28 15:49:19,771 pending: deque([State(pc_initial=40 nstack_initial=1)])
DEBUG 2022-01-28 15:49:19,771 stack: ['$phi40.0']
DEBUG 2022-01-28 15:49:19,771 dispatch pc=40, inst=FOR_ITER(arg=8, lineno=3)
DEBUG 2022-01-28 15:49:19,771 stack ['$phi40.0']
DEBUG 2022-01-28 15:49:19,771 end state. edges=[Edge(pc=50, stack=(), blockstack=(), npush=0), Edge(pc=42, stack=('$phi40.0', '$40for_iter.2'), blockstack=(), npush=0)]
DEBUG 2022-01-28 15:49:19,771 pending: deque([State(pc_initial=50 nstack_initial=0), State(pc_initial=42 nstack_initial=2)])
DEBUG 2022-01-28 15:49:19,771 stack: []
DEBUG 2022-01-28 15:49:19,771 dispatch pc=50, inst=LOAD_FAST(arg=16, lineno=5)
DEBUG 2022-01-28 15:49:19,771 stack []
DEBUG 2022-01-28 15:49:19,771 dispatch pc=52, inst=LOAD_CONST(arg=0, lineno=5)
DEBUG 2022-01-28 15:49:19,771 stack ['$H__batch_250.0']
DEBUG 2022-01-28 15:49:19,771 dispatch pc=54, inst=LOAD_CONST(arg=0, lineno=5)
DEBUG 2022-01-28 15:49:19,771 stack ['$H__batch_250.0', '$const52.1']
DEBUG 2022-01-28 15:49:19,771 dispatch pc=56, inst=BUILD_SLICE(arg=2, lineno=5)
DEBUG 2022-01-28 15:49:19,771 stack ['$H__batch_250.0', '$const52.1', '$const54.2']
DEBUG 2022-01-28 15:49:19,771 dispatch pc=58, inst=BINARY_SUBSCR(arg=None, lineno=5)
DEBUG 2022-01-28 15:49:19,771 stack ['$H__batch_250.0', '$56build_slice.4']
DEBUG 2022-01-28 15:49:19,771 dispatch pc=60, inst=LOAD_FAST(arg=15, lineno=5)
DEBUG 2022-01-28 15:49:19,771 stack ['$58binary_subscr.5']
DEBUG 2022-01-28 15:49:19,771 dispatch pc=62, inst=LOAD_CONST(arg=0, lineno=5)
DEBUG 2022-01-28 15:49:19,771 stack ['$58binary_subscr.5', '$H__batch_2__arr60.6']
DEBUG 2022-01-28 15:49:19,787 dispatch pc=64, inst=LOAD_CONST(arg=0, lineno=5)
DEBUG 2022-01-28 15:49:19,787 stack ['$58binary_subscr.5', '$H__batch_2__arr60.6', '$const62.7']
DEBUG 2022-01-28 15:49:19,787 dispatch pc=66, inst=BUILD_SLICE(arg=2, lineno=5)
DEBUG 2022-01-28 15:49:19,787 stack ['$58binary_subscr.5', '$H__batch_2__arr60.6', '$const62.7', '$const64.8']
DEBUG 2022-01-28 15:49:19,787 dispatch pc=68, inst=STORE_SUBSCR(arg=None, lineno=5)
DEBUG 2022-01-28 15:49:19,787 stack ['$58binary_subscr.5', '$H__batch_2__arr60.6', '$66build_slice.10']
DEBUG 2022-01-28 15:49:19,787 dispatch pc=70, inst=LOAD_CONST(arg=0, lineno=6)
DEBUG 2022-01-28 15:49:19,787 stack []
DEBUG 2022-01-28 15:49:19,787 dispatch pc=72, inst=RETURN_VALUE(arg=None, lineno=6)
DEBUG 2022-01-28 15:49:19,787 stack ['$const70.11']
DEBUG 2022-01-28 15:49:19,787 end state. edges=[]
DEBUG 2022-01-28 15:49:19,787 pending: deque([State(pc_initial=42 nstack_initial=2)])
DEBUG 2022-01-28 15:49:19,787 stack: ['$phi42.0', '$phi42.1']
DEBUG 2022-01-28 15:49:19,787 dispatch pc=42, inst=STORE_FAST(arg=17, lineno=3)
DEBUG 2022-01-28 15:49:19,787 stack ['$phi42.0', '$phi42.1']
DEBUG 2022-01-28 15:49:19,787 dispatch pc=44, inst=LOAD_CONST(arg=1, lineno=4)
DEBUG 2022-01-28 15:49:19,787 stack ['$phi42.0']
DEBUG 2022-01-28 15:49:19,787 dispatch pc=46, inst=STORE_FAST(arg=18, lineno=4)
DEBUG 2022-01-28 15:49:19,787 stack ['$phi42.0', '$const44.2']
DEBUG 2022-01-28 15:49:19,787 dispatch pc=48, inst=JUMP_ABSOLUTE(arg=40, lineno=4)
DEBUG 2022-01-28 15:49:19,787 stack ['$phi42.0']
DEBUG 2022-01-28 15:49:19,787 end state. edges=[Edge(pc=40, stack=('$phi42.0',), blockstack=(), npush=0)]
DEBUG 2022-01-28 15:49:19,787 pending: deque([State(pc_initial=40 nstack_initial=1)])
DEBUG 2022-01-28 15:49:19,787 -------------------------Prune PHIs-------------------------
DEBUG 2022-01-28 15:49:19,787 Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=40 nstack_initial=1): {'$phi40.0'},
             State(pc_initial=42 nstack_initial=2): {'$phi42.1'},
             State(pc_initial=50 nstack_initial=0): set()})
DEBUG 2022-01-28 15:49:19,787 defmap: {'$phi40.0': State(pc_initial=0 nstack_initial=0),
 '$phi42.1': State(pc_initial=40 nstack_initial=1)}
DEBUG 2022-01-28 15:49:19,787 phismap: defaultdict(<class 'set'>,
            {'$phi40.0': {('$38get_iter.17',
                           State(pc_initial=0 nstack_initial=0)),
                          ('$phi42.0', State(pc_initial=42 nstack_initial=2))},
             '$phi42.0': {('$phi40.0', State(pc_initial=40 nstack_initial=1))},
             '$phi42.1': {('$40for_iter.2',
                           State(pc_initial=40 nstack_initial=1))}})
DEBUG 2022-01-28 15:49:19,787 changing phismap: defaultdict(<class 'set'>,
            {'$phi40.0': {('$38get_iter.17',
                           State(pc_initial=0 nstack_initial=0)),
                          ('$phi40.0', State(pc_initial=40 nstack_initial=1))},
             '$phi42.0': {('$38get_iter.17',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi42.1': {('$40for_iter.2',
                           State(pc_initial=40 nstack_initial=1))}})
DEBUG 2022-01-28 15:49:19,787 changing phismap: defaultdict(<class 'set'>,
            {'$phi40.0': {('$38get_iter.17',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi42.0': {('$38get_iter.17',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi42.1': {('$40for_iter.2',
                           State(pc_initial=40 nstack_initial=1))}})
DEBUG 2022-01-28 15:49:19,787 changing phismap: defaultdict(<class 'set'>,
            {'$phi40.0': {('$38get_iter.17',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi42.0': {('$38get_iter.17',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi42.1': {('$40for_iter.2',
                           State(pc_initial=40 nstack_initial=1))}})
DEBUG 2022-01-28 15:49:19,787 keep phismap: {'$phi40.0': {('$38get_iter.17', State(pc_initial=0 nstack_initial=0))},
 '$phi42.1': {('$40for_iter.2', State(pc_initial=40 nstack_initial=1))}}
DEBUG 2022-01-28 15:49:19,787 new_out: defaultdict(<class 'dict'>,
            {State(pc_initial=0 nstack_initial=0): {'$phi40.0': '$38get_iter.17'},
             State(pc_initial=40 nstack_initial=1): {'$phi42.1': '$40for_iter.2'}})
DEBUG 2022-01-28 15:49:19,787 ----------------------DONE Prune PHIs-----------------------
DEBUG 2022-01-28 15:49:19,787 block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$2load_global.0'}), (4, {'item': '$2load_global.0', 'res': '$4load_method.1'}), (6, {'res': '$H__batch_2__arr6.2'}), (8, {'func': '$4load_method.1', 'args': ['$H__batch_2__arr6.2'], 'res': '$8call_method.3'}), (10, {'value': '$8call_method.3'}), (12, {'res': '$12load_global.4'}), (14, {'res': '$sched14.5'}), (16, {'res': '$const16.6'}), (18, {'index': '$const16.6', 'target': '$sched14.5', 'res': '$18binary_subscr.7'}), (20, {'res': '$sched20.8'}), (22, {'res': '$const22.9'}), (24, {'index': '$const22.9', 'target': '$sched20.8', 'res': '$24binary_subscr.10'}), (26, {'res': '$26load_global.11'}), (28, {'item': '$26load_global.11', 'res': '$28load_method.12'}), (30, {'res': '$const30.13'}), (32, {'func': '$28load_method.12', 'args': ['$const30.13'], 'res': '$32call_method.14'}), (34, {'lhs': '$24binary_subscr.10', 'rhs': '$32call_method.14', 'res': '$34binary_add.15'}), (36, {'func': '$12load_global.4', 'args': ['$18binary_subscr.7', '$34binary_add.15'], 'res': '$36call_function.16'}), (38, {'value': '$36call_function.16', 'res': '$38get_iter.17'})), outgoing_phis={'$phi40.0': '$38get_iter.17'}, blockstack=(), active_try_block=None, outgoing_edgepushed={40: ('$38get_iter.17',)})
DEBUG 2022-01-28 15:49:19,787 block_infos State(pc_initial=40 nstack_initial=1):
AdaptBlockInfo(insts=((40, {'iterator': '$phi40.0', 'pair': '$40for_iter.1', 'indval': '$40for_iter.2', 'pred': '$40for_iter.3'}),), outgoing_phis={'$phi42.1': '$40for_iter.2'}, blockstack=(), active_try_block=None, outgoing_edgepushed={50: (), 42: ('$phi40.0', '$40for_iter.2')})
DEBUG 2022-01-28 15:49:19,787 block_infos State(pc_initial=42 nstack_initial=2):
AdaptBlockInfo(insts=((42, {'value': '$phi42.1'}), (44, {'res': '$const44.2'}), (46, {'value': '$const44.2'}), (48, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={40: ('$phi42.0',)})
DEBUG 2022-01-28 15:49:19,787 block_infos State(pc_initial=50 nstack_initial=0):
AdaptBlockInfo(insts=((50, {'res': '$H__batch_250.0'}), (52, {'res': '$const52.1'}), (54, {'res': '$const54.2'}), (56, {'start': '$const52.1', 'stop': '$const54.2', 'step': None, 'res': '$56build_slice.4', 'slicevar': '$56build_slice.3'}), (58, {'index': '$56build_slice.4', 'target': '$H__batch_250.0', 'res': '$58binary_subscr.5'}), (60, {'res': '$H__batch_2__arr60.6'}), (62, {'res': '$const62.7'}), (64, {'res': '$const64.8'}), (66, {'start': '$const62.7', 'stop': '$const64.8', 'step': None, 'res': '$66build_slice.10', 'slicevar': '$66build_slice.9'}), (68, {'target': '$H__batch_2__arr60.6', 'index': '$66build_slice.10', 'value': '$58binary_subscr.5'}), (70, {'res': '$const70.11'}), (72, {'retval': '$const70.11', 'castval': '$72return_value.12'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG 2022-01-28 15:49:19,787 label 0:
    sched = arg(0, name=sched)               ['sched']
    _136binary__add_59 = arg(1, name=_136binary__add_59) ['_136binary__add_59']
    A = arg(2, name=A)                       ['A']
    D = arg(3, name=D)                       ['D']
    N__fixed = arg(4, name=N__fixed)         ['N__fixed']
    N__max = arg(5, name=N__max)             ['N__max']
    batch__max = arg(6, name=batch__max)     ['batch__max']
    binoms = arg(7, name=binoms)             ['binoms']
    edge__reps = arg(8, name=edge__reps)     ['edge__reps']
    edge__reps__size0_160 = arg(9, name=edge__reps__size0_160) ['edge__reps__size0_160']
    glynn = arg(10, name=glynn)              ['glynn']
    n = arg(11, name=n)                      ['n']
    oddV = arg(12, name=oddV)                ['oddV']
    odd__cutoff = arg(13, name=odd__cutoff)  ['odd__cutoff']
    oddloop = arg(14, name=oddloop)          ['oddloop']
    H__batch_2__arr = arg(15, name=H__batch_2__arr) ['H__batch_2__arr']
    $2load_global.0 = global(np: <module 'numpy' from 'C:\\Users\\zl4821\\Anaconda3\\envs\\GBS\\lib\\site-packages\\numpy\\__init__.py'>) ['$2load_global.0']
    $4load_method.1 = getattr(value=$2load_global.0, attr=copy) ['$2load_global.0', '$4load_method.1']
    H__batch_2 = call $4load_method.1(H__batch_2__arr, func=$4load_method.1, args=[Var(H__batch_2__arr, <string>:2)], kws=(), vararg=None, target=None) ['$4load_method.1', 'H__batch_2', 'H__batch_2__arr']
    $12load_global.4 = global(range: <class 'range'>) ['$12load_global.4']
    $const16.6 = const(int, 0)               ['$const16.6']
    $18binary_subscr.7 = getitem(value=sched, index=$const16.6, fn=<built-in function getitem>) ['$18binary_subscr.7', '$const16.6', 'sched']
    $const22.9 = const(int, 1)               ['$const22.9']
    $24binary_subscr.10 = getitem(value=sched, index=$const22.9, fn=<built-in function getitem>) ['$24binary_subscr.10', '$const22.9', 'sched']
    $26load_global.11 = global(np: <module 'numpy' from 'C:\\Users\\zl4821\\Anaconda3\\envs\\GBS\\lib\\site-packages\\numpy\\__init__.py'>) ['$26load_global.11']
    $28load_method.12 = getattr(value=$26load_global.11, attr=uint8) ['$26load_global.11', '$28load_method.12']
    $const30.13 = const(int, 1)              ['$const30.13']
    $32call_method.14 = call $28load_method.12($const30.13, func=$28load_method.12, args=[Var($const30.13, <string>:3)], kws=(), vararg=None, target=None) ['$28load_method.12', '$32call_method.14', '$const30.13']
    $34binary_add.15 = $24binary_subscr.10 + $32call_method.14 ['$24binary_subscr.10', '$32call_method.14', '$34binary_add.15']
    $36call_function.16 = call $12load_global.4($18binary_subscr.7, $34binary_add.15, func=$12load_global.4, args=[Var($18binary_subscr.7, <string>:3), Var($34binary_add.15, <string>:3)], kws=(), vararg=None, target=None) ['$12load_global.4', '$18binary_subscr.7', '$34binary_add.15', '$36call_function.16']
    $38get_iter.17 = getiter(value=$36call_function.16) ['$36call_function.16', '$38get_iter.17']
    $phi40.0 = $38get_iter.17                ['$38get_iter.17', '$phi40.0']
    jump 40                                  []
label 40:
    $40for_iter.1 = iternext(value=$phi40.0) ['$40for_iter.1', '$phi40.0']
    $40for_iter.2 = pair_first(value=$40for_iter.1) ['$40for_iter.1', '$40for_iter.2']
    $40for_iter.3 = pair_second(value=$40for_iter.1) ['$40for_iter.1', '$40for_iter.3']
    $phi42.1 = $40for_iter.2                 ['$40for_iter.2', '$phi42.1']
    branch $40for_iter.3, 42, 50             ['$40for_iter.3']
label 42:
    parfor__index_230 = $phi42.1             ['$phi42.1', 'parfor__index_230']
    __sentinel__0 = const(int, 0)            ['__sentinel__0']
    jump 40                                  []
label 50:
    $const52.1 = const(NoneType, None)       ['$const52.1']
    $const54.2 = const(NoneType, None)       ['$const54.2']
    $56build_slice.3 = global(slice: <class 'slice'>) ['$56build_slice.3']
    $56build_slice.4 = call $56build_slice.3($const52.1, $const54.2, func=$56build_slice.3, args=(Var($const52.1, <string>:5), Var($const54.2, <string>:5)), kws=(), vararg=None, target=None) ['$56build_slice.3', '$56build_slice.4', '$const52.1', '$const54.2']
    $58binary_subscr.5 = getitem(value=H__batch_2, index=$56build_slice.4, fn=<built-in function getitem>) ['$56build_slice.4', '$58binary_subscr.5', 'H__batch_2']
    $const62.7 = const(NoneType, None)       ['$const62.7']
    $const64.8 = const(NoneType, None)       ['$const64.8']
    $66build_slice.9 = global(slice: <class 'slice'>) ['$66build_slice.9']
    $66build_slice.10 = call $66build_slice.9($const62.7, $const64.8, func=$66build_slice.9, args=(Var($const62.7, <string>:5), Var($const64.8, <string>:5)), kws=(), vararg=None, target=None) ['$66build_slice.10', '$66build_slice.9', '$const62.7', '$const64.8']
    H__batch_2__arr[$66build_slice.10] = $58binary_subscr.5 ['$58binary_subscr.5', '$66build_slice.10', 'H__batch_2__arr']
    $const70.11 = const(NoneType, None)      ['$const70.11']
    $72return_value.12 = cast(value=$const70.11) ['$72return_value.12', '$const70.11']
    return $72return_value.12                ['$72return_value.12']

DEBUG 2022-01-28 15:49:19,818 ==== SSA block analysis pass on 0
DEBUG 2022-01-28 15:49:19,818 Running <numba.core.ssa._GatherDefsHandler object at 0x000002410CC9A580>
DEBUG 2022-01-28 15:49:19,818 on stmt: sched.834 = arg(0, name=sched)
DEBUG 2022-01-28 15:49:19,818 on stmt: _136binary__add_59 = arg(1, name=_136binary__add_59)
DEBUG 2022-01-28 15:49:19,818 on stmt: A = arg(2, name=A)
DEBUG 2022-01-28 15:49:19,818 on stmt: D = arg(3, name=D)
DEBUG 2022-01-28 15:49:19,818 on stmt: N__fixed = arg(4, name=N__fixed)
DEBUG 2022-01-28 15:49:19,818 on stmt: N__max = arg(5, name=N__max)
DEBUG 2022-01-28 15:49:19,818 on stmt: batch__max = arg(6, name=batch__max)
DEBUG 2022-01-28 15:49:19,818 on stmt: binoms = arg(7, name=binoms)
DEBUG 2022-01-28 15:49:19,818 on stmt: edge__reps = arg(8, name=edge__reps)
DEBUG 2022-01-28 15:49:19,818 on stmt: edge__reps__size0_160 = arg(9, name=edge__reps__size0_160)
DEBUG 2022-01-28 15:49:19,818 on stmt: glynn = arg(10, name=glynn)
DEBUG 2022-01-28 15:49:19,818 on stmt: n = arg(11, name=n)
DEBUG 2022-01-28 15:49:19,818 on stmt: oddV = arg(12, name=oddV)
DEBUG 2022-01-28 15:49:19,818 on stmt: odd__cutoff = arg(13, name=odd__cutoff)
DEBUG 2022-01-28 15:49:19,818 on stmt: oddloop = arg(14, name=oddloop)
DEBUG 2022-01-28 15:49:19,818 on stmt: H__batch_2__arr = arg(15, name=H__batch_2__arr)
DEBUG 2022-01-28 15:49:19,818 on stmt: $2load_global.0.835 = global(np: <module 'numpy' from 'C:\\Users\\zl4821\\Anaconda3\\envs\\GBS\\lib\\site-packages\\numpy\\__init__.py'>)
DEBUG 2022-01-28 15:49:19,818 on stmt: $4load_method.1.836 = getattr(value=$2load_global.0.835, attr=copy)
DEBUG 2022-01-28 15:49:19,818 on stmt: H__batch_2 = call $4load_method.1.836(H__batch_2__arr, func=$4load_method.1.836, args=[Var(H__batch_2__arr, <string>:2)], kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:19,818 on stmt: $12load_global.4.837 = global(range: <class 'range'>)
DEBUG 2022-01-28 15:49:19,818 on stmt: $const16.6.838 = const(int, 0)
DEBUG 2022-01-28 15:49:19,818 on stmt: $18binary_subscr.7.839 = getitem(value=sched.834, index=$const16.6.838, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:19,818 on stmt: $const22.9.840 = const(int, 1)
DEBUG 2022-01-28 15:49:19,818 on stmt: $24binary_subscr.10.841 = getitem(value=sched.834, index=$const22.9.840, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:19,818 on stmt: $26load_global.11.842 = global(np: <module 'numpy' from 'C:\\Users\\zl4821\\Anaconda3\\envs\\GBS\\lib\\site-packages\\numpy\\__init__.py'>)
DEBUG 2022-01-28 15:49:19,818 on stmt: $28load_method.12.843 = getattr(value=$26load_global.11.842, attr=uint8)
DEBUG 2022-01-28 15:49:19,818 on stmt: $const30.13.844 = const(int, 1)
DEBUG 2022-01-28 15:49:19,818 on stmt: $32call_method.14.845 = call $28load_method.12.843($const30.13.844, func=$28load_method.12.843, args=[Var($const30.13.844, <string>:3)], kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:19,818 on stmt: $34binary_add.15.846 = $24binary_subscr.10.841 + $32call_method.14.845
DEBUG 2022-01-28 15:49:19,818 on stmt: $36call_function.16.847 = call $12load_global.4.837($18binary_subscr.7.839, $34binary_add.15.846, func=$12load_global.4.837, args=[Var($18binary_subscr.7.839, <string>:3), Var($34binary_add.15.846, <string>:3)], kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:19,818 on stmt: $38get_iter.17.848 = getiter(value=$36call_function.16.847)
DEBUG 2022-01-28 15:49:19,818 on stmt: $phi40.0.849 = $38get_iter.17.848
DEBUG 2022-01-28 15:49:19,818 on stmt: $const462.12 = const(int, 2)
DEBUG 2022-01-28 15:49:19,818 on stmt: $const390.6 = const(float, -1.0)
DEBUG 2022-01-28 15:49:19,818 on stmt: $const394.8 = const(int, 2)
DEBUG 2022-01-28 15:49:19,818 on stmt: $const410.15 = const(int, 2)
DEBUG 2022-01-28 15:49:19,818 on stmt: $const416.18 = const(int, 0)
DEBUG 2022-01-28 15:49:19,818 on stmt: $const432.25 = const(int, 2)
DEBUG 2022-01-28 15:49:19,818 on stmt: $const436.27 = const(int, 0)
DEBUG 2022-01-28 15:49:19,818 on stmt: bool440 = global(bool: <class 'bool'>)
DEBUG 2022-01-28 15:49:19,818 on stmt: $282load_global.1 = global(get_submatrices: CPUDispatcher(<function get_submatrices at 0x0000024107424E50>))
DEBUG 2022-01-28 15:49:19,818 on stmt: $304load_global.12 = global(eigvals: CPUDispatcher(<function eigvals at 0x00000241074303A0>))
DEBUG 2022-01-28 15:49:19,818 on stmt: $312load_global.15 = global(f_loop: CPUDispatcher(<function f_loop at 0x00000241074248B0>))
DEBUG 2022-01-28 15:49:19,818 on stmt: $328load_global.22 = global(f_loop_odd: CPUDispatcher(<function f_loop_odd at 0x0000024107424AF0>))
DEBUG 2022-01-28 15:49:19,818 on stmt: $348load_global.31 = global(range: <class 'range'>)
DEBUG 2022-01-28 15:49:19,818 on stmt: $const350.32 = const(int, 2)
DEBUG 2022-01-28 15:49:19,818 on stmt: $const354.34 = const(int, 0)
DEBUG 2022-01-28 15:49:19,818 on stmt: $const360.37 = const(int, 2)
DEBUG 2022-01-28 15:49:19,818 on stmt: $364binary_multiply.39 = $const360.37 * batch__max
DEBUG 2022-01-28 15:49:19,818 on stmt: $368binary_add.41 = $364binary_multiply.39 + odd__cutoff
DEBUG 2022-01-28 15:49:19,818 on stmt: $const370.42 = const(int, 1)
DEBUG 2022-01-28 15:49:19,818 on stmt: $372binary_add.43 = $368binary_add.41 + $const370.42
DEBUG 2022-01-28 15:49:19,818 on stmt: $const168.4 = const(int, 2)
DEBUG 2022-01-28 15:49:19,818 on stmt: $172binary_multiply.6 = $const168.4 * batch__max
DEBUG 2022-01-28 15:49:19,818 on stmt: $176binary_add.8 = $172binary_multiply.6 + odd__cutoff
DEBUG 2022-01-28 15:49:19,818 on stmt: $const178.9 = const(int, 1)
DEBUG 2022-01-28 15:49:19,818 on stmt: $180binary_add.10 = $176binary_add.8 + $const178.9
DEBUG 2022-01-28 15:49:19,818 on stmt: $192load_global.15 = global(find_kept_edges: CPUDispatcher(<function find_kept_edges at 0x0000024107424550>))
DEBUG 2022-01-28 15:49:19,818 on stmt: $np_g_var.209 = global(np: <module 'numpy' from 'C:\\Users\\zl4821\\Anaconda3\\envs\\GBS\\lib\\site-packages\\numpy\\__init__.py'>)
DEBUG 2022-01-28 15:49:19,818 on stmt: $empty_attr_attr.210 = getattr(value=$np_g_var.209, attr=empty)
DEBUG 2022-01-28 15:49:19,818 on stmt: $np_typ_var.211 = getattr(value=$np_g_var.209, attr=complex128)
DEBUG 2022-01-28 15:49:19,818 on stmt: Hnew = call $empty_attr_attr.210($180binary_add.10, $np_typ_var.211, func=$empty_attr_attr.210, args=[Var($180binary_add.10, loop_hafnian_batch.py:41), Var($np_typ_var.211, loop_hafnian_batch.py:41)], kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:19,818 on stmt: binom_prod = const(float, 1.0)
DEBUG 2022-01-28 15:49:19,818 on stmt: $214load_global.23 = global(range: <class 'range'>)
DEBUG 2022-01-28 15:49:19,818 on stmt: $const216.24 = const(int, 1)
DEBUG 2022-01-28 15:49:19,818 on stmt: $const220.26 = const(int, 2)
DEBUG 2022-01-28 15:49:19,818 on stmt: $222binary_floor_divide.27 = n // $const220.26
DEBUG 2022-01-28 15:49:19,834 on stmt: msg.191 = const(str, Sizes of H_batch.2, Hnew do not match on C:\Users\zl4821\PycharmProjects\GBS\gbs\loop_hafnian_batch.py (75))
DEBUG 2022-01-28 15:49:19,834 on stmt: assert.192 = global(assert_equiv: <intrinsic assert_equiv>)
DEBUG 2022-01-28 15:49:19,834 on stmt: bool260 = global(bool: <class 'bool'>)
DEBUG 2022-01-28 15:49:19,834 on stmt: msg.170 = const(str, Sizes of kept_edges, edge_reps do not match on C:\Users\zl4821\PycharmProjects\GBS\gbs\loop_hafnian_batch.py (51))
DEBUG 2022-01-28 15:49:19,834 on stmt: assert.171 = global(assert_equiv: <intrinsic assert_equiv>)
DEBUG 2022-01-28 15:49:19,834 on stmt: $np_g_var.214 = global(np: <module 'numpy' from 'C:\\Users\\zl4821\\Anaconda3\\envs\\GBS\\lib\\site-packages\\numpy\\__init__.py'>)
DEBUG 2022-01-28 15:49:19,834 on stmt: $empty_attr_attr.215 = getattr(value=$np_g_var.214, attr=empty)
DEBUG 2022-01-28 15:49:19,834 on stmt: $np_typ_var.216 = getattr(value=$np_g_var.214, attr=int64)
DEBUG 2022-01-28 15:49:19,834 on stmt: delta = call $empty_attr_attr.215(edge__reps__size0_160, $np_typ_var.216, func=$empty_attr_attr.215, args=[Var(edge__reps__size0_160, loop_hafnian_batch.py:32), Var($np_typ_var.216, loop_hafnian_batch.py:51)], kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:19,834 on stmt: jump 40
DEBUG 2022-01-28 15:49:19,834 ==== SSA block analysis pass on 40
DEBUG 2022-01-28 15:49:19,834 Running <numba.core.ssa._GatherDefsHandler object at 0x000002410CC9A580>
DEBUG 2022-01-28 15:49:19,834 on stmt: $40for_iter.1.850 = iternext(value=$phi40.0.849)
DEBUG 2022-01-28 15:49:19,834 on stmt: $40for_iter.2.851 = pair_first(value=$40for_iter.1.850)
DEBUG 2022-01-28 15:49:19,834 on stmt: $40for_iter.3.852 = pair_second(value=$40for_iter.1.850)
DEBUG 2022-01-28 15:49:19,834 on stmt: $phi42.1.853 = $40for_iter.2.851
DEBUG 2022-01-28 15:49:19,834 on stmt: branch $40for_iter.3.852, 42, 889
DEBUG 2022-01-28 15:49:19,834 ==== SSA block analysis pass on 42
DEBUG 2022-01-28 15:49:19,834 Running <numba.core.ssa._GatherDefsHandler object at 0x000002410CC9A580>
DEBUG 2022-01-28 15:49:19,834 on stmt: parfor__index_230 = $phi42.1.853
DEBUG 2022-01-28 15:49:19,834 on stmt: jump 50
DEBUG 2022-01-28 15:49:19,834 ==== SSA block analysis pass on 889
DEBUG 2022-01-28 15:49:19,834 Running <numba.core.ssa._GatherDefsHandler object at 0x000002410CC9A580>
DEBUG 2022-01-28 15:49:19,834 on stmt: $const52.1.854 = const(NoneType, None)
DEBUG 2022-01-28 15:49:19,834 on stmt: $const54.2.855 = const(NoneType, None)
DEBUG 2022-01-28 15:49:19,834 on stmt: $56build_slice.3.856 = global(slice: <class 'slice'>)
DEBUG 2022-01-28 15:49:19,834 on stmt: $56build_slice.4.857 = call $56build_slice.3.856($const52.1.854, $const54.2.855, func=$56build_slice.3.856, args=(Var($const52.1.854, <string>:5), Var($const54.2.855, <string>:5)), kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:19,834 on stmt: $58binary_subscr.5.858 = getitem(value=H__batch_2, index=$56build_slice.4.857, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:19,834 on stmt: $const62.7.859 = const(NoneType, None)
DEBUG 2022-01-28 15:49:19,834 on stmt: $const64.8.860 = const(NoneType, None)
DEBUG 2022-01-28 15:49:19,834 on stmt: $66build_slice.9.861 = global(slice: <class 'slice'>)
DEBUG 2022-01-28 15:49:19,834 on stmt: $66build_slice.10.862 = call $66build_slice.9.861($const62.7.859, $const64.8.860, func=$66build_slice.9.861, args=(Var($const62.7.859, <string>:5), Var($const64.8.860, <string>:5)), kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:19,834 on stmt: H__batch_2__arr[$66build_slice.10.862] = $58binary_subscr.5.858
DEBUG 2022-01-28 15:49:19,834 on stmt: $const70.11.863 = const(NoneType, None)
DEBUG 2022-01-28 15:49:19,834 on stmt: $72return_value.12.864 = cast(value=$const70.11.863)
DEBUG 2022-01-28 15:49:19,834 on stmt: return $72return_value.12.864
DEBUG 2022-01-28 15:49:19,834 ==== SSA block analysis pass on 686
DEBUG 2022-01-28 15:49:19,834 Running <numba.core.ssa._GatherDefsHandler object at 0x000002410CC9A580>
DEBUG 2022-01-28 15:49:19,834 on stmt: $450binary_subscr.6 = getitem(value=Hnew, index=$N_det.252, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:19,834 on stmt: $456binary_multiply.9 = n_det_binom_prod * plus_minus
DEBUG 2022-01-28 15:49:19,834 on stmt: $464binary_floor_divide.13 = N // $const462.12
DEBUG 2022-01-28 15:49:19,834 on stmt: $466binary_subscr.14 = getitem(value=f_even, index=$464binary_floor_divide.13, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:19,834 on stmt: $468binary_multiply.15 = $456binary_multiply.9 * $466binary_subscr.14
DEBUG 2022-01-28 15:49:19,834 on stmt: $470inplace_add.16 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$450binary_subscr.6, rhs=$468binary_multiply.15, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-01-28 15:49:19,834 on stmt: Hnew[$N_det.252] = $470inplace_add.16
DEBUG 2022-01-28 15:49:19,834 on stmt: jump 727
DEBUG 2022-01-28 15:49:19,834 ==== SSA block analysis pass on 725
DEBUG 2022-01-28 15:49:19,834 Running <numba.core.ssa._GatherDefsHandler object at 0x000002410CC9A580>
DEBUG 2022-01-28 15:49:19,834 on stmt: $484binary_subscr.6 = getitem(value=Hnew, index=$N_det.252, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:19,834 on stmt: $490binary_multiply.9 = n_det_binom_prod * plus_minus
DEBUG 2022-01-28 15:49:19,834 on stmt: $496binary_subscr.12 = getitem(value=f_odd, index=N, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:19,834 on stmt: $498binary_multiply.13 = $490binary_multiply.9 * $496binary_subscr.12
DEBUG 2022-01-28 15:49:19,834 on stmt: $500inplace_add.14 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$484binary_subscr.6, rhs=$498binary_multiply.13, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-01-28 15:49:19,834 on stmt: Hnew[$N_det.252] = $500inplace_add.14
DEBUG 2022-01-28 15:49:19,834 on stmt: jump 727
DEBUG 2022-01-28 15:49:19,834 ==== SSA block analysis pass on 593
DEBUG 2022-01-28 15:49:19,834 Running <numba.core.ssa._GatherDefsHandler object at 0x000002410CC9A580>
DEBUG 2022-01-28 15:49:19,834 on stmt: delta.2 = kept_edges
DEBUG 2022-01-28 15:49:19,834 on stmt: jump 631
DEBUG 2022-01-28 15:49:19,834 ==== SSA block analysis pass on 670
DEBUG 2022-01-28 15:49:19,834 Running <numba.core.ssa._GatherDefsHandler object at 0x000002410CC9A580>
DEBUG 2022-01-28 15:49:19,834 on stmt: N = N__fixed + $N_det.252
DEBUG 2022-01-28 15:49:19,834 on stmt: $396binary_floor_divide.9 = N // $const394.8
DEBUG 2022-01-28 15:49:19,834 on stmt: $400binary_subtract.11 = $396binary_floor_divide.9 - val.10
DEBUG 2022-01-28 15:49:19,840 on stmt: plus_minus = $const390.6 ** $400binary_subtract.11
DEBUG 2022-01-28 15:49:19,840 on stmt: $412binary_floor_divide.16 = $N_det.252 // $const410.15
DEBUG 2022-01-28 15:49:19,840 on stmt: $418binary_subscr.19 = static_getitem(value=kept_edges, index=0, index_var=$const416.18, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:19,840 on stmt: $420build_tuple.20 = build_tuple(items=[Var($412binary_floor_divide.16, loop_hafnian_batch.py:68), Var($418binary_subscr.19, loop_hafnian_batch.py:68)])
DEBUG 2022-01-28 15:49:19,840 on stmt: $422binary_subscr.21 = getitem(value=binoms, index=$420build_tuple.20, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:19,840 on stmt: n_det_binom_prod = $422binary_subscr.21 * binom_prod.2
DEBUG 2022-01-28 15:49:19,840 on stmt: $434binary_modulo.26 = $N_det.252 % $const432.25
DEBUG 2022-01-28 15:49:19,840 on stmt: $438compare_op.28 = $434binary_modulo.26 == $const436.27
DEBUG 2022-01-28 15:49:19,840 on stmt: $440pred = call bool440($438compare_op.28, func=bool440, args=(Var($438compare_op.28, loop_hafnian_batch.py:70),), kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:19,840 on stmt: branch $440pred, 686, 725
DEBUG 2022-01-28 15:49:19,840 ==== SSA block analysis pass on 631
DEBUG 2022-01-28 15:49:19,840 Running <numba.core.ssa._GatherDefsHandler object at 0x000002410CC9A580>
DEBUG 2022-01-28 15:49:19,840 on stmt: $292call_function.6 = call $282load_global.1(delta.2, A, D, oddV, func=$282load_global.1, args=[Var(delta.2, loop_hafnian_batch.py:55), Var(A, loop_hafnian_batch.py:24), Var(D, loop_hafnian_batch.py:24), Var(oddV, loop_hafnian_batch.py:25)], kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:19,840 on stmt: $294unpack_sequence.11 = exhaust_iter(value=$292call_function.6, count=4)
DEBUG 2022-01-28 15:49:19,840 on stmt: $AX_S.250 = static_getitem(value=$294unpack_sequence.11, index=0, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:19,840 on stmt: $XD_S.249 = static_getitem(value=$294unpack_sequence.11, index=1, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:19,840 on stmt: $D_S.251 = static_getitem(value=$294unpack_sequence.11, index=2, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:19,840 on stmt: $oddVX_S.248 = static_getitem(value=$294unpack_sequence.11, index=3, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:19,840 on stmt: E = call $304load_global.12($AX_S.250, func=$304load_global.12, args=[Var($AX_S.250, loop_hafnian_batch.py:55)], kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:19,840 on stmt: f_even = call $312load_global.15(E, $AX_S.250, $XD_S.249, $D_S.251, N__max, func=$312load_global.15, args=[Var(E, loop_hafnian_batch.py:57), Var($AX_S.250, loop_hafnian_batch.py:55), Var($XD_S.249, loop_hafnian_batch.py:55), Var($D_S.251, loop_hafnian_batch.py:55), Var(N__max, loop_hafnian_batch.py:30)], kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:19,840 on stmt: f_odd = call $328load_global.22(E, $AX_S.250, $XD_S.249, $D_S.251, N__max, oddloop, $oddVX_S.248, func=$328load_global.22, args=[Var(E, loop_hafnian_batch.py:57), Var($AX_S.250, loop_hafnian_batch.py:55), Var($XD_S.249, loop_hafnian_batch.py:55), Var($D_S.251, loop_hafnian_batch.py:55), Var(N__max, loop_hafnian_batch.py:30), Var(oddloop, loop_hafnian_batch.py:24), Var($oddVX_S.248, loop_hafnian_batch.py:55)], kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:19,840 on stmt: $356binary_subscr.35 = static_getitem(value=kept_edges, index=0, index_var=$const354.34, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:19,840 on stmt: $358binary_multiply.36 = $const350.32 * $356binary_subscr.35
DEBUG 2022-01-28 15:49:19,840 on stmt: $374call_function.44 = call $348load_global.31($358binary_multiply.36, $372binary_add.43, func=$348load_global.31, args=[Var($358binary_multiply.36, loop_hafnian_batch.py:64), Var($372binary_add.43, loop_hafnian_batch.py:64)], kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:19,840 on stmt: $376get_iter.45 = getiter(value=$374call_function.44)
DEBUG 2022-01-28 15:49:19,840 on stmt: jump 668
DEBUG 2022-01-28 15:49:19,840 ==== SSA block analysis pass on 495
DEBUG 2022-01-28 15:49:19,840 Running <numba.core.ssa._GatherDefsHandler object at 0x000002410CC9A580>
DEBUG 2022-01-28 15:49:19,840 on stmt: $228for_iter.2 = iternext(value=$226get_iter.29)
DEBUG 2022-01-28 15:49:19,840 on stmt: $i.253 = pair_first(value=$228for_iter.2)
DEBUG 2022-01-28 15:49:19,840 on stmt: $228for_iter.4 = pair_second(value=$228for_iter.2)
DEBUG 2022-01-28 15:49:19,840 on stmt: branch $228for_iter.4, 571, 577
DEBUG 2022-01-28 15:49:19,840 ==== SSA block analysis pass on 668
DEBUG 2022-01-28 15:49:19,840 Running <numba.core.ssa._GatherDefsHandler object at 0x000002410CC9A580>
DEBUG 2022-01-28 15:49:19,840 on stmt: $378for_iter.2 = iternext(value=$376get_iter.45)
DEBUG 2022-01-28 15:49:19,840 on stmt: $N_det.252 = pair_first(value=$378for_iter.2)
DEBUG 2022-01-28 15:49:19,840 on stmt: $378for_iter.4 = pair_second(value=$378for_iter.2)
DEBUG 2022-01-28 15:49:19,840 on stmt: branch $378for_iter.4, 670, 743
DEBUG 2022-01-28 15:49:19,840 ==== SSA block analysis pass on 571
DEBUG 2022-01-28 15:49:19,840 Running <numba.core.ssa._GatherDefsHandler object at 0x000002410CC9A580>
DEBUG 2022-01-28 15:49:19,840 on stmt: $240binary_subscr.7 = getitem(value=edge__reps, index=$i.253, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:19,840 on stmt: $246binary_subscr.10 = getitem(value=kept_edges, index=$i.253, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:19,840 on stmt: $248build_tuple.11 = build_tuple(items=[Var($240binary_subscr.7, loop_hafnian_batch.py:48), Var($246binary_subscr.10, loop_hafnian_batch.py:48)])
DEBUG 2022-01-28 15:49:19,840 on stmt: $250binary_subscr.12 = getitem(value=binoms, index=$248build_tuple.11, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:19,840 on stmt: $binom_prod.2.600 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=binom_prod.2, rhs=$250binary_subscr.12, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-01-28 15:49:19,840 on stmt: binom_prod.2 = $binom_prod.2.600
DEBUG 2022-01-28 15:49:19,840 on stmt: jump 495
DEBUG 2022-01-28 15:49:19,840 ==== SSA block analysis pass on 727
DEBUG 2022-01-28 15:49:19,840 Running <numba.core.ssa._GatherDefsHandler object at 0x000002410CC9A580>
DEBUG 2022-01-28 15:49:19,840 on stmt: jump 668
DEBUG 2022-01-28 15:49:19,840 ==== SSA block analysis pass on 50
DEBUG 2022-01-28 15:49:19,840 Running <numba.core.ssa._GatherDefsHandler object at 0x000002410CC9A580>
DEBUG 2022-01-28 15:49:19,840 on stmt: j = parfor__index_230
DEBUG 2022-01-28 15:49:19,840 on stmt: id=2[LoopNest(index_variable = parfor_index.208, range = (0, $180binary_add.10, 1))]{887: <ir.Block at C:\Users\zl4821\PycharmProjects\GBS\gbs\loop_hafnian_batch.py (41)>}Var(parfor_index.208, loop_hafnian_batch.py:41)
DEBUG 2022-01-28 15:49:19,840 on stmt: kept_edges = call $192load_global.15(j, edge__reps, func=$192load_global.15, args=[Var(j, loop_hafnian_batch.py:39), Var(edge__reps, loop_hafnian_batch.py:32)], kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:19,840 on stmt: kept_edges_shape.167 = getattr(value=kept_edges, attr=shape)
DEBUG 2022-01-28 15:49:19,840 on stmt: kept_edges_size0.168 = static_getitem(value=kept_edges_shape.167, index=0, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:19,840 on stmt: binom_prod.2 = binom_prod
DEBUG 2022-01-28 15:49:19,840 on stmt: id=6[LoopNest(index_variable = parfor_index.226, range = (0, kept_edges_size0.168, 1))]{557: <ir.Block at C:\Users\zl4821\Anaconda3\envs\GBS\lib\site-packages\numba\parfors\parfor.py (256)>}Var(parfor_index.226, parfor.py:256)
DEBUG 2022-01-28 15:49:19,840 on stmt: $224call_function.28 = call $214load_global.23($const216.24, $222binary_floor_divide.27, func=$214load_global.23, args=[Var($const216.24, loop_hafnian_batch.py:47), Var($222binary_floor_divide.27, loop_hafnian_batch.py:47)], kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:19,840 on stmt: $226get_iter.29 = getiter(value=$224call_function.28)
DEBUG 2022-01-28 15:49:19,840 on stmt: jump 495
DEBUG 2022-01-28 15:49:19,840 ==== SSA block analysis pass on 743
DEBUG 2022-01-28 15:49:19,840 Running <numba.core.ssa._GatherDefsHandler object at 0x000002410CC9A580>
DEBUG 2022-01-28 15:49:19,840 on stmt: ret.193 = call assert.192(msg.191, _136binary__add_59, $180binary_add.10, func=assert.192, args=[Var(msg.191, loop_hafnian_batch.py:75), Var(_136binary__add_59, loop_hafnian_batch.py:38), Var($180binary_add.10, loop_hafnian_batch.py:41)], kws={}, vararg=None, target=None)
DEBUG 2022-01-28 15:49:19,840 on stmt: $H_batch.2.602 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=H__batch_2, rhs=Hnew, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-01-28 15:49:19,840 on stmt: H__batch_2 = $H_batch.2.602
DEBUG 2022-01-28 15:49:19,840 on stmt: jump 782
DEBUG 2022-01-28 15:49:19,840 ==== SSA block analysis pass on 577
DEBUG 2022-01-28 15:49:19,840 Running <numba.core.ssa._GatherDefsHandler object at 0x000002410CC9A580>
DEBUG 2022-01-28 15:49:19,840 on stmt: $260pred = call bool260(glynn, func=bool260, args=(Var(glynn, loop_hafnian_batch.py:24),), kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:19,840 on stmt: branch $260pred, 591, 593
DEBUG 2022-01-28 15:49:19,840 ==== SSA block analysis pass on 591
DEBUG 2022-01-28 15:49:19,840 Running <numba.core.ssa._GatherDefsHandler object at 0x000002410CC9A580>
DEBUG 2022-01-28 15:49:19,840 on stmt: ret.172 = call assert.171(msg.170, kept_edges_size0.168, edge__reps__size0_160, func=assert.171, args=[Var(msg.170, loop_hafnian_batch.py:51), Var(kept_edges_size0.168, loop_hafnian_batch.py:43), Var(edge__reps__size0_160, loop_hafnian_batch.py:32)], kws={}, vararg=None, target=None)
DEBUG 2022-01-28 15:49:19,840 on stmt: id=3[LoopNest(index_variable = parfor_index.213, range = (0, edge__reps__size0_160, 1))]{888: <ir.Block at C:\Users\zl4821\PycharmProjects\GBS\gbs\loop_hafnian_batch.py (51)>}Var(parfor_index.213, loop_hafnian_batch.py:51)
DEBUG 2022-01-28 15:49:19,840 on stmt: delta.2 = delta
DEBUG 2022-01-28 15:49:19,840 on stmt: jump 631
DEBUG 2022-01-28 15:49:19,840 ==== SSA block analysis pass on 782
DEBUG 2022-01-28 15:49:19,840 Running <numba.core.ssa._GatherDefsHandler object at 0x000002410CC9A580>
DEBUG 2022-01-28 15:49:19,840 on stmt: jump 40
DEBUG 2022-01-28 15:49:19,840 defs defaultdict(<class 'list'>,
            {'$12load_global.4.837': [<numba.core.ir.Assign object at 0x000002410CC66910>],
             '$172binary_multiply.6': [<numba.core.ir.Assign object at 0x0000024108C87F10>],
             '$176binary_add.8': [<numba.core.ir.Assign object at 0x0000024108C8B1F0>],
             '$180binary_add.10': [<numba.core.ir.Assign object at 0x0000024108C8B4F0>],
             '$18binary_subscr.7.839': [<numba.core.ir.Assign object at 0x000002410CC66D60>],
             '$192load_global.15': [<numba.core.ir.Assign object at 0x0000024108C8BDC0>],
             '$214load_global.23': [<numba.core.ir.Assign object at 0x0000024108C8EC40>],
             '$222binary_floor_divide.27': [<numba.core.ir.Assign object at 0x0000024108C8F250>],
             '$224call_function.28': [<numba.core.ir.Assign object at 0x0000024108C8F400>],
             '$226get_iter.29': [<numba.core.ir.Assign object at 0x0000024108C8F520>],
             '$228for_iter.2': [<numba.core.ir.Assign object at 0x0000024108C8EB50>],
             '$228for_iter.4': [<numba.core.ir.Assign object at 0x0000024108C8F730>],
             '$240binary_subscr.7': [<numba.core.ir.Assign object at 0x0000024108C91070>],
             '$246binary_subscr.10': [<numba.core.ir.Assign object at 0x0000024108C91430>],
             '$248build_tuple.11': [<numba.core.ir.Assign object at 0x0000024108C915B0>],
             '$24binary_subscr.10.841': [<numba.core.ir.Assign object at 0x000002410CC691C0>],
             '$250binary_subscr.12': [<numba.core.ir.Assign object at 0x0000024108C91730>],
             '$260pred': [<numba.core.ir.Assign object at 0x0000024108C91C40>],
             '$26load_global.11.842': [<numba.core.ir.Assign object at 0x000002410CC69310>],
             '$282load_global.1': [<numba.core.ir.Assign object at 0x0000024108C939A0>],
             '$28load_method.12.843': [<numba.core.ir.Assign object at 0x000002410CC69490>],
             '$292call_function.6': [<numba.core.ir.Assign object at 0x000002410AF22670>],
             '$294unpack_sequence.11': [<numba.core.ir.Assign object at 0x0000024108C95190>],
             '$2load_global.0.835': [<numba.core.ir.Assign object at 0x000002410CC66250>],
             '$304load_global.12': [<numba.core.ir.Assign object at 0x0000024108C95BE0>],
             '$312load_global.15': [<numba.core.ir.Assign object at 0x0000024108C97160>],
             '$328load_global.22': [<numba.core.ir.Assign object at 0x0000024108C97B20>],
             '$32call_method.14.845': [<numba.core.ir.Assign object at 0x000002410CC69820>],
             '$348load_global.31': [<numba.core.ir.Assign object at 0x0000024108C9A760>],
             '$34binary_add.15.846': [<numba.core.ir.Assign object at 0x000002410CC69940>],
             '$356binary_subscr.35': [<numba.core.ir.Assign object at 0x000002410AEDD970>],
             '$358binary_multiply.36': [<numba.core.ir.Assign object at 0x0000024108C9AEB0>],
             '$364binary_multiply.39': [<numba.core.ir.Assign object at 0x0000024108C9C310>],
             '$368binary_add.41': [<numba.core.ir.Assign object at 0x0000024108C9C5B0>],
             '$36call_function.16.847': [<numba.core.ir.Assign object at 0x000002410CC69AF0>],
             '$372binary_add.43': [<numba.core.ir.Assign object at 0x0000024108C9C8B0>],
             '$374call_function.44': [<numba.core.ir.Assign object at 0x0000024108C9CA60>],
             '$376get_iter.45': [<numba.core.ir.Assign object at 0x0000024108C9CB80>],
             '$378for_iter.2': [<numba.core.ir.Assign object at 0x0000024108C97DF0>],
             '$378for_iter.4': [<numba.core.ir.Assign object at 0x0000024108C9A670>],
             '$38get_iter.17.848': [<numba.core.ir.Assign object at 0x000002410CC69C10>],
             '$396binary_floor_divide.9': [<numba.core.ir.Assign object at 0x0000024108C9E670>],
             '$400binary_subtract.11': [<numba.core.ir.Assign object at 0x0000024108C9E910>],
             '$40for_iter.1.850': [<numba.core.ir.Assign object at 0x000002410CC69E20>],
             '$40for_iter.2.851': [<numba.core.ir.Assign object at 0x000002410CC69F40>],
             '$40for_iter.3.852': [<numba.core.ir.Assign object at 0x000002410CC6E0A0>],
             '$412binary_floor_divide.16': [<numba.core.ir.Assign object at 0x000002410AED0130>],
             '$418binary_subscr.19': [<numba.core.ir.Assign object at 0x000002410AEDD880>],
             '$420build_tuple.20': [<numba.core.ir.Assign object at 0x000002410AED06D0>],
             '$422binary_subscr.21': [<numba.core.ir.Assign object at 0x000002410AED0850>],
             '$434binary_modulo.26': [<numba.core.ir.Assign object at 0x000002410AED2070>],
             '$438compare_op.28': [<numba.core.ir.Assign object at 0x000002410AED2370>],
             '$440pred': [<numba.core.ir.Assign object at 0x000002410AED25E0>],
             '$450binary_subscr.6': [<numba.core.ir.Assign object at 0x000002410AED2850>],
             '$456binary_multiply.9': [<numba.core.ir.Assign object at 0x000002410AED2C10>],
             '$464binary_floor_divide.13': [<numba.core.ir.Assign object at 0x000002410AED5190>],
             '$466binary_subscr.14': [<numba.core.ir.Assign object at 0x000002410AED5310>],
             '$468binary_multiply.15': [<numba.core.ir.Assign object at 0x000002410AED5490>],
             '$470inplace_add.16': [<numba.core.ir.Assign object at 0x000002410AED5610>],
             '$484binary_subscr.6': [<numba.core.ir.Assign object at 0x000002410AED5AF0>],
             '$490binary_multiply.9': [<numba.core.ir.Assign object at 0x000002410AED5EB0>],
             '$496binary_subscr.12': [<numba.core.ir.Assign object at 0x000002410AED72B0>],
             '$498binary_multiply.13': [<numba.core.ir.Assign object at 0x000002410AED7430>],
             '$4load_method.1.836': [<numba.core.ir.Assign object at 0x000002410CC663D0>],
             '$500inplace_add.14': [<numba.core.ir.Assign object at 0x000002410AED75B0>],
             '$56build_slice.3.856': [<numba.core.ir.Assign object at 0x000002410CC6ECD0>],
             '$56build_slice.4.857': [<numba.core.ir.Assign object at 0x000002410CC6EDF0>],
             '$58binary_subscr.5.858': [<numba.core.ir.Assign object at 0x000002410CC55160>],
             '$66build_slice.10.862': [<numba.core.ir.Assign object at 0x000002410CCAF2B0>],
             '$66build_slice.9.861': [<numba.core.ir.Assign object at 0x000002410CCAF190>],
             '$72return_value.12.864': [<numba.core.ir.Assign object at 0x000002410CCAF670>],
             '$AX_S.250': [<numba.core.ir.Assign object at 0x0000024108C952E0>],
             '$D_S.251': [<numba.core.ir.Assign object at 0x0000024108C95520>],
             '$H_batch.2.602': [<numba.core.ir.Assign object at 0x000002410AF26160>],
             '$N_det.252': [<numba.core.ir.Assign object at 0x0000024108C9A190>],
             '$XD_S.249': [<numba.core.ir.Assign object at 0x0000024108C95400>],
             '$binom_prod.2.600': [<numba.core.ir.Assign object at 0x000002410AF22970>],
             '$const16.6.838': [<numba.core.ir.Assign object at 0x000002410CC66BB0>],
             '$const168.4': [<numba.core.ir.Assign object at 0x0000024108C87C40>],
             '$const178.9': [<numba.core.ir.Assign object at 0x0000024108C8B340>],
             '$const216.24': [<numba.core.ir.Assign object at 0x0000024108C8EDC0>],
             '$const22.9.840': [<numba.core.ir.Assign object at 0x000002410CC66FD0>],
             '$const220.26': [<numba.core.ir.Assign object at 0x0000024108C8F0A0>],
             '$const30.13.844': [<numba.core.ir.Assign object at 0x000002410CC69610>],
             '$const350.32': [<numba.core.ir.Assign object at 0x0000024108C9A8E0>],
             '$const354.34': [<numba.core.ir.Assign object at 0x0000024108C9AB80>],
             '$const360.37': [<numba.core.ir.Assign object at 0x0000024108C9C040>],
             '$const370.42': [<numba.core.ir.Assign object at 0x0000024108C9C700>],
             '$const390.6': [<numba.core.ir.Assign object at 0x0000024108C9E220>],
             '$const394.8': [<numba.core.ir.Assign object at 0x0000024108C9E4C0>],
             '$const410.15': [<numba.core.ir.Assign object at 0x0000024108C9EF40>],
             '$const416.18': [<numba.core.ir.Assign object at 0x000002410AED03A0>],
             '$const432.25': [<numba.core.ir.Assign object at 0x000002410AED0E80>],
             '$const436.27': [<numba.core.ir.Assign object at 0x000002410AED21C0>],
             '$const462.12': [<numba.core.ir.Assign object at 0x000002410AED2FA0>],
             '$const52.1.854': [<numba.core.ir.Assign object at 0x000002410CC6E9D0>],
             '$const54.2.855': [<numba.core.ir.Assign object at 0x000002410CC6EB50>],
             '$const62.7.859': [<numba.core.ir.Assign object at 0x000002410CCA5F10>],
             '$const64.8.860': [<numba.core.ir.Assign object at 0x000002410CC6EFD0>],
             '$const70.11.863': [<numba.core.ir.Assign object at 0x000002410CCAF4F0>],
             '$empty_attr_attr.210': [<numba.core.ir.Assign object at 0x000002410C245370>],
             '$empty_attr_attr.215': [<numba.core.ir.Assign object at 0x000002410C1C8310>],
             '$i.253': [<numba.core.ir.Assign object at 0x0000024108C8F610>],
             '$np_g_var.209': [<numba.core.ir.Assign object at 0x000002410C25CA90>],
             '$np_g_var.214': [<numba.core.ir.Assign object at 0x000002410C24D5B0>],
             '$np_typ_var.211': [<numba.core.ir.Assign object at 0x000002410C2452B0>],
             '$np_typ_var.216': [<numba.core.ir.Assign object at 0x000002410B0D90D0>],
             '$oddVX_S.248': [<numba.core.ir.Assign object at 0x0000024108C95640>],
             '$phi40.0.849': [<numba.core.ir.Assign object at 0x000002410CC66580>],
             '$phi42.1.853': [<numba.core.ir.Assign object at 0x000002410CC69D60>],
             'A': [<numba.core.ir.Assign object at 0x000002410CC4C7F0>],
             'D': [<numba.core.ir.Assign object at 0x000002410CC4C4C0>],
             'E': [<numba.core.ir.Assign object at 0x0000024108C95EE0>],
             'H__batch_2': [<numba.core.ir.Assign object at 0x000002410CC66700>,
                            <numba.core.ir.Assign object at 0x000002410B0DBD90>],
             'H__batch_2__arr': [<numba.core.ir.Assign object at 0x000002410CC660D0>],
             'Hnew': [<numba.core.ir.Assign object at 0x000002410C245970>],
             'N': [<numba.core.ir.Assign object at 0x0000024108C9CF70>],
             'N__fixed': [<numba.core.ir.Assign object at 0x000002410CC4C3A0>],
             'N__max': [<numba.core.ir.Assign object at 0x000002410CC4C280>],
             '_136binary__add_59': [<numba.core.ir.Assign object at 0x000002410CC4C910>],
             'assert.171': [<numba.core.ir.Assign object at 0x000002410C224940>],
             'assert.192': [<numba.core.ir.Assign object at 0x000002410C232160>],
             'batch__max': [<numba.core.ir.Assign object at 0x000002410CC4C160>],
             'binom_prod': [<numba.core.ir.Assign object at 0x000002410AEDDE80>],
             'binom_prod.2': [<numba.core.ir.Assign object at 0x000002410B0DBB50>,
                              <numba.core.ir.Assign object at 0x000002410B0DBA30>],
             'binoms': [<numba.core.ir.Assign object at 0x000002410CC4C040>],
             'bool260': [<numba.core.ir.Assign object at 0x0000024108C91B20>],
             'bool440': [<numba.core.ir.Assign object at 0x000002410AED24C0>],
             'delta': [<numba.core.ir.Assign object at 0x000002410C212BB0>],
             'delta.2': [<numba.core.ir.Assign object at 0x000002410B0DB9A0>,
                         <numba.core.ir.Assign object at 0x000002410B0DBC70>],
             'edge__reps': [<numba.core.ir.Assign object at 0x000002410CC55EB0>],
             'edge__reps__size0_160': [<numba.core.ir.Assign object at 0x000002410CC55FA0>],
             'f_even': [<numba.core.ir.Assign object at 0x0000024108C978E0>],
             'f_odd': [<numba.core.ir.Assign object at 0x0000024108C9A520>],
             'glynn': [<numba.core.ir.Assign object at 0x000002410CC55D60>],
             'j': [<numba.core.ir.Assign object at 0x000002410AEDDEB0>],
             'kept_edges': [<numba.core.ir.Assign object at 0x0000024108C8E220>],
             'kept_edges_shape.167': [<numba.core.ir.Assign object at 0x000002410C2245E0>],
             'kept_edges_size0.168': [<numba.core.ir.Assign object at 0x000002410C224070>],
             'msg.170': [<numba.core.ir.Assign object at 0x000002410C224640>],
             'msg.191': [<numba.core.ir.Assign object at 0x000002410C224BE0>],
             'n': [<numba.core.ir.Assign object at 0x000002410CC55C40>],
             'n_det_binom_prod': [<numba.core.ir.Assign object at 0x000002410AF22D30>],
             'oddV': [<numba.core.ir.Assign object at 0x000002410CC55A90>],
             'odd__cutoff': [<numba.core.ir.Assign object at 0x000002410CC55970>],
             'oddloop': [<numba.core.ir.Assign object at 0x000002410C42CC70>],
             'parfor__index_230': [<numba.core.ir.Assign object at 0x000002410CC6E370>],
             'plus_minus': [<numba.core.ir.Assign object at 0x0000024108C9EA90>],
             'ret.172': [<numba.core.ir.Assign object at 0x000002410C2247C0>],
             'ret.193': [<numba.core.ir.Assign object at 0x000002410C232280>],
             'sched.834': [<numba.core.ir.Assign object at 0x000002410CC4CA30>]})
DEBUG 2022-01-28 15:49:19,840 SSA violators {'delta.2', 'H__batch_2', 'binom_prod.2'}
DEBUG 2022-01-28 15:49:19,840 Fix SSA violator on var delta.2
DEBUG 2022-01-28 15:49:19,840 ==== SSA block rewrite pass on 0
DEBUG 2022-01-28 15:49:19,840 Running <numba.core.ssa._FreshVarHandler object at 0x000002410CC11BB0>
DEBUG 2022-01-28 15:49:19,840 on stmt: sched.834 = arg(0, name=sched)
DEBUG 2022-01-28 15:49:19,840 on stmt: _136binary__add_59 = arg(1, name=_136binary__add_59)
DEBUG 2022-01-28 15:49:19,840 on stmt: A = arg(2, name=A)
DEBUG 2022-01-28 15:49:19,840 on stmt: D = arg(3, name=D)
DEBUG 2022-01-28 15:49:19,840 on stmt: N__fixed = arg(4, name=N__fixed)
DEBUG 2022-01-28 15:49:19,840 on stmt: N__max = arg(5, name=N__max)
DEBUG 2022-01-28 15:49:19,840 on stmt: batch__max = arg(6, name=batch__max)
DEBUG 2022-01-28 15:49:19,840 on stmt: binoms = arg(7, name=binoms)
DEBUG 2022-01-28 15:49:19,840 on stmt: edge__reps = arg(8, name=edge__reps)
DEBUG 2022-01-28 15:49:19,840 on stmt: edge__reps__size0_160 = arg(9, name=edge__reps__size0_160)
DEBUG 2022-01-28 15:49:19,840 on stmt: glynn = arg(10, name=glynn)
DEBUG 2022-01-28 15:49:19,840 on stmt: n = arg(11, name=n)
DEBUG 2022-01-28 15:49:19,840 on stmt: oddV = arg(12, name=oddV)
DEBUG 2022-01-28 15:49:19,840 on stmt: odd__cutoff = arg(13, name=odd__cutoff)
DEBUG 2022-01-28 15:49:19,840 on stmt: oddloop = arg(14, name=oddloop)
DEBUG 2022-01-28 15:49:19,840 on stmt: H__batch_2__arr = arg(15, name=H__batch_2__arr)
DEBUG 2022-01-28 15:49:19,840 on stmt: $2load_global.0.835 = global(np: <module 'numpy' from 'C:\\Users\\zl4821\\Anaconda3\\envs\\GBS\\lib\\site-packages\\numpy\\__init__.py'>)
DEBUG 2022-01-28 15:49:19,840 on stmt: $4load_method.1.836 = getattr(value=$2load_global.0.835, attr=copy)
DEBUG 2022-01-28 15:49:19,840 on stmt: H__batch_2 = call $4load_method.1.836(H__batch_2__arr, func=$4load_method.1.836, args=[Var(H__batch_2__arr, <string>:2)], kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:19,840 on stmt: $12load_global.4.837 = global(range: <class 'range'>)
DEBUG 2022-01-28 15:49:19,840 on stmt: $const16.6.838 = const(int, 0)
DEBUG 2022-01-28 15:49:19,840 on stmt: $18binary_subscr.7.839 = getitem(value=sched.834, index=$const16.6.838, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:19,840 on stmt: $const22.9.840 = const(int, 1)
DEBUG 2022-01-28 15:49:19,840 on stmt: $24binary_subscr.10.841 = getitem(value=sched.834, index=$const22.9.840, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:19,840 on stmt: $26load_global.11.842 = global(np: <module 'numpy' from 'C:\\Users\\zl4821\\Anaconda3\\envs\\GBS\\lib\\site-packages\\numpy\\__init__.py'>)
DEBUG 2022-01-28 15:49:19,840 on stmt: $28load_method.12.843 = getattr(value=$26load_global.11.842, attr=uint8)
DEBUG 2022-01-28 15:49:19,840 on stmt: $const30.13.844 = const(int, 1)
DEBUG 2022-01-28 15:49:19,840 on stmt: $32call_method.14.845 = call $28load_method.12.843($const30.13.844, func=$28load_method.12.843, args=[Var($const30.13.844, <string>:3)], kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:19,840 on stmt: $34binary_add.15.846 = $24binary_subscr.10.841 + $32call_method.14.845
DEBUG 2022-01-28 15:49:19,840 on stmt: $36call_function.16.847 = call $12load_global.4.837($18binary_subscr.7.839, $34binary_add.15.846, func=$12load_global.4.837, args=[Var($18binary_subscr.7.839, <string>:3), Var($34binary_add.15.846, <string>:3)], kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:19,840 on stmt: $38get_iter.17.848 = getiter(value=$36call_function.16.847)
DEBUG 2022-01-28 15:49:19,840 on stmt: $phi40.0.849 = $38get_iter.17.848
DEBUG 2022-01-28 15:49:19,840 on stmt: $const462.12 = const(int, 2)
DEBUG 2022-01-28 15:49:19,840 on stmt: $const390.6 = const(float, -1.0)
DEBUG 2022-01-28 15:49:19,856 on stmt: $const394.8 = const(int, 2)
DEBUG 2022-01-28 15:49:19,856 on stmt: $const410.15 = const(int, 2)
DEBUG 2022-01-28 15:49:19,856 on stmt: $const416.18 = const(int, 0)
DEBUG 2022-01-28 15:49:19,856 on stmt: $const432.25 = const(int, 2)
DEBUG 2022-01-28 15:49:19,856 on stmt: $const436.27 = const(int, 0)
DEBUG 2022-01-28 15:49:19,856 on stmt: bool440 = global(bool: <class 'bool'>)
DEBUG 2022-01-28 15:49:19,856 on stmt: $282load_global.1 = global(get_submatrices: CPUDispatcher(<function get_submatrices at 0x0000024107424E50>))
DEBUG 2022-01-28 15:49:19,856 on stmt: $304load_global.12 = global(eigvals: CPUDispatcher(<function eigvals at 0x00000241074303A0>))
DEBUG 2022-01-28 15:49:19,856 on stmt: $312load_global.15 = global(f_loop: CPUDispatcher(<function f_loop at 0x00000241074248B0>))
DEBUG 2022-01-28 15:49:19,856 on stmt: $328load_global.22 = global(f_loop_odd: CPUDispatcher(<function f_loop_odd at 0x0000024107424AF0>))
DEBUG 2022-01-28 15:49:19,856 on stmt: $348load_global.31 = global(range: <class 'range'>)
DEBUG 2022-01-28 15:49:19,856 on stmt: $const350.32 = const(int, 2)
DEBUG 2022-01-28 15:49:19,856 on stmt: $const354.34 = const(int, 0)
DEBUG 2022-01-28 15:49:19,856 on stmt: $const360.37 = const(int, 2)
DEBUG 2022-01-28 15:49:19,856 on stmt: $364binary_multiply.39 = $const360.37 * batch__max
DEBUG 2022-01-28 15:49:19,856 on stmt: $368binary_add.41 = $364binary_multiply.39 + odd__cutoff
DEBUG 2022-01-28 15:49:19,856 on stmt: $const370.42 = const(int, 1)
DEBUG 2022-01-28 15:49:19,856 on stmt: $372binary_add.43 = $368binary_add.41 + $const370.42
DEBUG 2022-01-28 15:49:19,856 on stmt: $const168.4 = const(int, 2)
DEBUG 2022-01-28 15:49:19,856 on stmt: $172binary_multiply.6 = $const168.4 * batch__max
DEBUG 2022-01-28 15:49:19,856 on stmt: $176binary_add.8 = $172binary_multiply.6 + odd__cutoff
DEBUG 2022-01-28 15:49:19,856 on stmt: $const178.9 = const(int, 1)
DEBUG 2022-01-28 15:49:19,856 on stmt: $180binary_add.10 = $176binary_add.8 + $const178.9
DEBUG 2022-01-28 15:49:19,856 on stmt: $192load_global.15 = global(find_kept_edges: CPUDispatcher(<function find_kept_edges at 0x0000024107424550>))
DEBUG 2022-01-28 15:49:19,856 on stmt: $np_g_var.209 = global(np: <module 'numpy' from 'C:\\Users\\zl4821\\Anaconda3\\envs\\GBS\\lib\\site-packages\\numpy\\__init__.py'>)
DEBUG 2022-01-28 15:49:19,856 on stmt: $empty_attr_attr.210 = getattr(value=$np_g_var.209, attr=empty)
DEBUG 2022-01-28 15:49:19,856 on stmt: $np_typ_var.211 = getattr(value=$np_g_var.209, attr=complex128)
DEBUG 2022-01-28 15:49:19,856 on stmt: Hnew = call $empty_attr_attr.210($180binary_add.10, $np_typ_var.211, func=$empty_attr_attr.210, args=[Var($180binary_add.10, loop_hafnian_batch.py:41), Var($np_typ_var.211, loop_hafnian_batch.py:41)], kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:19,856 on stmt: binom_prod = const(float, 1.0)
DEBUG 2022-01-28 15:49:19,856 on stmt: $214load_global.23 = global(range: <class 'range'>)
DEBUG 2022-01-28 15:49:19,856 on stmt: $const216.24 = const(int, 1)
DEBUG 2022-01-28 15:49:19,856 on stmt: $const220.26 = const(int, 2)
DEBUG 2022-01-28 15:49:19,856 on stmt: $222binary_floor_divide.27 = n // $const220.26
DEBUG 2022-01-28 15:49:19,856 on stmt: msg.191 = const(str, Sizes of H_batch.2, Hnew do not match on C:\Users\zl4821\PycharmProjects\GBS\gbs\loop_hafnian_batch.py (75))
DEBUG 2022-01-28 15:49:19,856 on stmt: assert.192 = global(assert_equiv: <intrinsic assert_equiv>)
DEBUG 2022-01-28 15:49:19,856 on stmt: bool260 = global(bool: <class 'bool'>)
DEBUG 2022-01-28 15:49:19,856 on stmt: msg.170 = const(str, Sizes of kept_edges, edge_reps do not match on C:\Users\zl4821\PycharmProjects\GBS\gbs\loop_hafnian_batch.py (51))
DEBUG 2022-01-28 15:49:19,856 on stmt: assert.171 = global(assert_equiv: <intrinsic assert_equiv>)
DEBUG 2022-01-28 15:49:19,856 on stmt: $np_g_var.214 = global(np: <module 'numpy' from 'C:\\Users\\zl4821\\Anaconda3\\envs\\GBS\\lib\\site-packages\\numpy\\__init__.py'>)
DEBUG 2022-01-28 15:49:19,856 on stmt: $empty_attr_attr.215 = getattr(value=$np_g_var.214, attr=empty)
DEBUG 2022-01-28 15:49:19,856 on stmt: $np_typ_var.216 = getattr(value=$np_g_var.214, attr=int64)
DEBUG 2022-01-28 15:49:19,856 on stmt: delta = call $empty_attr_attr.215(edge__reps__size0_160, $np_typ_var.216, func=$empty_attr_attr.215, args=[Var(edge__reps__size0_160, loop_hafnian_batch.py:32), Var($np_typ_var.216, loop_hafnian_batch.py:51)], kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:19,856 on stmt: jump 40
DEBUG 2022-01-28 15:49:19,856 ==== SSA block rewrite pass on 40
DEBUG 2022-01-28 15:49:19,856 Running <numba.core.ssa._FreshVarHandler object at 0x000002410CC11BB0>
DEBUG 2022-01-28 15:49:19,856 on stmt: $40for_iter.1.850 = iternext(value=$phi40.0.849)
DEBUG 2022-01-28 15:49:19,856 on stmt: $40for_iter.2.851 = pair_first(value=$40for_iter.1.850)
DEBUG 2022-01-28 15:49:19,856 on stmt: $40for_iter.3.852 = pair_second(value=$40for_iter.1.850)
DEBUG 2022-01-28 15:49:19,856 on stmt: $phi42.1.853 = $40for_iter.2.851
DEBUG 2022-01-28 15:49:19,856 on stmt: branch $40for_iter.3.852, 42, 889
DEBUG 2022-01-28 15:49:19,856 ==== SSA block rewrite pass on 42
DEBUG 2022-01-28 15:49:19,856 Running <numba.core.ssa._FreshVarHandler object at 0x000002410CC11BB0>
DEBUG 2022-01-28 15:49:19,856 on stmt: parfor__index_230 = $phi42.1.853
DEBUG 2022-01-28 15:49:19,856 on stmt: jump 50
DEBUG 2022-01-28 15:49:19,856 ==== SSA block rewrite pass on 889
DEBUG 2022-01-28 15:49:19,856 Running <numba.core.ssa._FreshVarHandler object at 0x000002410CC11BB0>
DEBUG 2022-01-28 15:49:19,856 on stmt: $const52.1.854 = const(NoneType, None)
DEBUG 2022-01-28 15:49:19,856 on stmt: $const54.2.855 = const(NoneType, None)
DEBUG 2022-01-28 15:49:19,856 on stmt: $56build_slice.3.856 = global(slice: <class 'slice'>)
DEBUG 2022-01-28 15:49:19,856 on stmt: $56build_slice.4.857 = call $56build_slice.3.856($const52.1.854, $const54.2.855, func=$56build_slice.3.856, args=(Var($const52.1.854, <string>:5), Var($const54.2.855, <string>:5)), kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:19,856 on stmt: $58binary_subscr.5.858 = getitem(value=H__batch_2, index=$56build_slice.4.857, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:19,856 on stmt: $const62.7.859 = const(NoneType, None)
DEBUG 2022-01-28 15:49:19,856 on stmt: $const64.8.860 = const(NoneType, None)
DEBUG 2022-01-28 15:49:19,856 on stmt: $66build_slice.9.861 = global(slice: <class 'slice'>)
DEBUG 2022-01-28 15:49:19,856 on stmt: $66build_slice.10.862 = call $66build_slice.9.861($const62.7.859, $const64.8.860, func=$66build_slice.9.861, args=(Var($const62.7.859, <string>:5), Var($const64.8.860, <string>:5)), kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:19,856 on stmt: H__batch_2__arr[$66build_slice.10.862] = $58binary_subscr.5.858
DEBUG 2022-01-28 15:49:19,856 on stmt: $const70.11.863 = const(NoneType, None)
DEBUG 2022-01-28 15:49:19,856 on stmt: $72return_value.12.864 = cast(value=$const70.11.863)
DEBUG 2022-01-28 15:49:19,856 on stmt: return $72return_value.12.864
DEBUG 2022-01-28 15:49:19,856 ==== SSA block rewrite pass on 686
DEBUG 2022-01-28 15:49:19,856 Running <numba.core.ssa._FreshVarHandler object at 0x000002410CC11BB0>
DEBUG 2022-01-28 15:49:19,856 on stmt: $450binary_subscr.6 = getitem(value=Hnew, index=$N_det.252, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:19,856 on stmt: $456binary_multiply.9 = n_det_binom_prod * plus_minus
DEBUG 2022-01-28 15:49:19,856 on stmt: $464binary_floor_divide.13 = N // $const462.12
DEBUG 2022-01-28 15:49:19,856 on stmt: $466binary_subscr.14 = getitem(value=f_even, index=$464binary_floor_divide.13, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:19,856 on stmt: $468binary_multiply.15 = $456binary_multiply.9 * $466binary_subscr.14
DEBUG 2022-01-28 15:49:19,856 on stmt: $470inplace_add.16 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$450binary_subscr.6, rhs=$468binary_multiply.15, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-01-28 15:49:19,856 on stmt: Hnew[$N_det.252] = $470inplace_add.16
DEBUG 2022-01-28 15:49:19,856 on stmt: jump 727
DEBUG 2022-01-28 15:49:19,856 ==== SSA block rewrite pass on 725
DEBUG 2022-01-28 15:49:19,856 Running <numba.core.ssa._FreshVarHandler object at 0x000002410CC11BB0>
DEBUG 2022-01-28 15:49:19,856 on stmt: $484binary_subscr.6 = getitem(value=Hnew, index=$N_det.252, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:19,856 on stmt: $490binary_multiply.9 = n_det_binom_prod * plus_minus
DEBUG 2022-01-28 15:49:19,856 on stmt: $496binary_subscr.12 = getitem(value=f_odd, index=N, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:19,856 on stmt: $498binary_multiply.13 = $490binary_multiply.9 * $496binary_subscr.12
DEBUG 2022-01-28 15:49:19,856 on stmt: $500inplace_add.14 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$484binary_subscr.6, rhs=$498binary_multiply.13, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-01-28 15:49:19,856 on stmt: Hnew[$N_det.252] = $500inplace_add.14
DEBUG 2022-01-28 15:49:19,856 on stmt: jump 727
DEBUG 2022-01-28 15:49:19,856 ==== SSA block rewrite pass on 593
DEBUG 2022-01-28 15:49:19,856 Running <numba.core.ssa._FreshVarHandler object at 0x000002410CC11BB0>
DEBUG 2022-01-28 15:49:19,856 on stmt: delta.2 = kept_edges
DEBUG 2022-01-28 15:49:19,856 first assign: delta.2
DEBUG 2022-01-28 15:49:19,856 replaced with: delta.2 = kept_edges
DEBUG 2022-01-28 15:49:19,856 on stmt: jump 631
DEBUG 2022-01-28 15:49:19,856 ==== SSA block rewrite pass on 670
DEBUG 2022-01-28 15:49:19,856 Running <numba.core.ssa._FreshVarHandler object at 0x000002410CC11BB0>
DEBUG 2022-01-28 15:49:19,856 on stmt: N = N__fixed + $N_det.252
DEBUG 2022-01-28 15:49:19,856 on stmt: $396binary_floor_divide.9 = N // $const394.8
DEBUG 2022-01-28 15:49:19,856 on stmt: $400binary_subtract.11 = $396binary_floor_divide.9 - val.10
DEBUG 2022-01-28 15:49:19,856 on stmt: plus_minus = $const390.6 ** $400binary_subtract.11
DEBUG 2022-01-28 15:49:19,856 on stmt: $412binary_floor_divide.16 = $N_det.252 // $const410.15
DEBUG 2022-01-28 15:49:19,856 on stmt: $418binary_subscr.19 = static_getitem(value=kept_edges, index=0, index_var=$const416.18, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:19,856 on stmt: $420build_tuple.20 = build_tuple(items=[Var($412binary_floor_divide.16, loop_hafnian_batch.py:68), Var($418binary_subscr.19, loop_hafnian_batch.py:68)])
DEBUG 2022-01-28 15:49:19,856 on stmt: $422binary_subscr.21 = getitem(value=binoms, index=$420build_tuple.20, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:19,856 on stmt: n_det_binom_prod = $422binary_subscr.21 * binom_prod.2
DEBUG 2022-01-28 15:49:19,856 on stmt: $434binary_modulo.26 = $N_det.252 % $const432.25
DEBUG 2022-01-28 15:49:19,856 on stmt: $438compare_op.28 = $434binary_modulo.26 == $const436.27
DEBUG 2022-01-28 15:49:19,856 on stmt: $440pred = call bool440($438compare_op.28, func=bool440, args=(Var($438compare_op.28, loop_hafnian_batch.py:70),), kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:19,856 on stmt: branch $440pred, 686, 725
DEBUG 2022-01-28 15:49:19,856 ==== SSA block rewrite pass on 631
DEBUG 2022-01-28 15:49:19,856 Running <numba.core.ssa._FreshVarHandler object at 0x000002410CC11BB0>
DEBUG 2022-01-28 15:49:19,856 on stmt: $292call_function.6 = call $282load_global.1(delta.2, A, D, oddV, func=$282load_global.1, args=[Var(delta.2, loop_hafnian_batch.py:55), Var(A, loop_hafnian_batch.py:24), Var(D, loop_hafnian_batch.py:24), Var(oddV, loop_hafnian_batch.py:25)], kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:19,856 on stmt: $294unpack_sequence.11 = exhaust_iter(value=$292call_function.6, count=4)
DEBUG 2022-01-28 15:49:19,856 on stmt: $AX_S.250 = static_getitem(value=$294unpack_sequence.11, index=0, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:19,856 on stmt: $XD_S.249 = static_getitem(value=$294unpack_sequence.11, index=1, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:19,856 on stmt: $D_S.251 = static_getitem(value=$294unpack_sequence.11, index=2, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:19,856 on stmt: $oddVX_S.248 = static_getitem(value=$294unpack_sequence.11, index=3, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:19,856 on stmt: E = call $304load_global.12($AX_S.250, func=$304load_global.12, args=[Var($AX_S.250, loop_hafnian_batch.py:55)], kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:19,856 on stmt: f_even = call $312load_global.15(E, $AX_S.250, $XD_S.249, $D_S.251, N__max, func=$312load_global.15, args=[Var(E, loop_hafnian_batch.py:57), Var($AX_S.250, loop_hafnian_batch.py:55), Var($XD_S.249, loop_hafnian_batch.py:55), Var($D_S.251, loop_hafnian_batch.py:55), Var(N__max, loop_hafnian_batch.py:30)], kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:19,856 on stmt: f_odd = call $328load_global.22(E, $AX_S.250, $XD_S.249, $D_S.251, N__max, oddloop, $oddVX_S.248, func=$328load_global.22, args=[Var(E, loop_hafnian_batch.py:57), Var($AX_S.250, loop_hafnian_batch.py:55), Var($XD_S.249, loop_hafnian_batch.py:55), Var($D_S.251, loop_hafnian_batch.py:55), Var(N__max, loop_hafnian_batch.py:30), Var(oddloop, loop_hafnian_batch.py:24), Var($oddVX_S.248, loop_hafnian_batch.py:55)], kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:19,856 on stmt: $356binary_subscr.35 = static_getitem(value=kept_edges, index=0, index_var=$const354.34, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:19,856 on stmt: $358binary_multiply.36 = $const350.32 * $356binary_subscr.35
DEBUG 2022-01-28 15:49:19,856 on stmt: $374call_function.44 = call $348load_global.31($358binary_multiply.36, $372binary_add.43, func=$348load_global.31, args=[Var($358binary_multiply.36, loop_hafnian_batch.py:64), Var($372binary_add.43, loop_hafnian_batch.py:64)], kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:19,856 on stmt: $376get_iter.45 = getiter(value=$374call_function.44)
DEBUG 2022-01-28 15:49:19,856 on stmt: jump 668
DEBUG 2022-01-28 15:49:19,856 ==== SSA block rewrite pass on 495
DEBUG 2022-01-28 15:49:19,856 Running <numba.core.ssa._FreshVarHandler object at 0x000002410CC11BB0>
DEBUG 2022-01-28 15:49:19,856 on stmt: $228for_iter.2 = iternext(value=$226get_iter.29)
DEBUG 2022-01-28 15:49:19,856 on stmt: $i.253 = pair_first(value=$228for_iter.2)
DEBUG 2022-01-28 15:49:19,856 on stmt: $228for_iter.4 = pair_second(value=$228for_iter.2)
DEBUG 2022-01-28 15:49:19,856 on stmt: branch $228for_iter.4, 571, 577
DEBUG 2022-01-28 15:49:19,871 ==== SSA block rewrite pass on 668
DEBUG 2022-01-28 15:49:19,871 Running <numba.core.ssa._FreshVarHandler object at 0x000002410CC11BB0>
DEBUG 2022-01-28 15:49:19,871 on stmt: $378for_iter.2 = iternext(value=$376get_iter.45)
DEBUG 2022-01-28 15:49:19,871 on stmt: $N_det.252 = pair_first(value=$378for_iter.2)
DEBUG 2022-01-28 15:49:19,871 on stmt: $378for_iter.4 = pair_second(value=$378for_iter.2)
DEBUG 2022-01-28 15:49:19,871 on stmt: branch $378for_iter.4, 670, 743
DEBUG 2022-01-28 15:49:19,871 ==== SSA block rewrite pass on 571
DEBUG 2022-01-28 15:49:19,871 Running <numba.core.ssa._FreshVarHandler object at 0x000002410CC11BB0>
DEBUG 2022-01-28 15:49:19,871 on stmt: $240binary_subscr.7 = getitem(value=edge__reps, index=$i.253, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:19,871 on stmt: $246binary_subscr.10 = getitem(value=kept_edges, index=$i.253, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:19,871 on stmt: $248build_tuple.11 = build_tuple(items=[Var($240binary_subscr.7, loop_hafnian_batch.py:48), Var($246binary_subscr.10, loop_hafnian_batch.py:48)])
DEBUG 2022-01-28 15:49:19,871 on stmt: $250binary_subscr.12 = getitem(value=binoms, index=$248build_tuple.11, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:19,871 on stmt: $binom_prod.2.600 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=binom_prod.2, rhs=$250binary_subscr.12, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-01-28 15:49:19,871 on stmt: binom_prod.2 = $binom_prod.2.600
DEBUG 2022-01-28 15:49:19,871 on stmt: jump 495
DEBUG 2022-01-28 15:49:19,871 ==== SSA block rewrite pass on 727
DEBUG 2022-01-28 15:49:19,871 Running <numba.core.ssa._FreshVarHandler object at 0x000002410CC11BB0>
DEBUG 2022-01-28 15:49:19,871 on stmt: jump 668
DEBUG 2022-01-28 15:49:19,871 ==== SSA block rewrite pass on 50
DEBUG 2022-01-28 15:49:19,871 Running <numba.core.ssa._FreshVarHandler object at 0x000002410CC11BB0>
DEBUG 2022-01-28 15:49:19,871 on stmt: j = parfor__index_230
DEBUG 2022-01-28 15:49:19,871 on stmt: id=2[LoopNest(index_variable = parfor_index.208, range = (0, $180binary_add.10, 1))]{887: <ir.Block at C:\Users\zl4821\PycharmProjects\GBS\gbs\loop_hafnian_batch.py (41)>}Var(parfor_index.208, loop_hafnian_batch.py:41)
DEBUG 2022-01-28 15:49:19,871 on stmt: kept_edges = call $192load_global.15(j, edge__reps, func=$192load_global.15, args=[Var(j, loop_hafnian_batch.py:39), Var(edge__reps, loop_hafnian_batch.py:32)], kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:19,871 on stmt: kept_edges_shape.167 = getattr(value=kept_edges, attr=shape)
DEBUG 2022-01-28 15:49:19,871 on stmt: kept_edges_size0.168 = static_getitem(value=kept_edges_shape.167, index=0, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:19,871 on stmt: binom_prod.2 = binom_prod
DEBUG 2022-01-28 15:49:19,871 on stmt: id=6[LoopNest(index_variable = parfor_index.226, range = (0, kept_edges_size0.168, 1))]{557: <ir.Block at C:\Users\zl4821\Anaconda3\envs\GBS\lib\site-packages\numba\parfors\parfor.py (256)>}Var(parfor_index.226, parfor.py:256)
DEBUG 2022-01-28 15:49:19,871 on stmt: $224call_function.28 = call $214load_global.23($const216.24, $222binary_floor_divide.27, func=$214load_global.23, args=[Var($const216.24, loop_hafnian_batch.py:47), Var($222binary_floor_divide.27, loop_hafnian_batch.py:47)], kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:19,871 on stmt: $226get_iter.29 = getiter(value=$224call_function.28)
DEBUG 2022-01-28 15:49:19,871 on stmt: jump 495
DEBUG 2022-01-28 15:49:19,871 ==== SSA block rewrite pass on 743
DEBUG 2022-01-28 15:49:19,871 Running <numba.core.ssa._FreshVarHandler object at 0x000002410CC11BB0>
DEBUG 2022-01-28 15:49:19,871 on stmt: ret.193 = call assert.192(msg.191, _136binary__add_59, $180binary_add.10, func=assert.192, args=[Var(msg.191, loop_hafnian_batch.py:75), Var(_136binary__add_59, loop_hafnian_batch.py:38), Var($180binary_add.10, loop_hafnian_batch.py:41)], kws={}, vararg=None, target=None)
DEBUG 2022-01-28 15:49:19,871 on stmt: $H_batch.2.602 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=H__batch_2, rhs=Hnew, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-01-28 15:49:19,871 on stmt: H__batch_2 = $H_batch.2.602
DEBUG 2022-01-28 15:49:19,871 on stmt: jump 782
DEBUG 2022-01-28 15:49:19,871 ==== SSA block rewrite pass on 577
DEBUG 2022-01-28 15:49:19,871 Running <numba.core.ssa._FreshVarHandler object at 0x000002410CC11BB0>
DEBUG 2022-01-28 15:49:19,871 on stmt: $260pred = call bool260(glynn, func=bool260, args=(Var(glynn, loop_hafnian_batch.py:24),), kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:19,871 on stmt: branch $260pred, 591, 593
DEBUG 2022-01-28 15:49:19,871 ==== SSA block rewrite pass on 591
DEBUG 2022-01-28 15:49:19,871 Running <numba.core.ssa._FreshVarHandler object at 0x000002410CC11BB0>
DEBUG 2022-01-28 15:49:19,871 on stmt: ret.172 = call assert.171(msg.170, kept_edges_size0.168, edge__reps__size0_160, func=assert.171, args=[Var(msg.170, loop_hafnian_batch.py:51), Var(kept_edges_size0.168, loop_hafnian_batch.py:43), Var(edge__reps__size0_160, loop_hafnian_batch.py:32)], kws={}, vararg=None, target=None)
DEBUG 2022-01-28 15:49:19,871 on stmt: id=3[LoopNest(index_variable = parfor_index.213, range = (0, edge__reps__size0_160, 1))]{888: <ir.Block at C:\Users\zl4821\PycharmProjects\GBS\gbs\loop_hafnian_batch.py (51)>}Var(parfor_index.213, loop_hafnian_batch.py:51)
DEBUG 2022-01-28 15:49:19,871 on stmt: delta.2 = delta
DEBUG 2022-01-28 15:49:19,871 replaced with: delta.2.1 = delta
DEBUG 2022-01-28 15:49:19,871 on stmt: jump 631
DEBUG 2022-01-28 15:49:19,871 ==== SSA block rewrite pass on 782
DEBUG 2022-01-28 15:49:19,871 Running <numba.core.ssa._FreshVarHandler object at 0x000002410CC11BB0>
DEBUG 2022-01-28 15:49:19,871 on stmt: jump 40
DEBUG 2022-01-28 15:49:19,871 Replaced assignments: defaultdict(<class 'list'>,
            {591: [<numba.core.ir.Assign object at 0x000002410CC72DC0>],
             593: [<numba.core.ir.Assign object at 0x000002410CC1E310>]})
DEBUG 2022-01-28 15:49:19,871 ==== SSA block rewrite pass on 0
DEBUG 2022-01-28 15:49:19,871 Running <numba.core.ssa._FixSSAVars object at 0x000002410CC11BB0>
DEBUG 2022-01-28 15:49:19,871 on stmt: sched.834 = arg(0, name=sched)
DEBUG 2022-01-28 15:49:19,871 on stmt: _136binary__add_59 = arg(1, name=_136binary__add_59)
DEBUG 2022-01-28 15:49:19,871 on stmt: A = arg(2, name=A)
DEBUG 2022-01-28 15:49:19,871 on stmt: D = arg(3, name=D)
DEBUG 2022-01-28 15:49:19,871 on stmt: N__fixed = arg(4, name=N__fixed)
DEBUG 2022-01-28 15:49:19,871 on stmt: N__max = arg(5, name=N__max)
DEBUG 2022-01-28 15:49:19,871 on stmt: batch__max = arg(6, name=batch__max)
DEBUG 2022-01-28 15:49:19,871 on stmt: binoms = arg(7, name=binoms)
DEBUG 2022-01-28 15:49:19,871 on stmt: edge__reps = arg(8, name=edge__reps)
DEBUG 2022-01-28 15:49:19,871 on stmt: edge__reps__size0_160 = arg(9, name=edge__reps__size0_160)
DEBUG 2022-01-28 15:49:19,871 on stmt: glynn = arg(10, name=glynn)
DEBUG 2022-01-28 15:49:19,871 on stmt: n = arg(11, name=n)
DEBUG 2022-01-28 15:49:19,871 on stmt: oddV = arg(12, name=oddV)
DEBUG 2022-01-28 15:49:19,871 on stmt: odd__cutoff = arg(13, name=odd__cutoff)
DEBUG 2022-01-28 15:49:19,871 on stmt: oddloop = arg(14, name=oddloop)
DEBUG 2022-01-28 15:49:19,871 on stmt: H__batch_2__arr = arg(15, name=H__batch_2__arr)
DEBUG 2022-01-28 15:49:19,871 on stmt: $2load_global.0.835 = global(np: <module 'numpy' from 'C:\\Users\\zl4821\\Anaconda3\\envs\\GBS\\lib\\site-packages\\numpy\\__init__.py'>)
DEBUG 2022-01-28 15:49:19,871 on stmt: $4load_method.1.836 = getattr(value=$2load_global.0.835, attr=copy)
DEBUG 2022-01-28 15:49:19,871 on stmt: H__batch_2 = call $4load_method.1.836(H__batch_2__arr, func=$4load_method.1.836, args=[Var(H__batch_2__arr, <string>:2)], kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:19,871 on stmt: $12load_global.4.837 = global(range: <class 'range'>)
DEBUG 2022-01-28 15:49:19,871 on stmt: $const16.6.838 = const(int, 0)
DEBUG 2022-01-28 15:49:19,871 on stmt: $18binary_subscr.7.839 = getitem(value=sched.834, index=$const16.6.838, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:19,871 on stmt: $const22.9.840 = const(int, 1)
DEBUG 2022-01-28 15:49:19,871 on stmt: $24binary_subscr.10.841 = getitem(value=sched.834, index=$const22.9.840, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:19,871 on stmt: $26load_global.11.842 = global(np: <module 'numpy' from 'C:\\Users\\zl4821\\Anaconda3\\envs\\GBS\\lib\\site-packages\\numpy\\__init__.py'>)
DEBUG 2022-01-28 15:49:19,871 on stmt: $28load_method.12.843 = getattr(value=$26load_global.11.842, attr=uint8)
DEBUG 2022-01-28 15:49:19,871 on stmt: $const30.13.844 = const(int, 1)
DEBUG 2022-01-28 15:49:19,871 on stmt: $32call_method.14.845 = call $28load_method.12.843($const30.13.844, func=$28load_method.12.843, args=[Var($const30.13.844, <string>:3)], kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:19,871 on stmt: $34binary_add.15.846 = $24binary_subscr.10.841 + $32call_method.14.845
DEBUG 2022-01-28 15:49:19,871 on stmt: $36call_function.16.847 = call $12load_global.4.837($18binary_subscr.7.839, $34binary_add.15.846, func=$12load_global.4.837, args=[Var($18binary_subscr.7.839, <string>:3), Var($34binary_add.15.846, <string>:3)], kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:19,871 on stmt: $38get_iter.17.848 = getiter(value=$36call_function.16.847)
DEBUG 2022-01-28 15:49:19,871 on stmt: $phi40.0.849 = $38get_iter.17.848
DEBUG 2022-01-28 15:49:19,871 on stmt: $const462.12 = const(int, 2)
DEBUG 2022-01-28 15:49:19,871 on stmt: $const390.6 = const(float, -1.0)
DEBUG 2022-01-28 15:49:19,871 on stmt: $const394.8 = const(int, 2)
DEBUG 2022-01-28 15:49:19,871 on stmt: $const410.15 = const(int, 2)
DEBUG 2022-01-28 15:49:19,871 on stmt: $const416.18 = const(int, 0)
DEBUG 2022-01-28 15:49:19,871 on stmt: $const432.25 = const(int, 2)
DEBUG 2022-01-28 15:49:19,871 on stmt: $const436.27 = const(int, 0)
DEBUG 2022-01-28 15:49:19,871 on stmt: bool440 = global(bool: <class 'bool'>)
DEBUG 2022-01-28 15:49:19,871 on stmt: $282load_global.1 = global(get_submatrices: CPUDispatcher(<function get_submatrices at 0x0000024107424E50>))
DEBUG 2022-01-28 15:49:19,871 on stmt: $304load_global.12 = global(eigvals: CPUDispatcher(<function eigvals at 0x00000241074303A0>))
DEBUG 2022-01-28 15:49:19,871 on stmt: $312load_global.15 = global(f_loop: CPUDispatcher(<function f_loop at 0x00000241074248B0>))
DEBUG 2022-01-28 15:49:19,871 on stmt: $328load_global.22 = global(f_loop_odd: CPUDispatcher(<function f_loop_odd at 0x0000024107424AF0>))
DEBUG 2022-01-28 15:49:19,871 on stmt: $348load_global.31 = global(range: <class 'range'>)
DEBUG 2022-01-28 15:49:19,871 on stmt: $const350.32 = const(int, 2)
DEBUG 2022-01-28 15:49:19,871 on stmt: $const354.34 = const(int, 0)
DEBUG 2022-01-28 15:49:19,871 on stmt: $const360.37 = const(int, 2)
DEBUG 2022-01-28 15:49:19,871 on stmt: $364binary_multiply.39 = $const360.37 * batch__max
DEBUG 2022-01-28 15:49:19,871 on stmt: $368binary_add.41 = $364binary_multiply.39 + odd__cutoff
DEBUG 2022-01-28 15:49:19,871 on stmt: $const370.42 = const(int, 1)
DEBUG 2022-01-28 15:49:19,871 on stmt: $372binary_add.43 = $368binary_add.41 + $const370.42
DEBUG 2022-01-28 15:49:19,871 on stmt: $const168.4 = const(int, 2)
DEBUG 2022-01-28 15:49:19,871 on stmt: $172binary_multiply.6 = $const168.4 * batch__max
DEBUG 2022-01-28 15:49:19,871 on stmt: $176binary_add.8 = $172binary_multiply.6 + odd__cutoff
DEBUG 2022-01-28 15:49:19,871 on stmt: $const178.9 = const(int, 1)
DEBUG 2022-01-28 15:49:19,871 on stmt: $180binary_add.10 = $176binary_add.8 + $const178.9
DEBUG 2022-01-28 15:49:19,871 on stmt: $192load_global.15 = global(find_kept_edges: CPUDispatcher(<function find_kept_edges at 0x0000024107424550>))
DEBUG 2022-01-28 15:49:19,871 on stmt: $np_g_var.209 = global(np: <module 'numpy' from 'C:\\Users\\zl4821\\Anaconda3\\envs\\GBS\\lib\\site-packages\\numpy\\__init__.py'>)
DEBUG 2022-01-28 15:49:19,871 on stmt: $empty_attr_attr.210 = getattr(value=$np_g_var.209, attr=empty)
DEBUG 2022-01-28 15:49:19,871 on stmt: $np_typ_var.211 = getattr(value=$np_g_var.209, attr=complex128)
DEBUG 2022-01-28 15:49:19,871 on stmt: Hnew = call $empty_attr_attr.210($180binary_add.10, $np_typ_var.211, func=$empty_attr_attr.210, args=[Var($180binary_add.10, loop_hafnian_batch.py:41), Var($np_typ_var.211, loop_hafnian_batch.py:41)], kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:19,871 on stmt: binom_prod = const(float, 1.0)
DEBUG 2022-01-28 15:49:19,871 on stmt: $214load_global.23 = global(range: <class 'range'>)
DEBUG 2022-01-28 15:49:19,871 on stmt: $const216.24 = const(int, 1)
DEBUG 2022-01-28 15:49:19,871 on stmt: $const220.26 = const(int, 2)
DEBUG 2022-01-28 15:49:19,871 on stmt: $222binary_floor_divide.27 = n // $const220.26
DEBUG 2022-01-28 15:49:19,871 on stmt: msg.191 = const(str, Sizes of H_batch.2, Hnew do not match on C:\Users\zl4821\PycharmProjects\GBS\gbs\loop_hafnian_batch.py (75))
DEBUG 2022-01-28 15:49:19,871 on stmt: assert.192 = global(assert_equiv: <intrinsic assert_equiv>)
DEBUG 2022-01-28 15:49:19,871 on stmt: bool260 = global(bool: <class 'bool'>)
DEBUG 2022-01-28 15:49:19,871 on stmt: msg.170 = const(str, Sizes of kept_edges, edge_reps do not match on C:\Users\zl4821\PycharmProjects\GBS\gbs\loop_hafnian_batch.py (51))
DEBUG 2022-01-28 15:49:19,871 on stmt: assert.171 = global(assert_equiv: <intrinsic assert_equiv>)
DEBUG 2022-01-28 15:49:19,871 on stmt: $np_g_var.214 = global(np: <module 'numpy' from 'C:\\Users\\zl4821\\Anaconda3\\envs\\GBS\\lib\\site-packages\\numpy\\__init__.py'>)
DEBUG 2022-01-28 15:49:19,871 on stmt: $empty_attr_attr.215 = getattr(value=$np_g_var.214, attr=empty)
DEBUG 2022-01-28 15:49:19,871 on stmt: $np_typ_var.216 = getattr(value=$np_g_var.214, attr=int64)
DEBUG 2022-01-28 15:49:19,871 on stmt: delta = call $empty_attr_attr.215(edge__reps__size0_160, $np_typ_var.216, func=$empty_attr_attr.215, args=[Var(edge__reps__size0_160, loop_hafnian_batch.py:32), Var($np_typ_var.216, loop_hafnian_batch.py:51)], kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:19,871 on stmt: jump 40
DEBUG 2022-01-28 15:49:19,871 ==== SSA block rewrite pass on 40
DEBUG 2022-01-28 15:49:19,871 Running <numba.core.ssa._FixSSAVars object at 0x000002410CC11BB0>
DEBUG 2022-01-28 15:49:19,871 on stmt: $40for_iter.1.850 = iternext(value=$phi40.0.849)
DEBUG 2022-01-28 15:49:19,871 on stmt: $40for_iter.2.851 = pair_first(value=$40for_iter.1.850)
DEBUG 2022-01-28 15:49:19,871 on stmt: $40for_iter.3.852 = pair_second(value=$40for_iter.1.850)
DEBUG 2022-01-28 15:49:19,871 on stmt: $phi42.1.853 = $40for_iter.2.851
DEBUG 2022-01-28 15:49:19,871 on stmt: branch $40for_iter.3.852, 42, 889
DEBUG 2022-01-28 15:49:19,871 ==== SSA block rewrite pass on 42
DEBUG 2022-01-28 15:49:19,871 Running <numba.core.ssa._FixSSAVars object at 0x000002410CC11BB0>
DEBUG 2022-01-28 15:49:19,871 on stmt: parfor__index_230 = $phi42.1.853
DEBUG 2022-01-28 15:49:19,871 on stmt: jump 50
DEBUG 2022-01-28 15:49:19,871 ==== SSA block rewrite pass on 889
DEBUG 2022-01-28 15:49:19,871 Running <numba.core.ssa._FixSSAVars object at 0x000002410CC11BB0>
DEBUG 2022-01-28 15:49:19,871 on stmt: $const52.1.854 = const(NoneType, None)
DEBUG 2022-01-28 15:49:19,871 on stmt: $const54.2.855 = const(NoneType, None)
DEBUG 2022-01-28 15:49:19,871 on stmt: $56build_slice.3.856 = global(slice: <class 'slice'>)
DEBUG 2022-01-28 15:49:19,871 on stmt: $56build_slice.4.857 = call $56build_slice.3.856($const52.1.854, $const54.2.855, func=$56build_slice.3.856, args=(Var($const52.1.854, <string>:5), Var($const54.2.855, <string>:5)), kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:19,871 on stmt: $58binary_subscr.5.858 = getitem(value=H__batch_2, index=$56build_slice.4.857, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:19,871 on stmt: $const62.7.859 = const(NoneType, None)
DEBUG 2022-01-28 15:49:19,871 on stmt: $const64.8.860 = const(NoneType, None)
DEBUG 2022-01-28 15:49:19,871 on stmt: $66build_slice.9.861 = global(slice: <class 'slice'>)
DEBUG 2022-01-28 15:49:19,871 on stmt: $66build_slice.10.862 = call $66build_slice.9.861($const62.7.859, $const64.8.860, func=$66build_slice.9.861, args=(Var($const62.7.859, <string>:5), Var($const64.8.860, <string>:5)), kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:19,871 on stmt: H__batch_2__arr[$66build_slice.10.862] = $58binary_subscr.5.858
DEBUG 2022-01-28 15:49:19,871 on stmt: $const70.11.863 = const(NoneType, None)
DEBUG 2022-01-28 15:49:19,871 on stmt: $72return_value.12.864 = cast(value=$const70.11.863)
DEBUG 2022-01-28 15:49:19,871 on stmt: return $72return_value.12.864
DEBUG 2022-01-28 15:49:19,871 ==== SSA block rewrite pass on 686
DEBUG 2022-01-28 15:49:19,871 Running <numba.core.ssa._FixSSAVars object at 0x000002410CC11BB0>
DEBUG 2022-01-28 15:49:19,871 on stmt: $450binary_subscr.6 = getitem(value=Hnew, index=$N_det.252, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:19,871 on stmt: $456binary_multiply.9 = n_det_binom_prod * plus_minus
DEBUG 2022-01-28 15:49:19,871 on stmt: $464binary_floor_divide.13 = N // $const462.12
DEBUG 2022-01-28 15:49:19,871 on stmt: $466binary_subscr.14 = getitem(value=f_even, index=$464binary_floor_divide.13, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:19,871 on stmt: $468binary_multiply.15 = $456binary_multiply.9 * $466binary_subscr.14
DEBUG 2022-01-28 15:49:19,871 on stmt: $470inplace_add.16 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$450binary_subscr.6, rhs=$468binary_multiply.15, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-01-28 15:49:19,871 on stmt: Hnew[$N_det.252] = $470inplace_add.16
DEBUG 2022-01-28 15:49:19,871 on stmt: jump 727
DEBUG 2022-01-28 15:49:19,871 ==== SSA block rewrite pass on 725
DEBUG 2022-01-28 15:49:19,887 Running <numba.core.ssa._FixSSAVars object at 0x000002410CC11BB0>
DEBUG 2022-01-28 15:49:19,887 on stmt: $484binary_subscr.6 = getitem(value=Hnew, index=$N_det.252, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:19,887 on stmt: $490binary_multiply.9 = n_det_binom_prod * plus_minus
DEBUG 2022-01-28 15:49:19,887 on stmt: $496binary_subscr.12 = getitem(value=f_odd, index=N, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:19,887 on stmt: $498binary_multiply.13 = $490binary_multiply.9 * $496binary_subscr.12
DEBUG 2022-01-28 15:49:19,887 on stmt: $500inplace_add.14 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$484binary_subscr.6, rhs=$498binary_multiply.13, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-01-28 15:49:19,887 on stmt: Hnew[$N_det.252] = $500inplace_add.14
DEBUG 2022-01-28 15:49:19,887 on stmt: jump 727
DEBUG 2022-01-28 15:49:19,887 ==== SSA block rewrite pass on 593
DEBUG 2022-01-28 15:49:19,887 Running <numba.core.ssa._FixSSAVars object at 0x000002410CC11BB0>
DEBUG 2022-01-28 15:49:19,887 on stmt: delta.2 = kept_edges
DEBUG 2022-01-28 15:49:19,887 on stmt: jump 631
DEBUG 2022-01-28 15:49:19,887 ==== SSA block rewrite pass on 670
DEBUG 2022-01-28 15:49:19,887 Running <numba.core.ssa._FixSSAVars object at 0x000002410CC11BB0>
DEBUG 2022-01-28 15:49:19,887 on stmt: N = N__fixed + $N_det.252
DEBUG 2022-01-28 15:49:19,887 on stmt: $396binary_floor_divide.9 = N // $const394.8
DEBUG 2022-01-28 15:49:19,887 on stmt: $400binary_subtract.11 = $396binary_floor_divide.9 - val.10
DEBUG 2022-01-28 15:49:19,887 on stmt: plus_minus = $const390.6 ** $400binary_subtract.11
DEBUG 2022-01-28 15:49:19,887 on stmt: $412binary_floor_divide.16 = $N_det.252 // $const410.15
DEBUG 2022-01-28 15:49:19,887 on stmt: $418binary_subscr.19 = static_getitem(value=kept_edges, index=0, index_var=$const416.18, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:19,887 on stmt: $420build_tuple.20 = build_tuple(items=[Var($412binary_floor_divide.16, loop_hafnian_batch.py:68), Var($418binary_subscr.19, loop_hafnian_batch.py:68)])
DEBUG 2022-01-28 15:49:19,887 on stmt: $422binary_subscr.21 = getitem(value=binoms, index=$420build_tuple.20, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:19,887 on stmt: n_det_binom_prod = $422binary_subscr.21 * binom_prod.2
DEBUG 2022-01-28 15:49:19,887 on stmt: $434binary_modulo.26 = $N_det.252 % $const432.25
DEBUG 2022-01-28 15:49:19,887 on stmt: $438compare_op.28 = $434binary_modulo.26 == $const436.27
DEBUG 2022-01-28 15:49:19,887 on stmt: $440pred = call bool440($438compare_op.28, func=bool440, args=(Var($438compare_op.28, loop_hafnian_batch.py:70),), kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:19,887 on stmt: branch $440pred, 686, 725
DEBUG 2022-01-28 15:49:19,887 ==== SSA block rewrite pass on 631
DEBUG 2022-01-28 15:49:19,887 Running <numba.core.ssa._FixSSAVars object at 0x000002410CC11BB0>
DEBUG 2022-01-28 15:49:19,887 on stmt: $292call_function.6 = call $282load_global.1(delta.2, A, D, oddV, func=$282load_global.1, args=[Var(delta.2, loop_hafnian_batch.py:55), Var(A, loop_hafnian_batch.py:24), Var(D, loop_hafnian_batch.py:24), Var(oddV, loop_hafnian_batch.py:25)], kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:19,887 find_def var='delta.2' stmt=$292call_function.6 = call $282load_global.1(delta.2, A, D, oddV, func=$282load_global.1, args=[Var(delta.2, loop_hafnian_batch.py:55), Var(A, loop_hafnian_batch.py:24), Var(D, loop_hafnian_batch.py:24), Var(oddV, loop_hafnian_batch.py:25)], kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:19,887 find_def_from_top label 631
DEBUG 2022-01-28 15:49:19,887 insert phi node delta.2.2 = phi(incoming_values=[], incoming_blocks=[]) at 631
DEBUG 2022-01-28 15:49:19,887 find_def_from_bottom label 593
DEBUG 2022-01-28 15:49:19,887 incoming_def delta.2 = kept_edges
DEBUG 2022-01-28 15:49:19,887 find_def_from_bottom label 591
DEBUG 2022-01-28 15:49:19,887 incoming_def delta.2.1 = delta
DEBUG 2022-01-28 15:49:19,887 replaced with: $292call_function.6 = call $282load_global.1(delta.2.2, A, D, oddV, func=$282load_global.1, args=[Var(delta.2.2, loop_hafnian_batch.py:55), Var(A, loop_hafnian_batch.py:24), Var(D, loop_hafnian_batch.py:24), Var(oddV, loop_hafnian_batch.py:25)], kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:19,887 on stmt: $294unpack_sequence.11 = exhaust_iter(value=$292call_function.6, count=4)
DEBUG 2022-01-28 15:49:19,887 on stmt: $AX_S.250 = static_getitem(value=$294unpack_sequence.11, index=0, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:19,887 on stmt: $XD_S.249 = static_getitem(value=$294unpack_sequence.11, index=1, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:19,887 on stmt: $D_S.251 = static_getitem(value=$294unpack_sequence.11, index=2, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:19,887 on stmt: $oddVX_S.248 = static_getitem(value=$294unpack_sequence.11, index=3, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:19,887 on stmt: E = call $304load_global.12($AX_S.250, func=$304load_global.12, args=[Var($AX_S.250, loop_hafnian_batch.py:55)], kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:19,887 on stmt: f_even = call $312load_global.15(E, $AX_S.250, $XD_S.249, $D_S.251, N__max, func=$312load_global.15, args=[Var(E, loop_hafnian_batch.py:57), Var($AX_S.250, loop_hafnian_batch.py:55), Var($XD_S.249, loop_hafnian_batch.py:55), Var($D_S.251, loop_hafnian_batch.py:55), Var(N__max, loop_hafnian_batch.py:30)], kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:19,887 on stmt: f_odd = call $328load_global.22(E, $AX_S.250, $XD_S.249, $D_S.251, N__max, oddloop, $oddVX_S.248, func=$328load_global.22, args=[Var(E, loop_hafnian_batch.py:57), Var($AX_S.250, loop_hafnian_batch.py:55), Var($XD_S.249, loop_hafnian_batch.py:55), Var($D_S.251, loop_hafnian_batch.py:55), Var(N__max, loop_hafnian_batch.py:30), Var(oddloop, loop_hafnian_batch.py:24), Var($oddVX_S.248, loop_hafnian_batch.py:55)], kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:19,887 on stmt: $356binary_subscr.35 = static_getitem(value=kept_edges, index=0, index_var=$const354.34, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:19,887 on stmt: $358binary_multiply.36 = $const350.32 * $356binary_subscr.35
DEBUG 2022-01-28 15:49:19,887 on stmt: $374call_function.44 = call $348load_global.31($358binary_multiply.36, $372binary_add.43, func=$348load_global.31, args=[Var($358binary_multiply.36, loop_hafnian_batch.py:64), Var($372binary_add.43, loop_hafnian_batch.py:64)], kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:19,887 on stmt: $376get_iter.45 = getiter(value=$374call_function.44)
DEBUG 2022-01-28 15:49:19,887 on stmt: jump 668
DEBUG 2022-01-28 15:49:19,887 ==== SSA block rewrite pass on 495
DEBUG 2022-01-28 15:49:19,887 Running <numba.core.ssa._FixSSAVars object at 0x000002410CC11BB0>
DEBUG 2022-01-28 15:49:19,887 on stmt: $228for_iter.2 = iternext(value=$226get_iter.29)
DEBUG 2022-01-28 15:49:19,887 on stmt: $i.253 = pair_first(value=$228for_iter.2)
DEBUG 2022-01-28 15:49:19,887 on stmt: $228for_iter.4 = pair_second(value=$228for_iter.2)
DEBUG 2022-01-28 15:49:19,887 on stmt: branch $228for_iter.4, 571, 577
DEBUG 2022-01-28 15:49:19,887 ==== SSA block rewrite pass on 668
DEBUG 2022-01-28 15:49:19,887 Running <numba.core.ssa._FixSSAVars object at 0x000002410CC11BB0>
DEBUG 2022-01-28 15:49:19,887 on stmt: $378for_iter.2 = iternext(value=$376get_iter.45)
DEBUG 2022-01-28 15:49:19,887 on stmt: $N_det.252 = pair_first(value=$378for_iter.2)
DEBUG 2022-01-28 15:49:19,887 on stmt: $378for_iter.4 = pair_second(value=$378for_iter.2)
DEBUG 2022-01-28 15:49:19,887 on stmt: branch $378for_iter.4, 670, 743
DEBUG 2022-01-28 15:49:19,887 ==== SSA block rewrite pass on 571
DEBUG 2022-01-28 15:49:19,887 Running <numba.core.ssa._FixSSAVars object at 0x000002410CC11BB0>
DEBUG 2022-01-28 15:49:19,887 on stmt: $240binary_subscr.7 = getitem(value=edge__reps, index=$i.253, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:19,887 on stmt: $246binary_subscr.10 = getitem(value=kept_edges, index=$i.253, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:19,887 on stmt: $248build_tuple.11 = build_tuple(items=[Var($240binary_subscr.7, loop_hafnian_batch.py:48), Var($246binary_subscr.10, loop_hafnian_batch.py:48)])
DEBUG 2022-01-28 15:49:19,887 on stmt: $250binary_subscr.12 = getitem(value=binoms, index=$248build_tuple.11, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:19,887 on stmt: $binom_prod.2.600 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=binom_prod.2, rhs=$250binary_subscr.12, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-01-28 15:49:19,887 on stmt: binom_prod.2 = $binom_prod.2.600
DEBUG 2022-01-28 15:49:19,887 on stmt: jump 495
DEBUG 2022-01-28 15:49:19,887 ==== SSA block rewrite pass on 727
DEBUG 2022-01-28 15:49:19,887 Running <numba.core.ssa._FixSSAVars object at 0x000002410CC11BB0>
DEBUG 2022-01-28 15:49:19,887 on stmt: jump 668
DEBUG 2022-01-28 15:49:19,887 ==== SSA block rewrite pass on 50
DEBUG 2022-01-28 15:49:19,887 Running <numba.core.ssa._FixSSAVars object at 0x000002410CC11BB0>
DEBUG 2022-01-28 15:49:19,887 on stmt: j = parfor__index_230
DEBUG 2022-01-28 15:49:19,887 on stmt: id=2[LoopNest(index_variable = parfor_index.208, range = (0, $180binary_add.10, 1))]{887: <ir.Block at C:\Users\zl4821\PycharmProjects\GBS\gbs\loop_hafnian_batch.py (41)>}Var(parfor_index.208, loop_hafnian_batch.py:41)
DEBUG 2022-01-28 15:49:19,887 on stmt: kept_edges = call $192load_global.15(j, edge__reps, func=$192load_global.15, args=[Var(j, loop_hafnian_batch.py:39), Var(edge__reps, loop_hafnian_batch.py:32)], kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:19,887 on stmt: kept_edges_shape.167 = getattr(value=kept_edges, attr=shape)
DEBUG 2022-01-28 15:49:19,887 on stmt: kept_edges_size0.168 = static_getitem(value=kept_edges_shape.167, index=0, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:19,887 on stmt: binom_prod.2 = binom_prod
DEBUG 2022-01-28 15:49:19,887 on stmt: id=6[LoopNest(index_variable = parfor_index.226, range = (0, kept_edges_size0.168, 1))]{557: <ir.Block at C:\Users\zl4821\Anaconda3\envs\GBS\lib\site-packages\numba\parfors\parfor.py (256)>}Var(parfor_index.226, parfor.py:256)
DEBUG 2022-01-28 15:49:19,887 on stmt: $224call_function.28 = call $214load_global.23($const216.24, $222binary_floor_divide.27, func=$214load_global.23, args=[Var($const216.24, loop_hafnian_batch.py:47), Var($222binary_floor_divide.27, loop_hafnian_batch.py:47)], kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:19,887 on stmt: $226get_iter.29 = getiter(value=$224call_function.28)
DEBUG 2022-01-28 15:49:19,887 on stmt: jump 495
DEBUG 2022-01-28 15:49:19,887 ==== SSA block rewrite pass on 743
DEBUG 2022-01-28 15:49:19,887 Running <numba.core.ssa._FixSSAVars object at 0x000002410CC11BB0>
DEBUG 2022-01-28 15:49:19,887 on stmt: ret.193 = call assert.192(msg.191, _136binary__add_59, $180binary_add.10, func=assert.192, args=[Var(msg.191, loop_hafnian_batch.py:75), Var(_136binary__add_59, loop_hafnian_batch.py:38), Var($180binary_add.10, loop_hafnian_batch.py:41)], kws={}, vararg=None, target=None)
DEBUG 2022-01-28 15:49:19,887 on stmt: $H_batch.2.602 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=H__batch_2, rhs=Hnew, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-01-28 15:49:19,887 on stmt: H__batch_2 = $H_batch.2.602
DEBUG 2022-01-28 15:49:19,887 on stmt: jump 782
DEBUG 2022-01-28 15:49:19,887 ==== SSA block rewrite pass on 577
DEBUG 2022-01-28 15:49:19,887 Running <numba.core.ssa._FixSSAVars object at 0x000002410CC11BB0>
DEBUG 2022-01-28 15:49:19,887 on stmt: $260pred = call bool260(glynn, func=bool260, args=(Var(glynn, loop_hafnian_batch.py:24),), kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:19,887 on stmt: branch $260pred, 591, 593
DEBUG 2022-01-28 15:49:19,887 ==== SSA block rewrite pass on 591
DEBUG 2022-01-28 15:49:19,887 Running <numba.core.ssa._FixSSAVars object at 0x000002410CC11BB0>
DEBUG 2022-01-28 15:49:19,887 on stmt: ret.172 = call assert.171(msg.170, kept_edges_size0.168, edge__reps__size0_160, func=assert.171, args=[Var(msg.170, loop_hafnian_batch.py:51), Var(kept_edges_size0.168, loop_hafnian_batch.py:43), Var(edge__reps__size0_160, loop_hafnian_batch.py:32)], kws={}, vararg=None, target=None)
DEBUG 2022-01-28 15:49:19,887 on stmt: id=3[LoopNest(index_variable = parfor_index.213, range = (0, edge__reps__size0_160, 1))]{888: <ir.Block at C:\Users\zl4821\PycharmProjects\GBS\gbs\loop_hafnian_batch.py (51)>}Var(parfor_index.213, loop_hafnian_batch.py:51)
DEBUG 2022-01-28 15:49:19,887 on stmt: delta.2.1 = delta
DEBUG 2022-01-28 15:49:19,887 on stmt: jump 631
DEBUG 2022-01-28 15:49:19,887 ==== SSA block rewrite pass on 782
DEBUG 2022-01-28 15:49:19,887 Running <numba.core.ssa._FixSSAVars object at 0x000002410CC11BB0>
DEBUG 2022-01-28 15:49:19,887 on stmt: jump 40
DEBUG 2022-01-28 15:49:19,887 Fix SSA violator on var H__batch_2
DEBUG 2022-01-28 15:49:19,887 ==== SSA block rewrite pass on 0
DEBUG 2022-01-28 15:49:19,887 Running <numba.core.ssa._FreshVarHandler object at 0x000002410CC1E3D0>
DEBUG 2022-01-28 15:49:19,887 on stmt: sched.834 = arg(0, name=sched)
DEBUG 2022-01-28 15:49:19,887 on stmt: _136binary__add_59 = arg(1, name=_136binary__add_59)
DEBUG 2022-01-28 15:49:19,887 on stmt: A = arg(2, name=A)
DEBUG 2022-01-28 15:49:19,887 on stmt: D = arg(3, name=D)
DEBUG 2022-01-28 15:49:19,887 on stmt: N__fixed = arg(4, name=N__fixed)
DEBUG 2022-01-28 15:49:19,887 on stmt: N__max = arg(5, name=N__max)
DEBUG 2022-01-28 15:49:19,887 on stmt: batch__max = arg(6, name=batch__max)
DEBUG 2022-01-28 15:49:19,887 on stmt: binoms = arg(7, name=binoms)
DEBUG 2022-01-28 15:49:19,887 on stmt: edge__reps = arg(8, name=edge__reps)
DEBUG 2022-01-28 15:49:19,887 on stmt: edge__reps__size0_160 = arg(9, name=edge__reps__size0_160)
DEBUG 2022-01-28 15:49:19,887 on stmt: glynn = arg(10, name=glynn)
DEBUG 2022-01-28 15:49:19,887 on stmt: n = arg(11, name=n)
DEBUG 2022-01-28 15:49:19,887 on stmt: oddV = arg(12, name=oddV)
DEBUG 2022-01-28 15:49:19,887 on stmt: odd__cutoff = arg(13, name=odd__cutoff)
DEBUG 2022-01-28 15:49:19,887 on stmt: oddloop = arg(14, name=oddloop)
DEBUG 2022-01-28 15:49:19,887 on stmt: H__batch_2__arr = arg(15, name=H__batch_2__arr)
DEBUG 2022-01-28 15:49:19,887 on stmt: $2load_global.0.835 = global(np: <module 'numpy' from 'C:\\Users\\zl4821\\Anaconda3\\envs\\GBS\\lib\\site-packages\\numpy\\__init__.py'>)
DEBUG 2022-01-28 15:49:19,887 on stmt: $4load_method.1.836 = getattr(value=$2load_global.0.835, attr=copy)
DEBUG 2022-01-28 15:49:19,887 on stmt: H__batch_2 = call $4load_method.1.836(H__batch_2__arr, func=$4load_method.1.836, args=[Var(H__batch_2__arr, <string>:2)], kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:19,887 first assign: H__batch_2
DEBUG 2022-01-28 15:49:19,887 replaced with: H__batch_2 = call $4load_method.1.836(H__batch_2__arr, func=$4load_method.1.836, args=[Var(H__batch_2__arr, <string>:2)], kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:19,887 on stmt: $12load_global.4.837 = global(range: <class 'range'>)
DEBUG 2022-01-28 15:49:19,887 on stmt: $const16.6.838 = const(int, 0)
DEBUG 2022-01-28 15:49:19,887 on stmt: $18binary_subscr.7.839 = getitem(value=sched.834, index=$const16.6.838, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:19,887 on stmt: $const22.9.840 = const(int, 1)
DEBUG 2022-01-28 15:49:19,887 on stmt: $24binary_subscr.10.841 = getitem(value=sched.834, index=$const22.9.840, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:19,887 on stmt: $26load_global.11.842 = global(np: <module 'numpy' from 'C:\\Users\\zl4821\\Anaconda3\\envs\\GBS\\lib\\site-packages\\numpy\\__init__.py'>)
DEBUG 2022-01-28 15:49:19,887 on stmt: $28load_method.12.843 = getattr(value=$26load_global.11.842, attr=uint8)
DEBUG 2022-01-28 15:49:19,887 on stmt: $const30.13.844 = const(int, 1)
DEBUG 2022-01-28 15:49:19,887 on stmt: $32call_method.14.845 = call $28load_method.12.843($const30.13.844, func=$28load_method.12.843, args=[Var($const30.13.844, <string>:3)], kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:19,887 on stmt: $34binary_add.15.846 = $24binary_subscr.10.841 + $32call_method.14.845
DEBUG 2022-01-28 15:49:19,887 on stmt: $36call_function.16.847 = call $12load_global.4.837($18binary_subscr.7.839, $34binary_add.15.846, func=$12load_global.4.837, args=[Var($18binary_subscr.7.839, <string>:3), Var($34binary_add.15.846, <string>:3)], kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:19,887 on stmt: $38get_iter.17.848 = getiter(value=$36call_function.16.847)
DEBUG 2022-01-28 15:49:19,887 on stmt: $phi40.0.849 = $38get_iter.17.848
DEBUG 2022-01-28 15:49:19,887 on stmt: $const462.12 = const(int, 2)
DEBUG 2022-01-28 15:49:19,887 on stmt: $const390.6 = const(float, -1.0)
DEBUG 2022-01-28 15:49:19,887 on stmt: $const394.8 = const(int, 2)
DEBUG 2022-01-28 15:49:19,887 on stmt: $const410.15 = const(int, 2)
DEBUG 2022-01-28 15:49:19,887 on stmt: $const416.18 = const(int, 0)
DEBUG 2022-01-28 15:49:19,887 on stmt: $const432.25 = const(int, 2)
DEBUG 2022-01-28 15:49:19,887 on stmt: $const436.27 = const(int, 0)
DEBUG 2022-01-28 15:49:19,887 on stmt: bool440 = global(bool: <class 'bool'>)
DEBUG 2022-01-28 15:49:19,887 on stmt: $282load_global.1 = global(get_submatrices: CPUDispatcher(<function get_submatrices at 0x0000024107424E50>))
DEBUG 2022-01-28 15:49:19,887 on stmt: $304load_global.12 = global(eigvals: CPUDispatcher(<function eigvals at 0x00000241074303A0>))
DEBUG 2022-01-28 15:49:19,887 on stmt: $312load_global.15 = global(f_loop: CPUDispatcher(<function f_loop at 0x00000241074248B0>))
DEBUG 2022-01-28 15:49:19,887 on stmt: $328load_global.22 = global(f_loop_odd: CPUDispatcher(<function f_loop_odd at 0x0000024107424AF0>))
DEBUG 2022-01-28 15:49:19,903 on stmt: $348load_global.31 = global(range: <class 'range'>)
DEBUG 2022-01-28 15:49:19,903 on stmt: $const350.32 = const(int, 2)
DEBUG 2022-01-28 15:49:19,903 on stmt: $const354.34 = const(int, 0)
DEBUG 2022-01-28 15:49:19,903 on stmt: $const360.37 = const(int, 2)
DEBUG 2022-01-28 15:49:19,903 on stmt: $364binary_multiply.39 = $const360.37 * batch__max
DEBUG 2022-01-28 15:49:19,903 on stmt: $368binary_add.41 = $364binary_multiply.39 + odd__cutoff
DEBUG 2022-01-28 15:49:19,903 on stmt: $const370.42 = const(int, 1)
DEBUG 2022-01-28 15:49:19,903 on stmt: $372binary_add.43 = $368binary_add.41 + $const370.42
DEBUG 2022-01-28 15:49:19,903 on stmt: $const168.4 = const(int, 2)
DEBUG 2022-01-28 15:49:19,903 on stmt: $172binary_multiply.6 = $const168.4 * batch__max
DEBUG 2022-01-28 15:49:19,903 on stmt: $176binary_add.8 = $172binary_multiply.6 + odd__cutoff
DEBUG 2022-01-28 15:49:19,903 on stmt: $const178.9 = const(int, 1)
DEBUG 2022-01-28 15:49:19,903 on stmt: $180binary_add.10 = $176binary_add.8 + $const178.9
DEBUG 2022-01-28 15:49:19,903 on stmt: $192load_global.15 = global(find_kept_edges: CPUDispatcher(<function find_kept_edges at 0x0000024107424550>))
DEBUG 2022-01-28 15:49:19,903 on stmt: $np_g_var.209 = global(np: <module 'numpy' from 'C:\\Users\\zl4821\\Anaconda3\\envs\\GBS\\lib\\site-packages\\numpy\\__init__.py'>)
DEBUG 2022-01-28 15:49:19,903 on stmt: $empty_attr_attr.210 = getattr(value=$np_g_var.209, attr=empty)
DEBUG 2022-01-28 15:49:19,903 on stmt: $np_typ_var.211 = getattr(value=$np_g_var.209, attr=complex128)
DEBUG 2022-01-28 15:49:19,903 on stmt: Hnew = call $empty_attr_attr.210($180binary_add.10, $np_typ_var.211, func=$empty_attr_attr.210, args=[Var($180binary_add.10, loop_hafnian_batch.py:41), Var($np_typ_var.211, loop_hafnian_batch.py:41)], kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:19,903 on stmt: binom_prod = const(float, 1.0)
DEBUG 2022-01-28 15:49:19,903 on stmt: $214load_global.23 = global(range: <class 'range'>)
DEBUG 2022-01-28 15:49:19,903 on stmt: $const216.24 = const(int, 1)
DEBUG 2022-01-28 15:49:19,903 on stmt: $const220.26 = const(int, 2)
DEBUG 2022-01-28 15:49:19,903 on stmt: $222binary_floor_divide.27 = n // $const220.26
DEBUG 2022-01-28 15:49:19,903 on stmt: msg.191 = const(str, Sizes of H_batch.2, Hnew do not match on C:\Users\zl4821\PycharmProjects\GBS\gbs\loop_hafnian_batch.py (75))
DEBUG 2022-01-28 15:49:19,903 on stmt: assert.192 = global(assert_equiv: <intrinsic assert_equiv>)
DEBUG 2022-01-28 15:49:19,903 on stmt: bool260 = global(bool: <class 'bool'>)
DEBUG 2022-01-28 15:49:19,903 on stmt: msg.170 = const(str, Sizes of kept_edges, edge_reps do not match on C:\Users\zl4821\PycharmProjects\GBS\gbs\loop_hafnian_batch.py (51))
DEBUG 2022-01-28 15:49:19,903 on stmt: assert.171 = global(assert_equiv: <intrinsic assert_equiv>)
DEBUG 2022-01-28 15:49:19,903 on stmt: $np_g_var.214 = global(np: <module 'numpy' from 'C:\\Users\\zl4821\\Anaconda3\\envs\\GBS\\lib\\site-packages\\numpy\\__init__.py'>)
DEBUG 2022-01-28 15:49:19,903 on stmt: $empty_attr_attr.215 = getattr(value=$np_g_var.214, attr=empty)
DEBUG 2022-01-28 15:49:19,903 on stmt: $np_typ_var.216 = getattr(value=$np_g_var.214, attr=int64)
DEBUG 2022-01-28 15:49:19,903 on stmt: delta = call $empty_attr_attr.215(edge__reps__size0_160, $np_typ_var.216, func=$empty_attr_attr.215, args=[Var(edge__reps__size0_160, loop_hafnian_batch.py:32), Var($np_typ_var.216, loop_hafnian_batch.py:51)], kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:19,903 on stmt: jump 40
DEBUG 2022-01-28 15:49:19,903 ==== SSA block rewrite pass on 40
DEBUG 2022-01-28 15:49:19,903 Running <numba.core.ssa._FreshVarHandler object at 0x000002410CC1E3D0>
DEBUG 2022-01-28 15:49:19,903 on stmt: $40for_iter.1.850 = iternext(value=$phi40.0.849)
DEBUG 2022-01-28 15:49:19,903 on stmt: $40for_iter.2.851 = pair_first(value=$40for_iter.1.850)
DEBUG 2022-01-28 15:49:19,903 on stmt: $40for_iter.3.852 = pair_second(value=$40for_iter.1.850)
DEBUG 2022-01-28 15:49:19,903 on stmt: $phi42.1.853 = $40for_iter.2.851
DEBUG 2022-01-28 15:49:19,903 on stmt: branch $40for_iter.3.852, 42, 889
DEBUG 2022-01-28 15:49:19,903 ==== SSA block rewrite pass on 42
DEBUG 2022-01-28 15:49:19,903 Running <numba.core.ssa._FreshVarHandler object at 0x000002410CC1E3D0>
DEBUG 2022-01-28 15:49:19,903 on stmt: parfor__index_230 = $phi42.1.853
DEBUG 2022-01-28 15:49:19,903 on stmt: jump 50
DEBUG 2022-01-28 15:49:19,903 ==== SSA block rewrite pass on 889
DEBUG 2022-01-28 15:49:19,903 Running <numba.core.ssa._FreshVarHandler object at 0x000002410CC1E3D0>
DEBUG 2022-01-28 15:49:19,903 on stmt: $const52.1.854 = const(NoneType, None)
DEBUG 2022-01-28 15:49:19,903 on stmt: $const54.2.855 = const(NoneType, None)
DEBUG 2022-01-28 15:49:19,903 on stmt: $56build_slice.3.856 = global(slice: <class 'slice'>)
DEBUG 2022-01-28 15:49:19,903 on stmt: $56build_slice.4.857 = call $56build_slice.3.856($const52.1.854, $const54.2.855, func=$56build_slice.3.856, args=(Var($const52.1.854, <string>:5), Var($const54.2.855, <string>:5)), kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:19,903 on stmt: $58binary_subscr.5.858 = getitem(value=H__batch_2, index=$56build_slice.4.857, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:19,903 on stmt: $const62.7.859 = const(NoneType, None)
DEBUG 2022-01-28 15:49:19,903 on stmt: $const64.8.860 = const(NoneType, None)
DEBUG 2022-01-28 15:49:19,903 on stmt: $66build_slice.9.861 = global(slice: <class 'slice'>)
DEBUG 2022-01-28 15:49:19,903 on stmt: $66build_slice.10.862 = call $66build_slice.9.861($const62.7.859, $const64.8.860, func=$66build_slice.9.861, args=(Var($const62.7.859, <string>:5), Var($const64.8.860, <string>:5)), kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:19,903 on stmt: H__batch_2__arr[$66build_slice.10.862] = $58binary_subscr.5.858
DEBUG 2022-01-28 15:49:19,903 on stmt: $const70.11.863 = const(NoneType, None)
DEBUG 2022-01-28 15:49:19,903 on stmt: $72return_value.12.864 = cast(value=$const70.11.863)
DEBUG 2022-01-28 15:49:19,903 on stmt: return $72return_value.12.864
DEBUG 2022-01-28 15:49:19,903 ==== SSA block rewrite pass on 686
DEBUG 2022-01-28 15:49:19,903 Running <numba.core.ssa._FreshVarHandler object at 0x000002410CC1E3D0>
DEBUG 2022-01-28 15:49:19,903 on stmt: $450binary_subscr.6 = getitem(value=Hnew, index=$N_det.252, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:19,903 on stmt: $456binary_multiply.9 = n_det_binom_prod * plus_minus
DEBUG 2022-01-28 15:49:19,903 on stmt: $464binary_floor_divide.13 = N // $const462.12
DEBUG 2022-01-28 15:49:19,903 on stmt: $466binary_subscr.14 = getitem(value=f_even, index=$464binary_floor_divide.13, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:19,903 on stmt: $468binary_multiply.15 = $456binary_multiply.9 * $466binary_subscr.14
DEBUG 2022-01-28 15:49:19,903 on stmt: $470inplace_add.16 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$450binary_subscr.6, rhs=$468binary_multiply.15, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-01-28 15:49:19,903 on stmt: Hnew[$N_det.252] = $470inplace_add.16
DEBUG 2022-01-28 15:49:19,903 on stmt: jump 727
DEBUG 2022-01-28 15:49:19,903 ==== SSA block rewrite pass on 725
DEBUG 2022-01-28 15:49:19,903 Running <numba.core.ssa._FreshVarHandler object at 0x000002410CC1E3D0>
DEBUG 2022-01-28 15:49:19,903 on stmt: $484binary_subscr.6 = getitem(value=Hnew, index=$N_det.252, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:19,903 on stmt: $490binary_multiply.9 = n_det_binom_prod * plus_minus
DEBUG 2022-01-28 15:49:19,903 on stmt: $496binary_subscr.12 = getitem(value=f_odd, index=N, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:19,903 on stmt: $498binary_multiply.13 = $490binary_multiply.9 * $496binary_subscr.12
DEBUG 2022-01-28 15:49:19,903 on stmt: $500inplace_add.14 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$484binary_subscr.6, rhs=$498binary_multiply.13, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-01-28 15:49:19,903 on stmt: Hnew[$N_det.252] = $500inplace_add.14
DEBUG 2022-01-28 15:49:19,903 on stmt: jump 727
DEBUG 2022-01-28 15:49:19,903 ==== SSA block rewrite pass on 593
DEBUG 2022-01-28 15:49:19,903 Running <numba.core.ssa._FreshVarHandler object at 0x000002410CC1E3D0>
DEBUG 2022-01-28 15:49:19,903 on stmt: delta.2 = kept_edges
DEBUG 2022-01-28 15:49:19,903 on stmt: jump 631
DEBUG 2022-01-28 15:49:19,903 ==== SSA block rewrite pass on 670
DEBUG 2022-01-28 15:49:19,903 Running <numba.core.ssa._FreshVarHandler object at 0x000002410CC1E3D0>
DEBUG 2022-01-28 15:49:19,903 on stmt: N = N__fixed + $N_det.252
DEBUG 2022-01-28 15:49:19,903 on stmt: $396binary_floor_divide.9 = N // $const394.8
DEBUG 2022-01-28 15:49:19,903 on stmt: $400binary_subtract.11 = $396binary_floor_divide.9 - val.10
DEBUG 2022-01-28 15:49:19,903 on stmt: plus_minus = $const390.6 ** $400binary_subtract.11
DEBUG 2022-01-28 15:49:19,903 on stmt: $412binary_floor_divide.16 = $N_det.252 // $const410.15
DEBUG 2022-01-28 15:49:19,903 on stmt: $418binary_subscr.19 = static_getitem(value=kept_edges, index=0, index_var=$const416.18, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:19,903 on stmt: $420build_tuple.20 = build_tuple(items=[Var($412binary_floor_divide.16, loop_hafnian_batch.py:68), Var($418binary_subscr.19, loop_hafnian_batch.py:68)])
DEBUG 2022-01-28 15:49:19,903 on stmt: $422binary_subscr.21 = getitem(value=binoms, index=$420build_tuple.20, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:19,903 on stmt: n_det_binom_prod = $422binary_subscr.21 * binom_prod.2
DEBUG 2022-01-28 15:49:19,903 on stmt: $434binary_modulo.26 = $N_det.252 % $const432.25
DEBUG 2022-01-28 15:49:19,903 on stmt: $438compare_op.28 = $434binary_modulo.26 == $const436.27
DEBUG 2022-01-28 15:49:19,903 on stmt: $440pred = call bool440($438compare_op.28, func=bool440, args=(Var($438compare_op.28, loop_hafnian_batch.py:70),), kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:19,903 on stmt: branch $440pred, 686, 725
DEBUG 2022-01-28 15:49:19,903 ==== SSA block rewrite pass on 631
DEBUG 2022-01-28 15:49:19,903 Running <numba.core.ssa._FreshVarHandler object at 0x000002410CC1E3D0>
DEBUG 2022-01-28 15:49:19,903 on stmt: delta.2.2 = phi(incoming_values=[Var(delta.2, loop_hafnian_batch.py:55), Var(delta.2.1, loop_hafnian_batch.py:51)], incoming_blocks=[593, 591])
DEBUG 2022-01-28 15:49:19,903 on stmt: $292call_function.6 = call $282load_global.1(delta.2.2, A, D, oddV, func=$282load_global.1, args=[Var(delta.2.2, loop_hafnian_batch.py:55), Var(A, loop_hafnian_batch.py:24), Var(D, loop_hafnian_batch.py:24), Var(oddV, loop_hafnian_batch.py:25)], kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:19,903 on stmt: $294unpack_sequence.11 = exhaust_iter(value=$292call_function.6, count=4)
DEBUG 2022-01-28 15:49:19,903 on stmt: $AX_S.250 = static_getitem(value=$294unpack_sequence.11, index=0, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:19,903 on stmt: $XD_S.249 = static_getitem(value=$294unpack_sequence.11, index=1, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:19,903 on stmt: $D_S.251 = static_getitem(value=$294unpack_sequence.11, index=2, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:19,903 on stmt: $oddVX_S.248 = static_getitem(value=$294unpack_sequence.11, index=3, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:19,903 on stmt: E = call $304load_global.12($AX_S.250, func=$304load_global.12, args=[Var($AX_S.250, loop_hafnian_batch.py:55)], kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:19,903 on stmt: f_even = call $312load_global.15(E, $AX_S.250, $XD_S.249, $D_S.251, N__max, func=$312load_global.15, args=[Var(E, loop_hafnian_batch.py:57), Var($AX_S.250, loop_hafnian_batch.py:55), Var($XD_S.249, loop_hafnian_batch.py:55), Var($D_S.251, loop_hafnian_batch.py:55), Var(N__max, loop_hafnian_batch.py:30)], kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:19,903 on stmt: f_odd = call $328load_global.22(E, $AX_S.250, $XD_S.249, $D_S.251, N__max, oddloop, $oddVX_S.248, func=$328load_global.22, args=[Var(E, loop_hafnian_batch.py:57), Var($AX_S.250, loop_hafnian_batch.py:55), Var($XD_S.249, loop_hafnian_batch.py:55), Var($D_S.251, loop_hafnian_batch.py:55), Var(N__max, loop_hafnian_batch.py:30), Var(oddloop, loop_hafnian_batch.py:24), Var($oddVX_S.248, loop_hafnian_batch.py:55)], kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:19,903 on stmt: $356binary_subscr.35 = static_getitem(value=kept_edges, index=0, index_var=$const354.34, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:19,903 on stmt: $358binary_multiply.36 = $const350.32 * $356binary_subscr.35
DEBUG 2022-01-28 15:49:19,903 on stmt: $374call_function.44 = call $348load_global.31($358binary_multiply.36, $372binary_add.43, func=$348load_global.31, args=[Var($358binary_multiply.36, loop_hafnian_batch.py:64), Var($372binary_add.43, loop_hafnian_batch.py:64)], kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:19,903 on stmt: $376get_iter.45 = getiter(value=$374call_function.44)
DEBUG 2022-01-28 15:49:19,903 on stmt: jump 668
DEBUG 2022-01-28 15:49:19,903 ==== SSA block rewrite pass on 495
DEBUG 2022-01-28 15:49:19,903 Running <numba.core.ssa._FreshVarHandler object at 0x000002410CC1E3D0>
DEBUG 2022-01-28 15:49:19,903 on stmt: $228for_iter.2 = iternext(value=$226get_iter.29)
DEBUG 2022-01-28 15:49:19,903 on stmt: $i.253 = pair_first(value=$228for_iter.2)
DEBUG 2022-01-28 15:49:19,903 on stmt: $228for_iter.4 = pair_second(value=$228for_iter.2)
DEBUG 2022-01-28 15:49:19,903 on stmt: branch $228for_iter.4, 571, 577
DEBUG 2022-01-28 15:49:19,903 ==== SSA block rewrite pass on 668
DEBUG 2022-01-28 15:49:19,903 Running <numba.core.ssa._FreshVarHandler object at 0x000002410CC1E3D0>
DEBUG 2022-01-28 15:49:19,903 on stmt: $378for_iter.2 = iternext(value=$376get_iter.45)
DEBUG 2022-01-28 15:49:19,903 on stmt: $N_det.252 = pair_first(value=$378for_iter.2)
DEBUG 2022-01-28 15:49:19,903 on stmt: $378for_iter.4 = pair_second(value=$378for_iter.2)
DEBUG 2022-01-28 15:49:19,903 on stmt: branch $378for_iter.4, 670, 743
DEBUG 2022-01-28 15:49:19,903 ==== SSA block rewrite pass on 571
DEBUG 2022-01-28 15:49:19,903 Running <numba.core.ssa._FreshVarHandler object at 0x000002410CC1E3D0>
DEBUG 2022-01-28 15:49:19,903 on stmt: $240binary_subscr.7 = getitem(value=edge__reps, index=$i.253, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:19,903 on stmt: $246binary_subscr.10 = getitem(value=kept_edges, index=$i.253, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:19,903 on stmt: $248build_tuple.11 = build_tuple(items=[Var($240binary_subscr.7, loop_hafnian_batch.py:48), Var($246binary_subscr.10, loop_hafnian_batch.py:48)])
DEBUG 2022-01-28 15:49:19,903 on stmt: $250binary_subscr.12 = getitem(value=binoms, index=$248build_tuple.11, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:19,903 on stmt: $binom_prod.2.600 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=binom_prod.2, rhs=$250binary_subscr.12, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-01-28 15:49:19,903 on stmt: binom_prod.2 = $binom_prod.2.600
DEBUG 2022-01-28 15:49:19,903 on stmt: jump 495
DEBUG 2022-01-28 15:49:19,903 ==== SSA block rewrite pass on 727
DEBUG 2022-01-28 15:49:19,903 Running <numba.core.ssa._FreshVarHandler object at 0x000002410CC1E3D0>
DEBUG 2022-01-28 15:49:19,903 on stmt: jump 668
DEBUG 2022-01-28 15:49:19,903 ==== SSA block rewrite pass on 50
DEBUG 2022-01-28 15:49:19,903 Running <numba.core.ssa._FreshVarHandler object at 0x000002410CC1E3D0>
DEBUG 2022-01-28 15:49:19,903 on stmt: j = parfor__index_230
DEBUG 2022-01-28 15:49:19,903 on stmt: id=2[LoopNest(index_variable = parfor_index.208, range = (0, $180binary_add.10, 1))]{887: <ir.Block at C:\Users\zl4821\PycharmProjects\GBS\gbs\loop_hafnian_batch.py (41)>}Var(parfor_index.208, loop_hafnian_batch.py:41)
DEBUG 2022-01-28 15:49:19,903 on stmt: kept_edges = call $192load_global.15(j, edge__reps, func=$192load_global.15, args=[Var(j, loop_hafnian_batch.py:39), Var(edge__reps, loop_hafnian_batch.py:32)], kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:19,903 on stmt: kept_edges_shape.167 = getattr(value=kept_edges, attr=shape)
DEBUG 2022-01-28 15:49:19,903 on stmt: kept_edges_size0.168 = static_getitem(value=kept_edges_shape.167, index=0, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:19,903 on stmt: binom_prod.2 = binom_prod
DEBUG 2022-01-28 15:49:19,903 on stmt: id=6[LoopNest(index_variable = parfor_index.226, range = (0, kept_edges_size0.168, 1))]{557: <ir.Block at C:\Users\zl4821\Anaconda3\envs\GBS\lib\site-packages\numba\parfors\parfor.py (256)>}Var(parfor_index.226, parfor.py:256)
DEBUG 2022-01-28 15:49:19,903 on stmt: $224call_function.28 = call $214load_global.23($const216.24, $222binary_floor_divide.27, func=$214load_global.23, args=[Var($const216.24, loop_hafnian_batch.py:47), Var($222binary_floor_divide.27, loop_hafnian_batch.py:47)], kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:19,903 on stmt: $226get_iter.29 = getiter(value=$224call_function.28)
DEBUG 2022-01-28 15:49:19,903 on stmt: jump 495
DEBUG 2022-01-28 15:49:19,903 ==== SSA block rewrite pass on 743
DEBUG 2022-01-28 15:49:19,903 Running <numba.core.ssa._FreshVarHandler object at 0x000002410CC1E3D0>
DEBUG 2022-01-28 15:49:19,903 on stmt: ret.193 = call assert.192(msg.191, _136binary__add_59, $180binary_add.10, func=assert.192, args=[Var(msg.191, loop_hafnian_batch.py:75), Var(_136binary__add_59, loop_hafnian_batch.py:38), Var($180binary_add.10, loop_hafnian_batch.py:41)], kws={}, vararg=None, target=None)
DEBUG 2022-01-28 15:49:19,903 on stmt: $H_batch.2.602 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=H__batch_2, rhs=Hnew, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-01-28 15:49:19,903 on stmt: H__batch_2 = $H_batch.2.602
DEBUG 2022-01-28 15:49:19,903 replaced with: H__batch_2.1 = $H_batch.2.602
DEBUG 2022-01-28 15:49:19,903 on stmt: jump 782
DEBUG 2022-01-28 15:49:19,903 ==== SSA block rewrite pass on 577
DEBUG 2022-01-28 15:49:19,903 Running <numba.core.ssa._FreshVarHandler object at 0x000002410CC1E3D0>
DEBUG 2022-01-28 15:49:19,903 on stmt: $260pred = call bool260(glynn, func=bool260, args=(Var(glynn, loop_hafnian_batch.py:24),), kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:19,903 on stmt: branch $260pred, 591, 593
DEBUG 2022-01-28 15:49:19,903 ==== SSA block rewrite pass on 591
DEBUG 2022-01-28 15:49:19,903 Running <numba.core.ssa._FreshVarHandler object at 0x000002410CC1E3D0>
DEBUG 2022-01-28 15:49:19,903 on stmt: ret.172 = call assert.171(msg.170, kept_edges_size0.168, edge__reps__size0_160, func=assert.171, args=[Var(msg.170, loop_hafnian_batch.py:51), Var(kept_edges_size0.168, loop_hafnian_batch.py:43), Var(edge__reps__size0_160, loop_hafnian_batch.py:32)], kws={}, vararg=None, target=None)
DEBUG 2022-01-28 15:49:19,903 on stmt: id=3[LoopNest(index_variable = parfor_index.213, range = (0, edge__reps__size0_160, 1))]{888: <ir.Block at C:\Users\zl4821\PycharmProjects\GBS\gbs\loop_hafnian_batch.py (51)>}Var(parfor_index.213, loop_hafnian_batch.py:51)
DEBUG 2022-01-28 15:49:19,918 on stmt: delta.2.1 = delta
DEBUG 2022-01-28 15:49:19,918 on stmt: jump 631
DEBUG 2022-01-28 15:49:19,918 ==== SSA block rewrite pass on 782
DEBUG 2022-01-28 15:49:19,918 Running <numba.core.ssa._FreshVarHandler object at 0x000002410CC1E3D0>
DEBUG 2022-01-28 15:49:19,918 on stmt: jump 40
DEBUG 2022-01-28 15:49:19,918 Replaced assignments: defaultdict(<class 'list'>,
            {0: [<numba.core.ir.Assign object at 0x000002410CC29070>],
             743: [<numba.core.ir.Assign object at 0x000002410CC72EE0>]})
DEBUG 2022-01-28 15:49:19,918 ==== SSA block rewrite pass on 0
DEBUG 2022-01-28 15:49:19,918 Running <numba.core.ssa._FixSSAVars object at 0x000002410CC72730>
DEBUG 2022-01-28 15:49:19,918 on stmt: sched.834 = arg(0, name=sched)
DEBUG 2022-01-28 15:49:19,918 on stmt: _136binary__add_59 = arg(1, name=_136binary__add_59)
DEBUG 2022-01-28 15:49:19,918 on stmt: A = arg(2, name=A)
DEBUG 2022-01-28 15:49:19,918 on stmt: D = arg(3, name=D)
DEBUG 2022-01-28 15:49:19,918 on stmt: N__fixed = arg(4, name=N__fixed)
DEBUG 2022-01-28 15:49:19,918 on stmt: N__max = arg(5, name=N__max)
DEBUG 2022-01-28 15:49:19,918 on stmt: batch__max = arg(6, name=batch__max)
DEBUG 2022-01-28 15:49:19,918 on stmt: binoms = arg(7, name=binoms)
DEBUG 2022-01-28 15:49:19,918 on stmt: edge__reps = arg(8, name=edge__reps)
DEBUG 2022-01-28 15:49:19,918 on stmt: edge__reps__size0_160 = arg(9, name=edge__reps__size0_160)
DEBUG 2022-01-28 15:49:19,918 on stmt: glynn = arg(10, name=glynn)
DEBUG 2022-01-28 15:49:19,918 on stmt: n = arg(11, name=n)
DEBUG 2022-01-28 15:49:19,918 on stmt: oddV = arg(12, name=oddV)
DEBUG 2022-01-28 15:49:19,918 on stmt: odd__cutoff = arg(13, name=odd__cutoff)
DEBUG 2022-01-28 15:49:19,918 on stmt: oddloop = arg(14, name=oddloop)
DEBUG 2022-01-28 15:49:19,918 on stmt: H__batch_2__arr = arg(15, name=H__batch_2__arr)
DEBUG 2022-01-28 15:49:19,918 on stmt: $2load_global.0.835 = global(np: <module 'numpy' from 'C:\\Users\\zl4821\\Anaconda3\\envs\\GBS\\lib\\site-packages\\numpy\\__init__.py'>)
DEBUG 2022-01-28 15:49:19,918 on stmt: $4load_method.1.836 = getattr(value=$2load_global.0.835, attr=copy)
DEBUG 2022-01-28 15:49:19,918 on stmt: H__batch_2 = call $4load_method.1.836(H__batch_2__arr, func=$4load_method.1.836, args=[Var(H__batch_2__arr, <string>:2)], kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:19,918 on stmt: $12load_global.4.837 = global(range: <class 'range'>)
DEBUG 2022-01-28 15:49:19,918 on stmt: $const16.6.838 = const(int, 0)
DEBUG 2022-01-28 15:49:19,918 on stmt: $18binary_subscr.7.839 = getitem(value=sched.834, index=$const16.6.838, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:19,918 on stmt: $const22.9.840 = const(int, 1)
DEBUG 2022-01-28 15:49:19,918 on stmt: $24binary_subscr.10.841 = getitem(value=sched.834, index=$const22.9.840, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:19,918 on stmt: $26load_global.11.842 = global(np: <module 'numpy' from 'C:\\Users\\zl4821\\Anaconda3\\envs\\GBS\\lib\\site-packages\\numpy\\__init__.py'>)
DEBUG 2022-01-28 15:49:19,918 on stmt: $28load_method.12.843 = getattr(value=$26load_global.11.842, attr=uint8)
DEBUG 2022-01-28 15:49:19,918 on stmt: $const30.13.844 = const(int, 1)
DEBUG 2022-01-28 15:49:19,918 on stmt: $32call_method.14.845 = call $28load_method.12.843($const30.13.844, func=$28load_method.12.843, args=[Var($const30.13.844, <string>:3)], kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:19,918 on stmt: $34binary_add.15.846 = $24binary_subscr.10.841 + $32call_method.14.845
DEBUG 2022-01-28 15:49:19,918 on stmt: $36call_function.16.847 = call $12load_global.4.837($18binary_subscr.7.839, $34binary_add.15.846, func=$12load_global.4.837, args=[Var($18binary_subscr.7.839, <string>:3), Var($34binary_add.15.846, <string>:3)], kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:19,918 on stmt: $38get_iter.17.848 = getiter(value=$36call_function.16.847)
DEBUG 2022-01-28 15:49:19,918 on stmt: $phi40.0.849 = $38get_iter.17.848
DEBUG 2022-01-28 15:49:19,918 on stmt: $const462.12 = const(int, 2)
DEBUG 2022-01-28 15:49:19,918 on stmt: $const390.6 = const(float, -1.0)
DEBUG 2022-01-28 15:49:19,918 on stmt: $const394.8 = const(int, 2)
DEBUG 2022-01-28 15:49:19,918 on stmt: $const410.15 = const(int, 2)
DEBUG 2022-01-28 15:49:19,918 on stmt: $const416.18 = const(int, 0)
DEBUG 2022-01-28 15:49:19,918 on stmt: $const432.25 = const(int, 2)
DEBUG 2022-01-28 15:49:19,918 on stmt: $const436.27 = const(int, 0)
DEBUG 2022-01-28 15:49:19,918 on stmt: bool440 = global(bool: <class 'bool'>)
DEBUG 2022-01-28 15:49:19,918 on stmt: $282load_global.1 = global(get_submatrices: CPUDispatcher(<function get_submatrices at 0x0000024107424E50>))
DEBUG 2022-01-28 15:49:19,918 on stmt: $304load_global.12 = global(eigvals: CPUDispatcher(<function eigvals at 0x00000241074303A0>))
DEBUG 2022-01-28 15:49:19,918 on stmt: $312load_global.15 = global(f_loop: CPUDispatcher(<function f_loop at 0x00000241074248B0>))
DEBUG 2022-01-28 15:49:19,918 on stmt: $328load_global.22 = global(f_loop_odd: CPUDispatcher(<function f_loop_odd at 0x0000024107424AF0>))
DEBUG 2022-01-28 15:49:19,918 on stmt: $348load_global.31 = global(range: <class 'range'>)
DEBUG 2022-01-28 15:49:19,918 on stmt: $const350.32 = const(int, 2)
DEBUG 2022-01-28 15:49:19,918 on stmt: $const354.34 = const(int, 0)
DEBUG 2022-01-28 15:49:19,918 on stmt: $const360.37 = const(int, 2)
DEBUG 2022-01-28 15:49:19,918 on stmt: $364binary_multiply.39 = $const360.37 * batch__max
DEBUG 2022-01-28 15:49:19,918 on stmt: $368binary_add.41 = $364binary_multiply.39 + odd__cutoff
DEBUG 2022-01-28 15:49:19,918 on stmt: $const370.42 = const(int, 1)
DEBUG 2022-01-28 15:49:19,918 on stmt: $372binary_add.43 = $368binary_add.41 + $const370.42
DEBUG 2022-01-28 15:49:19,918 on stmt: $const168.4 = const(int, 2)
DEBUG 2022-01-28 15:49:19,918 on stmt: $172binary_multiply.6 = $const168.4 * batch__max
DEBUG 2022-01-28 15:49:19,918 on stmt: $176binary_add.8 = $172binary_multiply.6 + odd__cutoff
DEBUG 2022-01-28 15:49:19,918 on stmt: $const178.9 = const(int, 1)
DEBUG 2022-01-28 15:49:19,918 on stmt: $180binary_add.10 = $176binary_add.8 + $const178.9
DEBUG 2022-01-28 15:49:19,918 on stmt: $192load_global.15 = global(find_kept_edges: CPUDispatcher(<function find_kept_edges at 0x0000024107424550>))
DEBUG 2022-01-28 15:49:19,918 on stmt: $np_g_var.209 = global(np: <module 'numpy' from 'C:\\Users\\zl4821\\Anaconda3\\envs\\GBS\\lib\\site-packages\\numpy\\__init__.py'>)
DEBUG 2022-01-28 15:49:19,918 on stmt: $empty_attr_attr.210 = getattr(value=$np_g_var.209, attr=empty)
DEBUG 2022-01-28 15:49:19,918 on stmt: $np_typ_var.211 = getattr(value=$np_g_var.209, attr=complex128)
DEBUG 2022-01-28 15:49:19,918 on stmt: Hnew = call $empty_attr_attr.210($180binary_add.10, $np_typ_var.211, func=$empty_attr_attr.210, args=[Var($180binary_add.10, loop_hafnian_batch.py:41), Var($np_typ_var.211, loop_hafnian_batch.py:41)], kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:19,918 on stmt: binom_prod = const(float, 1.0)
DEBUG 2022-01-28 15:49:19,918 on stmt: $214load_global.23 = global(range: <class 'range'>)
DEBUG 2022-01-28 15:49:19,918 on stmt: $const216.24 = const(int, 1)
DEBUG 2022-01-28 15:49:19,918 on stmt: $const220.26 = const(int, 2)
DEBUG 2022-01-28 15:49:19,918 on stmt: $222binary_floor_divide.27 = n // $const220.26
DEBUG 2022-01-28 15:49:19,918 on stmt: msg.191 = const(str, Sizes of H_batch.2, Hnew do not match on C:\Users\zl4821\PycharmProjects\GBS\gbs\loop_hafnian_batch.py (75))
DEBUG 2022-01-28 15:49:19,918 on stmt: assert.192 = global(assert_equiv: <intrinsic assert_equiv>)
DEBUG 2022-01-28 15:49:19,918 on stmt: bool260 = global(bool: <class 'bool'>)
DEBUG 2022-01-28 15:49:19,918 on stmt: msg.170 = const(str, Sizes of kept_edges, edge_reps do not match on C:\Users\zl4821\PycharmProjects\GBS\gbs\loop_hafnian_batch.py (51))
DEBUG 2022-01-28 15:49:19,918 on stmt: assert.171 = global(assert_equiv: <intrinsic assert_equiv>)
DEBUG 2022-01-28 15:49:19,918 on stmt: $np_g_var.214 = global(np: <module 'numpy' from 'C:\\Users\\zl4821\\Anaconda3\\envs\\GBS\\lib\\site-packages\\numpy\\__init__.py'>)
DEBUG 2022-01-28 15:49:19,918 on stmt: $empty_attr_attr.215 = getattr(value=$np_g_var.214, attr=empty)
DEBUG 2022-01-28 15:49:19,918 on stmt: $np_typ_var.216 = getattr(value=$np_g_var.214, attr=int64)
DEBUG 2022-01-28 15:49:19,918 on stmt: delta = call $empty_attr_attr.215(edge__reps__size0_160, $np_typ_var.216, func=$empty_attr_attr.215, args=[Var(edge__reps__size0_160, loop_hafnian_batch.py:32), Var($np_typ_var.216, loop_hafnian_batch.py:51)], kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:19,918 on stmt: jump 40
DEBUG 2022-01-28 15:49:19,918 ==== SSA block rewrite pass on 40
DEBUG 2022-01-28 15:49:19,918 Running <numba.core.ssa._FixSSAVars object at 0x000002410CC72730>
DEBUG 2022-01-28 15:49:19,918 on stmt: $40for_iter.1.850 = iternext(value=$phi40.0.849)
DEBUG 2022-01-28 15:49:19,918 on stmt: $40for_iter.2.851 = pair_first(value=$40for_iter.1.850)
DEBUG 2022-01-28 15:49:19,918 on stmt: $40for_iter.3.852 = pair_second(value=$40for_iter.1.850)
DEBUG 2022-01-28 15:49:19,918 on stmt: $phi42.1.853 = $40for_iter.2.851
DEBUG 2022-01-28 15:49:19,918 on stmt: branch $40for_iter.3.852, 42, 889
DEBUG 2022-01-28 15:49:19,918 ==== SSA block rewrite pass on 42
DEBUG 2022-01-28 15:49:19,918 Running <numba.core.ssa._FixSSAVars object at 0x000002410CC72730>
DEBUG 2022-01-28 15:49:19,918 on stmt: parfor__index_230 = $phi42.1.853
DEBUG 2022-01-28 15:49:19,918 on stmt: jump 50
DEBUG 2022-01-28 15:49:19,918 ==== SSA block rewrite pass on 889
DEBUG 2022-01-28 15:49:19,918 Running <numba.core.ssa._FixSSAVars object at 0x000002410CC72730>
DEBUG 2022-01-28 15:49:19,918 on stmt: $const52.1.854 = const(NoneType, None)
DEBUG 2022-01-28 15:49:19,918 on stmt: $const54.2.855 = const(NoneType, None)
DEBUG 2022-01-28 15:49:19,918 on stmt: $56build_slice.3.856 = global(slice: <class 'slice'>)
DEBUG 2022-01-28 15:49:19,918 on stmt: $56build_slice.4.857 = call $56build_slice.3.856($const52.1.854, $const54.2.855, func=$56build_slice.3.856, args=(Var($const52.1.854, <string>:5), Var($const54.2.855, <string>:5)), kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:19,918 on stmt: $58binary_subscr.5.858 = getitem(value=H__batch_2, index=$56build_slice.4.857, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:19,918 find_def var='H__batch_2' stmt=$58binary_subscr.5.858 = getitem(value=H__batch_2, index=$56build_slice.4.857, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:19,918 find_def_from_top label 889
DEBUG 2022-01-28 15:49:19,918 idom 40 from label 889
DEBUG 2022-01-28 15:49:19,918 find_def_from_bottom label 40
DEBUG 2022-01-28 15:49:19,918 find_def_from_top label 40
DEBUG 2022-01-28 15:49:19,918 insert phi node H__batch_2.2 = phi(incoming_values=[], incoming_blocks=[]) at 40
DEBUG 2022-01-28 15:49:19,918 find_def_from_bottom label 0
DEBUG 2022-01-28 15:49:19,918 incoming_def H__batch_2 = call $4load_method.1.836(H__batch_2__arr, func=$4load_method.1.836, args=[Var(H__batch_2__arr, <string>:2)], kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:19,918 find_def_from_bottom label 782
DEBUG 2022-01-28 15:49:19,918 find_def_from_top label 782
DEBUG 2022-01-28 15:49:19,918 idom 743 from label 782
DEBUG 2022-01-28 15:49:19,918 find_def_from_bottom label 743
DEBUG 2022-01-28 15:49:19,918 incoming_def H__batch_2.1 = $H_batch.2.602
DEBUG 2022-01-28 15:49:19,918 replaced with: $58binary_subscr.5.858 = getitem(value=H__batch_2.2, index=$56build_slice.4.857, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:19,918 on stmt: $const62.7.859 = const(NoneType, None)
DEBUG 2022-01-28 15:49:19,918 on stmt: $const64.8.860 = const(NoneType, None)
DEBUG 2022-01-28 15:49:19,918 on stmt: $66build_slice.9.861 = global(slice: <class 'slice'>)
DEBUG 2022-01-28 15:49:19,918 on stmt: $66build_slice.10.862 = call $66build_slice.9.861($const62.7.859, $const64.8.860, func=$66build_slice.9.861, args=(Var($const62.7.859, <string>:5), Var($const64.8.860, <string>:5)), kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:19,918 on stmt: H__batch_2__arr[$66build_slice.10.862] = $58binary_subscr.5.858
DEBUG 2022-01-28 15:49:19,918 on stmt: $const70.11.863 = const(NoneType, None)
DEBUG 2022-01-28 15:49:19,918 on stmt: $72return_value.12.864 = cast(value=$const70.11.863)
DEBUG 2022-01-28 15:49:19,918 on stmt: return $72return_value.12.864
DEBUG 2022-01-28 15:49:19,918 ==== SSA block rewrite pass on 686
DEBUG 2022-01-28 15:49:19,918 Running <numba.core.ssa._FixSSAVars object at 0x000002410CC72730>
DEBUG 2022-01-28 15:49:19,918 on stmt: $450binary_subscr.6 = getitem(value=Hnew, index=$N_det.252, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:19,918 on stmt: $456binary_multiply.9 = n_det_binom_prod * plus_minus
DEBUG 2022-01-28 15:49:19,918 on stmt: $464binary_floor_divide.13 = N // $const462.12
DEBUG 2022-01-28 15:49:19,918 on stmt: $466binary_subscr.14 = getitem(value=f_even, index=$464binary_floor_divide.13, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:19,918 on stmt: $468binary_multiply.15 = $456binary_multiply.9 * $466binary_subscr.14
DEBUG 2022-01-28 15:49:19,918 on stmt: $470inplace_add.16 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$450binary_subscr.6, rhs=$468binary_multiply.15, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-01-28 15:49:19,918 on stmt: Hnew[$N_det.252] = $470inplace_add.16
DEBUG 2022-01-28 15:49:19,918 on stmt: jump 727
DEBUG 2022-01-28 15:49:19,918 ==== SSA block rewrite pass on 725
DEBUG 2022-01-28 15:49:19,918 Running <numba.core.ssa._FixSSAVars object at 0x000002410CC72730>
DEBUG 2022-01-28 15:49:19,918 on stmt: $484binary_subscr.6 = getitem(value=Hnew, index=$N_det.252, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:19,918 on stmt: $490binary_multiply.9 = n_det_binom_prod * plus_minus
DEBUG 2022-01-28 15:49:19,918 on stmt: $496binary_subscr.12 = getitem(value=f_odd, index=N, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:19,918 on stmt: $498binary_multiply.13 = $490binary_multiply.9 * $496binary_subscr.12
DEBUG 2022-01-28 15:49:19,918 on stmt: $500inplace_add.14 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$484binary_subscr.6, rhs=$498binary_multiply.13, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-01-28 15:49:19,918 on stmt: Hnew[$N_det.252] = $500inplace_add.14
DEBUG 2022-01-28 15:49:19,918 on stmt: jump 727
DEBUG 2022-01-28 15:49:19,918 ==== SSA block rewrite pass on 593
DEBUG 2022-01-28 15:49:19,918 Running <numba.core.ssa._FixSSAVars object at 0x000002410CC72730>
DEBUG 2022-01-28 15:49:19,918 on stmt: delta.2 = kept_edges
DEBUG 2022-01-28 15:49:19,934 on stmt: jump 631
DEBUG 2022-01-28 15:49:19,934 ==== SSA block rewrite pass on 670
DEBUG 2022-01-28 15:49:19,934 Running <numba.core.ssa._FixSSAVars object at 0x000002410CC72730>
DEBUG 2022-01-28 15:49:19,934 on stmt: N = N__fixed + $N_det.252
DEBUG 2022-01-28 15:49:19,934 on stmt: $396binary_floor_divide.9 = N // $const394.8
DEBUG 2022-01-28 15:49:19,934 on stmt: $400binary_subtract.11 = $396binary_floor_divide.9 - val.10
DEBUG 2022-01-28 15:49:19,934 on stmt: plus_minus = $const390.6 ** $400binary_subtract.11
DEBUG 2022-01-28 15:49:19,934 on stmt: $412binary_floor_divide.16 = $N_det.252 // $const410.15
DEBUG 2022-01-28 15:49:19,934 on stmt: $418binary_subscr.19 = static_getitem(value=kept_edges, index=0, index_var=$const416.18, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:19,934 on stmt: $420build_tuple.20 = build_tuple(items=[Var($412binary_floor_divide.16, loop_hafnian_batch.py:68), Var($418binary_subscr.19, loop_hafnian_batch.py:68)])
DEBUG 2022-01-28 15:49:19,934 on stmt: $422binary_subscr.21 = getitem(value=binoms, index=$420build_tuple.20, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:19,934 on stmt: n_det_binom_prod = $422binary_subscr.21 * binom_prod.2
DEBUG 2022-01-28 15:49:19,934 on stmt: $434binary_modulo.26 = $N_det.252 % $const432.25
DEBUG 2022-01-28 15:49:19,934 on stmt: $438compare_op.28 = $434binary_modulo.26 == $const436.27
DEBUG 2022-01-28 15:49:19,934 on stmt: $440pred = call bool440($438compare_op.28, func=bool440, args=(Var($438compare_op.28, loop_hafnian_batch.py:70),), kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:19,934 on stmt: branch $440pred, 686, 725
DEBUG 2022-01-28 15:49:19,934 ==== SSA block rewrite pass on 631
DEBUG 2022-01-28 15:49:19,934 Running <numba.core.ssa._FixSSAVars object at 0x000002410CC72730>
DEBUG 2022-01-28 15:49:19,934 on stmt: delta.2.2 = phi(incoming_values=[Var(delta.2, loop_hafnian_batch.py:55), Var(delta.2.1, loop_hafnian_batch.py:51)], incoming_blocks=[593, 591])
DEBUG 2022-01-28 15:49:19,934 on stmt: $292call_function.6 = call $282load_global.1(delta.2.2, A, D, oddV, func=$282load_global.1, args=[Var(delta.2.2, loop_hafnian_batch.py:55), Var(A, loop_hafnian_batch.py:24), Var(D, loop_hafnian_batch.py:24), Var(oddV, loop_hafnian_batch.py:25)], kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:19,934 on stmt: $294unpack_sequence.11 = exhaust_iter(value=$292call_function.6, count=4)
DEBUG 2022-01-28 15:49:19,934 on stmt: $AX_S.250 = static_getitem(value=$294unpack_sequence.11, index=0, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:19,934 on stmt: $XD_S.249 = static_getitem(value=$294unpack_sequence.11, index=1, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:19,934 on stmt: $D_S.251 = static_getitem(value=$294unpack_sequence.11, index=2, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:19,934 on stmt: $oddVX_S.248 = static_getitem(value=$294unpack_sequence.11, index=3, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:19,934 on stmt: E = call $304load_global.12($AX_S.250, func=$304load_global.12, args=[Var($AX_S.250, loop_hafnian_batch.py:55)], kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:19,934 on stmt: f_even = call $312load_global.15(E, $AX_S.250, $XD_S.249, $D_S.251, N__max, func=$312load_global.15, args=[Var(E, loop_hafnian_batch.py:57), Var($AX_S.250, loop_hafnian_batch.py:55), Var($XD_S.249, loop_hafnian_batch.py:55), Var($D_S.251, loop_hafnian_batch.py:55), Var(N__max, loop_hafnian_batch.py:30)], kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:19,934 on stmt: f_odd = call $328load_global.22(E, $AX_S.250, $XD_S.249, $D_S.251, N__max, oddloop, $oddVX_S.248, func=$328load_global.22, args=[Var(E, loop_hafnian_batch.py:57), Var($AX_S.250, loop_hafnian_batch.py:55), Var($XD_S.249, loop_hafnian_batch.py:55), Var($D_S.251, loop_hafnian_batch.py:55), Var(N__max, loop_hafnian_batch.py:30), Var(oddloop, loop_hafnian_batch.py:24), Var($oddVX_S.248, loop_hafnian_batch.py:55)], kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:19,934 on stmt: $356binary_subscr.35 = static_getitem(value=kept_edges, index=0, index_var=$const354.34, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:19,934 on stmt: $358binary_multiply.36 = $const350.32 * $356binary_subscr.35
DEBUG 2022-01-28 15:49:19,934 on stmt: $374call_function.44 = call $348load_global.31($358binary_multiply.36, $372binary_add.43, func=$348load_global.31, args=[Var($358binary_multiply.36, loop_hafnian_batch.py:64), Var($372binary_add.43, loop_hafnian_batch.py:64)], kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:19,934 on stmt: $376get_iter.45 = getiter(value=$374call_function.44)
DEBUG 2022-01-28 15:49:19,934 on stmt: jump 668
DEBUG 2022-01-28 15:49:19,934 ==== SSA block rewrite pass on 495
DEBUG 2022-01-28 15:49:19,934 Running <numba.core.ssa._FixSSAVars object at 0x000002410CC72730>
DEBUG 2022-01-28 15:49:19,934 on stmt: $228for_iter.2 = iternext(value=$226get_iter.29)
DEBUG 2022-01-28 15:49:19,934 on stmt: $i.253 = pair_first(value=$228for_iter.2)
DEBUG 2022-01-28 15:49:19,934 on stmt: $228for_iter.4 = pair_second(value=$228for_iter.2)
DEBUG 2022-01-28 15:49:19,934 on stmt: branch $228for_iter.4, 571, 577
DEBUG 2022-01-28 15:49:19,934 ==== SSA block rewrite pass on 668
DEBUG 2022-01-28 15:49:19,934 Running <numba.core.ssa._FixSSAVars object at 0x000002410CC72730>
DEBUG 2022-01-28 15:49:19,934 on stmt: $378for_iter.2 = iternext(value=$376get_iter.45)
DEBUG 2022-01-28 15:49:19,934 on stmt: $N_det.252 = pair_first(value=$378for_iter.2)
DEBUG 2022-01-28 15:49:19,934 on stmt: $378for_iter.4 = pair_second(value=$378for_iter.2)
DEBUG 2022-01-28 15:49:19,934 on stmt: branch $378for_iter.4, 670, 743
DEBUG 2022-01-28 15:49:19,934 ==== SSA block rewrite pass on 571
DEBUG 2022-01-28 15:49:19,934 Running <numba.core.ssa._FixSSAVars object at 0x000002410CC72730>
DEBUG 2022-01-28 15:49:19,934 on stmt: $240binary_subscr.7 = getitem(value=edge__reps, index=$i.253, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:19,934 on stmt: $246binary_subscr.10 = getitem(value=kept_edges, index=$i.253, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:19,934 on stmt: $248build_tuple.11 = build_tuple(items=[Var($240binary_subscr.7, loop_hafnian_batch.py:48), Var($246binary_subscr.10, loop_hafnian_batch.py:48)])
DEBUG 2022-01-28 15:49:19,934 on stmt: $250binary_subscr.12 = getitem(value=binoms, index=$248build_tuple.11, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:19,934 on stmt: $binom_prod.2.600 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=binom_prod.2, rhs=$250binary_subscr.12, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-01-28 15:49:19,934 on stmt: binom_prod.2 = $binom_prod.2.600
DEBUG 2022-01-28 15:49:19,934 on stmt: jump 495
DEBUG 2022-01-28 15:49:19,934 ==== SSA block rewrite pass on 727
DEBUG 2022-01-28 15:49:19,934 Running <numba.core.ssa._FixSSAVars object at 0x000002410CC72730>
DEBUG 2022-01-28 15:49:19,934 on stmt: jump 668
DEBUG 2022-01-28 15:49:19,934 ==== SSA block rewrite pass on 50
DEBUG 2022-01-28 15:49:19,934 Running <numba.core.ssa._FixSSAVars object at 0x000002410CC72730>
DEBUG 2022-01-28 15:49:19,934 on stmt: j = parfor__index_230
DEBUG 2022-01-28 15:49:19,934 on stmt: id=2[LoopNest(index_variable = parfor_index.208, range = (0, $180binary_add.10, 1))]{887: <ir.Block at C:\Users\zl4821\PycharmProjects\GBS\gbs\loop_hafnian_batch.py (41)>}Var(parfor_index.208, loop_hafnian_batch.py:41)
DEBUG 2022-01-28 15:49:19,934 on stmt: kept_edges = call $192load_global.15(j, edge__reps, func=$192load_global.15, args=[Var(j, loop_hafnian_batch.py:39), Var(edge__reps, loop_hafnian_batch.py:32)], kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:19,934 on stmt: kept_edges_shape.167 = getattr(value=kept_edges, attr=shape)
DEBUG 2022-01-28 15:49:19,934 on stmt: kept_edges_size0.168 = static_getitem(value=kept_edges_shape.167, index=0, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:19,934 on stmt: binom_prod.2 = binom_prod
DEBUG 2022-01-28 15:49:19,940 on stmt: id=6[LoopNest(index_variable = parfor_index.226, range = (0, kept_edges_size0.168, 1))]{557: <ir.Block at C:\Users\zl4821\Anaconda3\envs\GBS\lib\site-packages\numba\parfors\parfor.py (256)>}Var(parfor_index.226, parfor.py:256)
DEBUG 2022-01-28 15:49:19,940 on stmt: $224call_function.28 = call $214load_global.23($const216.24, $222binary_floor_divide.27, func=$214load_global.23, args=[Var($const216.24, loop_hafnian_batch.py:47), Var($222binary_floor_divide.27, loop_hafnian_batch.py:47)], kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:19,940 on stmt: $226get_iter.29 = getiter(value=$224call_function.28)
DEBUG 2022-01-28 15:49:19,940 on stmt: jump 495
DEBUG 2022-01-28 15:49:19,940 ==== SSA block rewrite pass on 743
DEBUG 2022-01-28 15:49:19,940 Running <numba.core.ssa._FixSSAVars object at 0x000002410CC72730>
DEBUG 2022-01-28 15:49:19,940 on stmt: ret.193 = call assert.192(msg.191, _136binary__add_59, $180binary_add.10, func=assert.192, args=[Var(msg.191, loop_hafnian_batch.py:75), Var(_136binary__add_59, loop_hafnian_batch.py:38), Var($180binary_add.10, loop_hafnian_batch.py:41)], kws={}, vararg=None, target=None)
DEBUG 2022-01-28 15:49:19,940 on stmt: $H_batch.2.602 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=H__batch_2, rhs=Hnew, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-01-28 15:49:19,940 find_def var='H__batch_2' stmt=$H_batch.2.602 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=H__batch_2, rhs=Hnew, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-01-28 15:49:19,940 find_def_from_top label 743
DEBUG 2022-01-28 15:49:19,940 idom 668 from label 743
DEBUG 2022-01-28 15:49:19,940 find_def_from_bottom label 668
DEBUG 2022-01-28 15:49:19,940 find_def_from_top label 668
DEBUG 2022-01-28 15:49:19,940 idom 631 from label 668
DEBUG 2022-01-28 15:49:19,940 find_def_from_bottom label 631
DEBUG 2022-01-28 15:49:19,940 find_def_from_top label 631
DEBUG 2022-01-28 15:49:19,940 idom 577 from label 631
DEBUG 2022-01-28 15:49:19,940 find_def_from_bottom label 577
DEBUG 2022-01-28 15:49:19,940 find_def_from_top label 577
DEBUG 2022-01-28 15:49:19,940 idom 495 from label 577
DEBUG 2022-01-28 15:49:19,940 find_def_from_bottom label 495
DEBUG 2022-01-28 15:49:19,940 find_def_from_top label 495
DEBUG 2022-01-28 15:49:19,940 idom 50 from label 495
DEBUG 2022-01-28 15:49:19,940 find_def_from_bottom label 50
DEBUG 2022-01-28 15:49:19,940 find_def_from_top label 50
DEBUG 2022-01-28 15:49:19,940 idom 42 from label 50
DEBUG 2022-01-28 15:49:19,940 find_def_from_bottom label 42
DEBUG 2022-01-28 15:49:19,940 find_def_from_top label 42
DEBUG 2022-01-28 15:49:19,940 idom 40 from label 42
DEBUG 2022-01-28 15:49:19,940 find_def_from_bottom label 40
DEBUG 2022-01-28 15:49:19,940 replaced with: $H_batch.2.602 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=H__batch_2.2, rhs=Hnew, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-01-28 15:49:19,940 on stmt: H__batch_2.1 = $H_batch.2.602
DEBUG 2022-01-28 15:49:19,940 on stmt: jump 782
DEBUG 2022-01-28 15:49:19,940 ==== SSA block rewrite pass on 577
DEBUG 2022-01-28 15:49:19,940 Running <numba.core.ssa._FixSSAVars object at 0x000002410CC72730>
DEBUG 2022-01-28 15:49:19,940 on stmt: $260pred = call bool260(glynn, func=bool260, args=(Var(glynn, loop_hafnian_batch.py:24),), kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:19,940 on stmt: branch $260pred, 591, 593
DEBUG 2022-01-28 15:49:19,940 ==== SSA block rewrite pass on 591
DEBUG 2022-01-28 15:49:19,940 Running <numba.core.ssa._FixSSAVars object at 0x000002410CC72730>
DEBUG 2022-01-28 15:49:19,940 on stmt: ret.172 = call assert.171(msg.170, kept_edges_size0.168, edge__reps__size0_160, func=assert.171, args=[Var(msg.170, loop_hafnian_batch.py:51), Var(kept_edges_size0.168, loop_hafnian_batch.py:43), Var(edge__reps__size0_160, loop_hafnian_batch.py:32)], kws={}, vararg=None, target=None)
DEBUG 2022-01-28 15:49:19,940 on stmt: id=3[LoopNest(index_variable = parfor_index.213, range = (0, edge__reps__size0_160, 1))]{888: <ir.Block at C:\Users\zl4821\PycharmProjects\GBS\gbs\loop_hafnian_batch.py (51)>}Var(parfor_index.213, loop_hafnian_batch.py:51)
DEBUG 2022-01-28 15:49:19,940 on stmt: delta.2.1 = delta
DEBUG 2022-01-28 15:49:19,940 on stmt: jump 631
DEBUG 2022-01-28 15:49:19,940 ==== SSA block rewrite pass on 782
DEBUG 2022-01-28 15:49:19,940 Running <numba.core.ssa._FixSSAVars object at 0x000002410CC72730>
DEBUG 2022-01-28 15:49:19,940 on stmt: jump 40
DEBUG 2022-01-28 15:49:19,940 Fix SSA violator on var binom_prod.2
DEBUG 2022-01-28 15:49:19,940 ==== SSA block rewrite pass on 0
DEBUG 2022-01-28 15:49:19,940 Running <numba.core.ssa._FreshVarHandler object at 0x000002410CC11DC0>
DEBUG 2022-01-28 15:49:19,940 on stmt: sched.834 = arg(0, name=sched)
DEBUG 2022-01-28 15:49:19,940 on stmt: _136binary__add_59 = arg(1, name=_136binary__add_59)
DEBUG 2022-01-28 15:49:19,940 on stmt: A = arg(2, name=A)
DEBUG 2022-01-28 15:49:19,940 on stmt: D = arg(3, name=D)
DEBUG 2022-01-28 15:49:19,940 on stmt: N__fixed = arg(4, name=N__fixed)
DEBUG 2022-01-28 15:49:19,940 on stmt: N__max = arg(5, name=N__max)
DEBUG 2022-01-28 15:49:19,940 on stmt: batch__max = arg(6, name=batch__max)
DEBUG 2022-01-28 15:49:19,940 on stmt: binoms = arg(7, name=binoms)
DEBUG 2022-01-28 15:49:19,940 on stmt: edge__reps = arg(8, name=edge__reps)
DEBUG 2022-01-28 15:49:19,940 on stmt: edge__reps__size0_160 = arg(9, name=edge__reps__size0_160)
DEBUG 2022-01-28 15:49:19,940 on stmt: glynn = arg(10, name=glynn)
DEBUG 2022-01-28 15:49:19,940 on stmt: n = arg(11, name=n)
DEBUG 2022-01-28 15:49:19,940 on stmt: oddV = arg(12, name=oddV)
DEBUG 2022-01-28 15:49:19,940 on stmt: odd__cutoff = arg(13, name=odd__cutoff)
DEBUG 2022-01-28 15:49:19,940 on stmt: oddloop = arg(14, name=oddloop)
DEBUG 2022-01-28 15:49:19,940 on stmt: H__batch_2__arr = arg(15, name=H__batch_2__arr)
DEBUG 2022-01-28 15:49:19,940 on stmt: $2load_global.0.835 = global(np: <module 'numpy' from 'C:\\Users\\zl4821\\Anaconda3\\envs\\GBS\\lib\\site-packages\\numpy\\__init__.py'>)
DEBUG 2022-01-28 15:49:19,940 on stmt: $4load_method.1.836 = getattr(value=$2load_global.0.835, attr=copy)
DEBUG 2022-01-28 15:49:19,940 on stmt: H__batch_2 = call $4load_method.1.836(H__batch_2__arr, func=$4load_method.1.836, args=[Var(H__batch_2__arr, <string>:2)], kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:19,940 on stmt: $12load_global.4.837 = global(range: <class 'range'>)
DEBUG 2022-01-28 15:49:19,940 on stmt: $const16.6.838 = const(int, 0)
DEBUG 2022-01-28 15:49:19,940 on stmt: $18binary_subscr.7.839 = getitem(value=sched.834, index=$const16.6.838, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:19,940 on stmt: $const22.9.840 = const(int, 1)
DEBUG 2022-01-28 15:49:19,940 on stmt: $24binary_subscr.10.841 = getitem(value=sched.834, index=$const22.9.840, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:19,940 on stmt: $26load_global.11.842 = global(np: <module 'numpy' from 'C:\\Users\\zl4821\\Anaconda3\\envs\\GBS\\lib\\site-packages\\numpy\\__init__.py'>)
DEBUG 2022-01-28 15:49:19,940 on stmt: $28load_method.12.843 = getattr(value=$26load_global.11.842, attr=uint8)
DEBUG 2022-01-28 15:49:19,940 on stmt: $const30.13.844 = const(int, 1)
DEBUG 2022-01-28 15:49:19,940 on stmt: $32call_method.14.845 = call $28load_method.12.843($const30.13.844, func=$28load_method.12.843, args=[Var($const30.13.844, <string>:3)], kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:19,940 on stmt: $34binary_add.15.846 = $24binary_subscr.10.841 + $32call_method.14.845
DEBUG 2022-01-28 15:49:19,940 on stmt: $36call_function.16.847 = call $12load_global.4.837($18binary_subscr.7.839, $34binary_add.15.846, func=$12load_global.4.837, args=[Var($18binary_subscr.7.839, <string>:3), Var($34binary_add.15.846, <string>:3)], kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:19,940 on stmt: $38get_iter.17.848 = getiter(value=$36call_function.16.847)
DEBUG 2022-01-28 15:49:19,940 on stmt: $phi40.0.849 = $38get_iter.17.848
DEBUG 2022-01-28 15:49:19,940 on stmt: $const462.12 = const(int, 2)
DEBUG 2022-01-28 15:49:19,940 on stmt: $const390.6 = const(float, -1.0)
DEBUG 2022-01-28 15:49:19,940 on stmt: $const394.8 = const(int, 2)
DEBUG 2022-01-28 15:49:19,940 on stmt: $const410.15 = const(int, 2)
DEBUG 2022-01-28 15:49:19,940 on stmt: $const416.18 = const(int, 0)
DEBUG 2022-01-28 15:49:19,940 on stmt: $const432.25 = const(int, 2)
DEBUG 2022-01-28 15:49:19,940 on stmt: $const436.27 = const(int, 0)
DEBUG 2022-01-28 15:49:19,940 on stmt: bool440 = global(bool: <class 'bool'>)
DEBUG 2022-01-28 15:49:19,940 on stmt: $282load_global.1 = global(get_submatrices: CPUDispatcher(<function get_submatrices at 0x0000024107424E50>))
DEBUG 2022-01-28 15:49:19,940 on stmt: $304load_global.12 = global(eigvals: CPUDispatcher(<function eigvals at 0x00000241074303A0>))
DEBUG 2022-01-28 15:49:19,940 on stmt: $312load_global.15 = global(f_loop: CPUDispatcher(<function f_loop at 0x00000241074248B0>))
DEBUG 2022-01-28 15:49:19,940 on stmt: $328load_global.22 = global(f_loop_odd: CPUDispatcher(<function f_loop_odd at 0x0000024107424AF0>))
DEBUG 2022-01-28 15:49:19,940 on stmt: $348load_global.31 = global(range: <class 'range'>)
DEBUG 2022-01-28 15:49:19,940 on stmt: $const350.32 = const(int, 2)
DEBUG 2022-01-28 15:49:19,940 on stmt: $const354.34 = const(int, 0)
DEBUG 2022-01-28 15:49:19,940 on stmt: $const360.37 = const(int, 2)
DEBUG 2022-01-28 15:49:19,940 on stmt: $364binary_multiply.39 = $const360.37 * batch__max
DEBUG 2022-01-28 15:49:19,940 on stmt: $368binary_add.41 = $364binary_multiply.39 + odd__cutoff
DEBUG 2022-01-28 15:49:19,940 on stmt: $const370.42 = const(int, 1)
DEBUG 2022-01-28 15:49:19,940 on stmt: $372binary_add.43 = $368binary_add.41 + $const370.42
DEBUG 2022-01-28 15:49:19,940 on stmt: $const168.4 = const(int, 2)
DEBUG 2022-01-28 15:49:19,940 on stmt: $172binary_multiply.6 = $const168.4 * batch__max
DEBUG 2022-01-28 15:49:19,940 on stmt: $176binary_add.8 = $172binary_multiply.6 + odd__cutoff
DEBUG 2022-01-28 15:49:19,940 on stmt: $const178.9 = const(int, 1)
DEBUG 2022-01-28 15:49:19,940 on stmt: $180binary_add.10 = $176binary_add.8 + $const178.9
DEBUG 2022-01-28 15:49:19,940 on stmt: $192load_global.15 = global(find_kept_edges: CPUDispatcher(<function find_kept_edges at 0x0000024107424550>))
DEBUG 2022-01-28 15:49:19,940 on stmt: $np_g_var.209 = global(np: <module 'numpy' from 'C:\\Users\\zl4821\\Anaconda3\\envs\\GBS\\lib\\site-packages\\numpy\\__init__.py'>)
DEBUG 2022-01-28 15:49:19,940 on stmt: $empty_attr_attr.210 = getattr(value=$np_g_var.209, attr=empty)
DEBUG 2022-01-28 15:49:19,940 on stmt: $np_typ_var.211 = getattr(value=$np_g_var.209, attr=complex128)
DEBUG 2022-01-28 15:49:19,940 on stmt: Hnew = call $empty_attr_attr.210($180binary_add.10, $np_typ_var.211, func=$empty_attr_attr.210, args=[Var($180binary_add.10, loop_hafnian_batch.py:41), Var($np_typ_var.211, loop_hafnian_batch.py:41)], kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:19,940 on stmt: binom_prod = const(float, 1.0)
DEBUG 2022-01-28 15:49:19,940 on stmt: $214load_global.23 = global(range: <class 'range'>)
DEBUG 2022-01-28 15:49:19,940 on stmt: $const216.24 = const(int, 1)
DEBUG 2022-01-28 15:49:19,940 on stmt: $const220.26 = const(int, 2)
DEBUG 2022-01-28 15:49:19,940 on stmt: $222binary_floor_divide.27 = n // $const220.26
DEBUG 2022-01-28 15:49:19,940 on stmt: msg.191 = const(str, Sizes of H_batch.2, Hnew do not match on C:\Users\zl4821\PycharmProjects\GBS\gbs\loop_hafnian_batch.py (75))
DEBUG 2022-01-28 15:49:19,940 on stmt: assert.192 = global(assert_equiv: <intrinsic assert_equiv>)
DEBUG 2022-01-28 15:49:19,940 on stmt: bool260 = global(bool: <class 'bool'>)
DEBUG 2022-01-28 15:49:19,940 on stmt: msg.170 = const(str, Sizes of kept_edges, edge_reps do not match on C:\Users\zl4821\PycharmProjects\GBS\gbs\loop_hafnian_batch.py (51))
DEBUG 2022-01-28 15:49:19,940 on stmt: assert.171 = global(assert_equiv: <intrinsic assert_equiv>)
DEBUG 2022-01-28 15:49:19,940 on stmt: $np_g_var.214 = global(np: <module 'numpy' from 'C:\\Users\\zl4821\\Anaconda3\\envs\\GBS\\lib\\site-packages\\numpy\\__init__.py'>)
DEBUG 2022-01-28 15:49:19,940 on stmt: $empty_attr_attr.215 = getattr(value=$np_g_var.214, attr=empty)
DEBUG 2022-01-28 15:49:19,940 on stmt: $np_typ_var.216 = getattr(value=$np_g_var.214, attr=int64)
DEBUG 2022-01-28 15:49:19,940 on stmt: delta = call $empty_attr_attr.215(edge__reps__size0_160, $np_typ_var.216, func=$empty_attr_attr.215, args=[Var(edge__reps__size0_160, loop_hafnian_batch.py:32), Var($np_typ_var.216, loop_hafnian_batch.py:51)], kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:19,940 on stmt: jump 40
DEBUG 2022-01-28 15:49:19,940 ==== SSA block rewrite pass on 40
DEBUG 2022-01-28 15:49:19,940 Running <numba.core.ssa._FreshVarHandler object at 0x000002410CC11DC0>
DEBUG 2022-01-28 15:49:19,940 on stmt: H__batch_2.2 = phi(incoming_values=[Var(H__batch_2, <string>:2), Var(H__batch_2.1, loop_hafnian_batch.py:75)], incoming_blocks=[0, 782])
DEBUG 2022-01-28 15:49:19,940 on stmt: $40for_iter.1.850 = iternext(value=$phi40.0.849)
DEBUG 2022-01-28 15:49:19,940 on stmt: $40for_iter.2.851 = pair_first(value=$40for_iter.1.850)
DEBUG 2022-01-28 15:49:19,940 on stmt: $40for_iter.3.852 = pair_second(value=$40for_iter.1.850)
DEBUG 2022-01-28 15:49:19,940 on stmt: $phi42.1.853 = $40for_iter.2.851
DEBUG 2022-01-28 15:49:19,940 on stmt: branch $40for_iter.3.852, 42, 889
DEBUG 2022-01-28 15:49:19,940 ==== SSA block rewrite pass on 42
DEBUG 2022-01-28 15:49:19,940 Running <numba.core.ssa._FreshVarHandler object at 0x000002410CC11DC0>
DEBUG 2022-01-28 15:49:19,940 on stmt: parfor__index_230 = $phi42.1.853
DEBUG 2022-01-28 15:49:19,940 on stmt: jump 50
DEBUG 2022-01-28 15:49:19,940 ==== SSA block rewrite pass on 889
DEBUG 2022-01-28 15:49:19,940 Running <numba.core.ssa._FreshVarHandler object at 0x000002410CC11DC0>
DEBUG 2022-01-28 15:49:19,940 on stmt: $const52.1.854 = const(NoneType, None)
DEBUG 2022-01-28 15:49:19,940 on stmt: $const54.2.855 = const(NoneType, None)
DEBUG 2022-01-28 15:49:19,940 on stmt: $56build_slice.3.856 = global(slice: <class 'slice'>)
DEBUG 2022-01-28 15:49:19,940 on stmt: $56build_slice.4.857 = call $56build_slice.3.856($const52.1.854, $const54.2.855, func=$56build_slice.3.856, args=(Var($const52.1.854, <string>:5), Var($const54.2.855, <string>:5)), kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:19,940 on stmt: $58binary_subscr.5.858 = getitem(value=H__batch_2.2, index=$56build_slice.4.857, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:19,940 on stmt: $const62.7.859 = const(NoneType, None)
DEBUG 2022-01-28 15:49:19,940 on stmt: $const64.8.860 = const(NoneType, None)
DEBUG 2022-01-28 15:49:19,940 on stmt: $66build_slice.9.861 = global(slice: <class 'slice'>)
DEBUG 2022-01-28 15:49:19,940 on stmt: $66build_slice.10.862 = call $66build_slice.9.861($const62.7.859, $const64.8.860, func=$66build_slice.9.861, args=(Var($const62.7.859, <string>:5), Var($const64.8.860, <string>:5)), kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:19,940 on stmt: H__batch_2__arr[$66build_slice.10.862] = $58binary_subscr.5.858
DEBUG 2022-01-28 15:49:19,940 on stmt: $const70.11.863 = const(NoneType, None)
DEBUG 2022-01-28 15:49:19,940 on stmt: $72return_value.12.864 = cast(value=$const70.11.863)
DEBUG 2022-01-28 15:49:19,940 on stmt: return $72return_value.12.864
DEBUG 2022-01-28 15:49:19,940 ==== SSA block rewrite pass on 686
DEBUG 2022-01-28 15:49:19,940 Running <numba.core.ssa._FreshVarHandler object at 0x000002410CC11DC0>
DEBUG 2022-01-28 15:49:19,940 on stmt: $450binary_subscr.6 = getitem(value=Hnew, index=$N_det.252, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:19,940 on stmt: $456binary_multiply.9 = n_det_binom_prod * plus_minus
DEBUG 2022-01-28 15:49:19,940 on stmt: $464binary_floor_divide.13 = N // $const462.12
DEBUG 2022-01-28 15:49:19,940 on stmt: $466binary_subscr.14 = getitem(value=f_even, index=$464binary_floor_divide.13, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:19,940 on stmt: $468binary_multiply.15 = $456binary_multiply.9 * $466binary_subscr.14
DEBUG 2022-01-28 15:49:19,940 on stmt: $470inplace_add.16 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$450binary_subscr.6, rhs=$468binary_multiply.15, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-01-28 15:49:19,940 on stmt: Hnew[$N_det.252] = $470inplace_add.16
DEBUG 2022-01-28 15:49:19,940 on stmt: jump 727
DEBUG 2022-01-28 15:49:19,940 ==== SSA block rewrite pass on 725
DEBUG 2022-01-28 15:49:19,940 Running <numba.core.ssa._FreshVarHandler object at 0x000002410CC11DC0>
DEBUG 2022-01-28 15:49:19,940 on stmt: $484binary_subscr.6 = getitem(value=Hnew, index=$N_det.252, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:19,940 on stmt: $490binary_multiply.9 = n_det_binom_prod * plus_minus
DEBUG 2022-01-28 15:49:19,940 on stmt: $496binary_subscr.12 = getitem(value=f_odd, index=N, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:19,940 on stmt: $498binary_multiply.13 = $490binary_multiply.9 * $496binary_subscr.12
DEBUG 2022-01-28 15:49:19,940 on stmt: $500inplace_add.14 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$484binary_subscr.6, rhs=$498binary_multiply.13, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-01-28 15:49:19,940 on stmt: Hnew[$N_det.252] = $500inplace_add.14
DEBUG 2022-01-28 15:49:19,940 on stmt: jump 727
DEBUG 2022-01-28 15:49:19,940 ==== SSA block rewrite pass on 593
DEBUG 2022-01-28 15:49:19,940 Running <numba.core.ssa._FreshVarHandler object at 0x000002410CC11DC0>
DEBUG 2022-01-28 15:49:19,940 on stmt: delta.2 = kept_edges
DEBUG 2022-01-28 15:49:19,940 on stmt: jump 631
DEBUG 2022-01-28 15:49:19,940 ==== SSA block rewrite pass on 670
DEBUG 2022-01-28 15:49:19,940 Running <numba.core.ssa._FreshVarHandler object at 0x000002410CC11DC0>
DEBUG 2022-01-28 15:49:19,956 on stmt: N = N__fixed + $N_det.252
DEBUG 2022-01-28 15:49:19,956 on stmt: $396binary_floor_divide.9 = N // $const394.8
DEBUG 2022-01-28 15:49:19,956 on stmt: $400binary_subtract.11 = $396binary_floor_divide.9 - val.10
DEBUG 2022-01-28 15:49:19,956 on stmt: plus_minus = $const390.6 ** $400binary_subtract.11
DEBUG 2022-01-28 15:49:19,956 on stmt: $412binary_floor_divide.16 = $N_det.252 // $const410.15
DEBUG 2022-01-28 15:49:19,956 on stmt: $418binary_subscr.19 = static_getitem(value=kept_edges, index=0, index_var=$const416.18, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:19,956 on stmt: $420build_tuple.20 = build_tuple(items=[Var($412binary_floor_divide.16, loop_hafnian_batch.py:68), Var($418binary_subscr.19, loop_hafnian_batch.py:68)])
DEBUG 2022-01-28 15:49:19,956 on stmt: $422binary_subscr.21 = getitem(value=binoms, index=$420build_tuple.20, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:19,956 on stmt: n_det_binom_prod = $422binary_subscr.21 * binom_prod.2
DEBUG 2022-01-28 15:49:19,956 on stmt: $434binary_modulo.26 = $N_det.252 % $const432.25
DEBUG 2022-01-28 15:49:19,956 on stmt: $438compare_op.28 = $434binary_modulo.26 == $const436.27
DEBUG 2022-01-28 15:49:19,956 on stmt: $440pred = call bool440($438compare_op.28, func=bool440, args=(Var($438compare_op.28, loop_hafnian_batch.py:70),), kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:19,956 on stmt: branch $440pred, 686, 725
DEBUG 2022-01-28 15:49:19,956 ==== SSA block rewrite pass on 631
DEBUG 2022-01-28 15:49:19,956 Running <numba.core.ssa._FreshVarHandler object at 0x000002410CC11DC0>
DEBUG 2022-01-28 15:49:19,956 on stmt: delta.2.2 = phi(incoming_values=[Var(delta.2, loop_hafnian_batch.py:55), Var(delta.2.1, loop_hafnian_batch.py:51)], incoming_blocks=[593, 591])
DEBUG 2022-01-28 15:49:19,956 on stmt: $292call_function.6 = call $282load_global.1(delta.2.2, A, D, oddV, func=$282load_global.1, args=[Var(delta.2.2, loop_hafnian_batch.py:55), Var(A, loop_hafnian_batch.py:24), Var(D, loop_hafnian_batch.py:24), Var(oddV, loop_hafnian_batch.py:25)], kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:19,956 on stmt: $294unpack_sequence.11 = exhaust_iter(value=$292call_function.6, count=4)
DEBUG 2022-01-28 15:49:19,956 on stmt: $AX_S.250 = static_getitem(value=$294unpack_sequence.11, index=0, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:19,956 on stmt: $XD_S.249 = static_getitem(value=$294unpack_sequence.11, index=1, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:19,956 on stmt: $D_S.251 = static_getitem(value=$294unpack_sequence.11, index=2, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:19,956 on stmt: $oddVX_S.248 = static_getitem(value=$294unpack_sequence.11, index=3, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:19,956 on stmt: E = call $304load_global.12($AX_S.250, func=$304load_global.12, args=[Var($AX_S.250, loop_hafnian_batch.py:55)], kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:19,956 on stmt: f_even = call $312load_global.15(E, $AX_S.250, $XD_S.249, $D_S.251, N__max, func=$312load_global.15, args=[Var(E, loop_hafnian_batch.py:57), Var($AX_S.250, loop_hafnian_batch.py:55), Var($XD_S.249, loop_hafnian_batch.py:55), Var($D_S.251, loop_hafnian_batch.py:55), Var(N__max, loop_hafnian_batch.py:30)], kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:19,956 on stmt: f_odd = call $328load_global.22(E, $AX_S.250, $XD_S.249, $D_S.251, N__max, oddloop, $oddVX_S.248, func=$328load_global.22, args=[Var(E, loop_hafnian_batch.py:57), Var($AX_S.250, loop_hafnian_batch.py:55), Var($XD_S.249, loop_hafnian_batch.py:55), Var($D_S.251, loop_hafnian_batch.py:55), Var(N__max, loop_hafnian_batch.py:30), Var(oddloop, loop_hafnian_batch.py:24), Var($oddVX_S.248, loop_hafnian_batch.py:55)], kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:19,956 on stmt: $356binary_subscr.35 = static_getitem(value=kept_edges, index=0, index_var=$const354.34, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:19,956 on stmt: $358binary_multiply.36 = $const350.32 * $356binary_subscr.35
DEBUG 2022-01-28 15:49:19,956 on stmt: $374call_function.44 = call $348load_global.31($358binary_multiply.36, $372binary_add.43, func=$348load_global.31, args=[Var($358binary_multiply.36, loop_hafnian_batch.py:64), Var($372binary_add.43, loop_hafnian_batch.py:64)], kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:19,956 on stmt: $376get_iter.45 = getiter(value=$374call_function.44)
DEBUG 2022-01-28 15:49:19,956 on stmt: jump 668
DEBUG 2022-01-28 15:49:19,956 ==== SSA block rewrite pass on 495
DEBUG 2022-01-28 15:49:19,956 Running <numba.core.ssa._FreshVarHandler object at 0x000002410CC11DC0>
DEBUG 2022-01-28 15:49:19,956 on stmt: $228for_iter.2 = iternext(value=$226get_iter.29)
DEBUG 2022-01-28 15:49:19,956 on stmt: $i.253 = pair_first(value=$228for_iter.2)
DEBUG 2022-01-28 15:49:19,956 on stmt: $228for_iter.4 = pair_second(value=$228for_iter.2)
DEBUG 2022-01-28 15:49:19,956 on stmt: branch $228for_iter.4, 571, 577
DEBUG 2022-01-28 15:49:19,956 ==== SSA block rewrite pass on 668
DEBUG 2022-01-28 15:49:19,956 Running <numba.core.ssa._FreshVarHandler object at 0x000002410CC11DC0>
DEBUG 2022-01-28 15:49:19,956 on stmt: $378for_iter.2 = iternext(value=$376get_iter.45)
DEBUG 2022-01-28 15:49:19,956 on stmt: $N_det.252 = pair_first(value=$378for_iter.2)
DEBUG 2022-01-28 15:49:19,956 on stmt: $378for_iter.4 = pair_second(value=$378for_iter.2)
DEBUG 2022-01-28 15:49:19,956 on stmt: branch $378for_iter.4, 670, 743
DEBUG 2022-01-28 15:49:19,956 ==== SSA block rewrite pass on 571
DEBUG 2022-01-28 15:49:19,956 Running <numba.core.ssa._FreshVarHandler object at 0x000002410CC11DC0>
DEBUG 2022-01-28 15:49:19,956 on stmt: $240binary_subscr.7 = getitem(value=edge__reps, index=$i.253, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:19,956 on stmt: $246binary_subscr.10 = getitem(value=kept_edges, index=$i.253, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:19,956 on stmt: $248build_tuple.11 = build_tuple(items=[Var($240binary_subscr.7, loop_hafnian_batch.py:48), Var($246binary_subscr.10, loop_hafnian_batch.py:48)])
DEBUG 2022-01-28 15:49:19,956 on stmt: $250binary_subscr.12 = getitem(value=binoms, index=$248build_tuple.11, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:19,956 on stmt: $binom_prod.2.600 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=binom_prod.2, rhs=$250binary_subscr.12, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-01-28 15:49:19,956 on stmt: binom_prod.2 = $binom_prod.2.600
DEBUG 2022-01-28 15:49:19,956 first assign: binom_prod.2
DEBUG 2022-01-28 15:49:19,956 replaced with: binom_prod.2 = $binom_prod.2.600
DEBUG 2022-01-28 15:49:19,956 on stmt: jump 495
DEBUG 2022-01-28 15:49:19,956 ==== SSA block rewrite pass on 727
DEBUG 2022-01-28 15:49:19,956 Running <numba.core.ssa._FreshVarHandler object at 0x000002410CC11DC0>
DEBUG 2022-01-28 15:49:19,956 on stmt: jump 668
DEBUG 2022-01-28 15:49:19,956 ==== SSA block rewrite pass on 50
DEBUG 2022-01-28 15:49:19,956 Running <numba.core.ssa._FreshVarHandler object at 0x000002410CC11DC0>
DEBUG 2022-01-28 15:49:19,956 on stmt: j = parfor__index_230
DEBUG 2022-01-28 15:49:19,956 on stmt: id=2[LoopNest(index_variable = parfor_index.208, range = (0, $180binary_add.10, 1))]{887: <ir.Block at C:\Users\zl4821\PycharmProjects\GBS\gbs\loop_hafnian_batch.py (41)>}Var(parfor_index.208, loop_hafnian_batch.py:41)
DEBUG 2022-01-28 15:49:19,956 on stmt: kept_edges = call $192load_global.15(j, edge__reps, func=$192load_global.15, args=[Var(j, loop_hafnian_batch.py:39), Var(edge__reps, loop_hafnian_batch.py:32)], kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:19,956 on stmt: kept_edges_shape.167 = getattr(value=kept_edges, attr=shape)
DEBUG 2022-01-28 15:49:19,956 on stmt: kept_edges_size0.168 = static_getitem(value=kept_edges_shape.167, index=0, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:19,956 on stmt: binom_prod.2 = binom_prod
DEBUG 2022-01-28 15:49:19,956 replaced with: binom_prod.2.1 = binom_prod
DEBUG 2022-01-28 15:49:19,956 on stmt: id=6[LoopNest(index_variable = parfor_index.226, range = (0, kept_edges_size0.168, 1))]{557: <ir.Block at C:\Users\zl4821\Anaconda3\envs\GBS\lib\site-packages\numba\parfors\parfor.py (256)>}Var(parfor_index.226, parfor.py:256)
DEBUG 2022-01-28 15:49:19,956 on stmt: $224call_function.28 = call $214load_global.23($const216.24, $222binary_floor_divide.27, func=$214load_global.23, args=[Var($const216.24, loop_hafnian_batch.py:47), Var($222binary_floor_divide.27, loop_hafnian_batch.py:47)], kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:19,956 on stmt: $226get_iter.29 = getiter(value=$224call_function.28)
DEBUG 2022-01-28 15:49:19,956 on stmt: jump 495
DEBUG 2022-01-28 15:49:19,956 ==== SSA block rewrite pass on 743
DEBUG 2022-01-28 15:49:19,956 Running <numba.core.ssa._FreshVarHandler object at 0x000002410CC11DC0>
DEBUG 2022-01-28 15:49:19,956 on stmt: ret.193 = call assert.192(msg.191, _136binary__add_59, $180binary_add.10, func=assert.192, args=[Var(msg.191, loop_hafnian_batch.py:75), Var(_136binary__add_59, loop_hafnian_batch.py:38), Var($180binary_add.10, loop_hafnian_batch.py:41)], kws={}, vararg=None, target=None)
DEBUG 2022-01-28 15:49:19,956 on stmt: $H_batch.2.602 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=H__batch_2.2, rhs=Hnew, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-01-28 15:49:19,956 on stmt: H__batch_2.1 = $H_batch.2.602
DEBUG 2022-01-28 15:49:19,956 on stmt: jump 782
DEBUG 2022-01-28 15:49:19,956 ==== SSA block rewrite pass on 577
DEBUG 2022-01-28 15:49:19,956 Running <numba.core.ssa._FreshVarHandler object at 0x000002410CC11DC0>
DEBUG 2022-01-28 15:49:19,956 on stmt: $260pred = call bool260(glynn, func=bool260, args=(Var(glynn, loop_hafnian_batch.py:24),), kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:19,956 on stmt: branch $260pred, 591, 593
DEBUG 2022-01-28 15:49:19,956 ==== SSA block rewrite pass on 591
DEBUG 2022-01-28 15:49:19,956 Running <numba.core.ssa._FreshVarHandler object at 0x000002410CC11DC0>
DEBUG 2022-01-28 15:49:19,956 on stmt: ret.172 = call assert.171(msg.170, kept_edges_size0.168, edge__reps__size0_160, func=assert.171, args=[Var(msg.170, loop_hafnian_batch.py:51), Var(kept_edges_size0.168, loop_hafnian_batch.py:43), Var(edge__reps__size0_160, loop_hafnian_batch.py:32)], kws={}, vararg=None, target=None)
DEBUG 2022-01-28 15:49:19,956 on stmt: id=3[LoopNest(index_variable = parfor_index.213, range = (0, edge__reps__size0_160, 1))]{888: <ir.Block at C:\Users\zl4821\PycharmProjects\GBS\gbs\loop_hafnian_batch.py (51)>}Var(parfor_index.213, loop_hafnian_batch.py:51)
DEBUG 2022-01-28 15:49:19,956 on stmt: delta.2.1 = delta
DEBUG 2022-01-28 15:49:19,956 on stmt: jump 631
DEBUG 2022-01-28 15:49:19,956 ==== SSA block rewrite pass on 782
DEBUG 2022-01-28 15:49:19,956 Running <numba.core.ssa._FreshVarHandler object at 0x000002410CC11DC0>
DEBUG 2022-01-28 15:49:19,956 on stmt: jump 40
DEBUG 2022-01-28 15:49:19,956 Replaced assignments: defaultdict(<class 'list'>,
            {50: [<numba.core.ir.Assign object at 0x000002410CCC6520>],
             571: [<numba.core.ir.Assign object at 0x000002410CC72FA0>]})
DEBUG 2022-01-28 15:49:19,956 ==== SSA block rewrite pass on 0
DEBUG 2022-01-28 15:49:19,956 Running <numba.core.ssa._FixSSAVars object at 0x000002410CC72D00>
DEBUG 2022-01-28 15:49:19,956 on stmt: sched.834 = arg(0, name=sched)
DEBUG 2022-01-28 15:49:19,956 on stmt: _136binary__add_59 = arg(1, name=_136binary__add_59)
DEBUG 2022-01-28 15:49:19,956 on stmt: A = arg(2, name=A)
DEBUG 2022-01-28 15:49:19,956 on stmt: D = arg(3, name=D)
DEBUG 2022-01-28 15:49:19,956 on stmt: N__fixed = arg(4, name=N__fixed)
DEBUG 2022-01-28 15:49:19,956 on stmt: N__max = arg(5, name=N__max)
DEBUG 2022-01-28 15:49:19,956 on stmt: batch__max = arg(6, name=batch__max)
DEBUG 2022-01-28 15:49:19,956 on stmt: binoms = arg(7, name=binoms)
DEBUG 2022-01-28 15:49:19,956 on stmt: edge__reps = arg(8, name=edge__reps)
DEBUG 2022-01-28 15:49:19,956 on stmt: edge__reps__size0_160 = arg(9, name=edge__reps__size0_160)
DEBUG 2022-01-28 15:49:19,956 on stmt: glynn = arg(10, name=glynn)
DEBUG 2022-01-28 15:49:19,956 on stmt: n = arg(11, name=n)
DEBUG 2022-01-28 15:49:19,956 on stmt: oddV = arg(12, name=oddV)
DEBUG 2022-01-28 15:49:19,956 on stmt: odd__cutoff = arg(13, name=odd__cutoff)
DEBUG 2022-01-28 15:49:19,956 on stmt: oddloop = arg(14, name=oddloop)
DEBUG 2022-01-28 15:49:19,956 on stmt: H__batch_2__arr = arg(15, name=H__batch_2__arr)
DEBUG 2022-01-28 15:49:19,956 on stmt: $2load_global.0.835 = global(np: <module 'numpy' from 'C:\\Users\\zl4821\\Anaconda3\\envs\\GBS\\lib\\site-packages\\numpy\\__init__.py'>)
DEBUG 2022-01-28 15:49:19,956 on stmt: $4load_method.1.836 = getattr(value=$2load_global.0.835, attr=copy)
DEBUG 2022-01-28 15:49:19,956 on stmt: H__batch_2 = call $4load_method.1.836(H__batch_2__arr, func=$4load_method.1.836, args=[Var(H__batch_2__arr, <string>:2)], kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:19,956 on stmt: $12load_global.4.837 = global(range: <class 'range'>)
DEBUG 2022-01-28 15:49:19,956 on stmt: $const16.6.838 = const(int, 0)
DEBUG 2022-01-28 15:49:19,956 on stmt: $18binary_subscr.7.839 = getitem(value=sched.834, index=$const16.6.838, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:19,956 on stmt: $const22.9.840 = const(int, 1)
DEBUG 2022-01-28 15:49:19,956 on stmt: $24binary_subscr.10.841 = getitem(value=sched.834, index=$const22.9.840, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:19,956 on stmt: $26load_global.11.842 = global(np: <module 'numpy' from 'C:\\Users\\zl4821\\Anaconda3\\envs\\GBS\\lib\\site-packages\\numpy\\__init__.py'>)
DEBUG 2022-01-28 15:49:19,956 on stmt: $28load_method.12.843 = getattr(value=$26load_global.11.842, attr=uint8)
DEBUG 2022-01-28 15:49:19,956 on stmt: $const30.13.844 = const(int, 1)
DEBUG 2022-01-28 15:49:19,956 on stmt: $32call_method.14.845 = call $28load_method.12.843($const30.13.844, func=$28load_method.12.843, args=[Var($const30.13.844, <string>:3)], kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:19,956 on stmt: $34binary_add.15.846 = $24binary_subscr.10.841 + $32call_method.14.845
DEBUG 2022-01-28 15:49:19,956 on stmt: $36call_function.16.847 = call $12load_global.4.837($18binary_subscr.7.839, $34binary_add.15.846, func=$12load_global.4.837, args=[Var($18binary_subscr.7.839, <string>:3), Var($34binary_add.15.846, <string>:3)], kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:19,956 on stmt: $38get_iter.17.848 = getiter(value=$36call_function.16.847)
DEBUG 2022-01-28 15:49:19,956 on stmt: $phi40.0.849 = $38get_iter.17.848
DEBUG 2022-01-28 15:49:19,956 on stmt: $const462.12 = const(int, 2)
DEBUG 2022-01-28 15:49:19,956 on stmt: $const390.6 = const(float, -1.0)
DEBUG 2022-01-28 15:49:19,956 on stmt: $const394.8 = const(int, 2)
DEBUG 2022-01-28 15:49:19,956 on stmt: $const410.15 = const(int, 2)
DEBUG 2022-01-28 15:49:19,956 on stmt: $const416.18 = const(int, 0)
DEBUG 2022-01-28 15:49:19,956 on stmt: $const432.25 = const(int, 2)
DEBUG 2022-01-28 15:49:19,956 on stmt: $const436.27 = const(int, 0)
DEBUG 2022-01-28 15:49:19,956 on stmt: bool440 = global(bool: <class 'bool'>)
DEBUG 2022-01-28 15:49:19,956 on stmt: $282load_global.1 = global(get_submatrices: CPUDispatcher(<function get_submatrices at 0x0000024107424E50>))
DEBUG 2022-01-28 15:49:19,956 on stmt: $304load_global.12 = global(eigvals: CPUDispatcher(<function eigvals at 0x00000241074303A0>))
DEBUG 2022-01-28 15:49:19,956 on stmt: $312load_global.15 = global(f_loop: CPUDispatcher(<function f_loop at 0x00000241074248B0>))
DEBUG 2022-01-28 15:49:19,956 on stmt: $328load_global.22 = global(f_loop_odd: CPUDispatcher(<function f_loop_odd at 0x0000024107424AF0>))
DEBUG 2022-01-28 15:49:19,956 on stmt: $348load_global.31 = global(range: <class 'range'>)
DEBUG 2022-01-28 15:49:19,956 on stmt: $const350.32 = const(int, 2)
DEBUG 2022-01-28 15:49:19,956 on stmt: $const354.34 = const(int, 0)
DEBUG 2022-01-28 15:49:19,956 on stmt: $const360.37 = const(int, 2)
DEBUG 2022-01-28 15:49:19,956 on stmt: $364binary_multiply.39 = $const360.37 * batch__max
DEBUG 2022-01-28 15:49:19,956 on stmt: $368binary_add.41 = $364binary_multiply.39 + odd__cutoff
DEBUG 2022-01-28 15:49:19,956 on stmt: $const370.42 = const(int, 1)
DEBUG 2022-01-28 15:49:19,956 on stmt: $372binary_add.43 = $368binary_add.41 + $const370.42
DEBUG 2022-01-28 15:49:19,956 on stmt: $const168.4 = const(int, 2)
DEBUG 2022-01-28 15:49:19,972 on stmt: $172binary_multiply.6 = $const168.4 * batch__max
DEBUG 2022-01-28 15:49:19,972 on stmt: $176binary_add.8 = $172binary_multiply.6 + odd__cutoff
DEBUG 2022-01-28 15:49:19,972 on stmt: $const178.9 = const(int, 1)
DEBUG 2022-01-28 15:49:19,972 on stmt: $180binary_add.10 = $176binary_add.8 + $const178.9
DEBUG 2022-01-28 15:49:19,972 on stmt: $192load_global.15 = global(find_kept_edges: CPUDispatcher(<function find_kept_edges at 0x0000024107424550>))
DEBUG 2022-01-28 15:49:19,972 on stmt: $np_g_var.209 = global(np: <module 'numpy' from 'C:\\Users\\zl4821\\Anaconda3\\envs\\GBS\\lib\\site-packages\\numpy\\__init__.py'>)
DEBUG 2022-01-28 15:49:19,972 on stmt: $empty_attr_attr.210 = getattr(value=$np_g_var.209, attr=empty)
DEBUG 2022-01-28 15:49:19,972 on stmt: $np_typ_var.211 = getattr(value=$np_g_var.209, attr=complex128)
DEBUG 2022-01-28 15:49:19,972 on stmt: Hnew = call $empty_attr_attr.210($180binary_add.10, $np_typ_var.211, func=$empty_attr_attr.210, args=[Var($180binary_add.10, loop_hafnian_batch.py:41), Var($np_typ_var.211, loop_hafnian_batch.py:41)], kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:19,972 on stmt: binom_prod = const(float, 1.0)
DEBUG 2022-01-28 15:49:19,972 on stmt: $214load_global.23 = global(range: <class 'range'>)
DEBUG 2022-01-28 15:49:19,972 on stmt: $const216.24 = const(int, 1)
DEBUG 2022-01-28 15:49:19,972 on stmt: $const220.26 = const(int, 2)
DEBUG 2022-01-28 15:49:19,972 on stmt: $222binary_floor_divide.27 = n // $const220.26
DEBUG 2022-01-28 15:49:19,972 on stmt: msg.191 = const(str, Sizes of H_batch.2, Hnew do not match on C:\Users\zl4821\PycharmProjects\GBS\gbs\loop_hafnian_batch.py (75))
DEBUG 2022-01-28 15:49:19,972 on stmt: assert.192 = global(assert_equiv: <intrinsic assert_equiv>)
DEBUG 2022-01-28 15:49:19,972 on stmt: bool260 = global(bool: <class 'bool'>)
DEBUG 2022-01-28 15:49:19,972 on stmt: msg.170 = const(str, Sizes of kept_edges, edge_reps do not match on C:\Users\zl4821\PycharmProjects\GBS\gbs\loop_hafnian_batch.py (51))
DEBUG 2022-01-28 15:49:19,972 on stmt: assert.171 = global(assert_equiv: <intrinsic assert_equiv>)
DEBUG 2022-01-28 15:49:19,972 on stmt: $np_g_var.214 = global(np: <module 'numpy' from 'C:\\Users\\zl4821\\Anaconda3\\envs\\GBS\\lib\\site-packages\\numpy\\__init__.py'>)
DEBUG 2022-01-28 15:49:19,972 on stmt: $empty_attr_attr.215 = getattr(value=$np_g_var.214, attr=empty)
DEBUG 2022-01-28 15:49:19,972 on stmt: $np_typ_var.216 = getattr(value=$np_g_var.214, attr=int64)
DEBUG 2022-01-28 15:49:19,972 on stmt: delta = call $empty_attr_attr.215(edge__reps__size0_160, $np_typ_var.216, func=$empty_attr_attr.215, args=[Var(edge__reps__size0_160, loop_hafnian_batch.py:32), Var($np_typ_var.216, loop_hafnian_batch.py:51)], kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:19,972 on stmt: jump 40
DEBUG 2022-01-28 15:49:19,972 ==== SSA block rewrite pass on 40
DEBUG 2022-01-28 15:49:19,972 Running <numba.core.ssa._FixSSAVars object at 0x000002410CC72D00>
DEBUG 2022-01-28 15:49:19,972 on stmt: H__batch_2.2 = phi(incoming_values=[Var(H__batch_2, <string>:2), Var(H__batch_2.1, loop_hafnian_batch.py:75)], incoming_blocks=[0, 782])
DEBUG 2022-01-28 15:49:19,972 on stmt: $40for_iter.1.850 = iternext(value=$phi40.0.849)
DEBUG 2022-01-28 15:49:19,972 on stmt: $40for_iter.2.851 = pair_first(value=$40for_iter.1.850)
DEBUG 2022-01-28 15:49:19,972 on stmt: $40for_iter.3.852 = pair_second(value=$40for_iter.1.850)
DEBUG 2022-01-28 15:49:19,972 on stmt: $phi42.1.853 = $40for_iter.2.851
DEBUG 2022-01-28 15:49:19,972 on stmt: branch $40for_iter.3.852, 42, 889
DEBUG 2022-01-28 15:49:19,972 ==== SSA block rewrite pass on 42
DEBUG 2022-01-28 15:49:19,972 Running <numba.core.ssa._FixSSAVars object at 0x000002410CC72D00>
DEBUG 2022-01-28 15:49:19,972 on stmt: parfor__index_230 = $phi42.1.853
DEBUG 2022-01-28 15:49:19,972 on stmt: jump 50
DEBUG 2022-01-28 15:49:19,972 ==== SSA block rewrite pass on 889
DEBUG 2022-01-28 15:49:19,972 Running <numba.core.ssa._FixSSAVars object at 0x000002410CC72D00>
DEBUG 2022-01-28 15:49:19,972 on stmt: $const52.1.854 = const(NoneType, None)
DEBUG 2022-01-28 15:49:19,972 on stmt: $const54.2.855 = const(NoneType, None)
DEBUG 2022-01-28 15:49:19,972 on stmt: $56build_slice.3.856 = global(slice: <class 'slice'>)
DEBUG 2022-01-28 15:49:19,972 on stmt: $56build_slice.4.857 = call $56build_slice.3.856($const52.1.854, $const54.2.855, func=$56build_slice.3.856, args=(Var($const52.1.854, <string>:5), Var($const54.2.855, <string>:5)), kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:19,972 on stmt: $58binary_subscr.5.858 = getitem(value=H__batch_2.2, index=$56build_slice.4.857, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:19,972 on stmt: $const62.7.859 = const(NoneType, None)
DEBUG 2022-01-28 15:49:19,972 on stmt: $const64.8.860 = const(NoneType, None)
DEBUG 2022-01-28 15:49:19,972 on stmt: $66build_slice.9.861 = global(slice: <class 'slice'>)
DEBUG 2022-01-28 15:49:19,972 on stmt: $66build_slice.10.862 = call $66build_slice.9.861($const62.7.859, $const64.8.860, func=$66build_slice.9.861, args=(Var($const62.7.859, <string>:5), Var($const64.8.860, <string>:5)), kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:19,972 on stmt: H__batch_2__arr[$66build_slice.10.862] = $58binary_subscr.5.858
DEBUG 2022-01-28 15:49:19,972 on stmt: $const70.11.863 = const(NoneType, None)
DEBUG 2022-01-28 15:49:19,972 on stmt: $72return_value.12.864 = cast(value=$const70.11.863)
DEBUG 2022-01-28 15:49:19,972 on stmt: return $72return_value.12.864
DEBUG 2022-01-28 15:49:19,972 ==== SSA block rewrite pass on 686
DEBUG 2022-01-28 15:49:19,972 Running <numba.core.ssa._FixSSAVars object at 0x000002410CC72D00>
DEBUG 2022-01-28 15:49:19,972 on stmt: $450binary_subscr.6 = getitem(value=Hnew, index=$N_det.252, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:19,972 on stmt: $456binary_multiply.9 = n_det_binom_prod * plus_minus
DEBUG 2022-01-28 15:49:19,972 on stmt: $464binary_floor_divide.13 = N // $const462.12
DEBUG 2022-01-28 15:49:19,972 on stmt: $466binary_subscr.14 = getitem(value=f_even, index=$464binary_floor_divide.13, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:19,972 on stmt: $468binary_multiply.15 = $456binary_multiply.9 * $466binary_subscr.14
DEBUG 2022-01-28 15:49:19,972 on stmt: $470inplace_add.16 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$450binary_subscr.6, rhs=$468binary_multiply.15, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-01-28 15:49:19,972 on stmt: Hnew[$N_det.252] = $470inplace_add.16
DEBUG 2022-01-28 15:49:19,972 on stmt: jump 727
DEBUG 2022-01-28 15:49:19,972 ==== SSA block rewrite pass on 725
DEBUG 2022-01-28 15:49:19,972 Running <numba.core.ssa._FixSSAVars object at 0x000002410CC72D00>
DEBUG 2022-01-28 15:49:19,972 on stmt: $484binary_subscr.6 = getitem(value=Hnew, index=$N_det.252, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:19,972 on stmt: $490binary_multiply.9 = n_det_binom_prod * plus_minus
DEBUG 2022-01-28 15:49:19,972 on stmt: $496binary_subscr.12 = getitem(value=f_odd, index=N, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:19,972 on stmt: $498binary_multiply.13 = $490binary_multiply.9 * $496binary_subscr.12
DEBUG 2022-01-28 15:49:19,972 on stmt: $500inplace_add.14 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$484binary_subscr.6, rhs=$498binary_multiply.13, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-01-28 15:49:19,972 on stmt: Hnew[$N_det.252] = $500inplace_add.14
DEBUG 2022-01-28 15:49:19,972 on stmt: jump 727
DEBUG 2022-01-28 15:49:19,972 ==== SSA block rewrite pass on 593
DEBUG 2022-01-28 15:49:19,972 Running <numba.core.ssa._FixSSAVars object at 0x000002410CC72D00>
DEBUG 2022-01-28 15:49:19,972 on stmt: delta.2 = kept_edges
DEBUG 2022-01-28 15:49:19,972 on stmt: jump 631
DEBUG 2022-01-28 15:49:19,972 ==== SSA block rewrite pass on 670
DEBUG 2022-01-28 15:49:19,972 Running <numba.core.ssa._FixSSAVars object at 0x000002410CC72D00>
DEBUG 2022-01-28 15:49:19,972 on stmt: N = N__fixed + $N_det.252
DEBUG 2022-01-28 15:49:19,972 on stmt: $396binary_floor_divide.9 = N // $const394.8
DEBUG 2022-01-28 15:49:19,972 on stmt: $400binary_subtract.11 = $396binary_floor_divide.9 - val.10
DEBUG 2022-01-28 15:49:19,972 on stmt: plus_minus = $const390.6 ** $400binary_subtract.11
DEBUG 2022-01-28 15:49:19,972 on stmt: $412binary_floor_divide.16 = $N_det.252 // $const410.15
DEBUG 2022-01-28 15:49:19,972 on stmt: $418binary_subscr.19 = static_getitem(value=kept_edges, index=0, index_var=$const416.18, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:19,972 on stmt: $420build_tuple.20 = build_tuple(items=[Var($412binary_floor_divide.16, loop_hafnian_batch.py:68), Var($418binary_subscr.19, loop_hafnian_batch.py:68)])
DEBUG 2022-01-28 15:49:19,972 on stmt: $422binary_subscr.21 = getitem(value=binoms, index=$420build_tuple.20, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:19,972 on stmt: n_det_binom_prod = $422binary_subscr.21 * binom_prod.2
DEBUG 2022-01-28 15:49:19,972 find_def var='binom_prod.2' stmt=n_det_binom_prod = $422binary_subscr.21 * binom_prod.2
DEBUG 2022-01-28 15:49:19,972 find_def_from_top label 670
DEBUG 2022-01-28 15:49:19,972 idom 668 from label 670
DEBUG 2022-01-28 15:49:19,972 find_def_from_bottom label 668
DEBUG 2022-01-28 15:49:19,972 find_def_from_top label 668
DEBUG 2022-01-28 15:49:19,972 idom 631 from label 668
DEBUG 2022-01-28 15:49:19,972 find_def_from_bottom label 631
DEBUG 2022-01-28 15:49:19,972 find_def_from_top label 631
DEBUG 2022-01-28 15:49:19,972 idom 577 from label 631
DEBUG 2022-01-28 15:49:19,972 find_def_from_bottom label 577
DEBUG 2022-01-28 15:49:19,972 find_def_from_top label 577
DEBUG 2022-01-28 15:49:19,972 idom 495 from label 577
DEBUG 2022-01-28 15:49:19,972 find_def_from_bottom label 495
DEBUG 2022-01-28 15:49:19,972 find_def_from_top label 495
DEBUG 2022-01-28 15:49:19,972 insert phi node binom_prod.2.2 = phi(incoming_values=[], incoming_blocks=[]) at 495
DEBUG 2022-01-28 15:49:19,972 find_def_from_bottom label 50
DEBUG 2022-01-28 15:49:19,972 incoming_def binom_prod.2.1 = binom_prod
DEBUG 2022-01-28 15:49:19,972 find_def_from_bottom label 571
DEBUG 2022-01-28 15:49:19,972 incoming_def binom_prod.2 = $binom_prod.2.600
DEBUG 2022-01-28 15:49:19,972 replaced with: n_det_binom_prod = $422binary_subscr.21 * binom_prod.2.2
DEBUG 2022-01-28 15:49:19,972 on stmt: $434binary_modulo.26 = $N_det.252 % $const432.25
DEBUG 2022-01-28 15:49:19,972 on stmt: $438compare_op.28 = $434binary_modulo.26 == $const436.27
DEBUG 2022-01-28 15:49:19,972 on stmt: $440pred = call bool440($438compare_op.28, func=bool440, args=(Var($438compare_op.28, loop_hafnian_batch.py:70),), kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:19,972 on stmt: branch $440pred, 686, 725
DEBUG 2022-01-28 15:49:19,972 ==== SSA block rewrite pass on 631
DEBUG 2022-01-28 15:49:19,972 Running <numba.core.ssa._FixSSAVars object at 0x000002410CC72D00>
DEBUG 2022-01-28 15:49:19,972 on stmt: delta.2.2 = phi(incoming_values=[Var(delta.2, loop_hafnian_batch.py:55), Var(delta.2.1, loop_hafnian_batch.py:51)], incoming_blocks=[593, 591])
DEBUG 2022-01-28 15:49:19,972 on stmt: $292call_function.6 = call $282load_global.1(delta.2.2, A, D, oddV, func=$282load_global.1, args=[Var(delta.2.2, loop_hafnian_batch.py:55), Var(A, loop_hafnian_batch.py:24), Var(D, loop_hafnian_batch.py:24), Var(oddV, loop_hafnian_batch.py:25)], kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:19,972 on stmt: $294unpack_sequence.11 = exhaust_iter(value=$292call_function.6, count=4)
DEBUG 2022-01-28 15:49:19,972 on stmt: $AX_S.250 = static_getitem(value=$294unpack_sequence.11, index=0, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:19,972 on stmt: $XD_S.249 = static_getitem(value=$294unpack_sequence.11, index=1, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:19,972 on stmt: $D_S.251 = static_getitem(value=$294unpack_sequence.11, index=2, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:19,972 on stmt: $oddVX_S.248 = static_getitem(value=$294unpack_sequence.11, index=3, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:19,972 on stmt: E = call $304load_global.12($AX_S.250, func=$304load_global.12, args=[Var($AX_S.250, loop_hafnian_batch.py:55)], kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:19,972 on stmt: f_even = call $312load_global.15(E, $AX_S.250, $XD_S.249, $D_S.251, N__max, func=$312load_global.15, args=[Var(E, loop_hafnian_batch.py:57), Var($AX_S.250, loop_hafnian_batch.py:55), Var($XD_S.249, loop_hafnian_batch.py:55), Var($D_S.251, loop_hafnian_batch.py:55), Var(N__max, loop_hafnian_batch.py:30)], kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:19,972 on stmt: f_odd = call $328load_global.22(E, $AX_S.250, $XD_S.249, $D_S.251, N__max, oddloop, $oddVX_S.248, func=$328load_global.22, args=[Var(E, loop_hafnian_batch.py:57), Var($AX_S.250, loop_hafnian_batch.py:55), Var($XD_S.249, loop_hafnian_batch.py:55), Var($D_S.251, loop_hafnian_batch.py:55), Var(N__max, loop_hafnian_batch.py:30), Var(oddloop, loop_hafnian_batch.py:24), Var($oddVX_S.248, loop_hafnian_batch.py:55)], kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:19,972 on stmt: $356binary_subscr.35 = static_getitem(value=kept_edges, index=0, index_var=$const354.34, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:19,972 on stmt: $358binary_multiply.36 = $const350.32 * $356binary_subscr.35
DEBUG 2022-01-28 15:49:19,972 on stmt: $374call_function.44 = call $348load_global.31($358binary_multiply.36, $372binary_add.43, func=$348load_global.31, args=[Var($358binary_multiply.36, loop_hafnian_batch.py:64), Var($372binary_add.43, loop_hafnian_batch.py:64)], kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:19,972 on stmt: $376get_iter.45 = getiter(value=$374call_function.44)
DEBUG 2022-01-28 15:49:19,972 on stmt: jump 668
DEBUG 2022-01-28 15:49:19,972 ==== SSA block rewrite pass on 495
DEBUG 2022-01-28 15:49:19,972 Running <numba.core.ssa._FixSSAVars object at 0x000002410CC72D00>
DEBUG 2022-01-28 15:49:19,972 on stmt: $228for_iter.2 = iternext(value=$226get_iter.29)
DEBUG 2022-01-28 15:49:19,972 on stmt: $i.253 = pair_first(value=$228for_iter.2)
DEBUG 2022-01-28 15:49:19,972 on stmt: $228for_iter.4 = pair_second(value=$228for_iter.2)
DEBUG 2022-01-28 15:49:19,972 on stmt: branch $228for_iter.4, 571, 577
DEBUG 2022-01-28 15:49:19,972 ==== SSA block rewrite pass on 668
DEBUG 2022-01-28 15:49:19,972 Running <numba.core.ssa._FixSSAVars object at 0x000002410CC72D00>
DEBUG 2022-01-28 15:49:19,972 on stmt: $378for_iter.2 = iternext(value=$376get_iter.45)
DEBUG 2022-01-28 15:49:19,972 on stmt: $N_det.252 = pair_first(value=$378for_iter.2)
DEBUG 2022-01-28 15:49:19,972 on stmt: $378for_iter.4 = pair_second(value=$378for_iter.2)
DEBUG 2022-01-28 15:49:19,972 on stmt: branch $378for_iter.4, 670, 743
DEBUG 2022-01-28 15:49:19,972 ==== SSA block rewrite pass on 571
DEBUG 2022-01-28 15:49:19,972 Running <numba.core.ssa._FixSSAVars object at 0x000002410CC72D00>
DEBUG 2022-01-28 15:49:19,972 on stmt: $240binary_subscr.7 = getitem(value=edge__reps, index=$i.253, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:19,972 on stmt: $246binary_subscr.10 = getitem(value=kept_edges, index=$i.253, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:19,972 on stmt: $248build_tuple.11 = build_tuple(items=[Var($240binary_subscr.7, loop_hafnian_batch.py:48), Var($246binary_subscr.10, loop_hafnian_batch.py:48)])
DEBUG 2022-01-28 15:49:19,972 on stmt: $250binary_subscr.12 = getitem(value=binoms, index=$248build_tuple.11, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:19,972 on stmt: $binom_prod.2.600 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=binom_prod.2, rhs=$250binary_subscr.12, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-01-28 15:49:19,972 find_def var='binom_prod.2' stmt=$binom_prod.2.600 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=binom_prod.2, rhs=$250binary_subscr.12, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-01-28 15:49:19,972 find_def_from_top label 571
DEBUG 2022-01-28 15:49:19,972 idom 495 from label 571
DEBUG 2022-01-28 15:49:19,972 find_def_from_bottom label 495
DEBUG 2022-01-28 15:49:19,972 replaced with: $binom_prod.2.600 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=binom_prod.2.2, rhs=$250binary_subscr.12, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-01-28 15:49:19,972 on stmt: binom_prod.2 = $binom_prod.2.600
DEBUG 2022-01-28 15:49:19,972 on stmt: jump 495
DEBUG 2022-01-28 15:49:19,972 ==== SSA block rewrite pass on 727
DEBUG 2022-01-28 15:49:19,972 Running <numba.core.ssa._FixSSAVars object at 0x000002410CC72D00>
DEBUG 2022-01-28 15:49:19,972 on stmt: jump 668
DEBUG 2022-01-28 15:49:19,972 ==== SSA block rewrite pass on 50
DEBUG 2022-01-28 15:49:19,972 Running <numba.core.ssa._FixSSAVars object at 0x000002410CC72D00>
DEBUG 2022-01-28 15:49:19,972 on stmt: j = parfor__index_230
DEBUG 2022-01-28 15:49:19,972 on stmt: id=2[LoopNest(index_variable = parfor_index.208, range = (0, $180binary_add.10, 1))]{887: <ir.Block at C:\Users\zl4821\PycharmProjects\GBS\gbs\loop_hafnian_batch.py (41)>}Var(parfor_index.208, loop_hafnian_batch.py:41)
DEBUG 2022-01-28 15:49:19,972 on stmt: kept_edges = call $192load_global.15(j, edge__reps, func=$192load_global.15, args=[Var(j, loop_hafnian_batch.py:39), Var(edge__reps, loop_hafnian_batch.py:32)], kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:19,972 on stmt: kept_edges_shape.167 = getattr(value=kept_edges, attr=shape)
DEBUG 2022-01-28 15:49:19,987 on stmt: kept_edges_size0.168 = static_getitem(value=kept_edges_shape.167, index=0, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:19,987 on stmt: binom_prod.2.1 = binom_prod
DEBUG 2022-01-28 15:49:19,987 on stmt: id=6[LoopNest(index_variable = parfor_index.226, range = (0, kept_edges_size0.168, 1))]{557: <ir.Block at C:\Users\zl4821\Anaconda3\envs\GBS\lib\site-packages\numba\parfors\parfor.py (256)>}Var(parfor_index.226, parfor.py:256)
DEBUG 2022-01-28 15:49:19,987 on stmt: $224call_function.28 = call $214load_global.23($const216.24, $222binary_floor_divide.27, func=$214load_global.23, args=[Var($const216.24, loop_hafnian_batch.py:47), Var($222binary_floor_divide.27, loop_hafnian_batch.py:47)], kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:19,987 on stmt: $226get_iter.29 = getiter(value=$224call_function.28)
DEBUG 2022-01-28 15:49:19,987 on stmt: jump 495
DEBUG 2022-01-28 15:49:19,987 ==== SSA block rewrite pass on 743
DEBUG 2022-01-28 15:49:19,987 Running <numba.core.ssa._FixSSAVars object at 0x000002410CC72D00>
DEBUG 2022-01-28 15:49:19,987 on stmt: ret.193 = call assert.192(msg.191, _136binary__add_59, $180binary_add.10, func=assert.192, args=[Var(msg.191, loop_hafnian_batch.py:75), Var(_136binary__add_59, loop_hafnian_batch.py:38), Var($180binary_add.10, loop_hafnian_batch.py:41)], kws={}, vararg=None, target=None)
DEBUG 2022-01-28 15:49:19,987 on stmt: $H_batch.2.602 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=H__batch_2.2, rhs=Hnew, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-01-28 15:49:19,987 on stmt: H__batch_2.1 = $H_batch.2.602
DEBUG 2022-01-28 15:49:19,987 on stmt: jump 782
DEBUG 2022-01-28 15:49:19,987 ==== SSA block rewrite pass on 577
DEBUG 2022-01-28 15:49:19,987 Running <numba.core.ssa._FixSSAVars object at 0x000002410CC72D00>
DEBUG 2022-01-28 15:49:19,987 on stmt: $260pred = call bool260(glynn, func=bool260, args=(Var(glynn, loop_hafnian_batch.py:24),), kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:19,987 on stmt: branch $260pred, 591, 593
DEBUG 2022-01-28 15:49:19,987 ==== SSA block rewrite pass on 591
DEBUG 2022-01-28 15:49:19,987 Running <numba.core.ssa._FixSSAVars object at 0x000002410CC72D00>
DEBUG 2022-01-28 15:49:19,987 on stmt: ret.172 = call assert.171(msg.170, kept_edges_size0.168, edge__reps__size0_160, func=assert.171, args=[Var(msg.170, loop_hafnian_batch.py:51), Var(kept_edges_size0.168, loop_hafnian_batch.py:43), Var(edge__reps__size0_160, loop_hafnian_batch.py:32)], kws={}, vararg=None, target=None)
DEBUG 2022-01-28 15:49:19,987 on stmt: id=3[LoopNest(index_variable = parfor_index.213, range = (0, edge__reps__size0_160, 1))]{888: <ir.Block at C:\Users\zl4821\PycharmProjects\GBS\gbs\loop_hafnian_batch.py (51)>}Var(parfor_index.213, loop_hafnian_batch.py:51)
DEBUG 2022-01-28 15:49:19,987 on stmt: delta.2.1 = delta
DEBUG 2022-01-28 15:49:19,987 on stmt: jump 631
DEBUG 2022-01-28 15:49:19,987 ==== SSA block rewrite pass on 782
DEBUG 2022-01-28 15:49:19,987 Running <numba.core.ssa._FixSSAVars object at 0x000002410CC72D00>
DEBUG 2022-01-28 15:49:19,987 on stmt: jump 40
DEBUG 2022-01-28 15:49:19,987 bytecode dump:
>          0	NOP(arg=None, lineno=3)
           2	LOAD_GLOBAL(arg=0, lineno=3)
           4	LOAD_FAST(arg=0, lineno=3)
           6	CALL_FUNCTION(arg=1, lineno=3)
           8	RETURN_VALUE(arg=None, lineno=3)
DEBUG 2022-01-28 15:49:19,987 pending: deque([State(pc_initial=0 nstack_initial=0)])
DEBUG 2022-01-28 15:49:19,987 stack: []
DEBUG 2022-01-28 15:49:19,987 dispatch pc=0, inst=NOP(arg=None, lineno=3)
DEBUG 2022-01-28 15:49:19,987 stack []
DEBUG 2022-01-28 15:49:19,987 dispatch pc=2, inst=LOAD_GLOBAL(arg=0, lineno=3)
DEBUG 2022-01-28 15:49:19,987 stack []
DEBUG 2022-01-28 15:49:19,987 dispatch pc=4, inst=LOAD_FAST(arg=0, lineno=3)
DEBUG 2022-01-28 15:49:19,987 stack ['$2load_global.0']
DEBUG 2022-01-28 15:49:19,987 dispatch pc=6, inst=CALL_FUNCTION(arg=1, lineno=3)
DEBUG 2022-01-28 15:49:19,987 stack ['$2load_global.0', '$tmp04.1']
DEBUG 2022-01-28 15:49:19,987 dispatch pc=8, inst=RETURN_VALUE(arg=None, lineno=3)
DEBUG 2022-01-28 15:49:19,987 stack ['$6call_function.2']
DEBUG 2022-01-28 15:49:19,987 end state. edges=[]
DEBUG 2022-01-28 15:49:19,987 -------------------------Prune PHIs-------------------------
DEBUG 2022-01-28 15:49:19,987 Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
DEBUG 2022-01-28 15:49:19,987 defmap: {}
DEBUG 2022-01-28 15:49:19,987 phismap: defaultdict(<class 'set'>, {})
DEBUG 2022-01-28 15:49:19,987 changing phismap: defaultdict(<class 'set'>, {})
DEBUG 2022-01-28 15:49:19,987 keep phismap: {}
DEBUG 2022-01-28 15:49:19,987 new_out: defaultdict(<class 'dict'>, {})
DEBUG 2022-01-28 15:49:19,987 ----------------------DONE Prune PHIs-----------------------
DEBUG 2022-01-28 15:49:19,987 block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$2load_global.0'}), (4, {'res': '$tmp04.1'}), (6, {'func': '$2load_global.0', 'args': ['$tmp04.1'], 'res': '$6call_function.2'}), (8, {'retval': '$6call_function.2', 'castval': '$8return_value.3'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG 2022-01-28 15:49:19,987 label 0:
    tmp0 = arg(0, name=tmp0)                 ['tmp0']
    $2load_global.0 = global(intrin: <intrinsic stub>) ['$2load_global.0']
    $6call_function.2 = call $2load_global.0(tmp0, func=$2load_global.0, args=[Var(tmp0, <string>:3)], kws=(), vararg=None, target=None) ['$2load_global.0', '$6call_function.2', 'tmp0']
    $8return_value.3 = cast(value=$6call_function.2) ['$6call_function.2', '$8return_value.3']
    return $8return_value.3                  ['$8return_value.3']

DEBUG 2022-01-28 15:49:20,003 ==== SSA block analysis pass on 0
DEBUG 2022-01-28 15:49:20,003 Running <numba.core.ssa._GatherDefsHandler object at 0x000002410CCD6610>
DEBUG 2022-01-28 15:49:20,003 on stmt: tmp0 = arg(0, name=tmp0)
DEBUG 2022-01-28 15:49:20,003 on stmt: $2load_global.0 = global(intrin: <intrinsic stub>)
DEBUG 2022-01-28 15:49:20,003 on stmt: $6call_function.2 = call $2load_global.0(tmp0, func=$2load_global.0, args=[Var(tmp0, <string>:3)], kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:20,003 on stmt: $8return_value.3 = cast(value=$6call_function.2)
DEBUG 2022-01-28 15:49:20,003 on stmt: return $8return_value.3
DEBUG 2022-01-28 15:49:20,003 defs defaultdict(<class 'list'>,
            {'$2load_global.0': [<numba.core.ir.Assign object at 0x000002410CCD6340>],
             '$6call_function.2': [<numba.core.ir.Assign object at 0x000002410CCD6EE0>],
             '$8return_value.3': [<numba.core.ir.Assign object at 0x000002410CCD7040>],
             'tmp0': [<numba.core.ir.Assign object at 0x000002410CCD61C0>]})
DEBUG 2022-01-28 15:49:20,003 SSA violators set()
DEBUG 2022-01-28 15:49:20,003 bytecode dump:
>          0	NOP(arg=None, lineno=3543)
           2	LOAD_FAST(arg=0, lineno=3543)
           4	LOAD_METHOD(arg=0, lineno=3543)
           6	LOAD_FAST(arg=1, lineno=3543)
           8	LOAD_FAST(arg=2, lineno=3543)
          10	CALL_METHOD(arg=2, lineno=3543)
          12	RETURN_VALUE(arg=None, lineno=3543)
DEBUG 2022-01-28 15:49:20,003 pending: deque([State(pc_initial=0 nstack_initial=0)])
DEBUG 2022-01-28 15:49:20,003 stack: []
DEBUG 2022-01-28 15:49:20,003 dispatch pc=0, inst=NOP(arg=None, lineno=3543)
DEBUG 2022-01-28 15:49:20,003 stack []
DEBUG 2022-01-28 15:49:20,003 dispatch pc=2, inst=LOAD_FAST(arg=0, lineno=3543)
DEBUG 2022-01-28 15:49:20,003 stack []
DEBUG 2022-01-28 15:49:20,003 dispatch pc=4, inst=LOAD_METHOD(arg=0, lineno=3543)
DEBUG 2022-01-28 15:49:20,003 stack ['$arrtype2.0']
DEBUG 2022-01-28 15:49:20,003 dispatch pc=6, inst=LOAD_FAST(arg=1, lineno=3543)
DEBUG 2022-01-28 15:49:20,003 stack ['$4load_method.1']
DEBUG 2022-01-28 15:49:20,003 dispatch pc=8, inst=LOAD_FAST(arg=2, lineno=3543)
DEBUG 2022-01-28 15:49:20,003 stack ['$4load_method.1', '$size6.2']
DEBUG 2022-01-28 15:49:20,003 dispatch pc=10, inst=CALL_METHOD(arg=2, lineno=3543)
DEBUG 2022-01-28 15:49:20,003 stack ['$4load_method.1', '$size6.2', '$align8.3']
DEBUG 2022-01-28 15:49:20,003 dispatch pc=12, inst=RETURN_VALUE(arg=None, lineno=3543)
DEBUG 2022-01-28 15:49:20,003 stack ['$10call_method.4']
DEBUG 2022-01-28 15:49:20,003 end state. edges=[]
DEBUG 2022-01-28 15:49:20,003 -------------------------Prune PHIs-------------------------
DEBUG 2022-01-28 15:49:20,003 Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
DEBUG 2022-01-28 15:49:20,003 defmap: {}
DEBUG 2022-01-28 15:49:20,003 phismap: defaultdict(<class 'set'>, {})
DEBUG 2022-01-28 15:49:20,003 changing phismap: defaultdict(<class 'set'>, {})
DEBUG 2022-01-28 15:49:20,003 keep phismap: {}
DEBUG 2022-01-28 15:49:20,003 new_out: defaultdict(<class 'dict'>, {})
DEBUG 2022-01-28 15:49:20,003 ----------------------DONE Prune PHIs-----------------------
DEBUG 2022-01-28 15:49:20,003 block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$arrtype2.0'}), (4, {'item': '$arrtype2.0', 'res': '$4load_method.1'}), (6, {'res': '$size6.2'}), (8, {'res': '$align8.3'}), (10, {'func': '$4load_method.1', 'args': ['$size6.2', '$align8.3'], 'res': '$10call_method.4'}), (12, {'retval': '$10call_method.4', 'castval': '$12return_value.5'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG 2022-01-28 15:49:20,003 label 0:
    arrtype = arg(0, name=arrtype)           ['arrtype']
    size = arg(1, name=size)                 ['size']
    align = arg(2, name=align)               ['align']
    $4load_method.1 = getattr(value=arrtype, attr=_allocate) ['$4load_method.1', 'arrtype']
    $10call_method.4 = call $4load_method.1(size, align, func=$4load_method.1, args=[Var(size, arrayobj.py:3543), Var(align, arrayobj.py:3543)], kws=(), vararg=None, target=None) ['$10call_method.4', '$4load_method.1', 'align', 'size']
    $12return_value.5 = cast(value=$10call_method.4) ['$10call_method.4', '$12return_value.5']
    return $12return_value.5                 ['$12return_value.5']

DEBUG 2022-01-28 15:49:20,003 ==== SSA block analysis pass on 0
DEBUG 2022-01-28 15:49:20,003 Running <numba.core.ssa._GatherDefsHandler object at 0x000002410CCF1D00>
DEBUG 2022-01-28 15:49:20,003 on stmt: arrtype = arg(0, name=arrtype)
DEBUG 2022-01-28 15:49:20,003 on stmt: size = arg(1, name=size)
DEBUG 2022-01-28 15:49:20,003 on stmt: align = arg(2, name=align)
DEBUG 2022-01-28 15:49:20,003 on stmt: $4load_method.1 = getattr(value=arrtype, attr=_allocate)
DEBUG 2022-01-28 15:49:20,003 on stmt: $10call_method.4 = call $4load_method.1(size, align, func=$4load_method.1, args=[Var(size, arrayobj.py:3543), Var(align, arrayobj.py:3543)], kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:20,003 on stmt: $12return_value.5 = cast(value=$10call_method.4)
DEBUG 2022-01-28 15:49:20,003 on stmt: return $12return_value.5
DEBUG 2022-01-28 15:49:20,003 defs defaultdict(<class 'list'>,
            {'$10call_method.4': [<numba.core.ir.Assign object at 0x000002410CCF1790>],
             '$12return_value.5': [<numba.core.ir.Assign object at 0x000002410CCF1880>],
             '$4load_method.1': [<numba.core.ir.Assign object at 0x000002410CCF1340>],
             'align': [<numba.core.ir.Assign object at 0x000002410CCF10A0>],
             'arrtype': [<numba.core.ir.Assign object at 0x000002410CCEA550>],
             'size': [<numba.core.ir.Assign object at 0x000002410CCEA730>]})
DEBUG 2022-01-28 15:49:20,003 SSA violators set()
DEBUG 2022-01-28 15:49:20,088 bytecode dump:
>          0	NOP(arg=None, lineno=3)
           2	LOAD_GLOBAL(arg=0, lineno=3)
           4	LOAD_FAST(arg=0, lineno=3)
           6	LOAD_FAST(arg=1, lineno=3)
           8	CALL_FUNCTION(arg=2, lineno=3)
          10	RETURN_VALUE(arg=None, lineno=3)
DEBUG 2022-01-28 15:49:20,088 pending: deque([State(pc_initial=0 nstack_initial=0)])
DEBUG 2022-01-28 15:49:20,088 stack: []
DEBUG 2022-01-28 15:49:20,088 dispatch pc=0, inst=NOP(arg=None, lineno=3)
DEBUG 2022-01-28 15:49:20,088 stack []
DEBUG 2022-01-28 15:49:20,088 dispatch pc=2, inst=LOAD_GLOBAL(arg=0, lineno=3)
DEBUG 2022-01-28 15:49:20,088 stack []
DEBUG 2022-01-28 15:49:20,088 dispatch pc=4, inst=LOAD_FAST(arg=0, lineno=3)
DEBUG 2022-01-28 15:49:20,088 stack ['$2load_global.0']
DEBUG 2022-01-28 15:49:20,088 dispatch pc=6, inst=LOAD_FAST(arg=1, lineno=3)
DEBUG 2022-01-28 15:49:20,088 stack ['$2load_global.0', '$tmp04.1']
DEBUG 2022-01-28 15:49:20,088 dispatch pc=8, inst=CALL_FUNCTION(arg=2, lineno=3)
DEBUG 2022-01-28 15:49:20,088 stack ['$2load_global.0', '$tmp04.1', '$tmp16.2']
DEBUG 2022-01-28 15:49:20,088 dispatch pc=10, inst=RETURN_VALUE(arg=None, lineno=3)
DEBUG 2022-01-28 15:49:20,088 stack ['$8call_function.3']
DEBUG 2022-01-28 15:49:20,088 end state. edges=[]
DEBUG 2022-01-28 15:49:20,088 -------------------------Prune PHIs-------------------------
DEBUG 2022-01-28 15:49:20,088 Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
DEBUG 2022-01-28 15:49:20,088 defmap: {}
DEBUG 2022-01-28 15:49:20,088 phismap: defaultdict(<class 'set'>, {})
DEBUG 2022-01-28 15:49:20,088 changing phismap: defaultdict(<class 'set'>, {})
DEBUG 2022-01-28 15:49:20,088 keep phismap: {}
DEBUG 2022-01-28 15:49:20,088 new_out: defaultdict(<class 'dict'>, {})
DEBUG 2022-01-28 15:49:20,088 ----------------------DONE Prune PHIs-----------------------
DEBUG 2022-01-28 15:49:20,088 block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$2load_global.0'}), (4, {'res': '$tmp04.1'}), (6, {'res': '$tmp16.2'}), (8, {'func': '$2load_global.0', 'args': ['$tmp04.1', '$tmp16.2'], 'res': '$8call_function.3'}), (10, {'retval': '$8call_function.3', 'castval': '$10return_value.4'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG 2022-01-28 15:49:20,088 label 0:
    tmp0 = arg(0, name=tmp0)                 ['tmp0']
    tmp1 = arg(1, name=tmp1)                 ['tmp1']
    $2load_global.0 = global(intrin: <intrinsic stub>) ['$2load_global.0']
    $8call_function.3 = call $2load_global.0(tmp0, tmp1, func=$2load_global.0, args=[Var(tmp0, <string>:3), Var(tmp1, <string>:3)], kws=(), vararg=None, target=None) ['$2load_global.0', '$8call_function.3', 'tmp0', 'tmp1']
    $10return_value.4 = cast(value=$8call_function.3) ['$10return_value.4', '$8call_function.3']
    return $10return_value.4                 ['$10return_value.4']

DEBUG 2022-01-28 15:49:20,088 ==== SSA block analysis pass on 0
DEBUG 2022-01-28 15:49:20,088 Running <numba.core.ssa._GatherDefsHandler object at 0x000002410CD34970>
DEBUG 2022-01-28 15:49:20,088 on stmt: tmp0 = arg(0, name=tmp0)
DEBUG 2022-01-28 15:49:20,088 on stmt: tmp1 = arg(1, name=tmp1)
DEBUG 2022-01-28 15:49:20,088 on stmt: $2load_global.0 = global(intrin: <intrinsic stub>)
DEBUG 2022-01-28 15:49:20,088 on stmt: $8call_function.3 = call $2load_global.0(tmp0, tmp1, func=$2load_global.0, args=[Var(tmp0, <string>:3), Var(tmp1, <string>:3)], kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:20,088 on stmt: $10return_value.4 = cast(value=$8call_function.3)
DEBUG 2022-01-28 15:49:20,088 on stmt: return $10return_value.4
DEBUG 2022-01-28 15:49:20,088 defs defaultdict(<class 'list'>,
            {'$10return_value.4': [<numba.core.ir.Assign object at 0x000002410CD3EBB0>],
             '$2load_global.0': [<numba.core.ir.Assign object at 0x000002410CD3E670>],
             '$8call_function.3': [<numba.core.ir.Assign object at 0x000002410CD3EA90>],
             'tmp0': [<numba.core.ir.Assign object at 0x000002410CD3E1F0>],
             'tmp1': [<numba.core.ir.Assign object at 0x000002410CD3E070>]})
DEBUG 2022-01-28 15:49:20,088 SSA violators set()
DEBUG 2022-01-28 15:49:20,141 bytecode dump:
>          0	NOP(arg=None, lineno=3)
           2	LOAD_GLOBAL(arg=0, lineno=3)
           4	LOAD_FAST(arg=0, lineno=3)
           6	LOAD_FAST(arg=1, lineno=3)
           8	CALL_FUNCTION(arg=2, lineno=3)
          10	RETURN_VALUE(arg=None, lineno=3)
DEBUG 2022-01-28 15:49:20,141 pending: deque([State(pc_initial=0 nstack_initial=0)])
DEBUG 2022-01-28 15:49:20,141 stack: []
DEBUG 2022-01-28 15:49:20,141 dispatch pc=0, inst=NOP(arg=None, lineno=3)
DEBUG 2022-01-28 15:49:20,141 stack []
DEBUG 2022-01-28 15:49:20,141 dispatch pc=2, inst=LOAD_GLOBAL(arg=0, lineno=3)
DEBUG 2022-01-28 15:49:20,141 stack []
DEBUG 2022-01-28 15:49:20,141 dispatch pc=4, inst=LOAD_FAST(arg=0, lineno=3)
DEBUG 2022-01-28 15:49:20,141 stack ['$2load_global.0']
DEBUG 2022-01-28 15:49:20,141 dispatch pc=6, inst=LOAD_FAST(arg=1, lineno=3)
DEBUG 2022-01-28 15:49:20,141 stack ['$2load_global.0', '$tmp04.1']
DEBUG 2022-01-28 15:49:20,141 dispatch pc=8, inst=CALL_FUNCTION(arg=2, lineno=3)
DEBUG 2022-01-28 15:49:20,141 stack ['$2load_global.0', '$tmp04.1', '$tmp16.2']
DEBUG 2022-01-28 15:49:20,141 dispatch pc=10, inst=RETURN_VALUE(arg=None, lineno=3)
DEBUG 2022-01-28 15:49:20,141 stack ['$8call_function.3']
DEBUG 2022-01-28 15:49:20,141 end state. edges=[]
DEBUG 2022-01-28 15:49:20,141 -------------------------Prune PHIs-------------------------
DEBUG 2022-01-28 15:49:20,141 Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
DEBUG 2022-01-28 15:49:20,141 defmap: {}
DEBUG 2022-01-28 15:49:20,141 phismap: defaultdict(<class 'set'>, {})
DEBUG 2022-01-28 15:49:20,141 changing phismap: defaultdict(<class 'set'>, {})
DEBUG 2022-01-28 15:49:20,141 keep phismap: {}
DEBUG 2022-01-28 15:49:20,141 new_out: defaultdict(<class 'dict'>, {})
DEBUG 2022-01-28 15:49:20,141 ----------------------DONE Prune PHIs-----------------------
DEBUG 2022-01-28 15:49:20,141 block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$2load_global.0'}), (4, {'res': '$tmp04.1'}), (6, {'res': '$tmp16.2'}), (8, {'func': '$2load_global.0', 'args': ['$tmp04.1', '$tmp16.2'], 'res': '$8call_function.3'}), (10, {'retval': '$8call_function.3', 'castval': '$10return_value.4'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG 2022-01-28 15:49:20,141 label 0:
    tmp0 = arg(0, name=tmp0)                 ['tmp0']
    tmp1 = arg(1, name=tmp1)                 ['tmp1']
    $2load_global.0 = global(intrin: <intrinsic stub>) ['$2load_global.0']
    $8call_function.3 = call $2load_global.0(tmp0, tmp1, func=$2load_global.0, args=[Var(tmp0, <string>:3), Var(tmp1, <string>:3)], kws=(), vararg=None, target=None) ['$2load_global.0', '$8call_function.3', 'tmp0', 'tmp1']
    $10return_value.4 = cast(value=$8call_function.3) ['$10return_value.4', '$8call_function.3']
    return $10return_value.4                 ['$10return_value.4']

DEBUG 2022-01-28 15:49:20,141 ==== SSA block analysis pass on 0
DEBUG 2022-01-28 15:49:20,141 Running <numba.core.ssa._GatherDefsHandler object at 0x000002410CCF51C0>
DEBUG 2022-01-28 15:49:20,141 on stmt: tmp0 = arg(0, name=tmp0)
DEBUG 2022-01-28 15:49:20,141 on stmt: tmp1 = arg(1, name=tmp1)
DEBUG 2022-01-28 15:49:20,141 on stmt: $2load_global.0 = global(intrin: <intrinsic stub>)
DEBUG 2022-01-28 15:49:20,141 on stmt: $8call_function.3 = call $2load_global.0(tmp0, tmp1, func=$2load_global.0, args=[Var(tmp0, <string>:3), Var(tmp1, <string>:3)], kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:20,141 on stmt: $10return_value.4 = cast(value=$8call_function.3)
DEBUG 2022-01-28 15:49:20,141 on stmt: return $10return_value.4
DEBUG 2022-01-28 15:49:20,141 defs defaultdict(<class 'list'>,
            {'$10return_value.4': [<numba.core.ir.Assign object at 0x000002410CD17970>],
             '$2load_global.0': [<numba.core.ir.Assign object at 0x000002410CD17DC0>],
             '$8call_function.3': [<numba.core.ir.Assign object at 0x000002410CD17850>],
             'tmp0': [<numba.core.ir.Assign object at 0x000002410CCF5C10>],
             'tmp1': [<numba.core.ir.Assign object at 0x000002410CCF52B0>]})
DEBUG 2022-01-28 15:49:20,141 SSA violators set()
DEBUG 2022-01-28 15:49:20,708 bytecode dump:
>          0	NOP(arg=None, lineno=217)
           2	LOAD_DEREF(arg=1, lineno=217)
           4	LOAD_CONST(arg=1, lineno=217)
           6	CALL_FUNCTION(arg=1, lineno=217)
           8	STORE_FAST(arg=2, lineno=217)
          10	LOAD_DEREF(arg=1, lineno=218)
          12	LOAD_FAST(arg=0, lineno=218)
          14	CALL_FUNCTION(arg=1, lineno=218)
          16	STORE_FAST(arg=0, lineno=218)
          18	LOAD_FAST(arg=1, lineno=219)
          20	LOAD_CONST(arg=2, lineno=219)
          22	COMPARE_OP(arg=0, lineno=219)
          24	POP_JUMP_IF_FALSE(arg=98, lineno=219)
          26	LOAD_CONST(arg=3, lineno=220)
          28	STORE_FAST(arg=3, lineno=220)
          30	LOAD_FAST(arg=1, lineno=221)
          32	UNARY_NEGATIVE(arg=None, lineno=221)
          34	STORE_FAST(arg=4, lineno=221)
          36	LOAD_FAST(arg=4, lineno=222)
          38	LOAD_CONST(arg=2, lineno=222)
          40	COMPARE_OP(arg=0, lineno=222)
          42	POP_JUMP_IF_FALSE(arg=48, lineno=222)
          44	LOAD_GLOBAL(arg=0, lineno=223)
          46	RAISE_VARARGS(arg=1, lineno=223)
>         48	LOAD_DEREF(arg=0, lineno=224)
          50	POP_JUMP_IF_FALSE(arg=106, lineno=224)
          52	LOAD_FAST(arg=0, lineno=225)
          54	LOAD_CONST(arg=2, lineno=225)
          56	COMPARE_OP(arg=2, lineno=225)
          58	POP_JUMP_IF_FALSE(arg=76, lineno=225)
          60	LOAD_DEREF(arg=2, lineno=226)
          62	POP_JUMP_IF_FALSE(arg=68, lineno=226)
          64	LOAD_DEREF(arg=2, lineno=227)
          66	RETURN_VALUE(arg=None, lineno=227)
>         68	LOAD_GLOBAL(arg=1, lineno=229)
          70	LOAD_CONST(arg=4, lineno=229)
          72	CALL_FUNCTION(arg=1, lineno=229)
          74	RAISE_VARARGS(arg=1, lineno=229)
>         76	LOAD_FAST(arg=0, lineno=230)
          78	LOAD_CONST(arg=1, lineno=230)
          80	COMPARE_OP(arg=3, lineno=230)
          82	POP_JUMP_IF_FALSE(arg=106, lineno=230)
          84	LOAD_FAST(arg=0, lineno=230)
          86	LOAD_CONST(arg=5, lineno=230)
          88	COMPARE_OP(arg=3, lineno=230)
          90	POP_JUMP_IF_FALSE(arg=106, lineno=230)
          92	LOAD_CONST(arg=2, lineno=231)
          94	RETURN_VALUE(arg=None, lineno=231)
          96	JUMP_FORWARD(arg=8, lineno=231)
>         98	LOAD_CONST(arg=6, lineno=233)
         100	STORE_FAST(arg=3, lineno=233)
         102	LOAD_FAST(arg=1, lineno=234)
         104	STORE_FAST(arg=4, lineno=234)
>        106	LOAD_FAST(arg=4, lineno=235)
         108	LOAD_CONST(arg=7, lineno=235)
         110	COMPARE_OP(arg=4, lineno=235)
         112	POP_JUMP_IF_FALSE(arg=130, lineno=235)
         114	LOAD_GLOBAL(arg=2, lineno=237)
         116	LOAD_METHOD(arg=3, lineno=237)
         118	LOAD_FAST(arg=0, lineno=237)
         120	LOAD_GLOBAL(arg=4, lineno=237)
         122	LOAD_FAST(arg=1, lineno=237)
         124	CALL_FUNCTION(arg=1, lineno=237)
         126	CALL_METHOD(arg=2, lineno=237)
         128	RETURN_VALUE(arg=None, lineno=237)
>        130	LOAD_FAST(arg=4, lineno=238)
         132	LOAD_CONST(arg=2, lineno=238)
         134	COMPARE_OP(arg=3, lineno=238)
         136	POP_JUMP_IF_FALSE(arg=172, lineno=238)
         138	LOAD_FAST(arg=4, lineno=239)
         140	LOAD_CONST(arg=1, lineno=239)
         142	BINARY_AND(arg=None, lineno=239)
         144	POP_JUMP_IF_FALSE(arg=154, lineno=239)
         146	LOAD_FAST(arg=2, lineno=240)
         148	LOAD_FAST(arg=0, lineno=240)
         150	INPLACE_MULTIPLY(arg=None, lineno=240)
         152	STORE_FAST(arg=2, lineno=240)
>        154	LOAD_FAST(arg=4, lineno=241)
         156	LOAD_CONST(arg=1, lineno=241)
         158	INPLACE_RSHIFT(arg=None, lineno=241)
         160	STORE_FAST(arg=4, lineno=241)
         162	LOAD_FAST(arg=0, lineno=242)
         164	LOAD_FAST(arg=0, lineno=242)
         166	INPLACE_MULTIPLY(arg=None, lineno=242)
         168	STORE_FAST(arg=0, lineno=242)
         170	JUMP_ABSOLUTE(arg=130, lineno=242)
>        172	LOAD_FAST(arg=3, lineno=244)
         174	POP_JUMP_IF_FALSE(arg=184, lineno=244)
         176	LOAD_CONST(arg=8, lineno=244)
         178	LOAD_FAST(arg=2, lineno=244)
         180	BINARY_TRUE_DIVIDE(arg=None, lineno=244)
         182	RETURN_VALUE(arg=None, lineno=244)
>        184	LOAD_FAST(arg=2, lineno=244)
         186	RETURN_VALUE(arg=None, lineno=244)
DEBUG 2022-01-28 15:49:20,708 pending: deque([State(pc_initial=0 nstack_initial=0)])
DEBUG 2022-01-28 15:49:20,708 stack: []
DEBUG 2022-01-28 15:49:20,708 dispatch pc=0, inst=NOP(arg=None, lineno=217)
DEBUG 2022-01-28 15:49:20,708 stack []
DEBUG 2022-01-28 15:49:20,708 dispatch pc=2, inst=LOAD_DEREF(arg=1, lineno=217)
DEBUG 2022-01-28 15:49:20,708 stack []
DEBUG 2022-01-28 15:49:20,708 dispatch pc=4, inst=LOAD_CONST(arg=1, lineno=217)
DEBUG 2022-01-28 15:49:20,708 stack ['$2load_deref.0']
DEBUG 2022-01-28 15:49:20,708 dispatch pc=6, inst=CALL_FUNCTION(arg=1, lineno=217)
DEBUG 2022-01-28 15:49:20,708 stack ['$2load_deref.0', '$const4.1']
DEBUG 2022-01-28 15:49:20,708 dispatch pc=8, inst=STORE_FAST(arg=2, lineno=217)
DEBUG 2022-01-28 15:49:20,708 stack ['$6call_function.2']
DEBUG 2022-01-28 15:49:20,708 dispatch pc=10, inst=LOAD_DEREF(arg=1, lineno=218)
DEBUG 2022-01-28 15:49:20,708 stack []
DEBUG 2022-01-28 15:49:20,708 dispatch pc=12, inst=LOAD_FAST(arg=0, lineno=218)
DEBUG 2022-01-28 15:49:20,708 stack ['$10load_deref.3']
DEBUG 2022-01-28 15:49:20,708 dispatch pc=14, inst=CALL_FUNCTION(arg=1, lineno=218)
DEBUG 2022-01-28 15:49:20,708 stack ['$10load_deref.3', '$a12.4']
DEBUG 2022-01-28 15:49:20,708 dispatch pc=16, inst=STORE_FAST(arg=0, lineno=218)
DEBUG 2022-01-28 15:49:20,708 stack ['$14call_function.5']
DEBUG 2022-01-28 15:49:20,708 dispatch pc=18, inst=LOAD_FAST(arg=1, lineno=219)
DEBUG 2022-01-28 15:49:20,708 stack []
DEBUG 2022-01-28 15:49:20,708 dispatch pc=20, inst=LOAD_CONST(arg=2, lineno=219)
DEBUG 2022-01-28 15:49:20,708 stack ['$b18.6']
DEBUG 2022-01-28 15:49:20,708 dispatch pc=22, inst=COMPARE_OP(arg=0, lineno=219)
DEBUG 2022-01-28 15:49:20,708 stack ['$b18.6', '$const20.7']
DEBUG 2022-01-28 15:49:20,708 dispatch pc=24, inst=POP_JUMP_IF_FALSE(arg=98, lineno=219)
DEBUG 2022-01-28 15:49:20,708 stack ['$22compare_op.8']
DEBUG 2022-01-28 15:49:20,708 end state. edges=[Edge(pc=26, stack=(), blockstack=(), npush=0), Edge(pc=98, stack=(), blockstack=(), npush=0)]
DEBUG 2022-01-28 15:49:20,708 pending: deque([State(pc_initial=26 nstack_initial=0), State(pc_initial=98 nstack_initial=0)])
DEBUG 2022-01-28 15:49:20,708 stack: []
DEBUG 2022-01-28 15:49:20,708 dispatch pc=26, inst=LOAD_CONST(arg=3, lineno=220)
DEBUG 2022-01-28 15:49:20,708 stack []
DEBUG 2022-01-28 15:49:20,708 dispatch pc=28, inst=STORE_FAST(arg=3, lineno=220)
DEBUG 2022-01-28 15:49:20,708 stack ['$const26.0']
DEBUG 2022-01-28 15:49:20,708 dispatch pc=30, inst=LOAD_FAST(arg=1, lineno=221)
DEBUG 2022-01-28 15:49:20,708 stack []
DEBUG 2022-01-28 15:49:20,708 dispatch pc=32, inst=UNARY_NEGATIVE(arg=None, lineno=221)
DEBUG 2022-01-28 15:49:20,708 stack ['$b30.1']
DEBUG 2022-01-28 15:49:20,708 dispatch pc=34, inst=STORE_FAST(arg=4, lineno=221)
DEBUG 2022-01-28 15:49:20,708 stack ['$32unary_negative.2']
DEBUG 2022-01-28 15:49:20,708 dispatch pc=36, inst=LOAD_FAST(arg=4, lineno=222)
DEBUG 2022-01-28 15:49:20,708 stack []
DEBUG 2022-01-28 15:49:20,708 dispatch pc=38, inst=LOAD_CONST(arg=2, lineno=222)
DEBUG 2022-01-28 15:49:20,708 stack ['$exp36.3']
DEBUG 2022-01-28 15:49:20,708 dispatch pc=40, inst=COMPARE_OP(arg=0, lineno=222)
DEBUG 2022-01-28 15:49:20,708 stack ['$exp36.3', '$const38.4']
DEBUG 2022-01-28 15:49:20,708 dispatch pc=42, inst=POP_JUMP_IF_FALSE(arg=48, lineno=222)
DEBUG 2022-01-28 15:49:20,708 stack ['$40compare_op.5']
DEBUG 2022-01-28 15:49:20,708 end state. edges=[Edge(pc=44, stack=(), blockstack=(), npush=0), Edge(pc=48, stack=(), blockstack=(), npush=0)]
DEBUG 2022-01-28 15:49:20,708 pending: deque([State(pc_initial=98 nstack_initial=0), State(pc_initial=44 nstack_initial=0), State(pc_initial=48 nstack_initial=0)])
DEBUG 2022-01-28 15:49:20,708 stack: []
DEBUG 2022-01-28 15:49:20,708 dispatch pc=98, inst=LOAD_CONST(arg=6, lineno=233)
DEBUG 2022-01-28 15:49:20,708 stack []
DEBUG 2022-01-28 15:49:20,708 dispatch pc=100, inst=STORE_FAST(arg=3, lineno=233)
DEBUG 2022-01-28 15:49:20,708 stack ['$const98.0']
DEBUG 2022-01-28 15:49:20,708 dispatch pc=102, inst=LOAD_FAST(arg=1, lineno=234)
DEBUG 2022-01-28 15:49:20,708 stack []
DEBUG 2022-01-28 15:49:20,708 dispatch pc=104, inst=STORE_FAST(arg=4, lineno=234)
DEBUG 2022-01-28 15:49:20,708 stack ['$b102.1']
DEBUG 2022-01-28 15:49:20,708 end state. edges=[Edge(pc=106, stack=(), blockstack=(), npush=0)]
DEBUG 2022-01-28 15:49:20,708 pending: deque([State(pc_initial=44 nstack_initial=0), State(pc_initial=48 nstack_initial=0), State(pc_initial=106 nstack_initial=0)])
DEBUG 2022-01-28 15:49:20,708 stack: []
DEBUG 2022-01-28 15:49:20,708 dispatch pc=44, inst=LOAD_GLOBAL(arg=0, lineno=223)
DEBUG 2022-01-28 15:49:20,708 stack []
DEBUG 2022-01-28 15:49:20,708 dispatch pc=46, inst=RAISE_VARARGS(arg=1, lineno=223)
DEBUG 2022-01-28 15:49:20,708 stack ['$44load_global.0']
DEBUG 2022-01-28 15:49:20,708 end state. edges=[]
DEBUG 2022-01-28 15:49:20,716 pending: deque([State(pc_initial=48 nstack_initial=0), State(pc_initial=106 nstack_initial=0)])
DEBUG 2022-01-28 15:49:20,716 stack: []
DEBUG 2022-01-28 15:49:20,716 dispatch pc=48, inst=LOAD_DEREF(arg=0, lineno=224)
DEBUG 2022-01-28 15:49:20,716 stack []
DEBUG 2022-01-28 15:49:20,716 dispatch pc=50, inst=POP_JUMP_IF_FALSE(arg=106, lineno=224)
DEBUG 2022-01-28 15:49:20,716 stack ['$48load_deref.0']
DEBUG 2022-01-28 15:49:20,716 end state. edges=[Edge(pc=52, stack=(), blockstack=(), npush=0), Edge(pc=106, stack=(), blockstack=(), npush=0)]
DEBUG 2022-01-28 15:49:20,716 pending: deque([State(pc_initial=106 nstack_initial=0), State(pc_initial=52 nstack_initial=0), State(pc_initial=106 nstack_initial=0)])
DEBUG 2022-01-28 15:49:20,716 stack: []
DEBUG 2022-01-28 15:49:20,716 dispatch pc=106, inst=LOAD_FAST(arg=4, lineno=235)
DEBUG 2022-01-28 15:49:20,716 stack []
DEBUG 2022-01-28 15:49:20,716 dispatch pc=108, inst=LOAD_CONST(arg=7, lineno=235)
DEBUG 2022-01-28 15:49:20,716 stack ['$exp106.0']
DEBUG 2022-01-28 15:49:20,716 dispatch pc=110, inst=COMPARE_OP(arg=4, lineno=235)
DEBUG 2022-01-28 15:49:20,716 stack ['$exp106.0', '$const108.1']
DEBUG 2022-01-28 15:49:20,716 dispatch pc=112, inst=POP_JUMP_IF_FALSE(arg=130, lineno=235)
DEBUG 2022-01-28 15:49:20,716 stack ['$110compare_op.2']
DEBUG 2022-01-28 15:49:20,716 end state. edges=[Edge(pc=114, stack=(), blockstack=(), npush=0), Edge(pc=130, stack=(), blockstack=(), npush=0)]
DEBUG 2022-01-28 15:49:20,716 pending: deque([State(pc_initial=52 nstack_initial=0), State(pc_initial=106 nstack_initial=0), State(pc_initial=114 nstack_initial=0), State(pc_initial=130 nstack_initial=0)])
DEBUG 2022-01-28 15:49:20,716 stack: []
DEBUG 2022-01-28 15:49:20,716 dispatch pc=52, inst=LOAD_FAST(arg=0, lineno=225)
DEBUG 2022-01-28 15:49:20,716 stack []
DEBUG 2022-01-28 15:49:20,718 dispatch pc=54, inst=LOAD_CONST(arg=2, lineno=225)
DEBUG 2022-01-28 15:49:20,718 stack ['$a52.0']
DEBUG 2022-01-28 15:49:20,718 dispatch pc=56, inst=COMPARE_OP(arg=2, lineno=225)
DEBUG 2022-01-28 15:49:20,718 stack ['$a52.0', '$const54.1']
DEBUG 2022-01-28 15:49:20,718 dispatch pc=58, inst=POP_JUMP_IF_FALSE(arg=76, lineno=225)
DEBUG 2022-01-28 15:49:20,718 stack ['$56compare_op.2']
DEBUG 2022-01-28 15:49:20,718 end state. edges=[Edge(pc=60, stack=(), blockstack=(), npush=0), Edge(pc=76, stack=(), blockstack=(), npush=0)]
DEBUG 2022-01-28 15:49:20,718 pending: deque([State(pc_initial=106 nstack_initial=0), State(pc_initial=114 nstack_initial=0), State(pc_initial=130 nstack_initial=0), State(pc_initial=60 nstack_initial=0), State(pc_initial=76 nstack_initial=0)])
DEBUG 2022-01-28 15:49:20,718 pending: deque([State(pc_initial=114 nstack_initial=0), State(pc_initial=130 nstack_initial=0), State(pc_initial=60 nstack_initial=0), State(pc_initial=76 nstack_initial=0)])
DEBUG 2022-01-28 15:49:20,718 stack: []
DEBUG 2022-01-28 15:49:20,718 dispatch pc=114, inst=LOAD_GLOBAL(arg=2, lineno=237)
DEBUG 2022-01-28 15:49:20,718 stack []
DEBUG 2022-01-28 15:49:20,718 dispatch pc=116, inst=LOAD_METHOD(arg=3, lineno=237)
DEBUG 2022-01-28 15:49:20,718 stack ['$114load_global.0']
DEBUG 2022-01-28 15:49:20,718 dispatch pc=118, inst=LOAD_FAST(arg=0, lineno=237)
DEBUG 2022-01-28 15:49:20,718 stack ['$116load_method.1']
DEBUG 2022-01-28 15:49:20,718 dispatch pc=120, inst=LOAD_GLOBAL(arg=4, lineno=237)
DEBUG 2022-01-28 15:49:20,718 stack ['$116load_method.1', '$a118.2']
DEBUG 2022-01-28 15:49:20,718 dispatch pc=122, inst=LOAD_FAST(arg=1, lineno=237)
DEBUG 2022-01-28 15:49:20,718 stack ['$116load_method.1', '$a118.2', '$120load_global.3']
DEBUG 2022-01-28 15:49:20,718 dispatch pc=124, inst=CALL_FUNCTION(arg=1, lineno=237)
DEBUG 2022-01-28 15:49:20,718 stack ['$116load_method.1', '$a118.2', '$120load_global.3', '$b122.4']
DEBUG 2022-01-28 15:49:20,718 dispatch pc=126, inst=CALL_METHOD(arg=2, lineno=237)
DEBUG 2022-01-28 15:49:20,718 stack ['$116load_method.1', '$a118.2', '$124call_function.5']
DEBUG 2022-01-28 15:49:20,718 dispatch pc=128, inst=RETURN_VALUE(arg=None, lineno=237)
DEBUG 2022-01-28 15:49:20,718 stack ['$126call_method.6']
DEBUG 2022-01-28 15:49:20,718 end state. edges=[]
DEBUG 2022-01-28 15:49:20,718 pending: deque([State(pc_initial=130 nstack_initial=0), State(pc_initial=60 nstack_initial=0), State(pc_initial=76 nstack_initial=0)])
DEBUG 2022-01-28 15:49:20,718 stack: []
DEBUG 2022-01-28 15:49:20,718 dispatch pc=130, inst=LOAD_FAST(arg=4, lineno=238)
DEBUG 2022-01-28 15:49:20,718 stack []
DEBUG 2022-01-28 15:49:20,718 dispatch pc=132, inst=LOAD_CONST(arg=2, lineno=238)
DEBUG 2022-01-28 15:49:20,718 stack ['$exp130.0']
DEBUG 2022-01-28 15:49:20,718 dispatch pc=134, inst=COMPARE_OP(arg=3, lineno=238)
DEBUG 2022-01-28 15:49:20,718 stack ['$exp130.0', '$const132.1']
DEBUG 2022-01-28 15:49:20,718 dispatch pc=136, inst=POP_JUMP_IF_FALSE(arg=172, lineno=238)
DEBUG 2022-01-28 15:49:20,718 stack ['$134compare_op.2']
DEBUG 2022-01-28 15:49:20,718 end state. edges=[Edge(pc=138, stack=(), blockstack=(), npush=0), Edge(pc=172, stack=(), blockstack=(), npush=0)]
DEBUG 2022-01-28 15:49:20,718 pending: deque([State(pc_initial=60 nstack_initial=0), State(pc_initial=76 nstack_initial=0), State(pc_initial=138 nstack_initial=0), State(pc_initial=172 nstack_initial=0)])
DEBUG 2022-01-28 15:49:20,718 stack: []
DEBUG 2022-01-28 15:49:20,718 dispatch pc=60, inst=LOAD_DEREF(arg=2, lineno=226)
DEBUG 2022-01-28 15:49:20,718 stack []
DEBUG 2022-01-28 15:49:20,718 dispatch pc=62, inst=POP_JUMP_IF_FALSE(arg=68, lineno=226)
DEBUG 2022-01-28 15:49:20,718 stack ['$60load_deref.0']
DEBUG 2022-01-28 15:49:20,718 end state. edges=[Edge(pc=64, stack=(), blockstack=(), npush=0), Edge(pc=68, stack=(), blockstack=(), npush=0)]
DEBUG 2022-01-28 15:49:20,718 pending: deque([State(pc_initial=76 nstack_initial=0), State(pc_initial=138 nstack_initial=0), State(pc_initial=172 nstack_initial=0), State(pc_initial=64 nstack_initial=0), State(pc_initial=68 nstack_initial=0)])
DEBUG 2022-01-28 15:49:20,718 stack: []
DEBUG 2022-01-28 15:49:20,718 dispatch pc=76, inst=LOAD_FAST(arg=0, lineno=230)
DEBUG 2022-01-28 15:49:20,718 stack []
DEBUG 2022-01-28 15:49:20,718 dispatch pc=78, inst=LOAD_CONST(arg=1, lineno=230)
DEBUG 2022-01-28 15:49:20,718 stack ['$a76.0']
DEBUG 2022-01-28 15:49:20,718 dispatch pc=80, inst=COMPARE_OP(arg=3, lineno=230)
DEBUG 2022-01-28 15:49:20,718 stack ['$a76.0', '$const78.1']
DEBUG 2022-01-28 15:49:20,718 dispatch pc=82, inst=POP_JUMP_IF_FALSE(arg=106, lineno=230)
DEBUG 2022-01-28 15:49:20,718 stack ['$80compare_op.2']
DEBUG 2022-01-28 15:49:20,718 end state. edges=[Edge(pc=84, stack=(), blockstack=(), npush=0), Edge(pc=106, stack=(), blockstack=(), npush=0)]
DEBUG 2022-01-28 15:49:20,718 pending: deque([State(pc_initial=138 nstack_initial=0), State(pc_initial=172 nstack_initial=0), State(pc_initial=64 nstack_initial=0), State(pc_initial=68 nstack_initial=0), State(pc_initial=84 nstack_initial=0), State(pc_initial=106 nstack_initial=0)])
DEBUG 2022-01-28 15:49:20,718 stack: []
DEBUG 2022-01-28 15:49:20,718 dispatch pc=138, inst=LOAD_FAST(arg=4, lineno=239)
DEBUG 2022-01-28 15:49:20,718 stack []
DEBUG 2022-01-28 15:49:20,718 dispatch pc=140, inst=LOAD_CONST(arg=1, lineno=239)
DEBUG 2022-01-28 15:49:20,718 stack ['$exp138.0']
DEBUG 2022-01-28 15:49:20,718 dispatch pc=142, inst=BINARY_AND(arg=None, lineno=239)
DEBUG 2022-01-28 15:49:20,718 stack ['$exp138.0', '$const140.1']
DEBUG 2022-01-28 15:49:20,718 dispatch pc=144, inst=POP_JUMP_IF_FALSE(arg=154, lineno=239)
DEBUG 2022-01-28 15:49:20,718 stack ['$142binary_and.2']
DEBUG 2022-01-28 15:49:20,718 end state. edges=[Edge(pc=146, stack=(), blockstack=(), npush=0), Edge(pc=154, stack=(), blockstack=(), npush=0)]
DEBUG 2022-01-28 15:49:20,718 pending: deque([State(pc_initial=172 nstack_initial=0), State(pc_initial=64 nstack_initial=0), State(pc_initial=68 nstack_initial=0), State(pc_initial=84 nstack_initial=0), State(pc_initial=106 nstack_initial=0), State(pc_initial=146 nstack_initial=0), State(pc_initial=154 nstack_initial=0)])
DEBUG 2022-01-28 15:49:20,718 stack: []
DEBUG 2022-01-28 15:49:20,718 dispatch pc=172, inst=LOAD_FAST(arg=3, lineno=244)
DEBUG 2022-01-28 15:49:20,718 stack []
DEBUG 2022-01-28 15:49:20,718 dispatch pc=174, inst=POP_JUMP_IF_FALSE(arg=184, lineno=244)
DEBUG 2022-01-28 15:49:20,718 stack ['$invert172.0']
DEBUG 2022-01-28 15:49:20,718 end state. edges=[Edge(pc=176, stack=(), blockstack=(), npush=0), Edge(pc=184, stack=(), blockstack=(), npush=0)]
DEBUG 2022-01-28 15:49:20,718 pending: deque([State(pc_initial=64 nstack_initial=0), State(pc_initial=68 nstack_initial=0), State(pc_initial=84 nstack_initial=0), State(pc_initial=106 nstack_initial=0), State(pc_initial=146 nstack_initial=0), State(pc_initial=154 nstack_initial=0), State(pc_initial=176 nstack_initial=0), State(pc_initial=184 nstack_initial=0)])
DEBUG 2022-01-28 15:49:20,718 stack: []
DEBUG 2022-01-28 15:49:20,718 dispatch pc=64, inst=LOAD_DEREF(arg=2, lineno=227)
DEBUG 2022-01-28 15:49:20,718 stack []
DEBUG 2022-01-28 15:49:20,718 dispatch pc=66, inst=RETURN_VALUE(arg=None, lineno=227)
DEBUG 2022-01-28 15:49:20,718 stack ['$64load_deref.0']
DEBUG 2022-01-28 15:49:20,718 end state. edges=[]
DEBUG 2022-01-28 15:49:20,718 pending: deque([State(pc_initial=68 nstack_initial=0), State(pc_initial=84 nstack_initial=0), State(pc_initial=106 nstack_initial=0), State(pc_initial=146 nstack_initial=0), State(pc_initial=154 nstack_initial=0), State(pc_initial=176 nstack_initial=0), State(pc_initial=184 nstack_initial=0)])
DEBUG 2022-01-28 15:49:20,718 stack: []
DEBUG 2022-01-28 15:49:20,718 dispatch pc=68, inst=LOAD_GLOBAL(arg=1, lineno=229)
DEBUG 2022-01-28 15:49:20,718 stack []
DEBUG 2022-01-28 15:49:20,718 dispatch pc=70, inst=LOAD_CONST(arg=4, lineno=229)
DEBUG 2022-01-28 15:49:20,718 stack ['$68load_global.0']
DEBUG 2022-01-28 15:49:20,718 dispatch pc=72, inst=CALL_FUNCTION(arg=1, lineno=229)
DEBUG 2022-01-28 15:49:20,726 stack ['$68load_global.0', '$const70.1']
DEBUG 2022-01-28 15:49:20,726 dispatch pc=74, inst=RAISE_VARARGS(arg=1, lineno=229)
DEBUG 2022-01-28 15:49:20,726 stack ['$72call_function.2']
DEBUG 2022-01-28 15:49:20,726 end state. edges=[]
DEBUG 2022-01-28 15:49:20,726 pending: deque([State(pc_initial=84 nstack_initial=0), State(pc_initial=106 nstack_initial=0), State(pc_initial=146 nstack_initial=0), State(pc_initial=154 nstack_initial=0), State(pc_initial=176 nstack_initial=0), State(pc_initial=184 nstack_initial=0)])
DEBUG 2022-01-28 15:49:20,726 stack: []
DEBUG 2022-01-28 15:49:20,726 dispatch pc=84, inst=LOAD_FAST(arg=0, lineno=230)
DEBUG 2022-01-28 15:49:20,726 stack []
DEBUG 2022-01-28 15:49:20,726 dispatch pc=86, inst=LOAD_CONST(arg=5, lineno=230)
DEBUG 2022-01-28 15:49:20,726 stack ['$a84.0']
DEBUG 2022-01-28 15:49:20,726 dispatch pc=88, inst=COMPARE_OP(arg=3, lineno=230)
DEBUG 2022-01-28 15:49:20,726 stack ['$a84.0', '$const86.1']
DEBUG 2022-01-28 15:49:20,726 dispatch pc=90, inst=POP_JUMP_IF_FALSE(arg=106, lineno=230)
DEBUG 2022-01-28 15:49:20,726 stack ['$88compare_op.2']
DEBUG 2022-01-28 15:49:20,726 end state. edges=[Edge(pc=92, stack=(), blockstack=(), npush=0), Edge(pc=106, stack=(), blockstack=(), npush=0)]
DEBUG 2022-01-28 15:49:20,726 pending: deque([State(pc_initial=106 nstack_initial=0), State(pc_initial=146 nstack_initial=0), State(pc_initial=154 nstack_initial=0), State(pc_initial=176 nstack_initial=0), State(pc_initial=184 nstack_initial=0), State(pc_initial=92 nstack_initial=0), State(pc_initial=106 nstack_initial=0)])
DEBUG 2022-01-28 15:49:20,726 pending: deque([State(pc_initial=146 nstack_initial=0), State(pc_initial=154 nstack_initial=0), State(pc_initial=176 nstack_initial=0), State(pc_initial=184 nstack_initial=0), State(pc_initial=92 nstack_initial=0), State(pc_initial=106 nstack_initial=0)])
DEBUG 2022-01-28 15:49:20,726 stack: []
DEBUG 2022-01-28 15:49:20,726 dispatch pc=146, inst=LOAD_FAST(arg=2, lineno=240)
DEBUG 2022-01-28 15:49:20,726 stack []
DEBUG 2022-01-28 15:49:20,726 dispatch pc=148, inst=LOAD_FAST(arg=0, lineno=240)
DEBUG 2022-01-28 15:49:20,728 stack ['$r146.0']
DEBUG 2022-01-28 15:49:20,728 dispatch pc=150, inst=INPLACE_MULTIPLY(arg=None, lineno=240)
DEBUG 2022-01-28 15:49:20,728 stack ['$r146.0', '$a148.1']
DEBUG 2022-01-28 15:49:20,728 dispatch pc=152, inst=STORE_FAST(arg=2, lineno=240)
DEBUG 2022-01-28 15:49:20,728 stack ['$150inplace_multiply.2']
DEBUG 2022-01-28 15:49:20,728 end state. edges=[Edge(pc=154, stack=(), blockstack=(), npush=0)]
DEBUG 2022-01-28 15:49:20,728 pending: deque([State(pc_initial=154 nstack_initial=0), State(pc_initial=176 nstack_initial=0), State(pc_initial=184 nstack_initial=0), State(pc_initial=92 nstack_initial=0), State(pc_initial=106 nstack_initial=0), State(pc_initial=154 nstack_initial=0)])
DEBUG 2022-01-28 15:49:20,728 stack: []
DEBUG 2022-01-28 15:49:20,728 dispatch pc=154, inst=LOAD_FAST(arg=4, lineno=241)
DEBUG 2022-01-28 15:49:20,728 stack []
DEBUG 2022-01-28 15:49:20,728 dispatch pc=156, inst=LOAD_CONST(arg=1, lineno=241)
DEBUG 2022-01-28 15:49:20,728 stack ['$exp154.0']
DEBUG 2022-01-28 15:49:20,728 dispatch pc=158, inst=INPLACE_RSHIFT(arg=None, lineno=241)
DEBUG 2022-01-28 15:49:20,728 stack ['$exp154.0', '$const156.1']
DEBUG 2022-01-28 15:49:20,728 dispatch pc=160, inst=STORE_FAST(arg=4, lineno=241)
DEBUG 2022-01-28 15:49:20,728 stack ['$158inplace_rshift.2']
DEBUG 2022-01-28 15:49:20,728 dispatch pc=162, inst=LOAD_FAST(arg=0, lineno=242)
DEBUG 2022-01-28 15:49:20,728 stack []
DEBUG 2022-01-28 15:49:20,728 dispatch pc=164, inst=LOAD_FAST(arg=0, lineno=242)
DEBUG 2022-01-28 15:49:20,728 stack ['$a162.3']
DEBUG 2022-01-28 15:49:20,728 dispatch pc=166, inst=INPLACE_MULTIPLY(arg=None, lineno=242)
DEBUG 2022-01-28 15:49:20,728 stack ['$a162.3', '$a164.4']
DEBUG 2022-01-28 15:49:20,728 dispatch pc=168, inst=STORE_FAST(arg=0, lineno=242)
DEBUG 2022-01-28 15:49:20,728 stack ['$166inplace_multiply.5']
DEBUG 2022-01-28 15:49:20,728 dispatch pc=170, inst=JUMP_ABSOLUTE(arg=130, lineno=242)
DEBUG 2022-01-28 15:49:20,728 stack []
DEBUG 2022-01-28 15:49:20,728 end state. edges=[Edge(pc=130, stack=(), blockstack=(), npush=0)]
DEBUG 2022-01-28 15:49:20,728 pending: deque([State(pc_initial=176 nstack_initial=0), State(pc_initial=184 nstack_initial=0), State(pc_initial=92 nstack_initial=0), State(pc_initial=106 nstack_initial=0), State(pc_initial=154 nstack_initial=0), State(pc_initial=130 nstack_initial=0)])
DEBUG 2022-01-28 15:49:20,728 stack: []
DEBUG 2022-01-28 15:49:20,728 dispatch pc=176, inst=LOAD_CONST(arg=8, lineno=244)
DEBUG 2022-01-28 15:49:20,728 stack []
DEBUG 2022-01-28 15:49:20,728 dispatch pc=178, inst=LOAD_FAST(arg=2, lineno=244)
DEBUG 2022-01-28 15:49:20,728 stack ['$const176.0']
DEBUG 2022-01-28 15:49:20,728 dispatch pc=180, inst=BINARY_TRUE_DIVIDE(arg=None, lineno=244)
DEBUG 2022-01-28 15:49:20,728 stack ['$const176.0', '$r178.1']
DEBUG 2022-01-28 15:49:20,728 dispatch pc=182, inst=RETURN_VALUE(arg=None, lineno=244)
DEBUG 2022-01-28 15:49:20,728 stack ['$180binary_true_divide.2']
DEBUG 2022-01-28 15:49:20,728 end state. edges=[]
DEBUG 2022-01-28 15:49:20,728 pending: deque([State(pc_initial=184 nstack_initial=0), State(pc_initial=92 nstack_initial=0), State(pc_initial=106 nstack_initial=0), State(pc_initial=154 nstack_initial=0), State(pc_initial=130 nstack_initial=0)])
DEBUG 2022-01-28 15:49:20,728 stack: []
DEBUG 2022-01-28 15:49:20,728 dispatch pc=184, inst=LOAD_FAST(arg=2, lineno=244)
DEBUG 2022-01-28 15:49:20,728 stack []
DEBUG 2022-01-28 15:49:20,728 dispatch pc=186, inst=RETURN_VALUE(arg=None, lineno=244)
DEBUG 2022-01-28 15:49:20,728 stack ['$r184.0']
DEBUG 2022-01-28 15:49:20,728 end state. edges=[]
DEBUG 2022-01-28 15:49:20,728 pending: deque([State(pc_initial=92 nstack_initial=0), State(pc_initial=106 nstack_initial=0), State(pc_initial=154 nstack_initial=0), State(pc_initial=130 nstack_initial=0)])
DEBUG 2022-01-28 15:49:20,728 stack: []
DEBUG 2022-01-28 15:49:20,728 dispatch pc=92, inst=LOAD_CONST(arg=2, lineno=231)
DEBUG 2022-01-28 15:49:20,728 stack []
DEBUG 2022-01-28 15:49:20,728 dispatch pc=94, inst=RETURN_VALUE(arg=None, lineno=231)
DEBUG 2022-01-28 15:49:20,728 stack ['$const92.0']
DEBUG 2022-01-28 15:49:20,728 end state. edges=[]
DEBUG 2022-01-28 15:49:20,728 pending: deque([State(pc_initial=106 nstack_initial=0), State(pc_initial=154 nstack_initial=0), State(pc_initial=130 nstack_initial=0)])
DEBUG 2022-01-28 15:49:20,728 pending: deque([State(pc_initial=154 nstack_initial=0), State(pc_initial=130 nstack_initial=0)])
DEBUG 2022-01-28 15:49:20,728 pending: deque([State(pc_initial=130 nstack_initial=0)])
DEBUG 2022-01-28 15:49:20,728 -------------------------Prune PHIs-------------------------
DEBUG 2022-01-28 15:49:20,728 Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=26 nstack_initial=0): set(),
             State(pc_initial=44 nstack_initial=0): set(),
             State(pc_initial=48 nstack_initial=0): set(),
             State(pc_initial=52 nstack_initial=0): set(),
             State(pc_initial=60 nstack_initial=0): set(),
             State(pc_initial=64 nstack_initial=0): set(),
             State(pc_initial=68 nstack_initial=0): set(),
             State(pc_initial=76 nstack_initial=0): set(),
             State(pc_initial=84 nstack_initial=0): set(),
             State(pc_initial=92 nstack_initial=0): set(),
             State(pc_initial=98 nstack_initial=0): set(),
             State(pc_initial=106 nstack_initial=0): set(),
             State(pc_initial=114 nstack_initial=0): set(),
             State(pc_initial=130 nstack_initial=0): set(),
             State(pc_initial=138 nstack_initial=0): set(),
             State(pc_initial=146 nstack_initial=0): set(),
             State(pc_initial=154 nstack_initial=0): set(),
             State(pc_initial=172 nstack_initial=0): set(),
             State(pc_initial=176 nstack_initial=0): set(),
             State(pc_initial=184 nstack_initial=0): set()})
DEBUG 2022-01-28 15:49:20,728 defmap: {}
DEBUG 2022-01-28 15:49:20,728 phismap: defaultdict(<class 'set'>, {})
DEBUG 2022-01-28 15:49:20,728 changing phismap: defaultdict(<class 'set'>, {})
DEBUG 2022-01-28 15:49:20,728 keep phismap: {}
DEBUG 2022-01-28 15:49:20,728 new_out: defaultdict(<class 'dict'>, {})
DEBUG 2022-01-28 15:49:20,728 ----------------------DONE Prune PHIs-----------------------
DEBUG 2022-01-28 15:49:20,728 block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$2load_deref.0'}), (4, {'res': '$const4.1'}), (6, {'func': '$2load_deref.0', 'args': ['$const4.1'], 'res': '$6call_function.2'}), (8, {'value': '$6call_function.2'}), (10, {'res': '$10load_deref.3'}), (12, {'res': '$a12.4'}), (14, {'func': '$10load_deref.3', 'args': ['$a12.4'], 'res': '$14call_function.5'}), (16, {'value': '$14call_function.5'}), (18, {'res': '$b18.6'}), (20, {'res': '$const20.7'}), (22, {'lhs': '$b18.6', 'rhs': '$const20.7', 'res': '$22compare_op.8'}), (24, {'pred': '$22compare_op.8'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={26: (), 98: ()})
DEBUG 2022-01-28 15:49:20,728 block_infos State(pc_initial=26 nstack_initial=0):
AdaptBlockInfo(insts=((26, {'res': '$const26.0'}), (28, {'value': '$const26.0'}), (30, {'res': '$b30.1'}), (32, {'value': '$b30.1', 'res': '$32unary_negative.2'}), (34, {'value': '$32unary_negative.2'}), (36, {'res': '$exp36.3'}), (38, {'res': '$const38.4'}), (40, {'lhs': '$exp36.3', 'rhs': '$const38.4', 'res': '$40compare_op.5'}), (42, {'pred': '$40compare_op.5'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={44: (), 48: ()})
DEBUG 2022-01-28 15:49:20,728 block_infos State(pc_initial=44 nstack_initial=0):
AdaptBlockInfo(insts=((44, {'res': '$44load_global.0'}), (46, {'exc': '$44load_global.0'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG 2022-01-28 15:49:20,728 block_infos State(pc_initial=48 nstack_initial=0):
AdaptBlockInfo(insts=((48, {'res': '$48load_deref.0'}), (50, {'pred': '$48load_deref.0'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={52: (), 106: ()})
DEBUG 2022-01-28 15:49:20,728 block_infos State(pc_initial=52 nstack_initial=0):
AdaptBlockInfo(insts=((52, {'res': '$a52.0'}), (54, {'res': '$const54.1'}), (56, {'lhs': '$a52.0', 'rhs': '$const54.1', 'res': '$56compare_op.2'}), (58, {'pred': '$56compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={60: (), 76: ()})
DEBUG 2022-01-28 15:49:20,728 block_infos State(pc_initial=60 nstack_initial=0):
AdaptBlockInfo(insts=((60, {'res': '$60load_deref.0'}), (62, {'pred': '$60load_deref.0'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={64: (), 68: ()})
DEBUG 2022-01-28 15:49:20,728 block_infos State(pc_initial=64 nstack_initial=0):
AdaptBlockInfo(insts=((64, {'res': '$64load_deref.0'}), (66, {'retval': '$64load_deref.0', 'castval': '$66return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG 2022-01-28 15:49:20,728 block_infos State(pc_initial=68 nstack_initial=0):
AdaptBlockInfo(insts=((68, {'res': '$68load_global.0'}), (70, {'res': '$const70.1'}), (72, {'func': '$68load_global.0', 'args': ['$const70.1'], 'res': '$72call_function.2'}), (74, {'exc': '$72call_function.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG 2022-01-28 15:49:20,728 block_infos State(pc_initial=76 nstack_initial=0):
AdaptBlockInfo(insts=((76, {'res': '$a76.0'}), (78, {'res': '$const78.1'}), (80, {'lhs': '$a76.0', 'rhs': '$const78.1', 'res': '$80compare_op.2'}), (82, {'pred': '$80compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={84: (), 106: ()})
DEBUG 2022-01-28 15:49:20,728 block_infos State(pc_initial=84 nstack_initial=0):
AdaptBlockInfo(insts=((84, {'res': '$a84.0'}), (86, {'res': '$const86.1'}), (88, {'lhs': '$a84.0', 'rhs': '$const86.1', 'res': '$88compare_op.2'}), (90, {'pred': '$88compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={92: (), 106: ()})
DEBUG 2022-01-28 15:49:20,728 block_infos State(pc_initial=92 nstack_initial=0):
AdaptBlockInfo(insts=((92, {'res': '$const92.0'}), (94, {'retval': '$const92.0', 'castval': '$94return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG 2022-01-28 15:49:20,728 block_infos State(pc_initial=98 nstack_initial=0):
AdaptBlockInfo(insts=((98, {'res': '$const98.0'}), (100, {'value': '$const98.0'}), (102, {'res': '$b102.1'}), (104, {'value': '$b102.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={106: ()})
DEBUG 2022-01-28 15:49:20,728 block_infos State(pc_initial=106 nstack_initial=0):
AdaptBlockInfo(insts=((106, {'res': '$exp106.0'}), (108, {'res': '$const108.1'}), (110, {'lhs': '$exp106.0', 'rhs': '$const108.1', 'res': '$110compare_op.2'}), (112, {'pred': '$110compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={114: (), 130: ()})
DEBUG 2022-01-28 15:49:20,728 block_infos State(pc_initial=114 nstack_initial=0):
AdaptBlockInfo(insts=((114, {'res': '$114load_global.0'}), (116, {'item': '$114load_global.0', 'res': '$116load_method.1'}), (118, {'res': '$a118.2'}), (120, {'res': '$120load_global.3'}), (122, {'res': '$b122.4'}), (124, {'func': '$120load_global.3', 'args': ['$b122.4'], 'res': '$124call_function.5'}), (126, {'func': '$116load_method.1', 'args': ['$a118.2', '$124call_function.5'], 'res': '$126call_method.6'}), (128, {'retval': '$126call_method.6', 'castval': '$128return_value.7'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG 2022-01-28 15:49:20,736 block_infos State(pc_initial=130 nstack_initial=0):
AdaptBlockInfo(insts=((130, {'res': '$exp130.0'}), (132, {'res': '$const132.1'}), (134, {'lhs': '$exp130.0', 'rhs': '$const132.1', 'res': '$134compare_op.2'}), (136, {'pred': '$134compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={138: (), 172: ()})
DEBUG 2022-01-28 15:49:20,736 block_infos State(pc_initial=138 nstack_initial=0):
AdaptBlockInfo(insts=((138, {'res': '$exp138.0'}), (140, {'res': '$const140.1'}), (142, {'lhs': '$exp138.0', 'rhs': '$const140.1', 'res': '$142binary_and.2'}), (144, {'pred': '$142binary_and.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={146: (), 154: ()})
DEBUG 2022-01-28 15:49:20,736 block_infos State(pc_initial=146 nstack_initial=0):
AdaptBlockInfo(insts=((146, {'res': '$r146.0'}), (148, {'res': '$a148.1'}), (150, {'lhs': '$r146.0', 'rhs': '$a148.1', 'res': '$150inplace_multiply.2'}), (152, {'value': '$150inplace_multiply.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={154: ()})
DEBUG 2022-01-28 15:49:20,736 block_infos State(pc_initial=154 nstack_initial=0):
AdaptBlockInfo(insts=((154, {'res': '$exp154.0'}), (156, {'res': '$const156.1'}), (158, {'lhs': '$exp154.0', 'rhs': '$const156.1', 'res': '$158inplace_rshift.2'}), (160, {'value': '$158inplace_rshift.2'}), (162, {'res': '$a162.3'}), (164, {'res': '$a164.4'}), (166, {'lhs': '$a162.3', 'rhs': '$a164.4', 'res': '$166inplace_multiply.5'}), (168, {'value': '$166inplace_multiply.5'}), (170, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={130: ()})
DEBUG 2022-01-28 15:49:20,736 block_infos State(pc_initial=172 nstack_initial=0):
AdaptBlockInfo(insts=((172, {'res': '$invert172.0'}), (174, {'pred': '$invert172.0'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={176: (), 184: ()})
DEBUG 2022-01-28 15:49:20,736 block_infos State(pc_initial=176 nstack_initial=0):
AdaptBlockInfo(insts=((176, {'res': '$const176.0'}), (178, {'res': '$r178.1'}), (180, {'lhs': '$const176.0', 'rhs': '$r178.1', 'res': '$180binary_true_divide.2'}), (182, {'retval': '$180binary_true_divide.2', 'castval': '$182return_value.3'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG 2022-01-28 15:49:20,736 block_infos State(pc_initial=184 nstack_initial=0):
AdaptBlockInfo(insts=((184, {'res': '$r184.0'}), (186, {'retval': '$r184.0', 'castval': '$186return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG 2022-01-28 15:49:20,738 label 0:
    a = arg(0, name=a)                       ['a']
    b = arg(1, name=b)                       ['b']
    $2load_deref.0 = freevar(tp: float64)    ['$2load_deref.0']
    $const4.1 = const(int, 1)                ['$const4.1']
    r = call $2load_deref.0($const4.1, func=$2load_deref.0, args=[Var($const4.1, numbers.py:217)], kws=(), vararg=None, target=None) ['$2load_deref.0', '$const4.1', 'r']
    $10load_deref.3 = freevar(tp: float64)   ['$10load_deref.3']
    a.1 = call $10load_deref.3(a, func=$10load_deref.3, args=[Var(a, numbers.py:217)], kws=(), vararg=None, target=None) ['$10load_deref.3', 'a', 'a.1']
    $const20.7 = const(int, 0)               ['$const20.7']
    $22compare_op.8 = b < $const20.7         ['$22compare_op.8', '$const20.7', 'b']
    bool24 = global(bool: <class 'bool'>)    ['bool24']
    $24pred = call bool24($22compare_op.8, func=bool24, args=(Var($22compare_op.8, numbers.py:219),), kws=(), vararg=None, target=None) ['$22compare_op.8', '$24pred', 'bool24']
    branch $24pred, 26, 98                   ['$24pred']
label 26:
    invert = const(bool, True)               ['invert']
    exp = unary(fn=<built-in function neg>, value=b) ['b', 'exp']
    $const38.4 = const(int, 0)               ['$const38.4']
    $40compare_op.5 = exp < $const38.4       ['$40compare_op.5', '$const38.4', 'exp']
    bool42 = global(bool: <class 'bool'>)    ['bool42']
    $42pred = call bool42($40compare_op.5, func=bool42, args=(Var($40compare_op.5, numbers.py:222),), kws=(), vararg=None, target=None) ['$40compare_op.5', '$42pred', 'bool42']
    branch $42pred, 44, 48                   ['$42pred']
label 44:
    $44load_global.0 = global(OverflowError: <class 'OverflowError'>) ['$44load_global.0']
    raise $44load_global.0                   ['$44load_global.0']
label 48:
    $48load_deref.0 = freevar(is_integer: False) ['$48load_deref.0']
    bool50 = global(bool: <class 'bool'>)    ['bool50']
    $50pred = call bool50($48load_deref.0, func=bool50, args=(Var($48load_deref.0, numbers.py:224),), kws=(), vararg=None, target=None) ['$48load_deref.0', '$50pred', 'bool50']
    branch $50pred, 52, 106                  ['$50pred']
label 52:
    $const54.1 = const(int, 0)               ['$const54.1']
    $56compare_op.2 = a.1 == $const54.1      ['$56compare_op.2', '$const54.1', 'a.1']
    bool58 = global(bool: <class 'bool'>)    ['bool58']
    $58pred = call bool58($56compare_op.2, func=bool58, args=(Var($56compare_op.2, numbers.py:225),), kws=(), vararg=None, target=None) ['$56compare_op.2', '$58pred', 'bool58']
    branch $58pred, 60, 76                   ['$58pred']
label 60:
    $60load_deref.0 = freevar(zerodiv_return: False) ['$60load_deref.0']
    bool62 = global(bool: <class 'bool'>)    ['bool62']
    $62pred = call bool62($60load_deref.0, func=bool62, args=(Var($60load_deref.0, numbers.py:226),), kws=(), vararg=None, target=None) ['$60load_deref.0', '$62pred', 'bool62']
    branch $62pred, 64, 68                   ['$62pred']
label 64:
    $64load_deref.0 = freevar(zerodiv_return: False) ['$64load_deref.0']
    $66return_value.1 = cast(value=$64load_deref.0) ['$64load_deref.0', '$66return_value.1']
    return $66return_value.1                 ['$66return_value.1']
label 68:
    $68load_global.0 = global(ZeroDivisionError: <class 'ZeroDivisionError'>) ['$68load_global.0']
    $const70.1 = const(str, 0 cannot be raised to a negative power) ['$const70.1']
    $72call_function.2 = call $68load_global.0($const70.1, func=$68load_global.0, args=[Var($const70.1, numbers.py:229)], kws=(), vararg=None, target=None) ['$68load_global.0', '$72call_function.2', '$const70.1']
    raise $72call_function.2                 ['$72call_function.2']
label 76:
    $const78.1 = const(int, 1)               ['$const78.1']
    $80compare_op.2 = a.1 != $const78.1      ['$80compare_op.2', '$const78.1', 'a.1']
    bool82 = global(bool: <class 'bool'>)    ['bool82']
    $82pred = call bool82($80compare_op.2, func=bool82, args=(Var($80compare_op.2, numbers.py:230),), kws=(), vararg=None, target=None) ['$80compare_op.2', '$82pred', 'bool82']
    branch $82pred, 84, 106                  ['$82pred']
label 84:
    $const86.1 = const(int, -1)              ['$const86.1']
    $88compare_op.2 = a.1 != $const86.1      ['$88compare_op.2', '$const86.1', 'a.1']
    bool90 = global(bool: <class 'bool'>)    ['bool90']
    $90pred = call bool90($88compare_op.2, func=bool90, args=(Var($88compare_op.2, numbers.py:230),), kws=(), vararg=None, target=None) ['$88compare_op.2', '$90pred', 'bool90']
    branch $90pred, 92, 106                  ['$90pred']
label 92:
    $const92.0 = const(int, 0)               ['$const92.0']
    $94return_value.1 = cast(value=$const92.0) ['$94return_value.1', '$const92.0']
    return $94return_value.1                 ['$94return_value.1']
label 98:
    invert = const(bool, False)              ['invert']
    exp = b                                  ['b', 'exp']
    jump 106                                 []
label 106:
    $const108.1 = const(int, 65536)          ['$const108.1']
    $110compare_op.2 = exp > $const108.1     ['$110compare_op.2', '$const108.1', 'exp']
    bool112 = global(bool: <class 'bool'>)   ['bool112']
    $112pred = call bool112($110compare_op.2, func=bool112, args=(Var($110compare_op.2, numbers.py:235),), kws=(), vararg=None, target=None) ['$110compare_op.2', '$112pred', 'bool112']
    branch $112pred, 114, 130                ['$112pred']
label 114:
    $114load_global.0 = global(math: <module 'math' (built-in)>) ['$114load_global.0']
    $116load_method.1 = getattr(value=$114load_global.0, attr=pow) ['$114load_global.0', '$116load_method.1']
    $120load_global.3 = global(float: <class 'float'>) ['$120load_global.3']
    $124call_function.5 = call $120load_global.3(b, func=$120load_global.3, args=[Var(b, numbers.py:217)], kws=(), vararg=None, target=None) ['$120load_global.3', '$124call_function.5', 'b']
    $126call_method.6 = call $116load_method.1(a.1, $124call_function.5, func=$116load_method.1, args=[Var(a.1, numbers.py:218), Var($124call_function.5, numbers.py:237)], kws=(), vararg=None, target=None) ['$116load_method.1', '$124call_function.5', '$126call_method.6', 'a.1']
    $128return_value.7 = cast(value=$126call_method.6) ['$126call_method.6', '$128return_value.7']
    return $128return_value.7                ['$128return_value.7']
label 130:
    $const132.1 = const(int, 0)              ['$const132.1']
    $134compare_op.2 = exp != $const132.1    ['$134compare_op.2', '$const132.1', 'exp']
    bool136 = global(bool: <class 'bool'>)   ['bool136']
    $136pred = call bool136($134compare_op.2, func=bool136, args=(Var($134compare_op.2, numbers.py:238),), kws=(), vararg=None, target=None) ['$134compare_op.2', '$136pred', 'bool136']
    branch $136pred, 138, 172                ['$136pred']
label 138:
    $const140.1 = const(int, 1)              ['$const140.1']
    $142binary_and.2 = exp & $const140.1     ['$142binary_and.2', '$const140.1', 'exp']
    bool144 = global(bool: <class 'bool'>)   ['bool144']
    $144pred = call bool144($142binary_and.2, func=bool144, args=(Var($142binary_and.2, numbers.py:239),), kws=(), vararg=None, target=None) ['$142binary_and.2', '$144pred', 'bool144']
    branch $144pred, 146, 154                ['$144pred']
label 146:
    $150inplace_multiply.2 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=r, rhs=a.1, static_lhs=Undefined, static_rhs=Undefined) ['$150inplace_multiply.2', 'a.1', 'r']
    r = $150inplace_multiply.2               ['$150inplace_multiply.2', 'r']
    jump 154                                 []
label 154:
    $const156.1 = const(int, 1)              ['$const156.1']
    $158inplace_rshift.2 = inplace_binop(fn=<built-in function irshift>, immutable_fn=<built-in function rshift>, lhs=exp, rhs=$const156.1, static_lhs=Undefined, static_rhs=Undefined) ['$158inplace_rshift.2', '$const156.1', 'exp']
    exp = $158inplace_rshift.2               ['$158inplace_rshift.2', 'exp']
    $166inplace_multiply.5 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=a.1, rhs=a.1, static_lhs=Undefined, static_rhs=Undefined) ['$166inplace_multiply.5', 'a.1', 'a.1']
    a.1 = $166inplace_multiply.5             ['$166inplace_multiply.5', 'a.1']
    jump 130                                 []
label 172:
    bool174 = global(bool: <class 'bool'>)   ['bool174']
    $174pred = call bool174(invert, func=bool174, args=(Var(invert, numbers.py:220),), kws=(), vararg=None, target=None) ['$174pred', 'bool174', 'invert']
    branch $174pred, 176, 184                ['$174pred']
label 176:
    $const176.0 = const(float, 1.0)          ['$const176.0']
    $180binary_true_divide.2 = $const176.0 / r ['$180binary_true_divide.2', '$const176.0', 'r']
    $182return_value.3 = cast(value=$180binary_true_divide.2) ['$180binary_true_divide.2', '$182return_value.3']
    return $182return_value.3                ['$182return_value.3']
label 184:
    $186return_value.1 = cast(value=r)       ['$186return_value.1', 'r']
    return $186return_value.1                ['$186return_value.1']

DEBUG 2022-01-28 15:49:20,758 ==== SSA block analysis pass on 0
DEBUG 2022-01-28 15:49:20,758 Running <numba.core.ssa._GatherDefsHandler object at 0x000002410CE5AFA0>
DEBUG 2022-01-28 15:49:20,758 on stmt: a = arg(0, name=a)
DEBUG 2022-01-28 15:49:20,758 on stmt: b = arg(1, name=b)
DEBUG 2022-01-28 15:49:20,758 on stmt: $2load_deref.0 = freevar(tp: float64)
DEBUG 2022-01-28 15:49:20,758 on stmt: $const4.1 = const(int, 1)
DEBUG 2022-01-28 15:49:20,758 on stmt: r = call $2load_deref.0($const4.1, func=$2load_deref.0, args=[Var($const4.1, numbers.py:217)], kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:20,758 on stmt: $10load_deref.3 = freevar(tp: float64)
DEBUG 2022-01-28 15:49:20,758 on stmt: a.1 = call $10load_deref.3(a, func=$10load_deref.3, args=[Var(a, numbers.py:217)], kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:20,758 on stmt: $const20.7 = const(int, 0)
DEBUG 2022-01-28 15:49:20,758 on stmt: $22compare_op.8 = b < $const20.7
DEBUG 2022-01-28 15:49:20,758 on stmt: bool24 = global(bool: <class 'bool'>)
DEBUG 2022-01-28 15:49:20,758 on stmt: $24pred = call bool24($22compare_op.8, func=bool24, args=(Var($22compare_op.8, numbers.py:219),), kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:20,758 on stmt: branch $24pred, 26, 98
DEBUG 2022-01-28 15:49:20,758 ==== SSA block analysis pass on 26
DEBUG 2022-01-28 15:49:20,758 Running <numba.core.ssa._GatherDefsHandler object at 0x000002410CE5AFA0>
DEBUG 2022-01-28 15:49:20,758 on stmt: invert = const(bool, True)
DEBUG 2022-01-28 15:49:20,758 on stmt: exp = unary(fn=<built-in function neg>, value=b)
DEBUG 2022-01-28 15:49:20,758 on stmt: $const38.4 = const(int, 0)
DEBUG 2022-01-28 15:49:20,758 on stmt: $40compare_op.5 = exp < $const38.4
DEBUG 2022-01-28 15:49:20,758 on stmt: bool42 = global(bool: <class 'bool'>)
DEBUG 2022-01-28 15:49:20,758 on stmt: $42pred = call bool42($40compare_op.5, func=bool42, args=(Var($40compare_op.5, numbers.py:222),), kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:20,758 on stmt: branch $42pred, 44, 48
DEBUG 2022-01-28 15:49:20,758 ==== SSA block analysis pass on 44
DEBUG 2022-01-28 15:49:20,758 Running <numba.core.ssa._GatherDefsHandler object at 0x000002410CE5AFA0>
DEBUG 2022-01-28 15:49:20,758 on stmt: $44load_global.0 = global(OverflowError: <class 'OverflowError'>)
DEBUG 2022-01-28 15:49:20,758 on stmt: <static> raise <class 'OverflowError'>
DEBUG 2022-01-28 15:49:20,758 ==== SSA block analysis pass on 48
DEBUG 2022-01-28 15:49:20,758 Running <numba.core.ssa._GatherDefsHandler object at 0x000002410CE5AFA0>
DEBUG 2022-01-28 15:49:20,758 on stmt: $48load_deref.0 = freevar(is_integer: False)
DEBUG 2022-01-28 15:49:20,758 on stmt: bool50 = global(bool: <class 'bool'>)
DEBUG 2022-01-28 15:49:20,758 on stmt: $50pred = call bool50($48load_deref.0, func=bool50, args=(Var($48load_deref.0, numbers.py:224),), kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:20,758 on stmt: jump 106
DEBUG 2022-01-28 15:49:20,758 ==== SSA block analysis pass on 98
DEBUG 2022-01-28 15:49:20,758 Running <numba.core.ssa._GatherDefsHandler object at 0x000002410CE5AFA0>
DEBUG 2022-01-28 15:49:20,758 on stmt: invert = const(bool, False)
DEBUG 2022-01-28 15:49:20,758 on stmt: exp = b
DEBUG 2022-01-28 15:49:20,758 on stmt: jump 106
DEBUG 2022-01-28 15:49:20,758 ==== SSA block analysis pass on 106
DEBUG 2022-01-28 15:49:20,758 Running <numba.core.ssa._GatherDefsHandler object at 0x000002410CE5AFA0>
DEBUG 2022-01-28 15:49:20,758 on stmt: $const108.1 = const(int, 65536)
DEBUG 2022-01-28 15:49:20,758 on stmt: $110compare_op.2 = exp > $const108.1
DEBUG 2022-01-28 15:49:20,758 on stmt: bool112 = global(bool: <class 'bool'>)
DEBUG 2022-01-28 15:49:20,758 on stmt: $112pred = call bool112($110compare_op.2, func=bool112, args=(Var($110compare_op.2, numbers.py:235),), kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:20,758 on stmt: branch $112pred, 114, 130
DEBUG 2022-01-28 15:49:20,758 ==== SSA block analysis pass on 114
DEBUG 2022-01-28 15:49:20,758 Running <numba.core.ssa._GatherDefsHandler object at 0x000002410CE5AFA0>
DEBUG 2022-01-28 15:49:20,758 on stmt: $114load_global.0 = global(math: <module 'math' (built-in)>)
DEBUG 2022-01-28 15:49:20,758 on stmt: $116load_method.1 = getattr(value=$114load_global.0, attr=pow)
DEBUG 2022-01-28 15:49:20,758 on stmt: $120load_global.3 = global(float: <class 'float'>)
DEBUG 2022-01-28 15:49:20,758 on stmt: $124call_function.5 = call $120load_global.3(b, func=$120load_global.3, args=[Var(b, numbers.py:217)], kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:20,758 on stmt: $126call_method.6 = call $116load_method.1(a.1, $124call_function.5, func=$116load_method.1, args=[Var(a.1, numbers.py:218), Var($124call_function.5, numbers.py:237)], kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:20,758 on stmt: $128return_value.7 = cast(value=$126call_method.6)
DEBUG 2022-01-28 15:49:20,758 on stmt: return $128return_value.7
DEBUG 2022-01-28 15:49:20,758 ==== SSA block analysis pass on 130
DEBUG 2022-01-28 15:49:20,758 Running <numba.core.ssa._GatherDefsHandler object at 0x000002410CE5AFA0>
DEBUG 2022-01-28 15:49:20,758 on stmt: $const132.1 = const(int, 0)
DEBUG 2022-01-28 15:49:20,758 on stmt: $134compare_op.2 = exp != $const132.1
DEBUG 2022-01-28 15:49:20,758 on stmt: bool136 = global(bool: <class 'bool'>)
DEBUG 2022-01-28 15:49:20,758 on stmt: $136pred = call bool136($134compare_op.2, func=bool136, args=(Var($134compare_op.2, numbers.py:238),), kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:20,758 on stmt: branch $136pred, 138, 172
DEBUG 2022-01-28 15:49:20,758 ==== SSA block analysis pass on 138
DEBUG 2022-01-28 15:49:20,758 Running <numba.core.ssa._GatherDefsHandler object at 0x000002410CE5AFA0>
DEBUG 2022-01-28 15:49:20,758 on stmt: $const140.1 = const(int, 1)
DEBUG 2022-01-28 15:49:20,758 on stmt: $142binary_and.2 = exp & $const140.1
DEBUG 2022-01-28 15:49:20,758 on stmt: bool144 = global(bool: <class 'bool'>)
DEBUG 2022-01-28 15:49:20,758 on stmt: $144pred = call bool144($142binary_and.2, func=bool144, args=(Var($142binary_and.2, numbers.py:239),), kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:20,758 on stmt: branch $144pred, 146, 154
DEBUG 2022-01-28 15:49:20,758 ==== SSA block analysis pass on 146
DEBUG 2022-01-28 15:49:20,758 Running <numba.core.ssa._GatherDefsHandler object at 0x000002410CE5AFA0>
DEBUG 2022-01-28 15:49:20,758 on stmt: $150inplace_multiply.2 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=r, rhs=a.1, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-01-28 15:49:20,758 on stmt: r = $150inplace_multiply.2
DEBUG 2022-01-28 15:49:20,758 on stmt: jump 154
DEBUG 2022-01-28 15:49:20,758 ==== SSA block analysis pass on 154
DEBUG 2022-01-28 15:49:20,758 Running <numba.core.ssa._GatherDefsHandler object at 0x000002410CE5AFA0>
DEBUG 2022-01-28 15:49:20,766 on stmt: $const156.1 = const(int, 1)
DEBUG 2022-01-28 15:49:20,766 on stmt: $158inplace_rshift.2 = inplace_binop(fn=<built-in function irshift>, immutable_fn=<built-in function rshift>, lhs=exp, rhs=$const156.1, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-01-28 15:49:20,766 on stmt: exp = $158inplace_rshift.2
DEBUG 2022-01-28 15:49:20,766 on stmt: $166inplace_multiply.5 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=a.1, rhs=a.1, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-01-28 15:49:20,766 on stmt: a.1 = $166inplace_multiply.5
DEBUG 2022-01-28 15:49:20,766 on stmt: jump 130
DEBUG 2022-01-28 15:49:20,766 ==== SSA block analysis pass on 172
DEBUG 2022-01-28 15:49:20,766 Running <numba.core.ssa._GatherDefsHandler object at 0x000002410CE5AFA0>
DEBUG 2022-01-28 15:49:20,766 on stmt: bool174 = global(bool: <class 'bool'>)
DEBUG 2022-01-28 15:49:20,766 on stmt: $174pred = call bool174(invert, func=bool174, args=(Var(invert, numbers.py:220),), kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:20,766 on stmt: branch $174pred, 176, 184
DEBUG 2022-01-28 15:49:20,766 ==== SSA block analysis pass on 176
DEBUG 2022-01-28 15:49:20,766 Running <numba.core.ssa._GatherDefsHandler object at 0x000002410CE5AFA0>
DEBUG 2022-01-28 15:49:20,766 on stmt: $const176.0 = const(float, 1.0)
DEBUG 2022-01-28 15:49:20,766 on stmt: $180binary_true_divide.2 = $const176.0 / r
DEBUG 2022-01-28 15:49:20,766 on stmt: $182return_value.3 = cast(value=$180binary_true_divide.2)
DEBUG 2022-01-28 15:49:20,766 on stmt: return $182return_value.3
DEBUG 2022-01-28 15:49:20,766 ==== SSA block analysis pass on 184
DEBUG 2022-01-28 15:49:20,766 Running <numba.core.ssa._GatherDefsHandler object at 0x000002410CE5AFA0>
DEBUG 2022-01-28 15:49:20,766 on stmt: $186return_value.1 = cast(value=r)
DEBUG 2022-01-28 15:49:20,766 on stmt: return $186return_value.1
DEBUG 2022-01-28 15:49:20,766 defs defaultdict(<class 'list'>,
            {'$10load_deref.3': [<numba.core.ir.Assign object at 0x000002410CE3FB50>],
             '$110compare_op.2': [<numba.core.ir.Assign object at 0x000002410CE52E20>],
             '$112pred': [<numba.core.ir.Assign object at 0x000002410CE540D0>],
             '$114load_global.0': [<numba.core.ir.Assign object at 0x000002410CE54310>],
             '$116load_method.1': [<numba.core.ir.Assign object at 0x000002410CE54490>],
             '$120load_global.3': [<numba.core.ir.Assign object at 0x000002410CE54730>],
             '$124call_function.5': [<numba.core.ir.Assign object at 0x000002410CE54A30>],
             '$126call_method.6': [<numba.core.ir.Assign object at 0x000002410CE54BE0>],
             '$128return_value.7': [<numba.core.ir.Assign object at 0x000002410CE54CD0>],
             '$134compare_op.2': [<numba.core.ir.Assign object at 0x000002410CE561C0>],
             '$136pred': [<numba.core.ir.Assign object at 0x000002410CE56430>],
             '$142binary_and.2': [<numba.core.ir.Assign object at 0x000002410CE56940>],
             '$144pred': [<numba.core.ir.Assign object at 0x000002410CE56BB0>],
             '$150inplace_multiply.2': [<numba.core.ir.Assign object at 0x000002410CE580A0>],
             '$158inplace_rshift.2': [<numba.core.ir.Assign object at 0x000002410CE585E0>],
             '$166inplace_multiply.5': [<numba.core.ir.Assign object at 0x000002410CE58A60>],
             '$174pred': [<numba.core.ir.Assign object at 0x000002410CE58F10>],
             '$180binary_true_divide.2': [<numba.core.ir.Assign object at 0x000002410CE5A460>],
             '$182return_value.3': [<numba.core.ir.Assign object at 0x000002410CE5A5B0>],
             '$186return_value.1': [<numba.core.ir.Assign object at 0x000002410CE5A910>],
             '$22compare_op.8': [<numba.core.ir.Assign object at 0x000002410CE463A0>],
             '$24pred': [<numba.core.ir.Assign object at 0x000002410CE46610>],
             '$2load_deref.0': [<numba.core.ir.Assign object at 0x000002410CE3F070>],
             '$40compare_op.5': [<numba.core.ir.Assign object at 0x000002410CE4C0A0>],
             '$42pred': [<numba.core.ir.Assign object at 0x000002410CE4C310>],
             '$44load_global.0': [<numba.core.ir.Assign object at 0x000002410CE4C430>],
             '$48load_deref.0': [<numba.core.ir.Assign object at 0x000002410CE4C730>],
             '$50pred': [<numba.core.ir.Assign object at 0x000002410CE4C9D0>],
             '$const108.1': [<numba.core.ir.Assign object at 0x000002410CE52C70>],
             '$const132.1': [<numba.core.ir.Assign object at 0x000002410CE54FD0>],
             '$const140.1': [<numba.core.ir.Assign object at 0x000002410CE56790>],
             '$const156.1': [<numba.core.ir.Assign object at 0x000002410CE58430>],
             '$const176.0': [<numba.core.ir.Assign object at 0x000002410CE5A190>],
             '$const20.7': [<numba.core.ir.Assign object at 0x000002410CE461F0>],
             '$const38.4': [<numba.core.ir.Assign object at 0x000002410CE46EB0>],
             '$const4.1': [<numba.core.ir.Assign object at 0x000002410CE3F730>],
             'a': [<numba.core.ir.Assign object at 0x000002410CE3F310>],
             'a.1': [<numba.core.ir.Assign object at 0x000002410CE3FE50>,
                     <numba.core.ir.Assign object at 0x000002410CE58B20>],
             'b': [<numba.core.ir.Assign object at 0x000002410CE3F1F0>],
             'bool112': [<numba.core.ir.Assign object at 0x000002410CE52F70>],
             'bool136': [<numba.core.ir.Assign object at 0x000002410CE56310>],
             'bool144': [<numba.core.ir.Assign object at 0x000002410CE56A90>],
             'bool174': [<numba.core.ir.Assign object at 0x000002410CE58DF0>],
             'bool24': [<numba.core.ir.Assign object at 0x000002410CE464F0>],
             'bool42': [<numba.core.ir.Assign object at 0x000002410CE4C1F0>],
             'bool50': [<numba.core.ir.Assign object at 0x000002410CE4C8B0>],
             'exp': [<numba.core.ir.Assign object at 0x000002410CE46AF0>,
                     <numba.core.ir.Assign object at 0x000002410CE52A00>,
                     <numba.core.ir.Assign object at 0x000002410CE586A0>],
             'invert': [<numba.core.ir.Assign object at 0x000002410CE46730>,
                        <numba.core.ir.Assign object at 0x000002410CE52730>],
             'r': [<numba.core.ir.Assign object at 0x000002410CE3F910>,
                   <numba.core.ir.Assign object at 0x000002410CE58160>]})
DEBUG 2022-01-28 15:49:20,766 SSA violators {'invert', 'r', 'a.1', 'exp'}
DEBUG 2022-01-28 15:49:20,766 Fix SSA violator on var invert
DEBUG 2022-01-28 15:49:20,766 ==== SSA block rewrite pass on 0
DEBUG 2022-01-28 15:49:20,766 Running <numba.core.ssa._FreshVarHandler object at 0x000002410CE5A070>
DEBUG 2022-01-28 15:49:20,766 on stmt: a = arg(0, name=a)
DEBUG 2022-01-28 15:49:20,766 on stmt: b = arg(1, name=b)
DEBUG 2022-01-28 15:49:20,766 on stmt: $2load_deref.0 = freevar(tp: float64)
DEBUG 2022-01-28 15:49:20,766 on stmt: $const4.1 = const(int, 1)
DEBUG 2022-01-28 15:49:20,766 on stmt: r = call $2load_deref.0($const4.1, func=$2load_deref.0, args=[Var($const4.1, numbers.py:217)], kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:20,766 on stmt: $10load_deref.3 = freevar(tp: float64)
DEBUG 2022-01-28 15:49:20,766 on stmt: a.1 = call $10load_deref.3(a, func=$10load_deref.3, args=[Var(a, numbers.py:217)], kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:20,766 on stmt: $const20.7 = const(int, 0)
DEBUG 2022-01-28 15:49:20,766 on stmt: $22compare_op.8 = b < $const20.7
DEBUG 2022-01-28 15:49:20,766 on stmt: bool24 = global(bool: <class 'bool'>)
DEBUG 2022-01-28 15:49:20,766 on stmt: $24pred = call bool24($22compare_op.8, func=bool24, args=(Var($22compare_op.8, numbers.py:219),), kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:20,766 on stmt: branch $24pred, 26, 98
DEBUG 2022-01-28 15:49:20,766 ==== SSA block rewrite pass on 26
DEBUG 2022-01-28 15:49:20,766 Running <numba.core.ssa._FreshVarHandler object at 0x000002410CE5A070>
DEBUG 2022-01-28 15:49:20,766 on stmt: invert = const(bool, True)
DEBUG 2022-01-28 15:49:20,766 first assign: invert
DEBUG 2022-01-28 15:49:20,766 replaced with: invert = const(bool, True)
DEBUG 2022-01-28 15:49:20,766 on stmt: exp = unary(fn=<built-in function neg>, value=b)
DEBUG 2022-01-28 15:49:20,766 on stmt: $const38.4 = const(int, 0)
DEBUG 2022-01-28 15:49:20,766 on stmt: $40compare_op.5 = exp < $const38.4
DEBUG 2022-01-28 15:49:20,766 on stmt: bool42 = global(bool: <class 'bool'>)
DEBUG 2022-01-28 15:49:20,766 on stmt: $42pred = call bool42($40compare_op.5, func=bool42, args=(Var($40compare_op.5, numbers.py:222),), kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:20,766 on stmt: branch $42pred, 44, 48
DEBUG 2022-01-28 15:49:20,766 ==== SSA block rewrite pass on 44
DEBUG 2022-01-28 15:49:20,766 Running <numba.core.ssa._FreshVarHandler object at 0x000002410CE5A070>
DEBUG 2022-01-28 15:49:20,766 on stmt: $44load_global.0 = global(OverflowError: <class 'OverflowError'>)
DEBUG 2022-01-28 15:49:20,766 on stmt: <static> raise <class 'OverflowError'>
DEBUG 2022-01-28 15:49:20,766 ==== SSA block rewrite pass on 48
DEBUG 2022-01-28 15:49:20,766 Running <numba.core.ssa._FreshVarHandler object at 0x000002410CE5A070>
DEBUG 2022-01-28 15:49:20,766 on stmt: $48load_deref.0 = freevar(is_integer: False)
DEBUG 2022-01-28 15:49:20,766 on stmt: bool50 = global(bool: <class 'bool'>)
DEBUG 2022-01-28 15:49:20,766 on stmt: $50pred = call bool50($48load_deref.0, func=bool50, args=(Var($48load_deref.0, numbers.py:224),), kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:20,766 on stmt: jump 106
DEBUG 2022-01-28 15:49:20,766 ==== SSA block rewrite pass on 98
DEBUG 2022-01-28 15:49:20,766 Running <numba.core.ssa._FreshVarHandler object at 0x000002410CE5A070>
DEBUG 2022-01-28 15:49:20,766 on stmt: invert = const(bool, False)
DEBUG 2022-01-28 15:49:20,766 replaced with: invert.1 = const(bool, False)
DEBUG 2022-01-28 15:49:20,766 on stmt: exp = b
DEBUG 2022-01-28 15:49:20,766 on stmt: jump 106
DEBUG 2022-01-28 15:49:20,766 ==== SSA block rewrite pass on 106
DEBUG 2022-01-28 15:49:20,766 Running <numba.core.ssa._FreshVarHandler object at 0x000002410CE5A070>
DEBUG 2022-01-28 15:49:20,766 on stmt: $const108.1 = const(int, 65536)
DEBUG 2022-01-28 15:49:20,766 on stmt: $110compare_op.2 = exp > $const108.1
DEBUG 2022-01-28 15:49:20,766 on stmt: bool112 = global(bool: <class 'bool'>)
DEBUG 2022-01-28 15:49:20,766 on stmt: $112pred = call bool112($110compare_op.2, func=bool112, args=(Var($110compare_op.2, numbers.py:235),), kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:20,766 on stmt: branch $112pred, 114, 130
DEBUG 2022-01-28 15:49:20,766 ==== SSA block rewrite pass on 114
DEBUG 2022-01-28 15:49:20,766 Running <numba.core.ssa._FreshVarHandler object at 0x000002410CE5A070>
DEBUG 2022-01-28 15:49:20,766 on stmt: $114load_global.0 = global(math: <module 'math' (built-in)>)
DEBUG 2022-01-28 15:49:20,766 on stmt: $116load_method.1 = getattr(value=$114load_global.0, attr=pow)
DEBUG 2022-01-28 15:49:20,766 on stmt: $120load_global.3 = global(float: <class 'float'>)
DEBUG 2022-01-28 15:49:20,766 on stmt: $124call_function.5 = call $120load_global.3(b, func=$120load_global.3, args=[Var(b, numbers.py:217)], kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:20,766 on stmt: $126call_method.6 = call $116load_method.1(a.1, $124call_function.5, func=$116load_method.1, args=[Var(a.1, numbers.py:218), Var($124call_function.5, numbers.py:237)], kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:20,766 on stmt: $128return_value.7 = cast(value=$126call_method.6)
DEBUG 2022-01-28 15:49:20,766 on stmt: return $128return_value.7
DEBUG 2022-01-28 15:49:20,766 ==== SSA block rewrite pass on 130
DEBUG 2022-01-28 15:49:20,766 Running <numba.core.ssa._FreshVarHandler object at 0x000002410CE5A070>
DEBUG 2022-01-28 15:49:20,766 on stmt: $const132.1 = const(int, 0)
DEBUG 2022-01-28 15:49:20,766 on stmt: $134compare_op.2 = exp != $const132.1
DEBUG 2022-01-28 15:49:20,766 on stmt: bool136 = global(bool: <class 'bool'>)
DEBUG 2022-01-28 15:49:20,766 on stmt: $136pred = call bool136($134compare_op.2, func=bool136, args=(Var($134compare_op.2, numbers.py:238),), kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:20,766 on stmt: branch $136pred, 138, 172
DEBUG 2022-01-28 15:49:20,766 ==== SSA block rewrite pass on 138
DEBUG 2022-01-28 15:49:20,766 Running <numba.core.ssa._FreshVarHandler object at 0x000002410CE5A070>
DEBUG 2022-01-28 15:49:20,766 on stmt: $const140.1 = const(int, 1)
DEBUG 2022-01-28 15:49:20,766 on stmt: $142binary_and.2 = exp & $const140.1
DEBUG 2022-01-28 15:49:20,766 on stmt: bool144 = global(bool: <class 'bool'>)
DEBUG 2022-01-28 15:49:20,766 on stmt: $144pred = call bool144($142binary_and.2, func=bool144, args=(Var($142binary_and.2, numbers.py:239),), kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:20,766 on stmt: branch $144pred, 146, 154
DEBUG 2022-01-28 15:49:20,766 ==== SSA block rewrite pass on 146
DEBUG 2022-01-28 15:49:20,766 Running <numba.core.ssa._FreshVarHandler object at 0x000002410CE5A070>
DEBUG 2022-01-28 15:49:20,766 on stmt: $150inplace_multiply.2 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=r, rhs=a.1, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-01-28 15:49:20,766 on stmt: r = $150inplace_multiply.2
DEBUG 2022-01-28 15:49:20,766 on stmt: jump 154
DEBUG 2022-01-28 15:49:20,766 ==== SSA block rewrite pass on 154
DEBUG 2022-01-28 15:49:20,766 Running <numba.core.ssa._FreshVarHandler object at 0x000002410CE5A070>
DEBUG 2022-01-28 15:49:20,766 on stmt: $const156.1 = const(int, 1)
DEBUG 2022-01-28 15:49:20,766 on stmt: $158inplace_rshift.2 = inplace_binop(fn=<built-in function irshift>, immutable_fn=<built-in function rshift>, lhs=exp, rhs=$const156.1, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-01-28 15:49:20,766 on stmt: exp = $158inplace_rshift.2
DEBUG 2022-01-28 15:49:20,766 on stmt: $166inplace_multiply.5 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=a.1, rhs=a.1, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-01-28 15:49:20,776 on stmt: a.1 = $166inplace_multiply.5
DEBUG 2022-01-28 15:49:20,776 on stmt: jump 130
DEBUG 2022-01-28 15:49:20,776 ==== SSA block rewrite pass on 172
DEBUG 2022-01-28 15:49:20,776 Running <numba.core.ssa._FreshVarHandler object at 0x000002410CE5A070>
DEBUG 2022-01-28 15:49:20,776 on stmt: bool174 = global(bool: <class 'bool'>)
DEBUG 2022-01-28 15:49:20,776 on stmt: $174pred = call bool174(invert, func=bool174, args=(Var(invert, numbers.py:220),), kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:20,776 on stmt: branch $174pred, 176, 184
DEBUG 2022-01-28 15:49:20,776 ==== SSA block rewrite pass on 176
DEBUG 2022-01-28 15:49:20,776 Running <numba.core.ssa._FreshVarHandler object at 0x000002410CE5A070>
DEBUG 2022-01-28 15:49:20,776 on stmt: $const176.0 = const(float, 1.0)
DEBUG 2022-01-28 15:49:20,776 on stmt: $180binary_true_divide.2 = $const176.0 / r
DEBUG 2022-01-28 15:49:20,776 on stmt: $182return_value.3 = cast(value=$180binary_true_divide.2)
DEBUG 2022-01-28 15:49:20,776 on stmt: return $182return_value.3
DEBUG 2022-01-28 15:49:20,776 ==== SSA block rewrite pass on 184
DEBUG 2022-01-28 15:49:20,776 Running <numba.core.ssa._FreshVarHandler object at 0x000002410CE5A070>
DEBUG 2022-01-28 15:49:20,776 on stmt: $186return_value.1 = cast(value=r)
DEBUG 2022-01-28 15:49:20,776 on stmt: return $186return_value.1
DEBUG 2022-01-28 15:49:20,776 Replaced assignments: defaultdict(<class 'list'>,
            {26: [<numba.core.ir.Assign object at 0x000002410CE393D0>],
             98: [<numba.core.ir.Assign object at 0x000002410CE39490>]})
DEBUG 2022-01-28 15:49:20,776 ==== SSA block rewrite pass on 0
DEBUG 2022-01-28 15:49:20,776 Running <numba.core.ssa._FixSSAVars object at 0x000002410CE5A070>
DEBUG 2022-01-28 15:49:20,776 on stmt: a = arg(0, name=a)
DEBUG 2022-01-28 15:49:20,776 on stmt: b = arg(1, name=b)
DEBUG 2022-01-28 15:49:20,776 on stmt: $2load_deref.0 = freevar(tp: float64)
DEBUG 2022-01-28 15:49:20,779 on stmt: $const4.1 = const(int, 1)
DEBUG 2022-01-28 15:49:20,779 on stmt: r = call $2load_deref.0($const4.1, func=$2load_deref.0, args=[Var($const4.1, numbers.py:217)], kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:20,779 on stmt: $10load_deref.3 = freevar(tp: float64)
DEBUG 2022-01-28 15:49:20,779 on stmt: a.1 = call $10load_deref.3(a, func=$10load_deref.3, args=[Var(a, numbers.py:217)], kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:20,779 on stmt: $const20.7 = const(int, 0)
DEBUG 2022-01-28 15:49:20,779 on stmt: $22compare_op.8 = b < $const20.7
DEBUG 2022-01-28 15:49:20,779 on stmt: bool24 = global(bool: <class 'bool'>)
DEBUG 2022-01-28 15:49:20,779 on stmt: $24pred = call bool24($22compare_op.8, func=bool24, args=(Var($22compare_op.8, numbers.py:219),), kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:20,779 on stmt: branch $24pred, 26, 98
DEBUG 2022-01-28 15:49:20,779 ==== SSA block rewrite pass on 26
DEBUG 2022-01-28 15:49:20,779 Running <numba.core.ssa._FixSSAVars object at 0x000002410CE5A070>
DEBUG 2022-01-28 15:49:20,779 on stmt: invert = const(bool, True)
DEBUG 2022-01-28 15:49:20,779 on stmt: exp = unary(fn=<built-in function neg>, value=b)
DEBUG 2022-01-28 15:49:20,779 on stmt: $const38.4 = const(int, 0)
DEBUG 2022-01-28 15:49:20,779 on stmt: $40compare_op.5 = exp < $const38.4
DEBUG 2022-01-28 15:49:20,779 on stmt: bool42 = global(bool: <class 'bool'>)
DEBUG 2022-01-28 15:49:20,779 on stmt: $42pred = call bool42($40compare_op.5, func=bool42, args=(Var($40compare_op.5, numbers.py:222),), kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:20,779 on stmt: branch $42pred, 44, 48
DEBUG 2022-01-28 15:49:20,779 ==== SSA block rewrite pass on 44
DEBUG 2022-01-28 15:49:20,779 Running <numba.core.ssa._FixSSAVars object at 0x000002410CE5A070>
DEBUG 2022-01-28 15:49:20,779 on stmt: $44load_global.0 = global(OverflowError: <class 'OverflowError'>)
DEBUG 2022-01-28 15:49:20,779 on stmt: <static> raise <class 'OverflowError'>
DEBUG 2022-01-28 15:49:20,779 ==== SSA block rewrite pass on 48
DEBUG 2022-01-28 15:49:20,779 Running <numba.core.ssa._FixSSAVars object at 0x000002410CE5A070>
DEBUG 2022-01-28 15:49:20,779 on stmt: $48load_deref.0 = freevar(is_integer: False)
DEBUG 2022-01-28 15:49:20,779 on stmt: bool50 = global(bool: <class 'bool'>)
DEBUG 2022-01-28 15:49:20,779 on stmt: $50pred = call bool50($48load_deref.0, func=bool50, args=(Var($48load_deref.0, numbers.py:224),), kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:20,779 on stmt: jump 106
DEBUG 2022-01-28 15:49:20,779 ==== SSA block rewrite pass on 98
DEBUG 2022-01-28 15:49:20,779 Running <numba.core.ssa._FixSSAVars object at 0x000002410CE5A070>
DEBUG 2022-01-28 15:49:20,779 on stmt: invert.1 = const(bool, False)
DEBUG 2022-01-28 15:49:20,779 on stmt: exp = b
DEBUG 2022-01-28 15:49:20,779 on stmt: jump 106
DEBUG 2022-01-28 15:49:20,779 ==== SSA block rewrite pass on 106
DEBUG 2022-01-28 15:49:20,779 Running <numba.core.ssa._FixSSAVars object at 0x000002410CE5A070>
DEBUG 2022-01-28 15:49:20,779 on stmt: $const108.1 = const(int, 65536)
DEBUG 2022-01-28 15:49:20,779 on stmt: $110compare_op.2 = exp > $const108.1
DEBUG 2022-01-28 15:49:20,779 on stmt: bool112 = global(bool: <class 'bool'>)
DEBUG 2022-01-28 15:49:20,779 on stmt: $112pred = call bool112($110compare_op.2, func=bool112, args=(Var($110compare_op.2, numbers.py:235),), kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:20,779 on stmt: branch $112pred, 114, 130
DEBUG 2022-01-28 15:49:20,779 ==== SSA block rewrite pass on 114
DEBUG 2022-01-28 15:49:20,779 Running <numba.core.ssa._FixSSAVars object at 0x000002410CE5A070>
DEBUG 2022-01-28 15:49:20,779 on stmt: $114load_global.0 = global(math: <module 'math' (built-in)>)
DEBUG 2022-01-28 15:49:20,779 on stmt: $116load_method.1 = getattr(value=$114load_global.0, attr=pow)
DEBUG 2022-01-28 15:49:20,779 on stmt: $120load_global.3 = global(float: <class 'float'>)
DEBUG 2022-01-28 15:49:20,779 on stmt: $124call_function.5 = call $120load_global.3(b, func=$120load_global.3, args=[Var(b, numbers.py:217)], kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:20,779 on stmt: $126call_method.6 = call $116load_method.1(a.1, $124call_function.5, func=$116load_method.1, args=[Var(a.1, numbers.py:218), Var($124call_function.5, numbers.py:237)], kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:20,779 on stmt: $128return_value.7 = cast(value=$126call_method.6)
DEBUG 2022-01-28 15:49:20,779 on stmt: return $128return_value.7
DEBUG 2022-01-28 15:49:20,779 ==== SSA block rewrite pass on 130
DEBUG 2022-01-28 15:49:20,779 Running <numba.core.ssa._FixSSAVars object at 0x000002410CE5A070>
DEBUG 2022-01-28 15:49:20,779 on stmt: $const132.1 = const(int, 0)
DEBUG 2022-01-28 15:49:20,779 on stmt: $134compare_op.2 = exp != $const132.1
DEBUG 2022-01-28 15:49:20,779 on stmt: bool136 = global(bool: <class 'bool'>)
DEBUG 2022-01-28 15:49:20,779 on stmt: $136pred = call bool136($134compare_op.2, func=bool136, args=(Var($134compare_op.2, numbers.py:238),), kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:20,779 on stmt: branch $136pred, 138, 172
DEBUG 2022-01-28 15:49:20,779 ==== SSA block rewrite pass on 138
DEBUG 2022-01-28 15:49:20,779 Running <numba.core.ssa._FixSSAVars object at 0x000002410CE5A070>
DEBUG 2022-01-28 15:49:20,779 on stmt: $const140.1 = const(int, 1)
DEBUG 2022-01-28 15:49:20,779 on stmt: $142binary_and.2 = exp & $const140.1
DEBUG 2022-01-28 15:49:20,779 on stmt: bool144 = global(bool: <class 'bool'>)
DEBUG 2022-01-28 15:49:20,779 on stmt: $144pred = call bool144($142binary_and.2, func=bool144, args=(Var($142binary_and.2, numbers.py:239),), kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:20,779 on stmt: branch $144pred, 146, 154
DEBUG 2022-01-28 15:49:20,779 ==== SSA block rewrite pass on 146
DEBUG 2022-01-28 15:49:20,779 Running <numba.core.ssa._FixSSAVars object at 0x000002410CE5A070>
DEBUG 2022-01-28 15:49:20,779 on stmt: $150inplace_multiply.2 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=r, rhs=a.1, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-01-28 15:49:20,779 on stmt: r = $150inplace_multiply.2
DEBUG 2022-01-28 15:49:20,779 on stmt: jump 154
DEBUG 2022-01-28 15:49:20,779 ==== SSA block rewrite pass on 154
DEBUG 2022-01-28 15:49:20,779 Running <numba.core.ssa._FixSSAVars object at 0x000002410CE5A070>
DEBUG 2022-01-28 15:49:20,779 on stmt: $const156.1 = const(int, 1)
DEBUG 2022-01-28 15:49:20,779 on stmt: $158inplace_rshift.2 = inplace_binop(fn=<built-in function irshift>, immutable_fn=<built-in function rshift>, lhs=exp, rhs=$const156.1, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-01-28 15:49:20,779 on stmt: exp = $158inplace_rshift.2
DEBUG 2022-01-28 15:49:20,779 on stmt: $166inplace_multiply.5 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=a.1, rhs=a.1, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-01-28 15:49:20,779 on stmt: a.1 = $166inplace_multiply.5
DEBUG 2022-01-28 15:49:20,779 on stmt: jump 130
DEBUG 2022-01-28 15:49:20,779 ==== SSA block rewrite pass on 172
DEBUG 2022-01-28 15:49:20,779 Running <numba.core.ssa._FixSSAVars object at 0x000002410CE5A070>
DEBUG 2022-01-28 15:49:20,779 on stmt: bool174 = global(bool: <class 'bool'>)
DEBUG 2022-01-28 15:49:20,779 on stmt: $174pred = call bool174(invert, func=bool174, args=(Var(invert, numbers.py:220),), kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:20,779 find_def var='invert' stmt=$174pred = call bool174(invert, func=bool174, args=(Var(invert, numbers.py:220),), kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:20,779 find_def_from_top label 172
DEBUG 2022-01-28 15:49:20,779 idom 130 from label 172
DEBUG 2022-01-28 15:49:20,779 find_def_from_bottom label 130
DEBUG 2022-01-28 15:49:20,779 find_def_from_top label 130
DEBUG 2022-01-28 15:49:20,787 idom 106 from label 130
DEBUG 2022-01-28 15:49:20,787 find_def_from_bottom label 106
DEBUG 2022-01-28 15:49:20,787 find_def_from_top label 106
DEBUG 2022-01-28 15:49:20,787 insert phi node invert.2 = phi(incoming_values=[], incoming_blocks=[]) at 106
DEBUG 2022-01-28 15:49:20,787 find_def_from_bottom label 48
DEBUG 2022-01-28 15:49:20,787 find_def_from_top label 48
DEBUG 2022-01-28 15:49:20,787 idom 26 from label 48
DEBUG 2022-01-28 15:49:20,787 find_def_from_bottom label 26
DEBUG 2022-01-28 15:49:20,787 incoming_def invert = const(bool, True)
DEBUG 2022-01-28 15:49:20,787 find_def_from_bottom label 98
DEBUG 2022-01-28 15:49:20,787 incoming_def invert.1 = const(bool, False)
DEBUG 2022-01-28 15:49:20,787 replaced with: $174pred = call bool174(invert.2, func=bool174, args=(Var(invert.2, numbers.py:244),), kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:20,787 on stmt: branch $174pred, 176, 184
DEBUG 2022-01-28 15:49:20,787 ==== SSA block rewrite pass on 176
DEBUG 2022-01-28 15:49:20,787 Running <numba.core.ssa._FixSSAVars object at 0x000002410CE5A070>
DEBUG 2022-01-28 15:49:20,787 on stmt: $const176.0 = const(float, 1.0)
DEBUG 2022-01-28 15:49:20,787 on stmt: $180binary_true_divide.2 = $const176.0 / r
DEBUG 2022-01-28 15:49:20,787 on stmt: $182return_value.3 = cast(value=$180binary_true_divide.2)
DEBUG 2022-01-28 15:49:20,787 on stmt: return $182return_value.3
DEBUG 2022-01-28 15:49:20,787 ==== SSA block rewrite pass on 184
DEBUG 2022-01-28 15:49:20,787 Running <numba.core.ssa._FixSSAVars object at 0x000002410CE5A070>
DEBUG 2022-01-28 15:49:20,787 on stmt: $186return_value.1 = cast(value=r)
DEBUG 2022-01-28 15:49:20,789 on stmt: return $186return_value.1
DEBUG 2022-01-28 15:49:20,789 Fix SSA violator on var r
DEBUG 2022-01-28 15:49:20,789 ==== SSA block rewrite pass on 0
DEBUG 2022-01-28 15:49:20,789 Running <numba.core.ssa._FreshVarHandler object at 0x000002410CE5AA00>
DEBUG 2022-01-28 15:49:20,789 on stmt: a = arg(0, name=a)
DEBUG 2022-01-28 15:49:20,789 on stmt: b = arg(1, name=b)
DEBUG 2022-01-28 15:49:20,789 on stmt: $2load_deref.0 = freevar(tp: float64)
DEBUG 2022-01-28 15:49:20,789 on stmt: $const4.1 = const(int, 1)
DEBUG 2022-01-28 15:49:20,789 on stmt: r = call $2load_deref.0($const4.1, func=$2load_deref.0, args=[Var($const4.1, numbers.py:217)], kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:20,789 first assign: r
DEBUG 2022-01-28 15:49:20,789 replaced with: r = call $2load_deref.0($const4.1, func=$2load_deref.0, args=[Var($const4.1, numbers.py:217)], kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:20,789 on stmt: $10load_deref.3 = freevar(tp: float64)
DEBUG 2022-01-28 15:49:20,789 on stmt: a.1 = call $10load_deref.3(a, func=$10load_deref.3, args=[Var(a, numbers.py:217)], kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:20,789 on stmt: $const20.7 = const(int, 0)
DEBUG 2022-01-28 15:49:20,789 on stmt: $22compare_op.8 = b < $const20.7
DEBUG 2022-01-28 15:49:20,789 on stmt: bool24 = global(bool: <class 'bool'>)
DEBUG 2022-01-28 15:49:20,789 on stmt: $24pred = call bool24($22compare_op.8, func=bool24, args=(Var($22compare_op.8, numbers.py:219),), kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:20,789 on stmt: branch $24pred, 26, 98
DEBUG 2022-01-28 15:49:20,789 ==== SSA block rewrite pass on 26
DEBUG 2022-01-28 15:49:20,789 Running <numba.core.ssa._FreshVarHandler object at 0x000002410CE5AA00>
DEBUG 2022-01-28 15:49:20,789 on stmt: invert = const(bool, True)
DEBUG 2022-01-28 15:49:20,789 on stmt: exp = unary(fn=<built-in function neg>, value=b)
DEBUG 2022-01-28 15:49:20,789 on stmt: $const38.4 = const(int, 0)
DEBUG 2022-01-28 15:49:20,789 on stmt: $40compare_op.5 = exp < $const38.4
DEBUG 2022-01-28 15:49:20,789 on stmt: bool42 = global(bool: <class 'bool'>)
DEBUG 2022-01-28 15:49:20,789 on stmt: $42pred = call bool42($40compare_op.5, func=bool42, args=(Var($40compare_op.5, numbers.py:222),), kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:20,789 on stmt: branch $42pred, 44, 48
DEBUG 2022-01-28 15:49:20,789 ==== SSA block rewrite pass on 44
DEBUG 2022-01-28 15:49:20,789 Running <numba.core.ssa._FreshVarHandler object at 0x000002410CE5AA00>
DEBUG 2022-01-28 15:49:20,789 on stmt: $44load_global.0 = global(OverflowError: <class 'OverflowError'>)
DEBUG 2022-01-28 15:49:20,789 on stmt: <static> raise <class 'OverflowError'>
DEBUG 2022-01-28 15:49:20,789 ==== SSA block rewrite pass on 48
DEBUG 2022-01-28 15:49:20,789 Running <numba.core.ssa._FreshVarHandler object at 0x000002410CE5AA00>
DEBUG 2022-01-28 15:49:20,789 on stmt: $48load_deref.0 = freevar(is_integer: False)
DEBUG 2022-01-28 15:49:20,789 on stmt: bool50 = global(bool: <class 'bool'>)
DEBUG 2022-01-28 15:49:20,789 on stmt: $50pred = call bool50($48load_deref.0, func=bool50, args=(Var($48load_deref.0, numbers.py:224),), kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:20,789 on stmt: jump 106
DEBUG 2022-01-28 15:49:20,789 ==== SSA block rewrite pass on 98
DEBUG 2022-01-28 15:49:20,789 Running <numba.core.ssa._FreshVarHandler object at 0x000002410CE5AA00>
DEBUG 2022-01-28 15:49:20,789 on stmt: invert.1 = const(bool, False)
DEBUG 2022-01-28 15:49:20,789 on stmt: exp = b
DEBUG 2022-01-28 15:49:20,789 on stmt: jump 106
DEBUG 2022-01-28 15:49:20,789 ==== SSA block rewrite pass on 106
DEBUG 2022-01-28 15:49:20,789 Running <numba.core.ssa._FreshVarHandler object at 0x000002410CE5AA00>
DEBUG 2022-01-28 15:49:20,789 on stmt: invert.2 = phi(incoming_values=[Var(invert, numbers.py:220), Var(invert.1, numbers.py:233)], incoming_blocks=[48, 98])
DEBUG 2022-01-28 15:49:20,789 on stmt: $const108.1 = const(int, 65536)
DEBUG 2022-01-28 15:49:20,789 on stmt: $110compare_op.2 = exp > $const108.1
DEBUG 2022-01-28 15:49:20,789 on stmt: bool112 = global(bool: <class 'bool'>)
DEBUG 2022-01-28 15:49:20,789 on stmt: $112pred = call bool112($110compare_op.2, func=bool112, args=(Var($110compare_op.2, numbers.py:235),), kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:20,789 on stmt: branch $112pred, 114, 130
DEBUG 2022-01-28 15:49:20,789 ==== SSA block rewrite pass on 114
DEBUG 2022-01-28 15:49:20,789 Running <numba.core.ssa._FreshVarHandler object at 0x000002410CE5AA00>
DEBUG 2022-01-28 15:49:20,789 on stmt: $114load_global.0 = global(math: <module 'math' (built-in)>)
DEBUG 2022-01-28 15:49:20,789 on stmt: $116load_method.1 = getattr(value=$114load_global.0, attr=pow)
DEBUG 2022-01-28 15:49:20,789 on stmt: $120load_global.3 = global(float: <class 'float'>)
DEBUG 2022-01-28 15:49:20,789 on stmt: $124call_function.5 = call $120load_global.3(b, func=$120load_global.3, args=[Var(b, numbers.py:217)], kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:20,789 on stmt: $126call_method.6 = call $116load_method.1(a.1, $124call_function.5, func=$116load_method.1, args=[Var(a.1, numbers.py:218), Var($124call_function.5, numbers.py:237)], kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:20,789 on stmt: $128return_value.7 = cast(value=$126call_method.6)
DEBUG 2022-01-28 15:49:20,789 on stmt: return $128return_value.7
DEBUG 2022-01-28 15:49:20,789 ==== SSA block rewrite pass on 130
DEBUG 2022-01-28 15:49:20,789 Running <numba.core.ssa._FreshVarHandler object at 0x000002410CE5AA00>
DEBUG 2022-01-28 15:49:20,789 on stmt: $const132.1 = const(int, 0)
DEBUG 2022-01-28 15:49:20,789 on stmt: $134compare_op.2 = exp != $const132.1
DEBUG 2022-01-28 15:49:20,789 on stmt: bool136 = global(bool: <class 'bool'>)
DEBUG 2022-01-28 15:49:20,789 on stmt: $136pred = call bool136($134compare_op.2, func=bool136, args=(Var($134compare_op.2, numbers.py:238),), kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:20,789 on stmt: branch $136pred, 138, 172
DEBUG 2022-01-28 15:49:20,789 ==== SSA block rewrite pass on 138
DEBUG 2022-01-28 15:49:20,789 Running <numba.core.ssa._FreshVarHandler object at 0x000002410CE5AA00>
DEBUG 2022-01-28 15:49:20,789 on stmt: $const140.1 = const(int, 1)
DEBUG 2022-01-28 15:49:20,789 on stmt: $142binary_and.2 = exp & $const140.1
DEBUG 2022-01-28 15:49:20,789 on stmt: bool144 = global(bool: <class 'bool'>)
DEBUG 2022-01-28 15:49:20,789 on stmt: $144pred = call bool144($142binary_and.2, func=bool144, args=(Var($142binary_and.2, numbers.py:239),), kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:20,789 on stmt: branch $144pred, 146, 154
DEBUG 2022-01-28 15:49:20,789 ==== SSA block rewrite pass on 146
DEBUG 2022-01-28 15:49:20,789 Running <numba.core.ssa._FreshVarHandler object at 0x000002410CE5AA00>
DEBUG 2022-01-28 15:49:20,789 on stmt: $150inplace_multiply.2 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=r, rhs=a.1, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-01-28 15:49:20,789 on stmt: r = $150inplace_multiply.2
DEBUG 2022-01-28 15:49:20,789 replaced with: r.1 = $150inplace_multiply.2
DEBUG 2022-01-28 15:49:20,789 on stmt: jump 154
DEBUG 2022-01-28 15:49:20,789 ==== SSA block rewrite pass on 154
DEBUG 2022-01-28 15:49:20,789 Running <numba.core.ssa._FreshVarHandler object at 0x000002410CE5AA00>
DEBUG 2022-01-28 15:49:20,789 on stmt: $const156.1 = const(int, 1)
DEBUG 2022-01-28 15:49:20,789 on stmt: $158inplace_rshift.2 = inplace_binop(fn=<built-in function irshift>, immutable_fn=<built-in function rshift>, lhs=exp, rhs=$const156.1, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-01-28 15:49:20,789 on stmt: exp = $158inplace_rshift.2
DEBUG 2022-01-28 15:49:20,789 on stmt: $166inplace_multiply.5 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=a.1, rhs=a.1, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-01-28 15:49:20,789 on stmt: a.1 = $166inplace_multiply.5
DEBUG 2022-01-28 15:49:20,789 on stmt: jump 130
DEBUG 2022-01-28 15:49:20,797 ==== SSA block rewrite pass on 172
DEBUG 2022-01-28 15:49:20,797 Running <numba.core.ssa._FreshVarHandler object at 0x000002410CE5AA00>
DEBUG 2022-01-28 15:49:20,797 on stmt: bool174 = global(bool: <class 'bool'>)
DEBUG 2022-01-28 15:49:20,797 on stmt: $174pred = call bool174(invert.2, func=bool174, args=(Var(invert.2, numbers.py:244),), kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:20,797 on stmt: branch $174pred, 176, 184
DEBUG 2022-01-28 15:49:20,797 ==== SSA block rewrite pass on 176
DEBUG 2022-01-28 15:49:20,797 Running <numba.core.ssa._FreshVarHandler object at 0x000002410CE5AA00>
DEBUG 2022-01-28 15:49:20,797 on stmt: $const176.0 = const(float, 1.0)
DEBUG 2022-01-28 15:49:20,797 on stmt: $180binary_true_divide.2 = $const176.0 / r
DEBUG 2022-01-28 15:49:20,797 on stmt: $182return_value.3 = cast(value=$180binary_true_divide.2)
DEBUG 2022-01-28 15:49:20,797 on stmt: return $182return_value.3
DEBUG 2022-01-28 15:49:20,797 ==== SSA block rewrite pass on 184
DEBUG 2022-01-28 15:49:20,797 Running <numba.core.ssa._FreshVarHandler object at 0x000002410CE5AA00>
DEBUG 2022-01-28 15:49:20,797 on stmt: $186return_value.1 = cast(value=r)
DEBUG 2022-01-28 15:49:20,797 on stmt: return $186return_value.1
DEBUG 2022-01-28 15:49:20,797 Replaced assignments: defaultdict(<class 'list'>,
            {0: [<numba.core.ir.Assign object at 0x000002410CE5AAF0>],
             146: [<numba.core.ir.Assign object at 0x000002410CE396A0>]})
DEBUG 2022-01-28 15:49:20,797 ==== SSA block rewrite pass on 0
DEBUG 2022-01-28 15:49:20,797 Running <numba.core.ssa._FixSSAVars object at 0x000002410CE39880>
DEBUG 2022-01-28 15:49:20,797 on stmt: a = arg(0, name=a)
DEBUG 2022-01-28 15:49:20,797 on stmt: b = arg(1, name=b)
DEBUG 2022-01-28 15:49:20,799 on stmt: $2load_deref.0 = freevar(tp: float64)
DEBUG 2022-01-28 15:49:20,799 on stmt: $const4.1 = const(int, 1)
DEBUG 2022-01-28 15:49:20,799 on stmt: r = call $2load_deref.0($const4.1, func=$2load_deref.0, args=[Var($const4.1, numbers.py:217)], kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:20,799 on stmt: $10load_deref.3 = freevar(tp: float64)
DEBUG 2022-01-28 15:49:20,799 on stmt: a.1 = call $10load_deref.3(a, func=$10load_deref.3, args=[Var(a, numbers.py:217)], kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:20,799 on stmt: $const20.7 = const(int, 0)
DEBUG 2022-01-28 15:49:20,799 on stmt: $22compare_op.8 = b < $const20.7
DEBUG 2022-01-28 15:49:20,799 on stmt: bool24 = global(bool: <class 'bool'>)
DEBUG 2022-01-28 15:49:20,799 on stmt: $24pred = call bool24($22compare_op.8, func=bool24, args=(Var($22compare_op.8, numbers.py:219),), kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:20,799 on stmt: branch $24pred, 26, 98
DEBUG 2022-01-28 15:49:20,799 ==== SSA block rewrite pass on 26
DEBUG 2022-01-28 15:49:20,799 Running <numba.core.ssa._FixSSAVars object at 0x000002410CE39880>
DEBUG 2022-01-28 15:49:20,799 on stmt: invert = const(bool, True)
DEBUG 2022-01-28 15:49:20,799 on stmt: exp = unary(fn=<built-in function neg>, value=b)
DEBUG 2022-01-28 15:49:20,799 on stmt: $const38.4 = const(int, 0)
DEBUG 2022-01-28 15:49:20,799 on stmt: $40compare_op.5 = exp < $const38.4
DEBUG 2022-01-28 15:49:20,799 on stmt: bool42 = global(bool: <class 'bool'>)
DEBUG 2022-01-28 15:49:20,799 on stmt: $42pred = call bool42($40compare_op.5, func=bool42, args=(Var($40compare_op.5, numbers.py:222),), kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:20,799 on stmt: branch $42pred, 44, 48
DEBUG 2022-01-28 15:49:20,799 ==== SSA block rewrite pass on 44
DEBUG 2022-01-28 15:49:20,799 Running <numba.core.ssa._FixSSAVars object at 0x000002410CE39880>
DEBUG 2022-01-28 15:49:20,799 on stmt: $44load_global.0 = global(OverflowError: <class 'OverflowError'>)
DEBUG 2022-01-28 15:49:20,799 on stmt: <static> raise <class 'OverflowError'>
DEBUG 2022-01-28 15:49:20,799 ==== SSA block rewrite pass on 48
DEBUG 2022-01-28 15:49:20,799 Running <numba.core.ssa._FixSSAVars object at 0x000002410CE39880>
DEBUG 2022-01-28 15:49:20,799 on stmt: $48load_deref.0 = freevar(is_integer: False)
DEBUG 2022-01-28 15:49:20,799 on stmt: bool50 = global(bool: <class 'bool'>)
DEBUG 2022-01-28 15:49:20,799 on stmt: $50pred = call bool50($48load_deref.0, func=bool50, args=(Var($48load_deref.0, numbers.py:224),), kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:20,799 on stmt: jump 106
DEBUG 2022-01-28 15:49:20,799 ==== SSA block rewrite pass on 98
DEBUG 2022-01-28 15:49:20,799 Running <numba.core.ssa._FixSSAVars object at 0x000002410CE39880>
DEBUG 2022-01-28 15:49:20,799 on stmt: invert.1 = const(bool, False)
DEBUG 2022-01-28 15:49:20,799 on stmt: exp = b
DEBUG 2022-01-28 15:49:20,799 on stmt: jump 106
DEBUG 2022-01-28 15:49:20,799 ==== SSA block rewrite pass on 106
DEBUG 2022-01-28 15:49:20,799 Running <numba.core.ssa._FixSSAVars object at 0x000002410CE39880>
DEBUG 2022-01-28 15:49:20,799 on stmt: invert.2 = phi(incoming_values=[Var(invert, numbers.py:220), Var(invert.1, numbers.py:233)], incoming_blocks=[48, 98])
DEBUG 2022-01-28 15:49:20,799 on stmt: $const108.1 = const(int, 65536)
DEBUG 2022-01-28 15:49:20,799 on stmt: $110compare_op.2 = exp > $const108.1
DEBUG 2022-01-28 15:49:20,799 on stmt: bool112 = global(bool: <class 'bool'>)
DEBUG 2022-01-28 15:49:20,799 on stmt: $112pred = call bool112($110compare_op.2, func=bool112, args=(Var($110compare_op.2, numbers.py:235),), kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:20,799 on stmt: branch $112pred, 114, 130
DEBUG 2022-01-28 15:49:20,799 ==== SSA block rewrite pass on 114
DEBUG 2022-01-28 15:49:20,799 Running <numba.core.ssa._FixSSAVars object at 0x000002410CE39880>
DEBUG 2022-01-28 15:49:20,799 on stmt: $114load_global.0 = global(math: <module 'math' (built-in)>)
DEBUG 2022-01-28 15:49:20,799 on stmt: $116load_method.1 = getattr(value=$114load_global.0, attr=pow)
DEBUG 2022-01-28 15:49:20,799 on stmt: $120load_global.3 = global(float: <class 'float'>)
DEBUG 2022-01-28 15:49:20,799 on stmt: $124call_function.5 = call $120load_global.3(b, func=$120load_global.3, args=[Var(b, numbers.py:217)], kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:20,799 on stmt: $126call_method.6 = call $116load_method.1(a.1, $124call_function.5, func=$116load_method.1, args=[Var(a.1, numbers.py:218), Var($124call_function.5, numbers.py:237)], kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:20,799 on stmt: $128return_value.7 = cast(value=$126call_method.6)
DEBUG 2022-01-28 15:49:20,799 on stmt: return $128return_value.7
DEBUG 2022-01-28 15:49:20,799 ==== SSA block rewrite pass on 130
DEBUG 2022-01-28 15:49:20,799 Running <numba.core.ssa._FixSSAVars object at 0x000002410CE39880>
DEBUG 2022-01-28 15:49:20,799 on stmt: $const132.1 = const(int, 0)
DEBUG 2022-01-28 15:49:20,799 on stmt: $134compare_op.2 = exp != $const132.1
DEBUG 2022-01-28 15:49:20,799 on stmt: bool136 = global(bool: <class 'bool'>)
DEBUG 2022-01-28 15:49:20,799 on stmt: $136pred = call bool136($134compare_op.2, func=bool136, args=(Var($134compare_op.2, numbers.py:238),), kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:20,799 on stmt: branch $136pred, 138, 172
DEBUG 2022-01-28 15:49:20,799 ==== SSA block rewrite pass on 138
DEBUG 2022-01-28 15:49:20,799 Running <numba.core.ssa._FixSSAVars object at 0x000002410CE39880>
DEBUG 2022-01-28 15:49:20,799 on stmt: $const140.1 = const(int, 1)
DEBUG 2022-01-28 15:49:20,799 on stmt: $142binary_and.2 = exp & $const140.1
DEBUG 2022-01-28 15:49:20,799 on stmt: bool144 = global(bool: <class 'bool'>)
DEBUG 2022-01-28 15:49:20,799 on stmt: $144pred = call bool144($142binary_and.2, func=bool144, args=(Var($142binary_and.2, numbers.py:239),), kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:20,799 on stmt: branch $144pred, 146, 154
DEBUG 2022-01-28 15:49:20,799 ==== SSA block rewrite pass on 146
DEBUG 2022-01-28 15:49:20,799 Running <numba.core.ssa._FixSSAVars object at 0x000002410CE39880>
DEBUG 2022-01-28 15:49:20,799 on stmt: $150inplace_multiply.2 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=r, rhs=a.1, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-01-28 15:49:20,799 find_def var='r' stmt=$150inplace_multiply.2 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=r, rhs=a.1, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-01-28 15:49:20,799 find_def_from_top label 146
DEBUG 2022-01-28 15:49:20,799 idom 138 from label 146
DEBUG 2022-01-28 15:49:20,799 find_def_from_bottom label 138
DEBUG 2022-01-28 15:49:20,799 find_def_from_top label 138
DEBUG 2022-01-28 15:49:20,799 idom 130 from label 138
DEBUG 2022-01-28 15:49:20,799 find_def_from_bottom label 130
DEBUG 2022-01-28 15:49:20,799 find_def_from_top label 130
DEBUG 2022-01-28 15:49:20,799 insert phi node r.2 = phi(incoming_values=[], incoming_blocks=[]) at 130
DEBUG 2022-01-28 15:49:20,799 find_def_from_bottom label 106
DEBUG 2022-01-28 15:49:20,799 find_def_from_top label 106
DEBUG 2022-01-28 15:49:20,799 idom 0 from label 106
DEBUG 2022-01-28 15:49:20,799 find_def_from_bottom label 0
DEBUG 2022-01-28 15:49:20,799 incoming_def r = call $2load_deref.0($const4.1, func=$2load_deref.0, args=[Var($const4.1, numbers.py:217)], kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:20,807 find_def_from_bottom label 154
DEBUG 2022-01-28 15:49:20,807 find_def_from_top label 154
DEBUG 2022-01-28 15:49:20,807 insert phi node r.3 = phi(incoming_values=[], incoming_blocks=[]) at 154
DEBUG 2022-01-28 15:49:20,807 find_def_from_bottom label 138
DEBUG 2022-01-28 15:49:20,807 find_def_from_top label 138
DEBUG 2022-01-28 15:49:20,807 idom 130 from label 138
DEBUG 2022-01-28 15:49:20,807 find_def_from_bottom label 130
DEBUG 2022-01-28 15:49:20,807 incoming_def r.2 = phi(incoming_values=[Var(r, numbers.py:217)], incoming_blocks=[106])
DEBUG 2022-01-28 15:49:20,807 find_def_from_bottom label 146
DEBUG 2022-01-28 15:49:20,807 incoming_def r.1 = $150inplace_multiply.2
DEBUG 2022-01-28 15:49:20,807 incoming_def r.3 = phi(incoming_values=[Var(r.2, numbers.py:240), Var(r.1, numbers.py:240)], incoming_blocks=[138, 146])
DEBUG 2022-01-28 15:49:20,807 replaced with: $150inplace_multiply.2 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=r.2, rhs=a.1, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-01-28 15:49:20,807 on stmt: r.1 = $150inplace_multiply.2
DEBUG 2022-01-28 15:49:20,807 on stmt: jump 154
DEBUG 2022-01-28 15:49:20,807 ==== SSA block rewrite pass on 154
DEBUG 2022-01-28 15:49:20,807 Running <numba.core.ssa._FixSSAVars object at 0x000002410CE39880>
DEBUG 2022-01-28 15:49:20,807 on stmt: $const156.1 = const(int, 1)
DEBUG 2022-01-28 15:49:20,807 on stmt: $158inplace_rshift.2 = inplace_binop(fn=<built-in function irshift>, immutable_fn=<built-in function rshift>, lhs=exp, rhs=$const156.1, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-01-28 15:49:20,807 on stmt: exp = $158inplace_rshift.2
DEBUG 2022-01-28 15:49:20,807 on stmt: $166inplace_multiply.5 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=a.1, rhs=a.1, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-01-28 15:49:20,807 on stmt: a.1 = $166inplace_multiply.5
DEBUG 2022-01-28 15:49:20,807 on stmt: jump 130
DEBUG 2022-01-28 15:49:20,809 ==== SSA block rewrite pass on 172
DEBUG 2022-01-28 15:49:20,809 Running <numba.core.ssa._FixSSAVars object at 0x000002410CE39880>
DEBUG 2022-01-28 15:49:20,809 on stmt: bool174 = global(bool: <class 'bool'>)
DEBUG 2022-01-28 15:49:20,809 on stmt: $174pred = call bool174(invert.2, func=bool174, args=(Var(invert.2, numbers.py:244),), kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:20,809 on stmt: branch $174pred, 176, 184
DEBUG 2022-01-28 15:49:20,809 ==== SSA block rewrite pass on 176
DEBUG 2022-01-28 15:49:20,809 Running <numba.core.ssa._FixSSAVars object at 0x000002410CE39880>
DEBUG 2022-01-28 15:49:20,809 on stmt: $const176.0 = const(float, 1.0)
DEBUG 2022-01-28 15:49:20,809 on stmt: $180binary_true_divide.2 = $const176.0 / r
DEBUG 2022-01-28 15:49:20,809 find_def var='r' stmt=$180binary_true_divide.2 = $const176.0 / r
DEBUG 2022-01-28 15:49:20,809 find_def_from_top label 176
DEBUG 2022-01-28 15:49:20,809 idom 172 from label 176
DEBUG 2022-01-28 15:49:20,809 find_def_from_bottom label 172
DEBUG 2022-01-28 15:49:20,809 find_def_from_top label 172
DEBUG 2022-01-28 15:49:20,809 idom 130 from label 172
DEBUG 2022-01-28 15:49:20,809 find_def_from_bottom label 130
DEBUG 2022-01-28 15:49:20,809 replaced with: $180binary_true_divide.2 = $const176.0 / r.2
DEBUG 2022-01-28 15:49:20,809 on stmt: $182return_value.3 = cast(value=$180binary_true_divide.2)
DEBUG 2022-01-28 15:49:20,809 on stmt: return $182return_value.3
DEBUG 2022-01-28 15:49:20,809 ==== SSA block rewrite pass on 184
DEBUG 2022-01-28 15:49:20,809 Running <numba.core.ssa._FixSSAVars object at 0x000002410CE39880>
DEBUG 2022-01-28 15:49:20,809 on stmt: $186return_value.1 = cast(value=r)
DEBUG 2022-01-28 15:49:20,809 find_def var='r' stmt=$186return_value.1 = cast(value=r)
DEBUG 2022-01-28 15:49:20,809 find_def_from_top label 184
DEBUG 2022-01-28 15:49:20,809 idom 172 from label 184
DEBUG 2022-01-28 15:49:20,809 find_def_from_bottom label 172
DEBUG 2022-01-28 15:49:20,809 find_def_from_top label 172
DEBUG 2022-01-28 15:49:20,809 idom 130 from label 172
DEBUG 2022-01-28 15:49:20,809 find_def_from_bottom label 130
DEBUG 2022-01-28 15:49:20,809 replaced with: $186return_value.1 = cast(value=r.2)
DEBUG 2022-01-28 15:49:20,809 on stmt: return $186return_value.1
DEBUG 2022-01-28 15:49:20,809 Fix SSA violator on var a.1
DEBUG 2022-01-28 15:49:20,809 ==== SSA block rewrite pass on 0
DEBUG 2022-01-28 15:49:20,809 Running <numba.core.ssa._FreshVarHandler object at 0x000002410CE5A700>
DEBUG 2022-01-28 15:49:20,809 on stmt: a = arg(0, name=a)
DEBUG 2022-01-28 15:49:20,809 on stmt: b = arg(1, name=b)
DEBUG 2022-01-28 15:49:20,809 on stmt: $2load_deref.0 = freevar(tp: float64)
DEBUG 2022-01-28 15:49:20,809 on stmt: $const4.1 = const(int, 1)
DEBUG 2022-01-28 15:49:20,809 on stmt: r = call $2load_deref.0($const4.1, func=$2load_deref.0, args=[Var($const4.1, numbers.py:217)], kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:20,809 on stmt: $10load_deref.3 = freevar(tp: float64)
DEBUG 2022-01-28 15:49:20,809 on stmt: a.1 = call $10load_deref.3(a, func=$10load_deref.3, args=[Var(a, numbers.py:217)], kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:20,809 first assign: a.1
DEBUG 2022-01-28 15:49:20,809 replaced with: a.1 = call $10load_deref.3(a, func=$10load_deref.3, args=[Var(a, numbers.py:217)], kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:20,809 on stmt: $const20.7 = const(int, 0)
DEBUG 2022-01-28 15:49:20,809 on stmt: $22compare_op.8 = b < $const20.7
DEBUG 2022-01-28 15:49:20,809 on stmt: bool24 = global(bool: <class 'bool'>)
DEBUG 2022-01-28 15:49:20,809 on stmt: $24pred = call bool24($22compare_op.8, func=bool24, args=(Var($22compare_op.8, numbers.py:219),), kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:20,809 on stmt: branch $24pred, 26, 98
DEBUG 2022-01-28 15:49:20,809 ==== SSA block rewrite pass on 26
DEBUG 2022-01-28 15:49:20,809 Running <numba.core.ssa._FreshVarHandler object at 0x000002410CE5A700>
DEBUG 2022-01-28 15:49:20,809 on stmt: invert = const(bool, True)
DEBUG 2022-01-28 15:49:20,809 on stmt: exp = unary(fn=<built-in function neg>, value=b)
DEBUG 2022-01-28 15:49:20,809 on stmt: $const38.4 = const(int, 0)
DEBUG 2022-01-28 15:49:20,809 on stmt: $40compare_op.5 = exp < $const38.4
DEBUG 2022-01-28 15:49:20,809 on stmt: bool42 = global(bool: <class 'bool'>)
DEBUG 2022-01-28 15:49:20,809 on stmt: $42pred = call bool42($40compare_op.5, func=bool42, args=(Var($40compare_op.5, numbers.py:222),), kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:20,809 on stmt: branch $42pred, 44, 48
DEBUG 2022-01-28 15:49:20,809 ==== SSA block rewrite pass on 44
DEBUG 2022-01-28 15:49:20,809 Running <numba.core.ssa._FreshVarHandler object at 0x000002410CE5A700>
DEBUG 2022-01-28 15:49:20,809 on stmt: $44load_global.0 = global(OverflowError: <class 'OverflowError'>)
DEBUG 2022-01-28 15:49:20,809 on stmt: <static> raise <class 'OverflowError'>
DEBUG 2022-01-28 15:49:20,809 ==== SSA block rewrite pass on 48
DEBUG 2022-01-28 15:49:20,809 Running <numba.core.ssa._FreshVarHandler object at 0x000002410CE5A700>
DEBUG 2022-01-28 15:49:20,809 on stmt: $48load_deref.0 = freevar(is_integer: False)
DEBUG 2022-01-28 15:49:20,809 on stmt: bool50 = global(bool: <class 'bool'>)
DEBUG 2022-01-28 15:49:20,809 on stmt: $50pred = call bool50($48load_deref.0, func=bool50, args=(Var($48load_deref.0, numbers.py:224),), kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:20,809 on stmt: jump 106
DEBUG 2022-01-28 15:49:20,809 ==== SSA block rewrite pass on 98
DEBUG 2022-01-28 15:49:20,809 Running <numba.core.ssa._FreshVarHandler object at 0x000002410CE5A700>
DEBUG 2022-01-28 15:49:20,809 on stmt: invert.1 = const(bool, False)
DEBUG 2022-01-28 15:49:20,809 on stmt: exp = b
DEBUG 2022-01-28 15:49:20,809 on stmt: jump 106
DEBUG 2022-01-28 15:49:20,809 ==== SSA block rewrite pass on 106
DEBUG 2022-01-28 15:49:20,809 Running <numba.core.ssa._FreshVarHandler object at 0x000002410CE5A700>
DEBUG 2022-01-28 15:49:20,809 on stmt: invert.2 = phi(incoming_values=[Var(invert, numbers.py:220), Var(invert.1, numbers.py:233)], incoming_blocks=[48, 98])
DEBUG 2022-01-28 15:49:20,809 on stmt: $const108.1 = const(int, 65536)
DEBUG 2022-01-28 15:49:20,809 on stmt: $110compare_op.2 = exp > $const108.1
DEBUG 2022-01-28 15:49:20,809 on stmt: bool112 = global(bool: <class 'bool'>)
DEBUG 2022-01-28 15:49:20,809 on stmt: $112pred = call bool112($110compare_op.2, func=bool112, args=(Var($110compare_op.2, numbers.py:235),), kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:20,809 on stmt: branch $112pred, 114, 130
DEBUG 2022-01-28 15:49:20,809 ==== SSA block rewrite pass on 114
DEBUG 2022-01-28 15:49:20,809 Running <numba.core.ssa._FreshVarHandler object at 0x000002410CE5A700>
DEBUG 2022-01-28 15:49:20,809 on stmt: $114load_global.0 = global(math: <module 'math' (built-in)>)
DEBUG 2022-01-28 15:49:20,809 on stmt: $116load_method.1 = getattr(value=$114load_global.0, attr=pow)
DEBUG 2022-01-28 15:49:20,809 on stmt: $120load_global.3 = global(float: <class 'float'>)
DEBUG 2022-01-28 15:49:20,809 on stmt: $124call_function.5 = call $120load_global.3(b, func=$120load_global.3, args=[Var(b, numbers.py:217)], kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:20,809 on stmt: $126call_method.6 = call $116load_method.1(a.1, $124call_function.5, func=$116load_method.1, args=[Var(a.1, numbers.py:218), Var($124call_function.5, numbers.py:237)], kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:20,809 on stmt: $128return_value.7 = cast(value=$126call_method.6)
DEBUG 2022-01-28 15:49:20,809 on stmt: return $128return_value.7
DEBUG 2022-01-28 15:49:20,817 ==== SSA block rewrite pass on 130
DEBUG 2022-01-28 15:49:20,817 Running <numba.core.ssa._FreshVarHandler object at 0x000002410CE5A700>
DEBUG 2022-01-28 15:49:20,817 on stmt: r.2 = phi(incoming_values=[Var(r, numbers.py:217), Var(r.3, numbers.py:240)], incoming_blocks=[106, 154])
DEBUG 2022-01-28 15:49:20,817 on stmt: $const132.1 = const(int, 0)
DEBUG 2022-01-28 15:49:20,817 on stmt: $134compare_op.2 = exp != $const132.1
DEBUG 2022-01-28 15:49:20,817 on stmt: bool136 = global(bool: <class 'bool'>)
DEBUG 2022-01-28 15:49:20,817 on stmt: $136pred = call bool136($134compare_op.2, func=bool136, args=(Var($134compare_op.2, numbers.py:238),), kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:20,817 on stmt: branch $136pred, 138, 172
DEBUG 2022-01-28 15:49:20,817 ==== SSA block rewrite pass on 138
DEBUG 2022-01-28 15:49:20,817 Running <numba.core.ssa._FreshVarHandler object at 0x000002410CE5A700>
DEBUG 2022-01-28 15:49:20,817 on stmt: $const140.1 = const(int, 1)
DEBUG 2022-01-28 15:49:20,817 on stmt: $142binary_and.2 = exp & $const140.1
DEBUG 2022-01-28 15:49:20,817 on stmt: bool144 = global(bool: <class 'bool'>)
DEBUG 2022-01-28 15:49:20,817 on stmt: $144pred = call bool144($142binary_and.2, func=bool144, args=(Var($142binary_and.2, numbers.py:239),), kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:20,817 on stmt: branch $144pred, 146, 154
DEBUG 2022-01-28 15:49:20,817 ==== SSA block rewrite pass on 146
DEBUG 2022-01-28 15:49:20,817 Running <numba.core.ssa._FreshVarHandler object at 0x000002410CE5A700>
DEBUG 2022-01-28 15:49:20,817 on stmt: $150inplace_multiply.2 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=r.2, rhs=a.1, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-01-28 15:49:20,817 on stmt: r.1 = $150inplace_multiply.2
DEBUG 2022-01-28 15:49:20,817 on stmt: jump 154
DEBUG 2022-01-28 15:49:20,817 ==== SSA block rewrite pass on 154
DEBUG 2022-01-28 15:49:20,819 Running <numba.core.ssa._FreshVarHandler object at 0x000002410CE5A700>
DEBUG 2022-01-28 15:49:20,819 on stmt: r.3 = phi(incoming_values=[Var(r.2, numbers.py:240), Var(r.1, numbers.py:240)], incoming_blocks=[138, 146])
DEBUG 2022-01-28 15:49:20,819 on stmt: $const156.1 = const(int, 1)
DEBUG 2022-01-28 15:49:20,819 on stmt: $158inplace_rshift.2 = inplace_binop(fn=<built-in function irshift>, immutable_fn=<built-in function rshift>, lhs=exp, rhs=$const156.1, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-01-28 15:49:20,819 on stmt: exp = $158inplace_rshift.2
DEBUG 2022-01-28 15:49:20,819 on stmt: $166inplace_multiply.5 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=a.1, rhs=a.1, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-01-28 15:49:20,819 on stmt: a.1 = $166inplace_multiply.5
DEBUG 2022-01-28 15:49:20,819 replaced with: a.1.1 = $166inplace_multiply.5
DEBUG 2022-01-28 15:49:20,819 on stmt: jump 130
DEBUG 2022-01-28 15:49:20,819 ==== SSA block rewrite pass on 172
DEBUG 2022-01-28 15:49:20,819 Running <numba.core.ssa._FreshVarHandler object at 0x000002410CE5A700>
DEBUG 2022-01-28 15:49:20,819 on stmt: bool174 = global(bool: <class 'bool'>)
DEBUG 2022-01-28 15:49:20,819 on stmt: $174pred = call bool174(invert.2, func=bool174, args=(Var(invert.2, numbers.py:244),), kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:20,819 on stmt: branch $174pred, 176, 184
DEBUG 2022-01-28 15:49:20,819 ==== SSA block rewrite pass on 176
DEBUG 2022-01-28 15:49:20,819 Running <numba.core.ssa._FreshVarHandler object at 0x000002410CE5A700>
DEBUG 2022-01-28 15:49:20,819 on stmt: $const176.0 = const(float, 1.0)
DEBUG 2022-01-28 15:49:20,819 on stmt: $180binary_true_divide.2 = $const176.0 / r.2
DEBUG 2022-01-28 15:49:20,819 on stmt: $182return_value.3 = cast(value=$180binary_true_divide.2)
DEBUG 2022-01-28 15:49:20,819 on stmt: return $182return_value.3
DEBUG 2022-01-28 15:49:20,819 ==== SSA block rewrite pass on 184
DEBUG 2022-01-28 15:49:20,819 Running <numba.core.ssa._FreshVarHandler object at 0x000002410CE5A700>
DEBUG 2022-01-28 15:49:20,819 on stmt: $186return_value.1 = cast(value=r.2)
DEBUG 2022-01-28 15:49:20,819 on stmt: return $186return_value.1
DEBUG 2022-01-28 15:49:20,819 Replaced assignments: defaultdict(<class 'list'>,
            {0: [<numba.core.ir.Assign object at 0x000002410CE39EE0>],
             154: [<numba.core.ir.Assign object at 0x000002410CE6A280>]})
DEBUG 2022-01-28 15:49:20,819 ==== SSA block rewrite pass on 0
DEBUG 2022-01-28 15:49:20,819 Running <numba.core.ssa._FixSSAVars object at 0x000002410CE39760>
DEBUG 2022-01-28 15:49:20,819 on stmt: a = arg(0, name=a)
DEBUG 2022-01-28 15:49:20,819 on stmt: b = arg(1, name=b)
DEBUG 2022-01-28 15:49:20,819 on stmt: $2load_deref.0 = freevar(tp: float64)
DEBUG 2022-01-28 15:49:20,819 on stmt: $const4.1 = const(int, 1)
DEBUG 2022-01-28 15:49:20,819 on stmt: r = call $2load_deref.0($const4.1, func=$2load_deref.0, args=[Var($const4.1, numbers.py:217)], kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:20,819 on stmt: $10load_deref.3 = freevar(tp: float64)
DEBUG 2022-01-28 15:49:20,819 on stmt: a.1 = call $10load_deref.3(a, func=$10load_deref.3, args=[Var(a, numbers.py:217)], kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:20,819 on stmt: $const20.7 = const(int, 0)
DEBUG 2022-01-28 15:49:20,819 on stmt: $22compare_op.8 = b < $const20.7
DEBUG 2022-01-28 15:49:20,819 on stmt: bool24 = global(bool: <class 'bool'>)
DEBUG 2022-01-28 15:49:20,819 on stmt: $24pred = call bool24($22compare_op.8, func=bool24, args=(Var($22compare_op.8, numbers.py:219),), kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:20,819 on stmt: branch $24pred, 26, 98
DEBUG 2022-01-28 15:49:20,819 ==== SSA block rewrite pass on 26
DEBUG 2022-01-28 15:49:20,819 Running <numba.core.ssa._FixSSAVars object at 0x000002410CE39760>
DEBUG 2022-01-28 15:49:20,819 on stmt: invert = const(bool, True)
DEBUG 2022-01-28 15:49:20,819 on stmt: exp = unary(fn=<built-in function neg>, value=b)
DEBUG 2022-01-28 15:49:20,819 on stmt: $const38.4 = const(int, 0)
DEBUG 2022-01-28 15:49:20,819 on stmt: $40compare_op.5 = exp < $const38.4
DEBUG 2022-01-28 15:49:20,819 on stmt: bool42 = global(bool: <class 'bool'>)
DEBUG 2022-01-28 15:49:20,819 on stmt: $42pred = call bool42($40compare_op.5, func=bool42, args=(Var($40compare_op.5, numbers.py:222),), kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:20,819 on stmt: branch $42pred, 44, 48
DEBUG 2022-01-28 15:49:20,819 ==== SSA block rewrite pass on 44
DEBUG 2022-01-28 15:49:20,819 Running <numba.core.ssa._FixSSAVars object at 0x000002410CE39760>
DEBUG 2022-01-28 15:49:20,819 on stmt: $44load_global.0 = global(OverflowError: <class 'OverflowError'>)
DEBUG 2022-01-28 15:49:20,819 on stmt: <static> raise <class 'OverflowError'>
DEBUG 2022-01-28 15:49:20,819 ==== SSA block rewrite pass on 48
DEBUG 2022-01-28 15:49:20,819 Running <numba.core.ssa._FixSSAVars object at 0x000002410CE39760>
DEBUG 2022-01-28 15:49:20,819 on stmt: $48load_deref.0 = freevar(is_integer: False)
DEBUG 2022-01-28 15:49:20,819 on stmt: bool50 = global(bool: <class 'bool'>)
DEBUG 2022-01-28 15:49:20,819 on stmt: $50pred = call bool50($48load_deref.0, func=bool50, args=(Var($48load_deref.0, numbers.py:224),), kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:20,819 on stmt: jump 106
DEBUG 2022-01-28 15:49:20,819 ==== SSA block rewrite pass on 98
DEBUG 2022-01-28 15:49:20,819 Running <numba.core.ssa._FixSSAVars object at 0x000002410CE39760>
DEBUG 2022-01-28 15:49:20,819 on stmt: invert.1 = const(bool, False)
DEBUG 2022-01-28 15:49:20,819 on stmt: exp = b
DEBUG 2022-01-28 15:49:20,819 on stmt: jump 106
DEBUG 2022-01-28 15:49:20,819 ==== SSA block rewrite pass on 106
DEBUG 2022-01-28 15:49:20,819 Running <numba.core.ssa._FixSSAVars object at 0x000002410CE39760>
DEBUG 2022-01-28 15:49:20,819 on stmt: invert.2 = phi(incoming_values=[Var(invert, numbers.py:220), Var(invert.1, numbers.py:233)], incoming_blocks=[48, 98])
DEBUG 2022-01-28 15:49:20,819 on stmt: $const108.1 = const(int, 65536)
DEBUG 2022-01-28 15:49:20,819 on stmt: $110compare_op.2 = exp > $const108.1
DEBUG 2022-01-28 15:49:20,819 on stmt: bool112 = global(bool: <class 'bool'>)
DEBUG 2022-01-28 15:49:20,819 on stmt: $112pred = call bool112($110compare_op.2, func=bool112, args=(Var($110compare_op.2, numbers.py:235),), kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:20,819 on stmt: branch $112pred, 114, 130
DEBUG 2022-01-28 15:49:20,819 ==== SSA block rewrite pass on 114
DEBUG 2022-01-28 15:49:20,819 Running <numba.core.ssa._FixSSAVars object at 0x000002410CE39760>
DEBUG 2022-01-28 15:49:20,819 on stmt: $114load_global.0 = global(math: <module 'math' (built-in)>)
DEBUG 2022-01-28 15:49:20,819 on stmt: $116load_method.1 = getattr(value=$114load_global.0, attr=pow)
DEBUG 2022-01-28 15:49:20,819 on stmt: $120load_global.3 = global(float: <class 'float'>)
DEBUG 2022-01-28 15:49:20,819 on stmt: $124call_function.5 = call $120load_global.3(b, func=$120load_global.3, args=[Var(b, numbers.py:217)], kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:20,819 on stmt: $126call_method.6 = call $116load_method.1(a.1, $124call_function.5, func=$116load_method.1, args=[Var(a.1, numbers.py:218), Var($124call_function.5, numbers.py:237)], kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:20,819 find_def var='a.1' stmt=$126call_method.6 = call $116load_method.1(a.1, $124call_function.5, func=$116load_method.1, args=[Var(a.1, numbers.py:218), Var($124call_function.5, numbers.py:237)], kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:20,819 find_def_from_top label 114
DEBUG 2022-01-28 15:49:20,819 idom 106 from label 114
DEBUG 2022-01-28 15:49:20,819 find_def_from_bottom label 106
DEBUG 2022-01-28 15:49:20,819 find_def_from_top label 106
DEBUG 2022-01-28 15:49:20,819 idom 0 from label 106
DEBUG 2022-01-28 15:49:20,819 find_def_from_bottom label 0
DEBUG 2022-01-28 15:49:20,819 on stmt: $128return_value.7 = cast(value=$126call_method.6)
DEBUG 2022-01-28 15:49:20,819 on stmt: return $128return_value.7
DEBUG 2022-01-28 15:49:20,819 ==== SSA block rewrite pass on 130
DEBUG 2022-01-28 15:49:20,819 Running <numba.core.ssa._FixSSAVars object at 0x000002410CE39760>
DEBUG 2022-01-28 15:49:20,827 on stmt: r.2 = phi(incoming_values=[Var(r, numbers.py:217), Var(r.3, numbers.py:240)], incoming_blocks=[106, 154])
DEBUG 2022-01-28 15:49:20,827 on stmt: $const132.1 = const(int, 0)
DEBUG 2022-01-28 15:49:20,827 on stmt: $134compare_op.2 = exp != $const132.1
DEBUG 2022-01-28 15:49:20,827 on stmt: bool136 = global(bool: <class 'bool'>)
DEBUG 2022-01-28 15:49:20,827 on stmt: $136pred = call bool136($134compare_op.2, func=bool136, args=(Var($134compare_op.2, numbers.py:238),), kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:20,827 on stmt: branch $136pred, 138, 172
DEBUG 2022-01-28 15:49:20,827 ==== SSA block rewrite pass on 138
DEBUG 2022-01-28 15:49:20,827 Running <numba.core.ssa._FixSSAVars object at 0x000002410CE39760>
DEBUG 2022-01-28 15:49:20,827 on stmt: $const140.1 = const(int, 1)
DEBUG 2022-01-28 15:49:20,827 on stmt: $142binary_and.2 = exp & $const140.1
DEBUG 2022-01-28 15:49:20,827 on stmt: bool144 = global(bool: <class 'bool'>)
DEBUG 2022-01-28 15:49:20,827 on stmt: $144pred = call bool144($142binary_and.2, func=bool144, args=(Var($142binary_and.2, numbers.py:239),), kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:20,827 on stmt: branch $144pred, 146, 154
DEBUG 2022-01-28 15:49:20,827 ==== SSA block rewrite pass on 146
DEBUG 2022-01-28 15:49:20,827 Running <numba.core.ssa._FixSSAVars object at 0x000002410CE39760>
DEBUG 2022-01-28 15:49:20,827 on stmt: $150inplace_multiply.2 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=r.2, rhs=a.1, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-01-28 15:49:20,827 find_def var='a.1' stmt=$150inplace_multiply.2 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=r.2, rhs=a.1, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-01-28 15:49:20,827 find_def_from_top label 146
DEBUG 2022-01-28 15:49:20,827 idom 138 from label 146
DEBUG 2022-01-28 15:49:20,827 find_def_from_bottom label 138
DEBUG 2022-01-28 15:49:20,827 find_def_from_top label 138
DEBUG 2022-01-28 15:49:20,829 idom 130 from label 138
DEBUG 2022-01-28 15:49:20,829 find_def_from_bottom label 130
DEBUG 2022-01-28 15:49:20,829 find_def_from_top label 130
DEBUG 2022-01-28 15:49:20,829 insert phi node a.1.2 = phi(incoming_values=[], incoming_blocks=[]) at 130
DEBUG 2022-01-28 15:49:20,829 find_def_from_bottom label 106
DEBUG 2022-01-28 15:49:20,829 find_def_from_top label 106
DEBUG 2022-01-28 15:49:20,829 idom 0 from label 106
DEBUG 2022-01-28 15:49:20,829 find_def_from_bottom label 0
DEBUG 2022-01-28 15:49:20,829 incoming_def a.1 = call $10load_deref.3(a, func=$10load_deref.3, args=[Var(a, numbers.py:217)], kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:20,829 find_def_from_bottom label 154
DEBUG 2022-01-28 15:49:20,829 incoming_def a.1.1 = $166inplace_multiply.5
DEBUG 2022-01-28 15:49:20,829 replaced with: $150inplace_multiply.2 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=r.2, rhs=a.1.2, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-01-28 15:49:20,829 on stmt: r.1 = $150inplace_multiply.2
DEBUG 2022-01-28 15:49:20,829 on stmt: jump 154
DEBUG 2022-01-28 15:49:20,829 ==== SSA block rewrite pass on 154
DEBUG 2022-01-28 15:49:20,829 Running <numba.core.ssa._FixSSAVars object at 0x000002410CE39760>
DEBUG 2022-01-28 15:49:20,829 on stmt: r.3 = phi(incoming_values=[Var(r.2, numbers.py:240), Var(r.1, numbers.py:240)], incoming_blocks=[138, 146])
DEBUG 2022-01-28 15:49:20,829 on stmt: $const156.1 = const(int, 1)
DEBUG 2022-01-28 15:49:20,829 on stmt: $158inplace_rshift.2 = inplace_binop(fn=<built-in function irshift>, immutable_fn=<built-in function rshift>, lhs=exp, rhs=$const156.1, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-01-28 15:49:20,829 on stmt: exp = $158inplace_rshift.2
DEBUG 2022-01-28 15:49:20,829 on stmt: $166inplace_multiply.5 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=a.1, rhs=a.1, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-01-28 15:49:20,829 find_def var='a.1' stmt=$166inplace_multiply.5 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=a.1, rhs=a.1, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-01-28 15:49:20,829 find_def_from_top label 154
DEBUG 2022-01-28 15:49:20,829 idom 138 from label 154
DEBUG 2022-01-28 15:49:20,829 find_def_from_bottom label 138
DEBUG 2022-01-28 15:49:20,829 find_def_from_top label 138
DEBUG 2022-01-28 15:49:20,829 idom 130 from label 138
DEBUG 2022-01-28 15:49:20,829 find_def_from_bottom label 130
DEBUG 2022-01-28 15:49:20,829 replaced with: $166inplace_multiply.5 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=a.1.2, rhs=a.1.2, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-01-28 15:49:20,829 on stmt: a.1.1 = $166inplace_multiply.5
DEBUG 2022-01-28 15:49:20,829 on stmt: jump 130
DEBUG 2022-01-28 15:49:20,829 ==== SSA block rewrite pass on 172
DEBUG 2022-01-28 15:49:20,829 Running <numba.core.ssa._FixSSAVars object at 0x000002410CE39760>
DEBUG 2022-01-28 15:49:20,829 on stmt: bool174 = global(bool: <class 'bool'>)
DEBUG 2022-01-28 15:49:20,829 on stmt: $174pred = call bool174(invert.2, func=bool174, args=(Var(invert.2, numbers.py:244),), kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:20,829 on stmt: branch $174pred, 176, 184
DEBUG 2022-01-28 15:49:20,829 ==== SSA block rewrite pass on 176
DEBUG 2022-01-28 15:49:20,829 Running <numba.core.ssa._FixSSAVars object at 0x000002410CE39760>
DEBUG 2022-01-28 15:49:20,829 on stmt: $const176.0 = const(float, 1.0)
DEBUG 2022-01-28 15:49:20,829 on stmt: $180binary_true_divide.2 = $const176.0 / r.2
DEBUG 2022-01-28 15:49:20,829 on stmt: $182return_value.3 = cast(value=$180binary_true_divide.2)
DEBUG 2022-01-28 15:49:20,829 on stmt: return $182return_value.3
DEBUG 2022-01-28 15:49:20,829 ==== SSA block rewrite pass on 184
DEBUG 2022-01-28 15:49:20,829 Running <numba.core.ssa._FixSSAVars object at 0x000002410CE39760>
DEBUG 2022-01-28 15:49:20,829 on stmt: $186return_value.1 = cast(value=r.2)
DEBUG 2022-01-28 15:49:20,829 on stmt: return $186return_value.1
DEBUG 2022-01-28 15:49:20,829 Fix SSA violator on var exp
DEBUG 2022-01-28 15:49:20,829 ==== SSA block rewrite pass on 0
DEBUG 2022-01-28 15:49:20,829 Running <numba.core.ssa._FreshVarHandler object at 0x000002410CE5AA60>
DEBUG 2022-01-28 15:49:20,829 on stmt: a = arg(0, name=a)
DEBUG 2022-01-28 15:49:20,829 on stmt: b = arg(1, name=b)
DEBUG 2022-01-28 15:49:20,829 on stmt: $2load_deref.0 = freevar(tp: float64)
DEBUG 2022-01-28 15:49:20,829 on stmt: $const4.1 = const(int, 1)
DEBUG 2022-01-28 15:49:20,829 on stmt: r = call $2load_deref.0($const4.1, func=$2load_deref.0, args=[Var($const4.1, numbers.py:217)], kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:20,829 on stmt: $10load_deref.3 = freevar(tp: float64)
DEBUG 2022-01-28 15:49:20,829 on stmt: a.1 = call $10load_deref.3(a, func=$10load_deref.3, args=[Var(a, numbers.py:217)], kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:20,829 on stmt: $const20.7 = const(int, 0)
DEBUG 2022-01-28 15:49:20,829 on stmt: $22compare_op.8 = b < $const20.7
DEBUG 2022-01-28 15:49:20,829 on stmt: bool24 = global(bool: <class 'bool'>)
DEBUG 2022-01-28 15:49:20,829 on stmt: $24pred = call bool24($22compare_op.8, func=bool24, args=(Var($22compare_op.8, numbers.py:219),), kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:20,829 on stmt: branch $24pred, 26, 98
DEBUG 2022-01-28 15:49:20,829 ==== SSA block rewrite pass on 26
DEBUG 2022-01-28 15:49:20,829 Running <numba.core.ssa._FreshVarHandler object at 0x000002410CE5AA60>
DEBUG 2022-01-28 15:49:20,829 on stmt: invert = const(bool, True)
DEBUG 2022-01-28 15:49:20,829 on stmt: exp = unary(fn=<built-in function neg>, value=b)
DEBUG 2022-01-28 15:49:20,829 first assign: exp
DEBUG 2022-01-28 15:49:20,829 replaced with: exp = unary(fn=<built-in function neg>, value=b)
DEBUG 2022-01-28 15:49:20,829 on stmt: $const38.4 = const(int, 0)
DEBUG 2022-01-28 15:49:20,829 on stmt: $40compare_op.5 = exp < $const38.4
DEBUG 2022-01-28 15:49:20,829 on stmt: bool42 = global(bool: <class 'bool'>)
DEBUG 2022-01-28 15:49:20,829 on stmt: $42pred = call bool42($40compare_op.5, func=bool42, args=(Var($40compare_op.5, numbers.py:222),), kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:20,829 on stmt: branch $42pred, 44, 48
DEBUG 2022-01-28 15:49:20,829 ==== SSA block rewrite pass on 44
DEBUG 2022-01-28 15:49:20,829 Running <numba.core.ssa._FreshVarHandler object at 0x000002410CE5AA60>
DEBUG 2022-01-28 15:49:20,829 on stmt: $44load_global.0 = global(OverflowError: <class 'OverflowError'>)
DEBUG 2022-01-28 15:49:20,829 on stmt: <static> raise <class 'OverflowError'>
DEBUG 2022-01-28 15:49:20,829 ==== SSA block rewrite pass on 48
DEBUG 2022-01-28 15:49:20,829 Running <numba.core.ssa._FreshVarHandler object at 0x000002410CE5AA60>
DEBUG 2022-01-28 15:49:20,829 on stmt: $48load_deref.0 = freevar(is_integer: False)
DEBUG 2022-01-28 15:49:20,829 on stmt: bool50 = global(bool: <class 'bool'>)
DEBUG 2022-01-28 15:49:20,829 on stmt: $50pred = call bool50($48load_deref.0, func=bool50, args=(Var($48load_deref.0, numbers.py:224),), kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:20,829 on stmt: jump 106
DEBUG 2022-01-28 15:49:20,829 ==== SSA block rewrite pass on 98
DEBUG 2022-01-28 15:49:20,829 Running <numba.core.ssa._FreshVarHandler object at 0x000002410CE5AA60>
DEBUG 2022-01-28 15:49:20,829 on stmt: invert.1 = const(bool, False)
DEBUG 2022-01-28 15:49:20,829 on stmt: exp = b
DEBUG 2022-01-28 15:49:20,829 replaced with: exp.1 = b
DEBUG 2022-01-28 15:49:20,829 on stmt: jump 106
DEBUG 2022-01-28 15:49:20,829 ==== SSA block rewrite pass on 106
DEBUG 2022-01-28 15:49:20,829 Running <numba.core.ssa._FreshVarHandler object at 0x000002410CE5AA60>
DEBUG 2022-01-28 15:49:20,837 on stmt: invert.2 = phi(incoming_values=[Var(invert, numbers.py:220), Var(invert.1, numbers.py:233)], incoming_blocks=[48, 98])
DEBUG 2022-01-28 15:49:20,837 on stmt: $const108.1 = const(int, 65536)
DEBUG 2022-01-28 15:49:20,837 on stmt: $110compare_op.2 = exp > $const108.1
DEBUG 2022-01-28 15:49:20,837 on stmt: bool112 = global(bool: <class 'bool'>)
DEBUG 2022-01-28 15:49:20,837 on stmt: $112pred = call bool112($110compare_op.2, func=bool112, args=(Var($110compare_op.2, numbers.py:235),), kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:20,837 on stmt: branch $112pred, 114, 130
DEBUG 2022-01-28 15:49:20,837 ==== SSA block rewrite pass on 114
DEBUG 2022-01-28 15:49:20,837 Running <numba.core.ssa._FreshVarHandler object at 0x000002410CE5AA60>
DEBUG 2022-01-28 15:49:20,837 on stmt: $114load_global.0 = global(math: <module 'math' (built-in)>)
DEBUG 2022-01-28 15:49:20,837 on stmt: $116load_method.1 = getattr(value=$114load_global.0, attr=pow)
DEBUG 2022-01-28 15:49:20,837 on stmt: $120load_global.3 = global(float: <class 'float'>)
DEBUG 2022-01-28 15:49:20,837 on stmt: $124call_function.5 = call $120load_global.3(b, func=$120load_global.3, args=[Var(b, numbers.py:217)], kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:20,837 on stmt: $126call_method.6 = call $116load_method.1(a.1, $124call_function.5, func=$116load_method.1, args=[Var(a.1, numbers.py:218), Var($124call_function.5, numbers.py:237)], kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:20,837 on stmt: $128return_value.7 = cast(value=$126call_method.6)
DEBUG 2022-01-28 15:49:20,837 on stmt: return $128return_value.7
DEBUG 2022-01-28 15:49:20,837 ==== SSA block rewrite pass on 130
DEBUG 2022-01-28 15:49:20,837 Running <numba.core.ssa._FreshVarHandler object at 0x000002410CE5AA60>
DEBUG 2022-01-28 15:49:20,837 on stmt: a.1.2 = phi(incoming_values=[Var(a.1, numbers.py:218), Var(a.1.1, numbers.py:242)], incoming_blocks=[106, 154])
DEBUG 2022-01-28 15:49:20,837 on stmt: r.2 = phi(incoming_values=[Var(r, numbers.py:217), Var(r.3, numbers.py:240)], incoming_blocks=[106, 154])
DEBUG 2022-01-28 15:49:20,839 on stmt: $const132.1 = const(int, 0)
DEBUG 2022-01-28 15:49:20,839 on stmt: $134compare_op.2 = exp != $const132.1
DEBUG 2022-01-28 15:49:20,839 on stmt: bool136 = global(bool: <class 'bool'>)
DEBUG 2022-01-28 15:49:20,839 on stmt: $136pred = call bool136($134compare_op.2, func=bool136, args=(Var($134compare_op.2, numbers.py:238),), kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:20,839 on stmt: branch $136pred, 138, 172
DEBUG 2022-01-28 15:49:20,839 ==== SSA block rewrite pass on 138
DEBUG 2022-01-28 15:49:20,839 Running <numba.core.ssa._FreshVarHandler object at 0x000002410CE5AA60>
DEBUG 2022-01-28 15:49:20,839 on stmt: $const140.1 = const(int, 1)
DEBUG 2022-01-28 15:49:20,839 on stmt: $142binary_and.2 = exp & $const140.1
DEBUG 2022-01-28 15:49:20,839 on stmt: bool144 = global(bool: <class 'bool'>)
DEBUG 2022-01-28 15:49:20,839 on stmt: $144pred = call bool144($142binary_and.2, func=bool144, args=(Var($142binary_and.2, numbers.py:239),), kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:20,839 on stmt: branch $144pred, 146, 154
DEBUG 2022-01-28 15:49:20,839 ==== SSA block rewrite pass on 146
DEBUG 2022-01-28 15:49:20,839 Running <numba.core.ssa._FreshVarHandler object at 0x000002410CE5AA60>
DEBUG 2022-01-28 15:49:20,839 on stmt: $150inplace_multiply.2 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=r.2, rhs=a.1.2, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-01-28 15:49:20,839 on stmt: r.1 = $150inplace_multiply.2
DEBUG 2022-01-28 15:49:20,839 on stmt: jump 154
DEBUG 2022-01-28 15:49:20,839 ==== SSA block rewrite pass on 154
DEBUG 2022-01-28 15:49:20,839 Running <numba.core.ssa._FreshVarHandler object at 0x000002410CE5AA60>
DEBUG 2022-01-28 15:49:20,839 on stmt: r.3 = phi(incoming_values=[Var(r.2, numbers.py:240), Var(r.1, numbers.py:240)], incoming_blocks=[138, 146])
DEBUG 2022-01-28 15:49:20,839 on stmt: $const156.1 = const(int, 1)
DEBUG 2022-01-28 15:49:20,839 on stmt: $158inplace_rshift.2 = inplace_binop(fn=<built-in function irshift>, immutable_fn=<built-in function rshift>, lhs=exp, rhs=$const156.1, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-01-28 15:49:20,839 on stmt: exp = $158inplace_rshift.2
DEBUG 2022-01-28 15:49:20,839 replaced with: exp.2 = $158inplace_rshift.2
DEBUG 2022-01-28 15:49:20,839 on stmt: $166inplace_multiply.5 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=a.1.2, rhs=a.1.2, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-01-28 15:49:20,839 on stmt: a.1.1 = $166inplace_multiply.5
DEBUG 2022-01-28 15:49:20,839 on stmt: jump 130
DEBUG 2022-01-28 15:49:20,839 ==== SSA block rewrite pass on 172
DEBUG 2022-01-28 15:49:20,839 Running <numba.core.ssa._FreshVarHandler object at 0x000002410CE5AA60>
DEBUG 2022-01-28 15:49:20,839 on stmt: bool174 = global(bool: <class 'bool'>)
DEBUG 2022-01-28 15:49:20,839 on stmt: $174pred = call bool174(invert.2, func=bool174, args=(Var(invert.2, numbers.py:244),), kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:20,839 on stmt: branch $174pred, 176, 184
DEBUG 2022-01-28 15:49:20,839 ==== SSA block rewrite pass on 176
DEBUG 2022-01-28 15:49:20,839 Running <numba.core.ssa._FreshVarHandler object at 0x000002410CE5AA60>
DEBUG 2022-01-28 15:49:20,839 on stmt: $const176.0 = const(float, 1.0)
DEBUG 2022-01-28 15:49:20,839 on stmt: $180binary_true_divide.2 = $const176.0 / r.2
DEBUG 2022-01-28 15:49:20,839 on stmt: $182return_value.3 = cast(value=$180binary_true_divide.2)
DEBUG 2022-01-28 15:49:20,839 on stmt: return $182return_value.3
DEBUG 2022-01-28 15:49:20,839 ==== SSA block rewrite pass on 184
DEBUG 2022-01-28 15:49:20,839 Running <numba.core.ssa._FreshVarHandler object at 0x000002410CE5AA60>
DEBUG 2022-01-28 15:49:20,839 on stmt: $186return_value.1 = cast(value=r.2)
DEBUG 2022-01-28 15:49:20,839 on stmt: return $186return_value.1
DEBUG 2022-01-28 15:49:20,839 Replaced assignments: defaultdict(<class 'list'>,
            {26: [<numba.core.ir.Assign object at 0x000002410CE39460>],
             98: [<numba.core.ir.Assign object at 0x000002410CE39FA0>],
             154: [<numba.core.ir.Assign object at 0x000002410CE6A580>]})
DEBUG 2022-01-28 15:49:20,839 ==== SSA block rewrite pass on 0
DEBUG 2022-01-28 15:49:20,839 Running <numba.core.ssa._FixSSAVars object at 0x000002410CE39D00>
DEBUG 2022-01-28 15:49:20,839 on stmt: a = arg(0, name=a)
DEBUG 2022-01-28 15:49:20,839 on stmt: b = arg(1, name=b)
DEBUG 2022-01-28 15:49:20,839 on stmt: $2load_deref.0 = freevar(tp: float64)
DEBUG 2022-01-28 15:49:20,839 on stmt: $const4.1 = const(int, 1)
DEBUG 2022-01-28 15:49:20,839 on stmt: r = call $2load_deref.0($const4.1, func=$2load_deref.0, args=[Var($const4.1, numbers.py:217)], kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:20,839 on stmt: $10load_deref.3 = freevar(tp: float64)
DEBUG 2022-01-28 15:49:20,839 on stmt: a.1 = call $10load_deref.3(a, func=$10load_deref.3, args=[Var(a, numbers.py:217)], kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:20,839 on stmt: $const20.7 = const(int, 0)
DEBUG 2022-01-28 15:49:20,839 on stmt: $22compare_op.8 = b < $const20.7
DEBUG 2022-01-28 15:49:20,839 on stmt: bool24 = global(bool: <class 'bool'>)
DEBUG 2022-01-28 15:49:20,839 on stmt: $24pred = call bool24($22compare_op.8, func=bool24, args=(Var($22compare_op.8, numbers.py:219),), kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:20,839 on stmt: branch $24pred, 26, 98
DEBUG 2022-01-28 15:49:20,839 ==== SSA block rewrite pass on 26
DEBUG 2022-01-28 15:49:20,839 Running <numba.core.ssa._FixSSAVars object at 0x000002410CE39D00>
DEBUG 2022-01-28 15:49:20,839 on stmt: invert = const(bool, True)
DEBUG 2022-01-28 15:49:20,839 on stmt: exp = unary(fn=<built-in function neg>, value=b)
DEBUG 2022-01-28 15:49:20,839 on stmt: $const38.4 = const(int, 0)
DEBUG 2022-01-28 15:49:20,839 on stmt: $40compare_op.5 = exp < $const38.4
DEBUG 2022-01-28 15:49:20,839 find_def var='exp' stmt=$40compare_op.5 = exp < $const38.4
DEBUG 2022-01-28 15:49:20,839 on stmt: bool42 = global(bool: <class 'bool'>)
DEBUG 2022-01-28 15:49:20,839 on stmt: $42pred = call bool42($40compare_op.5, func=bool42, args=(Var($40compare_op.5, numbers.py:222),), kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:20,839 on stmt: branch $42pred, 44, 48
DEBUG 2022-01-28 15:49:20,839 ==== SSA block rewrite pass on 44
DEBUG 2022-01-28 15:49:20,839 Running <numba.core.ssa._FixSSAVars object at 0x000002410CE39D00>
DEBUG 2022-01-28 15:49:20,839 on stmt: $44load_global.0 = global(OverflowError: <class 'OverflowError'>)
DEBUG 2022-01-28 15:49:20,839 on stmt: <static> raise <class 'OverflowError'>
DEBUG 2022-01-28 15:49:20,839 ==== SSA block rewrite pass on 48
DEBUG 2022-01-28 15:49:20,839 Running <numba.core.ssa._FixSSAVars object at 0x000002410CE39D00>
DEBUG 2022-01-28 15:49:20,839 on stmt: $48load_deref.0 = freevar(is_integer: False)
DEBUG 2022-01-28 15:49:20,839 on stmt: bool50 = global(bool: <class 'bool'>)
DEBUG 2022-01-28 15:49:20,839 on stmt: $50pred = call bool50($48load_deref.0, func=bool50, args=(Var($48load_deref.0, numbers.py:224),), kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:20,839 on stmt: jump 106
DEBUG 2022-01-28 15:49:20,839 ==== SSA block rewrite pass on 98
DEBUG 2022-01-28 15:49:20,839 Running <numba.core.ssa._FixSSAVars object at 0x000002410CE39D00>
DEBUG 2022-01-28 15:49:20,839 on stmt: invert.1 = const(bool, False)
DEBUG 2022-01-28 15:49:20,839 on stmt: exp.1 = b
DEBUG 2022-01-28 15:49:20,839 on stmt: jump 106
DEBUG 2022-01-28 15:49:20,839 ==== SSA block rewrite pass on 106
DEBUG 2022-01-28 15:49:20,839 Running <numba.core.ssa._FixSSAVars object at 0x000002410CE39D00>
DEBUG 2022-01-28 15:49:20,839 on stmt: invert.2 = phi(incoming_values=[Var(invert, numbers.py:220), Var(invert.1, numbers.py:233)], incoming_blocks=[48, 98])
DEBUG 2022-01-28 15:49:20,839 on stmt: $const108.1 = const(int, 65536)
DEBUG 2022-01-28 15:49:20,839 on stmt: $110compare_op.2 = exp > $const108.1
DEBUG 2022-01-28 15:49:20,847 find_def var='exp' stmt=$110compare_op.2 = exp > $const108.1
DEBUG 2022-01-28 15:49:20,847 find_def_from_top label 106
DEBUG 2022-01-28 15:49:20,847 insert phi node exp.3 = phi(incoming_values=[], incoming_blocks=[]) at 106
DEBUG 2022-01-28 15:49:20,847 find_def_from_bottom label 48
DEBUG 2022-01-28 15:49:20,847 find_def_from_top label 48
DEBUG 2022-01-28 15:49:20,847 idom 26 from label 48
DEBUG 2022-01-28 15:49:20,847 find_def_from_bottom label 26
DEBUG 2022-01-28 15:49:20,847 incoming_def exp = unary(fn=<built-in function neg>, value=b)
DEBUG 2022-01-28 15:49:20,847 find_def_from_bottom label 98
DEBUG 2022-01-28 15:49:20,847 incoming_def exp.1 = b
DEBUG 2022-01-28 15:49:20,847 replaced with: $110compare_op.2 = exp.3 > $const108.1
DEBUG 2022-01-28 15:49:20,847 on stmt: bool112 = global(bool: <class 'bool'>)
DEBUG 2022-01-28 15:49:20,847 on stmt: $112pred = call bool112($110compare_op.2, func=bool112, args=(Var($110compare_op.2, numbers.py:235),), kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:20,847 on stmt: branch $112pred, 114, 130
DEBUG 2022-01-28 15:49:20,847 ==== SSA block rewrite pass on 114
DEBUG 2022-01-28 15:49:20,847 Running <numba.core.ssa._FixSSAVars object at 0x000002410CE39D00>
DEBUG 2022-01-28 15:49:20,847 on stmt: $114load_global.0 = global(math: <module 'math' (built-in)>)
DEBUG 2022-01-28 15:49:20,847 on stmt: $116load_method.1 = getattr(value=$114load_global.0, attr=pow)
DEBUG 2022-01-28 15:49:20,847 on stmt: $120load_global.3 = global(float: <class 'float'>)
DEBUG 2022-01-28 15:49:20,847 on stmt: $124call_function.5 = call $120load_global.3(b, func=$120load_global.3, args=[Var(b, numbers.py:217)], kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:20,847 on stmt: $126call_method.6 = call $116load_method.1(a.1, $124call_function.5, func=$116load_method.1, args=[Var(a.1, numbers.py:218), Var($124call_function.5, numbers.py:237)], kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:20,849 on stmt: $128return_value.7 = cast(value=$126call_method.6)
DEBUG 2022-01-28 15:49:20,849 on stmt: return $128return_value.7
DEBUG 2022-01-28 15:49:20,849 ==== SSA block rewrite pass on 130
DEBUG 2022-01-28 15:49:20,849 Running <numba.core.ssa._FixSSAVars object at 0x000002410CE39D00>
DEBUG 2022-01-28 15:49:20,849 on stmt: a.1.2 = phi(incoming_values=[Var(a.1, numbers.py:218), Var(a.1.1, numbers.py:242)], incoming_blocks=[106, 154])
DEBUG 2022-01-28 15:49:20,849 on stmt: r.2 = phi(incoming_values=[Var(r, numbers.py:217), Var(r.3, numbers.py:240)], incoming_blocks=[106, 154])
DEBUG 2022-01-28 15:49:20,849 on stmt: $const132.1 = const(int, 0)
DEBUG 2022-01-28 15:49:20,849 on stmt: $134compare_op.2 = exp != $const132.1
DEBUG 2022-01-28 15:49:20,849 find_def var='exp' stmt=$134compare_op.2 = exp != $const132.1
DEBUG 2022-01-28 15:49:20,849 find_def_from_top label 130
DEBUG 2022-01-28 15:49:20,849 insert phi node exp.4 = phi(incoming_values=[], incoming_blocks=[]) at 130
DEBUG 2022-01-28 15:49:20,849 find_def_from_bottom label 106
DEBUG 2022-01-28 15:49:20,849 incoming_def exp.3 = phi(incoming_values=[Var(exp, numbers.py:221), Var(exp.1, numbers.py:234)], incoming_blocks=[48, 98])
DEBUG 2022-01-28 15:49:20,849 find_def_from_bottom label 154
DEBUG 2022-01-28 15:49:20,849 incoming_def exp.2 = $158inplace_rshift.2
DEBUG 2022-01-28 15:49:20,849 replaced with: $134compare_op.2 = exp.4 != $const132.1
DEBUG 2022-01-28 15:49:20,849 on stmt: bool136 = global(bool: <class 'bool'>)
DEBUG 2022-01-28 15:49:20,849 on stmt: $136pred = call bool136($134compare_op.2, func=bool136, args=(Var($134compare_op.2, numbers.py:238),), kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:20,849 on stmt: branch $136pred, 138, 172
DEBUG 2022-01-28 15:49:20,849 ==== SSA block rewrite pass on 138
DEBUG 2022-01-28 15:49:20,849 Running <numba.core.ssa._FixSSAVars object at 0x000002410CE39D00>
DEBUG 2022-01-28 15:49:20,849 on stmt: $const140.1 = const(int, 1)
DEBUG 2022-01-28 15:49:20,849 on stmt: $142binary_and.2 = exp & $const140.1
DEBUG 2022-01-28 15:49:20,849 find_def var='exp' stmt=$142binary_and.2 = exp & $const140.1
DEBUG 2022-01-28 15:49:20,849 find_def_from_top label 138
DEBUG 2022-01-28 15:49:20,849 idom 130 from label 138
DEBUG 2022-01-28 15:49:20,849 find_def_from_bottom label 130
DEBUG 2022-01-28 15:49:20,849 replaced with: $142binary_and.2 = exp.4 & $const140.1
DEBUG 2022-01-28 15:49:20,849 on stmt: bool144 = global(bool: <class 'bool'>)
DEBUG 2022-01-28 15:49:20,849 on stmt: $144pred = call bool144($142binary_and.2, func=bool144, args=(Var($142binary_and.2, numbers.py:239),), kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:20,849 on stmt: branch $144pred, 146, 154
DEBUG 2022-01-28 15:49:20,849 ==== SSA block rewrite pass on 146
DEBUG 2022-01-28 15:49:20,849 Running <numba.core.ssa._FixSSAVars object at 0x000002410CE39D00>
DEBUG 2022-01-28 15:49:20,849 on stmt: $150inplace_multiply.2 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=r.2, rhs=a.1.2, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-01-28 15:49:20,849 on stmt: r.1 = $150inplace_multiply.2
DEBUG 2022-01-28 15:49:20,849 on stmt: jump 154
DEBUG 2022-01-28 15:49:20,849 ==== SSA block rewrite pass on 154
DEBUG 2022-01-28 15:49:20,849 Running <numba.core.ssa._FixSSAVars object at 0x000002410CE39D00>
DEBUG 2022-01-28 15:49:20,849 on stmt: r.3 = phi(incoming_values=[Var(r.2, numbers.py:240), Var(r.1, numbers.py:240)], incoming_blocks=[138, 146])
DEBUG 2022-01-28 15:49:20,849 on stmt: $const156.1 = const(int, 1)
DEBUG 2022-01-28 15:49:20,849 on stmt: $158inplace_rshift.2 = inplace_binop(fn=<built-in function irshift>, immutable_fn=<built-in function rshift>, lhs=exp, rhs=$const156.1, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-01-28 15:49:20,849 find_def var='exp' stmt=$158inplace_rshift.2 = inplace_binop(fn=<built-in function irshift>, immutable_fn=<built-in function rshift>, lhs=exp, rhs=$const156.1, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-01-28 15:49:20,849 find_def_from_top label 154
DEBUG 2022-01-28 15:49:20,849 idom 138 from label 154
DEBUG 2022-01-28 15:49:20,849 find_def_from_bottom label 138
DEBUG 2022-01-28 15:49:20,849 find_def_from_top label 138
DEBUG 2022-01-28 15:49:20,849 idom 130 from label 138
DEBUG 2022-01-28 15:49:20,849 find_def_from_bottom label 130
DEBUG 2022-01-28 15:49:20,849 replaced with: $158inplace_rshift.2 = inplace_binop(fn=<built-in function irshift>, immutable_fn=<built-in function rshift>, lhs=exp.4, rhs=$const156.1, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-01-28 15:49:20,849 on stmt: exp.2 = $158inplace_rshift.2
DEBUG 2022-01-28 15:49:20,849 on stmt: $166inplace_multiply.5 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=a.1.2, rhs=a.1.2, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-01-28 15:49:20,849 on stmt: a.1.1 = $166inplace_multiply.5
DEBUG 2022-01-28 15:49:20,849 on stmt: jump 130
DEBUG 2022-01-28 15:49:20,849 ==== SSA block rewrite pass on 172
DEBUG 2022-01-28 15:49:20,849 Running <numba.core.ssa._FixSSAVars object at 0x000002410CE39D00>
DEBUG 2022-01-28 15:49:20,849 on stmt: bool174 = global(bool: <class 'bool'>)
DEBUG 2022-01-28 15:49:20,849 on stmt: $174pred = call bool174(invert.2, func=bool174, args=(Var(invert.2, numbers.py:244),), kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:20,849 on stmt: branch $174pred, 176, 184
DEBUG 2022-01-28 15:49:20,849 ==== SSA block rewrite pass on 176
DEBUG 2022-01-28 15:49:20,849 Running <numba.core.ssa._FixSSAVars object at 0x000002410CE39D00>
DEBUG 2022-01-28 15:49:20,849 on stmt: $const176.0 = const(float, 1.0)
DEBUG 2022-01-28 15:49:20,849 on stmt: $180binary_true_divide.2 = $const176.0 / r.2
DEBUG 2022-01-28 15:49:20,849 on stmt: $182return_value.3 = cast(value=$180binary_true_divide.2)
DEBUG 2022-01-28 15:49:20,849 on stmt: return $182return_value.3
DEBUG 2022-01-28 15:49:20,849 ==== SSA block rewrite pass on 184
DEBUG 2022-01-28 15:49:20,849 Running <numba.core.ssa._FixSSAVars object at 0x000002410CE39D00>
DEBUG 2022-01-28 15:49:20,849 on stmt: $186return_value.1 = cast(value=r.2)
DEBUG 2022-01-28 15:49:20,849 on stmt: return $186return_value.1
DEBUG 2022-01-28 15:49:28,849 bytecode dump:
>          0	NOP(arg=None, lineno=217)
           2	LOAD_DEREF(arg=1, lineno=217)
           4	LOAD_CONST(arg=1, lineno=217)
           6	CALL_FUNCTION(arg=1, lineno=217)
           8	STORE_FAST(arg=2, lineno=217)
          10	LOAD_DEREF(arg=1, lineno=218)
          12	LOAD_FAST(arg=0, lineno=218)
          14	CALL_FUNCTION(arg=1, lineno=218)
          16	STORE_FAST(arg=0, lineno=218)
          18	LOAD_FAST(arg=1, lineno=219)
          20	LOAD_CONST(arg=2, lineno=219)
          22	COMPARE_OP(arg=0, lineno=219)
          24	POP_JUMP_IF_FALSE(arg=98, lineno=219)
          26	LOAD_CONST(arg=3, lineno=220)
          28	STORE_FAST(arg=3, lineno=220)
          30	LOAD_FAST(arg=1, lineno=221)
          32	UNARY_NEGATIVE(arg=None, lineno=221)
          34	STORE_FAST(arg=4, lineno=221)
          36	LOAD_FAST(arg=4, lineno=222)
          38	LOAD_CONST(arg=2, lineno=222)
          40	COMPARE_OP(arg=0, lineno=222)
          42	POP_JUMP_IF_FALSE(arg=48, lineno=222)
          44	LOAD_GLOBAL(arg=0, lineno=223)
          46	RAISE_VARARGS(arg=1, lineno=223)
>         48	LOAD_DEREF(arg=0, lineno=224)
          50	POP_JUMP_IF_FALSE(arg=106, lineno=224)
          52	LOAD_FAST(arg=0, lineno=225)
          54	LOAD_CONST(arg=2, lineno=225)
          56	COMPARE_OP(arg=2, lineno=225)
          58	POP_JUMP_IF_FALSE(arg=76, lineno=225)
          60	LOAD_DEREF(arg=2, lineno=226)
          62	POP_JUMP_IF_FALSE(arg=68, lineno=226)
          64	LOAD_DEREF(arg=2, lineno=227)
          66	RETURN_VALUE(arg=None, lineno=227)
>         68	LOAD_GLOBAL(arg=1, lineno=229)
          70	LOAD_CONST(arg=4, lineno=229)
          72	CALL_FUNCTION(arg=1, lineno=229)
          74	RAISE_VARARGS(arg=1, lineno=229)
>         76	LOAD_FAST(arg=0, lineno=230)
          78	LOAD_CONST(arg=1, lineno=230)
          80	COMPARE_OP(arg=3, lineno=230)
          82	POP_JUMP_IF_FALSE(arg=106, lineno=230)
          84	LOAD_FAST(arg=0, lineno=230)
          86	LOAD_CONST(arg=5, lineno=230)
          88	COMPARE_OP(arg=3, lineno=230)
          90	POP_JUMP_IF_FALSE(arg=106, lineno=230)
          92	LOAD_CONST(arg=2, lineno=231)
          94	RETURN_VALUE(arg=None, lineno=231)
          96	JUMP_FORWARD(arg=8, lineno=231)
>         98	LOAD_CONST(arg=6, lineno=233)
         100	STORE_FAST(arg=3, lineno=233)
         102	LOAD_FAST(arg=1, lineno=234)
         104	STORE_FAST(arg=4, lineno=234)
>        106	LOAD_FAST(arg=4, lineno=235)
         108	LOAD_CONST(arg=7, lineno=235)
         110	COMPARE_OP(arg=4, lineno=235)
         112	POP_JUMP_IF_FALSE(arg=130, lineno=235)
         114	LOAD_GLOBAL(arg=2, lineno=237)
         116	LOAD_METHOD(arg=3, lineno=237)
         118	LOAD_FAST(arg=0, lineno=237)
         120	LOAD_GLOBAL(arg=4, lineno=237)
         122	LOAD_FAST(arg=1, lineno=237)
         124	CALL_FUNCTION(arg=1, lineno=237)
         126	CALL_METHOD(arg=2, lineno=237)
         128	RETURN_VALUE(arg=None, lineno=237)
>        130	LOAD_FAST(arg=4, lineno=238)
         132	LOAD_CONST(arg=2, lineno=238)
         134	COMPARE_OP(arg=3, lineno=238)
         136	POP_JUMP_IF_FALSE(arg=172, lineno=238)
         138	LOAD_FAST(arg=4, lineno=239)
         140	LOAD_CONST(arg=1, lineno=239)
         142	BINARY_AND(arg=None, lineno=239)
         144	POP_JUMP_IF_FALSE(arg=154, lineno=239)
         146	LOAD_FAST(arg=2, lineno=240)
         148	LOAD_FAST(arg=0, lineno=240)
         150	INPLACE_MULTIPLY(arg=None, lineno=240)
         152	STORE_FAST(arg=2, lineno=240)
>        154	LOAD_FAST(arg=4, lineno=241)
         156	LOAD_CONST(arg=1, lineno=241)
         158	INPLACE_RSHIFT(arg=None, lineno=241)
         160	STORE_FAST(arg=4, lineno=241)
         162	LOAD_FAST(arg=0, lineno=242)
         164	LOAD_FAST(arg=0, lineno=242)
         166	INPLACE_MULTIPLY(arg=None, lineno=242)
         168	STORE_FAST(arg=0, lineno=242)
         170	JUMP_ABSOLUTE(arg=130, lineno=242)
>        172	LOAD_FAST(arg=3, lineno=244)
         174	POP_JUMP_IF_FALSE(arg=184, lineno=244)
         176	LOAD_CONST(arg=8, lineno=244)
         178	LOAD_FAST(arg=2, lineno=244)
         180	BINARY_TRUE_DIVIDE(arg=None, lineno=244)
         182	RETURN_VALUE(arg=None, lineno=244)
>        184	LOAD_FAST(arg=2, lineno=244)
         186	RETURN_VALUE(arg=None, lineno=244)
DEBUG 2022-01-28 15:49:28,849 pending: deque([State(pc_initial=0 nstack_initial=0)])
DEBUG 2022-01-28 15:49:28,849 stack: []
DEBUG 2022-01-28 15:49:28,849 dispatch pc=0, inst=NOP(arg=None, lineno=217)
DEBUG 2022-01-28 15:49:28,849 stack []
DEBUG 2022-01-28 15:49:28,849 dispatch pc=2, inst=LOAD_DEREF(arg=1, lineno=217)
DEBUG 2022-01-28 15:49:28,849 stack []
DEBUG 2022-01-28 15:49:28,849 dispatch pc=4, inst=LOAD_CONST(arg=1, lineno=217)
DEBUG 2022-01-28 15:49:28,849 stack ['$2load_deref.0']
DEBUG 2022-01-28 15:49:28,849 dispatch pc=6, inst=CALL_FUNCTION(arg=1, lineno=217)
DEBUG 2022-01-28 15:49:28,849 stack ['$2load_deref.0', '$const4.1']
DEBUG 2022-01-28 15:49:28,849 dispatch pc=8, inst=STORE_FAST(arg=2, lineno=217)
DEBUG 2022-01-28 15:49:28,849 stack ['$6call_function.2']
DEBUG 2022-01-28 15:49:28,849 dispatch pc=10, inst=LOAD_DEREF(arg=1, lineno=218)
DEBUG 2022-01-28 15:49:28,849 stack []
DEBUG 2022-01-28 15:49:28,849 dispatch pc=12, inst=LOAD_FAST(arg=0, lineno=218)
DEBUG 2022-01-28 15:49:28,849 stack ['$10load_deref.3']
DEBUG 2022-01-28 15:49:28,849 dispatch pc=14, inst=CALL_FUNCTION(arg=1, lineno=218)
DEBUG 2022-01-28 15:49:28,849 stack ['$10load_deref.3', '$a12.4']
DEBUG 2022-01-28 15:49:28,849 dispatch pc=16, inst=STORE_FAST(arg=0, lineno=218)
DEBUG 2022-01-28 15:49:28,849 stack ['$14call_function.5']
DEBUG 2022-01-28 15:49:28,849 dispatch pc=18, inst=LOAD_FAST(arg=1, lineno=219)
DEBUG 2022-01-28 15:49:28,849 stack []
DEBUG 2022-01-28 15:49:28,849 dispatch pc=20, inst=LOAD_CONST(arg=2, lineno=219)
DEBUG 2022-01-28 15:49:28,849 stack ['$b18.6']
DEBUG 2022-01-28 15:49:28,849 dispatch pc=22, inst=COMPARE_OP(arg=0, lineno=219)
DEBUG 2022-01-28 15:49:28,849 stack ['$b18.6', '$const20.7']
DEBUG 2022-01-28 15:49:28,849 dispatch pc=24, inst=POP_JUMP_IF_FALSE(arg=98, lineno=219)
DEBUG 2022-01-28 15:49:28,849 stack ['$22compare_op.8']
DEBUG 2022-01-28 15:49:28,849 end state. edges=[Edge(pc=26, stack=(), blockstack=(), npush=0), Edge(pc=98, stack=(), blockstack=(), npush=0)]
DEBUG 2022-01-28 15:49:28,849 pending: deque([State(pc_initial=26 nstack_initial=0), State(pc_initial=98 nstack_initial=0)])
DEBUG 2022-01-28 15:49:28,849 stack: []
DEBUG 2022-01-28 15:49:28,849 dispatch pc=26, inst=LOAD_CONST(arg=3, lineno=220)
DEBUG 2022-01-28 15:49:28,849 stack []
DEBUG 2022-01-28 15:49:28,849 dispatch pc=28, inst=STORE_FAST(arg=3, lineno=220)
DEBUG 2022-01-28 15:49:28,849 stack ['$const26.0']
DEBUG 2022-01-28 15:49:28,849 dispatch pc=30, inst=LOAD_FAST(arg=1, lineno=221)
DEBUG 2022-01-28 15:49:28,849 stack []
DEBUG 2022-01-28 15:49:28,849 dispatch pc=32, inst=UNARY_NEGATIVE(arg=None, lineno=221)
DEBUG 2022-01-28 15:49:28,849 stack ['$b30.1']
DEBUG 2022-01-28 15:49:28,849 dispatch pc=34, inst=STORE_FAST(arg=4, lineno=221)
DEBUG 2022-01-28 15:49:28,849 stack ['$32unary_negative.2']
DEBUG 2022-01-28 15:49:28,849 dispatch pc=36, inst=LOAD_FAST(arg=4, lineno=222)
DEBUG 2022-01-28 15:49:28,849 stack []
DEBUG 2022-01-28 15:49:28,849 dispatch pc=38, inst=LOAD_CONST(arg=2, lineno=222)
DEBUG 2022-01-28 15:49:28,849 stack ['$exp36.3']
DEBUG 2022-01-28 15:49:28,849 dispatch pc=40, inst=COMPARE_OP(arg=0, lineno=222)
DEBUG 2022-01-28 15:49:28,857 stack ['$exp36.3', '$const38.4']
DEBUG 2022-01-28 15:49:28,857 dispatch pc=42, inst=POP_JUMP_IF_FALSE(arg=48, lineno=222)
DEBUG 2022-01-28 15:49:28,857 stack ['$40compare_op.5']
DEBUG 2022-01-28 15:49:28,857 end state. edges=[Edge(pc=44, stack=(), blockstack=(), npush=0), Edge(pc=48, stack=(), blockstack=(), npush=0)]
DEBUG 2022-01-28 15:49:28,857 pending: deque([State(pc_initial=98 nstack_initial=0), State(pc_initial=44 nstack_initial=0), State(pc_initial=48 nstack_initial=0)])
DEBUG 2022-01-28 15:49:28,857 stack: []
DEBUG 2022-01-28 15:49:28,857 dispatch pc=98, inst=LOAD_CONST(arg=6, lineno=233)
DEBUG 2022-01-28 15:49:28,857 stack []
DEBUG 2022-01-28 15:49:28,857 dispatch pc=100, inst=STORE_FAST(arg=3, lineno=233)
DEBUG 2022-01-28 15:49:28,857 stack ['$const98.0']
DEBUG 2022-01-28 15:49:28,857 dispatch pc=102, inst=LOAD_FAST(arg=1, lineno=234)
DEBUG 2022-01-28 15:49:28,857 stack []
DEBUG 2022-01-28 15:49:28,857 dispatch pc=104, inst=STORE_FAST(arg=4, lineno=234)
DEBUG 2022-01-28 15:49:28,857 stack ['$b102.1']
DEBUG 2022-01-28 15:49:28,857 end state. edges=[Edge(pc=106, stack=(), blockstack=(), npush=0)]
DEBUG 2022-01-28 15:49:28,857 pending: deque([State(pc_initial=44 nstack_initial=0), State(pc_initial=48 nstack_initial=0), State(pc_initial=106 nstack_initial=0)])
DEBUG 2022-01-28 15:49:28,857 stack: []
DEBUG 2022-01-28 15:49:28,857 dispatch pc=44, inst=LOAD_GLOBAL(arg=0, lineno=223)
DEBUG 2022-01-28 15:49:28,857 stack []
DEBUG 2022-01-28 15:49:28,857 dispatch pc=46, inst=RAISE_VARARGS(arg=1, lineno=223)
DEBUG 2022-01-28 15:49:28,857 stack ['$44load_global.0']
DEBUG 2022-01-28 15:49:28,857 end state. edges=[]
DEBUG 2022-01-28 15:49:28,859 pending: deque([State(pc_initial=48 nstack_initial=0), State(pc_initial=106 nstack_initial=0)])
DEBUG 2022-01-28 15:49:28,859 stack: []
DEBUG 2022-01-28 15:49:28,859 dispatch pc=48, inst=LOAD_DEREF(arg=0, lineno=224)
DEBUG 2022-01-28 15:49:28,859 stack []
DEBUG 2022-01-28 15:49:28,859 dispatch pc=50, inst=POP_JUMP_IF_FALSE(arg=106, lineno=224)
DEBUG 2022-01-28 15:49:28,859 stack ['$48load_deref.0']
DEBUG 2022-01-28 15:49:28,859 end state. edges=[Edge(pc=52, stack=(), blockstack=(), npush=0), Edge(pc=106, stack=(), blockstack=(), npush=0)]
DEBUG 2022-01-28 15:49:28,859 pending: deque([State(pc_initial=106 nstack_initial=0), State(pc_initial=52 nstack_initial=0), State(pc_initial=106 nstack_initial=0)])
DEBUG 2022-01-28 15:49:28,859 stack: []
DEBUG 2022-01-28 15:49:28,859 dispatch pc=106, inst=LOAD_FAST(arg=4, lineno=235)
DEBUG 2022-01-28 15:49:28,859 stack []
DEBUG 2022-01-28 15:49:28,859 dispatch pc=108, inst=LOAD_CONST(arg=7, lineno=235)
DEBUG 2022-01-28 15:49:28,859 stack ['$exp106.0']
DEBUG 2022-01-28 15:49:28,859 dispatch pc=110, inst=COMPARE_OP(arg=4, lineno=235)
DEBUG 2022-01-28 15:49:28,859 stack ['$exp106.0', '$const108.1']
DEBUG 2022-01-28 15:49:28,859 dispatch pc=112, inst=POP_JUMP_IF_FALSE(arg=130, lineno=235)
DEBUG 2022-01-28 15:49:28,859 stack ['$110compare_op.2']
DEBUG 2022-01-28 15:49:28,859 end state. edges=[Edge(pc=114, stack=(), blockstack=(), npush=0), Edge(pc=130, stack=(), blockstack=(), npush=0)]
DEBUG 2022-01-28 15:49:28,859 pending: deque([State(pc_initial=52 nstack_initial=0), State(pc_initial=106 nstack_initial=0), State(pc_initial=114 nstack_initial=0), State(pc_initial=130 nstack_initial=0)])
DEBUG 2022-01-28 15:49:28,859 stack: []
DEBUG 2022-01-28 15:49:28,859 dispatch pc=52, inst=LOAD_FAST(arg=0, lineno=225)
DEBUG 2022-01-28 15:49:28,859 stack []
DEBUG 2022-01-28 15:49:28,859 dispatch pc=54, inst=LOAD_CONST(arg=2, lineno=225)
DEBUG 2022-01-28 15:49:28,859 stack ['$a52.0']
DEBUG 2022-01-28 15:49:28,859 dispatch pc=56, inst=COMPARE_OP(arg=2, lineno=225)
DEBUG 2022-01-28 15:49:28,859 stack ['$a52.0', '$const54.1']
DEBUG 2022-01-28 15:49:28,859 dispatch pc=58, inst=POP_JUMP_IF_FALSE(arg=76, lineno=225)
DEBUG 2022-01-28 15:49:28,859 stack ['$56compare_op.2']
DEBUG 2022-01-28 15:49:28,859 end state. edges=[Edge(pc=60, stack=(), blockstack=(), npush=0), Edge(pc=76, stack=(), blockstack=(), npush=0)]
DEBUG 2022-01-28 15:49:28,859 pending: deque([State(pc_initial=106 nstack_initial=0), State(pc_initial=114 nstack_initial=0), State(pc_initial=130 nstack_initial=0), State(pc_initial=60 nstack_initial=0), State(pc_initial=76 nstack_initial=0)])
DEBUG 2022-01-28 15:49:28,859 pending: deque([State(pc_initial=114 nstack_initial=0), State(pc_initial=130 nstack_initial=0), State(pc_initial=60 nstack_initial=0), State(pc_initial=76 nstack_initial=0)])
DEBUG 2022-01-28 15:49:28,859 stack: []
DEBUG 2022-01-28 15:49:28,859 dispatch pc=114, inst=LOAD_GLOBAL(arg=2, lineno=237)
DEBUG 2022-01-28 15:49:28,859 stack []
DEBUG 2022-01-28 15:49:28,859 dispatch pc=116, inst=LOAD_METHOD(arg=3, lineno=237)
DEBUG 2022-01-28 15:49:28,859 stack ['$114load_global.0']
DEBUG 2022-01-28 15:49:28,859 dispatch pc=118, inst=LOAD_FAST(arg=0, lineno=237)
DEBUG 2022-01-28 15:49:28,859 stack ['$116load_method.1']
DEBUG 2022-01-28 15:49:28,859 dispatch pc=120, inst=LOAD_GLOBAL(arg=4, lineno=237)
DEBUG 2022-01-28 15:49:28,859 stack ['$116load_method.1', '$a118.2']
DEBUG 2022-01-28 15:49:28,859 dispatch pc=122, inst=LOAD_FAST(arg=1, lineno=237)
DEBUG 2022-01-28 15:49:28,859 stack ['$116load_method.1', '$a118.2', '$120load_global.3']
DEBUG 2022-01-28 15:49:28,859 dispatch pc=124, inst=CALL_FUNCTION(arg=1, lineno=237)
DEBUG 2022-01-28 15:49:28,859 stack ['$116load_method.1', '$a118.2', '$120load_global.3', '$b122.4']
DEBUG 2022-01-28 15:49:28,859 dispatch pc=126, inst=CALL_METHOD(arg=2, lineno=237)
DEBUG 2022-01-28 15:49:28,859 stack ['$116load_method.1', '$a118.2', '$124call_function.5']
DEBUG 2022-01-28 15:49:28,859 dispatch pc=128, inst=RETURN_VALUE(arg=None, lineno=237)
DEBUG 2022-01-28 15:49:28,859 stack ['$126call_method.6']
DEBUG 2022-01-28 15:49:28,859 end state. edges=[]
DEBUG 2022-01-28 15:49:28,859 pending: deque([State(pc_initial=130 nstack_initial=0), State(pc_initial=60 nstack_initial=0), State(pc_initial=76 nstack_initial=0)])
DEBUG 2022-01-28 15:49:28,859 stack: []
DEBUG 2022-01-28 15:49:28,859 dispatch pc=130, inst=LOAD_FAST(arg=4, lineno=238)
DEBUG 2022-01-28 15:49:28,859 stack []
DEBUG 2022-01-28 15:49:28,859 dispatch pc=132, inst=LOAD_CONST(arg=2, lineno=238)
DEBUG 2022-01-28 15:49:28,859 stack ['$exp130.0']
DEBUG 2022-01-28 15:49:28,859 dispatch pc=134, inst=COMPARE_OP(arg=3, lineno=238)
DEBUG 2022-01-28 15:49:28,859 stack ['$exp130.0', '$const132.1']
DEBUG 2022-01-28 15:49:28,859 dispatch pc=136, inst=POP_JUMP_IF_FALSE(arg=172, lineno=238)
DEBUG 2022-01-28 15:49:28,859 stack ['$134compare_op.2']
DEBUG 2022-01-28 15:49:28,859 end state. edges=[Edge(pc=138, stack=(), blockstack=(), npush=0), Edge(pc=172, stack=(), blockstack=(), npush=0)]
DEBUG 2022-01-28 15:49:28,859 pending: deque([State(pc_initial=60 nstack_initial=0), State(pc_initial=76 nstack_initial=0), State(pc_initial=138 nstack_initial=0), State(pc_initial=172 nstack_initial=0)])
DEBUG 2022-01-28 15:49:28,859 stack: []
DEBUG 2022-01-28 15:49:28,859 dispatch pc=60, inst=LOAD_DEREF(arg=2, lineno=226)
DEBUG 2022-01-28 15:49:28,859 stack []
DEBUG 2022-01-28 15:49:28,859 dispatch pc=62, inst=POP_JUMP_IF_FALSE(arg=68, lineno=226)
DEBUG 2022-01-28 15:49:28,859 stack ['$60load_deref.0']
DEBUG 2022-01-28 15:49:28,859 end state. edges=[Edge(pc=64, stack=(), blockstack=(), npush=0), Edge(pc=68, stack=(), blockstack=(), npush=0)]
DEBUG 2022-01-28 15:49:28,859 pending: deque([State(pc_initial=76 nstack_initial=0), State(pc_initial=138 nstack_initial=0), State(pc_initial=172 nstack_initial=0), State(pc_initial=64 nstack_initial=0), State(pc_initial=68 nstack_initial=0)])
DEBUG 2022-01-28 15:49:28,859 stack: []
DEBUG 2022-01-28 15:49:28,859 dispatch pc=76, inst=LOAD_FAST(arg=0, lineno=230)
DEBUG 2022-01-28 15:49:28,859 stack []
DEBUG 2022-01-28 15:49:28,859 dispatch pc=78, inst=LOAD_CONST(arg=1, lineno=230)
DEBUG 2022-01-28 15:49:28,859 stack ['$a76.0']
DEBUG 2022-01-28 15:49:28,859 dispatch pc=80, inst=COMPARE_OP(arg=3, lineno=230)
DEBUG 2022-01-28 15:49:28,859 stack ['$a76.0', '$const78.1']
DEBUG 2022-01-28 15:49:28,859 dispatch pc=82, inst=POP_JUMP_IF_FALSE(arg=106, lineno=230)
DEBUG 2022-01-28 15:49:28,859 stack ['$80compare_op.2']
DEBUG 2022-01-28 15:49:28,859 end state. edges=[Edge(pc=84, stack=(), blockstack=(), npush=0), Edge(pc=106, stack=(), blockstack=(), npush=0)]
DEBUG 2022-01-28 15:49:28,859 pending: deque([State(pc_initial=138 nstack_initial=0), State(pc_initial=172 nstack_initial=0), State(pc_initial=64 nstack_initial=0), State(pc_initial=68 nstack_initial=0), State(pc_initial=84 nstack_initial=0), State(pc_initial=106 nstack_initial=0)])
DEBUG 2022-01-28 15:49:28,859 stack: []
DEBUG 2022-01-28 15:49:28,859 dispatch pc=138, inst=LOAD_FAST(arg=4, lineno=239)
DEBUG 2022-01-28 15:49:28,859 stack []
DEBUG 2022-01-28 15:49:28,859 dispatch pc=140, inst=LOAD_CONST(arg=1, lineno=239)
DEBUG 2022-01-28 15:49:28,859 stack ['$exp138.0']
DEBUG 2022-01-28 15:49:28,859 dispatch pc=142, inst=BINARY_AND(arg=None, lineno=239)
DEBUG 2022-01-28 15:49:28,859 stack ['$exp138.0', '$const140.1']
DEBUG 2022-01-28 15:49:28,859 dispatch pc=144, inst=POP_JUMP_IF_FALSE(arg=154, lineno=239)
DEBUG 2022-01-28 15:49:28,859 stack ['$142binary_and.2']
DEBUG 2022-01-28 15:49:28,859 end state. edges=[Edge(pc=146, stack=(), blockstack=(), npush=0), Edge(pc=154, stack=(), blockstack=(), npush=0)]
DEBUG 2022-01-28 15:49:28,859 pending: deque([State(pc_initial=172 nstack_initial=0), State(pc_initial=64 nstack_initial=0), State(pc_initial=68 nstack_initial=0), State(pc_initial=84 nstack_initial=0), State(pc_initial=106 nstack_initial=0), State(pc_initial=146 nstack_initial=0), State(pc_initial=154 nstack_initial=0)])
DEBUG 2022-01-28 15:49:28,867 stack: []
DEBUG 2022-01-28 15:49:28,867 dispatch pc=172, inst=LOAD_FAST(arg=3, lineno=244)
DEBUG 2022-01-28 15:49:28,867 stack []
DEBUG 2022-01-28 15:49:28,867 dispatch pc=174, inst=POP_JUMP_IF_FALSE(arg=184, lineno=244)
DEBUG 2022-01-28 15:49:28,867 stack ['$invert172.0']
DEBUG 2022-01-28 15:49:28,867 end state. edges=[Edge(pc=176, stack=(), blockstack=(), npush=0), Edge(pc=184, stack=(), blockstack=(), npush=0)]
DEBUG 2022-01-28 15:49:28,867 pending: deque([State(pc_initial=64 nstack_initial=0), State(pc_initial=68 nstack_initial=0), State(pc_initial=84 nstack_initial=0), State(pc_initial=106 nstack_initial=0), State(pc_initial=146 nstack_initial=0), State(pc_initial=154 nstack_initial=0), State(pc_initial=176 nstack_initial=0), State(pc_initial=184 nstack_initial=0)])
DEBUG 2022-01-28 15:49:28,867 stack: []
DEBUG 2022-01-28 15:49:28,867 dispatch pc=64, inst=LOAD_DEREF(arg=2, lineno=227)
DEBUG 2022-01-28 15:49:28,867 stack []
DEBUG 2022-01-28 15:49:28,867 dispatch pc=66, inst=RETURN_VALUE(arg=None, lineno=227)
DEBUG 2022-01-28 15:49:28,867 stack ['$64load_deref.0']
DEBUG 2022-01-28 15:49:28,867 end state. edges=[]
DEBUG 2022-01-28 15:49:28,867 pending: deque([State(pc_initial=68 nstack_initial=0), State(pc_initial=84 nstack_initial=0), State(pc_initial=106 nstack_initial=0), State(pc_initial=146 nstack_initial=0), State(pc_initial=154 nstack_initial=0), State(pc_initial=176 nstack_initial=0), State(pc_initial=184 nstack_initial=0)])
DEBUG 2022-01-28 15:49:28,867 stack: []
DEBUG 2022-01-28 15:49:28,867 dispatch pc=68, inst=LOAD_GLOBAL(arg=1, lineno=229)
DEBUG 2022-01-28 15:49:28,867 stack []
DEBUG 2022-01-28 15:49:28,867 dispatch pc=70, inst=LOAD_CONST(arg=4, lineno=229)
DEBUG 2022-01-28 15:49:28,867 stack ['$68load_global.0']
DEBUG 2022-01-28 15:49:28,869 dispatch pc=72, inst=CALL_FUNCTION(arg=1, lineno=229)
DEBUG 2022-01-28 15:49:28,869 stack ['$68load_global.0', '$const70.1']
DEBUG 2022-01-28 15:49:28,869 dispatch pc=74, inst=RAISE_VARARGS(arg=1, lineno=229)
DEBUG 2022-01-28 15:49:28,869 stack ['$72call_function.2']
DEBUG 2022-01-28 15:49:28,869 end state. edges=[]
DEBUG 2022-01-28 15:49:28,869 pending: deque([State(pc_initial=84 nstack_initial=0), State(pc_initial=106 nstack_initial=0), State(pc_initial=146 nstack_initial=0), State(pc_initial=154 nstack_initial=0), State(pc_initial=176 nstack_initial=0), State(pc_initial=184 nstack_initial=0)])
DEBUG 2022-01-28 15:49:28,869 stack: []
DEBUG 2022-01-28 15:49:28,869 dispatch pc=84, inst=LOAD_FAST(arg=0, lineno=230)
DEBUG 2022-01-28 15:49:28,869 stack []
DEBUG 2022-01-28 15:49:28,869 dispatch pc=86, inst=LOAD_CONST(arg=5, lineno=230)
DEBUG 2022-01-28 15:49:28,869 stack ['$a84.0']
DEBUG 2022-01-28 15:49:28,869 dispatch pc=88, inst=COMPARE_OP(arg=3, lineno=230)
DEBUG 2022-01-28 15:49:28,869 stack ['$a84.0', '$const86.1']
DEBUG 2022-01-28 15:49:28,869 dispatch pc=90, inst=POP_JUMP_IF_FALSE(arg=106, lineno=230)
DEBUG 2022-01-28 15:49:28,869 stack ['$88compare_op.2']
DEBUG 2022-01-28 15:49:28,869 end state. edges=[Edge(pc=92, stack=(), blockstack=(), npush=0), Edge(pc=106, stack=(), blockstack=(), npush=0)]
DEBUG 2022-01-28 15:49:28,869 pending: deque([State(pc_initial=106 nstack_initial=0), State(pc_initial=146 nstack_initial=0), State(pc_initial=154 nstack_initial=0), State(pc_initial=176 nstack_initial=0), State(pc_initial=184 nstack_initial=0), State(pc_initial=92 nstack_initial=0), State(pc_initial=106 nstack_initial=0)])
DEBUG 2022-01-28 15:49:28,869 pending: deque([State(pc_initial=146 nstack_initial=0), State(pc_initial=154 nstack_initial=0), State(pc_initial=176 nstack_initial=0), State(pc_initial=184 nstack_initial=0), State(pc_initial=92 nstack_initial=0), State(pc_initial=106 nstack_initial=0)])
DEBUG 2022-01-28 15:49:28,869 stack: []
DEBUG 2022-01-28 15:49:28,869 dispatch pc=146, inst=LOAD_FAST(arg=2, lineno=240)
DEBUG 2022-01-28 15:49:28,869 stack []
DEBUG 2022-01-28 15:49:28,869 dispatch pc=148, inst=LOAD_FAST(arg=0, lineno=240)
DEBUG 2022-01-28 15:49:28,869 stack ['$r146.0']
DEBUG 2022-01-28 15:49:28,869 dispatch pc=150, inst=INPLACE_MULTIPLY(arg=None, lineno=240)
DEBUG 2022-01-28 15:49:28,869 stack ['$r146.0', '$a148.1']
DEBUG 2022-01-28 15:49:28,869 dispatch pc=152, inst=STORE_FAST(arg=2, lineno=240)
DEBUG 2022-01-28 15:49:28,869 stack ['$150inplace_multiply.2']
DEBUG 2022-01-28 15:49:28,869 end state. edges=[Edge(pc=154, stack=(), blockstack=(), npush=0)]
DEBUG 2022-01-28 15:49:28,869 pending: deque([State(pc_initial=154 nstack_initial=0), State(pc_initial=176 nstack_initial=0), State(pc_initial=184 nstack_initial=0), State(pc_initial=92 nstack_initial=0), State(pc_initial=106 nstack_initial=0), State(pc_initial=154 nstack_initial=0)])
DEBUG 2022-01-28 15:49:28,869 stack: []
DEBUG 2022-01-28 15:49:28,869 dispatch pc=154, inst=LOAD_FAST(arg=4, lineno=241)
DEBUG 2022-01-28 15:49:28,869 stack []
DEBUG 2022-01-28 15:49:28,869 dispatch pc=156, inst=LOAD_CONST(arg=1, lineno=241)
DEBUG 2022-01-28 15:49:28,869 stack ['$exp154.0']
DEBUG 2022-01-28 15:49:28,869 dispatch pc=158, inst=INPLACE_RSHIFT(arg=None, lineno=241)
DEBUG 2022-01-28 15:49:28,869 stack ['$exp154.0', '$const156.1']
DEBUG 2022-01-28 15:49:28,869 dispatch pc=160, inst=STORE_FAST(arg=4, lineno=241)
DEBUG 2022-01-28 15:49:28,869 stack ['$158inplace_rshift.2']
DEBUG 2022-01-28 15:49:28,869 dispatch pc=162, inst=LOAD_FAST(arg=0, lineno=242)
DEBUG 2022-01-28 15:49:28,869 stack []
DEBUG 2022-01-28 15:49:28,869 dispatch pc=164, inst=LOAD_FAST(arg=0, lineno=242)
DEBUG 2022-01-28 15:49:28,869 stack ['$a162.3']
DEBUG 2022-01-28 15:49:28,869 dispatch pc=166, inst=INPLACE_MULTIPLY(arg=None, lineno=242)
DEBUG 2022-01-28 15:49:28,869 stack ['$a162.3', '$a164.4']
DEBUG 2022-01-28 15:49:28,869 dispatch pc=168, inst=STORE_FAST(arg=0, lineno=242)
DEBUG 2022-01-28 15:49:28,869 stack ['$166inplace_multiply.5']
DEBUG 2022-01-28 15:49:28,869 dispatch pc=170, inst=JUMP_ABSOLUTE(arg=130, lineno=242)
DEBUG 2022-01-28 15:49:28,869 stack []
DEBUG 2022-01-28 15:49:28,869 end state. edges=[Edge(pc=130, stack=(), blockstack=(), npush=0)]
DEBUG 2022-01-28 15:49:28,869 pending: deque([State(pc_initial=176 nstack_initial=0), State(pc_initial=184 nstack_initial=0), State(pc_initial=92 nstack_initial=0), State(pc_initial=106 nstack_initial=0), State(pc_initial=154 nstack_initial=0), State(pc_initial=130 nstack_initial=0)])
DEBUG 2022-01-28 15:49:28,869 stack: []
DEBUG 2022-01-28 15:49:28,869 dispatch pc=176, inst=LOAD_CONST(arg=8, lineno=244)
DEBUG 2022-01-28 15:49:28,869 stack []
DEBUG 2022-01-28 15:49:28,869 dispatch pc=178, inst=LOAD_FAST(arg=2, lineno=244)
DEBUG 2022-01-28 15:49:28,869 stack ['$const176.0']
DEBUG 2022-01-28 15:49:28,869 dispatch pc=180, inst=BINARY_TRUE_DIVIDE(arg=None, lineno=244)
DEBUG 2022-01-28 15:49:28,869 stack ['$const176.0', '$r178.1']
DEBUG 2022-01-28 15:49:28,869 dispatch pc=182, inst=RETURN_VALUE(arg=None, lineno=244)
DEBUG 2022-01-28 15:49:28,869 stack ['$180binary_true_divide.2']
DEBUG 2022-01-28 15:49:28,869 end state. edges=[]
DEBUG 2022-01-28 15:49:28,869 pending: deque([State(pc_initial=184 nstack_initial=0), State(pc_initial=92 nstack_initial=0), State(pc_initial=106 nstack_initial=0), State(pc_initial=154 nstack_initial=0), State(pc_initial=130 nstack_initial=0)])
DEBUG 2022-01-28 15:49:28,869 stack: []
DEBUG 2022-01-28 15:49:28,869 dispatch pc=184, inst=LOAD_FAST(arg=2, lineno=244)
DEBUG 2022-01-28 15:49:28,869 stack []
DEBUG 2022-01-28 15:49:28,869 dispatch pc=186, inst=RETURN_VALUE(arg=None, lineno=244)
DEBUG 2022-01-28 15:49:28,869 stack ['$r184.0']
DEBUG 2022-01-28 15:49:28,869 end state. edges=[]
DEBUG 2022-01-28 15:49:28,869 pending: deque([State(pc_initial=92 nstack_initial=0), State(pc_initial=106 nstack_initial=0), State(pc_initial=154 nstack_initial=0), State(pc_initial=130 nstack_initial=0)])
DEBUG 2022-01-28 15:49:28,869 stack: []
DEBUG 2022-01-28 15:49:28,869 dispatch pc=92, inst=LOAD_CONST(arg=2, lineno=231)
DEBUG 2022-01-28 15:49:28,869 stack []
DEBUG 2022-01-28 15:49:28,869 dispatch pc=94, inst=RETURN_VALUE(arg=None, lineno=231)
DEBUG 2022-01-28 15:49:28,869 stack ['$const92.0']
DEBUG 2022-01-28 15:49:28,869 end state. edges=[]
DEBUG 2022-01-28 15:49:28,869 pending: deque([State(pc_initial=106 nstack_initial=0), State(pc_initial=154 nstack_initial=0), State(pc_initial=130 nstack_initial=0)])
DEBUG 2022-01-28 15:49:28,869 pending: deque([State(pc_initial=154 nstack_initial=0), State(pc_initial=130 nstack_initial=0)])
DEBUG 2022-01-28 15:49:28,869 pending: deque([State(pc_initial=130 nstack_initial=0)])
DEBUG 2022-01-28 15:49:28,869 -------------------------Prune PHIs-------------------------
DEBUG 2022-01-28 15:49:28,869 Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=26 nstack_initial=0): set(),
             State(pc_initial=44 nstack_initial=0): set(),
             State(pc_initial=48 nstack_initial=0): set(),
             State(pc_initial=52 nstack_initial=0): set(),
             State(pc_initial=60 nstack_initial=0): set(),
             State(pc_initial=64 nstack_initial=0): set(),
             State(pc_initial=68 nstack_initial=0): set(),
             State(pc_initial=76 nstack_initial=0): set(),
             State(pc_initial=84 nstack_initial=0): set(),
             State(pc_initial=92 nstack_initial=0): set(),
             State(pc_initial=98 nstack_initial=0): set(),
             State(pc_initial=106 nstack_initial=0): set(),
             State(pc_initial=114 nstack_initial=0): set(),
             State(pc_initial=130 nstack_initial=0): set(),
             State(pc_initial=138 nstack_initial=0): set(),
             State(pc_initial=146 nstack_initial=0): set(),
             State(pc_initial=154 nstack_initial=0): set(),
             State(pc_initial=172 nstack_initial=0): set(),
             State(pc_initial=176 nstack_initial=0): set(),
             State(pc_initial=184 nstack_initial=0): set()})
DEBUG 2022-01-28 15:49:28,869 defmap: {}
DEBUG 2022-01-28 15:49:28,869 phismap: defaultdict(<class 'set'>, {})
DEBUG 2022-01-28 15:49:28,877 changing phismap: defaultdict(<class 'set'>, {})
DEBUG 2022-01-28 15:49:28,877 keep phismap: {}
DEBUG 2022-01-28 15:49:28,877 new_out: defaultdict(<class 'dict'>, {})
DEBUG 2022-01-28 15:49:28,877 ----------------------DONE Prune PHIs-----------------------
DEBUG 2022-01-28 15:49:28,877 block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$2load_deref.0'}), (4, {'res': '$const4.1'}), (6, {'func': '$2load_deref.0', 'args': ['$const4.1'], 'res': '$6call_function.2'}), (8, {'value': '$6call_function.2'}), (10, {'res': '$10load_deref.3'}), (12, {'res': '$a12.4'}), (14, {'func': '$10load_deref.3', 'args': ['$a12.4'], 'res': '$14call_function.5'}), (16, {'value': '$14call_function.5'}), (18, {'res': '$b18.6'}), (20, {'res': '$const20.7'}), (22, {'lhs': '$b18.6', 'rhs': '$const20.7', 'res': '$22compare_op.8'}), (24, {'pred': '$22compare_op.8'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={26: (), 98: ()})
DEBUG 2022-01-28 15:49:28,877 block_infos State(pc_initial=26 nstack_initial=0):
AdaptBlockInfo(insts=((26, {'res': '$const26.0'}), (28, {'value': '$const26.0'}), (30, {'res': '$b30.1'}), (32, {'value': '$b30.1', 'res': '$32unary_negative.2'}), (34, {'value': '$32unary_negative.2'}), (36, {'res': '$exp36.3'}), (38, {'res': '$const38.4'}), (40, {'lhs': '$exp36.3', 'rhs': '$const38.4', 'res': '$40compare_op.5'}), (42, {'pred': '$40compare_op.5'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={44: (), 48: ()})
DEBUG 2022-01-28 15:49:28,877 block_infos State(pc_initial=44 nstack_initial=0):
AdaptBlockInfo(insts=((44, {'res': '$44load_global.0'}), (46, {'exc': '$44load_global.0'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG 2022-01-28 15:49:28,877 block_infos State(pc_initial=48 nstack_initial=0):
AdaptBlockInfo(insts=((48, {'res': '$48load_deref.0'}), (50, {'pred': '$48load_deref.0'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={52: (), 106: ()})
DEBUG 2022-01-28 15:49:28,877 block_infos State(pc_initial=52 nstack_initial=0):
AdaptBlockInfo(insts=((52, {'res': '$a52.0'}), (54, {'res': '$const54.1'}), (56, {'lhs': '$a52.0', 'rhs': '$const54.1', 'res': '$56compare_op.2'}), (58, {'pred': '$56compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={60: (), 76: ()})
DEBUG 2022-01-28 15:49:28,877 block_infos State(pc_initial=60 nstack_initial=0):
AdaptBlockInfo(insts=((60, {'res': '$60load_deref.0'}), (62, {'pred': '$60load_deref.0'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={64: (), 68: ()})
DEBUG 2022-01-28 15:49:28,877 block_infos State(pc_initial=64 nstack_initial=0):
AdaptBlockInfo(insts=((64, {'res': '$64load_deref.0'}), (66, {'retval': '$64load_deref.0', 'castval': '$66return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG 2022-01-28 15:49:28,877 block_infos State(pc_initial=68 nstack_initial=0):
AdaptBlockInfo(insts=((68, {'res': '$68load_global.0'}), (70, {'res': '$const70.1'}), (72, {'func': '$68load_global.0', 'args': ['$const70.1'], 'res': '$72call_function.2'}), (74, {'exc': '$72call_function.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG 2022-01-28 15:49:28,877 block_infos State(pc_initial=76 nstack_initial=0):
AdaptBlockInfo(insts=((76, {'res': '$a76.0'}), (78, {'res': '$const78.1'}), (80, {'lhs': '$a76.0', 'rhs': '$const78.1', 'res': '$80compare_op.2'}), (82, {'pred': '$80compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={84: (), 106: ()})
DEBUG 2022-01-28 15:49:28,877 block_infos State(pc_initial=84 nstack_initial=0):
AdaptBlockInfo(insts=((84, {'res': '$a84.0'}), (86, {'res': '$const86.1'}), (88, {'lhs': '$a84.0', 'rhs': '$const86.1', 'res': '$88compare_op.2'}), (90, {'pred': '$88compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={92: (), 106: ()})
DEBUG 2022-01-28 15:49:28,877 block_infos State(pc_initial=92 nstack_initial=0):
AdaptBlockInfo(insts=((92, {'res': '$const92.0'}), (94, {'retval': '$const92.0', 'castval': '$94return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG 2022-01-28 15:49:28,877 block_infos State(pc_initial=98 nstack_initial=0):
AdaptBlockInfo(insts=((98, {'res': '$const98.0'}), (100, {'value': '$const98.0'}), (102, {'res': '$b102.1'}), (104, {'value': '$b102.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={106: ()})
DEBUG 2022-01-28 15:49:28,877 block_infos State(pc_initial=106 nstack_initial=0):
AdaptBlockInfo(insts=((106, {'res': '$exp106.0'}), (108, {'res': '$const108.1'}), (110, {'lhs': '$exp106.0', 'rhs': '$const108.1', 'res': '$110compare_op.2'}), (112, {'pred': '$110compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={114: (), 130: ()})
DEBUG 2022-01-28 15:49:28,877 block_infos State(pc_initial=114 nstack_initial=0):
AdaptBlockInfo(insts=((114, {'res': '$114load_global.0'}), (116, {'item': '$114load_global.0', 'res': '$116load_method.1'}), (118, {'res': '$a118.2'}), (120, {'res': '$120load_global.3'}), (122, {'res': '$b122.4'}), (124, {'func': '$120load_global.3', 'args': ['$b122.4'], 'res': '$124call_function.5'}), (126, {'func': '$116load_method.1', 'args': ['$a118.2', '$124call_function.5'], 'res': '$126call_method.6'}), (128, {'retval': '$126call_method.6', 'castval': '$128return_value.7'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG 2022-01-28 15:49:28,879 block_infos State(pc_initial=130 nstack_initial=0):
AdaptBlockInfo(insts=((130, {'res': '$exp130.0'}), (132, {'res': '$const132.1'}), (134, {'lhs': '$exp130.0', 'rhs': '$const132.1', 'res': '$134compare_op.2'}), (136, {'pred': '$134compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={138: (), 172: ()})
DEBUG 2022-01-28 15:49:28,879 block_infos State(pc_initial=138 nstack_initial=0):
AdaptBlockInfo(insts=((138, {'res': '$exp138.0'}), (140, {'res': '$const140.1'}), (142, {'lhs': '$exp138.0', 'rhs': '$const140.1', 'res': '$142binary_and.2'}), (144, {'pred': '$142binary_and.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={146: (), 154: ()})
DEBUG 2022-01-28 15:49:28,879 block_infos State(pc_initial=146 nstack_initial=0):
AdaptBlockInfo(insts=((146, {'res': '$r146.0'}), (148, {'res': '$a148.1'}), (150, {'lhs': '$r146.0', 'rhs': '$a148.1', 'res': '$150inplace_multiply.2'}), (152, {'value': '$150inplace_multiply.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={154: ()})
DEBUG 2022-01-28 15:49:28,879 block_infos State(pc_initial=154 nstack_initial=0):
AdaptBlockInfo(insts=((154, {'res': '$exp154.0'}), (156, {'res': '$const156.1'}), (158, {'lhs': '$exp154.0', 'rhs': '$const156.1', 'res': '$158inplace_rshift.2'}), (160, {'value': '$158inplace_rshift.2'}), (162, {'res': '$a162.3'}), (164, {'res': '$a164.4'}), (166, {'lhs': '$a162.3', 'rhs': '$a164.4', 'res': '$166inplace_multiply.5'}), (168, {'value': '$166inplace_multiply.5'}), (170, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={130: ()})
DEBUG 2022-01-28 15:49:28,879 block_infos State(pc_initial=172 nstack_initial=0):
AdaptBlockInfo(insts=((172, {'res': '$invert172.0'}), (174, {'pred': '$invert172.0'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={176: (), 184: ()})
DEBUG 2022-01-28 15:49:28,879 block_infos State(pc_initial=176 nstack_initial=0):
AdaptBlockInfo(insts=((176, {'res': '$const176.0'}), (178, {'res': '$r178.1'}), (180, {'lhs': '$const176.0', 'rhs': '$r178.1', 'res': '$180binary_true_divide.2'}), (182, {'retval': '$180binary_true_divide.2', 'castval': '$182return_value.3'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG 2022-01-28 15:49:28,879 block_infos State(pc_initial=184 nstack_initial=0):
AdaptBlockInfo(insts=((184, {'res': '$r184.0'}), (186, {'retval': '$r184.0', 'castval': '$186return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG 2022-01-28 15:49:28,879 label 0:
    a = arg(0, name=a)                       ['a']
    b = arg(1, name=b)                       ['b']
    $2load_deref.0 = freevar(tp: float64)    ['$2load_deref.0']
    $const4.1 = const(int, 1)                ['$const4.1']
    r = call $2load_deref.0($const4.1, func=$2load_deref.0, args=[Var($const4.1, numbers.py:217)], kws=(), vararg=None, target=None) ['$2load_deref.0', '$const4.1', 'r']
    $10load_deref.3 = freevar(tp: float64)   ['$10load_deref.3']
    a.1 = call $10load_deref.3(a, func=$10load_deref.3, args=[Var(a, numbers.py:217)], kws=(), vararg=None, target=None) ['$10load_deref.3', 'a', 'a.1']
    $const20.7 = const(int, 0)               ['$const20.7']
    $22compare_op.8 = b < $const20.7         ['$22compare_op.8', '$const20.7', 'b']
    bool24 = global(bool: <class 'bool'>)    ['bool24']
    $24pred = call bool24($22compare_op.8, func=bool24, args=(Var($22compare_op.8, numbers.py:219),), kws=(), vararg=None, target=None) ['$22compare_op.8', '$24pred', 'bool24']
    branch $24pred, 26, 98                   ['$24pred']
label 26:
    invert = const(bool, True)               ['invert']
    exp = unary(fn=<built-in function neg>, value=b) ['b', 'exp']
    $const38.4 = const(int, 0)               ['$const38.4']
    $40compare_op.5 = exp < $const38.4       ['$40compare_op.5', '$const38.4', 'exp']
    bool42 = global(bool: <class 'bool'>)    ['bool42']
    $42pred = call bool42($40compare_op.5, func=bool42, args=(Var($40compare_op.5, numbers.py:222),), kws=(), vararg=None, target=None) ['$40compare_op.5', '$42pred', 'bool42']
    branch $42pred, 44, 48                   ['$42pred']
label 44:
    $44load_global.0 = global(OverflowError: <class 'OverflowError'>) ['$44load_global.0']
    raise $44load_global.0                   ['$44load_global.0']
label 48:
    $48load_deref.0 = freevar(is_integer: False) ['$48load_deref.0']
    bool50 = global(bool: <class 'bool'>)    ['bool50']
    $50pred = call bool50($48load_deref.0, func=bool50, args=(Var($48load_deref.0, numbers.py:224),), kws=(), vararg=None, target=None) ['$48load_deref.0', '$50pred', 'bool50']
    branch $50pred, 52, 106                  ['$50pred']
label 52:
    $const54.1 = const(int, 0)               ['$const54.1']
    $56compare_op.2 = a.1 == $const54.1      ['$56compare_op.2', '$const54.1', 'a.1']
    bool58 = global(bool: <class 'bool'>)    ['bool58']
    $58pred = call bool58($56compare_op.2, func=bool58, args=(Var($56compare_op.2, numbers.py:225),), kws=(), vararg=None, target=None) ['$56compare_op.2', '$58pred', 'bool58']
    branch $58pred, 60, 76                   ['$58pred']
label 60:
    $60load_deref.0 = freevar(zerodiv_return: False) ['$60load_deref.0']
    bool62 = global(bool: <class 'bool'>)    ['bool62']
    $62pred = call bool62($60load_deref.0, func=bool62, args=(Var($60load_deref.0, numbers.py:226),), kws=(), vararg=None, target=None) ['$60load_deref.0', '$62pred', 'bool62']
    branch $62pred, 64, 68                   ['$62pred']
label 64:
    $64load_deref.0 = freevar(zerodiv_return: False) ['$64load_deref.0']
    $66return_value.1 = cast(value=$64load_deref.0) ['$64load_deref.0', '$66return_value.1']
    return $66return_value.1                 ['$66return_value.1']
label 68:
    $68load_global.0 = global(ZeroDivisionError: <class 'ZeroDivisionError'>) ['$68load_global.0']
    $const70.1 = const(str, 0 cannot be raised to a negative power) ['$const70.1']
    $72call_function.2 = call $68load_global.0($const70.1, func=$68load_global.0, args=[Var($const70.1, numbers.py:229)], kws=(), vararg=None, target=None) ['$68load_global.0', '$72call_function.2', '$const70.1']
    raise $72call_function.2                 ['$72call_function.2']
label 76:
    $const78.1 = const(int, 1)               ['$const78.1']
    $80compare_op.2 = a.1 != $const78.1      ['$80compare_op.2', '$const78.1', 'a.1']
    bool82 = global(bool: <class 'bool'>)    ['bool82']
    $82pred = call bool82($80compare_op.2, func=bool82, args=(Var($80compare_op.2, numbers.py:230),), kws=(), vararg=None, target=None) ['$80compare_op.2', '$82pred', 'bool82']
    branch $82pred, 84, 106                  ['$82pred']
label 84:
    $const86.1 = const(int, -1)              ['$const86.1']
    $88compare_op.2 = a.1 != $const86.1      ['$88compare_op.2', '$const86.1', 'a.1']
    bool90 = global(bool: <class 'bool'>)    ['bool90']
    $90pred = call bool90($88compare_op.2, func=bool90, args=(Var($88compare_op.2, numbers.py:230),), kws=(), vararg=None, target=None) ['$88compare_op.2', '$90pred', 'bool90']
    branch $90pred, 92, 106                  ['$90pred']
label 92:
    $const92.0 = const(int, 0)               ['$const92.0']
    $94return_value.1 = cast(value=$const92.0) ['$94return_value.1', '$const92.0']
    return $94return_value.1                 ['$94return_value.1']
label 98:
    invert = const(bool, False)              ['invert']
    exp = b                                  ['b', 'exp']
    jump 106                                 []
label 106:
    $const108.1 = const(int, 65536)          ['$const108.1']
    $110compare_op.2 = exp > $const108.1     ['$110compare_op.2', '$const108.1', 'exp']
    bool112 = global(bool: <class 'bool'>)   ['bool112']
    $112pred = call bool112($110compare_op.2, func=bool112, args=(Var($110compare_op.2, numbers.py:235),), kws=(), vararg=None, target=None) ['$110compare_op.2', '$112pred', 'bool112']
    branch $112pred, 114, 130                ['$112pred']
label 114:
    $114load_global.0 = global(math: <module 'math' (built-in)>) ['$114load_global.0']
    $116load_method.1 = getattr(value=$114load_global.0, attr=pow) ['$114load_global.0', '$116load_method.1']
    $120load_global.3 = global(float: <class 'float'>) ['$120load_global.3']
    $124call_function.5 = call $120load_global.3(b, func=$120load_global.3, args=[Var(b, numbers.py:217)], kws=(), vararg=None, target=None) ['$120load_global.3', '$124call_function.5', 'b']
    $126call_method.6 = call $116load_method.1(a.1, $124call_function.5, func=$116load_method.1, args=[Var(a.1, numbers.py:218), Var($124call_function.5, numbers.py:237)], kws=(), vararg=None, target=None) ['$116load_method.1', '$124call_function.5', '$126call_method.6', 'a.1']
    $128return_value.7 = cast(value=$126call_method.6) ['$126call_method.6', '$128return_value.7']
    return $128return_value.7                ['$128return_value.7']
label 130:
    $const132.1 = const(int, 0)              ['$const132.1']
    $134compare_op.2 = exp != $const132.1    ['$134compare_op.2', '$const132.1', 'exp']
    bool136 = global(bool: <class 'bool'>)   ['bool136']
    $136pred = call bool136($134compare_op.2, func=bool136, args=(Var($134compare_op.2, numbers.py:238),), kws=(), vararg=None, target=None) ['$134compare_op.2', '$136pred', 'bool136']
    branch $136pred, 138, 172                ['$136pred']
label 138:
    $const140.1 = const(int, 1)              ['$const140.1']
    $142binary_and.2 = exp & $const140.1     ['$142binary_and.2', '$const140.1', 'exp']
    bool144 = global(bool: <class 'bool'>)   ['bool144']
    $144pred = call bool144($142binary_and.2, func=bool144, args=(Var($142binary_and.2, numbers.py:239),), kws=(), vararg=None, target=None) ['$142binary_and.2', '$144pred', 'bool144']
    branch $144pred, 146, 154                ['$144pred']
label 146:
    $150inplace_multiply.2 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=r, rhs=a.1, static_lhs=Undefined, static_rhs=Undefined) ['$150inplace_multiply.2', 'a.1', 'r']
    r = $150inplace_multiply.2               ['$150inplace_multiply.2', 'r']
    jump 154                                 []
label 154:
    $const156.1 = const(int, 1)              ['$const156.1']
    $158inplace_rshift.2 = inplace_binop(fn=<built-in function irshift>, immutable_fn=<built-in function rshift>, lhs=exp, rhs=$const156.1, static_lhs=Undefined, static_rhs=Undefined) ['$158inplace_rshift.2', '$const156.1', 'exp']
    exp = $158inplace_rshift.2               ['$158inplace_rshift.2', 'exp']
    $166inplace_multiply.5 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=a.1, rhs=a.1, static_lhs=Undefined, static_rhs=Undefined) ['$166inplace_multiply.5', 'a.1', 'a.1']
    a.1 = $166inplace_multiply.5             ['$166inplace_multiply.5', 'a.1']
    jump 130                                 []
label 172:
    bool174 = global(bool: <class 'bool'>)   ['bool174']
    $174pred = call bool174(invert, func=bool174, args=(Var(invert, numbers.py:220),), kws=(), vararg=None, target=None) ['$174pred', 'bool174', 'invert']
    branch $174pred, 176, 184                ['$174pred']
label 176:
    $const176.0 = const(float, 1.0)          ['$const176.0']
    $180binary_true_divide.2 = $const176.0 / r ['$180binary_true_divide.2', '$const176.0', 'r']
    $182return_value.3 = cast(value=$180binary_true_divide.2) ['$180binary_true_divide.2', '$182return_value.3']
    return $182return_value.3                ['$182return_value.3']
label 184:
    $186return_value.1 = cast(value=r)       ['$186return_value.1', 'r']
    return $186return_value.1                ['$186return_value.1']

DEBUG 2022-01-28 15:49:28,890 ==== SSA block analysis pass on 0
DEBUG 2022-01-28 15:49:28,890 Running <numba.core.ssa._GatherDefsHandler object at 0x0000024108E7CF10>
DEBUG 2022-01-28 15:49:28,890 on stmt: a = arg(0, name=a)
DEBUG 2022-01-28 15:49:28,890 on stmt: b = arg(1, name=b)
DEBUG 2022-01-28 15:49:28,890 on stmt: $2load_deref.0 = freevar(tp: float64)
DEBUG 2022-01-28 15:49:28,890 on stmt: $const4.1 = const(int, 1)
DEBUG 2022-01-28 15:49:28,890 on stmt: r = call $2load_deref.0($const4.1, func=$2load_deref.0, args=[Var($const4.1, numbers.py:217)], kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:28,890 on stmt: $10load_deref.3 = freevar(tp: float64)
DEBUG 2022-01-28 15:49:28,890 on stmt: a.1 = call $10load_deref.3(a, func=$10load_deref.3, args=[Var(a, numbers.py:217)], kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:28,890 on stmt: $const20.7 = const(int, 0)
DEBUG 2022-01-28 15:49:28,890 on stmt: $22compare_op.8 = b < $const20.7
DEBUG 2022-01-28 15:49:28,890 on stmt: bool24 = global(bool: <class 'bool'>)
DEBUG 2022-01-28 15:49:28,890 on stmt: $24pred = call bool24($22compare_op.8, func=bool24, args=(Var($22compare_op.8, numbers.py:219),), kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:28,890 on stmt: branch $24pred, 26, 98
DEBUG 2022-01-28 15:49:28,890 ==== SSA block analysis pass on 26
DEBUG 2022-01-28 15:49:28,890 Running <numba.core.ssa._GatherDefsHandler object at 0x0000024108E7CF10>
DEBUG 2022-01-28 15:49:28,890 on stmt: invert = const(bool, True)
DEBUG 2022-01-28 15:49:28,890 on stmt: exp = unary(fn=<built-in function neg>, value=b)
DEBUG 2022-01-28 15:49:28,890 on stmt: $const38.4 = const(int, 0)
DEBUG 2022-01-28 15:49:28,890 on stmt: $40compare_op.5 = exp < $const38.4
DEBUG 2022-01-28 15:49:28,890 on stmt: bool42 = global(bool: <class 'bool'>)
DEBUG 2022-01-28 15:49:28,890 on stmt: $42pred = call bool42($40compare_op.5, func=bool42, args=(Var($40compare_op.5, numbers.py:222),), kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:28,890 on stmt: branch $42pred, 44, 48
DEBUG 2022-01-28 15:49:28,890 ==== SSA block analysis pass on 44
DEBUG 2022-01-28 15:49:28,890 Running <numba.core.ssa._GatherDefsHandler object at 0x0000024108E7CF10>
DEBUG 2022-01-28 15:49:28,890 on stmt: $44load_global.0 = global(OverflowError: <class 'OverflowError'>)
DEBUG 2022-01-28 15:49:28,890 on stmt: <static> raise <class 'OverflowError'>
DEBUG 2022-01-28 15:49:28,890 ==== SSA block analysis pass on 48
DEBUG 2022-01-28 15:49:28,890 Running <numba.core.ssa._GatherDefsHandler object at 0x0000024108E7CF10>
DEBUG 2022-01-28 15:49:28,890 on stmt: $48load_deref.0 = freevar(is_integer: False)
DEBUG 2022-01-28 15:49:28,890 on stmt: bool50 = global(bool: <class 'bool'>)
DEBUG 2022-01-28 15:49:28,890 on stmt: $50pred = call bool50($48load_deref.0, func=bool50, args=(Var($48load_deref.0, numbers.py:224),), kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:28,890 on stmt: jump 106
DEBUG 2022-01-28 15:49:28,890 ==== SSA block analysis pass on 98
DEBUG 2022-01-28 15:49:28,890 Running <numba.core.ssa._GatherDefsHandler object at 0x0000024108E7CF10>
DEBUG 2022-01-28 15:49:28,890 on stmt: invert = const(bool, False)
DEBUG 2022-01-28 15:49:28,890 on stmt: exp = b
DEBUG 2022-01-28 15:49:28,890 on stmt: jump 106
DEBUG 2022-01-28 15:49:28,890 ==== SSA block analysis pass on 106
DEBUG 2022-01-28 15:49:28,890 Running <numba.core.ssa._GatherDefsHandler object at 0x0000024108E7CF10>
DEBUG 2022-01-28 15:49:28,890 on stmt: $const108.1 = const(int, 65536)
DEBUG 2022-01-28 15:49:28,890 on stmt: $110compare_op.2 = exp > $const108.1
DEBUG 2022-01-28 15:49:28,890 on stmt: bool112 = global(bool: <class 'bool'>)
DEBUG 2022-01-28 15:49:28,890 on stmt: $112pred = call bool112($110compare_op.2, func=bool112, args=(Var($110compare_op.2, numbers.py:235),), kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:28,890 on stmt: branch $112pred, 114, 130
DEBUG 2022-01-28 15:49:28,890 ==== SSA block analysis pass on 114
DEBUG 2022-01-28 15:49:28,890 Running <numba.core.ssa._GatherDefsHandler object at 0x0000024108E7CF10>
DEBUG 2022-01-28 15:49:28,890 on stmt: $114load_global.0 = global(math: <module 'math' (built-in)>)
DEBUG 2022-01-28 15:49:28,890 on stmt: $116load_method.1 = getattr(value=$114load_global.0, attr=pow)
DEBUG 2022-01-28 15:49:28,890 on stmt: $120load_global.3 = global(float: <class 'float'>)
DEBUG 2022-01-28 15:49:28,890 on stmt: $124call_function.5 = call $120load_global.3(b, func=$120load_global.3, args=[Var(b, numbers.py:217)], kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:28,890 on stmt: $126call_method.6 = call $116load_method.1(a.1, $124call_function.5, func=$116load_method.1, args=[Var(a.1, numbers.py:218), Var($124call_function.5, numbers.py:237)], kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:28,890 on stmt: $128return_value.7 = cast(value=$126call_method.6)
DEBUG 2022-01-28 15:49:28,890 on stmt: return $128return_value.7
DEBUG 2022-01-28 15:49:28,890 ==== SSA block analysis pass on 130
DEBUG 2022-01-28 15:49:28,890 Running <numba.core.ssa._GatherDefsHandler object at 0x0000024108E7CF10>
DEBUG 2022-01-28 15:49:28,890 on stmt: $const132.1 = const(int, 0)
DEBUG 2022-01-28 15:49:28,890 on stmt: $134compare_op.2 = exp != $const132.1
DEBUG 2022-01-28 15:49:28,890 on stmt: bool136 = global(bool: <class 'bool'>)
DEBUG 2022-01-28 15:49:28,890 on stmt: $136pred = call bool136($134compare_op.2, func=bool136, args=(Var($134compare_op.2, numbers.py:238),), kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:28,890 on stmt: branch $136pred, 138, 172
DEBUG 2022-01-28 15:49:28,890 ==== SSA block analysis pass on 138
DEBUG 2022-01-28 15:49:28,890 Running <numba.core.ssa._GatherDefsHandler object at 0x0000024108E7CF10>
DEBUG 2022-01-28 15:49:28,890 on stmt: $const140.1 = const(int, 1)
DEBUG 2022-01-28 15:49:28,890 on stmt: $142binary_and.2 = exp & $const140.1
DEBUG 2022-01-28 15:49:28,890 on stmt: bool144 = global(bool: <class 'bool'>)
DEBUG 2022-01-28 15:49:28,898 on stmt: $144pred = call bool144($142binary_and.2, func=bool144, args=(Var($142binary_and.2, numbers.py:239),), kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:28,898 on stmt: branch $144pred, 146, 154
DEBUG 2022-01-28 15:49:28,898 ==== SSA block analysis pass on 146
DEBUG 2022-01-28 15:49:28,898 Running <numba.core.ssa._GatherDefsHandler object at 0x0000024108E7CF10>
DEBUG 2022-01-28 15:49:28,898 on stmt: $150inplace_multiply.2 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=r, rhs=a.1, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-01-28 15:49:28,898 on stmt: r = $150inplace_multiply.2
DEBUG 2022-01-28 15:49:28,898 on stmt: jump 154
DEBUG 2022-01-28 15:49:28,898 ==== SSA block analysis pass on 154
DEBUG 2022-01-28 15:49:28,898 Running <numba.core.ssa._GatherDefsHandler object at 0x0000024108E7CF10>
DEBUG 2022-01-28 15:49:28,898 on stmt: $const156.1 = const(int, 1)
DEBUG 2022-01-28 15:49:28,898 on stmt: $158inplace_rshift.2 = inplace_binop(fn=<built-in function irshift>, immutable_fn=<built-in function rshift>, lhs=exp, rhs=$const156.1, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-01-28 15:49:28,898 on stmt: exp = $158inplace_rshift.2
DEBUG 2022-01-28 15:49:28,898 on stmt: $166inplace_multiply.5 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=a.1, rhs=a.1, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-01-28 15:49:28,898 on stmt: a.1 = $166inplace_multiply.5
DEBUG 2022-01-28 15:49:28,898 on stmt: jump 130
DEBUG 2022-01-28 15:49:28,898 ==== SSA block analysis pass on 172
DEBUG 2022-01-28 15:49:28,898 Running <numba.core.ssa._GatherDefsHandler object at 0x0000024108E7CF10>
DEBUG 2022-01-28 15:49:28,898 on stmt: bool174 = global(bool: <class 'bool'>)
DEBUG 2022-01-28 15:49:28,898 on stmt: $174pred = call bool174(invert, func=bool174, args=(Var(invert, numbers.py:220),), kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:28,898 on stmt: branch $174pred, 176, 184
DEBUG 2022-01-28 15:49:28,898 ==== SSA block analysis pass on 176
DEBUG 2022-01-28 15:49:28,898 Running <numba.core.ssa._GatherDefsHandler object at 0x0000024108E7CF10>
DEBUG 2022-01-28 15:49:28,898 on stmt: $const176.0 = const(float, 1.0)
DEBUG 2022-01-28 15:49:28,898 on stmt: $180binary_true_divide.2 = $const176.0 / r
DEBUG 2022-01-28 15:49:28,898 on stmt: $182return_value.3 = cast(value=$180binary_true_divide.2)
DEBUG 2022-01-28 15:49:28,900 on stmt: return $182return_value.3
DEBUG 2022-01-28 15:49:28,900 ==== SSA block analysis pass on 184
DEBUG 2022-01-28 15:49:28,900 Running <numba.core.ssa._GatherDefsHandler object at 0x0000024108E7CF10>
DEBUG 2022-01-28 15:49:28,900 on stmt: $186return_value.1 = cast(value=r)
DEBUG 2022-01-28 15:49:28,900 on stmt: return $186return_value.1
DEBUG 2022-01-28 15:49:28,900 defs defaultdict(<class 'list'>,
            {'$10load_deref.3': [<numba.core.ir.Assign object at 0x000002410CC72340>],
             '$110compare_op.2': [<numba.core.ir.Assign object at 0x0000024108E747C0>],
             '$112pred': [<numba.core.ir.Assign object at 0x0000024108E74A30>],
             '$114load_global.0': [<numba.core.ir.Assign object at 0x0000024108E74C70>],
             '$116load_method.1': [<numba.core.ir.Assign object at 0x0000024108E74DF0>],
             '$120load_global.3': [<numba.core.ir.Assign object at 0x0000024108E760D0>],
             '$124call_function.5': [<numba.core.ir.Assign object at 0x0000024108E763D0>],
             '$126call_method.6': [<numba.core.ir.Assign object at 0x0000024108E76580>],
             '$128return_value.7': [<numba.core.ir.Assign object at 0x0000024108E76670>],
             '$134compare_op.2': [<numba.core.ir.Assign object at 0x0000024108E76B20>],
             '$136pred': [<numba.core.ir.Assign object at 0x0000024108E76D90>],
             '$142binary_and.2': [<numba.core.ir.Assign object at 0x0000024108E782E0>],
             '$144pred': [<numba.core.ir.Assign object at 0x0000024108E78550>],
             '$150inplace_multiply.2': [<numba.core.ir.Assign object at 0x0000024108E78A00>],
             '$158inplace_rshift.2': [<numba.core.ir.Assign object at 0x0000024108E78F40>],
             '$166inplace_multiply.5': [<numba.core.ir.Assign object at 0x0000024108E7A400>],
             '$174pred': [<numba.core.ir.Assign object at 0x0000024108E7A8B0>],
             '$180binary_true_divide.2': [<numba.core.ir.Assign object at 0x0000024108E7ADC0>],
             '$182return_value.3': [<numba.core.ir.Assign object at 0x0000024108E7AF10>],
             '$186return_value.1': [<numba.core.ir.Assign object at 0x0000024108E7C2B0>],
             '$22compare_op.8': [<numba.core.ir.Assign object at 0x000002410CC6EA60>],
             '$24pred': [<numba.core.ir.Assign object at 0x000002410CC6EEE0>],
             '$2load_deref.0': [<numba.core.ir.Assign object at 0x000002410CC72A60>],
             '$40compare_op.5': [<numba.core.ir.Assign object at 0x000002410CC4CB80>],
             '$42pred': [<numba.core.ir.Assign object at 0x000002410CC66340>],
             '$44load_global.0': [<numba.core.ir.Assign object at 0x000002410CC66BB0>],
             '$48load_deref.0': [<numba.core.ir.Assign object at 0x000002410CD99BE0>],
             '$50pred': [<numba.core.ir.Assign object at 0x000002410C456790>],
             '$const108.1': [<numba.core.ir.Assign object at 0x0000024108E74610>],
             '$const132.1': [<numba.core.ir.Assign object at 0x0000024108E76970>],
             '$const140.1': [<numba.core.ir.Assign object at 0x0000024108E78130>],
             '$const156.1': [<numba.core.ir.Assign object at 0x0000024108E78D90>],
             '$const176.0': [<numba.core.ir.Assign object at 0x0000024108E7AAF0>],
             '$const20.7': [<numba.core.ir.Assign object at 0x000002410CC550D0>],
             '$const38.4': [<numba.core.ir.Assign object at 0x000002410CC4C070>],
             '$const4.1': [<numba.core.ir.Assign object at 0x000002410CC72700>],
             'a': [<numba.core.ir.Assign object at 0x000002410CC729D0>],
             'a.1': [<numba.core.ir.Assign object at 0x000002410CC55E20>,
                     <numba.core.ir.Assign object at 0x0000024108E7A4C0>],
             'b': [<numba.core.ir.Assign object at 0x000002410CC72550>],
             'bool112': [<numba.core.ir.Assign object at 0x0000024108E74910>],
             'bool136': [<numba.core.ir.Assign object at 0x0000024108E76C70>],
             'bool144': [<numba.core.ir.Assign object at 0x0000024108E78430>],
             'bool174': [<numba.core.ir.Assign object at 0x0000024108E7A790>],
             'bool24': [<numba.core.ir.Assign object at 0x000002410CC6ECD0>],
             'bool42': [<numba.core.ir.Assign object at 0x000002410CC66250>],
             'bool50': [<numba.core.ir.Assign object at 0x000002410CCC7910>],
             'exp': [<numba.core.ir.Assign object at 0x000002410CC4C8B0>,
                     <numba.core.ir.Assign object at 0x0000024108E743A0>,
                     <numba.core.ir.Assign object at 0x0000024108E7A040>],
             'invert': [<numba.core.ir.Assign object at 0x000002410CC6E0A0>,
                        <numba.core.ir.Assign object at 0x0000024108E740D0>],
             'r': [<numba.core.ir.Assign object at 0x000002410CC72D00>,
                   <numba.core.ir.Assign object at 0x0000024108E78AC0>]})
DEBUG 2022-01-28 15:49:28,900 SSA violators {'invert', 'r', 'a.1', 'exp'}
DEBUG 2022-01-28 15:49:28,900 Fix SSA violator on var invert
DEBUG 2022-01-28 15:49:28,900 ==== SSA block rewrite pass on 0
DEBUG 2022-01-28 15:49:28,900 Running <numba.core.ssa._FreshVarHandler object at 0x000002410CCC6E80>
DEBUG 2022-01-28 15:49:28,900 on stmt: a = arg(0, name=a)
DEBUG 2022-01-28 15:49:28,900 on stmt: b = arg(1, name=b)
DEBUG 2022-01-28 15:49:28,900 on stmt: $2load_deref.0 = freevar(tp: float64)
DEBUG 2022-01-28 15:49:28,900 on stmt: $const4.1 = const(int, 1)
DEBUG 2022-01-28 15:49:28,900 on stmt: r = call $2load_deref.0($const4.1, func=$2load_deref.0, args=[Var($const4.1, numbers.py:217)], kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:28,900 on stmt: $10load_deref.3 = freevar(tp: float64)
DEBUG 2022-01-28 15:49:28,900 on stmt: a.1 = call $10load_deref.3(a, func=$10load_deref.3, args=[Var(a, numbers.py:217)], kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:28,900 on stmt: $const20.7 = const(int, 0)
DEBUG 2022-01-28 15:49:28,900 on stmt: $22compare_op.8 = b < $const20.7
DEBUG 2022-01-28 15:49:28,900 on stmt: bool24 = global(bool: <class 'bool'>)
DEBUG 2022-01-28 15:49:28,900 on stmt: $24pred = call bool24($22compare_op.8, func=bool24, args=(Var($22compare_op.8, numbers.py:219),), kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:28,900 on stmt: branch $24pred, 26, 98
DEBUG 2022-01-28 15:49:28,900 ==== SSA block rewrite pass on 26
DEBUG 2022-01-28 15:49:28,900 Running <numba.core.ssa._FreshVarHandler object at 0x000002410CCC6E80>
DEBUG 2022-01-28 15:49:28,900 on stmt: invert = const(bool, True)
DEBUG 2022-01-28 15:49:28,900 first assign: invert
DEBUG 2022-01-28 15:49:28,900 replaced with: invert = const(bool, True)
DEBUG 2022-01-28 15:49:28,900 on stmt: exp = unary(fn=<built-in function neg>, value=b)
DEBUG 2022-01-28 15:49:28,900 on stmt: $const38.4 = const(int, 0)
DEBUG 2022-01-28 15:49:28,900 on stmt: $40compare_op.5 = exp < $const38.4
DEBUG 2022-01-28 15:49:28,900 on stmt: bool42 = global(bool: <class 'bool'>)
DEBUG 2022-01-28 15:49:28,900 on stmt: $42pred = call bool42($40compare_op.5, func=bool42, args=(Var($40compare_op.5, numbers.py:222),), kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:28,900 on stmt: branch $42pred, 44, 48
DEBUG 2022-01-28 15:49:28,900 ==== SSA block rewrite pass on 44
DEBUG 2022-01-28 15:49:28,900 Running <numba.core.ssa._FreshVarHandler object at 0x000002410CCC6E80>
DEBUG 2022-01-28 15:49:28,900 on stmt: $44load_global.0 = global(OverflowError: <class 'OverflowError'>)
DEBUG 2022-01-28 15:49:28,900 on stmt: <static> raise <class 'OverflowError'>
DEBUG 2022-01-28 15:49:28,900 ==== SSA block rewrite pass on 48
DEBUG 2022-01-28 15:49:28,900 Running <numba.core.ssa._FreshVarHandler object at 0x000002410CCC6E80>
DEBUG 2022-01-28 15:49:28,900 on stmt: $48load_deref.0 = freevar(is_integer: False)
DEBUG 2022-01-28 15:49:28,900 on stmt: bool50 = global(bool: <class 'bool'>)
DEBUG 2022-01-28 15:49:28,900 on stmt: $50pred = call bool50($48load_deref.0, func=bool50, args=(Var($48load_deref.0, numbers.py:224),), kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:28,900 on stmt: jump 106
DEBUG 2022-01-28 15:49:28,900 ==== SSA block rewrite pass on 98
DEBUG 2022-01-28 15:49:28,900 Running <numba.core.ssa._FreshVarHandler object at 0x000002410CCC6E80>
DEBUG 2022-01-28 15:49:28,900 on stmt: invert = const(bool, False)
DEBUG 2022-01-28 15:49:28,900 replaced with: invert.1 = const(bool, False)
DEBUG 2022-01-28 15:49:28,900 on stmt: exp = b
DEBUG 2022-01-28 15:49:28,900 on stmt: jump 106
DEBUG 2022-01-28 15:49:28,900 ==== SSA block rewrite pass on 106
DEBUG 2022-01-28 15:49:28,900 Running <numba.core.ssa._FreshVarHandler object at 0x000002410CCC6E80>
DEBUG 2022-01-28 15:49:28,900 on stmt: $const108.1 = const(int, 65536)
DEBUG 2022-01-28 15:49:28,900 on stmt: $110compare_op.2 = exp > $const108.1
DEBUG 2022-01-28 15:49:28,900 on stmt: bool112 = global(bool: <class 'bool'>)
DEBUG 2022-01-28 15:49:28,900 on stmt: $112pred = call bool112($110compare_op.2, func=bool112, args=(Var($110compare_op.2, numbers.py:235),), kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:28,900 on stmt: branch $112pred, 114, 130
DEBUG 2022-01-28 15:49:28,900 ==== SSA block rewrite pass on 114
DEBUG 2022-01-28 15:49:28,900 Running <numba.core.ssa._FreshVarHandler object at 0x000002410CCC6E80>
DEBUG 2022-01-28 15:49:28,900 on stmt: $114load_global.0 = global(math: <module 'math' (built-in)>)
DEBUG 2022-01-28 15:49:28,900 on stmt: $116load_method.1 = getattr(value=$114load_global.0, attr=pow)
DEBUG 2022-01-28 15:49:28,900 on stmt: $120load_global.3 = global(float: <class 'float'>)
DEBUG 2022-01-28 15:49:28,900 on stmt: $124call_function.5 = call $120load_global.3(b, func=$120load_global.3, args=[Var(b, numbers.py:217)], kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:28,900 on stmt: $126call_method.6 = call $116load_method.1(a.1, $124call_function.5, func=$116load_method.1, args=[Var(a.1, numbers.py:218), Var($124call_function.5, numbers.py:237)], kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:28,900 on stmt: $128return_value.7 = cast(value=$126call_method.6)
DEBUG 2022-01-28 15:49:28,900 on stmt: return $128return_value.7
DEBUG 2022-01-28 15:49:28,900 ==== SSA block rewrite pass on 130
DEBUG 2022-01-28 15:49:28,900 Running <numba.core.ssa._FreshVarHandler object at 0x000002410CCC6E80>
DEBUG 2022-01-28 15:49:28,900 on stmt: $const132.1 = const(int, 0)
DEBUG 2022-01-28 15:49:28,900 on stmt: $134compare_op.2 = exp != $const132.1
DEBUG 2022-01-28 15:49:28,900 on stmt: bool136 = global(bool: <class 'bool'>)
DEBUG 2022-01-28 15:49:28,900 on stmt: $136pred = call bool136($134compare_op.2, func=bool136, args=(Var($134compare_op.2, numbers.py:238),), kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:28,900 on stmt: branch $136pred, 138, 172
DEBUG 2022-01-28 15:49:28,900 ==== SSA block rewrite pass on 138
DEBUG 2022-01-28 15:49:28,900 Running <numba.core.ssa._FreshVarHandler object at 0x000002410CCC6E80>
DEBUG 2022-01-28 15:49:28,900 on stmt: $const140.1 = const(int, 1)
DEBUG 2022-01-28 15:49:28,900 on stmt: $142binary_and.2 = exp & $const140.1
DEBUG 2022-01-28 15:49:28,900 on stmt: bool144 = global(bool: <class 'bool'>)
DEBUG 2022-01-28 15:49:28,900 on stmt: $144pred = call bool144($142binary_and.2, func=bool144, args=(Var($142binary_and.2, numbers.py:239),), kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:28,900 on stmt: branch $144pred, 146, 154
DEBUG 2022-01-28 15:49:28,900 ==== SSA block rewrite pass on 146
DEBUG 2022-01-28 15:49:28,900 Running <numba.core.ssa._FreshVarHandler object at 0x000002410CCC6E80>
DEBUG 2022-01-28 15:49:28,900 on stmt: $150inplace_multiply.2 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=r, rhs=a.1, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-01-28 15:49:28,900 on stmt: r = $150inplace_multiply.2
DEBUG 2022-01-28 15:49:28,908 on stmt: jump 154
DEBUG 2022-01-28 15:49:28,908 ==== SSA block rewrite pass on 154
DEBUG 2022-01-28 15:49:28,908 Running <numba.core.ssa._FreshVarHandler object at 0x000002410CCC6E80>
DEBUG 2022-01-28 15:49:28,908 on stmt: $const156.1 = const(int, 1)
DEBUG 2022-01-28 15:49:28,908 on stmt: $158inplace_rshift.2 = inplace_binop(fn=<built-in function irshift>, immutable_fn=<built-in function rshift>, lhs=exp, rhs=$const156.1, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-01-28 15:49:28,908 on stmt: exp = $158inplace_rshift.2
DEBUG 2022-01-28 15:49:28,908 on stmt: $166inplace_multiply.5 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=a.1, rhs=a.1, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-01-28 15:49:28,908 on stmt: a.1 = $166inplace_multiply.5
DEBUG 2022-01-28 15:49:28,908 on stmt: jump 130
DEBUG 2022-01-28 15:49:28,908 ==== SSA block rewrite pass on 172
DEBUG 2022-01-28 15:49:28,908 Running <numba.core.ssa._FreshVarHandler object at 0x000002410CCC6E80>
DEBUG 2022-01-28 15:49:28,908 on stmt: bool174 = global(bool: <class 'bool'>)
DEBUG 2022-01-28 15:49:28,908 on stmt: $174pred = call bool174(invert, func=bool174, args=(Var(invert, numbers.py:220),), kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:28,908 on stmt: branch $174pred, 176, 184
DEBUG 2022-01-28 15:49:28,908 ==== SSA block rewrite pass on 176
DEBUG 2022-01-28 15:49:28,908 Running <numba.core.ssa._FreshVarHandler object at 0x000002410CCC6E80>
DEBUG 2022-01-28 15:49:28,908 on stmt: $const176.0 = const(float, 1.0)
DEBUG 2022-01-28 15:49:28,908 on stmt: $180binary_true_divide.2 = $const176.0 / r
DEBUG 2022-01-28 15:49:28,908 on stmt: $182return_value.3 = cast(value=$180binary_true_divide.2)
DEBUG 2022-01-28 15:49:28,908 on stmt: return $182return_value.3
DEBUG 2022-01-28 15:49:28,910 ==== SSA block rewrite pass on 184
DEBUG 2022-01-28 15:49:28,910 Running <numba.core.ssa._FreshVarHandler object at 0x000002410CCC6E80>
DEBUG 2022-01-28 15:49:28,910 on stmt: $186return_value.1 = cast(value=r)
DEBUG 2022-01-28 15:49:28,910 on stmt: return $186return_value.1
DEBUG 2022-01-28 15:49:28,910 Replaced assignments: defaultdict(<class 'list'>,
            {26: [<numba.core.ir.Assign object at 0x000002410CCC6F10>],
             98: [<numba.core.ir.Assign object at 0x000002410CCC6BE0>]})
DEBUG 2022-01-28 15:49:28,910 ==== SSA block rewrite pass on 0
DEBUG 2022-01-28 15:49:28,910 Running <numba.core.ssa._FixSSAVars object at 0x000002410CCC6E80>
DEBUG 2022-01-28 15:49:28,910 on stmt: a = arg(0, name=a)
DEBUG 2022-01-28 15:49:28,910 on stmt: b = arg(1, name=b)
DEBUG 2022-01-28 15:49:28,910 on stmt: $2load_deref.0 = freevar(tp: float64)
DEBUG 2022-01-28 15:49:28,910 on stmt: $const4.1 = const(int, 1)
DEBUG 2022-01-28 15:49:28,910 on stmt: r = call $2load_deref.0($const4.1, func=$2load_deref.0, args=[Var($const4.1, numbers.py:217)], kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:28,910 on stmt: $10load_deref.3 = freevar(tp: float64)
DEBUG 2022-01-28 15:49:28,910 on stmt: a.1 = call $10load_deref.3(a, func=$10load_deref.3, args=[Var(a, numbers.py:217)], kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:28,910 on stmt: $const20.7 = const(int, 0)
DEBUG 2022-01-28 15:49:28,910 on stmt: $22compare_op.8 = b < $const20.7
DEBUG 2022-01-28 15:49:28,910 on stmt: bool24 = global(bool: <class 'bool'>)
DEBUG 2022-01-28 15:49:28,910 on stmt: $24pred = call bool24($22compare_op.8, func=bool24, args=(Var($22compare_op.8, numbers.py:219),), kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:28,910 on stmt: branch $24pred, 26, 98
DEBUG 2022-01-28 15:49:28,910 ==== SSA block rewrite pass on 26
DEBUG 2022-01-28 15:49:28,910 Running <numba.core.ssa._FixSSAVars object at 0x000002410CCC6E80>
DEBUG 2022-01-28 15:49:28,910 on stmt: invert = const(bool, True)
DEBUG 2022-01-28 15:49:28,910 on stmt: exp = unary(fn=<built-in function neg>, value=b)
DEBUG 2022-01-28 15:49:28,910 on stmt: $const38.4 = const(int, 0)
DEBUG 2022-01-28 15:49:28,910 on stmt: $40compare_op.5 = exp < $const38.4
DEBUG 2022-01-28 15:49:28,910 on stmt: bool42 = global(bool: <class 'bool'>)
DEBUG 2022-01-28 15:49:28,910 on stmt: $42pred = call bool42($40compare_op.5, func=bool42, args=(Var($40compare_op.5, numbers.py:222),), kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:28,910 on stmt: branch $42pred, 44, 48
DEBUG 2022-01-28 15:49:28,910 ==== SSA block rewrite pass on 44
DEBUG 2022-01-28 15:49:28,910 Running <numba.core.ssa._FixSSAVars object at 0x000002410CCC6E80>
DEBUG 2022-01-28 15:49:28,910 on stmt: $44load_global.0 = global(OverflowError: <class 'OverflowError'>)
DEBUG 2022-01-28 15:49:28,910 on stmt: <static> raise <class 'OverflowError'>
DEBUG 2022-01-28 15:49:28,910 ==== SSA block rewrite pass on 48
DEBUG 2022-01-28 15:49:28,910 Running <numba.core.ssa._FixSSAVars object at 0x000002410CCC6E80>
DEBUG 2022-01-28 15:49:28,910 on stmt: $48load_deref.0 = freevar(is_integer: False)
DEBUG 2022-01-28 15:49:28,910 on stmt: bool50 = global(bool: <class 'bool'>)
DEBUG 2022-01-28 15:49:28,910 on stmt: $50pred = call bool50($48load_deref.0, func=bool50, args=(Var($48load_deref.0, numbers.py:224),), kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:28,910 on stmt: jump 106
DEBUG 2022-01-28 15:49:28,910 ==== SSA block rewrite pass on 98
DEBUG 2022-01-28 15:49:28,910 Running <numba.core.ssa._FixSSAVars object at 0x000002410CCC6E80>
DEBUG 2022-01-28 15:49:28,910 on stmt: invert.1 = const(bool, False)
DEBUG 2022-01-28 15:49:28,910 on stmt: exp = b
DEBUG 2022-01-28 15:49:28,910 on stmt: jump 106
DEBUG 2022-01-28 15:49:28,910 ==== SSA block rewrite pass on 106
DEBUG 2022-01-28 15:49:28,910 Running <numba.core.ssa._FixSSAVars object at 0x000002410CCC6E80>
DEBUG 2022-01-28 15:49:28,910 on stmt: $const108.1 = const(int, 65536)
DEBUG 2022-01-28 15:49:28,910 on stmt: $110compare_op.2 = exp > $const108.1
DEBUG 2022-01-28 15:49:28,910 on stmt: bool112 = global(bool: <class 'bool'>)
DEBUG 2022-01-28 15:49:28,910 on stmt: $112pred = call bool112($110compare_op.2, func=bool112, args=(Var($110compare_op.2, numbers.py:235),), kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:28,910 on stmt: branch $112pred, 114, 130
DEBUG 2022-01-28 15:49:28,910 ==== SSA block rewrite pass on 114
DEBUG 2022-01-28 15:49:28,910 Running <numba.core.ssa._FixSSAVars object at 0x000002410CCC6E80>
DEBUG 2022-01-28 15:49:28,910 on stmt: $114load_global.0 = global(math: <module 'math' (built-in)>)
DEBUG 2022-01-28 15:49:28,910 on stmt: $116load_method.1 = getattr(value=$114load_global.0, attr=pow)
DEBUG 2022-01-28 15:49:28,910 on stmt: $120load_global.3 = global(float: <class 'float'>)
DEBUG 2022-01-28 15:49:28,910 on stmt: $124call_function.5 = call $120load_global.3(b, func=$120load_global.3, args=[Var(b, numbers.py:217)], kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:28,910 on stmt: $126call_method.6 = call $116load_method.1(a.1, $124call_function.5, func=$116load_method.1, args=[Var(a.1, numbers.py:218), Var($124call_function.5, numbers.py:237)], kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:28,910 on stmt: $128return_value.7 = cast(value=$126call_method.6)
DEBUG 2022-01-28 15:49:28,910 on stmt: return $128return_value.7
DEBUG 2022-01-28 15:49:28,910 ==== SSA block rewrite pass on 130
DEBUG 2022-01-28 15:49:28,910 Running <numba.core.ssa._FixSSAVars object at 0x000002410CCC6E80>
DEBUG 2022-01-28 15:49:28,910 on stmt: $const132.1 = const(int, 0)
DEBUG 2022-01-28 15:49:28,910 on stmt: $134compare_op.2 = exp != $const132.1
DEBUG 2022-01-28 15:49:28,910 on stmt: bool136 = global(bool: <class 'bool'>)
DEBUG 2022-01-28 15:49:28,910 on stmt: $136pred = call bool136($134compare_op.2, func=bool136, args=(Var($134compare_op.2, numbers.py:238),), kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:28,910 on stmt: branch $136pred, 138, 172
DEBUG 2022-01-28 15:49:28,910 ==== SSA block rewrite pass on 138
DEBUG 2022-01-28 15:49:28,910 Running <numba.core.ssa._FixSSAVars object at 0x000002410CCC6E80>
DEBUG 2022-01-28 15:49:28,910 on stmt: $const140.1 = const(int, 1)
DEBUG 2022-01-28 15:49:28,910 on stmt: $142binary_and.2 = exp & $const140.1
DEBUG 2022-01-28 15:49:28,910 on stmt: bool144 = global(bool: <class 'bool'>)
DEBUG 2022-01-28 15:49:28,910 on stmt: $144pred = call bool144($142binary_and.2, func=bool144, args=(Var($142binary_and.2, numbers.py:239),), kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:28,910 on stmt: branch $144pred, 146, 154
DEBUG 2022-01-28 15:49:28,910 ==== SSA block rewrite pass on 146
DEBUG 2022-01-28 15:49:28,910 Running <numba.core.ssa._FixSSAVars object at 0x000002410CCC6E80>
DEBUG 2022-01-28 15:49:28,910 on stmt: $150inplace_multiply.2 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=r, rhs=a.1, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-01-28 15:49:28,910 on stmt: r = $150inplace_multiply.2
DEBUG 2022-01-28 15:49:28,910 on stmt: jump 154
DEBUG 2022-01-28 15:49:28,910 ==== SSA block rewrite pass on 154
DEBUG 2022-01-28 15:49:28,910 Running <numba.core.ssa._FixSSAVars object at 0x000002410CCC6E80>
DEBUG 2022-01-28 15:49:28,910 on stmt: $const156.1 = const(int, 1)
DEBUG 2022-01-28 15:49:28,910 on stmt: $158inplace_rshift.2 = inplace_binop(fn=<built-in function irshift>, immutable_fn=<built-in function rshift>, lhs=exp, rhs=$const156.1, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-01-28 15:49:28,910 on stmt: exp = $158inplace_rshift.2
DEBUG 2022-01-28 15:49:28,910 on stmt: $166inplace_multiply.5 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=a.1, rhs=a.1, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-01-28 15:49:28,910 on stmt: a.1 = $166inplace_multiply.5
DEBUG 2022-01-28 15:49:28,910 on stmt: jump 130
DEBUG 2022-01-28 15:49:28,910 ==== SSA block rewrite pass on 172
DEBUG 2022-01-28 15:49:28,918 Running <numba.core.ssa._FixSSAVars object at 0x000002410CCC6E80>
DEBUG 2022-01-28 15:49:28,918 on stmt: bool174 = global(bool: <class 'bool'>)
DEBUG 2022-01-28 15:49:28,918 on stmt: $174pred = call bool174(invert, func=bool174, args=(Var(invert, numbers.py:220),), kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:28,918 find_def var='invert' stmt=$174pred = call bool174(invert, func=bool174, args=(Var(invert, numbers.py:220),), kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:28,918 find_def_from_top label 172
DEBUG 2022-01-28 15:49:28,918 idom 130 from label 172
DEBUG 2022-01-28 15:49:28,918 find_def_from_bottom label 130
DEBUG 2022-01-28 15:49:28,918 find_def_from_top label 130
DEBUG 2022-01-28 15:49:28,918 idom 106 from label 130
DEBUG 2022-01-28 15:49:28,918 find_def_from_bottom label 106
DEBUG 2022-01-28 15:49:28,918 find_def_from_top label 106
DEBUG 2022-01-28 15:49:28,918 insert phi node invert.2 = phi(incoming_values=[], incoming_blocks=[]) at 106
DEBUG 2022-01-28 15:49:28,918 find_def_from_bottom label 48
DEBUG 2022-01-28 15:49:28,918 find_def_from_top label 48
DEBUG 2022-01-28 15:49:28,918 idom 26 from label 48
DEBUG 2022-01-28 15:49:28,918 find_def_from_bottom label 26
DEBUG 2022-01-28 15:49:28,918 incoming_def invert = const(bool, True)
DEBUG 2022-01-28 15:49:28,918 find_def_from_bottom label 98
DEBUG 2022-01-28 15:49:28,918 incoming_def invert.1 = const(bool, False)
DEBUG 2022-01-28 15:49:28,918 replaced with: $174pred = call bool174(invert.2, func=bool174, args=(Var(invert.2, numbers.py:244),), kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:28,918 on stmt: branch $174pred, 176, 184
DEBUG 2022-01-28 15:49:28,920 ==== SSA block rewrite pass on 176
DEBUG 2022-01-28 15:49:28,920 Running <numba.core.ssa._FixSSAVars object at 0x000002410CCC6E80>
DEBUG 2022-01-28 15:49:28,920 on stmt: $const176.0 = const(float, 1.0)
DEBUG 2022-01-28 15:49:28,920 on stmt: $180binary_true_divide.2 = $const176.0 / r
DEBUG 2022-01-28 15:49:28,920 on stmt: $182return_value.3 = cast(value=$180binary_true_divide.2)
DEBUG 2022-01-28 15:49:28,920 on stmt: return $182return_value.3
DEBUG 2022-01-28 15:49:28,920 ==== SSA block rewrite pass on 184
DEBUG 2022-01-28 15:49:28,920 Running <numba.core.ssa._FixSSAVars object at 0x000002410CCC6E80>
DEBUG 2022-01-28 15:49:28,920 on stmt: $186return_value.1 = cast(value=r)
DEBUG 2022-01-28 15:49:28,920 on stmt: return $186return_value.1
DEBUG 2022-01-28 15:49:28,920 Fix SSA violator on var r
DEBUG 2022-01-28 15:49:28,920 ==== SSA block rewrite pass on 0
DEBUG 2022-01-28 15:49:28,920 Running <numba.core.ssa._FreshVarHandler object at 0x000002410CCC6C10>
DEBUG 2022-01-28 15:49:28,920 on stmt: a = arg(0, name=a)
DEBUG 2022-01-28 15:49:28,920 on stmt: b = arg(1, name=b)
DEBUG 2022-01-28 15:49:28,920 on stmt: $2load_deref.0 = freevar(tp: float64)
DEBUG 2022-01-28 15:49:28,920 on stmt: $const4.1 = const(int, 1)
DEBUG 2022-01-28 15:49:28,920 on stmt: r = call $2load_deref.0($const4.1, func=$2load_deref.0, args=[Var($const4.1, numbers.py:217)], kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:28,920 first assign: r
DEBUG 2022-01-28 15:49:28,920 replaced with: r = call $2load_deref.0($const4.1, func=$2load_deref.0, args=[Var($const4.1, numbers.py:217)], kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:28,920 on stmt: $10load_deref.3 = freevar(tp: float64)
DEBUG 2022-01-28 15:49:28,920 on stmt: a.1 = call $10load_deref.3(a, func=$10load_deref.3, args=[Var(a, numbers.py:217)], kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:28,920 on stmt: $const20.7 = const(int, 0)
DEBUG 2022-01-28 15:49:28,920 on stmt: $22compare_op.8 = b < $const20.7
DEBUG 2022-01-28 15:49:28,920 on stmt: bool24 = global(bool: <class 'bool'>)
DEBUG 2022-01-28 15:49:28,920 on stmt: $24pred = call bool24($22compare_op.8, func=bool24, args=(Var($22compare_op.8, numbers.py:219),), kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:28,920 on stmt: branch $24pred, 26, 98
DEBUG 2022-01-28 15:49:28,920 ==== SSA block rewrite pass on 26
DEBUG 2022-01-28 15:49:28,920 Running <numba.core.ssa._FreshVarHandler object at 0x000002410CCC6C10>
DEBUG 2022-01-28 15:49:28,920 on stmt: invert = const(bool, True)
DEBUG 2022-01-28 15:49:28,920 on stmt: exp = unary(fn=<built-in function neg>, value=b)
DEBUG 2022-01-28 15:49:28,920 on stmt: $const38.4 = const(int, 0)
DEBUG 2022-01-28 15:49:28,920 on stmt: $40compare_op.5 = exp < $const38.4
DEBUG 2022-01-28 15:49:28,920 on stmt: bool42 = global(bool: <class 'bool'>)
DEBUG 2022-01-28 15:49:28,920 on stmt: $42pred = call bool42($40compare_op.5, func=bool42, args=(Var($40compare_op.5, numbers.py:222),), kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:28,920 on stmt: branch $42pred, 44, 48
DEBUG 2022-01-28 15:49:28,920 ==== SSA block rewrite pass on 44
DEBUG 2022-01-28 15:49:28,920 Running <numba.core.ssa._FreshVarHandler object at 0x000002410CCC6C10>
DEBUG 2022-01-28 15:49:28,920 on stmt: $44load_global.0 = global(OverflowError: <class 'OverflowError'>)
DEBUG 2022-01-28 15:49:28,920 on stmt: <static> raise <class 'OverflowError'>
DEBUG 2022-01-28 15:49:28,920 ==== SSA block rewrite pass on 48
DEBUG 2022-01-28 15:49:28,920 Running <numba.core.ssa._FreshVarHandler object at 0x000002410CCC6C10>
DEBUG 2022-01-28 15:49:28,920 on stmt: $48load_deref.0 = freevar(is_integer: False)
DEBUG 2022-01-28 15:49:28,920 on stmt: bool50 = global(bool: <class 'bool'>)
DEBUG 2022-01-28 15:49:28,920 on stmt: $50pred = call bool50($48load_deref.0, func=bool50, args=(Var($48load_deref.0, numbers.py:224),), kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:28,920 on stmt: jump 106
DEBUG 2022-01-28 15:49:28,920 ==== SSA block rewrite pass on 98
DEBUG 2022-01-28 15:49:28,920 Running <numba.core.ssa._FreshVarHandler object at 0x000002410CCC6C10>
DEBUG 2022-01-28 15:49:28,920 on stmt: invert.1 = const(bool, False)
DEBUG 2022-01-28 15:49:28,920 on stmt: exp = b
DEBUG 2022-01-28 15:49:28,920 on stmt: jump 106
DEBUG 2022-01-28 15:49:28,920 ==== SSA block rewrite pass on 106
DEBUG 2022-01-28 15:49:28,920 Running <numba.core.ssa._FreshVarHandler object at 0x000002410CCC6C10>
DEBUG 2022-01-28 15:49:28,920 on stmt: invert.2 = phi(incoming_values=[Var(invert, numbers.py:220), Var(invert.1, numbers.py:233)], incoming_blocks=[48, 98])
DEBUG 2022-01-28 15:49:28,920 on stmt: $const108.1 = const(int, 65536)
DEBUG 2022-01-28 15:49:28,920 on stmt: $110compare_op.2 = exp > $const108.1
DEBUG 2022-01-28 15:49:28,920 on stmt: bool112 = global(bool: <class 'bool'>)
DEBUG 2022-01-28 15:49:28,920 on stmt: $112pred = call bool112($110compare_op.2, func=bool112, args=(Var($110compare_op.2, numbers.py:235),), kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:28,920 on stmt: branch $112pred, 114, 130
DEBUG 2022-01-28 15:49:28,920 ==== SSA block rewrite pass on 114
DEBUG 2022-01-28 15:49:28,920 Running <numba.core.ssa._FreshVarHandler object at 0x000002410CCC6C10>
DEBUG 2022-01-28 15:49:28,920 on stmt: $114load_global.0 = global(math: <module 'math' (built-in)>)
DEBUG 2022-01-28 15:49:28,920 on stmt: $116load_method.1 = getattr(value=$114load_global.0, attr=pow)
DEBUG 2022-01-28 15:49:28,920 on stmt: $120load_global.3 = global(float: <class 'float'>)
DEBUG 2022-01-28 15:49:28,920 on stmt: $124call_function.5 = call $120load_global.3(b, func=$120load_global.3, args=[Var(b, numbers.py:217)], kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:28,920 on stmt: $126call_method.6 = call $116load_method.1(a.1, $124call_function.5, func=$116load_method.1, args=[Var(a.1, numbers.py:218), Var($124call_function.5, numbers.py:237)], kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:28,920 on stmt: $128return_value.7 = cast(value=$126call_method.6)
DEBUG 2022-01-28 15:49:28,920 on stmt: return $128return_value.7
DEBUG 2022-01-28 15:49:28,920 ==== SSA block rewrite pass on 130
DEBUG 2022-01-28 15:49:28,920 Running <numba.core.ssa._FreshVarHandler object at 0x000002410CCC6C10>
DEBUG 2022-01-28 15:49:28,920 on stmt: $const132.1 = const(int, 0)
DEBUG 2022-01-28 15:49:28,920 on stmt: $134compare_op.2 = exp != $const132.1
DEBUG 2022-01-28 15:49:28,920 on stmt: bool136 = global(bool: <class 'bool'>)
DEBUG 2022-01-28 15:49:28,920 on stmt: $136pred = call bool136($134compare_op.2, func=bool136, args=(Var($134compare_op.2, numbers.py:238),), kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:28,920 on stmt: branch $136pred, 138, 172
DEBUG 2022-01-28 15:49:28,920 ==== SSA block rewrite pass on 138
DEBUG 2022-01-28 15:49:28,920 Running <numba.core.ssa._FreshVarHandler object at 0x000002410CCC6C10>
DEBUG 2022-01-28 15:49:28,920 on stmt: $const140.1 = const(int, 1)
DEBUG 2022-01-28 15:49:28,920 on stmt: $142binary_and.2 = exp & $const140.1
DEBUG 2022-01-28 15:49:28,920 on stmt: bool144 = global(bool: <class 'bool'>)
DEBUG 2022-01-28 15:49:28,920 on stmt: $144pred = call bool144($142binary_and.2, func=bool144, args=(Var($142binary_and.2, numbers.py:239),), kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:28,920 on stmt: branch $144pred, 146, 154
DEBUG 2022-01-28 15:49:28,920 ==== SSA block rewrite pass on 146
DEBUG 2022-01-28 15:49:28,920 Running <numba.core.ssa._FreshVarHandler object at 0x000002410CCC6C10>
DEBUG 2022-01-28 15:49:28,920 on stmt: $150inplace_multiply.2 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=r, rhs=a.1, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-01-28 15:49:28,920 on stmt: r = $150inplace_multiply.2
DEBUG 2022-01-28 15:49:28,920 replaced with: r.1 = $150inplace_multiply.2
DEBUG 2022-01-28 15:49:28,920 on stmt: jump 154
DEBUG 2022-01-28 15:49:28,928 ==== SSA block rewrite pass on 154
DEBUG 2022-01-28 15:49:28,928 Running <numba.core.ssa._FreshVarHandler object at 0x000002410CCC6C10>
DEBUG 2022-01-28 15:49:28,928 on stmt: $const156.1 = const(int, 1)
DEBUG 2022-01-28 15:49:28,928 on stmt: $158inplace_rshift.2 = inplace_binop(fn=<built-in function irshift>, immutable_fn=<built-in function rshift>, lhs=exp, rhs=$const156.1, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-01-28 15:49:28,928 on stmt: exp = $158inplace_rshift.2
DEBUG 2022-01-28 15:49:28,928 on stmt: $166inplace_multiply.5 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=a.1, rhs=a.1, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-01-28 15:49:28,928 on stmt: a.1 = $166inplace_multiply.5
DEBUG 2022-01-28 15:49:28,928 on stmt: jump 130
DEBUG 2022-01-28 15:49:28,928 ==== SSA block rewrite pass on 172
DEBUG 2022-01-28 15:49:28,928 Running <numba.core.ssa._FreshVarHandler object at 0x000002410CCC6C10>
DEBUG 2022-01-28 15:49:28,928 on stmt: bool174 = global(bool: <class 'bool'>)
DEBUG 2022-01-28 15:49:28,928 on stmt: $174pred = call bool174(invert.2, func=bool174, args=(Var(invert.2, numbers.py:244),), kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:28,928 on stmt: branch $174pred, 176, 184
DEBUG 2022-01-28 15:49:28,928 ==== SSA block rewrite pass on 176
DEBUG 2022-01-28 15:49:28,928 Running <numba.core.ssa._FreshVarHandler object at 0x000002410CCC6C10>
DEBUG 2022-01-28 15:49:28,928 on stmt: $const176.0 = const(float, 1.0)
DEBUG 2022-01-28 15:49:28,928 on stmt: $180binary_true_divide.2 = $const176.0 / r
DEBUG 2022-01-28 15:49:28,928 on stmt: $182return_value.3 = cast(value=$180binary_true_divide.2)
DEBUG 2022-01-28 15:49:28,928 on stmt: return $182return_value.3
DEBUG 2022-01-28 15:49:28,928 ==== SSA block rewrite pass on 184
DEBUG 2022-01-28 15:49:28,928 Running <numba.core.ssa._FreshVarHandler object at 0x000002410CCC6C10>
DEBUG 2022-01-28 15:49:28,928 on stmt: $186return_value.1 = cast(value=r)
DEBUG 2022-01-28 15:49:28,928 on stmt: return $186return_value.1
DEBUG 2022-01-28 15:49:28,930 Replaced assignments: defaultdict(<class 'list'>,
            {0: [<numba.core.ir.Assign object at 0x000002410CCC6CA0>],
             146: [<numba.core.ir.Assign object at 0x000002410CCC6880>]})
DEBUG 2022-01-28 15:49:28,930 ==== SSA block rewrite pass on 0
DEBUG 2022-01-28 15:49:28,930 Running <numba.core.ssa._FixSSAVars object at 0x000002410CC11D00>
DEBUG 2022-01-28 15:49:28,930 on stmt: a = arg(0, name=a)
DEBUG 2022-01-28 15:49:28,930 on stmt: b = arg(1, name=b)
DEBUG 2022-01-28 15:49:28,930 on stmt: $2load_deref.0 = freevar(tp: float64)
DEBUG 2022-01-28 15:49:28,930 on stmt: $const4.1 = const(int, 1)
DEBUG 2022-01-28 15:49:28,930 on stmt: r = call $2load_deref.0($const4.1, func=$2load_deref.0, args=[Var($const4.1, numbers.py:217)], kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:28,930 on stmt: $10load_deref.3 = freevar(tp: float64)
DEBUG 2022-01-28 15:49:28,930 on stmt: a.1 = call $10load_deref.3(a, func=$10load_deref.3, args=[Var(a, numbers.py:217)], kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:28,930 on stmt: $const20.7 = const(int, 0)
DEBUG 2022-01-28 15:49:28,930 on stmt: $22compare_op.8 = b < $const20.7
DEBUG 2022-01-28 15:49:28,930 on stmt: bool24 = global(bool: <class 'bool'>)
DEBUG 2022-01-28 15:49:28,930 on stmt: $24pred = call bool24($22compare_op.8, func=bool24, args=(Var($22compare_op.8, numbers.py:219),), kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:28,930 on stmt: branch $24pred, 26, 98
DEBUG 2022-01-28 15:49:28,930 ==== SSA block rewrite pass on 26
DEBUG 2022-01-28 15:49:28,930 Running <numba.core.ssa._FixSSAVars object at 0x000002410CC11D00>
DEBUG 2022-01-28 15:49:28,930 on stmt: invert = const(bool, True)
DEBUG 2022-01-28 15:49:28,930 on stmt: exp = unary(fn=<built-in function neg>, value=b)
DEBUG 2022-01-28 15:49:28,930 on stmt: $const38.4 = const(int, 0)
DEBUG 2022-01-28 15:49:28,930 on stmt: $40compare_op.5 = exp < $const38.4
DEBUG 2022-01-28 15:49:28,930 on stmt: bool42 = global(bool: <class 'bool'>)
DEBUG 2022-01-28 15:49:28,930 on stmt: $42pred = call bool42($40compare_op.5, func=bool42, args=(Var($40compare_op.5, numbers.py:222),), kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:28,930 on stmt: branch $42pred, 44, 48
DEBUG 2022-01-28 15:49:28,930 ==== SSA block rewrite pass on 44
DEBUG 2022-01-28 15:49:28,930 Running <numba.core.ssa._FixSSAVars object at 0x000002410CC11D00>
DEBUG 2022-01-28 15:49:28,930 on stmt: $44load_global.0 = global(OverflowError: <class 'OverflowError'>)
DEBUG 2022-01-28 15:49:28,930 on stmt: <static> raise <class 'OverflowError'>
DEBUG 2022-01-28 15:49:28,930 ==== SSA block rewrite pass on 48
DEBUG 2022-01-28 15:49:28,930 Running <numba.core.ssa._FixSSAVars object at 0x000002410CC11D00>
DEBUG 2022-01-28 15:49:28,930 on stmt: $48load_deref.0 = freevar(is_integer: False)
DEBUG 2022-01-28 15:49:28,930 on stmt: bool50 = global(bool: <class 'bool'>)
DEBUG 2022-01-28 15:49:28,930 on stmt: $50pred = call bool50($48load_deref.0, func=bool50, args=(Var($48load_deref.0, numbers.py:224),), kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:28,930 on stmt: jump 106
DEBUG 2022-01-28 15:49:28,930 ==== SSA block rewrite pass on 98
DEBUG 2022-01-28 15:49:28,930 Running <numba.core.ssa._FixSSAVars object at 0x000002410CC11D00>
DEBUG 2022-01-28 15:49:28,930 on stmt: invert.1 = const(bool, False)
DEBUG 2022-01-28 15:49:28,930 on stmt: exp = b
DEBUG 2022-01-28 15:49:28,930 on stmt: jump 106
DEBUG 2022-01-28 15:49:28,930 ==== SSA block rewrite pass on 106
DEBUG 2022-01-28 15:49:28,930 Running <numba.core.ssa._FixSSAVars object at 0x000002410CC11D00>
DEBUG 2022-01-28 15:49:28,930 on stmt: invert.2 = phi(incoming_values=[Var(invert, numbers.py:220), Var(invert.1, numbers.py:233)], incoming_blocks=[48, 98])
DEBUG 2022-01-28 15:49:28,930 on stmt: $const108.1 = const(int, 65536)
DEBUG 2022-01-28 15:49:28,930 on stmt: $110compare_op.2 = exp > $const108.1
DEBUG 2022-01-28 15:49:28,930 on stmt: bool112 = global(bool: <class 'bool'>)
DEBUG 2022-01-28 15:49:28,930 on stmt: $112pred = call bool112($110compare_op.2, func=bool112, args=(Var($110compare_op.2, numbers.py:235),), kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:28,930 on stmt: branch $112pred, 114, 130
DEBUG 2022-01-28 15:49:28,930 ==== SSA block rewrite pass on 114
DEBUG 2022-01-28 15:49:28,930 Running <numba.core.ssa._FixSSAVars object at 0x000002410CC11D00>
DEBUG 2022-01-28 15:49:28,930 on stmt: $114load_global.0 = global(math: <module 'math' (built-in)>)
DEBUG 2022-01-28 15:49:28,930 on stmt: $116load_method.1 = getattr(value=$114load_global.0, attr=pow)
DEBUG 2022-01-28 15:49:28,930 on stmt: $120load_global.3 = global(float: <class 'float'>)
DEBUG 2022-01-28 15:49:28,930 on stmt: $124call_function.5 = call $120load_global.3(b, func=$120load_global.3, args=[Var(b, numbers.py:217)], kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:28,930 on stmt: $126call_method.6 = call $116load_method.1(a.1, $124call_function.5, func=$116load_method.1, args=[Var(a.1, numbers.py:218), Var($124call_function.5, numbers.py:237)], kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:28,930 on stmt: $128return_value.7 = cast(value=$126call_method.6)
DEBUG 2022-01-28 15:49:28,930 on stmt: return $128return_value.7
DEBUG 2022-01-28 15:49:28,930 ==== SSA block rewrite pass on 130
DEBUG 2022-01-28 15:49:28,930 Running <numba.core.ssa._FixSSAVars object at 0x000002410CC11D00>
DEBUG 2022-01-28 15:49:28,930 on stmt: $const132.1 = const(int, 0)
DEBUG 2022-01-28 15:49:28,930 on stmt: $134compare_op.2 = exp != $const132.1
DEBUG 2022-01-28 15:49:28,930 on stmt: bool136 = global(bool: <class 'bool'>)
DEBUG 2022-01-28 15:49:28,930 on stmt: $136pred = call bool136($134compare_op.2, func=bool136, args=(Var($134compare_op.2, numbers.py:238),), kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:28,930 on stmt: branch $136pred, 138, 172
DEBUG 2022-01-28 15:49:28,930 ==== SSA block rewrite pass on 138
DEBUG 2022-01-28 15:49:28,930 Running <numba.core.ssa._FixSSAVars object at 0x000002410CC11D00>
DEBUG 2022-01-28 15:49:28,930 on stmt: $const140.1 = const(int, 1)
DEBUG 2022-01-28 15:49:28,930 on stmt: $142binary_and.2 = exp & $const140.1
DEBUG 2022-01-28 15:49:28,930 on stmt: bool144 = global(bool: <class 'bool'>)
DEBUG 2022-01-28 15:49:28,930 on stmt: $144pred = call bool144($142binary_and.2, func=bool144, args=(Var($142binary_and.2, numbers.py:239),), kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:28,930 on stmt: branch $144pred, 146, 154
DEBUG 2022-01-28 15:49:28,930 ==== SSA block rewrite pass on 146
DEBUG 2022-01-28 15:49:28,930 Running <numba.core.ssa._FixSSAVars object at 0x000002410CC11D00>
DEBUG 2022-01-28 15:49:28,930 on stmt: $150inplace_multiply.2 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=r, rhs=a.1, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-01-28 15:49:28,930 find_def var='r' stmt=$150inplace_multiply.2 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=r, rhs=a.1, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-01-28 15:49:28,930 find_def_from_top label 146
DEBUG 2022-01-28 15:49:28,930 idom 138 from label 146
DEBUG 2022-01-28 15:49:28,930 find_def_from_bottom label 138
DEBUG 2022-01-28 15:49:28,930 find_def_from_top label 138
DEBUG 2022-01-28 15:49:28,930 idom 130 from label 138
DEBUG 2022-01-28 15:49:28,930 find_def_from_bottom label 130
DEBUG 2022-01-28 15:49:28,930 find_def_from_top label 130
DEBUG 2022-01-28 15:49:28,930 insert phi node r.2 = phi(incoming_values=[], incoming_blocks=[]) at 130
DEBUG 2022-01-28 15:49:28,930 find_def_from_bottom label 106
DEBUG 2022-01-28 15:49:28,930 find_def_from_top label 106
DEBUG 2022-01-28 15:49:28,930 idom 0 from label 106
DEBUG 2022-01-28 15:49:28,930 find_def_from_bottom label 0
DEBUG 2022-01-28 15:49:28,930 incoming_def r = call $2load_deref.0($const4.1, func=$2load_deref.0, args=[Var($const4.1, numbers.py:217)], kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:28,930 find_def_from_bottom label 154
DEBUG 2022-01-28 15:49:28,930 find_def_from_top label 154
DEBUG 2022-01-28 15:49:28,938 insert phi node r.3 = phi(incoming_values=[], incoming_blocks=[]) at 154
DEBUG 2022-01-28 15:49:28,938 find_def_from_bottom label 138
DEBUG 2022-01-28 15:49:28,938 find_def_from_top label 138
DEBUG 2022-01-28 15:49:28,938 idom 130 from label 138
DEBUG 2022-01-28 15:49:28,938 find_def_from_bottom label 130
DEBUG 2022-01-28 15:49:28,938 incoming_def r.2 = phi(incoming_values=[Var(r, numbers.py:217)], incoming_blocks=[106])
DEBUG 2022-01-28 15:49:28,938 find_def_from_bottom label 146
DEBUG 2022-01-28 15:49:28,938 incoming_def r.1 = $150inplace_multiply.2
DEBUG 2022-01-28 15:49:28,938 incoming_def r.3 = phi(incoming_values=[Var(r.2, numbers.py:240), Var(r.1, numbers.py:240)], incoming_blocks=[138, 146])
DEBUG 2022-01-28 15:49:28,938 replaced with: $150inplace_multiply.2 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=r.2, rhs=a.1, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-01-28 15:49:28,938 on stmt: r.1 = $150inplace_multiply.2
DEBUG 2022-01-28 15:49:28,938 on stmt: jump 154
DEBUG 2022-01-28 15:49:28,938 ==== SSA block rewrite pass on 154
DEBUG 2022-01-28 15:49:28,938 Running <numba.core.ssa._FixSSAVars object at 0x000002410CC11D00>
DEBUG 2022-01-28 15:49:28,938 on stmt: $const156.1 = const(int, 1)
DEBUG 2022-01-28 15:49:28,938 on stmt: $158inplace_rshift.2 = inplace_binop(fn=<built-in function irshift>, immutable_fn=<built-in function rshift>, lhs=exp, rhs=$const156.1, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-01-28 15:49:28,938 on stmt: exp = $158inplace_rshift.2
DEBUG 2022-01-28 15:49:28,938 on stmt: $166inplace_multiply.5 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=a.1, rhs=a.1, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-01-28 15:49:28,938 on stmt: a.1 = $166inplace_multiply.5
DEBUG 2022-01-28 15:49:28,938 on stmt: jump 130
DEBUG 2022-01-28 15:49:28,938 ==== SSA block rewrite pass on 172
DEBUG 2022-01-28 15:49:28,938 Running <numba.core.ssa._FixSSAVars object at 0x000002410CC11D00>
DEBUG 2022-01-28 15:49:28,940 on stmt: bool174 = global(bool: <class 'bool'>)
DEBUG 2022-01-28 15:49:28,940 on stmt: $174pred = call bool174(invert.2, func=bool174, args=(Var(invert.2, numbers.py:244),), kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:28,940 on stmt: branch $174pred, 176, 184
DEBUG 2022-01-28 15:49:28,940 ==== SSA block rewrite pass on 176
DEBUG 2022-01-28 15:49:28,940 Running <numba.core.ssa._FixSSAVars object at 0x000002410CC11D00>
DEBUG 2022-01-28 15:49:28,940 on stmt: $const176.0 = const(float, 1.0)
DEBUG 2022-01-28 15:49:28,940 on stmt: $180binary_true_divide.2 = $const176.0 / r
DEBUG 2022-01-28 15:49:28,940 find_def var='r' stmt=$180binary_true_divide.2 = $const176.0 / r
DEBUG 2022-01-28 15:49:28,940 find_def_from_top label 176
DEBUG 2022-01-28 15:49:28,940 idom 172 from label 176
DEBUG 2022-01-28 15:49:28,940 find_def_from_bottom label 172
DEBUG 2022-01-28 15:49:28,940 find_def_from_top label 172
DEBUG 2022-01-28 15:49:28,940 idom 130 from label 172
DEBUG 2022-01-28 15:49:28,940 find_def_from_bottom label 130
DEBUG 2022-01-28 15:49:28,940 replaced with: $180binary_true_divide.2 = $const176.0 / r.2
DEBUG 2022-01-28 15:49:28,940 on stmt: $182return_value.3 = cast(value=$180binary_true_divide.2)
DEBUG 2022-01-28 15:49:28,940 on stmt: return $182return_value.3
DEBUG 2022-01-28 15:49:28,940 ==== SSA block rewrite pass on 184
DEBUG 2022-01-28 15:49:28,940 Running <numba.core.ssa._FixSSAVars object at 0x000002410CC11D00>
DEBUG 2022-01-28 15:49:28,940 on stmt: $186return_value.1 = cast(value=r)
DEBUG 2022-01-28 15:49:28,940 find_def var='r' stmt=$186return_value.1 = cast(value=r)
DEBUG 2022-01-28 15:49:28,940 find_def_from_top label 184
DEBUG 2022-01-28 15:49:28,940 idom 172 from label 184
DEBUG 2022-01-28 15:49:28,940 find_def_from_bottom label 172
DEBUG 2022-01-28 15:49:28,940 find_def_from_top label 172
DEBUG 2022-01-28 15:49:28,940 idom 130 from label 172
DEBUG 2022-01-28 15:49:28,940 find_def_from_bottom label 130
DEBUG 2022-01-28 15:49:28,940 replaced with: $186return_value.1 = cast(value=r.2)
DEBUG 2022-01-28 15:49:28,940 on stmt: return $186return_value.1
DEBUG 2022-01-28 15:49:28,940 Fix SSA violator on var a.1
DEBUG 2022-01-28 15:49:28,940 ==== SSA block rewrite pass on 0
DEBUG 2022-01-28 15:49:28,940 Running <numba.core.ssa._FreshVarHandler object at 0x0000024108E7C790>
DEBUG 2022-01-28 15:49:28,940 on stmt: a = arg(0, name=a)
DEBUG 2022-01-28 15:49:28,940 on stmt: b = arg(1, name=b)
DEBUG 2022-01-28 15:49:28,940 on stmt: $2load_deref.0 = freevar(tp: float64)
DEBUG 2022-01-28 15:49:28,940 on stmt: $const4.1 = const(int, 1)
DEBUG 2022-01-28 15:49:28,940 on stmt: r = call $2load_deref.0($const4.1, func=$2load_deref.0, args=[Var($const4.1, numbers.py:217)], kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:28,940 on stmt: $10load_deref.3 = freevar(tp: float64)
DEBUG 2022-01-28 15:49:28,940 on stmt: a.1 = call $10load_deref.3(a, func=$10load_deref.3, args=[Var(a, numbers.py:217)], kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:28,940 first assign: a.1
DEBUG 2022-01-28 15:49:28,940 replaced with: a.1 = call $10load_deref.3(a, func=$10load_deref.3, args=[Var(a, numbers.py:217)], kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:28,940 on stmt: $const20.7 = const(int, 0)
DEBUG 2022-01-28 15:49:28,940 on stmt: $22compare_op.8 = b < $const20.7
DEBUG 2022-01-28 15:49:28,940 on stmt: bool24 = global(bool: <class 'bool'>)
DEBUG 2022-01-28 15:49:28,940 on stmt: $24pred = call bool24($22compare_op.8, func=bool24, args=(Var($22compare_op.8, numbers.py:219),), kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:28,940 on stmt: branch $24pred, 26, 98
DEBUG 2022-01-28 15:49:28,940 ==== SSA block rewrite pass on 26
DEBUG 2022-01-28 15:49:28,940 Running <numba.core.ssa._FreshVarHandler object at 0x0000024108E7C790>
DEBUG 2022-01-28 15:49:28,940 on stmt: invert = const(bool, True)
DEBUG 2022-01-28 15:49:28,940 on stmt: exp = unary(fn=<built-in function neg>, value=b)
DEBUG 2022-01-28 15:49:28,940 on stmt: $const38.4 = const(int, 0)
DEBUG 2022-01-28 15:49:28,940 on stmt: $40compare_op.5 = exp < $const38.4
DEBUG 2022-01-28 15:49:28,940 on stmt: bool42 = global(bool: <class 'bool'>)
DEBUG 2022-01-28 15:49:28,940 on stmt: $42pred = call bool42($40compare_op.5, func=bool42, args=(Var($40compare_op.5, numbers.py:222),), kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:28,940 on stmt: branch $42pred, 44, 48
DEBUG 2022-01-28 15:49:28,940 ==== SSA block rewrite pass on 44
DEBUG 2022-01-28 15:49:28,940 Running <numba.core.ssa._FreshVarHandler object at 0x0000024108E7C790>
DEBUG 2022-01-28 15:49:28,940 on stmt: $44load_global.0 = global(OverflowError: <class 'OverflowError'>)
DEBUG 2022-01-28 15:49:28,940 on stmt: <static> raise <class 'OverflowError'>
DEBUG 2022-01-28 15:49:28,940 ==== SSA block rewrite pass on 48
DEBUG 2022-01-28 15:49:28,940 Running <numba.core.ssa._FreshVarHandler object at 0x0000024108E7C790>
DEBUG 2022-01-28 15:49:28,940 on stmt: $48load_deref.0 = freevar(is_integer: False)
DEBUG 2022-01-28 15:49:28,940 on stmt: bool50 = global(bool: <class 'bool'>)
DEBUG 2022-01-28 15:49:28,940 on stmt: $50pred = call bool50($48load_deref.0, func=bool50, args=(Var($48load_deref.0, numbers.py:224),), kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:28,940 on stmt: jump 106
DEBUG 2022-01-28 15:49:28,940 ==== SSA block rewrite pass on 98
DEBUG 2022-01-28 15:49:28,940 Running <numba.core.ssa._FreshVarHandler object at 0x0000024108E7C790>
DEBUG 2022-01-28 15:49:28,940 on stmt: invert.1 = const(bool, False)
DEBUG 2022-01-28 15:49:28,940 on stmt: exp = b
DEBUG 2022-01-28 15:49:28,940 on stmt: jump 106
DEBUG 2022-01-28 15:49:28,940 ==== SSA block rewrite pass on 106
DEBUG 2022-01-28 15:49:28,940 Running <numba.core.ssa._FreshVarHandler object at 0x0000024108E7C790>
DEBUG 2022-01-28 15:49:28,940 on stmt: invert.2 = phi(incoming_values=[Var(invert, numbers.py:220), Var(invert.1, numbers.py:233)], incoming_blocks=[48, 98])
DEBUG 2022-01-28 15:49:28,940 on stmt: $const108.1 = const(int, 65536)
DEBUG 2022-01-28 15:49:28,940 on stmt: $110compare_op.2 = exp > $const108.1
DEBUG 2022-01-28 15:49:28,940 on stmt: bool112 = global(bool: <class 'bool'>)
DEBUG 2022-01-28 15:49:28,940 on stmt: $112pred = call bool112($110compare_op.2, func=bool112, args=(Var($110compare_op.2, numbers.py:235),), kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:28,940 on stmt: branch $112pred, 114, 130
DEBUG 2022-01-28 15:49:28,940 ==== SSA block rewrite pass on 114
DEBUG 2022-01-28 15:49:28,940 Running <numba.core.ssa._FreshVarHandler object at 0x0000024108E7C790>
DEBUG 2022-01-28 15:49:28,940 on stmt: $114load_global.0 = global(math: <module 'math' (built-in)>)
DEBUG 2022-01-28 15:49:28,940 on stmt: $116load_method.1 = getattr(value=$114load_global.0, attr=pow)
DEBUG 2022-01-28 15:49:28,940 on stmt: $120load_global.3 = global(float: <class 'float'>)
DEBUG 2022-01-28 15:49:28,940 on stmt: $124call_function.5 = call $120load_global.3(b, func=$120load_global.3, args=[Var(b, numbers.py:217)], kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:28,940 on stmt: $126call_method.6 = call $116load_method.1(a.1, $124call_function.5, func=$116load_method.1, args=[Var(a.1, numbers.py:218), Var($124call_function.5, numbers.py:237)], kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:28,940 on stmt: $128return_value.7 = cast(value=$126call_method.6)
DEBUG 2022-01-28 15:49:28,940 on stmt: return $128return_value.7
DEBUG 2022-01-28 15:49:28,940 ==== SSA block rewrite pass on 130
DEBUG 2022-01-28 15:49:28,940 Running <numba.core.ssa._FreshVarHandler object at 0x0000024108E7C790>
DEBUG 2022-01-28 15:49:28,940 on stmt: r.2 = phi(incoming_values=[Var(r, numbers.py:217), Var(r.3, numbers.py:240)], incoming_blocks=[106, 154])
DEBUG 2022-01-28 15:49:28,948 on stmt: $const132.1 = const(int, 0)
DEBUG 2022-01-28 15:49:28,948 on stmt: $134compare_op.2 = exp != $const132.1
DEBUG 2022-01-28 15:49:28,948 on stmt: bool136 = global(bool: <class 'bool'>)
DEBUG 2022-01-28 15:49:28,948 on stmt: $136pred = call bool136($134compare_op.2, func=bool136, args=(Var($134compare_op.2, numbers.py:238),), kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:28,948 on stmt: branch $136pred, 138, 172
DEBUG 2022-01-28 15:49:28,948 ==== SSA block rewrite pass on 138
DEBUG 2022-01-28 15:49:28,948 Running <numba.core.ssa._FreshVarHandler object at 0x0000024108E7C790>
DEBUG 2022-01-28 15:49:28,948 on stmt: $const140.1 = const(int, 1)
DEBUG 2022-01-28 15:49:28,948 on stmt: $142binary_and.2 = exp & $const140.1
DEBUG 2022-01-28 15:49:28,948 on stmt: bool144 = global(bool: <class 'bool'>)
DEBUG 2022-01-28 15:49:28,948 on stmt: $144pred = call bool144($142binary_and.2, func=bool144, args=(Var($142binary_and.2, numbers.py:239),), kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:28,948 on stmt: branch $144pred, 146, 154
DEBUG 2022-01-28 15:49:28,948 ==== SSA block rewrite pass on 146
DEBUG 2022-01-28 15:49:28,948 Running <numba.core.ssa._FreshVarHandler object at 0x0000024108E7C790>
DEBUG 2022-01-28 15:49:28,948 on stmt: $150inplace_multiply.2 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=r.2, rhs=a.1, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-01-28 15:49:28,948 on stmt: r.1 = $150inplace_multiply.2
DEBUG 2022-01-28 15:49:28,948 on stmt: jump 154
DEBUG 2022-01-28 15:49:28,948 ==== SSA block rewrite pass on 154
DEBUG 2022-01-28 15:49:28,948 Running <numba.core.ssa._FreshVarHandler object at 0x0000024108E7C790>
DEBUG 2022-01-28 15:49:28,948 on stmt: r.3 = phi(incoming_values=[Var(r.2, numbers.py:240), Var(r.1, numbers.py:240)], incoming_blocks=[138, 146])
DEBUG 2022-01-28 15:49:28,951 on stmt: $const156.1 = const(int, 1)
DEBUG 2022-01-28 15:49:28,951 on stmt: $158inplace_rshift.2 = inplace_binop(fn=<built-in function irshift>, immutable_fn=<built-in function rshift>, lhs=exp, rhs=$const156.1, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-01-28 15:49:28,951 on stmt: exp = $158inplace_rshift.2
DEBUG 2022-01-28 15:49:28,951 on stmt: $166inplace_multiply.5 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=a.1, rhs=a.1, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-01-28 15:49:28,951 on stmt: a.1 = $166inplace_multiply.5
DEBUG 2022-01-28 15:49:28,951 replaced with: a.1.1 = $166inplace_multiply.5
DEBUG 2022-01-28 15:49:28,951 on stmt: jump 130
DEBUG 2022-01-28 15:49:28,951 ==== SSA block rewrite pass on 172
DEBUG 2022-01-28 15:49:28,951 Running <numba.core.ssa._FreshVarHandler object at 0x0000024108E7C790>
DEBUG 2022-01-28 15:49:28,951 on stmt: bool174 = global(bool: <class 'bool'>)
DEBUG 2022-01-28 15:49:28,951 on stmt: $174pred = call bool174(invert.2, func=bool174, args=(Var(invert.2, numbers.py:244),), kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:28,951 on stmt: branch $174pred, 176, 184
DEBUG 2022-01-28 15:49:28,951 ==== SSA block rewrite pass on 176
DEBUG 2022-01-28 15:49:28,951 Running <numba.core.ssa._FreshVarHandler object at 0x0000024108E7C790>
DEBUG 2022-01-28 15:49:28,951 on stmt: $const176.0 = const(float, 1.0)
DEBUG 2022-01-28 15:49:28,951 on stmt: $180binary_true_divide.2 = $const176.0 / r.2
DEBUG 2022-01-28 15:49:28,951 on stmt: $182return_value.3 = cast(value=$180binary_true_divide.2)
DEBUG 2022-01-28 15:49:28,951 on stmt: return $182return_value.3
DEBUG 2022-01-28 15:49:28,951 ==== SSA block rewrite pass on 184
DEBUG 2022-01-28 15:49:28,951 Running <numba.core.ssa._FreshVarHandler object at 0x0000024108E7C790>
DEBUG 2022-01-28 15:49:28,951 on stmt: $186return_value.1 = cast(value=r.2)
DEBUG 2022-01-28 15:49:28,951 on stmt: return $186return_value.1
DEBUG 2022-01-28 15:49:28,951 Replaced assignments: defaultdict(<class 'list'>,
            {0: [<numba.core.ir.Assign object at 0x0000024108E7CA60>],
             154: [<numba.core.ir.Assign object at 0x000002410CCC63D0>]})
DEBUG 2022-01-28 15:49:28,951 ==== SSA block rewrite pass on 0
DEBUG 2022-01-28 15:49:28,951 Running <numba.core.ssa._FixSSAVars object at 0x000002410CCC6C10>
DEBUG 2022-01-28 15:49:28,951 on stmt: a = arg(0, name=a)
DEBUG 2022-01-28 15:49:28,951 on stmt: b = arg(1, name=b)
DEBUG 2022-01-28 15:49:28,951 on stmt: $2load_deref.0 = freevar(tp: float64)
DEBUG 2022-01-28 15:49:28,951 on stmt: $const4.1 = const(int, 1)
DEBUG 2022-01-28 15:49:28,951 on stmt: r = call $2load_deref.0($const4.1, func=$2load_deref.0, args=[Var($const4.1, numbers.py:217)], kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:28,951 on stmt: $10load_deref.3 = freevar(tp: float64)
DEBUG 2022-01-28 15:49:28,951 on stmt: a.1 = call $10load_deref.3(a, func=$10load_deref.3, args=[Var(a, numbers.py:217)], kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:28,951 on stmt: $const20.7 = const(int, 0)
DEBUG 2022-01-28 15:49:28,951 on stmt: $22compare_op.8 = b < $const20.7
DEBUG 2022-01-28 15:49:28,951 on stmt: bool24 = global(bool: <class 'bool'>)
DEBUG 2022-01-28 15:49:28,951 on stmt: $24pred = call bool24($22compare_op.8, func=bool24, args=(Var($22compare_op.8, numbers.py:219),), kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:28,951 on stmt: branch $24pred, 26, 98
DEBUG 2022-01-28 15:49:28,951 ==== SSA block rewrite pass on 26
DEBUG 2022-01-28 15:49:28,951 Running <numba.core.ssa._FixSSAVars object at 0x000002410CCC6C10>
DEBUG 2022-01-28 15:49:28,951 on stmt: invert = const(bool, True)
DEBUG 2022-01-28 15:49:28,951 on stmt: exp = unary(fn=<built-in function neg>, value=b)
DEBUG 2022-01-28 15:49:28,951 on stmt: $const38.4 = const(int, 0)
DEBUG 2022-01-28 15:49:28,951 on stmt: $40compare_op.5 = exp < $const38.4
DEBUG 2022-01-28 15:49:28,951 on stmt: bool42 = global(bool: <class 'bool'>)
DEBUG 2022-01-28 15:49:28,951 on stmt: $42pred = call bool42($40compare_op.5, func=bool42, args=(Var($40compare_op.5, numbers.py:222),), kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:28,951 on stmt: branch $42pred, 44, 48
DEBUG 2022-01-28 15:49:28,951 ==== SSA block rewrite pass on 44
DEBUG 2022-01-28 15:49:28,951 Running <numba.core.ssa._FixSSAVars object at 0x000002410CCC6C10>
DEBUG 2022-01-28 15:49:28,951 on stmt: $44load_global.0 = global(OverflowError: <class 'OverflowError'>)
DEBUG 2022-01-28 15:49:28,951 on stmt: <static> raise <class 'OverflowError'>
DEBUG 2022-01-28 15:49:28,951 ==== SSA block rewrite pass on 48
DEBUG 2022-01-28 15:49:28,951 Running <numba.core.ssa._FixSSAVars object at 0x000002410CCC6C10>
DEBUG 2022-01-28 15:49:28,951 on stmt: $48load_deref.0 = freevar(is_integer: False)
DEBUG 2022-01-28 15:49:28,951 on stmt: bool50 = global(bool: <class 'bool'>)
DEBUG 2022-01-28 15:49:28,951 on stmt: $50pred = call bool50($48load_deref.0, func=bool50, args=(Var($48load_deref.0, numbers.py:224),), kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:28,951 on stmt: jump 106
DEBUG 2022-01-28 15:49:28,951 ==== SSA block rewrite pass on 98
DEBUG 2022-01-28 15:49:28,951 Running <numba.core.ssa._FixSSAVars object at 0x000002410CCC6C10>
DEBUG 2022-01-28 15:49:28,951 on stmt: invert.1 = const(bool, False)
DEBUG 2022-01-28 15:49:28,951 on stmt: exp = b
DEBUG 2022-01-28 15:49:28,951 on stmt: jump 106
DEBUG 2022-01-28 15:49:28,951 ==== SSA block rewrite pass on 106
DEBUG 2022-01-28 15:49:28,951 Running <numba.core.ssa._FixSSAVars object at 0x000002410CCC6C10>
DEBUG 2022-01-28 15:49:28,951 on stmt: invert.2 = phi(incoming_values=[Var(invert, numbers.py:220), Var(invert.1, numbers.py:233)], incoming_blocks=[48, 98])
DEBUG 2022-01-28 15:49:28,951 on stmt: $const108.1 = const(int, 65536)
DEBUG 2022-01-28 15:49:28,951 on stmt: $110compare_op.2 = exp > $const108.1
DEBUG 2022-01-28 15:49:28,951 on stmt: bool112 = global(bool: <class 'bool'>)
DEBUG 2022-01-28 15:49:28,951 on stmt: $112pred = call bool112($110compare_op.2, func=bool112, args=(Var($110compare_op.2, numbers.py:235),), kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:28,951 on stmt: branch $112pred, 114, 130
DEBUG 2022-01-28 15:49:28,951 ==== SSA block rewrite pass on 114
DEBUG 2022-01-28 15:49:28,951 Running <numba.core.ssa._FixSSAVars object at 0x000002410CCC6C10>
DEBUG 2022-01-28 15:49:28,951 on stmt: $114load_global.0 = global(math: <module 'math' (built-in)>)
DEBUG 2022-01-28 15:49:28,951 on stmt: $116load_method.1 = getattr(value=$114load_global.0, attr=pow)
DEBUG 2022-01-28 15:49:28,951 on stmt: $120load_global.3 = global(float: <class 'float'>)
DEBUG 2022-01-28 15:49:28,951 on stmt: $124call_function.5 = call $120load_global.3(b, func=$120load_global.3, args=[Var(b, numbers.py:217)], kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:28,951 on stmt: $126call_method.6 = call $116load_method.1(a.1, $124call_function.5, func=$116load_method.1, args=[Var(a.1, numbers.py:218), Var($124call_function.5, numbers.py:237)], kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:28,951 find_def var='a.1' stmt=$126call_method.6 = call $116load_method.1(a.1, $124call_function.5, func=$116load_method.1, args=[Var(a.1, numbers.py:218), Var($124call_function.5, numbers.py:237)], kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:28,951 find_def_from_top label 114
DEBUG 2022-01-28 15:49:28,951 idom 106 from label 114
DEBUG 2022-01-28 15:49:28,951 find_def_from_bottom label 106
DEBUG 2022-01-28 15:49:28,951 find_def_from_top label 106
DEBUG 2022-01-28 15:49:28,951 idom 0 from label 106
DEBUG 2022-01-28 15:49:28,951 find_def_from_bottom label 0
DEBUG 2022-01-28 15:49:28,951 on stmt: $128return_value.7 = cast(value=$126call_method.6)
DEBUG 2022-01-28 15:49:28,951 on stmt: return $128return_value.7
DEBUG 2022-01-28 15:49:28,951 ==== SSA block rewrite pass on 130
DEBUG 2022-01-28 15:49:28,951 Running <numba.core.ssa._FixSSAVars object at 0x000002410CCC6C10>
DEBUG 2022-01-28 15:49:28,959 on stmt: r.2 = phi(incoming_values=[Var(r, numbers.py:217), Var(r.3, numbers.py:240)], incoming_blocks=[106, 154])
DEBUG 2022-01-28 15:49:28,959 on stmt: $const132.1 = const(int, 0)
DEBUG 2022-01-28 15:49:28,959 on stmt: $134compare_op.2 = exp != $const132.1
DEBUG 2022-01-28 15:49:28,959 on stmt: bool136 = global(bool: <class 'bool'>)
DEBUG 2022-01-28 15:49:28,959 on stmt: $136pred = call bool136($134compare_op.2, func=bool136, args=(Var($134compare_op.2, numbers.py:238),), kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:28,959 on stmt: branch $136pred, 138, 172
DEBUG 2022-01-28 15:49:28,959 ==== SSA block rewrite pass on 138
DEBUG 2022-01-28 15:49:28,959 Running <numba.core.ssa._FixSSAVars object at 0x000002410CCC6C10>
DEBUG 2022-01-28 15:49:28,959 on stmt: $const140.1 = const(int, 1)
DEBUG 2022-01-28 15:49:28,959 on stmt: $142binary_and.2 = exp & $const140.1
DEBUG 2022-01-28 15:49:28,959 on stmt: bool144 = global(bool: <class 'bool'>)
DEBUG 2022-01-28 15:49:28,959 on stmt: $144pred = call bool144($142binary_and.2, func=bool144, args=(Var($142binary_and.2, numbers.py:239),), kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:28,959 on stmt: branch $144pred, 146, 154
DEBUG 2022-01-28 15:49:28,959 ==== SSA block rewrite pass on 146
DEBUG 2022-01-28 15:49:28,959 Running <numba.core.ssa._FixSSAVars object at 0x000002410CCC6C10>
DEBUG 2022-01-28 15:49:28,959 on stmt: $150inplace_multiply.2 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=r.2, rhs=a.1, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-01-28 15:49:28,959 find_def var='a.1' stmt=$150inplace_multiply.2 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=r.2, rhs=a.1, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-01-28 15:49:28,959 find_def_from_top label 146
DEBUG 2022-01-28 15:49:28,959 idom 138 from label 146
DEBUG 2022-01-28 15:49:28,959 find_def_from_bottom label 138
DEBUG 2022-01-28 15:49:28,959 find_def_from_top label 138
DEBUG 2022-01-28 15:49:28,959 idom 130 from label 138
DEBUG 2022-01-28 15:49:28,961 find_def_from_bottom label 130
DEBUG 2022-01-28 15:49:28,961 find_def_from_top label 130
DEBUG 2022-01-28 15:49:28,961 insert phi node a.1.2 = phi(incoming_values=[], incoming_blocks=[]) at 130
DEBUG 2022-01-28 15:49:28,961 find_def_from_bottom label 106
DEBUG 2022-01-28 15:49:28,961 find_def_from_top label 106
DEBUG 2022-01-28 15:49:28,961 idom 0 from label 106
DEBUG 2022-01-28 15:49:28,961 find_def_from_bottom label 0
DEBUG 2022-01-28 15:49:28,961 incoming_def a.1 = call $10load_deref.3(a, func=$10load_deref.3, args=[Var(a, numbers.py:217)], kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:28,961 find_def_from_bottom label 154
DEBUG 2022-01-28 15:49:28,961 incoming_def a.1.1 = $166inplace_multiply.5
DEBUG 2022-01-28 15:49:28,961 replaced with: $150inplace_multiply.2 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=r.2, rhs=a.1.2, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-01-28 15:49:28,961 on stmt: r.1 = $150inplace_multiply.2
DEBUG 2022-01-28 15:49:28,961 on stmt: jump 154
DEBUG 2022-01-28 15:49:28,961 ==== SSA block rewrite pass on 154
DEBUG 2022-01-28 15:49:28,961 Running <numba.core.ssa._FixSSAVars object at 0x000002410CCC6C10>
DEBUG 2022-01-28 15:49:28,961 on stmt: r.3 = phi(incoming_values=[Var(r.2, numbers.py:240), Var(r.1, numbers.py:240)], incoming_blocks=[138, 146])
DEBUG 2022-01-28 15:49:28,961 on stmt: $const156.1 = const(int, 1)
DEBUG 2022-01-28 15:49:28,961 on stmt: $158inplace_rshift.2 = inplace_binop(fn=<built-in function irshift>, immutable_fn=<built-in function rshift>, lhs=exp, rhs=$const156.1, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-01-28 15:49:28,961 on stmt: exp = $158inplace_rshift.2
DEBUG 2022-01-28 15:49:28,961 on stmt: $166inplace_multiply.5 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=a.1, rhs=a.1, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-01-28 15:49:28,961 find_def var='a.1' stmt=$166inplace_multiply.5 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=a.1, rhs=a.1, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-01-28 15:49:28,961 find_def_from_top label 154
DEBUG 2022-01-28 15:49:28,961 idom 138 from label 154
DEBUG 2022-01-28 15:49:28,961 find_def_from_bottom label 138
DEBUG 2022-01-28 15:49:28,961 find_def_from_top label 138
DEBUG 2022-01-28 15:49:28,961 idom 130 from label 138
DEBUG 2022-01-28 15:49:28,961 find_def_from_bottom label 130
DEBUG 2022-01-28 15:49:28,961 replaced with: $166inplace_multiply.5 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=a.1.2, rhs=a.1.2, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-01-28 15:49:28,961 on stmt: a.1.1 = $166inplace_multiply.5
DEBUG 2022-01-28 15:49:28,961 on stmt: jump 130
DEBUG 2022-01-28 15:49:28,961 ==== SSA block rewrite pass on 172
DEBUG 2022-01-28 15:49:28,961 Running <numba.core.ssa._FixSSAVars object at 0x000002410CCC6C10>
DEBUG 2022-01-28 15:49:28,961 on stmt: bool174 = global(bool: <class 'bool'>)
DEBUG 2022-01-28 15:49:28,961 on stmt: $174pred = call bool174(invert.2, func=bool174, args=(Var(invert.2, numbers.py:244),), kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:28,961 on stmt: branch $174pred, 176, 184
DEBUG 2022-01-28 15:49:28,961 ==== SSA block rewrite pass on 176
DEBUG 2022-01-28 15:49:28,961 Running <numba.core.ssa._FixSSAVars object at 0x000002410CCC6C10>
DEBUG 2022-01-28 15:49:28,961 on stmt: $const176.0 = const(float, 1.0)
DEBUG 2022-01-28 15:49:28,961 on stmt: $180binary_true_divide.2 = $const176.0 / r.2
DEBUG 2022-01-28 15:49:28,961 on stmt: $182return_value.3 = cast(value=$180binary_true_divide.2)
DEBUG 2022-01-28 15:49:28,961 on stmt: return $182return_value.3
DEBUG 2022-01-28 15:49:28,961 ==== SSA block rewrite pass on 184
DEBUG 2022-01-28 15:49:28,961 Running <numba.core.ssa._FixSSAVars object at 0x000002410CCC6C10>
DEBUG 2022-01-28 15:49:28,961 on stmt: $186return_value.1 = cast(value=r.2)
DEBUG 2022-01-28 15:49:28,961 on stmt: return $186return_value.1
DEBUG 2022-01-28 15:49:28,961 Fix SSA violator on var exp
DEBUG 2022-01-28 15:49:28,961 ==== SSA block rewrite pass on 0
DEBUG 2022-01-28 15:49:28,961 Running <numba.core.ssa._FreshVarHandler object at 0x0000024108E7C430>
DEBUG 2022-01-28 15:49:28,961 on stmt: a = arg(0, name=a)
DEBUG 2022-01-28 15:49:28,961 on stmt: b = arg(1, name=b)
DEBUG 2022-01-28 15:49:28,961 on stmt: $2load_deref.0 = freevar(tp: float64)
DEBUG 2022-01-28 15:49:28,961 on stmt: $const4.1 = const(int, 1)
DEBUG 2022-01-28 15:49:28,961 on stmt: r = call $2load_deref.0($const4.1, func=$2load_deref.0, args=[Var($const4.1, numbers.py:217)], kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:28,961 on stmt: $10load_deref.3 = freevar(tp: float64)
DEBUG 2022-01-28 15:49:28,961 on stmt: a.1 = call $10load_deref.3(a, func=$10load_deref.3, args=[Var(a, numbers.py:217)], kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:28,961 on stmt: $const20.7 = const(int, 0)
DEBUG 2022-01-28 15:49:28,961 on stmt: $22compare_op.8 = b < $const20.7
DEBUG 2022-01-28 15:49:28,961 on stmt: bool24 = global(bool: <class 'bool'>)
DEBUG 2022-01-28 15:49:28,961 on stmt: $24pred = call bool24($22compare_op.8, func=bool24, args=(Var($22compare_op.8, numbers.py:219),), kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:28,961 on stmt: branch $24pred, 26, 98
DEBUG 2022-01-28 15:49:28,961 ==== SSA block rewrite pass on 26
DEBUG 2022-01-28 15:49:28,961 Running <numba.core.ssa._FreshVarHandler object at 0x0000024108E7C430>
DEBUG 2022-01-28 15:49:28,961 on stmt: invert = const(bool, True)
DEBUG 2022-01-28 15:49:28,961 on stmt: exp = unary(fn=<built-in function neg>, value=b)
DEBUG 2022-01-28 15:49:28,961 first assign: exp
DEBUG 2022-01-28 15:49:28,961 replaced with: exp = unary(fn=<built-in function neg>, value=b)
DEBUG 2022-01-28 15:49:28,961 on stmt: $const38.4 = const(int, 0)
DEBUG 2022-01-28 15:49:28,961 on stmt: $40compare_op.5 = exp < $const38.4
DEBUG 2022-01-28 15:49:28,961 on stmt: bool42 = global(bool: <class 'bool'>)
DEBUG 2022-01-28 15:49:28,961 on stmt: $42pred = call bool42($40compare_op.5, func=bool42, args=(Var($40compare_op.5, numbers.py:222),), kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:28,961 on stmt: branch $42pred, 44, 48
DEBUG 2022-01-28 15:49:28,961 ==== SSA block rewrite pass on 44
DEBUG 2022-01-28 15:49:28,961 Running <numba.core.ssa._FreshVarHandler object at 0x0000024108E7C430>
DEBUG 2022-01-28 15:49:28,961 on stmt: $44load_global.0 = global(OverflowError: <class 'OverflowError'>)
DEBUG 2022-01-28 15:49:28,961 on stmt: <static> raise <class 'OverflowError'>
DEBUG 2022-01-28 15:49:28,961 ==== SSA block rewrite pass on 48
DEBUG 2022-01-28 15:49:28,961 Running <numba.core.ssa._FreshVarHandler object at 0x0000024108E7C430>
DEBUG 2022-01-28 15:49:28,961 on stmt: $48load_deref.0 = freevar(is_integer: False)
DEBUG 2022-01-28 15:49:28,961 on stmt: bool50 = global(bool: <class 'bool'>)
DEBUG 2022-01-28 15:49:28,961 on stmt: $50pred = call bool50($48load_deref.0, func=bool50, args=(Var($48load_deref.0, numbers.py:224),), kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:28,961 on stmt: jump 106
DEBUG 2022-01-28 15:49:28,961 ==== SSA block rewrite pass on 98
DEBUG 2022-01-28 15:49:28,961 Running <numba.core.ssa._FreshVarHandler object at 0x0000024108E7C430>
DEBUG 2022-01-28 15:49:28,961 on stmt: invert.1 = const(bool, False)
DEBUG 2022-01-28 15:49:28,961 on stmt: exp = b
DEBUG 2022-01-28 15:49:28,961 replaced with: exp.1 = b
DEBUG 2022-01-28 15:49:28,961 on stmt: jump 106
DEBUG 2022-01-28 15:49:28,961 ==== SSA block rewrite pass on 106
DEBUG 2022-01-28 15:49:28,961 Running <numba.core.ssa._FreshVarHandler object at 0x0000024108E7C430>
DEBUG 2022-01-28 15:49:28,961 on stmt: invert.2 = phi(incoming_values=[Var(invert, numbers.py:220), Var(invert.1, numbers.py:233)], incoming_blocks=[48, 98])
DEBUG 2022-01-28 15:49:28,969 on stmt: $const108.1 = const(int, 65536)
DEBUG 2022-01-28 15:49:28,969 on stmt: $110compare_op.2 = exp > $const108.1
DEBUG 2022-01-28 15:49:28,969 on stmt: bool112 = global(bool: <class 'bool'>)
DEBUG 2022-01-28 15:49:28,969 on stmt: $112pred = call bool112($110compare_op.2, func=bool112, args=(Var($110compare_op.2, numbers.py:235),), kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:28,969 on stmt: branch $112pred, 114, 130
DEBUG 2022-01-28 15:49:28,969 ==== SSA block rewrite pass on 114
DEBUG 2022-01-28 15:49:28,969 Running <numba.core.ssa._FreshVarHandler object at 0x0000024108E7C430>
DEBUG 2022-01-28 15:49:28,969 on stmt: $114load_global.0 = global(math: <module 'math' (built-in)>)
DEBUG 2022-01-28 15:49:28,969 on stmt: $116load_method.1 = getattr(value=$114load_global.0, attr=pow)
DEBUG 2022-01-28 15:49:28,969 on stmt: $120load_global.3 = global(float: <class 'float'>)
DEBUG 2022-01-28 15:49:28,969 on stmt: $124call_function.5 = call $120load_global.3(b, func=$120load_global.3, args=[Var(b, numbers.py:217)], kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:28,969 on stmt: $126call_method.6 = call $116load_method.1(a.1, $124call_function.5, func=$116load_method.1, args=[Var(a.1, numbers.py:218), Var($124call_function.5, numbers.py:237)], kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:28,969 on stmt: $128return_value.7 = cast(value=$126call_method.6)
DEBUG 2022-01-28 15:49:28,969 on stmt: return $128return_value.7
DEBUG 2022-01-28 15:49:28,969 ==== SSA block rewrite pass on 130
DEBUG 2022-01-28 15:49:28,969 Running <numba.core.ssa._FreshVarHandler object at 0x0000024108E7C430>
DEBUG 2022-01-28 15:49:28,969 on stmt: a.1.2 = phi(incoming_values=[Var(a.1, numbers.py:218), Var(a.1.1, numbers.py:242)], incoming_blocks=[106, 154])
DEBUG 2022-01-28 15:49:28,969 on stmt: r.2 = phi(incoming_values=[Var(r, numbers.py:217), Var(r.3, numbers.py:240)], incoming_blocks=[106, 154])
DEBUG 2022-01-28 15:49:28,969 on stmt: $const132.1 = const(int, 0)
DEBUG 2022-01-28 15:49:28,971 on stmt: $134compare_op.2 = exp != $const132.1
DEBUG 2022-01-28 15:49:28,971 on stmt: bool136 = global(bool: <class 'bool'>)
DEBUG 2022-01-28 15:49:28,971 on stmt: $136pred = call bool136($134compare_op.2, func=bool136, args=(Var($134compare_op.2, numbers.py:238),), kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:28,971 on stmt: branch $136pred, 138, 172
DEBUG 2022-01-28 15:49:28,971 ==== SSA block rewrite pass on 138
DEBUG 2022-01-28 15:49:28,971 Running <numba.core.ssa._FreshVarHandler object at 0x0000024108E7C430>
DEBUG 2022-01-28 15:49:28,971 on stmt: $const140.1 = const(int, 1)
DEBUG 2022-01-28 15:49:28,971 on stmt: $142binary_and.2 = exp & $const140.1
DEBUG 2022-01-28 15:49:28,971 on stmt: bool144 = global(bool: <class 'bool'>)
DEBUG 2022-01-28 15:49:28,971 on stmt: $144pred = call bool144($142binary_and.2, func=bool144, args=(Var($142binary_and.2, numbers.py:239),), kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:28,971 on stmt: branch $144pred, 146, 154
DEBUG 2022-01-28 15:49:28,971 ==== SSA block rewrite pass on 146
DEBUG 2022-01-28 15:49:28,971 Running <numba.core.ssa._FreshVarHandler object at 0x0000024108E7C430>
DEBUG 2022-01-28 15:49:28,971 on stmt: $150inplace_multiply.2 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=r.2, rhs=a.1.2, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-01-28 15:49:28,971 on stmt: r.1 = $150inplace_multiply.2
DEBUG 2022-01-28 15:49:28,971 on stmt: jump 154
DEBUG 2022-01-28 15:49:28,971 ==== SSA block rewrite pass on 154
DEBUG 2022-01-28 15:49:28,971 Running <numba.core.ssa._FreshVarHandler object at 0x0000024108E7C430>
DEBUG 2022-01-28 15:49:28,971 on stmt: r.3 = phi(incoming_values=[Var(r.2, numbers.py:240), Var(r.1, numbers.py:240)], incoming_blocks=[138, 146])
DEBUG 2022-01-28 15:49:28,971 on stmt: $const156.1 = const(int, 1)
DEBUG 2022-01-28 15:49:28,971 on stmt: $158inplace_rshift.2 = inplace_binop(fn=<built-in function irshift>, immutable_fn=<built-in function rshift>, lhs=exp, rhs=$const156.1, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-01-28 15:49:28,971 on stmt: exp = $158inplace_rshift.2
DEBUG 2022-01-28 15:49:28,971 replaced with: exp.2 = $158inplace_rshift.2
DEBUG 2022-01-28 15:49:28,971 on stmt: $166inplace_multiply.5 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=a.1.2, rhs=a.1.2, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-01-28 15:49:28,971 on stmt: a.1.1 = $166inplace_multiply.5
DEBUG 2022-01-28 15:49:28,971 on stmt: jump 130
DEBUG 2022-01-28 15:49:28,971 ==== SSA block rewrite pass on 172
DEBUG 2022-01-28 15:49:28,971 Running <numba.core.ssa._FreshVarHandler object at 0x0000024108E7C430>
DEBUG 2022-01-28 15:49:28,971 on stmt: bool174 = global(bool: <class 'bool'>)
DEBUG 2022-01-28 15:49:28,971 on stmt: $174pred = call bool174(invert.2, func=bool174, args=(Var(invert.2, numbers.py:244),), kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:28,971 on stmt: branch $174pred, 176, 184
DEBUG 2022-01-28 15:49:28,971 ==== SSA block rewrite pass on 176
DEBUG 2022-01-28 15:49:28,971 Running <numba.core.ssa._FreshVarHandler object at 0x0000024108E7C430>
DEBUG 2022-01-28 15:49:28,971 on stmt: $const176.0 = const(float, 1.0)
DEBUG 2022-01-28 15:49:28,971 on stmt: $180binary_true_divide.2 = $const176.0 / r.2
DEBUG 2022-01-28 15:49:28,971 on stmt: $182return_value.3 = cast(value=$180binary_true_divide.2)
DEBUG 2022-01-28 15:49:28,971 on stmt: return $182return_value.3
DEBUG 2022-01-28 15:49:28,971 ==== SSA block rewrite pass on 184
DEBUG 2022-01-28 15:49:28,971 Running <numba.core.ssa._FreshVarHandler object at 0x0000024108E7C430>
DEBUG 2022-01-28 15:49:28,971 on stmt: $186return_value.1 = cast(value=r.2)
DEBUG 2022-01-28 15:49:28,971 on stmt: return $186return_value.1
DEBUG 2022-01-28 15:49:28,971 Replaced assignments: defaultdict(<class 'list'>,
            {26: [<numba.core.ir.Assign object at 0x000002410CCC6D30>],
             98: [<numba.core.ir.Assign object at 0x000002410CCC6B50>],
             154: [<numba.core.ir.Assign object at 0x0000024108E7D160>]})
DEBUG 2022-01-28 15:49:28,971 ==== SSA block rewrite pass on 0
DEBUG 2022-01-28 15:49:28,971 Running <numba.core.ssa._FixSSAVars object at 0x000002410CC11BB0>
DEBUG 2022-01-28 15:49:28,971 on stmt: a = arg(0, name=a)
DEBUG 2022-01-28 15:49:28,971 on stmt: b = arg(1, name=b)
DEBUG 2022-01-28 15:49:28,971 on stmt: $2load_deref.0 = freevar(tp: float64)
DEBUG 2022-01-28 15:49:28,971 on stmt: $const4.1 = const(int, 1)
DEBUG 2022-01-28 15:49:28,971 on stmt: r = call $2load_deref.0($const4.1, func=$2load_deref.0, args=[Var($const4.1, numbers.py:217)], kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:28,971 on stmt: $10load_deref.3 = freevar(tp: float64)
DEBUG 2022-01-28 15:49:28,971 on stmt: a.1 = call $10load_deref.3(a, func=$10load_deref.3, args=[Var(a, numbers.py:217)], kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:28,971 on stmt: $const20.7 = const(int, 0)
DEBUG 2022-01-28 15:49:28,971 on stmt: $22compare_op.8 = b < $const20.7
DEBUG 2022-01-28 15:49:28,971 on stmt: bool24 = global(bool: <class 'bool'>)
DEBUG 2022-01-28 15:49:28,971 on stmt: $24pred = call bool24($22compare_op.8, func=bool24, args=(Var($22compare_op.8, numbers.py:219),), kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:28,971 on stmt: branch $24pred, 26, 98
DEBUG 2022-01-28 15:49:28,971 ==== SSA block rewrite pass on 26
DEBUG 2022-01-28 15:49:28,971 Running <numba.core.ssa._FixSSAVars object at 0x000002410CC11BB0>
DEBUG 2022-01-28 15:49:28,971 on stmt: invert = const(bool, True)
DEBUG 2022-01-28 15:49:28,971 on stmt: exp = unary(fn=<built-in function neg>, value=b)
DEBUG 2022-01-28 15:49:28,971 on stmt: $const38.4 = const(int, 0)
DEBUG 2022-01-28 15:49:28,971 on stmt: $40compare_op.5 = exp < $const38.4
DEBUG 2022-01-28 15:49:28,971 find_def var='exp' stmt=$40compare_op.5 = exp < $const38.4
DEBUG 2022-01-28 15:49:28,971 on stmt: bool42 = global(bool: <class 'bool'>)
DEBUG 2022-01-28 15:49:28,971 on stmt: $42pred = call bool42($40compare_op.5, func=bool42, args=(Var($40compare_op.5, numbers.py:222),), kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:28,971 on stmt: branch $42pred, 44, 48
DEBUG 2022-01-28 15:49:28,971 ==== SSA block rewrite pass on 44
DEBUG 2022-01-28 15:49:28,971 Running <numba.core.ssa._FixSSAVars object at 0x000002410CC11BB0>
DEBUG 2022-01-28 15:49:28,971 on stmt: $44load_global.0 = global(OverflowError: <class 'OverflowError'>)
DEBUG 2022-01-28 15:49:28,971 on stmt: <static> raise <class 'OverflowError'>
DEBUG 2022-01-28 15:49:28,971 ==== SSA block rewrite pass on 48
DEBUG 2022-01-28 15:49:28,971 Running <numba.core.ssa._FixSSAVars object at 0x000002410CC11BB0>
DEBUG 2022-01-28 15:49:28,971 on stmt: $48load_deref.0 = freevar(is_integer: False)
DEBUG 2022-01-28 15:49:28,971 on stmt: bool50 = global(bool: <class 'bool'>)
DEBUG 2022-01-28 15:49:28,971 on stmt: $50pred = call bool50($48load_deref.0, func=bool50, args=(Var($48load_deref.0, numbers.py:224),), kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:28,971 on stmt: jump 106
DEBUG 2022-01-28 15:49:28,971 ==== SSA block rewrite pass on 98
DEBUG 2022-01-28 15:49:28,971 Running <numba.core.ssa._FixSSAVars object at 0x000002410CC11BB0>
DEBUG 2022-01-28 15:49:28,971 on stmt: invert.1 = const(bool, False)
DEBUG 2022-01-28 15:49:28,979 on stmt: exp.1 = b
DEBUG 2022-01-28 15:49:28,979 on stmt: jump 106
DEBUG 2022-01-28 15:49:28,979 ==== SSA block rewrite pass on 106
DEBUG 2022-01-28 15:49:28,979 Running <numba.core.ssa._FixSSAVars object at 0x000002410CC11BB0>
DEBUG 2022-01-28 15:49:28,979 on stmt: invert.2 = phi(incoming_values=[Var(invert, numbers.py:220), Var(invert.1, numbers.py:233)], incoming_blocks=[48, 98])
DEBUG 2022-01-28 15:49:28,979 on stmt: $const108.1 = const(int, 65536)
DEBUG 2022-01-28 15:49:28,979 on stmt: $110compare_op.2 = exp > $const108.1
DEBUG 2022-01-28 15:49:28,979 find_def var='exp' stmt=$110compare_op.2 = exp > $const108.1
DEBUG 2022-01-28 15:49:28,979 find_def_from_top label 106
DEBUG 2022-01-28 15:49:28,979 insert phi node exp.3 = phi(incoming_values=[], incoming_blocks=[]) at 106
DEBUG 2022-01-28 15:49:28,979 find_def_from_bottom label 48
DEBUG 2022-01-28 15:49:28,979 find_def_from_top label 48
DEBUG 2022-01-28 15:49:28,979 idom 26 from label 48
DEBUG 2022-01-28 15:49:28,979 find_def_from_bottom label 26
DEBUG 2022-01-28 15:49:28,979 incoming_def exp = unary(fn=<built-in function neg>, value=b)
DEBUG 2022-01-28 15:49:28,979 find_def_from_bottom label 98
DEBUG 2022-01-28 15:49:28,979 incoming_def exp.1 = b
DEBUG 2022-01-28 15:49:28,979 replaced with: $110compare_op.2 = exp.3 > $const108.1
DEBUG 2022-01-28 15:49:28,979 on stmt: bool112 = global(bool: <class 'bool'>)
DEBUG 2022-01-28 15:49:28,979 on stmt: $112pred = call bool112($110compare_op.2, func=bool112, args=(Var($110compare_op.2, numbers.py:235),), kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:28,981 on stmt: branch $112pred, 114, 130
DEBUG 2022-01-28 15:49:28,981 ==== SSA block rewrite pass on 114
DEBUG 2022-01-28 15:49:28,981 Running <numba.core.ssa._FixSSAVars object at 0x000002410CC11BB0>
DEBUG 2022-01-28 15:49:28,981 on stmt: $114load_global.0 = global(math: <module 'math' (built-in)>)
DEBUG 2022-01-28 15:49:28,981 on stmt: $116load_method.1 = getattr(value=$114load_global.0, attr=pow)
DEBUG 2022-01-28 15:49:28,981 on stmt: $120load_global.3 = global(float: <class 'float'>)
DEBUG 2022-01-28 15:49:28,981 on stmt: $124call_function.5 = call $120load_global.3(b, func=$120load_global.3, args=[Var(b, numbers.py:217)], kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:28,981 on stmt: $126call_method.6 = call $116load_method.1(a.1, $124call_function.5, func=$116load_method.1, args=[Var(a.1, numbers.py:218), Var($124call_function.5, numbers.py:237)], kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:28,981 on stmt: $128return_value.7 = cast(value=$126call_method.6)
DEBUG 2022-01-28 15:49:28,981 on stmt: return $128return_value.7
DEBUG 2022-01-28 15:49:28,981 ==== SSA block rewrite pass on 130
DEBUG 2022-01-28 15:49:28,981 Running <numba.core.ssa._FixSSAVars object at 0x000002410CC11BB0>
DEBUG 2022-01-28 15:49:28,981 on stmt: a.1.2 = phi(incoming_values=[Var(a.1, numbers.py:218), Var(a.1.1, numbers.py:242)], incoming_blocks=[106, 154])
DEBUG 2022-01-28 15:49:28,981 on stmt: r.2 = phi(incoming_values=[Var(r, numbers.py:217), Var(r.3, numbers.py:240)], incoming_blocks=[106, 154])
DEBUG 2022-01-28 15:49:28,981 on stmt: $const132.1 = const(int, 0)
DEBUG 2022-01-28 15:49:28,981 on stmt: $134compare_op.2 = exp != $const132.1
DEBUG 2022-01-28 15:49:28,981 find_def var='exp' stmt=$134compare_op.2 = exp != $const132.1
DEBUG 2022-01-28 15:49:28,981 find_def_from_top label 130
DEBUG 2022-01-28 15:49:28,981 insert phi node exp.4 = phi(incoming_values=[], incoming_blocks=[]) at 130
DEBUG 2022-01-28 15:49:28,981 find_def_from_bottom label 106
DEBUG 2022-01-28 15:49:28,981 incoming_def exp.3 = phi(incoming_values=[Var(exp, numbers.py:221), Var(exp.1, numbers.py:234)], incoming_blocks=[48, 98])
DEBUG 2022-01-28 15:49:28,981 find_def_from_bottom label 154
DEBUG 2022-01-28 15:49:28,981 incoming_def exp.2 = $158inplace_rshift.2
DEBUG 2022-01-28 15:49:28,981 replaced with: $134compare_op.2 = exp.4 != $const132.1
DEBUG 2022-01-28 15:49:28,981 on stmt: bool136 = global(bool: <class 'bool'>)
DEBUG 2022-01-28 15:49:28,981 on stmt: $136pred = call bool136($134compare_op.2, func=bool136, args=(Var($134compare_op.2, numbers.py:238),), kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:28,981 on stmt: branch $136pred, 138, 172
DEBUG 2022-01-28 15:49:28,981 ==== SSA block rewrite pass on 138
DEBUG 2022-01-28 15:49:28,981 Running <numba.core.ssa._FixSSAVars object at 0x000002410CC11BB0>
DEBUG 2022-01-28 15:49:28,981 on stmt: $const140.1 = const(int, 1)
DEBUG 2022-01-28 15:49:28,981 on stmt: $142binary_and.2 = exp & $const140.1
DEBUG 2022-01-28 15:49:28,981 find_def var='exp' stmt=$142binary_and.2 = exp & $const140.1
DEBUG 2022-01-28 15:49:28,981 find_def_from_top label 138
DEBUG 2022-01-28 15:49:28,981 idom 130 from label 138
DEBUG 2022-01-28 15:49:28,981 find_def_from_bottom label 130
DEBUG 2022-01-28 15:49:28,981 replaced with: $142binary_and.2 = exp.4 & $const140.1
DEBUG 2022-01-28 15:49:28,981 on stmt: bool144 = global(bool: <class 'bool'>)
DEBUG 2022-01-28 15:49:28,981 on stmt: $144pred = call bool144($142binary_and.2, func=bool144, args=(Var($142binary_and.2, numbers.py:239),), kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:28,981 on stmt: branch $144pred, 146, 154
DEBUG 2022-01-28 15:49:28,981 ==== SSA block rewrite pass on 146
DEBUG 2022-01-28 15:49:28,981 Running <numba.core.ssa._FixSSAVars object at 0x000002410CC11BB0>
DEBUG 2022-01-28 15:49:28,981 on stmt: $150inplace_multiply.2 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=r.2, rhs=a.1.2, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-01-28 15:49:28,981 on stmt: r.1 = $150inplace_multiply.2
DEBUG 2022-01-28 15:49:28,981 on stmt: jump 154
DEBUG 2022-01-28 15:49:28,981 ==== SSA block rewrite pass on 154
DEBUG 2022-01-28 15:49:28,981 Running <numba.core.ssa._FixSSAVars object at 0x000002410CC11BB0>
DEBUG 2022-01-28 15:49:28,981 on stmt: r.3 = phi(incoming_values=[Var(r.2, numbers.py:240), Var(r.1, numbers.py:240)], incoming_blocks=[138, 146])
DEBUG 2022-01-28 15:49:28,981 on stmt: $const156.1 = const(int, 1)
DEBUG 2022-01-28 15:49:28,981 on stmt: $158inplace_rshift.2 = inplace_binop(fn=<built-in function irshift>, immutable_fn=<built-in function rshift>, lhs=exp, rhs=$const156.1, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-01-28 15:49:28,981 find_def var='exp' stmt=$158inplace_rshift.2 = inplace_binop(fn=<built-in function irshift>, immutable_fn=<built-in function rshift>, lhs=exp, rhs=$const156.1, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-01-28 15:49:28,981 find_def_from_top label 154
DEBUG 2022-01-28 15:49:28,981 idom 138 from label 154
DEBUG 2022-01-28 15:49:28,981 find_def_from_bottom label 138
DEBUG 2022-01-28 15:49:28,981 find_def_from_top label 138
DEBUG 2022-01-28 15:49:28,981 idom 130 from label 138
DEBUG 2022-01-28 15:49:28,981 find_def_from_bottom label 130
DEBUG 2022-01-28 15:49:28,981 replaced with: $158inplace_rshift.2 = inplace_binop(fn=<built-in function irshift>, immutable_fn=<built-in function rshift>, lhs=exp.4, rhs=$const156.1, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-01-28 15:49:28,981 on stmt: exp.2 = $158inplace_rshift.2
DEBUG 2022-01-28 15:49:28,981 on stmt: $166inplace_multiply.5 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=a.1.2, rhs=a.1.2, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-01-28 15:49:28,981 on stmt: a.1.1 = $166inplace_multiply.5
DEBUG 2022-01-28 15:49:28,981 on stmt: jump 130
DEBUG 2022-01-28 15:49:28,981 ==== SSA block rewrite pass on 172
DEBUG 2022-01-28 15:49:28,981 Running <numba.core.ssa._FixSSAVars object at 0x000002410CC11BB0>
DEBUG 2022-01-28 15:49:28,981 on stmt: bool174 = global(bool: <class 'bool'>)
DEBUG 2022-01-28 15:49:28,981 on stmt: $174pred = call bool174(invert.2, func=bool174, args=(Var(invert.2, numbers.py:244),), kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:28,981 on stmt: branch $174pred, 176, 184
DEBUG 2022-01-28 15:49:28,981 ==== SSA block rewrite pass on 176
DEBUG 2022-01-28 15:49:28,981 Running <numba.core.ssa._FixSSAVars object at 0x000002410CC11BB0>
DEBUG 2022-01-28 15:49:28,981 on stmt: $const176.0 = const(float, 1.0)
DEBUG 2022-01-28 15:49:28,981 on stmt: $180binary_true_divide.2 = $const176.0 / r.2
DEBUG 2022-01-28 15:49:28,981 on stmt: $182return_value.3 = cast(value=$180binary_true_divide.2)
DEBUG 2022-01-28 15:49:28,981 on stmt: return $182return_value.3
DEBUG 2022-01-28 15:49:28,981 ==== SSA block rewrite pass on 184
DEBUG 2022-01-28 15:49:28,981 Running <numba.core.ssa._FixSSAVars object at 0x000002410CC11BB0>
DEBUG 2022-01-28 15:49:28,981 on stmt: $186return_value.1 = cast(value=r.2)
DEBUG 2022-01-28 15:49:28,981 on stmt: return $186return_value.1
DEBUG 2022-01-28 15:49:33,868 bytecode dump:
>          0	NOP(arg=None, lineno=24)
           2	LOAD_FAST(arg=1, lineno=24)
           4	LOAD_CONST(arg=1, lineno=24)
           6	BINARY_SUBSCR(arg=None, lineno=24)
           8	STORE_FAST(arg=6, lineno=24)
          10	LOAD_FAST(arg=0, lineno=25)
          12	LOAD_CONST(arg=1, lineno=25)
          14	LOAD_CONST(arg=0, lineno=25)
          16	LOAD_CONST(arg=0, lineno=25)
          18	BUILD_SLICE(arg=2, lineno=25)
          20	BUILD_TUPLE(arg=2, lineno=25)
          22	BINARY_SUBSCR(arg=None, lineno=25)
          24	STORE_FAST(arg=7, lineno=25)
          26	LOAD_FAST(arg=0, lineno=27)
          28	LOAD_ATTR(arg=0, lineno=27)
          30	LOAD_CONST(arg=1, lineno=27)
          32	BINARY_SUBSCR(arg=None, lineno=27)
          34	STORE_FAST(arg=8, lineno=27)
          36	LOAD_CONST(arg=2, lineno=28)
          38	LOAD_FAST(arg=2, lineno=28)
          40	LOAD_METHOD(arg=1, lineno=28)
          42	CALL_METHOD(arg=0, lineno=28)
          44	BINARY_MULTIPLY(arg=None, lineno=28)
          46	STORE_FAST(arg=9, lineno=28)
          48	LOAD_FAST(arg=9, lineno=30)
          50	LOAD_CONST(arg=2, lineno=30)
          52	LOAD_FAST(arg=3, lineno=30)
          54	BINARY_MULTIPLY(arg=None, lineno=30)
          56	BINARY_ADD(arg=None, lineno=30)
          58	LOAD_FAST(arg=4, lineno=30)
          60	BINARY_ADD(arg=None, lineno=30)
          62	STORE_FAST(arg=10, lineno=30)
          64	LOAD_GLOBAL(arg=2, lineno=32)
          66	LOAD_METHOD(arg=3, lineno=32)
          68	LOAD_GLOBAL(arg=2, lineno=32)
          70	LOAD_METHOD(arg=4, lineno=32)
          72	LOAD_FAST(arg=3, lineno=32)
          74	BUILD_LIST(arg=1, lineno=32)
          76	CALL_METHOD(arg=1, lineno=32)
          78	LOAD_FAST(arg=2, lineno=32)
          80	BUILD_TUPLE(arg=2, lineno=32)
          82	CALL_METHOD(arg=1, lineno=32)
          84	STORE_FAST(arg=11, lineno=32)
          86	LOAD_GLOBAL(arg=2, lineno=33)
          88	LOAD_METHOD(arg=5, lineno=33)
          90	LOAD_FAST(arg=11, lineno=33)
          92	LOAD_CONST(arg=3, lineno=33)
          94	BINARY_ADD(arg=None, lineno=33)
          96	CALL_METHOD(arg=1, lineno=33)
          98	STORE_FAST(arg=12, lineno=33)
         100	LOAD_FAST(arg=11, lineno=35)
         102	LOAD_METHOD(arg=6, lineno=35)
         104	CALL_METHOD(arg=0, lineno=35)
         106	LOAD_FAST(arg=4, lineno=35)
         108	BINARY_ADD(arg=None, lineno=35)
         110	STORE_FAST(arg=13, lineno=35)
         112	LOAD_GLOBAL(arg=7, lineno=36)
         114	LOAD_FAST(arg=13, lineno=36)
         116	CALL_FUNCTION(arg=1, lineno=36)
         118	STORE_FAST(arg=14, lineno=36)
         120	LOAD_GLOBAL(arg=2, lineno=38)
         122	LOAD_ATTR(arg=8, lineno=38)
         124	LOAD_CONST(arg=2, lineno=38)
         126	LOAD_FAST(arg=3, lineno=38)
         128	BINARY_MULTIPLY(arg=None, lineno=38)
         130	LOAD_FAST(arg=4, lineno=38)
         132	BINARY_ADD(arg=None, lineno=38)
         134	LOAD_CONST(arg=3, lineno=38)
         136	BINARY_ADD(arg=None, lineno=38)
         138	LOAD_GLOBAL(arg=2, lineno=38)
         140	LOAD_ATTR(arg=9, lineno=38)
         142	LOAD_CONST(arg=4, lineno=38)
         144	CALL_FUNCTION_KW(arg=2, lineno=38)
         146	STORE_FAST(arg=15, lineno=38)
         148	LOAD_GLOBAL(arg=10, lineno=39)
         150	LOAD_METHOD(arg=11, lineno=39)
         152	LOAD_FAST(arg=12, lineno=39)
         154	CALL_METHOD(arg=1, lineno=39)
         156	GET_ITER(arg=None, lineno=39)
>        158	FOR_ITER(arg=358, lineno=39)
         162	STORE_FAST(arg=16, lineno=39)
         164	LOAD_GLOBAL(arg=2, lineno=41)
         166	LOAD_ATTR(arg=8, lineno=41)
         168	LOAD_CONST(arg=2, lineno=41)
         170	LOAD_FAST(arg=3, lineno=41)
         172	BINARY_MULTIPLY(arg=None, lineno=41)
         174	LOAD_FAST(arg=4, lineno=41)
         176	BINARY_ADD(arg=None, lineno=41)
         178	LOAD_CONST(arg=3, lineno=41)
         180	BINARY_ADD(arg=None, lineno=41)
         182	LOAD_GLOBAL(arg=2, lineno=41)
         184	LOAD_ATTR(arg=9, lineno=41)
         186	LOAD_CONST(arg=4, lineno=41)
         188	CALL_FUNCTION_KW(arg=2, lineno=41)
         190	STORE_FAST(arg=17, lineno=41)
         192	LOAD_GLOBAL(arg=12, lineno=43)
         194	LOAD_FAST(arg=16, lineno=43)
         196	LOAD_FAST(arg=11, lineno=43)
         198	CALL_FUNCTION(arg=2, lineno=43)
         200	STORE_FAST(arg=18, lineno=43)
         202	LOAD_FAST(arg=18, lineno=44)
         204	LOAD_METHOD(arg=1, lineno=44)
         206	CALL_METHOD(arg=0, lineno=44)
         208	STORE_FAST(arg=19, lineno=44)
         210	LOAD_CONST(arg=5, lineno=46)
         212	STORE_FAST(arg=20, lineno=46)
         214	LOAD_GLOBAL(arg=13, lineno=47)
         216	LOAD_CONST(arg=3, lineno=47)
         218	LOAD_FAST(arg=8, lineno=47)
         220	LOAD_CONST(arg=2, lineno=47)
         222	BINARY_FLOOR_DIVIDE(arg=None, lineno=47)
         224	CALL_FUNCTION(arg=2, lineno=47)
         226	GET_ITER(arg=None, lineno=47)
>        228	FOR_ITER(arg=28, lineno=47)
         230	STORE_FAST(arg=21, lineno=47)
         232	LOAD_FAST(arg=20, lineno=48)
         234	LOAD_FAST(arg=14, lineno=48)
         236	LOAD_FAST(arg=11, lineno=48)
         238	LOAD_FAST(arg=21, lineno=48)
         240	BINARY_SUBSCR(arg=None, lineno=48)
         242	LOAD_FAST(arg=18, lineno=48)
         244	LOAD_FAST(arg=21, lineno=48)
         246	BINARY_SUBSCR(arg=None, lineno=48)
         248	BUILD_TUPLE(arg=2, lineno=48)
         250	BINARY_SUBSCR(arg=None, lineno=48)
         252	INPLACE_MULTIPLY(arg=None, lineno=48)
         254	STORE_FAST(arg=20, lineno=48)
         256	JUMP_ABSOLUTE(arg=228, lineno=48)
>        258	LOAD_FAST(arg=5, lineno=50)
         260	POP_JUMP_IF_FALSE(arg=278, lineno=50)
         264	LOAD_CONST(arg=2, lineno=51)
         266	LOAD_FAST(arg=18, lineno=51)
         268	BINARY_MULTIPLY(arg=None, lineno=51)
         270	LOAD_FAST(arg=11, lineno=51)
         272	BINARY_SUBTRACT(arg=None, lineno=51)
         274	STORE_FAST(arg=22, lineno=51)
         276	JUMP_FORWARD(arg=4, lineno=51)
>        278	LOAD_FAST(arg=18, lineno=53)
         280	STORE_FAST(arg=22, lineno=53)
>        282	LOAD_GLOBAL(arg=14, lineno=55)
         284	LOAD_FAST(arg=22, lineno=55)
         286	LOAD_FAST(arg=0, lineno=55)
         288	LOAD_FAST(arg=1, lineno=55)
         290	LOAD_FAST(arg=7, lineno=55)
         292	CALL_FUNCTION(arg=4, lineno=55)
         294	UNPACK_SEQUENCE(arg=4, lineno=55)
         296	STORE_FAST(arg=23, lineno=55)
         298	STORE_FAST(arg=24, lineno=55)
         300	STORE_FAST(arg=25, lineno=55)
         302	STORE_FAST(arg=26, lineno=55)
         304	LOAD_GLOBAL(arg=15, lineno=57)
         306	LOAD_FAST(arg=23, lineno=57)
         308	CALL_FUNCTION(arg=1, lineno=57)
         310	STORE_FAST(arg=27, lineno=57)
         312	LOAD_GLOBAL(arg=16, lineno=61)
         314	LOAD_FAST(arg=27, lineno=61)
         316	LOAD_FAST(arg=23, lineno=61)
         318	LOAD_FAST(arg=24, lineno=61)
         320	LOAD_FAST(arg=25, lineno=61)
         322	LOAD_FAST(arg=10, lineno=61)
         324	CALL_FUNCTION(arg=5, lineno=61)
         326	STORE_FAST(arg=28, lineno=61)
         328	LOAD_GLOBAL(arg=17, lineno=62)
         330	LOAD_FAST(arg=27, lineno=62)
         332	LOAD_FAST(arg=23, lineno=62)
         334	LOAD_FAST(arg=24, lineno=62)
         336	LOAD_FAST(arg=25, lineno=62)
         338	LOAD_FAST(arg=10, lineno=62)
         340	LOAD_FAST(arg=6, lineno=62)
         342	LOAD_FAST(arg=26, lineno=62)
         344	CALL_FUNCTION(arg=7, lineno=62)
         346	STORE_FAST(arg=29, lineno=62)
         348	LOAD_GLOBAL(arg=13, lineno=64)
         350	LOAD_CONST(arg=2, lineno=64)
         352	LOAD_FAST(arg=18, lineno=64)
         354	LOAD_CONST(arg=1, lineno=64)
         356	BINARY_SUBSCR(arg=None, lineno=64)
         358	BINARY_MULTIPLY(arg=None, lineno=64)
         360	LOAD_CONST(arg=2, lineno=64)
         362	LOAD_FAST(arg=3, lineno=64)
         364	BINARY_MULTIPLY(arg=None, lineno=64)
         366	LOAD_FAST(arg=4, lineno=64)
         368	BINARY_ADD(arg=None, lineno=64)
         370	LOAD_CONST(arg=3, lineno=64)
         372	BINARY_ADD(arg=None, lineno=64)
         374	CALL_FUNCTION(arg=2, lineno=64)
         376	GET_ITER(arg=None, lineno=64)
>        378	FOR_ITER(arg=130, lineno=64)
         380	STORE_FAST(arg=30, lineno=64)
         382	LOAD_FAST(arg=9, lineno=65)
         384	LOAD_FAST(arg=30, lineno=65)
         386	BINARY_ADD(arg=None, lineno=65)
         388	STORE_FAST(arg=31, lineno=65)
         390	LOAD_CONST(arg=6, lineno=66)
         392	LOAD_FAST(arg=31, lineno=66)
         394	LOAD_CONST(arg=2, lineno=66)
         396	BINARY_FLOOR_DIVIDE(arg=None, lineno=66)
         398	LOAD_FAST(arg=19, lineno=66)
         400	BINARY_SUBTRACT(arg=None, lineno=66)
         402	BINARY_POWER(arg=None, lineno=66)
         404	STORE_FAST(arg=32, lineno=66)
         406	LOAD_FAST(arg=14, lineno=68)
         408	LOAD_FAST(arg=30, lineno=68)
         410	LOAD_CONST(arg=2, lineno=68)
         412	BINARY_FLOOR_DIVIDE(arg=None, lineno=68)
         414	LOAD_FAST(arg=18, lineno=68)
         416	LOAD_CONST(arg=1, lineno=68)
         418	BINARY_SUBSCR(arg=None, lineno=68)
         420	BUILD_TUPLE(arg=2, lineno=68)
         422	BINARY_SUBSCR(arg=None, lineno=68)
         424	LOAD_FAST(arg=20, lineno=68)
         426	BINARY_MULTIPLY(arg=None, lineno=68)
         428	STORE_FAST(arg=33, lineno=68)
         430	LOAD_FAST(arg=30, lineno=70)
         432	LOAD_CONST(arg=2, lineno=70)
         434	BINARY_MODULO(arg=None, lineno=70)
         436	LOAD_CONST(arg=1, lineno=70)
         438	COMPARE_OP(arg=2, lineno=70)
         440	POP_JUMP_IF_FALSE(arg=478, lineno=70)
         444	LOAD_FAST(arg=17, lineno=71)
         446	LOAD_FAST(arg=30, lineno=71)
         448	DUP_TOP_TWO(arg=None, lineno=71)
         450	BINARY_SUBSCR(arg=None, lineno=71)
         452	LOAD_FAST(arg=33, lineno=71)
         454	LOAD_FAST(arg=32, lineno=71)
         456	BINARY_MULTIPLY(arg=None, lineno=71)
         458	LOAD_FAST(arg=28, lineno=71)
         460	LOAD_FAST(arg=31, lineno=71)
         462	LOAD_CONST(arg=2, lineno=71)
         464	BINARY_FLOOR_DIVIDE(arg=None, lineno=71)
         466	BINARY_SUBSCR(arg=None, lineno=71)
         468	BINARY_MULTIPLY(arg=None, lineno=71)
         470	INPLACE_ADD(arg=None, lineno=71)
         472	ROT_THREE(arg=None, lineno=71)
         474	STORE_SUBSCR(arg=None, lineno=71)
         476	JUMP_FORWARD(arg=28, lineno=71)
>        478	LOAD_FAST(arg=17, lineno=73)
         480	LOAD_FAST(arg=30, lineno=73)
         482	DUP_TOP_TWO(arg=None, lineno=73)
         484	BINARY_SUBSCR(arg=None, lineno=73)
         486	LOAD_FAST(arg=33, lineno=73)
         488	LOAD_FAST(arg=32, lineno=73)
         490	BINARY_MULTIPLY(arg=None, lineno=73)
         492	LOAD_FAST(arg=29, lineno=73)
         494	LOAD_FAST(arg=31, lineno=73)
         496	BINARY_SUBSCR(arg=None, lineno=73)
         498	BINARY_MULTIPLY(arg=None, lineno=73)
         500	INPLACE_ADD(arg=None, lineno=73)
         502	ROT_THREE(arg=None, lineno=73)
         504	STORE_SUBSCR(arg=None, lineno=73)
>        506	JUMP_ABSOLUTE(arg=378, lineno=73)
>        510	LOAD_FAST(arg=15, lineno=75)
         512	LOAD_FAST(arg=17, lineno=75)
         514	INPLACE_ADD(arg=None, lineno=75)
         516	STORE_FAST(arg=15, lineno=75)
         518	JUMP_ABSOLUTE(arg=158, lineno=75)
>        520	LOAD_FAST(arg=5, lineno=77)
         522	POP_JUMP_IF_FALSE(arg=580, lineno=77)
         526	LOAD_GLOBAL(arg=13, lineno=78)
         528	LOAD_FAST(arg=15, lineno=78)
         530	LOAD_ATTR(arg=0, lineno=78)
         532	LOAD_CONST(arg=1, lineno=78)
         534	BINARY_SUBSCR(arg=None, lineno=78)
         536	CALL_FUNCTION(arg=1, lineno=78)
         538	GET_ITER(arg=None, lineno=78)
>        540	FOR_ITER(arg=38, lineno=78)
         542	STORE_FAST(arg=16, lineno=78)
         544	LOAD_FAST(arg=9, lineno=79)
         546	LOAD_FAST(arg=16, lineno=79)
         548	BINARY_ADD(arg=None, lineno=79)
         550	STORE_FAST(arg=34, lineno=79)
         552	LOAD_FAST(arg=15, lineno=80)
         554	LOAD_FAST(arg=16, lineno=80)
         556	DUP_TOP_TWO(arg=None, lineno=80)
         558	BINARY_SUBSCR(arg=None, lineno=80)
         560	LOAD_CONST(arg=7, lineno=80)
         562	LOAD_FAST(arg=34, lineno=80)
         564	LOAD_CONST(arg=2, lineno=80)
         566	BINARY_FLOOR_DIVIDE(arg=None, lineno=80)
         568	BINARY_POWER(arg=None, lineno=80)
         570	INPLACE_MULTIPLY(arg=None, lineno=80)
         572	ROT_THREE(arg=None, lineno=80)
         574	STORE_SUBSCR(arg=None, lineno=80)
         576	JUMP_ABSOLUTE(arg=540, lineno=80)
>        580	LOAD_FAST(arg=15, lineno=82)
         582	RETURN_VALUE(arg=None, lineno=82)
DEBUG 2022-01-28 15:49:33,868 pending: deque([State(pc_initial=0 nstack_initial=0)])
DEBUG 2022-01-28 15:49:33,868 stack: []
DEBUG 2022-01-28 15:49:33,868 dispatch pc=0, inst=NOP(arg=None, lineno=24)
DEBUG 2022-01-28 15:49:33,868 stack []
DEBUG 2022-01-28 15:49:33,868 dispatch pc=2, inst=LOAD_FAST(arg=1, lineno=24)
DEBUG 2022-01-28 15:49:33,868 stack []
DEBUG 2022-01-28 15:49:33,868 dispatch pc=4, inst=LOAD_CONST(arg=1, lineno=24)
DEBUG 2022-01-28 15:49:33,868 stack ['$D2.0']
DEBUG 2022-01-28 15:49:33,868 dispatch pc=6, inst=BINARY_SUBSCR(arg=None, lineno=24)
DEBUG 2022-01-28 15:49:33,868 stack ['$D2.0', '$const4.1']
DEBUG 2022-01-28 15:49:33,868 dispatch pc=8, inst=STORE_FAST(arg=6, lineno=24)
DEBUG 2022-01-28 15:49:33,868 stack ['$6binary_subscr.2']
DEBUG 2022-01-28 15:49:33,868 dispatch pc=10, inst=LOAD_FAST(arg=0, lineno=25)
DEBUG 2022-01-28 15:49:33,868 stack []
DEBUG 2022-01-28 15:49:33,868 dispatch pc=12, inst=LOAD_CONST(arg=1, lineno=25)
DEBUG 2022-01-28 15:49:33,868 stack ['$A10.3']
DEBUG 2022-01-28 15:49:33,868 dispatch pc=14, inst=LOAD_CONST(arg=0, lineno=25)
DEBUG 2022-01-28 15:49:33,868 stack ['$A10.3', '$const12.4']
DEBUG 2022-01-28 15:49:33,868 dispatch pc=16, inst=LOAD_CONST(arg=0, lineno=25)
DEBUG 2022-01-28 15:49:33,868 stack ['$A10.3', '$const12.4', '$const14.5']
DEBUG 2022-01-28 15:49:33,868 dispatch pc=18, inst=BUILD_SLICE(arg=2, lineno=25)
DEBUG 2022-01-28 15:49:33,868 stack ['$A10.3', '$const12.4', '$const14.5', '$const16.6']
DEBUG 2022-01-28 15:49:33,868 dispatch pc=20, inst=BUILD_TUPLE(arg=2, lineno=25)
DEBUG 2022-01-28 15:49:33,868 stack ['$A10.3', '$const12.4', '$18build_slice.8']
DEBUG 2022-01-28 15:49:33,868 dispatch pc=22, inst=BINARY_SUBSCR(arg=None, lineno=25)
DEBUG 2022-01-28 15:49:33,868 stack ['$A10.3', '$20build_tuple.9']
DEBUG 2022-01-28 15:49:33,868 dispatch pc=24, inst=STORE_FAST(arg=7, lineno=25)
DEBUG 2022-01-28 15:49:33,868 stack ['$22binary_subscr.10']
DEBUG 2022-01-28 15:49:33,868 dispatch pc=26, inst=LOAD_FAST(arg=0, lineno=27)
DEBUG 2022-01-28 15:49:33,868 stack []
DEBUG 2022-01-28 15:49:33,868 dispatch pc=28, inst=LOAD_ATTR(arg=0, lineno=27)
DEBUG 2022-01-28 15:49:33,868 stack ['$A26.11']
DEBUG 2022-01-28 15:49:33,868 dispatch pc=30, inst=LOAD_CONST(arg=1, lineno=27)
DEBUG 2022-01-28 15:49:33,868 stack ['$28load_attr.12']
DEBUG 2022-01-28 15:49:33,868 dispatch pc=32, inst=BINARY_SUBSCR(arg=None, lineno=27)
DEBUG 2022-01-28 15:49:33,868 stack ['$28load_attr.12', '$const30.13']
DEBUG 2022-01-28 15:49:33,868 dispatch pc=34, inst=STORE_FAST(arg=8, lineno=27)
DEBUG 2022-01-28 15:49:33,868 stack ['$32binary_subscr.14']
DEBUG 2022-01-28 15:49:33,868 dispatch pc=36, inst=LOAD_CONST(arg=2, lineno=28)
DEBUG 2022-01-28 15:49:33,868 stack []
DEBUG 2022-01-28 15:49:33,868 dispatch pc=38, inst=LOAD_FAST(arg=2, lineno=28)
DEBUG 2022-01-28 15:49:33,868 stack ['$const36.15']
DEBUG 2022-01-28 15:49:33,868 dispatch pc=40, inst=LOAD_METHOD(arg=1, lineno=28)
DEBUG 2022-01-28 15:49:33,868 stack ['$const36.15', '$fixed_edge_reps38.16']
DEBUG 2022-01-28 15:49:33,868 dispatch pc=42, inst=CALL_METHOD(arg=0, lineno=28)
DEBUG 2022-01-28 15:49:33,868 stack ['$const36.15', '$40load_method.17']
DEBUG 2022-01-28 15:49:33,868 dispatch pc=44, inst=BINARY_MULTIPLY(arg=None, lineno=28)
DEBUG 2022-01-28 15:49:33,868 stack ['$const36.15', '$42call_method.18']
DEBUG 2022-01-28 15:49:33,868 dispatch pc=46, inst=STORE_FAST(arg=9, lineno=28)
DEBUG 2022-01-28 15:49:33,868 stack ['$44binary_multiply.19']
DEBUG 2022-01-28 15:49:33,868 dispatch pc=48, inst=LOAD_FAST(arg=9, lineno=30)
DEBUG 2022-01-28 15:49:33,868 stack []
DEBUG 2022-01-28 15:49:33,868 dispatch pc=50, inst=LOAD_CONST(arg=2, lineno=30)
DEBUG 2022-01-28 15:49:33,868 stack ['$N_fixed48.20']
DEBUG 2022-01-28 15:49:33,868 dispatch pc=52, inst=LOAD_FAST(arg=3, lineno=30)
DEBUG 2022-01-28 15:49:33,868 stack ['$N_fixed48.20', '$const50.21']
DEBUG 2022-01-28 15:49:33,868 dispatch pc=54, inst=BINARY_MULTIPLY(arg=None, lineno=30)
DEBUG 2022-01-28 15:49:33,868 stack ['$N_fixed48.20', '$const50.21', '$batch_max52.22']
DEBUG 2022-01-28 15:49:33,868 dispatch pc=56, inst=BINARY_ADD(arg=None, lineno=30)
DEBUG 2022-01-28 15:49:33,868 stack ['$N_fixed48.20', '$54binary_multiply.23']
DEBUG 2022-01-28 15:49:33,868 dispatch pc=58, inst=LOAD_FAST(arg=4, lineno=30)
DEBUG 2022-01-28 15:49:33,868 stack ['$56binary_add.24']
DEBUG 2022-01-28 15:49:33,868 dispatch pc=60, inst=BINARY_ADD(arg=None, lineno=30)
DEBUG 2022-01-28 15:49:33,868 stack ['$56binary_add.24', '$odd_cutoff58.25']
DEBUG 2022-01-28 15:49:33,868 dispatch pc=62, inst=STORE_FAST(arg=10, lineno=30)
DEBUG 2022-01-28 15:49:33,868 stack ['$60binary_add.26']
DEBUG 2022-01-28 15:49:33,868 dispatch pc=64, inst=LOAD_GLOBAL(arg=2, lineno=32)
DEBUG 2022-01-28 15:49:33,868 stack []
DEBUG 2022-01-28 15:49:33,868 dispatch pc=66, inst=LOAD_METHOD(arg=3, lineno=32)
DEBUG 2022-01-28 15:49:33,868 stack ['$64load_global.27']
DEBUG 2022-01-28 15:49:33,868 dispatch pc=68, inst=LOAD_GLOBAL(arg=2, lineno=32)
DEBUG 2022-01-28 15:49:33,868 stack ['$66load_method.28']
DEBUG 2022-01-28 15:49:33,868 dispatch pc=70, inst=LOAD_METHOD(arg=4, lineno=32)
DEBUG 2022-01-28 15:49:33,868 stack ['$66load_method.28', '$68load_global.29']
DEBUG 2022-01-28 15:49:33,868 dispatch pc=72, inst=LOAD_FAST(arg=3, lineno=32)
DEBUG 2022-01-28 15:49:33,868 stack ['$66load_method.28', '$70load_method.30']
DEBUG 2022-01-28 15:49:33,868 dispatch pc=74, inst=BUILD_LIST(arg=1, lineno=32)
DEBUG 2022-01-28 15:49:33,868 stack ['$66load_method.28', '$70load_method.30', '$batch_max72.31']
DEBUG 2022-01-28 15:49:33,868 dispatch pc=76, inst=CALL_METHOD(arg=1, lineno=32)
DEBUG 2022-01-28 15:49:33,868 stack ['$66load_method.28', '$70load_method.30', '$74build_list.32']
DEBUG 2022-01-28 15:49:33,868 dispatch pc=78, inst=LOAD_FAST(arg=2, lineno=32)
DEBUG 2022-01-28 15:49:33,868 stack ['$66load_method.28', '$76call_method.33']
DEBUG 2022-01-28 15:49:33,868 dispatch pc=80, inst=BUILD_TUPLE(arg=2, lineno=32)
DEBUG 2022-01-28 15:49:33,868 stack ['$66load_method.28', '$76call_method.33', '$fixed_edge_reps78.34']
DEBUG 2022-01-28 15:49:33,868 dispatch pc=82, inst=CALL_METHOD(arg=1, lineno=32)
DEBUG 2022-01-28 15:49:33,868 stack ['$66load_method.28', '$80build_tuple.35']
DEBUG 2022-01-28 15:49:33,884 dispatch pc=84, inst=STORE_FAST(arg=11, lineno=32)
DEBUG 2022-01-28 15:49:33,884 stack ['$82call_method.36']
DEBUG 2022-01-28 15:49:33,884 dispatch pc=86, inst=LOAD_GLOBAL(arg=2, lineno=33)
DEBUG 2022-01-28 15:49:33,884 stack []
DEBUG 2022-01-28 15:49:33,884 dispatch pc=88, inst=LOAD_METHOD(arg=5, lineno=33)
DEBUG 2022-01-28 15:49:33,884 stack ['$86load_global.37']
DEBUG 2022-01-28 15:49:33,884 dispatch pc=90, inst=LOAD_FAST(arg=11, lineno=33)
DEBUG 2022-01-28 15:49:33,884 stack ['$88load_method.38']
DEBUG 2022-01-28 15:49:33,884 dispatch pc=92, inst=LOAD_CONST(arg=3, lineno=33)
DEBUG 2022-01-28 15:49:33,884 stack ['$88load_method.38', '$edge_reps90.39']
DEBUG 2022-01-28 15:49:33,884 dispatch pc=94, inst=BINARY_ADD(arg=None, lineno=33)
DEBUG 2022-01-28 15:49:33,884 stack ['$88load_method.38', '$edge_reps90.39', '$const92.40']
DEBUG 2022-01-28 15:49:33,884 dispatch pc=96, inst=CALL_METHOD(arg=1, lineno=33)
DEBUG 2022-01-28 15:49:33,884 stack ['$88load_method.38', '$94binary_add.41']
DEBUG 2022-01-28 15:49:33,884 dispatch pc=98, inst=STORE_FAST(arg=12, lineno=33)
DEBUG 2022-01-28 15:49:33,884 stack ['$96call_method.42']
DEBUG 2022-01-28 15:49:33,884 dispatch pc=100, inst=LOAD_FAST(arg=11, lineno=35)
DEBUG 2022-01-28 15:49:33,884 stack []
DEBUG 2022-01-28 15:49:33,884 dispatch pc=102, inst=LOAD_METHOD(arg=6, lineno=35)
DEBUG 2022-01-28 15:49:33,884 stack ['$edge_reps100.43']
DEBUG 2022-01-28 15:49:33,884 dispatch pc=104, inst=CALL_METHOD(arg=0, lineno=35)
DEBUG 2022-01-28 15:49:33,884 stack ['$102load_method.44']
DEBUG 2022-01-28 15:49:33,884 dispatch pc=106, inst=LOAD_FAST(arg=4, lineno=35)
DEBUG 2022-01-28 15:49:33,884 stack ['$104call_method.45']
DEBUG 2022-01-28 15:49:33,884 dispatch pc=108, inst=BINARY_ADD(arg=None, lineno=35)
DEBUG 2022-01-28 15:49:33,884 stack ['$104call_method.45', '$odd_cutoff106.46']
DEBUG 2022-01-28 15:49:33,884 dispatch pc=110, inst=STORE_FAST(arg=13, lineno=35)
DEBUG 2022-01-28 15:49:33,884 stack ['$108binary_add.47']
DEBUG 2022-01-28 15:49:33,884 dispatch pc=112, inst=LOAD_GLOBAL(arg=7, lineno=36)
DEBUG 2022-01-28 15:49:33,884 stack []
DEBUG 2022-01-28 15:49:33,884 dispatch pc=114, inst=LOAD_FAST(arg=13, lineno=36)
DEBUG 2022-01-28 15:49:33,884 stack ['$112load_global.48']
DEBUG 2022-01-28 15:49:33,884 dispatch pc=116, inst=CALL_FUNCTION(arg=1, lineno=36)
DEBUG 2022-01-28 15:49:33,884 stack ['$112load_global.48', '$max_binom114.49']
DEBUG 2022-01-28 15:49:33,884 dispatch pc=118, inst=STORE_FAST(arg=14, lineno=36)
DEBUG 2022-01-28 15:49:33,884 stack ['$116call_function.50']
DEBUG 2022-01-28 15:49:33,884 dispatch pc=120, inst=LOAD_GLOBAL(arg=2, lineno=38)
DEBUG 2022-01-28 15:49:33,884 stack []
DEBUG 2022-01-28 15:49:33,884 dispatch pc=122, inst=LOAD_ATTR(arg=8, lineno=38)
DEBUG 2022-01-28 15:49:33,884 stack ['$120load_global.51']
DEBUG 2022-01-28 15:49:33,884 dispatch pc=124, inst=LOAD_CONST(arg=2, lineno=38)
DEBUG 2022-01-28 15:49:33,884 stack ['$122load_attr.52']
DEBUG 2022-01-28 15:49:33,884 dispatch pc=126, inst=LOAD_FAST(arg=3, lineno=38)
DEBUG 2022-01-28 15:49:33,884 stack ['$122load_attr.52', '$const124.53']
DEBUG 2022-01-28 15:49:33,884 dispatch pc=128, inst=BINARY_MULTIPLY(arg=None, lineno=38)
DEBUG 2022-01-28 15:49:33,884 stack ['$122load_attr.52', '$const124.53', '$batch_max126.54']
DEBUG 2022-01-28 15:49:33,884 dispatch pc=130, inst=LOAD_FAST(arg=4, lineno=38)
DEBUG 2022-01-28 15:49:33,884 stack ['$122load_attr.52', '$128binary_multiply.55']
DEBUG 2022-01-28 15:49:33,884 dispatch pc=132, inst=BINARY_ADD(arg=None, lineno=38)
DEBUG 2022-01-28 15:49:33,884 stack ['$122load_attr.52', '$128binary_multiply.55', '$odd_cutoff130.56']
DEBUG 2022-01-28 15:49:33,884 dispatch pc=134, inst=LOAD_CONST(arg=3, lineno=38)
DEBUG 2022-01-28 15:49:33,884 stack ['$122load_attr.52', '$132binary_add.57']
DEBUG 2022-01-28 15:49:33,884 dispatch pc=136, inst=BINARY_ADD(arg=None, lineno=38)
DEBUG 2022-01-28 15:49:33,884 stack ['$122load_attr.52', '$132binary_add.57', '$const134.58']
DEBUG 2022-01-28 15:49:33,884 dispatch pc=138, inst=LOAD_GLOBAL(arg=2, lineno=38)
DEBUG 2022-01-28 15:49:33,884 stack ['$122load_attr.52', '$136binary_add.59']
DEBUG 2022-01-28 15:49:33,884 dispatch pc=140, inst=LOAD_ATTR(arg=9, lineno=38)
DEBUG 2022-01-28 15:49:33,884 stack ['$122load_attr.52', '$136binary_add.59', '$138load_global.60']
DEBUG 2022-01-28 15:49:33,884 dispatch pc=142, inst=LOAD_CONST(arg=4, lineno=38)
DEBUG 2022-01-28 15:49:33,884 stack ['$122load_attr.52', '$136binary_add.59', '$140load_attr.61']
DEBUG 2022-01-28 15:49:33,884 dispatch pc=144, inst=CALL_FUNCTION_KW(arg=2, lineno=38)
DEBUG 2022-01-28 15:49:33,884 stack ['$122load_attr.52', '$136binary_add.59', '$140load_attr.61', '$const142.62']
DEBUG 2022-01-28 15:49:33,884 dispatch pc=146, inst=STORE_FAST(arg=15, lineno=38)
DEBUG 2022-01-28 15:49:33,884 stack ['$144call_function_kw.63']
DEBUG 2022-01-28 15:49:33,884 dispatch pc=148, inst=LOAD_GLOBAL(arg=10, lineno=39)
DEBUG 2022-01-28 15:49:33,884 stack []
DEBUG 2022-01-28 15:49:33,884 dispatch pc=150, inst=LOAD_METHOD(arg=11, lineno=39)
DEBUG 2022-01-28 15:49:33,884 stack ['$148load_global.64']
DEBUG 2022-01-28 15:49:33,884 dispatch pc=152, inst=LOAD_FAST(arg=12, lineno=39)
DEBUG 2022-01-28 15:49:33,884 stack ['$150load_method.65']
DEBUG 2022-01-28 15:49:33,884 dispatch pc=154, inst=CALL_METHOD(arg=1, lineno=39)
DEBUG 2022-01-28 15:49:33,884 stack ['$150load_method.65', '$steps152.66']
DEBUG 2022-01-28 15:49:33,884 dispatch pc=156, inst=GET_ITER(arg=None, lineno=39)
DEBUG 2022-01-28 15:49:33,884 stack ['$154call_method.67']
DEBUG 2022-01-28 15:49:33,884 end state. edges=[Edge(pc=158, stack=('$156get_iter.68',), blockstack=(), npush=0)]
DEBUG 2022-01-28 15:49:33,884 pending: deque([State(pc_initial=158 nstack_initial=1)])
DEBUG 2022-01-28 15:49:33,884 stack: ['$phi158.0']
DEBUG 2022-01-28 15:49:33,884 dispatch pc=158, inst=FOR_ITER(arg=358, lineno=39)
DEBUG 2022-01-28 15:49:33,884 stack ['$phi158.0']
DEBUG 2022-01-28 15:49:33,884 end state. edges=[Edge(pc=520, stack=(), blockstack=(), npush=0), Edge(pc=162, stack=('$phi158.0', '$158for_iter.2'), blockstack=(), npush=0)]
DEBUG 2022-01-28 15:49:33,884 pending: deque([State(pc_initial=520 nstack_initial=0), State(pc_initial=162 nstack_initial=2)])
DEBUG 2022-01-28 15:49:33,884 stack: []
DEBUG 2022-01-28 15:49:33,884 dispatch pc=520, inst=LOAD_FAST(arg=5, lineno=77)
DEBUG 2022-01-28 15:49:33,884 stack []
DEBUG 2022-01-28 15:49:33,884 dispatch pc=522, inst=POP_JUMP_IF_FALSE(arg=580, lineno=77)
DEBUG 2022-01-28 15:49:33,884 stack ['$glynn520.0']
DEBUG 2022-01-28 15:49:33,884 end state. edges=[Edge(pc=526, stack=(), blockstack=(), npush=0), Edge(pc=580, stack=(), blockstack=(), npush=0)]
DEBUG 2022-01-28 15:49:33,884 pending: deque([State(pc_initial=162 nstack_initial=2), State(pc_initial=526 nstack_initial=0), State(pc_initial=580 nstack_initial=0)])
DEBUG 2022-01-28 15:49:33,884 stack: ['$phi162.0', '$phi162.1']
DEBUG 2022-01-28 15:49:33,884 dispatch pc=162, inst=STORE_FAST(arg=16, lineno=39)
DEBUG 2022-01-28 15:49:33,884 stack ['$phi162.0', '$phi162.1']
DEBUG 2022-01-28 15:49:33,884 dispatch pc=164, inst=LOAD_GLOBAL(arg=2, lineno=41)
DEBUG 2022-01-28 15:49:33,884 stack ['$phi162.0']
DEBUG 2022-01-28 15:49:33,884 dispatch pc=166, inst=LOAD_ATTR(arg=8, lineno=41)
DEBUG 2022-01-28 15:49:33,884 stack ['$phi162.0', '$164load_global.2']
DEBUG 2022-01-28 15:49:33,884 dispatch pc=168, inst=LOAD_CONST(arg=2, lineno=41)
DEBUG 2022-01-28 15:49:33,884 stack ['$phi162.0', '$166load_attr.3']
DEBUG 2022-01-28 15:49:33,884 dispatch pc=170, inst=LOAD_FAST(arg=3, lineno=41)
DEBUG 2022-01-28 15:49:33,900 stack ['$phi162.0', '$166load_attr.3', '$const168.4']
DEBUG 2022-01-28 15:49:33,900 dispatch pc=172, inst=BINARY_MULTIPLY(arg=None, lineno=41)
DEBUG 2022-01-28 15:49:33,900 stack ['$phi162.0', '$166load_attr.3', '$const168.4', '$batch_max170.5']
DEBUG 2022-01-28 15:49:33,900 dispatch pc=174, inst=LOAD_FAST(arg=4, lineno=41)
DEBUG 2022-01-28 15:49:33,900 stack ['$phi162.0', '$166load_attr.3', '$172binary_multiply.6']
DEBUG 2022-01-28 15:49:33,900 dispatch pc=176, inst=BINARY_ADD(arg=None, lineno=41)
DEBUG 2022-01-28 15:49:33,900 stack ['$phi162.0', '$166load_attr.3', '$172binary_multiply.6', '$odd_cutoff174.7']
DEBUG 2022-01-28 15:49:33,900 dispatch pc=178, inst=LOAD_CONST(arg=3, lineno=41)
DEBUG 2022-01-28 15:49:33,900 stack ['$phi162.0', '$166load_attr.3', '$176binary_add.8']
DEBUG 2022-01-28 15:49:33,900 dispatch pc=180, inst=BINARY_ADD(arg=None, lineno=41)
DEBUG 2022-01-28 15:49:33,900 stack ['$phi162.0', '$166load_attr.3', '$176binary_add.8', '$const178.9']
DEBUG 2022-01-28 15:49:33,900 dispatch pc=182, inst=LOAD_GLOBAL(arg=2, lineno=41)
DEBUG 2022-01-28 15:49:33,900 stack ['$phi162.0', '$166load_attr.3', '$180binary_add.10']
DEBUG 2022-01-28 15:49:33,900 dispatch pc=184, inst=LOAD_ATTR(arg=9, lineno=41)
DEBUG 2022-01-28 15:49:33,900 stack ['$phi162.0', '$166load_attr.3', '$180binary_add.10', '$182load_global.11']
DEBUG 2022-01-28 15:49:33,900 dispatch pc=186, inst=LOAD_CONST(arg=4, lineno=41)
DEBUG 2022-01-28 15:49:33,900 stack ['$phi162.0', '$166load_attr.3', '$180binary_add.10', '$184load_attr.12']
DEBUG 2022-01-28 15:49:33,900 dispatch pc=188, inst=CALL_FUNCTION_KW(arg=2, lineno=41)
DEBUG 2022-01-28 15:49:33,900 stack ['$phi162.0', '$166load_attr.3', '$180binary_add.10', '$184load_attr.12', '$const186.13']
DEBUG 2022-01-28 15:49:33,900 dispatch pc=190, inst=STORE_FAST(arg=17, lineno=41)
DEBUG 2022-01-28 15:49:33,900 stack ['$phi162.0', '$188call_function_kw.14']
DEBUG 2022-01-28 15:49:33,900 dispatch pc=192, inst=LOAD_GLOBAL(arg=12, lineno=43)
DEBUG 2022-01-28 15:49:33,900 stack ['$phi162.0']
DEBUG 2022-01-28 15:49:33,900 dispatch pc=194, inst=LOAD_FAST(arg=16, lineno=43)
DEBUG 2022-01-28 15:49:33,900 stack ['$phi162.0', '$192load_global.15']
DEBUG 2022-01-28 15:49:33,900 dispatch pc=196, inst=LOAD_FAST(arg=11, lineno=43)
DEBUG 2022-01-28 15:49:33,900 stack ['$phi162.0', '$192load_global.15', '$j194.16']
DEBUG 2022-01-28 15:49:33,900 dispatch pc=198, inst=CALL_FUNCTION(arg=2, lineno=43)
DEBUG 2022-01-28 15:49:33,900 stack ['$phi162.0', '$192load_global.15', '$j194.16', '$edge_reps196.17']
DEBUG 2022-01-28 15:49:33,900 dispatch pc=200, inst=STORE_FAST(arg=18, lineno=43)
DEBUG 2022-01-28 15:49:33,900 stack ['$phi162.0', '$198call_function.18']
DEBUG 2022-01-28 15:49:33,900 dispatch pc=202, inst=LOAD_FAST(arg=18, lineno=44)
DEBUG 2022-01-28 15:49:33,900 stack ['$phi162.0']
DEBUG 2022-01-28 15:49:33,900 dispatch pc=204, inst=LOAD_METHOD(arg=1, lineno=44)
DEBUG 2022-01-28 15:49:33,900 stack ['$phi162.0', '$kept_edges202.19']
DEBUG 2022-01-28 15:49:33,900 dispatch pc=206, inst=CALL_METHOD(arg=0, lineno=44)
DEBUG 2022-01-28 15:49:33,900 stack ['$phi162.0', '$204load_method.20']
DEBUG 2022-01-28 15:49:33,900 dispatch pc=208, inst=STORE_FAST(arg=19, lineno=44)
DEBUG 2022-01-28 15:49:33,900 stack ['$phi162.0', '$206call_method.21']
DEBUG 2022-01-28 15:49:33,900 dispatch pc=210, inst=LOAD_CONST(arg=5, lineno=46)
DEBUG 2022-01-28 15:49:33,900 stack ['$phi162.0']
DEBUG 2022-01-28 15:49:33,906 dispatch pc=212, inst=STORE_FAST(arg=20, lineno=46)
DEBUG 2022-01-28 15:49:33,906 stack ['$phi162.0', '$const210.22']
DEBUG 2022-01-28 15:49:33,906 dispatch pc=214, inst=LOAD_GLOBAL(arg=13, lineno=47)
DEBUG 2022-01-28 15:49:33,906 stack ['$phi162.0']
DEBUG 2022-01-28 15:49:33,906 dispatch pc=216, inst=LOAD_CONST(arg=3, lineno=47)
DEBUG 2022-01-28 15:49:33,906 stack ['$phi162.0', '$214load_global.23']
DEBUG 2022-01-28 15:49:33,906 dispatch pc=218, inst=LOAD_FAST(arg=8, lineno=47)
DEBUG 2022-01-28 15:49:33,906 stack ['$phi162.0', '$214load_global.23', '$const216.24']
DEBUG 2022-01-28 15:49:33,906 dispatch pc=220, inst=LOAD_CONST(arg=2, lineno=47)
DEBUG 2022-01-28 15:49:33,906 stack ['$phi162.0', '$214load_global.23', '$const216.24', '$n218.25']
DEBUG 2022-01-28 15:49:33,906 dispatch pc=222, inst=BINARY_FLOOR_DIVIDE(arg=None, lineno=47)
DEBUG 2022-01-28 15:49:33,906 stack ['$phi162.0', '$214load_global.23', '$const216.24', '$n218.25', '$const220.26']
DEBUG 2022-01-28 15:49:33,906 dispatch pc=224, inst=CALL_FUNCTION(arg=2, lineno=47)
DEBUG 2022-01-28 15:49:33,908 stack ['$phi162.0', '$214load_global.23', '$const216.24', '$222binary_floor_divide.27']
DEBUG 2022-01-28 15:49:33,908 dispatch pc=226, inst=GET_ITER(arg=None, lineno=47)
DEBUG 2022-01-28 15:49:33,908 stack ['$phi162.0', '$224call_function.28']
DEBUG 2022-01-28 15:49:33,908 end state. edges=[Edge(pc=228, stack=('$phi162.0', '$226get_iter.29'), blockstack=(), npush=0)]
DEBUG 2022-01-28 15:49:33,908 pending: deque([State(pc_initial=526 nstack_initial=0), State(pc_initial=580 nstack_initial=0), State(pc_initial=228 nstack_initial=2)])
DEBUG 2022-01-28 15:49:33,908 stack: []
DEBUG 2022-01-28 15:49:33,908 dispatch pc=526, inst=LOAD_GLOBAL(arg=13, lineno=78)
DEBUG 2022-01-28 15:49:33,908 stack []
DEBUG 2022-01-28 15:49:33,908 dispatch pc=528, inst=LOAD_FAST(arg=15, lineno=78)
DEBUG 2022-01-28 15:49:33,908 stack ['$526load_global.0']
DEBUG 2022-01-28 15:49:33,908 dispatch pc=530, inst=LOAD_ATTR(arg=0, lineno=78)
DEBUG 2022-01-28 15:49:33,908 stack ['$526load_global.0', '$H_batch528.1']
DEBUG 2022-01-28 15:49:33,908 dispatch pc=532, inst=LOAD_CONST(arg=1, lineno=78)
DEBUG 2022-01-28 15:49:33,908 stack ['$526load_global.0', '$530load_attr.2']
DEBUG 2022-01-28 15:49:33,908 dispatch pc=534, inst=BINARY_SUBSCR(arg=None, lineno=78)
DEBUG 2022-01-28 15:49:33,908 stack ['$526load_global.0', '$530load_attr.2', '$const532.3']
DEBUG 2022-01-28 15:49:33,908 dispatch pc=536, inst=CALL_FUNCTION(arg=1, lineno=78)
DEBUG 2022-01-28 15:49:33,908 stack ['$526load_global.0', '$534binary_subscr.4']
DEBUG 2022-01-28 15:49:33,908 dispatch pc=538, inst=GET_ITER(arg=None, lineno=78)
DEBUG 2022-01-28 15:49:33,908 stack ['$536call_function.5']
DEBUG 2022-01-28 15:49:33,908 end state. edges=[Edge(pc=540, stack=('$538get_iter.6',), blockstack=(), npush=0)]
DEBUG 2022-01-28 15:49:33,908 pending: deque([State(pc_initial=580 nstack_initial=0), State(pc_initial=228 nstack_initial=2), State(pc_initial=540 nstack_initial=1)])
DEBUG 2022-01-28 15:49:33,908 stack: []
DEBUG 2022-01-28 15:49:33,908 dispatch pc=580, inst=LOAD_FAST(arg=15, lineno=82)
DEBUG 2022-01-28 15:49:33,908 stack []
DEBUG 2022-01-28 15:49:33,908 dispatch pc=582, inst=RETURN_VALUE(arg=None, lineno=82)
DEBUG 2022-01-28 15:49:33,908 stack ['$H_batch580.0']
DEBUG 2022-01-28 15:49:33,908 end state. edges=[]
DEBUG 2022-01-28 15:49:33,908 pending: deque([State(pc_initial=228 nstack_initial=2), State(pc_initial=540 nstack_initial=1)])
DEBUG 2022-01-28 15:49:33,908 stack: ['$phi228.0', '$phi228.1']
DEBUG 2022-01-28 15:49:33,908 dispatch pc=228, inst=FOR_ITER(arg=28, lineno=47)
DEBUG 2022-01-28 15:49:33,908 stack ['$phi228.0', '$phi228.1']
DEBUG 2022-01-28 15:49:33,908 end state. edges=[Edge(pc=258, stack=('$phi228.0',), blockstack=(), npush=0), Edge(pc=230, stack=('$phi228.0', '$phi228.1', '$228for_iter.3'), blockstack=(), npush=0)]
DEBUG 2022-01-28 15:49:33,908 pending: deque([State(pc_initial=540 nstack_initial=1), State(pc_initial=258 nstack_initial=1), State(pc_initial=230 nstack_initial=3)])
DEBUG 2022-01-28 15:49:33,908 stack: ['$phi540.0']
DEBUG 2022-01-28 15:49:33,908 dispatch pc=540, inst=FOR_ITER(arg=38, lineno=78)
DEBUG 2022-01-28 15:49:33,908 stack ['$phi540.0']
DEBUG 2022-01-28 15:49:33,908 end state. edges=[Edge(pc=580, stack=(), blockstack=(), npush=0), Edge(pc=542, stack=('$phi540.0', '$540for_iter.2'), blockstack=(), npush=0)]
DEBUG 2022-01-28 15:49:33,908 pending: deque([State(pc_initial=258 nstack_initial=1), State(pc_initial=230 nstack_initial=3), State(pc_initial=580 nstack_initial=0), State(pc_initial=542 nstack_initial=2)])
DEBUG 2022-01-28 15:49:33,908 stack: ['$phi258.0']
DEBUG 2022-01-28 15:49:33,908 dispatch pc=258, inst=LOAD_FAST(arg=5, lineno=50)
DEBUG 2022-01-28 15:49:33,908 stack ['$phi258.0']
DEBUG 2022-01-28 15:49:33,908 dispatch pc=260, inst=POP_JUMP_IF_FALSE(arg=278, lineno=50)
DEBUG 2022-01-28 15:49:33,908 stack ['$phi258.0', '$glynn258.1']
DEBUG 2022-01-28 15:49:33,908 end state. edges=[Edge(pc=264, stack=('$phi258.0',), blockstack=(), npush=0), Edge(pc=278, stack=('$phi258.0',), blockstack=(), npush=0)]
DEBUG 2022-01-28 15:49:33,908 pending: deque([State(pc_initial=230 nstack_initial=3), State(pc_initial=580 nstack_initial=0), State(pc_initial=542 nstack_initial=2), State(pc_initial=264 nstack_initial=1), State(pc_initial=278 nstack_initial=1)])
DEBUG 2022-01-28 15:49:33,908 stack: ['$phi230.0', '$phi230.1', '$phi230.2']
DEBUG 2022-01-28 15:49:33,916 dispatch pc=230, inst=STORE_FAST(arg=21, lineno=47)
DEBUG 2022-01-28 15:49:33,916 stack ['$phi230.0', '$phi230.1', '$phi230.2']
DEBUG 2022-01-28 15:49:33,916 dispatch pc=232, inst=LOAD_FAST(arg=20, lineno=48)
DEBUG 2022-01-28 15:49:33,916 stack ['$phi230.0', '$phi230.1']
DEBUG 2022-01-28 15:49:33,916 dispatch pc=234, inst=LOAD_FAST(arg=14, lineno=48)
DEBUG 2022-01-28 15:49:33,916 stack ['$phi230.0', '$phi230.1', '$binom_prod232.3']
DEBUG 2022-01-28 15:49:33,916 dispatch pc=236, inst=LOAD_FAST(arg=11, lineno=48)
DEBUG 2022-01-28 15:49:33,916 stack ['$phi230.0', '$phi230.1', '$binom_prod232.3', '$binoms234.4']
DEBUG 2022-01-28 15:49:33,916 dispatch pc=238, inst=LOAD_FAST(arg=21, lineno=48)
DEBUG 2022-01-28 15:49:33,916 stack ['$phi230.0', '$phi230.1', '$binom_prod232.3', '$binoms234.4', '$edge_reps236.5']
DEBUG 2022-01-28 15:49:33,916 dispatch pc=240, inst=BINARY_SUBSCR(arg=None, lineno=48)
DEBUG 2022-01-28 15:49:33,916 stack ['$phi230.0', '$phi230.1', '$binom_prod232.3', '$binoms234.4', '$edge_reps236.5', '$i238.6']
DEBUG 2022-01-28 15:49:33,918 dispatch pc=242, inst=LOAD_FAST(arg=18, lineno=48)
DEBUG 2022-01-28 15:49:33,918 stack ['$phi230.0', '$phi230.1', '$binom_prod232.3', '$binoms234.4', '$240binary_subscr.7']
DEBUG 2022-01-28 15:49:33,918 dispatch pc=244, inst=LOAD_FAST(arg=21, lineno=48)
DEBUG 2022-01-28 15:49:33,918 stack ['$phi230.0', '$phi230.1', '$binom_prod232.3', '$binoms234.4', '$240binary_subscr.7', '$kept_edges242.8']
DEBUG 2022-01-28 15:49:33,918 dispatch pc=246, inst=BINARY_SUBSCR(arg=None, lineno=48)
DEBUG 2022-01-28 15:49:33,918 stack ['$phi230.0', '$phi230.1', '$binom_prod232.3', '$binoms234.4', '$240binary_subscr.7', '$kept_edges242.8', '$i244.9']
DEBUG 2022-01-28 15:49:33,918 dispatch pc=248, inst=BUILD_TUPLE(arg=2, lineno=48)
DEBUG 2022-01-28 15:49:33,918 stack ['$phi230.0', '$phi230.1', '$binom_prod232.3', '$binoms234.4', '$240binary_subscr.7', '$246binary_subscr.10']
DEBUG 2022-01-28 15:49:33,918 dispatch pc=250, inst=BINARY_SUBSCR(arg=None, lineno=48)
DEBUG 2022-01-28 15:49:33,918 stack ['$phi230.0', '$phi230.1', '$binom_prod232.3', '$binoms234.4', '$248build_tuple.11']
DEBUG 2022-01-28 15:49:33,918 dispatch pc=252, inst=INPLACE_MULTIPLY(arg=None, lineno=48)
DEBUG 2022-01-28 15:49:33,918 stack ['$phi230.0', '$phi230.1', '$binom_prod232.3', '$250binary_subscr.12']
DEBUG 2022-01-28 15:49:33,918 dispatch pc=254, inst=STORE_FAST(arg=20, lineno=48)
DEBUG 2022-01-28 15:49:33,918 stack ['$phi230.0', '$phi230.1', '$252inplace_multiply.13']
DEBUG 2022-01-28 15:49:33,918 dispatch pc=256, inst=JUMP_ABSOLUTE(arg=228, lineno=48)
DEBUG 2022-01-28 15:49:33,918 stack ['$phi230.0', '$phi230.1']
DEBUG 2022-01-28 15:49:33,918 end state. edges=[Edge(pc=228, stack=('$phi230.0', '$phi230.1'), blockstack=(), npush=0)]
DEBUG 2022-01-28 15:49:33,918 pending: deque([State(pc_initial=580 nstack_initial=0), State(pc_initial=542 nstack_initial=2), State(pc_initial=264 nstack_initial=1), State(pc_initial=278 nstack_initial=1), State(pc_initial=228 nstack_initial=2)])
DEBUG 2022-01-28 15:49:33,918 pending: deque([State(pc_initial=542 nstack_initial=2), State(pc_initial=264 nstack_initial=1), State(pc_initial=278 nstack_initial=1), State(pc_initial=228 nstack_initial=2)])
DEBUG 2022-01-28 15:49:33,918 stack: ['$phi542.0', '$phi542.1']
DEBUG 2022-01-28 15:49:33,918 dispatch pc=542, inst=STORE_FAST(arg=16, lineno=78)
DEBUG 2022-01-28 15:49:33,918 stack ['$phi542.0', '$phi542.1']
DEBUG 2022-01-28 15:49:33,918 dispatch pc=544, inst=LOAD_FAST(arg=9, lineno=79)
DEBUG 2022-01-28 15:49:33,918 stack ['$phi542.0']
DEBUG 2022-01-28 15:49:33,918 dispatch pc=546, inst=LOAD_FAST(arg=16, lineno=79)
DEBUG 2022-01-28 15:49:33,918 stack ['$phi542.0', '$N_fixed544.2']
DEBUG 2022-01-28 15:49:33,918 dispatch pc=548, inst=BINARY_ADD(arg=None, lineno=79)
DEBUG 2022-01-28 15:49:33,918 stack ['$phi542.0', '$N_fixed544.2', '$j546.3']
DEBUG 2022-01-28 15:49:33,918 dispatch pc=550, inst=STORE_FAST(arg=34, lineno=79)
DEBUG 2022-01-28 15:49:33,918 stack ['$phi542.0', '$548binary_add.4']
DEBUG 2022-01-28 15:49:33,918 dispatch pc=552, inst=LOAD_FAST(arg=15, lineno=80)
DEBUG 2022-01-28 15:49:33,918 stack ['$phi542.0']
DEBUG 2022-01-28 15:49:33,918 dispatch pc=554, inst=LOAD_FAST(arg=16, lineno=80)
DEBUG 2022-01-28 15:49:33,918 stack ['$phi542.0', '$H_batch552.5']
DEBUG 2022-01-28 15:49:33,918 dispatch pc=556, inst=DUP_TOP_TWO(arg=None, lineno=80)
DEBUG 2022-01-28 15:49:33,918 stack ['$phi542.0', '$H_batch552.5', '$j554.6']
DEBUG 2022-01-28 15:49:33,918 dispatch pc=558, inst=BINARY_SUBSCR(arg=None, lineno=80)
DEBUG 2022-01-28 15:49:33,918 stack ['$phi542.0', '$H_batch552.5', '$j554.6', '$556dup_top_two.7', '$556dup_top_two.8']
DEBUG 2022-01-28 15:49:33,918 dispatch pc=560, inst=LOAD_CONST(arg=7, lineno=80)
DEBUG 2022-01-28 15:49:33,918 stack ['$phi542.0', '$H_batch552.5', '$j554.6', '$558binary_subscr.9']
DEBUG 2022-01-28 15:49:33,918 dispatch pc=562, inst=LOAD_FAST(arg=34, lineno=80)
DEBUG 2022-01-28 15:49:33,918 stack ['$phi542.0', '$H_batch552.5', '$j554.6', '$558binary_subscr.9', '$const560.10']
DEBUG 2022-01-28 15:49:33,918 dispatch pc=564, inst=LOAD_CONST(arg=2, lineno=80)
DEBUG 2022-01-28 15:49:33,918 stack ['$phi542.0', '$H_batch552.5', '$j554.6', '$558binary_subscr.9', '$const560.10', '$x562.11']
DEBUG 2022-01-28 15:49:33,918 dispatch pc=566, inst=BINARY_FLOOR_DIVIDE(arg=None, lineno=80)
DEBUG 2022-01-28 15:49:33,918 stack ['$phi542.0', '$H_batch552.5', '$j554.6', '$558binary_subscr.9', '$const560.10', '$x562.11', '$const564.12']
DEBUG 2022-01-28 15:49:33,918 dispatch pc=568, inst=BINARY_POWER(arg=None, lineno=80)
DEBUG 2022-01-28 15:49:33,918 stack ['$phi542.0', '$H_batch552.5', '$j554.6', '$558binary_subscr.9', '$const560.10', '$566binary_floor_divide.13']
DEBUG 2022-01-28 15:49:33,918 dispatch pc=570, inst=INPLACE_MULTIPLY(arg=None, lineno=80)
DEBUG 2022-01-28 15:49:33,926 stack ['$phi542.0', '$H_batch552.5', '$j554.6', '$558binary_subscr.9', '$568binary_power.14']
DEBUG 2022-01-28 15:49:33,926 dispatch pc=572, inst=ROT_THREE(arg=None, lineno=80)
DEBUG 2022-01-28 15:49:33,926 stack ['$phi542.0', '$H_batch552.5', '$j554.6', '$570inplace_multiply.15']
DEBUG 2022-01-28 15:49:33,926 dispatch pc=574, inst=STORE_SUBSCR(arg=None, lineno=80)
DEBUG 2022-01-28 15:49:33,926 stack ['$phi542.0', '$570inplace_multiply.15', '$H_batch552.5', '$j554.6']
DEBUG 2022-01-28 15:49:33,926 dispatch pc=576, inst=JUMP_ABSOLUTE(arg=540, lineno=80)
DEBUG 2022-01-28 15:49:33,926 stack ['$phi542.0']
DEBUG 2022-01-28 15:49:33,926 end state. edges=[Edge(pc=540, stack=('$phi542.0',), blockstack=(), npush=0)]
DEBUG 2022-01-28 15:49:33,926 pending: deque([State(pc_initial=264 nstack_initial=1), State(pc_initial=278 nstack_initial=1), State(pc_initial=228 nstack_initial=2), State(pc_initial=540 nstack_initial=1)])
DEBUG 2022-01-28 15:49:33,926 stack: ['$phi264.0']
DEBUG 2022-01-28 15:49:33,926 dispatch pc=264, inst=LOAD_CONST(arg=2, lineno=51)
DEBUG 2022-01-28 15:49:33,926 stack ['$phi264.0']
DEBUG 2022-01-28 15:49:33,928 dispatch pc=266, inst=LOAD_FAST(arg=18, lineno=51)
DEBUG 2022-01-28 15:49:33,928 stack ['$phi264.0', '$const264.1']
DEBUG 2022-01-28 15:49:33,928 dispatch pc=268, inst=BINARY_MULTIPLY(arg=None, lineno=51)
DEBUG 2022-01-28 15:49:33,928 stack ['$phi264.0', '$const264.1', '$kept_edges266.2']
DEBUG 2022-01-28 15:49:33,928 dispatch pc=270, inst=LOAD_FAST(arg=11, lineno=51)
DEBUG 2022-01-28 15:49:33,928 stack ['$phi264.0', '$268binary_multiply.3']
DEBUG 2022-01-28 15:49:33,928 dispatch pc=272, inst=BINARY_SUBTRACT(arg=None, lineno=51)
DEBUG 2022-01-28 15:49:33,928 stack ['$phi264.0', '$268binary_multiply.3', '$edge_reps270.4']
DEBUG 2022-01-28 15:49:33,928 dispatch pc=274, inst=STORE_FAST(arg=22, lineno=51)
DEBUG 2022-01-28 15:49:33,928 stack ['$phi264.0', '$272binary_subtract.5']
DEBUG 2022-01-28 15:49:33,928 dispatch pc=276, inst=JUMP_FORWARD(arg=4, lineno=51)
DEBUG 2022-01-28 15:49:33,928 stack ['$phi264.0']
DEBUG 2022-01-28 15:49:33,928 end state. edges=[Edge(pc=282, stack=('$phi264.0',), blockstack=(), npush=0)]
DEBUG 2022-01-28 15:49:33,928 pending: deque([State(pc_initial=278 nstack_initial=1), State(pc_initial=228 nstack_initial=2), State(pc_initial=540 nstack_initial=1), State(pc_initial=282 nstack_initial=1)])
DEBUG 2022-01-28 15:49:33,928 stack: ['$phi278.0']
DEBUG 2022-01-28 15:49:33,928 dispatch pc=278, inst=LOAD_FAST(arg=18, lineno=53)
DEBUG 2022-01-28 15:49:33,928 stack ['$phi278.0']
DEBUG 2022-01-28 15:49:33,928 dispatch pc=280, inst=STORE_FAST(arg=22, lineno=53)
DEBUG 2022-01-28 15:49:33,928 stack ['$phi278.0', '$kept_edges278.1']
DEBUG 2022-01-28 15:49:33,928 end state. edges=[Edge(pc=282, stack=('$phi278.0',), blockstack=(), npush=0)]
DEBUG 2022-01-28 15:49:33,928 pending: deque([State(pc_initial=228 nstack_initial=2), State(pc_initial=540 nstack_initial=1), State(pc_initial=282 nstack_initial=1), State(pc_initial=282 nstack_initial=1)])
DEBUG 2022-01-28 15:49:33,928 pending: deque([State(pc_initial=540 nstack_initial=1), State(pc_initial=282 nstack_initial=1), State(pc_initial=282 nstack_initial=1)])
DEBUG 2022-01-28 15:49:33,928 pending: deque([State(pc_initial=282 nstack_initial=1), State(pc_initial=282 nstack_initial=1)])
DEBUG 2022-01-28 15:49:33,928 stack: ['$phi282.0']
DEBUG 2022-01-28 15:49:33,928 dispatch pc=282, inst=LOAD_GLOBAL(arg=14, lineno=55)
DEBUG 2022-01-28 15:49:33,928 stack ['$phi282.0']
DEBUG 2022-01-28 15:49:33,928 dispatch pc=284, inst=LOAD_FAST(arg=22, lineno=55)
DEBUG 2022-01-28 15:49:33,928 stack ['$phi282.0', '$282load_global.1']
DEBUG 2022-01-28 15:49:33,928 dispatch pc=286, inst=LOAD_FAST(arg=0, lineno=55)
DEBUG 2022-01-28 15:49:33,928 stack ['$phi282.0', '$282load_global.1', '$delta284.2']
DEBUG 2022-01-28 15:49:33,928 dispatch pc=288, inst=LOAD_FAST(arg=1, lineno=55)
DEBUG 2022-01-28 15:49:33,928 stack ['$phi282.0', '$282load_global.1', '$delta284.2', '$A286.3']
DEBUG 2022-01-28 15:49:33,928 dispatch pc=290, inst=LOAD_FAST(arg=7, lineno=55)
DEBUG 2022-01-28 15:49:33,928 stack ['$phi282.0', '$282load_global.1', '$delta284.2', '$A286.3', '$D288.4']
DEBUG 2022-01-28 15:49:33,928 dispatch pc=292, inst=CALL_FUNCTION(arg=4, lineno=55)
DEBUG 2022-01-28 15:49:33,928 stack ['$phi282.0', '$282load_global.1', '$delta284.2', '$A286.3', '$D288.4', '$oddV290.5']
DEBUG 2022-01-28 15:49:33,928 dispatch pc=294, inst=UNPACK_SEQUENCE(arg=4, lineno=55)
DEBUG 2022-01-28 15:49:33,928 stack ['$phi282.0', '$292call_function.6']
DEBUG 2022-01-28 15:49:33,928 dispatch pc=296, inst=STORE_FAST(arg=23, lineno=55)
DEBUG 2022-01-28 15:49:33,928 stack ['$phi282.0', '$294unpack_sequence.10', '$294unpack_sequence.9', '$294unpack_sequence.8', '$294unpack_sequence.7']
DEBUG 2022-01-28 15:49:33,928 dispatch pc=298, inst=STORE_FAST(arg=24, lineno=55)
DEBUG 2022-01-28 15:49:33,928 stack ['$phi282.0', '$294unpack_sequence.10', '$294unpack_sequence.9', '$294unpack_sequence.8']
DEBUG 2022-01-28 15:49:33,928 dispatch pc=300, inst=STORE_FAST(arg=25, lineno=55)
DEBUG 2022-01-28 15:49:33,928 stack ['$phi282.0', '$294unpack_sequence.10', '$294unpack_sequence.9']
DEBUG 2022-01-28 15:49:33,928 dispatch pc=302, inst=STORE_FAST(arg=26, lineno=55)
DEBUG 2022-01-28 15:49:33,928 stack ['$phi282.0', '$294unpack_sequence.10']
DEBUG 2022-01-28 15:49:33,928 dispatch pc=304, inst=LOAD_GLOBAL(arg=15, lineno=57)
DEBUG 2022-01-28 15:49:33,928 stack ['$phi282.0']
DEBUG 2022-01-28 15:49:33,928 dispatch pc=306, inst=LOAD_FAST(arg=23, lineno=57)
DEBUG 2022-01-28 15:49:33,928 stack ['$phi282.0', '$304load_global.12']
DEBUG 2022-01-28 15:49:33,928 dispatch pc=308, inst=CALL_FUNCTION(arg=1, lineno=57)
DEBUG 2022-01-28 15:49:33,928 stack ['$phi282.0', '$304load_global.12', '$AX_S306.13']
DEBUG 2022-01-28 15:49:33,928 dispatch pc=310, inst=STORE_FAST(arg=27, lineno=57)
DEBUG 2022-01-28 15:49:33,936 stack ['$phi282.0', '$308call_function.14']
DEBUG 2022-01-28 15:49:33,936 dispatch pc=312, inst=LOAD_GLOBAL(arg=16, lineno=61)
DEBUG 2022-01-28 15:49:33,936 stack ['$phi282.0']
DEBUG 2022-01-28 15:49:33,936 dispatch pc=314, inst=LOAD_FAST(arg=27, lineno=61)
DEBUG 2022-01-28 15:49:33,936 stack ['$phi282.0', '$312load_global.15']
DEBUG 2022-01-28 15:49:33,936 dispatch pc=316, inst=LOAD_FAST(arg=23, lineno=61)
DEBUG 2022-01-28 15:49:33,936 stack ['$phi282.0', '$312load_global.15', '$E314.16']
DEBUG 2022-01-28 15:49:33,936 dispatch pc=318, inst=LOAD_FAST(arg=24, lineno=61)
DEBUG 2022-01-28 15:49:33,936 stack ['$phi282.0', '$312load_global.15', '$E314.16', '$AX_S316.17']
DEBUG 2022-01-28 15:49:33,936 dispatch pc=320, inst=LOAD_FAST(arg=25, lineno=61)
DEBUG 2022-01-28 15:49:33,936 stack ['$phi282.0', '$312load_global.15', '$E314.16', '$AX_S316.17', '$XD_S318.18']
DEBUG 2022-01-28 15:49:33,936 dispatch pc=322, inst=LOAD_FAST(arg=10, lineno=61)
DEBUG 2022-01-28 15:49:33,938 stack ['$phi282.0', '$312load_global.15', '$E314.16', '$AX_S316.17', '$XD_S318.18', '$D_S320.19']
DEBUG 2022-01-28 15:49:33,938 dispatch pc=324, inst=CALL_FUNCTION(arg=5, lineno=61)
DEBUG 2022-01-28 15:49:33,938 stack ['$phi282.0', '$312load_global.15', '$E314.16', '$AX_S316.17', '$XD_S318.18', '$D_S320.19', '$N_max322.20']
DEBUG 2022-01-28 15:49:33,938 dispatch pc=326, inst=STORE_FAST(arg=28, lineno=61)
DEBUG 2022-01-28 15:49:33,938 stack ['$phi282.0', '$324call_function.21']
DEBUG 2022-01-28 15:49:33,938 dispatch pc=328, inst=LOAD_GLOBAL(arg=17, lineno=62)
DEBUG 2022-01-28 15:49:33,938 stack ['$phi282.0']
DEBUG 2022-01-28 15:49:33,938 dispatch pc=330, inst=LOAD_FAST(arg=27, lineno=62)
DEBUG 2022-01-28 15:49:33,938 stack ['$phi282.0', '$328load_global.22']
DEBUG 2022-01-28 15:49:33,938 dispatch pc=332, inst=LOAD_FAST(arg=23, lineno=62)
DEBUG 2022-01-28 15:49:33,938 stack ['$phi282.0', '$328load_global.22', '$E330.23']
DEBUG 2022-01-28 15:49:33,938 dispatch pc=334, inst=LOAD_FAST(arg=24, lineno=62)
DEBUG 2022-01-28 15:49:33,938 stack ['$phi282.0', '$328load_global.22', '$E330.23', '$AX_S332.24']
DEBUG 2022-01-28 15:49:33,938 dispatch pc=336, inst=LOAD_FAST(arg=25, lineno=62)
DEBUG 2022-01-28 15:49:33,938 stack ['$phi282.0', '$328load_global.22', '$E330.23', '$AX_S332.24', '$XD_S334.25']
DEBUG 2022-01-28 15:49:33,938 dispatch pc=338, inst=LOAD_FAST(arg=10, lineno=62)
DEBUG 2022-01-28 15:49:33,938 stack ['$phi282.0', '$328load_global.22', '$E330.23', '$AX_S332.24', '$XD_S334.25', '$D_S336.26']
DEBUG 2022-01-28 15:49:33,938 dispatch pc=340, inst=LOAD_FAST(arg=6, lineno=62)
DEBUG 2022-01-28 15:49:33,938 stack ['$phi282.0', '$328load_global.22', '$E330.23', '$AX_S332.24', '$XD_S334.25', '$D_S336.26', '$N_max338.27']
DEBUG 2022-01-28 15:49:33,938 dispatch pc=342, inst=LOAD_FAST(arg=26, lineno=62)
DEBUG 2022-01-28 15:49:33,938 stack ['$phi282.0', '$328load_global.22', '$E330.23', '$AX_S332.24', '$XD_S334.25', '$D_S336.26', '$N_max338.27', '$oddloop340.28']
DEBUG 2022-01-28 15:49:33,938 dispatch pc=344, inst=CALL_FUNCTION(arg=7, lineno=62)
DEBUG 2022-01-28 15:49:33,938 stack ['$phi282.0', '$328load_global.22', '$E330.23', '$AX_S332.24', '$XD_S334.25', '$D_S336.26', '$N_max338.27', '$oddloop340.28', '$oddVX_S342.29']
DEBUG 2022-01-28 15:49:33,938 dispatch pc=346, inst=STORE_FAST(arg=29, lineno=62)
DEBUG 2022-01-28 15:49:33,938 stack ['$phi282.0', '$344call_function.30']
DEBUG 2022-01-28 15:49:33,938 dispatch pc=348, inst=LOAD_GLOBAL(arg=13, lineno=64)
DEBUG 2022-01-28 15:49:33,938 stack ['$phi282.0']
DEBUG 2022-01-28 15:49:33,938 dispatch pc=350, inst=LOAD_CONST(arg=2, lineno=64)
DEBUG 2022-01-28 15:49:33,938 stack ['$phi282.0', '$348load_global.31']
DEBUG 2022-01-28 15:49:33,938 dispatch pc=352, inst=LOAD_FAST(arg=18, lineno=64)
DEBUG 2022-01-28 15:49:33,938 stack ['$phi282.0', '$348load_global.31', '$const350.32']
DEBUG 2022-01-28 15:49:33,938 dispatch pc=354, inst=LOAD_CONST(arg=1, lineno=64)
DEBUG 2022-01-28 15:49:33,938 stack ['$phi282.0', '$348load_global.31', '$const350.32', '$kept_edges352.33']
DEBUG 2022-01-28 15:49:33,938 dispatch pc=356, inst=BINARY_SUBSCR(arg=None, lineno=64)
DEBUG 2022-01-28 15:49:33,938 stack ['$phi282.0', '$348load_global.31', '$const350.32', '$kept_edges352.33', '$const354.34']
DEBUG 2022-01-28 15:49:33,938 dispatch pc=358, inst=BINARY_MULTIPLY(arg=None, lineno=64)
DEBUG 2022-01-28 15:49:33,938 stack ['$phi282.0', '$348load_global.31', '$const350.32', '$356binary_subscr.35']
DEBUG 2022-01-28 15:49:33,938 dispatch pc=360, inst=LOAD_CONST(arg=2, lineno=64)
DEBUG 2022-01-28 15:49:33,938 stack ['$phi282.0', '$348load_global.31', '$358binary_multiply.36']
DEBUG 2022-01-28 15:49:33,938 dispatch pc=362, inst=LOAD_FAST(arg=3, lineno=64)
DEBUG 2022-01-28 15:49:33,938 stack ['$phi282.0', '$348load_global.31', '$358binary_multiply.36', '$const360.37']
DEBUG 2022-01-28 15:49:33,938 dispatch pc=364, inst=BINARY_MULTIPLY(arg=None, lineno=64)
DEBUG 2022-01-28 15:49:33,938 stack ['$phi282.0', '$348load_global.31', '$358binary_multiply.36', '$const360.37', '$batch_max362.38']
DEBUG 2022-01-28 15:49:33,938 dispatch pc=366, inst=LOAD_FAST(arg=4, lineno=64)
DEBUG 2022-01-28 15:49:33,938 stack ['$phi282.0', '$348load_global.31', '$358binary_multiply.36', '$364binary_multiply.39']
DEBUG 2022-01-28 15:49:33,938 dispatch pc=368, inst=BINARY_ADD(arg=None, lineno=64)
DEBUG 2022-01-28 15:49:33,938 stack ['$phi282.0', '$348load_global.31', '$358binary_multiply.36', '$364binary_multiply.39', '$odd_cutoff366.40']
DEBUG 2022-01-28 15:49:33,938 dispatch pc=370, inst=LOAD_CONST(arg=3, lineno=64)
DEBUG 2022-01-28 15:49:33,938 stack ['$phi282.0', '$348load_global.31', '$358binary_multiply.36', '$368binary_add.41']
DEBUG 2022-01-28 15:49:33,938 dispatch pc=372, inst=BINARY_ADD(arg=None, lineno=64)
DEBUG 2022-01-28 15:49:33,938 stack ['$phi282.0', '$348load_global.31', '$358binary_multiply.36', '$368binary_add.41', '$const370.42']
DEBUG 2022-01-28 15:49:33,946 dispatch pc=374, inst=CALL_FUNCTION(arg=2, lineno=64)
DEBUG 2022-01-28 15:49:33,946 stack ['$phi282.0', '$348load_global.31', '$358binary_multiply.36', '$372binary_add.43']
DEBUG 2022-01-28 15:49:33,946 dispatch pc=376, inst=GET_ITER(arg=None, lineno=64)
DEBUG 2022-01-28 15:49:33,946 stack ['$phi282.0', '$374call_function.44']
DEBUG 2022-01-28 15:49:33,946 end state. edges=[Edge(pc=378, stack=('$phi282.0', '$376get_iter.45'), blockstack=(), npush=0)]
DEBUG 2022-01-28 15:49:33,946 pending: deque([State(pc_initial=282 nstack_initial=1), State(pc_initial=378 nstack_initial=2)])
DEBUG 2022-01-28 15:49:33,946 pending: deque([State(pc_initial=378 nstack_initial=2)])
DEBUG 2022-01-28 15:49:33,946 stack: ['$phi378.0', '$phi378.1']
DEBUG 2022-01-28 15:49:33,946 dispatch pc=378, inst=FOR_ITER(arg=130, lineno=64)
DEBUG 2022-01-28 15:49:33,946 stack ['$phi378.0', '$phi378.1']
DEBUG 2022-01-28 15:49:33,946 end state. edges=[Edge(pc=510, stack=('$phi378.0',), blockstack=(), npush=0), Edge(pc=380, stack=('$phi378.0', '$phi378.1', '$378for_iter.3'), blockstack=(), npush=0)]
DEBUG 2022-01-28 15:49:33,948 pending: deque([State(pc_initial=510 nstack_initial=1), State(pc_initial=380 nstack_initial=3)])
DEBUG 2022-01-28 15:49:33,948 stack: ['$phi510.0']
DEBUG 2022-01-28 15:49:33,948 dispatch pc=510, inst=LOAD_FAST(arg=15, lineno=75)
DEBUG 2022-01-28 15:49:33,948 stack ['$phi510.0']
DEBUG 2022-01-28 15:49:33,948 dispatch pc=512, inst=LOAD_FAST(arg=17, lineno=75)
DEBUG 2022-01-28 15:49:33,948 stack ['$phi510.0', '$H_batch510.1']
DEBUG 2022-01-28 15:49:33,948 dispatch pc=514, inst=INPLACE_ADD(arg=None, lineno=75)
DEBUG 2022-01-28 15:49:33,948 stack ['$phi510.0', '$H_batch510.1', '$Hnew512.2']
DEBUG 2022-01-28 15:49:33,948 dispatch pc=516, inst=STORE_FAST(arg=15, lineno=75)
DEBUG 2022-01-28 15:49:33,948 stack ['$phi510.0', '$514inplace_add.3']
DEBUG 2022-01-28 15:49:33,948 dispatch pc=518, inst=JUMP_ABSOLUTE(arg=158, lineno=75)
DEBUG 2022-01-28 15:49:33,948 stack ['$phi510.0']
DEBUG 2022-01-28 15:49:33,948 end state. edges=[Edge(pc=158, stack=('$phi510.0',), blockstack=(), npush=0)]
DEBUG 2022-01-28 15:49:33,948 pending: deque([State(pc_initial=380 nstack_initial=3), State(pc_initial=158 nstack_initial=1)])
DEBUG 2022-01-28 15:49:33,948 stack: ['$phi380.0', '$phi380.1', '$phi380.2']
DEBUG 2022-01-28 15:49:33,948 dispatch pc=380, inst=STORE_FAST(arg=30, lineno=64)
DEBUG 2022-01-28 15:49:33,948 stack ['$phi380.0', '$phi380.1', '$phi380.2']
DEBUG 2022-01-28 15:49:33,948 dispatch pc=382, inst=LOAD_FAST(arg=9, lineno=65)
DEBUG 2022-01-28 15:49:33,948 stack ['$phi380.0', '$phi380.1']
DEBUG 2022-01-28 15:49:33,948 dispatch pc=384, inst=LOAD_FAST(arg=30, lineno=65)
DEBUG 2022-01-28 15:49:33,948 stack ['$phi380.0', '$phi380.1', '$N_fixed382.3']
DEBUG 2022-01-28 15:49:33,948 dispatch pc=386, inst=BINARY_ADD(arg=None, lineno=65)
DEBUG 2022-01-28 15:49:33,948 stack ['$phi380.0', '$phi380.1', '$N_fixed382.3', '$N_det384.4']
DEBUG 2022-01-28 15:49:33,948 dispatch pc=388, inst=STORE_FAST(arg=31, lineno=65)
DEBUG 2022-01-28 15:49:33,948 stack ['$phi380.0', '$phi380.1', '$386binary_add.5']
DEBUG 2022-01-28 15:49:33,948 dispatch pc=390, inst=LOAD_CONST(arg=6, lineno=66)
DEBUG 2022-01-28 15:49:33,948 stack ['$phi380.0', '$phi380.1']
DEBUG 2022-01-28 15:49:33,948 dispatch pc=392, inst=LOAD_FAST(arg=31, lineno=66)
DEBUG 2022-01-28 15:49:33,948 stack ['$phi380.0', '$phi380.1', '$const390.6']
DEBUG 2022-01-28 15:49:33,948 dispatch pc=394, inst=LOAD_CONST(arg=2, lineno=66)
DEBUG 2022-01-28 15:49:33,948 stack ['$phi380.0', '$phi380.1', '$const390.6', '$N392.7']
DEBUG 2022-01-28 15:49:33,948 dispatch pc=396, inst=BINARY_FLOOR_DIVIDE(arg=None, lineno=66)
DEBUG 2022-01-28 15:49:33,948 stack ['$phi380.0', '$phi380.1', '$const390.6', '$N392.7', '$const394.8']
DEBUG 2022-01-28 15:49:33,948 dispatch pc=398, inst=LOAD_FAST(arg=19, lineno=66)
DEBUG 2022-01-28 15:49:33,948 stack ['$phi380.0', '$phi380.1', '$const390.6', '$396binary_floor_divide.9']
DEBUG 2022-01-28 15:49:33,948 dispatch pc=400, inst=BINARY_SUBTRACT(arg=None, lineno=66)
DEBUG 2022-01-28 15:49:33,948 stack ['$phi380.0', '$phi380.1', '$const390.6', '$396binary_floor_divide.9', '$edges_sum398.10']
DEBUG 2022-01-28 15:49:33,948 dispatch pc=402, inst=BINARY_POWER(arg=None, lineno=66)
DEBUG 2022-01-28 15:49:33,948 stack ['$phi380.0', '$phi380.1', '$const390.6', '$400binary_subtract.11']
DEBUG 2022-01-28 15:49:33,948 dispatch pc=404, inst=STORE_FAST(arg=32, lineno=66)
DEBUG 2022-01-28 15:49:33,948 stack ['$phi380.0', '$phi380.1', '$402binary_power.12']
DEBUG 2022-01-28 15:49:33,948 dispatch pc=406, inst=LOAD_FAST(arg=14, lineno=68)
DEBUG 2022-01-28 15:49:33,948 stack ['$phi380.0', '$phi380.1']
DEBUG 2022-01-28 15:49:33,948 dispatch pc=408, inst=LOAD_FAST(arg=30, lineno=68)
DEBUG 2022-01-28 15:49:33,948 stack ['$phi380.0', '$phi380.1', '$binoms406.13']
DEBUG 2022-01-28 15:49:33,948 dispatch pc=410, inst=LOAD_CONST(arg=2, lineno=68)
DEBUG 2022-01-28 15:49:33,948 stack ['$phi380.0', '$phi380.1', '$binoms406.13', '$N_det408.14']
DEBUG 2022-01-28 15:49:33,948 dispatch pc=412, inst=BINARY_FLOOR_DIVIDE(arg=None, lineno=68)
DEBUG 2022-01-28 15:49:33,948 stack ['$phi380.0', '$phi380.1', '$binoms406.13', '$N_det408.14', '$const410.15']
DEBUG 2022-01-28 15:49:33,948 dispatch pc=414, inst=LOAD_FAST(arg=18, lineno=68)
DEBUG 2022-01-28 15:49:33,948 stack ['$phi380.0', '$phi380.1', '$binoms406.13', '$412binary_floor_divide.16']
DEBUG 2022-01-28 15:49:33,948 dispatch pc=416, inst=LOAD_CONST(arg=1, lineno=68)
DEBUG 2022-01-28 15:49:33,948 stack ['$phi380.0', '$phi380.1', '$binoms406.13', '$412binary_floor_divide.16', '$kept_edges414.17']
DEBUG 2022-01-28 15:49:33,948 dispatch pc=418, inst=BINARY_SUBSCR(arg=None, lineno=68)
DEBUG 2022-01-28 15:49:33,948 stack ['$phi380.0', '$phi380.1', '$binoms406.13', '$412binary_floor_divide.16', '$kept_edges414.17', '$const416.18']
DEBUG 2022-01-28 15:49:33,957 dispatch pc=420, inst=BUILD_TUPLE(arg=2, lineno=68)
DEBUG 2022-01-28 15:49:33,957 stack ['$phi380.0', '$phi380.1', '$binoms406.13', '$412binary_floor_divide.16', '$418binary_subscr.19']
DEBUG 2022-01-28 15:49:33,957 dispatch pc=422, inst=BINARY_SUBSCR(arg=None, lineno=68)
DEBUG 2022-01-28 15:49:33,957 stack ['$phi380.0', '$phi380.1', '$binoms406.13', '$420build_tuple.20']
DEBUG 2022-01-28 15:49:33,957 dispatch pc=424, inst=LOAD_FAST(arg=20, lineno=68)
DEBUG 2022-01-28 15:49:33,957 stack ['$phi380.0', '$phi380.1', '$422binary_subscr.21']
DEBUG 2022-01-28 15:49:33,957 dispatch pc=426, inst=BINARY_MULTIPLY(arg=None, lineno=68)
DEBUG 2022-01-28 15:49:33,957 stack ['$phi380.0', '$phi380.1', '$422binary_subscr.21', '$binom_prod424.22']
DEBUG 2022-01-28 15:49:33,957 dispatch pc=428, inst=STORE_FAST(arg=33, lineno=68)
DEBUG 2022-01-28 15:49:33,957 stack ['$phi380.0', '$phi380.1', '$426binary_multiply.23']
DEBUG 2022-01-28 15:49:33,957 dispatch pc=430, inst=LOAD_FAST(arg=30, lineno=70)
DEBUG 2022-01-28 15:49:33,957 stack ['$phi380.0', '$phi380.1']
DEBUG 2022-01-28 15:49:33,957 dispatch pc=432, inst=LOAD_CONST(arg=2, lineno=70)
DEBUG 2022-01-28 15:49:33,957 stack ['$phi380.0', '$phi380.1', '$N_det430.24']
DEBUG 2022-01-28 15:49:33,957 dispatch pc=434, inst=BINARY_MODULO(arg=None, lineno=70)
DEBUG 2022-01-28 15:49:33,957 stack ['$phi380.0', '$phi380.1', '$N_det430.24', '$const432.25']
DEBUG 2022-01-28 15:49:33,957 dispatch pc=436, inst=LOAD_CONST(arg=1, lineno=70)
DEBUG 2022-01-28 15:49:33,957 stack ['$phi380.0', '$phi380.1', '$434binary_modulo.26']
DEBUG 2022-01-28 15:49:33,957 dispatch pc=438, inst=COMPARE_OP(arg=2, lineno=70)
DEBUG 2022-01-28 15:49:33,957 stack ['$phi380.0', '$phi380.1', '$434binary_modulo.26', '$const436.27']
DEBUG 2022-01-28 15:49:33,959 dispatch pc=440, inst=POP_JUMP_IF_FALSE(arg=478, lineno=70)
DEBUG 2022-01-28 15:49:33,959 stack ['$phi380.0', '$phi380.1', '$438compare_op.28']
DEBUG 2022-01-28 15:49:33,959 end state. edges=[Edge(pc=444, stack=('$phi380.0', '$phi380.1'), blockstack=(), npush=0), Edge(pc=478, stack=('$phi380.0', '$phi380.1'), blockstack=(), npush=0)]
DEBUG 2022-01-28 15:49:33,959 pending: deque([State(pc_initial=158 nstack_initial=1), State(pc_initial=444 nstack_initial=2), State(pc_initial=478 nstack_initial=2)])
DEBUG 2022-01-28 15:49:33,959 pending: deque([State(pc_initial=444 nstack_initial=2), State(pc_initial=478 nstack_initial=2)])
DEBUG 2022-01-28 15:49:33,959 stack: ['$phi444.0', '$phi444.1']
DEBUG 2022-01-28 15:49:33,959 dispatch pc=444, inst=LOAD_FAST(arg=17, lineno=71)
DEBUG 2022-01-28 15:49:33,959 stack ['$phi444.0', '$phi444.1']
DEBUG 2022-01-28 15:49:33,959 dispatch pc=446, inst=LOAD_FAST(arg=30, lineno=71)
DEBUG 2022-01-28 15:49:33,959 stack ['$phi444.0', '$phi444.1', '$Hnew444.2']
DEBUG 2022-01-28 15:49:33,959 dispatch pc=448, inst=DUP_TOP_TWO(arg=None, lineno=71)
DEBUG 2022-01-28 15:49:33,959 stack ['$phi444.0', '$phi444.1', '$Hnew444.2', '$N_det446.3']
DEBUG 2022-01-28 15:49:33,959 dispatch pc=450, inst=BINARY_SUBSCR(arg=None, lineno=71)
DEBUG 2022-01-28 15:49:33,959 stack ['$phi444.0', '$phi444.1', '$Hnew444.2', '$N_det446.3', '$448dup_top_two.4', '$448dup_top_two.5']
DEBUG 2022-01-28 15:49:33,959 dispatch pc=452, inst=LOAD_FAST(arg=33, lineno=71)
DEBUG 2022-01-28 15:49:33,959 stack ['$phi444.0', '$phi444.1', '$Hnew444.2', '$N_det446.3', '$450binary_subscr.6']
DEBUG 2022-01-28 15:49:33,959 dispatch pc=454, inst=LOAD_FAST(arg=32, lineno=71)
DEBUG 2022-01-28 15:49:33,959 stack ['$phi444.0', '$phi444.1', '$Hnew444.2', '$N_det446.3', '$450binary_subscr.6', '$n_det_binom_prod452.7']
DEBUG 2022-01-28 15:49:33,959 dispatch pc=456, inst=BINARY_MULTIPLY(arg=None, lineno=71)
DEBUG 2022-01-28 15:49:33,959 stack ['$phi444.0', '$phi444.1', '$Hnew444.2', '$N_det446.3', '$450binary_subscr.6', '$n_det_binom_prod452.7', '$plus_minus454.8']
DEBUG 2022-01-28 15:49:33,959 dispatch pc=458, inst=LOAD_FAST(arg=28, lineno=71)
DEBUG 2022-01-28 15:49:33,959 stack ['$phi444.0', '$phi444.1', '$Hnew444.2', '$N_det446.3', '$450binary_subscr.6', '$456binary_multiply.9']
DEBUG 2022-01-28 15:49:33,959 dispatch pc=460, inst=LOAD_FAST(arg=31, lineno=71)
DEBUG 2022-01-28 15:49:33,959 stack ['$phi444.0', '$phi444.1', '$Hnew444.2', '$N_det446.3', '$450binary_subscr.6', '$456binary_multiply.9', '$f_even458.10']
DEBUG 2022-01-28 15:49:33,959 dispatch pc=462, inst=LOAD_CONST(arg=2, lineno=71)
DEBUG 2022-01-28 15:49:33,959 stack ['$phi444.0', '$phi444.1', '$Hnew444.2', '$N_det446.3', '$450binary_subscr.6', '$456binary_multiply.9', '$f_even458.10', '$N460.11']
DEBUG 2022-01-28 15:49:33,959 dispatch pc=464, inst=BINARY_FLOOR_DIVIDE(arg=None, lineno=71)
DEBUG 2022-01-28 15:49:33,959 stack ['$phi444.0', '$phi444.1', '$Hnew444.2', '$N_det446.3', '$450binary_subscr.6', '$456binary_multiply.9', '$f_even458.10', '$N460.11', '$const462.12']
DEBUG 2022-01-28 15:49:33,959 dispatch pc=466, inst=BINARY_SUBSCR(arg=None, lineno=71)
DEBUG 2022-01-28 15:49:33,959 stack ['$phi444.0', '$phi444.1', '$Hnew444.2', '$N_det446.3', '$450binary_subscr.6', '$456binary_multiply.9', '$f_even458.10', '$464binary_floor_divide.13']
DEBUG 2022-01-28 15:49:33,959 dispatch pc=468, inst=BINARY_MULTIPLY(arg=None, lineno=71)
DEBUG 2022-01-28 15:49:33,959 stack ['$phi444.0', '$phi444.1', '$Hnew444.2', '$N_det446.3', '$450binary_subscr.6', '$456binary_multiply.9', '$466binary_subscr.14']
DEBUG 2022-01-28 15:49:33,959 dispatch pc=470, inst=INPLACE_ADD(arg=None, lineno=71)
DEBUG 2022-01-28 15:49:33,959 stack ['$phi444.0', '$phi444.1', '$Hnew444.2', '$N_det446.3', '$450binary_subscr.6', '$468binary_multiply.15']
DEBUG 2022-01-28 15:49:33,959 dispatch pc=472, inst=ROT_THREE(arg=None, lineno=71)
DEBUG 2022-01-28 15:49:33,959 stack ['$phi444.0', '$phi444.1', '$Hnew444.2', '$N_det446.3', '$470inplace_add.16']
DEBUG 2022-01-28 15:49:33,959 dispatch pc=474, inst=STORE_SUBSCR(arg=None, lineno=71)
DEBUG 2022-01-28 15:49:33,959 stack ['$phi444.0', '$phi444.1', '$470inplace_add.16', '$Hnew444.2', '$N_det446.3']
DEBUG 2022-01-28 15:49:33,959 dispatch pc=476, inst=JUMP_FORWARD(arg=28, lineno=71)
DEBUG 2022-01-28 15:49:33,959 stack ['$phi444.0', '$phi444.1']
DEBUG 2022-01-28 15:49:33,959 end state. edges=[Edge(pc=506, stack=('$phi444.0', '$phi444.1'), blockstack=(), npush=0)]
DEBUG 2022-01-28 15:49:33,959 pending: deque([State(pc_initial=478 nstack_initial=2), State(pc_initial=506 nstack_initial=2)])
DEBUG 2022-01-28 15:49:33,959 stack: ['$phi478.0', '$phi478.1']
DEBUG 2022-01-28 15:49:33,959 dispatch pc=478, inst=LOAD_FAST(arg=17, lineno=73)
DEBUG 2022-01-28 15:49:33,959 stack ['$phi478.0', '$phi478.1']
DEBUG 2022-01-28 15:49:33,959 dispatch pc=480, inst=LOAD_FAST(arg=30, lineno=73)
DEBUG 2022-01-28 15:49:33,959 stack ['$phi478.0', '$phi478.1', '$Hnew478.2']
DEBUG 2022-01-28 15:49:33,959 dispatch pc=482, inst=DUP_TOP_TWO(arg=None, lineno=73)
DEBUG 2022-01-28 15:49:33,959 stack ['$phi478.0', '$phi478.1', '$Hnew478.2', '$N_det480.3']
DEBUG 2022-01-28 15:49:33,959 dispatch pc=484, inst=BINARY_SUBSCR(arg=None, lineno=73)
DEBUG 2022-01-28 15:49:33,959 stack ['$phi478.0', '$phi478.1', '$Hnew478.2', '$N_det480.3', '$482dup_top_two.4', '$482dup_top_two.5']
DEBUG 2022-01-28 15:49:33,959 dispatch pc=486, inst=LOAD_FAST(arg=33, lineno=73)
DEBUG 2022-01-28 15:49:33,959 stack ['$phi478.0', '$phi478.1', '$Hnew478.2', '$N_det480.3', '$484binary_subscr.6']
DEBUG 2022-01-28 15:49:33,959 dispatch pc=488, inst=LOAD_FAST(arg=32, lineno=73)
DEBUG 2022-01-28 15:49:33,959 stack ['$phi478.0', '$phi478.1', '$Hnew478.2', '$N_det480.3', '$484binary_subscr.6', '$n_det_binom_prod486.7']
DEBUG 2022-01-28 15:49:33,959 dispatch pc=490, inst=BINARY_MULTIPLY(arg=None, lineno=73)
DEBUG 2022-01-28 15:49:33,959 stack ['$phi478.0', '$phi478.1', '$Hnew478.2', '$N_det480.3', '$484binary_subscr.6', '$n_det_binom_prod486.7', '$plus_minus488.8']
DEBUG 2022-01-28 15:49:33,959 dispatch pc=492, inst=LOAD_FAST(arg=29, lineno=73)
DEBUG 2022-01-28 15:49:33,959 stack ['$phi478.0', '$phi478.1', '$Hnew478.2', '$N_det480.3', '$484binary_subscr.6', '$490binary_multiply.9']
DEBUG 2022-01-28 15:49:33,959 dispatch pc=494, inst=LOAD_FAST(arg=31, lineno=73)
DEBUG 2022-01-28 15:49:33,959 stack ['$phi478.0', '$phi478.1', '$Hnew478.2', '$N_det480.3', '$484binary_subscr.6', '$490binary_multiply.9', '$f_odd492.10']
DEBUG 2022-01-28 15:49:33,959 dispatch pc=496, inst=BINARY_SUBSCR(arg=None, lineno=73)
DEBUG 2022-01-28 15:49:33,959 stack ['$phi478.0', '$phi478.1', '$Hnew478.2', '$N_det480.3', '$484binary_subscr.6', '$490binary_multiply.9', '$f_odd492.10', '$N494.11']
DEBUG 2022-01-28 15:49:33,959 dispatch pc=498, inst=BINARY_MULTIPLY(arg=None, lineno=73)
DEBUG 2022-01-28 15:49:33,959 stack ['$phi478.0', '$phi478.1', '$Hnew478.2', '$N_det480.3', '$484binary_subscr.6', '$490binary_multiply.9', '$496binary_subscr.12']
DEBUG 2022-01-28 15:49:33,959 dispatch pc=500, inst=INPLACE_ADD(arg=None, lineno=73)
DEBUG 2022-01-28 15:49:33,959 stack ['$phi478.0', '$phi478.1', '$Hnew478.2', '$N_det480.3', '$484binary_subscr.6', '$498binary_multiply.13']
DEBUG 2022-01-28 15:49:33,959 dispatch pc=502, inst=ROT_THREE(arg=None, lineno=73)
DEBUG 2022-01-28 15:49:33,959 stack ['$phi478.0', '$phi478.1', '$Hnew478.2', '$N_det480.3', '$500inplace_add.14']
DEBUG 2022-01-28 15:49:33,959 dispatch pc=504, inst=STORE_SUBSCR(arg=None, lineno=73)
DEBUG 2022-01-28 15:49:33,959 stack ['$phi478.0', '$phi478.1', '$500inplace_add.14', '$Hnew478.2', '$N_det480.3']
DEBUG 2022-01-28 15:49:33,959 end state. edges=[Edge(pc=506, stack=('$phi478.0', '$phi478.1'), blockstack=(), npush=0)]
DEBUG 2022-01-28 15:49:33,967 pending: deque([State(pc_initial=506 nstack_initial=2), State(pc_initial=506 nstack_initial=2)])
DEBUG 2022-01-28 15:49:33,967 stack: ['$phi506.0', '$phi506.1']
DEBUG 2022-01-28 15:49:33,967 dispatch pc=506, inst=JUMP_ABSOLUTE(arg=378, lineno=73)
DEBUG 2022-01-28 15:49:33,967 stack ['$phi506.0', '$phi506.1']
DEBUG 2022-01-28 15:49:33,967 end state. edges=[Edge(pc=378, stack=('$phi506.0', '$phi506.1'), blockstack=(), npush=0)]
DEBUG 2022-01-28 15:49:33,967 pending: deque([State(pc_initial=506 nstack_initial=2), State(pc_initial=378 nstack_initial=2)])
DEBUG 2022-01-28 15:49:33,967 pending: deque([State(pc_initial=378 nstack_initial=2)])
DEBUG 2022-01-28 15:49:33,967 -------------------------Prune PHIs-------------------------
DEBUG 2022-01-28 15:49:33,967 Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=158 nstack_initial=1): {'$phi158.0'},
             State(pc_initial=162 nstack_initial=2): {'$phi162.1'},
             State(pc_initial=228 nstack_initial=2): {'$phi228.1'},
             State(pc_initial=230 nstack_initial=3): {'$phi230.2'},
             State(pc_initial=258 nstack_initial=1): set(),
             State(pc_initial=264 nstack_initial=1): set(),
             State(pc_initial=278 nstack_initial=1): set(),
             State(pc_initial=282 nstack_initial=1): set(),
             State(pc_initial=378 nstack_initial=2): {'$phi378.1'},
             State(pc_initial=380 nstack_initial=3): {'$phi380.2'},
             State(pc_initial=444 nstack_initial=2): set(),
             State(pc_initial=478 nstack_initial=2): set(),
             State(pc_initial=506 nstack_initial=2): set(),
             State(pc_initial=510 nstack_initial=1): set(),
             State(pc_initial=520 nstack_initial=0): set(),
             State(pc_initial=526 nstack_initial=0): set(),
             State(pc_initial=540 nstack_initial=1): {'$phi540.0'},
             State(pc_initial=542 nstack_initial=2): {'$phi542.1'},
             State(pc_initial=580 nstack_initial=0): set()})
DEBUG 2022-01-28 15:49:33,967 defmap: {'$phi158.0': State(pc_initial=0 nstack_initial=0),
 '$phi162.1': State(pc_initial=158 nstack_initial=1),
 '$phi228.1': State(pc_initial=162 nstack_initial=2),
 '$phi230.2': State(pc_initial=228 nstack_initial=2),
 '$phi378.1': State(pc_initial=282 nstack_initial=1),
 '$phi380.2': State(pc_initial=378 nstack_initial=2),
 '$phi540.0': State(pc_initial=526 nstack_initial=0),
 '$phi542.1': State(pc_initial=540 nstack_initial=1)}
DEBUG 2022-01-28 15:49:33,969 phismap: defaultdict(<class 'set'>,
            {'$phi158.0': {('$156get_iter.68',
                            State(pc_initial=0 nstack_initial=0)),
                           ('$phi510.0',
                            State(pc_initial=510 nstack_initial=1))},
             '$phi162.0': {('$phi158.0',
                            State(pc_initial=158 nstack_initial=1))},
             '$phi162.1': {('$158for_iter.2',
                            State(pc_initial=158 nstack_initial=1))},
             '$phi228.0': {('$phi162.0',
                            State(pc_initial=162 nstack_initial=2)),
                           ('$phi230.0',
                            State(pc_initial=230 nstack_initial=3))},
             '$phi228.1': {('$226get_iter.29',
                            State(pc_initial=162 nstack_initial=2)),
                           ('$phi230.1',
                            State(pc_initial=230 nstack_initial=3))},
             '$phi230.0': {('$phi228.0',
                            State(pc_initial=228 nstack_initial=2))},
             '$phi230.1': {('$phi228.1',
                            State(pc_initial=228 nstack_initial=2))},
             '$phi230.2': {('$228for_iter.3',
                            State(pc_initial=228 nstack_initial=2))},
             '$phi258.0': {('$phi228.0',
                            State(pc_initial=228 nstack_initial=2))},
             '$phi264.0': {('$phi258.0',
                            State(pc_initial=258 nstack_initial=1))},
             '$phi278.0': {('$phi258.0',
                            State(pc_initial=258 nstack_initial=1))},
             '$phi282.0': {('$phi264.0',
                            State(pc_initial=264 nstack_initial=1)),
                           ('$phi278.0',
                            State(pc_initial=278 nstack_initial=1))},
             '$phi378.0': {('$phi282.0',
                            State(pc_initial=282 nstack_initial=1)),
                           ('$phi506.0',
                            State(pc_initial=506 nstack_initial=2))},
             '$phi378.1': {('$376get_iter.45',
                            State(pc_initial=282 nstack_initial=1)),
                           ('$phi506.1',
                            State(pc_initial=506 nstack_initial=2))},
             '$phi380.0': {('$phi378.0',
                            State(pc_initial=378 nstack_initial=2))},
             '$phi380.1': {('$phi378.1',
                            State(pc_initial=378 nstack_initial=2))},
             '$phi380.2': {('$378for_iter.3',
                            State(pc_initial=378 nstack_initial=2))},
             '$phi444.0': {('$phi380.0',
                            State(pc_initial=380 nstack_initial=3))},
             '$phi444.1': {('$phi380.1',
                            State(pc_initial=380 nstack_initial=3))},
             '$phi478.0': {('$phi380.0',
                            State(pc_initial=380 nstack_initial=3))},
             '$phi478.1': {('$phi380.1',
                            State(pc_initial=380 nstack_initial=3))},
             '$phi506.0': {('$phi444.0',
                            State(pc_initial=444 nstack_initial=2)),
                           ('$phi478.0',
                            State(pc_initial=478 nstack_initial=2))},
             '$phi506.1': {('$phi444.1',
                            State(pc_initial=444 nstack_initial=2)),
                           ('$phi478.1',
                            State(pc_initial=478 nstack_initial=2))},
             '$phi510.0': {('$phi378.0',
                            State(pc_initial=378 nstack_initial=2))},
             '$phi540.0': {('$538get_iter.6',
                            State(pc_initial=526 nstack_initial=0)),
                           ('$phi542.0',
                            State(pc_initial=542 nstack_initial=2))},
             '$phi542.0': {('$phi540.0',
                            State(pc_initial=540 nstack_initial=1))},
             '$phi542.1': {('$540for_iter.2',
                            State(pc_initial=540 nstack_initial=1))}})
DEBUG 2022-01-28 15:49:33,969 changing phismap: defaultdict(<class 'set'>,
            {'$phi158.0': {('$156get_iter.68',
                            State(pc_initial=0 nstack_initial=0)),
                           ('$phi378.0',
                            State(pc_initial=378 nstack_initial=2))},
             '$phi162.0': {('$156get_iter.68',
                            State(pc_initial=0 nstack_initial=0)),
                           ('$phi378.0',
                            State(pc_initial=378 nstack_initial=2))},
             '$phi162.1': {('$158for_iter.2',
                            State(pc_initial=158 nstack_initial=1))},
             '$phi228.0': {('$156get_iter.68',
                            State(pc_initial=0 nstack_initial=0)),
                           ('$phi228.0',
                            State(pc_initial=228 nstack_initial=2)),
                           ('$phi378.0',
                            State(pc_initial=378 nstack_initial=2))},
             '$phi228.1': {('$226get_iter.29',
                            State(pc_initial=162 nstack_initial=2)),
                           ('$phi228.1',
                            State(pc_initial=228 nstack_initial=2))},
             '$phi230.0': {('$156get_iter.68',
                            State(pc_initial=0 nstack_initial=0)),
                           ('$phi378.0',
                            State(pc_initial=378 nstack_initial=2))},
             '$phi230.1': {('$226get_iter.29',
                            State(pc_initial=162 nstack_initial=2))},
             '$phi230.2': {('$228for_iter.3',
                            State(pc_initial=228 nstack_initial=2))},
             '$phi258.0': {('$156get_iter.68',
                            State(pc_initial=0 nstack_initial=0)),
                           ('$phi378.0',
                            State(pc_initial=378 nstack_initial=2))},
             '$phi264.0': {('$156get_iter.68',
                            State(pc_initial=0 nstack_initial=0)),
                           ('$phi378.0',
                            State(pc_initial=378 nstack_initial=2))},
             '$phi278.0': {('$156get_iter.68',
                            State(pc_initial=0 nstack_initial=0)),
                           ('$phi378.0',
                            State(pc_initial=378 nstack_initial=2))},
             '$phi282.0': {('$156get_iter.68',
                            State(pc_initial=0 nstack_initial=0)),
                           ('$phi378.0',
                            State(pc_initial=378 nstack_initial=2))},
             '$phi378.0': {('$156get_iter.68',
                            State(pc_initial=0 nstack_initial=0)),
                           ('$phi378.0',
                            State(pc_initial=378 nstack_initial=2)),
                           ('$phi444.0',
                            State(pc_initial=444 nstack_initial=2)),
                           ('$phi478.0',
                            State(pc_initial=478 nstack_initial=2))},
             '$phi378.1': {('$376get_iter.45',
                            State(pc_initial=282 nstack_initial=1)),
                           ('$phi444.1',
                            State(pc_initial=444 nstack_initial=2)),
                           ('$phi478.1',
                            State(pc_initial=478 nstack_initial=2))},
             '$phi380.0': {('$156get_iter.68',
                            State(pc_initial=0 nstack_initial=0)),
                           ('$phi444.0',
                            State(pc_initial=444 nstack_initial=2)),
                           ('$phi478.0',
                            State(pc_initial=478 nstack_initial=2))},
             '$phi380.1': {('$376get_iter.45',
                            State(pc_initial=282 nstack_initial=1)),
                           ('$phi444.1',
                            State(pc_initial=444 nstack_initial=2)),
                           ('$phi478.1',
                            State(pc_initial=478 nstack_initial=2))},
             '$phi380.2': {('$378for_iter.3',
                            State(pc_initial=378 nstack_initial=2))},
             '$phi444.0': {('$156get_iter.68',
                            State(pc_initial=0 nstack_initial=0)),
                           ('$phi444.0',
                            State(pc_initial=444 nstack_initial=2)),
                           ('$phi478.0',
                            State(pc_initial=478 nstack_initial=2))},
             '$phi444.1': {('$376get_iter.45',
                            State(pc_initial=282 nstack_initial=1)),
                           ('$phi444.1',
                            State(pc_initial=444 nstack_initial=2)),
                           ('$phi478.1',
                            State(pc_initial=478 nstack_initial=2))},
             '$phi478.0': {('$156get_iter.68',
                            State(pc_initial=0 nstack_initial=0)),
                           ('$phi444.0',
                            State(pc_initial=444 nstack_initial=2)),
                           ('$phi478.0',
                            State(pc_initial=478 nstack_initial=2))},
             '$phi478.1': {('$376get_iter.45',
                            State(pc_initial=282 nstack_initial=1)),
                           ('$phi444.1',
                            State(pc_initial=444 nstack_initial=2)),
                           ('$phi478.1',
                            State(pc_initial=478 nstack_initial=2))},
             '$phi506.0': {('$156get_iter.68',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi506.1': {('$376get_iter.45',
                            State(pc_initial=282 nstack_initial=1))},
             '$phi510.0': {('$156get_iter.68',
                            State(pc_initial=0 nstack_initial=0)),
                           ('$phi444.0',
                            State(pc_initial=444 nstack_initial=2)),
                           ('$phi478.0',
                            State(pc_initial=478 nstack_initial=2))},
             '$phi540.0': {('$538get_iter.6',
                            State(pc_initial=526 nstack_initial=0)),
                           ('$phi540.0',
                            State(pc_initial=540 nstack_initial=1))},
             '$phi542.0': {('$538get_iter.6',
                            State(pc_initial=526 nstack_initial=0))},
             '$phi542.1': {('$540for_iter.2',
                            State(pc_initial=540 nstack_initial=1))}})
DEBUG 2022-01-28 15:49:33,969 changing phismap: defaultdict(<class 'set'>,
            {'$phi158.0': {('$156get_iter.68',
                            State(pc_initial=0 nstack_initial=0)),
                           ('$phi444.0',
                            State(pc_initial=444 nstack_initial=2)),
                           ('$phi478.0',
                            State(pc_initial=478 nstack_initial=2))},
             '$phi162.0': {('$156get_iter.68',
                            State(pc_initial=0 nstack_initial=0)),
                           ('$phi444.0',
                            State(pc_initial=444 nstack_initial=2)),
                           ('$phi478.0',
                            State(pc_initial=478 nstack_initial=2))},
             '$phi162.1': {('$158for_iter.2',
                            State(pc_initial=158 nstack_initial=1))},
             '$phi228.0': {('$156get_iter.68',
                            State(pc_initial=0 nstack_initial=0)),
                           ('$phi444.0',
                            State(pc_initial=444 nstack_initial=2)),
                           ('$phi478.0',
                            State(pc_initial=478 nstack_initial=2))},
             '$phi228.1': {('$226get_iter.29',
                            State(pc_initial=162 nstack_initial=2))},
             '$phi230.0': {('$156get_iter.68',
                            State(pc_initial=0 nstack_initial=0)),
                           ('$phi444.0',
                            State(pc_initial=444 nstack_initial=2)),
                           ('$phi478.0',
                            State(pc_initial=478 nstack_initial=2))},
             '$phi230.1': {('$226get_iter.29',
                            State(pc_initial=162 nstack_initial=2))},
             '$phi230.2': {('$228for_iter.3',
                            State(pc_initial=228 nstack_initial=2))},
             '$phi258.0': {('$156get_iter.68',
                            State(pc_initial=0 nstack_initial=0)),
                           ('$phi444.0',
                            State(pc_initial=444 nstack_initial=2)),
                           ('$phi478.0',
                            State(pc_initial=478 nstack_initial=2))},
             '$phi264.0': {('$156get_iter.68',
                            State(pc_initial=0 nstack_initial=0)),
                           ('$phi444.0',
                            State(pc_initial=444 nstack_initial=2)),
                           ('$phi478.0',
                            State(pc_initial=478 nstack_initial=2))},
             '$phi278.0': {('$156get_iter.68',
                            State(pc_initial=0 nstack_initial=0)),
                           ('$phi444.0',
                            State(pc_initial=444 nstack_initial=2)),
                           ('$phi478.0',
                            State(pc_initial=478 nstack_initial=2))},
             '$phi282.0': {('$156get_iter.68',
                            State(pc_initial=0 nstack_initial=0)),
                           ('$phi444.0',
                            State(pc_initial=444 nstack_initial=2)),
                           ('$phi478.0',
                            State(pc_initial=478 nstack_initial=2))},
             '$phi378.0': {('$156get_iter.68',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi378.1': {('$376get_iter.45',
                            State(pc_initial=282 nstack_initial=1))},
             '$phi380.0': {('$156get_iter.68',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi380.1': {('$376get_iter.45',
                            State(pc_initial=282 nstack_initial=1))},
             '$phi380.2': {('$378for_iter.3',
                            State(pc_initial=378 nstack_initial=2))},
             '$phi444.0': {('$156get_iter.68',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi444.1': {('$376get_iter.45',
                            State(pc_initial=282 nstack_initial=1))},
             '$phi478.0': {('$156get_iter.68',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi478.1': {('$376get_iter.45',
                            State(pc_initial=282 nstack_initial=1))},
             '$phi506.0': {('$156get_iter.68',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi506.1': {('$376get_iter.45',
                            State(pc_initial=282 nstack_initial=1))},
             '$phi510.0': {('$156get_iter.68',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi540.0': {('$538get_iter.6',
                            State(pc_initial=526 nstack_initial=0))},
             '$phi542.0': {('$538get_iter.6',
                            State(pc_initial=526 nstack_initial=0))},
             '$phi542.1': {('$540for_iter.2',
                            State(pc_initial=540 nstack_initial=1))}})
DEBUG 2022-01-28 15:49:33,969 changing phismap: defaultdict(<class 'set'>,
            {'$phi158.0': {('$156get_iter.68',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi162.0': {('$156get_iter.68',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi162.1': {('$158for_iter.2',
                            State(pc_initial=158 nstack_initial=1))},
             '$phi228.0': {('$156get_iter.68',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi228.1': {('$226get_iter.29',
                            State(pc_initial=162 nstack_initial=2))},
             '$phi230.0': {('$156get_iter.68',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi230.1': {('$226get_iter.29',
                            State(pc_initial=162 nstack_initial=2))},
             '$phi230.2': {('$228for_iter.3',
                            State(pc_initial=228 nstack_initial=2))},
             '$phi258.0': {('$156get_iter.68',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi264.0': {('$156get_iter.68',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi278.0': {('$156get_iter.68',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi282.0': {('$156get_iter.68',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi378.0': {('$156get_iter.68',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi378.1': {('$376get_iter.45',
                            State(pc_initial=282 nstack_initial=1))},
             '$phi380.0': {('$156get_iter.68',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi380.1': {('$376get_iter.45',
                            State(pc_initial=282 nstack_initial=1))},
             '$phi380.2': {('$378for_iter.3',
                            State(pc_initial=378 nstack_initial=2))},
             '$phi444.0': {('$156get_iter.68',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi444.1': {('$376get_iter.45',
                            State(pc_initial=282 nstack_initial=1))},
             '$phi478.0': {('$156get_iter.68',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi478.1': {('$376get_iter.45',
                            State(pc_initial=282 nstack_initial=1))},
             '$phi506.0': {('$156get_iter.68',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi506.1': {('$376get_iter.45',
                            State(pc_initial=282 nstack_initial=1))},
             '$phi510.0': {('$156get_iter.68',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi540.0': {('$538get_iter.6',
                            State(pc_initial=526 nstack_initial=0))},
             '$phi542.0': {('$538get_iter.6',
                            State(pc_initial=526 nstack_initial=0))},
             '$phi542.1': {('$540for_iter.2',
                            State(pc_initial=540 nstack_initial=1))}})
DEBUG 2022-01-28 15:49:33,969 changing phismap: defaultdict(<class 'set'>,
            {'$phi158.0': {('$156get_iter.68',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi162.0': {('$156get_iter.68',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi162.1': {('$158for_iter.2',
                            State(pc_initial=158 nstack_initial=1))},
             '$phi228.0': {('$156get_iter.68',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi228.1': {('$226get_iter.29',
                            State(pc_initial=162 nstack_initial=2))},
             '$phi230.0': {('$156get_iter.68',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi230.1': {('$226get_iter.29',
                            State(pc_initial=162 nstack_initial=2))},
             '$phi230.2': {('$228for_iter.3',
                            State(pc_initial=228 nstack_initial=2))},
             '$phi258.0': {('$156get_iter.68',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi264.0': {('$156get_iter.68',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi278.0': {('$156get_iter.68',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi282.0': {('$156get_iter.68',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi378.0': {('$156get_iter.68',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi378.1': {('$376get_iter.45',
                            State(pc_initial=282 nstack_initial=1))},
             '$phi380.0': {('$156get_iter.68',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi380.1': {('$376get_iter.45',
                            State(pc_initial=282 nstack_initial=1))},
             '$phi380.2': {('$378for_iter.3',
                            State(pc_initial=378 nstack_initial=2))},
             '$phi444.0': {('$156get_iter.68',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi444.1': {('$376get_iter.45',
                            State(pc_initial=282 nstack_initial=1))},
             '$phi478.0': {('$156get_iter.68',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi478.1': {('$376get_iter.45',
                            State(pc_initial=282 nstack_initial=1))},
             '$phi506.0': {('$156get_iter.68',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi506.1': {('$376get_iter.45',
                            State(pc_initial=282 nstack_initial=1))},
             '$phi510.0': {('$156get_iter.68',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi540.0': {('$538get_iter.6',
                            State(pc_initial=526 nstack_initial=0))},
             '$phi542.0': {('$538get_iter.6',
                            State(pc_initial=526 nstack_initial=0))},
             '$phi542.1': {('$540for_iter.2',
                            State(pc_initial=540 nstack_initial=1))}})
DEBUG 2022-01-28 15:49:33,977 keep phismap: {'$phi158.0': {('$156get_iter.68', State(pc_initial=0 nstack_initial=0))},
 '$phi162.1': {('$158for_iter.2', State(pc_initial=158 nstack_initial=1))},
 '$phi228.1': {('$226get_iter.29', State(pc_initial=162 nstack_initial=2))},
 '$phi230.2': {('$228for_iter.3', State(pc_initial=228 nstack_initial=2))},
 '$phi378.1': {('$376get_iter.45', State(pc_initial=282 nstack_initial=1))},
 '$phi380.2': {('$378for_iter.3', State(pc_initial=378 nstack_initial=2))},
 '$phi540.0': {('$538get_iter.6', State(pc_initial=526 nstack_initial=0))},
 '$phi542.1': {('$540for_iter.2', State(pc_initial=540 nstack_initial=1))}}
DEBUG 2022-01-28 15:49:33,977 new_out: defaultdict(<class 'dict'>,
            {State(pc_initial=0 nstack_initial=0): {'$phi158.0': '$156get_iter.68'},
             State(pc_initial=158 nstack_initial=1): {'$phi162.1': '$158for_iter.2'},
             State(pc_initial=162 nstack_initial=2): {'$phi228.1': '$226get_iter.29'},
             State(pc_initial=228 nstack_initial=2): {'$phi230.2': '$228for_iter.3'},
             State(pc_initial=282 nstack_initial=1): {'$phi378.1': '$376get_iter.45'},
             State(pc_initial=378 nstack_initial=2): {'$phi380.2': '$378for_iter.3'},
             State(pc_initial=526 nstack_initial=0): {'$phi540.0': '$538get_iter.6'},
             State(pc_initial=540 nstack_initial=1): {'$phi542.1': '$540for_iter.2'}})
DEBUG 2022-01-28 15:49:33,979 ----------------------DONE Prune PHIs-----------------------
DEBUG 2022-01-28 15:49:33,979 block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$D2.0'}), (4, {'res': '$const4.1'}), (6, {'index': '$const4.1', 'target': '$D2.0', 'res': '$6binary_subscr.2'}), (8, {'value': '$6binary_subscr.2'}), (10, {'res': '$A10.3'}), (12, {'res': '$const12.4'}), (14, {'res': '$const14.5'}), (16, {'res': '$const16.6'}), (18, {'start': '$const14.5', 'stop': '$const16.6', 'step': None, 'res': '$18build_slice.8', 'slicevar': '$18build_slice.7'}), (20, {'items': ['$const12.4', '$18build_slice.8'], 'res': '$20build_tuple.9'}), (22, {'index': '$20build_tuple.9', 'target': '$A10.3', 'res': '$22binary_subscr.10'}), (24, {'value': '$22binary_subscr.10'}), (26, {'res': '$A26.11'}), (28, {'item': '$A26.11', 'res': '$28load_attr.12'}), (30, {'res': '$const30.13'}), (32, {'index': '$const30.13', 'target': '$28load_attr.12', 'res': '$32binary_subscr.14'}), (34, {'value': '$32binary_subscr.14'}), (36, {'res': '$const36.15'}), (38, {'res': '$fixed_edge_reps38.16'}), (40, {'item': '$fixed_edge_reps38.16', 'res': '$40load_method.17'}), (42, {'func': '$40load_method.17', 'args': [], 'res': '$42call_method.18'}), (44, {'lhs': '$const36.15', 'rhs': '$42call_method.18', 'res': '$44binary_multiply.19'}), (46, {'value': '$44binary_multiply.19'}), (48, {'res': '$N_fixed48.20'}), (50, {'res': '$const50.21'}), (52, {'res': '$batch_max52.22'}), (54, {'lhs': '$const50.21', 'rhs': '$batch_max52.22', 'res': '$54binary_multiply.23'}), (56, {'lhs': '$N_fixed48.20', 'rhs': '$54binary_multiply.23', 'res': '$56binary_add.24'}), (58, {'res': '$odd_cutoff58.25'}), (60, {'lhs': '$56binary_add.24', 'rhs': '$odd_cutoff58.25', 'res': '$60binary_add.26'}), (62, {'value': '$60binary_add.26'}), (64, {'res': '$64load_global.27'}), (66, {'item': '$64load_global.27', 'res': '$66load_method.28'}), (68, {'res': '$68load_global.29'}), (70, {'item': '$68load_global.29', 'res': '$70load_method.30'}), (72, {'res': '$batch_max72.31'}), (74, {'items': ['$batch_max72.31'], 'res': '$74build_list.32'}), (76, {'func': '$70load_method.30', 'args': ['$74build_list.32'], 'res': '$76call_method.33'}), (78, {'res': '$fixed_edge_reps78.34'}), (80, {'items': ['$76call_method.33', '$fixed_edge_reps78.34'], 'res': '$80build_tuple.35'}), (82, {'func': '$66load_method.28', 'args': ['$80build_tuple.35'], 'res': '$82call_method.36'}), (84, {'value': '$82call_method.36'}), (86, {'res': '$86load_global.37'}), (88, {'item': '$86load_global.37', 'res': '$88load_method.38'}), (90, {'res': '$edge_reps90.39'}), (92, {'res': '$const92.40'}), (94, {'lhs': '$edge_reps90.39', 'rhs': '$const92.40', 'res': '$94binary_add.41'}), (96, {'func': '$88load_method.38', 'args': ['$94binary_add.41'], 'res': '$96call_method.42'}), (98, {'value': '$96call_method.42'}), (100, {'res': '$edge_reps100.43'}), (102, {'item': '$edge_reps100.43', 'res': '$102load_method.44'}), (104, {'func': '$102load_method.44', 'args': [], 'res': '$104call_method.45'}), (106, {'res': '$odd_cutoff106.46'}), (108, {'lhs': '$104call_method.45', 'rhs': '$odd_cutoff106.46', 'res': '$108binary_add.47'}), (110, {'value': '$108binary_add.47'}), (112, {'res': '$112load_global.48'}), (114, {'res': '$max_binom114.49'}), (116, {'func': '$112load_global.48', 'args': ['$max_binom114.49'], 'res': '$116call_function.50'}), (118, {'value': '$116call_function.50'}), (120, {'res': '$120load_global.51'}), (122, {'item': '$120load_global.51', 'res': '$122load_attr.52'}), (124, {'res': '$const124.53'}), (126, {'res': '$batch_max126.54'}), (128, {'lhs': '$const124.53', 'rhs': '$batch_max126.54', 'res': '$128binary_multiply.55'}), (130, {'res': '$odd_cutoff130.56'}), (132, {'lhs': '$128binary_multiply.55', 'rhs': '$odd_cutoff130.56', 'res': '$132binary_add.57'}), (134, {'res': '$const134.58'}), (136, {'lhs': '$132binary_add.57', 'rhs': '$const134.58', 'res': '$136binary_add.59'}), (138, {'res': '$138load_global.60'}), (140, {'item': '$138load_global.60', 'res': '$140load_attr.61'}), (142, {'res': '$const142.62'}), (144, {'func': '$122load_attr.52', 'args': ['$136binary_add.59', '$140load_attr.61'], 'names': '$const142.62', 'res': '$144call_function_kw.63'}), (146, {'value': '$144call_function_kw.63'}), (148, {'res': '$148load_global.64'}), (150, {'item': '$148load_global.64', 'res': '$150load_method.65'}), (152, {'res': '$steps152.66'}), (154, {'func': '$150load_method.65', 'args': ['$steps152.66'], 'res': '$154call_method.67'}), (156, {'value': '$154call_method.67', 'res': '$156get_iter.68'})), outgoing_phis={'$phi158.0': '$156get_iter.68'}, blockstack=(), active_try_block=None, outgoing_edgepushed={158: ('$156get_iter.68',)})
DEBUG 2022-01-28 15:49:33,979 block_infos State(pc_initial=158 nstack_initial=1):
AdaptBlockInfo(insts=((158, {'iterator': '$phi158.0', 'pair': '$158for_iter.1', 'indval': '$158for_iter.2', 'pred': '$158for_iter.3'}),), outgoing_phis={'$phi162.1': '$158for_iter.2'}, blockstack=(), active_try_block=None, outgoing_edgepushed={520: (), 162: ('$phi158.0', '$158for_iter.2')})
DEBUG 2022-01-28 15:49:33,979 block_infos State(pc_initial=162 nstack_initial=2):
AdaptBlockInfo(insts=((162, {'value': '$phi162.1'}), (164, {'res': '$164load_global.2'}), (166, {'item': '$164load_global.2', 'res': '$166load_attr.3'}), (168, {'res': '$const168.4'}), (170, {'res': '$batch_max170.5'}), (172, {'lhs': '$const168.4', 'rhs': '$batch_max170.5', 'res': '$172binary_multiply.6'}), (174, {'res': '$odd_cutoff174.7'}), (176, {'lhs': '$172binary_multiply.6', 'rhs': '$odd_cutoff174.7', 'res': '$176binary_add.8'}), (178, {'res': '$const178.9'}), (180, {'lhs': '$176binary_add.8', 'rhs': '$const178.9', 'res': '$180binary_add.10'}), (182, {'res': '$182load_global.11'}), (184, {'item': '$182load_global.11', 'res': '$184load_attr.12'}), (186, {'res': '$const186.13'}), (188, {'func': '$166load_attr.3', 'args': ['$180binary_add.10', '$184load_attr.12'], 'names': '$const186.13', 'res': '$188call_function_kw.14'}), (190, {'value': '$188call_function_kw.14'}), (192, {'res': '$192load_global.15'}), (194, {'res': '$j194.16'}), (196, {'res': '$edge_reps196.17'}), (198, {'func': '$192load_global.15', 'args': ['$j194.16', '$edge_reps196.17'], 'res': '$198call_function.18'}), (200, {'value': '$198call_function.18'}), (202, {'res': '$kept_edges202.19'}), (204, {'item': '$kept_edges202.19', 'res': '$204load_method.20'}), (206, {'func': '$204load_method.20', 'args': [], 'res': '$206call_method.21'}), (208, {'value': '$206call_method.21'}), (210, {'res': '$const210.22'}), (212, {'value': '$const210.22'}), (214, {'res': '$214load_global.23'}), (216, {'res': '$const216.24'}), (218, {'res': '$n218.25'}), (220, {'res': '$const220.26'}), (222, {'lhs': '$n218.25', 'rhs': '$const220.26', 'res': '$222binary_floor_divide.27'}), (224, {'func': '$214load_global.23', 'args': ['$const216.24', '$222binary_floor_divide.27'], 'res': '$224call_function.28'}), (226, {'value': '$224call_function.28', 'res': '$226get_iter.29'})), outgoing_phis={'$phi228.1': '$226get_iter.29'}, blockstack=(), active_try_block=None, outgoing_edgepushed={228: ('$phi162.0', '$226get_iter.29')})
DEBUG 2022-01-28 15:49:33,979 block_infos State(pc_initial=228 nstack_initial=2):
AdaptBlockInfo(insts=((228, {'iterator': '$phi228.1', 'pair': '$228for_iter.2', 'indval': '$228for_iter.3', 'pred': '$228for_iter.4'}),), outgoing_phis={'$phi230.2': '$228for_iter.3'}, blockstack=(), active_try_block=None, outgoing_edgepushed={258: ('$phi228.0',), 230: ('$phi228.0', '$phi228.1', '$228for_iter.3')})
DEBUG 2022-01-28 15:49:33,979 block_infos State(pc_initial=230 nstack_initial=3):
AdaptBlockInfo(insts=((230, {'value': '$phi230.2'}), (232, {'res': '$binom_prod232.3'}), (234, {'res': '$binoms234.4'}), (236, {'res': '$edge_reps236.5'}), (238, {'res': '$i238.6'}), (240, {'index': '$i238.6', 'target': '$edge_reps236.5', 'res': '$240binary_subscr.7'}), (242, {'res': '$kept_edges242.8'}), (244, {'res': '$i244.9'}), (246, {'index': '$i244.9', 'target': '$kept_edges242.8', 'res': '$246binary_subscr.10'}), (248, {'items': ['$240binary_subscr.7', '$246binary_subscr.10'], 'res': '$248build_tuple.11'}), (250, {'index': '$248build_tuple.11', 'target': '$binoms234.4', 'res': '$250binary_subscr.12'}), (252, {'lhs': '$binom_prod232.3', 'rhs': '$250binary_subscr.12', 'res': '$252inplace_multiply.13'}), (254, {'value': '$252inplace_multiply.13'}), (256, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={228: ('$phi230.0', '$phi230.1')})
DEBUG 2022-01-28 15:49:33,979 block_infos State(pc_initial=258 nstack_initial=1):
AdaptBlockInfo(insts=((258, {'res': '$glynn258.1'}), (260, {'pred': '$glynn258.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={264: ('$phi258.0',), 278: ('$phi258.0',)})
DEBUG 2022-01-28 15:49:33,979 block_infos State(pc_initial=264 nstack_initial=1):
AdaptBlockInfo(insts=((264, {'res': '$const264.1'}), (266, {'res': '$kept_edges266.2'}), (268, {'lhs': '$const264.1', 'rhs': '$kept_edges266.2', 'res': '$268binary_multiply.3'}), (270, {'res': '$edge_reps270.4'}), (272, {'lhs': '$268binary_multiply.3', 'rhs': '$edge_reps270.4', 'res': '$272binary_subtract.5'}), (274, {'value': '$272binary_subtract.5'}), (276, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={282: ('$phi264.0',)})
DEBUG 2022-01-28 15:49:33,979 block_infos State(pc_initial=278 nstack_initial=1):
AdaptBlockInfo(insts=((278, {'res': '$kept_edges278.1'}), (280, {'value': '$kept_edges278.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={282: ('$phi278.0',)})
DEBUG 2022-01-28 15:49:33,979 block_infos State(pc_initial=282 nstack_initial=1):
AdaptBlockInfo(insts=((282, {'res': '$282load_global.1'}), (284, {'res': '$delta284.2'}), (286, {'res': '$A286.3'}), (288, {'res': '$D288.4'}), (290, {'res': '$oddV290.5'}), (292, {'func': '$282load_global.1', 'args': ['$delta284.2', '$A286.3', '$D288.4', '$oddV290.5'], 'res': '$292call_function.6'}), (294, {'iterable': '$292call_function.6', 'stores': ['$294unpack_sequence.7', '$294unpack_sequence.8', '$294unpack_sequence.9', '$294unpack_sequence.10'], 'tupleobj': '$294unpack_sequence.11'}), (296, {'value': '$294unpack_sequence.7'}), (298, {'value': '$294unpack_sequence.8'}), (300, {'value': '$294unpack_sequence.9'}), (302, {'value': '$294unpack_sequence.10'}), (304, {'res': '$304load_global.12'}), (306, {'res': '$AX_S306.13'}), (308, {'func': '$304load_global.12', 'args': ['$AX_S306.13'], 'res': '$308call_function.14'}), (310, {'value': '$308call_function.14'}), (312, {'res': '$312load_global.15'}), (314, {'res': '$E314.16'}), (316, {'res': '$AX_S316.17'}), (318, {'res': '$XD_S318.18'}), (320, {'res': '$D_S320.19'}), (322, {'res': '$N_max322.20'}), (324, {'func': '$312load_global.15', 'args': ['$E314.16', '$AX_S316.17', '$XD_S318.18', '$D_S320.19', '$N_max322.20'], 'res': '$324call_function.21'}), (326, {'value': '$324call_function.21'}), (328, {'res': '$328load_global.22'}), (330, {'res': '$E330.23'}), (332, {'res': '$AX_S332.24'}), (334, {'res': '$XD_S334.25'}), (336, {'res': '$D_S336.26'}), (338, {'res': '$N_max338.27'}), (340, {'res': '$oddloop340.28'}), (342, {'res': '$oddVX_S342.29'}), (344, {'func': '$328load_global.22', 'args': ['$E330.23', '$AX_S332.24', '$XD_S334.25', '$D_S336.26', '$N_max338.27', '$oddloop340.28', '$oddVX_S342.29'], 'res': '$344call_function.30'}), (346, {'value': '$344call_function.30'}), (348, {'res': '$348load_global.31'}), (350, {'res': '$const350.32'}), (352, {'res': '$kept_edges352.33'}), (354, {'res': '$const354.34'}), (356, {'index': '$const354.34', 'target': '$kept_edges352.33', 'res': '$356binary_subscr.35'}), (358, {'lhs': '$const350.32', 'rhs': '$356binary_subscr.35', 'res': '$358binary_multiply.36'}), (360, {'res': '$const360.37'}), (362, {'res': '$batch_max362.38'}), (364, {'lhs': '$const360.37', 'rhs': '$batch_max362.38', 'res': '$364binary_multiply.39'}), (366, {'res': '$odd_cutoff366.40'}), (368, {'lhs': '$364binary_multiply.39', 'rhs': '$odd_cutoff366.40', 'res': '$368binary_add.41'}), (370, {'res': '$const370.42'}), (372, {'lhs': '$368binary_add.41', 'rhs': '$const370.42', 'res': '$372binary_add.43'}), (374, {'func': '$348load_global.31', 'args': ['$358binary_multiply.36', '$372binary_add.43'], 'res': '$374call_function.44'}), (376, {'value': '$374call_function.44', 'res': '$376get_iter.45'})), outgoing_phis={'$phi378.1': '$376get_iter.45'}, blockstack=(), active_try_block=None, outgoing_edgepushed={378: ('$phi282.0', '$376get_iter.45')})
DEBUG 2022-01-28 15:49:33,979 block_infos State(pc_initial=378 nstack_initial=2):
AdaptBlockInfo(insts=((378, {'iterator': '$phi378.1', 'pair': '$378for_iter.2', 'indval': '$378for_iter.3', 'pred': '$378for_iter.4'}),), outgoing_phis={'$phi380.2': '$378for_iter.3'}, blockstack=(), active_try_block=None, outgoing_edgepushed={510: ('$phi378.0',), 380: ('$phi378.0', '$phi378.1', '$378for_iter.3')})
DEBUG 2022-01-28 15:49:33,979 block_infos State(pc_initial=380 nstack_initial=3):
AdaptBlockInfo(insts=((380, {'value': '$phi380.2'}), (382, {'res': '$N_fixed382.3'}), (384, {'res': '$N_det384.4'}), (386, {'lhs': '$N_fixed382.3', 'rhs': '$N_det384.4', 'res': '$386binary_add.5'}), (388, {'value': '$386binary_add.5'}), (390, {'res': '$const390.6'}), (392, {'res': '$N392.7'}), (394, {'res': '$const394.8'}), (396, {'lhs': '$N392.7', 'rhs': '$const394.8', 'res': '$396binary_floor_divide.9'}), (398, {'res': '$edges_sum398.10'}), (400, {'lhs': '$396binary_floor_divide.9', 'rhs': '$edges_sum398.10', 'res': '$400binary_subtract.11'}), (402, {'lhs': '$const390.6', 'rhs': '$400binary_subtract.11', 'res': '$402binary_power.12'}), (404, {'value': '$402binary_power.12'}), (406, {'res': '$binoms406.13'}), (408, {'res': '$N_det408.14'}), (410, {'res': '$const410.15'}), (412, {'lhs': '$N_det408.14', 'rhs': '$const410.15', 'res': '$412binary_floor_divide.16'}), (414, {'res': '$kept_edges414.17'}), (416, {'res': '$const416.18'}), (418, {'index': '$const416.18', 'target': '$kept_edges414.17', 'res': '$418binary_subscr.19'}), (420, {'items': ['$412binary_floor_divide.16', '$418binary_subscr.19'], 'res': '$420build_tuple.20'}), (422, {'index': '$420build_tuple.20', 'target': '$binoms406.13', 'res': '$422binary_subscr.21'}), (424, {'res': '$binom_prod424.22'}), (426, {'lhs': '$422binary_subscr.21', 'rhs': '$binom_prod424.22', 'res': '$426binary_multiply.23'}), (428, {'value': '$426binary_multiply.23'}), (430, {'res': '$N_det430.24'}), (432, {'res': '$const432.25'}), (434, {'lhs': '$N_det430.24', 'rhs': '$const432.25', 'res': '$434binary_modulo.26'}), (436, {'res': '$const436.27'}), (438, {'lhs': '$434binary_modulo.26', 'rhs': '$const436.27', 'res': '$438compare_op.28'}), (440, {'pred': '$438compare_op.28'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={444: ('$phi380.0', '$phi380.1'), 478: ('$phi380.0', '$phi380.1')})
DEBUG 2022-01-28 15:49:33,979 block_infos State(pc_initial=444 nstack_initial=2):
AdaptBlockInfo(insts=((444, {'res': '$Hnew444.2'}), (446, {'res': '$N_det446.3'}), (448, {'orig': ['$Hnew444.2', '$N_det446.3'], 'duped': ['$448dup_top_two.4', '$448dup_top_two.5']}), (450, {'index': '$448dup_top_two.5', 'target': '$448dup_top_two.4', 'res': '$450binary_subscr.6'}), (452, {'res': '$n_det_binom_prod452.7'}), (454, {'res': '$plus_minus454.8'}), (456, {'lhs': '$n_det_binom_prod452.7', 'rhs': '$plus_minus454.8', 'res': '$456binary_multiply.9'}), (458, {'res': '$f_even458.10'}), (460, {'res': '$N460.11'}), (462, {'res': '$const462.12'}), (464, {'lhs': '$N460.11', 'rhs': '$const462.12', 'res': '$464binary_floor_divide.13'}), (466, {'index': '$464binary_floor_divide.13', 'target': '$f_even458.10', 'res': '$466binary_subscr.14'}), (468, {'lhs': '$456binary_multiply.9', 'rhs': '$466binary_subscr.14', 'res': '$468binary_multiply.15'}), (470, {'lhs': '$450binary_subscr.6', 'rhs': '$468binary_multiply.15', 'res': '$470inplace_add.16'}), (474, {'target': '$Hnew444.2', 'index': '$N_det446.3', 'value': '$470inplace_add.16'}), (476, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={506: ('$phi444.0', '$phi444.1')})
DEBUG 2022-01-28 15:49:33,979 block_infos State(pc_initial=478 nstack_initial=2):
AdaptBlockInfo(insts=((478, {'res': '$Hnew478.2'}), (480, {'res': '$N_det480.3'}), (482, {'orig': ['$Hnew478.2', '$N_det480.3'], 'duped': ['$482dup_top_two.4', '$482dup_top_two.5']}), (484, {'index': '$482dup_top_two.5', 'target': '$482dup_top_two.4', 'res': '$484binary_subscr.6'}), (486, {'res': '$n_det_binom_prod486.7'}), (488, {'res': '$plus_minus488.8'}), (490, {'lhs': '$n_det_binom_prod486.7', 'rhs': '$plus_minus488.8', 'res': '$490binary_multiply.9'}), (492, {'res': '$f_odd492.10'}), (494, {'res': '$N494.11'}), (496, {'index': '$N494.11', 'target': '$f_odd492.10', 'res': '$496binary_subscr.12'}), (498, {'lhs': '$490binary_multiply.9', 'rhs': '$496binary_subscr.12', 'res': '$498binary_multiply.13'}), (500, {'lhs': '$484binary_subscr.6', 'rhs': '$498binary_multiply.13', 'res': '$500inplace_add.14'}), (504, {'target': '$Hnew478.2', 'index': '$N_det480.3', 'value': '$500inplace_add.14'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={506: ('$phi478.0', '$phi478.1')})
DEBUG 2022-01-28 15:49:33,979 block_infos State(pc_initial=506 nstack_initial=2):
AdaptBlockInfo(insts=((506, {}),), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={378: ('$phi506.0', '$phi506.1')})
DEBUG 2022-01-28 15:49:33,979 block_infos State(pc_initial=510 nstack_initial=1):
AdaptBlockInfo(insts=((510, {'res': '$H_batch510.1'}), (512, {'res': '$Hnew512.2'}), (514, {'lhs': '$H_batch510.1', 'rhs': '$Hnew512.2', 'res': '$514inplace_add.3'}), (516, {'value': '$514inplace_add.3'}), (518, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={158: ('$phi510.0',)})
DEBUG 2022-01-28 15:49:33,979 block_infos State(pc_initial=520 nstack_initial=0):
AdaptBlockInfo(insts=((520, {'res': '$glynn520.0'}), (522, {'pred': '$glynn520.0'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={526: (), 580: ()})
DEBUG 2022-01-28 15:49:33,979 block_infos State(pc_initial=526 nstack_initial=0):
AdaptBlockInfo(insts=((526, {'res': '$526load_global.0'}), (528, {'res': '$H_batch528.1'}), (530, {'item': '$H_batch528.1', 'res': '$530load_attr.2'}), (532, {'res': '$const532.3'}), (534, {'index': '$const532.3', 'target': '$530load_attr.2', 'res': '$534binary_subscr.4'}), (536, {'func': '$526load_global.0', 'args': ['$534binary_subscr.4'], 'res': '$536call_function.5'}), (538, {'value': '$536call_function.5', 'res': '$538get_iter.6'})), outgoing_phis={'$phi540.0': '$538get_iter.6'}, blockstack=(), active_try_block=None, outgoing_edgepushed={540: ('$538get_iter.6',)})
DEBUG 2022-01-28 15:49:33,979 block_infos State(pc_initial=540 nstack_initial=1):
AdaptBlockInfo(insts=((540, {'iterator': '$phi540.0', 'pair': '$540for_iter.1', 'indval': '$540for_iter.2', 'pred': '$540for_iter.3'}),), outgoing_phis={'$phi542.1': '$540for_iter.2'}, blockstack=(), active_try_block=None, outgoing_edgepushed={580: (), 542: ('$phi540.0', '$540for_iter.2')})
DEBUG 2022-01-28 15:49:33,979 block_infos State(pc_initial=542 nstack_initial=2):
AdaptBlockInfo(insts=((542, {'value': '$phi542.1'}), (544, {'res': '$N_fixed544.2'}), (546, {'res': '$j546.3'}), (548, {'lhs': '$N_fixed544.2', 'rhs': '$j546.3', 'res': '$548binary_add.4'}), (550, {'value': '$548binary_add.4'}), (552, {'res': '$H_batch552.5'}), (554, {'res': '$j554.6'}), (556, {'orig': ['$H_batch552.5', '$j554.6'], 'duped': ['$556dup_top_two.7', '$556dup_top_two.8']}), (558, {'index': '$556dup_top_two.8', 'target': '$556dup_top_two.7', 'res': '$558binary_subscr.9'}), (560, {'res': '$const560.10'}), (562, {'res': '$x562.11'}), (564, {'res': '$const564.12'}), (566, {'lhs': '$x562.11', 'rhs': '$const564.12', 'res': '$566binary_floor_divide.13'}), (568, {'lhs': '$const560.10', 'rhs': '$566binary_floor_divide.13', 'res': '$568binary_power.14'}), (570, {'lhs': '$558binary_subscr.9', 'rhs': '$568binary_power.14', 'res': '$570inplace_multiply.15'}), (574, {'target': '$H_batch552.5', 'index': '$j554.6', 'value': '$570inplace_multiply.15'}), (576, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={540: ('$phi542.0',)})
DEBUG 2022-01-28 15:49:33,979 block_infos State(pc_initial=580 nstack_initial=0):
AdaptBlockInfo(insts=((580, {'res': '$H_batch580.0'}), (582, {'retval': '$H_batch580.0', 'castval': '$582return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG 2022-01-28 15:49:33,989 label 0:
    A = arg(0, name=A)                       ['A']
    D = arg(1, name=D)                       ['D']
    fixed_edge_reps = arg(2, name=fixed_edge_reps) ['fixed_edge_reps']
    batch_max = arg(3, name=batch_max)       ['batch_max']
    odd_cutoff = arg(4, name=odd_cutoff)     ['odd_cutoff']
    glynn = arg(5, name=glynn)               ['glynn']
    $const4.1 = const(int, 0)                ['$const4.1']
    oddloop = getitem(value=D, index=$const4.1, fn=<built-in function getitem>) ['$const4.1', 'D', 'oddloop']
    $const12.4 = const(int, 0)               ['$const12.4']
    $const14.5 = const(NoneType, None)       ['$const14.5']
    $const16.6 = const(NoneType, None)       ['$const16.6']
    $18build_slice.7 = global(slice: <class 'slice'>) ['$18build_slice.7']
    $18build_slice.8 = call $18build_slice.7($const14.5, $const16.6, func=$18build_slice.7, args=(Var($const14.5, loop_hafnian_batch.py:25), Var($const16.6, loop_hafnian_batch.py:25)), kws=(), vararg=None, target=None) ['$18build_slice.7', '$18build_slice.8', '$const14.5', '$const16.6']
    $20build_tuple.9 = build_tuple(items=[Var($const12.4, loop_hafnian_batch.py:25), Var($18build_slice.8, loop_hafnian_batch.py:25)]) ['$18build_slice.8', '$20build_tuple.9', '$const12.4']
    oddV = getitem(value=A, index=$20build_tuple.9, fn=<built-in function getitem>) ['$20build_tuple.9', 'A', 'oddV']
    $28load_attr.12 = getattr(value=A, attr=shape) ['$28load_attr.12', 'A']
    $const30.13 = const(int, 0)              ['$const30.13']
    n = getitem(value=$28load_attr.12, index=$const30.13, fn=<built-in function getitem>) ['$28load_attr.12', '$const30.13', 'n']
    $const36.15 = const(int, 2)              ['$const36.15']
    $40load_method.17 = getattr(value=fixed_edge_reps, attr=sum) ['$40load_method.17', 'fixed_edge_reps']
    $42call_method.18 = call $40load_method.17(func=$40load_method.17, args=[], kws=(), vararg=None, target=None) ['$40load_method.17', '$42call_method.18']
    N_fixed = $const36.15 * $42call_method.18 ['$42call_method.18', '$const36.15', 'N_fixed']
    $const50.21 = const(int, 2)              ['$const50.21']
    $54binary_multiply.23 = $const50.21 * batch_max ['$54binary_multiply.23', '$const50.21', 'batch_max']
    $56binary_add.24 = N_fixed + $54binary_multiply.23 ['$54binary_multiply.23', '$56binary_add.24', 'N_fixed']
    N_max = $56binary_add.24 + odd_cutoff    ['$56binary_add.24', 'N_max', 'odd_cutoff']
    $64load_global.27 = global(np: <module 'numpy' from 'C:\\Users\\zl4821\\Anaconda3\\envs\\GBS\\lib\\site-packages\\numpy\\__init__.py'>) ['$64load_global.27']
    $66load_method.28 = getattr(value=$64load_global.27, attr=concatenate) ['$64load_global.27', '$66load_method.28']
    $68load_global.29 = global(np: <module 'numpy' from 'C:\\Users\\zl4821\\Anaconda3\\envs\\GBS\\lib\\site-packages\\numpy\\__init__.py'>) ['$68load_global.29']
    $70load_method.30 = getattr(value=$68load_global.29, attr=array) ['$68load_global.29', '$70load_method.30']
    $74build_list.32 = build_list(items=[Var(batch_max, loop_hafnian_batch.py:24)]) ['$74build_list.32', 'batch_max']
    $76call_method.33 = call $70load_method.30($74build_list.32, func=$70load_method.30, args=[Var($74build_list.32, loop_hafnian_batch.py:32)], kws=(), vararg=None, target=None) ['$70load_method.30', '$74build_list.32', '$76call_method.33']
    $80build_tuple.35 = build_tuple(items=[Var($76call_method.33, loop_hafnian_batch.py:32), Var(fixed_edge_reps, loop_hafnian_batch.py:24)]) ['$76call_method.33', '$80build_tuple.35', 'fixed_edge_reps']
    edge_reps = call $66load_method.28($80build_tuple.35, func=$66load_method.28, args=[Var($80build_tuple.35, loop_hafnian_batch.py:32)], kws=(), vararg=None, target=None) ['$66load_method.28', '$80build_tuple.35', 'edge_reps']
    $86load_global.37 = global(np: <module 'numpy' from 'C:\\Users\\zl4821\\Anaconda3\\envs\\GBS\\lib\\site-packages\\numpy\\__init__.py'>) ['$86load_global.37']
    $88load_method.38 = getattr(value=$86load_global.37, attr=prod) ['$86load_global.37', '$88load_method.38']
    $const92.40 = const(int, 1)              ['$const92.40']
    $94binary_add.41 = edge_reps + $const92.40 ['$94binary_add.41', '$const92.40', 'edge_reps']
    steps = call $88load_method.38($94binary_add.41, func=$88load_method.38, args=[Var($94binary_add.41, loop_hafnian_batch.py:33)], kws=(), vararg=None, target=None) ['$88load_method.38', '$94binary_add.41', 'steps']
    $102load_method.44 = getattr(value=edge_reps, attr=max) ['$102load_method.44', 'edge_reps']
    $104call_method.45 = call $102load_method.44(func=$102load_method.44, args=[], kws=(), vararg=None, target=None) ['$102load_method.44', '$104call_method.45']
    max_binom = $104call_method.45 + odd_cutoff ['$104call_method.45', 'max_binom', 'odd_cutoff']
    $112load_global.48 = global(precompute_binoms: CPUDispatcher(<function precompute_binoms at 0x00000241074240D0>)) ['$112load_global.48']
    binoms = call $112load_global.48(max_binom, func=$112load_global.48, args=[Var(max_binom, loop_hafnian_batch.py:35)], kws=(), vararg=None, target=None) ['$112load_global.48', 'binoms', 'max_binom']
    $120load_global.51 = global(np: <module 'numpy' from 'C:\\Users\\zl4821\\Anaconda3\\envs\\GBS\\lib\\site-packages\\numpy\\__init__.py'>) ['$120load_global.51']
    $122load_attr.52 = getattr(value=$120load_global.51, attr=zeros) ['$120load_global.51', '$122load_attr.52']
    $const124.53 = const(int, 2)             ['$const124.53']
    $128binary_multiply.55 = $const124.53 * batch_max ['$128binary_multiply.55', '$const124.53', 'batch_max']
    $132binary_add.57 = $128binary_multiply.55 + odd_cutoff ['$128binary_multiply.55', '$132binary_add.57', 'odd_cutoff']
    $const134.58 = const(int, 1)             ['$const134.58']
    $136binary_add.59 = $132binary_add.57 + $const134.58 ['$132binary_add.57', '$136binary_add.59', '$const134.58']
    $138load_global.60 = global(np: <module 'numpy' from 'C:\\Users\\zl4821\\Anaconda3\\envs\\GBS\\lib\\site-packages\\numpy\\__init__.py'>) ['$138load_global.60']
    $140load_attr.61 = getattr(value=$138load_global.60, attr=complex128) ['$138load_global.60', '$140load_attr.61']
    H_batch = call $122load_attr.52($136binary_add.59, func=$122load_attr.52, args=[Var($136binary_add.59, loop_hafnian_batch.py:38)], kws=[('dtype', Var($140load_attr.61, loop_hafnian_batch.py:38))], vararg=None, target=None) ['$122load_attr.52', '$136binary_add.59', '$140load_attr.61', 'H_batch']
    $148load_global.64 = global(numba: <module 'numba' from 'C:\\Users\\zl4821\\Anaconda3\\envs\\GBS\\lib\\site-packages\\numba\\__init__.py'>) ['$148load_global.64']
    $150load_method.65 = getattr(value=$148load_global.64, attr=prange) ['$148load_global.64', '$150load_method.65']
    $154call_method.67 = call $150load_method.65(steps, func=$150load_method.65, args=[Var(steps, loop_hafnian_batch.py:33)], kws=(), vararg=None, target=None) ['$150load_method.65', '$154call_method.67', 'steps']
    $156get_iter.68 = getiter(value=$154call_method.67) ['$154call_method.67', '$156get_iter.68']
    $phi158.0 = $156get_iter.68              ['$156get_iter.68', '$phi158.0']
    jump 158                                 []
label 158:
    $158for_iter.1 = iternext(value=$phi158.0) ['$158for_iter.1', '$phi158.0']
    $158for_iter.2 = pair_first(value=$158for_iter.1) ['$158for_iter.1', '$158for_iter.2']
    $158for_iter.3 = pair_second(value=$158for_iter.1) ['$158for_iter.1', '$158for_iter.3']
    $phi162.1 = $158for_iter.2               ['$158for_iter.2', '$phi162.1']
    branch $158for_iter.3, 162, 520          ['$158for_iter.3']
label 162:
    j = $phi162.1                            ['$phi162.1', 'j']
    $164load_global.2 = global(np: <module 'numpy' from 'C:\\Users\\zl4821\\Anaconda3\\envs\\GBS\\lib\\site-packages\\numpy\\__init__.py'>) ['$164load_global.2']
    $166load_attr.3 = getattr(value=$164load_global.2, attr=zeros) ['$164load_global.2', '$166load_attr.3']
    $const168.4 = const(int, 2)              ['$const168.4']
    $172binary_multiply.6 = $const168.4 * batch_max ['$172binary_multiply.6', '$const168.4', 'batch_max']
    $176binary_add.8 = $172binary_multiply.6 + odd_cutoff ['$172binary_multiply.6', '$176binary_add.8', 'odd_cutoff']
    $const178.9 = const(int, 1)              ['$const178.9']
    $180binary_add.10 = $176binary_add.8 + $const178.9 ['$176binary_add.8', '$180binary_add.10', '$const178.9']
    $182load_global.11 = global(np: <module 'numpy' from 'C:\\Users\\zl4821\\Anaconda3\\envs\\GBS\\lib\\site-packages\\numpy\\__init__.py'>) ['$182load_global.11']
    $184load_attr.12 = getattr(value=$182load_global.11, attr=complex128) ['$182load_global.11', '$184load_attr.12']
    Hnew = call $166load_attr.3($180binary_add.10, func=$166load_attr.3, args=[Var($180binary_add.10, loop_hafnian_batch.py:41)], kws=[('dtype', Var($184load_attr.12, loop_hafnian_batch.py:41))], vararg=None, target=None) ['$166load_attr.3', '$180binary_add.10', '$184load_attr.12', 'Hnew']
    $192load_global.15 = global(find_kept_edges: CPUDispatcher(<function find_kept_edges at 0x0000024107424550>)) ['$192load_global.15']
    kept_edges = call $192load_global.15(j, edge_reps, func=$192load_global.15, args=[Var(j, loop_hafnian_batch.py:39), Var(edge_reps, loop_hafnian_batch.py:32)], kws=(), vararg=None, target=None) ['$192load_global.15', 'edge_reps', 'j', 'kept_edges']
    $204load_method.20 = getattr(value=kept_edges, attr=sum) ['$204load_method.20', 'kept_edges']
    edges_sum = call $204load_method.20(func=$204load_method.20, args=[], kws=(), vararg=None, target=None) ['$204load_method.20', 'edges_sum']
    binom_prod = const(float, 1.0)           ['binom_prod']
    $214load_global.23 = global(range: <class 'range'>) ['$214load_global.23']
    $const216.24 = const(int, 1)             ['$const216.24']
    $const220.26 = const(int, 2)             ['$const220.26']
    $222binary_floor_divide.27 = n // $const220.26 ['$222binary_floor_divide.27', '$const220.26', 'n']
    $224call_function.28 = call $214load_global.23($const216.24, $222binary_floor_divide.27, func=$214load_global.23, args=[Var($const216.24, loop_hafnian_batch.py:47), Var($222binary_floor_divide.27, loop_hafnian_batch.py:47)], kws=(), vararg=None, target=None) ['$214load_global.23', '$222binary_floor_divide.27', '$224call_function.28', '$const216.24']
    $226get_iter.29 = getiter(value=$224call_function.28) ['$224call_function.28', '$226get_iter.29']
    $phi228.1 = $226get_iter.29              ['$226get_iter.29', '$phi228.1']
    jump 228                                 []
label 228:
    $228for_iter.2 = iternext(value=$phi228.1) ['$228for_iter.2', '$phi228.1']
    $228for_iter.3 = pair_first(value=$228for_iter.2) ['$228for_iter.2', '$228for_iter.3']
    $228for_iter.4 = pair_second(value=$228for_iter.2) ['$228for_iter.2', '$228for_iter.4']
    $phi230.2 = $228for_iter.3               ['$228for_iter.3', '$phi230.2']
    branch $228for_iter.4, 230, 258          ['$228for_iter.4']
label 230:
    i = $phi230.2                            ['$phi230.2', 'i']
    $240binary_subscr.7 = getitem(value=edge_reps, index=i, fn=<built-in function getitem>) ['$240binary_subscr.7', 'edge_reps', 'i']
    $246binary_subscr.10 = getitem(value=kept_edges, index=i, fn=<built-in function getitem>) ['$246binary_subscr.10', 'i', 'kept_edges']
    $248build_tuple.11 = build_tuple(items=[Var($240binary_subscr.7, loop_hafnian_batch.py:48), Var($246binary_subscr.10, loop_hafnian_batch.py:48)]) ['$240binary_subscr.7', '$246binary_subscr.10', '$248build_tuple.11']
    $250binary_subscr.12 = getitem(value=binoms, index=$248build_tuple.11, fn=<built-in function getitem>) ['$248build_tuple.11', '$250binary_subscr.12', 'binoms']
    $252inplace_multiply.13 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=binom_prod, rhs=$250binary_subscr.12, static_lhs=Undefined, static_rhs=Undefined) ['$250binary_subscr.12', '$252inplace_multiply.13', 'binom_prod']
    binom_prod = $252inplace_multiply.13     ['$252inplace_multiply.13', 'binom_prod']
    jump 228                                 []
label 258:
    bool260 = global(bool: <class 'bool'>)   ['bool260']
    $260pred = call bool260(glynn, func=bool260, args=(Var(glynn, loop_hafnian_batch.py:24),), kws=(), vararg=None, target=None) ['$260pred', 'bool260', 'glynn']
    branch $260pred, 264, 278                ['$260pred']
label 264:
    $const264.1 = const(int, 2)              ['$const264.1']
    $268binary_multiply.3 = $const264.1 * kept_edges ['$268binary_multiply.3', '$const264.1', 'kept_edges']
    delta = $268binary_multiply.3 - edge_reps ['$268binary_multiply.3', 'delta', 'edge_reps']
    jump 282                                 []
label 278:
    delta = kept_edges                       ['delta', 'kept_edges']
    jump 282                                 []
label 282:
    $282load_global.1 = global(get_submatrices: CPUDispatcher(<function get_submatrices at 0x0000024107424E50>)) ['$282load_global.1']
    $292call_function.6 = call $282load_global.1(delta, A, D, oddV, func=$282load_global.1, args=[Var(delta, loop_hafnian_batch.py:51), Var(A, loop_hafnian_batch.py:24), Var(D, loop_hafnian_batch.py:24), Var(oddV, loop_hafnian_batch.py:25)], kws=(), vararg=None, target=None) ['$282load_global.1', '$292call_function.6', 'A', 'D', 'delta', 'oddV']
    $294unpack_sequence.11 = exhaust_iter(value=$292call_function.6, count=4) ['$292call_function.6', '$294unpack_sequence.11']
    $294unpack_sequence.7 = static_getitem(value=$294unpack_sequence.11, index=0, index_var=None, fn=<built-in function getitem>) ['$294unpack_sequence.11', '$294unpack_sequence.7']
    $294unpack_sequence.8 = static_getitem(value=$294unpack_sequence.11, index=1, index_var=None, fn=<built-in function getitem>) ['$294unpack_sequence.11', '$294unpack_sequence.8']
    $294unpack_sequence.9 = static_getitem(value=$294unpack_sequence.11, index=2, index_var=None, fn=<built-in function getitem>) ['$294unpack_sequence.11', '$294unpack_sequence.9']
    $294unpack_sequence.10 = static_getitem(value=$294unpack_sequence.11, index=3, index_var=None, fn=<built-in function getitem>) ['$294unpack_sequence.10', '$294unpack_sequence.11']
    AX_S = $294unpack_sequence.7             ['$294unpack_sequence.7', 'AX_S']
    XD_S = $294unpack_sequence.8             ['$294unpack_sequence.8', 'XD_S']
    D_S = $294unpack_sequence.9              ['$294unpack_sequence.9', 'D_S']
    oddVX_S = $294unpack_sequence.10         ['$294unpack_sequence.10', 'oddVX_S']
    $304load_global.12 = global(eigvals: CPUDispatcher(<function eigvals at 0x00000241074303A0>)) ['$304load_global.12']
    E = call $304load_global.12(AX_S, func=$304load_global.12, args=[Var(AX_S, loop_hafnian_batch.py:55)], kws=(), vararg=None, target=None) ['$304load_global.12', 'AX_S', 'E']
    $312load_global.15 = global(f_loop: CPUDispatcher(<function f_loop at 0x00000241074248B0>)) ['$312load_global.15']
    f_even = call $312load_global.15(E, AX_S, XD_S, D_S, N_max, func=$312load_global.15, args=[Var(E, loop_hafnian_batch.py:57), Var(AX_S, loop_hafnian_batch.py:55), Var(XD_S, loop_hafnian_batch.py:55), Var(D_S, loop_hafnian_batch.py:55), Var(N_max, loop_hafnian_batch.py:30)], kws=(), vararg=None, target=None) ['$312load_global.15', 'AX_S', 'D_S', 'E', 'N_max', 'XD_S', 'f_even']
    $328load_global.22 = global(f_loop_odd: CPUDispatcher(<function f_loop_odd at 0x0000024107424AF0>)) ['$328load_global.22']
    f_odd = call $328load_global.22(E, AX_S, XD_S, D_S, N_max, oddloop, oddVX_S, func=$328load_global.22, args=[Var(E, loop_hafnian_batch.py:57), Var(AX_S, loop_hafnian_batch.py:55), Var(XD_S, loop_hafnian_batch.py:55), Var(D_S, loop_hafnian_batch.py:55), Var(N_max, loop_hafnian_batch.py:30), Var(oddloop, loop_hafnian_batch.py:24), Var(oddVX_S, loop_hafnian_batch.py:55)], kws=(), vararg=None, target=None) ['$328load_global.22', 'AX_S', 'D_S', 'E', 'N_max', 'XD_S', 'f_odd', 'oddVX_S', 'oddloop']
    $348load_global.31 = global(range: <class 'range'>) ['$348load_global.31']
    $const350.32 = const(int, 2)             ['$const350.32']
    $const354.34 = const(int, 0)             ['$const354.34']
    $356binary_subscr.35 = getitem(value=kept_edges, index=$const354.34, fn=<built-in function getitem>) ['$356binary_subscr.35', '$const354.34', 'kept_edges']
    $358binary_multiply.36 = $const350.32 * $356binary_subscr.35 ['$356binary_subscr.35', '$358binary_multiply.36', '$const350.32']
    $const360.37 = const(int, 2)             ['$const360.37']
    $364binary_multiply.39 = $const360.37 * batch_max ['$364binary_multiply.39', '$const360.37', 'batch_max']
    $368binary_add.41 = $364binary_multiply.39 + odd_cutoff ['$364binary_multiply.39', '$368binary_add.41', 'odd_cutoff']
    $const370.42 = const(int, 1)             ['$const370.42']
    $372binary_add.43 = $368binary_add.41 + $const370.42 ['$368binary_add.41', '$372binary_add.43', '$const370.42']
    $374call_function.44 = call $348load_global.31($358binary_multiply.36, $372binary_add.43, func=$348load_global.31, args=[Var($358binary_multiply.36, loop_hafnian_batch.py:64), Var($372binary_add.43, loop_hafnian_batch.py:64)], kws=(), vararg=None, target=None) ['$348load_global.31', '$358binary_multiply.36', '$372binary_add.43', '$374call_function.44']
    $376get_iter.45 = getiter(value=$374call_function.44) ['$374call_function.44', '$376get_iter.45']
    $phi378.1 = $376get_iter.45              ['$376get_iter.45', '$phi378.1']
    jump 378                                 []
label 378:
    $378for_iter.2 = iternext(value=$phi378.1) ['$378for_iter.2', '$phi378.1']
    $378for_iter.3 = pair_first(value=$378for_iter.2) ['$378for_iter.2', '$378for_iter.3']
    $378for_iter.4 = pair_second(value=$378for_iter.2) ['$378for_iter.2', '$378for_iter.4']
    $phi380.2 = $378for_iter.3               ['$378for_iter.3', '$phi380.2']
    branch $378for_iter.4, 380, 510          ['$378for_iter.4']
label 380:
    N_det = $phi380.2                        ['$phi380.2', 'N_det']
    N = N_fixed + N_det                      ['N', 'N_det', 'N_fixed']
    $const390.6 = const(float, -1.0)         ['$const390.6']
    $const394.8 = const(int, 2)              ['$const394.8']
    $396binary_floor_divide.9 = N // $const394.8 ['$396binary_floor_divide.9', '$const394.8', 'N']
    $400binary_subtract.11 = $396binary_floor_divide.9 - edges_sum ['$396binary_floor_divide.9', '$400binary_subtract.11', 'edges_sum']
    plus_minus = $const390.6 ** $400binary_subtract.11 ['$400binary_subtract.11', '$const390.6', 'plus_minus']
    $const410.15 = const(int, 2)             ['$const410.15']
    $412binary_floor_divide.16 = N_det // $const410.15 ['$412binary_floor_divide.16', '$const410.15', 'N_det']
    $const416.18 = const(int, 0)             ['$const416.18']
    $418binary_subscr.19 = getitem(value=kept_edges, index=$const416.18, fn=<built-in function getitem>) ['$418binary_subscr.19', '$const416.18', 'kept_edges']
    $420build_tuple.20 = build_tuple(items=[Var($412binary_floor_divide.16, loop_hafnian_batch.py:68), Var($418binary_subscr.19, loop_hafnian_batch.py:68)]) ['$412binary_floor_divide.16', '$418binary_subscr.19', '$420build_tuple.20']
    $422binary_subscr.21 = getitem(value=binoms, index=$420build_tuple.20, fn=<built-in function getitem>) ['$420build_tuple.20', '$422binary_subscr.21', 'binoms']
    n_det_binom_prod = $422binary_subscr.21 * binom_prod ['$422binary_subscr.21', 'binom_prod', 'n_det_binom_prod']
    $const432.25 = const(int, 2)             ['$const432.25']
    $434binary_modulo.26 = N_det % $const432.25 ['$434binary_modulo.26', '$const432.25', 'N_det']
    $const436.27 = const(int, 0)             ['$const436.27']
    $438compare_op.28 = $434binary_modulo.26 == $const436.27 ['$434binary_modulo.26', '$438compare_op.28', '$const436.27']
    bool440 = global(bool: <class 'bool'>)   ['bool440']
    $440pred = call bool440($438compare_op.28, func=bool440, args=(Var($438compare_op.28, loop_hafnian_batch.py:70),), kws=(), vararg=None, target=None) ['$438compare_op.28', '$440pred', 'bool440']
    branch $440pred, 444, 478                ['$440pred']
label 444:
    $450binary_subscr.6 = getitem(value=Hnew, index=N_det, fn=<built-in function getitem>) ['$450binary_subscr.6', 'Hnew', 'N_det']
    $456binary_multiply.9 = n_det_binom_prod * plus_minus ['$456binary_multiply.9', 'n_det_binom_prod', 'plus_minus']
    $const462.12 = const(int, 2)             ['$const462.12']
    $464binary_floor_divide.13 = N // $const462.12 ['$464binary_floor_divide.13', '$const462.12', 'N']
    $466binary_subscr.14 = getitem(value=f_even, index=$464binary_floor_divide.13, fn=<built-in function getitem>) ['$464binary_floor_divide.13', '$466binary_subscr.14', 'f_even']
    $468binary_multiply.15 = $456binary_multiply.9 * $466binary_subscr.14 ['$456binary_multiply.9', '$466binary_subscr.14', '$468binary_multiply.15']
    $470inplace_add.16 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$450binary_subscr.6, rhs=$468binary_multiply.15, static_lhs=Undefined, static_rhs=Undefined) ['$450binary_subscr.6', '$468binary_multiply.15', '$470inplace_add.16']
    Hnew[N_det] = $470inplace_add.16         ['$470inplace_add.16', 'Hnew', 'N_det']
    jump 506                                 []
label 478:
    $484binary_subscr.6 = getitem(value=Hnew, index=N_det, fn=<built-in function getitem>) ['$484binary_subscr.6', 'Hnew', 'N_det']
    $490binary_multiply.9 = n_det_binom_prod * plus_minus ['$490binary_multiply.9', 'n_det_binom_prod', 'plus_minus']
    $496binary_subscr.12 = getitem(value=f_odd, index=N, fn=<built-in function getitem>) ['$496binary_subscr.12', 'N', 'f_odd']
    $498binary_multiply.13 = $490binary_multiply.9 * $496binary_subscr.12 ['$490binary_multiply.9', '$496binary_subscr.12', '$498binary_multiply.13']
    $500inplace_add.14 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$484binary_subscr.6, rhs=$498binary_multiply.13, static_lhs=Undefined, static_rhs=Undefined) ['$484binary_subscr.6', '$498binary_multiply.13', '$500inplace_add.14']
    Hnew[N_det] = $500inplace_add.14         ['$500inplace_add.14', 'Hnew', 'N_det']
    jump 506                                 []
label 506:
    jump 378                                 []
label 510:
    $514inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=H_batch, rhs=Hnew, static_lhs=Undefined, static_rhs=Undefined) ['$514inplace_add.3', 'H_batch', 'Hnew']
    H_batch = $514inplace_add.3              ['$514inplace_add.3', 'H_batch']
    jump 158                                 []
label 520:
    bool522 = global(bool: <class 'bool'>)   ['bool522']
    $522pred = call bool522(glynn, func=bool522, args=(Var(glynn, loop_hafnian_batch.py:24),), kws=(), vararg=None, target=None) ['$522pred', 'bool522', 'glynn']
    branch $522pred, 526, 580                ['$522pred']
label 526:
    $526load_global.0 = global(range: <class 'range'>) ['$526load_global.0']
    $530load_attr.2 = getattr(value=H_batch, attr=shape) ['$530load_attr.2', 'H_batch']
    $const532.3 = const(int, 0)              ['$const532.3']
    $534binary_subscr.4 = getitem(value=$530load_attr.2, index=$const532.3, fn=<built-in function getitem>) ['$530load_attr.2', '$534binary_subscr.4', '$const532.3']
    $536call_function.5 = call $526load_global.0($534binary_subscr.4, func=$526load_global.0, args=[Var($534binary_subscr.4, loop_hafnian_batch.py:78)], kws=(), vararg=None, target=None) ['$526load_global.0', '$534binary_subscr.4', '$536call_function.5']
    $538get_iter.6 = getiter(value=$536call_function.5) ['$536call_function.5', '$538get_iter.6']
    $phi540.0 = $538get_iter.6               ['$538get_iter.6', '$phi540.0']
    jump 540                                 []
label 540:
    $540for_iter.1 = iternext(value=$phi540.0) ['$540for_iter.1', '$phi540.0']
    $540for_iter.2 = pair_first(value=$540for_iter.1) ['$540for_iter.1', '$540for_iter.2']
    $540for_iter.3 = pair_second(value=$540for_iter.1) ['$540for_iter.1', '$540for_iter.3']
    $phi542.1 = $540for_iter.2               ['$540for_iter.2', '$phi542.1']
    branch $540for_iter.3, 542, 580          ['$540for_iter.3']
label 542:
    j = $phi542.1                            ['$phi542.1', 'j']
    x = N_fixed + j                          ['N_fixed', 'j', 'x']
    $558binary_subscr.9 = getitem(value=H_batch, index=j, fn=<built-in function getitem>) ['$558binary_subscr.9', 'H_batch', 'j']
    $const560.10 = const(float, 0.5)         ['$const560.10']
    $const564.12 = const(int, 2)             ['$const564.12']
    $566binary_floor_divide.13 = x // $const564.12 ['$566binary_floor_divide.13', '$const564.12', 'x']
    $568binary_power.14 = $const560.10 ** $566binary_floor_divide.13 ['$566binary_floor_divide.13', '$568binary_power.14', '$const560.10']
    $570inplace_multiply.15 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=$558binary_subscr.9, rhs=$568binary_power.14, static_lhs=Undefined, static_rhs=Undefined) ['$558binary_subscr.9', '$568binary_power.14', '$570inplace_multiply.15']
    H_batch[j] = $570inplace_multiply.15     ['$570inplace_multiply.15', 'H_batch', 'j']
    jump 540                                 []
label 580:
    $582return_value.1 = cast(value=H_batch) ['$582return_value.1', 'H_batch']
    return $582return_value.1                ['$582return_value.1']

DEBUG 2022-01-28 15:49:34,017 ==== SSA block analysis pass on 0
DEBUG 2022-01-28 15:49:34,017 Running <numba.core.ssa._GatherDefsHandler object at 0x000002410E175790>
DEBUG 2022-01-28 15:49:34,017 on stmt: A = arg(0, name=A)
DEBUG 2022-01-28 15:49:34,017 on stmt: D = arg(1, name=D)
DEBUG 2022-01-28 15:49:34,017 on stmt: fixed_edge_reps = arg(2, name=fixed_edge_reps)
DEBUG 2022-01-28 15:49:34,017 on stmt: batch_max = arg(3, name=batch_max)
DEBUG 2022-01-28 15:49:34,017 on stmt: odd_cutoff = arg(4, name=odd_cutoff)
DEBUG 2022-01-28 15:49:34,017 on stmt: glynn = arg(5, name=glynn)
DEBUG 2022-01-28 15:49:34,019 on stmt: $const4.1 = const(int, 0)
DEBUG 2022-01-28 15:49:34,019 on stmt: oddloop = static_getitem(value=D, index=0, index_var=$const4.1, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:34,019 on stmt: $const12.4 = const(int, 0)
DEBUG 2022-01-28 15:49:34,019 on stmt: $const14.5 = const(NoneType, None)
DEBUG 2022-01-28 15:49:34,019 on stmt: $const16.6 = const(NoneType, None)
DEBUG 2022-01-28 15:49:34,019 on stmt: $18build_slice.7 = global(slice: <class 'slice'>)
DEBUG 2022-01-28 15:49:34,019 on stmt: $18build_slice.8 = call $18build_slice.7($const14.5, $const16.6, func=$18build_slice.7, args=(Var($const14.5, loop_hafnian_batch.py:25), Var($const16.6, loop_hafnian_batch.py:25)), kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:34,019 on stmt: $20build_tuple.9 = build_tuple(items=[Var($const12.4, loop_hafnian_batch.py:25), Var($18build_slice.8, loop_hafnian_batch.py:25)])
DEBUG 2022-01-28 15:49:34,019 on stmt: oddV = static_getitem(value=A, index=(0, slice(None, None, None)), index_var=$20build_tuple.9, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:34,019 on stmt: $28load_attr.12 = getattr(value=A, attr=shape)
DEBUG 2022-01-28 15:49:34,019 on stmt: $const30.13 = const(int, 0)
DEBUG 2022-01-28 15:49:34,019 on stmt: n = static_getitem(value=$28load_attr.12, index=0, index_var=$const30.13, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:34,019 on stmt: $const36.15 = const(int, 2)
DEBUG 2022-01-28 15:49:34,019 on stmt: $40load_method.17 = getattr(value=fixed_edge_reps, attr=sum)
DEBUG 2022-01-28 15:49:34,019 on stmt: $42call_method.18 = call $40load_method.17(func=$40load_method.17, args=[], kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:34,019 on stmt: N_fixed = $const36.15 * $42call_method.18
DEBUG 2022-01-28 15:49:34,019 on stmt: $const50.21 = const(int, 2)
DEBUG 2022-01-28 15:49:34,019 on stmt: $54binary_multiply.23 = $const50.21 * batch_max
DEBUG 2022-01-28 15:49:34,019 on stmt: $56binary_add.24 = N_fixed + $54binary_multiply.23
DEBUG 2022-01-28 15:49:34,019 on stmt: N_max = $56binary_add.24 + odd_cutoff
DEBUG 2022-01-28 15:49:34,019 on stmt: $64load_global.27 = global(np: <module 'numpy' from 'C:\\Users\\zl4821\\Anaconda3\\envs\\GBS\\lib\\site-packages\\numpy\\__init__.py'>)
DEBUG 2022-01-28 15:49:34,019 on stmt: $66load_method.28 = getattr(value=$64load_global.27, attr=concatenate)
DEBUG 2022-01-28 15:49:34,019 on stmt: $68load_global.29 = global(np: <module 'numpy' from 'C:\\Users\\zl4821\\Anaconda3\\envs\\GBS\\lib\\site-packages\\numpy\\__init__.py'>)
DEBUG 2022-01-28 15:49:34,019 on stmt: $70load_method.30 = getattr(value=$68load_global.29, attr=array)
DEBUG 2022-01-28 15:49:34,019 on stmt: $74build_list.32 = build_list(items=[Var(batch_max, loop_hafnian_batch.py:24)])
DEBUG 2022-01-28 15:49:34,019 on stmt: $76call_method.33 = call $70load_method.30($74build_list.32, func=$70load_method.30, args=[Var($74build_list.32, loop_hafnian_batch.py:32)], kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:34,019 on stmt: $80build_tuple.35 = build_tuple(items=[Var($76call_method.33, loop_hafnian_batch.py:32), Var(fixed_edge_reps, loop_hafnian_batch.py:24)])
DEBUG 2022-01-28 15:49:34,019 on stmt: edge_reps = call $66load_method.28($80build_tuple.35, func=$66load_method.28, args=[Var($80build_tuple.35, loop_hafnian_batch.py:32)], kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:34,019 on stmt: $86load_global.37 = global(np: <module 'numpy' from 'C:\\Users\\zl4821\\Anaconda3\\envs\\GBS\\lib\\site-packages\\numpy\\__init__.py'>)
DEBUG 2022-01-28 15:49:34,019 on stmt: $88load_method.38 = getattr(value=$86load_global.37, attr=prod)
DEBUG 2022-01-28 15:49:34,019 on stmt: $const92.40 = const(int, 1)
DEBUG 2022-01-28 15:49:34,019 on stmt: $94binary_add.41 = edge_reps + $const92.40
DEBUG 2022-01-28 15:49:34,019 on stmt: steps = call $88load_method.38($94binary_add.41, func=$88load_method.38, args=[Var($94binary_add.41, loop_hafnian_batch.py:33)], kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:34,019 on stmt: $102load_method.44 = getattr(value=edge_reps, attr=max)
DEBUG 2022-01-28 15:49:34,019 on stmt: $104call_method.45 = call $102load_method.44(func=$102load_method.44, args=[], kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:34,019 on stmt: max_binom = $104call_method.45 + odd_cutoff
DEBUG 2022-01-28 15:49:34,019 on stmt: $112load_global.48 = global(precompute_binoms: CPUDispatcher(<function precompute_binoms at 0x00000241074240D0>))
DEBUG 2022-01-28 15:49:34,019 on stmt: binoms = call $112load_global.48(max_binom, func=$112load_global.48, args=[Var(max_binom, loop_hafnian_batch.py:35)], kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:34,019 on stmt: $120load_global.51 = global(np: <module 'numpy' from 'C:\\Users\\zl4821\\Anaconda3\\envs\\GBS\\lib\\site-packages\\numpy\\__init__.py'>)
DEBUG 2022-01-28 15:49:34,019 on stmt: $122load_attr.52 = getattr(value=$120load_global.51, attr=zeros)
DEBUG 2022-01-28 15:49:34,019 on stmt: $const124.53 = const(int, 2)
DEBUG 2022-01-28 15:49:34,019 on stmt: $128binary_multiply.55 = $const124.53 * batch_max
DEBUG 2022-01-28 15:49:34,019 on stmt: $132binary_add.57 = $128binary_multiply.55 + odd_cutoff
DEBUG 2022-01-28 15:49:34,019 on stmt: $const134.58 = const(int, 1)
DEBUG 2022-01-28 15:49:34,019 on stmt: $136binary_add.59 = $132binary_add.57 + $const134.58
DEBUG 2022-01-28 15:49:34,019 on stmt: $138load_global.60 = global(np: <module 'numpy' from 'C:\\Users\\zl4821\\Anaconda3\\envs\\GBS\\lib\\site-packages\\numpy\\__init__.py'>)
DEBUG 2022-01-28 15:49:34,019 on stmt: $140load_attr.61 = getattr(value=$138load_global.60, attr=complex128)
DEBUG 2022-01-28 15:49:34,019 on stmt: H_batch = call $122load_attr.52($136binary_add.59, func=$122load_attr.52, args=[Var($136binary_add.59, loop_hafnian_batch.py:38)], kws=[('dtype', Var($140load_attr.61, loop_hafnian_batch.py:38))], vararg=None, target=None)
DEBUG 2022-01-28 15:49:34,019 on stmt: $148load_global.64 = global(numba: <module 'numba' from 'C:\\Users\\zl4821\\Anaconda3\\envs\\GBS\\lib\\site-packages\\numba\\__init__.py'>)
DEBUG 2022-01-28 15:49:34,019 on stmt: $150load_method.65 = getattr(value=$148load_global.64, attr=prange)
DEBUG 2022-01-28 15:49:34,019 on stmt: $154call_method.67 = call $150load_method.65(steps, func=$150load_method.65, args=[Var(steps, loop_hafnian_batch.py:33)], kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:34,019 on stmt: $156get_iter.68 = getiter(value=$154call_method.67)
DEBUG 2022-01-28 15:49:34,019 on stmt: $phi158.0 = $156get_iter.68
DEBUG 2022-01-28 15:49:34,019 on stmt: jump 158
DEBUG 2022-01-28 15:49:34,019 ==== SSA block analysis pass on 158
DEBUG 2022-01-28 15:49:34,019 Running <numba.core.ssa._GatherDefsHandler object at 0x000002410E175790>
DEBUG 2022-01-28 15:49:34,019 on stmt: $158for_iter.1 = iternext(value=$phi158.0)
DEBUG 2022-01-28 15:49:34,019 on stmt: $158for_iter.2 = pair_first(value=$158for_iter.1)
DEBUG 2022-01-28 15:49:34,019 on stmt: $158for_iter.3 = pair_second(value=$158for_iter.1)
DEBUG 2022-01-28 15:49:34,019 on stmt: $phi162.1 = $158for_iter.2
DEBUG 2022-01-28 15:49:34,019 on stmt: branch $158for_iter.3, 162, 520
DEBUG 2022-01-28 15:49:34,019 ==== SSA block analysis pass on 162
DEBUG 2022-01-28 15:49:34,019 Running <numba.core.ssa._GatherDefsHandler object at 0x000002410E175790>
DEBUG 2022-01-28 15:49:34,019 on stmt: j = $phi162.1
DEBUG 2022-01-28 15:49:34,019 on stmt: $164load_global.2 = global(np: <module 'numpy' from 'C:\\Users\\zl4821\\Anaconda3\\envs\\GBS\\lib\\site-packages\\numpy\\__init__.py'>)
DEBUG 2022-01-28 15:49:34,019 on stmt: $166load_attr.3 = getattr(value=$164load_global.2, attr=zeros)
DEBUG 2022-01-28 15:49:34,019 on stmt: $const168.4 = const(int, 2)
DEBUG 2022-01-28 15:49:34,019 on stmt: $172binary_multiply.6 = $const168.4 * batch_max
DEBUG 2022-01-28 15:49:34,019 on stmt: $176binary_add.8 = $172binary_multiply.6 + odd_cutoff
DEBUG 2022-01-28 15:49:34,019 on stmt: $const178.9 = const(int, 1)
DEBUG 2022-01-28 15:49:34,019 on stmt: $180binary_add.10 = $176binary_add.8 + $const178.9
DEBUG 2022-01-28 15:49:34,019 on stmt: $182load_global.11 = global(np: <module 'numpy' from 'C:\\Users\\zl4821\\Anaconda3\\envs\\GBS\\lib\\site-packages\\numpy\\__init__.py'>)
DEBUG 2022-01-28 15:49:34,019 on stmt: $184load_attr.12 = getattr(value=$182load_global.11, attr=complex128)
DEBUG 2022-01-28 15:49:34,019 on stmt: Hnew = call $166load_attr.3($180binary_add.10, func=$166load_attr.3, args=[Var($180binary_add.10, loop_hafnian_batch.py:41)], kws=[('dtype', Var($184load_attr.12, loop_hafnian_batch.py:41))], vararg=None, target=None)
DEBUG 2022-01-28 15:49:34,019 on stmt: $192load_global.15 = global(find_kept_edges: CPUDispatcher(<function find_kept_edges at 0x0000024107424550>))
DEBUG 2022-01-28 15:49:34,019 on stmt: kept_edges = call $192load_global.15(j, edge_reps, func=$192load_global.15, args=[Var(j, loop_hafnian_batch.py:39), Var(edge_reps, loop_hafnian_batch.py:32)], kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:34,019 on stmt: $204load_method.20 = getattr(value=kept_edges, attr=sum)
DEBUG 2022-01-28 15:49:34,019 on stmt: edges_sum = call $204load_method.20(func=$204load_method.20, args=[], kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:34,019 on stmt: binom_prod = const(float, 1.0)
DEBUG 2022-01-28 15:49:34,019 on stmt: $214load_global.23 = global(range: <class 'range'>)
DEBUG 2022-01-28 15:49:34,027 on stmt: $const216.24 = const(int, 1)
DEBUG 2022-01-28 15:49:34,027 on stmt: $const220.26 = const(int, 2)
DEBUG 2022-01-28 15:49:34,027 on stmt: $222binary_floor_divide.27 = n // $const220.26
DEBUG 2022-01-28 15:49:34,027 on stmt: $224call_function.28 = call $214load_global.23($const216.24, $222binary_floor_divide.27, func=$214load_global.23, args=[Var($const216.24, loop_hafnian_batch.py:47), Var($222binary_floor_divide.27, loop_hafnian_batch.py:47)], kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:34,027 on stmt: $226get_iter.29 = getiter(value=$224call_function.28)
DEBUG 2022-01-28 15:49:34,027 on stmt: $phi228.1 = $226get_iter.29
DEBUG 2022-01-28 15:49:34,027 on stmt: jump 228
DEBUG 2022-01-28 15:49:34,027 ==== SSA block analysis pass on 228
DEBUG 2022-01-28 15:49:34,027 Running <numba.core.ssa._GatherDefsHandler object at 0x000002410E175790>
DEBUG 2022-01-28 15:49:34,027 on stmt: $228for_iter.2 = iternext(value=$phi228.1)
DEBUG 2022-01-28 15:49:34,027 on stmt: $228for_iter.3 = pair_first(value=$228for_iter.2)
DEBUG 2022-01-28 15:49:34,027 on stmt: $228for_iter.4 = pair_second(value=$228for_iter.2)
DEBUG 2022-01-28 15:49:34,027 on stmt: $phi230.2 = $228for_iter.3
DEBUG 2022-01-28 15:49:34,027 on stmt: branch $228for_iter.4, 230, 258
DEBUG 2022-01-28 15:49:34,027 ==== SSA block analysis pass on 230
DEBUG 2022-01-28 15:49:34,027 Running <numba.core.ssa._GatherDefsHandler object at 0x000002410E175790>
DEBUG 2022-01-28 15:49:34,027 on stmt: i = $phi230.2
DEBUG 2022-01-28 15:49:34,027 on stmt: $240binary_subscr.7 = getitem(value=edge_reps, index=i, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:34,027 on stmt: $246binary_subscr.10 = getitem(value=kept_edges, index=i, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:34,027 on stmt: $248build_tuple.11 = build_tuple(items=[Var($240binary_subscr.7, loop_hafnian_batch.py:48), Var($246binary_subscr.10, loop_hafnian_batch.py:48)])
DEBUG 2022-01-28 15:49:34,027 on stmt: $250binary_subscr.12 = getitem(value=binoms, index=$248build_tuple.11, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:34,027 on stmt: $252inplace_multiply.13 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=binom_prod, rhs=$250binary_subscr.12, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-01-28 15:49:34,027 on stmt: binom_prod = $252inplace_multiply.13
DEBUG 2022-01-28 15:49:34,027 on stmt: jump 228
DEBUG 2022-01-28 15:49:34,029 ==== SSA block analysis pass on 258
DEBUG 2022-01-28 15:49:34,029 Running <numba.core.ssa._GatherDefsHandler object at 0x000002410E175790>
DEBUG 2022-01-28 15:49:34,029 on stmt: bool260 = global(bool: <class 'bool'>)
DEBUG 2022-01-28 15:49:34,029 on stmt: $260pred = call bool260(glynn, func=bool260, args=(Var(glynn, loop_hafnian_batch.py:24),), kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:34,029 on stmt: branch $260pred, 264, 278
DEBUG 2022-01-28 15:49:34,029 ==== SSA block analysis pass on 264
DEBUG 2022-01-28 15:49:34,029 Running <numba.core.ssa._GatherDefsHandler object at 0x000002410E175790>
DEBUG 2022-01-28 15:49:34,029 on stmt: $const264.1 = const(int, 2)
DEBUG 2022-01-28 15:49:34,029 on stmt: $268binary_multiply.3 = $const264.1 * kept_edges
DEBUG 2022-01-28 15:49:34,029 on stmt: delta = $268binary_multiply.3 - edge_reps
DEBUG 2022-01-28 15:49:34,029 on stmt: jump 282
DEBUG 2022-01-28 15:49:34,029 ==== SSA block analysis pass on 278
DEBUG 2022-01-28 15:49:34,029 Running <numba.core.ssa._GatherDefsHandler object at 0x000002410E175790>
DEBUG 2022-01-28 15:49:34,029 on stmt: delta = kept_edges
DEBUG 2022-01-28 15:49:34,029 on stmt: jump 282
DEBUG 2022-01-28 15:49:34,029 ==== SSA block analysis pass on 282
DEBUG 2022-01-28 15:49:34,029 Running <numba.core.ssa._GatherDefsHandler object at 0x000002410E175790>
DEBUG 2022-01-28 15:49:34,029 on stmt: $282load_global.1 = global(get_submatrices: CPUDispatcher(<function get_submatrices at 0x0000024107424E50>))
DEBUG 2022-01-28 15:49:34,029 on stmt: $292call_function.6 = call $282load_global.1(delta, A, D, oddV, func=$282load_global.1, args=[Var(delta, loop_hafnian_batch.py:51), Var(A, loop_hafnian_batch.py:24), Var(D, loop_hafnian_batch.py:24), Var(oddV, loop_hafnian_batch.py:25)], kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:34,029 on stmt: $294unpack_sequence.11 = exhaust_iter(value=$292call_function.6, count=4)
DEBUG 2022-01-28 15:49:34,029 on stmt: $294unpack_sequence.7 = static_getitem(value=$294unpack_sequence.11, index=0, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:34,029 on stmt: $294unpack_sequence.8 = static_getitem(value=$294unpack_sequence.11, index=1, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:34,029 on stmt: $294unpack_sequence.9 = static_getitem(value=$294unpack_sequence.11, index=2, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:34,029 on stmt: $294unpack_sequence.10 = static_getitem(value=$294unpack_sequence.11, index=3, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:34,029 on stmt: AX_S = $294unpack_sequence.7
DEBUG 2022-01-28 15:49:34,029 on stmt: XD_S = $294unpack_sequence.8
DEBUG 2022-01-28 15:49:34,029 on stmt: D_S = $294unpack_sequence.9
DEBUG 2022-01-28 15:49:34,029 on stmt: oddVX_S = $294unpack_sequence.10
DEBUG 2022-01-28 15:49:34,029 on stmt: $304load_global.12 = global(eigvals: CPUDispatcher(<function eigvals at 0x00000241074303A0>))
DEBUG 2022-01-28 15:49:34,029 on stmt: E = call $304load_global.12(AX_S, func=$304load_global.12, args=[Var(AX_S, loop_hafnian_batch.py:55)], kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:34,029 on stmt: $312load_global.15 = global(f_loop: CPUDispatcher(<function f_loop at 0x00000241074248B0>))
DEBUG 2022-01-28 15:49:34,029 on stmt: f_even = call $312load_global.15(E, AX_S, XD_S, D_S, N_max, func=$312load_global.15, args=[Var(E, loop_hafnian_batch.py:57), Var(AX_S, loop_hafnian_batch.py:55), Var(XD_S, loop_hafnian_batch.py:55), Var(D_S, loop_hafnian_batch.py:55), Var(N_max, loop_hafnian_batch.py:30)], kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:34,029 on stmt: $328load_global.22 = global(f_loop_odd: CPUDispatcher(<function f_loop_odd at 0x0000024107424AF0>))
DEBUG 2022-01-28 15:49:34,029 on stmt: f_odd = call $328load_global.22(E, AX_S, XD_S, D_S, N_max, oddloop, oddVX_S, func=$328load_global.22, args=[Var(E, loop_hafnian_batch.py:57), Var(AX_S, loop_hafnian_batch.py:55), Var(XD_S, loop_hafnian_batch.py:55), Var(D_S, loop_hafnian_batch.py:55), Var(N_max, loop_hafnian_batch.py:30), Var(oddloop, loop_hafnian_batch.py:24), Var(oddVX_S, loop_hafnian_batch.py:55)], kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:34,029 on stmt: $348load_global.31 = global(range: <class 'range'>)
DEBUG 2022-01-28 15:49:34,029 on stmt: $const350.32 = const(int, 2)
DEBUG 2022-01-28 15:49:34,029 on stmt: $const354.34 = const(int, 0)
DEBUG 2022-01-28 15:49:34,029 on stmt: $356binary_subscr.35 = static_getitem(value=kept_edges, index=0, index_var=$const354.34, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:34,029 on stmt: $358binary_multiply.36 = $const350.32 * $356binary_subscr.35
DEBUG 2022-01-28 15:49:34,029 on stmt: $const360.37 = const(int, 2)
DEBUG 2022-01-28 15:49:34,029 on stmt: $364binary_multiply.39 = $const360.37 * batch_max
DEBUG 2022-01-28 15:49:34,029 on stmt: $368binary_add.41 = $364binary_multiply.39 + odd_cutoff
DEBUG 2022-01-28 15:49:34,029 on stmt: $const370.42 = const(int, 1)
DEBUG 2022-01-28 15:49:34,029 on stmt: $372binary_add.43 = $368binary_add.41 + $const370.42
DEBUG 2022-01-28 15:49:34,029 on stmt: $374call_function.44 = call $348load_global.31($358binary_multiply.36, $372binary_add.43, func=$348load_global.31, args=[Var($358binary_multiply.36, loop_hafnian_batch.py:64), Var($372binary_add.43, loop_hafnian_batch.py:64)], kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:34,029 on stmt: $376get_iter.45 = getiter(value=$374call_function.44)
DEBUG 2022-01-28 15:49:34,029 on stmt: $phi378.1 = $376get_iter.45
DEBUG 2022-01-28 15:49:34,029 on stmt: jump 378
DEBUG 2022-01-28 15:49:34,029 ==== SSA block analysis pass on 378
DEBUG 2022-01-28 15:49:34,029 Running <numba.core.ssa._GatherDefsHandler object at 0x000002410E175790>
DEBUG 2022-01-28 15:49:34,029 on stmt: $378for_iter.2 = iternext(value=$phi378.1)
DEBUG 2022-01-28 15:49:34,029 on stmt: $378for_iter.3 = pair_first(value=$378for_iter.2)
DEBUG 2022-01-28 15:49:34,029 on stmt: $378for_iter.4 = pair_second(value=$378for_iter.2)
DEBUG 2022-01-28 15:49:34,029 on stmt: $phi380.2 = $378for_iter.3
DEBUG 2022-01-28 15:49:34,029 on stmt: branch $378for_iter.4, 380, 510
DEBUG 2022-01-28 15:49:34,029 ==== SSA block analysis pass on 380
DEBUG 2022-01-28 15:49:34,029 Running <numba.core.ssa._GatherDefsHandler object at 0x000002410E175790>
DEBUG 2022-01-28 15:49:34,029 on stmt: N_det = $phi380.2
DEBUG 2022-01-28 15:49:34,029 on stmt: N = N_fixed + N_det
DEBUG 2022-01-28 15:49:34,029 on stmt: $const390.6 = const(float, -1.0)
DEBUG 2022-01-28 15:49:34,029 on stmt: $const394.8 = const(int, 2)
DEBUG 2022-01-28 15:49:34,029 on stmt: $396binary_floor_divide.9 = N // $const394.8
DEBUG 2022-01-28 15:49:34,029 on stmt: $400binary_subtract.11 = $396binary_floor_divide.9 - edges_sum
DEBUG 2022-01-28 15:49:34,029 on stmt: plus_minus = $const390.6 ** $400binary_subtract.11
DEBUG 2022-01-28 15:49:34,029 on stmt: $const410.15 = const(int, 2)
DEBUG 2022-01-28 15:49:34,029 on stmt: $412binary_floor_divide.16 = N_det // $const410.15
DEBUG 2022-01-28 15:49:34,029 on stmt: $const416.18 = const(int, 0)
DEBUG 2022-01-28 15:49:34,029 on stmt: $418binary_subscr.19 = static_getitem(value=kept_edges, index=0, index_var=$const416.18, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:34,029 on stmt: $420build_tuple.20 = build_tuple(items=[Var($412binary_floor_divide.16, loop_hafnian_batch.py:68), Var($418binary_subscr.19, loop_hafnian_batch.py:68)])
DEBUG 2022-01-28 15:49:34,029 on stmt: $422binary_subscr.21 = getitem(value=binoms, index=$420build_tuple.20, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:34,029 on stmt: n_det_binom_prod = $422binary_subscr.21 * binom_prod
DEBUG 2022-01-28 15:49:34,029 on stmt: $const432.25 = const(int, 2)
DEBUG 2022-01-28 15:49:34,029 on stmt: $434binary_modulo.26 = N_det % $const432.25
DEBUG 2022-01-28 15:49:34,029 on stmt: $const436.27 = const(int, 0)
DEBUG 2022-01-28 15:49:34,029 on stmt: $438compare_op.28 = $434binary_modulo.26 == $const436.27
DEBUG 2022-01-28 15:49:34,029 on stmt: bool440 = global(bool: <class 'bool'>)
DEBUG 2022-01-28 15:49:34,029 on stmt: $440pred = call bool440($438compare_op.28, func=bool440, args=(Var($438compare_op.28, loop_hafnian_batch.py:70),), kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:34,029 on stmt: branch $440pred, 444, 478
DEBUG 2022-01-28 15:49:34,029 ==== SSA block analysis pass on 444
DEBUG 2022-01-28 15:49:34,029 Running <numba.core.ssa._GatherDefsHandler object at 0x000002410E175790>
DEBUG 2022-01-28 15:49:34,029 on stmt: $450binary_subscr.6 = getitem(value=Hnew, index=N_det, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:34,037 on stmt: $456binary_multiply.9 = n_det_binom_prod * plus_minus
DEBUG 2022-01-28 15:49:34,037 on stmt: $const462.12 = const(int, 2)
DEBUG 2022-01-28 15:49:34,037 on stmt: $464binary_floor_divide.13 = N // $const462.12
DEBUG 2022-01-28 15:49:34,037 on stmt: $466binary_subscr.14 = getitem(value=f_even, index=$464binary_floor_divide.13, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:34,037 on stmt: $468binary_multiply.15 = $456binary_multiply.9 * $466binary_subscr.14
DEBUG 2022-01-28 15:49:34,037 on stmt: $470inplace_add.16 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$450binary_subscr.6, rhs=$468binary_multiply.15, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-01-28 15:49:34,037 on stmt: Hnew[N_det] = $470inplace_add.16
DEBUG 2022-01-28 15:49:34,037 on stmt: jump 506
DEBUG 2022-01-28 15:49:34,037 ==== SSA block analysis pass on 478
DEBUG 2022-01-28 15:49:34,037 Running <numba.core.ssa._GatherDefsHandler object at 0x000002410E175790>
DEBUG 2022-01-28 15:49:34,037 on stmt: $484binary_subscr.6 = getitem(value=Hnew, index=N_det, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:34,037 on stmt: $490binary_multiply.9 = n_det_binom_prod * plus_minus
DEBUG 2022-01-28 15:49:34,037 on stmt: $496binary_subscr.12 = getitem(value=f_odd, index=N, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:34,037 on stmt: $498binary_multiply.13 = $490binary_multiply.9 * $496binary_subscr.12
DEBUG 2022-01-28 15:49:34,037 on stmt: $500inplace_add.14 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$484binary_subscr.6, rhs=$498binary_multiply.13, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-01-28 15:49:34,037 on stmt: Hnew[N_det] = $500inplace_add.14
DEBUG 2022-01-28 15:49:34,037 on stmt: jump 506
DEBUG 2022-01-28 15:49:34,037 ==== SSA block analysis pass on 506
DEBUG 2022-01-28 15:49:34,037 Running <numba.core.ssa._GatherDefsHandler object at 0x000002410E175790>
DEBUG 2022-01-28 15:49:34,037 on stmt: jump 378
DEBUG 2022-01-28 15:49:34,037 ==== SSA block analysis pass on 510
DEBUG 2022-01-28 15:49:34,037 Running <numba.core.ssa._GatherDefsHandler object at 0x000002410E175790>
DEBUG 2022-01-28 15:49:34,037 on stmt: $514inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=H_batch, rhs=Hnew, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-01-28 15:49:34,037 on stmt: H_batch = $514inplace_add.3
DEBUG 2022-01-28 15:49:34,037 on stmt: jump 158
DEBUG 2022-01-28 15:49:34,039 ==== SSA block analysis pass on 520
DEBUG 2022-01-28 15:49:34,039 Running <numba.core.ssa._GatherDefsHandler object at 0x000002410E175790>
DEBUG 2022-01-28 15:49:34,039 on stmt: bool522 = global(bool: <class 'bool'>)
DEBUG 2022-01-28 15:49:34,039 on stmt: $522pred = call bool522(glynn, func=bool522, args=(Var(glynn, loop_hafnian_batch.py:24),), kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:34,039 on stmt: branch $522pred, 526, 580
DEBUG 2022-01-28 15:49:34,039 ==== SSA block analysis pass on 526
DEBUG 2022-01-28 15:49:34,039 Running <numba.core.ssa._GatherDefsHandler object at 0x000002410E175790>
DEBUG 2022-01-28 15:49:34,039 on stmt: $526load_global.0 = global(range: <class 'range'>)
DEBUG 2022-01-28 15:49:34,039 on stmt: $530load_attr.2 = getattr(value=H_batch, attr=shape)
DEBUG 2022-01-28 15:49:34,039 on stmt: $const532.3 = const(int, 0)
DEBUG 2022-01-28 15:49:34,039 on stmt: $534binary_subscr.4 = static_getitem(value=$530load_attr.2, index=0, index_var=$const532.3, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:34,039 on stmt: $536call_function.5 = call $526load_global.0($534binary_subscr.4, func=$526load_global.0, args=[Var($534binary_subscr.4, loop_hafnian_batch.py:78)], kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:34,039 on stmt: $538get_iter.6 = getiter(value=$536call_function.5)
DEBUG 2022-01-28 15:49:34,039 on stmt: $phi540.0 = $538get_iter.6
DEBUG 2022-01-28 15:49:34,039 on stmt: jump 540
DEBUG 2022-01-28 15:49:34,039 ==== SSA block analysis pass on 540
DEBUG 2022-01-28 15:49:34,039 Running <numba.core.ssa._GatherDefsHandler object at 0x000002410E175790>
DEBUG 2022-01-28 15:49:34,039 on stmt: $540for_iter.1 = iternext(value=$phi540.0)
DEBUG 2022-01-28 15:49:34,039 on stmt: $540for_iter.2 = pair_first(value=$540for_iter.1)
DEBUG 2022-01-28 15:49:34,039 on stmt: $540for_iter.3 = pair_second(value=$540for_iter.1)
DEBUG 2022-01-28 15:49:34,039 on stmt: $phi542.1 = $540for_iter.2
DEBUG 2022-01-28 15:49:34,039 on stmt: branch $540for_iter.3, 542, 580
DEBUG 2022-01-28 15:49:34,039 ==== SSA block analysis pass on 542
DEBUG 2022-01-28 15:49:34,039 Running <numba.core.ssa._GatherDefsHandler object at 0x000002410E175790>
DEBUG 2022-01-28 15:49:34,039 on stmt: j = $phi542.1
DEBUG 2022-01-28 15:49:34,039 on stmt: x = N_fixed + j
DEBUG 2022-01-28 15:49:34,039 on stmt: $558binary_subscr.9 = getitem(value=H_batch, index=j, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:34,039 on stmt: $const560.10 = const(float, 0.5)
DEBUG 2022-01-28 15:49:34,039 on stmt: $const564.12 = const(int, 2)
DEBUG 2022-01-28 15:49:34,039 on stmt: $566binary_floor_divide.13 = x // $const564.12
DEBUG 2022-01-28 15:49:34,039 on stmt: $568binary_power.14 = $const560.10 ** $566binary_floor_divide.13
DEBUG 2022-01-28 15:49:34,039 on stmt: $570inplace_multiply.15 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=$558binary_subscr.9, rhs=$568binary_power.14, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-01-28 15:49:34,039 on stmt: H_batch[j] = $570inplace_multiply.15
DEBUG 2022-01-28 15:49:34,039 on stmt: jump 540
DEBUG 2022-01-28 15:49:34,039 ==== SSA block analysis pass on 580
DEBUG 2022-01-28 15:49:34,039 Running <numba.core.ssa._GatherDefsHandler object at 0x000002410E175790>
DEBUG 2022-01-28 15:49:34,039 on stmt: $582return_value.1 = cast(value=H_batch)
DEBUG 2022-01-28 15:49:34,039 on stmt: return $582return_value.1
DEBUG 2022-01-28 15:49:34,039 defs defaultdict(<class 'list'>,
            {'$102load_method.44': [<numba.core.ir.Assign object at 0x000002410F8BFA00>],
             '$104call_method.45': [<numba.core.ir.Assign object at 0x000002410F8BFC10>],
             '$112load_global.48': [<numba.core.ir.Assign object at 0x000002410E141100>],
             '$120load_global.51': [<numba.core.ir.Assign object at 0x000002410E141640>],
             '$122load_attr.52': [<numba.core.ir.Assign object at 0x000002410E1417C0>],
             '$128binary_multiply.55': [<numba.core.ir.Assign object at 0x000002410E141C10>],
             '$132binary_add.57': [<numba.core.ir.Assign object at 0x000002410E141EB0>],
             '$136binary_add.59': [<numba.core.ir.Assign object at 0x000002410E1431F0>],
             '$138load_global.60': [<numba.core.ir.Assign object at 0x000002410E143340>],
             '$140load_attr.61': [<numba.core.ir.Assign object at 0x000002410E1434C0>],
             '$148load_global.64': [<numba.core.ir.Assign object at 0x000002410E143AC0>],
             '$150load_method.65': [<numba.core.ir.Assign object at 0x000002410E143C40>],
             '$154call_method.67': [<numba.core.ir.Assign object at 0x000002410E143F70>],
             '$156get_iter.68': [<numba.core.ir.Assign object at 0x000002410E1470A0>],
             '$158for_iter.1': [<numba.core.ir.Assign object at 0x000002410F8B5790>],
             '$158for_iter.2': [<numba.core.ir.Assign object at 0x000002410F8BD5B0>],
             '$158for_iter.3': [<numba.core.ir.Assign object at 0x000002410F8BF250>],
             '$164load_global.2': [<numba.core.ir.Assign object at 0x000002410F899C40>],
             '$166load_attr.3': [<numba.core.ir.Assign object at 0x000002410E147280>],
             '$172binary_multiply.6': [<numba.core.ir.Assign object at 0x000002410E1476D0>],
             '$176binary_add.8': [<numba.core.ir.Assign object at 0x000002410E147970>],
             '$180binary_add.10': [<numba.core.ir.Assign object at 0x000002410E147C70>],
             '$182load_global.11': [<numba.core.ir.Assign object at 0x000002410E147DC0>],
             '$184load_attr.12': [<numba.core.ir.Assign object at 0x000002410E147F40>],
             '$18build_slice.7': [<numba.core.ir.Assign object at 0x000002410F8B7E80>],
             '$18build_slice.8': [<numba.core.ir.Assign object at 0x000002410F8B7FA0>],
             '$192load_global.15': [<numba.core.ir.Assign object at 0x000002410E148580>],
             '$204load_method.20': [<numba.core.ir.Assign object at 0x000002410E148D00>],
             '$20build_tuple.9': [<numba.core.ir.Assign object at 0x000002410F8BB190>],
             '$214load_global.23': [<numba.core.ir.Assign object at 0x000002410E14B400>],
             '$222binary_floor_divide.27': [<numba.core.ir.Assign object at 0x000002410E14B9D0>],
             '$224call_function.28': [<numba.core.ir.Assign object at 0x000002410E14BB80>],
             '$226get_iter.29': [<numba.core.ir.Assign object at 0x000002410E14BCA0>],
             '$228for_iter.2': [<numba.core.ir.Assign object at 0x000002410E14B280>],
             '$228for_iter.3': [<numba.core.ir.Assign object at 0x000002410E14BD90>],
             '$228for_iter.4': [<numba.core.ir.Assign object at 0x000002410E14BEB0>],
             '$240binary_subscr.7': [<numba.core.ir.Assign object at 0x000002410E14C7F0>],
             '$246binary_subscr.10': [<numba.core.ir.Assign object at 0x000002410E14CBB0>],
             '$248build_tuple.11': [<numba.core.ir.Assign object at 0x000002410E14CD30>],
             '$250binary_subscr.12': [<numba.core.ir.Assign object at 0x000002410E14CEB0>],
             '$252inplace_multiply.13': [<numba.core.ir.Assign object at 0x000002410E14E070>],
             '$260pred': [<numba.core.ir.Assign object at 0x000002410E14E400>],
             '$268binary_multiply.3': [<numba.core.ir.Assign object at 0x000002410E14E910>],
             '$282load_global.1': [<numba.core.ir.Assign object at 0x000002410E150160>],
             '$28load_attr.12': [<numba.core.ir.Assign object at 0x000002410F8BB6A0>],
             '$292call_function.6': [<numba.core.ir.Assign object at 0x000002410E1507C0>],
             '$294unpack_sequence.10': [<numba.core.ir.Assign object at 0x000002410E150DC0>],
             '$294unpack_sequence.11': [<numba.core.ir.Assign object at 0x000002410E150910>],
             '$294unpack_sequence.7': [<numba.core.ir.Assign object at 0x000002410E150A60>],
             '$294unpack_sequence.8': [<numba.core.ir.Assign object at 0x000002410E150B80>],
             '$294unpack_sequence.9': [<numba.core.ir.Assign object at 0x000002410E150CA0>],
             '$304load_global.12': [<numba.core.ir.Assign object at 0x000002410E1523A0>],
             '$312load_global.15': [<numba.core.ir.Assign object at 0x000002410E1528E0>],
             '$328load_global.22': [<numba.core.ir.Assign object at 0x000002410E1542E0>],
             '$348load_global.31': [<numba.core.ir.Assign object at 0x000002410E154EE0>],
             '$356binary_subscr.35': [<numba.core.ir.Assign object at 0x000002410F8999A0>],
             '$358binary_multiply.36': [<numba.core.ir.Assign object at 0x000002410E156670>],
             '$364binary_multiply.39': [<numba.core.ir.Assign object at 0x000002410E156A90>],
             '$368binary_add.41': [<numba.core.ir.Assign object at 0x000002410E156D30>],
             '$372binary_add.43': [<numba.core.ir.Assign object at 0x000002410E159070>],
             '$374call_function.44': [<numba.core.ir.Assign object at 0x000002410E159220>],
             '$376get_iter.45': [<numba.core.ir.Assign object at 0x000002410E159340>],
             '$378for_iter.2': [<numba.core.ir.Assign object at 0x000002410E152CD0>],
             '$378for_iter.3': [<numba.core.ir.Assign object at 0x000002410E1541F0>],
             '$378for_iter.4': [<numba.core.ir.Assign object at 0x000002410E1546D0>],
             '$396binary_floor_divide.9': [<numba.core.ir.Assign object at 0x000002410E159DF0>],
             '$400binary_subtract.11': [<numba.core.ir.Assign object at 0x000002410E15B0D0>],
             '$40load_method.17': [<numba.core.ir.Assign object at 0x000002410F8BBEE0>],
             '$412binary_floor_divide.16': [<numba.core.ir.Assign object at 0x000002410E15B8B0>],
             '$418binary_subscr.19': [<numba.core.ir.Assign object at 0x000002410F899B20>],
             '$420build_tuple.20': [<numba.core.ir.Assign object at 0x000002410E15BE50>],
             '$422binary_subscr.21': [<numba.core.ir.Assign object at 0x000002410E15BFD0>],
             '$42call_method.18': [<numba.core.ir.Assign object at 0x000002410F8B5130>],
             '$434binary_modulo.26': [<numba.core.ir.Assign object at 0x000002410E15D7F0>],
             '$438compare_op.28': [<numba.core.ir.Assign object at 0x000002410E15DAF0>],
             '$440pred': [<numba.core.ir.Assign object at 0x000002410E15DD60>],
             '$450binary_subscr.6': [<numba.core.ir.Assign object at 0x000002410E15DFD0>],
             '$456binary_multiply.9': [<numba.core.ir.Assign object at 0x000002410E15F3D0>],
             '$464binary_floor_divide.13': [<numba.core.ir.Assign object at 0x000002410E15F910>],
             '$466binary_subscr.14': [<numba.core.ir.Assign object at 0x000002410E15FA90>],
             '$468binary_multiply.15': [<numba.core.ir.Assign object at 0x000002410E15FC10>],
             '$470inplace_add.16': [<numba.core.ir.Assign object at 0x000002410E15FD90>],
             '$484binary_subscr.6': [<numba.core.ir.Assign object at 0x000002410E1612B0>],
             '$490binary_multiply.9': [<numba.core.ir.Assign object at 0x000002410E161670>],
             '$496binary_subscr.12': [<numba.core.ir.Assign object at 0x000002410E161A30>],
             '$498binary_multiply.13': [<numba.core.ir.Assign object at 0x000002410E161BB0>],
             '$500inplace_add.14': [<numba.core.ir.Assign object at 0x000002410E161D30>],
             '$514inplace_add.3': [<numba.core.ir.Assign object at 0x000002410E163190>],
             '$522pred': [<numba.core.ir.Assign object at 0x000002410E1636A0>],
             '$526load_global.0': [<numba.core.ir.Assign object at 0x000002410E1638E0>],
             '$530load_attr.2': [<numba.core.ir.Assign object at 0x000002410E163B80>],
             '$534binary_subscr.4': [<numba.core.ir.Assign object at 0x000002410C5430D0>],
             '$536call_function.5': [<numba.core.ir.Assign object at 0x000002410E1650A0>],
             '$538get_iter.6': [<numba.core.ir.Assign object at 0x000002410E1651C0>],
             '$540for_iter.1': [<numba.core.ir.Assign object at 0x000002410E1654F0>],
             '$540for_iter.2': [<numba.core.ir.Assign object at 0x000002410E165610>],
             '$540for_iter.3': [<numba.core.ir.Assign object at 0x000002410E165730>],
             '$54binary_multiply.23': [<numba.core.ir.Assign object at 0x000002410F8B58B0>],
             '$558binary_subscr.9': [<numba.core.ir.Assign object at 0x000002410E167490>],
             '$566binary_floor_divide.13': [<numba.core.ir.Assign object at 0x000002410E167A30>],
             '$568binary_power.14': [<numba.core.ir.Assign object at 0x000002410E167BB0>],
             '$56binary_add.24': [<numba.core.ir.Assign object at 0x000002410F8B5A30>],
             '$570inplace_multiply.15': [<numba.core.ir.Assign object at 0x000002410E167D30>],
             '$582return_value.1': [<numba.core.ir.Assign object at 0x000002410E167790>],
             '$64load_global.27': [<numba.core.ir.Assign object at 0x000002410F8B5F40>],
             '$66load_method.28': [<numba.core.ir.Assign object at 0x000002410F8BD100>],
             '$68load_global.29': [<numba.core.ir.Assign object at 0x000002410F8BD280>],
             '$70load_method.30': [<numba.core.ir.Assign object at 0x000002410F8BD400>],
             '$74build_list.32': [<numba.core.ir.Assign object at 0x000002410F8BD6D0>],
             '$76call_method.33': [<numba.core.ir.Assign object at 0x000002410F8BD8B0>],
             '$80build_tuple.35': [<numba.core.ir.Assign object at 0x000002410F8BDAF0>],
             '$86load_global.37': [<numba.core.ir.Assign object at 0x000002410F8BDEE0>],
             '$88load_method.38': [<numba.core.ir.Assign object at 0x000002410F8BF0A0>],
             '$94binary_add.41': [<numba.core.ir.Assign object at 0x000002410F8BF4F0>],
             '$const12.4': [<numba.core.ir.Assign object at 0x000002410F8B7A00>],
             '$const124.53': [<numba.core.ir.Assign object at 0x000002410E141940>],
             '$const134.58': [<numba.core.ir.Assign object at 0x000002410E143040>],
             '$const14.5': [<numba.core.ir.Assign object at 0x000002410F8B7B80>],
             '$const16.6': [<numba.core.ir.Assign object at 0x000002410F8B7D00>],
             '$const168.4': [<numba.core.ir.Assign object at 0x000002410E147400>],
             '$const178.9': [<numba.core.ir.Assign object at 0x000002410E147AC0>],
             '$const216.24': [<numba.core.ir.Assign object at 0x000002410E14B580>],
             '$const220.26': [<numba.core.ir.Assign object at 0x000002410E14B820>],
             '$const264.1': [<numba.core.ir.Assign object at 0x000002410E14E640>],
             '$const30.13': [<numba.core.ir.Assign object at 0x000002410F8BB820>],
             '$const350.32': [<numba.core.ir.Assign object at 0x000002410E1560A0>],
             '$const354.34': [<numba.core.ir.Assign object at 0x000002410E156340>],
             '$const36.15': [<numba.core.ir.Assign object at 0x000002410F8BBC40>],
             '$const360.37': [<numba.core.ir.Assign object at 0x000002410E1567C0>],
             '$const370.42': [<numba.core.ir.Assign object at 0x000002410E156E80>],
             '$const390.6': [<numba.core.ir.Assign object at 0x000002410E1599A0>],
             '$const394.8': [<numba.core.ir.Assign object at 0x000002410E159C40>],
             '$const4.1': [<numba.core.ir.Assign object at 0x000002410F8B74C0>],
             '$const410.15': [<numba.core.ir.Assign object at 0x000002410E15B700>],
             '$const416.18': [<numba.core.ir.Assign object at 0x000002410E15BB20>],
             '$const432.25': [<numba.core.ir.Assign object at 0x000002410E15D640>],
             '$const436.27': [<numba.core.ir.Assign object at 0x000002410E15D940>],
             '$const462.12': [<numba.core.ir.Assign object at 0x000002410E15F760>],
             '$const50.21': [<numba.core.ir.Assign object at 0x000002410F8B55E0>],
             '$const532.3': [<numba.core.ir.Assign object at 0x000002410E163D00>],
             '$const560.10': [<numba.core.ir.Assign object at 0x000002410E1675E0>],
             '$const564.12': [<numba.core.ir.Assign object at 0x000002410E167880>],
             '$const92.40': [<numba.core.ir.Assign object at 0x000002410F8BF340>],
             '$phi158.0': [<numba.core.ir.Assign object at 0x000002410F8B73D0>],
             '$phi162.1': [<numba.core.ir.Assign object at 0x000002410F8B53D0>],
             '$phi228.1': [<numba.core.ir.Assign object at 0x000002410E1475B0>],
             '$phi230.2': [<numba.core.ir.Assign object at 0x000002410E148C10>],
             '$phi378.1': [<numba.core.ir.Assign object at 0x000002410E150310>],
             '$phi380.2': [<numba.core.ir.Assign object at 0x000002410E152A90>],
             '$phi540.0': [<numba.core.ir.Assign object at 0x000002410E163A90>],
             '$phi542.1': [<numba.core.ir.Assign object at 0x000002410E165430>],
             'A': [<numba.core.ir.Assign object at 0x000002410F899460>],
             'AX_S': [<numba.core.ir.Assign object at 0x000002410E150E80>],
             'D': [<numba.core.ir.Assign object at 0x000002410F8995E0>],
             'D_S': [<numba.core.ir.Assign object at 0x000002410E152100>],
             'E': [<numba.core.ir.Assign object at 0x000002410E1526A0>],
             'H_batch': [<numba.core.ir.Assign object at 0x000002410E143940>,
                         <numba.core.ir.Assign object at 0x000002410E163250>],
             'Hnew': [<numba.core.ir.Assign object at 0x000002410E148400>],
             'N': [<numba.core.ir.Assign object at 0x000002410E159730>],
             'N_det': [<numba.core.ir.Assign object at 0x000002410E156B80>],
             'N_fixed': [<numba.core.ir.Assign object at 0x000002410F8B5250>],
             'N_max': [<numba.core.ir.Assign object at 0x000002410F8B5CD0>],
             'XD_S': [<numba.core.ir.Assign object at 0x000002410E150FA0>],
             'batch_max': [<numba.core.ir.Assign object at 0x000002410F899400>],
             'binom_prod': [<numba.core.ir.Assign object at 0x000002410E14B160>,
                            <numba.core.ir.Assign object at 0x000002410E14E130>],
             'binoms': [<numba.core.ir.Assign object at 0x000002410E141400>],
             'bool260': [<numba.core.ir.Assign object at 0x000002410E14E2E0>],
             'bool440': [<numba.core.ir.Assign object at 0x000002410E15DC40>],
             'bool522': [<numba.core.ir.Assign object at 0x000002410E163580>],
             'delta': [<numba.core.ir.Assign object at 0x000002410E14EBB0>,
                       <numba.core.ir.Assign object at 0x000002410E14EF10>],
             'edge_reps': [<numba.core.ir.Assign object at 0x000002410F8BDCD0>],
             'edges_sum': [<numba.core.ir.Assign object at 0x000002410E148F10>],
             'f_even': [<numba.core.ir.Assign object at 0x000002410E1540A0>],
             'f_odd': [<numba.core.ir.Assign object at 0x000002410E154CA0>],
             'fixed_edge_reps': [<numba.core.ir.Assign object at 0x000002410F899DC0>],
             'glynn': [<numba.core.ir.Assign object at 0x000002410F8B7220>],
             'i': [<numba.core.ir.Assign object at 0x000002410E14C1C0>],
             'j': [<numba.core.ir.Assign object at 0x000002410E141D00>,
                   <numba.core.ir.Assign object at 0x000002410E1659D0>],
             'kept_edges': [<numba.core.ir.Assign object at 0x000002410E1489A0>],
             'max_binom': [<numba.core.ir.Assign object at 0x000002410F8BFE50>],
             'n': [<numba.core.ir.Assign object at 0x000002410F899760>],
             'n_det_binom_prod': [<numba.core.ir.Assign object at 0x000002410E15D2B0>],
             'oddV': [<numba.core.ir.Assign object at 0x000002410F8997C0>],
             'oddVX_S': [<numba.core.ir.Assign object at 0x000002410E152220>],
             'odd_cutoff': [<numba.core.ir.Assign object at 0x000002410F8B7100>],
             'oddloop': [<numba.core.ir.Assign object at 0x000002410F899790>],
             'plus_minus': [<numba.core.ir.Assign object at 0x000002410E15B250>],
             'steps': [<numba.core.ir.Assign object at 0x000002410F8BF6D0>],
             'x': [<numba.core.ir.Assign object at 0x000002410E165D90>]})
DEBUG 2022-01-28 15:49:34,039 SSA violators {'binom_prod', 'j', 'H_batch', 'delta'}
DEBUG 2022-01-28 15:49:34,039 Fix SSA violator on var binom_prod
DEBUG 2022-01-28 15:49:34,039 ==== SSA block rewrite pass on 0
DEBUG 2022-01-28 15:49:34,039 Running <numba.core.ssa._FreshVarHandler object at 0x000002410F899370>
DEBUG 2022-01-28 15:49:34,039 on stmt: A = arg(0, name=A)
DEBUG 2022-01-28 15:49:34,039 on stmt: D = arg(1, name=D)
DEBUG 2022-01-28 15:49:34,039 on stmt: fixed_edge_reps = arg(2, name=fixed_edge_reps)
DEBUG 2022-01-28 15:49:34,039 on stmt: batch_max = arg(3, name=batch_max)
DEBUG 2022-01-28 15:49:34,039 on stmt: odd_cutoff = arg(4, name=odd_cutoff)
DEBUG 2022-01-28 15:49:34,039 on stmt: glynn = arg(5, name=glynn)
DEBUG 2022-01-28 15:49:34,039 on stmt: $const4.1 = const(int, 0)
DEBUG 2022-01-28 15:49:34,039 on stmt: oddloop = static_getitem(value=D, index=0, index_var=$const4.1, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:34,039 on stmt: $const12.4 = const(int, 0)
DEBUG 2022-01-28 15:49:34,039 on stmt: $const14.5 = const(NoneType, None)
DEBUG 2022-01-28 15:49:34,039 on stmt: $const16.6 = const(NoneType, None)
DEBUG 2022-01-28 15:49:34,039 on stmt: $18build_slice.7 = global(slice: <class 'slice'>)
DEBUG 2022-01-28 15:49:34,047 on stmt: $18build_slice.8 = call $18build_slice.7($const14.5, $const16.6, func=$18build_slice.7, args=(Var($const14.5, loop_hafnian_batch.py:25), Var($const16.6, loop_hafnian_batch.py:25)), kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:34,047 on stmt: $20build_tuple.9 = build_tuple(items=[Var($const12.4, loop_hafnian_batch.py:25), Var($18build_slice.8, loop_hafnian_batch.py:25)])
DEBUG 2022-01-28 15:49:34,047 on stmt: oddV = static_getitem(value=A, index=(0, slice(None, None, None)), index_var=$20build_tuple.9, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:34,047 on stmt: $28load_attr.12 = getattr(value=A, attr=shape)
DEBUG 2022-01-28 15:49:34,047 on stmt: $const30.13 = const(int, 0)
DEBUG 2022-01-28 15:49:34,047 on stmt: n = static_getitem(value=$28load_attr.12, index=0, index_var=$const30.13, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:34,047 on stmt: $const36.15 = const(int, 2)
DEBUG 2022-01-28 15:49:34,047 on stmt: $40load_method.17 = getattr(value=fixed_edge_reps, attr=sum)
DEBUG 2022-01-28 15:49:34,047 on stmt: $42call_method.18 = call $40load_method.17(func=$40load_method.17, args=[], kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:34,047 on stmt: N_fixed = $const36.15 * $42call_method.18
DEBUG 2022-01-28 15:49:34,047 on stmt: $const50.21 = const(int, 2)
DEBUG 2022-01-28 15:49:34,047 on stmt: $54binary_multiply.23 = $const50.21 * batch_max
DEBUG 2022-01-28 15:49:34,047 on stmt: $56binary_add.24 = N_fixed + $54binary_multiply.23
DEBUG 2022-01-28 15:49:34,047 on stmt: N_max = $56binary_add.24 + odd_cutoff
DEBUG 2022-01-28 15:49:34,047 on stmt: $64load_global.27 = global(np: <module 'numpy' from 'C:\\Users\\zl4821\\Anaconda3\\envs\\GBS\\lib\\site-packages\\numpy\\__init__.py'>)
DEBUG 2022-01-28 15:49:34,047 on stmt: $66load_method.28 = getattr(value=$64load_global.27, attr=concatenate)
DEBUG 2022-01-28 15:49:34,047 on stmt: $68load_global.29 = global(np: <module 'numpy' from 'C:\\Users\\zl4821\\Anaconda3\\envs\\GBS\\lib\\site-packages\\numpy\\__init__.py'>)
DEBUG 2022-01-28 15:49:34,049 on stmt: $70load_method.30 = getattr(value=$68load_global.29, attr=array)
DEBUG 2022-01-28 15:49:34,049 on stmt: $74build_list.32 = build_list(items=[Var(batch_max, loop_hafnian_batch.py:24)])
DEBUG 2022-01-28 15:49:34,049 on stmt: $76call_method.33 = call $70load_method.30($74build_list.32, func=$70load_method.30, args=[Var($74build_list.32, loop_hafnian_batch.py:32)], kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:34,049 on stmt: $80build_tuple.35 = build_tuple(items=[Var($76call_method.33, loop_hafnian_batch.py:32), Var(fixed_edge_reps, loop_hafnian_batch.py:24)])
DEBUG 2022-01-28 15:49:34,049 on stmt: edge_reps = call $66load_method.28($80build_tuple.35, func=$66load_method.28, args=[Var($80build_tuple.35, loop_hafnian_batch.py:32)], kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:34,049 on stmt: $86load_global.37 = global(np: <module 'numpy' from 'C:\\Users\\zl4821\\Anaconda3\\envs\\GBS\\lib\\site-packages\\numpy\\__init__.py'>)
DEBUG 2022-01-28 15:49:34,049 on stmt: $88load_method.38 = getattr(value=$86load_global.37, attr=prod)
DEBUG 2022-01-28 15:49:34,049 on stmt: $const92.40 = const(int, 1)
DEBUG 2022-01-28 15:49:34,049 on stmt: $94binary_add.41 = edge_reps + $const92.40
DEBUG 2022-01-28 15:49:34,049 on stmt: steps = call $88load_method.38($94binary_add.41, func=$88load_method.38, args=[Var($94binary_add.41, loop_hafnian_batch.py:33)], kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:34,049 on stmt: $102load_method.44 = getattr(value=edge_reps, attr=max)
DEBUG 2022-01-28 15:49:34,049 on stmt: $104call_method.45 = call $102load_method.44(func=$102load_method.44, args=[], kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:34,049 on stmt: max_binom = $104call_method.45 + odd_cutoff
DEBUG 2022-01-28 15:49:34,049 on stmt: $112load_global.48 = global(precompute_binoms: CPUDispatcher(<function precompute_binoms at 0x00000241074240D0>))
DEBUG 2022-01-28 15:49:34,049 on stmt: binoms = call $112load_global.48(max_binom, func=$112load_global.48, args=[Var(max_binom, loop_hafnian_batch.py:35)], kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:34,049 on stmt: $120load_global.51 = global(np: <module 'numpy' from 'C:\\Users\\zl4821\\Anaconda3\\envs\\GBS\\lib\\site-packages\\numpy\\__init__.py'>)
DEBUG 2022-01-28 15:49:34,049 on stmt: $122load_attr.52 = getattr(value=$120load_global.51, attr=zeros)
DEBUG 2022-01-28 15:49:34,049 on stmt: $const124.53 = const(int, 2)
DEBUG 2022-01-28 15:49:34,049 on stmt: $128binary_multiply.55 = $const124.53 * batch_max
DEBUG 2022-01-28 15:49:34,049 on stmt: $132binary_add.57 = $128binary_multiply.55 + odd_cutoff
DEBUG 2022-01-28 15:49:34,049 on stmt: $const134.58 = const(int, 1)
DEBUG 2022-01-28 15:49:34,049 on stmt: $136binary_add.59 = $132binary_add.57 + $const134.58
DEBUG 2022-01-28 15:49:34,049 on stmt: $138load_global.60 = global(np: <module 'numpy' from 'C:\\Users\\zl4821\\Anaconda3\\envs\\GBS\\lib\\site-packages\\numpy\\__init__.py'>)
DEBUG 2022-01-28 15:49:34,049 on stmt: $140load_attr.61 = getattr(value=$138load_global.60, attr=complex128)
DEBUG 2022-01-28 15:49:34,049 on stmt: H_batch = call $122load_attr.52($136binary_add.59, func=$122load_attr.52, args=[Var($136binary_add.59, loop_hafnian_batch.py:38)], kws=[('dtype', Var($140load_attr.61, loop_hafnian_batch.py:38))], vararg=None, target=None)
DEBUG 2022-01-28 15:49:34,049 on stmt: $148load_global.64 = global(numba: <module 'numba' from 'C:\\Users\\zl4821\\Anaconda3\\envs\\GBS\\lib\\site-packages\\numba\\__init__.py'>)
DEBUG 2022-01-28 15:49:34,049 on stmt: $150load_method.65 = getattr(value=$148load_global.64, attr=prange)
DEBUG 2022-01-28 15:49:34,049 on stmt: $154call_method.67 = call $150load_method.65(steps, func=$150load_method.65, args=[Var(steps, loop_hafnian_batch.py:33)], kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:34,049 on stmt: $156get_iter.68 = getiter(value=$154call_method.67)
DEBUG 2022-01-28 15:49:34,049 on stmt: $phi158.0 = $156get_iter.68
DEBUG 2022-01-28 15:49:34,049 on stmt: jump 158
DEBUG 2022-01-28 15:49:34,049 ==== SSA block rewrite pass on 158
DEBUG 2022-01-28 15:49:34,049 Running <numba.core.ssa._FreshVarHandler object at 0x000002410F899370>
DEBUG 2022-01-28 15:49:34,049 on stmt: $158for_iter.1 = iternext(value=$phi158.0)
DEBUG 2022-01-28 15:49:34,049 on stmt: $158for_iter.2 = pair_first(value=$158for_iter.1)
DEBUG 2022-01-28 15:49:34,049 on stmt: $158for_iter.3 = pair_second(value=$158for_iter.1)
DEBUG 2022-01-28 15:49:34,049 on stmt: $phi162.1 = $158for_iter.2
DEBUG 2022-01-28 15:49:34,049 on stmt: branch $158for_iter.3, 162, 520
DEBUG 2022-01-28 15:49:34,049 ==== SSA block rewrite pass on 162
DEBUG 2022-01-28 15:49:34,049 Running <numba.core.ssa._FreshVarHandler object at 0x000002410F899370>
DEBUG 2022-01-28 15:49:34,049 on stmt: j = $phi162.1
DEBUG 2022-01-28 15:49:34,049 on stmt: $164load_global.2 = global(np: <module 'numpy' from 'C:\\Users\\zl4821\\Anaconda3\\envs\\GBS\\lib\\site-packages\\numpy\\__init__.py'>)
DEBUG 2022-01-28 15:49:34,049 on stmt: $166load_attr.3 = getattr(value=$164load_global.2, attr=zeros)
DEBUG 2022-01-28 15:49:34,049 on stmt: $const168.4 = const(int, 2)
DEBUG 2022-01-28 15:49:34,049 on stmt: $172binary_multiply.6 = $const168.4 * batch_max
DEBUG 2022-01-28 15:49:34,049 on stmt: $176binary_add.8 = $172binary_multiply.6 + odd_cutoff
DEBUG 2022-01-28 15:49:34,049 on stmt: $const178.9 = const(int, 1)
DEBUG 2022-01-28 15:49:34,049 on stmt: $180binary_add.10 = $176binary_add.8 + $const178.9
DEBUG 2022-01-28 15:49:34,049 on stmt: $182load_global.11 = global(np: <module 'numpy' from 'C:\\Users\\zl4821\\Anaconda3\\envs\\GBS\\lib\\site-packages\\numpy\\__init__.py'>)
DEBUG 2022-01-28 15:49:34,049 on stmt: $184load_attr.12 = getattr(value=$182load_global.11, attr=complex128)
DEBUG 2022-01-28 15:49:34,049 on stmt: Hnew = call $166load_attr.3($180binary_add.10, func=$166load_attr.3, args=[Var($180binary_add.10, loop_hafnian_batch.py:41)], kws=[('dtype', Var($184load_attr.12, loop_hafnian_batch.py:41))], vararg=None, target=None)
DEBUG 2022-01-28 15:49:34,049 on stmt: $192load_global.15 = global(find_kept_edges: CPUDispatcher(<function find_kept_edges at 0x0000024107424550>))
DEBUG 2022-01-28 15:49:34,049 on stmt: kept_edges = call $192load_global.15(j, edge_reps, func=$192load_global.15, args=[Var(j, loop_hafnian_batch.py:39), Var(edge_reps, loop_hafnian_batch.py:32)], kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:34,049 on stmt: $204load_method.20 = getattr(value=kept_edges, attr=sum)
DEBUG 2022-01-28 15:49:34,049 on stmt: edges_sum = call $204load_method.20(func=$204load_method.20, args=[], kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:34,049 on stmt: binom_prod = const(float, 1.0)
DEBUG 2022-01-28 15:49:34,049 first assign: binom_prod
DEBUG 2022-01-28 15:49:34,049 replaced with: binom_prod = const(float, 1.0)
DEBUG 2022-01-28 15:49:34,049 on stmt: $214load_global.23 = global(range: <class 'range'>)
DEBUG 2022-01-28 15:49:34,049 on stmt: $const216.24 = const(int, 1)
DEBUG 2022-01-28 15:49:34,049 on stmt: $const220.26 = const(int, 2)
DEBUG 2022-01-28 15:49:34,049 on stmt: $222binary_floor_divide.27 = n // $const220.26
DEBUG 2022-01-28 15:49:34,049 on stmt: $224call_function.28 = call $214load_global.23($const216.24, $222binary_floor_divide.27, func=$214load_global.23, args=[Var($const216.24, loop_hafnian_batch.py:47), Var($222binary_floor_divide.27, loop_hafnian_batch.py:47)], kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:34,049 on stmt: $226get_iter.29 = getiter(value=$224call_function.28)
DEBUG 2022-01-28 15:49:34,049 on stmt: $phi228.1 = $226get_iter.29
DEBUG 2022-01-28 15:49:34,049 on stmt: jump 228
DEBUG 2022-01-28 15:49:34,049 ==== SSA block rewrite pass on 228
DEBUG 2022-01-28 15:49:34,049 Running <numba.core.ssa._FreshVarHandler object at 0x000002410F899370>
DEBUG 2022-01-28 15:49:34,049 on stmt: $228for_iter.2 = iternext(value=$phi228.1)
DEBUG 2022-01-28 15:49:34,049 on stmt: $228for_iter.3 = pair_first(value=$228for_iter.2)
DEBUG 2022-01-28 15:49:34,049 on stmt: $228for_iter.4 = pair_second(value=$228for_iter.2)
DEBUG 2022-01-28 15:49:34,049 on stmt: $phi230.2 = $228for_iter.3
DEBUG 2022-01-28 15:49:34,049 on stmt: branch $228for_iter.4, 230, 258
DEBUG 2022-01-28 15:49:34,049 ==== SSA block rewrite pass on 230
DEBUG 2022-01-28 15:49:34,049 Running <numba.core.ssa._FreshVarHandler object at 0x000002410F899370>
DEBUG 2022-01-28 15:49:34,049 on stmt: i = $phi230.2
DEBUG 2022-01-28 15:49:34,049 on stmt: $240binary_subscr.7 = getitem(value=edge_reps, index=i, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:34,049 on stmt: $246binary_subscr.10 = getitem(value=kept_edges, index=i, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:34,049 on stmt: $248build_tuple.11 = build_tuple(items=[Var($240binary_subscr.7, loop_hafnian_batch.py:48), Var($246binary_subscr.10, loop_hafnian_batch.py:48)])
DEBUG 2022-01-28 15:49:34,049 on stmt: $250binary_subscr.12 = getitem(value=binoms, index=$248build_tuple.11, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:34,049 on stmt: $252inplace_multiply.13 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=binom_prod, rhs=$250binary_subscr.12, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-01-28 15:49:34,049 on stmt: binom_prod = $252inplace_multiply.13
DEBUG 2022-01-28 15:49:34,049 replaced with: binom_prod.1 = $252inplace_multiply.13
DEBUG 2022-01-28 15:49:34,049 on stmt: jump 228
DEBUG 2022-01-28 15:49:34,049 ==== SSA block rewrite pass on 258
DEBUG 2022-01-28 15:49:34,049 Running <numba.core.ssa._FreshVarHandler object at 0x000002410F899370>
DEBUG 2022-01-28 15:49:34,049 on stmt: bool260 = global(bool: <class 'bool'>)
DEBUG 2022-01-28 15:49:34,049 on stmt: $260pred = call bool260(glynn, func=bool260, args=(Var(glynn, loop_hafnian_batch.py:24),), kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:34,049 on stmt: branch $260pred, 264, 278
DEBUG 2022-01-28 15:49:34,049 ==== SSA block rewrite pass on 264
DEBUG 2022-01-28 15:49:34,049 Running <numba.core.ssa._FreshVarHandler object at 0x000002410F899370>
DEBUG 2022-01-28 15:49:34,049 on stmt: $const264.1 = const(int, 2)
DEBUG 2022-01-28 15:49:34,049 on stmt: $268binary_multiply.3 = $const264.1 * kept_edges
DEBUG 2022-01-28 15:49:34,049 on stmt: delta = $268binary_multiply.3 - edge_reps
DEBUG 2022-01-28 15:49:34,057 on stmt: jump 282
DEBUG 2022-01-28 15:49:34,057 ==== SSA block rewrite pass on 278
DEBUG 2022-01-28 15:49:34,057 Running <numba.core.ssa._FreshVarHandler object at 0x000002410F899370>
DEBUG 2022-01-28 15:49:34,057 on stmt: delta = kept_edges
DEBUG 2022-01-28 15:49:34,057 on stmt: jump 282
DEBUG 2022-01-28 15:49:34,057 ==== SSA block rewrite pass on 282
DEBUG 2022-01-28 15:49:34,057 Running <numba.core.ssa._FreshVarHandler object at 0x000002410F899370>
DEBUG 2022-01-28 15:49:34,057 on stmt: $282load_global.1 = global(get_submatrices: CPUDispatcher(<function get_submatrices at 0x0000024107424E50>))
DEBUG 2022-01-28 15:49:34,057 on stmt: $292call_function.6 = call $282load_global.1(delta, A, D, oddV, func=$282load_global.1, args=[Var(delta, loop_hafnian_batch.py:51), Var(A, loop_hafnian_batch.py:24), Var(D, loop_hafnian_batch.py:24), Var(oddV, loop_hafnian_batch.py:25)], kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:34,057 on stmt: $294unpack_sequence.11 = exhaust_iter(value=$292call_function.6, count=4)
DEBUG 2022-01-28 15:49:34,057 on stmt: $294unpack_sequence.7 = static_getitem(value=$294unpack_sequence.11, index=0, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:34,057 on stmt: $294unpack_sequence.8 = static_getitem(value=$294unpack_sequence.11, index=1, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:34,057 on stmt: $294unpack_sequence.9 = static_getitem(value=$294unpack_sequence.11, index=2, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:34,057 on stmt: $294unpack_sequence.10 = static_getitem(value=$294unpack_sequence.11, index=3, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:34,059 on stmt: AX_S = $294unpack_sequence.7
DEBUG 2022-01-28 15:49:34,059 on stmt: XD_S = $294unpack_sequence.8
DEBUG 2022-01-28 15:49:34,059 on stmt: D_S = $294unpack_sequence.9
DEBUG 2022-01-28 15:49:34,059 on stmt: oddVX_S = $294unpack_sequence.10
DEBUG 2022-01-28 15:49:34,059 on stmt: $304load_global.12 = global(eigvals: CPUDispatcher(<function eigvals at 0x00000241074303A0>))
DEBUG 2022-01-28 15:49:34,059 on stmt: E = call $304load_global.12(AX_S, func=$304load_global.12, args=[Var(AX_S, loop_hafnian_batch.py:55)], kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:34,059 on stmt: $312load_global.15 = global(f_loop: CPUDispatcher(<function f_loop at 0x00000241074248B0>))
DEBUG 2022-01-28 15:49:34,059 on stmt: f_even = call $312load_global.15(E, AX_S, XD_S, D_S, N_max, func=$312load_global.15, args=[Var(E, loop_hafnian_batch.py:57), Var(AX_S, loop_hafnian_batch.py:55), Var(XD_S, loop_hafnian_batch.py:55), Var(D_S, loop_hafnian_batch.py:55), Var(N_max, loop_hafnian_batch.py:30)], kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:34,059 on stmt: $328load_global.22 = global(f_loop_odd: CPUDispatcher(<function f_loop_odd at 0x0000024107424AF0>))
DEBUG 2022-01-28 15:49:34,059 on stmt: f_odd = call $328load_global.22(E, AX_S, XD_S, D_S, N_max, oddloop, oddVX_S, func=$328load_global.22, args=[Var(E, loop_hafnian_batch.py:57), Var(AX_S, loop_hafnian_batch.py:55), Var(XD_S, loop_hafnian_batch.py:55), Var(D_S, loop_hafnian_batch.py:55), Var(N_max, loop_hafnian_batch.py:30), Var(oddloop, loop_hafnian_batch.py:24), Var(oddVX_S, loop_hafnian_batch.py:55)], kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:34,059 on stmt: $348load_global.31 = global(range: <class 'range'>)
DEBUG 2022-01-28 15:49:34,059 on stmt: $const350.32 = const(int, 2)
DEBUG 2022-01-28 15:49:34,059 on stmt: $const354.34 = const(int, 0)
DEBUG 2022-01-28 15:49:34,059 on stmt: $356binary_subscr.35 = static_getitem(value=kept_edges, index=0, index_var=$const354.34, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:34,059 on stmt: $358binary_multiply.36 = $const350.32 * $356binary_subscr.35
DEBUG 2022-01-28 15:49:34,059 on stmt: $const360.37 = const(int, 2)
DEBUG 2022-01-28 15:49:34,059 on stmt: $364binary_multiply.39 = $const360.37 * batch_max
DEBUG 2022-01-28 15:49:34,059 on stmt: $368binary_add.41 = $364binary_multiply.39 + odd_cutoff
DEBUG 2022-01-28 15:49:34,059 on stmt: $const370.42 = const(int, 1)
DEBUG 2022-01-28 15:49:34,059 on stmt: $372binary_add.43 = $368binary_add.41 + $const370.42
DEBUG 2022-01-28 15:49:34,059 on stmt: $374call_function.44 = call $348load_global.31($358binary_multiply.36, $372binary_add.43, func=$348load_global.31, args=[Var($358binary_multiply.36, loop_hafnian_batch.py:64), Var($372binary_add.43, loop_hafnian_batch.py:64)], kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:34,059 on stmt: $376get_iter.45 = getiter(value=$374call_function.44)
DEBUG 2022-01-28 15:49:34,059 on stmt: $phi378.1 = $376get_iter.45
DEBUG 2022-01-28 15:49:34,059 on stmt: jump 378
DEBUG 2022-01-28 15:49:34,059 ==== SSA block rewrite pass on 378
DEBUG 2022-01-28 15:49:34,059 Running <numba.core.ssa._FreshVarHandler object at 0x000002410F899370>
DEBUG 2022-01-28 15:49:34,059 on stmt: $378for_iter.2 = iternext(value=$phi378.1)
DEBUG 2022-01-28 15:49:34,059 on stmt: $378for_iter.3 = pair_first(value=$378for_iter.2)
DEBUG 2022-01-28 15:49:34,059 on stmt: $378for_iter.4 = pair_second(value=$378for_iter.2)
DEBUG 2022-01-28 15:49:34,059 on stmt: $phi380.2 = $378for_iter.3
DEBUG 2022-01-28 15:49:34,059 on stmt: branch $378for_iter.4, 380, 510
DEBUG 2022-01-28 15:49:34,059 ==== SSA block rewrite pass on 380
DEBUG 2022-01-28 15:49:34,059 Running <numba.core.ssa._FreshVarHandler object at 0x000002410F899370>
DEBUG 2022-01-28 15:49:34,059 on stmt: N_det = $phi380.2
DEBUG 2022-01-28 15:49:34,059 on stmt: N = N_fixed + N_det
DEBUG 2022-01-28 15:49:34,059 on stmt: $const390.6 = const(float, -1.0)
DEBUG 2022-01-28 15:49:34,059 on stmt: $const394.8 = const(int, 2)
DEBUG 2022-01-28 15:49:34,059 on stmt: $396binary_floor_divide.9 = N // $const394.8
DEBUG 2022-01-28 15:49:34,059 on stmt: $400binary_subtract.11 = $396binary_floor_divide.9 - edges_sum
DEBUG 2022-01-28 15:49:34,059 on stmt: plus_minus = $const390.6 ** $400binary_subtract.11
DEBUG 2022-01-28 15:49:34,059 on stmt: $const410.15 = const(int, 2)
DEBUG 2022-01-28 15:49:34,059 on stmt: $412binary_floor_divide.16 = N_det // $const410.15
DEBUG 2022-01-28 15:49:34,059 on stmt: $const416.18 = const(int, 0)
DEBUG 2022-01-28 15:49:34,059 on stmt: $418binary_subscr.19 = static_getitem(value=kept_edges, index=0, index_var=$const416.18, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:34,059 on stmt: $420build_tuple.20 = build_tuple(items=[Var($412binary_floor_divide.16, loop_hafnian_batch.py:68), Var($418binary_subscr.19, loop_hafnian_batch.py:68)])
DEBUG 2022-01-28 15:49:34,059 on stmt: $422binary_subscr.21 = getitem(value=binoms, index=$420build_tuple.20, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:34,059 on stmt: n_det_binom_prod = $422binary_subscr.21 * binom_prod
DEBUG 2022-01-28 15:49:34,059 on stmt: $const432.25 = const(int, 2)
DEBUG 2022-01-28 15:49:34,059 on stmt: $434binary_modulo.26 = N_det % $const432.25
DEBUG 2022-01-28 15:49:34,059 on stmt: $const436.27 = const(int, 0)
DEBUG 2022-01-28 15:49:34,059 on stmt: $438compare_op.28 = $434binary_modulo.26 == $const436.27
DEBUG 2022-01-28 15:49:34,059 on stmt: bool440 = global(bool: <class 'bool'>)
DEBUG 2022-01-28 15:49:34,059 on stmt: $440pred = call bool440($438compare_op.28, func=bool440, args=(Var($438compare_op.28, loop_hafnian_batch.py:70),), kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:34,059 on stmt: branch $440pred, 444, 478
DEBUG 2022-01-28 15:49:34,059 ==== SSA block rewrite pass on 444
DEBUG 2022-01-28 15:49:34,059 Running <numba.core.ssa._FreshVarHandler object at 0x000002410F899370>
DEBUG 2022-01-28 15:49:34,059 on stmt: $450binary_subscr.6 = getitem(value=Hnew, index=N_det, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:34,059 on stmt: $456binary_multiply.9 = n_det_binom_prod * plus_minus
DEBUG 2022-01-28 15:49:34,059 on stmt: $const462.12 = const(int, 2)
DEBUG 2022-01-28 15:49:34,059 on stmt: $464binary_floor_divide.13 = N // $const462.12
DEBUG 2022-01-28 15:49:34,059 on stmt: $466binary_subscr.14 = getitem(value=f_even, index=$464binary_floor_divide.13, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:34,059 on stmt: $468binary_multiply.15 = $456binary_multiply.9 * $466binary_subscr.14
DEBUG 2022-01-28 15:49:34,059 on stmt: $470inplace_add.16 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$450binary_subscr.6, rhs=$468binary_multiply.15, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-01-28 15:49:34,059 on stmt: Hnew[N_det] = $470inplace_add.16
DEBUG 2022-01-28 15:49:34,059 on stmt: jump 506
DEBUG 2022-01-28 15:49:34,059 ==== SSA block rewrite pass on 478
DEBUG 2022-01-28 15:49:34,059 Running <numba.core.ssa._FreshVarHandler object at 0x000002410F899370>
DEBUG 2022-01-28 15:49:34,059 on stmt: $484binary_subscr.6 = getitem(value=Hnew, index=N_det, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:34,059 on stmt: $490binary_multiply.9 = n_det_binom_prod * plus_minus
DEBUG 2022-01-28 15:49:34,059 on stmt: $496binary_subscr.12 = getitem(value=f_odd, index=N, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:34,067 on stmt: $498binary_multiply.13 = $490binary_multiply.9 * $496binary_subscr.12
DEBUG 2022-01-28 15:49:34,067 on stmt: $500inplace_add.14 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$484binary_subscr.6, rhs=$498binary_multiply.13, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-01-28 15:49:34,067 on stmt: Hnew[N_det] = $500inplace_add.14
DEBUG 2022-01-28 15:49:34,067 on stmt: jump 506
DEBUG 2022-01-28 15:49:34,067 ==== SSA block rewrite pass on 506
DEBUG 2022-01-28 15:49:34,067 Running <numba.core.ssa._FreshVarHandler object at 0x000002410F899370>
DEBUG 2022-01-28 15:49:34,067 on stmt: jump 378
DEBUG 2022-01-28 15:49:34,067 ==== SSA block rewrite pass on 510
DEBUG 2022-01-28 15:49:34,067 Running <numba.core.ssa._FreshVarHandler object at 0x000002410F899370>
DEBUG 2022-01-28 15:49:34,067 on stmt: $514inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=H_batch, rhs=Hnew, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-01-28 15:49:34,067 on stmt: H_batch = $514inplace_add.3
DEBUG 2022-01-28 15:49:34,067 on stmt: jump 158
DEBUG 2022-01-28 15:49:34,067 ==== SSA block rewrite pass on 520
DEBUG 2022-01-28 15:49:34,067 Running <numba.core.ssa._FreshVarHandler object at 0x000002410F899370>
DEBUG 2022-01-28 15:49:34,067 on stmt: bool522 = global(bool: <class 'bool'>)
DEBUG 2022-01-28 15:49:34,067 on stmt: $522pred = call bool522(glynn, func=bool522, args=(Var(glynn, loop_hafnian_batch.py:24),), kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:34,067 on stmt: branch $522pred, 526, 580
DEBUG 2022-01-28 15:49:34,069 ==== SSA block rewrite pass on 526
DEBUG 2022-01-28 15:49:34,069 Running <numba.core.ssa._FreshVarHandler object at 0x000002410F899370>
DEBUG 2022-01-28 15:49:34,069 on stmt: $526load_global.0 = global(range: <class 'range'>)
DEBUG 2022-01-28 15:49:34,069 on stmt: $530load_attr.2 = getattr(value=H_batch, attr=shape)
DEBUG 2022-01-28 15:49:34,069 on stmt: $const532.3 = const(int, 0)
DEBUG 2022-01-28 15:49:34,069 on stmt: $534binary_subscr.4 = static_getitem(value=$530load_attr.2, index=0, index_var=$const532.3, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:34,069 on stmt: $536call_function.5 = call $526load_global.0($534binary_subscr.4, func=$526load_global.0, args=[Var($534binary_subscr.4, loop_hafnian_batch.py:78)], kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:34,069 on stmt: $538get_iter.6 = getiter(value=$536call_function.5)
DEBUG 2022-01-28 15:49:34,069 on stmt: $phi540.0 = $538get_iter.6
DEBUG 2022-01-28 15:49:34,069 on stmt: jump 540
DEBUG 2022-01-28 15:49:34,069 ==== SSA block rewrite pass on 540
DEBUG 2022-01-28 15:49:34,069 Running <numba.core.ssa._FreshVarHandler object at 0x000002410F899370>
DEBUG 2022-01-28 15:49:34,069 on stmt: $540for_iter.1 = iternext(value=$phi540.0)
DEBUG 2022-01-28 15:49:34,069 on stmt: $540for_iter.2 = pair_first(value=$540for_iter.1)
DEBUG 2022-01-28 15:49:34,069 on stmt: $540for_iter.3 = pair_second(value=$540for_iter.1)
DEBUG 2022-01-28 15:49:34,069 on stmt: $phi542.1 = $540for_iter.2
DEBUG 2022-01-28 15:49:34,069 on stmt: branch $540for_iter.3, 542, 580
DEBUG 2022-01-28 15:49:34,069 ==== SSA block rewrite pass on 542
DEBUG 2022-01-28 15:49:34,069 Running <numba.core.ssa._FreshVarHandler object at 0x000002410F899370>
DEBUG 2022-01-28 15:49:34,069 on stmt: j = $phi542.1
DEBUG 2022-01-28 15:49:34,069 on stmt: x = N_fixed + j
DEBUG 2022-01-28 15:49:34,069 on stmt: $558binary_subscr.9 = getitem(value=H_batch, index=j, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:34,069 on stmt: $const560.10 = const(float, 0.5)
DEBUG 2022-01-28 15:49:34,069 on stmt: $const564.12 = const(int, 2)
DEBUG 2022-01-28 15:49:34,069 on stmt: $566binary_floor_divide.13 = x // $const564.12
DEBUG 2022-01-28 15:49:34,069 on stmt: $568binary_power.14 = $const560.10 ** $566binary_floor_divide.13
DEBUG 2022-01-28 15:49:34,069 on stmt: $570inplace_multiply.15 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=$558binary_subscr.9, rhs=$568binary_power.14, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-01-28 15:49:34,069 on stmt: H_batch[j] = $570inplace_multiply.15
DEBUG 2022-01-28 15:49:34,069 on stmt: jump 540
DEBUG 2022-01-28 15:49:34,069 ==== SSA block rewrite pass on 580
DEBUG 2022-01-28 15:49:34,069 Running <numba.core.ssa._FreshVarHandler object at 0x000002410F899370>
DEBUG 2022-01-28 15:49:34,069 on stmt: $582return_value.1 = cast(value=H_batch)
DEBUG 2022-01-28 15:49:34,069 on stmt: return $582return_value.1
DEBUG 2022-01-28 15:49:34,069 Replaced assignments: defaultdict(<class 'list'>,
            {162: [<numba.core.ir.Assign object at 0x000002410E167280>],
             230: [<numba.core.ir.Assign object at 0x000002410E1710A0>]})
DEBUG 2022-01-28 15:49:34,069 ==== SSA block rewrite pass on 0
DEBUG 2022-01-28 15:49:34,069 Running <numba.core.ssa._FixSSAVars object at 0x000002410F899370>
DEBUG 2022-01-28 15:49:34,069 on stmt: A = arg(0, name=A)
DEBUG 2022-01-28 15:49:34,069 on stmt: D = arg(1, name=D)
DEBUG 2022-01-28 15:49:34,069 on stmt: fixed_edge_reps = arg(2, name=fixed_edge_reps)
DEBUG 2022-01-28 15:49:34,069 on stmt: batch_max = arg(3, name=batch_max)
DEBUG 2022-01-28 15:49:34,069 on stmt: odd_cutoff = arg(4, name=odd_cutoff)
DEBUG 2022-01-28 15:49:34,069 on stmt: glynn = arg(5, name=glynn)
DEBUG 2022-01-28 15:49:34,069 on stmt: $const4.1 = const(int, 0)
DEBUG 2022-01-28 15:49:34,069 on stmt: oddloop = static_getitem(value=D, index=0, index_var=$const4.1, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:34,069 on stmt: $const12.4 = const(int, 0)
DEBUG 2022-01-28 15:49:34,069 on stmt: $const14.5 = const(NoneType, None)
DEBUG 2022-01-28 15:49:34,069 on stmt: $const16.6 = const(NoneType, None)
DEBUG 2022-01-28 15:49:34,069 on stmt: $18build_slice.7 = global(slice: <class 'slice'>)
DEBUG 2022-01-28 15:49:34,069 on stmt: $18build_slice.8 = call $18build_slice.7($const14.5, $const16.6, func=$18build_slice.7, args=(Var($const14.5, loop_hafnian_batch.py:25), Var($const16.6, loop_hafnian_batch.py:25)), kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:34,069 on stmt: $20build_tuple.9 = build_tuple(items=[Var($const12.4, loop_hafnian_batch.py:25), Var($18build_slice.8, loop_hafnian_batch.py:25)])
DEBUG 2022-01-28 15:49:34,069 on stmt: oddV = static_getitem(value=A, index=(0, slice(None, None, None)), index_var=$20build_tuple.9, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:34,069 on stmt: $28load_attr.12 = getattr(value=A, attr=shape)
DEBUG 2022-01-28 15:49:34,069 on stmt: $const30.13 = const(int, 0)
DEBUG 2022-01-28 15:49:34,069 on stmt: n = static_getitem(value=$28load_attr.12, index=0, index_var=$const30.13, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:34,069 on stmt: $const36.15 = const(int, 2)
DEBUG 2022-01-28 15:49:34,069 on stmt: $40load_method.17 = getattr(value=fixed_edge_reps, attr=sum)
DEBUG 2022-01-28 15:49:34,069 on stmt: $42call_method.18 = call $40load_method.17(func=$40load_method.17, args=[], kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:34,069 on stmt: N_fixed = $const36.15 * $42call_method.18
DEBUG 2022-01-28 15:49:34,069 on stmt: $const50.21 = const(int, 2)
DEBUG 2022-01-28 15:49:34,069 on stmt: $54binary_multiply.23 = $const50.21 * batch_max
DEBUG 2022-01-28 15:49:34,069 on stmt: $56binary_add.24 = N_fixed + $54binary_multiply.23
DEBUG 2022-01-28 15:49:34,069 on stmt: N_max = $56binary_add.24 + odd_cutoff
DEBUG 2022-01-28 15:49:34,069 on stmt: $64load_global.27 = global(np: <module 'numpy' from 'C:\\Users\\zl4821\\Anaconda3\\envs\\GBS\\lib\\site-packages\\numpy\\__init__.py'>)
DEBUG 2022-01-28 15:49:34,069 on stmt: $66load_method.28 = getattr(value=$64load_global.27, attr=concatenate)
DEBUG 2022-01-28 15:49:34,069 on stmt: $68load_global.29 = global(np: <module 'numpy' from 'C:\\Users\\zl4821\\Anaconda3\\envs\\GBS\\lib\\site-packages\\numpy\\__init__.py'>)
DEBUG 2022-01-28 15:49:34,069 on stmt: $70load_method.30 = getattr(value=$68load_global.29, attr=array)
DEBUG 2022-01-28 15:49:34,069 on stmt: $74build_list.32 = build_list(items=[Var(batch_max, loop_hafnian_batch.py:24)])
DEBUG 2022-01-28 15:49:34,069 on stmt: $76call_method.33 = call $70load_method.30($74build_list.32, func=$70load_method.30, args=[Var($74build_list.32, loop_hafnian_batch.py:32)], kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:34,069 on stmt: $80build_tuple.35 = build_tuple(items=[Var($76call_method.33, loop_hafnian_batch.py:32), Var(fixed_edge_reps, loop_hafnian_batch.py:24)])
DEBUG 2022-01-28 15:49:34,069 on stmt: edge_reps = call $66load_method.28($80build_tuple.35, func=$66load_method.28, args=[Var($80build_tuple.35, loop_hafnian_batch.py:32)], kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:34,069 on stmt: $86load_global.37 = global(np: <module 'numpy' from 'C:\\Users\\zl4821\\Anaconda3\\envs\\GBS\\lib\\site-packages\\numpy\\__init__.py'>)
DEBUG 2022-01-28 15:49:34,069 on stmt: $88load_method.38 = getattr(value=$86load_global.37, attr=prod)
DEBUG 2022-01-28 15:49:34,069 on stmt: $const92.40 = const(int, 1)
DEBUG 2022-01-28 15:49:34,069 on stmt: $94binary_add.41 = edge_reps + $const92.40
DEBUG 2022-01-28 15:49:34,078 on stmt: steps = call $88load_method.38($94binary_add.41, func=$88load_method.38, args=[Var($94binary_add.41, loop_hafnian_batch.py:33)], kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:34,078 on stmt: $102load_method.44 = getattr(value=edge_reps, attr=max)
DEBUG 2022-01-28 15:49:34,078 on stmt: $104call_method.45 = call $102load_method.44(func=$102load_method.44, args=[], kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:34,078 on stmt: max_binom = $104call_method.45 + odd_cutoff
DEBUG 2022-01-28 15:49:34,078 on stmt: $112load_global.48 = global(precompute_binoms: CPUDispatcher(<function precompute_binoms at 0x00000241074240D0>))
DEBUG 2022-01-28 15:49:34,078 on stmt: binoms = call $112load_global.48(max_binom, func=$112load_global.48, args=[Var(max_binom, loop_hafnian_batch.py:35)], kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:34,078 on stmt: $120load_global.51 = global(np: <module 'numpy' from 'C:\\Users\\zl4821\\Anaconda3\\envs\\GBS\\lib\\site-packages\\numpy\\__init__.py'>)
DEBUG 2022-01-28 15:49:34,078 on stmt: $122load_attr.52 = getattr(value=$120load_global.51, attr=zeros)
DEBUG 2022-01-28 15:49:34,078 on stmt: $const124.53 = const(int, 2)
DEBUG 2022-01-28 15:49:34,078 on stmt: $128binary_multiply.55 = $const124.53 * batch_max
DEBUG 2022-01-28 15:49:34,078 on stmt: $132binary_add.57 = $128binary_multiply.55 + odd_cutoff
DEBUG 2022-01-28 15:49:34,080 on stmt: $const134.58 = const(int, 1)
DEBUG 2022-01-28 15:49:34,080 on stmt: $136binary_add.59 = $132binary_add.57 + $const134.58
DEBUG 2022-01-28 15:49:34,080 on stmt: $138load_global.60 = global(np: <module 'numpy' from 'C:\\Users\\zl4821\\Anaconda3\\envs\\GBS\\lib\\site-packages\\numpy\\__init__.py'>)
DEBUG 2022-01-28 15:49:34,080 on stmt: $140load_attr.61 = getattr(value=$138load_global.60, attr=complex128)
DEBUG 2022-01-28 15:49:34,080 on stmt: H_batch = call $122load_attr.52($136binary_add.59, func=$122load_attr.52, args=[Var($136binary_add.59, loop_hafnian_batch.py:38)], kws=[('dtype', Var($140load_attr.61, loop_hafnian_batch.py:38))], vararg=None, target=None)
DEBUG 2022-01-28 15:49:34,080 on stmt: $148load_global.64 = global(numba: <module 'numba' from 'C:\\Users\\zl4821\\Anaconda3\\envs\\GBS\\lib\\site-packages\\numba\\__init__.py'>)
DEBUG 2022-01-28 15:49:34,080 on stmt: $150load_method.65 = getattr(value=$148load_global.64, attr=prange)
DEBUG 2022-01-28 15:49:34,080 on stmt: $154call_method.67 = call $150load_method.65(steps, func=$150load_method.65, args=[Var(steps, loop_hafnian_batch.py:33)], kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:34,080 on stmt: $156get_iter.68 = getiter(value=$154call_method.67)
DEBUG 2022-01-28 15:49:34,080 on stmt: $phi158.0 = $156get_iter.68
DEBUG 2022-01-28 15:49:34,080 on stmt: jump 158
DEBUG 2022-01-28 15:49:34,080 ==== SSA block rewrite pass on 158
DEBUG 2022-01-28 15:49:34,080 Running <numba.core.ssa._FixSSAVars object at 0x000002410F899370>
DEBUG 2022-01-28 15:49:34,080 on stmt: $158for_iter.1 = iternext(value=$phi158.0)
DEBUG 2022-01-28 15:49:34,080 on stmt: $158for_iter.2 = pair_first(value=$158for_iter.1)
DEBUG 2022-01-28 15:49:34,080 on stmt: $158for_iter.3 = pair_second(value=$158for_iter.1)
DEBUG 2022-01-28 15:49:34,080 on stmt: $phi162.1 = $158for_iter.2
DEBUG 2022-01-28 15:49:34,080 on stmt: branch $158for_iter.3, 162, 520
DEBUG 2022-01-28 15:49:34,080 ==== SSA block rewrite pass on 162
DEBUG 2022-01-28 15:49:34,080 Running <numba.core.ssa._FixSSAVars object at 0x000002410F899370>
DEBUG 2022-01-28 15:49:34,080 on stmt: j = $phi162.1
DEBUG 2022-01-28 15:49:34,080 on stmt: $164load_global.2 = global(np: <module 'numpy' from 'C:\\Users\\zl4821\\Anaconda3\\envs\\GBS\\lib\\site-packages\\numpy\\__init__.py'>)
DEBUG 2022-01-28 15:49:34,080 on stmt: $166load_attr.3 = getattr(value=$164load_global.2, attr=zeros)
DEBUG 2022-01-28 15:49:34,080 on stmt: $const168.4 = const(int, 2)
DEBUG 2022-01-28 15:49:34,080 on stmt: $172binary_multiply.6 = $const168.4 * batch_max
DEBUG 2022-01-28 15:49:34,080 on stmt: $176binary_add.8 = $172binary_multiply.6 + odd_cutoff
DEBUG 2022-01-28 15:49:34,080 on stmt: $const178.9 = const(int, 1)
DEBUG 2022-01-28 15:49:34,080 on stmt: $180binary_add.10 = $176binary_add.8 + $const178.9
DEBUG 2022-01-28 15:49:34,080 on stmt: $182load_global.11 = global(np: <module 'numpy' from 'C:\\Users\\zl4821\\Anaconda3\\envs\\GBS\\lib\\site-packages\\numpy\\__init__.py'>)
DEBUG 2022-01-28 15:49:34,080 on stmt: $184load_attr.12 = getattr(value=$182load_global.11, attr=complex128)
DEBUG 2022-01-28 15:49:34,080 on stmt: Hnew = call $166load_attr.3($180binary_add.10, func=$166load_attr.3, args=[Var($180binary_add.10, loop_hafnian_batch.py:41)], kws=[('dtype', Var($184load_attr.12, loop_hafnian_batch.py:41))], vararg=None, target=None)
DEBUG 2022-01-28 15:49:34,080 on stmt: $192load_global.15 = global(find_kept_edges: CPUDispatcher(<function find_kept_edges at 0x0000024107424550>))
DEBUG 2022-01-28 15:49:34,080 on stmt: kept_edges = call $192load_global.15(j, edge_reps, func=$192load_global.15, args=[Var(j, loop_hafnian_batch.py:39), Var(edge_reps, loop_hafnian_batch.py:32)], kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:34,080 on stmt: $204load_method.20 = getattr(value=kept_edges, attr=sum)
DEBUG 2022-01-28 15:49:34,080 on stmt: edges_sum = call $204load_method.20(func=$204load_method.20, args=[], kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:34,080 on stmt: binom_prod = const(float, 1.0)
DEBUG 2022-01-28 15:49:34,080 on stmt: $214load_global.23 = global(range: <class 'range'>)
DEBUG 2022-01-28 15:49:34,080 on stmt: $const216.24 = const(int, 1)
DEBUG 2022-01-28 15:49:34,080 on stmt: $const220.26 = const(int, 2)
DEBUG 2022-01-28 15:49:34,080 on stmt: $222binary_floor_divide.27 = n // $const220.26
DEBUG 2022-01-28 15:49:34,080 on stmt: $224call_function.28 = call $214load_global.23($const216.24, $222binary_floor_divide.27, func=$214load_global.23, args=[Var($const216.24, loop_hafnian_batch.py:47), Var($222binary_floor_divide.27, loop_hafnian_batch.py:47)], kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:34,080 on stmt: $226get_iter.29 = getiter(value=$224call_function.28)
DEBUG 2022-01-28 15:49:34,080 on stmt: $phi228.1 = $226get_iter.29
DEBUG 2022-01-28 15:49:34,080 on stmt: jump 228
DEBUG 2022-01-28 15:49:34,080 ==== SSA block rewrite pass on 228
DEBUG 2022-01-28 15:49:34,080 Running <numba.core.ssa._FixSSAVars object at 0x000002410F899370>
DEBUG 2022-01-28 15:49:34,080 on stmt: $228for_iter.2 = iternext(value=$phi228.1)
DEBUG 2022-01-28 15:49:34,080 on stmt: $228for_iter.3 = pair_first(value=$228for_iter.2)
DEBUG 2022-01-28 15:49:34,080 on stmt: $228for_iter.4 = pair_second(value=$228for_iter.2)
DEBUG 2022-01-28 15:49:34,080 on stmt: $phi230.2 = $228for_iter.3
DEBUG 2022-01-28 15:49:34,080 on stmt: branch $228for_iter.4, 230, 258
DEBUG 2022-01-28 15:49:34,080 ==== SSA block rewrite pass on 230
DEBUG 2022-01-28 15:49:34,080 Running <numba.core.ssa._FixSSAVars object at 0x000002410F899370>
DEBUG 2022-01-28 15:49:34,080 on stmt: i = $phi230.2
DEBUG 2022-01-28 15:49:34,080 on stmt: $240binary_subscr.7 = getitem(value=edge_reps, index=i, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:34,080 on stmt: $246binary_subscr.10 = getitem(value=kept_edges, index=i, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:34,080 on stmt: $248build_tuple.11 = build_tuple(items=[Var($240binary_subscr.7, loop_hafnian_batch.py:48), Var($246binary_subscr.10, loop_hafnian_batch.py:48)])
DEBUG 2022-01-28 15:49:34,080 on stmt: $250binary_subscr.12 = getitem(value=binoms, index=$248build_tuple.11, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:34,080 on stmt: $252inplace_multiply.13 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=binom_prod, rhs=$250binary_subscr.12, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-01-28 15:49:34,088 find_def var='binom_prod' stmt=$252inplace_multiply.13 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=binom_prod, rhs=$250binary_subscr.12, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-01-28 15:49:34,088 find_def_from_top label 230
DEBUG 2022-01-28 15:49:34,088 idom 228 from label 230
DEBUG 2022-01-28 15:49:34,088 find_def_from_bottom label 228
DEBUG 2022-01-28 15:49:34,088 find_def_from_top label 228
DEBUG 2022-01-28 15:49:34,088 insert phi node binom_prod.2 = phi(incoming_values=[], incoming_blocks=[]) at 228
DEBUG 2022-01-28 15:49:34,088 find_def_from_bottom label 162
DEBUG 2022-01-28 15:49:34,088 incoming_def binom_prod = const(float, 1.0)
DEBUG 2022-01-28 15:49:34,088 find_def_from_bottom label 230
DEBUG 2022-01-28 15:49:34,088 incoming_def binom_prod.1 = $252inplace_multiply.13
DEBUG 2022-01-28 15:49:34,088 replaced with: $252inplace_multiply.13 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=binom_prod.2, rhs=$250binary_subscr.12, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-01-28 15:49:34,088 on stmt: binom_prod.1 = $252inplace_multiply.13
DEBUG 2022-01-28 15:49:34,088 on stmt: jump 228
DEBUG 2022-01-28 15:49:34,088 ==== SSA block rewrite pass on 258
DEBUG 2022-01-28 15:49:34,088 Running <numba.core.ssa._FixSSAVars object at 0x000002410F899370>
DEBUG 2022-01-28 15:49:34,088 on stmt: bool260 = global(bool: <class 'bool'>)
DEBUG 2022-01-28 15:49:34,088 on stmt: $260pred = call bool260(glynn, func=bool260, args=(Var(glynn, loop_hafnian_batch.py:24),), kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:34,088 on stmt: branch $260pred, 264, 278
DEBUG 2022-01-28 15:49:34,088 ==== SSA block rewrite pass on 264
DEBUG 2022-01-28 15:49:34,090 Running <numba.core.ssa._FixSSAVars object at 0x000002410F899370>
DEBUG 2022-01-28 15:49:34,090 on stmt: $const264.1 = const(int, 2)
DEBUG 2022-01-28 15:49:34,090 on stmt: $268binary_multiply.3 = $const264.1 * kept_edges
DEBUG 2022-01-28 15:49:34,090 on stmt: delta = $268binary_multiply.3 - edge_reps
DEBUG 2022-01-28 15:49:34,090 on stmt: jump 282
DEBUG 2022-01-28 15:49:34,090 ==== SSA block rewrite pass on 278
DEBUG 2022-01-28 15:49:34,090 Running <numba.core.ssa._FixSSAVars object at 0x000002410F899370>
DEBUG 2022-01-28 15:49:34,090 on stmt: delta = kept_edges
DEBUG 2022-01-28 15:49:34,090 on stmt: jump 282
DEBUG 2022-01-28 15:49:34,090 ==== SSA block rewrite pass on 282
DEBUG 2022-01-28 15:49:34,090 Running <numba.core.ssa._FixSSAVars object at 0x000002410F899370>
DEBUG 2022-01-28 15:49:34,090 on stmt: $282load_global.1 = global(get_submatrices: CPUDispatcher(<function get_submatrices at 0x0000024107424E50>))
DEBUG 2022-01-28 15:49:34,090 on stmt: $292call_function.6 = call $282load_global.1(delta, A, D, oddV, func=$282load_global.1, args=[Var(delta, loop_hafnian_batch.py:51), Var(A, loop_hafnian_batch.py:24), Var(D, loop_hafnian_batch.py:24), Var(oddV, loop_hafnian_batch.py:25)], kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:34,090 on stmt: $294unpack_sequence.11 = exhaust_iter(value=$292call_function.6, count=4)
DEBUG 2022-01-28 15:49:34,090 on stmt: $294unpack_sequence.7 = static_getitem(value=$294unpack_sequence.11, index=0, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:34,090 on stmt: $294unpack_sequence.8 = static_getitem(value=$294unpack_sequence.11, index=1, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:34,090 on stmt: $294unpack_sequence.9 = static_getitem(value=$294unpack_sequence.11, index=2, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:34,090 on stmt: $294unpack_sequence.10 = static_getitem(value=$294unpack_sequence.11, index=3, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:34,090 on stmt: AX_S = $294unpack_sequence.7
DEBUG 2022-01-28 15:49:34,090 on stmt: XD_S = $294unpack_sequence.8
DEBUG 2022-01-28 15:49:34,090 on stmt: D_S = $294unpack_sequence.9
DEBUG 2022-01-28 15:49:34,090 on stmt: oddVX_S = $294unpack_sequence.10
DEBUG 2022-01-28 15:49:34,090 on stmt: $304load_global.12 = global(eigvals: CPUDispatcher(<function eigvals at 0x00000241074303A0>))
DEBUG 2022-01-28 15:49:34,090 on stmt: E = call $304load_global.12(AX_S, func=$304load_global.12, args=[Var(AX_S, loop_hafnian_batch.py:55)], kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:34,090 on stmt: $312load_global.15 = global(f_loop: CPUDispatcher(<function f_loop at 0x00000241074248B0>))
DEBUG 2022-01-28 15:49:34,090 on stmt: f_even = call $312load_global.15(E, AX_S, XD_S, D_S, N_max, func=$312load_global.15, args=[Var(E, loop_hafnian_batch.py:57), Var(AX_S, loop_hafnian_batch.py:55), Var(XD_S, loop_hafnian_batch.py:55), Var(D_S, loop_hafnian_batch.py:55), Var(N_max, loop_hafnian_batch.py:30)], kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:34,090 on stmt: $328load_global.22 = global(f_loop_odd: CPUDispatcher(<function f_loop_odd at 0x0000024107424AF0>))
DEBUG 2022-01-28 15:49:34,090 on stmt: f_odd = call $328load_global.22(E, AX_S, XD_S, D_S, N_max, oddloop, oddVX_S, func=$328load_global.22, args=[Var(E, loop_hafnian_batch.py:57), Var(AX_S, loop_hafnian_batch.py:55), Var(XD_S, loop_hafnian_batch.py:55), Var(D_S, loop_hafnian_batch.py:55), Var(N_max, loop_hafnian_batch.py:30), Var(oddloop, loop_hafnian_batch.py:24), Var(oddVX_S, loop_hafnian_batch.py:55)], kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:34,090 on stmt: $348load_global.31 = global(range: <class 'range'>)
DEBUG 2022-01-28 15:49:34,090 on stmt: $const350.32 = const(int, 2)
DEBUG 2022-01-28 15:49:34,090 on stmt: $const354.34 = const(int, 0)
DEBUG 2022-01-28 15:49:34,090 on stmt: $356binary_subscr.35 = static_getitem(value=kept_edges, index=0, index_var=$const354.34, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:34,090 on stmt: $358binary_multiply.36 = $const350.32 * $356binary_subscr.35
DEBUG 2022-01-28 15:49:34,090 on stmt: $const360.37 = const(int, 2)
DEBUG 2022-01-28 15:49:34,090 on stmt: $364binary_multiply.39 = $const360.37 * batch_max
DEBUG 2022-01-28 15:49:34,090 on stmt: $368binary_add.41 = $364binary_multiply.39 + odd_cutoff
DEBUG 2022-01-28 15:49:34,090 on stmt: $const370.42 = const(int, 1)
DEBUG 2022-01-28 15:49:34,090 on stmt: $372binary_add.43 = $368binary_add.41 + $const370.42
DEBUG 2022-01-28 15:49:34,090 on stmt: $374call_function.44 = call $348load_global.31($358binary_multiply.36, $372binary_add.43, func=$348load_global.31, args=[Var($358binary_multiply.36, loop_hafnian_batch.py:64), Var($372binary_add.43, loop_hafnian_batch.py:64)], kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:34,090 on stmt: $376get_iter.45 = getiter(value=$374call_function.44)
DEBUG 2022-01-28 15:49:34,090 on stmt: $phi378.1 = $376get_iter.45
DEBUG 2022-01-28 15:49:34,090 on stmt: jump 378
DEBUG 2022-01-28 15:49:34,090 ==== SSA block rewrite pass on 378
DEBUG 2022-01-28 15:49:34,090 Running <numba.core.ssa._FixSSAVars object at 0x000002410F899370>
DEBUG 2022-01-28 15:49:34,090 on stmt: $378for_iter.2 = iternext(value=$phi378.1)
DEBUG 2022-01-28 15:49:34,090 on stmt: $378for_iter.3 = pair_first(value=$378for_iter.2)
DEBUG 2022-01-28 15:49:34,090 on stmt: $378for_iter.4 = pair_second(value=$378for_iter.2)
DEBUG 2022-01-28 15:49:34,090 on stmt: $phi380.2 = $378for_iter.3
DEBUG 2022-01-28 15:49:34,090 on stmt: branch $378for_iter.4, 380, 510
DEBUG 2022-01-28 15:49:34,090 ==== SSA block rewrite pass on 380
DEBUG 2022-01-28 15:49:34,090 Running <numba.core.ssa._FixSSAVars object at 0x000002410F899370>
DEBUG 2022-01-28 15:49:34,090 on stmt: N_det = $phi380.2
DEBUG 2022-01-28 15:49:34,090 on stmt: N = N_fixed + N_det
DEBUG 2022-01-28 15:49:34,090 on stmt: $const390.6 = const(float, -1.0)
DEBUG 2022-01-28 15:49:34,090 on stmt: $const394.8 = const(int, 2)
DEBUG 2022-01-28 15:49:34,090 on stmt: $396binary_floor_divide.9 = N // $const394.8
DEBUG 2022-01-28 15:49:34,090 on stmt: $400binary_subtract.11 = $396binary_floor_divide.9 - edges_sum
DEBUG 2022-01-28 15:49:34,090 on stmt: plus_minus = $const390.6 ** $400binary_subtract.11
DEBUG 2022-01-28 15:49:34,090 on stmt: $const410.15 = const(int, 2)
DEBUG 2022-01-28 15:49:34,090 on stmt: $412binary_floor_divide.16 = N_det // $const410.15
DEBUG 2022-01-28 15:49:34,090 on stmt: $const416.18 = const(int, 0)
DEBUG 2022-01-28 15:49:34,090 on stmt: $418binary_subscr.19 = static_getitem(value=kept_edges, index=0, index_var=$const416.18, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:34,090 on stmt: $420build_tuple.20 = build_tuple(items=[Var($412binary_floor_divide.16, loop_hafnian_batch.py:68), Var($418binary_subscr.19, loop_hafnian_batch.py:68)])
DEBUG 2022-01-28 15:49:34,090 on stmt: $422binary_subscr.21 = getitem(value=binoms, index=$420build_tuple.20, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:34,090 on stmt: n_det_binom_prod = $422binary_subscr.21 * binom_prod
DEBUG 2022-01-28 15:49:34,090 find_def var='binom_prod' stmt=n_det_binom_prod = $422binary_subscr.21 * binom_prod
DEBUG 2022-01-28 15:49:34,090 find_def_from_top label 380
DEBUG 2022-01-28 15:49:34,090 idom 378 from label 380
DEBUG 2022-01-28 15:49:34,098 find_def_from_bottom label 378
DEBUG 2022-01-28 15:49:34,098 find_def_from_top label 378
DEBUG 2022-01-28 15:49:34,098 idom 282 from label 378
DEBUG 2022-01-28 15:49:34,098 find_def_from_bottom label 282
DEBUG 2022-01-28 15:49:34,098 find_def_from_top label 282
DEBUG 2022-01-28 15:49:34,098 idom 258 from label 282
DEBUG 2022-01-28 15:49:34,098 find_def_from_bottom label 258
DEBUG 2022-01-28 15:49:34,098 find_def_from_top label 258
DEBUG 2022-01-28 15:49:34,098 idom 228 from label 258
DEBUG 2022-01-28 15:49:34,098 find_def_from_bottom label 228
DEBUG 2022-01-28 15:49:34,098 replaced with: n_det_binom_prod = $422binary_subscr.21 * binom_prod.2
DEBUG 2022-01-28 15:49:34,098 on stmt: $const432.25 = const(int, 2)
DEBUG 2022-01-28 15:49:34,098 on stmt: $434binary_modulo.26 = N_det % $const432.25
DEBUG 2022-01-28 15:49:34,098 on stmt: $const436.27 = const(int, 0)
DEBUG 2022-01-28 15:49:34,098 on stmt: $438compare_op.28 = $434binary_modulo.26 == $const436.27
DEBUG 2022-01-28 15:49:34,098 on stmt: bool440 = global(bool: <class 'bool'>)
DEBUG 2022-01-28 15:49:34,098 on stmt: $440pred = call bool440($438compare_op.28, func=bool440, args=(Var($438compare_op.28, loop_hafnian_batch.py:70),), kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:34,100 on stmt: branch $440pred, 444, 478
DEBUG 2022-01-28 15:49:34,100 ==== SSA block rewrite pass on 444
DEBUG 2022-01-28 15:49:34,100 Running <numba.core.ssa._FixSSAVars object at 0x000002410F899370>
DEBUG 2022-01-28 15:49:34,100 on stmt: $450binary_subscr.6 = getitem(value=Hnew, index=N_det, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:34,100 on stmt: $456binary_multiply.9 = n_det_binom_prod * plus_minus
DEBUG 2022-01-28 15:49:34,100 on stmt: $const462.12 = const(int, 2)
DEBUG 2022-01-28 15:49:34,100 on stmt: $464binary_floor_divide.13 = N // $const462.12
DEBUG 2022-01-28 15:49:34,100 on stmt: $466binary_subscr.14 = getitem(value=f_even, index=$464binary_floor_divide.13, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:34,100 on stmt: $468binary_multiply.15 = $456binary_multiply.9 * $466binary_subscr.14
DEBUG 2022-01-28 15:49:34,100 on stmt: $470inplace_add.16 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$450binary_subscr.6, rhs=$468binary_multiply.15, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-01-28 15:49:34,100 on stmt: Hnew[N_det] = $470inplace_add.16
DEBUG 2022-01-28 15:49:34,100 on stmt: jump 506
DEBUG 2022-01-28 15:49:34,100 ==== SSA block rewrite pass on 478
DEBUG 2022-01-28 15:49:34,100 Running <numba.core.ssa._FixSSAVars object at 0x000002410F899370>
DEBUG 2022-01-28 15:49:34,100 on stmt: $484binary_subscr.6 = getitem(value=Hnew, index=N_det, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:34,100 on stmt: $490binary_multiply.9 = n_det_binom_prod * plus_minus
DEBUG 2022-01-28 15:49:34,100 on stmt: $496binary_subscr.12 = getitem(value=f_odd, index=N, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:34,100 on stmt: $498binary_multiply.13 = $490binary_multiply.9 * $496binary_subscr.12
DEBUG 2022-01-28 15:49:34,100 on stmt: $500inplace_add.14 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$484binary_subscr.6, rhs=$498binary_multiply.13, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-01-28 15:49:34,100 on stmt: Hnew[N_det] = $500inplace_add.14
DEBUG 2022-01-28 15:49:34,100 on stmt: jump 506
DEBUG 2022-01-28 15:49:34,100 ==== SSA block rewrite pass on 506
DEBUG 2022-01-28 15:49:34,100 Running <numba.core.ssa._FixSSAVars object at 0x000002410F899370>
DEBUG 2022-01-28 15:49:34,100 on stmt: jump 378
DEBUG 2022-01-28 15:49:34,100 ==== SSA block rewrite pass on 510
DEBUG 2022-01-28 15:49:34,100 Running <numba.core.ssa._FixSSAVars object at 0x000002410F899370>
DEBUG 2022-01-28 15:49:34,100 on stmt: $514inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=H_batch, rhs=Hnew, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-01-28 15:49:34,100 on stmt: H_batch = $514inplace_add.3
DEBUG 2022-01-28 15:49:34,100 on stmt: jump 158
DEBUG 2022-01-28 15:49:34,100 ==== SSA block rewrite pass on 520
DEBUG 2022-01-28 15:49:34,100 Running <numba.core.ssa._FixSSAVars object at 0x000002410F899370>
DEBUG 2022-01-28 15:49:34,100 on stmt: bool522 = global(bool: <class 'bool'>)
DEBUG 2022-01-28 15:49:34,100 on stmt: $522pred = call bool522(glynn, func=bool522, args=(Var(glynn, loop_hafnian_batch.py:24),), kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:34,100 on stmt: branch $522pred, 526, 580
DEBUG 2022-01-28 15:49:34,100 ==== SSA block rewrite pass on 526
DEBUG 2022-01-28 15:49:34,100 Running <numba.core.ssa._FixSSAVars object at 0x000002410F899370>
DEBUG 2022-01-28 15:49:34,100 on stmt: $526load_global.0 = global(range: <class 'range'>)
DEBUG 2022-01-28 15:49:34,100 on stmt: $530load_attr.2 = getattr(value=H_batch, attr=shape)
DEBUG 2022-01-28 15:49:34,100 on stmt: $const532.3 = const(int, 0)
DEBUG 2022-01-28 15:49:34,100 on stmt: $534binary_subscr.4 = static_getitem(value=$530load_attr.2, index=0, index_var=$const532.3, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:34,100 on stmt: $536call_function.5 = call $526load_global.0($534binary_subscr.4, func=$526load_global.0, args=[Var($534binary_subscr.4, loop_hafnian_batch.py:78)], kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:34,100 on stmt: $538get_iter.6 = getiter(value=$536call_function.5)
DEBUG 2022-01-28 15:49:34,100 on stmt: $phi540.0 = $538get_iter.6
DEBUG 2022-01-28 15:49:34,100 on stmt: jump 540
DEBUG 2022-01-28 15:49:34,100 ==== SSA block rewrite pass on 540
DEBUG 2022-01-28 15:49:34,100 Running <numba.core.ssa._FixSSAVars object at 0x000002410F899370>
DEBUG 2022-01-28 15:49:34,100 on stmt: $540for_iter.1 = iternext(value=$phi540.0)
DEBUG 2022-01-28 15:49:34,100 on stmt: $540for_iter.2 = pair_first(value=$540for_iter.1)
DEBUG 2022-01-28 15:49:34,100 on stmt: $540for_iter.3 = pair_second(value=$540for_iter.1)
DEBUG 2022-01-28 15:49:34,100 on stmt: $phi542.1 = $540for_iter.2
DEBUG 2022-01-28 15:49:34,100 on stmt: branch $540for_iter.3, 542, 580
DEBUG 2022-01-28 15:49:34,100 ==== SSA block rewrite pass on 542
DEBUG 2022-01-28 15:49:34,100 Running <numba.core.ssa._FixSSAVars object at 0x000002410F899370>
DEBUG 2022-01-28 15:49:34,100 on stmt: j = $phi542.1
DEBUG 2022-01-28 15:49:34,100 on stmt: x = N_fixed + j
DEBUG 2022-01-28 15:49:34,100 on stmt: $558binary_subscr.9 = getitem(value=H_batch, index=j, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:34,100 on stmt: $const560.10 = const(float, 0.5)
DEBUG 2022-01-28 15:49:34,100 on stmt: $const564.12 = const(int, 2)
DEBUG 2022-01-28 15:49:34,100 on stmt: $566binary_floor_divide.13 = x // $const564.12
DEBUG 2022-01-28 15:49:34,100 on stmt: $568binary_power.14 = $const560.10 ** $566binary_floor_divide.13
DEBUG 2022-01-28 15:49:34,100 on stmt: $570inplace_multiply.15 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=$558binary_subscr.9, rhs=$568binary_power.14, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-01-28 15:49:34,100 on stmt: H_batch[j] = $570inplace_multiply.15
DEBUG 2022-01-28 15:49:34,100 on stmt: jump 540
DEBUG 2022-01-28 15:49:34,100 ==== SSA block rewrite pass on 580
DEBUG 2022-01-28 15:49:34,100 Running <numba.core.ssa._FixSSAVars object at 0x000002410F899370>
DEBUG 2022-01-28 15:49:34,100 on stmt: $582return_value.1 = cast(value=H_batch)
DEBUG 2022-01-28 15:49:34,100 on stmt: return $582return_value.1
DEBUG 2022-01-28 15:49:34,100 Fix SSA violator on var j
DEBUG 2022-01-28 15:49:34,100 ==== SSA block rewrite pass on 0
DEBUG 2022-01-28 15:49:34,100 Running <numba.core.ssa._FreshVarHandler object at 0x000002410C1BEA90>
DEBUG 2022-01-28 15:49:34,108 on stmt: A = arg(0, name=A)
DEBUG 2022-01-28 15:49:34,108 on stmt: D = arg(1, name=D)
DEBUG 2022-01-28 15:49:34,108 on stmt: fixed_edge_reps = arg(2, name=fixed_edge_reps)
DEBUG 2022-01-28 15:49:34,108 on stmt: batch_max = arg(3, name=batch_max)
DEBUG 2022-01-28 15:49:34,108 on stmt: odd_cutoff = arg(4, name=odd_cutoff)
DEBUG 2022-01-28 15:49:34,108 on stmt: glynn = arg(5, name=glynn)
DEBUG 2022-01-28 15:49:34,108 on stmt: $const4.1 = const(int, 0)
DEBUG 2022-01-28 15:49:34,108 on stmt: oddloop = static_getitem(value=D, index=0, index_var=$const4.1, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:34,108 on stmt: $const12.4 = const(int, 0)
DEBUG 2022-01-28 15:49:34,108 on stmt: $const14.5 = const(NoneType, None)
DEBUG 2022-01-28 15:49:34,108 on stmt: $const16.6 = const(NoneType, None)
DEBUG 2022-01-28 15:49:34,108 on stmt: $18build_slice.7 = global(slice: <class 'slice'>)
DEBUG 2022-01-28 15:49:34,108 on stmt: $18build_slice.8 = call $18build_slice.7($const14.5, $const16.6, func=$18build_slice.7, args=(Var($const14.5, loop_hafnian_batch.py:25), Var($const16.6, loop_hafnian_batch.py:25)), kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:34,108 on stmt: $20build_tuple.9 = build_tuple(items=[Var($const12.4, loop_hafnian_batch.py:25), Var($18build_slice.8, loop_hafnian_batch.py:25)])
DEBUG 2022-01-28 15:49:34,108 on stmt: oddV = static_getitem(value=A, index=(0, slice(None, None, None)), index_var=$20build_tuple.9, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:34,108 on stmt: $28load_attr.12 = getattr(value=A, attr=shape)
DEBUG 2022-01-28 15:49:34,108 on stmt: $const30.13 = const(int, 0)
DEBUG 2022-01-28 15:49:34,110 on stmt: n = static_getitem(value=$28load_attr.12, index=0, index_var=$const30.13, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:34,110 on stmt: $const36.15 = const(int, 2)
DEBUG 2022-01-28 15:49:34,110 on stmt: $40load_method.17 = getattr(value=fixed_edge_reps, attr=sum)
DEBUG 2022-01-28 15:49:34,110 on stmt: $42call_method.18 = call $40load_method.17(func=$40load_method.17, args=[], kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:34,110 on stmt: N_fixed = $const36.15 * $42call_method.18
DEBUG 2022-01-28 15:49:34,110 on stmt: $const50.21 = const(int, 2)
DEBUG 2022-01-28 15:49:34,110 on stmt: $54binary_multiply.23 = $const50.21 * batch_max
DEBUG 2022-01-28 15:49:34,110 on stmt: $56binary_add.24 = N_fixed + $54binary_multiply.23
DEBUG 2022-01-28 15:49:34,110 on stmt: N_max = $56binary_add.24 + odd_cutoff
DEBUG 2022-01-28 15:49:34,110 on stmt: $64load_global.27 = global(np: <module 'numpy' from 'C:\\Users\\zl4821\\Anaconda3\\envs\\GBS\\lib\\site-packages\\numpy\\__init__.py'>)
DEBUG 2022-01-28 15:49:34,110 on stmt: $66load_method.28 = getattr(value=$64load_global.27, attr=concatenate)
DEBUG 2022-01-28 15:49:34,110 on stmt: $68load_global.29 = global(np: <module 'numpy' from 'C:\\Users\\zl4821\\Anaconda3\\envs\\GBS\\lib\\site-packages\\numpy\\__init__.py'>)
DEBUG 2022-01-28 15:49:34,110 on stmt: $70load_method.30 = getattr(value=$68load_global.29, attr=array)
DEBUG 2022-01-28 15:49:34,110 on stmt: $74build_list.32 = build_list(items=[Var(batch_max, loop_hafnian_batch.py:24)])
DEBUG 2022-01-28 15:49:34,110 on stmt: $76call_method.33 = call $70load_method.30($74build_list.32, func=$70load_method.30, args=[Var($74build_list.32, loop_hafnian_batch.py:32)], kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:34,110 on stmt: $80build_tuple.35 = build_tuple(items=[Var($76call_method.33, loop_hafnian_batch.py:32), Var(fixed_edge_reps, loop_hafnian_batch.py:24)])
DEBUG 2022-01-28 15:49:34,110 on stmt: edge_reps = call $66load_method.28($80build_tuple.35, func=$66load_method.28, args=[Var($80build_tuple.35, loop_hafnian_batch.py:32)], kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:34,110 on stmt: $86load_global.37 = global(np: <module 'numpy' from 'C:\\Users\\zl4821\\Anaconda3\\envs\\GBS\\lib\\site-packages\\numpy\\__init__.py'>)
DEBUG 2022-01-28 15:49:34,110 on stmt: $88load_method.38 = getattr(value=$86load_global.37, attr=prod)
DEBUG 2022-01-28 15:49:34,110 on stmt: $const92.40 = const(int, 1)
DEBUG 2022-01-28 15:49:34,110 on stmt: $94binary_add.41 = edge_reps + $const92.40
DEBUG 2022-01-28 15:49:34,110 on stmt: steps = call $88load_method.38($94binary_add.41, func=$88load_method.38, args=[Var($94binary_add.41, loop_hafnian_batch.py:33)], kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:34,110 on stmt: $102load_method.44 = getattr(value=edge_reps, attr=max)
DEBUG 2022-01-28 15:49:34,110 on stmt: $104call_method.45 = call $102load_method.44(func=$102load_method.44, args=[], kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:34,110 on stmt: max_binom = $104call_method.45 + odd_cutoff
DEBUG 2022-01-28 15:49:34,110 on stmt: $112load_global.48 = global(precompute_binoms: CPUDispatcher(<function precompute_binoms at 0x00000241074240D0>))
DEBUG 2022-01-28 15:49:34,110 on stmt: binoms = call $112load_global.48(max_binom, func=$112load_global.48, args=[Var(max_binom, loop_hafnian_batch.py:35)], kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:34,110 on stmt: $120load_global.51 = global(np: <module 'numpy' from 'C:\\Users\\zl4821\\Anaconda3\\envs\\GBS\\lib\\site-packages\\numpy\\__init__.py'>)
DEBUG 2022-01-28 15:49:34,110 on stmt: $122load_attr.52 = getattr(value=$120load_global.51, attr=zeros)
DEBUG 2022-01-28 15:49:34,110 on stmt: $const124.53 = const(int, 2)
DEBUG 2022-01-28 15:49:34,110 on stmt: $128binary_multiply.55 = $const124.53 * batch_max
DEBUG 2022-01-28 15:49:34,110 on stmt: $132binary_add.57 = $128binary_multiply.55 + odd_cutoff
DEBUG 2022-01-28 15:49:34,110 on stmt: $const134.58 = const(int, 1)
DEBUG 2022-01-28 15:49:34,110 on stmt: $136binary_add.59 = $132binary_add.57 + $const134.58
DEBUG 2022-01-28 15:49:34,110 on stmt: $138load_global.60 = global(np: <module 'numpy' from 'C:\\Users\\zl4821\\Anaconda3\\envs\\GBS\\lib\\site-packages\\numpy\\__init__.py'>)
DEBUG 2022-01-28 15:49:34,110 on stmt: $140load_attr.61 = getattr(value=$138load_global.60, attr=complex128)
DEBUG 2022-01-28 15:49:34,110 on stmt: H_batch = call $122load_attr.52($136binary_add.59, func=$122load_attr.52, args=[Var($136binary_add.59, loop_hafnian_batch.py:38)], kws=[('dtype', Var($140load_attr.61, loop_hafnian_batch.py:38))], vararg=None, target=None)
DEBUG 2022-01-28 15:49:34,110 on stmt: $148load_global.64 = global(numba: <module 'numba' from 'C:\\Users\\zl4821\\Anaconda3\\envs\\GBS\\lib\\site-packages\\numba\\__init__.py'>)
DEBUG 2022-01-28 15:49:34,110 on stmt: $150load_method.65 = getattr(value=$148load_global.64, attr=prange)
DEBUG 2022-01-28 15:49:34,110 on stmt: $154call_method.67 = call $150load_method.65(steps, func=$150load_method.65, args=[Var(steps, loop_hafnian_batch.py:33)], kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:34,110 on stmt: $156get_iter.68 = getiter(value=$154call_method.67)
DEBUG 2022-01-28 15:49:34,110 on stmt: $phi158.0 = $156get_iter.68
DEBUG 2022-01-28 15:49:34,110 on stmt: jump 158
DEBUG 2022-01-28 15:49:34,110 ==== SSA block rewrite pass on 158
DEBUG 2022-01-28 15:49:34,110 Running <numba.core.ssa._FreshVarHandler object at 0x000002410C1BEA90>
DEBUG 2022-01-28 15:49:34,110 on stmt: $158for_iter.1 = iternext(value=$phi158.0)
DEBUG 2022-01-28 15:49:34,110 on stmt: $158for_iter.2 = pair_first(value=$158for_iter.1)
DEBUG 2022-01-28 15:49:34,110 on stmt: $158for_iter.3 = pair_second(value=$158for_iter.1)
DEBUG 2022-01-28 15:49:34,110 on stmt: $phi162.1 = $158for_iter.2
DEBUG 2022-01-28 15:49:34,110 on stmt: branch $158for_iter.3, 162, 520
DEBUG 2022-01-28 15:49:34,110 ==== SSA block rewrite pass on 162
DEBUG 2022-01-28 15:49:34,110 Running <numba.core.ssa._FreshVarHandler object at 0x000002410C1BEA90>
DEBUG 2022-01-28 15:49:34,110 on stmt: j = $phi162.1
DEBUG 2022-01-28 15:49:34,110 first assign: j
DEBUG 2022-01-28 15:49:34,110 replaced with: j = $phi162.1
DEBUG 2022-01-28 15:49:34,110 on stmt: $164load_global.2 = global(np: <module 'numpy' from 'C:\\Users\\zl4821\\Anaconda3\\envs\\GBS\\lib\\site-packages\\numpy\\__init__.py'>)
DEBUG 2022-01-28 15:49:34,110 on stmt: $166load_attr.3 = getattr(value=$164load_global.2, attr=zeros)
DEBUG 2022-01-28 15:49:34,110 on stmt: $const168.4 = const(int, 2)
DEBUG 2022-01-28 15:49:34,110 on stmt: $172binary_multiply.6 = $const168.4 * batch_max
DEBUG 2022-01-28 15:49:34,110 on stmt: $176binary_add.8 = $172binary_multiply.6 + odd_cutoff
DEBUG 2022-01-28 15:49:34,110 on stmt: $const178.9 = const(int, 1)
DEBUG 2022-01-28 15:49:34,110 on stmt: $180binary_add.10 = $176binary_add.8 + $const178.9
DEBUG 2022-01-28 15:49:34,110 on stmt: $182load_global.11 = global(np: <module 'numpy' from 'C:\\Users\\zl4821\\Anaconda3\\envs\\GBS\\lib\\site-packages\\numpy\\__init__.py'>)
DEBUG 2022-01-28 15:49:34,110 on stmt: $184load_attr.12 = getattr(value=$182load_global.11, attr=complex128)
DEBUG 2022-01-28 15:49:34,110 on stmt: Hnew = call $166load_attr.3($180binary_add.10, func=$166load_attr.3, args=[Var($180binary_add.10, loop_hafnian_batch.py:41)], kws=[('dtype', Var($184load_attr.12, loop_hafnian_batch.py:41))], vararg=None, target=None)
DEBUG 2022-01-28 15:49:34,110 on stmt: $192load_global.15 = global(find_kept_edges: CPUDispatcher(<function find_kept_edges at 0x0000024107424550>))
DEBUG 2022-01-28 15:49:34,110 on stmt: kept_edges = call $192load_global.15(j, edge_reps, func=$192load_global.15, args=[Var(j, loop_hafnian_batch.py:39), Var(edge_reps, loop_hafnian_batch.py:32)], kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:34,110 on stmt: $204load_method.20 = getattr(value=kept_edges, attr=sum)
DEBUG 2022-01-28 15:49:34,110 on stmt: edges_sum = call $204load_method.20(func=$204load_method.20, args=[], kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:34,110 on stmt: binom_prod = const(float, 1.0)
DEBUG 2022-01-28 15:49:34,118 on stmt: $214load_global.23 = global(range: <class 'range'>)
DEBUG 2022-01-28 15:49:34,118 on stmt: $const216.24 = const(int, 1)
DEBUG 2022-01-28 15:49:34,118 on stmt: $const220.26 = const(int, 2)
DEBUG 2022-01-28 15:49:34,118 on stmt: $222binary_floor_divide.27 = n // $const220.26
DEBUG 2022-01-28 15:49:34,118 on stmt: $224call_function.28 = call $214load_global.23($const216.24, $222binary_floor_divide.27, func=$214load_global.23, args=[Var($const216.24, loop_hafnian_batch.py:47), Var($222binary_floor_divide.27, loop_hafnian_batch.py:47)], kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:34,118 on stmt: $226get_iter.29 = getiter(value=$224call_function.28)
DEBUG 2022-01-28 15:49:34,118 on stmt: $phi228.1 = $226get_iter.29
DEBUG 2022-01-28 15:49:34,118 on stmt: jump 228
DEBUG 2022-01-28 15:49:34,118 ==== SSA block rewrite pass on 228
DEBUG 2022-01-28 15:49:34,118 Running <numba.core.ssa._FreshVarHandler object at 0x000002410C1BEA90>
DEBUG 2022-01-28 15:49:34,118 on stmt: binom_prod.2 = phi(incoming_values=[Var(binom_prod, loop_hafnian_batch.py:46), Var(binom_prod.1, loop_hafnian_batch.py:48)], incoming_blocks=[162, 230])
DEBUG 2022-01-28 15:49:34,118 on stmt: $228for_iter.2 = iternext(value=$phi228.1)
DEBUG 2022-01-28 15:49:34,118 on stmt: $228for_iter.3 = pair_first(value=$228for_iter.2)
DEBUG 2022-01-28 15:49:34,120 on stmt: $228for_iter.4 = pair_second(value=$228for_iter.2)
DEBUG 2022-01-28 15:49:34,120 on stmt: $phi230.2 = $228for_iter.3
DEBUG 2022-01-28 15:49:34,120 on stmt: branch $228for_iter.4, 230, 258
DEBUG 2022-01-28 15:49:34,120 ==== SSA block rewrite pass on 230
DEBUG 2022-01-28 15:49:34,120 Running <numba.core.ssa._FreshVarHandler object at 0x000002410C1BEA90>
DEBUG 2022-01-28 15:49:34,120 on stmt: i = $phi230.2
DEBUG 2022-01-28 15:49:34,120 on stmt: $240binary_subscr.7 = getitem(value=edge_reps, index=i, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:34,120 on stmt: $246binary_subscr.10 = getitem(value=kept_edges, index=i, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:34,120 on stmt: $248build_tuple.11 = build_tuple(items=[Var($240binary_subscr.7, loop_hafnian_batch.py:48), Var($246binary_subscr.10, loop_hafnian_batch.py:48)])
DEBUG 2022-01-28 15:49:34,120 on stmt: $250binary_subscr.12 = getitem(value=binoms, index=$248build_tuple.11, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:34,120 on stmt: $252inplace_multiply.13 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=binom_prod.2, rhs=$250binary_subscr.12, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-01-28 15:49:34,120 on stmt: binom_prod.1 = $252inplace_multiply.13
DEBUG 2022-01-28 15:49:34,120 on stmt: jump 228
DEBUG 2022-01-28 15:49:34,120 ==== SSA block rewrite pass on 258
DEBUG 2022-01-28 15:49:34,120 Running <numba.core.ssa._FreshVarHandler object at 0x000002410C1BEA90>
DEBUG 2022-01-28 15:49:34,120 on stmt: bool260 = global(bool: <class 'bool'>)
DEBUG 2022-01-28 15:49:34,120 on stmt: $260pred = call bool260(glynn, func=bool260, args=(Var(glynn, loop_hafnian_batch.py:24),), kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:34,120 on stmt: branch $260pred, 264, 278
DEBUG 2022-01-28 15:49:34,120 ==== SSA block rewrite pass on 264
DEBUG 2022-01-28 15:49:34,120 Running <numba.core.ssa._FreshVarHandler object at 0x000002410C1BEA90>
DEBUG 2022-01-28 15:49:34,120 on stmt: $const264.1 = const(int, 2)
DEBUG 2022-01-28 15:49:34,120 on stmt: $268binary_multiply.3 = $const264.1 * kept_edges
DEBUG 2022-01-28 15:49:34,120 on stmt: delta = $268binary_multiply.3 - edge_reps
DEBUG 2022-01-28 15:49:34,120 on stmt: jump 282
DEBUG 2022-01-28 15:49:34,120 ==== SSA block rewrite pass on 278
DEBUG 2022-01-28 15:49:34,120 Running <numba.core.ssa._FreshVarHandler object at 0x000002410C1BEA90>
DEBUG 2022-01-28 15:49:34,120 on stmt: delta = kept_edges
DEBUG 2022-01-28 15:49:34,120 on stmt: jump 282
DEBUG 2022-01-28 15:49:34,120 ==== SSA block rewrite pass on 282
DEBUG 2022-01-28 15:49:34,120 Running <numba.core.ssa._FreshVarHandler object at 0x000002410C1BEA90>
DEBUG 2022-01-28 15:49:34,120 on stmt: $282load_global.1 = global(get_submatrices: CPUDispatcher(<function get_submatrices at 0x0000024107424E50>))
DEBUG 2022-01-28 15:49:34,120 on stmt: $292call_function.6 = call $282load_global.1(delta, A, D, oddV, func=$282load_global.1, args=[Var(delta, loop_hafnian_batch.py:51), Var(A, loop_hafnian_batch.py:24), Var(D, loop_hafnian_batch.py:24), Var(oddV, loop_hafnian_batch.py:25)], kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:34,120 on stmt: $294unpack_sequence.11 = exhaust_iter(value=$292call_function.6, count=4)
DEBUG 2022-01-28 15:49:34,120 on stmt: $294unpack_sequence.7 = static_getitem(value=$294unpack_sequence.11, index=0, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:34,120 on stmt: $294unpack_sequence.8 = static_getitem(value=$294unpack_sequence.11, index=1, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:34,120 on stmt: $294unpack_sequence.9 = static_getitem(value=$294unpack_sequence.11, index=2, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:34,120 on stmt: $294unpack_sequence.10 = static_getitem(value=$294unpack_sequence.11, index=3, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:34,120 on stmt: AX_S = $294unpack_sequence.7
DEBUG 2022-01-28 15:49:34,120 on stmt: XD_S = $294unpack_sequence.8
DEBUG 2022-01-28 15:49:34,120 on stmt: D_S = $294unpack_sequence.9
DEBUG 2022-01-28 15:49:34,120 on stmt: oddVX_S = $294unpack_sequence.10
DEBUG 2022-01-28 15:49:34,120 on stmt: $304load_global.12 = global(eigvals: CPUDispatcher(<function eigvals at 0x00000241074303A0>))
DEBUG 2022-01-28 15:49:34,120 on stmt: E = call $304load_global.12(AX_S, func=$304load_global.12, args=[Var(AX_S, loop_hafnian_batch.py:55)], kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:34,120 on stmt: $312load_global.15 = global(f_loop: CPUDispatcher(<function f_loop at 0x00000241074248B0>))
DEBUG 2022-01-28 15:49:34,120 on stmt: f_even = call $312load_global.15(E, AX_S, XD_S, D_S, N_max, func=$312load_global.15, args=[Var(E, loop_hafnian_batch.py:57), Var(AX_S, loop_hafnian_batch.py:55), Var(XD_S, loop_hafnian_batch.py:55), Var(D_S, loop_hafnian_batch.py:55), Var(N_max, loop_hafnian_batch.py:30)], kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:34,120 on stmt: $328load_global.22 = global(f_loop_odd: CPUDispatcher(<function f_loop_odd at 0x0000024107424AF0>))
DEBUG 2022-01-28 15:49:34,120 on stmt: f_odd = call $328load_global.22(E, AX_S, XD_S, D_S, N_max, oddloop, oddVX_S, func=$328load_global.22, args=[Var(E, loop_hafnian_batch.py:57), Var(AX_S, loop_hafnian_batch.py:55), Var(XD_S, loop_hafnian_batch.py:55), Var(D_S, loop_hafnian_batch.py:55), Var(N_max, loop_hafnian_batch.py:30), Var(oddloop, loop_hafnian_batch.py:24), Var(oddVX_S, loop_hafnian_batch.py:55)], kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:34,120 on stmt: $348load_global.31 = global(range: <class 'range'>)
DEBUG 2022-01-28 15:49:34,120 on stmt: $const350.32 = const(int, 2)
DEBUG 2022-01-28 15:49:34,120 on stmt: $const354.34 = const(int, 0)
DEBUG 2022-01-28 15:49:34,120 on stmt: $356binary_subscr.35 = static_getitem(value=kept_edges, index=0, index_var=$const354.34, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:34,120 on stmt: $358binary_multiply.36 = $const350.32 * $356binary_subscr.35
DEBUG 2022-01-28 15:49:34,120 on stmt: $const360.37 = const(int, 2)
DEBUG 2022-01-28 15:49:34,120 on stmt: $364binary_multiply.39 = $const360.37 * batch_max
DEBUG 2022-01-28 15:49:34,120 on stmt: $368binary_add.41 = $364binary_multiply.39 + odd_cutoff
DEBUG 2022-01-28 15:49:34,120 on stmt: $const370.42 = const(int, 1)
DEBUG 2022-01-28 15:49:34,120 on stmt: $372binary_add.43 = $368binary_add.41 + $const370.42
DEBUG 2022-01-28 15:49:34,120 on stmt: $374call_function.44 = call $348load_global.31($358binary_multiply.36, $372binary_add.43, func=$348load_global.31, args=[Var($358binary_multiply.36, loop_hafnian_batch.py:64), Var($372binary_add.43, loop_hafnian_batch.py:64)], kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:34,120 on stmt: $376get_iter.45 = getiter(value=$374call_function.44)
DEBUG 2022-01-28 15:49:34,120 on stmt: $phi378.1 = $376get_iter.45
DEBUG 2022-01-28 15:49:34,120 on stmt: jump 378
DEBUG 2022-01-28 15:49:34,120 ==== SSA block rewrite pass on 378
DEBUG 2022-01-28 15:49:34,120 Running <numba.core.ssa._FreshVarHandler object at 0x000002410C1BEA90>
DEBUG 2022-01-28 15:49:34,120 on stmt: $378for_iter.2 = iternext(value=$phi378.1)
DEBUG 2022-01-28 15:49:34,120 on stmt: $378for_iter.3 = pair_first(value=$378for_iter.2)
DEBUG 2022-01-28 15:49:34,120 on stmt: $378for_iter.4 = pair_second(value=$378for_iter.2)
DEBUG 2022-01-28 15:49:34,120 on stmt: $phi380.2 = $378for_iter.3
DEBUG 2022-01-28 15:49:34,120 on stmt: branch $378for_iter.4, 380, 510
DEBUG 2022-01-28 15:49:34,120 ==== SSA block rewrite pass on 380
DEBUG 2022-01-28 15:49:34,120 Running <numba.core.ssa._FreshVarHandler object at 0x000002410C1BEA90>
DEBUG 2022-01-28 15:49:34,120 on stmt: N_det = $phi380.2
DEBUG 2022-01-28 15:49:34,120 on stmt: N = N_fixed + N_det
DEBUG 2022-01-28 15:49:34,120 on stmt: $const390.6 = const(float, -1.0)
DEBUG 2022-01-28 15:49:34,120 on stmt: $const394.8 = const(int, 2)
DEBUG 2022-01-28 15:49:34,120 on stmt: $396binary_floor_divide.9 = N // $const394.8
DEBUG 2022-01-28 15:49:34,120 on stmt: $400binary_subtract.11 = $396binary_floor_divide.9 - edges_sum
DEBUG 2022-01-28 15:49:34,120 on stmt: plus_minus = $const390.6 ** $400binary_subtract.11
DEBUG 2022-01-28 15:49:34,120 on stmt: $const410.15 = const(int, 2)
DEBUG 2022-01-28 15:49:34,120 on stmt: $412binary_floor_divide.16 = N_det // $const410.15
DEBUG 2022-01-28 15:49:34,120 on stmt: $const416.18 = const(int, 0)
DEBUG 2022-01-28 15:49:34,120 on stmt: $418binary_subscr.19 = static_getitem(value=kept_edges, index=0, index_var=$const416.18, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:34,120 on stmt: $420build_tuple.20 = build_tuple(items=[Var($412binary_floor_divide.16, loop_hafnian_batch.py:68), Var($418binary_subscr.19, loop_hafnian_batch.py:68)])
DEBUG 2022-01-28 15:49:34,128 on stmt: $422binary_subscr.21 = getitem(value=binoms, index=$420build_tuple.20, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:34,128 on stmt: n_det_binom_prod = $422binary_subscr.21 * binom_prod.2
DEBUG 2022-01-28 15:49:34,128 on stmt: $const432.25 = const(int, 2)
DEBUG 2022-01-28 15:49:34,128 on stmt: $434binary_modulo.26 = N_det % $const432.25
DEBUG 2022-01-28 15:49:34,128 on stmt: $const436.27 = const(int, 0)
DEBUG 2022-01-28 15:49:34,128 on stmt: $438compare_op.28 = $434binary_modulo.26 == $const436.27
DEBUG 2022-01-28 15:49:34,128 on stmt: bool440 = global(bool: <class 'bool'>)
DEBUG 2022-01-28 15:49:34,128 on stmt: $440pred = call bool440($438compare_op.28, func=bool440, args=(Var($438compare_op.28, loop_hafnian_batch.py:70),), kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:34,128 on stmt: branch $440pred, 444, 478
DEBUG 2022-01-28 15:49:34,128 ==== SSA block rewrite pass on 444
DEBUG 2022-01-28 15:49:34,128 Running <numba.core.ssa._FreshVarHandler object at 0x000002410C1BEA90>
DEBUG 2022-01-28 15:49:34,128 on stmt: $450binary_subscr.6 = getitem(value=Hnew, index=N_det, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:34,128 on stmt: $456binary_multiply.9 = n_det_binom_prod * plus_minus
DEBUG 2022-01-28 15:49:34,128 on stmt: $const462.12 = const(int, 2)
DEBUG 2022-01-28 15:49:34,128 on stmt: $464binary_floor_divide.13 = N // $const462.12
DEBUG 2022-01-28 15:49:34,128 on stmt: $466binary_subscr.14 = getitem(value=f_even, index=$464binary_floor_divide.13, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:34,128 on stmt: $468binary_multiply.15 = $456binary_multiply.9 * $466binary_subscr.14
DEBUG 2022-01-28 15:49:34,128 on stmt: $470inplace_add.16 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$450binary_subscr.6, rhs=$468binary_multiply.15, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-01-28 15:49:34,130 on stmt: Hnew[N_det] = $470inplace_add.16
DEBUG 2022-01-28 15:49:34,130 on stmt: jump 506
DEBUG 2022-01-28 15:49:34,130 ==== SSA block rewrite pass on 478
DEBUG 2022-01-28 15:49:34,130 Running <numba.core.ssa._FreshVarHandler object at 0x000002410C1BEA90>
DEBUG 2022-01-28 15:49:34,130 on stmt: $484binary_subscr.6 = getitem(value=Hnew, index=N_det, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:34,130 on stmt: $490binary_multiply.9 = n_det_binom_prod * plus_minus
DEBUG 2022-01-28 15:49:34,130 on stmt: $496binary_subscr.12 = getitem(value=f_odd, index=N, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:34,130 on stmt: $498binary_multiply.13 = $490binary_multiply.9 * $496binary_subscr.12
DEBUG 2022-01-28 15:49:34,130 on stmt: $500inplace_add.14 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$484binary_subscr.6, rhs=$498binary_multiply.13, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-01-28 15:49:34,130 on stmt: Hnew[N_det] = $500inplace_add.14
DEBUG 2022-01-28 15:49:34,130 on stmt: jump 506
DEBUG 2022-01-28 15:49:34,130 ==== SSA block rewrite pass on 506
DEBUG 2022-01-28 15:49:34,130 Running <numba.core.ssa._FreshVarHandler object at 0x000002410C1BEA90>
DEBUG 2022-01-28 15:49:34,130 on stmt: jump 378
DEBUG 2022-01-28 15:49:34,130 ==== SSA block rewrite pass on 510
DEBUG 2022-01-28 15:49:34,130 Running <numba.core.ssa._FreshVarHandler object at 0x000002410C1BEA90>
DEBUG 2022-01-28 15:49:34,130 on stmt: $514inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=H_batch, rhs=Hnew, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-01-28 15:49:34,130 on stmt: H_batch = $514inplace_add.3
DEBUG 2022-01-28 15:49:34,130 on stmt: jump 158
DEBUG 2022-01-28 15:49:34,130 ==== SSA block rewrite pass on 520
DEBUG 2022-01-28 15:49:34,130 Running <numba.core.ssa._FreshVarHandler object at 0x000002410C1BEA90>
DEBUG 2022-01-28 15:49:34,130 on stmt: bool522 = global(bool: <class 'bool'>)
DEBUG 2022-01-28 15:49:34,130 on stmt: $522pred = call bool522(glynn, func=bool522, args=(Var(glynn, loop_hafnian_batch.py:24),), kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:34,130 on stmt: branch $522pred, 526, 580
DEBUG 2022-01-28 15:49:34,130 ==== SSA block rewrite pass on 526
DEBUG 2022-01-28 15:49:34,130 Running <numba.core.ssa._FreshVarHandler object at 0x000002410C1BEA90>
DEBUG 2022-01-28 15:49:34,130 on stmt: $526load_global.0 = global(range: <class 'range'>)
DEBUG 2022-01-28 15:49:34,130 on stmt: $530load_attr.2 = getattr(value=H_batch, attr=shape)
DEBUG 2022-01-28 15:49:34,130 on stmt: $const532.3 = const(int, 0)
DEBUG 2022-01-28 15:49:34,130 on stmt: $534binary_subscr.4 = static_getitem(value=$530load_attr.2, index=0, index_var=$const532.3, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:34,130 on stmt: $536call_function.5 = call $526load_global.0($534binary_subscr.4, func=$526load_global.0, args=[Var($534binary_subscr.4, loop_hafnian_batch.py:78)], kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:34,130 on stmt: $538get_iter.6 = getiter(value=$536call_function.5)
DEBUG 2022-01-28 15:49:34,130 on stmt: $phi540.0 = $538get_iter.6
DEBUG 2022-01-28 15:49:34,130 on stmt: jump 540
DEBUG 2022-01-28 15:49:34,130 ==== SSA block rewrite pass on 540
DEBUG 2022-01-28 15:49:34,130 Running <numba.core.ssa._FreshVarHandler object at 0x000002410C1BEA90>
DEBUG 2022-01-28 15:49:34,130 on stmt: $540for_iter.1 = iternext(value=$phi540.0)
DEBUG 2022-01-28 15:49:34,130 on stmt: $540for_iter.2 = pair_first(value=$540for_iter.1)
DEBUG 2022-01-28 15:49:34,130 on stmt: $540for_iter.3 = pair_second(value=$540for_iter.1)
DEBUG 2022-01-28 15:49:34,130 on stmt: $phi542.1 = $540for_iter.2
DEBUG 2022-01-28 15:49:34,130 on stmt: branch $540for_iter.3, 542, 580
DEBUG 2022-01-28 15:49:34,130 ==== SSA block rewrite pass on 542
DEBUG 2022-01-28 15:49:34,130 Running <numba.core.ssa._FreshVarHandler object at 0x000002410C1BEA90>
DEBUG 2022-01-28 15:49:34,130 on stmt: j = $phi542.1
DEBUG 2022-01-28 15:49:34,130 replaced with: j.1 = $phi542.1
DEBUG 2022-01-28 15:49:34,130 on stmt: x = N_fixed + j
DEBUG 2022-01-28 15:49:34,130 on stmt: $558binary_subscr.9 = getitem(value=H_batch, index=j, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:34,130 on stmt: $const560.10 = const(float, 0.5)
DEBUG 2022-01-28 15:49:34,130 on stmt: $const564.12 = const(int, 2)
DEBUG 2022-01-28 15:49:34,130 on stmt: $566binary_floor_divide.13 = x // $const564.12
DEBUG 2022-01-28 15:49:34,130 on stmt: $568binary_power.14 = $const560.10 ** $566binary_floor_divide.13
DEBUG 2022-01-28 15:49:34,130 on stmt: $570inplace_multiply.15 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=$558binary_subscr.9, rhs=$568binary_power.14, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-01-28 15:49:34,130 on stmt: H_batch[j] = $570inplace_multiply.15
DEBUG 2022-01-28 15:49:34,130 on stmt: jump 540
DEBUG 2022-01-28 15:49:34,130 ==== SSA block rewrite pass on 580
DEBUG 2022-01-28 15:49:34,130 Running <numba.core.ssa._FreshVarHandler object at 0x000002410C1BEA90>
DEBUG 2022-01-28 15:49:34,130 on stmt: $582return_value.1 = cast(value=H_batch)
DEBUG 2022-01-28 15:49:34,130 on stmt: return $582return_value.1
DEBUG 2022-01-28 15:49:34,130 Replaced assignments: defaultdict(<class 'list'>,
            {162: [<numba.core.ir.Assign object at 0x000002410F8993A0>],
             542: [<numba.core.ir.Assign object at 0x000002410E175250>]})
DEBUG 2022-01-28 15:49:34,130 ==== SSA block rewrite pass on 0
DEBUG 2022-01-28 15:49:34,130 Running <numba.core.ssa._FixSSAVars object at 0x000002410F899370>
DEBUG 2022-01-28 15:49:34,130 on stmt: A = arg(0, name=A)
DEBUG 2022-01-28 15:49:34,130 on stmt: D = arg(1, name=D)
DEBUG 2022-01-28 15:49:34,130 on stmt: fixed_edge_reps = arg(2, name=fixed_edge_reps)
DEBUG 2022-01-28 15:49:34,130 on stmt: batch_max = arg(3, name=batch_max)
DEBUG 2022-01-28 15:49:34,130 on stmt: odd_cutoff = arg(4, name=odd_cutoff)
DEBUG 2022-01-28 15:49:34,130 on stmt: glynn = arg(5, name=glynn)
DEBUG 2022-01-28 15:49:34,130 on stmt: $const4.1 = const(int, 0)
DEBUG 2022-01-28 15:49:34,130 on stmt: oddloop = static_getitem(value=D, index=0, index_var=$const4.1, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:34,130 on stmt: $const12.4 = const(int, 0)
DEBUG 2022-01-28 15:49:34,130 on stmt: $const14.5 = const(NoneType, None)
DEBUG 2022-01-28 15:49:34,130 on stmt: $const16.6 = const(NoneType, None)
DEBUG 2022-01-28 15:49:34,130 on stmt: $18build_slice.7 = global(slice: <class 'slice'>)
DEBUG 2022-01-28 15:49:34,130 on stmt: $18build_slice.8 = call $18build_slice.7($const14.5, $const16.6, func=$18build_slice.7, args=(Var($const14.5, loop_hafnian_batch.py:25), Var($const16.6, loop_hafnian_batch.py:25)), kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:34,130 on stmt: $20build_tuple.9 = build_tuple(items=[Var($const12.4, loop_hafnian_batch.py:25), Var($18build_slice.8, loop_hafnian_batch.py:25)])
DEBUG 2022-01-28 15:49:34,130 on stmt: oddV = static_getitem(value=A, index=(0, slice(None, None, None)), index_var=$20build_tuple.9, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:34,130 on stmt: $28load_attr.12 = getattr(value=A, attr=shape)
DEBUG 2022-01-28 15:49:34,130 on stmt: $const30.13 = const(int, 0)
DEBUG 2022-01-28 15:49:34,130 on stmt: n = static_getitem(value=$28load_attr.12, index=0, index_var=$const30.13, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:34,130 on stmt: $const36.15 = const(int, 2)
DEBUG 2022-01-28 15:49:34,130 on stmt: $40load_method.17 = getattr(value=fixed_edge_reps, attr=sum)
DEBUG 2022-01-28 15:49:34,130 on stmt: $42call_method.18 = call $40load_method.17(func=$40load_method.17, args=[], kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:34,130 on stmt: N_fixed = $const36.15 * $42call_method.18
DEBUG 2022-01-28 15:49:34,130 on stmt: $const50.21 = const(int, 2)
DEBUG 2022-01-28 15:49:34,130 on stmt: $54binary_multiply.23 = $const50.21 * batch_max
DEBUG 2022-01-28 15:49:34,130 on stmt: $56binary_add.24 = N_fixed + $54binary_multiply.23
DEBUG 2022-01-28 15:49:34,138 on stmt: N_max = $56binary_add.24 + odd_cutoff
DEBUG 2022-01-28 15:49:34,138 on stmt: $64load_global.27 = global(np: <module 'numpy' from 'C:\\Users\\zl4821\\Anaconda3\\envs\\GBS\\lib\\site-packages\\numpy\\__init__.py'>)
DEBUG 2022-01-28 15:49:34,138 on stmt: $66load_method.28 = getattr(value=$64load_global.27, attr=concatenate)
DEBUG 2022-01-28 15:49:34,138 on stmt: $68load_global.29 = global(np: <module 'numpy' from 'C:\\Users\\zl4821\\Anaconda3\\envs\\GBS\\lib\\site-packages\\numpy\\__init__.py'>)
DEBUG 2022-01-28 15:49:34,138 on stmt: $70load_method.30 = getattr(value=$68load_global.29, attr=array)
DEBUG 2022-01-28 15:49:34,138 on stmt: $74build_list.32 = build_list(items=[Var(batch_max, loop_hafnian_batch.py:24)])
DEBUG 2022-01-28 15:49:34,138 on stmt: $76call_method.33 = call $70load_method.30($74build_list.32, func=$70load_method.30, args=[Var($74build_list.32, loop_hafnian_batch.py:32)], kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:34,138 on stmt: $80build_tuple.35 = build_tuple(items=[Var($76call_method.33, loop_hafnian_batch.py:32), Var(fixed_edge_reps, loop_hafnian_batch.py:24)])
DEBUG 2022-01-28 15:49:34,138 on stmt: edge_reps = call $66load_method.28($80build_tuple.35, func=$66load_method.28, args=[Var($80build_tuple.35, loop_hafnian_batch.py:32)], kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:34,138 on stmt: $86load_global.37 = global(np: <module 'numpy' from 'C:\\Users\\zl4821\\Anaconda3\\envs\\GBS\\lib\\site-packages\\numpy\\__init__.py'>)
DEBUG 2022-01-28 15:49:34,138 on stmt: $88load_method.38 = getattr(value=$86load_global.37, attr=prod)
DEBUG 2022-01-28 15:49:34,138 on stmt: $const92.40 = const(int, 1)
DEBUG 2022-01-28 15:49:34,138 on stmt: $94binary_add.41 = edge_reps + $const92.40
DEBUG 2022-01-28 15:49:34,138 on stmt: steps = call $88load_method.38($94binary_add.41, func=$88load_method.38, args=[Var($94binary_add.41, loop_hafnian_batch.py:33)], kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:34,138 on stmt: $102load_method.44 = getattr(value=edge_reps, attr=max)
DEBUG 2022-01-28 15:49:34,138 on stmt: $104call_method.45 = call $102load_method.44(func=$102load_method.44, args=[], kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:34,140 on stmt: max_binom = $104call_method.45 + odd_cutoff
DEBUG 2022-01-28 15:49:34,140 on stmt: $112load_global.48 = global(precompute_binoms: CPUDispatcher(<function precompute_binoms at 0x00000241074240D0>))
DEBUG 2022-01-28 15:49:34,140 on stmt: binoms = call $112load_global.48(max_binom, func=$112load_global.48, args=[Var(max_binom, loop_hafnian_batch.py:35)], kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:34,140 on stmt: $120load_global.51 = global(np: <module 'numpy' from 'C:\\Users\\zl4821\\Anaconda3\\envs\\GBS\\lib\\site-packages\\numpy\\__init__.py'>)
DEBUG 2022-01-28 15:49:34,140 on stmt: $122load_attr.52 = getattr(value=$120load_global.51, attr=zeros)
DEBUG 2022-01-28 15:49:34,140 on stmt: $const124.53 = const(int, 2)
DEBUG 2022-01-28 15:49:34,140 on stmt: $128binary_multiply.55 = $const124.53 * batch_max
DEBUG 2022-01-28 15:49:34,140 on stmt: $132binary_add.57 = $128binary_multiply.55 + odd_cutoff
DEBUG 2022-01-28 15:49:34,140 on stmt: $const134.58 = const(int, 1)
DEBUG 2022-01-28 15:49:34,140 on stmt: $136binary_add.59 = $132binary_add.57 + $const134.58
DEBUG 2022-01-28 15:49:34,140 on stmt: $138load_global.60 = global(np: <module 'numpy' from 'C:\\Users\\zl4821\\Anaconda3\\envs\\GBS\\lib\\site-packages\\numpy\\__init__.py'>)
DEBUG 2022-01-28 15:49:34,140 on stmt: $140load_attr.61 = getattr(value=$138load_global.60, attr=complex128)
DEBUG 2022-01-28 15:49:34,140 on stmt: H_batch = call $122load_attr.52($136binary_add.59, func=$122load_attr.52, args=[Var($136binary_add.59, loop_hafnian_batch.py:38)], kws=[('dtype', Var($140load_attr.61, loop_hafnian_batch.py:38))], vararg=None, target=None)
DEBUG 2022-01-28 15:49:34,140 on stmt: $148load_global.64 = global(numba: <module 'numba' from 'C:\\Users\\zl4821\\Anaconda3\\envs\\GBS\\lib\\site-packages\\numba\\__init__.py'>)
DEBUG 2022-01-28 15:49:34,140 on stmt: $150load_method.65 = getattr(value=$148load_global.64, attr=prange)
DEBUG 2022-01-28 15:49:34,140 on stmt: $154call_method.67 = call $150load_method.65(steps, func=$150load_method.65, args=[Var(steps, loop_hafnian_batch.py:33)], kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:34,140 on stmt: $156get_iter.68 = getiter(value=$154call_method.67)
DEBUG 2022-01-28 15:49:34,140 on stmt: $phi158.0 = $156get_iter.68
DEBUG 2022-01-28 15:49:34,140 on stmt: jump 158
DEBUG 2022-01-28 15:49:34,140 ==== SSA block rewrite pass on 158
DEBUG 2022-01-28 15:49:34,140 Running <numba.core.ssa._FixSSAVars object at 0x000002410F899370>
DEBUG 2022-01-28 15:49:34,140 on stmt: $158for_iter.1 = iternext(value=$phi158.0)
DEBUG 2022-01-28 15:49:34,140 on stmt: $158for_iter.2 = pair_first(value=$158for_iter.1)
DEBUG 2022-01-28 15:49:34,140 on stmt: $158for_iter.3 = pair_second(value=$158for_iter.1)
DEBUG 2022-01-28 15:49:34,140 on stmt: $phi162.1 = $158for_iter.2
DEBUG 2022-01-28 15:49:34,140 on stmt: branch $158for_iter.3, 162, 520
DEBUG 2022-01-28 15:49:34,140 ==== SSA block rewrite pass on 162
DEBUG 2022-01-28 15:49:34,140 Running <numba.core.ssa._FixSSAVars object at 0x000002410F899370>
DEBUG 2022-01-28 15:49:34,140 on stmt: j = $phi162.1
DEBUG 2022-01-28 15:49:34,140 on stmt: $164load_global.2 = global(np: <module 'numpy' from 'C:\\Users\\zl4821\\Anaconda3\\envs\\GBS\\lib\\site-packages\\numpy\\__init__.py'>)
DEBUG 2022-01-28 15:49:34,140 on stmt: $166load_attr.3 = getattr(value=$164load_global.2, attr=zeros)
DEBUG 2022-01-28 15:49:34,140 on stmt: $const168.4 = const(int, 2)
DEBUG 2022-01-28 15:49:34,140 on stmt: $172binary_multiply.6 = $const168.4 * batch_max
DEBUG 2022-01-28 15:49:34,140 on stmt: $176binary_add.8 = $172binary_multiply.6 + odd_cutoff
DEBUG 2022-01-28 15:49:34,140 on stmt: $const178.9 = const(int, 1)
DEBUG 2022-01-28 15:49:34,140 on stmt: $180binary_add.10 = $176binary_add.8 + $const178.9
DEBUG 2022-01-28 15:49:34,140 on stmt: $182load_global.11 = global(np: <module 'numpy' from 'C:\\Users\\zl4821\\Anaconda3\\envs\\GBS\\lib\\site-packages\\numpy\\__init__.py'>)
DEBUG 2022-01-28 15:49:34,140 on stmt: $184load_attr.12 = getattr(value=$182load_global.11, attr=complex128)
DEBUG 2022-01-28 15:49:34,140 on stmt: Hnew = call $166load_attr.3($180binary_add.10, func=$166load_attr.3, args=[Var($180binary_add.10, loop_hafnian_batch.py:41)], kws=[('dtype', Var($184load_attr.12, loop_hafnian_batch.py:41))], vararg=None, target=None)
DEBUG 2022-01-28 15:49:34,140 on stmt: $192load_global.15 = global(find_kept_edges: CPUDispatcher(<function find_kept_edges at 0x0000024107424550>))
DEBUG 2022-01-28 15:49:34,140 on stmt: kept_edges = call $192load_global.15(j, edge_reps, func=$192load_global.15, args=[Var(j, loop_hafnian_batch.py:39), Var(edge_reps, loop_hafnian_batch.py:32)], kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:34,140 find_def var='j' stmt=kept_edges = call $192load_global.15(j, edge_reps, func=$192load_global.15, args=[Var(j, loop_hafnian_batch.py:39), Var(edge_reps, loop_hafnian_batch.py:32)], kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:34,140 on stmt: $204load_method.20 = getattr(value=kept_edges, attr=sum)
DEBUG 2022-01-28 15:49:34,140 on stmt: edges_sum = call $204load_method.20(func=$204load_method.20, args=[], kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:34,140 on stmt: binom_prod = const(float, 1.0)
DEBUG 2022-01-28 15:49:34,140 on stmt: $214load_global.23 = global(range: <class 'range'>)
DEBUG 2022-01-28 15:49:34,140 on stmt: $const216.24 = const(int, 1)
DEBUG 2022-01-28 15:49:34,140 on stmt: $const220.26 = const(int, 2)
DEBUG 2022-01-28 15:49:34,140 on stmt: $222binary_floor_divide.27 = n // $const220.26
DEBUG 2022-01-28 15:49:34,140 on stmt: $224call_function.28 = call $214load_global.23($const216.24, $222binary_floor_divide.27, func=$214load_global.23, args=[Var($const216.24, loop_hafnian_batch.py:47), Var($222binary_floor_divide.27, loop_hafnian_batch.py:47)], kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:34,140 on stmt: $226get_iter.29 = getiter(value=$224call_function.28)
DEBUG 2022-01-28 15:49:34,140 on stmt: $phi228.1 = $226get_iter.29
DEBUG 2022-01-28 15:49:34,140 on stmt: jump 228
DEBUG 2022-01-28 15:49:34,140 ==== SSA block rewrite pass on 228
DEBUG 2022-01-28 15:49:34,140 Running <numba.core.ssa._FixSSAVars object at 0x000002410F899370>
DEBUG 2022-01-28 15:49:34,140 on stmt: binom_prod.2 = phi(incoming_values=[Var(binom_prod, loop_hafnian_batch.py:46), Var(binom_prod.1, loop_hafnian_batch.py:48)], incoming_blocks=[162, 230])
DEBUG 2022-01-28 15:49:34,140 on stmt: $228for_iter.2 = iternext(value=$phi228.1)
DEBUG 2022-01-28 15:49:34,140 on stmt: $228for_iter.3 = pair_first(value=$228for_iter.2)
DEBUG 2022-01-28 15:49:34,140 on stmt: $228for_iter.4 = pair_second(value=$228for_iter.2)
DEBUG 2022-01-28 15:49:34,140 on stmt: $phi230.2 = $228for_iter.3
DEBUG 2022-01-28 15:49:34,140 on stmt: branch $228for_iter.4, 230, 258
DEBUG 2022-01-28 15:49:34,140 ==== SSA block rewrite pass on 230
DEBUG 2022-01-28 15:49:34,140 Running <numba.core.ssa._FixSSAVars object at 0x000002410F899370>
DEBUG 2022-01-28 15:49:34,140 on stmt: i = $phi230.2
DEBUG 2022-01-28 15:49:34,140 on stmt: $240binary_subscr.7 = getitem(value=edge_reps, index=i, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:34,140 on stmt: $246binary_subscr.10 = getitem(value=kept_edges, index=i, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:34,140 on stmt: $248build_tuple.11 = build_tuple(items=[Var($240binary_subscr.7, loop_hafnian_batch.py:48), Var($246binary_subscr.10, loop_hafnian_batch.py:48)])
DEBUG 2022-01-28 15:49:34,140 on stmt: $250binary_subscr.12 = getitem(value=binoms, index=$248build_tuple.11, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:34,140 on stmt: $252inplace_multiply.13 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=binom_prod.2, rhs=$250binary_subscr.12, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-01-28 15:49:34,140 on stmt: binom_prod.1 = $252inplace_multiply.13
DEBUG 2022-01-28 15:49:34,140 on stmt: jump 228
DEBUG 2022-01-28 15:49:34,140 ==== SSA block rewrite pass on 258
DEBUG 2022-01-28 15:49:34,140 Running <numba.core.ssa._FixSSAVars object at 0x000002410F899370>
DEBUG 2022-01-28 15:49:34,140 on stmt: bool260 = global(bool: <class 'bool'>)
DEBUG 2022-01-28 15:49:34,140 on stmt: $260pred = call bool260(glynn, func=bool260, args=(Var(glynn, loop_hafnian_batch.py:24),), kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:34,140 on stmt: branch $260pred, 264, 278
DEBUG 2022-01-28 15:49:34,140 ==== SSA block rewrite pass on 264
DEBUG 2022-01-28 15:49:34,140 Running <numba.core.ssa._FixSSAVars object at 0x000002410F899370>
DEBUG 2022-01-28 15:49:34,140 on stmt: $const264.1 = const(int, 2)
DEBUG 2022-01-28 15:49:34,140 on stmt: $268binary_multiply.3 = $const264.1 * kept_edges
DEBUG 2022-01-28 15:49:34,140 on stmt: delta = $268binary_multiply.3 - edge_reps
DEBUG 2022-01-28 15:49:34,140 on stmt: jump 282
DEBUG 2022-01-28 15:49:34,140 ==== SSA block rewrite pass on 278
DEBUG 2022-01-28 15:49:34,140 Running <numba.core.ssa._FixSSAVars object at 0x000002410F899370>
DEBUG 2022-01-28 15:49:34,140 on stmt: delta = kept_edges
DEBUG 2022-01-28 15:49:34,140 on stmt: jump 282
DEBUG 2022-01-28 15:49:34,140 ==== SSA block rewrite pass on 282
DEBUG 2022-01-28 15:49:34,140 Running <numba.core.ssa._FixSSAVars object at 0x000002410F899370>
DEBUG 2022-01-28 15:49:34,140 on stmt: $282load_global.1 = global(get_submatrices: CPUDispatcher(<function get_submatrices at 0x0000024107424E50>))
DEBUG 2022-01-28 15:49:34,140 on stmt: $292call_function.6 = call $282load_global.1(delta, A, D, oddV, func=$282load_global.1, args=[Var(delta, loop_hafnian_batch.py:51), Var(A, loop_hafnian_batch.py:24), Var(D, loop_hafnian_batch.py:24), Var(oddV, loop_hafnian_batch.py:25)], kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:34,140 on stmt: $294unpack_sequence.11 = exhaust_iter(value=$292call_function.6, count=4)
DEBUG 2022-01-28 15:49:34,140 on stmt: $294unpack_sequence.7 = static_getitem(value=$294unpack_sequence.11, index=0, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:34,140 on stmt: $294unpack_sequence.8 = static_getitem(value=$294unpack_sequence.11, index=1, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:34,140 on stmt: $294unpack_sequence.9 = static_getitem(value=$294unpack_sequence.11, index=2, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:34,148 on stmt: $294unpack_sequence.10 = static_getitem(value=$294unpack_sequence.11, index=3, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:34,148 on stmt: AX_S = $294unpack_sequence.7
DEBUG 2022-01-28 15:49:34,148 on stmt: XD_S = $294unpack_sequence.8
DEBUG 2022-01-28 15:49:34,148 on stmt: D_S = $294unpack_sequence.9
DEBUG 2022-01-28 15:49:34,148 on stmt: oddVX_S = $294unpack_sequence.10
DEBUG 2022-01-28 15:49:34,148 on stmt: $304load_global.12 = global(eigvals: CPUDispatcher(<function eigvals at 0x00000241074303A0>))
DEBUG 2022-01-28 15:49:34,148 on stmt: E = call $304load_global.12(AX_S, func=$304load_global.12, args=[Var(AX_S, loop_hafnian_batch.py:55)], kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:34,148 on stmt: $312load_global.15 = global(f_loop: CPUDispatcher(<function f_loop at 0x00000241074248B0>))
DEBUG 2022-01-28 15:49:34,148 on stmt: f_even = call $312load_global.15(E, AX_S, XD_S, D_S, N_max, func=$312load_global.15, args=[Var(E, loop_hafnian_batch.py:57), Var(AX_S, loop_hafnian_batch.py:55), Var(XD_S, loop_hafnian_batch.py:55), Var(D_S, loop_hafnian_batch.py:55), Var(N_max, loop_hafnian_batch.py:30)], kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:34,148 on stmt: $328load_global.22 = global(f_loop_odd: CPUDispatcher(<function f_loop_odd at 0x0000024107424AF0>))
DEBUG 2022-01-28 15:49:34,150 on stmt: f_odd = call $328load_global.22(E, AX_S, XD_S, D_S, N_max, oddloop, oddVX_S, func=$328load_global.22, args=[Var(E, loop_hafnian_batch.py:57), Var(AX_S, loop_hafnian_batch.py:55), Var(XD_S, loop_hafnian_batch.py:55), Var(D_S, loop_hafnian_batch.py:55), Var(N_max, loop_hafnian_batch.py:30), Var(oddloop, loop_hafnian_batch.py:24), Var(oddVX_S, loop_hafnian_batch.py:55)], kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:34,150 on stmt: $348load_global.31 = global(range: <class 'range'>)
DEBUG 2022-01-28 15:49:34,150 on stmt: $const350.32 = const(int, 2)
DEBUG 2022-01-28 15:49:34,150 on stmt: $const354.34 = const(int, 0)
DEBUG 2022-01-28 15:49:34,150 on stmt: $356binary_subscr.35 = static_getitem(value=kept_edges, index=0, index_var=$const354.34, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:34,150 on stmt: $358binary_multiply.36 = $const350.32 * $356binary_subscr.35
DEBUG 2022-01-28 15:49:34,150 on stmt: $const360.37 = const(int, 2)
DEBUG 2022-01-28 15:49:34,150 on stmt: $364binary_multiply.39 = $const360.37 * batch_max
DEBUG 2022-01-28 15:49:34,150 on stmt: $368binary_add.41 = $364binary_multiply.39 + odd_cutoff
DEBUG 2022-01-28 15:49:34,150 on stmt: $const370.42 = const(int, 1)
DEBUG 2022-01-28 15:49:34,150 on stmt: $372binary_add.43 = $368binary_add.41 + $const370.42
DEBUG 2022-01-28 15:49:34,150 on stmt: $374call_function.44 = call $348load_global.31($358binary_multiply.36, $372binary_add.43, func=$348load_global.31, args=[Var($358binary_multiply.36, loop_hafnian_batch.py:64), Var($372binary_add.43, loop_hafnian_batch.py:64)], kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:34,150 on stmt: $376get_iter.45 = getiter(value=$374call_function.44)
DEBUG 2022-01-28 15:49:34,150 on stmt: $phi378.1 = $376get_iter.45
DEBUG 2022-01-28 15:49:34,150 on stmt: jump 378
DEBUG 2022-01-28 15:49:34,150 ==== SSA block rewrite pass on 378
DEBUG 2022-01-28 15:49:34,150 Running <numba.core.ssa._FixSSAVars object at 0x000002410F899370>
DEBUG 2022-01-28 15:49:34,150 on stmt: $378for_iter.2 = iternext(value=$phi378.1)
DEBUG 2022-01-28 15:49:34,150 on stmt: $378for_iter.3 = pair_first(value=$378for_iter.2)
DEBUG 2022-01-28 15:49:34,150 on stmt: $378for_iter.4 = pair_second(value=$378for_iter.2)
DEBUG 2022-01-28 15:49:34,150 on stmt: $phi380.2 = $378for_iter.3
DEBUG 2022-01-28 15:49:34,150 on stmt: branch $378for_iter.4, 380, 510
DEBUG 2022-01-28 15:49:34,150 ==== SSA block rewrite pass on 380
DEBUG 2022-01-28 15:49:34,150 Running <numba.core.ssa._FixSSAVars object at 0x000002410F899370>
DEBUG 2022-01-28 15:49:34,150 on stmt: N_det = $phi380.2
DEBUG 2022-01-28 15:49:34,150 on stmt: N = N_fixed + N_det
DEBUG 2022-01-28 15:49:34,150 on stmt: $const390.6 = const(float, -1.0)
DEBUG 2022-01-28 15:49:34,150 on stmt: $const394.8 = const(int, 2)
DEBUG 2022-01-28 15:49:34,150 on stmt: $396binary_floor_divide.9 = N // $const394.8
DEBUG 2022-01-28 15:49:34,150 on stmt: $400binary_subtract.11 = $396binary_floor_divide.9 - edges_sum
DEBUG 2022-01-28 15:49:34,150 on stmt: plus_minus = $const390.6 ** $400binary_subtract.11
DEBUG 2022-01-28 15:49:34,150 on stmt: $const410.15 = const(int, 2)
DEBUG 2022-01-28 15:49:34,150 on stmt: $412binary_floor_divide.16 = N_det // $const410.15
DEBUG 2022-01-28 15:49:34,150 on stmt: $const416.18 = const(int, 0)
DEBUG 2022-01-28 15:49:34,150 on stmt: $418binary_subscr.19 = static_getitem(value=kept_edges, index=0, index_var=$const416.18, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:34,150 on stmt: $420build_tuple.20 = build_tuple(items=[Var($412binary_floor_divide.16, loop_hafnian_batch.py:68), Var($418binary_subscr.19, loop_hafnian_batch.py:68)])
DEBUG 2022-01-28 15:49:34,150 on stmt: $422binary_subscr.21 = getitem(value=binoms, index=$420build_tuple.20, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:34,150 on stmt: n_det_binom_prod = $422binary_subscr.21 * binom_prod.2
DEBUG 2022-01-28 15:49:34,150 on stmt: $const432.25 = const(int, 2)
DEBUG 2022-01-28 15:49:34,150 on stmt: $434binary_modulo.26 = N_det % $const432.25
DEBUG 2022-01-28 15:49:34,150 on stmt: $const436.27 = const(int, 0)
DEBUG 2022-01-28 15:49:34,150 on stmt: $438compare_op.28 = $434binary_modulo.26 == $const436.27
DEBUG 2022-01-28 15:49:34,150 on stmt: bool440 = global(bool: <class 'bool'>)
DEBUG 2022-01-28 15:49:34,150 on stmt: $440pred = call bool440($438compare_op.28, func=bool440, args=(Var($438compare_op.28, loop_hafnian_batch.py:70),), kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:34,150 on stmt: branch $440pred, 444, 478
DEBUG 2022-01-28 15:49:34,150 ==== SSA block rewrite pass on 444
DEBUG 2022-01-28 15:49:34,150 Running <numba.core.ssa._FixSSAVars object at 0x000002410F899370>
DEBUG 2022-01-28 15:49:34,150 on stmt: $450binary_subscr.6 = getitem(value=Hnew, index=N_det, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:34,150 on stmt: $456binary_multiply.9 = n_det_binom_prod * plus_minus
DEBUG 2022-01-28 15:49:34,150 on stmt: $const462.12 = const(int, 2)
DEBUG 2022-01-28 15:49:34,150 on stmt: $464binary_floor_divide.13 = N // $const462.12
DEBUG 2022-01-28 15:49:34,150 on stmt: $466binary_subscr.14 = getitem(value=f_even, index=$464binary_floor_divide.13, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:34,150 on stmt: $468binary_multiply.15 = $456binary_multiply.9 * $466binary_subscr.14
DEBUG 2022-01-28 15:49:34,150 on stmt: $470inplace_add.16 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$450binary_subscr.6, rhs=$468binary_multiply.15, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-01-28 15:49:34,150 on stmt: Hnew[N_det] = $470inplace_add.16
DEBUG 2022-01-28 15:49:34,150 on stmt: jump 506
DEBUG 2022-01-28 15:49:34,150 ==== SSA block rewrite pass on 478
DEBUG 2022-01-28 15:49:34,150 Running <numba.core.ssa._FixSSAVars object at 0x000002410F899370>
DEBUG 2022-01-28 15:49:34,150 on stmt: $484binary_subscr.6 = getitem(value=Hnew, index=N_det, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:34,150 on stmt: $490binary_multiply.9 = n_det_binom_prod * plus_minus
DEBUG 2022-01-28 15:49:34,150 on stmt: $496binary_subscr.12 = getitem(value=f_odd, index=N, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:34,150 on stmt: $498binary_multiply.13 = $490binary_multiply.9 * $496binary_subscr.12
DEBUG 2022-01-28 15:49:34,150 on stmt: $500inplace_add.14 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$484binary_subscr.6, rhs=$498binary_multiply.13, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-01-28 15:49:34,150 on stmt: Hnew[N_det] = $500inplace_add.14
DEBUG 2022-01-28 15:49:34,150 on stmt: jump 506
DEBUG 2022-01-28 15:49:34,150 ==== SSA block rewrite pass on 506
DEBUG 2022-01-28 15:49:34,150 Running <numba.core.ssa._FixSSAVars object at 0x000002410F899370>
DEBUG 2022-01-28 15:49:34,150 on stmt: jump 378
DEBUG 2022-01-28 15:49:34,150 ==== SSA block rewrite pass on 510
DEBUG 2022-01-28 15:49:34,150 Running <numba.core.ssa._FixSSAVars object at 0x000002410F899370>
DEBUG 2022-01-28 15:49:34,150 on stmt: $514inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=H_batch, rhs=Hnew, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-01-28 15:49:34,150 on stmt: H_batch = $514inplace_add.3
DEBUG 2022-01-28 15:49:34,150 on stmt: jump 158
DEBUG 2022-01-28 15:49:34,158 ==== SSA block rewrite pass on 520
DEBUG 2022-01-28 15:49:34,158 Running <numba.core.ssa._FixSSAVars object at 0x000002410F899370>
DEBUG 2022-01-28 15:49:34,158 on stmt: bool522 = global(bool: <class 'bool'>)
DEBUG 2022-01-28 15:49:34,158 on stmt: $522pred = call bool522(glynn, func=bool522, args=(Var(glynn, loop_hafnian_batch.py:24),), kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:34,158 on stmt: branch $522pred, 526, 580
DEBUG 2022-01-28 15:49:34,158 ==== SSA block rewrite pass on 526
DEBUG 2022-01-28 15:49:34,158 Running <numba.core.ssa._FixSSAVars object at 0x000002410F899370>
DEBUG 2022-01-28 15:49:34,158 on stmt: $526load_global.0 = global(range: <class 'range'>)
DEBUG 2022-01-28 15:49:34,158 on stmt: $530load_attr.2 = getattr(value=H_batch, attr=shape)
DEBUG 2022-01-28 15:49:34,158 on stmt: $const532.3 = const(int, 0)
DEBUG 2022-01-28 15:49:34,158 on stmt: $534binary_subscr.4 = static_getitem(value=$530load_attr.2, index=0, index_var=$const532.3, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:34,158 on stmt: $536call_function.5 = call $526load_global.0($534binary_subscr.4, func=$526load_global.0, args=[Var($534binary_subscr.4, loop_hafnian_batch.py:78)], kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:34,158 on stmt: $538get_iter.6 = getiter(value=$536call_function.5)
DEBUG 2022-01-28 15:49:34,158 on stmt: $phi540.0 = $538get_iter.6
DEBUG 2022-01-28 15:49:34,160 on stmt: jump 540
DEBUG 2022-01-28 15:49:34,160 ==== SSA block rewrite pass on 540
DEBUG 2022-01-28 15:49:34,160 Running <numba.core.ssa._FixSSAVars object at 0x000002410F899370>
DEBUG 2022-01-28 15:49:34,160 on stmt: $540for_iter.1 = iternext(value=$phi540.0)
DEBUG 2022-01-28 15:49:34,160 on stmt: $540for_iter.2 = pair_first(value=$540for_iter.1)
DEBUG 2022-01-28 15:49:34,160 on stmt: $540for_iter.3 = pair_second(value=$540for_iter.1)
DEBUG 2022-01-28 15:49:34,160 on stmt: $phi542.1 = $540for_iter.2
DEBUG 2022-01-28 15:49:34,160 on stmt: branch $540for_iter.3, 542, 580
DEBUG 2022-01-28 15:49:34,160 ==== SSA block rewrite pass on 542
DEBUG 2022-01-28 15:49:34,160 Running <numba.core.ssa._FixSSAVars object at 0x000002410F899370>
DEBUG 2022-01-28 15:49:34,160 on stmt: j.1 = $phi542.1
DEBUG 2022-01-28 15:49:34,160 on stmt: x = N_fixed + j
DEBUG 2022-01-28 15:49:34,160 find_def var='j' stmt=x = N_fixed + j
DEBUG 2022-01-28 15:49:34,160 replaced with: x = N_fixed + j.1
DEBUG 2022-01-28 15:49:34,160 on stmt: $558binary_subscr.9 = getitem(value=H_batch, index=j, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:34,160 find_def var='j' stmt=$558binary_subscr.9 = getitem(value=H_batch, index=j, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:34,160 replaced with: $558binary_subscr.9 = getitem(value=H_batch, index=j.1, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:34,160 on stmt: $const560.10 = const(float, 0.5)
DEBUG 2022-01-28 15:49:34,160 on stmt: $const564.12 = const(int, 2)
DEBUG 2022-01-28 15:49:34,160 on stmt: $566binary_floor_divide.13 = x // $const564.12
DEBUG 2022-01-28 15:49:34,160 on stmt: $568binary_power.14 = $const560.10 ** $566binary_floor_divide.13
DEBUG 2022-01-28 15:49:34,160 on stmt: $570inplace_multiply.15 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=$558binary_subscr.9, rhs=$568binary_power.14, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-01-28 15:49:34,160 on stmt: H_batch[j] = $570inplace_multiply.15
DEBUG 2022-01-28 15:49:34,160 find_def var='j' stmt=H_batch[j] = $570inplace_multiply.15
DEBUG 2022-01-28 15:49:34,160 replaced with: H_batch[j.1] = $570inplace_multiply.15
DEBUG 2022-01-28 15:49:34,160 on stmt: jump 540
DEBUG 2022-01-28 15:49:34,160 ==== SSA block rewrite pass on 580
DEBUG 2022-01-28 15:49:34,160 Running <numba.core.ssa._FixSSAVars object at 0x000002410F899370>
DEBUG 2022-01-28 15:49:34,160 on stmt: $582return_value.1 = cast(value=H_batch)
DEBUG 2022-01-28 15:49:34,160 on stmt: return $582return_value.1
DEBUG 2022-01-28 15:49:34,160 Fix SSA violator on var H_batch
DEBUG 2022-01-28 15:49:34,160 ==== SSA block rewrite pass on 0
DEBUG 2022-01-28 15:49:34,160 Running <numba.core.ssa._FreshVarHandler object at 0x000002410C41BCD0>
DEBUG 2022-01-28 15:49:34,160 on stmt: A = arg(0, name=A)
DEBUG 2022-01-28 15:49:34,160 on stmt: D = arg(1, name=D)
DEBUG 2022-01-28 15:49:34,160 on stmt: fixed_edge_reps = arg(2, name=fixed_edge_reps)
DEBUG 2022-01-28 15:49:34,160 on stmt: batch_max = arg(3, name=batch_max)
DEBUG 2022-01-28 15:49:34,160 on stmt: odd_cutoff = arg(4, name=odd_cutoff)
DEBUG 2022-01-28 15:49:34,160 on stmt: glynn = arg(5, name=glynn)
DEBUG 2022-01-28 15:49:34,160 on stmt: $const4.1 = const(int, 0)
DEBUG 2022-01-28 15:49:34,160 on stmt: oddloop = static_getitem(value=D, index=0, index_var=$const4.1, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:34,160 on stmt: $const12.4 = const(int, 0)
DEBUG 2022-01-28 15:49:34,160 on stmt: $const14.5 = const(NoneType, None)
DEBUG 2022-01-28 15:49:34,160 on stmt: $const16.6 = const(NoneType, None)
DEBUG 2022-01-28 15:49:34,160 on stmt: $18build_slice.7 = global(slice: <class 'slice'>)
DEBUG 2022-01-28 15:49:34,160 on stmt: $18build_slice.8 = call $18build_slice.7($const14.5, $const16.6, func=$18build_slice.7, args=(Var($const14.5, loop_hafnian_batch.py:25), Var($const16.6, loop_hafnian_batch.py:25)), kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:34,160 on stmt: $20build_tuple.9 = build_tuple(items=[Var($const12.4, loop_hafnian_batch.py:25), Var($18build_slice.8, loop_hafnian_batch.py:25)])
DEBUG 2022-01-28 15:49:34,160 on stmt: oddV = static_getitem(value=A, index=(0, slice(None, None, None)), index_var=$20build_tuple.9, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:34,160 on stmt: $28load_attr.12 = getattr(value=A, attr=shape)
DEBUG 2022-01-28 15:49:34,160 on stmt: $const30.13 = const(int, 0)
DEBUG 2022-01-28 15:49:34,160 on stmt: n = static_getitem(value=$28load_attr.12, index=0, index_var=$const30.13, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:34,160 on stmt: $const36.15 = const(int, 2)
DEBUG 2022-01-28 15:49:34,160 on stmt: $40load_method.17 = getattr(value=fixed_edge_reps, attr=sum)
DEBUG 2022-01-28 15:49:34,160 on stmt: $42call_method.18 = call $40load_method.17(func=$40load_method.17, args=[], kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:34,160 on stmt: N_fixed = $const36.15 * $42call_method.18
DEBUG 2022-01-28 15:49:34,160 on stmt: $const50.21 = const(int, 2)
DEBUG 2022-01-28 15:49:34,160 on stmt: $54binary_multiply.23 = $const50.21 * batch_max
DEBUG 2022-01-28 15:49:34,160 on stmt: $56binary_add.24 = N_fixed + $54binary_multiply.23
DEBUG 2022-01-28 15:49:34,160 on stmt: N_max = $56binary_add.24 + odd_cutoff
DEBUG 2022-01-28 15:49:34,160 on stmt: $64load_global.27 = global(np: <module 'numpy' from 'C:\\Users\\zl4821\\Anaconda3\\envs\\GBS\\lib\\site-packages\\numpy\\__init__.py'>)
DEBUG 2022-01-28 15:49:34,160 on stmt: $66load_method.28 = getattr(value=$64load_global.27, attr=concatenate)
DEBUG 2022-01-28 15:49:34,160 on stmt: $68load_global.29 = global(np: <module 'numpy' from 'C:\\Users\\zl4821\\Anaconda3\\envs\\GBS\\lib\\site-packages\\numpy\\__init__.py'>)
DEBUG 2022-01-28 15:49:34,160 on stmt: $70load_method.30 = getattr(value=$68load_global.29, attr=array)
DEBUG 2022-01-28 15:49:34,160 on stmt: $74build_list.32 = build_list(items=[Var(batch_max, loop_hafnian_batch.py:24)])
DEBUG 2022-01-28 15:49:34,160 on stmt: $76call_method.33 = call $70load_method.30($74build_list.32, func=$70load_method.30, args=[Var($74build_list.32, loop_hafnian_batch.py:32)], kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:34,160 on stmt: $80build_tuple.35 = build_tuple(items=[Var($76call_method.33, loop_hafnian_batch.py:32), Var(fixed_edge_reps, loop_hafnian_batch.py:24)])
DEBUG 2022-01-28 15:49:34,160 on stmt: edge_reps = call $66load_method.28($80build_tuple.35, func=$66load_method.28, args=[Var($80build_tuple.35, loop_hafnian_batch.py:32)], kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:34,160 on stmt: $86load_global.37 = global(np: <module 'numpy' from 'C:\\Users\\zl4821\\Anaconda3\\envs\\GBS\\lib\\site-packages\\numpy\\__init__.py'>)
DEBUG 2022-01-28 15:49:34,160 on stmt: $88load_method.38 = getattr(value=$86load_global.37, attr=prod)
DEBUG 2022-01-28 15:49:34,168 on stmt: $const92.40 = const(int, 1)
DEBUG 2022-01-28 15:49:34,168 on stmt: $94binary_add.41 = edge_reps + $const92.40
DEBUG 2022-01-28 15:49:34,168 on stmt: steps = call $88load_method.38($94binary_add.41, func=$88load_method.38, args=[Var($94binary_add.41, loop_hafnian_batch.py:33)], kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:34,168 on stmt: $102load_method.44 = getattr(value=edge_reps, attr=max)
DEBUG 2022-01-28 15:49:34,168 on stmt: $104call_method.45 = call $102load_method.44(func=$102load_method.44, args=[], kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:34,168 on stmt: max_binom = $104call_method.45 + odd_cutoff
DEBUG 2022-01-28 15:49:34,168 on stmt: $112load_global.48 = global(precompute_binoms: CPUDispatcher(<function precompute_binoms at 0x00000241074240D0>))
DEBUG 2022-01-28 15:49:34,168 on stmt: binoms = call $112load_global.48(max_binom, func=$112load_global.48, args=[Var(max_binom, loop_hafnian_batch.py:35)], kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:34,168 on stmt: $120load_global.51 = global(np: <module 'numpy' from 'C:\\Users\\zl4821\\Anaconda3\\envs\\GBS\\lib\\site-packages\\numpy\\__init__.py'>)
DEBUG 2022-01-28 15:49:34,168 on stmt: $122load_attr.52 = getattr(value=$120load_global.51, attr=zeros)
DEBUG 2022-01-28 15:49:34,168 on stmt: $const124.53 = const(int, 2)
DEBUG 2022-01-28 15:49:34,168 on stmt: $128binary_multiply.55 = $const124.53 * batch_max
DEBUG 2022-01-28 15:49:34,168 on stmt: $132binary_add.57 = $128binary_multiply.55 + odd_cutoff
DEBUG 2022-01-28 15:49:34,168 on stmt: $const134.58 = const(int, 1)
DEBUG 2022-01-28 15:49:34,168 on stmt: $136binary_add.59 = $132binary_add.57 + $const134.58
DEBUG 2022-01-28 15:49:34,168 on stmt: $138load_global.60 = global(np: <module 'numpy' from 'C:\\Users\\zl4821\\Anaconda3\\envs\\GBS\\lib\\site-packages\\numpy\\__init__.py'>)
DEBUG 2022-01-28 15:49:34,168 on stmt: $140load_attr.61 = getattr(value=$138load_global.60, attr=complex128)
DEBUG 2022-01-28 15:49:34,168 on stmt: H_batch = call $122load_attr.52($136binary_add.59, func=$122load_attr.52, args=[Var($136binary_add.59, loop_hafnian_batch.py:38)], kws=[('dtype', Var($140load_attr.61, loop_hafnian_batch.py:38))], vararg=None, target=None)
DEBUG 2022-01-28 15:49:34,168 first assign: H_batch
DEBUG 2022-01-28 15:49:34,168 replaced with: H_batch = call $122load_attr.52($136binary_add.59, func=$122load_attr.52, args=[Var($136binary_add.59, loop_hafnian_batch.py:38)], kws=[('dtype', Var($140load_attr.61, loop_hafnian_batch.py:38))], vararg=None, target=None)
DEBUG 2022-01-28 15:49:34,168 on stmt: $148load_global.64 = global(numba: <module 'numba' from 'C:\\Users\\zl4821\\Anaconda3\\envs\\GBS\\lib\\site-packages\\numba\\__init__.py'>)
DEBUG 2022-01-28 15:49:34,168 on stmt: $150load_method.65 = getattr(value=$148load_global.64, attr=prange)
DEBUG 2022-01-28 15:49:34,168 on stmt: $154call_method.67 = call $150load_method.65(steps, func=$150load_method.65, args=[Var(steps, loop_hafnian_batch.py:33)], kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:34,168 on stmt: $156get_iter.68 = getiter(value=$154call_method.67)
DEBUG 2022-01-28 15:49:34,170 on stmt: $phi158.0 = $156get_iter.68
DEBUG 2022-01-28 15:49:34,170 on stmt: jump 158
DEBUG 2022-01-28 15:49:34,170 ==== SSA block rewrite pass on 158
DEBUG 2022-01-28 15:49:34,170 Running <numba.core.ssa._FreshVarHandler object at 0x000002410C41BCD0>
DEBUG 2022-01-28 15:49:34,170 on stmt: $158for_iter.1 = iternext(value=$phi158.0)
DEBUG 2022-01-28 15:49:34,170 on stmt: $158for_iter.2 = pair_first(value=$158for_iter.1)
DEBUG 2022-01-28 15:49:34,170 on stmt: $158for_iter.3 = pair_second(value=$158for_iter.1)
DEBUG 2022-01-28 15:49:34,170 on stmt: $phi162.1 = $158for_iter.2
DEBUG 2022-01-28 15:49:34,170 on stmt: branch $158for_iter.3, 162, 520
DEBUG 2022-01-28 15:49:34,170 ==== SSA block rewrite pass on 162
DEBUG 2022-01-28 15:49:34,170 Running <numba.core.ssa._FreshVarHandler object at 0x000002410C41BCD0>
DEBUG 2022-01-28 15:49:34,170 on stmt: j = $phi162.1
DEBUG 2022-01-28 15:49:34,170 on stmt: $164load_global.2 = global(np: <module 'numpy' from 'C:\\Users\\zl4821\\Anaconda3\\envs\\GBS\\lib\\site-packages\\numpy\\__init__.py'>)
DEBUG 2022-01-28 15:49:34,170 on stmt: $166load_attr.3 = getattr(value=$164load_global.2, attr=zeros)
DEBUG 2022-01-28 15:49:34,170 on stmt: $const168.4 = const(int, 2)
DEBUG 2022-01-28 15:49:34,170 on stmt: $172binary_multiply.6 = $const168.4 * batch_max
DEBUG 2022-01-28 15:49:34,170 on stmt: $176binary_add.8 = $172binary_multiply.6 + odd_cutoff
DEBUG 2022-01-28 15:49:34,170 on stmt: $const178.9 = const(int, 1)
DEBUG 2022-01-28 15:49:34,170 on stmt: $180binary_add.10 = $176binary_add.8 + $const178.9
DEBUG 2022-01-28 15:49:34,170 on stmt: $182load_global.11 = global(np: <module 'numpy' from 'C:\\Users\\zl4821\\Anaconda3\\envs\\GBS\\lib\\site-packages\\numpy\\__init__.py'>)
DEBUG 2022-01-28 15:49:34,170 on stmt: $184load_attr.12 = getattr(value=$182load_global.11, attr=complex128)
DEBUG 2022-01-28 15:49:34,170 on stmt: Hnew = call $166load_attr.3($180binary_add.10, func=$166load_attr.3, args=[Var($180binary_add.10, loop_hafnian_batch.py:41)], kws=[('dtype', Var($184load_attr.12, loop_hafnian_batch.py:41))], vararg=None, target=None)
DEBUG 2022-01-28 15:49:34,170 on stmt: $192load_global.15 = global(find_kept_edges: CPUDispatcher(<function find_kept_edges at 0x0000024107424550>))
DEBUG 2022-01-28 15:49:34,170 on stmt: kept_edges = call $192load_global.15(j, edge_reps, func=$192load_global.15, args=[Var(j, loop_hafnian_batch.py:39), Var(edge_reps, loop_hafnian_batch.py:32)], kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:34,170 on stmt: $204load_method.20 = getattr(value=kept_edges, attr=sum)
DEBUG 2022-01-28 15:49:34,170 on stmt: edges_sum = call $204load_method.20(func=$204load_method.20, args=[], kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:34,170 on stmt: binom_prod = const(float, 1.0)
DEBUG 2022-01-28 15:49:34,170 on stmt: $214load_global.23 = global(range: <class 'range'>)
DEBUG 2022-01-28 15:49:34,170 on stmt: $const216.24 = const(int, 1)
DEBUG 2022-01-28 15:49:34,170 on stmt: $const220.26 = const(int, 2)
DEBUG 2022-01-28 15:49:34,170 on stmt: $222binary_floor_divide.27 = n // $const220.26
DEBUG 2022-01-28 15:49:34,170 on stmt: $224call_function.28 = call $214load_global.23($const216.24, $222binary_floor_divide.27, func=$214load_global.23, args=[Var($const216.24, loop_hafnian_batch.py:47), Var($222binary_floor_divide.27, loop_hafnian_batch.py:47)], kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:34,170 on stmt: $226get_iter.29 = getiter(value=$224call_function.28)
DEBUG 2022-01-28 15:49:34,170 on stmt: $phi228.1 = $226get_iter.29
DEBUG 2022-01-28 15:49:34,170 on stmt: jump 228
DEBUG 2022-01-28 15:49:34,170 ==== SSA block rewrite pass on 228
DEBUG 2022-01-28 15:49:34,170 Running <numba.core.ssa._FreshVarHandler object at 0x000002410C41BCD0>
DEBUG 2022-01-28 15:49:34,170 on stmt: binom_prod.2 = phi(incoming_values=[Var(binom_prod, loop_hafnian_batch.py:46), Var(binom_prod.1, loop_hafnian_batch.py:48)], incoming_blocks=[162, 230])
DEBUG 2022-01-28 15:49:34,170 on stmt: $228for_iter.2 = iternext(value=$phi228.1)
DEBUG 2022-01-28 15:49:34,170 on stmt: $228for_iter.3 = pair_first(value=$228for_iter.2)
DEBUG 2022-01-28 15:49:34,170 on stmt: $228for_iter.4 = pair_second(value=$228for_iter.2)
DEBUG 2022-01-28 15:49:34,170 on stmt: $phi230.2 = $228for_iter.3
DEBUG 2022-01-28 15:49:34,170 on stmt: branch $228for_iter.4, 230, 258
DEBUG 2022-01-28 15:49:34,170 ==== SSA block rewrite pass on 230
DEBUG 2022-01-28 15:49:34,170 Running <numba.core.ssa._FreshVarHandler object at 0x000002410C41BCD0>
DEBUG 2022-01-28 15:49:34,170 on stmt: i = $phi230.2
DEBUG 2022-01-28 15:49:34,170 on stmt: $240binary_subscr.7 = getitem(value=edge_reps, index=i, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:34,170 on stmt: $246binary_subscr.10 = getitem(value=kept_edges, index=i, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:34,170 on stmt: $248build_tuple.11 = build_tuple(items=[Var($240binary_subscr.7, loop_hafnian_batch.py:48), Var($246binary_subscr.10, loop_hafnian_batch.py:48)])
DEBUG 2022-01-28 15:49:34,170 on stmt: $250binary_subscr.12 = getitem(value=binoms, index=$248build_tuple.11, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:34,170 on stmt: $252inplace_multiply.13 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=binom_prod.2, rhs=$250binary_subscr.12, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-01-28 15:49:34,170 on stmt: binom_prod.1 = $252inplace_multiply.13
DEBUG 2022-01-28 15:49:34,170 on stmt: jump 228
DEBUG 2022-01-28 15:49:34,170 ==== SSA block rewrite pass on 258
DEBUG 2022-01-28 15:49:34,170 Running <numba.core.ssa._FreshVarHandler object at 0x000002410C41BCD0>
DEBUG 2022-01-28 15:49:34,170 on stmt: bool260 = global(bool: <class 'bool'>)
DEBUG 2022-01-28 15:49:34,170 on stmt: $260pred = call bool260(glynn, func=bool260, args=(Var(glynn, loop_hafnian_batch.py:24),), kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:34,170 on stmt: branch $260pred, 264, 278
DEBUG 2022-01-28 15:49:34,170 ==== SSA block rewrite pass on 264
DEBUG 2022-01-28 15:49:34,170 Running <numba.core.ssa._FreshVarHandler object at 0x000002410C41BCD0>
DEBUG 2022-01-28 15:49:34,170 on stmt: $const264.1 = const(int, 2)
DEBUG 2022-01-28 15:49:34,170 on stmt: $268binary_multiply.3 = $const264.1 * kept_edges
DEBUG 2022-01-28 15:49:34,170 on stmt: delta = $268binary_multiply.3 - edge_reps
DEBUG 2022-01-28 15:49:34,170 on stmt: jump 282
DEBUG 2022-01-28 15:49:34,170 ==== SSA block rewrite pass on 278
DEBUG 2022-01-28 15:49:34,170 Running <numba.core.ssa._FreshVarHandler object at 0x000002410C41BCD0>
DEBUG 2022-01-28 15:49:34,170 on stmt: delta = kept_edges
DEBUG 2022-01-28 15:49:34,170 on stmt: jump 282
DEBUG 2022-01-28 15:49:34,170 ==== SSA block rewrite pass on 282
DEBUG 2022-01-28 15:49:34,170 Running <numba.core.ssa._FreshVarHandler object at 0x000002410C41BCD0>
DEBUG 2022-01-28 15:49:34,170 on stmt: $282load_global.1 = global(get_submatrices: CPUDispatcher(<function get_submatrices at 0x0000024107424E50>))
DEBUG 2022-01-28 15:49:34,170 on stmt: $292call_function.6 = call $282load_global.1(delta, A, D, oddV, func=$282load_global.1, args=[Var(delta, loop_hafnian_batch.py:51), Var(A, loop_hafnian_batch.py:24), Var(D, loop_hafnian_batch.py:24), Var(oddV, loop_hafnian_batch.py:25)], kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:34,170 on stmt: $294unpack_sequence.11 = exhaust_iter(value=$292call_function.6, count=4)
DEBUG 2022-01-28 15:49:34,170 on stmt: $294unpack_sequence.7 = static_getitem(value=$294unpack_sequence.11, index=0, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:34,170 on stmt: $294unpack_sequence.8 = static_getitem(value=$294unpack_sequence.11, index=1, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:34,170 on stmt: $294unpack_sequence.9 = static_getitem(value=$294unpack_sequence.11, index=2, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:34,170 on stmt: $294unpack_sequence.10 = static_getitem(value=$294unpack_sequence.11, index=3, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:34,170 on stmt: AX_S = $294unpack_sequence.7
DEBUG 2022-01-28 15:49:34,170 on stmt: XD_S = $294unpack_sequence.8
DEBUG 2022-01-28 15:49:34,170 on stmt: D_S = $294unpack_sequence.9
DEBUG 2022-01-28 15:49:34,170 on stmt: oddVX_S = $294unpack_sequence.10
DEBUG 2022-01-28 15:49:34,170 on stmt: $304load_global.12 = global(eigvals: CPUDispatcher(<function eigvals at 0x00000241074303A0>))
DEBUG 2022-01-28 15:49:34,170 on stmt: E = call $304load_global.12(AX_S, func=$304load_global.12, args=[Var(AX_S, loop_hafnian_batch.py:55)], kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:34,170 on stmt: $312load_global.15 = global(f_loop: CPUDispatcher(<function f_loop at 0x00000241074248B0>))
DEBUG 2022-01-28 15:49:34,170 on stmt: f_even = call $312load_global.15(E, AX_S, XD_S, D_S, N_max, func=$312load_global.15, args=[Var(E, loop_hafnian_batch.py:57), Var(AX_S, loop_hafnian_batch.py:55), Var(XD_S, loop_hafnian_batch.py:55), Var(D_S, loop_hafnian_batch.py:55), Var(N_max, loop_hafnian_batch.py:30)], kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:34,170 on stmt: $328load_global.22 = global(f_loop_odd: CPUDispatcher(<function f_loop_odd at 0x0000024107424AF0>))
DEBUG 2022-01-28 15:49:34,170 on stmt: f_odd = call $328load_global.22(E, AX_S, XD_S, D_S, N_max, oddloop, oddVX_S, func=$328load_global.22, args=[Var(E, loop_hafnian_batch.py:57), Var(AX_S, loop_hafnian_batch.py:55), Var(XD_S, loop_hafnian_batch.py:55), Var(D_S, loop_hafnian_batch.py:55), Var(N_max, loop_hafnian_batch.py:30), Var(oddloop, loop_hafnian_batch.py:24), Var(oddVX_S, loop_hafnian_batch.py:55)], kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:34,170 on stmt: $348load_global.31 = global(range: <class 'range'>)
DEBUG 2022-01-28 15:49:34,170 on stmt: $const350.32 = const(int, 2)
DEBUG 2022-01-28 15:49:34,170 on stmt: $const354.34 = const(int, 0)
DEBUG 2022-01-28 15:49:34,170 on stmt: $356binary_subscr.35 = static_getitem(value=kept_edges, index=0, index_var=$const354.34, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:34,170 on stmt: $358binary_multiply.36 = $const350.32 * $356binary_subscr.35
DEBUG 2022-01-28 15:49:34,170 on stmt: $const360.37 = const(int, 2)
DEBUG 2022-01-28 15:49:34,170 on stmt: $364binary_multiply.39 = $const360.37 * batch_max
DEBUG 2022-01-28 15:49:34,170 on stmt: $368binary_add.41 = $364binary_multiply.39 + odd_cutoff
DEBUG 2022-01-28 15:49:34,170 on stmt: $const370.42 = const(int, 1)
DEBUG 2022-01-28 15:49:34,170 on stmt: $372binary_add.43 = $368binary_add.41 + $const370.42
DEBUG 2022-01-28 15:49:34,170 on stmt: $374call_function.44 = call $348load_global.31($358binary_multiply.36, $372binary_add.43, func=$348load_global.31, args=[Var($358binary_multiply.36, loop_hafnian_batch.py:64), Var($372binary_add.43, loop_hafnian_batch.py:64)], kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:34,170 on stmt: $376get_iter.45 = getiter(value=$374call_function.44)
DEBUG 2022-01-28 15:49:34,170 on stmt: $phi378.1 = $376get_iter.45
DEBUG 2022-01-28 15:49:34,170 on stmt: jump 378
DEBUG 2022-01-28 15:49:34,170 ==== SSA block rewrite pass on 378
DEBUG 2022-01-28 15:49:34,178 Running <numba.core.ssa._FreshVarHandler object at 0x000002410C41BCD0>
DEBUG 2022-01-28 15:49:34,178 on stmt: $378for_iter.2 = iternext(value=$phi378.1)
DEBUG 2022-01-28 15:49:34,178 on stmt: $378for_iter.3 = pair_first(value=$378for_iter.2)
DEBUG 2022-01-28 15:49:34,178 on stmt: $378for_iter.4 = pair_second(value=$378for_iter.2)
DEBUG 2022-01-28 15:49:34,178 on stmt: $phi380.2 = $378for_iter.3
DEBUG 2022-01-28 15:49:34,178 on stmt: branch $378for_iter.4, 380, 510
DEBUG 2022-01-28 15:49:34,178 ==== SSA block rewrite pass on 380
DEBUG 2022-01-28 15:49:34,178 Running <numba.core.ssa._FreshVarHandler object at 0x000002410C41BCD0>
DEBUG 2022-01-28 15:49:34,178 on stmt: N_det = $phi380.2
DEBUG 2022-01-28 15:49:34,178 on stmt: N = N_fixed + N_det
DEBUG 2022-01-28 15:49:34,178 on stmt: $const390.6 = const(float, -1.0)
DEBUG 2022-01-28 15:49:34,178 on stmt: $const394.8 = const(int, 2)
DEBUG 2022-01-28 15:49:34,178 on stmt: $396binary_floor_divide.9 = N // $const394.8
DEBUG 2022-01-28 15:49:34,178 on stmt: $400binary_subtract.11 = $396binary_floor_divide.9 - edges_sum
DEBUG 2022-01-28 15:49:34,178 on stmt: plus_minus = $const390.6 ** $400binary_subtract.11
DEBUG 2022-01-28 15:49:34,178 on stmt: $const410.15 = const(int, 2)
DEBUG 2022-01-28 15:49:34,178 on stmt: $412binary_floor_divide.16 = N_det // $const410.15
DEBUG 2022-01-28 15:49:34,180 on stmt: $const416.18 = const(int, 0)
DEBUG 2022-01-28 15:49:34,180 on stmt: $418binary_subscr.19 = static_getitem(value=kept_edges, index=0, index_var=$const416.18, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:34,180 on stmt: $420build_tuple.20 = build_tuple(items=[Var($412binary_floor_divide.16, loop_hafnian_batch.py:68), Var($418binary_subscr.19, loop_hafnian_batch.py:68)])
DEBUG 2022-01-28 15:49:34,180 on stmt: $422binary_subscr.21 = getitem(value=binoms, index=$420build_tuple.20, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:34,180 on stmt: n_det_binom_prod = $422binary_subscr.21 * binom_prod.2
DEBUG 2022-01-28 15:49:34,180 on stmt: $const432.25 = const(int, 2)
DEBUG 2022-01-28 15:49:34,180 on stmt: $434binary_modulo.26 = N_det % $const432.25
DEBUG 2022-01-28 15:49:34,180 on stmt: $const436.27 = const(int, 0)
DEBUG 2022-01-28 15:49:34,180 on stmt: $438compare_op.28 = $434binary_modulo.26 == $const436.27
DEBUG 2022-01-28 15:49:34,180 on stmt: bool440 = global(bool: <class 'bool'>)
DEBUG 2022-01-28 15:49:34,180 on stmt: $440pred = call bool440($438compare_op.28, func=bool440, args=(Var($438compare_op.28, loop_hafnian_batch.py:70),), kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:34,180 on stmt: branch $440pred, 444, 478
DEBUG 2022-01-28 15:49:34,180 ==== SSA block rewrite pass on 444
DEBUG 2022-01-28 15:49:34,180 Running <numba.core.ssa._FreshVarHandler object at 0x000002410C41BCD0>
DEBUG 2022-01-28 15:49:34,180 on stmt: $450binary_subscr.6 = getitem(value=Hnew, index=N_det, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:34,180 on stmt: $456binary_multiply.9 = n_det_binom_prod * plus_minus
DEBUG 2022-01-28 15:49:34,180 on stmt: $const462.12 = const(int, 2)
DEBUG 2022-01-28 15:49:34,180 on stmt: $464binary_floor_divide.13 = N // $const462.12
DEBUG 2022-01-28 15:49:34,180 on stmt: $466binary_subscr.14 = getitem(value=f_even, index=$464binary_floor_divide.13, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:34,180 on stmt: $468binary_multiply.15 = $456binary_multiply.9 * $466binary_subscr.14
DEBUG 2022-01-28 15:49:34,180 on stmt: $470inplace_add.16 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$450binary_subscr.6, rhs=$468binary_multiply.15, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-01-28 15:49:34,180 on stmt: Hnew[N_det] = $470inplace_add.16
DEBUG 2022-01-28 15:49:34,180 on stmt: jump 506
DEBUG 2022-01-28 15:49:34,180 ==== SSA block rewrite pass on 478
DEBUG 2022-01-28 15:49:34,180 Running <numba.core.ssa._FreshVarHandler object at 0x000002410C41BCD0>
DEBUG 2022-01-28 15:49:34,180 on stmt: $484binary_subscr.6 = getitem(value=Hnew, index=N_det, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:34,180 on stmt: $490binary_multiply.9 = n_det_binom_prod * plus_minus
DEBUG 2022-01-28 15:49:34,180 on stmt: $496binary_subscr.12 = getitem(value=f_odd, index=N, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:34,180 on stmt: $498binary_multiply.13 = $490binary_multiply.9 * $496binary_subscr.12
DEBUG 2022-01-28 15:49:34,180 on stmt: $500inplace_add.14 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$484binary_subscr.6, rhs=$498binary_multiply.13, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-01-28 15:49:34,180 on stmt: Hnew[N_det] = $500inplace_add.14
DEBUG 2022-01-28 15:49:34,180 on stmt: jump 506
DEBUG 2022-01-28 15:49:34,180 ==== SSA block rewrite pass on 506
DEBUG 2022-01-28 15:49:34,180 Running <numba.core.ssa._FreshVarHandler object at 0x000002410C41BCD0>
DEBUG 2022-01-28 15:49:34,180 on stmt: jump 378
DEBUG 2022-01-28 15:49:34,180 ==== SSA block rewrite pass on 510
DEBUG 2022-01-28 15:49:34,180 Running <numba.core.ssa._FreshVarHandler object at 0x000002410C41BCD0>
DEBUG 2022-01-28 15:49:34,180 on stmt: $514inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=H_batch, rhs=Hnew, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-01-28 15:49:34,180 on stmt: H_batch = $514inplace_add.3
DEBUG 2022-01-28 15:49:34,180 replaced with: H_batch.1 = $514inplace_add.3
DEBUG 2022-01-28 15:49:34,180 on stmt: jump 158
DEBUG 2022-01-28 15:49:34,180 ==== SSA block rewrite pass on 520
DEBUG 2022-01-28 15:49:34,180 Running <numba.core.ssa._FreshVarHandler object at 0x000002410C41BCD0>
DEBUG 2022-01-28 15:49:34,180 on stmt: bool522 = global(bool: <class 'bool'>)
DEBUG 2022-01-28 15:49:34,180 on stmt: $522pred = call bool522(glynn, func=bool522, args=(Var(glynn, loop_hafnian_batch.py:24),), kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:34,180 on stmt: branch $522pred, 526, 580
DEBUG 2022-01-28 15:49:34,180 ==== SSA block rewrite pass on 526
DEBUG 2022-01-28 15:49:34,180 Running <numba.core.ssa._FreshVarHandler object at 0x000002410C41BCD0>
DEBUG 2022-01-28 15:49:34,180 on stmt: $526load_global.0 = global(range: <class 'range'>)
DEBUG 2022-01-28 15:49:34,180 on stmt: $530load_attr.2 = getattr(value=H_batch, attr=shape)
DEBUG 2022-01-28 15:49:34,180 on stmt: $const532.3 = const(int, 0)
DEBUG 2022-01-28 15:49:34,188 on stmt: $534binary_subscr.4 = static_getitem(value=$530load_attr.2, index=0, index_var=$const532.3, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:34,188 on stmt: $536call_function.5 = call $526load_global.0($534binary_subscr.4, func=$526load_global.0, args=[Var($534binary_subscr.4, loop_hafnian_batch.py:78)], kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:34,188 on stmt: $538get_iter.6 = getiter(value=$536call_function.5)
DEBUG 2022-01-28 15:49:34,188 on stmt: $phi540.0 = $538get_iter.6
DEBUG 2022-01-28 15:49:34,188 on stmt: jump 540
DEBUG 2022-01-28 15:49:34,188 ==== SSA block rewrite pass on 540
DEBUG 2022-01-28 15:49:34,188 Running <numba.core.ssa._FreshVarHandler object at 0x000002410C41BCD0>
DEBUG 2022-01-28 15:49:34,188 on stmt: $540for_iter.1 = iternext(value=$phi540.0)
DEBUG 2022-01-28 15:49:34,188 on stmt: $540for_iter.2 = pair_first(value=$540for_iter.1)
DEBUG 2022-01-28 15:49:34,188 on stmt: $540for_iter.3 = pair_second(value=$540for_iter.1)
DEBUG 2022-01-28 15:49:34,188 on stmt: $phi542.1 = $540for_iter.2
DEBUG 2022-01-28 15:49:34,188 on stmt: branch $540for_iter.3, 542, 580
DEBUG 2022-01-28 15:49:34,188 ==== SSA block rewrite pass on 542
DEBUG 2022-01-28 15:49:34,188 Running <numba.core.ssa._FreshVarHandler object at 0x000002410C41BCD0>
DEBUG 2022-01-28 15:49:34,188 on stmt: j.1 = $phi542.1
DEBUG 2022-01-28 15:49:34,188 on stmt: x = N_fixed + j.1
DEBUG 2022-01-28 15:49:34,188 on stmt: $558binary_subscr.9 = getitem(value=H_batch, index=j.1, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:34,188 on stmt: $const560.10 = const(float, 0.5)
DEBUG 2022-01-28 15:49:34,190 on stmt: $const564.12 = const(int, 2)
DEBUG 2022-01-28 15:49:34,190 on stmt: $566binary_floor_divide.13 = x // $const564.12
DEBUG 2022-01-28 15:49:34,190 on stmt: $568binary_power.14 = $const560.10 ** $566binary_floor_divide.13
DEBUG 2022-01-28 15:49:34,190 on stmt: $570inplace_multiply.15 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=$558binary_subscr.9, rhs=$568binary_power.14, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-01-28 15:49:34,190 on stmt: H_batch[j.1] = $570inplace_multiply.15
DEBUG 2022-01-28 15:49:34,190 on stmt: jump 540
DEBUG 2022-01-28 15:49:34,190 ==== SSA block rewrite pass on 580
DEBUG 2022-01-28 15:49:34,190 Running <numba.core.ssa._FreshVarHandler object at 0x000002410C41BCD0>
DEBUG 2022-01-28 15:49:34,190 on stmt: $582return_value.1 = cast(value=H_batch)
DEBUG 2022-01-28 15:49:34,190 on stmt: return $582return_value.1
DEBUG 2022-01-28 15:49:34,190 Replaced assignments: defaultdict(<class 'list'>,
            {0: [<numba.core.ir.Assign object at 0x000002410F8995B0>],
             510: [<numba.core.ir.Assign object at 0x000002410E171610>]})
DEBUG 2022-01-28 15:49:34,190 ==== SSA block rewrite pass on 0
DEBUG 2022-01-28 15:49:34,190 Running <numba.core.ssa._FixSSAVars object at 0x000002410C1BEA90>
DEBUG 2022-01-28 15:49:34,190 on stmt: A = arg(0, name=A)
DEBUG 2022-01-28 15:49:34,190 on stmt: D = arg(1, name=D)
DEBUG 2022-01-28 15:49:34,190 on stmt: fixed_edge_reps = arg(2, name=fixed_edge_reps)
DEBUG 2022-01-28 15:49:34,190 on stmt: batch_max = arg(3, name=batch_max)
DEBUG 2022-01-28 15:49:34,190 on stmt: odd_cutoff = arg(4, name=odd_cutoff)
DEBUG 2022-01-28 15:49:34,190 on stmt: glynn = arg(5, name=glynn)
DEBUG 2022-01-28 15:49:34,190 on stmt: $const4.1 = const(int, 0)
DEBUG 2022-01-28 15:49:34,190 on stmt: oddloop = static_getitem(value=D, index=0, index_var=$const4.1, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:34,190 on stmt: $const12.4 = const(int, 0)
DEBUG 2022-01-28 15:49:34,190 on stmt: $const14.5 = const(NoneType, None)
DEBUG 2022-01-28 15:49:34,190 on stmt: $const16.6 = const(NoneType, None)
DEBUG 2022-01-28 15:49:34,190 on stmt: $18build_slice.7 = global(slice: <class 'slice'>)
DEBUG 2022-01-28 15:49:34,190 on stmt: $18build_slice.8 = call $18build_slice.7($const14.5, $const16.6, func=$18build_slice.7, args=(Var($const14.5, loop_hafnian_batch.py:25), Var($const16.6, loop_hafnian_batch.py:25)), kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:34,190 on stmt: $20build_tuple.9 = build_tuple(items=[Var($const12.4, loop_hafnian_batch.py:25), Var($18build_slice.8, loop_hafnian_batch.py:25)])
DEBUG 2022-01-28 15:49:34,190 on stmt: oddV = static_getitem(value=A, index=(0, slice(None, None, None)), index_var=$20build_tuple.9, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:34,190 on stmt: $28load_attr.12 = getattr(value=A, attr=shape)
DEBUG 2022-01-28 15:49:34,190 on stmt: $const30.13 = const(int, 0)
DEBUG 2022-01-28 15:49:34,190 on stmt: n = static_getitem(value=$28load_attr.12, index=0, index_var=$const30.13, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:34,190 on stmt: $const36.15 = const(int, 2)
DEBUG 2022-01-28 15:49:34,190 on stmt: $40load_method.17 = getattr(value=fixed_edge_reps, attr=sum)
DEBUG 2022-01-28 15:49:34,190 on stmt: $42call_method.18 = call $40load_method.17(func=$40load_method.17, args=[], kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:34,190 on stmt: N_fixed = $const36.15 * $42call_method.18
DEBUG 2022-01-28 15:49:34,190 on stmt: $const50.21 = const(int, 2)
DEBUG 2022-01-28 15:49:34,190 on stmt: $54binary_multiply.23 = $const50.21 * batch_max
DEBUG 2022-01-28 15:49:34,190 on stmt: $56binary_add.24 = N_fixed + $54binary_multiply.23
DEBUG 2022-01-28 15:49:34,190 on stmt: N_max = $56binary_add.24 + odd_cutoff
DEBUG 2022-01-28 15:49:34,190 on stmt: $64load_global.27 = global(np: <module 'numpy' from 'C:\\Users\\zl4821\\Anaconda3\\envs\\GBS\\lib\\site-packages\\numpy\\__init__.py'>)
DEBUG 2022-01-28 15:49:34,190 on stmt: $66load_method.28 = getattr(value=$64load_global.27, attr=concatenate)
DEBUG 2022-01-28 15:49:34,190 on stmt: $68load_global.29 = global(np: <module 'numpy' from 'C:\\Users\\zl4821\\Anaconda3\\envs\\GBS\\lib\\site-packages\\numpy\\__init__.py'>)
DEBUG 2022-01-28 15:49:34,190 on stmt: $70load_method.30 = getattr(value=$68load_global.29, attr=array)
DEBUG 2022-01-28 15:49:34,190 on stmt: $74build_list.32 = build_list(items=[Var(batch_max, loop_hafnian_batch.py:24)])
DEBUG 2022-01-28 15:49:34,190 on stmt: $76call_method.33 = call $70load_method.30($74build_list.32, func=$70load_method.30, args=[Var($74build_list.32, loop_hafnian_batch.py:32)], kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:34,190 on stmt: $80build_tuple.35 = build_tuple(items=[Var($76call_method.33, loop_hafnian_batch.py:32), Var(fixed_edge_reps, loop_hafnian_batch.py:24)])
DEBUG 2022-01-28 15:49:34,190 on stmt: edge_reps = call $66load_method.28($80build_tuple.35, func=$66load_method.28, args=[Var($80build_tuple.35, loop_hafnian_batch.py:32)], kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:34,190 on stmt: $86load_global.37 = global(np: <module 'numpy' from 'C:\\Users\\zl4821\\Anaconda3\\envs\\GBS\\lib\\site-packages\\numpy\\__init__.py'>)
DEBUG 2022-01-28 15:49:34,190 on stmt: $88load_method.38 = getattr(value=$86load_global.37, attr=prod)
DEBUG 2022-01-28 15:49:34,190 on stmt: $const92.40 = const(int, 1)
DEBUG 2022-01-28 15:49:34,190 on stmt: $94binary_add.41 = edge_reps + $const92.40
DEBUG 2022-01-28 15:49:34,190 on stmt: steps = call $88load_method.38($94binary_add.41, func=$88load_method.38, args=[Var($94binary_add.41, loop_hafnian_batch.py:33)], kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:34,190 on stmt: $102load_method.44 = getattr(value=edge_reps, attr=max)
DEBUG 2022-01-28 15:49:34,190 on stmt: $104call_method.45 = call $102load_method.44(func=$102load_method.44, args=[], kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:34,190 on stmt: max_binom = $104call_method.45 + odd_cutoff
DEBUG 2022-01-28 15:49:34,190 on stmt: $112load_global.48 = global(precompute_binoms: CPUDispatcher(<function precompute_binoms at 0x00000241074240D0>))
DEBUG 2022-01-28 15:49:34,190 on stmt: binoms = call $112load_global.48(max_binom, func=$112load_global.48, args=[Var(max_binom, loop_hafnian_batch.py:35)], kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:34,190 on stmt: $120load_global.51 = global(np: <module 'numpy' from 'C:\\Users\\zl4821\\Anaconda3\\envs\\GBS\\lib\\site-packages\\numpy\\__init__.py'>)
DEBUG 2022-01-28 15:49:34,190 on stmt: $122load_attr.52 = getattr(value=$120load_global.51, attr=zeros)
DEBUG 2022-01-28 15:49:34,190 on stmt: $const124.53 = const(int, 2)
DEBUG 2022-01-28 15:49:34,199 on stmt: $128binary_multiply.55 = $const124.53 * batch_max
DEBUG 2022-01-28 15:49:34,199 on stmt: $132binary_add.57 = $128binary_multiply.55 + odd_cutoff
DEBUG 2022-01-28 15:49:34,199 on stmt: $const134.58 = const(int, 1)
DEBUG 2022-01-28 15:49:34,199 on stmt: $136binary_add.59 = $132binary_add.57 + $const134.58
DEBUG 2022-01-28 15:49:34,199 on stmt: $138load_global.60 = global(np: <module 'numpy' from 'C:\\Users\\zl4821\\Anaconda3\\envs\\GBS\\lib\\site-packages\\numpy\\__init__.py'>)
DEBUG 2022-01-28 15:49:34,199 on stmt: $140load_attr.61 = getattr(value=$138load_global.60, attr=complex128)
DEBUG 2022-01-28 15:49:34,199 on stmt: H_batch = call $122load_attr.52($136binary_add.59, func=$122load_attr.52, args=[Var($136binary_add.59, loop_hafnian_batch.py:38)], kws=[('dtype', Var($140load_attr.61, loop_hafnian_batch.py:38))], vararg=None, target=None)
DEBUG 2022-01-28 15:49:34,199 on stmt: $148load_global.64 = global(numba: <module 'numba' from 'C:\\Users\\zl4821\\Anaconda3\\envs\\GBS\\lib\\site-packages\\numba\\__init__.py'>)
DEBUG 2022-01-28 15:49:34,199 on stmt: $150load_method.65 = getattr(value=$148load_global.64, attr=prange)
DEBUG 2022-01-28 15:49:34,199 on stmt: $154call_method.67 = call $150load_method.65(steps, func=$150load_method.65, args=[Var(steps, loop_hafnian_batch.py:33)], kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:34,199 on stmt: $156get_iter.68 = getiter(value=$154call_method.67)
DEBUG 2022-01-28 15:49:34,199 on stmt: $phi158.0 = $156get_iter.68
DEBUG 2022-01-28 15:49:34,199 on stmt: jump 158
DEBUG 2022-01-28 15:49:34,199 ==== SSA block rewrite pass on 158
DEBUG 2022-01-28 15:49:34,199 Running <numba.core.ssa._FixSSAVars object at 0x000002410C1BEA90>
DEBUG 2022-01-28 15:49:34,201 on stmt: $158for_iter.1 = iternext(value=$phi158.0)
DEBUG 2022-01-28 15:49:34,201 on stmt: $158for_iter.2 = pair_first(value=$158for_iter.1)
DEBUG 2022-01-28 15:49:34,201 on stmt: $158for_iter.3 = pair_second(value=$158for_iter.1)
DEBUG 2022-01-28 15:49:34,201 on stmt: $phi162.1 = $158for_iter.2
DEBUG 2022-01-28 15:49:34,201 on stmt: branch $158for_iter.3, 162, 520
DEBUG 2022-01-28 15:49:34,201 ==== SSA block rewrite pass on 162
DEBUG 2022-01-28 15:49:34,201 Running <numba.core.ssa._FixSSAVars object at 0x000002410C1BEA90>
DEBUG 2022-01-28 15:49:34,201 on stmt: j = $phi162.1
DEBUG 2022-01-28 15:49:34,201 on stmt: $164load_global.2 = global(np: <module 'numpy' from 'C:\\Users\\zl4821\\Anaconda3\\envs\\GBS\\lib\\site-packages\\numpy\\__init__.py'>)
DEBUG 2022-01-28 15:49:34,201 on stmt: $166load_attr.3 = getattr(value=$164load_global.2, attr=zeros)
DEBUG 2022-01-28 15:49:34,201 on stmt: $const168.4 = const(int, 2)
DEBUG 2022-01-28 15:49:34,201 on stmt: $172binary_multiply.6 = $const168.4 * batch_max
DEBUG 2022-01-28 15:49:34,201 on stmt: $176binary_add.8 = $172binary_multiply.6 + odd_cutoff
DEBUG 2022-01-28 15:49:34,201 on stmt: $const178.9 = const(int, 1)
DEBUG 2022-01-28 15:49:34,201 on stmt: $180binary_add.10 = $176binary_add.8 + $const178.9
DEBUG 2022-01-28 15:49:34,201 on stmt: $182load_global.11 = global(np: <module 'numpy' from 'C:\\Users\\zl4821\\Anaconda3\\envs\\GBS\\lib\\site-packages\\numpy\\__init__.py'>)
DEBUG 2022-01-28 15:49:34,201 on stmt: $184load_attr.12 = getattr(value=$182load_global.11, attr=complex128)
DEBUG 2022-01-28 15:49:34,201 on stmt: Hnew = call $166load_attr.3($180binary_add.10, func=$166load_attr.3, args=[Var($180binary_add.10, loop_hafnian_batch.py:41)], kws=[('dtype', Var($184load_attr.12, loop_hafnian_batch.py:41))], vararg=None, target=None)
DEBUG 2022-01-28 15:49:34,201 on stmt: $192load_global.15 = global(find_kept_edges: CPUDispatcher(<function find_kept_edges at 0x0000024107424550>))
DEBUG 2022-01-28 15:49:34,201 on stmt: kept_edges = call $192load_global.15(j, edge_reps, func=$192load_global.15, args=[Var(j, loop_hafnian_batch.py:39), Var(edge_reps, loop_hafnian_batch.py:32)], kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:34,201 on stmt: $204load_method.20 = getattr(value=kept_edges, attr=sum)
DEBUG 2022-01-28 15:49:34,201 on stmt: edges_sum = call $204load_method.20(func=$204load_method.20, args=[], kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:34,201 on stmt: binom_prod = const(float, 1.0)
DEBUG 2022-01-28 15:49:34,201 on stmt: $214load_global.23 = global(range: <class 'range'>)
DEBUG 2022-01-28 15:49:34,201 on stmt: $const216.24 = const(int, 1)
DEBUG 2022-01-28 15:49:34,201 on stmt: $const220.26 = const(int, 2)
DEBUG 2022-01-28 15:49:34,201 on stmt: $222binary_floor_divide.27 = n // $const220.26
DEBUG 2022-01-28 15:49:34,201 on stmt: $224call_function.28 = call $214load_global.23($const216.24, $222binary_floor_divide.27, func=$214load_global.23, args=[Var($const216.24, loop_hafnian_batch.py:47), Var($222binary_floor_divide.27, loop_hafnian_batch.py:47)], kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:34,201 on stmt: $226get_iter.29 = getiter(value=$224call_function.28)
DEBUG 2022-01-28 15:49:34,201 on stmt: $phi228.1 = $226get_iter.29
DEBUG 2022-01-28 15:49:34,201 on stmt: jump 228
DEBUG 2022-01-28 15:49:34,201 ==== SSA block rewrite pass on 228
DEBUG 2022-01-28 15:49:34,201 Running <numba.core.ssa._FixSSAVars object at 0x000002410C1BEA90>
DEBUG 2022-01-28 15:49:34,201 on stmt: binom_prod.2 = phi(incoming_values=[Var(binom_prod, loop_hafnian_batch.py:46), Var(binom_prod.1, loop_hafnian_batch.py:48)], incoming_blocks=[162, 230])
DEBUG 2022-01-28 15:49:34,201 on stmt: $228for_iter.2 = iternext(value=$phi228.1)
DEBUG 2022-01-28 15:49:34,201 on stmt: $228for_iter.3 = pair_first(value=$228for_iter.2)
DEBUG 2022-01-28 15:49:34,201 on stmt: $228for_iter.4 = pair_second(value=$228for_iter.2)
DEBUG 2022-01-28 15:49:34,201 on stmt: $phi230.2 = $228for_iter.3
DEBUG 2022-01-28 15:49:34,201 on stmt: branch $228for_iter.4, 230, 258
DEBUG 2022-01-28 15:49:34,201 ==== SSA block rewrite pass on 230
DEBUG 2022-01-28 15:49:34,201 Running <numba.core.ssa._FixSSAVars object at 0x000002410C1BEA90>
DEBUG 2022-01-28 15:49:34,201 on stmt: i = $phi230.2
DEBUG 2022-01-28 15:49:34,201 on stmt: $240binary_subscr.7 = getitem(value=edge_reps, index=i, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:34,201 on stmt: $246binary_subscr.10 = getitem(value=kept_edges, index=i, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:34,201 on stmt: $248build_tuple.11 = build_tuple(items=[Var($240binary_subscr.7, loop_hafnian_batch.py:48), Var($246binary_subscr.10, loop_hafnian_batch.py:48)])
DEBUG 2022-01-28 15:49:34,201 on stmt: $250binary_subscr.12 = getitem(value=binoms, index=$248build_tuple.11, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:34,201 on stmt: $252inplace_multiply.13 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=binom_prod.2, rhs=$250binary_subscr.12, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-01-28 15:49:34,201 on stmt: binom_prod.1 = $252inplace_multiply.13
DEBUG 2022-01-28 15:49:34,201 on stmt: jump 228
DEBUG 2022-01-28 15:49:34,201 ==== SSA block rewrite pass on 258
DEBUG 2022-01-28 15:49:34,201 Running <numba.core.ssa._FixSSAVars object at 0x000002410C1BEA90>
DEBUG 2022-01-28 15:49:34,201 on stmt: bool260 = global(bool: <class 'bool'>)
DEBUG 2022-01-28 15:49:34,201 on stmt: $260pred = call bool260(glynn, func=bool260, args=(Var(glynn, loop_hafnian_batch.py:24),), kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:34,201 on stmt: branch $260pred, 264, 278
DEBUG 2022-01-28 15:49:34,201 ==== SSA block rewrite pass on 264
DEBUG 2022-01-28 15:49:34,201 Running <numba.core.ssa._FixSSAVars object at 0x000002410C1BEA90>
DEBUG 2022-01-28 15:49:34,201 on stmt: $const264.1 = const(int, 2)
DEBUG 2022-01-28 15:49:34,201 on stmt: $268binary_multiply.3 = $const264.1 * kept_edges
DEBUG 2022-01-28 15:49:34,201 on stmt: delta = $268binary_multiply.3 - edge_reps
DEBUG 2022-01-28 15:49:34,201 on stmt: jump 282
DEBUG 2022-01-28 15:49:34,201 ==== SSA block rewrite pass on 278
DEBUG 2022-01-28 15:49:34,201 Running <numba.core.ssa._FixSSAVars object at 0x000002410C1BEA90>
DEBUG 2022-01-28 15:49:34,201 on stmt: delta = kept_edges
DEBUG 2022-01-28 15:49:34,201 on stmt: jump 282
DEBUG 2022-01-28 15:49:34,201 ==== SSA block rewrite pass on 282
DEBUG 2022-01-28 15:49:34,201 Running <numba.core.ssa._FixSSAVars object at 0x000002410C1BEA90>
DEBUG 2022-01-28 15:49:34,201 on stmt: $282load_global.1 = global(get_submatrices: CPUDispatcher(<function get_submatrices at 0x0000024107424E50>))
DEBUG 2022-01-28 15:49:34,201 on stmt: $292call_function.6 = call $282load_global.1(delta, A, D, oddV, func=$282load_global.1, args=[Var(delta, loop_hafnian_batch.py:51), Var(A, loop_hafnian_batch.py:24), Var(D, loop_hafnian_batch.py:24), Var(oddV, loop_hafnian_batch.py:25)], kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:34,201 on stmt: $294unpack_sequence.11 = exhaust_iter(value=$292call_function.6, count=4)
DEBUG 2022-01-28 15:49:34,201 on stmt: $294unpack_sequence.7 = static_getitem(value=$294unpack_sequence.11, index=0, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:34,201 on stmt: $294unpack_sequence.8 = static_getitem(value=$294unpack_sequence.11, index=1, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:34,201 on stmt: $294unpack_sequence.9 = static_getitem(value=$294unpack_sequence.11, index=2, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:34,201 on stmt: $294unpack_sequence.10 = static_getitem(value=$294unpack_sequence.11, index=3, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:34,201 on stmt: AX_S = $294unpack_sequence.7
DEBUG 2022-01-28 15:49:34,201 on stmt: XD_S = $294unpack_sequence.8
DEBUG 2022-01-28 15:49:34,209 on stmt: D_S = $294unpack_sequence.9
DEBUG 2022-01-28 15:49:34,209 on stmt: oddVX_S = $294unpack_sequence.10
DEBUG 2022-01-28 15:49:34,209 on stmt: $304load_global.12 = global(eigvals: CPUDispatcher(<function eigvals at 0x00000241074303A0>))
DEBUG 2022-01-28 15:49:34,209 on stmt: E = call $304load_global.12(AX_S, func=$304load_global.12, args=[Var(AX_S, loop_hafnian_batch.py:55)], kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:34,209 on stmt: $312load_global.15 = global(f_loop: CPUDispatcher(<function f_loop at 0x00000241074248B0>))
DEBUG 2022-01-28 15:49:34,209 on stmt: f_even = call $312load_global.15(E, AX_S, XD_S, D_S, N_max, func=$312load_global.15, args=[Var(E, loop_hafnian_batch.py:57), Var(AX_S, loop_hafnian_batch.py:55), Var(XD_S, loop_hafnian_batch.py:55), Var(D_S, loop_hafnian_batch.py:55), Var(N_max, loop_hafnian_batch.py:30)], kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:34,209 on stmt: $328load_global.22 = global(f_loop_odd: CPUDispatcher(<function f_loop_odd at 0x0000024107424AF0>))
DEBUG 2022-01-28 15:49:34,209 on stmt: f_odd = call $328load_global.22(E, AX_S, XD_S, D_S, N_max, oddloop, oddVX_S, func=$328load_global.22, args=[Var(E, loop_hafnian_batch.py:57), Var(AX_S, loop_hafnian_batch.py:55), Var(XD_S, loop_hafnian_batch.py:55), Var(D_S, loop_hafnian_batch.py:55), Var(N_max, loop_hafnian_batch.py:30), Var(oddloop, loop_hafnian_batch.py:24), Var(oddVX_S, loop_hafnian_batch.py:55)], kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:34,209 on stmt: $348load_global.31 = global(range: <class 'range'>)
DEBUG 2022-01-28 15:49:34,209 on stmt: $const350.32 = const(int, 2)
DEBUG 2022-01-28 15:49:34,209 on stmt: $const354.34 = const(int, 0)
DEBUG 2022-01-28 15:49:34,209 on stmt: $356binary_subscr.35 = static_getitem(value=kept_edges, index=0, index_var=$const354.34, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:34,209 on stmt: $358binary_multiply.36 = $const350.32 * $356binary_subscr.35
DEBUG 2022-01-28 15:49:34,209 on stmt: $const360.37 = const(int, 2)
DEBUG 2022-01-28 15:49:34,209 on stmt: $364binary_multiply.39 = $const360.37 * batch_max
DEBUG 2022-01-28 15:49:34,209 on stmt: $368binary_add.41 = $364binary_multiply.39 + odd_cutoff
DEBUG 2022-01-28 15:49:34,209 on stmt: $const370.42 = const(int, 1)
DEBUG 2022-01-28 15:49:34,209 on stmt: $372binary_add.43 = $368binary_add.41 + $const370.42
DEBUG 2022-01-28 15:49:34,209 on stmt: $374call_function.44 = call $348load_global.31($358binary_multiply.36, $372binary_add.43, func=$348load_global.31, args=[Var($358binary_multiply.36, loop_hafnian_batch.py:64), Var($372binary_add.43, loop_hafnian_batch.py:64)], kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:34,211 on stmt: $376get_iter.45 = getiter(value=$374call_function.44)
DEBUG 2022-01-28 15:49:34,211 on stmt: $phi378.1 = $376get_iter.45
DEBUG 2022-01-28 15:49:34,211 on stmt: jump 378
DEBUG 2022-01-28 15:49:34,211 ==== SSA block rewrite pass on 378
DEBUG 2022-01-28 15:49:34,211 Running <numba.core.ssa._FixSSAVars object at 0x000002410C1BEA90>
DEBUG 2022-01-28 15:49:34,211 on stmt: $378for_iter.2 = iternext(value=$phi378.1)
DEBUG 2022-01-28 15:49:34,211 on stmt: $378for_iter.3 = pair_first(value=$378for_iter.2)
DEBUG 2022-01-28 15:49:34,211 on stmt: $378for_iter.4 = pair_second(value=$378for_iter.2)
DEBUG 2022-01-28 15:49:34,211 on stmt: $phi380.2 = $378for_iter.3
DEBUG 2022-01-28 15:49:34,211 on stmt: branch $378for_iter.4, 380, 510
DEBUG 2022-01-28 15:49:34,211 ==== SSA block rewrite pass on 380
DEBUG 2022-01-28 15:49:34,211 Running <numba.core.ssa._FixSSAVars object at 0x000002410C1BEA90>
DEBUG 2022-01-28 15:49:34,211 on stmt: N_det = $phi380.2
DEBUG 2022-01-28 15:49:34,211 on stmt: N = N_fixed + N_det
DEBUG 2022-01-28 15:49:34,211 on stmt: $const390.6 = const(float, -1.0)
DEBUG 2022-01-28 15:49:34,211 on stmt: $const394.8 = const(int, 2)
DEBUG 2022-01-28 15:49:34,211 on stmt: $396binary_floor_divide.9 = N // $const394.8
DEBUG 2022-01-28 15:49:34,211 on stmt: $400binary_subtract.11 = $396binary_floor_divide.9 - edges_sum
DEBUG 2022-01-28 15:49:34,211 on stmt: plus_minus = $const390.6 ** $400binary_subtract.11
DEBUG 2022-01-28 15:49:34,211 on stmt: $const410.15 = const(int, 2)
DEBUG 2022-01-28 15:49:34,211 on stmt: $412binary_floor_divide.16 = N_det // $const410.15
DEBUG 2022-01-28 15:49:34,211 on stmt: $const416.18 = const(int, 0)
DEBUG 2022-01-28 15:49:34,211 on stmt: $418binary_subscr.19 = static_getitem(value=kept_edges, index=0, index_var=$const416.18, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:34,211 on stmt: $420build_tuple.20 = build_tuple(items=[Var($412binary_floor_divide.16, loop_hafnian_batch.py:68), Var($418binary_subscr.19, loop_hafnian_batch.py:68)])
DEBUG 2022-01-28 15:49:34,211 on stmt: $422binary_subscr.21 = getitem(value=binoms, index=$420build_tuple.20, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:34,211 on stmt: n_det_binom_prod = $422binary_subscr.21 * binom_prod.2
DEBUG 2022-01-28 15:49:34,211 on stmt: $const432.25 = const(int, 2)
DEBUG 2022-01-28 15:49:34,211 on stmt: $434binary_modulo.26 = N_det % $const432.25
DEBUG 2022-01-28 15:49:34,211 on stmt: $const436.27 = const(int, 0)
DEBUG 2022-01-28 15:49:34,211 on stmt: $438compare_op.28 = $434binary_modulo.26 == $const436.27
DEBUG 2022-01-28 15:49:34,211 on stmt: bool440 = global(bool: <class 'bool'>)
DEBUG 2022-01-28 15:49:34,211 on stmt: $440pred = call bool440($438compare_op.28, func=bool440, args=(Var($438compare_op.28, loop_hafnian_batch.py:70),), kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:34,211 on stmt: branch $440pred, 444, 478
DEBUG 2022-01-28 15:49:34,211 ==== SSA block rewrite pass on 444
DEBUG 2022-01-28 15:49:34,211 Running <numba.core.ssa._FixSSAVars object at 0x000002410C1BEA90>
DEBUG 2022-01-28 15:49:34,211 on stmt: $450binary_subscr.6 = getitem(value=Hnew, index=N_det, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:34,211 on stmt: $456binary_multiply.9 = n_det_binom_prod * plus_minus
DEBUG 2022-01-28 15:49:34,211 on stmt: $const462.12 = const(int, 2)
DEBUG 2022-01-28 15:49:34,211 on stmt: $464binary_floor_divide.13 = N // $const462.12
DEBUG 2022-01-28 15:49:34,211 on stmt: $466binary_subscr.14 = getitem(value=f_even, index=$464binary_floor_divide.13, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:34,211 on stmt: $468binary_multiply.15 = $456binary_multiply.9 * $466binary_subscr.14
DEBUG 2022-01-28 15:49:34,211 on stmt: $470inplace_add.16 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$450binary_subscr.6, rhs=$468binary_multiply.15, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-01-28 15:49:34,211 on stmt: Hnew[N_det] = $470inplace_add.16
DEBUG 2022-01-28 15:49:34,211 on stmt: jump 506
DEBUG 2022-01-28 15:49:34,211 ==== SSA block rewrite pass on 478
DEBUG 2022-01-28 15:49:34,211 Running <numba.core.ssa._FixSSAVars object at 0x000002410C1BEA90>
DEBUG 2022-01-28 15:49:34,211 on stmt: $484binary_subscr.6 = getitem(value=Hnew, index=N_det, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:34,211 on stmt: $490binary_multiply.9 = n_det_binom_prod * plus_minus
DEBUG 2022-01-28 15:49:34,211 on stmt: $496binary_subscr.12 = getitem(value=f_odd, index=N, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:34,211 on stmt: $498binary_multiply.13 = $490binary_multiply.9 * $496binary_subscr.12
DEBUG 2022-01-28 15:49:34,211 on stmt: $500inplace_add.14 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$484binary_subscr.6, rhs=$498binary_multiply.13, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-01-28 15:49:34,211 on stmt: Hnew[N_det] = $500inplace_add.14
DEBUG 2022-01-28 15:49:34,211 on stmt: jump 506
DEBUG 2022-01-28 15:49:34,211 ==== SSA block rewrite pass on 506
DEBUG 2022-01-28 15:49:34,211 Running <numba.core.ssa._FixSSAVars object at 0x000002410C1BEA90>
DEBUG 2022-01-28 15:49:34,211 on stmt: jump 378
DEBUG 2022-01-28 15:49:34,211 ==== SSA block rewrite pass on 510
DEBUG 2022-01-28 15:49:34,211 Running <numba.core.ssa._FixSSAVars object at 0x000002410C1BEA90>
DEBUG 2022-01-28 15:49:34,211 on stmt: $514inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=H_batch, rhs=Hnew, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-01-28 15:49:34,211 find_def var='H_batch' stmt=$514inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=H_batch, rhs=Hnew, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-01-28 15:49:34,211 find_def_from_top label 510
DEBUG 2022-01-28 15:49:34,211 idom 378 from label 510
DEBUG 2022-01-28 15:49:34,211 find_def_from_bottom label 378
DEBUG 2022-01-28 15:49:34,211 find_def_from_top label 378
DEBUG 2022-01-28 15:49:34,211 idom 282 from label 378
DEBUG 2022-01-28 15:49:34,211 find_def_from_bottom label 282
DEBUG 2022-01-28 15:49:34,211 find_def_from_top label 282
DEBUG 2022-01-28 15:49:34,211 idom 258 from label 282
DEBUG 2022-01-28 15:49:34,211 find_def_from_bottom label 258
DEBUG 2022-01-28 15:49:34,211 find_def_from_top label 258
DEBUG 2022-01-28 15:49:34,211 idom 228 from label 258
DEBUG 2022-01-28 15:49:34,211 find_def_from_bottom label 228
DEBUG 2022-01-28 15:49:34,211 find_def_from_top label 228
DEBUG 2022-01-28 15:49:34,211 idom 162 from label 228
DEBUG 2022-01-28 15:49:34,211 find_def_from_bottom label 162
DEBUG 2022-01-28 15:49:34,211 find_def_from_top label 162
DEBUG 2022-01-28 15:49:34,211 idom 158 from label 162
DEBUG 2022-01-28 15:49:34,219 find_def_from_bottom label 158
DEBUG 2022-01-28 15:49:34,219 find_def_from_top label 158
DEBUG 2022-01-28 15:49:34,219 insert phi node H_batch.2 = phi(incoming_values=[], incoming_blocks=[]) at 158
DEBUG 2022-01-28 15:49:34,219 find_def_from_bottom label 0
DEBUG 2022-01-28 15:49:34,219 incoming_def H_batch = call $122load_attr.52($136binary_add.59, func=$122load_attr.52, args=[Var($136binary_add.59, loop_hafnian_batch.py:38)], kws=[('dtype', Var($140load_attr.61, loop_hafnian_batch.py:38))], vararg=None, target=None)
DEBUG 2022-01-28 15:49:34,219 find_def_from_bottom label 510
DEBUG 2022-01-28 15:49:34,219 incoming_def H_batch.1 = $514inplace_add.3
DEBUG 2022-01-28 15:49:34,219 replaced with: $514inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=H_batch.2, rhs=Hnew, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-01-28 15:49:34,219 on stmt: H_batch.1 = $514inplace_add.3
DEBUG 2022-01-28 15:49:34,219 on stmt: jump 158
DEBUG 2022-01-28 15:49:34,219 ==== SSA block rewrite pass on 520
DEBUG 2022-01-28 15:49:34,219 Running <numba.core.ssa._FixSSAVars object at 0x000002410C1BEA90>
DEBUG 2022-01-28 15:49:34,219 on stmt: bool522 = global(bool: <class 'bool'>)
DEBUG 2022-01-28 15:49:34,219 on stmt: $522pred = call bool522(glynn, func=bool522, args=(Var(glynn, loop_hafnian_batch.py:24),), kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:34,219 on stmt: branch $522pred, 526, 580
DEBUG 2022-01-28 15:49:34,219 ==== SSA block rewrite pass on 526
DEBUG 2022-01-28 15:49:34,221 Running <numba.core.ssa._FixSSAVars object at 0x000002410C1BEA90>
DEBUG 2022-01-28 15:49:34,221 on stmt: $526load_global.0 = global(range: <class 'range'>)
DEBUG 2022-01-28 15:49:34,221 on stmt: $530load_attr.2 = getattr(value=H_batch, attr=shape)
DEBUG 2022-01-28 15:49:34,221 find_def var='H_batch' stmt=$530load_attr.2 = getattr(value=H_batch, attr=shape)
DEBUG 2022-01-28 15:49:34,221 find_def_from_top label 526
DEBUG 2022-01-28 15:49:34,221 idom 520 from label 526
DEBUG 2022-01-28 15:49:34,221 find_def_from_bottom label 520
DEBUG 2022-01-28 15:49:34,221 find_def_from_top label 520
DEBUG 2022-01-28 15:49:34,221 idom 158 from label 520
DEBUG 2022-01-28 15:49:34,221 find_def_from_bottom label 158
DEBUG 2022-01-28 15:49:34,221 replaced with: $530load_attr.2 = getattr(value=H_batch.2, attr=shape)
DEBUG 2022-01-28 15:49:34,221 on stmt: $const532.3 = const(int, 0)
DEBUG 2022-01-28 15:49:34,221 on stmt: $534binary_subscr.4 = static_getitem(value=$530load_attr.2, index=0, index_var=$const532.3, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:34,221 on stmt: $536call_function.5 = call $526load_global.0($534binary_subscr.4, func=$526load_global.0, args=[Var($534binary_subscr.4, loop_hafnian_batch.py:78)], kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:34,221 on stmt: $538get_iter.6 = getiter(value=$536call_function.5)
DEBUG 2022-01-28 15:49:34,221 on stmt: $phi540.0 = $538get_iter.6
DEBUG 2022-01-28 15:49:34,221 on stmt: jump 540
DEBUG 2022-01-28 15:49:34,221 ==== SSA block rewrite pass on 540
DEBUG 2022-01-28 15:49:34,221 Running <numba.core.ssa._FixSSAVars object at 0x000002410C1BEA90>
DEBUG 2022-01-28 15:49:34,221 on stmt: $540for_iter.1 = iternext(value=$phi540.0)
DEBUG 2022-01-28 15:49:34,221 on stmt: $540for_iter.2 = pair_first(value=$540for_iter.1)
DEBUG 2022-01-28 15:49:34,221 on stmt: $540for_iter.3 = pair_second(value=$540for_iter.1)
DEBUG 2022-01-28 15:49:34,221 on stmt: $phi542.1 = $540for_iter.2
DEBUG 2022-01-28 15:49:34,221 on stmt: branch $540for_iter.3, 542, 580
DEBUG 2022-01-28 15:49:34,221 ==== SSA block rewrite pass on 542
DEBUG 2022-01-28 15:49:34,221 Running <numba.core.ssa._FixSSAVars object at 0x000002410C1BEA90>
DEBUG 2022-01-28 15:49:34,221 on stmt: j.1 = $phi542.1
DEBUG 2022-01-28 15:49:34,221 on stmt: x = N_fixed + j.1
DEBUG 2022-01-28 15:49:34,221 on stmt: $558binary_subscr.9 = getitem(value=H_batch, index=j.1, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:34,221 find_def var='H_batch' stmt=$558binary_subscr.9 = getitem(value=H_batch, index=j.1, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:34,221 find_def_from_top label 542
DEBUG 2022-01-28 15:49:34,221 idom 540 from label 542
DEBUG 2022-01-28 15:49:34,221 find_def_from_bottom label 540
DEBUG 2022-01-28 15:49:34,221 find_def_from_top label 540
DEBUG 2022-01-28 15:49:34,221 idom 526 from label 540
DEBUG 2022-01-28 15:49:34,221 find_def_from_bottom label 526
DEBUG 2022-01-28 15:49:34,221 find_def_from_top label 526
DEBUG 2022-01-28 15:49:34,221 idom 520 from label 526
DEBUG 2022-01-28 15:49:34,221 find_def_from_bottom label 520
DEBUG 2022-01-28 15:49:34,221 find_def_from_top label 520
DEBUG 2022-01-28 15:49:34,221 idom 158 from label 520
DEBUG 2022-01-28 15:49:34,221 find_def_from_bottom label 158
DEBUG 2022-01-28 15:49:34,221 replaced with: $558binary_subscr.9 = getitem(value=H_batch.2, index=j.1, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:34,221 on stmt: $const560.10 = const(float, 0.5)
DEBUG 2022-01-28 15:49:34,221 on stmt: $const564.12 = const(int, 2)
DEBUG 2022-01-28 15:49:34,221 on stmt: $566binary_floor_divide.13 = x // $const564.12
DEBUG 2022-01-28 15:49:34,221 on stmt: $568binary_power.14 = $const560.10 ** $566binary_floor_divide.13
DEBUG 2022-01-28 15:49:34,221 on stmt: $570inplace_multiply.15 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=$558binary_subscr.9, rhs=$568binary_power.14, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-01-28 15:49:34,221 on stmt: H_batch[j.1] = $570inplace_multiply.15
DEBUG 2022-01-28 15:49:34,221 find_def var='H_batch' stmt=H_batch[j.1] = $570inplace_multiply.15
DEBUG 2022-01-28 15:49:34,221 find_def_from_top label 542
DEBUG 2022-01-28 15:49:34,221 idom 540 from label 542
DEBUG 2022-01-28 15:49:34,221 find_def_from_bottom label 540
DEBUG 2022-01-28 15:49:34,221 find_def_from_top label 540
DEBUG 2022-01-28 15:49:34,221 idom 526 from label 540
DEBUG 2022-01-28 15:49:34,221 find_def_from_bottom label 526
DEBUG 2022-01-28 15:49:34,221 find_def_from_top label 526
DEBUG 2022-01-28 15:49:34,221 idom 520 from label 526
DEBUG 2022-01-28 15:49:34,221 find_def_from_bottom label 520
DEBUG 2022-01-28 15:49:34,221 find_def_from_top label 520
DEBUG 2022-01-28 15:49:34,221 idom 158 from label 520
DEBUG 2022-01-28 15:49:34,221 find_def_from_bottom label 158
DEBUG 2022-01-28 15:49:34,221 replaced with: H_batch.2[j.1] = $570inplace_multiply.15
DEBUG 2022-01-28 15:49:34,221 on stmt: jump 540
DEBUG 2022-01-28 15:49:34,221 ==== SSA block rewrite pass on 580
DEBUG 2022-01-28 15:49:34,221 Running <numba.core.ssa._FixSSAVars object at 0x000002410C1BEA90>
DEBUG 2022-01-28 15:49:34,221 on stmt: $582return_value.1 = cast(value=H_batch)
DEBUG 2022-01-28 15:49:34,221 find_def var='H_batch' stmt=$582return_value.1 = cast(value=H_batch)
DEBUG 2022-01-28 15:49:34,221 find_def_from_top label 580
DEBUG 2022-01-28 15:49:34,221 idom 520 from label 580
DEBUG 2022-01-28 15:49:34,221 find_def_from_bottom label 520
DEBUG 2022-01-28 15:49:34,221 find_def_from_top label 520
DEBUG 2022-01-28 15:49:34,221 idom 158 from label 520
DEBUG 2022-01-28 15:49:34,221 find_def_from_bottom label 158
DEBUG 2022-01-28 15:49:34,221 replaced with: $582return_value.1 = cast(value=H_batch.2)
DEBUG 2022-01-28 15:49:34,221 on stmt: return $582return_value.1
DEBUG 2022-01-28 15:49:34,221 Fix SSA violator on var delta
DEBUG 2022-01-28 15:49:34,221 ==== SSA block rewrite pass on 0
DEBUG 2022-01-28 15:49:34,221 Running <numba.core.ssa._FreshVarHandler object at 0x000002410F899550>
DEBUG 2022-01-28 15:49:34,221 on stmt: A = arg(0, name=A)
DEBUG 2022-01-28 15:49:34,229 on stmt: D = arg(1, name=D)
DEBUG 2022-01-28 15:49:34,229 on stmt: fixed_edge_reps = arg(2, name=fixed_edge_reps)
DEBUG 2022-01-28 15:49:34,229 on stmt: batch_max = arg(3, name=batch_max)
DEBUG 2022-01-28 15:49:34,229 on stmt: odd_cutoff = arg(4, name=odd_cutoff)
DEBUG 2022-01-28 15:49:34,229 on stmt: glynn = arg(5, name=glynn)
DEBUG 2022-01-28 15:49:34,229 on stmt: $const4.1 = const(int, 0)
DEBUG 2022-01-28 15:49:34,229 on stmt: oddloop = static_getitem(value=D, index=0, index_var=$const4.1, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:34,229 on stmt: $const12.4 = const(int, 0)
DEBUG 2022-01-28 15:49:34,229 on stmt: $const14.5 = const(NoneType, None)
DEBUG 2022-01-28 15:49:34,229 on stmt: $const16.6 = const(NoneType, None)
DEBUG 2022-01-28 15:49:34,229 on stmt: $18build_slice.7 = global(slice: <class 'slice'>)
DEBUG 2022-01-28 15:49:34,229 on stmt: $18build_slice.8 = call $18build_slice.7($const14.5, $const16.6, func=$18build_slice.7, args=(Var($const14.5, loop_hafnian_batch.py:25), Var($const16.6, loop_hafnian_batch.py:25)), kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:34,229 on stmt: $20build_tuple.9 = build_tuple(items=[Var($const12.4, loop_hafnian_batch.py:25), Var($18build_slice.8, loop_hafnian_batch.py:25)])
DEBUG 2022-01-28 15:49:34,229 on stmt: oddV = static_getitem(value=A, index=(0, slice(None, None, None)), index_var=$20build_tuple.9, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:34,229 on stmt: $28load_attr.12 = getattr(value=A, attr=shape)
DEBUG 2022-01-28 15:49:34,229 on stmt: $const30.13 = const(int, 0)
DEBUG 2022-01-28 15:49:34,229 on stmt: n = static_getitem(value=$28load_attr.12, index=0, index_var=$const30.13, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:34,229 on stmt: $const36.15 = const(int, 2)
DEBUG 2022-01-28 15:49:34,229 on stmt: $40load_method.17 = getattr(value=fixed_edge_reps, attr=sum)
DEBUG 2022-01-28 15:49:34,231 on stmt: $42call_method.18 = call $40load_method.17(func=$40load_method.17, args=[], kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:34,231 on stmt: N_fixed = $const36.15 * $42call_method.18
DEBUG 2022-01-28 15:49:34,231 on stmt: $const50.21 = const(int, 2)
DEBUG 2022-01-28 15:49:34,231 on stmt: $54binary_multiply.23 = $const50.21 * batch_max
DEBUG 2022-01-28 15:49:34,231 on stmt: $56binary_add.24 = N_fixed + $54binary_multiply.23
DEBUG 2022-01-28 15:49:34,231 on stmt: N_max = $56binary_add.24 + odd_cutoff
DEBUG 2022-01-28 15:49:34,231 on stmt: $64load_global.27 = global(np: <module 'numpy' from 'C:\\Users\\zl4821\\Anaconda3\\envs\\GBS\\lib\\site-packages\\numpy\\__init__.py'>)
DEBUG 2022-01-28 15:49:34,231 on stmt: $66load_method.28 = getattr(value=$64load_global.27, attr=concatenate)
DEBUG 2022-01-28 15:49:34,231 on stmt: $68load_global.29 = global(np: <module 'numpy' from 'C:\\Users\\zl4821\\Anaconda3\\envs\\GBS\\lib\\site-packages\\numpy\\__init__.py'>)
DEBUG 2022-01-28 15:49:34,231 on stmt: $70load_method.30 = getattr(value=$68load_global.29, attr=array)
DEBUG 2022-01-28 15:49:34,231 on stmt: $74build_list.32 = build_list(items=[Var(batch_max, loop_hafnian_batch.py:24)])
DEBUG 2022-01-28 15:49:34,231 on stmt: $76call_method.33 = call $70load_method.30($74build_list.32, func=$70load_method.30, args=[Var($74build_list.32, loop_hafnian_batch.py:32)], kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:34,231 on stmt: $80build_tuple.35 = build_tuple(items=[Var($76call_method.33, loop_hafnian_batch.py:32), Var(fixed_edge_reps, loop_hafnian_batch.py:24)])
DEBUG 2022-01-28 15:49:34,231 on stmt: edge_reps = call $66load_method.28($80build_tuple.35, func=$66load_method.28, args=[Var($80build_tuple.35, loop_hafnian_batch.py:32)], kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:34,231 on stmt: $86load_global.37 = global(np: <module 'numpy' from 'C:\\Users\\zl4821\\Anaconda3\\envs\\GBS\\lib\\site-packages\\numpy\\__init__.py'>)
DEBUG 2022-01-28 15:49:34,231 on stmt: $88load_method.38 = getattr(value=$86load_global.37, attr=prod)
DEBUG 2022-01-28 15:49:34,231 on stmt: $const92.40 = const(int, 1)
DEBUG 2022-01-28 15:49:34,231 on stmt: $94binary_add.41 = edge_reps + $const92.40
DEBUG 2022-01-28 15:49:34,231 on stmt: steps = call $88load_method.38($94binary_add.41, func=$88load_method.38, args=[Var($94binary_add.41, loop_hafnian_batch.py:33)], kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:34,231 on stmt: $102load_method.44 = getattr(value=edge_reps, attr=max)
DEBUG 2022-01-28 15:49:34,231 on stmt: $104call_method.45 = call $102load_method.44(func=$102load_method.44, args=[], kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:34,231 on stmt: max_binom = $104call_method.45 + odd_cutoff
DEBUG 2022-01-28 15:49:34,231 on stmt: $112load_global.48 = global(precompute_binoms: CPUDispatcher(<function precompute_binoms at 0x00000241074240D0>))
DEBUG 2022-01-28 15:49:34,231 on stmt: binoms = call $112load_global.48(max_binom, func=$112load_global.48, args=[Var(max_binom, loop_hafnian_batch.py:35)], kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:34,231 on stmt: $120load_global.51 = global(np: <module 'numpy' from 'C:\\Users\\zl4821\\Anaconda3\\envs\\GBS\\lib\\site-packages\\numpy\\__init__.py'>)
DEBUG 2022-01-28 15:49:34,231 on stmt: $122load_attr.52 = getattr(value=$120load_global.51, attr=zeros)
DEBUG 2022-01-28 15:49:34,231 on stmt: $const124.53 = const(int, 2)
DEBUG 2022-01-28 15:49:34,231 on stmt: $128binary_multiply.55 = $const124.53 * batch_max
DEBUG 2022-01-28 15:49:34,231 on stmt: $132binary_add.57 = $128binary_multiply.55 + odd_cutoff
DEBUG 2022-01-28 15:49:34,231 on stmt: $const134.58 = const(int, 1)
DEBUG 2022-01-28 15:49:34,231 on stmt: $136binary_add.59 = $132binary_add.57 + $const134.58
DEBUG 2022-01-28 15:49:34,231 on stmt: $138load_global.60 = global(np: <module 'numpy' from 'C:\\Users\\zl4821\\Anaconda3\\envs\\GBS\\lib\\site-packages\\numpy\\__init__.py'>)
DEBUG 2022-01-28 15:49:34,231 on stmt: $140load_attr.61 = getattr(value=$138load_global.60, attr=complex128)
DEBUG 2022-01-28 15:49:34,231 on stmt: H_batch = call $122load_attr.52($136binary_add.59, func=$122load_attr.52, args=[Var($136binary_add.59, loop_hafnian_batch.py:38)], kws=[('dtype', Var($140load_attr.61, loop_hafnian_batch.py:38))], vararg=None, target=None)
DEBUG 2022-01-28 15:49:34,231 on stmt: $148load_global.64 = global(numba: <module 'numba' from 'C:\\Users\\zl4821\\Anaconda3\\envs\\GBS\\lib\\site-packages\\numba\\__init__.py'>)
DEBUG 2022-01-28 15:49:34,231 on stmt: $150load_method.65 = getattr(value=$148load_global.64, attr=prange)
DEBUG 2022-01-28 15:49:34,231 on stmt: $154call_method.67 = call $150load_method.65(steps, func=$150load_method.65, args=[Var(steps, loop_hafnian_batch.py:33)], kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:34,231 on stmt: $156get_iter.68 = getiter(value=$154call_method.67)
DEBUG 2022-01-28 15:49:34,231 on stmt: $phi158.0 = $156get_iter.68
DEBUG 2022-01-28 15:49:34,231 on stmt: jump 158
DEBUG 2022-01-28 15:49:34,231 ==== SSA block rewrite pass on 158
DEBUG 2022-01-28 15:49:34,231 Running <numba.core.ssa._FreshVarHandler object at 0x000002410F899550>
DEBUG 2022-01-28 15:49:34,231 on stmt: H_batch.2 = phi(incoming_values=[Var(H_batch, loop_hafnian_batch.py:38), Var(H_batch.1, loop_hafnian_batch.py:75)], incoming_blocks=[0, 510])
DEBUG 2022-01-28 15:49:34,231 on stmt: $158for_iter.1 = iternext(value=$phi158.0)
DEBUG 2022-01-28 15:49:34,231 on stmt: $158for_iter.2 = pair_first(value=$158for_iter.1)
DEBUG 2022-01-28 15:49:34,231 on stmt: $158for_iter.3 = pair_second(value=$158for_iter.1)
DEBUG 2022-01-28 15:49:34,231 on stmt: $phi162.1 = $158for_iter.2
DEBUG 2022-01-28 15:49:34,231 on stmt: branch $158for_iter.3, 162, 520
DEBUG 2022-01-28 15:49:34,231 ==== SSA block rewrite pass on 162
DEBUG 2022-01-28 15:49:34,231 Running <numba.core.ssa._FreshVarHandler object at 0x000002410F899550>
DEBUG 2022-01-28 15:49:34,231 on stmt: j = $phi162.1
DEBUG 2022-01-28 15:49:34,231 on stmt: $164load_global.2 = global(np: <module 'numpy' from 'C:\\Users\\zl4821\\Anaconda3\\envs\\GBS\\lib\\site-packages\\numpy\\__init__.py'>)
DEBUG 2022-01-28 15:49:34,231 on stmt: $166load_attr.3 = getattr(value=$164load_global.2, attr=zeros)
DEBUG 2022-01-28 15:49:34,231 on stmt: $const168.4 = const(int, 2)
DEBUG 2022-01-28 15:49:34,231 on stmt: $172binary_multiply.6 = $const168.4 * batch_max
DEBUG 2022-01-28 15:49:34,231 on stmt: $176binary_add.8 = $172binary_multiply.6 + odd_cutoff
DEBUG 2022-01-28 15:49:34,231 on stmt: $const178.9 = const(int, 1)
DEBUG 2022-01-28 15:49:34,231 on stmt: $180binary_add.10 = $176binary_add.8 + $const178.9
DEBUG 2022-01-28 15:49:34,231 on stmt: $182load_global.11 = global(np: <module 'numpy' from 'C:\\Users\\zl4821\\Anaconda3\\envs\\GBS\\lib\\site-packages\\numpy\\__init__.py'>)
DEBUG 2022-01-28 15:49:34,231 on stmt: $184load_attr.12 = getattr(value=$182load_global.11, attr=complex128)
DEBUG 2022-01-28 15:49:34,231 on stmt: Hnew = call $166load_attr.3($180binary_add.10, func=$166load_attr.3, args=[Var($180binary_add.10, loop_hafnian_batch.py:41)], kws=[('dtype', Var($184load_attr.12, loop_hafnian_batch.py:41))], vararg=None, target=None)
DEBUG 2022-01-28 15:49:34,231 on stmt: $192load_global.15 = global(find_kept_edges: CPUDispatcher(<function find_kept_edges at 0x0000024107424550>))
DEBUG 2022-01-28 15:49:34,231 on stmt: kept_edges = call $192load_global.15(j, edge_reps, func=$192load_global.15, args=[Var(j, loop_hafnian_batch.py:39), Var(edge_reps, loop_hafnian_batch.py:32)], kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:34,231 on stmt: $204load_method.20 = getattr(value=kept_edges, attr=sum)
DEBUG 2022-01-28 15:49:34,231 on stmt: edges_sum = call $204load_method.20(func=$204load_method.20, args=[], kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:34,231 on stmt: binom_prod = const(float, 1.0)
DEBUG 2022-01-28 15:49:34,231 on stmt: $214load_global.23 = global(range: <class 'range'>)
DEBUG 2022-01-28 15:49:34,231 on stmt: $const216.24 = const(int, 1)
DEBUG 2022-01-28 15:49:34,231 on stmt: $const220.26 = const(int, 2)
DEBUG 2022-01-28 15:49:34,231 on stmt: $222binary_floor_divide.27 = n // $const220.26
DEBUG 2022-01-28 15:49:34,231 on stmt: $224call_function.28 = call $214load_global.23($const216.24, $222binary_floor_divide.27, func=$214load_global.23, args=[Var($const216.24, loop_hafnian_batch.py:47), Var($222binary_floor_divide.27, loop_hafnian_batch.py:47)], kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:34,231 on stmt: $226get_iter.29 = getiter(value=$224call_function.28)
DEBUG 2022-01-28 15:49:34,239 on stmt: $phi228.1 = $226get_iter.29
DEBUG 2022-01-28 15:49:34,239 on stmt: jump 228
DEBUG 2022-01-28 15:49:34,239 ==== SSA block rewrite pass on 228
DEBUG 2022-01-28 15:49:34,239 Running <numba.core.ssa._FreshVarHandler object at 0x000002410F899550>
DEBUG 2022-01-28 15:49:34,239 on stmt: binom_prod.2 = phi(incoming_values=[Var(binom_prod, loop_hafnian_batch.py:46), Var(binom_prod.1, loop_hafnian_batch.py:48)], incoming_blocks=[162, 230])
DEBUG 2022-01-28 15:49:34,239 on stmt: $228for_iter.2 = iternext(value=$phi228.1)
DEBUG 2022-01-28 15:49:34,239 on stmt: $228for_iter.3 = pair_first(value=$228for_iter.2)
DEBUG 2022-01-28 15:49:34,239 on stmt: $228for_iter.4 = pair_second(value=$228for_iter.2)
DEBUG 2022-01-28 15:49:34,239 on stmt: $phi230.2 = $228for_iter.3
DEBUG 2022-01-28 15:49:34,239 on stmt: branch $228for_iter.4, 230, 258
DEBUG 2022-01-28 15:49:34,239 ==== SSA block rewrite pass on 230
DEBUG 2022-01-28 15:49:34,239 Running <numba.core.ssa._FreshVarHandler object at 0x000002410F899550>
DEBUG 2022-01-28 15:49:34,239 on stmt: i = $phi230.2
DEBUG 2022-01-28 15:49:34,239 on stmt: $240binary_subscr.7 = getitem(value=edge_reps, index=i, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:34,239 on stmt: $246binary_subscr.10 = getitem(value=kept_edges, index=i, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:34,239 on stmt: $248build_tuple.11 = build_tuple(items=[Var($240binary_subscr.7, loop_hafnian_batch.py:48), Var($246binary_subscr.10, loop_hafnian_batch.py:48)])
DEBUG 2022-01-28 15:49:34,239 on stmt: $250binary_subscr.12 = getitem(value=binoms, index=$248build_tuple.11, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:34,239 on stmt: $252inplace_multiply.13 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=binom_prod.2, rhs=$250binary_subscr.12, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-01-28 15:49:34,239 on stmt: binom_prod.1 = $252inplace_multiply.13
DEBUG 2022-01-28 15:49:34,239 on stmt: jump 228
DEBUG 2022-01-28 15:49:34,239 ==== SSA block rewrite pass on 258
DEBUG 2022-01-28 15:49:34,241 Running <numba.core.ssa._FreshVarHandler object at 0x000002410F899550>
DEBUG 2022-01-28 15:49:34,241 on stmt: bool260 = global(bool: <class 'bool'>)
DEBUG 2022-01-28 15:49:34,241 on stmt: $260pred = call bool260(glynn, func=bool260, args=(Var(glynn, loop_hafnian_batch.py:24),), kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:34,241 on stmt: branch $260pred, 264, 278
DEBUG 2022-01-28 15:49:34,241 ==== SSA block rewrite pass on 264
DEBUG 2022-01-28 15:49:34,241 Running <numba.core.ssa._FreshVarHandler object at 0x000002410F899550>
DEBUG 2022-01-28 15:49:34,241 on stmt: $const264.1 = const(int, 2)
DEBUG 2022-01-28 15:49:34,241 on stmt: $268binary_multiply.3 = $const264.1 * kept_edges
DEBUG 2022-01-28 15:49:34,241 on stmt: delta = $268binary_multiply.3 - edge_reps
DEBUG 2022-01-28 15:49:34,241 first assign: delta
DEBUG 2022-01-28 15:49:34,241 replaced with: delta = $268binary_multiply.3 - edge_reps
DEBUG 2022-01-28 15:49:34,241 on stmt: jump 282
DEBUG 2022-01-28 15:49:34,241 ==== SSA block rewrite pass on 278
DEBUG 2022-01-28 15:49:34,241 Running <numba.core.ssa._FreshVarHandler object at 0x000002410F899550>
DEBUG 2022-01-28 15:49:34,241 on stmt: delta = kept_edges
DEBUG 2022-01-28 15:49:34,241 replaced with: delta.1 = kept_edges
DEBUG 2022-01-28 15:49:34,241 on stmt: jump 282
DEBUG 2022-01-28 15:49:34,241 ==== SSA block rewrite pass on 282
DEBUG 2022-01-28 15:49:34,241 Running <numba.core.ssa._FreshVarHandler object at 0x000002410F899550>
DEBUG 2022-01-28 15:49:34,241 on stmt: $282load_global.1 = global(get_submatrices: CPUDispatcher(<function get_submatrices at 0x0000024107424E50>))
DEBUG 2022-01-28 15:49:34,241 on stmt: $292call_function.6 = call $282load_global.1(delta, A, D, oddV, func=$282load_global.1, args=[Var(delta, loop_hafnian_batch.py:51), Var(A, loop_hafnian_batch.py:24), Var(D, loop_hafnian_batch.py:24), Var(oddV, loop_hafnian_batch.py:25)], kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:34,241 on stmt: $294unpack_sequence.11 = exhaust_iter(value=$292call_function.6, count=4)
DEBUG 2022-01-28 15:49:34,241 on stmt: $294unpack_sequence.7 = static_getitem(value=$294unpack_sequence.11, index=0, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:34,241 on stmt: $294unpack_sequence.8 = static_getitem(value=$294unpack_sequence.11, index=1, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:34,241 on stmt: $294unpack_sequence.9 = static_getitem(value=$294unpack_sequence.11, index=2, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:34,241 on stmt: $294unpack_sequence.10 = static_getitem(value=$294unpack_sequence.11, index=3, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:34,241 on stmt: AX_S = $294unpack_sequence.7
DEBUG 2022-01-28 15:49:34,241 on stmt: XD_S = $294unpack_sequence.8
DEBUG 2022-01-28 15:49:34,241 on stmt: D_S = $294unpack_sequence.9
DEBUG 2022-01-28 15:49:34,241 on stmt: oddVX_S = $294unpack_sequence.10
DEBUG 2022-01-28 15:49:34,241 on stmt: $304load_global.12 = global(eigvals: CPUDispatcher(<function eigvals at 0x00000241074303A0>))
DEBUG 2022-01-28 15:49:34,241 on stmt: E = call $304load_global.12(AX_S, func=$304load_global.12, args=[Var(AX_S, loop_hafnian_batch.py:55)], kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:34,241 on stmt: $312load_global.15 = global(f_loop: CPUDispatcher(<function f_loop at 0x00000241074248B0>))
DEBUG 2022-01-28 15:49:34,241 on stmt: f_even = call $312load_global.15(E, AX_S, XD_S, D_S, N_max, func=$312load_global.15, args=[Var(E, loop_hafnian_batch.py:57), Var(AX_S, loop_hafnian_batch.py:55), Var(XD_S, loop_hafnian_batch.py:55), Var(D_S, loop_hafnian_batch.py:55), Var(N_max, loop_hafnian_batch.py:30)], kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:34,241 on stmt: $328load_global.22 = global(f_loop_odd: CPUDispatcher(<function f_loop_odd at 0x0000024107424AF0>))
DEBUG 2022-01-28 15:49:34,241 on stmt: f_odd = call $328load_global.22(E, AX_S, XD_S, D_S, N_max, oddloop, oddVX_S, func=$328load_global.22, args=[Var(E, loop_hafnian_batch.py:57), Var(AX_S, loop_hafnian_batch.py:55), Var(XD_S, loop_hafnian_batch.py:55), Var(D_S, loop_hafnian_batch.py:55), Var(N_max, loop_hafnian_batch.py:30), Var(oddloop, loop_hafnian_batch.py:24), Var(oddVX_S, loop_hafnian_batch.py:55)], kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:34,241 on stmt: $348load_global.31 = global(range: <class 'range'>)
DEBUG 2022-01-28 15:49:34,241 on stmt: $const350.32 = const(int, 2)
DEBUG 2022-01-28 15:49:34,241 on stmt: $const354.34 = const(int, 0)
DEBUG 2022-01-28 15:49:34,241 on stmt: $356binary_subscr.35 = static_getitem(value=kept_edges, index=0, index_var=$const354.34, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:34,241 on stmt: $358binary_multiply.36 = $const350.32 * $356binary_subscr.35
DEBUG 2022-01-28 15:49:34,241 on stmt: $const360.37 = const(int, 2)
DEBUG 2022-01-28 15:49:34,241 on stmt: $364binary_multiply.39 = $const360.37 * batch_max
DEBUG 2022-01-28 15:49:34,241 on stmt: $368binary_add.41 = $364binary_multiply.39 + odd_cutoff
DEBUG 2022-01-28 15:49:34,241 on stmt: $const370.42 = const(int, 1)
DEBUG 2022-01-28 15:49:34,241 on stmt: $372binary_add.43 = $368binary_add.41 + $const370.42
DEBUG 2022-01-28 15:49:34,241 on stmt: $374call_function.44 = call $348load_global.31($358binary_multiply.36, $372binary_add.43, func=$348load_global.31, args=[Var($358binary_multiply.36, loop_hafnian_batch.py:64), Var($372binary_add.43, loop_hafnian_batch.py:64)], kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:34,241 on stmt: $376get_iter.45 = getiter(value=$374call_function.44)
DEBUG 2022-01-28 15:49:34,241 on stmt: $phi378.1 = $376get_iter.45
DEBUG 2022-01-28 15:49:34,241 on stmt: jump 378
DEBUG 2022-01-28 15:49:34,241 ==== SSA block rewrite pass on 378
DEBUG 2022-01-28 15:49:34,241 Running <numba.core.ssa._FreshVarHandler object at 0x000002410F899550>
DEBUG 2022-01-28 15:49:34,241 on stmt: $378for_iter.2 = iternext(value=$phi378.1)
DEBUG 2022-01-28 15:49:34,241 on stmt: $378for_iter.3 = pair_first(value=$378for_iter.2)
DEBUG 2022-01-28 15:49:34,241 on stmt: $378for_iter.4 = pair_second(value=$378for_iter.2)
DEBUG 2022-01-28 15:49:34,241 on stmt: $phi380.2 = $378for_iter.3
DEBUG 2022-01-28 15:49:34,241 on stmt: branch $378for_iter.4, 380, 510
DEBUG 2022-01-28 15:49:34,241 ==== SSA block rewrite pass on 380
DEBUG 2022-01-28 15:49:34,241 Running <numba.core.ssa._FreshVarHandler object at 0x000002410F899550>
DEBUG 2022-01-28 15:49:34,241 on stmt: N_det = $phi380.2
DEBUG 2022-01-28 15:49:34,241 on stmt: N = N_fixed + N_det
DEBUG 2022-01-28 15:49:34,241 on stmt: $const390.6 = const(float, -1.0)
DEBUG 2022-01-28 15:49:34,241 on stmt: $const394.8 = const(int, 2)
DEBUG 2022-01-28 15:49:34,241 on stmt: $396binary_floor_divide.9 = N // $const394.8
DEBUG 2022-01-28 15:49:34,241 on stmt: $400binary_subtract.11 = $396binary_floor_divide.9 - edges_sum
DEBUG 2022-01-28 15:49:34,241 on stmt: plus_minus = $const390.6 ** $400binary_subtract.11
DEBUG 2022-01-28 15:49:34,241 on stmt: $const410.15 = const(int, 2)
DEBUG 2022-01-28 15:49:34,241 on stmt: $412binary_floor_divide.16 = N_det // $const410.15
DEBUG 2022-01-28 15:49:34,241 on stmt: $const416.18 = const(int, 0)
DEBUG 2022-01-28 15:49:34,241 on stmt: $418binary_subscr.19 = static_getitem(value=kept_edges, index=0, index_var=$const416.18, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:34,241 on stmt: $420build_tuple.20 = build_tuple(items=[Var($412binary_floor_divide.16, loop_hafnian_batch.py:68), Var($418binary_subscr.19, loop_hafnian_batch.py:68)])
DEBUG 2022-01-28 15:49:34,241 on stmt: $422binary_subscr.21 = getitem(value=binoms, index=$420build_tuple.20, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:34,241 on stmt: n_det_binom_prod = $422binary_subscr.21 * binom_prod.2
DEBUG 2022-01-28 15:49:34,241 on stmt: $const432.25 = const(int, 2)
DEBUG 2022-01-28 15:49:34,241 on stmt: $434binary_modulo.26 = N_det % $const432.25
DEBUG 2022-01-28 15:49:34,241 on stmt: $const436.27 = const(int, 0)
DEBUG 2022-01-28 15:49:34,241 on stmt: $438compare_op.28 = $434binary_modulo.26 == $const436.27
DEBUG 2022-01-28 15:49:34,241 on stmt: bool440 = global(bool: <class 'bool'>)
DEBUG 2022-01-28 15:49:34,241 on stmt: $440pred = call bool440($438compare_op.28, func=bool440, args=(Var($438compare_op.28, loop_hafnian_batch.py:70),), kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:34,249 on stmt: branch $440pred, 444, 478
DEBUG 2022-01-28 15:49:34,249 ==== SSA block rewrite pass on 444
DEBUG 2022-01-28 15:49:34,249 Running <numba.core.ssa._FreshVarHandler object at 0x000002410F899550>
DEBUG 2022-01-28 15:49:34,249 on stmt: $450binary_subscr.6 = getitem(value=Hnew, index=N_det, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:34,249 on stmt: $456binary_multiply.9 = n_det_binom_prod * plus_minus
DEBUG 2022-01-28 15:49:34,249 on stmt: $const462.12 = const(int, 2)
DEBUG 2022-01-28 15:49:34,249 on stmt: $464binary_floor_divide.13 = N // $const462.12
DEBUG 2022-01-28 15:49:34,249 on stmt: $466binary_subscr.14 = getitem(value=f_even, index=$464binary_floor_divide.13, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:34,249 on stmt: $468binary_multiply.15 = $456binary_multiply.9 * $466binary_subscr.14
DEBUG 2022-01-28 15:49:34,249 on stmt: $470inplace_add.16 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$450binary_subscr.6, rhs=$468binary_multiply.15, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-01-28 15:49:34,249 on stmt: Hnew[N_det] = $470inplace_add.16
DEBUG 2022-01-28 15:49:34,249 on stmt: jump 506
DEBUG 2022-01-28 15:49:34,249 ==== SSA block rewrite pass on 478
DEBUG 2022-01-28 15:49:34,249 Running <numba.core.ssa._FreshVarHandler object at 0x000002410F899550>
DEBUG 2022-01-28 15:49:34,249 on stmt: $484binary_subscr.6 = getitem(value=Hnew, index=N_det, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:34,249 on stmt: $490binary_multiply.9 = n_det_binom_prod * plus_minus
DEBUG 2022-01-28 15:49:34,249 on stmt: $496binary_subscr.12 = getitem(value=f_odd, index=N, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:34,249 on stmt: $498binary_multiply.13 = $490binary_multiply.9 * $496binary_subscr.12
DEBUG 2022-01-28 15:49:34,249 on stmt: $500inplace_add.14 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$484binary_subscr.6, rhs=$498binary_multiply.13, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-01-28 15:49:34,251 on stmt: Hnew[N_det] = $500inplace_add.14
DEBUG 2022-01-28 15:49:34,251 on stmt: jump 506
DEBUG 2022-01-28 15:49:34,251 ==== SSA block rewrite pass on 506
DEBUG 2022-01-28 15:49:34,251 Running <numba.core.ssa._FreshVarHandler object at 0x000002410F899550>
DEBUG 2022-01-28 15:49:34,251 on stmt: jump 378
DEBUG 2022-01-28 15:49:34,251 ==== SSA block rewrite pass on 510
DEBUG 2022-01-28 15:49:34,251 Running <numba.core.ssa._FreshVarHandler object at 0x000002410F899550>
DEBUG 2022-01-28 15:49:34,251 on stmt: $514inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=H_batch.2, rhs=Hnew, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-01-28 15:49:34,251 on stmt: H_batch.1 = $514inplace_add.3
DEBUG 2022-01-28 15:49:34,251 on stmt: jump 158
DEBUG 2022-01-28 15:49:34,251 ==== SSA block rewrite pass on 520
DEBUG 2022-01-28 15:49:34,251 Running <numba.core.ssa._FreshVarHandler object at 0x000002410F899550>
DEBUG 2022-01-28 15:49:34,251 on stmt: bool522 = global(bool: <class 'bool'>)
DEBUG 2022-01-28 15:49:34,251 on stmt: $522pred = call bool522(glynn, func=bool522, args=(Var(glynn, loop_hafnian_batch.py:24),), kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:34,251 on stmt: branch $522pred, 526, 580
DEBUG 2022-01-28 15:49:34,251 ==== SSA block rewrite pass on 526
DEBUG 2022-01-28 15:49:34,251 Running <numba.core.ssa._FreshVarHandler object at 0x000002410F899550>
DEBUG 2022-01-28 15:49:34,251 on stmt: $526load_global.0 = global(range: <class 'range'>)
DEBUG 2022-01-28 15:49:34,251 on stmt: $530load_attr.2 = getattr(value=H_batch.2, attr=shape)
DEBUG 2022-01-28 15:49:34,251 on stmt: $const532.3 = const(int, 0)
DEBUG 2022-01-28 15:49:34,251 on stmt: $534binary_subscr.4 = static_getitem(value=$530load_attr.2, index=0, index_var=$const532.3, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:34,251 on stmt: $536call_function.5 = call $526load_global.0($534binary_subscr.4, func=$526load_global.0, args=[Var($534binary_subscr.4, loop_hafnian_batch.py:78)], kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:34,251 on stmt: $538get_iter.6 = getiter(value=$536call_function.5)
DEBUG 2022-01-28 15:49:34,251 on stmt: $phi540.0 = $538get_iter.6
DEBUG 2022-01-28 15:49:34,251 on stmt: jump 540
DEBUG 2022-01-28 15:49:34,251 ==== SSA block rewrite pass on 540
DEBUG 2022-01-28 15:49:34,251 Running <numba.core.ssa._FreshVarHandler object at 0x000002410F899550>
DEBUG 2022-01-28 15:49:34,251 on stmt: $540for_iter.1 = iternext(value=$phi540.0)
DEBUG 2022-01-28 15:49:34,251 on stmt: $540for_iter.2 = pair_first(value=$540for_iter.1)
DEBUG 2022-01-28 15:49:34,251 on stmt: $540for_iter.3 = pair_second(value=$540for_iter.1)
DEBUG 2022-01-28 15:49:34,251 on stmt: $phi542.1 = $540for_iter.2
DEBUG 2022-01-28 15:49:34,251 on stmt: branch $540for_iter.3, 542, 580
DEBUG 2022-01-28 15:49:34,251 ==== SSA block rewrite pass on 542
DEBUG 2022-01-28 15:49:34,251 Running <numba.core.ssa._FreshVarHandler object at 0x000002410F899550>
DEBUG 2022-01-28 15:49:34,251 on stmt: j.1 = $phi542.1
DEBUG 2022-01-28 15:49:34,251 on stmt: x = N_fixed + j.1
DEBUG 2022-01-28 15:49:34,251 on stmt: $558binary_subscr.9 = getitem(value=H_batch.2, index=j.1, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:34,251 on stmt: $const560.10 = const(float, 0.5)
DEBUG 2022-01-28 15:49:34,251 on stmt: $const564.12 = const(int, 2)
DEBUG 2022-01-28 15:49:34,251 on stmt: $566binary_floor_divide.13 = x // $const564.12
DEBUG 2022-01-28 15:49:34,251 on stmt: $568binary_power.14 = $const560.10 ** $566binary_floor_divide.13
DEBUG 2022-01-28 15:49:34,251 on stmt: $570inplace_multiply.15 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=$558binary_subscr.9, rhs=$568binary_power.14, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-01-28 15:49:34,251 on stmt: H_batch.2[j.1] = $570inplace_multiply.15
DEBUG 2022-01-28 15:49:34,251 on stmt: jump 540
DEBUG 2022-01-28 15:49:34,251 ==== SSA block rewrite pass on 580
DEBUG 2022-01-28 15:49:34,251 Running <numba.core.ssa._FreshVarHandler object at 0x000002410F899550>
DEBUG 2022-01-28 15:49:34,251 on stmt: $582return_value.1 = cast(value=H_batch.2)
DEBUG 2022-01-28 15:49:34,251 on stmt: return $582return_value.1
DEBUG 2022-01-28 15:49:34,251 Replaced assignments: defaultdict(<class 'list'>,
            {264: [<numba.core.ir.Assign object at 0x000002410E1713A0>],
             278: [<numba.core.ir.Assign object at 0x000002410E171310>]})
DEBUG 2022-01-28 15:49:34,251 ==== SSA block rewrite pass on 0
DEBUG 2022-01-28 15:49:34,251 Running <numba.core.ssa._FixSSAVars object at 0x000002410C41BCD0>
DEBUG 2022-01-28 15:49:34,251 on stmt: A = arg(0, name=A)
DEBUG 2022-01-28 15:49:34,251 on stmt: D = arg(1, name=D)
DEBUG 2022-01-28 15:49:34,251 on stmt: fixed_edge_reps = arg(2, name=fixed_edge_reps)
DEBUG 2022-01-28 15:49:34,251 on stmt: batch_max = arg(3, name=batch_max)
DEBUG 2022-01-28 15:49:34,251 on stmt: odd_cutoff = arg(4, name=odd_cutoff)
DEBUG 2022-01-28 15:49:34,251 on stmt: glynn = arg(5, name=glynn)
DEBUG 2022-01-28 15:49:34,251 on stmt: $const4.1 = const(int, 0)
DEBUG 2022-01-28 15:49:34,251 on stmt: oddloop = static_getitem(value=D, index=0, index_var=$const4.1, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:34,251 on stmt: $const12.4 = const(int, 0)
DEBUG 2022-01-28 15:49:34,251 on stmt: $const14.5 = const(NoneType, None)
DEBUG 2022-01-28 15:49:34,251 on stmt: $const16.6 = const(NoneType, None)
DEBUG 2022-01-28 15:49:34,251 on stmt: $18build_slice.7 = global(slice: <class 'slice'>)
DEBUG 2022-01-28 15:49:34,251 on stmt: $18build_slice.8 = call $18build_slice.7($const14.5, $const16.6, func=$18build_slice.7, args=(Var($const14.5, loop_hafnian_batch.py:25), Var($const16.6, loop_hafnian_batch.py:25)), kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:34,251 on stmt: $20build_tuple.9 = build_tuple(items=[Var($const12.4, loop_hafnian_batch.py:25), Var($18build_slice.8, loop_hafnian_batch.py:25)])
DEBUG 2022-01-28 15:49:34,251 on stmt: oddV = static_getitem(value=A, index=(0, slice(None, None, None)), index_var=$20build_tuple.9, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:34,251 on stmt: $28load_attr.12 = getattr(value=A, attr=shape)
DEBUG 2022-01-28 15:49:34,251 on stmt: $const30.13 = const(int, 0)
DEBUG 2022-01-28 15:49:34,251 on stmt: n = static_getitem(value=$28load_attr.12, index=0, index_var=$const30.13, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:34,251 on stmt: $const36.15 = const(int, 2)
DEBUG 2022-01-28 15:49:34,251 on stmt: $40load_method.17 = getattr(value=fixed_edge_reps, attr=sum)
DEBUG 2022-01-28 15:49:34,251 on stmt: $42call_method.18 = call $40load_method.17(func=$40load_method.17, args=[], kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:34,251 on stmt: N_fixed = $const36.15 * $42call_method.18
DEBUG 2022-01-28 15:49:34,251 on stmt: $const50.21 = const(int, 2)
DEBUG 2022-01-28 15:49:34,251 on stmt: $54binary_multiply.23 = $const50.21 * batch_max
DEBUG 2022-01-28 15:49:34,251 on stmt: $56binary_add.24 = N_fixed + $54binary_multiply.23
DEBUG 2022-01-28 15:49:34,251 on stmt: N_max = $56binary_add.24 + odd_cutoff
DEBUG 2022-01-28 15:49:34,251 on stmt: $64load_global.27 = global(np: <module 'numpy' from 'C:\\Users\\zl4821\\Anaconda3\\envs\\GBS\\lib\\site-packages\\numpy\\__init__.py'>)
DEBUG 2022-01-28 15:49:34,251 on stmt: $66load_method.28 = getattr(value=$64load_global.27, attr=concatenate)
DEBUG 2022-01-28 15:49:34,251 on stmt: $68load_global.29 = global(np: <module 'numpy' from 'C:\\Users\\zl4821\\Anaconda3\\envs\\GBS\\lib\\site-packages\\numpy\\__init__.py'>)
DEBUG 2022-01-28 15:49:34,251 on stmt: $70load_method.30 = getattr(value=$68load_global.29, attr=array)
DEBUG 2022-01-28 15:49:34,251 on stmt: $74build_list.32 = build_list(items=[Var(batch_max, loop_hafnian_batch.py:24)])
DEBUG 2022-01-28 15:49:34,251 on stmt: $76call_method.33 = call $70load_method.30($74build_list.32, func=$70load_method.30, args=[Var($74build_list.32, loop_hafnian_batch.py:32)], kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:34,251 on stmt: $80build_tuple.35 = build_tuple(items=[Var($76call_method.33, loop_hafnian_batch.py:32), Var(fixed_edge_reps, loop_hafnian_batch.py:24)])
DEBUG 2022-01-28 15:49:34,251 on stmt: edge_reps = call $66load_method.28($80build_tuple.35, func=$66load_method.28, args=[Var($80build_tuple.35, loop_hafnian_batch.py:32)], kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:34,251 on stmt: $86load_global.37 = global(np: <module 'numpy' from 'C:\\Users\\zl4821\\Anaconda3\\envs\\GBS\\lib\\site-packages\\numpy\\__init__.py'>)
DEBUG 2022-01-28 15:49:34,251 on stmt: $88load_method.38 = getattr(value=$86load_global.37, attr=prod)
DEBUG 2022-01-28 15:49:34,259 on stmt: $const92.40 = const(int, 1)
DEBUG 2022-01-28 15:49:34,259 on stmt: $94binary_add.41 = edge_reps + $const92.40
DEBUG 2022-01-28 15:49:34,259 on stmt: steps = call $88load_method.38($94binary_add.41, func=$88load_method.38, args=[Var($94binary_add.41, loop_hafnian_batch.py:33)], kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:34,259 on stmt: $102load_method.44 = getattr(value=edge_reps, attr=max)
DEBUG 2022-01-28 15:49:34,259 on stmt: $104call_method.45 = call $102load_method.44(func=$102load_method.44, args=[], kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:34,259 on stmt: max_binom = $104call_method.45 + odd_cutoff
DEBUG 2022-01-28 15:49:34,259 on stmt: $112load_global.48 = global(precompute_binoms: CPUDispatcher(<function precompute_binoms at 0x00000241074240D0>))
DEBUG 2022-01-28 15:49:34,259 on stmt: binoms = call $112load_global.48(max_binom, func=$112load_global.48, args=[Var(max_binom, loop_hafnian_batch.py:35)], kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:34,259 on stmt: $120load_global.51 = global(np: <module 'numpy' from 'C:\\Users\\zl4821\\Anaconda3\\envs\\GBS\\lib\\site-packages\\numpy\\__init__.py'>)
DEBUG 2022-01-28 15:49:34,259 on stmt: $122load_attr.52 = getattr(value=$120load_global.51, attr=zeros)
DEBUG 2022-01-28 15:49:34,259 on stmt: $const124.53 = const(int, 2)
DEBUG 2022-01-28 15:49:34,259 on stmt: $128binary_multiply.55 = $const124.53 * batch_max
DEBUG 2022-01-28 15:49:34,259 on stmt: $132binary_add.57 = $128binary_multiply.55 + odd_cutoff
DEBUG 2022-01-28 15:49:34,259 on stmt: $const134.58 = const(int, 1)
DEBUG 2022-01-28 15:49:34,259 on stmt: $136binary_add.59 = $132binary_add.57 + $const134.58
DEBUG 2022-01-28 15:49:34,259 on stmt: $138load_global.60 = global(np: <module 'numpy' from 'C:\\Users\\zl4821\\Anaconda3\\envs\\GBS\\lib\\site-packages\\numpy\\__init__.py'>)
DEBUG 2022-01-28 15:49:34,259 on stmt: $140load_attr.61 = getattr(value=$138load_global.60, attr=complex128)
DEBUG 2022-01-28 15:49:34,259 on stmt: H_batch = call $122load_attr.52($136binary_add.59, func=$122load_attr.52, args=[Var($136binary_add.59, loop_hafnian_batch.py:38)], kws=[('dtype', Var($140load_attr.61, loop_hafnian_batch.py:38))], vararg=None, target=None)
DEBUG 2022-01-28 15:49:34,259 on stmt: $148load_global.64 = global(numba: <module 'numba' from 'C:\\Users\\zl4821\\Anaconda3\\envs\\GBS\\lib\\site-packages\\numba\\__init__.py'>)
DEBUG 2022-01-28 15:49:34,259 on stmt: $150load_method.65 = getattr(value=$148load_global.64, attr=prange)
DEBUG 2022-01-28 15:49:34,259 on stmt: $154call_method.67 = call $150load_method.65(steps, func=$150load_method.65, args=[Var(steps, loop_hafnian_batch.py:33)], kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:34,261 on stmt: $156get_iter.68 = getiter(value=$154call_method.67)
DEBUG 2022-01-28 15:49:34,261 on stmt: $phi158.0 = $156get_iter.68
DEBUG 2022-01-28 15:49:34,261 on stmt: jump 158
DEBUG 2022-01-28 15:49:34,261 ==== SSA block rewrite pass on 158
DEBUG 2022-01-28 15:49:34,261 Running <numba.core.ssa._FixSSAVars object at 0x000002410C41BCD0>
DEBUG 2022-01-28 15:49:34,261 on stmt: H_batch.2 = phi(incoming_values=[Var(H_batch, loop_hafnian_batch.py:38), Var(H_batch.1, loop_hafnian_batch.py:75)], incoming_blocks=[0, 510])
DEBUG 2022-01-28 15:49:34,261 on stmt: $158for_iter.1 = iternext(value=$phi158.0)
DEBUG 2022-01-28 15:49:34,261 on stmt: $158for_iter.2 = pair_first(value=$158for_iter.1)
DEBUG 2022-01-28 15:49:34,261 on stmt: $158for_iter.3 = pair_second(value=$158for_iter.1)
DEBUG 2022-01-28 15:49:34,261 on stmt: $phi162.1 = $158for_iter.2
DEBUG 2022-01-28 15:49:34,261 on stmt: branch $158for_iter.3, 162, 520
DEBUG 2022-01-28 15:49:34,261 ==== SSA block rewrite pass on 162
DEBUG 2022-01-28 15:49:34,261 Running <numba.core.ssa._FixSSAVars object at 0x000002410C41BCD0>
DEBUG 2022-01-28 15:49:34,261 on stmt: j = $phi162.1
DEBUG 2022-01-28 15:49:34,261 on stmt: $164load_global.2 = global(np: <module 'numpy' from 'C:\\Users\\zl4821\\Anaconda3\\envs\\GBS\\lib\\site-packages\\numpy\\__init__.py'>)
DEBUG 2022-01-28 15:49:34,261 on stmt: $166load_attr.3 = getattr(value=$164load_global.2, attr=zeros)
DEBUG 2022-01-28 15:49:34,261 on stmt: $const168.4 = const(int, 2)
DEBUG 2022-01-28 15:49:34,261 on stmt: $172binary_multiply.6 = $const168.4 * batch_max
DEBUG 2022-01-28 15:49:34,261 on stmt: $176binary_add.8 = $172binary_multiply.6 + odd_cutoff
DEBUG 2022-01-28 15:49:34,261 on stmt: $const178.9 = const(int, 1)
DEBUG 2022-01-28 15:49:34,261 on stmt: $180binary_add.10 = $176binary_add.8 + $const178.9
DEBUG 2022-01-28 15:49:34,261 on stmt: $182load_global.11 = global(np: <module 'numpy' from 'C:\\Users\\zl4821\\Anaconda3\\envs\\GBS\\lib\\site-packages\\numpy\\__init__.py'>)
DEBUG 2022-01-28 15:49:34,261 on stmt: $184load_attr.12 = getattr(value=$182load_global.11, attr=complex128)
DEBUG 2022-01-28 15:49:34,261 on stmt: Hnew = call $166load_attr.3($180binary_add.10, func=$166load_attr.3, args=[Var($180binary_add.10, loop_hafnian_batch.py:41)], kws=[('dtype', Var($184load_attr.12, loop_hafnian_batch.py:41))], vararg=None, target=None)
DEBUG 2022-01-28 15:49:34,261 on stmt: $192load_global.15 = global(find_kept_edges: CPUDispatcher(<function find_kept_edges at 0x0000024107424550>))
DEBUG 2022-01-28 15:49:34,261 on stmt: kept_edges = call $192load_global.15(j, edge_reps, func=$192load_global.15, args=[Var(j, loop_hafnian_batch.py:39), Var(edge_reps, loop_hafnian_batch.py:32)], kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:34,261 on stmt: $204load_method.20 = getattr(value=kept_edges, attr=sum)
DEBUG 2022-01-28 15:49:34,261 on stmt: edges_sum = call $204load_method.20(func=$204load_method.20, args=[], kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:34,261 on stmt: binom_prod = const(float, 1.0)
DEBUG 2022-01-28 15:49:34,261 on stmt: $214load_global.23 = global(range: <class 'range'>)
DEBUG 2022-01-28 15:49:34,261 on stmt: $const216.24 = const(int, 1)
DEBUG 2022-01-28 15:49:34,261 on stmt: $const220.26 = const(int, 2)
DEBUG 2022-01-28 15:49:34,261 on stmt: $222binary_floor_divide.27 = n // $const220.26
DEBUG 2022-01-28 15:49:34,261 on stmt: $224call_function.28 = call $214load_global.23($const216.24, $222binary_floor_divide.27, func=$214load_global.23, args=[Var($const216.24, loop_hafnian_batch.py:47), Var($222binary_floor_divide.27, loop_hafnian_batch.py:47)], kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:34,261 on stmt: $226get_iter.29 = getiter(value=$224call_function.28)
DEBUG 2022-01-28 15:49:34,261 on stmt: $phi228.1 = $226get_iter.29
DEBUG 2022-01-28 15:49:34,261 on stmt: jump 228
DEBUG 2022-01-28 15:49:34,261 ==== SSA block rewrite pass on 228
DEBUG 2022-01-28 15:49:34,261 Running <numba.core.ssa._FixSSAVars object at 0x000002410C41BCD0>
DEBUG 2022-01-28 15:49:34,261 on stmt: binom_prod.2 = phi(incoming_values=[Var(binom_prod, loop_hafnian_batch.py:46), Var(binom_prod.1, loop_hafnian_batch.py:48)], incoming_blocks=[162, 230])
DEBUG 2022-01-28 15:49:34,261 on stmt: $228for_iter.2 = iternext(value=$phi228.1)
DEBUG 2022-01-28 15:49:34,261 on stmt: $228for_iter.3 = pair_first(value=$228for_iter.2)
DEBUG 2022-01-28 15:49:34,261 on stmt: $228for_iter.4 = pair_second(value=$228for_iter.2)
DEBUG 2022-01-28 15:49:34,261 on stmt: $phi230.2 = $228for_iter.3
DEBUG 2022-01-28 15:49:34,261 on stmt: branch $228for_iter.4, 230, 258
DEBUG 2022-01-28 15:49:34,261 ==== SSA block rewrite pass on 230
DEBUG 2022-01-28 15:49:34,261 Running <numba.core.ssa._FixSSAVars object at 0x000002410C41BCD0>
DEBUG 2022-01-28 15:49:34,261 on stmt: i = $phi230.2
DEBUG 2022-01-28 15:49:34,261 on stmt: $240binary_subscr.7 = getitem(value=edge_reps, index=i, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:34,261 on stmt: $246binary_subscr.10 = getitem(value=kept_edges, index=i, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:34,261 on stmt: $248build_tuple.11 = build_tuple(items=[Var($240binary_subscr.7, loop_hafnian_batch.py:48), Var($246binary_subscr.10, loop_hafnian_batch.py:48)])
DEBUG 2022-01-28 15:49:34,261 on stmt: $250binary_subscr.12 = getitem(value=binoms, index=$248build_tuple.11, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:34,261 on stmt: $252inplace_multiply.13 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=binom_prod.2, rhs=$250binary_subscr.12, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-01-28 15:49:34,261 on stmt: binom_prod.1 = $252inplace_multiply.13
DEBUG 2022-01-28 15:49:34,261 on stmt: jump 228
DEBUG 2022-01-28 15:49:34,261 ==== SSA block rewrite pass on 258
DEBUG 2022-01-28 15:49:34,261 Running <numba.core.ssa._FixSSAVars object at 0x000002410C41BCD0>
DEBUG 2022-01-28 15:49:34,261 on stmt: bool260 = global(bool: <class 'bool'>)
DEBUG 2022-01-28 15:49:34,261 on stmt: $260pred = call bool260(glynn, func=bool260, args=(Var(glynn, loop_hafnian_batch.py:24),), kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:34,261 on stmt: branch $260pred, 264, 278
DEBUG 2022-01-28 15:49:34,261 ==== SSA block rewrite pass on 264
DEBUG 2022-01-28 15:49:34,261 Running <numba.core.ssa._FixSSAVars object at 0x000002410C41BCD0>
DEBUG 2022-01-28 15:49:34,261 on stmt: $const264.1 = const(int, 2)
DEBUG 2022-01-28 15:49:34,261 on stmt: $268binary_multiply.3 = $const264.1 * kept_edges
DEBUG 2022-01-28 15:49:34,261 on stmt: delta = $268binary_multiply.3 - edge_reps
DEBUG 2022-01-28 15:49:34,261 on stmt: jump 282
DEBUG 2022-01-28 15:49:34,261 ==== SSA block rewrite pass on 278
DEBUG 2022-01-28 15:49:34,261 Running <numba.core.ssa._FixSSAVars object at 0x000002410C41BCD0>
DEBUG 2022-01-28 15:49:34,261 on stmt: delta.1 = kept_edges
DEBUG 2022-01-28 15:49:34,261 on stmt: jump 282
DEBUG 2022-01-28 15:49:34,261 ==== SSA block rewrite pass on 282
DEBUG 2022-01-28 15:49:34,261 Running <numba.core.ssa._FixSSAVars object at 0x000002410C41BCD0>
DEBUG 2022-01-28 15:49:34,261 on stmt: $282load_global.1 = global(get_submatrices: CPUDispatcher(<function get_submatrices at 0x0000024107424E50>))
DEBUG 2022-01-28 15:49:34,261 on stmt: $292call_function.6 = call $282load_global.1(delta, A, D, oddV, func=$282load_global.1, args=[Var(delta, loop_hafnian_batch.py:51), Var(A, loop_hafnian_batch.py:24), Var(D, loop_hafnian_batch.py:24), Var(oddV, loop_hafnian_batch.py:25)], kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:34,261 find_def var='delta' stmt=$292call_function.6 = call $282load_global.1(delta, A, D, oddV, func=$282load_global.1, args=[Var(delta, loop_hafnian_batch.py:51), Var(A, loop_hafnian_batch.py:24), Var(D, loop_hafnian_batch.py:24), Var(oddV, loop_hafnian_batch.py:25)], kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:34,261 find_def_from_top label 282
DEBUG 2022-01-28 15:49:34,261 insert phi node delta.2 = phi(incoming_values=[], incoming_blocks=[]) at 282
DEBUG 2022-01-28 15:49:34,261 find_def_from_bottom label 264
DEBUG 2022-01-28 15:49:34,261 incoming_def delta = $268binary_multiply.3 - edge_reps
DEBUG 2022-01-28 15:49:34,261 find_def_from_bottom label 278
DEBUG 2022-01-28 15:49:34,261 incoming_def delta.1 = kept_edges
DEBUG 2022-01-28 15:49:34,261 replaced with: $292call_function.6 = call $282load_global.1(delta.2, A, D, oddV, func=$282load_global.1, args=[Var(delta.2, loop_hafnian_batch.py:55), Var(A, loop_hafnian_batch.py:24), Var(D, loop_hafnian_batch.py:24), Var(oddV, loop_hafnian_batch.py:25)], kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:34,261 on stmt: $294unpack_sequence.11 = exhaust_iter(value=$292call_function.6, count=4)
DEBUG 2022-01-28 15:49:34,261 on stmt: $294unpack_sequence.7 = static_getitem(value=$294unpack_sequence.11, index=0, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:34,261 on stmt: $294unpack_sequence.8 = static_getitem(value=$294unpack_sequence.11, index=1, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:34,261 on stmt: $294unpack_sequence.9 = static_getitem(value=$294unpack_sequence.11, index=2, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:34,261 on stmt: $294unpack_sequence.10 = static_getitem(value=$294unpack_sequence.11, index=3, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:34,261 on stmt: AX_S = $294unpack_sequence.7
DEBUG 2022-01-28 15:49:34,261 on stmt: XD_S = $294unpack_sequence.8
DEBUG 2022-01-28 15:49:34,261 on stmt: D_S = $294unpack_sequence.9
DEBUG 2022-01-28 15:49:34,261 on stmt: oddVX_S = $294unpack_sequence.10
DEBUG 2022-01-28 15:49:34,261 on stmt: $304load_global.12 = global(eigvals: CPUDispatcher(<function eigvals at 0x00000241074303A0>))
DEBUG 2022-01-28 15:49:34,261 on stmt: E = call $304load_global.12(AX_S, func=$304load_global.12, args=[Var(AX_S, loop_hafnian_batch.py:55)], kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:34,261 on stmt: $312load_global.15 = global(f_loop: CPUDispatcher(<function f_loop at 0x00000241074248B0>))
DEBUG 2022-01-28 15:49:34,261 on stmt: f_even = call $312load_global.15(E, AX_S, XD_S, D_S, N_max, func=$312load_global.15, args=[Var(E, loop_hafnian_batch.py:57), Var(AX_S, loop_hafnian_batch.py:55), Var(XD_S, loop_hafnian_batch.py:55), Var(D_S, loop_hafnian_batch.py:55), Var(N_max, loop_hafnian_batch.py:30)], kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:34,269 on stmt: $328load_global.22 = global(f_loop_odd: CPUDispatcher(<function f_loop_odd at 0x0000024107424AF0>))
DEBUG 2022-01-28 15:49:34,269 on stmt: f_odd = call $328load_global.22(E, AX_S, XD_S, D_S, N_max, oddloop, oddVX_S, func=$328load_global.22, args=[Var(E, loop_hafnian_batch.py:57), Var(AX_S, loop_hafnian_batch.py:55), Var(XD_S, loop_hafnian_batch.py:55), Var(D_S, loop_hafnian_batch.py:55), Var(N_max, loop_hafnian_batch.py:30), Var(oddloop, loop_hafnian_batch.py:24), Var(oddVX_S, loop_hafnian_batch.py:55)], kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:34,269 on stmt: $348load_global.31 = global(range: <class 'range'>)
DEBUG 2022-01-28 15:49:34,269 on stmt: $const350.32 = const(int, 2)
DEBUG 2022-01-28 15:49:34,269 on stmt: $const354.34 = const(int, 0)
DEBUG 2022-01-28 15:49:34,269 on stmt: $356binary_subscr.35 = static_getitem(value=kept_edges, index=0, index_var=$const354.34, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:34,269 on stmt: $358binary_multiply.36 = $const350.32 * $356binary_subscr.35
DEBUG 2022-01-28 15:49:34,269 on stmt: $const360.37 = const(int, 2)
DEBUG 2022-01-28 15:49:34,269 on stmt: $364binary_multiply.39 = $const360.37 * batch_max
DEBUG 2022-01-28 15:49:34,269 on stmt: $368binary_add.41 = $364binary_multiply.39 + odd_cutoff
DEBUG 2022-01-28 15:49:34,269 on stmt: $const370.42 = const(int, 1)
DEBUG 2022-01-28 15:49:34,269 on stmt: $372binary_add.43 = $368binary_add.41 + $const370.42
DEBUG 2022-01-28 15:49:34,269 on stmt: $374call_function.44 = call $348load_global.31($358binary_multiply.36, $372binary_add.43, func=$348load_global.31, args=[Var($358binary_multiply.36, loop_hafnian_batch.py:64), Var($372binary_add.43, loop_hafnian_batch.py:64)], kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:34,269 on stmt: $376get_iter.45 = getiter(value=$374call_function.44)
DEBUG 2022-01-28 15:49:34,269 on stmt: $phi378.1 = $376get_iter.45
DEBUG 2022-01-28 15:49:34,269 on stmt: jump 378
DEBUG 2022-01-28 15:49:34,269 ==== SSA block rewrite pass on 378
DEBUG 2022-01-28 15:49:34,269 Running <numba.core.ssa._FixSSAVars object at 0x000002410C41BCD0>
DEBUG 2022-01-28 15:49:34,269 on stmt: $378for_iter.2 = iternext(value=$phi378.1)
DEBUG 2022-01-28 15:49:34,269 on stmt: $378for_iter.3 = pair_first(value=$378for_iter.2)
DEBUG 2022-01-28 15:49:34,269 on stmt: $378for_iter.4 = pair_second(value=$378for_iter.2)
DEBUG 2022-01-28 15:49:34,271 on stmt: $phi380.2 = $378for_iter.3
DEBUG 2022-01-28 15:49:34,271 on stmt: branch $378for_iter.4, 380, 510
DEBUG 2022-01-28 15:49:34,271 ==== SSA block rewrite pass on 380
DEBUG 2022-01-28 15:49:34,271 Running <numba.core.ssa._FixSSAVars object at 0x000002410C41BCD0>
DEBUG 2022-01-28 15:49:34,271 on stmt: N_det = $phi380.2
DEBUG 2022-01-28 15:49:34,271 on stmt: N = N_fixed + N_det
DEBUG 2022-01-28 15:49:34,271 on stmt: $const390.6 = const(float, -1.0)
DEBUG 2022-01-28 15:49:34,271 on stmt: $const394.8 = const(int, 2)
DEBUG 2022-01-28 15:49:34,271 on stmt: $396binary_floor_divide.9 = N // $const394.8
DEBUG 2022-01-28 15:49:34,271 on stmt: $400binary_subtract.11 = $396binary_floor_divide.9 - edges_sum
DEBUG 2022-01-28 15:49:34,271 on stmt: plus_minus = $const390.6 ** $400binary_subtract.11
DEBUG 2022-01-28 15:49:34,271 on stmt: $const410.15 = const(int, 2)
DEBUG 2022-01-28 15:49:34,271 on stmt: $412binary_floor_divide.16 = N_det // $const410.15
DEBUG 2022-01-28 15:49:34,271 on stmt: $const416.18 = const(int, 0)
DEBUG 2022-01-28 15:49:34,271 on stmt: $418binary_subscr.19 = static_getitem(value=kept_edges, index=0, index_var=$const416.18, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:34,271 on stmt: $420build_tuple.20 = build_tuple(items=[Var($412binary_floor_divide.16, loop_hafnian_batch.py:68), Var($418binary_subscr.19, loop_hafnian_batch.py:68)])
DEBUG 2022-01-28 15:49:34,271 on stmt: $422binary_subscr.21 = getitem(value=binoms, index=$420build_tuple.20, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:34,271 on stmt: n_det_binom_prod = $422binary_subscr.21 * binom_prod.2
DEBUG 2022-01-28 15:49:34,271 on stmt: $const432.25 = const(int, 2)
DEBUG 2022-01-28 15:49:34,271 on stmt: $434binary_modulo.26 = N_det % $const432.25
DEBUG 2022-01-28 15:49:34,271 on stmt: $const436.27 = const(int, 0)
DEBUG 2022-01-28 15:49:34,271 on stmt: $438compare_op.28 = $434binary_modulo.26 == $const436.27
DEBUG 2022-01-28 15:49:34,271 on stmt: bool440 = global(bool: <class 'bool'>)
DEBUG 2022-01-28 15:49:34,271 on stmt: $440pred = call bool440($438compare_op.28, func=bool440, args=(Var($438compare_op.28, loop_hafnian_batch.py:70),), kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:34,271 on stmt: branch $440pred, 444, 478
DEBUG 2022-01-28 15:49:34,271 ==== SSA block rewrite pass on 444
DEBUG 2022-01-28 15:49:34,271 Running <numba.core.ssa._FixSSAVars object at 0x000002410C41BCD0>
DEBUG 2022-01-28 15:49:34,271 on stmt: $450binary_subscr.6 = getitem(value=Hnew, index=N_det, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:34,271 on stmt: $456binary_multiply.9 = n_det_binom_prod * plus_minus
DEBUG 2022-01-28 15:49:34,271 on stmt: $const462.12 = const(int, 2)
DEBUG 2022-01-28 15:49:34,271 on stmt: $464binary_floor_divide.13 = N // $const462.12
DEBUG 2022-01-28 15:49:34,271 on stmt: $466binary_subscr.14 = getitem(value=f_even, index=$464binary_floor_divide.13, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:34,271 on stmt: $468binary_multiply.15 = $456binary_multiply.9 * $466binary_subscr.14
DEBUG 2022-01-28 15:49:34,271 on stmt: $470inplace_add.16 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$450binary_subscr.6, rhs=$468binary_multiply.15, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-01-28 15:49:34,271 on stmt: Hnew[N_det] = $470inplace_add.16
DEBUG 2022-01-28 15:49:34,271 on stmt: jump 506
DEBUG 2022-01-28 15:49:34,271 ==== SSA block rewrite pass on 478
DEBUG 2022-01-28 15:49:34,271 Running <numba.core.ssa._FixSSAVars object at 0x000002410C41BCD0>
DEBUG 2022-01-28 15:49:34,271 on stmt: $484binary_subscr.6 = getitem(value=Hnew, index=N_det, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:34,271 on stmt: $490binary_multiply.9 = n_det_binom_prod * plus_minus
DEBUG 2022-01-28 15:49:34,271 on stmt: $496binary_subscr.12 = getitem(value=f_odd, index=N, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:34,271 on stmt: $498binary_multiply.13 = $490binary_multiply.9 * $496binary_subscr.12
DEBUG 2022-01-28 15:49:34,271 on stmt: $500inplace_add.14 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$484binary_subscr.6, rhs=$498binary_multiply.13, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-01-28 15:49:34,271 on stmt: Hnew[N_det] = $500inplace_add.14
DEBUG 2022-01-28 15:49:34,271 on stmt: jump 506
DEBUG 2022-01-28 15:49:34,271 ==== SSA block rewrite pass on 506
DEBUG 2022-01-28 15:49:34,271 Running <numba.core.ssa._FixSSAVars object at 0x000002410C41BCD0>
DEBUG 2022-01-28 15:49:34,271 on stmt: jump 378
DEBUG 2022-01-28 15:49:34,271 ==== SSA block rewrite pass on 510
DEBUG 2022-01-28 15:49:34,271 Running <numba.core.ssa._FixSSAVars object at 0x000002410C41BCD0>
DEBUG 2022-01-28 15:49:34,271 on stmt: $514inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=H_batch.2, rhs=Hnew, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-01-28 15:49:34,271 on stmt: H_batch.1 = $514inplace_add.3
DEBUG 2022-01-28 15:49:34,271 on stmt: jump 158
DEBUG 2022-01-28 15:49:34,271 ==== SSA block rewrite pass on 520
DEBUG 2022-01-28 15:49:34,271 Running <numba.core.ssa._FixSSAVars object at 0x000002410C41BCD0>
DEBUG 2022-01-28 15:49:34,271 on stmt: bool522 = global(bool: <class 'bool'>)
DEBUG 2022-01-28 15:49:34,271 on stmt: $522pred = call bool522(glynn, func=bool522, args=(Var(glynn, loop_hafnian_batch.py:24),), kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:34,271 on stmt: branch $522pred, 526, 580
DEBUG 2022-01-28 15:49:34,271 ==== SSA block rewrite pass on 526
DEBUG 2022-01-28 15:49:34,271 Running <numba.core.ssa._FixSSAVars object at 0x000002410C41BCD0>
DEBUG 2022-01-28 15:49:34,271 on stmt: $526load_global.0 = global(range: <class 'range'>)
DEBUG 2022-01-28 15:49:34,271 on stmt: $530load_attr.2 = getattr(value=H_batch.2, attr=shape)
DEBUG 2022-01-28 15:49:34,271 on stmt: $const532.3 = const(int, 0)
DEBUG 2022-01-28 15:49:34,271 on stmt: $534binary_subscr.4 = static_getitem(value=$530load_attr.2, index=0, index_var=$const532.3, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:34,271 on stmt: $536call_function.5 = call $526load_global.0($534binary_subscr.4, func=$526load_global.0, args=[Var($534binary_subscr.4, loop_hafnian_batch.py:78)], kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:34,271 on stmt: $538get_iter.6 = getiter(value=$536call_function.5)
DEBUG 2022-01-28 15:49:34,271 on stmt: $phi540.0 = $538get_iter.6
DEBUG 2022-01-28 15:49:34,271 on stmt: jump 540
DEBUG 2022-01-28 15:49:34,271 ==== SSA block rewrite pass on 540
DEBUG 2022-01-28 15:49:34,271 Running <numba.core.ssa._FixSSAVars object at 0x000002410C41BCD0>
DEBUG 2022-01-28 15:49:34,271 on stmt: $540for_iter.1 = iternext(value=$phi540.0)
DEBUG 2022-01-28 15:49:34,271 on stmt: $540for_iter.2 = pair_first(value=$540for_iter.1)
DEBUG 2022-01-28 15:49:34,271 on stmt: $540for_iter.3 = pair_second(value=$540for_iter.1)
DEBUG 2022-01-28 15:49:34,271 on stmt: $phi542.1 = $540for_iter.2
DEBUG 2022-01-28 15:49:34,271 on stmt: branch $540for_iter.3, 542, 580
DEBUG 2022-01-28 15:49:34,271 ==== SSA block rewrite pass on 542
DEBUG 2022-01-28 15:49:34,271 Running <numba.core.ssa._FixSSAVars object at 0x000002410C41BCD0>
DEBUG 2022-01-28 15:49:34,271 on stmt: j.1 = $phi542.1
DEBUG 2022-01-28 15:49:34,271 on stmt: x = N_fixed + j.1
DEBUG 2022-01-28 15:49:34,271 on stmt: $558binary_subscr.9 = getitem(value=H_batch.2, index=j.1, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:34,271 on stmt: $const560.10 = const(float, 0.5)
DEBUG 2022-01-28 15:49:34,271 on stmt: $const564.12 = const(int, 2)
DEBUG 2022-01-28 15:49:34,271 on stmt: $566binary_floor_divide.13 = x // $const564.12
DEBUG 2022-01-28 15:49:34,271 on stmt: $568binary_power.14 = $const560.10 ** $566binary_floor_divide.13
DEBUG 2022-01-28 15:49:34,271 on stmt: $570inplace_multiply.15 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=$558binary_subscr.9, rhs=$568binary_power.14, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-01-28 15:49:34,271 on stmt: H_batch.2[j.1] = $570inplace_multiply.15
DEBUG 2022-01-28 15:49:34,271 on stmt: jump 540
DEBUG 2022-01-28 15:49:34,271 ==== SSA block rewrite pass on 580
DEBUG 2022-01-28 15:49:34,271 Running <numba.core.ssa._FixSSAVars object at 0x000002410C41BCD0>
DEBUG 2022-01-28 15:49:34,271 on stmt: $582return_value.1 = cast(value=H_batch.2)
DEBUG 2022-01-28 15:49:34,271 on stmt: return $582return_value.1
DEBUG 2022-01-28 15:49:34,289 bytecode dump:
>          0	NOP(arg=None, lineno=3)
           2	LOAD_GLOBAL(arg=0, lineno=3)
           4	LOAD_FAST(arg=0, lineno=3)
           6	CALL_FUNCTION(arg=1, lineno=3)
           8	RETURN_VALUE(arg=None, lineno=3)
DEBUG 2022-01-28 15:49:34,291 pending: deque([State(pc_initial=0 nstack_initial=0)])
DEBUG 2022-01-28 15:49:34,291 stack: []
DEBUG 2022-01-28 15:49:34,291 dispatch pc=0, inst=NOP(arg=None, lineno=3)
DEBUG 2022-01-28 15:49:34,291 stack []
DEBUG 2022-01-28 15:49:34,291 dispatch pc=2, inst=LOAD_GLOBAL(arg=0, lineno=3)
DEBUG 2022-01-28 15:49:34,291 stack []
DEBUG 2022-01-28 15:49:34,291 dispatch pc=4, inst=LOAD_FAST(arg=0, lineno=3)
DEBUG 2022-01-28 15:49:34,291 stack ['$2load_global.0']
DEBUG 2022-01-28 15:49:34,291 dispatch pc=6, inst=CALL_FUNCTION(arg=1, lineno=3)
DEBUG 2022-01-28 15:49:34,291 stack ['$2load_global.0', '$tmp04.1']
DEBUG 2022-01-28 15:49:34,291 dispatch pc=8, inst=RETURN_VALUE(arg=None, lineno=3)
DEBUG 2022-01-28 15:49:34,291 stack ['$6call_function.2']
DEBUG 2022-01-28 15:49:34,291 end state. edges=[]
DEBUG 2022-01-28 15:49:34,291 -------------------------Prune PHIs-------------------------
DEBUG 2022-01-28 15:49:34,291 Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
DEBUG 2022-01-28 15:49:34,291 defmap: {}
DEBUG 2022-01-28 15:49:34,291 phismap: defaultdict(<class 'set'>, {})
DEBUG 2022-01-28 15:49:34,291 changing phismap: defaultdict(<class 'set'>, {})
DEBUG 2022-01-28 15:49:34,291 keep phismap: {}
DEBUG 2022-01-28 15:49:34,291 new_out: defaultdict(<class 'dict'>, {})
DEBUG 2022-01-28 15:49:34,291 ----------------------DONE Prune PHIs-----------------------
DEBUG 2022-01-28 15:49:34,291 block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$2load_global.0'}), (4, {'res': '$tmp04.1'}), (6, {'func': '$2load_global.0', 'args': ['$tmp04.1'], 'res': '$6call_function.2'}), (8, {'retval': '$6call_function.2', 'castval': '$8return_value.3'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG 2022-01-28 15:49:34,291 label 0:
    tmp0 = arg(0, name=tmp0)                 ['tmp0']
    $2load_global.0 = global(intrin: <intrinsic stub>) ['$2load_global.0']
    $6call_function.2 = call $2load_global.0(tmp0, func=$2load_global.0, args=[Var(tmp0, <string>:3)], kws=(), vararg=None, target=None) ['$2load_global.0', '$6call_function.2', 'tmp0']
    $8return_value.3 = cast(value=$6call_function.2) ['$6call_function.2', '$8return_value.3']
    return $8return_value.3                  ['$8return_value.3']

DEBUG 2022-01-28 15:49:34,291 ==== SSA block analysis pass on 0
DEBUG 2022-01-28 15:49:34,291 Running <numba.core.ssa._GatherDefsHandler object at 0x000002410E180A90>
DEBUG 2022-01-28 15:49:34,291 on stmt: tmp0 = arg(0, name=tmp0)
DEBUG 2022-01-28 15:49:34,291 on stmt: $2load_global.0 = global(intrin: <intrinsic stub>)
DEBUG 2022-01-28 15:49:34,291 on stmt: $6call_function.2 = call $2load_global.0(tmp0, func=$2load_global.0, args=[Var(tmp0, <string>:3)], kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:34,291 on stmt: $8return_value.3 = cast(value=$6call_function.2)
DEBUG 2022-01-28 15:49:34,291 on stmt: return $8return_value.3
DEBUG 2022-01-28 15:49:34,291 defs defaultdict(<class 'list'>,
            {'$2load_global.0': [<numba.core.ir.Assign object at 0x000002410E184070>],
             '$6call_function.2': [<numba.core.ir.Assign object at 0x000002410E1847F0>],
             '$8return_value.3': [<numba.core.ir.Assign object at 0x000002410E184910>],
             'tmp0': [<numba.core.ir.Assign object at 0x000002410E1806D0>]})
DEBUG 2022-01-28 15:49:34,291 SSA violators set()
DEBUG 2022-01-28 15:49:34,474 bytecode dump:
>          0	NOP(arg=None, lineno=254)
           2	LOAD_GLOBAL(arg=0, lineno=254)
           4	LOAD_ATTR(arg=1, lineno=254)
           6	LOAD_ATTR(arg=2, lineno=254)
           8	LOAD_METHOD(arg=3, lineno=254)
          10	CALL_METHOD(arg=0, lineno=254)
          12	POP_TOP(arg=None, lineno=254)
          14	LOAD_DEREF(arg=0, lineno=255)
          16	STORE_FAST(arg=1, lineno=255)
          18	LOAD_GLOBAL(arg=0, lineno=256)
          20	LOAD_ATTR(arg=1, lineno=256)
          22	LOAD_ATTR(arg=2, lineno=256)
          24	LOAD_METHOD(arg=4, lineno=256)
          26	LOAD_GLOBAL(arg=5, lineno=256)
          28	LOAD_FAST(arg=0, lineno=256)
          30	CALL_FUNCTION(arg=1, lineno=256)
          32	CALL_METHOD(arg=1, lineno=256)
          34	GET_ITER(arg=None, lineno=256)
>         36	FOR_ITER(arg=16, lineno=256)
          38	STORE_FAST(arg=2, lineno=256)
          40	LOAD_FAST(arg=1, lineno=257)
          42	LOAD_FAST(arg=0, lineno=257)
          44	LOAD_FAST(arg=2, lineno=257)
          46	BINARY_SUBSCR(arg=None, lineno=257)
          48	INPLACE_ADD(arg=None, lineno=257)
          50	STORE_FAST(arg=1, lineno=257)
          52	JUMP_ABSOLUTE(arg=36, lineno=257)
>         54	LOAD_FAST(arg=1, lineno=258)
          56	RETURN_VALUE(arg=None, lineno=258)
DEBUG 2022-01-28 15:49:34,474 pending: deque([State(pc_initial=0 nstack_initial=0)])
DEBUG 2022-01-28 15:49:34,474 stack: []
DEBUG 2022-01-28 15:49:34,474 dispatch pc=0, inst=NOP(arg=None, lineno=254)
DEBUG 2022-01-28 15:49:34,474 stack []
DEBUG 2022-01-28 15:49:34,474 dispatch pc=2, inst=LOAD_GLOBAL(arg=0, lineno=254)
DEBUG 2022-01-28 15:49:34,474 stack []
DEBUG 2022-01-28 15:49:34,474 dispatch pc=4, inst=LOAD_ATTR(arg=1, lineno=254)
DEBUG 2022-01-28 15:49:34,474 stack ['$2load_global.0']
DEBUG 2022-01-28 15:49:34,474 dispatch pc=6, inst=LOAD_ATTR(arg=2, lineno=254)
DEBUG 2022-01-28 15:49:34,474 stack ['$4load_attr.1']
DEBUG 2022-01-28 15:49:34,474 dispatch pc=8, inst=LOAD_METHOD(arg=3, lineno=254)
DEBUG 2022-01-28 15:49:34,474 stack ['$6load_attr.2']
DEBUG 2022-01-28 15:49:34,474 dispatch pc=10, inst=CALL_METHOD(arg=0, lineno=254)
DEBUG 2022-01-28 15:49:34,474 stack ['$8load_method.3']
DEBUG 2022-01-28 15:49:34,474 dispatch pc=12, inst=POP_TOP(arg=None, lineno=254)
DEBUG 2022-01-28 15:49:34,474 stack ['$10call_method.4']
DEBUG 2022-01-28 15:49:34,474 dispatch pc=14, inst=LOAD_DEREF(arg=0, lineno=255)
DEBUG 2022-01-28 15:49:34,474 stack []
DEBUG 2022-01-28 15:49:34,474 dispatch pc=16, inst=STORE_FAST(arg=1, lineno=255)
DEBUG 2022-01-28 15:49:34,474 stack ['$14load_deref.5']
DEBUG 2022-01-28 15:49:34,474 dispatch pc=18, inst=LOAD_GLOBAL(arg=0, lineno=256)
DEBUG 2022-01-28 15:49:34,474 stack []
DEBUG 2022-01-28 15:49:34,474 dispatch pc=20, inst=LOAD_ATTR(arg=1, lineno=256)
DEBUG 2022-01-28 15:49:34,474 stack ['$18load_global.6']
DEBUG 2022-01-28 15:49:34,474 dispatch pc=22, inst=LOAD_ATTR(arg=2, lineno=256)
DEBUG 2022-01-28 15:49:34,474 stack ['$20load_attr.7']
DEBUG 2022-01-28 15:49:34,474 dispatch pc=24, inst=LOAD_METHOD(arg=4, lineno=256)
DEBUG 2022-01-28 15:49:34,474 stack ['$22load_attr.8']
DEBUG 2022-01-28 15:49:34,474 dispatch pc=26, inst=LOAD_GLOBAL(arg=5, lineno=256)
DEBUG 2022-01-28 15:49:34,474 stack ['$24load_method.9']
DEBUG 2022-01-28 15:49:34,474 dispatch pc=28, inst=LOAD_FAST(arg=0, lineno=256)
DEBUG 2022-01-28 15:49:34,474 stack ['$24load_method.9', '$26load_global.10']
DEBUG 2022-01-28 15:49:34,474 dispatch pc=30, inst=CALL_FUNCTION(arg=1, lineno=256)
DEBUG 2022-01-28 15:49:34,474 stack ['$24load_method.9', '$26load_global.10', '$in_arr28.11']
DEBUG 2022-01-28 15:49:34,474 dispatch pc=32, inst=CALL_METHOD(arg=1, lineno=256)
DEBUG 2022-01-28 15:49:34,474 stack ['$24load_method.9', '$30call_function.12']
DEBUG 2022-01-28 15:49:34,474 dispatch pc=34, inst=GET_ITER(arg=None, lineno=256)
DEBUG 2022-01-28 15:49:34,474 stack ['$32call_method.13']
DEBUG 2022-01-28 15:49:34,474 end state. edges=[Edge(pc=36, stack=('$34get_iter.14',), blockstack=(), npush=0)]
DEBUG 2022-01-28 15:49:34,474 pending: deque([State(pc_initial=36 nstack_initial=1)])
DEBUG 2022-01-28 15:49:34,474 stack: ['$phi36.0']
DEBUG 2022-01-28 15:49:34,474 dispatch pc=36, inst=FOR_ITER(arg=16, lineno=256)
DEBUG 2022-01-28 15:49:34,474 stack ['$phi36.0']
DEBUG 2022-01-28 15:49:34,474 end state. edges=[Edge(pc=54, stack=(), blockstack=(), npush=0), Edge(pc=38, stack=('$phi36.0', '$36for_iter.2'), blockstack=(), npush=0)]
DEBUG 2022-01-28 15:49:34,474 pending: deque([State(pc_initial=54 nstack_initial=0), State(pc_initial=38 nstack_initial=2)])
DEBUG 2022-01-28 15:49:34,474 stack: []
DEBUG 2022-01-28 15:49:34,474 dispatch pc=54, inst=LOAD_FAST(arg=1, lineno=258)
DEBUG 2022-01-28 15:49:34,474 stack []
DEBUG 2022-01-28 15:49:34,474 dispatch pc=56, inst=RETURN_VALUE(arg=None, lineno=258)
DEBUG 2022-01-28 15:49:34,474 stack ['$val54.0']
DEBUG 2022-01-28 15:49:34,474 end state. edges=[]
DEBUG 2022-01-28 15:49:34,474 pending: deque([State(pc_initial=38 nstack_initial=2)])
DEBUG 2022-01-28 15:49:34,474 stack: ['$phi38.0', '$phi38.1']
DEBUG 2022-01-28 15:49:34,474 dispatch pc=38, inst=STORE_FAST(arg=2, lineno=256)
DEBUG 2022-01-28 15:49:34,474 stack ['$phi38.0', '$phi38.1']
DEBUG 2022-01-28 15:49:34,474 dispatch pc=40, inst=LOAD_FAST(arg=1, lineno=257)
DEBUG 2022-01-28 15:49:34,474 stack ['$phi38.0']
DEBUG 2022-01-28 15:49:34,474 dispatch pc=42, inst=LOAD_FAST(arg=0, lineno=257)
DEBUG 2022-01-28 15:49:34,474 stack ['$phi38.0', '$val40.2']
DEBUG 2022-01-28 15:49:34,474 dispatch pc=44, inst=LOAD_FAST(arg=2, lineno=257)
DEBUG 2022-01-28 15:49:34,474 stack ['$phi38.0', '$val40.2', '$in_arr42.3']
DEBUG 2022-01-28 15:49:34,474 dispatch pc=46, inst=BINARY_SUBSCR(arg=None, lineno=257)
DEBUG 2022-01-28 15:49:34,474 stack ['$phi38.0', '$val40.2', '$in_arr42.3', '$i44.4']
DEBUG 2022-01-28 15:49:34,474 dispatch pc=48, inst=INPLACE_ADD(arg=None, lineno=257)
DEBUG 2022-01-28 15:49:34,474 stack ['$phi38.0', '$val40.2', '$46binary_subscr.5']
DEBUG 2022-01-28 15:49:34,474 dispatch pc=50, inst=STORE_FAST(arg=1, lineno=257)
DEBUG 2022-01-28 15:49:34,474 stack ['$phi38.0', '$48inplace_add.6']
DEBUG 2022-01-28 15:49:34,474 dispatch pc=52, inst=JUMP_ABSOLUTE(arg=36, lineno=257)
DEBUG 2022-01-28 15:49:34,474 stack ['$phi38.0']
DEBUG 2022-01-28 15:49:34,474 end state. edges=[Edge(pc=36, stack=('$phi38.0',), blockstack=(), npush=0)]
DEBUG 2022-01-28 15:49:34,474 pending: deque([State(pc_initial=36 nstack_initial=1)])
DEBUG 2022-01-28 15:49:34,474 -------------------------Prune PHIs-------------------------
DEBUG 2022-01-28 15:49:34,482 Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=36 nstack_initial=1): {'$phi36.0'},
             State(pc_initial=38 nstack_initial=2): {'$phi38.1'},
             State(pc_initial=54 nstack_initial=0): set()})
DEBUG 2022-01-28 15:49:34,482 defmap: {'$phi36.0': State(pc_initial=0 nstack_initial=0),
 '$phi38.1': State(pc_initial=36 nstack_initial=1)}
DEBUG 2022-01-28 15:49:34,482 phismap: defaultdict(<class 'set'>,
            {'$phi36.0': {('$34get_iter.14',
                           State(pc_initial=0 nstack_initial=0)),
                          ('$phi38.0', State(pc_initial=38 nstack_initial=2))},
             '$phi38.0': {('$phi36.0', State(pc_initial=36 nstack_initial=1))},
             '$phi38.1': {('$36for_iter.2',
                           State(pc_initial=36 nstack_initial=1))}})
DEBUG 2022-01-28 15:49:34,482 changing phismap: defaultdict(<class 'set'>,
            {'$phi36.0': {('$34get_iter.14',
                           State(pc_initial=0 nstack_initial=0)),
                          ('$phi36.0', State(pc_initial=36 nstack_initial=1))},
             '$phi38.0': {('$34get_iter.14',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi38.1': {('$36for_iter.2',
                           State(pc_initial=36 nstack_initial=1))}})
DEBUG 2022-01-28 15:49:34,482 changing phismap: defaultdict(<class 'set'>,
            {'$phi36.0': {('$34get_iter.14',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi38.0': {('$34get_iter.14',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi38.1': {('$36for_iter.2',
                           State(pc_initial=36 nstack_initial=1))}})
DEBUG 2022-01-28 15:49:34,482 changing phismap: defaultdict(<class 'set'>,
            {'$phi36.0': {('$34get_iter.14',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi38.0': {('$34get_iter.14',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi38.1': {('$36for_iter.2',
                           State(pc_initial=36 nstack_initial=1))}})
DEBUG 2022-01-28 15:49:34,482 keep phismap: {'$phi36.0': {('$34get_iter.14', State(pc_initial=0 nstack_initial=0))},
 '$phi38.1': {('$36for_iter.2', State(pc_initial=36 nstack_initial=1))}}
DEBUG 2022-01-28 15:49:34,484 new_out: defaultdict(<class 'dict'>,
            {State(pc_initial=0 nstack_initial=0): {'$phi36.0': '$34get_iter.14'},
             State(pc_initial=36 nstack_initial=1): {'$phi38.1': '$36for_iter.2'}})
DEBUG 2022-01-28 15:49:34,484 ----------------------DONE Prune PHIs-----------------------
DEBUG 2022-01-28 15:49:34,484 block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$2load_global.0'}), (4, {'item': '$2load_global.0', 'res': '$4load_attr.1'}), (6, {'item': '$4load_attr.1', 'res': '$6load_attr.2'}), (8, {'item': '$6load_attr.2', 'res': '$8load_method.3'}), (10, {'func': '$8load_method.3', 'args': [], 'res': '$10call_method.4'}), (14, {'res': '$14load_deref.5'}), (16, {'value': '$14load_deref.5'}), (18, {'res': '$18load_global.6'}), (20, {'item': '$18load_global.6', 'res': '$20load_attr.7'}), (22, {'item': '$20load_attr.7', 'res': '$22load_attr.8'}), (24, {'item': '$22load_attr.8', 'res': '$24load_method.9'}), (26, {'res': '$26load_global.10'}), (28, {'res': '$in_arr28.11'}), (30, {'func': '$26load_global.10', 'args': ['$in_arr28.11'], 'res': '$30call_function.12'}), (32, {'func': '$24load_method.9', 'args': ['$30call_function.12'], 'res': '$32call_method.13'}), (34, {'value': '$32call_method.13', 'res': '$34get_iter.14'})), outgoing_phis={'$phi36.0': '$34get_iter.14'}, blockstack=(), active_try_block=None, outgoing_edgepushed={36: ('$34get_iter.14',)})
DEBUG 2022-01-28 15:49:34,484 block_infos State(pc_initial=36 nstack_initial=1):
AdaptBlockInfo(insts=((36, {'iterator': '$phi36.0', 'pair': '$36for_iter.1', 'indval': '$36for_iter.2', 'pred': '$36for_iter.3'}),), outgoing_phis={'$phi38.1': '$36for_iter.2'}, blockstack=(), active_try_block=None, outgoing_edgepushed={54: (), 38: ('$phi36.0', '$36for_iter.2')})
DEBUG 2022-01-28 15:49:34,484 block_infos State(pc_initial=38 nstack_initial=2):
AdaptBlockInfo(insts=((38, {'value': '$phi38.1'}), (40, {'res': '$val40.2'}), (42, {'res': '$in_arr42.3'}), (44, {'res': '$i44.4'}), (46, {'index': '$i44.4', 'target': '$in_arr42.3', 'res': '$46binary_subscr.5'}), (48, {'lhs': '$val40.2', 'rhs': '$46binary_subscr.5', 'res': '$48inplace_add.6'}), (50, {'value': '$48inplace_add.6'}), (52, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={36: ('$phi38.0',)})
DEBUG 2022-01-28 15:49:34,484 block_infos State(pc_initial=54 nstack_initial=0):
AdaptBlockInfo(insts=((54, {'res': '$val54.0'}), (56, {'retval': '$val54.0', 'castval': '$56return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG 2022-01-28 15:49:34,484 label 0:
    in_arr = arg(0, name=in_arr)             ['in_arr']
    $2load_global.0 = global(numba: <module 'numba' from 'C:\\Users\\zl4821\\Anaconda3\\envs\\GBS\\lib\\site-packages\\numba\\__init__.py'>) ['$2load_global.0']
    $4load_attr.1 = getattr(value=$2load_global.0, attr=parfors) ['$2load_global.0', '$4load_attr.1']
    $6load_attr.2 = getattr(value=$4load_attr.1, attr=parfor) ['$4load_attr.1', '$6load_attr.2']
    $8load_method.3 = getattr(value=$6load_attr.2, attr=init_prange) ['$6load_attr.2', '$8load_method.3']
    $10call_method.4 = call $8load_method.3(func=$8load_method.3, args=[], kws=(), vararg=None, target=None) ['$10call_method.4', '$8load_method.3']
    val = freevar(zero: 0)                   ['val']
    $18load_global.6 = global(numba: <module 'numba' from 'C:\\Users\\zl4821\\Anaconda3\\envs\\GBS\\lib\\site-packages\\numba\\__init__.py'>) ['$18load_global.6']
    $20load_attr.7 = getattr(value=$18load_global.6, attr=parfors) ['$18load_global.6', '$20load_attr.7']
    $22load_attr.8 = getattr(value=$20load_attr.7, attr=parfor) ['$20load_attr.7', '$22load_attr.8']
    $24load_method.9 = getattr(value=$22load_attr.8, attr=internal_prange) ['$22load_attr.8', '$24load_method.9']
    $26load_global.10 = global(len: <built-in function len>) ['$26load_global.10']
    $30call_function.12 = call $26load_global.10(in_arr, func=$26load_global.10, args=[Var(in_arr, parfor.py:254)], kws=(), vararg=None, target=None) ['$26load_global.10', '$30call_function.12', 'in_arr']
    $32call_method.13 = call $24load_method.9($30call_function.12, func=$24load_method.9, args=[Var($30call_function.12, parfor.py:256)], kws=(), vararg=None, target=None) ['$24load_method.9', '$30call_function.12', '$32call_method.13']
    $34get_iter.14 = getiter(value=$32call_method.13) ['$32call_method.13', '$34get_iter.14']
    $phi36.0 = $34get_iter.14                ['$34get_iter.14', '$phi36.0']
    jump 36                                  []
label 36:
    $36for_iter.1 = iternext(value=$phi36.0) ['$36for_iter.1', '$phi36.0']
    $36for_iter.2 = pair_first(value=$36for_iter.1) ['$36for_iter.1', '$36for_iter.2']
    $36for_iter.3 = pair_second(value=$36for_iter.1) ['$36for_iter.1', '$36for_iter.3']
    $phi38.1 = $36for_iter.2                 ['$36for_iter.2', '$phi38.1']
    branch $36for_iter.3, 38, 54             ['$36for_iter.3']
label 38:
    i = $phi38.1                             ['$phi38.1', 'i']
    $46binary_subscr.5 = getitem(value=in_arr, index=i, fn=<built-in function getitem>) ['$46binary_subscr.5', 'i', 'in_arr']
    $48inplace_add.6 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=val, rhs=$46binary_subscr.5, static_lhs=Undefined, static_rhs=Undefined) ['$46binary_subscr.5', '$48inplace_add.6', 'val']
    val = $48inplace_add.6                   ['$48inplace_add.6', 'val']
    jump 36                                  []
label 54:
    $56return_value.1 = cast(value=val)      ['$56return_value.1', 'val']
    return $56return_value.1                 ['$56return_value.1']

DEBUG 2022-01-28 15:49:34,492 bytecode dump:
>          0	NOP(arg=None, lineno=254)
           2	LOAD_GLOBAL(arg=0, lineno=254)
           4	LOAD_ATTR(arg=1, lineno=254)
           6	LOAD_ATTR(arg=2, lineno=254)
           8	LOAD_METHOD(arg=3, lineno=254)
          10	CALL_METHOD(arg=0, lineno=254)
          12	POP_TOP(arg=None, lineno=254)
          14	LOAD_DEREF(arg=0, lineno=255)
          16	STORE_FAST(arg=1, lineno=255)
          18	LOAD_GLOBAL(arg=0, lineno=256)
          20	LOAD_ATTR(arg=1, lineno=256)
          22	LOAD_ATTR(arg=2, lineno=256)
          24	LOAD_METHOD(arg=4, lineno=256)
          26	LOAD_GLOBAL(arg=5, lineno=256)
          28	LOAD_FAST(arg=0, lineno=256)
          30	CALL_FUNCTION(arg=1, lineno=256)
          32	CALL_METHOD(arg=1, lineno=256)
          34	GET_ITER(arg=None, lineno=256)
>         36	FOR_ITER(arg=16, lineno=256)
          38	STORE_FAST(arg=2, lineno=256)
          40	LOAD_FAST(arg=1, lineno=257)
          42	LOAD_FAST(arg=0, lineno=257)
          44	LOAD_FAST(arg=2, lineno=257)
          46	BINARY_SUBSCR(arg=None, lineno=257)
          48	INPLACE_ADD(arg=None, lineno=257)
          50	STORE_FAST(arg=1, lineno=257)
          52	JUMP_ABSOLUTE(arg=36, lineno=257)
>         54	LOAD_FAST(arg=1, lineno=258)
          56	RETURN_VALUE(arg=None, lineno=258)
DEBUG 2022-01-28 15:49:34,492 pending: deque([State(pc_initial=0 nstack_initial=0)])
DEBUG 2022-01-28 15:49:34,492 stack: []
DEBUG 2022-01-28 15:49:34,492 dispatch pc=0, inst=NOP(arg=None, lineno=254)
DEBUG 2022-01-28 15:49:34,492 stack []
DEBUG 2022-01-28 15:49:34,492 dispatch pc=2, inst=LOAD_GLOBAL(arg=0, lineno=254)
DEBUG 2022-01-28 15:49:34,492 stack []
DEBUG 2022-01-28 15:49:34,494 dispatch pc=4, inst=LOAD_ATTR(arg=1, lineno=254)
DEBUG 2022-01-28 15:49:34,494 stack ['$2load_global.0']
DEBUG 2022-01-28 15:49:34,494 dispatch pc=6, inst=LOAD_ATTR(arg=2, lineno=254)
DEBUG 2022-01-28 15:49:34,494 stack ['$4load_attr.1']
DEBUG 2022-01-28 15:49:34,494 dispatch pc=8, inst=LOAD_METHOD(arg=3, lineno=254)
DEBUG 2022-01-28 15:49:34,494 stack ['$6load_attr.2']
DEBUG 2022-01-28 15:49:34,494 dispatch pc=10, inst=CALL_METHOD(arg=0, lineno=254)
DEBUG 2022-01-28 15:49:34,494 stack ['$8load_method.3']
DEBUG 2022-01-28 15:49:34,494 dispatch pc=12, inst=POP_TOP(arg=None, lineno=254)
DEBUG 2022-01-28 15:49:34,494 stack ['$10call_method.4']
DEBUG 2022-01-28 15:49:34,494 dispatch pc=14, inst=LOAD_DEREF(arg=0, lineno=255)
DEBUG 2022-01-28 15:49:34,494 stack []
DEBUG 2022-01-28 15:49:34,494 dispatch pc=16, inst=STORE_FAST(arg=1, lineno=255)
DEBUG 2022-01-28 15:49:34,494 stack ['$14load_deref.5']
DEBUG 2022-01-28 15:49:34,494 dispatch pc=18, inst=LOAD_GLOBAL(arg=0, lineno=256)
DEBUG 2022-01-28 15:49:34,494 stack []
DEBUG 2022-01-28 15:49:34,494 dispatch pc=20, inst=LOAD_ATTR(arg=1, lineno=256)
DEBUG 2022-01-28 15:49:34,494 stack ['$18load_global.6']
DEBUG 2022-01-28 15:49:34,494 dispatch pc=22, inst=LOAD_ATTR(arg=2, lineno=256)
DEBUG 2022-01-28 15:49:34,494 stack ['$20load_attr.7']
DEBUG 2022-01-28 15:49:34,494 dispatch pc=24, inst=LOAD_METHOD(arg=4, lineno=256)
DEBUG 2022-01-28 15:49:34,494 stack ['$22load_attr.8']
DEBUG 2022-01-28 15:49:34,494 dispatch pc=26, inst=LOAD_GLOBAL(arg=5, lineno=256)
DEBUG 2022-01-28 15:49:34,494 stack ['$24load_method.9']
DEBUG 2022-01-28 15:49:34,494 dispatch pc=28, inst=LOAD_FAST(arg=0, lineno=256)
DEBUG 2022-01-28 15:49:34,494 stack ['$24load_method.9', '$26load_global.10']
DEBUG 2022-01-28 15:49:34,494 dispatch pc=30, inst=CALL_FUNCTION(arg=1, lineno=256)
DEBUG 2022-01-28 15:49:34,494 stack ['$24load_method.9', '$26load_global.10', '$in_arr28.11']
DEBUG 2022-01-28 15:49:34,494 dispatch pc=32, inst=CALL_METHOD(arg=1, lineno=256)
DEBUG 2022-01-28 15:49:34,494 stack ['$24load_method.9', '$30call_function.12']
DEBUG 2022-01-28 15:49:34,494 dispatch pc=34, inst=GET_ITER(arg=None, lineno=256)
DEBUG 2022-01-28 15:49:34,494 stack ['$32call_method.13']
DEBUG 2022-01-28 15:49:34,494 end state. edges=[Edge(pc=36, stack=('$34get_iter.14',), blockstack=(), npush=0)]
DEBUG 2022-01-28 15:49:34,494 pending: deque([State(pc_initial=36 nstack_initial=1)])
DEBUG 2022-01-28 15:49:34,494 stack: ['$phi36.0']
DEBUG 2022-01-28 15:49:34,494 dispatch pc=36, inst=FOR_ITER(arg=16, lineno=256)
DEBUG 2022-01-28 15:49:34,494 stack ['$phi36.0']
DEBUG 2022-01-28 15:49:34,494 end state. edges=[Edge(pc=54, stack=(), blockstack=(), npush=0), Edge(pc=38, stack=('$phi36.0', '$36for_iter.2'), blockstack=(), npush=0)]
DEBUG 2022-01-28 15:49:34,494 pending: deque([State(pc_initial=54 nstack_initial=0), State(pc_initial=38 nstack_initial=2)])
DEBUG 2022-01-28 15:49:34,494 stack: []
DEBUG 2022-01-28 15:49:34,494 dispatch pc=54, inst=LOAD_FAST(arg=1, lineno=258)
DEBUG 2022-01-28 15:49:34,494 stack []
DEBUG 2022-01-28 15:49:34,494 dispatch pc=56, inst=RETURN_VALUE(arg=None, lineno=258)
DEBUG 2022-01-28 15:49:34,494 stack ['$val54.0']
DEBUG 2022-01-28 15:49:34,494 end state. edges=[]
DEBUG 2022-01-28 15:49:34,494 pending: deque([State(pc_initial=38 nstack_initial=2)])
DEBUG 2022-01-28 15:49:34,494 stack: ['$phi38.0', '$phi38.1']
DEBUG 2022-01-28 15:49:34,494 dispatch pc=38, inst=STORE_FAST(arg=2, lineno=256)
DEBUG 2022-01-28 15:49:34,494 stack ['$phi38.0', '$phi38.1']
DEBUG 2022-01-28 15:49:34,494 dispatch pc=40, inst=LOAD_FAST(arg=1, lineno=257)
DEBUG 2022-01-28 15:49:34,494 stack ['$phi38.0']
DEBUG 2022-01-28 15:49:34,494 dispatch pc=42, inst=LOAD_FAST(arg=0, lineno=257)
DEBUG 2022-01-28 15:49:34,494 stack ['$phi38.0', '$val40.2']
DEBUG 2022-01-28 15:49:34,494 dispatch pc=44, inst=LOAD_FAST(arg=2, lineno=257)
DEBUG 2022-01-28 15:49:34,494 stack ['$phi38.0', '$val40.2', '$in_arr42.3']
DEBUG 2022-01-28 15:49:34,494 dispatch pc=46, inst=BINARY_SUBSCR(arg=None, lineno=257)
DEBUG 2022-01-28 15:49:34,494 stack ['$phi38.0', '$val40.2', '$in_arr42.3', '$i44.4']
DEBUG 2022-01-28 15:49:34,494 dispatch pc=48, inst=INPLACE_ADD(arg=None, lineno=257)
DEBUG 2022-01-28 15:49:34,494 stack ['$phi38.0', '$val40.2', '$46binary_subscr.5']
DEBUG 2022-01-28 15:49:34,494 dispatch pc=50, inst=STORE_FAST(arg=1, lineno=257)
DEBUG 2022-01-28 15:49:34,494 stack ['$phi38.0', '$48inplace_add.6']
DEBUG 2022-01-28 15:49:34,494 dispatch pc=52, inst=JUMP_ABSOLUTE(arg=36, lineno=257)
DEBUG 2022-01-28 15:49:34,494 stack ['$phi38.0']
DEBUG 2022-01-28 15:49:34,494 end state. edges=[Edge(pc=36, stack=('$phi38.0',), blockstack=(), npush=0)]
DEBUG 2022-01-28 15:49:34,494 pending: deque([State(pc_initial=36 nstack_initial=1)])
DEBUG 2022-01-28 15:49:34,494 -------------------------Prune PHIs-------------------------
DEBUG 2022-01-28 15:49:34,494 Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=36 nstack_initial=1): {'$phi36.0'},
             State(pc_initial=38 nstack_initial=2): {'$phi38.1'},
             State(pc_initial=54 nstack_initial=0): set()})
DEBUG 2022-01-28 15:49:34,494 defmap: {'$phi36.0': State(pc_initial=0 nstack_initial=0),
 '$phi38.1': State(pc_initial=36 nstack_initial=1)}
DEBUG 2022-01-28 15:49:34,494 phismap: defaultdict(<class 'set'>,
            {'$phi36.0': {('$34get_iter.14',
                           State(pc_initial=0 nstack_initial=0)),
                          ('$phi38.0', State(pc_initial=38 nstack_initial=2))},
             '$phi38.0': {('$phi36.0', State(pc_initial=36 nstack_initial=1))},
             '$phi38.1': {('$36for_iter.2',
                           State(pc_initial=36 nstack_initial=1))}})
DEBUG 2022-01-28 15:49:34,494 changing phismap: defaultdict(<class 'set'>,
            {'$phi36.0': {('$34get_iter.14',
                           State(pc_initial=0 nstack_initial=0)),
                          ('$phi36.0', State(pc_initial=36 nstack_initial=1))},
             '$phi38.0': {('$34get_iter.14',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi38.1': {('$36for_iter.2',
                           State(pc_initial=36 nstack_initial=1))}})
DEBUG 2022-01-28 15:49:34,494 changing phismap: defaultdict(<class 'set'>,
            {'$phi36.0': {('$34get_iter.14',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi38.0': {('$34get_iter.14',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi38.1': {('$36for_iter.2',
                           State(pc_initial=36 nstack_initial=1))}})
DEBUG 2022-01-28 15:49:34,494 changing phismap: defaultdict(<class 'set'>,
            {'$phi36.0': {('$34get_iter.14',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi38.0': {('$34get_iter.14',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi38.1': {('$36for_iter.2',
                           State(pc_initial=36 nstack_initial=1))}})
DEBUG 2022-01-28 15:49:34,494 keep phismap: {'$phi36.0': {('$34get_iter.14', State(pc_initial=0 nstack_initial=0))},
 '$phi38.1': {('$36for_iter.2', State(pc_initial=36 nstack_initial=1))}}
DEBUG 2022-01-28 15:49:34,494 new_out: defaultdict(<class 'dict'>,
            {State(pc_initial=0 nstack_initial=0): {'$phi36.0': '$34get_iter.14'},
             State(pc_initial=36 nstack_initial=1): {'$phi38.1': '$36for_iter.2'}})
DEBUG 2022-01-28 15:49:34,502 ----------------------DONE Prune PHIs-----------------------
DEBUG 2022-01-28 15:49:34,502 block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$2load_global.0'}), (4, {'item': '$2load_global.0', 'res': '$4load_attr.1'}), (6, {'item': '$4load_attr.1', 'res': '$6load_attr.2'}), (8, {'item': '$6load_attr.2', 'res': '$8load_method.3'}), (10, {'func': '$8load_method.3', 'args': [], 'res': '$10call_method.4'}), (14, {'res': '$14load_deref.5'}), (16, {'value': '$14load_deref.5'}), (18, {'res': '$18load_global.6'}), (20, {'item': '$18load_global.6', 'res': '$20load_attr.7'}), (22, {'item': '$20load_attr.7', 'res': '$22load_attr.8'}), (24, {'item': '$22load_attr.8', 'res': '$24load_method.9'}), (26, {'res': '$26load_global.10'}), (28, {'res': '$in_arr28.11'}), (30, {'func': '$26load_global.10', 'args': ['$in_arr28.11'], 'res': '$30call_function.12'}), (32, {'func': '$24load_method.9', 'args': ['$30call_function.12'], 'res': '$32call_method.13'}), (34, {'value': '$32call_method.13', 'res': '$34get_iter.14'})), outgoing_phis={'$phi36.0': '$34get_iter.14'}, blockstack=(), active_try_block=None, outgoing_edgepushed={36: ('$34get_iter.14',)})
DEBUG 2022-01-28 15:49:34,502 block_infos State(pc_initial=36 nstack_initial=1):
AdaptBlockInfo(insts=((36, {'iterator': '$phi36.0', 'pair': '$36for_iter.1', 'indval': '$36for_iter.2', 'pred': '$36for_iter.3'}),), outgoing_phis={'$phi38.1': '$36for_iter.2'}, blockstack=(), active_try_block=None, outgoing_edgepushed={54: (), 38: ('$phi36.0', '$36for_iter.2')})
DEBUG 2022-01-28 15:49:34,502 block_infos State(pc_initial=38 nstack_initial=2):
AdaptBlockInfo(insts=((38, {'value': '$phi38.1'}), (40, {'res': '$val40.2'}), (42, {'res': '$in_arr42.3'}), (44, {'res': '$i44.4'}), (46, {'index': '$i44.4', 'target': '$in_arr42.3', 'res': '$46binary_subscr.5'}), (48, {'lhs': '$val40.2', 'rhs': '$46binary_subscr.5', 'res': '$48inplace_add.6'}), (50, {'value': '$48inplace_add.6'}), (52, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={36: ('$phi38.0',)})
DEBUG 2022-01-28 15:49:34,502 block_infos State(pc_initial=54 nstack_initial=0):
AdaptBlockInfo(insts=((54, {'res': '$val54.0'}), (56, {'retval': '$val54.0', 'castval': '$56return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG 2022-01-28 15:49:34,504 label 0:
    in_arr = arg(0, name=in_arr)             ['in_arr']
    $2load_global.0 = global(numba: <module 'numba' from 'C:\\Users\\zl4821\\Anaconda3\\envs\\GBS\\lib\\site-packages\\numba\\__init__.py'>) ['$2load_global.0']
    $4load_attr.1 = getattr(value=$2load_global.0, attr=parfors) ['$2load_global.0', '$4load_attr.1']
    $6load_attr.2 = getattr(value=$4load_attr.1, attr=parfor) ['$4load_attr.1', '$6load_attr.2']
    $8load_method.3 = getattr(value=$6load_attr.2, attr=init_prange) ['$6load_attr.2', '$8load_method.3']
    $10call_method.4 = call $8load_method.3(func=$8load_method.3, args=[], kws=(), vararg=None, target=None) ['$10call_method.4', '$8load_method.3']
    val = freevar(zero: 0)                   ['val']
    $18load_global.6 = global(numba: <module 'numba' from 'C:\\Users\\zl4821\\Anaconda3\\envs\\GBS\\lib\\site-packages\\numba\\__init__.py'>) ['$18load_global.6']
    $20load_attr.7 = getattr(value=$18load_global.6, attr=parfors) ['$18load_global.6', '$20load_attr.7']
    $22load_attr.8 = getattr(value=$20load_attr.7, attr=parfor) ['$20load_attr.7', '$22load_attr.8']
    $24load_method.9 = getattr(value=$22load_attr.8, attr=internal_prange) ['$22load_attr.8', '$24load_method.9']
    $26load_global.10 = global(len: <built-in function len>) ['$26load_global.10']
    $30call_function.12 = call $26load_global.10(in_arr, func=$26load_global.10, args=[Var(in_arr, parfor.py:254)], kws=(), vararg=None, target=None) ['$26load_global.10', '$30call_function.12', 'in_arr']
    $32call_method.13 = call $24load_method.9($30call_function.12, func=$24load_method.9, args=[Var($30call_function.12, parfor.py:256)], kws=(), vararg=None, target=None) ['$24load_method.9', '$30call_function.12', '$32call_method.13']
    $34get_iter.14 = getiter(value=$32call_method.13) ['$32call_method.13', '$34get_iter.14']
    $phi36.0 = $34get_iter.14                ['$34get_iter.14', '$phi36.0']
    jump 36                                  []
label 36:
    $36for_iter.1 = iternext(value=$phi36.0) ['$36for_iter.1', '$phi36.0']
    $36for_iter.2 = pair_first(value=$36for_iter.1) ['$36for_iter.1', '$36for_iter.2']
    $36for_iter.3 = pair_second(value=$36for_iter.1) ['$36for_iter.1', '$36for_iter.3']
    $phi38.1 = $36for_iter.2                 ['$36for_iter.2', '$phi38.1']
    branch $36for_iter.3, 38, 54             ['$36for_iter.3']
label 38:
    i = $phi38.1                             ['$phi38.1', 'i']
    $46binary_subscr.5 = getitem(value=in_arr, index=i, fn=<built-in function getitem>) ['$46binary_subscr.5', 'i', 'in_arr']
    $48inplace_add.6 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=val, rhs=$46binary_subscr.5, static_lhs=Undefined, static_rhs=Undefined) ['$46binary_subscr.5', '$48inplace_add.6', 'val']
    val = $48inplace_add.6                   ['$48inplace_add.6', 'val']
    jump 36                                  []
label 54:
    $56return_value.1 = cast(value=val)      ['$56return_value.1', 'val']
    return $56return_value.1                 ['$56return_value.1']

DEBUG 2022-01-28 15:49:34,504 bytecode dump:
>          0	NOP(arg=None, lineno=276)
           2	LOAD_GLOBAL(arg=0, lineno=276)
           4	LOAD_ATTR(arg=1, lineno=276)
           6	LOAD_ATTR(arg=2, lineno=276)
           8	LOAD_METHOD(arg=3, lineno=276)
          10	CALL_METHOD(arg=0, lineno=276)
          12	POP_TOP(arg=None, lineno=276)
          14	LOAD_DEREF(arg=0, lineno=277)
          16	STORE_FAST(arg=1, lineno=277)
          18	LOAD_GLOBAL(arg=0, lineno=278)
          20	LOAD_ATTR(arg=1, lineno=278)
          22	LOAD_ATTR(arg=2, lineno=278)
          24	LOAD_METHOD(arg=4, lineno=278)
          26	LOAD_GLOBAL(arg=5, lineno=278)
          28	LOAD_FAST(arg=0, lineno=278)
          30	CALL_FUNCTION(arg=1, lineno=278)
          32	CALL_METHOD(arg=1, lineno=278)
          34	GET_ITER(arg=None, lineno=278)
>         36	FOR_ITER(arg=16, lineno=278)
          38	STORE_FAST(arg=2, lineno=278)
          40	LOAD_FAST(arg=1, lineno=279)
          42	LOAD_FAST(arg=0, lineno=279)
          44	LOAD_FAST(arg=2, lineno=279)
          46	BINARY_SUBSCR(arg=None, lineno=279)
          48	INPLACE_MULTIPLY(arg=None, lineno=279)
          50	STORE_FAST(arg=1, lineno=279)
          52	JUMP_ABSOLUTE(arg=36, lineno=279)
>         54	LOAD_FAST(arg=1, lineno=280)
          56	RETURN_VALUE(arg=None, lineno=280)
DEBUG 2022-01-28 15:49:34,504 pending: deque([State(pc_initial=0 nstack_initial=0)])
DEBUG 2022-01-28 15:49:34,513 stack: []
DEBUG 2022-01-28 15:49:34,513 dispatch pc=0, inst=NOP(arg=None, lineno=276)
DEBUG 2022-01-28 15:49:34,513 stack []
DEBUG 2022-01-28 15:49:34,513 dispatch pc=2, inst=LOAD_GLOBAL(arg=0, lineno=276)
DEBUG 2022-01-28 15:49:34,513 stack []
DEBUG 2022-01-28 15:49:34,513 dispatch pc=4, inst=LOAD_ATTR(arg=1, lineno=276)
DEBUG 2022-01-28 15:49:34,513 stack ['$2load_global.0']
DEBUG 2022-01-28 15:49:34,513 dispatch pc=6, inst=LOAD_ATTR(arg=2, lineno=276)
DEBUG 2022-01-28 15:49:34,513 stack ['$4load_attr.1']
DEBUG 2022-01-28 15:49:34,513 dispatch pc=8, inst=LOAD_METHOD(arg=3, lineno=276)
DEBUG 2022-01-28 15:49:34,513 stack ['$6load_attr.2']
DEBUG 2022-01-28 15:49:34,513 dispatch pc=10, inst=CALL_METHOD(arg=0, lineno=276)
DEBUG 2022-01-28 15:49:34,513 stack ['$8load_method.3']
DEBUG 2022-01-28 15:49:34,513 dispatch pc=12, inst=POP_TOP(arg=None, lineno=276)
DEBUG 2022-01-28 15:49:34,513 stack ['$10call_method.4']
DEBUG 2022-01-28 15:49:34,513 dispatch pc=14, inst=LOAD_DEREF(arg=0, lineno=277)
DEBUG 2022-01-28 15:49:34,513 stack []
DEBUG 2022-01-28 15:49:34,513 dispatch pc=16, inst=STORE_FAST(arg=1, lineno=277)
DEBUG 2022-01-28 15:49:34,515 stack ['$14load_deref.5']
DEBUG 2022-01-28 15:49:34,515 dispatch pc=18, inst=LOAD_GLOBAL(arg=0, lineno=278)
DEBUG 2022-01-28 15:49:34,515 stack []
DEBUG 2022-01-28 15:49:34,515 dispatch pc=20, inst=LOAD_ATTR(arg=1, lineno=278)
DEBUG 2022-01-28 15:49:34,515 stack ['$18load_global.6']
DEBUG 2022-01-28 15:49:34,515 dispatch pc=22, inst=LOAD_ATTR(arg=2, lineno=278)
DEBUG 2022-01-28 15:49:34,515 stack ['$20load_attr.7']
DEBUG 2022-01-28 15:49:34,515 dispatch pc=24, inst=LOAD_METHOD(arg=4, lineno=278)
DEBUG 2022-01-28 15:49:34,515 stack ['$22load_attr.8']
DEBUG 2022-01-28 15:49:34,515 dispatch pc=26, inst=LOAD_GLOBAL(arg=5, lineno=278)
DEBUG 2022-01-28 15:49:34,515 stack ['$24load_method.9']
DEBUG 2022-01-28 15:49:34,515 dispatch pc=28, inst=LOAD_FAST(arg=0, lineno=278)
DEBUG 2022-01-28 15:49:34,515 stack ['$24load_method.9', '$26load_global.10']
DEBUG 2022-01-28 15:49:34,515 dispatch pc=30, inst=CALL_FUNCTION(arg=1, lineno=278)
DEBUG 2022-01-28 15:49:34,515 stack ['$24load_method.9', '$26load_global.10', '$in_arr28.11']
DEBUG 2022-01-28 15:49:34,515 dispatch pc=32, inst=CALL_METHOD(arg=1, lineno=278)
DEBUG 2022-01-28 15:49:34,515 stack ['$24load_method.9', '$30call_function.12']
DEBUG 2022-01-28 15:49:34,515 dispatch pc=34, inst=GET_ITER(arg=None, lineno=278)
DEBUG 2022-01-28 15:49:34,515 stack ['$32call_method.13']
DEBUG 2022-01-28 15:49:34,515 end state. edges=[Edge(pc=36, stack=('$34get_iter.14',), blockstack=(), npush=0)]
DEBUG 2022-01-28 15:49:34,515 pending: deque([State(pc_initial=36 nstack_initial=1)])
DEBUG 2022-01-28 15:49:34,515 stack: ['$phi36.0']
DEBUG 2022-01-28 15:49:34,515 dispatch pc=36, inst=FOR_ITER(arg=16, lineno=278)
DEBUG 2022-01-28 15:49:34,515 stack ['$phi36.0']
DEBUG 2022-01-28 15:49:34,515 end state. edges=[Edge(pc=54, stack=(), blockstack=(), npush=0), Edge(pc=38, stack=('$phi36.0', '$36for_iter.2'), blockstack=(), npush=0)]
DEBUG 2022-01-28 15:49:34,515 pending: deque([State(pc_initial=54 nstack_initial=0), State(pc_initial=38 nstack_initial=2)])
DEBUG 2022-01-28 15:49:34,515 stack: []
DEBUG 2022-01-28 15:49:34,515 dispatch pc=54, inst=LOAD_FAST(arg=1, lineno=280)
DEBUG 2022-01-28 15:49:34,515 stack []
DEBUG 2022-01-28 15:49:34,515 dispatch pc=56, inst=RETURN_VALUE(arg=None, lineno=280)
DEBUG 2022-01-28 15:49:34,515 stack ['$val54.0']
DEBUG 2022-01-28 15:49:34,515 end state. edges=[]
DEBUG 2022-01-28 15:49:34,515 pending: deque([State(pc_initial=38 nstack_initial=2)])
DEBUG 2022-01-28 15:49:34,515 stack: ['$phi38.0', '$phi38.1']
DEBUG 2022-01-28 15:49:34,515 dispatch pc=38, inst=STORE_FAST(arg=2, lineno=278)
DEBUG 2022-01-28 15:49:34,515 stack ['$phi38.0', '$phi38.1']
DEBUG 2022-01-28 15:49:34,515 dispatch pc=40, inst=LOAD_FAST(arg=1, lineno=279)
DEBUG 2022-01-28 15:49:34,515 stack ['$phi38.0']
DEBUG 2022-01-28 15:49:34,515 dispatch pc=42, inst=LOAD_FAST(arg=0, lineno=279)
DEBUG 2022-01-28 15:49:34,515 stack ['$phi38.0', '$val40.2']
DEBUG 2022-01-28 15:49:34,515 dispatch pc=44, inst=LOAD_FAST(arg=2, lineno=279)
DEBUG 2022-01-28 15:49:34,515 stack ['$phi38.0', '$val40.2', '$in_arr42.3']
DEBUG 2022-01-28 15:49:34,515 dispatch pc=46, inst=BINARY_SUBSCR(arg=None, lineno=279)
DEBUG 2022-01-28 15:49:34,515 stack ['$phi38.0', '$val40.2', '$in_arr42.3', '$i44.4']
DEBUG 2022-01-28 15:49:34,515 dispatch pc=48, inst=INPLACE_MULTIPLY(arg=None, lineno=279)
DEBUG 2022-01-28 15:49:34,515 stack ['$phi38.0', '$val40.2', '$46binary_subscr.5']
DEBUG 2022-01-28 15:49:34,515 dispatch pc=50, inst=STORE_FAST(arg=1, lineno=279)
DEBUG 2022-01-28 15:49:34,515 stack ['$phi38.0', '$48inplace_multiply.6']
DEBUG 2022-01-28 15:49:34,515 dispatch pc=52, inst=JUMP_ABSOLUTE(arg=36, lineno=279)
DEBUG 2022-01-28 15:49:34,515 stack ['$phi38.0']
DEBUG 2022-01-28 15:49:34,515 end state. edges=[Edge(pc=36, stack=('$phi38.0',), blockstack=(), npush=0)]
DEBUG 2022-01-28 15:49:34,515 pending: deque([State(pc_initial=36 nstack_initial=1)])
DEBUG 2022-01-28 15:49:34,515 -------------------------Prune PHIs-------------------------
DEBUG 2022-01-28 15:49:34,515 Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=36 nstack_initial=1): {'$phi36.0'},
             State(pc_initial=38 nstack_initial=2): {'$phi38.1'},
             State(pc_initial=54 nstack_initial=0): set()})
DEBUG 2022-01-28 15:49:34,515 defmap: {'$phi36.0': State(pc_initial=0 nstack_initial=0),
 '$phi38.1': State(pc_initial=36 nstack_initial=1)}
DEBUG 2022-01-28 15:49:34,515 phismap: defaultdict(<class 'set'>,
            {'$phi36.0': {('$34get_iter.14',
                           State(pc_initial=0 nstack_initial=0)),
                          ('$phi38.0', State(pc_initial=38 nstack_initial=2))},
             '$phi38.0': {('$phi36.0', State(pc_initial=36 nstack_initial=1))},
             '$phi38.1': {('$36for_iter.2',
                           State(pc_initial=36 nstack_initial=1))}})
DEBUG 2022-01-28 15:49:34,515 changing phismap: defaultdict(<class 'set'>,
            {'$phi36.0': {('$34get_iter.14',
                           State(pc_initial=0 nstack_initial=0)),
                          ('$phi36.0', State(pc_initial=36 nstack_initial=1))},
             '$phi38.0': {('$34get_iter.14',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi38.1': {('$36for_iter.2',
                           State(pc_initial=36 nstack_initial=1))}})
DEBUG 2022-01-28 15:49:34,515 changing phismap: defaultdict(<class 'set'>,
            {'$phi36.0': {('$34get_iter.14',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi38.0': {('$34get_iter.14',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi38.1': {('$36for_iter.2',
                           State(pc_initial=36 nstack_initial=1))}})
DEBUG 2022-01-28 15:49:34,515 changing phismap: defaultdict(<class 'set'>,
            {'$phi36.0': {('$34get_iter.14',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi38.0': {('$34get_iter.14',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi38.1': {('$36for_iter.2',
                           State(pc_initial=36 nstack_initial=1))}})
DEBUG 2022-01-28 15:49:34,515 keep phismap: {'$phi36.0': {('$34get_iter.14', State(pc_initial=0 nstack_initial=0))},
 '$phi38.1': {('$36for_iter.2', State(pc_initial=36 nstack_initial=1))}}
DEBUG 2022-01-28 15:49:34,515 new_out: defaultdict(<class 'dict'>,
            {State(pc_initial=0 nstack_initial=0): {'$phi36.0': '$34get_iter.14'},
             State(pc_initial=36 nstack_initial=1): {'$phi38.1': '$36for_iter.2'}})
DEBUG 2022-01-28 15:49:34,523 ----------------------DONE Prune PHIs-----------------------
DEBUG 2022-01-28 15:49:34,523 block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$2load_global.0'}), (4, {'item': '$2load_global.0', 'res': '$4load_attr.1'}), (6, {'item': '$4load_attr.1', 'res': '$6load_attr.2'}), (8, {'item': '$6load_attr.2', 'res': '$8load_method.3'}), (10, {'func': '$8load_method.3', 'args': [], 'res': '$10call_method.4'}), (14, {'res': '$14load_deref.5'}), (16, {'value': '$14load_deref.5'}), (18, {'res': '$18load_global.6'}), (20, {'item': '$18load_global.6', 'res': '$20load_attr.7'}), (22, {'item': '$20load_attr.7', 'res': '$22load_attr.8'}), (24, {'item': '$22load_attr.8', 'res': '$24load_method.9'}), (26, {'res': '$26load_global.10'}), (28, {'res': '$in_arr28.11'}), (30, {'func': '$26load_global.10', 'args': ['$in_arr28.11'], 'res': '$30call_function.12'}), (32, {'func': '$24load_method.9', 'args': ['$30call_function.12'], 'res': '$32call_method.13'}), (34, {'value': '$32call_method.13', 'res': '$34get_iter.14'})), outgoing_phis={'$phi36.0': '$34get_iter.14'}, blockstack=(), active_try_block=None, outgoing_edgepushed={36: ('$34get_iter.14',)})
DEBUG 2022-01-28 15:49:34,523 block_infos State(pc_initial=36 nstack_initial=1):
AdaptBlockInfo(insts=((36, {'iterator': '$phi36.0', 'pair': '$36for_iter.1', 'indval': '$36for_iter.2', 'pred': '$36for_iter.3'}),), outgoing_phis={'$phi38.1': '$36for_iter.2'}, blockstack=(), active_try_block=None, outgoing_edgepushed={54: (), 38: ('$phi36.0', '$36for_iter.2')})
DEBUG 2022-01-28 15:49:34,523 block_infos State(pc_initial=38 nstack_initial=2):
AdaptBlockInfo(insts=((38, {'value': '$phi38.1'}), (40, {'res': '$val40.2'}), (42, {'res': '$in_arr42.3'}), (44, {'res': '$i44.4'}), (46, {'index': '$i44.4', 'target': '$in_arr42.3', 'res': '$46binary_subscr.5'}), (48, {'lhs': '$val40.2', 'rhs': '$46binary_subscr.5', 'res': '$48inplace_multiply.6'}), (50, {'value': '$48inplace_multiply.6'}), (52, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={36: ('$phi38.0',)})
DEBUG 2022-01-28 15:49:34,523 block_infos State(pc_initial=54 nstack_initial=0):
AdaptBlockInfo(insts=((54, {'res': '$val54.0'}), (56, {'retval': '$val54.0', 'castval': '$56return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG 2022-01-28 15:49:34,523 label 0:
    in_arr = arg(0, name=in_arr)             ['in_arr']
    $2load_global.0 = global(numba: <module 'numba' from 'C:\\Users\\zl4821\\Anaconda3\\envs\\GBS\\lib\\site-packages\\numba\\__init__.py'>) ['$2load_global.0']
    $4load_attr.1 = getattr(value=$2load_global.0, attr=parfors) ['$2load_global.0', '$4load_attr.1']
    $6load_attr.2 = getattr(value=$4load_attr.1, attr=parfor) ['$4load_attr.1', '$6load_attr.2']
    $8load_method.3 = getattr(value=$6load_attr.2, attr=init_prange) ['$6load_attr.2', '$8load_method.3']
    $10call_method.4 = call $8load_method.3(func=$8load_method.3, args=[], kws=(), vararg=None, target=None) ['$10call_method.4', '$8load_method.3']
    val = freevar(one: 1)                    ['val']
    $18load_global.6 = global(numba: <module 'numba' from 'C:\\Users\\zl4821\\Anaconda3\\envs\\GBS\\lib\\site-packages\\numba\\__init__.py'>) ['$18load_global.6']
    $20load_attr.7 = getattr(value=$18load_global.6, attr=parfors) ['$18load_global.6', '$20load_attr.7']
    $22load_attr.8 = getattr(value=$20load_attr.7, attr=parfor) ['$20load_attr.7', '$22load_attr.8']
    $24load_method.9 = getattr(value=$22load_attr.8, attr=internal_prange) ['$22load_attr.8', '$24load_method.9']
    $26load_global.10 = global(len: <built-in function len>) ['$26load_global.10']
    $30call_function.12 = call $26load_global.10(in_arr, func=$26load_global.10, args=[Var(in_arr, parfor.py:276)], kws=(), vararg=None, target=None) ['$26load_global.10', '$30call_function.12', 'in_arr']
    $32call_method.13 = call $24load_method.9($30call_function.12, func=$24load_method.9, args=[Var($30call_function.12, parfor.py:278)], kws=(), vararg=None, target=None) ['$24load_method.9', '$30call_function.12', '$32call_method.13']
    $34get_iter.14 = getiter(value=$32call_method.13) ['$32call_method.13', '$34get_iter.14']
    $phi36.0 = $34get_iter.14                ['$34get_iter.14', '$phi36.0']
    jump 36                                  []
label 36:
    $36for_iter.1 = iternext(value=$phi36.0) ['$36for_iter.1', '$phi36.0']
    $36for_iter.2 = pair_first(value=$36for_iter.1) ['$36for_iter.1', '$36for_iter.2']
    $36for_iter.3 = pair_second(value=$36for_iter.1) ['$36for_iter.1', '$36for_iter.3']
    $phi38.1 = $36for_iter.2                 ['$36for_iter.2', '$phi38.1']
    branch $36for_iter.3, 38, 54             ['$36for_iter.3']
label 38:
    i = $phi38.1                             ['$phi38.1', 'i']
    $46binary_subscr.5 = getitem(value=in_arr, index=i, fn=<built-in function getitem>) ['$46binary_subscr.5', 'i', 'in_arr']
    $48inplace_multiply.6 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=val, rhs=$46binary_subscr.5, static_lhs=Undefined, static_rhs=Undefined) ['$46binary_subscr.5', '$48inplace_multiply.6', 'val']
    val = $48inplace_multiply.6              ['$48inplace_multiply.6', 'val']
    jump 36                                  []
label 54:
    $56return_value.1 = cast(value=val)      ['$56return_value.1', 'val']
    return $56return_value.1                 ['$56return_value.1']

DEBUG 2022-01-28 15:49:34,525 bytecode dump:
>          0	NOP(arg=None, lineno=154)
           2	LOAD_GLOBAL(arg=0, lineno=154)
           4	LOAD_ATTR(arg=1, lineno=154)
           6	LOAD_ATTR(arg=2, lineno=154)
           8	LOAD_METHOD(arg=3, lineno=154)
          10	CALL_METHOD(arg=0, lineno=154)
          12	POP_TOP(arg=None, lineno=154)
          14	LOAD_GLOBAL(arg=4, lineno=155)
          16	LOAD_GLOBAL(arg=5, lineno=155)
          18	LOAD_FAST(arg=0, lineno=155)
          20	CALL_FUNCTION(arg=1, lineno=155)
          22	CALL_FUNCTION(arg=1, lineno=155)
          24	POP_TOP(arg=None, lineno=155)
          26	LOAD_GLOBAL(arg=0, lineno=156)
          28	LOAD_ATTR(arg=6, lineno=156)
          30	LOAD_ATTR(arg=7, lineno=156)
          32	LOAD_METHOD(arg=8, lineno=156)
          34	LOAD_FAST(arg=0, lineno=156)
          36	LOAD_ATTR(arg=9, lineno=156)
          38	CALL_METHOD(arg=1, lineno=156)
          40	STORE_FAST(arg=1, lineno=156)
          42	LOAD_GLOBAL(arg=0, lineno=157)
          44	LOAD_ATTR(arg=1, lineno=157)
          46	LOAD_ATTR(arg=2, lineno=157)
          48	LOAD_METHOD(arg=10, lineno=157)
          50	LOAD_GLOBAL(arg=5, lineno=157)
          52	LOAD_FAST(arg=0, lineno=157)
          54	CALL_FUNCTION(arg=1, lineno=157)
          56	CALL_METHOD(arg=1, lineno=157)
          58	GET_ITER(arg=None, lineno=157)
>         60	FOR_ITER(arg=18, lineno=157)
          62	STORE_FAST(arg=2, lineno=157)
          64	LOAD_GLOBAL(arg=11, lineno=158)
          66	LOAD_FAST(arg=1, lineno=158)
          68	LOAD_FAST(arg=0, lineno=158)
          70	LOAD_FAST(arg=2, lineno=158)
          72	BINARY_SUBSCR(arg=None, lineno=158)
          74	CALL_FUNCTION(arg=2, lineno=158)
          76	STORE_FAST(arg=1, lineno=158)
          78	JUMP_ABSOLUTE(arg=60, lineno=158)
>         80	LOAD_FAST(arg=1, lineno=159)
          82	RETURN_VALUE(arg=None, lineno=159)
DEBUG 2022-01-28 15:49:34,525 pending: deque([State(pc_initial=0 nstack_initial=0)])
DEBUG 2022-01-28 15:49:34,525 stack: []
DEBUG 2022-01-28 15:49:34,525 dispatch pc=0, inst=NOP(arg=None, lineno=154)
DEBUG 2022-01-28 15:49:34,525 stack []
DEBUG 2022-01-28 15:49:34,525 dispatch pc=2, inst=LOAD_GLOBAL(arg=0, lineno=154)
DEBUG 2022-01-28 15:49:34,525 stack []
DEBUG 2022-01-28 15:49:34,525 dispatch pc=4, inst=LOAD_ATTR(arg=1, lineno=154)
DEBUG 2022-01-28 15:49:34,525 stack ['$2load_global.0']
DEBUG 2022-01-28 15:49:34,533 dispatch pc=6, inst=LOAD_ATTR(arg=2, lineno=154)
DEBUG 2022-01-28 15:49:34,533 stack ['$4load_attr.1']
DEBUG 2022-01-28 15:49:34,533 dispatch pc=8, inst=LOAD_METHOD(arg=3, lineno=154)
DEBUG 2022-01-28 15:49:34,533 stack ['$6load_attr.2']
DEBUG 2022-01-28 15:49:34,533 dispatch pc=10, inst=CALL_METHOD(arg=0, lineno=154)
DEBUG 2022-01-28 15:49:34,533 stack ['$8load_method.3']
DEBUG 2022-01-28 15:49:34,533 dispatch pc=12, inst=POP_TOP(arg=None, lineno=154)
DEBUG 2022-01-28 15:49:34,533 stack ['$10call_method.4']
DEBUG 2022-01-28 15:49:34,533 dispatch pc=14, inst=LOAD_GLOBAL(arg=4, lineno=155)
DEBUG 2022-01-28 15:49:34,533 stack []
DEBUG 2022-01-28 15:49:34,533 dispatch pc=16, inst=LOAD_GLOBAL(arg=5, lineno=155)
DEBUG 2022-01-28 15:49:34,533 stack ['$14load_global.5']
DEBUG 2022-01-28 15:49:34,533 dispatch pc=18, inst=LOAD_FAST(arg=0, lineno=155)
DEBUG 2022-01-28 15:49:34,533 stack ['$14load_global.5', '$16load_global.6']
DEBUG 2022-01-28 15:49:34,533 dispatch pc=20, inst=CALL_FUNCTION(arg=1, lineno=155)
DEBUG 2022-01-28 15:49:34,533 stack ['$14load_global.5', '$16load_global.6', '$in_arr18.7']
DEBUG 2022-01-28 15:49:34,533 dispatch pc=22, inst=CALL_FUNCTION(arg=1, lineno=155)
DEBUG 2022-01-28 15:49:34,533 stack ['$14load_global.5', '$20call_function.8']
DEBUG 2022-01-28 15:49:34,533 dispatch pc=24, inst=POP_TOP(arg=None, lineno=155)
DEBUG 2022-01-28 15:49:34,533 stack ['$22call_function.9']
DEBUG 2022-01-28 15:49:34,533 dispatch pc=26, inst=LOAD_GLOBAL(arg=0, lineno=156)
DEBUG 2022-01-28 15:49:34,533 stack []
DEBUG 2022-01-28 15:49:34,533 dispatch pc=28, inst=LOAD_ATTR(arg=6, lineno=156)
DEBUG 2022-01-28 15:49:34,533 stack ['$26load_global.10']
DEBUG 2022-01-28 15:49:34,535 dispatch pc=30, inst=LOAD_ATTR(arg=7, lineno=156)
DEBUG 2022-01-28 15:49:34,535 stack ['$28load_attr.11']
DEBUG 2022-01-28 15:49:34,535 dispatch pc=32, inst=LOAD_METHOD(arg=8, lineno=156)
DEBUG 2022-01-28 15:49:34,535 stack ['$30load_attr.12']
DEBUG 2022-01-28 15:49:34,535 dispatch pc=34, inst=LOAD_FAST(arg=0, lineno=156)
DEBUG 2022-01-28 15:49:34,535 stack ['$32load_method.13']
DEBUG 2022-01-28 15:49:34,535 dispatch pc=36, inst=LOAD_ATTR(arg=9, lineno=156)
DEBUG 2022-01-28 15:49:34,535 stack ['$32load_method.13', '$in_arr34.14']
DEBUG 2022-01-28 15:49:34,535 dispatch pc=38, inst=CALL_METHOD(arg=1, lineno=156)
DEBUG 2022-01-28 15:49:34,535 stack ['$32load_method.13', '$36load_attr.15']
DEBUG 2022-01-28 15:49:34,535 dispatch pc=40, inst=STORE_FAST(arg=1, lineno=156)
DEBUG 2022-01-28 15:49:34,535 stack ['$38call_method.16']
DEBUG 2022-01-28 15:49:34,535 dispatch pc=42, inst=LOAD_GLOBAL(arg=0, lineno=157)
DEBUG 2022-01-28 15:49:34,535 stack []
DEBUG 2022-01-28 15:49:34,535 dispatch pc=44, inst=LOAD_ATTR(arg=1, lineno=157)
DEBUG 2022-01-28 15:49:34,535 stack ['$42load_global.17']
DEBUG 2022-01-28 15:49:34,535 dispatch pc=46, inst=LOAD_ATTR(arg=2, lineno=157)
DEBUG 2022-01-28 15:49:34,535 stack ['$44load_attr.18']
DEBUG 2022-01-28 15:49:34,535 dispatch pc=48, inst=LOAD_METHOD(arg=10, lineno=157)
DEBUG 2022-01-28 15:49:34,535 stack ['$46load_attr.19']
DEBUG 2022-01-28 15:49:34,535 dispatch pc=50, inst=LOAD_GLOBAL(arg=5, lineno=157)
DEBUG 2022-01-28 15:49:34,535 stack ['$48load_method.20']
DEBUG 2022-01-28 15:49:34,535 dispatch pc=52, inst=LOAD_FAST(arg=0, lineno=157)
DEBUG 2022-01-28 15:49:34,535 stack ['$48load_method.20', '$50load_global.21']
DEBUG 2022-01-28 15:49:34,535 dispatch pc=54, inst=CALL_FUNCTION(arg=1, lineno=157)
DEBUG 2022-01-28 15:49:34,535 stack ['$48load_method.20', '$50load_global.21', '$in_arr52.22']
DEBUG 2022-01-28 15:49:34,535 dispatch pc=56, inst=CALL_METHOD(arg=1, lineno=157)
DEBUG 2022-01-28 15:49:34,535 stack ['$48load_method.20', '$54call_function.23']
DEBUG 2022-01-28 15:49:34,535 dispatch pc=58, inst=GET_ITER(arg=None, lineno=157)
DEBUG 2022-01-28 15:49:34,535 stack ['$56call_method.24']
DEBUG 2022-01-28 15:49:34,535 end state. edges=[Edge(pc=60, stack=('$58get_iter.25',), blockstack=(), npush=0)]
DEBUG 2022-01-28 15:49:34,535 pending: deque([State(pc_initial=60 nstack_initial=1)])
DEBUG 2022-01-28 15:49:34,535 stack: ['$phi60.0']
DEBUG 2022-01-28 15:49:34,535 dispatch pc=60, inst=FOR_ITER(arg=18, lineno=157)
DEBUG 2022-01-28 15:49:34,535 stack ['$phi60.0']
DEBUG 2022-01-28 15:49:34,535 end state. edges=[Edge(pc=80, stack=(), blockstack=(), npush=0), Edge(pc=62, stack=('$phi60.0', '$60for_iter.2'), blockstack=(), npush=0)]
DEBUG 2022-01-28 15:49:34,535 pending: deque([State(pc_initial=80 nstack_initial=0), State(pc_initial=62 nstack_initial=2)])
DEBUG 2022-01-28 15:49:34,535 stack: []
DEBUG 2022-01-28 15:49:34,535 dispatch pc=80, inst=LOAD_FAST(arg=1, lineno=159)
DEBUG 2022-01-28 15:49:34,535 stack []
DEBUG 2022-01-28 15:49:34,535 dispatch pc=82, inst=RETURN_VALUE(arg=None, lineno=159)
DEBUG 2022-01-28 15:49:34,535 stack ['$val80.0']
DEBUG 2022-01-28 15:49:34,535 end state. edges=[]
DEBUG 2022-01-28 15:49:34,535 pending: deque([State(pc_initial=62 nstack_initial=2)])
DEBUG 2022-01-28 15:49:34,535 stack: ['$phi62.0', '$phi62.1']
DEBUG 2022-01-28 15:49:34,535 dispatch pc=62, inst=STORE_FAST(arg=2, lineno=157)
DEBUG 2022-01-28 15:49:34,535 stack ['$phi62.0', '$phi62.1']
DEBUG 2022-01-28 15:49:34,535 dispatch pc=64, inst=LOAD_GLOBAL(arg=11, lineno=158)
DEBUG 2022-01-28 15:49:34,535 stack ['$phi62.0']
DEBUG 2022-01-28 15:49:34,535 dispatch pc=66, inst=LOAD_FAST(arg=1, lineno=158)
DEBUG 2022-01-28 15:49:34,535 stack ['$phi62.0', '$64load_global.2']
DEBUG 2022-01-28 15:49:34,535 dispatch pc=68, inst=LOAD_FAST(arg=0, lineno=158)
DEBUG 2022-01-28 15:49:34,535 stack ['$phi62.0', '$64load_global.2', '$val66.3']
DEBUG 2022-01-28 15:49:34,535 dispatch pc=70, inst=LOAD_FAST(arg=2, lineno=158)
DEBUG 2022-01-28 15:49:34,535 stack ['$phi62.0', '$64load_global.2', '$val66.3', '$in_arr68.4']
DEBUG 2022-01-28 15:49:34,535 dispatch pc=72, inst=BINARY_SUBSCR(arg=None, lineno=158)
DEBUG 2022-01-28 15:49:34,535 stack ['$phi62.0', '$64load_global.2', '$val66.3', '$in_arr68.4', '$i70.5']
DEBUG 2022-01-28 15:49:34,535 dispatch pc=74, inst=CALL_FUNCTION(arg=2, lineno=158)
DEBUG 2022-01-28 15:49:34,535 stack ['$phi62.0', '$64load_global.2', '$val66.3', '$72binary_subscr.6']
DEBUG 2022-01-28 15:49:34,535 dispatch pc=76, inst=STORE_FAST(arg=1, lineno=158)
DEBUG 2022-01-28 15:49:34,535 stack ['$phi62.0', '$74call_function.7']
DEBUG 2022-01-28 15:49:34,535 dispatch pc=78, inst=JUMP_ABSOLUTE(arg=60, lineno=158)
DEBUG 2022-01-28 15:49:34,535 stack ['$phi62.0']
DEBUG 2022-01-28 15:49:34,535 end state. edges=[Edge(pc=60, stack=('$phi62.0',), blockstack=(), npush=0)]
DEBUG 2022-01-28 15:49:34,535 pending: deque([State(pc_initial=60 nstack_initial=1)])
DEBUG 2022-01-28 15:49:34,535 -------------------------Prune PHIs-------------------------
DEBUG 2022-01-28 15:49:34,535 Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=60 nstack_initial=1): {'$phi60.0'},
             State(pc_initial=62 nstack_initial=2): {'$phi62.1'},
             State(pc_initial=80 nstack_initial=0): set()})
DEBUG 2022-01-28 15:49:34,535 defmap: {'$phi60.0': State(pc_initial=0 nstack_initial=0),
 '$phi62.1': State(pc_initial=60 nstack_initial=1)}
DEBUG 2022-01-28 15:49:34,535 phismap: defaultdict(<class 'set'>,
            {'$phi60.0': {('$58get_iter.25',
                           State(pc_initial=0 nstack_initial=0)),
                          ('$phi62.0', State(pc_initial=62 nstack_initial=2))},
             '$phi62.0': {('$phi60.0', State(pc_initial=60 nstack_initial=1))},
             '$phi62.1': {('$60for_iter.2',
                           State(pc_initial=60 nstack_initial=1))}})
DEBUG 2022-01-28 15:49:34,535 changing phismap: defaultdict(<class 'set'>,
            {'$phi60.0': {('$58get_iter.25',
                           State(pc_initial=0 nstack_initial=0)),
                          ('$phi60.0', State(pc_initial=60 nstack_initial=1))},
             '$phi62.0': {('$58get_iter.25',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi62.1': {('$60for_iter.2',
                           State(pc_initial=60 nstack_initial=1))}})
DEBUG 2022-01-28 15:49:34,535 changing phismap: defaultdict(<class 'set'>,
            {'$phi60.0': {('$58get_iter.25',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi62.0': {('$58get_iter.25',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi62.1': {('$60for_iter.2',
                           State(pc_initial=60 nstack_initial=1))}})
DEBUG 2022-01-28 15:49:34,535 changing phismap: defaultdict(<class 'set'>,
            {'$phi60.0': {('$58get_iter.25',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi62.0': {('$58get_iter.25',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi62.1': {('$60for_iter.2',
                           State(pc_initial=60 nstack_initial=1))}})
DEBUG 2022-01-28 15:49:34,535 keep phismap: {'$phi60.0': {('$58get_iter.25', State(pc_initial=0 nstack_initial=0))},
 '$phi62.1': {('$60for_iter.2', State(pc_initial=60 nstack_initial=1))}}
DEBUG 2022-01-28 15:49:34,535 new_out: defaultdict(<class 'dict'>,
            {State(pc_initial=0 nstack_initial=0): {'$phi60.0': '$58get_iter.25'},
             State(pc_initial=60 nstack_initial=1): {'$phi62.1': '$60for_iter.2'}})
DEBUG 2022-01-28 15:49:34,535 ----------------------DONE Prune PHIs-----------------------
DEBUG 2022-01-28 15:49:34,535 block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$2load_global.0'}), (4, {'item': '$2load_global.0', 'res': '$4load_attr.1'}), (6, {'item': '$4load_attr.1', 'res': '$6load_attr.2'}), (8, {'item': '$6load_attr.2', 'res': '$8load_method.3'}), (10, {'func': '$8load_method.3', 'args': [], 'res': '$10call_method.4'}), (14, {'res': '$14load_global.5'}), (16, {'res': '$16load_global.6'}), (18, {'res': '$in_arr18.7'}), (20, {'func': '$16load_global.6', 'args': ['$in_arr18.7'], 'res': '$20call_function.8'}), (22, {'func': '$14load_global.5', 'args': ['$20call_function.8'], 'res': '$22call_function.9'}), (26, {'res': '$26load_global.10'}), (28, {'item': '$26load_global.10', 'res': '$28load_attr.11'}), (30, {'item': '$28load_attr.11', 'res': '$30load_attr.12'}), (32, {'item': '$30load_attr.12', 'res': '$32load_method.13'}), (34, {'res': '$in_arr34.14'}), (36, {'item': '$in_arr34.14', 'res': '$36load_attr.15'}), (38, {'func': '$32load_method.13', 'args': ['$36load_attr.15'], 'res': '$38call_method.16'}), (40, {'value': '$38call_method.16'}), (42, {'res': '$42load_global.17'}), (44, {'item': '$42load_global.17', 'res': '$44load_attr.18'}), (46, {'item': '$44load_attr.18', 'res': '$46load_attr.19'}), (48, {'item': '$46load_attr.19', 'res': '$48load_method.20'}), (50, {'res': '$50load_global.21'}), (52, {'res': '$in_arr52.22'}), (54, {'func': '$50load_global.21', 'args': ['$in_arr52.22'], 'res': '$54call_function.23'}), (56, {'func': '$48load_method.20', 'args': ['$54call_function.23'], 'res': '$56call_method.24'}), (58, {'value': '$56call_method.24', 'res': '$58get_iter.25'})), outgoing_phis={'$phi60.0': '$58get_iter.25'}, blockstack=(), active_try_block=None, outgoing_edgepushed={60: ('$58get_iter.25',)})
DEBUG 2022-01-28 15:49:34,535 block_infos State(pc_initial=60 nstack_initial=1):
AdaptBlockInfo(insts=((60, {'iterator': '$phi60.0', 'pair': '$60for_iter.1', 'indval': '$60for_iter.2', 'pred': '$60for_iter.3'}),), outgoing_phis={'$phi62.1': '$60for_iter.2'}, blockstack=(), active_try_block=None, outgoing_edgepushed={80: (), 62: ('$phi60.0', '$60for_iter.2')})
DEBUG 2022-01-28 15:49:34,535 block_infos State(pc_initial=62 nstack_initial=2):
AdaptBlockInfo(insts=((62, {'value': '$phi62.1'}), (64, {'res': '$64load_global.2'}), (66, {'res': '$val66.3'}), (68, {'res': '$in_arr68.4'}), (70, {'res': '$i70.5'}), (72, {'index': '$i70.5', 'target': '$in_arr68.4', 'res': '$72binary_subscr.6'}), (74, {'func': '$64load_global.2', 'args': ['$val66.3', '$72binary_subscr.6'], 'res': '$74call_function.7'}), (76, {'value': '$74call_function.7'}), (78, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={60: ('$phi62.0',)})
DEBUG 2022-01-28 15:49:34,535 block_infos State(pc_initial=80 nstack_initial=0):
AdaptBlockInfo(insts=((80, {'res': '$val80.0'}), (82, {'retval': '$val80.0', 'castval': '$82return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG 2022-01-28 15:49:34,543 label 0:
    in_arr = arg(0, name=in_arr)             ['in_arr']
    $2load_global.0 = global(numba: <module 'numba' from 'C:\\Users\\zl4821\\Anaconda3\\envs\\GBS\\lib\\site-packages\\numba\\__init__.py'>) ['$2load_global.0']
    $4load_attr.1 = getattr(value=$2load_global.0, attr=parfors) ['$2load_global.0', '$4load_attr.1']
    $6load_attr.2 = getattr(value=$4load_attr.1, attr=parfor) ['$4load_attr.1', '$6load_attr.2']
    $8load_method.3 = getattr(value=$6load_attr.2, attr=init_prange) ['$6load_attr.2', '$8load_method.3']
    $10call_method.4 = call $8load_method.3(func=$8load_method.3, args=[], kws=(), vararg=None, target=None) ['$10call_method.4', '$8load_method.3']
    $14load_global.5 = global(max_checker: <function max_checker at 0x0000024103BE6F70>) ['$14load_global.5']
    $16load_global.6 = global(len: <built-in function len>) ['$16load_global.6']
    $20call_function.8 = call $16load_global.6(in_arr, func=$16load_global.6, args=[Var(in_arr, parfor.py:154)], kws=(), vararg=None, target=None) ['$16load_global.6', '$20call_function.8', 'in_arr']
    $22call_function.9 = call $14load_global.5($20call_function.8, func=$14load_global.5, args=[Var($20call_function.8, parfor.py:155)], kws=(), vararg=None, target=None) ['$14load_global.5', '$20call_function.8', '$22call_function.9']
    $26load_global.10 = global(numba: <module 'numba' from 'C:\\Users\\zl4821\\Anaconda3\\envs\\GBS\\lib\\site-packages\\numba\\__init__.py'>) ['$26load_global.10']
    $28load_attr.11 = getattr(value=$26load_global.10, attr=cpython) ['$26load_global.10', '$28load_attr.11']
    $30load_attr.12 = getattr(value=$28load_attr.11, attr=builtins) ['$28load_attr.11', '$30load_attr.12']
    $32load_method.13 = getattr(value=$30load_attr.12, attr=get_type_min_value) ['$30load_attr.12', '$32load_method.13']
    $36load_attr.15 = getattr(value=in_arr, attr=dtype) ['$36load_attr.15', 'in_arr']
    val = call $32load_method.13($36load_attr.15, func=$32load_method.13, args=[Var($36load_attr.15, parfor.py:156)], kws=(), vararg=None, target=None) ['$32load_method.13', '$36load_attr.15', 'val']
    $42load_global.17 = global(numba: <module 'numba' from 'C:\\Users\\zl4821\\Anaconda3\\envs\\GBS\\lib\\site-packages\\numba\\__init__.py'>) ['$42load_global.17']
    $44load_attr.18 = getattr(value=$42load_global.17, attr=parfors) ['$42load_global.17', '$44load_attr.18']
    $46load_attr.19 = getattr(value=$44load_attr.18, attr=parfor) ['$44load_attr.18', '$46load_attr.19']
    $48load_method.20 = getattr(value=$46load_attr.19, attr=internal_prange) ['$46load_attr.19', '$48load_method.20']
    $50load_global.21 = global(len: <built-in function len>) ['$50load_global.21']
    $54call_function.23 = call $50load_global.21(in_arr, func=$50load_global.21, args=[Var(in_arr, parfor.py:154)], kws=(), vararg=None, target=None) ['$50load_global.21', '$54call_function.23', 'in_arr']
    $56call_method.24 = call $48load_method.20($54call_function.23, func=$48load_method.20, args=[Var($54call_function.23, parfor.py:157)], kws=(), vararg=None, target=None) ['$48load_method.20', '$54call_function.23', '$56call_method.24']
    $58get_iter.25 = getiter(value=$56call_method.24) ['$56call_method.24', '$58get_iter.25']
    $phi60.0 = $58get_iter.25                ['$58get_iter.25', '$phi60.0']
    jump 60                                  []
label 60:
    $60for_iter.1 = iternext(value=$phi60.0) ['$60for_iter.1', '$phi60.0']
    $60for_iter.2 = pair_first(value=$60for_iter.1) ['$60for_iter.1', '$60for_iter.2']
    $60for_iter.3 = pair_second(value=$60for_iter.1) ['$60for_iter.1', '$60for_iter.3']
    $phi62.1 = $60for_iter.2                 ['$60for_iter.2', '$phi62.1']
    branch $60for_iter.3, 62, 80             ['$60for_iter.3']
label 62:
    i = $phi62.1                             ['$phi62.1', 'i']
    $64load_global.2 = global(max: <built-in function max>) ['$64load_global.2']
    $72binary_subscr.6 = getitem(value=in_arr, index=i, fn=<built-in function getitem>) ['$72binary_subscr.6', 'i', 'in_arr']
    val = call $64load_global.2(val, $72binary_subscr.6, func=$64load_global.2, args=[Var(val, parfor.py:156), Var($72binary_subscr.6, parfor.py:158)], kws=(), vararg=None, target=None) ['$64load_global.2', '$72binary_subscr.6', 'val', 'val']
    jump 60                                  []
label 80:
    $82return_value.1 = cast(value=val)      ['$82return_value.1', 'val']
    return $82return_value.1                 ['$82return_value.1']

DEBUG 2022-01-28 15:49:35,196 bytecode dump:
>          0	NOP(arg=None, lineno=2)
           2	LOAD_FAST(arg=2, lineno=2)
           4	LOAD_CONST(arg=1, lineno=2)
           6	BINARY_SUBSCR(arg=None, lineno=2)
           8	STORE_FAST(arg=3, lineno=2)
          10	LOAD_GLOBAL(arg=0, lineno=3)
          12	LOAD_FAST(arg=0, lineno=3)
          14	LOAD_CONST(arg=1, lineno=3)
          16	BINARY_SUBSCR(arg=None, lineno=3)
          18	LOAD_FAST(arg=0, lineno=3)
          20	LOAD_CONST(arg=2, lineno=3)
          22	BINARY_SUBSCR(arg=None, lineno=3)
          24	LOAD_GLOBAL(arg=1, lineno=3)
          26	LOAD_METHOD(arg=2, lineno=3)
          28	LOAD_CONST(arg=2, lineno=3)
          30	CALL_METHOD(arg=1, lineno=3)
          32	BINARY_ADD(arg=None, lineno=3)
          34	CALL_FUNCTION(arg=2, lineno=3)
          36	GET_ITER(arg=None, lineno=3)
>         38	FOR_ITER(arg=8, lineno=3)
          40	STORE_FAST(arg=4, lineno=3)
          42	LOAD_CONST(arg=1, lineno=4)
          44	STORE_FAST(arg=5, lineno=4)
          46	JUMP_ABSOLUTE(arg=38, lineno=4)
>         48	LOAD_FAST(arg=3, lineno=5)
          50	LOAD_FAST(arg=2, lineno=5)
          52	LOAD_CONST(arg=1, lineno=5)
          54	STORE_SUBSCR(arg=None, lineno=5)
          56	LOAD_CONST(arg=0, lineno=6)
          58	RETURN_VALUE(arg=None, lineno=6)
DEBUG 2022-01-28 15:49:35,196 pending: deque([State(pc_initial=0 nstack_initial=0)])
DEBUG 2022-01-28 15:49:35,196 stack: []
DEBUG 2022-01-28 15:49:35,196 dispatch pc=0, inst=NOP(arg=None, lineno=2)
DEBUG 2022-01-28 15:49:35,196 stack []
DEBUG 2022-01-28 15:49:35,196 dispatch pc=2, inst=LOAD_FAST(arg=2, lineno=2)
DEBUG 2022-01-28 15:49:35,196 stack []
DEBUG 2022-01-28 15:49:35,196 dispatch pc=4, inst=LOAD_CONST(arg=1, lineno=2)
DEBUG 2022-01-28 15:49:35,196 stack ['$val_1179__arr2.0']
DEBUG 2022-01-28 15:49:35,196 dispatch pc=6, inst=BINARY_SUBSCR(arg=None, lineno=2)
DEBUG 2022-01-28 15:49:35,196 stack ['$val_1179__arr2.0', '$const4.1']
DEBUG 2022-01-28 15:49:35,196 dispatch pc=8, inst=STORE_FAST(arg=3, lineno=2)
DEBUG 2022-01-28 15:49:35,196 stack ['$6binary_subscr.2']
DEBUG 2022-01-28 15:49:35,196 dispatch pc=10, inst=LOAD_GLOBAL(arg=0, lineno=3)
DEBUG 2022-01-28 15:49:35,196 stack []
DEBUG 2022-01-28 15:49:35,196 dispatch pc=12, inst=LOAD_FAST(arg=0, lineno=3)
DEBUG 2022-01-28 15:49:35,196 stack ['$10load_global.3']
DEBUG 2022-01-28 15:49:35,196 dispatch pc=14, inst=LOAD_CONST(arg=1, lineno=3)
DEBUG 2022-01-28 15:49:35,196 stack ['$10load_global.3', '$sched12.4']
DEBUG 2022-01-28 15:49:35,196 dispatch pc=16, inst=BINARY_SUBSCR(arg=None, lineno=3)
DEBUG 2022-01-28 15:49:35,196 stack ['$10load_global.3', '$sched12.4', '$const14.5']
DEBUG 2022-01-28 15:49:35,196 dispatch pc=18, inst=LOAD_FAST(arg=0, lineno=3)
DEBUG 2022-01-28 15:49:35,196 stack ['$10load_global.3', '$16binary_subscr.6']
DEBUG 2022-01-28 15:49:35,196 dispatch pc=20, inst=LOAD_CONST(arg=2, lineno=3)
DEBUG 2022-01-28 15:49:35,196 stack ['$10load_global.3', '$16binary_subscr.6', '$sched18.7']
DEBUG 2022-01-28 15:49:35,196 dispatch pc=22, inst=BINARY_SUBSCR(arg=None, lineno=3)
DEBUG 2022-01-28 15:49:35,196 stack ['$10load_global.3', '$16binary_subscr.6', '$sched18.7', '$const20.8']
DEBUG 2022-01-28 15:49:35,196 dispatch pc=24, inst=LOAD_GLOBAL(arg=1, lineno=3)
DEBUG 2022-01-28 15:49:35,196 stack ['$10load_global.3', '$16binary_subscr.6', '$22binary_subscr.9']
DEBUG 2022-01-28 15:49:35,196 dispatch pc=26, inst=LOAD_METHOD(arg=2, lineno=3)
DEBUG 2022-01-28 15:49:35,196 stack ['$10load_global.3', '$16binary_subscr.6', '$22binary_subscr.9', '$24load_global.10']
DEBUG 2022-01-28 15:49:35,196 dispatch pc=28, inst=LOAD_CONST(arg=2, lineno=3)
DEBUG 2022-01-28 15:49:35,196 stack ['$10load_global.3', '$16binary_subscr.6', '$22binary_subscr.9', '$26load_method.11']
DEBUG 2022-01-28 15:49:35,196 dispatch pc=30, inst=CALL_METHOD(arg=1, lineno=3)
DEBUG 2022-01-28 15:49:35,196 stack ['$10load_global.3', '$16binary_subscr.6', '$22binary_subscr.9', '$26load_method.11', '$const28.12']
DEBUG 2022-01-28 15:49:35,196 dispatch pc=32, inst=BINARY_ADD(arg=None, lineno=3)
DEBUG 2022-01-28 15:49:35,196 stack ['$10load_global.3', '$16binary_subscr.6', '$22binary_subscr.9', '$30call_method.13']
DEBUG 2022-01-28 15:49:35,196 dispatch pc=34, inst=CALL_FUNCTION(arg=2, lineno=3)
DEBUG 2022-01-28 15:49:35,196 stack ['$10load_global.3', '$16binary_subscr.6', '$32binary_add.14']
DEBUG 2022-01-28 15:49:35,196 dispatch pc=36, inst=GET_ITER(arg=None, lineno=3)
DEBUG 2022-01-28 15:49:35,196 stack ['$34call_function.15']
DEBUG 2022-01-28 15:49:35,196 end state. edges=[Edge(pc=38, stack=('$36get_iter.16',), blockstack=(), npush=0)]
DEBUG 2022-01-28 15:49:35,196 pending: deque([State(pc_initial=38 nstack_initial=1)])
DEBUG 2022-01-28 15:49:35,196 stack: ['$phi38.0']
DEBUG 2022-01-28 15:49:35,196 dispatch pc=38, inst=FOR_ITER(arg=8, lineno=3)
DEBUG 2022-01-28 15:49:35,196 stack ['$phi38.0']
DEBUG 2022-01-28 15:49:35,196 end state. edges=[Edge(pc=48, stack=(), blockstack=(), npush=0), Edge(pc=40, stack=('$phi38.0', '$38for_iter.2'), blockstack=(), npush=0)]
DEBUG 2022-01-28 15:49:35,196 pending: deque([State(pc_initial=48 nstack_initial=0), State(pc_initial=40 nstack_initial=2)])
DEBUG 2022-01-28 15:49:35,196 stack: []
DEBUG 2022-01-28 15:49:35,196 dispatch pc=48, inst=LOAD_FAST(arg=3, lineno=5)
DEBUG 2022-01-28 15:49:35,204 stack []
DEBUG 2022-01-28 15:49:35,204 dispatch pc=50, inst=LOAD_FAST(arg=2, lineno=5)
DEBUG 2022-01-28 15:49:35,204 stack ['$val_117948.0']
DEBUG 2022-01-28 15:49:35,204 dispatch pc=52, inst=LOAD_CONST(arg=1, lineno=5)
DEBUG 2022-01-28 15:49:35,204 stack ['$val_117948.0', '$val_1179__arr50.1']
DEBUG 2022-01-28 15:49:35,204 dispatch pc=54, inst=STORE_SUBSCR(arg=None, lineno=5)
DEBUG 2022-01-28 15:49:35,204 stack ['$val_117948.0', '$val_1179__arr50.1', '$const52.2']
DEBUG 2022-01-28 15:49:35,204 dispatch pc=56, inst=LOAD_CONST(arg=0, lineno=6)
DEBUG 2022-01-28 15:49:35,204 stack []
DEBUG 2022-01-28 15:49:35,204 dispatch pc=58, inst=RETURN_VALUE(arg=None, lineno=6)
DEBUG 2022-01-28 15:49:35,204 stack ['$const56.3']
DEBUG 2022-01-28 15:49:35,204 end state. edges=[]
DEBUG 2022-01-28 15:49:35,204 pending: deque([State(pc_initial=40 nstack_initial=2)])
DEBUG 2022-01-28 15:49:35,204 stack: ['$phi40.0', '$phi40.1']
DEBUG 2022-01-28 15:49:35,204 dispatch pc=40, inst=STORE_FAST(arg=4, lineno=3)
DEBUG 2022-01-28 15:49:35,204 stack ['$phi40.0', '$phi40.1']
DEBUG 2022-01-28 15:49:35,204 dispatch pc=42, inst=LOAD_CONST(arg=1, lineno=4)
DEBUG 2022-01-28 15:49:35,204 stack ['$phi40.0']
DEBUG 2022-01-28 15:49:35,204 dispatch pc=44, inst=STORE_FAST(arg=5, lineno=4)
DEBUG 2022-01-28 15:49:35,204 stack ['$phi40.0', '$const42.2']
DEBUG 2022-01-28 15:49:35,204 dispatch pc=46, inst=JUMP_ABSOLUTE(arg=38, lineno=4)
DEBUG 2022-01-28 15:49:35,204 stack ['$phi40.0']
DEBUG 2022-01-28 15:49:35,204 end state. edges=[Edge(pc=38, stack=('$phi40.0',), blockstack=(), npush=0)]
DEBUG 2022-01-28 15:49:35,206 pending: deque([State(pc_initial=38 nstack_initial=1)])
DEBUG 2022-01-28 15:49:35,206 -------------------------Prune PHIs-------------------------
DEBUG 2022-01-28 15:49:35,206 Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=38 nstack_initial=1): {'$phi38.0'},
             State(pc_initial=40 nstack_initial=2): {'$phi40.1'},
             State(pc_initial=48 nstack_initial=0): set()})
DEBUG 2022-01-28 15:49:35,206 defmap: {'$phi38.0': State(pc_initial=0 nstack_initial=0),
 '$phi40.1': State(pc_initial=38 nstack_initial=1)}
DEBUG 2022-01-28 15:49:35,206 phismap: defaultdict(<class 'set'>,
            {'$phi38.0': {('$36get_iter.16',
                           State(pc_initial=0 nstack_initial=0)),
                          ('$phi40.0', State(pc_initial=40 nstack_initial=2))},
             '$phi40.0': {('$phi38.0', State(pc_initial=38 nstack_initial=1))},
             '$phi40.1': {('$38for_iter.2',
                           State(pc_initial=38 nstack_initial=1))}})
DEBUG 2022-01-28 15:49:35,206 changing phismap: defaultdict(<class 'set'>,
            {'$phi38.0': {('$36get_iter.16',
                           State(pc_initial=0 nstack_initial=0)),
                          ('$phi38.0', State(pc_initial=38 nstack_initial=1))},
             '$phi40.0': {('$36get_iter.16',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi40.1': {('$38for_iter.2',
                           State(pc_initial=38 nstack_initial=1))}})
DEBUG 2022-01-28 15:49:35,206 changing phismap: defaultdict(<class 'set'>,
            {'$phi38.0': {('$36get_iter.16',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi40.0': {('$36get_iter.16',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi40.1': {('$38for_iter.2',
                           State(pc_initial=38 nstack_initial=1))}})
DEBUG 2022-01-28 15:49:35,206 changing phismap: defaultdict(<class 'set'>,
            {'$phi38.0': {('$36get_iter.16',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi40.0': {('$36get_iter.16',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi40.1': {('$38for_iter.2',
                           State(pc_initial=38 nstack_initial=1))}})
DEBUG 2022-01-28 15:49:35,206 keep phismap: {'$phi38.0': {('$36get_iter.16', State(pc_initial=0 nstack_initial=0))},
 '$phi40.1': {('$38for_iter.2', State(pc_initial=38 nstack_initial=1))}}
DEBUG 2022-01-28 15:49:35,206 new_out: defaultdict(<class 'dict'>,
            {State(pc_initial=0 nstack_initial=0): {'$phi38.0': '$36get_iter.16'},
             State(pc_initial=38 nstack_initial=1): {'$phi40.1': '$38for_iter.2'}})
DEBUG 2022-01-28 15:49:35,206 ----------------------DONE Prune PHIs-----------------------
DEBUG 2022-01-28 15:49:35,206 block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$val_1179__arr2.0'}), (4, {'res': '$const4.1'}), (6, {'index': '$const4.1', 'target': '$val_1179__arr2.0', 'res': '$6binary_subscr.2'}), (8, {'value': '$6binary_subscr.2'}), (10, {'res': '$10load_global.3'}), (12, {'res': '$sched12.4'}), (14, {'res': '$const14.5'}), (16, {'index': '$const14.5', 'target': '$sched12.4', 'res': '$16binary_subscr.6'}), (18, {'res': '$sched18.7'}), (20, {'res': '$const20.8'}), (22, {'index': '$const20.8', 'target': '$sched18.7', 'res': '$22binary_subscr.9'}), (24, {'res': '$24load_global.10'}), (26, {'item': '$24load_global.10', 'res': '$26load_method.11'}), (28, {'res': '$const28.12'}), (30, {'func': '$26load_method.11', 'args': ['$const28.12'], 'res': '$30call_method.13'}), (32, {'lhs': '$22binary_subscr.9', 'rhs': '$30call_method.13', 'res': '$32binary_add.14'}), (34, {'func': '$10load_global.3', 'args': ['$16binary_subscr.6', '$32binary_add.14'], 'res': '$34call_function.15'}), (36, {'value': '$34call_function.15', 'res': '$36get_iter.16'})), outgoing_phis={'$phi38.0': '$36get_iter.16'}, blockstack=(), active_try_block=None, outgoing_edgepushed={38: ('$36get_iter.16',)})
DEBUG 2022-01-28 15:49:35,206 block_infos State(pc_initial=38 nstack_initial=1):
AdaptBlockInfo(insts=((38, {'iterator': '$phi38.0', 'pair': '$38for_iter.1', 'indval': '$38for_iter.2', 'pred': '$38for_iter.3'}),), outgoing_phis={'$phi40.1': '$38for_iter.2'}, blockstack=(), active_try_block=None, outgoing_edgepushed={48: (), 40: ('$phi38.0', '$38for_iter.2')})
DEBUG 2022-01-28 15:49:35,206 block_infos State(pc_initial=40 nstack_initial=2):
AdaptBlockInfo(insts=((40, {'value': '$phi40.1'}), (42, {'res': '$const42.2'}), (44, {'value': '$const42.2'}), (46, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={38: ('$phi40.0',)})
DEBUG 2022-01-28 15:49:35,206 block_infos State(pc_initial=48 nstack_initial=0):
AdaptBlockInfo(insts=((48, {'res': '$val_117948.0'}), (50, {'res': '$val_1179__arr50.1'}), (52, {'res': '$const52.2'}), (54, {'target': '$val_1179__arr50.1', 'index': '$const52.2', 'value': '$val_117948.0'}), (56, {'res': '$const56.3'}), (58, {'retval': '$const56.3', 'castval': '$58return_value.4'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG 2022-01-28 15:49:35,206 label 0:
    sched = arg(0, name=sched)               ['sched']
    fixed__edge__reps = arg(1, name=fixed__edge__reps) ['fixed__edge__reps']
    val_1179__arr = arg(2, name=val_1179__arr) ['val_1179__arr']
    $const4.1 = const(int, 0)                ['$const4.1']
    val_1179 = getitem(value=val_1179__arr, index=$const4.1, fn=<built-in function getitem>) ['$const4.1', 'val_1179', 'val_1179__arr']
    $10load_global.3 = global(range: <class 'range'>) ['$10load_global.3']
    $const14.5 = const(int, 0)               ['$const14.5']
    $16binary_subscr.6 = getitem(value=sched, index=$const14.5, fn=<built-in function getitem>) ['$16binary_subscr.6', '$const14.5', 'sched']
    $const20.8 = const(int, 1)               ['$const20.8']
    $22binary_subscr.9 = getitem(value=sched, index=$const20.8, fn=<built-in function getitem>) ['$22binary_subscr.9', '$const20.8', 'sched']
    $24load_global.10 = global(np: <module 'numpy' from 'C:\\Users\\zl4821\\Anaconda3\\envs\\GBS\\lib\\site-packages\\numpy\\__init__.py'>) ['$24load_global.10']
    $26load_method.11 = getattr(value=$24load_global.10, attr=uint8) ['$24load_global.10', '$26load_method.11']
    $const28.12 = const(int, 1)              ['$const28.12']
    $30call_method.13 = call $26load_method.11($const28.12, func=$26load_method.11, args=[Var($const28.12, <string>:3)], kws=(), vararg=None, target=None) ['$26load_method.11', '$30call_method.13', '$const28.12']
    $32binary_add.14 = $22binary_subscr.9 + $30call_method.13 ['$22binary_subscr.9', '$30call_method.13', '$32binary_add.14']
    $34call_function.15 = call $10load_global.3($16binary_subscr.6, $32binary_add.14, func=$10load_global.3, args=[Var($16binary_subscr.6, <string>:3), Var($32binary_add.14, <string>:3)], kws=(), vararg=None, target=None) ['$10load_global.3', '$16binary_subscr.6', '$32binary_add.14', '$34call_function.15']
    $36get_iter.16 = getiter(value=$34call_function.15) ['$34call_function.15', '$36get_iter.16']
    $phi38.0 = $36get_iter.16                ['$36get_iter.16', '$phi38.0']
    jump 38                                  []
label 38:
    $38for_iter.1 = iternext(value=$phi38.0) ['$38for_iter.1', '$phi38.0']
    $38for_iter.2 = pair_first(value=$38for_iter.1) ['$38for_iter.1', '$38for_iter.2']
    $38for_iter.3 = pair_second(value=$38for_iter.1) ['$38for_iter.1', '$38for_iter.3']
    $phi40.1 = $38for_iter.2                 ['$38for_iter.2', '$phi40.1']
    branch $38for_iter.3, 40, 48             ['$38for_iter.3']
label 40:
    parfor__index_1363 = $phi40.1            ['$phi40.1', 'parfor__index_1363']
    __sentinel__0 = const(int, 0)            ['__sentinel__0']
    jump 38                                  []
label 48:
    $const52.2 = const(int, 0)               ['$const52.2']
    val_1179__arr[$const52.2] = val_1179     ['$const52.2', 'val_1179', 'val_1179__arr']
    $const56.3 = const(NoneType, None)       ['$const56.3']
    $58return_value.4 = cast(value=$const56.3) ['$58return_value.4', '$const56.3']
    return $58return_value.4                 ['$58return_value.4']

DEBUG 2022-01-28 15:49:35,214 ==== SSA block analysis pass on 0
DEBUG 2022-01-28 15:49:35,214 Running <numba.core.ssa._GatherDefsHandler object at 0x000002410C8F5DF0>
DEBUG 2022-01-28 15:49:35,214 on stmt: sched.1784 = arg(0, name=sched)
DEBUG 2022-01-28 15:49:35,214 on stmt: fixed__edge__reps = arg(1, name=fixed__edge__reps)
DEBUG 2022-01-28 15:49:35,214 on stmt: val_1179__arr = arg(2, name=val_1179__arr)
DEBUG 2022-01-28 15:49:35,214 on stmt: $const4.1.1785 = const(int, 0)
DEBUG 2022-01-28 15:49:35,214 on stmt: val_1179 = getitem(value=val_1179__arr, index=$const4.1.1785, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:35,214 on stmt: $10load_global.3.1786 = global(range: <class 'range'>)
DEBUG 2022-01-28 15:49:35,214 on stmt: $const14.5.1787 = const(int, 0)
DEBUG 2022-01-28 15:49:35,214 on stmt: $16binary_subscr.6.1788 = getitem(value=sched.1784, index=$const14.5.1787, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:35,214 on stmt: $const20.8.1789 = const(int, 1)
DEBUG 2022-01-28 15:49:35,216 on stmt: $22binary_subscr.9.1790 = getitem(value=sched.1784, index=$const20.8.1789, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:35,216 on stmt: $24load_global.10.1791 = global(np: <module 'numpy' from 'C:\\Users\\zl4821\\Anaconda3\\envs\\GBS\\lib\\site-packages\\numpy\\__init__.py'>)
DEBUG 2022-01-28 15:49:35,216 on stmt: $26load_method.11.1792 = getattr(value=$24load_global.10.1791, attr=uint8)
DEBUG 2022-01-28 15:49:35,216 on stmt: $const28.12.1793 = const(int, 1)
DEBUG 2022-01-28 15:49:35,216 on stmt: $30call_method.13.1794 = call $26load_method.11.1792($const28.12.1793, func=$26load_method.11.1792, args=[Var($const28.12.1793, <string>:3)], kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:35,216 on stmt: $32binary_add.14.1795 = $22binary_subscr.9.1790 + $30call_method.13.1794
DEBUG 2022-01-28 15:49:35,216 on stmt: $34call_function.15.1796 = call $10load_global.3.1786($16binary_subscr.6.1788, $32binary_add.14.1795, func=$10load_global.3.1786, args=[Var($16binary_subscr.6.1788, <string>:3), Var($32binary_add.14.1795, <string>:3)], kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:35,216 on stmt: $36get_iter.16.1797 = getiter(value=$34call_function.15.1796)
DEBUG 2022-01-28 15:49:35,216 on stmt: $phi38.0.1798 = $36get_iter.16.1797
DEBUG 2022-01-28 15:49:35,216 on stmt: jump 38
DEBUG 2022-01-28 15:49:35,216 ==== SSA block analysis pass on 38
DEBUG 2022-01-28 15:49:35,216 Running <numba.core.ssa._GatherDefsHandler object at 0x000002410C8F5DF0>
DEBUG 2022-01-28 15:49:35,216 on stmt: $38for_iter.1.1799 = iternext(value=$phi38.0.1798)
DEBUG 2022-01-28 15:49:35,216 on stmt: $38for_iter.2.1800 = pair_first(value=$38for_iter.1.1799)
DEBUG 2022-01-28 15:49:35,216 on stmt: $38for_iter.3.1801 = pair_second(value=$38for_iter.1.1799)
DEBUG 2022-01-28 15:49:35,216 on stmt: $phi40.1.1802 = $38for_iter.2.1800
DEBUG 2022-01-28 15:49:35,216 on stmt: branch $38for_iter.3.1801, 40, 212
DEBUG 2022-01-28 15:49:35,216 ==== SSA block analysis pass on 40
DEBUG 2022-01-28 15:49:35,216 Running <numba.core.ssa._GatherDefsHandler object at 0x000002410C8F5DF0>
DEBUG 2022-01-28 15:49:35,216 on stmt: parfor__index_1363 = $phi40.1.1802
DEBUG 2022-01-28 15:49:35,216 on stmt: jump 48
DEBUG 2022-01-28 15:49:35,216 ==== SSA block analysis pass on 212
DEBUG 2022-01-28 15:49:35,216 Running <numba.core.ssa._GatherDefsHandler object at 0x000002410C8F5DF0>
DEBUG 2022-01-28 15:49:35,216 on stmt: $const52.2.1803 = const(int, 0)
DEBUG 2022-01-28 15:49:35,216 on stmt: val_1179__arr[$const52.2.1803] = val_1179
DEBUG 2022-01-28 15:49:35,216 on stmt: $const56.3.1804 = const(NoneType, None)
DEBUG 2022-01-28 15:49:35,216 on stmt: $58return_value.4.1805 = cast(value=$const56.3.1804)
DEBUG 2022-01-28 15:49:35,216 on stmt: return $58return_value.4.1805
DEBUG 2022-01-28 15:49:35,216 ==== SSA block analysis pass on 48
DEBUG 2022-01-28 15:49:35,216 Running <numba.core.ssa._GatherDefsHandler object at 0x000002410C8F5DF0>
DEBUG 2022-01-28 15:49:35,216 on stmt: $46binary_subscr.5.1198 = getitem(value=fixed__edge__reps, index=parfor__index_1363, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:35,216 on stmt: $val.1179.1737 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=val_1179, rhs=$46binary_subscr.5.1198, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-01-28 15:49:35,216 on stmt: val_1179 = $val.1179.1737
DEBUG 2022-01-28 15:49:35,216 on stmt: jump 211
DEBUG 2022-01-28 15:49:35,216 ==== SSA block analysis pass on 211
DEBUG 2022-01-28 15:49:35,216 Running <numba.core.ssa._GatherDefsHandler object at 0x000002410C8F5DF0>
DEBUG 2022-01-28 15:49:35,216 on stmt: jump 38
DEBUG 2022-01-28 15:49:35,216 defs defaultdict(<class 'list'>,
            {'$10load_global.3.1786': [<numba.core.ir.Assign object at 0x000002410C884BE0>],
             '$16binary_subscr.6.1788': [<numba.core.ir.Assign object at 0x000002410C8F1220>],
             '$22binary_subscr.9.1790': [<numba.core.ir.Assign object at 0x000002410C8F16A0>],
             '$24load_global.10.1791': [<numba.core.ir.Assign object at 0x000002410C8F1550>],
             '$26load_method.11.1792': [<numba.core.ir.Assign object at 0x000002410C8F13D0>],
             '$30call_method.13.1794': [<numba.core.ir.Assign object at 0x000002410C8F1AF0>],
             '$32binary_add.14.1795': [<numba.core.ir.Assign object at 0x000002410C8F1C10>],
             '$34call_function.15.1796': [<numba.core.ir.Assign object at 0x000002410C8F1DC0>],
             '$36get_iter.16.1797': [<numba.core.ir.Assign object at 0x000002410C8F1EE0>],
             '$38for_iter.1.1799': [<numba.core.ir.Assign object at 0x000002410C8F2130>],
             '$38for_iter.2.1800': [<numba.core.ir.Assign object at 0x000002410C8F2250>],
             '$38for_iter.3.1801': [<numba.core.ir.Assign object at 0x000002410C8F2370>],
             '$46binary_subscr.5.1198': [<numba.core.ir.Assign object at 0x000002410E1D1F70>],
             '$58return_value.4.1805': [<numba.core.ir.Assign object at 0x000002410C8F31C0>],
             '$const14.5.1787': [<numba.core.ir.Assign object at 0x000002410C884E80>],
             '$const20.8.1789': [<numba.core.ir.Assign object at 0x000002410C8F1850>],
             '$const28.12.1793': [<numba.core.ir.Assign object at 0x000002410C8F1160>],
             '$const4.1.1785': [<numba.core.ir.Assign object at 0x000002410C8847C0>],
             '$const52.2.1803': [<numba.core.ir.Assign object at 0x000002410C8F2DC0>],
             '$const56.3.1804': [<numba.core.ir.Assign object at 0x000002410C8F3040>],
             '$phi38.0.1798': [<numba.core.ir.Assign object at 0x000002410C8846D0>],
             '$phi40.1.1802': [<numba.core.ir.Assign object at 0x000002410C8F2070>],
             '$val.1179.1737': [<numba.core.ir.Assign object at 0x000002410E173100>],
             'fixed__edge__reps': [<numba.core.ir.Assign object at 0x000002410C884400>],
             'parfor__index_1363': [<numba.core.ir.Assign object at 0x000002410C8F2640>],
             'sched.1784': [<numba.core.ir.Assign object at 0x000002410C8842E0>],
             'val_1179': [<numba.core.ir.Assign object at 0x000002410C884970>,
                          <numba.core.ir.Assign object at 0x000002410E176430>],
             'val_1179__arr': [<numba.core.ir.Assign object at 0x000002410C884520>]})
DEBUG 2022-01-28 15:49:35,216 SSA violators {'val_1179'}
DEBUG 2022-01-28 15:49:35,216 Fix SSA violator on var val_1179
DEBUG 2022-01-28 15:49:35,216 ==== SSA block rewrite pass on 0
DEBUG 2022-01-28 15:49:35,216 Running <numba.core.ssa._FreshVarHandler object at 0x000002410C8F5FA0>
DEBUG 2022-01-28 15:49:35,216 on stmt: sched.1784 = arg(0, name=sched)
DEBUG 2022-01-28 15:49:35,216 on stmt: fixed__edge__reps = arg(1, name=fixed__edge__reps)
DEBUG 2022-01-28 15:49:35,216 on stmt: val_1179__arr = arg(2, name=val_1179__arr)
DEBUG 2022-01-28 15:49:35,216 on stmt: $const4.1.1785 = const(int, 0)
DEBUG 2022-01-28 15:49:35,216 on stmt: val_1179 = getitem(value=val_1179__arr, index=$const4.1.1785, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:35,216 first assign: val_1179
DEBUG 2022-01-28 15:49:35,216 replaced with: val_1179 = getitem(value=val_1179__arr, index=$const4.1.1785, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:35,216 on stmt: $10load_global.3.1786 = global(range: <class 'range'>)
DEBUG 2022-01-28 15:49:35,216 on stmt: $const14.5.1787 = const(int, 0)
DEBUG 2022-01-28 15:49:35,216 on stmt: $16binary_subscr.6.1788 = getitem(value=sched.1784, index=$const14.5.1787, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:35,216 on stmt: $const20.8.1789 = const(int, 1)
DEBUG 2022-01-28 15:49:35,216 on stmt: $22binary_subscr.9.1790 = getitem(value=sched.1784, index=$const20.8.1789, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:35,216 on stmt: $24load_global.10.1791 = global(np: <module 'numpy' from 'C:\\Users\\zl4821\\Anaconda3\\envs\\GBS\\lib\\site-packages\\numpy\\__init__.py'>)
DEBUG 2022-01-28 15:49:35,216 on stmt: $26load_method.11.1792 = getattr(value=$24load_global.10.1791, attr=uint8)
DEBUG 2022-01-28 15:49:35,216 on stmt: $const28.12.1793 = const(int, 1)
DEBUG 2022-01-28 15:49:35,216 on stmt: $30call_method.13.1794 = call $26load_method.11.1792($const28.12.1793, func=$26load_method.11.1792, args=[Var($const28.12.1793, <string>:3)], kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:35,216 on stmt: $32binary_add.14.1795 = $22binary_subscr.9.1790 + $30call_method.13.1794
DEBUG 2022-01-28 15:49:35,216 on stmt: $34call_function.15.1796 = call $10load_global.3.1786($16binary_subscr.6.1788, $32binary_add.14.1795, func=$10load_global.3.1786, args=[Var($16binary_subscr.6.1788, <string>:3), Var($32binary_add.14.1795, <string>:3)], kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:35,216 on stmt: $36get_iter.16.1797 = getiter(value=$34call_function.15.1796)
DEBUG 2022-01-28 15:49:35,216 on stmt: $phi38.0.1798 = $36get_iter.16.1797
DEBUG 2022-01-28 15:49:35,216 on stmt: jump 38
DEBUG 2022-01-28 15:49:35,216 ==== SSA block rewrite pass on 38
DEBUG 2022-01-28 15:49:35,216 Running <numba.core.ssa._FreshVarHandler object at 0x000002410C8F5FA0>
DEBUG 2022-01-28 15:49:35,216 on stmt: $38for_iter.1.1799 = iternext(value=$phi38.0.1798)
DEBUG 2022-01-28 15:49:35,216 on stmt: $38for_iter.2.1800 = pair_first(value=$38for_iter.1.1799)
DEBUG 2022-01-28 15:49:35,216 on stmt: $38for_iter.3.1801 = pair_second(value=$38for_iter.1.1799)
DEBUG 2022-01-28 15:49:35,216 on stmt: $phi40.1.1802 = $38for_iter.2.1800
DEBUG 2022-01-28 15:49:35,216 on stmt: branch $38for_iter.3.1801, 40, 212
DEBUG 2022-01-28 15:49:35,216 ==== SSA block rewrite pass on 40
DEBUG 2022-01-28 15:49:35,216 Running <numba.core.ssa._FreshVarHandler object at 0x000002410C8F5FA0>
DEBUG 2022-01-28 15:49:35,216 on stmt: parfor__index_1363 = $phi40.1.1802
DEBUG 2022-01-28 15:49:35,216 on stmt: jump 48
DEBUG 2022-01-28 15:49:35,216 ==== SSA block rewrite pass on 212
DEBUG 2022-01-28 15:49:35,216 Running <numba.core.ssa._FreshVarHandler object at 0x000002410C8F5FA0>
DEBUG 2022-01-28 15:49:35,216 on stmt: $const52.2.1803 = const(int, 0)
DEBUG 2022-01-28 15:49:35,216 on stmt: val_1179__arr[$const52.2.1803] = val_1179
DEBUG 2022-01-28 15:49:35,216 on stmt: $const56.3.1804 = const(NoneType, None)
DEBUG 2022-01-28 15:49:35,216 on stmt: $58return_value.4.1805 = cast(value=$const56.3.1804)
DEBUG 2022-01-28 15:49:35,216 on stmt: return $58return_value.4.1805
DEBUG 2022-01-28 15:49:35,216 ==== SSA block rewrite pass on 48
DEBUG 2022-01-28 15:49:35,216 Running <numba.core.ssa._FreshVarHandler object at 0x000002410C8F5FA0>
DEBUG 2022-01-28 15:49:35,216 on stmt: $46binary_subscr.5.1198 = getitem(value=fixed__edge__reps, index=parfor__index_1363, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:35,216 on stmt: $val.1179.1737 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=val_1179, rhs=$46binary_subscr.5.1198, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-01-28 15:49:35,224 on stmt: val_1179 = $val.1179.1737
DEBUG 2022-01-28 15:49:35,224 replaced with: val_1179.1 = $val.1179.1737
DEBUG 2022-01-28 15:49:35,224 on stmt: jump 211
DEBUG 2022-01-28 15:49:35,224 ==== SSA block rewrite pass on 211
DEBUG 2022-01-28 15:49:35,224 Running <numba.core.ssa._FreshVarHandler object at 0x000002410C8F5FA0>
DEBUG 2022-01-28 15:49:35,224 on stmt: jump 38
DEBUG 2022-01-28 15:49:35,224 Replaced assignments: defaultdict(<class 'list'>,
            {0: [<numba.core.ir.Assign object at 0x000002410C8F5D60>],
             48: [<numba.core.ir.Assign object at 0x000002410C8F5A90>]})
DEBUG 2022-01-28 15:49:35,224 ==== SSA block rewrite pass on 0
DEBUG 2022-01-28 15:49:35,224 Running <numba.core.ssa._FixSSAVars object at 0x000002410C8F5FA0>
DEBUG 2022-01-28 15:49:35,224 on stmt: sched.1784 = arg(0, name=sched)
DEBUG 2022-01-28 15:49:35,224 on stmt: fixed__edge__reps = arg(1, name=fixed__edge__reps)
DEBUG 2022-01-28 15:49:35,224 on stmt: val_1179__arr = arg(2, name=val_1179__arr)
DEBUG 2022-01-28 15:49:35,224 on stmt: $const4.1.1785 = const(int, 0)
DEBUG 2022-01-28 15:49:35,224 on stmt: val_1179 = getitem(value=val_1179__arr, index=$const4.1.1785, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:35,224 on stmt: $10load_global.3.1786 = global(range: <class 'range'>)
DEBUG 2022-01-28 15:49:35,224 on stmt: $const14.5.1787 = const(int, 0)
DEBUG 2022-01-28 15:49:35,224 on stmt: $16binary_subscr.6.1788 = getitem(value=sched.1784, index=$const14.5.1787, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:35,224 on stmt: $const20.8.1789 = const(int, 1)
DEBUG 2022-01-28 15:49:35,224 on stmt: $22binary_subscr.9.1790 = getitem(value=sched.1784, index=$const20.8.1789, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:35,224 on stmt: $24load_global.10.1791 = global(np: <module 'numpy' from 'C:\\Users\\zl4821\\Anaconda3\\envs\\GBS\\lib\\site-packages\\numpy\\__init__.py'>)
DEBUG 2022-01-28 15:49:35,224 on stmt: $26load_method.11.1792 = getattr(value=$24load_global.10.1791, attr=uint8)
DEBUG 2022-01-28 15:49:35,224 on stmt: $const28.12.1793 = const(int, 1)
DEBUG 2022-01-28 15:49:35,226 on stmt: $30call_method.13.1794 = call $26load_method.11.1792($const28.12.1793, func=$26load_method.11.1792, args=[Var($const28.12.1793, <string>:3)], kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:35,226 on stmt: $32binary_add.14.1795 = $22binary_subscr.9.1790 + $30call_method.13.1794
DEBUG 2022-01-28 15:49:35,226 on stmt: $34call_function.15.1796 = call $10load_global.3.1786($16binary_subscr.6.1788, $32binary_add.14.1795, func=$10load_global.3.1786, args=[Var($16binary_subscr.6.1788, <string>:3), Var($32binary_add.14.1795, <string>:3)], kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:35,226 on stmt: $36get_iter.16.1797 = getiter(value=$34call_function.15.1796)
DEBUG 2022-01-28 15:49:35,226 on stmt: $phi38.0.1798 = $36get_iter.16.1797
DEBUG 2022-01-28 15:49:35,226 on stmt: jump 38
DEBUG 2022-01-28 15:49:35,226 ==== SSA block rewrite pass on 38
DEBUG 2022-01-28 15:49:35,226 Running <numba.core.ssa._FixSSAVars object at 0x000002410C8F5FA0>
DEBUG 2022-01-28 15:49:35,226 on stmt: $38for_iter.1.1799 = iternext(value=$phi38.0.1798)
DEBUG 2022-01-28 15:49:35,226 on stmt: $38for_iter.2.1800 = pair_first(value=$38for_iter.1.1799)
DEBUG 2022-01-28 15:49:35,226 on stmt: $38for_iter.3.1801 = pair_second(value=$38for_iter.1.1799)
DEBUG 2022-01-28 15:49:35,226 on stmt: $phi40.1.1802 = $38for_iter.2.1800
DEBUG 2022-01-28 15:49:35,226 on stmt: branch $38for_iter.3.1801, 40, 212
DEBUG 2022-01-28 15:49:35,226 ==== SSA block rewrite pass on 40
DEBUG 2022-01-28 15:49:35,226 Running <numba.core.ssa._FixSSAVars object at 0x000002410C8F5FA0>
DEBUG 2022-01-28 15:49:35,226 on stmt: parfor__index_1363 = $phi40.1.1802
DEBUG 2022-01-28 15:49:35,226 on stmt: jump 48
DEBUG 2022-01-28 15:49:35,226 ==== SSA block rewrite pass on 212
DEBUG 2022-01-28 15:49:35,226 Running <numba.core.ssa._FixSSAVars object at 0x000002410C8F5FA0>
DEBUG 2022-01-28 15:49:35,226 on stmt: $const52.2.1803 = const(int, 0)
DEBUG 2022-01-28 15:49:35,226 on stmt: val_1179__arr[$const52.2.1803] = val_1179
DEBUG 2022-01-28 15:49:35,226 find_def var='val_1179' stmt=val_1179__arr[$const52.2.1803] = val_1179
DEBUG 2022-01-28 15:49:35,226 find_def_from_top label 212
DEBUG 2022-01-28 15:49:35,226 idom 38 from label 212
DEBUG 2022-01-28 15:49:35,226 find_def_from_bottom label 38
DEBUG 2022-01-28 15:49:35,226 find_def_from_top label 38
DEBUG 2022-01-28 15:49:35,226 insert phi node val_1179.2 = phi(incoming_values=[], incoming_blocks=[]) at 38
DEBUG 2022-01-28 15:49:35,226 find_def_from_bottom label 0
DEBUG 2022-01-28 15:49:35,226 incoming_def val_1179 = getitem(value=val_1179__arr, index=$const4.1.1785, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:35,226 find_def_from_bottom label 211
DEBUG 2022-01-28 15:49:35,226 find_def_from_top label 211
DEBUG 2022-01-28 15:49:35,226 idom 48 from label 211
DEBUG 2022-01-28 15:49:35,226 find_def_from_bottom label 48
DEBUG 2022-01-28 15:49:35,226 incoming_def val_1179.1 = $val.1179.1737
DEBUG 2022-01-28 15:49:35,226 replaced with: val_1179__arr[$const52.2.1803] = val_1179.2
DEBUG 2022-01-28 15:49:35,226 on stmt: $const56.3.1804 = const(NoneType, None)
DEBUG 2022-01-28 15:49:35,226 on stmt: $58return_value.4.1805 = cast(value=$const56.3.1804)
DEBUG 2022-01-28 15:49:35,226 on stmt: return $58return_value.4.1805
DEBUG 2022-01-28 15:49:35,226 ==== SSA block rewrite pass on 48
DEBUG 2022-01-28 15:49:35,226 Running <numba.core.ssa._FixSSAVars object at 0x000002410C8F5FA0>
DEBUG 2022-01-28 15:49:35,226 on stmt: $46binary_subscr.5.1198 = getitem(value=fixed__edge__reps, index=parfor__index_1363, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:35,226 on stmt: $val.1179.1737 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=val_1179, rhs=$46binary_subscr.5.1198, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-01-28 15:49:35,226 find_def var='val_1179' stmt=$val.1179.1737 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=val_1179, rhs=$46binary_subscr.5.1198, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-01-28 15:49:35,226 find_def_from_top label 48
DEBUG 2022-01-28 15:49:35,226 idom 40 from label 48
DEBUG 2022-01-28 15:49:35,226 find_def_from_bottom label 40
DEBUG 2022-01-28 15:49:35,226 find_def_from_top label 40
DEBUG 2022-01-28 15:49:35,226 idom 38 from label 40
DEBUG 2022-01-28 15:49:35,226 find_def_from_bottom label 38
DEBUG 2022-01-28 15:49:35,226 replaced with: $val.1179.1737 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=val_1179.2, rhs=$46binary_subscr.5.1198, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-01-28 15:49:35,226 on stmt: val_1179.1 = $val.1179.1737
DEBUG 2022-01-28 15:49:35,226 on stmt: jump 211
DEBUG 2022-01-28 15:49:35,226 ==== SSA block rewrite pass on 211
DEBUG 2022-01-28 15:49:35,226 Running <numba.core.ssa._FixSSAVars object at 0x000002410C8F5FA0>
DEBUG 2022-01-28 15:49:35,226 on stmt: jump 38
DEBUG 2022-01-28 15:49:35,612 bytecode dump:
>          0	NOP(arg=None, lineno=2)
           2	LOAD_FAST(arg=2, lineno=2)
           4	LOAD_CONST(arg=1, lineno=2)
           6	BINARY_SUBSCR(arg=None, lineno=2)
           8	STORE_FAST(arg=4, lineno=2)
          10	LOAD_FAST(arg=3, lineno=3)
          12	LOAD_CONST(arg=1, lineno=3)
          14	BINARY_SUBSCR(arg=None, lineno=3)
          16	STORE_FAST(arg=5, lineno=3)
          18	LOAD_GLOBAL(arg=0, lineno=4)
          20	LOAD_FAST(arg=0, lineno=4)
          22	LOAD_CONST(arg=1, lineno=4)
          24	BINARY_SUBSCR(arg=None, lineno=4)
          26	LOAD_FAST(arg=0, lineno=4)
          28	LOAD_CONST(arg=2, lineno=4)
          30	BINARY_SUBSCR(arg=None, lineno=4)
          32	LOAD_GLOBAL(arg=1, lineno=4)
          34	LOAD_METHOD(arg=2, lineno=4)
          36	LOAD_CONST(arg=2, lineno=4)
          38	CALL_METHOD(arg=1, lineno=4)
          40	BINARY_ADD(arg=None, lineno=4)
          42	CALL_FUNCTION(arg=2, lineno=4)
          44	GET_ITER(arg=None, lineno=4)
>         46	FOR_ITER(arg=8, lineno=4)
          48	STORE_FAST(arg=6, lineno=4)
          50	LOAD_CONST(arg=1, lineno=5)
          52	STORE_FAST(arg=7, lineno=5)
          54	JUMP_ABSOLUTE(arg=46, lineno=5)
>         56	LOAD_FAST(arg=4, lineno=6)
          58	LOAD_FAST(arg=2, lineno=6)
          60	LOAD_CONST(arg=1, lineno=6)
          62	STORE_SUBSCR(arg=None, lineno=6)
          64	LOAD_FAST(arg=5, lineno=7)
          66	LOAD_FAST(arg=3, lineno=7)
          68	LOAD_CONST(arg=1, lineno=7)
          70	STORE_SUBSCR(arg=None, lineno=7)
          72	LOAD_CONST(arg=0, lineno=8)
          74	RETURN_VALUE(arg=None, lineno=8)
DEBUG 2022-01-28 15:49:35,612 pending: deque([State(pc_initial=0 nstack_initial=0)])
DEBUG 2022-01-28 15:49:35,612 stack: []
DEBUG 2022-01-28 15:49:35,612 dispatch pc=0, inst=NOP(arg=None, lineno=2)
DEBUG 2022-01-28 15:49:35,612 stack []
DEBUG 2022-01-28 15:49:35,612 dispatch pc=2, inst=LOAD_FAST(arg=2, lineno=2)
DEBUG 2022-01-28 15:49:35,612 stack []
DEBUG 2022-01-28 15:49:35,612 dispatch pc=4, inst=LOAD_CONST(arg=1, lineno=2)
DEBUG 2022-01-28 15:49:35,612 stack ['$val_1250__arr2.0']
DEBUG 2022-01-28 15:49:35,612 dispatch pc=6, inst=BINARY_SUBSCR(arg=None, lineno=2)
DEBUG 2022-01-28 15:49:35,612 stack ['$val_1250__arr2.0', '$const4.1']
DEBUG 2022-01-28 15:49:35,612 dispatch pc=8, inst=STORE_FAST(arg=4, lineno=2)
DEBUG 2022-01-28 15:49:35,612 stack ['$6binary_subscr.2']
DEBUG 2022-01-28 15:49:35,612 dispatch pc=10, inst=LOAD_FAST(arg=3, lineno=3)
DEBUG 2022-01-28 15:49:35,612 stack []
DEBUG 2022-01-28 15:49:35,612 dispatch pc=12, inst=LOAD_CONST(arg=1, lineno=3)
DEBUG 2022-01-28 15:49:35,612 stack ['$val_1209__arr10.3']
DEBUG 2022-01-28 15:49:35,614 dispatch pc=14, inst=BINARY_SUBSCR(arg=None, lineno=3)
DEBUG 2022-01-28 15:49:35,614 stack ['$val_1209__arr10.3', '$const12.4']
DEBUG 2022-01-28 15:49:35,614 dispatch pc=16, inst=STORE_FAST(arg=5, lineno=3)
DEBUG 2022-01-28 15:49:35,614 stack ['$14binary_subscr.5']
DEBUG 2022-01-28 15:49:35,614 dispatch pc=18, inst=LOAD_GLOBAL(arg=0, lineno=4)
DEBUG 2022-01-28 15:49:35,614 stack []
DEBUG 2022-01-28 15:49:35,614 dispatch pc=20, inst=LOAD_FAST(arg=0, lineno=4)
DEBUG 2022-01-28 15:49:35,614 stack ['$18load_global.6']
DEBUG 2022-01-28 15:49:35,614 dispatch pc=22, inst=LOAD_CONST(arg=1, lineno=4)
DEBUG 2022-01-28 15:49:35,614 stack ['$18load_global.6', '$sched20.7']
DEBUG 2022-01-28 15:49:35,614 dispatch pc=24, inst=BINARY_SUBSCR(arg=None, lineno=4)
DEBUG 2022-01-28 15:49:35,614 stack ['$18load_global.6', '$sched20.7', '$const22.8']
DEBUG 2022-01-28 15:49:35,614 dispatch pc=26, inst=LOAD_FAST(arg=0, lineno=4)
DEBUG 2022-01-28 15:49:35,614 stack ['$18load_global.6', '$24binary_subscr.9']
DEBUG 2022-01-28 15:49:35,614 dispatch pc=28, inst=LOAD_CONST(arg=2, lineno=4)
DEBUG 2022-01-28 15:49:35,614 stack ['$18load_global.6', '$24binary_subscr.9', '$sched26.10']
DEBUG 2022-01-28 15:49:35,614 dispatch pc=30, inst=BINARY_SUBSCR(arg=None, lineno=4)
DEBUG 2022-01-28 15:49:35,614 stack ['$18load_global.6', '$24binary_subscr.9', '$sched26.10', '$const28.11']
DEBUG 2022-01-28 15:49:35,614 dispatch pc=32, inst=LOAD_GLOBAL(arg=1, lineno=4)
DEBUG 2022-01-28 15:49:35,614 stack ['$18load_global.6', '$24binary_subscr.9', '$30binary_subscr.12']
DEBUG 2022-01-28 15:49:35,614 dispatch pc=34, inst=LOAD_METHOD(arg=2, lineno=4)
DEBUG 2022-01-28 15:49:35,614 stack ['$18load_global.6', '$24binary_subscr.9', '$30binary_subscr.12', '$32load_global.13']
DEBUG 2022-01-28 15:49:35,614 dispatch pc=36, inst=LOAD_CONST(arg=2, lineno=4)
DEBUG 2022-01-28 15:49:35,614 stack ['$18load_global.6', '$24binary_subscr.9', '$30binary_subscr.12', '$34load_method.14']
DEBUG 2022-01-28 15:49:35,614 dispatch pc=38, inst=CALL_METHOD(arg=1, lineno=4)
DEBUG 2022-01-28 15:49:35,614 stack ['$18load_global.6', '$24binary_subscr.9', '$30binary_subscr.12', '$34load_method.14', '$const36.15']
DEBUG 2022-01-28 15:49:35,614 dispatch pc=40, inst=BINARY_ADD(arg=None, lineno=4)
DEBUG 2022-01-28 15:49:35,614 stack ['$18load_global.6', '$24binary_subscr.9', '$30binary_subscr.12', '$38call_method.16']
DEBUG 2022-01-28 15:49:35,614 dispatch pc=42, inst=CALL_FUNCTION(arg=2, lineno=4)
DEBUG 2022-01-28 15:49:35,614 stack ['$18load_global.6', '$24binary_subscr.9', '$40binary_add.17']
DEBUG 2022-01-28 15:49:35,614 dispatch pc=44, inst=GET_ITER(arg=None, lineno=4)
DEBUG 2022-01-28 15:49:35,614 stack ['$42call_function.18']
DEBUG 2022-01-28 15:49:35,614 end state. edges=[Edge(pc=46, stack=('$44get_iter.19',), blockstack=(), npush=0)]
DEBUG 2022-01-28 15:49:35,614 pending: deque([State(pc_initial=46 nstack_initial=1)])
DEBUG 2022-01-28 15:49:35,614 stack: ['$phi46.0']
DEBUG 2022-01-28 15:49:35,614 dispatch pc=46, inst=FOR_ITER(arg=8, lineno=4)
DEBUG 2022-01-28 15:49:35,614 stack ['$phi46.0']
DEBUG 2022-01-28 15:49:35,614 end state. edges=[Edge(pc=56, stack=(), blockstack=(), npush=0), Edge(pc=48, stack=('$phi46.0', '$46for_iter.2'), blockstack=(), npush=0)]
DEBUG 2022-01-28 15:49:35,614 pending: deque([State(pc_initial=56 nstack_initial=0), State(pc_initial=48 nstack_initial=2)])
DEBUG 2022-01-28 15:49:35,614 stack: []
DEBUG 2022-01-28 15:49:35,614 dispatch pc=56, inst=LOAD_FAST(arg=4, lineno=6)
DEBUG 2022-01-28 15:49:35,614 stack []
DEBUG 2022-01-28 15:49:35,614 dispatch pc=58, inst=LOAD_FAST(arg=2, lineno=6)
DEBUG 2022-01-28 15:49:35,614 stack ['$val_125056.0']
DEBUG 2022-01-28 15:49:35,614 dispatch pc=60, inst=LOAD_CONST(arg=1, lineno=6)
DEBUG 2022-01-28 15:49:35,614 stack ['$val_125056.0', '$val_1250__arr58.1']
DEBUG 2022-01-28 15:49:35,614 dispatch pc=62, inst=STORE_SUBSCR(arg=None, lineno=6)
DEBUG 2022-01-28 15:49:35,614 stack ['$val_125056.0', '$val_1250__arr58.1', '$const60.2']
DEBUG 2022-01-28 15:49:35,614 dispatch pc=64, inst=LOAD_FAST(arg=5, lineno=7)
DEBUG 2022-01-28 15:49:35,614 stack []
DEBUG 2022-01-28 15:49:35,614 dispatch pc=66, inst=LOAD_FAST(arg=3, lineno=7)
DEBUG 2022-01-28 15:49:35,614 stack ['$val_120964.3']
DEBUG 2022-01-28 15:49:35,614 dispatch pc=68, inst=LOAD_CONST(arg=1, lineno=7)
DEBUG 2022-01-28 15:49:35,614 stack ['$val_120964.3', '$val_1209__arr66.4']
DEBUG 2022-01-28 15:49:35,614 dispatch pc=70, inst=STORE_SUBSCR(arg=None, lineno=7)
DEBUG 2022-01-28 15:49:35,614 stack ['$val_120964.3', '$val_1209__arr66.4', '$const68.5']
DEBUG 2022-01-28 15:49:35,614 dispatch pc=72, inst=LOAD_CONST(arg=0, lineno=8)
DEBUG 2022-01-28 15:49:35,614 stack []
DEBUG 2022-01-28 15:49:35,614 dispatch pc=74, inst=RETURN_VALUE(arg=None, lineno=8)
DEBUG 2022-01-28 15:49:35,614 stack ['$const72.6']
DEBUG 2022-01-28 15:49:35,614 end state. edges=[]
DEBUG 2022-01-28 15:49:35,614 pending: deque([State(pc_initial=48 nstack_initial=2)])
DEBUG 2022-01-28 15:49:35,614 stack: ['$phi48.0', '$phi48.1']
DEBUG 2022-01-28 15:49:35,614 dispatch pc=48, inst=STORE_FAST(arg=6, lineno=4)
DEBUG 2022-01-28 15:49:35,614 stack ['$phi48.0', '$phi48.1']
DEBUG 2022-01-28 15:49:35,614 dispatch pc=50, inst=LOAD_CONST(arg=1, lineno=5)
DEBUG 2022-01-28 15:49:35,614 stack ['$phi48.0']
DEBUG 2022-01-28 15:49:35,614 dispatch pc=52, inst=STORE_FAST(arg=7, lineno=5)
DEBUG 2022-01-28 15:49:35,614 stack ['$phi48.0', '$const50.2']
DEBUG 2022-01-28 15:49:35,614 dispatch pc=54, inst=JUMP_ABSOLUTE(arg=46, lineno=5)
DEBUG 2022-01-28 15:49:35,614 stack ['$phi48.0']
DEBUG 2022-01-28 15:49:35,614 end state. edges=[Edge(pc=46, stack=('$phi48.0',), blockstack=(), npush=0)]
DEBUG 2022-01-28 15:49:35,614 pending: deque([State(pc_initial=46 nstack_initial=1)])
DEBUG 2022-01-28 15:49:35,614 -------------------------Prune PHIs-------------------------
DEBUG 2022-01-28 15:49:35,614 Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=46 nstack_initial=1): {'$phi46.0'},
             State(pc_initial=48 nstack_initial=2): {'$phi48.1'},
             State(pc_initial=56 nstack_initial=0): set()})
DEBUG 2022-01-28 15:49:35,614 defmap: {'$phi46.0': State(pc_initial=0 nstack_initial=0),
 '$phi48.1': State(pc_initial=46 nstack_initial=1)}
DEBUG 2022-01-28 15:49:35,614 phismap: defaultdict(<class 'set'>,
            {'$phi46.0': {('$44get_iter.19',
                           State(pc_initial=0 nstack_initial=0)),
                          ('$phi48.0', State(pc_initial=48 nstack_initial=2))},
             '$phi48.0': {('$phi46.0', State(pc_initial=46 nstack_initial=1))},
             '$phi48.1': {('$46for_iter.2',
                           State(pc_initial=46 nstack_initial=1))}})
DEBUG 2022-01-28 15:49:35,614 changing phismap: defaultdict(<class 'set'>,
            {'$phi46.0': {('$44get_iter.19',
                           State(pc_initial=0 nstack_initial=0)),
                          ('$phi46.0', State(pc_initial=46 nstack_initial=1))},
             '$phi48.0': {('$44get_iter.19',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi48.1': {('$46for_iter.2',
                           State(pc_initial=46 nstack_initial=1))}})
DEBUG 2022-01-28 15:49:35,614 changing phismap: defaultdict(<class 'set'>,
            {'$phi46.0': {('$44get_iter.19',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi48.0': {('$44get_iter.19',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi48.1': {('$46for_iter.2',
                           State(pc_initial=46 nstack_initial=1))}})
DEBUG 2022-01-28 15:49:35,614 changing phismap: defaultdict(<class 'set'>,
            {'$phi46.0': {('$44get_iter.19',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi48.0': {('$44get_iter.19',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi48.1': {('$46for_iter.2',
                           State(pc_initial=46 nstack_initial=1))}})
DEBUG 2022-01-28 15:49:35,622 keep phismap: {'$phi46.0': {('$44get_iter.19', State(pc_initial=0 nstack_initial=0))},
 '$phi48.1': {('$46for_iter.2', State(pc_initial=46 nstack_initial=1))}}
DEBUG 2022-01-28 15:49:35,622 new_out: defaultdict(<class 'dict'>,
            {State(pc_initial=0 nstack_initial=0): {'$phi46.0': '$44get_iter.19'},
             State(pc_initial=46 nstack_initial=1): {'$phi48.1': '$46for_iter.2'}})
DEBUG 2022-01-28 15:49:35,622 ----------------------DONE Prune PHIs-----------------------
DEBUG 2022-01-28 15:49:35,622 block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$val_1250__arr2.0'}), (4, {'res': '$const4.1'}), (6, {'index': '$const4.1', 'target': '$val_1250__arr2.0', 'res': '$6binary_subscr.2'}), (8, {'value': '$6binary_subscr.2'}), (10, {'res': '$val_1209__arr10.3'}), (12, {'res': '$const12.4'}), (14, {'index': '$const12.4', 'target': '$val_1209__arr10.3', 'res': '$14binary_subscr.5'}), (16, {'value': '$14binary_subscr.5'}), (18, {'res': '$18load_global.6'}), (20, {'res': '$sched20.7'}), (22, {'res': '$const22.8'}), (24, {'index': '$const22.8', 'target': '$sched20.7', 'res': '$24binary_subscr.9'}), (26, {'res': '$sched26.10'}), (28, {'res': '$const28.11'}), (30, {'index': '$const28.11', 'target': '$sched26.10', 'res': '$30binary_subscr.12'}), (32, {'res': '$32load_global.13'}), (34, {'item': '$32load_global.13', 'res': '$34load_method.14'}), (36, {'res': '$const36.15'}), (38, {'func': '$34load_method.14', 'args': ['$const36.15'], 'res': '$38call_method.16'}), (40, {'lhs': '$30binary_subscr.12', 'rhs': '$38call_method.16', 'res': '$40binary_add.17'}), (42, {'func': '$18load_global.6', 'args': ['$24binary_subscr.9', '$40binary_add.17'], 'res': '$42call_function.18'}), (44, {'value': '$42call_function.18', 'res': '$44get_iter.19'})), outgoing_phis={'$phi46.0': '$44get_iter.19'}, blockstack=(), active_try_block=None, outgoing_edgepushed={46: ('$44get_iter.19',)})
DEBUG 2022-01-28 15:49:35,622 block_infos State(pc_initial=46 nstack_initial=1):
AdaptBlockInfo(insts=((46, {'iterator': '$phi46.0', 'pair': '$46for_iter.1', 'indval': '$46for_iter.2', 'pred': '$46for_iter.3'}),), outgoing_phis={'$phi48.1': '$46for_iter.2'}, blockstack=(), active_try_block=None, outgoing_edgepushed={56: (), 48: ('$phi46.0', '$46for_iter.2')})
DEBUG 2022-01-28 15:49:35,622 block_infos State(pc_initial=48 nstack_initial=2):
AdaptBlockInfo(insts=((48, {'value': '$phi48.1'}), (50, {'res': '$const50.2'}), (52, {'value': '$const50.2'}), (54, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={46: ('$phi48.0',)})
DEBUG 2022-01-28 15:49:35,622 block_infos State(pc_initial=56 nstack_initial=0):
AdaptBlockInfo(insts=((56, {'res': '$val_125056.0'}), (58, {'res': '$val_1250__arr58.1'}), (60, {'res': '$const60.2'}), (62, {'target': '$val_1250__arr58.1', 'index': '$const60.2', 'value': '$val_125056.0'}), (64, {'res': '$val_120964.3'}), (66, {'res': '$val_1209__arr66.4'}), (68, {'res': '$const68.5'}), (70, {'target': '$val_1209__arr66.4', 'index': '$const68.5', 'value': '$val_120964.3'}), (72, {'res': '$const72.6'}), (74, {'retval': '$const72.6', 'castval': '$74return_value.7'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG 2022-01-28 15:49:35,624 label 0:
    sched = arg(0, name=sched)               ['sched']
    edge__reps = arg(1, name=edge__reps)     ['edge__reps']
    val_1250__arr = arg(2, name=val_1250__arr) ['val_1250__arr']
    val_1209__arr = arg(3, name=val_1209__arr) ['val_1209__arr']
    $const4.1 = const(int, 0)                ['$const4.1']
    val_1250 = getitem(value=val_1250__arr, index=$const4.1, fn=<built-in function getitem>) ['$const4.1', 'val_1250', 'val_1250__arr']
    $const12.4 = const(int, 0)               ['$const12.4']
    val_1209 = getitem(value=val_1209__arr, index=$const12.4, fn=<built-in function getitem>) ['$const12.4', 'val_1209', 'val_1209__arr']
    $18load_global.6 = global(range: <class 'range'>) ['$18load_global.6']
    $const22.8 = const(int, 0)               ['$const22.8']
    $24binary_subscr.9 = getitem(value=sched, index=$const22.8, fn=<built-in function getitem>) ['$24binary_subscr.9', '$const22.8', 'sched']
    $const28.11 = const(int, 1)              ['$const28.11']
    $30binary_subscr.12 = getitem(value=sched, index=$const28.11, fn=<built-in function getitem>) ['$30binary_subscr.12', '$const28.11', 'sched']
    $32load_global.13 = global(np: <module 'numpy' from 'C:\\Users\\zl4821\\Anaconda3\\envs\\GBS\\lib\\site-packages\\numpy\\__init__.py'>) ['$32load_global.13']
    $34load_method.14 = getattr(value=$32load_global.13, attr=uint8) ['$32load_global.13', '$34load_method.14']
    $const36.15 = const(int, 1)              ['$const36.15']
    $38call_method.16 = call $34load_method.14($const36.15, func=$34load_method.14, args=[Var($const36.15, <string>:4)], kws=(), vararg=None, target=None) ['$34load_method.14', '$38call_method.16', '$const36.15']
    $40binary_add.17 = $30binary_subscr.12 + $38call_method.16 ['$30binary_subscr.12', '$38call_method.16', '$40binary_add.17']
    $42call_function.18 = call $18load_global.6($24binary_subscr.9, $40binary_add.17, func=$18load_global.6, args=[Var($24binary_subscr.9, <string>:4), Var($40binary_add.17, <string>:4)], kws=(), vararg=None, target=None) ['$18load_global.6', '$24binary_subscr.9', '$40binary_add.17', '$42call_function.18']
    $44get_iter.19 = getiter(value=$42call_function.18) ['$42call_function.18', '$44get_iter.19']
    $phi46.0 = $44get_iter.19                ['$44get_iter.19', '$phi46.0']
    jump 46                                  []
label 46:
    $46for_iter.1 = iternext(value=$phi46.0) ['$46for_iter.1', '$phi46.0']
    $46for_iter.2 = pair_first(value=$46for_iter.1) ['$46for_iter.1', '$46for_iter.2']
    $46for_iter.3 = pair_second(value=$46for_iter.1) ['$46for_iter.1', '$46for_iter.3']
    $phi48.1 = $46for_iter.2                 ['$46for_iter.2', '$phi48.1']
    branch $46for_iter.3, 48, 56             ['$46for_iter.3']
label 48:
    parfor__index_1335 = $phi48.1            ['$phi48.1', 'parfor__index_1335']
    __sentinel__0 = const(int, 0)            ['__sentinel__0']
    jump 46                                  []
label 56:
    $const60.2 = const(int, 0)               ['$const60.2']
    val_1250__arr[$const60.2] = val_1250     ['$const60.2', 'val_1250', 'val_1250__arr']
    $const68.5 = const(int, 0)               ['$const68.5']
    val_1209__arr[$const68.5] = val_1209     ['$const68.5', 'val_1209', 'val_1209__arr']
    $const72.6 = const(NoneType, None)       ['$const72.6']
    $74return_value.7 = cast(value=$const72.6) ['$74return_value.7', '$const72.6']
    return $74return_value.7                 ['$74return_value.7']

DEBUG 2022-01-28 15:49:35,624 ==== SSA block analysis pass on 0
DEBUG 2022-01-28 15:49:35,624 Running <numba.core.ssa._GatherDefsHandler object at 0x000002410E22ABB0>
DEBUG 2022-01-28 15:49:35,624 on stmt: sched.1860 = arg(0, name=sched)
DEBUG 2022-01-28 15:49:35,624 on stmt: edge__reps = arg(1, name=edge__reps)
DEBUG 2022-01-28 15:49:35,624 on stmt: val_1250__arr = arg(2, name=val_1250__arr)
DEBUG 2022-01-28 15:49:35,624 on stmt: val_1209__arr = arg(3, name=val_1209__arr)
DEBUG 2022-01-28 15:49:35,624 on stmt: $const4.1.1861 = const(int, 0)
DEBUG 2022-01-28 15:49:35,624 on stmt: val_1250 = getitem(value=val_1250__arr, index=$const4.1.1861, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:35,624 on stmt: $const12.4.1862 = const(int, 0)
DEBUG 2022-01-28 15:49:35,624 on stmt: val_1209 = getitem(value=val_1209__arr, index=$const12.4.1862, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:35,624 on stmt: $18load_global.6.1863 = global(range: <class 'range'>)
DEBUG 2022-01-28 15:49:35,624 on stmt: $const22.8.1864 = const(int, 0)
DEBUG 2022-01-28 15:49:35,624 on stmt: $24binary_subscr.9.1865 = getitem(value=sched.1860, index=$const22.8.1864, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:35,624 on stmt: $const28.11.1866 = const(int, 1)
DEBUG 2022-01-28 15:49:35,624 on stmt: $30binary_subscr.12.1867 = getitem(value=sched.1860, index=$const28.11.1866, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:35,624 on stmt: $32load_global.13.1868 = global(np: <module 'numpy' from 'C:\\Users\\zl4821\\Anaconda3\\envs\\GBS\\lib\\site-packages\\numpy\\__init__.py'>)
DEBUG 2022-01-28 15:49:35,624 on stmt: $34load_method.14.1869 = getattr(value=$32load_global.13.1868, attr=uint8)
DEBUG 2022-01-28 15:49:35,624 on stmt: $const36.15.1870 = const(int, 1)
DEBUG 2022-01-28 15:49:35,624 on stmt: $38call_method.16.1871 = call $34load_method.14.1869($const36.15.1870, func=$34load_method.14.1869, args=[Var($const36.15.1870, <string>:4)], kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:35,624 on stmt: $40binary_add.17.1872 = $30binary_subscr.12.1867 + $38call_method.16.1871
DEBUG 2022-01-28 15:49:35,632 on stmt: $42call_function.18.1873 = call $18load_global.6.1863($24binary_subscr.9.1865, $40binary_add.17.1872, func=$18load_global.6.1863, args=[Var($24binary_subscr.9.1865, <string>:4), Var($40binary_add.17.1872, <string>:4)], kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:35,632 on stmt: $44get_iter.19.1874 = getiter(value=$42call_function.18.1873)
DEBUG 2022-01-28 15:49:35,632 on stmt: $phi46.0.1875 = $44get_iter.19.1874
DEBUG 2022-01-28 15:49:35,632 on stmt: $arg_out_var.1341 = const(int, 1)
DEBUG 2022-01-28 15:49:35,632 on stmt: $64load_global.2.1266 = global(max: <built-in function max>)
DEBUG 2022-01-28 15:49:35,632 on stmt: jump 46
DEBUG 2022-01-28 15:49:35,632 ==== SSA block analysis pass on 46
DEBUG 2022-01-28 15:49:35,632 Running <numba.core.ssa._GatherDefsHandler object at 0x000002410E22ABB0>
DEBUG 2022-01-28 15:49:35,632 on stmt: $46for_iter.1.1876 = iternext(value=$phi46.0.1875)
DEBUG 2022-01-28 15:49:35,632 on stmt: $46for_iter.2.1877 = pair_first(value=$46for_iter.1.1876)
DEBUG 2022-01-28 15:49:35,632 on stmt: $46for_iter.3.1878 = pair_second(value=$46for_iter.1.1876)
DEBUG 2022-01-28 15:49:35,632 on stmt: $phi48.1.1879 = $46for_iter.2.1877
DEBUG 2022-01-28 15:49:35,632 on stmt: branch $46for_iter.3.1878, 48, 1227
DEBUG 2022-01-28 15:49:35,632 ==== SSA block analysis pass on 48
DEBUG 2022-01-28 15:49:35,632 Running <numba.core.ssa._GatherDefsHandler object at 0x000002410E22ABB0>
DEBUG 2022-01-28 15:49:35,632 on stmt: parfor__index_1335 = $phi48.1.1879
DEBUG 2022-01-28 15:49:35,632 on stmt: jump 56
DEBUG 2022-01-28 15:49:35,632 ==== SSA block analysis pass on 1227
DEBUG 2022-01-28 15:49:35,632 Running <numba.core.ssa._GatherDefsHandler object at 0x000002410E22ABB0>
DEBUG 2022-01-28 15:49:35,632 on stmt: $const60.2.1880 = const(int, 0)
DEBUG 2022-01-28 15:49:35,632 on stmt: val_1250__arr[$const60.2.1880] = val_1250
DEBUG 2022-01-28 15:49:35,632 on stmt: $const68.5.1881 = const(int, 0)
DEBUG 2022-01-28 15:49:35,634 on stmt: val_1209__arr[$const68.5.1881] = val_1209
DEBUG 2022-01-28 15:49:35,634 on stmt: $const72.6.1882 = const(NoneType, None)
DEBUG 2022-01-28 15:49:35,634 on stmt: $74return_value.7.1883 = cast(value=$const72.6.1882)
DEBUG 2022-01-28 15:49:35,634 on stmt: return $74return_value.7.1883
DEBUG 2022-01-28 15:49:35,634 ==== SSA block analysis pass on 56
DEBUG 2022-01-28 15:49:35,634 Running <numba.core.ssa._GatherDefsHandler object at 0x000002410E22ABB0>
DEBUG 2022-01-28 15:49:35,634 on stmt: $arg_out_var.1340 = getitem(value=edge__reps, index=parfor__index_1335, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:35,634 on stmt: $expr_out_var.1339 = $arg_out_var.1340 + $arg_out_var.1341
DEBUG 2022-01-28 15:49:35,634 on stmt: $val.1209.1738 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=val_1209, rhs=$expr_out_var.1339, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-01-28 15:49:35,634 on stmt: val_1209 = $val.1209.1738
DEBUG 2022-01-28 15:49:35,634 on stmt: $72binary_subscr.6.1270 = getitem(value=edge__reps, index=parfor__index_1335, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:35,634 on stmt: val_1250 = call $64load_global.2.1266(val_1250, $72binary_subscr.6.1270, func=$64load_global.2.1266, args=[Var(val_1250, parfor.py:156), Var($72binary_subscr.6.1270, parfor.py:158)], kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:35,634 on stmt: jump 1226
DEBUG 2022-01-28 15:49:35,634 ==== SSA block analysis pass on 1226
DEBUG 2022-01-28 15:49:35,634 Running <numba.core.ssa._GatherDefsHandler object at 0x000002410E22ABB0>
DEBUG 2022-01-28 15:49:35,634 on stmt: jump 46
DEBUG 2022-01-28 15:49:35,634 defs defaultdict(<class 'list'>,
            {'$18load_global.6.1863': [<numba.core.ir.Assign object at 0x000002410C96E490>],
             '$24binary_subscr.9.1865': [<numba.core.ir.Assign object at 0x000002410C96E8E0>],
             '$30binary_subscr.12.1867': [<numba.core.ir.Assign object at 0x000002410C96ED00>],
             '$32load_global.13.1868': [<numba.core.ir.Assign object at 0x000002410C96EE50>],
             '$34load_method.14.1869': [<numba.core.ir.Assign object at 0x000002410C96EFD0>],
             '$38call_method.16.1871': [<numba.core.ir.Assign object at 0x000002410C9413A0>],
             '$40binary_add.17.1872': [<numba.core.ir.Assign object at 0x000002410C9414C0>],
             '$42call_function.18.1873': [<numba.core.ir.Assign object at 0x000002410C941670>],
             '$44get_iter.19.1874': [<numba.core.ir.Assign object at 0x000002410C941790>],
             '$46for_iter.1.1876': [<numba.core.ir.Assign object at 0x000002410C9418E0>],
             '$46for_iter.2.1877': [<numba.core.ir.Assign object at 0x000002410C941A00>],
             '$46for_iter.3.1878': [<numba.core.ir.Assign object at 0x000002410C941B20>],
             '$64load_global.2.1266': [<numba.core.ir.Assign object at 0x000002410E172A90>],
             '$72binary_subscr.6.1270': [<numba.core.ir.Assign object at 0x000002410E172FA0>],
             '$74return_value.7.1883': [<numba.core.ir.Assign object at 0x000002410E200DF0>],
             '$arg_out_var.1340': [<numba.core.ir.Assign object at 0x000002410E1B1BE0>],
             '$arg_out_var.1341': [<numba.core.ir.Assign object at 0x000002410E1B1220>],
             '$const12.4.1862': [<numba.core.ir.Assign object at 0x000002410C96E070>],
             '$const22.8.1864': [<numba.core.ir.Assign object at 0x000002410C96E730>],
             '$const28.11.1866': [<numba.core.ir.Assign object at 0x000002410C96EB50>],
             '$const36.15.1870': [<numba.core.ir.Assign object at 0x000002410C941190>],
             '$const4.1.1861': [<numba.core.ir.Assign object at 0x000002410C967220>],
             '$const60.2.1880': [<numba.core.ir.Assign object at 0x000002410E2005B0>],
             '$const68.5.1881': [<numba.core.ir.Assign object at 0x000002410E200A30>],
             '$const72.6.1882': [<numba.core.ir.Assign object at 0x000002410E200C70>],
             '$expr_out_var.1339': [<numba.core.ir.Assign object at 0x000002410E1B1970>],
             '$phi46.0.1875': [<numba.core.ir.Assign object at 0x000002410CD60730>],
             '$phi48.1.1879': [<numba.core.ir.Assign object at 0x000002410C9417F0>],
             '$val.1209.1738': [<numba.core.ir.Assign object at 0x000002410E1D8B50>],
             'edge__reps': [<numba.core.ir.Assign object at 0x000002410C967820>],
             'parfor__index_1335': [<numba.core.ir.Assign object at 0x000002410C941DF0>],
             'sched.1860': [<numba.core.ir.Assign object at 0x000002410C967940>],
             'val_1209': [<numba.core.ir.Assign object at 0x000002410C96E220>,
                          <numba.core.ir.Assign object at 0x000002410E1D7B80>],
             'val_1209__arr': [<numba.core.ir.Assign object at 0x000002410C9675E0>],
             'val_1250': [<numba.core.ir.Assign object at 0x000002410CEBD7C0>,
                          <numba.core.ir.Assign object at 0x000002410E1E0190>],
             'val_1250__arr': [<numba.core.ir.Assign object at 0x000002410C967700>]})
DEBUG 2022-01-28 15:49:35,634 SSA violators {'val_1209', 'val_1250'}
DEBUG 2022-01-28 15:49:35,634 Fix SSA violator on var val_1209
DEBUG 2022-01-28 15:49:35,634 ==== SSA block rewrite pass on 0
DEBUG 2022-01-28 15:49:35,634 Running <numba.core.ssa._FreshVarHandler object at 0x000002410E22AB80>
DEBUG 2022-01-28 15:49:35,634 on stmt: sched.1860 = arg(0, name=sched)
DEBUG 2022-01-28 15:49:35,634 on stmt: edge__reps = arg(1, name=edge__reps)
DEBUG 2022-01-28 15:49:35,634 on stmt: val_1250__arr = arg(2, name=val_1250__arr)
DEBUG 2022-01-28 15:49:35,634 on stmt: val_1209__arr = arg(3, name=val_1209__arr)
DEBUG 2022-01-28 15:49:35,634 on stmt: $const4.1.1861 = const(int, 0)
DEBUG 2022-01-28 15:49:35,634 on stmt: val_1250 = getitem(value=val_1250__arr, index=$const4.1.1861, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:35,634 on stmt: $const12.4.1862 = const(int, 0)
DEBUG 2022-01-28 15:49:35,634 on stmt: val_1209 = getitem(value=val_1209__arr, index=$const12.4.1862, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:35,634 first assign: val_1209
DEBUG 2022-01-28 15:49:35,634 replaced with: val_1209 = getitem(value=val_1209__arr, index=$const12.4.1862, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:35,634 on stmt: $18load_global.6.1863 = global(range: <class 'range'>)
DEBUG 2022-01-28 15:49:35,634 on stmt: $const22.8.1864 = const(int, 0)
DEBUG 2022-01-28 15:49:35,634 on stmt: $24binary_subscr.9.1865 = getitem(value=sched.1860, index=$const22.8.1864, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:35,634 on stmt: $const28.11.1866 = const(int, 1)
DEBUG 2022-01-28 15:49:35,634 on stmt: $30binary_subscr.12.1867 = getitem(value=sched.1860, index=$const28.11.1866, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:35,634 on stmt: $32load_global.13.1868 = global(np: <module 'numpy' from 'C:\\Users\\zl4821\\Anaconda3\\envs\\GBS\\lib\\site-packages\\numpy\\__init__.py'>)
DEBUG 2022-01-28 15:49:35,634 on stmt: $34load_method.14.1869 = getattr(value=$32load_global.13.1868, attr=uint8)
DEBUG 2022-01-28 15:49:35,634 on stmt: $const36.15.1870 = const(int, 1)
DEBUG 2022-01-28 15:49:35,634 on stmt: $38call_method.16.1871 = call $34load_method.14.1869($const36.15.1870, func=$34load_method.14.1869, args=[Var($const36.15.1870, <string>:4)], kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:35,634 on stmt: $40binary_add.17.1872 = $30binary_subscr.12.1867 + $38call_method.16.1871
DEBUG 2022-01-28 15:49:35,634 on stmt: $42call_function.18.1873 = call $18load_global.6.1863($24binary_subscr.9.1865, $40binary_add.17.1872, func=$18load_global.6.1863, args=[Var($24binary_subscr.9.1865, <string>:4), Var($40binary_add.17.1872, <string>:4)], kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:35,634 on stmt: $44get_iter.19.1874 = getiter(value=$42call_function.18.1873)
DEBUG 2022-01-28 15:49:35,634 on stmt: $phi46.0.1875 = $44get_iter.19.1874
DEBUG 2022-01-28 15:49:35,634 on stmt: $arg_out_var.1341 = const(int, 1)
DEBUG 2022-01-28 15:49:35,634 on stmt: $64load_global.2.1266 = global(max: <built-in function max>)
DEBUG 2022-01-28 15:49:35,634 on stmt: jump 46
DEBUG 2022-01-28 15:49:35,634 ==== SSA block rewrite pass on 46
DEBUG 2022-01-28 15:49:35,634 Running <numba.core.ssa._FreshVarHandler object at 0x000002410E22AB80>
DEBUG 2022-01-28 15:49:35,634 on stmt: $46for_iter.1.1876 = iternext(value=$phi46.0.1875)
DEBUG 2022-01-28 15:49:35,634 on stmt: $46for_iter.2.1877 = pair_first(value=$46for_iter.1.1876)
DEBUG 2022-01-28 15:49:35,634 on stmt: $46for_iter.3.1878 = pair_second(value=$46for_iter.1.1876)
DEBUG 2022-01-28 15:49:35,634 on stmt: $phi48.1.1879 = $46for_iter.2.1877
DEBUG 2022-01-28 15:49:35,634 on stmt: branch $46for_iter.3.1878, 48, 1227
DEBUG 2022-01-28 15:49:35,634 ==== SSA block rewrite pass on 48
DEBUG 2022-01-28 15:49:35,634 Running <numba.core.ssa._FreshVarHandler object at 0x000002410E22AB80>
DEBUG 2022-01-28 15:49:35,634 on stmt: parfor__index_1335 = $phi48.1.1879
DEBUG 2022-01-28 15:49:35,634 on stmt: jump 56
DEBUG 2022-01-28 15:49:35,634 ==== SSA block rewrite pass on 1227
DEBUG 2022-01-28 15:49:35,634 Running <numba.core.ssa._FreshVarHandler object at 0x000002410E22AB80>
DEBUG 2022-01-28 15:49:35,634 on stmt: $const60.2.1880 = const(int, 0)
DEBUG 2022-01-28 15:49:35,634 on stmt: val_1250__arr[$const60.2.1880] = val_1250
DEBUG 2022-01-28 15:49:35,634 on stmt: $const68.5.1881 = const(int, 0)
DEBUG 2022-01-28 15:49:35,634 on stmt: val_1209__arr[$const68.5.1881] = val_1209
DEBUG 2022-01-28 15:49:35,634 on stmt: $const72.6.1882 = const(NoneType, None)
DEBUG 2022-01-28 15:49:35,634 on stmt: $74return_value.7.1883 = cast(value=$const72.6.1882)
DEBUG 2022-01-28 15:49:35,634 on stmt: return $74return_value.7.1883
DEBUG 2022-01-28 15:49:35,634 ==== SSA block rewrite pass on 56
DEBUG 2022-01-28 15:49:35,634 Running <numba.core.ssa._FreshVarHandler object at 0x000002410E22AB80>
DEBUG 2022-01-28 15:49:35,634 on stmt: $arg_out_var.1340 = getitem(value=edge__reps, index=parfor__index_1335, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:35,634 on stmt: $expr_out_var.1339 = $arg_out_var.1340 + $arg_out_var.1341
DEBUG 2022-01-28 15:49:35,634 on stmt: $val.1209.1738 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=val_1209, rhs=$expr_out_var.1339, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-01-28 15:49:35,634 on stmt: val_1209 = $val.1209.1738
DEBUG 2022-01-28 15:49:35,634 replaced with: val_1209.1 = $val.1209.1738
DEBUG 2022-01-28 15:49:35,634 on stmt: $72binary_subscr.6.1270 = getitem(value=edge__reps, index=parfor__index_1335, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:35,634 on stmt: val_1250 = call $64load_global.2.1266(val_1250, $72binary_subscr.6.1270, func=$64load_global.2.1266, args=[Var(val_1250, parfor.py:156), Var($72binary_subscr.6.1270, parfor.py:158)], kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:35,634 on stmt: jump 1226
DEBUG 2022-01-28 15:49:35,634 ==== SSA block rewrite pass on 1226
DEBUG 2022-01-28 15:49:35,634 Running <numba.core.ssa._FreshVarHandler object at 0x000002410E22AB80>
DEBUG 2022-01-28 15:49:35,634 on stmt: jump 46
DEBUG 2022-01-28 15:49:35,634 Replaced assignments: defaultdict(<class 'list'>,
            {0: [<numba.core.ir.Assign object at 0x000002410E22A5B0>],
             56: [<numba.core.ir.Assign object at 0x000002410E22A940>]})
DEBUG 2022-01-28 15:49:35,634 ==== SSA block rewrite pass on 0
DEBUG 2022-01-28 15:49:35,634 Running <numba.core.ssa._FixSSAVars object at 0x000002410E22AB80>
DEBUG 2022-01-28 15:49:35,634 on stmt: sched.1860 = arg(0, name=sched)
DEBUG 2022-01-28 15:49:35,634 on stmt: edge__reps = arg(1, name=edge__reps)
DEBUG 2022-01-28 15:49:35,634 on stmt: val_1250__arr = arg(2, name=val_1250__arr)
DEBUG 2022-01-28 15:49:35,642 on stmt: val_1209__arr = arg(3, name=val_1209__arr)
DEBUG 2022-01-28 15:49:35,642 on stmt: $const4.1.1861 = const(int, 0)
DEBUG 2022-01-28 15:49:35,642 on stmt: val_1250 = getitem(value=val_1250__arr, index=$const4.1.1861, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:35,642 on stmt: $const12.4.1862 = const(int, 0)
DEBUG 2022-01-28 15:49:35,642 on stmt: val_1209 = getitem(value=val_1209__arr, index=$const12.4.1862, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:35,642 on stmt: $18load_global.6.1863 = global(range: <class 'range'>)
DEBUG 2022-01-28 15:49:35,642 on stmt: $const22.8.1864 = const(int, 0)
DEBUG 2022-01-28 15:49:35,642 on stmt: $24binary_subscr.9.1865 = getitem(value=sched.1860, index=$const22.8.1864, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:35,642 on stmt: $const28.11.1866 = const(int, 1)
DEBUG 2022-01-28 15:49:35,642 on stmt: $30binary_subscr.12.1867 = getitem(value=sched.1860, index=$const28.11.1866, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:35,642 on stmt: $32load_global.13.1868 = global(np: <module 'numpy' from 'C:\\Users\\zl4821\\Anaconda3\\envs\\GBS\\lib\\site-packages\\numpy\\__init__.py'>)
DEBUG 2022-01-28 15:49:35,642 on stmt: $34load_method.14.1869 = getattr(value=$32load_global.13.1868, attr=uint8)
DEBUG 2022-01-28 15:49:35,642 on stmt: $const36.15.1870 = const(int, 1)
DEBUG 2022-01-28 15:49:35,642 on stmt: $38call_method.16.1871 = call $34load_method.14.1869($const36.15.1870, func=$34load_method.14.1869, args=[Var($const36.15.1870, <string>:4)], kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:35,642 on stmt: $40binary_add.17.1872 = $30binary_subscr.12.1867 + $38call_method.16.1871
DEBUG 2022-01-28 15:49:35,642 on stmt: $42call_function.18.1873 = call $18load_global.6.1863($24binary_subscr.9.1865, $40binary_add.17.1872, func=$18load_global.6.1863, args=[Var($24binary_subscr.9.1865, <string>:4), Var($40binary_add.17.1872, <string>:4)], kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:35,642 on stmt: $44get_iter.19.1874 = getiter(value=$42call_function.18.1873)
DEBUG 2022-01-28 15:49:35,642 on stmt: $phi46.0.1875 = $44get_iter.19.1874
DEBUG 2022-01-28 15:49:35,642 on stmt: $arg_out_var.1341 = const(int, 1)
DEBUG 2022-01-28 15:49:35,642 on stmt: $64load_global.2.1266 = global(max: <built-in function max>)
DEBUG 2022-01-28 15:49:35,644 on stmt: jump 46
DEBUG 2022-01-28 15:49:35,644 ==== SSA block rewrite pass on 46
DEBUG 2022-01-28 15:49:35,644 Running <numba.core.ssa._FixSSAVars object at 0x000002410E22AB80>
DEBUG 2022-01-28 15:49:35,644 on stmt: $46for_iter.1.1876 = iternext(value=$phi46.0.1875)
DEBUG 2022-01-28 15:49:35,644 on stmt: $46for_iter.2.1877 = pair_first(value=$46for_iter.1.1876)
DEBUG 2022-01-28 15:49:35,644 on stmt: $46for_iter.3.1878 = pair_second(value=$46for_iter.1.1876)
DEBUG 2022-01-28 15:49:35,644 on stmt: $phi48.1.1879 = $46for_iter.2.1877
DEBUG 2022-01-28 15:49:35,644 on stmt: branch $46for_iter.3.1878, 48, 1227
DEBUG 2022-01-28 15:49:35,644 ==== SSA block rewrite pass on 48
DEBUG 2022-01-28 15:49:35,644 Running <numba.core.ssa._FixSSAVars object at 0x000002410E22AB80>
DEBUG 2022-01-28 15:49:35,644 on stmt: parfor__index_1335 = $phi48.1.1879
DEBUG 2022-01-28 15:49:35,644 on stmt: jump 56
DEBUG 2022-01-28 15:49:35,644 ==== SSA block rewrite pass on 1227
DEBUG 2022-01-28 15:49:35,644 Running <numba.core.ssa._FixSSAVars object at 0x000002410E22AB80>
DEBUG 2022-01-28 15:49:35,644 on stmt: $const60.2.1880 = const(int, 0)
DEBUG 2022-01-28 15:49:35,644 on stmt: val_1250__arr[$const60.2.1880] = val_1250
DEBUG 2022-01-28 15:49:35,644 on stmt: $const68.5.1881 = const(int, 0)
DEBUG 2022-01-28 15:49:35,644 on stmt: val_1209__arr[$const68.5.1881] = val_1209
DEBUG 2022-01-28 15:49:35,644 find_def var='val_1209' stmt=val_1209__arr[$const68.5.1881] = val_1209
DEBUG 2022-01-28 15:49:35,644 find_def_from_top label 1227
DEBUG 2022-01-28 15:49:35,644 idom 46 from label 1227
DEBUG 2022-01-28 15:49:35,644 find_def_from_bottom label 46
DEBUG 2022-01-28 15:49:35,644 find_def_from_top label 46
DEBUG 2022-01-28 15:49:35,644 insert phi node val_1209.2 = phi(incoming_values=[], incoming_blocks=[]) at 46
DEBUG 2022-01-28 15:49:35,644 find_def_from_bottom label 0
DEBUG 2022-01-28 15:49:35,644 incoming_def val_1209 = getitem(value=val_1209__arr, index=$const12.4.1862, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:35,644 find_def_from_bottom label 1226
DEBUG 2022-01-28 15:49:35,644 find_def_from_top label 1226
DEBUG 2022-01-28 15:49:35,644 idom 56 from label 1226
DEBUG 2022-01-28 15:49:35,644 find_def_from_bottom label 56
DEBUG 2022-01-28 15:49:35,644 incoming_def val_1209.1 = $val.1209.1738
DEBUG 2022-01-28 15:49:35,644 replaced with: val_1209__arr[$const68.5.1881] = val_1209.2
DEBUG 2022-01-28 15:49:35,644 on stmt: $const72.6.1882 = const(NoneType, None)
DEBUG 2022-01-28 15:49:35,644 on stmt: $74return_value.7.1883 = cast(value=$const72.6.1882)
DEBUG 2022-01-28 15:49:35,644 on stmt: return $74return_value.7.1883
DEBUG 2022-01-28 15:49:35,644 ==== SSA block rewrite pass on 56
DEBUG 2022-01-28 15:49:35,644 Running <numba.core.ssa._FixSSAVars object at 0x000002410E22AB80>
DEBUG 2022-01-28 15:49:35,644 on stmt: $arg_out_var.1340 = getitem(value=edge__reps, index=parfor__index_1335, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:35,644 on stmt: $expr_out_var.1339 = $arg_out_var.1340 + $arg_out_var.1341
DEBUG 2022-01-28 15:49:35,644 on stmt: $val.1209.1738 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=val_1209, rhs=$expr_out_var.1339, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-01-28 15:49:35,644 find_def var='val_1209' stmt=$val.1209.1738 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=val_1209, rhs=$expr_out_var.1339, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-01-28 15:49:35,644 find_def_from_top label 56
DEBUG 2022-01-28 15:49:35,644 idom 48 from label 56
DEBUG 2022-01-28 15:49:35,644 find_def_from_bottom label 48
DEBUG 2022-01-28 15:49:35,644 find_def_from_top label 48
DEBUG 2022-01-28 15:49:35,644 idom 46 from label 48
DEBUG 2022-01-28 15:49:35,644 find_def_from_bottom label 46
DEBUG 2022-01-28 15:49:35,644 replaced with: $val.1209.1738 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=val_1209.2, rhs=$expr_out_var.1339, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-01-28 15:49:35,644 on stmt: val_1209.1 = $val.1209.1738
DEBUG 2022-01-28 15:49:35,644 on stmt: $72binary_subscr.6.1270 = getitem(value=edge__reps, index=parfor__index_1335, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:35,644 on stmt: val_1250 = call $64load_global.2.1266(val_1250, $72binary_subscr.6.1270, func=$64load_global.2.1266, args=[Var(val_1250, parfor.py:156), Var($72binary_subscr.6.1270, parfor.py:158)], kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:35,644 on stmt: jump 1226
DEBUG 2022-01-28 15:49:35,644 ==== SSA block rewrite pass on 1226
DEBUG 2022-01-28 15:49:35,644 Running <numba.core.ssa._FixSSAVars object at 0x000002410E22AB80>
DEBUG 2022-01-28 15:49:35,644 on stmt: jump 46
DEBUG 2022-01-28 15:49:35,644 Fix SSA violator on var val_1250
DEBUG 2022-01-28 15:49:35,644 ==== SSA block rewrite pass on 0
DEBUG 2022-01-28 15:49:35,644 Running <numba.core.ssa._FreshVarHandler object at 0x000002410E22A760>
DEBUG 2022-01-28 15:49:35,644 on stmt: sched.1860 = arg(0, name=sched)
DEBUG 2022-01-28 15:49:35,644 on stmt: edge__reps = arg(1, name=edge__reps)
DEBUG 2022-01-28 15:49:35,644 on stmt: val_1250__arr = arg(2, name=val_1250__arr)
DEBUG 2022-01-28 15:49:35,644 on stmt: val_1209__arr = arg(3, name=val_1209__arr)
DEBUG 2022-01-28 15:49:35,644 on stmt: $const4.1.1861 = const(int, 0)
DEBUG 2022-01-28 15:49:35,644 on stmt: val_1250 = getitem(value=val_1250__arr, index=$const4.1.1861, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:35,644 first assign: val_1250
DEBUG 2022-01-28 15:49:35,644 replaced with: val_1250 = getitem(value=val_1250__arr, index=$const4.1.1861, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:35,644 on stmt: $const12.4.1862 = const(int, 0)
DEBUG 2022-01-28 15:49:35,644 on stmt: val_1209 = getitem(value=val_1209__arr, index=$const12.4.1862, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:35,644 on stmt: $18load_global.6.1863 = global(range: <class 'range'>)
DEBUG 2022-01-28 15:49:35,644 on stmt: $const22.8.1864 = const(int, 0)
DEBUG 2022-01-28 15:49:35,644 on stmt: $24binary_subscr.9.1865 = getitem(value=sched.1860, index=$const22.8.1864, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:35,644 on stmt: $const28.11.1866 = const(int, 1)
DEBUG 2022-01-28 15:49:35,644 on stmt: $30binary_subscr.12.1867 = getitem(value=sched.1860, index=$const28.11.1866, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:35,644 on stmt: $32load_global.13.1868 = global(np: <module 'numpy' from 'C:\\Users\\zl4821\\Anaconda3\\envs\\GBS\\lib\\site-packages\\numpy\\__init__.py'>)
DEBUG 2022-01-28 15:49:35,644 on stmt: $34load_method.14.1869 = getattr(value=$32load_global.13.1868, attr=uint8)
DEBUG 2022-01-28 15:49:35,644 on stmt: $const36.15.1870 = const(int, 1)
DEBUG 2022-01-28 15:49:35,644 on stmt: $38call_method.16.1871 = call $34load_method.14.1869($const36.15.1870, func=$34load_method.14.1869, args=[Var($const36.15.1870, <string>:4)], kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:35,644 on stmt: $40binary_add.17.1872 = $30binary_subscr.12.1867 + $38call_method.16.1871
DEBUG 2022-01-28 15:49:35,644 on stmt: $42call_function.18.1873 = call $18load_global.6.1863($24binary_subscr.9.1865, $40binary_add.17.1872, func=$18load_global.6.1863, args=[Var($24binary_subscr.9.1865, <string>:4), Var($40binary_add.17.1872, <string>:4)], kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:35,644 on stmt: $44get_iter.19.1874 = getiter(value=$42call_function.18.1873)
DEBUG 2022-01-28 15:49:35,644 on stmt: $phi46.0.1875 = $44get_iter.19.1874
DEBUG 2022-01-28 15:49:35,644 on stmt: $arg_out_var.1341 = const(int, 1)
DEBUG 2022-01-28 15:49:35,644 on stmt: $64load_global.2.1266 = global(max: <built-in function max>)
DEBUG 2022-01-28 15:49:35,644 on stmt: jump 46
DEBUG 2022-01-28 15:49:35,644 ==== SSA block rewrite pass on 46
DEBUG 2022-01-28 15:49:35,644 Running <numba.core.ssa._FreshVarHandler object at 0x000002410E22A760>
DEBUG 2022-01-28 15:49:35,644 on stmt: val_1209.2 = phi(incoming_values=[Var(val_1209, <string>:3), Var(val_1209.1, parfor.py:279)], incoming_blocks=[0, 1226])
DEBUG 2022-01-28 15:49:35,644 on stmt: $46for_iter.1.1876 = iternext(value=$phi46.0.1875)
DEBUG 2022-01-28 15:49:35,644 on stmt: $46for_iter.2.1877 = pair_first(value=$46for_iter.1.1876)
DEBUG 2022-01-28 15:49:35,652 on stmt: $46for_iter.3.1878 = pair_second(value=$46for_iter.1.1876)
DEBUG 2022-01-28 15:49:35,652 on stmt: $phi48.1.1879 = $46for_iter.2.1877
DEBUG 2022-01-28 15:49:35,652 on stmt: branch $46for_iter.3.1878, 48, 1227
DEBUG 2022-01-28 15:49:35,652 ==== SSA block rewrite pass on 48
DEBUG 2022-01-28 15:49:35,652 Running <numba.core.ssa._FreshVarHandler object at 0x000002410E22A760>
DEBUG 2022-01-28 15:49:35,652 on stmt: parfor__index_1335 = $phi48.1.1879
DEBUG 2022-01-28 15:49:35,652 on stmt: jump 56
DEBUG 2022-01-28 15:49:35,652 ==== SSA block rewrite pass on 1227
DEBUG 2022-01-28 15:49:35,652 Running <numba.core.ssa._FreshVarHandler object at 0x000002410E22A760>
DEBUG 2022-01-28 15:49:35,652 on stmt: $const60.2.1880 = const(int, 0)
DEBUG 2022-01-28 15:49:35,652 on stmt: val_1250__arr[$const60.2.1880] = val_1250
DEBUG 2022-01-28 15:49:35,652 on stmt: $const68.5.1881 = const(int, 0)
DEBUG 2022-01-28 15:49:35,652 on stmt: val_1209__arr[$const68.5.1881] = val_1209.2
DEBUG 2022-01-28 15:49:35,652 on stmt: $const72.6.1882 = const(NoneType, None)
DEBUG 2022-01-28 15:49:35,652 on stmt: $74return_value.7.1883 = cast(value=$const72.6.1882)
DEBUG 2022-01-28 15:49:35,652 on stmt: return $74return_value.7.1883
DEBUG 2022-01-28 15:49:35,652 ==== SSA block rewrite pass on 56
DEBUG 2022-01-28 15:49:35,652 Running <numba.core.ssa._FreshVarHandler object at 0x000002410E22A760>
DEBUG 2022-01-28 15:49:35,652 on stmt: $arg_out_var.1340 = getitem(value=edge__reps, index=parfor__index_1335, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:35,652 on stmt: $expr_out_var.1339 = $arg_out_var.1340 + $arg_out_var.1341
DEBUG 2022-01-28 15:49:35,652 on stmt: $val.1209.1738 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=val_1209.2, rhs=$expr_out_var.1339, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-01-28 15:49:35,652 on stmt: val_1209.1 = $val.1209.1738
DEBUG 2022-01-28 15:49:35,652 on stmt: $72binary_subscr.6.1270 = getitem(value=edge__reps, index=parfor__index_1335, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:35,652 on stmt: val_1250 = call $64load_global.2.1266(val_1250, $72binary_subscr.6.1270, func=$64load_global.2.1266, args=[Var(val_1250, parfor.py:156), Var($72binary_subscr.6.1270, parfor.py:158)], kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:35,654 replaced with: val_1250.1 = call $64load_global.2.1266(val_1250, $72binary_subscr.6.1270, func=$64load_global.2.1266, args=[Var(val_1250, parfor.py:156), Var($72binary_subscr.6.1270, parfor.py:158)], kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:35,654 on stmt: jump 1226
DEBUG 2022-01-28 15:49:35,654 ==== SSA block rewrite pass on 1226
DEBUG 2022-01-28 15:49:35,654 Running <numba.core.ssa._FreshVarHandler object at 0x000002410E22A760>
DEBUG 2022-01-28 15:49:35,654 on stmt: jump 46
DEBUG 2022-01-28 15:49:35,654 Replaced assignments: defaultdict(<class 'list'>,
            {0: [<numba.core.ir.Assign object at 0x000002410E22AC40>],
             56: [<numba.core.ir.Assign object at 0x000002410E22B670>]})
DEBUG 2022-01-28 15:49:35,654 ==== SSA block rewrite pass on 0
DEBUG 2022-01-28 15:49:35,654 Running <numba.core.ssa._FixSSAVars object at 0x000002410E22AB80>
DEBUG 2022-01-28 15:49:35,654 on stmt: sched.1860 = arg(0, name=sched)
DEBUG 2022-01-28 15:49:35,654 on stmt: edge__reps = arg(1, name=edge__reps)
DEBUG 2022-01-28 15:49:35,654 on stmt: val_1250__arr = arg(2, name=val_1250__arr)
DEBUG 2022-01-28 15:49:35,654 on stmt: val_1209__arr = arg(3, name=val_1209__arr)
DEBUG 2022-01-28 15:49:35,654 on stmt: $const4.1.1861 = const(int, 0)
DEBUG 2022-01-28 15:49:35,654 on stmt: val_1250 = getitem(value=val_1250__arr, index=$const4.1.1861, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:35,654 on stmt: $const12.4.1862 = const(int, 0)
DEBUG 2022-01-28 15:49:35,654 on stmt: val_1209 = getitem(value=val_1209__arr, index=$const12.4.1862, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:35,654 on stmt: $18load_global.6.1863 = global(range: <class 'range'>)
DEBUG 2022-01-28 15:49:35,654 on stmt: $const22.8.1864 = const(int, 0)
DEBUG 2022-01-28 15:49:35,654 on stmt: $24binary_subscr.9.1865 = getitem(value=sched.1860, index=$const22.8.1864, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:35,654 on stmt: $const28.11.1866 = const(int, 1)
DEBUG 2022-01-28 15:49:35,654 on stmt: $30binary_subscr.12.1867 = getitem(value=sched.1860, index=$const28.11.1866, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:35,654 on stmt: $32load_global.13.1868 = global(np: <module 'numpy' from 'C:\\Users\\zl4821\\Anaconda3\\envs\\GBS\\lib\\site-packages\\numpy\\__init__.py'>)
DEBUG 2022-01-28 15:49:35,654 on stmt: $34load_method.14.1869 = getattr(value=$32load_global.13.1868, attr=uint8)
DEBUG 2022-01-28 15:49:35,654 on stmt: $const36.15.1870 = const(int, 1)
DEBUG 2022-01-28 15:49:35,654 on stmt: $38call_method.16.1871 = call $34load_method.14.1869($const36.15.1870, func=$34load_method.14.1869, args=[Var($const36.15.1870, <string>:4)], kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:35,654 on stmt: $40binary_add.17.1872 = $30binary_subscr.12.1867 + $38call_method.16.1871
DEBUG 2022-01-28 15:49:35,654 on stmt: $42call_function.18.1873 = call $18load_global.6.1863($24binary_subscr.9.1865, $40binary_add.17.1872, func=$18load_global.6.1863, args=[Var($24binary_subscr.9.1865, <string>:4), Var($40binary_add.17.1872, <string>:4)], kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:35,654 on stmt: $44get_iter.19.1874 = getiter(value=$42call_function.18.1873)
DEBUG 2022-01-28 15:49:35,654 on stmt: $phi46.0.1875 = $44get_iter.19.1874
DEBUG 2022-01-28 15:49:35,654 on stmt: $arg_out_var.1341 = const(int, 1)
DEBUG 2022-01-28 15:49:35,654 on stmt: $64load_global.2.1266 = global(max: <built-in function max>)
DEBUG 2022-01-28 15:49:35,654 on stmt: jump 46
DEBUG 2022-01-28 15:49:35,654 ==== SSA block rewrite pass on 46
DEBUG 2022-01-28 15:49:35,654 Running <numba.core.ssa._FixSSAVars object at 0x000002410E22AB80>
DEBUG 2022-01-28 15:49:35,654 on stmt: val_1209.2 = phi(incoming_values=[Var(val_1209, <string>:3), Var(val_1209.1, parfor.py:279)], incoming_blocks=[0, 1226])
DEBUG 2022-01-28 15:49:35,654 on stmt: $46for_iter.1.1876 = iternext(value=$phi46.0.1875)
DEBUG 2022-01-28 15:49:35,654 on stmt: $46for_iter.2.1877 = pair_first(value=$46for_iter.1.1876)
DEBUG 2022-01-28 15:49:35,654 on stmt: $46for_iter.3.1878 = pair_second(value=$46for_iter.1.1876)
DEBUG 2022-01-28 15:49:35,654 on stmt: $phi48.1.1879 = $46for_iter.2.1877
DEBUG 2022-01-28 15:49:35,654 on stmt: branch $46for_iter.3.1878, 48, 1227
DEBUG 2022-01-28 15:49:35,654 ==== SSA block rewrite pass on 48
DEBUG 2022-01-28 15:49:35,654 Running <numba.core.ssa._FixSSAVars object at 0x000002410E22AB80>
DEBUG 2022-01-28 15:49:35,654 on stmt: parfor__index_1335 = $phi48.1.1879
DEBUG 2022-01-28 15:49:35,654 on stmt: jump 56
DEBUG 2022-01-28 15:49:35,654 ==== SSA block rewrite pass on 1227
DEBUG 2022-01-28 15:49:35,654 Running <numba.core.ssa._FixSSAVars object at 0x000002410E22AB80>
DEBUG 2022-01-28 15:49:35,654 on stmt: $const60.2.1880 = const(int, 0)
DEBUG 2022-01-28 15:49:35,654 on stmt: val_1250__arr[$const60.2.1880] = val_1250
DEBUG 2022-01-28 15:49:35,654 find_def var='val_1250' stmt=val_1250__arr[$const60.2.1880] = val_1250
DEBUG 2022-01-28 15:49:35,654 find_def_from_top label 1227
DEBUG 2022-01-28 15:49:35,654 idom 46 from label 1227
DEBUG 2022-01-28 15:49:35,654 find_def_from_bottom label 46
DEBUG 2022-01-28 15:49:35,654 find_def_from_top label 46
DEBUG 2022-01-28 15:49:35,654 insert phi node val_1250.2 = phi(incoming_values=[], incoming_blocks=[]) at 46
DEBUG 2022-01-28 15:49:35,654 find_def_from_bottom label 0
DEBUG 2022-01-28 15:49:35,654 incoming_def val_1250 = getitem(value=val_1250__arr, index=$const4.1.1861, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:35,654 find_def_from_bottom label 1226
DEBUG 2022-01-28 15:49:35,654 find_def_from_top label 1226
DEBUG 2022-01-28 15:49:35,654 idom 56 from label 1226
DEBUG 2022-01-28 15:49:35,654 find_def_from_bottom label 56
DEBUG 2022-01-28 15:49:35,654 incoming_def val_1250.1 = call $64load_global.2.1266(val_1250, $72binary_subscr.6.1270, func=$64load_global.2.1266, args=[Var(val_1250, parfor.py:156), Var($72binary_subscr.6.1270, parfor.py:158)], kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:35,654 replaced with: val_1250__arr[$const60.2.1880] = val_1250.2
DEBUG 2022-01-28 15:49:35,654 on stmt: $const68.5.1881 = const(int, 0)
DEBUG 2022-01-28 15:49:35,654 on stmt: val_1209__arr[$const68.5.1881] = val_1209.2
DEBUG 2022-01-28 15:49:35,654 on stmt: $const72.6.1882 = const(NoneType, None)
DEBUG 2022-01-28 15:49:35,654 on stmt: $74return_value.7.1883 = cast(value=$const72.6.1882)
DEBUG 2022-01-28 15:49:35,654 on stmt: return $74return_value.7.1883
DEBUG 2022-01-28 15:49:35,654 ==== SSA block rewrite pass on 56
DEBUG 2022-01-28 15:49:35,654 Running <numba.core.ssa._FixSSAVars object at 0x000002410E22AB80>
DEBUG 2022-01-28 15:49:35,654 on stmt: $arg_out_var.1340 = getitem(value=edge__reps, index=parfor__index_1335, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:35,654 on stmt: $expr_out_var.1339 = $arg_out_var.1340 + $arg_out_var.1341
DEBUG 2022-01-28 15:49:35,654 on stmt: $val.1209.1738 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=val_1209.2, rhs=$expr_out_var.1339, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-01-28 15:49:35,654 on stmt: val_1209.1 = $val.1209.1738
DEBUG 2022-01-28 15:49:35,654 on stmt: $72binary_subscr.6.1270 = getitem(value=edge__reps, index=parfor__index_1335, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:35,654 on stmt: val_1250.1 = call $64load_global.2.1266(val_1250, $72binary_subscr.6.1270, func=$64load_global.2.1266, args=[Var(val_1250, parfor.py:156), Var($72binary_subscr.6.1270, parfor.py:158)], kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:35,654 find_def var='val_1250' stmt=val_1250.1 = call $64load_global.2.1266(val_1250, $72binary_subscr.6.1270, func=$64load_global.2.1266, args=[Var(val_1250, parfor.py:156), Var($72binary_subscr.6.1270, parfor.py:158)], kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:35,654 find_def_from_top label 56
DEBUG 2022-01-28 15:49:35,654 idom 48 from label 56
DEBUG 2022-01-28 15:49:35,654 find_def_from_bottom label 48
DEBUG 2022-01-28 15:49:35,654 find_def_from_top label 48
DEBUG 2022-01-28 15:49:35,654 idom 46 from label 48
DEBUG 2022-01-28 15:49:35,654 find_def_from_bottom label 46
DEBUG 2022-01-28 15:49:35,654 replaced with: val_1250.1 = call $64load_global.2.1266(val_1250.2, $72binary_subscr.6.1270, func=$64load_global.2.1266, args=[Var(val_1250.2, <string>:6), Var($72binary_subscr.6.1270, parfor.py:158)], kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:35,654 on stmt: jump 1226
DEBUG 2022-01-28 15:49:35,654 ==== SSA block rewrite pass on 1226
DEBUG 2022-01-28 15:49:35,654 Running <numba.core.ssa._FixSSAVars object at 0x000002410E22AB80>
DEBUG 2022-01-28 15:49:35,654 on stmt: jump 46
DEBUG 2022-01-28 15:49:36,128 bytecode dump:
>          0	NOP(arg=None, lineno=2)
           2	LOAD_GLOBAL(arg=0, lineno=2)
           4	LOAD_FAST(arg=0, lineno=2)
           6	LOAD_CONST(arg=1, lineno=2)
           8	BINARY_SUBSCR(arg=None, lineno=2)
          10	LOAD_FAST(arg=0, lineno=2)
          12	LOAD_CONST(arg=2, lineno=2)
          14	BINARY_SUBSCR(arg=None, lineno=2)
          16	LOAD_GLOBAL(arg=1, lineno=2)
          18	LOAD_METHOD(arg=2, lineno=2)
          20	LOAD_CONST(arg=2, lineno=2)
          22	CALL_METHOD(arg=1, lineno=2)
          24	BINARY_ADD(arg=None, lineno=2)
          26	CALL_FUNCTION(arg=2, lineno=2)
          28	GET_ITER(arg=None, lineno=2)
>         30	FOR_ITER(arg=8, lineno=2)
          32	STORE_FAST(arg=2, lineno=2)
          34	LOAD_CONST(arg=1, lineno=3)
          36	STORE_FAST(arg=3, lineno=3)
          38	JUMP_ABSOLUTE(arg=30, lineno=3)
>         40	LOAD_CONST(arg=0, lineno=4)
          42	RETURN_VALUE(arg=None, lineno=4)
DEBUG 2022-01-28 15:49:36,128 pending: deque([State(pc_initial=0 nstack_initial=0)])
DEBUG 2022-01-28 15:49:36,128 stack: []
DEBUG 2022-01-28 15:49:36,128 dispatch pc=0, inst=NOP(arg=None, lineno=2)
DEBUG 2022-01-28 15:49:36,128 stack []
DEBUG 2022-01-28 15:49:36,128 dispatch pc=2, inst=LOAD_GLOBAL(arg=0, lineno=2)
DEBUG 2022-01-28 15:49:36,128 stack []
DEBUG 2022-01-28 15:49:36,128 dispatch pc=4, inst=LOAD_FAST(arg=0, lineno=2)
DEBUG 2022-01-28 15:49:36,128 stack ['$2load_global.0']
DEBUG 2022-01-28 15:49:36,128 dispatch pc=6, inst=LOAD_CONST(arg=1, lineno=2)
DEBUG 2022-01-28 15:49:36,128 stack ['$2load_global.0', '$sched4.1']
DEBUG 2022-01-28 15:49:36,130 dispatch pc=8, inst=BINARY_SUBSCR(arg=None, lineno=2)
DEBUG 2022-01-28 15:49:36,130 stack ['$2load_global.0', '$sched4.1', '$const6.2']
DEBUG 2022-01-28 15:49:36,130 dispatch pc=10, inst=LOAD_FAST(arg=0, lineno=2)
DEBUG 2022-01-28 15:49:36,130 stack ['$2load_global.0', '$8binary_subscr.3']
DEBUG 2022-01-28 15:49:36,130 dispatch pc=12, inst=LOAD_CONST(arg=2, lineno=2)
DEBUG 2022-01-28 15:49:36,130 stack ['$2load_global.0', '$8binary_subscr.3', '$sched10.4']
DEBUG 2022-01-28 15:49:36,130 dispatch pc=14, inst=BINARY_SUBSCR(arg=None, lineno=2)
DEBUG 2022-01-28 15:49:36,130 stack ['$2load_global.0', '$8binary_subscr.3', '$sched10.4', '$const12.5']
DEBUG 2022-01-28 15:49:36,130 dispatch pc=16, inst=LOAD_GLOBAL(arg=1, lineno=2)
DEBUG 2022-01-28 15:49:36,130 stack ['$2load_global.0', '$8binary_subscr.3', '$14binary_subscr.6']
DEBUG 2022-01-28 15:49:36,130 dispatch pc=18, inst=LOAD_METHOD(arg=2, lineno=2)
DEBUG 2022-01-28 15:49:36,130 stack ['$2load_global.0', '$8binary_subscr.3', '$14binary_subscr.6', '$16load_global.7']
DEBUG 2022-01-28 15:49:36,130 dispatch pc=20, inst=LOAD_CONST(arg=2, lineno=2)
DEBUG 2022-01-28 15:49:36,130 stack ['$2load_global.0', '$8binary_subscr.3', '$14binary_subscr.6', '$18load_method.8']
DEBUG 2022-01-28 15:49:36,130 dispatch pc=22, inst=CALL_METHOD(arg=1, lineno=2)
DEBUG 2022-01-28 15:49:36,130 stack ['$2load_global.0', '$8binary_subscr.3', '$14binary_subscr.6', '$18load_method.8', '$const20.9']
DEBUG 2022-01-28 15:49:36,130 dispatch pc=24, inst=BINARY_ADD(arg=None, lineno=2)
DEBUG 2022-01-28 15:49:36,130 stack ['$2load_global.0', '$8binary_subscr.3', '$14binary_subscr.6', '$22call_method.10']
DEBUG 2022-01-28 15:49:36,130 dispatch pc=26, inst=CALL_FUNCTION(arg=2, lineno=2)
DEBUG 2022-01-28 15:49:36,130 stack ['$2load_global.0', '$8binary_subscr.3', '$24binary_add.11']
DEBUG 2022-01-28 15:49:36,130 dispatch pc=28, inst=GET_ITER(arg=None, lineno=2)
DEBUG 2022-01-28 15:49:36,130 stack ['$26call_function.12']
DEBUG 2022-01-28 15:49:36,130 end state. edges=[Edge(pc=30, stack=('$28get_iter.13',), blockstack=(), npush=0)]
DEBUG 2022-01-28 15:49:36,130 pending: deque([State(pc_initial=30 nstack_initial=1)])
DEBUG 2022-01-28 15:49:36,130 stack: ['$phi30.0']
DEBUG 2022-01-28 15:49:36,130 dispatch pc=30, inst=FOR_ITER(arg=8, lineno=2)
DEBUG 2022-01-28 15:49:36,130 stack ['$phi30.0']
DEBUG 2022-01-28 15:49:36,130 end state. edges=[Edge(pc=40, stack=(), blockstack=(), npush=0), Edge(pc=32, stack=('$phi30.0', '$30for_iter.2'), blockstack=(), npush=0)]
DEBUG 2022-01-28 15:49:36,130 pending: deque([State(pc_initial=40 nstack_initial=0), State(pc_initial=32 nstack_initial=2)])
DEBUG 2022-01-28 15:49:36,130 stack: []
DEBUG 2022-01-28 15:49:36,130 dispatch pc=40, inst=LOAD_CONST(arg=0, lineno=4)
DEBUG 2022-01-28 15:49:36,130 stack []
DEBUG 2022-01-28 15:49:36,130 dispatch pc=42, inst=RETURN_VALUE(arg=None, lineno=4)
DEBUG 2022-01-28 15:49:36,130 stack ['$const40.0']
DEBUG 2022-01-28 15:49:36,130 end state. edges=[]
DEBUG 2022-01-28 15:49:36,130 pending: deque([State(pc_initial=32 nstack_initial=2)])
DEBUG 2022-01-28 15:49:36,130 stack: ['$phi32.0', '$phi32.1']
DEBUG 2022-01-28 15:49:36,130 dispatch pc=32, inst=STORE_FAST(arg=2, lineno=2)
DEBUG 2022-01-28 15:49:36,130 stack ['$phi32.0', '$phi32.1']
DEBUG 2022-01-28 15:49:36,130 dispatch pc=34, inst=LOAD_CONST(arg=1, lineno=3)
DEBUG 2022-01-28 15:49:36,130 stack ['$phi32.0']
DEBUG 2022-01-28 15:49:36,130 dispatch pc=36, inst=STORE_FAST(arg=3, lineno=3)
DEBUG 2022-01-28 15:49:36,130 stack ['$phi32.0', '$const34.2']
DEBUG 2022-01-28 15:49:36,130 dispatch pc=38, inst=JUMP_ABSOLUTE(arg=30, lineno=3)
DEBUG 2022-01-28 15:49:36,130 stack ['$phi32.0']
DEBUG 2022-01-28 15:49:36,130 end state. edges=[Edge(pc=30, stack=('$phi32.0',), blockstack=(), npush=0)]
DEBUG 2022-01-28 15:49:36,130 pending: deque([State(pc_initial=30 nstack_initial=1)])
DEBUG 2022-01-28 15:49:36,130 -------------------------Prune PHIs-------------------------
DEBUG 2022-01-28 15:49:36,130 Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=30 nstack_initial=1): {'$phi30.0'},
             State(pc_initial=32 nstack_initial=2): {'$phi32.1'},
             State(pc_initial=40 nstack_initial=0): set()})
DEBUG 2022-01-28 15:49:36,130 defmap: {'$phi30.0': State(pc_initial=0 nstack_initial=0),
 '$phi32.1': State(pc_initial=30 nstack_initial=1)}
DEBUG 2022-01-28 15:49:36,130 phismap: defaultdict(<class 'set'>,
            {'$phi30.0': {('$28get_iter.13',
                           State(pc_initial=0 nstack_initial=0)),
                          ('$phi32.0', State(pc_initial=32 nstack_initial=2))},
             '$phi32.0': {('$phi30.0', State(pc_initial=30 nstack_initial=1))},
             '$phi32.1': {('$30for_iter.2',
                           State(pc_initial=30 nstack_initial=1))}})
DEBUG 2022-01-28 15:49:36,130 changing phismap: defaultdict(<class 'set'>,
            {'$phi30.0': {('$28get_iter.13',
                           State(pc_initial=0 nstack_initial=0)),
                          ('$phi30.0', State(pc_initial=30 nstack_initial=1))},
             '$phi32.0': {('$28get_iter.13',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi32.1': {('$30for_iter.2',
                           State(pc_initial=30 nstack_initial=1))}})
DEBUG 2022-01-28 15:49:36,130 changing phismap: defaultdict(<class 'set'>,
            {'$phi30.0': {('$28get_iter.13',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi32.0': {('$28get_iter.13',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi32.1': {('$30for_iter.2',
                           State(pc_initial=30 nstack_initial=1))}})
DEBUG 2022-01-28 15:49:36,130 changing phismap: defaultdict(<class 'set'>,
            {'$phi30.0': {('$28get_iter.13',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi32.0': {('$28get_iter.13',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi32.1': {('$30for_iter.2',
                           State(pc_initial=30 nstack_initial=1))}})
DEBUG 2022-01-28 15:49:36,130 keep phismap: {'$phi30.0': {('$28get_iter.13', State(pc_initial=0 nstack_initial=0))},
 '$phi32.1': {('$30for_iter.2', State(pc_initial=30 nstack_initial=1))}}
DEBUG 2022-01-28 15:49:36,130 new_out: defaultdict(<class 'dict'>,
            {State(pc_initial=0 nstack_initial=0): {'$phi30.0': '$28get_iter.13'},
             State(pc_initial=30 nstack_initial=1): {'$phi32.1': '$30for_iter.2'}})
DEBUG 2022-01-28 15:49:36,130 ----------------------DONE Prune PHIs-----------------------
DEBUG 2022-01-28 15:49:36,130 block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$2load_global.0'}), (4, {'res': '$sched4.1'}), (6, {'res': '$const6.2'}), (8, {'index': '$const6.2', 'target': '$sched4.1', 'res': '$8binary_subscr.3'}), (10, {'res': '$sched10.4'}), (12, {'res': '$const12.5'}), (14, {'index': '$const12.5', 'target': '$sched10.4', 'res': '$14binary_subscr.6'}), (16, {'res': '$16load_global.7'}), (18, {'item': '$16load_global.7', 'res': '$18load_method.8'}), (20, {'res': '$const20.9'}), (22, {'func': '$18load_method.8', 'args': ['$const20.9'], 'res': '$22call_method.10'}), (24, {'lhs': '$14binary_subscr.6', 'rhs': '$22call_method.10', 'res': '$24binary_add.11'}), (26, {'func': '$2load_global.0', 'args': ['$8binary_subscr.3', '$24binary_add.11'], 'res': '$26call_function.12'}), (28, {'value': '$26call_function.12', 'res': '$28get_iter.13'})), outgoing_phis={'$phi30.0': '$28get_iter.13'}, blockstack=(), active_try_block=None, outgoing_edgepushed={30: ('$28get_iter.13',)})
DEBUG 2022-01-28 15:49:36,130 block_infos State(pc_initial=30 nstack_initial=1):
AdaptBlockInfo(insts=((30, {'iterator': '$phi30.0', 'pair': '$30for_iter.1', 'indval': '$30for_iter.2', 'pred': '$30for_iter.3'}),), outgoing_phis={'$phi32.1': '$30for_iter.2'}, blockstack=(), active_try_block=None, outgoing_edgepushed={40: (), 32: ('$phi30.0', '$30for_iter.2')})
DEBUG 2022-01-28 15:49:36,138 block_infos State(pc_initial=32 nstack_initial=2):
AdaptBlockInfo(insts=((32, {'value': '$phi32.1'}), (34, {'res': '$const34.2'}), (36, {'value': '$const34.2'}), (38, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={30: ('$phi32.0',)})
DEBUG 2022-01-28 15:49:36,138 block_infos State(pc_initial=40 nstack_initial=0):
AdaptBlockInfo(insts=((40, {'res': '$const40.0'}), (42, {'retval': '$const40.0', 'castval': '$42return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG 2022-01-28 15:49:36,138 label 0:
    sched = arg(0, name=sched)               ['sched']
    H__batch = arg(1, name=H__batch)         ['H__batch']
    $2load_global.0 = global(range: <class 'range'>) ['$2load_global.0']
    $const6.2 = const(int, 0)                ['$const6.2']
    $8binary_subscr.3 = getitem(value=sched, index=$const6.2, fn=<built-in function getitem>) ['$8binary_subscr.3', '$const6.2', 'sched']
    $const12.5 = const(int, 1)               ['$const12.5']
    $14binary_subscr.6 = getitem(value=sched, index=$const12.5, fn=<built-in function getitem>) ['$14binary_subscr.6', '$const12.5', 'sched']
    $16load_global.7 = global(np: <module 'numpy' from 'C:\\Users\\zl4821\\Anaconda3\\envs\\GBS\\lib\\site-packages\\numpy\\__init__.py'>) ['$16load_global.7']
    $18load_method.8 = getattr(value=$16load_global.7, attr=uint8) ['$16load_global.7', '$18load_method.8']
    $const20.9 = const(int, 1)               ['$const20.9']
    $22call_method.10 = call $18load_method.8($const20.9, func=$18load_method.8, args=[Var($const20.9, <string>:2)], kws=(), vararg=None, target=None) ['$18load_method.8', '$22call_method.10', '$const20.9']
    $24binary_add.11 = $14binary_subscr.6 + $22call_method.10 ['$14binary_subscr.6', '$22call_method.10', '$24binary_add.11']
    $26call_function.12 = call $2load_global.0($8binary_subscr.3, $24binary_add.11, func=$2load_global.0, args=[Var($8binary_subscr.3, <string>:2), Var($24binary_add.11, <string>:2)], kws=(), vararg=None, target=None) ['$24binary_add.11', '$26call_function.12', '$2load_global.0', '$8binary_subscr.3']
    $28get_iter.13 = getiter(value=$26call_function.12) ['$26call_function.12', '$28get_iter.13']
    $phi30.0 = $28get_iter.13                ['$28get_iter.13', '$phi30.0']
    jump 30                                  []
label 30:
    $30for_iter.1 = iternext(value=$phi30.0) ['$30for_iter.1', '$phi30.0']
    $30for_iter.2 = pair_first(value=$30for_iter.1) ['$30for_iter.1', '$30for_iter.2']
    $30for_iter.3 = pair_second(value=$30for_iter.1) ['$30for_iter.1', '$30for_iter.3']
    $phi32.1 = $30for_iter.2                 ['$30for_iter.2', '$phi32.1']
    branch $30for_iter.3, 32, 40             ['$30for_iter.3']
label 32:
    parfor__index_1342 = $phi32.1            ['$phi32.1', 'parfor__index_1342']
    __sentinel__0 = const(int, 0)            ['__sentinel__0']
    jump 30                                  []
label 40:
    $const40.0 = const(NoneType, None)       ['$const40.0']
    $42return_value.1 = cast(value=$const40.0) ['$42return_value.1', '$const40.0']
    return $42return_value.1                 ['$42return_value.1']

DEBUG 2022-01-28 15:49:36,140 ==== SSA block analysis pass on 0
DEBUG 2022-01-28 15:49:36,140 Running <numba.core.ssa._GatherDefsHandler object at 0x000002410C426F10>
DEBUG 2022-01-28 15:49:36,140 on stmt: sched.1930 = arg(0, name=sched)
DEBUG 2022-01-28 15:49:36,140 on stmt: H__batch = arg(1, name=H__batch)
DEBUG 2022-01-28 15:49:36,140 on stmt: $2load_global.0.1931 = global(range: <class 'range'>)
DEBUG 2022-01-28 15:49:36,140 on stmt: $const6.2.1932 = const(int, 0)
DEBUG 2022-01-28 15:49:36,140 on stmt: $8binary_subscr.3.1933 = getitem(value=sched.1930, index=$const6.2.1932, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:36,140 on stmt: $const12.5.1934 = const(int, 1)
DEBUG 2022-01-28 15:49:36,140 on stmt: $14binary_subscr.6.1935 = getitem(value=sched.1930, index=$const12.5.1934, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:36,140 on stmt: $16load_global.7.1936 = global(np: <module 'numpy' from 'C:\\Users\\zl4821\\Anaconda3\\envs\\GBS\\lib\\site-packages\\numpy\\__init__.py'>)
DEBUG 2022-01-28 15:49:36,140 on stmt: $18load_method.8.1937 = getattr(value=$16load_global.7.1936, attr=uint8)
DEBUG 2022-01-28 15:49:36,140 on stmt: $const20.9.1938 = const(int, 1)
DEBUG 2022-01-28 15:49:36,140 on stmt: $22call_method.10.1939 = call $18load_method.8.1937($const20.9.1938, func=$18load_method.8.1937, args=[Var($const20.9.1938, <string>:2)], kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:36,140 on stmt: $24binary_add.11.1940 = $14binary_subscr.6.1935 + $22call_method.10.1939
DEBUG 2022-01-28 15:49:36,140 on stmt: $26call_function.12.1941 = call $2load_global.0.1931($8binary_subscr.3.1933, $24binary_add.11.1940, func=$2load_global.0.1931, args=[Var($8binary_subscr.3.1933, <string>:2), Var($24binary_add.11.1940, <string>:2)], kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:36,140 on stmt: $28get_iter.13.1942 = getiter(value=$26call_function.12.1941)
DEBUG 2022-01-28 15:49:36,140 on stmt: $phi30.0.1943 = $28get_iter.13.1942
DEBUG 2022-01-28 15:49:36,140 on stmt: $expr_out_var.1346 = const(complex128, 0j)
DEBUG 2022-01-28 15:49:36,140 on stmt: jump 30
DEBUG 2022-01-28 15:49:36,140 ==== SSA block analysis pass on 30
DEBUG 2022-01-28 15:49:36,140 Running <numba.core.ssa._GatherDefsHandler object at 0x000002410C426F10>
DEBUG 2022-01-28 15:49:36,140 on stmt: $30for_iter.1.1944 = iternext(value=$phi30.0.1943)
DEBUG 2022-01-28 15:49:36,140 on stmt: $30for_iter.2.1945 = pair_first(value=$30for_iter.1.1944)
DEBUG 2022-01-28 15:49:36,140 on stmt: $30for_iter.3.1946 = pair_second(value=$30for_iter.1.1944)
DEBUG 2022-01-28 15:49:36,140 on stmt: $phi32.1.1947 = $30for_iter.2.1945
DEBUG 2022-01-28 15:49:36,140 on stmt: branch $30for_iter.3.1946, 32, 1212
DEBUG 2022-01-28 15:49:36,148 ==== SSA block analysis pass on 32
DEBUG 2022-01-28 15:49:36,148 Running <numba.core.ssa._GatherDefsHandler object at 0x000002410C426F10>
DEBUG 2022-01-28 15:49:36,148 on stmt: parfor__index_1342 = $phi32.1.1947
DEBUG 2022-01-28 15:49:36,148 on stmt: jump 40
DEBUG 2022-01-28 15:49:36,148 ==== SSA block analysis pass on 1212
DEBUG 2022-01-28 15:49:36,148 Running <numba.core.ssa._GatherDefsHandler object at 0x000002410C426F10>
DEBUG 2022-01-28 15:49:36,148 on stmt: $const40.0.1948 = const(NoneType, None)
DEBUG 2022-01-28 15:49:36,148 on stmt: $42return_value.1.1949 = cast(value=$const40.0.1948)
DEBUG 2022-01-28 15:49:36,148 on stmt: return $42return_value.1.1949
DEBUG 2022-01-28 15:49:36,148 ==== SSA block analysis pass on 40
DEBUG 2022-01-28 15:49:36,148 Running <numba.core.ssa._GatherDefsHandler object at 0x000002410C426F10>
DEBUG 2022-01-28 15:49:36,148 on stmt: H__batch[parfor__index_1342] = $expr_out_var.1346
DEBUG 2022-01-28 15:49:36,148 on stmt: jump 1211
DEBUG 2022-01-28 15:49:36,148 ==== SSA block analysis pass on 1211
DEBUG 2022-01-28 15:49:36,148 Running <numba.core.ssa._GatherDefsHandler object at 0x000002410C426F10>
DEBUG 2022-01-28 15:49:36,148 on stmt: jump 30
DEBUG 2022-01-28 15:49:36,148 defs defaultdict(<class 'list'>,
            {'$14binary_subscr.6.1935': [<numba.core.ir.Assign object at 0x000002410C893D30>],
             '$16load_global.7.1936': [<numba.core.ir.Assign object at 0x000002410C8934C0>],
             '$18load_method.8.1937': [<numba.core.ir.Assign object at 0x000002410C8934F0>],
             '$22call_method.10.1939': [<numba.core.ir.Assign object at 0x000002410C82ED30>],
             '$24binary_add.11.1940': [<numba.core.ir.Assign object at 0x000002410C82ED90>],
             '$26call_function.12.1941': [<numba.core.ir.Assign object at 0x000002410C82EA60>],
             '$28get_iter.13.1942': [<numba.core.ir.Assign object at 0x000002410C82EAC0>],
             '$2load_global.0.1931': [<numba.core.ir.Assign object at 0x000002410C8933D0>],
             '$30for_iter.1.1944': [<numba.core.ir.Assign object at 0x000002410C7435E0>],
             '$30for_iter.2.1945': [<numba.core.ir.Assign object at 0x000002410C743AC0>],
             '$30for_iter.3.1946': [<numba.core.ir.Assign object at 0x000002410C743820>],
             '$42return_value.1.1949': [<numba.core.ir.Assign object at 0x000002410C7286A0>],
             '$8binary_subscr.3.1933': [<numba.core.ir.Assign object at 0x000002410C8938B0>],
             '$const12.5.1934': [<numba.core.ir.Assign object at 0x000002410C893D00>],
             '$const20.9.1938': [<numba.core.ir.Assign object at 0x000002410C82EC40>],
             '$const40.0.1948': [<numba.core.ir.Assign object at 0x000002410C7281F0>],
             '$const6.2.1932': [<numba.core.ir.Assign object at 0x000002410C8939A0>],
             '$expr_out_var.1346': [<numba.core.ir.Assign object at 0x000002410E194250>],
             '$phi30.0.1943': [<numba.core.ir.Assign object at 0x000002410C893A30>],
             '$phi32.1.1947': [<numba.core.ir.Assign object at 0x000002410C711B80>],
             'H__batch': [<numba.core.ir.Assign object at 0x000002410C893250>],
             'parfor__index_1342': [<numba.core.ir.Assign object at 0x000002410C743B20>],
             'sched.1930': [<numba.core.ir.Assign object at 0x000002410C893190>]})
DEBUG 2022-01-28 15:49:36,148 SSA violators set()
DEBUG 2022-01-28 15:49:36,414 bytecode dump:
>          0	NOP(arg=None, lineno=2)
           2	LOAD_GLOBAL(arg=0, lineno=2)
           4	LOAD_METHOD(arg=1, lineno=2)
           6	LOAD_FAST(arg=15, lineno=2)
           8	CALL_METHOD(arg=1, lineno=2)
          10	STORE_FAST(arg=16, lineno=2)
          12	LOAD_GLOBAL(arg=2, lineno=3)
          14	LOAD_FAST(arg=0, lineno=3)
          16	LOAD_CONST(arg=1, lineno=3)
          18	BINARY_SUBSCR(arg=None, lineno=3)
          20	LOAD_FAST(arg=0, lineno=3)
          22	LOAD_CONST(arg=2, lineno=3)
          24	BINARY_SUBSCR(arg=None, lineno=3)
          26	LOAD_GLOBAL(arg=0, lineno=3)
          28	LOAD_METHOD(arg=3, lineno=3)
          30	LOAD_CONST(arg=2, lineno=3)
          32	CALL_METHOD(arg=1, lineno=3)
          34	BINARY_ADD(arg=None, lineno=3)
          36	CALL_FUNCTION(arg=2, lineno=3)
          38	GET_ITER(arg=None, lineno=3)
>         40	FOR_ITER(arg=8, lineno=3)
          42	STORE_FAST(arg=17, lineno=3)
          44	LOAD_CONST(arg=1, lineno=4)
          46	STORE_FAST(arg=18, lineno=4)
          48	JUMP_ABSOLUTE(arg=40, lineno=4)
>         50	LOAD_FAST(arg=16, lineno=5)
          52	LOAD_CONST(arg=0, lineno=5)
          54	LOAD_CONST(arg=0, lineno=5)
          56	BUILD_SLICE(arg=2, lineno=5)
          58	BINARY_SUBSCR(arg=None, lineno=5)
          60	LOAD_FAST(arg=15, lineno=5)
          62	LOAD_CONST(arg=0, lineno=5)
          64	LOAD_CONST(arg=0, lineno=5)
          66	BUILD_SLICE(arg=2, lineno=5)
          68	STORE_SUBSCR(arg=None, lineno=5)
          70	LOAD_CONST(arg=0, lineno=6)
          72	RETURN_VALUE(arg=None, lineno=6)
DEBUG 2022-01-28 15:49:36,414 pending: deque([State(pc_initial=0 nstack_initial=0)])
DEBUG 2022-01-28 15:49:36,414 stack: []
DEBUG 2022-01-28 15:49:36,414 dispatch pc=0, inst=NOP(arg=None, lineno=2)
DEBUG 2022-01-28 15:49:36,414 stack []
DEBUG 2022-01-28 15:49:36,414 dispatch pc=2, inst=LOAD_GLOBAL(arg=0, lineno=2)
DEBUG 2022-01-28 15:49:36,414 stack []
DEBUG 2022-01-28 15:49:36,414 dispatch pc=4, inst=LOAD_METHOD(arg=1, lineno=2)
DEBUG 2022-01-28 15:49:36,414 stack ['$2load_global.0']
DEBUG 2022-01-28 15:49:36,414 dispatch pc=6, inst=LOAD_FAST(arg=15, lineno=2)
DEBUG 2022-01-28 15:49:36,414 stack ['$4load_method.1']
DEBUG 2022-01-28 15:49:36,414 dispatch pc=8, inst=CALL_METHOD(arg=1, lineno=2)
DEBUG 2022-01-28 15:49:36,414 stack ['$4load_method.1', '$H__batch_2__arr6.2']
DEBUG 2022-01-28 15:49:36,414 dispatch pc=10, inst=STORE_FAST(arg=16, lineno=2)
DEBUG 2022-01-28 15:49:36,414 stack ['$8call_method.3']
DEBUG 2022-01-28 15:49:36,414 dispatch pc=12, inst=LOAD_GLOBAL(arg=2, lineno=3)
DEBUG 2022-01-28 15:49:36,414 stack []
DEBUG 2022-01-28 15:49:36,414 dispatch pc=14, inst=LOAD_FAST(arg=0, lineno=3)
DEBUG 2022-01-28 15:49:36,414 stack ['$12load_global.4']
DEBUG 2022-01-28 15:49:36,414 dispatch pc=16, inst=LOAD_CONST(arg=1, lineno=3)
DEBUG 2022-01-28 15:49:36,414 stack ['$12load_global.4', '$sched14.5']
DEBUG 2022-01-28 15:49:36,414 dispatch pc=18, inst=BINARY_SUBSCR(arg=None, lineno=3)
DEBUG 2022-01-28 15:49:36,414 stack ['$12load_global.4', '$sched14.5', '$const16.6']
DEBUG 2022-01-28 15:49:36,414 dispatch pc=20, inst=LOAD_FAST(arg=0, lineno=3)
DEBUG 2022-01-28 15:49:36,414 stack ['$12load_global.4', '$18binary_subscr.7']
DEBUG 2022-01-28 15:49:36,414 dispatch pc=22, inst=LOAD_CONST(arg=2, lineno=3)
DEBUG 2022-01-28 15:49:36,414 stack ['$12load_global.4', '$18binary_subscr.7', '$sched20.8']
DEBUG 2022-01-28 15:49:36,414 dispatch pc=24, inst=BINARY_SUBSCR(arg=None, lineno=3)
DEBUG 2022-01-28 15:49:36,414 stack ['$12load_global.4', '$18binary_subscr.7', '$sched20.8', '$const22.9']
DEBUG 2022-01-28 15:49:36,414 dispatch pc=26, inst=LOAD_GLOBAL(arg=0, lineno=3)
DEBUG 2022-01-28 15:49:36,414 stack ['$12load_global.4', '$18binary_subscr.7', '$24binary_subscr.10']
DEBUG 2022-01-28 15:49:36,414 dispatch pc=28, inst=LOAD_METHOD(arg=3, lineno=3)
DEBUG 2022-01-28 15:49:36,414 stack ['$12load_global.4', '$18binary_subscr.7', '$24binary_subscr.10', '$26load_global.11']
DEBUG 2022-01-28 15:49:36,414 dispatch pc=30, inst=LOAD_CONST(arg=2, lineno=3)
DEBUG 2022-01-28 15:49:36,414 stack ['$12load_global.4', '$18binary_subscr.7', '$24binary_subscr.10', '$28load_method.12']
DEBUG 2022-01-28 15:49:36,414 dispatch pc=32, inst=CALL_METHOD(arg=1, lineno=3)
DEBUG 2022-01-28 15:49:36,414 stack ['$12load_global.4', '$18binary_subscr.7', '$24binary_subscr.10', '$28load_method.12', '$const30.13']
DEBUG 2022-01-28 15:49:36,414 dispatch pc=34, inst=BINARY_ADD(arg=None, lineno=3)
DEBUG 2022-01-28 15:49:36,414 stack ['$12load_global.4', '$18binary_subscr.7', '$24binary_subscr.10', '$32call_method.14']
DEBUG 2022-01-28 15:49:36,414 dispatch pc=36, inst=CALL_FUNCTION(arg=2, lineno=3)
DEBUG 2022-01-28 15:49:36,414 stack ['$12load_global.4', '$18binary_subscr.7', '$34binary_add.15']
DEBUG 2022-01-28 15:49:36,414 dispatch pc=38, inst=GET_ITER(arg=None, lineno=3)
DEBUG 2022-01-28 15:49:36,414 stack ['$36call_function.16']
DEBUG 2022-01-28 15:49:36,414 end state. edges=[Edge(pc=40, stack=('$38get_iter.17',), blockstack=(), npush=0)]
DEBUG 2022-01-28 15:49:36,414 pending: deque([State(pc_initial=40 nstack_initial=1)])
DEBUG 2022-01-28 15:49:36,414 stack: ['$phi40.0']
DEBUG 2022-01-28 15:49:36,414 dispatch pc=40, inst=FOR_ITER(arg=8, lineno=3)
DEBUG 2022-01-28 15:49:36,414 stack ['$phi40.0']
DEBUG 2022-01-28 15:49:36,414 end state. edges=[Edge(pc=50, stack=(), blockstack=(), npush=0), Edge(pc=42, stack=('$phi40.0', '$40for_iter.2'), blockstack=(), npush=0)]
DEBUG 2022-01-28 15:49:36,414 pending: deque([State(pc_initial=50 nstack_initial=0), State(pc_initial=42 nstack_initial=2)])
DEBUG 2022-01-28 15:49:36,414 stack: []
DEBUG 2022-01-28 15:49:36,414 dispatch pc=50, inst=LOAD_FAST(arg=16, lineno=5)
DEBUG 2022-01-28 15:49:36,414 stack []
DEBUG 2022-01-28 15:49:36,414 dispatch pc=52, inst=LOAD_CONST(arg=0, lineno=5)
DEBUG 2022-01-28 15:49:36,414 stack ['$H__batch_250.0']
DEBUG 2022-01-28 15:49:36,414 dispatch pc=54, inst=LOAD_CONST(arg=0, lineno=5)
DEBUG 2022-01-28 15:49:36,414 stack ['$H__batch_250.0', '$const52.1']
DEBUG 2022-01-28 15:49:36,422 dispatch pc=56, inst=BUILD_SLICE(arg=2, lineno=5)
DEBUG 2022-01-28 15:49:36,422 stack ['$H__batch_250.0', '$const52.1', '$const54.2']
DEBUG 2022-01-28 15:49:36,422 dispatch pc=58, inst=BINARY_SUBSCR(arg=None, lineno=5)
DEBUG 2022-01-28 15:49:36,422 stack ['$H__batch_250.0', '$56build_slice.4']
DEBUG 2022-01-28 15:49:36,422 dispatch pc=60, inst=LOAD_FAST(arg=15, lineno=5)
DEBUG 2022-01-28 15:49:36,422 stack ['$58binary_subscr.5']
DEBUG 2022-01-28 15:49:36,422 dispatch pc=62, inst=LOAD_CONST(arg=0, lineno=5)
DEBUG 2022-01-28 15:49:36,422 stack ['$58binary_subscr.5', '$H__batch_2__arr60.6']
DEBUG 2022-01-28 15:49:36,422 dispatch pc=64, inst=LOAD_CONST(arg=0, lineno=5)
DEBUG 2022-01-28 15:49:36,422 stack ['$58binary_subscr.5', '$H__batch_2__arr60.6', '$const62.7']
DEBUG 2022-01-28 15:49:36,422 dispatch pc=66, inst=BUILD_SLICE(arg=2, lineno=5)
DEBUG 2022-01-28 15:49:36,422 stack ['$58binary_subscr.5', '$H__batch_2__arr60.6', '$const62.7', '$const64.8']
DEBUG 2022-01-28 15:49:36,422 dispatch pc=68, inst=STORE_SUBSCR(arg=None, lineno=5)
DEBUG 2022-01-28 15:49:36,422 stack ['$58binary_subscr.5', '$H__batch_2__arr60.6', '$66build_slice.10']
DEBUG 2022-01-28 15:49:36,422 dispatch pc=70, inst=LOAD_CONST(arg=0, lineno=6)
DEBUG 2022-01-28 15:49:36,422 stack []
DEBUG 2022-01-28 15:49:36,422 dispatch pc=72, inst=RETURN_VALUE(arg=None, lineno=6)
DEBUG 2022-01-28 15:49:36,422 stack ['$const70.11']
DEBUG 2022-01-28 15:49:36,422 end state. edges=[]
DEBUG 2022-01-28 15:49:36,422 pending: deque([State(pc_initial=42 nstack_initial=2)])
DEBUG 2022-01-28 15:49:36,422 stack: ['$phi42.0', '$phi42.1']
DEBUG 2022-01-28 15:49:36,422 dispatch pc=42, inst=STORE_FAST(arg=17, lineno=3)
DEBUG 2022-01-28 15:49:36,422 stack ['$phi42.0', '$phi42.1']
DEBUG 2022-01-28 15:49:36,424 dispatch pc=44, inst=LOAD_CONST(arg=1, lineno=4)
DEBUG 2022-01-28 15:49:36,424 stack ['$phi42.0']
DEBUG 2022-01-28 15:49:36,424 dispatch pc=46, inst=STORE_FAST(arg=18, lineno=4)
DEBUG 2022-01-28 15:49:36,424 stack ['$phi42.0', '$const44.2']
DEBUG 2022-01-28 15:49:36,424 dispatch pc=48, inst=JUMP_ABSOLUTE(arg=40, lineno=4)
DEBUG 2022-01-28 15:49:36,424 stack ['$phi42.0']
DEBUG 2022-01-28 15:49:36,424 end state. edges=[Edge(pc=40, stack=('$phi42.0',), blockstack=(), npush=0)]
DEBUG 2022-01-28 15:49:36,424 pending: deque([State(pc_initial=40 nstack_initial=1)])
DEBUG 2022-01-28 15:49:36,424 -------------------------Prune PHIs-------------------------
DEBUG 2022-01-28 15:49:36,424 Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=40 nstack_initial=1): {'$phi40.0'},
             State(pc_initial=42 nstack_initial=2): {'$phi42.1'},
             State(pc_initial=50 nstack_initial=0): set()})
DEBUG 2022-01-28 15:49:36,424 defmap: {'$phi40.0': State(pc_initial=0 nstack_initial=0),
 '$phi42.1': State(pc_initial=40 nstack_initial=1)}
DEBUG 2022-01-28 15:49:36,424 phismap: defaultdict(<class 'set'>,
            {'$phi40.0': {('$38get_iter.17',
                           State(pc_initial=0 nstack_initial=0)),
                          ('$phi42.0', State(pc_initial=42 nstack_initial=2))},
             '$phi42.0': {('$phi40.0', State(pc_initial=40 nstack_initial=1))},
             '$phi42.1': {('$40for_iter.2',
                           State(pc_initial=40 nstack_initial=1))}})
DEBUG 2022-01-28 15:49:36,424 changing phismap: defaultdict(<class 'set'>,
            {'$phi40.0': {('$38get_iter.17',
                           State(pc_initial=0 nstack_initial=0)),
                          ('$phi40.0', State(pc_initial=40 nstack_initial=1))},
             '$phi42.0': {('$38get_iter.17',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi42.1': {('$40for_iter.2',
                           State(pc_initial=40 nstack_initial=1))}})
DEBUG 2022-01-28 15:49:36,424 changing phismap: defaultdict(<class 'set'>,
            {'$phi40.0': {('$38get_iter.17',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi42.0': {('$38get_iter.17',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi42.1': {('$40for_iter.2',
                           State(pc_initial=40 nstack_initial=1))}})
DEBUG 2022-01-28 15:49:36,424 changing phismap: defaultdict(<class 'set'>,
            {'$phi40.0': {('$38get_iter.17',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi42.0': {('$38get_iter.17',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi42.1': {('$40for_iter.2',
                           State(pc_initial=40 nstack_initial=1))}})
DEBUG 2022-01-28 15:49:36,424 keep phismap: {'$phi40.0': {('$38get_iter.17', State(pc_initial=0 nstack_initial=0))},
 '$phi42.1': {('$40for_iter.2', State(pc_initial=40 nstack_initial=1))}}
DEBUG 2022-01-28 15:49:36,424 new_out: defaultdict(<class 'dict'>,
            {State(pc_initial=0 nstack_initial=0): {'$phi40.0': '$38get_iter.17'},
             State(pc_initial=40 nstack_initial=1): {'$phi42.1': '$40for_iter.2'}})
DEBUG 2022-01-28 15:49:36,424 ----------------------DONE Prune PHIs-----------------------
DEBUG 2022-01-28 15:49:36,424 block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$2load_global.0'}), (4, {'item': '$2load_global.0', 'res': '$4load_method.1'}), (6, {'res': '$H__batch_2__arr6.2'}), (8, {'func': '$4load_method.1', 'args': ['$H__batch_2__arr6.2'], 'res': '$8call_method.3'}), (10, {'value': '$8call_method.3'}), (12, {'res': '$12load_global.4'}), (14, {'res': '$sched14.5'}), (16, {'res': '$const16.6'}), (18, {'index': '$const16.6', 'target': '$sched14.5', 'res': '$18binary_subscr.7'}), (20, {'res': '$sched20.8'}), (22, {'res': '$const22.9'}), (24, {'index': '$const22.9', 'target': '$sched20.8', 'res': '$24binary_subscr.10'}), (26, {'res': '$26load_global.11'}), (28, {'item': '$26load_global.11', 'res': '$28load_method.12'}), (30, {'res': '$const30.13'}), (32, {'func': '$28load_method.12', 'args': ['$const30.13'], 'res': '$32call_method.14'}), (34, {'lhs': '$24binary_subscr.10', 'rhs': '$32call_method.14', 'res': '$34binary_add.15'}), (36, {'func': '$12load_global.4', 'args': ['$18binary_subscr.7', '$34binary_add.15'], 'res': '$36call_function.16'}), (38, {'value': '$36call_function.16', 'res': '$38get_iter.17'})), outgoing_phis={'$phi40.0': '$38get_iter.17'}, blockstack=(), active_try_block=None, outgoing_edgepushed={40: ('$38get_iter.17',)})
DEBUG 2022-01-28 15:49:36,424 block_infos State(pc_initial=40 nstack_initial=1):
AdaptBlockInfo(insts=((40, {'iterator': '$phi40.0', 'pair': '$40for_iter.1', 'indval': '$40for_iter.2', 'pred': '$40for_iter.3'}),), outgoing_phis={'$phi42.1': '$40for_iter.2'}, blockstack=(), active_try_block=None, outgoing_edgepushed={50: (), 42: ('$phi40.0', '$40for_iter.2')})
DEBUG 2022-01-28 15:49:36,424 block_infos State(pc_initial=42 nstack_initial=2):
AdaptBlockInfo(insts=((42, {'value': '$phi42.1'}), (44, {'res': '$const44.2'}), (46, {'value': '$const44.2'}), (48, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={40: ('$phi42.0',)})
DEBUG 2022-01-28 15:49:36,424 block_infos State(pc_initial=50 nstack_initial=0):
AdaptBlockInfo(insts=((50, {'res': '$H__batch_250.0'}), (52, {'res': '$const52.1'}), (54, {'res': '$const54.2'}), (56, {'start': '$const52.1', 'stop': '$const54.2', 'step': None, 'res': '$56build_slice.4', 'slicevar': '$56build_slice.3'}), (58, {'index': '$56build_slice.4', 'target': '$H__batch_250.0', 'res': '$58binary_subscr.5'}), (60, {'res': '$H__batch_2__arr60.6'}), (62, {'res': '$const62.7'}), (64, {'res': '$const64.8'}), (66, {'start': '$const62.7', 'stop': '$const64.8', 'step': None, 'res': '$66build_slice.10', 'slicevar': '$66build_slice.9'}), (68, {'target': '$H__batch_2__arr60.6', 'index': '$66build_slice.10', 'value': '$58binary_subscr.5'}), (70, {'res': '$const70.11'}), (72, {'retval': '$const70.11', 'castval': '$72return_value.12'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG 2022-01-28 15:49:36,424 label 0:
    sched = arg(0, name=sched)               ['sched']
    _136binary__add_59 = arg(1, name=_136binary__add_59) ['_136binary__add_59']
    A = arg(2, name=A)                       ['A']
    D = arg(3, name=D)                       ['D']
    N__fixed = arg(4, name=N__fixed)         ['N__fixed']
    N__max = arg(5, name=N__max)             ['N__max']
    batch__max = arg(6, name=batch__max)     ['batch__max']
    binoms = arg(7, name=binoms)             ['binoms']
    edge__reps = arg(8, name=edge__reps)     ['edge__reps']
    edge__reps__size0_1299 = arg(9, name=edge__reps__size0_1299) ['edge__reps__size0_1299']
    glynn = arg(10, name=glynn)              ['glynn']
    n = arg(11, name=n)                      ['n']
    oddV = arg(12, name=oddV)                ['oddV']
    odd__cutoff = arg(13, name=odd__cutoff)  ['odd__cutoff']
    oddloop = arg(14, name=oddloop)          ['oddloop']
    H__batch_2__arr = arg(15, name=H__batch_2__arr) ['H__batch_2__arr']
    $2load_global.0 = global(np: <module 'numpy' from 'C:\\Users\\zl4821\\Anaconda3\\envs\\GBS\\lib\\site-packages\\numpy\\__init__.py'>) ['$2load_global.0']
    $4load_method.1 = getattr(value=$2load_global.0, attr=copy) ['$2load_global.0', '$4load_method.1']
    H__batch_2 = call $4load_method.1(H__batch_2__arr, func=$4load_method.1, args=[Var(H__batch_2__arr, <string>:2)], kws=(), vararg=None, target=None) ['$4load_method.1', 'H__batch_2', 'H__batch_2__arr']
    $12load_global.4 = global(range: <class 'range'>) ['$12load_global.4']
    $const16.6 = const(int, 0)               ['$const16.6']
    $18binary_subscr.7 = getitem(value=sched, index=$const16.6, fn=<built-in function getitem>) ['$18binary_subscr.7', '$const16.6', 'sched']
    $const22.9 = const(int, 1)               ['$const22.9']
    $24binary_subscr.10 = getitem(value=sched, index=$const22.9, fn=<built-in function getitem>) ['$24binary_subscr.10', '$const22.9', 'sched']
    $26load_global.11 = global(np: <module 'numpy' from 'C:\\Users\\zl4821\\Anaconda3\\envs\\GBS\\lib\\site-packages\\numpy\\__init__.py'>) ['$26load_global.11']
    $28load_method.12 = getattr(value=$26load_global.11, attr=uint8) ['$26load_global.11', '$28load_method.12']
    $const30.13 = const(int, 1)              ['$const30.13']
    $32call_method.14 = call $28load_method.12($const30.13, func=$28load_method.12, args=[Var($const30.13, <string>:3)], kws=(), vararg=None, target=None) ['$28load_method.12', '$32call_method.14', '$const30.13']
    $34binary_add.15 = $24binary_subscr.10 + $32call_method.14 ['$24binary_subscr.10', '$32call_method.14', '$34binary_add.15']
    $36call_function.16 = call $12load_global.4($18binary_subscr.7, $34binary_add.15, func=$12load_global.4, args=[Var($18binary_subscr.7, <string>:3), Var($34binary_add.15, <string>:3)], kws=(), vararg=None, target=None) ['$12load_global.4', '$18binary_subscr.7', '$34binary_add.15', '$36call_function.16']
    $38get_iter.17 = getiter(value=$36call_function.16) ['$36call_function.16', '$38get_iter.17']
    $phi40.0 = $38get_iter.17                ['$38get_iter.17', '$phi40.0']
    jump 40                                  []
label 40:
    $40for_iter.1 = iternext(value=$phi40.0) ['$40for_iter.1', '$phi40.0']
    $40for_iter.2 = pair_first(value=$40for_iter.1) ['$40for_iter.1', '$40for_iter.2']
    $40for_iter.3 = pair_second(value=$40for_iter.1) ['$40for_iter.1', '$40for_iter.3']
    $phi42.1 = $40for_iter.2                 ['$40for_iter.2', '$phi42.1']
    branch $40for_iter.3, 42, 50             ['$40for_iter.3']
label 42:
    parfor__index_1369 = $phi42.1            ['$phi42.1', 'parfor__index_1369']
    __sentinel__0 = const(int, 0)            ['__sentinel__0']
    jump 40                                  []
label 50:
    $const52.1 = const(NoneType, None)       ['$const52.1']
    $const54.2 = const(NoneType, None)       ['$const54.2']
    $56build_slice.3 = global(slice: <class 'slice'>) ['$56build_slice.3']
    $56build_slice.4 = call $56build_slice.3($const52.1, $const54.2, func=$56build_slice.3, args=(Var($const52.1, <string>:5), Var($const54.2, <string>:5)), kws=(), vararg=None, target=None) ['$56build_slice.3', '$56build_slice.4', '$const52.1', '$const54.2']
    $58binary_subscr.5 = getitem(value=H__batch_2, index=$56build_slice.4, fn=<built-in function getitem>) ['$56build_slice.4', '$58binary_subscr.5', 'H__batch_2']
    $const62.7 = const(NoneType, None)       ['$const62.7']
    $const64.8 = const(NoneType, None)       ['$const64.8']
    $66build_slice.9 = global(slice: <class 'slice'>) ['$66build_slice.9']
    $66build_slice.10 = call $66build_slice.9($const62.7, $const64.8, func=$66build_slice.9, args=(Var($const62.7, <string>:5), Var($const64.8, <string>:5)), kws=(), vararg=None, target=None) ['$66build_slice.10', '$66build_slice.9', '$const62.7', '$const64.8']
    H__batch_2__arr[$66build_slice.10] = $58binary_subscr.5 ['$58binary_subscr.5', '$66build_slice.10', 'H__batch_2__arr']
    $const70.11 = const(NoneType, None)      ['$const70.11']
    $72return_value.12 = cast(value=$const70.11) ['$72return_value.12', '$const70.11']
    return $72return_value.12                ['$72return_value.12']

DEBUG 2022-01-28 15:49:36,455 ==== SSA block analysis pass on 0
DEBUG 2022-01-28 15:49:36,455 Running <numba.core.ssa._GatherDefsHandler object at 0x000002410CBCF3A0>
DEBUG 2022-01-28 15:49:36,455 on stmt: sched.1973 = arg(0, name=sched)
DEBUG 2022-01-28 15:49:36,455 on stmt: _136binary__add_59 = arg(1, name=_136binary__add_59)
DEBUG 2022-01-28 15:49:36,455 on stmt: A = arg(2, name=A)
DEBUG 2022-01-28 15:49:36,455 on stmt: D = arg(3, name=D)
DEBUG 2022-01-28 15:49:36,455 on stmt: N__fixed = arg(4, name=N__fixed)
DEBUG 2022-01-28 15:49:36,455 on stmt: N__max = arg(5, name=N__max)
DEBUG 2022-01-28 15:49:36,455 on stmt: batch__max = arg(6, name=batch__max)
DEBUG 2022-01-28 15:49:36,455 on stmt: binoms = arg(7, name=binoms)
DEBUG 2022-01-28 15:49:36,455 on stmt: edge__reps = arg(8, name=edge__reps)
DEBUG 2022-01-28 15:49:36,455 on stmt: edge__reps__size0_1299 = arg(9, name=edge__reps__size0_1299)
DEBUG 2022-01-28 15:49:36,455 on stmt: glynn = arg(10, name=glynn)
DEBUG 2022-01-28 15:49:36,455 on stmt: n = arg(11, name=n)
DEBUG 2022-01-28 15:49:36,455 on stmt: oddV = arg(12, name=oddV)
DEBUG 2022-01-28 15:49:36,455 on stmt: odd__cutoff = arg(13, name=odd__cutoff)
DEBUG 2022-01-28 15:49:36,455 on stmt: oddloop = arg(14, name=oddloop)
DEBUG 2022-01-28 15:49:36,455 on stmt: H__batch_2__arr = arg(15, name=H__batch_2__arr)
DEBUG 2022-01-28 15:49:36,455 on stmt: $2load_global.0.1974 = global(np: <module 'numpy' from 'C:\\Users\\zl4821\\Anaconda3\\envs\\GBS\\lib\\site-packages\\numpy\\__init__.py'>)
DEBUG 2022-01-28 15:49:36,455 on stmt: $4load_method.1.1975 = getattr(value=$2load_global.0.1974, attr=copy)
DEBUG 2022-01-28 15:49:36,455 on stmt: H__batch_2 = call $4load_method.1.1975(H__batch_2__arr, func=$4load_method.1.1975, args=[Var(H__batch_2__arr, <string>:2)], kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:36,455 on stmt: $12load_global.4.1976 = global(range: <class 'range'>)
DEBUG 2022-01-28 15:49:36,455 on stmt: $const16.6.1977 = const(int, 0)
DEBUG 2022-01-28 15:49:36,455 on stmt: $18binary_subscr.7.1978 = getitem(value=sched.1973, index=$const16.6.1977, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:36,455 on stmt: $const22.9.1979 = const(int, 1)
DEBUG 2022-01-28 15:49:36,455 on stmt: $24binary_subscr.10.1980 = getitem(value=sched.1973, index=$const22.9.1979, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:36,455 on stmt: $26load_global.11.1981 = global(np: <module 'numpy' from 'C:\\Users\\zl4821\\Anaconda3\\envs\\GBS\\lib\\site-packages\\numpy\\__init__.py'>)
DEBUG 2022-01-28 15:49:36,455 on stmt: $28load_method.12.1982 = getattr(value=$26load_global.11.1981, attr=uint8)
DEBUG 2022-01-28 15:49:36,455 on stmt: $const30.13.1983 = const(int, 1)
DEBUG 2022-01-28 15:49:36,455 on stmt: $32call_method.14.1984 = call $28load_method.12.1982($const30.13.1983, func=$28load_method.12.1982, args=[Var($const30.13.1983, <string>:3)], kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:36,455 on stmt: $34binary_add.15.1985 = $24binary_subscr.10.1980 + $32call_method.14.1984
DEBUG 2022-01-28 15:49:36,455 on stmt: $36call_function.16.1986 = call $12load_global.4.1976($18binary_subscr.7.1978, $34binary_add.15.1985, func=$12load_global.4.1976, args=[Var($18binary_subscr.7.1978, <string>:3), Var($34binary_add.15.1985, <string>:3)], kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:36,455 on stmt: $38get_iter.17.1987 = getiter(value=$36call_function.16.1986)
DEBUG 2022-01-28 15:49:36,455 on stmt: $phi40.0.1988 = $38get_iter.17.1987
DEBUG 2022-01-28 15:49:36,455 on stmt: $const168.4 = const(int, 2)
DEBUG 2022-01-28 15:49:36,455 on stmt: $172binary_multiply.6 = $const168.4 * batch__max
DEBUG 2022-01-28 15:49:36,455 on stmt: $176binary_add.8 = $172binary_multiply.6 + odd__cutoff
DEBUG 2022-01-28 15:49:36,455 on stmt: $const178.9 = const(int, 1)
DEBUG 2022-01-28 15:49:36,455 on stmt: $180binary_add.10 = $176binary_add.8 + $const178.9
DEBUG 2022-01-28 15:49:36,455 on stmt: $192load_global.15 = global(find_kept_edges: CPUDispatcher(<function find_kept_edges at 0x0000024107424550>))
DEBUG 2022-01-28 15:49:36,455 on stmt: $np_g_var.1348 = global(np: <module 'numpy' from 'C:\\Users\\zl4821\\Anaconda3\\envs\\GBS\\lib\\site-packages\\numpy\\__init__.py'>)
DEBUG 2022-01-28 15:49:36,455 on stmt: $empty_attr_attr.1349 = getattr(value=$np_g_var.1348, attr=empty)
DEBUG 2022-01-28 15:49:36,455 on stmt: $np_typ_var.1350 = getattr(value=$np_g_var.1348, attr=complex128)
DEBUG 2022-01-28 15:49:36,455 on stmt: Hnew = call $empty_attr_attr.1349($180binary_add.10, $np_typ_var.1350, func=$empty_attr_attr.1349, args=[Var($180binary_add.10, loop_hafnian_batch.py:41), Var($np_typ_var.1350, loop_hafnian_batch.py:41)], kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:36,455 on stmt: binom_prod = const(float, 1.0)
DEBUG 2022-01-28 15:49:36,455 on stmt: $214load_global.23 = global(range: <class 'range'>)
DEBUG 2022-01-28 15:49:36,455 on stmt: $const216.24 = const(int, 1)
DEBUG 2022-01-28 15:49:36,455 on stmt: $const220.26 = const(int, 2)
DEBUG 2022-01-28 15:49:36,455 on stmt: $222binary_floor_divide.27 = n // $const220.26
DEBUG 2022-01-28 15:49:36,455 on stmt: msg.1330 = const(str, Sizes of H_batch.2, Hnew do not match on C:\Users\zl4821\PycharmProjects\GBS\gbs\loop_hafnian_batch.py (75))
DEBUG 2022-01-28 15:49:36,455 on stmt: assert.1331 = global(assert_equiv: <intrinsic assert_equiv>)
DEBUG 2022-01-28 15:49:36,455 on stmt: $const390.6 = const(float, -1.0)
DEBUG 2022-01-28 15:49:36,455 on stmt: $const394.8 = const(int, 2)
DEBUG 2022-01-28 15:49:36,455 on stmt: $const410.15 = const(int, 2)
DEBUG 2022-01-28 15:49:36,455 on stmt: $const416.18 = const(int, 0)
DEBUG 2022-01-28 15:49:36,455 on stmt: $const432.25 = const(int, 2)
DEBUG 2022-01-28 15:49:36,455 on stmt: $const436.27 = const(int, 0)
DEBUG 2022-01-28 15:49:36,455 on stmt: bool440 = global(bool: <class 'bool'>)
DEBUG 2022-01-28 15:49:36,455 on stmt: $const462.12 = const(int, 2)
DEBUG 2022-01-28 15:49:36,455 on stmt: $282load_global.1 = global(get_submatrices: CPUDispatcher(<function get_submatrices at 0x0000024107424E50>))
DEBUG 2022-01-28 15:49:36,455 on stmt: $304load_global.12 = global(eigvals: CPUDispatcher(<function eigvals at 0x00000241074303A0>))
DEBUG 2022-01-28 15:49:36,455 on stmt: $312load_global.15 = global(f_loop: CPUDispatcher(<function f_loop at 0x00000241074248B0>))
DEBUG 2022-01-28 15:49:36,455 on stmt: $328load_global.22 = global(f_loop_odd: CPUDispatcher(<function f_loop_odd at 0x0000024107424AF0>))
DEBUG 2022-01-28 15:49:36,455 on stmt: $348load_global.31 = global(range: <class 'range'>)
DEBUG 2022-01-28 15:49:36,455 on stmt: $const350.32 = const(int, 2)
DEBUG 2022-01-28 15:49:36,455 on stmt: $const354.34 = const(int, 0)
DEBUG 2022-01-28 15:49:36,463 on stmt: $const360.37 = const(int, 2)
DEBUG 2022-01-28 15:49:36,463 on stmt: $364binary_multiply.39 = $const360.37 * batch__max
DEBUG 2022-01-28 15:49:36,463 on stmt: $368binary_add.41 = $364binary_multiply.39 + odd__cutoff
DEBUG 2022-01-28 15:49:36,463 on stmt: $const370.42 = const(int, 1)
DEBUG 2022-01-28 15:49:36,463 on stmt: $372binary_add.43 = $368binary_add.41 + $const370.42
DEBUG 2022-01-28 15:49:36,463 on stmt: bool260 = global(bool: <class 'bool'>)
DEBUG 2022-01-28 15:49:36,463 on stmt: msg.1309 = const(str, Sizes of kept_edges, edge_reps do not match on C:\Users\zl4821\PycharmProjects\GBS\gbs\loop_hafnian_batch.py (51))
DEBUG 2022-01-28 15:49:36,463 on stmt: assert.1310 = global(assert_equiv: <intrinsic assert_equiv>)
DEBUG 2022-01-28 15:49:36,463 on stmt: $np_g_var.1353 = global(np: <module 'numpy' from 'C:\\Users\\zl4821\\Anaconda3\\envs\\GBS\\lib\\site-packages\\numpy\\__init__.py'>)
DEBUG 2022-01-28 15:49:36,463 on stmt: $empty_attr_attr.1354 = getattr(value=$np_g_var.1353, attr=empty)
DEBUG 2022-01-28 15:49:36,463 on stmt: $np_typ_var.1355 = getattr(value=$np_g_var.1353, attr=int64)
DEBUG 2022-01-28 15:49:36,463 on stmt: delta = call $empty_attr_attr.1354(edge__reps__size0_1299, $np_typ_var.1355, func=$empty_attr_attr.1354, args=[Var(edge__reps__size0_1299, loop_hafnian_batch.py:32), Var($np_typ_var.1355, loop_hafnian_batch.py:51)], kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:36,463 on stmt: jump 40
DEBUG 2022-01-28 15:49:36,463 ==== SSA block analysis pass on 40
DEBUG 2022-01-28 15:49:36,463 Running <numba.core.ssa._GatherDefsHandler object at 0x000002410CBCF3A0>
DEBUG 2022-01-28 15:49:36,463 on stmt: $40for_iter.1.1989 = iternext(value=$phi40.0.1988)
DEBUG 2022-01-28 15:49:36,463 on stmt: $40for_iter.2.1990 = pair_first(value=$40for_iter.1.1989)
DEBUG 2022-01-28 15:49:36,463 on stmt: $40for_iter.3.1991 = pair_second(value=$40for_iter.1.1989)
DEBUG 2022-01-28 15:49:36,463 on stmt: $phi42.1.1992 = $40for_iter.2.1990
DEBUG 2022-01-28 15:49:36,463 on stmt: branch $40for_iter.3.1991, 42, 1224
DEBUG 2022-01-28 15:49:36,463 ==== SSA block analysis pass on 42
DEBUG 2022-01-28 15:49:36,463 Running <numba.core.ssa._GatherDefsHandler object at 0x000002410CBCF3A0>
DEBUG 2022-01-28 15:49:36,465 on stmt: parfor__index_1369 = $phi42.1.1992
DEBUG 2022-01-28 15:49:36,465 on stmt: jump 50
DEBUG 2022-01-28 15:49:36,465 ==== SSA block analysis pass on 1224
DEBUG 2022-01-28 15:49:36,465 Running <numba.core.ssa._GatherDefsHandler object at 0x000002410CBCF3A0>
DEBUG 2022-01-28 15:49:36,465 on stmt: $const52.1.1993 = const(NoneType, None)
DEBUG 2022-01-28 15:49:36,465 on stmt: $const54.2.1994 = const(NoneType, None)
DEBUG 2022-01-28 15:49:36,465 on stmt: $56build_slice.3.1995 = global(slice: <class 'slice'>)
DEBUG 2022-01-28 15:49:36,465 on stmt: $56build_slice.4.1996 = call $56build_slice.3.1995($const52.1.1993, $const54.2.1994, func=$56build_slice.3.1995, args=(Var($const52.1.1993, <string>:5), Var($const54.2.1994, <string>:5)), kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:36,465 on stmt: $58binary_subscr.5.1997 = getitem(value=H__batch_2, index=$56build_slice.4.1996, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:36,465 on stmt: $const62.7.1998 = const(NoneType, None)
DEBUG 2022-01-28 15:49:36,465 on stmt: $const64.8.1999 = const(NoneType, None)
DEBUG 2022-01-28 15:49:36,465 on stmt: $66build_slice.9.2000 = global(slice: <class 'slice'>)
DEBUG 2022-01-28 15:49:36,465 on stmt: $66build_slice.10.2001 = call $66build_slice.9.2000($const62.7.1998, $const64.8.1999, func=$66build_slice.9.2000, args=(Var($const62.7.1998, <string>:5), Var($const64.8.1999, <string>:5)), kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:36,465 on stmt: H__batch_2__arr[$66build_slice.10.2001] = $58binary_subscr.5.1997
DEBUG 2022-01-28 15:49:36,465 on stmt: $const70.11.2002 = const(NoneType, None)
DEBUG 2022-01-28 15:49:36,465 on stmt: $72return_value.12.2003 = cast(value=$const70.11.2002)
DEBUG 2022-01-28 15:49:36,465 on stmt: return $72return_value.12.2003
DEBUG 2022-01-28 15:49:36,465 ==== SSA block analysis pass on 1062
DEBUG 2022-01-28 15:49:36,465 Running <numba.core.ssa._GatherDefsHandler object at 0x000002410CBCF3A0>
DEBUG 2022-01-28 15:49:36,465 on stmt: jump 1003
DEBUG 2022-01-28 15:49:36,465 ==== SSA block analysis pass on 50
DEBUG 2022-01-28 15:49:36,465 Running <numba.core.ssa._GatherDefsHandler object at 0x000002410CBCF3A0>
DEBUG 2022-01-28 15:49:36,465 on stmt: j = parfor__index_1369
DEBUG 2022-01-28 15:49:36,465 on stmt: id=13[LoopNest(index_variable = parfor_index.1347, range = (0, $180binary_add.10, 1))]{1222: <ir.Block at C:\Users\zl4821\PycharmProjects\GBS\gbs\loop_hafnian_batch.py (41)>}Var(parfor_index.1347, loop_hafnian_batch.py:41)
DEBUG 2022-01-28 15:49:36,465 on stmt: kept_edges = call $192load_global.15(j, edge__reps, func=$192load_global.15, args=[Var(j, loop_hafnian_batch.py:39), Var(edge__reps, loop_hafnian_batch.py:32)], kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:36,465 on stmt: kept_edges_shape.1306 = getattr(value=kept_edges, attr=shape)
DEBUG 2022-01-28 15:49:36,465 on stmt: kept_edges_size0.1307 = static_getitem(value=kept_edges_shape.1306, index=0, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:36,465 on stmt: binom_prod.2 = binom_prod
DEBUG 2022-01-28 15:49:36,465 on stmt: id=17[LoopNest(index_variable = parfor_index.1365, range = (0, kept_edges_size0.1307, 1))]{557: <ir.Block at C:\Users\zl4821\Anaconda3\envs\GBS\lib\site-packages\numba\parfors\parfor.py (256)>}Var(parfor_index.1365, parfor.py:256)
DEBUG 2022-01-28 15:49:36,465 on stmt: $224call_function.28 = call $214load_global.23($const216.24, $222binary_floor_divide.27, func=$214load_global.23, args=[Var($const216.24, loop_hafnian_batch.py:47), Var($222binary_floor_divide.27, loop_hafnian_batch.py:47)], kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:36,465 on stmt: $226get_iter.29 = getiter(value=$224call_function.28)
DEBUG 2022-01-28 15:49:36,465 on stmt: jump 495
DEBUG 2022-01-28 15:49:36,465 ==== SSA block analysis pass on 593
DEBUG 2022-01-28 15:49:36,465 Running <numba.core.ssa._GatherDefsHandler object at 0x000002410CBCF3A0>
DEBUG 2022-01-28 15:49:36,465 on stmt: delta.2 = kept_edges
DEBUG 2022-01-28 15:49:36,465 on stmt: jump 631
DEBUG 2022-01-28 15:49:36,465 ==== SSA block analysis pass on 495
DEBUG 2022-01-28 15:49:36,465 Running <numba.core.ssa._GatherDefsHandler object at 0x000002410CBCF3A0>
DEBUG 2022-01-28 15:49:36,465 on stmt: $228for_iter.2 = iternext(value=$226get_iter.29)
DEBUG 2022-01-28 15:49:36,465 on stmt: $i.1394 = pair_first(value=$228for_iter.2)
DEBUG 2022-01-28 15:49:36,465 on stmt: $228for_iter.4 = pair_second(value=$228for_iter.2)
DEBUG 2022-01-28 15:49:36,465 on stmt: branch $228for_iter.4, 571, 577
DEBUG 2022-01-28 15:49:36,465 ==== SSA block analysis pass on 1078
DEBUG 2022-01-28 15:49:36,465 Running <numba.core.ssa._GatherDefsHandler object at 0x000002410CBCF3A0>
DEBUG 2022-01-28 15:49:36,465 on stmt: ret.1332 = call assert.1331(msg.1330, _136binary__add_59, $180binary_add.10, func=assert.1331, args=[Var(msg.1330, loop_hafnian_batch.py:75), Var(_136binary__add_59, loop_hafnian_batch.py:38), Var($180binary_add.10, loop_hafnian_batch.py:41)], kws={}, vararg=None, target=None)
DEBUG 2022-01-28 15:49:36,465 on stmt: $H_batch.2.1740 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=H__batch_2, rhs=Hnew, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-01-28 15:49:36,465 on stmt: H__batch_2 = $H_batch.2.1740
DEBUG 2022-01-28 15:49:36,465 on stmt: jump 1117
DEBUG 2022-01-28 15:49:36,465 ==== SSA block analysis pass on 1005
DEBUG 2022-01-28 15:49:36,465 Running <numba.core.ssa._GatherDefsHandler object at 0x000002410CBCF3A0>
DEBUG 2022-01-28 15:49:36,465 on stmt: N = N__fixed + $N_det.1393
DEBUG 2022-01-28 15:49:36,465 on stmt: $396binary_floor_divide.9 = N // $const394.8
DEBUG 2022-01-28 15:49:36,465 on stmt: $400binary_subtract.11 = $396binary_floor_divide.9 - val.1149
DEBUG 2022-01-28 15:49:36,465 on stmt: plus_minus = $const390.6 ** $400binary_subtract.11
DEBUG 2022-01-28 15:49:36,465 on stmt: $412binary_floor_divide.16 = $N_det.1393 // $const410.15
DEBUG 2022-01-28 15:49:36,465 on stmt: $418binary_subscr.19 = static_getitem(value=kept_edges, index=0, index_var=$const416.18, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:36,465 on stmt: $420build_tuple.20 = build_tuple(items=[Var($412binary_floor_divide.16, loop_hafnian_batch.py:68), Var($418binary_subscr.19, loop_hafnian_batch.py:68)])
DEBUG 2022-01-28 15:49:36,465 on stmt: $422binary_subscr.21 = getitem(value=binoms, index=$420build_tuple.20, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:36,465 on stmt: n_det_binom_prod = $422binary_subscr.21 * binom_prod.2
DEBUG 2022-01-28 15:49:36,465 on stmt: $434binary_modulo.26 = $N_det.1393 % $const432.25
DEBUG 2022-01-28 15:49:36,465 on stmt: $438compare_op.28 = $434binary_modulo.26 == $const436.27
DEBUG 2022-01-28 15:49:36,465 on stmt: $440pred = call bool440($438compare_op.28, func=bool440, args=(Var($438compare_op.28, loop_hafnian_batch.py:70),), kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:36,465 on stmt: branch $440pred, 1021, 1060
DEBUG 2022-01-28 15:49:36,465 ==== SSA block analysis pass on 571
DEBUG 2022-01-28 15:49:36,465 Running <numba.core.ssa._GatherDefsHandler object at 0x000002410CBCF3A0>
DEBUG 2022-01-28 15:49:36,465 on stmt: $240binary_subscr.7 = getitem(value=edge__reps, index=$i.1394, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:36,465 on stmt: $246binary_subscr.10 = getitem(value=kept_edges, index=$i.1394, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:36,465 on stmt: $248build_tuple.11 = build_tuple(items=[Var($240binary_subscr.7, loop_hafnian_batch.py:48), Var($246binary_subscr.10, loop_hafnian_batch.py:48)])
DEBUG 2022-01-28 15:49:36,465 on stmt: $250binary_subscr.12 = getitem(value=binoms, index=$248build_tuple.11, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:36,465 on stmt: $binom_prod.2.1741 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=binom_prod.2, rhs=$250binary_subscr.12, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-01-28 15:49:36,465 on stmt: binom_prod.2 = $binom_prod.2.1741
DEBUG 2022-01-28 15:49:36,465 on stmt: jump 495
DEBUG 2022-01-28 15:49:36,465 ==== SSA block analysis pass on 1021
DEBUG 2022-01-28 15:49:36,465 Running <numba.core.ssa._GatherDefsHandler object at 0x000002410CBCF3A0>
DEBUG 2022-01-28 15:49:36,465 on stmt: $450binary_subscr.6 = getitem(value=Hnew, index=$N_det.1393, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:36,465 on stmt: $456binary_multiply.9 = n_det_binom_prod * plus_minus
DEBUG 2022-01-28 15:49:36,465 on stmt: $464binary_floor_divide.13 = N // $const462.12
DEBUG 2022-01-28 15:49:36,465 on stmt: $466binary_subscr.14 = getitem(value=f_even, index=$464binary_floor_divide.13, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:36,465 on stmt: $468binary_multiply.15 = $456binary_multiply.9 * $466binary_subscr.14
DEBUG 2022-01-28 15:49:36,465 on stmt: $470inplace_add.16 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$450binary_subscr.6, rhs=$468binary_multiply.15, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-01-28 15:49:36,465 on stmt: Hnew[$N_det.1393] = $470inplace_add.16
DEBUG 2022-01-28 15:49:36,465 on stmt: jump 1062
DEBUG 2022-01-28 15:49:36,473 ==== SSA block analysis pass on 1060
DEBUG 2022-01-28 15:49:36,473 Running <numba.core.ssa._GatherDefsHandler object at 0x000002410CBCF3A0>
DEBUG 2022-01-28 15:49:36,473 on stmt: $484binary_subscr.6 = getitem(value=Hnew, index=$N_det.1393, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:36,473 on stmt: $490binary_multiply.9 = n_det_binom_prod * plus_minus
DEBUG 2022-01-28 15:49:36,473 on stmt: $496binary_subscr.12 = getitem(value=f_odd, index=N, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:36,473 on stmt: $498binary_multiply.13 = $490binary_multiply.9 * $496binary_subscr.12
DEBUG 2022-01-28 15:49:36,473 on stmt: $500inplace_add.14 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$484binary_subscr.6, rhs=$498binary_multiply.13, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-01-28 15:49:36,473 on stmt: Hnew[$N_det.1393] = $500inplace_add.14
DEBUG 2022-01-28 15:49:36,473 on stmt: jump 1062
DEBUG 2022-01-28 15:49:36,473 ==== SSA block analysis pass on 631
DEBUG 2022-01-28 15:49:36,473 Running <numba.core.ssa._GatherDefsHandler object at 0x000002410CBCF3A0>
DEBUG 2022-01-28 15:49:36,473 on stmt: $292call_function.6 = call $282load_global.1(delta.2, A, D, oddV, func=$282load_global.1, args=[Var(delta.2, loop_hafnian_batch.py:55), Var(A, loop_hafnian_batch.py:24), Var(D, loop_hafnian_batch.py:24), Var(oddV, loop_hafnian_batch.py:25)], kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:36,473 on stmt: $294unpack_sequence.11 = exhaust_iter(value=$292call_function.6, count=4)
DEBUG 2022-01-28 15:49:36,473 on stmt: $AX_S.1389 = static_getitem(value=$294unpack_sequence.11, index=0, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:36,473 on stmt: $XD_S.1388 = static_getitem(value=$294unpack_sequence.11, index=1, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:36,473 on stmt: $D_S.1390 = static_getitem(value=$294unpack_sequence.11, index=2, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:36,473 on stmt: $oddVX_S.1387 = static_getitem(value=$294unpack_sequence.11, index=3, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:36,473 on stmt: E = call $304load_global.12($AX_S.1389, func=$304load_global.12, args=[Var($AX_S.1389, loop_hafnian_batch.py:55)], kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:36,473 on stmt: f_even = call $312load_global.15(E, $AX_S.1389, $XD_S.1388, $D_S.1390, N__max, func=$312load_global.15, args=[Var(E, loop_hafnian_batch.py:57), Var($AX_S.1389, loop_hafnian_batch.py:55), Var($XD_S.1388, loop_hafnian_batch.py:55), Var($D_S.1390, loop_hafnian_batch.py:55), Var(N__max, loop_hafnian_batch.py:30)], kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:36,473 on stmt: f_odd = call $328load_global.22(E, $AX_S.1389, $XD_S.1388, $D_S.1390, N__max, oddloop, $oddVX_S.1387, func=$328load_global.22, args=[Var(E, loop_hafnian_batch.py:57), Var($AX_S.1389, loop_hafnian_batch.py:55), Var($XD_S.1388, loop_hafnian_batch.py:55), Var($D_S.1390, loop_hafnian_batch.py:55), Var(N__max, loop_hafnian_batch.py:30), Var(oddloop, loop_hafnian_batch.py:24), Var($oddVX_S.1387, loop_hafnian_batch.py:55)], kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:36,475 on stmt: $356binary_subscr.35 = static_getitem(value=kept_edges, index=0, index_var=$const354.34, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:36,475 on stmt: $358binary_multiply.36 = $const350.32 * $356binary_subscr.35
DEBUG 2022-01-28 15:49:36,475 on stmt: $374call_function.44 = call $348load_global.31($358binary_multiply.36, $372binary_add.43, func=$348load_global.31, args=[Var($358binary_multiply.36, loop_hafnian_batch.py:64), Var($372binary_add.43, loop_hafnian_batch.py:64)], kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:36,475 on stmt: $376get_iter.45 = getiter(value=$374call_function.44)
DEBUG 2022-01-28 15:49:36,475 on stmt: jump 1003
DEBUG 2022-01-28 15:49:36,475 ==== SSA block analysis pass on 1003
DEBUG 2022-01-28 15:49:36,475 Running <numba.core.ssa._GatherDefsHandler object at 0x000002410CBCF3A0>
DEBUG 2022-01-28 15:49:36,475 on stmt: $378for_iter.2 = iternext(value=$376get_iter.45)
DEBUG 2022-01-28 15:49:36,475 on stmt: $N_det.1393 = pair_first(value=$378for_iter.2)
DEBUG 2022-01-28 15:49:36,475 on stmt: $378for_iter.4 = pair_second(value=$378for_iter.2)
DEBUG 2022-01-28 15:49:36,475 on stmt: branch $378for_iter.4, 1005, 1078
DEBUG 2022-01-28 15:49:36,475 ==== SSA block analysis pass on 577
DEBUG 2022-01-28 15:49:36,475 Running <numba.core.ssa._GatherDefsHandler object at 0x000002410CBCF3A0>
DEBUG 2022-01-28 15:49:36,475 on stmt: $260pred = call bool260(glynn, func=bool260, args=(Var(glynn, loop_hafnian_batch.py:24),), kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:36,475 on stmt: branch $260pred, 591, 593
DEBUG 2022-01-28 15:49:36,475 ==== SSA block analysis pass on 591
DEBUG 2022-01-28 15:49:36,475 Running <numba.core.ssa._GatherDefsHandler object at 0x000002410CBCF3A0>
DEBUG 2022-01-28 15:49:36,475 on stmt: ret.1311 = call assert.1310(msg.1309, kept_edges_size0.1307, edge__reps__size0_1299, func=assert.1310, args=[Var(msg.1309, loop_hafnian_batch.py:51), Var(kept_edges_size0.1307, loop_hafnian_batch.py:43), Var(edge__reps__size0_1299, loop_hafnian_batch.py:32)], kws={}, vararg=None, target=None)
DEBUG 2022-01-28 15:49:36,475 on stmt: id=14[LoopNest(index_variable = parfor_index.1352, range = (0, edge__reps__size0_1299, 1))]{1223: <ir.Block at C:\Users\zl4821\PycharmProjects\GBS\gbs\loop_hafnian_batch.py (51)>}Var(parfor_index.1352, loop_hafnian_batch.py:51)
DEBUG 2022-01-28 15:49:36,475 on stmt: delta.2 = delta
DEBUG 2022-01-28 15:49:36,475 on stmt: jump 631
DEBUG 2022-01-28 15:49:36,475 ==== SSA block analysis pass on 1117
DEBUG 2022-01-28 15:49:36,475 Running <numba.core.ssa._GatherDefsHandler object at 0x000002410CBCF3A0>
DEBUG 2022-01-28 15:49:36,475 on stmt: jump 40
DEBUG 2022-01-28 15:49:36,475 defs defaultdict(<class 'list'>,
            {'$12load_global.4.1976': [<numba.core.ir.Assign object at 0x000002410CBDB9A0>],
             '$172binary_multiply.6': [<numba.core.ir.Assign object at 0x000002410E1476D0>],
             '$176binary_add.8': [<numba.core.ir.Assign object at 0x000002410E147970>],
             '$180binary_add.10': [<numba.core.ir.Assign object at 0x000002410E147C70>],
             '$18binary_subscr.7.1978': [<numba.core.ir.Assign object at 0x000002410CBDBDF0>],
             '$192load_global.15': [<numba.core.ir.Assign object at 0x000002410E148580>],
             '$214load_global.23': [<numba.core.ir.Assign object at 0x000002410E14B400>],
             '$222binary_floor_divide.27': [<numba.core.ir.Assign object at 0x000002410E14B9D0>],
             '$224call_function.28': [<numba.core.ir.Assign object at 0x000002410E14BB80>],
             '$226get_iter.29': [<numba.core.ir.Assign object at 0x000002410E14BCA0>],
             '$228for_iter.2': [<numba.core.ir.Assign object at 0x000002410E14B280>],
             '$228for_iter.4': [<numba.core.ir.Assign object at 0x000002410E14BEB0>],
             '$240binary_subscr.7': [<numba.core.ir.Assign object at 0x000002410E14C7F0>],
             '$246binary_subscr.10': [<numba.core.ir.Assign object at 0x000002410E14CBB0>],
             '$248build_tuple.11': [<numba.core.ir.Assign object at 0x000002410E14CD30>],
             '$24binary_subscr.10.1980': [<numba.core.ir.Assign object at 0x000002410CBC3250>],
             '$250binary_subscr.12': [<numba.core.ir.Assign object at 0x000002410E14CEB0>],
             '$260pred': [<numba.core.ir.Assign object at 0x000002410E14E400>],
             '$26load_global.11.1981': [<numba.core.ir.Assign object at 0x000002410CBC33A0>],
             '$282load_global.1': [<numba.core.ir.Assign object at 0x000002410E150160>],
             '$28load_method.12.1982': [<numba.core.ir.Assign object at 0x000002410CBC3520>],
             '$292call_function.6': [<numba.core.ir.Assign object at 0x000002410E1717F0>],
             '$294unpack_sequence.11': [<numba.core.ir.Assign object at 0x000002410E150910>],
             '$2load_global.0.1974': [<numba.core.ir.Assign object at 0x000002410CBDB2E0>],
             '$304load_global.12': [<numba.core.ir.Assign object at 0x000002410E1523A0>],
             '$312load_global.15': [<numba.core.ir.Assign object at 0x000002410E1528E0>],
             '$328load_global.22': [<numba.core.ir.Assign object at 0x000002410E1542E0>],
             '$32call_method.14.1984': [<numba.core.ir.Assign object at 0x000002410CBC38B0>],
             '$348load_global.31': [<numba.core.ir.Assign object at 0x000002410E154EE0>],
             '$34binary_add.15.1985': [<numba.core.ir.Assign object at 0x000002410CBC39D0>],
             '$356binary_subscr.35': [<numba.core.ir.Assign object at 0x000002410F8999A0>],
             '$358binary_multiply.36': [<numba.core.ir.Assign object at 0x000002410E156670>],
             '$364binary_multiply.39': [<numba.core.ir.Assign object at 0x000002410E156A90>],
             '$368binary_add.41': [<numba.core.ir.Assign object at 0x000002410E156D30>],
             '$36call_function.16.1986': [<numba.core.ir.Assign object at 0x000002410CBC3B80>],
             '$372binary_add.43': [<numba.core.ir.Assign object at 0x000002410E159070>],
             '$374call_function.44': [<numba.core.ir.Assign object at 0x000002410E159220>],
             '$376get_iter.45': [<numba.core.ir.Assign object at 0x000002410E159340>],
             '$378for_iter.2': [<numba.core.ir.Assign object at 0x000002410E152CD0>],
             '$378for_iter.4': [<numba.core.ir.Assign object at 0x000002410E1546D0>],
             '$38get_iter.17.1987': [<numba.core.ir.Assign object at 0x000002410CBC3CA0>],
             '$396binary_floor_divide.9': [<numba.core.ir.Assign object at 0x000002410E159DF0>],
             '$400binary_subtract.11': [<numba.core.ir.Assign object at 0x000002410E15B0D0>],
             '$40for_iter.1.1989': [<numba.core.ir.Assign object at 0x000002410CBC3EB0>],
             '$40for_iter.2.1990': [<numba.core.ir.Assign object at 0x000002410CBC3FD0>],
             '$40for_iter.3.1991': [<numba.core.ir.Assign object at 0x000002410CBD3130>],
             '$412binary_floor_divide.16': [<numba.core.ir.Assign object at 0x000002410E15B8B0>],
             '$418binary_subscr.19': [<numba.core.ir.Assign object at 0x000002410F899B20>],
             '$420build_tuple.20': [<numba.core.ir.Assign object at 0x000002410E15BE50>],
             '$422binary_subscr.21': [<numba.core.ir.Assign object at 0x000002410E15BFD0>],
             '$434binary_modulo.26': [<numba.core.ir.Assign object at 0x000002410E15D7F0>],
             '$438compare_op.28': [<numba.core.ir.Assign object at 0x000002410E15DAF0>],
             '$440pred': [<numba.core.ir.Assign object at 0x000002410E15DD60>],
             '$450binary_subscr.6': [<numba.core.ir.Assign object at 0x000002410E15DFD0>],
             '$456binary_multiply.9': [<numba.core.ir.Assign object at 0x000002410E15F3D0>],
             '$464binary_floor_divide.13': [<numba.core.ir.Assign object at 0x000002410E15F910>],
             '$466binary_subscr.14': [<numba.core.ir.Assign object at 0x000002410E15FA90>],
             '$468binary_multiply.15': [<numba.core.ir.Assign object at 0x000002410E15FC10>],
             '$470inplace_add.16': [<numba.core.ir.Assign object at 0x000002410E15FD90>],
             '$484binary_subscr.6': [<numba.core.ir.Assign object at 0x000002410E1612B0>],
             '$490binary_multiply.9': [<numba.core.ir.Assign object at 0x000002410E161670>],
             '$496binary_subscr.12': [<numba.core.ir.Assign object at 0x000002410E161A30>],
             '$498binary_multiply.13': [<numba.core.ir.Assign object at 0x000002410E161BB0>],
             '$4load_method.1.1975': [<numba.core.ir.Assign object at 0x000002410CBDB460>],
             '$500inplace_add.14': [<numba.core.ir.Assign object at 0x000002410E161D30>],
             '$56build_slice.3.1995': [<numba.core.ir.Assign object at 0x000002410CBD3D60>],
             '$56build_slice.4.1996': [<numba.core.ir.Assign object at 0x000002410CBD3E80>],
             '$58binary_subscr.5.1997': [<numba.core.ir.Assign object at 0x000002410CBC7070>],
             '$66build_slice.10.2001': [<numba.core.ir.Assign object at 0x000002410CBC7340>],
             '$66build_slice.9.2000': [<numba.core.ir.Assign object at 0x000002410CBC7220>],
             '$72return_value.12.2003': [<numba.core.ir.Assign object at 0x000002410CBC7700>],
             '$AX_S.1389': [<numba.core.ir.Assign object at 0x000002410E150A60>],
             '$D_S.1390': [<numba.core.ir.Assign object at 0x000002410E150CA0>],
             '$H_batch.2.1740': [<numba.core.ir.Assign object at 0x000002410E1751C0>],
             '$N_det.1393': [<numba.core.ir.Assign object at 0x000002410E1541F0>],
             '$XD_S.1388': [<numba.core.ir.Assign object at 0x000002410E150B80>],
             '$binom_prod.2.1741': [<numba.core.ir.Assign object at 0x000002410E1719D0>],
             '$const16.6.1977': [<numba.core.ir.Assign object at 0x000002410CBDBC40>],
             '$const168.4': [<numba.core.ir.Assign object at 0x000002410E147400>],
             '$const178.9': [<numba.core.ir.Assign object at 0x000002410E147AC0>],
             '$const216.24': [<numba.core.ir.Assign object at 0x000002410E14B580>],
             '$const22.9.1979': [<numba.core.ir.Assign object at 0x000002410CBC30A0>],
             '$const220.26': [<numba.core.ir.Assign object at 0x000002410E14B820>],
             '$const30.13.1983': [<numba.core.ir.Assign object at 0x000002410CBC36A0>],
             '$const350.32': [<numba.core.ir.Assign object at 0x000002410E1560A0>],
             '$const354.34': [<numba.core.ir.Assign object at 0x000002410E156340>],
             '$const360.37': [<numba.core.ir.Assign object at 0x000002410E1567C0>],
             '$const370.42': [<numba.core.ir.Assign object at 0x000002410E156E80>],
             '$const390.6': [<numba.core.ir.Assign object at 0x000002410E1599A0>],
             '$const394.8': [<numba.core.ir.Assign object at 0x000002410E159C40>],
             '$const410.15': [<numba.core.ir.Assign object at 0x000002410E15B700>],
             '$const416.18': [<numba.core.ir.Assign object at 0x000002410E15BB20>],
             '$const432.25': [<numba.core.ir.Assign object at 0x000002410E15D640>],
             '$const436.27': [<numba.core.ir.Assign object at 0x000002410E15D940>],
             '$const462.12': [<numba.core.ir.Assign object at 0x000002410E15F760>],
             '$const52.1.1993': [<numba.core.ir.Assign object at 0x000002410CBD3A60>],
             '$const54.2.1994': [<numba.core.ir.Assign object at 0x000002410CBD3BE0>],
             '$const62.7.1998': [<numba.core.ir.Assign object at 0x000002410CBD4A00>],
             '$const64.8.1999': [<numba.core.ir.Assign object at 0x000002410CBDEF10>],
             '$const70.11.2002': [<numba.core.ir.Assign object at 0x000002410CBC7580>],
             '$empty_attr_attr.1349': [<numba.core.ir.Assign object at 0x000002410E1947C0>],
             '$empty_attr_attr.1354': [<numba.core.ir.Assign object at 0x000002410E194F70>],
             '$i.1394': [<numba.core.ir.Assign object at 0x000002410E14BD90>],
             '$np_g_var.1348': [<numba.core.ir.Assign object at 0x000002410E1946A0>],
             '$np_g_var.1353': [<numba.core.ir.Assign object at 0x000002410E194E50>],
             '$np_typ_var.1350': [<numba.core.ir.Assign object at 0x000002410E1948B0>],
             '$np_typ_var.1355': [<numba.core.ir.Assign object at 0x000002410E2030A0>],
             '$oddVX_S.1387': [<numba.core.ir.Assign object at 0x000002410E150DC0>],
             '$phi40.0.1988': [<numba.core.ir.Assign object at 0x000002410CBDB610>],
             '$phi42.1.1992': [<numba.core.ir.Assign object at 0x000002410CBC3DF0>],
             'A': [<numba.core.ir.Assign object at 0x000002410CBDF610>],
             'D': [<numba.core.ir.Assign object at 0x000002410CBDF4F0>],
             'E': [<numba.core.ir.Assign object at 0x000002410E1526A0>],
             'H__batch_2': [<numba.core.ir.Assign object at 0x000002410CBDB790>,
                            <numba.core.ir.Assign object at 0x000002410E173280>],
             'H__batch_2__arr': [<numba.core.ir.Assign object at 0x000002410CBDB160>],
             'Hnew': [<numba.core.ir.Assign object at 0x000002410E1949A0>],
             'N': [<numba.core.ir.Assign object at 0x000002410E159730>],
             'N__fixed': [<numba.core.ir.Assign object at 0x000002410CBDF3D0>],
             'N__max': [<numba.core.ir.Assign object at 0x000002410CBDF2B0>],
             '_136binary__add_59': [<numba.core.ir.Assign object at 0x000002410CBDF940>],
             'assert.1310': [<numba.core.ir.Assign object at 0x000002410E1F97F0>],
             'assert.1331': [<numba.core.ir.Assign object at 0x000002410E1B1310>],
             'batch__max': [<numba.core.ir.Assign object at 0x000002410CBDF190>],
             'binom_prod': [<numba.core.ir.Assign object at 0x000002410E167280>],
             'binom_prod.2': [<numba.core.ir.Assign object at 0x000002410E17A070>,
                              <numba.core.ir.Assign object at 0x000002410E173BB0>],
             'binoms': [<numba.core.ir.Assign object at 0x000002410CBDF070>],
             'bool260': [<numba.core.ir.Assign object at 0x000002410E14E2E0>],
             'bool440': [<numba.core.ir.Assign object at 0x000002410E15DC40>],
             'delta': [<numba.core.ir.Assign object at 0x000002410E203190>],
             'delta.2': [<numba.core.ir.Assign object at 0x000002410E173160>,
                         <numba.core.ir.Assign object at 0x000002410E173820>],
             'edge__reps': [<numba.core.ir.Assign object at 0x000002410CBD4400>],
             'edge__reps__size0_1299': [<numba.core.ir.Assign object at 0x000002410CBD4340>],
             'f_even': [<numba.core.ir.Assign object at 0x000002410E1540A0>],
             'f_odd': [<numba.core.ir.Assign object at 0x000002410E154CA0>],
             'glynn': [<numba.core.ir.Assign object at 0x000002410CBD4220>],
             'j': [<numba.core.ir.Assign object at 0x000002410F8993A0>],
             'kept_edges': [<numba.core.ir.Assign object at 0x000002410E1489A0>],
             'kept_edges_shape.1306': [<numba.core.ir.Assign object at 0x000002410E1FCA00>],
             'kept_edges_size0.1307': [<numba.core.ir.Assign object at 0x000002410E1FCA90>],
             'msg.1309': [<numba.core.ir.Assign object at 0x000002410E1F93A0>],
             'msg.1330': [<numba.core.ir.Assign object at 0x000002410E1B1790>],
             'n': [<numba.core.ir.Assign object at 0x000002410CBD40D0>],
             'n_det_binom_prod': [<numba.core.ir.Assign object at 0x000002410E171D90>],
             'oddV': [<numba.core.ir.Assign object at 0x000002410CBD4550>],
             'odd__cutoff': [<numba.core.ir.Assign object at 0x000002410CBD4760>],
             'oddloop': [<numba.core.ir.Assign object at 0x000002410CBDB040>],
             'parfor__index_1369': [<numba.core.ir.Assign object at 0x000002410CBD3400>],
             'plus_minus': [<numba.core.ir.Assign object at 0x000002410E15B250>],
             'ret.1311': [<numba.core.ir.Assign object at 0x000002410E1F97C0>],
             'ret.1332': [<numba.core.ir.Assign object at 0x000002410E1B1130>],
             'sched.1973': [<numba.core.ir.Assign object at 0x000002410CBDFA60>]})
DEBUG 2022-01-28 15:49:36,475 SSA violators {'delta.2', 'H__batch_2', 'binom_prod.2'}
DEBUG 2022-01-28 15:49:36,475 Fix SSA violator on var delta.2
DEBUG 2022-01-28 15:49:36,475 ==== SSA block rewrite pass on 0
DEBUG 2022-01-28 15:49:36,475 Running <numba.core.ssa._FreshVarHandler object at 0x000002410CBBCC40>
DEBUG 2022-01-28 15:49:36,475 on stmt: sched.1973 = arg(0, name=sched)
DEBUG 2022-01-28 15:49:36,475 on stmt: _136binary__add_59 = arg(1, name=_136binary__add_59)
DEBUG 2022-01-28 15:49:36,475 on stmt: A = arg(2, name=A)
DEBUG 2022-01-28 15:49:36,475 on stmt: D = arg(3, name=D)
DEBUG 2022-01-28 15:49:36,475 on stmt: N__fixed = arg(4, name=N__fixed)
DEBUG 2022-01-28 15:49:36,475 on stmt: N__max = arg(5, name=N__max)
DEBUG 2022-01-28 15:49:36,475 on stmt: batch__max = arg(6, name=batch__max)
DEBUG 2022-01-28 15:49:36,475 on stmt: binoms = arg(7, name=binoms)
DEBUG 2022-01-28 15:49:36,475 on stmt: edge__reps = arg(8, name=edge__reps)
DEBUG 2022-01-28 15:49:36,475 on stmt: edge__reps__size0_1299 = arg(9, name=edge__reps__size0_1299)
DEBUG 2022-01-28 15:49:36,475 on stmt: glynn = arg(10, name=glynn)
DEBUG 2022-01-28 15:49:36,475 on stmt: n = arg(11, name=n)
DEBUG 2022-01-28 15:49:36,475 on stmt: oddV = arg(12, name=oddV)
DEBUG 2022-01-28 15:49:36,475 on stmt: odd__cutoff = arg(13, name=odd__cutoff)
DEBUG 2022-01-28 15:49:36,475 on stmt: oddloop = arg(14, name=oddloop)
DEBUG 2022-01-28 15:49:36,475 on stmt: H__batch_2__arr = arg(15, name=H__batch_2__arr)
DEBUG 2022-01-28 15:49:36,475 on stmt: $2load_global.0.1974 = global(np: <module 'numpy' from 'C:\\Users\\zl4821\\Anaconda3\\envs\\GBS\\lib\\site-packages\\numpy\\__init__.py'>)
DEBUG 2022-01-28 15:49:36,475 on stmt: $4load_method.1.1975 = getattr(value=$2load_global.0.1974, attr=copy)
DEBUG 2022-01-28 15:49:36,475 on stmt: H__batch_2 = call $4load_method.1.1975(H__batch_2__arr, func=$4load_method.1.1975, args=[Var(H__batch_2__arr, <string>:2)], kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:36,475 on stmt: $12load_global.4.1976 = global(range: <class 'range'>)
DEBUG 2022-01-28 15:49:36,475 on stmt: $const16.6.1977 = const(int, 0)
DEBUG 2022-01-28 15:49:36,475 on stmt: $18binary_subscr.7.1978 = getitem(value=sched.1973, index=$const16.6.1977, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:36,475 on stmt: $const22.9.1979 = const(int, 1)
DEBUG 2022-01-28 15:49:36,475 on stmt: $24binary_subscr.10.1980 = getitem(value=sched.1973, index=$const22.9.1979, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:36,475 on stmt: $26load_global.11.1981 = global(np: <module 'numpy' from 'C:\\Users\\zl4821\\Anaconda3\\envs\\GBS\\lib\\site-packages\\numpy\\__init__.py'>)
DEBUG 2022-01-28 15:49:36,475 on stmt: $28load_method.12.1982 = getattr(value=$26load_global.11.1981, attr=uint8)
DEBUG 2022-01-28 15:49:36,475 on stmt: $const30.13.1983 = const(int, 1)
DEBUG 2022-01-28 15:49:36,475 on stmt: $32call_method.14.1984 = call $28load_method.12.1982($const30.13.1983, func=$28load_method.12.1982, args=[Var($const30.13.1983, <string>:3)], kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:36,475 on stmt: $34binary_add.15.1985 = $24binary_subscr.10.1980 + $32call_method.14.1984
DEBUG 2022-01-28 15:49:36,475 on stmt: $36call_function.16.1986 = call $12load_global.4.1976($18binary_subscr.7.1978, $34binary_add.15.1985, func=$12load_global.4.1976, args=[Var($18binary_subscr.7.1978, <string>:3), Var($34binary_add.15.1985, <string>:3)], kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:36,475 on stmt: $38get_iter.17.1987 = getiter(value=$36call_function.16.1986)
DEBUG 2022-01-28 15:49:36,475 on stmt: $phi40.0.1988 = $38get_iter.17.1987
DEBUG 2022-01-28 15:49:36,475 on stmt: $const168.4 = const(int, 2)
DEBUG 2022-01-28 15:49:36,483 on stmt: $172binary_multiply.6 = $const168.4 * batch__max
DEBUG 2022-01-28 15:49:36,483 on stmt: $176binary_add.8 = $172binary_multiply.6 + odd__cutoff
DEBUG 2022-01-28 15:49:36,483 on stmt: $const178.9 = const(int, 1)
DEBUG 2022-01-28 15:49:36,483 on stmt: $180binary_add.10 = $176binary_add.8 + $const178.9
DEBUG 2022-01-28 15:49:36,483 on stmt: $192load_global.15 = global(find_kept_edges: CPUDispatcher(<function find_kept_edges at 0x0000024107424550>))
DEBUG 2022-01-28 15:49:36,483 on stmt: $np_g_var.1348 = global(np: <module 'numpy' from 'C:\\Users\\zl4821\\Anaconda3\\envs\\GBS\\lib\\site-packages\\numpy\\__init__.py'>)
DEBUG 2022-01-28 15:49:36,483 on stmt: $empty_attr_attr.1349 = getattr(value=$np_g_var.1348, attr=empty)
DEBUG 2022-01-28 15:49:36,483 on stmt: $np_typ_var.1350 = getattr(value=$np_g_var.1348, attr=complex128)
DEBUG 2022-01-28 15:49:36,483 on stmt: Hnew = call $empty_attr_attr.1349($180binary_add.10, $np_typ_var.1350, func=$empty_attr_attr.1349, args=[Var($180binary_add.10, loop_hafnian_batch.py:41), Var($np_typ_var.1350, loop_hafnian_batch.py:41)], kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:36,483 on stmt: binom_prod = const(float, 1.0)
DEBUG 2022-01-28 15:49:36,483 on stmt: $214load_global.23 = global(range: <class 'range'>)
DEBUG 2022-01-28 15:49:36,483 on stmt: $const216.24 = const(int, 1)
DEBUG 2022-01-28 15:49:36,483 on stmt: $const220.26 = const(int, 2)
DEBUG 2022-01-28 15:49:36,483 on stmt: $222binary_floor_divide.27 = n // $const220.26
DEBUG 2022-01-28 15:49:36,483 on stmt: msg.1330 = const(str, Sizes of H_batch.2, Hnew do not match on C:\Users\zl4821\PycharmProjects\GBS\gbs\loop_hafnian_batch.py (75))
DEBUG 2022-01-28 15:49:36,483 on stmt: assert.1331 = global(assert_equiv: <intrinsic assert_equiv>)
DEBUG 2022-01-28 15:49:36,483 on stmt: $const390.6 = const(float, -1.0)
DEBUG 2022-01-28 15:49:36,483 on stmt: $const394.8 = const(int, 2)
DEBUG 2022-01-28 15:49:36,483 on stmt: $const410.15 = const(int, 2)
DEBUG 2022-01-28 15:49:36,483 on stmt: $const416.18 = const(int, 0)
DEBUG 2022-01-28 15:49:36,483 on stmt: $const432.25 = const(int, 2)
DEBUG 2022-01-28 15:49:36,483 on stmt: $const436.27 = const(int, 0)
DEBUG 2022-01-28 15:49:36,483 on stmt: bool440 = global(bool: <class 'bool'>)
DEBUG 2022-01-28 15:49:36,483 on stmt: $const462.12 = const(int, 2)
DEBUG 2022-01-28 15:49:36,483 on stmt: $282load_global.1 = global(get_submatrices: CPUDispatcher(<function get_submatrices at 0x0000024107424E50>))
DEBUG 2022-01-28 15:49:36,483 on stmt: $304load_global.12 = global(eigvals: CPUDispatcher(<function eigvals at 0x00000241074303A0>))
DEBUG 2022-01-28 15:49:36,483 on stmt: $312load_global.15 = global(f_loop: CPUDispatcher(<function f_loop at 0x00000241074248B0>))
DEBUG 2022-01-28 15:49:36,483 on stmt: $328load_global.22 = global(f_loop_odd: CPUDispatcher(<function f_loop_odd at 0x0000024107424AF0>))
DEBUG 2022-01-28 15:49:36,483 on stmt: $348load_global.31 = global(range: <class 'range'>)
DEBUG 2022-01-28 15:49:36,483 on stmt: $const350.32 = const(int, 2)
DEBUG 2022-01-28 15:49:36,483 on stmt: $const354.34 = const(int, 0)
DEBUG 2022-01-28 15:49:36,483 on stmt: $const360.37 = const(int, 2)
DEBUG 2022-01-28 15:49:36,483 on stmt: $364binary_multiply.39 = $const360.37 * batch__max
DEBUG 2022-01-28 15:49:36,483 on stmt: $368binary_add.41 = $364binary_multiply.39 + odd__cutoff
DEBUG 2022-01-28 15:49:36,483 on stmt: $const370.42 = const(int, 1)
DEBUG 2022-01-28 15:49:36,483 on stmt: $372binary_add.43 = $368binary_add.41 + $const370.42
DEBUG 2022-01-28 15:49:36,483 on stmt: bool260 = global(bool: <class 'bool'>)
DEBUG 2022-01-28 15:49:36,483 on stmt: msg.1309 = const(str, Sizes of kept_edges, edge_reps do not match on C:\Users\zl4821\PycharmProjects\GBS\gbs\loop_hafnian_batch.py (51))
DEBUG 2022-01-28 15:49:36,483 on stmt: assert.1310 = global(assert_equiv: <intrinsic assert_equiv>)
DEBUG 2022-01-28 15:49:36,483 on stmt: $np_g_var.1353 = global(np: <module 'numpy' from 'C:\\Users\\zl4821\\Anaconda3\\envs\\GBS\\lib\\site-packages\\numpy\\__init__.py'>)
DEBUG 2022-01-28 15:49:36,483 on stmt: $empty_attr_attr.1354 = getattr(value=$np_g_var.1353, attr=empty)
DEBUG 2022-01-28 15:49:36,483 on stmt: $np_typ_var.1355 = getattr(value=$np_g_var.1353, attr=int64)
DEBUG 2022-01-28 15:49:36,483 on stmt: delta = call $empty_attr_attr.1354(edge__reps__size0_1299, $np_typ_var.1355, func=$empty_attr_attr.1354, args=[Var(edge__reps__size0_1299, loop_hafnian_batch.py:32), Var($np_typ_var.1355, loop_hafnian_batch.py:51)], kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:36,483 on stmt: jump 40
DEBUG 2022-01-28 15:49:36,483 ==== SSA block rewrite pass on 40
DEBUG 2022-01-28 15:49:36,483 Running <numba.core.ssa._FreshVarHandler object at 0x000002410CBBCC40>
DEBUG 2022-01-28 15:49:36,483 on stmt: $40for_iter.1.1989 = iternext(value=$phi40.0.1988)
DEBUG 2022-01-28 15:49:36,483 on stmt: $40for_iter.2.1990 = pair_first(value=$40for_iter.1.1989)
DEBUG 2022-01-28 15:49:36,483 on stmt: $40for_iter.3.1991 = pair_second(value=$40for_iter.1.1989)
DEBUG 2022-01-28 15:49:36,483 on stmt: $phi42.1.1992 = $40for_iter.2.1990
DEBUG 2022-01-28 15:49:36,483 on stmt: branch $40for_iter.3.1991, 42, 1224
DEBUG 2022-01-28 15:49:36,483 ==== SSA block rewrite pass on 42
DEBUG 2022-01-28 15:49:36,483 Running <numba.core.ssa._FreshVarHandler object at 0x000002410CBBCC40>
DEBUG 2022-01-28 15:49:36,483 on stmt: parfor__index_1369 = $phi42.1.1992
DEBUG 2022-01-28 15:49:36,483 on stmt: jump 50
DEBUG 2022-01-28 15:49:36,483 ==== SSA block rewrite pass on 1224
DEBUG 2022-01-28 15:49:36,483 Running <numba.core.ssa._FreshVarHandler object at 0x000002410CBBCC40>
DEBUG 2022-01-28 15:49:36,483 on stmt: $const52.1.1993 = const(NoneType, None)
DEBUG 2022-01-28 15:49:36,483 on stmt: $const54.2.1994 = const(NoneType, None)
DEBUG 2022-01-28 15:49:36,483 on stmt: $56build_slice.3.1995 = global(slice: <class 'slice'>)
DEBUG 2022-01-28 15:49:36,483 on stmt: $56build_slice.4.1996 = call $56build_slice.3.1995($const52.1.1993, $const54.2.1994, func=$56build_slice.3.1995, args=(Var($const52.1.1993, <string>:5), Var($const54.2.1994, <string>:5)), kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:36,483 on stmt: $58binary_subscr.5.1997 = getitem(value=H__batch_2, index=$56build_slice.4.1996, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:36,483 on stmt: $const62.7.1998 = const(NoneType, None)
DEBUG 2022-01-28 15:49:36,483 on stmt: $const64.8.1999 = const(NoneType, None)
DEBUG 2022-01-28 15:49:36,483 on stmt: $66build_slice.9.2000 = global(slice: <class 'slice'>)
DEBUG 2022-01-28 15:49:36,483 on stmt: $66build_slice.10.2001 = call $66build_slice.9.2000($const62.7.1998, $const64.8.1999, func=$66build_slice.9.2000, args=(Var($const62.7.1998, <string>:5), Var($const64.8.1999, <string>:5)), kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:36,483 on stmt: H__batch_2__arr[$66build_slice.10.2001] = $58binary_subscr.5.1997
DEBUG 2022-01-28 15:49:36,483 on stmt: $const70.11.2002 = const(NoneType, None)
DEBUG 2022-01-28 15:49:36,483 on stmt: $72return_value.12.2003 = cast(value=$const70.11.2002)
DEBUG 2022-01-28 15:49:36,483 on stmt: return $72return_value.12.2003
DEBUG 2022-01-28 15:49:36,483 ==== SSA block rewrite pass on 1062
DEBUG 2022-01-28 15:49:36,483 Running <numba.core.ssa._FreshVarHandler object at 0x000002410CBBCC40>
DEBUG 2022-01-28 15:49:36,483 on stmt: jump 1003
DEBUG 2022-01-28 15:49:36,483 ==== SSA block rewrite pass on 50
DEBUG 2022-01-28 15:49:36,483 Running <numba.core.ssa._FreshVarHandler object at 0x000002410CBBCC40>
DEBUG 2022-01-28 15:49:36,483 on stmt: j = parfor__index_1369
DEBUG 2022-01-28 15:49:36,483 on stmt: id=13[LoopNest(index_variable = parfor_index.1347, range = (0, $180binary_add.10, 1))]{1222: <ir.Block at C:\Users\zl4821\PycharmProjects\GBS\gbs\loop_hafnian_batch.py (41)>}Var(parfor_index.1347, loop_hafnian_batch.py:41)
DEBUG 2022-01-28 15:49:36,483 on stmt: kept_edges = call $192load_global.15(j, edge__reps, func=$192load_global.15, args=[Var(j, loop_hafnian_batch.py:39), Var(edge__reps, loop_hafnian_batch.py:32)], kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:36,483 on stmt: kept_edges_shape.1306 = getattr(value=kept_edges, attr=shape)
DEBUG 2022-01-28 15:49:36,483 on stmt: kept_edges_size0.1307 = static_getitem(value=kept_edges_shape.1306, index=0, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:36,483 on stmt: binom_prod.2 = binom_prod
DEBUG 2022-01-28 15:49:36,483 on stmt: id=17[LoopNest(index_variable = parfor_index.1365, range = (0, kept_edges_size0.1307, 1))]{557: <ir.Block at C:\Users\zl4821\Anaconda3\envs\GBS\lib\site-packages\numba\parfors\parfor.py (256)>}Var(parfor_index.1365, parfor.py:256)
DEBUG 2022-01-28 15:49:36,483 on stmt: $224call_function.28 = call $214load_global.23($const216.24, $222binary_floor_divide.27, func=$214load_global.23, args=[Var($const216.24, loop_hafnian_batch.py:47), Var($222binary_floor_divide.27, loop_hafnian_batch.py:47)], kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:36,483 on stmt: $226get_iter.29 = getiter(value=$224call_function.28)
DEBUG 2022-01-28 15:49:36,483 on stmt: jump 495
DEBUG 2022-01-28 15:49:36,483 ==== SSA block rewrite pass on 593
DEBUG 2022-01-28 15:49:36,483 Running <numba.core.ssa._FreshVarHandler object at 0x000002410CBBCC40>
DEBUG 2022-01-28 15:49:36,483 on stmt: delta.2 = kept_edges
DEBUG 2022-01-28 15:49:36,483 first assign: delta.2
DEBUG 2022-01-28 15:49:36,483 replaced with: delta.2 = kept_edges
DEBUG 2022-01-28 15:49:36,483 on stmt: jump 631
DEBUG 2022-01-28 15:49:36,483 ==== SSA block rewrite pass on 495
DEBUG 2022-01-28 15:49:36,483 Running <numba.core.ssa._FreshVarHandler object at 0x000002410CBBCC40>
DEBUG 2022-01-28 15:49:36,483 on stmt: $228for_iter.2 = iternext(value=$226get_iter.29)
DEBUG 2022-01-28 15:49:36,483 on stmt: $i.1394 = pair_first(value=$228for_iter.2)
DEBUG 2022-01-28 15:49:36,483 on stmt: $228for_iter.4 = pair_second(value=$228for_iter.2)
DEBUG 2022-01-28 15:49:36,483 on stmt: branch $228for_iter.4, 571, 577
DEBUG 2022-01-28 15:49:36,483 ==== SSA block rewrite pass on 1078
DEBUG 2022-01-28 15:49:36,483 Running <numba.core.ssa._FreshVarHandler object at 0x000002410CBBCC40>
DEBUG 2022-01-28 15:49:36,483 on stmt: ret.1332 = call assert.1331(msg.1330, _136binary__add_59, $180binary_add.10, func=assert.1331, args=[Var(msg.1330, loop_hafnian_batch.py:75), Var(_136binary__add_59, loop_hafnian_batch.py:38), Var($180binary_add.10, loop_hafnian_batch.py:41)], kws={}, vararg=None, target=None)
DEBUG 2022-01-28 15:49:36,483 on stmt: $H_batch.2.1740 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=H__batch_2, rhs=Hnew, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-01-28 15:49:36,483 on stmt: H__batch_2 = $H_batch.2.1740
DEBUG 2022-01-28 15:49:36,483 on stmt: jump 1117
DEBUG 2022-01-28 15:49:36,483 ==== SSA block rewrite pass on 1005
DEBUG 2022-01-28 15:49:36,483 Running <numba.core.ssa._FreshVarHandler object at 0x000002410CBBCC40>
DEBUG 2022-01-28 15:49:36,483 on stmt: N = N__fixed + $N_det.1393
DEBUG 2022-01-28 15:49:36,483 on stmt: $396binary_floor_divide.9 = N // $const394.8
DEBUG 2022-01-28 15:49:36,483 on stmt: $400binary_subtract.11 = $396binary_floor_divide.9 - val.1149
DEBUG 2022-01-28 15:49:36,483 on stmt: plus_minus = $const390.6 ** $400binary_subtract.11
DEBUG 2022-01-28 15:49:36,483 on stmt: $412binary_floor_divide.16 = $N_det.1393 // $const410.15
DEBUG 2022-01-28 15:49:36,483 on stmt: $418binary_subscr.19 = static_getitem(value=kept_edges, index=0, index_var=$const416.18, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:36,493 on stmt: $420build_tuple.20 = build_tuple(items=[Var($412binary_floor_divide.16, loop_hafnian_batch.py:68), Var($418binary_subscr.19, loop_hafnian_batch.py:68)])
DEBUG 2022-01-28 15:49:36,493 on stmt: $422binary_subscr.21 = getitem(value=binoms, index=$420build_tuple.20, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:36,493 on stmt: n_det_binom_prod = $422binary_subscr.21 * binom_prod.2
DEBUG 2022-01-28 15:49:36,493 on stmt: $434binary_modulo.26 = $N_det.1393 % $const432.25
DEBUG 2022-01-28 15:49:36,493 on stmt: $438compare_op.28 = $434binary_modulo.26 == $const436.27
DEBUG 2022-01-28 15:49:36,493 on stmt: $440pred = call bool440($438compare_op.28, func=bool440, args=(Var($438compare_op.28, loop_hafnian_batch.py:70),), kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:36,493 on stmt: branch $440pred, 1021, 1060
DEBUG 2022-01-28 15:49:36,493 ==== SSA block rewrite pass on 571
DEBUG 2022-01-28 15:49:36,493 Running <numba.core.ssa._FreshVarHandler object at 0x000002410CBBCC40>
DEBUG 2022-01-28 15:49:36,493 on stmt: $240binary_subscr.7 = getitem(value=edge__reps, index=$i.1394, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:36,493 on stmt: $246binary_subscr.10 = getitem(value=kept_edges, index=$i.1394, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:36,493 on stmt: $248build_tuple.11 = build_tuple(items=[Var($240binary_subscr.7, loop_hafnian_batch.py:48), Var($246binary_subscr.10, loop_hafnian_batch.py:48)])
DEBUG 2022-01-28 15:49:36,493 on stmt: $250binary_subscr.12 = getitem(value=binoms, index=$248build_tuple.11, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:36,493 on stmt: $binom_prod.2.1741 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=binom_prod.2, rhs=$250binary_subscr.12, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-01-28 15:49:36,493 on stmt: binom_prod.2 = $binom_prod.2.1741
DEBUG 2022-01-28 15:49:36,493 on stmt: jump 495
DEBUG 2022-01-28 15:49:36,493 ==== SSA block rewrite pass on 1021
DEBUG 2022-01-28 15:49:36,493 Running <numba.core.ssa._FreshVarHandler object at 0x000002410CBBCC40>
DEBUG 2022-01-28 15:49:36,493 on stmt: $450binary_subscr.6 = getitem(value=Hnew, index=$N_det.1393, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:36,495 on stmt: $456binary_multiply.9 = n_det_binom_prod * plus_minus
DEBUG 2022-01-28 15:49:36,495 on stmt: $464binary_floor_divide.13 = N // $const462.12
DEBUG 2022-01-28 15:49:36,495 on stmt: $466binary_subscr.14 = getitem(value=f_even, index=$464binary_floor_divide.13, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:36,495 on stmt: $468binary_multiply.15 = $456binary_multiply.9 * $466binary_subscr.14
DEBUG 2022-01-28 15:49:36,495 on stmt: $470inplace_add.16 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$450binary_subscr.6, rhs=$468binary_multiply.15, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-01-28 15:49:36,495 on stmt: Hnew[$N_det.1393] = $470inplace_add.16
DEBUG 2022-01-28 15:49:36,495 on stmt: jump 1062
DEBUG 2022-01-28 15:49:36,495 ==== SSA block rewrite pass on 1060
DEBUG 2022-01-28 15:49:36,495 Running <numba.core.ssa._FreshVarHandler object at 0x000002410CBBCC40>
DEBUG 2022-01-28 15:49:36,495 on stmt: $484binary_subscr.6 = getitem(value=Hnew, index=$N_det.1393, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:36,495 on stmt: $490binary_multiply.9 = n_det_binom_prod * plus_minus
DEBUG 2022-01-28 15:49:36,495 on stmt: $496binary_subscr.12 = getitem(value=f_odd, index=N, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:36,495 on stmt: $498binary_multiply.13 = $490binary_multiply.9 * $496binary_subscr.12
DEBUG 2022-01-28 15:49:36,495 on stmt: $500inplace_add.14 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$484binary_subscr.6, rhs=$498binary_multiply.13, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-01-28 15:49:36,495 on stmt: Hnew[$N_det.1393] = $500inplace_add.14
DEBUG 2022-01-28 15:49:36,495 on stmt: jump 1062
DEBUG 2022-01-28 15:49:36,495 ==== SSA block rewrite pass on 631
DEBUG 2022-01-28 15:49:36,495 Running <numba.core.ssa._FreshVarHandler object at 0x000002410CBBCC40>
DEBUG 2022-01-28 15:49:36,495 on stmt: $292call_function.6 = call $282load_global.1(delta.2, A, D, oddV, func=$282load_global.1, args=[Var(delta.2, loop_hafnian_batch.py:55), Var(A, loop_hafnian_batch.py:24), Var(D, loop_hafnian_batch.py:24), Var(oddV, loop_hafnian_batch.py:25)], kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:36,495 on stmt: $294unpack_sequence.11 = exhaust_iter(value=$292call_function.6, count=4)
DEBUG 2022-01-28 15:49:36,495 on stmt: $AX_S.1389 = static_getitem(value=$294unpack_sequence.11, index=0, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:36,495 on stmt: $XD_S.1388 = static_getitem(value=$294unpack_sequence.11, index=1, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:36,495 on stmt: $D_S.1390 = static_getitem(value=$294unpack_sequence.11, index=2, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:36,495 on stmt: $oddVX_S.1387 = static_getitem(value=$294unpack_sequence.11, index=3, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:36,495 on stmt: E = call $304load_global.12($AX_S.1389, func=$304load_global.12, args=[Var($AX_S.1389, loop_hafnian_batch.py:55)], kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:36,495 on stmt: f_even = call $312load_global.15(E, $AX_S.1389, $XD_S.1388, $D_S.1390, N__max, func=$312load_global.15, args=[Var(E, loop_hafnian_batch.py:57), Var($AX_S.1389, loop_hafnian_batch.py:55), Var($XD_S.1388, loop_hafnian_batch.py:55), Var($D_S.1390, loop_hafnian_batch.py:55), Var(N__max, loop_hafnian_batch.py:30)], kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:36,495 on stmt: f_odd = call $328load_global.22(E, $AX_S.1389, $XD_S.1388, $D_S.1390, N__max, oddloop, $oddVX_S.1387, func=$328load_global.22, args=[Var(E, loop_hafnian_batch.py:57), Var($AX_S.1389, loop_hafnian_batch.py:55), Var($XD_S.1388, loop_hafnian_batch.py:55), Var($D_S.1390, loop_hafnian_batch.py:55), Var(N__max, loop_hafnian_batch.py:30), Var(oddloop, loop_hafnian_batch.py:24), Var($oddVX_S.1387, loop_hafnian_batch.py:55)], kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:36,495 on stmt: $356binary_subscr.35 = static_getitem(value=kept_edges, index=0, index_var=$const354.34, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:36,495 on stmt: $358binary_multiply.36 = $const350.32 * $356binary_subscr.35
DEBUG 2022-01-28 15:49:36,495 on stmt: $374call_function.44 = call $348load_global.31($358binary_multiply.36, $372binary_add.43, func=$348load_global.31, args=[Var($358binary_multiply.36, loop_hafnian_batch.py:64), Var($372binary_add.43, loop_hafnian_batch.py:64)], kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:36,495 on stmt: $376get_iter.45 = getiter(value=$374call_function.44)
DEBUG 2022-01-28 15:49:36,495 on stmt: jump 1003
DEBUG 2022-01-28 15:49:36,495 ==== SSA block rewrite pass on 1003
DEBUG 2022-01-28 15:49:36,495 Running <numba.core.ssa._FreshVarHandler object at 0x000002410CBBCC40>
DEBUG 2022-01-28 15:49:36,495 on stmt: $378for_iter.2 = iternext(value=$376get_iter.45)
DEBUG 2022-01-28 15:49:36,495 on stmt: $N_det.1393 = pair_first(value=$378for_iter.2)
DEBUG 2022-01-28 15:49:36,495 on stmt: $378for_iter.4 = pair_second(value=$378for_iter.2)
DEBUG 2022-01-28 15:49:36,495 on stmt: branch $378for_iter.4, 1005, 1078
DEBUG 2022-01-28 15:49:36,495 ==== SSA block rewrite pass on 577
DEBUG 2022-01-28 15:49:36,495 Running <numba.core.ssa._FreshVarHandler object at 0x000002410CBBCC40>
DEBUG 2022-01-28 15:49:36,495 on stmt: $260pred = call bool260(glynn, func=bool260, args=(Var(glynn, loop_hafnian_batch.py:24),), kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:36,495 on stmt: branch $260pred, 591, 593
DEBUG 2022-01-28 15:49:36,495 ==== SSA block rewrite pass on 591
DEBUG 2022-01-28 15:49:36,495 Running <numba.core.ssa._FreshVarHandler object at 0x000002410CBBCC40>
DEBUG 2022-01-28 15:49:36,495 on stmt: ret.1311 = call assert.1310(msg.1309, kept_edges_size0.1307, edge__reps__size0_1299, func=assert.1310, args=[Var(msg.1309, loop_hafnian_batch.py:51), Var(kept_edges_size0.1307, loop_hafnian_batch.py:43), Var(edge__reps__size0_1299, loop_hafnian_batch.py:32)], kws={}, vararg=None, target=None)
DEBUG 2022-01-28 15:49:36,495 on stmt: id=14[LoopNest(index_variable = parfor_index.1352, range = (0, edge__reps__size0_1299, 1))]{1223: <ir.Block at C:\Users\zl4821\PycharmProjects\GBS\gbs\loop_hafnian_batch.py (51)>}Var(parfor_index.1352, loop_hafnian_batch.py:51)
DEBUG 2022-01-28 15:49:36,495 on stmt: delta.2 = delta
DEBUG 2022-01-28 15:49:36,495 replaced with: delta.2.1 = delta
DEBUG 2022-01-28 15:49:36,495 on stmt: jump 631
DEBUG 2022-01-28 15:49:36,495 ==== SSA block rewrite pass on 1117
DEBUG 2022-01-28 15:49:36,495 Running <numba.core.ssa._FreshVarHandler object at 0x000002410CBBCC40>
DEBUG 2022-01-28 15:49:36,495 on stmt: jump 40
DEBUG 2022-01-28 15:49:36,495 Replaced assignments: defaultdict(<class 'list'>,
            {591: [<numba.core.ir.Assign object at 0x000002410D028070>],
             593: [<numba.core.ir.Assign object at 0x000002410CBBC5E0>]})
DEBUG 2022-01-28 15:49:36,495 ==== SSA block rewrite pass on 0
DEBUG 2022-01-28 15:49:36,495 Running <numba.core.ssa._FixSSAVars object at 0x000002410CBBCC40>
DEBUG 2022-01-28 15:49:36,495 on stmt: sched.1973 = arg(0, name=sched)
DEBUG 2022-01-28 15:49:36,495 on stmt: _136binary__add_59 = arg(1, name=_136binary__add_59)
DEBUG 2022-01-28 15:49:36,495 on stmt: A = arg(2, name=A)
DEBUG 2022-01-28 15:49:36,495 on stmt: D = arg(3, name=D)
DEBUG 2022-01-28 15:49:36,495 on stmt: N__fixed = arg(4, name=N__fixed)
DEBUG 2022-01-28 15:49:36,495 on stmt: N__max = arg(5, name=N__max)
DEBUG 2022-01-28 15:49:36,495 on stmt: batch__max = arg(6, name=batch__max)
DEBUG 2022-01-28 15:49:36,495 on stmt: binoms = arg(7, name=binoms)
DEBUG 2022-01-28 15:49:36,495 on stmt: edge__reps = arg(8, name=edge__reps)
DEBUG 2022-01-28 15:49:36,495 on stmt: edge__reps__size0_1299 = arg(9, name=edge__reps__size0_1299)
DEBUG 2022-01-28 15:49:36,495 on stmt: glynn = arg(10, name=glynn)
DEBUG 2022-01-28 15:49:36,495 on stmt: n = arg(11, name=n)
DEBUG 2022-01-28 15:49:36,495 on stmt: oddV = arg(12, name=oddV)
DEBUG 2022-01-28 15:49:36,495 on stmt: odd__cutoff = arg(13, name=odd__cutoff)
DEBUG 2022-01-28 15:49:36,495 on stmt: oddloop = arg(14, name=oddloop)
DEBUG 2022-01-28 15:49:36,495 on stmt: H__batch_2__arr = arg(15, name=H__batch_2__arr)
DEBUG 2022-01-28 15:49:36,495 on stmt: $2load_global.0.1974 = global(np: <module 'numpy' from 'C:\\Users\\zl4821\\Anaconda3\\envs\\GBS\\lib\\site-packages\\numpy\\__init__.py'>)
DEBUG 2022-01-28 15:49:36,495 on stmt: $4load_method.1.1975 = getattr(value=$2load_global.0.1974, attr=copy)
DEBUG 2022-01-28 15:49:36,495 on stmt: H__batch_2 = call $4load_method.1.1975(H__batch_2__arr, func=$4load_method.1.1975, args=[Var(H__batch_2__arr, <string>:2)], kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:36,495 on stmt: $12load_global.4.1976 = global(range: <class 'range'>)
DEBUG 2022-01-28 15:49:36,495 on stmt: $const16.6.1977 = const(int, 0)
DEBUG 2022-01-28 15:49:36,495 on stmt: $18binary_subscr.7.1978 = getitem(value=sched.1973, index=$const16.6.1977, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:36,495 on stmt: $const22.9.1979 = const(int, 1)
DEBUG 2022-01-28 15:49:36,495 on stmt: $24binary_subscr.10.1980 = getitem(value=sched.1973, index=$const22.9.1979, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:36,495 on stmt: $26load_global.11.1981 = global(np: <module 'numpy' from 'C:\\Users\\zl4821\\Anaconda3\\envs\\GBS\\lib\\site-packages\\numpy\\__init__.py'>)
DEBUG 2022-01-28 15:49:36,495 on stmt: $28load_method.12.1982 = getattr(value=$26load_global.11.1981, attr=uint8)
DEBUG 2022-01-28 15:49:36,495 on stmt: $const30.13.1983 = const(int, 1)
DEBUG 2022-01-28 15:49:36,495 on stmt: $32call_method.14.1984 = call $28load_method.12.1982($const30.13.1983, func=$28load_method.12.1982, args=[Var($const30.13.1983, <string>:3)], kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:36,495 on stmt: $34binary_add.15.1985 = $24binary_subscr.10.1980 + $32call_method.14.1984
DEBUG 2022-01-28 15:49:36,495 on stmt: $36call_function.16.1986 = call $12load_global.4.1976($18binary_subscr.7.1978, $34binary_add.15.1985, func=$12load_global.4.1976, args=[Var($18binary_subscr.7.1978, <string>:3), Var($34binary_add.15.1985, <string>:3)], kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:36,503 on stmt: $38get_iter.17.1987 = getiter(value=$36call_function.16.1986)
DEBUG 2022-01-28 15:49:36,503 on stmt: $phi40.0.1988 = $38get_iter.17.1987
DEBUG 2022-01-28 15:49:36,503 on stmt: $const168.4 = const(int, 2)
DEBUG 2022-01-28 15:49:36,503 on stmt: $172binary_multiply.6 = $const168.4 * batch__max
DEBUG 2022-01-28 15:49:36,503 on stmt: $176binary_add.8 = $172binary_multiply.6 + odd__cutoff
DEBUG 2022-01-28 15:49:36,503 on stmt: $const178.9 = const(int, 1)
DEBUG 2022-01-28 15:49:36,503 on stmt: $180binary_add.10 = $176binary_add.8 + $const178.9
DEBUG 2022-01-28 15:49:36,503 on stmt: $192load_global.15 = global(find_kept_edges: CPUDispatcher(<function find_kept_edges at 0x0000024107424550>))
DEBUG 2022-01-28 15:49:36,503 on stmt: $np_g_var.1348 = global(np: <module 'numpy' from 'C:\\Users\\zl4821\\Anaconda3\\envs\\GBS\\lib\\site-packages\\numpy\\__init__.py'>)
DEBUG 2022-01-28 15:49:36,503 on stmt: $empty_attr_attr.1349 = getattr(value=$np_g_var.1348, attr=empty)
DEBUG 2022-01-28 15:49:36,503 on stmt: $np_typ_var.1350 = getattr(value=$np_g_var.1348, attr=complex128)
DEBUG 2022-01-28 15:49:36,503 on stmt: Hnew = call $empty_attr_attr.1349($180binary_add.10, $np_typ_var.1350, func=$empty_attr_attr.1349, args=[Var($180binary_add.10, loop_hafnian_batch.py:41), Var($np_typ_var.1350, loop_hafnian_batch.py:41)], kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:36,503 on stmt: binom_prod = const(float, 1.0)
DEBUG 2022-01-28 15:49:36,503 on stmt: $214load_global.23 = global(range: <class 'range'>)
DEBUG 2022-01-28 15:49:36,503 on stmt: $const216.24 = const(int, 1)
DEBUG 2022-01-28 15:49:36,503 on stmt: $const220.26 = const(int, 2)
DEBUG 2022-01-28 15:49:36,503 on stmt: $222binary_floor_divide.27 = n // $const220.26
DEBUG 2022-01-28 15:49:36,503 on stmt: msg.1330 = const(str, Sizes of H_batch.2, Hnew do not match on C:\Users\zl4821\PycharmProjects\GBS\gbs\loop_hafnian_batch.py (75))
DEBUG 2022-01-28 15:49:36,503 on stmt: assert.1331 = global(assert_equiv: <intrinsic assert_equiv>)
DEBUG 2022-01-28 15:49:36,503 on stmt: $const390.6 = const(float, -1.0)
DEBUG 2022-01-28 15:49:36,503 on stmt: $const394.8 = const(int, 2)
DEBUG 2022-01-28 15:49:36,505 on stmt: $const410.15 = const(int, 2)
DEBUG 2022-01-28 15:49:36,505 on stmt: $const416.18 = const(int, 0)
DEBUG 2022-01-28 15:49:36,505 on stmt: $const432.25 = const(int, 2)
DEBUG 2022-01-28 15:49:36,505 on stmt: $const436.27 = const(int, 0)
DEBUG 2022-01-28 15:49:36,505 on stmt: bool440 = global(bool: <class 'bool'>)
DEBUG 2022-01-28 15:49:36,505 on stmt: $const462.12 = const(int, 2)
DEBUG 2022-01-28 15:49:36,505 on stmt: $282load_global.1 = global(get_submatrices: CPUDispatcher(<function get_submatrices at 0x0000024107424E50>))
DEBUG 2022-01-28 15:49:36,505 on stmt: $304load_global.12 = global(eigvals: CPUDispatcher(<function eigvals at 0x00000241074303A0>))
DEBUG 2022-01-28 15:49:36,505 on stmt: $312load_global.15 = global(f_loop: CPUDispatcher(<function f_loop at 0x00000241074248B0>))
DEBUG 2022-01-28 15:49:36,505 on stmt: $328load_global.22 = global(f_loop_odd: CPUDispatcher(<function f_loop_odd at 0x0000024107424AF0>))
DEBUG 2022-01-28 15:49:36,505 on stmt: $348load_global.31 = global(range: <class 'range'>)
DEBUG 2022-01-28 15:49:36,505 on stmt: $const350.32 = const(int, 2)
DEBUG 2022-01-28 15:49:36,505 on stmt: $const354.34 = const(int, 0)
DEBUG 2022-01-28 15:49:36,505 on stmt: $const360.37 = const(int, 2)
DEBUG 2022-01-28 15:49:36,505 on stmt: $364binary_multiply.39 = $const360.37 * batch__max
DEBUG 2022-01-28 15:49:36,505 on stmt: $368binary_add.41 = $364binary_multiply.39 + odd__cutoff
DEBUG 2022-01-28 15:49:36,505 on stmt: $const370.42 = const(int, 1)
DEBUG 2022-01-28 15:49:36,505 on stmt: $372binary_add.43 = $368binary_add.41 + $const370.42
DEBUG 2022-01-28 15:49:36,505 on stmt: bool260 = global(bool: <class 'bool'>)
DEBUG 2022-01-28 15:49:36,505 on stmt: msg.1309 = const(str, Sizes of kept_edges, edge_reps do not match on C:\Users\zl4821\PycharmProjects\GBS\gbs\loop_hafnian_batch.py (51))
DEBUG 2022-01-28 15:49:36,505 on stmt: assert.1310 = global(assert_equiv: <intrinsic assert_equiv>)
DEBUG 2022-01-28 15:49:36,505 on stmt: $np_g_var.1353 = global(np: <module 'numpy' from 'C:\\Users\\zl4821\\Anaconda3\\envs\\GBS\\lib\\site-packages\\numpy\\__init__.py'>)
DEBUG 2022-01-28 15:49:36,505 on stmt: $empty_attr_attr.1354 = getattr(value=$np_g_var.1353, attr=empty)
DEBUG 2022-01-28 15:49:36,505 on stmt: $np_typ_var.1355 = getattr(value=$np_g_var.1353, attr=int64)
DEBUG 2022-01-28 15:49:36,505 on stmt: delta = call $empty_attr_attr.1354(edge__reps__size0_1299, $np_typ_var.1355, func=$empty_attr_attr.1354, args=[Var(edge__reps__size0_1299, loop_hafnian_batch.py:32), Var($np_typ_var.1355, loop_hafnian_batch.py:51)], kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:36,505 on stmt: jump 40
DEBUG 2022-01-28 15:49:36,505 ==== SSA block rewrite pass on 40
DEBUG 2022-01-28 15:49:36,505 Running <numba.core.ssa._FixSSAVars object at 0x000002410CBBCC40>
DEBUG 2022-01-28 15:49:36,505 on stmt: $40for_iter.1.1989 = iternext(value=$phi40.0.1988)
DEBUG 2022-01-28 15:49:36,505 on stmt: $40for_iter.2.1990 = pair_first(value=$40for_iter.1.1989)
DEBUG 2022-01-28 15:49:36,505 on stmt: $40for_iter.3.1991 = pair_second(value=$40for_iter.1.1989)
DEBUG 2022-01-28 15:49:36,505 on stmt: $phi42.1.1992 = $40for_iter.2.1990
DEBUG 2022-01-28 15:49:36,505 on stmt: branch $40for_iter.3.1991, 42, 1224
DEBUG 2022-01-28 15:49:36,505 ==== SSA block rewrite pass on 42
DEBUG 2022-01-28 15:49:36,505 Running <numba.core.ssa._FixSSAVars object at 0x000002410CBBCC40>
DEBUG 2022-01-28 15:49:36,505 on stmt: parfor__index_1369 = $phi42.1.1992
DEBUG 2022-01-28 15:49:36,505 on stmt: jump 50
DEBUG 2022-01-28 15:49:36,505 ==== SSA block rewrite pass on 1224
DEBUG 2022-01-28 15:49:36,505 Running <numba.core.ssa._FixSSAVars object at 0x000002410CBBCC40>
DEBUG 2022-01-28 15:49:36,505 on stmt: $const52.1.1993 = const(NoneType, None)
DEBUG 2022-01-28 15:49:36,505 on stmt: $const54.2.1994 = const(NoneType, None)
DEBUG 2022-01-28 15:49:36,505 on stmt: $56build_slice.3.1995 = global(slice: <class 'slice'>)
DEBUG 2022-01-28 15:49:36,505 on stmt: $56build_slice.4.1996 = call $56build_slice.3.1995($const52.1.1993, $const54.2.1994, func=$56build_slice.3.1995, args=(Var($const52.1.1993, <string>:5), Var($const54.2.1994, <string>:5)), kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:36,505 on stmt: $58binary_subscr.5.1997 = getitem(value=H__batch_2, index=$56build_slice.4.1996, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:36,505 on stmt: $const62.7.1998 = const(NoneType, None)
DEBUG 2022-01-28 15:49:36,505 on stmt: $const64.8.1999 = const(NoneType, None)
DEBUG 2022-01-28 15:49:36,505 on stmt: $66build_slice.9.2000 = global(slice: <class 'slice'>)
DEBUG 2022-01-28 15:49:36,505 on stmt: $66build_slice.10.2001 = call $66build_slice.9.2000($const62.7.1998, $const64.8.1999, func=$66build_slice.9.2000, args=(Var($const62.7.1998, <string>:5), Var($const64.8.1999, <string>:5)), kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:36,505 on stmt: H__batch_2__arr[$66build_slice.10.2001] = $58binary_subscr.5.1997
DEBUG 2022-01-28 15:49:36,505 on stmt: $const70.11.2002 = const(NoneType, None)
DEBUG 2022-01-28 15:49:36,505 on stmt: $72return_value.12.2003 = cast(value=$const70.11.2002)
DEBUG 2022-01-28 15:49:36,505 on stmt: return $72return_value.12.2003
DEBUG 2022-01-28 15:49:36,505 ==== SSA block rewrite pass on 1062
DEBUG 2022-01-28 15:49:36,505 Running <numba.core.ssa._FixSSAVars object at 0x000002410CBBCC40>
DEBUG 2022-01-28 15:49:36,505 on stmt: jump 1003
DEBUG 2022-01-28 15:49:36,505 ==== SSA block rewrite pass on 50
DEBUG 2022-01-28 15:49:36,505 Running <numba.core.ssa._FixSSAVars object at 0x000002410CBBCC40>
DEBUG 2022-01-28 15:49:36,505 on stmt: j = parfor__index_1369
DEBUG 2022-01-28 15:49:36,505 on stmt: id=13[LoopNest(index_variable = parfor_index.1347, range = (0, $180binary_add.10, 1))]{1222: <ir.Block at C:\Users\zl4821\PycharmProjects\GBS\gbs\loop_hafnian_batch.py (41)>}Var(parfor_index.1347, loop_hafnian_batch.py:41)
DEBUG 2022-01-28 15:49:36,505 on stmt: kept_edges = call $192load_global.15(j, edge__reps, func=$192load_global.15, args=[Var(j, loop_hafnian_batch.py:39), Var(edge__reps, loop_hafnian_batch.py:32)], kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:36,505 on stmt: kept_edges_shape.1306 = getattr(value=kept_edges, attr=shape)
DEBUG 2022-01-28 15:49:36,505 on stmt: kept_edges_size0.1307 = static_getitem(value=kept_edges_shape.1306, index=0, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:36,505 on stmt: binom_prod.2 = binom_prod
DEBUG 2022-01-28 15:49:36,505 on stmt: id=17[LoopNest(index_variable = parfor_index.1365, range = (0, kept_edges_size0.1307, 1))]{557: <ir.Block at C:\Users\zl4821\Anaconda3\envs\GBS\lib\site-packages\numba\parfors\parfor.py (256)>}Var(parfor_index.1365, parfor.py:256)
DEBUG 2022-01-28 15:49:36,505 on stmt: $224call_function.28 = call $214load_global.23($const216.24, $222binary_floor_divide.27, func=$214load_global.23, args=[Var($const216.24, loop_hafnian_batch.py:47), Var($222binary_floor_divide.27, loop_hafnian_batch.py:47)], kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:36,505 on stmt: $226get_iter.29 = getiter(value=$224call_function.28)
DEBUG 2022-01-28 15:49:36,505 on stmt: jump 495
DEBUG 2022-01-28 15:49:36,505 ==== SSA block rewrite pass on 593
DEBUG 2022-01-28 15:49:36,505 Running <numba.core.ssa._FixSSAVars object at 0x000002410CBBCC40>
DEBUG 2022-01-28 15:49:36,505 on stmt: delta.2 = kept_edges
DEBUG 2022-01-28 15:49:36,505 on stmt: jump 631
DEBUG 2022-01-28 15:49:36,505 ==== SSA block rewrite pass on 495
DEBUG 2022-01-28 15:49:36,505 Running <numba.core.ssa._FixSSAVars object at 0x000002410CBBCC40>
DEBUG 2022-01-28 15:49:36,505 on stmt: $228for_iter.2 = iternext(value=$226get_iter.29)
DEBUG 2022-01-28 15:49:36,505 on stmt: $i.1394 = pair_first(value=$228for_iter.2)
DEBUG 2022-01-28 15:49:36,505 on stmt: $228for_iter.4 = pair_second(value=$228for_iter.2)
DEBUG 2022-01-28 15:49:36,505 on stmt: branch $228for_iter.4, 571, 577
DEBUG 2022-01-28 15:49:36,505 ==== SSA block rewrite pass on 1078
DEBUG 2022-01-28 15:49:36,505 Running <numba.core.ssa._FixSSAVars object at 0x000002410CBBCC40>
DEBUG 2022-01-28 15:49:36,505 on stmt: ret.1332 = call assert.1331(msg.1330, _136binary__add_59, $180binary_add.10, func=assert.1331, args=[Var(msg.1330, loop_hafnian_batch.py:75), Var(_136binary__add_59, loop_hafnian_batch.py:38), Var($180binary_add.10, loop_hafnian_batch.py:41)], kws={}, vararg=None, target=None)
DEBUG 2022-01-28 15:49:36,505 on stmt: $H_batch.2.1740 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=H__batch_2, rhs=Hnew, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-01-28 15:49:36,505 on stmt: H__batch_2 = $H_batch.2.1740
DEBUG 2022-01-28 15:49:36,505 on stmt: jump 1117
DEBUG 2022-01-28 15:49:36,505 ==== SSA block rewrite pass on 1005
DEBUG 2022-01-28 15:49:36,505 Running <numba.core.ssa._FixSSAVars object at 0x000002410CBBCC40>
DEBUG 2022-01-28 15:49:36,513 on stmt: N = N__fixed + $N_det.1393
DEBUG 2022-01-28 15:49:36,513 on stmt: $396binary_floor_divide.9 = N // $const394.8
DEBUG 2022-01-28 15:49:36,513 on stmt: $400binary_subtract.11 = $396binary_floor_divide.9 - val.1149
DEBUG 2022-01-28 15:49:36,513 on stmt: plus_minus = $const390.6 ** $400binary_subtract.11
DEBUG 2022-01-28 15:49:36,513 on stmt: $412binary_floor_divide.16 = $N_det.1393 // $const410.15
DEBUG 2022-01-28 15:49:36,513 on stmt: $418binary_subscr.19 = static_getitem(value=kept_edges, index=0, index_var=$const416.18, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:36,513 on stmt: $420build_tuple.20 = build_tuple(items=[Var($412binary_floor_divide.16, loop_hafnian_batch.py:68), Var($418binary_subscr.19, loop_hafnian_batch.py:68)])
DEBUG 2022-01-28 15:49:36,513 on stmt: $422binary_subscr.21 = getitem(value=binoms, index=$420build_tuple.20, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:36,513 on stmt: n_det_binom_prod = $422binary_subscr.21 * binom_prod.2
DEBUG 2022-01-28 15:49:36,513 on stmt: $434binary_modulo.26 = $N_det.1393 % $const432.25
DEBUG 2022-01-28 15:49:36,513 on stmt: $438compare_op.28 = $434binary_modulo.26 == $const436.27
DEBUG 2022-01-28 15:49:36,513 on stmt: $440pred = call bool440($438compare_op.28, func=bool440, args=(Var($438compare_op.28, loop_hafnian_batch.py:70),), kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:36,513 on stmt: branch $440pred, 1021, 1060
DEBUG 2022-01-28 15:49:36,513 ==== SSA block rewrite pass on 571
DEBUG 2022-01-28 15:49:36,513 Running <numba.core.ssa._FixSSAVars object at 0x000002410CBBCC40>
DEBUG 2022-01-28 15:49:36,513 on stmt: $240binary_subscr.7 = getitem(value=edge__reps, index=$i.1394, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:36,513 on stmt: $246binary_subscr.10 = getitem(value=kept_edges, index=$i.1394, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:36,515 on stmt: $248build_tuple.11 = build_tuple(items=[Var($240binary_subscr.7, loop_hafnian_batch.py:48), Var($246binary_subscr.10, loop_hafnian_batch.py:48)])
DEBUG 2022-01-28 15:49:36,515 on stmt: $250binary_subscr.12 = getitem(value=binoms, index=$248build_tuple.11, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:36,515 on stmt: $binom_prod.2.1741 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=binom_prod.2, rhs=$250binary_subscr.12, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-01-28 15:49:36,515 on stmt: binom_prod.2 = $binom_prod.2.1741
DEBUG 2022-01-28 15:49:36,515 on stmt: jump 495
DEBUG 2022-01-28 15:49:36,515 ==== SSA block rewrite pass on 1021
DEBUG 2022-01-28 15:49:36,515 Running <numba.core.ssa._FixSSAVars object at 0x000002410CBBCC40>
DEBUG 2022-01-28 15:49:36,515 on stmt: $450binary_subscr.6 = getitem(value=Hnew, index=$N_det.1393, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:36,515 on stmt: $456binary_multiply.9 = n_det_binom_prod * plus_minus
DEBUG 2022-01-28 15:49:36,515 on stmt: $464binary_floor_divide.13 = N // $const462.12
DEBUG 2022-01-28 15:49:36,515 on stmt: $466binary_subscr.14 = getitem(value=f_even, index=$464binary_floor_divide.13, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:36,515 on stmt: $468binary_multiply.15 = $456binary_multiply.9 * $466binary_subscr.14
DEBUG 2022-01-28 15:49:36,515 on stmt: $470inplace_add.16 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$450binary_subscr.6, rhs=$468binary_multiply.15, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-01-28 15:49:36,515 on stmt: Hnew[$N_det.1393] = $470inplace_add.16
DEBUG 2022-01-28 15:49:36,515 on stmt: jump 1062
DEBUG 2022-01-28 15:49:36,515 ==== SSA block rewrite pass on 1060
DEBUG 2022-01-28 15:49:36,515 Running <numba.core.ssa._FixSSAVars object at 0x000002410CBBCC40>
DEBUG 2022-01-28 15:49:36,515 on stmt: $484binary_subscr.6 = getitem(value=Hnew, index=$N_det.1393, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:36,515 on stmt: $490binary_multiply.9 = n_det_binom_prod * plus_minus
DEBUG 2022-01-28 15:49:36,515 on stmt: $496binary_subscr.12 = getitem(value=f_odd, index=N, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:36,515 on stmt: $498binary_multiply.13 = $490binary_multiply.9 * $496binary_subscr.12
DEBUG 2022-01-28 15:49:36,515 on stmt: $500inplace_add.14 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$484binary_subscr.6, rhs=$498binary_multiply.13, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-01-28 15:49:36,515 on stmt: Hnew[$N_det.1393] = $500inplace_add.14
DEBUG 2022-01-28 15:49:36,515 on stmt: jump 1062
DEBUG 2022-01-28 15:49:36,515 ==== SSA block rewrite pass on 631
DEBUG 2022-01-28 15:49:36,515 Running <numba.core.ssa._FixSSAVars object at 0x000002410CBBCC40>
DEBUG 2022-01-28 15:49:36,515 on stmt: $292call_function.6 = call $282load_global.1(delta.2, A, D, oddV, func=$282load_global.1, args=[Var(delta.2, loop_hafnian_batch.py:55), Var(A, loop_hafnian_batch.py:24), Var(D, loop_hafnian_batch.py:24), Var(oddV, loop_hafnian_batch.py:25)], kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:36,515 find_def var='delta.2' stmt=$292call_function.6 = call $282load_global.1(delta.2, A, D, oddV, func=$282load_global.1, args=[Var(delta.2, loop_hafnian_batch.py:55), Var(A, loop_hafnian_batch.py:24), Var(D, loop_hafnian_batch.py:24), Var(oddV, loop_hafnian_batch.py:25)], kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:36,515 find_def_from_top label 631
DEBUG 2022-01-28 15:49:36,515 insert phi node delta.2.2 = phi(incoming_values=[], incoming_blocks=[]) at 631
DEBUG 2022-01-28 15:49:36,515 find_def_from_bottom label 593
DEBUG 2022-01-28 15:49:36,515 incoming_def delta.2 = kept_edges
DEBUG 2022-01-28 15:49:36,515 find_def_from_bottom label 591
DEBUG 2022-01-28 15:49:36,515 incoming_def delta.2.1 = delta
DEBUG 2022-01-28 15:49:36,515 replaced with: $292call_function.6 = call $282load_global.1(delta.2.2, A, D, oddV, func=$282load_global.1, args=[Var(delta.2.2, loop_hafnian_batch.py:55), Var(A, loop_hafnian_batch.py:24), Var(D, loop_hafnian_batch.py:24), Var(oddV, loop_hafnian_batch.py:25)], kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:36,515 on stmt: $294unpack_sequence.11 = exhaust_iter(value=$292call_function.6, count=4)
DEBUG 2022-01-28 15:49:36,515 on stmt: $AX_S.1389 = static_getitem(value=$294unpack_sequence.11, index=0, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:36,515 on stmt: $XD_S.1388 = static_getitem(value=$294unpack_sequence.11, index=1, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:36,515 on stmt: $D_S.1390 = static_getitem(value=$294unpack_sequence.11, index=2, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:36,515 on stmt: $oddVX_S.1387 = static_getitem(value=$294unpack_sequence.11, index=3, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:36,515 on stmt: E = call $304load_global.12($AX_S.1389, func=$304load_global.12, args=[Var($AX_S.1389, loop_hafnian_batch.py:55)], kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:36,515 on stmt: f_even = call $312load_global.15(E, $AX_S.1389, $XD_S.1388, $D_S.1390, N__max, func=$312load_global.15, args=[Var(E, loop_hafnian_batch.py:57), Var($AX_S.1389, loop_hafnian_batch.py:55), Var($XD_S.1388, loop_hafnian_batch.py:55), Var($D_S.1390, loop_hafnian_batch.py:55), Var(N__max, loop_hafnian_batch.py:30)], kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:36,515 on stmt: f_odd = call $328load_global.22(E, $AX_S.1389, $XD_S.1388, $D_S.1390, N__max, oddloop, $oddVX_S.1387, func=$328load_global.22, args=[Var(E, loop_hafnian_batch.py:57), Var($AX_S.1389, loop_hafnian_batch.py:55), Var($XD_S.1388, loop_hafnian_batch.py:55), Var($D_S.1390, loop_hafnian_batch.py:55), Var(N__max, loop_hafnian_batch.py:30), Var(oddloop, loop_hafnian_batch.py:24), Var($oddVX_S.1387, loop_hafnian_batch.py:55)], kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:36,515 on stmt: $356binary_subscr.35 = static_getitem(value=kept_edges, index=0, index_var=$const354.34, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:36,515 on stmt: $358binary_multiply.36 = $const350.32 * $356binary_subscr.35
DEBUG 2022-01-28 15:49:36,515 on stmt: $374call_function.44 = call $348load_global.31($358binary_multiply.36, $372binary_add.43, func=$348load_global.31, args=[Var($358binary_multiply.36, loop_hafnian_batch.py:64), Var($372binary_add.43, loop_hafnian_batch.py:64)], kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:36,515 on stmt: $376get_iter.45 = getiter(value=$374call_function.44)
DEBUG 2022-01-28 15:49:36,515 on stmt: jump 1003
DEBUG 2022-01-28 15:49:36,515 ==== SSA block rewrite pass on 1003
DEBUG 2022-01-28 15:49:36,515 Running <numba.core.ssa._FixSSAVars object at 0x000002410CBBCC40>
DEBUG 2022-01-28 15:49:36,515 on stmt: $378for_iter.2 = iternext(value=$376get_iter.45)
DEBUG 2022-01-28 15:49:36,515 on stmt: $N_det.1393 = pair_first(value=$378for_iter.2)
DEBUG 2022-01-28 15:49:36,515 on stmt: $378for_iter.4 = pair_second(value=$378for_iter.2)
DEBUG 2022-01-28 15:49:36,515 on stmt: branch $378for_iter.4, 1005, 1078
DEBUG 2022-01-28 15:49:36,515 ==== SSA block rewrite pass on 577
DEBUG 2022-01-28 15:49:36,515 Running <numba.core.ssa._FixSSAVars object at 0x000002410CBBCC40>
DEBUG 2022-01-28 15:49:36,515 on stmt: $260pred = call bool260(glynn, func=bool260, args=(Var(glynn, loop_hafnian_batch.py:24),), kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:36,515 on stmt: branch $260pred, 591, 593
DEBUG 2022-01-28 15:49:36,515 ==== SSA block rewrite pass on 591
DEBUG 2022-01-28 15:49:36,515 Running <numba.core.ssa._FixSSAVars object at 0x000002410CBBCC40>
DEBUG 2022-01-28 15:49:36,515 on stmt: ret.1311 = call assert.1310(msg.1309, kept_edges_size0.1307, edge__reps__size0_1299, func=assert.1310, args=[Var(msg.1309, loop_hafnian_batch.py:51), Var(kept_edges_size0.1307, loop_hafnian_batch.py:43), Var(edge__reps__size0_1299, loop_hafnian_batch.py:32)], kws={}, vararg=None, target=None)
DEBUG 2022-01-28 15:49:36,515 on stmt: id=14[LoopNest(index_variable = parfor_index.1352, range = (0, edge__reps__size0_1299, 1))]{1223: <ir.Block at C:\Users\zl4821\PycharmProjects\GBS\gbs\loop_hafnian_batch.py (51)>}Var(parfor_index.1352, loop_hafnian_batch.py:51)
DEBUG 2022-01-28 15:49:36,515 on stmt: delta.2.1 = delta
DEBUG 2022-01-28 15:49:36,515 on stmt: jump 631
DEBUG 2022-01-28 15:49:36,515 ==== SSA block rewrite pass on 1117
DEBUG 2022-01-28 15:49:36,515 Running <numba.core.ssa._FixSSAVars object at 0x000002410CBBCC40>
DEBUG 2022-01-28 15:49:36,515 on stmt: jump 40
DEBUG 2022-01-28 15:49:36,515 Fix SSA violator on var H__batch_2
DEBUG 2022-01-28 15:49:36,515 ==== SSA block rewrite pass on 0
DEBUG 2022-01-28 15:49:36,515 Running <numba.core.ssa._FreshVarHandler object at 0x000002410CBBCEE0>
DEBUG 2022-01-28 15:49:36,515 on stmt: sched.1973 = arg(0, name=sched)
DEBUG 2022-01-28 15:49:36,515 on stmt: _136binary__add_59 = arg(1, name=_136binary__add_59)
DEBUG 2022-01-28 15:49:36,515 on stmt: A = arg(2, name=A)
DEBUG 2022-01-28 15:49:36,515 on stmt: D = arg(3, name=D)
DEBUG 2022-01-28 15:49:36,515 on stmt: N__fixed = arg(4, name=N__fixed)
DEBUG 2022-01-28 15:49:36,515 on stmt: N__max = arg(5, name=N__max)
DEBUG 2022-01-28 15:49:36,515 on stmt: batch__max = arg(6, name=batch__max)
DEBUG 2022-01-28 15:49:36,515 on stmt: binoms = arg(7, name=binoms)
DEBUG 2022-01-28 15:49:36,523 on stmt: edge__reps = arg(8, name=edge__reps)
DEBUG 2022-01-28 15:49:36,523 on stmt: edge__reps__size0_1299 = arg(9, name=edge__reps__size0_1299)
DEBUG 2022-01-28 15:49:36,523 on stmt: glynn = arg(10, name=glynn)
DEBUG 2022-01-28 15:49:36,523 on stmt: n = arg(11, name=n)
DEBUG 2022-01-28 15:49:36,523 on stmt: oddV = arg(12, name=oddV)
DEBUG 2022-01-28 15:49:36,523 on stmt: odd__cutoff = arg(13, name=odd__cutoff)
DEBUG 2022-01-28 15:49:36,523 on stmt: oddloop = arg(14, name=oddloop)
DEBUG 2022-01-28 15:49:36,523 on stmt: H__batch_2__arr = arg(15, name=H__batch_2__arr)
DEBUG 2022-01-28 15:49:36,523 on stmt: $2load_global.0.1974 = global(np: <module 'numpy' from 'C:\\Users\\zl4821\\Anaconda3\\envs\\GBS\\lib\\site-packages\\numpy\\__init__.py'>)
DEBUG 2022-01-28 15:49:36,523 on stmt: $4load_method.1.1975 = getattr(value=$2load_global.0.1974, attr=copy)
DEBUG 2022-01-28 15:49:36,523 on stmt: H__batch_2 = call $4load_method.1.1975(H__batch_2__arr, func=$4load_method.1.1975, args=[Var(H__batch_2__arr, <string>:2)], kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:36,523 first assign: H__batch_2
DEBUG 2022-01-28 15:49:36,523 replaced with: H__batch_2 = call $4load_method.1.1975(H__batch_2__arr, func=$4load_method.1.1975, args=[Var(H__batch_2__arr, <string>:2)], kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:36,523 on stmt: $12load_global.4.1976 = global(range: <class 'range'>)
DEBUG 2022-01-28 15:49:36,523 on stmt: $const16.6.1977 = const(int, 0)
DEBUG 2022-01-28 15:49:36,523 on stmt: $18binary_subscr.7.1978 = getitem(value=sched.1973, index=$const16.6.1977, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:36,523 on stmt: $const22.9.1979 = const(int, 1)
DEBUG 2022-01-28 15:49:36,523 on stmt: $24binary_subscr.10.1980 = getitem(value=sched.1973, index=$const22.9.1979, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:36,523 on stmt: $26load_global.11.1981 = global(np: <module 'numpy' from 'C:\\Users\\zl4821\\Anaconda3\\envs\\GBS\\lib\\site-packages\\numpy\\__init__.py'>)
DEBUG 2022-01-28 15:49:36,523 on stmt: $28load_method.12.1982 = getattr(value=$26load_global.11.1981, attr=uint8)
DEBUG 2022-01-28 15:49:36,523 on stmt: $const30.13.1983 = const(int, 1)
DEBUG 2022-01-28 15:49:36,523 on stmt: $32call_method.14.1984 = call $28load_method.12.1982($const30.13.1983, func=$28load_method.12.1982, args=[Var($const30.13.1983, <string>:3)], kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:36,525 on stmt: $34binary_add.15.1985 = $24binary_subscr.10.1980 + $32call_method.14.1984
DEBUG 2022-01-28 15:49:36,525 on stmt: $36call_function.16.1986 = call $12load_global.4.1976($18binary_subscr.7.1978, $34binary_add.15.1985, func=$12load_global.4.1976, args=[Var($18binary_subscr.7.1978, <string>:3), Var($34binary_add.15.1985, <string>:3)], kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:36,525 on stmt: $38get_iter.17.1987 = getiter(value=$36call_function.16.1986)
DEBUG 2022-01-28 15:49:36,525 on stmt: $phi40.0.1988 = $38get_iter.17.1987
DEBUG 2022-01-28 15:49:36,525 on stmt: $const168.4 = const(int, 2)
DEBUG 2022-01-28 15:49:36,525 on stmt: $172binary_multiply.6 = $const168.4 * batch__max
DEBUG 2022-01-28 15:49:36,525 on stmt: $176binary_add.8 = $172binary_multiply.6 + odd__cutoff
DEBUG 2022-01-28 15:49:36,525 on stmt: $const178.9 = const(int, 1)
DEBUG 2022-01-28 15:49:36,525 on stmt: $180binary_add.10 = $176binary_add.8 + $const178.9
DEBUG 2022-01-28 15:49:36,525 on stmt: $192load_global.15 = global(find_kept_edges: CPUDispatcher(<function find_kept_edges at 0x0000024107424550>))
DEBUG 2022-01-28 15:49:36,525 on stmt: $np_g_var.1348 = global(np: <module 'numpy' from 'C:\\Users\\zl4821\\Anaconda3\\envs\\GBS\\lib\\site-packages\\numpy\\__init__.py'>)
DEBUG 2022-01-28 15:49:36,525 on stmt: $empty_attr_attr.1349 = getattr(value=$np_g_var.1348, attr=empty)
DEBUG 2022-01-28 15:49:36,525 on stmt: $np_typ_var.1350 = getattr(value=$np_g_var.1348, attr=complex128)
DEBUG 2022-01-28 15:49:36,525 on stmt: Hnew = call $empty_attr_attr.1349($180binary_add.10, $np_typ_var.1350, func=$empty_attr_attr.1349, args=[Var($180binary_add.10, loop_hafnian_batch.py:41), Var($np_typ_var.1350, loop_hafnian_batch.py:41)], kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:36,525 on stmt: binom_prod = const(float, 1.0)
DEBUG 2022-01-28 15:49:36,525 on stmt: $214load_global.23 = global(range: <class 'range'>)
DEBUG 2022-01-28 15:49:36,525 on stmt: $const216.24 = const(int, 1)
DEBUG 2022-01-28 15:49:36,525 on stmt: $const220.26 = const(int, 2)
DEBUG 2022-01-28 15:49:36,525 on stmt: $222binary_floor_divide.27 = n // $const220.26
DEBUG 2022-01-28 15:49:36,525 on stmt: msg.1330 = const(str, Sizes of H_batch.2, Hnew do not match on C:\Users\zl4821\PycharmProjects\GBS\gbs\loop_hafnian_batch.py (75))
DEBUG 2022-01-28 15:49:36,525 on stmt: assert.1331 = global(assert_equiv: <intrinsic assert_equiv>)
DEBUG 2022-01-28 15:49:36,525 on stmt: $const390.6 = const(float, -1.0)
DEBUG 2022-01-28 15:49:36,525 on stmt: $const394.8 = const(int, 2)
DEBUG 2022-01-28 15:49:36,525 on stmt: $const410.15 = const(int, 2)
DEBUG 2022-01-28 15:49:36,525 on stmt: $const416.18 = const(int, 0)
DEBUG 2022-01-28 15:49:36,525 on stmt: $const432.25 = const(int, 2)
DEBUG 2022-01-28 15:49:36,525 on stmt: $const436.27 = const(int, 0)
DEBUG 2022-01-28 15:49:36,525 on stmt: bool440 = global(bool: <class 'bool'>)
DEBUG 2022-01-28 15:49:36,525 on stmt: $const462.12 = const(int, 2)
DEBUG 2022-01-28 15:49:36,525 on stmt: $282load_global.1 = global(get_submatrices: CPUDispatcher(<function get_submatrices at 0x0000024107424E50>))
DEBUG 2022-01-28 15:49:36,525 on stmt: $304load_global.12 = global(eigvals: CPUDispatcher(<function eigvals at 0x00000241074303A0>))
DEBUG 2022-01-28 15:49:36,525 on stmt: $312load_global.15 = global(f_loop: CPUDispatcher(<function f_loop at 0x00000241074248B0>))
DEBUG 2022-01-28 15:49:36,525 on stmt: $328load_global.22 = global(f_loop_odd: CPUDispatcher(<function f_loop_odd at 0x0000024107424AF0>))
DEBUG 2022-01-28 15:49:36,525 on stmt: $348load_global.31 = global(range: <class 'range'>)
DEBUG 2022-01-28 15:49:36,525 on stmt: $const350.32 = const(int, 2)
DEBUG 2022-01-28 15:49:36,525 on stmt: $const354.34 = const(int, 0)
DEBUG 2022-01-28 15:49:36,525 on stmt: $const360.37 = const(int, 2)
DEBUG 2022-01-28 15:49:36,525 on stmt: $364binary_multiply.39 = $const360.37 * batch__max
DEBUG 2022-01-28 15:49:36,525 on stmt: $368binary_add.41 = $364binary_multiply.39 + odd__cutoff
DEBUG 2022-01-28 15:49:36,525 on stmt: $const370.42 = const(int, 1)
DEBUG 2022-01-28 15:49:36,525 on stmt: $372binary_add.43 = $368binary_add.41 + $const370.42
DEBUG 2022-01-28 15:49:36,525 on stmt: bool260 = global(bool: <class 'bool'>)
DEBUG 2022-01-28 15:49:36,525 on stmt: msg.1309 = const(str, Sizes of kept_edges, edge_reps do not match on C:\Users\zl4821\PycharmProjects\GBS\gbs\loop_hafnian_batch.py (51))
DEBUG 2022-01-28 15:49:36,525 on stmt: assert.1310 = global(assert_equiv: <intrinsic assert_equiv>)
DEBUG 2022-01-28 15:49:36,525 on stmt: $np_g_var.1353 = global(np: <module 'numpy' from 'C:\\Users\\zl4821\\Anaconda3\\envs\\GBS\\lib\\site-packages\\numpy\\__init__.py'>)
DEBUG 2022-01-28 15:49:36,525 on stmt: $empty_attr_attr.1354 = getattr(value=$np_g_var.1353, attr=empty)
DEBUG 2022-01-28 15:49:36,525 on stmt: $np_typ_var.1355 = getattr(value=$np_g_var.1353, attr=int64)
DEBUG 2022-01-28 15:49:36,525 on stmt: delta = call $empty_attr_attr.1354(edge__reps__size0_1299, $np_typ_var.1355, func=$empty_attr_attr.1354, args=[Var(edge__reps__size0_1299, loop_hafnian_batch.py:32), Var($np_typ_var.1355, loop_hafnian_batch.py:51)], kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:36,525 on stmt: jump 40
DEBUG 2022-01-28 15:49:36,525 ==== SSA block rewrite pass on 40
DEBUG 2022-01-28 15:49:36,525 Running <numba.core.ssa._FreshVarHandler object at 0x000002410CBBCEE0>
DEBUG 2022-01-28 15:49:36,525 on stmt: $40for_iter.1.1989 = iternext(value=$phi40.0.1988)
DEBUG 2022-01-28 15:49:36,525 on stmt: $40for_iter.2.1990 = pair_first(value=$40for_iter.1.1989)
DEBUG 2022-01-28 15:49:36,525 on stmt: $40for_iter.3.1991 = pair_second(value=$40for_iter.1.1989)
DEBUG 2022-01-28 15:49:36,525 on stmt: $phi42.1.1992 = $40for_iter.2.1990
DEBUG 2022-01-28 15:49:36,525 on stmt: branch $40for_iter.3.1991, 42, 1224
DEBUG 2022-01-28 15:49:36,525 ==== SSA block rewrite pass on 42
DEBUG 2022-01-28 15:49:36,525 Running <numba.core.ssa._FreshVarHandler object at 0x000002410CBBCEE0>
DEBUG 2022-01-28 15:49:36,525 on stmt: parfor__index_1369 = $phi42.1.1992
DEBUG 2022-01-28 15:49:36,525 on stmt: jump 50
DEBUG 2022-01-28 15:49:36,525 ==== SSA block rewrite pass on 1224
DEBUG 2022-01-28 15:49:36,525 Running <numba.core.ssa._FreshVarHandler object at 0x000002410CBBCEE0>
DEBUG 2022-01-28 15:49:36,525 on stmt: $const52.1.1993 = const(NoneType, None)
DEBUG 2022-01-28 15:49:36,525 on stmt: $const54.2.1994 = const(NoneType, None)
DEBUG 2022-01-28 15:49:36,525 on stmt: $56build_slice.3.1995 = global(slice: <class 'slice'>)
DEBUG 2022-01-28 15:49:36,525 on stmt: $56build_slice.4.1996 = call $56build_slice.3.1995($const52.1.1993, $const54.2.1994, func=$56build_slice.3.1995, args=(Var($const52.1.1993, <string>:5), Var($const54.2.1994, <string>:5)), kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:36,525 on stmt: $58binary_subscr.5.1997 = getitem(value=H__batch_2, index=$56build_slice.4.1996, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:36,525 on stmt: $const62.7.1998 = const(NoneType, None)
DEBUG 2022-01-28 15:49:36,525 on stmt: $const64.8.1999 = const(NoneType, None)
DEBUG 2022-01-28 15:49:36,525 on stmt: $66build_slice.9.2000 = global(slice: <class 'slice'>)
DEBUG 2022-01-28 15:49:36,525 on stmt: $66build_slice.10.2001 = call $66build_slice.9.2000($const62.7.1998, $const64.8.1999, func=$66build_slice.9.2000, args=(Var($const62.7.1998, <string>:5), Var($const64.8.1999, <string>:5)), kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:36,525 on stmt: H__batch_2__arr[$66build_slice.10.2001] = $58binary_subscr.5.1997
DEBUG 2022-01-28 15:49:36,525 on stmt: $const70.11.2002 = const(NoneType, None)
DEBUG 2022-01-28 15:49:36,525 on stmt: $72return_value.12.2003 = cast(value=$const70.11.2002)
DEBUG 2022-01-28 15:49:36,525 on stmt: return $72return_value.12.2003
DEBUG 2022-01-28 15:49:36,525 ==== SSA block rewrite pass on 1062
DEBUG 2022-01-28 15:49:36,525 Running <numba.core.ssa._FreshVarHandler object at 0x000002410CBBCEE0>
DEBUG 2022-01-28 15:49:36,525 on stmt: jump 1003
DEBUG 2022-01-28 15:49:36,525 ==== SSA block rewrite pass on 50
DEBUG 2022-01-28 15:49:36,525 Running <numba.core.ssa._FreshVarHandler object at 0x000002410CBBCEE0>
DEBUG 2022-01-28 15:49:36,525 on stmt: j = parfor__index_1369
DEBUG 2022-01-28 15:49:36,525 on stmt: id=13[LoopNest(index_variable = parfor_index.1347, range = (0, $180binary_add.10, 1))]{1222: <ir.Block at C:\Users\zl4821\PycharmProjects\GBS\gbs\loop_hafnian_batch.py (41)>}Var(parfor_index.1347, loop_hafnian_batch.py:41)
DEBUG 2022-01-28 15:49:36,525 on stmt: kept_edges = call $192load_global.15(j, edge__reps, func=$192load_global.15, args=[Var(j, loop_hafnian_batch.py:39), Var(edge__reps, loop_hafnian_batch.py:32)], kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:36,525 on stmt: kept_edges_shape.1306 = getattr(value=kept_edges, attr=shape)
DEBUG 2022-01-28 15:49:36,525 on stmt: kept_edges_size0.1307 = static_getitem(value=kept_edges_shape.1306, index=0, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:36,525 on stmt: binom_prod.2 = binom_prod
DEBUG 2022-01-28 15:49:36,525 on stmt: id=17[LoopNest(index_variable = parfor_index.1365, range = (0, kept_edges_size0.1307, 1))]{557: <ir.Block at C:\Users\zl4821\Anaconda3\envs\GBS\lib\site-packages\numba\parfors\parfor.py (256)>}Var(parfor_index.1365, parfor.py:256)
DEBUG 2022-01-28 15:49:36,525 on stmt: $224call_function.28 = call $214load_global.23($const216.24, $222binary_floor_divide.27, func=$214load_global.23, args=[Var($const216.24, loop_hafnian_batch.py:47), Var($222binary_floor_divide.27, loop_hafnian_batch.py:47)], kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:36,533 on stmt: $226get_iter.29 = getiter(value=$224call_function.28)
DEBUG 2022-01-28 15:49:36,533 on stmt: jump 495
DEBUG 2022-01-28 15:49:36,533 ==== SSA block rewrite pass on 593
DEBUG 2022-01-28 15:49:36,533 Running <numba.core.ssa._FreshVarHandler object at 0x000002410CBBCEE0>
DEBUG 2022-01-28 15:49:36,533 on stmt: delta.2 = kept_edges
DEBUG 2022-01-28 15:49:36,533 on stmt: jump 631
DEBUG 2022-01-28 15:49:36,533 ==== SSA block rewrite pass on 495
DEBUG 2022-01-28 15:49:36,533 Running <numba.core.ssa._FreshVarHandler object at 0x000002410CBBCEE0>
DEBUG 2022-01-28 15:49:36,533 on stmt: $228for_iter.2 = iternext(value=$226get_iter.29)
DEBUG 2022-01-28 15:49:36,533 on stmt: $i.1394 = pair_first(value=$228for_iter.2)
DEBUG 2022-01-28 15:49:36,533 on stmt: $228for_iter.4 = pair_second(value=$228for_iter.2)
DEBUG 2022-01-28 15:49:36,533 on stmt: branch $228for_iter.4, 571, 577
DEBUG 2022-01-28 15:49:36,533 ==== SSA block rewrite pass on 1078
DEBUG 2022-01-28 15:49:36,533 Running <numba.core.ssa._FreshVarHandler object at 0x000002410CBBCEE0>
DEBUG 2022-01-28 15:49:36,533 on stmt: ret.1332 = call assert.1331(msg.1330, _136binary__add_59, $180binary_add.10, func=assert.1331, args=[Var(msg.1330, loop_hafnian_batch.py:75), Var(_136binary__add_59, loop_hafnian_batch.py:38), Var($180binary_add.10, loop_hafnian_batch.py:41)], kws={}, vararg=None, target=None)
DEBUG 2022-01-28 15:49:36,535 on stmt: $H_batch.2.1740 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=H__batch_2, rhs=Hnew, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-01-28 15:49:36,535 on stmt: H__batch_2 = $H_batch.2.1740
DEBUG 2022-01-28 15:49:36,535 replaced with: H__batch_2.1 = $H_batch.2.1740
DEBUG 2022-01-28 15:49:36,535 on stmt: jump 1117
DEBUG 2022-01-28 15:49:36,535 ==== SSA block rewrite pass on 1005
DEBUG 2022-01-28 15:49:36,535 Running <numba.core.ssa._FreshVarHandler object at 0x000002410CBBCEE0>
DEBUG 2022-01-28 15:49:36,535 on stmt: N = N__fixed + $N_det.1393
DEBUG 2022-01-28 15:49:36,535 on stmt: $396binary_floor_divide.9 = N // $const394.8
DEBUG 2022-01-28 15:49:36,535 on stmt: $400binary_subtract.11 = $396binary_floor_divide.9 - val.1149
DEBUG 2022-01-28 15:49:36,535 on stmt: plus_minus = $const390.6 ** $400binary_subtract.11
DEBUG 2022-01-28 15:49:36,535 on stmt: $412binary_floor_divide.16 = $N_det.1393 // $const410.15
DEBUG 2022-01-28 15:49:36,535 on stmt: $418binary_subscr.19 = static_getitem(value=kept_edges, index=0, index_var=$const416.18, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:36,535 on stmt: $420build_tuple.20 = build_tuple(items=[Var($412binary_floor_divide.16, loop_hafnian_batch.py:68), Var($418binary_subscr.19, loop_hafnian_batch.py:68)])
DEBUG 2022-01-28 15:49:36,535 on stmt: $422binary_subscr.21 = getitem(value=binoms, index=$420build_tuple.20, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:36,535 on stmt: n_det_binom_prod = $422binary_subscr.21 * binom_prod.2
DEBUG 2022-01-28 15:49:36,535 on stmt: $434binary_modulo.26 = $N_det.1393 % $const432.25
DEBUG 2022-01-28 15:49:36,535 on stmt: $438compare_op.28 = $434binary_modulo.26 == $const436.27
DEBUG 2022-01-28 15:49:36,535 on stmt: $440pred = call bool440($438compare_op.28, func=bool440, args=(Var($438compare_op.28, loop_hafnian_batch.py:70),), kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:36,535 on stmt: branch $440pred, 1021, 1060
DEBUG 2022-01-28 15:49:36,535 ==== SSA block rewrite pass on 571
DEBUG 2022-01-28 15:49:36,535 Running <numba.core.ssa._FreshVarHandler object at 0x000002410CBBCEE0>
DEBUG 2022-01-28 15:49:36,535 on stmt: $240binary_subscr.7 = getitem(value=edge__reps, index=$i.1394, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:36,535 on stmt: $246binary_subscr.10 = getitem(value=kept_edges, index=$i.1394, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:36,535 on stmt: $248build_tuple.11 = build_tuple(items=[Var($240binary_subscr.7, loop_hafnian_batch.py:48), Var($246binary_subscr.10, loop_hafnian_batch.py:48)])
DEBUG 2022-01-28 15:49:36,535 on stmt: $250binary_subscr.12 = getitem(value=binoms, index=$248build_tuple.11, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:36,535 on stmt: $binom_prod.2.1741 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=binom_prod.2, rhs=$250binary_subscr.12, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-01-28 15:49:36,535 on stmt: binom_prod.2 = $binom_prod.2.1741
DEBUG 2022-01-28 15:49:36,535 on stmt: jump 495
DEBUG 2022-01-28 15:49:36,535 ==== SSA block rewrite pass on 1021
DEBUG 2022-01-28 15:49:36,535 Running <numba.core.ssa._FreshVarHandler object at 0x000002410CBBCEE0>
DEBUG 2022-01-28 15:49:36,535 on stmt: $450binary_subscr.6 = getitem(value=Hnew, index=$N_det.1393, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:36,535 on stmt: $456binary_multiply.9 = n_det_binom_prod * plus_minus
DEBUG 2022-01-28 15:49:36,535 on stmt: $464binary_floor_divide.13 = N // $const462.12
DEBUG 2022-01-28 15:49:36,535 on stmt: $466binary_subscr.14 = getitem(value=f_even, index=$464binary_floor_divide.13, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:36,535 on stmt: $468binary_multiply.15 = $456binary_multiply.9 * $466binary_subscr.14
DEBUG 2022-01-28 15:49:36,535 on stmt: $470inplace_add.16 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$450binary_subscr.6, rhs=$468binary_multiply.15, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-01-28 15:49:36,535 on stmt: Hnew[$N_det.1393] = $470inplace_add.16
DEBUG 2022-01-28 15:49:36,535 on stmt: jump 1062
DEBUG 2022-01-28 15:49:36,535 ==== SSA block rewrite pass on 1060
DEBUG 2022-01-28 15:49:36,535 Running <numba.core.ssa._FreshVarHandler object at 0x000002410CBBCEE0>
DEBUG 2022-01-28 15:49:36,535 on stmt: $484binary_subscr.6 = getitem(value=Hnew, index=$N_det.1393, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:36,535 on stmt: $490binary_multiply.9 = n_det_binom_prod * plus_minus
DEBUG 2022-01-28 15:49:36,535 on stmt: $496binary_subscr.12 = getitem(value=f_odd, index=N, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:36,535 on stmt: $498binary_multiply.13 = $490binary_multiply.9 * $496binary_subscr.12
DEBUG 2022-01-28 15:49:36,535 on stmt: $500inplace_add.14 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$484binary_subscr.6, rhs=$498binary_multiply.13, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-01-28 15:49:36,535 on stmt: Hnew[$N_det.1393] = $500inplace_add.14
DEBUG 2022-01-28 15:49:36,535 on stmt: jump 1062
DEBUG 2022-01-28 15:49:36,535 ==== SSA block rewrite pass on 631
DEBUG 2022-01-28 15:49:36,535 Running <numba.core.ssa._FreshVarHandler object at 0x000002410CBBCEE0>
DEBUG 2022-01-28 15:49:36,535 on stmt: delta.2.2 = phi(incoming_values=[Var(delta.2, loop_hafnian_batch.py:55), Var(delta.2.1, loop_hafnian_batch.py:51)], incoming_blocks=[593, 591])
DEBUG 2022-01-28 15:49:36,535 on stmt: $292call_function.6 = call $282load_global.1(delta.2.2, A, D, oddV, func=$282load_global.1, args=[Var(delta.2.2, loop_hafnian_batch.py:55), Var(A, loop_hafnian_batch.py:24), Var(D, loop_hafnian_batch.py:24), Var(oddV, loop_hafnian_batch.py:25)], kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:36,535 on stmt: $294unpack_sequence.11 = exhaust_iter(value=$292call_function.6, count=4)
DEBUG 2022-01-28 15:49:36,535 on stmt: $AX_S.1389 = static_getitem(value=$294unpack_sequence.11, index=0, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:36,535 on stmt: $XD_S.1388 = static_getitem(value=$294unpack_sequence.11, index=1, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:36,535 on stmt: $D_S.1390 = static_getitem(value=$294unpack_sequence.11, index=2, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:36,535 on stmt: $oddVX_S.1387 = static_getitem(value=$294unpack_sequence.11, index=3, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:36,535 on stmt: E = call $304load_global.12($AX_S.1389, func=$304load_global.12, args=[Var($AX_S.1389, loop_hafnian_batch.py:55)], kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:36,535 on stmt: f_even = call $312load_global.15(E, $AX_S.1389, $XD_S.1388, $D_S.1390, N__max, func=$312load_global.15, args=[Var(E, loop_hafnian_batch.py:57), Var($AX_S.1389, loop_hafnian_batch.py:55), Var($XD_S.1388, loop_hafnian_batch.py:55), Var($D_S.1390, loop_hafnian_batch.py:55), Var(N__max, loop_hafnian_batch.py:30)], kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:36,535 on stmt: f_odd = call $328load_global.22(E, $AX_S.1389, $XD_S.1388, $D_S.1390, N__max, oddloop, $oddVX_S.1387, func=$328load_global.22, args=[Var(E, loop_hafnian_batch.py:57), Var($AX_S.1389, loop_hafnian_batch.py:55), Var($XD_S.1388, loop_hafnian_batch.py:55), Var($D_S.1390, loop_hafnian_batch.py:55), Var(N__max, loop_hafnian_batch.py:30), Var(oddloop, loop_hafnian_batch.py:24), Var($oddVX_S.1387, loop_hafnian_batch.py:55)], kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:36,535 on stmt: $356binary_subscr.35 = static_getitem(value=kept_edges, index=0, index_var=$const354.34, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:36,535 on stmt: $358binary_multiply.36 = $const350.32 * $356binary_subscr.35
DEBUG 2022-01-28 15:49:36,535 on stmt: $374call_function.44 = call $348load_global.31($358binary_multiply.36, $372binary_add.43, func=$348load_global.31, args=[Var($358binary_multiply.36, loop_hafnian_batch.py:64), Var($372binary_add.43, loop_hafnian_batch.py:64)], kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:36,535 on stmt: $376get_iter.45 = getiter(value=$374call_function.44)
DEBUG 2022-01-28 15:49:36,535 on stmt: jump 1003
DEBUG 2022-01-28 15:49:36,535 ==== SSA block rewrite pass on 1003
DEBUG 2022-01-28 15:49:36,535 Running <numba.core.ssa._FreshVarHandler object at 0x000002410CBBCEE0>
DEBUG 2022-01-28 15:49:36,535 on stmt: $378for_iter.2 = iternext(value=$376get_iter.45)
DEBUG 2022-01-28 15:49:36,535 on stmt: $N_det.1393 = pair_first(value=$378for_iter.2)
DEBUG 2022-01-28 15:49:36,535 on stmt: $378for_iter.4 = pair_second(value=$378for_iter.2)
DEBUG 2022-01-28 15:49:36,535 on stmt: branch $378for_iter.4, 1005, 1078
DEBUG 2022-01-28 15:49:36,535 ==== SSA block rewrite pass on 577
DEBUG 2022-01-28 15:49:36,543 Running <numba.core.ssa._FreshVarHandler object at 0x000002410CBBCEE0>
DEBUG 2022-01-28 15:49:36,543 on stmt: $260pred = call bool260(glynn, func=bool260, args=(Var(glynn, loop_hafnian_batch.py:24),), kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:36,543 on stmt: branch $260pred, 591, 593
DEBUG 2022-01-28 15:49:36,543 ==== SSA block rewrite pass on 591
DEBUG 2022-01-28 15:49:36,543 Running <numba.core.ssa._FreshVarHandler object at 0x000002410CBBCEE0>
DEBUG 2022-01-28 15:49:36,543 on stmt: ret.1311 = call assert.1310(msg.1309, kept_edges_size0.1307, edge__reps__size0_1299, func=assert.1310, args=[Var(msg.1309, loop_hafnian_batch.py:51), Var(kept_edges_size0.1307, loop_hafnian_batch.py:43), Var(edge__reps__size0_1299, loop_hafnian_batch.py:32)], kws={}, vararg=None, target=None)
DEBUG 2022-01-28 15:49:36,543 on stmt: id=14[LoopNest(index_variable = parfor_index.1352, range = (0, edge__reps__size0_1299, 1))]{1223: <ir.Block at C:\Users\zl4821\PycharmProjects\GBS\gbs\loop_hafnian_batch.py (51)>}Var(parfor_index.1352, loop_hafnian_batch.py:51)
DEBUG 2022-01-28 15:49:36,543 on stmt: delta.2.1 = delta
DEBUG 2022-01-28 15:49:36,543 on stmt: jump 631
DEBUG 2022-01-28 15:49:36,543 ==== SSA block rewrite pass on 1117
DEBUG 2022-01-28 15:49:36,543 Running <numba.core.ssa._FreshVarHandler object at 0x000002410CBBCEE0>
DEBUG 2022-01-28 15:49:36,543 on stmt: jump 40
DEBUG 2022-01-28 15:49:36,543 Replaced assignments: defaultdict(<class 'list'>,
            {0: [<numba.core.ir.Assign object at 0x000002410CBBCF40>],
             1078: [<numba.core.ir.Assign object at 0x000002410CBBC580>]})
DEBUG 2022-01-28 15:49:36,543 ==== SSA block rewrite pass on 0
DEBUG 2022-01-28 15:49:36,543 Running <numba.core.ssa._FixSSAVars object at 0x000002410CBBCEE0>
DEBUG 2022-01-28 15:49:36,543 on stmt: sched.1973 = arg(0, name=sched)
DEBUG 2022-01-28 15:49:36,543 on stmt: _136binary__add_59 = arg(1, name=_136binary__add_59)
DEBUG 2022-01-28 15:49:36,543 on stmt: A = arg(2, name=A)
DEBUG 2022-01-28 15:49:36,543 on stmt: D = arg(3, name=D)
DEBUG 2022-01-28 15:49:36,543 on stmt: N__fixed = arg(4, name=N__fixed)
DEBUG 2022-01-28 15:49:36,543 on stmt: N__max = arg(5, name=N__max)
DEBUG 2022-01-28 15:49:36,545 on stmt: batch__max = arg(6, name=batch__max)
DEBUG 2022-01-28 15:49:36,545 on stmt: binoms = arg(7, name=binoms)
DEBUG 2022-01-28 15:49:36,545 on stmt: edge__reps = arg(8, name=edge__reps)
DEBUG 2022-01-28 15:49:36,545 on stmt: edge__reps__size0_1299 = arg(9, name=edge__reps__size0_1299)
DEBUG 2022-01-28 15:49:36,545 on stmt: glynn = arg(10, name=glynn)
DEBUG 2022-01-28 15:49:36,545 on stmt: n = arg(11, name=n)
DEBUG 2022-01-28 15:49:36,545 on stmt: oddV = arg(12, name=oddV)
DEBUG 2022-01-28 15:49:36,545 on stmt: odd__cutoff = arg(13, name=odd__cutoff)
DEBUG 2022-01-28 15:49:36,545 on stmt: oddloop = arg(14, name=oddloop)
DEBUG 2022-01-28 15:49:36,545 on stmt: H__batch_2__arr = arg(15, name=H__batch_2__arr)
DEBUG 2022-01-28 15:49:36,545 on stmt: $2load_global.0.1974 = global(np: <module 'numpy' from 'C:\\Users\\zl4821\\Anaconda3\\envs\\GBS\\lib\\site-packages\\numpy\\__init__.py'>)
DEBUG 2022-01-28 15:49:36,545 on stmt: $4load_method.1.1975 = getattr(value=$2load_global.0.1974, attr=copy)
DEBUG 2022-01-28 15:49:36,545 on stmt: H__batch_2 = call $4load_method.1.1975(H__batch_2__arr, func=$4load_method.1.1975, args=[Var(H__batch_2__arr, <string>:2)], kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:36,545 on stmt: $12load_global.4.1976 = global(range: <class 'range'>)
DEBUG 2022-01-28 15:49:36,545 on stmt: $const16.6.1977 = const(int, 0)
DEBUG 2022-01-28 15:49:36,545 on stmt: $18binary_subscr.7.1978 = getitem(value=sched.1973, index=$const16.6.1977, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:36,545 on stmt: $const22.9.1979 = const(int, 1)
DEBUG 2022-01-28 15:49:36,545 on stmt: $24binary_subscr.10.1980 = getitem(value=sched.1973, index=$const22.9.1979, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:36,545 on stmt: $26load_global.11.1981 = global(np: <module 'numpy' from 'C:\\Users\\zl4821\\Anaconda3\\envs\\GBS\\lib\\site-packages\\numpy\\__init__.py'>)
DEBUG 2022-01-28 15:49:36,545 on stmt: $28load_method.12.1982 = getattr(value=$26load_global.11.1981, attr=uint8)
DEBUG 2022-01-28 15:49:36,545 on stmt: $const30.13.1983 = const(int, 1)
DEBUG 2022-01-28 15:49:36,545 on stmt: $32call_method.14.1984 = call $28load_method.12.1982($const30.13.1983, func=$28load_method.12.1982, args=[Var($const30.13.1983, <string>:3)], kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:36,545 on stmt: $34binary_add.15.1985 = $24binary_subscr.10.1980 + $32call_method.14.1984
DEBUG 2022-01-28 15:49:36,545 on stmt: $36call_function.16.1986 = call $12load_global.4.1976($18binary_subscr.7.1978, $34binary_add.15.1985, func=$12load_global.4.1976, args=[Var($18binary_subscr.7.1978, <string>:3), Var($34binary_add.15.1985, <string>:3)], kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:36,545 on stmt: $38get_iter.17.1987 = getiter(value=$36call_function.16.1986)
DEBUG 2022-01-28 15:49:36,545 on stmt: $phi40.0.1988 = $38get_iter.17.1987
DEBUG 2022-01-28 15:49:36,545 on stmt: $const168.4 = const(int, 2)
DEBUG 2022-01-28 15:49:36,545 on stmt: $172binary_multiply.6 = $const168.4 * batch__max
DEBUG 2022-01-28 15:49:36,545 on stmt: $176binary_add.8 = $172binary_multiply.6 + odd__cutoff
DEBUG 2022-01-28 15:49:36,545 on stmt: $const178.9 = const(int, 1)
DEBUG 2022-01-28 15:49:36,545 on stmt: $180binary_add.10 = $176binary_add.8 + $const178.9
DEBUG 2022-01-28 15:49:36,545 on stmt: $192load_global.15 = global(find_kept_edges: CPUDispatcher(<function find_kept_edges at 0x0000024107424550>))
DEBUG 2022-01-28 15:49:36,545 on stmt: $np_g_var.1348 = global(np: <module 'numpy' from 'C:\\Users\\zl4821\\Anaconda3\\envs\\GBS\\lib\\site-packages\\numpy\\__init__.py'>)
DEBUG 2022-01-28 15:49:36,545 on stmt: $empty_attr_attr.1349 = getattr(value=$np_g_var.1348, attr=empty)
DEBUG 2022-01-28 15:49:36,545 on stmt: $np_typ_var.1350 = getattr(value=$np_g_var.1348, attr=complex128)
DEBUG 2022-01-28 15:49:36,545 on stmt: Hnew = call $empty_attr_attr.1349($180binary_add.10, $np_typ_var.1350, func=$empty_attr_attr.1349, args=[Var($180binary_add.10, loop_hafnian_batch.py:41), Var($np_typ_var.1350, loop_hafnian_batch.py:41)], kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:36,545 on stmt: binom_prod = const(float, 1.0)
DEBUG 2022-01-28 15:49:36,545 on stmt: $214load_global.23 = global(range: <class 'range'>)
DEBUG 2022-01-28 15:49:36,545 on stmt: $const216.24 = const(int, 1)
DEBUG 2022-01-28 15:49:36,545 on stmt: $const220.26 = const(int, 2)
DEBUG 2022-01-28 15:49:36,545 on stmt: $222binary_floor_divide.27 = n // $const220.26
DEBUG 2022-01-28 15:49:36,545 on stmt: msg.1330 = const(str, Sizes of H_batch.2, Hnew do not match on C:\Users\zl4821\PycharmProjects\GBS\gbs\loop_hafnian_batch.py (75))
DEBUG 2022-01-28 15:49:36,545 on stmt: assert.1331 = global(assert_equiv: <intrinsic assert_equiv>)
DEBUG 2022-01-28 15:49:36,545 on stmt: $const390.6 = const(float, -1.0)
DEBUG 2022-01-28 15:49:36,545 on stmt: $const394.8 = const(int, 2)
DEBUG 2022-01-28 15:49:36,545 on stmt: $const410.15 = const(int, 2)
DEBUG 2022-01-28 15:49:36,545 on stmt: $const416.18 = const(int, 0)
DEBUG 2022-01-28 15:49:36,545 on stmt: $const432.25 = const(int, 2)
DEBUG 2022-01-28 15:49:36,545 on stmt: $const436.27 = const(int, 0)
DEBUG 2022-01-28 15:49:36,545 on stmt: bool440 = global(bool: <class 'bool'>)
DEBUG 2022-01-28 15:49:36,545 on stmt: $const462.12 = const(int, 2)
DEBUG 2022-01-28 15:49:36,545 on stmt: $282load_global.1 = global(get_submatrices: CPUDispatcher(<function get_submatrices at 0x0000024107424E50>))
DEBUG 2022-01-28 15:49:36,545 on stmt: $304load_global.12 = global(eigvals: CPUDispatcher(<function eigvals at 0x00000241074303A0>))
DEBUG 2022-01-28 15:49:36,545 on stmt: $312load_global.15 = global(f_loop: CPUDispatcher(<function f_loop at 0x00000241074248B0>))
DEBUG 2022-01-28 15:49:36,545 on stmt: $328load_global.22 = global(f_loop_odd: CPUDispatcher(<function f_loop_odd at 0x0000024107424AF0>))
DEBUG 2022-01-28 15:49:36,545 on stmt: $348load_global.31 = global(range: <class 'range'>)
DEBUG 2022-01-28 15:49:36,545 on stmt: $const350.32 = const(int, 2)
DEBUG 2022-01-28 15:49:36,545 on stmt: $const354.34 = const(int, 0)
DEBUG 2022-01-28 15:49:36,545 on stmt: $const360.37 = const(int, 2)
DEBUG 2022-01-28 15:49:36,545 on stmt: $364binary_multiply.39 = $const360.37 * batch__max
DEBUG 2022-01-28 15:49:36,545 on stmt: $368binary_add.41 = $364binary_multiply.39 + odd__cutoff
DEBUG 2022-01-28 15:49:36,545 on stmt: $const370.42 = const(int, 1)
DEBUG 2022-01-28 15:49:36,545 on stmt: $372binary_add.43 = $368binary_add.41 + $const370.42
DEBUG 2022-01-28 15:49:36,545 on stmt: bool260 = global(bool: <class 'bool'>)
DEBUG 2022-01-28 15:49:36,545 on stmt: msg.1309 = const(str, Sizes of kept_edges, edge_reps do not match on C:\Users\zl4821\PycharmProjects\GBS\gbs\loop_hafnian_batch.py (51))
DEBUG 2022-01-28 15:49:36,545 on stmt: assert.1310 = global(assert_equiv: <intrinsic assert_equiv>)
DEBUG 2022-01-28 15:49:36,545 on stmt: $np_g_var.1353 = global(np: <module 'numpy' from 'C:\\Users\\zl4821\\Anaconda3\\envs\\GBS\\lib\\site-packages\\numpy\\__init__.py'>)
DEBUG 2022-01-28 15:49:36,545 on stmt: $empty_attr_attr.1354 = getattr(value=$np_g_var.1353, attr=empty)
DEBUG 2022-01-28 15:49:36,545 on stmt: $np_typ_var.1355 = getattr(value=$np_g_var.1353, attr=int64)
DEBUG 2022-01-28 15:49:36,545 on stmt: delta = call $empty_attr_attr.1354(edge__reps__size0_1299, $np_typ_var.1355, func=$empty_attr_attr.1354, args=[Var(edge__reps__size0_1299, loop_hafnian_batch.py:32), Var($np_typ_var.1355, loop_hafnian_batch.py:51)], kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:36,545 on stmt: jump 40
DEBUG 2022-01-28 15:49:36,545 ==== SSA block rewrite pass on 40
DEBUG 2022-01-28 15:49:36,545 Running <numba.core.ssa._FixSSAVars object at 0x000002410CBBCEE0>
DEBUG 2022-01-28 15:49:36,545 on stmt: $40for_iter.1.1989 = iternext(value=$phi40.0.1988)
DEBUG 2022-01-28 15:49:36,545 on stmt: $40for_iter.2.1990 = pair_first(value=$40for_iter.1.1989)
DEBUG 2022-01-28 15:49:36,545 on stmt: $40for_iter.3.1991 = pair_second(value=$40for_iter.1.1989)
DEBUG 2022-01-28 15:49:36,545 on stmt: $phi42.1.1992 = $40for_iter.2.1990
DEBUG 2022-01-28 15:49:36,545 on stmt: branch $40for_iter.3.1991, 42, 1224
DEBUG 2022-01-28 15:49:36,545 ==== SSA block rewrite pass on 42
DEBUG 2022-01-28 15:49:36,545 Running <numba.core.ssa._FixSSAVars object at 0x000002410CBBCEE0>
DEBUG 2022-01-28 15:49:36,545 on stmt: parfor__index_1369 = $phi42.1.1992
DEBUG 2022-01-28 15:49:36,545 on stmt: jump 50
DEBUG 2022-01-28 15:49:36,545 ==== SSA block rewrite pass on 1224
DEBUG 2022-01-28 15:49:36,545 Running <numba.core.ssa._FixSSAVars object at 0x000002410CBBCEE0>
DEBUG 2022-01-28 15:49:36,545 on stmt: $const52.1.1993 = const(NoneType, None)
DEBUG 2022-01-28 15:49:36,545 on stmt: $const54.2.1994 = const(NoneType, None)
DEBUG 2022-01-28 15:49:36,545 on stmt: $56build_slice.3.1995 = global(slice: <class 'slice'>)
DEBUG 2022-01-28 15:49:36,545 on stmt: $56build_slice.4.1996 = call $56build_slice.3.1995($const52.1.1993, $const54.2.1994, func=$56build_slice.3.1995, args=(Var($const52.1.1993, <string>:5), Var($const54.2.1994, <string>:5)), kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:36,545 on stmt: $58binary_subscr.5.1997 = getitem(value=H__batch_2, index=$56build_slice.4.1996, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:36,545 find_def var='H__batch_2' stmt=$58binary_subscr.5.1997 = getitem(value=H__batch_2, index=$56build_slice.4.1996, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:36,545 find_def_from_top label 1224
DEBUG 2022-01-28 15:49:36,545 idom 40 from label 1224
DEBUG 2022-01-28 15:49:36,545 find_def_from_bottom label 40
DEBUG 2022-01-28 15:49:36,545 find_def_from_top label 40
DEBUG 2022-01-28 15:49:36,545 insert phi node H__batch_2.2 = phi(incoming_values=[], incoming_blocks=[]) at 40
DEBUG 2022-01-28 15:49:36,554 find_def_from_bottom label 0
DEBUG 2022-01-28 15:49:36,554 incoming_def H__batch_2 = call $4load_method.1.1975(H__batch_2__arr, func=$4load_method.1.1975, args=[Var(H__batch_2__arr, <string>:2)], kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:36,554 find_def_from_bottom label 1117
DEBUG 2022-01-28 15:49:36,554 find_def_from_top label 1117
DEBUG 2022-01-28 15:49:36,554 idom 1078 from label 1117
DEBUG 2022-01-28 15:49:36,554 find_def_from_bottom label 1078
DEBUG 2022-01-28 15:49:36,554 incoming_def H__batch_2.1 = $H_batch.2.1740
DEBUG 2022-01-28 15:49:36,554 replaced with: $58binary_subscr.5.1997 = getitem(value=H__batch_2.2, index=$56build_slice.4.1996, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:36,554 on stmt: $const62.7.1998 = const(NoneType, None)
DEBUG 2022-01-28 15:49:36,554 on stmt: $const64.8.1999 = const(NoneType, None)
DEBUG 2022-01-28 15:49:36,554 on stmt: $66build_slice.9.2000 = global(slice: <class 'slice'>)
DEBUG 2022-01-28 15:49:36,554 on stmt: $66build_slice.10.2001 = call $66build_slice.9.2000($const62.7.1998, $const64.8.1999, func=$66build_slice.9.2000, args=(Var($const62.7.1998, <string>:5), Var($const64.8.1999, <string>:5)), kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:36,554 on stmt: H__batch_2__arr[$66build_slice.10.2001] = $58binary_subscr.5.1997
DEBUG 2022-01-28 15:49:36,554 on stmt: $const70.11.2002 = const(NoneType, None)
DEBUG 2022-01-28 15:49:36,554 on stmt: $72return_value.12.2003 = cast(value=$const70.11.2002)
DEBUG 2022-01-28 15:49:36,554 on stmt: return $72return_value.12.2003
DEBUG 2022-01-28 15:49:36,554 ==== SSA block rewrite pass on 1062
DEBUG 2022-01-28 15:49:36,554 Running <numba.core.ssa._FixSSAVars object at 0x000002410CBBCEE0>
DEBUG 2022-01-28 15:49:36,556 on stmt: jump 1003
DEBUG 2022-01-28 15:49:36,556 ==== SSA block rewrite pass on 50
DEBUG 2022-01-28 15:49:36,556 Running <numba.core.ssa._FixSSAVars object at 0x000002410CBBCEE0>
DEBUG 2022-01-28 15:49:36,556 on stmt: j = parfor__index_1369
DEBUG 2022-01-28 15:49:36,556 on stmt: id=13[LoopNest(index_variable = parfor_index.1347, range = (0, $180binary_add.10, 1))]{1222: <ir.Block at C:\Users\zl4821\PycharmProjects\GBS\gbs\loop_hafnian_batch.py (41)>}Var(parfor_index.1347, loop_hafnian_batch.py:41)
DEBUG 2022-01-28 15:49:36,556 on stmt: kept_edges = call $192load_global.15(j, edge__reps, func=$192load_global.15, args=[Var(j, loop_hafnian_batch.py:39), Var(edge__reps, loop_hafnian_batch.py:32)], kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:36,556 on stmt: kept_edges_shape.1306 = getattr(value=kept_edges, attr=shape)
DEBUG 2022-01-28 15:49:36,556 on stmt: kept_edges_size0.1307 = static_getitem(value=kept_edges_shape.1306, index=0, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:36,556 on stmt: binom_prod.2 = binom_prod
DEBUG 2022-01-28 15:49:36,556 on stmt: id=17[LoopNest(index_variable = parfor_index.1365, range = (0, kept_edges_size0.1307, 1))]{557: <ir.Block at C:\Users\zl4821\Anaconda3\envs\GBS\lib\site-packages\numba\parfors\parfor.py (256)>}Var(parfor_index.1365, parfor.py:256)
DEBUG 2022-01-28 15:49:36,556 on stmt: $224call_function.28 = call $214load_global.23($const216.24, $222binary_floor_divide.27, func=$214load_global.23, args=[Var($const216.24, loop_hafnian_batch.py:47), Var($222binary_floor_divide.27, loop_hafnian_batch.py:47)], kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:36,556 on stmt: $226get_iter.29 = getiter(value=$224call_function.28)
DEBUG 2022-01-28 15:49:36,556 on stmt: jump 495
DEBUG 2022-01-28 15:49:36,556 ==== SSA block rewrite pass on 593
DEBUG 2022-01-28 15:49:36,556 Running <numba.core.ssa._FixSSAVars object at 0x000002410CBBCEE0>
DEBUG 2022-01-28 15:49:36,556 on stmt: delta.2 = kept_edges
DEBUG 2022-01-28 15:49:36,556 on stmt: jump 631
DEBUG 2022-01-28 15:49:36,556 ==== SSA block rewrite pass on 495
DEBUG 2022-01-28 15:49:36,556 Running <numba.core.ssa._FixSSAVars object at 0x000002410CBBCEE0>
DEBUG 2022-01-28 15:49:36,556 on stmt: $228for_iter.2 = iternext(value=$226get_iter.29)
DEBUG 2022-01-28 15:49:36,556 on stmt: $i.1394 = pair_first(value=$228for_iter.2)
DEBUG 2022-01-28 15:49:36,556 on stmt: $228for_iter.4 = pair_second(value=$228for_iter.2)
DEBUG 2022-01-28 15:49:36,556 on stmt: branch $228for_iter.4, 571, 577
DEBUG 2022-01-28 15:49:36,556 ==== SSA block rewrite pass on 1078
DEBUG 2022-01-28 15:49:36,556 Running <numba.core.ssa._FixSSAVars object at 0x000002410CBBCEE0>
DEBUG 2022-01-28 15:49:36,556 on stmt: ret.1332 = call assert.1331(msg.1330, _136binary__add_59, $180binary_add.10, func=assert.1331, args=[Var(msg.1330, loop_hafnian_batch.py:75), Var(_136binary__add_59, loop_hafnian_batch.py:38), Var($180binary_add.10, loop_hafnian_batch.py:41)], kws={}, vararg=None, target=None)
DEBUG 2022-01-28 15:49:36,556 on stmt: $H_batch.2.1740 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=H__batch_2, rhs=Hnew, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-01-28 15:49:36,556 find_def var='H__batch_2' stmt=$H_batch.2.1740 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=H__batch_2, rhs=Hnew, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-01-28 15:49:36,556 find_def_from_top label 1078
DEBUG 2022-01-28 15:49:36,556 idom 1003 from label 1078
DEBUG 2022-01-28 15:49:36,556 find_def_from_bottom label 1003
DEBUG 2022-01-28 15:49:36,556 find_def_from_top label 1003
DEBUG 2022-01-28 15:49:36,556 idom 631 from label 1003
DEBUG 2022-01-28 15:49:36,556 find_def_from_bottom label 631
DEBUG 2022-01-28 15:49:36,556 find_def_from_top label 631
DEBUG 2022-01-28 15:49:36,556 idom 577 from label 631
DEBUG 2022-01-28 15:49:36,556 find_def_from_bottom label 577
DEBUG 2022-01-28 15:49:36,556 find_def_from_top label 577
DEBUG 2022-01-28 15:49:36,556 idom 495 from label 577
DEBUG 2022-01-28 15:49:36,556 find_def_from_bottom label 495
DEBUG 2022-01-28 15:49:36,556 find_def_from_top label 495
DEBUG 2022-01-28 15:49:36,556 idom 50 from label 495
DEBUG 2022-01-28 15:49:36,556 find_def_from_bottom label 50
DEBUG 2022-01-28 15:49:36,556 find_def_from_top label 50
DEBUG 2022-01-28 15:49:36,556 idom 42 from label 50
DEBUG 2022-01-28 15:49:36,556 find_def_from_bottom label 42
DEBUG 2022-01-28 15:49:36,556 find_def_from_top label 42
DEBUG 2022-01-28 15:49:36,556 idom 40 from label 42
DEBUG 2022-01-28 15:49:36,556 find_def_from_bottom label 40
DEBUG 2022-01-28 15:49:36,556 replaced with: $H_batch.2.1740 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=H__batch_2.2, rhs=Hnew, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-01-28 15:49:36,556 on stmt: H__batch_2.1 = $H_batch.2.1740
DEBUG 2022-01-28 15:49:36,556 on stmt: jump 1117
DEBUG 2022-01-28 15:49:36,556 ==== SSA block rewrite pass on 1005
DEBUG 2022-01-28 15:49:36,556 Running <numba.core.ssa._FixSSAVars object at 0x000002410CBBCEE0>
DEBUG 2022-01-28 15:49:36,556 on stmt: N = N__fixed + $N_det.1393
DEBUG 2022-01-28 15:49:36,556 on stmt: $396binary_floor_divide.9 = N // $const394.8
DEBUG 2022-01-28 15:49:36,556 on stmt: $400binary_subtract.11 = $396binary_floor_divide.9 - val.1149
DEBUG 2022-01-28 15:49:36,556 on stmt: plus_minus = $const390.6 ** $400binary_subtract.11
DEBUG 2022-01-28 15:49:36,556 on stmt: $412binary_floor_divide.16 = $N_det.1393 // $const410.15
DEBUG 2022-01-28 15:49:36,556 on stmt: $418binary_subscr.19 = static_getitem(value=kept_edges, index=0, index_var=$const416.18, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:36,556 on stmt: $420build_tuple.20 = build_tuple(items=[Var($412binary_floor_divide.16, loop_hafnian_batch.py:68), Var($418binary_subscr.19, loop_hafnian_batch.py:68)])
DEBUG 2022-01-28 15:49:36,556 on stmt: $422binary_subscr.21 = getitem(value=binoms, index=$420build_tuple.20, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:36,556 on stmt: n_det_binom_prod = $422binary_subscr.21 * binom_prod.2
DEBUG 2022-01-28 15:49:36,556 on stmt: $434binary_modulo.26 = $N_det.1393 % $const432.25
DEBUG 2022-01-28 15:49:36,556 on stmt: $438compare_op.28 = $434binary_modulo.26 == $const436.27
DEBUG 2022-01-28 15:49:36,556 on stmt: $440pred = call bool440($438compare_op.28, func=bool440, args=(Var($438compare_op.28, loop_hafnian_batch.py:70),), kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:36,556 on stmt: branch $440pred, 1021, 1060
DEBUG 2022-01-28 15:49:36,556 ==== SSA block rewrite pass on 571
DEBUG 2022-01-28 15:49:36,556 Running <numba.core.ssa._FixSSAVars object at 0x000002410CBBCEE0>
DEBUG 2022-01-28 15:49:36,556 on stmt: $240binary_subscr.7 = getitem(value=edge__reps, index=$i.1394, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:36,556 on stmt: $246binary_subscr.10 = getitem(value=kept_edges, index=$i.1394, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:36,556 on stmt: $248build_tuple.11 = build_tuple(items=[Var($240binary_subscr.7, loop_hafnian_batch.py:48), Var($246binary_subscr.10, loop_hafnian_batch.py:48)])
DEBUG 2022-01-28 15:49:36,556 on stmt: $250binary_subscr.12 = getitem(value=binoms, index=$248build_tuple.11, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:36,556 on stmt: $binom_prod.2.1741 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=binom_prod.2, rhs=$250binary_subscr.12, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-01-28 15:49:36,556 on stmt: binom_prod.2 = $binom_prod.2.1741
DEBUG 2022-01-28 15:49:36,556 on stmt: jump 495
DEBUG 2022-01-28 15:49:36,556 ==== SSA block rewrite pass on 1021
DEBUG 2022-01-28 15:49:36,556 Running <numba.core.ssa._FixSSAVars object at 0x000002410CBBCEE0>
DEBUG 2022-01-28 15:49:36,556 on stmt: $450binary_subscr.6 = getitem(value=Hnew, index=$N_det.1393, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:36,556 on stmt: $456binary_multiply.9 = n_det_binom_prod * plus_minus
DEBUG 2022-01-28 15:49:36,556 on stmt: $464binary_floor_divide.13 = N // $const462.12
DEBUG 2022-01-28 15:49:36,556 on stmt: $466binary_subscr.14 = getitem(value=f_even, index=$464binary_floor_divide.13, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:36,556 on stmt: $468binary_multiply.15 = $456binary_multiply.9 * $466binary_subscr.14
DEBUG 2022-01-28 15:49:36,556 on stmt: $470inplace_add.16 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$450binary_subscr.6, rhs=$468binary_multiply.15, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-01-28 15:49:36,556 on stmt: Hnew[$N_det.1393] = $470inplace_add.16
DEBUG 2022-01-28 15:49:36,556 on stmt: jump 1062
DEBUG 2022-01-28 15:49:36,556 ==== SSA block rewrite pass on 1060
DEBUG 2022-01-28 15:49:36,556 Running <numba.core.ssa._FixSSAVars object at 0x000002410CBBCEE0>
DEBUG 2022-01-28 15:49:36,556 on stmt: $484binary_subscr.6 = getitem(value=Hnew, index=$N_det.1393, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:36,556 on stmt: $490binary_multiply.9 = n_det_binom_prod * plus_minus
DEBUG 2022-01-28 15:49:36,556 on stmt: $496binary_subscr.12 = getitem(value=f_odd, index=N, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:36,556 on stmt: $498binary_multiply.13 = $490binary_multiply.9 * $496binary_subscr.12
DEBUG 2022-01-28 15:49:36,556 on stmt: $500inplace_add.14 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$484binary_subscr.6, rhs=$498binary_multiply.13, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-01-28 15:49:36,556 on stmt: Hnew[$N_det.1393] = $500inplace_add.14
DEBUG 2022-01-28 15:49:36,556 on stmt: jump 1062
DEBUG 2022-01-28 15:49:36,556 ==== SSA block rewrite pass on 631
DEBUG 2022-01-28 15:49:36,556 Running <numba.core.ssa._FixSSAVars object at 0x000002410CBBCEE0>
DEBUG 2022-01-28 15:49:36,556 on stmt: delta.2.2 = phi(incoming_values=[Var(delta.2, loop_hafnian_batch.py:55), Var(delta.2.1, loop_hafnian_batch.py:51)], incoming_blocks=[593, 591])
DEBUG 2022-01-28 15:49:36,556 on stmt: $292call_function.6 = call $282load_global.1(delta.2.2, A, D, oddV, func=$282load_global.1, args=[Var(delta.2.2, loop_hafnian_batch.py:55), Var(A, loop_hafnian_batch.py:24), Var(D, loop_hafnian_batch.py:24), Var(oddV, loop_hafnian_batch.py:25)], kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:36,556 on stmt: $294unpack_sequence.11 = exhaust_iter(value=$292call_function.6, count=4)
DEBUG 2022-01-28 15:49:36,556 on stmt: $AX_S.1389 = static_getitem(value=$294unpack_sequence.11, index=0, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:36,556 on stmt: $XD_S.1388 = static_getitem(value=$294unpack_sequence.11, index=1, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:36,564 on stmt: $D_S.1390 = static_getitem(value=$294unpack_sequence.11, index=2, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:36,564 on stmt: $oddVX_S.1387 = static_getitem(value=$294unpack_sequence.11, index=3, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:36,564 on stmt: E = call $304load_global.12($AX_S.1389, func=$304load_global.12, args=[Var($AX_S.1389, loop_hafnian_batch.py:55)], kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:36,564 on stmt: f_even = call $312load_global.15(E, $AX_S.1389, $XD_S.1388, $D_S.1390, N__max, func=$312load_global.15, args=[Var(E, loop_hafnian_batch.py:57), Var($AX_S.1389, loop_hafnian_batch.py:55), Var($XD_S.1388, loop_hafnian_batch.py:55), Var($D_S.1390, loop_hafnian_batch.py:55), Var(N__max, loop_hafnian_batch.py:30)], kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:36,564 on stmt: f_odd = call $328load_global.22(E, $AX_S.1389, $XD_S.1388, $D_S.1390, N__max, oddloop, $oddVX_S.1387, func=$328load_global.22, args=[Var(E, loop_hafnian_batch.py:57), Var($AX_S.1389, loop_hafnian_batch.py:55), Var($XD_S.1388, loop_hafnian_batch.py:55), Var($D_S.1390, loop_hafnian_batch.py:55), Var(N__max, loop_hafnian_batch.py:30), Var(oddloop, loop_hafnian_batch.py:24), Var($oddVX_S.1387, loop_hafnian_batch.py:55)], kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:36,564 on stmt: $356binary_subscr.35 = static_getitem(value=kept_edges, index=0, index_var=$const354.34, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:36,564 on stmt: $358binary_multiply.36 = $const350.32 * $356binary_subscr.35
DEBUG 2022-01-28 15:49:36,564 on stmt: $374call_function.44 = call $348load_global.31($358binary_multiply.36, $372binary_add.43, func=$348load_global.31, args=[Var($358binary_multiply.36, loop_hafnian_batch.py:64), Var($372binary_add.43, loop_hafnian_batch.py:64)], kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:36,564 on stmt: $376get_iter.45 = getiter(value=$374call_function.44)
DEBUG 2022-01-28 15:49:36,564 on stmt: jump 1003
DEBUG 2022-01-28 15:49:36,564 ==== SSA block rewrite pass on 1003
DEBUG 2022-01-28 15:49:36,564 Running <numba.core.ssa._FixSSAVars object at 0x000002410CBBCEE0>
DEBUG 2022-01-28 15:49:36,564 on stmt: $378for_iter.2 = iternext(value=$376get_iter.45)
DEBUG 2022-01-28 15:49:36,564 on stmt: $N_det.1393 = pair_first(value=$378for_iter.2)
DEBUG 2022-01-28 15:49:36,564 on stmt: $378for_iter.4 = pair_second(value=$378for_iter.2)
DEBUG 2022-01-28 15:49:36,564 on stmt: branch $378for_iter.4, 1005, 1078
DEBUG 2022-01-28 15:49:36,564 ==== SSA block rewrite pass on 577
DEBUG 2022-01-28 15:49:36,564 Running <numba.core.ssa._FixSSAVars object at 0x000002410CBBCEE0>
DEBUG 2022-01-28 15:49:36,564 on stmt: $260pred = call bool260(glynn, func=bool260, args=(Var(glynn, loop_hafnian_batch.py:24),), kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:36,564 on stmt: branch $260pred, 591, 593
DEBUG 2022-01-28 15:49:36,564 ==== SSA block rewrite pass on 591
DEBUG 2022-01-28 15:49:36,564 Running <numba.core.ssa._FixSSAVars object at 0x000002410CBBCEE0>
DEBUG 2022-01-28 15:49:36,564 on stmt: ret.1311 = call assert.1310(msg.1309, kept_edges_size0.1307, edge__reps__size0_1299, func=assert.1310, args=[Var(msg.1309, loop_hafnian_batch.py:51), Var(kept_edges_size0.1307, loop_hafnian_batch.py:43), Var(edge__reps__size0_1299, loop_hafnian_batch.py:32)], kws={}, vararg=None, target=None)
DEBUG 2022-01-28 15:49:36,566 on stmt: id=14[LoopNest(index_variable = parfor_index.1352, range = (0, edge__reps__size0_1299, 1))]{1223: <ir.Block at C:\Users\zl4821\PycharmProjects\GBS\gbs\loop_hafnian_batch.py (51)>}Var(parfor_index.1352, loop_hafnian_batch.py:51)
DEBUG 2022-01-28 15:49:36,566 on stmt: delta.2.1 = delta
DEBUG 2022-01-28 15:49:36,566 on stmt: jump 631
DEBUG 2022-01-28 15:49:36,566 ==== SSA block rewrite pass on 1117
DEBUG 2022-01-28 15:49:36,566 Running <numba.core.ssa._FixSSAVars object at 0x000002410CBBCEE0>
DEBUG 2022-01-28 15:49:36,566 on stmt: jump 40
DEBUG 2022-01-28 15:49:36,566 Fix SSA violator on var binom_prod.2
DEBUG 2022-01-28 15:49:36,566 ==== SSA block rewrite pass on 0
DEBUG 2022-01-28 15:49:36,566 Running <numba.core.ssa._FreshVarHandler object at 0x000002410CBBCC40>
DEBUG 2022-01-28 15:49:36,566 on stmt: sched.1973 = arg(0, name=sched)
DEBUG 2022-01-28 15:49:36,566 on stmt: _136binary__add_59 = arg(1, name=_136binary__add_59)
DEBUG 2022-01-28 15:49:36,566 on stmt: A = arg(2, name=A)
DEBUG 2022-01-28 15:49:36,566 on stmt: D = arg(3, name=D)
DEBUG 2022-01-28 15:49:36,566 on stmt: N__fixed = arg(4, name=N__fixed)
DEBUG 2022-01-28 15:49:36,566 on stmt: N__max = arg(5, name=N__max)
DEBUG 2022-01-28 15:49:36,566 on stmt: batch__max = arg(6, name=batch__max)
DEBUG 2022-01-28 15:49:36,566 on stmt: binoms = arg(7, name=binoms)
DEBUG 2022-01-28 15:49:36,566 on stmt: edge__reps = arg(8, name=edge__reps)
DEBUG 2022-01-28 15:49:36,566 on stmt: edge__reps__size0_1299 = arg(9, name=edge__reps__size0_1299)
DEBUG 2022-01-28 15:49:36,566 on stmt: glynn = arg(10, name=glynn)
DEBUG 2022-01-28 15:49:36,566 on stmt: n = arg(11, name=n)
DEBUG 2022-01-28 15:49:36,566 on stmt: oddV = arg(12, name=oddV)
DEBUG 2022-01-28 15:49:36,566 on stmt: odd__cutoff = arg(13, name=odd__cutoff)
DEBUG 2022-01-28 15:49:36,566 on stmt: oddloop = arg(14, name=oddloop)
DEBUG 2022-01-28 15:49:36,566 on stmt: H__batch_2__arr = arg(15, name=H__batch_2__arr)
DEBUG 2022-01-28 15:49:36,566 on stmt: $2load_global.0.1974 = global(np: <module 'numpy' from 'C:\\Users\\zl4821\\Anaconda3\\envs\\GBS\\lib\\site-packages\\numpy\\__init__.py'>)
DEBUG 2022-01-28 15:49:36,566 on stmt: $4load_method.1.1975 = getattr(value=$2load_global.0.1974, attr=copy)
DEBUG 2022-01-28 15:49:36,566 on stmt: H__batch_2 = call $4load_method.1.1975(H__batch_2__arr, func=$4load_method.1.1975, args=[Var(H__batch_2__arr, <string>:2)], kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:36,566 on stmt: $12load_global.4.1976 = global(range: <class 'range'>)
DEBUG 2022-01-28 15:49:36,566 on stmt: $const16.6.1977 = const(int, 0)
DEBUG 2022-01-28 15:49:36,566 on stmt: $18binary_subscr.7.1978 = getitem(value=sched.1973, index=$const16.6.1977, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:36,566 on stmt: $const22.9.1979 = const(int, 1)
DEBUG 2022-01-28 15:49:36,566 on stmt: $24binary_subscr.10.1980 = getitem(value=sched.1973, index=$const22.9.1979, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:36,566 on stmt: $26load_global.11.1981 = global(np: <module 'numpy' from 'C:\\Users\\zl4821\\Anaconda3\\envs\\GBS\\lib\\site-packages\\numpy\\__init__.py'>)
DEBUG 2022-01-28 15:49:36,566 on stmt: $28load_method.12.1982 = getattr(value=$26load_global.11.1981, attr=uint8)
DEBUG 2022-01-28 15:49:36,566 on stmt: $const30.13.1983 = const(int, 1)
DEBUG 2022-01-28 15:49:36,566 on stmt: $32call_method.14.1984 = call $28load_method.12.1982($const30.13.1983, func=$28load_method.12.1982, args=[Var($const30.13.1983, <string>:3)], kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:36,566 on stmt: $34binary_add.15.1985 = $24binary_subscr.10.1980 + $32call_method.14.1984
DEBUG 2022-01-28 15:49:36,566 on stmt: $36call_function.16.1986 = call $12load_global.4.1976($18binary_subscr.7.1978, $34binary_add.15.1985, func=$12load_global.4.1976, args=[Var($18binary_subscr.7.1978, <string>:3), Var($34binary_add.15.1985, <string>:3)], kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:36,566 on stmt: $38get_iter.17.1987 = getiter(value=$36call_function.16.1986)
DEBUG 2022-01-28 15:49:36,566 on stmt: $phi40.0.1988 = $38get_iter.17.1987
DEBUG 2022-01-28 15:49:36,566 on stmt: $const168.4 = const(int, 2)
DEBUG 2022-01-28 15:49:36,566 on stmt: $172binary_multiply.6 = $const168.4 * batch__max
DEBUG 2022-01-28 15:49:36,566 on stmt: $176binary_add.8 = $172binary_multiply.6 + odd__cutoff
DEBUG 2022-01-28 15:49:36,566 on stmt: $const178.9 = const(int, 1)
DEBUG 2022-01-28 15:49:36,566 on stmt: $180binary_add.10 = $176binary_add.8 + $const178.9
DEBUG 2022-01-28 15:49:36,566 on stmt: $192load_global.15 = global(find_kept_edges: CPUDispatcher(<function find_kept_edges at 0x0000024107424550>))
DEBUG 2022-01-28 15:49:36,566 on stmt: $np_g_var.1348 = global(np: <module 'numpy' from 'C:\\Users\\zl4821\\Anaconda3\\envs\\GBS\\lib\\site-packages\\numpy\\__init__.py'>)
DEBUG 2022-01-28 15:49:36,566 on stmt: $empty_attr_attr.1349 = getattr(value=$np_g_var.1348, attr=empty)
DEBUG 2022-01-28 15:49:36,566 on stmt: $np_typ_var.1350 = getattr(value=$np_g_var.1348, attr=complex128)
DEBUG 2022-01-28 15:49:36,566 on stmt: Hnew = call $empty_attr_attr.1349($180binary_add.10, $np_typ_var.1350, func=$empty_attr_attr.1349, args=[Var($180binary_add.10, loop_hafnian_batch.py:41), Var($np_typ_var.1350, loop_hafnian_batch.py:41)], kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:36,566 on stmt: binom_prod = const(float, 1.0)
DEBUG 2022-01-28 15:49:36,566 on stmt: $214load_global.23 = global(range: <class 'range'>)
DEBUG 2022-01-28 15:49:36,566 on stmt: $const216.24 = const(int, 1)
DEBUG 2022-01-28 15:49:36,566 on stmt: $const220.26 = const(int, 2)
DEBUG 2022-01-28 15:49:36,566 on stmt: $222binary_floor_divide.27 = n // $const220.26
DEBUG 2022-01-28 15:49:36,566 on stmt: msg.1330 = const(str, Sizes of H_batch.2, Hnew do not match on C:\Users\zl4821\PycharmProjects\GBS\gbs\loop_hafnian_batch.py (75))
DEBUG 2022-01-28 15:49:36,566 on stmt: assert.1331 = global(assert_equiv: <intrinsic assert_equiv>)
DEBUG 2022-01-28 15:49:36,566 on stmt: $const390.6 = const(float, -1.0)
DEBUG 2022-01-28 15:49:36,566 on stmt: $const394.8 = const(int, 2)
DEBUG 2022-01-28 15:49:36,566 on stmt: $const410.15 = const(int, 2)
DEBUG 2022-01-28 15:49:36,566 on stmt: $const416.18 = const(int, 0)
DEBUG 2022-01-28 15:49:36,566 on stmt: $const432.25 = const(int, 2)
DEBUG 2022-01-28 15:49:36,566 on stmt: $const436.27 = const(int, 0)
DEBUG 2022-01-28 15:49:36,566 on stmt: bool440 = global(bool: <class 'bool'>)
DEBUG 2022-01-28 15:49:36,566 on stmt: $const462.12 = const(int, 2)
DEBUG 2022-01-28 15:49:36,566 on stmt: $282load_global.1 = global(get_submatrices: CPUDispatcher(<function get_submatrices at 0x0000024107424E50>))
DEBUG 2022-01-28 15:49:36,566 on stmt: $304load_global.12 = global(eigvals: CPUDispatcher(<function eigvals at 0x00000241074303A0>))
DEBUG 2022-01-28 15:49:36,566 on stmt: $312load_global.15 = global(f_loop: CPUDispatcher(<function f_loop at 0x00000241074248B0>))
DEBUG 2022-01-28 15:49:36,566 on stmt: $328load_global.22 = global(f_loop_odd: CPUDispatcher(<function f_loop_odd at 0x0000024107424AF0>))
DEBUG 2022-01-28 15:49:36,566 on stmt: $348load_global.31 = global(range: <class 'range'>)
DEBUG 2022-01-28 15:49:36,566 on stmt: $const350.32 = const(int, 2)
DEBUG 2022-01-28 15:49:36,566 on stmt: $const354.34 = const(int, 0)
DEBUG 2022-01-28 15:49:36,566 on stmt: $const360.37 = const(int, 2)
DEBUG 2022-01-28 15:49:36,566 on stmt: $364binary_multiply.39 = $const360.37 * batch__max
DEBUG 2022-01-28 15:49:36,566 on stmt: $368binary_add.41 = $364binary_multiply.39 + odd__cutoff
DEBUG 2022-01-28 15:49:36,566 on stmt: $const370.42 = const(int, 1)
DEBUG 2022-01-28 15:49:36,566 on stmt: $372binary_add.43 = $368binary_add.41 + $const370.42
DEBUG 2022-01-28 15:49:36,566 on stmt: bool260 = global(bool: <class 'bool'>)
DEBUG 2022-01-28 15:49:36,566 on stmt: msg.1309 = const(str, Sizes of kept_edges, edge_reps do not match on C:\Users\zl4821\PycharmProjects\GBS\gbs\loop_hafnian_batch.py (51))
DEBUG 2022-01-28 15:49:36,566 on stmt: assert.1310 = global(assert_equiv: <intrinsic assert_equiv>)
DEBUG 2022-01-28 15:49:36,566 on stmt: $np_g_var.1353 = global(np: <module 'numpy' from 'C:\\Users\\zl4821\\Anaconda3\\envs\\GBS\\lib\\site-packages\\numpy\\__init__.py'>)
DEBUG 2022-01-28 15:49:36,566 on stmt: $empty_attr_attr.1354 = getattr(value=$np_g_var.1353, attr=empty)
DEBUG 2022-01-28 15:49:36,566 on stmt: $np_typ_var.1355 = getattr(value=$np_g_var.1353, attr=int64)
DEBUG 2022-01-28 15:49:36,566 on stmt: delta = call $empty_attr_attr.1354(edge__reps__size0_1299, $np_typ_var.1355, func=$empty_attr_attr.1354, args=[Var(edge__reps__size0_1299, loop_hafnian_batch.py:32), Var($np_typ_var.1355, loop_hafnian_batch.py:51)], kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:36,566 on stmt: jump 40
DEBUG 2022-01-28 15:49:36,566 ==== SSA block rewrite pass on 40
DEBUG 2022-01-28 15:49:36,566 Running <numba.core.ssa._FreshVarHandler object at 0x000002410CBBCC40>
DEBUG 2022-01-28 15:49:36,566 on stmt: H__batch_2.2 = phi(incoming_values=[Var(H__batch_2, <string>:2), Var(H__batch_2.1, loop_hafnian_batch.py:75)], incoming_blocks=[0, 1117])
DEBUG 2022-01-28 15:49:36,566 on stmt: $40for_iter.1.1989 = iternext(value=$phi40.0.1988)
DEBUG 2022-01-28 15:49:36,566 on stmt: $40for_iter.2.1990 = pair_first(value=$40for_iter.1.1989)
DEBUG 2022-01-28 15:49:36,566 on stmt: $40for_iter.3.1991 = pair_second(value=$40for_iter.1.1989)
DEBUG 2022-01-28 15:49:36,574 on stmt: $phi42.1.1992 = $40for_iter.2.1990
DEBUG 2022-01-28 15:49:36,574 on stmt: branch $40for_iter.3.1991, 42, 1224
DEBUG 2022-01-28 15:49:36,574 ==== SSA block rewrite pass on 42
DEBUG 2022-01-28 15:49:36,574 Running <numba.core.ssa._FreshVarHandler object at 0x000002410CBBCC40>
DEBUG 2022-01-28 15:49:36,574 on stmt: parfor__index_1369 = $phi42.1.1992
DEBUG 2022-01-28 15:49:36,574 on stmt: jump 50
DEBUG 2022-01-28 15:49:36,574 ==== SSA block rewrite pass on 1224
DEBUG 2022-01-28 15:49:36,574 Running <numba.core.ssa._FreshVarHandler object at 0x000002410CBBCC40>
DEBUG 2022-01-28 15:49:36,574 on stmt: $const52.1.1993 = const(NoneType, None)
DEBUG 2022-01-28 15:49:36,574 on stmt: $const54.2.1994 = const(NoneType, None)
DEBUG 2022-01-28 15:49:36,574 on stmt: $56build_slice.3.1995 = global(slice: <class 'slice'>)
DEBUG 2022-01-28 15:49:36,574 on stmt: $56build_slice.4.1996 = call $56build_slice.3.1995($const52.1.1993, $const54.2.1994, func=$56build_slice.3.1995, args=(Var($const52.1.1993, <string>:5), Var($const54.2.1994, <string>:5)), kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:36,574 on stmt: $58binary_subscr.5.1997 = getitem(value=H__batch_2.2, index=$56build_slice.4.1996, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:36,574 on stmt: $const62.7.1998 = const(NoneType, None)
DEBUG 2022-01-28 15:49:36,574 on stmt: $const64.8.1999 = const(NoneType, None)
DEBUG 2022-01-28 15:49:36,574 on stmt: $66build_slice.9.2000 = global(slice: <class 'slice'>)
DEBUG 2022-01-28 15:49:36,574 on stmt: $66build_slice.10.2001 = call $66build_slice.9.2000($const62.7.1998, $const64.8.1999, func=$66build_slice.9.2000, args=(Var($const62.7.1998, <string>:5), Var($const64.8.1999, <string>:5)), kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:36,574 on stmt: H__batch_2__arr[$66build_slice.10.2001] = $58binary_subscr.5.1997
DEBUG 2022-01-28 15:49:36,574 on stmt: $const70.11.2002 = const(NoneType, None)
DEBUG 2022-01-28 15:49:36,574 on stmt: $72return_value.12.2003 = cast(value=$const70.11.2002)
DEBUG 2022-01-28 15:49:36,574 on stmt: return $72return_value.12.2003
DEBUG 2022-01-28 15:49:36,574 ==== SSA block rewrite pass on 1062
DEBUG 2022-01-28 15:49:36,576 Running <numba.core.ssa._FreshVarHandler object at 0x000002410CBBCC40>
DEBUG 2022-01-28 15:49:36,576 on stmt: jump 1003
DEBUG 2022-01-28 15:49:36,576 ==== SSA block rewrite pass on 50
DEBUG 2022-01-28 15:49:36,576 Running <numba.core.ssa._FreshVarHandler object at 0x000002410CBBCC40>
DEBUG 2022-01-28 15:49:36,576 on stmt: j = parfor__index_1369
DEBUG 2022-01-28 15:49:36,576 on stmt: id=13[LoopNest(index_variable = parfor_index.1347, range = (0, $180binary_add.10, 1))]{1222: <ir.Block at C:\Users\zl4821\PycharmProjects\GBS\gbs\loop_hafnian_batch.py (41)>}Var(parfor_index.1347, loop_hafnian_batch.py:41)
DEBUG 2022-01-28 15:49:36,576 on stmt: kept_edges = call $192load_global.15(j, edge__reps, func=$192load_global.15, args=[Var(j, loop_hafnian_batch.py:39), Var(edge__reps, loop_hafnian_batch.py:32)], kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:36,576 on stmt: kept_edges_shape.1306 = getattr(value=kept_edges, attr=shape)
DEBUG 2022-01-28 15:49:36,576 on stmt: kept_edges_size0.1307 = static_getitem(value=kept_edges_shape.1306, index=0, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:36,576 on stmt: binom_prod.2 = binom_prod
DEBUG 2022-01-28 15:49:36,576 first assign: binom_prod.2
DEBUG 2022-01-28 15:49:36,576 replaced with: binom_prod.2 = binom_prod
DEBUG 2022-01-28 15:49:36,576 on stmt: id=17[LoopNest(index_variable = parfor_index.1365, range = (0, kept_edges_size0.1307, 1))]{557: <ir.Block at C:\Users\zl4821\Anaconda3\envs\GBS\lib\site-packages\numba\parfors\parfor.py (256)>}Var(parfor_index.1365, parfor.py:256)
DEBUG 2022-01-28 15:49:36,576 on stmt: $224call_function.28 = call $214load_global.23($const216.24, $222binary_floor_divide.27, func=$214load_global.23, args=[Var($const216.24, loop_hafnian_batch.py:47), Var($222binary_floor_divide.27, loop_hafnian_batch.py:47)], kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:36,576 on stmt: $226get_iter.29 = getiter(value=$224call_function.28)
DEBUG 2022-01-28 15:49:36,576 on stmt: jump 495
DEBUG 2022-01-28 15:49:36,576 ==== SSA block rewrite pass on 593
DEBUG 2022-01-28 15:49:36,576 Running <numba.core.ssa._FreshVarHandler object at 0x000002410CBBCC40>
DEBUG 2022-01-28 15:49:36,576 on stmt: delta.2 = kept_edges
DEBUG 2022-01-28 15:49:36,576 on stmt: jump 631
DEBUG 2022-01-28 15:49:36,576 ==== SSA block rewrite pass on 495
DEBUG 2022-01-28 15:49:36,576 Running <numba.core.ssa._FreshVarHandler object at 0x000002410CBBCC40>
DEBUG 2022-01-28 15:49:36,576 on stmt: $228for_iter.2 = iternext(value=$226get_iter.29)
DEBUG 2022-01-28 15:49:36,576 on stmt: $i.1394 = pair_first(value=$228for_iter.2)
DEBUG 2022-01-28 15:49:36,576 on stmt: $228for_iter.4 = pair_second(value=$228for_iter.2)
DEBUG 2022-01-28 15:49:36,576 on stmt: branch $228for_iter.4, 571, 577
DEBUG 2022-01-28 15:49:36,576 ==== SSA block rewrite pass on 1078
DEBUG 2022-01-28 15:49:36,576 Running <numba.core.ssa._FreshVarHandler object at 0x000002410CBBCC40>
DEBUG 2022-01-28 15:49:36,576 on stmt: ret.1332 = call assert.1331(msg.1330, _136binary__add_59, $180binary_add.10, func=assert.1331, args=[Var(msg.1330, loop_hafnian_batch.py:75), Var(_136binary__add_59, loop_hafnian_batch.py:38), Var($180binary_add.10, loop_hafnian_batch.py:41)], kws={}, vararg=None, target=None)
DEBUG 2022-01-28 15:49:36,576 on stmt: $H_batch.2.1740 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=H__batch_2.2, rhs=Hnew, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-01-28 15:49:36,576 on stmt: H__batch_2.1 = $H_batch.2.1740
DEBUG 2022-01-28 15:49:36,576 on stmt: jump 1117
DEBUG 2022-01-28 15:49:36,576 ==== SSA block rewrite pass on 1005
DEBUG 2022-01-28 15:49:36,576 Running <numba.core.ssa._FreshVarHandler object at 0x000002410CBBCC40>
DEBUG 2022-01-28 15:49:36,576 on stmt: N = N__fixed + $N_det.1393
DEBUG 2022-01-28 15:49:36,576 on stmt: $396binary_floor_divide.9 = N // $const394.8
DEBUG 2022-01-28 15:49:36,576 on stmt: $400binary_subtract.11 = $396binary_floor_divide.9 - val.1149
DEBUG 2022-01-28 15:49:36,576 on stmt: plus_minus = $const390.6 ** $400binary_subtract.11
DEBUG 2022-01-28 15:49:36,576 on stmt: $412binary_floor_divide.16 = $N_det.1393 // $const410.15
DEBUG 2022-01-28 15:49:36,576 on stmt: $418binary_subscr.19 = static_getitem(value=kept_edges, index=0, index_var=$const416.18, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:36,576 on stmt: $420build_tuple.20 = build_tuple(items=[Var($412binary_floor_divide.16, loop_hafnian_batch.py:68), Var($418binary_subscr.19, loop_hafnian_batch.py:68)])
DEBUG 2022-01-28 15:49:36,576 on stmt: $422binary_subscr.21 = getitem(value=binoms, index=$420build_tuple.20, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:36,576 on stmt: n_det_binom_prod = $422binary_subscr.21 * binom_prod.2
DEBUG 2022-01-28 15:49:36,576 on stmt: $434binary_modulo.26 = $N_det.1393 % $const432.25
DEBUG 2022-01-28 15:49:36,576 on stmt: $438compare_op.28 = $434binary_modulo.26 == $const436.27
DEBUG 2022-01-28 15:49:36,576 on stmt: $440pred = call bool440($438compare_op.28, func=bool440, args=(Var($438compare_op.28, loop_hafnian_batch.py:70),), kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:36,576 on stmt: branch $440pred, 1021, 1060
DEBUG 2022-01-28 15:49:36,576 ==== SSA block rewrite pass on 571
DEBUG 2022-01-28 15:49:36,576 Running <numba.core.ssa._FreshVarHandler object at 0x000002410CBBCC40>
DEBUG 2022-01-28 15:49:36,576 on stmt: $240binary_subscr.7 = getitem(value=edge__reps, index=$i.1394, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:36,576 on stmt: $246binary_subscr.10 = getitem(value=kept_edges, index=$i.1394, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:36,576 on stmt: $248build_tuple.11 = build_tuple(items=[Var($240binary_subscr.7, loop_hafnian_batch.py:48), Var($246binary_subscr.10, loop_hafnian_batch.py:48)])
DEBUG 2022-01-28 15:49:36,576 on stmt: $250binary_subscr.12 = getitem(value=binoms, index=$248build_tuple.11, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:36,576 on stmt: $binom_prod.2.1741 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=binom_prod.2, rhs=$250binary_subscr.12, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-01-28 15:49:36,576 on stmt: binom_prod.2 = $binom_prod.2.1741
DEBUG 2022-01-28 15:49:36,576 replaced with: binom_prod.2.1 = $binom_prod.2.1741
DEBUG 2022-01-28 15:49:36,576 on stmt: jump 495
DEBUG 2022-01-28 15:49:36,576 ==== SSA block rewrite pass on 1021
DEBUG 2022-01-28 15:49:36,576 Running <numba.core.ssa._FreshVarHandler object at 0x000002410CBBCC40>
DEBUG 2022-01-28 15:49:36,576 on stmt: $450binary_subscr.6 = getitem(value=Hnew, index=$N_det.1393, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:36,576 on stmt: $456binary_multiply.9 = n_det_binom_prod * plus_minus
DEBUG 2022-01-28 15:49:36,576 on stmt: $464binary_floor_divide.13 = N // $const462.12
DEBUG 2022-01-28 15:49:36,576 on stmt: $466binary_subscr.14 = getitem(value=f_even, index=$464binary_floor_divide.13, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:36,576 on stmt: $468binary_multiply.15 = $456binary_multiply.9 * $466binary_subscr.14
DEBUG 2022-01-28 15:49:36,576 on stmt: $470inplace_add.16 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$450binary_subscr.6, rhs=$468binary_multiply.15, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-01-28 15:49:36,576 on stmt: Hnew[$N_det.1393] = $470inplace_add.16
DEBUG 2022-01-28 15:49:36,576 on stmt: jump 1062
DEBUG 2022-01-28 15:49:36,576 ==== SSA block rewrite pass on 1060
DEBUG 2022-01-28 15:49:36,576 Running <numba.core.ssa._FreshVarHandler object at 0x000002410CBBCC40>
DEBUG 2022-01-28 15:49:36,576 on stmt: $484binary_subscr.6 = getitem(value=Hnew, index=$N_det.1393, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:36,576 on stmt: $490binary_multiply.9 = n_det_binom_prod * plus_minus
DEBUG 2022-01-28 15:49:36,576 on stmt: $496binary_subscr.12 = getitem(value=f_odd, index=N, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:36,576 on stmt: $498binary_multiply.13 = $490binary_multiply.9 * $496binary_subscr.12
DEBUG 2022-01-28 15:49:36,576 on stmt: $500inplace_add.14 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$484binary_subscr.6, rhs=$498binary_multiply.13, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-01-28 15:49:36,576 on stmt: Hnew[$N_det.1393] = $500inplace_add.14
DEBUG 2022-01-28 15:49:36,576 on stmt: jump 1062
DEBUG 2022-01-28 15:49:36,576 ==== SSA block rewrite pass on 631
DEBUG 2022-01-28 15:49:36,576 Running <numba.core.ssa._FreshVarHandler object at 0x000002410CBBCC40>
DEBUG 2022-01-28 15:49:36,576 on stmt: delta.2.2 = phi(incoming_values=[Var(delta.2, loop_hafnian_batch.py:55), Var(delta.2.1, loop_hafnian_batch.py:51)], incoming_blocks=[593, 591])
DEBUG 2022-01-28 15:49:36,576 on stmt: $292call_function.6 = call $282load_global.1(delta.2.2, A, D, oddV, func=$282load_global.1, args=[Var(delta.2.2, loop_hafnian_batch.py:55), Var(A, loop_hafnian_batch.py:24), Var(D, loop_hafnian_batch.py:24), Var(oddV, loop_hafnian_batch.py:25)], kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:36,576 on stmt: $294unpack_sequence.11 = exhaust_iter(value=$292call_function.6, count=4)
DEBUG 2022-01-28 15:49:36,576 on stmt: $AX_S.1389 = static_getitem(value=$294unpack_sequence.11, index=0, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:36,576 on stmt: $XD_S.1388 = static_getitem(value=$294unpack_sequence.11, index=1, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:36,576 on stmt: $D_S.1390 = static_getitem(value=$294unpack_sequence.11, index=2, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:36,584 on stmt: $oddVX_S.1387 = static_getitem(value=$294unpack_sequence.11, index=3, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:36,584 on stmt: E = call $304load_global.12($AX_S.1389, func=$304load_global.12, args=[Var($AX_S.1389, loop_hafnian_batch.py:55)], kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:36,584 on stmt: f_even = call $312load_global.15(E, $AX_S.1389, $XD_S.1388, $D_S.1390, N__max, func=$312load_global.15, args=[Var(E, loop_hafnian_batch.py:57), Var($AX_S.1389, loop_hafnian_batch.py:55), Var($XD_S.1388, loop_hafnian_batch.py:55), Var($D_S.1390, loop_hafnian_batch.py:55), Var(N__max, loop_hafnian_batch.py:30)], kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:36,584 on stmt: f_odd = call $328load_global.22(E, $AX_S.1389, $XD_S.1388, $D_S.1390, N__max, oddloop, $oddVX_S.1387, func=$328load_global.22, args=[Var(E, loop_hafnian_batch.py:57), Var($AX_S.1389, loop_hafnian_batch.py:55), Var($XD_S.1388, loop_hafnian_batch.py:55), Var($D_S.1390, loop_hafnian_batch.py:55), Var(N__max, loop_hafnian_batch.py:30), Var(oddloop, loop_hafnian_batch.py:24), Var($oddVX_S.1387, loop_hafnian_batch.py:55)], kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:36,584 on stmt: $356binary_subscr.35 = static_getitem(value=kept_edges, index=0, index_var=$const354.34, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:36,584 on stmt: $358binary_multiply.36 = $const350.32 * $356binary_subscr.35
DEBUG 2022-01-28 15:49:36,584 on stmt: $374call_function.44 = call $348load_global.31($358binary_multiply.36, $372binary_add.43, func=$348load_global.31, args=[Var($358binary_multiply.36, loop_hafnian_batch.py:64), Var($372binary_add.43, loop_hafnian_batch.py:64)], kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:36,584 on stmt: $376get_iter.45 = getiter(value=$374call_function.44)
DEBUG 2022-01-28 15:49:36,584 on stmt: jump 1003
DEBUG 2022-01-28 15:49:36,584 ==== SSA block rewrite pass on 1003
DEBUG 2022-01-28 15:49:36,584 Running <numba.core.ssa._FreshVarHandler object at 0x000002410CBBCC40>
DEBUG 2022-01-28 15:49:36,584 on stmt: $378for_iter.2 = iternext(value=$376get_iter.45)
DEBUG 2022-01-28 15:49:36,584 on stmt: $N_det.1393 = pair_first(value=$378for_iter.2)
DEBUG 2022-01-28 15:49:36,584 on stmt: $378for_iter.4 = pair_second(value=$378for_iter.2)
DEBUG 2022-01-28 15:49:36,584 on stmt: branch $378for_iter.4, 1005, 1078
DEBUG 2022-01-28 15:49:36,584 ==== SSA block rewrite pass on 577
DEBUG 2022-01-28 15:49:36,584 Running <numba.core.ssa._FreshVarHandler object at 0x000002410CBBCC40>
DEBUG 2022-01-28 15:49:36,584 on stmt: $260pred = call bool260(glynn, func=bool260, args=(Var(glynn, loop_hafnian_batch.py:24),), kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:36,586 on stmt: branch $260pred, 591, 593
DEBUG 2022-01-28 15:49:36,586 ==== SSA block rewrite pass on 591
DEBUG 2022-01-28 15:49:36,586 Running <numba.core.ssa._FreshVarHandler object at 0x000002410CBBCC40>
DEBUG 2022-01-28 15:49:36,586 on stmt: ret.1311 = call assert.1310(msg.1309, kept_edges_size0.1307, edge__reps__size0_1299, func=assert.1310, args=[Var(msg.1309, loop_hafnian_batch.py:51), Var(kept_edges_size0.1307, loop_hafnian_batch.py:43), Var(edge__reps__size0_1299, loop_hafnian_batch.py:32)], kws={}, vararg=None, target=None)
DEBUG 2022-01-28 15:49:36,586 on stmt: id=14[LoopNest(index_variable = parfor_index.1352, range = (0, edge__reps__size0_1299, 1))]{1223: <ir.Block at C:\Users\zl4821\PycharmProjects\GBS\gbs\loop_hafnian_batch.py (51)>}Var(parfor_index.1352, loop_hafnian_batch.py:51)
DEBUG 2022-01-28 15:49:36,586 on stmt: delta.2.1 = delta
DEBUG 2022-01-28 15:49:36,586 on stmt: jump 631
DEBUG 2022-01-28 15:49:36,586 ==== SSA block rewrite pass on 1117
DEBUG 2022-01-28 15:49:36,586 Running <numba.core.ssa._FreshVarHandler object at 0x000002410CBBCC40>
DEBUG 2022-01-28 15:49:36,586 on stmt: jump 40
DEBUG 2022-01-28 15:49:36,586 Replaced assignments: defaultdict(<class 'list'>,
            {50: [<numba.core.ir.Assign object at 0x000002410CBBCFA0>],
             571: [<numba.core.ir.Assign object at 0x000002410CBBCCD0>]})
DEBUG 2022-01-28 15:49:36,586 ==== SSA block rewrite pass on 0
DEBUG 2022-01-28 15:49:36,586 Running <numba.core.ssa._FixSSAVars object at 0x000002410D028E80>
DEBUG 2022-01-28 15:49:36,586 on stmt: sched.1973 = arg(0, name=sched)
DEBUG 2022-01-28 15:49:36,586 on stmt: _136binary__add_59 = arg(1, name=_136binary__add_59)
DEBUG 2022-01-28 15:49:36,586 on stmt: A = arg(2, name=A)
DEBUG 2022-01-28 15:49:36,586 on stmt: D = arg(3, name=D)
DEBUG 2022-01-28 15:49:36,586 on stmt: N__fixed = arg(4, name=N__fixed)
DEBUG 2022-01-28 15:49:36,586 on stmt: N__max = arg(5, name=N__max)
DEBUG 2022-01-28 15:49:36,586 on stmt: batch__max = arg(6, name=batch__max)
DEBUG 2022-01-28 15:49:36,586 on stmt: binoms = arg(7, name=binoms)
DEBUG 2022-01-28 15:49:36,586 on stmt: edge__reps = arg(8, name=edge__reps)
DEBUG 2022-01-28 15:49:36,586 on stmt: edge__reps__size0_1299 = arg(9, name=edge__reps__size0_1299)
DEBUG 2022-01-28 15:49:36,586 on stmt: glynn = arg(10, name=glynn)
DEBUG 2022-01-28 15:49:36,586 on stmt: n = arg(11, name=n)
DEBUG 2022-01-28 15:49:36,586 on stmt: oddV = arg(12, name=oddV)
DEBUG 2022-01-28 15:49:36,586 on stmt: odd__cutoff = arg(13, name=odd__cutoff)
DEBUG 2022-01-28 15:49:36,586 on stmt: oddloop = arg(14, name=oddloop)
DEBUG 2022-01-28 15:49:36,586 on stmt: H__batch_2__arr = arg(15, name=H__batch_2__arr)
DEBUG 2022-01-28 15:49:36,586 on stmt: $2load_global.0.1974 = global(np: <module 'numpy' from 'C:\\Users\\zl4821\\Anaconda3\\envs\\GBS\\lib\\site-packages\\numpy\\__init__.py'>)
DEBUG 2022-01-28 15:49:36,586 on stmt: $4load_method.1.1975 = getattr(value=$2load_global.0.1974, attr=copy)
DEBUG 2022-01-28 15:49:36,586 on stmt: H__batch_2 = call $4load_method.1.1975(H__batch_2__arr, func=$4load_method.1.1975, args=[Var(H__batch_2__arr, <string>:2)], kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:36,586 on stmt: $12load_global.4.1976 = global(range: <class 'range'>)
DEBUG 2022-01-28 15:49:36,586 on stmt: $const16.6.1977 = const(int, 0)
DEBUG 2022-01-28 15:49:36,586 on stmt: $18binary_subscr.7.1978 = getitem(value=sched.1973, index=$const16.6.1977, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:36,586 on stmt: $const22.9.1979 = const(int, 1)
DEBUG 2022-01-28 15:49:36,586 on stmt: $24binary_subscr.10.1980 = getitem(value=sched.1973, index=$const22.9.1979, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:36,586 on stmt: $26load_global.11.1981 = global(np: <module 'numpy' from 'C:\\Users\\zl4821\\Anaconda3\\envs\\GBS\\lib\\site-packages\\numpy\\__init__.py'>)
DEBUG 2022-01-28 15:49:36,586 on stmt: $28load_method.12.1982 = getattr(value=$26load_global.11.1981, attr=uint8)
DEBUG 2022-01-28 15:49:36,586 on stmt: $const30.13.1983 = const(int, 1)
DEBUG 2022-01-28 15:49:36,586 on stmt: $32call_method.14.1984 = call $28load_method.12.1982($const30.13.1983, func=$28load_method.12.1982, args=[Var($const30.13.1983, <string>:3)], kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:36,586 on stmt: $34binary_add.15.1985 = $24binary_subscr.10.1980 + $32call_method.14.1984
DEBUG 2022-01-28 15:49:36,586 on stmt: $36call_function.16.1986 = call $12load_global.4.1976($18binary_subscr.7.1978, $34binary_add.15.1985, func=$12load_global.4.1976, args=[Var($18binary_subscr.7.1978, <string>:3), Var($34binary_add.15.1985, <string>:3)], kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:36,586 on stmt: $38get_iter.17.1987 = getiter(value=$36call_function.16.1986)
DEBUG 2022-01-28 15:49:36,586 on stmt: $phi40.0.1988 = $38get_iter.17.1987
DEBUG 2022-01-28 15:49:36,586 on stmt: $const168.4 = const(int, 2)
DEBUG 2022-01-28 15:49:36,586 on stmt: $172binary_multiply.6 = $const168.4 * batch__max
DEBUG 2022-01-28 15:49:36,586 on stmt: $176binary_add.8 = $172binary_multiply.6 + odd__cutoff
DEBUG 2022-01-28 15:49:36,586 on stmt: $const178.9 = const(int, 1)
DEBUG 2022-01-28 15:49:36,586 on stmt: $180binary_add.10 = $176binary_add.8 + $const178.9
DEBUG 2022-01-28 15:49:36,586 on stmt: $192load_global.15 = global(find_kept_edges: CPUDispatcher(<function find_kept_edges at 0x0000024107424550>))
DEBUG 2022-01-28 15:49:36,586 on stmt: $np_g_var.1348 = global(np: <module 'numpy' from 'C:\\Users\\zl4821\\Anaconda3\\envs\\GBS\\lib\\site-packages\\numpy\\__init__.py'>)
DEBUG 2022-01-28 15:49:36,586 on stmt: $empty_attr_attr.1349 = getattr(value=$np_g_var.1348, attr=empty)
DEBUG 2022-01-28 15:49:36,586 on stmt: $np_typ_var.1350 = getattr(value=$np_g_var.1348, attr=complex128)
DEBUG 2022-01-28 15:49:36,586 on stmt: Hnew = call $empty_attr_attr.1349($180binary_add.10, $np_typ_var.1350, func=$empty_attr_attr.1349, args=[Var($180binary_add.10, loop_hafnian_batch.py:41), Var($np_typ_var.1350, loop_hafnian_batch.py:41)], kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:36,586 on stmt: binom_prod = const(float, 1.0)
DEBUG 2022-01-28 15:49:36,586 on stmt: $214load_global.23 = global(range: <class 'range'>)
DEBUG 2022-01-28 15:49:36,586 on stmt: $const216.24 = const(int, 1)
DEBUG 2022-01-28 15:49:36,586 on stmt: $const220.26 = const(int, 2)
DEBUG 2022-01-28 15:49:36,586 on stmt: $222binary_floor_divide.27 = n // $const220.26
DEBUG 2022-01-28 15:49:36,586 on stmt: msg.1330 = const(str, Sizes of H_batch.2, Hnew do not match on C:\Users\zl4821\PycharmProjects\GBS\gbs\loop_hafnian_batch.py (75))
DEBUG 2022-01-28 15:49:36,586 on stmt: assert.1331 = global(assert_equiv: <intrinsic assert_equiv>)
DEBUG 2022-01-28 15:49:36,586 on stmt: $const390.6 = const(float, -1.0)
DEBUG 2022-01-28 15:49:36,586 on stmt: $const394.8 = const(int, 2)
DEBUG 2022-01-28 15:49:36,586 on stmt: $const410.15 = const(int, 2)
DEBUG 2022-01-28 15:49:36,586 on stmt: $const416.18 = const(int, 0)
DEBUG 2022-01-28 15:49:36,586 on stmt: $const432.25 = const(int, 2)
DEBUG 2022-01-28 15:49:36,586 on stmt: $const436.27 = const(int, 0)
DEBUG 2022-01-28 15:49:36,586 on stmt: bool440 = global(bool: <class 'bool'>)
DEBUG 2022-01-28 15:49:36,586 on stmt: $const462.12 = const(int, 2)
DEBUG 2022-01-28 15:49:36,586 on stmt: $282load_global.1 = global(get_submatrices: CPUDispatcher(<function get_submatrices at 0x0000024107424E50>))
DEBUG 2022-01-28 15:49:36,586 on stmt: $304load_global.12 = global(eigvals: CPUDispatcher(<function eigvals at 0x00000241074303A0>))
DEBUG 2022-01-28 15:49:36,586 on stmt: $312load_global.15 = global(f_loop: CPUDispatcher(<function f_loop at 0x00000241074248B0>))
DEBUG 2022-01-28 15:49:36,586 on stmt: $328load_global.22 = global(f_loop_odd: CPUDispatcher(<function f_loop_odd at 0x0000024107424AF0>))
DEBUG 2022-01-28 15:49:36,586 on stmt: $348load_global.31 = global(range: <class 'range'>)
DEBUG 2022-01-28 15:49:36,586 on stmt: $const350.32 = const(int, 2)
DEBUG 2022-01-28 15:49:36,586 on stmt: $const354.34 = const(int, 0)
DEBUG 2022-01-28 15:49:36,586 on stmt: $const360.37 = const(int, 2)
DEBUG 2022-01-28 15:49:36,586 on stmt: $364binary_multiply.39 = $const360.37 * batch__max
DEBUG 2022-01-28 15:49:36,586 on stmt: $368binary_add.41 = $364binary_multiply.39 + odd__cutoff
DEBUG 2022-01-28 15:49:36,586 on stmt: $const370.42 = const(int, 1)
DEBUG 2022-01-28 15:49:36,586 on stmt: $372binary_add.43 = $368binary_add.41 + $const370.42
DEBUG 2022-01-28 15:49:36,586 on stmt: bool260 = global(bool: <class 'bool'>)
DEBUG 2022-01-28 15:49:36,586 on stmt: msg.1309 = const(str, Sizes of kept_edges, edge_reps do not match on C:\Users\zl4821\PycharmProjects\GBS\gbs\loop_hafnian_batch.py (51))
DEBUG 2022-01-28 15:49:36,586 on stmt: assert.1310 = global(assert_equiv: <intrinsic assert_equiv>)
DEBUG 2022-01-28 15:49:36,586 on stmt: $np_g_var.1353 = global(np: <module 'numpy' from 'C:\\Users\\zl4821\\Anaconda3\\envs\\GBS\\lib\\site-packages\\numpy\\__init__.py'>)
DEBUG 2022-01-28 15:49:36,586 on stmt: $empty_attr_attr.1354 = getattr(value=$np_g_var.1353, attr=empty)
DEBUG 2022-01-28 15:49:36,594 on stmt: $np_typ_var.1355 = getattr(value=$np_g_var.1353, attr=int64)
DEBUG 2022-01-28 15:49:36,594 on stmt: delta = call $empty_attr_attr.1354(edge__reps__size0_1299, $np_typ_var.1355, func=$empty_attr_attr.1354, args=[Var(edge__reps__size0_1299, loop_hafnian_batch.py:32), Var($np_typ_var.1355, loop_hafnian_batch.py:51)], kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:36,594 on stmt: jump 40
DEBUG 2022-01-28 15:49:36,594 ==== SSA block rewrite pass on 40
DEBUG 2022-01-28 15:49:36,594 Running <numba.core.ssa._FixSSAVars object at 0x000002410D028E80>
DEBUG 2022-01-28 15:49:36,594 on stmt: H__batch_2.2 = phi(incoming_values=[Var(H__batch_2, <string>:2), Var(H__batch_2.1, loop_hafnian_batch.py:75)], incoming_blocks=[0, 1117])
DEBUG 2022-01-28 15:49:36,594 on stmt: $40for_iter.1.1989 = iternext(value=$phi40.0.1988)
DEBUG 2022-01-28 15:49:36,594 on stmt: $40for_iter.2.1990 = pair_first(value=$40for_iter.1.1989)
DEBUG 2022-01-28 15:49:36,594 on stmt: $40for_iter.3.1991 = pair_second(value=$40for_iter.1.1989)
DEBUG 2022-01-28 15:49:36,594 on stmt: $phi42.1.1992 = $40for_iter.2.1990
DEBUG 2022-01-28 15:49:36,594 on stmt: branch $40for_iter.3.1991, 42, 1224
DEBUG 2022-01-28 15:49:36,594 ==== SSA block rewrite pass on 42
DEBUG 2022-01-28 15:49:36,594 Running <numba.core.ssa._FixSSAVars object at 0x000002410D028E80>
DEBUG 2022-01-28 15:49:36,594 on stmt: parfor__index_1369 = $phi42.1.1992
DEBUG 2022-01-28 15:49:36,594 on stmt: jump 50
DEBUG 2022-01-28 15:49:36,594 ==== SSA block rewrite pass on 1224
DEBUG 2022-01-28 15:49:36,594 Running <numba.core.ssa._FixSSAVars object at 0x000002410D028E80>
DEBUG 2022-01-28 15:49:36,594 on stmt: $const52.1.1993 = const(NoneType, None)
DEBUG 2022-01-28 15:49:36,594 on stmt: $const54.2.1994 = const(NoneType, None)
DEBUG 2022-01-28 15:49:36,594 on stmt: $56build_slice.3.1995 = global(slice: <class 'slice'>)
DEBUG 2022-01-28 15:49:36,594 on stmt: $56build_slice.4.1996 = call $56build_slice.3.1995($const52.1.1993, $const54.2.1994, func=$56build_slice.3.1995, args=(Var($const52.1.1993, <string>:5), Var($const54.2.1994, <string>:5)), kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:36,596 on stmt: $58binary_subscr.5.1997 = getitem(value=H__batch_2.2, index=$56build_slice.4.1996, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:36,596 on stmt: $const62.7.1998 = const(NoneType, None)
DEBUG 2022-01-28 15:49:36,596 on stmt: $const64.8.1999 = const(NoneType, None)
DEBUG 2022-01-28 15:49:36,596 on stmt: $66build_slice.9.2000 = global(slice: <class 'slice'>)
DEBUG 2022-01-28 15:49:36,596 on stmt: $66build_slice.10.2001 = call $66build_slice.9.2000($const62.7.1998, $const64.8.1999, func=$66build_slice.9.2000, args=(Var($const62.7.1998, <string>:5), Var($const64.8.1999, <string>:5)), kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:36,596 on stmt: H__batch_2__arr[$66build_slice.10.2001] = $58binary_subscr.5.1997
DEBUG 2022-01-28 15:49:36,596 on stmt: $const70.11.2002 = const(NoneType, None)
DEBUG 2022-01-28 15:49:36,596 on stmt: $72return_value.12.2003 = cast(value=$const70.11.2002)
DEBUG 2022-01-28 15:49:36,596 on stmt: return $72return_value.12.2003
DEBUG 2022-01-28 15:49:36,596 ==== SSA block rewrite pass on 1062
DEBUG 2022-01-28 15:49:36,596 Running <numba.core.ssa._FixSSAVars object at 0x000002410D028E80>
DEBUG 2022-01-28 15:49:36,596 on stmt: jump 1003
DEBUG 2022-01-28 15:49:36,596 ==== SSA block rewrite pass on 50
DEBUG 2022-01-28 15:49:36,596 Running <numba.core.ssa._FixSSAVars object at 0x000002410D028E80>
DEBUG 2022-01-28 15:49:36,596 on stmt: j = parfor__index_1369
DEBUG 2022-01-28 15:49:36,596 on stmt: id=13[LoopNest(index_variable = parfor_index.1347, range = (0, $180binary_add.10, 1))]{1222: <ir.Block at C:\Users\zl4821\PycharmProjects\GBS\gbs\loop_hafnian_batch.py (41)>}Var(parfor_index.1347, loop_hafnian_batch.py:41)
DEBUG 2022-01-28 15:49:36,596 on stmt: kept_edges = call $192load_global.15(j, edge__reps, func=$192load_global.15, args=[Var(j, loop_hafnian_batch.py:39), Var(edge__reps, loop_hafnian_batch.py:32)], kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:36,596 on stmt: kept_edges_shape.1306 = getattr(value=kept_edges, attr=shape)
DEBUG 2022-01-28 15:49:36,596 on stmt: kept_edges_size0.1307 = static_getitem(value=kept_edges_shape.1306, index=0, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:36,596 on stmt: binom_prod.2 = binom_prod
DEBUG 2022-01-28 15:49:36,596 on stmt: id=17[LoopNest(index_variable = parfor_index.1365, range = (0, kept_edges_size0.1307, 1))]{557: <ir.Block at C:\Users\zl4821\Anaconda3\envs\GBS\lib\site-packages\numba\parfors\parfor.py (256)>}Var(parfor_index.1365, parfor.py:256)
DEBUG 2022-01-28 15:49:36,596 on stmt: $224call_function.28 = call $214load_global.23($const216.24, $222binary_floor_divide.27, func=$214load_global.23, args=[Var($const216.24, loop_hafnian_batch.py:47), Var($222binary_floor_divide.27, loop_hafnian_batch.py:47)], kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:36,596 on stmt: $226get_iter.29 = getiter(value=$224call_function.28)
DEBUG 2022-01-28 15:49:36,596 on stmt: jump 495
DEBUG 2022-01-28 15:49:36,596 ==== SSA block rewrite pass on 593
DEBUG 2022-01-28 15:49:36,596 Running <numba.core.ssa._FixSSAVars object at 0x000002410D028E80>
DEBUG 2022-01-28 15:49:36,596 on stmt: delta.2 = kept_edges
DEBUG 2022-01-28 15:49:36,596 on stmt: jump 631
DEBUG 2022-01-28 15:49:36,596 ==== SSA block rewrite pass on 495
DEBUG 2022-01-28 15:49:36,596 Running <numba.core.ssa._FixSSAVars object at 0x000002410D028E80>
DEBUG 2022-01-28 15:49:36,596 on stmt: $228for_iter.2 = iternext(value=$226get_iter.29)
DEBUG 2022-01-28 15:49:36,596 on stmt: $i.1394 = pair_first(value=$228for_iter.2)
DEBUG 2022-01-28 15:49:36,596 on stmt: $228for_iter.4 = pair_second(value=$228for_iter.2)
DEBUG 2022-01-28 15:49:36,596 on stmt: branch $228for_iter.4, 571, 577
DEBUG 2022-01-28 15:49:36,596 ==== SSA block rewrite pass on 1078
DEBUG 2022-01-28 15:49:36,596 Running <numba.core.ssa._FixSSAVars object at 0x000002410D028E80>
DEBUG 2022-01-28 15:49:36,596 on stmt: ret.1332 = call assert.1331(msg.1330, _136binary__add_59, $180binary_add.10, func=assert.1331, args=[Var(msg.1330, loop_hafnian_batch.py:75), Var(_136binary__add_59, loop_hafnian_batch.py:38), Var($180binary_add.10, loop_hafnian_batch.py:41)], kws={}, vararg=None, target=None)
DEBUG 2022-01-28 15:49:36,596 on stmt: $H_batch.2.1740 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=H__batch_2.2, rhs=Hnew, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-01-28 15:49:36,596 on stmt: H__batch_2.1 = $H_batch.2.1740
DEBUG 2022-01-28 15:49:36,596 on stmt: jump 1117
DEBUG 2022-01-28 15:49:36,596 ==== SSA block rewrite pass on 1005
DEBUG 2022-01-28 15:49:36,596 Running <numba.core.ssa._FixSSAVars object at 0x000002410D028E80>
DEBUG 2022-01-28 15:49:36,596 on stmt: N = N__fixed + $N_det.1393
DEBUG 2022-01-28 15:49:36,596 on stmt: $396binary_floor_divide.9 = N // $const394.8
DEBUG 2022-01-28 15:49:36,596 on stmt: $400binary_subtract.11 = $396binary_floor_divide.9 - val.1149
DEBUG 2022-01-28 15:49:36,596 on stmt: plus_minus = $const390.6 ** $400binary_subtract.11
DEBUG 2022-01-28 15:49:36,596 on stmt: $412binary_floor_divide.16 = $N_det.1393 // $const410.15
DEBUG 2022-01-28 15:49:36,596 on stmt: $418binary_subscr.19 = static_getitem(value=kept_edges, index=0, index_var=$const416.18, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:36,596 on stmt: $420build_tuple.20 = build_tuple(items=[Var($412binary_floor_divide.16, loop_hafnian_batch.py:68), Var($418binary_subscr.19, loop_hafnian_batch.py:68)])
DEBUG 2022-01-28 15:49:36,596 on stmt: $422binary_subscr.21 = getitem(value=binoms, index=$420build_tuple.20, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:36,596 on stmt: n_det_binom_prod = $422binary_subscr.21 * binom_prod.2
DEBUG 2022-01-28 15:49:36,596 find_def var='binom_prod.2' stmt=n_det_binom_prod = $422binary_subscr.21 * binom_prod.2
DEBUG 2022-01-28 15:49:36,596 find_def_from_top label 1005
DEBUG 2022-01-28 15:49:36,596 idom 1003 from label 1005
DEBUG 2022-01-28 15:49:36,596 find_def_from_bottom label 1003
DEBUG 2022-01-28 15:49:36,596 find_def_from_top label 1003
DEBUG 2022-01-28 15:49:36,596 idom 631 from label 1003
DEBUG 2022-01-28 15:49:36,596 find_def_from_bottom label 631
DEBUG 2022-01-28 15:49:36,596 find_def_from_top label 631
DEBUG 2022-01-28 15:49:36,596 idom 577 from label 631
DEBUG 2022-01-28 15:49:36,596 find_def_from_bottom label 577
DEBUG 2022-01-28 15:49:36,596 find_def_from_top label 577
DEBUG 2022-01-28 15:49:36,596 idom 495 from label 577
DEBUG 2022-01-28 15:49:36,596 find_def_from_bottom label 495
DEBUG 2022-01-28 15:49:36,596 find_def_from_top label 495
DEBUG 2022-01-28 15:49:36,596 insert phi node binom_prod.2.2 = phi(incoming_values=[], incoming_blocks=[]) at 495
DEBUG 2022-01-28 15:49:36,596 find_def_from_bottom label 50
DEBUG 2022-01-28 15:49:36,596 incoming_def binom_prod.2 = binom_prod
DEBUG 2022-01-28 15:49:36,596 find_def_from_bottom label 571
DEBUG 2022-01-28 15:49:36,596 incoming_def binom_prod.2.1 = $binom_prod.2.1741
DEBUG 2022-01-28 15:49:36,596 replaced with: n_det_binom_prod = $422binary_subscr.21 * binom_prod.2.2
DEBUG 2022-01-28 15:49:36,596 on stmt: $434binary_modulo.26 = $N_det.1393 % $const432.25
DEBUG 2022-01-28 15:49:36,596 on stmt: $438compare_op.28 = $434binary_modulo.26 == $const436.27
DEBUG 2022-01-28 15:49:36,596 on stmt: $440pred = call bool440($438compare_op.28, func=bool440, args=(Var($438compare_op.28, loop_hafnian_batch.py:70),), kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:36,596 on stmt: branch $440pred, 1021, 1060
DEBUG 2022-01-28 15:49:36,596 ==== SSA block rewrite pass on 571
DEBUG 2022-01-28 15:49:36,596 Running <numba.core.ssa._FixSSAVars object at 0x000002410D028E80>
DEBUG 2022-01-28 15:49:36,596 on stmt: $240binary_subscr.7 = getitem(value=edge__reps, index=$i.1394, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:36,596 on stmt: $246binary_subscr.10 = getitem(value=kept_edges, index=$i.1394, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:36,596 on stmt: $248build_tuple.11 = build_tuple(items=[Var($240binary_subscr.7, loop_hafnian_batch.py:48), Var($246binary_subscr.10, loop_hafnian_batch.py:48)])
DEBUG 2022-01-28 15:49:36,596 on stmt: $250binary_subscr.12 = getitem(value=binoms, index=$248build_tuple.11, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:36,596 on stmt: $binom_prod.2.1741 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=binom_prod.2, rhs=$250binary_subscr.12, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-01-28 15:49:36,596 find_def var='binom_prod.2' stmt=$binom_prod.2.1741 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=binom_prod.2, rhs=$250binary_subscr.12, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-01-28 15:49:36,596 find_def_from_top label 571
DEBUG 2022-01-28 15:49:36,596 idom 495 from label 571
DEBUG 2022-01-28 15:49:36,596 find_def_from_bottom label 495
DEBUG 2022-01-28 15:49:36,604 replaced with: $binom_prod.2.1741 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=binom_prod.2.2, rhs=$250binary_subscr.12, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-01-28 15:49:36,604 on stmt: binom_prod.2.1 = $binom_prod.2.1741
DEBUG 2022-01-28 15:49:36,604 on stmt: jump 495
DEBUG 2022-01-28 15:49:36,604 ==== SSA block rewrite pass on 1021
DEBUG 2022-01-28 15:49:36,604 Running <numba.core.ssa._FixSSAVars object at 0x000002410D028E80>
DEBUG 2022-01-28 15:49:36,604 on stmt: $450binary_subscr.6 = getitem(value=Hnew, index=$N_det.1393, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:36,604 on stmt: $456binary_multiply.9 = n_det_binom_prod * plus_minus
DEBUG 2022-01-28 15:49:36,604 on stmt: $464binary_floor_divide.13 = N // $const462.12
DEBUG 2022-01-28 15:49:36,604 on stmt: $466binary_subscr.14 = getitem(value=f_even, index=$464binary_floor_divide.13, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:36,604 on stmt: $468binary_multiply.15 = $456binary_multiply.9 * $466binary_subscr.14
DEBUG 2022-01-28 15:49:36,604 on stmt: $470inplace_add.16 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$450binary_subscr.6, rhs=$468binary_multiply.15, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-01-28 15:49:36,604 on stmt: Hnew[$N_det.1393] = $470inplace_add.16
DEBUG 2022-01-28 15:49:36,604 on stmt: jump 1062
DEBUG 2022-01-28 15:49:36,604 ==== SSA block rewrite pass on 1060
DEBUG 2022-01-28 15:49:36,604 Running <numba.core.ssa._FixSSAVars object at 0x000002410D028E80>
DEBUG 2022-01-28 15:49:36,604 on stmt: $484binary_subscr.6 = getitem(value=Hnew, index=$N_det.1393, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:36,604 on stmt: $490binary_multiply.9 = n_det_binom_prod * plus_minus
DEBUG 2022-01-28 15:49:36,604 on stmt: $496binary_subscr.12 = getitem(value=f_odd, index=N, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:36,604 on stmt: $498binary_multiply.13 = $490binary_multiply.9 * $496binary_subscr.12
DEBUG 2022-01-28 15:49:36,604 on stmt: $500inplace_add.14 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$484binary_subscr.6, rhs=$498binary_multiply.13, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-01-28 15:49:36,604 on stmt: Hnew[$N_det.1393] = $500inplace_add.14
DEBUG 2022-01-28 15:49:36,604 on stmt: jump 1062
DEBUG 2022-01-28 15:49:36,606 ==== SSA block rewrite pass on 631
DEBUG 2022-01-28 15:49:36,606 Running <numba.core.ssa._FixSSAVars object at 0x000002410D028E80>
DEBUG 2022-01-28 15:49:36,606 on stmt: delta.2.2 = phi(incoming_values=[Var(delta.2, loop_hafnian_batch.py:55), Var(delta.2.1, loop_hafnian_batch.py:51)], incoming_blocks=[593, 591])
DEBUG 2022-01-28 15:49:36,606 on stmt: $292call_function.6 = call $282load_global.1(delta.2.2, A, D, oddV, func=$282load_global.1, args=[Var(delta.2.2, loop_hafnian_batch.py:55), Var(A, loop_hafnian_batch.py:24), Var(D, loop_hafnian_batch.py:24), Var(oddV, loop_hafnian_batch.py:25)], kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:36,606 on stmt: $294unpack_sequence.11 = exhaust_iter(value=$292call_function.6, count=4)
DEBUG 2022-01-28 15:49:36,606 on stmt: $AX_S.1389 = static_getitem(value=$294unpack_sequence.11, index=0, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:36,606 on stmt: $XD_S.1388 = static_getitem(value=$294unpack_sequence.11, index=1, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:36,606 on stmt: $D_S.1390 = static_getitem(value=$294unpack_sequence.11, index=2, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:36,606 on stmt: $oddVX_S.1387 = static_getitem(value=$294unpack_sequence.11, index=3, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:36,606 on stmt: E = call $304load_global.12($AX_S.1389, func=$304load_global.12, args=[Var($AX_S.1389, loop_hafnian_batch.py:55)], kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:36,606 on stmt: f_even = call $312load_global.15(E, $AX_S.1389, $XD_S.1388, $D_S.1390, N__max, func=$312load_global.15, args=[Var(E, loop_hafnian_batch.py:57), Var($AX_S.1389, loop_hafnian_batch.py:55), Var($XD_S.1388, loop_hafnian_batch.py:55), Var($D_S.1390, loop_hafnian_batch.py:55), Var(N__max, loop_hafnian_batch.py:30)], kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:36,606 on stmt: f_odd = call $328load_global.22(E, $AX_S.1389, $XD_S.1388, $D_S.1390, N__max, oddloop, $oddVX_S.1387, func=$328load_global.22, args=[Var(E, loop_hafnian_batch.py:57), Var($AX_S.1389, loop_hafnian_batch.py:55), Var($XD_S.1388, loop_hafnian_batch.py:55), Var($D_S.1390, loop_hafnian_batch.py:55), Var(N__max, loop_hafnian_batch.py:30), Var(oddloop, loop_hafnian_batch.py:24), Var($oddVX_S.1387, loop_hafnian_batch.py:55)], kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:36,606 on stmt: $356binary_subscr.35 = static_getitem(value=kept_edges, index=0, index_var=$const354.34, fn=<built-in function getitem>)
DEBUG 2022-01-28 15:49:36,606 on stmt: $358binary_multiply.36 = $const350.32 * $356binary_subscr.35
DEBUG 2022-01-28 15:49:36,606 on stmt: $374call_function.44 = call $348load_global.31($358binary_multiply.36, $372binary_add.43, func=$348load_global.31, args=[Var($358binary_multiply.36, loop_hafnian_batch.py:64), Var($372binary_add.43, loop_hafnian_batch.py:64)], kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:36,606 on stmt: $376get_iter.45 = getiter(value=$374call_function.44)
DEBUG 2022-01-28 15:49:36,606 on stmt: jump 1003
DEBUG 2022-01-28 15:49:36,606 ==== SSA block rewrite pass on 1003
DEBUG 2022-01-28 15:49:36,606 Running <numba.core.ssa._FixSSAVars object at 0x000002410D028E80>
DEBUG 2022-01-28 15:49:36,606 on stmt: $378for_iter.2 = iternext(value=$376get_iter.45)
DEBUG 2022-01-28 15:49:36,606 on stmt: $N_det.1393 = pair_first(value=$378for_iter.2)
DEBUG 2022-01-28 15:49:36,606 on stmt: $378for_iter.4 = pair_second(value=$378for_iter.2)
DEBUG 2022-01-28 15:49:36,606 on stmt: branch $378for_iter.4, 1005, 1078
DEBUG 2022-01-28 15:49:36,606 ==== SSA block rewrite pass on 577
DEBUG 2022-01-28 15:49:36,606 Running <numba.core.ssa._FixSSAVars object at 0x000002410D028E80>
DEBUG 2022-01-28 15:49:36,606 on stmt: $260pred = call bool260(glynn, func=bool260, args=(Var(glynn, loop_hafnian_batch.py:24),), kws=(), vararg=None, target=None)
DEBUG 2022-01-28 15:49:36,606 on stmt: branch $260pred, 591, 593
DEBUG 2022-01-28 15:49:36,606 ==== SSA block rewrite pass on 591
DEBUG 2022-01-28 15:49:36,606 Running <numba.core.ssa._FixSSAVars object at 0x000002410D028E80>
DEBUG 2022-01-28 15:49:36,606 on stmt: ret.1311 = call assert.1310(msg.1309, kept_edges_size0.1307, edge__reps__size0_1299, func=assert.1310, args=[Var(msg.1309, loop_hafnian_batch.py:51), Var(kept_edges_size0.1307, loop_hafnian_batch.py:43), Var(edge__reps__size0_1299, loop_hafnian_batch.py:32)], kws={}, vararg=None, target=None)
DEBUG 2022-01-28 15:49:36,606 on stmt: id=14[LoopNest(index_variable = parfor_index.1352, range = (0, edge__reps__size0_1299, 1))]{1223: <ir.Block at C:\Users\zl4821\PycharmProjects\GBS\gbs\loop_hafnian_batch.py (51)>}Var(parfor_index.1352, loop_hafnian_batch.py:51)
DEBUG 2022-01-28 15:49:36,606 on stmt: delta.2.1 = delta
DEBUG 2022-01-28 15:49:36,606 on stmt: jump 631
DEBUG 2022-01-28 15:49:36,606 ==== SSA block rewrite pass on 1117
DEBUG 2022-01-28 15:49:36,606 Running <numba.core.ssa._FixSSAVars object at 0x000002410D028E80>
DEBUG 2022-01-28 15:49:36,606 on stmt: jump 40
