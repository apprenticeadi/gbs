DEBUG 2022-02-14 16:46:35,131 bytecode dump:
>          0	NOP(arg=None, lineno=23)
           2	LOAD_FAST(arg=1, lineno=23)
           4	LOAD_CONST(arg=0, lineno=23)
           6	LOAD_CONST(arg=0, lineno=23)
           8	BUILD_SLICE(arg=2, lineno=23)
          10	LOAD_CONST(arg=1, lineno=23)
          12	BUILD_TUPLE(arg=2, lineno=23)
          14	BINARY_SUBSCR(arg=None, lineno=23)
          16	STORE_FAST(arg=6, lineno=23)
          18	LOAD_FAST(arg=0, lineno=24)
          20	LOAD_CONST(arg=1, lineno=24)
          22	LOAD_CONST(arg=0, lineno=24)
          24	LOAD_CONST(arg=0, lineno=24)
          26	BUILD_SLICE(arg=2, lineno=24)
          28	BUILD_TUPLE(arg=2, lineno=24)
          30	BINARY_SUBSCR(arg=None, lineno=24)
          32	STORE_FAST(arg=7, lineno=24)
          34	LOAD_FAST(arg=0, lineno=26)
          36	LOAD_ATTR(arg=0, lineno=26)
          38	LOAD_CONST(arg=1, lineno=26)
          40	BINARY_SUBSCR(arg=None, lineno=26)
          42	STORE_FAST(arg=8, lineno=26)
          44	LOAD_CONST(arg=2, lineno=27)
          46	LOAD_FAST(arg=2, lineno=27)
          48	LOAD_METHOD(arg=1, lineno=27)
          50	CALL_METHOD(arg=0, lineno=27)
          52	BINARY_MULTIPLY(arg=None, lineno=27)
          54	STORE_FAST(arg=9, lineno=27)
          56	LOAD_FAST(arg=9, lineno=29)
          58	LOAD_CONST(arg=2, lineno=29)
          60	LOAD_FAST(arg=3, lineno=29)
          62	BINARY_MULTIPLY(arg=None, lineno=29)
          64	BINARY_ADD(arg=None, lineno=29)
          66	LOAD_FAST(arg=4, lineno=29)
          68	BINARY_ADD(arg=None, lineno=29)
          70	STORE_FAST(arg=10, lineno=29)
          72	LOAD_GLOBAL(arg=2, lineno=31)
          74	LOAD_METHOD(arg=3, lineno=31)
          76	LOAD_GLOBAL(arg=2, lineno=31)
          78	LOAD_METHOD(arg=4, lineno=31)
          80	LOAD_FAST(arg=3, lineno=31)
          82	BUILD_LIST(arg=1, lineno=31)
          84	CALL_METHOD(arg=1, lineno=31)
          86	LOAD_FAST(arg=2, lineno=31)
          88	BUILD_TUPLE(arg=2, lineno=31)
          90	CALL_METHOD(arg=1, lineno=31)
          92	STORE_FAST(arg=11, lineno=31)
          94	LOAD_GLOBAL(arg=2, lineno=32)
          96	LOAD_METHOD(arg=5, lineno=32)
          98	LOAD_FAST(arg=11, lineno=32)
         100	LOAD_CONST(arg=3, lineno=32)
         102	BINARY_ADD(arg=None, lineno=32)
         104	CALL_METHOD(arg=1, lineno=32)
         106	STORE_FAST(arg=12, lineno=32)
         108	LOAD_FAST(arg=11, lineno=34)
         110	LOAD_METHOD(arg=6, lineno=34)
         112	CALL_METHOD(arg=0, lineno=34)
         114	LOAD_FAST(arg=4, lineno=34)
         116	BINARY_ADD(arg=None, lineno=34)
         118	STORE_FAST(arg=13, lineno=34)
         120	LOAD_GLOBAL(arg=7, lineno=35)
         122	LOAD_FAST(arg=13, lineno=35)
         124	CALL_FUNCTION(arg=1, lineno=35)
         126	STORE_FAST(arg=14, lineno=35)
         128	LOAD_FAST(arg=1, lineno=36)
         130	LOAD_ATTR(arg=0, lineno=36)
         132	LOAD_CONST(arg=1, lineno=36)
         134	BINARY_SUBSCR(arg=None, lineno=36)
         136	STORE_FAST(arg=15, lineno=36)
         138	LOAD_GLOBAL(arg=2, lineno=38)
         140	LOAD_ATTR(arg=8, lineno=38)
         142	LOAD_FAST(arg=15, lineno=38)
         144	LOAD_CONST(arg=2, lineno=38)
         146	LOAD_FAST(arg=3, lineno=38)
         148	BINARY_MULTIPLY(arg=None, lineno=38)
         150	LOAD_FAST(arg=4, lineno=38)
         152	BINARY_ADD(arg=None, lineno=38)
         154	LOAD_CONST(arg=3, lineno=38)
         156	BINARY_ADD(arg=None, lineno=38)
         158	BUILD_TUPLE(arg=2, lineno=38)
         160	LOAD_GLOBAL(arg=2, lineno=38)
         162	LOAD_ATTR(arg=9, lineno=38)
         164	LOAD_CONST(arg=4, lineno=38)
         166	CALL_FUNCTION_KW(arg=2, lineno=38)
         168	STORE_FAST(arg=16, lineno=38)
         170	LOAD_GLOBAL(arg=10, lineno=40)
         172	LOAD_FAST(arg=12, lineno=40)
         174	CALL_FUNCTION(arg=1, lineno=40)
         176	GET_ITER(arg=None, lineno=40)
>        178	FOR_ITER(arg=428, lineno=40)
         182	STORE_FAST(arg=17, lineno=40)
         184	LOAD_GLOBAL(arg=2, lineno=42)
         186	LOAD_ATTR(arg=8, lineno=42)
         188	LOAD_FAST(arg=15, lineno=42)
         190	LOAD_CONST(arg=2, lineno=42)
         192	LOAD_FAST(arg=3, lineno=42)
         194	BINARY_MULTIPLY(arg=None, lineno=42)
         196	LOAD_FAST(arg=4, lineno=42)
         198	BINARY_ADD(arg=None, lineno=42)
         200	LOAD_CONST(arg=3, lineno=42)
         202	BINARY_ADD(arg=None, lineno=42)
         204	BUILD_TUPLE(arg=2, lineno=42)
         206	LOAD_GLOBAL(arg=2, lineno=42)
         208	LOAD_ATTR(arg=9, lineno=42)
         210	LOAD_CONST(arg=4, lineno=42)
         212	CALL_FUNCTION_KW(arg=2, lineno=42)
         214	STORE_FAST(arg=18, lineno=42)
         216	LOAD_GLOBAL(arg=11, lineno=44)
         218	LOAD_FAST(arg=17, lineno=44)
         220	LOAD_FAST(arg=11, lineno=44)
         222	CALL_FUNCTION(arg=2, lineno=44)
         224	STORE_FAST(arg=19, lineno=44)
         226	LOAD_FAST(arg=19, lineno=45)
         228	LOAD_METHOD(arg=1, lineno=45)
         230	CALL_METHOD(arg=0, lineno=45)
         232	STORE_FAST(arg=20, lineno=45)
         234	LOAD_CONST(arg=5, lineno=47)
         236	STORE_FAST(arg=21, lineno=47)
         238	LOAD_GLOBAL(arg=12, lineno=48)
         240	LOAD_CONST(arg=3, lineno=48)
         242	LOAD_FAST(arg=8, lineno=48)
         244	LOAD_CONST(arg=2, lineno=48)
         246	BINARY_FLOOR_DIVIDE(arg=None, lineno=48)
         248	CALL_FUNCTION(arg=2, lineno=48)
         250	GET_ITER(arg=None, lineno=48)
>        252	FOR_ITER(arg=28, lineno=48)
         254	STORE_FAST(arg=22, lineno=48)
         256	LOAD_FAST(arg=21, lineno=49)
         258	LOAD_FAST(arg=14, lineno=49)
         260	LOAD_FAST(arg=11, lineno=49)
         262	LOAD_FAST(arg=22, lineno=49)
         264	BINARY_SUBSCR(arg=None, lineno=49)
         266	LOAD_FAST(arg=19, lineno=49)
         268	LOAD_FAST(arg=22, lineno=49)
         270	BINARY_SUBSCR(arg=None, lineno=49)
         272	BUILD_TUPLE(arg=2, lineno=49)
         274	BINARY_SUBSCR(arg=None, lineno=49)
         276	INPLACE_MULTIPLY(arg=None, lineno=49)
         278	STORE_FAST(arg=21, lineno=49)
         280	JUMP_ABSOLUTE(arg=252, lineno=49)
>        282	LOAD_FAST(arg=5, lineno=51)
         284	POP_JUMP_IF_FALSE(arg=302, lineno=51)
         288	LOAD_CONST(arg=2, lineno=52)
         290	LOAD_FAST(arg=19, lineno=52)
         292	BINARY_MULTIPLY(arg=None, lineno=52)
         294	LOAD_FAST(arg=11, lineno=52)
         296	BINARY_SUBTRACT(arg=None, lineno=52)
         298	STORE_FAST(arg=23, lineno=52)
         300	JUMP_FORWARD(arg=4, lineno=52)
>        302	LOAD_FAST(arg=19, lineno=54)
         304	STORE_FAST(arg=23, lineno=54)
>        306	LOAD_GLOBAL(arg=13, lineno=56)
         308	LOAD_FAST(arg=23, lineno=56)
         310	LOAD_FAST(arg=0, lineno=56)
         312	LOAD_FAST(arg=1, lineno=56)
         314	LOAD_CONST(arg=1, lineno=56)
         316	LOAD_CONST(arg=0, lineno=56)
         318	LOAD_CONST(arg=0, lineno=56)
         320	BUILD_SLICE(arg=2, lineno=56)
         322	BUILD_TUPLE(arg=2, lineno=56)
         324	BINARY_SUBSCR(arg=None, lineno=56)
         326	LOAD_FAST(arg=7, lineno=56)
         328	CALL_FUNCTION(arg=4, lineno=56)
         330	UNPACK_SEQUENCE(arg=4, lineno=56)
         332	STORE_FAST(arg=24, lineno=56)
         334	STORE_FAST(arg=25, lineno=56)
         336	STORE_FAST(arg=26, lineno=56)
         338	STORE_FAST(arg=27, lineno=56)
         340	LOAD_GLOBAL(arg=14, lineno=58)
         342	LOAD_FAST(arg=24, lineno=58)
         344	CALL_FUNCTION(arg=1, lineno=58)
         346	STORE_FAST(arg=28, lineno=58)
         348	LOAD_GLOBAL(arg=12, lineno=60)
         350	LOAD_FAST(arg=15, lineno=60)
         352	CALL_FUNCTION(arg=1, lineno=60)
         354	GET_ITER(arg=None, lineno=60)
>        356	FOR_ITER(arg=242, lineno=60)
         358	STORE_FAST(arg=29, lineno=60)
         360	LOAD_GLOBAL(arg=15, lineno=61)
         362	LOAD_FAST(arg=23, lineno=61)
         364	LOAD_FAST(arg=1, lineno=61)
         366	LOAD_FAST(arg=29, lineno=61)
         368	LOAD_CONST(arg=0, lineno=61)
         370	LOAD_CONST(arg=0, lineno=61)
         372	BUILD_SLICE(arg=2, lineno=61)
         374	BUILD_TUPLE(arg=2, lineno=61)
         376	BINARY_SUBSCR(arg=None, lineno=61)
         378	CALL_FUNCTION(arg=2, lineno=61)
         380	UNPACK_SEQUENCE(arg=2, lineno=61)
         382	STORE_FAST(arg=25, lineno=61)
         384	STORE_FAST(arg=26, lineno=61)
         386	LOAD_GLOBAL(arg=16, lineno=63)
         388	LOAD_FAST(arg=28, lineno=63)
         390	LOAD_FAST(arg=24, lineno=63)
         392	LOAD_FAST(arg=25, lineno=63)
         394	LOAD_FAST(arg=26, lineno=63)
         396	LOAD_FAST(arg=10, lineno=63)
         398	CALL_FUNCTION(arg=5, lineno=63)
         400	STORE_FAST(arg=30, lineno=63)
         402	LOAD_GLOBAL(arg=17, lineno=64)
         404	LOAD_FAST(arg=28, lineno=64)
         406	LOAD_FAST(arg=24, lineno=64)
         408	LOAD_FAST(arg=25, lineno=64)
         410	LOAD_FAST(arg=26, lineno=64)
         412	LOAD_FAST(arg=10, lineno=64)
         414	LOAD_FAST(arg=6, lineno=64)
         416	LOAD_FAST(arg=29, lineno=64)
         418	BINARY_SUBSCR(arg=None, lineno=64)
         420	LOAD_FAST(arg=27, lineno=64)
         422	CALL_FUNCTION(arg=7, lineno=64)
         424	STORE_FAST(arg=31, lineno=64)
         426	LOAD_GLOBAL(arg=12, lineno=66)
         428	LOAD_CONST(arg=2, lineno=66)
         430	LOAD_FAST(arg=19, lineno=66)
         432	LOAD_CONST(arg=1, lineno=66)
         434	BINARY_SUBSCR(arg=None, lineno=66)
         436	BINARY_MULTIPLY(arg=None, lineno=66)
         438	LOAD_CONST(arg=2, lineno=66)
         440	LOAD_FAST(arg=3, lineno=66)
         442	BINARY_MULTIPLY(arg=None, lineno=66)
         444	LOAD_FAST(arg=4, lineno=66)
         446	BINARY_ADD(arg=None, lineno=66)
         448	LOAD_CONST(arg=3, lineno=66)
         450	BINARY_ADD(arg=None, lineno=66)
         452	CALL_FUNCTION(arg=2, lineno=66)
         454	GET_ITER(arg=None, lineno=66)
>        456	FOR_ITER(arg=138, lineno=66)
         458	STORE_FAST(arg=32, lineno=66)
         460	LOAD_FAST(arg=9, lineno=67)
         462	LOAD_FAST(arg=32, lineno=67)
         464	BINARY_ADD(arg=None, lineno=67)
         466	STORE_FAST(arg=33, lineno=67)
         468	LOAD_CONST(arg=6, lineno=68)
         470	LOAD_FAST(arg=33, lineno=68)
         472	LOAD_CONST(arg=2, lineno=68)
         474	BINARY_FLOOR_DIVIDE(arg=None, lineno=68)
         476	LOAD_FAST(arg=20, lineno=68)
         478	BINARY_SUBTRACT(arg=None, lineno=68)
         480	BINARY_POWER(arg=None, lineno=68)
         482	STORE_FAST(arg=34, lineno=68)
         484	LOAD_FAST(arg=14, lineno=70)
         486	LOAD_FAST(arg=32, lineno=70)
         488	LOAD_CONST(arg=2, lineno=70)
         490	BINARY_FLOOR_DIVIDE(arg=None, lineno=70)
         492	LOAD_FAST(arg=19, lineno=70)
         494	LOAD_CONST(arg=1, lineno=70)
         496	BINARY_SUBSCR(arg=None, lineno=70)
         498	BUILD_TUPLE(arg=2, lineno=70)
         500	BINARY_SUBSCR(arg=None, lineno=70)
         502	LOAD_FAST(arg=21, lineno=70)
         504	BINARY_MULTIPLY(arg=None, lineno=70)
         506	STORE_FAST(arg=35, lineno=70)
         508	LOAD_FAST(arg=32, lineno=72)
         510	LOAD_CONST(arg=2, lineno=72)
         512	BINARY_MODULO(arg=None, lineno=72)
         514	LOAD_CONST(arg=1, lineno=72)
         516	COMPARE_OP(arg=2, lineno=72)
         518	POP_JUMP_IF_FALSE(arg=560, lineno=72)
         522	LOAD_FAST(arg=18, lineno=73)
         524	LOAD_FAST(arg=29, lineno=73)
         526	LOAD_FAST(arg=32, lineno=73)
         528	BUILD_TUPLE(arg=2, lineno=73)
         530	DUP_TOP_TWO(arg=None, lineno=73)
         532	BINARY_SUBSCR(arg=None, lineno=73)
         534	LOAD_FAST(arg=35, lineno=73)
         536	LOAD_FAST(arg=34, lineno=73)
         538	BINARY_MULTIPLY(arg=None, lineno=73)
         540	LOAD_FAST(arg=30, lineno=73)
         542	LOAD_FAST(arg=33, lineno=73)
         544	LOAD_CONST(arg=2, lineno=73)
         546	BINARY_FLOOR_DIVIDE(arg=None, lineno=73)
         548	BINARY_SUBSCR(arg=None, lineno=73)
         550	BINARY_MULTIPLY(arg=None, lineno=73)
         552	INPLACE_ADD(arg=None, lineno=73)
         554	ROT_THREE(arg=None, lineno=73)
         556	STORE_SUBSCR(arg=None, lineno=73)
         558	JUMP_FORWARD(arg=32, lineno=73)
>        560	LOAD_FAST(arg=18, lineno=75)
         562	LOAD_FAST(arg=29, lineno=75)
         564	LOAD_FAST(arg=32, lineno=75)
         566	BUILD_TUPLE(arg=2, lineno=75)
         568	DUP_TOP_TWO(arg=None, lineno=75)
         570	BINARY_SUBSCR(arg=None, lineno=75)
         572	LOAD_FAST(arg=35, lineno=75)
         574	LOAD_FAST(arg=34, lineno=75)
         576	BINARY_MULTIPLY(arg=None, lineno=75)
         578	LOAD_FAST(arg=31, lineno=75)
         580	LOAD_FAST(arg=33, lineno=75)
         582	BINARY_SUBSCR(arg=None, lineno=75)
         584	BINARY_MULTIPLY(arg=None, lineno=75)
         586	INPLACE_ADD(arg=None, lineno=75)
         588	ROT_THREE(arg=None, lineno=75)
         590	STORE_SUBSCR(arg=None, lineno=75)
>        592	JUMP_ABSOLUTE(arg=456, lineno=75)
>        596	JUMP_ABSOLUTE(arg=356, lineno=75)
>        600	LOAD_FAST(arg=16, lineno=76)
         602	LOAD_FAST(arg=18, lineno=76)
         604	INPLACE_ADD(arg=None, lineno=76)
         606	STORE_FAST(arg=16, lineno=76)
         608	JUMP_ABSOLUTE(arg=178, lineno=76)
>        610	LOAD_FAST(arg=5, lineno=78)
         612	POP_JUMP_IF_FALSE(arg=678, lineno=78)
         616	LOAD_GLOBAL(arg=12, lineno=79)
         618	LOAD_FAST(arg=16, lineno=79)
         620	LOAD_ATTR(arg=0, lineno=79)
         622	LOAD_CONST(arg=3, lineno=79)
         624	BINARY_SUBSCR(arg=None, lineno=79)
         626	CALL_FUNCTION(arg=1, lineno=79)
         628	GET_ITER(arg=None, lineno=79)
>        630	FOR_ITER(arg=46, lineno=79)
         632	STORE_FAST(arg=17, lineno=79)
         634	LOAD_FAST(arg=9, lineno=80)
         636	LOAD_FAST(arg=17, lineno=80)
         638	BINARY_ADD(arg=None, lineno=80)
         640	STORE_FAST(arg=36, lineno=80)
         642	LOAD_FAST(arg=16, lineno=81)
         644	LOAD_CONST(arg=0, lineno=81)
         646	LOAD_CONST(arg=0, lineno=81)
         648	BUILD_SLICE(arg=2, lineno=81)
         650	LOAD_FAST(arg=17, lineno=81)
         652	BUILD_TUPLE(arg=2, lineno=81)
         654	DUP_TOP_TWO(arg=None, lineno=81)
         656	BINARY_SUBSCR(arg=None, lineno=81)
         658	LOAD_CONST(arg=7, lineno=81)
         660	LOAD_FAST(arg=36, lineno=81)
         662	LOAD_CONST(arg=2, lineno=81)
         664	BINARY_FLOOR_DIVIDE(arg=None, lineno=81)
         666	BINARY_POWER(arg=None, lineno=81)
         668	INPLACE_MULTIPLY(arg=None, lineno=81)
         670	ROT_THREE(arg=None, lineno=81)
         672	STORE_SUBSCR(arg=None, lineno=81)
         674	JUMP_ABSOLUTE(arg=630, lineno=81)
>        678	LOAD_FAST(arg=16, lineno=83)
         680	RETURN_VALUE(arg=None, lineno=83)
DEBUG 2022-02-14 16:46:35,131 pending: deque([State(pc_initial=0 nstack_initial=0)])
DEBUG 2022-02-14 16:46:35,131 stack: []
DEBUG 2022-02-14 16:46:35,131 dispatch pc=0, inst=NOP(arg=None, lineno=23)
DEBUG 2022-02-14 16:46:35,132 stack []
DEBUG 2022-02-14 16:46:35,132 dispatch pc=2, inst=LOAD_FAST(arg=1, lineno=23)
DEBUG 2022-02-14 16:46:35,132 stack []
DEBUG 2022-02-14 16:46:35,132 dispatch pc=4, inst=LOAD_CONST(arg=0, lineno=23)
DEBUG 2022-02-14 16:46:35,132 stack ['$D2.0']
DEBUG 2022-02-14 16:46:35,132 dispatch pc=6, inst=LOAD_CONST(arg=0, lineno=23)
DEBUG 2022-02-14 16:46:35,132 stack ['$D2.0', '$const4.1']
DEBUG 2022-02-14 16:46:35,132 dispatch pc=8, inst=BUILD_SLICE(arg=2, lineno=23)
DEBUG 2022-02-14 16:46:35,132 stack ['$D2.0', '$const4.1', '$const6.2']
DEBUG 2022-02-14 16:46:35,132 dispatch pc=10, inst=LOAD_CONST(arg=1, lineno=23)
DEBUG 2022-02-14 16:46:35,132 stack ['$D2.0', '$8build_slice.4']
DEBUG 2022-02-14 16:46:35,132 dispatch pc=12, inst=BUILD_TUPLE(arg=2, lineno=23)
DEBUG 2022-02-14 16:46:35,132 stack ['$D2.0', '$8build_slice.4', '$const10.5']
DEBUG 2022-02-14 16:46:35,132 dispatch pc=14, inst=BINARY_SUBSCR(arg=None, lineno=23)
DEBUG 2022-02-14 16:46:35,132 stack ['$D2.0', '$12build_tuple.6']
DEBUG 2022-02-14 16:46:35,132 dispatch pc=16, inst=STORE_FAST(arg=6, lineno=23)
DEBUG 2022-02-14 16:46:35,133 stack ['$14binary_subscr.7']
DEBUG 2022-02-14 16:46:35,133 dispatch pc=18, inst=LOAD_FAST(arg=0, lineno=24)
DEBUG 2022-02-14 16:46:35,133 stack []
DEBUG 2022-02-14 16:46:35,133 dispatch pc=20, inst=LOAD_CONST(arg=1, lineno=24)
DEBUG 2022-02-14 16:46:35,133 stack ['$A18.8']
DEBUG 2022-02-14 16:46:35,133 dispatch pc=22, inst=LOAD_CONST(arg=0, lineno=24)
DEBUG 2022-02-14 16:46:35,133 stack ['$A18.8', '$const20.9']
DEBUG 2022-02-14 16:46:35,133 dispatch pc=24, inst=LOAD_CONST(arg=0, lineno=24)
DEBUG 2022-02-14 16:46:35,133 stack ['$A18.8', '$const20.9', '$const22.10']
DEBUG 2022-02-14 16:46:35,133 dispatch pc=26, inst=BUILD_SLICE(arg=2, lineno=24)
DEBUG 2022-02-14 16:46:35,133 stack ['$A18.8', '$const20.9', '$const22.10', '$const24.11']
DEBUG 2022-02-14 16:46:35,133 dispatch pc=28, inst=BUILD_TUPLE(arg=2, lineno=24)
DEBUG 2022-02-14 16:46:35,133 stack ['$A18.8', '$const20.9', '$26build_slice.13']
DEBUG 2022-02-14 16:46:35,133 dispatch pc=30, inst=BINARY_SUBSCR(arg=None, lineno=24)
DEBUG 2022-02-14 16:46:35,133 stack ['$A18.8', '$28build_tuple.14']
DEBUG 2022-02-14 16:46:35,133 dispatch pc=32, inst=STORE_FAST(arg=7, lineno=24)
DEBUG 2022-02-14 16:46:35,134 stack ['$30binary_subscr.15']
DEBUG 2022-02-14 16:46:35,134 dispatch pc=34, inst=LOAD_FAST(arg=0, lineno=26)
DEBUG 2022-02-14 16:46:35,134 stack []
DEBUG 2022-02-14 16:46:35,134 dispatch pc=36, inst=LOAD_ATTR(arg=0, lineno=26)
DEBUG 2022-02-14 16:46:35,134 stack ['$A34.16']
DEBUG 2022-02-14 16:46:35,134 dispatch pc=38, inst=LOAD_CONST(arg=1, lineno=26)
DEBUG 2022-02-14 16:46:35,134 stack ['$36load_attr.17']
DEBUG 2022-02-14 16:46:35,134 dispatch pc=40, inst=BINARY_SUBSCR(arg=None, lineno=26)
DEBUG 2022-02-14 16:46:35,134 stack ['$36load_attr.17', '$const38.18']
DEBUG 2022-02-14 16:46:35,134 dispatch pc=42, inst=STORE_FAST(arg=8, lineno=26)
DEBUG 2022-02-14 16:46:35,134 stack ['$40binary_subscr.19']
DEBUG 2022-02-14 16:46:35,134 dispatch pc=44, inst=LOAD_CONST(arg=2, lineno=27)
DEBUG 2022-02-14 16:46:35,134 stack []
DEBUG 2022-02-14 16:46:35,134 dispatch pc=46, inst=LOAD_FAST(arg=2, lineno=27)
DEBUG 2022-02-14 16:46:35,134 stack ['$const44.20']
DEBUG 2022-02-14 16:46:35,135 dispatch pc=48, inst=LOAD_METHOD(arg=1, lineno=27)
DEBUG 2022-02-14 16:46:35,135 stack ['$const44.20', '$fixed_edge_reps46.21']
DEBUG 2022-02-14 16:46:35,135 dispatch pc=50, inst=CALL_METHOD(arg=0, lineno=27)
DEBUG 2022-02-14 16:46:35,135 stack ['$const44.20', '$48load_method.22']
DEBUG 2022-02-14 16:46:35,135 dispatch pc=52, inst=BINARY_MULTIPLY(arg=None, lineno=27)
DEBUG 2022-02-14 16:46:35,135 stack ['$const44.20', '$50call_method.23']
DEBUG 2022-02-14 16:46:35,135 dispatch pc=54, inst=STORE_FAST(arg=9, lineno=27)
DEBUG 2022-02-14 16:46:35,135 stack ['$52binary_multiply.24']
DEBUG 2022-02-14 16:46:35,135 dispatch pc=56, inst=LOAD_FAST(arg=9, lineno=29)
DEBUG 2022-02-14 16:46:35,135 stack []
DEBUG 2022-02-14 16:46:35,135 dispatch pc=58, inst=LOAD_CONST(arg=2, lineno=29)
DEBUG 2022-02-14 16:46:35,135 stack ['$N_fixed56.25']
DEBUG 2022-02-14 16:46:35,135 dispatch pc=60, inst=LOAD_FAST(arg=3, lineno=29)
DEBUG 2022-02-14 16:46:35,135 stack ['$N_fixed56.25', '$const58.26']
DEBUG 2022-02-14 16:46:35,135 dispatch pc=62, inst=BINARY_MULTIPLY(arg=None, lineno=29)
DEBUG 2022-02-14 16:46:35,135 stack ['$N_fixed56.25', '$const58.26', '$batch_max60.27']
DEBUG 2022-02-14 16:46:35,136 dispatch pc=64, inst=BINARY_ADD(arg=None, lineno=29)
DEBUG 2022-02-14 16:46:35,136 stack ['$N_fixed56.25', '$62binary_multiply.28']
DEBUG 2022-02-14 16:46:35,136 dispatch pc=66, inst=LOAD_FAST(arg=4, lineno=29)
DEBUG 2022-02-14 16:46:35,136 stack ['$64binary_add.29']
DEBUG 2022-02-14 16:46:35,136 dispatch pc=68, inst=BINARY_ADD(arg=None, lineno=29)
DEBUG 2022-02-14 16:46:35,136 stack ['$64binary_add.29', '$odd_cutoff66.30']
DEBUG 2022-02-14 16:46:35,136 dispatch pc=70, inst=STORE_FAST(arg=10, lineno=29)
DEBUG 2022-02-14 16:46:35,136 stack ['$68binary_add.31']
DEBUG 2022-02-14 16:46:35,136 dispatch pc=72, inst=LOAD_GLOBAL(arg=2, lineno=31)
DEBUG 2022-02-14 16:46:35,136 stack []
DEBUG 2022-02-14 16:46:35,136 dispatch pc=74, inst=LOAD_METHOD(arg=3, lineno=31)
DEBUG 2022-02-14 16:46:35,136 stack ['$72load_global.32']
DEBUG 2022-02-14 16:46:35,136 dispatch pc=76, inst=LOAD_GLOBAL(arg=2, lineno=31)
DEBUG 2022-02-14 16:46:35,136 stack ['$74load_method.33']
DEBUG 2022-02-14 16:46:35,136 dispatch pc=78, inst=LOAD_METHOD(arg=4, lineno=31)
DEBUG 2022-02-14 16:46:35,136 stack ['$74load_method.33', '$76load_global.34']
DEBUG 2022-02-14 16:46:35,137 dispatch pc=80, inst=LOAD_FAST(arg=3, lineno=31)
DEBUG 2022-02-14 16:46:35,137 stack ['$74load_method.33', '$78load_method.35']
DEBUG 2022-02-14 16:46:35,137 dispatch pc=82, inst=BUILD_LIST(arg=1, lineno=31)
DEBUG 2022-02-14 16:46:35,137 stack ['$74load_method.33', '$78load_method.35', '$batch_max80.36']
DEBUG 2022-02-14 16:46:35,137 dispatch pc=84, inst=CALL_METHOD(arg=1, lineno=31)
DEBUG 2022-02-14 16:46:35,137 stack ['$74load_method.33', '$78load_method.35', '$82build_list.37']
DEBUG 2022-02-14 16:46:35,137 dispatch pc=86, inst=LOAD_FAST(arg=2, lineno=31)
DEBUG 2022-02-14 16:46:35,137 stack ['$74load_method.33', '$84call_method.38']
DEBUG 2022-02-14 16:46:35,137 dispatch pc=88, inst=BUILD_TUPLE(arg=2, lineno=31)
DEBUG 2022-02-14 16:46:35,137 stack ['$74load_method.33', '$84call_method.38', '$fixed_edge_reps86.39']
DEBUG 2022-02-14 16:46:35,137 dispatch pc=90, inst=CALL_METHOD(arg=1, lineno=31)
DEBUG 2022-02-14 16:46:35,137 stack ['$74load_method.33', '$88build_tuple.40']
DEBUG 2022-02-14 16:46:35,137 dispatch pc=92, inst=STORE_FAST(arg=11, lineno=31)
DEBUG 2022-02-14 16:46:35,137 stack ['$90call_method.41']
DEBUG 2022-02-14 16:46:35,137 dispatch pc=94, inst=LOAD_GLOBAL(arg=2, lineno=32)
DEBUG 2022-02-14 16:46:35,137 stack []
DEBUG 2022-02-14 16:46:35,138 dispatch pc=96, inst=LOAD_METHOD(arg=5, lineno=32)
DEBUG 2022-02-14 16:46:35,138 stack ['$94load_global.42']
DEBUG 2022-02-14 16:46:35,138 dispatch pc=98, inst=LOAD_FAST(arg=11, lineno=32)
DEBUG 2022-02-14 16:46:35,138 stack ['$96load_method.43']
DEBUG 2022-02-14 16:46:35,138 dispatch pc=100, inst=LOAD_CONST(arg=3, lineno=32)
DEBUG 2022-02-14 16:46:35,138 stack ['$96load_method.43', '$edge_reps98.44']
DEBUG 2022-02-14 16:46:35,138 dispatch pc=102, inst=BINARY_ADD(arg=None, lineno=32)
DEBUG 2022-02-14 16:46:35,138 stack ['$96load_method.43', '$edge_reps98.44', '$const100.45']
DEBUG 2022-02-14 16:46:35,138 dispatch pc=104, inst=CALL_METHOD(arg=1, lineno=32)
DEBUG 2022-02-14 16:46:35,138 stack ['$96load_method.43', '$102binary_add.46']
DEBUG 2022-02-14 16:46:35,138 dispatch pc=106, inst=STORE_FAST(arg=12, lineno=32)
DEBUG 2022-02-14 16:46:35,138 stack ['$104call_method.47']
DEBUG 2022-02-14 16:46:35,138 dispatch pc=108, inst=LOAD_FAST(arg=11, lineno=34)
DEBUG 2022-02-14 16:46:35,138 stack []
DEBUG 2022-02-14 16:46:35,138 dispatch pc=110, inst=LOAD_METHOD(arg=6, lineno=34)
DEBUG 2022-02-14 16:46:35,138 stack ['$edge_reps108.48']
DEBUG 2022-02-14 16:46:35,139 dispatch pc=112, inst=CALL_METHOD(arg=0, lineno=34)
DEBUG 2022-02-14 16:46:35,139 stack ['$110load_method.49']
DEBUG 2022-02-14 16:46:35,139 dispatch pc=114, inst=LOAD_FAST(arg=4, lineno=34)
DEBUG 2022-02-14 16:46:35,139 stack ['$112call_method.50']
DEBUG 2022-02-14 16:46:35,139 dispatch pc=116, inst=BINARY_ADD(arg=None, lineno=34)
DEBUG 2022-02-14 16:46:35,139 stack ['$112call_method.50', '$odd_cutoff114.51']
DEBUG 2022-02-14 16:46:35,139 dispatch pc=118, inst=STORE_FAST(arg=13, lineno=34)
DEBUG 2022-02-14 16:46:35,139 stack ['$116binary_add.52']
DEBUG 2022-02-14 16:46:35,139 dispatch pc=120, inst=LOAD_GLOBAL(arg=7, lineno=35)
DEBUG 2022-02-14 16:46:35,139 stack []
DEBUG 2022-02-14 16:46:35,139 dispatch pc=122, inst=LOAD_FAST(arg=13, lineno=35)
DEBUG 2022-02-14 16:46:35,139 stack ['$120load_global.53']
DEBUG 2022-02-14 16:46:35,139 dispatch pc=124, inst=CALL_FUNCTION(arg=1, lineno=35)
DEBUG 2022-02-14 16:46:35,139 stack ['$120load_global.53', '$max_binom122.54']
DEBUG 2022-02-14 16:46:35,139 dispatch pc=126, inst=STORE_FAST(arg=14, lineno=35)
DEBUG 2022-02-14 16:46:35,139 stack ['$124call_function.55']
DEBUG 2022-02-14 16:46:35,140 dispatch pc=128, inst=LOAD_FAST(arg=1, lineno=36)
DEBUG 2022-02-14 16:46:35,140 stack []
DEBUG 2022-02-14 16:46:35,140 dispatch pc=130, inst=LOAD_ATTR(arg=0, lineno=36)
DEBUG 2022-02-14 16:46:35,140 stack ['$D128.56']
DEBUG 2022-02-14 16:46:35,140 dispatch pc=132, inst=LOAD_CONST(arg=1, lineno=36)
DEBUG 2022-02-14 16:46:35,140 stack ['$130load_attr.57']
DEBUG 2022-02-14 16:46:35,140 dispatch pc=134, inst=BINARY_SUBSCR(arg=None, lineno=36)
DEBUG 2022-02-14 16:46:35,140 stack ['$130load_attr.57', '$const132.58']
DEBUG 2022-02-14 16:46:35,140 dispatch pc=136, inst=STORE_FAST(arg=15, lineno=36)
DEBUG 2022-02-14 16:46:35,140 stack ['$134binary_subscr.59']
DEBUG 2022-02-14 16:46:35,140 dispatch pc=138, inst=LOAD_GLOBAL(arg=2, lineno=38)
DEBUG 2022-02-14 16:46:35,140 stack []
DEBUG 2022-02-14 16:46:35,140 dispatch pc=140, inst=LOAD_ATTR(arg=8, lineno=38)
DEBUG 2022-02-14 16:46:35,140 stack ['$138load_global.60']
DEBUG 2022-02-14 16:46:35,140 dispatch pc=142, inst=LOAD_FAST(arg=15, lineno=38)
DEBUG 2022-02-14 16:46:35,140 stack ['$140load_attr.61']
DEBUG 2022-02-14 16:46:35,140 dispatch pc=144, inst=LOAD_CONST(arg=2, lineno=38)
DEBUG 2022-02-14 16:46:35,140 stack ['$140load_attr.61', '$n_D142.62']
DEBUG 2022-02-14 16:46:35,140 dispatch pc=146, inst=LOAD_FAST(arg=3, lineno=38)
DEBUG 2022-02-14 16:46:35,140 stack ['$140load_attr.61', '$n_D142.62', '$const144.63']
DEBUG 2022-02-14 16:46:35,140 dispatch pc=148, inst=BINARY_MULTIPLY(arg=None, lineno=38)
DEBUG 2022-02-14 16:46:35,141 stack ['$140load_attr.61', '$n_D142.62', '$const144.63', '$batch_max146.64']
DEBUG 2022-02-14 16:46:35,141 dispatch pc=150, inst=LOAD_FAST(arg=4, lineno=38)
DEBUG 2022-02-14 16:46:35,141 stack ['$140load_attr.61', '$n_D142.62', '$148binary_multiply.65']
DEBUG 2022-02-14 16:46:35,141 dispatch pc=152, inst=BINARY_ADD(arg=None, lineno=38)
DEBUG 2022-02-14 16:46:35,141 stack ['$140load_attr.61', '$n_D142.62', '$148binary_multiply.65', '$odd_cutoff150.66']
DEBUG 2022-02-14 16:46:35,141 dispatch pc=154, inst=LOAD_CONST(arg=3, lineno=38)
DEBUG 2022-02-14 16:46:35,141 stack ['$140load_attr.61', '$n_D142.62', '$152binary_add.67']
DEBUG 2022-02-14 16:46:35,141 dispatch pc=156, inst=BINARY_ADD(arg=None, lineno=38)
DEBUG 2022-02-14 16:46:35,141 stack ['$140load_attr.61', '$n_D142.62', '$152binary_add.67', '$const154.68']
DEBUG 2022-02-14 16:46:35,141 dispatch pc=158, inst=BUILD_TUPLE(arg=2, lineno=38)
DEBUG 2022-02-14 16:46:35,141 stack ['$140load_attr.61', '$n_D142.62', '$156binary_add.69']
DEBUG 2022-02-14 16:46:35,141 dispatch pc=160, inst=LOAD_GLOBAL(arg=2, lineno=38)
DEBUG 2022-02-14 16:46:35,141 stack ['$140load_attr.61', '$158build_tuple.70']
DEBUG 2022-02-14 16:46:35,141 dispatch pc=162, inst=LOAD_ATTR(arg=9, lineno=38)
DEBUG 2022-02-14 16:46:35,141 stack ['$140load_attr.61', '$158build_tuple.70', '$160load_global.71']
DEBUG 2022-02-14 16:46:35,141 dispatch pc=164, inst=LOAD_CONST(arg=4, lineno=38)
DEBUG 2022-02-14 16:46:35,141 stack ['$140load_attr.61', '$158build_tuple.70', '$162load_attr.72']
DEBUG 2022-02-14 16:46:35,141 dispatch pc=166, inst=CALL_FUNCTION_KW(arg=2, lineno=38)
DEBUG 2022-02-14 16:46:35,141 stack ['$140load_attr.61', '$158build_tuple.70', '$162load_attr.72', '$const164.73']
DEBUG 2022-02-14 16:46:35,141 dispatch pc=168, inst=STORE_FAST(arg=16, lineno=38)
DEBUG 2022-02-14 16:46:35,141 stack ['$166call_function_kw.74']
DEBUG 2022-02-14 16:46:35,141 dispatch pc=170, inst=LOAD_GLOBAL(arg=10, lineno=40)
DEBUG 2022-02-14 16:46:35,141 stack []
DEBUG 2022-02-14 16:46:35,141 dispatch pc=172, inst=LOAD_FAST(arg=12, lineno=40)
DEBUG 2022-02-14 16:46:35,141 stack ['$170load_global.75']
DEBUG 2022-02-14 16:46:35,142 dispatch pc=174, inst=CALL_FUNCTION(arg=1, lineno=40)
DEBUG 2022-02-14 16:46:35,142 stack ['$170load_global.75', '$steps172.76']
DEBUG 2022-02-14 16:46:35,142 dispatch pc=176, inst=GET_ITER(arg=None, lineno=40)
DEBUG 2022-02-14 16:46:35,142 stack ['$174call_function.77']
DEBUG 2022-02-14 16:46:35,142 end state. edges=[Edge(pc=178, stack=('$176get_iter.78',), blockstack=(), npush=0)]
DEBUG 2022-02-14 16:46:35,142 pending: deque([State(pc_initial=178 nstack_initial=1)])
DEBUG 2022-02-14 16:46:35,142 stack: ['$phi178.0']
DEBUG 2022-02-14 16:46:35,142 dispatch pc=178, inst=FOR_ITER(arg=428, lineno=40)
DEBUG 2022-02-14 16:46:35,142 stack ['$phi178.0']
DEBUG 2022-02-14 16:46:35,142 end state. edges=[Edge(pc=610, stack=(), blockstack=(), npush=0), Edge(pc=182, stack=('$phi178.0', '$178for_iter.2'), blockstack=(), npush=0)]
DEBUG 2022-02-14 16:46:35,142 pending: deque([State(pc_initial=610 nstack_initial=0), State(pc_initial=182 nstack_initial=2)])
DEBUG 2022-02-14 16:46:35,142 stack: []
DEBUG 2022-02-14 16:46:35,142 dispatch pc=610, inst=LOAD_FAST(arg=5, lineno=78)
DEBUG 2022-02-14 16:46:35,142 stack []
DEBUG 2022-02-14 16:46:35,142 dispatch pc=612, inst=POP_JUMP_IF_FALSE(arg=678, lineno=78)
DEBUG 2022-02-14 16:46:35,142 stack ['$glynn610.0']
DEBUG 2022-02-14 16:46:35,142 end state. edges=[Edge(pc=616, stack=(), blockstack=(), npush=0), Edge(pc=678, stack=(), blockstack=(), npush=0)]
DEBUG 2022-02-14 16:46:35,142 pending: deque([State(pc_initial=182 nstack_initial=2), State(pc_initial=616 nstack_initial=0), State(pc_initial=678 nstack_initial=0)])
DEBUG 2022-02-14 16:46:35,142 stack: ['$phi182.0', '$phi182.1']
DEBUG 2022-02-14 16:46:35,142 dispatch pc=182, inst=STORE_FAST(arg=17, lineno=40)
DEBUG 2022-02-14 16:46:35,142 stack ['$phi182.0', '$phi182.1']
DEBUG 2022-02-14 16:46:35,142 dispatch pc=184, inst=LOAD_GLOBAL(arg=2, lineno=42)
DEBUG 2022-02-14 16:46:35,142 stack ['$phi182.0']
DEBUG 2022-02-14 16:46:35,143 dispatch pc=186, inst=LOAD_ATTR(arg=8, lineno=42)
DEBUG 2022-02-14 16:46:35,143 stack ['$phi182.0', '$184load_global.2']
DEBUG 2022-02-14 16:46:35,143 dispatch pc=188, inst=LOAD_FAST(arg=15, lineno=42)
DEBUG 2022-02-14 16:46:35,143 stack ['$phi182.0', '$186load_attr.3']
DEBUG 2022-02-14 16:46:35,143 dispatch pc=190, inst=LOAD_CONST(arg=2, lineno=42)
DEBUG 2022-02-14 16:46:35,143 stack ['$phi182.0', '$186load_attr.3', '$n_D188.4']
DEBUG 2022-02-14 16:46:35,143 dispatch pc=192, inst=LOAD_FAST(arg=3, lineno=42)
DEBUG 2022-02-14 16:46:35,143 stack ['$phi182.0', '$186load_attr.3', '$n_D188.4', '$const190.5']
DEBUG 2022-02-14 16:46:35,143 dispatch pc=194, inst=BINARY_MULTIPLY(arg=None, lineno=42)
DEBUG 2022-02-14 16:46:35,143 stack ['$phi182.0', '$186load_attr.3', '$n_D188.4', '$const190.5', '$batch_max192.6']
DEBUG 2022-02-14 16:46:35,143 dispatch pc=196, inst=LOAD_FAST(arg=4, lineno=42)
DEBUG 2022-02-14 16:46:35,143 stack ['$phi182.0', '$186load_attr.3', '$n_D188.4', '$194binary_multiply.7']
DEBUG 2022-02-14 16:46:35,143 dispatch pc=198, inst=BINARY_ADD(arg=None, lineno=42)
DEBUG 2022-02-14 16:46:35,143 stack ['$phi182.0', '$186load_attr.3', '$n_D188.4', '$194binary_multiply.7', '$odd_cutoff196.8']
DEBUG 2022-02-14 16:46:35,143 dispatch pc=200, inst=LOAD_CONST(arg=3, lineno=42)
DEBUG 2022-02-14 16:46:35,143 stack ['$phi182.0', '$186load_attr.3', '$n_D188.4', '$198binary_add.9']
DEBUG 2022-02-14 16:46:35,143 dispatch pc=202, inst=BINARY_ADD(arg=None, lineno=42)
DEBUG 2022-02-14 16:46:35,143 stack ['$phi182.0', '$186load_attr.3', '$n_D188.4', '$198binary_add.9', '$const200.10']
DEBUG 2022-02-14 16:46:35,143 dispatch pc=204, inst=BUILD_TUPLE(arg=2, lineno=42)
DEBUG 2022-02-14 16:46:35,144 stack ['$phi182.0', '$186load_attr.3', '$n_D188.4', '$202binary_add.11']
DEBUG 2022-02-14 16:46:35,144 dispatch pc=206, inst=LOAD_GLOBAL(arg=2, lineno=42)
DEBUG 2022-02-14 16:46:35,144 stack ['$phi182.0', '$186load_attr.3', '$204build_tuple.12']
DEBUG 2022-02-14 16:46:35,144 dispatch pc=208, inst=LOAD_ATTR(arg=9, lineno=42)
DEBUG 2022-02-14 16:46:35,144 stack ['$phi182.0', '$186load_attr.3', '$204build_tuple.12', '$206load_global.13']
DEBUG 2022-02-14 16:46:35,144 dispatch pc=210, inst=LOAD_CONST(arg=4, lineno=42)
DEBUG 2022-02-14 16:46:35,144 stack ['$phi182.0', '$186load_attr.3', '$204build_tuple.12', '$208load_attr.14']
DEBUG 2022-02-14 16:46:35,144 dispatch pc=212, inst=CALL_FUNCTION_KW(arg=2, lineno=42)
DEBUG 2022-02-14 16:46:35,144 stack ['$phi182.0', '$186load_attr.3', '$204build_tuple.12', '$208load_attr.14', '$const210.15']
DEBUG 2022-02-14 16:46:35,144 dispatch pc=214, inst=STORE_FAST(arg=18, lineno=42)
DEBUG 2022-02-14 16:46:35,144 stack ['$phi182.0', '$212call_function_kw.16']
DEBUG 2022-02-14 16:46:35,144 dispatch pc=216, inst=LOAD_GLOBAL(arg=11, lineno=44)
DEBUG 2022-02-14 16:46:35,144 stack ['$phi182.0']
DEBUG 2022-02-14 16:46:35,144 dispatch pc=218, inst=LOAD_FAST(arg=17, lineno=44)
DEBUG 2022-02-14 16:46:35,144 stack ['$phi182.0', '$216load_global.17']
DEBUG 2022-02-14 16:46:35,144 dispatch pc=220, inst=LOAD_FAST(arg=11, lineno=44)
DEBUG 2022-02-14 16:46:35,144 stack ['$phi182.0', '$216load_global.17', '$j218.18']
DEBUG 2022-02-14 16:46:35,144 dispatch pc=222, inst=CALL_FUNCTION(arg=2, lineno=44)
DEBUG 2022-02-14 16:46:35,144 stack ['$phi182.0', '$216load_global.17', '$j218.18', '$edge_reps220.19']
DEBUG 2022-02-14 16:46:35,144 dispatch pc=224, inst=STORE_FAST(arg=19, lineno=44)
DEBUG 2022-02-14 16:46:35,144 stack ['$phi182.0', '$222call_function.20']
DEBUG 2022-02-14 16:46:35,144 dispatch pc=226, inst=LOAD_FAST(arg=19, lineno=45)
DEBUG 2022-02-14 16:46:35,145 stack ['$phi182.0']
DEBUG 2022-02-14 16:46:35,145 dispatch pc=228, inst=LOAD_METHOD(arg=1, lineno=45)
DEBUG 2022-02-14 16:46:35,145 stack ['$phi182.0', '$kept_edges226.21']
DEBUG 2022-02-14 16:46:35,145 dispatch pc=230, inst=CALL_METHOD(arg=0, lineno=45)
DEBUG 2022-02-14 16:46:35,145 stack ['$phi182.0', '$228load_method.22']
DEBUG 2022-02-14 16:46:35,145 dispatch pc=232, inst=STORE_FAST(arg=20, lineno=45)
DEBUG 2022-02-14 16:46:35,145 stack ['$phi182.0', '$230call_method.23']
DEBUG 2022-02-14 16:46:35,145 dispatch pc=234, inst=LOAD_CONST(arg=5, lineno=47)
DEBUG 2022-02-14 16:46:35,145 stack ['$phi182.0']
DEBUG 2022-02-14 16:46:35,145 dispatch pc=236, inst=STORE_FAST(arg=21, lineno=47)
DEBUG 2022-02-14 16:46:35,145 stack ['$phi182.0', '$const234.24']
DEBUG 2022-02-14 16:46:35,145 dispatch pc=238, inst=LOAD_GLOBAL(arg=12, lineno=48)
DEBUG 2022-02-14 16:46:35,145 stack ['$phi182.0']
DEBUG 2022-02-14 16:46:35,145 dispatch pc=240, inst=LOAD_CONST(arg=3, lineno=48)
DEBUG 2022-02-14 16:46:35,145 stack ['$phi182.0', '$238load_global.25']
DEBUG 2022-02-14 16:46:35,145 dispatch pc=242, inst=LOAD_FAST(arg=8, lineno=48)
DEBUG 2022-02-14 16:46:35,145 stack ['$phi182.0', '$238load_global.25', '$const240.26']
DEBUG 2022-02-14 16:46:35,145 dispatch pc=244, inst=LOAD_CONST(arg=2, lineno=48)
DEBUG 2022-02-14 16:46:35,145 stack ['$phi182.0', '$238load_global.25', '$const240.26', '$n242.27']
DEBUG 2022-02-14 16:46:35,145 dispatch pc=246, inst=BINARY_FLOOR_DIVIDE(arg=None, lineno=48)
DEBUG 2022-02-14 16:46:35,145 stack ['$phi182.0', '$238load_global.25', '$const240.26', '$n242.27', '$const244.28']
DEBUG 2022-02-14 16:46:35,145 dispatch pc=248, inst=CALL_FUNCTION(arg=2, lineno=48)
DEBUG 2022-02-14 16:46:35,145 stack ['$phi182.0', '$238load_global.25', '$const240.26', '$246binary_floor_divide.29']
DEBUG 2022-02-14 16:46:35,145 dispatch pc=250, inst=GET_ITER(arg=None, lineno=48)
DEBUG 2022-02-14 16:46:35,145 stack ['$phi182.0', '$248call_function.30']
DEBUG 2022-02-14 16:46:35,145 end state. edges=[Edge(pc=252, stack=('$phi182.0', '$250get_iter.31'), blockstack=(), npush=0)]
DEBUG 2022-02-14 16:46:35,146 pending: deque([State(pc_initial=616 nstack_initial=0), State(pc_initial=678 nstack_initial=0), State(pc_initial=252 nstack_initial=2)])
DEBUG 2022-02-14 16:46:35,146 stack: []
DEBUG 2022-02-14 16:46:35,146 dispatch pc=616, inst=LOAD_GLOBAL(arg=12, lineno=79)
DEBUG 2022-02-14 16:46:35,146 stack []
DEBUG 2022-02-14 16:46:35,146 dispatch pc=618, inst=LOAD_FAST(arg=16, lineno=79)
DEBUG 2022-02-14 16:46:35,146 stack ['$616load_global.0']
DEBUG 2022-02-14 16:46:35,146 dispatch pc=620, inst=LOAD_ATTR(arg=0, lineno=79)
DEBUG 2022-02-14 16:46:35,146 stack ['$616load_global.0', '$H_batch618.1']
DEBUG 2022-02-14 16:46:35,146 dispatch pc=622, inst=LOAD_CONST(arg=3, lineno=79)
DEBUG 2022-02-14 16:46:35,146 stack ['$616load_global.0', '$620load_attr.2']
DEBUG 2022-02-14 16:46:35,146 dispatch pc=624, inst=BINARY_SUBSCR(arg=None, lineno=79)
DEBUG 2022-02-14 16:46:35,146 stack ['$616load_global.0', '$620load_attr.2', '$const622.3']
DEBUG 2022-02-14 16:46:35,146 dispatch pc=626, inst=CALL_FUNCTION(arg=1, lineno=79)
DEBUG 2022-02-14 16:46:35,146 stack ['$616load_global.0', '$624binary_subscr.4']
DEBUG 2022-02-14 16:46:35,146 dispatch pc=628, inst=GET_ITER(arg=None, lineno=79)
DEBUG 2022-02-14 16:46:35,146 stack ['$626call_function.5']
DEBUG 2022-02-14 16:46:35,146 end state. edges=[Edge(pc=630, stack=('$628get_iter.6',), blockstack=(), npush=0)]
DEBUG 2022-02-14 16:46:35,146 pending: deque([State(pc_initial=678 nstack_initial=0), State(pc_initial=252 nstack_initial=2), State(pc_initial=630 nstack_initial=1)])
DEBUG 2022-02-14 16:46:35,146 stack: []
DEBUG 2022-02-14 16:46:35,146 dispatch pc=678, inst=LOAD_FAST(arg=16, lineno=83)
DEBUG 2022-02-14 16:46:35,146 stack []
DEBUG 2022-02-14 16:46:35,146 dispatch pc=680, inst=RETURN_VALUE(arg=None, lineno=83)
DEBUG 2022-02-14 16:46:35,146 stack ['$H_batch678.0']
DEBUG 2022-02-14 16:46:35,146 end state. edges=[]
DEBUG 2022-02-14 16:46:35,147 pending: deque([State(pc_initial=252 nstack_initial=2), State(pc_initial=630 nstack_initial=1)])
DEBUG 2022-02-14 16:46:35,147 stack: ['$phi252.0', '$phi252.1']
DEBUG 2022-02-14 16:46:35,147 dispatch pc=252, inst=FOR_ITER(arg=28, lineno=48)
DEBUG 2022-02-14 16:46:35,147 stack ['$phi252.0', '$phi252.1']
DEBUG 2022-02-14 16:46:35,147 end state. edges=[Edge(pc=282, stack=('$phi252.0',), blockstack=(), npush=0), Edge(pc=254, stack=('$phi252.0', '$phi252.1', '$252for_iter.3'), blockstack=(), npush=0)]
DEBUG 2022-02-14 16:46:35,147 pending: deque([State(pc_initial=630 nstack_initial=1), State(pc_initial=282 nstack_initial=1), State(pc_initial=254 nstack_initial=3)])
DEBUG 2022-02-14 16:46:35,147 stack: ['$phi630.0']
DEBUG 2022-02-14 16:46:35,147 dispatch pc=630, inst=FOR_ITER(arg=46, lineno=79)
DEBUG 2022-02-14 16:46:35,147 stack ['$phi630.0']
DEBUG 2022-02-14 16:46:35,147 end state. edges=[Edge(pc=678, stack=(), blockstack=(), npush=0), Edge(pc=632, stack=('$phi630.0', '$630for_iter.2'), blockstack=(), npush=0)]
DEBUG 2022-02-14 16:46:35,147 pending: deque([State(pc_initial=282 nstack_initial=1), State(pc_initial=254 nstack_initial=3), State(pc_initial=678 nstack_initial=0), State(pc_initial=632 nstack_initial=2)])
DEBUG 2022-02-14 16:46:35,147 stack: ['$phi282.0']
DEBUG 2022-02-14 16:46:35,147 dispatch pc=282, inst=LOAD_FAST(arg=5, lineno=51)
DEBUG 2022-02-14 16:46:35,147 stack ['$phi282.0']
DEBUG 2022-02-14 16:46:35,147 dispatch pc=284, inst=POP_JUMP_IF_FALSE(arg=302, lineno=51)
DEBUG 2022-02-14 16:46:35,147 stack ['$phi282.0', '$glynn282.1']
DEBUG 2022-02-14 16:46:35,147 end state. edges=[Edge(pc=288, stack=('$phi282.0',), blockstack=(), npush=0), Edge(pc=302, stack=('$phi282.0',), blockstack=(), npush=0)]
DEBUG 2022-02-14 16:46:35,147 pending: deque([State(pc_initial=254 nstack_initial=3), State(pc_initial=678 nstack_initial=0), State(pc_initial=632 nstack_initial=2), State(pc_initial=288 nstack_initial=1), State(pc_initial=302 nstack_initial=1)])
DEBUG 2022-02-14 16:46:35,147 stack: ['$phi254.0', '$phi254.1', '$phi254.2']
DEBUG 2022-02-14 16:46:35,148 dispatch pc=254, inst=STORE_FAST(arg=22, lineno=48)
DEBUG 2022-02-14 16:46:35,148 stack ['$phi254.0', '$phi254.1', '$phi254.2']
DEBUG 2022-02-14 16:46:35,148 dispatch pc=256, inst=LOAD_FAST(arg=21, lineno=49)
DEBUG 2022-02-14 16:46:35,148 stack ['$phi254.0', '$phi254.1']
DEBUG 2022-02-14 16:46:35,148 dispatch pc=258, inst=LOAD_FAST(arg=14, lineno=49)
DEBUG 2022-02-14 16:46:35,148 stack ['$phi254.0', '$phi254.1', '$binom_prod256.3']
DEBUG 2022-02-14 16:46:35,148 dispatch pc=260, inst=LOAD_FAST(arg=11, lineno=49)
DEBUG 2022-02-14 16:46:35,148 stack ['$phi254.0', '$phi254.1', '$binom_prod256.3', '$binoms258.4']
DEBUG 2022-02-14 16:46:35,148 dispatch pc=262, inst=LOAD_FAST(arg=22, lineno=49)
DEBUG 2022-02-14 16:46:35,148 stack ['$phi254.0', '$phi254.1', '$binom_prod256.3', '$binoms258.4', '$edge_reps260.5']
DEBUG 2022-02-14 16:46:35,148 dispatch pc=264, inst=BINARY_SUBSCR(arg=None, lineno=49)
DEBUG 2022-02-14 16:46:35,148 stack ['$phi254.0', '$phi254.1', '$binom_prod256.3', '$binoms258.4', '$edge_reps260.5', '$i262.6']
DEBUG 2022-02-14 16:46:35,148 dispatch pc=266, inst=LOAD_FAST(arg=19, lineno=49)
DEBUG 2022-02-14 16:46:35,148 stack ['$phi254.0', '$phi254.1', '$binom_prod256.3', '$binoms258.4', '$264binary_subscr.7']
DEBUG 2022-02-14 16:46:35,148 dispatch pc=268, inst=LOAD_FAST(arg=22, lineno=49)
DEBUG 2022-02-14 16:46:35,148 stack ['$phi254.0', '$phi254.1', '$binom_prod256.3', '$binoms258.4', '$264binary_subscr.7', '$kept_edges266.8']
DEBUG 2022-02-14 16:46:35,148 dispatch pc=270, inst=BINARY_SUBSCR(arg=None, lineno=49)
DEBUG 2022-02-14 16:46:35,148 stack ['$phi254.0', '$phi254.1', '$binom_prod256.3', '$binoms258.4', '$264binary_subscr.7', '$kept_edges266.8', '$i268.9']
DEBUG 2022-02-14 16:46:35,148 dispatch pc=272, inst=BUILD_TUPLE(arg=2, lineno=49)
DEBUG 2022-02-14 16:46:35,148 stack ['$phi254.0', '$phi254.1', '$binom_prod256.3', '$binoms258.4', '$264binary_subscr.7', '$270binary_subscr.10']
DEBUG 2022-02-14 16:46:35,148 dispatch pc=274, inst=BINARY_SUBSCR(arg=None, lineno=49)
DEBUG 2022-02-14 16:46:35,148 stack ['$phi254.0', '$phi254.1', '$binom_prod256.3', '$binoms258.4', '$272build_tuple.11']
DEBUG 2022-02-14 16:46:35,148 dispatch pc=276, inst=INPLACE_MULTIPLY(arg=None, lineno=49)
DEBUG 2022-02-14 16:46:35,148 stack ['$phi254.0', '$phi254.1', '$binom_prod256.3', '$274binary_subscr.12']
DEBUG 2022-02-14 16:46:35,148 dispatch pc=278, inst=STORE_FAST(arg=21, lineno=49)
DEBUG 2022-02-14 16:46:35,148 stack ['$phi254.0', '$phi254.1', '$276inplace_multiply.13']
DEBUG 2022-02-14 16:46:35,149 dispatch pc=280, inst=JUMP_ABSOLUTE(arg=252, lineno=49)
DEBUG 2022-02-14 16:46:35,149 stack ['$phi254.0', '$phi254.1']
DEBUG 2022-02-14 16:46:35,149 end state. edges=[Edge(pc=252, stack=('$phi254.0', '$phi254.1'), blockstack=(), npush=0)]
DEBUG 2022-02-14 16:46:35,149 pending: deque([State(pc_initial=678 nstack_initial=0), State(pc_initial=632 nstack_initial=2), State(pc_initial=288 nstack_initial=1), State(pc_initial=302 nstack_initial=1), State(pc_initial=252 nstack_initial=2)])
DEBUG 2022-02-14 16:46:35,149 pending: deque([State(pc_initial=632 nstack_initial=2), State(pc_initial=288 nstack_initial=1), State(pc_initial=302 nstack_initial=1), State(pc_initial=252 nstack_initial=2)])
DEBUG 2022-02-14 16:46:35,149 stack: ['$phi632.0', '$phi632.1']
DEBUG 2022-02-14 16:46:35,149 dispatch pc=632, inst=STORE_FAST(arg=17, lineno=79)
DEBUG 2022-02-14 16:46:35,149 stack ['$phi632.0', '$phi632.1']
DEBUG 2022-02-14 16:46:35,149 dispatch pc=634, inst=LOAD_FAST(arg=9, lineno=80)
DEBUG 2022-02-14 16:46:35,149 stack ['$phi632.0']
DEBUG 2022-02-14 16:46:35,149 dispatch pc=636, inst=LOAD_FAST(arg=17, lineno=80)
DEBUG 2022-02-14 16:46:35,149 stack ['$phi632.0', '$N_fixed634.2']
DEBUG 2022-02-14 16:46:35,149 dispatch pc=638, inst=BINARY_ADD(arg=None, lineno=80)
DEBUG 2022-02-14 16:46:35,149 stack ['$phi632.0', '$N_fixed634.2', '$j636.3']
DEBUG 2022-02-14 16:46:35,149 dispatch pc=640, inst=STORE_FAST(arg=36, lineno=80)
DEBUG 2022-02-14 16:46:35,149 stack ['$phi632.0', '$638binary_add.4']
DEBUG 2022-02-14 16:46:35,149 dispatch pc=642, inst=LOAD_FAST(arg=16, lineno=81)
DEBUG 2022-02-14 16:46:35,149 stack ['$phi632.0']
DEBUG 2022-02-14 16:46:35,149 dispatch pc=644, inst=LOAD_CONST(arg=0, lineno=81)
DEBUG 2022-02-14 16:46:35,149 stack ['$phi632.0', '$H_batch642.5']
DEBUG 2022-02-14 16:46:35,149 dispatch pc=646, inst=LOAD_CONST(arg=0, lineno=81)
DEBUG 2022-02-14 16:46:35,149 stack ['$phi632.0', '$H_batch642.5', '$const644.6']
DEBUG 2022-02-14 16:46:35,149 dispatch pc=648, inst=BUILD_SLICE(arg=2, lineno=81)
DEBUG 2022-02-14 16:46:35,149 stack ['$phi632.0', '$H_batch642.5', '$const644.6', '$const646.7']
DEBUG 2022-02-14 16:46:35,150 dispatch pc=650, inst=LOAD_FAST(arg=17, lineno=81)
DEBUG 2022-02-14 16:46:35,150 stack ['$phi632.0', '$H_batch642.5', '$648build_slice.9']
DEBUG 2022-02-14 16:46:35,150 dispatch pc=652, inst=BUILD_TUPLE(arg=2, lineno=81)
DEBUG 2022-02-14 16:46:35,150 stack ['$phi632.0', '$H_batch642.5', '$648build_slice.9', '$j650.10']
DEBUG 2022-02-14 16:46:35,150 dispatch pc=654, inst=DUP_TOP_TWO(arg=None, lineno=81)
DEBUG 2022-02-14 16:46:35,150 stack ['$phi632.0', '$H_batch642.5', '$652build_tuple.11']
DEBUG 2022-02-14 16:46:35,150 dispatch pc=656, inst=BINARY_SUBSCR(arg=None, lineno=81)
DEBUG 2022-02-14 16:46:35,150 stack ['$phi632.0', '$H_batch642.5', '$652build_tuple.11', '$654dup_top_two.12', '$654dup_top_two.13']
DEBUG 2022-02-14 16:46:35,150 dispatch pc=658, inst=LOAD_CONST(arg=7, lineno=81)
DEBUG 2022-02-14 16:46:35,150 stack ['$phi632.0', '$H_batch642.5', '$652build_tuple.11', '$656binary_subscr.14']
DEBUG 2022-02-14 16:46:35,150 dispatch pc=660, inst=LOAD_FAST(arg=36, lineno=81)
DEBUG 2022-02-14 16:46:35,150 stack ['$phi632.0', '$H_batch642.5', '$652build_tuple.11', '$656binary_subscr.14', '$const658.15']
DEBUG 2022-02-14 16:46:35,150 dispatch pc=662, inst=LOAD_CONST(arg=2, lineno=81)
DEBUG 2022-02-14 16:46:35,150 stack ['$phi632.0', '$H_batch642.5', '$652build_tuple.11', '$656binary_subscr.14', '$const658.15', '$x660.16']
DEBUG 2022-02-14 16:46:35,150 dispatch pc=664, inst=BINARY_FLOOR_DIVIDE(arg=None, lineno=81)
DEBUG 2022-02-14 16:46:35,150 stack ['$phi632.0', '$H_batch642.5', '$652build_tuple.11', '$656binary_subscr.14', '$const658.15', '$x660.16', '$const662.17']
DEBUG 2022-02-14 16:46:35,150 dispatch pc=666, inst=BINARY_POWER(arg=None, lineno=81)
DEBUG 2022-02-14 16:46:35,150 stack ['$phi632.0', '$H_batch642.5', '$652build_tuple.11', '$656binary_subscr.14', '$const658.15', '$664binary_floor_divide.18']
DEBUG 2022-02-14 16:46:35,150 dispatch pc=668, inst=INPLACE_MULTIPLY(arg=None, lineno=81)
DEBUG 2022-02-14 16:46:35,150 stack ['$phi632.0', '$H_batch642.5', '$652build_tuple.11', '$656binary_subscr.14', '$666binary_power.19']
DEBUG 2022-02-14 16:46:35,150 dispatch pc=670, inst=ROT_THREE(arg=None, lineno=81)
DEBUG 2022-02-14 16:46:35,150 stack ['$phi632.0', '$H_batch642.5', '$652build_tuple.11', '$668inplace_multiply.20']
DEBUG 2022-02-14 16:46:35,150 dispatch pc=672, inst=STORE_SUBSCR(arg=None, lineno=81)
DEBUG 2022-02-14 16:46:35,150 stack ['$phi632.0', '$668inplace_multiply.20', '$H_batch642.5', '$652build_tuple.11']
DEBUG 2022-02-14 16:46:35,151 dispatch pc=674, inst=JUMP_ABSOLUTE(arg=630, lineno=81)
DEBUG 2022-02-14 16:46:35,151 stack ['$phi632.0']
DEBUG 2022-02-14 16:46:35,151 end state. edges=[Edge(pc=630, stack=('$phi632.0',), blockstack=(), npush=0)]
DEBUG 2022-02-14 16:46:35,151 pending: deque([State(pc_initial=288 nstack_initial=1), State(pc_initial=302 nstack_initial=1), State(pc_initial=252 nstack_initial=2), State(pc_initial=630 nstack_initial=1)])
DEBUG 2022-02-14 16:46:35,151 stack: ['$phi288.0']
DEBUG 2022-02-14 16:46:35,151 dispatch pc=288, inst=LOAD_CONST(arg=2, lineno=52)
DEBUG 2022-02-14 16:46:35,151 stack ['$phi288.0']
DEBUG 2022-02-14 16:46:35,151 dispatch pc=290, inst=LOAD_FAST(arg=19, lineno=52)
DEBUG 2022-02-14 16:46:35,151 stack ['$phi288.0', '$const288.1']
DEBUG 2022-02-14 16:46:35,151 dispatch pc=292, inst=BINARY_MULTIPLY(arg=None, lineno=52)
DEBUG 2022-02-14 16:46:35,151 stack ['$phi288.0', '$const288.1', '$kept_edges290.2']
DEBUG 2022-02-14 16:46:35,151 dispatch pc=294, inst=LOAD_FAST(arg=11, lineno=52)
DEBUG 2022-02-14 16:46:35,151 stack ['$phi288.0', '$292binary_multiply.3']
DEBUG 2022-02-14 16:46:35,151 dispatch pc=296, inst=BINARY_SUBTRACT(arg=None, lineno=52)
DEBUG 2022-02-14 16:46:35,151 stack ['$phi288.0', '$292binary_multiply.3', '$edge_reps294.4']
DEBUG 2022-02-14 16:46:35,151 dispatch pc=298, inst=STORE_FAST(arg=23, lineno=52)
DEBUG 2022-02-14 16:46:35,151 stack ['$phi288.0', '$296binary_subtract.5']
DEBUG 2022-02-14 16:46:35,151 dispatch pc=300, inst=JUMP_FORWARD(arg=4, lineno=52)
DEBUG 2022-02-14 16:46:35,151 stack ['$phi288.0']
DEBUG 2022-02-14 16:46:35,151 end state. edges=[Edge(pc=306, stack=('$phi288.0',), blockstack=(), npush=0)]
DEBUG 2022-02-14 16:46:35,151 pending: deque([State(pc_initial=302 nstack_initial=1), State(pc_initial=252 nstack_initial=2), State(pc_initial=630 nstack_initial=1), State(pc_initial=306 nstack_initial=1)])
DEBUG 2022-02-14 16:46:35,151 stack: ['$phi302.0']
DEBUG 2022-02-14 16:46:35,151 dispatch pc=302, inst=LOAD_FAST(arg=19, lineno=54)
DEBUG 2022-02-14 16:46:35,152 stack ['$phi302.0']
DEBUG 2022-02-14 16:46:35,152 dispatch pc=304, inst=STORE_FAST(arg=23, lineno=54)
DEBUG 2022-02-14 16:46:35,152 stack ['$phi302.0', '$kept_edges302.1']
DEBUG 2022-02-14 16:46:35,152 end state. edges=[Edge(pc=306, stack=('$phi302.0',), blockstack=(), npush=0)]
DEBUG 2022-02-14 16:46:35,152 pending: deque([State(pc_initial=252 nstack_initial=2), State(pc_initial=630 nstack_initial=1), State(pc_initial=306 nstack_initial=1), State(pc_initial=306 nstack_initial=1)])
DEBUG 2022-02-14 16:46:35,152 pending: deque([State(pc_initial=630 nstack_initial=1), State(pc_initial=306 nstack_initial=1), State(pc_initial=306 nstack_initial=1)])
DEBUG 2022-02-14 16:46:35,152 pending: deque([State(pc_initial=306 nstack_initial=1), State(pc_initial=306 nstack_initial=1)])
DEBUG 2022-02-14 16:46:35,152 stack: ['$phi306.0']
DEBUG 2022-02-14 16:46:35,152 dispatch pc=306, inst=LOAD_GLOBAL(arg=13, lineno=56)
DEBUG 2022-02-14 16:46:35,152 stack ['$phi306.0']
DEBUG 2022-02-14 16:46:35,152 dispatch pc=308, inst=LOAD_FAST(arg=23, lineno=56)
DEBUG 2022-02-14 16:46:35,152 stack ['$phi306.0', '$306load_global.1']
DEBUG 2022-02-14 16:46:35,152 dispatch pc=310, inst=LOAD_FAST(arg=0, lineno=56)
DEBUG 2022-02-14 16:46:35,152 stack ['$phi306.0', '$306load_global.1', '$delta308.2']
DEBUG 2022-02-14 16:46:35,152 dispatch pc=312, inst=LOAD_FAST(arg=1, lineno=56)
DEBUG 2022-02-14 16:46:35,152 stack ['$phi306.0', '$306load_global.1', '$delta308.2', '$A310.3']
DEBUG 2022-02-14 16:46:35,152 dispatch pc=314, inst=LOAD_CONST(arg=1, lineno=56)
DEBUG 2022-02-14 16:46:35,152 stack ['$phi306.0', '$306load_global.1', '$delta308.2', '$A310.3', '$D312.4']
DEBUG 2022-02-14 16:46:35,152 dispatch pc=316, inst=LOAD_CONST(arg=0, lineno=56)
DEBUG 2022-02-14 16:46:35,152 stack ['$phi306.0', '$306load_global.1', '$delta308.2', '$A310.3', '$D312.4', '$const314.5']
DEBUG 2022-02-14 16:46:35,152 dispatch pc=318, inst=LOAD_CONST(arg=0, lineno=56)
DEBUG 2022-02-14 16:46:35,152 stack ['$phi306.0', '$306load_global.1', '$delta308.2', '$A310.3', '$D312.4', '$const314.5', '$const316.6']
DEBUG 2022-02-14 16:46:35,152 dispatch pc=320, inst=BUILD_SLICE(arg=2, lineno=56)
DEBUG 2022-02-14 16:46:35,152 stack ['$phi306.0', '$306load_global.1', '$delta308.2', '$A310.3', '$D312.4', '$const314.5', '$const316.6', '$const318.7']
DEBUG 2022-02-14 16:46:35,153 dispatch pc=322, inst=BUILD_TUPLE(arg=2, lineno=56)
DEBUG 2022-02-14 16:46:35,153 stack ['$phi306.0', '$306load_global.1', '$delta308.2', '$A310.3', '$D312.4', '$const314.5', '$320build_slice.9']
DEBUG 2022-02-14 16:46:35,153 dispatch pc=324, inst=BINARY_SUBSCR(arg=None, lineno=56)
DEBUG 2022-02-14 16:46:35,153 stack ['$phi306.0', '$306load_global.1', '$delta308.2', '$A310.3', '$D312.4', '$322build_tuple.10']
DEBUG 2022-02-14 16:46:35,153 dispatch pc=326, inst=LOAD_FAST(arg=7, lineno=56)
DEBUG 2022-02-14 16:46:35,153 stack ['$phi306.0', '$306load_global.1', '$delta308.2', '$A310.3', '$324binary_subscr.11']
DEBUG 2022-02-14 16:46:35,153 dispatch pc=328, inst=CALL_FUNCTION(arg=4, lineno=56)
DEBUG 2022-02-14 16:46:35,153 stack ['$phi306.0', '$306load_global.1', '$delta308.2', '$A310.3', '$324binary_subscr.11', '$oddV326.12']
DEBUG 2022-02-14 16:46:35,153 dispatch pc=330, inst=UNPACK_SEQUENCE(arg=4, lineno=56)
DEBUG 2022-02-14 16:46:35,153 stack ['$phi306.0', '$328call_function.13']
DEBUG 2022-02-14 16:46:35,153 dispatch pc=332, inst=STORE_FAST(arg=24, lineno=56)
DEBUG 2022-02-14 16:46:35,153 stack ['$phi306.0', '$330unpack_sequence.17', '$330unpack_sequence.16', '$330unpack_sequence.15', '$330unpack_sequence.14']
DEBUG 2022-02-14 16:46:35,153 dispatch pc=334, inst=STORE_FAST(arg=25, lineno=56)
DEBUG 2022-02-14 16:46:35,153 stack ['$phi306.0', '$330unpack_sequence.17', '$330unpack_sequence.16', '$330unpack_sequence.15']
DEBUG 2022-02-14 16:46:35,153 dispatch pc=336, inst=STORE_FAST(arg=26, lineno=56)
DEBUG 2022-02-14 16:46:35,153 stack ['$phi306.0', '$330unpack_sequence.17', '$330unpack_sequence.16']
DEBUG 2022-02-14 16:46:35,153 dispatch pc=338, inst=STORE_FAST(arg=27, lineno=56)
DEBUG 2022-02-14 16:46:35,153 stack ['$phi306.0', '$330unpack_sequence.17']
DEBUG 2022-02-14 16:46:35,153 dispatch pc=340, inst=LOAD_GLOBAL(arg=14, lineno=58)
DEBUG 2022-02-14 16:46:35,153 stack ['$phi306.0']
DEBUG 2022-02-14 16:46:35,153 dispatch pc=342, inst=LOAD_FAST(arg=24, lineno=58)
DEBUG 2022-02-14 16:46:35,153 stack ['$phi306.0', '$340load_global.19']
DEBUG 2022-02-14 16:46:35,153 dispatch pc=344, inst=CALL_FUNCTION(arg=1, lineno=58)
DEBUG 2022-02-14 16:46:35,153 stack ['$phi306.0', '$340load_global.19', '$AX_S342.20']
DEBUG 2022-02-14 16:46:35,154 dispatch pc=346, inst=STORE_FAST(arg=28, lineno=58)
DEBUG 2022-02-14 16:46:35,154 stack ['$phi306.0', '$344call_function.21']
DEBUG 2022-02-14 16:46:35,154 dispatch pc=348, inst=LOAD_GLOBAL(arg=12, lineno=60)
DEBUG 2022-02-14 16:46:35,154 stack ['$phi306.0']
DEBUG 2022-02-14 16:46:35,154 dispatch pc=350, inst=LOAD_FAST(arg=15, lineno=60)
DEBUG 2022-02-14 16:46:35,154 stack ['$phi306.0', '$348load_global.22']
DEBUG 2022-02-14 16:46:35,154 dispatch pc=352, inst=CALL_FUNCTION(arg=1, lineno=60)
DEBUG 2022-02-14 16:46:35,154 stack ['$phi306.0', '$348load_global.22', '$n_D350.23']
DEBUG 2022-02-14 16:46:35,154 dispatch pc=354, inst=GET_ITER(arg=None, lineno=60)
DEBUG 2022-02-14 16:46:35,154 stack ['$phi306.0', '$352call_function.24']
DEBUG 2022-02-14 16:46:35,154 end state. edges=[Edge(pc=356, stack=('$phi306.0', '$354get_iter.25'), blockstack=(), npush=0)]
DEBUG 2022-02-14 16:46:35,154 pending: deque([State(pc_initial=306 nstack_initial=1), State(pc_initial=356 nstack_initial=2)])
DEBUG 2022-02-14 16:46:35,154 pending: deque([State(pc_initial=356 nstack_initial=2)])
DEBUG 2022-02-14 16:46:35,154 stack: ['$phi356.0', '$phi356.1']
DEBUG 2022-02-14 16:46:35,154 dispatch pc=356, inst=FOR_ITER(arg=242, lineno=60)
DEBUG 2022-02-14 16:46:35,154 stack ['$phi356.0', '$phi356.1']
DEBUG 2022-02-14 16:46:35,154 end state. edges=[Edge(pc=600, stack=('$phi356.0',), blockstack=(), npush=0), Edge(pc=358, stack=('$phi356.0', '$phi356.1', '$356for_iter.3'), blockstack=(), npush=0)]
DEBUG 2022-02-14 16:46:35,154 pending: deque([State(pc_initial=600 nstack_initial=1), State(pc_initial=358 nstack_initial=3)])
DEBUG 2022-02-14 16:46:35,154 stack: ['$phi600.0']
DEBUG 2022-02-14 16:46:35,154 dispatch pc=600, inst=LOAD_FAST(arg=16, lineno=76)
DEBUG 2022-02-14 16:46:35,154 stack ['$phi600.0']
DEBUG 2022-02-14 16:46:35,154 dispatch pc=602, inst=LOAD_FAST(arg=18, lineno=76)
DEBUG 2022-02-14 16:46:35,154 stack ['$phi600.0', '$H_batch600.1']
DEBUG 2022-02-14 16:46:35,155 dispatch pc=604, inst=INPLACE_ADD(arg=None, lineno=76)
DEBUG 2022-02-14 16:46:35,155 stack ['$phi600.0', '$H_batch600.1', '$Hnew602.2']
DEBUG 2022-02-14 16:46:35,155 dispatch pc=606, inst=STORE_FAST(arg=16, lineno=76)
DEBUG 2022-02-14 16:46:35,155 stack ['$phi600.0', '$604inplace_add.3']
DEBUG 2022-02-14 16:46:35,155 dispatch pc=608, inst=JUMP_ABSOLUTE(arg=178, lineno=76)
DEBUG 2022-02-14 16:46:35,155 stack ['$phi600.0']
DEBUG 2022-02-14 16:46:35,155 end state. edges=[Edge(pc=178, stack=('$phi600.0',), blockstack=(), npush=0)]
DEBUG 2022-02-14 16:46:35,155 pending: deque([State(pc_initial=358 nstack_initial=3), State(pc_initial=178 nstack_initial=1)])
DEBUG 2022-02-14 16:46:35,155 stack: ['$phi358.0', '$phi358.1', '$phi358.2']
DEBUG 2022-02-14 16:46:35,155 dispatch pc=358, inst=STORE_FAST(arg=29, lineno=60)
DEBUG 2022-02-14 16:46:35,155 stack ['$phi358.0', '$phi358.1', '$phi358.2']
DEBUG 2022-02-14 16:46:35,155 dispatch pc=360, inst=LOAD_GLOBAL(arg=15, lineno=61)
DEBUG 2022-02-14 16:46:35,155 stack ['$phi358.0', '$phi358.1']
DEBUG 2022-02-14 16:46:35,155 dispatch pc=362, inst=LOAD_FAST(arg=23, lineno=61)
DEBUG 2022-02-14 16:46:35,155 stack ['$phi358.0', '$phi358.1', '$360load_global.3']
DEBUG 2022-02-14 16:46:35,155 dispatch pc=364, inst=LOAD_FAST(arg=1, lineno=61)
DEBUG 2022-02-14 16:46:35,155 stack ['$phi358.0', '$phi358.1', '$360load_global.3', '$delta362.4']
DEBUG 2022-02-14 16:46:35,155 dispatch pc=366, inst=LOAD_FAST(arg=29, lineno=61)
DEBUG 2022-02-14 16:46:35,155 stack ['$phi358.0', '$phi358.1', '$360load_global.3', '$delta362.4', '$D364.5']
DEBUG 2022-02-14 16:46:35,155 dispatch pc=368, inst=LOAD_CONST(arg=0, lineno=61)
DEBUG 2022-02-14 16:46:35,155 stack ['$phi358.0', '$phi358.1', '$360load_global.3', '$delta362.4', '$D364.5', '$k366.6']
DEBUG 2022-02-14 16:46:35,155 dispatch pc=370, inst=LOAD_CONST(arg=0, lineno=61)
DEBUG 2022-02-14 16:46:35,155 stack ['$phi358.0', '$phi358.1', '$360load_global.3', '$delta362.4', '$D364.5', '$k366.6', '$const368.7']
DEBUG 2022-02-14 16:46:35,155 dispatch pc=372, inst=BUILD_SLICE(arg=2, lineno=61)
DEBUG 2022-02-14 16:46:35,155 stack ['$phi358.0', '$phi358.1', '$360load_global.3', '$delta362.4', '$D364.5', '$k366.6', '$const368.7', '$const370.8']
DEBUG 2022-02-14 16:46:35,155 dispatch pc=374, inst=BUILD_TUPLE(arg=2, lineno=61)
DEBUG 2022-02-14 16:46:35,156 stack ['$phi358.0', '$phi358.1', '$360load_global.3', '$delta362.4', '$D364.5', '$k366.6', '$372build_slice.10']
DEBUG 2022-02-14 16:46:35,156 dispatch pc=376, inst=BINARY_SUBSCR(arg=None, lineno=61)
DEBUG 2022-02-14 16:46:35,156 stack ['$phi358.0', '$phi358.1', '$360load_global.3', '$delta362.4', '$D364.5', '$374build_tuple.11']
DEBUG 2022-02-14 16:46:35,156 dispatch pc=378, inst=CALL_FUNCTION(arg=2, lineno=61)
DEBUG 2022-02-14 16:46:35,156 stack ['$phi358.0', '$phi358.1', '$360load_global.3', '$delta362.4', '$376binary_subscr.12']
DEBUG 2022-02-14 16:46:35,156 dispatch pc=380, inst=UNPACK_SEQUENCE(arg=2, lineno=61)
DEBUG 2022-02-14 16:46:35,156 stack ['$phi358.0', '$phi358.1', '$378call_function.13']
DEBUG 2022-02-14 16:46:35,156 dispatch pc=382, inst=STORE_FAST(arg=25, lineno=61)
DEBUG 2022-02-14 16:46:35,156 stack ['$phi358.0', '$phi358.1', '$380unpack_sequence.15', '$380unpack_sequence.14']
DEBUG 2022-02-14 16:46:35,156 dispatch pc=384, inst=STORE_FAST(arg=26, lineno=61)
DEBUG 2022-02-14 16:46:35,156 stack ['$phi358.0', '$phi358.1', '$380unpack_sequence.15']
DEBUG 2022-02-14 16:46:35,156 dispatch pc=386, inst=LOAD_GLOBAL(arg=16, lineno=63)
DEBUG 2022-02-14 16:46:35,156 stack ['$phi358.0', '$phi358.1']
DEBUG 2022-02-14 16:46:35,156 dispatch pc=388, inst=LOAD_FAST(arg=28, lineno=63)
DEBUG 2022-02-14 16:46:35,156 stack ['$phi358.0', '$phi358.1', '$386load_global.17']
DEBUG 2022-02-14 16:46:35,156 dispatch pc=390, inst=LOAD_FAST(arg=24, lineno=63)
DEBUG 2022-02-14 16:46:35,156 stack ['$phi358.0', '$phi358.1', '$386load_global.17', '$E388.18']
DEBUG 2022-02-14 16:46:35,156 dispatch pc=392, inst=LOAD_FAST(arg=25, lineno=63)
DEBUG 2022-02-14 16:46:35,156 stack ['$phi358.0', '$phi358.1', '$386load_global.17', '$E388.18', '$AX_S390.19']
DEBUG 2022-02-14 16:46:35,156 dispatch pc=394, inst=LOAD_FAST(arg=26, lineno=63)
DEBUG 2022-02-14 16:46:35,156 stack ['$phi358.0', '$phi358.1', '$386load_global.17', '$E388.18', '$AX_S390.19', '$XD_S392.20']
DEBUG 2022-02-14 16:46:35,156 dispatch pc=396, inst=LOAD_FAST(arg=10, lineno=63)
DEBUG 2022-02-14 16:46:35,156 stack ['$phi358.0', '$phi358.1', '$386load_global.17', '$E388.18', '$AX_S390.19', '$XD_S392.20', '$D_S394.21']
DEBUG 2022-02-14 16:46:35,156 dispatch pc=398, inst=CALL_FUNCTION(arg=5, lineno=63)
DEBUG 2022-02-14 16:46:35,156 stack ['$phi358.0', '$phi358.1', '$386load_global.17', '$E388.18', '$AX_S390.19', '$XD_S392.20', '$D_S394.21', '$N_max396.22']
DEBUG 2022-02-14 16:46:35,157 dispatch pc=400, inst=STORE_FAST(arg=30, lineno=63)
DEBUG 2022-02-14 16:46:35,157 stack ['$phi358.0', '$phi358.1', '$398call_function.23']
DEBUG 2022-02-14 16:46:35,157 dispatch pc=402, inst=LOAD_GLOBAL(arg=17, lineno=64)
DEBUG 2022-02-14 16:46:35,157 stack ['$phi358.0', '$phi358.1']
DEBUG 2022-02-14 16:46:35,157 dispatch pc=404, inst=LOAD_FAST(arg=28, lineno=64)
DEBUG 2022-02-14 16:46:35,157 stack ['$phi358.0', '$phi358.1', '$402load_global.24']
DEBUG 2022-02-14 16:46:35,157 dispatch pc=406, inst=LOAD_FAST(arg=24, lineno=64)
DEBUG 2022-02-14 16:46:35,157 stack ['$phi358.0', '$phi358.1', '$402load_global.24', '$E404.25']
DEBUG 2022-02-14 16:46:35,157 dispatch pc=408, inst=LOAD_FAST(arg=25, lineno=64)
DEBUG 2022-02-14 16:46:35,157 stack ['$phi358.0', '$phi358.1', '$402load_global.24', '$E404.25', '$AX_S406.26']
DEBUG 2022-02-14 16:46:35,157 dispatch pc=410, inst=LOAD_FAST(arg=26, lineno=64)
DEBUG 2022-02-14 16:46:35,157 stack ['$phi358.0', '$phi358.1', '$402load_global.24', '$E404.25', '$AX_S406.26', '$XD_S408.27']
DEBUG 2022-02-14 16:46:35,157 dispatch pc=412, inst=LOAD_FAST(arg=10, lineno=64)
DEBUG 2022-02-14 16:46:35,157 stack ['$phi358.0', '$phi358.1', '$402load_global.24', '$E404.25', '$AX_S406.26', '$XD_S408.27', '$D_S410.28']
DEBUG 2022-02-14 16:46:35,157 dispatch pc=414, inst=LOAD_FAST(arg=6, lineno=64)
DEBUG 2022-02-14 16:46:35,157 stack ['$phi358.0', '$phi358.1', '$402load_global.24', '$E404.25', '$AX_S406.26', '$XD_S408.27', '$D_S410.28', '$N_max412.29']
DEBUG 2022-02-14 16:46:35,157 dispatch pc=416, inst=LOAD_FAST(arg=29, lineno=64)
DEBUG 2022-02-14 16:46:35,157 stack ['$phi358.0', '$phi358.1', '$402load_global.24', '$E404.25', '$AX_S406.26', '$XD_S408.27', '$D_S410.28', '$N_max412.29', '$oddloop414.30']
DEBUG 2022-02-14 16:46:35,157 dispatch pc=418, inst=BINARY_SUBSCR(arg=None, lineno=64)
DEBUG 2022-02-14 16:46:35,157 stack ['$phi358.0', '$phi358.1', '$402load_global.24', '$E404.25', '$AX_S406.26', '$XD_S408.27', '$D_S410.28', '$N_max412.29', '$oddloop414.30', '$k416.31']
DEBUG 2022-02-14 16:46:35,157 dispatch pc=420, inst=LOAD_FAST(arg=27, lineno=64)
DEBUG 2022-02-14 16:46:35,157 stack ['$phi358.0', '$phi358.1', '$402load_global.24', '$E404.25', '$AX_S406.26', '$XD_S408.27', '$D_S410.28', '$N_max412.29', '$418binary_subscr.32']
DEBUG 2022-02-14 16:46:35,158 dispatch pc=422, inst=CALL_FUNCTION(arg=7, lineno=64)
DEBUG 2022-02-14 16:46:35,158 stack ['$phi358.0', '$phi358.1', '$402load_global.24', '$E404.25', '$AX_S406.26', '$XD_S408.27', '$D_S410.28', '$N_max412.29', '$418binary_subscr.32', '$oddVX_S420.33']
DEBUG 2022-02-14 16:46:35,158 dispatch pc=424, inst=STORE_FAST(arg=31, lineno=64)
DEBUG 2022-02-14 16:46:35,158 stack ['$phi358.0', '$phi358.1', '$422call_function.34']
DEBUG 2022-02-14 16:46:35,158 dispatch pc=426, inst=LOAD_GLOBAL(arg=12, lineno=66)
DEBUG 2022-02-14 16:46:35,158 stack ['$phi358.0', '$phi358.1']
DEBUG 2022-02-14 16:46:35,158 dispatch pc=428, inst=LOAD_CONST(arg=2, lineno=66)
DEBUG 2022-02-14 16:46:35,158 stack ['$phi358.0', '$phi358.1', '$426load_global.35']
DEBUG 2022-02-14 16:46:35,158 dispatch pc=430, inst=LOAD_FAST(arg=19, lineno=66)
DEBUG 2022-02-14 16:46:35,158 stack ['$phi358.0', '$phi358.1', '$426load_global.35', '$const428.36']
DEBUG 2022-02-14 16:46:35,158 dispatch pc=432, inst=LOAD_CONST(arg=1, lineno=66)
DEBUG 2022-02-14 16:46:35,158 stack ['$phi358.0', '$phi358.1', '$426load_global.35', '$const428.36', '$kept_edges430.37']
DEBUG 2022-02-14 16:46:35,158 dispatch pc=434, inst=BINARY_SUBSCR(arg=None, lineno=66)
DEBUG 2022-02-14 16:46:35,158 stack ['$phi358.0', '$phi358.1', '$426load_global.35', '$const428.36', '$kept_edges430.37', '$const432.38']
DEBUG 2022-02-14 16:46:35,158 dispatch pc=436, inst=BINARY_MULTIPLY(arg=None, lineno=66)
DEBUG 2022-02-14 16:46:35,158 stack ['$phi358.0', '$phi358.1', '$426load_global.35', '$const428.36', '$434binary_subscr.39']
DEBUG 2022-02-14 16:46:35,158 dispatch pc=438, inst=LOAD_CONST(arg=2, lineno=66)
DEBUG 2022-02-14 16:46:35,158 stack ['$phi358.0', '$phi358.1', '$426load_global.35', '$436binary_multiply.40']
DEBUG 2022-02-14 16:46:35,158 dispatch pc=440, inst=LOAD_FAST(arg=3, lineno=66)
DEBUG 2022-02-14 16:46:35,158 stack ['$phi358.0', '$phi358.1', '$426load_global.35', '$436binary_multiply.40', '$const438.41']
DEBUG 2022-02-14 16:46:35,158 dispatch pc=442, inst=BINARY_MULTIPLY(arg=None, lineno=66)
DEBUG 2022-02-14 16:46:35,158 stack ['$phi358.0', '$phi358.1', '$426load_global.35', '$436binary_multiply.40', '$const438.41', '$batch_max440.42']
DEBUG 2022-02-14 16:46:35,158 dispatch pc=444, inst=LOAD_FAST(arg=4, lineno=66)
DEBUG 2022-02-14 16:46:35,159 stack ['$phi358.0', '$phi358.1', '$426load_global.35', '$436binary_multiply.40', '$442binary_multiply.43']
DEBUG 2022-02-14 16:46:35,159 dispatch pc=446, inst=BINARY_ADD(arg=None, lineno=66)
DEBUG 2022-02-14 16:46:35,159 stack ['$phi358.0', '$phi358.1', '$426load_global.35', '$436binary_multiply.40', '$442binary_multiply.43', '$odd_cutoff444.44']
DEBUG 2022-02-14 16:46:35,159 dispatch pc=448, inst=LOAD_CONST(arg=3, lineno=66)
DEBUG 2022-02-14 16:46:35,159 stack ['$phi358.0', '$phi358.1', '$426load_global.35', '$436binary_multiply.40', '$446binary_add.45']
DEBUG 2022-02-14 16:46:35,159 dispatch pc=450, inst=BINARY_ADD(arg=None, lineno=66)
DEBUG 2022-02-14 16:46:35,159 stack ['$phi358.0', '$phi358.1', '$426load_global.35', '$436binary_multiply.40', '$446binary_add.45', '$const448.46']
DEBUG 2022-02-14 16:46:35,159 dispatch pc=452, inst=CALL_FUNCTION(arg=2, lineno=66)
DEBUG 2022-02-14 16:46:35,159 stack ['$phi358.0', '$phi358.1', '$426load_global.35', '$436binary_multiply.40', '$450binary_add.47']
DEBUG 2022-02-14 16:46:35,159 dispatch pc=454, inst=GET_ITER(arg=None, lineno=66)
DEBUG 2022-02-14 16:46:35,159 stack ['$phi358.0', '$phi358.1', '$452call_function.48']
DEBUG 2022-02-14 16:46:35,159 end state. edges=[Edge(pc=456, stack=('$phi358.0', '$phi358.1', '$454get_iter.49'), blockstack=(), npush=0)]
DEBUG 2022-02-14 16:46:35,159 pending: deque([State(pc_initial=178 nstack_initial=1), State(pc_initial=456 nstack_initial=3)])
DEBUG 2022-02-14 16:46:35,159 pending: deque([State(pc_initial=456 nstack_initial=3)])
DEBUG 2022-02-14 16:46:35,159 stack: ['$phi456.0', '$phi456.1', '$phi456.2']
DEBUG 2022-02-14 16:46:35,159 dispatch pc=456, inst=FOR_ITER(arg=138, lineno=66)
DEBUG 2022-02-14 16:46:35,159 stack ['$phi456.0', '$phi456.1', '$phi456.2']
DEBUG 2022-02-14 16:46:35,159 end state. edges=[Edge(pc=596, stack=('$phi456.0', '$phi456.1'), blockstack=(), npush=0), Edge(pc=458, stack=('$phi456.0', '$phi456.1', '$phi456.2', '$456for_iter.4'), blockstack=(), npush=0)]
DEBUG 2022-02-14 16:46:35,159 pending: deque([State(pc_initial=596 nstack_initial=2), State(pc_initial=458 nstack_initial=4)])
DEBUG 2022-02-14 16:46:35,160 stack: ['$phi596.0', '$phi596.1']
DEBUG 2022-02-14 16:46:35,160 dispatch pc=596, inst=JUMP_ABSOLUTE(arg=356, lineno=75)
DEBUG 2022-02-14 16:46:35,160 stack ['$phi596.0', '$phi596.1']
DEBUG 2022-02-14 16:46:35,160 end state. edges=[Edge(pc=356, stack=('$phi596.0', '$phi596.1'), blockstack=(), npush=0)]
DEBUG 2022-02-14 16:46:35,160 pending: deque([State(pc_initial=458 nstack_initial=4), State(pc_initial=356 nstack_initial=2)])
DEBUG 2022-02-14 16:46:35,160 stack: ['$phi458.0', '$phi458.1', '$phi458.2', '$phi458.3']
DEBUG 2022-02-14 16:46:35,160 dispatch pc=458, inst=STORE_FAST(arg=32, lineno=66)
DEBUG 2022-02-14 16:46:35,160 stack ['$phi458.0', '$phi458.1', '$phi458.2', '$phi458.3']
DEBUG 2022-02-14 16:46:35,160 dispatch pc=460, inst=LOAD_FAST(arg=9, lineno=67)
DEBUG 2022-02-14 16:46:35,160 stack ['$phi458.0', '$phi458.1', '$phi458.2']
DEBUG 2022-02-14 16:46:35,160 dispatch pc=462, inst=LOAD_FAST(arg=32, lineno=67)
DEBUG 2022-02-14 16:46:35,160 stack ['$phi458.0', '$phi458.1', '$phi458.2', '$N_fixed460.4']
DEBUG 2022-02-14 16:46:35,160 dispatch pc=464, inst=BINARY_ADD(arg=None, lineno=67)
DEBUG 2022-02-14 16:46:35,160 stack ['$phi458.0', '$phi458.1', '$phi458.2', '$N_fixed460.4', '$N_det462.5']
DEBUG 2022-02-14 16:46:35,160 dispatch pc=466, inst=STORE_FAST(arg=33, lineno=67)
DEBUG 2022-02-14 16:46:35,160 stack ['$phi458.0', '$phi458.1', '$phi458.2', '$464binary_add.6']
DEBUG 2022-02-14 16:46:35,160 dispatch pc=468, inst=LOAD_CONST(arg=6, lineno=68)
DEBUG 2022-02-14 16:46:35,160 stack ['$phi458.0', '$phi458.1', '$phi458.2']
DEBUG 2022-02-14 16:46:35,160 dispatch pc=470, inst=LOAD_FAST(arg=33, lineno=68)
DEBUG 2022-02-14 16:46:35,160 stack ['$phi458.0', '$phi458.1', '$phi458.2', '$const468.7']
DEBUG 2022-02-14 16:46:35,160 dispatch pc=472, inst=LOAD_CONST(arg=2, lineno=68)
DEBUG 2022-02-14 16:46:35,160 stack ['$phi458.0', '$phi458.1', '$phi458.2', '$const468.7', '$N470.8']
DEBUG 2022-02-14 16:46:35,160 dispatch pc=474, inst=BINARY_FLOOR_DIVIDE(arg=None, lineno=68)
DEBUG 2022-02-14 16:46:35,161 stack ['$phi458.0', '$phi458.1', '$phi458.2', '$const468.7', '$N470.8', '$const472.9']
DEBUG 2022-02-14 16:46:35,161 dispatch pc=476, inst=LOAD_FAST(arg=20, lineno=68)
DEBUG 2022-02-14 16:46:35,161 stack ['$phi458.0', '$phi458.1', '$phi458.2', '$const468.7', '$474binary_floor_divide.10']
DEBUG 2022-02-14 16:46:35,161 dispatch pc=478, inst=BINARY_SUBTRACT(arg=None, lineno=68)
DEBUG 2022-02-14 16:46:35,161 stack ['$phi458.0', '$phi458.1', '$phi458.2', '$const468.7', '$474binary_floor_divide.10', '$edges_sum476.11']
DEBUG 2022-02-14 16:46:35,161 dispatch pc=480, inst=BINARY_POWER(arg=None, lineno=68)
DEBUG 2022-02-14 16:46:35,161 stack ['$phi458.0', '$phi458.1', '$phi458.2', '$const468.7', '$478binary_subtract.12']
DEBUG 2022-02-14 16:46:35,161 dispatch pc=482, inst=STORE_FAST(arg=34, lineno=68)
DEBUG 2022-02-14 16:46:35,161 stack ['$phi458.0', '$phi458.1', '$phi458.2', '$480binary_power.13']
DEBUG 2022-02-14 16:46:35,161 dispatch pc=484, inst=LOAD_FAST(arg=14, lineno=70)
DEBUG 2022-02-14 16:46:35,161 stack ['$phi458.0', '$phi458.1', '$phi458.2']
DEBUG 2022-02-14 16:46:35,161 dispatch pc=486, inst=LOAD_FAST(arg=32, lineno=70)
DEBUG 2022-02-14 16:46:35,161 stack ['$phi458.0', '$phi458.1', '$phi458.2', '$binoms484.14']
DEBUG 2022-02-14 16:46:35,161 dispatch pc=488, inst=LOAD_CONST(arg=2, lineno=70)
DEBUG 2022-02-14 16:46:35,161 stack ['$phi458.0', '$phi458.1', '$phi458.2', '$binoms484.14', '$N_det486.15']
DEBUG 2022-02-14 16:46:35,161 dispatch pc=490, inst=BINARY_FLOOR_DIVIDE(arg=None, lineno=70)
DEBUG 2022-02-14 16:46:35,161 stack ['$phi458.0', '$phi458.1', '$phi458.2', '$binoms484.14', '$N_det486.15', '$const488.16']
DEBUG 2022-02-14 16:46:35,161 dispatch pc=492, inst=LOAD_FAST(arg=19, lineno=70)
DEBUG 2022-02-14 16:46:35,161 stack ['$phi458.0', '$phi458.1', '$phi458.2', '$binoms484.14', '$490binary_floor_divide.17']
DEBUG 2022-02-14 16:46:35,161 dispatch pc=494, inst=LOAD_CONST(arg=1, lineno=70)
DEBUG 2022-02-14 16:46:35,161 stack ['$phi458.0', '$phi458.1', '$phi458.2', '$binoms484.14', '$490binary_floor_divide.17', '$kept_edges492.18']
DEBUG 2022-02-14 16:46:35,161 dispatch pc=496, inst=BINARY_SUBSCR(arg=None, lineno=70)
DEBUG 2022-02-14 16:46:35,161 stack ['$phi458.0', '$phi458.1', '$phi458.2', '$binoms484.14', '$490binary_floor_divide.17', '$kept_edges492.18', '$const494.19']
DEBUG 2022-02-14 16:46:35,162 dispatch pc=498, inst=BUILD_TUPLE(arg=2, lineno=70)
DEBUG 2022-02-14 16:46:35,162 stack ['$phi458.0', '$phi458.1', '$phi458.2', '$binoms484.14', '$490binary_floor_divide.17', '$496binary_subscr.20']
DEBUG 2022-02-14 16:46:35,162 dispatch pc=500, inst=BINARY_SUBSCR(arg=None, lineno=70)
DEBUG 2022-02-14 16:46:35,162 stack ['$phi458.0', '$phi458.1', '$phi458.2', '$binoms484.14', '$498build_tuple.21']
DEBUG 2022-02-14 16:46:35,162 dispatch pc=502, inst=LOAD_FAST(arg=21, lineno=70)
DEBUG 2022-02-14 16:46:35,162 stack ['$phi458.0', '$phi458.1', '$phi458.2', '$500binary_subscr.22']
DEBUG 2022-02-14 16:46:35,162 dispatch pc=504, inst=BINARY_MULTIPLY(arg=None, lineno=70)
DEBUG 2022-02-14 16:46:35,162 stack ['$phi458.0', '$phi458.1', '$phi458.2', '$500binary_subscr.22', '$binom_prod502.23']
DEBUG 2022-02-14 16:46:35,162 dispatch pc=506, inst=STORE_FAST(arg=35, lineno=70)
DEBUG 2022-02-14 16:46:35,162 stack ['$phi458.0', '$phi458.1', '$phi458.2', '$504binary_multiply.24']
DEBUG 2022-02-14 16:46:35,162 dispatch pc=508, inst=LOAD_FAST(arg=32, lineno=72)
DEBUG 2022-02-14 16:46:35,162 stack ['$phi458.0', '$phi458.1', '$phi458.2']
DEBUG 2022-02-14 16:46:35,162 dispatch pc=510, inst=LOAD_CONST(arg=2, lineno=72)
DEBUG 2022-02-14 16:46:35,162 stack ['$phi458.0', '$phi458.1', '$phi458.2', '$N_det508.25']
DEBUG 2022-02-14 16:46:35,162 dispatch pc=512, inst=BINARY_MODULO(arg=None, lineno=72)
DEBUG 2022-02-14 16:46:35,162 stack ['$phi458.0', '$phi458.1', '$phi458.2', '$N_det508.25', '$const510.26']
DEBUG 2022-02-14 16:46:35,162 dispatch pc=514, inst=LOAD_CONST(arg=1, lineno=72)
DEBUG 2022-02-14 16:46:35,162 stack ['$phi458.0', '$phi458.1', '$phi458.2', '$512binary_modulo.27']
DEBUG 2022-02-14 16:46:35,162 dispatch pc=516, inst=COMPARE_OP(arg=2, lineno=72)
DEBUG 2022-02-14 16:46:35,162 stack ['$phi458.0', '$phi458.1', '$phi458.2', '$512binary_modulo.27', '$const514.28']
DEBUG 2022-02-14 16:46:35,162 dispatch pc=518, inst=POP_JUMP_IF_FALSE(arg=560, lineno=72)
DEBUG 2022-02-14 16:46:35,162 stack ['$phi458.0', '$phi458.1', '$phi458.2', '$516compare_op.29']
DEBUG 2022-02-14 16:46:35,162 end state. edges=[Edge(pc=522, stack=('$phi458.0', '$phi458.1', '$phi458.2'), blockstack=(), npush=0), Edge(pc=560, stack=('$phi458.0', '$phi458.1', '$phi458.2'), blockstack=(), npush=0)]
DEBUG 2022-02-14 16:46:35,162 pending: deque([State(pc_initial=356 nstack_initial=2), State(pc_initial=522 nstack_initial=3), State(pc_initial=560 nstack_initial=3)])
DEBUG 2022-02-14 16:46:35,163 pending: deque([State(pc_initial=522 nstack_initial=3), State(pc_initial=560 nstack_initial=3)])
DEBUG 2022-02-14 16:46:35,163 stack: ['$phi522.0', '$phi522.1', '$phi522.2']
DEBUG 2022-02-14 16:46:35,163 dispatch pc=522, inst=LOAD_FAST(arg=18, lineno=73)
DEBUG 2022-02-14 16:46:35,163 stack ['$phi522.0', '$phi522.1', '$phi522.2']
DEBUG 2022-02-14 16:46:35,163 dispatch pc=524, inst=LOAD_FAST(arg=29, lineno=73)
DEBUG 2022-02-14 16:46:35,163 stack ['$phi522.0', '$phi522.1', '$phi522.2', '$Hnew522.3']
DEBUG 2022-02-14 16:46:35,163 dispatch pc=526, inst=LOAD_FAST(arg=32, lineno=73)
DEBUG 2022-02-14 16:46:35,163 stack ['$phi522.0', '$phi522.1', '$phi522.2', '$Hnew522.3', '$k524.4']
DEBUG 2022-02-14 16:46:35,163 dispatch pc=528, inst=BUILD_TUPLE(arg=2, lineno=73)
DEBUG 2022-02-14 16:46:35,163 stack ['$phi522.0', '$phi522.1', '$phi522.2', '$Hnew522.3', '$k524.4', '$N_det526.5']
DEBUG 2022-02-14 16:46:35,163 dispatch pc=530, inst=DUP_TOP_TWO(arg=None, lineno=73)
DEBUG 2022-02-14 16:46:35,163 stack ['$phi522.0', '$phi522.1', '$phi522.2', '$Hnew522.3', '$528build_tuple.6']
DEBUG 2022-02-14 16:46:35,163 dispatch pc=532, inst=BINARY_SUBSCR(arg=None, lineno=73)
DEBUG 2022-02-14 16:46:35,163 stack ['$phi522.0', '$phi522.1', '$phi522.2', '$Hnew522.3', '$528build_tuple.6', '$530dup_top_two.7', '$530dup_top_two.8']
DEBUG 2022-02-14 16:46:35,163 dispatch pc=534, inst=LOAD_FAST(arg=35, lineno=73)
DEBUG 2022-02-14 16:46:35,163 stack ['$phi522.0', '$phi522.1', '$phi522.2', '$Hnew522.3', '$528build_tuple.6', '$532binary_subscr.9']
DEBUG 2022-02-14 16:46:35,163 dispatch pc=536, inst=LOAD_FAST(arg=34, lineno=73)
DEBUG 2022-02-14 16:46:35,163 stack ['$phi522.0', '$phi522.1', '$phi522.2', '$Hnew522.3', '$528build_tuple.6', '$532binary_subscr.9', '$n_det_binom_prod534.10']
DEBUG 2022-02-14 16:46:35,163 dispatch pc=538, inst=BINARY_MULTIPLY(arg=None, lineno=73)
DEBUG 2022-02-14 16:46:35,163 stack ['$phi522.0', '$phi522.1', '$phi522.2', '$Hnew522.3', '$528build_tuple.6', '$532binary_subscr.9', '$n_det_binom_prod534.10', '$plus_minus536.11']
DEBUG 2022-02-14 16:46:35,163 dispatch pc=540, inst=LOAD_FAST(arg=30, lineno=73)
DEBUG 2022-02-14 16:46:35,163 stack ['$phi522.0', '$phi522.1', '$phi522.2', '$Hnew522.3', '$528build_tuple.6', '$532binary_subscr.9', '$538binary_multiply.12']
DEBUG 2022-02-14 16:46:35,163 dispatch pc=542, inst=LOAD_FAST(arg=33, lineno=73)
DEBUG 2022-02-14 16:46:35,164 stack ['$phi522.0', '$phi522.1', '$phi522.2', '$Hnew522.3', '$528build_tuple.6', '$532binary_subscr.9', '$538binary_multiply.12', '$f_even540.13']
DEBUG 2022-02-14 16:46:35,164 dispatch pc=544, inst=LOAD_CONST(arg=2, lineno=73)
DEBUG 2022-02-14 16:46:35,164 stack ['$phi522.0', '$phi522.1', '$phi522.2', '$Hnew522.3', '$528build_tuple.6', '$532binary_subscr.9', '$538binary_multiply.12', '$f_even540.13', '$N542.14']
DEBUG 2022-02-14 16:46:35,164 dispatch pc=546, inst=BINARY_FLOOR_DIVIDE(arg=None, lineno=73)
DEBUG 2022-02-14 16:46:35,164 stack ['$phi522.0', '$phi522.1', '$phi522.2', '$Hnew522.3', '$528build_tuple.6', '$532binary_subscr.9', '$538binary_multiply.12', '$f_even540.13', '$N542.14', '$const544.15']
DEBUG 2022-02-14 16:46:35,164 dispatch pc=548, inst=BINARY_SUBSCR(arg=None, lineno=73)
DEBUG 2022-02-14 16:46:35,164 stack ['$phi522.0', '$phi522.1', '$phi522.2', '$Hnew522.3', '$528build_tuple.6', '$532binary_subscr.9', '$538binary_multiply.12', '$f_even540.13', '$546binary_floor_divide.16']
DEBUG 2022-02-14 16:46:35,164 dispatch pc=550, inst=BINARY_MULTIPLY(arg=None, lineno=73)
DEBUG 2022-02-14 16:46:35,164 stack ['$phi522.0', '$phi522.1', '$phi522.2', '$Hnew522.3', '$528build_tuple.6', '$532binary_subscr.9', '$538binary_multiply.12', '$548binary_subscr.17']
DEBUG 2022-02-14 16:46:35,164 dispatch pc=552, inst=INPLACE_ADD(arg=None, lineno=73)
DEBUG 2022-02-14 16:46:35,164 stack ['$phi522.0', '$phi522.1', '$phi522.2', '$Hnew522.3', '$528build_tuple.6', '$532binary_subscr.9', '$550binary_multiply.18']
DEBUG 2022-02-14 16:46:35,164 dispatch pc=554, inst=ROT_THREE(arg=None, lineno=73)
DEBUG 2022-02-14 16:46:35,164 stack ['$phi522.0', '$phi522.1', '$phi522.2', '$Hnew522.3', '$528build_tuple.6', '$552inplace_add.19']
DEBUG 2022-02-14 16:46:35,164 dispatch pc=556, inst=STORE_SUBSCR(arg=None, lineno=73)
DEBUG 2022-02-14 16:46:35,164 stack ['$phi522.0', '$phi522.1', '$phi522.2', '$552inplace_add.19', '$Hnew522.3', '$528build_tuple.6']
DEBUG 2022-02-14 16:46:35,164 dispatch pc=558, inst=JUMP_FORWARD(arg=32, lineno=73)
DEBUG 2022-02-14 16:46:35,164 stack ['$phi522.0', '$phi522.1', '$phi522.2']
DEBUG 2022-02-14 16:46:35,164 end state. edges=[Edge(pc=592, stack=('$phi522.0', '$phi522.1', '$phi522.2'), blockstack=(), npush=0)]
DEBUG 2022-02-14 16:46:35,164 pending: deque([State(pc_initial=560 nstack_initial=3), State(pc_initial=592 nstack_initial=3)])
DEBUG 2022-02-14 16:46:35,164 stack: ['$phi560.0', '$phi560.1', '$phi560.2']
DEBUG 2022-02-14 16:46:35,164 dispatch pc=560, inst=LOAD_FAST(arg=18, lineno=75)
DEBUG 2022-02-14 16:46:35,164 stack ['$phi560.0', '$phi560.1', '$phi560.2']
DEBUG 2022-02-14 16:46:35,164 dispatch pc=562, inst=LOAD_FAST(arg=29, lineno=75)
DEBUG 2022-02-14 16:46:35,164 stack ['$phi560.0', '$phi560.1', '$phi560.2', '$Hnew560.3']
DEBUG 2022-02-14 16:46:35,164 dispatch pc=564, inst=LOAD_FAST(arg=32, lineno=75)
DEBUG 2022-02-14 16:46:35,164 stack ['$phi560.0', '$phi560.1', '$phi560.2', '$Hnew560.3', '$k562.4']
DEBUG 2022-02-14 16:46:35,165 dispatch pc=566, inst=BUILD_TUPLE(arg=2, lineno=75)
DEBUG 2022-02-14 16:46:35,165 stack ['$phi560.0', '$phi560.1', '$phi560.2', '$Hnew560.3', '$k562.4', '$N_det564.5']
DEBUG 2022-02-14 16:46:35,165 dispatch pc=568, inst=DUP_TOP_TWO(arg=None, lineno=75)
DEBUG 2022-02-14 16:46:35,165 stack ['$phi560.0', '$phi560.1', '$phi560.2', '$Hnew560.3', '$566build_tuple.6']
DEBUG 2022-02-14 16:46:35,165 dispatch pc=570, inst=BINARY_SUBSCR(arg=None, lineno=75)
DEBUG 2022-02-14 16:46:35,165 stack ['$phi560.0', '$phi560.1', '$phi560.2', '$Hnew560.3', '$566build_tuple.6', '$568dup_top_two.7', '$568dup_top_two.8']
DEBUG 2022-02-14 16:46:35,165 dispatch pc=572, inst=LOAD_FAST(arg=35, lineno=75)
DEBUG 2022-02-14 16:46:35,165 stack ['$phi560.0', '$phi560.1', '$phi560.2', '$Hnew560.3', '$566build_tuple.6', '$570binary_subscr.9']
DEBUG 2022-02-14 16:46:35,165 dispatch pc=574, inst=LOAD_FAST(arg=34, lineno=75)
DEBUG 2022-02-14 16:46:35,165 stack ['$phi560.0', '$phi560.1', '$phi560.2', '$Hnew560.3', '$566build_tuple.6', '$570binary_subscr.9', '$n_det_binom_prod572.10']
DEBUG 2022-02-14 16:46:35,165 dispatch pc=576, inst=BINARY_MULTIPLY(arg=None, lineno=75)
DEBUG 2022-02-14 16:46:35,165 stack ['$phi560.0', '$phi560.1', '$phi560.2', '$Hnew560.3', '$566build_tuple.6', '$570binary_subscr.9', '$n_det_binom_prod572.10', '$plus_minus574.11']
DEBUG 2022-02-14 16:46:35,165 dispatch pc=578, inst=LOAD_FAST(arg=31, lineno=75)
DEBUG 2022-02-14 16:46:35,165 stack ['$phi560.0', '$phi560.1', '$phi560.2', '$Hnew560.3', '$566build_tuple.6', '$570binary_subscr.9', '$576binary_multiply.12']
DEBUG 2022-02-14 16:46:35,165 dispatch pc=580, inst=LOAD_FAST(arg=33, lineno=75)
DEBUG 2022-02-14 16:46:35,165 stack ['$phi560.0', '$phi560.1', '$phi560.2', '$Hnew560.3', '$566build_tuple.6', '$570binary_subscr.9', '$576binary_multiply.12', '$f_odd578.13']
DEBUG 2022-02-14 16:46:35,165 dispatch pc=582, inst=BINARY_SUBSCR(arg=None, lineno=75)
DEBUG 2022-02-14 16:46:35,165 stack ['$phi560.0', '$phi560.1', '$phi560.2', '$Hnew560.3', '$566build_tuple.6', '$570binary_subscr.9', '$576binary_multiply.12', '$f_odd578.13', '$N580.14']
DEBUG 2022-02-14 16:46:35,165 dispatch pc=584, inst=BINARY_MULTIPLY(arg=None, lineno=75)
DEBUG 2022-02-14 16:46:35,165 stack ['$phi560.0', '$phi560.1', '$phi560.2', '$Hnew560.3', '$566build_tuple.6', '$570binary_subscr.9', '$576binary_multiply.12', '$582binary_subscr.15']
DEBUG 2022-02-14 16:46:35,165 dispatch pc=586, inst=INPLACE_ADD(arg=None, lineno=75)
DEBUG 2022-02-14 16:46:35,165 stack ['$phi560.0', '$phi560.1', '$phi560.2', '$Hnew560.3', '$566build_tuple.6', '$570binary_subscr.9', '$584binary_multiply.16']
DEBUG 2022-02-14 16:46:35,165 dispatch pc=588, inst=ROT_THREE(arg=None, lineno=75)
DEBUG 2022-02-14 16:46:35,166 stack ['$phi560.0', '$phi560.1', '$phi560.2', '$Hnew560.3', '$566build_tuple.6', '$586inplace_add.17']
DEBUG 2022-02-14 16:46:35,166 dispatch pc=590, inst=STORE_SUBSCR(arg=None, lineno=75)
DEBUG 2022-02-14 16:46:35,166 stack ['$phi560.0', '$phi560.1', '$phi560.2', '$586inplace_add.17', '$Hnew560.3', '$566build_tuple.6']
DEBUG 2022-02-14 16:46:35,166 end state. edges=[Edge(pc=592, stack=('$phi560.0', '$phi560.1', '$phi560.2'), blockstack=(), npush=0)]
DEBUG 2022-02-14 16:46:35,166 pending: deque([State(pc_initial=592 nstack_initial=3), State(pc_initial=592 nstack_initial=3)])
DEBUG 2022-02-14 16:46:35,166 stack: ['$phi592.0', '$phi592.1', '$phi592.2']
DEBUG 2022-02-14 16:46:35,166 dispatch pc=592, inst=JUMP_ABSOLUTE(arg=456, lineno=75)
DEBUG 2022-02-14 16:46:35,166 stack ['$phi592.0', '$phi592.1', '$phi592.2']
DEBUG 2022-02-14 16:46:35,166 end state. edges=[Edge(pc=456, stack=('$phi592.0', '$phi592.1', '$phi592.2'), blockstack=(), npush=0)]
DEBUG 2022-02-14 16:46:35,166 pending: deque([State(pc_initial=592 nstack_initial=3), State(pc_initial=456 nstack_initial=3)])
DEBUG 2022-02-14 16:46:35,166 pending: deque([State(pc_initial=456 nstack_initial=3)])
DEBUG 2022-02-14 16:46:35,166 -------------------------Prune PHIs-------------------------
DEBUG 2022-02-14 16:46:35,166 Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=178 nstack_initial=1): {'$phi178.0'},
             State(pc_initial=182 nstack_initial=2): {'$phi182.1'},
             State(pc_initial=252 nstack_initial=2): {'$phi252.1'},
             State(pc_initial=254 nstack_initial=3): {'$phi254.2'},
             State(pc_initial=282 nstack_initial=1): set(),
             State(pc_initial=288 nstack_initial=1): set(),
             State(pc_initial=302 nstack_initial=1): set(),
             State(pc_initial=306 nstack_initial=1): set(),
             State(pc_initial=356 nstack_initial=2): {'$phi356.1'},
             State(pc_initial=358 nstack_initial=3): {'$phi358.2'},
             State(pc_initial=456 nstack_initial=3): {'$phi456.2'},
             State(pc_initial=458 nstack_initial=4): {'$phi458.3'},
             State(pc_initial=522 nstack_initial=3): set(),
             State(pc_initial=560 nstack_initial=3): set(),
             State(pc_initial=592 nstack_initial=3): set(),
             State(pc_initial=596 nstack_initial=2): set(),
             State(pc_initial=600 nstack_initial=1): set(),
             State(pc_initial=610 nstack_initial=0): set(),
             State(pc_initial=616 nstack_initial=0): set(),
             State(pc_initial=630 nstack_initial=1): {'$phi630.0'},
             State(pc_initial=632 nstack_initial=2): {'$phi632.1'},
             State(pc_initial=678 nstack_initial=0): set()})
DEBUG 2022-02-14 16:46:35,167 defmap: {'$phi178.0': State(pc_initial=0 nstack_initial=0),
 '$phi182.1': State(pc_initial=178 nstack_initial=1),
 '$phi252.1': State(pc_initial=182 nstack_initial=2),
 '$phi254.2': State(pc_initial=252 nstack_initial=2),
 '$phi356.1': State(pc_initial=306 nstack_initial=1),
 '$phi358.2': State(pc_initial=356 nstack_initial=2),
 '$phi456.2': State(pc_initial=358 nstack_initial=3),
 '$phi458.3': State(pc_initial=456 nstack_initial=3),
 '$phi630.0': State(pc_initial=616 nstack_initial=0),
 '$phi632.1': State(pc_initial=630 nstack_initial=1)}
DEBUG 2022-02-14 16:46:35,167 phismap: defaultdict(<class 'set'>,
            {'$phi178.0': {('$176get_iter.78',
                            State(pc_initial=0 nstack_initial=0)),
                           ('$phi600.0',
                            State(pc_initial=600 nstack_initial=1))},
             '$phi182.0': {('$phi178.0',
                            State(pc_initial=178 nstack_initial=1))},
             '$phi182.1': {('$178for_iter.2',
                            State(pc_initial=178 nstack_initial=1))},
             '$phi252.0': {('$phi182.0',
                            State(pc_initial=182 nstack_initial=2)),
                           ('$phi254.0',
                            State(pc_initial=254 nstack_initial=3))},
             '$phi252.1': {('$250get_iter.31',
                            State(pc_initial=182 nstack_initial=2)),
                           ('$phi254.1',
                            State(pc_initial=254 nstack_initial=3))},
             '$phi254.0': {('$phi252.0',
                            State(pc_initial=252 nstack_initial=2))},
             '$phi254.1': {('$phi252.1',
                            State(pc_initial=252 nstack_initial=2))},
             '$phi254.2': {('$252for_iter.3',
                            State(pc_initial=252 nstack_initial=2))},
             '$phi282.0': {('$phi252.0',
                            State(pc_initial=252 nstack_initial=2))},
             '$phi288.0': {('$phi282.0',
                            State(pc_initial=282 nstack_initial=1))},
             '$phi302.0': {('$phi282.0',
                            State(pc_initial=282 nstack_initial=1))},
             '$phi306.0': {('$phi288.0',
                            State(pc_initial=288 nstack_initial=1)),
                           ('$phi302.0',
                            State(pc_initial=302 nstack_initial=1))},
             '$phi356.0': {('$phi306.0',
                            State(pc_initial=306 nstack_initial=1)),
                           ('$phi596.0',
                            State(pc_initial=596 nstack_initial=2))},
             '$phi356.1': {('$354get_iter.25',
                            State(pc_initial=306 nstack_initial=1)),
                           ('$phi596.1',
                            State(pc_initial=596 nstack_initial=2))},
             '$phi358.0': {('$phi356.0',
                            State(pc_initial=356 nstack_initial=2))},
             '$phi358.1': {('$phi356.1',
                            State(pc_initial=356 nstack_initial=2))},
             '$phi358.2': {('$356for_iter.3',
                            State(pc_initial=356 nstack_initial=2))},
             '$phi456.0': {('$phi358.0',
                            State(pc_initial=358 nstack_initial=3)),
                           ('$phi592.0',
                            State(pc_initial=592 nstack_initial=3))},
             '$phi456.1': {('$phi358.1',
                            State(pc_initial=358 nstack_initial=3)),
                           ('$phi592.1',
                            State(pc_initial=592 nstack_initial=3))},
             '$phi456.2': {('$454get_iter.49',
                            State(pc_initial=358 nstack_initial=3)),
                           ('$phi592.2',
                            State(pc_initial=592 nstack_initial=3))},
             '$phi458.0': {('$phi456.0',
                            State(pc_initial=456 nstack_initial=3))},
             '$phi458.1': {('$phi456.1',
                            State(pc_initial=456 nstack_initial=3))},
             '$phi458.2': {('$phi456.2',
                            State(pc_initial=456 nstack_initial=3))},
             '$phi458.3': {('$456for_iter.4',
                            State(pc_initial=456 nstack_initial=3))},
             '$phi522.0': {('$phi458.0',
                            State(pc_initial=458 nstack_initial=4))},
             '$phi522.1': {('$phi458.1',
                            State(pc_initial=458 nstack_initial=4))},
             '$phi522.2': {('$phi458.2',
                            State(pc_initial=458 nstack_initial=4))},
             '$phi560.0': {('$phi458.0',
                            State(pc_initial=458 nstack_initial=4))},
             '$phi560.1': {('$phi458.1',
                            State(pc_initial=458 nstack_initial=4))},
             '$phi560.2': {('$phi458.2',
                            State(pc_initial=458 nstack_initial=4))},
             '$phi592.0': {('$phi522.0',
                            State(pc_initial=522 nstack_initial=3)),
                           ('$phi560.0',
                            State(pc_initial=560 nstack_initial=3))},
             '$phi592.1': {('$phi522.1',
                            State(pc_initial=522 nstack_initial=3)),
                           ('$phi560.1',
                            State(pc_initial=560 nstack_initial=3))},
             '$phi592.2': {('$phi522.2',
                            State(pc_initial=522 nstack_initial=3)),
                           ('$phi560.2',
                            State(pc_initial=560 nstack_initial=3))},
             '$phi596.0': {('$phi456.0',
                            State(pc_initial=456 nstack_initial=3))},
             '$phi596.1': {('$phi456.1',
                            State(pc_initial=456 nstack_initial=3))},
             '$phi600.0': {('$phi356.0',
                            State(pc_initial=356 nstack_initial=2))},
             '$phi630.0': {('$628get_iter.6',
                            State(pc_initial=616 nstack_initial=0)),
                           ('$phi632.0',
                            State(pc_initial=632 nstack_initial=2))},
             '$phi632.0': {('$phi630.0',
                            State(pc_initial=630 nstack_initial=1))},
             '$phi632.1': {('$630for_iter.2',
                            State(pc_initial=630 nstack_initial=1))}})
DEBUG 2022-02-14 16:46:35,169 changing phismap: defaultdict(<class 'set'>,
            {'$phi178.0': {('$176get_iter.78',
                            State(pc_initial=0 nstack_initial=0)),
                           ('$phi356.0',
                            State(pc_initial=356 nstack_initial=2))},
             '$phi182.0': {('$176get_iter.78',
                            State(pc_initial=0 nstack_initial=0)),
                           ('$phi356.0',
                            State(pc_initial=356 nstack_initial=2))},
             '$phi182.1': {('$178for_iter.2',
                            State(pc_initial=178 nstack_initial=1))},
             '$phi252.0': {('$176get_iter.78',
                            State(pc_initial=0 nstack_initial=0)),
                           ('$phi252.0',
                            State(pc_initial=252 nstack_initial=2)),
                           ('$phi356.0',
                            State(pc_initial=356 nstack_initial=2))},
             '$phi252.1': {('$250get_iter.31',
                            State(pc_initial=182 nstack_initial=2)),
                           ('$phi252.1',
                            State(pc_initial=252 nstack_initial=2))},
             '$phi254.0': {('$176get_iter.78',
                            State(pc_initial=0 nstack_initial=0)),
                           ('$phi356.0',
                            State(pc_initial=356 nstack_initial=2))},
             '$phi254.1': {('$250get_iter.31',
                            State(pc_initial=182 nstack_initial=2))},
             '$phi254.2': {('$252for_iter.3',
                            State(pc_initial=252 nstack_initial=2))},
             '$phi282.0': {('$176get_iter.78',
                            State(pc_initial=0 nstack_initial=0)),
                           ('$phi356.0',
                            State(pc_initial=356 nstack_initial=2))},
             '$phi288.0': {('$176get_iter.78',
                            State(pc_initial=0 nstack_initial=0)),
                           ('$phi356.0',
                            State(pc_initial=356 nstack_initial=2))},
             '$phi302.0': {('$176get_iter.78',
                            State(pc_initial=0 nstack_initial=0)),
                           ('$phi356.0',
                            State(pc_initial=356 nstack_initial=2))},
             '$phi306.0': {('$176get_iter.78',
                            State(pc_initial=0 nstack_initial=0)),
                           ('$phi356.0',
                            State(pc_initial=356 nstack_initial=2))},
             '$phi356.0': {('$176get_iter.78',
                            State(pc_initial=0 nstack_initial=0)),
                           ('$phi356.0',
                            State(pc_initial=356 nstack_initial=2)),
                           ('$phi456.0',
                            State(pc_initial=456 nstack_initial=3))},
             '$phi356.1': {('$354get_iter.25',
                            State(pc_initial=306 nstack_initial=1)),
                           ('$phi456.1',
                            State(pc_initial=456 nstack_initial=3))},
             '$phi358.0': {('$176get_iter.78',
                            State(pc_initial=0 nstack_initial=0)),
                           ('$phi456.0',
                            State(pc_initial=456 nstack_initial=3))},
             '$phi358.1': {('$354get_iter.25',
                            State(pc_initial=306 nstack_initial=1)),
                           ('$phi456.1',
                            State(pc_initial=456 nstack_initial=3))},
             '$phi358.2': {('$356for_iter.3',
                            State(pc_initial=356 nstack_initial=2))},
             '$phi456.0': {('$176get_iter.78',
                            State(pc_initial=0 nstack_initial=0)),
                           ('$phi456.0',
                            State(pc_initial=456 nstack_initial=3)),
                           ('$phi522.0',
                            State(pc_initial=522 nstack_initial=3)),
                           ('$phi560.0',
                            State(pc_initial=560 nstack_initial=3))},
             '$phi456.1': {('$354get_iter.25',
                            State(pc_initial=306 nstack_initial=1)),
                           ('$phi456.1',
                            State(pc_initial=456 nstack_initial=3)),
                           ('$phi522.1',
                            State(pc_initial=522 nstack_initial=3)),
                           ('$phi560.1',
                            State(pc_initial=560 nstack_initial=3))},
             '$phi456.2': {('$454get_iter.49',
                            State(pc_initial=358 nstack_initial=3)),
                           ('$phi522.2',
                            State(pc_initial=522 nstack_initial=3)),
                           ('$phi560.2',
                            State(pc_initial=560 nstack_initial=3))},
             '$phi458.0': {('$176get_iter.78',
                            State(pc_initial=0 nstack_initial=0)),
                           ('$phi522.0',
                            State(pc_initial=522 nstack_initial=3)),
                           ('$phi560.0',
                            State(pc_initial=560 nstack_initial=3))},
             '$phi458.1': {('$354get_iter.25',
                            State(pc_initial=306 nstack_initial=1)),
                           ('$phi522.1',
                            State(pc_initial=522 nstack_initial=3)),
                           ('$phi560.1',
                            State(pc_initial=560 nstack_initial=3))},
             '$phi458.2': {('$454get_iter.49',
                            State(pc_initial=358 nstack_initial=3)),
                           ('$phi522.2',
                            State(pc_initial=522 nstack_initial=3)),
                           ('$phi560.2',
                            State(pc_initial=560 nstack_initial=3))},
             '$phi458.3': {('$456for_iter.4',
                            State(pc_initial=456 nstack_initial=3))},
             '$phi522.0': {('$176get_iter.78',
                            State(pc_initial=0 nstack_initial=0)),
                           ('$phi522.0',
                            State(pc_initial=522 nstack_initial=3)),
                           ('$phi560.0',
                            State(pc_initial=560 nstack_initial=3))},
             '$phi522.1': {('$354get_iter.25',
                            State(pc_initial=306 nstack_initial=1)),
                           ('$phi522.1',
                            State(pc_initial=522 nstack_initial=3)),
                           ('$phi560.1',
                            State(pc_initial=560 nstack_initial=3))},
             '$phi522.2': {('$454get_iter.49',
                            State(pc_initial=358 nstack_initial=3)),
                           ('$phi522.2',
                            State(pc_initial=522 nstack_initial=3)),
                           ('$phi560.2',
                            State(pc_initial=560 nstack_initial=3))},
             '$phi560.0': {('$176get_iter.78',
                            State(pc_initial=0 nstack_initial=0)),
                           ('$phi522.0',
                            State(pc_initial=522 nstack_initial=3)),
                           ('$phi560.0',
                            State(pc_initial=560 nstack_initial=3))},
             '$phi560.1': {('$354get_iter.25',
                            State(pc_initial=306 nstack_initial=1)),
                           ('$phi522.1',
                            State(pc_initial=522 nstack_initial=3)),
                           ('$phi560.1',
                            State(pc_initial=560 nstack_initial=3))},
             '$phi560.2': {('$454get_iter.49',
                            State(pc_initial=358 nstack_initial=3)),
                           ('$phi522.2',
                            State(pc_initial=522 nstack_initial=3)),
                           ('$phi560.2',
                            State(pc_initial=560 nstack_initial=3))},
             '$phi592.0': {('$176get_iter.78',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi592.1': {('$354get_iter.25',
                            State(pc_initial=306 nstack_initial=1))},
             '$phi592.2': {('$454get_iter.49',
                            State(pc_initial=358 nstack_initial=3))},
             '$phi596.0': {('$176get_iter.78',
                            State(pc_initial=0 nstack_initial=0)),
                           ('$phi522.0',
                            State(pc_initial=522 nstack_initial=3)),
                           ('$phi560.0',
                            State(pc_initial=560 nstack_initial=3))},
             '$phi596.1': {('$354get_iter.25',
                            State(pc_initial=306 nstack_initial=1)),
                           ('$phi522.1',
                            State(pc_initial=522 nstack_initial=3)),
                           ('$phi560.1',
                            State(pc_initial=560 nstack_initial=3))},
             '$phi600.0': {('$176get_iter.78',
                            State(pc_initial=0 nstack_initial=0)),
                           ('$phi456.0',
                            State(pc_initial=456 nstack_initial=3))},
             '$phi630.0': {('$628get_iter.6',
                            State(pc_initial=616 nstack_initial=0)),
                           ('$phi630.0',
                            State(pc_initial=630 nstack_initial=1))},
             '$phi632.0': {('$628get_iter.6',
                            State(pc_initial=616 nstack_initial=0))},
             '$phi632.1': {('$630for_iter.2',
                            State(pc_initial=630 nstack_initial=1))}})
DEBUG 2022-02-14 16:46:35,171 changing phismap: defaultdict(<class 'set'>,
            {'$phi178.0': {('$176get_iter.78',
                            State(pc_initial=0 nstack_initial=0)),
                           ('$phi456.0',
                            State(pc_initial=456 nstack_initial=3))},
             '$phi182.0': {('$176get_iter.78',
                            State(pc_initial=0 nstack_initial=0)),
                           ('$phi456.0',
                            State(pc_initial=456 nstack_initial=3))},
             '$phi182.1': {('$178for_iter.2',
                            State(pc_initial=178 nstack_initial=1))},
             '$phi252.0': {('$176get_iter.78',
                            State(pc_initial=0 nstack_initial=0)),
                           ('$phi456.0',
                            State(pc_initial=456 nstack_initial=3))},
             '$phi252.1': {('$250get_iter.31',
                            State(pc_initial=182 nstack_initial=2))},
             '$phi254.0': {('$176get_iter.78',
                            State(pc_initial=0 nstack_initial=0)),
                           ('$phi456.0',
                            State(pc_initial=456 nstack_initial=3))},
             '$phi254.1': {('$250get_iter.31',
                            State(pc_initial=182 nstack_initial=2))},
             '$phi254.2': {('$252for_iter.3',
                            State(pc_initial=252 nstack_initial=2))},
             '$phi282.0': {('$176get_iter.78',
                            State(pc_initial=0 nstack_initial=0)),
                           ('$phi456.0',
                            State(pc_initial=456 nstack_initial=3))},
             '$phi288.0': {('$176get_iter.78',
                            State(pc_initial=0 nstack_initial=0)),
                           ('$phi456.0',
                            State(pc_initial=456 nstack_initial=3))},
             '$phi302.0': {('$176get_iter.78',
                            State(pc_initial=0 nstack_initial=0)),
                           ('$phi456.0',
                            State(pc_initial=456 nstack_initial=3))},
             '$phi306.0': {('$176get_iter.78',
                            State(pc_initial=0 nstack_initial=0)),
                           ('$phi456.0',
                            State(pc_initial=456 nstack_initial=3))},
             '$phi356.0': {('$176get_iter.78',
                            State(pc_initial=0 nstack_initial=0)),
                           ('$phi522.0',
                            State(pc_initial=522 nstack_initial=3)),
                           ('$phi560.0',
                            State(pc_initial=560 nstack_initial=3))},
             '$phi356.1': {('$354get_iter.25',
                            State(pc_initial=306 nstack_initial=1)),
                           ('$phi522.1',
                            State(pc_initial=522 nstack_initial=3)),
                           ('$phi560.1',
                            State(pc_initial=560 nstack_initial=3))},
             '$phi358.0': {('$176get_iter.78',
                            State(pc_initial=0 nstack_initial=0)),
                           ('$phi522.0',
                            State(pc_initial=522 nstack_initial=3)),
                           ('$phi560.0',
                            State(pc_initial=560 nstack_initial=3))},
             '$phi358.1': {('$354get_iter.25',
                            State(pc_initial=306 nstack_initial=1)),
                           ('$phi522.1',
                            State(pc_initial=522 nstack_initial=3)),
                           ('$phi560.1',
                            State(pc_initial=560 nstack_initial=3))},
             '$phi358.2': {('$356for_iter.3',
                            State(pc_initial=356 nstack_initial=2))},
             '$phi456.0': {('$176get_iter.78',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi456.1': {('$354get_iter.25',
                            State(pc_initial=306 nstack_initial=1))},
             '$phi456.2': {('$454get_iter.49',
                            State(pc_initial=358 nstack_initial=3))},
             '$phi458.0': {('$176get_iter.78',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi458.1': {('$354get_iter.25',
                            State(pc_initial=306 nstack_initial=1))},
             '$phi458.2': {('$454get_iter.49',
                            State(pc_initial=358 nstack_initial=3))},
             '$phi458.3': {('$456for_iter.4',
                            State(pc_initial=456 nstack_initial=3))},
             '$phi522.0': {('$176get_iter.78',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi522.1': {('$354get_iter.25',
                            State(pc_initial=306 nstack_initial=1))},
             '$phi522.2': {('$454get_iter.49',
                            State(pc_initial=358 nstack_initial=3))},
             '$phi560.0': {('$176get_iter.78',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi560.1': {('$354get_iter.25',
                            State(pc_initial=306 nstack_initial=1))},
             '$phi560.2': {('$454get_iter.49',
                            State(pc_initial=358 nstack_initial=3))},
             '$phi592.0': {('$176get_iter.78',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi592.1': {('$354get_iter.25',
                            State(pc_initial=306 nstack_initial=1))},
             '$phi592.2': {('$454get_iter.49',
                            State(pc_initial=358 nstack_initial=3))},
             '$phi596.0': {('$176get_iter.78',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi596.1': {('$354get_iter.25',
                            State(pc_initial=306 nstack_initial=1))},
             '$phi600.0': {('$176get_iter.78',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi630.0': {('$628get_iter.6',
                            State(pc_initial=616 nstack_initial=0))},
             '$phi632.0': {('$628get_iter.6',
                            State(pc_initial=616 nstack_initial=0))},
             '$phi632.1': {('$630for_iter.2',
                            State(pc_initial=630 nstack_initial=1))}})
DEBUG 2022-02-14 16:46:35,173 changing phismap: defaultdict(<class 'set'>,
            {'$phi178.0': {('$176get_iter.78',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi182.0': {('$176get_iter.78',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi182.1': {('$178for_iter.2',
                            State(pc_initial=178 nstack_initial=1))},
             '$phi252.0': {('$176get_iter.78',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi252.1': {('$250get_iter.31',
                            State(pc_initial=182 nstack_initial=2))},
             '$phi254.0': {('$176get_iter.78',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi254.1': {('$250get_iter.31',
                            State(pc_initial=182 nstack_initial=2))},
             '$phi254.2': {('$252for_iter.3',
                            State(pc_initial=252 nstack_initial=2))},
             '$phi282.0': {('$176get_iter.78',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi288.0': {('$176get_iter.78',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi302.0': {('$176get_iter.78',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi306.0': {('$176get_iter.78',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi356.0': {('$176get_iter.78',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi356.1': {('$354get_iter.25',
                            State(pc_initial=306 nstack_initial=1))},
             '$phi358.0': {('$176get_iter.78',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi358.1': {('$354get_iter.25',
                            State(pc_initial=306 nstack_initial=1))},
             '$phi358.2': {('$356for_iter.3',
                            State(pc_initial=356 nstack_initial=2))},
             '$phi456.0': {('$176get_iter.78',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi456.1': {('$354get_iter.25',
                            State(pc_initial=306 nstack_initial=1))},
             '$phi456.2': {('$454get_iter.49',
                            State(pc_initial=358 nstack_initial=3))},
             '$phi458.0': {('$176get_iter.78',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi458.1': {('$354get_iter.25',
                            State(pc_initial=306 nstack_initial=1))},
             '$phi458.2': {('$454get_iter.49',
                            State(pc_initial=358 nstack_initial=3))},
             '$phi458.3': {('$456for_iter.4',
                            State(pc_initial=456 nstack_initial=3))},
             '$phi522.0': {('$176get_iter.78',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi522.1': {('$354get_iter.25',
                            State(pc_initial=306 nstack_initial=1))},
             '$phi522.2': {('$454get_iter.49',
                            State(pc_initial=358 nstack_initial=3))},
             '$phi560.0': {('$176get_iter.78',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi560.1': {('$354get_iter.25',
                            State(pc_initial=306 nstack_initial=1))},
             '$phi560.2': {('$454get_iter.49',
                            State(pc_initial=358 nstack_initial=3))},
             '$phi592.0': {('$176get_iter.78',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi592.1': {('$354get_iter.25',
                            State(pc_initial=306 nstack_initial=1))},
             '$phi592.2': {('$454get_iter.49',
                            State(pc_initial=358 nstack_initial=3))},
             '$phi596.0': {('$176get_iter.78',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi596.1': {('$354get_iter.25',
                            State(pc_initial=306 nstack_initial=1))},
             '$phi600.0': {('$176get_iter.78',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi630.0': {('$628get_iter.6',
                            State(pc_initial=616 nstack_initial=0))},
             '$phi632.0': {('$628get_iter.6',
                            State(pc_initial=616 nstack_initial=0))},
             '$phi632.1': {('$630for_iter.2',
                            State(pc_initial=630 nstack_initial=1))}})
DEBUG 2022-02-14 16:46:35,174 changing phismap: defaultdict(<class 'set'>,
            {'$phi178.0': {('$176get_iter.78',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi182.0': {('$176get_iter.78',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi182.1': {('$178for_iter.2',
                            State(pc_initial=178 nstack_initial=1))},
             '$phi252.0': {('$176get_iter.78',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi252.1': {('$250get_iter.31',
                            State(pc_initial=182 nstack_initial=2))},
             '$phi254.0': {('$176get_iter.78',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi254.1': {('$250get_iter.31',
                            State(pc_initial=182 nstack_initial=2))},
             '$phi254.2': {('$252for_iter.3',
                            State(pc_initial=252 nstack_initial=2))},
             '$phi282.0': {('$176get_iter.78',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi288.0': {('$176get_iter.78',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi302.0': {('$176get_iter.78',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi306.0': {('$176get_iter.78',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi356.0': {('$176get_iter.78',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi356.1': {('$354get_iter.25',
                            State(pc_initial=306 nstack_initial=1))},
             '$phi358.0': {('$176get_iter.78',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi358.1': {('$354get_iter.25',
                            State(pc_initial=306 nstack_initial=1))},
             '$phi358.2': {('$356for_iter.3',
                            State(pc_initial=356 nstack_initial=2))},
             '$phi456.0': {('$176get_iter.78',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi456.1': {('$354get_iter.25',
                            State(pc_initial=306 nstack_initial=1))},
             '$phi456.2': {('$454get_iter.49',
                            State(pc_initial=358 nstack_initial=3))},
             '$phi458.0': {('$176get_iter.78',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi458.1': {('$354get_iter.25',
                            State(pc_initial=306 nstack_initial=1))},
             '$phi458.2': {('$454get_iter.49',
                            State(pc_initial=358 nstack_initial=3))},
             '$phi458.3': {('$456for_iter.4',
                            State(pc_initial=456 nstack_initial=3))},
             '$phi522.0': {('$176get_iter.78',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi522.1': {('$354get_iter.25',
                            State(pc_initial=306 nstack_initial=1))},
             '$phi522.2': {('$454get_iter.49',
                            State(pc_initial=358 nstack_initial=3))},
             '$phi560.0': {('$176get_iter.78',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi560.1': {('$354get_iter.25',
                            State(pc_initial=306 nstack_initial=1))},
             '$phi560.2': {('$454get_iter.49',
                            State(pc_initial=358 nstack_initial=3))},
             '$phi592.0': {('$176get_iter.78',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi592.1': {('$354get_iter.25',
                            State(pc_initial=306 nstack_initial=1))},
             '$phi592.2': {('$454get_iter.49',
                            State(pc_initial=358 nstack_initial=3))},
             '$phi596.0': {('$176get_iter.78',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi596.1': {('$354get_iter.25',
                            State(pc_initial=306 nstack_initial=1))},
             '$phi600.0': {('$176get_iter.78',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi630.0': {('$628get_iter.6',
                            State(pc_initial=616 nstack_initial=0))},
             '$phi632.0': {('$628get_iter.6',
                            State(pc_initial=616 nstack_initial=0))},
             '$phi632.1': {('$630for_iter.2',
                            State(pc_initial=630 nstack_initial=1))}})
DEBUG 2022-02-14 16:46:35,176 keep phismap: {'$phi178.0': {('$176get_iter.78', State(pc_initial=0 nstack_initial=0))},
 '$phi182.1': {('$178for_iter.2', State(pc_initial=178 nstack_initial=1))},
 '$phi252.1': {('$250get_iter.31', State(pc_initial=182 nstack_initial=2))},
 '$phi254.2': {('$252for_iter.3', State(pc_initial=252 nstack_initial=2))},
 '$phi356.1': {('$354get_iter.25', State(pc_initial=306 nstack_initial=1))},
 '$phi358.2': {('$356for_iter.3', State(pc_initial=356 nstack_initial=2))},
 '$phi456.2': {('$454get_iter.49', State(pc_initial=358 nstack_initial=3))},
 '$phi458.3': {('$456for_iter.4', State(pc_initial=456 nstack_initial=3))},
 '$phi630.0': {('$628get_iter.6', State(pc_initial=616 nstack_initial=0))},
 '$phi632.1': {('$630for_iter.2', State(pc_initial=630 nstack_initial=1))}}
DEBUG 2022-02-14 16:46:35,176 new_out: defaultdict(<class 'dict'>,
            {State(pc_initial=0 nstack_initial=0): {'$phi178.0': '$176get_iter.78'},
             State(pc_initial=178 nstack_initial=1): {'$phi182.1': '$178for_iter.2'},
             State(pc_initial=182 nstack_initial=2): {'$phi252.1': '$250get_iter.31'},
             State(pc_initial=252 nstack_initial=2): {'$phi254.2': '$252for_iter.3'},
             State(pc_initial=306 nstack_initial=1): {'$phi356.1': '$354get_iter.25'},
             State(pc_initial=356 nstack_initial=2): {'$phi358.2': '$356for_iter.3'},
             State(pc_initial=358 nstack_initial=3): {'$phi456.2': '$454get_iter.49'},
             State(pc_initial=456 nstack_initial=3): {'$phi458.3': '$456for_iter.4'},
             State(pc_initial=616 nstack_initial=0): {'$phi630.0': '$628get_iter.6'},
             State(pc_initial=630 nstack_initial=1): {'$phi632.1': '$630for_iter.2'}})
DEBUG 2022-02-14 16:46:35,176 ----------------------DONE Prune PHIs-----------------------
DEBUG 2022-02-14 16:46:35,176 block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$D2.0'}), (4, {'res': '$const4.1'}), (6, {'res': '$const6.2'}), (8, {'start': '$const4.1', 'stop': '$const6.2', 'step': None, 'res': '$8build_slice.4', 'slicevar': '$8build_slice.3'}), (10, {'res': '$const10.5'}), (12, {'items': ['$8build_slice.4', '$const10.5'], 'res': '$12build_tuple.6'}), (14, {'index': '$12build_tuple.6', 'target': '$D2.0', 'res': '$14binary_subscr.7'}), (16, {'value': '$14binary_subscr.7'}), (18, {'res': '$A18.8'}), (20, {'res': '$const20.9'}), (22, {'res': '$const22.10'}), (24, {'res': '$const24.11'}), (26, {'start': '$const22.10', 'stop': '$const24.11', 'step': None, 'res': '$26build_slice.13', 'slicevar': '$26build_slice.12'}), (28, {'items': ['$const20.9', '$26build_slice.13'], 'res': '$28build_tuple.14'}), (30, {'index': '$28build_tuple.14', 'target': '$A18.8', 'res': '$30binary_subscr.15'}), (32, {'value': '$30binary_subscr.15'}), (34, {'res': '$A34.16'}), (36, {'item': '$A34.16', 'res': '$36load_attr.17'}), (38, {'res': '$const38.18'}), (40, {'index': '$const38.18', 'target': '$36load_attr.17', 'res': '$40binary_subscr.19'}), (42, {'value': '$40binary_subscr.19'}), (44, {'res': '$const44.20'}), (46, {'res': '$fixed_edge_reps46.21'}), (48, {'item': '$fixed_edge_reps46.21', 'res': '$48load_method.22'}), (50, {'func': '$48load_method.22', 'args': [], 'res': '$50call_method.23'}), (52, {'lhs': '$const44.20', 'rhs': '$50call_method.23', 'res': '$52binary_multiply.24'}), (54, {'value': '$52binary_multiply.24'}), (56, {'res': '$N_fixed56.25'}), (58, {'res': '$const58.26'}), (60, {'res': '$batch_max60.27'}), (62, {'lhs': '$const58.26', 'rhs': '$batch_max60.27', 'res': '$62binary_multiply.28'}), (64, {'lhs': '$N_fixed56.25', 'rhs': '$62binary_multiply.28', 'res': '$64binary_add.29'}), (66, {'res': '$odd_cutoff66.30'}), (68, {'lhs': '$64binary_add.29', 'rhs': '$odd_cutoff66.30', 'res': '$68binary_add.31'}), (70, {'value': '$68binary_add.31'}), (72, {'res': '$72load_global.32'}), (74, {'item': '$72load_global.32', 'res': '$74load_method.33'}), (76, {'res': '$76load_global.34'}), (78, {'item': '$76load_global.34', 'res': '$78load_method.35'}), (80, {'res': '$batch_max80.36'}), (82, {'items': ['$batch_max80.36'], 'res': '$82build_list.37'}), (84, {'func': '$78load_method.35', 'args': ['$82build_list.37'], 'res': '$84call_method.38'}), (86, {'res': '$fixed_edge_reps86.39'}), (88, {'items': ['$84call_method.38', '$fixed_edge_reps86.39'], 'res': '$88build_tuple.40'}), (90, {'func': '$74load_method.33', 'args': ['$88build_tuple.40'], 'res': '$90call_method.41'}), (92, {'value': '$90call_method.41'}), (94, {'res': '$94load_global.42'}), (96, {'item': '$94load_global.42', 'res': '$96load_method.43'}), (98, {'res': '$edge_reps98.44'}), (100, {'res': '$const100.45'}), (102, {'lhs': '$edge_reps98.44', 'rhs': '$const100.45', 'res': '$102binary_add.46'}), (104, {'func': '$96load_method.43', 'args': ['$102binary_add.46'], 'res': '$104call_method.47'}), (106, {'value': '$104call_method.47'}), (108, {'res': '$edge_reps108.48'}), (110, {'item': '$edge_reps108.48', 'res': '$110load_method.49'}), (112, {'func': '$110load_method.49', 'args': [], 'res': '$112call_method.50'}), (114, {'res': '$odd_cutoff114.51'}), (116, {'lhs': '$112call_method.50', 'rhs': '$odd_cutoff114.51', 'res': '$116binary_add.52'}), (118, {'value': '$116binary_add.52'}), (120, {'res': '$120load_global.53'}), (122, {'res': '$max_binom122.54'}), (124, {'func': '$120load_global.53', 'args': ['$max_binom122.54'], 'res': '$124call_function.55'}), (126, {'value': '$124call_function.55'}), (128, {'res': '$D128.56'}), (130, {'item': '$D128.56', 'res': '$130load_attr.57'}), (132, {'res': '$const132.58'}), (134, {'index': '$const132.58', 'target': '$130load_attr.57', 'res': '$134binary_subscr.59'}), (136, {'value': '$134binary_subscr.59'}), (138, {'res': '$138load_global.60'}), (140, {'item': '$138load_global.60', 'res': '$140load_attr.61'}), (142, {'res': '$n_D142.62'}), (144, {'res': '$const144.63'}), (146, {'res': '$batch_max146.64'}), (148, {'lhs': '$const144.63', 'rhs': '$batch_max146.64', 'res': '$148binary_multiply.65'}), (150, {'res': '$odd_cutoff150.66'}), (152, {'lhs': '$148binary_multiply.65', 'rhs': '$odd_cutoff150.66', 'res': '$152binary_add.67'}), (154, {'res': '$const154.68'}), (156, {'lhs': '$152binary_add.67', 'rhs': '$const154.68', 'res': '$156binary_add.69'}), (158, {'items': ['$n_D142.62', '$156binary_add.69'], 'res': '$158build_tuple.70'}), (160, {'res': '$160load_global.71'}), (162, {'item': '$160load_global.71', 'res': '$162load_attr.72'}), (164, {'res': '$const164.73'}), (166, {'func': '$140load_attr.61', 'args': ['$158build_tuple.70', '$162load_attr.72'], 'names': '$const164.73', 'res': '$166call_function_kw.74'}), (168, {'value': '$166call_function_kw.74'}), (170, {'res': '$170load_global.75'}), (172, {'res': '$steps172.76'}), (174, {'func': '$170load_global.75', 'args': ['$steps172.76'], 'res': '$174call_function.77'}), (176, {'value': '$174call_function.77', 'res': '$176get_iter.78'})), outgoing_phis={'$phi178.0': '$176get_iter.78'}, blockstack=(), active_try_block=None, outgoing_edgepushed={178: ('$176get_iter.78',)})
DEBUG 2022-02-14 16:46:35,177 block_infos State(pc_initial=178 nstack_initial=1):
AdaptBlockInfo(insts=((178, {'iterator': '$phi178.0', 'pair': '$178for_iter.1', 'indval': '$178for_iter.2', 'pred': '$178for_iter.3'}),), outgoing_phis={'$phi182.1': '$178for_iter.2'}, blockstack=(), active_try_block=None, outgoing_edgepushed={610: (), 182: ('$phi178.0', '$178for_iter.2')})
DEBUG 2022-02-14 16:46:35,177 block_infos State(pc_initial=182 nstack_initial=2):
AdaptBlockInfo(insts=((182, {'value': '$phi182.1'}), (184, {'res': '$184load_global.2'}), (186, {'item': '$184load_global.2', 'res': '$186load_attr.3'}), (188, {'res': '$n_D188.4'}), (190, {'res': '$const190.5'}), (192, {'res': '$batch_max192.6'}), (194, {'lhs': '$const190.5', 'rhs': '$batch_max192.6', 'res': '$194binary_multiply.7'}), (196, {'res': '$odd_cutoff196.8'}), (198, {'lhs': '$194binary_multiply.7', 'rhs': '$odd_cutoff196.8', 'res': '$198binary_add.9'}), (200, {'res': '$const200.10'}), (202, {'lhs': '$198binary_add.9', 'rhs': '$const200.10', 'res': '$202binary_add.11'}), (204, {'items': ['$n_D188.4', '$202binary_add.11'], 'res': '$204build_tuple.12'}), (206, {'res': '$206load_global.13'}), (208, {'item': '$206load_global.13', 'res': '$208load_attr.14'}), (210, {'res': '$const210.15'}), (212, {'func': '$186load_attr.3', 'args': ['$204build_tuple.12', '$208load_attr.14'], 'names': '$const210.15', 'res': '$212call_function_kw.16'}), (214, {'value': '$212call_function_kw.16'}), (216, {'res': '$216load_global.17'}), (218, {'res': '$j218.18'}), (220, {'res': '$edge_reps220.19'}), (222, {'func': '$216load_global.17', 'args': ['$j218.18', '$edge_reps220.19'], 'res': '$222call_function.20'}), (224, {'value': '$222call_function.20'}), (226, {'res': '$kept_edges226.21'}), (228, {'item': '$kept_edges226.21', 'res': '$228load_method.22'}), (230, {'func': '$228load_method.22', 'args': [], 'res': '$230call_method.23'}), (232, {'value': '$230call_method.23'}), (234, {'res': '$const234.24'}), (236, {'value': '$const234.24'}), (238, {'res': '$238load_global.25'}), (240, {'res': '$const240.26'}), (242, {'res': '$n242.27'}), (244, {'res': '$const244.28'}), (246, {'lhs': '$n242.27', 'rhs': '$const244.28', 'res': '$246binary_floor_divide.29'}), (248, {'func': '$238load_global.25', 'args': ['$const240.26', '$246binary_floor_divide.29'], 'res': '$248call_function.30'}), (250, {'value': '$248call_function.30', 'res': '$250get_iter.31'})), outgoing_phis={'$phi252.1': '$250get_iter.31'}, blockstack=(), active_try_block=None, outgoing_edgepushed={252: ('$phi182.0', '$250get_iter.31')})
DEBUG 2022-02-14 16:46:35,177 block_infos State(pc_initial=252 nstack_initial=2):
AdaptBlockInfo(insts=((252, {'iterator': '$phi252.1', 'pair': '$252for_iter.2', 'indval': '$252for_iter.3', 'pred': '$252for_iter.4'}),), outgoing_phis={'$phi254.2': '$252for_iter.3'}, blockstack=(), active_try_block=None, outgoing_edgepushed={282: ('$phi252.0',), 254: ('$phi252.0', '$phi252.1', '$252for_iter.3')})
DEBUG 2022-02-14 16:46:35,177 block_infos State(pc_initial=254 nstack_initial=3):
AdaptBlockInfo(insts=((254, {'value': '$phi254.2'}), (256, {'res': '$binom_prod256.3'}), (258, {'res': '$binoms258.4'}), (260, {'res': '$edge_reps260.5'}), (262, {'res': '$i262.6'}), (264, {'index': '$i262.6', 'target': '$edge_reps260.5', 'res': '$264binary_subscr.7'}), (266, {'res': '$kept_edges266.8'}), (268, {'res': '$i268.9'}), (270, {'index': '$i268.9', 'target': '$kept_edges266.8', 'res': '$270binary_subscr.10'}), (272, {'items': ['$264binary_subscr.7', '$270binary_subscr.10'], 'res': '$272build_tuple.11'}), (274, {'index': '$272build_tuple.11', 'target': '$binoms258.4', 'res': '$274binary_subscr.12'}), (276, {'lhs': '$binom_prod256.3', 'rhs': '$274binary_subscr.12', 'res': '$276inplace_multiply.13'}), (278, {'value': '$276inplace_multiply.13'}), (280, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={252: ('$phi254.0', '$phi254.1')})
DEBUG 2022-02-14 16:46:35,177 block_infos State(pc_initial=282 nstack_initial=1):
AdaptBlockInfo(insts=((282, {'res': '$glynn282.1'}), (284, {'pred': '$glynn282.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={288: ('$phi282.0',), 302: ('$phi282.0',)})
DEBUG 2022-02-14 16:46:35,177 block_infos State(pc_initial=288 nstack_initial=1):
AdaptBlockInfo(insts=((288, {'res': '$const288.1'}), (290, {'res': '$kept_edges290.2'}), (292, {'lhs': '$const288.1', 'rhs': '$kept_edges290.2', 'res': '$292binary_multiply.3'}), (294, {'res': '$edge_reps294.4'}), (296, {'lhs': '$292binary_multiply.3', 'rhs': '$edge_reps294.4', 'res': '$296binary_subtract.5'}), (298, {'value': '$296binary_subtract.5'}), (300, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={306: ('$phi288.0',)})
DEBUG 2022-02-14 16:46:35,177 block_infos State(pc_initial=302 nstack_initial=1):
AdaptBlockInfo(insts=((302, {'res': '$kept_edges302.1'}), (304, {'value': '$kept_edges302.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={306: ('$phi302.0',)})
DEBUG 2022-02-14 16:46:35,177 block_infos State(pc_initial=306 nstack_initial=1):
AdaptBlockInfo(insts=((306, {'res': '$306load_global.1'}), (308, {'res': '$delta308.2'}), (310, {'res': '$A310.3'}), (312, {'res': '$D312.4'}), (314, {'res': '$const314.5'}), (316, {'res': '$const316.6'}), (318, {'res': '$const318.7'}), (320, {'start': '$const316.6', 'stop': '$const318.7', 'step': None, 'res': '$320build_slice.9', 'slicevar': '$320build_slice.8'}), (322, {'items': ['$const314.5', '$320build_slice.9'], 'res': '$322build_tuple.10'}), (324, {'index': '$322build_tuple.10', 'target': '$D312.4', 'res': '$324binary_subscr.11'}), (326, {'res': '$oddV326.12'}), (328, {'func': '$306load_global.1', 'args': ['$delta308.2', '$A310.3', '$324binary_subscr.11', '$oddV326.12'], 'res': '$328call_function.13'}), (330, {'iterable': '$328call_function.13', 'stores': ['$330unpack_sequence.14', '$330unpack_sequence.15', '$330unpack_sequence.16', '$330unpack_sequence.17'], 'tupleobj': '$330unpack_sequence.18'}), (332, {'value': '$330unpack_sequence.14'}), (334, {'value': '$330unpack_sequence.15'}), (336, {'value': '$330unpack_sequence.16'}), (338, {'value': '$330unpack_sequence.17'}), (340, {'res': '$340load_global.19'}), (342, {'res': '$AX_S342.20'}), (344, {'func': '$340load_global.19', 'args': ['$AX_S342.20'], 'res': '$344call_function.21'}), (346, {'value': '$344call_function.21'}), (348, {'res': '$348load_global.22'}), (350, {'res': '$n_D350.23'}), (352, {'func': '$348load_global.22', 'args': ['$n_D350.23'], 'res': '$352call_function.24'}), (354, {'value': '$352call_function.24', 'res': '$354get_iter.25'})), outgoing_phis={'$phi356.1': '$354get_iter.25'}, blockstack=(), active_try_block=None, outgoing_edgepushed={356: ('$phi306.0', '$354get_iter.25')})
DEBUG 2022-02-14 16:46:35,177 block_infos State(pc_initial=356 nstack_initial=2):
AdaptBlockInfo(insts=((356, {'iterator': '$phi356.1', 'pair': '$356for_iter.2', 'indval': '$356for_iter.3', 'pred': '$356for_iter.4'}),), outgoing_phis={'$phi358.2': '$356for_iter.3'}, blockstack=(), active_try_block=None, outgoing_edgepushed={600: ('$phi356.0',), 358: ('$phi356.0', '$phi356.1', '$356for_iter.3')})
DEBUG 2022-02-14 16:46:35,177 block_infos State(pc_initial=358 nstack_initial=3):
AdaptBlockInfo(insts=((358, {'value': '$phi358.2'}), (360, {'res': '$360load_global.3'}), (362, {'res': '$delta362.4'}), (364, {'res': '$D364.5'}), (366, {'res': '$k366.6'}), (368, {'res': '$const368.7'}), (370, {'res': '$const370.8'}), (372, {'start': '$const368.7', 'stop': '$const370.8', 'step': None, 'res': '$372build_slice.10', 'slicevar': '$372build_slice.9'}), (374, {'items': ['$k366.6', '$372build_slice.10'], 'res': '$374build_tuple.11'}), (376, {'index': '$374build_tuple.11', 'target': '$D364.5', 'res': '$376binary_subscr.12'}), (378, {'func': '$360load_global.3', 'args': ['$delta362.4', '$376binary_subscr.12'], 'res': '$378call_function.13'}), (380, {'iterable': '$378call_function.13', 'stores': ['$380unpack_sequence.14', '$380unpack_sequence.15'], 'tupleobj': '$380unpack_sequence.16'}), (382, {'value': '$380unpack_sequence.14'}), (384, {'value': '$380unpack_sequence.15'}), (386, {'res': '$386load_global.17'}), (388, {'res': '$E388.18'}), (390, {'res': '$AX_S390.19'}), (392, {'res': '$XD_S392.20'}), (394, {'res': '$D_S394.21'}), (396, {'res': '$N_max396.22'}), (398, {'func': '$386load_global.17', 'args': ['$E388.18', '$AX_S390.19', '$XD_S392.20', '$D_S394.21', '$N_max396.22'], 'res': '$398call_function.23'}), (400, {'value': '$398call_function.23'}), (402, {'res': '$402load_global.24'}), (404, {'res': '$E404.25'}), (406, {'res': '$AX_S406.26'}), (408, {'res': '$XD_S408.27'}), (410, {'res': '$D_S410.28'}), (412, {'res': '$N_max412.29'}), (414, {'res': '$oddloop414.30'}), (416, {'res': '$k416.31'}), (418, {'index': '$k416.31', 'target': '$oddloop414.30', 'res': '$418binary_subscr.32'}), (420, {'res': '$oddVX_S420.33'}), (422, {'func': '$402load_global.24', 'args': ['$E404.25', '$AX_S406.26', '$XD_S408.27', '$D_S410.28', '$N_max412.29', '$418binary_subscr.32', '$oddVX_S420.33'], 'res': '$422call_function.34'}), (424, {'value': '$422call_function.34'}), (426, {'res': '$426load_global.35'}), (428, {'res': '$const428.36'}), (430, {'res': '$kept_edges430.37'}), (432, {'res': '$const432.38'}), (434, {'index': '$const432.38', 'target': '$kept_edges430.37', 'res': '$434binary_subscr.39'}), (436, {'lhs': '$const428.36', 'rhs': '$434binary_subscr.39', 'res': '$436binary_multiply.40'}), (438, {'res': '$const438.41'}), (440, {'res': '$batch_max440.42'}), (442, {'lhs': '$const438.41', 'rhs': '$batch_max440.42', 'res': '$442binary_multiply.43'}), (444, {'res': '$odd_cutoff444.44'}), (446, {'lhs': '$442binary_multiply.43', 'rhs': '$odd_cutoff444.44', 'res': '$446binary_add.45'}), (448, {'res': '$const448.46'}), (450, {'lhs': '$446binary_add.45', 'rhs': '$const448.46', 'res': '$450binary_add.47'}), (452, {'func': '$426load_global.35', 'args': ['$436binary_multiply.40', '$450binary_add.47'], 'res': '$452call_function.48'}), (454, {'value': '$452call_function.48', 'res': '$454get_iter.49'})), outgoing_phis={'$phi456.2': '$454get_iter.49'}, blockstack=(), active_try_block=None, outgoing_edgepushed={456: ('$phi358.0', '$phi358.1', '$454get_iter.49')})
DEBUG 2022-02-14 16:46:35,178 block_infos State(pc_initial=456 nstack_initial=3):
AdaptBlockInfo(insts=((456, {'iterator': '$phi456.2', 'pair': '$456for_iter.3', 'indval': '$456for_iter.4', 'pred': '$456for_iter.5'}),), outgoing_phis={'$phi458.3': '$456for_iter.4'}, blockstack=(), active_try_block=None, outgoing_edgepushed={596: ('$phi456.0', '$phi456.1'), 458: ('$phi456.0', '$phi456.1', '$phi456.2', '$456for_iter.4')})
DEBUG 2022-02-14 16:46:35,178 block_infos State(pc_initial=458 nstack_initial=4):
AdaptBlockInfo(insts=((458, {'value': '$phi458.3'}), (460, {'res': '$N_fixed460.4'}), (462, {'res': '$N_det462.5'}), (464, {'lhs': '$N_fixed460.4', 'rhs': '$N_det462.5', 'res': '$464binary_add.6'}), (466, {'value': '$464binary_add.6'}), (468, {'res': '$const468.7'}), (470, {'res': '$N470.8'}), (472, {'res': '$const472.9'}), (474, {'lhs': '$N470.8', 'rhs': '$const472.9', 'res': '$474binary_floor_divide.10'}), (476, {'res': '$edges_sum476.11'}), (478, {'lhs': '$474binary_floor_divide.10', 'rhs': '$edges_sum476.11', 'res': '$478binary_subtract.12'}), (480, {'lhs': '$const468.7', 'rhs': '$478binary_subtract.12', 'res': '$480binary_power.13'}), (482, {'value': '$480binary_power.13'}), (484, {'res': '$binoms484.14'}), (486, {'res': '$N_det486.15'}), (488, {'res': '$const488.16'}), (490, {'lhs': '$N_det486.15', 'rhs': '$const488.16', 'res': '$490binary_floor_divide.17'}), (492, {'res': '$kept_edges492.18'}), (494, {'res': '$const494.19'}), (496, {'index': '$const494.19', 'target': '$kept_edges492.18', 'res': '$496binary_subscr.20'}), (498, {'items': ['$490binary_floor_divide.17', '$496binary_subscr.20'], 'res': '$498build_tuple.21'}), (500, {'index': '$498build_tuple.21', 'target': '$binoms484.14', 'res': '$500binary_subscr.22'}), (502, {'res': '$binom_prod502.23'}), (504, {'lhs': '$500binary_subscr.22', 'rhs': '$binom_prod502.23', 'res': '$504binary_multiply.24'}), (506, {'value': '$504binary_multiply.24'}), (508, {'res': '$N_det508.25'}), (510, {'res': '$const510.26'}), (512, {'lhs': '$N_det508.25', 'rhs': '$const510.26', 'res': '$512binary_modulo.27'}), (514, {'res': '$const514.28'}), (516, {'lhs': '$512binary_modulo.27', 'rhs': '$const514.28', 'res': '$516compare_op.29'}), (518, {'pred': '$516compare_op.29'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={522: ('$phi458.0', '$phi458.1', '$phi458.2'), 560: ('$phi458.0', '$phi458.1', '$phi458.2')})
DEBUG 2022-02-14 16:46:35,178 block_infos State(pc_initial=522 nstack_initial=3):
AdaptBlockInfo(insts=((522, {'res': '$Hnew522.3'}), (524, {'res': '$k524.4'}), (526, {'res': '$N_det526.5'}), (528, {'items': ['$k524.4', '$N_det526.5'], 'res': '$528build_tuple.6'}), (530, {'orig': ['$Hnew522.3', '$528build_tuple.6'], 'duped': ['$530dup_top_two.7', '$530dup_top_two.8']}), (532, {'index': '$530dup_top_two.8', 'target': '$530dup_top_two.7', 'res': '$532binary_subscr.9'}), (534, {'res': '$n_det_binom_prod534.10'}), (536, {'res': '$plus_minus536.11'}), (538, {'lhs': '$n_det_binom_prod534.10', 'rhs': '$plus_minus536.11', 'res': '$538binary_multiply.12'}), (540, {'res': '$f_even540.13'}), (542, {'res': '$N542.14'}), (544, {'res': '$const544.15'}), (546, {'lhs': '$N542.14', 'rhs': '$const544.15', 'res': '$546binary_floor_divide.16'}), (548, {'index': '$546binary_floor_divide.16', 'target': '$f_even540.13', 'res': '$548binary_subscr.17'}), (550, {'lhs': '$538binary_multiply.12', 'rhs': '$548binary_subscr.17', 'res': '$550binary_multiply.18'}), (552, {'lhs': '$532binary_subscr.9', 'rhs': '$550binary_multiply.18', 'res': '$552inplace_add.19'}), (556, {'target': '$Hnew522.3', 'index': '$528build_tuple.6', 'value': '$552inplace_add.19'}), (558, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={592: ('$phi522.0', '$phi522.1', '$phi522.2')})
DEBUG 2022-02-14 16:46:35,178 block_infos State(pc_initial=560 nstack_initial=3):
AdaptBlockInfo(insts=((560, {'res': '$Hnew560.3'}), (562, {'res': '$k562.4'}), (564, {'res': '$N_det564.5'}), (566, {'items': ['$k562.4', '$N_det564.5'], 'res': '$566build_tuple.6'}), (568, {'orig': ['$Hnew560.3', '$566build_tuple.6'], 'duped': ['$568dup_top_two.7', '$568dup_top_two.8']}), (570, {'index': '$568dup_top_two.8', 'target': '$568dup_top_two.7', 'res': '$570binary_subscr.9'}), (572, {'res': '$n_det_binom_prod572.10'}), (574, {'res': '$plus_minus574.11'}), (576, {'lhs': '$n_det_binom_prod572.10', 'rhs': '$plus_minus574.11', 'res': '$576binary_multiply.12'}), (578, {'res': '$f_odd578.13'}), (580, {'res': '$N580.14'}), (582, {'index': '$N580.14', 'target': '$f_odd578.13', 'res': '$582binary_subscr.15'}), (584, {'lhs': '$576binary_multiply.12', 'rhs': '$582binary_subscr.15', 'res': '$584binary_multiply.16'}), (586, {'lhs': '$570binary_subscr.9', 'rhs': '$584binary_multiply.16', 'res': '$586inplace_add.17'}), (590, {'target': '$Hnew560.3', 'index': '$566build_tuple.6', 'value': '$586inplace_add.17'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={592: ('$phi560.0', '$phi560.1', '$phi560.2')})
DEBUG 2022-02-14 16:46:35,178 block_infos State(pc_initial=592 nstack_initial=3):
AdaptBlockInfo(insts=((592, {}),), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={456: ('$phi592.0', '$phi592.1', '$phi592.2')})
DEBUG 2022-02-14 16:46:35,178 block_infos State(pc_initial=596 nstack_initial=2):
AdaptBlockInfo(insts=((596, {}),), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={356: ('$phi596.0', '$phi596.1')})
DEBUG 2022-02-14 16:46:35,178 block_infos State(pc_initial=600 nstack_initial=1):
AdaptBlockInfo(insts=((600, {'res': '$H_batch600.1'}), (602, {'res': '$Hnew602.2'}), (604, {'lhs': '$H_batch600.1', 'rhs': '$Hnew602.2', 'res': '$604inplace_add.3'}), (606, {'value': '$604inplace_add.3'}), (608, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={178: ('$phi600.0',)})
DEBUG 2022-02-14 16:46:35,178 block_infos State(pc_initial=610 nstack_initial=0):
AdaptBlockInfo(insts=((610, {'res': '$glynn610.0'}), (612, {'pred': '$glynn610.0'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={616: (), 678: ()})
DEBUG 2022-02-14 16:46:35,178 block_infos State(pc_initial=616 nstack_initial=0):
AdaptBlockInfo(insts=((616, {'res': '$616load_global.0'}), (618, {'res': '$H_batch618.1'}), (620, {'item': '$H_batch618.1', 'res': '$620load_attr.2'}), (622, {'res': '$const622.3'}), (624, {'index': '$const622.3', 'target': '$620load_attr.2', 'res': '$624binary_subscr.4'}), (626, {'func': '$616load_global.0', 'args': ['$624binary_subscr.4'], 'res': '$626call_function.5'}), (628, {'value': '$626call_function.5', 'res': '$628get_iter.6'})), outgoing_phis={'$phi630.0': '$628get_iter.6'}, blockstack=(), active_try_block=None, outgoing_edgepushed={630: ('$628get_iter.6',)})
DEBUG 2022-02-14 16:46:35,178 block_infos State(pc_initial=630 nstack_initial=1):
AdaptBlockInfo(insts=((630, {'iterator': '$phi630.0', 'pair': '$630for_iter.1', 'indval': '$630for_iter.2', 'pred': '$630for_iter.3'}),), outgoing_phis={'$phi632.1': '$630for_iter.2'}, blockstack=(), active_try_block=None, outgoing_edgepushed={678: (), 632: ('$phi630.0', '$630for_iter.2')})
DEBUG 2022-02-14 16:46:35,178 block_infos State(pc_initial=632 nstack_initial=2):
AdaptBlockInfo(insts=((632, {'value': '$phi632.1'}), (634, {'res': '$N_fixed634.2'}), (636, {'res': '$j636.3'}), (638, {'lhs': '$N_fixed634.2', 'rhs': '$j636.3', 'res': '$638binary_add.4'}), (640, {'value': '$638binary_add.4'}), (642, {'res': '$H_batch642.5'}), (644, {'res': '$const644.6'}), (646, {'res': '$const646.7'}), (648, {'start': '$const644.6', 'stop': '$const646.7', 'step': None, 'res': '$648build_slice.9', 'slicevar': '$648build_slice.8'}), (650, {'res': '$j650.10'}), (652, {'items': ['$648build_slice.9', '$j650.10'], 'res': '$652build_tuple.11'}), (654, {'orig': ['$H_batch642.5', '$652build_tuple.11'], 'duped': ['$654dup_top_two.12', '$654dup_top_two.13']}), (656, {'index': '$654dup_top_two.13', 'target': '$654dup_top_two.12', 'res': '$656binary_subscr.14'}), (658, {'res': '$const658.15'}), (660, {'res': '$x660.16'}), (662, {'res': '$const662.17'}), (664, {'lhs': '$x660.16', 'rhs': '$const662.17', 'res': '$664binary_floor_divide.18'}), (666, {'lhs': '$const658.15', 'rhs': '$664binary_floor_divide.18', 'res': '$666binary_power.19'}), (668, {'lhs': '$656binary_subscr.14', 'rhs': '$666binary_power.19', 'res': '$668inplace_multiply.20'}), (672, {'target': '$H_batch642.5', 'index': '$652build_tuple.11', 'value': '$668inplace_multiply.20'}), (674, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={630: ('$phi632.0',)})
DEBUG 2022-02-14 16:46:35,178 block_infos State(pc_initial=678 nstack_initial=0):
AdaptBlockInfo(insts=((678, {'res': '$H_batch678.0'}), (680, {'retval': '$H_batch678.0', 'castval': '$680return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG 2022-02-14 16:46:35,185 label 0:
    A = arg(0, name=A)                       ['A']
    D = arg(1, name=D)                       ['D']
    fixed_edge_reps = arg(2, name=fixed_edge_reps) ['fixed_edge_reps']
    batch_max = arg(3, name=batch_max)       ['batch_max']
    odd_cutoff = arg(4, name=odd_cutoff)     ['odd_cutoff']
    glynn = arg(5, name=glynn)               ['glynn']
    $const4.1 = const(NoneType, None)        ['$const4.1']
    $const6.2 = const(NoneType, None)        ['$const6.2']
    $8build_slice.3 = global(slice: <class 'slice'>) ['$8build_slice.3']
    $8build_slice.4 = call $8build_slice.3($const4.1, $const6.2, func=$8build_slice.3, args=(Var($const4.1, loop_hafnian_batch_gamma.py:23), Var($const6.2, loop_hafnian_batch_gamma.py:23)), kws=(), vararg=None, target=None) ['$8build_slice.3', '$8build_slice.4', '$const4.1', '$const6.2']
    $const10.5 = const(int, 0)               ['$const10.5']
    $12build_tuple.6 = build_tuple(items=[Var($8build_slice.4, loop_hafnian_batch_gamma.py:23), Var($const10.5, loop_hafnian_batch_gamma.py:23)]) ['$12build_tuple.6', '$8build_slice.4', '$const10.5']
    oddloop = getitem(value=D, index=$12build_tuple.6, fn=<built-in function getitem>) ['$12build_tuple.6', 'D', 'oddloop']
    $const20.9 = const(int, 0)               ['$const20.9']
    $const22.10 = const(NoneType, None)      ['$const22.10']
    $const24.11 = const(NoneType, None)      ['$const24.11']
    $26build_slice.12 = global(slice: <class 'slice'>) ['$26build_slice.12']
    $26build_slice.13 = call $26build_slice.12($const22.10, $const24.11, func=$26build_slice.12, args=(Var($const22.10, loop_hafnian_batch_gamma.py:24), Var($const24.11, loop_hafnian_batch_gamma.py:24)), kws=(), vararg=None, target=None) ['$26build_slice.12', '$26build_slice.13', '$const22.10', '$const24.11']
    $28build_tuple.14 = build_tuple(items=[Var($const20.9, loop_hafnian_batch_gamma.py:24), Var($26build_slice.13, loop_hafnian_batch_gamma.py:24)]) ['$26build_slice.13', '$28build_tuple.14', '$const20.9']
    oddV = getitem(value=A, index=$28build_tuple.14, fn=<built-in function getitem>) ['$28build_tuple.14', 'A', 'oddV']
    $36load_attr.17 = getattr(value=A, attr=shape) ['$36load_attr.17', 'A']
    $const38.18 = const(int, 0)              ['$const38.18']
    n = getitem(value=$36load_attr.17, index=$const38.18, fn=<built-in function getitem>) ['$36load_attr.17', '$const38.18', 'n']
    $const44.20 = const(int, 2)              ['$const44.20']
    $48load_method.22 = getattr(value=fixed_edge_reps, attr=sum) ['$48load_method.22', 'fixed_edge_reps']
    $50call_method.23 = call $48load_method.22(func=$48load_method.22, args=[], kws=(), vararg=None, target=None) ['$48load_method.22', '$50call_method.23']
    N_fixed = $const44.20 * $50call_method.23 ['$50call_method.23', '$const44.20', 'N_fixed']
    $const58.26 = const(int, 2)              ['$const58.26']
    $62binary_multiply.28 = $const58.26 * batch_max ['$62binary_multiply.28', '$const58.26', 'batch_max']
    $64binary_add.29 = N_fixed + $62binary_multiply.28 ['$62binary_multiply.28', '$64binary_add.29', 'N_fixed']
    N_max = $64binary_add.29 + odd_cutoff    ['$64binary_add.29', 'N_max', 'odd_cutoff']
    $72load_global.32 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>) ['$72load_global.32']
    $74load_method.33 = getattr(value=$72load_global.32, attr=concatenate) ['$72load_global.32', '$74load_method.33']
    $76load_global.34 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>) ['$76load_global.34']
    $78load_method.35 = getattr(value=$76load_global.34, attr=array) ['$76load_global.34', '$78load_method.35']
    $82build_list.37 = build_list(items=[Var(batch_max, loop_hafnian_batch_gamma.py:23)]) ['$82build_list.37', 'batch_max']
    $84call_method.38 = call $78load_method.35($82build_list.37, func=$78load_method.35, args=[Var($82build_list.37, loop_hafnian_batch_gamma.py:31)], kws=(), vararg=None, target=None) ['$78load_method.35', '$82build_list.37', '$84call_method.38']
    $88build_tuple.40 = build_tuple(items=[Var($84call_method.38, loop_hafnian_batch_gamma.py:31), Var(fixed_edge_reps, loop_hafnian_batch_gamma.py:23)]) ['$84call_method.38', '$88build_tuple.40', 'fixed_edge_reps']
    edge_reps = call $74load_method.33($88build_tuple.40, func=$74load_method.33, args=[Var($88build_tuple.40, loop_hafnian_batch_gamma.py:31)], kws=(), vararg=None, target=None) ['$74load_method.33', '$88build_tuple.40', 'edge_reps']
    $94load_global.42 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>) ['$94load_global.42']
    $96load_method.43 = getattr(value=$94load_global.42, attr=prod) ['$94load_global.42', '$96load_method.43']
    $const100.45 = const(int, 1)             ['$const100.45']
    $102binary_add.46 = edge_reps + $const100.45 ['$102binary_add.46', '$const100.45', 'edge_reps']
    steps = call $96load_method.43($102binary_add.46, func=$96load_method.43, args=[Var($102binary_add.46, loop_hafnian_batch_gamma.py:32)], kws=(), vararg=None, target=None) ['$102binary_add.46', '$96load_method.43', 'steps']
    $110load_method.49 = getattr(value=edge_reps, attr=max) ['$110load_method.49', 'edge_reps']
    $112call_method.50 = call $110load_method.49(func=$110load_method.49, args=[], kws=(), vararg=None, target=None) ['$110load_method.49', '$112call_method.50']
    max_binom = $112call_method.50 + odd_cutoff ['$112call_method.50', 'max_binom', 'odd_cutoff']
    $120load_global.53 = global(precompute_binoms: CPUDispatcher(<function precompute_binoms at 0x7f7207b0e280>)) ['$120load_global.53']
    binoms = call $120load_global.53(max_binom, func=$120load_global.53, args=[Var(max_binom, loop_hafnian_batch_gamma.py:34)], kws=(), vararg=None, target=None) ['$120load_global.53', 'binoms', 'max_binom']
    $130load_attr.57 = getattr(value=D, attr=shape) ['$130load_attr.57', 'D']
    $const132.58 = const(int, 0)             ['$const132.58']
    n_D = getitem(value=$130load_attr.57, index=$const132.58, fn=<built-in function getitem>) ['$130load_attr.57', '$const132.58', 'n_D']
    $138load_global.60 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>) ['$138load_global.60']
    $140load_attr.61 = getattr(value=$138load_global.60, attr=zeros) ['$138load_global.60', '$140load_attr.61']
    $const144.63 = const(int, 2)             ['$const144.63']
    $148binary_multiply.65 = $const144.63 * batch_max ['$148binary_multiply.65', '$const144.63', 'batch_max']
    $152binary_add.67 = $148binary_multiply.65 + odd_cutoff ['$148binary_multiply.65', '$152binary_add.67', 'odd_cutoff']
    $const154.68 = const(int, 1)             ['$const154.68']
    $156binary_add.69 = $152binary_add.67 + $const154.68 ['$152binary_add.67', '$156binary_add.69', '$const154.68']
    $158build_tuple.70 = build_tuple(items=[Var(n_D, loop_hafnian_batch_gamma.py:36), Var($156binary_add.69, loop_hafnian_batch_gamma.py:38)]) ['$156binary_add.69', '$158build_tuple.70', 'n_D']
    $160load_global.71 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>) ['$160load_global.71']
    $162load_attr.72 = getattr(value=$160load_global.71, attr=complex128) ['$160load_global.71', '$162load_attr.72']
    H_batch = call $140load_attr.61($158build_tuple.70, func=$140load_attr.61, args=[Var($158build_tuple.70, loop_hafnian_batch_gamma.py:38)], kws=[('dtype', Var($162load_attr.72, loop_hafnian_batch_gamma.py:38))], vararg=None, target=None) ['$140load_attr.61', '$158build_tuple.70', '$162load_attr.72', 'H_batch']
    $170load_global.75 = global(prange: <class 'numba.misc.special.prange'>) ['$170load_global.75']
    $174call_function.77 = call $170load_global.75(steps, func=$170load_global.75, args=[Var(steps, loop_hafnian_batch_gamma.py:32)], kws=(), vararg=None, target=None) ['$170load_global.75', '$174call_function.77', 'steps']
    $176get_iter.78 = getiter(value=$174call_function.77) ['$174call_function.77', '$176get_iter.78']
    $phi178.0 = $176get_iter.78              ['$176get_iter.78', '$phi178.0']
    jump 178                                 []
label 178:
    $178for_iter.1 = iternext(value=$phi178.0) ['$178for_iter.1', '$phi178.0']
    $178for_iter.2 = pair_first(value=$178for_iter.1) ['$178for_iter.1', '$178for_iter.2']
    $178for_iter.3 = pair_second(value=$178for_iter.1) ['$178for_iter.1', '$178for_iter.3']
    $phi182.1 = $178for_iter.2               ['$178for_iter.2', '$phi182.1']
    branch $178for_iter.3, 182, 610          ['$178for_iter.3']
label 182:
    j = $phi182.1                            ['$phi182.1', 'j']
    $184load_global.2 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>) ['$184load_global.2']
    $186load_attr.3 = getattr(value=$184load_global.2, attr=zeros) ['$184load_global.2', '$186load_attr.3']
    $const190.5 = const(int, 2)              ['$const190.5']
    $194binary_multiply.7 = $const190.5 * batch_max ['$194binary_multiply.7', '$const190.5', 'batch_max']
    $198binary_add.9 = $194binary_multiply.7 + odd_cutoff ['$194binary_multiply.7', '$198binary_add.9', 'odd_cutoff']
    $const200.10 = const(int, 1)             ['$const200.10']
    $202binary_add.11 = $198binary_add.9 + $const200.10 ['$198binary_add.9', '$202binary_add.11', '$const200.10']
    $204build_tuple.12 = build_tuple(items=[Var(n_D, loop_hafnian_batch_gamma.py:36), Var($202binary_add.11, loop_hafnian_batch_gamma.py:42)]) ['$202binary_add.11', '$204build_tuple.12', 'n_D']
    $206load_global.13 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>) ['$206load_global.13']
    $208load_attr.14 = getattr(value=$206load_global.13, attr=complex128) ['$206load_global.13', '$208load_attr.14']
    Hnew = call $186load_attr.3($204build_tuple.12, func=$186load_attr.3, args=[Var($204build_tuple.12, loop_hafnian_batch_gamma.py:42)], kws=[('dtype', Var($208load_attr.14, loop_hafnian_batch_gamma.py:42))], vararg=None, target=None) ['$186load_attr.3', '$204build_tuple.12', '$208load_attr.14', 'Hnew']
    $216load_global.17 = global(find_kept_edges: CPUDispatcher(<function find_kept_edges at 0x7f7207b0e700>)) ['$216load_global.17']
    kept_edges = call $216load_global.17(j, edge_reps, func=$216load_global.17, args=[Var(j, loop_hafnian_batch_gamma.py:40), Var(edge_reps, loop_hafnian_batch_gamma.py:31)], kws=(), vararg=None, target=None) ['$216load_global.17', 'edge_reps', 'j', 'kept_edges']
    $228load_method.22 = getattr(value=kept_edges, attr=sum) ['$228load_method.22', 'kept_edges']
    edges_sum = call $228load_method.22(func=$228load_method.22, args=[], kws=(), vararg=None, target=None) ['$228load_method.22', 'edges_sum']
    binom_prod = const(float, 1.0)           ['binom_prod']
    $238load_global.25 = global(range: <class 'range'>) ['$238load_global.25']
    $const240.26 = const(int, 1)             ['$const240.26']
    $const244.28 = const(int, 2)             ['$const244.28']
    $246binary_floor_divide.29 = n // $const244.28 ['$246binary_floor_divide.29', '$const244.28', 'n']
    $248call_function.30 = call $238load_global.25($const240.26, $246binary_floor_divide.29, func=$238load_global.25, args=[Var($const240.26, loop_hafnian_batch_gamma.py:48), Var($246binary_floor_divide.29, loop_hafnian_batch_gamma.py:48)], kws=(), vararg=None, target=None) ['$238load_global.25', '$246binary_floor_divide.29', '$248call_function.30', '$const240.26']
    $250get_iter.31 = getiter(value=$248call_function.30) ['$248call_function.30', '$250get_iter.31']
    $phi252.1 = $250get_iter.31              ['$250get_iter.31', '$phi252.1']
    jump 252                                 []
label 252:
    $252for_iter.2 = iternext(value=$phi252.1) ['$252for_iter.2', '$phi252.1']
    $252for_iter.3 = pair_first(value=$252for_iter.2) ['$252for_iter.2', '$252for_iter.3']
    $252for_iter.4 = pair_second(value=$252for_iter.2) ['$252for_iter.2', '$252for_iter.4']
    $phi254.2 = $252for_iter.3               ['$252for_iter.3', '$phi254.2']
    branch $252for_iter.4, 254, 282          ['$252for_iter.4']
label 254:
    i = $phi254.2                            ['$phi254.2', 'i']
    $264binary_subscr.7 = getitem(value=edge_reps, index=i, fn=<built-in function getitem>) ['$264binary_subscr.7', 'edge_reps', 'i']
    $270binary_subscr.10 = getitem(value=kept_edges, index=i, fn=<built-in function getitem>) ['$270binary_subscr.10', 'i', 'kept_edges']
    $272build_tuple.11 = build_tuple(items=[Var($264binary_subscr.7, loop_hafnian_batch_gamma.py:49), Var($270binary_subscr.10, loop_hafnian_batch_gamma.py:49)]) ['$264binary_subscr.7', '$270binary_subscr.10', '$272build_tuple.11']
    $274binary_subscr.12 = getitem(value=binoms, index=$272build_tuple.11, fn=<built-in function getitem>) ['$272build_tuple.11', '$274binary_subscr.12', 'binoms']
    $276inplace_multiply.13 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=binom_prod, rhs=$274binary_subscr.12, static_lhs=Undefined, static_rhs=Undefined) ['$274binary_subscr.12', '$276inplace_multiply.13', 'binom_prod']
    binom_prod = $276inplace_multiply.13     ['$276inplace_multiply.13', 'binom_prod']
    jump 252                                 []
label 282:
    bool284 = global(bool: <class 'bool'>)   ['bool284']
    $284pred = call bool284(glynn, func=bool284, args=(Var(glynn, loop_hafnian_batch_gamma.py:23),), kws=(), vararg=None, target=None) ['$284pred', 'bool284', 'glynn']
    branch $284pred, 288, 302                ['$284pred']
label 288:
    $const288.1 = const(int, 2)              ['$const288.1']
    $292binary_multiply.3 = $const288.1 * kept_edges ['$292binary_multiply.3', '$const288.1', 'kept_edges']
    delta = $292binary_multiply.3 - edge_reps ['$292binary_multiply.3', 'delta', 'edge_reps']
    jump 306                                 []
label 302:
    delta = kept_edges                       ['delta', 'kept_edges']
    jump 306                                 []
label 306:
    $306load_global.1 = global(get_submatrices: CPUDispatcher(<function get_submatrices at 0x7f7207b0eca0>)) ['$306load_global.1']
    $const314.5 = const(int, 0)              ['$const314.5']
    $const316.6 = const(NoneType, None)      ['$const316.6']
    $const318.7 = const(NoneType, None)      ['$const318.7']
    $320build_slice.8 = global(slice: <class 'slice'>) ['$320build_slice.8']
    $320build_slice.9 = call $320build_slice.8($const316.6, $const318.7, func=$320build_slice.8, args=(Var($const316.6, loop_hafnian_batch_gamma.py:56), Var($const318.7, loop_hafnian_batch_gamma.py:56)), kws=(), vararg=None, target=None) ['$320build_slice.8', '$320build_slice.9', '$const316.6', '$const318.7']
    $322build_tuple.10 = build_tuple(items=[Var($const314.5, loop_hafnian_batch_gamma.py:56), Var($320build_slice.9, loop_hafnian_batch_gamma.py:56)]) ['$320build_slice.9', '$322build_tuple.10', '$const314.5']
    $324binary_subscr.11 = getitem(value=D, index=$322build_tuple.10, fn=<built-in function getitem>) ['$322build_tuple.10', '$324binary_subscr.11', 'D']
    $328call_function.13 = call $306load_global.1(delta, A, $324binary_subscr.11, oddV, func=$306load_global.1, args=[Var(delta, loop_hafnian_batch_gamma.py:52), Var(A, loop_hafnian_batch_gamma.py:23), Var($324binary_subscr.11, loop_hafnian_batch_gamma.py:56), Var(oddV, loop_hafnian_batch_gamma.py:24)], kws=(), vararg=None, target=None) ['$306load_global.1', '$324binary_subscr.11', '$328call_function.13', 'A', 'delta', 'oddV']
    $330unpack_sequence.18 = exhaust_iter(value=$328call_function.13, count=4) ['$328call_function.13', '$330unpack_sequence.18']
    $330unpack_sequence.14 = static_getitem(value=$330unpack_sequence.18, index=0, index_var=None, fn=<built-in function getitem>) ['$330unpack_sequence.14', '$330unpack_sequence.18']
    $330unpack_sequence.15 = static_getitem(value=$330unpack_sequence.18, index=1, index_var=None, fn=<built-in function getitem>) ['$330unpack_sequence.15', '$330unpack_sequence.18']
    $330unpack_sequence.16 = static_getitem(value=$330unpack_sequence.18, index=2, index_var=None, fn=<built-in function getitem>) ['$330unpack_sequence.16', '$330unpack_sequence.18']
    $330unpack_sequence.17 = static_getitem(value=$330unpack_sequence.18, index=3, index_var=None, fn=<built-in function getitem>) ['$330unpack_sequence.17', '$330unpack_sequence.18']
    AX_S = $330unpack_sequence.14            ['$330unpack_sequence.14', 'AX_S']
    XD_S = $330unpack_sequence.15            ['$330unpack_sequence.15', 'XD_S']
    D_S = $330unpack_sequence.16             ['$330unpack_sequence.16', 'D_S']
    oddVX_S = $330unpack_sequence.17         ['$330unpack_sequence.17', 'oddVX_S']
    $340load_global.19 = global(eigvals: CPUDispatcher(<function eigvals at 0x7f7207a993a0>)) ['$340load_global.19']
    E = call $340load_global.19(AX_S, func=$340load_global.19, args=[Var(AX_S, loop_hafnian_batch_gamma.py:56)], kws=(), vararg=None, target=None) ['$340load_global.19', 'AX_S', 'E']
    $348load_global.22 = global(range: <class 'range'>) ['$348load_global.22']
    $352call_function.24 = call $348load_global.22(n_D, func=$348load_global.22, args=[Var(n_D, loop_hafnian_batch_gamma.py:36)], kws=(), vararg=None, target=None) ['$348load_global.22', '$352call_function.24', 'n_D']
    $354get_iter.25 = getiter(value=$352call_function.24) ['$352call_function.24', '$354get_iter.25']
    $phi356.1 = $354get_iter.25              ['$354get_iter.25', '$phi356.1']
    jump 356                                 []
label 356:
    $356for_iter.2 = iternext(value=$phi356.1) ['$356for_iter.2', '$phi356.1']
    $356for_iter.3 = pair_first(value=$356for_iter.2) ['$356for_iter.2', '$356for_iter.3']
    $356for_iter.4 = pair_second(value=$356for_iter.2) ['$356for_iter.2', '$356for_iter.4']
    $phi358.2 = $356for_iter.3               ['$356for_iter.3', '$phi358.2']
    branch $356for_iter.4, 358, 600          ['$356for_iter.4']
label 358:
    k = $phi358.2                            ['$phi358.2', 'k']
    $360load_global.3 = global(get_Dsubmatrices: CPUDispatcher(<function get_Dsubmatrices at 0x7f7207a99160>)) ['$360load_global.3']
    $const368.7 = const(NoneType, None)      ['$const368.7']
    $const370.8 = const(NoneType, None)      ['$const370.8']
    $372build_slice.9 = global(slice: <class 'slice'>) ['$372build_slice.9']
    $372build_slice.10 = call $372build_slice.9($const368.7, $const370.8, func=$372build_slice.9, args=(Var($const368.7, loop_hafnian_batch_gamma.py:61), Var($const370.8, loop_hafnian_batch_gamma.py:61)), kws=(), vararg=None, target=None) ['$372build_slice.10', '$372build_slice.9', '$const368.7', '$const370.8']
    $374build_tuple.11 = build_tuple(items=[Var(k, loop_hafnian_batch_gamma.py:60), Var($372build_slice.10, loop_hafnian_batch_gamma.py:61)]) ['$372build_slice.10', '$374build_tuple.11', 'k']
    $376binary_subscr.12 = getitem(value=D, index=$374build_tuple.11, fn=<built-in function getitem>) ['$374build_tuple.11', '$376binary_subscr.12', 'D']
    $378call_function.13 = call $360load_global.3(delta, $376binary_subscr.12, func=$360load_global.3, args=[Var(delta, loop_hafnian_batch_gamma.py:52), Var($376binary_subscr.12, loop_hafnian_batch_gamma.py:61)], kws=(), vararg=None, target=None) ['$360load_global.3', '$376binary_subscr.12', '$378call_function.13', 'delta']
    $380unpack_sequence.16 = exhaust_iter(value=$378call_function.13, count=2) ['$378call_function.13', '$380unpack_sequence.16']
    $380unpack_sequence.14 = static_getitem(value=$380unpack_sequence.16, index=0, index_var=None, fn=<built-in function getitem>) ['$380unpack_sequence.14', '$380unpack_sequence.16']
    $380unpack_sequence.15 = static_getitem(value=$380unpack_sequence.16, index=1, index_var=None, fn=<built-in function getitem>) ['$380unpack_sequence.15', '$380unpack_sequence.16']
    XD_S = $380unpack_sequence.14            ['$380unpack_sequence.14', 'XD_S']
    D_S = $380unpack_sequence.15             ['$380unpack_sequence.15', 'D_S']
    $386load_global.17 = global(f_loop: CPUDispatcher(<function f_loop at 0x7f7207b0e940>)) ['$386load_global.17']
    f_even = call $386load_global.17(E, AX_S, XD_S, D_S, N_max, func=$386load_global.17, args=[Var(E, loop_hafnian_batch_gamma.py:58), Var(AX_S, loop_hafnian_batch_gamma.py:56), Var(XD_S, loop_hafnian_batch_gamma.py:56), Var(D_S, loop_hafnian_batch_gamma.py:56), Var(N_max, loop_hafnian_batch_gamma.py:29)], kws=(), vararg=None, target=None) ['$386load_global.17', 'AX_S', 'D_S', 'E', 'N_max', 'XD_S', 'f_even']
    $402load_global.24 = global(f_loop_odd: CPUDispatcher(<function f_loop_odd at 0x7f7207b0eaf0>)) ['$402load_global.24']
    $418binary_subscr.32 = getitem(value=oddloop, index=k, fn=<built-in function getitem>) ['$418binary_subscr.32', 'k', 'oddloop']
    f_odd = call $402load_global.24(E, AX_S, XD_S, D_S, N_max, $418binary_subscr.32, oddVX_S, func=$402load_global.24, args=[Var(E, loop_hafnian_batch_gamma.py:58), Var(AX_S, loop_hafnian_batch_gamma.py:56), Var(XD_S, loop_hafnian_batch_gamma.py:56), Var(D_S, loop_hafnian_batch_gamma.py:56), Var(N_max, loop_hafnian_batch_gamma.py:29), Var($418binary_subscr.32, loop_hafnian_batch_gamma.py:64), Var(oddVX_S, loop_hafnian_batch_gamma.py:56)], kws=(), vararg=None, target=None) ['$402load_global.24', '$418binary_subscr.32', 'AX_S', 'D_S', 'E', 'N_max', 'XD_S', 'f_odd', 'oddVX_S']
    $426load_global.35 = global(range: <class 'range'>) ['$426load_global.35']
    $const428.36 = const(int, 2)             ['$const428.36']
    $const432.38 = const(int, 0)             ['$const432.38']
    $434binary_subscr.39 = getitem(value=kept_edges, index=$const432.38, fn=<built-in function getitem>) ['$434binary_subscr.39', '$const432.38', 'kept_edges']
    $436binary_multiply.40 = $const428.36 * $434binary_subscr.39 ['$434binary_subscr.39', '$436binary_multiply.40', '$const428.36']
    $const438.41 = const(int, 2)             ['$const438.41']
    $442binary_multiply.43 = $const438.41 * batch_max ['$442binary_multiply.43', '$const438.41', 'batch_max']
    $446binary_add.45 = $442binary_multiply.43 + odd_cutoff ['$442binary_multiply.43', '$446binary_add.45', 'odd_cutoff']
    $const448.46 = const(int, 1)             ['$const448.46']
    $450binary_add.47 = $446binary_add.45 + $const448.46 ['$446binary_add.45', '$450binary_add.47', '$const448.46']
    $452call_function.48 = call $426load_global.35($436binary_multiply.40, $450binary_add.47, func=$426load_global.35, args=[Var($436binary_multiply.40, loop_hafnian_batch_gamma.py:66), Var($450binary_add.47, loop_hafnian_batch_gamma.py:66)], kws=(), vararg=None, target=None) ['$426load_global.35', '$436binary_multiply.40', '$450binary_add.47', '$452call_function.48']
    $454get_iter.49 = getiter(value=$452call_function.48) ['$452call_function.48', '$454get_iter.49']
    $phi456.2 = $454get_iter.49              ['$454get_iter.49', '$phi456.2']
    jump 456                                 []
label 456:
    $456for_iter.3 = iternext(value=$phi456.2) ['$456for_iter.3', '$phi456.2']
    $456for_iter.4 = pair_first(value=$456for_iter.3) ['$456for_iter.3', '$456for_iter.4']
    $456for_iter.5 = pair_second(value=$456for_iter.3) ['$456for_iter.3', '$456for_iter.5']
    $phi458.3 = $456for_iter.4               ['$456for_iter.4', '$phi458.3']
    branch $456for_iter.5, 458, 596          ['$456for_iter.5']
label 458:
    N_det = $phi458.3                        ['$phi458.3', 'N_det']
    N = N_fixed + N_det                      ['N', 'N_det', 'N_fixed']
    $const468.7 = const(float, -1.0)         ['$const468.7']
    $const472.9 = const(int, 2)              ['$const472.9']
    $474binary_floor_divide.10 = N // $const472.9 ['$474binary_floor_divide.10', '$const472.9', 'N']
    $478binary_subtract.12 = $474binary_floor_divide.10 - edges_sum ['$474binary_floor_divide.10', '$478binary_subtract.12', 'edges_sum']
    plus_minus = $const468.7 ** $478binary_subtract.12 ['$478binary_subtract.12', '$const468.7', 'plus_minus']
    $const488.16 = const(int, 2)             ['$const488.16']
    $490binary_floor_divide.17 = N_det // $const488.16 ['$490binary_floor_divide.17', '$const488.16', 'N_det']
    $const494.19 = const(int, 0)             ['$const494.19']
    $496binary_subscr.20 = getitem(value=kept_edges, index=$const494.19, fn=<built-in function getitem>) ['$496binary_subscr.20', '$const494.19', 'kept_edges']
    $498build_tuple.21 = build_tuple(items=[Var($490binary_floor_divide.17, loop_hafnian_batch_gamma.py:70), Var($496binary_subscr.20, loop_hafnian_batch_gamma.py:70)]) ['$490binary_floor_divide.17', '$496binary_subscr.20', '$498build_tuple.21']
    $500binary_subscr.22 = getitem(value=binoms, index=$498build_tuple.21, fn=<built-in function getitem>) ['$498build_tuple.21', '$500binary_subscr.22', 'binoms']
    n_det_binom_prod = $500binary_subscr.22 * binom_prod ['$500binary_subscr.22', 'binom_prod', 'n_det_binom_prod']
    $const510.26 = const(int, 2)             ['$const510.26']
    $512binary_modulo.27 = N_det % $const510.26 ['$512binary_modulo.27', '$const510.26', 'N_det']
    $const514.28 = const(int, 0)             ['$const514.28']
    $516compare_op.29 = $512binary_modulo.27 == $const514.28 ['$512binary_modulo.27', '$516compare_op.29', '$const514.28']
    bool518 = global(bool: <class 'bool'>)   ['bool518']
    $518pred = call bool518($516compare_op.29, func=bool518, args=(Var($516compare_op.29, loop_hafnian_batch_gamma.py:72),), kws=(), vararg=None, target=None) ['$516compare_op.29', '$518pred', 'bool518']
    branch $518pred, 522, 560                ['$518pred']
label 522:
    $528build_tuple.6 = build_tuple(items=[Var(k, loop_hafnian_batch_gamma.py:60), Var(N_det, loop_hafnian_batch_gamma.py:66)]) ['$528build_tuple.6', 'N_det', 'k']
    $532binary_subscr.9 = getitem(value=Hnew, index=$528build_tuple.6, fn=<built-in function getitem>) ['$528build_tuple.6', '$532binary_subscr.9', 'Hnew']
    $538binary_multiply.12 = n_det_binom_prod * plus_minus ['$538binary_multiply.12', 'n_det_binom_prod', 'plus_minus']
    $const544.15 = const(int, 2)             ['$const544.15']
    $546binary_floor_divide.16 = N // $const544.15 ['$546binary_floor_divide.16', '$const544.15', 'N']
    $548binary_subscr.17 = getitem(value=f_even, index=$546binary_floor_divide.16, fn=<built-in function getitem>) ['$546binary_floor_divide.16', '$548binary_subscr.17', 'f_even']
    $550binary_multiply.18 = $538binary_multiply.12 * $548binary_subscr.17 ['$538binary_multiply.12', '$548binary_subscr.17', '$550binary_multiply.18']
    $552inplace_add.19 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$532binary_subscr.9, rhs=$550binary_multiply.18, static_lhs=Undefined, static_rhs=Undefined) ['$532binary_subscr.9', '$550binary_multiply.18', '$552inplace_add.19']
    Hnew[$528build_tuple.6] = $552inplace_add.19 ['$528build_tuple.6', '$552inplace_add.19', 'Hnew']
    jump 592                                 []
label 560:
    $566build_tuple.6 = build_tuple(items=[Var(k, loop_hafnian_batch_gamma.py:60), Var(N_det, loop_hafnian_batch_gamma.py:66)]) ['$566build_tuple.6', 'N_det', 'k']
    $570binary_subscr.9 = getitem(value=Hnew, index=$566build_tuple.6, fn=<built-in function getitem>) ['$566build_tuple.6', '$570binary_subscr.9', 'Hnew']
    $576binary_multiply.12 = n_det_binom_prod * plus_minus ['$576binary_multiply.12', 'n_det_binom_prod', 'plus_minus']
    $582binary_subscr.15 = getitem(value=f_odd, index=N, fn=<built-in function getitem>) ['$582binary_subscr.15', 'N', 'f_odd']
    $584binary_multiply.16 = $576binary_multiply.12 * $582binary_subscr.15 ['$576binary_multiply.12', '$582binary_subscr.15', '$584binary_multiply.16']
    $586inplace_add.17 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$570binary_subscr.9, rhs=$584binary_multiply.16, static_lhs=Undefined, static_rhs=Undefined) ['$570binary_subscr.9', '$584binary_multiply.16', '$586inplace_add.17']
    Hnew[$566build_tuple.6] = $586inplace_add.17 ['$566build_tuple.6', '$586inplace_add.17', 'Hnew']
    jump 592                                 []
label 592:
    jump 456                                 []
label 596:
    jump 356                                 []
label 600:
    $604inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=H_batch, rhs=Hnew, static_lhs=Undefined, static_rhs=Undefined) ['$604inplace_add.3', 'H_batch', 'Hnew']
    H_batch = $604inplace_add.3              ['$604inplace_add.3', 'H_batch']
    jump 178                                 []
label 610:
    bool612 = global(bool: <class 'bool'>)   ['bool612']
    $612pred = call bool612(glynn, func=bool612, args=(Var(glynn, loop_hafnian_batch_gamma.py:23),), kws=(), vararg=None, target=None) ['$612pred', 'bool612', 'glynn']
    branch $612pred, 616, 678                ['$612pred']
label 616:
    $616load_global.0 = global(range: <class 'range'>) ['$616load_global.0']
    $620load_attr.2 = getattr(value=H_batch, attr=shape) ['$620load_attr.2', 'H_batch']
    $const622.3 = const(int, 1)              ['$const622.3']
    $624binary_subscr.4 = getitem(value=$620load_attr.2, index=$const622.3, fn=<built-in function getitem>) ['$620load_attr.2', '$624binary_subscr.4', '$const622.3']
    $626call_function.5 = call $616load_global.0($624binary_subscr.4, func=$616load_global.0, args=[Var($624binary_subscr.4, loop_hafnian_batch_gamma.py:79)], kws=(), vararg=None, target=None) ['$616load_global.0', '$624binary_subscr.4', '$626call_function.5']
    $628get_iter.6 = getiter(value=$626call_function.5) ['$626call_function.5', '$628get_iter.6']
    $phi630.0 = $628get_iter.6               ['$628get_iter.6', '$phi630.0']
    jump 630                                 []
label 630:
    $630for_iter.1 = iternext(value=$phi630.0) ['$630for_iter.1', '$phi630.0']
    $630for_iter.2 = pair_first(value=$630for_iter.1) ['$630for_iter.1', '$630for_iter.2']
    $630for_iter.3 = pair_second(value=$630for_iter.1) ['$630for_iter.1', '$630for_iter.3']
    $phi632.1 = $630for_iter.2               ['$630for_iter.2', '$phi632.1']
    branch $630for_iter.3, 632, 678          ['$630for_iter.3']
label 632:
    j = $phi632.1                            ['$phi632.1', 'j']
    x = N_fixed + j                          ['N_fixed', 'j', 'x']
    $const644.6 = const(NoneType, None)      ['$const644.6']
    $const646.7 = const(NoneType, None)      ['$const646.7']
    $648build_slice.8 = global(slice: <class 'slice'>) ['$648build_slice.8']
    $648build_slice.9 = call $648build_slice.8($const644.6, $const646.7, func=$648build_slice.8, args=(Var($const644.6, loop_hafnian_batch_gamma.py:81), Var($const646.7, loop_hafnian_batch_gamma.py:81)), kws=(), vararg=None, target=None) ['$648build_slice.8', '$648build_slice.9', '$const644.6', '$const646.7']
    $652build_tuple.11 = build_tuple(items=[Var($648build_slice.9, loop_hafnian_batch_gamma.py:81), Var(j, loop_hafnian_batch_gamma.py:40)]) ['$648build_slice.9', '$652build_tuple.11', 'j']
    $656binary_subscr.14 = getitem(value=H_batch, index=$652build_tuple.11, fn=<built-in function getitem>) ['$652build_tuple.11', '$656binary_subscr.14', 'H_batch']
    $const658.15 = const(float, 0.5)         ['$const658.15']
    $const662.17 = const(int, 2)             ['$const662.17']
    $664binary_floor_divide.18 = x // $const662.17 ['$664binary_floor_divide.18', '$const662.17', 'x']
    $666binary_power.19 = $const658.15 ** $664binary_floor_divide.18 ['$664binary_floor_divide.18', '$666binary_power.19', '$const658.15']
    $668inplace_multiply.20 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=$656binary_subscr.14, rhs=$666binary_power.19, static_lhs=Undefined, static_rhs=Undefined) ['$656binary_subscr.14', '$666binary_power.19', '$668inplace_multiply.20']
    H_batch[$652build_tuple.11] = $668inplace_multiply.20 ['$652build_tuple.11', '$668inplace_multiply.20', 'H_batch']
    jump 630                                 []
label 678:
    $680return_value.1 = cast(value=H_batch) ['$680return_value.1', 'H_batch']
    return $680return_value.1                ['$680return_value.1']

DEBUG 2022-02-14 16:46:35,211 ==== SSA block analysis pass on 0
DEBUG 2022-02-14 16:46:35,211 Running <numba.core.ssa._GatherDefsHandler object at 0x7f7203a0e610>
DEBUG 2022-02-14 16:46:35,211 on stmt: A = arg(0, name=A)
DEBUG 2022-02-14 16:46:35,211 on stmt: D = arg(1, name=D)
DEBUG 2022-02-14 16:46:35,211 on stmt: fixed_edge_reps = arg(2, name=fixed_edge_reps)
DEBUG 2022-02-14 16:46:35,211 on stmt: batch_max = arg(3, name=batch_max)
DEBUG 2022-02-14 16:46:35,211 on stmt: odd_cutoff = arg(4, name=odd_cutoff)
DEBUG 2022-02-14 16:46:35,211 on stmt: glynn = arg(5, name=glynn)
DEBUG 2022-02-14 16:46:35,211 on stmt: $const4.1 = const(NoneType, None)
DEBUG 2022-02-14 16:46:35,211 on stmt: $const6.2 = const(NoneType, None)
DEBUG 2022-02-14 16:46:35,211 on stmt: $8build_slice.3 = global(slice: <class 'slice'>)
DEBUG 2022-02-14 16:46:35,211 on stmt: $8build_slice.4 = call $8build_slice.3($const4.1, $const6.2, func=$8build_slice.3, args=(Var($const4.1, loop_hafnian_batch_gamma.py:23), Var($const6.2, loop_hafnian_batch_gamma.py:23)), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:46:35,211 on stmt: $const10.5 = const(int, 0)
DEBUG 2022-02-14 16:46:35,211 on stmt: $12build_tuple.6 = build_tuple(items=[Var($8build_slice.4, loop_hafnian_batch_gamma.py:23), Var($const10.5, loop_hafnian_batch_gamma.py:23)])
DEBUG 2022-02-14 16:46:35,212 on stmt: oddloop = static_getitem(value=D, index=(slice(None, None, None), 0), index_var=$12build_tuple.6, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:46:35,212 on stmt: $const20.9 = const(int, 0)
DEBUG 2022-02-14 16:46:35,212 on stmt: $const22.10 = const(NoneType, None)
DEBUG 2022-02-14 16:46:35,212 on stmt: $const24.11 = const(NoneType, None)
DEBUG 2022-02-14 16:46:35,212 on stmt: $26build_slice.12 = global(slice: <class 'slice'>)
DEBUG 2022-02-14 16:46:35,212 on stmt: $26build_slice.13 = call $26build_slice.12($const22.10, $const24.11, func=$26build_slice.12, args=(Var($const22.10, loop_hafnian_batch_gamma.py:24), Var($const24.11, loop_hafnian_batch_gamma.py:24)), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:46:35,212 on stmt: $28build_tuple.14 = build_tuple(items=[Var($const20.9, loop_hafnian_batch_gamma.py:24), Var($26build_slice.13, loop_hafnian_batch_gamma.py:24)])
DEBUG 2022-02-14 16:46:35,212 on stmt: oddV = static_getitem(value=A, index=(0, slice(None, None, None)), index_var=$28build_tuple.14, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:46:35,212 on stmt: $36load_attr.17 = getattr(value=A, attr=shape)
DEBUG 2022-02-14 16:46:35,212 on stmt: $const38.18 = const(int, 0)
DEBUG 2022-02-14 16:46:35,212 on stmt: n = static_getitem(value=$36load_attr.17, index=0, index_var=$const38.18, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:46:35,212 on stmt: $const44.20 = const(int, 2)
DEBUG 2022-02-14 16:46:35,212 on stmt: $48load_method.22 = getattr(value=fixed_edge_reps, attr=sum)
DEBUG 2022-02-14 16:46:35,212 on stmt: $50call_method.23 = call $48load_method.22(func=$48load_method.22, args=[], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:46:35,212 on stmt: N_fixed = $const44.20 * $50call_method.23
DEBUG 2022-02-14 16:46:35,212 on stmt: $const58.26 = const(int, 2)
DEBUG 2022-02-14 16:46:35,213 on stmt: $62binary_multiply.28 = $const58.26 * batch_max
DEBUG 2022-02-14 16:46:35,213 on stmt: $64binary_add.29 = N_fixed + $62binary_multiply.28
DEBUG 2022-02-14 16:46:35,213 on stmt: N_max = $64binary_add.29 + odd_cutoff
DEBUG 2022-02-14 16:46:35,213 on stmt: $72load_global.32 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:46:35,213 on stmt: $74load_method.33 = getattr(value=$72load_global.32, attr=concatenate)
DEBUG 2022-02-14 16:46:35,213 on stmt: $76load_global.34 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:46:35,213 on stmt: $78load_method.35 = getattr(value=$76load_global.34, attr=array)
DEBUG 2022-02-14 16:46:35,213 on stmt: $82build_list.37 = build_list(items=[Var(batch_max, loop_hafnian_batch_gamma.py:23)])
DEBUG 2022-02-14 16:46:35,213 on stmt: $84call_method.38 = call $78load_method.35($82build_list.37, func=$78load_method.35, args=[Var($82build_list.37, loop_hafnian_batch_gamma.py:31)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:46:35,213 on stmt: $88build_tuple.40 = build_tuple(items=[Var($84call_method.38, loop_hafnian_batch_gamma.py:31), Var(fixed_edge_reps, loop_hafnian_batch_gamma.py:23)])
DEBUG 2022-02-14 16:46:35,213 on stmt: edge_reps = call $74load_method.33($88build_tuple.40, func=$74load_method.33, args=[Var($88build_tuple.40, loop_hafnian_batch_gamma.py:31)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:46:35,213 on stmt: $94load_global.42 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:46:35,213 on stmt: $96load_method.43 = getattr(value=$94load_global.42, attr=prod)
DEBUG 2022-02-14 16:46:35,213 on stmt: $const100.45 = const(int, 1)
DEBUG 2022-02-14 16:46:35,213 on stmt: $102binary_add.46 = edge_reps + $const100.45
DEBUG 2022-02-14 16:46:35,213 on stmt: steps = call $96load_method.43($102binary_add.46, func=$96load_method.43, args=[Var($102binary_add.46, loop_hafnian_batch_gamma.py:32)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:46:35,213 on stmt: $110load_method.49 = getattr(value=edge_reps, attr=max)
DEBUG 2022-02-14 16:46:35,213 on stmt: $112call_method.50 = call $110load_method.49(func=$110load_method.49, args=[], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:46:35,213 on stmt: max_binom = $112call_method.50 + odd_cutoff
DEBUG 2022-02-14 16:46:35,213 on stmt: $120load_global.53 = global(precompute_binoms: CPUDispatcher(<function precompute_binoms at 0x7f7207b0e280>))
DEBUG 2022-02-14 16:46:35,213 on stmt: binoms = call $120load_global.53(max_binom, func=$120load_global.53, args=[Var(max_binom, loop_hafnian_batch_gamma.py:34)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:46:35,214 on stmt: $130load_attr.57 = getattr(value=D, attr=shape)
DEBUG 2022-02-14 16:46:35,214 on stmt: $const132.58 = const(int, 0)
DEBUG 2022-02-14 16:46:35,214 on stmt: n_D = static_getitem(value=$130load_attr.57, index=0, index_var=$const132.58, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:46:35,214 on stmt: $138load_global.60 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:46:35,214 on stmt: $140load_attr.61 = getattr(value=$138load_global.60, attr=zeros)
DEBUG 2022-02-14 16:46:35,214 on stmt: $const144.63 = const(int, 2)
DEBUG 2022-02-14 16:46:35,214 on stmt: $148binary_multiply.65 = $const144.63 * batch_max
DEBUG 2022-02-14 16:46:35,214 on stmt: $152binary_add.67 = $148binary_multiply.65 + odd_cutoff
DEBUG 2022-02-14 16:46:35,214 on stmt: $const154.68 = const(int, 1)
DEBUG 2022-02-14 16:46:35,214 on stmt: $156binary_add.69 = $152binary_add.67 + $const154.68
DEBUG 2022-02-14 16:46:35,214 on stmt: $158build_tuple.70 = build_tuple(items=[Var(n_D, loop_hafnian_batch_gamma.py:36), Var($156binary_add.69, loop_hafnian_batch_gamma.py:38)])
DEBUG 2022-02-14 16:46:35,214 on stmt: $160load_global.71 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:46:35,214 on stmt: $162load_attr.72 = getattr(value=$160load_global.71, attr=complex128)
DEBUG 2022-02-14 16:46:35,214 on stmt: H_batch = call $140load_attr.61($158build_tuple.70, func=$140load_attr.61, args=[Var($158build_tuple.70, loop_hafnian_batch_gamma.py:38)], kws=[('dtype', Var($162load_attr.72, loop_hafnian_batch_gamma.py:38))], vararg=None, target=None)
DEBUG 2022-02-14 16:46:35,214 on stmt: $170load_global.75 = global(prange: <class 'numba.misc.special.prange'>)
DEBUG 2022-02-14 16:46:35,214 on stmt: $174call_function.77 = call $170load_global.75(steps, func=$170load_global.75, args=[Var(steps, loop_hafnian_batch_gamma.py:32)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:46:35,214 on stmt: $176get_iter.78 = getiter(value=$174call_function.77)
DEBUG 2022-02-14 16:46:35,214 on stmt: $phi178.0 = $176get_iter.78
DEBUG 2022-02-14 16:46:35,214 on stmt: jump 178
DEBUG 2022-02-14 16:46:35,214 ==== SSA block analysis pass on 178
DEBUG 2022-02-14 16:46:35,214 Running <numba.core.ssa._GatherDefsHandler object at 0x7f7203a0e610>
DEBUG 2022-02-14 16:46:35,214 on stmt: $178for_iter.1 = iternext(value=$phi178.0)
DEBUG 2022-02-14 16:46:35,215 on stmt: $178for_iter.2 = pair_first(value=$178for_iter.1)
DEBUG 2022-02-14 16:46:35,215 on stmt: $178for_iter.3 = pair_second(value=$178for_iter.1)
DEBUG 2022-02-14 16:46:35,215 on stmt: $phi182.1 = $178for_iter.2
DEBUG 2022-02-14 16:46:35,215 on stmt: branch $178for_iter.3, 182, 610
DEBUG 2022-02-14 16:46:35,215 ==== SSA block analysis pass on 182
DEBUG 2022-02-14 16:46:35,215 Running <numba.core.ssa._GatherDefsHandler object at 0x7f7203a0e610>
DEBUG 2022-02-14 16:46:35,215 on stmt: j = $phi182.1
DEBUG 2022-02-14 16:46:35,215 on stmt: $184load_global.2 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:46:35,215 on stmt: $186load_attr.3 = getattr(value=$184load_global.2, attr=zeros)
DEBUG 2022-02-14 16:46:35,215 on stmt: $const190.5 = const(int, 2)
DEBUG 2022-02-14 16:46:35,215 on stmt: $194binary_multiply.7 = $const190.5 * batch_max
DEBUG 2022-02-14 16:46:35,215 on stmt: $198binary_add.9 = $194binary_multiply.7 + odd_cutoff
DEBUG 2022-02-14 16:46:35,215 on stmt: $const200.10 = const(int, 1)
DEBUG 2022-02-14 16:46:35,215 on stmt: $202binary_add.11 = $198binary_add.9 + $const200.10
DEBUG 2022-02-14 16:46:35,215 on stmt: $204build_tuple.12 = build_tuple(items=[Var(n_D, loop_hafnian_batch_gamma.py:36), Var($202binary_add.11, loop_hafnian_batch_gamma.py:42)])
DEBUG 2022-02-14 16:46:35,215 on stmt: $206load_global.13 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:46:35,215 on stmt: $208load_attr.14 = getattr(value=$206load_global.13, attr=complex128)
DEBUG 2022-02-14 16:46:35,215 on stmt: Hnew = call $186load_attr.3($204build_tuple.12, func=$186load_attr.3, args=[Var($204build_tuple.12, loop_hafnian_batch_gamma.py:42)], kws=[('dtype', Var($208load_attr.14, loop_hafnian_batch_gamma.py:42))], vararg=None, target=None)
DEBUG 2022-02-14 16:46:35,215 on stmt: $216load_global.17 = global(find_kept_edges: CPUDispatcher(<function find_kept_edges at 0x7f7207b0e700>))
DEBUG 2022-02-14 16:46:35,215 on stmt: kept_edges = call $216load_global.17(j, edge_reps, func=$216load_global.17, args=[Var(j, loop_hafnian_batch_gamma.py:40), Var(edge_reps, loop_hafnian_batch_gamma.py:31)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:46:35,215 on stmt: $228load_method.22 = getattr(value=kept_edges, attr=sum)
DEBUG 2022-02-14 16:46:35,215 on stmt: edges_sum = call $228load_method.22(func=$228load_method.22, args=[], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:46:35,216 on stmt: binom_prod = const(float, 1.0)
DEBUG 2022-02-14 16:46:35,216 on stmt: $238load_global.25 = global(range: <class 'range'>)
DEBUG 2022-02-14 16:46:35,216 on stmt: $const240.26 = const(int, 1)
DEBUG 2022-02-14 16:46:35,216 on stmt: $const244.28 = const(int, 2)
DEBUG 2022-02-14 16:46:35,216 on stmt: $246binary_floor_divide.29 = n // $const244.28
DEBUG 2022-02-14 16:46:35,216 on stmt: $248call_function.30 = call $238load_global.25($const240.26, $246binary_floor_divide.29, func=$238load_global.25, args=[Var($const240.26, loop_hafnian_batch_gamma.py:48), Var($246binary_floor_divide.29, loop_hafnian_batch_gamma.py:48)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:46:35,216 on stmt: $250get_iter.31 = getiter(value=$248call_function.30)
DEBUG 2022-02-14 16:46:35,216 on stmt: $phi252.1 = $250get_iter.31
DEBUG 2022-02-14 16:46:35,216 on stmt: jump 252
DEBUG 2022-02-14 16:46:35,216 ==== SSA block analysis pass on 252
DEBUG 2022-02-14 16:46:35,216 Running <numba.core.ssa._GatherDefsHandler object at 0x7f7203a0e610>
DEBUG 2022-02-14 16:46:35,216 on stmt: $252for_iter.2 = iternext(value=$phi252.1)
DEBUG 2022-02-14 16:46:35,216 on stmt: $252for_iter.3 = pair_first(value=$252for_iter.2)
DEBUG 2022-02-14 16:46:35,216 on stmt: $252for_iter.4 = pair_second(value=$252for_iter.2)
DEBUG 2022-02-14 16:46:35,216 on stmt: $phi254.2 = $252for_iter.3
DEBUG 2022-02-14 16:46:35,216 on stmt: branch $252for_iter.4, 254, 282
DEBUG 2022-02-14 16:46:35,216 ==== SSA block analysis pass on 254
DEBUG 2022-02-14 16:46:35,216 Running <numba.core.ssa._GatherDefsHandler object at 0x7f7203a0e610>
DEBUG 2022-02-14 16:46:35,216 on stmt: i = $phi254.2
DEBUG 2022-02-14 16:46:35,216 on stmt: $264binary_subscr.7 = getitem(value=edge_reps, index=i, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:46:35,216 on stmt: $270binary_subscr.10 = getitem(value=kept_edges, index=i, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:46:35,216 on stmt: $272build_tuple.11 = build_tuple(items=[Var($264binary_subscr.7, loop_hafnian_batch_gamma.py:49), Var($270binary_subscr.10, loop_hafnian_batch_gamma.py:49)])
DEBUG 2022-02-14 16:46:35,216 on stmt: $274binary_subscr.12 = getitem(value=binoms, index=$272build_tuple.11, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:46:35,216 on stmt: $276inplace_multiply.13 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=binom_prod, rhs=$274binary_subscr.12, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:46:35,217 on stmt: binom_prod = $276inplace_multiply.13
DEBUG 2022-02-14 16:46:35,217 on stmt: jump 252
DEBUG 2022-02-14 16:46:35,217 ==== SSA block analysis pass on 282
DEBUG 2022-02-14 16:46:35,217 Running <numba.core.ssa._GatherDefsHandler object at 0x7f7203a0e610>
DEBUG 2022-02-14 16:46:35,217 on stmt: bool284 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:46:35,217 on stmt: $284pred = call bool284(glynn, func=bool284, args=(Var(glynn, loop_hafnian_batch_gamma.py:23),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:46:35,217 on stmt: branch $284pred, 288, 302
DEBUG 2022-02-14 16:46:35,217 ==== SSA block analysis pass on 288
DEBUG 2022-02-14 16:46:35,217 Running <numba.core.ssa._GatherDefsHandler object at 0x7f7203a0e610>
DEBUG 2022-02-14 16:46:35,217 on stmt: $const288.1 = const(int, 2)
DEBUG 2022-02-14 16:46:35,217 on stmt: $292binary_multiply.3 = $const288.1 * kept_edges
DEBUG 2022-02-14 16:46:35,217 on stmt: delta = $292binary_multiply.3 - edge_reps
DEBUG 2022-02-14 16:46:35,217 on stmt: jump 306
DEBUG 2022-02-14 16:46:35,217 ==== SSA block analysis pass on 302
DEBUG 2022-02-14 16:46:35,217 Running <numba.core.ssa._GatherDefsHandler object at 0x7f7203a0e610>
DEBUG 2022-02-14 16:46:35,217 on stmt: delta = kept_edges
DEBUG 2022-02-14 16:46:35,217 on stmt: jump 306
DEBUG 2022-02-14 16:46:35,217 ==== SSA block analysis pass on 306
DEBUG 2022-02-14 16:46:35,217 Running <numba.core.ssa._GatherDefsHandler object at 0x7f7203a0e610>
DEBUG 2022-02-14 16:46:35,217 on stmt: $306load_global.1 = global(get_submatrices: CPUDispatcher(<function get_submatrices at 0x7f7207b0eca0>))
DEBUG 2022-02-14 16:46:35,217 on stmt: $const314.5 = const(int, 0)
DEBUG 2022-02-14 16:46:35,217 on stmt: $const316.6 = const(NoneType, None)
DEBUG 2022-02-14 16:46:35,217 on stmt: $const318.7 = const(NoneType, None)
DEBUG 2022-02-14 16:46:35,217 on stmt: $320build_slice.8 = global(slice: <class 'slice'>)
DEBUG 2022-02-14 16:46:35,218 on stmt: $320build_slice.9 = call $320build_slice.8($const316.6, $const318.7, func=$320build_slice.8, args=(Var($const316.6, loop_hafnian_batch_gamma.py:56), Var($const318.7, loop_hafnian_batch_gamma.py:56)), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:46:35,218 on stmt: $322build_tuple.10 = build_tuple(items=[Var($const314.5, loop_hafnian_batch_gamma.py:56), Var($320build_slice.9, loop_hafnian_batch_gamma.py:56)])
DEBUG 2022-02-14 16:46:35,218 on stmt: $324binary_subscr.11 = static_getitem(value=D, index=(0, slice(None, None, None)), index_var=$322build_tuple.10, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:46:35,218 on stmt: $328call_function.13 = call $306load_global.1(delta, A, $324binary_subscr.11, oddV, func=$306load_global.1, args=[Var(delta, loop_hafnian_batch_gamma.py:52), Var(A, loop_hafnian_batch_gamma.py:23), Var($324binary_subscr.11, loop_hafnian_batch_gamma.py:56), Var(oddV, loop_hafnian_batch_gamma.py:24)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:46:35,218 on stmt: $330unpack_sequence.18 = exhaust_iter(value=$328call_function.13, count=4)
DEBUG 2022-02-14 16:46:35,218 on stmt: $330unpack_sequence.14 = static_getitem(value=$330unpack_sequence.18, index=0, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:46:35,218 on stmt: $330unpack_sequence.15 = static_getitem(value=$330unpack_sequence.18, index=1, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:46:35,218 on stmt: $330unpack_sequence.16 = static_getitem(value=$330unpack_sequence.18, index=2, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:46:35,218 on stmt: $330unpack_sequence.17 = static_getitem(value=$330unpack_sequence.18, index=3, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:46:35,218 on stmt: AX_S = $330unpack_sequence.14
DEBUG 2022-02-14 16:46:35,218 on stmt: XD_S = $330unpack_sequence.15
DEBUG 2022-02-14 16:46:35,218 on stmt: D_S = $330unpack_sequence.16
DEBUG 2022-02-14 16:46:35,218 on stmt: oddVX_S = $330unpack_sequence.17
DEBUG 2022-02-14 16:46:35,218 on stmt: $340load_global.19 = global(eigvals: CPUDispatcher(<function eigvals at 0x7f7207a993a0>))
DEBUG 2022-02-14 16:46:35,218 on stmt: E = call $340load_global.19(AX_S, func=$340load_global.19, args=[Var(AX_S, loop_hafnian_batch_gamma.py:56)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:46:35,218 on stmt: $348load_global.22 = global(range: <class 'range'>)
DEBUG 2022-02-14 16:46:35,218 on stmt: $352call_function.24 = call $348load_global.22(n_D, func=$348load_global.22, args=[Var(n_D, loop_hafnian_batch_gamma.py:36)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:46:35,218 on stmt: $354get_iter.25 = getiter(value=$352call_function.24)
DEBUG 2022-02-14 16:46:35,218 on stmt: $phi356.1 = $354get_iter.25
DEBUG 2022-02-14 16:46:35,218 on stmt: jump 356
DEBUG 2022-02-14 16:46:35,218 ==== SSA block analysis pass on 356
DEBUG 2022-02-14 16:46:35,218 Running <numba.core.ssa._GatherDefsHandler object at 0x7f7203a0e610>
DEBUG 2022-02-14 16:46:35,218 on stmt: $356for_iter.2 = iternext(value=$phi356.1)
DEBUG 2022-02-14 16:46:35,219 on stmt: $356for_iter.3 = pair_first(value=$356for_iter.2)
DEBUG 2022-02-14 16:46:35,219 on stmt: $356for_iter.4 = pair_second(value=$356for_iter.2)
DEBUG 2022-02-14 16:46:35,219 on stmt: $phi358.2 = $356for_iter.3
DEBUG 2022-02-14 16:46:35,219 on stmt: branch $356for_iter.4, 358, 600
DEBUG 2022-02-14 16:46:35,219 ==== SSA block analysis pass on 358
DEBUG 2022-02-14 16:46:35,219 Running <numba.core.ssa._GatherDefsHandler object at 0x7f7203a0e610>
DEBUG 2022-02-14 16:46:35,219 on stmt: k = $phi358.2
DEBUG 2022-02-14 16:46:35,219 on stmt: $360load_global.3 = global(get_Dsubmatrices: CPUDispatcher(<function get_Dsubmatrices at 0x7f7207a99160>))
DEBUG 2022-02-14 16:46:35,219 on stmt: $const368.7 = const(NoneType, None)
DEBUG 2022-02-14 16:46:35,219 on stmt: $const370.8 = const(NoneType, None)
DEBUG 2022-02-14 16:46:35,219 on stmt: $372build_slice.9 = global(slice: <class 'slice'>)
DEBUG 2022-02-14 16:46:35,219 on stmt: $372build_slice.10 = call $372build_slice.9($const368.7, $const370.8, func=$372build_slice.9, args=(Var($const368.7, loop_hafnian_batch_gamma.py:61), Var($const370.8, loop_hafnian_batch_gamma.py:61)), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:46:35,219 on stmt: $374build_tuple.11 = build_tuple(items=[Var(k, loop_hafnian_batch_gamma.py:60), Var($372build_slice.10, loop_hafnian_batch_gamma.py:61)])
DEBUG 2022-02-14 16:46:35,219 on stmt: $376binary_subscr.12 = getitem(value=D, index=$374build_tuple.11, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:46:35,219 on stmt: $378call_function.13 = call $360load_global.3(delta, $376binary_subscr.12, func=$360load_global.3, args=[Var(delta, loop_hafnian_batch_gamma.py:52), Var($376binary_subscr.12, loop_hafnian_batch_gamma.py:61)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:46:35,219 on stmt: $380unpack_sequence.16 = exhaust_iter(value=$378call_function.13, count=2)
DEBUG 2022-02-14 16:46:35,219 on stmt: $380unpack_sequence.14 = static_getitem(value=$380unpack_sequence.16, index=0, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:46:35,219 on stmt: $380unpack_sequence.15 = static_getitem(value=$380unpack_sequence.16, index=1, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:46:35,219 on stmt: XD_S = $380unpack_sequence.14
DEBUG 2022-02-14 16:46:35,219 on stmt: D_S = $380unpack_sequence.15
DEBUG 2022-02-14 16:46:35,219 on stmt: $386load_global.17 = global(f_loop: CPUDispatcher(<function f_loop at 0x7f7207b0e940>))
DEBUG 2022-02-14 16:46:35,219 on stmt: f_even = call $386load_global.17(E, AX_S, XD_S, D_S, N_max, func=$386load_global.17, args=[Var(E, loop_hafnian_batch_gamma.py:58), Var(AX_S, loop_hafnian_batch_gamma.py:56), Var(XD_S, loop_hafnian_batch_gamma.py:56), Var(D_S, loop_hafnian_batch_gamma.py:56), Var(N_max, loop_hafnian_batch_gamma.py:29)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:46:35,219 on stmt: $402load_global.24 = global(f_loop_odd: CPUDispatcher(<function f_loop_odd at 0x7f7207b0eaf0>))
DEBUG 2022-02-14 16:46:35,219 on stmt: $418binary_subscr.32 = getitem(value=oddloop, index=k, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:46:35,220 on stmt: f_odd = call $402load_global.24(E, AX_S, XD_S, D_S, N_max, $418binary_subscr.32, oddVX_S, func=$402load_global.24, args=[Var(E, loop_hafnian_batch_gamma.py:58), Var(AX_S, loop_hafnian_batch_gamma.py:56), Var(XD_S, loop_hafnian_batch_gamma.py:56), Var(D_S, loop_hafnian_batch_gamma.py:56), Var(N_max, loop_hafnian_batch_gamma.py:29), Var($418binary_subscr.32, loop_hafnian_batch_gamma.py:64), Var(oddVX_S, loop_hafnian_batch_gamma.py:56)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:46:35,220 on stmt: $426load_global.35 = global(range: <class 'range'>)
DEBUG 2022-02-14 16:46:35,220 on stmt: $const428.36 = const(int, 2)
DEBUG 2022-02-14 16:46:35,220 on stmt: $const432.38 = const(int, 0)
DEBUG 2022-02-14 16:46:35,220 on stmt: $434binary_subscr.39 = static_getitem(value=kept_edges, index=0, index_var=$const432.38, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:46:35,220 on stmt: $436binary_multiply.40 = $const428.36 * $434binary_subscr.39
DEBUG 2022-02-14 16:46:35,220 on stmt: $const438.41 = const(int, 2)
DEBUG 2022-02-14 16:46:35,220 on stmt: $442binary_multiply.43 = $const438.41 * batch_max
DEBUG 2022-02-14 16:46:35,220 on stmt: $446binary_add.45 = $442binary_multiply.43 + odd_cutoff
DEBUG 2022-02-14 16:46:35,220 on stmt: $const448.46 = const(int, 1)
DEBUG 2022-02-14 16:46:35,220 on stmt: $450binary_add.47 = $446binary_add.45 + $const448.46
DEBUG 2022-02-14 16:46:35,220 on stmt: $452call_function.48 = call $426load_global.35($436binary_multiply.40, $450binary_add.47, func=$426load_global.35, args=[Var($436binary_multiply.40, loop_hafnian_batch_gamma.py:66), Var($450binary_add.47, loop_hafnian_batch_gamma.py:66)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:46:35,220 on stmt: $454get_iter.49 = getiter(value=$452call_function.48)
DEBUG 2022-02-14 16:46:35,220 on stmt: $phi456.2 = $454get_iter.49
DEBUG 2022-02-14 16:46:35,220 on stmt: jump 456
DEBUG 2022-02-14 16:46:35,220 ==== SSA block analysis pass on 456
DEBUG 2022-02-14 16:46:35,220 Running <numba.core.ssa._GatherDefsHandler object at 0x7f7203a0e610>
DEBUG 2022-02-14 16:46:35,220 on stmt: $456for_iter.3 = iternext(value=$phi456.2)
DEBUG 2022-02-14 16:46:35,220 on stmt: $456for_iter.4 = pair_first(value=$456for_iter.3)
DEBUG 2022-02-14 16:46:35,220 on stmt: $456for_iter.5 = pair_second(value=$456for_iter.3)
DEBUG 2022-02-14 16:46:35,220 on stmt: $phi458.3 = $456for_iter.4
DEBUG 2022-02-14 16:46:35,220 on stmt: branch $456for_iter.5, 458, 596
DEBUG 2022-02-14 16:46:35,220 ==== SSA block analysis pass on 458
DEBUG 2022-02-14 16:46:35,220 Running <numba.core.ssa._GatherDefsHandler object at 0x7f7203a0e610>
DEBUG 2022-02-14 16:46:35,221 on stmt: N_det = $phi458.3
DEBUG 2022-02-14 16:46:35,221 on stmt: N = N_fixed + N_det
DEBUG 2022-02-14 16:46:35,221 on stmt: $const468.7 = const(float, -1.0)
DEBUG 2022-02-14 16:46:35,221 on stmt: $const472.9 = const(int, 2)
DEBUG 2022-02-14 16:46:35,221 on stmt: $474binary_floor_divide.10 = N // $const472.9
DEBUG 2022-02-14 16:46:35,221 on stmt: $478binary_subtract.12 = $474binary_floor_divide.10 - edges_sum
DEBUG 2022-02-14 16:46:35,221 on stmt: plus_minus = $const468.7 ** $478binary_subtract.12
DEBUG 2022-02-14 16:46:35,221 on stmt: $const488.16 = const(int, 2)
DEBUG 2022-02-14 16:46:35,221 on stmt: $490binary_floor_divide.17 = N_det // $const488.16
DEBUG 2022-02-14 16:46:35,221 on stmt: $const494.19 = const(int, 0)
DEBUG 2022-02-14 16:46:35,221 on stmt: $496binary_subscr.20 = static_getitem(value=kept_edges, index=0, index_var=$const494.19, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:46:35,221 on stmt: $498build_tuple.21 = build_tuple(items=[Var($490binary_floor_divide.17, loop_hafnian_batch_gamma.py:70), Var($496binary_subscr.20, loop_hafnian_batch_gamma.py:70)])
DEBUG 2022-02-14 16:46:35,221 on stmt: $500binary_subscr.22 = getitem(value=binoms, index=$498build_tuple.21, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:46:35,221 on stmt: n_det_binom_prod = $500binary_subscr.22 * binom_prod
DEBUG 2022-02-14 16:46:35,221 on stmt: $const510.26 = const(int, 2)
DEBUG 2022-02-14 16:46:35,221 on stmt: $512binary_modulo.27 = N_det % $const510.26
DEBUG 2022-02-14 16:46:35,221 on stmt: $const514.28 = const(int, 0)
DEBUG 2022-02-14 16:46:35,221 on stmt: $516compare_op.29 = $512binary_modulo.27 == $const514.28
DEBUG 2022-02-14 16:46:35,221 on stmt: bool518 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:46:35,221 on stmt: $518pred = call bool518($516compare_op.29, func=bool518, args=(Var($516compare_op.29, loop_hafnian_batch_gamma.py:72),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:46:35,221 on stmt: branch $518pred, 522, 560
DEBUG 2022-02-14 16:46:35,221 ==== SSA block analysis pass on 522
DEBUG 2022-02-14 16:46:35,221 Running <numba.core.ssa._GatherDefsHandler object at 0x7f7203a0e610>
DEBUG 2022-02-14 16:46:35,221 on stmt: $528build_tuple.6 = build_tuple(items=[Var(k, loop_hafnian_batch_gamma.py:60), Var(N_det, loop_hafnian_batch_gamma.py:66)])
DEBUG 2022-02-14 16:46:35,222 on stmt: $532binary_subscr.9 = getitem(value=Hnew, index=$528build_tuple.6, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:46:35,222 on stmt: $538binary_multiply.12 = n_det_binom_prod * plus_minus
DEBUG 2022-02-14 16:46:35,222 on stmt: $const544.15 = const(int, 2)
DEBUG 2022-02-14 16:46:35,222 on stmt: $546binary_floor_divide.16 = N // $const544.15
DEBUG 2022-02-14 16:46:35,222 on stmt: $548binary_subscr.17 = getitem(value=f_even, index=$546binary_floor_divide.16, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:46:35,222 on stmt: $550binary_multiply.18 = $538binary_multiply.12 * $548binary_subscr.17
DEBUG 2022-02-14 16:46:35,222 on stmt: $552inplace_add.19 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$532binary_subscr.9, rhs=$550binary_multiply.18, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:46:35,222 on stmt: Hnew[$528build_tuple.6] = $552inplace_add.19
DEBUG 2022-02-14 16:46:35,222 on stmt: jump 592
DEBUG 2022-02-14 16:46:35,222 ==== SSA block analysis pass on 560
DEBUG 2022-02-14 16:46:35,222 Running <numba.core.ssa._GatherDefsHandler object at 0x7f7203a0e610>
DEBUG 2022-02-14 16:46:35,222 on stmt: $566build_tuple.6 = build_tuple(items=[Var(k, loop_hafnian_batch_gamma.py:60), Var(N_det, loop_hafnian_batch_gamma.py:66)])
DEBUG 2022-02-14 16:46:35,222 on stmt: $570binary_subscr.9 = getitem(value=Hnew, index=$566build_tuple.6, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:46:35,222 on stmt: $576binary_multiply.12 = n_det_binom_prod * plus_minus
DEBUG 2022-02-14 16:46:35,222 on stmt: $582binary_subscr.15 = getitem(value=f_odd, index=N, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:46:35,222 on stmt: $584binary_multiply.16 = $576binary_multiply.12 * $582binary_subscr.15
DEBUG 2022-02-14 16:46:35,222 on stmt: $586inplace_add.17 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$570binary_subscr.9, rhs=$584binary_multiply.16, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:46:35,222 on stmt: Hnew[$566build_tuple.6] = $586inplace_add.17
DEBUG 2022-02-14 16:46:35,222 on stmt: jump 592
DEBUG 2022-02-14 16:46:35,222 ==== SSA block analysis pass on 592
DEBUG 2022-02-14 16:46:35,222 Running <numba.core.ssa._GatherDefsHandler object at 0x7f7203a0e610>
DEBUG 2022-02-14 16:46:35,222 on stmt: jump 456
DEBUG 2022-02-14 16:46:35,222 ==== SSA block analysis pass on 596
DEBUG 2022-02-14 16:46:35,223 Running <numba.core.ssa._GatherDefsHandler object at 0x7f7203a0e610>
DEBUG 2022-02-14 16:46:35,223 on stmt: jump 356
DEBUG 2022-02-14 16:46:35,223 ==== SSA block analysis pass on 600
DEBUG 2022-02-14 16:46:35,223 Running <numba.core.ssa._GatherDefsHandler object at 0x7f7203a0e610>
DEBUG 2022-02-14 16:46:35,223 on stmt: $604inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=H_batch, rhs=Hnew, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:46:35,223 on stmt: H_batch = $604inplace_add.3
DEBUG 2022-02-14 16:46:35,223 on stmt: jump 178
DEBUG 2022-02-14 16:46:35,223 ==== SSA block analysis pass on 610
DEBUG 2022-02-14 16:46:35,223 Running <numba.core.ssa._GatherDefsHandler object at 0x7f7203a0e610>
DEBUG 2022-02-14 16:46:35,223 on stmt: bool612 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:46:35,223 on stmt: $612pred = call bool612(glynn, func=bool612, args=(Var(glynn, loop_hafnian_batch_gamma.py:23),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:46:35,223 on stmt: branch $612pred, 616, 678
DEBUG 2022-02-14 16:46:35,223 ==== SSA block analysis pass on 616
DEBUG 2022-02-14 16:46:35,223 Running <numba.core.ssa._GatherDefsHandler object at 0x7f7203a0e610>
DEBUG 2022-02-14 16:46:35,223 on stmt: $616load_global.0 = global(range: <class 'range'>)
DEBUG 2022-02-14 16:46:35,223 on stmt: $620load_attr.2 = getattr(value=H_batch, attr=shape)
DEBUG 2022-02-14 16:46:35,223 on stmt: $const622.3 = const(int, 1)
DEBUG 2022-02-14 16:46:35,223 on stmt: $624binary_subscr.4 = static_getitem(value=$620load_attr.2, index=1, index_var=$const622.3, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:46:35,223 on stmt: $626call_function.5 = call $616load_global.0($624binary_subscr.4, func=$616load_global.0, args=[Var($624binary_subscr.4, loop_hafnian_batch_gamma.py:79)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:46:35,223 on stmt: $628get_iter.6 = getiter(value=$626call_function.5)
DEBUG 2022-02-14 16:46:35,223 on stmt: $phi630.0 = $628get_iter.6
DEBUG 2022-02-14 16:46:35,223 on stmt: jump 630
DEBUG 2022-02-14 16:46:35,223 ==== SSA block analysis pass on 630
DEBUG 2022-02-14 16:46:35,223 Running <numba.core.ssa._GatherDefsHandler object at 0x7f7203a0e610>
DEBUG 2022-02-14 16:46:35,223 on stmt: $630for_iter.1 = iternext(value=$phi630.0)
DEBUG 2022-02-14 16:46:35,223 on stmt: $630for_iter.2 = pair_first(value=$630for_iter.1)
DEBUG 2022-02-14 16:46:35,223 on stmt: $630for_iter.3 = pair_second(value=$630for_iter.1)
DEBUG 2022-02-14 16:46:35,224 on stmt: $phi632.1 = $630for_iter.2
DEBUG 2022-02-14 16:46:35,224 on stmt: branch $630for_iter.3, 632, 678
DEBUG 2022-02-14 16:46:35,224 ==== SSA block analysis pass on 632
DEBUG 2022-02-14 16:46:35,224 Running <numba.core.ssa._GatherDefsHandler object at 0x7f7203a0e610>
DEBUG 2022-02-14 16:46:35,224 on stmt: j = $phi632.1
DEBUG 2022-02-14 16:46:35,224 on stmt: x = N_fixed + j
DEBUG 2022-02-14 16:46:35,224 on stmt: $const644.6 = const(NoneType, None)
DEBUG 2022-02-14 16:46:35,224 on stmt: $const646.7 = const(NoneType, None)
DEBUG 2022-02-14 16:46:35,224 on stmt: $648build_slice.8 = global(slice: <class 'slice'>)
DEBUG 2022-02-14 16:46:35,224 on stmt: $648build_slice.9 = call $648build_slice.8($const644.6, $const646.7, func=$648build_slice.8, args=(Var($const644.6, loop_hafnian_batch_gamma.py:81), Var($const646.7, loop_hafnian_batch_gamma.py:81)), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:46:35,224 on stmt: $652build_tuple.11 = build_tuple(items=[Var($648build_slice.9, loop_hafnian_batch_gamma.py:81), Var(j, loop_hafnian_batch_gamma.py:40)])
DEBUG 2022-02-14 16:46:35,224 on stmt: $656binary_subscr.14 = getitem(value=H_batch, index=$652build_tuple.11, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:46:35,224 on stmt: $const658.15 = const(float, 0.5)
DEBUG 2022-02-14 16:46:35,224 on stmt: $const662.17 = const(int, 2)
DEBUG 2022-02-14 16:46:35,224 on stmt: $664binary_floor_divide.18 = x // $const662.17
DEBUG 2022-02-14 16:46:35,224 on stmt: $666binary_power.19 = $const658.15 ** $664binary_floor_divide.18
DEBUG 2022-02-14 16:46:35,224 on stmt: $668inplace_multiply.20 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=$656binary_subscr.14, rhs=$666binary_power.19, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:46:35,224 on stmt: H_batch[$652build_tuple.11] = $668inplace_multiply.20
DEBUG 2022-02-14 16:46:35,224 on stmt: jump 630
DEBUG 2022-02-14 16:46:35,224 ==== SSA block analysis pass on 678
DEBUG 2022-02-14 16:46:35,224 Running <numba.core.ssa._GatherDefsHandler object at 0x7f7203a0e610>
DEBUG 2022-02-14 16:46:35,224 on stmt: $680return_value.1 = cast(value=H_batch)
DEBUG 2022-02-14 16:46:35,224 on stmt: return $680return_value.1
DEBUG 2022-02-14 16:46:35,227 defs defaultdict(<class 'list'>,
            {'$102binary_add.46': [<numba.core.ir.Assign object at 0x7f7203ab07c0>],
             '$110load_method.49': [<numba.core.ir.Assign object at 0x7f7203ab0cd0>],
             '$112call_method.50': [<numba.core.ir.Assign object at 0x7f7203ab0ee0>],
             '$120load_global.53': [<numba.core.ir.Assign object at 0x7f7203ab23d0>],
             '$12build_tuple.6': [<numba.core.ir.Assign object at 0x7f7203aa97c0>],
             '$130load_attr.57': [<numba.core.ir.Assign object at 0x7f7203ab2a30>],
             '$138load_global.60': [<numba.core.ir.Assign object at 0x7f7203ab2fd0>],
             '$140load_attr.61': [<numba.core.ir.Assign object at 0x7f7203ab4190>],
             '$148binary_multiply.65': [<numba.core.ir.Assign object at 0x7f7203ab4700>],
             '$152binary_add.67': [<numba.core.ir.Assign object at 0x7f7203ab49a0>],
             '$156binary_add.69': [<numba.core.ir.Assign object at 0x7f7203ab4ca0>],
             '$158build_tuple.70': [<numba.core.ir.Assign object at 0x7f7203ab4e20>],
             '$160load_global.71': [<numba.core.ir.Assign object at 0x7f7203ab4f70>],
             '$162load_attr.72': [<numba.core.ir.Assign object at 0x7f7203ab6130>],
             '$170load_global.75': [<numba.core.ir.Assign object at 0x7f7203ab6730>],
             '$174call_function.77': [<numba.core.ir.Assign object at 0x7f7203ab6a30>],
             '$176get_iter.78': [<numba.core.ir.Assign object at 0x7f7203ab6b50>],
             '$178for_iter.1': [<numba.core.ir.Assign object at 0x7f7203aade80>],
             '$178for_iter.2': [<numba.core.ir.Assign object at 0x7f7203aafca0>],
             '$178for_iter.3': [<numba.core.ir.Assign object at 0x7f7203ab0ac0>],
             '$184load_global.2': [<numba.core.ir.Assign object at 0x7f7203adae20>],
             '$186load_attr.3': [<numba.core.ir.Assign object at 0x7f7203ab6c10>],
             '$194binary_multiply.7': [<numba.core.ir.Assign object at 0x7f7203abd1c0>],
             '$198binary_add.9': [<numba.core.ir.Assign object at 0x7f7203abd460>],
             '$202binary_add.11': [<numba.core.ir.Assign object at 0x7f7203abd760>],
             '$204build_tuple.12': [<numba.core.ir.Assign object at 0x7f7203abd8e0>],
             '$206load_global.13': [<numba.core.ir.Assign object at 0x7f7203abda30>],
             '$208load_attr.14': [<numba.core.ir.Assign object at 0x7f7203abdbb0>],
             '$216load_global.17': [<numba.core.ir.Assign object at 0x7f7203abf1f0>],
             '$228load_method.22': [<numba.core.ir.Assign object at 0x7f7203abf970>],
             '$238load_global.25': [<numba.core.ir.Assign object at 0x7f7203ac2070>],
             '$246binary_floor_divide.29': [<numba.core.ir.Assign object at 0x7f7203ac2640>],
             '$248call_function.30': [<numba.core.ir.Assign object at 0x7f7203ac27f0>],
             '$250get_iter.31': [<numba.core.ir.Assign object at 0x7f7203ac2910>],
             '$252for_iter.2': [<numba.core.ir.Assign object at 0x7f7203abfca0>],
             '$252for_iter.3': [<numba.core.ir.Assign object at 0x7f7203ac2970>],
             '$252for_iter.4': [<numba.core.ir.Assign object at 0x7f7203ac2ac0>],
             '$264binary_subscr.7': [<numba.core.ir.Assign object at 0x7f7203ac4400>],
             '$26build_slice.12': [<numba.core.ir.Assign object at 0x7f7203aac190>],
             '$26build_slice.13': [<numba.core.ir.Assign object at 0x7f7203aac2b0>],
             '$270binary_subscr.10': [<numba.core.ir.Assign object at 0x7f7203ac47c0>],
             '$272build_tuple.11': [<numba.core.ir.Assign object at 0x7f7203ac4940>],
             '$274binary_subscr.12': [<numba.core.ir.Assign object at 0x7f7203ac4ac0>],
             '$276inplace_multiply.13': [<numba.core.ir.Assign object at 0x7f7203ac4c40>],
             '$284pred': [<numba.core.ir.Assign object at 0x7f7203ac4fd0>],
             '$28build_tuple.14': [<numba.core.ir.Assign object at 0x7f7203aac460>],
             '$292binary_multiply.3': [<numba.core.ir.Assign object at 0x7f7203ac6520>],
             '$306load_global.1': [<numba.core.ir.Assign object at 0x7f7203ac6d30>],
             '$320build_slice.8': [<numba.core.ir.Assign object at 0x7f7203ac86d0>],
             '$320build_slice.9': [<numba.core.ir.Assign object at 0x7f7203ac87f0>],
             '$322build_tuple.10': [<numba.core.ir.Assign object at 0x7f7203ac89a0>],
             '$324binary_subscr.11': [<numba.core.ir.Assign object at 0x7f7203a69880>],
             '$328call_function.13': [<numba.core.ir.Assign object at 0x7f7203ac8df0>],
             '$330unpack_sequence.14': [<numba.core.ir.Assign object at 0x7f7203aca0d0>],
             '$330unpack_sequence.15': [<numba.core.ir.Assign object at 0x7f7203aca1f0>],
             '$330unpack_sequence.16': [<numba.core.ir.Assign object at 0x7f7203aca310>],
             '$330unpack_sequence.17': [<numba.core.ir.Assign object at 0x7f7203aca430>],
             '$330unpack_sequence.18': [<numba.core.ir.Assign object at 0x7f7203ac8f40>],
             '$340load_global.19': [<numba.core.ir.Assign object at 0x7f7203aca9d0>],
             '$348load_global.22': [<numba.core.ir.Assign object at 0x7f7203acaf10>],
             '$352call_function.24': [<numba.core.ir.Assign object at 0x7f7203a4c250>],
             '$354get_iter.25': [<numba.core.ir.Assign object at 0x7f7203a4c370>],
             '$356for_iter.2': [<numba.core.ir.Assign object at 0x7f7203a4c460>],
             '$356for_iter.3': [<numba.core.ir.Assign object at 0x7f7203a4c580>],
             '$356for_iter.4': [<numba.core.ir.Assign object at 0x7f7203a4c6a0>],
             '$360load_global.3': [<numba.core.ir.Assign object at 0x7f7203a4caf0>],
             '$36load_attr.17': [<numba.core.ir.Assign object at 0x7f7203aac970>],
             '$372build_slice.10': [<numba.core.ir.Assign object at 0x7f7203a4e430>],
             '$372build_slice.9': [<numba.core.ir.Assign object at 0x7f7203a4e310>],
             '$374build_tuple.11': [<numba.core.ir.Assign object at 0x7f7203a4e5e0>],
             '$376binary_subscr.12': [<numba.core.ir.Assign object at 0x7f7203a4e760>],
             '$378call_function.13': [<numba.core.ir.Assign object at 0x7f7203a4e910>],
             '$380unpack_sequence.14': [<numba.core.ir.Assign object at 0x7f7203a4ebb0>],
             '$380unpack_sequence.15': [<numba.core.ir.Assign object at 0x7f7203a4ecd0>],
             '$380unpack_sequence.16': [<numba.core.ir.Assign object at 0x7f7203a4ea60>],
             '$386load_global.17': [<numba.core.ir.Assign object at 0x7f7203a4ef70>],
             '$402load_global.24': [<numba.core.ir.Assign object at 0x7f7203a4f970>],
             '$418binary_subscr.32': [<numba.core.ir.Assign object at 0x7f7203a51340>],
             '$426load_global.35': [<numba.core.ir.Assign object at 0x7f7203a51850>],
             '$434binary_subscr.39': [<numba.core.ir.Assign object at 0x7f7203a697c0>],
             '$436binary_multiply.40': [<numba.core.ir.Assign object at 0x7f7203a51fa0>],
             '$442binary_multiply.43': [<numba.core.ir.Assign object at 0x7f7203a54400>],
             '$446binary_add.45': [<numba.core.ir.Assign object at 0x7f7203a546a0>],
             '$450binary_add.47': [<numba.core.ir.Assign object at 0x7f7203a549a0>],
             '$452call_function.48': [<numba.core.ir.Assign object at 0x7f7203a54b50>],
             '$454get_iter.49': [<numba.core.ir.Assign object at 0x7f7203a54c70>],
             '$456for_iter.3': [<numba.core.ir.Assign object at 0x7f7203a4f880>],
             '$456for_iter.4': [<numba.core.ir.Assign object at 0x7f7203a4fd60>],
             '$456for_iter.5': [<numba.core.ir.Assign object at 0x7f7203a51100>],
             '$474binary_floor_divide.10': [<numba.core.ir.Assign object at 0x7f7203a57820>],
             '$478binary_subtract.12': [<numba.core.ir.Assign object at 0x7f7203a57ac0>],
             '$48load_method.22': [<numba.core.ir.Assign object at 0x7f7203aad1f0>],
             '$490binary_floor_divide.17': [<numba.core.ir.Assign object at 0x7f7203a592e0>],
             '$496binary_subscr.20': [<numba.core.ir.Assign object at 0x7f7203ad0370>],
             '$498build_tuple.21': [<numba.core.ir.Assign object at 0x7f7203a59880>],
             '$500binary_subscr.22': [<numba.core.ir.Assign object at 0x7f7203a59a00>],
             '$50call_method.23': [<numba.core.ir.Assign object at 0x7f7203aad400>],
             '$512binary_modulo.27': [<numba.core.ir.Assign object at 0x7f7203a5b220>],
             '$516compare_op.29': [<numba.core.ir.Assign object at 0x7f7203a5b520>],
             '$518pred': [<numba.core.ir.Assign object at 0x7f7203a5b790>],
             '$528build_tuple.6': [<numba.core.ir.Assign object at 0x7f7203a5b940>],
             '$532binary_subscr.9': [<numba.core.ir.Assign object at 0x7f7203a5bca0>],
             '$538binary_multiply.12': [<numba.core.ir.Assign object at 0x7f7203a5e0a0>],
             '$546binary_floor_divide.16': [<numba.core.ir.Assign object at 0x7f7203a5e5e0>],
             '$548binary_subscr.17': [<numba.core.ir.Assign object at 0x7f7203a5e760>],
             '$550binary_multiply.18': [<numba.core.ir.Assign object at 0x7f7203a5e8e0>],
             '$552inplace_add.19': [<numba.core.ir.Assign object at 0x7f7203a5ea60>],
             '$566build_tuple.6': [<numba.core.ir.Assign object at 0x7f7203a5ee20>],
             '$570binary_subscr.9': [<numba.core.ir.Assign object at 0x7f7203a601c0>],
             '$576binary_multiply.12': [<numba.core.ir.Assign object at 0x7f7203a60580>],
             '$582binary_subscr.15': [<numba.core.ir.Assign object at 0x7f7203a60940>],
             '$584binary_multiply.16': [<numba.core.ir.Assign object at 0x7f7203a60ac0>],
             '$586inplace_add.17': [<numba.core.ir.Assign object at 0x7f7203a60c40>],
             '$604inplace_add.3': [<numba.core.ir.Assign object at 0x7f7203a641c0>],
             '$612pred': [<numba.core.ir.Assign object at 0x7f7203a646d0>],
             '$616load_global.0': [<numba.core.ir.Assign object at 0x7f7203a64910>],
             '$620load_attr.2': [<numba.core.ir.Assign object at 0x7f7203a64bb0>],
             '$624binary_subscr.4': [<numba.core.ir.Assign object at 0x7f7203ad0670>],
             '$626call_function.5': [<numba.core.ir.Assign object at 0x7f7203a660d0>],
             '$628get_iter.6': [<numba.core.ir.Assign object at 0x7f7203a661f0>],
             '$62binary_multiply.28': [<numba.core.ir.Assign object at 0x7f7203aadb80>],
             '$630for_iter.1': [<numba.core.ir.Assign object at 0x7f7203a66520>],
             '$630for_iter.2': [<numba.core.ir.Assign object at 0x7f7203a66640>],
             '$630for_iter.3': [<numba.core.ir.Assign object at 0x7f7203a66760>],
             '$648build_slice.8': [<numba.core.ir.Assign object at 0x7f7203a68490>],
             '$648build_slice.9': [<numba.core.ir.Assign object at 0x7f7203a685b0>],
             '$64binary_add.29': [<numba.core.ir.Assign object at 0x7f7203aadd00>],
             '$652build_tuple.11': [<numba.core.ir.Assign object at 0x7f7203a68880>],
             '$656binary_subscr.14': [<numba.core.ir.Assign object at 0x7f7203a68be0>],
             '$664binary_floor_divide.18': [<numba.core.ir.Assign object at 0x7f7203a691c0>],
             '$666binary_power.19': [<numba.core.ir.Assign object at 0x7f7203a69340>],
             '$668inplace_multiply.20': [<numba.core.ir.Assign object at 0x7f7203a694c0>],
             '$680return_value.1': [<numba.core.ir.Assign object at 0x7f7203a663d0>],
             '$72load_global.32': [<numba.core.ir.Assign object at 0x7f7203aaf250>],
             '$74load_method.33': [<numba.core.ir.Assign object at 0x7f7203aaf3d0>],
             '$76load_global.34': [<numba.core.ir.Assign object at 0x7f7203aaf550>],
             '$78load_method.35': [<numba.core.ir.Assign object at 0x7f7203aaf6d0>],
             '$82build_list.37': [<numba.core.ir.Assign object at 0x7f7203aaf9a0>],
             '$84call_method.38': [<numba.core.ir.Assign object at 0x7f7203aafb80>],
             '$88build_tuple.40': [<numba.core.ir.Assign object at 0x7f7203aafdc0>],
             '$8build_slice.3': [<numba.core.ir.Assign object at 0x7f7203aa9370>],
             '$8build_slice.4': [<numba.core.ir.Assign object at 0x7f7203aa9490>],
             '$94load_global.42': [<numba.core.ir.Assign object at 0x7f7203ab01f0>],
             '$96load_method.43': [<numba.core.ir.Assign object at 0x7f7203ab0370>],
             '$const10.5': [<numba.core.ir.Assign object at 0x7f7203aa9610>],
             '$const100.45': [<numba.core.ir.Assign object at 0x7f7203ab0610>],
             '$const132.58': [<numba.core.ir.Assign object at 0x7f7203ab2bb0>],
             '$const144.63': [<numba.core.ir.Assign object at 0x7f7203ab4430>],
             '$const154.68': [<numba.core.ir.Assign object at 0x7f7203ab4af0>],
             '$const190.5': [<numba.core.ir.Assign object at 0x7f7203ab6eb0>],
             '$const20.9': [<numba.core.ir.Assign object at 0x7f7203aa9cd0>],
             '$const200.10': [<numba.core.ir.Assign object at 0x7f7203abd5b0>],
             '$const22.10': [<numba.core.ir.Assign object at 0x7f7203aa9e50>],
             '$const24.11': [<numba.core.ir.Assign object at 0x7f7203aa9fd0>],
             '$const240.26': [<numba.core.ir.Assign object at 0x7f7203ac21f0>],
             '$const244.28': [<numba.core.ir.Assign object at 0x7f7203ac2490>],
             '$const288.1': [<numba.core.ir.Assign object at 0x7f7203ac6250>],
             '$const314.5': [<numba.core.ir.Assign object at 0x7f7203ac8250>],
             '$const316.6': [<numba.core.ir.Assign object at 0x7f7203ac83d0>],
             '$const318.7': [<numba.core.ir.Assign object at 0x7f7203ac8550>],
             '$const368.7': [<numba.core.ir.Assign object at 0x7f7203a4cfd0>],
             '$const370.8': [<numba.core.ir.Assign object at 0x7f7203a4e190>],
             '$const38.18': [<numba.core.ir.Assign object at 0x7f7203aacaf0>],
             '$const4.1': [<numba.core.ir.Assign object at 0x7f7203aa9070>],
             '$const428.36': [<numba.core.ir.Assign object at 0x7f7203a519d0>],
             '$const432.38': [<numba.core.ir.Assign object at 0x7f7203a51c70>],
             '$const438.41': [<numba.core.ir.Assign object at 0x7f7203a54130>],
             '$const44.20': [<numba.core.ir.Assign object at 0x7f7203aacf10>],
             '$const448.46': [<numba.core.ir.Assign object at 0x7f7203a547f0>],
             '$const468.7': [<numba.core.ir.Assign object at 0x7f7203a573d0>],
             '$const472.9': [<numba.core.ir.Assign object at 0x7f7203a57670>],
             '$const488.16': [<numba.core.ir.Assign object at 0x7f7203a59130>],
             '$const494.19': [<numba.core.ir.Assign object at 0x7f7203a59550>],
             '$const510.26': [<numba.core.ir.Assign object at 0x7f7203a5b070>],
             '$const514.28': [<numba.core.ir.Assign object at 0x7f7203a5b370>],
             '$const544.15': [<numba.core.ir.Assign object at 0x7f7203a5e430>],
             '$const58.26': [<numba.core.ir.Assign object at 0x7f7203aad8b0>],
             '$const6.2': [<numba.core.ir.Assign object at 0x7f7203aa91f0>],
             '$const622.3': [<numba.core.ir.Assign object at 0x7f7203a64d30>],
             '$const644.6': [<numba.core.ir.Assign object at 0x7f7203a68190>],
             '$const646.7': [<numba.core.ir.Assign object at 0x7f7203a68310>],
             '$const658.15': [<numba.core.ir.Assign object at 0x7f7203a68d30>],
             '$const662.17': [<numba.core.ir.Assign object at 0x7f7203a68fd0>],
             '$phi178.0': [<numba.core.ir.Assign object at 0x7f7203aa9ac0>],
             '$phi182.1': [<numba.core.ir.Assign object at 0x7f7203aad7c0>],
             '$phi252.1': [<numba.core.ir.Assign object at 0x7f7203ab6dc0>],
             '$phi254.2': [<numba.core.ir.Assign object at 0x7f7203abf760>],
             '$phi356.1': [<numba.core.ir.Assign object at 0x7f7203ac80d0>],
             '$phi358.2': [<numba.core.ir.Assign object at 0x7f7203a4c070>],
             '$phi456.2': [<numba.core.ir.Assign object at 0x7f7203a4cca0>],
             '$phi458.3': [<numba.core.ir.Assign object at 0x7f7203a4f4c0>],
             '$phi630.0': [<numba.core.ir.Assign object at 0x7f7203a64ac0>],
             '$phi632.1': [<numba.core.ir.Assign object at 0x7f7203a66460>],
             'A': [<numba.core.ir.Assign object at 0x7f7203ada850>],
             'AX_S': [<numba.core.ir.Assign object at 0x7f7203aca4f0>],
             'D': [<numba.core.ir.Assign object at 0x7f7203ada1f0>],
             'D_S': [<numba.core.ir.Assign object at 0x7f7203aca730>,
                     <numba.core.ir.Assign object at 0x7f7203a4ee20>],
             'E': [<numba.core.ir.Assign object at 0x7f7203acacd0>],
             'H_batch': [<numba.core.ir.Assign object at 0x7f7203ab65b0>,
                         <numba.core.ir.Assign object at 0x7f7203a64280>],
             'Hnew': [<numba.core.ir.Assign object at 0x7f7203abf070>],
             'N': [<numba.core.ir.Assign object at 0x7f7203a57160>],
             'N_det': [<numba.core.ir.Assign object at 0x7f7203a54d30>],
             'N_fixed': [<numba.core.ir.Assign object at 0x7f7203aad520>],
             'N_max': [<numba.core.ir.Assign object at 0x7f7203aadfa0>],
             'XD_S': [<numba.core.ir.Assign object at 0x7f7203aca610>,
                      <numba.core.ir.Assign object at 0x7f7203a4ed30>],
             'batch_max': [<numba.core.ir.Assign object at 0x7f7203adadc0>],
             'binom_prod': [<numba.core.ir.Assign object at 0x7f7203abfd90>,
                            <numba.core.ir.Assign object at 0x7f7203ac4d00>],
             'binoms': [<numba.core.ir.Assign object at 0x7f7203ab26d0>],
             'bool284': [<numba.core.ir.Assign object at 0x7f7203ac4eb0>],
             'bool518': [<numba.core.ir.Assign object at 0x7f7203a5b670>],
             'bool612': [<numba.core.ir.Assign object at 0x7f7203a645b0>],
             'delta': [<numba.core.ir.Assign object at 0x7f7203ac67c0>,
                       <numba.core.ir.Assign object at 0x7f7203ac6b20>],
             'edge_reps': [<numba.core.ir.Assign object at 0x7f7203aaffa0>],
             'edges_sum': [<numba.core.ir.Assign object at 0x7f7203abfb80>],
             'f_even': [<numba.core.ir.Assign object at 0x7f7203a4f730>],
             'f_odd': [<numba.core.ir.Assign object at 0x7f7203a51610>],
             'fixed_edge_reps': [<numba.core.ir.Assign object at 0x7f7203ada4f0>],
             'glynn': [<numba.core.ir.Assign object at 0x7f7203ada7f0>],
             'i': [<numba.core.ir.Assign object at 0x7f7203ac2d90>],
             'j': [<numba.core.ir.Assign object at 0x7f7203ab42b0>,
                   <numba.core.ir.Assign object at 0x7f7203a66a00>],
             'k': [<numba.core.ir.Assign object at 0x7f7203a4c970>],
             'kept_edges': [<numba.core.ir.Assign object at 0x7f7203abf610>],
             'max_binom': [<numba.core.ir.Assign object at 0x7f7203ab2160>],
             'n': [<numba.core.ir.Assign object at 0x7f7203a69b80>],
             'n_D': [<numba.core.ir.Assign object at 0x7f7203a69c40>],
             'n_det_binom_prod': [<numba.core.ir.Assign object at 0x7f7203a59ca0>],
             'oddV': [<numba.core.ir.Assign object at 0x7f7203a69ac0>],
             'oddVX_S': [<numba.core.ir.Assign object at 0x7f7203aca850>],
             'odd_cutoff': [<numba.core.ir.Assign object at 0x7f7203ada8b0>],
             'oddloop': [<numba.core.ir.Assign object at 0x7f7203a69a00>],
             'plus_minus': [<numba.core.ir.Assign object at 0x7f7203a57c40>],
             'steps': [<numba.core.ir.Assign object at 0x7f7203ab09a0>],
             'x': [<numba.core.ir.Assign object at 0x7f7203a66dc0>]})
DEBUG 2022-02-14 16:46:35,227 SSA violators {'delta', 'j', 'binom_prod', 'H_batch', 'XD_S', 'D_S'}
DEBUG 2022-02-14 16:46:35,227 Fix SSA violator on var delta
DEBUG 2022-02-14 16:46:35,227 ==== SSA block rewrite pass on 0
DEBUG 2022-02-14 16:46:35,227 Running <numba.core.ssa._FreshVarHandler object at 0x7f7203a69cd0>
DEBUG 2022-02-14 16:46:35,227 on stmt: A = arg(0, name=A)
DEBUG 2022-02-14 16:46:35,227 on stmt: D = arg(1, name=D)
DEBUG 2022-02-14 16:46:35,227 on stmt: fixed_edge_reps = arg(2, name=fixed_edge_reps)
DEBUG 2022-02-14 16:46:35,227 on stmt: batch_max = arg(3, name=batch_max)
DEBUG 2022-02-14 16:46:35,227 on stmt: odd_cutoff = arg(4, name=odd_cutoff)
DEBUG 2022-02-14 16:46:35,228 on stmt: glynn = arg(5, name=glynn)
DEBUG 2022-02-14 16:46:35,228 on stmt: $const4.1 = const(NoneType, None)
DEBUG 2022-02-14 16:46:35,228 on stmt: $const6.2 = const(NoneType, None)
DEBUG 2022-02-14 16:46:35,228 on stmt: $8build_slice.3 = global(slice: <class 'slice'>)
DEBUG 2022-02-14 16:46:35,228 on stmt: $8build_slice.4 = call $8build_slice.3($const4.1, $const6.2, func=$8build_slice.3, args=(Var($const4.1, loop_hafnian_batch_gamma.py:23), Var($const6.2, loop_hafnian_batch_gamma.py:23)), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:46:35,228 on stmt: $const10.5 = const(int, 0)
DEBUG 2022-02-14 16:46:35,228 on stmt: $12build_tuple.6 = build_tuple(items=[Var($8build_slice.4, loop_hafnian_batch_gamma.py:23), Var($const10.5, loop_hafnian_batch_gamma.py:23)])
DEBUG 2022-02-14 16:46:35,228 on stmt: oddloop = static_getitem(value=D, index=(slice(None, None, None), 0), index_var=$12build_tuple.6, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:46:35,228 on stmt: $const20.9 = const(int, 0)
DEBUG 2022-02-14 16:46:35,228 on stmt: $const22.10 = const(NoneType, None)
DEBUG 2022-02-14 16:46:35,228 on stmt: $const24.11 = const(NoneType, None)
DEBUG 2022-02-14 16:46:35,228 on stmt: $26build_slice.12 = global(slice: <class 'slice'>)
DEBUG 2022-02-14 16:46:35,228 on stmt: $26build_slice.13 = call $26build_slice.12($const22.10, $const24.11, func=$26build_slice.12, args=(Var($const22.10, loop_hafnian_batch_gamma.py:24), Var($const24.11, loop_hafnian_batch_gamma.py:24)), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:46:35,228 on stmt: $28build_tuple.14 = build_tuple(items=[Var($const20.9, loop_hafnian_batch_gamma.py:24), Var($26build_slice.13, loop_hafnian_batch_gamma.py:24)])
DEBUG 2022-02-14 16:46:35,228 on stmt: oddV = static_getitem(value=A, index=(0, slice(None, None, None)), index_var=$28build_tuple.14, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:46:35,228 on stmt: $36load_attr.17 = getattr(value=A, attr=shape)
DEBUG 2022-02-14 16:46:35,228 on stmt: $const38.18 = const(int, 0)
DEBUG 2022-02-14 16:46:35,228 on stmt: n = static_getitem(value=$36load_attr.17, index=0, index_var=$const38.18, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:46:35,228 on stmt: $const44.20 = const(int, 2)
DEBUG 2022-02-14 16:46:35,228 on stmt: $48load_method.22 = getattr(value=fixed_edge_reps, attr=sum)
DEBUG 2022-02-14 16:46:35,228 on stmt: $50call_method.23 = call $48load_method.22(func=$48load_method.22, args=[], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:46:35,229 on stmt: N_fixed = $const44.20 * $50call_method.23
DEBUG 2022-02-14 16:46:35,229 on stmt: $const58.26 = const(int, 2)
DEBUG 2022-02-14 16:46:35,229 on stmt: $62binary_multiply.28 = $const58.26 * batch_max
DEBUG 2022-02-14 16:46:35,229 on stmt: $64binary_add.29 = N_fixed + $62binary_multiply.28
DEBUG 2022-02-14 16:46:35,229 on stmt: N_max = $64binary_add.29 + odd_cutoff
DEBUG 2022-02-14 16:46:35,229 on stmt: $72load_global.32 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:46:35,229 on stmt: $74load_method.33 = getattr(value=$72load_global.32, attr=concatenate)
DEBUG 2022-02-14 16:46:35,229 on stmt: $76load_global.34 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:46:35,229 on stmt: $78load_method.35 = getattr(value=$76load_global.34, attr=array)
DEBUG 2022-02-14 16:46:35,229 on stmt: $82build_list.37 = build_list(items=[Var(batch_max, loop_hafnian_batch_gamma.py:23)])
DEBUG 2022-02-14 16:46:35,229 on stmt: $84call_method.38 = call $78load_method.35($82build_list.37, func=$78load_method.35, args=[Var($82build_list.37, loop_hafnian_batch_gamma.py:31)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:46:35,229 on stmt: $88build_tuple.40 = build_tuple(items=[Var($84call_method.38, loop_hafnian_batch_gamma.py:31), Var(fixed_edge_reps, loop_hafnian_batch_gamma.py:23)])
DEBUG 2022-02-14 16:46:35,229 on stmt: edge_reps = call $74load_method.33($88build_tuple.40, func=$74load_method.33, args=[Var($88build_tuple.40, loop_hafnian_batch_gamma.py:31)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:46:35,229 on stmt: $94load_global.42 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:46:35,229 on stmt: $96load_method.43 = getattr(value=$94load_global.42, attr=prod)
DEBUG 2022-02-14 16:46:35,229 on stmt: $const100.45 = const(int, 1)
DEBUG 2022-02-14 16:46:35,229 on stmt: $102binary_add.46 = edge_reps + $const100.45
DEBUG 2022-02-14 16:46:35,229 on stmt: steps = call $96load_method.43($102binary_add.46, func=$96load_method.43, args=[Var($102binary_add.46, loop_hafnian_batch_gamma.py:32)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:46:35,229 on stmt: $110load_method.49 = getattr(value=edge_reps, attr=max)
DEBUG 2022-02-14 16:46:35,229 on stmt: $112call_method.50 = call $110load_method.49(func=$110load_method.49, args=[], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:46:35,229 on stmt: max_binom = $112call_method.50 + odd_cutoff
DEBUG 2022-02-14 16:46:35,230 on stmt: $120load_global.53 = global(precompute_binoms: CPUDispatcher(<function precompute_binoms at 0x7f7207b0e280>))
DEBUG 2022-02-14 16:46:35,230 on stmt: binoms = call $120load_global.53(max_binom, func=$120load_global.53, args=[Var(max_binom, loop_hafnian_batch_gamma.py:34)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:46:35,230 on stmt: $130load_attr.57 = getattr(value=D, attr=shape)
DEBUG 2022-02-14 16:46:35,230 on stmt: $const132.58 = const(int, 0)
DEBUG 2022-02-14 16:46:35,230 on stmt: n_D = static_getitem(value=$130load_attr.57, index=0, index_var=$const132.58, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:46:35,230 on stmt: $138load_global.60 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:46:35,230 on stmt: $140load_attr.61 = getattr(value=$138load_global.60, attr=zeros)
DEBUG 2022-02-14 16:46:35,230 on stmt: $const144.63 = const(int, 2)
DEBUG 2022-02-14 16:46:35,230 on stmt: $148binary_multiply.65 = $const144.63 * batch_max
DEBUG 2022-02-14 16:46:35,230 on stmt: $152binary_add.67 = $148binary_multiply.65 + odd_cutoff
DEBUG 2022-02-14 16:46:35,230 on stmt: $const154.68 = const(int, 1)
DEBUG 2022-02-14 16:46:35,230 on stmt: $156binary_add.69 = $152binary_add.67 + $const154.68
DEBUG 2022-02-14 16:46:35,230 on stmt: $158build_tuple.70 = build_tuple(items=[Var(n_D, loop_hafnian_batch_gamma.py:36), Var($156binary_add.69, loop_hafnian_batch_gamma.py:38)])
DEBUG 2022-02-14 16:46:35,230 on stmt: $160load_global.71 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:46:35,230 on stmt: $162load_attr.72 = getattr(value=$160load_global.71, attr=complex128)
DEBUG 2022-02-14 16:46:35,230 on stmt: H_batch = call $140load_attr.61($158build_tuple.70, func=$140load_attr.61, args=[Var($158build_tuple.70, loop_hafnian_batch_gamma.py:38)], kws=[('dtype', Var($162load_attr.72, loop_hafnian_batch_gamma.py:38))], vararg=None, target=None)
DEBUG 2022-02-14 16:46:35,230 on stmt: $170load_global.75 = global(prange: <class 'numba.misc.special.prange'>)
DEBUG 2022-02-14 16:46:35,230 on stmt: $174call_function.77 = call $170load_global.75(steps, func=$170load_global.75, args=[Var(steps, loop_hafnian_batch_gamma.py:32)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:46:35,230 on stmt: $176get_iter.78 = getiter(value=$174call_function.77)
DEBUG 2022-02-14 16:46:35,230 on stmt: $phi178.0 = $176get_iter.78
DEBUG 2022-02-14 16:46:35,230 on stmt: jump 178
DEBUG 2022-02-14 16:46:35,231 ==== SSA block rewrite pass on 178
DEBUG 2022-02-14 16:46:35,231 Running <numba.core.ssa._FreshVarHandler object at 0x7f7203a69cd0>
DEBUG 2022-02-14 16:46:35,231 on stmt: $178for_iter.1 = iternext(value=$phi178.0)
DEBUG 2022-02-14 16:46:35,231 on stmt: $178for_iter.2 = pair_first(value=$178for_iter.1)
DEBUG 2022-02-14 16:46:35,231 on stmt: $178for_iter.3 = pair_second(value=$178for_iter.1)
DEBUG 2022-02-14 16:46:35,231 on stmt: $phi182.1 = $178for_iter.2
DEBUG 2022-02-14 16:46:35,231 on stmt: branch $178for_iter.3, 182, 610
DEBUG 2022-02-14 16:46:35,231 ==== SSA block rewrite pass on 182
DEBUG 2022-02-14 16:46:35,231 Running <numba.core.ssa._FreshVarHandler object at 0x7f7203a69cd0>
DEBUG 2022-02-14 16:46:35,231 on stmt: j = $phi182.1
DEBUG 2022-02-14 16:46:35,231 on stmt: $184load_global.2 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:46:35,231 on stmt: $186load_attr.3 = getattr(value=$184load_global.2, attr=zeros)
DEBUG 2022-02-14 16:46:35,231 on stmt: $const190.5 = const(int, 2)
DEBUG 2022-02-14 16:46:35,231 on stmt: $194binary_multiply.7 = $const190.5 * batch_max
DEBUG 2022-02-14 16:46:35,231 on stmt: $198binary_add.9 = $194binary_multiply.7 + odd_cutoff
DEBUG 2022-02-14 16:46:35,231 on stmt: $const200.10 = const(int, 1)
DEBUG 2022-02-14 16:46:35,231 on stmt: $202binary_add.11 = $198binary_add.9 + $const200.10
DEBUG 2022-02-14 16:46:35,231 on stmt: $204build_tuple.12 = build_tuple(items=[Var(n_D, loop_hafnian_batch_gamma.py:36), Var($202binary_add.11, loop_hafnian_batch_gamma.py:42)])
DEBUG 2022-02-14 16:46:35,231 on stmt: $206load_global.13 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:46:35,231 on stmt: $208load_attr.14 = getattr(value=$206load_global.13, attr=complex128)
DEBUG 2022-02-14 16:46:35,231 on stmt: Hnew = call $186load_attr.3($204build_tuple.12, func=$186load_attr.3, args=[Var($204build_tuple.12, loop_hafnian_batch_gamma.py:42)], kws=[('dtype', Var($208load_attr.14, loop_hafnian_batch_gamma.py:42))], vararg=None, target=None)
DEBUG 2022-02-14 16:46:35,231 on stmt: $216load_global.17 = global(find_kept_edges: CPUDispatcher(<function find_kept_edges at 0x7f7207b0e700>))
DEBUG 2022-02-14 16:46:35,231 on stmt: kept_edges = call $216load_global.17(j, edge_reps, func=$216load_global.17, args=[Var(j, loop_hafnian_batch_gamma.py:40), Var(edge_reps, loop_hafnian_batch_gamma.py:31)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:46:35,231 on stmt: $228load_method.22 = getattr(value=kept_edges, attr=sum)
DEBUG 2022-02-14 16:46:35,232 on stmt: edges_sum = call $228load_method.22(func=$228load_method.22, args=[], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:46:35,232 on stmt: binom_prod = const(float, 1.0)
DEBUG 2022-02-14 16:46:35,232 on stmt: $238load_global.25 = global(range: <class 'range'>)
DEBUG 2022-02-14 16:46:35,232 on stmt: $const240.26 = const(int, 1)
DEBUG 2022-02-14 16:46:35,232 on stmt: $const244.28 = const(int, 2)
DEBUG 2022-02-14 16:46:35,232 on stmt: $246binary_floor_divide.29 = n // $const244.28
DEBUG 2022-02-14 16:46:35,232 on stmt: $248call_function.30 = call $238load_global.25($const240.26, $246binary_floor_divide.29, func=$238load_global.25, args=[Var($const240.26, loop_hafnian_batch_gamma.py:48), Var($246binary_floor_divide.29, loop_hafnian_batch_gamma.py:48)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:46:35,232 on stmt: $250get_iter.31 = getiter(value=$248call_function.30)
DEBUG 2022-02-14 16:46:35,232 on stmt: $phi252.1 = $250get_iter.31
DEBUG 2022-02-14 16:46:35,232 on stmt: jump 252
DEBUG 2022-02-14 16:46:35,232 ==== SSA block rewrite pass on 252
DEBUG 2022-02-14 16:46:35,232 Running <numba.core.ssa._FreshVarHandler object at 0x7f7203a69cd0>
DEBUG 2022-02-14 16:46:35,232 on stmt: $252for_iter.2 = iternext(value=$phi252.1)
DEBUG 2022-02-14 16:46:35,232 on stmt: $252for_iter.3 = pair_first(value=$252for_iter.2)
DEBUG 2022-02-14 16:46:35,232 on stmt: $252for_iter.4 = pair_second(value=$252for_iter.2)
DEBUG 2022-02-14 16:46:35,232 on stmt: $phi254.2 = $252for_iter.3
DEBUG 2022-02-14 16:46:35,232 on stmt: branch $252for_iter.4, 254, 282
DEBUG 2022-02-14 16:46:35,232 ==== SSA block rewrite pass on 254
DEBUG 2022-02-14 16:46:35,232 Running <numba.core.ssa._FreshVarHandler object at 0x7f7203a69cd0>
DEBUG 2022-02-14 16:46:35,232 on stmt: i = $phi254.2
DEBUG 2022-02-14 16:46:35,232 on stmt: $264binary_subscr.7 = getitem(value=edge_reps, index=i, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:46:35,232 on stmt: $270binary_subscr.10 = getitem(value=kept_edges, index=i, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:46:35,232 on stmt: $272build_tuple.11 = build_tuple(items=[Var($264binary_subscr.7, loop_hafnian_batch_gamma.py:49), Var($270binary_subscr.10, loop_hafnian_batch_gamma.py:49)])
DEBUG 2022-02-14 16:46:35,232 on stmt: $274binary_subscr.12 = getitem(value=binoms, index=$272build_tuple.11, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:46:35,232 on stmt: $276inplace_multiply.13 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=binom_prod, rhs=$274binary_subscr.12, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:46:35,232 on stmt: binom_prod = $276inplace_multiply.13
DEBUG 2022-02-14 16:46:35,233 on stmt: jump 252
DEBUG 2022-02-14 16:46:35,233 ==== SSA block rewrite pass on 282
DEBUG 2022-02-14 16:46:35,233 Running <numba.core.ssa._FreshVarHandler object at 0x7f7203a69cd0>
DEBUG 2022-02-14 16:46:35,233 on stmt: bool284 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:46:35,233 on stmt: $284pred = call bool284(glynn, func=bool284, args=(Var(glynn, loop_hafnian_batch_gamma.py:23),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:46:35,233 on stmt: branch $284pred, 288, 302
DEBUG 2022-02-14 16:46:35,233 ==== SSA block rewrite pass on 288
DEBUG 2022-02-14 16:46:35,233 Running <numba.core.ssa._FreshVarHandler object at 0x7f7203a69cd0>
DEBUG 2022-02-14 16:46:35,233 on stmt: $const288.1 = const(int, 2)
DEBUG 2022-02-14 16:46:35,233 on stmt: $292binary_multiply.3 = $const288.1 * kept_edges
DEBUG 2022-02-14 16:46:35,233 on stmt: delta = $292binary_multiply.3 - edge_reps
DEBUG 2022-02-14 16:46:35,233 first assign: delta
DEBUG 2022-02-14 16:46:35,233 replaced with: delta = $292binary_multiply.3 - edge_reps
DEBUG 2022-02-14 16:46:35,233 on stmt: jump 306
DEBUG 2022-02-14 16:46:35,233 ==== SSA block rewrite pass on 302
DEBUG 2022-02-14 16:46:35,233 Running <numba.core.ssa._FreshVarHandler object at 0x7f7203a69cd0>
DEBUG 2022-02-14 16:46:35,233 on stmt: delta = kept_edges
DEBUG 2022-02-14 16:46:35,233 replaced with: delta.1 = kept_edges
DEBUG 2022-02-14 16:46:35,233 on stmt: jump 306
DEBUG 2022-02-14 16:46:35,233 ==== SSA block rewrite pass on 306
DEBUG 2022-02-14 16:46:35,233 Running <numba.core.ssa._FreshVarHandler object at 0x7f7203a69cd0>
DEBUG 2022-02-14 16:46:35,233 on stmt: $306load_global.1 = global(get_submatrices: CPUDispatcher(<function get_submatrices at 0x7f7207b0eca0>))
DEBUG 2022-02-14 16:46:35,234 on stmt: $const314.5 = const(int, 0)
DEBUG 2022-02-14 16:46:35,234 on stmt: $const316.6 = const(NoneType, None)
DEBUG 2022-02-14 16:46:35,234 on stmt: $const318.7 = const(NoneType, None)
DEBUG 2022-02-14 16:46:35,234 on stmt: $320build_slice.8 = global(slice: <class 'slice'>)
DEBUG 2022-02-14 16:46:35,234 on stmt: $320build_slice.9 = call $320build_slice.8($const316.6, $const318.7, func=$320build_slice.8, args=(Var($const316.6, loop_hafnian_batch_gamma.py:56), Var($const318.7, loop_hafnian_batch_gamma.py:56)), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:46:35,234 on stmt: $322build_tuple.10 = build_tuple(items=[Var($const314.5, loop_hafnian_batch_gamma.py:56), Var($320build_slice.9, loop_hafnian_batch_gamma.py:56)])
DEBUG 2022-02-14 16:46:35,234 on stmt: $324binary_subscr.11 = static_getitem(value=D, index=(0, slice(None, None, None)), index_var=$322build_tuple.10, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:46:35,234 on stmt: $328call_function.13 = call $306load_global.1(delta, A, $324binary_subscr.11, oddV, func=$306load_global.1, args=[Var(delta, loop_hafnian_batch_gamma.py:52), Var(A, loop_hafnian_batch_gamma.py:23), Var($324binary_subscr.11, loop_hafnian_batch_gamma.py:56), Var(oddV, loop_hafnian_batch_gamma.py:24)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:46:35,234 on stmt: $330unpack_sequence.18 = exhaust_iter(value=$328call_function.13, count=4)
DEBUG 2022-02-14 16:46:35,234 on stmt: $330unpack_sequence.14 = static_getitem(value=$330unpack_sequence.18, index=0, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:46:35,234 on stmt: $330unpack_sequence.15 = static_getitem(value=$330unpack_sequence.18, index=1, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:46:35,234 on stmt: $330unpack_sequence.16 = static_getitem(value=$330unpack_sequence.18, index=2, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:46:35,234 on stmt: $330unpack_sequence.17 = static_getitem(value=$330unpack_sequence.18, index=3, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:46:35,234 on stmt: AX_S = $330unpack_sequence.14
DEBUG 2022-02-14 16:46:35,234 on stmt: XD_S = $330unpack_sequence.15
DEBUG 2022-02-14 16:46:35,234 on stmt: D_S = $330unpack_sequence.16
DEBUG 2022-02-14 16:46:35,234 on stmt: oddVX_S = $330unpack_sequence.17
DEBUG 2022-02-14 16:46:35,234 on stmt: $340load_global.19 = global(eigvals: CPUDispatcher(<function eigvals at 0x7f7207a993a0>))
DEBUG 2022-02-14 16:46:35,234 on stmt: E = call $340load_global.19(AX_S, func=$340load_global.19, args=[Var(AX_S, loop_hafnian_batch_gamma.py:56)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:46:35,234 on stmt: $348load_global.22 = global(range: <class 'range'>)
DEBUG 2022-02-14 16:46:35,234 on stmt: $352call_function.24 = call $348load_global.22(n_D, func=$348load_global.22, args=[Var(n_D, loop_hafnian_batch_gamma.py:36)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:46:35,234 on stmt: $354get_iter.25 = getiter(value=$352call_function.24)
DEBUG 2022-02-14 16:46:35,234 on stmt: $phi356.1 = $354get_iter.25
DEBUG 2022-02-14 16:46:35,235 on stmt: jump 356
DEBUG 2022-02-14 16:46:35,235 ==== SSA block rewrite pass on 356
DEBUG 2022-02-14 16:46:35,235 Running <numba.core.ssa._FreshVarHandler object at 0x7f7203a69cd0>
DEBUG 2022-02-14 16:46:35,235 on stmt: $356for_iter.2 = iternext(value=$phi356.1)
DEBUG 2022-02-14 16:46:35,235 on stmt: $356for_iter.3 = pair_first(value=$356for_iter.2)
DEBUG 2022-02-14 16:46:35,235 on stmt: $356for_iter.4 = pair_second(value=$356for_iter.2)
DEBUG 2022-02-14 16:46:35,235 on stmt: $phi358.2 = $356for_iter.3
DEBUG 2022-02-14 16:46:35,235 on stmt: branch $356for_iter.4, 358, 600
DEBUG 2022-02-14 16:46:35,235 ==== SSA block rewrite pass on 358
DEBUG 2022-02-14 16:46:35,235 Running <numba.core.ssa._FreshVarHandler object at 0x7f7203a69cd0>
DEBUG 2022-02-14 16:46:35,235 on stmt: k = $phi358.2
DEBUG 2022-02-14 16:46:35,235 on stmt: $360load_global.3 = global(get_Dsubmatrices: CPUDispatcher(<function get_Dsubmatrices at 0x7f7207a99160>))
DEBUG 2022-02-14 16:46:35,235 on stmt: $const368.7 = const(NoneType, None)
DEBUG 2022-02-14 16:46:35,235 on stmt: $const370.8 = const(NoneType, None)
DEBUG 2022-02-14 16:46:35,235 on stmt: $372build_slice.9 = global(slice: <class 'slice'>)
DEBUG 2022-02-14 16:46:35,235 on stmt: $372build_slice.10 = call $372build_slice.9($const368.7, $const370.8, func=$372build_slice.9, args=(Var($const368.7, loop_hafnian_batch_gamma.py:61), Var($const370.8, loop_hafnian_batch_gamma.py:61)), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:46:35,235 on stmt: $374build_tuple.11 = build_tuple(items=[Var(k, loop_hafnian_batch_gamma.py:60), Var($372build_slice.10, loop_hafnian_batch_gamma.py:61)])
DEBUG 2022-02-14 16:46:35,235 on stmt: $376binary_subscr.12 = getitem(value=D, index=$374build_tuple.11, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:46:35,235 on stmt: $378call_function.13 = call $360load_global.3(delta, $376binary_subscr.12, func=$360load_global.3, args=[Var(delta, loop_hafnian_batch_gamma.py:52), Var($376binary_subscr.12, loop_hafnian_batch_gamma.py:61)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:46:35,235 on stmt: $380unpack_sequence.16 = exhaust_iter(value=$378call_function.13, count=2)
DEBUG 2022-02-14 16:46:35,235 on stmt: $380unpack_sequence.14 = static_getitem(value=$380unpack_sequence.16, index=0, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:46:35,235 on stmt: $380unpack_sequence.15 = static_getitem(value=$380unpack_sequence.16, index=1, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:46:35,235 on stmt: XD_S = $380unpack_sequence.14
DEBUG 2022-02-14 16:46:35,235 on stmt: D_S = $380unpack_sequence.15
DEBUG 2022-02-14 16:46:35,235 on stmt: $386load_global.17 = global(f_loop: CPUDispatcher(<function f_loop at 0x7f7207b0e940>))
DEBUG 2022-02-14 16:46:35,236 on stmt: f_even = call $386load_global.17(E, AX_S, XD_S, D_S, N_max, func=$386load_global.17, args=[Var(E, loop_hafnian_batch_gamma.py:58), Var(AX_S, loop_hafnian_batch_gamma.py:56), Var(XD_S, loop_hafnian_batch_gamma.py:56), Var(D_S, loop_hafnian_batch_gamma.py:56), Var(N_max, loop_hafnian_batch_gamma.py:29)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:46:35,236 on stmt: $402load_global.24 = global(f_loop_odd: CPUDispatcher(<function f_loop_odd at 0x7f7207b0eaf0>))
DEBUG 2022-02-14 16:46:35,236 on stmt: $418binary_subscr.32 = getitem(value=oddloop, index=k, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:46:35,236 on stmt: f_odd = call $402load_global.24(E, AX_S, XD_S, D_S, N_max, $418binary_subscr.32, oddVX_S, func=$402load_global.24, args=[Var(E, loop_hafnian_batch_gamma.py:58), Var(AX_S, loop_hafnian_batch_gamma.py:56), Var(XD_S, loop_hafnian_batch_gamma.py:56), Var(D_S, loop_hafnian_batch_gamma.py:56), Var(N_max, loop_hafnian_batch_gamma.py:29), Var($418binary_subscr.32, loop_hafnian_batch_gamma.py:64), Var(oddVX_S, loop_hafnian_batch_gamma.py:56)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:46:35,236 on stmt: $426load_global.35 = global(range: <class 'range'>)
DEBUG 2022-02-14 16:46:35,236 on stmt: $const428.36 = const(int, 2)
DEBUG 2022-02-14 16:46:35,236 on stmt: $const432.38 = const(int, 0)
DEBUG 2022-02-14 16:46:35,236 on stmt: $434binary_subscr.39 = static_getitem(value=kept_edges, index=0, index_var=$const432.38, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:46:35,236 on stmt: $436binary_multiply.40 = $const428.36 * $434binary_subscr.39
DEBUG 2022-02-14 16:46:35,236 on stmt: $const438.41 = const(int, 2)
DEBUG 2022-02-14 16:46:35,236 on stmt: $442binary_multiply.43 = $const438.41 * batch_max
DEBUG 2022-02-14 16:46:35,236 on stmt: $446binary_add.45 = $442binary_multiply.43 + odd_cutoff
DEBUG 2022-02-14 16:46:35,236 on stmt: $const448.46 = const(int, 1)
DEBUG 2022-02-14 16:46:35,236 on stmt: $450binary_add.47 = $446binary_add.45 + $const448.46
DEBUG 2022-02-14 16:46:35,236 on stmt: $452call_function.48 = call $426load_global.35($436binary_multiply.40, $450binary_add.47, func=$426load_global.35, args=[Var($436binary_multiply.40, loop_hafnian_batch_gamma.py:66), Var($450binary_add.47, loop_hafnian_batch_gamma.py:66)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:46:35,236 on stmt: $454get_iter.49 = getiter(value=$452call_function.48)
DEBUG 2022-02-14 16:46:35,236 on stmt: $phi456.2 = $454get_iter.49
DEBUG 2022-02-14 16:46:35,236 on stmt: jump 456
DEBUG 2022-02-14 16:46:35,236 ==== SSA block rewrite pass on 456
DEBUG 2022-02-14 16:46:35,236 Running <numba.core.ssa._FreshVarHandler object at 0x7f7203a69cd0>
DEBUG 2022-02-14 16:46:35,236 on stmt: $456for_iter.3 = iternext(value=$phi456.2)
DEBUG 2022-02-14 16:46:35,236 on stmt: $456for_iter.4 = pair_first(value=$456for_iter.3)
DEBUG 2022-02-14 16:46:35,236 on stmt: $456for_iter.5 = pair_second(value=$456for_iter.3)
DEBUG 2022-02-14 16:46:35,236 on stmt: $phi458.3 = $456for_iter.4
DEBUG 2022-02-14 16:46:35,237 on stmt: branch $456for_iter.5, 458, 596
DEBUG 2022-02-14 16:46:35,237 ==== SSA block rewrite pass on 458
DEBUG 2022-02-14 16:46:35,237 Running <numba.core.ssa._FreshVarHandler object at 0x7f7203a69cd0>
DEBUG 2022-02-14 16:46:35,237 on stmt: N_det = $phi458.3
DEBUG 2022-02-14 16:46:35,237 on stmt: N = N_fixed + N_det
DEBUG 2022-02-14 16:46:35,237 on stmt: $const468.7 = const(float, -1.0)
DEBUG 2022-02-14 16:46:35,237 on stmt: $const472.9 = const(int, 2)
DEBUG 2022-02-14 16:46:35,237 on stmt: $474binary_floor_divide.10 = N // $const472.9
DEBUG 2022-02-14 16:46:35,237 on stmt: $478binary_subtract.12 = $474binary_floor_divide.10 - edges_sum
DEBUG 2022-02-14 16:46:35,237 on stmt: plus_minus = $const468.7 ** $478binary_subtract.12
DEBUG 2022-02-14 16:46:35,237 on stmt: $const488.16 = const(int, 2)
DEBUG 2022-02-14 16:46:35,237 on stmt: $490binary_floor_divide.17 = N_det // $const488.16
DEBUG 2022-02-14 16:46:35,237 on stmt: $const494.19 = const(int, 0)
DEBUG 2022-02-14 16:46:35,237 on stmt: $496binary_subscr.20 = static_getitem(value=kept_edges, index=0, index_var=$const494.19, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:46:35,237 on stmt: $498build_tuple.21 = build_tuple(items=[Var($490binary_floor_divide.17, loop_hafnian_batch_gamma.py:70), Var($496binary_subscr.20, loop_hafnian_batch_gamma.py:70)])
DEBUG 2022-02-14 16:46:35,237 on stmt: $500binary_subscr.22 = getitem(value=binoms, index=$498build_tuple.21, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:46:35,237 on stmt: n_det_binom_prod = $500binary_subscr.22 * binom_prod
DEBUG 2022-02-14 16:46:35,237 on stmt: $const510.26 = const(int, 2)
DEBUG 2022-02-14 16:46:35,237 on stmt: $512binary_modulo.27 = N_det % $const510.26
DEBUG 2022-02-14 16:46:35,237 on stmt: $const514.28 = const(int, 0)
DEBUG 2022-02-14 16:46:35,237 on stmt: $516compare_op.29 = $512binary_modulo.27 == $const514.28
DEBUG 2022-02-14 16:46:35,237 on stmt: bool518 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:46:35,237 on stmt: $518pred = call bool518($516compare_op.29, func=bool518, args=(Var($516compare_op.29, loop_hafnian_batch_gamma.py:72),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:46:35,237 on stmt: branch $518pred, 522, 560
DEBUG 2022-02-14 16:46:35,238 ==== SSA block rewrite pass on 522
DEBUG 2022-02-14 16:46:35,238 Running <numba.core.ssa._FreshVarHandler object at 0x7f7203a69cd0>
DEBUG 2022-02-14 16:46:35,238 on stmt: $528build_tuple.6 = build_tuple(items=[Var(k, loop_hafnian_batch_gamma.py:60), Var(N_det, loop_hafnian_batch_gamma.py:66)])
DEBUG 2022-02-14 16:46:35,238 on stmt: $532binary_subscr.9 = getitem(value=Hnew, index=$528build_tuple.6, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:46:35,238 on stmt: $538binary_multiply.12 = n_det_binom_prod * plus_minus
DEBUG 2022-02-14 16:46:35,238 on stmt: $const544.15 = const(int, 2)
DEBUG 2022-02-14 16:46:35,238 on stmt: $546binary_floor_divide.16 = N // $const544.15
DEBUG 2022-02-14 16:46:35,238 on stmt: $548binary_subscr.17 = getitem(value=f_even, index=$546binary_floor_divide.16, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:46:35,238 on stmt: $550binary_multiply.18 = $538binary_multiply.12 * $548binary_subscr.17
DEBUG 2022-02-14 16:46:35,238 on stmt: $552inplace_add.19 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$532binary_subscr.9, rhs=$550binary_multiply.18, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:46:35,238 on stmt: Hnew[$528build_tuple.6] = $552inplace_add.19
DEBUG 2022-02-14 16:46:35,238 on stmt: jump 592
DEBUG 2022-02-14 16:46:35,238 ==== SSA block rewrite pass on 560
DEBUG 2022-02-14 16:46:35,238 Running <numba.core.ssa._FreshVarHandler object at 0x7f7203a69cd0>
DEBUG 2022-02-14 16:46:35,238 on stmt: $566build_tuple.6 = build_tuple(items=[Var(k, loop_hafnian_batch_gamma.py:60), Var(N_det, loop_hafnian_batch_gamma.py:66)])
DEBUG 2022-02-14 16:46:35,238 on stmt: $570binary_subscr.9 = getitem(value=Hnew, index=$566build_tuple.6, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:46:35,238 on stmt: $576binary_multiply.12 = n_det_binom_prod * plus_minus
DEBUG 2022-02-14 16:46:35,238 on stmt: $582binary_subscr.15 = getitem(value=f_odd, index=N, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:46:35,238 on stmt: $584binary_multiply.16 = $576binary_multiply.12 * $582binary_subscr.15
DEBUG 2022-02-14 16:46:35,238 on stmt: $586inplace_add.17 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$570binary_subscr.9, rhs=$584binary_multiply.16, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:46:35,238 on stmt: Hnew[$566build_tuple.6] = $586inplace_add.17
DEBUG 2022-02-14 16:46:35,238 on stmt: jump 592
DEBUG 2022-02-14 16:46:35,238 ==== SSA block rewrite pass on 592
DEBUG 2022-02-14 16:46:35,238 Running <numba.core.ssa._FreshVarHandler object at 0x7f7203a69cd0>
DEBUG 2022-02-14 16:46:35,238 on stmt: jump 456
DEBUG 2022-02-14 16:46:35,238 ==== SSA block rewrite pass on 596
DEBUG 2022-02-14 16:46:35,239 Running <numba.core.ssa._FreshVarHandler object at 0x7f7203a69cd0>
DEBUG 2022-02-14 16:46:35,239 on stmt: jump 356
DEBUG 2022-02-14 16:46:35,239 ==== SSA block rewrite pass on 600
DEBUG 2022-02-14 16:46:35,239 Running <numba.core.ssa._FreshVarHandler object at 0x7f7203a69cd0>
DEBUG 2022-02-14 16:46:35,239 on stmt: $604inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=H_batch, rhs=Hnew, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:46:35,239 on stmt: H_batch = $604inplace_add.3
DEBUG 2022-02-14 16:46:35,239 on stmt: jump 178
DEBUG 2022-02-14 16:46:35,239 ==== SSA block rewrite pass on 610
DEBUG 2022-02-14 16:46:35,239 Running <numba.core.ssa._FreshVarHandler object at 0x7f7203a69cd0>
DEBUG 2022-02-14 16:46:35,239 on stmt: bool612 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:46:35,239 on stmt: $612pred = call bool612(glynn, func=bool612, args=(Var(glynn, loop_hafnian_batch_gamma.py:23),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:46:35,239 on stmt: branch $612pred, 616, 678
DEBUG 2022-02-14 16:46:35,239 ==== SSA block rewrite pass on 616
DEBUG 2022-02-14 16:46:35,239 Running <numba.core.ssa._FreshVarHandler object at 0x7f7203a69cd0>
DEBUG 2022-02-14 16:46:35,239 on stmt: $616load_global.0 = global(range: <class 'range'>)
DEBUG 2022-02-14 16:46:35,239 on stmt: $620load_attr.2 = getattr(value=H_batch, attr=shape)
DEBUG 2022-02-14 16:46:35,239 on stmt: $const622.3 = const(int, 1)
DEBUG 2022-02-14 16:46:35,239 on stmt: $624binary_subscr.4 = static_getitem(value=$620load_attr.2, index=1, index_var=$const622.3, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:46:35,239 on stmt: $626call_function.5 = call $616load_global.0($624binary_subscr.4, func=$616load_global.0, args=[Var($624binary_subscr.4, loop_hafnian_batch_gamma.py:79)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:46:35,239 on stmt: $628get_iter.6 = getiter(value=$626call_function.5)
DEBUG 2022-02-14 16:46:35,239 on stmt: $phi630.0 = $628get_iter.6
DEBUG 2022-02-14 16:46:35,239 on stmt: jump 630
DEBUG 2022-02-14 16:46:35,239 ==== SSA block rewrite pass on 630
DEBUG 2022-02-14 16:46:35,239 Running <numba.core.ssa._FreshVarHandler object at 0x7f7203a69cd0>
DEBUG 2022-02-14 16:46:35,239 on stmt: $630for_iter.1 = iternext(value=$phi630.0)
DEBUG 2022-02-14 16:46:35,239 on stmt: $630for_iter.2 = pair_first(value=$630for_iter.1)
DEBUG 2022-02-14 16:46:35,240 on stmt: $630for_iter.3 = pair_second(value=$630for_iter.1)
DEBUG 2022-02-14 16:46:35,240 on stmt: $phi632.1 = $630for_iter.2
DEBUG 2022-02-14 16:46:35,240 on stmt: branch $630for_iter.3, 632, 678
DEBUG 2022-02-14 16:46:35,240 ==== SSA block rewrite pass on 632
DEBUG 2022-02-14 16:46:35,240 Running <numba.core.ssa._FreshVarHandler object at 0x7f7203a69cd0>
DEBUG 2022-02-14 16:46:35,240 on stmt: j = $phi632.1
DEBUG 2022-02-14 16:46:35,240 on stmt: x = N_fixed + j
DEBUG 2022-02-14 16:46:35,240 on stmt: $const644.6 = const(NoneType, None)
DEBUG 2022-02-14 16:46:35,240 on stmt: $const646.7 = const(NoneType, None)
DEBUG 2022-02-14 16:46:35,240 on stmt: $648build_slice.8 = global(slice: <class 'slice'>)
DEBUG 2022-02-14 16:46:35,240 on stmt: $648build_slice.9 = call $648build_slice.8($const644.6, $const646.7, func=$648build_slice.8, args=(Var($const644.6, loop_hafnian_batch_gamma.py:81), Var($const646.7, loop_hafnian_batch_gamma.py:81)), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:46:35,240 on stmt: $652build_tuple.11 = build_tuple(items=[Var($648build_slice.9, loop_hafnian_batch_gamma.py:81), Var(j, loop_hafnian_batch_gamma.py:40)])
DEBUG 2022-02-14 16:46:35,240 on stmt: $656binary_subscr.14 = getitem(value=H_batch, index=$652build_tuple.11, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:46:35,240 on stmt: $const658.15 = const(float, 0.5)
DEBUG 2022-02-14 16:46:35,240 on stmt: $const662.17 = const(int, 2)
DEBUG 2022-02-14 16:46:35,240 on stmt: $664binary_floor_divide.18 = x // $const662.17
DEBUG 2022-02-14 16:46:35,240 on stmt: $666binary_power.19 = $const658.15 ** $664binary_floor_divide.18
DEBUG 2022-02-14 16:46:35,240 on stmt: $668inplace_multiply.20 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=$656binary_subscr.14, rhs=$666binary_power.19, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:46:35,240 on stmt: H_batch[$652build_tuple.11] = $668inplace_multiply.20
DEBUG 2022-02-14 16:46:35,240 on stmt: jump 630
DEBUG 2022-02-14 16:46:35,240 ==== SSA block rewrite pass on 678
DEBUG 2022-02-14 16:46:35,240 Running <numba.core.ssa._FreshVarHandler object at 0x7f7203a69cd0>
DEBUG 2022-02-14 16:46:35,240 on stmt: $680return_value.1 = cast(value=H_batch)
DEBUG 2022-02-14 16:46:35,240 on stmt: return $680return_value.1
DEBUG 2022-02-14 16:46:35,241 Replaced assignments: defaultdict(<class 'list'>,
            {288: [<numba.core.ir.Assign object at 0x7f7203a2d0d0>],
             302: [<numba.core.ir.Assign object at 0x7f7203a2d1c0>]})
DEBUG 2022-02-14 16:46:35,241 ==== SSA block rewrite pass on 0
DEBUG 2022-02-14 16:46:35,241 Running <numba.core.ssa._FixSSAVars object at 0x7f7203a69cd0>
DEBUG 2022-02-14 16:46:35,241 on stmt: A = arg(0, name=A)
DEBUG 2022-02-14 16:46:35,241 on stmt: D = arg(1, name=D)
DEBUG 2022-02-14 16:46:35,241 on stmt: fixed_edge_reps = arg(2, name=fixed_edge_reps)
DEBUG 2022-02-14 16:46:35,241 on stmt: batch_max = arg(3, name=batch_max)
DEBUG 2022-02-14 16:46:35,241 on stmt: odd_cutoff = arg(4, name=odd_cutoff)
DEBUG 2022-02-14 16:46:35,241 on stmt: glynn = arg(5, name=glynn)
DEBUG 2022-02-14 16:46:35,241 on stmt: $const4.1 = const(NoneType, None)
DEBUG 2022-02-14 16:46:35,241 on stmt: $const6.2 = const(NoneType, None)
DEBUG 2022-02-14 16:46:35,241 on stmt: $8build_slice.3 = global(slice: <class 'slice'>)
DEBUG 2022-02-14 16:46:35,241 on stmt: $8build_slice.4 = call $8build_slice.3($const4.1, $const6.2, func=$8build_slice.3, args=(Var($const4.1, loop_hafnian_batch_gamma.py:23), Var($const6.2, loop_hafnian_batch_gamma.py:23)), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:46:35,241 on stmt: $const10.5 = const(int, 0)
DEBUG 2022-02-14 16:46:35,241 on stmt: $12build_tuple.6 = build_tuple(items=[Var($8build_slice.4, loop_hafnian_batch_gamma.py:23), Var($const10.5, loop_hafnian_batch_gamma.py:23)])
DEBUG 2022-02-14 16:46:35,241 on stmt: oddloop = static_getitem(value=D, index=(slice(None, None, None), 0), index_var=$12build_tuple.6, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:46:35,241 on stmt: $const20.9 = const(int, 0)
DEBUG 2022-02-14 16:46:35,241 on stmt: $const22.10 = const(NoneType, None)
DEBUG 2022-02-14 16:46:35,241 on stmt: $const24.11 = const(NoneType, None)
DEBUG 2022-02-14 16:46:35,241 on stmt: $26build_slice.12 = global(slice: <class 'slice'>)
DEBUG 2022-02-14 16:46:35,241 on stmt: $26build_slice.13 = call $26build_slice.12($const22.10, $const24.11, func=$26build_slice.12, args=(Var($const22.10, loop_hafnian_batch_gamma.py:24), Var($const24.11, loop_hafnian_batch_gamma.py:24)), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:46:35,241 on stmt: $28build_tuple.14 = build_tuple(items=[Var($const20.9, loop_hafnian_batch_gamma.py:24), Var($26build_slice.13, loop_hafnian_batch_gamma.py:24)])
DEBUG 2022-02-14 16:46:35,242 on stmt: oddV = static_getitem(value=A, index=(0, slice(None, None, None)), index_var=$28build_tuple.14, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:46:35,242 on stmt: $36load_attr.17 = getattr(value=A, attr=shape)
DEBUG 2022-02-14 16:46:35,242 on stmt: $const38.18 = const(int, 0)
DEBUG 2022-02-14 16:46:35,242 on stmt: n = static_getitem(value=$36load_attr.17, index=0, index_var=$const38.18, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:46:35,242 on stmt: $const44.20 = const(int, 2)
DEBUG 2022-02-14 16:46:35,242 on stmt: $48load_method.22 = getattr(value=fixed_edge_reps, attr=sum)
DEBUG 2022-02-14 16:46:35,242 on stmt: $50call_method.23 = call $48load_method.22(func=$48load_method.22, args=[], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:46:35,242 on stmt: N_fixed = $const44.20 * $50call_method.23
DEBUG 2022-02-14 16:46:35,242 on stmt: $const58.26 = const(int, 2)
DEBUG 2022-02-14 16:46:35,242 on stmt: $62binary_multiply.28 = $const58.26 * batch_max
DEBUG 2022-02-14 16:46:35,242 on stmt: $64binary_add.29 = N_fixed + $62binary_multiply.28
DEBUG 2022-02-14 16:46:35,242 on stmt: N_max = $64binary_add.29 + odd_cutoff
DEBUG 2022-02-14 16:46:35,242 on stmt: $72load_global.32 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:46:35,242 on stmt: $74load_method.33 = getattr(value=$72load_global.32, attr=concatenate)
DEBUG 2022-02-14 16:46:35,242 on stmt: $76load_global.34 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:46:35,242 on stmt: $78load_method.35 = getattr(value=$76load_global.34, attr=array)
DEBUG 2022-02-14 16:46:35,242 on stmt: $82build_list.37 = build_list(items=[Var(batch_max, loop_hafnian_batch_gamma.py:23)])
DEBUG 2022-02-14 16:46:35,242 on stmt: $84call_method.38 = call $78load_method.35($82build_list.37, func=$78load_method.35, args=[Var($82build_list.37, loop_hafnian_batch_gamma.py:31)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:46:35,242 on stmt: $88build_tuple.40 = build_tuple(items=[Var($84call_method.38, loop_hafnian_batch_gamma.py:31), Var(fixed_edge_reps, loop_hafnian_batch_gamma.py:23)])
DEBUG 2022-02-14 16:46:35,242 on stmt: edge_reps = call $74load_method.33($88build_tuple.40, func=$74load_method.33, args=[Var($88build_tuple.40, loop_hafnian_batch_gamma.py:31)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:46:35,243 on stmt: $94load_global.42 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:46:35,243 on stmt: $96load_method.43 = getattr(value=$94load_global.42, attr=prod)
DEBUG 2022-02-14 16:46:35,243 on stmt: $const100.45 = const(int, 1)
DEBUG 2022-02-14 16:46:35,243 on stmt: $102binary_add.46 = edge_reps + $const100.45
DEBUG 2022-02-14 16:46:35,243 on stmt: steps = call $96load_method.43($102binary_add.46, func=$96load_method.43, args=[Var($102binary_add.46, loop_hafnian_batch_gamma.py:32)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:46:35,243 on stmt: $110load_method.49 = getattr(value=edge_reps, attr=max)
DEBUG 2022-02-14 16:46:35,243 on stmt: $112call_method.50 = call $110load_method.49(func=$110load_method.49, args=[], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:46:35,243 on stmt: max_binom = $112call_method.50 + odd_cutoff
DEBUG 2022-02-14 16:46:35,243 on stmt: $120load_global.53 = global(precompute_binoms: CPUDispatcher(<function precompute_binoms at 0x7f7207b0e280>))
DEBUG 2022-02-14 16:46:35,243 on stmt: binoms = call $120load_global.53(max_binom, func=$120load_global.53, args=[Var(max_binom, loop_hafnian_batch_gamma.py:34)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:46:35,243 on stmt: $130load_attr.57 = getattr(value=D, attr=shape)
DEBUG 2022-02-14 16:46:35,243 on stmt: $const132.58 = const(int, 0)
DEBUG 2022-02-14 16:46:35,243 on stmt: n_D = static_getitem(value=$130load_attr.57, index=0, index_var=$const132.58, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:46:35,243 on stmt: $138load_global.60 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:46:35,243 on stmt: $140load_attr.61 = getattr(value=$138load_global.60, attr=zeros)
DEBUG 2022-02-14 16:46:35,243 on stmt: $const144.63 = const(int, 2)
DEBUG 2022-02-14 16:46:35,243 on stmt: $148binary_multiply.65 = $const144.63 * batch_max
DEBUG 2022-02-14 16:46:35,243 on stmt: $152binary_add.67 = $148binary_multiply.65 + odd_cutoff
DEBUG 2022-02-14 16:46:35,243 on stmt: $const154.68 = const(int, 1)
DEBUG 2022-02-14 16:46:35,243 on stmt: $156binary_add.69 = $152binary_add.67 + $const154.68
DEBUG 2022-02-14 16:46:35,244 on stmt: $158build_tuple.70 = build_tuple(items=[Var(n_D, loop_hafnian_batch_gamma.py:36), Var($156binary_add.69, loop_hafnian_batch_gamma.py:38)])
DEBUG 2022-02-14 16:46:35,244 on stmt: $160load_global.71 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:46:35,244 on stmt: $162load_attr.72 = getattr(value=$160load_global.71, attr=complex128)
DEBUG 2022-02-14 16:46:35,244 on stmt: H_batch = call $140load_attr.61($158build_tuple.70, func=$140load_attr.61, args=[Var($158build_tuple.70, loop_hafnian_batch_gamma.py:38)], kws=[('dtype', Var($162load_attr.72, loop_hafnian_batch_gamma.py:38))], vararg=None, target=None)
DEBUG 2022-02-14 16:46:35,244 on stmt: $170load_global.75 = global(prange: <class 'numba.misc.special.prange'>)
DEBUG 2022-02-14 16:46:35,244 on stmt: $174call_function.77 = call $170load_global.75(steps, func=$170load_global.75, args=[Var(steps, loop_hafnian_batch_gamma.py:32)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:46:35,244 on stmt: $176get_iter.78 = getiter(value=$174call_function.77)
DEBUG 2022-02-14 16:46:35,244 on stmt: $phi178.0 = $176get_iter.78
DEBUG 2022-02-14 16:46:35,244 on stmt: jump 178
DEBUG 2022-02-14 16:46:35,244 ==== SSA block rewrite pass on 178
DEBUG 2022-02-14 16:46:35,244 Running <numba.core.ssa._FixSSAVars object at 0x7f7203a69cd0>
DEBUG 2022-02-14 16:46:35,244 on stmt: $178for_iter.1 = iternext(value=$phi178.0)
DEBUG 2022-02-14 16:46:35,244 on stmt: $178for_iter.2 = pair_first(value=$178for_iter.1)
DEBUG 2022-02-14 16:46:35,244 on stmt: $178for_iter.3 = pair_second(value=$178for_iter.1)
DEBUG 2022-02-14 16:46:35,244 on stmt: $phi182.1 = $178for_iter.2
DEBUG 2022-02-14 16:46:35,244 on stmt: branch $178for_iter.3, 182, 610
DEBUG 2022-02-14 16:46:35,244 ==== SSA block rewrite pass on 182
DEBUG 2022-02-14 16:46:35,244 Running <numba.core.ssa._FixSSAVars object at 0x7f7203a69cd0>
DEBUG 2022-02-14 16:46:35,244 on stmt: j = $phi182.1
DEBUG 2022-02-14 16:46:35,244 on stmt: $184load_global.2 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:46:35,244 on stmt: $186load_attr.3 = getattr(value=$184load_global.2, attr=zeros)
DEBUG 2022-02-14 16:46:35,244 on stmt: $const190.5 = const(int, 2)
DEBUG 2022-02-14 16:46:35,245 on stmt: $194binary_multiply.7 = $const190.5 * batch_max
DEBUG 2022-02-14 16:46:35,245 on stmt: $198binary_add.9 = $194binary_multiply.7 + odd_cutoff
DEBUG 2022-02-14 16:46:35,245 on stmt: $const200.10 = const(int, 1)
DEBUG 2022-02-14 16:46:35,245 on stmt: $202binary_add.11 = $198binary_add.9 + $const200.10
DEBUG 2022-02-14 16:46:35,245 on stmt: $204build_tuple.12 = build_tuple(items=[Var(n_D, loop_hafnian_batch_gamma.py:36), Var($202binary_add.11, loop_hafnian_batch_gamma.py:42)])
DEBUG 2022-02-14 16:46:35,245 on stmt: $206load_global.13 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:46:35,245 on stmt: $208load_attr.14 = getattr(value=$206load_global.13, attr=complex128)
DEBUG 2022-02-14 16:46:35,245 on stmt: Hnew = call $186load_attr.3($204build_tuple.12, func=$186load_attr.3, args=[Var($204build_tuple.12, loop_hafnian_batch_gamma.py:42)], kws=[('dtype', Var($208load_attr.14, loop_hafnian_batch_gamma.py:42))], vararg=None, target=None)
DEBUG 2022-02-14 16:46:35,245 on stmt: $216load_global.17 = global(find_kept_edges: CPUDispatcher(<function find_kept_edges at 0x7f7207b0e700>))
DEBUG 2022-02-14 16:46:35,245 on stmt: kept_edges = call $216load_global.17(j, edge_reps, func=$216load_global.17, args=[Var(j, loop_hafnian_batch_gamma.py:40), Var(edge_reps, loop_hafnian_batch_gamma.py:31)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:46:35,245 on stmt: $228load_method.22 = getattr(value=kept_edges, attr=sum)
DEBUG 2022-02-14 16:46:35,245 on stmt: edges_sum = call $228load_method.22(func=$228load_method.22, args=[], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:46:35,245 on stmt: binom_prod = const(float, 1.0)
DEBUG 2022-02-14 16:46:35,245 on stmt: $238load_global.25 = global(range: <class 'range'>)
DEBUG 2022-02-14 16:46:35,245 on stmt: $const240.26 = const(int, 1)
DEBUG 2022-02-14 16:46:35,245 on stmt: $const244.28 = const(int, 2)
DEBUG 2022-02-14 16:46:35,245 on stmt: $246binary_floor_divide.29 = n // $const244.28
DEBUG 2022-02-14 16:46:35,245 on stmt: $248call_function.30 = call $238load_global.25($const240.26, $246binary_floor_divide.29, func=$238load_global.25, args=[Var($const240.26, loop_hafnian_batch_gamma.py:48), Var($246binary_floor_divide.29, loop_hafnian_batch_gamma.py:48)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:46:35,245 on stmt: $250get_iter.31 = getiter(value=$248call_function.30)
DEBUG 2022-02-14 16:46:35,245 on stmt: $phi252.1 = $250get_iter.31
DEBUG 2022-02-14 16:46:35,246 on stmt: jump 252
DEBUG 2022-02-14 16:46:35,246 ==== SSA block rewrite pass on 252
DEBUG 2022-02-14 16:46:35,246 Running <numba.core.ssa._FixSSAVars object at 0x7f7203a69cd0>
DEBUG 2022-02-14 16:46:35,246 on stmt: $252for_iter.2 = iternext(value=$phi252.1)
DEBUG 2022-02-14 16:46:35,246 on stmt: $252for_iter.3 = pair_first(value=$252for_iter.2)
DEBUG 2022-02-14 16:46:35,246 on stmt: $252for_iter.4 = pair_second(value=$252for_iter.2)
DEBUG 2022-02-14 16:46:35,246 on stmt: $phi254.2 = $252for_iter.3
DEBUG 2022-02-14 16:46:35,246 on stmt: branch $252for_iter.4, 254, 282
DEBUG 2022-02-14 16:46:35,246 ==== SSA block rewrite pass on 254
DEBUG 2022-02-14 16:46:35,246 Running <numba.core.ssa._FixSSAVars object at 0x7f7203a69cd0>
DEBUG 2022-02-14 16:46:35,246 on stmt: i = $phi254.2
DEBUG 2022-02-14 16:46:35,246 on stmt: $264binary_subscr.7 = getitem(value=edge_reps, index=i, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:46:35,246 on stmt: $270binary_subscr.10 = getitem(value=kept_edges, index=i, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:46:35,246 on stmt: $272build_tuple.11 = build_tuple(items=[Var($264binary_subscr.7, loop_hafnian_batch_gamma.py:49), Var($270binary_subscr.10, loop_hafnian_batch_gamma.py:49)])
DEBUG 2022-02-14 16:46:35,246 on stmt: $274binary_subscr.12 = getitem(value=binoms, index=$272build_tuple.11, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:46:35,246 on stmt: $276inplace_multiply.13 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=binom_prod, rhs=$274binary_subscr.12, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:46:35,246 on stmt: binom_prod = $276inplace_multiply.13
DEBUG 2022-02-14 16:46:35,246 on stmt: jump 252
DEBUG 2022-02-14 16:46:35,246 ==== SSA block rewrite pass on 282
DEBUG 2022-02-14 16:46:35,246 Running <numba.core.ssa._FixSSAVars object at 0x7f7203a69cd0>
DEBUG 2022-02-14 16:46:35,246 on stmt: bool284 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:46:35,246 on stmt: $284pred = call bool284(glynn, func=bool284, args=(Var(glynn, loop_hafnian_batch_gamma.py:23),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:46:35,246 on stmt: branch $284pred, 288, 302
DEBUG 2022-02-14 16:46:35,246 ==== SSA block rewrite pass on 288
DEBUG 2022-02-14 16:46:35,247 Running <numba.core.ssa._FixSSAVars object at 0x7f7203a69cd0>
DEBUG 2022-02-14 16:46:35,247 on stmt: $const288.1 = const(int, 2)
DEBUG 2022-02-14 16:46:35,247 on stmt: $292binary_multiply.3 = $const288.1 * kept_edges
DEBUG 2022-02-14 16:46:35,247 on stmt: delta = $292binary_multiply.3 - edge_reps
DEBUG 2022-02-14 16:46:35,247 on stmt: jump 306
DEBUG 2022-02-14 16:46:35,247 ==== SSA block rewrite pass on 302
DEBUG 2022-02-14 16:46:35,247 Running <numba.core.ssa._FixSSAVars object at 0x7f7203a69cd0>
DEBUG 2022-02-14 16:46:35,247 on stmt: delta.1 = kept_edges
DEBUG 2022-02-14 16:46:35,247 on stmt: jump 306
DEBUG 2022-02-14 16:46:35,247 ==== SSA block rewrite pass on 306
DEBUG 2022-02-14 16:46:35,247 Running <numba.core.ssa._FixSSAVars object at 0x7f7203a69cd0>
DEBUG 2022-02-14 16:46:35,247 on stmt: $306load_global.1 = global(get_submatrices: CPUDispatcher(<function get_submatrices at 0x7f7207b0eca0>))
DEBUG 2022-02-14 16:46:35,247 on stmt: $const314.5 = const(int, 0)
DEBUG 2022-02-14 16:46:35,247 on stmt: $const316.6 = const(NoneType, None)
DEBUG 2022-02-14 16:46:35,247 on stmt: $const318.7 = const(NoneType, None)
DEBUG 2022-02-14 16:46:35,247 on stmt: $320build_slice.8 = global(slice: <class 'slice'>)
DEBUG 2022-02-14 16:46:35,247 on stmt: $320build_slice.9 = call $320build_slice.8($const316.6, $const318.7, func=$320build_slice.8, args=(Var($const316.6, loop_hafnian_batch_gamma.py:56), Var($const318.7, loop_hafnian_batch_gamma.py:56)), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:46:35,247 on stmt: $322build_tuple.10 = build_tuple(items=[Var($const314.5, loop_hafnian_batch_gamma.py:56), Var($320build_slice.9, loop_hafnian_batch_gamma.py:56)])
DEBUG 2022-02-14 16:46:35,247 on stmt: $324binary_subscr.11 = static_getitem(value=D, index=(0, slice(None, None, None)), index_var=$322build_tuple.10, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:46:35,247 on stmt: $328call_function.13 = call $306load_global.1(delta, A, $324binary_subscr.11, oddV, func=$306load_global.1, args=[Var(delta, loop_hafnian_batch_gamma.py:52), Var(A, loop_hafnian_batch_gamma.py:23), Var($324binary_subscr.11, loop_hafnian_batch_gamma.py:56), Var(oddV, loop_hafnian_batch_gamma.py:24)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:46:35,247 find_def var='delta' stmt=$328call_function.13 = call $306load_global.1(delta, A, $324binary_subscr.11, oddV, func=$306load_global.1, args=[Var(delta, loop_hafnian_batch_gamma.py:52), Var(A, loop_hafnian_batch_gamma.py:23), Var($324binary_subscr.11, loop_hafnian_batch_gamma.py:56), Var(oddV, loop_hafnian_batch_gamma.py:24)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:46:35,248 find_def_from_top label 306
DEBUG 2022-02-14 16:46:35,248 insert phi node delta.2 = phi(incoming_values=[], incoming_blocks=[]) at 306
DEBUG 2022-02-14 16:46:35,248 find_def_from_bottom label 288
DEBUG 2022-02-14 16:46:35,248 incoming_def delta = $292binary_multiply.3 - edge_reps
DEBUG 2022-02-14 16:46:35,248 find_def_from_bottom label 302
DEBUG 2022-02-14 16:46:35,248 incoming_def delta.1 = kept_edges
DEBUG 2022-02-14 16:46:35,248 replaced with: $328call_function.13 = call $306load_global.1(delta.2, A, $324binary_subscr.11, oddV, func=$306load_global.1, args=[Var(delta.2, loop_hafnian_batch_gamma.py:56), Var(A, loop_hafnian_batch_gamma.py:23), Var($324binary_subscr.11, loop_hafnian_batch_gamma.py:56), Var(oddV, loop_hafnian_batch_gamma.py:24)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:46:35,248 on stmt: $330unpack_sequence.18 = exhaust_iter(value=$328call_function.13, count=4)
DEBUG 2022-02-14 16:46:35,248 on stmt: $330unpack_sequence.14 = static_getitem(value=$330unpack_sequence.18, index=0, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:46:35,248 on stmt: $330unpack_sequence.15 = static_getitem(value=$330unpack_sequence.18, index=1, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:46:35,248 on stmt: $330unpack_sequence.16 = static_getitem(value=$330unpack_sequence.18, index=2, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:46:35,248 on stmt: $330unpack_sequence.17 = static_getitem(value=$330unpack_sequence.18, index=3, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:46:35,248 on stmt: AX_S = $330unpack_sequence.14
DEBUG 2022-02-14 16:46:35,248 on stmt: XD_S = $330unpack_sequence.15
DEBUG 2022-02-14 16:46:35,248 on stmt: D_S = $330unpack_sequence.16
DEBUG 2022-02-14 16:46:35,248 on stmt: oddVX_S = $330unpack_sequence.17
DEBUG 2022-02-14 16:46:35,248 on stmt: $340load_global.19 = global(eigvals: CPUDispatcher(<function eigvals at 0x7f7207a993a0>))
DEBUG 2022-02-14 16:46:35,248 on stmt: E = call $340load_global.19(AX_S, func=$340load_global.19, args=[Var(AX_S, loop_hafnian_batch_gamma.py:56)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:46:35,248 on stmt: $348load_global.22 = global(range: <class 'range'>)
DEBUG 2022-02-14 16:46:35,248 on stmt: $352call_function.24 = call $348load_global.22(n_D, func=$348load_global.22, args=[Var(n_D, loop_hafnian_batch_gamma.py:36)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:46:35,248 on stmt: $354get_iter.25 = getiter(value=$352call_function.24)
DEBUG 2022-02-14 16:46:35,248 on stmt: $phi356.1 = $354get_iter.25
DEBUG 2022-02-14 16:46:35,249 on stmt: jump 356
DEBUG 2022-02-14 16:46:35,249 ==== SSA block rewrite pass on 356
DEBUG 2022-02-14 16:46:35,249 Running <numba.core.ssa._FixSSAVars object at 0x7f7203a69cd0>
DEBUG 2022-02-14 16:46:35,249 on stmt: $356for_iter.2 = iternext(value=$phi356.1)
DEBUG 2022-02-14 16:46:35,249 on stmt: $356for_iter.3 = pair_first(value=$356for_iter.2)
DEBUG 2022-02-14 16:46:35,249 on stmt: $356for_iter.4 = pair_second(value=$356for_iter.2)
DEBUG 2022-02-14 16:46:35,249 on stmt: $phi358.2 = $356for_iter.3
DEBUG 2022-02-14 16:46:35,249 on stmt: branch $356for_iter.4, 358, 600
DEBUG 2022-02-14 16:46:35,249 ==== SSA block rewrite pass on 358
DEBUG 2022-02-14 16:46:35,249 Running <numba.core.ssa._FixSSAVars object at 0x7f7203a69cd0>
DEBUG 2022-02-14 16:46:35,249 on stmt: k = $phi358.2
DEBUG 2022-02-14 16:46:35,249 on stmt: $360load_global.3 = global(get_Dsubmatrices: CPUDispatcher(<function get_Dsubmatrices at 0x7f7207a99160>))
DEBUG 2022-02-14 16:46:35,249 on stmt: $const368.7 = const(NoneType, None)
DEBUG 2022-02-14 16:46:35,249 on stmt: $const370.8 = const(NoneType, None)
DEBUG 2022-02-14 16:46:35,249 on stmt: $372build_slice.9 = global(slice: <class 'slice'>)
DEBUG 2022-02-14 16:46:35,249 on stmt: $372build_slice.10 = call $372build_slice.9($const368.7, $const370.8, func=$372build_slice.9, args=(Var($const368.7, loop_hafnian_batch_gamma.py:61), Var($const370.8, loop_hafnian_batch_gamma.py:61)), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:46:35,249 on stmt: $374build_tuple.11 = build_tuple(items=[Var(k, loop_hafnian_batch_gamma.py:60), Var($372build_slice.10, loop_hafnian_batch_gamma.py:61)])
DEBUG 2022-02-14 16:46:35,249 on stmt: $376binary_subscr.12 = getitem(value=D, index=$374build_tuple.11, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:46:35,249 on stmt: $378call_function.13 = call $360load_global.3(delta, $376binary_subscr.12, func=$360load_global.3, args=[Var(delta, loop_hafnian_batch_gamma.py:52), Var($376binary_subscr.12, loop_hafnian_batch_gamma.py:61)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:46:35,249 find_def var='delta' stmt=$378call_function.13 = call $360load_global.3(delta, $376binary_subscr.12, func=$360load_global.3, args=[Var(delta, loop_hafnian_batch_gamma.py:52), Var($376binary_subscr.12, loop_hafnian_batch_gamma.py:61)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:46:35,249 find_def_from_top label 358
DEBUG 2022-02-14 16:46:35,249 idom 356 from label 358
DEBUG 2022-02-14 16:46:35,250 find_def_from_bottom label 356
DEBUG 2022-02-14 16:46:35,250 find_def_from_top label 356
DEBUG 2022-02-14 16:46:35,250 idom 306 from label 356
DEBUG 2022-02-14 16:46:35,250 find_def_from_bottom label 306
DEBUG 2022-02-14 16:46:35,250 replaced with: $378call_function.13 = call $360load_global.3(delta.2, $376binary_subscr.12, func=$360load_global.3, args=[Var(delta.2, loop_hafnian_batch_gamma.py:56), Var($376binary_subscr.12, loop_hafnian_batch_gamma.py:61)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:46:35,250 on stmt: $380unpack_sequence.16 = exhaust_iter(value=$378call_function.13, count=2)
DEBUG 2022-02-14 16:46:35,250 on stmt: $380unpack_sequence.14 = static_getitem(value=$380unpack_sequence.16, index=0, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:46:35,250 on stmt: $380unpack_sequence.15 = static_getitem(value=$380unpack_sequence.16, index=1, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:46:35,250 on stmt: XD_S = $380unpack_sequence.14
DEBUG 2022-02-14 16:46:35,250 on stmt: D_S = $380unpack_sequence.15
DEBUG 2022-02-14 16:46:35,250 on stmt: $386load_global.17 = global(f_loop: CPUDispatcher(<function f_loop at 0x7f7207b0e940>))
DEBUG 2022-02-14 16:46:35,250 on stmt: f_even = call $386load_global.17(E, AX_S, XD_S, D_S, N_max, func=$386load_global.17, args=[Var(E, loop_hafnian_batch_gamma.py:58), Var(AX_S, loop_hafnian_batch_gamma.py:56), Var(XD_S, loop_hafnian_batch_gamma.py:56), Var(D_S, loop_hafnian_batch_gamma.py:56), Var(N_max, loop_hafnian_batch_gamma.py:29)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:46:35,250 on stmt: $402load_global.24 = global(f_loop_odd: CPUDispatcher(<function f_loop_odd at 0x7f7207b0eaf0>))
DEBUG 2022-02-14 16:46:35,250 on stmt: $418binary_subscr.32 = getitem(value=oddloop, index=k, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:46:35,250 on stmt: f_odd = call $402load_global.24(E, AX_S, XD_S, D_S, N_max, $418binary_subscr.32, oddVX_S, func=$402load_global.24, args=[Var(E, loop_hafnian_batch_gamma.py:58), Var(AX_S, loop_hafnian_batch_gamma.py:56), Var(XD_S, loop_hafnian_batch_gamma.py:56), Var(D_S, loop_hafnian_batch_gamma.py:56), Var(N_max, loop_hafnian_batch_gamma.py:29), Var($418binary_subscr.32, loop_hafnian_batch_gamma.py:64), Var(oddVX_S, loop_hafnian_batch_gamma.py:56)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:46:35,250 on stmt: $426load_global.35 = global(range: <class 'range'>)
DEBUG 2022-02-14 16:46:35,251 on stmt: $const428.36 = const(int, 2)
DEBUG 2022-02-14 16:46:35,251 on stmt: $const432.38 = const(int, 0)
DEBUG 2022-02-14 16:46:35,251 on stmt: $434binary_subscr.39 = static_getitem(value=kept_edges, index=0, index_var=$const432.38, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:46:35,251 on stmt: $436binary_multiply.40 = $const428.36 * $434binary_subscr.39
DEBUG 2022-02-14 16:46:35,251 on stmt: $const438.41 = const(int, 2)
DEBUG 2022-02-14 16:46:35,251 on stmt: $442binary_multiply.43 = $const438.41 * batch_max
DEBUG 2022-02-14 16:46:35,251 on stmt: $446binary_add.45 = $442binary_multiply.43 + odd_cutoff
DEBUG 2022-02-14 16:46:35,251 on stmt: $const448.46 = const(int, 1)
DEBUG 2022-02-14 16:46:35,251 on stmt: $450binary_add.47 = $446binary_add.45 + $const448.46
DEBUG 2022-02-14 16:46:35,251 on stmt: $452call_function.48 = call $426load_global.35($436binary_multiply.40, $450binary_add.47, func=$426load_global.35, args=[Var($436binary_multiply.40, loop_hafnian_batch_gamma.py:66), Var($450binary_add.47, loop_hafnian_batch_gamma.py:66)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:46:35,251 on stmt: $454get_iter.49 = getiter(value=$452call_function.48)
DEBUG 2022-02-14 16:46:35,251 on stmt: $phi456.2 = $454get_iter.49
DEBUG 2022-02-14 16:46:35,251 on stmt: jump 456
DEBUG 2022-02-14 16:46:35,251 ==== SSA block rewrite pass on 456
DEBUG 2022-02-14 16:46:35,251 Running <numba.core.ssa._FixSSAVars object at 0x7f7203a69cd0>
DEBUG 2022-02-14 16:46:35,251 on stmt: $456for_iter.3 = iternext(value=$phi456.2)
DEBUG 2022-02-14 16:46:35,251 on stmt: $456for_iter.4 = pair_first(value=$456for_iter.3)
DEBUG 2022-02-14 16:46:35,251 on stmt: $456for_iter.5 = pair_second(value=$456for_iter.3)
DEBUG 2022-02-14 16:46:35,251 on stmt: $phi458.3 = $456for_iter.4
DEBUG 2022-02-14 16:46:35,251 on stmt: branch $456for_iter.5, 458, 596
DEBUG 2022-02-14 16:46:35,251 ==== SSA block rewrite pass on 458
DEBUG 2022-02-14 16:46:35,251 Running <numba.core.ssa._FixSSAVars object at 0x7f7203a69cd0>
DEBUG 2022-02-14 16:46:35,252 on stmt: N_det = $phi458.3
DEBUG 2022-02-14 16:46:35,252 on stmt: N = N_fixed + N_det
DEBUG 2022-02-14 16:46:35,252 on stmt: $const468.7 = const(float, -1.0)
DEBUG 2022-02-14 16:46:35,252 on stmt: $const472.9 = const(int, 2)
DEBUG 2022-02-14 16:46:35,252 on stmt: $474binary_floor_divide.10 = N // $const472.9
DEBUG 2022-02-14 16:46:35,252 on stmt: $478binary_subtract.12 = $474binary_floor_divide.10 - edges_sum
DEBUG 2022-02-14 16:46:35,252 on stmt: plus_minus = $const468.7 ** $478binary_subtract.12
DEBUG 2022-02-14 16:46:35,252 on stmt: $const488.16 = const(int, 2)
DEBUG 2022-02-14 16:46:35,252 on stmt: $490binary_floor_divide.17 = N_det // $const488.16
DEBUG 2022-02-14 16:46:35,252 on stmt: $const494.19 = const(int, 0)
DEBUG 2022-02-14 16:46:35,252 on stmt: $496binary_subscr.20 = static_getitem(value=kept_edges, index=0, index_var=$const494.19, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:46:35,252 on stmt: $498build_tuple.21 = build_tuple(items=[Var($490binary_floor_divide.17, loop_hafnian_batch_gamma.py:70), Var($496binary_subscr.20, loop_hafnian_batch_gamma.py:70)])
DEBUG 2022-02-14 16:46:35,252 on stmt: $500binary_subscr.22 = getitem(value=binoms, index=$498build_tuple.21, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:46:35,252 on stmt: n_det_binom_prod = $500binary_subscr.22 * binom_prod
DEBUG 2022-02-14 16:46:35,252 on stmt: $const510.26 = const(int, 2)
DEBUG 2022-02-14 16:46:35,252 on stmt: $512binary_modulo.27 = N_det % $const510.26
DEBUG 2022-02-14 16:46:35,252 on stmt: $const514.28 = const(int, 0)
DEBUG 2022-02-14 16:46:35,252 on stmt: $516compare_op.29 = $512binary_modulo.27 == $const514.28
DEBUG 2022-02-14 16:46:35,252 on stmt: bool518 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:46:35,252 on stmt: $518pred = call bool518($516compare_op.29, func=bool518, args=(Var($516compare_op.29, loop_hafnian_batch_gamma.py:72),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:46:35,252 on stmt: branch $518pred, 522, 560
DEBUG 2022-02-14 16:46:35,252 ==== SSA block rewrite pass on 522
DEBUG 2022-02-14 16:46:35,252 Running <numba.core.ssa._FixSSAVars object at 0x7f7203a69cd0>
DEBUG 2022-02-14 16:46:35,253 on stmt: $528build_tuple.6 = build_tuple(items=[Var(k, loop_hafnian_batch_gamma.py:60), Var(N_det, loop_hafnian_batch_gamma.py:66)])
DEBUG 2022-02-14 16:46:35,253 on stmt: $532binary_subscr.9 = getitem(value=Hnew, index=$528build_tuple.6, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:46:35,253 on stmt: $538binary_multiply.12 = n_det_binom_prod * plus_minus
DEBUG 2022-02-14 16:46:35,253 on stmt: $const544.15 = const(int, 2)
DEBUG 2022-02-14 16:46:35,253 on stmt: $546binary_floor_divide.16 = N // $const544.15
DEBUG 2022-02-14 16:46:35,253 on stmt: $548binary_subscr.17 = getitem(value=f_even, index=$546binary_floor_divide.16, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:46:35,253 on stmt: $550binary_multiply.18 = $538binary_multiply.12 * $548binary_subscr.17
DEBUG 2022-02-14 16:46:35,253 on stmt: $552inplace_add.19 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$532binary_subscr.9, rhs=$550binary_multiply.18, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:46:35,253 on stmt: Hnew[$528build_tuple.6] = $552inplace_add.19
DEBUG 2022-02-14 16:46:35,253 on stmt: jump 592
DEBUG 2022-02-14 16:46:35,253 ==== SSA block rewrite pass on 560
DEBUG 2022-02-14 16:46:35,253 Running <numba.core.ssa._FixSSAVars object at 0x7f7203a69cd0>
DEBUG 2022-02-14 16:46:35,253 on stmt: $566build_tuple.6 = build_tuple(items=[Var(k, loop_hafnian_batch_gamma.py:60), Var(N_det, loop_hafnian_batch_gamma.py:66)])
DEBUG 2022-02-14 16:46:35,253 on stmt: $570binary_subscr.9 = getitem(value=Hnew, index=$566build_tuple.6, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:46:35,253 on stmt: $576binary_multiply.12 = n_det_binom_prod * plus_minus
DEBUG 2022-02-14 16:46:35,253 on stmt: $582binary_subscr.15 = getitem(value=f_odd, index=N, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:46:35,253 on stmt: $584binary_multiply.16 = $576binary_multiply.12 * $582binary_subscr.15
DEBUG 2022-02-14 16:46:35,253 on stmt: $586inplace_add.17 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$570binary_subscr.9, rhs=$584binary_multiply.16, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:46:35,253 on stmt: Hnew[$566build_tuple.6] = $586inplace_add.17
DEBUG 2022-02-14 16:46:35,253 on stmt: jump 592
DEBUG 2022-02-14 16:46:35,253 ==== SSA block rewrite pass on 592
DEBUG 2022-02-14 16:46:35,253 Running <numba.core.ssa._FixSSAVars object at 0x7f7203a69cd0>
DEBUG 2022-02-14 16:46:35,254 on stmt: jump 456
DEBUG 2022-02-14 16:46:35,254 ==== SSA block rewrite pass on 596
DEBUG 2022-02-14 16:46:35,254 Running <numba.core.ssa._FixSSAVars object at 0x7f7203a69cd0>
DEBUG 2022-02-14 16:46:35,254 on stmt: jump 356
DEBUG 2022-02-14 16:46:35,254 ==== SSA block rewrite pass on 600
DEBUG 2022-02-14 16:46:35,254 Running <numba.core.ssa._FixSSAVars object at 0x7f7203a69cd0>
DEBUG 2022-02-14 16:46:35,254 on stmt: $604inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=H_batch, rhs=Hnew, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:46:35,254 on stmt: H_batch = $604inplace_add.3
DEBUG 2022-02-14 16:46:35,254 on stmt: jump 178
DEBUG 2022-02-14 16:46:35,254 ==== SSA block rewrite pass on 610
DEBUG 2022-02-14 16:46:35,254 Running <numba.core.ssa._FixSSAVars object at 0x7f7203a69cd0>
DEBUG 2022-02-14 16:46:35,254 on stmt: bool612 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:46:35,254 on stmt: $612pred = call bool612(glynn, func=bool612, args=(Var(glynn, loop_hafnian_batch_gamma.py:23),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:46:35,254 on stmt: branch $612pred, 616, 678
DEBUG 2022-02-14 16:46:35,254 ==== SSA block rewrite pass on 616
DEBUG 2022-02-14 16:46:35,254 Running <numba.core.ssa._FixSSAVars object at 0x7f7203a69cd0>
DEBUG 2022-02-14 16:46:35,254 on stmt: $616load_global.0 = global(range: <class 'range'>)
DEBUG 2022-02-14 16:46:35,254 on stmt: $620load_attr.2 = getattr(value=H_batch, attr=shape)
DEBUG 2022-02-14 16:46:35,254 on stmt: $const622.3 = const(int, 1)
DEBUG 2022-02-14 16:46:35,254 on stmt: $624binary_subscr.4 = static_getitem(value=$620load_attr.2, index=1, index_var=$const622.3, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:46:35,254 on stmt: $626call_function.5 = call $616load_global.0($624binary_subscr.4, func=$616load_global.0, args=[Var($624binary_subscr.4, loop_hafnian_batch_gamma.py:79)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:46:35,254 on stmt: $628get_iter.6 = getiter(value=$626call_function.5)
DEBUG 2022-02-14 16:46:35,254 on stmt: $phi630.0 = $628get_iter.6
DEBUG 2022-02-14 16:46:35,254 on stmt: jump 630
DEBUG 2022-02-14 16:46:35,255 ==== SSA block rewrite pass on 630
DEBUG 2022-02-14 16:46:35,255 Running <numba.core.ssa._FixSSAVars object at 0x7f7203a69cd0>
DEBUG 2022-02-14 16:46:35,255 on stmt: $630for_iter.1 = iternext(value=$phi630.0)
DEBUG 2022-02-14 16:46:35,255 on stmt: $630for_iter.2 = pair_first(value=$630for_iter.1)
DEBUG 2022-02-14 16:46:35,255 on stmt: $630for_iter.3 = pair_second(value=$630for_iter.1)
DEBUG 2022-02-14 16:46:35,255 on stmt: $phi632.1 = $630for_iter.2
DEBUG 2022-02-14 16:46:35,255 on stmt: branch $630for_iter.3, 632, 678
DEBUG 2022-02-14 16:46:35,255 ==== SSA block rewrite pass on 632
DEBUG 2022-02-14 16:46:35,255 Running <numba.core.ssa._FixSSAVars object at 0x7f7203a69cd0>
DEBUG 2022-02-14 16:46:35,255 on stmt: j = $phi632.1
DEBUG 2022-02-14 16:46:35,255 on stmt: x = N_fixed + j
DEBUG 2022-02-14 16:46:35,255 on stmt: $const644.6 = const(NoneType, None)
DEBUG 2022-02-14 16:46:35,255 on stmt: $const646.7 = const(NoneType, None)
DEBUG 2022-02-14 16:46:35,255 on stmt: $648build_slice.8 = global(slice: <class 'slice'>)
DEBUG 2022-02-14 16:46:35,255 on stmt: $648build_slice.9 = call $648build_slice.8($const644.6, $const646.7, func=$648build_slice.8, args=(Var($const644.6, loop_hafnian_batch_gamma.py:81), Var($const646.7, loop_hafnian_batch_gamma.py:81)), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:46:35,255 on stmt: $652build_tuple.11 = build_tuple(items=[Var($648build_slice.9, loop_hafnian_batch_gamma.py:81), Var(j, loop_hafnian_batch_gamma.py:40)])
DEBUG 2022-02-14 16:46:35,255 on stmt: $656binary_subscr.14 = getitem(value=H_batch, index=$652build_tuple.11, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:46:35,255 on stmt: $const658.15 = const(float, 0.5)
DEBUG 2022-02-14 16:46:35,255 on stmt: $const662.17 = const(int, 2)
DEBUG 2022-02-14 16:46:35,255 on stmt: $664binary_floor_divide.18 = x // $const662.17
DEBUG 2022-02-14 16:46:35,255 on stmt: $666binary_power.19 = $const658.15 ** $664binary_floor_divide.18
DEBUG 2022-02-14 16:46:35,255 on stmt: $668inplace_multiply.20 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=$656binary_subscr.14, rhs=$666binary_power.19, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:46:35,256 on stmt: H_batch[$652build_tuple.11] = $668inplace_multiply.20
DEBUG 2022-02-14 16:46:35,256 on stmt: jump 630
DEBUG 2022-02-14 16:46:35,256 ==== SSA block rewrite pass on 678
DEBUG 2022-02-14 16:46:35,256 Running <numba.core.ssa._FixSSAVars object at 0x7f7203a69cd0>
DEBUG 2022-02-14 16:46:35,256 on stmt: $680return_value.1 = cast(value=H_batch)
DEBUG 2022-02-14 16:46:35,256 on stmt: return $680return_value.1
DEBUG 2022-02-14 16:46:35,256 Fix SSA violator on var j
DEBUG 2022-02-14 16:46:35,256 ==== SSA block rewrite pass on 0
DEBUG 2022-02-14 16:46:35,256 Running <numba.core.ssa._FreshVarHandler object at 0x7f72073bce20>
DEBUG 2022-02-14 16:46:35,256 on stmt: A = arg(0, name=A)
DEBUG 2022-02-14 16:46:35,256 on stmt: D = arg(1, name=D)
DEBUG 2022-02-14 16:46:35,256 on stmt: fixed_edge_reps = arg(2, name=fixed_edge_reps)
DEBUG 2022-02-14 16:46:35,256 on stmt: batch_max = arg(3, name=batch_max)
DEBUG 2022-02-14 16:46:35,256 on stmt: odd_cutoff = arg(4, name=odd_cutoff)
DEBUG 2022-02-14 16:46:35,256 on stmt: glynn = arg(5, name=glynn)
DEBUG 2022-02-14 16:46:35,256 on stmt: $const4.1 = const(NoneType, None)
DEBUG 2022-02-14 16:46:35,256 on stmt: $const6.2 = const(NoneType, None)
DEBUG 2022-02-14 16:46:35,256 on stmt: $8build_slice.3 = global(slice: <class 'slice'>)
DEBUG 2022-02-14 16:46:35,256 on stmt: $8build_slice.4 = call $8build_slice.3($const4.1, $const6.2, func=$8build_slice.3, args=(Var($const4.1, loop_hafnian_batch_gamma.py:23), Var($const6.2, loop_hafnian_batch_gamma.py:23)), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:46:35,256 on stmt: $const10.5 = const(int, 0)
DEBUG 2022-02-14 16:46:35,256 on stmt: $12build_tuple.6 = build_tuple(items=[Var($8build_slice.4, loop_hafnian_batch_gamma.py:23), Var($const10.5, loop_hafnian_batch_gamma.py:23)])
DEBUG 2022-02-14 16:46:35,256 on stmt: oddloop = static_getitem(value=D, index=(slice(None, None, None), 0), index_var=$12build_tuple.6, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:46:35,256 on stmt: $const20.9 = const(int, 0)
DEBUG 2022-02-14 16:46:35,256 on stmt: $const22.10 = const(NoneType, None)
DEBUG 2022-02-14 16:46:35,256 on stmt: $const24.11 = const(NoneType, None)
DEBUG 2022-02-14 16:46:35,256 on stmt: $26build_slice.12 = global(slice: <class 'slice'>)
DEBUG 2022-02-14 16:46:35,256 on stmt: $26build_slice.13 = call $26build_slice.12($const22.10, $const24.11, func=$26build_slice.12, args=(Var($const22.10, loop_hafnian_batch_gamma.py:24), Var($const24.11, loop_hafnian_batch_gamma.py:24)), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:46:35,257 on stmt: $28build_tuple.14 = build_tuple(items=[Var($const20.9, loop_hafnian_batch_gamma.py:24), Var($26build_slice.13, loop_hafnian_batch_gamma.py:24)])
DEBUG 2022-02-14 16:46:35,257 on stmt: oddV = static_getitem(value=A, index=(0, slice(None, None, None)), index_var=$28build_tuple.14, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:46:35,257 on stmt: $36load_attr.17 = getattr(value=A, attr=shape)
DEBUG 2022-02-14 16:46:35,257 on stmt: $const38.18 = const(int, 0)
DEBUG 2022-02-14 16:46:35,257 on stmt: n = static_getitem(value=$36load_attr.17, index=0, index_var=$const38.18, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:46:35,257 on stmt: $const44.20 = const(int, 2)
DEBUG 2022-02-14 16:46:35,257 on stmt: $48load_method.22 = getattr(value=fixed_edge_reps, attr=sum)
DEBUG 2022-02-14 16:46:35,257 on stmt: $50call_method.23 = call $48load_method.22(func=$48load_method.22, args=[], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:46:35,257 on stmt: N_fixed = $const44.20 * $50call_method.23
DEBUG 2022-02-14 16:46:35,257 on stmt: $const58.26 = const(int, 2)
DEBUG 2022-02-14 16:46:35,257 on stmt: $62binary_multiply.28 = $const58.26 * batch_max
DEBUG 2022-02-14 16:46:35,257 on stmt: $64binary_add.29 = N_fixed + $62binary_multiply.28
DEBUG 2022-02-14 16:46:35,257 on stmt: N_max = $64binary_add.29 + odd_cutoff
DEBUG 2022-02-14 16:46:35,257 on stmt: $72load_global.32 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:46:35,257 on stmt: $74load_method.33 = getattr(value=$72load_global.32, attr=concatenate)
DEBUG 2022-02-14 16:46:35,257 on stmt: $76load_global.34 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:46:35,257 on stmt: $78load_method.35 = getattr(value=$76load_global.34, attr=array)
DEBUG 2022-02-14 16:46:35,257 on stmt: $82build_list.37 = build_list(items=[Var(batch_max, loop_hafnian_batch_gamma.py:23)])
DEBUG 2022-02-14 16:46:35,257 on stmt: $84call_method.38 = call $78load_method.35($82build_list.37, func=$78load_method.35, args=[Var($82build_list.37, loop_hafnian_batch_gamma.py:31)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:46:35,257 on stmt: $88build_tuple.40 = build_tuple(items=[Var($84call_method.38, loop_hafnian_batch_gamma.py:31), Var(fixed_edge_reps, loop_hafnian_batch_gamma.py:23)])
DEBUG 2022-02-14 16:46:35,257 on stmt: edge_reps = call $74load_method.33($88build_tuple.40, func=$74load_method.33, args=[Var($88build_tuple.40, loop_hafnian_batch_gamma.py:31)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:46:35,257 on stmt: $94load_global.42 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:46:35,257 on stmt: $96load_method.43 = getattr(value=$94load_global.42, attr=prod)
DEBUG 2022-02-14 16:46:35,257 on stmt: $const100.45 = const(int, 1)
DEBUG 2022-02-14 16:46:35,258 on stmt: $102binary_add.46 = edge_reps + $const100.45
DEBUG 2022-02-14 16:46:35,258 on stmt: steps = call $96load_method.43($102binary_add.46, func=$96load_method.43, args=[Var($102binary_add.46, loop_hafnian_batch_gamma.py:32)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:46:35,258 on stmt: $110load_method.49 = getattr(value=edge_reps, attr=max)
DEBUG 2022-02-14 16:46:35,258 on stmt: $112call_method.50 = call $110load_method.49(func=$110load_method.49, args=[], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:46:35,258 on stmt: max_binom = $112call_method.50 + odd_cutoff
DEBUG 2022-02-14 16:46:35,258 on stmt: $120load_global.53 = global(precompute_binoms: CPUDispatcher(<function precompute_binoms at 0x7f7207b0e280>))
DEBUG 2022-02-14 16:46:35,258 on stmt: binoms = call $120load_global.53(max_binom, func=$120load_global.53, args=[Var(max_binom, loop_hafnian_batch_gamma.py:34)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:46:35,258 on stmt: $130load_attr.57 = getattr(value=D, attr=shape)
DEBUG 2022-02-14 16:46:35,258 on stmt: $const132.58 = const(int, 0)
DEBUG 2022-02-14 16:46:35,258 on stmt: n_D = static_getitem(value=$130load_attr.57, index=0, index_var=$const132.58, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:46:35,258 on stmt: $138load_global.60 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:46:35,258 on stmt: $140load_attr.61 = getattr(value=$138load_global.60, attr=zeros)
DEBUG 2022-02-14 16:46:35,258 on stmt: $const144.63 = const(int, 2)
DEBUG 2022-02-14 16:46:35,258 on stmt: $148binary_multiply.65 = $const144.63 * batch_max
DEBUG 2022-02-14 16:46:35,258 on stmt: $152binary_add.67 = $148binary_multiply.65 + odd_cutoff
DEBUG 2022-02-14 16:46:35,258 on stmt: $const154.68 = const(int, 1)
DEBUG 2022-02-14 16:46:35,258 on stmt: $156binary_add.69 = $152binary_add.67 + $const154.68
DEBUG 2022-02-14 16:46:35,258 on stmt: $158build_tuple.70 = build_tuple(items=[Var(n_D, loop_hafnian_batch_gamma.py:36), Var($156binary_add.69, loop_hafnian_batch_gamma.py:38)])
DEBUG 2022-02-14 16:46:35,258 on stmt: $160load_global.71 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:46:35,258 on stmt: $162load_attr.72 = getattr(value=$160load_global.71, attr=complex128)
DEBUG 2022-02-14 16:46:35,258 on stmt: H_batch = call $140load_attr.61($158build_tuple.70, func=$140load_attr.61, args=[Var($158build_tuple.70, loop_hafnian_batch_gamma.py:38)], kws=[('dtype', Var($162load_attr.72, loop_hafnian_batch_gamma.py:38))], vararg=None, target=None)
DEBUG 2022-02-14 16:46:35,258 on stmt: $170load_global.75 = global(prange: <class 'numba.misc.special.prange'>)
DEBUG 2022-02-14 16:46:35,258 on stmt: $174call_function.77 = call $170load_global.75(steps, func=$170load_global.75, args=[Var(steps, loop_hafnian_batch_gamma.py:32)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:46:35,258 on stmt: $176get_iter.78 = getiter(value=$174call_function.77)
DEBUG 2022-02-14 16:46:35,259 on stmt: $phi178.0 = $176get_iter.78
DEBUG 2022-02-14 16:46:35,259 on stmt: jump 178
DEBUG 2022-02-14 16:46:35,259 ==== SSA block rewrite pass on 178
DEBUG 2022-02-14 16:46:35,259 Running <numba.core.ssa._FreshVarHandler object at 0x7f72073bce20>
DEBUG 2022-02-14 16:46:35,259 on stmt: $178for_iter.1 = iternext(value=$phi178.0)
DEBUG 2022-02-14 16:46:35,259 on stmt: $178for_iter.2 = pair_first(value=$178for_iter.1)
DEBUG 2022-02-14 16:46:35,259 on stmt: $178for_iter.3 = pair_second(value=$178for_iter.1)
DEBUG 2022-02-14 16:46:35,259 on stmt: $phi182.1 = $178for_iter.2
DEBUG 2022-02-14 16:46:35,259 on stmt: branch $178for_iter.3, 182, 610
DEBUG 2022-02-14 16:46:35,259 ==== SSA block rewrite pass on 182
DEBUG 2022-02-14 16:46:35,259 Running <numba.core.ssa._FreshVarHandler object at 0x7f72073bce20>
DEBUG 2022-02-14 16:46:35,259 on stmt: j = $phi182.1
DEBUG 2022-02-14 16:46:35,259 first assign: j
DEBUG 2022-02-14 16:46:35,259 replaced with: j = $phi182.1
DEBUG 2022-02-14 16:46:35,259 on stmt: $184load_global.2 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:46:35,259 on stmt: $186load_attr.3 = getattr(value=$184load_global.2, attr=zeros)
DEBUG 2022-02-14 16:46:35,259 on stmt: $const190.5 = const(int, 2)
DEBUG 2022-02-14 16:46:35,259 on stmt: $194binary_multiply.7 = $const190.5 * batch_max
DEBUG 2022-02-14 16:46:35,259 on stmt: $198binary_add.9 = $194binary_multiply.7 + odd_cutoff
DEBUG 2022-02-14 16:46:35,259 on stmt: $const200.10 = const(int, 1)
DEBUG 2022-02-14 16:46:35,259 on stmt: $202binary_add.11 = $198binary_add.9 + $const200.10
DEBUG 2022-02-14 16:46:35,259 on stmt: $204build_tuple.12 = build_tuple(items=[Var(n_D, loop_hafnian_batch_gamma.py:36), Var($202binary_add.11, loop_hafnian_batch_gamma.py:42)])
DEBUG 2022-02-14 16:46:35,259 on stmt: $206load_global.13 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:46:35,259 on stmt: $208load_attr.14 = getattr(value=$206load_global.13, attr=complex128)
DEBUG 2022-02-14 16:46:35,259 on stmt: Hnew = call $186load_attr.3($204build_tuple.12, func=$186load_attr.3, args=[Var($204build_tuple.12, loop_hafnian_batch_gamma.py:42)], kws=[('dtype', Var($208load_attr.14, loop_hafnian_batch_gamma.py:42))], vararg=None, target=None)
DEBUG 2022-02-14 16:46:35,259 on stmt: $216load_global.17 = global(find_kept_edges: CPUDispatcher(<function find_kept_edges at 0x7f7207b0e700>))
DEBUG 2022-02-14 16:46:35,260 on stmt: kept_edges = call $216load_global.17(j, edge_reps, func=$216load_global.17, args=[Var(j, loop_hafnian_batch_gamma.py:40), Var(edge_reps, loop_hafnian_batch_gamma.py:31)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:46:35,260 on stmt: $228load_method.22 = getattr(value=kept_edges, attr=sum)
DEBUG 2022-02-14 16:46:35,260 on stmt: edges_sum = call $228load_method.22(func=$228load_method.22, args=[], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:46:35,260 on stmt: binom_prod = const(float, 1.0)
DEBUG 2022-02-14 16:46:35,260 on stmt: $238load_global.25 = global(range: <class 'range'>)
DEBUG 2022-02-14 16:46:35,260 on stmt: $const240.26 = const(int, 1)
DEBUG 2022-02-14 16:46:35,260 on stmt: $const244.28 = const(int, 2)
DEBUG 2022-02-14 16:46:35,260 on stmt: $246binary_floor_divide.29 = n // $const244.28
DEBUG 2022-02-14 16:46:35,260 on stmt: $248call_function.30 = call $238load_global.25($const240.26, $246binary_floor_divide.29, func=$238load_global.25, args=[Var($const240.26, loop_hafnian_batch_gamma.py:48), Var($246binary_floor_divide.29, loop_hafnian_batch_gamma.py:48)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:46:35,260 on stmt: $250get_iter.31 = getiter(value=$248call_function.30)
DEBUG 2022-02-14 16:46:35,260 on stmt: $phi252.1 = $250get_iter.31
DEBUG 2022-02-14 16:46:35,260 on stmt: jump 252
DEBUG 2022-02-14 16:46:35,260 ==== SSA block rewrite pass on 252
DEBUG 2022-02-14 16:46:35,260 Running <numba.core.ssa._FreshVarHandler object at 0x7f72073bce20>
DEBUG 2022-02-14 16:46:35,260 on stmt: $252for_iter.2 = iternext(value=$phi252.1)
DEBUG 2022-02-14 16:46:35,260 on stmt: $252for_iter.3 = pair_first(value=$252for_iter.2)
DEBUG 2022-02-14 16:46:35,260 on stmt: $252for_iter.4 = pair_second(value=$252for_iter.2)
DEBUG 2022-02-14 16:46:35,260 on stmt: $phi254.2 = $252for_iter.3
DEBUG 2022-02-14 16:46:35,260 on stmt: branch $252for_iter.4, 254, 282
DEBUG 2022-02-14 16:46:35,260 ==== SSA block rewrite pass on 254
DEBUG 2022-02-14 16:46:35,260 Running <numba.core.ssa._FreshVarHandler object at 0x7f72073bce20>
DEBUG 2022-02-14 16:46:35,260 on stmt: i = $phi254.2
DEBUG 2022-02-14 16:46:35,260 on stmt: $264binary_subscr.7 = getitem(value=edge_reps, index=i, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:46:35,260 on stmt: $270binary_subscr.10 = getitem(value=kept_edges, index=i, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:46:35,260 on stmt: $272build_tuple.11 = build_tuple(items=[Var($264binary_subscr.7, loop_hafnian_batch_gamma.py:49), Var($270binary_subscr.10, loop_hafnian_batch_gamma.py:49)])
DEBUG 2022-02-14 16:46:35,260 on stmt: $274binary_subscr.12 = getitem(value=binoms, index=$272build_tuple.11, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:46:35,261 on stmt: $276inplace_multiply.13 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=binom_prod, rhs=$274binary_subscr.12, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:46:35,261 on stmt: binom_prod = $276inplace_multiply.13
DEBUG 2022-02-14 16:46:35,261 on stmt: jump 252
DEBUG 2022-02-14 16:46:35,261 ==== SSA block rewrite pass on 282
DEBUG 2022-02-14 16:46:35,261 Running <numba.core.ssa._FreshVarHandler object at 0x7f72073bce20>
DEBUG 2022-02-14 16:46:35,261 on stmt: bool284 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:46:35,261 on stmt: $284pred = call bool284(glynn, func=bool284, args=(Var(glynn, loop_hafnian_batch_gamma.py:23),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:46:35,261 on stmt: branch $284pred, 288, 302
DEBUG 2022-02-14 16:46:35,261 ==== SSA block rewrite pass on 288
DEBUG 2022-02-14 16:46:35,261 Running <numba.core.ssa._FreshVarHandler object at 0x7f72073bce20>
DEBUG 2022-02-14 16:46:35,261 on stmt: $const288.1 = const(int, 2)
DEBUG 2022-02-14 16:46:35,261 on stmt: $292binary_multiply.3 = $const288.1 * kept_edges
DEBUG 2022-02-14 16:46:35,261 on stmt: delta = $292binary_multiply.3 - edge_reps
DEBUG 2022-02-14 16:46:35,261 on stmt: jump 306
DEBUG 2022-02-14 16:46:35,261 ==== SSA block rewrite pass on 302
DEBUG 2022-02-14 16:46:35,261 Running <numba.core.ssa._FreshVarHandler object at 0x7f72073bce20>
DEBUG 2022-02-14 16:46:35,261 on stmt: delta.1 = kept_edges
DEBUG 2022-02-14 16:46:35,261 on stmt: jump 306
DEBUG 2022-02-14 16:46:35,261 ==== SSA block rewrite pass on 306
DEBUG 2022-02-14 16:46:35,261 Running <numba.core.ssa._FreshVarHandler object at 0x7f72073bce20>
DEBUG 2022-02-14 16:46:35,261 on stmt: delta.2 = phi(incoming_values=[Var(delta, loop_hafnian_batch_gamma.py:52), Var(delta.1, loop_hafnian_batch_gamma.py:54)], incoming_blocks=[288, 302])
DEBUG 2022-02-14 16:46:35,261 on stmt: $306load_global.1 = global(get_submatrices: CPUDispatcher(<function get_submatrices at 0x7f7207b0eca0>))
DEBUG 2022-02-14 16:46:35,261 on stmt: $const314.5 = const(int, 0)
DEBUG 2022-02-14 16:46:35,261 on stmt: $const316.6 = const(NoneType, None)
DEBUG 2022-02-14 16:46:35,261 on stmt: $const318.7 = const(NoneType, None)
DEBUG 2022-02-14 16:46:35,261 on stmt: $320build_slice.8 = global(slice: <class 'slice'>)
DEBUG 2022-02-14 16:46:35,261 on stmt: $320build_slice.9 = call $320build_slice.8($const316.6, $const318.7, func=$320build_slice.8, args=(Var($const316.6, loop_hafnian_batch_gamma.py:56), Var($const318.7, loop_hafnian_batch_gamma.py:56)), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:46:35,261 on stmt: $322build_tuple.10 = build_tuple(items=[Var($const314.5, loop_hafnian_batch_gamma.py:56), Var($320build_slice.9, loop_hafnian_batch_gamma.py:56)])
DEBUG 2022-02-14 16:46:35,262 on stmt: $324binary_subscr.11 = static_getitem(value=D, index=(0, slice(None, None, None)), index_var=$322build_tuple.10, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:46:35,262 on stmt: $328call_function.13 = call $306load_global.1(delta.2, A, $324binary_subscr.11, oddV, func=$306load_global.1, args=[Var(delta.2, loop_hafnian_batch_gamma.py:56), Var(A, loop_hafnian_batch_gamma.py:23), Var($324binary_subscr.11, loop_hafnian_batch_gamma.py:56), Var(oddV, loop_hafnian_batch_gamma.py:24)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:46:35,262 on stmt: $330unpack_sequence.18 = exhaust_iter(value=$328call_function.13, count=4)
DEBUG 2022-02-14 16:46:35,262 on stmt: $330unpack_sequence.14 = static_getitem(value=$330unpack_sequence.18, index=0, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:46:35,262 on stmt: $330unpack_sequence.15 = static_getitem(value=$330unpack_sequence.18, index=1, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:46:35,262 on stmt: $330unpack_sequence.16 = static_getitem(value=$330unpack_sequence.18, index=2, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:46:35,262 on stmt: $330unpack_sequence.17 = static_getitem(value=$330unpack_sequence.18, index=3, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:46:35,262 on stmt: AX_S = $330unpack_sequence.14
DEBUG 2022-02-14 16:46:35,262 on stmt: XD_S = $330unpack_sequence.15
DEBUG 2022-02-14 16:46:35,262 on stmt: D_S = $330unpack_sequence.16
DEBUG 2022-02-14 16:46:35,262 on stmt: oddVX_S = $330unpack_sequence.17
DEBUG 2022-02-14 16:46:35,262 on stmt: $340load_global.19 = global(eigvals: CPUDispatcher(<function eigvals at 0x7f7207a993a0>))
DEBUG 2022-02-14 16:46:35,262 on stmt: E = call $340load_global.19(AX_S, func=$340load_global.19, args=[Var(AX_S, loop_hafnian_batch_gamma.py:56)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:46:35,262 on stmt: $348load_global.22 = global(range: <class 'range'>)
DEBUG 2022-02-14 16:46:35,262 on stmt: $352call_function.24 = call $348load_global.22(n_D, func=$348load_global.22, args=[Var(n_D, loop_hafnian_batch_gamma.py:36)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:46:35,262 on stmt: $354get_iter.25 = getiter(value=$352call_function.24)
DEBUG 2022-02-14 16:46:35,262 on stmt: $phi356.1 = $354get_iter.25
DEBUG 2022-02-14 16:46:35,262 on stmt: jump 356
DEBUG 2022-02-14 16:46:35,262 ==== SSA block rewrite pass on 356
DEBUG 2022-02-14 16:46:35,262 Running <numba.core.ssa._FreshVarHandler object at 0x7f72073bce20>
DEBUG 2022-02-14 16:46:35,262 on stmt: $356for_iter.2 = iternext(value=$phi356.1)
DEBUG 2022-02-14 16:46:35,262 on stmt: $356for_iter.3 = pair_first(value=$356for_iter.2)
DEBUG 2022-02-14 16:46:35,262 on stmt: $356for_iter.4 = pair_second(value=$356for_iter.2)
DEBUG 2022-02-14 16:46:35,262 on stmt: $phi358.2 = $356for_iter.3
DEBUG 2022-02-14 16:46:35,262 on stmt: branch $356for_iter.4, 358, 600
DEBUG 2022-02-14 16:46:35,262 ==== SSA block rewrite pass on 358
DEBUG 2022-02-14 16:46:35,263 Running <numba.core.ssa._FreshVarHandler object at 0x7f72073bce20>
DEBUG 2022-02-14 16:46:35,263 on stmt: k = $phi358.2
DEBUG 2022-02-14 16:46:35,263 on stmt: $360load_global.3 = global(get_Dsubmatrices: CPUDispatcher(<function get_Dsubmatrices at 0x7f7207a99160>))
DEBUG 2022-02-14 16:46:35,263 on stmt: $const368.7 = const(NoneType, None)
DEBUG 2022-02-14 16:46:35,263 on stmt: $const370.8 = const(NoneType, None)
DEBUG 2022-02-14 16:46:35,263 on stmt: $372build_slice.9 = global(slice: <class 'slice'>)
DEBUG 2022-02-14 16:46:35,263 on stmt: $372build_slice.10 = call $372build_slice.9($const368.7, $const370.8, func=$372build_slice.9, args=(Var($const368.7, loop_hafnian_batch_gamma.py:61), Var($const370.8, loop_hafnian_batch_gamma.py:61)), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:46:35,263 on stmt: $374build_tuple.11 = build_tuple(items=[Var(k, loop_hafnian_batch_gamma.py:60), Var($372build_slice.10, loop_hafnian_batch_gamma.py:61)])
DEBUG 2022-02-14 16:46:35,263 on stmt: $376binary_subscr.12 = getitem(value=D, index=$374build_tuple.11, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:46:35,263 on stmt: $378call_function.13 = call $360load_global.3(delta.2, $376binary_subscr.12, func=$360load_global.3, args=[Var(delta.2, loop_hafnian_batch_gamma.py:56), Var($376binary_subscr.12, loop_hafnian_batch_gamma.py:61)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:46:35,263 on stmt: $380unpack_sequence.16 = exhaust_iter(value=$378call_function.13, count=2)
DEBUG 2022-02-14 16:46:35,263 on stmt: $380unpack_sequence.14 = static_getitem(value=$380unpack_sequence.16, index=0, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:46:35,263 on stmt: $380unpack_sequence.15 = static_getitem(value=$380unpack_sequence.16, index=1, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:46:35,263 on stmt: XD_S = $380unpack_sequence.14
DEBUG 2022-02-14 16:46:35,263 on stmt: D_S = $380unpack_sequence.15
DEBUG 2022-02-14 16:46:35,263 on stmt: $386load_global.17 = global(f_loop: CPUDispatcher(<function f_loop at 0x7f7207b0e940>))
DEBUG 2022-02-14 16:46:35,263 on stmt: f_even = call $386load_global.17(E, AX_S, XD_S, D_S, N_max, func=$386load_global.17, args=[Var(E, loop_hafnian_batch_gamma.py:58), Var(AX_S, loop_hafnian_batch_gamma.py:56), Var(XD_S, loop_hafnian_batch_gamma.py:56), Var(D_S, loop_hafnian_batch_gamma.py:56), Var(N_max, loop_hafnian_batch_gamma.py:29)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:46:35,263 on stmt: $402load_global.24 = global(f_loop_odd: CPUDispatcher(<function f_loop_odd at 0x7f7207b0eaf0>))
DEBUG 2022-02-14 16:46:35,263 on stmt: $418binary_subscr.32 = getitem(value=oddloop, index=k, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:46:35,263 on stmt: f_odd = call $402load_global.24(E, AX_S, XD_S, D_S, N_max, $418binary_subscr.32, oddVX_S, func=$402load_global.24, args=[Var(E, loop_hafnian_batch_gamma.py:58), Var(AX_S, loop_hafnian_batch_gamma.py:56), Var(XD_S, loop_hafnian_batch_gamma.py:56), Var(D_S, loop_hafnian_batch_gamma.py:56), Var(N_max, loop_hafnian_batch_gamma.py:29), Var($418binary_subscr.32, loop_hafnian_batch_gamma.py:64), Var(oddVX_S, loop_hafnian_batch_gamma.py:56)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:46:35,263 on stmt: $426load_global.35 = global(range: <class 'range'>)
DEBUG 2022-02-14 16:46:35,263 on stmt: $const428.36 = const(int, 2)
DEBUG 2022-02-14 16:46:35,263 on stmt: $const432.38 = const(int, 0)
DEBUG 2022-02-14 16:46:35,264 on stmt: $434binary_subscr.39 = static_getitem(value=kept_edges, index=0, index_var=$const432.38, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:46:35,264 on stmt: $436binary_multiply.40 = $const428.36 * $434binary_subscr.39
DEBUG 2022-02-14 16:46:35,264 on stmt: $const438.41 = const(int, 2)
DEBUG 2022-02-14 16:46:35,264 on stmt: $442binary_multiply.43 = $const438.41 * batch_max
DEBUG 2022-02-14 16:46:35,264 on stmt: $446binary_add.45 = $442binary_multiply.43 + odd_cutoff
DEBUG 2022-02-14 16:46:35,264 on stmt: $const448.46 = const(int, 1)
DEBUG 2022-02-14 16:46:35,264 on stmt: $450binary_add.47 = $446binary_add.45 + $const448.46
DEBUG 2022-02-14 16:46:35,264 on stmt: $452call_function.48 = call $426load_global.35($436binary_multiply.40, $450binary_add.47, func=$426load_global.35, args=[Var($436binary_multiply.40, loop_hafnian_batch_gamma.py:66), Var($450binary_add.47, loop_hafnian_batch_gamma.py:66)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:46:35,264 on stmt: $454get_iter.49 = getiter(value=$452call_function.48)
DEBUG 2022-02-14 16:46:35,264 on stmt: $phi456.2 = $454get_iter.49
DEBUG 2022-02-14 16:46:35,264 on stmt: jump 456
DEBUG 2022-02-14 16:46:35,264 ==== SSA block rewrite pass on 456
DEBUG 2022-02-14 16:46:35,264 Running <numba.core.ssa._FreshVarHandler object at 0x7f72073bce20>
DEBUG 2022-02-14 16:46:35,264 on stmt: $456for_iter.3 = iternext(value=$phi456.2)
DEBUG 2022-02-14 16:46:35,264 on stmt: $456for_iter.4 = pair_first(value=$456for_iter.3)
DEBUG 2022-02-14 16:46:35,264 on stmt: $456for_iter.5 = pair_second(value=$456for_iter.3)
DEBUG 2022-02-14 16:46:35,264 on stmt: $phi458.3 = $456for_iter.4
DEBUG 2022-02-14 16:46:35,264 on stmt: branch $456for_iter.5, 458, 596
DEBUG 2022-02-14 16:46:35,264 ==== SSA block rewrite pass on 458
DEBUG 2022-02-14 16:46:35,264 Running <numba.core.ssa._FreshVarHandler object at 0x7f72073bce20>
DEBUG 2022-02-14 16:46:35,264 on stmt: N_det = $phi458.3
DEBUG 2022-02-14 16:46:35,264 on stmt: N = N_fixed + N_det
DEBUG 2022-02-14 16:46:35,264 on stmt: $const468.7 = const(float, -1.0)
DEBUG 2022-02-14 16:46:35,264 on stmt: $const472.9 = const(int, 2)
DEBUG 2022-02-14 16:46:35,264 on stmt: $474binary_floor_divide.10 = N // $const472.9
DEBUG 2022-02-14 16:46:35,264 on stmt: $478binary_subtract.12 = $474binary_floor_divide.10 - edges_sum
DEBUG 2022-02-14 16:46:35,264 on stmt: plus_minus = $const468.7 ** $478binary_subtract.12
DEBUG 2022-02-14 16:46:35,264 on stmt: $const488.16 = const(int, 2)
DEBUG 2022-02-14 16:46:35,265 on stmt: $490binary_floor_divide.17 = N_det // $const488.16
DEBUG 2022-02-14 16:46:35,265 on stmt: $const494.19 = const(int, 0)
DEBUG 2022-02-14 16:46:35,265 on stmt: $496binary_subscr.20 = static_getitem(value=kept_edges, index=0, index_var=$const494.19, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:46:35,265 on stmt: $498build_tuple.21 = build_tuple(items=[Var($490binary_floor_divide.17, loop_hafnian_batch_gamma.py:70), Var($496binary_subscr.20, loop_hafnian_batch_gamma.py:70)])
DEBUG 2022-02-14 16:46:35,265 on stmt: $500binary_subscr.22 = getitem(value=binoms, index=$498build_tuple.21, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:46:35,265 on stmt: n_det_binom_prod = $500binary_subscr.22 * binom_prod
DEBUG 2022-02-14 16:46:35,265 on stmt: $const510.26 = const(int, 2)
DEBUG 2022-02-14 16:46:35,265 on stmt: $512binary_modulo.27 = N_det % $const510.26
DEBUG 2022-02-14 16:46:35,265 on stmt: $const514.28 = const(int, 0)
DEBUG 2022-02-14 16:46:35,265 on stmt: $516compare_op.29 = $512binary_modulo.27 == $const514.28
DEBUG 2022-02-14 16:46:35,265 on stmt: bool518 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:46:35,265 on stmt: $518pred = call bool518($516compare_op.29, func=bool518, args=(Var($516compare_op.29, loop_hafnian_batch_gamma.py:72),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:46:35,265 on stmt: branch $518pred, 522, 560
DEBUG 2022-02-14 16:46:35,265 ==== SSA block rewrite pass on 522
DEBUG 2022-02-14 16:46:35,265 Running <numba.core.ssa._FreshVarHandler object at 0x7f72073bce20>
DEBUG 2022-02-14 16:46:35,265 on stmt: $528build_tuple.6 = build_tuple(items=[Var(k, loop_hafnian_batch_gamma.py:60), Var(N_det, loop_hafnian_batch_gamma.py:66)])
DEBUG 2022-02-14 16:46:35,265 on stmt: $532binary_subscr.9 = getitem(value=Hnew, index=$528build_tuple.6, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:46:35,265 on stmt: $538binary_multiply.12 = n_det_binom_prod * plus_minus
DEBUG 2022-02-14 16:46:35,265 on stmt: $const544.15 = const(int, 2)
DEBUG 2022-02-14 16:46:35,265 on stmt: $546binary_floor_divide.16 = N // $const544.15
DEBUG 2022-02-14 16:46:35,265 on stmt: $548binary_subscr.17 = getitem(value=f_even, index=$546binary_floor_divide.16, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:46:35,265 on stmt: $550binary_multiply.18 = $538binary_multiply.12 * $548binary_subscr.17
DEBUG 2022-02-14 16:46:35,265 on stmt: $552inplace_add.19 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$532binary_subscr.9, rhs=$550binary_multiply.18, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:46:35,265 on stmt: Hnew[$528build_tuple.6] = $552inplace_add.19
DEBUG 2022-02-14 16:46:35,265 on stmt: jump 592
DEBUG 2022-02-14 16:46:35,266 ==== SSA block rewrite pass on 560
DEBUG 2022-02-14 16:46:35,266 Running <numba.core.ssa._FreshVarHandler object at 0x7f72073bce20>
DEBUG 2022-02-14 16:46:35,266 on stmt: $566build_tuple.6 = build_tuple(items=[Var(k, loop_hafnian_batch_gamma.py:60), Var(N_det, loop_hafnian_batch_gamma.py:66)])
DEBUG 2022-02-14 16:46:35,266 on stmt: $570binary_subscr.9 = getitem(value=Hnew, index=$566build_tuple.6, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:46:35,266 on stmt: $576binary_multiply.12 = n_det_binom_prod * plus_minus
DEBUG 2022-02-14 16:46:35,266 on stmt: $582binary_subscr.15 = getitem(value=f_odd, index=N, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:46:35,266 on stmt: $584binary_multiply.16 = $576binary_multiply.12 * $582binary_subscr.15
DEBUG 2022-02-14 16:46:35,266 on stmt: $586inplace_add.17 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$570binary_subscr.9, rhs=$584binary_multiply.16, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:46:35,266 on stmt: Hnew[$566build_tuple.6] = $586inplace_add.17
DEBUG 2022-02-14 16:46:35,266 on stmt: jump 592
DEBUG 2022-02-14 16:46:35,266 ==== SSA block rewrite pass on 592
DEBUG 2022-02-14 16:46:35,266 Running <numba.core.ssa._FreshVarHandler object at 0x7f72073bce20>
DEBUG 2022-02-14 16:46:35,266 on stmt: jump 456
DEBUG 2022-02-14 16:46:35,266 ==== SSA block rewrite pass on 596
DEBUG 2022-02-14 16:46:35,266 Running <numba.core.ssa._FreshVarHandler object at 0x7f72073bce20>
DEBUG 2022-02-14 16:46:35,266 on stmt: jump 356
DEBUG 2022-02-14 16:46:35,266 ==== SSA block rewrite pass on 600
DEBUG 2022-02-14 16:46:35,266 Running <numba.core.ssa._FreshVarHandler object at 0x7f72073bce20>
DEBUG 2022-02-14 16:46:35,266 on stmt: $604inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=H_batch, rhs=Hnew, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:46:35,266 on stmt: H_batch = $604inplace_add.3
DEBUG 2022-02-14 16:46:35,266 on stmt: jump 178
DEBUG 2022-02-14 16:46:35,266 ==== SSA block rewrite pass on 610
DEBUG 2022-02-14 16:46:35,266 Running <numba.core.ssa._FreshVarHandler object at 0x7f72073bce20>
DEBUG 2022-02-14 16:46:35,266 on stmt: bool612 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:46:35,266 on stmt: $612pred = call bool612(glynn, func=bool612, args=(Var(glynn, loop_hafnian_batch_gamma.py:23),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:46:35,266 on stmt: branch $612pred, 616, 678
DEBUG 2022-02-14 16:46:35,266 ==== SSA block rewrite pass on 616
DEBUG 2022-02-14 16:46:35,267 Running <numba.core.ssa._FreshVarHandler object at 0x7f72073bce20>
DEBUG 2022-02-14 16:46:35,267 on stmt: $616load_global.0 = global(range: <class 'range'>)
DEBUG 2022-02-14 16:46:35,267 on stmt: $620load_attr.2 = getattr(value=H_batch, attr=shape)
DEBUG 2022-02-14 16:46:35,267 on stmt: $const622.3 = const(int, 1)
DEBUG 2022-02-14 16:46:35,267 on stmt: $624binary_subscr.4 = static_getitem(value=$620load_attr.2, index=1, index_var=$const622.3, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:46:35,267 on stmt: $626call_function.5 = call $616load_global.0($624binary_subscr.4, func=$616load_global.0, args=[Var($624binary_subscr.4, loop_hafnian_batch_gamma.py:79)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:46:35,267 on stmt: $628get_iter.6 = getiter(value=$626call_function.5)
DEBUG 2022-02-14 16:46:35,267 on stmt: $phi630.0 = $628get_iter.6
DEBUG 2022-02-14 16:46:35,267 on stmt: jump 630
DEBUG 2022-02-14 16:46:35,267 ==== SSA block rewrite pass on 630
DEBUG 2022-02-14 16:46:35,267 Running <numba.core.ssa._FreshVarHandler object at 0x7f72073bce20>
DEBUG 2022-02-14 16:46:35,267 on stmt: $630for_iter.1 = iternext(value=$phi630.0)
DEBUG 2022-02-14 16:46:35,267 on stmt: $630for_iter.2 = pair_first(value=$630for_iter.1)
DEBUG 2022-02-14 16:46:35,267 on stmt: $630for_iter.3 = pair_second(value=$630for_iter.1)
DEBUG 2022-02-14 16:46:35,267 on stmt: $phi632.1 = $630for_iter.2
DEBUG 2022-02-14 16:46:35,267 on stmt: branch $630for_iter.3, 632, 678
DEBUG 2022-02-14 16:46:35,267 ==== SSA block rewrite pass on 632
DEBUG 2022-02-14 16:46:35,267 Running <numba.core.ssa._FreshVarHandler object at 0x7f72073bce20>
DEBUG 2022-02-14 16:46:35,267 on stmt: j = $phi632.1
DEBUG 2022-02-14 16:46:35,267 replaced with: j.1 = $phi632.1
DEBUG 2022-02-14 16:46:35,267 on stmt: x = N_fixed + j
DEBUG 2022-02-14 16:46:35,267 on stmt: $const644.6 = const(NoneType, None)
DEBUG 2022-02-14 16:46:35,267 on stmt: $const646.7 = const(NoneType, None)
DEBUG 2022-02-14 16:46:35,267 on stmt: $648build_slice.8 = global(slice: <class 'slice'>)
DEBUG 2022-02-14 16:46:35,267 on stmt: $648build_slice.9 = call $648build_slice.8($const644.6, $const646.7, func=$648build_slice.8, args=(Var($const644.6, loop_hafnian_batch_gamma.py:81), Var($const646.7, loop_hafnian_batch_gamma.py:81)), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:46:35,268 on stmt: $652build_tuple.11 = build_tuple(items=[Var($648build_slice.9, loop_hafnian_batch_gamma.py:81), Var(j, loop_hafnian_batch_gamma.py:40)])
DEBUG 2022-02-14 16:46:35,268 on stmt: $656binary_subscr.14 = getitem(value=H_batch, index=$652build_tuple.11, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:46:35,268 on stmt: $const658.15 = const(float, 0.5)
DEBUG 2022-02-14 16:46:35,268 on stmt: $const662.17 = const(int, 2)
DEBUG 2022-02-14 16:46:35,268 on stmt: $664binary_floor_divide.18 = x // $const662.17
DEBUG 2022-02-14 16:46:35,268 on stmt: $666binary_power.19 = $const658.15 ** $664binary_floor_divide.18
DEBUG 2022-02-14 16:46:35,268 on stmt: $668inplace_multiply.20 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=$656binary_subscr.14, rhs=$666binary_power.19, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:46:35,268 on stmt: H_batch[$652build_tuple.11] = $668inplace_multiply.20
DEBUG 2022-02-14 16:46:35,268 on stmt: jump 630
DEBUG 2022-02-14 16:46:35,268 ==== SSA block rewrite pass on 678
DEBUG 2022-02-14 16:46:35,268 Running <numba.core.ssa._FreshVarHandler object at 0x7f72073bce20>
DEBUG 2022-02-14 16:46:35,268 on stmt: $680return_value.1 = cast(value=H_batch)
DEBUG 2022-02-14 16:46:35,268 on stmt: return $680return_value.1
DEBUG 2022-02-14 16:46:35,268 Replaced assignments: defaultdict(<class 'list'>,
            {182: [<numba.core.ir.Assign object at 0x7f7203a69d00>],
             632: [<numba.core.ir.Assign object at 0x7f7203a39460>]})
DEBUG 2022-02-14 16:46:35,268 ==== SSA block rewrite pass on 0
DEBUG 2022-02-14 16:46:35,268 Running <numba.core.ssa._FixSSAVars object at 0x7f7203a2dfd0>
DEBUG 2022-02-14 16:46:35,268 on stmt: A = arg(0, name=A)
DEBUG 2022-02-14 16:46:35,268 on stmt: D = arg(1, name=D)
DEBUG 2022-02-14 16:46:35,268 on stmt: fixed_edge_reps = arg(2, name=fixed_edge_reps)
DEBUG 2022-02-14 16:46:35,268 on stmt: batch_max = arg(3, name=batch_max)
DEBUG 2022-02-14 16:46:35,268 on stmt: odd_cutoff = arg(4, name=odd_cutoff)
DEBUG 2022-02-14 16:46:35,268 on stmt: glynn = arg(5, name=glynn)
DEBUG 2022-02-14 16:46:35,268 on stmt: $const4.1 = const(NoneType, None)
DEBUG 2022-02-14 16:46:35,268 on stmt: $const6.2 = const(NoneType, None)
DEBUG 2022-02-14 16:46:35,269 on stmt: $8build_slice.3 = global(slice: <class 'slice'>)
DEBUG 2022-02-14 16:46:35,269 on stmt: $8build_slice.4 = call $8build_slice.3($const4.1, $const6.2, func=$8build_slice.3, args=(Var($const4.1, loop_hafnian_batch_gamma.py:23), Var($const6.2, loop_hafnian_batch_gamma.py:23)), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:46:35,269 on stmt: $const10.5 = const(int, 0)
DEBUG 2022-02-14 16:46:35,269 on stmt: $12build_tuple.6 = build_tuple(items=[Var($8build_slice.4, loop_hafnian_batch_gamma.py:23), Var($const10.5, loop_hafnian_batch_gamma.py:23)])
DEBUG 2022-02-14 16:46:35,269 on stmt: oddloop = static_getitem(value=D, index=(slice(None, None, None), 0), index_var=$12build_tuple.6, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:46:35,269 on stmt: $const20.9 = const(int, 0)
DEBUG 2022-02-14 16:46:35,269 on stmt: $const22.10 = const(NoneType, None)
DEBUG 2022-02-14 16:46:35,269 on stmt: $const24.11 = const(NoneType, None)
DEBUG 2022-02-14 16:46:35,269 on stmt: $26build_slice.12 = global(slice: <class 'slice'>)
DEBUG 2022-02-14 16:46:35,269 on stmt: $26build_slice.13 = call $26build_slice.12($const22.10, $const24.11, func=$26build_slice.12, args=(Var($const22.10, loop_hafnian_batch_gamma.py:24), Var($const24.11, loop_hafnian_batch_gamma.py:24)), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:46:35,269 on stmt: $28build_tuple.14 = build_tuple(items=[Var($const20.9, loop_hafnian_batch_gamma.py:24), Var($26build_slice.13, loop_hafnian_batch_gamma.py:24)])
DEBUG 2022-02-14 16:46:35,269 on stmt: oddV = static_getitem(value=A, index=(0, slice(None, None, None)), index_var=$28build_tuple.14, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:46:35,269 on stmt: $36load_attr.17 = getattr(value=A, attr=shape)
DEBUG 2022-02-14 16:46:35,269 on stmt: $const38.18 = const(int, 0)
DEBUG 2022-02-14 16:46:35,269 on stmt: n = static_getitem(value=$36load_attr.17, index=0, index_var=$const38.18, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:46:35,269 on stmt: $const44.20 = const(int, 2)
DEBUG 2022-02-14 16:46:35,269 on stmt: $48load_method.22 = getattr(value=fixed_edge_reps, attr=sum)
DEBUG 2022-02-14 16:46:35,269 on stmt: $50call_method.23 = call $48load_method.22(func=$48load_method.22, args=[], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:46:35,269 on stmt: N_fixed = $const44.20 * $50call_method.23
DEBUG 2022-02-14 16:46:35,269 on stmt: $const58.26 = const(int, 2)
DEBUG 2022-02-14 16:46:35,269 on stmt: $62binary_multiply.28 = $const58.26 * batch_max
DEBUG 2022-02-14 16:46:35,269 on stmt: $64binary_add.29 = N_fixed + $62binary_multiply.28
DEBUG 2022-02-14 16:46:35,270 on stmt: N_max = $64binary_add.29 + odd_cutoff
DEBUG 2022-02-14 16:46:35,270 on stmt: $72load_global.32 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:46:35,270 on stmt: $74load_method.33 = getattr(value=$72load_global.32, attr=concatenate)
DEBUG 2022-02-14 16:46:35,270 on stmt: $76load_global.34 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:46:35,270 on stmt: $78load_method.35 = getattr(value=$76load_global.34, attr=array)
DEBUG 2022-02-14 16:46:35,270 on stmt: $82build_list.37 = build_list(items=[Var(batch_max, loop_hafnian_batch_gamma.py:23)])
DEBUG 2022-02-14 16:46:35,270 on stmt: $84call_method.38 = call $78load_method.35($82build_list.37, func=$78load_method.35, args=[Var($82build_list.37, loop_hafnian_batch_gamma.py:31)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:46:35,270 on stmt: $88build_tuple.40 = build_tuple(items=[Var($84call_method.38, loop_hafnian_batch_gamma.py:31), Var(fixed_edge_reps, loop_hafnian_batch_gamma.py:23)])
DEBUG 2022-02-14 16:46:35,270 on stmt: edge_reps = call $74load_method.33($88build_tuple.40, func=$74load_method.33, args=[Var($88build_tuple.40, loop_hafnian_batch_gamma.py:31)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:46:35,270 on stmt: $94load_global.42 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:46:35,270 on stmt: $96load_method.43 = getattr(value=$94load_global.42, attr=prod)
DEBUG 2022-02-14 16:46:35,270 on stmt: $const100.45 = const(int, 1)
DEBUG 2022-02-14 16:46:35,270 on stmt: $102binary_add.46 = edge_reps + $const100.45
DEBUG 2022-02-14 16:46:35,270 on stmt: steps = call $96load_method.43($102binary_add.46, func=$96load_method.43, args=[Var($102binary_add.46, loop_hafnian_batch_gamma.py:32)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:46:35,270 on stmt: $110load_method.49 = getattr(value=edge_reps, attr=max)
DEBUG 2022-02-14 16:46:35,270 on stmt: $112call_method.50 = call $110load_method.49(func=$110load_method.49, args=[], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:46:35,270 on stmt: max_binom = $112call_method.50 + odd_cutoff
DEBUG 2022-02-14 16:46:35,270 on stmt: $120load_global.53 = global(precompute_binoms: CPUDispatcher(<function precompute_binoms at 0x7f7207b0e280>))
DEBUG 2022-02-14 16:46:35,270 on stmt: binoms = call $120load_global.53(max_binom, func=$120load_global.53, args=[Var(max_binom, loop_hafnian_batch_gamma.py:34)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:46:35,270 on stmt: $130load_attr.57 = getattr(value=D, attr=shape)
DEBUG 2022-02-14 16:46:35,270 on stmt: $const132.58 = const(int, 0)
DEBUG 2022-02-14 16:46:35,271 on stmt: n_D = static_getitem(value=$130load_attr.57, index=0, index_var=$const132.58, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:46:35,271 on stmt: $138load_global.60 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:46:35,271 on stmt: $140load_attr.61 = getattr(value=$138load_global.60, attr=zeros)
DEBUG 2022-02-14 16:46:35,271 on stmt: $const144.63 = const(int, 2)
DEBUG 2022-02-14 16:46:35,271 on stmt: $148binary_multiply.65 = $const144.63 * batch_max
DEBUG 2022-02-14 16:46:35,271 on stmt: $152binary_add.67 = $148binary_multiply.65 + odd_cutoff
DEBUG 2022-02-14 16:46:35,271 on stmt: $const154.68 = const(int, 1)
DEBUG 2022-02-14 16:46:35,271 on stmt: $156binary_add.69 = $152binary_add.67 + $const154.68
DEBUG 2022-02-14 16:46:35,271 on stmt: $158build_tuple.70 = build_tuple(items=[Var(n_D, loop_hafnian_batch_gamma.py:36), Var($156binary_add.69, loop_hafnian_batch_gamma.py:38)])
DEBUG 2022-02-14 16:46:35,271 on stmt: $160load_global.71 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:46:35,271 on stmt: $162load_attr.72 = getattr(value=$160load_global.71, attr=complex128)
DEBUG 2022-02-14 16:46:35,271 on stmt: H_batch = call $140load_attr.61($158build_tuple.70, func=$140load_attr.61, args=[Var($158build_tuple.70, loop_hafnian_batch_gamma.py:38)], kws=[('dtype', Var($162load_attr.72, loop_hafnian_batch_gamma.py:38))], vararg=None, target=None)
DEBUG 2022-02-14 16:46:35,271 on stmt: $170load_global.75 = global(prange: <class 'numba.misc.special.prange'>)
DEBUG 2022-02-14 16:46:35,271 on stmt: $174call_function.77 = call $170load_global.75(steps, func=$170load_global.75, args=[Var(steps, loop_hafnian_batch_gamma.py:32)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:46:35,271 on stmt: $176get_iter.78 = getiter(value=$174call_function.77)
DEBUG 2022-02-14 16:46:35,271 on stmt: $phi178.0 = $176get_iter.78
DEBUG 2022-02-14 16:46:35,271 on stmt: jump 178
DEBUG 2022-02-14 16:46:35,271 ==== SSA block rewrite pass on 178
DEBUG 2022-02-14 16:46:35,271 Running <numba.core.ssa._FixSSAVars object at 0x7f7203a2dfd0>
DEBUG 2022-02-14 16:46:35,271 on stmt: $178for_iter.1 = iternext(value=$phi178.0)
DEBUG 2022-02-14 16:46:35,271 on stmt: $178for_iter.2 = pair_first(value=$178for_iter.1)
DEBUG 2022-02-14 16:46:35,271 on stmt: $178for_iter.3 = pair_second(value=$178for_iter.1)
DEBUG 2022-02-14 16:46:35,271 on stmt: $phi182.1 = $178for_iter.2
DEBUG 2022-02-14 16:46:35,271 on stmt: branch $178for_iter.3, 182, 610
DEBUG 2022-02-14 16:46:35,272 ==== SSA block rewrite pass on 182
DEBUG 2022-02-14 16:46:35,272 Running <numba.core.ssa._FixSSAVars object at 0x7f7203a2dfd0>
DEBUG 2022-02-14 16:46:35,272 on stmt: j = $phi182.1
DEBUG 2022-02-14 16:46:35,272 on stmt: $184load_global.2 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:46:35,272 on stmt: $186load_attr.3 = getattr(value=$184load_global.2, attr=zeros)
DEBUG 2022-02-14 16:46:35,272 on stmt: $const190.5 = const(int, 2)
DEBUG 2022-02-14 16:46:35,272 on stmt: $194binary_multiply.7 = $const190.5 * batch_max
DEBUG 2022-02-14 16:46:35,272 on stmt: $198binary_add.9 = $194binary_multiply.7 + odd_cutoff
DEBUG 2022-02-14 16:46:35,272 on stmt: $const200.10 = const(int, 1)
DEBUG 2022-02-14 16:46:35,272 on stmt: $202binary_add.11 = $198binary_add.9 + $const200.10
DEBUG 2022-02-14 16:46:35,272 on stmt: $204build_tuple.12 = build_tuple(items=[Var(n_D, loop_hafnian_batch_gamma.py:36), Var($202binary_add.11, loop_hafnian_batch_gamma.py:42)])
DEBUG 2022-02-14 16:46:35,272 on stmt: $206load_global.13 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:46:35,272 on stmt: $208load_attr.14 = getattr(value=$206load_global.13, attr=complex128)
DEBUG 2022-02-14 16:46:35,272 on stmt: Hnew = call $186load_attr.3($204build_tuple.12, func=$186load_attr.3, args=[Var($204build_tuple.12, loop_hafnian_batch_gamma.py:42)], kws=[('dtype', Var($208load_attr.14, loop_hafnian_batch_gamma.py:42))], vararg=None, target=None)
DEBUG 2022-02-14 16:46:35,272 on stmt: $216load_global.17 = global(find_kept_edges: CPUDispatcher(<function find_kept_edges at 0x7f7207b0e700>))
DEBUG 2022-02-14 16:46:35,272 on stmt: kept_edges = call $216load_global.17(j, edge_reps, func=$216load_global.17, args=[Var(j, loop_hafnian_batch_gamma.py:40), Var(edge_reps, loop_hafnian_batch_gamma.py:31)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:46:35,272 find_def var='j' stmt=kept_edges = call $216load_global.17(j, edge_reps, func=$216load_global.17, args=[Var(j, loop_hafnian_batch_gamma.py:40), Var(edge_reps, loop_hafnian_batch_gamma.py:31)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:46:35,272 on stmt: $228load_method.22 = getattr(value=kept_edges, attr=sum)
DEBUG 2022-02-14 16:46:35,272 on stmt: edges_sum = call $228load_method.22(func=$228load_method.22, args=[], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:46:35,272 on stmt: binom_prod = const(float, 1.0)
DEBUG 2022-02-14 16:46:35,272 on stmt: $238load_global.25 = global(range: <class 'range'>)
DEBUG 2022-02-14 16:46:35,272 on stmt: $const240.26 = const(int, 1)
DEBUG 2022-02-14 16:46:35,272 on stmt: $const244.28 = const(int, 2)
DEBUG 2022-02-14 16:46:35,273 on stmt: $246binary_floor_divide.29 = n // $const244.28
DEBUG 2022-02-14 16:46:35,273 on stmt: $248call_function.30 = call $238load_global.25($const240.26, $246binary_floor_divide.29, func=$238load_global.25, args=[Var($const240.26, loop_hafnian_batch_gamma.py:48), Var($246binary_floor_divide.29, loop_hafnian_batch_gamma.py:48)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:46:35,273 on stmt: $250get_iter.31 = getiter(value=$248call_function.30)
DEBUG 2022-02-14 16:46:35,273 on stmt: $phi252.1 = $250get_iter.31
DEBUG 2022-02-14 16:46:35,273 on stmt: jump 252
DEBUG 2022-02-14 16:46:35,273 ==== SSA block rewrite pass on 252
DEBUG 2022-02-14 16:46:35,273 Running <numba.core.ssa._FixSSAVars object at 0x7f7203a2dfd0>
DEBUG 2022-02-14 16:46:35,273 on stmt: $252for_iter.2 = iternext(value=$phi252.1)
DEBUG 2022-02-14 16:46:35,273 on stmt: $252for_iter.3 = pair_first(value=$252for_iter.2)
DEBUG 2022-02-14 16:46:35,273 on stmt: $252for_iter.4 = pair_second(value=$252for_iter.2)
DEBUG 2022-02-14 16:46:35,273 on stmt: $phi254.2 = $252for_iter.3
DEBUG 2022-02-14 16:46:35,273 on stmt: branch $252for_iter.4, 254, 282
DEBUG 2022-02-14 16:46:35,273 ==== SSA block rewrite pass on 254
DEBUG 2022-02-14 16:46:35,273 Running <numba.core.ssa._FixSSAVars object at 0x7f7203a2dfd0>
DEBUG 2022-02-14 16:46:35,273 on stmt: i = $phi254.2
DEBUG 2022-02-14 16:46:35,273 on stmt: $264binary_subscr.7 = getitem(value=edge_reps, index=i, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:46:35,273 on stmt: $270binary_subscr.10 = getitem(value=kept_edges, index=i, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:46:35,273 on stmt: $272build_tuple.11 = build_tuple(items=[Var($264binary_subscr.7, loop_hafnian_batch_gamma.py:49), Var($270binary_subscr.10, loop_hafnian_batch_gamma.py:49)])
DEBUG 2022-02-14 16:46:35,273 on stmt: $274binary_subscr.12 = getitem(value=binoms, index=$272build_tuple.11, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:46:35,273 on stmt: $276inplace_multiply.13 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=binom_prod, rhs=$274binary_subscr.12, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:46:35,273 on stmt: binom_prod = $276inplace_multiply.13
DEBUG 2022-02-14 16:46:35,273 on stmt: jump 252
DEBUG 2022-02-14 16:46:35,273 ==== SSA block rewrite pass on 282
DEBUG 2022-02-14 16:46:35,273 Running <numba.core.ssa._FixSSAVars object at 0x7f7203a2dfd0>
DEBUG 2022-02-14 16:46:35,273 on stmt: bool284 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:46:35,274 on stmt: $284pred = call bool284(glynn, func=bool284, args=(Var(glynn, loop_hafnian_batch_gamma.py:23),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:46:35,274 on stmt: branch $284pred, 288, 302
DEBUG 2022-02-14 16:46:35,274 ==== SSA block rewrite pass on 288
DEBUG 2022-02-14 16:46:35,274 Running <numba.core.ssa._FixSSAVars object at 0x7f7203a2dfd0>
DEBUG 2022-02-14 16:46:35,274 on stmt: $const288.1 = const(int, 2)
DEBUG 2022-02-14 16:46:35,274 on stmt: $292binary_multiply.3 = $const288.1 * kept_edges
DEBUG 2022-02-14 16:46:35,274 on stmt: delta = $292binary_multiply.3 - edge_reps
DEBUG 2022-02-14 16:46:35,274 on stmt: jump 306
DEBUG 2022-02-14 16:46:35,274 ==== SSA block rewrite pass on 302
DEBUG 2022-02-14 16:46:35,274 Running <numba.core.ssa._FixSSAVars object at 0x7f7203a2dfd0>
DEBUG 2022-02-14 16:46:35,274 on stmt: delta.1 = kept_edges
DEBUG 2022-02-14 16:46:35,274 on stmt: jump 306
DEBUG 2022-02-14 16:46:35,274 ==== SSA block rewrite pass on 306
DEBUG 2022-02-14 16:46:35,274 Running <numba.core.ssa._FixSSAVars object at 0x7f7203a2dfd0>
DEBUG 2022-02-14 16:46:35,274 on stmt: delta.2 = phi(incoming_values=[Var(delta, loop_hafnian_batch_gamma.py:52), Var(delta.1, loop_hafnian_batch_gamma.py:54)], incoming_blocks=[288, 302])
DEBUG 2022-02-14 16:46:35,274 on stmt: $306load_global.1 = global(get_submatrices: CPUDispatcher(<function get_submatrices at 0x7f7207b0eca0>))
DEBUG 2022-02-14 16:46:35,274 on stmt: $const314.5 = const(int, 0)
DEBUG 2022-02-14 16:46:35,274 on stmt: $const316.6 = const(NoneType, None)
DEBUG 2022-02-14 16:46:35,274 on stmt: $const318.7 = const(NoneType, None)
DEBUG 2022-02-14 16:46:35,274 on stmt: $320build_slice.8 = global(slice: <class 'slice'>)
DEBUG 2022-02-14 16:46:35,274 on stmt: $320build_slice.9 = call $320build_slice.8($const316.6, $const318.7, func=$320build_slice.8, args=(Var($const316.6, loop_hafnian_batch_gamma.py:56), Var($const318.7, loop_hafnian_batch_gamma.py:56)), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:46:35,274 on stmt: $322build_tuple.10 = build_tuple(items=[Var($const314.5, loop_hafnian_batch_gamma.py:56), Var($320build_slice.9, loop_hafnian_batch_gamma.py:56)])
DEBUG 2022-02-14 16:46:35,274 on stmt: $324binary_subscr.11 = static_getitem(value=D, index=(0, slice(None, None, None)), index_var=$322build_tuple.10, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:46:35,274 on stmt: $328call_function.13 = call $306load_global.1(delta.2, A, $324binary_subscr.11, oddV, func=$306load_global.1, args=[Var(delta.2, loop_hafnian_batch_gamma.py:56), Var(A, loop_hafnian_batch_gamma.py:23), Var($324binary_subscr.11, loop_hafnian_batch_gamma.py:56), Var(oddV, loop_hafnian_batch_gamma.py:24)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:46:35,275 on stmt: $330unpack_sequence.18 = exhaust_iter(value=$328call_function.13, count=4)
DEBUG 2022-02-14 16:46:35,275 on stmt: $330unpack_sequence.14 = static_getitem(value=$330unpack_sequence.18, index=0, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:46:35,275 on stmt: $330unpack_sequence.15 = static_getitem(value=$330unpack_sequence.18, index=1, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:46:35,275 on stmt: $330unpack_sequence.16 = static_getitem(value=$330unpack_sequence.18, index=2, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:46:35,275 on stmt: $330unpack_sequence.17 = static_getitem(value=$330unpack_sequence.18, index=3, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:46:35,275 on stmt: AX_S = $330unpack_sequence.14
DEBUG 2022-02-14 16:46:35,275 on stmt: XD_S = $330unpack_sequence.15
DEBUG 2022-02-14 16:46:35,275 on stmt: D_S = $330unpack_sequence.16
DEBUG 2022-02-14 16:46:35,275 on stmt: oddVX_S = $330unpack_sequence.17
DEBUG 2022-02-14 16:46:35,275 on stmt: $340load_global.19 = global(eigvals: CPUDispatcher(<function eigvals at 0x7f7207a993a0>))
DEBUG 2022-02-14 16:46:35,275 on stmt: E = call $340load_global.19(AX_S, func=$340load_global.19, args=[Var(AX_S, loop_hafnian_batch_gamma.py:56)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:46:35,275 on stmt: $348load_global.22 = global(range: <class 'range'>)
DEBUG 2022-02-14 16:46:35,275 on stmt: $352call_function.24 = call $348load_global.22(n_D, func=$348load_global.22, args=[Var(n_D, loop_hafnian_batch_gamma.py:36)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:46:35,275 on stmt: $354get_iter.25 = getiter(value=$352call_function.24)
DEBUG 2022-02-14 16:46:35,275 on stmt: $phi356.1 = $354get_iter.25
DEBUG 2022-02-14 16:46:35,275 on stmt: jump 356
DEBUG 2022-02-14 16:46:35,275 ==== SSA block rewrite pass on 356
DEBUG 2022-02-14 16:46:35,275 Running <numba.core.ssa._FixSSAVars object at 0x7f7203a2dfd0>
DEBUG 2022-02-14 16:46:35,275 on stmt: $356for_iter.2 = iternext(value=$phi356.1)
DEBUG 2022-02-14 16:46:35,275 on stmt: $356for_iter.3 = pair_first(value=$356for_iter.2)
DEBUG 2022-02-14 16:46:35,275 on stmt: $356for_iter.4 = pair_second(value=$356for_iter.2)
DEBUG 2022-02-14 16:46:35,275 on stmt: $phi358.2 = $356for_iter.3
DEBUG 2022-02-14 16:46:35,275 on stmt: branch $356for_iter.4, 358, 600
DEBUG 2022-02-14 16:46:35,275 ==== SSA block rewrite pass on 358
DEBUG 2022-02-14 16:46:35,276 Running <numba.core.ssa._FixSSAVars object at 0x7f7203a2dfd0>
DEBUG 2022-02-14 16:46:35,276 on stmt: k = $phi358.2
DEBUG 2022-02-14 16:46:35,276 on stmt: $360load_global.3 = global(get_Dsubmatrices: CPUDispatcher(<function get_Dsubmatrices at 0x7f7207a99160>))
DEBUG 2022-02-14 16:46:35,276 on stmt: $const368.7 = const(NoneType, None)
DEBUG 2022-02-14 16:46:35,276 on stmt: $const370.8 = const(NoneType, None)
DEBUG 2022-02-14 16:46:35,276 on stmt: $372build_slice.9 = global(slice: <class 'slice'>)
DEBUG 2022-02-14 16:46:35,276 on stmt: $372build_slice.10 = call $372build_slice.9($const368.7, $const370.8, func=$372build_slice.9, args=(Var($const368.7, loop_hafnian_batch_gamma.py:61), Var($const370.8, loop_hafnian_batch_gamma.py:61)), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:46:35,276 on stmt: $374build_tuple.11 = build_tuple(items=[Var(k, loop_hafnian_batch_gamma.py:60), Var($372build_slice.10, loop_hafnian_batch_gamma.py:61)])
DEBUG 2022-02-14 16:46:35,276 on stmt: $376binary_subscr.12 = getitem(value=D, index=$374build_tuple.11, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:46:35,276 on stmt: $378call_function.13 = call $360load_global.3(delta.2, $376binary_subscr.12, func=$360load_global.3, args=[Var(delta.2, loop_hafnian_batch_gamma.py:56), Var($376binary_subscr.12, loop_hafnian_batch_gamma.py:61)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:46:35,276 on stmt: $380unpack_sequence.16 = exhaust_iter(value=$378call_function.13, count=2)
DEBUG 2022-02-14 16:46:35,276 on stmt: $380unpack_sequence.14 = static_getitem(value=$380unpack_sequence.16, index=0, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:46:35,276 on stmt: $380unpack_sequence.15 = static_getitem(value=$380unpack_sequence.16, index=1, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:46:35,276 on stmt: XD_S = $380unpack_sequence.14
DEBUG 2022-02-14 16:46:35,276 on stmt: D_S = $380unpack_sequence.15
DEBUG 2022-02-14 16:46:35,276 on stmt: $386load_global.17 = global(f_loop: CPUDispatcher(<function f_loop at 0x7f7207b0e940>))
DEBUG 2022-02-14 16:46:35,276 on stmt: f_even = call $386load_global.17(E, AX_S, XD_S, D_S, N_max, func=$386load_global.17, args=[Var(E, loop_hafnian_batch_gamma.py:58), Var(AX_S, loop_hafnian_batch_gamma.py:56), Var(XD_S, loop_hafnian_batch_gamma.py:56), Var(D_S, loop_hafnian_batch_gamma.py:56), Var(N_max, loop_hafnian_batch_gamma.py:29)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:46:35,276 on stmt: $402load_global.24 = global(f_loop_odd: CPUDispatcher(<function f_loop_odd at 0x7f7207b0eaf0>))
DEBUG 2022-02-14 16:46:35,276 on stmt: $418binary_subscr.32 = getitem(value=oddloop, index=k, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:46:35,276 on stmt: f_odd = call $402load_global.24(E, AX_S, XD_S, D_S, N_max, $418binary_subscr.32, oddVX_S, func=$402load_global.24, args=[Var(E, loop_hafnian_batch_gamma.py:58), Var(AX_S, loop_hafnian_batch_gamma.py:56), Var(XD_S, loop_hafnian_batch_gamma.py:56), Var(D_S, loop_hafnian_batch_gamma.py:56), Var(N_max, loop_hafnian_batch_gamma.py:29), Var($418binary_subscr.32, loop_hafnian_batch_gamma.py:64), Var(oddVX_S, loop_hafnian_batch_gamma.py:56)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:46:35,276 on stmt: $426load_global.35 = global(range: <class 'range'>)
DEBUG 2022-02-14 16:46:35,276 on stmt: $const428.36 = const(int, 2)
DEBUG 2022-02-14 16:46:35,276 on stmt: $const432.38 = const(int, 0)
DEBUG 2022-02-14 16:46:35,276 on stmt: $434binary_subscr.39 = static_getitem(value=kept_edges, index=0, index_var=$const432.38, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:46:35,277 on stmt: $436binary_multiply.40 = $const428.36 * $434binary_subscr.39
DEBUG 2022-02-14 16:46:35,277 on stmt: $const438.41 = const(int, 2)
DEBUG 2022-02-14 16:46:35,277 on stmt: $442binary_multiply.43 = $const438.41 * batch_max
DEBUG 2022-02-14 16:46:35,277 on stmt: $446binary_add.45 = $442binary_multiply.43 + odd_cutoff
DEBUG 2022-02-14 16:46:35,277 on stmt: $const448.46 = const(int, 1)
DEBUG 2022-02-14 16:46:35,277 on stmt: $450binary_add.47 = $446binary_add.45 + $const448.46
DEBUG 2022-02-14 16:46:35,277 on stmt: $452call_function.48 = call $426load_global.35($436binary_multiply.40, $450binary_add.47, func=$426load_global.35, args=[Var($436binary_multiply.40, loop_hafnian_batch_gamma.py:66), Var($450binary_add.47, loop_hafnian_batch_gamma.py:66)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:46:35,277 on stmt: $454get_iter.49 = getiter(value=$452call_function.48)
DEBUG 2022-02-14 16:46:35,277 on stmt: $phi456.2 = $454get_iter.49
DEBUG 2022-02-14 16:46:35,277 on stmt: jump 456
DEBUG 2022-02-14 16:46:35,277 ==== SSA block rewrite pass on 456
DEBUG 2022-02-14 16:46:35,277 Running <numba.core.ssa._FixSSAVars object at 0x7f7203a2dfd0>
DEBUG 2022-02-14 16:46:35,277 on stmt: $456for_iter.3 = iternext(value=$phi456.2)
DEBUG 2022-02-14 16:46:35,277 on stmt: $456for_iter.4 = pair_first(value=$456for_iter.3)
DEBUG 2022-02-14 16:46:35,277 on stmt: $456for_iter.5 = pair_second(value=$456for_iter.3)
DEBUG 2022-02-14 16:46:35,277 on stmt: $phi458.3 = $456for_iter.4
DEBUG 2022-02-14 16:46:35,277 on stmt: branch $456for_iter.5, 458, 596
DEBUG 2022-02-14 16:46:35,277 ==== SSA block rewrite pass on 458
DEBUG 2022-02-14 16:46:35,277 Running <numba.core.ssa._FixSSAVars object at 0x7f7203a2dfd0>
DEBUG 2022-02-14 16:46:35,277 on stmt: N_det = $phi458.3
DEBUG 2022-02-14 16:46:35,277 on stmt: N = N_fixed + N_det
DEBUG 2022-02-14 16:46:35,277 on stmt: $const468.7 = const(float, -1.0)
DEBUG 2022-02-14 16:46:35,277 on stmt: $const472.9 = const(int, 2)
DEBUG 2022-02-14 16:46:35,277 on stmt: $474binary_floor_divide.10 = N // $const472.9
DEBUG 2022-02-14 16:46:35,277 on stmt: $478binary_subtract.12 = $474binary_floor_divide.10 - edges_sum
DEBUG 2022-02-14 16:46:35,278 on stmt: plus_minus = $const468.7 ** $478binary_subtract.12
DEBUG 2022-02-14 16:46:35,278 on stmt: $const488.16 = const(int, 2)
DEBUG 2022-02-14 16:46:35,278 on stmt: $490binary_floor_divide.17 = N_det // $const488.16
DEBUG 2022-02-14 16:46:35,278 on stmt: $const494.19 = const(int, 0)
DEBUG 2022-02-14 16:46:35,278 on stmt: $496binary_subscr.20 = static_getitem(value=kept_edges, index=0, index_var=$const494.19, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:46:35,278 on stmt: $498build_tuple.21 = build_tuple(items=[Var($490binary_floor_divide.17, loop_hafnian_batch_gamma.py:70), Var($496binary_subscr.20, loop_hafnian_batch_gamma.py:70)])
DEBUG 2022-02-14 16:46:35,278 on stmt: $500binary_subscr.22 = getitem(value=binoms, index=$498build_tuple.21, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:46:35,278 on stmt: n_det_binom_prod = $500binary_subscr.22 * binom_prod
DEBUG 2022-02-14 16:46:35,278 on stmt: $const510.26 = const(int, 2)
DEBUG 2022-02-14 16:46:35,278 on stmt: $512binary_modulo.27 = N_det % $const510.26
DEBUG 2022-02-14 16:46:35,278 on stmt: $const514.28 = const(int, 0)
DEBUG 2022-02-14 16:46:35,278 on stmt: $516compare_op.29 = $512binary_modulo.27 == $const514.28
DEBUG 2022-02-14 16:46:35,278 on stmt: bool518 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:46:35,278 on stmt: $518pred = call bool518($516compare_op.29, func=bool518, args=(Var($516compare_op.29, loop_hafnian_batch_gamma.py:72),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:46:35,278 on stmt: branch $518pred, 522, 560
DEBUG 2022-02-14 16:46:35,278 ==== SSA block rewrite pass on 522
DEBUG 2022-02-14 16:46:35,278 Running <numba.core.ssa._FixSSAVars object at 0x7f7203a2dfd0>
DEBUG 2022-02-14 16:46:35,278 on stmt: $528build_tuple.6 = build_tuple(items=[Var(k, loop_hafnian_batch_gamma.py:60), Var(N_det, loop_hafnian_batch_gamma.py:66)])
DEBUG 2022-02-14 16:46:35,278 on stmt: $532binary_subscr.9 = getitem(value=Hnew, index=$528build_tuple.6, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:46:35,278 on stmt: $538binary_multiply.12 = n_det_binom_prod * plus_minus
DEBUG 2022-02-14 16:46:35,278 on stmt: $const544.15 = const(int, 2)
DEBUG 2022-02-14 16:46:35,278 on stmt: $546binary_floor_divide.16 = N // $const544.15
DEBUG 2022-02-14 16:46:35,278 on stmt: $548binary_subscr.17 = getitem(value=f_even, index=$546binary_floor_divide.16, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:46:35,279 on stmt: $550binary_multiply.18 = $538binary_multiply.12 * $548binary_subscr.17
DEBUG 2022-02-14 16:46:35,279 on stmt: $552inplace_add.19 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$532binary_subscr.9, rhs=$550binary_multiply.18, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:46:35,279 on stmt: Hnew[$528build_tuple.6] = $552inplace_add.19
DEBUG 2022-02-14 16:46:35,279 on stmt: jump 592
DEBUG 2022-02-14 16:46:35,279 ==== SSA block rewrite pass on 560
DEBUG 2022-02-14 16:46:35,279 Running <numba.core.ssa._FixSSAVars object at 0x7f7203a2dfd0>
DEBUG 2022-02-14 16:46:35,279 on stmt: $566build_tuple.6 = build_tuple(items=[Var(k, loop_hafnian_batch_gamma.py:60), Var(N_det, loop_hafnian_batch_gamma.py:66)])
DEBUG 2022-02-14 16:46:35,279 on stmt: $570binary_subscr.9 = getitem(value=Hnew, index=$566build_tuple.6, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:46:35,279 on stmt: $576binary_multiply.12 = n_det_binom_prod * plus_minus
DEBUG 2022-02-14 16:46:35,279 on stmt: $582binary_subscr.15 = getitem(value=f_odd, index=N, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:46:35,279 on stmt: $584binary_multiply.16 = $576binary_multiply.12 * $582binary_subscr.15
DEBUG 2022-02-14 16:46:35,279 on stmt: $586inplace_add.17 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$570binary_subscr.9, rhs=$584binary_multiply.16, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:46:35,279 on stmt: Hnew[$566build_tuple.6] = $586inplace_add.17
DEBUG 2022-02-14 16:46:35,279 on stmt: jump 592
DEBUG 2022-02-14 16:46:35,279 ==== SSA block rewrite pass on 592
DEBUG 2022-02-14 16:46:35,279 Running <numba.core.ssa._FixSSAVars object at 0x7f7203a2dfd0>
DEBUG 2022-02-14 16:46:35,279 on stmt: jump 456
DEBUG 2022-02-14 16:46:35,279 ==== SSA block rewrite pass on 596
DEBUG 2022-02-14 16:46:35,279 Running <numba.core.ssa._FixSSAVars object at 0x7f7203a2dfd0>
DEBUG 2022-02-14 16:46:35,279 on stmt: jump 356
DEBUG 2022-02-14 16:46:35,279 ==== SSA block rewrite pass on 600
DEBUG 2022-02-14 16:46:35,279 Running <numba.core.ssa._FixSSAVars object at 0x7f7203a2dfd0>
DEBUG 2022-02-14 16:46:35,279 on stmt: $604inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=H_batch, rhs=Hnew, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:46:35,279 on stmt: H_batch = $604inplace_add.3
DEBUG 2022-02-14 16:46:35,279 on stmt: jump 178
DEBUG 2022-02-14 16:46:35,280 ==== SSA block rewrite pass on 610
DEBUG 2022-02-14 16:46:35,280 Running <numba.core.ssa._FixSSAVars object at 0x7f7203a2dfd0>
DEBUG 2022-02-14 16:46:35,280 on stmt: bool612 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:46:35,280 on stmt: $612pred = call bool612(glynn, func=bool612, args=(Var(glynn, loop_hafnian_batch_gamma.py:23),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:46:35,280 on stmt: branch $612pred, 616, 678
DEBUG 2022-02-14 16:46:35,280 ==== SSA block rewrite pass on 616
DEBUG 2022-02-14 16:46:35,280 Running <numba.core.ssa._FixSSAVars object at 0x7f7203a2dfd0>
DEBUG 2022-02-14 16:46:35,280 on stmt: $616load_global.0 = global(range: <class 'range'>)
DEBUG 2022-02-14 16:46:35,280 on stmt: $620load_attr.2 = getattr(value=H_batch, attr=shape)
DEBUG 2022-02-14 16:46:35,280 on stmt: $const622.3 = const(int, 1)
DEBUG 2022-02-14 16:46:35,280 on stmt: $624binary_subscr.4 = static_getitem(value=$620load_attr.2, index=1, index_var=$const622.3, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:46:35,280 on stmt: $626call_function.5 = call $616load_global.0($624binary_subscr.4, func=$616load_global.0, args=[Var($624binary_subscr.4, loop_hafnian_batch_gamma.py:79)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:46:35,280 on stmt: $628get_iter.6 = getiter(value=$626call_function.5)
DEBUG 2022-02-14 16:46:35,280 on stmt: $phi630.0 = $628get_iter.6
DEBUG 2022-02-14 16:46:35,280 on stmt: jump 630
DEBUG 2022-02-14 16:46:35,280 ==== SSA block rewrite pass on 630
DEBUG 2022-02-14 16:46:35,280 Running <numba.core.ssa._FixSSAVars object at 0x7f7203a2dfd0>
DEBUG 2022-02-14 16:46:35,280 on stmt: $630for_iter.1 = iternext(value=$phi630.0)
DEBUG 2022-02-14 16:46:35,280 on stmt: $630for_iter.2 = pair_first(value=$630for_iter.1)
DEBUG 2022-02-14 16:46:35,280 on stmt: $630for_iter.3 = pair_second(value=$630for_iter.1)
DEBUG 2022-02-14 16:46:35,280 on stmt: $phi632.1 = $630for_iter.2
DEBUG 2022-02-14 16:46:35,280 on stmt: branch $630for_iter.3, 632, 678
DEBUG 2022-02-14 16:46:35,280 ==== SSA block rewrite pass on 632
DEBUG 2022-02-14 16:46:35,280 Running <numba.core.ssa._FixSSAVars object at 0x7f7203a2dfd0>
DEBUG 2022-02-14 16:46:35,280 on stmt: j.1 = $phi632.1
DEBUG 2022-02-14 16:46:35,280 on stmt: x = N_fixed + j
DEBUG 2022-02-14 16:46:35,280 find_def var='j' stmt=x = N_fixed + j
DEBUG 2022-02-14 16:46:35,281 replaced with: x = N_fixed + j.1
DEBUG 2022-02-14 16:46:35,281 on stmt: $const644.6 = const(NoneType, None)
DEBUG 2022-02-14 16:46:35,281 on stmt: $const646.7 = const(NoneType, None)
DEBUG 2022-02-14 16:46:35,281 on stmt: $648build_slice.8 = global(slice: <class 'slice'>)
DEBUG 2022-02-14 16:46:35,281 on stmt: $648build_slice.9 = call $648build_slice.8($const644.6, $const646.7, func=$648build_slice.8, args=(Var($const644.6, loop_hafnian_batch_gamma.py:81), Var($const646.7, loop_hafnian_batch_gamma.py:81)), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:46:35,281 on stmt: $652build_tuple.11 = build_tuple(items=[Var($648build_slice.9, loop_hafnian_batch_gamma.py:81), Var(j, loop_hafnian_batch_gamma.py:40)])
DEBUG 2022-02-14 16:46:35,281 find_def var='j' stmt=$652build_tuple.11 = build_tuple(items=[Var($648build_slice.9, loop_hafnian_batch_gamma.py:81), Var(j, loop_hafnian_batch_gamma.py:40)])
DEBUG 2022-02-14 16:46:35,281 replaced with: $652build_tuple.11 = build_tuple(items=[Var($648build_slice.9, loop_hafnian_batch_gamma.py:81), Var(j.1, loop_hafnian_batch_gamma.py:79)])
DEBUG 2022-02-14 16:46:35,281 on stmt: $656binary_subscr.14 = getitem(value=H_batch, index=$652build_tuple.11, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:46:35,281 on stmt: $const658.15 = const(float, 0.5)
DEBUG 2022-02-14 16:46:35,281 on stmt: $const662.17 = const(int, 2)
DEBUG 2022-02-14 16:46:35,281 on stmt: $664binary_floor_divide.18 = x // $const662.17
DEBUG 2022-02-14 16:46:35,281 on stmt: $666binary_power.19 = $const658.15 ** $664binary_floor_divide.18
DEBUG 2022-02-14 16:46:35,281 on stmt: $668inplace_multiply.20 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=$656binary_subscr.14, rhs=$666binary_power.19, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:46:35,281 on stmt: H_batch[$652build_tuple.11] = $668inplace_multiply.20
DEBUG 2022-02-14 16:46:35,281 on stmt: jump 630
DEBUG 2022-02-14 16:46:35,281 ==== SSA block rewrite pass on 678
DEBUG 2022-02-14 16:46:35,281 Running <numba.core.ssa._FixSSAVars object at 0x7f7203a2dfd0>
DEBUG 2022-02-14 16:46:35,281 on stmt: $680return_value.1 = cast(value=H_batch)
DEBUG 2022-02-14 16:46:35,281 on stmt: return $680return_value.1
DEBUG 2022-02-14 16:46:35,281 Fix SSA violator on var binom_prod
DEBUG 2022-02-14 16:46:35,281 ==== SSA block rewrite pass on 0
DEBUG 2022-02-14 16:46:35,282 Running <numba.core.ssa._FreshVarHandler object at 0x7f7203a69940>
DEBUG 2022-02-14 16:46:35,282 on stmt: A = arg(0, name=A)
DEBUG 2022-02-14 16:46:35,282 on stmt: D = arg(1, name=D)
DEBUG 2022-02-14 16:46:35,282 on stmt: fixed_edge_reps = arg(2, name=fixed_edge_reps)
DEBUG 2022-02-14 16:46:35,282 on stmt: batch_max = arg(3, name=batch_max)
DEBUG 2022-02-14 16:46:35,282 on stmt: odd_cutoff = arg(4, name=odd_cutoff)
DEBUG 2022-02-14 16:46:35,282 on stmt: glynn = arg(5, name=glynn)
DEBUG 2022-02-14 16:46:35,282 on stmt: $const4.1 = const(NoneType, None)
DEBUG 2022-02-14 16:46:35,282 on stmt: $const6.2 = const(NoneType, None)
DEBUG 2022-02-14 16:46:35,282 on stmt: $8build_slice.3 = global(slice: <class 'slice'>)
DEBUG 2022-02-14 16:46:35,282 on stmt: $8build_slice.4 = call $8build_slice.3($const4.1, $const6.2, func=$8build_slice.3, args=(Var($const4.1, loop_hafnian_batch_gamma.py:23), Var($const6.2, loop_hafnian_batch_gamma.py:23)), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:46:35,282 on stmt: $const10.5 = const(int, 0)
DEBUG 2022-02-14 16:46:35,282 on stmt: $12build_tuple.6 = build_tuple(items=[Var($8build_slice.4, loop_hafnian_batch_gamma.py:23), Var($const10.5, loop_hafnian_batch_gamma.py:23)])
DEBUG 2022-02-14 16:46:35,282 on stmt: oddloop = static_getitem(value=D, index=(slice(None, None, None), 0), index_var=$12build_tuple.6, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:46:35,282 on stmt: $const20.9 = const(int, 0)
DEBUG 2022-02-14 16:46:35,282 on stmt: $const22.10 = const(NoneType, None)
DEBUG 2022-02-14 16:46:35,282 on stmt: $const24.11 = const(NoneType, None)
DEBUG 2022-02-14 16:46:35,282 on stmt: $26build_slice.12 = global(slice: <class 'slice'>)
DEBUG 2022-02-14 16:46:35,282 on stmt: $26build_slice.13 = call $26build_slice.12($const22.10, $const24.11, func=$26build_slice.12, args=(Var($const22.10, loop_hafnian_batch_gamma.py:24), Var($const24.11, loop_hafnian_batch_gamma.py:24)), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:46:35,282 on stmt: $28build_tuple.14 = build_tuple(items=[Var($const20.9, loop_hafnian_batch_gamma.py:24), Var($26build_slice.13, loop_hafnian_batch_gamma.py:24)])
DEBUG 2022-02-14 16:46:35,282 on stmt: oddV = static_getitem(value=A, index=(0, slice(None, None, None)), index_var=$28build_tuple.14, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:46:35,282 on stmt: $36load_attr.17 = getattr(value=A, attr=shape)
DEBUG 2022-02-14 16:46:35,282 on stmt: $const38.18 = const(int, 0)
DEBUG 2022-02-14 16:46:35,282 on stmt: n = static_getitem(value=$36load_attr.17, index=0, index_var=$const38.18, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:46:35,282 on stmt: $const44.20 = const(int, 2)
DEBUG 2022-02-14 16:46:35,282 on stmt: $48load_method.22 = getattr(value=fixed_edge_reps, attr=sum)
DEBUG 2022-02-14 16:46:35,283 on stmt: $50call_method.23 = call $48load_method.22(func=$48load_method.22, args=[], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:46:35,283 on stmt: N_fixed = $const44.20 * $50call_method.23
DEBUG 2022-02-14 16:46:35,283 on stmt: $const58.26 = const(int, 2)
DEBUG 2022-02-14 16:46:35,283 on stmt: $62binary_multiply.28 = $const58.26 * batch_max
DEBUG 2022-02-14 16:46:35,283 on stmt: $64binary_add.29 = N_fixed + $62binary_multiply.28
DEBUG 2022-02-14 16:46:35,283 on stmt: N_max = $64binary_add.29 + odd_cutoff
DEBUG 2022-02-14 16:46:35,283 on stmt: $72load_global.32 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:46:35,283 on stmt: $74load_method.33 = getattr(value=$72load_global.32, attr=concatenate)
DEBUG 2022-02-14 16:46:35,283 on stmt: $76load_global.34 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:46:35,283 on stmt: $78load_method.35 = getattr(value=$76load_global.34, attr=array)
DEBUG 2022-02-14 16:46:35,283 on stmt: $82build_list.37 = build_list(items=[Var(batch_max, loop_hafnian_batch_gamma.py:23)])
DEBUG 2022-02-14 16:46:35,283 on stmt: $84call_method.38 = call $78load_method.35($82build_list.37, func=$78load_method.35, args=[Var($82build_list.37, loop_hafnian_batch_gamma.py:31)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:46:35,283 on stmt: $88build_tuple.40 = build_tuple(items=[Var($84call_method.38, loop_hafnian_batch_gamma.py:31), Var(fixed_edge_reps, loop_hafnian_batch_gamma.py:23)])
DEBUG 2022-02-14 16:46:35,283 on stmt: edge_reps = call $74load_method.33($88build_tuple.40, func=$74load_method.33, args=[Var($88build_tuple.40, loop_hafnian_batch_gamma.py:31)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:46:35,283 on stmt: $94load_global.42 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:46:35,283 on stmt: $96load_method.43 = getattr(value=$94load_global.42, attr=prod)
DEBUG 2022-02-14 16:46:35,283 on stmt: $const100.45 = const(int, 1)
DEBUG 2022-02-14 16:46:35,283 on stmt: $102binary_add.46 = edge_reps + $const100.45
DEBUG 2022-02-14 16:46:35,283 on stmt: steps = call $96load_method.43($102binary_add.46, func=$96load_method.43, args=[Var($102binary_add.46, loop_hafnian_batch_gamma.py:32)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:46:35,283 on stmt: $110load_method.49 = getattr(value=edge_reps, attr=max)
DEBUG 2022-02-14 16:46:35,283 on stmt: $112call_method.50 = call $110load_method.49(func=$110load_method.49, args=[], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:46:35,283 on stmt: max_binom = $112call_method.50 + odd_cutoff
DEBUG 2022-02-14 16:46:35,284 on stmt: $120load_global.53 = global(precompute_binoms: CPUDispatcher(<function precompute_binoms at 0x7f7207b0e280>))
DEBUG 2022-02-14 16:46:35,284 on stmt: binoms = call $120load_global.53(max_binom, func=$120load_global.53, args=[Var(max_binom, loop_hafnian_batch_gamma.py:34)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:46:35,284 on stmt: $130load_attr.57 = getattr(value=D, attr=shape)
DEBUG 2022-02-14 16:46:35,284 on stmt: $const132.58 = const(int, 0)
DEBUG 2022-02-14 16:46:35,284 on stmt: n_D = static_getitem(value=$130load_attr.57, index=0, index_var=$const132.58, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:46:35,284 on stmt: $138load_global.60 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:46:35,284 on stmt: $140load_attr.61 = getattr(value=$138load_global.60, attr=zeros)
DEBUG 2022-02-14 16:46:35,284 on stmt: $const144.63 = const(int, 2)
DEBUG 2022-02-14 16:46:35,284 on stmt: $148binary_multiply.65 = $const144.63 * batch_max
DEBUG 2022-02-14 16:46:35,284 on stmt: $152binary_add.67 = $148binary_multiply.65 + odd_cutoff
DEBUG 2022-02-14 16:46:35,284 on stmt: $const154.68 = const(int, 1)
DEBUG 2022-02-14 16:46:35,284 on stmt: $156binary_add.69 = $152binary_add.67 + $const154.68
DEBUG 2022-02-14 16:46:35,284 on stmt: $158build_tuple.70 = build_tuple(items=[Var(n_D, loop_hafnian_batch_gamma.py:36), Var($156binary_add.69, loop_hafnian_batch_gamma.py:38)])
DEBUG 2022-02-14 16:46:35,284 on stmt: $160load_global.71 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:46:35,284 on stmt: $162load_attr.72 = getattr(value=$160load_global.71, attr=complex128)
DEBUG 2022-02-14 16:46:35,284 on stmt: H_batch = call $140load_attr.61($158build_tuple.70, func=$140load_attr.61, args=[Var($158build_tuple.70, loop_hafnian_batch_gamma.py:38)], kws=[('dtype', Var($162load_attr.72, loop_hafnian_batch_gamma.py:38))], vararg=None, target=None)
DEBUG 2022-02-14 16:46:35,284 on stmt: $170load_global.75 = global(prange: <class 'numba.misc.special.prange'>)
DEBUG 2022-02-14 16:46:35,284 on stmt: $174call_function.77 = call $170load_global.75(steps, func=$170load_global.75, args=[Var(steps, loop_hafnian_batch_gamma.py:32)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:46:35,284 on stmt: $176get_iter.78 = getiter(value=$174call_function.77)
DEBUG 2022-02-14 16:46:35,284 on stmt: $phi178.0 = $176get_iter.78
DEBUG 2022-02-14 16:46:35,284 on stmt: jump 178
DEBUG 2022-02-14 16:46:35,284 ==== SSA block rewrite pass on 178
DEBUG 2022-02-14 16:46:35,284 Running <numba.core.ssa._FreshVarHandler object at 0x7f7203a69940>
DEBUG 2022-02-14 16:46:35,285 on stmt: $178for_iter.1 = iternext(value=$phi178.0)
DEBUG 2022-02-14 16:46:35,285 on stmt: $178for_iter.2 = pair_first(value=$178for_iter.1)
DEBUG 2022-02-14 16:46:35,285 on stmt: $178for_iter.3 = pair_second(value=$178for_iter.1)
DEBUG 2022-02-14 16:46:35,285 on stmt: $phi182.1 = $178for_iter.2
DEBUG 2022-02-14 16:46:35,285 on stmt: branch $178for_iter.3, 182, 610
DEBUG 2022-02-14 16:46:35,285 ==== SSA block rewrite pass on 182
DEBUG 2022-02-14 16:46:35,285 Running <numba.core.ssa._FreshVarHandler object at 0x7f7203a69940>
DEBUG 2022-02-14 16:46:35,285 on stmt: j = $phi182.1
DEBUG 2022-02-14 16:46:35,285 on stmt: $184load_global.2 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:46:35,285 on stmt: $186load_attr.3 = getattr(value=$184load_global.2, attr=zeros)
DEBUG 2022-02-14 16:46:35,285 on stmt: $const190.5 = const(int, 2)
DEBUG 2022-02-14 16:46:35,285 on stmt: $194binary_multiply.7 = $const190.5 * batch_max
DEBUG 2022-02-14 16:46:35,285 on stmt: $198binary_add.9 = $194binary_multiply.7 + odd_cutoff
DEBUG 2022-02-14 16:46:35,285 on stmt: $const200.10 = const(int, 1)
DEBUG 2022-02-14 16:46:35,285 on stmt: $202binary_add.11 = $198binary_add.9 + $const200.10
DEBUG 2022-02-14 16:46:35,285 on stmt: $204build_tuple.12 = build_tuple(items=[Var(n_D, loop_hafnian_batch_gamma.py:36), Var($202binary_add.11, loop_hafnian_batch_gamma.py:42)])
DEBUG 2022-02-14 16:46:35,285 on stmt: $206load_global.13 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:46:35,285 on stmt: $208load_attr.14 = getattr(value=$206load_global.13, attr=complex128)
DEBUG 2022-02-14 16:46:35,285 on stmt: Hnew = call $186load_attr.3($204build_tuple.12, func=$186load_attr.3, args=[Var($204build_tuple.12, loop_hafnian_batch_gamma.py:42)], kws=[('dtype', Var($208load_attr.14, loop_hafnian_batch_gamma.py:42))], vararg=None, target=None)
DEBUG 2022-02-14 16:46:35,285 on stmt: $216load_global.17 = global(find_kept_edges: CPUDispatcher(<function find_kept_edges at 0x7f7207b0e700>))
DEBUG 2022-02-14 16:46:35,285 on stmt: kept_edges = call $216load_global.17(j, edge_reps, func=$216load_global.17, args=[Var(j, loop_hafnian_batch_gamma.py:40), Var(edge_reps, loop_hafnian_batch_gamma.py:31)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:46:35,286 on stmt: $228load_method.22 = getattr(value=kept_edges, attr=sum)
DEBUG 2022-02-14 16:46:35,286 on stmt: edges_sum = call $228load_method.22(func=$228load_method.22, args=[], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:46:35,286 on stmt: binom_prod = const(float, 1.0)
DEBUG 2022-02-14 16:46:35,286 first assign: binom_prod
DEBUG 2022-02-14 16:46:35,286 replaced with: binom_prod = const(float, 1.0)
DEBUG 2022-02-14 16:46:35,286 on stmt: $238load_global.25 = global(range: <class 'range'>)
DEBUG 2022-02-14 16:46:35,286 on stmt: $const240.26 = const(int, 1)
DEBUG 2022-02-14 16:46:35,286 on stmt: $const244.28 = const(int, 2)
DEBUG 2022-02-14 16:46:35,286 on stmt: $246binary_floor_divide.29 = n // $const244.28
DEBUG 2022-02-14 16:46:35,286 on stmt: $248call_function.30 = call $238load_global.25($const240.26, $246binary_floor_divide.29, func=$238load_global.25, args=[Var($const240.26, loop_hafnian_batch_gamma.py:48), Var($246binary_floor_divide.29, loop_hafnian_batch_gamma.py:48)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:46:35,286 on stmt: $250get_iter.31 = getiter(value=$248call_function.30)
DEBUG 2022-02-14 16:46:35,286 on stmt: $phi252.1 = $250get_iter.31
DEBUG 2022-02-14 16:46:35,286 on stmt: jump 252
DEBUG 2022-02-14 16:46:35,286 ==== SSA block rewrite pass on 252
DEBUG 2022-02-14 16:46:35,286 Running <numba.core.ssa._FreshVarHandler object at 0x7f7203a69940>
DEBUG 2022-02-14 16:46:35,286 on stmt: $252for_iter.2 = iternext(value=$phi252.1)
DEBUG 2022-02-14 16:46:35,286 on stmt: $252for_iter.3 = pair_first(value=$252for_iter.2)
DEBUG 2022-02-14 16:46:35,286 on stmt: $252for_iter.4 = pair_second(value=$252for_iter.2)
DEBUG 2022-02-14 16:46:35,286 on stmt: $phi254.2 = $252for_iter.3
DEBUG 2022-02-14 16:46:35,286 on stmt: branch $252for_iter.4, 254, 282
DEBUG 2022-02-14 16:46:35,286 ==== SSA block rewrite pass on 254
DEBUG 2022-02-14 16:46:35,286 Running <numba.core.ssa._FreshVarHandler object at 0x7f7203a69940>
DEBUG 2022-02-14 16:46:35,286 on stmt: i = $phi254.2
DEBUG 2022-02-14 16:46:35,286 on stmt: $264binary_subscr.7 = getitem(value=edge_reps, index=i, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:46:35,286 on stmt: $270binary_subscr.10 = getitem(value=kept_edges, index=i, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:46:35,286 on stmt: $272build_tuple.11 = build_tuple(items=[Var($264binary_subscr.7, loop_hafnian_batch_gamma.py:49), Var($270binary_subscr.10, loop_hafnian_batch_gamma.py:49)])
DEBUG 2022-02-14 16:46:35,287 on stmt: $274binary_subscr.12 = getitem(value=binoms, index=$272build_tuple.11, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:46:35,287 on stmt: $276inplace_multiply.13 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=binom_prod, rhs=$274binary_subscr.12, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:46:35,287 on stmt: binom_prod = $276inplace_multiply.13
DEBUG 2022-02-14 16:46:35,287 replaced with: binom_prod.1 = $276inplace_multiply.13
DEBUG 2022-02-14 16:46:35,287 on stmt: jump 252
DEBUG 2022-02-14 16:46:35,287 ==== SSA block rewrite pass on 282
DEBUG 2022-02-14 16:46:35,287 Running <numba.core.ssa._FreshVarHandler object at 0x7f7203a69940>
DEBUG 2022-02-14 16:46:35,287 on stmt: bool284 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:46:35,287 on stmt: $284pred = call bool284(glynn, func=bool284, args=(Var(glynn, loop_hafnian_batch_gamma.py:23),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:46:35,287 on stmt: branch $284pred, 288, 302
DEBUG 2022-02-14 16:46:35,287 ==== SSA block rewrite pass on 288
DEBUG 2022-02-14 16:46:35,287 Running <numba.core.ssa._FreshVarHandler object at 0x7f7203a69940>
DEBUG 2022-02-14 16:46:35,287 on stmt: $const288.1 = const(int, 2)
DEBUG 2022-02-14 16:46:35,287 on stmt: $292binary_multiply.3 = $const288.1 * kept_edges
DEBUG 2022-02-14 16:46:35,287 on stmt: delta = $292binary_multiply.3 - edge_reps
DEBUG 2022-02-14 16:46:35,287 on stmt: jump 306
DEBUG 2022-02-14 16:46:35,287 ==== SSA block rewrite pass on 302
DEBUG 2022-02-14 16:46:35,287 Running <numba.core.ssa._FreshVarHandler object at 0x7f7203a69940>
DEBUG 2022-02-14 16:46:35,287 on stmt: delta.1 = kept_edges
DEBUG 2022-02-14 16:46:35,287 on stmt: jump 306
DEBUG 2022-02-14 16:46:35,287 ==== SSA block rewrite pass on 306
DEBUG 2022-02-14 16:46:35,287 Running <numba.core.ssa._FreshVarHandler object at 0x7f7203a69940>
DEBUG 2022-02-14 16:46:35,287 on stmt: delta.2 = phi(incoming_values=[Var(delta, loop_hafnian_batch_gamma.py:52), Var(delta.1, loop_hafnian_batch_gamma.py:54)], incoming_blocks=[288, 302])
DEBUG 2022-02-14 16:46:35,287 on stmt: $306load_global.1 = global(get_submatrices: CPUDispatcher(<function get_submatrices at 0x7f7207b0eca0>))
DEBUG 2022-02-14 16:46:35,287 on stmt: $const314.5 = const(int, 0)
DEBUG 2022-02-14 16:46:35,287 on stmt: $const316.6 = const(NoneType, None)
DEBUG 2022-02-14 16:46:35,287 on stmt: $const318.7 = const(NoneType, None)
DEBUG 2022-02-14 16:46:35,288 on stmt: $320build_slice.8 = global(slice: <class 'slice'>)
DEBUG 2022-02-14 16:46:35,288 on stmt: $320build_slice.9 = call $320build_slice.8($const316.6, $const318.7, func=$320build_slice.8, args=(Var($const316.6, loop_hafnian_batch_gamma.py:56), Var($const318.7, loop_hafnian_batch_gamma.py:56)), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:46:35,288 on stmt: $322build_tuple.10 = build_tuple(items=[Var($const314.5, loop_hafnian_batch_gamma.py:56), Var($320build_slice.9, loop_hafnian_batch_gamma.py:56)])
DEBUG 2022-02-14 16:46:35,288 on stmt: $324binary_subscr.11 = static_getitem(value=D, index=(0, slice(None, None, None)), index_var=$322build_tuple.10, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:46:35,288 on stmt: $328call_function.13 = call $306load_global.1(delta.2, A, $324binary_subscr.11, oddV, func=$306load_global.1, args=[Var(delta.2, loop_hafnian_batch_gamma.py:56), Var(A, loop_hafnian_batch_gamma.py:23), Var($324binary_subscr.11, loop_hafnian_batch_gamma.py:56), Var(oddV, loop_hafnian_batch_gamma.py:24)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:46:35,288 on stmt: $330unpack_sequence.18 = exhaust_iter(value=$328call_function.13, count=4)
DEBUG 2022-02-14 16:46:35,288 on stmt: $330unpack_sequence.14 = static_getitem(value=$330unpack_sequence.18, index=0, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:46:35,288 on stmt: $330unpack_sequence.15 = static_getitem(value=$330unpack_sequence.18, index=1, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:46:35,288 on stmt: $330unpack_sequence.16 = static_getitem(value=$330unpack_sequence.18, index=2, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:46:35,288 on stmt: $330unpack_sequence.17 = static_getitem(value=$330unpack_sequence.18, index=3, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:46:35,288 on stmt: AX_S = $330unpack_sequence.14
DEBUG 2022-02-14 16:46:35,288 on stmt: XD_S = $330unpack_sequence.15
DEBUG 2022-02-14 16:46:35,288 on stmt: D_S = $330unpack_sequence.16
DEBUG 2022-02-14 16:46:35,288 on stmt: oddVX_S = $330unpack_sequence.17
DEBUG 2022-02-14 16:46:35,288 on stmt: $340load_global.19 = global(eigvals: CPUDispatcher(<function eigvals at 0x7f7207a993a0>))
DEBUG 2022-02-14 16:46:35,288 on stmt: E = call $340load_global.19(AX_S, func=$340load_global.19, args=[Var(AX_S, loop_hafnian_batch_gamma.py:56)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:46:35,288 on stmt: $348load_global.22 = global(range: <class 'range'>)
DEBUG 2022-02-14 16:46:35,288 on stmt: $352call_function.24 = call $348load_global.22(n_D, func=$348load_global.22, args=[Var(n_D, loop_hafnian_batch_gamma.py:36)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:46:35,288 on stmt: $354get_iter.25 = getiter(value=$352call_function.24)
DEBUG 2022-02-14 16:46:35,288 on stmt: $phi356.1 = $354get_iter.25
DEBUG 2022-02-14 16:46:35,288 on stmt: jump 356
DEBUG 2022-02-14 16:46:35,288 ==== SSA block rewrite pass on 356
DEBUG 2022-02-14 16:46:35,288 Running <numba.core.ssa._FreshVarHandler object at 0x7f7203a69940>
DEBUG 2022-02-14 16:46:35,288 on stmt: $356for_iter.2 = iternext(value=$phi356.1)
DEBUG 2022-02-14 16:46:35,288 on stmt: $356for_iter.3 = pair_first(value=$356for_iter.2)
DEBUG 2022-02-14 16:46:35,288 on stmt: $356for_iter.4 = pair_second(value=$356for_iter.2)
DEBUG 2022-02-14 16:46:35,289 on stmt: $phi358.2 = $356for_iter.3
DEBUG 2022-02-14 16:46:35,289 on stmt: branch $356for_iter.4, 358, 600
DEBUG 2022-02-14 16:46:35,289 ==== SSA block rewrite pass on 358
DEBUG 2022-02-14 16:46:35,289 Running <numba.core.ssa._FreshVarHandler object at 0x7f7203a69940>
DEBUG 2022-02-14 16:46:35,289 on stmt: k = $phi358.2
DEBUG 2022-02-14 16:46:35,289 on stmt: $360load_global.3 = global(get_Dsubmatrices: CPUDispatcher(<function get_Dsubmatrices at 0x7f7207a99160>))
DEBUG 2022-02-14 16:46:35,289 on stmt: $const368.7 = const(NoneType, None)
DEBUG 2022-02-14 16:46:35,289 on stmt: $const370.8 = const(NoneType, None)
DEBUG 2022-02-14 16:46:35,289 on stmt: $372build_slice.9 = global(slice: <class 'slice'>)
DEBUG 2022-02-14 16:46:35,289 on stmt: $372build_slice.10 = call $372build_slice.9($const368.7, $const370.8, func=$372build_slice.9, args=(Var($const368.7, loop_hafnian_batch_gamma.py:61), Var($const370.8, loop_hafnian_batch_gamma.py:61)), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:46:35,289 on stmt: $374build_tuple.11 = build_tuple(items=[Var(k, loop_hafnian_batch_gamma.py:60), Var($372build_slice.10, loop_hafnian_batch_gamma.py:61)])
DEBUG 2022-02-14 16:46:35,289 on stmt: $376binary_subscr.12 = getitem(value=D, index=$374build_tuple.11, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:46:35,289 on stmt: $378call_function.13 = call $360load_global.3(delta.2, $376binary_subscr.12, func=$360load_global.3, args=[Var(delta.2, loop_hafnian_batch_gamma.py:56), Var($376binary_subscr.12, loop_hafnian_batch_gamma.py:61)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:46:35,289 on stmt: $380unpack_sequence.16 = exhaust_iter(value=$378call_function.13, count=2)
DEBUG 2022-02-14 16:46:35,289 on stmt: $380unpack_sequence.14 = static_getitem(value=$380unpack_sequence.16, index=0, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:46:35,289 on stmt: $380unpack_sequence.15 = static_getitem(value=$380unpack_sequence.16, index=1, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:46:35,289 on stmt: XD_S = $380unpack_sequence.14
DEBUG 2022-02-14 16:46:35,289 on stmt: D_S = $380unpack_sequence.15
DEBUG 2022-02-14 16:46:35,289 on stmt: $386load_global.17 = global(f_loop: CPUDispatcher(<function f_loop at 0x7f7207b0e940>))
DEBUG 2022-02-14 16:46:35,289 on stmt: f_even = call $386load_global.17(E, AX_S, XD_S, D_S, N_max, func=$386load_global.17, args=[Var(E, loop_hafnian_batch_gamma.py:58), Var(AX_S, loop_hafnian_batch_gamma.py:56), Var(XD_S, loop_hafnian_batch_gamma.py:56), Var(D_S, loop_hafnian_batch_gamma.py:56), Var(N_max, loop_hafnian_batch_gamma.py:29)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:46:35,289 on stmt: $402load_global.24 = global(f_loop_odd: CPUDispatcher(<function f_loop_odd at 0x7f7207b0eaf0>))
DEBUG 2022-02-14 16:46:35,289 on stmt: $418binary_subscr.32 = getitem(value=oddloop, index=k, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:46:35,289 on stmt: f_odd = call $402load_global.24(E, AX_S, XD_S, D_S, N_max, $418binary_subscr.32, oddVX_S, func=$402load_global.24, args=[Var(E, loop_hafnian_batch_gamma.py:58), Var(AX_S, loop_hafnian_batch_gamma.py:56), Var(XD_S, loop_hafnian_batch_gamma.py:56), Var(D_S, loop_hafnian_batch_gamma.py:56), Var(N_max, loop_hafnian_batch_gamma.py:29), Var($418binary_subscr.32, loop_hafnian_batch_gamma.py:64), Var(oddVX_S, loop_hafnian_batch_gamma.py:56)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:46:35,290 on stmt: $426load_global.35 = global(range: <class 'range'>)
DEBUG 2022-02-14 16:46:35,290 on stmt: $const428.36 = const(int, 2)
DEBUG 2022-02-14 16:46:35,290 on stmt: $const432.38 = const(int, 0)
DEBUG 2022-02-14 16:46:35,290 on stmt: $434binary_subscr.39 = static_getitem(value=kept_edges, index=0, index_var=$const432.38, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:46:35,290 on stmt: $436binary_multiply.40 = $const428.36 * $434binary_subscr.39
DEBUG 2022-02-14 16:46:35,290 on stmt: $const438.41 = const(int, 2)
DEBUG 2022-02-14 16:46:35,290 on stmt: $442binary_multiply.43 = $const438.41 * batch_max
DEBUG 2022-02-14 16:46:35,290 on stmt: $446binary_add.45 = $442binary_multiply.43 + odd_cutoff
DEBUG 2022-02-14 16:46:35,290 on stmt: $const448.46 = const(int, 1)
DEBUG 2022-02-14 16:46:35,290 on stmt: $450binary_add.47 = $446binary_add.45 + $const448.46
DEBUG 2022-02-14 16:46:35,290 on stmt: $452call_function.48 = call $426load_global.35($436binary_multiply.40, $450binary_add.47, func=$426load_global.35, args=[Var($436binary_multiply.40, loop_hafnian_batch_gamma.py:66), Var($450binary_add.47, loop_hafnian_batch_gamma.py:66)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:46:35,290 on stmt: $454get_iter.49 = getiter(value=$452call_function.48)
DEBUG 2022-02-14 16:46:35,290 on stmt: $phi456.2 = $454get_iter.49
DEBUG 2022-02-14 16:46:35,290 on stmt: jump 456
DEBUG 2022-02-14 16:46:35,290 ==== SSA block rewrite pass on 456
DEBUG 2022-02-14 16:46:35,290 Running <numba.core.ssa._FreshVarHandler object at 0x7f7203a69940>
DEBUG 2022-02-14 16:46:35,290 on stmt: $456for_iter.3 = iternext(value=$phi456.2)
DEBUG 2022-02-14 16:46:35,290 on stmt: $456for_iter.4 = pair_first(value=$456for_iter.3)
DEBUG 2022-02-14 16:46:35,290 on stmt: $456for_iter.5 = pair_second(value=$456for_iter.3)
DEBUG 2022-02-14 16:46:35,290 on stmt: $phi458.3 = $456for_iter.4
DEBUG 2022-02-14 16:46:35,290 on stmt: branch $456for_iter.5, 458, 596
DEBUG 2022-02-14 16:46:35,290 ==== SSA block rewrite pass on 458
DEBUG 2022-02-14 16:46:35,290 Running <numba.core.ssa._FreshVarHandler object at 0x7f7203a69940>
DEBUG 2022-02-14 16:46:35,290 on stmt: N_det = $phi458.3
DEBUG 2022-02-14 16:46:35,290 on stmt: N = N_fixed + N_det
DEBUG 2022-02-14 16:46:35,290 on stmt: $const468.7 = const(float, -1.0)
DEBUG 2022-02-14 16:46:35,290 on stmt: $const472.9 = const(int, 2)
DEBUG 2022-02-14 16:46:35,291 on stmt: $474binary_floor_divide.10 = N // $const472.9
DEBUG 2022-02-14 16:46:35,291 on stmt: $478binary_subtract.12 = $474binary_floor_divide.10 - edges_sum
DEBUG 2022-02-14 16:46:35,291 on stmt: plus_minus = $const468.7 ** $478binary_subtract.12
DEBUG 2022-02-14 16:46:35,291 on stmt: $const488.16 = const(int, 2)
DEBUG 2022-02-14 16:46:35,291 on stmt: $490binary_floor_divide.17 = N_det // $const488.16
DEBUG 2022-02-14 16:46:35,291 on stmt: $const494.19 = const(int, 0)
DEBUG 2022-02-14 16:46:35,291 on stmt: $496binary_subscr.20 = static_getitem(value=kept_edges, index=0, index_var=$const494.19, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:46:35,291 on stmt: $498build_tuple.21 = build_tuple(items=[Var($490binary_floor_divide.17, loop_hafnian_batch_gamma.py:70), Var($496binary_subscr.20, loop_hafnian_batch_gamma.py:70)])
DEBUG 2022-02-14 16:46:35,291 on stmt: $500binary_subscr.22 = getitem(value=binoms, index=$498build_tuple.21, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:46:35,291 on stmt: n_det_binom_prod = $500binary_subscr.22 * binom_prod
DEBUG 2022-02-14 16:46:35,291 on stmt: $const510.26 = const(int, 2)
DEBUG 2022-02-14 16:46:35,291 on stmt: $512binary_modulo.27 = N_det % $const510.26
DEBUG 2022-02-14 16:46:35,291 on stmt: $const514.28 = const(int, 0)
DEBUG 2022-02-14 16:46:35,291 on stmt: $516compare_op.29 = $512binary_modulo.27 == $const514.28
DEBUG 2022-02-14 16:46:35,291 on stmt: bool518 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:46:35,291 on stmt: $518pred = call bool518($516compare_op.29, func=bool518, args=(Var($516compare_op.29, loop_hafnian_batch_gamma.py:72),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:46:35,291 on stmt: branch $518pred, 522, 560
DEBUG 2022-02-14 16:46:35,291 ==== SSA block rewrite pass on 522
DEBUG 2022-02-14 16:46:35,291 Running <numba.core.ssa._FreshVarHandler object at 0x7f7203a69940>
DEBUG 2022-02-14 16:46:35,291 on stmt: $528build_tuple.6 = build_tuple(items=[Var(k, loop_hafnian_batch_gamma.py:60), Var(N_det, loop_hafnian_batch_gamma.py:66)])
DEBUG 2022-02-14 16:46:35,291 on stmt: $532binary_subscr.9 = getitem(value=Hnew, index=$528build_tuple.6, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:46:35,291 on stmt: $538binary_multiply.12 = n_det_binom_prod * plus_minus
DEBUG 2022-02-14 16:46:35,291 on stmt: $const544.15 = const(int, 2)
DEBUG 2022-02-14 16:46:35,291 on stmt: $546binary_floor_divide.16 = N // $const544.15
DEBUG 2022-02-14 16:46:35,291 on stmt: $548binary_subscr.17 = getitem(value=f_even, index=$546binary_floor_divide.16, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:46:35,291 on stmt: $550binary_multiply.18 = $538binary_multiply.12 * $548binary_subscr.17
DEBUG 2022-02-14 16:46:35,292 on stmt: $552inplace_add.19 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$532binary_subscr.9, rhs=$550binary_multiply.18, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:46:35,292 on stmt: Hnew[$528build_tuple.6] = $552inplace_add.19
DEBUG 2022-02-14 16:46:35,292 on stmt: jump 592
DEBUG 2022-02-14 16:46:35,292 ==== SSA block rewrite pass on 560
DEBUG 2022-02-14 16:46:35,292 Running <numba.core.ssa._FreshVarHandler object at 0x7f7203a69940>
DEBUG 2022-02-14 16:46:35,292 on stmt: $566build_tuple.6 = build_tuple(items=[Var(k, loop_hafnian_batch_gamma.py:60), Var(N_det, loop_hafnian_batch_gamma.py:66)])
DEBUG 2022-02-14 16:46:35,292 on stmt: $570binary_subscr.9 = getitem(value=Hnew, index=$566build_tuple.6, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:46:35,292 on stmt: $576binary_multiply.12 = n_det_binom_prod * plus_minus
DEBUG 2022-02-14 16:46:35,292 on stmt: $582binary_subscr.15 = getitem(value=f_odd, index=N, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:46:35,292 on stmt: $584binary_multiply.16 = $576binary_multiply.12 * $582binary_subscr.15
DEBUG 2022-02-14 16:46:35,292 on stmt: $586inplace_add.17 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$570binary_subscr.9, rhs=$584binary_multiply.16, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:46:35,292 on stmt: Hnew[$566build_tuple.6] = $586inplace_add.17
DEBUG 2022-02-14 16:46:35,292 on stmt: jump 592
DEBUG 2022-02-14 16:46:35,292 ==== SSA block rewrite pass on 592
DEBUG 2022-02-14 16:46:35,292 Running <numba.core.ssa._FreshVarHandler object at 0x7f7203a69940>
DEBUG 2022-02-14 16:46:35,292 on stmt: jump 456
DEBUG 2022-02-14 16:46:35,292 ==== SSA block rewrite pass on 596
DEBUG 2022-02-14 16:46:35,292 Running <numba.core.ssa._FreshVarHandler object at 0x7f7203a69940>
DEBUG 2022-02-14 16:46:35,292 on stmt: jump 356
DEBUG 2022-02-14 16:46:35,292 ==== SSA block rewrite pass on 600
DEBUG 2022-02-14 16:46:35,292 Running <numba.core.ssa._FreshVarHandler object at 0x7f7203a69940>
DEBUG 2022-02-14 16:46:35,292 on stmt: $604inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=H_batch, rhs=Hnew, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:46:35,292 on stmt: H_batch = $604inplace_add.3
DEBUG 2022-02-14 16:46:35,292 on stmt: jump 178
DEBUG 2022-02-14 16:46:35,292 ==== SSA block rewrite pass on 610
DEBUG 2022-02-14 16:46:35,292 Running <numba.core.ssa._FreshVarHandler object at 0x7f7203a69940>
DEBUG 2022-02-14 16:46:35,292 on stmt: bool612 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:46:35,292 on stmt: $612pred = call bool612(glynn, func=bool612, args=(Var(glynn, loop_hafnian_batch_gamma.py:23),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:46:35,292 on stmt: branch $612pred, 616, 678
DEBUG 2022-02-14 16:46:35,293 ==== SSA block rewrite pass on 616
DEBUG 2022-02-14 16:46:35,293 Running <numba.core.ssa._FreshVarHandler object at 0x7f7203a69940>
DEBUG 2022-02-14 16:46:35,293 on stmt: $616load_global.0 = global(range: <class 'range'>)
DEBUG 2022-02-14 16:46:35,293 on stmt: $620load_attr.2 = getattr(value=H_batch, attr=shape)
DEBUG 2022-02-14 16:46:35,293 on stmt: $const622.3 = const(int, 1)
DEBUG 2022-02-14 16:46:35,293 on stmt: $624binary_subscr.4 = static_getitem(value=$620load_attr.2, index=1, index_var=$const622.3, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:46:35,293 on stmt: $626call_function.5 = call $616load_global.0($624binary_subscr.4, func=$616load_global.0, args=[Var($624binary_subscr.4, loop_hafnian_batch_gamma.py:79)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:46:35,293 on stmt: $628get_iter.6 = getiter(value=$626call_function.5)
DEBUG 2022-02-14 16:46:35,293 on stmt: $phi630.0 = $628get_iter.6
DEBUG 2022-02-14 16:46:35,293 on stmt: jump 630
DEBUG 2022-02-14 16:46:35,293 ==== SSA block rewrite pass on 630
DEBUG 2022-02-14 16:46:35,293 Running <numba.core.ssa._FreshVarHandler object at 0x7f7203a69940>
DEBUG 2022-02-14 16:46:35,293 on stmt: $630for_iter.1 = iternext(value=$phi630.0)
DEBUG 2022-02-14 16:46:35,293 on stmt: $630for_iter.2 = pair_first(value=$630for_iter.1)
DEBUG 2022-02-14 16:46:35,293 on stmt: $630for_iter.3 = pair_second(value=$630for_iter.1)
DEBUG 2022-02-14 16:46:35,293 on stmt: $phi632.1 = $630for_iter.2
DEBUG 2022-02-14 16:46:35,293 on stmt: branch $630for_iter.3, 632, 678
DEBUG 2022-02-14 16:46:35,293 ==== SSA block rewrite pass on 632
DEBUG 2022-02-14 16:46:35,293 Running <numba.core.ssa._FreshVarHandler object at 0x7f7203a69940>
DEBUG 2022-02-14 16:46:35,293 on stmt: j.1 = $phi632.1
DEBUG 2022-02-14 16:46:35,294 on stmt: x = N_fixed + j.1
DEBUG 2022-02-14 16:46:35,294 on stmt: $const644.6 = const(NoneType, None)
DEBUG 2022-02-14 16:46:35,294 on stmt: $const646.7 = const(NoneType, None)
DEBUG 2022-02-14 16:46:35,294 on stmt: $648build_slice.8 = global(slice: <class 'slice'>)
DEBUG 2022-02-14 16:46:35,294 on stmt: $648build_slice.9 = call $648build_slice.8($const644.6, $const646.7, func=$648build_slice.8, args=(Var($const644.6, loop_hafnian_batch_gamma.py:81), Var($const646.7, loop_hafnian_batch_gamma.py:81)), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:46:35,294 on stmt: $652build_tuple.11 = build_tuple(items=[Var($648build_slice.9, loop_hafnian_batch_gamma.py:81), Var(j.1, loop_hafnian_batch_gamma.py:79)])
DEBUG 2022-02-14 16:46:35,294 on stmt: $656binary_subscr.14 = getitem(value=H_batch, index=$652build_tuple.11, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:46:35,294 on stmt: $const658.15 = const(float, 0.5)
DEBUG 2022-02-14 16:46:35,294 on stmt: $const662.17 = const(int, 2)
DEBUG 2022-02-14 16:46:35,294 on stmt: $664binary_floor_divide.18 = x // $const662.17
DEBUG 2022-02-14 16:46:35,294 on stmt: $666binary_power.19 = $const658.15 ** $664binary_floor_divide.18
DEBUG 2022-02-14 16:46:35,294 on stmt: $668inplace_multiply.20 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=$656binary_subscr.14, rhs=$666binary_power.19, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:46:35,294 on stmt: H_batch[$652build_tuple.11] = $668inplace_multiply.20
DEBUG 2022-02-14 16:46:35,294 on stmt: jump 630
DEBUG 2022-02-14 16:46:35,294 ==== SSA block rewrite pass on 678
DEBUG 2022-02-14 16:46:35,294 Running <numba.core.ssa._FreshVarHandler object at 0x7f7203a69940>
DEBUG 2022-02-14 16:46:35,294 on stmt: $680return_value.1 = cast(value=H_batch)
DEBUG 2022-02-14 16:46:35,294 on stmt: return $680return_value.1
DEBUG 2022-02-14 16:46:35,294 Replaced assignments: defaultdict(<class 'list'>,
            {182: [<numba.core.ir.Assign object at 0x7f72073bcf40>],
             254: [<numba.core.ir.Assign object at 0x7f7203a2d160>]})
DEBUG 2022-02-14 16:46:35,294 ==== SSA block rewrite pass on 0
DEBUG 2022-02-14 16:46:35,294 Running <numba.core.ssa._FixSSAVars object at 0x7f72073bce20>
DEBUG 2022-02-14 16:46:35,294 on stmt: A = arg(0, name=A)
DEBUG 2022-02-14 16:46:35,294 on stmt: D = arg(1, name=D)
DEBUG 2022-02-14 16:46:35,295 on stmt: fixed_edge_reps = arg(2, name=fixed_edge_reps)
DEBUG 2022-02-14 16:46:35,295 on stmt: batch_max = arg(3, name=batch_max)
DEBUG 2022-02-14 16:46:35,295 on stmt: odd_cutoff = arg(4, name=odd_cutoff)
DEBUG 2022-02-14 16:46:35,295 on stmt: glynn = arg(5, name=glynn)
DEBUG 2022-02-14 16:46:35,295 on stmt: $const4.1 = const(NoneType, None)
DEBUG 2022-02-14 16:46:35,295 on stmt: $const6.2 = const(NoneType, None)
DEBUG 2022-02-14 16:46:35,295 on stmt: $8build_slice.3 = global(slice: <class 'slice'>)
DEBUG 2022-02-14 16:46:35,295 on stmt: $8build_slice.4 = call $8build_slice.3($const4.1, $const6.2, func=$8build_slice.3, args=(Var($const4.1, loop_hafnian_batch_gamma.py:23), Var($const6.2, loop_hafnian_batch_gamma.py:23)), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:46:35,295 on stmt: $const10.5 = const(int, 0)
DEBUG 2022-02-14 16:46:35,295 on stmt: $12build_tuple.6 = build_tuple(items=[Var($8build_slice.4, loop_hafnian_batch_gamma.py:23), Var($const10.5, loop_hafnian_batch_gamma.py:23)])
DEBUG 2022-02-14 16:46:35,295 on stmt: oddloop = static_getitem(value=D, index=(slice(None, None, None), 0), index_var=$12build_tuple.6, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:46:35,295 on stmt: $const20.9 = const(int, 0)
DEBUG 2022-02-14 16:46:35,295 on stmt: $const22.10 = const(NoneType, None)
DEBUG 2022-02-14 16:46:35,295 on stmt: $const24.11 = const(NoneType, None)
DEBUG 2022-02-14 16:46:35,295 on stmt: $26build_slice.12 = global(slice: <class 'slice'>)
DEBUG 2022-02-14 16:46:35,295 on stmt: $26build_slice.13 = call $26build_slice.12($const22.10, $const24.11, func=$26build_slice.12, args=(Var($const22.10, loop_hafnian_batch_gamma.py:24), Var($const24.11, loop_hafnian_batch_gamma.py:24)), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:46:35,295 on stmt: $28build_tuple.14 = build_tuple(items=[Var($const20.9, loop_hafnian_batch_gamma.py:24), Var($26build_slice.13, loop_hafnian_batch_gamma.py:24)])
DEBUG 2022-02-14 16:46:35,295 on stmt: oddV = static_getitem(value=A, index=(0, slice(None, None, None)), index_var=$28build_tuple.14, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:46:35,295 on stmt: $36load_attr.17 = getattr(value=A, attr=shape)
DEBUG 2022-02-14 16:46:35,295 on stmt: $const38.18 = const(int, 0)
DEBUG 2022-02-14 16:46:35,295 on stmt: n = static_getitem(value=$36load_attr.17, index=0, index_var=$const38.18, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:46:35,295 on stmt: $const44.20 = const(int, 2)
DEBUG 2022-02-14 16:46:35,295 on stmt: $48load_method.22 = getattr(value=fixed_edge_reps, attr=sum)
DEBUG 2022-02-14 16:46:35,295 on stmt: $50call_method.23 = call $48load_method.22(func=$48load_method.22, args=[], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:46:35,296 on stmt: N_fixed = $const44.20 * $50call_method.23
DEBUG 2022-02-14 16:46:35,296 on stmt: $const58.26 = const(int, 2)
DEBUG 2022-02-14 16:46:35,296 on stmt: $62binary_multiply.28 = $const58.26 * batch_max
DEBUG 2022-02-14 16:46:35,296 on stmt: $64binary_add.29 = N_fixed + $62binary_multiply.28
DEBUG 2022-02-14 16:46:35,296 on stmt: N_max = $64binary_add.29 + odd_cutoff
DEBUG 2022-02-14 16:46:35,296 on stmt: $72load_global.32 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:46:35,296 on stmt: $74load_method.33 = getattr(value=$72load_global.32, attr=concatenate)
DEBUG 2022-02-14 16:46:35,296 on stmt: $76load_global.34 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:46:35,296 on stmt: $78load_method.35 = getattr(value=$76load_global.34, attr=array)
DEBUG 2022-02-14 16:46:35,296 on stmt: $82build_list.37 = build_list(items=[Var(batch_max, loop_hafnian_batch_gamma.py:23)])
DEBUG 2022-02-14 16:46:35,296 on stmt: $84call_method.38 = call $78load_method.35($82build_list.37, func=$78load_method.35, args=[Var($82build_list.37, loop_hafnian_batch_gamma.py:31)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:46:35,296 on stmt: $88build_tuple.40 = build_tuple(items=[Var($84call_method.38, loop_hafnian_batch_gamma.py:31), Var(fixed_edge_reps, loop_hafnian_batch_gamma.py:23)])
DEBUG 2022-02-14 16:46:35,296 on stmt: edge_reps = call $74load_method.33($88build_tuple.40, func=$74load_method.33, args=[Var($88build_tuple.40, loop_hafnian_batch_gamma.py:31)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:46:35,296 on stmt: $94load_global.42 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:46:35,296 on stmt: $96load_method.43 = getattr(value=$94load_global.42, attr=prod)
DEBUG 2022-02-14 16:46:35,296 on stmt: $const100.45 = const(int, 1)
DEBUG 2022-02-14 16:46:35,296 on stmt: $102binary_add.46 = edge_reps + $const100.45
DEBUG 2022-02-14 16:46:35,296 on stmt: steps = call $96load_method.43($102binary_add.46, func=$96load_method.43, args=[Var($102binary_add.46, loop_hafnian_batch_gamma.py:32)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:46:35,296 on stmt: $110load_method.49 = getattr(value=edge_reps, attr=max)
DEBUG 2022-02-14 16:46:35,296 on stmt: $112call_method.50 = call $110load_method.49(func=$110load_method.49, args=[], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:46:35,296 on stmt: max_binom = $112call_method.50 + odd_cutoff
DEBUG 2022-02-14 16:46:35,296 on stmt: $120load_global.53 = global(precompute_binoms: CPUDispatcher(<function precompute_binoms at 0x7f7207b0e280>))
DEBUG 2022-02-14 16:46:35,296 on stmt: binoms = call $120load_global.53(max_binom, func=$120load_global.53, args=[Var(max_binom, loop_hafnian_batch_gamma.py:34)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:46:35,297 on stmt: $130load_attr.57 = getattr(value=D, attr=shape)
DEBUG 2022-02-14 16:46:35,297 on stmt: $const132.58 = const(int, 0)
DEBUG 2022-02-14 16:46:35,297 on stmt: n_D = static_getitem(value=$130load_attr.57, index=0, index_var=$const132.58, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:46:35,297 on stmt: $138load_global.60 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:46:35,297 on stmt: $140load_attr.61 = getattr(value=$138load_global.60, attr=zeros)
DEBUG 2022-02-14 16:46:35,297 on stmt: $const144.63 = const(int, 2)
DEBUG 2022-02-14 16:46:35,297 on stmt: $148binary_multiply.65 = $const144.63 * batch_max
DEBUG 2022-02-14 16:46:35,297 on stmt: $152binary_add.67 = $148binary_multiply.65 + odd_cutoff
DEBUG 2022-02-14 16:46:35,297 on stmt: $const154.68 = const(int, 1)
DEBUG 2022-02-14 16:46:35,297 on stmt: $156binary_add.69 = $152binary_add.67 + $const154.68
DEBUG 2022-02-14 16:46:35,297 on stmt: $158build_tuple.70 = build_tuple(items=[Var(n_D, loop_hafnian_batch_gamma.py:36), Var($156binary_add.69, loop_hafnian_batch_gamma.py:38)])
DEBUG 2022-02-14 16:46:35,297 on stmt: $160load_global.71 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:46:35,297 on stmt: $162load_attr.72 = getattr(value=$160load_global.71, attr=complex128)
DEBUG 2022-02-14 16:46:35,297 on stmt: H_batch = call $140load_attr.61($158build_tuple.70, func=$140load_attr.61, args=[Var($158build_tuple.70, loop_hafnian_batch_gamma.py:38)], kws=[('dtype', Var($162load_attr.72, loop_hafnian_batch_gamma.py:38))], vararg=None, target=None)
DEBUG 2022-02-14 16:46:35,297 on stmt: $170load_global.75 = global(prange: <class 'numba.misc.special.prange'>)
DEBUG 2022-02-14 16:46:35,297 on stmt: $174call_function.77 = call $170load_global.75(steps, func=$170load_global.75, args=[Var(steps, loop_hafnian_batch_gamma.py:32)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:46:35,297 on stmt: $176get_iter.78 = getiter(value=$174call_function.77)
DEBUG 2022-02-14 16:46:35,297 on stmt: $phi178.0 = $176get_iter.78
DEBUG 2022-02-14 16:46:35,297 on stmt: jump 178
DEBUG 2022-02-14 16:46:35,297 ==== SSA block rewrite pass on 178
DEBUG 2022-02-14 16:46:35,297 Running <numba.core.ssa._FixSSAVars object at 0x7f72073bce20>
DEBUG 2022-02-14 16:46:35,298 on stmt: $178for_iter.1 = iternext(value=$phi178.0)
DEBUG 2022-02-14 16:46:35,298 on stmt: $178for_iter.2 = pair_first(value=$178for_iter.1)
DEBUG 2022-02-14 16:46:35,298 on stmt: $178for_iter.3 = pair_second(value=$178for_iter.1)
DEBUG 2022-02-14 16:46:35,298 on stmt: $phi182.1 = $178for_iter.2
DEBUG 2022-02-14 16:46:35,298 on stmt: branch $178for_iter.3, 182, 610
DEBUG 2022-02-14 16:46:35,298 ==== SSA block rewrite pass on 182
DEBUG 2022-02-14 16:46:35,298 Running <numba.core.ssa._FixSSAVars object at 0x7f72073bce20>
DEBUG 2022-02-14 16:46:35,298 on stmt: j = $phi182.1
DEBUG 2022-02-14 16:46:35,298 on stmt: $184load_global.2 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:46:35,298 on stmt: $186load_attr.3 = getattr(value=$184load_global.2, attr=zeros)
DEBUG 2022-02-14 16:46:35,298 on stmt: $const190.5 = const(int, 2)
DEBUG 2022-02-14 16:46:35,298 on stmt: $194binary_multiply.7 = $const190.5 * batch_max
DEBUG 2022-02-14 16:46:35,298 on stmt: $198binary_add.9 = $194binary_multiply.7 + odd_cutoff
DEBUG 2022-02-14 16:46:35,298 on stmt: $const200.10 = const(int, 1)
DEBUG 2022-02-14 16:46:35,298 on stmt: $202binary_add.11 = $198binary_add.9 + $const200.10
DEBUG 2022-02-14 16:46:35,298 on stmt: $204build_tuple.12 = build_tuple(items=[Var(n_D, loop_hafnian_batch_gamma.py:36), Var($202binary_add.11, loop_hafnian_batch_gamma.py:42)])
DEBUG 2022-02-14 16:46:35,298 on stmt: $206load_global.13 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:46:35,298 on stmt: $208load_attr.14 = getattr(value=$206load_global.13, attr=complex128)
DEBUG 2022-02-14 16:46:35,298 on stmt: Hnew = call $186load_attr.3($204build_tuple.12, func=$186load_attr.3, args=[Var($204build_tuple.12, loop_hafnian_batch_gamma.py:42)], kws=[('dtype', Var($208load_attr.14, loop_hafnian_batch_gamma.py:42))], vararg=None, target=None)
DEBUG 2022-02-14 16:46:35,298 on stmt: $216load_global.17 = global(find_kept_edges: CPUDispatcher(<function find_kept_edges at 0x7f7207b0e700>))
DEBUG 2022-02-14 16:46:35,298 on stmt: kept_edges = call $216load_global.17(j, edge_reps, func=$216load_global.17, args=[Var(j, loop_hafnian_batch_gamma.py:40), Var(edge_reps, loop_hafnian_batch_gamma.py:31)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:46:35,298 on stmt: $228load_method.22 = getattr(value=kept_edges, attr=sum)
DEBUG 2022-02-14 16:46:35,298 on stmt: edges_sum = call $228load_method.22(func=$228load_method.22, args=[], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:46:35,299 on stmt: binom_prod = const(float, 1.0)
DEBUG 2022-02-14 16:46:35,299 on stmt: $238load_global.25 = global(range: <class 'range'>)
DEBUG 2022-02-14 16:46:35,299 on stmt: $const240.26 = const(int, 1)
DEBUG 2022-02-14 16:46:35,299 on stmt: $const244.28 = const(int, 2)
DEBUG 2022-02-14 16:46:35,299 on stmt: $246binary_floor_divide.29 = n // $const244.28
DEBUG 2022-02-14 16:46:35,299 on stmt: $248call_function.30 = call $238load_global.25($const240.26, $246binary_floor_divide.29, func=$238load_global.25, args=[Var($const240.26, loop_hafnian_batch_gamma.py:48), Var($246binary_floor_divide.29, loop_hafnian_batch_gamma.py:48)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:46:35,299 on stmt: $250get_iter.31 = getiter(value=$248call_function.30)
DEBUG 2022-02-14 16:46:35,299 on stmt: $phi252.1 = $250get_iter.31
DEBUG 2022-02-14 16:46:35,299 on stmt: jump 252
DEBUG 2022-02-14 16:46:35,299 ==== SSA block rewrite pass on 252
DEBUG 2022-02-14 16:46:35,299 Running <numba.core.ssa._FixSSAVars object at 0x7f72073bce20>
DEBUG 2022-02-14 16:46:35,299 on stmt: $252for_iter.2 = iternext(value=$phi252.1)
DEBUG 2022-02-14 16:46:35,299 on stmt: $252for_iter.3 = pair_first(value=$252for_iter.2)
DEBUG 2022-02-14 16:46:35,299 on stmt: $252for_iter.4 = pair_second(value=$252for_iter.2)
DEBUG 2022-02-14 16:46:35,299 on stmt: $phi254.2 = $252for_iter.3
DEBUG 2022-02-14 16:46:35,299 on stmt: branch $252for_iter.4, 254, 282
DEBUG 2022-02-14 16:46:35,299 ==== SSA block rewrite pass on 254
DEBUG 2022-02-14 16:46:35,299 Running <numba.core.ssa._FixSSAVars object at 0x7f72073bce20>
DEBUG 2022-02-14 16:46:35,299 on stmt: i = $phi254.2
DEBUG 2022-02-14 16:46:35,299 on stmt: $264binary_subscr.7 = getitem(value=edge_reps, index=i, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:46:35,299 on stmt: $270binary_subscr.10 = getitem(value=kept_edges, index=i, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:46:35,299 on stmt: $272build_tuple.11 = build_tuple(items=[Var($264binary_subscr.7, loop_hafnian_batch_gamma.py:49), Var($270binary_subscr.10, loop_hafnian_batch_gamma.py:49)])
DEBUG 2022-02-14 16:46:35,299 on stmt: $274binary_subscr.12 = getitem(value=binoms, index=$272build_tuple.11, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:46:35,299 on stmt: $276inplace_multiply.13 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=binom_prod, rhs=$274binary_subscr.12, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:46:35,300 find_def var='binom_prod' stmt=$276inplace_multiply.13 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=binom_prod, rhs=$274binary_subscr.12, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:46:35,300 find_def_from_top label 254
DEBUG 2022-02-14 16:46:35,300 idom 252 from label 254
DEBUG 2022-02-14 16:46:35,300 find_def_from_bottom label 252
DEBUG 2022-02-14 16:46:35,300 find_def_from_top label 252
DEBUG 2022-02-14 16:46:35,300 insert phi node binom_prod.2 = phi(incoming_values=[], incoming_blocks=[]) at 252
DEBUG 2022-02-14 16:46:35,300 find_def_from_bottom label 182
DEBUG 2022-02-14 16:46:35,300 incoming_def binom_prod = const(float, 1.0)
DEBUG 2022-02-14 16:46:35,300 find_def_from_bottom label 254
DEBUG 2022-02-14 16:46:35,300 incoming_def binom_prod.1 = $276inplace_multiply.13
DEBUG 2022-02-14 16:46:35,300 replaced with: $276inplace_multiply.13 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=binom_prod.2, rhs=$274binary_subscr.12, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:46:35,300 on stmt: binom_prod.1 = $276inplace_multiply.13
DEBUG 2022-02-14 16:46:35,300 on stmt: jump 252
DEBUG 2022-02-14 16:46:35,300 ==== SSA block rewrite pass on 282
DEBUG 2022-02-14 16:46:35,300 Running <numba.core.ssa._FixSSAVars object at 0x7f72073bce20>
DEBUG 2022-02-14 16:46:35,300 on stmt: bool284 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:46:35,300 on stmt: $284pred = call bool284(glynn, func=bool284, args=(Var(glynn, loop_hafnian_batch_gamma.py:23),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:46:35,300 on stmt: branch $284pred, 288, 302
DEBUG 2022-02-14 16:46:35,300 ==== SSA block rewrite pass on 288
DEBUG 2022-02-14 16:46:35,300 Running <numba.core.ssa._FixSSAVars object at 0x7f72073bce20>
DEBUG 2022-02-14 16:46:35,300 on stmt: $const288.1 = const(int, 2)
DEBUG 2022-02-14 16:46:35,300 on stmt: $292binary_multiply.3 = $const288.1 * kept_edges
DEBUG 2022-02-14 16:46:35,300 on stmt: delta = $292binary_multiply.3 - edge_reps
DEBUG 2022-02-14 16:46:35,301 on stmt: jump 306
DEBUG 2022-02-14 16:46:35,301 ==== SSA block rewrite pass on 302
DEBUG 2022-02-14 16:46:35,301 Running <numba.core.ssa._FixSSAVars object at 0x7f72073bce20>
DEBUG 2022-02-14 16:46:35,301 on stmt: delta.1 = kept_edges
DEBUG 2022-02-14 16:46:35,301 on stmt: jump 306
DEBUG 2022-02-14 16:46:35,301 ==== SSA block rewrite pass on 306
DEBUG 2022-02-14 16:46:35,301 Running <numba.core.ssa._FixSSAVars object at 0x7f72073bce20>
DEBUG 2022-02-14 16:46:35,301 on stmt: delta.2 = phi(incoming_values=[Var(delta, loop_hafnian_batch_gamma.py:52), Var(delta.1, loop_hafnian_batch_gamma.py:54)], incoming_blocks=[288, 302])
DEBUG 2022-02-14 16:46:35,301 on stmt: $306load_global.1 = global(get_submatrices: CPUDispatcher(<function get_submatrices at 0x7f7207b0eca0>))
DEBUG 2022-02-14 16:46:35,301 on stmt: $const314.5 = const(int, 0)
DEBUG 2022-02-14 16:46:35,301 on stmt: $const316.6 = const(NoneType, None)
DEBUG 2022-02-14 16:46:35,301 on stmt: $const318.7 = const(NoneType, None)
DEBUG 2022-02-14 16:46:35,301 on stmt: $320build_slice.8 = global(slice: <class 'slice'>)
DEBUG 2022-02-14 16:46:35,301 on stmt: $320build_slice.9 = call $320build_slice.8($const316.6, $const318.7, func=$320build_slice.8, args=(Var($const316.6, loop_hafnian_batch_gamma.py:56), Var($const318.7, loop_hafnian_batch_gamma.py:56)), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:46:35,301 on stmt: $322build_tuple.10 = build_tuple(items=[Var($const314.5, loop_hafnian_batch_gamma.py:56), Var($320build_slice.9, loop_hafnian_batch_gamma.py:56)])
DEBUG 2022-02-14 16:46:35,301 on stmt: $324binary_subscr.11 = static_getitem(value=D, index=(0, slice(None, None, None)), index_var=$322build_tuple.10, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:46:35,301 on stmt: $328call_function.13 = call $306load_global.1(delta.2, A, $324binary_subscr.11, oddV, func=$306load_global.1, args=[Var(delta.2, loop_hafnian_batch_gamma.py:56), Var(A, loop_hafnian_batch_gamma.py:23), Var($324binary_subscr.11, loop_hafnian_batch_gamma.py:56), Var(oddV, loop_hafnian_batch_gamma.py:24)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:46:35,301 on stmt: $330unpack_sequence.18 = exhaust_iter(value=$328call_function.13, count=4)
DEBUG 2022-02-14 16:46:35,301 on stmt: $330unpack_sequence.14 = static_getitem(value=$330unpack_sequence.18, index=0, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:46:35,301 on stmt: $330unpack_sequence.15 = static_getitem(value=$330unpack_sequence.18, index=1, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:46:35,302 on stmt: $330unpack_sequence.16 = static_getitem(value=$330unpack_sequence.18, index=2, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:46:35,302 on stmt: $330unpack_sequence.17 = static_getitem(value=$330unpack_sequence.18, index=3, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:46:35,302 on stmt: AX_S = $330unpack_sequence.14
DEBUG 2022-02-14 16:46:35,302 on stmt: XD_S = $330unpack_sequence.15
DEBUG 2022-02-14 16:46:35,302 on stmt: D_S = $330unpack_sequence.16
DEBUG 2022-02-14 16:46:35,302 on stmt: oddVX_S = $330unpack_sequence.17
DEBUG 2022-02-14 16:46:35,302 on stmt: $340load_global.19 = global(eigvals: CPUDispatcher(<function eigvals at 0x7f7207a993a0>))
DEBUG 2022-02-14 16:46:35,302 on stmt: E = call $340load_global.19(AX_S, func=$340load_global.19, args=[Var(AX_S, loop_hafnian_batch_gamma.py:56)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:46:35,302 on stmt: $348load_global.22 = global(range: <class 'range'>)
DEBUG 2022-02-14 16:46:35,302 on stmt: $352call_function.24 = call $348load_global.22(n_D, func=$348load_global.22, args=[Var(n_D, loop_hafnian_batch_gamma.py:36)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:46:35,302 on stmt: $354get_iter.25 = getiter(value=$352call_function.24)
DEBUG 2022-02-14 16:46:35,302 on stmt: $phi356.1 = $354get_iter.25
DEBUG 2022-02-14 16:46:35,302 on stmt: jump 356
DEBUG 2022-02-14 16:46:35,302 ==== SSA block rewrite pass on 356
DEBUG 2022-02-14 16:46:35,302 Running <numba.core.ssa._FixSSAVars object at 0x7f72073bce20>
DEBUG 2022-02-14 16:46:35,302 on stmt: $356for_iter.2 = iternext(value=$phi356.1)
DEBUG 2022-02-14 16:46:35,302 on stmt: $356for_iter.3 = pair_first(value=$356for_iter.2)
DEBUG 2022-02-14 16:46:35,302 on stmt: $356for_iter.4 = pair_second(value=$356for_iter.2)
DEBUG 2022-02-14 16:46:35,302 on stmt: $phi358.2 = $356for_iter.3
DEBUG 2022-02-14 16:46:35,302 on stmt: branch $356for_iter.4, 358, 600
DEBUG 2022-02-14 16:46:35,302 ==== SSA block rewrite pass on 358
DEBUG 2022-02-14 16:46:35,302 Running <numba.core.ssa._FixSSAVars object at 0x7f72073bce20>
DEBUG 2022-02-14 16:46:35,302 on stmt: k = $phi358.2
DEBUG 2022-02-14 16:46:35,302 on stmt: $360load_global.3 = global(get_Dsubmatrices: CPUDispatcher(<function get_Dsubmatrices at 0x7f7207a99160>))
DEBUG 2022-02-14 16:46:35,302 on stmt: $const368.7 = const(NoneType, None)
DEBUG 2022-02-14 16:46:35,303 on stmt: $const370.8 = const(NoneType, None)
DEBUG 2022-02-14 16:46:35,303 on stmt: $372build_slice.9 = global(slice: <class 'slice'>)
DEBUG 2022-02-14 16:46:35,303 on stmt: $372build_slice.10 = call $372build_slice.9($const368.7, $const370.8, func=$372build_slice.9, args=(Var($const368.7, loop_hafnian_batch_gamma.py:61), Var($const370.8, loop_hafnian_batch_gamma.py:61)), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:46:35,303 on stmt: $374build_tuple.11 = build_tuple(items=[Var(k, loop_hafnian_batch_gamma.py:60), Var($372build_slice.10, loop_hafnian_batch_gamma.py:61)])
DEBUG 2022-02-14 16:46:35,303 on stmt: $376binary_subscr.12 = getitem(value=D, index=$374build_tuple.11, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:46:35,303 on stmt: $378call_function.13 = call $360load_global.3(delta.2, $376binary_subscr.12, func=$360load_global.3, args=[Var(delta.2, loop_hafnian_batch_gamma.py:56), Var($376binary_subscr.12, loop_hafnian_batch_gamma.py:61)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:46:35,303 on stmt: $380unpack_sequence.16 = exhaust_iter(value=$378call_function.13, count=2)
DEBUG 2022-02-14 16:46:35,303 on stmt: $380unpack_sequence.14 = static_getitem(value=$380unpack_sequence.16, index=0, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:46:35,303 on stmt: $380unpack_sequence.15 = static_getitem(value=$380unpack_sequence.16, index=1, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:46:35,303 on stmt: XD_S = $380unpack_sequence.14
DEBUG 2022-02-14 16:46:35,303 on stmt: D_S = $380unpack_sequence.15
DEBUG 2022-02-14 16:46:35,303 on stmt: $386load_global.17 = global(f_loop: CPUDispatcher(<function f_loop at 0x7f7207b0e940>))
DEBUG 2022-02-14 16:46:35,303 on stmt: f_even = call $386load_global.17(E, AX_S, XD_S, D_S, N_max, func=$386load_global.17, args=[Var(E, loop_hafnian_batch_gamma.py:58), Var(AX_S, loop_hafnian_batch_gamma.py:56), Var(XD_S, loop_hafnian_batch_gamma.py:56), Var(D_S, loop_hafnian_batch_gamma.py:56), Var(N_max, loop_hafnian_batch_gamma.py:29)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:46:35,303 on stmt: $402load_global.24 = global(f_loop_odd: CPUDispatcher(<function f_loop_odd at 0x7f7207b0eaf0>))
DEBUG 2022-02-14 16:46:35,303 on stmt: $418binary_subscr.32 = getitem(value=oddloop, index=k, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:46:35,303 on stmt: f_odd = call $402load_global.24(E, AX_S, XD_S, D_S, N_max, $418binary_subscr.32, oddVX_S, func=$402load_global.24, args=[Var(E, loop_hafnian_batch_gamma.py:58), Var(AX_S, loop_hafnian_batch_gamma.py:56), Var(XD_S, loop_hafnian_batch_gamma.py:56), Var(D_S, loop_hafnian_batch_gamma.py:56), Var(N_max, loop_hafnian_batch_gamma.py:29), Var($418binary_subscr.32, loop_hafnian_batch_gamma.py:64), Var(oddVX_S, loop_hafnian_batch_gamma.py:56)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:46:35,303 on stmt: $426load_global.35 = global(range: <class 'range'>)
DEBUG 2022-02-14 16:46:35,303 on stmt: $const428.36 = const(int, 2)
DEBUG 2022-02-14 16:46:35,303 on stmt: $const432.38 = const(int, 0)
DEBUG 2022-02-14 16:46:35,303 on stmt: $434binary_subscr.39 = static_getitem(value=kept_edges, index=0, index_var=$const432.38, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:46:35,303 on stmt: $436binary_multiply.40 = $const428.36 * $434binary_subscr.39
DEBUG 2022-02-14 16:46:35,303 on stmt: $const438.41 = const(int, 2)
DEBUG 2022-02-14 16:46:35,303 on stmt: $442binary_multiply.43 = $const438.41 * batch_max
DEBUG 2022-02-14 16:46:35,303 on stmt: $446binary_add.45 = $442binary_multiply.43 + odd_cutoff
DEBUG 2022-02-14 16:46:35,304 on stmt: $const448.46 = const(int, 1)
DEBUG 2022-02-14 16:46:35,304 on stmt: $450binary_add.47 = $446binary_add.45 + $const448.46
DEBUG 2022-02-14 16:46:35,304 on stmt: $452call_function.48 = call $426load_global.35($436binary_multiply.40, $450binary_add.47, func=$426load_global.35, args=[Var($436binary_multiply.40, loop_hafnian_batch_gamma.py:66), Var($450binary_add.47, loop_hafnian_batch_gamma.py:66)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:46:35,304 on stmt: $454get_iter.49 = getiter(value=$452call_function.48)
DEBUG 2022-02-14 16:46:35,304 on stmt: $phi456.2 = $454get_iter.49
DEBUG 2022-02-14 16:46:35,304 on stmt: jump 456
DEBUG 2022-02-14 16:46:35,304 ==== SSA block rewrite pass on 456
DEBUG 2022-02-14 16:46:35,304 Running <numba.core.ssa._FixSSAVars object at 0x7f72073bce20>
DEBUG 2022-02-14 16:46:35,304 on stmt: $456for_iter.3 = iternext(value=$phi456.2)
DEBUG 2022-02-14 16:46:35,304 on stmt: $456for_iter.4 = pair_first(value=$456for_iter.3)
DEBUG 2022-02-14 16:46:35,304 on stmt: $456for_iter.5 = pair_second(value=$456for_iter.3)
DEBUG 2022-02-14 16:46:35,304 on stmt: $phi458.3 = $456for_iter.4
DEBUG 2022-02-14 16:46:35,304 on stmt: branch $456for_iter.5, 458, 596
DEBUG 2022-02-14 16:46:35,304 ==== SSA block rewrite pass on 458
DEBUG 2022-02-14 16:46:35,304 Running <numba.core.ssa._FixSSAVars object at 0x7f72073bce20>
DEBUG 2022-02-14 16:46:35,304 on stmt: N_det = $phi458.3
DEBUG 2022-02-14 16:46:35,304 on stmt: N = N_fixed + N_det
DEBUG 2022-02-14 16:46:35,304 on stmt: $const468.7 = const(float, -1.0)
DEBUG 2022-02-14 16:46:35,304 on stmt: $const472.9 = const(int, 2)
DEBUG 2022-02-14 16:46:35,304 on stmt: $474binary_floor_divide.10 = N // $const472.9
DEBUG 2022-02-14 16:46:35,304 on stmt: $478binary_subtract.12 = $474binary_floor_divide.10 - edges_sum
DEBUG 2022-02-14 16:46:35,304 on stmt: plus_minus = $const468.7 ** $478binary_subtract.12
DEBUG 2022-02-14 16:46:35,304 on stmt: $const488.16 = const(int, 2)
DEBUG 2022-02-14 16:46:35,304 on stmt: $490binary_floor_divide.17 = N_det // $const488.16
DEBUG 2022-02-14 16:46:35,304 on stmt: $const494.19 = const(int, 0)
DEBUG 2022-02-14 16:46:35,304 on stmt: $496binary_subscr.20 = static_getitem(value=kept_edges, index=0, index_var=$const494.19, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:46:35,305 on stmt: $498build_tuple.21 = build_tuple(items=[Var($490binary_floor_divide.17, loop_hafnian_batch_gamma.py:70), Var($496binary_subscr.20, loop_hafnian_batch_gamma.py:70)])
DEBUG 2022-02-14 16:46:35,305 on stmt: $500binary_subscr.22 = getitem(value=binoms, index=$498build_tuple.21, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:46:35,305 on stmt: n_det_binom_prod = $500binary_subscr.22 * binom_prod
DEBUG 2022-02-14 16:46:35,305 find_def var='binom_prod' stmt=n_det_binom_prod = $500binary_subscr.22 * binom_prod
DEBUG 2022-02-14 16:46:35,305 find_def_from_top label 458
DEBUG 2022-02-14 16:46:35,305 idom 456 from label 458
DEBUG 2022-02-14 16:46:35,305 find_def_from_bottom label 456
DEBUG 2022-02-14 16:46:35,305 find_def_from_top label 456
DEBUG 2022-02-14 16:46:35,305 idom 358 from label 456
DEBUG 2022-02-14 16:46:35,305 find_def_from_bottom label 358
DEBUG 2022-02-14 16:46:35,305 find_def_from_top label 358
DEBUG 2022-02-14 16:46:35,305 idom 356 from label 358
DEBUG 2022-02-14 16:46:35,305 find_def_from_bottom label 356
DEBUG 2022-02-14 16:46:35,305 find_def_from_top label 356
DEBUG 2022-02-14 16:46:35,305 idom 306 from label 356
DEBUG 2022-02-14 16:46:35,305 find_def_from_bottom label 306
DEBUG 2022-02-14 16:46:35,305 find_def_from_top label 306
DEBUG 2022-02-14 16:46:35,305 idom 282 from label 306
DEBUG 2022-02-14 16:46:35,305 find_def_from_bottom label 282
DEBUG 2022-02-14 16:46:35,305 find_def_from_top label 282
DEBUG 2022-02-14 16:46:35,305 idom 252 from label 282
DEBUG 2022-02-14 16:46:35,305 find_def_from_bottom label 252
DEBUG 2022-02-14 16:46:35,305 replaced with: n_det_binom_prod = $500binary_subscr.22 * binom_prod.2
DEBUG 2022-02-14 16:46:35,306 on stmt: $const510.26 = const(int, 2)
DEBUG 2022-02-14 16:46:35,306 on stmt: $512binary_modulo.27 = N_det % $const510.26
DEBUG 2022-02-14 16:46:35,306 on stmt: $const514.28 = const(int, 0)
DEBUG 2022-02-14 16:46:35,306 on stmt: $516compare_op.29 = $512binary_modulo.27 == $const514.28
DEBUG 2022-02-14 16:46:35,306 on stmt: bool518 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:46:35,306 on stmt: $518pred = call bool518($516compare_op.29, func=bool518, args=(Var($516compare_op.29, loop_hafnian_batch_gamma.py:72),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:46:35,306 on stmt: branch $518pred, 522, 560
DEBUG 2022-02-14 16:46:35,306 ==== SSA block rewrite pass on 522
DEBUG 2022-02-14 16:46:35,306 Running <numba.core.ssa._FixSSAVars object at 0x7f72073bce20>
DEBUG 2022-02-14 16:46:35,306 on stmt: $528build_tuple.6 = build_tuple(items=[Var(k, loop_hafnian_batch_gamma.py:60), Var(N_det, loop_hafnian_batch_gamma.py:66)])
DEBUG 2022-02-14 16:46:35,306 on stmt: $532binary_subscr.9 = getitem(value=Hnew, index=$528build_tuple.6, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:46:35,306 on stmt: $538binary_multiply.12 = n_det_binom_prod * plus_minus
DEBUG 2022-02-14 16:46:35,306 on stmt: $const544.15 = const(int, 2)
DEBUG 2022-02-14 16:46:35,306 on stmt: $546binary_floor_divide.16 = N // $const544.15
DEBUG 2022-02-14 16:46:35,306 on stmt: $548binary_subscr.17 = getitem(value=f_even, index=$546binary_floor_divide.16, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:46:35,306 on stmt: $550binary_multiply.18 = $538binary_multiply.12 * $548binary_subscr.17
DEBUG 2022-02-14 16:46:35,306 on stmt: $552inplace_add.19 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$532binary_subscr.9, rhs=$550binary_multiply.18, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:46:35,306 on stmt: Hnew[$528build_tuple.6] = $552inplace_add.19
DEBUG 2022-02-14 16:46:35,306 on stmt: jump 592
DEBUG 2022-02-14 16:46:35,306 ==== SSA block rewrite pass on 560
DEBUG 2022-02-14 16:46:35,306 Running <numba.core.ssa._FixSSAVars object at 0x7f72073bce20>
DEBUG 2022-02-14 16:46:35,307 on stmt: $566build_tuple.6 = build_tuple(items=[Var(k, loop_hafnian_batch_gamma.py:60), Var(N_det, loop_hafnian_batch_gamma.py:66)])
DEBUG 2022-02-14 16:46:35,307 on stmt: $570binary_subscr.9 = getitem(value=Hnew, index=$566build_tuple.6, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:46:35,307 on stmt: $576binary_multiply.12 = n_det_binom_prod * plus_minus
DEBUG 2022-02-14 16:46:35,307 on stmt: $582binary_subscr.15 = getitem(value=f_odd, index=N, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:46:35,307 on stmt: $584binary_multiply.16 = $576binary_multiply.12 * $582binary_subscr.15
DEBUG 2022-02-14 16:46:35,307 on stmt: $586inplace_add.17 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$570binary_subscr.9, rhs=$584binary_multiply.16, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:46:35,307 on stmt: Hnew[$566build_tuple.6] = $586inplace_add.17
DEBUG 2022-02-14 16:46:35,307 on stmt: jump 592
DEBUG 2022-02-14 16:46:35,307 ==== SSA block rewrite pass on 592
DEBUG 2022-02-14 16:46:35,307 Running <numba.core.ssa._FixSSAVars object at 0x7f72073bce20>
DEBUG 2022-02-14 16:46:35,307 on stmt: jump 456
DEBUG 2022-02-14 16:46:35,307 ==== SSA block rewrite pass on 596
DEBUG 2022-02-14 16:46:35,307 Running <numba.core.ssa._FixSSAVars object at 0x7f72073bce20>
DEBUG 2022-02-14 16:46:35,307 on stmt: jump 356
DEBUG 2022-02-14 16:46:35,307 ==== SSA block rewrite pass on 600
DEBUG 2022-02-14 16:46:35,307 Running <numba.core.ssa._FixSSAVars object at 0x7f72073bce20>
DEBUG 2022-02-14 16:46:35,307 on stmt: $604inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=H_batch, rhs=Hnew, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:46:35,307 on stmt: H_batch = $604inplace_add.3
DEBUG 2022-02-14 16:46:35,307 on stmt: jump 178
DEBUG 2022-02-14 16:46:35,307 ==== SSA block rewrite pass on 610
DEBUG 2022-02-14 16:46:35,307 Running <numba.core.ssa._FixSSAVars object at 0x7f72073bce20>
DEBUG 2022-02-14 16:46:35,307 on stmt: bool612 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:46:35,307 on stmt: $612pred = call bool612(glynn, func=bool612, args=(Var(glynn, loop_hafnian_batch_gamma.py:23),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:46:35,307 on stmt: branch $612pred, 616, 678
DEBUG 2022-02-14 16:46:35,307 ==== SSA block rewrite pass on 616
DEBUG 2022-02-14 16:46:35,307 Running <numba.core.ssa._FixSSAVars object at 0x7f72073bce20>
DEBUG 2022-02-14 16:46:35,308 on stmt: $616load_global.0 = global(range: <class 'range'>)
DEBUG 2022-02-14 16:46:35,308 on stmt: $620load_attr.2 = getattr(value=H_batch, attr=shape)
DEBUG 2022-02-14 16:46:35,308 on stmt: $const622.3 = const(int, 1)
DEBUG 2022-02-14 16:46:35,308 on stmt: $624binary_subscr.4 = static_getitem(value=$620load_attr.2, index=1, index_var=$const622.3, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:46:35,308 on stmt: $626call_function.5 = call $616load_global.0($624binary_subscr.4, func=$616load_global.0, args=[Var($624binary_subscr.4, loop_hafnian_batch_gamma.py:79)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:46:35,308 on stmt: $628get_iter.6 = getiter(value=$626call_function.5)
DEBUG 2022-02-14 16:46:35,308 on stmt: $phi630.0 = $628get_iter.6
DEBUG 2022-02-14 16:46:35,308 on stmt: jump 630
DEBUG 2022-02-14 16:46:35,308 ==== SSA block rewrite pass on 630
DEBUG 2022-02-14 16:46:35,308 Running <numba.core.ssa._FixSSAVars object at 0x7f72073bce20>
DEBUG 2022-02-14 16:46:35,308 on stmt: $630for_iter.1 = iternext(value=$phi630.0)
DEBUG 2022-02-14 16:46:35,308 on stmt: $630for_iter.2 = pair_first(value=$630for_iter.1)
DEBUG 2022-02-14 16:46:35,308 on stmt: $630for_iter.3 = pair_second(value=$630for_iter.1)
DEBUG 2022-02-14 16:46:35,308 on stmt: $phi632.1 = $630for_iter.2
DEBUG 2022-02-14 16:46:35,308 on stmt: branch $630for_iter.3, 632, 678
DEBUG 2022-02-14 16:46:35,308 ==== SSA block rewrite pass on 632
DEBUG 2022-02-14 16:46:35,308 Running <numba.core.ssa._FixSSAVars object at 0x7f72073bce20>
DEBUG 2022-02-14 16:46:35,308 on stmt: j.1 = $phi632.1
DEBUG 2022-02-14 16:46:35,308 on stmt: x = N_fixed + j.1
DEBUG 2022-02-14 16:46:35,308 on stmt: $const644.6 = const(NoneType, None)
DEBUG 2022-02-14 16:46:35,308 on stmt: $const646.7 = const(NoneType, None)
DEBUG 2022-02-14 16:46:35,308 on stmt: $648build_slice.8 = global(slice: <class 'slice'>)
DEBUG 2022-02-14 16:46:35,308 on stmt: $648build_slice.9 = call $648build_slice.8($const644.6, $const646.7, func=$648build_slice.8, args=(Var($const644.6, loop_hafnian_batch_gamma.py:81), Var($const646.7, loop_hafnian_batch_gamma.py:81)), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:46:35,308 on stmt: $652build_tuple.11 = build_tuple(items=[Var($648build_slice.9, loop_hafnian_batch_gamma.py:81), Var(j.1, loop_hafnian_batch_gamma.py:79)])
DEBUG 2022-02-14 16:46:35,308 on stmt: $656binary_subscr.14 = getitem(value=H_batch, index=$652build_tuple.11, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:46:35,309 on stmt: $const658.15 = const(float, 0.5)
DEBUG 2022-02-14 16:46:35,309 on stmt: $const662.17 = const(int, 2)
DEBUG 2022-02-14 16:46:35,309 on stmt: $664binary_floor_divide.18 = x // $const662.17
DEBUG 2022-02-14 16:46:35,309 on stmt: $666binary_power.19 = $const658.15 ** $664binary_floor_divide.18
DEBUG 2022-02-14 16:46:35,309 on stmt: $668inplace_multiply.20 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=$656binary_subscr.14, rhs=$666binary_power.19, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:46:35,309 on stmt: H_batch[$652build_tuple.11] = $668inplace_multiply.20
DEBUG 2022-02-14 16:46:35,309 on stmt: jump 630
DEBUG 2022-02-14 16:46:35,309 ==== SSA block rewrite pass on 678
DEBUG 2022-02-14 16:46:35,309 Running <numba.core.ssa._FixSSAVars object at 0x7f72073bce20>
DEBUG 2022-02-14 16:46:35,309 on stmt: $680return_value.1 = cast(value=H_batch)
DEBUG 2022-02-14 16:46:35,309 on stmt: return $680return_value.1
DEBUG 2022-02-14 16:46:35,309 Fix SSA violator on var H_batch
DEBUG 2022-02-14 16:46:35,309 ==== SSA block rewrite pass on 0
DEBUG 2022-02-14 16:46:35,309 Running <numba.core.ssa._FreshVarHandler object at 0x7f72073bcf10>
DEBUG 2022-02-14 16:46:35,309 on stmt: A = arg(0, name=A)
DEBUG 2022-02-14 16:46:35,309 on stmt: D = arg(1, name=D)
DEBUG 2022-02-14 16:46:35,309 on stmt: fixed_edge_reps = arg(2, name=fixed_edge_reps)
DEBUG 2022-02-14 16:46:35,309 on stmt: batch_max = arg(3, name=batch_max)
DEBUG 2022-02-14 16:46:35,309 on stmt: odd_cutoff = arg(4, name=odd_cutoff)
DEBUG 2022-02-14 16:46:35,309 on stmt: glynn = arg(5, name=glynn)
DEBUG 2022-02-14 16:46:35,309 on stmt: $const4.1 = const(NoneType, None)
DEBUG 2022-02-14 16:46:35,309 on stmt: $const6.2 = const(NoneType, None)
DEBUG 2022-02-14 16:46:35,309 on stmt: $8build_slice.3 = global(slice: <class 'slice'>)
DEBUG 2022-02-14 16:46:35,309 on stmt: $8build_slice.4 = call $8build_slice.3($const4.1, $const6.2, func=$8build_slice.3, args=(Var($const4.1, loop_hafnian_batch_gamma.py:23), Var($const6.2, loop_hafnian_batch_gamma.py:23)), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:46:35,310 on stmt: $const10.5 = const(int, 0)
DEBUG 2022-02-14 16:46:35,310 on stmt: $12build_tuple.6 = build_tuple(items=[Var($8build_slice.4, loop_hafnian_batch_gamma.py:23), Var($const10.5, loop_hafnian_batch_gamma.py:23)])
DEBUG 2022-02-14 16:46:35,310 on stmt: oddloop = static_getitem(value=D, index=(slice(None, None, None), 0), index_var=$12build_tuple.6, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:46:35,310 on stmt: $const20.9 = const(int, 0)
DEBUG 2022-02-14 16:46:35,310 on stmt: $const22.10 = const(NoneType, None)
DEBUG 2022-02-14 16:46:35,310 on stmt: $const24.11 = const(NoneType, None)
DEBUG 2022-02-14 16:46:35,310 on stmt: $26build_slice.12 = global(slice: <class 'slice'>)
DEBUG 2022-02-14 16:46:35,310 on stmt: $26build_slice.13 = call $26build_slice.12($const22.10, $const24.11, func=$26build_slice.12, args=(Var($const22.10, loop_hafnian_batch_gamma.py:24), Var($const24.11, loop_hafnian_batch_gamma.py:24)), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:46:35,310 on stmt: $28build_tuple.14 = build_tuple(items=[Var($const20.9, loop_hafnian_batch_gamma.py:24), Var($26build_slice.13, loop_hafnian_batch_gamma.py:24)])
DEBUG 2022-02-14 16:46:35,310 on stmt: oddV = static_getitem(value=A, index=(0, slice(None, None, None)), index_var=$28build_tuple.14, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:46:35,310 on stmt: $36load_attr.17 = getattr(value=A, attr=shape)
DEBUG 2022-02-14 16:46:35,310 on stmt: $const38.18 = const(int, 0)
DEBUG 2022-02-14 16:46:35,310 on stmt: n = static_getitem(value=$36load_attr.17, index=0, index_var=$const38.18, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:46:35,310 on stmt: $const44.20 = const(int, 2)
DEBUG 2022-02-14 16:46:35,310 on stmt: $48load_method.22 = getattr(value=fixed_edge_reps, attr=sum)
DEBUG 2022-02-14 16:46:35,310 on stmt: $50call_method.23 = call $48load_method.22(func=$48load_method.22, args=[], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:46:35,310 on stmt: N_fixed = $const44.20 * $50call_method.23
DEBUG 2022-02-14 16:46:35,310 on stmt: $const58.26 = const(int, 2)
DEBUG 2022-02-14 16:46:35,310 on stmt: $62binary_multiply.28 = $const58.26 * batch_max
DEBUG 2022-02-14 16:46:35,310 on stmt: $64binary_add.29 = N_fixed + $62binary_multiply.28
DEBUG 2022-02-14 16:46:35,310 on stmt: N_max = $64binary_add.29 + odd_cutoff
DEBUG 2022-02-14 16:46:35,310 on stmt: $72load_global.32 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:46:35,310 on stmt: $74load_method.33 = getattr(value=$72load_global.32, attr=concatenate)
DEBUG 2022-02-14 16:46:35,310 on stmt: $76load_global.34 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:46:35,311 on stmt: $78load_method.35 = getattr(value=$76load_global.34, attr=array)
DEBUG 2022-02-14 16:46:35,311 on stmt: $82build_list.37 = build_list(items=[Var(batch_max, loop_hafnian_batch_gamma.py:23)])
DEBUG 2022-02-14 16:46:35,311 on stmt: $84call_method.38 = call $78load_method.35($82build_list.37, func=$78load_method.35, args=[Var($82build_list.37, loop_hafnian_batch_gamma.py:31)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:46:35,311 on stmt: $88build_tuple.40 = build_tuple(items=[Var($84call_method.38, loop_hafnian_batch_gamma.py:31), Var(fixed_edge_reps, loop_hafnian_batch_gamma.py:23)])
DEBUG 2022-02-14 16:46:35,311 on stmt: edge_reps = call $74load_method.33($88build_tuple.40, func=$74load_method.33, args=[Var($88build_tuple.40, loop_hafnian_batch_gamma.py:31)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:46:35,311 on stmt: $94load_global.42 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:46:35,311 on stmt: $96load_method.43 = getattr(value=$94load_global.42, attr=prod)
DEBUG 2022-02-14 16:46:35,311 on stmt: $const100.45 = const(int, 1)
DEBUG 2022-02-14 16:46:35,311 on stmt: $102binary_add.46 = edge_reps + $const100.45
DEBUG 2022-02-14 16:46:35,311 on stmt: steps = call $96load_method.43($102binary_add.46, func=$96load_method.43, args=[Var($102binary_add.46, loop_hafnian_batch_gamma.py:32)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:46:35,311 on stmt: $110load_method.49 = getattr(value=edge_reps, attr=max)
DEBUG 2022-02-14 16:46:35,311 on stmt: $112call_method.50 = call $110load_method.49(func=$110load_method.49, args=[], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:46:35,311 on stmt: max_binom = $112call_method.50 + odd_cutoff
DEBUG 2022-02-14 16:46:35,311 on stmt: $120load_global.53 = global(precompute_binoms: CPUDispatcher(<function precompute_binoms at 0x7f7207b0e280>))
DEBUG 2022-02-14 16:46:35,311 on stmt: binoms = call $120load_global.53(max_binom, func=$120load_global.53, args=[Var(max_binom, loop_hafnian_batch_gamma.py:34)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:46:35,311 on stmt: $130load_attr.57 = getattr(value=D, attr=shape)
DEBUG 2022-02-14 16:46:35,311 on stmt: $const132.58 = const(int, 0)
DEBUG 2022-02-14 16:46:35,311 on stmt: n_D = static_getitem(value=$130load_attr.57, index=0, index_var=$const132.58, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:46:35,311 on stmt: $138load_global.60 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:46:35,311 on stmt: $140load_attr.61 = getattr(value=$138load_global.60, attr=zeros)
DEBUG 2022-02-14 16:46:35,311 on stmt: $const144.63 = const(int, 2)
DEBUG 2022-02-14 16:46:35,311 on stmt: $148binary_multiply.65 = $const144.63 * batch_max
DEBUG 2022-02-14 16:46:35,311 on stmt: $152binary_add.67 = $148binary_multiply.65 + odd_cutoff
DEBUG 2022-02-14 16:46:35,312 on stmt: $const154.68 = const(int, 1)
DEBUG 2022-02-14 16:46:35,312 on stmt: $156binary_add.69 = $152binary_add.67 + $const154.68
DEBUG 2022-02-14 16:46:35,312 on stmt: $158build_tuple.70 = build_tuple(items=[Var(n_D, loop_hafnian_batch_gamma.py:36), Var($156binary_add.69, loop_hafnian_batch_gamma.py:38)])
DEBUG 2022-02-14 16:46:35,312 on stmt: $160load_global.71 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:46:35,312 on stmt: $162load_attr.72 = getattr(value=$160load_global.71, attr=complex128)
DEBUG 2022-02-14 16:46:35,312 on stmt: H_batch = call $140load_attr.61($158build_tuple.70, func=$140load_attr.61, args=[Var($158build_tuple.70, loop_hafnian_batch_gamma.py:38)], kws=[('dtype', Var($162load_attr.72, loop_hafnian_batch_gamma.py:38))], vararg=None, target=None)
DEBUG 2022-02-14 16:46:35,312 first assign: H_batch
DEBUG 2022-02-14 16:46:35,312 replaced with: H_batch = call $140load_attr.61($158build_tuple.70, func=$140load_attr.61, args=[Var($158build_tuple.70, loop_hafnian_batch_gamma.py:38)], kws=[('dtype', Var($162load_attr.72, loop_hafnian_batch_gamma.py:38))], vararg=None, target=None)
DEBUG 2022-02-14 16:46:35,312 on stmt: $170load_global.75 = global(prange: <class 'numba.misc.special.prange'>)
DEBUG 2022-02-14 16:46:35,312 on stmt: $174call_function.77 = call $170load_global.75(steps, func=$170load_global.75, args=[Var(steps, loop_hafnian_batch_gamma.py:32)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:46:35,312 on stmt: $176get_iter.78 = getiter(value=$174call_function.77)
DEBUG 2022-02-14 16:46:35,312 on stmt: $phi178.0 = $176get_iter.78
DEBUG 2022-02-14 16:46:35,312 on stmt: jump 178
DEBUG 2022-02-14 16:46:35,312 ==== SSA block rewrite pass on 178
DEBUG 2022-02-14 16:46:35,312 Running <numba.core.ssa._FreshVarHandler object at 0x7f72073bcf10>
DEBUG 2022-02-14 16:46:35,312 on stmt: $178for_iter.1 = iternext(value=$phi178.0)
DEBUG 2022-02-14 16:46:35,312 on stmt: $178for_iter.2 = pair_first(value=$178for_iter.1)
DEBUG 2022-02-14 16:46:35,312 on stmt: $178for_iter.3 = pair_second(value=$178for_iter.1)
DEBUG 2022-02-14 16:46:35,312 on stmt: $phi182.1 = $178for_iter.2
DEBUG 2022-02-14 16:46:35,312 on stmt: branch $178for_iter.3, 182, 610
DEBUG 2022-02-14 16:46:35,312 ==== SSA block rewrite pass on 182
DEBUG 2022-02-14 16:46:35,312 Running <numba.core.ssa._FreshVarHandler object at 0x7f72073bcf10>
DEBUG 2022-02-14 16:46:35,312 on stmt: j = $phi182.1
DEBUG 2022-02-14 16:46:35,312 on stmt: $184load_global.2 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:46:35,312 on stmt: $186load_attr.3 = getattr(value=$184load_global.2, attr=zeros)
DEBUG 2022-02-14 16:46:35,313 on stmt: $const190.5 = const(int, 2)
DEBUG 2022-02-14 16:46:35,313 on stmt: $194binary_multiply.7 = $const190.5 * batch_max
DEBUG 2022-02-14 16:46:35,313 on stmt: $198binary_add.9 = $194binary_multiply.7 + odd_cutoff
DEBUG 2022-02-14 16:46:35,313 on stmt: $const200.10 = const(int, 1)
DEBUG 2022-02-14 16:46:35,313 on stmt: $202binary_add.11 = $198binary_add.9 + $const200.10
DEBUG 2022-02-14 16:46:35,313 on stmt: $204build_tuple.12 = build_tuple(items=[Var(n_D, loop_hafnian_batch_gamma.py:36), Var($202binary_add.11, loop_hafnian_batch_gamma.py:42)])
DEBUG 2022-02-14 16:46:35,313 on stmt: $206load_global.13 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:46:35,313 on stmt: $208load_attr.14 = getattr(value=$206load_global.13, attr=complex128)
DEBUG 2022-02-14 16:46:35,313 on stmt: Hnew = call $186load_attr.3($204build_tuple.12, func=$186load_attr.3, args=[Var($204build_tuple.12, loop_hafnian_batch_gamma.py:42)], kws=[('dtype', Var($208load_attr.14, loop_hafnian_batch_gamma.py:42))], vararg=None, target=None)
DEBUG 2022-02-14 16:46:35,313 on stmt: $216load_global.17 = global(find_kept_edges: CPUDispatcher(<function find_kept_edges at 0x7f7207b0e700>))
DEBUG 2022-02-14 16:46:35,313 on stmt: kept_edges = call $216load_global.17(j, edge_reps, func=$216load_global.17, args=[Var(j, loop_hafnian_batch_gamma.py:40), Var(edge_reps, loop_hafnian_batch_gamma.py:31)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:46:35,313 on stmt: $228load_method.22 = getattr(value=kept_edges, attr=sum)
DEBUG 2022-02-14 16:46:35,313 on stmt: edges_sum = call $228load_method.22(func=$228load_method.22, args=[], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:46:35,313 on stmt: binom_prod = const(float, 1.0)
DEBUG 2022-02-14 16:46:35,313 on stmt: $238load_global.25 = global(range: <class 'range'>)
DEBUG 2022-02-14 16:46:35,313 on stmt: $const240.26 = const(int, 1)
DEBUG 2022-02-14 16:46:35,313 on stmt: $const244.28 = const(int, 2)
DEBUG 2022-02-14 16:46:35,313 on stmt: $246binary_floor_divide.29 = n // $const244.28
DEBUG 2022-02-14 16:46:35,313 on stmt: $248call_function.30 = call $238load_global.25($const240.26, $246binary_floor_divide.29, func=$238load_global.25, args=[Var($const240.26, loop_hafnian_batch_gamma.py:48), Var($246binary_floor_divide.29, loop_hafnian_batch_gamma.py:48)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:46:35,313 on stmt: $250get_iter.31 = getiter(value=$248call_function.30)
DEBUG 2022-02-14 16:46:35,313 on stmt: $phi252.1 = $250get_iter.31
DEBUG 2022-02-14 16:46:35,313 on stmt: jump 252
DEBUG 2022-02-14 16:46:35,313 ==== SSA block rewrite pass on 252
DEBUG 2022-02-14 16:46:35,313 Running <numba.core.ssa._FreshVarHandler object at 0x7f72073bcf10>
DEBUG 2022-02-14 16:46:35,314 on stmt: binom_prod.2 = phi(incoming_values=[Var(binom_prod, loop_hafnian_batch_gamma.py:47), Var(binom_prod.1, loop_hafnian_batch_gamma.py:49)], incoming_blocks=[182, 254])
DEBUG 2022-02-14 16:46:35,314 on stmt: $252for_iter.2 = iternext(value=$phi252.1)
DEBUG 2022-02-14 16:46:35,314 on stmt: $252for_iter.3 = pair_first(value=$252for_iter.2)
DEBUG 2022-02-14 16:46:35,314 on stmt: $252for_iter.4 = pair_second(value=$252for_iter.2)
DEBUG 2022-02-14 16:46:35,314 on stmt: $phi254.2 = $252for_iter.3
DEBUG 2022-02-14 16:46:35,314 on stmt: branch $252for_iter.4, 254, 282
DEBUG 2022-02-14 16:46:35,314 ==== SSA block rewrite pass on 254
DEBUG 2022-02-14 16:46:35,314 Running <numba.core.ssa._FreshVarHandler object at 0x7f72073bcf10>
DEBUG 2022-02-14 16:46:35,314 on stmt: i = $phi254.2
DEBUG 2022-02-14 16:46:35,314 on stmt: $264binary_subscr.7 = getitem(value=edge_reps, index=i, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:46:35,314 on stmt: $270binary_subscr.10 = getitem(value=kept_edges, index=i, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:46:35,314 on stmt: $272build_tuple.11 = build_tuple(items=[Var($264binary_subscr.7, loop_hafnian_batch_gamma.py:49), Var($270binary_subscr.10, loop_hafnian_batch_gamma.py:49)])
DEBUG 2022-02-14 16:46:35,314 on stmt: $274binary_subscr.12 = getitem(value=binoms, index=$272build_tuple.11, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:46:35,314 on stmt: $276inplace_multiply.13 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=binom_prod.2, rhs=$274binary_subscr.12, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:46:35,314 on stmt: binom_prod.1 = $276inplace_multiply.13
DEBUG 2022-02-14 16:46:35,314 on stmt: jump 252
DEBUG 2022-02-14 16:46:35,314 ==== SSA block rewrite pass on 282
DEBUG 2022-02-14 16:46:35,314 Running <numba.core.ssa._FreshVarHandler object at 0x7f72073bcf10>
DEBUG 2022-02-14 16:46:35,314 on stmt: bool284 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:46:35,314 on stmt: $284pred = call bool284(glynn, func=bool284, args=(Var(glynn, loop_hafnian_batch_gamma.py:23),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:46:35,314 on stmt: branch $284pred, 288, 302
DEBUG 2022-02-14 16:46:35,314 ==== SSA block rewrite pass on 288
DEBUG 2022-02-14 16:46:35,314 Running <numba.core.ssa._FreshVarHandler object at 0x7f72073bcf10>
DEBUG 2022-02-14 16:46:35,314 on stmt: $const288.1 = const(int, 2)
DEBUG 2022-02-14 16:46:35,314 on stmt: $292binary_multiply.3 = $const288.1 * kept_edges
DEBUG 2022-02-14 16:46:35,315 on stmt: delta = $292binary_multiply.3 - edge_reps
DEBUG 2022-02-14 16:46:35,315 on stmt: jump 306
DEBUG 2022-02-14 16:46:35,315 ==== SSA block rewrite pass on 302
DEBUG 2022-02-14 16:46:35,315 Running <numba.core.ssa._FreshVarHandler object at 0x7f72073bcf10>
DEBUG 2022-02-14 16:46:35,315 on stmt: delta.1 = kept_edges
DEBUG 2022-02-14 16:46:35,315 on stmt: jump 306
DEBUG 2022-02-14 16:46:35,315 ==== SSA block rewrite pass on 306
DEBUG 2022-02-14 16:46:35,315 Running <numba.core.ssa._FreshVarHandler object at 0x7f72073bcf10>
DEBUG 2022-02-14 16:46:35,315 on stmt: delta.2 = phi(incoming_values=[Var(delta, loop_hafnian_batch_gamma.py:52), Var(delta.1, loop_hafnian_batch_gamma.py:54)], incoming_blocks=[288, 302])
DEBUG 2022-02-14 16:46:35,315 on stmt: $306load_global.1 = global(get_submatrices: CPUDispatcher(<function get_submatrices at 0x7f7207b0eca0>))
DEBUG 2022-02-14 16:46:35,315 on stmt: $const314.5 = const(int, 0)
DEBUG 2022-02-14 16:46:35,315 on stmt: $const316.6 = const(NoneType, None)
DEBUG 2022-02-14 16:46:35,315 on stmt: $const318.7 = const(NoneType, None)
DEBUG 2022-02-14 16:46:35,315 on stmt: $320build_slice.8 = global(slice: <class 'slice'>)
DEBUG 2022-02-14 16:46:35,315 on stmt: $320build_slice.9 = call $320build_slice.8($const316.6, $const318.7, func=$320build_slice.8, args=(Var($const316.6, loop_hafnian_batch_gamma.py:56), Var($const318.7, loop_hafnian_batch_gamma.py:56)), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:46:35,315 on stmt: $322build_tuple.10 = build_tuple(items=[Var($const314.5, loop_hafnian_batch_gamma.py:56), Var($320build_slice.9, loop_hafnian_batch_gamma.py:56)])
DEBUG 2022-02-14 16:46:35,315 on stmt: $324binary_subscr.11 = static_getitem(value=D, index=(0, slice(None, None, None)), index_var=$322build_tuple.10, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:46:35,315 on stmt: $328call_function.13 = call $306load_global.1(delta.2, A, $324binary_subscr.11, oddV, func=$306load_global.1, args=[Var(delta.2, loop_hafnian_batch_gamma.py:56), Var(A, loop_hafnian_batch_gamma.py:23), Var($324binary_subscr.11, loop_hafnian_batch_gamma.py:56), Var(oddV, loop_hafnian_batch_gamma.py:24)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:46:35,315 on stmt: $330unpack_sequence.18 = exhaust_iter(value=$328call_function.13, count=4)
DEBUG 2022-02-14 16:46:35,315 on stmt: $330unpack_sequence.14 = static_getitem(value=$330unpack_sequence.18, index=0, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:46:35,315 on stmt: $330unpack_sequence.15 = static_getitem(value=$330unpack_sequence.18, index=1, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:46:35,315 on stmt: $330unpack_sequence.16 = static_getitem(value=$330unpack_sequence.18, index=2, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:46:35,315 on stmt: $330unpack_sequence.17 = static_getitem(value=$330unpack_sequence.18, index=3, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:46:35,315 on stmt: AX_S = $330unpack_sequence.14
DEBUG 2022-02-14 16:46:35,315 on stmt: XD_S = $330unpack_sequence.15
DEBUG 2022-02-14 16:46:35,315 on stmt: D_S = $330unpack_sequence.16
DEBUG 2022-02-14 16:46:35,315 on stmt: oddVX_S = $330unpack_sequence.17
DEBUG 2022-02-14 16:46:35,315 on stmt: $340load_global.19 = global(eigvals: CPUDispatcher(<function eigvals at 0x7f7207a993a0>))
DEBUG 2022-02-14 16:46:35,316 on stmt: E = call $340load_global.19(AX_S, func=$340load_global.19, args=[Var(AX_S, loop_hafnian_batch_gamma.py:56)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:46:35,316 on stmt: $348load_global.22 = global(range: <class 'range'>)
DEBUG 2022-02-14 16:46:35,316 on stmt: $352call_function.24 = call $348load_global.22(n_D, func=$348load_global.22, args=[Var(n_D, loop_hafnian_batch_gamma.py:36)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:46:35,316 on stmt: $354get_iter.25 = getiter(value=$352call_function.24)
DEBUG 2022-02-14 16:46:35,316 on stmt: $phi356.1 = $354get_iter.25
DEBUG 2022-02-14 16:46:35,316 on stmt: jump 356
DEBUG 2022-02-14 16:46:35,316 ==== SSA block rewrite pass on 356
DEBUG 2022-02-14 16:46:35,316 Running <numba.core.ssa._FreshVarHandler object at 0x7f72073bcf10>
DEBUG 2022-02-14 16:46:35,316 on stmt: $356for_iter.2 = iternext(value=$phi356.1)
DEBUG 2022-02-14 16:46:35,316 on stmt: $356for_iter.3 = pair_first(value=$356for_iter.2)
DEBUG 2022-02-14 16:46:35,316 on stmt: $356for_iter.4 = pair_second(value=$356for_iter.2)
DEBUG 2022-02-14 16:46:35,316 on stmt: $phi358.2 = $356for_iter.3
DEBUG 2022-02-14 16:46:35,316 on stmt: branch $356for_iter.4, 358, 600
DEBUG 2022-02-14 16:46:35,316 ==== SSA block rewrite pass on 358
DEBUG 2022-02-14 16:46:35,316 Running <numba.core.ssa._FreshVarHandler object at 0x7f72073bcf10>
DEBUG 2022-02-14 16:46:35,316 on stmt: k = $phi358.2
DEBUG 2022-02-14 16:46:35,316 on stmt: $360load_global.3 = global(get_Dsubmatrices: CPUDispatcher(<function get_Dsubmatrices at 0x7f7207a99160>))
DEBUG 2022-02-14 16:46:35,316 on stmt: $const368.7 = const(NoneType, None)
DEBUG 2022-02-14 16:46:35,316 on stmt: $const370.8 = const(NoneType, None)
DEBUG 2022-02-14 16:46:35,316 on stmt: $372build_slice.9 = global(slice: <class 'slice'>)
DEBUG 2022-02-14 16:46:35,316 on stmt: $372build_slice.10 = call $372build_slice.9($const368.7, $const370.8, func=$372build_slice.9, args=(Var($const368.7, loop_hafnian_batch_gamma.py:61), Var($const370.8, loop_hafnian_batch_gamma.py:61)), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:46:35,316 on stmt: $374build_tuple.11 = build_tuple(items=[Var(k, loop_hafnian_batch_gamma.py:60), Var($372build_slice.10, loop_hafnian_batch_gamma.py:61)])
DEBUG 2022-02-14 16:46:35,316 on stmt: $376binary_subscr.12 = getitem(value=D, index=$374build_tuple.11, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:46:35,316 on stmt: $378call_function.13 = call $360load_global.3(delta.2, $376binary_subscr.12, func=$360load_global.3, args=[Var(delta.2, loop_hafnian_batch_gamma.py:56), Var($376binary_subscr.12, loop_hafnian_batch_gamma.py:61)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:46:35,317 on stmt: $380unpack_sequence.16 = exhaust_iter(value=$378call_function.13, count=2)
DEBUG 2022-02-14 16:46:35,317 on stmt: $380unpack_sequence.14 = static_getitem(value=$380unpack_sequence.16, index=0, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:46:35,317 on stmt: $380unpack_sequence.15 = static_getitem(value=$380unpack_sequence.16, index=1, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:46:35,317 on stmt: XD_S = $380unpack_sequence.14
DEBUG 2022-02-14 16:46:35,317 on stmt: D_S = $380unpack_sequence.15
DEBUG 2022-02-14 16:46:35,317 on stmt: $386load_global.17 = global(f_loop: CPUDispatcher(<function f_loop at 0x7f7207b0e940>))
DEBUG 2022-02-14 16:46:35,317 on stmt: f_even = call $386load_global.17(E, AX_S, XD_S, D_S, N_max, func=$386load_global.17, args=[Var(E, loop_hafnian_batch_gamma.py:58), Var(AX_S, loop_hafnian_batch_gamma.py:56), Var(XD_S, loop_hafnian_batch_gamma.py:56), Var(D_S, loop_hafnian_batch_gamma.py:56), Var(N_max, loop_hafnian_batch_gamma.py:29)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:46:35,317 on stmt: $402load_global.24 = global(f_loop_odd: CPUDispatcher(<function f_loop_odd at 0x7f7207b0eaf0>))
DEBUG 2022-02-14 16:46:35,317 on stmt: $418binary_subscr.32 = getitem(value=oddloop, index=k, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:46:35,317 on stmt: f_odd = call $402load_global.24(E, AX_S, XD_S, D_S, N_max, $418binary_subscr.32, oddVX_S, func=$402load_global.24, args=[Var(E, loop_hafnian_batch_gamma.py:58), Var(AX_S, loop_hafnian_batch_gamma.py:56), Var(XD_S, loop_hafnian_batch_gamma.py:56), Var(D_S, loop_hafnian_batch_gamma.py:56), Var(N_max, loop_hafnian_batch_gamma.py:29), Var($418binary_subscr.32, loop_hafnian_batch_gamma.py:64), Var(oddVX_S, loop_hafnian_batch_gamma.py:56)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:46:35,317 on stmt: $426load_global.35 = global(range: <class 'range'>)
DEBUG 2022-02-14 16:46:35,317 on stmt: $const428.36 = const(int, 2)
DEBUG 2022-02-14 16:46:35,317 on stmt: $const432.38 = const(int, 0)
DEBUG 2022-02-14 16:46:35,317 on stmt: $434binary_subscr.39 = static_getitem(value=kept_edges, index=0, index_var=$const432.38, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:46:35,317 on stmt: $436binary_multiply.40 = $const428.36 * $434binary_subscr.39
DEBUG 2022-02-14 16:46:35,317 on stmt: $const438.41 = const(int, 2)
DEBUG 2022-02-14 16:46:35,317 on stmt: $442binary_multiply.43 = $const438.41 * batch_max
DEBUG 2022-02-14 16:46:35,317 on stmt: $446binary_add.45 = $442binary_multiply.43 + odd_cutoff
DEBUG 2022-02-14 16:46:35,317 on stmt: $const448.46 = const(int, 1)
DEBUG 2022-02-14 16:46:35,317 on stmt: $450binary_add.47 = $446binary_add.45 + $const448.46
DEBUG 2022-02-14 16:46:35,317 on stmt: $452call_function.48 = call $426load_global.35($436binary_multiply.40, $450binary_add.47, func=$426load_global.35, args=[Var($436binary_multiply.40, loop_hafnian_batch_gamma.py:66), Var($450binary_add.47, loop_hafnian_batch_gamma.py:66)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:46:35,317 on stmt: $454get_iter.49 = getiter(value=$452call_function.48)
DEBUG 2022-02-14 16:46:35,317 on stmt: $phi456.2 = $454get_iter.49
DEBUG 2022-02-14 16:46:35,318 on stmt: jump 456
DEBUG 2022-02-14 16:46:35,318 ==== SSA block rewrite pass on 456
DEBUG 2022-02-14 16:46:35,318 Running <numba.core.ssa._FreshVarHandler object at 0x7f72073bcf10>
DEBUG 2022-02-14 16:46:35,318 on stmt: $456for_iter.3 = iternext(value=$phi456.2)
DEBUG 2022-02-14 16:46:35,318 on stmt: $456for_iter.4 = pair_first(value=$456for_iter.3)
DEBUG 2022-02-14 16:46:35,318 on stmt: $456for_iter.5 = pair_second(value=$456for_iter.3)
DEBUG 2022-02-14 16:46:35,318 on stmt: $phi458.3 = $456for_iter.4
DEBUG 2022-02-14 16:46:35,318 on stmt: branch $456for_iter.5, 458, 596
DEBUG 2022-02-14 16:46:35,318 ==== SSA block rewrite pass on 458
DEBUG 2022-02-14 16:46:35,318 Running <numba.core.ssa._FreshVarHandler object at 0x7f72073bcf10>
DEBUG 2022-02-14 16:46:35,318 on stmt: N_det = $phi458.3
DEBUG 2022-02-14 16:46:35,318 on stmt: N = N_fixed + N_det
DEBUG 2022-02-14 16:46:35,318 on stmt: $const468.7 = const(float, -1.0)
DEBUG 2022-02-14 16:46:35,318 on stmt: $const472.9 = const(int, 2)
DEBUG 2022-02-14 16:46:35,318 on stmt: $474binary_floor_divide.10 = N // $const472.9
DEBUG 2022-02-14 16:46:35,318 on stmt: $478binary_subtract.12 = $474binary_floor_divide.10 - edges_sum
DEBUG 2022-02-14 16:46:35,318 on stmt: plus_minus = $const468.7 ** $478binary_subtract.12
DEBUG 2022-02-14 16:46:35,318 on stmt: $const488.16 = const(int, 2)
DEBUG 2022-02-14 16:46:35,318 on stmt: $490binary_floor_divide.17 = N_det // $const488.16
DEBUG 2022-02-14 16:46:35,318 on stmt: $const494.19 = const(int, 0)
DEBUG 2022-02-14 16:46:35,318 on stmt: $496binary_subscr.20 = static_getitem(value=kept_edges, index=0, index_var=$const494.19, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:46:35,318 on stmt: $498build_tuple.21 = build_tuple(items=[Var($490binary_floor_divide.17, loop_hafnian_batch_gamma.py:70), Var($496binary_subscr.20, loop_hafnian_batch_gamma.py:70)])
DEBUG 2022-02-14 16:46:35,318 on stmt: $500binary_subscr.22 = getitem(value=binoms, index=$498build_tuple.21, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:46:35,318 on stmt: n_det_binom_prod = $500binary_subscr.22 * binom_prod.2
DEBUG 2022-02-14 16:46:35,318 on stmt: $const510.26 = const(int, 2)
DEBUG 2022-02-14 16:46:35,318 on stmt: $512binary_modulo.27 = N_det % $const510.26
DEBUG 2022-02-14 16:46:35,318 on stmt: $const514.28 = const(int, 0)
DEBUG 2022-02-14 16:46:35,319 on stmt: $516compare_op.29 = $512binary_modulo.27 == $const514.28
DEBUG 2022-02-14 16:46:35,319 on stmt: bool518 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:46:35,319 on stmt: $518pred = call bool518($516compare_op.29, func=bool518, args=(Var($516compare_op.29, loop_hafnian_batch_gamma.py:72),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:46:35,319 on stmt: branch $518pred, 522, 560
DEBUG 2022-02-14 16:46:35,319 ==== SSA block rewrite pass on 522
DEBUG 2022-02-14 16:46:35,319 Running <numba.core.ssa._FreshVarHandler object at 0x7f72073bcf10>
DEBUG 2022-02-14 16:46:35,319 on stmt: $528build_tuple.6 = build_tuple(items=[Var(k, loop_hafnian_batch_gamma.py:60), Var(N_det, loop_hafnian_batch_gamma.py:66)])
DEBUG 2022-02-14 16:46:35,319 on stmt: $532binary_subscr.9 = getitem(value=Hnew, index=$528build_tuple.6, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:46:35,319 on stmt: $538binary_multiply.12 = n_det_binom_prod * plus_minus
DEBUG 2022-02-14 16:46:35,319 on stmt: $const544.15 = const(int, 2)
DEBUG 2022-02-14 16:46:35,319 on stmt: $546binary_floor_divide.16 = N // $const544.15
DEBUG 2022-02-14 16:46:35,319 on stmt: $548binary_subscr.17 = getitem(value=f_even, index=$546binary_floor_divide.16, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:46:35,319 on stmt: $550binary_multiply.18 = $538binary_multiply.12 * $548binary_subscr.17
DEBUG 2022-02-14 16:46:35,319 on stmt: $552inplace_add.19 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$532binary_subscr.9, rhs=$550binary_multiply.18, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:46:35,319 on stmt: Hnew[$528build_tuple.6] = $552inplace_add.19
DEBUG 2022-02-14 16:46:35,319 on stmt: jump 592
DEBUG 2022-02-14 16:46:35,319 ==== SSA block rewrite pass on 560
DEBUG 2022-02-14 16:46:35,319 Running <numba.core.ssa._FreshVarHandler object at 0x7f72073bcf10>
DEBUG 2022-02-14 16:46:35,319 on stmt: $566build_tuple.6 = build_tuple(items=[Var(k, loop_hafnian_batch_gamma.py:60), Var(N_det, loop_hafnian_batch_gamma.py:66)])
DEBUG 2022-02-14 16:46:35,319 on stmt: $570binary_subscr.9 = getitem(value=Hnew, index=$566build_tuple.6, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:46:35,319 on stmt: $576binary_multiply.12 = n_det_binom_prod * plus_minus
DEBUG 2022-02-14 16:46:35,319 on stmt: $582binary_subscr.15 = getitem(value=f_odd, index=N, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:46:35,319 on stmt: $584binary_multiply.16 = $576binary_multiply.12 * $582binary_subscr.15
DEBUG 2022-02-14 16:46:35,319 on stmt: $586inplace_add.17 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$570binary_subscr.9, rhs=$584binary_multiply.16, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:46:35,319 on stmt: Hnew[$566build_tuple.6] = $586inplace_add.17
DEBUG 2022-02-14 16:46:35,319 on stmt: jump 592
DEBUG 2022-02-14 16:46:35,319 ==== SSA block rewrite pass on 592
DEBUG 2022-02-14 16:46:35,320 Running <numba.core.ssa._FreshVarHandler object at 0x7f72073bcf10>
DEBUG 2022-02-14 16:46:35,320 on stmt: jump 456
DEBUG 2022-02-14 16:46:35,320 ==== SSA block rewrite pass on 596
DEBUG 2022-02-14 16:46:35,320 Running <numba.core.ssa._FreshVarHandler object at 0x7f72073bcf10>
DEBUG 2022-02-14 16:46:35,320 on stmt: jump 356
DEBUG 2022-02-14 16:46:35,320 ==== SSA block rewrite pass on 600
DEBUG 2022-02-14 16:46:35,320 Running <numba.core.ssa._FreshVarHandler object at 0x7f72073bcf10>
DEBUG 2022-02-14 16:46:35,320 on stmt: $604inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=H_batch, rhs=Hnew, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:46:35,320 on stmt: H_batch = $604inplace_add.3
DEBUG 2022-02-14 16:46:35,320 replaced with: H_batch.1 = $604inplace_add.3
DEBUG 2022-02-14 16:46:35,320 on stmt: jump 178
DEBUG 2022-02-14 16:46:35,320 ==== SSA block rewrite pass on 610
DEBUG 2022-02-14 16:46:35,320 Running <numba.core.ssa._FreshVarHandler object at 0x7f72073bcf10>
DEBUG 2022-02-14 16:46:35,320 on stmt: bool612 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:46:35,320 on stmt: $612pred = call bool612(glynn, func=bool612, args=(Var(glynn, loop_hafnian_batch_gamma.py:23),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:46:35,320 on stmt: branch $612pred, 616, 678
DEBUG 2022-02-14 16:46:35,320 ==== SSA block rewrite pass on 616
DEBUG 2022-02-14 16:46:35,320 Running <numba.core.ssa._FreshVarHandler object at 0x7f72073bcf10>
DEBUG 2022-02-14 16:46:35,320 on stmt: $616load_global.0 = global(range: <class 'range'>)
DEBUG 2022-02-14 16:46:35,320 on stmt: $620load_attr.2 = getattr(value=H_batch, attr=shape)
DEBUG 2022-02-14 16:46:35,320 on stmt: $const622.3 = const(int, 1)
DEBUG 2022-02-14 16:46:35,320 on stmt: $624binary_subscr.4 = static_getitem(value=$620load_attr.2, index=1, index_var=$const622.3, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:46:35,320 on stmt: $626call_function.5 = call $616load_global.0($624binary_subscr.4, func=$616load_global.0, args=[Var($624binary_subscr.4, loop_hafnian_batch_gamma.py:79)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:46:35,320 on stmt: $628get_iter.6 = getiter(value=$626call_function.5)
DEBUG 2022-02-14 16:46:35,320 on stmt: $phi630.0 = $628get_iter.6
DEBUG 2022-02-14 16:46:35,320 on stmt: jump 630
DEBUG 2022-02-14 16:46:35,320 ==== SSA block rewrite pass on 630
DEBUG 2022-02-14 16:46:35,320 Running <numba.core.ssa._FreshVarHandler object at 0x7f72073bcf10>
DEBUG 2022-02-14 16:46:35,320 on stmt: $630for_iter.1 = iternext(value=$phi630.0)
DEBUG 2022-02-14 16:46:35,321 on stmt: $630for_iter.2 = pair_first(value=$630for_iter.1)
DEBUG 2022-02-14 16:46:35,321 on stmt: $630for_iter.3 = pair_second(value=$630for_iter.1)
DEBUG 2022-02-14 16:46:35,321 on stmt: $phi632.1 = $630for_iter.2
DEBUG 2022-02-14 16:46:35,321 on stmt: branch $630for_iter.3, 632, 678
DEBUG 2022-02-14 16:46:35,321 ==== SSA block rewrite pass on 632
DEBUG 2022-02-14 16:46:35,321 Running <numba.core.ssa._FreshVarHandler object at 0x7f72073bcf10>
DEBUG 2022-02-14 16:46:35,321 on stmt: j.1 = $phi632.1
DEBUG 2022-02-14 16:46:35,321 on stmt: x = N_fixed + j.1
DEBUG 2022-02-14 16:46:35,321 on stmt: $const644.6 = const(NoneType, None)
DEBUG 2022-02-14 16:46:35,321 on stmt: $const646.7 = const(NoneType, None)
DEBUG 2022-02-14 16:46:35,321 on stmt: $648build_slice.8 = global(slice: <class 'slice'>)
DEBUG 2022-02-14 16:46:35,321 on stmt: $648build_slice.9 = call $648build_slice.8($const644.6, $const646.7, func=$648build_slice.8, args=(Var($const644.6, loop_hafnian_batch_gamma.py:81), Var($const646.7, loop_hafnian_batch_gamma.py:81)), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:46:35,321 on stmt: $652build_tuple.11 = build_tuple(items=[Var($648build_slice.9, loop_hafnian_batch_gamma.py:81), Var(j.1, loop_hafnian_batch_gamma.py:79)])
DEBUG 2022-02-14 16:46:35,321 on stmt: $656binary_subscr.14 = getitem(value=H_batch, index=$652build_tuple.11, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:46:35,321 on stmt: $const658.15 = const(float, 0.5)
DEBUG 2022-02-14 16:46:35,321 on stmt: $const662.17 = const(int, 2)
DEBUG 2022-02-14 16:46:35,321 on stmt: $664binary_floor_divide.18 = x // $const662.17
DEBUG 2022-02-14 16:46:35,321 on stmt: $666binary_power.19 = $const658.15 ** $664binary_floor_divide.18
DEBUG 2022-02-14 16:46:35,321 on stmt: $668inplace_multiply.20 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=$656binary_subscr.14, rhs=$666binary_power.19, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:46:35,321 on stmt: H_batch[$652build_tuple.11] = $668inplace_multiply.20
DEBUG 2022-02-14 16:46:35,321 on stmt: jump 630
DEBUG 2022-02-14 16:46:35,321 ==== SSA block rewrite pass on 678
DEBUG 2022-02-14 16:46:35,321 Running <numba.core.ssa._FreshVarHandler object at 0x7f72073bcf10>
DEBUG 2022-02-14 16:46:35,321 on stmt: $680return_value.1 = cast(value=H_batch)
DEBUG 2022-02-14 16:46:35,321 on stmt: return $680return_value.1
DEBUG 2022-02-14 16:46:35,322 Replaced assignments: defaultdict(<class 'list'>,
            {0: [<numba.core.ir.Assign object at 0x7f7203a69e50>],
             600: [<numba.core.ir.Assign object at 0x7f7203a397c0>]})
DEBUG 2022-02-14 16:46:35,322 ==== SSA block rewrite pass on 0
DEBUG 2022-02-14 16:46:35,322 Running <numba.core.ssa._FixSSAVars object at 0x7f7203a2deb0>
DEBUG 2022-02-14 16:46:35,322 on stmt: A = arg(0, name=A)
DEBUG 2022-02-14 16:46:35,322 on stmt: D = arg(1, name=D)
DEBUG 2022-02-14 16:46:35,322 on stmt: fixed_edge_reps = arg(2, name=fixed_edge_reps)
DEBUG 2022-02-14 16:46:35,322 on stmt: batch_max = arg(3, name=batch_max)
DEBUG 2022-02-14 16:46:35,322 on stmt: odd_cutoff = arg(4, name=odd_cutoff)
DEBUG 2022-02-14 16:46:35,322 on stmt: glynn = arg(5, name=glynn)
DEBUG 2022-02-14 16:46:35,322 on stmt: $const4.1 = const(NoneType, None)
DEBUG 2022-02-14 16:46:35,322 on stmt: $const6.2 = const(NoneType, None)
DEBUG 2022-02-14 16:46:35,322 on stmt: $8build_slice.3 = global(slice: <class 'slice'>)
DEBUG 2022-02-14 16:46:35,322 on stmt: $8build_slice.4 = call $8build_slice.3($const4.1, $const6.2, func=$8build_slice.3, args=(Var($const4.1, loop_hafnian_batch_gamma.py:23), Var($const6.2, loop_hafnian_batch_gamma.py:23)), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:46:35,322 on stmt: $const10.5 = const(int, 0)
DEBUG 2022-02-14 16:46:35,322 on stmt: $12build_tuple.6 = build_tuple(items=[Var($8build_slice.4, loop_hafnian_batch_gamma.py:23), Var($const10.5, loop_hafnian_batch_gamma.py:23)])
DEBUG 2022-02-14 16:46:35,322 on stmt: oddloop = static_getitem(value=D, index=(slice(None, None, None), 0), index_var=$12build_tuple.6, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:46:35,322 on stmt: $const20.9 = const(int, 0)
DEBUG 2022-02-14 16:46:35,322 on stmt: $const22.10 = const(NoneType, None)
DEBUG 2022-02-14 16:46:35,322 on stmt: $const24.11 = const(NoneType, None)
DEBUG 2022-02-14 16:46:35,322 on stmt: $26build_slice.12 = global(slice: <class 'slice'>)
DEBUG 2022-02-14 16:46:35,322 on stmt: $26build_slice.13 = call $26build_slice.12($const22.10, $const24.11, func=$26build_slice.12, args=(Var($const22.10, loop_hafnian_batch_gamma.py:24), Var($const24.11, loop_hafnian_batch_gamma.py:24)), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:46:35,322 on stmt: $28build_tuple.14 = build_tuple(items=[Var($const20.9, loop_hafnian_batch_gamma.py:24), Var($26build_slice.13, loop_hafnian_batch_gamma.py:24)])
DEBUG 2022-02-14 16:46:35,322 on stmt: oddV = static_getitem(value=A, index=(0, slice(None, None, None)), index_var=$28build_tuple.14, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:46:35,322 on stmt: $36load_attr.17 = getattr(value=A, attr=shape)
DEBUG 2022-02-14 16:46:35,322 on stmt: $const38.18 = const(int, 0)
DEBUG 2022-02-14 16:46:35,323 on stmt: n = static_getitem(value=$36load_attr.17, index=0, index_var=$const38.18, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:46:35,323 on stmt: $const44.20 = const(int, 2)
DEBUG 2022-02-14 16:46:35,323 on stmt: $48load_method.22 = getattr(value=fixed_edge_reps, attr=sum)
DEBUG 2022-02-14 16:46:35,323 on stmt: $50call_method.23 = call $48load_method.22(func=$48load_method.22, args=[], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:46:35,323 on stmt: N_fixed = $const44.20 * $50call_method.23
DEBUG 2022-02-14 16:46:35,323 on stmt: $const58.26 = const(int, 2)
DEBUG 2022-02-14 16:46:35,323 on stmt: $62binary_multiply.28 = $const58.26 * batch_max
DEBUG 2022-02-14 16:46:35,323 on stmt: $64binary_add.29 = N_fixed + $62binary_multiply.28
DEBUG 2022-02-14 16:46:35,323 on stmt: N_max = $64binary_add.29 + odd_cutoff
DEBUG 2022-02-14 16:46:35,323 on stmt: $72load_global.32 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:46:35,323 on stmt: $74load_method.33 = getattr(value=$72load_global.32, attr=concatenate)
DEBUG 2022-02-14 16:46:35,323 on stmt: $76load_global.34 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:46:35,323 on stmt: $78load_method.35 = getattr(value=$76load_global.34, attr=array)
DEBUG 2022-02-14 16:46:35,323 on stmt: $82build_list.37 = build_list(items=[Var(batch_max, loop_hafnian_batch_gamma.py:23)])
DEBUG 2022-02-14 16:46:35,323 on stmt: $84call_method.38 = call $78load_method.35($82build_list.37, func=$78load_method.35, args=[Var($82build_list.37, loop_hafnian_batch_gamma.py:31)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:46:35,323 on stmt: $88build_tuple.40 = build_tuple(items=[Var($84call_method.38, loop_hafnian_batch_gamma.py:31), Var(fixed_edge_reps, loop_hafnian_batch_gamma.py:23)])
DEBUG 2022-02-14 16:46:35,323 on stmt: edge_reps = call $74load_method.33($88build_tuple.40, func=$74load_method.33, args=[Var($88build_tuple.40, loop_hafnian_batch_gamma.py:31)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:46:35,323 on stmt: $94load_global.42 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:46:35,323 on stmt: $96load_method.43 = getattr(value=$94load_global.42, attr=prod)
DEBUG 2022-02-14 16:46:35,323 on stmt: $const100.45 = const(int, 1)
DEBUG 2022-02-14 16:46:35,323 on stmt: $102binary_add.46 = edge_reps + $const100.45
DEBUG 2022-02-14 16:46:35,324 on stmt: steps = call $96load_method.43($102binary_add.46, func=$96load_method.43, args=[Var($102binary_add.46, loop_hafnian_batch_gamma.py:32)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:46:35,324 on stmt: $110load_method.49 = getattr(value=edge_reps, attr=max)
DEBUG 2022-02-14 16:46:35,324 on stmt: $112call_method.50 = call $110load_method.49(func=$110load_method.49, args=[], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:46:35,324 on stmt: max_binom = $112call_method.50 + odd_cutoff
DEBUG 2022-02-14 16:46:35,324 on stmt: $120load_global.53 = global(precompute_binoms: CPUDispatcher(<function precompute_binoms at 0x7f7207b0e280>))
DEBUG 2022-02-14 16:46:35,324 on stmt: binoms = call $120load_global.53(max_binom, func=$120load_global.53, args=[Var(max_binom, loop_hafnian_batch_gamma.py:34)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:46:35,324 on stmt: $130load_attr.57 = getattr(value=D, attr=shape)
DEBUG 2022-02-14 16:46:35,324 on stmt: $const132.58 = const(int, 0)
DEBUG 2022-02-14 16:46:35,324 on stmt: n_D = static_getitem(value=$130load_attr.57, index=0, index_var=$const132.58, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:46:35,324 on stmt: $138load_global.60 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:46:35,324 on stmt: $140load_attr.61 = getattr(value=$138load_global.60, attr=zeros)
DEBUG 2022-02-14 16:46:35,324 on stmt: $const144.63 = const(int, 2)
DEBUG 2022-02-14 16:46:35,324 on stmt: $148binary_multiply.65 = $const144.63 * batch_max
DEBUG 2022-02-14 16:46:35,324 on stmt: $152binary_add.67 = $148binary_multiply.65 + odd_cutoff
DEBUG 2022-02-14 16:46:35,324 on stmt: $const154.68 = const(int, 1)
DEBUG 2022-02-14 16:46:35,324 on stmt: $156binary_add.69 = $152binary_add.67 + $const154.68
DEBUG 2022-02-14 16:46:35,324 on stmt: $158build_tuple.70 = build_tuple(items=[Var(n_D, loop_hafnian_batch_gamma.py:36), Var($156binary_add.69, loop_hafnian_batch_gamma.py:38)])
DEBUG 2022-02-14 16:46:35,324 on stmt: $160load_global.71 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:46:35,324 on stmt: $162load_attr.72 = getattr(value=$160load_global.71, attr=complex128)
DEBUG 2022-02-14 16:46:35,324 on stmt: H_batch = call $140load_attr.61($158build_tuple.70, func=$140load_attr.61, args=[Var($158build_tuple.70, loop_hafnian_batch_gamma.py:38)], kws=[('dtype', Var($162load_attr.72, loop_hafnian_batch_gamma.py:38))], vararg=None, target=None)
DEBUG 2022-02-14 16:46:35,324 on stmt: $170load_global.75 = global(prange: <class 'numba.misc.special.prange'>)
DEBUG 2022-02-14 16:46:35,324 on stmt: $174call_function.77 = call $170load_global.75(steps, func=$170load_global.75, args=[Var(steps, loop_hafnian_batch_gamma.py:32)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:46:35,325 on stmt: $176get_iter.78 = getiter(value=$174call_function.77)
DEBUG 2022-02-14 16:46:35,325 on stmt: $phi178.0 = $176get_iter.78
DEBUG 2022-02-14 16:46:35,325 on stmt: jump 178
DEBUG 2022-02-14 16:46:35,325 ==== SSA block rewrite pass on 178
DEBUG 2022-02-14 16:46:35,325 Running <numba.core.ssa._FixSSAVars object at 0x7f7203a2deb0>
DEBUG 2022-02-14 16:46:35,325 on stmt: $178for_iter.1 = iternext(value=$phi178.0)
DEBUG 2022-02-14 16:46:35,325 on stmt: $178for_iter.2 = pair_first(value=$178for_iter.1)
DEBUG 2022-02-14 16:46:35,325 on stmt: $178for_iter.3 = pair_second(value=$178for_iter.1)
DEBUG 2022-02-14 16:46:35,325 on stmt: $phi182.1 = $178for_iter.2
DEBUG 2022-02-14 16:46:35,325 on stmt: branch $178for_iter.3, 182, 610
DEBUG 2022-02-14 16:46:35,325 ==== SSA block rewrite pass on 182
DEBUG 2022-02-14 16:46:35,325 Running <numba.core.ssa._FixSSAVars object at 0x7f7203a2deb0>
DEBUG 2022-02-14 16:46:35,325 on stmt: j = $phi182.1
DEBUG 2022-02-14 16:46:35,325 on stmt: $184load_global.2 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:46:35,325 on stmt: $186load_attr.3 = getattr(value=$184load_global.2, attr=zeros)
DEBUG 2022-02-14 16:46:35,325 on stmt: $const190.5 = const(int, 2)
DEBUG 2022-02-14 16:46:35,325 on stmt: $194binary_multiply.7 = $const190.5 * batch_max
DEBUG 2022-02-14 16:46:35,325 on stmt: $198binary_add.9 = $194binary_multiply.7 + odd_cutoff
DEBUG 2022-02-14 16:46:35,325 on stmt: $const200.10 = const(int, 1)
DEBUG 2022-02-14 16:46:35,325 on stmt: $202binary_add.11 = $198binary_add.9 + $const200.10
DEBUG 2022-02-14 16:46:35,325 on stmt: $204build_tuple.12 = build_tuple(items=[Var(n_D, loop_hafnian_batch_gamma.py:36), Var($202binary_add.11, loop_hafnian_batch_gamma.py:42)])
DEBUG 2022-02-14 16:46:35,325 on stmt: $206load_global.13 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:46:35,325 on stmt: $208load_attr.14 = getattr(value=$206load_global.13, attr=complex128)
DEBUG 2022-02-14 16:46:35,325 on stmt: Hnew = call $186load_attr.3($204build_tuple.12, func=$186load_attr.3, args=[Var($204build_tuple.12, loop_hafnian_batch_gamma.py:42)], kws=[('dtype', Var($208load_attr.14, loop_hafnian_batch_gamma.py:42))], vararg=None, target=None)
DEBUG 2022-02-14 16:46:35,326 on stmt: $216load_global.17 = global(find_kept_edges: CPUDispatcher(<function find_kept_edges at 0x7f7207b0e700>))
DEBUG 2022-02-14 16:46:35,326 on stmt: kept_edges = call $216load_global.17(j, edge_reps, func=$216load_global.17, args=[Var(j, loop_hafnian_batch_gamma.py:40), Var(edge_reps, loop_hafnian_batch_gamma.py:31)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:46:35,326 on stmt: $228load_method.22 = getattr(value=kept_edges, attr=sum)
DEBUG 2022-02-14 16:46:35,326 on stmt: edges_sum = call $228load_method.22(func=$228load_method.22, args=[], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:46:35,326 on stmt: binom_prod = const(float, 1.0)
DEBUG 2022-02-14 16:46:35,326 on stmt: $238load_global.25 = global(range: <class 'range'>)
DEBUG 2022-02-14 16:46:35,326 on stmt: $const240.26 = const(int, 1)
DEBUG 2022-02-14 16:46:35,326 on stmt: $const244.28 = const(int, 2)
DEBUG 2022-02-14 16:46:35,326 on stmt: $246binary_floor_divide.29 = n // $const244.28
DEBUG 2022-02-14 16:46:35,326 on stmt: $248call_function.30 = call $238load_global.25($const240.26, $246binary_floor_divide.29, func=$238load_global.25, args=[Var($const240.26, loop_hafnian_batch_gamma.py:48), Var($246binary_floor_divide.29, loop_hafnian_batch_gamma.py:48)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:46:35,326 on stmt: $250get_iter.31 = getiter(value=$248call_function.30)
DEBUG 2022-02-14 16:46:35,326 on stmt: $phi252.1 = $250get_iter.31
DEBUG 2022-02-14 16:46:35,326 on stmt: jump 252
DEBUG 2022-02-14 16:46:35,326 ==== SSA block rewrite pass on 252
DEBUG 2022-02-14 16:46:35,326 Running <numba.core.ssa._FixSSAVars object at 0x7f7203a2deb0>
DEBUG 2022-02-14 16:46:35,326 on stmt: binom_prod.2 = phi(incoming_values=[Var(binom_prod, loop_hafnian_batch_gamma.py:47), Var(binom_prod.1, loop_hafnian_batch_gamma.py:49)], incoming_blocks=[182, 254])
DEBUG 2022-02-14 16:46:35,326 on stmt: $252for_iter.2 = iternext(value=$phi252.1)
DEBUG 2022-02-14 16:46:35,326 on stmt: $252for_iter.3 = pair_first(value=$252for_iter.2)
DEBUG 2022-02-14 16:46:35,326 on stmt: $252for_iter.4 = pair_second(value=$252for_iter.2)
DEBUG 2022-02-14 16:46:35,326 on stmt: $phi254.2 = $252for_iter.3
DEBUG 2022-02-14 16:46:35,326 on stmt: branch $252for_iter.4, 254, 282
DEBUG 2022-02-14 16:46:35,326 ==== SSA block rewrite pass on 254
DEBUG 2022-02-14 16:46:35,326 Running <numba.core.ssa._FixSSAVars object at 0x7f7203a2deb0>
DEBUG 2022-02-14 16:46:35,327 on stmt: i = $phi254.2
DEBUG 2022-02-14 16:46:35,327 on stmt: $264binary_subscr.7 = getitem(value=edge_reps, index=i, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:46:35,327 on stmt: $270binary_subscr.10 = getitem(value=kept_edges, index=i, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:46:35,327 on stmt: $272build_tuple.11 = build_tuple(items=[Var($264binary_subscr.7, loop_hafnian_batch_gamma.py:49), Var($270binary_subscr.10, loop_hafnian_batch_gamma.py:49)])
DEBUG 2022-02-14 16:46:35,327 on stmt: $274binary_subscr.12 = getitem(value=binoms, index=$272build_tuple.11, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:46:35,327 on stmt: $276inplace_multiply.13 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=binom_prod.2, rhs=$274binary_subscr.12, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:46:35,327 on stmt: binom_prod.1 = $276inplace_multiply.13
DEBUG 2022-02-14 16:46:35,327 on stmt: jump 252
DEBUG 2022-02-14 16:46:35,327 ==== SSA block rewrite pass on 282
DEBUG 2022-02-14 16:46:35,327 Running <numba.core.ssa._FixSSAVars object at 0x7f7203a2deb0>
DEBUG 2022-02-14 16:46:35,327 on stmt: bool284 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:46:35,327 on stmt: $284pred = call bool284(glynn, func=bool284, args=(Var(glynn, loop_hafnian_batch_gamma.py:23),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:46:35,327 on stmt: branch $284pred, 288, 302
DEBUG 2022-02-14 16:46:35,327 ==== SSA block rewrite pass on 288
DEBUG 2022-02-14 16:46:35,327 Running <numba.core.ssa._FixSSAVars object at 0x7f7203a2deb0>
DEBUG 2022-02-14 16:46:35,327 on stmt: $const288.1 = const(int, 2)
DEBUG 2022-02-14 16:46:35,327 on stmt: $292binary_multiply.3 = $const288.1 * kept_edges
DEBUG 2022-02-14 16:46:35,327 on stmt: delta = $292binary_multiply.3 - edge_reps
DEBUG 2022-02-14 16:46:35,327 on stmt: jump 306
DEBUG 2022-02-14 16:46:35,327 ==== SSA block rewrite pass on 302
DEBUG 2022-02-14 16:46:35,327 Running <numba.core.ssa._FixSSAVars object at 0x7f7203a2deb0>
DEBUG 2022-02-14 16:46:35,327 on stmt: delta.1 = kept_edges
DEBUG 2022-02-14 16:46:35,327 on stmt: jump 306
DEBUG 2022-02-14 16:46:35,327 ==== SSA block rewrite pass on 306
DEBUG 2022-02-14 16:46:35,327 Running <numba.core.ssa._FixSSAVars object at 0x7f7203a2deb0>
DEBUG 2022-02-14 16:46:35,327 on stmt: delta.2 = phi(incoming_values=[Var(delta, loop_hafnian_batch_gamma.py:52), Var(delta.1, loop_hafnian_batch_gamma.py:54)], incoming_blocks=[288, 302])
DEBUG 2022-02-14 16:46:35,328 on stmt: $306load_global.1 = global(get_submatrices: CPUDispatcher(<function get_submatrices at 0x7f7207b0eca0>))
DEBUG 2022-02-14 16:46:35,328 on stmt: $const314.5 = const(int, 0)
DEBUG 2022-02-14 16:46:35,328 on stmt: $const316.6 = const(NoneType, None)
DEBUG 2022-02-14 16:46:35,328 on stmt: $const318.7 = const(NoneType, None)
DEBUG 2022-02-14 16:46:35,328 on stmt: $320build_slice.8 = global(slice: <class 'slice'>)
DEBUG 2022-02-14 16:46:35,328 on stmt: $320build_slice.9 = call $320build_slice.8($const316.6, $const318.7, func=$320build_slice.8, args=(Var($const316.6, loop_hafnian_batch_gamma.py:56), Var($const318.7, loop_hafnian_batch_gamma.py:56)), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:46:35,328 on stmt: $322build_tuple.10 = build_tuple(items=[Var($const314.5, loop_hafnian_batch_gamma.py:56), Var($320build_slice.9, loop_hafnian_batch_gamma.py:56)])
DEBUG 2022-02-14 16:46:35,328 on stmt: $324binary_subscr.11 = static_getitem(value=D, index=(0, slice(None, None, None)), index_var=$322build_tuple.10, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:46:35,328 on stmt: $328call_function.13 = call $306load_global.1(delta.2, A, $324binary_subscr.11, oddV, func=$306load_global.1, args=[Var(delta.2, loop_hafnian_batch_gamma.py:56), Var(A, loop_hafnian_batch_gamma.py:23), Var($324binary_subscr.11, loop_hafnian_batch_gamma.py:56), Var(oddV, loop_hafnian_batch_gamma.py:24)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:46:35,328 on stmt: $330unpack_sequence.18 = exhaust_iter(value=$328call_function.13, count=4)
DEBUG 2022-02-14 16:46:35,328 on stmt: $330unpack_sequence.14 = static_getitem(value=$330unpack_sequence.18, index=0, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:46:35,328 on stmt: $330unpack_sequence.15 = static_getitem(value=$330unpack_sequence.18, index=1, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:46:35,328 on stmt: $330unpack_sequence.16 = static_getitem(value=$330unpack_sequence.18, index=2, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:46:35,328 on stmt: $330unpack_sequence.17 = static_getitem(value=$330unpack_sequence.18, index=3, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:46:35,328 on stmt: AX_S = $330unpack_sequence.14
DEBUG 2022-02-14 16:46:35,328 on stmt: XD_S = $330unpack_sequence.15
DEBUG 2022-02-14 16:46:35,328 on stmt: D_S = $330unpack_sequence.16
DEBUG 2022-02-14 16:46:35,328 on stmt: oddVX_S = $330unpack_sequence.17
DEBUG 2022-02-14 16:46:35,328 on stmt: $340load_global.19 = global(eigvals: CPUDispatcher(<function eigvals at 0x7f7207a993a0>))
DEBUG 2022-02-14 16:46:35,328 on stmt: E = call $340load_global.19(AX_S, func=$340load_global.19, args=[Var(AX_S, loop_hafnian_batch_gamma.py:56)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:46:35,328 on stmt: $348load_global.22 = global(range: <class 'range'>)
DEBUG 2022-02-14 16:46:35,328 on stmt: $352call_function.24 = call $348load_global.22(n_D, func=$348load_global.22, args=[Var(n_D, loop_hafnian_batch_gamma.py:36)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:46:35,328 on stmt: $354get_iter.25 = getiter(value=$352call_function.24)
DEBUG 2022-02-14 16:46:35,329 on stmt: $phi356.1 = $354get_iter.25
DEBUG 2022-02-14 16:46:35,329 on stmt: jump 356
DEBUG 2022-02-14 16:46:35,329 ==== SSA block rewrite pass on 356
DEBUG 2022-02-14 16:46:35,329 Running <numba.core.ssa._FixSSAVars object at 0x7f7203a2deb0>
DEBUG 2022-02-14 16:46:35,329 on stmt: $356for_iter.2 = iternext(value=$phi356.1)
DEBUG 2022-02-14 16:46:35,329 on stmt: $356for_iter.3 = pair_first(value=$356for_iter.2)
DEBUG 2022-02-14 16:46:35,329 on stmt: $356for_iter.4 = pair_second(value=$356for_iter.2)
DEBUG 2022-02-14 16:46:35,329 on stmt: $phi358.2 = $356for_iter.3
DEBUG 2022-02-14 16:46:35,329 on stmt: branch $356for_iter.4, 358, 600
DEBUG 2022-02-14 16:46:35,329 ==== SSA block rewrite pass on 358
DEBUG 2022-02-14 16:46:35,329 Running <numba.core.ssa._FixSSAVars object at 0x7f7203a2deb0>
DEBUG 2022-02-14 16:46:35,329 on stmt: k = $phi358.2
DEBUG 2022-02-14 16:46:35,329 on stmt: $360load_global.3 = global(get_Dsubmatrices: CPUDispatcher(<function get_Dsubmatrices at 0x7f7207a99160>))
DEBUG 2022-02-14 16:46:35,329 on stmt: $const368.7 = const(NoneType, None)
DEBUG 2022-02-14 16:46:35,329 on stmt: $const370.8 = const(NoneType, None)
DEBUG 2022-02-14 16:46:35,329 on stmt: $372build_slice.9 = global(slice: <class 'slice'>)
DEBUG 2022-02-14 16:46:35,329 on stmt: $372build_slice.10 = call $372build_slice.9($const368.7, $const370.8, func=$372build_slice.9, args=(Var($const368.7, loop_hafnian_batch_gamma.py:61), Var($const370.8, loop_hafnian_batch_gamma.py:61)), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:46:35,329 on stmt: $374build_tuple.11 = build_tuple(items=[Var(k, loop_hafnian_batch_gamma.py:60), Var($372build_slice.10, loop_hafnian_batch_gamma.py:61)])
DEBUG 2022-02-14 16:46:35,329 on stmt: $376binary_subscr.12 = getitem(value=D, index=$374build_tuple.11, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:46:35,329 on stmt: $378call_function.13 = call $360load_global.3(delta.2, $376binary_subscr.12, func=$360load_global.3, args=[Var(delta.2, loop_hafnian_batch_gamma.py:56), Var($376binary_subscr.12, loop_hafnian_batch_gamma.py:61)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:46:35,329 on stmt: $380unpack_sequence.16 = exhaust_iter(value=$378call_function.13, count=2)
DEBUG 2022-02-14 16:46:35,329 on stmt: $380unpack_sequence.14 = static_getitem(value=$380unpack_sequence.16, index=0, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:46:35,329 on stmt: $380unpack_sequence.15 = static_getitem(value=$380unpack_sequence.16, index=1, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:46:35,330 on stmt: XD_S = $380unpack_sequence.14
DEBUG 2022-02-14 16:46:35,330 on stmt: D_S = $380unpack_sequence.15
DEBUG 2022-02-14 16:46:35,330 on stmt: $386load_global.17 = global(f_loop: CPUDispatcher(<function f_loop at 0x7f7207b0e940>))
DEBUG 2022-02-14 16:46:35,330 on stmt: f_even = call $386load_global.17(E, AX_S, XD_S, D_S, N_max, func=$386load_global.17, args=[Var(E, loop_hafnian_batch_gamma.py:58), Var(AX_S, loop_hafnian_batch_gamma.py:56), Var(XD_S, loop_hafnian_batch_gamma.py:56), Var(D_S, loop_hafnian_batch_gamma.py:56), Var(N_max, loop_hafnian_batch_gamma.py:29)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:46:35,330 on stmt: $402load_global.24 = global(f_loop_odd: CPUDispatcher(<function f_loop_odd at 0x7f7207b0eaf0>))
DEBUG 2022-02-14 16:46:35,330 on stmt: $418binary_subscr.32 = getitem(value=oddloop, index=k, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:46:35,330 on stmt: f_odd = call $402load_global.24(E, AX_S, XD_S, D_S, N_max, $418binary_subscr.32, oddVX_S, func=$402load_global.24, args=[Var(E, loop_hafnian_batch_gamma.py:58), Var(AX_S, loop_hafnian_batch_gamma.py:56), Var(XD_S, loop_hafnian_batch_gamma.py:56), Var(D_S, loop_hafnian_batch_gamma.py:56), Var(N_max, loop_hafnian_batch_gamma.py:29), Var($418binary_subscr.32, loop_hafnian_batch_gamma.py:64), Var(oddVX_S, loop_hafnian_batch_gamma.py:56)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:46:35,330 on stmt: $426load_global.35 = global(range: <class 'range'>)
DEBUG 2022-02-14 16:46:35,330 on stmt: $const428.36 = const(int, 2)
DEBUG 2022-02-14 16:46:35,330 on stmt: $const432.38 = const(int, 0)
DEBUG 2022-02-14 16:46:35,330 on stmt: $434binary_subscr.39 = static_getitem(value=kept_edges, index=0, index_var=$const432.38, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:46:35,330 on stmt: $436binary_multiply.40 = $const428.36 * $434binary_subscr.39
DEBUG 2022-02-14 16:46:35,330 on stmt: $const438.41 = const(int, 2)
DEBUG 2022-02-14 16:46:35,330 on stmt: $442binary_multiply.43 = $const438.41 * batch_max
DEBUG 2022-02-14 16:46:35,330 on stmt: $446binary_add.45 = $442binary_multiply.43 + odd_cutoff
DEBUG 2022-02-14 16:46:35,330 on stmt: $const448.46 = const(int, 1)
DEBUG 2022-02-14 16:46:35,330 on stmt: $450binary_add.47 = $446binary_add.45 + $const448.46
DEBUG 2022-02-14 16:46:35,330 on stmt: $452call_function.48 = call $426load_global.35($436binary_multiply.40, $450binary_add.47, func=$426load_global.35, args=[Var($436binary_multiply.40, loop_hafnian_batch_gamma.py:66), Var($450binary_add.47, loop_hafnian_batch_gamma.py:66)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:46:35,330 on stmt: $454get_iter.49 = getiter(value=$452call_function.48)
DEBUG 2022-02-14 16:46:35,330 on stmt: $phi456.2 = $454get_iter.49
DEBUG 2022-02-14 16:46:35,330 on stmt: jump 456
DEBUG 2022-02-14 16:46:35,330 ==== SSA block rewrite pass on 456
DEBUG 2022-02-14 16:46:35,331 Running <numba.core.ssa._FixSSAVars object at 0x7f7203a2deb0>
DEBUG 2022-02-14 16:46:35,331 on stmt: $456for_iter.3 = iternext(value=$phi456.2)
DEBUG 2022-02-14 16:46:35,331 on stmt: $456for_iter.4 = pair_first(value=$456for_iter.3)
DEBUG 2022-02-14 16:46:35,331 on stmt: $456for_iter.5 = pair_second(value=$456for_iter.3)
DEBUG 2022-02-14 16:46:35,331 on stmt: $phi458.3 = $456for_iter.4
DEBUG 2022-02-14 16:46:35,331 on stmt: branch $456for_iter.5, 458, 596
DEBUG 2022-02-14 16:46:35,331 ==== SSA block rewrite pass on 458
DEBUG 2022-02-14 16:46:35,331 Running <numba.core.ssa._FixSSAVars object at 0x7f7203a2deb0>
DEBUG 2022-02-14 16:46:35,331 on stmt: N_det = $phi458.3
DEBUG 2022-02-14 16:46:35,331 on stmt: N = N_fixed + N_det
DEBUG 2022-02-14 16:46:35,331 on stmt: $const468.7 = const(float, -1.0)
DEBUG 2022-02-14 16:46:35,331 on stmt: $const472.9 = const(int, 2)
DEBUG 2022-02-14 16:46:35,331 on stmt: $474binary_floor_divide.10 = N // $const472.9
DEBUG 2022-02-14 16:46:35,331 on stmt: $478binary_subtract.12 = $474binary_floor_divide.10 - edges_sum
DEBUG 2022-02-14 16:46:35,331 on stmt: plus_minus = $const468.7 ** $478binary_subtract.12
DEBUG 2022-02-14 16:46:35,331 on stmt: $const488.16 = const(int, 2)
DEBUG 2022-02-14 16:46:35,331 on stmt: $490binary_floor_divide.17 = N_det // $const488.16
DEBUG 2022-02-14 16:46:35,331 on stmt: $const494.19 = const(int, 0)
DEBUG 2022-02-14 16:46:35,331 on stmt: $496binary_subscr.20 = static_getitem(value=kept_edges, index=0, index_var=$const494.19, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:46:35,331 on stmt: $498build_tuple.21 = build_tuple(items=[Var($490binary_floor_divide.17, loop_hafnian_batch_gamma.py:70), Var($496binary_subscr.20, loop_hafnian_batch_gamma.py:70)])
DEBUG 2022-02-14 16:46:35,331 on stmt: $500binary_subscr.22 = getitem(value=binoms, index=$498build_tuple.21, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:46:35,331 on stmt: n_det_binom_prod = $500binary_subscr.22 * binom_prod.2
DEBUG 2022-02-14 16:46:35,331 on stmt: $const510.26 = const(int, 2)
DEBUG 2022-02-14 16:46:35,331 on stmt: $512binary_modulo.27 = N_det % $const510.26
DEBUG 2022-02-14 16:46:35,332 on stmt: $const514.28 = const(int, 0)
DEBUG 2022-02-14 16:46:35,332 on stmt: $516compare_op.29 = $512binary_modulo.27 == $const514.28
DEBUG 2022-02-14 16:46:35,332 on stmt: bool518 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:46:35,332 on stmt: $518pred = call bool518($516compare_op.29, func=bool518, args=(Var($516compare_op.29, loop_hafnian_batch_gamma.py:72),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:46:35,332 on stmt: branch $518pred, 522, 560
DEBUG 2022-02-14 16:46:35,332 ==== SSA block rewrite pass on 522
DEBUG 2022-02-14 16:46:35,332 Running <numba.core.ssa._FixSSAVars object at 0x7f7203a2deb0>
DEBUG 2022-02-14 16:46:35,332 on stmt: $528build_tuple.6 = build_tuple(items=[Var(k, loop_hafnian_batch_gamma.py:60), Var(N_det, loop_hafnian_batch_gamma.py:66)])
DEBUG 2022-02-14 16:46:35,332 on stmt: $532binary_subscr.9 = getitem(value=Hnew, index=$528build_tuple.6, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:46:35,332 on stmt: $538binary_multiply.12 = n_det_binom_prod * plus_minus
DEBUG 2022-02-14 16:46:35,332 on stmt: $const544.15 = const(int, 2)
DEBUG 2022-02-14 16:46:35,332 on stmt: $546binary_floor_divide.16 = N // $const544.15
DEBUG 2022-02-14 16:46:35,332 on stmt: $548binary_subscr.17 = getitem(value=f_even, index=$546binary_floor_divide.16, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:46:35,332 on stmt: $550binary_multiply.18 = $538binary_multiply.12 * $548binary_subscr.17
DEBUG 2022-02-14 16:46:35,332 on stmt: $552inplace_add.19 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$532binary_subscr.9, rhs=$550binary_multiply.18, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:46:35,332 on stmt: Hnew[$528build_tuple.6] = $552inplace_add.19
DEBUG 2022-02-14 16:46:35,332 on stmt: jump 592
DEBUG 2022-02-14 16:46:35,332 ==== SSA block rewrite pass on 560
DEBUG 2022-02-14 16:46:35,332 Running <numba.core.ssa._FixSSAVars object at 0x7f7203a2deb0>
DEBUG 2022-02-14 16:46:35,332 on stmt: $566build_tuple.6 = build_tuple(items=[Var(k, loop_hafnian_batch_gamma.py:60), Var(N_det, loop_hafnian_batch_gamma.py:66)])
DEBUG 2022-02-14 16:46:35,332 on stmt: $570binary_subscr.9 = getitem(value=Hnew, index=$566build_tuple.6, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:46:35,332 on stmt: $576binary_multiply.12 = n_det_binom_prod * plus_minus
DEBUG 2022-02-14 16:46:35,332 on stmt: $582binary_subscr.15 = getitem(value=f_odd, index=N, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:46:35,332 on stmt: $584binary_multiply.16 = $576binary_multiply.12 * $582binary_subscr.15
DEBUG 2022-02-14 16:46:35,333 on stmt: $586inplace_add.17 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$570binary_subscr.9, rhs=$584binary_multiply.16, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:46:35,333 on stmt: Hnew[$566build_tuple.6] = $586inplace_add.17
DEBUG 2022-02-14 16:46:35,333 on stmt: jump 592
DEBUG 2022-02-14 16:46:35,333 ==== SSA block rewrite pass on 592
DEBUG 2022-02-14 16:46:35,333 Running <numba.core.ssa._FixSSAVars object at 0x7f7203a2deb0>
DEBUG 2022-02-14 16:46:35,333 on stmt: jump 456
DEBUG 2022-02-14 16:46:35,333 ==== SSA block rewrite pass on 596
DEBUG 2022-02-14 16:46:35,333 Running <numba.core.ssa._FixSSAVars object at 0x7f7203a2deb0>
DEBUG 2022-02-14 16:46:35,333 on stmt: jump 356
DEBUG 2022-02-14 16:46:35,333 ==== SSA block rewrite pass on 600
DEBUG 2022-02-14 16:46:35,333 Running <numba.core.ssa._FixSSAVars object at 0x7f7203a2deb0>
DEBUG 2022-02-14 16:46:35,333 on stmt: $604inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=H_batch, rhs=Hnew, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:46:35,333 find_def var='H_batch' stmt=$604inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=H_batch, rhs=Hnew, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:46:35,333 find_def_from_top label 600
DEBUG 2022-02-14 16:46:35,333 idom 356 from label 600
DEBUG 2022-02-14 16:46:35,333 find_def_from_bottom label 356
DEBUG 2022-02-14 16:46:35,333 find_def_from_top label 356
DEBUG 2022-02-14 16:46:35,333 idom 306 from label 356
DEBUG 2022-02-14 16:46:35,333 find_def_from_bottom label 306
DEBUG 2022-02-14 16:46:35,333 find_def_from_top label 306
DEBUG 2022-02-14 16:46:35,333 idom 282 from label 306
DEBUG 2022-02-14 16:46:35,333 find_def_from_bottom label 282
DEBUG 2022-02-14 16:46:35,334 find_def_from_top label 282
DEBUG 2022-02-14 16:46:35,334 idom 252 from label 282
DEBUG 2022-02-14 16:46:35,334 find_def_from_bottom label 252
DEBUG 2022-02-14 16:46:35,334 find_def_from_top label 252
DEBUG 2022-02-14 16:46:35,334 idom 182 from label 252
DEBUG 2022-02-14 16:46:35,334 find_def_from_bottom label 182
DEBUG 2022-02-14 16:46:35,334 find_def_from_top label 182
DEBUG 2022-02-14 16:46:35,334 idom 178 from label 182
DEBUG 2022-02-14 16:46:35,334 find_def_from_bottom label 178
DEBUG 2022-02-14 16:46:35,334 find_def_from_top label 178
DEBUG 2022-02-14 16:46:35,334 insert phi node H_batch.2 = phi(incoming_values=[], incoming_blocks=[]) at 178
DEBUG 2022-02-14 16:46:35,334 find_def_from_bottom label 0
DEBUG 2022-02-14 16:46:35,334 incoming_def H_batch = call $140load_attr.61($158build_tuple.70, func=$140load_attr.61, args=[Var($158build_tuple.70, loop_hafnian_batch_gamma.py:38)], kws=[('dtype', Var($162load_attr.72, loop_hafnian_batch_gamma.py:38))], vararg=None, target=None)
DEBUG 2022-02-14 16:46:35,334 find_def_from_bottom label 600
DEBUG 2022-02-14 16:46:35,334 incoming_def H_batch.1 = $604inplace_add.3
DEBUG 2022-02-14 16:46:35,334 replaced with: $604inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=H_batch.2, rhs=Hnew, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:46:35,334 on stmt: H_batch.1 = $604inplace_add.3
DEBUG 2022-02-14 16:46:35,334 on stmt: jump 178
DEBUG 2022-02-14 16:46:35,334 ==== SSA block rewrite pass on 610
DEBUG 2022-02-14 16:46:35,334 Running <numba.core.ssa._FixSSAVars object at 0x7f7203a2deb0>
DEBUG 2022-02-14 16:46:35,334 on stmt: bool612 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:46:35,335 on stmt: $612pred = call bool612(glynn, func=bool612, args=(Var(glynn, loop_hafnian_batch_gamma.py:23),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:46:35,335 on stmt: branch $612pred, 616, 678
DEBUG 2022-02-14 16:46:35,335 ==== SSA block rewrite pass on 616
DEBUG 2022-02-14 16:46:35,335 Running <numba.core.ssa._FixSSAVars object at 0x7f7203a2deb0>
DEBUG 2022-02-14 16:46:35,335 on stmt: $616load_global.0 = global(range: <class 'range'>)
DEBUG 2022-02-14 16:46:35,335 on stmt: $620load_attr.2 = getattr(value=H_batch, attr=shape)
DEBUG 2022-02-14 16:46:35,335 find_def var='H_batch' stmt=$620load_attr.2 = getattr(value=H_batch, attr=shape)
DEBUG 2022-02-14 16:46:35,335 find_def_from_top label 616
DEBUG 2022-02-14 16:46:35,335 idom 610 from label 616
DEBUG 2022-02-14 16:46:35,335 find_def_from_bottom label 610
DEBUG 2022-02-14 16:46:35,335 find_def_from_top label 610
DEBUG 2022-02-14 16:46:35,335 idom 178 from label 610
DEBUG 2022-02-14 16:46:35,335 find_def_from_bottom label 178
DEBUG 2022-02-14 16:46:35,335 replaced with: $620load_attr.2 = getattr(value=H_batch.2, attr=shape)
DEBUG 2022-02-14 16:46:35,335 on stmt: $const622.3 = const(int, 1)
DEBUG 2022-02-14 16:46:35,335 on stmt: $624binary_subscr.4 = static_getitem(value=$620load_attr.2, index=1, index_var=$const622.3, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:46:35,335 on stmt: $626call_function.5 = call $616load_global.0($624binary_subscr.4, func=$616load_global.0, args=[Var($624binary_subscr.4, loop_hafnian_batch_gamma.py:79)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:46:35,335 on stmt: $628get_iter.6 = getiter(value=$626call_function.5)
DEBUG 2022-02-14 16:46:35,335 on stmt: $phi630.0 = $628get_iter.6
DEBUG 2022-02-14 16:46:35,335 on stmt: jump 630
DEBUG 2022-02-14 16:46:35,336 ==== SSA block rewrite pass on 630
DEBUG 2022-02-14 16:46:35,336 Running <numba.core.ssa._FixSSAVars object at 0x7f7203a2deb0>
DEBUG 2022-02-14 16:46:35,336 on stmt: $630for_iter.1 = iternext(value=$phi630.0)
DEBUG 2022-02-14 16:46:35,336 on stmt: $630for_iter.2 = pair_first(value=$630for_iter.1)
DEBUG 2022-02-14 16:46:35,336 on stmt: $630for_iter.3 = pair_second(value=$630for_iter.1)
DEBUG 2022-02-14 16:46:35,336 on stmt: $phi632.1 = $630for_iter.2
DEBUG 2022-02-14 16:46:35,336 on stmt: branch $630for_iter.3, 632, 678
DEBUG 2022-02-14 16:46:35,336 ==== SSA block rewrite pass on 632
DEBUG 2022-02-14 16:46:35,336 Running <numba.core.ssa._FixSSAVars object at 0x7f7203a2deb0>
DEBUG 2022-02-14 16:46:35,336 on stmt: j.1 = $phi632.1
DEBUG 2022-02-14 16:46:35,336 on stmt: x = N_fixed + j.1
DEBUG 2022-02-14 16:46:35,336 on stmt: $const644.6 = const(NoneType, None)
DEBUG 2022-02-14 16:46:35,336 on stmt: $const646.7 = const(NoneType, None)
DEBUG 2022-02-14 16:46:35,336 on stmt: $648build_slice.8 = global(slice: <class 'slice'>)
DEBUG 2022-02-14 16:46:35,336 on stmt: $648build_slice.9 = call $648build_slice.8($const644.6, $const646.7, func=$648build_slice.8, args=(Var($const644.6, loop_hafnian_batch_gamma.py:81), Var($const646.7, loop_hafnian_batch_gamma.py:81)), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:46:35,336 on stmt: $652build_tuple.11 = build_tuple(items=[Var($648build_slice.9, loop_hafnian_batch_gamma.py:81), Var(j.1, loop_hafnian_batch_gamma.py:79)])
DEBUG 2022-02-14 16:46:35,336 on stmt: $656binary_subscr.14 = getitem(value=H_batch, index=$652build_tuple.11, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:46:35,336 find_def var='H_batch' stmt=$656binary_subscr.14 = getitem(value=H_batch, index=$652build_tuple.11, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:46:35,336 find_def_from_top label 632
DEBUG 2022-02-14 16:46:35,336 idom 630 from label 632
DEBUG 2022-02-14 16:46:35,336 find_def_from_bottom label 630
DEBUG 2022-02-14 16:46:35,336 find_def_from_top label 630
DEBUG 2022-02-14 16:46:35,336 idom 616 from label 630
DEBUG 2022-02-14 16:46:35,337 find_def_from_bottom label 616
DEBUG 2022-02-14 16:46:35,337 find_def_from_top label 616
DEBUG 2022-02-14 16:46:35,337 idom 610 from label 616
DEBUG 2022-02-14 16:46:35,337 find_def_from_bottom label 610
DEBUG 2022-02-14 16:46:35,337 find_def_from_top label 610
DEBUG 2022-02-14 16:46:35,337 idom 178 from label 610
DEBUG 2022-02-14 16:46:35,337 find_def_from_bottom label 178
DEBUG 2022-02-14 16:46:35,337 replaced with: $656binary_subscr.14 = getitem(value=H_batch.2, index=$652build_tuple.11, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:46:35,337 on stmt: $const658.15 = const(float, 0.5)
DEBUG 2022-02-14 16:46:35,337 on stmt: $const662.17 = const(int, 2)
DEBUG 2022-02-14 16:46:35,337 on stmt: $664binary_floor_divide.18 = x // $const662.17
DEBUG 2022-02-14 16:46:35,337 on stmt: $666binary_power.19 = $const658.15 ** $664binary_floor_divide.18
DEBUG 2022-02-14 16:46:35,337 on stmt: $668inplace_multiply.20 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=$656binary_subscr.14, rhs=$666binary_power.19, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:46:35,337 on stmt: H_batch[$652build_tuple.11] = $668inplace_multiply.20
DEBUG 2022-02-14 16:46:35,337 find_def var='H_batch' stmt=H_batch[$652build_tuple.11] = $668inplace_multiply.20
DEBUG 2022-02-14 16:46:35,337 find_def_from_top label 632
DEBUG 2022-02-14 16:46:35,337 idom 630 from label 632
DEBUG 2022-02-14 16:46:35,337 find_def_from_bottom label 630
DEBUG 2022-02-14 16:46:35,337 find_def_from_top label 630
DEBUG 2022-02-14 16:46:35,337 idom 616 from label 630
DEBUG 2022-02-14 16:46:35,337 find_def_from_bottom label 616
DEBUG 2022-02-14 16:46:35,337 find_def_from_top label 616
DEBUG 2022-02-14 16:46:35,338 idom 610 from label 616
DEBUG 2022-02-14 16:46:35,338 find_def_from_bottom label 610
DEBUG 2022-02-14 16:46:35,338 find_def_from_top label 610
DEBUG 2022-02-14 16:46:35,338 idom 178 from label 610
DEBUG 2022-02-14 16:46:35,338 find_def_from_bottom label 178
DEBUG 2022-02-14 16:46:35,338 replaced with: H_batch.2[$652build_tuple.11] = $668inplace_multiply.20
DEBUG 2022-02-14 16:46:35,338 on stmt: jump 630
DEBUG 2022-02-14 16:46:35,338 ==== SSA block rewrite pass on 678
DEBUG 2022-02-14 16:46:35,338 Running <numba.core.ssa._FixSSAVars object at 0x7f7203a2deb0>
DEBUG 2022-02-14 16:46:35,338 on stmt: $680return_value.1 = cast(value=H_batch)
DEBUG 2022-02-14 16:46:35,338 find_def var='H_batch' stmt=$680return_value.1 = cast(value=H_batch)
DEBUG 2022-02-14 16:46:35,338 find_def_from_top label 678
DEBUG 2022-02-14 16:46:35,338 idom 610 from label 678
DEBUG 2022-02-14 16:46:35,338 find_def_from_bottom label 610
DEBUG 2022-02-14 16:46:35,338 find_def_from_top label 610
DEBUG 2022-02-14 16:46:35,338 idom 178 from label 610
DEBUG 2022-02-14 16:46:35,338 find_def_from_bottom label 178
DEBUG 2022-02-14 16:46:35,338 replaced with: $680return_value.1 = cast(value=H_batch.2)
DEBUG 2022-02-14 16:46:35,338 on stmt: return $680return_value.1
DEBUG 2022-02-14 16:46:35,338 Fix SSA violator on var XD_S
DEBUG 2022-02-14 16:46:35,338 ==== SSA block rewrite pass on 0
DEBUG 2022-02-14 16:46:35,338 Running <numba.core.ssa._FreshVarHandler object at 0x7f7203a39cd0>
DEBUG 2022-02-14 16:46:35,338 on stmt: A = arg(0, name=A)
DEBUG 2022-02-14 16:46:35,339 on stmt: D = arg(1, name=D)
DEBUG 2022-02-14 16:46:35,339 on stmt: fixed_edge_reps = arg(2, name=fixed_edge_reps)
DEBUG 2022-02-14 16:46:35,339 on stmt: batch_max = arg(3, name=batch_max)
DEBUG 2022-02-14 16:46:35,339 on stmt: odd_cutoff = arg(4, name=odd_cutoff)
DEBUG 2022-02-14 16:46:35,339 on stmt: glynn = arg(5, name=glynn)
DEBUG 2022-02-14 16:46:35,339 on stmt: $const4.1 = const(NoneType, None)
DEBUG 2022-02-14 16:46:35,339 on stmt: $const6.2 = const(NoneType, None)
DEBUG 2022-02-14 16:46:35,339 on stmt: $8build_slice.3 = global(slice: <class 'slice'>)
DEBUG 2022-02-14 16:46:35,339 on stmt: $8build_slice.4 = call $8build_slice.3($const4.1, $const6.2, func=$8build_slice.3, args=(Var($const4.1, loop_hafnian_batch_gamma.py:23), Var($const6.2, loop_hafnian_batch_gamma.py:23)), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:46:35,339 on stmt: $const10.5 = const(int, 0)
DEBUG 2022-02-14 16:46:35,339 on stmt: $12build_tuple.6 = build_tuple(items=[Var($8build_slice.4, loop_hafnian_batch_gamma.py:23), Var($const10.5, loop_hafnian_batch_gamma.py:23)])
DEBUG 2022-02-14 16:46:35,339 on stmt: oddloop = static_getitem(value=D, index=(slice(None, None, None), 0), index_var=$12build_tuple.6, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:46:35,339 on stmt: $const20.9 = const(int, 0)
DEBUG 2022-02-14 16:46:35,339 on stmt: $const22.10 = const(NoneType, None)
DEBUG 2022-02-14 16:46:35,339 on stmt: $const24.11 = const(NoneType, None)
DEBUG 2022-02-14 16:46:35,339 on stmt: $26build_slice.12 = global(slice: <class 'slice'>)
DEBUG 2022-02-14 16:46:35,339 on stmt: $26build_slice.13 = call $26build_slice.12($const22.10, $const24.11, func=$26build_slice.12, args=(Var($const22.10, loop_hafnian_batch_gamma.py:24), Var($const24.11, loop_hafnian_batch_gamma.py:24)), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:46:35,339 on stmt: $28build_tuple.14 = build_tuple(items=[Var($const20.9, loop_hafnian_batch_gamma.py:24), Var($26build_slice.13, loop_hafnian_batch_gamma.py:24)])
DEBUG 2022-02-14 16:46:35,340 on stmt: oddV = static_getitem(value=A, index=(0, slice(None, None, None)), index_var=$28build_tuple.14, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:46:35,340 on stmt: $36load_attr.17 = getattr(value=A, attr=shape)
DEBUG 2022-02-14 16:46:35,340 on stmt: $const38.18 = const(int, 0)
DEBUG 2022-02-14 16:46:35,340 on stmt: n = static_getitem(value=$36load_attr.17, index=0, index_var=$const38.18, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:46:35,340 on stmt: $const44.20 = const(int, 2)
DEBUG 2022-02-14 16:46:35,340 on stmt: $48load_method.22 = getattr(value=fixed_edge_reps, attr=sum)
DEBUG 2022-02-14 16:46:35,340 on stmt: $50call_method.23 = call $48load_method.22(func=$48load_method.22, args=[], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:46:35,340 on stmt: N_fixed = $const44.20 * $50call_method.23
DEBUG 2022-02-14 16:46:35,340 on stmt: $const58.26 = const(int, 2)
DEBUG 2022-02-14 16:46:35,340 on stmt: $62binary_multiply.28 = $const58.26 * batch_max
DEBUG 2022-02-14 16:46:35,340 on stmt: $64binary_add.29 = N_fixed + $62binary_multiply.28
DEBUG 2022-02-14 16:46:35,340 on stmt: N_max = $64binary_add.29 + odd_cutoff
DEBUG 2022-02-14 16:46:35,340 on stmt: $72load_global.32 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:46:35,340 on stmt: $74load_method.33 = getattr(value=$72load_global.32, attr=concatenate)
DEBUG 2022-02-14 16:46:35,340 on stmt: $76load_global.34 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:46:35,340 on stmt: $78load_method.35 = getattr(value=$76load_global.34, attr=array)
DEBUG 2022-02-14 16:46:35,341 on stmt: $82build_list.37 = build_list(items=[Var(batch_max, loop_hafnian_batch_gamma.py:23)])
DEBUG 2022-02-14 16:46:35,341 on stmt: $84call_method.38 = call $78load_method.35($82build_list.37, func=$78load_method.35, args=[Var($82build_list.37, loop_hafnian_batch_gamma.py:31)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:46:35,341 on stmt: $88build_tuple.40 = build_tuple(items=[Var($84call_method.38, loop_hafnian_batch_gamma.py:31), Var(fixed_edge_reps, loop_hafnian_batch_gamma.py:23)])
DEBUG 2022-02-14 16:46:35,341 on stmt: edge_reps = call $74load_method.33($88build_tuple.40, func=$74load_method.33, args=[Var($88build_tuple.40, loop_hafnian_batch_gamma.py:31)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:46:35,341 on stmt: $94load_global.42 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:46:35,341 on stmt: $96load_method.43 = getattr(value=$94load_global.42, attr=prod)
DEBUG 2022-02-14 16:46:35,341 on stmt: $const100.45 = const(int, 1)
DEBUG 2022-02-14 16:46:35,341 on stmt: $102binary_add.46 = edge_reps + $const100.45
DEBUG 2022-02-14 16:46:35,341 on stmt: steps = call $96load_method.43($102binary_add.46, func=$96load_method.43, args=[Var($102binary_add.46, loop_hafnian_batch_gamma.py:32)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:46:35,341 on stmt: $110load_method.49 = getattr(value=edge_reps, attr=max)
DEBUG 2022-02-14 16:46:35,341 on stmt: $112call_method.50 = call $110load_method.49(func=$110load_method.49, args=[], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:46:35,341 on stmt: max_binom = $112call_method.50 + odd_cutoff
DEBUG 2022-02-14 16:46:35,341 on stmt: $120load_global.53 = global(precompute_binoms: CPUDispatcher(<function precompute_binoms at 0x7f7207b0e280>))
DEBUG 2022-02-14 16:46:35,341 on stmt: binoms = call $120load_global.53(max_binom, func=$120load_global.53, args=[Var(max_binom, loop_hafnian_batch_gamma.py:34)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:46:35,341 on stmt: $130load_attr.57 = getattr(value=D, attr=shape)
DEBUG 2022-02-14 16:46:35,341 on stmt: $const132.58 = const(int, 0)
DEBUG 2022-02-14 16:46:35,342 on stmt: n_D = static_getitem(value=$130load_attr.57, index=0, index_var=$const132.58, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:46:35,342 on stmt: $138load_global.60 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:46:35,342 on stmt: $140load_attr.61 = getattr(value=$138load_global.60, attr=zeros)
DEBUG 2022-02-14 16:46:35,342 on stmt: $const144.63 = const(int, 2)
DEBUG 2022-02-14 16:46:35,342 on stmt: $148binary_multiply.65 = $const144.63 * batch_max
DEBUG 2022-02-14 16:46:35,342 on stmt: $152binary_add.67 = $148binary_multiply.65 + odd_cutoff
DEBUG 2022-02-14 16:46:35,342 on stmt: $const154.68 = const(int, 1)
DEBUG 2022-02-14 16:46:35,342 on stmt: $156binary_add.69 = $152binary_add.67 + $const154.68
DEBUG 2022-02-14 16:46:35,342 on stmt: $158build_tuple.70 = build_tuple(items=[Var(n_D, loop_hafnian_batch_gamma.py:36), Var($156binary_add.69, loop_hafnian_batch_gamma.py:38)])
DEBUG 2022-02-14 16:46:35,342 on stmt: $160load_global.71 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:46:35,342 on stmt: $162load_attr.72 = getattr(value=$160load_global.71, attr=complex128)
DEBUG 2022-02-14 16:46:35,342 on stmt: H_batch = call $140load_attr.61($158build_tuple.70, func=$140load_attr.61, args=[Var($158build_tuple.70, loop_hafnian_batch_gamma.py:38)], kws=[('dtype', Var($162load_attr.72, loop_hafnian_batch_gamma.py:38))], vararg=None, target=None)
DEBUG 2022-02-14 16:46:35,342 on stmt: $170load_global.75 = global(prange: <class 'numba.misc.special.prange'>)
DEBUG 2022-02-14 16:46:35,342 on stmt: $174call_function.77 = call $170load_global.75(steps, func=$170load_global.75, args=[Var(steps, loop_hafnian_batch_gamma.py:32)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:46:35,342 on stmt: $176get_iter.78 = getiter(value=$174call_function.77)
DEBUG 2022-02-14 16:46:35,342 on stmt: $phi178.0 = $176get_iter.78
DEBUG 2022-02-14 16:46:35,342 on stmt: jump 178
DEBUG 2022-02-14 16:46:35,342 ==== SSA block rewrite pass on 178
DEBUG 2022-02-14 16:46:35,342 Running <numba.core.ssa._FreshVarHandler object at 0x7f7203a39cd0>
DEBUG 2022-02-14 16:46:35,342 on stmt: H_batch.2 = phi(incoming_values=[Var(H_batch, loop_hafnian_batch_gamma.py:38), Var(H_batch.1, loop_hafnian_batch_gamma.py:76)], incoming_blocks=[0, 600])
DEBUG 2022-02-14 16:46:35,342 on stmt: $178for_iter.1 = iternext(value=$phi178.0)
DEBUG 2022-02-14 16:46:35,343 on stmt: $178for_iter.2 = pair_first(value=$178for_iter.1)
DEBUG 2022-02-14 16:46:35,343 on stmt: $178for_iter.3 = pair_second(value=$178for_iter.1)
DEBUG 2022-02-14 16:46:35,343 on stmt: $phi182.1 = $178for_iter.2
DEBUG 2022-02-14 16:46:35,343 on stmt: branch $178for_iter.3, 182, 610
DEBUG 2022-02-14 16:46:35,343 ==== SSA block rewrite pass on 182
DEBUG 2022-02-14 16:46:35,343 Running <numba.core.ssa._FreshVarHandler object at 0x7f7203a39cd0>
DEBUG 2022-02-14 16:46:35,343 on stmt: j = $phi182.1
DEBUG 2022-02-14 16:46:35,343 on stmt: $184load_global.2 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:46:35,343 on stmt: $186load_attr.3 = getattr(value=$184load_global.2, attr=zeros)
DEBUG 2022-02-14 16:46:35,343 on stmt: $const190.5 = const(int, 2)
DEBUG 2022-02-14 16:46:35,343 on stmt: $194binary_multiply.7 = $const190.5 * batch_max
DEBUG 2022-02-14 16:46:35,343 on stmt: $198binary_add.9 = $194binary_multiply.7 + odd_cutoff
DEBUG 2022-02-14 16:46:35,343 on stmt: $const200.10 = const(int, 1)
DEBUG 2022-02-14 16:46:35,343 on stmt: $202binary_add.11 = $198binary_add.9 + $const200.10
DEBUG 2022-02-14 16:46:35,343 on stmt: $204build_tuple.12 = build_tuple(items=[Var(n_D, loop_hafnian_batch_gamma.py:36), Var($202binary_add.11, loop_hafnian_batch_gamma.py:42)])
DEBUG 2022-02-14 16:46:35,343 on stmt: $206load_global.13 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:46:35,343 on stmt: $208load_attr.14 = getattr(value=$206load_global.13, attr=complex128)
DEBUG 2022-02-14 16:46:35,343 on stmt: Hnew = call $186load_attr.3($204build_tuple.12, func=$186load_attr.3, args=[Var($204build_tuple.12, loop_hafnian_batch_gamma.py:42)], kws=[('dtype', Var($208load_attr.14, loop_hafnian_batch_gamma.py:42))], vararg=None, target=None)
DEBUG 2022-02-14 16:46:35,343 on stmt: $216load_global.17 = global(find_kept_edges: CPUDispatcher(<function find_kept_edges at 0x7f7207b0e700>))
DEBUG 2022-02-14 16:46:35,343 on stmt: kept_edges = call $216load_global.17(j, edge_reps, func=$216load_global.17, args=[Var(j, loop_hafnian_batch_gamma.py:40), Var(edge_reps, loop_hafnian_batch_gamma.py:31)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:46:35,344 on stmt: $228load_method.22 = getattr(value=kept_edges, attr=sum)
DEBUG 2022-02-14 16:46:35,344 on stmt: edges_sum = call $228load_method.22(func=$228load_method.22, args=[], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:46:35,344 on stmt: binom_prod = const(float, 1.0)
DEBUG 2022-02-14 16:46:35,344 on stmt: $238load_global.25 = global(range: <class 'range'>)
DEBUG 2022-02-14 16:46:35,344 on stmt: $const240.26 = const(int, 1)
DEBUG 2022-02-14 16:46:35,344 on stmt: $const244.28 = const(int, 2)
DEBUG 2022-02-14 16:46:35,344 on stmt: $246binary_floor_divide.29 = n // $const244.28
DEBUG 2022-02-14 16:46:35,344 on stmt: $248call_function.30 = call $238load_global.25($const240.26, $246binary_floor_divide.29, func=$238load_global.25, args=[Var($const240.26, loop_hafnian_batch_gamma.py:48), Var($246binary_floor_divide.29, loop_hafnian_batch_gamma.py:48)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:46:35,344 on stmt: $250get_iter.31 = getiter(value=$248call_function.30)
DEBUG 2022-02-14 16:46:35,344 on stmt: $phi252.1 = $250get_iter.31
DEBUG 2022-02-14 16:46:35,344 on stmt: jump 252
DEBUG 2022-02-14 16:46:35,344 ==== SSA block rewrite pass on 252
DEBUG 2022-02-14 16:46:35,344 Running <numba.core.ssa._FreshVarHandler object at 0x7f7203a39cd0>
DEBUG 2022-02-14 16:46:35,344 on stmt: binom_prod.2 = phi(incoming_values=[Var(binom_prod, loop_hafnian_batch_gamma.py:47), Var(binom_prod.1, loop_hafnian_batch_gamma.py:49)], incoming_blocks=[182, 254])
DEBUG 2022-02-14 16:46:35,344 on stmt: $252for_iter.2 = iternext(value=$phi252.1)
DEBUG 2022-02-14 16:46:35,344 on stmt: $252for_iter.3 = pair_first(value=$252for_iter.2)
DEBUG 2022-02-14 16:46:35,344 on stmt: $252for_iter.4 = pair_second(value=$252for_iter.2)
DEBUG 2022-02-14 16:46:35,344 on stmt: $phi254.2 = $252for_iter.3
DEBUG 2022-02-14 16:46:35,344 on stmt: branch $252for_iter.4, 254, 282
DEBUG 2022-02-14 16:46:35,344 ==== SSA block rewrite pass on 254
DEBUG 2022-02-14 16:46:35,344 Running <numba.core.ssa._FreshVarHandler object at 0x7f7203a39cd0>
DEBUG 2022-02-14 16:46:35,344 on stmt: i = $phi254.2
DEBUG 2022-02-14 16:46:35,344 on stmt: $264binary_subscr.7 = getitem(value=edge_reps, index=i, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:46:35,345 on stmt: $270binary_subscr.10 = getitem(value=kept_edges, index=i, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:46:35,345 on stmt: $272build_tuple.11 = build_tuple(items=[Var($264binary_subscr.7, loop_hafnian_batch_gamma.py:49), Var($270binary_subscr.10, loop_hafnian_batch_gamma.py:49)])
DEBUG 2022-02-14 16:46:35,345 on stmt: $274binary_subscr.12 = getitem(value=binoms, index=$272build_tuple.11, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:46:35,345 on stmt: $276inplace_multiply.13 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=binom_prod.2, rhs=$274binary_subscr.12, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:46:35,345 on stmt: binom_prod.1 = $276inplace_multiply.13
DEBUG 2022-02-14 16:46:35,345 on stmt: jump 252
DEBUG 2022-02-14 16:46:35,345 ==== SSA block rewrite pass on 282
DEBUG 2022-02-14 16:46:35,345 Running <numba.core.ssa._FreshVarHandler object at 0x7f7203a39cd0>
DEBUG 2022-02-14 16:46:35,345 on stmt: bool284 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:46:35,345 on stmt: $284pred = call bool284(glynn, func=bool284, args=(Var(glynn, loop_hafnian_batch_gamma.py:23),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:46:35,345 on stmt: branch $284pred, 288, 302
DEBUG 2022-02-14 16:46:35,345 ==== SSA block rewrite pass on 288
DEBUG 2022-02-14 16:46:35,345 Running <numba.core.ssa._FreshVarHandler object at 0x7f7203a39cd0>
DEBUG 2022-02-14 16:46:35,345 on stmt: $const288.1 = const(int, 2)
DEBUG 2022-02-14 16:46:35,345 on stmt: $292binary_multiply.3 = $const288.1 * kept_edges
DEBUG 2022-02-14 16:46:35,345 on stmt: delta = $292binary_multiply.3 - edge_reps
DEBUG 2022-02-14 16:46:35,345 on stmt: jump 306
DEBUG 2022-02-14 16:46:35,345 ==== SSA block rewrite pass on 302
DEBUG 2022-02-14 16:46:35,345 Running <numba.core.ssa._FreshVarHandler object at 0x7f7203a39cd0>
DEBUG 2022-02-14 16:46:35,345 on stmt: delta.1 = kept_edges
DEBUG 2022-02-14 16:46:35,345 on stmt: jump 306
DEBUG 2022-02-14 16:46:35,345 ==== SSA block rewrite pass on 306
DEBUG 2022-02-14 16:46:35,345 Running <numba.core.ssa._FreshVarHandler object at 0x7f7203a39cd0>
DEBUG 2022-02-14 16:46:35,345 on stmt: delta.2 = phi(incoming_values=[Var(delta, loop_hafnian_batch_gamma.py:52), Var(delta.1, loop_hafnian_batch_gamma.py:54)], incoming_blocks=[288, 302])
DEBUG 2022-02-14 16:46:35,345 on stmt: $306load_global.1 = global(get_submatrices: CPUDispatcher(<function get_submatrices at 0x7f7207b0eca0>))
DEBUG 2022-02-14 16:46:35,346 on stmt: $const314.5 = const(int, 0)
DEBUG 2022-02-14 16:46:35,346 on stmt: $const316.6 = const(NoneType, None)
DEBUG 2022-02-14 16:46:35,346 on stmt: $const318.7 = const(NoneType, None)
DEBUG 2022-02-14 16:46:35,346 on stmt: $320build_slice.8 = global(slice: <class 'slice'>)
DEBUG 2022-02-14 16:46:35,346 on stmt: $320build_slice.9 = call $320build_slice.8($const316.6, $const318.7, func=$320build_slice.8, args=(Var($const316.6, loop_hafnian_batch_gamma.py:56), Var($const318.7, loop_hafnian_batch_gamma.py:56)), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:46:35,346 on stmt: $322build_tuple.10 = build_tuple(items=[Var($const314.5, loop_hafnian_batch_gamma.py:56), Var($320build_slice.9, loop_hafnian_batch_gamma.py:56)])
DEBUG 2022-02-14 16:46:35,346 on stmt: $324binary_subscr.11 = static_getitem(value=D, index=(0, slice(None, None, None)), index_var=$322build_tuple.10, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:46:35,346 on stmt: $328call_function.13 = call $306load_global.1(delta.2, A, $324binary_subscr.11, oddV, func=$306load_global.1, args=[Var(delta.2, loop_hafnian_batch_gamma.py:56), Var(A, loop_hafnian_batch_gamma.py:23), Var($324binary_subscr.11, loop_hafnian_batch_gamma.py:56), Var(oddV, loop_hafnian_batch_gamma.py:24)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:46:35,346 on stmt: $330unpack_sequence.18 = exhaust_iter(value=$328call_function.13, count=4)
DEBUG 2022-02-14 16:46:35,346 on stmt: $330unpack_sequence.14 = static_getitem(value=$330unpack_sequence.18, index=0, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:46:35,346 on stmt: $330unpack_sequence.15 = static_getitem(value=$330unpack_sequence.18, index=1, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:46:35,346 on stmt: $330unpack_sequence.16 = static_getitem(value=$330unpack_sequence.18, index=2, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:46:35,346 on stmt: $330unpack_sequence.17 = static_getitem(value=$330unpack_sequence.18, index=3, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:46:35,346 on stmt: AX_S = $330unpack_sequence.14
DEBUG 2022-02-14 16:46:35,346 on stmt: XD_S = $330unpack_sequence.15
DEBUG 2022-02-14 16:46:35,346 first assign: XD_S
DEBUG 2022-02-14 16:46:35,346 replaced with: XD_S = $330unpack_sequence.15
DEBUG 2022-02-14 16:46:35,346 on stmt: D_S = $330unpack_sequence.16
DEBUG 2022-02-14 16:46:35,346 on stmt: oddVX_S = $330unpack_sequence.17
DEBUG 2022-02-14 16:46:35,346 on stmt: $340load_global.19 = global(eigvals: CPUDispatcher(<function eigvals at 0x7f7207a993a0>))
DEBUG 2022-02-14 16:46:35,346 on stmt: E = call $340load_global.19(AX_S, func=$340load_global.19, args=[Var(AX_S, loop_hafnian_batch_gamma.py:56)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:46:35,346 on stmt: $348load_global.22 = global(range: <class 'range'>)
DEBUG 2022-02-14 16:46:35,346 on stmt: $352call_function.24 = call $348load_global.22(n_D, func=$348load_global.22, args=[Var(n_D, loop_hafnian_batch_gamma.py:36)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:46:35,346 on stmt: $354get_iter.25 = getiter(value=$352call_function.24)
DEBUG 2022-02-14 16:46:35,347 on stmt: $phi356.1 = $354get_iter.25
DEBUG 2022-02-14 16:46:35,347 on stmt: jump 356
DEBUG 2022-02-14 16:46:35,347 ==== SSA block rewrite pass on 356
DEBUG 2022-02-14 16:46:35,347 Running <numba.core.ssa._FreshVarHandler object at 0x7f7203a39cd0>
DEBUG 2022-02-14 16:46:35,347 on stmt: $356for_iter.2 = iternext(value=$phi356.1)
DEBUG 2022-02-14 16:46:35,347 on stmt: $356for_iter.3 = pair_first(value=$356for_iter.2)
DEBUG 2022-02-14 16:46:35,347 on stmt: $356for_iter.4 = pair_second(value=$356for_iter.2)
DEBUG 2022-02-14 16:46:35,347 on stmt: $phi358.2 = $356for_iter.3
DEBUG 2022-02-14 16:46:35,347 on stmt: branch $356for_iter.4, 358, 600
DEBUG 2022-02-14 16:46:35,347 ==== SSA block rewrite pass on 358
DEBUG 2022-02-14 16:46:35,347 Running <numba.core.ssa._FreshVarHandler object at 0x7f7203a39cd0>
DEBUG 2022-02-14 16:46:35,347 on stmt: k = $phi358.2
DEBUG 2022-02-14 16:46:35,347 on stmt: $360load_global.3 = global(get_Dsubmatrices: CPUDispatcher(<function get_Dsubmatrices at 0x7f7207a99160>))
DEBUG 2022-02-14 16:46:35,347 on stmt: $const368.7 = const(NoneType, None)
DEBUG 2022-02-14 16:46:35,347 on stmt: $const370.8 = const(NoneType, None)
DEBUG 2022-02-14 16:46:35,347 on stmt: $372build_slice.9 = global(slice: <class 'slice'>)
DEBUG 2022-02-14 16:46:35,347 on stmt: $372build_slice.10 = call $372build_slice.9($const368.7, $const370.8, func=$372build_slice.9, args=(Var($const368.7, loop_hafnian_batch_gamma.py:61), Var($const370.8, loop_hafnian_batch_gamma.py:61)), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:46:35,347 on stmt: $374build_tuple.11 = build_tuple(items=[Var(k, loop_hafnian_batch_gamma.py:60), Var($372build_slice.10, loop_hafnian_batch_gamma.py:61)])
DEBUG 2022-02-14 16:46:35,347 on stmt: $376binary_subscr.12 = getitem(value=D, index=$374build_tuple.11, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:46:35,347 on stmt: $378call_function.13 = call $360load_global.3(delta.2, $376binary_subscr.12, func=$360load_global.3, args=[Var(delta.2, loop_hafnian_batch_gamma.py:56), Var($376binary_subscr.12, loop_hafnian_batch_gamma.py:61)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:46:35,347 on stmt: $380unpack_sequence.16 = exhaust_iter(value=$378call_function.13, count=2)
DEBUG 2022-02-14 16:46:35,347 on stmt: $380unpack_sequence.14 = static_getitem(value=$380unpack_sequence.16, index=0, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:46:35,347 on stmt: $380unpack_sequence.15 = static_getitem(value=$380unpack_sequence.16, index=1, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:46:35,347 on stmt: XD_S = $380unpack_sequence.14
DEBUG 2022-02-14 16:46:35,347 replaced with: XD_S.1 = $380unpack_sequence.14
DEBUG 2022-02-14 16:46:35,348 on stmt: D_S = $380unpack_sequence.15
DEBUG 2022-02-14 16:46:35,348 on stmt: $386load_global.17 = global(f_loop: CPUDispatcher(<function f_loop at 0x7f7207b0e940>))
DEBUG 2022-02-14 16:46:35,348 on stmt: f_even = call $386load_global.17(E, AX_S, XD_S, D_S, N_max, func=$386load_global.17, args=[Var(E, loop_hafnian_batch_gamma.py:58), Var(AX_S, loop_hafnian_batch_gamma.py:56), Var(XD_S, loop_hafnian_batch_gamma.py:56), Var(D_S, loop_hafnian_batch_gamma.py:56), Var(N_max, loop_hafnian_batch_gamma.py:29)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:46:35,348 on stmt: $402load_global.24 = global(f_loop_odd: CPUDispatcher(<function f_loop_odd at 0x7f7207b0eaf0>))
DEBUG 2022-02-14 16:46:35,348 on stmt: $418binary_subscr.32 = getitem(value=oddloop, index=k, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:46:35,348 on stmt: f_odd = call $402load_global.24(E, AX_S, XD_S, D_S, N_max, $418binary_subscr.32, oddVX_S, func=$402load_global.24, args=[Var(E, loop_hafnian_batch_gamma.py:58), Var(AX_S, loop_hafnian_batch_gamma.py:56), Var(XD_S, loop_hafnian_batch_gamma.py:56), Var(D_S, loop_hafnian_batch_gamma.py:56), Var(N_max, loop_hafnian_batch_gamma.py:29), Var($418binary_subscr.32, loop_hafnian_batch_gamma.py:64), Var(oddVX_S, loop_hafnian_batch_gamma.py:56)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:46:35,348 on stmt: $426load_global.35 = global(range: <class 'range'>)
DEBUG 2022-02-14 16:46:35,348 on stmt: $const428.36 = const(int, 2)
DEBUG 2022-02-14 16:46:35,348 on stmt: $const432.38 = const(int, 0)
DEBUG 2022-02-14 16:46:35,348 on stmt: $434binary_subscr.39 = static_getitem(value=kept_edges, index=0, index_var=$const432.38, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:46:35,348 on stmt: $436binary_multiply.40 = $const428.36 * $434binary_subscr.39
DEBUG 2022-02-14 16:46:35,348 on stmt: $const438.41 = const(int, 2)
DEBUG 2022-02-14 16:46:35,348 on stmt: $442binary_multiply.43 = $const438.41 * batch_max
DEBUG 2022-02-14 16:46:35,348 on stmt: $446binary_add.45 = $442binary_multiply.43 + odd_cutoff
DEBUG 2022-02-14 16:46:35,348 on stmt: $const448.46 = const(int, 1)
DEBUG 2022-02-14 16:46:35,348 on stmt: $450binary_add.47 = $446binary_add.45 + $const448.46
DEBUG 2022-02-14 16:46:35,348 on stmt: $452call_function.48 = call $426load_global.35($436binary_multiply.40, $450binary_add.47, func=$426load_global.35, args=[Var($436binary_multiply.40, loop_hafnian_batch_gamma.py:66), Var($450binary_add.47, loop_hafnian_batch_gamma.py:66)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:46:35,348 on stmt: $454get_iter.49 = getiter(value=$452call_function.48)
DEBUG 2022-02-14 16:46:35,348 on stmt: $phi456.2 = $454get_iter.49
DEBUG 2022-02-14 16:46:35,348 on stmt: jump 456
DEBUG 2022-02-14 16:46:35,348 ==== SSA block rewrite pass on 456
DEBUG 2022-02-14 16:46:35,348 Running <numba.core.ssa._FreshVarHandler object at 0x7f7203a39cd0>
DEBUG 2022-02-14 16:46:35,348 on stmt: $456for_iter.3 = iternext(value=$phi456.2)
DEBUG 2022-02-14 16:46:35,348 on stmt: $456for_iter.4 = pair_first(value=$456for_iter.3)
DEBUG 2022-02-14 16:46:35,349 on stmt: $456for_iter.5 = pair_second(value=$456for_iter.3)
DEBUG 2022-02-14 16:46:35,349 on stmt: $phi458.3 = $456for_iter.4
DEBUG 2022-02-14 16:46:35,349 on stmt: branch $456for_iter.5, 458, 596
DEBUG 2022-02-14 16:46:35,349 ==== SSA block rewrite pass on 458
DEBUG 2022-02-14 16:46:35,349 Running <numba.core.ssa._FreshVarHandler object at 0x7f7203a39cd0>
DEBUG 2022-02-14 16:46:35,349 on stmt: N_det = $phi458.3
DEBUG 2022-02-14 16:46:35,349 on stmt: N = N_fixed + N_det
DEBUG 2022-02-14 16:46:35,349 on stmt: $const468.7 = const(float, -1.0)
DEBUG 2022-02-14 16:46:35,349 on stmt: $const472.9 = const(int, 2)
DEBUG 2022-02-14 16:46:35,349 on stmt: $474binary_floor_divide.10 = N // $const472.9
DEBUG 2022-02-14 16:46:35,349 on stmt: $478binary_subtract.12 = $474binary_floor_divide.10 - edges_sum
DEBUG 2022-02-14 16:46:35,349 on stmt: plus_minus = $const468.7 ** $478binary_subtract.12
DEBUG 2022-02-14 16:46:35,349 on stmt: $const488.16 = const(int, 2)
DEBUG 2022-02-14 16:46:35,349 on stmt: $490binary_floor_divide.17 = N_det // $const488.16
DEBUG 2022-02-14 16:46:35,349 on stmt: $const494.19 = const(int, 0)
DEBUG 2022-02-14 16:46:35,349 on stmt: $496binary_subscr.20 = static_getitem(value=kept_edges, index=0, index_var=$const494.19, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:46:35,349 on stmt: $498build_tuple.21 = build_tuple(items=[Var($490binary_floor_divide.17, loop_hafnian_batch_gamma.py:70), Var($496binary_subscr.20, loop_hafnian_batch_gamma.py:70)])
DEBUG 2022-02-14 16:46:35,349 on stmt: $500binary_subscr.22 = getitem(value=binoms, index=$498build_tuple.21, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:46:35,349 on stmt: n_det_binom_prod = $500binary_subscr.22 * binom_prod.2
DEBUG 2022-02-14 16:46:35,349 on stmt: $const510.26 = const(int, 2)
DEBUG 2022-02-14 16:46:35,349 on stmt: $512binary_modulo.27 = N_det % $const510.26
DEBUG 2022-02-14 16:46:35,349 on stmt: $const514.28 = const(int, 0)
DEBUG 2022-02-14 16:46:35,349 on stmt: $516compare_op.29 = $512binary_modulo.27 == $const514.28
DEBUG 2022-02-14 16:46:35,349 on stmt: bool518 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:46:35,350 on stmt: $518pred = call bool518($516compare_op.29, func=bool518, args=(Var($516compare_op.29, loop_hafnian_batch_gamma.py:72),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:46:35,350 on stmt: branch $518pred, 522, 560
DEBUG 2022-02-14 16:46:35,350 ==== SSA block rewrite pass on 522
DEBUG 2022-02-14 16:46:35,350 Running <numba.core.ssa._FreshVarHandler object at 0x7f7203a39cd0>
DEBUG 2022-02-14 16:46:35,350 on stmt: $528build_tuple.6 = build_tuple(items=[Var(k, loop_hafnian_batch_gamma.py:60), Var(N_det, loop_hafnian_batch_gamma.py:66)])
DEBUG 2022-02-14 16:46:35,350 on stmt: $532binary_subscr.9 = getitem(value=Hnew, index=$528build_tuple.6, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:46:35,350 on stmt: $538binary_multiply.12 = n_det_binom_prod * plus_minus
DEBUG 2022-02-14 16:46:35,350 on stmt: $const544.15 = const(int, 2)
DEBUG 2022-02-14 16:46:35,350 on stmt: $546binary_floor_divide.16 = N // $const544.15
DEBUG 2022-02-14 16:46:35,350 on stmt: $548binary_subscr.17 = getitem(value=f_even, index=$546binary_floor_divide.16, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:46:35,350 on stmt: $550binary_multiply.18 = $538binary_multiply.12 * $548binary_subscr.17
DEBUG 2022-02-14 16:46:35,350 on stmt: $552inplace_add.19 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$532binary_subscr.9, rhs=$550binary_multiply.18, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:46:35,350 on stmt: Hnew[$528build_tuple.6] = $552inplace_add.19
DEBUG 2022-02-14 16:46:35,350 on stmt: jump 592
DEBUG 2022-02-14 16:46:35,350 ==== SSA block rewrite pass on 560
DEBUG 2022-02-14 16:46:35,350 Running <numba.core.ssa._FreshVarHandler object at 0x7f7203a39cd0>
DEBUG 2022-02-14 16:46:35,350 on stmt: $566build_tuple.6 = build_tuple(items=[Var(k, loop_hafnian_batch_gamma.py:60), Var(N_det, loop_hafnian_batch_gamma.py:66)])
DEBUG 2022-02-14 16:46:35,350 on stmt: $570binary_subscr.9 = getitem(value=Hnew, index=$566build_tuple.6, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:46:35,350 on stmt: $576binary_multiply.12 = n_det_binom_prod * plus_minus
DEBUG 2022-02-14 16:46:35,350 on stmt: $582binary_subscr.15 = getitem(value=f_odd, index=N, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:46:35,351 on stmt: $584binary_multiply.16 = $576binary_multiply.12 * $582binary_subscr.15
DEBUG 2022-02-14 16:46:35,351 on stmt: $586inplace_add.17 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$570binary_subscr.9, rhs=$584binary_multiply.16, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:46:35,351 on stmt: Hnew[$566build_tuple.6] = $586inplace_add.17
DEBUG 2022-02-14 16:46:35,351 on stmt: jump 592
DEBUG 2022-02-14 16:46:35,351 ==== SSA block rewrite pass on 592
DEBUG 2022-02-14 16:46:35,351 Running <numba.core.ssa._FreshVarHandler object at 0x7f7203a39cd0>
DEBUG 2022-02-14 16:46:35,351 on stmt: jump 456
DEBUG 2022-02-14 16:46:35,351 ==== SSA block rewrite pass on 596
DEBUG 2022-02-14 16:46:35,351 Running <numba.core.ssa._FreshVarHandler object at 0x7f7203a39cd0>
DEBUG 2022-02-14 16:46:35,351 on stmt: jump 356
DEBUG 2022-02-14 16:46:35,351 ==== SSA block rewrite pass on 600
DEBUG 2022-02-14 16:46:35,351 Running <numba.core.ssa._FreshVarHandler object at 0x7f7203a39cd0>
DEBUG 2022-02-14 16:46:35,351 on stmt: $604inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=H_batch.2, rhs=Hnew, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:46:35,351 on stmt: H_batch.1 = $604inplace_add.3
DEBUG 2022-02-14 16:46:35,351 on stmt: jump 178
DEBUG 2022-02-14 16:46:35,351 ==== SSA block rewrite pass on 610
DEBUG 2022-02-14 16:46:35,351 Running <numba.core.ssa._FreshVarHandler object at 0x7f7203a39cd0>
DEBUG 2022-02-14 16:46:35,351 on stmt: bool612 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:46:35,351 on stmt: $612pred = call bool612(glynn, func=bool612, args=(Var(glynn, loop_hafnian_batch_gamma.py:23),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:46:35,351 on stmt: branch $612pred, 616, 678
DEBUG 2022-02-14 16:46:35,351 ==== SSA block rewrite pass on 616
DEBUG 2022-02-14 16:46:35,351 Running <numba.core.ssa._FreshVarHandler object at 0x7f7203a39cd0>
DEBUG 2022-02-14 16:46:35,351 on stmt: $616load_global.0 = global(range: <class 'range'>)
DEBUG 2022-02-14 16:46:35,351 on stmt: $620load_attr.2 = getattr(value=H_batch.2, attr=shape)
DEBUG 2022-02-14 16:46:35,351 on stmt: $const622.3 = const(int, 1)
DEBUG 2022-02-14 16:46:35,351 on stmt: $624binary_subscr.4 = static_getitem(value=$620load_attr.2, index=1, index_var=$const622.3, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:46:35,352 on stmt: $626call_function.5 = call $616load_global.0($624binary_subscr.4, func=$616load_global.0, args=[Var($624binary_subscr.4, loop_hafnian_batch_gamma.py:79)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:46:35,352 on stmt: $628get_iter.6 = getiter(value=$626call_function.5)
DEBUG 2022-02-14 16:46:35,352 on stmt: $phi630.0 = $628get_iter.6
DEBUG 2022-02-14 16:46:35,352 on stmt: jump 630
DEBUG 2022-02-14 16:46:35,352 ==== SSA block rewrite pass on 630
DEBUG 2022-02-14 16:46:35,352 Running <numba.core.ssa._FreshVarHandler object at 0x7f7203a39cd0>
DEBUG 2022-02-14 16:46:35,352 on stmt: $630for_iter.1 = iternext(value=$phi630.0)
DEBUG 2022-02-14 16:46:35,352 on stmt: $630for_iter.2 = pair_first(value=$630for_iter.1)
DEBUG 2022-02-14 16:46:35,352 on stmt: $630for_iter.3 = pair_second(value=$630for_iter.1)
DEBUG 2022-02-14 16:46:35,352 on stmt: $phi632.1 = $630for_iter.2
DEBUG 2022-02-14 16:46:35,352 on stmt: branch $630for_iter.3, 632, 678
DEBUG 2022-02-14 16:46:35,352 ==== SSA block rewrite pass on 632
DEBUG 2022-02-14 16:46:35,352 Running <numba.core.ssa._FreshVarHandler object at 0x7f7203a39cd0>
DEBUG 2022-02-14 16:46:35,352 on stmt: j.1 = $phi632.1
DEBUG 2022-02-14 16:46:35,352 on stmt: x = N_fixed + j.1
DEBUG 2022-02-14 16:46:35,352 on stmt: $const644.6 = const(NoneType, None)
DEBUG 2022-02-14 16:46:35,352 on stmt: $const646.7 = const(NoneType, None)
DEBUG 2022-02-14 16:46:35,352 on stmt: $648build_slice.8 = global(slice: <class 'slice'>)
DEBUG 2022-02-14 16:46:35,352 on stmt: $648build_slice.9 = call $648build_slice.8($const644.6, $const646.7, func=$648build_slice.8, args=(Var($const644.6, loop_hafnian_batch_gamma.py:81), Var($const646.7, loop_hafnian_batch_gamma.py:81)), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:46:35,352 on stmt: $652build_tuple.11 = build_tuple(items=[Var($648build_slice.9, loop_hafnian_batch_gamma.py:81), Var(j.1, loop_hafnian_batch_gamma.py:79)])
DEBUG 2022-02-14 16:46:35,352 on stmt: $656binary_subscr.14 = getitem(value=H_batch.2, index=$652build_tuple.11, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:46:35,352 on stmt: $const658.15 = const(float, 0.5)
DEBUG 2022-02-14 16:46:35,352 on stmt: $const662.17 = const(int, 2)
DEBUG 2022-02-14 16:46:35,352 on stmt: $664binary_floor_divide.18 = x // $const662.17
DEBUG 2022-02-14 16:46:35,352 on stmt: $666binary_power.19 = $const658.15 ** $664binary_floor_divide.18
DEBUG 2022-02-14 16:46:35,352 on stmt: $668inplace_multiply.20 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=$656binary_subscr.14, rhs=$666binary_power.19, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:46:35,353 on stmt: H_batch.2[$652build_tuple.11] = $668inplace_multiply.20
DEBUG 2022-02-14 16:46:35,353 on stmt: jump 630
DEBUG 2022-02-14 16:46:35,353 ==== SSA block rewrite pass on 678
DEBUG 2022-02-14 16:46:35,353 Running <numba.core.ssa._FreshVarHandler object at 0x7f7203a39cd0>
DEBUG 2022-02-14 16:46:35,353 on stmt: $680return_value.1 = cast(value=H_batch.2)
DEBUG 2022-02-14 16:46:35,353 on stmt: return $680return_value.1
DEBUG 2022-02-14 16:46:35,353 Replaced assignments: defaultdict(<class 'list'>,
            {306: [<numba.core.ir.Assign object at 0x7f7203a2d2e0>],
             358: [<numba.core.ir.Assign object at 0x7f7203a2d4f0>]})
DEBUG 2022-02-14 16:46:35,353 ==== SSA block rewrite pass on 0
DEBUG 2022-02-14 16:46:35,353 Running <numba.core.ssa._FixSSAVars object at 0x7f72073bcf10>
DEBUG 2022-02-14 16:46:35,353 on stmt: A = arg(0, name=A)
DEBUG 2022-02-14 16:46:35,353 on stmt: D = arg(1, name=D)
DEBUG 2022-02-14 16:46:35,353 on stmt: fixed_edge_reps = arg(2, name=fixed_edge_reps)
DEBUG 2022-02-14 16:46:35,353 on stmt: batch_max = arg(3, name=batch_max)
DEBUG 2022-02-14 16:46:35,353 on stmt: odd_cutoff = arg(4, name=odd_cutoff)
DEBUG 2022-02-14 16:46:35,353 on stmt: glynn = arg(5, name=glynn)
DEBUG 2022-02-14 16:46:35,353 on stmt: $const4.1 = const(NoneType, None)
DEBUG 2022-02-14 16:46:35,353 on stmt: $const6.2 = const(NoneType, None)
DEBUG 2022-02-14 16:46:35,353 on stmt: $8build_slice.3 = global(slice: <class 'slice'>)
DEBUG 2022-02-14 16:46:35,353 on stmt: $8build_slice.4 = call $8build_slice.3($const4.1, $const6.2, func=$8build_slice.3, args=(Var($const4.1, loop_hafnian_batch_gamma.py:23), Var($const6.2, loop_hafnian_batch_gamma.py:23)), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:46:35,353 on stmt: $const10.5 = const(int, 0)
DEBUG 2022-02-14 16:46:35,353 on stmt: $12build_tuple.6 = build_tuple(items=[Var($8build_slice.4, loop_hafnian_batch_gamma.py:23), Var($const10.5, loop_hafnian_batch_gamma.py:23)])
DEBUG 2022-02-14 16:46:35,353 on stmt: oddloop = static_getitem(value=D, index=(slice(None, None, None), 0), index_var=$12build_tuple.6, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:46:35,354 on stmt: $const20.9 = const(int, 0)
DEBUG 2022-02-14 16:46:35,354 on stmt: $const22.10 = const(NoneType, None)
DEBUG 2022-02-14 16:46:35,354 on stmt: $const24.11 = const(NoneType, None)
DEBUG 2022-02-14 16:46:35,354 on stmt: $26build_slice.12 = global(slice: <class 'slice'>)
DEBUG 2022-02-14 16:46:35,354 on stmt: $26build_slice.13 = call $26build_slice.12($const22.10, $const24.11, func=$26build_slice.12, args=(Var($const22.10, loop_hafnian_batch_gamma.py:24), Var($const24.11, loop_hafnian_batch_gamma.py:24)), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:46:35,354 on stmt: $28build_tuple.14 = build_tuple(items=[Var($const20.9, loop_hafnian_batch_gamma.py:24), Var($26build_slice.13, loop_hafnian_batch_gamma.py:24)])
DEBUG 2022-02-14 16:46:35,354 on stmt: oddV = static_getitem(value=A, index=(0, slice(None, None, None)), index_var=$28build_tuple.14, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:46:35,354 on stmt: $36load_attr.17 = getattr(value=A, attr=shape)
DEBUG 2022-02-14 16:46:35,354 on stmt: $const38.18 = const(int, 0)
DEBUG 2022-02-14 16:46:35,354 on stmt: n = static_getitem(value=$36load_attr.17, index=0, index_var=$const38.18, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:46:35,354 on stmt: $const44.20 = const(int, 2)
DEBUG 2022-02-14 16:46:35,354 on stmt: $48load_method.22 = getattr(value=fixed_edge_reps, attr=sum)
DEBUG 2022-02-14 16:46:35,354 on stmt: $50call_method.23 = call $48load_method.22(func=$48load_method.22, args=[], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:46:35,354 on stmt: N_fixed = $const44.20 * $50call_method.23
DEBUG 2022-02-14 16:46:35,354 on stmt: $const58.26 = const(int, 2)
DEBUG 2022-02-14 16:46:35,354 on stmt: $62binary_multiply.28 = $const58.26 * batch_max
DEBUG 2022-02-14 16:46:35,354 on stmt: $64binary_add.29 = N_fixed + $62binary_multiply.28
DEBUG 2022-02-14 16:46:35,354 on stmt: N_max = $64binary_add.29 + odd_cutoff
DEBUG 2022-02-14 16:46:35,354 on stmt: $72load_global.32 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:46:35,354 on stmt: $74load_method.33 = getattr(value=$72load_global.32, attr=concatenate)
DEBUG 2022-02-14 16:46:35,354 on stmt: $76load_global.34 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:46:35,355 on stmt: $78load_method.35 = getattr(value=$76load_global.34, attr=array)
DEBUG 2022-02-14 16:46:35,355 on stmt: $82build_list.37 = build_list(items=[Var(batch_max, loop_hafnian_batch_gamma.py:23)])
DEBUG 2022-02-14 16:46:35,355 on stmt: $84call_method.38 = call $78load_method.35($82build_list.37, func=$78load_method.35, args=[Var($82build_list.37, loop_hafnian_batch_gamma.py:31)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:46:35,355 on stmt: $88build_tuple.40 = build_tuple(items=[Var($84call_method.38, loop_hafnian_batch_gamma.py:31), Var(fixed_edge_reps, loop_hafnian_batch_gamma.py:23)])
DEBUG 2022-02-14 16:46:35,355 on stmt: edge_reps = call $74load_method.33($88build_tuple.40, func=$74load_method.33, args=[Var($88build_tuple.40, loop_hafnian_batch_gamma.py:31)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:46:35,355 on stmt: $94load_global.42 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:46:35,355 on stmt: $96load_method.43 = getattr(value=$94load_global.42, attr=prod)
DEBUG 2022-02-14 16:46:35,355 on stmt: $const100.45 = const(int, 1)
DEBUG 2022-02-14 16:46:35,355 on stmt: $102binary_add.46 = edge_reps + $const100.45
DEBUG 2022-02-14 16:46:35,355 on stmt: steps = call $96load_method.43($102binary_add.46, func=$96load_method.43, args=[Var($102binary_add.46, loop_hafnian_batch_gamma.py:32)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:46:35,355 on stmt: $110load_method.49 = getattr(value=edge_reps, attr=max)
DEBUG 2022-02-14 16:46:35,355 on stmt: $112call_method.50 = call $110load_method.49(func=$110load_method.49, args=[], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:46:35,355 on stmt: max_binom = $112call_method.50 + odd_cutoff
DEBUG 2022-02-14 16:46:35,355 on stmt: $120load_global.53 = global(precompute_binoms: CPUDispatcher(<function precompute_binoms at 0x7f7207b0e280>))
DEBUG 2022-02-14 16:46:35,355 on stmt: binoms = call $120load_global.53(max_binom, func=$120load_global.53, args=[Var(max_binom, loop_hafnian_batch_gamma.py:34)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:46:35,355 on stmt: $130load_attr.57 = getattr(value=D, attr=shape)
DEBUG 2022-02-14 16:46:35,355 on stmt: $const132.58 = const(int, 0)
DEBUG 2022-02-14 16:46:35,356 on stmt: n_D = static_getitem(value=$130load_attr.57, index=0, index_var=$const132.58, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:46:35,356 on stmt: $138load_global.60 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:46:35,356 on stmt: $140load_attr.61 = getattr(value=$138load_global.60, attr=zeros)
DEBUG 2022-02-14 16:46:35,356 on stmt: $const144.63 = const(int, 2)
DEBUG 2022-02-14 16:46:35,356 on stmt: $148binary_multiply.65 = $const144.63 * batch_max
DEBUG 2022-02-14 16:46:35,356 on stmt: $152binary_add.67 = $148binary_multiply.65 + odd_cutoff
DEBUG 2022-02-14 16:46:35,356 on stmt: $const154.68 = const(int, 1)
DEBUG 2022-02-14 16:46:35,356 on stmt: $156binary_add.69 = $152binary_add.67 + $const154.68
DEBUG 2022-02-14 16:46:35,356 on stmt: $158build_tuple.70 = build_tuple(items=[Var(n_D, loop_hafnian_batch_gamma.py:36), Var($156binary_add.69, loop_hafnian_batch_gamma.py:38)])
DEBUG 2022-02-14 16:46:35,356 on stmt: $160load_global.71 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:46:35,356 on stmt: $162load_attr.72 = getattr(value=$160load_global.71, attr=complex128)
DEBUG 2022-02-14 16:46:35,356 on stmt: H_batch = call $140load_attr.61($158build_tuple.70, func=$140load_attr.61, args=[Var($158build_tuple.70, loop_hafnian_batch_gamma.py:38)], kws=[('dtype', Var($162load_attr.72, loop_hafnian_batch_gamma.py:38))], vararg=None, target=None)
DEBUG 2022-02-14 16:46:35,356 on stmt: $170load_global.75 = global(prange: <class 'numba.misc.special.prange'>)
DEBUG 2022-02-14 16:46:35,356 on stmt: $174call_function.77 = call $170load_global.75(steps, func=$170load_global.75, args=[Var(steps, loop_hafnian_batch_gamma.py:32)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:46:35,356 on stmt: $176get_iter.78 = getiter(value=$174call_function.77)
DEBUG 2022-02-14 16:46:35,356 on stmt: $phi178.0 = $176get_iter.78
DEBUG 2022-02-14 16:46:35,356 on stmt: jump 178
DEBUG 2022-02-14 16:46:35,356 ==== SSA block rewrite pass on 178
DEBUG 2022-02-14 16:46:35,356 Running <numba.core.ssa._FixSSAVars object at 0x7f72073bcf10>
DEBUG 2022-02-14 16:46:35,356 on stmt: H_batch.2 = phi(incoming_values=[Var(H_batch, loop_hafnian_batch_gamma.py:38), Var(H_batch.1, loop_hafnian_batch_gamma.py:76)], incoming_blocks=[0, 600])
DEBUG 2022-02-14 16:46:35,357 on stmt: $178for_iter.1 = iternext(value=$phi178.0)
DEBUG 2022-02-14 16:46:35,357 on stmt: $178for_iter.2 = pair_first(value=$178for_iter.1)
DEBUG 2022-02-14 16:46:35,357 on stmt: $178for_iter.3 = pair_second(value=$178for_iter.1)
DEBUG 2022-02-14 16:46:35,357 on stmt: $phi182.1 = $178for_iter.2
DEBUG 2022-02-14 16:46:35,357 on stmt: branch $178for_iter.3, 182, 610
DEBUG 2022-02-14 16:46:35,357 ==== SSA block rewrite pass on 182
DEBUG 2022-02-14 16:46:35,357 Running <numba.core.ssa._FixSSAVars object at 0x7f72073bcf10>
DEBUG 2022-02-14 16:46:35,357 on stmt: j = $phi182.1
DEBUG 2022-02-14 16:46:35,357 on stmt: $184load_global.2 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:46:35,357 on stmt: $186load_attr.3 = getattr(value=$184load_global.2, attr=zeros)
DEBUG 2022-02-14 16:46:35,357 on stmt: $const190.5 = const(int, 2)
DEBUG 2022-02-14 16:46:35,357 on stmt: $194binary_multiply.7 = $const190.5 * batch_max
DEBUG 2022-02-14 16:46:35,357 on stmt: $198binary_add.9 = $194binary_multiply.7 + odd_cutoff
DEBUG 2022-02-14 16:46:35,357 on stmt: $const200.10 = const(int, 1)
DEBUG 2022-02-14 16:46:35,357 on stmt: $202binary_add.11 = $198binary_add.9 + $const200.10
DEBUG 2022-02-14 16:46:35,357 on stmt: $204build_tuple.12 = build_tuple(items=[Var(n_D, loop_hafnian_batch_gamma.py:36), Var($202binary_add.11, loop_hafnian_batch_gamma.py:42)])
DEBUG 2022-02-14 16:46:35,357 on stmt: $206load_global.13 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:46:35,357 on stmt: $208load_attr.14 = getattr(value=$206load_global.13, attr=complex128)
DEBUG 2022-02-14 16:46:35,357 on stmt: Hnew = call $186load_attr.3($204build_tuple.12, func=$186load_attr.3, args=[Var($204build_tuple.12, loop_hafnian_batch_gamma.py:42)], kws=[('dtype', Var($208load_attr.14, loop_hafnian_batch_gamma.py:42))], vararg=None, target=None)
DEBUG 2022-02-14 16:46:35,358 on stmt: $216load_global.17 = global(find_kept_edges: CPUDispatcher(<function find_kept_edges at 0x7f7207b0e700>))
DEBUG 2022-02-14 16:46:35,358 on stmt: kept_edges = call $216load_global.17(j, edge_reps, func=$216load_global.17, args=[Var(j, loop_hafnian_batch_gamma.py:40), Var(edge_reps, loop_hafnian_batch_gamma.py:31)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:46:35,358 on stmt: $228load_method.22 = getattr(value=kept_edges, attr=sum)
DEBUG 2022-02-14 16:46:35,358 on stmt: edges_sum = call $228load_method.22(func=$228load_method.22, args=[], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:46:35,358 on stmt: binom_prod = const(float, 1.0)
DEBUG 2022-02-14 16:46:35,358 on stmt: $238load_global.25 = global(range: <class 'range'>)
DEBUG 2022-02-14 16:46:35,358 on stmt: $const240.26 = const(int, 1)
DEBUG 2022-02-14 16:46:35,358 on stmt: $const244.28 = const(int, 2)
DEBUG 2022-02-14 16:46:35,358 on stmt: $246binary_floor_divide.29 = n // $const244.28
DEBUG 2022-02-14 16:46:35,358 on stmt: $248call_function.30 = call $238load_global.25($const240.26, $246binary_floor_divide.29, func=$238load_global.25, args=[Var($const240.26, loop_hafnian_batch_gamma.py:48), Var($246binary_floor_divide.29, loop_hafnian_batch_gamma.py:48)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:46:35,358 on stmt: $250get_iter.31 = getiter(value=$248call_function.30)
DEBUG 2022-02-14 16:46:35,358 on stmt: $phi252.1 = $250get_iter.31
DEBUG 2022-02-14 16:46:35,358 on stmt: jump 252
DEBUG 2022-02-14 16:46:35,358 ==== SSA block rewrite pass on 252
DEBUG 2022-02-14 16:46:35,358 Running <numba.core.ssa._FixSSAVars object at 0x7f72073bcf10>
DEBUG 2022-02-14 16:46:35,358 on stmt: binom_prod.2 = phi(incoming_values=[Var(binom_prod, loop_hafnian_batch_gamma.py:47), Var(binom_prod.1, loop_hafnian_batch_gamma.py:49)], incoming_blocks=[182, 254])
DEBUG 2022-02-14 16:46:35,358 on stmt: $252for_iter.2 = iternext(value=$phi252.1)
DEBUG 2022-02-14 16:46:35,358 on stmt: $252for_iter.3 = pair_first(value=$252for_iter.2)
DEBUG 2022-02-14 16:46:35,358 on stmt: $252for_iter.4 = pair_second(value=$252for_iter.2)
DEBUG 2022-02-14 16:46:35,359 on stmt: $phi254.2 = $252for_iter.3
DEBUG 2022-02-14 16:46:35,359 on stmt: branch $252for_iter.4, 254, 282
DEBUG 2022-02-14 16:46:35,359 ==== SSA block rewrite pass on 254
DEBUG 2022-02-14 16:46:35,359 Running <numba.core.ssa._FixSSAVars object at 0x7f72073bcf10>
DEBUG 2022-02-14 16:46:35,359 on stmt: i = $phi254.2
DEBUG 2022-02-14 16:46:35,359 on stmt: $264binary_subscr.7 = getitem(value=edge_reps, index=i, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:46:35,359 on stmt: $270binary_subscr.10 = getitem(value=kept_edges, index=i, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:46:35,359 on stmt: $272build_tuple.11 = build_tuple(items=[Var($264binary_subscr.7, loop_hafnian_batch_gamma.py:49), Var($270binary_subscr.10, loop_hafnian_batch_gamma.py:49)])
DEBUG 2022-02-14 16:46:35,359 on stmt: $274binary_subscr.12 = getitem(value=binoms, index=$272build_tuple.11, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:46:35,359 on stmt: $276inplace_multiply.13 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=binom_prod.2, rhs=$274binary_subscr.12, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:46:35,359 on stmt: binom_prod.1 = $276inplace_multiply.13
DEBUG 2022-02-14 16:46:35,359 on stmt: jump 252
DEBUG 2022-02-14 16:46:35,359 ==== SSA block rewrite pass on 282
DEBUG 2022-02-14 16:46:35,359 Running <numba.core.ssa._FixSSAVars object at 0x7f72073bcf10>
DEBUG 2022-02-14 16:46:35,359 on stmt: bool284 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:46:35,359 on stmt: $284pred = call bool284(glynn, func=bool284, args=(Var(glynn, loop_hafnian_batch_gamma.py:23),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:46:35,359 on stmt: branch $284pred, 288, 302
DEBUG 2022-02-14 16:46:35,359 ==== SSA block rewrite pass on 288
DEBUG 2022-02-14 16:46:35,359 Running <numba.core.ssa._FixSSAVars object at 0x7f72073bcf10>
DEBUG 2022-02-14 16:46:35,359 on stmt: $const288.1 = const(int, 2)
DEBUG 2022-02-14 16:46:35,359 on stmt: $292binary_multiply.3 = $const288.1 * kept_edges
DEBUG 2022-02-14 16:46:35,360 on stmt: delta = $292binary_multiply.3 - edge_reps
DEBUG 2022-02-14 16:46:35,360 on stmt: jump 306
DEBUG 2022-02-14 16:46:35,360 ==== SSA block rewrite pass on 302
DEBUG 2022-02-14 16:46:35,360 Running <numba.core.ssa._FixSSAVars object at 0x7f72073bcf10>
DEBUG 2022-02-14 16:46:35,360 on stmt: delta.1 = kept_edges
DEBUG 2022-02-14 16:46:35,360 on stmt: jump 306
DEBUG 2022-02-14 16:46:35,360 ==== SSA block rewrite pass on 306
DEBUG 2022-02-14 16:46:35,360 Running <numba.core.ssa._FixSSAVars object at 0x7f72073bcf10>
DEBUG 2022-02-14 16:46:35,360 on stmt: delta.2 = phi(incoming_values=[Var(delta, loop_hafnian_batch_gamma.py:52), Var(delta.1, loop_hafnian_batch_gamma.py:54)], incoming_blocks=[288, 302])
DEBUG 2022-02-14 16:46:35,360 on stmt: $306load_global.1 = global(get_submatrices: CPUDispatcher(<function get_submatrices at 0x7f7207b0eca0>))
DEBUG 2022-02-14 16:46:35,360 on stmt: $const314.5 = const(int, 0)
DEBUG 2022-02-14 16:46:35,360 on stmt: $const316.6 = const(NoneType, None)
DEBUG 2022-02-14 16:46:35,360 on stmt: $const318.7 = const(NoneType, None)
DEBUG 2022-02-14 16:46:35,360 on stmt: $320build_slice.8 = global(slice: <class 'slice'>)
DEBUG 2022-02-14 16:46:35,360 on stmt: $320build_slice.9 = call $320build_slice.8($const316.6, $const318.7, func=$320build_slice.8, args=(Var($const316.6, loop_hafnian_batch_gamma.py:56), Var($const318.7, loop_hafnian_batch_gamma.py:56)), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:46:35,360 on stmt: $322build_tuple.10 = build_tuple(items=[Var($const314.5, loop_hafnian_batch_gamma.py:56), Var($320build_slice.9, loop_hafnian_batch_gamma.py:56)])
DEBUG 2022-02-14 16:46:35,360 on stmt: $324binary_subscr.11 = static_getitem(value=D, index=(0, slice(None, None, None)), index_var=$322build_tuple.10, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:46:35,360 on stmt: $328call_function.13 = call $306load_global.1(delta.2, A, $324binary_subscr.11, oddV, func=$306load_global.1, args=[Var(delta.2, loop_hafnian_batch_gamma.py:56), Var(A, loop_hafnian_batch_gamma.py:23), Var($324binary_subscr.11, loop_hafnian_batch_gamma.py:56), Var(oddV, loop_hafnian_batch_gamma.py:24)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:46:35,360 on stmt: $330unpack_sequence.18 = exhaust_iter(value=$328call_function.13, count=4)
DEBUG 2022-02-14 16:46:35,361 on stmt: $330unpack_sequence.14 = static_getitem(value=$330unpack_sequence.18, index=0, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:46:35,361 on stmt: $330unpack_sequence.15 = static_getitem(value=$330unpack_sequence.18, index=1, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:46:35,361 on stmt: $330unpack_sequence.16 = static_getitem(value=$330unpack_sequence.18, index=2, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:46:35,361 on stmt: $330unpack_sequence.17 = static_getitem(value=$330unpack_sequence.18, index=3, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:46:35,361 on stmt: AX_S = $330unpack_sequence.14
DEBUG 2022-02-14 16:46:35,361 on stmt: XD_S = $330unpack_sequence.15
DEBUG 2022-02-14 16:46:35,361 on stmt: D_S = $330unpack_sequence.16
DEBUG 2022-02-14 16:46:35,361 on stmt: oddVX_S = $330unpack_sequence.17
DEBUG 2022-02-14 16:46:35,361 on stmt: $340load_global.19 = global(eigvals: CPUDispatcher(<function eigvals at 0x7f7207a993a0>))
DEBUG 2022-02-14 16:46:35,361 on stmt: E = call $340load_global.19(AX_S, func=$340load_global.19, args=[Var(AX_S, loop_hafnian_batch_gamma.py:56)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:46:35,361 on stmt: $348load_global.22 = global(range: <class 'range'>)
DEBUG 2022-02-14 16:46:35,361 on stmt: $352call_function.24 = call $348load_global.22(n_D, func=$348load_global.22, args=[Var(n_D, loop_hafnian_batch_gamma.py:36)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:46:35,361 on stmt: $354get_iter.25 = getiter(value=$352call_function.24)
DEBUG 2022-02-14 16:46:35,361 on stmt: $phi356.1 = $354get_iter.25
DEBUG 2022-02-14 16:46:35,361 on stmt: jump 356
DEBUG 2022-02-14 16:46:35,361 ==== SSA block rewrite pass on 356
DEBUG 2022-02-14 16:46:35,361 Running <numba.core.ssa._FixSSAVars object at 0x7f72073bcf10>
DEBUG 2022-02-14 16:46:35,361 on stmt: $356for_iter.2 = iternext(value=$phi356.1)
DEBUG 2022-02-14 16:46:35,361 on stmt: $356for_iter.3 = pair_first(value=$356for_iter.2)
DEBUG 2022-02-14 16:46:35,361 on stmt: $356for_iter.4 = pair_second(value=$356for_iter.2)
DEBUG 2022-02-14 16:46:35,361 on stmt: $phi358.2 = $356for_iter.3
DEBUG 2022-02-14 16:46:35,362 on stmt: branch $356for_iter.4, 358, 600
DEBUG 2022-02-14 16:46:35,362 ==== SSA block rewrite pass on 358
DEBUG 2022-02-14 16:46:35,362 Running <numba.core.ssa._FixSSAVars object at 0x7f72073bcf10>
DEBUG 2022-02-14 16:46:35,362 on stmt: k = $phi358.2
DEBUG 2022-02-14 16:46:35,362 on stmt: $360load_global.3 = global(get_Dsubmatrices: CPUDispatcher(<function get_Dsubmatrices at 0x7f7207a99160>))
DEBUG 2022-02-14 16:46:35,362 on stmt: $const368.7 = const(NoneType, None)
DEBUG 2022-02-14 16:46:35,362 on stmt: $const370.8 = const(NoneType, None)
DEBUG 2022-02-14 16:46:35,362 on stmt: $372build_slice.9 = global(slice: <class 'slice'>)
DEBUG 2022-02-14 16:46:35,362 on stmt: $372build_slice.10 = call $372build_slice.9($const368.7, $const370.8, func=$372build_slice.9, args=(Var($const368.7, loop_hafnian_batch_gamma.py:61), Var($const370.8, loop_hafnian_batch_gamma.py:61)), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:46:35,362 on stmt: $374build_tuple.11 = build_tuple(items=[Var(k, loop_hafnian_batch_gamma.py:60), Var($372build_slice.10, loop_hafnian_batch_gamma.py:61)])
DEBUG 2022-02-14 16:46:35,362 on stmt: $376binary_subscr.12 = getitem(value=D, index=$374build_tuple.11, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:46:35,362 on stmt: $378call_function.13 = call $360load_global.3(delta.2, $376binary_subscr.12, func=$360load_global.3, args=[Var(delta.2, loop_hafnian_batch_gamma.py:56), Var($376binary_subscr.12, loop_hafnian_batch_gamma.py:61)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:46:35,362 on stmt: $380unpack_sequence.16 = exhaust_iter(value=$378call_function.13, count=2)
DEBUG 2022-02-14 16:46:35,362 on stmt: $380unpack_sequence.14 = static_getitem(value=$380unpack_sequence.16, index=0, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:46:35,362 on stmt: $380unpack_sequence.15 = static_getitem(value=$380unpack_sequence.16, index=1, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:46:35,362 on stmt: XD_S.1 = $380unpack_sequence.14
DEBUG 2022-02-14 16:46:35,362 on stmt: D_S = $380unpack_sequence.15
DEBUG 2022-02-14 16:46:35,362 on stmt: $386load_global.17 = global(f_loop: CPUDispatcher(<function f_loop at 0x7f7207b0e940>))
DEBUG 2022-02-14 16:46:35,362 on stmt: f_even = call $386load_global.17(E, AX_S, XD_S, D_S, N_max, func=$386load_global.17, args=[Var(E, loop_hafnian_batch_gamma.py:58), Var(AX_S, loop_hafnian_batch_gamma.py:56), Var(XD_S, loop_hafnian_batch_gamma.py:56), Var(D_S, loop_hafnian_batch_gamma.py:56), Var(N_max, loop_hafnian_batch_gamma.py:29)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:46:35,363 find_def var='XD_S' stmt=f_even = call $386load_global.17(E, AX_S, XD_S, D_S, N_max, func=$386load_global.17, args=[Var(E, loop_hafnian_batch_gamma.py:58), Var(AX_S, loop_hafnian_batch_gamma.py:56), Var(XD_S, loop_hafnian_batch_gamma.py:56), Var(D_S, loop_hafnian_batch_gamma.py:56), Var(N_max, loop_hafnian_batch_gamma.py:29)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:46:35,363 replaced with: f_even = call $386load_global.17(E, AX_S, XD_S.1, D_S, N_max, func=$386load_global.17, args=[Var(E, loop_hafnian_batch_gamma.py:58), Var(AX_S, loop_hafnian_batch_gamma.py:56), Var(XD_S.1, loop_hafnian_batch_gamma.py:61), Var(D_S, loop_hafnian_batch_gamma.py:56), Var(N_max, loop_hafnian_batch_gamma.py:29)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:46:35,363 on stmt: $402load_global.24 = global(f_loop_odd: CPUDispatcher(<function f_loop_odd at 0x7f7207b0eaf0>))
DEBUG 2022-02-14 16:46:35,363 on stmt: $418binary_subscr.32 = getitem(value=oddloop, index=k, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:46:35,363 on stmt: f_odd = call $402load_global.24(E, AX_S, XD_S, D_S, N_max, $418binary_subscr.32, oddVX_S, func=$402load_global.24, args=[Var(E, loop_hafnian_batch_gamma.py:58), Var(AX_S, loop_hafnian_batch_gamma.py:56), Var(XD_S, loop_hafnian_batch_gamma.py:56), Var(D_S, loop_hafnian_batch_gamma.py:56), Var(N_max, loop_hafnian_batch_gamma.py:29), Var($418binary_subscr.32, loop_hafnian_batch_gamma.py:64), Var(oddVX_S, loop_hafnian_batch_gamma.py:56)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:46:35,363 find_def var='XD_S' stmt=f_odd = call $402load_global.24(E, AX_S, XD_S, D_S, N_max, $418binary_subscr.32, oddVX_S, func=$402load_global.24, args=[Var(E, loop_hafnian_batch_gamma.py:58), Var(AX_S, loop_hafnian_batch_gamma.py:56), Var(XD_S, loop_hafnian_batch_gamma.py:56), Var(D_S, loop_hafnian_batch_gamma.py:56), Var(N_max, loop_hafnian_batch_gamma.py:29), Var($418binary_subscr.32, loop_hafnian_batch_gamma.py:64), Var(oddVX_S, loop_hafnian_batch_gamma.py:56)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:46:35,363 replaced with: f_odd = call $402load_global.24(E, AX_S, XD_S.1, D_S, N_max, $418binary_subscr.32, oddVX_S, func=$402load_global.24, args=[Var(E, loop_hafnian_batch_gamma.py:58), Var(AX_S, loop_hafnian_batch_gamma.py:56), Var(XD_S.1, loop_hafnian_batch_gamma.py:61), Var(D_S, loop_hafnian_batch_gamma.py:56), Var(N_max, loop_hafnian_batch_gamma.py:29), Var($418binary_subscr.32, loop_hafnian_batch_gamma.py:64), Var(oddVX_S, loop_hafnian_batch_gamma.py:56)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:46:35,363 on stmt: $426load_global.35 = global(range: <class 'range'>)
DEBUG 2022-02-14 16:46:35,363 on stmt: $const428.36 = const(int, 2)
DEBUG 2022-02-14 16:46:35,363 on stmt: $const432.38 = const(int, 0)
DEBUG 2022-02-14 16:46:35,363 on stmt: $434binary_subscr.39 = static_getitem(value=kept_edges, index=0, index_var=$const432.38, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:46:35,363 on stmt: $436binary_multiply.40 = $const428.36 * $434binary_subscr.39
DEBUG 2022-02-14 16:46:35,363 on stmt: $const438.41 = const(int, 2)
DEBUG 2022-02-14 16:46:35,363 on stmt: $442binary_multiply.43 = $const438.41 * batch_max
DEBUG 2022-02-14 16:46:35,363 on stmt: $446binary_add.45 = $442binary_multiply.43 + odd_cutoff
DEBUG 2022-02-14 16:46:35,364 on stmt: $const448.46 = const(int, 1)
DEBUG 2022-02-14 16:46:35,364 on stmt: $450binary_add.47 = $446binary_add.45 + $const448.46
DEBUG 2022-02-14 16:46:35,364 on stmt: $452call_function.48 = call $426load_global.35($436binary_multiply.40, $450binary_add.47, func=$426load_global.35, args=[Var($436binary_multiply.40, loop_hafnian_batch_gamma.py:66), Var($450binary_add.47, loop_hafnian_batch_gamma.py:66)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:46:35,364 on stmt: $454get_iter.49 = getiter(value=$452call_function.48)
DEBUG 2022-02-14 16:46:35,364 on stmt: $phi456.2 = $454get_iter.49
DEBUG 2022-02-14 16:46:35,364 on stmt: jump 456
DEBUG 2022-02-14 16:46:35,364 ==== SSA block rewrite pass on 456
DEBUG 2022-02-14 16:46:35,364 Running <numba.core.ssa._FixSSAVars object at 0x7f72073bcf10>
DEBUG 2022-02-14 16:46:35,364 on stmt: $456for_iter.3 = iternext(value=$phi456.2)
DEBUG 2022-02-14 16:46:35,364 on stmt: $456for_iter.4 = pair_first(value=$456for_iter.3)
DEBUG 2022-02-14 16:46:35,364 on stmt: $456for_iter.5 = pair_second(value=$456for_iter.3)
DEBUG 2022-02-14 16:46:35,364 on stmt: $phi458.3 = $456for_iter.4
DEBUG 2022-02-14 16:46:35,364 on stmt: branch $456for_iter.5, 458, 596
DEBUG 2022-02-14 16:46:35,364 ==== SSA block rewrite pass on 458
DEBUG 2022-02-14 16:46:35,364 Running <numba.core.ssa._FixSSAVars object at 0x7f72073bcf10>
DEBUG 2022-02-14 16:46:35,364 on stmt: N_det = $phi458.3
DEBUG 2022-02-14 16:46:35,364 on stmt: N = N_fixed + N_det
DEBUG 2022-02-14 16:46:35,364 on stmt: $const468.7 = const(float, -1.0)
DEBUG 2022-02-14 16:46:35,364 on stmt: $const472.9 = const(int, 2)
DEBUG 2022-02-14 16:46:35,364 on stmt: $474binary_floor_divide.10 = N // $const472.9
DEBUG 2022-02-14 16:46:35,364 on stmt: $478binary_subtract.12 = $474binary_floor_divide.10 - edges_sum
DEBUG 2022-02-14 16:46:35,365 on stmt: plus_minus = $const468.7 ** $478binary_subtract.12
DEBUG 2022-02-14 16:46:35,365 on stmt: $const488.16 = const(int, 2)
DEBUG 2022-02-14 16:46:35,365 on stmt: $490binary_floor_divide.17 = N_det // $const488.16
DEBUG 2022-02-14 16:46:35,365 on stmt: $const494.19 = const(int, 0)
DEBUG 2022-02-14 16:46:35,365 on stmt: $496binary_subscr.20 = static_getitem(value=kept_edges, index=0, index_var=$const494.19, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:46:35,365 on stmt: $498build_tuple.21 = build_tuple(items=[Var($490binary_floor_divide.17, loop_hafnian_batch_gamma.py:70), Var($496binary_subscr.20, loop_hafnian_batch_gamma.py:70)])
DEBUG 2022-02-14 16:46:35,365 on stmt: $500binary_subscr.22 = getitem(value=binoms, index=$498build_tuple.21, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:46:35,365 on stmt: n_det_binom_prod = $500binary_subscr.22 * binom_prod.2
DEBUG 2022-02-14 16:46:35,365 on stmt: $const510.26 = const(int, 2)
DEBUG 2022-02-14 16:46:35,365 on stmt: $512binary_modulo.27 = N_det % $const510.26
DEBUG 2022-02-14 16:46:35,365 on stmt: $const514.28 = const(int, 0)
DEBUG 2022-02-14 16:46:35,365 on stmt: $516compare_op.29 = $512binary_modulo.27 == $const514.28
DEBUG 2022-02-14 16:46:35,365 on stmt: bool518 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:46:35,365 on stmt: $518pred = call bool518($516compare_op.29, func=bool518, args=(Var($516compare_op.29, loop_hafnian_batch_gamma.py:72),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:46:35,365 on stmt: branch $518pred, 522, 560
DEBUG 2022-02-14 16:46:35,365 ==== SSA block rewrite pass on 522
DEBUG 2022-02-14 16:46:35,365 Running <numba.core.ssa._FixSSAVars object at 0x7f72073bcf10>
DEBUG 2022-02-14 16:46:35,365 on stmt: $528build_tuple.6 = build_tuple(items=[Var(k, loop_hafnian_batch_gamma.py:60), Var(N_det, loop_hafnian_batch_gamma.py:66)])
DEBUG 2022-02-14 16:46:35,365 on stmt: $532binary_subscr.9 = getitem(value=Hnew, index=$528build_tuple.6, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:46:35,366 on stmt: $538binary_multiply.12 = n_det_binom_prod * plus_minus
DEBUG 2022-02-14 16:46:35,366 on stmt: $const544.15 = const(int, 2)
DEBUG 2022-02-14 16:46:35,366 on stmt: $546binary_floor_divide.16 = N // $const544.15
DEBUG 2022-02-14 16:46:35,366 on stmt: $548binary_subscr.17 = getitem(value=f_even, index=$546binary_floor_divide.16, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:46:35,366 on stmt: $550binary_multiply.18 = $538binary_multiply.12 * $548binary_subscr.17
DEBUG 2022-02-14 16:46:35,366 on stmt: $552inplace_add.19 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$532binary_subscr.9, rhs=$550binary_multiply.18, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:46:35,366 on stmt: Hnew[$528build_tuple.6] = $552inplace_add.19
DEBUG 2022-02-14 16:46:35,366 on stmt: jump 592
DEBUG 2022-02-14 16:46:35,366 ==== SSA block rewrite pass on 560
DEBUG 2022-02-14 16:46:35,366 Running <numba.core.ssa._FixSSAVars object at 0x7f72073bcf10>
DEBUG 2022-02-14 16:46:35,366 on stmt: $566build_tuple.6 = build_tuple(items=[Var(k, loop_hafnian_batch_gamma.py:60), Var(N_det, loop_hafnian_batch_gamma.py:66)])
DEBUG 2022-02-14 16:46:35,366 on stmt: $570binary_subscr.9 = getitem(value=Hnew, index=$566build_tuple.6, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:46:35,366 on stmt: $576binary_multiply.12 = n_det_binom_prod * plus_minus
DEBUG 2022-02-14 16:46:35,366 on stmt: $582binary_subscr.15 = getitem(value=f_odd, index=N, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:46:35,366 on stmt: $584binary_multiply.16 = $576binary_multiply.12 * $582binary_subscr.15
DEBUG 2022-02-14 16:46:35,366 on stmt: $586inplace_add.17 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$570binary_subscr.9, rhs=$584binary_multiply.16, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:46:35,366 on stmt: Hnew[$566build_tuple.6] = $586inplace_add.17
DEBUG 2022-02-14 16:46:35,366 on stmt: jump 592
DEBUG 2022-02-14 16:46:35,366 ==== SSA block rewrite pass on 592
DEBUG 2022-02-14 16:46:35,366 Running <numba.core.ssa._FixSSAVars object at 0x7f72073bcf10>
DEBUG 2022-02-14 16:46:35,366 on stmt: jump 456
DEBUG 2022-02-14 16:46:35,366 ==== SSA block rewrite pass on 596
DEBUG 2022-02-14 16:46:35,366 Running <numba.core.ssa._FixSSAVars object at 0x7f72073bcf10>
DEBUG 2022-02-14 16:46:35,367 on stmt: jump 356
DEBUG 2022-02-14 16:46:35,367 ==== SSA block rewrite pass on 600
DEBUG 2022-02-14 16:46:35,367 Running <numba.core.ssa._FixSSAVars object at 0x7f72073bcf10>
DEBUG 2022-02-14 16:46:35,367 on stmt: $604inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=H_batch.2, rhs=Hnew, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:46:35,367 on stmt: H_batch.1 = $604inplace_add.3
DEBUG 2022-02-14 16:46:35,367 on stmt: jump 178
DEBUG 2022-02-14 16:46:35,367 ==== SSA block rewrite pass on 610
DEBUG 2022-02-14 16:46:35,367 Running <numba.core.ssa._FixSSAVars object at 0x7f72073bcf10>
DEBUG 2022-02-14 16:46:35,367 on stmt: bool612 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:46:35,367 on stmt: $612pred = call bool612(glynn, func=bool612, args=(Var(glynn, loop_hafnian_batch_gamma.py:23),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:46:35,367 on stmt: branch $612pred, 616, 678
DEBUG 2022-02-14 16:46:35,367 ==== SSA block rewrite pass on 616
DEBUG 2022-02-14 16:46:35,367 Running <numba.core.ssa._FixSSAVars object at 0x7f72073bcf10>
DEBUG 2022-02-14 16:46:35,367 on stmt: $616load_global.0 = global(range: <class 'range'>)
DEBUG 2022-02-14 16:46:35,367 on stmt: $620load_attr.2 = getattr(value=H_batch.2, attr=shape)
DEBUG 2022-02-14 16:46:35,367 on stmt: $const622.3 = const(int, 1)
DEBUG 2022-02-14 16:46:35,367 on stmt: $624binary_subscr.4 = static_getitem(value=$620load_attr.2, index=1, index_var=$const622.3, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:46:35,368 on stmt: $626call_function.5 = call $616load_global.0($624binary_subscr.4, func=$616load_global.0, args=[Var($624binary_subscr.4, loop_hafnian_batch_gamma.py:79)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:46:35,368 on stmt: $628get_iter.6 = getiter(value=$626call_function.5)
DEBUG 2022-02-14 16:46:35,368 on stmt: $phi630.0 = $628get_iter.6
DEBUG 2022-02-14 16:46:35,368 on stmt: jump 630
DEBUG 2022-02-14 16:46:35,368 ==== SSA block rewrite pass on 630
DEBUG 2022-02-14 16:46:35,368 Running <numba.core.ssa._FixSSAVars object at 0x7f72073bcf10>
DEBUG 2022-02-14 16:46:35,368 on stmt: $630for_iter.1 = iternext(value=$phi630.0)
DEBUG 2022-02-14 16:46:35,368 on stmt: $630for_iter.2 = pair_first(value=$630for_iter.1)
DEBUG 2022-02-14 16:46:35,368 on stmt: $630for_iter.3 = pair_second(value=$630for_iter.1)
DEBUG 2022-02-14 16:46:35,368 on stmt: $phi632.1 = $630for_iter.2
DEBUG 2022-02-14 16:46:35,368 on stmt: branch $630for_iter.3, 632, 678
DEBUG 2022-02-14 16:46:35,368 ==== SSA block rewrite pass on 632
DEBUG 2022-02-14 16:46:35,368 Running <numba.core.ssa._FixSSAVars object at 0x7f72073bcf10>
DEBUG 2022-02-14 16:46:35,368 on stmt: j.1 = $phi632.1
DEBUG 2022-02-14 16:46:35,368 on stmt: x = N_fixed + j.1
DEBUG 2022-02-14 16:46:35,368 on stmt: $const644.6 = const(NoneType, None)
DEBUG 2022-02-14 16:46:35,368 on stmt: $const646.7 = const(NoneType, None)
DEBUG 2022-02-14 16:46:35,368 on stmt: $648build_slice.8 = global(slice: <class 'slice'>)
DEBUG 2022-02-14 16:46:35,368 on stmt: $648build_slice.9 = call $648build_slice.8($const644.6, $const646.7, func=$648build_slice.8, args=(Var($const644.6, loop_hafnian_batch_gamma.py:81), Var($const646.7, loop_hafnian_batch_gamma.py:81)), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:46:35,368 on stmt: $652build_tuple.11 = build_tuple(items=[Var($648build_slice.9, loop_hafnian_batch_gamma.py:81), Var(j.1, loop_hafnian_batch_gamma.py:79)])
DEBUG 2022-02-14 16:46:35,369 on stmt: $656binary_subscr.14 = getitem(value=H_batch.2, index=$652build_tuple.11, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:46:35,369 on stmt: $const658.15 = const(float, 0.5)
DEBUG 2022-02-14 16:46:35,369 on stmt: $const662.17 = const(int, 2)
DEBUG 2022-02-14 16:46:35,369 on stmt: $664binary_floor_divide.18 = x // $const662.17
DEBUG 2022-02-14 16:46:35,369 on stmt: $666binary_power.19 = $const658.15 ** $664binary_floor_divide.18
DEBUG 2022-02-14 16:46:35,369 on stmt: $668inplace_multiply.20 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=$656binary_subscr.14, rhs=$666binary_power.19, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:46:35,369 on stmt: H_batch.2[$652build_tuple.11] = $668inplace_multiply.20
DEBUG 2022-02-14 16:46:35,369 on stmt: jump 630
DEBUG 2022-02-14 16:46:35,369 ==== SSA block rewrite pass on 678
DEBUG 2022-02-14 16:46:35,369 Running <numba.core.ssa._FixSSAVars object at 0x7f72073bcf10>
DEBUG 2022-02-14 16:46:35,369 on stmt: $680return_value.1 = cast(value=H_batch.2)
DEBUG 2022-02-14 16:46:35,369 on stmt: return $680return_value.1
DEBUG 2022-02-14 16:46:35,369 Fix SSA violator on var D_S
DEBUG 2022-02-14 16:46:35,369 ==== SSA block rewrite pass on 0
DEBUG 2022-02-14 16:46:35,369 Running <numba.core.ssa._FreshVarHandler object at 0x7f7203a2dfd0>
DEBUG 2022-02-14 16:46:35,369 on stmt: A = arg(0, name=A)
DEBUG 2022-02-14 16:46:35,369 on stmt: D = arg(1, name=D)
DEBUG 2022-02-14 16:46:35,369 on stmt: fixed_edge_reps = arg(2, name=fixed_edge_reps)
DEBUG 2022-02-14 16:46:35,369 on stmt: batch_max = arg(3, name=batch_max)
DEBUG 2022-02-14 16:46:35,370 on stmt: odd_cutoff = arg(4, name=odd_cutoff)
DEBUG 2022-02-14 16:46:35,370 on stmt: glynn = arg(5, name=glynn)
DEBUG 2022-02-14 16:46:35,370 on stmt: $const4.1 = const(NoneType, None)
DEBUG 2022-02-14 16:46:35,370 on stmt: $const6.2 = const(NoneType, None)
DEBUG 2022-02-14 16:46:35,370 on stmt: $8build_slice.3 = global(slice: <class 'slice'>)
DEBUG 2022-02-14 16:46:35,370 on stmt: $8build_slice.4 = call $8build_slice.3($const4.1, $const6.2, func=$8build_slice.3, args=(Var($const4.1, loop_hafnian_batch_gamma.py:23), Var($const6.2, loop_hafnian_batch_gamma.py:23)), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:46:35,370 on stmt: $const10.5 = const(int, 0)
DEBUG 2022-02-14 16:46:35,370 on stmt: $12build_tuple.6 = build_tuple(items=[Var($8build_slice.4, loop_hafnian_batch_gamma.py:23), Var($const10.5, loop_hafnian_batch_gamma.py:23)])
DEBUG 2022-02-14 16:46:35,370 on stmt: oddloop = static_getitem(value=D, index=(slice(None, None, None), 0), index_var=$12build_tuple.6, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:46:35,370 on stmt: $const20.9 = const(int, 0)
DEBUG 2022-02-14 16:46:35,370 on stmt: $const22.10 = const(NoneType, None)
DEBUG 2022-02-14 16:46:35,370 on stmt: $const24.11 = const(NoneType, None)
DEBUG 2022-02-14 16:46:35,370 on stmt: $26build_slice.12 = global(slice: <class 'slice'>)
DEBUG 2022-02-14 16:46:35,370 on stmt: $26build_slice.13 = call $26build_slice.12($const22.10, $const24.11, func=$26build_slice.12, args=(Var($const22.10, loop_hafnian_batch_gamma.py:24), Var($const24.11, loop_hafnian_batch_gamma.py:24)), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:46:35,370 on stmt: $28build_tuple.14 = build_tuple(items=[Var($const20.9, loop_hafnian_batch_gamma.py:24), Var($26build_slice.13, loop_hafnian_batch_gamma.py:24)])
DEBUG 2022-02-14 16:46:35,370 on stmt: oddV = static_getitem(value=A, index=(0, slice(None, None, None)), index_var=$28build_tuple.14, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:46:35,370 on stmt: $36load_attr.17 = getattr(value=A, attr=shape)
DEBUG 2022-02-14 16:46:35,370 on stmt: $const38.18 = const(int, 0)
DEBUG 2022-02-14 16:46:35,370 on stmt: n = static_getitem(value=$36load_attr.17, index=0, index_var=$const38.18, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:46:35,370 on stmt: $const44.20 = const(int, 2)
DEBUG 2022-02-14 16:46:35,371 on stmt: $48load_method.22 = getattr(value=fixed_edge_reps, attr=sum)
DEBUG 2022-02-14 16:46:35,371 on stmt: $50call_method.23 = call $48load_method.22(func=$48load_method.22, args=[], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:46:35,371 on stmt: N_fixed = $const44.20 * $50call_method.23
DEBUG 2022-02-14 16:46:35,371 on stmt: $const58.26 = const(int, 2)
DEBUG 2022-02-14 16:46:35,371 on stmt: $62binary_multiply.28 = $const58.26 * batch_max
DEBUG 2022-02-14 16:46:35,371 on stmt: $64binary_add.29 = N_fixed + $62binary_multiply.28
DEBUG 2022-02-14 16:46:35,371 on stmt: N_max = $64binary_add.29 + odd_cutoff
DEBUG 2022-02-14 16:46:35,371 on stmt: $72load_global.32 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:46:35,371 on stmt: $74load_method.33 = getattr(value=$72load_global.32, attr=concatenate)
DEBUG 2022-02-14 16:46:35,371 on stmt: $76load_global.34 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:46:35,371 on stmt: $78load_method.35 = getattr(value=$76load_global.34, attr=array)
DEBUG 2022-02-14 16:46:35,371 on stmt: $82build_list.37 = build_list(items=[Var(batch_max, loop_hafnian_batch_gamma.py:23)])
DEBUG 2022-02-14 16:46:35,371 on stmt: $84call_method.38 = call $78load_method.35($82build_list.37, func=$78load_method.35, args=[Var($82build_list.37, loop_hafnian_batch_gamma.py:31)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:46:35,371 on stmt: $88build_tuple.40 = build_tuple(items=[Var($84call_method.38, loop_hafnian_batch_gamma.py:31), Var(fixed_edge_reps, loop_hafnian_batch_gamma.py:23)])
DEBUG 2022-02-14 16:46:35,371 on stmt: edge_reps = call $74load_method.33($88build_tuple.40, func=$74load_method.33, args=[Var($88build_tuple.40, loop_hafnian_batch_gamma.py:31)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:46:35,371 on stmt: $94load_global.42 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:46:35,371 on stmt: $96load_method.43 = getattr(value=$94load_global.42, attr=prod)
DEBUG 2022-02-14 16:46:35,371 on stmt: $const100.45 = const(int, 1)
DEBUG 2022-02-14 16:46:35,371 on stmt: $102binary_add.46 = edge_reps + $const100.45
DEBUG 2022-02-14 16:46:35,372 on stmt: steps = call $96load_method.43($102binary_add.46, func=$96load_method.43, args=[Var($102binary_add.46, loop_hafnian_batch_gamma.py:32)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:46:35,372 on stmt: $110load_method.49 = getattr(value=edge_reps, attr=max)
DEBUG 2022-02-14 16:46:35,372 on stmt: $112call_method.50 = call $110load_method.49(func=$110load_method.49, args=[], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:46:35,372 on stmt: max_binom = $112call_method.50 + odd_cutoff
DEBUG 2022-02-14 16:46:35,372 on stmt: $120load_global.53 = global(precompute_binoms: CPUDispatcher(<function precompute_binoms at 0x7f7207b0e280>))
DEBUG 2022-02-14 16:46:35,372 on stmt: binoms = call $120load_global.53(max_binom, func=$120load_global.53, args=[Var(max_binom, loop_hafnian_batch_gamma.py:34)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:46:35,372 on stmt: $130load_attr.57 = getattr(value=D, attr=shape)
DEBUG 2022-02-14 16:46:35,372 on stmt: $const132.58 = const(int, 0)
DEBUG 2022-02-14 16:46:35,372 on stmt: n_D = static_getitem(value=$130load_attr.57, index=0, index_var=$const132.58, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:46:35,372 on stmt: $138load_global.60 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:46:35,372 on stmt: $140load_attr.61 = getattr(value=$138load_global.60, attr=zeros)
DEBUG 2022-02-14 16:46:35,372 on stmt: $const144.63 = const(int, 2)
DEBUG 2022-02-14 16:46:35,372 on stmt: $148binary_multiply.65 = $const144.63 * batch_max
DEBUG 2022-02-14 16:46:35,372 on stmt: $152binary_add.67 = $148binary_multiply.65 + odd_cutoff
DEBUG 2022-02-14 16:46:35,372 on stmt: $const154.68 = const(int, 1)
DEBUG 2022-02-14 16:46:35,372 on stmt: $156binary_add.69 = $152binary_add.67 + $const154.68
DEBUG 2022-02-14 16:46:35,372 on stmt: $158build_tuple.70 = build_tuple(items=[Var(n_D, loop_hafnian_batch_gamma.py:36), Var($156binary_add.69, loop_hafnian_batch_gamma.py:38)])
DEBUG 2022-02-14 16:46:35,372 on stmt: $160load_global.71 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:46:35,372 on stmt: $162load_attr.72 = getattr(value=$160load_global.71, attr=complex128)
DEBUG 2022-02-14 16:46:35,372 on stmt: H_batch = call $140load_attr.61($158build_tuple.70, func=$140load_attr.61, args=[Var($158build_tuple.70, loop_hafnian_batch_gamma.py:38)], kws=[('dtype', Var($162load_attr.72, loop_hafnian_batch_gamma.py:38))], vararg=None, target=None)
DEBUG 2022-02-14 16:46:35,373 on stmt: $170load_global.75 = global(prange: <class 'numba.misc.special.prange'>)
DEBUG 2022-02-14 16:46:35,373 on stmt: $174call_function.77 = call $170load_global.75(steps, func=$170load_global.75, args=[Var(steps, loop_hafnian_batch_gamma.py:32)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:46:35,373 on stmt: $176get_iter.78 = getiter(value=$174call_function.77)
DEBUG 2022-02-14 16:46:35,373 on stmt: $phi178.0 = $176get_iter.78
DEBUG 2022-02-14 16:46:35,373 on stmt: jump 178
DEBUG 2022-02-14 16:46:35,373 ==== SSA block rewrite pass on 178
DEBUG 2022-02-14 16:46:35,373 Running <numba.core.ssa._FreshVarHandler object at 0x7f7203a2dfd0>
DEBUG 2022-02-14 16:46:35,373 on stmt: H_batch.2 = phi(incoming_values=[Var(H_batch, loop_hafnian_batch_gamma.py:38), Var(H_batch.1, loop_hafnian_batch_gamma.py:76)], incoming_blocks=[0, 600])
DEBUG 2022-02-14 16:46:35,373 on stmt: $178for_iter.1 = iternext(value=$phi178.0)
DEBUG 2022-02-14 16:46:35,373 on stmt: $178for_iter.2 = pair_first(value=$178for_iter.1)
DEBUG 2022-02-14 16:46:35,373 on stmt: $178for_iter.3 = pair_second(value=$178for_iter.1)
DEBUG 2022-02-14 16:46:35,373 on stmt: $phi182.1 = $178for_iter.2
DEBUG 2022-02-14 16:46:35,373 on stmt: branch $178for_iter.3, 182, 610
DEBUG 2022-02-14 16:46:35,373 ==== SSA block rewrite pass on 182
DEBUG 2022-02-14 16:46:35,373 Running <numba.core.ssa._FreshVarHandler object at 0x7f7203a2dfd0>
DEBUG 2022-02-14 16:46:35,373 on stmt: j = $phi182.1
DEBUG 2022-02-14 16:46:35,373 on stmt: $184load_global.2 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:46:35,373 on stmt: $186load_attr.3 = getattr(value=$184load_global.2, attr=zeros)
DEBUG 2022-02-14 16:46:35,373 on stmt: $const190.5 = const(int, 2)
DEBUG 2022-02-14 16:46:35,373 on stmt: $194binary_multiply.7 = $const190.5 * batch_max
DEBUG 2022-02-14 16:46:35,373 on stmt: $198binary_add.9 = $194binary_multiply.7 + odd_cutoff
DEBUG 2022-02-14 16:46:35,374 on stmt: $const200.10 = const(int, 1)
DEBUG 2022-02-14 16:46:35,374 on stmt: $202binary_add.11 = $198binary_add.9 + $const200.10
DEBUG 2022-02-14 16:46:35,374 on stmt: $204build_tuple.12 = build_tuple(items=[Var(n_D, loop_hafnian_batch_gamma.py:36), Var($202binary_add.11, loop_hafnian_batch_gamma.py:42)])
DEBUG 2022-02-14 16:46:35,374 on stmt: $206load_global.13 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:46:35,374 on stmt: $208load_attr.14 = getattr(value=$206load_global.13, attr=complex128)
DEBUG 2022-02-14 16:46:35,374 on stmt: Hnew = call $186load_attr.3($204build_tuple.12, func=$186load_attr.3, args=[Var($204build_tuple.12, loop_hafnian_batch_gamma.py:42)], kws=[('dtype', Var($208load_attr.14, loop_hafnian_batch_gamma.py:42))], vararg=None, target=None)
DEBUG 2022-02-14 16:46:35,374 on stmt: $216load_global.17 = global(find_kept_edges: CPUDispatcher(<function find_kept_edges at 0x7f7207b0e700>))
DEBUG 2022-02-14 16:46:35,374 on stmt: kept_edges = call $216load_global.17(j, edge_reps, func=$216load_global.17, args=[Var(j, loop_hafnian_batch_gamma.py:40), Var(edge_reps, loop_hafnian_batch_gamma.py:31)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:46:35,374 on stmt: $228load_method.22 = getattr(value=kept_edges, attr=sum)
DEBUG 2022-02-14 16:46:35,374 on stmt: edges_sum = call $228load_method.22(func=$228load_method.22, args=[], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:46:35,374 on stmt: binom_prod = const(float, 1.0)
DEBUG 2022-02-14 16:46:35,374 on stmt: $238load_global.25 = global(range: <class 'range'>)
DEBUG 2022-02-14 16:46:35,374 on stmt: $const240.26 = const(int, 1)
DEBUG 2022-02-14 16:46:35,374 on stmt: $const244.28 = const(int, 2)
DEBUG 2022-02-14 16:46:35,374 on stmt: $246binary_floor_divide.29 = n // $const244.28
DEBUG 2022-02-14 16:46:35,374 on stmt: $248call_function.30 = call $238load_global.25($const240.26, $246binary_floor_divide.29, func=$238load_global.25, args=[Var($const240.26, loop_hafnian_batch_gamma.py:48), Var($246binary_floor_divide.29, loop_hafnian_batch_gamma.py:48)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:46:35,374 on stmt: $250get_iter.31 = getiter(value=$248call_function.30)
DEBUG 2022-02-14 16:46:35,374 on stmt: $phi252.1 = $250get_iter.31
DEBUG 2022-02-14 16:46:35,374 on stmt: jump 252
DEBUG 2022-02-14 16:46:35,375 ==== SSA block rewrite pass on 252
DEBUG 2022-02-14 16:46:35,375 Running <numba.core.ssa._FreshVarHandler object at 0x7f7203a2dfd0>
DEBUG 2022-02-14 16:46:35,375 on stmt: binom_prod.2 = phi(incoming_values=[Var(binom_prod, loop_hafnian_batch_gamma.py:47), Var(binom_prod.1, loop_hafnian_batch_gamma.py:49)], incoming_blocks=[182, 254])
DEBUG 2022-02-14 16:46:35,375 on stmt: $252for_iter.2 = iternext(value=$phi252.1)
DEBUG 2022-02-14 16:46:35,375 on stmt: $252for_iter.3 = pair_first(value=$252for_iter.2)
DEBUG 2022-02-14 16:46:35,375 on stmt: $252for_iter.4 = pair_second(value=$252for_iter.2)
DEBUG 2022-02-14 16:46:35,375 on stmt: $phi254.2 = $252for_iter.3
DEBUG 2022-02-14 16:46:35,375 on stmt: branch $252for_iter.4, 254, 282
DEBUG 2022-02-14 16:46:35,375 ==== SSA block rewrite pass on 254
DEBUG 2022-02-14 16:46:35,375 Running <numba.core.ssa._FreshVarHandler object at 0x7f7203a2dfd0>
DEBUG 2022-02-14 16:46:35,375 on stmt: i = $phi254.2
DEBUG 2022-02-14 16:46:35,375 on stmt: $264binary_subscr.7 = getitem(value=edge_reps, index=i, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:46:35,375 on stmt: $270binary_subscr.10 = getitem(value=kept_edges, index=i, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:46:35,375 on stmt: $272build_tuple.11 = build_tuple(items=[Var($264binary_subscr.7, loop_hafnian_batch_gamma.py:49), Var($270binary_subscr.10, loop_hafnian_batch_gamma.py:49)])
DEBUG 2022-02-14 16:46:35,375 on stmt: $274binary_subscr.12 = getitem(value=binoms, index=$272build_tuple.11, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:46:35,375 on stmt: $276inplace_multiply.13 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=binom_prod.2, rhs=$274binary_subscr.12, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:46:35,375 on stmt: binom_prod.1 = $276inplace_multiply.13
DEBUG 2022-02-14 16:46:35,375 on stmt: jump 252
DEBUG 2022-02-14 16:46:35,375 ==== SSA block rewrite pass on 282
DEBUG 2022-02-14 16:46:35,375 Running <numba.core.ssa._FreshVarHandler object at 0x7f7203a2dfd0>
DEBUG 2022-02-14 16:46:35,375 on stmt: bool284 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:46:35,376 on stmt: $284pred = call bool284(glynn, func=bool284, args=(Var(glynn, loop_hafnian_batch_gamma.py:23),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:46:35,376 on stmt: branch $284pred, 288, 302
DEBUG 2022-02-14 16:46:35,376 ==== SSA block rewrite pass on 288
DEBUG 2022-02-14 16:46:35,376 Running <numba.core.ssa._FreshVarHandler object at 0x7f7203a2dfd0>
DEBUG 2022-02-14 16:46:35,376 on stmt: $const288.1 = const(int, 2)
DEBUG 2022-02-14 16:46:35,376 on stmt: $292binary_multiply.3 = $const288.1 * kept_edges
DEBUG 2022-02-14 16:46:35,376 on stmt: delta = $292binary_multiply.3 - edge_reps
DEBUG 2022-02-14 16:46:35,376 on stmt: jump 306
DEBUG 2022-02-14 16:46:35,376 ==== SSA block rewrite pass on 302
DEBUG 2022-02-14 16:46:35,376 Running <numba.core.ssa._FreshVarHandler object at 0x7f7203a2dfd0>
DEBUG 2022-02-14 16:46:35,376 on stmt: delta.1 = kept_edges
DEBUG 2022-02-14 16:46:35,376 on stmt: jump 306
DEBUG 2022-02-14 16:46:35,376 ==== SSA block rewrite pass on 306
DEBUG 2022-02-14 16:46:35,376 Running <numba.core.ssa._FreshVarHandler object at 0x7f7203a2dfd0>
DEBUG 2022-02-14 16:46:35,376 on stmt: delta.2 = phi(incoming_values=[Var(delta, loop_hafnian_batch_gamma.py:52), Var(delta.1, loop_hafnian_batch_gamma.py:54)], incoming_blocks=[288, 302])
DEBUG 2022-02-14 16:46:35,376 on stmt: $306load_global.1 = global(get_submatrices: CPUDispatcher(<function get_submatrices at 0x7f7207b0eca0>))
DEBUG 2022-02-14 16:46:35,376 on stmt: $const314.5 = const(int, 0)
DEBUG 2022-02-14 16:46:35,376 on stmt: $const316.6 = const(NoneType, None)
DEBUG 2022-02-14 16:46:35,376 on stmt: $const318.7 = const(NoneType, None)
DEBUG 2022-02-14 16:46:35,376 on stmt: $320build_slice.8 = global(slice: <class 'slice'>)
DEBUG 2022-02-14 16:46:35,376 on stmt: $320build_slice.9 = call $320build_slice.8($const316.6, $const318.7, func=$320build_slice.8, args=(Var($const316.6, loop_hafnian_batch_gamma.py:56), Var($const318.7, loop_hafnian_batch_gamma.py:56)), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:46:35,377 on stmt: $322build_tuple.10 = build_tuple(items=[Var($const314.5, loop_hafnian_batch_gamma.py:56), Var($320build_slice.9, loop_hafnian_batch_gamma.py:56)])
DEBUG 2022-02-14 16:46:35,377 on stmt: $324binary_subscr.11 = static_getitem(value=D, index=(0, slice(None, None, None)), index_var=$322build_tuple.10, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:46:35,377 on stmt: $328call_function.13 = call $306load_global.1(delta.2, A, $324binary_subscr.11, oddV, func=$306load_global.1, args=[Var(delta.2, loop_hafnian_batch_gamma.py:56), Var(A, loop_hafnian_batch_gamma.py:23), Var($324binary_subscr.11, loop_hafnian_batch_gamma.py:56), Var(oddV, loop_hafnian_batch_gamma.py:24)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:46:35,377 on stmt: $330unpack_sequence.18 = exhaust_iter(value=$328call_function.13, count=4)
DEBUG 2022-02-14 16:46:35,377 on stmt: $330unpack_sequence.14 = static_getitem(value=$330unpack_sequence.18, index=0, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:46:35,377 on stmt: $330unpack_sequence.15 = static_getitem(value=$330unpack_sequence.18, index=1, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:46:35,377 on stmt: $330unpack_sequence.16 = static_getitem(value=$330unpack_sequence.18, index=2, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:46:35,377 on stmt: $330unpack_sequence.17 = static_getitem(value=$330unpack_sequence.18, index=3, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:46:35,377 on stmt: AX_S = $330unpack_sequence.14
DEBUG 2022-02-14 16:46:35,377 on stmt: XD_S = $330unpack_sequence.15
DEBUG 2022-02-14 16:46:35,377 on stmt: D_S = $330unpack_sequence.16
DEBUG 2022-02-14 16:46:35,377 first assign: D_S
DEBUG 2022-02-14 16:46:35,377 replaced with: D_S = $330unpack_sequence.16
DEBUG 2022-02-14 16:46:35,377 on stmt: oddVX_S = $330unpack_sequence.17
DEBUG 2022-02-14 16:46:35,377 on stmt: $340load_global.19 = global(eigvals: CPUDispatcher(<function eigvals at 0x7f7207a993a0>))
DEBUG 2022-02-14 16:46:35,377 on stmt: E = call $340load_global.19(AX_S, func=$340load_global.19, args=[Var(AX_S, loop_hafnian_batch_gamma.py:56)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:46:35,377 on stmt: $348load_global.22 = global(range: <class 'range'>)
DEBUG 2022-02-14 16:46:35,377 on stmt: $352call_function.24 = call $348load_global.22(n_D, func=$348load_global.22, args=[Var(n_D, loop_hafnian_batch_gamma.py:36)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:46:35,378 on stmt: $354get_iter.25 = getiter(value=$352call_function.24)
DEBUG 2022-02-14 16:46:35,378 on stmt: $phi356.1 = $354get_iter.25
DEBUG 2022-02-14 16:46:35,378 on stmt: jump 356
DEBUG 2022-02-14 16:46:35,378 ==== SSA block rewrite pass on 356
DEBUG 2022-02-14 16:46:35,378 Running <numba.core.ssa._FreshVarHandler object at 0x7f7203a2dfd0>
DEBUG 2022-02-14 16:46:35,378 on stmt: $356for_iter.2 = iternext(value=$phi356.1)
DEBUG 2022-02-14 16:46:35,378 on stmt: $356for_iter.3 = pair_first(value=$356for_iter.2)
DEBUG 2022-02-14 16:46:35,378 on stmt: $356for_iter.4 = pair_second(value=$356for_iter.2)
DEBUG 2022-02-14 16:46:35,378 on stmt: $phi358.2 = $356for_iter.3
DEBUG 2022-02-14 16:46:35,378 on stmt: branch $356for_iter.4, 358, 600
DEBUG 2022-02-14 16:46:35,378 ==== SSA block rewrite pass on 358
DEBUG 2022-02-14 16:46:35,378 Running <numba.core.ssa._FreshVarHandler object at 0x7f7203a2dfd0>
DEBUG 2022-02-14 16:46:35,378 on stmt: k = $phi358.2
DEBUG 2022-02-14 16:46:35,378 on stmt: $360load_global.3 = global(get_Dsubmatrices: CPUDispatcher(<function get_Dsubmatrices at 0x7f7207a99160>))
DEBUG 2022-02-14 16:46:35,378 on stmt: $const368.7 = const(NoneType, None)
DEBUG 2022-02-14 16:46:35,378 on stmt: $const370.8 = const(NoneType, None)
DEBUG 2022-02-14 16:46:35,378 on stmt: $372build_slice.9 = global(slice: <class 'slice'>)
DEBUG 2022-02-14 16:46:35,378 on stmt: $372build_slice.10 = call $372build_slice.9($const368.7, $const370.8, func=$372build_slice.9, args=(Var($const368.7, loop_hafnian_batch_gamma.py:61), Var($const370.8, loop_hafnian_batch_gamma.py:61)), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:46:35,378 on stmt: $374build_tuple.11 = build_tuple(items=[Var(k, loop_hafnian_batch_gamma.py:60), Var($372build_slice.10, loop_hafnian_batch_gamma.py:61)])
DEBUG 2022-02-14 16:46:35,378 on stmt: $376binary_subscr.12 = getitem(value=D, index=$374build_tuple.11, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:46:35,378 on stmt: $378call_function.13 = call $360load_global.3(delta.2, $376binary_subscr.12, func=$360load_global.3, args=[Var(delta.2, loop_hafnian_batch_gamma.py:56), Var($376binary_subscr.12, loop_hafnian_batch_gamma.py:61)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:46:35,379 on stmt: $380unpack_sequence.16 = exhaust_iter(value=$378call_function.13, count=2)
DEBUG 2022-02-14 16:46:35,379 on stmt: $380unpack_sequence.14 = static_getitem(value=$380unpack_sequence.16, index=0, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:46:35,379 on stmt: $380unpack_sequence.15 = static_getitem(value=$380unpack_sequence.16, index=1, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:46:35,379 on stmt: XD_S.1 = $380unpack_sequence.14
DEBUG 2022-02-14 16:46:35,379 on stmt: D_S = $380unpack_sequence.15
DEBUG 2022-02-14 16:46:35,379 replaced with: D_S.1 = $380unpack_sequence.15
DEBUG 2022-02-14 16:46:35,379 on stmt: $386load_global.17 = global(f_loop: CPUDispatcher(<function f_loop at 0x7f7207b0e940>))
DEBUG 2022-02-14 16:46:35,379 on stmt: f_even = call $386load_global.17(E, AX_S, XD_S.1, D_S, N_max, func=$386load_global.17, args=[Var(E, loop_hafnian_batch_gamma.py:58), Var(AX_S, loop_hafnian_batch_gamma.py:56), Var(XD_S.1, loop_hafnian_batch_gamma.py:61), Var(D_S, loop_hafnian_batch_gamma.py:56), Var(N_max, loop_hafnian_batch_gamma.py:29)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:46:35,379 on stmt: $402load_global.24 = global(f_loop_odd: CPUDispatcher(<function f_loop_odd at 0x7f7207b0eaf0>))
DEBUG 2022-02-14 16:46:35,379 on stmt: $418binary_subscr.32 = getitem(value=oddloop, index=k, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:46:35,379 on stmt: f_odd = call $402load_global.24(E, AX_S, XD_S.1, D_S, N_max, $418binary_subscr.32, oddVX_S, func=$402load_global.24, args=[Var(E, loop_hafnian_batch_gamma.py:58), Var(AX_S, loop_hafnian_batch_gamma.py:56), Var(XD_S.1, loop_hafnian_batch_gamma.py:61), Var(D_S, loop_hafnian_batch_gamma.py:56), Var(N_max, loop_hafnian_batch_gamma.py:29), Var($418binary_subscr.32, loop_hafnian_batch_gamma.py:64), Var(oddVX_S, loop_hafnian_batch_gamma.py:56)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:46:35,379 on stmt: $426load_global.35 = global(range: <class 'range'>)
DEBUG 2022-02-14 16:46:35,379 on stmt: $const428.36 = const(int, 2)
DEBUG 2022-02-14 16:46:35,379 on stmt: $const432.38 = const(int, 0)
DEBUG 2022-02-14 16:46:35,379 on stmt: $434binary_subscr.39 = static_getitem(value=kept_edges, index=0, index_var=$const432.38, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:46:35,379 on stmt: $436binary_multiply.40 = $const428.36 * $434binary_subscr.39
DEBUG 2022-02-14 16:46:35,379 on stmt: $const438.41 = const(int, 2)
DEBUG 2022-02-14 16:46:35,379 on stmt: $442binary_multiply.43 = $const438.41 * batch_max
DEBUG 2022-02-14 16:46:35,379 on stmt: $446binary_add.45 = $442binary_multiply.43 + odd_cutoff
DEBUG 2022-02-14 16:46:35,380 on stmt: $const448.46 = const(int, 1)
DEBUG 2022-02-14 16:46:35,380 on stmt: $450binary_add.47 = $446binary_add.45 + $const448.46
DEBUG 2022-02-14 16:46:35,380 on stmt: $452call_function.48 = call $426load_global.35($436binary_multiply.40, $450binary_add.47, func=$426load_global.35, args=[Var($436binary_multiply.40, loop_hafnian_batch_gamma.py:66), Var($450binary_add.47, loop_hafnian_batch_gamma.py:66)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:46:35,380 on stmt: $454get_iter.49 = getiter(value=$452call_function.48)
DEBUG 2022-02-14 16:46:35,380 on stmt: $phi456.2 = $454get_iter.49
DEBUG 2022-02-14 16:46:35,380 on stmt: jump 456
DEBUG 2022-02-14 16:46:35,380 ==== SSA block rewrite pass on 456
DEBUG 2022-02-14 16:46:35,380 Running <numba.core.ssa._FreshVarHandler object at 0x7f7203a2dfd0>
DEBUG 2022-02-14 16:46:35,380 on stmt: $456for_iter.3 = iternext(value=$phi456.2)
DEBUG 2022-02-14 16:46:35,380 on stmt: $456for_iter.4 = pair_first(value=$456for_iter.3)
DEBUG 2022-02-14 16:46:35,380 on stmt: $456for_iter.5 = pair_second(value=$456for_iter.3)
DEBUG 2022-02-14 16:46:35,380 on stmt: $phi458.3 = $456for_iter.4
DEBUG 2022-02-14 16:46:35,380 on stmt: branch $456for_iter.5, 458, 596
DEBUG 2022-02-14 16:46:35,380 ==== SSA block rewrite pass on 458
DEBUG 2022-02-14 16:46:35,380 Running <numba.core.ssa._FreshVarHandler object at 0x7f7203a2dfd0>
DEBUG 2022-02-14 16:46:35,380 on stmt: N_det = $phi458.3
DEBUG 2022-02-14 16:46:35,380 on stmt: N = N_fixed + N_det
DEBUG 2022-02-14 16:46:35,380 on stmt: $const468.7 = const(float, -1.0)
DEBUG 2022-02-14 16:46:35,380 on stmt: $const472.9 = const(int, 2)
DEBUG 2022-02-14 16:46:35,380 on stmt: $474binary_floor_divide.10 = N // $const472.9
DEBUG 2022-02-14 16:46:35,380 on stmt: $478binary_subtract.12 = $474binary_floor_divide.10 - edges_sum
DEBUG 2022-02-14 16:46:35,380 on stmt: plus_minus = $const468.7 ** $478binary_subtract.12
DEBUG 2022-02-14 16:46:35,381 on stmt: $const488.16 = const(int, 2)
DEBUG 2022-02-14 16:46:35,381 on stmt: $490binary_floor_divide.17 = N_det // $const488.16
DEBUG 2022-02-14 16:46:35,381 on stmt: $const494.19 = const(int, 0)
DEBUG 2022-02-14 16:46:35,381 on stmt: $496binary_subscr.20 = static_getitem(value=kept_edges, index=0, index_var=$const494.19, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:46:35,381 on stmt: $498build_tuple.21 = build_tuple(items=[Var($490binary_floor_divide.17, loop_hafnian_batch_gamma.py:70), Var($496binary_subscr.20, loop_hafnian_batch_gamma.py:70)])
DEBUG 2022-02-14 16:46:35,381 on stmt: $500binary_subscr.22 = getitem(value=binoms, index=$498build_tuple.21, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:46:35,381 on stmt: n_det_binom_prod = $500binary_subscr.22 * binom_prod.2
DEBUG 2022-02-14 16:46:35,381 on stmt: $const510.26 = const(int, 2)
DEBUG 2022-02-14 16:46:35,381 on stmt: $512binary_modulo.27 = N_det % $const510.26
DEBUG 2022-02-14 16:46:35,381 on stmt: $const514.28 = const(int, 0)
DEBUG 2022-02-14 16:46:35,381 on stmt: $516compare_op.29 = $512binary_modulo.27 == $const514.28
DEBUG 2022-02-14 16:46:35,381 on stmt: bool518 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:46:35,381 on stmt: $518pred = call bool518($516compare_op.29, func=bool518, args=(Var($516compare_op.29, loop_hafnian_batch_gamma.py:72),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:46:35,381 on stmt: branch $518pred, 522, 560
DEBUG 2022-02-14 16:46:35,381 ==== SSA block rewrite pass on 522
DEBUG 2022-02-14 16:46:35,381 Running <numba.core.ssa._FreshVarHandler object at 0x7f7203a2dfd0>
DEBUG 2022-02-14 16:46:35,381 on stmt: $528build_tuple.6 = build_tuple(items=[Var(k, loop_hafnian_batch_gamma.py:60), Var(N_det, loop_hafnian_batch_gamma.py:66)])
DEBUG 2022-02-14 16:46:35,381 on stmt: $532binary_subscr.9 = getitem(value=Hnew, index=$528build_tuple.6, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:46:35,381 on stmt: $538binary_multiply.12 = n_det_binom_prod * plus_minus
DEBUG 2022-02-14 16:46:35,381 on stmt: $const544.15 = const(int, 2)
DEBUG 2022-02-14 16:46:35,382 on stmt: $546binary_floor_divide.16 = N // $const544.15
DEBUG 2022-02-14 16:46:35,382 on stmt: $548binary_subscr.17 = getitem(value=f_even, index=$546binary_floor_divide.16, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:46:35,382 on stmt: $550binary_multiply.18 = $538binary_multiply.12 * $548binary_subscr.17
DEBUG 2022-02-14 16:46:35,382 on stmt: $552inplace_add.19 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$532binary_subscr.9, rhs=$550binary_multiply.18, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:46:35,382 on stmt: Hnew[$528build_tuple.6] = $552inplace_add.19
DEBUG 2022-02-14 16:46:35,382 on stmt: jump 592
DEBUG 2022-02-14 16:46:35,382 ==== SSA block rewrite pass on 560
DEBUG 2022-02-14 16:46:35,382 Running <numba.core.ssa._FreshVarHandler object at 0x7f7203a2dfd0>
DEBUG 2022-02-14 16:46:35,382 on stmt: $566build_tuple.6 = build_tuple(items=[Var(k, loop_hafnian_batch_gamma.py:60), Var(N_det, loop_hafnian_batch_gamma.py:66)])
DEBUG 2022-02-14 16:46:35,382 on stmt: $570binary_subscr.9 = getitem(value=Hnew, index=$566build_tuple.6, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:46:35,382 on stmt: $576binary_multiply.12 = n_det_binom_prod * plus_minus
DEBUG 2022-02-14 16:46:35,382 on stmt: $582binary_subscr.15 = getitem(value=f_odd, index=N, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:46:35,382 on stmt: $584binary_multiply.16 = $576binary_multiply.12 * $582binary_subscr.15
DEBUG 2022-02-14 16:46:35,382 on stmt: $586inplace_add.17 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$570binary_subscr.9, rhs=$584binary_multiply.16, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:46:35,382 on stmt: Hnew[$566build_tuple.6] = $586inplace_add.17
DEBUG 2022-02-14 16:46:35,382 on stmt: jump 592
DEBUG 2022-02-14 16:46:35,382 ==== SSA block rewrite pass on 592
DEBUG 2022-02-14 16:46:35,382 Running <numba.core.ssa._FreshVarHandler object at 0x7f7203a2dfd0>
DEBUG 2022-02-14 16:46:35,382 on stmt: jump 456
DEBUG 2022-02-14 16:46:35,382 ==== SSA block rewrite pass on 596
DEBUG 2022-02-14 16:46:35,382 Running <numba.core.ssa._FreshVarHandler object at 0x7f7203a2dfd0>
DEBUG 2022-02-14 16:46:35,383 on stmt: jump 356
DEBUG 2022-02-14 16:46:35,383 ==== SSA block rewrite pass on 600
DEBUG 2022-02-14 16:46:35,383 Running <numba.core.ssa._FreshVarHandler object at 0x7f7203a2dfd0>
DEBUG 2022-02-14 16:46:35,383 on stmt: $604inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=H_batch.2, rhs=Hnew, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:46:35,383 on stmt: H_batch.1 = $604inplace_add.3
DEBUG 2022-02-14 16:46:35,383 on stmt: jump 178
DEBUG 2022-02-14 16:46:35,383 ==== SSA block rewrite pass on 610
DEBUG 2022-02-14 16:46:35,383 Running <numba.core.ssa._FreshVarHandler object at 0x7f7203a2dfd0>
DEBUG 2022-02-14 16:46:35,383 on stmt: bool612 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:46:35,383 on stmt: $612pred = call bool612(glynn, func=bool612, args=(Var(glynn, loop_hafnian_batch_gamma.py:23),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:46:35,383 on stmt: branch $612pred, 616, 678
DEBUG 2022-02-14 16:46:35,383 ==== SSA block rewrite pass on 616
DEBUG 2022-02-14 16:46:35,383 Running <numba.core.ssa._FreshVarHandler object at 0x7f7203a2dfd0>
DEBUG 2022-02-14 16:46:35,383 on stmt: $616load_global.0 = global(range: <class 'range'>)
DEBUG 2022-02-14 16:46:35,383 on stmt: $620load_attr.2 = getattr(value=H_batch.2, attr=shape)
DEBUG 2022-02-14 16:46:35,383 on stmt: $const622.3 = const(int, 1)
DEBUG 2022-02-14 16:46:35,383 on stmt: $624binary_subscr.4 = static_getitem(value=$620load_attr.2, index=1, index_var=$const622.3, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:46:35,383 on stmt: $626call_function.5 = call $616load_global.0($624binary_subscr.4, func=$616load_global.0, args=[Var($624binary_subscr.4, loop_hafnian_batch_gamma.py:79)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:46:35,383 on stmt: $628get_iter.6 = getiter(value=$626call_function.5)
DEBUG 2022-02-14 16:46:35,383 on stmt: $phi630.0 = $628get_iter.6
DEBUG 2022-02-14 16:46:35,383 on stmt: jump 630
DEBUG 2022-02-14 16:46:35,383 ==== SSA block rewrite pass on 630
DEBUG 2022-02-14 16:46:35,384 Running <numba.core.ssa._FreshVarHandler object at 0x7f7203a2dfd0>
DEBUG 2022-02-14 16:46:35,384 on stmt: $630for_iter.1 = iternext(value=$phi630.0)
DEBUG 2022-02-14 16:46:35,384 on stmt: $630for_iter.2 = pair_first(value=$630for_iter.1)
DEBUG 2022-02-14 16:46:35,384 on stmt: $630for_iter.3 = pair_second(value=$630for_iter.1)
DEBUG 2022-02-14 16:46:35,384 on stmt: $phi632.1 = $630for_iter.2
DEBUG 2022-02-14 16:46:35,384 on stmt: branch $630for_iter.3, 632, 678
DEBUG 2022-02-14 16:46:35,384 ==== SSA block rewrite pass on 632
DEBUG 2022-02-14 16:46:35,384 Running <numba.core.ssa._FreshVarHandler object at 0x7f7203a2dfd0>
DEBUG 2022-02-14 16:46:35,384 on stmt: j.1 = $phi632.1
DEBUG 2022-02-14 16:46:35,384 on stmt: x = N_fixed + j.1
DEBUG 2022-02-14 16:46:35,384 on stmt: $const644.6 = const(NoneType, None)
DEBUG 2022-02-14 16:46:35,384 on stmt: $const646.7 = const(NoneType, None)
DEBUG 2022-02-14 16:46:35,384 on stmt: $648build_slice.8 = global(slice: <class 'slice'>)
DEBUG 2022-02-14 16:46:35,384 on stmt: $648build_slice.9 = call $648build_slice.8($const644.6, $const646.7, func=$648build_slice.8, args=(Var($const644.6, loop_hafnian_batch_gamma.py:81), Var($const646.7, loop_hafnian_batch_gamma.py:81)), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:46:35,384 on stmt: $652build_tuple.11 = build_tuple(items=[Var($648build_slice.9, loop_hafnian_batch_gamma.py:81), Var(j.1, loop_hafnian_batch_gamma.py:79)])
DEBUG 2022-02-14 16:46:35,384 on stmt: $656binary_subscr.14 = getitem(value=H_batch.2, index=$652build_tuple.11, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:46:35,384 on stmt: $const658.15 = const(float, 0.5)
DEBUG 2022-02-14 16:46:35,384 on stmt: $const662.17 = const(int, 2)
DEBUG 2022-02-14 16:46:35,384 on stmt: $664binary_floor_divide.18 = x // $const662.17
DEBUG 2022-02-14 16:46:35,384 on stmt: $666binary_power.19 = $const658.15 ** $664binary_floor_divide.18
DEBUG 2022-02-14 16:46:35,384 on stmt: $668inplace_multiply.20 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=$656binary_subscr.14, rhs=$666binary_power.19, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:46:35,385 on stmt: H_batch.2[$652build_tuple.11] = $668inplace_multiply.20
DEBUG 2022-02-14 16:46:35,385 on stmt: jump 630
DEBUG 2022-02-14 16:46:35,385 ==== SSA block rewrite pass on 678
DEBUG 2022-02-14 16:46:35,385 Running <numba.core.ssa._FreshVarHandler object at 0x7f7203a2dfd0>
DEBUG 2022-02-14 16:46:35,385 on stmt: $680return_value.1 = cast(value=H_batch.2)
DEBUG 2022-02-14 16:46:35,385 on stmt: return $680return_value.1
DEBUG 2022-02-14 16:46:35,385 Replaced assignments: defaultdict(<class 'list'>,
            {306: [<numba.core.ir.Assign object at 0x7f7203a2d370>],
             358: [<numba.core.ir.Assign object at 0x7f7203a69f40>]})
DEBUG 2022-02-14 16:46:35,385 ==== SSA block rewrite pass on 0
DEBUG 2022-02-14 16:46:35,385 Running <numba.core.ssa._FixSSAVars object at 0x7f7203a39cd0>
DEBUG 2022-02-14 16:46:35,385 on stmt: A = arg(0, name=A)
DEBUG 2022-02-14 16:46:35,385 on stmt: D = arg(1, name=D)
DEBUG 2022-02-14 16:46:35,385 on stmt: fixed_edge_reps = arg(2, name=fixed_edge_reps)
DEBUG 2022-02-14 16:46:35,385 on stmt: batch_max = arg(3, name=batch_max)
DEBUG 2022-02-14 16:46:35,385 on stmt: odd_cutoff = arg(4, name=odd_cutoff)
DEBUG 2022-02-14 16:46:35,385 on stmt: glynn = arg(5, name=glynn)
DEBUG 2022-02-14 16:46:35,385 on stmt: $const4.1 = const(NoneType, None)
DEBUG 2022-02-14 16:46:35,385 on stmt: $const6.2 = const(NoneType, None)
DEBUG 2022-02-14 16:46:35,385 on stmt: $8build_slice.3 = global(slice: <class 'slice'>)
DEBUG 2022-02-14 16:46:35,385 on stmt: $8build_slice.4 = call $8build_slice.3($const4.1, $const6.2, func=$8build_slice.3, args=(Var($const4.1, loop_hafnian_batch_gamma.py:23), Var($const6.2, loop_hafnian_batch_gamma.py:23)), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:46:35,385 on stmt: $const10.5 = const(int, 0)
DEBUG 2022-02-14 16:46:35,386 on stmt: $12build_tuple.6 = build_tuple(items=[Var($8build_slice.4, loop_hafnian_batch_gamma.py:23), Var($const10.5, loop_hafnian_batch_gamma.py:23)])
DEBUG 2022-02-14 16:46:35,386 on stmt: oddloop = static_getitem(value=D, index=(slice(None, None, None), 0), index_var=$12build_tuple.6, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:46:35,386 on stmt: $const20.9 = const(int, 0)
DEBUG 2022-02-14 16:46:35,386 on stmt: $const22.10 = const(NoneType, None)
DEBUG 2022-02-14 16:46:35,386 on stmt: $const24.11 = const(NoneType, None)
DEBUG 2022-02-14 16:46:35,386 on stmt: $26build_slice.12 = global(slice: <class 'slice'>)
DEBUG 2022-02-14 16:46:35,386 on stmt: $26build_slice.13 = call $26build_slice.12($const22.10, $const24.11, func=$26build_slice.12, args=(Var($const22.10, loop_hafnian_batch_gamma.py:24), Var($const24.11, loop_hafnian_batch_gamma.py:24)), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:46:35,386 on stmt: $28build_tuple.14 = build_tuple(items=[Var($const20.9, loop_hafnian_batch_gamma.py:24), Var($26build_slice.13, loop_hafnian_batch_gamma.py:24)])
DEBUG 2022-02-14 16:46:35,386 on stmt: oddV = static_getitem(value=A, index=(0, slice(None, None, None)), index_var=$28build_tuple.14, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:46:35,386 on stmt: $36load_attr.17 = getattr(value=A, attr=shape)
DEBUG 2022-02-14 16:46:35,386 on stmt: $const38.18 = const(int, 0)
DEBUG 2022-02-14 16:46:35,386 on stmt: n = static_getitem(value=$36load_attr.17, index=0, index_var=$const38.18, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:46:35,386 on stmt: $const44.20 = const(int, 2)
DEBUG 2022-02-14 16:46:35,386 on stmt: $48load_method.22 = getattr(value=fixed_edge_reps, attr=sum)
DEBUG 2022-02-14 16:46:35,386 on stmt: $50call_method.23 = call $48load_method.22(func=$48load_method.22, args=[], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:46:35,386 on stmt: N_fixed = $const44.20 * $50call_method.23
DEBUG 2022-02-14 16:46:35,386 on stmt: $const58.26 = const(int, 2)
DEBUG 2022-02-14 16:46:35,386 on stmt: $62binary_multiply.28 = $const58.26 * batch_max
DEBUG 2022-02-14 16:46:35,386 on stmt: $64binary_add.29 = N_fixed + $62binary_multiply.28
DEBUG 2022-02-14 16:46:35,387 on stmt: N_max = $64binary_add.29 + odd_cutoff
DEBUG 2022-02-14 16:46:35,387 on stmt: $72load_global.32 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:46:35,387 on stmt: $74load_method.33 = getattr(value=$72load_global.32, attr=concatenate)
DEBUG 2022-02-14 16:46:35,387 on stmt: $76load_global.34 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:46:35,387 on stmt: $78load_method.35 = getattr(value=$76load_global.34, attr=array)
DEBUG 2022-02-14 16:46:35,387 on stmt: $82build_list.37 = build_list(items=[Var(batch_max, loop_hafnian_batch_gamma.py:23)])
DEBUG 2022-02-14 16:46:35,387 on stmt: $84call_method.38 = call $78load_method.35($82build_list.37, func=$78load_method.35, args=[Var($82build_list.37, loop_hafnian_batch_gamma.py:31)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:46:35,387 on stmt: $88build_tuple.40 = build_tuple(items=[Var($84call_method.38, loop_hafnian_batch_gamma.py:31), Var(fixed_edge_reps, loop_hafnian_batch_gamma.py:23)])
DEBUG 2022-02-14 16:46:35,387 on stmt: edge_reps = call $74load_method.33($88build_tuple.40, func=$74load_method.33, args=[Var($88build_tuple.40, loop_hafnian_batch_gamma.py:31)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:46:35,387 on stmt: $94load_global.42 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:46:35,387 on stmt: $96load_method.43 = getattr(value=$94load_global.42, attr=prod)
DEBUG 2022-02-14 16:46:35,387 on stmt: $const100.45 = const(int, 1)
DEBUG 2022-02-14 16:46:35,387 on stmt: $102binary_add.46 = edge_reps + $const100.45
DEBUG 2022-02-14 16:46:35,387 on stmt: steps = call $96load_method.43($102binary_add.46, func=$96load_method.43, args=[Var($102binary_add.46, loop_hafnian_batch_gamma.py:32)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:46:35,387 on stmt: $110load_method.49 = getattr(value=edge_reps, attr=max)
DEBUG 2022-02-14 16:46:35,387 on stmt: $112call_method.50 = call $110load_method.49(func=$110load_method.49, args=[], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:46:35,387 on stmt: max_binom = $112call_method.50 + odd_cutoff
DEBUG 2022-02-14 16:46:35,387 on stmt: $120load_global.53 = global(precompute_binoms: CPUDispatcher(<function precompute_binoms at 0x7f7207b0e280>))
DEBUG 2022-02-14 16:46:35,387 on stmt: binoms = call $120load_global.53(max_binom, func=$120load_global.53, args=[Var(max_binom, loop_hafnian_batch_gamma.py:34)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:46:35,387 on stmt: $130load_attr.57 = getattr(value=D, attr=shape)
DEBUG 2022-02-14 16:46:35,387 on stmt: $const132.58 = const(int, 0)
DEBUG 2022-02-14 16:46:35,388 on stmt: n_D = static_getitem(value=$130load_attr.57, index=0, index_var=$const132.58, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:46:35,388 on stmt: $138load_global.60 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:46:35,388 on stmt: $140load_attr.61 = getattr(value=$138load_global.60, attr=zeros)
DEBUG 2022-02-14 16:46:35,388 on stmt: $const144.63 = const(int, 2)
DEBUG 2022-02-14 16:46:35,388 on stmt: $148binary_multiply.65 = $const144.63 * batch_max
DEBUG 2022-02-14 16:46:35,388 on stmt: $152binary_add.67 = $148binary_multiply.65 + odd_cutoff
DEBUG 2022-02-14 16:46:35,388 on stmt: $const154.68 = const(int, 1)
DEBUG 2022-02-14 16:46:35,388 on stmt: $156binary_add.69 = $152binary_add.67 + $const154.68
DEBUG 2022-02-14 16:46:35,388 on stmt: $158build_tuple.70 = build_tuple(items=[Var(n_D, loop_hafnian_batch_gamma.py:36), Var($156binary_add.69, loop_hafnian_batch_gamma.py:38)])
DEBUG 2022-02-14 16:46:35,388 on stmt: $160load_global.71 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:46:35,388 on stmt: $162load_attr.72 = getattr(value=$160load_global.71, attr=complex128)
DEBUG 2022-02-14 16:46:35,388 on stmt: H_batch = call $140load_attr.61($158build_tuple.70, func=$140load_attr.61, args=[Var($158build_tuple.70, loop_hafnian_batch_gamma.py:38)], kws=[('dtype', Var($162load_attr.72, loop_hafnian_batch_gamma.py:38))], vararg=None, target=None)
DEBUG 2022-02-14 16:46:35,388 on stmt: $170load_global.75 = global(prange: <class 'numba.misc.special.prange'>)
DEBUG 2022-02-14 16:46:35,388 on stmt: $174call_function.77 = call $170load_global.75(steps, func=$170load_global.75, args=[Var(steps, loop_hafnian_batch_gamma.py:32)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:46:35,388 on stmt: $176get_iter.78 = getiter(value=$174call_function.77)
DEBUG 2022-02-14 16:46:35,388 on stmt: $phi178.0 = $176get_iter.78
DEBUG 2022-02-14 16:46:35,388 on stmt: jump 178
DEBUG 2022-02-14 16:46:35,388 ==== SSA block rewrite pass on 178
DEBUG 2022-02-14 16:46:35,388 Running <numba.core.ssa._FixSSAVars object at 0x7f7203a39cd0>
DEBUG 2022-02-14 16:46:35,388 on stmt: H_batch.2 = phi(incoming_values=[Var(H_batch, loop_hafnian_batch_gamma.py:38), Var(H_batch.1, loop_hafnian_batch_gamma.py:76)], incoming_blocks=[0, 600])
DEBUG 2022-02-14 16:46:35,388 on stmt: $178for_iter.1 = iternext(value=$phi178.0)
DEBUG 2022-02-14 16:46:35,388 on stmt: $178for_iter.2 = pair_first(value=$178for_iter.1)
DEBUG 2022-02-14 16:46:35,388 on stmt: $178for_iter.3 = pair_second(value=$178for_iter.1)
DEBUG 2022-02-14 16:46:35,389 on stmt: $phi182.1 = $178for_iter.2
DEBUG 2022-02-14 16:46:35,389 on stmt: branch $178for_iter.3, 182, 610
DEBUG 2022-02-14 16:46:35,389 ==== SSA block rewrite pass on 182
DEBUG 2022-02-14 16:46:35,389 Running <numba.core.ssa._FixSSAVars object at 0x7f7203a39cd0>
DEBUG 2022-02-14 16:46:35,389 on stmt: j = $phi182.1
DEBUG 2022-02-14 16:46:35,389 on stmt: $184load_global.2 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:46:35,389 on stmt: $186load_attr.3 = getattr(value=$184load_global.2, attr=zeros)
DEBUG 2022-02-14 16:46:35,389 on stmt: $const190.5 = const(int, 2)
DEBUG 2022-02-14 16:46:35,389 on stmt: $194binary_multiply.7 = $const190.5 * batch_max
DEBUG 2022-02-14 16:46:35,389 on stmt: $198binary_add.9 = $194binary_multiply.7 + odd_cutoff
DEBUG 2022-02-14 16:46:35,389 on stmt: $const200.10 = const(int, 1)
DEBUG 2022-02-14 16:46:35,389 on stmt: $202binary_add.11 = $198binary_add.9 + $const200.10
DEBUG 2022-02-14 16:46:35,389 on stmt: $204build_tuple.12 = build_tuple(items=[Var(n_D, loop_hafnian_batch_gamma.py:36), Var($202binary_add.11, loop_hafnian_batch_gamma.py:42)])
DEBUG 2022-02-14 16:46:35,389 on stmt: $206load_global.13 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:46:35,389 on stmt: $208load_attr.14 = getattr(value=$206load_global.13, attr=complex128)
DEBUG 2022-02-14 16:46:35,389 on stmt: Hnew = call $186load_attr.3($204build_tuple.12, func=$186load_attr.3, args=[Var($204build_tuple.12, loop_hafnian_batch_gamma.py:42)], kws=[('dtype', Var($208load_attr.14, loop_hafnian_batch_gamma.py:42))], vararg=None, target=None)
DEBUG 2022-02-14 16:46:35,389 on stmt: $216load_global.17 = global(find_kept_edges: CPUDispatcher(<function find_kept_edges at 0x7f7207b0e700>))
DEBUG 2022-02-14 16:46:35,389 on stmt: kept_edges = call $216load_global.17(j, edge_reps, func=$216load_global.17, args=[Var(j, loop_hafnian_batch_gamma.py:40), Var(edge_reps, loop_hafnian_batch_gamma.py:31)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:46:35,389 on stmt: $228load_method.22 = getattr(value=kept_edges, attr=sum)
DEBUG 2022-02-14 16:46:35,389 on stmt: edges_sum = call $228load_method.22(func=$228load_method.22, args=[], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:46:35,389 on stmt: binom_prod = const(float, 1.0)
DEBUG 2022-02-14 16:46:35,389 on stmt: $238load_global.25 = global(range: <class 'range'>)
DEBUG 2022-02-14 16:46:35,389 on stmt: $const240.26 = const(int, 1)
DEBUG 2022-02-14 16:46:35,389 on stmt: $const244.28 = const(int, 2)
DEBUG 2022-02-14 16:46:35,390 on stmt: $246binary_floor_divide.29 = n // $const244.28
DEBUG 2022-02-14 16:46:35,390 on stmt: $248call_function.30 = call $238load_global.25($const240.26, $246binary_floor_divide.29, func=$238load_global.25, args=[Var($const240.26, loop_hafnian_batch_gamma.py:48), Var($246binary_floor_divide.29, loop_hafnian_batch_gamma.py:48)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:46:35,390 on stmt: $250get_iter.31 = getiter(value=$248call_function.30)
DEBUG 2022-02-14 16:46:35,390 on stmt: $phi252.1 = $250get_iter.31
DEBUG 2022-02-14 16:46:35,390 on stmt: jump 252
DEBUG 2022-02-14 16:46:35,390 ==== SSA block rewrite pass on 252
DEBUG 2022-02-14 16:46:35,390 Running <numba.core.ssa._FixSSAVars object at 0x7f7203a39cd0>
DEBUG 2022-02-14 16:46:35,390 on stmt: binom_prod.2 = phi(incoming_values=[Var(binom_prod, loop_hafnian_batch_gamma.py:47), Var(binom_prod.1, loop_hafnian_batch_gamma.py:49)], incoming_blocks=[182, 254])
DEBUG 2022-02-14 16:46:35,390 on stmt: $252for_iter.2 = iternext(value=$phi252.1)
DEBUG 2022-02-14 16:46:35,390 on stmt: $252for_iter.3 = pair_first(value=$252for_iter.2)
DEBUG 2022-02-14 16:46:35,390 on stmt: $252for_iter.4 = pair_second(value=$252for_iter.2)
DEBUG 2022-02-14 16:46:35,390 on stmt: $phi254.2 = $252for_iter.3
DEBUG 2022-02-14 16:46:35,390 on stmt: branch $252for_iter.4, 254, 282
DEBUG 2022-02-14 16:46:35,390 ==== SSA block rewrite pass on 254
DEBUG 2022-02-14 16:46:35,390 Running <numba.core.ssa._FixSSAVars object at 0x7f7203a39cd0>
DEBUG 2022-02-14 16:46:35,390 on stmt: i = $phi254.2
DEBUG 2022-02-14 16:46:35,390 on stmt: $264binary_subscr.7 = getitem(value=edge_reps, index=i, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:46:35,390 on stmt: $270binary_subscr.10 = getitem(value=kept_edges, index=i, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:46:35,390 on stmt: $272build_tuple.11 = build_tuple(items=[Var($264binary_subscr.7, loop_hafnian_batch_gamma.py:49), Var($270binary_subscr.10, loop_hafnian_batch_gamma.py:49)])
DEBUG 2022-02-14 16:46:35,390 on stmt: $274binary_subscr.12 = getitem(value=binoms, index=$272build_tuple.11, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:46:35,390 on stmt: $276inplace_multiply.13 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=binom_prod.2, rhs=$274binary_subscr.12, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:46:35,390 on stmt: binom_prod.1 = $276inplace_multiply.13
DEBUG 2022-02-14 16:46:35,390 on stmt: jump 252
DEBUG 2022-02-14 16:46:35,391 ==== SSA block rewrite pass on 282
DEBUG 2022-02-14 16:46:35,391 Running <numba.core.ssa._FixSSAVars object at 0x7f7203a39cd0>
DEBUG 2022-02-14 16:46:35,391 on stmt: bool284 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:46:35,391 on stmt: $284pred = call bool284(glynn, func=bool284, args=(Var(glynn, loop_hafnian_batch_gamma.py:23),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:46:35,391 on stmt: branch $284pred, 288, 302
DEBUG 2022-02-14 16:46:35,391 ==== SSA block rewrite pass on 288
DEBUG 2022-02-14 16:46:35,391 Running <numba.core.ssa._FixSSAVars object at 0x7f7203a39cd0>
DEBUG 2022-02-14 16:46:35,391 on stmt: $const288.1 = const(int, 2)
DEBUG 2022-02-14 16:46:35,391 on stmt: $292binary_multiply.3 = $const288.1 * kept_edges
DEBUG 2022-02-14 16:46:35,391 on stmt: delta = $292binary_multiply.3 - edge_reps
DEBUG 2022-02-14 16:46:35,391 on stmt: jump 306
DEBUG 2022-02-14 16:46:35,391 ==== SSA block rewrite pass on 302
DEBUG 2022-02-14 16:46:35,391 Running <numba.core.ssa._FixSSAVars object at 0x7f7203a39cd0>
DEBUG 2022-02-14 16:46:35,391 on stmt: delta.1 = kept_edges
DEBUG 2022-02-14 16:46:35,391 on stmt: jump 306
DEBUG 2022-02-14 16:46:35,391 ==== SSA block rewrite pass on 306
DEBUG 2022-02-14 16:46:35,391 Running <numba.core.ssa._FixSSAVars object at 0x7f7203a39cd0>
DEBUG 2022-02-14 16:46:35,391 on stmt: delta.2 = phi(incoming_values=[Var(delta, loop_hafnian_batch_gamma.py:52), Var(delta.1, loop_hafnian_batch_gamma.py:54)], incoming_blocks=[288, 302])
DEBUG 2022-02-14 16:46:35,391 on stmt: $306load_global.1 = global(get_submatrices: CPUDispatcher(<function get_submatrices at 0x7f7207b0eca0>))
DEBUG 2022-02-14 16:46:35,391 on stmt: $const314.5 = const(int, 0)
DEBUG 2022-02-14 16:46:35,391 on stmt: $const316.6 = const(NoneType, None)
DEBUG 2022-02-14 16:46:35,391 on stmt: $const318.7 = const(NoneType, None)
DEBUG 2022-02-14 16:46:35,391 on stmt: $320build_slice.8 = global(slice: <class 'slice'>)
DEBUG 2022-02-14 16:46:35,391 on stmt: $320build_slice.9 = call $320build_slice.8($const316.6, $const318.7, func=$320build_slice.8, args=(Var($const316.6, loop_hafnian_batch_gamma.py:56), Var($const318.7, loop_hafnian_batch_gamma.py:56)), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:46:35,391 on stmt: $322build_tuple.10 = build_tuple(items=[Var($const314.5, loop_hafnian_batch_gamma.py:56), Var($320build_slice.9, loop_hafnian_batch_gamma.py:56)])
DEBUG 2022-02-14 16:46:35,391 on stmt: $324binary_subscr.11 = static_getitem(value=D, index=(0, slice(None, None, None)), index_var=$322build_tuple.10, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:46:35,392 on stmt: $328call_function.13 = call $306load_global.1(delta.2, A, $324binary_subscr.11, oddV, func=$306load_global.1, args=[Var(delta.2, loop_hafnian_batch_gamma.py:56), Var(A, loop_hafnian_batch_gamma.py:23), Var($324binary_subscr.11, loop_hafnian_batch_gamma.py:56), Var(oddV, loop_hafnian_batch_gamma.py:24)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:46:35,392 on stmt: $330unpack_sequence.18 = exhaust_iter(value=$328call_function.13, count=4)
DEBUG 2022-02-14 16:46:35,392 on stmt: $330unpack_sequence.14 = static_getitem(value=$330unpack_sequence.18, index=0, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:46:35,392 on stmt: $330unpack_sequence.15 = static_getitem(value=$330unpack_sequence.18, index=1, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:46:35,392 on stmt: $330unpack_sequence.16 = static_getitem(value=$330unpack_sequence.18, index=2, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:46:35,392 on stmt: $330unpack_sequence.17 = static_getitem(value=$330unpack_sequence.18, index=3, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:46:35,392 on stmt: AX_S = $330unpack_sequence.14
DEBUG 2022-02-14 16:46:35,392 on stmt: XD_S = $330unpack_sequence.15
DEBUG 2022-02-14 16:46:35,392 on stmt: D_S = $330unpack_sequence.16
DEBUG 2022-02-14 16:46:35,392 on stmt: oddVX_S = $330unpack_sequence.17
DEBUG 2022-02-14 16:46:35,392 on stmt: $340load_global.19 = global(eigvals: CPUDispatcher(<function eigvals at 0x7f7207a993a0>))
DEBUG 2022-02-14 16:46:35,392 on stmt: E = call $340load_global.19(AX_S, func=$340load_global.19, args=[Var(AX_S, loop_hafnian_batch_gamma.py:56)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:46:35,392 on stmt: $348load_global.22 = global(range: <class 'range'>)
DEBUG 2022-02-14 16:46:35,392 on stmt: $352call_function.24 = call $348load_global.22(n_D, func=$348load_global.22, args=[Var(n_D, loop_hafnian_batch_gamma.py:36)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:46:35,392 on stmt: $354get_iter.25 = getiter(value=$352call_function.24)
DEBUG 2022-02-14 16:46:35,392 on stmt: $phi356.1 = $354get_iter.25
DEBUG 2022-02-14 16:46:35,392 on stmt: jump 356
DEBUG 2022-02-14 16:46:35,392 ==== SSA block rewrite pass on 356
DEBUG 2022-02-14 16:46:35,392 Running <numba.core.ssa._FixSSAVars object at 0x7f7203a39cd0>
DEBUG 2022-02-14 16:46:35,392 on stmt: $356for_iter.2 = iternext(value=$phi356.1)
DEBUG 2022-02-14 16:46:35,392 on stmt: $356for_iter.3 = pair_first(value=$356for_iter.2)
DEBUG 2022-02-14 16:46:35,392 on stmt: $356for_iter.4 = pair_second(value=$356for_iter.2)
DEBUG 2022-02-14 16:46:35,392 on stmt: $phi358.2 = $356for_iter.3
DEBUG 2022-02-14 16:46:35,392 on stmt: branch $356for_iter.4, 358, 600
DEBUG 2022-02-14 16:46:35,393 ==== SSA block rewrite pass on 358
DEBUG 2022-02-14 16:46:35,393 Running <numba.core.ssa._FixSSAVars object at 0x7f7203a39cd0>
DEBUG 2022-02-14 16:46:35,393 on stmt: k = $phi358.2
DEBUG 2022-02-14 16:46:35,393 on stmt: $360load_global.3 = global(get_Dsubmatrices: CPUDispatcher(<function get_Dsubmatrices at 0x7f7207a99160>))
DEBUG 2022-02-14 16:46:35,393 on stmt: $const368.7 = const(NoneType, None)
DEBUG 2022-02-14 16:46:35,393 on stmt: $const370.8 = const(NoneType, None)
DEBUG 2022-02-14 16:46:35,393 on stmt: $372build_slice.9 = global(slice: <class 'slice'>)
DEBUG 2022-02-14 16:46:35,393 on stmt: $372build_slice.10 = call $372build_slice.9($const368.7, $const370.8, func=$372build_slice.9, args=(Var($const368.7, loop_hafnian_batch_gamma.py:61), Var($const370.8, loop_hafnian_batch_gamma.py:61)), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:46:35,393 on stmt: $374build_tuple.11 = build_tuple(items=[Var(k, loop_hafnian_batch_gamma.py:60), Var($372build_slice.10, loop_hafnian_batch_gamma.py:61)])
DEBUG 2022-02-14 16:46:35,393 on stmt: $376binary_subscr.12 = getitem(value=D, index=$374build_tuple.11, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:46:35,393 on stmt: $378call_function.13 = call $360load_global.3(delta.2, $376binary_subscr.12, func=$360load_global.3, args=[Var(delta.2, loop_hafnian_batch_gamma.py:56), Var($376binary_subscr.12, loop_hafnian_batch_gamma.py:61)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:46:35,393 on stmt: $380unpack_sequence.16 = exhaust_iter(value=$378call_function.13, count=2)
DEBUG 2022-02-14 16:46:35,393 on stmt: $380unpack_sequence.14 = static_getitem(value=$380unpack_sequence.16, index=0, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:46:35,393 on stmt: $380unpack_sequence.15 = static_getitem(value=$380unpack_sequence.16, index=1, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:46:35,393 on stmt: XD_S.1 = $380unpack_sequence.14
DEBUG 2022-02-14 16:46:35,393 on stmt: D_S.1 = $380unpack_sequence.15
DEBUG 2022-02-14 16:46:35,393 on stmt: $386load_global.17 = global(f_loop: CPUDispatcher(<function f_loop at 0x7f7207b0e940>))
DEBUG 2022-02-14 16:46:35,393 on stmt: f_even = call $386load_global.17(E, AX_S, XD_S.1, D_S, N_max, func=$386load_global.17, args=[Var(E, loop_hafnian_batch_gamma.py:58), Var(AX_S, loop_hafnian_batch_gamma.py:56), Var(XD_S.1, loop_hafnian_batch_gamma.py:61), Var(D_S, loop_hafnian_batch_gamma.py:56), Var(N_max, loop_hafnian_batch_gamma.py:29)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:46:35,393 find_def var='D_S' stmt=f_even = call $386load_global.17(E, AX_S, XD_S.1, D_S, N_max, func=$386load_global.17, args=[Var(E, loop_hafnian_batch_gamma.py:58), Var(AX_S, loop_hafnian_batch_gamma.py:56), Var(XD_S.1, loop_hafnian_batch_gamma.py:61), Var(D_S, loop_hafnian_batch_gamma.py:56), Var(N_max, loop_hafnian_batch_gamma.py:29)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:46:35,393 replaced with: f_even = call $386load_global.17(E, AX_S, XD_S.1, D_S.1, N_max, func=$386load_global.17, args=[Var(E, loop_hafnian_batch_gamma.py:58), Var(AX_S, loop_hafnian_batch_gamma.py:56), Var(XD_S.1, loop_hafnian_batch_gamma.py:61), Var(D_S.1, loop_hafnian_batch_gamma.py:61), Var(N_max, loop_hafnian_batch_gamma.py:29)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:46:35,393 on stmt: $402load_global.24 = global(f_loop_odd: CPUDispatcher(<function f_loop_odd at 0x7f7207b0eaf0>))
DEBUG 2022-02-14 16:46:35,394 on stmt: $418binary_subscr.32 = getitem(value=oddloop, index=k, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:46:35,394 on stmt: f_odd = call $402load_global.24(E, AX_S, XD_S.1, D_S, N_max, $418binary_subscr.32, oddVX_S, func=$402load_global.24, args=[Var(E, loop_hafnian_batch_gamma.py:58), Var(AX_S, loop_hafnian_batch_gamma.py:56), Var(XD_S.1, loop_hafnian_batch_gamma.py:61), Var(D_S, loop_hafnian_batch_gamma.py:56), Var(N_max, loop_hafnian_batch_gamma.py:29), Var($418binary_subscr.32, loop_hafnian_batch_gamma.py:64), Var(oddVX_S, loop_hafnian_batch_gamma.py:56)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:46:35,394 find_def var='D_S' stmt=f_odd = call $402load_global.24(E, AX_S, XD_S.1, D_S, N_max, $418binary_subscr.32, oddVX_S, func=$402load_global.24, args=[Var(E, loop_hafnian_batch_gamma.py:58), Var(AX_S, loop_hafnian_batch_gamma.py:56), Var(XD_S.1, loop_hafnian_batch_gamma.py:61), Var(D_S, loop_hafnian_batch_gamma.py:56), Var(N_max, loop_hafnian_batch_gamma.py:29), Var($418binary_subscr.32, loop_hafnian_batch_gamma.py:64), Var(oddVX_S, loop_hafnian_batch_gamma.py:56)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:46:35,394 replaced with: f_odd = call $402load_global.24(E, AX_S, XD_S.1, D_S.1, N_max, $418binary_subscr.32, oddVX_S, func=$402load_global.24, args=[Var(E, loop_hafnian_batch_gamma.py:58), Var(AX_S, loop_hafnian_batch_gamma.py:56), Var(XD_S.1, loop_hafnian_batch_gamma.py:61), Var(D_S.1, loop_hafnian_batch_gamma.py:61), Var(N_max, loop_hafnian_batch_gamma.py:29), Var($418binary_subscr.32, loop_hafnian_batch_gamma.py:64), Var(oddVX_S, loop_hafnian_batch_gamma.py:56)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:46:35,394 on stmt: $426load_global.35 = global(range: <class 'range'>)
DEBUG 2022-02-14 16:46:35,394 on stmt: $const428.36 = const(int, 2)
DEBUG 2022-02-14 16:46:35,394 on stmt: $const432.38 = const(int, 0)
DEBUG 2022-02-14 16:46:35,394 on stmt: $434binary_subscr.39 = static_getitem(value=kept_edges, index=0, index_var=$const432.38, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:46:35,394 on stmt: $436binary_multiply.40 = $const428.36 * $434binary_subscr.39
DEBUG 2022-02-14 16:46:35,394 on stmt: $const438.41 = const(int, 2)
DEBUG 2022-02-14 16:46:35,394 on stmt: $442binary_multiply.43 = $const438.41 * batch_max
DEBUG 2022-02-14 16:46:35,394 on stmt: $446binary_add.45 = $442binary_multiply.43 + odd_cutoff
DEBUG 2022-02-14 16:46:35,394 on stmt: $const448.46 = const(int, 1)
DEBUG 2022-02-14 16:46:35,394 on stmt: $450binary_add.47 = $446binary_add.45 + $const448.46
DEBUG 2022-02-14 16:46:35,394 on stmt: $452call_function.48 = call $426load_global.35($436binary_multiply.40, $450binary_add.47, func=$426load_global.35, args=[Var($436binary_multiply.40, loop_hafnian_batch_gamma.py:66), Var($450binary_add.47, loop_hafnian_batch_gamma.py:66)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:46:35,394 on stmt: $454get_iter.49 = getiter(value=$452call_function.48)
DEBUG 2022-02-14 16:46:35,394 on stmt: $phi456.2 = $454get_iter.49
DEBUG 2022-02-14 16:46:35,394 on stmt: jump 456
DEBUG 2022-02-14 16:46:35,394 ==== SSA block rewrite pass on 456
DEBUG 2022-02-14 16:46:35,394 Running <numba.core.ssa._FixSSAVars object at 0x7f7203a39cd0>
DEBUG 2022-02-14 16:46:35,394 on stmt: $456for_iter.3 = iternext(value=$phi456.2)
DEBUG 2022-02-14 16:46:35,395 on stmt: $456for_iter.4 = pair_first(value=$456for_iter.3)
DEBUG 2022-02-14 16:46:35,395 on stmt: $456for_iter.5 = pair_second(value=$456for_iter.3)
DEBUG 2022-02-14 16:46:35,395 on stmt: $phi458.3 = $456for_iter.4
DEBUG 2022-02-14 16:46:35,395 on stmt: branch $456for_iter.5, 458, 596
DEBUG 2022-02-14 16:46:35,395 ==== SSA block rewrite pass on 458
DEBUG 2022-02-14 16:46:35,395 Running <numba.core.ssa._FixSSAVars object at 0x7f7203a39cd0>
DEBUG 2022-02-14 16:46:35,395 on stmt: N_det = $phi458.3
DEBUG 2022-02-14 16:46:35,395 on stmt: N = N_fixed + N_det
DEBUG 2022-02-14 16:46:35,395 on stmt: $const468.7 = const(float, -1.0)
DEBUG 2022-02-14 16:46:35,395 on stmt: $const472.9 = const(int, 2)
DEBUG 2022-02-14 16:46:35,395 on stmt: $474binary_floor_divide.10 = N // $const472.9
DEBUG 2022-02-14 16:46:35,395 on stmt: $478binary_subtract.12 = $474binary_floor_divide.10 - edges_sum
DEBUG 2022-02-14 16:46:35,395 on stmt: plus_minus = $const468.7 ** $478binary_subtract.12
DEBUG 2022-02-14 16:46:35,395 on stmt: $const488.16 = const(int, 2)
DEBUG 2022-02-14 16:46:35,395 on stmt: $490binary_floor_divide.17 = N_det // $const488.16
DEBUG 2022-02-14 16:46:35,395 on stmt: $const494.19 = const(int, 0)
DEBUG 2022-02-14 16:46:35,395 on stmt: $496binary_subscr.20 = static_getitem(value=kept_edges, index=0, index_var=$const494.19, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:46:35,395 on stmt: $498build_tuple.21 = build_tuple(items=[Var($490binary_floor_divide.17, loop_hafnian_batch_gamma.py:70), Var($496binary_subscr.20, loop_hafnian_batch_gamma.py:70)])
DEBUG 2022-02-14 16:46:35,395 on stmt: $500binary_subscr.22 = getitem(value=binoms, index=$498build_tuple.21, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:46:35,395 on stmt: n_det_binom_prod = $500binary_subscr.22 * binom_prod.2
DEBUG 2022-02-14 16:46:35,395 on stmt: $const510.26 = const(int, 2)
DEBUG 2022-02-14 16:46:35,395 on stmt: $512binary_modulo.27 = N_det % $const510.26
DEBUG 2022-02-14 16:46:35,395 on stmt: $const514.28 = const(int, 0)
DEBUG 2022-02-14 16:46:35,395 on stmt: $516compare_op.29 = $512binary_modulo.27 == $const514.28
DEBUG 2022-02-14 16:46:35,396 on stmt: bool518 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:46:35,396 on stmt: $518pred = call bool518($516compare_op.29, func=bool518, args=(Var($516compare_op.29, loop_hafnian_batch_gamma.py:72),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:46:35,396 on stmt: branch $518pred, 522, 560
DEBUG 2022-02-14 16:46:35,396 ==== SSA block rewrite pass on 522
DEBUG 2022-02-14 16:46:35,396 Running <numba.core.ssa._FixSSAVars object at 0x7f7203a39cd0>
DEBUG 2022-02-14 16:46:35,396 on stmt: $528build_tuple.6 = build_tuple(items=[Var(k, loop_hafnian_batch_gamma.py:60), Var(N_det, loop_hafnian_batch_gamma.py:66)])
DEBUG 2022-02-14 16:46:35,396 on stmt: $532binary_subscr.9 = getitem(value=Hnew, index=$528build_tuple.6, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:46:35,396 on stmt: $538binary_multiply.12 = n_det_binom_prod * plus_minus
DEBUG 2022-02-14 16:46:35,396 on stmt: $const544.15 = const(int, 2)
DEBUG 2022-02-14 16:46:35,396 on stmt: $546binary_floor_divide.16 = N // $const544.15
DEBUG 2022-02-14 16:46:35,396 on stmt: $548binary_subscr.17 = getitem(value=f_even, index=$546binary_floor_divide.16, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:46:35,396 on stmt: $550binary_multiply.18 = $538binary_multiply.12 * $548binary_subscr.17
DEBUG 2022-02-14 16:46:35,396 on stmt: $552inplace_add.19 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$532binary_subscr.9, rhs=$550binary_multiply.18, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:46:35,396 on stmt: Hnew[$528build_tuple.6] = $552inplace_add.19
DEBUG 2022-02-14 16:46:35,396 on stmt: jump 592
DEBUG 2022-02-14 16:46:35,396 ==== SSA block rewrite pass on 560
DEBUG 2022-02-14 16:46:35,396 Running <numba.core.ssa._FixSSAVars object at 0x7f7203a39cd0>
DEBUG 2022-02-14 16:46:35,396 on stmt: $566build_tuple.6 = build_tuple(items=[Var(k, loop_hafnian_batch_gamma.py:60), Var(N_det, loop_hafnian_batch_gamma.py:66)])
DEBUG 2022-02-14 16:46:35,396 on stmt: $570binary_subscr.9 = getitem(value=Hnew, index=$566build_tuple.6, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:46:35,396 on stmt: $576binary_multiply.12 = n_det_binom_prod * plus_minus
DEBUG 2022-02-14 16:46:35,396 on stmt: $582binary_subscr.15 = getitem(value=f_odd, index=N, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:46:35,396 on stmt: $584binary_multiply.16 = $576binary_multiply.12 * $582binary_subscr.15
DEBUG 2022-02-14 16:46:35,396 on stmt: $586inplace_add.17 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$570binary_subscr.9, rhs=$584binary_multiply.16, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:46:35,396 on stmt: Hnew[$566build_tuple.6] = $586inplace_add.17
DEBUG 2022-02-14 16:46:35,397 on stmt: jump 592
DEBUG 2022-02-14 16:46:35,397 ==== SSA block rewrite pass on 592
DEBUG 2022-02-14 16:46:35,397 Running <numba.core.ssa._FixSSAVars object at 0x7f7203a39cd0>
DEBUG 2022-02-14 16:46:35,397 on stmt: jump 456
DEBUG 2022-02-14 16:46:35,397 ==== SSA block rewrite pass on 596
DEBUG 2022-02-14 16:46:35,397 Running <numba.core.ssa._FixSSAVars object at 0x7f7203a39cd0>
DEBUG 2022-02-14 16:46:35,397 on stmt: jump 356
DEBUG 2022-02-14 16:46:35,397 ==== SSA block rewrite pass on 600
DEBUG 2022-02-14 16:46:35,397 Running <numba.core.ssa._FixSSAVars object at 0x7f7203a39cd0>
DEBUG 2022-02-14 16:46:35,397 on stmt: $604inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=H_batch.2, rhs=Hnew, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:46:35,397 on stmt: H_batch.1 = $604inplace_add.3
DEBUG 2022-02-14 16:46:35,397 on stmt: jump 178
DEBUG 2022-02-14 16:46:35,397 ==== SSA block rewrite pass on 610
DEBUG 2022-02-14 16:46:35,397 Running <numba.core.ssa._FixSSAVars object at 0x7f7203a39cd0>
DEBUG 2022-02-14 16:46:35,397 on stmt: bool612 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:46:35,397 on stmt: $612pred = call bool612(glynn, func=bool612, args=(Var(glynn, loop_hafnian_batch_gamma.py:23),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:46:35,397 on stmt: branch $612pred, 616, 678
DEBUG 2022-02-14 16:46:35,397 ==== SSA block rewrite pass on 616
DEBUG 2022-02-14 16:46:35,397 Running <numba.core.ssa._FixSSAVars object at 0x7f7203a39cd0>
DEBUG 2022-02-14 16:46:35,397 on stmt: $616load_global.0 = global(range: <class 'range'>)
DEBUG 2022-02-14 16:46:35,397 on stmt: $620load_attr.2 = getattr(value=H_batch.2, attr=shape)
DEBUG 2022-02-14 16:46:35,397 on stmt: $const622.3 = const(int, 1)
DEBUG 2022-02-14 16:46:35,397 on stmt: $624binary_subscr.4 = static_getitem(value=$620load_attr.2, index=1, index_var=$const622.3, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:46:35,397 on stmt: $626call_function.5 = call $616load_global.0($624binary_subscr.4, func=$616load_global.0, args=[Var($624binary_subscr.4, loop_hafnian_batch_gamma.py:79)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:46:35,397 on stmt: $628get_iter.6 = getiter(value=$626call_function.5)
DEBUG 2022-02-14 16:46:35,397 on stmt: $phi630.0 = $628get_iter.6
DEBUG 2022-02-14 16:46:35,398 on stmt: jump 630
DEBUG 2022-02-14 16:46:35,398 ==== SSA block rewrite pass on 630
DEBUG 2022-02-14 16:46:35,398 Running <numba.core.ssa._FixSSAVars object at 0x7f7203a39cd0>
DEBUG 2022-02-14 16:46:35,398 on stmt: $630for_iter.1 = iternext(value=$phi630.0)
DEBUG 2022-02-14 16:46:35,398 on stmt: $630for_iter.2 = pair_first(value=$630for_iter.1)
DEBUG 2022-02-14 16:46:35,398 on stmt: $630for_iter.3 = pair_second(value=$630for_iter.1)
DEBUG 2022-02-14 16:46:35,398 on stmt: $phi632.1 = $630for_iter.2
DEBUG 2022-02-14 16:46:35,398 on stmt: branch $630for_iter.3, 632, 678
DEBUG 2022-02-14 16:46:35,398 ==== SSA block rewrite pass on 632
DEBUG 2022-02-14 16:46:35,398 Running <numba.core.ssa._FixSSAVars object at 0x7f7203a39cd0>
DEBUG 2022-02-14 16:46:35,398 on stmt: j.1 = $phi632.1
DEBUG 2022-02-14 16:46:35,398 on stmt: x = N_fixed + j.1
DEBUG 2022-02-14 16:46:35,398 on stmt: $const644.6 = const(NoneType, None)
DEBUG 2022-02-14 16:46:35,398 on stmt: $const646.7 = const(NoneType, None)
DEBUG 2022-02-14 16:46:35,398 on stmt: $648build_slice.8 = global(slice: <class 'slice'>)
DEBUG 2022-02-14 16:46:35,398 on stmt: $648build_slice.9 = call $648build_slice.8($const644.6, $const646.7, func=$648build_slice.8, args=(Var($const644.6, loop_hafnian_batch_gamma.py:81), Var($const646.7, loop_hafnian_batch_gamma.py:81)), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:46:35,398 on stmt: $652build_tuple.11 = build_tuple(items=[Var($648build_slice.9, loop_hafnian_batch_gamma.py:81), Var(j.1, loop_hafnian_batch_gamma.py:79)])
DEBUG 2022-02-14 16:46:35,398 on stmt: $656binary_subscr.14 = getitem(value=H_batch.2, index=$652build_tuple.11, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:46:35,398 on stmt: $const658.15 = const(float, 0.5)
DEBUG 2022-02-14 16:46:35,398 on stmt: $const662.17 = const(int, 2)
DEBUG 2022-02-14 16:46:35,398 on stmt: $664binary_floor_divide.18 = x // $const662.17
DEBUG 2022-02-14 16:46:35,398 on stmt: $666binary_power.19 = $const658.15 ** $664binary_floor_divide.18
DEBUG 2022-02-14 16:46:35,398 on stmt: $668inplace_multiply.20 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=$656binary_subscr.14, rhs=$666binary_power.19, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:46:35,398 on stmt: H_batch.2[$652build_tuple.11] = $668inplace_multiply.20
DEBUG 2022-02-14 16:46:35,398 on stmt: jump 630
DEBUG 2022-02-14 16:46:35,399 ==== SSA block rewrite pass on 678
DEBUG 2022-02-14 16:46:35,399 Running <numba.core.ssa._FixSSAVars object at 0x7f7203a39cd0>
DEBUG 2022-02-14 16:46:35,399 on stmt: $680return_value.1 = cast(value=H_batch.2)
DEBUG 2022-02-14 16:46:35,399 on stmt: return $680return_value.1
DEBUG 2022-02-14 16:46:35,413 bytecode dump:
>          0	NOP(arg=None, lineno=3)
           2	LOAD_GLOBAL(arg=0, lineno=3)
           4	LOAD_FAST(arg=0, lineno=3)
           6	CALL_FUNCTION(arg=1, lineno=3)
           8	RETURN_VALUE(arg=None, lineno=3)
DEBUG 2022-02-14 16:46:35,413 pending: deque([State(pc_initial=0 nstack_initial=0)])
DEBUG 2022-02-14 16:46:35,413 stack: []
DEBUG 2022-02-14 16:46:35,414 dispatch pc=0, inst=NOP(arg=None, lineno=3)
DEBUG 2022-02-14 16:46:35,414 stack []
DEBUG 2022-02-14 16:46:35,414 dispatch pc=2, inst=LOAD_GLOBAL(arg=0, lineno=3)
DEBUG 2022-02-14 16:46:35,414 stack []
DEBUG 2022-02-14 16:46:35,414 dispatch pc=4, inst=LOAD_FAST(arg=0, lineno=3)
DEBUG 2022-02-14 16:46:35,414 stack ['$2load_global.0']
DEBUG 2022-02-14 16:46:35,414 dispatch pc=6, inst=CALL_FUNCTION(arg=1, lineno=3)
DEBUG 2022-02-14 16:46:35,414 stack ['$2load_global.0', '$tmp04.1']
DEBUG 2022-02-14 16:46:35,414 dispatch pc=8, inst=RETURN_VALUE(arg=None, lineno=3)
DEBUG 2022-02-14 16:46:35,414 stack ['$6call_function.2']
DEBUG 2022-02-14 16:46:35,414 end state. edges=[]
DEBUG 2022-02-14 16:46:35,414 -------------------------Prune PHIs-------------------------
DEBUG 2022-02-14 16:46:35,414 Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
DEBUG 2022-02-14 16:46:35,414 defmap: {}
DEBUG 2022-02-14 16:46:35,414 phismap: defaultdict(<class 'set'>, {})
DEBUG 2022-02-14 16:46:35,414 changing phismap: defaultdict(<class 'set'>, {})
DEBUG 2022-02-14 16:46:35,414 keep phismap: {}
DEBUG 2022-02-14 16:46:35,414 new_out: defaultdict(<class 'dict'>, {})
DEBUG 2022-02-14 16:46:35,414 ----------------------DONE Prune PHIs-----------------------
DEBUG 2022-02-14 16:46:35,414 block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$2load_global.0'}), (4, {'res': '$tmp04.1'}), (6, {'func': '$2load_global.0', 'args': ['$tmp04.1'], 'res': '$6call_function.2'}), (8, {'retval': '$6call_function.2', 'castval': '$8return_value.3'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG 2022-02-14 16:46:35,415 label 0:
    tmp0 = arg(0, name=tmp0)                 ['tmp0']
    $2load_global.0 = global(intrin: <intrinsic stub>) ['$2load_global.0']
    $6call_function.2 = call $2load_global.0(tmp0, func=$2load_global.0, args=[Var(tmp0, <string>:3)], kws=(), vararg=None, target=None) ['$2load_global.0', '$6call_function.2', 'tmp0']
    $8return_value.3 = cast(value=$6call_function.2) ['$6call_function.2', '$8return_value.3']
    return $8return_value.3                  ['$8return_value.3']

DEBUG 2022-02-14 16:46:35,416 ==== SSA block analysis pass on 0
DEBUG 2022-02-14 16:46:35,416 Running <numba.core.ssa._GatherDefsHandler object at 0x7f72039bc640>
DEBUG 2022-02-14 16:46:35,416 on stmt: tmp0 = arg(0, name=tmp0)
DEBUG 2022-02-14 16:46:35,416 on stmt: $2load_global.0 = global(intrin: <intrinsic stub>)
DEBUG 2022-02-14 16:46:35,416 on stmt: $6call_function.2 = call $2load_global.0(tmp0, func=$2load_global.0, args=[Var(tmp0, <string>:3)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:46:35,416 on stmt: $8return_value.3 = cast(value=$6call_function.2)
DEBUG 2022-02-14 16:46:35,416 on stmt: return $8return_value.3
DEBUG 2022-02-14 16:46:35,416 defs defaultdict(<class 'list'>,
            {'$2load_global.0': [<numba.core.ir.Assign object at 0x7f72039bcb20>],
             '$6call_function.2': [<numba.core.ir.Assign object at 0x7f72039bce20>],
             '$8return_value.3': [<numba.core.ir.Assign object at 0x7f72039bcf40>],
             'tmp0': [<numba.core.ir.Assign object at 0x7f72039bc040>]})
DEBUG 2022-02-14 16:46:35,416 SSA violators set()
DEBUG 2022-02-14 16:46:35,424 bytecode dump:
>          0	NOP(arg=None, lineno=3543)
           2	LOAD_FAST(arg=0, lineno=3543)
           4	LOAD_METHOD(arg=0, lineno=3543)
           6	LOAD_FAST(arg=1, lineno=3543)
           8	LOAD_FAST(arg=2, lineno=3543)
          10	CALL_METHOD(arg=2, lineno=3543)
          12	RETURN_VALUE(arg=None, lineno=3543)
DEBUG 2022-02-14 16:46:35,424 pending: deque([State(pc_initial=0 nstack_initial=0)])
DEBUG 2022-02-14 16:46:35,424 stack: []
DEBUG 2022-02-14 16:46:35,424 dispatch pc=0, inst=NOP(arg=None, lineno=3543)
DEBUG 2022-02-14 16:46:35,424 stack []
DEBUG 2022-02-14 16:46:35,424 dispatch pc=2, inst=LOAD_FAST(arg=0, lineno=3543)
DEBUG 2022-02-14 16:46:35,424 stack []
DEBUG 2022-02-14 16:46:35,424 dispatch pc=4, inst=LOAD_METHOD(arg=0, lineno=3543)
DEBUG 2022-02-14 16:46:35,424 stack ['$arrtype2.0']
DEBUG 2022-02-14 16:46:35,424 dispatch pc=6, inst=LOAD_FAST(arg=1, lineno=3543)
DEBUG 2022-02-14 16:46:35,424 stack ['$4load_method.1']
DEBUG 2022-02-14 16:46:35,424 dispatch pc=8, inst=LOAD_FAST(arg=2, lineno=3543)
DEBUG 2022-02-14 16:46:35,424 stack ['$4load_method.1', '$size6.2']
DEBUG 2022-02-14 16:46:35,424 dispatch pc=10, inst=CALL_METHOD(arg=2, lineno=3543)
DEBUG 2022-02-14 16:46:35,424 stack ['$4load_method.1', '$size6.2', '$align8.3']
DEBUG 2022-02-14 16:46:35,424 dispatch pc=12, inst=RETURN_VALUE(arg=None, lineno=3543)
DEBUG 2022-02-14 16:46:35,424 stack ['$10call_method.4']
DEBUG 2022-02-14 16:46:35,424 end state. edges=[]
DEBUG 2022-02-14 16:46:35,424 -------------------------Prune PHIs-------------------------
DEBUG 2022-02-14 16:46:35,425 Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
DEBUG 2022-02-14 16:46:35,425 defmap: {}
DEBUG 2022-02-14 16:46:35,425 phismap: defaultdict(<class 'set'>, {})
DEBUG 2022-02-14 16:46:35,425 changing phismap: defaultdict(<class 'set'>, {})
DEBUG 2022-02-14 16:46:35,425 keep phismap: {}
DEBUG 2022-02-14 16:46:35,425 new_out: defaultdict(<class 'dict'>, {})
DEBUG 2022-02-14 16:46:35,425 ----------------------DONE Prune PHIs-----------------------
DEBUG 2022-02-14 16:46:35,425 block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$arrtype2.0'}), (4, {'item': '$arrtype2.0', 'res': '$4load_method.1'}), (6, {'res': '$size6.2'}), (8, {'res': '$align8.3'}), (10, {'func': '$4load_method.1', 'args': ['$size6.2', '$align8.3'], 'res': '$10call_method.4'}), (12, {'retval': '$10call_method.4', 'castval': '$12return_value.5'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG 2022-02-14 16:46:35,425 label 0:
    arrtype = arg(0, name=arrtype)           ['arrtype']
    size = arg(1, name=size)                 ['size']
    align = arg(2, name=align)               ['align']
    $4load_method.1 = getattr(value=arrtype, attr=_allocate) ['$4load_method.1', 'arrtype']
    $10call_method.4 = call $4load_method.1(size, align, func=$4load_method.1, args=[Var(size, arrayobj.py:3543), Var(align, arrayobj.py:3543)], kws=(), vararg=None, target=None) ['$10call_method.4', '$4load_method.1', 'align', 'size']
    $12return_value.5 = cast(value=$10call_method.4) ['$10call_method.4', '$12return_value.5']
    return $12return_value.5                 ['$12return_value.5']

DEBUG 2022-02-14 16:46:35,427 ==== SSA block analysis pass on 0
DEBUG 2022-02-14 16:46:35,427 Running <numba.core.ssa._GatherDefsHandler object at 0x7f7203989580>
DEBUG 2022-02-14 16:46:35,427 on stmt: arrtype = arg(0, name=arrtype)
DEBUG 2022-02-14 16:46:35,427 on stmt: size = arg(1, name=size)
DEBUG 2022-02-14 16:46:35,427 on stmt: align = arg(2, name=align)
DEBUG 2022-02-14 16:46:35,427 on stmt: $4load_method.1 = getattr(value=arrtype, attr=_allocate)
DEBUG 2022-02-14 16:46:35,427 on stmt: $10call_method.4 = call $4load_method.1(size, align, func=$4load_method.1, args=[Var(size, arrayobj.py:3543), Var(align, arrayobj.py:3543)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:46:35,428 on stmt: $12return_value.5 = cast(value=$10call_method.4)
DEBUG 2022-02-14 16:46:35,428 on stmt: return $12return_value.5
DEBUG 2022-02-14 16:46:35,428 defs defaultdict(<class 'list'>,
            {'$10call_method.4': [<numba.core.ir.Assign object at 0x7f720390bfd0>],
             '$12return_value.5': [<numba.core.ir.Assign object at 0x7f7203989100>],
             '$4load_method.1': [<numba.core.ir.Assign object at 0x7f720390bb80>],
             'align': [<numba.core.ir.Assign object at 0x7f720390b8e0>],
             'arrtype': [<numba.core.ir.Assign object at 0x7f720390b190>],
             'size': [<numba.core.ir.Assign object at 0x7f720390b070>]})
DEBUG 2022-02-14 16:46:35,428 SSA violators set()
DEBUG 2022-02-14 16:46:35,430 bytecode dump:
>          0	NOP(arg=None, lineno=3536)
           2	LOAD_GLOBAL(arg=0, lineno=3536)
           4	LOAD_FAST(arg=1, lineno=3536)
           6	LOAD_FAST(arg=2, lineno=3536)
           8	CALL_FUNCTION(arg=2, lineno=3536)
          10	RETURN_VALUE(arg=None, lineno=3536)
DEBUG 2022-02-14 16:46:35,430 pending: deque([State(pc_initial=0 nstack_initial=0)])
DEBUG 2022-02-14 16:46:35,430 stack: []
DEBUG 2022-02-14 16:46:35,430 dispatch pc=0, inst=NOP(arg=None, lineno=3536)
DEBUG 2022-02-14 16:46:35,430 stack []
DEBUG 2022-02-14 16:46:35,430 dispatch pc=2, inst=LOAD_GLOBAL(arg=0, lineno=3536)
DEBUG 2022-02-14 16:46:35,430 stack []
DEBUG 2022-02-14 16:46:35,430 dispatch pc=4, inst=LOAD_FAST(arg=1, lineno=3536)
DEBUG 2022-02-14 16:46:35,430 stack ['$2load_global.0']
DEBUG 2022-02-14 16:46:35,431 dispatch pc=6, inst=LOAD_FAST(arg=2, lineno=3536)
DEBUG 2022-02-14 16:46:35,431 stack ['$2load_global.0', '$allocsize4.1']
DEBUG 2022-02-14 16:46:35,431 dispatch pc=8, inst=CALL_FUNCTION(arg=2, lineno=3536)
DEBUG 2022-02-14 16:46:35,431 stack ['$2load_global.0', '$allocsize4.1', '$align6.2']
DEBUG 2022-02-14 16:46:35,431 dispatch pc=10, inst=RETURN_VALUE(arg=None, lineno=3536)
DEBUG 2022-02-14 16:46:35,431 stack ['$8call_function.3']
DEBUG 2022-02-14 16:46:35,431 end state. edges=[]
DEBUG 2022-02-14 16:46:35,431 -------------------------Prune PHIs-------------------------
DEBUG 2022-02-14 16:46:35,431 Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
DEBUG 2022-02-14 16:46:35,431 defmap: {}
DEBUG 2022-02-14 16:46:35,431 phismap: defaultdict(<class 'set'>, {})
DEBUG 2022-02-14 16:46:35,431 changing phismap: defaultdict(<class 'set'>, {})
DEBUG 2022-02-14 16:46:35,431 keep phismap: {}
DEBUG 2022-02-14 16:46:35,431 new_out: defaultdict(<class 'dict'>, {})
DEBUG 2022-02-14 16:46:35,431 ----------------------DONE Prune PHIs-----------------------
DEBUG 2022-02-14 16:46:35,431 block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$2load_global.0'}), (4, {'res': '$allocsize4.1'}), (6, {'res': '$align6.2'}), (8, {'func': '$2load_global.0', 'args': ['$allocsize4.1', '$align6.2'], 'res': '$8call_function.3'}), (10, {'retval': '$8call_function.3', 'castval': '$10return_value.4'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG 2022-02-14 16:46:35,432 label 0:
    cls = arg(0, name=cls)                   ['cls']
    allocsize = arg(1, name=allocsize)       ['allocsize']
    align = arg(2, name=align)               ['align']
    $2load_global.0 = global(intrin_alloc: <intrinsic intrin_alloc>) ['$2load_global.0']
    $8call_function.3 = call $2load_global.0(allocsize, align, func=$2load_global.0, args=[Var(allocsize, arrayobj.py:3536), Var(align, arrayobj.py:3536)], kws=(), vararg=None, target=None) ['$2load_global.0', '$8call_function.3', 'align', 'allocsize']
    $10return_value.4 = cast(value=$8call_function.3) ['$10return_value.4', '$8call_function.3']
    return $10return_value.4                 ['$10return_value.4']

DEBUG 2022-02-14 16:46:35,433 ==== SSA block analysis pass on 0
DEBUG 2022-02-14 16:46:35,433 Running <numba.core.ssa._GatherDefsHandler object at 0x7f7203900dc0>
DEBUG 2022-02-14 16:46:35,433 on stmt: cls = arg(0, name=cls)
DEBUG 2022-02-14 16:46:35,433 on stmt: allocsize = arg(1, name=allocsize)
DEBUG 2022-02-14 16:46:35,433 on stmt: align = arg(2, name=align)
DEBUG 2022-02-14 16:46:35,433 on stmt: $2load_global.0 = global(intrin_alloc: <intrinsic intrin_alloc>)
DEBUG 2022-02-14 16:46:35,433 on stmt: $8call_function.3 = call $2load_global.0(allocsize, align, func=$2load_global.0, args=[Var(allocsize, arrayobj.py:3536), Var(align, arrayobj.py:3536)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:46:35,433 on stmt: $10return_value.4 = cast(value=$8call_function.3)
DEBUG 2022-02-14 16:46:35,433 on stmt: return $10return_value.4
DEBUG 2022-02-14 16:46:35,433 defs defaultdict(<class 'list'>,
            {'$10return_value.4': [<numba.core.ir.Assign object at 0x7f720390aa60>],
             '$2load_global.0': [<numba.core.ir.Assign object at 0x7f720390a520>],
             '$8call_function.3': [<numba.core.ir.Assign object at 0x7f720390a940>],
             'align': [<numba.core.ir.Assign object at 0x7f720390a3a0>],
             'allocsize': [<numba.core.ir.Assign object at 0x7f720390b760>],
             'cls': [<numba.core.ir.Assign object at 0x7f720390b550>]})
DEBUG 2022-02-14 16:46:35,433 SSA violators set()
DEBUG 2022-02-14 16:46:35,483 bytecode dump:
>          0	NOP(arg=None, lineno=3)
           2	LOAD_GLOBAL(arg=0, lineno=3)
           4	LOAD_FAST(arg=0, lineno=3)
           6	CALL_FUNCTION(arg=1, lineno=3)
           8	RETURN_VALUE(arg=None, lineno=3)
DEBUG 2022-02-14 16:46:35,484 pending: deque([State(pc_initial=0 nstack_initial=0)])
DEBUG 2022-02-14 16:46:35,484 stack: []
DEBUG 2022-02-14 16:46:35,484 dispatch pc=0, inst=NOP(arg=None, lineno=3)
DEBUG 2022-02-14 16:46:35,484 stack []
DEBUG 2022-02-14 16:46:35,484 dispatch pc=2, inst=LOAD_GLOBAL(arg=0, lineno=3)
DEBUG 2022-02-14 16:46:35,484 stack []
DEBUG 2022-02-14 16:46:35,484 dispatch pc=4, inst=LOAD_FAST(arg=0, lineno=3)
DEBUG 2022-02-14 16:46:35,484 stack ['$2load_global.0']
DEBUG 2022-02-14 16:46:35,484 dispatch pc=6, inst=CALL_FUNCTION(arg=1, lineno=3)
DEBUG 2022-02-14 16:46:35,484 stack ['$2load_global.0', '$tmp04.1']
DEBUG 2022-02-14 16:46:35,484 dispatch pc=8, inst=RETURN_VALUE(arg=None, lineno=3)
DEBUG 2022-02-14 16:46:35,484 stack ['$6call_function.2']
DEBUG 2022-02-14 16:46:35,484 end state. edges=[]
DEBUG 2022-02-14 16:46:35,484 -------------------------Prune PHIs-------------------------
DEBUG 2022-02-14 16:46:35,484 Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
DEBUG 2022-02-14 16:46:35,484 defmap: {}
DEBUG 2022-02-14 16:46:35,484 phismap: defaultdict(<class 'set'>, {})
DEBUG 2022-02-14 16:46:35,484 changing phismap: defaultdict(<class 'set'>, {})
DEBUG 2022-02-14 16:46:35,484 keep phismap: {}
DEBUG 2022-02-14 16:46:35,484 new_out: defaultdict(<class 'dict'>, {})
DEBUG 2022-02-14 16:46:35,484 ----------------------DONE Prune PHIs-----------------------
DEBUG 2022-02-14 16:46:35,484 block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$2load_global.0'}), (4, {'res': '$tmp04.1'}), (6, {'func': '$2load_global.0', 'args': ['$tmp04.1'], 'res': '$6call_function.2'}), (8, {'retval': '$6call_function.2', 'castval': '$8return_value.3'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG 2022-02-14 16:46:35,485 label 0:
    tmp0 = arg(0, name=tmp0)                 ['tmp0']
    $2load_global.0 = global(intrin: <intrinsic stub>) ['$2load_global.0']
    $6call_function.2 = call $2load_global.0(tmp0, func=$2load_global.0, args=[Var(tmp0, <string>:3)], kws=(), vararg=None, target=None) ['$2load_global.0', '$6call_function.2', 'tmp0']
    $8return_value.3 = cast(value=$6call_function.2) ['$6call_function.2', '$8return_value.3']
    return $8return_value.3                  ['$8return_value.3']

DEBUG 2022-02-14 16:46:35,486 ==== SSA block analysis pass on 0
DEBUG 2022-02-14 16:46:35,486 Running <numba.core.ssa._GatherDefsHandler object at 0x7f72038107c0>
DEBUG 2022-02-14 16:46:35,486 on stmt: tmp0 = arg(0, name=tmp0)
DEBUG 2022-02-14 16:46:35,486 on stmt: $2load_global.0 = global(intrin: <intrinsic stub>)
DEBUG 2022-02-14 16:46:35,486 on stmt: $6call_function.2 = call $2load_global.0(tmp0, func=$2load_global.0, args=[Var(tmp0, <string>:3)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:46:35,486 on stmt: $8return_value.3 = cast(value=$6call_function.2)
DEBUG 2022-02-14 16:46:35,486 on stmt: return $8return_value.3
DEBUG 2022-02-14 16:46:35,486 defs defaultdict(<class 'list'>,
            {'$2load_global.0': [<numba.core.ir.Assign object at 0x7f7203810730>],
             '$6call_function.2': [<numba.core.ir.Assign object at 0x7f7203818370>],
             '$8return_value.3': [<numba.core.ir.Assign object at 0x7f7203818490>],
             'tmp0': [<numba.core.ir.Assign object at 0x7f7203810430>]})
DEBUG 2022-02-14 16:46:35,486 SSA violators set()
DEBUG 2022-02-14 16:46:35,577 bytecode dump:
>          0	NOP(arg=None, lineno=3)
           2	LOAD_GLOBAL(arg=0, lineno=3)
           4	LOAD_FAST(arg=0, lineno=3)
           6	LOAD_FAST(arg=1, lineno=3)
           8	CALL_FUNCTION(arg=2, lineno=3)
          10	RETURN_VALUE(arg=None, lineno=3)
DEBUG 2022-02-14 16:46:35,577 pending: deque([State(pc_initial=0 nstack_initial=0)])
DEBUG 2022-02-14 16:46:35,577 stack: []
DEBUG 2022-02-14 16:46:35,578 dispatch pc=0, inst=NOP(arg=None, lineno=3)
DEBUG 2022-02-14 16:46:35,578 stack []
DEBUG 2022-02-14 16:46:35,578 dispatch pc=2, inst=LOAD_GLOBAL(arg=0, lineno=3)
DEBUG 2022-02-14 16:46:35,578 stack []
DEBUG 2022-02-14 16:46:35,578 dispatch pc=4, inst=LOAD_FAST(arg=0, lineno=3)
DEBUG 2022-02-14 16:46:35,578 stack ['$2load_global.0']
DEBUG 2022-02-14 16:46:35,578 dispatch pc=6, inst=LOAD_FAST(arg=1, lineno=3)
DEBUG 2022-02-14 16:46:35,578 stack ['$2load_global.0', '$tmp04.1']
DEBUG 2022-02-14 16:46:35,578 dispatch pc=8, inst=CALL_FUNCTION(arg=2, lineno=3)
DEBUG 2022-02-14 16:46:35,578 stack ['$2load_global.0', '$tmp04.1', '$dtype6.2']
DEBUG 2022-02-14 16:46:35,578 dispatch pc=10, inst=RETURN_VALUE(arg=None, lineno=3)
DEBUG 2022-02-14 16:46:35,578 stack ['$8call_function.3']
DEBUG 2022-02-14 16:46:35,578 end state. edges=[]
DEBUG 2022-02-14 16:46:35,578 -------------------------Prune PHIs-------------------------
DEBUG 2022-02-14 16:46:35,578 Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
DEBUG 2022-02-14 16:46:35,578 defmap: {}
DEBUG 2022-02-14 16:46:35,578 phismap: defaultdict(<class 'set'>, {})
DEBUG 2022-02-14 16:46:35,579 changing phismap: defaultdict(<class 'set'>, {})
DEBUG 2022-02-14 16:46:35,579 keep phismap: {}
DEBUG 2022-02-14 16:46:35,579 new_out: defaultdict(<class 'dict'>, {})
DEBUG 2022-02-14 16:46:35,579 ----------------------DONE Prune PHIs-----------------------
DEBUG 2022-02-14 16:46:35,579 block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$2load_global.0'}), (4, {'res': '$tmp04.1'}), (6, {'res': '$dtype6.2'}), (8, {'func': '$2load_global.0', 'args': ['$tmp04.1', '$dtype6.2'], 'res': '$8call_function.3'}), (10, {'retval': '$8call_function.3', 'castval': '$10return_value.4'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG 2022-02-14 16:46:35,581 label 0:
    tmp0 = arg(0, name=tmp0)                 ['tmp0']
    dtype = arg(1, name=dtype)               ['dtype']
    $2load_global.0 = global(intrin: <intrinsic stub>) ['$2load_global.0']
    $8call_function.3 = call $2load_global.0(tmp0, dtype, func=$2load_global.0, args=[Var(tmp0, <string>:3), Var(dtype, <string>:3)], kws=(), vararg=None, target=None) ['$2load_global.0', '$8call_function.3', 'dtype', 'tmp0']
    $10return_value.4 = cast(value=$8call_function.3) ['$10return_value.4', '$8call_function.3']
    return $10return_value.4                 ['$10return_value.4']

DEBUG 2022-02-14 16:46:35,583 ==== SSA block analysis pass on 0
DEBUG 2022-02-14 16:46:35,583 Running <numba.core.ssa._GatherDefsHandler object at 0x7f720378a6a0>
DEBUG 2022-02-14 16:46:35,583 on stmt: tmp0 = arg(0, name=tmp0)
DEBUG 2022-02-14 16:46:35,583 on stmt: dtype = arg(1, name=dtype)
DEBUG 2022-02-14 16:46:35,583 on stmt: $2load_global.0 = global(intrin: <intrinsic stub>)
DEBUG 2022-02-14 16:46:35,583 on stmt: $8call_function.3 = call $2load_global.0(tmp0, dtype, func=$2load_global.0, args=[Var(tmp0, <string>:3), Var(dtype, <string>:3)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:46:35,583 on stmt: $10return_value.4 = cast(value=$8call_function.3)
DEBUG 2022-02-14 16:46:35,583 on stmt: return $10return_value.4
DEBUG 2022-02-14 16:46:35,583 defs defaultdict(<class 'list'>,
            {'$10return_value.4': [<numba.core.ir.Assign object at 0x7f720378af70>],
             '$2load_global.0': [<numba.core.ir.Assign object at 0x7f720378e490>],
             '$8call_function.3': [<numba.core.ir.Assign object at 0x7f720378e8b0>],
             'dtype': [<numba.core.ir.Assign object at 0x7f720378a430>],
             'tmp0': [<numba.core.ir.Assign object at 0x7f720378a250>]})
DEBUG 2022-02-14 16:46:35,583 SSA violators set()
DEBUG 2022-02-14 16:46:35,664 bytecode dump:
>          0	NOP(arg=None, lineno=159)
           2	LOAD_FAST(arg=0, lineno=159)
           4	LOAD_METHOD(arg=0, lineno=159)
           6	CALL_METHOD(arg=0, lineno=159)
           8	STORE_FAST(arg=7, lineno=159)
          10	LOAD_CONST(arg=1, lineno=161)
          12	STORE_FAST(arg=8, lineno=161)
          14	LOAD_GLOBAL(arg=1, lineno=162)
          16	LOAD_ATTR(arg=2, lineno=162)
          18	LOAD_CONST(arg=2, lineno=162)
          20	LOAD_FAST(arg=4, lineno=162)
          22	LOAD_CONST(arg=3, lineno=162)
          24	BINARY_ADD(arg=None, lineno=162)
          26	BUILD_TUPLE(arg=2, lineno=162)
          28	LOAD_GLOBAL(arg=1, lineno=162)
          30	LOAD_ATTR(arg=3, lineno=162)
          32	LOAD_CONST(arg=4, lineno=162)
          34	CALL_FUNCTION_KW(arg=2, lineno=162)
          36	STORE_FAST(arg=9, lineno=162)
          38	LOAD_CONST(arg=3, lineno=163)
          40	LOAD_FAST(arg=9, lineno=163)
          42	LOAD_CONST(arg=5, lineno=163)
          44	STORE_SUBSCR(arg=None, lineno=163)
          46	LOAD_GLOBAL(arg=4, lineno=164)
          48	LOAD_CONST(arg=3, lineno=164)
          50	LOAD_FAST(arg=4, lineno=164)
          52	LOAD_CONST(arg=3, lineno=164)
          54	BINARY_ADD(arg=None, lineno=164)
          56	CALL_FUNCTION(arg=2, lineno=164)
          58	GET_ITER(arg=None, lineno=164)
>         60	FOR_ITER(arg=240, lineno=164)
          62	STORE_FAST(arg=10, lineno=164)
          64	LOAD_FAST(arg=10, lineno=165)
          66	LOAD_CONST(arg=3, lineno=165)
          68	COMPARE_OP(arg=2, lineno=165)
          70	POP_JUMP_IF_FALSE(arg=78, lineno=165)
          72	LOAD_FAST(arg=5, lineno=166)
          74	STORE_FAST(arg=11, lineno=166)
          76	JUMP_FORWARD(arg=62, lineno=166)
>         78	LOAD_FAST(arg=10, lineno=167)
          80	LOAD_CONST(arg=2, lineno=167)
          82	BINARY_MODULO(arg=None, lineno=167)
          84	LOAD_CONST(arg=1, lineno=167)
          86	COMPARE_OP(arg=2, lineno=167)
          88	POP_JUMP_IF_FALSE(arg=124, lineno=167)
          90	LOAD_FAST(arg=7, lineno=168)
          92	LOAD_METHOD(arg=5, lineno=168)
          94	CALL_METHOD(arg=0, lineno=168)
          96	LOAD_FAST(arg=10, lineno=168)
          98	BINARY_TRUE_DIVIDE(arg=None, lineno=168)
         100	LOAD_FAST(arg=2, lineno=168)
         102	LOAD_FAST(arg=3, lineno=168)
         104	BINARY_MATRIX_MULTIPLY(arg=None, lineno=168)
         106	LOAD_CONST(arg=2, lineno=168)
         108	BINARY_TRUE_DIVIDE(arg=None, lineno=168)
         110	BINARY_ADD(arg=None, lineno=168)
         112	STORE_FAST(arg=11, lineno=168)
         114	LOAD_FAST(arg=7, lineno=169)
         116	LOAD_FAST(arg=0, lineno=169)
         118	INPLACE_MULTIPLY(arg=None, lineno=169)
         120	STORE_FAST(arg=7, lineno=169)
         122	JUMP_FORWARD(arg=16, lineno=169)
>        124	LOAD_FAST(arg=6, lineno=171)
         126	LOAD_FAST(arg=3, lineno=171)
         128	BINARY_MATRIX_MULTIPLY(arg=None, lineno=171)
         130	STORE_FAST(arg=11, lineno=171)
         132	LOAD_FAST(arg=1, lineno=172)
         134	LOAD_FAST(arg=3, lineno=172)
         136	BINARY_MATRIX_MULTIPLY(arg=None, lineno=172)
         138	STORE_FAST(arg=3, lineno=172)
>        140	LOAD_CONST(arg=3, lineno=174)
         142	STORE_FAST(arg=12, lineno=174)
         144	LOAD_CONST(arg=3, lineno=175)
         146	LOAD_FAST(arg=8, lineno=175)
         148	BINARY_SUBTRACT(arg=None, lineno=175)
         150	STORE_FAST(arg=8, lineno=175)
         152	LOAD_FAST(arg=9, lineno=176)
         154	LOAD_CONST(arg=3, lineno=176)
         156	LOAD_FAST(arg=8, lineno=176)
         158	BINARY_SUBTRACT(arg=None, lineno=176)
         160	LOAD_CONST(arg=0, lineno=176)
         162	LOAD_CONST(arg=0, lineno=176)
         164	BUILD_SLICE(arg=2, lineno=176)
         166	BUILD_TUPLE(arg=2, lineno=176)
         168	BINARY_SUBSCR(arg=None, lineno=176)
         170	LOAD_FAST(arg=9, lineno=176)
         172	LOAD_FAST(arg=8, lineno=176)
         174	LOAD_CONST(arg=0, lineno=176)
         176	LOAD_CONST(arg=0, lineno=176)
         178	BUILD_SLICE(arg=2, lineno=176)
         180	BUILD_TUPLE(arg=2, lineno=176)
         182	STORE_SUBSCR(arg=None, lineno=176)
         184	LOAD_GLOBAL(arg=4, lineno=177)
         186	LOAD_CONST(arg=3, lineno=177)
         188	LOAD_FAST(arg=4, lineno=177)
         190	LOAD_FAST(arg=10, lineno=177)
         192	BINARY_FLOOR_DIVIDE(arg=None, lineno=177)
         194	LOAD_CONST(arg=3, lineno=177)
         196	BINARY_ADD(arg=None, lineno=177)
         198	CALL_FUNCTION(arg=2, lineno=177)
         200	GET_ITER(arg=None, lineno=177)
>        202	FOR_ITER(arg=96, lineno=177)
         204	STORE_FAST(arg=13, lineno=177)
         206	LOAD_FAST(arg=12, lineno=178)
         208	LOAD_FAST(arg=11, lineno=178)
         210	LOAD_FAST(arg=13, lineno=178)
         212	BINARY_TRUE_DIVIDE(arg=None, lineno=178)
         214	INPLACE_MULTIPLY(arg=None, lineno=178)
         216	STORE_FAST(arg=12, lineno=178)
         218	LOAD_GLOBAL(arg=4, lineno=179)
         220	LOAD_FAST(arg=10, lineno=179)
         222	LOAD_FAST(arg=13, lineno=179)
         224	BINARY_MULTIPLY(arg=None, lineno=179)
         226	LOAD_CONST(arg=3, lineno=179)
         228	BINARY_ADD(arg=None, lineno=179)
         230	LOAD_FAST(arg=4, lineno=179)
         232	LOAD_CONST(arg=2, lineno=179)
         234	BINARY_ADD(arg=None, lineno=179)
         236	CALL_FUNCTION(arg=2, lineno=179)
         238	GET_ITER(arg=None, lineno=179)
>        240	FOR_ITER(arg=56, lineno=179)
         242	STORE_FAST(arg=14, lineno=179)
         244	LOAD_FAST(arg=9, lineno=180)
         246	LOAD_FAST(arg=8, lineno=180)
         248	LOAD_FAST(arg=14, lineno=180)
         250	LOAD_CONST(arg=3, lineno=180)
         252	BINARY_SUBTRACT(arg=None, lineno=180)
         254	BUILD_TUPLE(arg=2, lineno=180)
         256	DUP_TOP_TWO(arg=None, lineno=180)
         258	BINARY_SUBSCR(arg=None, lineno=180)
         260	LOAD_FAST(arg=9, lineno=180)
         262	LOAD_CONST(arg=3, lineno=180)
         264	LOAD_FAST(arg=8, lineno=180)
         266	BINARY_SUBTRACT(arg=None, lineno=180)
         268	LOAD_FAST(arg=14, lineno=180)
         270	LOAD_FAST(arg=10, lineno=180)
         272	LOAD_FAST(arg=13, lineno=180)
         274	BINARY_MULTIPLY(arg=None, lineno=180)
         276	BINARY_SUBTRACT(arg=None, lineno=180)
         278	LOAD_CONST(arg=3, lineno=180)
         280	BINARY_SUBTRACT(arg=None, lineno=180)
         282	BUILD_TUPLE(arg=2, lineno=180)
         284	BINARY_SUBSCR(arg=None, lineno=180)
         286	LOAD_FAST(arg=12, lineno=180)
         288	BINARY_MULTIPLY(arg=None, lineno=180)
         290	INPLACE_ADD(arg=None, lineno=180)
         292	ROT_THREE(arg=None, lineno=180)
         294	STORE_SUBSCR(arg=None, lineno=180)
         296	JUMP_ABSOLUTE(arg=240, lineno=180)
>        298	JUMP_ABSOLUTE(arg=202, lineno=180)
>        300	JUMP_ABSOLUTE(arg=60, lineno=180)
>        302	LOAD_FAST(arg=9, lineno=182)
         304	LOAD_FAST(arg=8, lineno=182)
         306	LOAD_CONST(arg=0, lineno=182)
         308	LOAD_CONST(arg=0, lineno=182)
         310	BUILD_SLICE(arg=2, lineno=182)
         312	BUILD_TUPLE(arg=2, lineno=182)
         314	BINARY_SUBSCR(arg=None, lineno=182)
         316	RETURN_VALUE(arg=None, lineno=182)
DEBUG 2022-02-14 16:46:35,664 pending: deque([State(pc_initial=0 nstack_initial=0)])
DEBUG 2022-02-14 16:46:35,664 stack: []
DEBUG 2022-02-14 16:46:35,664 dispatch pc=0, inst=NOP(arg=None, lineno=159)
DEBUG 2022-02-14 16:46:35,664 stack []
DEBUG 2022-02-14 16:46:35,664 dispatch pc=2, inst=LOAD_FAST(arg=0, lineno=159)
DEBUG 2022-02-14 16:46:35,664 stack []
DEBUG 2022-02-14 16:46:35,664 dispatch pc=4, inst=LOAD_METHOD(arg=0, lineno=159)
DEBUG 2022-02-14 16:46:35,664 stack ['$E2.0']
DEBUG 2022-02-14 16:46:35,665 dispatch pc=6, inst=CALL_METHOD(arg=0, lineno=159)
DEBUG 2022-02-14 16:46:35,665 stack ['$4load_method.1']
DEBUG 2022-02-14 16:46:35,665 dispatch pc=8, inst=STORE_FAST(arg=7, lineno=159)
DEBUG 2022-02-14 16:46:35,665 stack ['$6call_method.2']
DEBUG 2022-02-14 16:46:35,665 dispatch pc=10, inst=LOAD_CONST(arg=1, lineno=161)
DEBUG 2022-02-14 16:46:35,665 stack []
DEBUG 2022-02-14 16:46:35,665 dispatch pc=12, inst=STORE_FAST(arg=8, lineno=161)
DEBUG 2022-02-14 16:46:35,665 stack ['$const10.3']
DEBUG 2022-02-14 16:46:35,665 dispatch pc=14, inst=LOAD_GLOBAL(arg=1, lineno=162)
DEBUG 2022-02-14 16:46:35,665 stack []
DEBUG 2022-02-14 16:46:35,665 dispatch pc=16, inst=LOAD_ATTR(arg=2, lineno=162)
DEBUG 2022-02-14 16:46:35,665 stack ['$14load_global.4']
DEBUG 2022-02-14 16:46:35,665 dispatch pc=18, inst=LOAD_CONST(arg=2, lineno=162)
DEBUG 2022-02-14 16:46:35,665 stack ['$16load_attr.5']
DEBUG 2022-02-14 16:46:35,665 dispatch pc=20, inst=LOAD_FAST(arg=4, lineno=162)
DEBUG 2022-02-14 16:46:35,665 stack ['$16load_attr.5', '$const18.6']
DEBUG 2022-02-14 16:46:35,665 dispatch pc=22, inst=LOAD_CONST(arg=3, lineno=162)
DEBUG 2022-02-14 16:46:35,665 stack ['$16load_attr.5', '$const18.6', '$n20.7']
DEBUG 2022-02-14 16:46:35,665 dispatch pc=24, inst=BINARY_ADD(arg=None, lineno=162)
DEBUG 2022-02-14 16:46:35,665 stack ['$16load_attr.5', '$const18.6', '$n20.7', '$const22.8']
DEBUG 2022-02-14 16:46:35,665 dispatch pc=26, inst=BUILD_TUPLE(arg=2, lineno=162)
DEBUG 2022-02-14 16:46:35,665 stack ['$16load_attr.5', '$const18.6', '$24binary_add.9']
DEBUG 2022-02-14 16:46:35,665 dispatch pc=28, inst=LOAD_GLOBAL(arg=1, lineno=162)
DEBUG 2022-02-14 16:46:35,665 stack ['$16load_attr.5', '$26build_tuple.10']
DEBUG 2022-02-14 16:46:35,666 dispatch pc=30, inst=LOAD_ATTR(arg=3, lineno=162)
DEBUG 2022-02-14 16:46:35,666 stack ['$16load_attr.5', '$26build_tuple.10', '$28load_global.11']
DEBUG 2022-02-14 16:46:35,666 dispatch pc=32, inst=LOAD_CONST(arg=4, lineno=162)
DEBUG 2022-02-14 16:46:35,666 stack ['$16load_attr.5', '$26build_tuple.10', '$30load_attr.12']
DEBUG 2022-02-14 16:46:35,666 dispatch pc=34, inst=CALL_FUNCTION_KW(arg=2, lineno=162)
DEBUG 2022-02-14 16:46:35,666 stack ['$16load_attr.5', '$26build_tuple.10', '$30load_attr.12', '$const32.13']
DEBUG 2022-02-14 16:46:35,666 dispatch pc=36, inst=STORE_FAST(arg=9, lineno=162)
DEBUG 2022-02-14 16:46:35,666 stack ['$34call_function_kw.14']
DEBUG 2022-02-14 16:46:35,666 dispatch pc=38, inst=LOAD_CONST(arg=3, lineno=163)
DEBUG 2022-02-14 16:46:35,666 stack []
DEBUG 2022-02-14 16:46:35,666 dispatch pc=40, inst=LOAD_FAST(arg=9, lineno=163)
DEBUG 2022-02-14 16:46:35,666 stack ['$const38.15']
DEBUG 2022-02-14 16:46:35,666 dispatch pc=42, inst=LOAD_CONST(arg=5, lineno=163)
DEBUG 2022-02-14 16:46:35,666 stack ['$const38.15', '$comb40.16']
DEBUG 2022-02-14 16:46:35,666 dispatch pc=44, inst=STORE_SUBSCR(arg=None, lineno=163)
DEBUG 2022-02-14 16:46:35,666 stack ['$const38.15', '$comb40.16', '$const42.17']
DEBUG 2022-02-14 16:46:35,666 dispatch pc=46, inst=LOAD_GLOBAL(arg=4, lineno=164)
DEBUG 2022-02-14 16:46:35,666 stack []
DEBUG 2022-02-14 16:46:35,666 dispatch pc=48, inst=LOAD_CONST(arg=3, lineno=164)
DEBUG 2022-02-14 16:46:35,666 stack ['$46load_global.18']
DEBUG 2022-02-14 16:46:35,666 dispatch pc=50, inst=LOAD_FAST(arg=4, lineno=164)
DEBUG 2022-02-14 16:46:35,666 stack ['$46load_global.18', '$const48.19']
DEBUG 2022-02-14 16:46:35,666 dispatch pc=52, inst=LOAD_CONST(arg=3, lineno=164)
DEBUG 2022-02-14 16:46:35,666 stack ['$46load_global.18', '$const48.19', '$n50.20']
DEBUG 2022-02-14 16:46:35,666 dispatch pc=54, inst=BINARY_ADD(arg=None, lineno=164)
DEBUG 2022-02-14 16:46:35,666 stack ['$46load_global.18', '$const48.19', '$n50.20', '$const52.21']
DEBUG 2022-02-14 16:46:35,667 dispatch pc=56, inst=CALL_FUNCTION(arg=2, lineno=164)
DEBUG 2022-02-14 16:46:35,667 stack ['$46load_global.18', '$const48.19', '$54binary_add.22']
DEBUG 2022-02-14 16:46:35,667 dispatch pc=58, inst=GET_ITER(arg=None, lineno=164)
DEBUG 2022-02-14 16:46:35,667 stack ['$56call_function.23']
DEBUG 2022-02-14 16:46:35,667 end state. edges=[Edge(pc=60, stack=('$58get_iter.24',), blockstack=(), npush=0)]
DEBUG 2022-02-14 16:46:35,667 pending: deque([State(pc_initial=60 nstack_initial=1)])
DEBUG 2022-02-14 16:46:35,667 stack: ['$phi60.0']
DEBUG 2022-02-14 16:46:35,667 dispatch pc=60, inst=FOR_ITER(arg=240, lineno=164)
DEBUG 2022-02-14 16:46:35,667 stack ['$phi60.0']
DEBUG 2022-02-14 16:46:35,667 end state. edges=[Edge(pc=302, stack=(), blockstack=(), npush=0), Edge(pc=62, stack=('$phi60.0', '$60for_iter.2'), blockstack=(), npush=0)]
DEBUG 2022-02-14 16:46:35,667 pending: deque([State(pc_initial=302 nstack_initial=0), State(pc_initial=62 nstack_initial=2)])
DEBUG 2022-02-14 16:46:35,667 stack: []
DEBUG 2022-02-14 16:46:35,667 dispatch pc=302, inst=LOAD_FAST(arg=9, lineno=182)
DEBUG 2022-02-14 16:46:35,667 stack []
DEBUG 2022-02-14 16:46:35,667 dispatch pc=304, inst=LOAD_FAST(arg=8, lineno=182)
DEBUG 2022-02-14 16:46:35,667 stack ['$comb302.0']
DEBUG 2022-02-14 16:46:35,667 dispatch pc=306, inst=LOAD_CONST(arg=0, lineno=182)
DEBUG 2022-02-14 16:46:35,667 stack ['$comb302.0', '$count304.1']
DEBUG 2022-02-14 16:46:35,668 dispatch pc=308, inst=LOAD_CONST(arg=0, lineno=182)
DEBUG 2022-02-14 16:46:35,668 stack ['$comb302.0', '$count304.1', '$const306.2']
DEBUG 2022-02-14 16:46:35,668 dispatch pc=310, inst=BUILD_SLICE(arg=2, lineno=182)
DEBUG 2022-02-14 16:46:35,668 stack ['$comb302.0', '$count304.1', '$const306.2', '$const308.3']
DEBUG 2022-02-14 16:46:35,668 dispatch pc=312, inst=BUILD_TUPLE(arg=2, lineno=182)
DEBUG 2022-02-14 16:46:35,668 stack ['$comb302.0', '$count304.1', '$310build_slice.5']
DEBUG 2022-02-14 16:46:35,668 dispatch pc=314, inst=BINARY_SUBSCR(arg=None, lineno=182)
DEBUG 2022-02-14 16:46:35,668 stack ['$comb302.0', '$312build_tuple.6']
DEBUG 2022-02-14 16:46:35,668 dispatch pc=316, inst=RETURN_VALUE(arg=None, lineno=182)
DEBUG 2022-02-14 16:46:35,668 stack ['$314binary_subscr.7']
DEBUG 2022-02-14 16:46:35,668 end state. edges=[]
DEBUG 2022-02-14 16:46:35,668 pending: deque([State(pc_initial=62 nstack_initial=2)])
DEBUG 2022-02-14 16:46:35,668 stack: ['$phi62.0', '$phi62.1']
DEBUG 2022-02-14 16:46:35,668 dispatch pc=62, inst=STORE_FAST(arg=10, lineno=164)
DEBUG 2022-02-14 16:46:35,668 stack ['$phi62.0', '$phi62.1']
DEBUG 2022-02-14 16:46:35,668 dispatch pc=64, inst=LOAD_FAST(arg=10, lineno=165)
DEBUG 2022-02-14 16:46:35,668 stack ['$phi62.0']
DEBUG 2022-02-14 16:46:35,668 dispatch pc=66, inst=LOAD_CONST(arg=3, lineno=165)
DEBUG 2022-02-14 16:46:35,668 stack ['$phi62.0', '$i64.2']
DEBUG 2022-02-14 16:46:35,668 dispatch pc=68, inst=COMPARE_OP(arg=2, lineno=165)
DEBUG 2022-02-14 16:46:35,668 stack ['$phi62.0', '$i64.2', '$const66.3']
DEBUG 2022-02-14 16:46:35,668 dispatch pc=70, inst=POP_JUMP_IF_FALSE(arg=78, lineno=165)
DEBUG 2022-02-14 16:46:35,668 stack ['$phi62.0', '$68compare_op.4']
DEBUG 2022-02-14 16:46:35,669 end state. edges=[Edge(pc=72, stack=('$phi62.0',), blockstack=(), npush=0), Edge(pc=78, stack=('$phi62.0',), blockstack=(), npush=0)]
DEBUG 2022-02-14 16:46:35,669 pending: deque([State(pc_initial=72 nstack_initial=1), State(pc_initial=78 nstack_initial=1)])
DEBUG 2022-02-14 16:46:35,669 stack: ['$phi72.0']
DEBUG 2022-02-14 16:46:35,669 dispatch pc=72, inst=LOAD_FAST(arg=5, lineno=166)
DEBUG 2022-02-14 16:46:35,669 stack ['$phi72.0']
DEBUG 2022-02-14 16:46:35,669 dispatch pc=74, inst=STORE_FAST(arg=11, lineno=166)
DEBUG 2022-02-14 16:46:35,669 stack ['$phi72.0', '$oddloop72.1']
DEBUG 2022-02-14 16:46:35,669 dispatch pc=76, inst=JUMP_FORWARD(arg=62, lineno=166)
DEBUG 2022-02-14 16:46:35,669 stack ['$phi72.0']
DEBUG 2022-02-14 16:46:35,669 end state. edges=[Edge(pc=140, stack=('$phi72.0',), blockstack=(), npush=0)]
DEBUG 2022-02-14 16:46:35,669 pending: deque([State(pc_initial=78 nstack_initial=1), State(pc_initial=140 nstack_initial=1)])
DEBUG 2022-02-14 16:46:35,669 stack: ['$phi78.0']
DEBUG 2022-02-14 16:46:35,669 dispatch pc=78, inst=LOAD_FAST(arg=10, lineno=167)
DEBUG 2022-02-14 16:46:35,669 stack ['$phi78.0']
DEBUG 2022-02-14 16:46:35,669 dispatch pc=80, inst=LOAD_CONST(arg=2, lineno=167)
DEBUG 2022-02-14 16:46:35,669 stack ['$phi78.0', '$i78.1']
DEBUG 2022-02-14 16:46:35,669 dispatch pc=82, inst=BINARY_MODULO(arg=None, lineno=167)
DEBUG 2022-02-14 16:46:35,669 stack ['$phi78.0', '$i78.1', '$const80.2']
DEBUG 2022-02-14 16:46:35,669 dispatch pc=84, inst=LOAD_CONST(arg=1, lineno=167)
DEBUG 2022-02-14 16:46:35,669 stack ['$phi78.0', '$82binary_modulo.3']
DEBUG 2022-02-14 16:46:35,669 dispatch pc=86, inst=COMPARE_OP(arg=2, lineno=167)
DEBUG 2022-02-14 16:46:35,669 stack ['$phi78.0', '$82binary_modulo.3', '$const84.4']
DEBUG 2022-02-14 16:46:35,669 dispatch pc=88, inst=POP_JUMP_IF_FALSE(arg=124, lineno=167)
DEBUG 2022-02-14 16:46:35,669 stack ['$phi78.0', '$86compare_op.5']
DEBUG 2022-02-14 16:46:35,670 end state. edges=[Edge(pc=90, stack=('$phi78.0',), blockstack=(), npush=0), Edge(pc=124, stack=('$phi78.0',), blockstack=(), npush=0)]
DEBUG 2022-02-14 16:46:35,670 pending: deque([State(pc_initial=140 nstack_initial=1), State(pc_initial=90 nstack_initial=1), State(pc_initial=124 nstack_initial=1)])
DEBUG 2022-02-14 16:46:35,670 stack: ['$phi140.0']
DEBUG 2022-02-14 16:46:35,670 dispatch pc=140, inst=LOAD_CONST(arg=3, lineno=174)
DEBUG 2022-02-14 16:46:35,670 stack ['$phi140.0']
DEBUG 2022-02-14 16:46:35,670 dispatch pc=142, inst=STORE_FAST(arg=12, lineno=174)
DEBUG 2022-02-14 16:46:35,670 stack ['$phi140.0', '$const140.1']
DEBUG 2022-02-14 16:46:35,670 dispatch pc=144, inst=LOAD_CONST(arg=3, lineno=175)
DEBUG 2022-02-14 16:46:35,670 stack ['$phi140.0']
DEBUG 2022-02-14 16:46:35,670 dispatch pc=146, inst=LOAD_FAST(arg=8, lineno=175)
DEBUG 2022-02-14 16:46:35,670 stack ['$phi140.0', '$const144.2']
DEBUG 2022-02-14 16:46:35,670 dispatch pc=148, inst=BINARY_SUBTRACT(arg=None, lineno=175)
DEBUG 2022-02-14 16:46:35,670 stack ['$phi140.0', '$const144.2', '$count146.3']
DEBUG 2022-02-14 16:46:35,670 dispatch pc=150, inst=STORE_FAST(arg=8, lineno=175)
DEBUG 2022-02-14 16:46:35,670 stack ['$phi140.0', '$148binary_subtract.4']
DEBUG 2022-02-14 16:46:35,670 dispatch pc=152, inst=LOAD_FAST(arg=9, lineno=176)
DEBUG 2022-02-14 16:46:35,670 stack ['$phi140.0']
DEBUG 2022-02-14 16:46:35,670 dispatch pc=154, inst=LOAD_CONST(arg=3, lineno=176)
DEBUG 2022-02-14 16:46:35,670 stack ['$phi140.0', '$comb152.5']
DEBUG 2022-02-14 16:46:35,670 dispatch pc=156, inst=LOAD_FAST(arg=8, lineno=176)
DEBUG 2022-02-14 16:46:35,670 stack ['$phi140.0', '$comb152.5', '$const154.6']
DEBUG 2022-02-14 16:46:35,670 dispatch pc=158, inst=BINARY_SUBTRACT(arg=None, lineno=176)
DEBUG 2022-02-14 16:46:35,670 stack ['$phi140.0', '$comb152.5', '$const154.6', '$count156.7']
DEBUG 2022-02-14 16:46:35,670 dispatch pc=160, inst=LOAD_CONST(arg=0, lineno=176)
DEBUG 2022-02-14 16:46:35,670 stack ['$phi140.0', '$comb152.5', '$158binary_subtract.8']
DEBUG 2022-02-14 16:46:35,670 dispatch pc=162, inst=LOAD_CONST(arg=0, lineno=176)
DEBUG 2022-02-14 16:46:35,671 stack ['$phi140.0', '$comb152.5', '$158binary_subtract.8', '$const160.9']
DEBUG 2022-02-14 16:46:35,671 dispatch pc=164, inst=BUILD_SLICE(arg=2, lineno=176)
DEBUG 2022-02-14 16:46:35,671 stack ['$phi140.0', '$comb152.5', '$158binary_subtract.8', '$const160.9', '$const162.10']
DEBUG 2022-02-14 16:46:35,671 dispatch pc=166, inst=BUILD_TUPLE(arg=2, lineno=176)
DEBUG 2022-02-14 16:46:35,671 stack ['$phi140.0', '$comb152.5', '$158binary_subtract.8', '$164build_slice.12']
DEBUG 2022-02-14 16:46:35,671 dispatch pc=168, inst=BINARY_SUBSCR(arg=None, lineno=176)
DEBUG 2022-02-14 16:46:35,671 stack ['$phi140.0', '$comb152.5', '$166build_tuple.13']
DEBUG 2022-02-14 16:46:35,671 dispatch pc=170, inst=LOAD_FAST(arg=9, lineno=176)
DEBUG 2022-02-14 16:46:35,671 stack ['$phi140.0', '$168binary_subscr.14']
DEBUG 2022-02-14 16:46:35,671 dispatch pc=172, inst=LOAD_FAST(arg=8, lineno=176)
DEBUG 2022-02-14 16:46:35,671 stack ['$phi140.0', '$168binary_subscr.14', '$comb170.15']
DEBUG 2022-02-14 16:46:35,671 dispatch pc=174, inst=LOAD_CONST(arg=0, lineno=176)
DEBUG 2022-02-14 16:46:35,671 stack ['$phi140.0', '$168binary_subscr.14', '$comb170.15', '$count172.16']
DEBUG 2022-02-14 16:46:35,671 dispatch pc=176, inst=LOAD_CONST(arg=0, lineno=176)
DEBUG 2022-02-14 16:46:35,671 stack ['$phi140.0', '$168binary_subscr.14', '$comb170.15', '$count172.16', '$const174.17']
DEBUG 2022-02-14 16:46:35,671 dispatch pc=178, inst=BUILD_SLICE(arg=2, lineno=176)
DEBUG 2022-02-14 16:46:35,671 stack ['$phi140.0', '$168binary_subscr.14', '$comb170.15', '$count172.16', '$const174.17', '$const176.18']
DEBUG 2022-02-14 16:46:35,671 dispatch pc=180, inst=BUILD_TUPLE(arg=2, lineno=176)
DEBUG 2022-02-14 16:46:35,671 stack ['$phi140.0', '$168binary_subscr.14', '$comb170.15', '$count172.16', '$178build_slice.20']
DEBUG 2022-02-14 16:46:35,671 dispatch pc=182, inst=STORE_SUBSCR(arg=None, lineno=176)
DEBUG 2022-02-14 16:46:35,671 stack ['$phi140.0', '$168binary_subscr.14', '$comb170.15', '$180build_tuple.21']
DEBUG 2022-02-14 16:46:35,671 dispatch pc=184, inst=LOAD_GLOBAL(arg=4, lineno=177)
DEBUG 2022-02-14 16:46:35,671 stack ['$phi140.0']
DEBUG 2022-02-14 16:46:35,671 dispatch pc=186, inst=LOAD_CONST(arg=3, lineno=177)
DEBUG 2022-02-14 16:46:35,671 stack ['$phi140.0', '$184load_global.22']
DEBUG 2022-02-14 16:46:35,671 dispatch pc=188, inst=LOAD_FAST(arg=4, lineno=177)
DEBUG 2022-02-14 16:46:35,672 stack ['$phi140.0', '$184load_global.22', '$const186.23']
DEBUG 2022-02-14 16:46:35,672 dispatch pc=190, inst=LOAD_FAST(arg=10, lineno=177)
DEBUG 2022-02-14 16:46:35,672 stack ['$phi140.0', '$184load_global.22', '$const186.23', '$n188.24']
DEBUG 2022-02-14 16:46:35,672 dispatch pc=192, inst=BINARY_FLOOR_DIVIDE(arg=None, lineno=177)
DEBUG 2022-02-14 16:46:35,672 stack ['$phi140.0', '$184load_global.22', '$const186.23', '$n188.24', '$i190.25']
DEBUG 2022-02-14 16:46:35,672 dispatch pc=194, inst=LOAD_CONST(arg=3, lineno=177)
DEBUG 2022-02-14 16:46:35,672 stack ['$phi140.0', '$184load_global.22', '$const186.23', '$192binary_floor_divide.26']
DEBUG 2022-02-14 16:46:35,672 dispatch pc=196, inst=BINARY_ADD(arg=None, lineno=177)
DEBUG 2022-02-14 16:46:35,672 stack ['$phi140.0', '$184load_global.22', '$const186.23', '$192binary_floor_divide.26', '$const194.27']
DEBUG 2022-02-14 16:46:35,672 dispatch pc=198, inst=CALL_FUNCTION(arg=2, lineno=177)
DEBUG 2022-02-14 16:46:35,672 stack ['$phi140.0', '$184load_global.22', '$const186.23', '$196binary_add.28']
DEBUG 2022-02-14 16:46:35,672 dispatch pc=200, inst=GET_ITER(arg=None, lineno=177)
DEBUG 2022-02-14 16:46:35,672 stack ['$phi140.0', '$198call_function.29']
DEBUG 2022-02-14 16:46:35,672 end state. edges=[Edge(pc=202, stack=('$phi140.0', '$200get_iter.30'), blockstack=(), npush=0)]
DEBUG 2022-02-14 16:46:35,672 pending: deque([State(pc_initial=90 nstack_initial=1), State(pc_initial=124 nstack_initial=1), State(pc_initial=202 nstack_initial=2)])
DEBUG 2022-02-14 16:46:35,672 stack: ['$phi90.0']
DEBUG 2022-02-14 16:46:35,672 dispatch pc=90, inst=LOAD_FAST(arg=7, lineno=168)
DEBUG 2022-02-14 16:46:35,672 stack ['$phi90.0']
DEBUG 2022-02-14 16:46:35,672 dispatch pc=92, inst=LOAD_METHOD(arg=5, lineno=168)
DEBUG 2022-02-14 16:46:35,672 stack ['$phi90.0', '$E_k90.1']
DEBUG 2022-02-14 16:46:35,672 dispatch pc=94, inst=CALL_METHOD(arg=0, lineno=168)
DEBUG 2022-02-14 16:46:35,672 stack ['$phi90.0', '$92load_method.2']
DEBUG 2022-02-14 16:46:35,672 dispatch pc=96, inst=LOAD_FAST(arg=10, lineno=168)
DEBUG 2022-02-14 16:46:35,672 stack ['$phi90.0', '$94call_method.3']
DEBUG 2022-02-14 16:46:35,672 dispatch pc=98, inst=BINARY_TRUE_DIVIDE(arg=None, lineno=168)
DEBUG 2022-02-14 16:46:35,673 stack ['$phi90.0', '$94call_method.3', '$i96.4']
DEBUG 2022-02-14 16:46:35,673 dispatch pc=100, inst=LOAD_FAST(arg=2, lineno=168)
DEBUG 2022-02-14 16:46:35,673 stack ['$phi90.0', '$98binary_true_divide.5']
DEBUG 2022-02-14 16:46:35,673 dispatch pc=102, inst=LOAD_FAST(arg=3, lineno=168)
DEBUG 2022-02-14 16:46:35,673 stack ['$phi90.0', '$98binary_true_divide.5', '$XD_S100.6']
DEBUG 2022-02-14 16:46:35,673 dispatch pc=104, inst=BINARY_MATRIX_MULTIPLY(arg=None, lineno=168)
DEBUG 2022-02-14 16:46:35,673 stack ['$phi90.0', '$98binary_true_divide.5', '$XD_S100.6', '$D_S102.7']
DEBUG 2022-02-14 16:46:35,673 dispatch pc=106, inst=LOAD_CONST(arg=2, lineno=168)
DEBUG 2022-02-14 16:46:35,673 stack ['$phi90.0', '$98binary_true_divide.5', '$104binary_matrix_multiply.8']
DEBUG 2022-02-14 16:46:35,673 dispatch pc=108, inst=BINARY_TRUE_DIVIDE(arg=None, lineno=168)
DEBUG 2022-02-14 16:46:35,673 stack ['$phi90.0', '$98binary_true_divide.5', '$104binary_matrix_multiply.8', '$const106.9']
DEBUG 2022-02-14 16:46:35,673 dispatch pc=110, inst=BINARY_ADD(arg=None, lineno=168)
DEBUG 2022-02-14 16:46:35,673 stack ['$phi90.0', '$98binary_true_divide.5', '$108binary_true_divide.10']
DEBUG 2022-02-14 16:46:35,673 dispatch pc=112, inst=STORE_FAST(arg=11, lineno=168)
DEBUG 2022-02-14 16:46:35,673 stack ['$phi90.0', '$110binary_add.11']
DEBUG 2022-02-14 16:46:35,673 dispatch pc=114, inst=LOAD_FAST(arg=7, lineno=169)
DEBUG 2022-02-14 16:46:35,673 stack ['$phi90.0']
DEBUG 2022-02-14 16:46:35,673 dispatch pc=116, inst=LOAD_FAST(arg=0, lineno=169)
DEBUG 2022-02-14 16:46:35,673 stack ['$phi90.0', '$E_k114.12']
DEBUG 2022-02-14 16:46:35,673 dispatch pc=118, inst=INPLACE_MULTIPLY(arg=None, lineno=169)
DEBUG 2022-02-14 16:46:35,673 stack ['$phi90.0', '$E_k114.12', '$E116.13']
DEBUG 2022-02-14 16:46:35,673 dispatch pc=120, inst=STORE_FAST(arg=7, lineno=169)
DEBUG 2022-02-14 16:46:35,673 stack ['$phi90.0', '$118inplace_multiply.14']
DEBUG 2022-02-14 16:46:35,673 dispatch pc=122, inst=JUMP_FORWARD(arg=16, lineno=169)
DEBUG 2022-02-14 16:46:35,673 stack ['$phi90.0']
DEBUG 2022-02-14 16:46:35,673 end state. edges=[Edge(pc=140, stack=('$phi90.0',), blockstack=(), npush=0)]
DEBUG 2022-02-14 16:46:35,674 pending: deque([State(pc_initial=124 nstack_initial=1), State(pc_initial=202 nstack_initial=2), State(pc_initial=140 nstack_initial=1)])
DEBUG 2022-02-14 16:46:35,674 stack: ['$phi124.0']
DEBUG 2022-02-14 16:46:35,674 dispatch pc=124, inst=LOAD_FAST(arg=6, lineno=171)
DEBUG 2022-02-14 16:46:35,674 stack ['$phi124.0']
DEBUG 2022-02-14 16:46:35,674 dispatch pc=126, inst=LOAD_FAST(arg=3, lineno=171)
DEBUG 2022-02-14 16:46:35,674 stack ['$phi124.0', '$oddVX_S124.1']
DEBUG 2022-02-14 16:46:35,674 dispatch pc=128, inst=BINARY_MATRIX_MULTIPLY(arg=None, lineno=171)
DEBUG 2022-02-14 16:46:35,674 stack ['$phi124.0', '$oddVX_S124.1', '$D_S126.2']
DEBUG 2022-02-14 16:46:35,674 dispatch pc=130, inst=STORE_FAST(arg=11, lineno=171)
DEBUG 2022-02-14 16:46:35,674 stack ['$phi124.0', '$128binary_matrix_multiply.3']
DEBUG 2022-02-14 16:46:35,674 dispatch pc=132, inst=LOAD_FAST(arg=1, lineno=172)
DEBUG 2022-02-14 16:46:35,674 stack ['$phi124.0']
DEBUG 2022-02-14 16:46:35,674 dispatch pc=134, inst=LOAD_FAST(arg=3, lineno=172)
DEBUG 2022-02-14 16:46:35,674 stack ['$phi124.0', '$AX_S132.4']
DEBUG 2022-02-14 16:46:35,674 dispatch pc=136, inst=BINARY_MATRIX_MULTIPLY(arg=None, lineno=172)
DEBUG 2022-02-14 16:46:35,674 stack ['$phi124.0', '$AX_S132.4', '$D_S134.5']
DEBUG 2022-02-14 16:46:35,674 dispatch pc=138, inst=STORE_FAST(arg=3, lineno=172)
DEBUG 2022-02-14 16:46:35,674 stack ['$phi124.0', '$136binary_matrix_multiply.6']
DEBUG 2022-02-14 16:46:35,674 end state. edges=[Edge(pc=140, stack=('$phi124.0',), blockstack=(), npush=0)]
DEBUG 2022-02-14 16:46:35,674 pending: deque([State(pc_initial=202 nstack_initial=2), State(pc_initial=140 nstack_initial=1), State(pc_initial=140 nstack_initial=1)])
DEBUG 2022-02-14 16:46:35,674 stack: ['$phi202.0', '$phi202.1']
DEBUG 2022-02-14 16:46:35,674 dispatch pc=202, inst=FOR_ITER(arg=96, lineno=177)
DEBUG 2022-02-14 16:46:35,674 stack ['$phi202.0', '$phi202.1']
DEBUG 2022-02-14 16:46:35,674 end state. edges=[Edge(pc=300, stack=('$phi202.0',), blockstack=(), npush=0), Edge(pc=204, stack=('$phi202.0', '$phi202.1', '$202for_iter.3'), blockstack=(), npush=0)]
DEBUG 2022-02-14 16:46:35,674 pending: deque([State(pc_initial=140 nstack_initial=1), State(pc_initial=140 nstack_initial=1), State(pc_initial=300 nstack_initial=1), State(pc_initial=204 nstack_initial=3)])
DEBUG 2022-02-14 16:46:35,675 pending: deque([State(pc_initial=140 nstack_initial=1), State(pc_initial=300 nstack_initial=1), State(pc_initial=204 nstack_initial=3)])
DEBUG 2022-02-14 16:46:35,675 pending: deque([State(pc_initial=300 nstack_initial=1), State(pc_initial=204 nstack_initial=3)])
DEBUG 2022-02-14 16:46:35,675 stack: ['$phi300.0']
DEBUG 2022-02-14 16:46:35,675 dispatch pc=300, inst=JUMP_ABSOLUTE(arg=60, lineno=180)
DEBUG 2022-02-14 16:46:35,675 stack ['$phi300.0']
DEBUG 2022-02-14 16:46:35,675 end state. edges=[Edge(pc=60, stack=('$phi300.0',), blockstack=(), npush=0)]
DEBUG 2022-02-14 16:46:35,675 pending: deque([State(pc_initial=204 nstack_initial=3), State(pc_initial=60 nstack_initial=1)])
DEBUG 2022-02-14 16:46:35,675 stack: ['$phi204.0', '$phi204.1', '$phi204.2']
DEBUG 2022-02-14 16:46:35,675 dispatch pc=204, inst=STORE_FAST(arg=13, lineno=177)
DEBUG 2022-02-14 16:46:35,675 stack ['$phi204.0', '$phi204.1', '$phi204.2']
DEBUG 2022-02-14 16:46:35,675 dispatch pc=206, inst=LOAD_FAST(arg=12, lineno=178)
DEBUG 2022-02-14 16:46:35,675 stack ['$phi204.0', '$phi204.1']
DEBUG 2022-02-14 16:46:35,675 dispatch pc=208, inst=LOAD_FAST(arg=11, lineno=178)
DEBUG 2022-02-14 16:46:35,675 stack ['$phi204.0', '$phi204.1', '$powfactor206.3']
DEBUG 2022-02-14 16:46:35,675 dispatch pc=210, inst=LOAD_FAST(arg=13, lineno=178)
DEBUG 2022-02-14 16:46:35,675 stack ['$phi204.0', '$phi204.1', '$powfactor206.3', '$factor208.4']
DEBUG 2022-02-14 16:46:35,675 dispatch pc=212, inst=BINARY_TRUE_DIVIDE(arg=None, lineno=178)
DEBUG 2022-02-14 16:46:35,675 stack ['$phi204.0', '$phi204.1', '$powfactor206.3', '$factor208.4', '$j210.5']
DEBUG 2022-02-14 16:46:35,675 dispatch pc=214, inst=INPLACE_MULTIPLY(arg=None, lineno=178)
DEBUG 2022-02-14 16:46:35,675 stack ['$phi204.0', '$phi204.1', '$powfactor206.3', '$212binary_true_divide.6']
DEBUG 2022-02-14 16:46:35,675 dispatch pc=216, inst=STORE_FAST(arg=12, lineno=178)
DEBUG 2022-02-14 16:46:35,675 stack ['$phi204.0', '$phi204.1', '$214inplace_multiply.7']
DEBUG 2022-02-14 16:46:35,675 dispatch pc=218, inst=LOAD_GLOBAL(arg=4, lineno=179)
DEBUG 2022-02-14 16:46:35,675 stack ['$phi204.0', '$phi204.1']
DEBUG 2022-02-14 16:46:35,675 dispatch pc=220, inst=LOAD_FAST(arg=10, lineno=179)
DEBUG 2022-02-14 16:46:35,675 stack ['$phi204.0', '$phi204.1', '$218load_global.8']
DEBUG 2022-02-14 16:46:35,676 dispatch pc=222, inst=LOAD_FAST(arg=13, lineno=179)
DEBUG 2022-02-14 16:46:35,676 stack ['$phi204.0', '$phi204.1', '$218load_global.8', '$i220.9']
DEBUG 2022-02-14 16:46:35,676 dispatch pc=224, inst=BINARY_MULTIPLY(arg=None, lineno=179)
DEBUG 2022-02-14 16:46:35,676 stack ['$phi204.0', '$phi204.1', '$218load_global.8', '$i220.9', '$j222.10']
DEBUG 2022-02-14 16:46:35,676 dispatch pc=226, inst=LOAD_CONST(arg=3, lineno=179)
DEBUG 2022-02-14 16:46:35,676 stack ['$phi204.0', '$phi204.1', '$218load_global.8', '$224binary_multiply.11']
DEBUG 2022-02-14 16:46:35,676 dispatch pc=228, inst=BINARY_ADD(arg=None, lineno=179)
DEBUG 2022-02-14 16:46:35,676 stack ['$phi204.0', '$phi204.1', '$218load_global.8', '$224binary_multiply.11', '$const226.12']
DEBUG 2022-02-14 16:46:35,676 dispatch pc=230, inst=LOAD_FAST(arg=4, lineno=179)
DEBUG 2022-02-14 16:46:35,676 stack ['$phi204.0', '$phi204.1', '$218load_global.8', '$228binary_add.13']
DEBUG 2022-02-14 16:46:35,676 dispatch pc=232, inst=LOAD_CONST(arg=2, lineno=179)
DEBUG 2022-02-14 16:46:35,676 stack ['$phi204.0', '$phi204.1', '$218load_global.8', '$228binary_add.13', '$n230.14']
DEBUG 2022-02-14 16:46:35,676 dispatch pc=234, inst=BINARY_ADD(arg=None, lineno=179)
DEBUG 2022-02-14 16:46:35,676 stack ['$phi204.0', '$phi204.1', '$218load_global.8', '$228binary_add.13', '$n230.14', '$const232.15']
DEBUG 2022-02-14 16:46:35,676 dispatch pc=236, inst=CALL_FUNCTION(arg=2, lineno=179)
DEBUG 2022-02-14 16:46:35,676 stack ['$phi204.0', '$phi204.1', '$218load_global.8', '$228binary_add.13', '$234binary_add.16']
DEBUG 2022-02-14 16:46:35,676 dispatch pc=238, inst=GET_ITER(arg=None, lineno=179)
DEBUG 2022-02-14 16:46:35,676 stack ['$phi204.0', '$phi204.1', '$236call_function.17']
DEBUG 2022-02-14 16:46:35,676 end state. edges=[Edge(pc=240, stack=('$phi204.0', '$phi204.1', '$238get_iter.18'), blockstack=(), npush=0)]
DEBUG 2022-02-14 16:46:35,676 pending: deque([State(pc_initial=60 nstack_initial=1), State(pc_initial=240 nstack_initial=3)])
DEBUG 2022-02-14 16:46:35,676 pending: deque([State(pc_initial=240 nstack_initial=3)])
DEBUG 2022-02-14 16:46:35,676 stack: ['$phi240.0', '$phi240.1', '$phi240.2']
DEBUG 2022-02-14 16:46:35,676 dispatch pc=240, inst=FOR_ITER(arg=56, lineno=179)
DEBUG 2022-02-14 16:46:35,676 stack ['$phi240.0', '$phi240.1', '$phi240.2']
DEBUG 2022-02-14 16:46:35,676 end state. edges=[Edge(pc=298, stack=('$phi240.0', '$phi240.1'), blockstack=(), npush=0), Edge(pc=242, stack=('$phi240.0', '$phi240.1', '$phi240.2', '$240for_iter.4'), blockstack=(), npush=0)]
DEBUG 2022-02-14 16:46:35,677 pending: deque([State(pc_initial=298 nstack_initial=2), State(pc_initial=242 nstack_initial=4)])
DEBUG 2022-02-14 16:46:35,677 stack: ['$phi298.0', '$phi298.1']
DEBUG 2022-02-14 16:46:35,677 dispatch pc=298, inst=JUMP_ABSOLUTE(arg=202, lineno=180)
DEBUG 2022-02-14 16:46:35,677 stack ['$phi298.0', '$phi298.1']
DEBUG 2022-02-14 16:46:35,677 end state. edges=[Edge(pc=202, stack=('$phi298.0', '$phi298.1'), blockstack=(), npush=0)]
DEBUG 2022-02-14 16:46:35,677 pending: deque([State(pc_initial=242 nstack_initial=4), State(pc_initial=202 nstack_initial=2)])
DEBUG 2022-02-14 16:46:35,677 stack: ['$phi242.0', '$phi242.1', '$phi242.2', '$phi242.3']
DEBUG 2022-02-14 16:46:35,677 dispatch pc=242, inst=STORE_FAST(arg=14, lineno=179)
DEBUG 2022-02-14 16:46:35,677 stack ['$phi242.0', '$phi242.1', '$phi242.2', '$phi242.3']
DEBUG 2022-02-14 16:46:35,677 dispatch pc=244, inst=LOAD_FAST(arg=9, lineno=180)
DEBUG 2022-02-14 16:46:35,677 stack ['$phi242.0', '$phi242.1', '$phi242.2']
DEBUG 2022-02-14 16:46:35,677 dispatch pc=246, inst=LOAD_FAST(arg=8, lineno=180)
DEBUG 2022-02-14 16:46:35,677 stack ['$phi242.0', '$phi242.1', '$phi242.2', '$comb244.4']
DEBUG 2022-02-14 16:46:35,677 dispatch pc=248, inst=LOAD_FAST(arg=14, lineno=180)
DEBUG 2022-02-14 16:46:35,677 stack ['$phi242.0', '$phi242.1', '$phi242.2', '$comb244.4', '$count246.5']
DEBUG 2022-02-14 16:46:35,677 dispatch pc=250, inst=LOAD_CONST(arg=3, lineno=180)
DEBUG 2022-02-14 16:46:35,677 stack ['$phi242.0', '$phi242.1', '$phi242.2', '$comb244.4', '$count246.5', '$k248.6']
DEBUG 2022-02-14 16:46:35,677 dispatch pc=252, inst=BINARY_SUBTRACT(arg=None, lineno=180)
DEBUG 2022-02-14 16:46:35,677 stack ['$phi242.0', '$phi242.1', '$phi242.2', '$comb244.4', '$count246.5', '$k248.6', '$const250.7']
DEBUG 2022-02-14 16:46:35,677 dispatch pc=254, inst=BUILD_TUPLE(arg=2, lineno=180)
DEBUG 2022-02-14 16:46:35,677 stack ['$phi242.0', '$phi242.1', '$phi242.2', '$comb244.4', '$count246.5', '$252binary_subtract.8']
DEBUG 2022-02-14 16:46:35,677 dispatch pc=256, inst=DUP_TOP_TWO(arg=None, lineno=180)
DEBUG 2022-02-14 16:46:35,677 stack ['$phi242.0', '$phi242.1', '$phi242.2', '$comb244.4', '$254build_tuple.9']
DEBUG 2022-02-14 16:46:35,677 dispatch pc=258, inst=BINARY_SUBSCR(arg=None, lineno=180)
DEBUG 2022-02-14 16:46:35,677 stack ['$phi242.0', '$phi242.1', '$phi242.2', '$comb244.4', '$254build_tuple.9', '$256dup_top_two.10', '$256dup_top_two.11']
DEBUG 2022-02-14 16:46:35,678 dispatch pc=260, inst=LOAD_FAST(arg=9, lineno=180)
DEBUG 2022-02-14 16:46:35,678 stack ['$phi242.0', '$phi242.1', '$phi242.2', '$comb244.4', '$254build_tuple.9', '$258binary_subscr.12']
DEBUG 2022-02-14 16:46:35,678 dispatch pc=262, inst=LOAD_CONST(arg=3, lineno=180)
DEBUG 2022-02-14 16:46:35,678 stack ['$phi242.0', '$phi242.1', '$phi242.2', '$comb244.4', '$254build_tuple.9', '$258binary_subscr.12', '$comb260.13']
DEBUG 2022-02-14 16:46:35,678 dispatch pc=264, inst=LOAD_FAST(arg=8, lineno=180)
DEBUG 2022-02-14 16:46:35,678 stack ['$phi242.0', '$phi242.1', '$phi242.2', '$comb244.4', '$254build_tuple.9', '$258binary_subscr.12', '$comb260.13', '$const262.14']
DEBUG 2022-02-14 16:46:35,678 dispatch pc=266, inst=BINARY_SUBTRACT(arg=None, lineno=180)
DEBUG 2022-02-14 16:46:35,678 stack ['$phi242.0', '$phi242.1', '$phi242.2', '$comb244.4', '$254build_tuple.9', '$258binary_subscr.12', '$comb260.13', '$const262.14', '$count264.15']
DEBUG 2022-02-14 16:46:35,678 dispatch pc=268, inst=LOAD_FAST(arg=14, lineno=180)
DEBUG 2022-02-14 16:46:35,678 stack ['$phi242.0', '$phi242.1', '$phi242.2', '$comb244.4', '$254build_tuple.9', '$258binary_subscr.12', '$comb260.13', '$266binary_subtract.16']
DEBUG 2022-02-14 16:46:35,678 dispatch pc=270, inst=LOAD_FAST(arg=10, lineno=180)
DEBUG 2022-02-14 16:46:35,678 stack ['$phi242.0', '$phi242.1', '$phi242.2', '$comb244.4', '$254build_tuple.9', '$258binary_subscr.12', '$comb260.13', '$266binary_subtract.16', '$k268.17']
DEBUG 2022-02-14 16:46:35,678 dispatch pc=272, inst=LOAD_FAST(arg=13, lineno=180)
DEBUG 2022-02-14 16:46:35,678 stack ['$phi242.0', '$phi242.1', '$phi242.2', '$comb244.4', '$254build_tuple.9', '$258binary_subscr.12', '$comb260.13', '$266binary_subtract.16', '$k268.17', '$i270.18']
DEBUG 2022-02-14 16:46:35,678 dispatch pc=274, inst=BINARY_MULTIPLY(arg=None, lineno=180)
DEBUG 2022-02-14 16:46:35,678 stack ['$phi242.0', '$phi242.1', '$phi242.2', '$comb244.4', '$254build_tuple.9', '$258binary_subscr.12', '$comb260.13', '$266binary_subtract.16', '$k268.17', '$i270.18', '$j272.19']
DEBUG 2022-02-14 16:46:35,678 dispatch pc=276, inst=BINARY_SUBTRACT(arg=None, lineno=180)
DEBUG 2022-02-14 16:46:35,678 stack ['$phi242.0', '$phi242.1', '$phi242.2', '$comb244.4', '$254build_tuple.9', '$258binary_subscr.12', '$comb260.13', '$266binary_subtract.16', '$k268.17', '$274binary_multiply.20']
DEBUG 2022-02-14 16:46:35,678 dispatch pc=278, inst=LOAD_CONST(arg=3, lineno=180)
DEBUG 2022-02-14 16:46:35,678 stack ['$phi242.0', '$phi242.1', '$phi242.2', '$comb244.4', '$254build_tuple.9', '$258binary_subscr.12', '$comb260.13', '$266binary_subtract.16', '$276binary_subtract.21']
DEBUG 2022-02-14 16:46:35,678 dispatch pc=280, inst=BINARY_SUBTRACT(arg=None, lineno=180)
DEBUG 2022-02-14 16:46:35,678 stack ['$phi242.0', '$phi242.1', '$phi242.2', '$comb244.4', '$254build_tuple.9', '$258binary_subscr.12', '$comb260.13', '$266binary_subtract.16', '$276binary_subtract.21', '$const278.22']
DEBUG 2022-02-14 16:46:35,678 dispatch pc=282, inst=BUILD_TUPLE(arg=2, lineno=180)
DEBUG 2022-02-14 16:46:35,678 stack ['$phi242.0', '$phi242.1', '$phi242.2', '$comb244.4', '$254build_tuple.9', '$258binary_subscr.12', '$comb260.13', '$266binary_subtract.16', '$280binary_subtract.23']
DEBUG 2022-02-14 16:46:35,678 dispatch pc=284, inst=BINARY_SUBSCR(arg=None, lineno=180)
DEBUG 2022-02-14 16:46:35,679 stack ['$phi242.0', '$phi242.1', '$phi242.2', '$comb244.4', '$254build_tuple.9', '$258binary_subscr.12', '$comb260.13', '$282build_tuple.24']
DEBUG 2022-02-14 16:46:35,679 dispatch pc=286, inst=LOAD_FAST(arg=12, lineno=180)
DEBUG 2022-02-14 16:46:35,679 stack ['$phi242.0', '$phi242.1', '$phi242.2', '$comb244.4', '$254build_tuple.9', '$258binary_subscr.12', '$284binary_subscr.25']
DEBUG 2022-02-14 16:46:35,679 dispatch pc=288, inst=BINARY_MULTIPLY(arg=None, lineno=180)
DEBUG 2022-02-14 16:46:35,679 stack ['$phi242.0', '$phi242.1', '$phi242.2', '$comb244.4', '$254build_tuple.9', '$258binary_subscr.12', '$284binary_subscr.25', '$powfactor286.26']
DEBUG 2022-02-14 16:46:35,679 dispatch pc=290, inst=INPLACE_ADD(arg=None, lineno=180)
DEBUG 2022-02-14 16:46:35,679 stack ['$phi242.0', '$phi242.1', '$phi242.2', '$comb244.4', '$254build_tuple.9', '$258binary_subscr.12', '$288binary_multiply.27']
DEBUG 2022-02-14 16:46:35,679 dispatch pc=292, inst=ROT_THREE(arg=None, lineno=180)
DEBUG 2022-02-14 16:46:35,679 stack ['$phi242.0', '$phi242.1', '$phi242.2', '$comb244.4', '$254build_tuple.9', '$290inplace_add.28']
DEBUG 2022-02-14 16:46:35,679 dispatch pc=294, inst=STORE_SUBSCR(arg=None, lineno=180)
DEBUG 2022-02-14 16:46:35,679 stack ['$phi242.0', '$phi242.1', '$phi242.2', '$290inplace_add.28', '$comb244.4', '$254build_tuple.9']
DEBUG 2022-02-14 16:46:35,679 dispatch pc=296, inst=JUMP_ABSOLUTE(arg=240, lineno=180)
DEBUG 2022-02-14 16:46:35,679 stack ['$phi242.0', '$phi242.1', '$phi242.2']
DEBUG 2022-02-14 16:46:35,679 end state. edges=[Edge(pc=240, stack=('$phi242.0', '$phi242.1', '$phi242.2'), blockstack=(), npush=0)]
DEBUG 2022-02-14 16:46:35,679 pending: deque([State(pc_initial=202 nstack_initial=2), State(pc_initial=240 nstack_initial=3)])
DEBUG 2022-02-14 16:46:35,679 pending: deque([State(pc_initial=240 nstack_initial=3)])
DEBUG 2022-02-14 16:46:35,679 -------------------------Prune PHIs-------------------------
DEBUG 2022-02-14 16:46:35,679 Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=60 nstack_initial=1): {'$phi60.0'},
             State(pc_initial=62 nstack_initial=2): {'$phi62.1'},
             State(pc_initial=72 nstack_initial=1): set(),
             State(pc_initial=78 nstack_initial=1): set(),
             State(pc_initial=90 nstack_initial=1): set(),
             State(pc_initial=124 nstack_initial=1): set(),
             State(pc_initial=140 nstack_initial=1): set(),
             State(pc_initial=202 nstack_initial=2): {'$phi202.1'},
             State(pc_initial=204 nstack_initial=3): {'$phi204.2'},
             State(pc_initial=240 nstack_initial=3): {'$phi240.2'},
             State(pc_initial=242 nstack_initial=4): {'$phi242.3'},
             State(pc_initial=298 nstack_initial=2): set(),
             State(pc_initial=300 nstack_initial=1): set(),
             State(pc_initial=302 nstack_initial=0): set()})
DEBUG 2022-02-14 16:46:35,680 defmap: {'$phi202.1': State(pc_initial=140 nstack_initial=1),
 '$phi204.2': State(pc_initial=202 nstack_initial=2),
 '$phi240.2': State(pc_initial=204 nstack_initial=3),
 '$phi242.3': State(pc_initial=240 nstack_initial=3),
 '$phi60.0': State(pc_initial=0 nstack_initial=0),
 '$phi62.1': State(pc_initial=60 nstack_initial=1)}
DEBUG 2022-02-14 16:46:35,680 phismap: defaultdict(<class 'set'>,
            {'$phi124.0': {('$phi78.0', State(pc_initial=78 nstack_initial=1))},
             '$phi140.0': {('$phi124.0',
                            State(pc_initial=124 nstack_initial=1)),
                           ('$phi72.0', State(pc_initial=72 nstack_initial=1)),
                           ('$phi90.0', State(pc_initial=90 nstack_initial=1))},
             '$phi202.0': {('$phi140.0',
                            State(pc_initial=140 nstack_initial=1)),
                           ('$phi298.0',
                            State(pc_initial=298 nstack_initial=2))},
             '$phi202.1': {('$200get_iter.30',
                            State(pc_initial=140 nstack_initial=1)),
                           ('$phi298.1',
                            State(pc_initial=298 nstack_initial=2))},
             '$phi204.0': {('$phi202.0',
                            State(pc_initial=202 nstack_initial=2))},
             '$phi204.1': {('$phi202.1',
                            State(pc_initial=202 nstack_initial=2))},
             '$phi204.2': {('$202for_iter.3',
                            State(pc_initial=202 nstack_initial=2))},
             '$phi240.0': {('$phi204.0',
                            State(pc_initial=204 nstack_initial=3)),
                           ('$phi242.0',
                            State(pc_initial=242 nstack_initial=4))},
             '$phi240.1': {('$phi204.1',
                            State(pc_initial=204 nstack_initial=3)),
                           ('$phi242.1',
                            State(pc_initial=242 nstack_initial=4))},
             '$phi240.2': {('$238get_iter.18',
                            State(pc_initial=204 nstack_initial=3)),
                           ('$phi242.2',
                            State(pc_initial=242 nstack_initial=4))},
             '$phi242.0': {('$phi240.0',
                            State(pc_initial=240 nstack_initial=3))},
             '$phi242.1': {('$phi240.1',
                            State(pc_initial=240 nstack_initial=3))},
             '$phi242.2': {('$phi240.2',
                            State(pc_initial=240 nstack_initial=3))},
             '$phi242.3': {('$240for_iter.4',
                            State(pc_initial=240 nstack_initial=3))},
             '$phi298.0': {('$phi240.0',
                            State(pc_initial=240 nstack_initial=3))},
             '$phi298.1': {('$phi240.1',
                            State(pc_initial=240 nstack_initial=3))},
             '$phi300.0': {('$phi202.0',
                            State(pc_initial=202 nstack_initial=2))},
             '$phi60.0': {('$58get_iter.24',
                           State(pc_initial=0 nstack_initial=0)),
                          ('$phi300.0',
                           State(pc_initial=300 nstack_initial=1))},
             '$phi62.0': {('$phi60.0', State(pc_initial=60 nstack_initial=1))},
             '$phi62.1': {('$60for_iter.2',
                           State(pc_initial=60 nstack_initial=1))},
             '$phi72.0': {('$phi62.0', State(pc_initial=62 nstack_initial=2))},
             '$phi78.0': {('$phi62.0', State(pc_initial=62 nstack_initial=2))},
             '$phi90.0': {('$phi78.0', State(pc_initial=78 nstack_initial=1))}})
DEBUG 2022-02-14 16:46:35,681 changing phismap: defaultdict(<class 'set'>,
            {'$phi124.0': {('$phi62.0', State(pc_initial=62 nstack_initial=2))},
             '$phi140.0': {('$phi62.0', State(pc_initial=62 nstack_initial=2)),
                           ('$phi78.0', State(pc_initial=78 nstack_initial=1))},
             '$phi202.0': {('$phi240.0',
                            State(pc_initial=240 nstack_initial=3)),
                           ('$phi62.0', State(pc_initial=62 nstack_initial=2)),
                           ('$phi78.0', State(pc_initial=78 nstack_initial=1))},
             '$phi202.1': {('$200get_iter.30',
                            State(pc_initial=140 nstack_initial=1)),
                           ('$phi240.1',
                            State(pc_initial=240 nstack_initial=3))},
             '$phi204.0': {('$phi240.0',
                            State(pc_initial=240 nstack_initial=3)),
                           ('$phi62.0', State(pc_initial=62 nstack_initial=2)),
                           ('$phi78.0', State(pc_initial=78 nstack_initial=1))},
             '$phi204.1': {('$200get_iter.30',
                            State(pc_initial=140 nstack_initial=1)),
                           ('$phi240.1',
                            State(pc_initial=240 nstack_initial=3))},
             '$phi204.2': {('$202for_iter.3',
                            State(pc_initial=202 nstack_initial=2))},
             '$phi240.0': {('$phi240.0',
                            State(pc_initial=240 nstack_initial=3)),
                           ('$phi62.0', State(pc_initial=62 nstack_initial=2)),
                           ('$phi78.0', State(pc_initial=78 nstack_initial=1))},
             '$phi240.1': {('$200get_iter.30',
                            State(pc_initial=140 nstack_initial=1)),
                           ('$phi240.1',
                            State(pc_initial=240 nstack_initial=3))},
             '$phi240.2': {('$238get_iter.18',
                            State(pc_initial=204 nstack_initial=3)),
                           ('$phi240.2',
                            State(pc_initial=240 nstack_initial=3))},
             '$phi242.0': {('$phi62.0', State(pc_initial=62 nstack_initial=2)),
                           ('$phi78.0', State(pc_initial=78 nstack_initial=1))},
             '$phi242.1': {('$200get_iter.30',
                            State(pc_initial=140 nstack_initial=1))},
             '$phi242.2': {('$238get_iter.18',
                            State(pc_initial=204 nstack_initial=3))},
             '$phi242.3': {('$240for_iter.4',
                            State(pc_initial=240 nstack_initial=3))},
             '$phi298.0': {('$phi62.0', State(pc_initial=62 nstack_initial=2)),
                           ('$phi78.0', State(pc_initial=78 nstack_initial=1))},
             '$phi298.1': {('$200get_iter.30',
                            State(pc_initial=140 nstack_initial=1))},
             '$phi300.0': {('$phi240.0',
                            State(pc_initial=240 nstack_initial=3)),
                           ('$phi62.0', State(pc_initial=62 nstack_initial=2)),
                           ('$phi78.0', State(pc_initial=78 nstack_initial=1))},
             '$phi60.0': {('$58get_iter.24',
                           State(pc_initial=0 nstack_initial=0)),
                          ('$phi240.0', State(pc_initial=240 nstack_initial=3)),
                          ('$phi62.0', State(pc_initial=62 nstack_initial=2)),
                          ('$phi78.0', State(pc_initial=78 nstack_initial=1))},
             '$phi62.0': {('$58get_iter.24',
                           State(pc_initial=0 nstack_initial=0)),
                          ('$phi240.0', State(pc_initial=240 nstack_initial=3)),
                          ('$phi62.0', State(pc_initial=62 nstack_initial=2)),
                          ('$phi78.0', State(pc_initial=78 nstack_initial=1))},
             '$phi62.1': {('$60for_iter.2',
                           State(pc_initial=60 nstack_initial=1))},
             '$phi72.0': {('$58get_iter.24',
                           State(pc_initial=0 nstack_initial=0)),
                          ('$phi240.0', State(pc_initial=240 nstack_initial=3)),
                          ('$phi78.0', State(pc_initial=78 nstack_initial=1))},
             '$phi78.0': {('$58get_iter.24',
                           State(pc_initial=0 nstack_initial=0)),
                          ('$phi240.0', State(pc_initial=240 nstack_initial=3)),
                          ('$phi78.0', State(pc_initial=78 nstack_initial=1))},
             '$phi90.0': {('$58get_iter.24',
                           State(pc_initial=0 nstack_initial=0)),
                          ('$phi240.0',
                           State(pc_initial=240 nstack_initial=3))}})
DEBUG 2022-02-14 16:46:35,682 changing phismap: defaultdict(<class 'set'>,
            {'$phi124.0': {('$58get_iter.24',
                            State(pc_initial=0 nstack_initial=0)),
                           ('$phi240.0',
                            State(pc_initial=240 nstack_initial=3))},
             '$phi140.0': {('$58get_iter.24',
                            State(pc_initial=0 nstack_initial=0)),
                           ('$phi240.0',
                            State(pc_initial=240 nstack_initial=3))},
             '$phi202.0': {('$58get_iter.24',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi202.1': {('$200get_iter.30',
                            State(pc_initial=140 nstack_initial=1))},
             '$phi204.0': {('$58get_iter.24',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi204.1': {('$200get_iter.30',
                            State(pc_initial=140 nstack_initial=1))},
             '$phi204.2': {('$202for_iter.3',
                            State(pc_initial=202 nstack_initial=2))},
             '$phi240.0': {('$58get_iter.24',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi240.1': {('$200get_iter.30',
                            State(pc_initial=140 nstack_initial=1))},
             '$phi240.2': {('$238get_iter.18',
                            State(pc_initial=204 nstack_initial=3))},
             '$phi242.0': {('$58get_iter.24',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi242.1': {('$200get_iter.30',
                            State(pc_initial=140 nstack_initial=1))},
             '$phi242.2': {('$238get_iter.18',
                            State(pc_initial=204 nstack_initial=3))},
             '$phi242.3': {('$240for_iter.4',
                            State(pc_initial=240 nstack_initial=3))},
             '$phi298.0': {('$58get_iter.24',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi298.1': {('$200get_iter.30',
                            State(pc_initial=140 nstack_initial=1))},
             '$phi300.0': {('$58get_iter.24',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi60.0': {('$58get_iter.24',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi62.0': {('$58get_iter.24',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi62.1': {('$60for_iter.2',
                           State(pc_initial=60 nstack_initial=1))},
             '$phi72.0': {('$58get_iter.24',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi78.0': {('$58get_iter.24',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi90.0': {('$58get_iter.24',
                           State(pc_initial=0 nstack_initial=0))}})
DEBUG 2022-02-14 16:46:35,683 changing phismap: defaultdict(<class 'set'>,
            {'$phi124.0': {('$58get_iter.24',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi140.0': {('$58get_iter.24',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi202.0': {('$58get_iter.24',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi202.1': {('$200get_iter.30',
                            State(pc_initial=140 nstack_initial=1))},
             '$phi204.0': {('$58get_iter.24',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi204.1': {('$200get_iter.30',
                            State(pc_initial=140 nstack_initial=1))},
             '$phi204.2': {('$202for_iter.3',
                            State(pc_initial=202 nstack_initial=2))},
             '$phi240.0': {('$58get_iter.24',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi240.1': {('$200get_iter.30',
                            State(pc_initial=140 nstack_initial=1))},
             '$phi240.2': {('$238get_iter.18',
                            State(pc_initial=204 nstack_initial=3))},
             '$phi242.0': {('$58get_iter.24',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi242.1': {('$200get_iter.30',
                            State(pc_initial=140 nstack_initial=1))},
             '$phi242.2': {('$238get_iter.18',
                            State(pc_initial=204 nstack_initial=3))},
             '$phi242.3': {('$240for_iter.4',
                            State(pc_initial=240 nstack_initial=3))},
             '$phi298.0': {('$58get_iter.24',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi298.1': {('$200get_iter.30',
                            State(pc_initial=140 nstack_initial=1))},
             '$phi300.0': {('$58get_iter.24',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi60.0': {('$58get_iter.24',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi62.0': {('$58get_iter.24',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi62.1': {('$60for_iter.2',
                           State(pc_initial=60 nstack_initial=1))},
             '$phi72.0': {('$58get_iter.24',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi78.0': {('$58get_iter.24',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi90.0': {('$58get_iter.24',
                           State(pc_initial=0 nstack_initial=0))}})
DEBUG 2022-02-14 16:46:35,683 changing phismap: defaultdict(<class 'set'>,
            {'$phi124.0': {('$58get_iter.24',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi140.0': {('$58get_iter.24',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi202.0': {('$58get_iter.24',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi202.1': {('$200get_iter.30',
                            State(pc_initial=140 nstack_initial=1))},
             '$phi204.0': {('$58get_iter.24',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi204.1': {('$200get_iter.30',
                            State(pc_initial=140 nstack_initial=1))},
             '$phi204.2': {('$202for_iter.3',
                            State(pc_initial=202 nstack_initial=2))},
             '$phi240.0': {('$58get_iter.24',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi240.1': {('$200get_iter.30',
                            State(pc_initial=140 nstack_initial=1))},
             '$phi240.2': {('$238get_iter.18',
                            State(pc_initial=204 nstack_initial=3))},
             '$phi242.0': {('$58get_iter.24',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi242.1': {('$200get_iter.30',
                            State(pc_initial=140 nstack_initial=1))},
             '$phi242.2': {('$238get_iter.18',
                            State(pc_initial=204 nstack_initial=3))},
             '$phi242.3': {('$240for_iter.4',
                            State(pc_initial=240 nstack_initial=3))},
             '$phi298.0': {('$58get_iter.24',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi298.1': {('$200get_iter.30',
                            State(pc_initial=140 nstack_initial=1))},
             '$phi300.0': {('$58get_iter.24',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi60.0': {('$58get_iter.24',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi62.0': {('$58get_iter.24',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi62.1': {('$60for_iter.2',
                           State(pc_initial=60 nstack_initial=1))},
             '$phi72.0': {('$58get_iter.24',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi78.0': {('$58get_iter.24',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi90.0': {('$58get_iter.24',
                           State(pc_initial=0 nstack_initial=0))}})
DEBUG 2022-02-14 16:46:35,685 keep phismap: {'$phi202.1': {('$200get_iter.30', State(pc_initial=140 nstack_initial=1))},
 '$phi204.2': {('$202for_iter.3', State(pc_initial=202 nstack_initial=2))},
 '$phi240.2': {('$238get_iter.18', State(pc_initial=204 nstack_initial=3))},
 '$phi242.3': {('$240for_iter.4', State(pc_initial=240 nstack_initial=3))},
 '$phi60.0': {('$58get_iter.24', State(pc_initial=0 nstack_initial=0))},
 '$phi62.1': {('$60for_iter.2', State(pc_initial=60 nstack_initial=1))}}
DEBUG 2022-02-14 16:46:35,685 new_out: defaultdict(<class 'dict'>,
            {State(pc_initial=0 nstack_initial=0): {'$phi60.0': '$58get_iter.24'},
             State(pc_initial=60 nstack_initial=1): {'$phi62.1': '$60for_iter.2'},
             State(pc_initial=140 nstack_initial=1): {'$phi202.1': '$200get_iter.30'},
             State(pc_initial=202 nstack_initial=2): {'$phi204.2': '$202for_iter.3'},
             State(pc_initial=204 nstack_initial=3): {'$phi240.2': '$238get_iter.18'},
             State(pc_initial=240 nstack_initial=3): {'$phi242.3': '$240for_iter.4'}})
DEBUG 2022-02-14 16:46:35,685 ----------------------DONE Prune PHIs-----------------------
DEBUG 2022-02-14 16:46:35,685 block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$E2.0'}), (4, {'item': '$E2.0', 'res': '$4load_method.1'}), (6, {'func': '$4load_method.1', 'args': [], 'res': '$6call_method.2'}), (8, {'value': '$6call_method.2'}), (10, {'res': '$const10.3'}), (12, {'value': '$const10.3'}), (14, {'res': '$14load_global.4'}), (16, {'item': '$14load_global.4', 'res': '$16load_attr.5'}), (18, {'res': '$const18.6'}), (20, {'res': '$n20.7'}), (22, {'res': '$const22.8'}), (24, {'lhs': '$n20.7', 'rhs': '$const22.8', 'res': '$24binary_add.9'}), (26, {'items': ['$const18.6', '$24binary_add.9'], 'res': '$26build_tuple.10'}), (28, {'res': '$28load_global.11'}), (30, {'item': '$28load_global.11', 'res': '$30load_attr.12'}), (32, {'res': '$const32.13'}), (34, {'func': '$16load_attr.5', 'args': ['$26build_tuple.10', '$30load_attr.12'], 'names': '$const32.13', 'res': '$34call_function_kw.14'}), (36, {'value': '$34call_function_kw.14'}), (38, {'res': '$const38.15'}), (40, {'res': '$comb40.16'}), (42, {'res': '$const42.17'}), (44, {'target': '$comb40.16', 'index': '$const42.17', 'value': '$const38.15'}), (46, {'res': '$46load_global.18'}), (48, {'res': '$const48.19'}), (50, {'res': '$n50.20'}), (52, {'res': '$const52.21'}), (54, {'lhs': '$n50.20', 'rhs': '$const52.21', 'res': '$54binary_add.22'}), (56, {'func': '$46load_global.18', 'args': ['$const48.19', '$54binary_add.22'], 'res': '$56call_function.23'}), (58, {'value': '$56call_function.23', 'res': '$58get_iter.24'})), outgoing_phis={'$phi60.0': '$58get_iter.24'}, blockstack=(), active_try_block=None, outgoing_edgepushed={60: ('$58get_iter.24',)})
DEBUG 2022-02-14 16:46:35,685 block_infos State(pc_initial=60 nstack_initial=1):
AdaptBlockInfo(insts=((60, {'iterator': '$phi60.0', 'pair': '$60for_iter.1', 'indval': '$60for_iter.2', 'pred': '$60for_iter.3'}),), outgoing_phis={'$phi62.1': '$60for_iter.2'}, blockstack=(), active_try_block=None, outgoing_edgepushed={302: (), 62: ('$phi60.0', '$60for_iter.2')})
DEBUG 2022-02-14 16:46:35,685 block_infos State(pc_initial=62 nstack_initial=2):
AdaptBlockInfo(insts=((62, {'value': '$phi62.1'}), (64, {'res': '$i64.2'}), (66, {'res': '$const66.3'}), (68, {'lhs': '$i64.2', 'rhs': '$const66.3', 'res': '$68compare_op.4'}), (70, {'pred': '$68compare_op.4'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={72: ('$phi62.0',), 78: ('$phi62.0',)})
DEBUG 2022-02-14 16:46:35,686 block_infos State(pc_initial=72 nstack_initial=1):
AdaptBlockInfo(insts=((72, {'res': '$oddloop72.1'}), (74, {'value': '$oddloop72.1'}), (76, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={140: ('$phi72.0',)})
DEBUG 2022-02-14 16:46:35,686 block_infos State(pc_initial=78 nstack_initial=1):
AdaptBlockInfo(insts=((78, {'res': '$i78.1'}), (80, {'res': '$const80.2'}), (82, {'lhs': '$i78.1', 'rhs': '$const80.2', 'res': '$82binary_modulo.3'}), (84, {'res': '$const84.4'}), (86, {'lhs': '$82binary_modulo.3', 'rhs': '$const84.4', 'res': '$86compare_op.5'}), (88, {'pred': '$86compare_op.5'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={90: ('$phi78.0',), 124: ('$phi78.0',)})
DEBUG 2022-02-14 16:46:35,686 block_infos State(pc_initial=90 nstack_initial=1):
AdaptBlockInfo(insts=((90, {'res': '$E_k90.1'}), (92, {'item': '$E_k90.1', 'res': '$92load_method.2'}), (94, {'func': '$92load_method.2', 'args': [], 'res': '$94call_method.3'}), (96, {'res': '$i96.4'}), (98, {'lhs': '$94call_method.3', 'rhs': '$i96.4', 'res': '$98binary_true_divide.5'}), (100, {'res': '$XD_S100.6'}), (102, {'res': '$D_S102.7'}), (104, {'lhs': '$XD_S100.6', 'rhs': '$D_S102.7', 'res': '$104binary_matrix_multiply.8'}), (106, {'res': '$const106.9'}), (108, {'lhs': '$104binary_matrix_multiply.8', 'rhs': '$const106.9', 'res': '$108binary_true_divide.10'}), (110, {'lhs': '$98binary_true_divide.5', 'rhs': '$108binary_true_divide.10', 'res': '$110binary_add.11'}), (112, {'value': '$110binary_add.11'}), (114, {'res': '$E_k114.12'}), (116, {'res': '$E116.13'}), (118, {'lhs': '$E_k114.12', 'rhs': '$E116.13', 'res': '$118inplace_multiply.14'}), (120, {'value': '$118inplace_multiply.14'}), (122, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={140: ('$phi90.0',)})
DEBUG 2022-02-14 16:46:35,686 block_infos State(pc_initial=124 nstack_initial=1):
AdaptBlockInfo(insts=((124, {'res': '$oddVX_S124.1'}), (126, {'res': '$D_S126.2'}), (128, {'lhs': '$oddVX_S124.1', 'rhs': '$D_S126.2', 'res': '$128binary_matrix_multiply.3'}), (130, {'value': '$128binary_matrix_multiply.3'}), (132, {'res': '$AX_S132.4'}), (134, {'res': '$D_S134.5'}), (136, {'lhs': '$AX_S132.4', 'rhs': '$D_S134.5', 'res': '$136binary_matrix_multiply.6'}), (138, {'value': '$136binary_matrix_multiply.6'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={140: ('$phi124.0',)})
DEBUG 2022-02-14 16:46:35,686 block_infos State(pc_initial=140 nstack_initial=1):
AdaptBlockInfo(insts=((140, {'res': '$const140.1'}), (142, {'value': '$const140.1'}), (144, {'res': '$const144.2'}), (146, {'res': '$count146.3'}), (148, {'lhs': '$const144.2', 'rhs': '$count146.3', 'res': '$148binary_subtract.4'}), (150, {'value': '$148binary_subtract.4'}), (152, {'res': '$comb152.5'}), (154, {'res': '$const154.6'}), (156, {'res': '$count156.7'}), (158, {'lhs': '$const154.6', 'rhs': '$count156.7', 'res': '$158binary_subtract.8'}), (160, {'res': '$const160.9'}), (162, {'res': '$const162.10'}), (164, {'start': '$const160.9', 'stop': '$const162.10', 'step': None, 'res': '$164build_slice.12', 'slicevar': '$164build_slice.11'}), (166, {'items': ['$158binary_subtract.8', '$164build_slice.12'], 'res': '$166build_tuple.13'}), (168, {'index': '$166build_tuple.13', 'target': '$comb152.5', 'res': '$168binary_subscr.14'}), (170, {'res': '$comb170.15'}), (172, {'res': '$count172.16'}), (174, {'res': '$const174.17'}), (176, {'res': '$const176.18'}), (178, {'start': '$const174.17', 'stop': '$const176.18', 'step': None, 'res': '$178build_slice.20', 'slicevar': '$178build_slice.19'}), (180, {'items': ['$count172.16', '$178build_slice.20'], 'res': '$180build_tuple.21'}), (182, {'target': '$comb170.15', 'index': '$180build_tuple.21', 'value': '$168binary_subscr.14'}), (184, {'res': '$184load_global.22'}), (186, {'res': '$const186.23'}), (188, {'res': '$n188.24'}), (190, {'res': '$i190.25'}), (192, {'lhs': '$n188.24', 'rhs': '$i190.25', 'res': '$192binary_floor_divide.26'}), (194, {'res': '$const194.27'}), (196, {'lhs': '$192binary_floor_divide.26', 'rhs': '$const194.27', 'res': '$196binary_add.28'}), (198, {'func': '$184load_global.22', 'args': ['$const186.23', '$196binary_add.28'], 'res': '$198call_function.29'}), (200, {'value': '$198call_function.29', 'res': '$200get_iter.30'})), outgoing_phis={'$phi202.1': '$200get_iter.30'}, blockstack=(), active_try_block=None, outgoing_edgepushed={202: ('$phi140.0', '$200get_iter.30')})
DEBUG 2022-02-14 16:46:35,686 block_infos State(pc_initial=202 nstack_initial=2):
AdaptBlockInfo(insts=((202, {'iterator': '$phi202.1', 'pair': '$202for_iter.2', 'indval': '$202for_iter.3', 'pred': '$202for_iter.4'}),), outgoing_phis={'$phi204.2': '$202for_iter.3'}, blockstack=(), active_try_block=None, outgoing_edgepushed={300: ('$phi202.0',), 204: ('$phi202.0', '$phi202.1', '$202for_iter.3')})
DEBUG 2022-02-14 16:46:35,686 block_infos State(pc_initial=204 nstack_initial=3):
AdaptBlockInfo(insts=((204, {'value': '$phi204.2'}), (206, {'res': '$powfactor206.3'}), (208, {'res': '$factor208.4'}), (210, {'res': '$j210.5'}), (212, {'lhs': '$factor208.4', 'rhs': '$j210.5', 'res': '$212binary_true_divide.6'}), (214, {'lhs': '$powfactor206.3', 'rhs': '$212binary_true_divide.6', 'res': '$214inplace_multiply.7'}), (216, {'value': '$214inplace_multiply.7'}), (218, {'res': '$218load_global.8'}), (220, {'res': '$i220.9'}), (222, {'res': '$j222.10'}), (224, {'lhs': '$i220.9', 'rhs': '$j222.10', 'res': '$224binary_multiply.11'}), (226, {'res': '$const226.12'}), (228, {'lhs': '$224binary_multiply.11', 'rhs': '$const226.12', 'res': '$228binary_add.13'}), (230, {'res': '$n230.14'}), (232, {'res': '$const232.15'}), (234, {'lhs': '$n230.14', 'rhs': '$const232.15', 'res': '$234binary_add.16'}), (236, {'func': '$218load_global.8', 'args': ['$228binary_add.13', '$234binary_add.16'], 'res': '$236call_function.17'}), (238, {'value': '$236call_function.17', 'res': '$238get_iter.18'})), outgoing_phis={'$phi240.2': '$238get_iter.18'}, blockstack=(), active_try_block=None, outgoing_edgepushed={240: ('$phi204.0', '$phi204.1', '$238get_iter.18')})
DEBUG 2022-02-14 16:46:35,686 block_infos State(pc_initial=240 nstack_initial=3):
AdaptBlockInfo(insts=((240, {'iterator': '$phi240.2', 'pair': '$240for_iter.3', 'indval': '$240for_iter.4', 'pred': '$240for_iter.5'}),), outgoing_phis={'$phi242.3': '$240for_iter.4'}, blockstack=(), active_try_block=None, outgoing_edgepushed={298: ('$phi240.0', '$phi240.1'), 242: ('$phi240.0', '$phi240.1', '$phi240.2', '$240for_iter.4')})
DEBUG 2022-02-14 16:46:35,686 block_infos State(pc_initial=242 nstack_initial=4):
AdaptBlockInfo(insts=((242, {'value': '$phi242.3'}), (244, {'res': '$comb244.4'}), (246, {'res': '$count246.5'}), (248, {'res': '$k248.6'}), (250, {'res': '$const250.7'}), (252, {'lhs': '$k248.6', 'rhs': '$const250.7', 'res': '$252binary_subtract.8'}), (254, {'items': ['$count246.5', '$252binary_subtract.8'], 'res': '$254build_tuple.9'}), (256, {'orig': ['$comb244.4', '$254build_tuple.9'], 'duped': ['$256dup_top_two.10', '$256dup_top_two.11']}), (258, {'index': '$256dup_top_two.11', 'target': '$256dup_top_two.10', 'res': '$258binary_subscr.12'}), (260, {'res': '$comb260.13'}), (262, {'res': '$const262.14'}), (264, {'res': '$count264.15'}), (266, {'lhs': '$const262.14', 'rhs': '$count264.15', 'res': '$266binary_subtract.16'}), (268, {'res': '$k268.17'}), (270, {'res': '$i270.18'}), (272, {'res': '$j272.19'}), (274, {'lhs': '$i270.18', 'rhs': '$j272.19', 'res': '$274binary_multiply.20'}), (276, {'lhs': '$k268.17', 'rhs': '$274binary_multiply.20', 'res': '$276binary_subtract.21'}), (278, {'res': '$const278.22'}), (280, {'lhs': '$276binary_subtract.21', 'rhs': '$const278.22', 'res': '$280binary_subtract.23'}), (282, {'items': ['$266binary_subtract.16', '$280binary_subtract.23'], 'res': '$282build_tuple.24'}), (284, {'index': '$282build_tuple.24', 'target': '$comb260.13', 'res': '$284binary_subscr.25'}), (286, {'res': '$powfactor286.26'}), (288, {'lhs': '$284binary_subscr.25', 'rhs': '$powfactor286.26', 'res': '$288binary_multiply.27'}), (290, {'lhs': '$258binary_subscr.12', 'rhs': '$288binary_multiply.27', 'res': '$290inplace_add.28'}), (294, {'target': '$comb244.4', 'index': '$254build_tuple.9', 'value': '$290inplace_add.28'}), (296, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={240: ('$phi242.0', '$phi242.1', '$phi242.2')})
DEBUG 2022-02-14 16:46:35,686 block_infos State(pc_initial=298 nstack_initial=2):
AdaptBlockInfo(insts=((298, {}),), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={202: ('$phi298.0', '$phi298.1')})
DEBUG 2022-02-14 16:46:35,686 block_infos State(pc_initial=300 nstack_initial=1):
AdaptBlockInfo(insts=((300, {}),), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={60: ('$phi300.0',)})
DEBUG 2022-02-14 16:46:35,686 block_infos State(pc_initial=302 nstack_initial=0):
AdaptBlockInfo(insts=((302, {'res': '$comb302.0'}), (304, {'res': '$count304.1'}), (306, {'res': '$const306.2'}), (308, {'res': '$const308.3'}), (310, {'start': '$const306.2', 'stop': '$const308.3', 'step': None, 'res': '$310build_slice.5', 'slicevar': '$310build_slice.4'}), (312, {'items': ['$count304.1', '$310build_slice.5'], 'res': '$312build_tuple.6'}), (314, {'index': '$312build_tuple.6', 'target': '$comb302.0', 'res': '$314binary_subscr.7'}), (316, {'retval': '$314binary_subscr.7', 'castval': '$316return_value.8'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG 2022-02-14 16:46:35,690 label 0:
    E = arg(0, name=E)                       ['E']
    AX_S = arg(1, name=AX_S)                 ['AX_S']
    XD_S = arg(2, name=XD_S)                 ['XD_S']
    D_S = arg(3, name=D_S)                   ['D_S']
    n = arg(4, name=n)                       ['n']
    oddloop = arg(5, name=oddloop)           ['oddloop']
    oddVX_S = arg(6, name=oddVX_S)           ['oddVX_S']
    $4load_method.1 = getattr(value=E, attr=copy) ['$4load_method.1', 'E']
    E_k = call $4load_method.1(func=$4load_method.1, args=[], kws=(), vararg=None, target=None) ['$4load_method.1', 'E_k']
    count = const(int, 0)                    ['count']
    $14load_global.4 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>) ['$14load_global.4']
    $16load_attr.5 = getattr(value=$14load_global.4, attr=zeros) ['$14load_global.4', '$16load_attr.5']
    $const18.6 = const(int, 2)               ['$const18.6']
    $const22.8 = const(int, 1)               ['$const22.8']
    $24binary_add.9 = n + $const22.8         ['$24binary_add.9', '$const22.8', 'n']
    $26build_tuple.10 = build_tuple(items=[Var($const18.6, _loop_hafnian_subroutines.py:162), Var($24binary_add.9, _loop_hafnian_subroutines.py:162)]) ['$24binary_add.9', '$26build_tuple.10', '$const18.6']
    $28load_global.11 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>) ['$28load_global.11']
    $30load_attr.12 = getattr(value=$28load_global.11, attr=complex128) ['$28load_global.11', '$30load_attr.12']
    comb = call $16load_attr.5($26build_tuple.10, func=$16load_attr.5, args=[Var($26build_tuple.10, _loop_hafnian_subroutines.py:162)], kws=[('dtype', Var($30load_attr.12, _loop_hafnian_subroutines.py:162))], vararg=None, target=None) ['$16load_attr.5', '$26build_tuple.10', '$30load_attr.12', 'comb']
    $const38.15 = const(int, 1)              ['$const38.15']
    $const_0 = const(int, 0)                 ['$const_0']
    $const_0.1 = const(int, 0)               ['$const_0.1']
    $const42.17 = build_tuple(items=[Var($const_0, _loop_hafnian_subroutines.py:163), Var($const_0.1, _loop_hafnian_subroutines.py:163)]) ['$const42.17', '$const_0', '$const_0.1']
    comb[$const42.17] = $const38.15          ['$const38.15', '$const42.17', 'comb']
    $46load_global.18 = global(range: <class 'range'>) ['$46load_global.18']
    $const48.19 = const(int, 1)              ['$const48.19']
    $const52.21 = const(int, 1)              ['$const52.21']
    $54binary_add.22 = n + $const52.21       ['$54binary_add.22', '$const52.21', 'n']
    $56call_function.23 = call $46load_global.18($const48.19, $54binary_add.22, func=$46load_global.18, args=[Var($const48.19, _loop_hafnian_subroutines.py:164), Var($54binary_add.22, _loop_hafnian_subroutines.py:164)], kws=(), vararg=None, target=None) ['$46load_global.18', '$54binary_add.22', '$56call_function.23', '$const48.19']
    $58get_iter.24 = getiter(value=$56call_function.23) ['$56call_function.23', '$58get_iter.24']
    $phi60.0 = $58get_iter.24                ['$58get_iter.24', '$phi60.0']
    jump 60                                  []
label 60:
    $60for_iter.1 = iternext(value=$phi60.0) ['$60for_iter.1', '$phi60.0']
    $60for_iter.2 = pair_first(value=$60for_iter.1) ['$60for_iter.1', '$60for_iter.2']
    $60for_iter.3 = pair_second(value=$60for_iter.1) ['$60for_iter.1', '$60for_iter.3']
    $phi62.1 = $60for_iter.2                 ['$60for_iter.2', '$phi62.1']
    branch $60for_iter.3, 62, 302            ['$60for_iter.3']
label 62:
    i = $phi62.1                             ['$phi62.1', 'i']
    $const66.3 = const(int, 1)               ['$const66.3']
    $68compare_op.4 = i == $const66.3        ['$68compare_op.4', '$const66.3', 'i']
    bool70 = global(bool: <class 'bool'>)    ['bool70']
    $70pred = call bool70($68compare_op.4, func=bool70, args=(Var($68compare_op.4, _loop_hafnian_subroutines.py:165),), kws=(), vararg=None, target=None) ['$68compare_op.4', '$70pred', 'bool70']
    branch $70pred, 72, 78                   ['$70pred']
label 72:
    factor = oddloop                         ['factor', 'oddloop']
    jump 140                                 []
label 78:
    $const80.2 = const(int, 2)               ['$const80.2']
    $82binary_modulo.3 = i % $const80.2      ['$82binary_modulo.3', '$const80.2', 'i']
    $const84.4 = const(int, 0)               ['$const84.4']
    $86compare_op.5 = $82binary_modulo.3 == $const84.4 ['$82binary_modulo.3', '$86compare_op.5', '$const84.4']
    bool88 = global(bool: <class 'bool'>)    ['bool88']
    $88pred = call bool88($86compare_op.5, func=bool88, args=(Var($86compare_op.5, _loop_hafnian_subroutines.py:167),), kws=(), vararg=None, target=None) ['$86compare_op.5', '$88pred', 'bool88']
    branch $88pred, 90, 124                  ['$88pred']
label 90:
    $92load_method.2 = getattr(value=E_k, attr=sum) ['$92load_method.2', 'E_k']
    $94call_method.3 = call $92load_method.2(func=$92load_method.2, args=[], kws=(), vararg=None, target=None) ['$92load_method.2', '$94call_method.3']
    $98binary_true_divide.5 = $94call_method.3 / i ['$94call_method.3', '$98binary_true_divide.5', 'i']
    $104binary_matrix_multiply.8 = XD_S <built-in function matmul> D_S ['$104binary_matrix_multiply.8', 'D_S', 'XD_S']
    $const106.9 = const(int, 2)              ['$const106.9']
    $108binary_true_divide.10 = $104binary_matrix_multiply.8 / $const106.9 ['$104binary_matrix_multiply.8', '$108binary_true_divide.10', '$const106.9']
    factor = $98binary_true_divide.5 + $108binary_true_divide.10 ['$108binary_true_divide.10', '$98binary_true_divide.5', 'factor']
    $118inplace_multiply.14 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=E_k, rhs=E, static_lhs=Undefined, static_rhs=Undefined) ['$118inplace_multiply.14', 'E', 'E_k']
    E_k = $118inplace_multiply.14            ['$118inplace_multiply.14', 'E_k']
    jump 140                                 []
label 124:
    factor = oddVX_S <built-in function matmul> D_S ['D_S', 'factor', 'oddVX_S']
    $136binary_matrix_multiply.6 = AX_S <built-in function matmul> D_S ['$136binary_matrix_multiply.6', 'AX_S', 'D_S']
    D_S = $136binary_matrix_multiply.6       ['$136binary_matrix_multiply.6', 'D_S']
    jump 140                                 []
label 140:
    powfactor = const(int, 1)                ['powfactor']
    $const144.2 = const(int, 1)              ['$const144.2']
    $148binary_subtract.4 = $const144.2 - count ['$148binary_subtract.4', '$const144.2', 'count']
    count = $148binary_subtract.4            ['$148binary_subtract.4', 'count']
    $const154.6 = const(int, 1)              ['$const154.6']
    $158binary_subtract.8 = $const154.6 - count ['$158binary_subtract.8', '$const154.6', 'count']
    $const160.9 = const(NoneType, None)      ['$const160.9']
    $const162.10 = const(NoneType, None)     ['$const162.10']
    $164build_slice.11 = global(slice: <class 'slice'>) ['$164build_slice.11']
    $164build_slice.12 = call $164build_slice.11($const160.9, $const162.10, func=$164build_slice.11, args=(Var($const160.9, _loop_hafnian_subroutines.py:176), Var($const162.10, _loop_hafnian_subroutines.py:176)), kws=(), vararg=None, target=None) ['$164build_slice.11', '$164build_slice.12', '$const160.9', '$const162.10']
    $166build_tuple.13 = build_tuple(items=[Var($158binary_subtract.8, _loop_hafnian_subroutines.py:176), Var($164build_slice.12, _loop_hafnian_subroutines.py:176)]) ['$158binary_subtract.8', '$164build_slice.12', '$166build_tuple.13']
    $168binary_subscr.14 = getitem(value=comb, index=$166build_tuple.13, fn=<built-in function getitem>) ['$166build_tuple.13', '$168binary_subscr.14', 'comb']
    $const174.17 = const(NoneType, None)     ['$const174.17']
    $const176.18 = const(NoneType, None)     ['$const176.18']
    $178build_slice.19 = global(slice: <class 'slice'>) ['$178build_slice.19']
    $178build_slice.20 = call $178build_slice.19($const174.17, $const176.18, func=$178build_slice.19, args=(Var($const174.17, _loop_hafnian_subroutines.py:176), Var($const176.18, _loop_hafnian_subroutines.py:176)), kws=(), vararg=None, target=None) ['$178build_slice.19', '$178build_slice.20', '$const174.17', '$const176.18']
    $180build_tuple.21 = build_tuple(items=[Var(count, _loop_hafnian_subroutines.py:161), Var($178build_slice.20, _loop_hafnian_subroutines.py:176)]) ['$178build_slice.20', '$180build_tuple.21', 'count']
    comb[$180build_tuple.21] = $168binary_subscr.14 ['$168binary_subscr.14', '$180build_tuple.21', 'comb']
    $184load_global.22 = global(range: <class 'range'>) ['$184load_global.22']
    $const186.23 = const(int, 1)             ['$const186.23']
    $192binary_floor_divide.26 = n // i      ['$192binary_floor_divide.26', 'i', 'n']
    $const194.27 = const(int, 1)             ['$const194.27']
    $196binary_add.28 = $192binary_floor_divide.26 + $const194.27 ['$192binary_floor_divide.26', '$196binary_add.28', '$const194.27']
    $198call_function.29 = call $184load_global.22($const186.23, $196binary_add.28, func=$184load_global.22, args=[Var($const186.23, _loop_hafnian_subroutines.py:177), Var($196binary_add.28, _loop_hafnian_subroutines.py:177)], kws=(), vararg=None, target=None) ['$184load_global.22', '$196binary_add.28', '$198call_function.29', '$const186.23']
    $200get_iter.30 = getiter(value=$198call_function.29) ['$198call_function.29', '$200get_iter.30']
    $phi202.1 = $200get_iter.30              ['$200get_iter.30', '$phi202.1']
    jump 202                                 []
label 202:
    $202for_iter.2 = iternext(value=$phi202.1) ['$202for_iter.2', '$phi202.1']
    $202for_iter.3 = pair_first(value=$202for_iter.2) ['$202for_iter.2', '$202for_iter.3']
    $202for_iter.4 = pair_second(value=$202for_iter.2) ['$202for_iter.2', '$202for_iter.4']
    $phi204.2 = $202for_iter.3               ['$202for_iter.3', '$phi204.2']
    branch $202for_iter.4, 204, 300          ['$202for_iter.4']
label 204:
    j = $phi204.2                            ['$phi204.2', 'j']
    $212binary_true_divide.6 = factor / j    ['$212binary_true_divide.6', 'factor', 'j']
    $214inplace_multiply.7 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=powfactor, rhs=$212binary_true_divide.6, static_lhs=Undefined, static_rhs=Undefined) ['$212binary_true_divide.6', '$214inplace_multiply.7', 'powfactor']
    powfactor = $214inplace_multiply.7       ['$214inplace_multiply.7', 'powfactor']
    $218load_global.8 = global(range: <class 'range'>) ['$218load_global.8']
    $224binary_multiply.11 = i * j           ['$224binary_multiply.11', 'i', 'j']
    $const226.12 = const(int, 1)             ['$const226.12']
    $228binary_add.13 = $224binary_multiply.11 + $const226.12 ['$224binary_multiply.11', '$228binary_add.13', '$const226.12']
    $const232.15 = const(int, 2)             ['$const232.15']
    $234binary_add.16 = n + $const232.15     ['$234binary_add.16', '$const232.15', 'n']
    $236call_function.17 = call $218load_global.8($228binary_add.13, $234binary_add.16, func=$218load_global.8, args=[Var($228binary_add.13, _loop_hafnian_subroutines.py:179), Var($234binary_add.16, _loop_hafnian_subroutines.py:179)], kws=(), vararg=None, target=None) ['$218load_global.8', '$228binary_add.13', '$234binary_add.16', '$236call_function.17']
    $238get_iter.18 = getiter(value=$236call_function.17) ['$236call_function.17', '$238get_iter.18']
    $phi240.2 = $238get_iter.18              ['$238get_iter.18', '$phi240.2']
    jump 240                                 []
label 240:
    $240for_iter.3 = iternext(value=$phi240.2) ['$240for_iter.3', '$phi240.2']
    $240for_iter.4 = pair_first(value=$240for_iter.3) ['$240for_iter.3', '$240for_iter.4']
    $240for_iter.5 = pair_second(value=$240for_iter.3) ['$240for_iter.3', '$240for_iter.5']
    $phi242.3 = $240for_iter.4               ['$240for_iter.4', '$phi242.3']
    branch $240for_iter.5, 242, 298          ['$240for_iter.5']
label 242:
    k = $phi242.3                            ['$phi242.3', 'k']
    $const250.7 = const(int, 1)              ['$const250.7']
    $252binary_subtract.8 = k - $const250.7  ['$252binary_subtract.8', '$const250.7', 'k']
    $254build_tuple.9 = build_tuple(items=[Var(count, _loop_hafnian_subroutines.py:161), Var($252binary_subtract.8, _loop_hafnian_subroutines.py:180)]) ['$252binary_subtract.8', '$254build_tuple.9', 'count']
    $258binary_subscr.12 = getitem(value=comb, index=$254build_tuple.9, fn=<built-in function getitem>) ['$254build_tuple.9', '$258binary_subscr.12', 'comb']
    $const262.14 = const(int, 1)             ['$const262.14']
    $266binary_subtract.16 = $const262.14 - count ['$266binary_subtract.16', '$const262.14', 'count']
    $274binary_multiply.20 = i * j           ['$274binary_multiply.20', 'i', 'j']
    $276binary_subtract.21 = k - $274binary_multiply.20 ['$274binary_multiply.20', '$276binary_subtract.21', 'k']
    $const278.22 = const(int, 1)             ['$const278.22']
    $280binary_subtract.23 = $276binary_subtract.21 - $const278.22 ['$276binary_subtract.21', '$280binary_subtract.23', '$const278.22']
    $282build_tuple.24 = build_tuple(items=[Var($266binary_subtract.16, _loop_hafnian_subroutines.py:180), Var($280binary_subtract.23, _loop_hafnian_subroutines.py:180)]) ['$266binary_subtract.16', '$280binary_subtract.23', '$282build_tuple.24']
    $284binary_subscr.25 = getitem(value=comb, index=$282build_tuple.24, fn=<built-in function getitem>) ['$282build_tuple.24', '$284binary_subscr.25', 'comb']
    $288binary_multiply.27 = $284binary_subscr.25 * powfactor ['$284binary_subscr.25', '$288binary_multiply.27', 'powfactor']
    $290inplace_add.28 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$258binary_subscr.12, rhs=$288binary_multiply.27, static_lhs=Undefined, static_rhs=Undefined) ['$258binary_subscr.12', '$288binary_multiply.27', '$290inplace_add.28']
    comb[$254build_tuple.9] = $290inplace_add.28 ['$254build_tuple.9', '$290inplace_add.28', 'comb']
    jump 240                                 []
label 298:
    jump 202                                 []
label 300:
    jump 60                                  []
label 302:
    $const306.2 = const(NoneType, None)      ['$const306.2']
    $const308.3 = const(NoneType, None)      ['$const308.3']
    $310build_slice.4 = global(slice: <class 'slice'>) ['$310build_slice.4']
    $310build_slice.5 = call $310build_slice.4($const306.2, $const308.3, func=$310build_slice.4, args=(Var($const306.2, _loop_hafnian_subroutines.py:182), Var($const308.3, _loop_hafnian_subroutines.py:182)), kws=(), vararg=None, target=None) ['$310build_slice.4', '$310build_slice.5', '$const306.2', '$const308.3']
    $312build_tuple.6 = build_tuple(items=[Var(count, _loop_hafnian_subroutines.py:161), Var($310build_slice.5, _loop_hafnian_subroutines.py:182)]) ['$310build_slice.5', '$312build_tuple.6', 'count']
    $314binary_subscr.7 = getitem(value=comb, index=$312build_tuple.6, fn=<built-in function getitem>) ['$312build_tuple.6', '$314binary_subscr.7', 'comb']
    $316return_value.8 = cast(value=$314binary_subscr.7) ['$314binary_subscr.7', '$316return_value.8']
    return $316return_value.8                ['$316return_value.8']

DEBUG 2022-02-14 16:46:35,704 ==== SSA block analysis pass on 0
DEBUG 2022-02-14 16:46:35,704 Running <numba.core.ssa._GatherDefsHandler object at 0x7f72038aa4c0>
DEBUG 2022-02-14 16:46:35,704 on stmt: E = arg(0, name=E)
DEBUG 2022-02-14 16:46:35,704 on stmt: AX_S = arg(1, name=AX_S)
DEBUG 2022-02-14 16:46:35,704 on stmt: XD_S = arg(2, name=XD_S)
DEBUG 2022-02-14 16:46:35,705 on stmt: D_S = arg(3, name=D_S)
DEBUG 2022-02-14 16:46:35,705 on stmt: n = arg(4, name=n)
DEBUG 2022-02-14 16:46:35,705 on stmt: oddloop = arg(5, name=oddloop)
DEBUG 2022-02-14 16:46:35,705 on stmt: oddVX_S = arg(6, name=oddVX_S)
DEBUG 2022-02-14 16:46:35,705 on stmt: $4load_method.1 = getattr(value=E, attr=copy)
DEBUG 2022-02-14 16:46:35,705 on stmt: E_k = call $4load_method.1(func=$4load_method.1, args=[], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:46:35,705 on stmt: count = const(int, 0)
DEBUG 2022-02-14 16:46:35,705 on stmt: $14load_global.4 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:46:35,705 on stmt: $16load_attr.5 = getattr(value=$14load_global.4, attr=zeros)
DEBUG 2022-02-14 16:46:35,705 on stmt: $const18.6 = const(int, 2)
DEBUG 2022-02-14 16:46:35,705 on stmt: $const22.8 = const(int, 1)
DEBUG 2022-02-14 16:46:35,705 on stmt: $24binary_add.9 = n + $const22.8
DEBUG 2022-02-14 16:46:35,705 on stmt: $26build_tuple.10 = build_tuple(items=[Var($const18.6, _loop_hafnian_subroutines.py:162), Var($24binary_add.9, _loop_hafnian_subroutines.py:162)])
DEBUG 2022-02-14 16:46:35,705 on stmt: $28load_global.11 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:46:35,706 on stmt: $30load_attr.12 = getattr(value=$28load_global.11, attr=complex128)
DEBUG 2022-02-14 16:46:35,706 on stmt: comb = call $16load_attr.5($26build_tuple.10, func=$16load_attr.5, args=[Var($26build_tuple.10, _loop_hafnian_subroutines.py:162)], kws=[('dtype', Var($30load_attr.12, _loop_hafnian_subroutines.py:162))], vararg=None, target=None)
DEBUG 2022-02-14 16:46:35,706 on stmt: $const38.15 = const(int, 1)
DEBUG 2022-02-14 16:46:35,706 on stmt: $const_0 = const(int, 0)
DEBUG 2022-02-14 16:46:35,706 on stmt: $const_0.1 = const(int, 0)
DEBUG 2022-02-14 16:46:35,706 on stmt: $const42.17 = build_tuple(items=[Var($const_0, _loop_hafnian_subroutines.py:163), Var($const_0.1, _loop_hafnian_subroutines.py:163)])
DEBUG 2022-02-14 16:46:35,706 on stmt: comb[(0, 0)] = $const38.15
DEBUG 2022-02-14 16:46:35,706 on stmt: $46load_global.18 = global(range: <class 'range'>)
DEBUG 2022-02-14 16:46:35,706 on stmt: $const48.19 = const(int, 1)
DEBUG 2022-02-14 16:46:35,706 on stmt: $const52.21 = const(int, 1)
DEBUG 2022-02-14 16:46:35,706 on stmt: $54binary_add.22 = n + $const52.21
DEBUG 2022-02-14 16:46:35,707 on stmt: $56call_function.23 = call $46load_global.18($const48.19, $54binary_add.22, func=$46load_global.18, args=[Var($const48.19, _loop_hafnian_subroutines.py:164), Var($54binary_add.22, _loop_hafnian_subroutines.py:164)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:46:35,707 on stmt: $58get_iter.24 = getiter(value=$56call_function.23)
DEBUG 2022-02-14 16:46:35,707 on stmt: $phi60.0 = $58get_iter.24
DEBUG 2022-02-14 16:46:35,707 on stmt: jump 60
DEBUG 2022-02-14 16:46:35,707 ==== SSA block analysis pass on 60
DEBUG 2022-02-14 16:46:35,707 Running <numba.core.ssa._GatherDefsHandler object at 0x7f72038aa4c0>
DEBUG 2022-02-14 16:46:35,707 on stmt: $60for_iter.1 = iternext(value=$phi60.0)
DEBUG 2022-02-14 16:46:35,707 on stmt: $60for_iter.2 = pair_first(value=$60for_iter.1)
DEBUG 2022-02-14 16:46:35,707 on stmt: $60for_iter.3 = pair_second(value=$60for_iter.1)
DEBUG 2022-02-14 16:46:35,707 on stmt: $phi62.1 = $60for_iter.2
DEBUG 2022-02-14 16:46:35,707 on stmt: branch $60for_iter.3, 62, 302
DEBUG 2022-02-14 16:46:35,707 ==== SSA block analysis pass on 62
DEBUG 2022-02-14 16:46:35,707 Running <numba.core.ssa._GatherDefsHandler object at 0x7f72038aa4c0>
DEBUG 2022-02-14 16:46:35,707 on stmt: i = $phi62.1
DEBUG 2022-02-14 16:46:35,707 on stmt: $const66.3 = const(int, 1)
DEBUG 2022-02-14 16:46:35,708 on stmt: $68compare_op.4 = i == $const66.3
DEBUG 2022-02-14 16:46:35,708 on stmt: bool70 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:46:35,708 on stmt: $70pred = call bool70($68compare_op.4, func=bool70, args=(Var($68compare_op.4, _loop_hafnian_subroutines.py:165),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:46:35,708 on stmt: branch $70pred, 72, 78
DEBUG 2022-02-14 16:46:35,708 ==== SSA block analysis pass on 72
DEBUG 2022-02-14 16:46:35,708 Running <numba.core.ssa._GatherDefsHandler object at 0x7f72038aa4c0>
DEBUG 2022-02-14 16:46:35,708 on stmt: factor = oddloop
DEBUG 2022-02-14 16:46:35,708 on stmt: jump 140
DEBUG 2022-02-14 16:46:35,708 ==== SSA block analysis pass on 78
DEBUG 2022-02-14 16:46:35,708 Running <numba.core.ssa._GatherDefsHandler object at 0x7f72038aa4c0>
DEBUG 2022-02-14 16:46:35,708 on stmt: $const80.2 = const(int, 2)
DEBUG 2022-02-14 16:46:35,708 on stmt: $82binary_modulo.3 = i % $const80.2
DEBUG 2022-02-14 16:46:35,708 on stmt: $const84.4 = const(int, 0)
DEBUG 2022-02-14 16:46:35,708 on stmt: $86compare_op.5 = $82binary_modulo.3 == $const84.4
DEBUG 2022-02-14 16:46:35,709 on stmt: bool88 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:46:35,709 on stmt: $88pred = call bool88($86compare_op.5, func=bool88, args=(Var($86compare_op.5, _loop_hafnian_subroutines.py:167),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:46:35,709 on stmt: branch $88pred, 90, 124
DEBUG 2022-02-14 16:46:35,709 ==== SSA block analysis pass on 90
DEBUG 2022-02-14 16:46:35,709 Running <numba.core.ssa._GatherDefsHandler object at 0x7f72038aa4c0>
DEBUG 2022-02-14 16:46:35,709 on stmt: $92load_method.2 = getattr(value=E_k, attr=sum)
DEBUG 2022-02-14 16:46:35,709 on stmt: $94call_method.3 = call $92load_method.2(func=$92load_method.2, args=[], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:46:35,709 on stmt: $98binary_true_divide.5 = $94call_method.3 / i
DEBUG 2022-02-14 16:46:35,709 on stmt: $104binary_matrix_multiply.8 = XD_S <built-in function matmul> D_S
DEBUG 2022-02-14 16:46:35,709 on stmt: $const106.9 = const(int, 2)
DEBUG 2022-02-14 16:46:35,709 on stmt: $108binary_true_divide.10 = $104binary_matrix_multiply.8 / $const106.9
DEBUG 2022-02-14 16:46:35,709 on stmt: factor = $98binary_true_divide.5 + $108binary_true_divide.10
DEBUG 2022-02-14 16:46:35,709 on stmt: $118inplace_multiply.14 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=E_k, rhs=E, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:46:35,710 on stmt: E_k = $118inplace_multiply.14
DEBUG 2022-02-14 16:46:35,710 on stmt: jump 140
DEBUG 2022-02-14 16:46:35,710 ==== SSA block analysis pass on 124
DEBUG 2022-02-14 16:46:35,710 Running <numba.core.ssa._GatherDefsHandler object at 0x7f72038aa4c0>
DEBUG 2022-02-14 16:46:35,710 on stmt: factor = oddVX_S <built-in function matmul> D_S
DEBUG 2022-02-14 16:46:35,710 on stmt: $136binary_matrix_multiply.6 = AX_S <built-in function matmul> D_S
DEBUG 2022-02-14 16:46:35,710 on stmt: D_S = $136binary_matrix_multiply.6
DEBUG 2022-02-14 16:46:35,710 on stmt: jump 140
DEBUG 2022-02-14 16:46:35,710 ==== SSA block analysis pass on 140
DEBUG 2022-02-14 16:46:35,710 Running <numba.core.ssa._GatherDefsHandler object at 0x7f72038aa4c0>
DEBUG 2022-02-14 16:46:35,710 on stmt: powfactor = const(int, 1)
DEBUG 2022-02-14 16:46:35,710 on stmt: $const144.2 = const(int, 1)
DEBUG 2022-02-14 16:46:35,710 on stmt: $148binary_subtract.4 = $const144.2 - count
DEBUG 2022-02-14 16:46:35,710 on stmt: count = $148binary_subtract.4
DEBUG 2022-02-14 16:46:35,710 on stmt: $const154.6 = const(int, 1)
DEBUG 2022-02-14 16:46:35,710 on stmt: $158binary_subtract.8 = $const154.6 - count
DEBUG 2022-02-14 16:46:35,710 on stmt: $const160.9 = const(NoneType, None)
DEBUG 2022-02-14 16:46:35,710 on stmt: $const162.10 = const(NoneType, None)
DEBUG 2022-02-14 16:46:35,710 on stmt: $164build_slice.11 = global(slice: <class 'slice'>)
DEBUG 2022-02-14 16:46:35,710 on stmt: $164build_slice.12 = call $164build_slice.11($const160.9, $const162.10, func=$164build_slice.11, args=(Var($const160.9, _loop_hafnian_subroutines.py:176), Var($const162.10, _loop_hafnian_subroutines.py:176)), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:46:35,711 on stmt: $166build_tuple.13 = build_tuple(items=[Var($158binary_subtract.8, _loop_hafnian_subroutines.py:176), Var($164build_slice.12, _loop_hafnian_subroutines.py:176)])
DEBUG 2022-02-14 16:46:35,711 on stmt: $168binary_subscr.14 = getitem(value=comb, index=$166build_tuple.13, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:46:35,711 on stmt: $const174.17 = const(NoneType, None)
DEBUG 2022-02-14 16:46:35,711 on stmt: $const176.18 = const(NoneType, None)
DEBUG 2022-02-14 16:46:35,711 on stmt: $178build_slice.19 = global(slice: <class 'slice'>)
DEBUG 2022-02-14 16:46:35,711 on stmt: $178build_slice.20 = call $178build_slice.19($const174.17, $const176.18, func=$178build_slice.19, args=(Var($const174.17, _loop_hafnian_subroutines.py:176), Var($const176.18, _loop_hafnian_subroutines.py:176)), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:46:35,711 on stmt: $180build_tuple.21 = build_tuple(items=[Var(count, _loop_hafnian_subroutines.py:161), Var($178build_slice.20, _loop_hafnian_subroutines.py:176)])
DEBUG 2022-02-14 16:46:35,711 on stmt: comb[$180build_tuple.21] = $168binary_subscr.14
DEBUG 2022-02-14 16:46:35,711 on stmt: $184load_global.22 = global(range: <class 'range'>)
DEBUG 2022-02-14 16:46:35,711 on stmt: $const186.23 = const(int, 1)
DEBUG 2022-02-14 16:46:35,711 on stmt: $192binary_floor_divide.26 = n // i
DEBUG 2022-02-14 16:46:35,711 on stmt: $const194.27 = const(int, 1)
DEBUG 2022-02-14 16:46:35,711 on stmt: $196binary_add.28 = $192binary_floor_divide.26 + $const194.27
DEBUG 2022-02-14 16:46:35,711 on stmt: $198call_function.29 = call $184load_global.22($const186.23, $196binary_add.28, func=$184load_global.22, args=[Var($const186.23, _loop_hafnian_subroutines.py:177), Var($196binary_add.28, _loop_hafnian_subroutines.py:177)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:46:35,711 on stmt: $200get_iter.30 = getiter(value=$198call_function.29)
DEBUG 2022-02-14 16:46:35,711 on stmt: $phi202.1 = $200get_iter.30
DEBUG 2022-02-14 16:46:35,711 on stmt: jump 202
DEBUG 2022-02-14 16:46:35,711 ==== SSA block analysis pass on 202
DEBUG 2022-02-14 16:46:35,711 Running <numba.core.ssa._GatherDefsHandler object at 0x7f72038aa4c0>
DEBUG 2022-02-14 16:46:35,711 on stmt: $202for_iter.2 = iternext(value=$phi202.1)
DEBUG 2022-02-14 16:46:35,711 on stmt: $202for_iter.3 = pair_first(value=$202for_iter.2)
DEBUG 2022-02-14 16:46:35,711 on stmt: $202for_iter.4 = pair_second(value=$202for_iter.2)
DEBUG 2022-02-14 16:46:35,711 on stmt: $phi204.2 = $202for_iter.3
DEBUG 2022-02-14 16:46:35,711 on stmt: branch $202for_iter.4, 204, 300
DEBUG 2022-02-14 16:46:35,712 ==== SSA block analysis pass on 204
DEBUG 2022-02-14 16:46:35,712 Running <numba.core.ssa._GatherDefsHandler object at 0x7f72038aa4c0>
DEBUG 2022-02-14 16:46:35,712 on stmt: j = $phi204.2
DEBUG 2022-02-14 16:46:35,712 on stmt: $212binary_true_divide.6 = factor / j
DEBUG 2022-02-14 16:46:35,712 on stmt: $214inplace_multiply.7 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=powfactor, rhs=$212binary_true_divide.6, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:46:35,712 on stmt: powfactor = $214inplace_multiply.7
DEBUG 2022-02-14 16:46:35,712 on stmt: $218load_global.8 = global(range: <class 'range'>)
DEBUG 2022-02-14 16:46:35,712 on stmt: $224binary_multiply.11 = i * j
DEBUG 2022-02-14 16:46:35,712 on stmt: $const226.12 = const(int, 1)
DEBUG 2022-02-14 16:46:35,712 on stmt: $228binary_add.13 = $224binary_multiply.11 + $const226.12
DEBUG 2022-02-14 16:46:35,712 on stmt: $const232.15 = const(int, 2)
DEBUG 2022-02-14 16:46:35,712 on stmt: $234binary_add.16 = n + $const232.15
DEBUG 2022-02-14 16:46:35,712 on stmt: $236call_function.17 = call $218load_global.8($228binary_add.13, $234binary_add.16, func=$218load_global.8, args=[Var($228binary_add.13, _loop_hafnian_subroutines.py:179), Var($234binary_add.16, _loop_hafnian_subroutines.py:179)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:46:35,712 on stmt: $238get_iter.18 = getiter(value=$236call_function.17)
DEBUG 2022-02-14 16:46:35,712 on stmt: $phi240.2 = $238get_iter.18
DEBUG 2022-02-14 16:46:35,712 on stmt: jump 240
DEBUG 2022-02-14 16:46:35,712 ==== SSA block analysis pass on 240
DEBUG 2022-02-14 16:46:35,712 Running <numba.core.ssa._GatherDefsHandler object at 0x7f72038aa4c0>
DEBUG 2022-02-14 16:46:35,712 on stmt: $240for_iter.3 = iternext(value=$phi240.2)
DEBUG 2022-02-14 16:46:35,712 on stmt: $240for_iter.4 = pair_first(value=$240for_iter.3)
DEBUG 2022-02-14 16:46:35,712 on stmt: $240for_iter.5 = pair_second(value=$240for_iter.3)
DEBUG 2022-02-14 16:46:35,713 on stmt: $phi242.3 = $240for_iter.4
DEBUG 2022-02-14 16:46:35,713 on stmt: branch $240for_iter.5, 242, 298
DEBUG 2022-02-14 16:46:35,713 ==== SSA block analysis pass on 242
DEBUG 2022-02-14 16:46:35,713 Running <numba.core.ssa._GatherDefsHandler object at 0x7f72038aa4c0>
DEBUG 2022-02-14 16:46:35,713 on stmt: k = $phi242.3
DEBUG 2022-02-14 16:46:35,713 on stmt: $const250.7 = const(int, 1)
DEBUG 2022-02-14 16:46:35,713 on stmt: $252binary_subtract.8 = k - $const250.7
DEBUG 2022-02-14 16:46:35,713 on stmt: $254build_tuple.9 = build_tuple(items=[Var(count, _loop_hafnian_subroutines.py:161), Var($252binary_subtract.8, _loop_hafnian_subroutines.py:180)])
DEBUG 2022-02-14 16:46:35,713 on stmt: $258binary_subscr.12 = getitem(value=comb, index=$254build_tuple.9, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:46:35,713 on stmt: $const262.14 = const(int, 1)
DEBUG 2022-02-14 16:46:35,713 on stmt: $266binary_subtract.16 = $const262.14 - count
DEBUG 2022-02-14 16:46:35,713 on stmt: $274binary_multiply.20 = i * j
DEBUG 2022-02-14 16:46:35,713 on stmt: $276binary_subtract.21 = k - $274binary_multiply.20
DEBUG 2022-02-14 16:46:35,713 on stmt: $const278.22 = const(int, 1)
DEBUG 2022-02-14 16:46:35,713 on stmt: $280binary_subtract.23 = $276binary_subtract.21 - $const278.22
DEBUG 2022-02-14 16:46:35,713 on stmt: $282build_tuple.24 = build_tuple(items=[Var($266binary_subtract.16, _loop_hafnian_subroutines.py:180), Var($280binary_subtract.23, _loop_hafnian_subroutines.py:180)])
DEBUG 2022-02-14 16:46:35,713 on stmt: $284binary_subscr.25 = getitem(value=comb, index=$282build_tuple.24, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:46:35,713 on stmt: $288binary_multiply.27 = $284binary_subscr.25 * powfactor
DEBUG 2022-02-14 16:46:35,713 on stmt: $290inplace_add.28 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$258binary_subscr.12, rhs=$288binary_multiply.27, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:46:35,713 on stmt: comb[$254build_tuple.9] = $290inplace_add.28
DEBUG 2022-02-14 16:46:35,713 on stmt: jump 240
DEBUG 2022-02-14 16:46:35,713 ==== SSA block analysis pass on 298
DEBUG 2022-02-14 16:46:35,714 Running <numba.core.ssa._GatherDefsHandler object at 0x7f72038aa4c0>
DEBUG 2022-02-14 16:46:35,714 on stmt: jump 202
DEBUG 2022-02-14 16:46:35,714 ==== SSA block analysis pass on 300
DEBUG 2022-02-14 16:46:35,714 Running <numba.core.ssa._GatherDefsHandler object at 0x7f72038aa4c0>
DEBUG 2022-02-14 16:46:35,714 on stmt: jump 60
DEBUG 2022-02-14 16:46:35,714 ==== SSA block analysis pass on 302
DEBUG 2022-02-14 16:46:35,714 Running <numba.core.ssa._GatherDefsHandler object at 0x7f72038aa4c0>
DEBUG 2022-02-14 16:46:35,714 on stmt: $const306.2 = const(NoneType, None)
DEBUG 2022-02-14 16:46:35,714 on stmt: $const308.3 = const(NoneType, None)
DEBUG 2022-02-14 16:46:35,714 on stmt: $310build_slice.4 = global(slice: <class 'slice'>)
DEBUG 2022-02-14 16:46:35,714 on stmt: $310build_slice.5 = call $310build_slice.4($const306.2, $const308.3, func=$310build_slice.4, args=(Var($const306.2, _loop_hafnian_subroutines.py:182), Var($const308.3, _loop_hafnian_subroutines.py:182)), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:46:35,714 on stmt: $312build_tuple.6 = build_tuple(items=[Var(count, _loop_hafnian_subroutines.py:161), Var($310build_slice.5, _loop_hafnian_subroutines.py:182)])
DEBUG 2022-02-14 16:46:35,714 on stmt: $314binary_subscr.7 = getitem(value=comb, index=$312build_tuple.6, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:46:35,714 on stmt: $316return_value.8 = cast(value=$314binary_subscr.7)
DEBUG 2022-02-14 16:46:35,714 on stmt: return $316return_value.8
DEBUG 2022-02-14 16:46:35,715 defs defaultdict(<class 'list'>,
            {'$104binary_matrix_multiply.8': [<numba.core.ir.Assign object at 0x7f7203830880>],
             '$108binary_true_divide.10': [<numba.core.ir.Assign object at 0x7f7203830b80>],
             '$118inplace_multiply.14': [<numba.core.ir.Assign object at 0x7f72037ff1c0>],
             '$136binary_matrix_multiply.6': [<numba.core.ir.Assign object at 0x7f72037ff940>],
             '$148binary_subtract.4': [<numba.core.ir.Assign object at 0x7f72037fffa0>],
             '$14load_global.4': [<numba.core.ir.Assign object at 0x7f7203839fd0>],
             '$158binary_subtract.8': [<numba.core.ir.Assign object at 0x7f72037d5c10>],
             '$164build_slice.11': [<numba.core.ir.Assign object at 0x7f72037d57f0>],
             '$164build_slice.12': [<numba.core.ir.Assign object at 0x7f72037d5100>],
             '$166build_tuple.13': [<numba.core.ir.Assign object at 0x7f72037d5430>],
             '$168binary_subscr.14': [<numba.core.ir.Assign object at 0x7f72037d52b0>],
             '$16load_attr.5': [<numba.core.ir.Assign object at 0x7f720383e190>],
             '$178build_slice.19': [<numba.core.ir.Assign object at 0x7f72037fb550>],
             '$178build_slice.20': [<numba.core.ir.Assign object at 0x7f72037fb670>],
             '$180build_tuple.21': [<numba.core.ir.Assign object at 0x7f72037fb820>],
             '$184load_global.22': [<numba.core.ir.Assign object at 0x7f72037fba30>],
             '$192binary_floor_divide.26': [<numba.core.ir.Assign object at 0x7f72037fbfa0>],
             '$196binary_add.28': [<numba.core.ir.Assign object at 0x7f72037e82e0>],
             '$198call_function.29': [<numba.core.ir.Assign object at 0x7f72037e8490>],
             '$200get_iter.30': [<numba.core.ir.Assign object at 0x7f72037e85b0>],
             '$202for_iter.2': [<numba.core.ir.Assign object at 0x7f72037e8610>],
             '$202for_iter.3': [<numba.core.ir.Assign object at 0x7f72037e8760>],
             '$202for_iter.4': [<numba.core.ir.Assign object at 0x7f72037e8880>],
             '$212binary_true_divide.6': [<numba.core.ir.Assign object at 0x7f72037f50a0>],
             '$214inplace_multiply.7': [<numba.core.ir.Assign object at 0x7f72037f5220>],
             '$218load_global.8': [<numba.core.ir.Assign object at 0x7f72037f5430>],
             '$224binary_multiply.11': [<numba.core.ir.Assign object at 0x7f72037f5820>],
             '$228binary_add.13': [<numba.core.ir.Assign object at 0x7f72037f5b20>],
             '$234binary_add.16': [<numba.core.ir.Assign object at 0x7f72037f5f40>],
             '$236call_function.17': [<numba.core.ir.Assign object at 0x7f72037e6130>],
             '$238get_iter.18': [<numba.core.ir.Assign object at 0x7f72037e6250>],
             '$240for_iter.3': [<numba.core.ir.Assign object at 0x7f72037e63a0>],
             '$240for_iter.4': [<numba.core.ir.Assign object at 0x7f72037e64c0>],
             '$240for_iter.5': [<numba.core.ir.Assign object at 0x7f72037e65e0>],
             '$24binary_add.9': [<numba.core.ir.Assign object at 0x7f720383e760>],
             '$252binary_subtract.8': [<numba.core.ir.Assign object at 0x7f72037e6f40>],
             '$254build_tuple.9': [<numba.core.ir.Assign object at 0x7f72037e7100>],
             '$258binary_subscr.12': [<numba.core.ir.Assign object at 0x7f72037e7460>],
             '$266binary_subtract.16': [<numba.core.ir.Assign object at 0x7f72037e79a0>],
             '$26build_tuple.10': [<numba.core.ir.Assign object at 0x7f720383e8e0>],
             '$274binary_multiply.20': [<numba.core.ir.Assign object at 0x7f72037e7e80>],
             '$276binary_subtract.21': [<numba.core.ir.Assign object at 0x7f72037ef040>],
             '$280binary_subtract.23': [<numba.core.ir.Assign object at 0x7f72037ef340>],
             '$282build_tuple.24': [<numba.core.ir.Assign object at 0x7f72037ef4c0>],
             '$284binary_subscr.25': [<numba.core.ir.Assign object at 0x7f72037ef640>],
             '$288binary_multiply.27': [<numba.core.ir.Assign object at 0x7f72037ef8e0>],
             '$28load_global.11': [<numba.core.ir.Assign object at 0x7f720383ea30>],
             '$290inplace_add.28': [<numba.core.ir.Assign object at 0x7f72037efa60>],
             '$30load_attr.12': [<numba.core.ir.Assign object at 0x7f720383ebb0>],
             '$310build_slice.4': [<numba.core.ir.Assign object at 0x7f72037eb250>],
             '$310build_slice.5': [<numba.core.ir.Assign object at 0x7f72037eb370>],
             '$312build_tuple.6': [<numba.core.ir.Assign object at 0x7f72037eb520>],
             '$314binary_subscr.7': [<numba.core.ir.Assign object at 0x7f72037eb6a0>],
             '$316return_value.8': [<numba.core.ir.Assign object at 0x7f72037eb7f0>],
             '$46load_global.18': [<numba.core.ir.Assign object at 0x7f7203841910>],
             '$4load_method.1': [<numba.core.ir.Assign object at 0x7f7203839910>],
             '$54binary_add.22': [<numba.core.ir.Assign object at 0x7f7203841ee0>],
             '$56call_function.23': [<numba.core.ir.Assign object at 0x7f720383d0d0>],
             '$58get_iter.24': [<numba.core.ir.Assign object at 0x7f720383d1f0>],
             '$60for_iter.1': [<numba.core.ir.Assign object at 0x7f720383d2e0>],
             '$60for_iter.2': [<numba.core.ir.Assign object at 0x7f720383d400>],
             '$60for_iter.3': [<numba.core.ir.Assign object at 0x7f720383d520>],
             '$68compare_op.4': [<numba.core.ir.Assign object at 0x7f720383dc40>],
             '$70pred': [<numba.core.ir.Assign object at 0x7f720383deb0>],
             '$82binary_modulo.3': [<numba.core.ir.Assign object at 0x7f7203835760>],
             '$86compare_op.5': [<numba.core.ir.Assign object at 0x7f7203835a60>],
             '$88pred': [<numba.core.ir.Assign object at 0x7f7203835cd0>],
             '$92load_method.2': [<numba.core.ir.Assign object at 0x7f7203830070>],
             '$94call_method.3': [<numba.core.ir.Assign object at 0x7f7203830280>],
             '$98binary_true_divide.5': [<numba.core.ir.Assign object at 0x7f72038304c0>],
             '$const106.9': [<numba.core.ir.Assign object at 0x7f72038309d0>],
             '$const144.2': [<numba.core.ir.Assign object at 0x7f72037ffcd0>],
             '$const154.6': [<numba.core.ir.Assign object at 0x7f72037d56d0>],
             '$const160.9': [<numba.core.ir.Assign object at 0x7f72037d5d60>],
             '$const162.10': [<numba.core.ir.Assign object at 0x7f72037d5ee0>],
             '$const174.17': [<numba.core.ir.Assign object at 0x7f72037fb250>],
             '$const176.18': [<numba.core.ir.Assign object at 0x7f72037fb3d0>],
             '$const18.6': [<numba.core.ir.Assign object at 0x7f720383e310>],
             '$const186.23': [<numba.core.ir.Assign object at 0x7f72037fbbb0>],
             '$const194.27': [<numba.core.ir.Assign object at 0x7f72037e8130>],
             '$const22.8': [<numba.core.ir.Assign object at 0x7f720383e5b0>],
             '$const226.12': [<numba.core.ir.Assign object at 0x7f72037f5970>],
             '$const232.15': [<numba.core.ir.Assign object at 0x7f72037f5d90>],
             '$const250.7': [<numba.core.ir.Assign object at 0x7f72037e6d90>],
             '$const262.14': [<numba.core.ir.Assign object at 0x7f72037e76d0>],
             '$const278.22': [<numba.core.ir.Assign object at 0x7f72037ef190>],
             '$const306.2': [<numba.core.ir.Assign object at 0x7f72037eff10>],
             '$const308.3': [<numba.core.ir.Assign object at 0x7f72037eb0d0>],
             '$const38.15': [<numba.core.ir.Assign object at 0x7f72038411f0>],
             '$const42.17': [<numba.core.ir.Assign object at 0x7f72038416d0>],
             '$const48.19': [<numba.core.ir.Assign object at 0x7f7203841a90>],
             '$const52.21': [<numba.core.ir.Assign object at 0x7f7203841d30>],
             '$const66.3': [<numba.core.ir.Assign object at 0x7f720383da90>],
             '$const80.2': [<numba.core.ir.Assign object at 0x7f72038355b0>],
             '$const84.4': [<numba.core.ir.Assign object at 0x7f72038358b0>],
             '$const_0': [<numba.core.ir.Assign object at 0x7f72038414c0>],
             '$const_0.1': [<numba.core.ir.Assign object at 0x7f72038415e0>],
             '$phi202.1': [<numba.core.ir.Assign object at 0x7f72037ffbe0>],
             '$phi204.2': [<numba.core.ir.Assign object at 0x7f72037fbd60>],
             '$phi240.2': [<numba.core.ir.Assign object at 0x7f72037e8d00>],
             '$phi242.3': [<numba.core.ir.Assign object at 0x7f72037e62b0>],
             '$phi60.0': [<numba.core.ir.Assign object at 0x7f7203839820>],
             '$phi62.1': [<numba.core.ir.Assign object at 0x7f72038aaa90>],
             'AX_S': [<numba.core.ir.Assign object at 0x7f72038390d0>],
             'D_S': [<numba.core.ir.Assign object at 0x7f7203839310>,
                     <numba.core.ir.Assign object at 0x7f72037ffa00>],
             'E': [<numba.core.ir.Assign object at 0x7f72038aad00>],
             'E_k': [<numba.core.ir.Assign object at 0x7f7203839b20>,
                     <numba.core.ir.Assign object at 0x7f72037ff280>],
             'XD_S': [<numba.core.ir.Assign object at 0x7f72038391f0>],
             'bool70': [<numba.core.ir.Assign object at 0x7f720383dd90>],
             'bool88': [<numba.core.ir.Assign object at 0x7f7203835bb0>],
             'comb': [<numba.core.ir.Assign object at 0x7f7203841070>],
             'count': [<numba.core.ir.Assign object at 0x7f7203839d30>,
                       <numba.core.ir.Assign object at 0x7f72037d5520>],
             'factor': [<numba.core.ir.Assign object at 0x7f72038351f0>,
                        <numba.core.ir.Assign object at 0x7f7203830d00>,
                        <numba.core.ir.Assign object at 0x7f72037ff4c0>],
             'i': [<numba.core.ir.Assign object at 0x7f720383d7f0>],
             'j': [<numba.core.ir.Assign object at 0x7f72037e8b50>],
             'k': [<numba.core.ir.Assign object at 0x7f72037e68b0>],
             'n': [<numba.core.ir.Assign object at 0x7f7203839430>],
             'oddVX_S': [<numba.core.ir.Assign object at 0x7f7203839670>],
             'oddloop': [<numba.core.ir.Assign object at 0x7f7203839550>],
             'powfactor': [<numba.core.ir.Assign object at 0x7f72037ff820>,
                           <numba.core.ir.Assign object at 0x7f72037f52e0>]})
DEBUG 2022-02-14 16:46:35,715 SSA violators {'powfactor', 'E_k', 'factor', 'count', 'D_S'}
DEBUG 2022-02-14 16:46:35,715 Fix SSA violator on var powfactor
DEBUG 2022-02-14 16:46:35,716 ==== SSA block rewrite pass on 0
DEBUG 2022-02-14 16:46:35,716 Running <numba.core.ssa._FreshVarHandler object at 0x7f72037ef730>
DEBUG 2022-02-14 16:46:35,716 on stmt: E = arg(0, name=E)
DEBUG 2022-02-14 16:46:35,716 on stmt: AX_S = arg(1, name=AX_S)
DEBUG 2022-02-14 16:46:35,716 on stmt: XD_S = arg(2, name=XD_S)
DEBUG 2022-02-14 16:46:35,716 on stmt: D_S = arg(3, name=D_S)
DEBUG 2022-02-14 16:46:35,716 on stmt: n = arg(4, name=n)
DEBUG 2022-02-14 16:46:35,716 on stmt: oddloop = arg(5, name=oddloop)
DEBUG 2022-02-14 16:46:35,716 on stmt: oddVX_S = arg(6, name=oddVX_S)
DEBUG 2022-02-14 16:46:35,716 on stmt: $4load_method.1 = getattr(value=E, attr=copy)
DEBUG 2022-02-14 16:46:35,716 on stmt: E_k = call $4load_method.1(func=$4load_method.1, args=[], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:46:35,716 on stmt: count = const(int, 0)
DEBUG 2022-02-14 16:46:35,716 on stmt: $14load_global.4 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:46:35,716 on stmt: $16load_attr.5 = getattr(value=$14load_global.4, attr=zeros)
DEBUG 2022-02-14 16:46:35,716 on stmt: $const18.6 = const(int, 2)
DEBUG 2022-02-14 16:46:35,716 on stmt: $const22.8 = const(int, 1)
DEBUG 2022-02-14 16:46:35,716 on stmt: $24binary_add.9 = n + $const22.8
DEBUG 2022-02-14 16:46:35,716 on stmt: $26build_tuple.10 = build_tuple(items=[Var($const18.6, _loop_hafnian_subroutines.py:162), Var($24binary_add.9, _loop_hafnian_subroutines.py:162)])
DEBUG 2022-02-14 16:46:35,716 on stmt: $28load_global.11 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:46:35,716 on stmt: $30load_attr.12 = getattr(value=$28load_global.11, attr=complex128)
DEBUG 2022-02-14 16:46:35,716 on stmt: comb = call $16load_attr.5($26build_tuple.10, func=$16load_attr.5, args=[Var($26build_tuple.10, _loop_hafnian_subroutines.py:162)], kws=[('dtype', Var($30load_attr.12, _loop_hafnian_subroutines.py:162))], vararg=None, target=None)
DEBUG 2022-02-14 16:46:35,716 on stmt: $const38.15 = const(int, 1)
DEBUG 2022-02-14 16:46:35,716 on stmt: $const_0 = const(int, 0)
DEBUG 2022-02-14 16:46:35,716 on stmt: $const_0.1 = const(int, 0)
DEBUG 2022-02-14 16:46:35,716 on stmt: $const42.17 = build_tuple(items=[Var($const_0, _loop_hafnian_subroutines.py:163), Var($const_0.1, _loop_hafnian_subroutines.py:163)])
DEBUG 2022-02-14 16:46:35,717 on stmt: comb[(0, 0)] = $const38.15
DEBUG 2022-02-14 16:46:35,717 on stmt: $46load_global.18 = global(range: <class 'range'>)
DEBUG 2022-02-14 16:46:35,717 on stmt: $const48.19 = const(int, 1)
DEBUG 2022-02-14 16:46:35,717 on stmt: $const52.21 = const(int, 1)
DEBUG 2022-02-14 16:46:35,717 on stmt: $54binary_add.22 = n + $const52.21
DEBUG 2022-02-14 16:46:35,717 on stmt: $56call_function.23 = call $46load_global.18($const48.19, $54binary_add.22, func=$46load_global.18, args=[Var($const48.19, _loop_hafnian_subroutines.py:164), Var($54binary_add.22, _loop_hafnian_subroutines.py:164)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:46:35,717 on stmt: $58get_iter.24 = getiter(value=$56call_function.23)
DEBUG 2022-02-14 16:46:35,717 on stmt: $phi60.0 = $58get_iter.24
DEBUG 2022-02-14 16:46:35,717 on stmt: jump 60
DEBUG 2022-02-14 16:46:35,717 ==== SSA block rewrite pass on 60
DEBUG 2022-02-14 16:46:35,717 Running <numba.core.ssa._FreshVarHandler object at 0x7f72037ef730>
DEBUG 2022-02-14 16:46:35,717 on stmt: $60for_iter.1 = iternext(value=$phi60.0)
DEBUG 2022-02-14 16:46:35,717 on stmt: $60for_iter.2 = pair_first(value=$60for_iter.1)
DEBUG 2022-02-14 16:46:35,717 on stmt: $60for_iter.3 = pair_second(value=$60for_iter.1)
DEBUG 2022-02-14 16:46:35,718 on stmt: $phi62.1 = $60for_iter.2
DEBUG 2022-02-14 16:46:35,718 on stmt: branch $60for_iter.3, 62, 302
DEBUG 2022-02-14 16:46:35,718 ==== SSA block rewrite pass on 62
DEBUG 2022-02-14 16:46:35,718 Running <numba.core.ssa._FreshVarHandler object at 0x7f72037ef730>
DEBUG 2022-02-14 16:46:35,718 on stmt: i = $phi62.1
DEBUG 2022-02-14 16:46:35,718 on stmt: $const66.3 = const(int, 1)
DEBUG 2022-02-14 16:46:35,718 on stmt: $68compare_op.4 = i == $const66.3
DEBUG 2022-02-14 16:46:35,718 on stmt: bool70 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:46:35,718 on stmt: $70pred = call bool70($68compare_op.4, func=bool70, args=(Var($68compare_op.4, _loop_hafnian_subroutines.py:165),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:46:35,718 on stmt: branch $70pred, 72, 78
DEBUG 2022-02-14 16:46:35,718 ==== SSA block rewrite pass on 72
DEBUG 2022-02-14 16:46:35,718 Running <numba.core.ssa._FreshVarHandler object at 0x7f72037ef730>
DEBUG 2022-02-14 16:46:35,718 on stmt: factor = oddloop
DEBUG 2022-02-14 16:46:35,718 on stmt: jump 140
DEBUG 2022-02-14 16:46:35,718 ==== SSA block rewrite pass on 78
DEBUG 2022-02-14 16:46:35,718 Running <numba.core.ssa._FreshVarHandler object at 0x7f72037ef730>
DEBUG 2022-02-14 16:46:35,718 on stmt: $const80.2 = const(int, 2)
DEBUG 2022-02-14 16:46:35,718 on stmt: $82binary_modulo.3 = i % $const80.2
DEBUG 2022-02-14 16:46:35,718 on stmt: $const84.4 = const(int, 0)
DEBUG 2022-02-14 16:46:35,718 on stmt: $86compare_op.5 = $82binary_modulo.3 == $const84.4
DEBUG 2022-02-14 16:46:35,718 on stmt: bool88 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:46:35,718 on stmt: $88pred = call bool88($86compare_op.5, func=bool88, args=(Var($86compare_op.5, _loop_hafnian_subroutines.py:167),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:46:35,718 on stmt: branch $88pred, 90, 124
DEBUG 2022-02-14 16:46:35,718 ==== SSA block rewrite pass on 90
DEBUG 2022-02-14 16:46:35,719 Running <numba.core.ssa._FreshVarHandler object at 0x7f72037ef730>
DEBUG 2022-02-14 16:46:35,719 on stmt: $92load_method.2 = getattr(value=E_k, attr=sum)
DEBUG 2022-02-14 16:46:35,719 on stmt: $94call_method.3 = call $92load_method.2(func=$92load_method.2, args=[], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:46:35,719 on stmt: $98binary_true_divide.5 = $94call_method.3 / i
DEBUG 2022-02-14 16:46:35,719 on stmt: $104binary_matrix_multiply.8 = XD_S <built-in function matmul> D_S
DEBUG 2022-02-14 16:46:35,719 on stmt: $const106.9 = const(int, 2)
DEBUG 2022-02-14 16:46:35,719 on stmt: $108binary_true_divide.10 = $104binary_matrix_multiply.8 / $const106.9
DEBUG 2022-02-14 16:46:35,719 on stmt: factor = $98binary_true_divide.5 + $108binary_true_divide.10
DEBUG 2022-02-14 16:46:35,719 on stmt: $118inplace_multiply.14 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=E_k, rhs=E, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:46:35,719 on stmt: E_k = $118inplace_multiply.14
DEBUG 2022-02-14 16:46:35,719 on stmt: jump 140
DEBUG 2022-02-14 16:46:35,719 ==== SSA block rewrite pass on 124
DEBUG 2022-02-14 16:46:35,719 Running <numba.core.ssa._FreshVarHandler object at 0x7f72037ef730>
DEBUG 2022-02-14 16:46:35,719 on stmt: factor = oddVX_S <built-in function matmul> D_S
DEBUG 2022-02-14 16:46:35,719 on stmt: $136binary_matrix_multiply.6 = AX_S <built-in function matmul> D_S
DEBUG 2022-02-14 16:46:35,719 on stmt: D_S = $136binary_matrix_multiply.6
DEBUG 2022-02-14 16:46:35,719 on stmt: jump 140
DEBUG 2022-02-14 16:46:35,719 ==== SSA block rewrite pass on 140
DEBUG 2022-02-14 16:46:35,719 Running <numba.core.ssa._FreshVarHandler object at 0x7f72037ef730>
DEBUG 2022-02-14 16:46:35,719 on stmt: powfactor = const(int, 1)
DEBUG 2022-02-14 16:46:35,719 first assign: powfactor
DEBUG 2022-02-14 16:46:35,719 replaced with: powfactor = const(int, 1)
DEBUG 2022-02-14 16:46:35,719 on stmt: $const144.2 = const(int, 1)
DEBUG 2022-02-14 16:46:35,719 on stmt: $148binary_subtract.4 = $const144.2 - count
DEBUG 2022-02-14 16:46:35,719 on stmt: count = $148binary_subtract.4
DEBUG 2022-02-14 16:46:35,719 on stmt: $const154.6 = const(int, 1)
DEBUG 2022-02-14 16:46:35,719 on stmt: $158binary_subtract.8 = $const154.6 - count
DEBUG 2022-02-14 16:46:35,720 on stmt: $const160.9 = const(NoneType, None)
DEBUG 2022-02-14 16:46:35,720 on stmt: $const162.10 = const(NoneType, None)
DEBUG 2022-02-14 16:46:35,720 on stmt: $164build_slice.11 = global(slice: <class 'slice'>)
DEBUG 2022-02-14 16:46:35,720 on stmt: $164build_slice.12 = call $164build_slice.11($const160.9, $const162.10, func=$164build_slice.11, args=(Var($const160.9, _loop_hafnian_subroutines.py:176), Var($const162.10, _loop_hafnian_subroutines.py:176)), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:46:35,720 on stmt: $166build_tuple.13 = build_tuple(items=[Var($158binary_subtract.8, _loop_hafnian_subroutines.py:176), Var($164build_slice.12, _loop_hafnian_subroutines.py:176)])
DEBUG 2022-02-14 16:46:35,720 on stmt: $168binary_subscr.14 = getitem(value=comb, index=$166build_tuple.13, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:46:35,720 on stmt: $const174.17 = const(NoneType, None)
DEBUG 2022-02-14 16:46:35,720 on stmt: $const176.18 = const(NoneType, None)
DEBUG 2022-02-14 16:46:35,720 on stmt: $178build_slice.19 = global(slice: <class 'slice'>)
DEBUG 2022-02-14 16:46:35,720 on stmt: $178build_slice.20 = call $178build_slice.19($const174.17, $const176.18, func=$178build_slice.19, args=(Var($const174.17, _loop_hafnian_subroutines.py:176), Var($const176.18, _loop_hafnian_subroutines.py:176)), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:46:35,720 on stmt: $180build_tuple.21 = build_tuple(items=[Var(count, _loop_hafnian_subroutines.py:161), Var($178build_slice.20, _loop_hafnian_subroutines.py:176)])
DEBUG 2022-02-14 16:46:35,720 on stmt: comb[$180build_tuple.21] = $168binary_subscr.14
DEBUG 2022-02-14 16:46:35,720 on stmt: $184load_global.22 = global(range: <class 'range'>)
DEBUG 2022-02-14 16:46:35,720 on stmt: $const186.23 = const(int, 1)
DEBUG 2022-02-14 16:46:35,720 on stmt: $192binary_floor_divide.26 = n // i
DEBUG 2022-02-14 16:46:35,720 on stmt: $const194.27 = const(int, 1)
DEBUG 2022-02-14 16:46:35,720 on stmt: $196binary_add.28 = $192binary_floor_divide.26 + $const194.27
DEBUG 2022-02-14 16:46:35,720 on stmt: $198call_function.29 = call $184load_global.22($const186.23, $196binary_add.28, func=$184load_global.22, args=[Var($const186.23, _loop_hafnian_subroutines.py:177), Var($196binary_add.28, _loop_hafnian_subroutines.py:177)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:46:35,720 on stmt: $200get_iter.30 = getiter(value=$198call_function.29)
DEBUG 2022-02-14 16:46:35,720 on stmt: $phi202.1 = $200get_iter.30
DEBUG 2022-02-14 16:46:35,720 on stmt: jump 202
DEBUG 2022-02-14 16:46:35,720 ==== SSA block rewrite pass on 202
DEBUG 2022-02-14 16:46:35,720 Running <numba.core.ssa._FreshVarHandler object at 0x7f72037ef730>
DEBUG 2022-02-14 16:46:35,720 on stmt: $202for_iter.2 = iternext(value=$phi202.1)
DEBUG 2022-02-14 16:46:35,720 on stmt: $202for_iter.3 = pair_first(value=$202for_iter.2)
DEBUG 2022-02-14 16:46:35,721 on stmt: $202for_iter.4 = pair_second(value=$202for_iter.2)
DEBUG 2022-02-14 16:46:35,721 on stmt: $phi204.2 = $202for_iter.3
DEBUG 2022-02-14 16:46:35,721 on stmt: branch $202for_iter.4, 204, 300
DEBUG 2022-02-14 16:46:35,721 ==== SSA block rewrite pass on 204
DEBUG 2022-02-14 16:46:35,721 Running <numba.core.ssa._FreshVarHandler object at 0x7f72037ef730>
DEBUG 2022-02-14 16:46:35,721 on stmt: j = $phi204.2
DEBUG 2022-02-14 16:46:35,721 on stmt: $212binary_true_divide.6 = factor / j
DEBUG 2022-02-14 16:46:35,721 on stmt: $214inplace_multiply.7 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=powfactor, rhs=$212binary_true_divide.6, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:46:35,721 on stmt: powfactor = $214inplace_multiply.7
DEBUG 2022-02-14 16:46:35,721 replaced with: powfactor.1 = $214inplace_multiply.7
DEBUG 2022-02-14 16:46:35,721 on stmt: $218load_global.8 = global(range: <class 'range'>)
DEBUG 2022-02-14 16:46:35,721 on stmt: $224binary_multiply.11 = i * j
DEBUG 2022-02-14 16:46:35,721 on stmt: $const226.12 = const(int, 1)
DEBUG 2022-02-14 16:46:35,721 on stmt: $228binary_add.13 = $224binary_multiply.11 + $const226.12
DEBUG 2022-02-14 16:46:35,721 on stmt: $const232.15 = const(int, 2)
DEBUG 2022-02-14 16:46:35,721 on stmt: $234binary_add.16 = n + $const232.15
DEBUG 2022-02-14 16:46:35,721 on stmt: $236call_function.17 = call $218load_global.8($228binary_add.13, $234binary_add.16, func=$218load_global.8, args=[Var($228binary_add.13, _loop_hafnian_subroutines.py:179), Var($234binary_add.16, _loop_hafnian_subroutines.py:179)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:46:35,721 on stmt: $238get_iter.18 = getiter(value=$236call_function.17)
DEBUG 2022-02-14 16:46:35,721 on stmt: $phi240.2 = $238get_iter.18
DEBUG 2022-02-14 16:46:35,721 on stmt: jump 240
DEBUG 2022-02-14 16:46:35,721 ==== SSA block rewrite pass on 240
DEBUG 2022-02-14 16:46:35,721 Running <numba.core.ssa._FreshVarHandler object at 0x7f72037ef730>
DEBUG 2022-02-14 16:46:35,721 on stmt: $240for_iter.3 = iternext(value=$phi240.2)
DEBUG 2022-02-14 16:46:35,721 on stmt: $240for_iter.4 = pair_first(value=$240for_iter.3)
DEBUG 2022-02-14 16:46:35,721 on stmt: $240for_iter.5 = pair_second(value=$240for_iter.3)
DEBUG 2022-02-14 16:46:35,721 on stmt: $phi242.3 = $240for_iter.4
DEBUG 2022-02-14 16:46:35,722 on stmt: branch $240for_iter.5, 242, 298
DEBUG 2022-02-14 16:46:35,722 ==== SSA block rewrite pass on 242
DEBUG 2022-02-14 16:46:35,722 Running <numba.core.ssa._FreshVarHandler object at 0x7f72037ef730>
DEBUG 2022-02-14 16:46:35,722 on stmt: k = $phi242.3
DEBUG 2022-02-14 16:46:35,722 on stmt: $const250.7 = const(int, 1)
DEBUG 2022-02-14 16:46:35,722 on stmt: $252binary_subtract.8 = k - $const250.7
DEBUG 2022-02-14 16:46:35,722 on stmt: $254build_tuple.9 = build_tuple(items=[Var(count, _loop_hafnian_subroutines.py:161), Var($252binary_subtract.8, _loop_hafnian_subroutines.py:180)])
DEBUG 2022-02-14 16:46:35,722 on stmt: $258binary_subscr.12 = getitem(value=comb, index=$254build_tuple.9, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:46:35,722 on stmt: $const262.14 = const(int, 1)
DEBUG 2022-02-14 16:46:35,722 on stmt: $266binary_subtract.16 = $const262.14 - count
DEBUG 2022-02-14 16:46:35,722 on stmt: $274binary_multiply.20 = i * j
DEBUG 2022-02-14 16:46:35,722 on stmt: $276binary_subtract.21 = k - $274binary_multiply.20
DEBUG 2022-02-14 16:46:35,722 on stmt: $const278.22 = const(int, 1)
DEBUG 2022-02-14 16:46:35,722 on stmt: $280binary_subtract.23 = $276binary_subtract.21 - $const278.22
DEBUG 2022-02-14 16:46:35,722 on stmt: $282build_tuple.24 = build_tuple(items=[Var($266binary_subtract.16, _loop_hafnian_subroutines.py:180), Var($280binary_subtract.23, _loop_hafnian_subroutines.py:180)])
DEBUG 2022-02-14 16:46:35,722 on stmt: $284binary_subscr.25 = getitem(value=comb, index=$282build_tuple.24, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:46:35,722 on stmt: $288binary_multiply.27 = $284binary_subscr.25 * powfactor
DEBUG 2022-02-14 16:46:35,722 on stmt: $290inplace_add.28 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$258binary_subscr.12, rhs=$288binary_multiply.27, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:46:35,722 on stmt: comb[$254build_tuple.9] = $290inplace_add.28
DEBUG 2022-02-14 16:46:35,722 on stmt: jump 240
DEBUG 2022-02-14 16:46:35,722 ==== SSA block rewrite pass on 298
DEBUG 2022-02-14 16:46:35,722 Running <numba.core.ssa._FreshVarHandler object at 0x7f72037ef730>
DEBUG 2022-02-14 16:46:35,722 on stmt: jump 202
DEBUG 2022-02-14 16:46:35,722 ==== SSA block rewrite pass on 300
DEBUG 2022-02-14 16:46:35,722 Running <numba.core.ssa._FreshVarHandler object at 0x7f72037ef730>
DEBUG 2022-02-14 16:46:35,722 on stmt: jump 60
DEBUG 2022-02-14 16:46:35,722 ==== SSA block rewrite pass on 302
DEBUG 2022-02-14 16:46:35,723 Running <numba.core.ssa._FreshVarHandler object at 0x7f72037ef730>
DEBUG 2022-02-14 16:46:35,723 on stmt: $const306.2 = const(NoneType, None)
DEBUG 2022-02-14 16:46:35,723 on stmt: $const308.3 = const(NoneType, None)
DEBUG 2022-02-14 16:46:35,723 on stmt: $310build_slice.4 = global(slice: <class 'slice'>)
DEBUG 2022-02-14 16:46:35,723 on stmt: $310build_slice.5 = call $310build_slice.4($const306.2, $const308.3, func=$310build_slice.4, args=(Var($const306.2, _loop_hafnian_subroutines.py:182), Var($const308.3, _loop_hafnian_subroutines.py:182)), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:46:35,723 on stmt: $312build_tuple.6 = build_tuple(items=[Var(count, _loop_hafnian_subroutines.py:161), Var($310build_slice.5, _loop_hafnian_subroutines.py:182)])
DEBUG 2022-02-14 16:46:35,723 on stmt: $314binary_subscr.7 = getitem(value=comb, index=$312build_tuple.6, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:46:35,723 on stmt: $316return_value.8 = cast(value=$314binary_subscr.7)
DEBUG 2022-02-14 16:46:35,723 on stmt: return $316return_value.8
DEBUG 2022-02-14 16:46:35,723 Replaced assignments: defaultdict(<class 'list'>,
            {140: [<numba.core.ir.Assign object at 0x7f72038aa250>],
             204: [<numba.core.ir.Assign object at 0x7f72038aa700>]})
DEBUG 2022-02-14 16:46:35,723 ==== SSA block rewrite pass on 0
DEBUG 2022-02-14 16:46:35,723 Running <numba.core.ssa._FixSSAVars object at 0x7f72037ef730>
DEBUG 2022-02-14 16:46:35,723 on stmt: E = arg(0, name=E)
DEBUG 2022-02-14 16:46:35,723 on stmt: AX_S = arg(1, name=AX_S)
DEBUG 2022-02-14 16:46:35,723 on stmt: XD_S = arg(2, name=XD_S)
DEBUG 2022-02-14 16:46:35,723 on stmt: D_S = arg(3, name=D_S)
DEBUG 2022-02-14 16:46:35,723 on stmt: n = arg(4, name=n)
DEBUG 2022-02-14 16:46:35,723 on stmt: oddloop = arg(5, name=oddloop)
DEBUG 2022-02-14 16:46:35,723 on stmt: oddVX_S = arg(6, name=oddVX_S)
DEBUG 2022-02-14 16:46:35,723 on stmt: $4load_method.1 = getattr(value=E, attr=copy)
DEBUG 2022-02-14 16:46:35,723 on stmt: E_k = call $4load_method.1(func=$4load_method.1, args=[], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:46:35,724 on stmt: count = const(int, 0)
DEBUG 2022-02-14 16:46:35,724 on stmt: $14load_global.4 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:46:35,724 on stmt: $16load_attr.5 = getattr(value=$14load_global.4, attr=zeros)
DEBUG 2022-02-14 16:46:35,724 on stmt: $const18.6 = const(int, 2)
DEBUG 2022-02-14 16:46:35,724 on stmt: $const22.8 = const(int, 1)
DEBUG 2022-02-14 16:46:35,724 on stmt: $24binary_add.9 = n + $const22.8
DEBUG 2022-02-14 16:46:35,724 on stmt: $26build_tuple.10 = build_tuple(items=[Var($const18.6, _loop_hafnian_subroutines.py:162), Var($24binary_add.9, _loop_hafnian_subroutines.py:162)])
DEBUG 2022-02-14 16:46:35,724 on stmt: $28load_global.11 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:46:35,724 on stmt: $30load_attr.12 = getattr(value=$28load_global.11, attr=complex128)
DEBUG 2022-02-14 16:46:35,724 on stmt: comb = call $16load_attr.5($26build_tuple.10, func=$16load_attr.5, args=[Var($26build_tuple.10, _loop_hafnian_subroutines.py:162)], kws=[('dtype', Var($30load_attr.12, _loop_hafnian_subroutines.py:162))], vararg=None, target=None)
DEBUG 2022-02-14 16:46:35,724 on stmt: $const38.15 = const(int, 1)
DEBUG 2022-02-14 16:46:35,724 on stmt: $const_0 = const(int, 0)
DEBUG 2022-02-14 16:46:35,724 on stmt: $const_0.1 = const(int, 0)
DEBUG 2022-02-14 16:46:35,724 on stmt: $const42.17 = build_tuple(items=[Var($const_0, _loop_hafnian_subroutines.py:163), Var($const_0.1, _loop_hafnian_subroutines.py:163)])
DEBUG 2022-02-14 16:46:35,724 on stmt: comb[(0, 0)] = $const38.15
DEBUG 2022-02-14 16:46:35,724 on stmt: $46load_global.18 = global(range: <class 'range'>)
DEBUG 2022-02-14 16:46:35,724 on stmt: $const48.19 = const(int, 1)
DEBUG 2022-02-14 16:46:35,724 on stmt: $const52.21 = const(int, 1)
DEBUG 2022-02-14 16:46:35,724 on stmt: $54binary_add.22 = n + $const52.21
DEBUG 2022-02-14 16:46:35,724 on stmt: $56call_function.23 = call $46load_global.18($const48.19, $54binary_add.22, func=$46load_global.18, args=[Var($const48.19, _loop_hafnian_subroutines.py:164), Var($54binary_add.22, _loop_hafnian_subroutines.py:164)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:46:35,724 on stmt: $58get_iter.24 = getiter(value=$56call_function.23)
DEBUG 2022-02-14 16:46:35,724 on stmt: $phi60.0 = $58get_iter.24
DEBUG 2022-02-14 16:46:35,725 on stmt: jump 60
DEBUG 2022-02-14 16:46:35,725 ==== SSA block rewrite pass on 60
DEBUG 2022-02-14 16:46:35,725 Running <numba.core.ssa._FixSSAVars object at 0x7f72037ef730>
DEBUG 2022-02-14 16:46:35,725 on stmt: $60for_iter.1 = iternext(value=$phi60.0)
DEBUG 2022-02-14 16:46:35,725 on stmt: $60for_iter.2 = pair_first(value=$60for_iter.1)
DEBUG 2022-02-14 16:46:35,725 on stmt: $60for_iter.3 = pair_second(value=$60for_iter.1)
DEBUG 2022-02-14 16:46:35,725 on stmt: $phi62.1 = $60for_iter.2
DEBUG 2022-02-14 16:46:35,725 on stmt: branch $60for_iter.3, 62, 302
DEBUG 2022-02-14 16:46:35,725 ==== SSA block rewrite pass on 62
DEBUG 2022-02-14 16:46:35,725 Running <numba.core.ssa._FixSSAVars object at 0x7f72037ef730>
DEBUG 2022-02-14 16:46:35,725 on stmt: i = $phi62.1
DEBUG 2022-02-14 16:46:35,725 on stmt: $const66.3 = const(int, 1)
DEBUG 2022-02-14 16:46:35,725 on stmt: $68compare_op.4 = i == $const66.3
DEBUG 2022-02-14 16:46:35,725 on stmt: bool70 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:46:35,725 on stmt: $70pred = call bool70($68compare_op.4, func=bool70, args=(Var($68compare_op.4, _loop_hafnian_subroutines.py:165),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:46:35,725 on stmt: branch $70pred, 72, 78
DEBUG 2022-02-14 16:46:35,725 ==== SSA block rewrite pass on 72
DEBUG 2022-02-14 16:46:35,725 Running <numba.core.ssa._FixSSAVars object at 0x7f72037ef730>
DEBUG 2022-02-14 16:46:35,725 on stmt: factor = oddloop
DEBUG 2022-02-14 16:46:35,725 on stmt: jump 140
DEBUG 2022-02-14 16:46:35,725 ==== SSA block rewrite pass on 78
DEBUG 2022-02-14 16:46:35,725 Running <numba.core.ssa._FixSSAVars object at 0x7f72037ef730>
DEBUG 2022-02-14 16:46:35,725 on stmt: $const80.2 = const(int, 2)
DEBUG 2022-02-14 16:46:35,725 on stmt: $82binary_modulo.3 = i % $const80.2
DEBUG 2022-02-14 16:46:35,725 on stmt: $const84.4 = const(int, 0)
DEBUG 2022-02-14 16:46:35,725 on stmt: $86compare_op.5 = $82binary_modulo.3 == $const84.4
DEBUG 2022-02-14 16:46:35,726 on stmt: bool88 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:46:35,726 on stmt: $88pred = call bool88($86compare_op.5, func=bool88, args=(Var($86compare_op.5, _loop_hafnian_subroutines.py:167),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:46:35,726 on stmt: branch $88pred, 90, 124
DEBUG 2022-02-14 16:46:35,726 ==== SSA block rewrite pass on 90
DEBUG 2022-02-14 16:46:35,726 Running <numba.core.ssa._FixSSAVars object at 0x7f72037ef730>
DEBUG 2022-02-14 16:46:35,726 on stmt: $92load_method.2 = getattr(value=E_k, attr=sum)
DEBUG 2022-02-14 16:46:35,726 on stmt: $94call_method.3 = call $92load_method.2(func=$92load_method.2, args=[], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:46:35,726 on stmt: $98binary_true_divide.5 = $94call_method.3 / i
DEBUG 2022-02-14 16:46:35,726 on stmt: $104binary_matrix_multiply.8 = XD_S <built-in function matmul> D_S
DEBUG 2022-02-14 16:46:35,726 on stmt: $const106.9 = const(int, 2)
DEBUG 2022-02-14 16:46:35,726 on stmt: $108binary_true_divide.10 = $104binary_matrix_multiply.8 / $const106.9
DEBUG 2022-02-14 16:46:35,726 on stmt: factor = $98binary_true_divide.5 + $108binary_true_divide.10
DEBUG 2022-02-14 16:46:35,726 on stmt: $118inplace_multiply.14 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=E_k, rhs=E, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:46:35,726 on stmt: E_k = $118inplace_multiply.14
DEBUG 2022-02-14 16:46:35,726 on stmt: jump 140
DEBUG 2022-02-14 16:46:35,726 ==== SSA block rewrite pass on 124
DEBUG 2022-02-14 16:46:35,726 Running <numba.core.ssa._FixSSAVars object at 0x7f72037ef730>
DEBUG 2022-02-14 16:46:35,726 on stmt: factor = oddVX_S <built-in function matmul> D_S
DEBUG 2022-02-14 16:46:35,726 on stmt: $136binary_matrix_multiply.6 = AX_S <built-in function matmul> D_S
DEBUG 2022-02-14 16:46:35,726 on stmt: D_S = $136binary_matrix_multiply.6
DEBUG 2022-02-14 16:46:35,726 on stmt: jump 140
DEBUG 2022-02-14 16:46:35,726 ==== SSA block rewrite pass on 140
DEBUG 2022-02-14 16:46:35,727 Running <numba.core.ssa._FixSSAVars object at 0x7f72037ef730>
DEBUG 2022-02-14 16:46:35,727 on stmt: powfactor = const(int, 1)
DEBUG 2022-02-14 16:46:35,727 on stmt: $const144.2 = const(int, 1)
DEBUG 2022-02-14 16:46:35,727 on stmt: $148binary_subtract.4 = $const144.2 - count
DEBUG 2022-02-14 16:46:35,727 on stmt: count = $148binary_subtract.4
DEBUG 2022-02-14 16:46:35,727 on stmt: $const154.6 = const(int, 1)
DEBUG 2022-02-14 16:46:35,727 on stmt: $158binary_subtract.8 = $const154.6 - count
DEBUG 2022-02-14 16:46:35,727 on stmt: $const160.9 = const(NoneType, None)
DEBUG 2022-02-14 16:46:35,727 on stmt: $const162.10 = const(NoneType, None)
DEBUG 2022-02-14 16:46:35,727 on stmt: $164build_slice.11 = global(slice: <class 'slice'>)
DEBUG 2022-02-14 16:46:35,727 on stmt: $164build_slice.12 = call $164build_slice.11($const160.9, $const162.10, func=$164build_slice.11, args=(Var($const160.9, _loop_hafnian_subroutines.py:176), Var($const162.10, _loop_hafnian_subroutines.py:176)), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:46:35,727 on stmt: $166build_tuple.13 = build_tuple(items=[Var($158binary_subtract.8, _loop_hafnian_subroutines.py:176), Var($164build_slice.12, _loop_hafnian_subroutines.py:176)])
DEBUG 2022-02-14 16:46:35,727 on stmt: $168binary_subscr.14 = getitem(value=comb, index=$166build_tuple.13, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:46:35,727 on stmt: $const174.17 = const(NoneType, None)
DEBUG 2022-02-14 16:46:35,727 on stmt: $const176.18 = const(NoneType, None)
DEBUG 2022-02-14 16:46:35,727 on stmt: $178build_slice.19 = global(slice: <class 'slice'>)
DEBUG 2022-02-14 16:46:35,727 on stmt: $178build_slice.20 = call $178build_slice.19($const174.17, $const176.18, func=$178build_slice.19, args=(Var($const174.17, _loop_hafnian_subroutines.py:176), Var($const176.18, _loop_hafnian_subroutines.py:176)), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:46:35,727 on stmt: $180build_tuple.21 = build_tuple(items=[Var(count, _loop_hafnian_subroutines.py:161), Var($178build_slice.20, _loop_hafnian_subroutines.py:176)])
DEBUG 2022-02-14 16:46:35,727 on stmt: comb[$180build_tuple.21] = $168binary_subscr.14
DEBUG 2022-02-14 16:46:35,727 on stmt: $184load_global.22 = global(range: <class 'range'>)
DEBUG 2022-02-14 16:46:35,727 on stmt: $const186.23 = const(int, 1)
DEBUG 2022-02-14 16:46:35,727 on stmt: $192binary_floor_divide.26 = n // i
DEBUG 2022-02-14 16:46:35,727 on stmt: $const194.27 = const(int, 1)
DEBUG 2022-02-14 16:46:35,727 on stmt: $196binary_add.28 = $192binary_floor_divide.26 + $const194.27
DEBUG 2022-02-14 16:46:35,728 on stmt: $198call_function.29 = call $184load_global.22($const186.23, $196binary_add.28, func=$184load_global.22, args=[Var($const186.23, _loop_hafnian_subroutines.py:177), Var($196binary_add.28, _loop_hafnian_subroutines.py:177)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:46:35,728 on stmt: $200get_iter.30 = getiter(value=$198call_function.29)
DEBUG 2022-02-14 16:46:35,728 on stmt: $phi202.1 = $200get_iter.30
DEBUG 2022-02-14 16:46:35,728 on stmt: jump 202
DEBUG 2022-02-14 16:46:35,728 ==== SSA block rewrite pass on 202
DEBUG 2022-02-14 16:46:35,728 Running <numba.core.ssa._FixSSAVars object at 0x7f72037ef730>
DEBUG 2022-02-14 16:46:35,728 on stmt: $202for_iter.2 = iternext(value=$phi202.1)
DEBUG 2022-02-14 16:46:35,728 on stmt: $202for_iter.3 = pair_first(value=$202for_iter.2)
DEBUG 2022-02-14 16:46:35,728 on stmt: $202for_iter.4 = pair_second(value=$202for_iter.2)
DEBUG 2022-02-14 16:46:35,728 on stmt: $phi204.2 = $202for_iter.3
DEBUG 2022-02-14 16:46:35,728 on stmt: branch $202for_iter.4, 204, 300
DEBUG 2022-02-14 16:46:35,728 ==== SSA block rewrite pass on 204
DEBUG 2022-02-14 16:46:35,728 Running <numba.core.ssa._FixSSAVars object at 0x7f72037ef730>
DEBUG 2022-02-14 16:46:35,728 on stmt: j = $phi204.2
DEBUG 2022-02-14 16:46:35,728 on stmt: $212binary_true_divide.6 = factor / j
DEBUG 2022-02-14 16:46:35,728 on stmt: $214inplace_multiply.7 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=powfactor, rhs=$212binary_true_divide.6, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:46:35,728 find_def var='powfactor' stmt=$214inplace_multiply.7 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=powfactor, rhs=$212binary_true_divide.6, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:46:35,728 find_def_from_top label 204
DEBUG 2022-02-14 16:46:35,728 idom 202 from label 204
DEBUG 2022-02-14 16:46:35,728 find_def_from_bottom label 202
DEBUG 2022-02-14 16:46:35,728 find_def_from_top label 202
DEBUG 2022-02-14 16:46:35,728 insert phi node powfactor.2 = phi(incoming_values=[], incoming_blocks=[]) at 202
DEBUG 2022-02-14 16:46:35,728 find_def_from_bottom label 298
DEBUG 2022-02-14 16:46:35,728 find_def_from_top label 298
DEBUG 2022-02-14 16:46:35,729 idom 240 from label 298
DEBUG 2022-02-14 16:46:35,729 find_def_from_bottom label 240
DEBUG 2022-02-14 16:46:35,729 find_def_from_top label 240
DEBUG 2022-02-14 16:46:35,729 idom 204 from label 240
DEBUG 2022-02-14 16:46:35,729 find_def_from_bottom label 204
DEBUG 2022-02-14 16:46:35,729 incoming_def powfactor.1 = $214inplace_multiply.7
DEBUG 2022-02-14 16:46:35,729 find_def_from_bottom label 140
DEBUG 2022-02-14 16:46:35,729 incoming_def powfactor = const(int, 1)
DEBUG 2022-02-14 16:46:35,729 replaced with: $214inplace_multiply.7 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=powfactor.2, rhs=$212binary_true_divide.6, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:46:35,729 on stmt: powfactor.1 = $214inplace_multiply.7
DEBUG 2022-02-14 16:46:35,729 on stmt: $218load_global.8 = global(range: <class 'range'>)
DEBUG 2022-02-14 16:46:35,729 on stmt: $224binary_multiply.11 = i * j
DEBUG 2022-02-14 16:46:35,729 on stmt: $const226.12 = const(int, 1)
DEBUG 2022-02-14 16:46:35,729 on stmt: $228binary_add.13 = $224binary_multiply.11 + $const226.12
DEBUG 2022-02-14 16:46:35,729 on stmt: $const232.15 = const(int, 2)
DEBUG 2022-02-14 16:46:35,729 on stmt: $234binary_add.16 = n + $const232.15
DEBUG 2022-02-14 16:46:35,729 on stmt: $236call_function.17 = call $218load_global.8($228binary_add.13, $234binary_add.16, func=$218load_global.8, args=[Var($228binary_add.13, _loop_hafnian_subroutines.py:179), Var($234binary_add.16, _loop_hafnian_subroutines.py:179)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:46:35,729 on stmt: $238get_iter.18 = getiter(value=$236call_function.17)
DEBUG 2022-02-14 16:46:35,729 on stmt: $phi240.2 = $238get_iter.18
DEBUG 2022-02-14 16:46:35,729 on stmt: jump 240
DEBUG 2022-02-14 16:46:35,729 ==== SSA block rewrite pass on 240
DEBUG 2022-02-14 16:46:35,729 Running <numba.core.ssa._FixSSAVars object at 0x7f72037ef730>
DEBUG 2022-02-14 16:46:35,729 on stmt: $240for_iter.3 = iternext(value=$phi240.2)
DEBUG 2022-02-14 16:46:35,729 on stmt: $240for_iter.4 = pair_first(value=$240for_iter.3)
DEBUG 2022-02-14 16:46:35,730 on stmt: $240for_iter.5 = pair_second(value=$240for_iter.3)
DEBUG 2022-02-14 16:46:35,730 on stmt: $phi242.3 = $240for_iter.4
DEBUG 2022-02-14 16:46:35,730 on stmt: branch $240for_iter.5, 242, 298
DEBUG 2022-02-14 16:46:35,730 ==== SSA block rewrite pass on 242
DEBUG 2022-02-14 16:46:35,730 Running <numba.core.ssa._FixSSAVars object at 0x7f72037ef730>
DEBUG 2022-02-14 16:46:35,730 on stmt: k = $phi242.3
DEBUG 2022-02-14 16:46:35,730 on stmt: $const250.7 = const(int, 1)
DEBUG 2022-02-14 16:46:35,730 on stmt: $252binary_subtract.8 = k - $const250.7
DEBUG 2022-02-14 16:46:35,730 on stmt: $254build_tuple.9 = build_tuple(items=[Var(count, _loop_hafnian_subroutines.py:161), Var($252binary_subtract.8, _loop_hafnian_subroutines.py:180)])
DEBUG 2022-02-14 16:46:35,730 on stmt: $258binary_subscr.12 = getitem(value=comb, index=$254build_tuple.9, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:46:35,730 on stmt: $const262.14 = const(int, 1)
DEBUG 2022-02-14 16:46:35,730 on stmt: $266binary_subtract.16 = $const262.14 - count
DEBUG 2022-02-14 16:46:35,730 on stmt: $274binary_multiply.20 = i * j
DEBUG 2022-02-14 16:46:35,730 on stmt: $276binary_subtract.21 = k - $274binary_multiply.20
DEBUG 2022-02-14 16:46:35,730 on stmt: $const278.22 = const(int, 1)
DEBUG 2022-02-14 16:46:35,730 on stmt: $280binary_subtract.23 = $276binary_subtract.21 - $const278.22
DEBUG 2022-02-14 16:46:35,730 on stmt: $282build_tuple.24 = build_tuple(items=[Var($266binary_subtract.16, _loop_hafnian_subroutines.py:180), Var($280binary_subtract.23, _loop_hafnian_subroutines.py:180)])
DEBUG 2022-02-14 16:46:35,730 on stmt: $284binary_subscr.25 = getitem(value=comb, index=$282build_tuple.24, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:46:35,730 on stmt: $288binary_multiply.27 = $284binary_subscr.25 * powfactor
DEBUG 2022-02-14 16:46:35,730 find_def var='powfactor' stmt=$288binary_multiply.27 = $284binary_subscr.25 * powfactor
DEBUG 2022-02-14 16:46:35,730 find_def_from_top label 242
DEBUG 2022-02-14 16:46:35,730 idom 240 from label 242
DEBUG 2022-02-14 16:46:35,730 find_def_from_bottom label 240
DEBUG 2022-02-14 16:46:35,731 find_def_from_top label 240
DEBUG 2022-02-14 16:46:35,731 idom 204 from label 240
DEBUG 2022-02-14 16:46:35,731 find_def_from_bottom label 204
DEBUG 2022-02-14 16:46:35,731 replaced with: $288binary_multiply.27 = $284binary_subscr.25 * powfactor.1
DEBUG 2022-02-14 16:46:35,731 on stmt: $290inplace_add.28 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$258binary_subscr.12, rhs=$288binary_multiply.27, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:46:35,731 on stmt: comb[$254build_tuple.9] = $290inplace_add.28
DEBUG 2022-02-14 16:46:35,731 on stmt: jump 240
DEBUG 2022-02-14 16:46:35,731 ==== SSA block rewrite pass on 298
DEBUG 2022-02-14 16:46:35,731 Running <numba.core.ssa._FixSSAVars object at 0x7f72037ef730>
DEBUG 2022-02-14 16:46:35,731 on stmt: jump 202
DEBUG 2022-02-14 16:46:35,731 ==== SSA block rewrite pass on 300
DEBUG 2022-02-14 16:46:35,731 Running <numba.core.ssa._FixSSAVars object at 0x7f72037ef730>
DEBUG 2022-02-14 16:46:35,731 on stmt: jump 60
DEBUG 2022-02-14 16:46:35,731 ==== SSA block rewrite pass on 302
DEBUG 2022-02-14 16:46:35,731 Running <numba.core.ssa._FixSSAVars object at 0x7f72037ef730>
DEBUG 2022-02-14 16:46:35,731 on stmt: $const306.2 = const(NoneType, None)
DEBUG 2022-02-14 16:46:35,731 on stmt: $const308.3 = const(NoneType, None)
DEBUG 2022-02-14 16:46:35,731 on stmt: $310build_slice.4 = global(slice: <class 'slice'>)
DEBUG 2022-02-14 16:46:35,731 on stmt: $310build_slice.5 = call $310build_slice.4($const306.2, $const308.3, func=$310build_slice.4, args=(Var($const306.2, _loop_hafnian_subroutines.py:182), Var($const308.3, _loop_hafnian_subroutines.py:182)), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:46:35,731 on stmt: $312build_tuple.6 = build_tuple(items=[Var(count, _loop_hafnian_subroutines.py:161), Var($310build_slice.5, _loop_hafnian_subroutines.py:182)])
DEBUG 2022-02-14 16:46:35,731 on stmt: $314binary_subscr.7 = getitem(value=comb, index=$312build_tuple.6, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:46:35,731 on stmt: $316return_value.8 = cast(value=$314binary_subscr.7)
DEBUG 2022-02-14 16:46:35,731 on stmt: return $316return_value.8
DEBUG 2022-02-14 16:46:35,731 Fix SSA violator on var E_k
DEBUG 2022-02-14 16:46:35,731 ==== SSA block rewrite pass on 0
DEBUG 2022-02-14 16:46:35,732 Running <numba.core.ssa._FreshVarHandler object at 0x7f72037efd90>
DEBUG 2022-02-14 16:46:35,732 on stmt: E = arg(0, name=E)
DEBUG 2022-02-14 16:46:35,732 on stmt: AX_S = arg(1, name=AX_S)
DEBUG 2022-02-14 16:46:35,732 on stmt: XD_S = arg(2, name=XD_S)
DEBUG 2022-02-14 16:46:35,732 on stmt: D_S = arg(3, name=D_S)
DEBUG 2022-02-14 16:46:35,732 on stmt: n = arg(4, name=n)
DEBUG 2022-02-14 16:46:35,732 on stmt: oddloop = arg(5, name=oddloop)
DEBUG 2022-02-14 16:46:35,732 on stmt: oddVX_S = arg(6, name=oddVX_S)
DEBUG 2022-02-14 16:46:35,732 on stmt: $4load_method.1 = getattr(value=E, attr=copy)
DEBUG 2022-02-14 16:46:35,732 on stmt: E_k = call $4load_method.1(func=$4load_method.1, args=[], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:46:35,732 first assign: E_k
DEBUG 2022-02-14 16:46:35,732 replaced with: E_k = call $4load_method.1(func=$4load_method.1, args=[], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:46:35,732 on stmt: count = const(int, 0)
DEBUG 2022-02-14 16:46:35,732 on stmt: $14load_global.4 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:46:35,732 on stmt: $16load_attr.5 = getattr(value=$14load_global.4, attr=zeros)
DEBUG 2022-02-14 16:46:35,732 on stmt: $const18.6 = const(int, 2)
DEBUG 2022-02-14 16:46:35,732 on stmt: $const22.8 = const(int, 1)
DEBUG 2022-02-14 16:46:35,732 on stmt: $24binary_add.9 = n + $const22.8
DEBUG 2022-02-14 16:46:35,732 on stmt: $26build_tuple.10 = build_tuple(items=[Var($const18.6, _loop_hafnian_subroutines.py:162), Var($24binary_add.9, _loop_hafnian_subroutines.py:162)])
DEBUG 2022-02-14 16:46:35,732 on stmt: $28load_global.11 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:46:35,732 on stmt: $30load_attr.12 = getattr(value=$28load_global.11, attr=complex128)
DEBUG 2022-02-14 16:46:35,732 on stmt: comb = call $16load_attr.5($26build_tuple.10, func=$16load_attr.5, args=[Var($26build_tuple.10, _loop_hafnian_subroutines.py:162)], kws=[('dtype', Var($30load_attr.12, _loop_hafnian_subroutines.py:162))], vararg=None, target=None)
DEBUG 2022-02-14 16:46:35,732 on stmt: $const38.15 = const(int, 1)
DEBUG 2022-02-14 16:46:35,732 on stmt: $const_0 = const(int, 0)
DEBUG 2022-02-14 16:46:35,732 on stmt: $const_0.1 = const(int, 0)
DEBUG 2022-02-14 16:46:35,733 on stmt: $const42.17 = build_tuple(items=[Var($const_0, _loop_hafnian_subroutines.py:163), Var($const_0.1, _loop_hafnian_subroutines.py:163)])
DEBUG 2022-02-14 16:46:35,733 on stmt: comb[(0, 0)] = $const38.15
DEBUG 2022-02-14 16:46:35,733 on stmt: $46load_global.18 = global(range: <class 'range'>)
DEBUG 2022-02-14 16:46:35,733 on stmt: $const48.19 = const(int, 1)
DEBUG 2022-02-14 16:46:35,733 on stmt: $const52.21 = const(int, 1)
DEBUG 2022-02-14 16:46:35,733 on stmt: $54binary_add.22 = n + $const52.21
DEBUG 2022-02-14 16:46:35,733 on stmt: $56call_function.23 = call $46load_global.18($const48.19, $54binary_add.22, func=$46load_global.18, args=[Var($const48.19, _loop_hafnian_subroutines.py:164), Var($54binary_add.22, _loop_hafnian_subroutines.py:164)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:46:35,733 on stmt: $58get_iter.24 = getiter(value=$56call_function.23)
DEBUG 2022-02-14 16:46:35,733 on stmt: $phi60.0 = $58get_iter.24
DEBUG 2022-02-14 16:46:35,733 on stmt: jump 60
DEBUG 2022-02-14 16:46:35,733 ==== SSA block rewrite pass on 60
DEBUG 2022-02-14 16:46:35,733 Running <numba.core.ssa._FreshVarHandler object at 0x7f72037efd90>
DEBUG 2022-02-14 16:46:35,733 on stmt: $60for_iter.1 = iternext(value=$phi60.0)
DEBUG 2022-02-14 16:46:35,733 on stmt: $60for_iter.2 = pair_first(value=$60for_iter.1)
DEBUG 2022-02-14 16:46:35,733 on stmt: $60for_iter.3 = pair_second(value=$60for_iter.1)
DEBUG 2022-02-14 16:46:35,733 on stmt: $phi62.1 = $60for_iter.2
DEBUG 2022-02-14 16:46:35,733 on stmt: branch $60for_iter.3, 62, 302
DEBUG 2022-02-14 16:46:35,733 ==== SSA block rewrite pass on 62
DEBUG 2022-02-14 16:46:35,733 Running <numba.core.ssa._FreshVarHandler object at 0x7f72037efd90>
DEBUG 2022-02-14 16:46:35,733 on stmt: i = $phi62.1
DEBUG 2022-02-14 16:46:35,733 on stmt: $const66.3 = const(int, 1)
DEBUG 2022-02-14 16:46:35,733 on stmt: $68compare_op.4 = i == $const66.3
DEBUG 2022-02-14 16:46:35,733 on stmt: bool70 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:46:35,733 on stmt: $70pred = call bool70($68compare_op.4, func=bool70, args=(Var($68compare_op.4, _loop_hafnian_subroutines.py:165),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:46:35,733 on stmt: branch $70pred, 72, 78
DEBUG 2022-02-14 16:46:35,733 ==== SSA block rewrite pass on 72
DEBUG 2022-02-14 16:46:35,734 Running <numba.core.ssa._FreshVarHandler object at 0x7f72037efd90>
DEBUG 2022-02-14 16:46:35,734 on stmt: factor = oddloop
DEBUG 2022-02-14 16:46:35,734 on stmt: jump 140
DEBUG 2022-02-14 16:46:35,734 ==== SSA block rewrite pass on 78
DEBUG 2022-02-14 16:46:35,734 Running <numba.core.ssa._FreshVarHandler object at 0x7f72037efd90>
DEBUG 2022-02-14 16:46:35,734 on stmt: $const80.2 = const(int, 2)
DEBUG 2022-02-14 16:46:35,734 on stmt: $82binary_modulo.3 = i % $const80.2
DEBUG 2022-02-14 16:46:35,734 on stmt: $const84.4 = const(int, 0)
DEBUG 2022-02-14 16:46:35,734 on stmt: $86compare_op.5 = $82binary_modulo.3 == $const84.4
DEBUG 2022-02-14 16:46:35,734 on stmt: bool88 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:46:35,734 on stmt: $88pred = call bool88($86compare_op.5, func=bool88, args=(Var($86compare_op.5, _loop_hafnian_subroutines.py:167),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:46:35,734 on stmt: branch $88pred, 90, 124
DEBUG 2022-02-14 16:46:35,734 ==== SSA block rewrite pass on 90
DEBUG 2022-02-14 16:46:35,734 Running <numba.core.ssa._FreshVarHandler object at 0x7f72037efd90>
DEBUG 2022-02-14 16:46:35,734 on stmt: $92load_method.2 = getattr(value=E_k, attr=sum)
DEBUG 2022-02-14 16:46:35,734 on stmt: $94call_method.3 = call $92load_method.2(func=$92load_method.2, args=[], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:46:35,735 on stmt: $98binary_true_divide.5 = $94call_method.3 / i
DEBUG 2022-02-14 16:46:35,735 on stmt: $104binary_matrix_multiply.8 = XD_S <built-in function matmul> D_S
DEBUG 2022-02-14 16:46:35,735 on stmt: $const106.9 = const(int, 2)
DEBUG 2022-02-14 16:46:35,735 on stmt: $108binary_true_divide.10 = $104binary_matrix_multiply.8 / $const106.9
DEBUG 2022-02-14 16:46:35,735 on stmt: factor = $98binary_true_divide.5 + $108binary_true_divide.10
DEBUG 2022-02-14 16:46:35,735 on stmt: $118inplace_multiply.14 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=E_k, rhs=E, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:46:35,735 on stmt: E_k = $118inplace_multiply.14
DEBUG 2022-02-14 16:46:35,735 replaced with: E_k.1 = $118inplace_multiply.14
DEBUG 2022-02-14 16:46:35,735 on stmt: jump 140
DEBUG 2022-02-14 16:46:35,735 ==== SSA block rewrite pass on 124
DEBUG 2022-02-14 16:46:35,735 Running <numba.core.ssa._FreshVarHandler object at 0x7f72037efd90>
DEBUG 2022-02-14 16:46:35,735 on stmt: factor = oddVX_S <built-in function matmul> D_S
DEBUG 2022-02-14 16:46:35,735 on stmt: $136binary_matrix_multiply.6 = AX_S <built-in function matmul> D_S
DEBUG 2022-02-14 16:46:35,735 on stmt: D_S = $136binary_matrix_multiply.6
DEBUG 2022-02-14 16:46:35,735 on stmt: jump 140
DEBUG 2022-02-14 16:46:35,735 ==== SSA block rewrite pass on 140
DEBUG 2022-02-14 16:46:35,735 Running <numba.core.ssa._FreshVarHandler object at 0x7f72037efd90>
DEBUG 2022-02-14 16:46:35,735 on stmt: powfactor = const(int, 1)
DEBUG 2022-02-14 16:46:35,735 on stmt: $const144.2 = const(int, 1)
DEBUG 2022-02-14 16:46:35,735 on stmt: $148binary_subtract.4 = $const144.2 - count
DEBUG 2022-02-14 16:46:35,735 on stmt: count = $148binary_subtract.4
DEBUG 2022-02-14 16:46:35,735 on stmt: $const154.6 = const(int, 1)
DEBUG 2022-02-14 16:46:35,735 on stmt: $158binary_subtract.8 = $const154.6 - count
DEBUG 2022-02-14 16:46:35,735 on stmt: $const160.9 = const(NoneType, None)
DEBUG 2022-02-14 16:46:35,736 on stmt: $const162.10 = const(NoneType, None)
DEBUG 2022-02-14 16:46:35,736 on stmt: $164build_slice.11 = global(slice: <class 'slice'>)
DEBUG 2022-02-14 16:46:35,736 on stmt: $164build_slice.12 = call $164build_slice.11($const160.9, $const162.10, func=$164build_slice.11, args=(Var($const160.9, _loop_hafnian_subroutines.py:176), Var($const162.10, _loop_hafnian_subroutines.py:176)), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:46:35,736 on stmt: $166build_tuple.13 = build_tuple(items=[Var($158binary_subtract.8, _loop_hafnian_subroutines.py:176), Var($164build_slice.12, _loop_hafnian_subroutines.py:176)])
DEBUG 2022-02-14 16:46:35,736 on stmt: $168binary_subscr.14 = getitem(value=comb, index=$166build_tuple.13, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:46:35,736 on stmt: $const174.17 = const(NoneType, None)
DEBUG 2022-02-14 16:46:35,736 on stmt: $const176.18 = const(NoneType, None)
DEBUG 2022-02-14 16:46:35,736 on stmt: $178build_slice.19 = global(slice: <class 'slice'>)
DEBUG 2022-02-14 16:46:35,736 on stmt: $178build_slice.20 = call $178build_slice.19($const174.17, $const176.18, func=$178build_slice.19, args=(Var($const174.17, _loop_hafnian_subroutines.py:176), Var($const176.18, _loop_hafnian_subroutines.py:176)), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:46:35,736 on stmt: $180build_tuple.21 = build_tuple(items=[Var(count, _loop_hafnian_subroutines.py:161), Var($178build_slice.20, _loop_hafnian_subroutines.py:176)])
DEBUG 2022-02-14 16:46:35,736 on stmt: comb[$180build_tuple.21] = $168binary_subscr.14
DEBUG 2022-02-14 16:46:35,736 on stmt: $184load_global.22 = global(range: <class 'range'>)
DEBUG 2022-02-14 16:46:35,736 on stmt: $const186.23 = const(int, 1)
DEBUG 2022-02-14 16:46:35,736 on stmt: $192binary_floor_divide.26 = n // i
DEBUG 2022-02-14 16:46:35,736 on stmt: $const194.27 = const(int, 1)
DEBUG 2022-02-14 16:46:35,736 on stmt: $196binary_add.28 = $192binary_floor_divide.26 + $const194.27
DEBUG 2022-02-14 16:46:35,736 on stmt: $198call_function.29 = call $184load_global.22($const186.23, $196binary_add.28, func=$184load_global.22, args=[Var($const186.23, _loop_hafnian_subroutines.py:177), Var($196binary_add.28, _loop_hafnian_subroutines.py:177)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:46:35,736 on stmt: $200get_iter.30 = getiter(value=$198call_function.29)
DEBUG 2022-02-14 16:46:35,736 on stmt: $phi202.1 = $200get_iter.30
DEBUG 2022-02-14 16:46:35,736 on stmt: jump 202
DEBUG 2022-02-14 16:46:35,736 ==== SSA block rewrite pass on 202
DEBUG 2022-02-14 16:46:35,736 Running <numba.core.ssa._FreshVarHandler object at 0x7f72037efd90>
DEBUG 2022-02-14 16:46:35,736 on stmt: powfactor.2 = phi(incoming_values=[Var(powfactor.1, _loop_hafnian_subroutines.py:178), Var(powfactor, _loop_hafnian_subroutines.py:174)], incoming_blocks=[298, 140])
DEBUG 2022-02-14 16:46:35,736 on stmt: $202for_iter.2 = iternext(value=$phi202.1)
DEBUG 2022-02-14 16:46:35,736 on stmt: $202for_iter.3 = pair_first(value=$202for_iter.2)
DEBUG 2022-02-14 16:46:35,736 on stmt: $202for_iter.4 = pair_second(value=$202for_iter.2)
DEBUG 2022-02-14 16:46:35,737 on stmt: $phi204.2 = $202for_iter.3
DEBUG 2022-02-14 16:46:35,737 on stmt: branch $202for_iter.4, 204, 300
DEBUG 2022-02-14 16:46:35,737 ==== SSA block rewrite pass on 204
DEBUG 2022-02-14 16:46:35,737 Running <numba.core.ssa._FreshVarHandler object at 0x7f72037efd90>
DEBUG 2022-02-14 16:46:35,737 on stmt: j = $phi204.2
DEBUG 2022-02-14 16:46:35,737 on stmt: $212binary_true_divide.6 = factor / j
DEBUG 2022-02-14 16:46:35,737 on stmt: $214inplace_multiply.7 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=powfactor.2, rhs=$212binary_true_divide.6, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:46:35,737 on stmt: powfactor.1 = $214inplace_multiply.7
DEBUG 2022-02-14 16:46:35,737 on stmt: $218load_global.8 = global(range: <class 'range'>)
DEBUG 2022-02-14 16:46:35,737 on stmt: $224binary_multiply.11 = i * j
DEBUG 2022-02-14 16:46:35,737 on stmt: $const226.12 = const(int, 1)
DEBUG 2022-02-14 16:46:35,737 on stmt: $228binary_add.13 = $224binary_multiply.11 + $const226.12
DEBUG 2022-02-14 16:46:35,737 on stmt: $const232.15 = const(int, 2)
DEBUG 2022-02-14 16:46:35,737 on stmt: $234binary_add.16 = n + $const232.15
DEBUG 2022-02-14 16:46:35,737 on stmt: $236call_function.17 = call $218load_global.8($228binary_add.13, $234binary_add.16, func=$218load_global.8, args=[Var($228binary_add.13, _loop_hafnian_subroutines.py:179), Var($234binary_add.16, _loop_hafnian_subroutines.py:179)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:46:35,737 on stmt: $238get_iter.18 = getiter(value=$236call_function.17)
DEBUG 2022-02-14 16:46:35,737 on stmt: $phi240.2 = $238get_iter.18
DEBUG 2022-02-14 16:46:35,737 on stmt: jump 240
DEBUG 2022-02-14 16:46:35,737 ==== SSA block rewrite pass on 240
DEBUG 2022-02-14 16:46:35,737 Running <numba.core.ssa._FreshVarHandler object at 0x7f72037efd90>
DEBUG 2022-02-14 16:46:35,737 on stmt: $240for_iter.3 = iternext(value=$phi240.2)
DEBUG 2022-02-14 16:46:35,737 on stmt: $240for_iter.4 = pair_first(value=$240for_iter.3)
DEBUG 2022-02-14 16:46:35,737 on stmt: $240for_iter.5 = pair_second(value=$240for_iter.3)
DEBUG 2022-02-14 16:46:35,737 on stmt: $phi242.3 = $240for_iter.4
DEBUG 2022-02-14 16:46:35,737 on stmt: branch $240for_iter.5, 242, 298
DEBUG 2022-02-14 16:46:35,738 ==== SSA block rewrite pass on 242
DEBUG 2022-02-14 16:46:35,738 Running <numba.core.ssa._FreshVarHandler object at 0x7f72037efd90>
DEBUG 2022-02-14 16:46:35,738 on stmt: k = $phi242.3
DEBUG 2022-02-14 16:46:35,738 on stmt: $const250.7 = const(int, 1)
DEBUG 2022-02-14 16:46:35,738 on stmt: $252binary_subtract.8 = k - $const250.7
DEBUG 2022-02-14 16:46:35,738 on stmt: $254build_tuple.9 = build_tuple(items=[Var(count, _loop_hafnian_subroutines.py:161), Var($252binary_subtract.8, _loop_hafnian_subroutines.py:180)])
DEBUG 2022-02-14 16:46:35,738 on stmt: $258binary_subscr.12 = getitem(value=comb, index=$254build_tuple.9, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:46:35,738 on stmt: $const262.14 = const(int, 1)
DEBUG 2022-02-14 16:46:35,738 on stmt: $266binary_subtract.16 = $const262.14 - count
DEBUG 2022-02-14 16:46:35,738 on stmt: $274binary_multiply.20 = i * j
DEBUG 2022-02-14 16:46:35,738 on stmt: $276binary_subtract.21 = k - $274binary_multiply.20
DEBUG 2022-02-14 16:46:35,738 on stmt: $const278.22 = const(int, 1)
DEBUG 2022-02-14 16:46:35,738 on stmt: $280binary_subtract.23 = $276binary_subtract.21 - $const278.22
DEBUG 2022-02-14 16:46:35,738 on stmt: $282build_tuple.24 = build_tuple(items=[Var($266binary_subtract.16, _loop_hafnian_subroutines.py:180), Var($280binary_subtract.23, _loop_hafnian_subroutines.py:180)])
DEBUG 2022-02-14 16:46:35,738 on stmt: $284binary_subscr.25 = getitem(value=comb, index=$282build_tuple.24, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:46:35,738 on stmt: $288binary_multiply.27 = $284binary_subscr.25 * powfactor.1
DEBUG 2022-02-14 16:46:35,738 on stmt: $290inplace_add.28 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$258binary_subscr.12, rhs=$288binary_multiply.27, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:46:35,738 on stmt: comb[$254build_tuple.9] = $290inplace_add.28
DEBUG 2022-02-14 16:46:35,738 on stmt: jump 240
DEBUG 2022-02-14 16:46:35,738 ==== SSA block rewrite pass on 298
DEBUG 2022-02-14 16:46:35,738 Running <numba.core.ssa._FreshVarHandler object at 0x7f72037efd90>
DEBUG 2022-02-14 16:46:35,738 on stmt: jump 202
DEBUG 2022-02-14 16:46:35,738 ==== SSA block rewrite pass on 300
DEBUG 2022-02-14 16:46:35,738 Running <numba.core.ssa._FreshVarHandler object at 0x7f72037efd90>
DEBUG 2022-02-14 16:46:35,738 on stmt: jump 60
DEBUG 2022-02-14 16:46:35,738 ==== SSA block rewrite pass on 302
DEBUG 2022-02-14 16:46:35,738 Running <numba.core.ssa._FreshVarHandler object at 0x7f72037efd90>
DEBUG 2022-02-14 16:46:35,739 on stmt: $const306.2 = const(NoneType, None)
DEBUG 2022-02-14 16:46:35,739 on stmt: $const308.3 = const(NoneType, None)
DEBUG 2022-02-14 16:46:35,739 on stmt: $310build_slice.4 = global(slice: <class 'slice'>)
DEBUG 2022-02-14 16:46:35,739 on stmt: $310build_slice.5 = call $310build_slice.4($const306.2, $const308.3, func=$310build_slice.4, args=(Var($const306.2, _loop_hafnian_subroutines.py:182), Var($const308.3, _loop_hafnian_subroutines.py:182)), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:46:35,739 on stmt: $312build_tuple.6 = build_tuple(items=[Var(count, _loop_hafnian_subroutines.py:161), Var($310build_slice.5, _loop_hafnian_subroutines.py:182)])
DEBUG 2022-02-14 16:46:35,739 on stmt: $314binary_subscr.7 = getitem(value=comb, index=$312build_tuple.6, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:46:35,739 on stmt: $316return_value.8 = cast(value=$314binary_subscr.7)
DEBUG 2022-02-14 16:46:35,739 on stmt: return $316return_value.8
DEBUG 2022-02-14 16:46:35,739 Replaced assignments: defaultdict(<class 'list'>,
            {0: [<numba.core.ir.Assign object at 0x7f72038aa400>],
             90: [<numba.core.ir.Assign object at 0x7f72038aa040>]})
DEBUG 2022-02-14 16:46:35,739 ==== SSA block rewrite pass on 0
DEBUG 2022-02-14 16:46:35,739 Running <numba.core.ssa._FixSSAVars object at 0x7f72037ebd90>
DEBUG 2022-02-14 16:46:35,739 on stmt: E = arg(0, name=E)
DEBUG 2022-02-14 16:46:35,739 on stmt: AX_S = arg(1, name=AX_S)
DEBUG 2022-02-14 16:46:35,739 on stmt: XD_S = arg(2, name=XD_S)
DEBUG 2022-02-14 16:46:35,739 on stmt: D_S = arg(3, name=D_S)
DEBUG 2022-02-14 16:46:35,739 on stmt: n = arg(4, name=n)
DEBUG 2022-02-14 16:46:35,739 on stmt: oddloop = arg(5, name=oddloop)
DEBUG 2022-02-14 16:46:35,739 on stmt: oddVX_S = arg(6, name=oddVX_S)
DEBUG 2022-02-14 16:46:35,739 on stmt: $4load_method.1 = getattr(value=E, attr=copy)
DEBUG 2022-02-14 16:46:35,739 on stmt: E_k = call $4load_method.1(func=$4load_method.1, args=[], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:46:35,739 on stmt: count = const(int, 0)
DEBUG 2022-02-14 16:46:35,739 on stmt: $14load_global.4 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:46:35,739 on stmt: $16load_attr.5 = getattr(value=$14load_global.4, attr=zeros)
DEBUG 2022-02-14 16:46:35,739 on stmt: $const18.6 = const(int, 2)
DEBUG 2022-02-14 16:46:35,739 on stmt: $const22.8 = const(int, 1)
DEBUG 2022-02-14 16:46:35,740 on stmt: $24binary_add.9 = n + $const22.8
DEBUG 2022-02-14 16:46:35,740 on stmt: $26build_tuple.10 = build_tuple(items=[Var($const18.6, _loop_hafnian_subroutines.py:162), Var($24binary_add.9, _loop_hafnian_subroutines.py:162)])
DEBUG 2022-02-14 16:46:35,740 on stmt: $28load_global.11 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:46:35,740 on stmt: $30load_attr.12 = getattr(value=$28load_global.11, attr=complex128)
DEBUG 2022-02-14 16:46:35,740 on stmt: comb = call $16load_attr.5($26build_tuple.10, func=$16load_attr.5, args=[Var($26build_tuple.10, _loop_hafnian_subroutines.py:162)], kws=[('dtype', Var($30load_attr.12, _loop_hafnian_subroutines.py:162))], vararg=None, target=None)
DEBUG 2022-02-14 16:46:35,740 on stmt: $const38.15 = const(int, 1)
DEBUG 2022-02-14 16:46:35,740 on stmt: $const_0 = const(int, 0)
DEBUG 2022-02-14 16:46:35,740 on stmt: $const_0.1 = const(int, 0)
DEBUG 2022-02-14 16:46:35,740 on stmt: $const42.17 = build_tuple(items=[Var($const_0, _loop_hafnian_subroutines.py:163), Var($const_0.1, _loop_hafnian_subroutines.py:163)])
DEBUG 2022-02-14 16:46:35,740 on stmt: comb[(0, 0)] = $const38.15
DEBUG 2022-02-14 16:46:35,740 on stmt: $46load_global.18 = global(range: <class 'range'>)
DEBUG 2022-02-14 16:46:35,740 on stmt: $const48.19 = const(int, 1)
DEBUG 2022-02-14 16:46:35,740 on stmt: $const52.21 = const(int, 1)
DEBUG 2022-02-14 16:46:35,740 on stmt: $54binary_add.22 = n + $const52.21
DEBUG 2022-02-14 16:46:35,740 on stmt: $56call_function.23 = call $46load_global.18($const48.19, $54binary_add.22, func=$46load_global.18, args=[Var($const48.19, _loop_hafnian_subroutines.py:164), Var($54binary_add.22, _loop_hafnian_subroutines.py:164)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:46:35,740 on stmt: $58get_iter.24 = getiter(value=$56call_function.23)
DEBUG 2022-02-14 16:46:35,740 on stmt: $phi60.0 = $58get_iter.24
DEBUG 2022-02-14 16:46:35,740 on stmt: jump 60
DEBUG 2022-02-14 16:46:35,740 ==== SSA block rewrite pass on 60
DEBUG 2022-02-14 16:46:35,740 Running <numba.core.ssa._FixSSAVars object at 0x7f72037ebd90>
DEBUG 2022-02-14 16:46:35,740 on stmt: $60for_iter.1 = iternext(value=$phi60.0)
DEBUG 2022-02-14 16:46:35,740 on stmt: $60for_iter.2 = pair_first(value=$60for_iter.1)
DEBUG 2022-02-14 16:46:35,740 on stmt: $60for_iter.3 = pair_second(value=$60for_iter.1)
DEBUG 2022-02-14 16:46:35,740 on stmt: $phi62.1 = $60for_iter.2
DEBUG 2022-02-14 16:46:35,740 on stmt: branch $60for_iter.3, 62, 302
DEBUG 2022-02-14 16:46:35,741 ==== SSA block rewrite pass on 62
DEBUG 2022-02-14 16:46:35,741 Running <numba.core.ssa._FixSSAVars object at 0x7f72037ebd90>
DEBUG 2022-02-14 16:46:35,741 on stmt: i = $phi62.1
DEBUG 2022-02-14 16:46:35,741 on stmt: $const66.3 = const(int, 1)
DEBUG 2022-02-14 16:46:35,741 on stmt: $68compare_op.4 = i == $const66.3
DEBUG 2022-02-14 16:46:35,741 on stmt: bool70 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:46:35,741 on stmt: $70pred = call bool70($68compare_op.4, func=bool70, args=(Var($68compare_op.4, _loop_hafnian_subroutines.py:165),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:46:35,741 on stmt: branch $70pred, 72, 78
DEBUG 2022-02-14 16:46:35,741 ==== SSA block rewrite pass on 72
DEBUG 2022-02-14 16:46:35,741 Running <numba.core.ssa._FixSSAVars object at 0x7f72037ebd90>
DEBUG 2022-02-14 16:46:35,741 on stmt: factor = oddloop
DEBUG 2022-02-14 16:46:35,741 on stmt: jump 140
DEBUG 2022-02-14 16:46:35,741 ==== SSA block rewrite pass on 78
DEBUG 2022-02-14 16:46:35,741 Running <numba.core.ssa._FixSSAVars object at 0x7f72037ebd90>
DEBUG 2022-02-14 16:46:35,741 on stmt: $const80.2 = const(int, 2)
DEBUG 2022-02-14 16:46:35,741 on stmt: $82binary_modulo.3 = i % $const80.2
DEBUG 2022-02-14 16:46:35,741 on stmt: $const84.4 = const(int, 0)
DEBUG 2022-02-14 16:46:35,741 on stmt: $86compare_op.5 = $82binary_modulo.3 == $const84.4
DEBUG 2022-02-14 16:46:35,741 on stmt: bool88 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:46:35,741 on stmt: $88pred = call bool88($86compare_op.5, func=bool88, args=(Var($86compare_op.5, _loop_hafnian_subroutines.py:167),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:46:35,741 on stmt: branch $88pred, 90, 124
DEBUG 2022-02-14 16:46:35,741 ==== SSA block rewrite pass on 90
DEBUG 2022-02-14 16:46:35,741 Running <numba.core.ssa._FixSSAVars object at 0x7f72037ebd90>
DEBUG 2022-02-14 16:46:35,741 on stmt: $92load_method.2 = getattr(value=E_k, attr=sum)
DEBUG 2022-02-14 16:46:35,741 find_def var='E_k' stmt=$92load_method.2 = getattr(value=E_k, attr=sum)
DEBUG 2022-02-14 16:46:35,741 find_def_from_top label 90
DEBUG 2022-02-14 16:46:35,742 idom 78 from label 90
DEBUG 2022-02-14 16:46:35,742 find_def_from_bottom label 78
DEBUG 2022-02-14 16:46:35,742 find_def_from_top label 78
DEBUG 2022-02-14 16:46:35,742 idom 62 from label 78
DEBUG 2022-02-14 16:46:35,742 find_def_from_bottom label 62
DEBUG 2022-02-14 16:46:35,742 find_def_from_top label 62
DEBUG 2022-02-14 16:46:35,742 idom 60 from label 62
DEBUG 2022-02-14 16:46:35,742 find_def_from_bottom label 60
DEBUG 2022-02-14 16:46:35,742 find_def_from_top label 60
DEBUG 2022-02-14 16:46:35,742 insert phi node E_k.2 = phi(incoming_values=[], incoming_blocks=[]) at 60
DEBUG 2022-02-14 16:46:35,742 find_def_from_bottom label 0
DEBUG 2022-02-14 16:46:35,742 incoming_def E_k = call $4load_method.1(func=$4load_method.1, args=[], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:46:35,742 find_def_from_bottom label 300
DEBUG 2022-02-14 16:46:35,742 find_def_from_top label 300
DEBUG 2022-02-14 16:46:35,742 idom 202 from label 300
DEBUG 2022-02-14 16:46:35,742 find_def_from_bottom label 202
DEBUG 2022-02-14 16:46:35,742 find_def_from_top label 202
DEBUG 2022-02-14 16:46:35,742 idom 140 from label 202
DEBUG 2022-02-14 16:46:35,742 find_def_from_bottom label 140
DEBUG 2022-02-14 16:46:35,742 find_def_from_top label 140
DEBUG 2022-02-14 16:46:35,742 insert phi node E_k.3 = phi(incoming_values=[], incoming_blocks=[]) at 140
DEBUG 2022-02-14 16:46:35,742 find_def_from_bottom label 72
DEBUG 2022-02-14 16:46:35,742 find_def_from_top label 72
DEBUG 2022-02-14 16:46:35,742 idom 62 from label 72
DEBUG 2022-02-14 16:46:35,742 find_def_from_bottom label 62
DEBUG 2022-02-14 16:46:35,742 find_def_from_top label 62
DEBUG 2022-02-14 16:46:35,742 idom 60 from label 62
DEBUG 2022-02-14 16:46:35,742 find_def_from_bottom label 60
DEBUG 2022-02-14 16:46:35,742 incoming_def E_k.2 = phi(incoming_values=[Var(E_k, _loop_hafnian_subroutines.py:159)], incoming_blocks=[0])
DEBUG 2022-02-14 16:46:35,743 find_def_from_bottom label 90
DEBUG 2022-02-14 16:46:35,743 incoming_def E_k.1 = $118inplace_multiply.14
DEBUG 2022-02-14 16:46:35,743 find_def_from_bottom label 124
DEBUG 2022-02-14 16:46:35,743 find_def_from_top label 124
DEBUG 2022-02-14 16:46:35,743 idom 78 from label 124
DEBUG 2022-02-14 16:46:35,743 find_def_from_bottom label 78
DEBUG 2022-02-14 16:46:35,743 find_def_from_top label 78
DEBUG 2022-02-14 16:46:35,743 idom 62 from label 78
DEBUG 2022-02-14 16:46:35,743 find_def_from_bottom label 62
DEBUG 2022-02-14 16:46:35,743 find_def_from_top label 62
DEBUG 2022-02-14 16:46:35,743 idom 60 from label 62
DEBUG 2022-02-14 16:46:35,743 find_def_from_bottom label 60
DEBUG 2022-02-14 16:46:35,743 incoming_def E_k.2 = phi(incoming_values=[Var(E_k, _loop_hafnian_subroutines.py:159)], incoming_blocks=[0])
DEBUG 2022-02-14 16:46:35,743 incoming_def E_k.3 = phi(incoming_values=[Var(E_k.2, _loop_hafnian_subroutines.py:168), Var(E_k.1, _loop_hafnian_subroutines.py:169), Var(E_k.2, _loop_hafnian_subroutines.py:168)], incoming_blocks=[72, 90, 124])
DEBUG 2022-02-14 16:46:35,743 replaced with: $92load_method.2 = getattr(value=E_k.2, attr=sum)
DEBUG 2022-02-14 16:46:35,743 on stmt: $94call_method.3 = call $92load_method.2(func=$92load_method.2, args=[], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:46:35,743 on stmt: $98binary_true_divide.5 = $94call_method.3 / i
DEBUG 2022-02-14 16:46:35,743 on stmt: $104binary_matrix_multiply.8 = XD_S <built-in function matmul> D_S
DEBUG 2022-02-14 16:46:35,743 on stmt: $const106.9 = const(int, 2)
DEBUG 2022-02-14 16:46:35,743 on stmt: $108binary_true_divide.10 = $104binary_matrix_multiply.8 / $const106.9
DEBUG 2022-02-14 16:46:35,743 on stmt: factor = $98binary_true_divide.5 + $108binary_true_divide.10
DEBUG 2022-02-14 16:46:35,743 on stmt: $118inplace_multiply.14 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=E_k, rhs=E, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:46:35,743 find_def var='E_k' stmt=$118inplace_multiply.14 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=E_k, rhs=E, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:46:35,743 find_def_from_top label 90
DEBUG 2022-02-14 16:46:35,743 idom 78 from label 90
DEBUG 2022-02-14 16:46:35,743 find_def_from_bottom label 78
DEBUG 2022-02-14 16:46:35,743 find_def_from_top label 78
DEBUG 2022-02-14 16:46:35,744 idom 62 from label 78
DEBUG 2022-02-14 16:46:35,744 find_def_from_bottom label 62
DEBUG 2022-02-14 16:46:35,744 find_def_from_top label 62
DEBUG 2022-02-14 16:46:35,744 idom 60 from label 62
DEBUG 2022-02-14 16:46:35,744 find_def_from_bottom label 60
DEBUG 2022-02-14 16:46:35,744 replaced with: $118inplace_multiply.14 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=E_k.2, rhs=E, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:46:35,744 on stmt: E_k.1 = $118inplace_multiply.14
DEBUG 2022-02-14 16:46:35,744 on stmt: jump 140
DEBUG 2022-02-14 16:46:35,744 ==== SSA block rewrite pass on 124
DEBUG 2022-02-14 16:46:35,744 Running <numba.core.ssa._FixSSAVars object at 0x7f72037ebd90>
DEBUG 2022-02-14 16:46:35,744 on stmt: factor = oddVX_S <built-in function matmul> D_S
DEBUG 2022-02-14 16:46:35,744 on stmt: $136binary_matrix_multiply.6 = AX_S <built-in function matmul> D_S
DEBUG 2022-02-14 16:46:35,744 on stmt: D_S = $136binary_matrix_multiply.6
DEBUG 2022-02-14 16:46:35,744 on stmt: jump 140
DEBUG 2022-02-14 16:46:35,744 ==== SSA block rewrite pass on 140
DEBUG 2022-02-14 16:46:35,744 Running <numba.core.ssa._FixSSAVars object at 0x7f72037ebd90>
DEBUG 2022-02-14 16:46:35,744 on stmt: powfactor = const(int, 1)
DEBUG 2022-02-14 16:46:35,744 on stmt: $const144.2 = const(int, 1)
DEBUG 2022-02-14 16:46:35,744 on stmt: $148binary_subtract.4 = $const144.2 - count
DEBUG 2022-02-14 16:46:35,744 on stmt: count = $148binary_subtract.4
DEBUG 2022-02-14 16:46:35,744 on stmt: $const154.6 = const(int, 1)
DEBUG 2022-02-14 16:46:35,744 on stmt: $158binary_subtract.8 = $const154.6 - count
DEBUG 2022-02-14 16:46:35,744 on stmt: $const160.9 = const(NoneType, None)
DEBUG 2022-02-14 16:46:35,744 on stmt: $const162.10 = const(NoneType, None)
DEBUG 2022-02-14 16:46:35,744 on stmt: $164build_slice.11 = global(slice: <class 'slice'>)
DEBUG 2022-02-14 16:46:35,744 on stmt: $164build_slice.12 = call $164build_slice.11($const160.9, $const162.10, func=$164build_slice.11, args=(Var($const160.9, _loop_hafnian_subroutines.py:176), Var($const162.10, _loop_hafnian_subroutines.py:176)), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:46:35,745 on stmt: $166build_tuple.13 = build_tuple(items=[Var($158binary_subtract.8, _loop_hafnian_subroutines.py:176), Var($164build_slice.12, _loop_hafnian_subroutines.py:176)])
DEBUG 2022-02-14 16:46:35,745 on stmt: $168binary_subscr.14 = getitem(value=comb, index=$166build_tuple.13, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:46:35,745 on stmt: $const174.17 = const(NoneType, None)
DEBUG 2022-02-14 16:46:35,745 on stmt: $const176.18 = const(NoneType, None)
DEBUG 2022-02-14 16:46:35,745 on stmt: $178build_slice.19 = global(slice: <class 'slice'>)
DEBUG 2022-02-14 16:46:35,745 on stmt: $178build_slice.20 = call $178build_slice.19($const174.17, $const176.18, func=$178build_slice.19, args=(Var($const174.17, _loop_hafnian_subroutines.py:176), Var($const176.18, _loop_hafnian_subroutines.py:176)), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:46:35,745 on stmt: $180build_tuple.21 = build_tuple(items=[Var(count, _loop_hafnian_subroutines.py:161), Var($178build_slice.20, _loop_hafnian_subroutines.py:176)])
DEBUG 2022-02-14 16:46:35,745 on stmt: comb[$180build_tuple.21] = $168binary_subscr.14
DEBUG 2022-02-14 16:46:35,745 on stmt: $184load_global.22 = global(range: <class 'range'>)
DEBUG 2022-02-14 16:46:35,745 on stmt: $const186.23 = const(int, 1)
DEBUG 2022-02-14 16:46:35,745 on stmt: $192binary_floor_divide.26 = n // i
DEBUG 2022-02-14 16:46:35,745 on stmt: $const194.27 = const(int, 1)
DEBUG 2022-02-14 16:46:35,745 on stmt: $196binary_add.28 = $192binary_floor_divide.26 + $const194.27
DEBUG 2022-02-14 16:46:35,745 on stmt: $198call_function.29 = call $184load_global.22($const186.23, $196binary_add.28, func=$184load_global.22, args=[Var($const186.23, _loop_hafnian_subroutines.py:177), Var($196binary_add.28, _loop_hafnian_subroutines.py:177)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:46:35,745 on stmt: $200get_iter.30 = getiter(value=$198call_function.29)
DEBUG 2022-02-14 16:46:35,745 on stmt: $phi202.1 = $200get_iter.30
DEBUG 2022-02-14 16:46:35,745 on stmt: jump 202
DEBUG 2022-02-14 16:46:35,745 ==== SSA block rewrite pass on 202
DEBUG 2022-02-14 16:46:35,745 Running <numba.core.ssa._FixSSAVars object at 0x7f72037ebd90>
DEBUG 2022-02-14 16:46:35,745 on stmt: powfactor.2 = phi(incoming_values=[Var(powfactor.1, _loop_hafnian_subroutines.py:178), Var(powfactor, _loop_hafnian_subroutines.py:174)], incoming_blocks=[298, 140])
DEBUG 2022-02-14 16:46:35,745 on stmt: $202for_iter.2 = iternext(value=$phi202.1)
DEBUG 2022-02-14 16:46:35,745 on stmt: $202for_iter.3 = pair_first(value=$202for_iter.2)
DEBUG 2022-02-14 16:46:35,745 on stmt: $202for_iter.4 = pair_second(value=$202for_iter.2)
DEBUG 2022-02-14 16:46:35,745 on stmt: $phi204.2 = $202for_iter.3
DEBUG 2022-02-14 16:46:35,746 on stmt: branch $202for_iter.4, 204, 300
DEBUG 2022-02-14 16:46:35,746 ==== SSA block rewrite pass on 204
DEBUG 2022-02-14 16:46:35,746 Running <numba.core.ssa._FixSSAVars object at 0x7f72037ebd90>
DEBUG 2022-02-14 16:46:35,746 on stmt: j = $phi204.2
DEBUG 2022-02-14 16:46:35,746 on stmt: $212binary_true_divide.6 = factor / j
DEBUG 2022-02-14 16:46:35,746 on stmt: $214inplace_multiply.7 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=powfactor.2, rhs=$212binary_true_divide.6, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:46:35,746 on stmt: powfactor.1 = $214inplace_multiply.7
DEBUG 2022-02-14 16:46:35,746 on stmt: $218load_global.8 = global(range: <class 'range'>)
DEBUG 2022-02-14 16:46:35,746 on stmt: $224binary_multiply.11 = i * j
DEBUG 2022-02-14 16:46:35,746 on stmt: $const226.12 = const(int, 1)
DEBUG 2022-02-14 16:46:35,746 on stmt: $228binary_add.13 = $224binary_multiply.11 + $const226.12
DEBUG 2022-02-14 16:46:35,746 on stmt: $const232.15 = const(int, 2)
DEBUG 2022-02-14 16:46:35,746 on stmt: $234binary_add.16 = n + $const232.15
DEBUG 2022-02-14 16:46:35,746 on stmt: $236call_function.17 = call $218load_global.8($228binary_add.13, $234binary_add.16, func=$218load_global.8, args=[Var($228binary_add.13, _loop_hafnian_subroutines.py:179), Var($234binary_add.16, _loop_hafnian_subroutines.py:179)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:46:35,746 on stmt: $238get_iter.18 = getiter(value=$236call_function.17)
DEBUG 2022-02-14 16:46:35,746 on stmt: $phi240.2 = $238get_iter.18
DEBUG 2022-02-14 16:46:35,746 on stmt: jump 240
DEBUG 2022-02-14 16:46:35,746 ==== SSA block rewrite pass on 240
DEBUG 2022-02-14 16:46:35,746 Running <numba.core.ssa._FixSSAVars object at 0x7f72037ebd90>
DEBUG 2022-02-14 16:46:35,746 on stmt: $240for_iter.3 = iternext(value=$phi240.2)
DEBUG 2022-02-14 16:46:35,746 on stmt: $240for_iter.4 = pair_first(value=$240for_iter.3)
DEBUG 2022-02-14 16:46:35,746 on stmt: $240for_iter.5 = pair_second(value=$240for_iter.3)
DEBUG 2022-02-14 16:46:35,746 on stmt: $phi242.3 = $240for_iter.4
DEBUG 2022-02-14 16:46:35,746 on stmt: branch $240for_iter.5, 242, 298
DEBUG 2022-02-14 16:46:35,746 ==== SSA block rewrite pass on 242
DEBUG 2022-02-14 16:46:35,747 Running <numba.core.ssa._FixSSAVars object at 0x7f72037ebd90>
DEBUG 2022-02-14 16:46:35,747 on stmt: k = $phi242.3
DEBUG 2022-02-14 16:46:35,747 on stmt: $const250.7 = const(int, 1)
DEBUG 2022-02-14 16:46:35,747 on stmt: $252binary_subtract.8 = k - $const250.7
DEBUG 2022-02-14 16:46:35,747 on stmt: $254build_tuple.9 = build_tuple(items=[Var(count, _loop_hafnian_subroutines.py:161), Var($252binary_subtract.8, _loop_hafnian_subroutines.py:180)])
DEBUG 2022-02-14 16:46:35,747 on stmt: $258binary_subscr.12 = getitem(value=comb, index=$254build_tuple.9, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:46:35,747 on stmt: $const262.14 = const(int, 1)
DEBUG 2022-02-14 16:46:35,747 on stmt: $266binary_subtract.16 = $const262.14 - count
DEBUG 2022-02-14 16:46:35,747 on stmt: $274binary_multiply.20 = i * j
DEBUG 2022-02-14 16:46:35,747 on stmt: $276binary_subtract.21 = k - $274binary_multiply.20
DEBUG 2022-02-14 16:46:35,747 on stmt: $const278.22 = const(int, 1)
DEBUG 2022-02-14 16:46:35,747 on stmt: $280binary_subtract.23 = $276binary_subtract.21 - $const278.22
DEBUG 2022-02-14 16:46:35,747 on stmt: $282build_tuple.24 = build_tuple(items=[Var($266binary_subtract.16, _loop_hafnian_subroutines.py:180), Var($280binary_subtract.23, _loop_hafnian_subroutines.py:180)])
DEBUG 2022-02-14 16:46:35,747 on stmt: $284binary_subscr.25 = getitem(value=comb, index=$282build_tuple.24, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:46:35,747 on stmt: $288binary_multiply.27 = $284binary_subscr.25 * powfactor.1
DEBUG 2022-02-14 16:46:35,747 on stmt: $290inplace_add.28 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$258binary_subscr.12, rhs=$288binary_multiply.27, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:46:35,747 on stmt: comb[$254build_tuple.9] = $290inplace_add.28
DEBUG 2022-02-14 16:46:35,747 on stmt: jump 240
DEBUG 2022-02-14 16:46:35,747 ==== SSA block rewrite pass on 298
DEBUG 2022-02-14 16:46:35,747 Running <numba.core.ssa._FixSSAVars object at 0x7f72037ebd90>
DEBUG 2022-02-14 16:46:35,747 on stmt: jump 202
DEBUG 2022-02-14 16:46:35,747 ==== SSA block rewrite pass on 300
DEBUG 2022-02-14 16:46:35,747 Running <numba.core.ssa._FixSSAVars object at 0x7f72037ebd90>
DEBUG 2022-02-14 16:46:35,747 on stmt: jump 60
DEBUG 2022-02-14 16:46:35,747 ==== SSA block rewrite pass on 302
DEBUG 2022-02-14 16:46:35,747 Running <numba.core.ssa._FixSSAVars object at 0x7f72037ebd90>
DEBUG 2022-02-14 16:46:35,747 on stmt: $const306.2 = const(NoneType, None)
DEBUG 2022-02-14 16:46:35,747 on stmt: $const308.3 = const(NoneType, None)
DEBUG 2022-02-14 16:46:35,748 on stmt: $310build_slice.4 = global(slice: <class 'slice'>)
DEBUG 2022-02-14 16:46:35,748 on stmt: $310build_slice.5 = call $310build_slice.4($const306.2, $const308.3, func=$310build_slice.4, args=(Var($const306.2, _loop_hafnian_subroutines.py:182), Var($const308.3, _loop_hafnian_subroutines.py:182)), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:46:35,748 on stmt: $312build_tuple.6 = build_tuple(items=[Var(count, _loop_hafnian_subroutines.py:161), Var($310build_slice.5, _loop_hafnian_subroutines.py:182)])
DEBUG 2022-02-14 16:46:35,748 on stmt: $314binary_subscr.7 = getitem(value=comb, index=$312build_tuple.6, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:46:35,748 on stmt: $316return_value.8 = cast(value=$314binary_subscr.7)
DEBUG 2022-02-14 16:46:35,748 on stmt: return $316return_value.8
DEBUG 2022-02-14 16:46:35,748 Fix SSA violator on var factor
DEBUG 2022-02-14 16:46:35,748 ==== SSA block rewrite pass on 0
DEBUG 2022-02-14 16:46:35,748 Running <numba.core.ssa._FreshVarHandler object at 0x7f72038aa4c0>
DEBUG 2022-02-14 16:46:35,748 on stmt: E = arg(0, name=E)
DEBUG 2022-02-14 16:46:35,748 on stmt: AX_S = arg(1, name=AX_S)
DEBUG 2022-02-14 16:46:35,748 on stmt: XD_S = arg(2, name=XD_S)
DEBUG 2022-02-14 16:46:35,748 on stmt: D_S = arg(3, name=D_S)
DEBUG 2022-02-14 16:46:35,748 on stmt: n = arg(4, name=n)
DEBUG 2022-02-14 16:46:35,748 on stmt: oddloop = arg(5, name=oddloop)
DEBUG 2022-02-14 16:46:35,748 on stmt: oddVX_S = arg(6, name=oddVX_S)
DEBUG 2022-02-14 16:46:35,748 on stmt: $4load_method.1 = getattr(value=E, attr=copy)
DEBUG 2022-02-14 16:46:35,748 on stmt: E_k = call $4load_method.1(func=$4load_method.1, args=[], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:46:35,748 on stmt: count = const(int, 0)
DEBUG 2022-02-14 16:46:35,748 on stmt: $14load_global.4 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:46:35,748 on stmt: $16load_attr.5 = getattr(value=$14load_global.4, attr=zeros)
DEBUG 2022-02-14 16:46:35,748 on stmt: $const18.6 = const(int, 2)
DEBUG 2022-02-14 16:46:35,748 on stmt: $const22.8 = const(int, 1)
DEBUG 2022-02-14 16:46:35,748 on stmt: $24binary_add.9 = n + $const22.8
DEBUG 2022-02-14 16:46:35,748 on stmt: $26build_tuple.10 = build_tuple(items=[Var($const18.6, _loop_hafnian_subroutines.py:162), Var($24binary_add.9, _loop_hafnian_subroutines.py:162)])
DEBUG 2022-02-14 16:46:35,748 on stmt: $28load_global.11 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:46:35,749 on stmt: $30load_attr.12 = getattr(value=$28load_global.11, attr=complex128)
DEBUG 2022-02-14 16:46:35,749 on stmt: comb = call $16load_attr.5($26build_tuple.10, func=$16load_attr.5, args=[Var($26build_tuple.10, _loop_hafnian_subroutines.py:162)], kws=[('dtype', Var($30load_attr.12, _loop_hafnian_subroutines.py:162))], vararg=None, target=None)
DEBUG 2022-02-14 16:46:35,749 on stmt: $const38.15 = const(int, 1)
DEBUG 2022-02-14 16:46:35,749 on stmt: $const_0 = const(int, 0)
DEBUG 2022-02-14 16:46:35,749 on stmt: $const_0.1 = const(int, 0)
DEBUG 2022-02-14 16:46:35,749 on stmt: $const42.17 = build_tuple(items=[Var($const_0, _loop_hafnian_subroutines.py:163), Var($const_0.1, _loop_hafnian_subroutines.py:163)])
DEBUG 2022-02-14 16:46:35,749 on stmt: comb[(0, 0)] = $const38.15
DEBUG 2022-02-14 16:46:35,749 on stmt: $46load_global.18 = global(range: <class 'range'>)
DEBUG 2022-02-14 16:46:35,749 on stmt: $const48.19 = const(int, 1)
DEBUG 2022-02-14 16:46:35,749 on stmt: $const52.21 = const(int, 1)
DEBUG 2022-02-14 16:46:35,749 on stmt: $54binary_add.22 = n + $const52.21
DEBUG 2022-02-14 16:46:35,749 on stmt: $56call_function.23 = call $46load_global.18($const48.19, $54binary_add.22, func=$46load_global.18, args=[Var($const48.19, _loop_hafnian_subroutines.py:164), Var($54binary_add.22, _loop_hafnian_subroutines.py:164)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:46:35,749 on stmt: $58get_iter.24 = getiter(value=$56call_function.23)
DEBUG 2022-02-14 16:46:35,749 on stmt: $phi60.0 = $58get_iter.24
DEBUG 2022-02-14 16:46:35,749 on stmt: jump 60
DEBUG 2022-02-14 16:46:35,749 ==== SSA block rewrite pass on 60
DEBUG 2022-02-14 16:46:35,749 Running <numba.core.ssa._FreshVarHandler object at 0x7f72038aa4c0>
DEBUG 2022-02-14 16:46:35,749 on stmt: E_k.2 = phi(incoming_values=[Var(E_k, _loop_hafnian_subroutines.py:159), Var(E_k.3, _loop_hafnian_subroutines.py:168)], incoming_blocks=[0, 300])
DEBUG 2022-02-14 16:46:35,749 on stmt: $60for_iter.1 = iternext(value=$phi60.0)
DEBUG 2022-02-14 16:46:35,749 on stmt: $60for_iter.2 = pair_first(value=$60for_iter.1)
DEBUG 2022-02-14 16:46:35,749 on stmt: $60for_iter.3 = pair_second(value=$60for_iter.1)
DEBUG 2022-02-14 16:46:35,749 on stmt: $phi62.1 = $60for_iter.2
DEBUG 2022-02-14 16:46:35,749 on stmt: branch $60for_iter.3, 62, 302
DEBUG 2022-02-14 16:46:35,749 ==== SSA block rewrite pass on 62
DEBUG 2022-02-14 16:46:35,749 Running <numba.core.ssa._FreshVarHandler object at 0x7f72038aa4c0>
DEBUG 2022-02-14 16:46:35,749 on stmt: i = $phi62.1
DEBUG 2022-02-14 16:46:35,749 on stmt: $const66.3 = const(int, 1)
DEBUG 2022-02-14 16:46:35,750 on stmt: $68compare_op.4 = i == $const66.3
DEBUG 2022-02-14 16:46:35,750 on stmt: bool70 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:46:35,750 on stmt: $70pred = call bool70($68compare_op.4, func=bool70, args=(Var($68compare_op.4, _loop_hafnian_subroutines.py:165),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:46:35,750 on stmt: branch $70pred, 72, 78
DEBUG 2022-02-14 16:46:35,750 ==== SSA block rewrite pass on 72
DEBUG 2022-02-14 16:46:35,750 Running <numba.core.ssa._FreshVarHandler object at 0x7f72038aa4c0>
DEBUG 2022-02-14 16:46:35,750 on stmt: factor = oddloop
DEBUG 2022-02-14 16:46:35,750 first assign: factor
DEBUG 2022-02-14 16:46:35,750 replaced with: factor = oddloop
DEBUG 2022-02-14 16:46:35,750 on stmt: jump 140
DEBUG 2022-02-14 16:46:35,750 ==== SSA block rewrite pass on 78
DEBUG 2022-02-14 16:46:35,750 Running <numba.core.ssa._FreshVarHandler object at 0x7f72038aa4c0>
DEBUG 2022-02-14 16:46:35,750 on stmt: $const80.2 = const(int, 2)
DEBUG 2022-02-14 16:46:35,750 on stmt: $82binary_modulo.3 = i % $const80.2
DEBUG 2022-02-14 16:46:35,750 on stmt: $const84.4 = const(int, 0)
DEBUG 2022-02-14 16:46:35,750 on stmt: $86compare_op.5 = $82binary_modulo.3 == $const84.4
DEBUG 2022-02-14 16:46:35,750 on stmt: bool88 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:46:35,750 on stmt: $88pred = call bool88($86compare_op.5, func=bool88, args=(Var($86compare_op.5, _loop_hafnian_subroutines.py:167),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:46:35,751 on stmt: branch $88pred, 90, 124
DEBUG 2022-02-14 16:46:35,751 ==== SSA block rewrite pass on 90
DEBUG 2022-02-14 16:46:35,751 Running <numba.core.ssa._FreshVarHandler object at 0x7f72038aa4c0>
DEBUG 2022-02-14 16:46:35,751 on stmt: $92load_method.2 = getattr(value=E_k.2, attr=sum)
DEBUG 2022-02-14 16:46:35,751 on stmt: $94call_method.3 = call $92load_method.2(func=$92load_method.2, args=[], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:46:35,751 on stmt: $98binary_true_divide.5 = $94call_method.3 / i
DEBUG 2022-02-14 16:46:35,751 on stmt: $104binary_matrix_multiply.8 = XD_S <built-in function matmul> D_S
DEBUG 2022-02-14 16:46:35,751 on stmt: $const106.9 = const(int, 2)
DEBUG 2022-02-14 16:46:35,751 on stmt: $108binary_true_divide.10 = $104binary_matrix_multiply.8 / $const106.9
DEBUG 2022-02-14 16:46:35,751 on stmt: factor = $98binary_true_divide.5 + $108binary_true_divide.10
DEBUG 2022-02-14 16:46:35,751 replaced with: factor.1 = $98binary_true_divide.5 + $108binary_true_divide.10
DEBUG 2022-02-14 16:46:35,751 on stmt: $118inplace_multiply.14 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=E_k.2, rhs=E, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:46:35,751 on stmt: E_k.1 = $118inplace_multiply.14
DEBUG 2022-02-14 16:46:35,751 on stmt: jump 140
DEBUG 2022-02-14 16:46:35,751 ==== SSA block rewrite pass on 124
DEBUG 2022-02-14 16:46:35,751 Running <numba.core.ssa._FreshVarHandler object at 0x7f72038aa4c0>
DEBUG 2022-02-14 16:46:35,751 on stmt: factor = oddVX_S <built-in function matmul> D_S
DEBUG 2022-02-14 16:46:35,751 replaced with: factor.2 = oddVX_S <built-in function matmul> D_S
DEBUG 2022-02-14 16:46:35,751 on stmt: $136binary_matrix_multiply.6 = AX_S <built-in function matmul> D_S
DEBUG 2022-02-14 16:46:35,751 on stmt: D_S = $136binary_matrix_multiply.6
DEBUG 2022-02-14 16:46:35,751 on stmt: jump 140
DEBUG 2022-02-14 16:46:35,751 ==== SSA block rewrite pass on 140
DEBUG 2022-02-14 16:46:35,751 Running <numba.core.ssa._FreshVarHandler object at 0x7f72038aa4c0>
DEBUG 2022-02-14 16:46:35,751 on stmt: E_k.3 = phi(incoming_values=[Var(E_k.2, _loop_hafnian_subroutines.py:168), Var(E_k.1, _loop_hafnian_subroutines.py:169), Var(E_k.2, _loop_hafnian_subroutines.py:168)], incoming_blocks=[72, 90, 124])
DEBUG 2022-02-14 16:46:35,752 on stmt: powfactor = const(int, 1)
DEBUG 2022-02-14 16:46:35,752 on stmt: $const144.2 = const(int, 1)
DEBUG 2022-02-14 16:46:35,752 on stmt: $148binary_subtract.4 = $const144.2 - count
DEBUG 2022-02-14 16:46:35,752 on stmt: count = $148binary_subtract.4
DEBUG 2022-02-14 16:46:35,752 on stmt: $const154.6 = const(int, 1)
DEBUG 2022-02-14 16:46:35,752 on stmt: $158binary_subtract.8 = $const154.6 - count
DEBUG 2022-02-14 16:46:35,752 on stmt: $const160.9 = const(NoneType, None)
DEBUG 2022-02-14 16:46:35,752 on stmt: $const162.10 = const(NoneType, None)
DEBUG 2022-02-14 16:46:35,752 on stmt: $164build_slice.11 = global(slice: <class 'slice'>)
DEBUG 2022-02-14 16:46:35,752 on stmt: $164build_slice.12 = call $164build_slice.11($const160.9, $const162.10, func=$164build_slice.11, args=(Var($const160.9, _loop_hafnian_subroutines.py:176), Var($const162.10, _loop_hafnian_subroutines.py:176)), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:46:35,752 on stmt: $166build_tuple.13 = build_tuple(items=[Var($158binary_subtract.8, _loop_hafnian_subroutines.py:176), Var($164build_slice.12, _loop_hafnian_subroutines.py:176)])
DEBUG 2022-02-14 16:46:35,752 on stmt: $168binary_subscr.14 = getitem(value=comb, index=$166build_tuple.13, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:46:35,752 on stmt: $const174.17 = const(NoneType, None)
DEBUG 2022-02-14 16:46:35,752 on stmt: $const176.18 = const(NoneType, None)
DEBUG 2022-02-14 16:46:35,752 on stmt: $178build_slice.19 = global(slice: <class 'slice'>)
DEBUG 2022-02-14 16:46:35,752 on stmt: $178build_slice.20 = call $178build_slice.19($const174.17, $const176.18, func=$178build_slice.19, args=(Var($const174.17, _loop_hafnian_subroutines.py:176), Var($const176.18, _loop_hafnian_subroutines.py:176)), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:46:35,752 on stmt: $180build_tuple.21 = build_tuple(items=[Var(count, _loop_hafnian_subroutines.py:161), Var($178build_slice.20, _loop_hafnian_subroutines.py:176)])
DEBUG 2022-02-14 16:46:35,752 on stmt: comb[$180build_tuple.21] = $168binary_subscr.14
DEBUG 2022-02-14 16:46:35,752 on stmt: $184load_global.22 = global(range: <class 'range'>)
DEBUG 2022-02-14 16:46:35,752 on stmt: $const186.23 = const(int, 1)
DEBUG 2022-02-14 16:46:35,752 on stmt: $192binary_floor_divide.26 = n // i
DEBUG 2022-02-14 16:46:35,752 on stmt: $const194.27 = const(int, 1)
DEBUG 2022-02-14 16:46:35,752 on stmt: $196binary_add.28 = $192binary_floor_divide.26 + $const194.27
DEBUG 2022-02-14 16:46:35,752 on stmt: $198call_function.29 = call $184load_global.22($const186.23, $196binary_add.28, func=$184load_global.22, args=[Var($const186.23, _loop_hafnian_subroutines.py:177), Var($196binary_add.28, _loop_hafnian_subroutines.py:177)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:46:35,752 on stmt: $200get_iter.30 = getiter(value=$198call_function.29)
DEBUG 2022-02-14 16:46:35,752 on stmt: $phi202.1 = $200get_iter.30
DEBUG 2022-02-14 16:46:35,753 on stmt: jump 202
DEBUG 2022-02-14 16:46:35,753 ==== SSA block rewrite pass on 202
DEBUG 2022-02-14 16:46:35,753 Running <numba.core.ssa._FreshVarHandler object at 0x7f72038aa4c0>
DEBUG 2022-02-14 16:46:35,753 on stmt: powfactor.2 = phi(incoming_values=[Var(powfactor.1, _loop_hafnian_subroutines.py:178), Var(powfactor, _loop_hafnian_subroutines.py:174)], incoming_blocks=[298, 140])
DEBUG 2022-02-14 16:46:35,753 on stmt: $202for_iter.2 = iternext(value=$phi202.1)
DEBUG 2022-02-14 16:46:35,753 on stmt: $202for_iter.3 = pair_first(value=$202for_iter.2)
DEBUG 2022-02-14 16:46:35,753 on stmt: $202for_iter.4 = pair_second(value=$202for_iter.2)
DEBUG 2022-02-14 16:46:35,753 on stmt: $phi204.2 = $202for_iter.3
DEBUG 2022-02-14 16:46:35,753 on stmt: branch $202for_iter.4, 204, 300
DEBUG 2022-02-14 16:46:35,753 ==== SSA block rewrite pass on 204
DEBUG 2022-02-14 16:46:35,753 Running <numba.core.ssa._FreshVarHandler object at 0x7f72038aa4c0>
DEBUG 2022-02-14 16:46:35,753 on stmt: j = $phi204.2
DEBUG 2022-02-14 16:46:35,753 on stmt: $212binary_true_divide.6 = factor / j
DEBUG 2022-02-14 16:46:35,753 on stmt: $214inplace_multiply.7 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=powfactor.2, rhs=$212binary_true_divide.6, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:46:35,753 on stmt: powfactor.1 = $214inplace_multiply.7
DEBUG 2022-02-14 16:46:35,753 on stmt: $218load_global.8 = global(range: <class 'range'>)
DEBUG 2022-02-14 16:46:35,753 on stmt: $224binary_multiply.11 = i * j
DEBUG 2022-02-14 16:46:35,753 on stmt: $const226.12 = const(int, 1)
DEBUG 2022-02-14 16:46:35,753 on stmt: $228binary_add.13 = $224binary_multiply.11 + $const226.12
DEBUG 2022-02-14 16:46:35,753 on stmt: $const232.15 = const(int, 2)
DEBUG 2022-02-14 16:46:35,753 on stmt: $234binary_add.16 = n + $const232.15
DEBUG 2022-02-14 16:46:35,753 on stmt: $236call_function.17 = call $218load_global.8($228binary_add.13, $234binary_add.16, func=$218load_global.8, args=[Var($228binary_add.13, _loop_hafnian_subroutines.py:179), Var($234binary_add.16, _loop_hafnian_subroutines.py:179)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:46:35,753 on stmt: $238get_iter.18 = getiter(value=$236call_function.17)
DEBUG 2022-02-14 16:46:35,753 on stmt: $phi240.2 = $238get_iter.18
DEBUG 2022-02-14 16:46:35,753 on stmt: jump 240
DEBUG 2022-02-14 16:46:35,753 ==== SSA block rewrite pass on 240
DEBUG 2022-02-14 16:46:35,753 Running <numba.core.ssa._FreshVarHandler object at 0x7f72038aa4c0>
DEBUG 2022-02-14 16:46:35,753 on stmt: $240for_iter.3 = iternext(value=$phi240.2)
DEBUG 2022-02-14 16:46:35,753 on stmt: $240for_iter.4 = pair_first(value=$240for_iter.3)
DEBUG 2022-02-14 16:46:35,754 on stmt: $240for_iter.5 = pair_second(value=$240for_iter.3)
DEBUG 2022-02-14 16:46:35,754 on stmt: $phi242.3 = $240for_iter.4
DEBUG 2022-02-14 16:46:35,754 on stmt: branch $240for_iter.5, 242, 298
DEBUG 2022-02-14 16:46:35,754 ==== SSA block rewrite pass on 242
DEBUG 2022-02-14 16:46:35,754 Running <numba.core.ssa._FreshVarHandler object at 0x7f72038aa4c0>
DEBUG 2022-02-14 16:46:35,754 on stmt: k = $phi242.3
DEBUG 2022-02-14 16:46:35,754 on stmt: $const250.7 = const(int, 1)
DEBUG 2022-02-14 16:46:35,754 on stmt: $252binary_subtract.8 = k - $const250.7
DEBUG 2022-02-14 16:46:35,754 on stmt: $254build_tuple.9 = build_tuple(items=[Var(count, _loop_hafnian_subroutines.py:161), Var($252binary_subtract.8, _loop_hafnian_subroutines.py:180)])
DEBUG 2022-02-14 16:46:35,754 on stmt: $258binary_subscr.12 = getitem(value=comb, index=$254build_tuple.9, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:46:35,754 on stmt: $const262.14 = const(int, 1)
DEBUG 2022-02-14 16:46:35,754 on stmt: $266binary_subtract.16 = $const262.14 - count
DEBUG 2022-02-14 16:46:35,754 on stmt: $274binary_multiply.20 = i * j
DEBUG 2022-02-14 16:46:35,754 on stmt: $276binary_subtract.21 = k - $274binary_multiply.20
DEBUG 2022-02-14 16:46:35,754 on stmt: $const278.22 = const(int, 1)
DEBUG 2022-02-14 16:46:35,754 on stmt: $280binary_subtract.23 = $276binary_subtract.21 - $const278.22
DEBUG 2022-02-14 16:46:35,754 on stmt: $282build_tuple.24 = build_tuple(items=[Var($266binary_subtract.16, _loop_hafnian_subroutines.py:180), Var($280binary_subtract.23, _loop_hafnian_subroutines.py:180)])
DEBUG 2022-02-14 16:46:35,754 on stmt: $284binary_subscr.25 = getitem(value=comb, index=$282build_tuple.24, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:46:35,754 on stmt: $288binary_multiply.27 = $284binary_subscr.25 * powfactor.1
DEBUG 2022-02-14 16:46:35,754 on stmt: $290inplace_add.28 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$258binary_subscr.12, rhs=$288binary_multiply.27, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:46:35,754 on stmt: comb[$254build_tuple.9] = $290inplace_add.28
DEBUG 2022-02-14 16:46:35,754 on stmt: jump 240
DEBUG 2022-02-14 16:46:35,754 ==== SSA block rewrite pass on 298
DEBUG 2022-02-14 16:46:35,754 Running <numba.core.ssa._FreshVarHandler object at 0x7f72038aa4c0>
DEBUG 2022-02-14 16:46:35,754 on stmt: jump 202
DEBUG 2022-02-14 16:46:35,754 ==== SSA block rewrite pass on 300
DEBUG 2022-02-14 16:46:35,754 Running <numba.core.ssa._FreshVarHandler object at 0x7f72038aa4c0>
DEBUG 2022-02-14 16:46:35,755 on stmt: jump 60
DEBUG 2022-02-14 16:46:35,755 ==== SSA block rewrite pass on 302
DEBUG 2022-02-14 16:46:35,755 Running <numba.core.ssa._FreshVarHandler object at 0x7f72038aa4c0>
DEBUG 2022-02-14 16:46:35,755 on stmt: $const306.2 = const(NoneType, None)
DEBUG 2022-02-14 16:46:35,755 on stmt: $const308.3 = const(NoneType, None)
DEBUG 2022-02-14 16:46:35,755 on stmt: $310build_slice.4 = global(slice: <class 'slice'>)
DEBUG 2022-02-14 16:46:35,755 on stmt: $310build_slice.5 = call $310build_slice.4($const306.2, $const308.3, func=$310build_slice.4, args=(Var($const306.2, _loop_hafnian_subroutines.py:182), Var($const308.3, _loop_hafnian_subroutines.py:182)), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:46:35,755 on stmt: $312build_tuple.6 = build_tuple(items=[Var(count, _loop_hafnian_subroutines.py:161), Var($310build_slice.5, _loop_hafnian_subroutines.py:182)])
DEBUG 2022-02-14 16:46:35,755 on stmt: $314binary_subscr.7 = getitem(value=comb, index=$312build_tuple.6, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:46:35,755 on stmt: $316return_value.8 = cast(value=$314binary_subscr.7)
DEBUG 2022-02-14 16:46:35,755 on stmt: return $316return_value.8
DEBUG 2022-02-14 16:46:35,755 Replaced assignments: defaultdict(<class 'list'>,
            {72: [<numba.core.ir.Assign object at 0x7f72038aaa30>],
             90: [<numba.core.ir.Assign object at 0x7f72038aabe0>],
             124: [<numba.core.ir.Assign object at 0x7f72037ebf70>]})
DEBUG 2022-02-14 16:46:35,755 ==== SSA block rewrite pass on 0
DEBUG 2022-02-14 16:46:35,755 Running <numba.core.ssa._FixSSAVars object at 0x7f72037eba60>
DEBUG 2022-02-14 16:46:35,755 on stmt: E = arg(0, name=E)
DEBUG 2022-02-14 16:46:35,755 on stmt: AX_S = arg(1, name=AX_S)
DEBUG 2022-02-14 16:46:35,755 on stmt: XD_S = arg(2, name=XD_S)
DEBUG 2022-02-14 16:46:35,755 on stmt: D_S = arg(3, name=D_S)
DEBUG 2022-02-14 16:46:35,755 on stmt: n = arg(4, name=n)
DEBUG 2022-02-14 16:46:35,755 on stmt: oddloop = arg(5, name=oddloop)
DEBUG 2022-02-14 16:46:35,755 on stmt: oddVX_S = arg(6, name=oddVX_S)
DEBUG 2022-02-14 16:46:35,755 on stmt: $4load_method.1 = getattr(value=E, attr=copy)
DEBUG 2022-02-14 16:46:35,755 on stmt: E_k = call $4load_method.1(func=$4load_method.1, args=[], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:46:35,755 on stmt: count = const(int, 0)
DEBUG 2022-02-14 16:46:35,755 on stmt: $14load_global.4 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:46:35,755 on stmt: $16load_attr.5 = getattr(value=$14load_global.4, attr=zeros)
DEBUG 2022-02-14 16:46:35,755 on stmt: $const18.6 = const(int, 2)
DEBUG 2022-02-14 16:46:35,756 on stmt: $const22.8 = const(int, 1)
DEBUG 2022-02-14 16:46:35,756 on stmt: $24binary_add.9 = n + $const22.8
DEBUG 2022-02-14 16:46:35,756 on stmt: $26build_tuple.10 = build_tuple(items=[Var($const18.6, _loop_hafnian_subroutines.py:162), Var($24binary_add.9, _loop_hafnian_subroutines.py:162)])
DEBUG 2022-02-14 16:46:35,756 on stmt: $28load_global.11 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:46:35,756 on stmt: $30load_attr.12 = getattr(value=$28load_global.11, attr=complex128)
DEBUG 2022-02-14 16:46:35,756 on stmt: comb = call $16load_attr.5($26build_tuple.10, func=$16load_attr.5, args=[Var($26build_tuple.10, _loop_hafnian_subroutines.py:162)], kws=[('dtype', Var($30load_attr.12, _loop_hafnian_subroutines.py:162))], vararg=None, target=None)
DEBUG 2022-02-14 16:46:35,756 on stmt: $const38.15 = const(int, 1)
DEBUG 2022-02-14 16:46:35,756 on stmt: $const_0 = const(int, 0)
DEBUG 2022-02-14 16:46:35,756 on stmt: $const_0.1 = const(int, 0)
DEBUG 2022-02-14 16:46:35,756 on stmt: $const42.17 = build_tuple(items=[Var($const_0, _loop_hafnian_subroutines.py:163), Var($const_0.1, _loop_hafnian_subroutines.py:163)])
DEBUG 2022-02-14 16:46:35,756 on stmt: comb[(0, 0)] = $const38.15
DEBUG 2022-02-14 16:46:35,756 on stmt: $46load_global.18 = global(range: <class 'range'>)
DEBUG 2022-02-14 16:46:35,756 on stmt: $const48.19 = const(int, 1)
DEBUG 2022-02-14 16:46:35,756 on stmt: $const52.21 = const(int, 1)
DEBUG 2022-02-14 16:46:35,756 on stmt: $54binary_add.22 = n + $const52.21
DEBUG 2022-02-14 16:46:35,756 on stmt: $56call_function.23 = call $46load_global.18($const48.19, $54binary_add.22, func=$46load_global.18, args=[Var($const48.19, _loop_hafnian_subroutines.py:164), Var($54binary_add.22, _loop_hafnian_subroutines.py:164)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:46:35,756 on stmt: $58get_iter.24 = getiter(value=$56call_function.23)
DEBUG 2022-02-14 16:46:35,756 on stmt: $phi60.0 = $58get_iter.24
DEBUG 2022-02-14 16:46:35,756 on stmt: jump 60
DEBUG 2022-02-14 16:46:35,756 ==== SSA block rewrite pass on 60
DEBUG 2022-02-14 16:46:35,756 Running <numba.core.ssa._FixSSAVars object at 0x7f72037eba60>
DEBUG 2022-02-14 16:46:35,756 on stmt: E_k.2 = phi(incoming_values=[Var(E_k, _loop_hafnian_subroutines.py:159), Var(E_k.3, _loop_hafnian_subroutines.py:168)], incoming_blocks=[0, 300])
DEBUG 2022-02-14 16:46:35,756 on stmt: $60for_iter.1 = iternext(value=$phi60.0)
DEBUG 2022-02-14 16:46:35,756 on stmt: $60for_iter.2 = pair_first(value=$60for_iter.1)
DEBUG 2022-02-14 16:46:35,756 on stmt: $60for_iter.3 = pair_second(value=$60for_iter.1)
DEBUG 2022-02-14 16:46:35,757 on stmt: $phi62.1 = $60for_iter.2
DEBUG 2022-02-14 16:46:35,757 on stmt: branch $60for_iter.3, 62, 302
DEBUG 2022-02-14 16:46:35,757 ==== SSA block rewrite pass on 62
DEBUG 2022-02-14 16:46:35,757 Running <numba.core.ssa._FixSSAVars object at 0x7f72037eba60>
DEBUG 2022-02-14 16:46:35,757 on stmt: i = $phi62.1
DEBUG 2022-02-14 16:46:35,757 on stmt: $const66.3 = const(int, 1)
DEBUG 2022-02-14 16:46:35,757 on stmt: $68compare_op.4 = i == $const66.3
DEBUG 2022-02-14 16:46:35,757 on stmt: bool70 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:46:35,757 on stmt: $70pred = call bool70($68compare_op.4, func=bool70, args=(Var($68compare_op.4, _loop_hafnian_subroutines.py:165),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:46:35,757 on stmt: branch $70pred, 72, 78
DEBUG 2022-02-14 16:46:35,757 ==== SSA block rewrite pass on 72
DEBUG 2022-02-14 16:46:35,757 Running <numba.core.ssa._FixSSAVars object at 0x7f72037eba60>
DEBUG 2022-02-14 16:46:35,757 on stmt: factor = oddloop
DEBUG 2022-02-14 16:46:35,757 on stmt: jump 140
DEBUG 2022-02-14 16:46:35,757 ==== SSA block rewrite pass on 78
DEBUG 2022-02-14 16:46:35,757 Running <numba.core.ssa._FixSSAVars object at 0x7f72037eba60>
DEBUG 2022-02-14 16:46:35,757 on stmt: $const80.2 = const(int, 2)
DEBUG 2022-02-14 16:46:35,757 on stmt: $82binary_modulo.3 = i % $const80.2
DEBUG 2022-02-14 16:46:35,757 on stmt: $const84.4 = const(int, 0)
DEBUG 2022-02-14 16:46:35,757 on stmt: $86compare_op.5 = $82binary_modulo.3 == $const84.4
DEBUG 2022-02-14 16:46:35,757 on stmt: bool88 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:46:35,757 on stmt: $88pred = call bool88($86compare_op.5, func=bool88, args=(Var($86compare_op.5, _loop_hafnian_subroutines.py:167),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:46:35,757 on stmt: branch $88pred, 90, 124
DEBUG 2022-02-14 16:46:35,757 ==== SSA block rewrite pass on 90
DEBUG 2022-02-14 16:46:35,757 Running <numba.core.ssa._FixSSAVars object at 0x7f72037eba60>
DEBUG 2022-02-14 16:46:35,757 on stmt: $92load_method.2 = getattr(value=E_k.2, attr=sum)
DEBUG 2022-02-14 16:46:35,757 on stmt: $94call_method.3 = call $92load_method.2(func=$92load_method.2, args=[], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:46:35,757 on stmt: $98binary_true_divide.5 = $94call_method.3 / i
DEBUG 2022-02-14 16:46:35,758 on stmt: $104binary_matrix_multiply.8 = XD_S <built-in function matmul> D_S
DEBUG 2022-02-14 16:46:35,758 on stmt: $const106.9 = const(int, 2)
DEBUG 2022-02-14 16:46:35,758 on stmt: $108binary_true_divide.10 = $104binary_matrix_multiply.8 / $const106.9
DEBUG 2022-02-14 16:46:35,758 on stmt: factor.1 = $98binary_true_divide.5 + $108binary_true_divide.10
DEBUG 2022-02-14 16:46:35,758 on stmt: $118inplace_multiply.14 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=E_k.2, rhs=E, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:46:35,758 on stmt: E_k.1 = $118inplace_multiply.14
DEBUG 2022-02-14 16:46:35,758 on stmt: jump 140
DEBUG 2022-02-14 16:46:35,758 ==== SSA block rewrite pass on 124
DEBUG 2022-02-14 16:46:35,758 Running <numba.core.ssa._FixSSAVars object at 0x7f72037eba60>
DEBUG 2022-02-14 16:46:35,758 on stmt: factor.2 = oddVX_S <built-in function matmul> D_S
DEBUG 2022-02-14 16:46:35,758 on stmt: $136binary_matrix_multiply.6 = AX_S <built-in function matmul> D_S
DEBUG 2022-02-14 16:46:35,758 on stmt: D_S = $136binary_matrix_multiply.6
DEBUG 2022-02-14 16:46:35,758 on stmt: jump 140
DEBUG 2022-02-14 16:46:35,758 ==== SSA block rewrite pass on 140
DEBUG 2022-02-14 16:46:35,758 Running <numba.core.ssa._FixSSAVars object at 0x7f72037eba60>
DEBUG 2022-02-14 16:46:35,758 on stmt: E_k.3 = phi(incoming_values=[Var(E_k.2, _loop_hafnian_subroutines.py:168), Var(E_k.1, _loop_hafnian_subroutines.py:169), Var(E_k.2, _loop_hafnian_subroutines.py:168)], incoming_blocks=[72, 90, 124])
DEBUG 2022-02-14 16:46:35,758 on stmt: powfactor = const(int, 1)
DEBUG 2022-02-14 16:46:35,758 on stmt: $const144.2 = const(int, 1)
DEBUG 2022-02-14 16:46:35,758 on stmt: $148binary_subtract.4 = $const144.2 - count
DEBUG 2022-02-14 16:46:35,758 on stmt: count = $148binary_subtract.4
DEBUG 2022-02-14 16:46:35,758 on stmt: $const154.6 = const(int, 1)
DEBUG 2022-02-14 16:46:35,758 on stmt: $158binary_subtract.8 = $const154.6 - count
DEBUG 2022-02-14 16:46:35,758 on stmt: $const160.9 = const(NoneType, None)
DEBUG 2022-02-14 16:46:35,758 on stmt: $const162.10 = const(NoneType, None)
DEBUG 2022-02-14 16:46:35,758 on stmt: $164build_slice.11 = global(slice: <class 'slice'>)
DEBUG 2022-02-14 16:46:35,758 on stmt: $164build_slice.12 = call $164build_slice.11($const160.9, $const162.10, func=$164build_slice.11, args=(Var($const160.9, _loop_hafnian_subroutines.py:176), Var($const162.10, _loop_hafnian_subroutines.py:176)), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:46:35,759 on stmt: $166build_tuple.13 = build_tuple(items=[Var($158binary_subtract.8, _loop_hafnian_subroutines.py:176), Var($164build_slice.12, _loop_hafnian_subroutines.py:176)])
DEBUG 2022-02-14 16:46:35,759 on stmt: $168binary_subscr.14 = getitem(value=comb, index=$166build_tuple.13, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:46:35,759 on stmt: $const174.17 = const(NoneType, None)
DEBUG 2022-02-14 16:46:35,759 on stmt: $const176.18 = const(NoneType, None)
DEBUG 2022-02-14 16:46:35,759 on stmt: $178build_slice.19 = global(slice: <class 'slice'>)
DEBUG 2022-02-14 16:46:35,759 on stmt: $178build_slice.20 = call $178build_slice.19($const174.17, $const176.18, func=$178build_slice.19, args=(Var($const174.17, _loop_hafnian_subroutines.py:176), Var($const176.18, _loop_hafnian_subroutines.py:176)), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:46:35,759 on stmt: $180build_tuple.21 = build_tuple(items=[Var(count, _loop_hafnian_subroutines.py:161), Var($178build_slice.20, _loop_hafnian_subroutines.py:176)])
DEBUG 2022-02-14 16:46:35,759 on stmt: comb[$180build_tuple.21] = $168binary_subscr.14
DEBUG 2022-02-14 16:46:35,759 on stmt: $184load_global.22 = global(range: <class 'range'>)
DEBUG 2022-02-14 16:46:35,759 on stmt: $const186.23 = const(int, 1)
DEBUG 2022-02-14 16:46:35,759 on stmt: $192binary_floor_divide.26 = n // i
DEBUG 2022-02-14 16:46:35,759 on stmt: $const194.27 = const(int, 1)
DEBUG 2022-02-14 16:46:35,759 on stmt: $196binary_add.28 = $192binary_floor_divide.26 + $const194.27
DEBUG 2022-02-14 16:46:35,759 on stmt: $198call_function.29 = call $184load_global.22($const186.23, $196binary_add.28, func=$184load_global.22, args=[Var($const186.23, _loop_hafnian_subroutines.py:177), Var($196binary_add.28, _loop_hafnian_subroutines.py:177)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:46:35,759 on stmt: $200get_iter.30 = getiter(value=$198call_function.29)
DEBUG 2022-02-14 16:46:35,759 on stmt: $phi202.1 = $200get_iter.30
DEBUG 2022-02-14 16:46:35,759 on stmt: jump 202
DEBUG 2022-02-14 16:46:35,759 ==== SSA block rewrite pass on 202
DEBUG 2022-02-14 16:46:35,759 Running <numba.core.ssa._FixSSAVars object at 0x7f72037eba60>
DEBUG 2022-02-14 16:46:35,759 on stmt: powfactor.2 = phi(incoming_values=[Var(powfactor.1, _loop_hafnian_subroutines.py:178), Var(powfactor, _loop_hafnian_subroutines.py:174)], incoming_blocks=[298, 140])
DEBUG 2022-02-14 16:46:35,759 on stmt: $202for_iter.2 = iternext(value=$phi202.1)
DEBUG 2022-02-14 16:46:35,759 on stmt: $202for_iter.3 = pair_first(value=$202for_iter.2)
DEBUG 2022-02-14 16:46:35,759 on stmt: $202for_iter.4 = pair_second(value=$202for_iter.2)
DEBUG 2022-02-14 16:46:35,759 on stmt: $phi204.2 = $202for_iter.3
DEBUG 2022-02-14 16:46:35,759 on stmt: branch $202for_iter.4, 204, 300
DEBUG 2022-02-14 16:46:35,760 ==== SSA block rewrite pass on 204
DEBUG 2022-02-14 16:46:35,760 Running <numba.core.ssa._FixSSAVars object at 0x7f72037eba60>
DEBUG 2022-02-14 16:46:35,760 on stmt: j = $phi204.2
DEBUG 2022-02-14 16:46:35,760 on stmt: $212binary_true_divide.6 = factor / j
DEBUG 2022-02-14 16:46:35,760 find_def var='factor' stmt=$212binary_true_divide.6 = factor / j
DEBUG 2022-02-14 16:46:35,760 find_def_from_top label 204
DEBUG 2022-02-14 16:46:35,760 idom 202 from label 204
DEBUG 2022-02-14 16:46:35,760 find_def_from_bottom label 202
DEBUG 2022-02-14 16:46:35,760 find_def_from_top label 202
DEBUG 2022-02-14 16:46:35,760 idom 140 from label 202
DEBUG 2022-02-14 16:46:35,760 find_def_from_bottom label 140
DEBUG 2022-02-14 16:46:35,760 find_def_from_top label 140
DEBUG 2022-02-14 16:46:35,760 insert phi node factor.3 = phi(incoming_values=[], incoming_blocks=[]) at 140
DEBUG 2022-02-14 16:46:35,760 find_def_from_bottom label 72
DEBUG 2022-02-14 16:46:35,760 incoming_def factor = oddloop
DEBUG 2022-02-14 16:46:35,760 find_def_from_bottom label 90
DEBUG 2022-02-14 16:46:35,760 incoming_def factor.1 = $98binary_true_divide.5 + $108binary_true_divide.10
DEBUG 2022-02-14 16:46:35,760 find_def_from_bottom label 124
DEBUG 2022-02-14 16:46:35,760 incoming_def factor.2 = oddVX_S <built-in function matmul> D_S
DEBUG 2022-02-14 16:46:35,760 replaced with: $212binary_true_divide.6 = factor.3 / j
DEBUG 2022-02-14 16:46:35,760 on stmt: $214inplace_multiply.7 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=powfactor.2, rhs=$212binary_true_divide.6, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:46:35,760 on stmt: powfactor.1 = $214inplace_multiply.7
DEBUG 2022-02-14 16:46:35,760 on stmt: $218load_global.8 = global(range: <class 'range'>)
DEBUG 2022-02-14 16:46:35,760 on stmt: $224binary_multiply.11 = i * j
DEBUG 2022-02-14 16:46:35,760 on stmt: $const226.12 = const(int, 1)
DEBUG 2022-02-14 16:46:35,760 on stmt: $228binary_add.13 = $224binary_multiply.11 + $const226.12
DEBUG 2022-02-14 16:46:35,760 on stmt: $const232.15 = const(int, 2)
DEBUG 2022-02-14 16:46:35,760 on stmt: $234binary_add.16 = n + $const232.15
DEBUG 2022-02-14 16:46:35,761 on stmt: $236call_function.17 = call $218load_global.8($228binary_add.13, $234binary_add.16, func=$218load_global.8, args=[Var($228binary_add.13, _loop_hafnian_subroutines.py:179), Var($234binary_add.16, _loop_hafnian_subroutines.py:179)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:46:35,761 on stmt: $238get_iter.18 = getiter(value=$236call_function.17)
DEBUG 2022-02-14 16:46:35,761 on stmt: $phi240.2 = $238get_iter.18
DEBUG 2022-02-14 16:46:35,761 on stmt: jump 240
DEBUG 2022-02-14 16:46:35,761 ==== SSA block rewrite pass on 240
DEBUG 2022-02-14 16:46:35,761 Running <numba.core.ssa._FixSSAVars object at 0x7f72037eba60>
DEBUG 2022-02-14 16:46:35,761 on stmt: $240for_iter.3 = iternext(value=$phi240.2)
DEBUG 2022-02-14 16:46:35,761 on stmt: $240for_iter.4 = pair_first(value=$240for_iter.3)
DEBUG 2022-02-14 16:46:35,761 on stmt: $240for_iter.5 = pair_second(value=$240for_iter.3)
DEBUG 2022-02-14 16:46:35,761 on stmt: $phi242.3 = $240for_iter.4
DEBUG 2022-02-14 16:46:35,761 on stmt: branch $240for_iter.5, 242, 298
DEBUG 2022-02-14 16:46:35,761 ==== SSA block rewrite pass on 242
DEBUG 2022-02-14 16:46:35,761 Running <numba.core.ssa._FixSSAVars object at 0x7f72037eba60>
DEBUG 2022-02-14 16:46:35,761 on stmt: k = $phi242.3
DEBUG 2022-02-14 16:46:35,761 on stmt: $const250.7 = const(int, 1)
DEBUG 2022-02-14 16:46:35,761 on stmt: $252binary_subtract.8 = k - $const250.7
DEBUG 2022-02-14 16:46:35,761 on stmt: $254build_tuple.9 = build_tuple(items=[Var(count, _loop_hafnian_subroutines.py:161), Var($252binary_subtract.8, _loop_hafnian_subroutines.py:180)])
DEBUG 2022-02-14 16:46:35,761 on stmt: $258binary_subscr.12 = getitem(value=comb, index=$254build_tuple.9, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:46:35,761 on stmt: $const262.14 = const(int, 1)
DEBUG 2022-02-14 16:46:35,761 on stmt: $266binary_subtract.16 = $const262.14 - count
DEBUG 2022-02-14 16:46:35,761 on stmt: $274binary_multiply.20 = i * j
DEBUG 2022-02-14 16:46:35,761 on stmt: $276binary_subtract.21 = k - $274binary_multiply.20
DEBUG 2022-02-14 16:46:35,761 on stmt: $const278.22 = const(int, 1)
DEBUG 2022-02-14 16:46:35,761 on stmt: $280binary_subtract.23 = $276binary_subtract.21 - $const278.22
DEBUG 2022-02-14 16:46:35,761 on stmt: $282build_tuple.24 = build_tuple(items=[Var($266binary_subtract.16, _loop_hafnian_subroutines.py:180), Var($280binary_subtract.23, _loop_hafnian_subroutines.py:180)])
DEBUG 2022-02-14 16:46:35,762 on stmt: $284binary_subscr.25 = getitem(value=comb, index=$282build_tuple.24, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:46:35,762 on stmt: $288binary_multiply.27 = $284binary_subscr.25 * powfactor.1
DEBUG 2022-02-14 16:46:35,762 on stmt: $290inplace_add.28 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$258binary_subscr.12, rhs=$288binary_multiply.27, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:46:35,762 on stmt: comb[$254build_tuple.9] = $290inplace_add.28
DEBUG 2022-02-14 16:46:35,762 on stmt: jump 240
DEBUG 2022-02-14 16:46:35,762 ==== SSA block rewrite pass on 298
DEBUG 2022-02-14 16:46:35,762 Running <numba.core.ssa._FixSSAVars object at 0x7f72037eba60>
DEBUG 2022-02-14 16:46:35,762 on stmt: jump 202
DEBUG 2022-02-14 16:46:35,762 ==== SSA block rewrite pass on 300
DEBUG 2022-02-14 16:46:35,762 Running <numba.core.ssa._FixSSAVars object at 0x7f72037eba60>
DEBUG 2022-02-14 16:46:35,762 on stmt: jump 60
DEBUG 2022-02-14 16:46:35,762 ==== SSA block rewrite pass on 302
DEBUG 2022-02-14 16:46:35,762 Running <numba.core.ssa._FixSSAVars object at 0x7f72037eba60>
DEBUG 2022-02-14 16:46:35,762 on stmt: $const306.2 = const(NoneType, None)
DEBUG 2022-02-14 16:46:35,762 on stmt: $const308.3 = const(NoneType, None)
DEBUG 2022-02-14 16:46:35,762 on stmt: $310build_slice.4 = global(slice: <class 'slice'>)
DEBUG 2022-02-14 16:46:35,762 on stmt: $310build_slice.5 = call $310build_slice.4($const306.2, $const308.3, func=$310build_slice.4, args=(Var($const306.2, _loop_hafnian_subroutines.py:182), Var($const308.3, _loop_hafnian_subroutines.py:182)), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:46:35,762 on stmt: $312build_tuple.6 = build_tuple(items=[Var(count, _loop_hafnian_subroutines.py:161), Var($310build_slice.5, _loop_hafnian_subroutines.py:182)])
DEBUG 2022-02-14 16:46:35,762 on stmt: $314binary_subscr.7 = getitem(value=comb, index=$312build_tuple.6, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:46:35,762 on stmt: $316return_value.8 = cast(value=$314binary_subscr.7)
DEBUG 2022-02-14 16:46:35,762 on stmt: return $316return_value.8
DEBUG 2022-02-14 16:46:35,762 Fix SSA violator on var count
DEBUG 2022-02-14 16:46:35,762 ==== SSA block rewrite pass on 0
DEBUG 2022-02-14 16:46:35,762 Running <numba.core.ssa._FreshVarHandler object at 0x7f72038aa5b0>
DEBUG 2022-02-14 16:46:35,762 on stmt: E = arg(0, name=E)
DEBUG 2022-02-14 16:46:35,762 on stmt: AX_S = arg(1, name=AX_S)
DEBUG 2022-02-14 16:46:35,762 on stmt: XD_S = arg(2, name=XD_S)
DEBUG 2022-02-14 16:46:35,763 on stmt: D_S = arg(3, name=D_S)
DEBUG 2022-02-14 16:46:35,763 on stmt: n = arg(4, name=n)
DEBUG 2022-02-14 16:46:35,763 on stmt: oddloop = arg(5, name=oddloop)
DEBUG 2022-02-14 16:46:35,763 on stmt: oddVX_S = arg(6, name=oddVX_S)
DEBUG 2022-02-14 16:46:35,763 on stmt: $4load_method.1 = getattr(value=E, attr=copy)
DEBUG 2022-02-14 16:46:35,763 on stmt: E_k = call $4load_method.1(func=$4load_method.1, args=[], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:46:35,763 on stmt: count = const(int, 0)
DEBUG 2022-02-14 16:46:35,763 first assign: count
DEBUG 2022-02-14 16:46:35,763 replaced with: count = const(int, 0)
DEBUG 2022-02-14 16:46:35,763 on stmt: $14load_global.4 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:46:35,763 on stmt: $16load_attr.5 = getattr(value=$14load_global.4, attr=zeros)
DEBUG 2022-02-14 16:46:35,763 on stmt: $const18.6 = const(int, 2)
DEBUG 2022-02-14 16:46:35,763 on stmt: $const22.8 = const(int, 1)
DEBUG 2022-02-14 16:46:35,763 on stmt: $24binary_add.9 = n + $const22.8
DEBUG 2022-02-14 16:46:35,763 on stmt: $26build_tuple.10 = build_tuple(items=[Var($const18.6, _loop_hafnian_subroutines.py:162), Var($24binary_add.9, _loop_hafnian_subroutines.py:162)])
DEBUG 2022-02-14 16:46:35,763 on stmt: $28load_global.11 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:46:35,763 on stmt: $30load_attr.12 = getattr(value=$28load_global.11, attr=complex128)
DEBUG 2022-02-14 16:46:35,763 on stmt: comb = call $16load_attr.5($26build_tuple.10, func=$16load_attr.5, args=[Var($26build_tuple.10, _loop_hafnian_subroutines.py:162)], kws=[('dtype', Var($30load_attr.12, _loop_hafnian_subroutines.py:162))], vararg=None, target=None)
DEBUG 2022-02-14 16:46:35,763 on stmt: $const38.15 = const(int, 1)
DEBUG 2022-02-14 16:46:35,763 on stmt: $const_0 = const(int, 0)
DEBUG 2022-02-14 16:46:35,763 on stmt: $const_0.1 = const(int, 0)
DEBUG 2022-02-14 16:46:35,763 on stmt: $const42.17 = build_tuple(items=[Var($const_0, _loop_hafnian_subroutines.py:163), Var($const_0.1, _loop_hafnian_subroutines.py:163)])
DEBUG 2022-02-14 16:46:35,763 on stmt: comb[(0, 0)] = $const38.15
DEBUG 2022-02-14 16:46:35,763 on stmt: $46load_global.18 = global(range: <class 'range'>)
DEBUG 2022-02-14 16:46:35,763 on stmt: $const48.19 = const(int, 1)
DEBUG 2022-02-14 16:46:35,764 on stmt: $const52.21 = const(int, 1)
DEBUG 2022-02-14 16:46:35,764 on stmt: $54binary_add.22 = n + $const52.21
DEBUG 2022-02-14 16:46:35,764 on stmt: $56call_function.23 = call $46load_global.18($const48.19, $54binary_add.22, func=$46load_global.18, args=[Var($const48.19, _loop_hafnian_subroutines.py:164), Var($54binary_add.22, _loop_hafnian_subroutines.py:164)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:46:35,764 on stmt: $58get_iter.24 = getiter(value=$56call_function.23)
DEBUG 2022-02-14 16:46:35,764 on stmt: $phi60.0 = $58get_iter.24
DEBUG 2022-02-14 16:46:35,764 on stmt: jump 60
DEBUG 2022-02-14 16:46:35,764 ==== SSA block rewrite pass on 60
DEBUG 2022-02-14 16:46:35,764 Running <numba.core.ssa._FreshVarHandler object at 0x7f72038aa5b0>
DEBUG 2022-02-14 16:46:35,764 on stmt: E_k.2 = phi(incoming_values=[Var(E_k, _loop_hafnian_subroutines.py:159), Var(E_k.3, _loop_hafnian_subroutines.py:168)], incoming_blocks=[0, 300])
DEBUG 2022-02-14 16:46:35,764 on stmt: $60for_iter.1 = iternext(value=$phi60.0)
DEBUG 2022-02-14 16:46:35,764 on stmt: $60for_iter.2 = pair_first(value=$60for_iter.1)
DEBUG 2022-02-14 16:46:35,764 on stmt: $60for_iter.3 = pair_second(value=$60for_iter.1)
DEBUG 2022-02-14 16:46:35,764 on stmt: $phi62.1 = $60for_iter.2
DEBUG 2022-02-14 16:46:35,764 on stmt: branch $60for_iter.3, 62, 302
DEBUG 2022-02-14 16:46:35,764 ==== SSA block rewrite pass on 62
DEBUG 2022-02-14 16:46:35,764 Running <numba.core.ssa._FreshVarHandler object at 0x7f72038aa5b0>
DEBUG 2022-02-14 16:46:35,764 on stmt: i = $phi62.1
DEBUG 2022-02-14 16:46:35,764 on stmt: $const66.3 = const(int, 1)
DEBUG 2022-02-14 16:46:35,764 on stmt: $68compare_op.4 = i == $const66.3
DEBUG 2022-02-14 16:46:35,764 on stmt: bool70 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:46:35,764 on stmt: $70pred = call bool70($68compare_op.4, func=bool70, args=(Var($68compare_op.4, _loop_hafnian_subroutines.py:165),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:46:35,764 on stmt: branch $70pred, 72, 78
DEBUG 2022-02-14 16:46:35,764 ==== SSA block rewrite pass on 72
DEBUG 2022-02-14 16:46:35,764 Running <numba.core.ssa._FreshVarHandler object at 0x7f72038aa5b0>
DEBUG 2022-02-14 16:46:35,764 on stmt: factor = oddloop
DEBUG 2022-02-14 16:46:35,764 on stmt: jump 140
DEBUG 2022-02-14 16:46:35,764 ==== SSA block rewrite pass on 78
DEBUG 2022-02-14 16:46:35,764 Running <numba.core.ssa._FreshVarHandler object at 0x7f72038aa5b0>
DEBUG 2022-02-14 16:46:35,764 on stmt: $const80.2 = const(int, 2)
DEBUG 2022-02-14 16:46:35,765 on stmt: $82binary_modulo.3 = i % $const80.2
DEBUG 2022-02-14 16:46:35,765 on stmt: $const84.4 = const(int, 0)
DEBUG 2022-02-14 16:46:35,765 on stmt: $86compare_op.5 = $82binary_modulo.3 == $const84.4
DEBUG 2022-02-14 16:46:35,765 on stmt: bool88 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:46:35,765 on stmt: $88pred = call bool88($86compare_op.5, func=bool88, args=(Var($86compare_op.5, _loop_hafnian_subroutines.py:167),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:46:35,765 on stmt: branch $88pred, 90, 124
DEBUG 2022-02-14 16:46:35,765 ==== SSA block rewrite pass on 90
DEBUG 2022-02-14 16:46:35,765 Running <numba.core.ssa._FreshVarHandler object at 0x7f72038aa5b0>
DEBUG 2022-02-14 16:46:35,765 on stmt: $92load_method.2 = getattr(value=E_k.2, attr=sum)
DEBUG 2022-02-14 16:46:35,765 on stmt: $94call_method.3 = call $92load_method.2(func=$92load_method.2, args=[], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:46:35,765 on stmt: $98binary_true_divide.5 = $94call_method.3 / i
DEBUG 2022-02-14 16:46:35,765 on stmt: $104binary_matrix_multiply.8 = XD_S <built-in function matmul> D_S
DEBUG 2022-02-14 16:46:35,765 on stmt: $const106.9 = const(int, 2)
DEBUG 2022-02-14 16:46:35,765 on stmt: $108binary_true_divide.10 = $104binary_matrix_multiply.8 / $const106.9
DEBUG 2022-02-14 16:46:35,765 on stmt: factor.1 = $98binary_true_divide.5 + $108binary_true_divide.10
DEBUG 2022-02-14 16:46:35,765 on stmt: $118inplace_multiply.14 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=E_k.2, rhs=E, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:46:35,765 on stmt: E_k.1 = $118inplace_multiply.14
DEBUG 2022-02-14 16:46:35,765 on stmt: jump 140
DEBUG 2022-02-14 16:46:35,765 ==== SSA block rewrite pass on 124
DEBUG 2022-02-14 16:46:35,765 Running <numba.core.ssa._FreshVarHandler object at 0x7f72038aa5b0>
DEBUG 2022-02-14 16:46:35,765 on stmt: factor.2 = oddVX_S <built-in function matmul> D_S
DEBUG 2022-02-14 16:46:35,765 on stmt: $136binary_matrix_multiply.6 = AX_S <built-in function matmul> D_S
DEBUG 2022-02-14 16:46:35,765 on stmt: D_S = $136binary_matrix_multiply.6
DEBUG 2022-02-14 16:46:35,765 on stmt: jump 140
DEBUG 2022-02-14 16:46:35,765 ==== SSA block rewrite pass on 140
DEBUG 2022-02-14 16:46:35,765 Running <numba.core.ssa._FreshVarHandler object at 0x7f72038aa5b0>
DEBUG 2022-02-14 16:46:35,765 on stmt: factor.3 = phi(incoming_values=[Var(factor, _loop_hafnian_subroutines.py:166), Var(factor.1, _loop_hafnian_subroutines.py:168), Var(factor.2, _loop_hafnian_subroutines.py:171)], incoming_blocks=[72, 90, 124])
DEBUG 2022-02-14 16:46:35,765 on stmt: E_k.3 = phi(incoming_values=[Var(E_k.2, _loop_hafnian_subroutines.py:168), Var(E_k.1, _loop_hafnian_subroutines.py:169), Var(E_k.2, _loop_hafnian_subroutines.py:168)], incoming_blocks=[72, 90, 124])
DEBUG 2022-02-14 16:46:35,766 on stmt: powfactor = const(int, 1)
DEBUG 2022-02-14 16:46:35,766 on stmt: $const144.2 = const(int, 1)
DEBUG 2022-02-14 16:46:35,766 on stmt: $148binary_subtract.4 = $const144.2 - count
DEBUG 2022-02-14 16:46:35,766 on stmt: count = $148binary_subtract.4
DEBUG 2022-02-14 16:46:35,766 replaced with: count.1 = $148binary_subtract.4
DEBUG 2022-02-14 16:46:35,766 on stmt: $const154.6 = const(int, 1)
DEBUG 2022-02-14 16:46:35,766 on stmt: $158binary_subtract.8 = $const154.6 - count
DEBUG 2022-02-14 16:46:35,766 on stmt: $const160.9 = const(NoneType, None)
DEBUG 2022-02-14 16:46:35,766 on stmt: $const162.10 = const(NoneType, None)
DEBUG 2022-02-14 16:46:35,766 on stmt: $164build_slice.11 = global(slice: <class 'slice'>)
DEBUG 2022-02-14 16:46:35,766 on stmt: $164build_slice.12 = call $164build_slice.11($const160.9, $const162.10, func=$164build_slice.11, args=(Var($const160.9, _loop_hafnian_subroutines.py:176), Var($const162.10, _loop_hafnian_subroutines.py:176)), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:46:35,766 on stmt: $166build_tuple.13 = build_tuple(items=[Var($158binary_subtract.8, _loop_hafnian_subroutines.py:176), Var($164build_slice.12, _loop_hafnian_subroutines.py:176)])
DEBUG 2022-02-14 16:46:35,766 on stmt: $168binary_subscr.14 = getitem(value=comb, index=$166build_tuple.13, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:46:35,766 on stmt: $const174.17 = const(NoneType, None)
DEBUG 2022-02-14 16:46:35,766 on stmt: $const176.18 = const(NoneType, None)
DEBUG 2022-02-14 16:46:35,766 on stmt: $178build_slice.19 = global(slice: <class 'slice'>)
DEBUG 2022-02-14 16:46:35,766 on stmt: $178build_slice.20 = call $178build_slice.19($const174.17, $const176.18, func=$178build_slice.19, args=(Var($const174.17, _loop_hafnian_subroutines.py:176), Var($const176.18, _loop_hafnian_subroutines.py:176)), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:46:35,766 on stmt: $180build_tuple.21 = build_tuple(items=[Var(count, _loop_hafnian_subroutines.py:161), Var($178build_slice.20, _loop_hafnian_subroutines.py:176)])
DEBUG 2022-02-14 16:46:35,766 on stmt: comb[$180build_tuple.21] = $168binary_subscr.14
DEBUG 2022-02-14 16:46:35,766 on stmt: $184load_global.22 = global(range: <class 'range'>)
DEBUG 2022-02-14 16:46:35,766 on stmt: $const186.23 = const(int, 1)
DEBUG 2022-02-14 16:46:35,766 on stmt: $192binary_floor_divide.26 = n // i
DEBUG 2022-02-14 16:46:35,766 on stmt: $const194.27 = const(int, 1)
DEBUG 2022-02-14 16:46:35,766 on stmt: $196binary_add.28 = $192binary_floor_divide.26 + $const194.27
DEBUG 2022-02-14 16:46:35,767 on stmt: $198call_function.29 = call $184load_global.22($const186.23, $196binary_add.28, func=$184load_global.22, args=[Var($const186.23, _loop_hafnian_subroutines.py:177), Var($196binary_add.28, _loop_hafnian_subroutines.py:177)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:46:35,767 on stmt: $200get_iter.30 = getiter(value=$198call_function.29)
DEBUG 2022-02-14 16:46:35,767 on stmt: $phi202.1 = $200get_iter.30
DEBUG 2022-02-14 16:46:35,767 on stmt: jump 202
DEBUG 2022-02-14 16:46:35,767 ==== SSA block rewrite pass on 202
DEBUG 2022-02-14 16:46:35,767 Running <numba.core.ssa._FreshVarHandler object at 0x7f72038aa5b0>
DEBUG 2022-02-14 16:46:35,767 on stmt: powfactor.2 = phi(incoming_values=[Var(powfactor.1, _loop_hafnian_subroutines.py:178), Var(powfactor, _loop_hafnian_subroutines.py:174)], incoming_blocks=[298, 140])
DEBUG 2022-02-14 16:46:35,767 on stmt: $202for_iter.2 = iternext(value=$phi202.1)
DEBUG 2022-02-14 16:46:35,767 on stmt: $202for_iter.3 = pair_first(value=$202for_iter.2)
DEBUG 2022-02-14 16:46:35,767 on stmt: $202for_iter.4 = pair_second(value=$202for_iter.2)
DEBUG 2022-02-14 16:46:35,767 on stmt: $phi204.2 = $202for_iter.3
DEBUG 2022-02-14 16:46:35,767 on stmt: branch $202for_iter.4, 204, 300
DEBUG 2022-02-14 16:46:35,767 ==== SSA block rewrite pass on 204
DEBUG 2022-02-14 16:46:35,767 Running <numba.core.ssa._FreshVarHandler object at 0x7f72038aa5b0>
DEBUG 2022-02-14 16:46:35,767 on stmt: j = $phi204.2
DEBUG 2022-02-14 16:46:35,767 on stmt: $212binary_true_divide.6 = factor.3 / j
DEBUG 2022-02-14 16:46:35,767 on stmt: $214inplace_multiply.7 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=powfactor.2, rhs=$212binary_true_divide.6, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:46:35,767 on stmt: powfactor.1 = $214inplace_multiply.7
DEBUG 2022-02-14 16:46:35,767 on stmt: $218load_global.8 = global(range: <class 'range'>)
DEBUG 2022-02-14 16:46:35,767 on stmt: $224binary_multiply.11 = i * j
DEBUG 2022-02-14 16:46:35,768 on stmt: $const226.12 = const(int, 1)
DEBUG 2022-02-14 16:46:35,768 on stmt: $228binary_add.13 = $224binary_multiply.11 + $const226.12
DEBUG 2022-02-14 16:46:35,768 on stmt: $const232.15 = const(int, 2)
DEBUG 2022-02-14 16:46:35,768 on stmt: $234binary_add.16 = n + $const232.15
DEBUG 2022-02-14 16:46:35,768 on stmt: $236call_function.17 = call $218load_global.8($228binary_add.13, $234binary_add.16, func=$218load_global.8, args=[Var($228binary_add.13, _loop_hafnian_subroutines.py:179), Var($234binary_add.16, _loop_hafnian_subroutines.py:179)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:46:35,768 on stmt: $238get_iter.18 = getiter(value=$236call_function.17)
DEBUG 2022-02-14 16:46:35,768 on stmt: $phi240.2 = $238get_iter.18
DEBUG 2022-02-14 16:46:35,768 on stmt: jump 240
DEBUG 2022-02-14 16:46:35,768 ==== SSA block rewrite pass on 240
DEBUG 2022-02-14 16:46:35,768 Running <numba.core.ssa._FreshVarHandler object at 0x7f72038aa5b0>
DEBUG 2022-02-14 16:46:35,768 on stmt: $240for_iter.3 = iternext(value=$phi240.2)
DEBUG 2022-02-14 16:46:35,768 on stmt: $240for_iter.4 = pair_first(value=$240for_iter.3)
DEBUG 2022-02-14 16:46:35,768 on stmt: $240for_iter.5 = pair_second(value=$240for_iter.3)
DEBUG 2022-02-14 16:46:35,768 on stmt: $phi242.3 = $240for_iter.4
DEBUG 2022-02-14 16:46:35,768 on stmt: branch $240for_iter.5, 242, 298
DEBUG 2022-02-14 16:46:35,768 ==== SSA block rewrite pass on 242
DEBUG 2022-02-14 16:46:35,768 Running <numba.core.ssa._FreshVarHandler object at 0x7f72038aa5b0>
DEBUG 2022-02-14 16:46:35,768 on stmt: k = $phi242.3
DEBUG 2022-02-14 16:46:35,768 on stmt: $const250.7 = const(int, 1)
DEBUG 2022-02-14 16:46:35,768 on stmt: $252binary_subtract.8 = k - $const250.7
DEBUG 2022-02-14 16:46:35,768 on stmt: $254build_tuple.9 = build_tuple(items=[Var(count, _loop_hafnian_subroutines.py:161), Var($252binary_subtract.8, _loop_hafnian_subroutines.py:180)])
DEBUG 2022-02-14 16:46:35,768 on stmt: $258binary_subscr.12 = getitem(value=comb, index=$254build_tuple.9, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:46:35,768 on stmt: $const262.14 = const(int, 1)
DEBUG 2022-02-14 16:46:35,768 on stmt: $266binary_subtract.16 = $const262.14 - count
DEBUG 2022-02-14 16:46:35,768 on stmt: $274binary_multiply.20 = i * j
DEBUG 2022-02-14 16:46:35,769 on stmt: $276binary_subtract.21 = k - $274binary_multiply.20
DEBUG 2022-02-14 16:46:35,769 on stmt: $const278.22 = const(int, 1)
DEBUG 2022-02-14 16:46:35,769 on stmt: $280binary_subtract.23 = $276binary_subtract.21 - $const278.22
DEBUG 2022-02-14 16:46:35,769 on stmt: $282build_tuple.24 = build_tuple(items=[Var($266binary_subtract.16, _loop_hafnian_subroutines.py:180), Var($280binary_subtract.23, _loop_hafnian_subroutines.py:180)])
DEBUG 2022-02-14 16:46:35,769 on stmt: $284binary_subscr.25 = getitem(value=comb, index=$282build_tuple.24, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:46:35,769 on stmt: $288binary_multiply.27 = $284binary_subscr.25 * powfactor.1
DEBUG 2022-02-14 16:46:35,769 on stmt: $290inplace_add.28 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$258binary_subscr.12, rhs=$288binary_multiply.27, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:46:35,769 on stmt: comb[$254build_tuple.9] = $290inplace_add.28
DEBUG 2022-02-14 16:46:35,769 on stmt: jump 240
DEBUG 2022-02-14 16:46:35,769 ==== SSA block rewrite pass on 298
DEBUG 2022-02-14 16:46:35,769 Running <numba.core.ssa._FreshVarHandler object at 0x7f72038aa5b0>
DEBUG 2022-02-14 16:46:35,769 on stmt: jump 202
DEBUG 2022-02-14 16:46:35,769 ==== SSA block rewrite pass on 300
DEBUG 2022-02-14 16:46:35,769 Running <numba.core.ssa._FreshVarHandler object at 0x7f72038aa5b0>
DEBUG 2022-02-14 16:46:35,769 on stmt: jump 60
DEBUG 2022-02-14 16:46:35,769 ==== SSA block rewrite pass on 302
DEBUG 2022-02-14 16:46:35,769 Running <numba.core.ssa._FreshVarHandler object at 0x7f72038aa5b0>
DEBUG 2022-02-14 16:46:35,769 on stmt: $const306.2 = const(NoneType, None)
DEBUG 2022-02-14 16:46:35,769 on stmt: $const308.3 = const(NoneType, None)
DEBUG 2022-02-14 16:46:35,769 on stmt: $310build_slice.4 = global(slice: <class 'slice'>)
DEBUG 2022-02-14 16:46:35,769 on stmt: $310build_slice.5 = call $310build_slice.4($const306.2, $const308.3, func=$310build_slice.4, args=(Var($const306.2, _loop_hafnian_subroutines.py:182), Var($const308.3, _loop_hafnian_subroutines.py:182)), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:46:35,769 on stmt: $312build_tuple.6 = build_tuple(items=[Var(count, _loop_hafnian_subroutines.py:161), Var($310build_slice.5, _loop_hafnian_subroutines.py:182)])
DEBUG 2022-02-14 16:46:35,769 on stmt: $314binary_subscr.7 = getitem(value=comb, index=$312build_tuple.6, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:46:35,769 on stmt: $316return_value.8 = cast(value=$314binary_subscr.7)
DEBUG 2022-02-14 16:46:35,769 on stmt: return $316return_value.8
DEBUG 2022-02-14 16:46:35,769 Replaced assignments: defaultdict(<class 'list'>,
            {0: [<numba.core.ir.Assign object at 0x7f72038aa9d0>],
             140: [<numba.core.ir.Assign object at 0x7f7203794970>]})
DEBUG 2022-02-14 16:46:35,770 ==== SSA block rewrite pass on 0
DEBUG 2022-02-14 16:46:35,770 Running <numba.core.ssa._FixSSAVars object at 0x7f72037ebca0>
DEBUG 2022-02-14 16:46:35,770 on stmt: E = arg(0, name=E)
DEBUG 2022-02-14 16:46:35,770 on stmt: AX_S = arg(1, name=AX_S)
DEBUG 2022-02-14 16:46:35,770 on stmt: XD_S = arg(2, name=XD_S)
DEBUG 2022-02-14 16:46:35,770 on stmt: D_S = arg(3, name=D_S)
DEBUG 2022-02-14 16:46:35,770 on stmt: n = arg(4, name=n)
DEBUG 2022-02-14 16:46:35,770 on stmt: oddloop = arg(5, name=oddloop)
DEBUG 2022-02-14 16:46:35,770 on stmt: oddVX_S = arg(6, name=oddVX_S)
DEBUG 2022-02-14 16:46:35,770 on stmt: $4load_method.1 = getattr(value=E, attr=copy)
DEBUG 2022-02-14 16:46:35,770 on stmt: E_k = call $4load_method.1(func=$4load_method.1, args=[], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:46:35,770 on stmt: count = const(int, 0)
DEBUG 2022-02-14 16:46:35,770 on stmt: $14load_global.4 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:46:35,770 on stmt: $16load_attr.5 = getattr(value=$14load_global.4, attr=zeros)
DEBUG 2022-02-14 16:46:35,770 on stmt: $const18.6 = const(int, 2)
DEBUG 2022-02-14 16:46:35,770 on stmt: $const22.8 = const(int, 1)
DEBUG 2022-02-14 16:46:35,770 on stmt: $24binary_add.9 = n + $const22.8
DEBUG 2022-02-14 16:46:35,770 on stmt: $26build_tuple.10 = build_tuple(items=[Var($const18.6, _loop_hafnian_subroutines.py:162), Var($24binary_add.9, _loop_hafnian_subroutines.py:162)])
DEBUG 2022-02-14 16:46:35,770 on stmt: $28load_global.11 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:46:35,770 on stmt: $30load_attr.12 = getattr(value=$28load_global.11, attr=complex128)
DEBUG 2022-02-14 16:46:35,770 on stmt: comb = call $16load_attr.5($26build_tuple.10, func=$16load_attr.5, args=[Var($26build_tuple.10, _loop_hafnian_subroutines.py:162)], kws=[('dtype', Var($30load_attr.12, _loop_hafnian_subroutines.py:162))], vararg=None, target=None)
DEBUG 2022-02-14 16:46:35,770 on stmt: $const38.15 = const(int, 1)
DEBUG 2022-02-14 16:46:35,771 on stmt: $const_0 = const(int, 0)
DEBUG 2022-02-14 16:46:35,771 on stmt: $const_0.1 = const(int, 0)
DEBUG 2022-02-14 16:46:35,771 on stmt: $const42.17 = build_tuple(items=[Var($const_0, _loop_hafnian_subroutines.py:163), Var($const_0.1, _loop_hafnian_subroutines.py:163)])
DEBUG 2022-02-14 16:46:35,771 on stmt: comb[(0, 0)] = $const38.15
DEBUG 2022-02-14 16:46:35,771 on stmt: $46load_global.18 = global(range: <class 'range'>)
DEBUG 2022-02-14 16:46:35,771 on stmt: $const48.19 = const(int, 1)
DEBUG 2022-02-14 16:46:35,771 on stmt: $const52.21 = const(int, 1)
DEBUG 2022-02-14 16:46:35,771 on stmt: $54binary_add.22 = n + $const52.21
DEBUG 2022-02-14 16:46:35,771 on stmt: $56call_function.23 = call $46load_global.18($const48.19, $54binary_add.22, func=$46load_global.18, args=[Var($const48.19, _loop_hafnian_subroutines.py:164), Var($54binary_add.22, _loop_hafnian_subroutines.py:164)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:46:35,771 on stmt: $58get_iter.24 = getiter(value=$56call_function.23)
DEBUG 2022-02-14 16:46:35,771 on stmt: $phi60.0 = $58get_iter.24
DEBUG 2022-02-14 16:46:35,771 on stmt: jump 60
DEBUG 2022-02-14 16:46:35,771 ==== SSA block rewrite pass on 60
DEBUG 2022-02-14 16:46:35,771 Running <numba.core.ssa._FixSSAVars object at 0x7f72037ebca0>
DEBUG 2022-02-14 16:46:35,771 on stmt: E_k.2 = phi(incoming_values=[Var(E_k, _loop_hafnian_subroutines.py:159), Var(E_k.3, _loop_hafnian_subroutines.py:168)], incoming_blocks=[0, 300])
DEBUG 2022-02-14 16:46:35,771 on stmt: $60for_iter.1 = iternext(value=$phi60.0)
DEBUG 2022-02-14 16:46:35,771 on stmt: $60for_iter.2 = pair_first(value=$60for_iter.1)
DEBUG 2022-02-14 16:46:35,771 on stmt: $60for_iter.3 = pair_second(value=$60for_iter.1)
DEBUG 2022-02-14 16:46:35,771 on stmt: $phi62.1 = $60for_iter.2
DEBUG 2022-02-14 16:46:35,771 on stmt: branch $60for_iter.3, 62, 302
DEBUG 2022-02-14 16:46:35,771 ==== SSA block rewrite pass on 62
DEBUG 2022-02-14 16:46:35,771 Running <numba.core.ssa._FixSSAVars object at 0x7f72037ebca0>
DEBUG 2022-02-14 16:46:35,771 on stmt: i = $phi62.1
DEBUG 2022-02-14 16:46:35,771 on stmt: $const66.3 = const(int, 1)
DEBUG 2022-02-14 16:46:35,771 on stmt: $68compare_op.4 = i == $const66.3
DEBUG 2022-02-14 16:46:35,771 on stmt: bool70 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:46:35,772 on stmt: $70pred = call bool70($68compare_op.4, func=bool70, args=(Var($68compare_op.4, _loop_hafnian_subroutines.py:165),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:46:35,772 on stmt: branch $70pred, 72, 78
DEBUG 2022-02-14 16:46:35,772 ==== SSA block rewrite pass on 72
DEBUG 2022-02-14 16:46:35,772 Running <numba.core.ssa._FixSSAVars object at 0x7f72037ebca0>
DEBUG 2022-02-14 16:46:35,772 on stmt: factor = oddloop
DEBUG 2022-02-14 16:46:35,772 on stmt: jump 140
DEBUG 2022-02-14 16:46:35,772 ==== SSA block rewrite pass on 78
DEBUG 2022-02-14 16:46:35,772 Running <numba.core.ssa._FixSSAVars object at 0x7f72037ebca0>
DEBUG 2022-02-14 16:46:35,772 on stmt: $const80.2 = const(int, 2)
DEBUG 2022-02-14 16:46:35,772 on stmt: $82binary_modulo.3 = i % $const80.2
DEBUG 2022-02-14 16:46:35,772 on stmt: $const84.4 = const(int, 0)
DEBUG 2022-02-14 16:46:35,772 on stmt: $86compare_op.5 = $82binary_modulo.3 == $const84.4
DEBUG 2022-02-14 16:46:35,772 on stmt: bool88 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:46:35,772 on stmt: $88pred = call bool88($86compare_op.5, func=bool88, args=(Var($86compare_op.5, _loop_hafnian_subroutines.py:167),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:46:35,772 on stmt: branch $88pred, 90, 124
DEBUG 2022-02-14 16:46:35,772 ==== SSA block rewrite pass on 90
DEBUG 2022-02-14 16:46:35,772 Running <numba.core.ssa._FixSSAVars object at 0x7f72037ebca0>
DEBUG 2022-02-14 16:46:35,772 on stmt: $92load_method.2 = getattr(value=E_k.2, attr=sum)
DEBUG 2022-02-14 16:46:35,772 on stmt: $94call_method.3 = call $92load_method.2(func=$92load_method.2, args=[], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:46:35,772 on stmt: $98binary_true_divide.5 = $94call_method.3 / i
DEBUG 2022-02-14 16:46:35,772 on stmt: $104binary_matrix_multiply.8 = XD_S <built-in function matmul> D_S
DEBUG 2022-02-14 16:46:35,772 on stmt: $const106.9 = const(int, 2)
DEBUG 2022-02-14 16:46:35,772 on stmt: $108binary_true_divide.10 = $104binary_matrix_multiply.8 / $const106.9
DEBUG 2022-02-14 16:46:35,772 on stmt: factor.1 = $98binary_true_divide.5 + $108binary_true_divide.10
DEBUG 2022-02-14 16:46:35,772 on stmt: $118inplace_multiply.14 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=E_k.2, rhs=E, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:46:35,772 on stmt: E_k.1 = $118inplace_multiply.14
DEBUG 2022-02-14 16:46:35,773 on stmt: jump 140
DEBUG 2022-02-14 16:46:35,773 ==== SSA block rewrite pass on 124
DEBUG 2022-02-14 16:46:35,773 Running <numba.core.ssa._FixSSAVars object at 0x7f72037ebca0>
DEBUG 2022-02-14 16:46:35,773 on stmt: factor.2 = oddVX_S <built-in function matmul> D_S
DEBUG 2022-02-14 16:46:35,773 on stmt: $136binary_matrix_multiply.6 = AX_S <built-in function matmul> D_S
DEBUG 2022-02-14 16:46:35,773 on stmt: D_S = $136binary_matrix_multiply.6
DEBUG 2022-02-14 16:46:35,773 on stmt: jump 140
DEBUG 2022-02-14 16:46:35,773 ==== SSA block rewrite pass on 140
DEBUG 2022-02-14 16:46:35,773 Running <numba.core.ssa._FixSSAVars object at 0x7f72037ebca0>
DEBUG 2022-02-14 16:46:35,773 on stmt: factor.3 = phi(incoming_values=[Var(factor, _loop_hafnian_subroutines.py:166), Var(factor.1, _loop_hafnian_subroutines.py:168), Var(factor.2, _loop_hafnian_subroutines.py:171)], incoming_blocks=[72, 90, 124])
DEBUG 2022-02-14 16:46:35,773 on stmt: E_k.3 = phi(incoming_values=[Var(E_k.2, _loop_hafnian_subroutines.py:168), Var(E_k.1, _loop_hafnian_subroutines.py:169), Var(E_k.2, _loop_hafnian_subroutines.py:168)], incoming_blocks=[72, 90, 124])
DEBUG 2022-02-14 16:46:35,773 on stmt: powfactor = const(int, 1)
DEBUG 2022-02-14 16:46:35,773 on stmt: $const144.2 = const(int, 1)
DEBUG 2022-02-14 16:46:35,773 on stmt: $148binary_subtract.4 = $const144.2 - count
DEBUG 2022-02-14 16:46:35,773 find_def var='count' stmt=$148binary_subtract.4 = $const144.2 - count
DEBUG 2022-02-14 16:46:35,773 find_def_from_top label 140
DEBUG 2022-02-14 16:46:35,773 idom 62 from label 140
DEBUG 2022-02-14 16:46:35,773 find_def_from_bottom label 62
DEBUG 2022-02-14 16:46:35,773 find_def_from_top label 62
DEBUG 2022-02-14 16:46:35,773 idom 60 from label 62
DEBUG 2022-02-14 16:46:35,773 find_def_from_bottom label 60
DEBUG 2022-02-14 16:46:35,773 find_def_from_top label 60
DEBUG 2022-02-14 16:46:35,773 insert phi node count.2 = phi(incoming_values=[], incoming_blocks=[]) at 60
DEBUG 2022-02-14 16:46:35,773 find_def_from_bottom label 0
DEBUG 2022-02-14 16:46:35,773 incoming_def count = const(int, 0)
DEBUG 2022-02-14 16:46:35,773 find_def_from_bottom label 300
DEBUG 2022-02-14 16:46:35,773 find_def_from_top label 300
DEBUG 2022-02-14 16:46:35,773 idom 202 from label 300
DEBUG 2022-02-14 16:46:35,773 find_def_from_bottom label 202
DEBUG 2022-02-14 16:46:35,774 find_def_from_top label 202
DEBUG 2022-02-14 16:46:35,774 idom 140 from label 202
DEBUG 2022-02-14 16:46:35,774 find_def_from_bottom label 140
DEBUG 2022-02-14 16:46:35,774 incoming_def count.1 = $148binary_subtract.4
DEBUG 2022-02-14 16:46:35,774 replaced with: $148binary_subtract.4 = $const144.2 - count.2
DEBUG 2022-02-14 16:46:35,774 on stmt: count.1 = $148binary_subtract.4
DEBUG 2022-02-14 16:46:35,774 on stmt: $const154.6 = const(int, 1)
DEBUG 2022-02-14 16:46:35,774 on stmt: $158binary_subtract.8 = $const154.6 - count
DEBUG 2022-02-14 16:46:35,774 find_def var='count' stmt=$158binary_subtract.8 = $const154.6 - count
DEBUG 2022-02-14 16:46:35,774 replaced with: $158binary_subtract.8 = $const154.6 - count.1
DEBUG 2022-02-14 16:46:35,774 on stmt: $const160.9 = const(NoneType, None)
DEBUG 2022-02-14 16:46:35,774 on stmt: $const162.10 = const(NoneType, None)
DEBUG 2022-02-14 16:46:35,774 on stmt: $164build_slice.11 = global(slice: <class 'slice'>)
DEBUG 2022-02-14 16:46:35,774 on stmt: $164build_slice.12 = call $164build_slice.11($const160.9, $const162.10, func=$164build_slice.11, args=(Var($const160.9, _loop_hafnian_subroutines.py:176), Var($const162.10, _loop_hafnian_subroutines.py:176)), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:46:35,774 on stmt: $166build_tuple.13 = build_tuple(items=[Var($158binary_subtract.8, _loop_hafnian_subroutines.py:176), Var($164build_slice.12, _loop_hafnian_subroutines.py:176)])
DEBUG 2022-02-14 16:46:35,774 on stmt: $168binary_subscr.14 = getitem(value=comb, index=$166build_tuple.13, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:46:35,774 on stmt: $const174.17 = const(NoneType, None)
DEBUG 2022-02-14 16:46:35,774 on stmt: $const176.18 = const(NoneType, None)
DEBUG 2022-02-14 16:46:35,774 on stmt: $178build_slice.19 = global(slice: <class 'slice'>)
DEBUG 2022-02-14 16:46:35,774 on stmt: $178build_slice.20 = call $178build_slice.19($const174.17, $const176.18, func=$178build_slice.19, args=(Var($const174.17, _loop_hafnian_subroutines.py:176), Var($const176.18, _loop_hafnian_subroutines.py:176)), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:46:35,774 on stmt: $180build_tuple.21 = build_tuple(items=[Var(count, _loop_hafnian_subroutines.py:161), Var($178build_slice.20, _loop_hafnian_subroutines.py:176)])
DEBUG 2022-02-14 16:46:35,774 find_def var='count' stmt=$180build_tuple.21 = build_tuple(items=[Var(count, _loop_hafnian_subroutines.py:161), Var($178build_slice.20, _loop_hafnian_subroutines.py:176)])
DEBUG 2022-02-14 16:46:35,775 replaced with: $180build_tuple.21 = build_tuple(items=[Var(count.1, _loop_hafnian_subroutines.py:175), Var($178build_slice.20, _loop_hafnian_subroutines.py:176)])
DEBUG 2022-02-14 16:46:35,775 on stmt: comb[$180build_tuple.21] = $168binary_subscr.14
DEBUG 2022-02-14 16:46:35,775 on stmt: $184load_global.22 = global(range: <class 'range'>)
DEBUG 2022-02-14 16:46:35,775 on stmt: $const186.23 = const(int, 1)
DEBUG 2022-02-14 16:46:35,775 on stmt: $192binary_floor_divide.26 = n // i
DEBUG 2022-02-14 16:46:35,775 on stmt: $const194.27 = const(int, 1)
DEBUG 2022-02-14 16:46:35,775 on stmt: $196binary_add.28 = $192binary_floor_divide.26 + $const194.27
DEBUG 2022-02-14 16:46:35,775 on stmt: $198call_function.29 = call $184load_global.22($const186.23, $196binary_add.28, func=$184load_global.22, args=[Var($const186.23, _loop_hafnian_subroutines.py:177), Var($196binary_add.28, _loop_hafnian_subroutines.py:177)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:46:35,775 on stmt: $200get_iter.30 = getiter(value=$198call_function.29)
DEBUG 2022-02-14 16:46:35,775 on stmt: $phi202.1 = $200get_iter.30
DEBUG 2022-02-14 16:46:35,775 on stmt: jump 202
DEBUG 2022-02-14 16:46:35,775 ==== SSA block rewrite pass on 202
DEBUG 2022-02-14 16:46:35,775 Running <numba.core.ssa._FixSSAVars object at 0x7f72037ebca0>
DEBUG 2022-02-14 16:46:35,775 on stmt: powfactor.2 = phi(incoming_values=[Var(powfactor.1, _loop_hafnian_subroutines.py:178), Var(powfactor, _loop_hafnian_subroutines.py:174)], incoming_blocks=[298, 140])
DEBUG 2022-02-14 16:46:35,775 on stmt: $202for_iter.2 = iternext(value=$phi202.1)
DEBUG 2022-02-14 16:46:35,775 on stmt: $202for_iter.3 = pair_first(value=$202for_iter.2)
DEBUG 2022-02-14 16:46:35,775 on stmt: $202for_iter.4 = pair_second(value=$202for_iter.2)
DEBUG 2022-02-14 16:46:35,775 on stmt: $phi204.2 = $202for_iter.3
DEBUG 2022-02-14 16:46:35,775 on stmt: branch $202for_iter.4, 204, 300
DEBUG 2022-02-14 16:46:35,775 ==== SSA block rewrite pass on 204
DEBUG 2022-02-14 16:46:35,775 Running <numba.core.ssa._FixSSAVars object at 0x7f72037ebca0>
DEBUG 2022-02-14 16:46:35,775 on stmt: j = $phi204.2
DEBUG 2022-02-14 16:46:35,775 on stmt: $212binary_true_divide.6 = factor.3 / j
DEBUG 2022-02-14 16:46:35,775 on stmt: $214inplace_multiply.7 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=powfactor.2, rhs=$212binary_true_divide.6, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:46:35,775 on stmt: powfactor.1 = $214inplace_multiply.7
DEBUG 2022-02-14 16:46:35,775 on stmt: $218load_global.8 = global(range: <class 'range'>)
DEBUG 2022-02-14 16:46:35,775 on stmt: $224binary_multiply.11 = i * j
DEBUG 2022-02-14 16:46:35,776 on stmt: $const226.12 = const(int, 1)
DEBUG 2022-02-14 16:46:35,776 on stmt: $228binary_add.13 = $224binary_multiply.11 + $const226.12
DEBUG 2022-02-14 16:46:35,776 on stmt: $const232.15 = const(int, 2)
DEBUG 2022-02-14 16:46:35,776 on stmt: $234binary_add.16 = n + $const232.15
DEBUG 2022-02-14 16:46:35,776 on stmt: $236call_function.17 = call $218load_global.8($228binary_add.13, $234binary_add.16, func=$218load_global.8, args=[Var($228binary_add.13, _loop_hafnian_subroutines.py:179), Var($234binary_add.16, _loop_hafnian_subroutines.py:179)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:46:35,776 on stmt: $238get_iter.18 = getiter(value=$236call_function.17)
DEBUG 2022-02-14 16:46:35,776 on stmt: $phi240.2 = $238get_iter.18
DEBUG 2022-02-14 16:46:35,776 on stmt: jump 240
DEBUG 2022-02-14 16:46:35,776 ==== SSA block rewrite pass on 240
DEBUG 2022-02-14 16:46:35,776 Running <numba.core.ssa._FixSSAVars object at 0x7f72037ebca0>
DEBUG 2022-02-14 16:46:35,776 on stmt: $240for_iter.3 = iternext(value=$phi240.2)
DEBUG 2022-02-14 16:46:35,776 on stmt: $240for_iter.4 = pair_first(value=$240for_iter.3)
DEBUG 2022-02-14 16:46:35,776 on stmt: $240for_iter.5 = pair_second(value=$240for_iter.3)
DEBUG 2022-02-14 16:46:35,776 on stmt: $phi242.3 = $240for_iter.4
DEBUG 2022-02-14 16:46:35,776 on stmt: branch $240for_iter.5, 242, 298
DEBUG 2022-02-14 16:46:35,776 ==== SSA block rewrite pass on 242
DEBUG 2022-02-14 16:46:35,776 Running <numba.core.ssa._FixSSAVars object at 0x7f72037ebca0>
DEBUG 2022-02-14 16:46:35,776 on stmt: k = $phi242.3
DEBUG 2022-02-14 16:46:35,776 on stmt: $const250.7 = const(int, 1)
DEBUG 2022-02-14 16:46:35,776 on stmt: $252binary_subtract.8 = k - $const250.7
DEBUG 2022-02-14 16:46:35,776 on stmt: $254build_tuple.9 = build_tuple(items=[Var(count, _loop_hafnian_subroutines.py:161), Var($252binary_subtract.8, _loop_hafnian_subroutines.py:180)])
DEBUG 2022-02-14 16:46:35,776 find_def var='count' stmt=$254build_tuple.9 = build_tuple(items=[Var(count, _loop_hafnian_subroutines.py:161), Var($252binary_subtract.8, _loop_hafnian_subroutines.py:180)])
DEBUG 2022-02-14 16:46:35,776 find_def_from_top label 242
DEBUG 2022-02-14 16:46:35,776 idom 240 from label 242
DEBUG 2022-02-14 16:46:35,776 find_def_from_bottom label 240
DEBUG 2022-02-14 16:46:35,776 find_def_from_top label 240
DEBUG 2022-02-14 16:46:35,776 idom 204 from label 240
DEBUG 2022-02-14 16:46:35,776 find_def_from_bottom label 204
DEBUG 2022-02-14 16:46:35,777 find_def_from_top label 204
DEBUG 2022-02-14 16:46:35,777 idom 202 from label 204
DEBUG 2022-02-14 16:46:35,777 find_def_from_bottom label 202
DEBUG 2022-02-14 16:46:35,777 find_def_from_top label 202
DEBUG 2022-02-14 16:46:35,777 idom 140 from label 202
DEBUG 2022-02-14 16:46:35,777 find_def_from_bottom label 140
DEBUG 2022-02-14 16:46:35,777 replaced with: $254build_tuple.9 = build_tuple(items=[Var(count.1, _loop_hafnian_subroutines.py:175), Var($252binary_subtract.8, _loop_hafnian_subroutines.py:180)])
DEBUG 2022-02-14 16:46:35,777 on stmt: $258binary_subscr.12 = getitem(value=comb, index=$254build_tuple.9, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:46:35,777 on stmt: $const262.14 = const(int, 1)
DEBUG 2022-02-14 16:46:35,777 on stmt: $266binary_subtract.16 = $const262.14 - count
DEBUG 2022-02-14 16:46:35,777 find_def var='count' stmt=$266binary_subtract.16 = $const262.14 - count
DEBUG 2022-02-14 16:46:35,777 find_def_from_top label 242
DEBUG 2022-02-14 16:46:35,777 idom 240 from label 242
DEBUG 2022-02-14 16:46:35,777 find_def_from_bottom label 240
DEBUG 2022-02-14 16:46:35,777 find_def_from_top label 240
DEBUG 2022-02-14 16:46:35,777 idom 204 from label 240
DEBUG 2022-02-14 16:46:35,777 find_def_from_bottom label 204
DEBUG 2022-02-14 16:46:35,777 find_def_from_top label 204
DEBUG 2022-02-14 16:46:35,777 idom 202 from label 204
DEBUG 2022-02-14 16:46:35,777 find_def_from_bottom label 202
DEBUG 2022-02-14 16:46:35,777 find_def_from_top label 202
DEBUG 2022-02-14 16:46:35,777 idom 140 from label 202
DEBUG 2022-02-14 16:46:35,777 find_def_from_bottom label 140
DEBUG 2022-02-14 16:46:35,777 replaced with: $266binary_subtract.16 = $const262.14 - count.1
DEBUG 2022-02-14 16:46:35,777 on stmt: $274binary_multiply.20 = i * j
DEBUG 2022-02-14 16:46:35,777 on stmt: $276binary_subtract.21 = k - $274binary_multiply.20
DEBUG 2022-02-14 16:46:35,777 on stmt: $const278.22 = const(int, 1)
DEBUG 2022-02-14 16:46:35,777 on stmt: $280binary_subtract.23 = $276binary_subtract.21 - $const278.22
DEBUG 2022-02-14 16:46:35,777 on stmt: $282build_tuple.24 = build_tuple(items=[Var($266binary_subtract.16, _loop_hafnian_subroutines.py:180), Var($280binary_subtract.23, _loop_hafnian_subroutines.py:180)])
DEBUG 2022-02-14 16:46:35,777 on stmt: $284binary_subscr.25 = getitem(value=comb, index=$282build_tuple.24, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:46:35,778 on stmt: $288binary_multiply.27 = $284binary_subscr.25 * powfactor.1
DEBUG 2022-02-14 16:46:35,778 on stmt: $290inplace_add.28 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$258binary_subscr.12, rhs=$288binary_multiply.27, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:46:35,778 on stmt: comb[$254build_tuple.9] = $290inplace_add.28
DEBUG 2022-02-14 16:46:35,778 on stmt: jump 240
DEBUG 2022-02-14 16:46:35,778 ==== SSA block rewrite pass on 298
DEBUG 2022-02-14 16:46:35,778 Running <numba.core.ssa._FixSSAVars object at 0x7f72037ebca0>
DEBUG 2022-02-14 16:46:35,778 on stmt: jump 202
DEBUG 2022-02-14 16:46:35,778 ==== SSA block rewrite pass on 300
DEBUG 2022-02-14 16:46:35,778 Running <numba.core.ssa._FixSSAVars object at 0x7f72037ebca0>
DEBUG 2022-02-14 16:46:35,778 on stmt: jump 60
DEBUG 2022-02-14 16:46:35,778 ==== SSA block rewrite pass on 302
DEBUG 2022-02-14 16:46:35,778 Running <numba.core.ssa._FixSSAVars object at 0x7f72037ebca0>
DEBUG 2022-02-14 16:46:35,778 on stmt: $const306.2 = const(NoneType, None)
DEBUG 2022-02-14 16:46:35,778 on stmt: $const308.3 = const(NoneType, None)
DEBUG 2022-02-14 16:46:35,778 on stmt: $310build_slice.4 = global(slice: <class 'slice'>)
DEBUG 2022-02-14 16:46:35,778 on stmt: $310build_slice.5 = call $310build_slice.4($const306.2, $const308.3, func=$310build_slice.4, args=(Var($const306.2, _loop_hafnian_subroutines.py:182), Var($const308.3, _loop_hafnian_subroutines.py:182)), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:46:35,778 on stmt: $312build_tuple.6 = build_tuple(items=[Var(count, _loop_hafnian_subroutines.py:161), Var($310build_slice.5, _loop_hafnian_subroutines.py:182)])
DEBUG 2022-02-14 16:46:35,778 find_def var='count' stmt=$312build_tuple.6 = build_tuple(items=[Var(count, _loop_hafnian_subroutines.py:161), Var($310build_slice.5, _loop_hafnian_subroutines.py:182)])
DEBUG 2022-02-14 16:46:35,778 find_def_from_top label 302
DEBUG 2022-02-14 16:46:35,778 idom 60 from label 302
DEBUG 2022-02-14 16:46:35,778 find_def_from_bottom label 60
DEBUG 2022-02-14 16:46:35,778 replaced with: $312build_tuple.6 = build_tuple(items=[Var(count.2, _loop_hafnian_subroutines.py:174), Var($310build_slice.5, _loop_hafnian_subroutines.py:182)])
DEBUG 2022-02-14 16:46:35,778 on stmt: $314binary_subscr.7 = getitem(value=comb, index=$312build_tuple.6, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:46:35,778 on stmt: $316return_value.8 = cast(value=$314binary_subscr.7)
DEBUG 2022-02-14 16:46:35,779 on stmt: return $316return_value.8
DEBUG 2022-02-14 16:46:35,779 Fix SSA violator on var D_S
DEBUG 2022-02-14 16:46:35,779 ==== SSA block rewrite pass on 0
DEBUG 2022-02-14 16:46:35,779 Running <numba.core.ssa._FreshVarHandler object at 0x7f7203794d60>
DEBUG 2022-02-14 16:46:35,779 on stmt: E = arg(0, name=E)
DEBUG 2022-02-14 16:46:35,779 on stmt: AX_S = arg(1, name=AX_S)
DEBUG 2022-02-14 16:46:35,779 on stmt: XD_S = arg(2, name=XD_S)
DEBUG 2022-02-14 16:46:35,779 on stmt: D_S = arg(3, name=D_S)
DEBUG 2022-02-14 16:46:35,779 first assign: D_S
DEBUG 2022-02-14 16:46:35,779 replaced with: D_S = arg(3, name=D_S)
DEBUG 2022-02-14 16:46:35,779 on stmt: n = arg(4, name=n)
DEBUG 2022-02-14 16:46:35,779 on stmt: oddloop = arg(5, name=oddloop)
DEBUG 2022-02-14 16:46:35,779 on stmt: oddVX_S = arg(6, name=oddVX_S)
DEBUG 2022-02-14 16:46:35,779 on stmt: $4load_method.1 = getattr(value=E, attr=copy)
DEBUG 2022-02-14 16:46:35,779 on stmt: E_k = call $4load_method.1(func=$4load_method.1, args=[], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:46:35,779 on stmt: count = const(int, 0)
DEBUG 2022-02-14 16:46:35,779 on stmt: $14load_global.4 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:46:35,779 on stmt: $16load_attr.5 = getattr(value=$14load_global.4, attr=zeros)
DEBUG 2022-02-14 16:46:35,779 on stmt: $const18.6 = const(int, 2)
DEBUG 2022-02-14 16:46:35,779 on stmt: $const22.8 = const(int, 1)
DEBUG 2022-02-14 16:46:35,779 on stmt: $24binary_add.9 = n + $const22.8
DEBUG 2022-02-14 16:46:35,779 on stmt: $26build_tuple.10 = build_tuple(items=[Var($const18.6, _loop_hafnian_subroutines.py:162), Var($24binary_add.9, _loop_hafnian_subroutines.py:162)])
DEBUG 2022-02-14 16:46:35,779 on stmt: $28load_global.11 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:46:35,779 on stmt: $30load_attr.12 = getattr(value=$28load_global.11, attr=complex128)
DEBUG 2022-02-14 16:46:35,779 on stmt: comb = call $16load_attr.5($26build_tuple.10, func=$16load_attr.5, args=[Var($26build_tuple.10, _loop_hafnian_subroutines.py:162)], kws=[('dtype', Var($30load_attr.12, _loop_hafnian_subroutines.py:162))], vararg=None, target=None)
DEBUG 2022-02-14 16:46:35,779 on stmt: $const38.15 = const(int, 1)
DEBUG 2022-02-14 16:46:35,780 on stmt: $const_0 = const(int, 0)
DEBUG 2022-02-14 16:46:35,780 on stmt: $const_0.1 = const(int, 0)
DEBUG 2022-02-14 16:46:35,780 on stmt: $const42.17 = build_tuple(items=[Var($const_0, _loop_hafnian_subroutines.py:163), Var($const_0.1, _loop_hafnian_subroutines.py:163)])
DEBUG 2022-02-14 16:46:35,780 on stmt: comb[(0, 0)] = $const38.15
DEBUG 2022-02-14 16:46:35,780 on stmt: $46load_global.18 = global(range: <class 'range'>)
DEBUG 2022-02-14 16:46:35,780 on stmt: $const48.19 = const(int, 1)
DEBUG 2022-02-14 16:46:35,780 on stmt: $const52.21 = const(int, 1)
DEBUG 2022-02-14 16:46:35,780 on stmt: $54binary_add.22 = n + $const52.21
DEBUG 2022-02-14 16:46:35,780 on stmt: $56call_function.23 = call $46load_global.18($const48.19, $54binary_add.22, func=$46load_global.18, args=[Var($const48.19, _loop_hafnian_subroutines.py:164), Var($54binary_add.22, _loop_hafnian_subroutines.py:164)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:46:35,780 on stmt: $58get_iter.24 = getiter(value=$56call_function.23)
DEBUG 2022-02-14 16:46:35,780 on stmt: $phi60.0 = $58get_iter.24
DEBUG 2022-02-14 16:46:35,780 on stmt: jump 60
DEBUG 2022-02-14 16:46:35,780 ==== SSA block rewrite pass on 60
DEBUG 2022-02-14 16:46:35,780 Running <numba.core.ssa._FreshVarHandler object at 0x7f7203794d60>
DEBUG 2022-02-14 16:46:35,780 on stmt: count.2 = phi(incoming_values=[Var(count, _loop_hafnian_subroutines.py:161), Var(count.1, _loop_hafnian_subroutines.py:175)], incoming_blocks=[0, 300])
DEBUG 2022-02-14 16:46:35,780 on stmt: E_k.2 = phi(incoming_values=[Var(E_k, _loop_hafnian_subroutines.py:159), Var(E_k.3, _loop_hafnian_subroutines.py:168)], incoming_blocks=[0, 300])
DEBUG 2022-02-14 16:46:35,780 on stmt: $60for_iter.1 = iternext(value=$phi60.0)
DEBUG 2022-02-14 16:46:35,780 on stmt: $60for_iter.2 = pair_first(value=$60for_iter.1)
DEBUG 2022-02-14 16:46:35,780 on stmt: $60for_iter.3 = pair_second(value=$60for_iter.1)
DEBUG 2022-02-14 16:46:35,780 on stmt: $phi62.1 = $60for_iter.2
DEBUG 2022-02-14 16:46:35,780 on stmt: branch $60for_iter.3, 62, 302
DEBUG 2022-02-14 16:46:35,780 ==== SSA block rewrite pass on 62
DEBUG 2022-02-14 16:46:35,780 Running <numba.core.ssa._FreshVarHandler object at 0x7f7203794d60>
DEBUG 2022-02-14 16:46:35,780 on stmt: i = $phi62.1
DEBUG 2022-02-14 16:46:35,780 on stmt: $const66.3 = const(int, 1)
DEBUG 2022-02-14 16:46:35,780 on stmt: $68compare_op.4 = i == $const66.3
DEBUG 2022-02-14 16:46:35,780 on stmt: bool70 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:46:35,781 on stmt: $70pred = call bool70($68compare_op.4, func=bool70, args=(Var($68compare_op.4, _loop_hafnian_subroutines.py:165),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:46:35,781 on stmt: branch $70pred, 72, 78
DEBUG 2022-02-14 16:46:35,781 ==== SSA block rewrite pass on 72
DEBUG 2022-02-14 16:46:35,781 Running <numba.core.ssa._FreshVarHandler object at 0x7f7203794d60>
DEBUG 2022-02-14 16:46:35,781 on stmt: factor = oddloop
DEBUG 2022-02-14 16:46:35,781 on stmt: jump 140
DEBUG 2022-02-14 16:46:35,781 ==== SSA block rewrite pass on 78
DEBUG 2022-02-14 16:46:35,781 Running <numba.core.ssa._FreshVarHandler object at 0x7f7203794d60>
DEBUG 2022-02-14 16:46:35,781 on stmt: $const80.2 = const(int, 2)
DEBUG 2022-02-14 16:46:35,781 on stmt: $82binary_modulo.3 = i % $const80.2
DEBUG 2022-02-14 16:46:35,781 on stmt: $const84.4 = const(int, 0)
DEBUG 2022-02-14 16:46:35,781 on stmt: $86compare_op.5 = $82binary_modulo.3 == $const84.4
DEBUG 2022-02-14 16:46:35,781 on stmt: bool88 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:46:35,781 on stmt: $88pred = call bool88($86compare_op.5, func=bool88, args=(Var($86compare_op.5, _loop_hafnian_subroutines.py:167),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:46:35,781 on stmt: branch $88pred, 90, 124
DEBUG 2022-02-14 16:46:35,781 ==== SSA block rewrite pass on 90
DEBUG 2022-02-14 16:46:35,781 Running <numba.core.ssa._FreshVarHandler object at 0x7f7203794d60>
DEBUG 2022-02-14 16:46:35,781 on stmt: $92load_method.2 = getattr(value=E_k.2, attr=sum)
DEBUG 2022-02-14 16:46:35,781 on stmt: $94call_method.3 = call $92load_method.2(func=$92load_method.2, args=[], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:46:35,781 on stmt: $98binary_true_divide.5 = $94call_method.3 / i
DEBUG 2022-02-14 16:46:35,781 on stmt: $104binary_matrix_multiply.8 = XD_S <built-in function matmul> D_S
DEBUG 2022-02-14 16:46:35,781 on stmt: $const106.9 = const(int, 2)
DEBUG 2022-02-14 16:46:35,781 on stmt: $108binary_true_divide.10 = $104binary_matrix_multiply.8 / $const106.9
DEBUG 2022-02-14 16:46:35,781 on stmt: factor.1 = $98binary_true_divide.5 + $108binary_true_divide.10
DEBUG 2022-02-14 16:46:35,781 on stmt: $118inplace_multiply.14 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=E_k.2, rhs=E, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:46:35,782 on stmt: E_k.1 = $118inplace_multiply.14
DEBUG 2022-02-14 16:46:35,782 on stmt: jump 140
DEBUG 2022-02-14 16:46:35,782 ==== SSA block rewrite pass on 124
DEBUG 2022-02-14 16:46:35,782 Running <numba.core.ssa._FreshVarHandler object at 0x7f7203794d60>
DEBUG 2022-02-14 16:46:35,782 on stmt: factor.2 = oddVX_S <built-in function matmul> D_S
DEBUG 2022-02-14 16:46:35,782 on stmt: $136binary_matrix_multiply.6 = AX_S <built-in function matmul> D_S
DEBUG 2022-02-14 16:46:35,782 on stmt: D_S = $136binary_matrix_multiply.6
DEBUG 2022-02-14 16:46:35,782 replaced with: D_S.1 = $136binary_matrix_multiply.6
DEBUG 2022-02-14 16:46:35,782 on stmt: jump 140
DEBUG 2022-02-14 16:46:35,782 ==== SSA block rewrite pass on 140
DEBUG 2022-02-14 16:46:35,782 Running <numba.core.ssa._FreshVarHandler object at 0x7f7203794d60>
DEBUG 2022-02-14 16:46:35,782 on stmt: factor.3 = phi(incoming_values=[Var(factor, _loop_hafnian_subroutines.py:166), Var(factor.1, _loop_hafnian_subroutines.py:168), Var(factor.2, _loop_hafnian_subroutines.py:171)], incoming_blocks=[72, 90, 124])
DEBUG 2022-02-14 16:46:35,782 on stmt: E_k.3 = phi(incoming_values=[Var(E_k.2, _loop_hafnian_subroutines.py:168), Var(E_k.1, _loop_hafnian_subroutines.py:169), Var(E_k.2, _loop_hafnian_subroutines.py:168)], incoming_blocks=[72, 90, 124])
DEBUG 2022-02-14 16:46:35,782 on stmt: powfactor = const(int, 1)
DEBUG 2022-02-14 16:46:35,782 on stmt: $const144.2 = const(int, 1)
DEBUG 2022-02-14 16:46:35,782 on stmt: $148binary_subtract.4 = $const144.2 - count.2
DEBUG 2022-02-14 16:46:35,782 on stmt: count.1 = $148binary_subtract.4
DEBUG 2022-02-14 16:46:35,782 on stmt: $const154.6 = const(int, 1)
DEBUG 2022-02-14 16:46:35,782 on stmt: $158binary_subtract.8 = $const154.6 - count.1
DEBUG 2022-02-14 16:46:35,782 on stmt: $const160.9 = const(NoneType, None)
DEBUG 2022-02-14 16:46:35,782 on stmt: $const162.10 = const(NoneType, None)
DEBUG 2022-02-14 16:46:35,782 on stmt: $164build_slice.11 = global(slice: <class 'slice'>)
DEBUG 2022-02-14 16:46:35,782 on stmt: $164build_slice.12 = call $164build_slice.11($const160.9, $const162.10, func=$164build_slice.11, args=(Var($const160.9, _loop_hafnian_subroutines.py:176), Var($const162.10, _loop_hafnian_subroutines.py:176)), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:46:35,782 on stmt: $166build_tuple.13 = build_tuple(items=[Var($158binary_subtract.8, _loop_hafnian_subroutines.py:176), Var($164build_slice.12, _loop_hafnian_subroutines.py:176)])
DEBUG 2022-02-14 16:46:35,782 on stmt: $168binary_subscr.14 = getitem(value=comb, index=$166build_tuple.13, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:46:35,783 on stmt: $const174.17 = const(NoneType, None)
DEBUG 2022-02-14 16:46:35,783 on stmt: $const176.18 = const(NoneType, None)
DEBUG 2022-02-14 16:46:35,783 on stmt: $178build_slice.19 = global(slice: <class 'slice'>)
DEBUG 2022-02-14 16:46:35,783 on stmt: $178build_slice.20 = call $178build_slice.19($const174.17, $const176.18, func=$178build_slice.19, args=(Var($const174.17, _loop_hafnian_subroutines.py:176), Var($const176.18, _loop_hafnian_subroutines.py:176)), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:46:35,783 on stmt: $180build_tuple.21 = build_tuple(items=[Var(count.1, _loop_hafnian_subroutines.py:175), Var($178build_slice.20, _loop_hafnian_subroutines.py:176)])
DEBUG 2022-02-14 16:46:35,783 on stmt: comb[$180build_tuple.21] = $168binary_subscr.14
DEBUG 2022-02-14 16:46:35,783 on stmt: $184load_global.22 = global(range: <class 'range'>)
DEBUG 2022-02-14 16:46:35,783 on stmt: $const186.23 = const(int, 1)
DEBUG 2022-02-14 16:46:35,783 on stmt: $192binary_floor_divide.26 = n // i
DEBUG 2022-02-14 16:46:35,783 on stmt: $const194.27 = const(int, 1)
DEBUG 2022-02-14 16:46:35,783 on stmt: $196binary_add.28 = $192binary_floor_divide.26 + $const194.27
DEBUG 2022-02-14 16:46:35,783 on stmt: $198call_function.29 = call $184load_global.22($const186.23, $196binary_add.28, func=$184load_global.22, args=[Var($const186.23, _loop_hafnian_subroutines.py:177), Var($196binary_add.28, _loop_hafnian_subroutines.py:177)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:46:35,783 on stmt: $200get_iter.30 = getiter(value=$198call_function.29)
DEBUG 2022-02-14 16:46:35,783 on stmt: $phi202.1 = $200get_iter.30
DEBUG 2022-02-14 16:46:35,783 on stmt: jump 202
DEBUG 2022-02-14 16:46:35,783 ==== SSA block rewrite pass on 202
DEBUG 2022-02-14 16:46:35,783 Running <numba.core.ssa._FreshVarHandler object at 0x7f7203794d60>
DEBUG 2022-02-14 16:46:35,783 on stmt: powfactor.2 = phi(incoming_values=[Var(powfactor.1, _loop_hafnian_subroutines.py:178), Var(powfactor, _loop_hafnian_subroutines.py:174)], incoming_blocks=[298, 140])
DEBUG 2022-02-14 16:46:35,783 on stmt: $202for_iter.2 = iternext(value=$phi202.1)
DEBUG 2022-02-14 16:46:35,783 on stmt: $202for_iter.3 = pair_first(value=$202for_iter.2)
DEBUG 2022-02-14 16:46:35,783 on stmt: $202for_iter.4 = pair_second(value=$202for_iter.2)
DEBUG 2022-02-14 16:46:35,783 on stmt: $phi204.2 = $202for_iter.3
DEBUG 2022-02-14 16:46:35,783 on stmt: branch $202for_iter.4, 204, 300
DEBUG 2022-02-14 16:46:35,783 ==== SSA block rewrite pass on 204
DEBUG 2022-02-14 16:46:35,783 Running <numba.core.ssa._FreshVarHandler object at 0x7f7203794d60>
DEBUG 2022-02-14 16:46:35,784 on stmt: j = $phi204.2
DEBUG 2022-02-14 16:46:35,784 on stmt: $212binary_true_divide.6 = factor.3 / j
DEBUG 2022-02-14 16:46:35,784 on stmt: $214inplace_multiply.7 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=powfactor.2, rhs=$212binary_true_divide.6, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:46:35,784 on stmt: powfactor.1 = $214inplace_multiply.7
DEBUG 2022-02-14 16:46:35,784 on stmt: $218load_global.8 = global(range: <class 'range'>)
DEBUG 2022-02-14 16:46:35,784 on stmt: $224binary_multiply.11 = i * j
DEBUG 2022-02-14 16:46:35,784 on stmt: $const226.12 = const(int, 1)
DEBUG 2022-02-14 16:46:35,784 on stmt: $228binary_add.13 = $224binary_multiply.11 + $const226.12
DEBUG 2022-02-14 16:46:35,784 on stmt: $const232.15 = const(int, 2)
DEBUG 2022-02-14 16:46:35,784 on stmt: $234binary_add.16 = n + $const232.15
DEBUG 2022-02-14 16:46:35,784 on stmt: $236call_function.17 = call $218load_global.8($228binary_add.13, $234binary_add.16, func=$218load_global.8, args=[Var($228binary_add.13, _loop_hafnian_subroutines.py:179), Var($234binary_add.16, _loop_hafnian_subroutines.py:179)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:46:35,784 on stmt: $238get_iter.18 = getiter(value=$236call_function.17)
DEBUG 2022-02-14 16:46:35,784 on stmt: $phi240.2 = $238get_iter.18
DEBUG 2022-02-14 16:46:35,784 on stmt: jump 240
DEBUG 2022-02-14 16:46:35,784 ==== SSA block rewrite pass on 240
DEBUG 2022-02-14 16:46:35,784 Running <numba.core.ssa._FreshVarHandler object at 0x7f7203794d60>
DEBUG 2022-02-14 16:46:35,784 on stmt: $240for_iter.3 = iternext(value=$phi240.2)
DEBUG 2022-02-14 16:46:35,784 on stmt: $240for_iter.4 = pair_first(value=$240for_iter.3)
DEBUG 2022-02-14 16:46:35,785 on stmt: $240for_iter.5 = pair_second(value=$240for_iter.3)
DEBUG 2022-02-14 16:46:35,785 on stmt: $phi242.3 = $240for_iter.4
DEBUG 2022-02-14 16:46:35,785 on stmt: branch $240for_iter.5, 242, 298
DEBUG 2022-02-14 16:46:35,785 ==== SSA block rewrite pass on 242
DEBUG 2022-02-14 16:46:35,785 Running <numba.core.ssa._FreshVarHandler object at 0x7f7203794d60>
DEBUG 2022-02-14 16:46:35,785 on stmt: k = $phi242.3
DEBUG 2022-02-14 16:46:35,785 on stmt: $const250.7 = const(int, 1)
DEBUG 2022-02-14 16:46:35,785 on stmt: $252binary_subtract.8 = k - $const250.7
DEBUG 2022-02-14 16:46:35,785 on stmt: $254build_tuple.9 = build_tuple(items=[Var(count.1, _loop_hafnian_subroutines.py:175), Var($252binary_subtract.8, _loop_hafnian_subroutines.py:180)])
DEBUG 2022-02-14 16:46:35,785 on stmt: $258binary_subscr.12 = getitem(value=comb, index=$254build_tuple.9, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:46:35,785 on stmt: $const262.14 = const(int, 1)
DEBUG 2022-02-14 16:46:35,785 on stmt: $266binary_subtract.16 = $const262.14 - count.1
DEBUG 2022-02-14 16:46:35,785 on stmt: $274binary_multiply.20 = i * j
DEBUG 2022-02-14 16:46:35,785 on stmt: $276binary_subtract.21 = k - $274binary_multiply.20
DEBUG 2022-02-14 16:46:35,785 on stmt: $const278.22 = const(int, 1)
DEBUG 2022-02-14 16:46:35,785 on stmt: $280binary_subtract.23 = $276binary_subtract.21 - $const278.22
DEBUG 2022-02-14 16:46:35,785 on stmt: $282build_tuple.24 = build_tuple(items=[Var($266binary_subtract.16, _loop_hafnian_subroutines.py:180), Var($280binary_subtract.23, _loop_hafnian_subroutines.py:180)])
DEBUG 2022-02-14 16:46:35,785 on stmt: $284binary_subscr.25 = getitem(value=comb, index=$282build_tuple.24, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:46:35,785 on stmt: $288binary_multiply.27 = $284binary_subscr.25 * powfactor.1
DEBUG 2022-02-14 16:46:35,785 on stmt: $290inplace_add.28 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$258binary_subscr.12, rhs=$288binary_multiply.27, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:46:35,785 on stmt: comb[$254build_tuple.9] = $290inplace_add.28
DEBUG 2022-02-14 16:46:35,785 on stmt: jump 240
DEBUG 2022-02-14 16:46:35,785 ==== SSA block rewrite pass on 298
DEBUG 2022-02-14 16:46:35,785 Running <numba.core.ssa._FreshVarHandler object at 0x7f7203794d60>
DEBUG 2022-02-14 16:46:35,786 on stmt: jump 202
DEBUG 2022-02-14 16:46:35,786 ==== SSA block rewrite pass on 300
DEBUG 2022-02-14 16:46:35,786 Running <numba.core.ssa._FreshVarHandler object at 0x7f7203794d60>
DEBUG 2022-02-14 16:46:35,786 on stmt: jump 60
DEBUG 2022-02-14 16:46:35,786 ==== SSA block rewrite pass on 302
DEBUG 2022-02-14 16:46:35,786 Running <numba.core.ssa._FreshVarHandler object at 0x7f7203794d60>
DEBUG 2022-02-14 16:46:35,786 on stmt: $const306.2 = const(NoneType, None)
DEBUG 2022-02-14 16:46:35,786 on stmt: $const308.3 = const(NoneType, None)
DEBUG 2022-02-14 16:46:35,786 on stmt: $310build_slice.4 = global(slice: <class 'slice'>)
DEBUG 2022-02-14 16:46:35,786 on stmt: $310build_slice.5 = call $310build_slice.4($const306.2, $const308.3, func=$310build_slice.4, args=(Var($const306.2, _loop_hafnian_subroutines.py:182), Var($const308.3, _loop_hafnian_subroutines.py:182)), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:46:35,786 on stmt: $312build_tuple.6 = build_tuple(items=[Var(count.2, _loop_hafnian_subroutines.py:174), Var($310build_slice.5, _loop_hafnian_subroutines.py:182)])
DEBUG 2022-02-14 16:46:35,786 on stmt: $314binary_subscr.7 = getitem(value=comb, index=$312build_tuple.6, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:46:35,786 on stmt: $316return_value.8 = cast(value=$314binary_subscr.7)
DEBUG 2022-02-14 16:46:35,786 on stmt: return $316return_value.8
DEBUG 2022-02-14 16:46:35,786 Replaced assignments: defaultdict(<class 'list'>,
            {0: [<numba.core.ir.Assign object at 0x7f72037943d0>],
             124: [<numba.core.ir.Assign object at 0x7f72038aadc0>]})
DEBUG 2022-02-14 16:46:35,786 ==== SSA block rewrite pass on 0
DEBUG 2022-02-14 16:46:35,786 Running <numba.core.ssa._FixSSAVars object at 0x7f72038aa4c0>
DEBUG 2022-02-14 16:46:35,786 on stmt: E = arg(0, name=E)
DEBUG 2022-02-14 16:46:35,786 on stmt: AX_S = arg(1, name=AX_S)
DEBUG 2022-02-14 16:46:35,786 on stmt: XD_S = arg(2, name=XD_S)
DEBUG 2022-02-14 16:46:35,786 on stmt: D_S = arg(3, name=D_S)
DEBUG 2022-02-14 16:46:35,786 on stmt: n = arg(4, name=n)
DEBUG 2022-02-14 16:46:35,786 on stmt: oddloop = arg(5, name=oddloop)
DEBUG 2022-02-14 16:46:35,786 on stmt: oddVX_S = arg(6, name=oddVX_S)
DEBUG 2022-02-14 16:46:35,786 on stmt: $4load_method.1 = getattr(value=E, attr=copy)
DEBUG 2022-02-14 16:46:35,787 on stmt: E_k = call $4load_method.1(func=$4load_method.1, args=[], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:46:35,787 on stmt: count = const(int, 0)
DEBUG 2022-02-14 16:46:35,787 on stmt: $14load_global.4 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:46:35,787 on stmt: $16load_attr.5 = getattr(value=$14load_global.4, attr=zeros)
DEBUG 2022-02-14 16:46:35,787 on stmt: $const18.6 = const(int, 2)
DEBUG 2022-02-14 16:46:35,787 on stmt: $const22.8 = const(int, 1)
DEBUG 2022-02-14 16:46:35,787 on stmt: $24binary_add.9 = n + $const22.8
DEBUG 2022-02-14 16:46:35,787 on stmt: $26build_tuple.10 = build_tuple(items=[Var($const18.6, _loop_hafnian_subroutines.py:162), Var($24binary_add.9, _loop_hafnian_subroutines.py:162)])
DEBUG 2022-02-14 16:46:35,787 on stmt: $28load_global.11 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:46:35,787 on stmt: $30load_attr.12 = getattr(value=$28load_global.11, attr=complex128)
DEBUG 2022-02-14 16:46:35,787 on stmt: comb = call $16load_attr.5($26build_tuple.10, func=$16load_attr.5, args=[Var($26build_tuple.10, _loop_hafnian_subroutines.py:162)], kws=[('dtype', Var($30load_attr.12, _loop_hafnian_subroutines.py:162))], vararg=None, target=None)
DEBUG 2022-02-14 16:46:35,787 on stmt: $const38.15 = const(int, 1)
DEBUG 2022-02-14 16:46:35,787 on stmt: $const_0 = const(int, 0)
DEBUG 2022-02-14 16:46:35,787 on stmt: $const_0.1 = const(int, 0)
DEBUG 2022-02-14 16:46:35,787 on stmt: $const42.17 = build_tuple(items=[Var($const_0, _loop_hafnian_subroutines.py:163), Var($const_0.1, _loop_hafnian_subroutines.py:163)])
DEBUG 2022-02-14 16:46:35,787 on stmt: comb[(0, 0)] = $const38.15
DEBUG 2022-02-14 16:46:35,787 on stmt: $46load_global.18 = global(range: <class 'range'>)
DEBUG 2022-02-14 16:46:35,787 on stmt: $const48.19 = const(int, 1)
DEBUG 2022-02-14 16:46:35,787 on stmt: $const52.21 = const(int, 1)
DEBUG 2022-02-14 16:46:35,787 on stmt: $54binary_add.22 = n + $const52.21
DEBUG 2022-02-14 16:46:35,787 on stmt: $56call_function.23 = call $46load_global.18($const48.19, $54binary_add.22, func=$46load_global.18, args=[Var($const48.19, _loop_hafnian_subroutines.py:164), Var($54binary_add.22, _loop_hafnian_subroutines.py:164)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:46:35,787 on stmt: $58get_iter.24 = getiter(value=$56call_function.23)
DEBUG 2022-02-14 16:46:35,787 on stmt: $phi60.0 = $58get_iter.24
DEBUG 2022-02-14 16:46:35,788 on stmt: jump 60
DEBUG 2022-02-14 16:46:35,788 ==== SSA block rewrite pass on 60
DEBUG 2022-02-14 16:46:35,788 Running <numba.core.ssa._FixSSAVars object at 0x7f72038aa4c0>
DEBUG 2022-02-14 16:46:35,788 on stmt: count.2 = phi(incoming_values=[Var(count, _loop_hafnian_subroutines.py:161), Var(count.1, _loop_hafnian_subroutines.py:175)], incoming_blocks=[0, 300])
DEBUG 2022-02-14 16:46:35,788 on stmt: E_k.2 = phi(incoming_values=[Var(E_k, _loop_hafnian_subroutines.py:159), Var(E_k.3, _loop_hafnian_subroutines.py:168)], incoming_blocks=[0, 300])
DEBUG 2022-02-14 16:46:35,788 on stmt: $60for_iter.1 = iternext(value=$phi60.0)
DEBUG 2022-02-14 16:46:35,788 on stmt: $60for_iter.2 = pair_first(value=$60for_iter.1)
DEBUG 2022-02-14 16:46:35,788 on stmt: $60for_iter.3 = pair_second(value=$60for_iter.1)
DEBUG 2022-02-14 16:46:35,788 on stmt: $phi62.1 = $60for_iter.2
DEBUG 2022-02-14 16:46:35,788 on stmt: branch $60for_iter.3, 62, 302
DEBUG 2022-02-14 16:46:35,788 ==== SSA block rewrite pass on 62
DEBUG 2022-02-14 16:46:35,788 Running <numba.core.ssa._FixSSAVars object at 0x7f72038aa4c0>
DEBUG 2022-02-14 16:46:35,788 on stmt: i = $phi62.1
DEBUG 2022-02-14 16:46:35,788 on stmt: $const66.3 = const(int, 1)
DEBUG 2022-02-14 16:46:35,788 on stmt: $68compare_op.4 = i == $const66.3
DEBUG 2022-02-14 16:46:35,788 on stmt: bool70 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:46:35,788 on stmt: $70pred = call bool70($68compare_op.4, func=bool70, args=(Var($68compare_op.4, _loop_hafnian_subroutines.py:165),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:46:35,788 on stmt: branch $70pred, 72, 78
DEBUG 2022-02-14 16:46:35,788 ==== SSA block rewrite pass on 72
DEBUG 2022-02-14 16:46:35,788 Running <numba.core.ssa._FixSSAVars object at 0x7f72038aa4c0>
DEBUG 2022-02-14 16:46:35,788 on stmt: factor = oddloop
DEBUG 2022-02-14 16:46:35,788 on stmt: jump 140
DEBUG 2022-02-14 16:46:35,788 ==== SSA block rewrite pass on 78
DEBUG 2022-02-14 16:46:35,788 Running <numba.core.ssa._FixSSAVars object at 0x7f72038aa4c0>
DEBUG 2022-02-14 16:46:35,788 on stmt: $const80.2 = const(int, 2)
DEBUG 2022-02-14 16:46:35,788 on stmt: $82binary_modulo.3 = i % $const80.2
DEBUG 2022-02-14 16:46:35,789 on stmt: $const84.4 = const(int, 0)
DEBUG 2022-02-14 16:46:35,789 on stmt: $86compare_op.5 = $82binary_modulo.3 == $const84.4
DEBUG 2022-02-14 16:46:35,789 on stmt: bool88 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:46:35,789 on stmt: $88pred = call bool88($86compare_op.5, func=bool88, args=(Var($86compare_op.5, _loop_hafnian_subroutines.py:167),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:46:35,789 on stmt: branch $88pred, 90, 124
DEBUG 2022-02-14 16:46:35,789 ==== SSA block rewrite pass on 90
DEBUG 2022-02-14 16:46:35,789 Running <numba.core.ssa._FixSSAVars object at 0x7f72038aa4c0>
DEBUG 2022-02-14 16:46:35,789 on stmt: $92load_method.2 = getattr(value=E_k.2, attr=sum)
DEBUG 2022-02-14 16:46:35,789 on stmt: $94call_method.3 = call $92load_method.2(func=$92load_method.2, args=[], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:46:35,789 on stmt: $98binary_true_divide.5 = $94call_method.3 / i
DEBUG 2022-02-14 16:46:35,789 on stmt: $104binary_matrix_multiply.8 = XD_S <built-in function matmul> D_S
DEBUG 2022-02-14 16:46:35,789 find_def var='D_S' stmt=$104binary_matrix_multiply.8 = XD_S <built-in function matmul> D_S
DEBUG 2022-02-14 16:46:35,789 find_def_from_top label 90
DEBUG 2022-02-14 16:46:35,789 idom 78 from label 90
DEBUG 2022-02-14 16:46:35,789 find_def_from_bottom label 78
DEBUG 2022-02-14 16:46:35,789 find_def_from_top label 78
DEBUG 2022-02-14 16:46:35,789 idom 62 from label 78
DEBUG 2022-02-14 16:46:35,789 find_def_from_bottom label 62
DEBUG 2022-02-14 16:46:35,789 find_def_from_top label 62
DEBUG 2022-02-14 16:46:35,789 idom 60 from label 62
DEBUG 2022-02-14 16:46:35,789 find_def_from_bottom label 60
DEBUG 2022-02-14 16:46:35,789 find_def_from_top label 60
DEBUG 2022-02-14 16:46:35,789 insert phi node D_S.2 = phi(incoming_values=[], incoming_blocks=[]) at 60
DEBUG 2022-02-14 16:46:35,789 find_def_from_bottom label 0
DEBUG 2022-02-14 16:46:35,789 incoming_def D_S = arg(3, name=D_S)
DEBUG 2022-02-14 16:46:35,790 find_def_from_bottom label 300
DEBUG 2022-02-14 16:46:35,790 find_def_from_top label 300
DEBUG 2022-02-14 16:46:35,790 idom 202 from label 300
DEBUG 2022-02-14 16:46:35,790 find_def_from_bottom label 202
DEBUG 2022-02-14 16:46:35,790 find_def_from_top label 202
DEBUG 2022-02-14 16:46:35,790 idom 140 from label 202
DEBUG 2022-02-14 16:46:35,790 find_def_from_bottom label 140
DEBUG 2022-02-14 16:46:35,790 find_def_from_top label 140
DEBUG 2022-02-14 16:46:35,790 insert phi node D_S.3 = phi(incoming_values=[], incoming_blocks=[]) at 140
DEBUG 2022-02-14 16:46:35,790 find_def_from_bottom label 72
DEBUG 2022-02-14 16:46:35,790 find_def_from_top label 72
DEBUG 2022-02-14 16:46:35,790 idom 62 from label 72
DEBUG 2022-02-14 16:46:35,790 find_def_from_bottom label 62
DEBUG 2022-02-14 16:46:35,790 find_def_from_top label 62
DEBUG 2022-02-14 16:46:35,790 idom 60 from label 62
DEBUG 2022-02-14 16:46:35,790 find_def_from_bottom label 60
DEBUG 2022-02-14 16:46:35,790 incoming_def D_S.2 = phi(incoming_values=[Var(D_S, _loop_hafnian_subroutines.py:159)], incoming_blocks=[0])
DEBUG 2022-02-14 16:46:35,790 find_def_from_bottom label 90
DEBUG 2022-02-14 16:46:35,790 find_def_from_top label 90
DEBUG 2022-02-14 16:46:35,790 idom 78 from label 90
DEBUG 2022-02-14 16:46:35,790 find_def_from_bottom label 78
DEBUG 2022-02-14 16:46:35,790 find_def_from_top label 78
DEBUG 2022-02-14 16:46:35,790 idom 62 from label 78
DEBUG 2022-02-14 16:46:35,790 find_def_from_bottom label 62
DEBUG 2022-02-14 16:46:35,791 find_def_from_top label 62
DEBUG 2022-02-14 16:46:35,791 idom 60 from label 62
DEBUG 2022-02-14 16:46:35,791 find_def_from_bottom label 60
DEBUG 2022-02-14 16:46:35,791 incoming_def D_S.2 = phi(incoming_values=[Var(D_S, _loop_hafnian_subroutines.py:159)], incoming_blocks=[0])
DEBUG 2022-02-14 16:46:35,791 find_def_from_bottom label 124
DEBUG 2022-02-14 16:46:35,791 incoming_def D_S.1 = $136binary_matrix_multiply.6
DEBUG 2022-02-14 16:46:35,791 incoming_def D_S.3 = phi(incoming_values=[Var(D_S.2, _loop_hafnian_subroutines.py:168), Var(D_S.2, _loop_hafnian_subroutines.py:168), Var(D_S.1, _loop_hafnian_subroutines.py:172)], incoming_blocks=[72, 90, 124])
DEBUG 2022-02-14 16:46:35,791 replaced with: $104binary_matrix_multiply.8 = XD_S <built-in function matmul> D_S.2
DEBUG 2022-02-14 16:46:35,791 on stmt: $const106.9 = const(int, 2)
DEBUG 2022-02-14 16:46:35,791 on stmt: $108binary_true_divide.10 = $104binary_matrix_multiply.8 / $const106.9
DEBUG 2022-02-14 16:46:35,791 on stmt: factor.1 = $98binary_true_divide.5 + $108binary_true_divide.10
DEBUG 2022-02-14 16:46:35,791 on stmt: $118inplace_multiply.14 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=E_k.2, rhs=E, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:46:35,791 on stmt: E_k.1 = $118inplace_multiply.14
DEBUG 2022-02-14 16:46:35,791 on stmt: jump 140
DEBUG 2022-02-14 16:46:35,791 ==== SSA block rewrite pass on 124
DEBUG 2022-02-14 16:46:35,791 Running <numba.core.ssa._FixSSAVars object at 0x7f72038aa4c0>
DEBUG 2022-02-14 16:46:35,791 on stmt: factor.2 = oddVX_S <built-in function matmul> D_S
DEBUG 2022-02-14 16:46:35,791 find_def var='D_S' stmt=factor.2 = oddVX_S <built-in function matmul> D_S
DEBUG 2022-02-14 16:46:35,791 find_def_from_top label 124
DEBUG 2022-02-14 16:46:35,791 idom 78 from label 124
DEBUG 2022-02-14 16:46:35,791 find_def_from_bottom label 78
DEBUG 2022-02-14 16:46:35,791 find_def_from_top label 78
DEBUG 2022-02-14 16:46:35,791 idom 62 from label 78
DEBUG 2022-02-14 16:46:35,791 find_def_from_bottom label 62
DEBUG 2022-02-14 16:46:35,791 find_def_from_top label 62
DEBUG 2022-02-14 16:46:35,792 idom 60 from label 62
DEBUG 2022-02-14 16:46:35,792 find_def_from_bottom label 60
DEBUG 2022-02-14 16:46:35,792 replaced with: factor.2 = oddVX_S <built-in function matmul> D_S.2
DEBUG 2022-02-14 16:46:35,792 on stmt: $136binary_matrix_multiply.6 = AX_S <built-in function matmul> D_S
DEBUG 2022-02-14 16:46:35,792 find_def var='D_S' stmt=$136binary_matrix_multiply.6 = AX_S <built-in function matmul> D_S
DEBUG 2022-02-14 16:46:35,792 find_def_from_top label 124
DEBUG 2022-02-14 16:46:35,792 idom 78 from label 124
DEBUG 2022-02-14 16:46:35,792 find_def_from_bottom label 78
DEBUG 2022-02-14 16:46:35,792 find_def_from_top label 78
DEBUG 2022-02-14 16:46:35,792 idom 62 from label 78
DEBUG 2022-02-14 16:46:35,792 find_def_from_bottom label 62
DEBUG 2022-02-14 16:46:35,792 find_def_from_top label 62
DEBUG 2022-02-14 16:46:35,792 idom 60 from label 62
DEBUG 2022-02-14 16:46:35,792 find_def_from_bottom label 60
DEBUG 2022-02-14 16:46:35,792 replaced with: $136binary_matrix_multiply.6 = AX_S <built-in function matmul> D_S.2
DEBUG 2022-02-14 16:46:35,792 on stmt: D_S.1 = $136binary_matrix_multiply.6
DEBUG 2022-02-14 16:46:35,792 on stmt: jump 140
DEBUG 2022-02-14 16:46:35,792 ==== SSA block rewrite pass on 140
DEBUG 2022-02-14 16:46:35,792 Running <numba.core.ssa._FixSSAVars object at 0x7f72038aa4c0>
DEBUG 2022-02-14 16:46:35,792 on stmt: factor.3 = phi(incoming_values=[Var(factor, _loop_hafnian_subroutines.py:166), Var(factor.1, _loop_hafnian_subroutines.py:168), Var(factor.2, _loop_hafnian_subroutines.py:171)], incoming_blocks=[72, 90, 124])
DEBUG 2022-02-14 16:46:35,792 on stmt: E_k.3 = phi(incoming_values=[Var(E_k.2, _loop_hafnian_subroutines.py:168), Var(E_k.1, _loop_hafnian_subroutines.py:169), Var(E_k.2, _loop_hafnian_subroutines.py:168)], incoming_blocks=[72, 90, 124])
DEBUG 2022-02-14 16:46:35,792 on stmt: powfactor = const(int, 1)
DEBUG 2022-02-14 16:46:35,792 on stmt: $const144.2 = const(int, 1)
DEBUG 2022-02-14 16:46:35,792 on stmt: $148binary_subtract.4 = $const144.2 - count.2
DEBUG 2022-02-14 16:46:35,792 on stmt: count.1 = $148binary_subtract.4
DEBUG 2022-02-14 16:46:35,792 on stmt: $const154.6 = const(int, 1)
DEBUG 2022-02-14 16:46:35,793 on stmt: $158binary_subtract.8 = $const154.6 - count.1
DEBUG 2022-02-14 16:46:35,793 on stmt: $const160.9 = const(NoneType, None)
DEBUG 2022-02-14 16:46:35,793 on stmt: $const162.10 = const(NoneType, None)
DEBUG 2022-02-14 16:46:35,793 on stmt: $164build_slice.11 = global(slice: <class 'slice'>)
DEBUG 2022-02-14 16:46:35,793 on stmt: $164build_slice.12 = call $164build_slice.11($const160.9, $const162.10, func=$164build_slice.11, args=(Var($const160.9, _loop_hafnian_subroutines.py:176), Var($const162.10, _loop_hafnian_subroutines.py:176)), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:46:35,793 on stmt: $166build_tuple.13 = build_tuple(items=[Var($158binary_subtract.8, _loop_hafnian_subroutines.py:176), Var($164build_slice.12, _loop_hafnian_subroutines.py:176)])
DEBUG 2022-02-14 16:46:35,793 on stmt: $168binary_subscr.14 = getitem(value=comb, index=$166build_tuple.13, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:46:35,793 on stmt: $const174.17 = const(NoneType, None)
DEBUG 2022-02-14 16:46:35,793 on stmt: $const176.18 = const(NoneType, None)
DEBUG 2022-02-14 16:46:35,793 on stmt: $178build_slice.19 = global(slice: <class 'slice'>)
DEBUG 2022-02-14 16:46:35,793 on stmt: $178build_slice.20 = call $178build_slice.19($const174.17, $const176.18, func=$178build_slice.19, args=(Var($const174.17, _loop_hafnian_subroutines.py:176), Var($const176.18, _loop_hafnian_subroutines.py:176)), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:46:35,793 on stmt: $180build_tuple.21 = build_tuple(items=[Var(count.1, _loop_hafnian_subroutines.py:175), Var($178build_slice.20, _loop_hafnian_subroutines.py:176)])
DEBUG 2022-02-14 16:46:35,793 on stmt: comb[$180build_tuple.21] = $168binary_subscr.14
DEBUG 2022-02-14 16:46:35,793 on stmt: $184load_global.22 = global(range: <class 'range'>)
DEBUG 2022-02-14 16:46:35,793 on stmt: $const186.23 = const(int, 1)
DEBUG 2022-02-14 16:46:35,793 on stmt: $192binary_floor_divide.26 = n // i
DEBUG 2022-02-14 16:46:35,793 on stmt: $const194.27 = const(int, 1)
DEBUG 2022-02-14 16:46:35,793 on stmt: $196binary_add.28 = $192binary_floor_divide.26 + $const194.27
DEBUG 2022-02-14 16:46:35,793 on stmt: $198call_function.29 = call $184load_global.22($const186.23, $196binary_add.28, func=$184load_global.22, args=[Var($const186.23, _loop_hafnian_subroutines.py:177), Var($196binary_add.28, _loop_hafnian_subroutines.py:177)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:46:35,793 on stmt: $200get_iter.30 = getiter(value=$198call_function.29)
DEBUG 2022-02-14 16:46:35,793 on stmt: $phi202.1 = $200get_iter.30
DEBUG 2022-02-14 16:46:35,793 on stmt: jump 202
DEBUG 2022-02-14 16:46:35,794 ==== SSA block rewrite pass on 202
DEBUG 2022-02-14 16:46:35,794 Running <numba.core.ssa._FixSSAVars object at 0x7f72038aa4c0>
DEBUG 2022-02-14 16:46:35,794 on stmt: powfactor.2 = phi(incoming_values=[Var(powfactor.1, _loop_hafnian_subroutines.py:178), Var(powfactor, _loop_hafnian_subroutines.py:174)], incoming_blocks=[298, 140])
DEBUG 2022-02-14 16:46:35,794 on stmt: $202for_iter.2 = iternext(value=$phi202.1)
DEBUG 2022-02-14 16:46:35,794 on stmt: $202for_iter.3 = pair_first(value=$202for_iter.2)
DEBUG 2022-02-14 16:46:35,794 on stmt: $202for_iter.4 = pair_second(value=$202for_iter.2)
DEBUG 2022-02-14 16:46:35,794 on stmt: $phi204.2 = $202for_iter.3
DEBUG 2022-02-14 16:46:35,794 on stmt: branch $202for_iter.4, 204, 300
DEBUG 2022-02-14 16:46:35,794 ==== SSA block rewrite pass on 204
DEBUG 2022-02-14 16:46:35,794 Running <numba.core.ssa._FixSSAVars object at 0x7f72038aa4c0>
DEBUG 2022-02-14 16:46:35,794 on stmt: j = $phi204.2
DEBUG 2022-02-14 16:46:35,794 on stmt: $212binary_true_divide.6 = factor.3 / j
DEBUG 2022-02-14 16:46:35,794 on stmt: $214inplace_multiply.7 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=powfactor.2, rhs=$212binary_true_divide.6, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:46:35,794 on stmt: powfactor.1 = $214inplace_multiply.7
DEBUG 2022-02-14 16:46:35,794 on stmt: $218load_global.8 = global(range: <class 'range'>)
DEBUG 2022-02-14 16:46:35,794 on stmt: $224binary_multiply.11 = i * j
DEBUG 2022-02-14 16:46:35,794 on stmt: $const226.12 = const(int, 1)
DEBUG 2022-02-14 16:46:35,794 on stmt: $228binary_add.13 = $224binary_multiply.11 + $const226.12
DEBUG 2022-02-14 16:46:35,794 on stmt: $const232.15 = const(int, 2)
DEBUG 2022-02-14 16:46:35,794 on stmt: $234binary_add.16 = n + $const232.15
DEBUG 2022-02-14 16:46:35,794 on stmt: $236call_function.17 = call $218load_global.8($228binary_add.13, $234binary_add.16, func=$218load_global.8, args=[Var($228binary_add.13, _loop_hafnian_subroutines.py:179), Var($234binary_add.16, _loop_hafnian_subroutines.py:179)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:46:35,794 on stmt: $238get_iter.18 = getiter(value=$236call_function.17)
DEBUG 2022-02-14 16:46:35,794 on stmt: $phi240.2 = $238get_iter.18
DEBUG 2022-02-14 16:46:35,794 on stmt: jump 240
DEBUG 2022-02-14 16:46:35,795 ==== SSA block rewrite pass on 240
DEBUG 2022-02-14 16:46:35,795 Running <numba.core.ssa._FixSSAVars object at 0x7f72038aa4c0>
DEBUG 2022-02-14 16:46:35,795 on stmt: $240for_iter.3 = iternext(value=$phi240.2)
DEBUG 2022-02-14 16:46:35,795 on stmt: $240for_iter.4 = pair_first(value=$240for_iter.3)
DEBUG 2022-02-14 16:46:35,795 on stmt: $240for_iter.5 = pair_second(value=$240for_iter.3)
DEBUG 2022-02-14 16:46:35,795 on stmt: $phi242.3 = $240for_iter.4
DEBUG 2022-02-14 16:46:35,795 on stmt: branch $240for_iter.5, 242, 298
DEBUG 2022-02-14 16:46:35,795 ==== SSA block rewrite pass on 242
DEBUG 2022-02-14 16:46:35,795 Running <numba.core.ssa._FixSSAVars object at 0x7f72038aa4c0>
DEBUG 2022-02-14 16:46:35,795 on stmt: k = $phi242.3
DEBUG 2022-02-14 16:46:35,795 on stmt: $const250.7 = const(int, 1)
DEBUG 2022-02-14 16:46:35,795 on stmt: $252binary_subtract.8 = k - $const250.7
DEBUG 2022-02-14 16:46:35,795 on stmt: $254build_tuple.9 = build_tuple(items=[Var(count.1, _loop_hafnian_subroutines.py:175), Var($252binary_subtract.8, _loop_hafnian_subroutines.py:180)])
DEBUG 2022-02-14 16:46:35,795 on stmt: $258binary_subscr.12 = getitem(value=comb, index=$254build_tuple.9, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:46:35,795 on stmt: $const262.14 = const(int, 1)
DEBUG 2022-02-14 16:46:35,795 on stmt: $266binary_subtract.16 = $const262.14 - count.1
DEBUG 2022-02-14 16:46:35,795 on stmt: $274binary_multiply.20 = i * j
DEBUG 2022-02-14 16:46:35,795 on stmt: $276binary_subtract.21 = k - $274binary_multiply.20
DEBUG 2022-02-14 16:46:35,795 on stmt: $const278.22 = const(int, 1)
DEBUG 2022-02-14 16:46:35,795 on stmt: $280binary_subtract.23 = $276binary_subtract.21 - $const278.22
DEBUG 2022-02-14 16:46:35,795 on stmt: $282build_tuple.24 = build_tuple(items=[Var($266binary_subtract.16, _loop_hafnian_subroutines.py:180), Var($280binary_subtract.23, _loop_hafnian_subroutines.py:180)])
DEBUG 2022-02-14 16:46:35,795 on stmt: $284binary_subscr.25 = getitem(value=comb, index=$282build_tuple.24, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:46:35,795 on stmt: $288binary_multiply.27 = $284binary_subscr.25 * powfactor.1
DEBUG 2022-02-14 16:46:35,795 on stmt: $290inplace_add.28 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$258binary_subscr.12, rhs=$288binary_multiply.27, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:46:35,796 on stmt: comb[$254build_tuple.9] = $290inplace_add.28
DEBUG 2022-02-14 16:46:35,796 on stmt: jump 240
DEBUG 2022-02-14 16:46:35,796 ==== SSA block rewrite pass on 298
DEBUG 2022-02-14 16:46:35,796 Running <numba.core.ssa._FixSSAVars object at 0x7f72038aa4c0>
DEBUG 2022-02-14 16:46:35,796 on stmt: jump 202
DEBUG 2022-02-14 16:46:35,796 ==== SSA block rewrite pass on 300
DEBUG 2022-02-14 16:46:35,796 Running <numba.core.ssa._FixSSAVars object at 0x7f72038aa4c0>
DEBUG 2022-02-14 16:46:35,796 on stmt: jump 60
DEBUG 2022-02-14 16:46:35,796 ==== SSA block rewrite pass on 302
DEBUG 2022-02-14 16:46:35,796 Running <numba.core.ssa._FixSSAVars object at 0x7f72038aa4c0>
DEBUG 2022-02-14 16:46:35,796 on stmt: $const306.2 = const(NoneType, None)
DEBUG 2022-02-14 16:46:35,796 on stmt: $const308.3 = const(NoneType, None)
DEBUG 2022-02-14 16:46:35,796 on stmt: $310build_slice.4 = global(slice: <class 'slice'>)
DEBUG 2022-02-14 16:46:35,796 on stmt: $310build_slice.5 = call $310build_slice.4($const306.2, $const308.3, func=$310build_slice.4, args=(Var($const306.2, _loop_hafnian_subroutines.py:182), Var($const308.3, _loop_hafnian_subroutines.py:182)), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:46:35,796 on stmt: $312build_tuple.6 = build_tuple(items=[Var(count.2, _loop_hafnian_subroutines.py:174), Var($310build_slice.5, _loop_hafnian_subroutines.py:182)])
DEBUG 2022-02-14 16:46:35,796 on stmt: $314binary_subscr.7 = getitem(value=comb, index=$312build_tuple.6, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:46:35,796 on stmt: $316return_value.8 = cast(value=$314binary_subscr.7)
DEBUG 2022-02-14 16:46:35,796 on stmt: return $316return_value.8
DEBUG 2022-02-14 16:46:35,803 bytecode dump:
>          0	NOP(arg=None, lineno=3)
           2	LOAD_GLOBAL(arg=0, lineno=3)
           4	LOAD_FAST(arg=0, lineno=3)
           6	LOAD_FAST(arg=1, lineno=3)
           8	CALL_FUNCTION(arg=2, lineno=3)
          10	RETURN_VALUE(arg=None, lineno=3)
DEBUG 2022-02-14 16:46:35,803 pending: deque([State(pc_initial=0 nstack_initial=0)])
DEBUG 2022-02-14 16:46:35,803 stack: []
DEBUG 2022-02-14 16:46:35,803 dispatch pc=0, inst=NOP(arg=None, lineno=3)
DEBUG 2022-02-14 16:46:35,803 stack []
DEBUG 2022-02-14 16:46:35,803 dispatch pc=2, inst=LOAD_GLOBAL(arg=0, lineno=3)
DEBUG 2022-02-14 16:46:35,803 stack []
DEBUG 2022-02-14 16:46:35,803 dispatch pc=4, inst=LOAD_FAST(arg=0, lineno=3)
DEBUG 2022-02-14 16:46:35,803 stack ['$2load_global.0']
DEBUG 2022-02-14 16:46:35,803 dispatch pc=6, inst=LOAD_FAST(arg=1, lineno=3)
DEBUG 2022-02-14 16:46:35,803 stack ['$2load_global.0', '$tmp04.1']
DEBUG 2022-02-14 16:46:35,803 dispatch pc=8, inst=CALL_FUNCTION(arg=2, lineno=3)
DEBUG 2022-02-14 16:46:35,803 stack ['$2load_global.0', '$tmp04.1', '$dtype6.2']
DEBUG 2022-02-14 16:46:35,803 dispatch pc=10, inst=RETURN_VALUE(arg=None, lineno=3)
DEBUG 2022-02-14 16:46:35,803 stack ['$8call_function.3']
DEBUG 2022-02-14 16:46:35,803 end state. edges=[]
DEBUG 2022-02-14 16:46:35,803 -------------------------Prune PHIs-------------------------
DEBUG 2022-02-14 16:46:35,803 Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
DEBUG 2022-02-14 16:46:35,803 defmap: {}
DEBUG 2022-02-14 16:46:35,803 phismap: defaultdict(<class 'set'>, {})
DEBUG 2022-02-14 16:46:35,803 changing phismap: defaultdict(<class 'set'>, {})
DEBUG 2022-02-14 16:46:35,803 keep phismap: {}
DEBUG 2022-02-14 16:46:35,803 new_out: defaultdict(<class 'dict'>, {})
DEBUG 2022-02-14 16:46:35,804 ----------------------DONE Prune PHIs-----------------------
DEBUG 2022-02-14 16:46:35,804 block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$2load_global.0'}), (4, {'res': '$tmp04.1'}), (6, {'res': '$dtype6.2'}), (8, {'func': '$2load_global.0', 'args': ['$tmp04.1', '$dtype6.2'], 'res': '$8call_function.3'}), (10, {'retval': '$8call_function.3', 'castval': '$10return_value.4'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG 2022-02-14 16:46:35,804 label 0:
    tmp0 = arg(0, name=tmp0)                 ['tmp0']
    dtype = arg(1, name=dtype)               ['dtype']
    $2load_global.0 = global(intrin: <intrinsic stub>) ['$2load_global.0']
    $8call_function.3 = call $2load_global.0(tmp0, dtype, func=$2load_global.0, args=[Var(tmp0, <string>:3), Var(dtype, <string>:3)], kws=(), vararg=None, target=None) ['$2load_global.0', '$8call_function.3', 'dtype', 'tmp0']
    $10return_value.4 = cast(value=$8call_function.3) ['$10return_value.4', '$8call_function.3']
    return $10return_value.4                 ['$10return_value.4']

DEBUG 2022-02-14 16:46:35,805 ==== SSA block analysis pass on 0
DEBUG 2022-02-14 16:46:35,805 Running <numba.core.ssa._GatherDefsHandler object at 0x7f720379ec10>
DEBUG 2022-02-14 16:46:35,805 on stmt: tmp0 = arg(0, name=tmp0)
DEBUG 2022-02-14 16:46:35,805 on stmt: dtype = arg(1, name=dtype)
DEBUG 2022-02-14 16:46:35,805 on stmt: $2load_global.0 = global(intrin: <intrinsic stub>)
DEBUG 2022-02-14 16:46:35,805 on stmt: $8call_function.3 = call $2load_global.0(tmp0, dtype, func=$2load_global.0, args=[Var(tmp0, <string>:3), Var(dtype, <string>:3)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:46:35,805 on stmt: $10return_value.4 = cast(value=$8call_function.3)
DEBUG 2022-02-14 16:46:35,805 on stmt: return $10return_value.4
DEBUG 2022-02-14 16:46:35,805 defs defaultdict(<class 'list'>,
            {'$10return_value.4': [<numba.core.ir.Assign object at 0x7f72037a6a90>],
             '$2load_global.0': [<numba.core.ir.Assign object at 0x7f72037a6550>],
             '$8call_function.3': [<numba.core.ir.Assign object at 0x7f72037a6970>],
             'dtype': [<numba.core.ir.Assign object at 0x7f720379e4f0>],
             'tmp0': [<numba.core.ir.Assign object at 0x7f720379e310>]})
DEBUG 2022-02-14 16:46:35,805 SSA violators set()
DEBUG 2022-02-14 16:46:35,926 bytecode dump:
>          0	NOP(arg=None, lineno=169)
           2	LOAD_DEREF(arg=0, lineno=169)
           4	STORE_FAST(arg=1, lineno=169)
           6	LOAD_GLOBAL(arg=0, lineno=170)
           8	LOAD_METHOD(arg=1, lineno=170)
          10	LOAD_FAST(arg=0, lineno=170)
          12	CALL_METHOD(arg=1, lineno=170)
          14	GET_ITER(arg=None, lineno=170)
>         16	FOR_ITER(arg=16, lineno=170)
          18	STORE_FAST(arg=2, lineno=170)
          20	LOAD_FAST(arg=1, lineno=171)
          22	LOAD_FAST(arg=2, lineno=171)
          24	LOAD_METHOD(arg=2, lineno=171)
          26	CALL_METHOD(arg=0, lineno=171)
          28	INPLACE_ADD(arg=None, lineno=171)
          30	STORE_FAST(arg=1, lineno=171)
          32	JUMP_ABSOLUTE(arg=16, lineno=171)
>         34	LOAD_FAST(arg=1, lineno=172)
          36	RETURN_VALUE(arg=None, lineno=172)
DEBUG 2022-02-14 16:46:35,926 pending: deque([State(pc_initial=0 nstack_initial=0)])
DEBUG 2022-02-14 16:46:35,926 stack: []
DEBUG 2022-02-14 16:46:35,926 dispatch pc=0, inst=NOP(arg=None, lineno=169)
DEBUG 2022-02-14 16:46:35,926 stack []
DEBUG 2022-02-14 16:46:35,926 dispatch pc=2, inst=LOAD_DEREF(arg=0, lineno=169)
DEBUG 2022-02-14 16:46:35,926 stack []
DEBUG 2022-02-14 16:46:35,926 dispatch pc=4, inst=STORE_FAST(arg=1, lineno=169)
DEBUG 2022-02-14 16:46:35,926 stack ['$2load_deref.0']
DEBUG 2022-02-14 16:46:35,926 dispatch pc=6, inst=LOAD_GLOBAL(arg=0, lineno=170)
DEBUG 2022-02-14 16:46:35,926 stack []
DEBUG 2022-02-14 16:46:35,926 dispatch pc=8, inst=LOAD_METHOD(arg=1, lineno=170)
DEBUG 2022-02-14 16:46:35,926 stack ['$6load_global.1']
DEBUG 2022-02-14 16:46:35,926 dispatch pc=10, inst=LOAD_FAST(arg=0, lineno=170)
DEBUG 2022-02-14 16:46:35,926 stack ['$8load_method.2']
DEBUG 2022-02-14 16:46:35,927 dispatch pc=12, inst=CALL_METHOD(arg=1, lineno=170)
DEBUG 2022-02-14 16:46:35,927 stack ['$8load_method.2', '$arr10.3']
DEBUG 2022-02-14 16:46:35,927 dispatch pc=14, inst=GET_ITER(arg=None, lineno=170)
DEBUG 2022-02-14 16:46:35,927 stack ['$12call_method.4']
DEBUG 2022-02-14 16:46:35,927 end state. edges=[Edge(pc=16, stack=('$14get_iter.5',), blockstack=(), npush=0)]
DEBUG 2022-02-14 16:46:35,927 pending: deque([State(pc_initial=16 nstack_initial=1)])
DEBUG 2022-02-14 16:46:35,927 stack: ['$phi16.0']
DEBUG 2022-02-14 16:46:35,927 dispatch pc=16, inst=FOR_ITER(arg=16, lineno=170)
DEBUG 2022-02-14 16:46:35,927 stack ['$phi16.0']
DEBUG 2022-02-14 16:46:35,927 end state. edges=[Edge(pc=34, stack=(), blockstack=(), npush=0), Edge(pc=18, stack=('$phi16.0', '$16for_iter.2'), blockstack=(), npush=0)]
DEBUG 2022-02-14 16:46:35,927 pending: deque([State(pc_initial=34 nstack_initial=0), State(pc_initial=18 nstack_initial=2)])
DEBUG 2022-02-14 16:46:35,927 stack: []
DEBUG 2022-02-14 16:46:35,927 dispatch pc=34, inst=LOAD_FAST(arg=1, lineno=172)
DEBUG 2022-02-14 16:46:35,927 stack []
DEBUG 2022-02-14 16:46:35,927 dispatch pc=36, inst=RETURN_VALUE(arg=None, lineno=172)
DEBUG 2022-02-14 16:46:35,927 stack ['$c34.0']
DEBUG 2022-02-14 16:46:35,927 end state. edges=[]
DEBUG 2022-02-14 16:46:35,927 pending: deque([State(pc_initial=18 nstack_initial=2)])
DEBUG 2022-02-14 16:46:35,927 stack: ['$phi18.0', '$phi18.1']
DEBUG 2022-02-14 16:46:35,927 dispatch pc=18, inst=STORE_FAST(arg=2, lineno=170)
DEBUG 2022-02-14 16:46:35,927 stack ['$phi18.0', '$phi18.1']
DEBUG 2022-02-14 16:46:35,927 dispatch pc=20, inst=LOAD_FAST(arg=1, lineno=171)
DEBUG 2022-02-14 16:46:35,927 stack ['$phi18.0']
DEBUG 2022-02-14 16:46:35,927 dispatch pc=22, inst=LOAD_FAST(arg=2, lineno=171)
DEBUG 2022-02-14 16:46:35,928 stack ['$phi18.0', '$c20.2']
DEBUG 2022-02-14 16:46:35,928 dispatch pc=24, inst=LOAD_METHOD(arg=2, lineno=171)
DEBUG 2022-02-14 16:46:35,928 stack ['$phi18.0', '$c20.2', '$v22.3']
DEBUG 2022-02-14 16:46:35,928 dispatch pc=26, inst=CALL_METHOD(arg=0, lineno=171)
DEBUG 2022-02-14 16:46:35,928 stack ['$phi18.0', '$c20.2', '$24load_method.4']
DEBUG 2022-02-14 16:46:35,928 dispatch pc=28, inst=INPLACE_ADD(arg=None, lineno=171)
DEBUG 2022-02-14 16:46:35,928 stack ['$phi18.0', '$c20.2', '$26call_method.5']
DEBUG 2022-02-14 16:46:35,928 dispatch pc=30, inst=STORE_FAST(arg=1, lineno=171)
DEBUG 2022-02-14 16:46:35,928 stack ['$phi18.0', '$28inplace_add.6']
DEBUG 2022-02-14 16:46:35,928 dispatch pc=32, inst=JUMP_ABSOLUTE(arg=16, lineno=171)
DEBUG 2022-02-14 16:46:35,928 stack ['$phi18.0']
DEBUG 2022-02-14 16:46:35,928 end state. edges=[Edge(pc=16, stack=('$phi18.0',), blockstack=(), npush=0)]
DEBUG 2022-02-14 16:46:35,928 pending: deque([State(pc_initial=16 nstack_initial=1)])
DEBUG 2022-02-14 16:46:35,928 -------------------------Prune PHIs-------------------------
DEBUG 2022-02-14 16:46:35,928 Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=16 nstack_initial=1): {'$phi16.0'},
             State(pc_initial=18 nstack_initial=2): {'$phi18.1'},
             State(pc_initial=34 nstack_initial=0): set()})
DEBUG 2022-02-14 16:46:35,928 defmap: {'$phi16.0': State(pc_initial=0 nstack_initial=0),
 '$phi18.1': State(pc_initial=16 nstack_initial=1)}
DEBUG 2022-02-14 16:46:35,928 phismap: defaultdict(<class 'set'>,
            {'$phi16.0': {('$14get_iter.5',
                           State(pc_initial=0 nstack_initial=0)),
                          ('$phi18.0', State(pc_initial=18 nstack_initial=2))},
             '$phi18.0': {('$phi16.0', State(pc_initial=16 nstack_initial=1))},
             '$phi18.1': {('$16for_iter.2',
                           State(pc_initial=16 nstack_initial=1))}})
DEBUG 2022-02-14 16:46:35,929 changing phismap: defaultdict(<class 'set'>,
            {'$phi16.0': {('$14get_iter.5',
                           State(pc_initial=0 nstack_initial=0)),
                          ('$phi16.0', State(pc_initial=16 nstack_initial=1))},
             '$phi18.0': {('$14get_iter.5',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi18.1': {('$16for_iter.2',
                           State(pc_initial=16 nstack_initial=1))}})
DEBUG 2022-02-14 16:46:35,929 changing phismap: defaultdict(<class 'set'>,
            {'$phi16.0': {('$14get_iter.5',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi18.0': {('$14get_iter.5',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi18.1': {('$16for_iter.2',
                           State(pc_initial=16 nstack_initial=1))}})
DEBUG 2022-02-14 16:46:35,929 changing phismap: defaultdict(<class 'set'>,
            {'$phi16.0': {('$14get_iter.5',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi18.0': {('$14get_iter.5',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi18.1': {('$16for_iter.2',
                           State(pc_initial=16 nstack_initial=1))}})
DEBUG 2022-02-14 16:46:35,929 keep phismap: {'$phi16.0': {('$14get_iter.5', State(pc_initial=0 nstack_initial=0))},
 '$phi18.1': {('$16for_iter.2', State(pc_initial=16 nstack_initial=1))}}
DEBUG 2022-02-14 16:46:35,929 new_out: defaultdict(<class 'dict'>,
            {State(pc_initial=0 nstack_initial=0): {'$phi16.0': '$14get_iter.5'},
             State(pc_initial=16 nstack_initial=1): {'$phi18.1': '$16for_iter.2'}})
DEBUG 2022-02-14 16:46:35,929 ----------------------DONE Prune PHIs-----------------------
DEBUG 2022-02-14 16:46:35,929 block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$2load_deref.0'}), (4, {'value': '$2load_deref.0'}), (6, {'res': '$6load_global.1'}), (8, {'item': '$6load_global.1', 'res': '$8load_method.2'}), (10, {'res': '$arr10.3'}), (12, {'func': '$8load_method.2', 'args': ['$arr10.3'], 'res': '$12call_method.4'}), (14, {'value': '$12call_method.4', 'res': '$14get_iter.5'})), outgoing_phis={'$phi16.0': '$14get_iter.5'}, blockstack=(), active_try_block=None, outgoing_edgepushed={16: ('$14get_iter.5',)})
DEBUG 2022-02-14 16:46:35,930 block_infos State(pc_initial=16 nstack_initial=1):
AdaptBlockInfo(insts=((16, {'iterator': '$phi16.0', 'pair': '$16for_iter.1', 'indval': '$16for_iter.2', 'pred': '$16for_iter.3'}),), outgoing_phis={'$phi18.1': '$16for_iter.2'}, blockstack=(), active_try_block=None, outgoing_edgepushed={34: (), 18: ('$phi16.0', '$16for_iter.2')})
DEBUG 2022-02-14 16:46:35,930 block_infos State(pc_initial=18 nstack_initial=2):
AdaptBlockInfo(insts=((18, {'value': '$phi18.1'}), (20, {'res': '$c20.2'}), (22, {'res': '$v22.3'}), (24, {'item': '$v22.3', 'res': '$24load_method.4'}), (26, {'func': '$24load_method.4', 'args': [], 'res': '$26call_method.5'}), (28, {'lhs': '$c20.2', 'rhs': '$26call_method.5', 'res': '$28inplace_add.6'}), (30, {'value': '$28inplace_add.6'}), (32, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={16: ('$phi18.0',)})
DEBUG 2022-02-14 16:46:35,930 block_infos State(pc_initial=34 nstack_initial=0):
AdaptBlockInfo(insts=((34, {'res': '$c34.0'}), (36, {'retval': '$c34.0', 'castval': '$36return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG 2022-02-14 16:46:35,930 label 0:
    arr = arg(0, name=arr)                   ['arr']
    c = freevar(zero: 0j)                    ['c']
    $6load_global.1 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>) ['$6load_global.1']
    $8load_method.2 = getattr(value=$6load_global.1, attr=nditer) ['$6load_global.1', '$8load_method.2']
    $12call_method.4 = call $8load_method.2(arr, func=$8load_method.2, args=[Var(arr, arraymath.py:169)], kws=(), vararg=None, target=None) ['$12call_method.4', '$8load_method.2', 'arr']
    $14get_iter.5 = getiter(value=$12call_method.4) ['$12call_method.4', '$14get_iter.5']
    $phi16.0 = $14get_iter.5                 ['$14get_iter.5', '$phi16.0']
    jump 16                                  []
label 16:
    $16for_iter.1 = iternext(value=$phi16.0) ['$16for_iter.1', '$phi16.0']
    $16for_iter.2 = pair_first(value=$16for_iter.1) ['$16for_iter.1', '$16for_iter.2']
    $16for_iter.3 = pair_second(value=$16for_iter.1) ['$16for_iter.1', '$16for_iter.3']
    $phi18.1 = $16for_iter.2                 ['$16for_iter.2', '$phi18.1']
    branch $16for_iter.3, 18, 34             ['$16for_iter.3']
label 18:
    v = $phi18.1                             ['$phi18.1', 'v']
    $24load_method.4 = getattr(value=v, attr=item) ['$24load_method.4', 'v']
    $26call_method.5 = call $24load_method.4(func=$24load_method.4, args=[], kws=(), vararg=None, target=None) ['$24load_method.4', '$26call_method.5']
    $28inplace_add.6 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=c, rhs=$26call_method.5, static_lhs=Undefined, static_rhs=Undefined) ['$26call_method.5', '$28inplace_add.6', 'c']
    c = $28inplace_add.6                     ['$28inplace_add.6', 'c']
    jump 16                                  []
label 34:
    $36return_value.1 = cast(value=c)        ['$36return_value.1', 'c']
    return $36return_value.1                 ['$36return_value.1']

DEBUG 2022-02-14 16:46:35,934 ==== SSA block analysis pass on 0
DEBUG 2022-02-14 16:46:35,934 Running <numba.core.ssa._GatherDefsHandler object at 0x7f72034cdfa0>
DEBUG 2022-02-14 16:46:35,934 on stmt: arr = arg(0, name=arr)
DEBUG 2022-02-14 16:46:35,934 on stmt: c = freevar(zero: 0j)
DEBUG 2022-02-14 16:46:35,934 on stmt: $6load_global.1 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:46:35,934 on stmt: $8load_method.2 = getattr(value=$6load_global.1, attr=nditer)
DEBUG 2022-02-14 16:46:35,934 on stmt: $12call_method.4 = call $8load_method.2(arr, func=$8load_method.2, args=[Var(arr, arraymath.py:169)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:46:35,934 on stmt: $14get_iter.5 = getiter(value=$12call_method.4)
DEBUG 2022-02-14 16:46:35,935 on stmt: $phi16.0 = $14get_iter.5
DEBUG 2022-02-14 16:46:35,935 on stmt: jump 16
DEBUG 2022-02-14 16:46:35,935 ==== SSA block analysis pass on 16
DEBUG 2022-02-14 16:46:35,935 Running <numba.core.ssa._GatherDefsHandler object at 0x7f72034cdfa0>
DEBUG 2022-02-14 16:46:35,935 on stmt: $16for_iter.1 = iternext(value=$phi16.0)
DEBUG 2022-02-14 16:46:35,935 on stmt: $16for_iter.2 = pair_first(value=$16for_iter.1)
DEBUG 2022-02-14 16:46:35,935 on stmt: $16for_iter.3 = pair_second(value=$16for_iter.1)
DEBUG 2022-02-14 16:46:35,935 on stmt: $phi18.1 = $16for_iter.2
DEBUG 2022-02-14 16:46:35,935 on stmt: branch $16for_iter.3, 18, 34
DEBUG 2022-02-14 16:46:35,935 ==== SSA block analysis pass on 18
DEBUG 2022-02-14 16:46:35,935 Running <numba.core.ssa._GatherDefsHandler object at 0x7f72034cdfa0>
DEBUG 2022-02-14 16:46:35,935 on stmt: v = $phi18.1
DEBUG 2022-02-14 16:46:35,935 on stmt: $24load_method.4 = getattr(value=v, attr=item)
DEBUG 2022-02-14 16:46:35,935 on stmt: $26call_method.5 = call $24load_method.4(func=$24load_method.4, args=[], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:46:35,935 on stmt: $28inplace_add.6 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=c, rhs=$26call_method.5, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:46:35,935 on stmt: c = $28inplace_add.6
DEBUG 2022-02-14 16:46:35,935 on stmt: jump 16
DEBUG 2022-02-14 16:46:35,935 ==== SSA block analysis pass on 34
DEBUG 2022-02-14 16:46:35,935 Running <numba.core.ssa._GatherDefsHandler object at 0x7f72034cdfa0>
DEBUG 2022-02-14 16:46:35,935 on stmt: $36return_value.1 = cast(value=c)
DEBUG 2022-02-14 16:46:35,935 on stmt: return $36return_value.1
DEBUG 2022-02-14 16:46:35,936 defs defaultdict(<class 'list'>,
            {'$12call_method.4': [<numba.core.ir.Assign object at 0x7f72034c49a0>],
             '$14get_iter.5': [<numba.core.ir.Assign object at 0x7f72034c4a90>],
             '$16for_iter.1': [<numba.core.ir.Assign object at 0x7f72034c4d60>],
             '$16for_iter.2': [<numba.core.ir.Assign object at 0x7f72034c4e80>],
             '$16for_iter.3': [<numba.core.ir.Assign object at 0x7f72034c4fa0>],
             '$24load_method.4': [<numba.core.ir.Assign object at 0x7f72034cd670>],
             '$26call_method.5': [<numba.core.ir.Assign object at 0x7f72034cd880>],
             '$28inplace_add.6': [<numba.core.ir.Assign object at 0x7f72034cd9a0>],
             '$36return_value.1': [<numba.core.ir.Assign object at 0x7f72034cdd90>],
             '$6load_global.1': [<numba.core.ir.Assign object at 0x7f72034c44f0>],
             '$8load_method.2': [<numba.core.ir.Assign object at 0x7f72034c4670>],
             '$phi16.0': [<numba.core.ir.Assign object at 0x7f72034c4370>],
             '$phi18.1': [<numba.core.ir.Assign object at 0x7f72034c4ca0>],
             'arr': [<numba.core.ir.Assign object at 0x7f72034c1370>],
             'c': [<numba.core.ir.Assign object at 0x7f72034c4250>,
                   <numba.core.ir.Assign object at 0x7f72034cda60>],
             'v': [<numba.core.ir.Assign object at 0x7f72034cd2b0>]})
DEBUG 2022-02-14 16:46:35,936 SSA violators {'c'}
DEBUG 2022-02-14 16:46:35,936 Fix SSA violator on var c
DEBUG 2022-02-14 16:46:35,936 ==== SSA block rewrite pass on 0
DEBUG 2022-02-14 16:46:35,936 Running <numba.core.ssa._FreshVarHandler object at 0x7f72034cdfd0>
DEBUG 2022-02-14 16:46:35,936 on stmt: arr = arg(0, name=arr)
DEBUG 2022-02-14 16:46:35,936 on stmt: c = freevar(zero: 0j)
DEBUG 2022-02-14 16:46:35,936 first assign: c
DEBUG 2022-02-14 16:46:35,936 replaced with: c = freevar(zero: 0j)
DEBUG 2022-02-14 16:46:35,936 on stmt: $6load_global.1 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:46:35,936 on stmt: $8load_method.2 = getattr(value=$6load_global.1, attr=nditer)
DEBUG 2022-02-14 16:46:35,936 on stmt: $12call_method.4 = call $8load_method.2(arr, func=$8load_method.2, args=[Var(arr, arraymath.py:169)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:46:35,936 on stmt: $14get_iter.5 = getiter(value=$12call_method.4)
DEBUG 2022-02-14 16:46:35,936 on stmt: $phi16.0 = $14get_iter.5
DEBUG 2022-02-14 16:46:35,936 on stmt: jump 16
DEBUG 2022-02-14 16:46:35,937 ==== SSA block rewrite pass on 16
DEBUG 2022-02-14 16:46:35,937 Running <numba.core.ssa._FreshVarHandler object at 0x7f72034cdfd0>
DEBUG 2022-02-14 16:46:35,937 on stmt: $16for_iter.1 = iternext(value=$phi16.0)
DEBUG 2022-02-14 16:46:35,937 on stmt: $16for_iter.2 = pair_first(value=$16for_iter.1)
DEBUG 2022-02-14 16:46:35,937 on stmt: $16for_iter.3 = pair_second(value=$16for_iter.1)
DEBUG 2022-02-14 16:46:35,937 on stmt: $phi18.1 = $16for_iter.2
DEBUG 2022-02-14 16:46:35,937 on stmt: branch $16for_iter.3, 18, 34
DEBUG 2022-02-14 16:46:35,937 ==== SSA block rewrite pass on 18
DEBUG 2022-02-14 16:46:35,937 Running <numba.core.ssa._FreshVarHandler object at 0x7f72034cdfd0>
DEBUG 2022-02-14 16:46:35,937 on stmt: v = $phi18.1
DEBUG 2022-02-14 16:46:35,937 on stmt: $24load_method.4 = getattr(value=v, attr=item)
DEBUG 2022-02-14 16:46:35,937 on stmt: $26call_method.5 = call $24load_method.4(func=$24load_method.4, args=[], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:46:35,937 on stmt: $28inplace_add.6 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=c, rhs=$26call_method.5, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:46:35,937 on stmt: c = $28inplace_add.6
DEBUG 2022-02-14 16:46:35,937 replaced with: c.1 = $28inplace_add.6
DEBUG 2022-02-14 16:46:35,937 on stmt: jump 16
DEBUG 2022-02-14 16:46:35,937 ==== SSA block rewrite pass on 34
DEBUG 2022-02-14 16:46:35,937 Running <numba.core.ssa._FreshVarHandler object at 0x7f72034cdfd0>
DEBUG 2022-02-14 16:46:35,937 on stmt: $36return_value.1 = cast(value=c)
DEBUG 2022-02-14 16:46:35,937 on stmt: return $36return_value.1
DEBUG 2022-02-14 16:46:35,937 Replaced assignments: defaultdict(<class 'list'>,
            {0: [<numba.core.ir.Assign object at 0x7f72034cdf40>],
             18: [<numba.core.ir.Assign object at 0x7f72034c4070>]})
DEBUG 2022-02-14 16:46:35,938 ==== SSA block rewrite pass on 0
DEBUG 2022-02-14 16:46:35,938 Running <numba.core.ssa._FixSSAVars object at 0x7f72034cdfd0>
DEBUG 2022-02-14 16:46:35,938 on stmt: arr = arg(0, name=arr)
DEBUG 2022-02-14 16:46:35,938 on stmt: c = freevar(zero: 0j)
DEBUG 2022-02-14 16:46:35,938 on stmt: $6load_global.1 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:46:35,938 on stmt: $8load_method.2 = getattr(value=$6load_global.1, attr=nditer)
DEBUG 2022-02-14 16:46:35,938 on stmt: $12call_method.4 = call $8load_method.2(arr, func=$8load_method.2, args=[Var(arr, arraymath.py:169)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:46:35,938 on stmt: $14get_iter.5 = getiter(value=$12call_method.4)
DEBUG 2022-02-14 16:46:35,938 on stmt: $phi16.0 = $14get_iter.5
DEBUG 2022-02-14 16:46:35,938 on stmt: jump 16
DEBUG 2022-02-14 16:46:35,938 ==== SSA block rewrite pass on 16
DEBUG 2022-02-14 16:46:35,938 Running <numba.core.ssa._FixSSAVars object at 0x7f72034cdfd0>
DEBUG 2022-02-14 16:46:35,938 on stmt: $16for_iter.1 = iternext(value=$phi16.0)
DEBUG 2022-02-14 16:46:35,938 on stmt: $16for_iter.2 = pair_first(value=$16for_iter.1)
DEBUG 2022-02-14 16:46:35,938 on stmt: $16for_iter.3 = pair_second(value=$16for_iter.1)
DEBUG 2022-02-14 16:46:35,938 on stmt: $phi18.1 = $16for_iter.2
DEBUG 2022-02-14 16:46:35,938 on stmt: branch $16for_iter.3, 18, 34
DEBUG 2022-02-14 16:46:35,938 ==== SSA block rewrite pass on 18
DEBUG 2022-02-14 16:46:35,938 Running <numba.core.ssa._FixSSAVars object at 0x7f72034cdfd0>
DEBUG 2022-02-14 16:46:35,939 on stmt: v = $phi18.1
DEBUG 2022-02-14 16:46:35,939 on stmt: $24load_method.4 = getattr(value=v, attr=item)
DEBUG 2022-02-14 16:46:35,939 on stmt: $26call_method.5 = call $24load_method.4(func=$24load_method.4, args=[], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:46:35,939 on stmt: $28inplace_add.6 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=c, rhs=$26call_method.5, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:46:35,939 find_def var='c' stmt=$28inplace_add.6 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=c, rhs=$26call_method.5, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:46:35,939 find_def_from_top label 18
DEBUG 2022-02-14 16:46:35,939 idom 16 from label 18
DEBUG 2022-02-14 16:46:35,939 find_def_from_bottom label 16
DEBUG 2022-02-14 16:46:35,939 find_def_from_top label 16
DEBUG 2022-02-14 16:46:35,939 insert phi node c.2 = phi(incoming_values=[], incoming_blocks=[]) at 16
DEBUG 2022-02-14 16:46:35,939 find_def_from_bottom label 0
DEBUG 2022-02-14 16:46:35,939 incoming_def c = freevar(zero: 0j)
DEBUG 2022-02-14 16:46:35,939 find_def_from_bottom label 18
DEBUG 2022-02-14 16:46:35,939 incoming_def c.1 = $28inplace_add.6
DEBUG 2022-02-14 16:46:35,939 replaced with: $28inplace_add.6 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=c.2, rhs=$26call_method.5, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-14 16:46:35,939 on stmt: c.1 = $28inplace_add.6
DEBUG 2022-02-14 16:46:35,939 on stmt: jump 16
DEBUG 2022-02-14 16:46:35,939 ==== SSA block rewrite pass on 34
DEBUG 2022-02-14 16:46:35,939 Running <numba.core.ssa._FixSSAVars object at 0x7f72034cdfd0>
DEBUG 2022-02-14 16:46:35,939 on stmt: $36return_value.1 = cast(value=c)
DEBUG 2022-02-14 16:46:35,940 find_def var='c' stmt=$36return_value.1 = cast(value=c)
DEBUG 2022-02-14 16:46:35,940 find_def_from_top label 34
DEBUG 2022-02-14 16:46:35,940 idom 16 from label 34
DEBUG 2022-02-14 16:46:35,940 find_def_from_bottom label 16
DEBUG 2022-02-14 16:46:35,940 replaced with: $36return_value.1 = cast(value=c.2)
DEBUG 2022-02-14 16:46:35,940 on stmt: return $36return_value.1
DEBUG 2022-02-14 16:46:35,949 bytecode dump:
>          0	NOP(arg=None, lineno=2820)
           2	LOAD_GLOBAL(arg=0, lineno=2820)
           4	LOAD_FAST(arg=0, lineno=2820)
           6	CALL_FUNCTION(arg=1, lineno=2820)
           8	STORE_FAST(arg=2, lineno=2820)
          10	LOAD_GLOBAL(arg=1, lineno=2821)
          12	LOAD_FAST(arg=2, lineno=2821)
          14	CALL_FUNCTION(arg=1, lineno=2821)
          16	GET_ITER(arg=None, lineno=2821)
>         18	FOR_ITER(arg=40, lineno=2821)
          20	STORE_FAST(arg=3, lineno=2821)
          22	LOAD_FAST(arg=0, lineno=2822)
          24	LOAD_FAST(arg=3, lineno=2822)
          26	BINARY_SUBSCR(arg=None, lineno=2822)
          28	LOAD_FAST(arg=1, lineno=2822)
          30	LOAD_GLOBAL(arg=0, lineno=2822)
          32	LOAD_FAST(arg=1, lineno=2822)
          34	CALL_FUNCTION(arg=1, lineno=2822)
          36	LOAD_FAST(arg=2, lineno=2822)
          38	BINARY_SUBTRACT(arg=None, lineno=2822)
          40	LOAD_FAST(arg=3, lineno=2822)
          42	BINARY_ADD(arg=None, lineno=2822)
          44	BINARY_SUBSCR(arg=None, lineno=2822)
          46	COMPARE_OP(arg=3, lineno=2822)
          48	POP_JUMP_IF_FALSE(arg=18, lineno=2822)
          50	LOAD_GLOBAL(arg=2, lineno=2823)
          52	LOAD_CONST(arg=1, lineno=2823)
          54	CALL_FUNCTION(arg=1, lineno=2823)
          56	RAISE_VARARGS(arg=1, lineno=2823)
          58	JUMP_ABSOLUTE(arg=18, lineno=2823)
>         60	LOAD_CONST(arg=0, lineno=2823)
          62	RETURN_VALUE(arg=None, lineno=2823)
DEBUG 2022-02-14 16:46:35,949 pending: deque([State(pc_initial=0 nstack_initial=0)])
DEBUG 2022-02-14 16:46:35,949 stack: []
DEBUG 2022-02-14 16:46:35,949 dispatch pc=0, inst=NOP(arg=None, lineno=2820)
DEBUG 2022-02-14 16:46:35,949 stack []
DEBUG 2022-02-14 16:46:35,950 dispatch pc=2, inst=LOAD_GLOBAL(arg=0, lineno=2820)
DEBUG 2022-02-14 16:46:35,950 stack []
DEBUG 2022-02-14 16:46:35,950 dispatch pc=4, inst=LOAD_FAST(arg=0, lineno=2820)
DEBUG 2022-02-14 16:46:35,950 stack ['$2load_global.0']
DEBUG 2022-02-14 16:46:35,950 dispatch pc=6, inst=CALL_FUNCTION(arg=1, lineno=2820)
DEBUG 2022-02-14 16:46:35,950 stack ['$2load_global.0', '$shape4.1']
DEBUG 2022-02-14 16:46:35,950 dispatch pc=8, inst=STORE_FAST(arg=2, lineno=2820)
DEBUG 2022-02-14 16:46:35,950 stack ['$6call_function.2']
DEBUG 2022-02-14 16:46:35,950 dispatch pc=10, inst=LOAD_GLOBAL(arg=1, lineno=2821)
DEBUG 2022-02-14 16:46:35,950 stack []
DEBUG 2022-02-14 16:46:35,950 dispatch pc=12, inst=LOAD_FAST(arg=2, lineno=2821)
DEBUG 2022-02-14 16:46:35,950 stack ['$10load_global.3']
DEBUG 2022-02-14 16:46:35,950 dispatch pc=14, inst=CALL_FUNCTION(arg=1, lineno=2821)
DEBUG 2022-02-14 16:46:35,950 stack ['$10load_global.3', '$n12.4']
DEBUG 2022-02-14 16:46:35,950 dispatch pc=16, inst=GET_ITER(arg=None, lineno=2821)
DEBUG 2022-02-14 16:46:35,950 stack ['$14call_function.5']
DEBUG 2022-02-14 16:46:35,950 end state. edges=[Edge(pc=18, stack=('$16get_iter.6',), blockstack=(), npush=0)]
DEBUG 2022-02-14 16:46:35,950 pending: deque([State(pc_initial=18 nstack_initial=1)])
DEBUG 2022-02-14 16:46:35,950 stack: ['$phi18.0']
DEBUG 2022-02-14 16:46:35,950 dispatch pc=18, inst=FOR_ITER(arg=40, lineno=2821)
DEBUG 2022-02-14 16:46:35,951 stack ['$phi18.0']
DEBUG 2022-02-14 16:46:35,951 end state. edges=[Edge(pc=60, stack=(), blockstack=(), npush=0), Edge(pc=20, stack=('$phi18.0', '$18for_iter.2'), blockstack=(), npush=0)]
DEBUG 2022-02-14 16:46:35,951 pending: deque([State(pc_initial=60 nstack_initial=0), State(pc_initial=20 nstack_initial=2)])
DEBUG 2022-02-14 16:46:35,951 stack: []
DEBUG 2022-02-14 16:46:35,951 dispatch pc=60, inst=LOAD_CONST(arg=0, lineno=2823)
DEBUG 2022-02-14 16:46:35,951 stack []
DEBUG 2022-02-14 16:46:35,951 dispatch pc=62, inst=RETURN_VALUE(arg=None, lineno=2823)
DEBUG 2022-02-14 16:46:35,951 stack ['$const60.0']
DEBUG 2022-02-14 16:46:35,951 end state. edges=[]
DEBUG 2022-02-14 16:46:35,951 pending: deque([State(pc_initial=20 nstack_initial=2)])
DEBUG 2022-02-14 16:46:35,951 stack: ['$phi20.0', '$phi20.1']
DEBUG 2022-02-14 16:46:35,951 dispatch pc=20, inst=STORE_FAST(arg=3, lineno=2821)
DEBUG 2022-02-14 16:46:35,951 stack ['$phi20.0', '$phi20.1']
DEBUG 2022-02-14 16:46:35,951 dispatch pc=22, inst=LOAD_FAST(arg=0, lineno=2822)
DEBUG 2022-02-14 16:46:35,951 stack ['$phi20.0']
DEBUG 2022-02-14 16:46:35,951 dispatch pc=24, inst=LOAD_FAST(arg=3, lineno=2822)
DEBUG 2022-02-14 16:46:35,951 stack ['$phi20.0', '$shape22.2']
DEBUG 2022-02-14 16:46:35,951 dispatch pc=26, inst=BINARY_SUBSCR(arg=None, lineno=2822)
DEBUG 2022-02-14 16:46:35,951 stack ['$phi20.0', '$shape22.2', '$i24.3']
DEBUG 2022-02-14 16:46:35,951 dispatch pc=28, inst=LOAD_FAST(arg=1, lineno=2822)
DEBUG 2022-02-14 16:46:35,951 stack ['$phi20.0', '$26binary_subscr.4']
DEBUG 2022-02-14 16:46:35,952 dispatch pc=30, inst=LOAD_GLOBAL(arg=0, lineno=2822)
DEBUG 2022-02-14 16:46:35,952 stack ['$phi20.0', '$26binary_subscr.4', '$main_shape28.5']
DEBUG 2022-02-14 16:46:35,952 dispatch pc=32, inst=LOAD_FAST(arg=1, lineno=2822)
DEBUG 2022-02-14 16:46:35,952 stack ['$phi20.0', '$26binary_subscr.4', '$main_shape28.5', '$30load_global.6']
DEBUG 2022-02-14 16:46:35,952 dispatch pc=34, inst=CALL_FUNCTION(arg=1, lineno=2822)
DEBUG 2022-02-14 16:46:35,952 stack ['$phi20.0', '$26binary_subscr.4', '$main_shape28.5', '$30load_global.6', '$main_shape32.7']
DEBUG 2022-02-14 16:46:35,952 dispatch pc=36, inst=LOAD_FAST(arg=2, lineno=2822)
DEBUG 2022-02-14 16:46:35,952 stack ['$phi20.0', '$26binary_subscr.4', '$main_shape28.5', '$34call_function.8']
DEBUG 2022-02-14 16:46:35,952 dispatch pc=38, inst=BINARY_SUBTRACT(arg=None, lineno=2822)
DEBUG 2022-02-14 16:46:35,952 stack ['$phi20.0', '$26binary_subscr.4', '$main_shape28.5', '$34call_function.8', '$n36.9']
DEBUG 2022-02-14 16:46:35,952 dispatch pc=40, inst=LOAD_FAST(arg=3, lineno=2822)
DEBUG 2022-02-14 16:46:35,952 stack ['$phi20.0', '$26binary_subscr.4', '$main_shape28.5', '$38binary_subtract.10']
DEBUG 2022-02-14 16:46:35,952 dispatch pc=42, inst=BINARY_ADD(arg=None, lineno=2822)
DEBUG 2022-02-14 16:46:35,952 stack ['$phi20.0', '$26binary_subscr.4', '$main_shape28.5', '$38binary_subtract.10', '$i40.11']
DEBUG 2022-02-14 16:46:35,952 dispatch pc=44, inst=BINARY_SUBSCR(arg=None, lineno=2822)
DEBUG 2022-02-14 16:46:35,952 stack ['$phi20.0', '$26binary_subscr.4', '$main_shape28.5', '$42binary_add.12']
DEBUG 2022-02-14 16:46:35,952 dispatch pc=46, inst=COMPARE_OP(arg=3, lineno=2822)
DEBUG 2022-02-14 16:46:35,952 stack ['$phi20.0', '$26binary_subscr.4', '$44binary_subscr.13']
DEBUG 2022-02-14 16:46:35,952 dispatch pc=48, inst=POP_JUMP_IF_FALSE(arg=18, lineno=2822)
DEBUG 2022-02-14 16:46:35,952 stack ['$phi20.0', '$46compare_op.14']
DEBUG 2022-02-14 16:46:35,952 end state. edges=[Edge(pc=50, stack=('$phi20.0',), blockstack=(), npush=0), Edge(pc=18, stack=('$phi20.0',), blockstack=(), npush=0)]
DEBUG 2022-02-14 16:46:35,953 pending: deque([State(pc_initial=50 nstack_initial=1), State(pc_initial=18 nstack_initial=1)])
DEBUG 2022-02-14 16:46:35,953 stack: ['$phi50.0']
DEBUG 2022-02-14 16:46:35,953 dispatch pc=50, inst=LOAD_GLOBAL(arg=2, lineno=2823)
DEBUG 2022-02-14 16:46:35,953 stack ['$phi50.0']
DEBUG 2022-02-14 16:46:35,953 dispatch pc=52, inst=LOAD_CONST(arg=1, lineno=2823)
DEBUG 2022-02-14 16:46:35,953 stack ['$phi50.0', '$50load_global.1']
DEBUG 2022-02-14 16:46:35,953 dispatch pc=54, inst=CALL_FUNCTION(arg=1, lineno=2823)
DEBUG 2022-02-14 16:46:35,953 stack ['$phi50.0', '$50load_global.1', '$const52.2']
DEBUG 2022-02-14 16:46:35,953 dispatch pc=56, inst=RAISE_VARARGS(arg=1, lineno=2823)
DEBUG 2022-02-14 16:46:35,953 stack ['$phi50.0', '$54call_function.3']
DEBUG 2022-02-14 16:46:35,953 end state. edges=[]
DEBUG 2022-02-14 16:46:35,953 pending: deque([State(pc_initial=18 nstack_initial=1)])
DEBUG 2022-02-14 16:46:35,953 -------------------------Prune PHIs-------------------------
DEBUG 2022-02-14 16:46:35,953 Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=18 nstack_initial=1): {'$phi18.0'},
             State(pc_initial=20 nstack_initial=2): {'$phi20.1'},
             State(pc_initial=50 nstack_initial=1): set(),
             State(pc_initial=60 nstack_initial=0): set()})
DEBUG 2022-02-14 16:46:35,953 defmap: {'$phi18.0': State(pc_initial=0 nstack_initial=0),
 '$phi20.1': State(pc_initial=18 nstack_initial=1)}
DEBUG 2022-02-14 16:46:35,953 phismap: defaultdict(<class 'set'>,
            {'$phi18.0': {('$16get_iter.6',
                           State(pc_initial=0 nstack_initial=0)),
                          ('$phi20.0', State(pc_initial=20 nstack_initial=2))},
             '$phi20.0': {('$phi18.0', State(pc_initial=18 nstack_initial=1))},
             '$phi20.1': {('$18for_iter.2',
                           State(pc_initial=18 nstack_initial=1))},
             '$phi50.0': {('$phi20.0', State(pc_initial=20 nstack_initial=2))}})
DEBUG 2022-02-14 16:46:35,954 changing phismap: defaultdict(<class 'set'>,
            {'$phi18.0': {('$16get_iter.6',
                           State(pc_initial=0 nstack_initial=0)),
                          ('$phi18.0', State(pc_initial=18 nstack_initial=1))},
             '$phi20.0': {('$16get_iter.6',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi20.1': {('$18for_iter.2',
                           State(pc_initial=18 nstack_initial=1))},
             '$phi50.0': {('$16get_iter.6',
                           State(pc_initial=0 nstack_initial=0))}})
DEBUG 2022-02-14 16:46:35,954 changing phismap: defaultdict(<class 'set'>,
            {'$phi18.0': {('$16get_iter.6',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi20.0': {('$16get_iter.6',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi20.1': {('$18for_iter.2',
                           State(pc_initial=18 nstack_initial=1))},
             '$phi50.0': {('$16get_iter.6',
                           State(pc_initial=0 nstack_initial=0))}})
DEBUG 2022-02-14 16:46:35,954 changing phismap: defaultdict(<class 'set'>,
            {'$phi18.0': {('$16get_iter.6',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi20.0': {('$16get_iter.6',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi20.1': {('$18for_iter.2',
                           State(pc_initial=18 nstack_initial=1))},
             '$phi50.0': {('$16get_iter.6',
                           State(pc_initial=0 nstack_initial=0))}})
DEBUG 2022-02-14 16:46:35,954 keep phismap: {'$phi18.0': {('$16get_iter.6', State(pc_initial=0 nstack_initial=0))},
 '$phi20.1': {('$18for_iter.2', State(pc_initial=18 nstack_initial=1))}}
DEBUG 2022-02-14 16:46:35,955 new_out: defaultdict(<class 'dict'>,
            {State(pc_initial=0 nstack_initial=0): {'$phi18.0': '$16get_iter.6'},
             State(pc_initial=18 nstack_initial=1): {'$phi20.1': '$18for_iter.2'}})
DEBUG 2022-02-14 16:46:35,955 ----------------------DONE Prune PHIs-----------------------
DEBUG 2022-02-14 16:46:35,955 block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$2load_global.0'}), (4, {'res': '$shape4.1'}), (6, {'func': '$2load_global.0', 'args': ['$shape4.1'], 'res': '$6call_function.2'}), (8, {'value': '$6call_function.2'}), (10, {'res': '$10load_global.3'}), (12, {'res': '$n12.4'}), (14, {'func': '$10load_global.3', 'args': ['$n12.4'], 'res': '$14call_function.5'}), (16, {'value': '$14call_function.5', 'res': '$16get_iter.6'})), outgoing_phis={'$phi18.0': '$16get_iter.6'}, blockstack=(), active_try_block=None, outgoing_edgepushed={18: ('$16get_iter.6',)})
DEBUG 2022-02-14 16:46:35,955 block_infos State(pc_initial=18 nstack_initial=1):
AdaptBlockInfo(insts=((18, {'iterator': '$phi18.0', 'pair': '$18for_iter.1', 'indval': '$18for_iter.2', 'pred': '$18for_iter.3'}),), outgoing_phis={'$phi20.1': '$18for_iter.2'}, blockstack=(), active_try_block=None, outgoing_edgepushed={60: (), 20: ('$phi18.0', '$18for_iter.2')})
DEBUG 2022-02-14 16:46:35,955 block_infos State(pc_initial=20 nstack_initial=2):
AdaptBlockInfo(insts=((20, {'value': '$phi20.1'}), (22, {'res': '$shape22.2'}), (24, {'res': '$i24.3'}), (26, {'index': '$i24.3', 'target': '$shape22.2', 'res': '$26binary_subscr.4'}), (28, {'res': '$main_shape28.5'}), (30, {'res': '$30load_global.6'}), (32, {'res': '$main_shape32.7'}), (34, {'func': '$30load_global.6', 'args': ['$main_shape32.7'], 'res': '$34call_function.8'}), (36, {'res': '$n36.9'}), (38, {'lhs': '$34call_function.8', 'rhs': '$n36.9', 'res': '$38binary_subtract.10'}), (40, {'res': '$i40.11'}), (42, {'lhs': '$38binary_subtract.10', 'rhs': '$i40.11', 'res': '$42binary_add.12'}), (44, {'index': '$42binary_add.12', 'target': '$main_shape28.5', 'res': '$44binary_subscr.13'}), (46, {'lhs': '$26binary_subscr.4', 'rhs': '$44binary_subscr.13', 'res': '$46compare_op.14'}), (48, {'pred': '$46compare_op.14'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={50: ('$phi20.0',), 18: ('$phi20.0',)})
DEBUG 2022-02-14 16:46:35,955 block_infos State(pc_initial=50 nstack_initial=1):
AdaptBlockInfo(insts=((50, {'res': '$50load_global.1'}), (52, {'res': '$const52.2'}), (54, {'func': '$50load_global.1', 'args': ['$const52.2'], 'res': '$54call_function.3'}), (56, {'exc': '$54call_function.3'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG 2022-02-14 16:46:35,955 block_infos State(pc_initial=60 nstack_initial=0):
AdaptBlockInfo(insts=((60, {'res': '$const60.0'}), (62, {'retval': '$const60.0', 'castval': '$62return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG 2022-02-14 16:46:35,956 label 0:
    shape = arg(0, name=shape)               ['shape']
    main_shape = arg(1, name=main_shape)     ['main_shape']
    $2load_global.0 = global(len: <built-in function len>) ['$2load_global.0']
    n = call $2load_global.0(shape, func=$2load_global.0, args=[Var(shape, arrayobj.py:2820)], kws=(), vararg=None, target=None) ['$2load_global.0', 'n', 'shape']
    $10load_global.3 = global(range: <class 'range'>) ['$10load_global.3']
    $14call_function.5 = call $10load_global.3(n, func=$10load_global.3, args=[Var(n, arrayobj.py:2820)], kws=(), vararg=None, target=None) ['$10load_global.3', '$14call_function.5', 'n']
    $16get_iter.6 = getiter(value=$14call_function.5) ['$14call_function.5', '$16get_iter.6']
    $phi18.0 = $16get_iter.6                 ['$16get_iter.6', '$phi18.0']
    jump 18                                  []
label 18:
    $18for_iter.1 = iternext(value=$phi18.0) ['$18for_iter.1', '$phi18.0']
    $18for_iter.2 = pair_first(value=$18for_iter.1) ['$18for_iter.1', '$18for_iter.2']
    $18for_iter.3 = pair_second(value=$18for_iter.1) ['$18for_iter.1', '$18for_iter.3']
    $phi20.1 = $18for_iter.2                 ['$18for_iter.2', '$phi20.1']
    branch $18for_iter.3, 20, 60             ['$18for_iter.3']
label 20:
    i = $phi20.1                             ['$phi20.1', 'i']
    $26binary_subscr.4 = getitem(value=shape, index=i, fn=<built-in function getitem>) ['$26binary_subscr.4', 'i', 'shape']
    $30load_global.6 = global(len: <built-in function len>) ['$30load_global.6']
    $34call_function.8 = call $30load_global.6(main_shape, func=$30load_global.6, args=[Var(main_shape, arrayobj.py:2820)], kws=(), vararg=None, target=None) ['$30load_global.6', '$34call_function.8', 'main_shape']
    $38binary_subtract.10 = $34call_function.8 - n ['$34call_function.8', '$38binary_subtract.10', 'n']
    $42binary_add.12 = $38binary_subtract.10 + i ['$38binary_subtract.10', '$42binary_add.12', 'i']
    $44binary_subscr.13 = getitem(value=main_shape, index=$42binary_add.12, fn=<built-in function getitem>) ['$42binary_add.12', '$44binary_subscr.13', 'main_shape']
    $46compare_op.14 = $26binary_subscr.4 != $44binary_subscr.13 ['$26binary_subscr.4', '$44binary_subscr.13', '$46compare_op.14']
    bool48 = global(bool: <class 'bool'>)    ['bool48']
    $48pred = call bool48($46compare_op.14, func=bool48, args=(Var($46compare_op.14, arrayobj.py:2822),), kws=(), vararg=None, target=None) ['$46compare_op.14', '$48pred', 'bool48']
    branch $48pred, 50, 18                   ['$48pred']
label 50:
    $50load_global.1 = global(ValueError: <class 'ValueError'>) ['$50load_global.1']
    $const52.2 = const(str, nditer(): operands could not be broadcast together) ['$const52.2']
    $54call_function.3 = call $50load_global.1($const52.2, func=$50load_global.1, args=[Var($const52.2, arrayobj.py:2823)], kws=(), vararg=None, target=None) ['$50load_global.1', '$54call_function.3', '$const52.2']
    raise $54call_function.3                 ['$54call_function.3']
label 60:
    $const60.0 = const(NoneType, None)       ['$const60.0']
    $62return_value.1 = cast(value=$const60.0) ['$62return_value.1', '$const60.0']
    return $62return_value.1                 ['$62return_value.1']

DEBUG 2022-02-14 16:46:35,959 ==== SSA block analysis pass on 0
DEBUG 2022-02-14 16:46:35,959 Running <numba.core.ssa._GatherDefsHandler object at 0x7f720344ae50>
DEBUG 2022-02-14 16:46:35,959 on stmt: shape = arg(0, name=shape)
DEBUG 2022-02-14 16:46:35,959 on stmt: main_shape = arg(1, name=main_shape)
DEBUG 2022-02-14 16:46:35,960 on stmt: $2load_global.0 = global(len: <built-in function len>)
DEBUG 2022-02-14 16:46:35,960 on stmt: n = const(int, 1)
DEBUG 2022-02-14 16:46:35,960 on stmt: $10load_global.3 = global(range: <class 'range'>)
DEBUG 2022-02-14 16:46:35,960 on stmt: $14call_function.5 = call $10load_global.3(n, func=$10load_global.3, args=[Var(n, arrayobj.py:2820)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:46:35,960 on stmt: $16get_iter.6 = getiter(value=$14call_function.5)
DEBUG 2022-02-14 16:46:35,960 on stmt: $phi18.0 = $16get_iter.6
DEBUG 2022-02-14 16:46:35,960 on stmt: jump 18
DEBUG 2022-02-14 16:46:35,960 ==== SSA block analysis pass on 18
DEBUG 2022-02-14 16:46:35,960 Running <numba.core.ssa._GatherDefsHandler object at 0x7f720344ae50>
DEBUG 2022-02-14 16:46:35,960 on stmt: $18for_iter.1 = iternext(value=$phi18.0)
DEBUG 2022-02-14 16:46:35,960 on stmt: $18for_iter.2 = pair_first(value=$18for_iter.1)
DEBUG 2022-02-14 16:46:35,960 on stmt: $18for_iter.3 = pair_second(value=$18for_iter.1)
DEBUG 2022-02-14 16:46:35,960 on stmt: $phi20.1 = $18for_iter.2
DEBUG 2022-02-14 16:46:35,960 on stmt: branch $18for_iter.3, 20, 60
DEBUG 2022-02-14 16:46:35,960 ==== SSA block analysis pass on 20
DEBUG 2022-02-14 16:46:35,960 Running <numba.core.ssa._GatherDefsHandler object at 0x7f720344ae50>
DEBUG 2022-02-14 16:46:35,960 on stmt: i = $phi20.1
DEBUG 2022-02-14 16:46:35,960 on stmt: $26binary_subscr.4 = getitem(value=shape, index=i, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:46:35,960 on stmt: $30load_global.6 = global(len: <built-in function len>)
DEBUG 2022-02-14 16:46:35,960 on stmt: $34call_function.8 = const(int, 1)
DEBUG 2022-02-14 16:46:35,960 on stmt: $38binary_subtract.10 = $34call_function.8 - n
DEBUG 2022-02-14 16:46:35,960 on stmt: $42binary_add.12 = $38binary_subtract.10 + i
DEBUG 2022-02-14 16:46:35,961 on stmt: $44binary_subscr.13 = getitem(value=main_shape, index=$42binary_add.12, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:46:35,961 on stmt: $46compare_op.14 = $26binary_subscr.4 != $44binary_subscr.13
DEBUG 2022-02-14 16:46:35,961 on stmt: bool48 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:46:35,961 on stmt: $48pred = call bool48($46compare_op.14, func=bool48, args=(Var($46compare_op.14, arrayobj.py:2822),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:46:35,961 on stmt: branch $48pred, 50, 18
DEBUG 2022-02-14 16:46:35,961 ==== SSA block analysis pass on 50
DEBUG 2022-02-14 16:46:35,961 Running <numba.core.ssa._GatherDefsHandler object at 0x7f720344ae50>
DEBUG 2022-02-14 16:46:35,961 on stmt: $50load_global.1 = global(ValueError: <class 'ValueError'>)
DEBUG 2022-02-14 16:46:35,961 on stmt: $const52.2 = const(str, nditer(): operands could not be broadcast together)
DEBUG 2022-02-14 16:46:35,961 on stmt: $54call_function.3 = call $50load_global.1($const52.2, func=$50load_global.1, args=[Var($const52.2, arrayobj.py:2823)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:46:35,961 on stmt: <static> raise <class 'ValueError'>('nditer(): operands could not be broadcast together')
DEBUG 2022-02-14 16:46:35,961 ==== SSA block analysis pass on 60
DEBUG 2022-02-14 16:46:35,961 Running <numba.core.ssa._GatherDefsHandler object at 0x7f720344ae50>
DEBUG 2022-02-14 16:46:35,961 on stmt: $const60.0 = const(NoneType, None)
DEBUG 2022-02-14 16:46:35,961 on stmt: $62return_value.1 = cast(value=$const60.0)
DEBUG 2022-02-14 16:46:35,961 on stmt: return $62return_value.1
DEBUG 2022-02-14 16:46:35,962 defs defaultdict(<class 'list'>,
            {'$10load_global.3': [<numba.core.ir.Assign object at 0x7f720344fb20>],
             '$14call_function.5': [<numba.core.ir.Assign object at 0x7f720344f1f0>],
             '$16get_iter.6': [<numba.core.ir.Assign object at 0x7f720344f0d0>],
             '$18for_iter.1': [<numba.core.ir.Assign object at 0x7f720344aaf0>],
             '$18for_iter.2': [<numba.core.ir.Assign object at 0x7f720344e400>],
             '$18for_iter.3': [<numba.core.ir.Assign object at 0x7f720344e520>],
             '$26binary_subscr.4': [<numba.core.ir.Assign object at 0x7f720344ebe0>],
             '$2load_global.0': [<numba.core.ir.Assign object at 0x7f720344ff70>],
             '$30load_global.6': [<numba.core.ir.Assign object at 0x7f720344ee50>],
             '$34call_function.8': [<numba.core.ir.Assign object at 0x7f720345e190>],
             '$38binary_subtract.10': [<numba.core.ir.Assign object at 0x7f720345e400>],
             '$42binary_add.12': [<numba.core.ir.Assign object at 0x7f720345e6a0>],
             '$44binary_subscr.13': [<numba.core.ir.Assign object at 0x7f720345e820>],
             '$46compare_op.14': [<numba.core.ir.Assign object at 0x7f720345e9a0>],
             '$48pred': [<numba.core.ir.Assign object at 0x7f720345ec10>],
             '$50load_global.1': [<numba.core.ir.Assign object at 0x7f720345e2e0>],
             '$54call_function.3': [<numba.core.ir.Assign object at 0x7f720345efd0>],
             '$62return_value.1': [<numba.core.ir.Assign object at 0x7f7203460430>],
             '$const52.2': [<numba.core.ir.Assign object at 0x7f720345edf0>],
             '$const60.0': [<numba.core.ir.Assign object at 0x7f72034602b0>],
             '$phi18.0': [<numba.core.ir.Assign object at 0x7f720344fc10>],
             '$phi20.1': [<numba.core.ir.Assign object at 0x7f720344ad00>],
             'bool48': [<numba.core.ir.Assign object at 0x7f720345eaf0>],
             'i': [<numba.core.ir.Assign object at 0x7f720344e7f0>],
             'main_shape': [<numba.core.ir.Assign object at 0x7f720344fdf0>],
             'n': [<numba.core.ir.Assign object at 0x7f720344e2b0>],
             'shape': [<numba.core.ir.Assign object at 0x7f720344fcd0>]})
DEBUG 2022-02-14 16:46:35,962 SSA violators set()
DEBUG 2022-02-14 16:46:36,098 bytecode dump:
>          0	NOP(arg=None, lineno=1064)
           2	LOAD_FAST(arg=0, lineno=1064)
           4	LOAD_ATTR(arg=0, lineno=1064)
           6	STORE_FAST(arg=2, lineno=1064)
           8	LOAD_FAST(arg=0, lineno=1065)
          10	LOAD_ATTR(arg=1, lineno=1065)
          12	STORE_FAST(arg=3, lineno=1065)
          14	LOAD_FAST(arg=1, lineno=1066)
          16	LOAD_ATTR(arg=0, lineno=1066)
          18	STORE_FAST(arg=4, lineno=1066)
          20	LOAD_FAST(arg=1, lineno=1067)
          22	LOAD_ATTR(arg=1, lineno=1067)
          24	STORE_FAST(arg=5, lineno=1067)
          26	LOAD_FAST(arg=4, lineno=1068)
          28	POP_JUMP_IF_TRUE(arg=42, lineno=1068)
          30	LOAD_FAST(arg=5, lineno=1068)
          32	POP_JUMP_IF_TRUE(arg=42, lineno=1068)
          34	LOAD_GLOBAL(arg=2, lineno=1069)
          36	LOAD_CONST(arg=1, lineno=1069)
          38	CALL_FUNCTION(arg=1, lineno=1069)
          40	RAISE_VARARGS(arg=1, lineno=1069)
>         42	LOAD_GLOBAL(arg=3, lineno=1070)
          44	LOAD_FAST(arg=4, lineno=1070)
          46	CALL_FUNCTION(arg=1, lineno=1070)
          48	LOAD_GLOBAL(arg=3, lineno=1070)
          50	LOAD_FAST(arg=5, lineno=1070)
          52	CALL_FUNCTION(arg=1, lineno=1070)
          54	COMPARE_OP(arg=5, lineno=1070)
          56	POP_JUMP_IF_FALSE(arg=126, lineno=1070)
          58	LOAD_FAST(arg=4, lineno=1072)
          60	POP_JUMP_IF_TRUE(arg=72, lineno=1072)
          62	LOAD_GLOBAL(arg=4, lineno=1073)
          64	LOAD_GLOBAL(arg=5, lineno=1073)
          66	LOAD_GLOBAL(arg=5, lineno=1073)
          68	CALL_FUNCTION(arg=2, lineno=1073)
          70	RETURN_VALUE(arg=None, lineno=1073)
>         72	LOAD_FAST(arg=5, lineno=1074)
          74	LOAD_FAST(arg=4, lineno=1074)
          76	BINARY_TRUE_DIVIDE(arg=None, lineno=1074)
          78	STORE_FAST(arg=6, lineno=1074)
          80	LOAD_FAST(arg=4, lineno=1075)
          82	LOAD_FAST(arg=5, lineno=1075)
          84	LOAD_FAST(arg=6, lineno=1075)
          86	BINARY_MULTIPLY(arg=None, lineno=1075)
          88	BINARY_ADD(arg=None, lineno=1075)
          90	STORE_FAST(arg=7, lineno=1075)
          92	LOAD_GLOBAL(arg=4, lineno=1076)
          94	LOAD_FAST(arg=2, lineno=1077)
          96	LOAD_FAST(arg=3, lineno=1077)
          98	LOAD_FAST(arg=6, lineno=1077)
         100	BINARY_MULTIPLY(arg=None, lineno=1077)
         102	BINARY_ADD(arg=None, lineno=1077)
         104	LOAD_FAST(arg=7, lineno=1077)
         106	BINARY_TRUE_DIVIDE(arg=None, lineno=1077)
         108	LOAD_FAST(arg=3, lineno=1078)
         110	LOAD_FAST(arg=2, lineno=1078)
         112	LOAD_FAST(arg=6, lineno=1078)
         114	BINARY_MULTIPLY(arg=None, lineno=1078)
         116	BINARY_SUBTRACT(arg=None, lineno=1078)
         118	LOAD_FAST(arg=7, lineno=1078)
         120	BINARY_TRUE_DIVIDE(arg=None, lineno=1078)
         122	CALL_FUNCTION(arg=2, lineno=1076)
         124	RETURN_VALUE(arg=None, lineno=1076)
>        126	LOAD_FAST(arg=5, lineno=1081)
         128	POP_JUMP_IF_TRUE(arg=140, lineno=1081)
         130	LOAD_GLOBAL(arg=4, lineno=1082)
         132	LOAD_GLOBAL(arg=5, lineno=1082)
         134	LOAD_GLOBAL(arg=5, lineno=1082)
         136	CALL_FUNCTION(arg=2, lineno=1082)
         138	RETURN_VALUE(arg=None, lineno=1082)
>        140	LOAD_FAST(arg=4, lineno=1083)
         142	LOAD_FAST(arg=5, lineno=1083)
         144	BINARY_TRUE_DIVIDE(arg=None, lineno=1083)
         146	STORE_FAST(arg=6, lineno=1083)
         148	LOAD_FAST(arg=4, lineno=1084)
         150	LOAD_FAST(arg=6, lineno=1084)
         152	BINARY_MULTIPLY(arg=None, lineno=1084)
         154	LOAD_FAST(arg=5, lineno=1084)
         156	BINARY_ADD(arg=None, lineno=1084)
         158	STORE_FAST(arg=7, lineno=1084)
         160	LOAD_GLOBAL(arg=4, lineno=1085)
         162	LOAD_FAST(arg=0, lineno=1086)
         164	LOAD_ATTR(arg=0, lineno=1086)
         166	LOAD_FAST(arg=6, lineno=1086)
         168	BINARY_MULTIPLY(arg=None, lineno=1086)
         170	LOAD_FAST(arg=0, lineno=1086)
         172	LOAD_ATTR(arg=1, lineno=1086)
         174	BINARY_ADD(arg=None, lineno=1086)
         176	LOAD_FAST(arg=7, lineno=1086)
         178	BINARY_TRUE_DIVIDE(arg=None, lineno=1086)
         180	LOAD_FAST(arg=0, lineno=1087)
         182	LOAD_ATTR(arg=1, lineno=1087)
         184	LOAD_FAST(arg=6, lineno=1087)
         186	BINARY_MULTIPLY(arg=None, lineno=1087)
         188	LOAD_FAST(arg=0, lineno=1087)
         190	LOAD_ATTR(arg=0, lineno=1087)
         192	BINARY_SUBTRACT(arg=None, lineno=1087)
         194	LOAD_FAST(arg=7, lineno=1087)
         196	BINARY_TRUE_DIVIDE(arg=None, lineno=1087)
         198	CALL_FUNCTION(arg=2, lineno=1085)
         200	RETURN_VALUE(arg=None, lineno=1085)
         202	LOAD_CONST(arg=0, lineno=1085)
         204	RETURN_VALUE(arg=None, lineno=1085)
DEBUG 2022-02-14 16:46:36,098 pending: deque([State(pc_initial=0 nstack_initial=0)])
DEBUG 2022-02-14 16:46:36,098 stack: []
DEBUG 2022-02-14 16:46:36,098 dispatch pc=0, inst=NOP(arg=None, lineno=1064)
DEBUG 2022-02-14 16:46:36,098 stack []
DEBUG 2022-02-14 16:46:36,098 dispatch pc=2, inst=LOAD_FAST(arg=0, lineno=1064)
DEBUG 2022-02-14 16:46:36,098 stack []
DEBUG 2022-02-14 16:46:36,098 dispatch pc=4, inst=LOAD_ATTR(arg=0, lineno=1064)
DEBUG 2022-02-14 16:46:36,098 stack ['$a2.0']
DEBUG 2022-02-14 16:46:36,098 dispatch pc=6, inst=STORE_FAST(arg=2, lineno=1064)
DEBUG 2022-02-14 16:46:36,098 stack ['$4load_attr.1']
DEBUG 2022-02-14 16:46:36,098 dispatch pc=8, inst=LOAD_FAST(arg=0, lineno=1065)
DEBUG 2022-02-14 16:46:36,098 stack []
DEBUG 2022-02-14 16:46:36,098 dispatch pc=10, inst=LOAD_ATTR(arg=1, lineno=1065)
DEBUG 2022-02-14 16:46:36,099 stack ['$a8.2']
DEBUG 2022-02-14 16:46:36,099 dispatch pc=12, inst=STORE_FAST(arg=3, lineno=1065)
DEBUG 2022-02-14 16:46:36,099 stack ['$10load_attr.3']
DEBUG 2022-02-14 16:46:36,099 dispatch pc=14, inst=LOAD_FAST(arg=1, lineno=1066)
DEBUG 2022-02-14 16:46:36,099 stack []
DEBUG 2022-02-14 16:46:36,099 dispatch pc=16, inst=LOAD_ATTR(arg=0, lineno=1066)
DEBUG 2022-02-14 16:46:36,099 stack ['$b14.4']
DEBUG 2022-02-14 16:46:36,099 dispatch pc=18, inst=STORE_FAST(arg=4, lineno=1066)
DEBUG 2022-02-14 16:46:36,099 stack ['$16load_attr.5']
DEBUG 2022-02-14 16:46:36,099 dispatch pc=20, inst=LOAD_FAST(arg=1, lineno=1067)
DEBUG 2022-02-14 16:46:36,099 stack []
DEBUG 2022-02-14 16:46:36,099 dispatch pc=22, inst=LOAD_ATTR(arg=1, lineno=1067)
DEBUG 2022-02-14 16:46:36,099 stack ['$b20.6']
DEBUG 2022-02-14 16:46:36,099 dispatch pc=24, inst=STORE_FAST(arg=5, lineno=1067)
DEBUG 2022-02-14 16:46:36,100 stack ['$22load_attr.7']
DEBUG 2022-02-14 16:46:36,100 dispatch pc=26, inst=LOAD_FAST(arg=4, lineno=1068)
DEBUG 2022-02-14 16:46:36,100 stack []
DEBUG 2022-02-14 16:46:36,100 dispatch pc=28, inst=POP_JUMP_IF_TRUE(arg=42, lineno=1068)
DEBUG 2022-02-14 16:46:36,100 stack ['$breal26.8']
DEBUG 2022-02-14 16:46:36,100 end state. edges=[Edge(pc=30, stack=(), blockstack=(), npush=0), Edge(pc=42, stack=(), blockstack=(), npush=0)]
DEBUG 2022-02-14 16:46:36,100 pending: deque([State(pc_initial=30 nstack_initial=0), State(pc_initial=42 nstack_initial=0)])
DEBUG 2022-02-14 16:46:36,100 stack: []
DEBUG 2022-02-14 16:46:36,100 dispatch pc=30, inst=LOAD_FAST(arg=5, lineno=1068)
DEBUG 2022-02-14 16:46:36,100 stack []
DEBUG 2022-02-14 16:46:36,100 dispatch pc=32, inst=POP_JUMP_IF_TRUE(arg=42, lineno=1068)
DEBUG 2022-02-14 16:46:36,100 stack ['$bimag30.0']
DEBUG 2022-02-14 16:46:36,100 end state. edges=[Edge(pc=34, stack=(), blockstack=(), npush=0), Edge(pc=42, stack=(), blockstack=(), npush=0)]
DEBUG 2022-02-14 16:46:36,100 pending: deque([State(pc_initial=42 nstack_initial=0), State(pc_initial=34 nstack_initial=0), State(pc_initial=42 nstack_initial=0)])
DEBUG 2022-02-14 16:46:36,100 stack: []
DEBUG 2022-02-14 16:46:36,100 dispatch pc=42, inst=LOAD_GLOBAL(arg=3, lineno=1070)
DEBUG 2022-02-14 16:46:36,100 stack []
DEBUG 2022-02-14 16:46:36,100 dispatch pc=44, inst=LOAD_FAST(arg=4, lineno=1070)
DEBUG 2022-02-14 16:46:36,100 stack ['$42load_global.0']
DEBUG 2022-02-14 16:46:36,101 dispatch pc=46, inst=CALL_FUNCTION(arg=1, lineno=1070)
DEBUG 2022-02-14 16:46:36,101 stack ['$42load_global.0', '$breal44.1']
DEBUG 2022-02-14 16:46:36,101 dispatch pc=48, inst=LOAD_GLOBAL(arg=3, lineno=1070)
DEBUG 2022-02-14 16:46:36,101 stack ['$46call_function.2']
DEBUG 2022-02-14 16:46:36,101 dispatch pc=50, inst=LOAD_FAST(arg=5, lineno=1070)
DEBUG 2022-02-14 16:46:36,101 stack ['$46call_function.2', '$48load_global.3']
DEBUG 2022-02-14 16:46:36,101 dispatch pc=52, inst=CALL_FUNCTION(arg=1, lineno=1070)
DEBUG 2022-02-14 16:46:36,101 stack ['$46call_function.2', '$48load_global.3', '$bimag50.4']
DEBUG 2022-02-14 16:46:36,101 dispatch pc=54, inst=COMPARE_OP(arg=5, lineno=1070)
DEBUG 2022-02-14 16:46:36,101 stack ['$46call_function.2', '$52call_function.5']
DEBUG 2022-02-14 16:46:36,101 dispatch pc=56, inst=POP_JUMP_IF_FALSE(arg=126, lineno=1070)
DEBUG 2022-02-14 16:46:36,101 stack ['$54compare_op.6']
DEBUG 2022-02-14 16:46:36,101 end state. edges=[Edge(pc=58, stack=(), blockstack=(), npush=0), Edge(pc=126, stack=(), blockstack=(), npush=0)]
DEBUG 2022-02-14 16:46:36,102 pending: deque([State(pc_initial=34 nstack_initial=0), State(pc_initial=42 nstack_initial=0), State(pc_initial=58 nstack_initial=0), State(pc_initial=126 nstack_initial=0)])
DEBUG 2022-02-14 16:46:36,102 stack: []
DEBUG 2022-02-14 16:46:36,102 dispatch pc=34, inst=LOAD_GLOBAL(arg=2, lineno=1069)
DEBUG 2022-02-14 16:46:36,102 stack []
DEBUG 2022-02-14 16:46:36,102 dispatch pc=36, inst=LOAD_CONST(arg=1, lineno=1069)
DEBUG 2022-02-14 16:46:36,102 stack ['$34load_global.0']
DEBUG 2022-02-14 16:46:36,102 dispatch pc=38, inst=CALL_FUNCTION(arg=1, lineno=1069)
DEBUG 2022-02-14 16:46:36,102 stack ['$34load_global.0', '$const36.1']
DEBUG 2022-02-14 16:46:36,102 dispatch pc=40, inst=RAISE_VARARGS(arg=1, lineno=1069)
DEBUG 2022-02-14 16:46:36,102 stack ['$38call_function.2']
DEBUG 2022-02-14 16:46:36,102 end state. edges=[]
DEBUG 2022-02-14 16:46:36,102 pending: deque([State(pc_initial=42 nstack_initial=0), State(pc_initial=58 nstack_initial=0), State(pc_initial=126 nstack_initial=0)])
DEBUG 2022-02-14 16:46:36,102 pending: deque([State(pc_initial=58 nstack_initial=0), State(pc_initial=126 nstack_initial=0)])
DEBUG 2022-02-14 16:46:36,102 stack: []
DEBUG 2022-02-14 16:46:36,102 dispatch pc=58, inst=LOAD_FAST(arg=4, lineno=1072)
DEBUG 2022-02-14 16:46:36,102 stack []
DEBUG 2022-02-14 16:46:36,102 dispatch pc=60, inst=POP_JUMP_IF_TRUE(arg=72, lineno=1072)
DEBUG 2022-02-14 16:46:36,103 stack ['$breal58.0']
DEBUG 2022-02-14 16:46:36,103 end state. edges=[Edge(pc=62, stack=(), blockstack=(), npush=0), Edge(pc=72, stack=(), blockstack=(), npush=0)]
DEBUG 2022-02-14 16:46:36,103 pending: deque([State(pc_initial=126 nstack_initial=0), State(pc_initial=62 nstack_initial=0), State(pc_initial=72 nstack_initial=0)])
DEBUG 2022-02-14 16:46:36,103 stack: []
DEBUG 2022-02-14 16:46:36,103 dispatch pc=126, inst=LOAD_FAST(arg=5, lineno=1081)
DEBUG 2022-02-14 16:46:36,103 stack []
DEBUG 2022-02-14 16:46:36,103 dispatch pc=128, inst=POP_JUMP_IF_TRUE(arg=140, lineno=1081)
DEBUG 2022-02-14 16:46:36,103 stack ['$bimag126.0']
DEBUG 2022-02-14 16:46:36,103 end state. edges=[Edge(pc=130, stack=(), blockstack=(), npush=0), Edge(pc=140, stack=(), blockstack=(), npush=0)]
DEBUG 2022-02-14 16:46:36,103 pending: deque([State(pc_initial=62 nstack_initial=0), State(pc_initial=72 nstack_initial=0), State(pc_initial=130 nstack_initial=0), State(pc_initial=140 nstack_initial=0)])
DEBUG 2022-02-14 16:46:36,103 stack: []
DEBUG 2022-02-14 16:46:36,103 dispatch pc=62, inst=LOAD_GLOBAL(arg=4, lineno=1073)
DEBUG 2022-02-14 16:46:36,103 stack []
DEBUG 2022-02-14 16:46:36,103 dispatch pc=64, inst=LOAD_GLOBAL(arg=5, lineno=1073)
DEBUG 2022-02-14 16:46:36,103 stack ['$62load_global.0']
DEBUG 2022-02-14 16:46:36,103 dispatch pc=66, inst=LOAD_GLOBAL(arg=5, lineno=1073)
DEBUG 2022-02-14 16:46:36,103 stack ['$62load_global.0', '$64load_global.1']
DEBUG 2022-02-14 16:46:36,104 dispatch pc=68, inst=CALL_FUNCTION(arg=2, lineno=1073)
DEBUG 2022-02-14 16:46:36,104 stack ['$62load_global.0', '$64load_global.1', '$66load_global.2']
DEBUG 2022-02-14 16:46:36,104 dispatch pc=70, inst=RETURN_VALUE(arg=None, lineno=1073)
DEBUG 2022-02-14 16:46:36,104 stack ['$68call_function.3']
DEBUG 2022-02-14 16:46:36,104 end state. edges=[]
DEBUG 2022-02-14 16:46:36,104 pending: deque([State(pc_initial=72 nstack_initial=0), State(pc_initial=130 nstack_initial=0), State(pc_initial=140 nstack_initial=0)])
DEBUG 2022-02-14 16:46:36,104 stack: []
DEBUG 2022-02-14 16:46:36,104 dispatch pc=72, inst=LOAD_FAST(arg=5, lineno=1074)
DEBUG 2022-02-14 16:46:36,104 stack []
DEBUG 2022-02-14 16:46:36,104 dispatch pc=74, inst=LOAD_FAST(arg=4, lineno=1074)
DEBUG 2022-02-14 16:46:36,104 stack ['$bimag72.0']
DEBUG 2022-02-14 16:46:36,104 dispatch pc=76, inst=BINARY_TRUE_DIVIDE(arg=None, lineno=1074)
DEBUG 2022-02-14 16:46:36,104 stack ['$bimag72.0', '$breal74.1']
DEBUG 2022-02-14 16:46:36,104 dispatch pc=78, inst=STORE_FAST(arg=6, lineno=1074)
DEBUG 2022-02-14 16:46:36,104 stack ['$76binary_true_divide.2']
DEBUG 2022-02-14 16:46:36,104 dispatch pc=80, inst=LOAD_FAST(arg=4, lineno=1075)
DEBUG 2022-02-14 16:46:36,104 stack []
DEBUG 2022-02-14 16:46:36,104 dispatch pc=82, inst=LOAD_FAST(arg=5, lineno=1075)
DEBUG 2022-02-14 16:46:36,104 stack ['$breal80.3']
DEBUG 2022-02-14 16:46:36,104 dispatch pc=84, inst=LOAD_FAST(arg=6, lineno=1075)
DEBUG 2022-02-14 16:46:36,104 stack ['$breal80.3', '$bimag82.4']
DEBUG 2022-02-14 16:46:36,105 dispatch pc=86, inst=BINARY_MULTIPLY(arg=None, lineno=1075)
DEBUG 2022-02-14 16:46:36,105 stack ['$breal80.3', '$bimag82.4', '$ratio84.5']
DEBUG 2022-02-14 16:46:36,105 dispatch pc=88, inst=BINARY_ADD(arg=None, lineno=1075)
DEBUG 2022-02-14 16:46:36,105 stack ['$breal80.3', '$86binary_multiply.6']
DEBUG 2022-02-14 16:46:36,105 dispatch pc=90, inst=STORE_FAST(arg=7, lineno=1075)
DEBUG 2022-02-14 16:46:36,105 stack ['$88binary_add.7']
DEBUG 2022-02-14 16:46:36,105 dispatch pc=92, inst=LOAD_GLOBAL(arg=4, lineno=1076)
DEBUG 2022-02-14 16:46:36,105 stack []
DEBUG 2022-02-14 16:46:36,105 dispatch pc=94, inst=LOAD_FAST(arg=2, lineno=1077)
DEBUG 2022-02-14 16:46:36,105 stack ['$92load_global.8']
DEBUG 2022-02-14 16:46:36,105 dispatch pc=96, inst=LOAD_FAST(arg=3, lineno=1077)
DEBUG 2022-02-14 16:46:36,105 stack ['$92load_global.8', '$areal94.9']
DEBUG 2022-02-14 16:46:36,105 dispatch pc=98, inst=LOAD_FAST(arg=6, lineno=1077)
DEBUG 2022-02-14 16:46:36,105 stack ['$92load_global.8', '$areal94.9', '$aimag96.10']
DEBUG 2022-02-14 16:46:36,105 dispatch pc=100, inst=BINARY_MULTIPLY(arg=None, lineno=1077)
DEBUG 2022-02-14 16:46:36,105 stack ['$92load_global.8', '$areal94.9', '$aimag96.10', '$ratio98.11']
DEBUG 2022-02-14 16:46:36,105 dispatch pc=102, inst=BINARY_ADD(arg=None, lineno=1077)
DEBUG 2022-02-14 16:46:36,105 stack ['$92load_global.8', '$areal94.9', '$100binary_multiply.12']
DEBUG 2022-02-14 16:46:36,106 dispatch pc=104, inst=LOAD_FAST(arg=7, lineno=1077)
DEBUG 2022-02-14 16:46:36,106 stack ['$92load_global.8', '$102binary_add.13']
DEBUG 2022-02-14 16:46:36,106 dispatch pc=106, inst=BINARY_TRUE_DIVIDE(arg=None, lineno=1077)
DEBUG 2022-02-14 16:46:36,106 stack ['$92load_global.8', '$102binary_add.13', '$denom104.14']
DEBUG 2022-02-14 16:46:36,106 dispatch pc=108, inst=LOAD_FAST(arg=3, lineno=1078)
DEBUG 2022-02-14 16:46:36,106 stack ['$92load_global.8', '$106binary_true_divide.15']
DEBUG 2022-02-14 16:46:36,106 dispatch pc=110, inst=LOAD_FAST(arg=2, lineno=1078)
DEBUG 2022-02-14 16:46:36,106 stack ['$92load_global.8', '$106binary_true_divide.15', '$aimag108.16']
DEBUG 2022-02-14 16:46:36,106 dispatch pc=112, inst=LOAD_FAST(arg=6, lineno=1078)
DEBUG 2022-02-14 16:46:36,106 stack ['$92load_global.8', '$106binary_true_divide.15', '$aimag108.16', '$areal110.17']
DEBUG 2022-02-14 16:46:36,106 dispatch pc=114, inst=BINARY_MULTIPLY(arg=None, lineno=1078)
DEBUG 2022-02-14 16:46:36,106 stack ['$92load_global.8', '$106binary_true_divide.15', '$aimag108.16', '$areal110.17', '$ratio112.18']
DEBUG 2022-02-14 16:46:36,106 dispatch pc=116, inst=BINARY_SUBTRACT(arg=None, lineno=1078)
DEBUG 2022-02-14 16:46:36,106 stack ['$92load_global.8', '$106binary_true_divide.15', '$aimag108.16', '$114binary_multiply.19']
DEBUG 2022-02-14 16:46:36,106 dispatch pc=118, inst=LOAD_FAST(arg=7, lineno=1078)
DEBUG 2022-02-14 16:46:36,106 stack ['$92load_global.8', '$106binary_true_divide.15', '$116binary_subtract.20']
DEBUG 2022-02-14 16:46:36,106 dispatch pc=120, inst=BINARY_TRUE_DIVIDE(arg=None, lineno=1078)
DEBUG 2022-02-14 16:46:36,107 stack ['$92load_global.8', '$106binary_true_divide.15', '$116binary_subtract.20', '$denom118.21']
DEBUG 2022-02-14 16:46:36,107 dispatch pc=122, inst=CALL_FUNCTION(arg=2, lineno=1076)
DEBUG 2022-02-14 16:46:36,107 stack ['$92load_global.8', '$106binary_true_divide.15', '$120binary_true_divide.22']
DEBUG 2022-02-14 16:46:36,107 dispatch pc=124, inst=RETURN_VALUE(arg=None, lineno=1076)
DEBUG 2022-02-14 16:46:36,107 stack ['$122call_function.23']
DEBUG 2022-02-14 16:46:36,107 end state. edges=[]
DEBUG 2022-02-14 16:46:36,107 pending: deque([State(pc_initial=130 nstack_initial=0), State(pc_initial=140 nstack_initial=0)])
DEBUG 2022-02-14 16:46:36,107 stack: []
DEBUG 2022-02-14 16:46:36,107 dispatch pc=130, inst=LOAD_GLOBAL(arg=4, lineno=1082)
DEBUG 2022-02-14 16:46:36,107 stack []
DEBUG 2022-02-14 16:46:36,107 dispatch pc=132, inst=LOAD_GLOBAL(arg=5, lineno=1082)
DEBUG 2022-02-14 16:46:36,107 stack ['$130load_global.0']
DEBUG 2022-02-14 16:46:36,107 dispatch pc=134, inst=LOAD_GLOBAL(arg=5, lineno=1082)
DEBUG 2022-02-14 16:46:36,107 stack ['$130load_global.0', '$132load_global.1']
DEBUG 2022-02-14 16:46:36,107 dispatch pc=136, inst=CALL_FUNCTION(arg=2, lineno=1082)
DEBUG 2022-02-14 16:46:36,107 stack ['$130load_global.0', '$132load_global.1', '$134load_global.2']
DEBUG 2022-02-14 16:46:36,107 dispatch pc=138, inst=RETURN_VALUE(arg=None, lineno=1082)
DEBUG 2022-02-14 16:46:36,107 stack ['$136call_function.3']
DEBUG 2022-02-14 16:46:36,108 end state. edges=[]
DEBUG 2022-02-14 16:46:36,108 pending: deque([State(pc_initial=140 nstack_initial=0)])
DEBUG 2022-02-14 16:46:36,108 stack: []
DEBUG 2022-02-14 16:46:36,108 dispatch pc=140, inst=LOAD_FAST(arg=4, lineno=1083)
DEBUG 2022-02-14 16:46:36,108 stack []
DEBUG 2022-02-14 16:46:36,108 dispatch pc=142, inst=LOAD_FAST(arg=5, lineno=1083)
DEBUG 2022-02-14 16:46:36,108 stack ['$breal140.0']
DEBUG 2022-02-14 16:46:36,108 dispatch pc=144, inst=BINARY_TRUE_DIVIDE(arg=None, lineno=1083)
DEBUG 2022-02-14 16:46:36,108 stack ['$breal140.0', '$bimag142.1']
DEBUG 2022-02-14 16:46:36,108 dispatch pc=146, inst=STORE_FAST(arg=6, lineno=1083)
DEBUG 2022-02-14 16:46:36,108 stack ['$144binary_true_divide.2']
DEBUG 2022-02-14 16:46:36,108 dispatch pc=148, inst=LOAD_FAST(arg=4, lineno=1084)
DEBUG 2022-02-14 16:46:36,108 stack []
DEBUG 2022-02-14 16:46:36,108 dispatch pc=150, inst=LOAD_FAST(arg=6, lineno=1084)
DEBUG 2022-02-14 16:46:36,108 stack ['$breal148.3']
DEBUG 2022-02-14 16:46:36,108 dispatch pc=152, inst=BINARY_MULTIPLY(arg=None, lineno=1084)
DEBUG 2022-02-14 16:46:36,108 stack ['$breal148.3', '$ratio150.4']
DEBUG 2022-02-14 16:46:36,108 dispatch pc=154, inst=LOAD_FAST(arg=5, lineno=1084)
DEBUG 2022-02-14 16:46:36,109 stack ['$152binary_multiply.5']
DEBUG 2022-02-14 16:46:36,109 dispatch pc=156, inst=BINARY_ADD(arg=None, lineno=1084)
DEBUG 2022-02-14 16:46:36,109 stack ['$152binary_multiply.5', '$bimag154.6']
DEBUG 2022-02-14 16:46:36,109 dispatch pc=158, inst=STORE_FAST(arg=7, lineno=1084)
DEBUG 2022-02-14 16:46:36,109 stack ['$156binary_add.7']
DEBUG 2022-02-14 16:46:36,109 dispatch pc=160, inst=LOAD_GLOBAL(arg=4, lineno=1085)
DEBUG 2022-02-14 16:46:36,109 stack []
DEBUG 2022-02-14 16:46:36,109 dispatch pc=162, inst=LOAD_FAST(arg=0, lineno=1086)
DEBUG 2022-02-14 16:46:36,109 stack ['$160load_global.8']
DEBUG 2022-02-14 16:46:36,109 dispatch pc=164, inst=LOAD_ATTR(arg=0, lineno=1086)
DEBUG 2022-02-14 16:46:36,109 stack ['$160load_global.8', '$a162.9']
DEBUG 2022-02-14 16:46:36,109 dispatch pc=166, inst=LOAD_FAST(arg=6, lineno=1086)
DEBUG 2022-02-14 16:46:36,109 stack ['$160load_global.8', '$164load_attr.10']
DEBUG 2022-02-14 16:46:36,109 dispatch pc=168, inst=BINARY_MULTIPLY(arg=None, lineno=1086)
DEBUG 2022-02-14 16:46:36,109 stack ['$160load_global.8', '$164load_attr.10', '$ratio166.11']
DEBUG 2022-02-14 16:46:36,109 dispatch pc=170, inst=LOAD_FAST(arg=0, lineno=1086)
DEBUG 2022-02-14 16:46:36,109 stack ['$160load_global.8', '$168binary_multiply.12']
DEBUG 2022-02-14 16:46:36,109 dispatch pc=172, inst=LOAD_ATTR(arg=1, lineno=1086)
DEBUG 2022-02-14 16:46:36,110 stack ['$160load_global.8', '$168binary_multiply.12', '$a170.13']
DEBUG 2022-02-14 16:46:36,110 dispatch pc=174, inst=BINARY_ADD(arg=None, lineno=1086)
DEBUG 2022-02-14 16:46:36,110 stack ['$160load_global.8', '$168binary_multiply.12', '$172load_attr.14']
DEBUG 2022-02-14 16:46:36,110 dispatch pc=176, inst=LOAD_FAST(arg=7, lineno=1086)
DEBUG 2022-02-14 16:46:36,110 stack ['$160load_global.8', '$174binary_add.15']
DEBUG 2022-02-14 16:46:36,110 dispatch pc=178, inst=BINARY_TRUE_DIVIDE(arg=None, lineno=1086)
DEBUG 2022-02-14 16:46:36,110 stack ['$160load_global.8', '$174binary_add.15', '$denom176.16']
DEBUG 2022-02-14 16:46:36,110 dispatch pc=180, inst=LOAD_FAST(arg=0, lineno=1087)
DEBUG 2022-02-14 16:46:36,110 stack ['$160load_global.8', '$178binary_true_divide.17']
DEBUG 2022-02-14 16:46:36,110 dispatch pc=182, inst=LOAD_ATTR(arg=1, lineno=1087)
DEBUG 2022-02-14 16:46:36,110 stack ['$160load_global.8', '$178binary_true_divide.17', '$a180.18']
DEBUG 2022-02-14 16:46:36,110 dispatch pc=184, inst=LOAD_FAST(arg=6, lineno=1087)
DEBUG 2022-02-14 16:46:36,110 stack ['$160load_global.8', '$178binary_true_divide.17', '$182load_attr.19']
DEBUG 2022-02-14 16:46:36,110 dispatch pc=186, inst=BINARY_MULTIPLY(arg=None, lineno=1087)
DEBUG 2022-02-14 16:46:36,110 stack ['$160load_global.8', '$178binary_true_divide.17', '$182load_attr.19', '$ratio184.20']
DEBUG 2022-02-14 16:46:36,110 dispatch pc=188, inst=LOAD_FAST(arg=0, lineno=1087)
DEBUG 2022-02-14 16:46:36,110 stack ['$160load_global.8', '$178binary_true_divide.17', '$186binary_multiply.21']
DEBUG 2022-02-14 16:46:36,111 dispatch pc=190, inst=LOAD_ATTR(arg=0, lineno=1087)
DEBUG 2022-02-14 16:46:36,111 stack ['$160load_global.8', '$178binary_true_divide.17', '$186binary_multiply.21', '$a188.22']
DEBUG 2022-02-14 16:46:36,111 dispatch pc=192, inst=BINARY_SUBTRACT(arg=None, lineno=1087)
DEBUG 2022-02-14 16:46:36,111 stack ['$160load_global.8', '$178binary_true_divide.17', '$186binary_multiply.21', '$190load_attr.23']
DEBUG 2022-02-14 16:46:36,111 dispatch pc=194, inst=LOAD_FAST(arg=7, lineno=1087)
DEBUG 2022-02-14 16:46:36,111 stack ['$160load_global.8', '$178binary_true_divide.17', '$192binary_subtract.24']
DEBUG 2022-02-14 16:46:36,111 dispatch pc=196, inst=BINARY_TRUE_DIVIDE(arg=None, lineno=1087)
DEBUG 2022-02-14 16:46:36,111 stack ['$160load_global.8', '$178binary_true_divide.17', '$192binary_subtract.24', '$denom194.25']
DEBUG 2022-02-14 16:46:36,111 dispatch pc=198, inst=CALL_FUNCTION(arg=2, lineno=1085)
DEBUG 2022-02-14 16:46:36,111 stack ['$160load_global.8', '$178binary_true_divide.17', '$196binary_true_divide.26']
DEBUG 2022-02-14 16:46:36,111 dispatch pc=200, inst=RETURN_VALUE(arg=None, lineno=1085)
DEBUG 2022-02-14 16:46:36,111 stack ['$198call_function.27']
DEBUG 2022-02-14 16:46:36,111 end state. edges=[]
DEBUG 2022-02-14 16:46:36,111 -------------------------Prune PHIs-------------------------
DEBUG 2022-02-14 16:46:36,111 Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=30 nstack_initial=0): set(),
             State(pc_initial=34 nstack_initial=0): set(),
             State(pc_initial=42 nstack_initial=0): set(),
             State(pc_initial=58 nstack_initial=0): set(),
             State(pc_initial=62 nstack_initial=0): set(),
             State(pc_initial=72 nstack_initial=0): set(),
             State(pc_initial=126 nstack_initial=0): set(),
             State(pc_initial=130 nstack_initial=0): set(),
             State(pc_initial=140 nstack_initial=0): set()})
DEBUG 2022-02-14 16:46:36,112 defmap: {}
DEBUG 2022-02-14 16:46:36,112 phismap: defaultdict(<class 'set'>, {})
DEBUG 2022-02-14 16:46:36,112 changing phismap: defaultdict(<class 'set'>, {})
DEBUG 2022-02-14 16:46:36,112 keep phismap: {}
DEBUG 2022-02-14 16:46:36,112 new_out: defaultdict(<class 'dict'>, {})
DEBUG 2022-02-14 16:46:36,112 ----------------------DONE Prune PHIs-----------------------
DEBUG 2022-02-14 16:46:36,112 block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$a2.0'}), (4, {'item': '$a2.0', 'res': '$4load_attr.1'}), (6, {'value': '$4load_attr.1'}), (8, {'res': '$a8.2'}), (10, {'item': '$a8.2', 'res': '$10load_attr.3'}), (12, {'value': '$10load_attr.3'}), (14, {'res': '$b14.4'}), (16, {'item': '$b14.4', 'res': '$16load_attr.5'}), (18, {'value': '$16load_attr.5'}), (20, {'res': '$b20.6'}), (22, {'item': '$b20.6', 'res': '$22load_attr.7'}), (24, {'value': '$22load_attr.7'}), (26, {'res': '$breal26.8'}), (28, {'pred': '$breal26.8'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={30: (), 42: ()})
DEBUG 2022-02-14 16:46:36,112 block_infos State(pc_initial=30 nstack_initial=0):
AdaptBlockInfo(insts=((30, {'res': '$bimag30.0'}), (32, {'pred': '$bimag30.0'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={34: (), 42: ()})
DEBUG 2022-02-14 16:46:36,112 block_infos State(pc_initial=34 nstack_initial=0):
AdaptBlockInfo(insts=((34, {'res': '$34load_global.0'}), (36, {'res': '$const36.1'}), (38, {'func': '$34load_global.0', 'args': ['$const36.1'], 'res': '$38call_function.2'}), (40, {'exc': '$38call_function.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG 2022-02-14 16:46:36,112 block_infos State(pc_initial=42 nstack_initial=0):
AdaptBlockInfo(insts=((42, {'res': '$42load_global.0'}), (44, {'res': '$breal44.1'}), (46, {'func': '$42load_global.0', 'args': ['$breal44.1'], 'res': '$46call_function.2'}), (48, {'res': '$48load_global.3'}), (50, {'res': '$bimag50.4'}), (52, {'func': '$48load_global.3', 'args': ['$bimag50.4'], 'res': '$52call_function.5'}), (54, {'lhs': '$46call_function.2', 'rhs': '$52call_function.5', 'res': '$54compare_op.6'}), (56, {'pred': '$54compare_op.6'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={58: (), 126: ()})
DEBUG 2022-02-14 16:46:36,113 block_infos State(pc_initial=58 nstack_initial=0):
AdaptBlockInfo(insts=((58, {'res': '$breal58.0'}), (60, {'pred': '$breal58.0'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={62: (), 72: ()})
DEBUG 2022-02-14 16:46:36,113 block_infos State(pc_initial=62 nstack_initial=0):
AdaptBlockInfo(insts=((62, {'res': '$62load_global.0'}), (64, {'res': '$64load_global.1'}), (66, {'res': '$66load_global.2'}), (68, {'func': '$62load_global.0', 'args': ['$64load_global.1', '$66load_global.2'], 'res': '$68call_function.3'}), (70, {'retval': '$68call_function.3', 'castval': '$70return_value.4'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG 2022-02-14 16:46:36,113 block_infos State(pc_initial=72 nstack_initial=0):
AdaptBlockInfo(insts=((72, {'res': '$bimag72.0'}), (74, {'res': '$breal74.1'}), (76, {'lhs': '$bimag72.0', 'rhs': '$breal74.1', 'res': '$76binary_true_divide.2'}), (78, {'value': '$76binary_true_divide.2'}), (80, {'res': '$breal80.3'}), (82, {'res': '$bimag82.4'}), (84, {'res': '$ratio84.5'}), (86, {'lhs': '$bimag82.4', 'rhs': '$ratio84.5', 'res': '$86binary_multiply.6'}), (88, {'lhs': '$breal80.3', 'rhs': '$86binary_multiply.6', 'res': '$88binary_add.7'}), (90, {'value': '$88binary_add.7'}), (92, {'res': '$92load_global.8'}), (94, {'res': '$areal94.9'}), (96, {'res': '$aimag96.10'}), (98, {'res': '$ratio98.11'}), (100, {'lhs': '$aimag96.10', 'rhs': '$ratio98.11', 'res': '$100binary_multiply.12'}), (102, {'lhs': '$areal94.9', 'rhs': '$100binary_multiply.12', 'res': '$102binary_add.13'}), (104, {'res': '$denom104.14'}), (106, {'lhs': '$102binary_add.13', 'rhs': '$denom104.14', 'res': '$106binary_true_divide.15'}), (108, {'res': '$aimag108.16'}), (110, {'res': '$areal110.17'}), (112, {'res': '$ratio112.18'}), (114, {'lhs': '$areal110.17', 'rhs': '$ratio112.18', 'res': '$114binary_multiply.19'}), (116, {'lhs': '$aimag108.16', 'rhs': '$114binary_multiply.19', 'res': '$116binary_subtract.20'}), (118, {'res': '$denom118.21'}), (120, {'lhs': '$116binary_subtract.20', 'rhs': '$denom118.21', 'res': '$120binary_true_divide.22'}), (122, {'func': '$92load_global.8', 'args': ['$106binary_true_divide.15', '$120binary_true_divide.22'], 'res': '$122call_function.23'}), (124, {'retval': '$122call_function.23', 'castval': '$124return_value.24'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG 2022-02-14 16:46:36,113 block_infos State(pc_initial=126 nstack_initial=0):
AdaptBlockInfo(insts=((126, {'res': '$bimag126.0'}), (128, {'pred': '$bimag126.0'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={130: (), 140: ()})
DEBUG 2022-02-14 16:46:36,113 block_infos State(pc_initial=130 nstack_initial=0):
AdaptBlockInfo(insts=((130, {'res': '$130load_global.0'}), (132, {'res': '$132load_global.1'}), (134, {'res': '$134load_global.2'}), (136, {'func': '$130load_global.0', 'args': ['$132load_global.1', '$134load_global.2'], 'res': '$136call_function.3'}), (138, {'retval': '$136call_function.3', 'castval': '$138return_value.4'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG 2022-02-14 16:46:36,113 block_infos State(pc_initial=140 nstack_initial=0):
AdaptBlockInfo(insts=((140, {'res': '$breal140.0'}), (142, {'res': '$bimag142.1'}), (144, {'lhs': '$breal140.0', 'rhs': '$bimag142.1', 'res': '$144binary_true_divide.2'}), (146, {'value': '$144binary_true_divide.2'}), (148, {'res': '$breal148.3'}), (150, {'res': '$ratio150.4'}), (152, {'lhs': '$breal148.3', 'rhs': '$ratio150.4', 'res': '$152binary_multiply.5'}), (154, {'res': '$bimag154.6'}), (156, {'lhs': '$152binary_multiply.5', 'rhs': '$bimag154.6', 'res': '$156binary_add.7'}), (158, {'value': '$156binary_add.7'}), (160, {'res': '$160load_global.8'}), (162, {'res': '$a162.9'}), (164, {'item': '$a162.9', 'res': '$164load_attr.10'}), (166, {'res': '$ratio166.11'}), (168, {'lhs': '$164load_attr.10', 'rhs': '$ratio166.11', 'res': '$168binary_multiply.12'}), (170, {'res': '$a170.13'}), (172, {'item': '$a170.13', 'res': '$172load_attr.14'}), (174, {'lhs': '$168binary_multiply.12', 'rhs': '$172load_attr.14', 'res': '$174binary_add.15'}), (176, {'res': '$denom176.16'}), (178, {'lhs': '$174binary_add.15', 'rhs': '$denom176.16', 'res': '$178binary_true_divide.17'}), (180, {'res': '$a180.18'}), (182, {'item': '$a180.18', 'res': '$182load_attr.19'}), (184, {'res': '$ratio184.20'}), (186, {'lhs': '$182load_attr.19', 'rhs': '$ratio184.20', 'res': '$186binary_multiply.21'}), (188, {'res': '$a188.22'}), (190, {'item': '$a188.22', 'res': '$190load_attr.23'}), (192, {'lhs': '$186binary_multiply.21', 'rhs': '$190load_attr.23', 'res': '$192binary_subtract.24'}), (194, {'res': '$denom194.25'}), (196, {'lhs': '$192binary_subtract.24', 'rhs': '$denom194.25', 'res': '$196binary_true_divide.26'}), (198, {'func': '$160load_global.8', 'args': ['$178binary_true_divide.17', '$196binary_true_divide.26'], 'res': '$198call_function.27'}), (200, {'retval': '$198call_function.27', 'castval': '$200return_value.28'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG 2022-02-14 16:46:36,115 label 0:
    a = arg(0, name=a)                       ['a']
    b = arg(1, name=b)                       ['b']
    areal = getattr(value=a, attr=real)      ['a', 'areal']
    aimag = getattr(value=a, attr=imag)      ['a', 'aimag']
    breal = getattr(value=b, attr=real)      ['b', 'breal']
    bimag = getattr(value=b, attr=imag)      ['b', 'bimag']
    bool28 = global(bool: <class 'bool'>)    ['bool28']
    $28pred = call bool28(breal, func=bool28, args=(Var(breal, numbers.py:1066),), kws=(), vararg=None, target=None) ['$28pred', 'bool28', 'breal']
    branch $28pred, 42, 30                   ['$28pred']
label 30:
    bool32 = global(bool: <class 'bool'>)    ['bool32']
    $32pred = call bool32(bimag, func=bool32, args=(Var(bimag, numbers.py:1067),), kws=(), vararg=None, target=None) ['$32pred', 'bimag', 'bool32']
    branch $32pred, 42, 34                   ['$32pred']
label 34:
    $34load_global.0 = global(ZeroDivisionError: <class 'ZeroDivisionError'>) ['$34load_global.0']
    $const36.1 = const(str, complex division by zero) ['$const36.1']
    $38call_function.2 = call $34load_global.0($const36.1, func=$34load_global.0, args=[Var($const36.1, numbers.py:1069)], kws=(), vararg=None, target=None) ['$34load_global.0', '$38call_function.2', '$const36.1']
    raise $38call_function.2                 ['$38call_function.2']
label 42:
    $42load_global.0 = global(abs: <built-in function abs>) ['$42load_global.0']
    $46call_function.2 = call $42load_global.0(breal, func=$42load_global.0, args=[Var(breal, numbers.py:1066)], kws=(), vararg=None, target=None) ['$42load_global.0', '$46call_function.2', 'breal']
    $48load_global.3 = global(abs: <built-in function abs>) ['$48load_global.3']
    $52call_function.5 = call $48load_global.3(bimag, func=$48load_global.3, args=[Var(bimag, numbers.py:1067)], kws=(), vararg=None, target=None) ['$48load_global.3', '$52call_function.5', 'bimag']
    $54compare_op.6 = $46call_function.2 >= $52call_function.5 ['$46call_function.2', '$52call_function.5', '$54compare_op.6']
    bool56 = global(bool: <class 'bool'>)    ['bool56']
    $56pred = call bool56($54compare_op.6, func=bool56, args=(Var($54compare_op.6, numbers.py:1070),), kws=(), vararg=None, target=None) ['$54compare_op.6', '$56pred', 'bool56']
    branch $56pred, 58, 126                  ['$56pred']
label 58:
    bool60 = global(bool: <class 'bool'>)    ['bool60']
    $60pred = call bool60(breal, func=bool60, args=(Var(breal, numbers.py:1066),), kws=(), vararg=None, target=None) ['$60pred', 'bool60', 'breal']
    branch $60pred, 72, 62                   ['$60pred']
label 62:
    $62load_global.0 = global(complex: <class 'complex'>) ['$62load_global.0']
    $64load_global.1 = global(NAN: nan)      ['$64load_global.1']
    $66load_global.2 = global(NAN: nan)      ['$66load_global.2']
    $68call_function.3 = call $62load_global.0($64load_global.1, $66load_global.2, func=$62load_global.0, args=[Var($64load_global.1, numbers.py:1073), Var($66load_global.2, numbers.py:1073)], kws=(), vararg=None, target=None) ['$62load_global.0', '$64load_global.1', '$66load_global.2', '$68call_function.3']
    $70return_value.4 = cast(value=$68call_function.3) ['$68call_function.3', '$70return_value.4']
    return $70return_value.4                 ['$70return_value.4']
label 72:
    ratio = bimag / breal                    ['bimag', 'breal', 'ratio']
    $86binary_multiply.6 = bimag * ratio     ['$86binary_multiply.6', 'bimag', 'ratio']
    denom = breal + $86binary_multiply.6     ['$86binary_multiply.6', 'breal', 'denom']
    $92load_global.8 = global(complex: <class 'complex'>) ['$92load_global.8']
    $100binary_multiply.12 = aimag * ratio   ['$100binary_multiply.12', 'aimag', 'ratio']
    $102binary_add.13 = areal + $100binary_multiply.12 ['$100binary_multiply.12', '$102binary_add.13', 'areal']
    $106binary_true_divide.15 = $102binary_add.13 / denom ['$102binary_add.13', '$106binary_true_divide.15', 'denom']
    $114binary_multiply.19 = areal * ratio   ['$114binary_multiply.19', 'areal', 'ratio']
    $116binary_subtract.20 = aimag - $114binary_multiply.19 ['$114binary_multiply.19', '$116binary_subtract.20', 'aimag']
    $120binary_true_divide.22 = $116binary_subtract.20 / denom ['$116binary_subtract.20', '$120binary_true_divide.22', 'denom']
    $122call_function.23 = call $92load_global.8($106binary_true_divide.15, $120binary_true_divide.22, func=$92load_global.8, args=[Var($106binary_true_divide.15, numbers.py:1077), Var($120binary_true_divide.22, numbers.py:1078)], kws=(), vararg=None, target=None) ['$106binary_true_divide.15', '$120binary_true_divide.22', '$122call_function.23', '$92load_global.8']
    $124return_value.24 = cast(value=$122call_function.23) ['$122call_function.23', '$124return_value.24']
    return $124return_value.24               ['$124return_value.24']
label 126:
    bool128 = global(bool: <class 'bool'>)   ['bool128']
    $128pred = call bool128(bimag, func=bool128, args=(Var(bimag, numbers.py:1067),), kws=(), vararg=None, target=None) ['$128pred', 'bimag', 'bool128']
    branch $128pred, 140, 130                ['$128pred']
label 130:
    $130load_global.0 = global(complex: <class 'complex'>) ['$130load_global.0']
    $132load_global.1 = global(NAN: nan)     ['$132load_global.1']
    $134load_global.2 = global(NAN: nan)     ['$134load_global.2']
    $136call_function.3 = call $130load_global.0($132load_global.1, $134load_global.2, func=$130load_global.0, args=[Var($132load_global.1, numbers.py:1082), Var($134load_global.2, numbers.py:1082)], kws=(), vararg=None, target=None) ['$130load_global.0', '$132load_global.1', '$134load_global.2', '$136call_function.3']
    $138return_value.4 = cast(value=$136call_function.3) ['$136call_function.3', '$138return_value.4']
    return $138return_value.4                ['$138return_value.4']
label 140:
    ratio = breal / bimag                    ['bimag', 'breal', 'ratio']
    $152binary_multiply.5 = breal * ratio    ['$152binary_multiply.5', 'breal', 'ratio']
    denom = $152binary_multiply.5 + bimag    ['$152binary_multiply.5', 'bimag', 'denom']
    $160load_global.8 = global(complex: <class 'complex'>) ['$160load_global.8']
    $164load_attr.10 = getattr(value=a, attr=real) ['$164load_attr.10', 'a']
    $168binary_multiply.12 = $164load_attr.10 * ratio ['$164load_attr.10', '$168binary_multiply.12', 'ratio']
    $172load_attr.14 = getattr(value=a, attr=imag) ['$172load_attr.14', 'a']
    $174binary_add.15 = $168binary_multiply.12 + $172load_attr.14 ['$168binary_multiply.12', '$172load_attr.14', '$174binary_add.15']
    $178binary_true_divide.17 = $174binary_add.15 / denom ['$174binary_add.15', '$178binary_true_divide.17', 'denom']
    $182load_attr.19 = getattr(value=a, attr=imag) ['$182load_attr.19', 'a']
    $186binary_multiply.21 = $182load_attr.19 * ratio ['$182load_attr.19', '$186binary_multiply.21', 'ratio']
    $190load_attr.23 = getattr(value=a, attr=real) ['$190load_attr.23', 'a']
    $192binary_subtract.24 = $186binary_multiply.21 - $190load_attr.23 ['$186binary_multiply.21', '$190load_attr.23', '$192binary_subtract.24']
    $196binary_true_divide.26 = $192binary_subtract.24 / denom ['$192binary_subtract.24', '$196binary_true_divide.26', 'denom']
    $198call_function.27 = call $160load_global.8($178binary_true_divide.17, $196binary_true_divide.26, func=$160load_global.8, args=[Var($178binary_true_divide.17, numbers.py:1086), Var($196binary_true_divide.26, numbers.py:1087)], kws=(), vararg=None, target=None) ['$160load_global.8', '$178binary_true_divide.17', '$196binary_true_divide.26', '$198call_function.27']
    $200return_value.28 = cast(value=$198call_function.27) ['$198call_function.27', '$200return_value.28']
    return $200return_value.28               ['$200return_value.28']

DEBUG 2022-02-14 16:46:36,122 ==== SSA block analysis pass on 0
DEBUG 2022-02-14 16:46:36,122 Running <numba.core.ssa._GatherDefsHandler object at 0x7f7203444b50>
DEBUG 2022-02-14 16:46:36,122 on stmt: a = arg(0, name=a)
DEBUG 2022-02-14 16:46:36,122 on stmt: b = arg(1, name=b)
DEBUG 2022-02-14 16:46:36,122 on stmt: areal = getattr(value=a, attr=real)
DEBUG 2022-02-14 16:46:36,122 on stmt: aimag = getattr(value=a, attr=imag)
DEBUG 2022-02-14 16:46:36,122 on stmt: breal = getattr(value=b, attr=real)
DEBUG 2022-02-14 16:46:36,122 on stmt: bimag = getattr(value=b, attr=imag)
DEBUG 2022-02-14 16:46:36,122 on stmt: bool28 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:46:36,122 on stmt: $28pred = call bool28(breal, func=bool28, args=(Var(breal, numbers.py:1066),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:46:36,122 on stmt: branch $28pred, 42, 30
DEBUG 2022-02-14 16:46:36,123 ==== SSA block analysis pass on 30
DEBUG 2022-02-14 16:46:36,123 Running <numba.core.ssa._GatherDefsHandler object at 0x7f7203444b50>
DEBUG 2022-02-14 16:46:36,123 on stmt: bool32 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:46:36,123 on stmt: $32pred = call bool32(bimag, func=bool32, args=(Var(bimag, numbers.py:1067),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:46:36,123 on stmt: branch $32pred, 42, 34
DEBUG 2022-02-14 16:46:36,123 ==== SSA block analysis pass on 34
DEBUG 2022-02-14 16:46:36,123 Running <numba.core.ssa._GatherDefsHandler object at 0x7f7203444b50>
DEBUG 2022-02-14 16:46:36,123 on stmt: $34load_global.0 = global(ZeroDivisionError: <class 'ZeroDivisionError'>)
DEBUG 2022-02-14 16:46:36,123 on stmt: $const36.1 = const(str, complex division by zero)
DEBUG 2022-02-14 16:46:36,123 on stmt: $38call_function.2 = call $34load_global.0($const36.1, func=$34load_global.0, args=[Var($const36.1, numbers.py:1069)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:46:36,123 on stmt: <static> raise <class 'ZeroDivisionError'>('complex division by zero')
DEBUG 2022-02-14 16:46:36,123 ==== SSA block analysis pass on 42
DEBUG 2022-02-14 16:46:36,123 Running <numba.core.ssa._GatherDefsHandler object at 0x7f7203444b50>
DEBUG 2022-02-14 16:46:36,123 on stmt: $42load_global.0 = global(abs: <built-in function abs>)
DEBUG 2022-02-14 16:46:36,123 on stmt: $46call_function.2 = call $42load_global.0(breal, func=$42load_global.0, args=[Var(breal, numbers.py:1066)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:46:36,123 on stmt: $48load_global.3 = global(abs: <built-in function abs>)
DEBUG 2022-02-14 16:46:36,123 on stmt: $52call_function.5 = call $48load_global.3(bimag, func=$48load_global.3, args=[Var(bimag, numbers.py:1067)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:46:36,123 on stmt: $54compare_op.6 = $46call_function.2 >= $52call_function.5
DEBUG 2022-02-14 16:46:36,123 on stmt: bool56 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:46:36,124 on stmt: $56pred = call bool56($54compare_op.6, func=bool56, args=(Var($54compare_op.6, numbers.py:1070),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:46:36,124 on stmt: branch $56pred, 58, 126
DEBUG 2022-02-14 16:46:36,124 ==== SSA block analysis pass on 58
DEBUG 2022-02-14 16:46:36,124 Running <numba.core.ssa._GatherDefsHandler object at 0x7f7203444b50>
DEBUG 2022-02-14 16:46:36,124 on stmt: bool60 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:46:36,124 on stmt: $60pred = call bool60(breal, func=bool60, args=(Var(breal, numbers.py:1066),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:46:36,124 on stmt: branch $60pred, 72, 62
DEBUG 2022-02-14 16:46:36,124 ==== SSA block analysis pass on 62
DEBUG 2022-02-14 16:46:36,124 Running <numba.core.ssa._GatherDefsHandler object at 0x7f7203444b50>
DEBUG 2022-02-14 16:46:36,124 on stmt: $62load_global.0 = global(complex: <class 'complex'>)
DEBUG 2022-02-14 16:46:36,124 on stmt: $64load_global.1 = global(NAN: nan)
DEBUG 2022-02-14 16:46:36,124 on stmt: $66load_global.2 = global(NAN: nan)
DEBUG 2022-02-14 16:46:36,124 on stmt: $68call_function.3 = call $62load_global.0($64load_global.1, $66load_global.2, func=$62load_global.0, args=[Var($64load_global.1, numbers.py:1073), Var($66load_global.2, numbers.py:1073)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:46:36,124 on stmt: $70return_value.4 = cast(value=$68call_function.3)
DEBUG 2022-02-14 16:46:36,124 on stmt: return $70return_value.4
DEBUG 2022-02-14 16:46:36,124 ==== SSA block analysis pass on 72
DEBUG 2022-02-14 16:46:36,124 Running <numba.core.ssa._GatherDefsHandler object at 0x7f7203444b50>
DEBUG 2022-02-14 16:46:36,124 on stmt: ratio = bimag / breal
DEBUG 2022-02-14 16:46:36,124 on stmt: $86binary_multiply.6 = bimag * ratio
DEBUG 2022-02-14 16:46:36,125 on stmt: denom = breal + $86binary_multiply.6
DEBUG 2022-02-14 16:46:36,125 on stmt: $92load_global.8 = global(complex: <class 'complex'>)
DEBUG 2022-02-14 16:46:36,125 on stmt: $100binary_multiply.12 = aimag * ratio
DEBUG 2022-02-14 16:46:36,125 on stmt: $102binary_add.13 = areal + $100binary_multiply.12
DEBUG 2022-02-14 16:46:36,125 on stmt: $106binary_true_divide.15 = $102binary_add.13 / denom
DEBUG 2022-02-14 16:46:36,125 on stmt: $114binary_multiply.19 = areal * ratio
DEBUG 2022-02-14 16:46:36,125 on stmt: $116binary_subtract.20 = aimag - $114binary_multiply.19
DEBUG 2022-02-14 16:46:36,125 on stmt: $120binary_true_divide.22 = $116binary_subtract.20 / denom
DEBUG 2022-02-14 16:46:36,125 on stmt: $122call_function.23 = call $92load_global.8($106binary_true_divide.15, $120binary_true_divide.22, func=$92load_global.8, args=[Var($106binary_true_divide.15, numbers.py:1077), Var($120binary_true_divide.22, numbers.py:1078)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:46:36,125 on stmt: $124return_value.24 = cast(value=$122call_function.23)
DEBUG 2022-02-14 16:46:36,125 on stmt: return $124return_value.24
DEBUG 2022-02-14 16:46:36,125 ==== SSA block analysis pass on 126
DEBUG 2022-02-14 16:46:36,125 Running <numba.core.ssa._GatherDefsHandler object at 0x7f7203444b50>
DEBUG 2022-02-14 16:46:36,125 on stmt: bool128 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:46:36,125 on stmt: $128pred = call bool128(bimag, func=bool128, args=(Var(bimag, numbers.py:1067),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:46:36,125 on stmt: branch $128pred, 140, 130
DEBUG 2022-02-14 16:46:36,125 ==== SSA block analysis pass on 130
DEBUG 2022-02-14 16:46:36,125 Running <numba.core.ssa._GatherDefsHandler object at 0x7f7203444b50>
DEBUG 2022-02-14 16:46:36,125 on stmt: $130load_global.0 = global(complex: <class 'complex'>)
DEBUG 2022-02-14 16:46:36,125 on stmt: $132load_global.1 = global(NAN: nan)
DEBUG 2022-02-14 16:46:36,126 on stmt: $134load_global.2 = global(NAN: nan)
DEBUG 2022-02-14 16:46:36,126 on stmt: $136call_function.3 = call $130load_global.0($132load_global.1, $134load_global.2, func=$130load_global.0, args=[Var($132load_global.1, numbers.py:1082), Var($134load_global.2, numbers.py:1082)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:46:36,126 on stmt: $138return_value.4 = cast(value=$136call_function.3)
DEBUG 2022-02-14 16:46:36,126 on stmt: return $138return_value.4
DEBUG 2022-02-14 16:46:36,126 ==== SSA block analysis pass on 140
DEBUG 2022-02-14 16:46:36,126 Running <numba.core.ssa._GatherDefsHandler object at 0x7f7203444b50>
DEBUG 2022-02-14 16:46:36,126 on stmt: ratio = breal / bimag
DEBUG 2022-02-14 16:46:36,126 on stmt: $152binary_multiply.5 = breal * ratio
DEBUG 2022-02-14 16:46:36,126 on stmt: denom = $152binary_multiply.5 + bimag
DEBUG 2022-02-14 16:46:36,126 on stmt: $160load_global.8 = global(complex: <class 'complex'>)
DEBUG 2022-02-14 16:46:36,126 on stmt: $164load_attr.10 = getattr(value=a, attr=real)
DEBUG 2022-02-14 16:46:36,126 on stmt: $168binary_multiply.12 = $164load_attr.10 * ratio
DEBUG 2022-02-14 16:46:36,126 on stmt: $172load_attr.14 = getattr(value=a, attr=imag)
DEBUG 2022-02-14 16:46:36,126 on stmt: $174binary_add.15 = $168binary_multiply.12 + $172load_attr.14
DEBUG 2022-02-14 16:46:36,126 on stmt: $178binary_true_divide.17 = $174binary_add.15 / denom
DEBUG 2022-02-14 16:46:36,126 on stmt: $182load_attr.19 = getattr(value=a, attr=imag)
DEBUG 2022-02-14 16:46:36,126 on stmt: $186binary_multiply.21 = $182load_attr.19 * ratio
DEBUG 2022-02-14 16:46:36,126 on stmt: $190load_attr.23 = getattr(value=a, attr=real)
DEBUG 2022-02-14 16:46:36,126 on stmt: $192binary_subtract.24 = $186binary_multiply.21 - $190load_attr.23
DEBUG 2022-02-14 16:46:36,126 on stmt: $196binary_true_divide.26 = $192binary_subtract.24 / denom
DEBUG 2022-02-14 16:46:36,127 on stmt: $198call_function.27 = call $160load_global.8($178binary_true_divide.17, $196binary_true_divide.26, func=$160load_global.8, args=[Var($178binary_true_divide.17, numbers.py:1086), Var($196binary_true_divide.26, numbers.py:1087)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:46:36,127 on stmt: $200return_value.28 = cast(value=$198call_function.27)
DEBUG 2022-02-14 16:46:36,127 on stmt: return $200return_value.28
DEBUG 2022-02-14 16:46:36,127 defs defaultdict(<class 'list'>,
            {'$100binary_multiply.12': [<numba.core.ir.Assign object at 0x7f7203979790>],
             '$102binary_add.13': [<numba.core.ir.Assign object at 0x7f7203979d60>],
             '$106binary_true_divide.15': [<numba.core.ir.Assign object at 0x7f7203979400>],
             '$114binary_multiply.19': [<numba.core.ir.Assign object at 0x7f7203979940>],
             '$116binary_subtract.20': [<numba.core.ir.Assign object at 0x7f7203979a00>],
             '$120binary_true_divide.22': [<numba.core.ir.Assign object at 0x7f72039bb6a0>],
             '$122call_function.23': [<numba.core.ir.Assign object at 0x7f72039bbfd0>],
             '$124return_value.24': [<numba.core.ir.Assign object at 0x7f72039bb9d0>],
             '$128pred': [<numba.core.ir.Assign object at 0x7f72039bb250>],
             '$130load_global.0': [<numba.core.ir.Assign object at 0x7f72034077f0>],
             '$132load_global.1': [<numba.core.ir.Assign object at 0x7f7203407ac0>],
             '$134load_global.2': [<numba.core.ir.Assign object at 0x7f7203407070>],
             '$136call_function.3': [<numba.core.ir.Assign object at 0x7f7203407280>],
             '$138return_value.4': [<numba.core.ir.Assign object at 0x7f72034073a0>],
             '$152binary_multiply.5': [<numba.core.ir.Assign object at 0x7f7203410400>],
             '$160load_global.8': [<numba.core.ir.Assign object at 0x7f7203410fa0>],
             '$164load_attr.10': [<numba.core.ir.Assign object at 0x7f7203410f40>],
             '$168binary_multiply.12': [<numba.core.ir.Assign object at 0x7f720340ba60>],
             '$172load_attr.14': [<numba.core.ir.Assign object at 0x7f720340bc10>],
             '$174binary_add.15': [<numba.core.ir.Assign object at 0x7f720340b3a0>],
             '$178binary_true_divide.17': [<numba.core.ir.Assign object at 0x7f720340bca0>],
             '$182load_attr.19': [<numba.core.ir.Assign object at 0x7f720340b430>],
             '$186binary_multiply.21': [<numba.core.ir.Assign object at 0x7f720340b700>],
             '$190load_attr.23': [<numba.core.ir.Assign object at 0x7f72033ee610>],
             '$192binary_subtract.24': [<numba.core.ir.Assign object at 0x7f72033ee2b0>],
             '$196binary_true_divide.26': [<numba.core.ir.Assign object at 0x7f72033eee20>],
             '$198call_function.27': [<numba.core.ir.Assign object at 0x7f72033eebe0>],
             '$200return_value.28': [<numba.core.ir.Assign object at 0x7f72033eefd0>],
             '$28pred': [<numba.core.ir.Assign object at 0x7f720396d6a0>],
             '$32pred': [<numba.core.ir.Assign object at 0x7f720396d580>],
             '$34load_global.0': [<numba.core.ir.Assign object at 0x7f72039002b0>],
             '$38call_function.2': [<numba.core.ir.Assign object at 0x7f7203900e80>],
             '$42load_global.0': [<numba.core.ir.Assign object at 0x7f72039005b0>],
             '$46call_function.2': [<numba.core.ir.Assign object at 0x7f72038c9c10>],
             '$48load_global.3': [<numba.core.ir.Assign object at 0x7f72038c9d90>],
             '$52call_function.5': [<numba.core.ir.Assign object at 0x7f720395c2e0>],
             '$54compare_op.6': [<numba.core.ir.Assign object at 0x7f720395cfd0>],
             '$56pred': [<numba.core.ir.Assign object at 0x7f720395c4c0>],
             '$60pred': [<numba.core.ir.Assign object at 0x7f720397e0a0>],
             '$62load_global.0': [<numba.core.ir.Assign object at 0x7f720397ee20>],
             '$64load_global.1': [<numba.core.ir.Assign object at 0x7f720397ec10>],
             '$66load_global.2': [<numba.core.ir.Assign object at 0x7f720397e610>],
             '$68call_function.3': [<numba.core.ir.Assign object at 0x7f720397e9a0>],
             '$70return_value.4': [<numba.core.ir.Assign object at 0x7f720397e910>],
             '$86binary_multiply.6': [<numba.core.ir.Assign object at 0x7f72039843a0>],
             '$92load_global.8': [<numba.core.ir.Assign object at 0x7f7203984100>],
             '$const36.1': [<numba.core.ir.Assign object at 0x7f7203900f10>],
             'a': [<numba.core.ir.Assign object at 0x7f72038541c0>],
             'aimag': [<numba.core.ir.Assign object at 0x7f7203866340>],
             'areal': [<numba.core.ir.Assign object at 0x7f7203854580>],
             'b': [<numba.core.ir.Assign object at 0x7f7203854250>],
             'bimag': [<numba.core.ir.Assign object at 0x7f720396d9d0>],
             'bool128': [<numba.core.ir.Assign object at 0x7f7203979190>],
             'bool28': [<numba.core.ir.Assign object at 0x7f720396de50>],
             'bool32': [<numba.core.ir.Assign object at 0x7f720396d880>],
             'bool56': [<numba.core.ir.Assign object at 0x7f720395cb20>],
             'bool60': [<numba.core.ir.Assign object at 0x7f720395c1c0>],
             'breal': [<numba.core.ir.Assign object at 0x7f720396d3d0>],
             'denom': [<numba.core.ir.Assign object at 0x7f7203984340>,
                       <numba.core.ir.Assign object at 0x7f72034107c0>],
             'ratio': [<numba.core.ir.Assign object at 0x7f720397efa0>,
                       <numba.core.ir.Assign object at 0x7f72034101f0>]})
DEBUG 2022-02-14 16:46:36,127 SSA violators {'ratio', 'denom'}
DEBUG 2022-02-14 16:46:36,127 Fix SSA violator on var ratio
DEBUG 2022-02-14 16:46:36,127 ==== SSA block rewrite pass on 0
DEBUG 2022-02-14 16:46:36,127 Running <numba.core.ssa._FreshVarHandler object at 0x7f72033b2ac0>
DEBUG 2022-02-14 16:46:36,128 on stmt: a = arg(0, name=a)
DEBUG 2022-02-14 16:46:36,128 on stmt: b = arg(1, name=b)
DEBUG 2022-02-14 16:46:36,128 on stmt: areal = getattr(value=a, attr=real)
DEBUG 2022-02-14 16:46:36,128 on stmt: aimag = getattr(value=a, attr=imag)
DEBUG 2022-02-14 16:46:36,128 on stmt: breal = getattr(value=b, attr=real)
DEBUG 2022-02-14 16:46:36,128 on stmt: bimag = getattr(value=b, attr=imag)
DEBUG 2022-02-14 16:46:36,128 on stmt: bool28 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:46:36,128 on stmt: $28pred = call bool28(breal, func=bool28, args=(Var(breal, numbers.py:1066),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:46:36,128 on stmt: branch $28pred, 42, 30
DEBUG 2022-02-14 16:46:36,128 ==== SSA block rewrite pass on 30
DEBUG 2022-02-14 16:46:36,128 Running <numba.core.ssa._FreshVarHandler object at 0x7f72033b2ac0>
DEBUG 2022-02-14 16:46:36,128 on stmt: bool32 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:46:36,128 on stmt: $32pred = call bool32(bimag, func=bool32, args=(Var(bimag, numbers.py:1067),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:46:36,128 on stmt: branch $32pred, 42, 34
DEBUG 2022-02-14 16:46:36,128 ==== SSA block rewrite pass on 34
DEBUG 2022-02-14 16:46:36,128 Running <numba.core.ssa._FreshVarHandler object at 0x7f72033b2ac0>
DEBUG 2022-02-14 16:46:36,128 on stmt: $34load_global.0 = global(ZeroDivisionError: <class 'ZeroDivisionError'>)
DEBUG 2022-02-14 16:46:36,128 on stmt: $const36.1 = const(str, complex division by zero)
DEBUG 2022-02-14 16:46:36,128 on stmt: $38call_function.2 = call $34load_global.0($const36.1, func=$34load_global.0, args=[Var($const36.1, numbers.py:1069)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:46:36,128 on stmt: <static> raise <class 'ZeroDivisionError'>('complex division by zero')
DEBUG 2022-02-14 16:46:36,128 ==== SSA block rewrite pass on 42
DEBUG 2022-02-14 16:46:36,129 Running <numba.core.ssa._FreshVarHandler object at 0x7f72033b2ac0>
DEBUG 2022-02-14 16:46:36,129 on stmt: $42load_global.0 = global(abs: <built-in function abs>)
DEBUG 2022-02-14 16:46:36,129 on stmt: $46call_function.2 = call $42load_global.0(breal, func=$42load_global.0, args=[Var(breal, numbers.py:1066)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:46:36,129 on stmt: $48load_global.3 = global(abs: <built-in function abs>)
DEBUG 2022-02-14 16:46:36,129 on stmt: $52call_function.5 = call $48load_global.3(bimag, func=$48load_global.3, args=[Var(bimag, numbers.py:1067)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:46:36,129 on stmt: $54compare_op.6 = $46call_function.2 >= $52call_function.5
DEBUG 2022-02-14 16:46:36,129 on stmt: bool56 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:46:36,129 on stmt: $56pred = call bool56($54compare_op.6, func=bool56, args=(Var($54compare_op.6, numbers.py:1070),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:46:36,129 on stmt: branch $56pred, 58, 126
DEBUG 2022-02-14 16:46:36,129 ==== SSA block rewrite pass on 58
DEBUG 2022-02-14 16:46:36,129 Running <numba.core.ssa._FreshVarHandler object at 0x7f72033b2ac0>
DEBUG 2022-02-14 16:46:36,129 on stmt: bool60 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:46:36,129 on stmt: $60pred = call bool60(breal, func=bool60, args=(Var(breal, numbers.py:1066),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:46:36,129 on stmt: branch $60pred, 72, 62
DEBUG 2022-02-14 16:46:36,129 ==== SSA block rewrite pass on 62
DEBUG 2022-02-14 16:46:36,129 Running <numba.core.ssa._FreshVarHandler object at 0x7f72033b2ac0>
DEBUG 2022-02-14 16:46:36,129 on stmt: $62load_global.0 = global(complex: <class 'complex'>)
DEBUG 2022-02-14 16:46:36,129 on stmt: $64load_global.1 = global(NAN: nan)
DEBUG 2022-02-14 16:46:36,129 on stmt: $66load_global.2 = global(NAN: nan)
DEBUG 2022-02-14 16:46:36,129 on stmt: $68call_function.3 = call $62load_global.0($64load_global.1, $66load_global.2, func=$62load_global.0, args=[Var($64load_global.1, numbers.py:1073), Var($66load_global.2, numbers.py:1073)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:46:36,130 on stmt: $70return_value.4 = cast(value=$68call_function.3)
DEBUG 2022-02-14 16:46:36,130 on stmt: return $70return_value.4
DEBUG 2022-02-14 16:46:36,130 ==== SSA block rewrite pass on 72
DEBUG 2022-02-14 16:46:36,130 Running <numba.core.ssa._FreshVarHandler object at 0x7f72033b2ac0>
DEBUG 2022-02-14 16:46:36,130 on stmt: ratio = bimag / breal
DEBUG 2022-02-14 16:46:36,130 first assign: ratio
DEBUG 2022-02-14 16:46:36,130 replaced with: ratio = bimag / breal
DEBUG 2022-02-14 16:46:36,130 on stmt: $86binary_multiply.6 = bimag * ratio
DEBUG 2022-02-14 16:46:36,130 on stmt: denom = breal + $86binary_multiply.6
DEBUG 2022-02-14 16:46:36,130 on stmt: $92load_global.8 = global(complex: <class 'complex'>)
DEBUG 2022-02-14 16:46:36,130 on stmt: $100binary_multiply.12 = aimag * ratio
DEBUG 2022-02-14 16:46:36,130 on stmt: $102binary_add.13 = areal + $100binary_multiply.12
DEBUG 2022-02-14 16:46:36,130 on stmt: $106binary_true_divide.15 = $102binary_add.13 / denom
DEBUG 2022-02-14 16:46:36,130 on stmt: $114binary_multiply.19 = areal * ratio
DEBUG 2022-02-14 16:46:36,130 on stmt: $116binary_subtract.20 = aimag - $114binary_multiply.19
DEBUG 2022-02-14 16:46:36,130 on stmt: $120binary_true_divide.22 = $116binary_subtract.20 / denom
DEBUG 2022-02-14 16:46:36,130 on stmt: $122call_function.23 = call $92load_global.8($106binary_true_divide.15, $120binary_true_divide.22, func=$92load_global.8, args=[Var($106binary_true_divide.15, numbers.py:1077), Var($120binary_true_divide.22, numbers.py:1078)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:46:36,130 on stmt: $124return_value.24 = cast(value=$122call_function.23)
DEBUG 2022-02-14 16:46:36,130 on stmt: return $124return_value.24
DEBUG 2022-02-14 16:46:36,130 ==== SSA block rewrite pass on 126
DEBUG 2022-02-14 16:46:36,130 Running <numba.core.ssa._FreshVarHandler object at 0x7f72033b2ac0>
DEBUG 2022-02-14 16:46:36,131 on stmt: bool128 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:46:36,131 on stmt: $128pred = call bool128(bimag, func=bool128, args=(Var(bimag, numbers.py:1067),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:46:36,131 on stmt: branch $128pred, 140, 130
DEBUG 2022-02-14 16:46:36,131 ==== SSA block rewrite pass on 130
DEBUG 2022-02-14 16:46:36,131 Running <numba.core.ssa._FreshVarHandler object at 0x7f72033b2ac0>
DEBUG 2022-02-14 16:46:36,131 on stmt: $130load_global.0 = global(complex: <class 'complex'>)
DEBUG 2022-02-14 16:46:36,131 on stmt: $132load_global.1 = global(NAN: nan)
DEBUG 2022-02-14 16:46:36,131 on stmt: $134load_global.2 = global(NAN: nan)
DEBUG 2022-02-14 16:46:36,131 on stmt: $136call_function.3 = call $130load_global.0($132load_global.1, $134load_global.2, func=$130load_global.0, args=[Var($132load_global.1, numbers.py:1082), Var($134load_global.2, numbers.py:1082)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:46:36,131 on stmt: $138return_value.4 = cast(value=$136call_function.3)
DEBUG 2022-02-14 16:46:36,131 on stmt: return $138return_value.4
DEBUG 2022-02-14 16:46:36,131 ==== SSA block rewrite pass on 140
DEBUG 2022-02-14 16:46:36,131 Running <numba.core.ssa._FreshVarHandler object at 0x7f72033b2ac0>
DEBUG 2022-02-14 16:46:36,131 on stmt: ratio = breal / bimag
DEBUG 2022-02-14 16:46:36,131 replaced with: ratio.1 = breal / bimag
DEBUG 2022-02-14 16:46:36,131 on stmt: $152binary_multiply.5 = breal * ratio
DEBUG 2022-02-14 16:46:36,131 on stmt: denom = $152binary_multiply.5 + bimag
DEBUG 2022-02-14 16:46:36,131 on stmt: $160load_global.8 = global(complex: <class 'complex'>)
DEBUG 2022-02-14 16:46:36,131 on stmt: $164load_attr.10 = getattr(value=a, attr=real)
DEBUG 2022-02-14 16:46:36,131 on stmt: $168binary_multiply.12 = $164load_attr.10 * ratio
DEBUG 2022-02-14 16:46:36,131 on stmt: $172load_attr.14 = getattr(value=a, attr=imag)
DEBUG 2022-02-14 16:46:36,132 on stmt: $174binary_add.15 = $168binary_multiply.12 + $172load_attr.14
DEBUG 2022-02-14 16:46:36,132 on stmt: $178binary_true_divide.17 = $174binary_add.15 / denom
DEBUG 2022-02-14 16:46:36,132 on stmt: $182load_attr.19 = getattr(value=a, attr=imag)
DEBUG 2022-02-14 16:46:36,132 on stmt: $186binary_multiply.21 = $182load_attr.19 * ratio
DEBUG 2022-02-14 16:46:36,132 on stmt: $190load_attr.23 = getattr(value=a, attr=real)
DEBUG 2022-02-14 16:46:36,132 on stmt: $192binary_subtract.24 = $186binary_multiply.21 - $190load_attr.23
DEBUG 2022-02-14 16:46:36,132 on stmt: $196binary_true_divide.26 = $192binary_subtract.24 / denom
DEBUG 2022-02-14 16:46:36,132 on stmt: $198call_function.27 = call $160load_global.8($178binary_true_divide.17, $196binary_true_divide.26, func=$160load_global.8, args=[Var($178binary_true_divide.17, numbers.py:1086), Var($196binary_true_divide.26, numbers.py:1087)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:46:36,132 on stmt: $200return_value.28 = cast(value=$198call_function.27)
DEBUG 2022-02-14 16:46:36,132 on stmt: return $200return_value.28
DEBUG 2022-02-14 16:46:36,132 Replaced assignments: defaultdict(<class 'list'>,
            {72: [<numba.core.ir.Assign object at 0x7f72034304f0>],
             140: [<numba.core.ir.Assign object at 0x7f720343f820>]})
DEBUG 2022-02-14 16:46:36,132 ==== SSA block rewrite pass on 0
DEBUG 2022-02-14 16:46:36,132 Running <numba.core.ssa._FixSSAVars object at 0x7f72033b2ac0>
DEBUG 2022-02-14 16:46:36,132 on stmt: a = arg(0, name=a)
DEBUG 2022-02-14 16:46:36,132 on stmt: b = arg(1, name=b)
DEBUG 2022-02-14 16:46:36,132 on stmt: areal = getattr(value=a, attr=real)
DEBUG 2022-02-14 16:46:36,132 on stmt: aimag = getattr(value=a, attr=imag)
DEBUG 2022-02-14 16:46:36,132 on stmt: breal = getattr(value=b, attr=real)
DEBUG 2022-02-14 16:46:36,132 on stmt: bimag = getattr(value=b, attr=imag)
DEBUG 2022-02-14 16:46:36,133 on stmt: bool28 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:46:36,133 on stmt: $28pred = call bool28(breal, func=bool28, args=(Var(breal, numbers.py:1066),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:46:36,133 on stmt: branch $28pred, 42, 30
DEBUG 2022-02-14 16:46:36,133 ==== SSA block rewrite pass on 30
DEBUG 2022-02-14 16:46:36,133 Running <numba.core.ssa._FixSSAVars object at 0x7f72033b2ac0>
DEBUG 2022-02-14 16:46:36,133 on stmt: bool32 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:46:36,133 on stmt: $32pred = call bool32(bimag, func=bool32, args=(Var(bimag, numbers.py:1067),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:46:36,133 on stmt: branch $32pred, 42, 34
DEBUG 2022-02-14 16:46:36,133 ==== SSA block rewrite pass on 34
DEBUG 2022-02-14 16:46:36,133 Running <numba.core.ssa._FixSSAVars object at 0x7f72033b2ac0>
DEBUG 2022-02-14 16:46:36,133 on stmt: $34load_global.0 = global(ZeroDivisionError: <class 'ZeroDivisionError'>)
DEBUG 2022-02-14 16:46:36,133 on stmt: $const36.1 = const(str, complex division by zero)
DEBUG 2022-02-14 16:46:36,133 on stmt: $38call_function.2 = call $34load_global.0($const36.1, func=$34load_global.0, args=[Var($const36.1, numbers.py:1069)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:46:36,133 on stmt: <static> raise <class 'ZeroDivisionError'>('complex division by zero')
DEBUG 2022-02-14 16:46:36,133 ==== SSA block rewrite pass on 42
DEBUG 2022-02-14 16:46:36,133 Running <numba.core.ssa._FixSSAVars object at 0x7f72033b2ac0>
DEBUG 2022-02-14 16:46:36,133 on stmt: $42load_global.0 = global(abs: <built-in function abs>)
DEBUG 2022-02-14 16:46:36,133 on stmt: $46call_function.2 = call $42load_global.0(breal, func=$42load_global.0, args=[Var(breal, numbers.py:1066)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:46:36,133 on stmt: $48load_global.3 = global(abs: <built-in function abs>)
DEBUG 2022-02-14 16:46:36,134 on stmt: $52call_function.5 = call $48load_global.3(bimag, func=$48load_global.3, args=[Var(bimag, numbers.py:1067)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:46:36,134 on stmt: $54compare_op.6 = $46call_function.2 >= $52call_function.5
DEBUG 2022-02-14 16:46:36,134 on stmt: bool56 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:46:36,134 on stmt: $56pred = call bool56($54compare_op.6, func=bool56, args=(Var($54compare_op.6, numbers.py:1070),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:46:36,134 on stmt: branch $56pred, 58, 126
DEBUG 2022-02-14 16:46:36,134 ==== SSA block rewrite pass on 58
DEBUG 2022-02-14 16:46:36,134 Running <numba.core.ssa._FixSSAVars object at 0x7f72033b2ac0>
DEBUG 2022-02-14 16:46:36,134 on stmt: bool60 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:46:36,134 on stmt: $60pred = call bool60(breal, func=bool60, args=(Var(breal, numbers.py:1066),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:46:36,134 on stmt: branch $60pred, 72, 62
DEBUG 2022-02-14 16:46:36,134 ==== SSA block rewrite pass on 62
DEBUG 2022-02-14 16:46:36,134 Running <numba.core.ssa._FixSSAVars object at 0x7f72033b2ac0>
DEBUG 2022-02-14 16:46:36,134 on stmt: $62load_global.0 = global(complex: <class 'complex'>)
DEBUG 2022-02-14 16:46:36,134 on stmt: $64load_global.1 = global(NAN: nan)
DEBUG 2022-02-14 16:46:36,134 on stmt: $66load_global.2 = global(NAN: nan)
DEBUG 2022-02-14 16:46:36,134 on stmt: $68call_function.3 = call $62load_global.0($64load_global.1, $66load_global.2, func=$62load_global.0, args=[Var($64load_global.1, numbers.py:1073), Var($66load_global.2, numbers.py:1073)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:46:36,134 on stmt: $70return_value.4 = cast(value=$68call_function.3)
DEBUG 2022-02-14 16:46:36,134 on stmt: return $70return_value.4
DEBUG 2022-02-14 16:46:36,134 ==== SSA block rewrite pass on 72
DEBUG 2022-02-14 16:46:36,135 Running <numba.core.ssa._FixSSAVars object at 0x7f72033b2ac0>
DEBUG 2022-02-14 16:46:36,135 on stmt: ratio = bimag / breal
DEBUG 2022-02-14 16:46:36,135 on stmt: $86binary_multiply.6 = bimag * ratio
DEBUG 2022-02-14 16:46:36,135 find_def var='ratio' stmt=$86binary_multiply.6 = bimag * ratio
DEBUG 2022-02-14 16:46:36,135 on stmt: denom = breal + $86binary_multiply.6
DEBUG 2022-02-14 16:46:36,135 on stmt: $92load_global.8 = global(complex: <class 'complex'>)
DEBUG 2022-02-14 16:46:36,135 on stmt: $100binary_multiply.12 = aimag * ratio
DEBUG 2022-02-14 16:46:36,135 find_def var='ratio' stmt=$100binary_multiply.12 = aimag * ratio
DEBUG 2022-02-14 16:46:36,135 on stmt: $102binary_add.13 = areal + $100binary_multiply.12
DEBUG 2022-02-14 16:46:36,135 on stmt: $106binary_true_divide.15 = $102binary_add.13 / denom
DEBUG 2022-02-14 16:46:36,135 on stmt: $114binary_multiply.19 = areal * ratio
DEBUG 2022-02-14 16:46:36,135 find_def var='ratio' stmt=$114binary_multiply.19 = areal * ratio
DEBUG 2022-02-14 16:46:36,135 on stmt: $116binary_subtract.20 = aimag - $114binary_multiply.19
DEBUG 2022-02-14 16:46:36,135 on stmt: $120binary_true_divide.22 = $116binary_subtract.20 / denom
DEBUG 2022-02-14 16:46:36,135 on stmt: $122call_function.23 = call $92load_global.8($106binary_true_divide.15, $120binary_true_divide.22, func=$92load_global.8, args=[Var($106binary_true_divide.15, numbers.py:1077), Var($120binary_true_divide.22, numbers.py:1078)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:46:36,135 on stmt: $124return_value.24 = cast(value=$122call_function.23)
DEBUG 2022-02-14 16:46:36,135 on stmt: return $124return_value.24
DEBUG 2022-02-14 16:46:36,136 ==== SSA block rewrite pass on 126
DEBUG 2022-02-14 16:46:36,136 Running <numba.core.ssa._FixSSAVars object at 0x7f72033b2ac0>
DEBUG 2022-02-14 16:46:36,136 on stmt: bool128 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:46:36,136 on stmt: $128pred = call bool128(bimag, func=bool128, args=(Var(bimag, numbers.py:1067),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:46:36,136 on stmt: branch $128pred, 140, 130
DEBUG 2022-02-14 16:46:36,136 ==== SSA block rewrite pass on 130
DEBUG 2022-02-14 16:46:36,136 Running <numba.core.ssa._FixSSAVars object at 0x7f72033b2ac0>
DEBUG 2022-02-14 16:46:36,136 on stmt: $130load_global.0 = global(complex: <class 'complex'>)
DEBUG 2022-02-14 16:46:36,136 on stmt: $132load_global.1 = global(NAN: nan)
DEBUG 2022-02-14 16:46:36,136 on stmt: $134load_global.2 = global(NAN: nan)
DEBUG 2022-02-14 16:46:36,136 on stmt: $136call_function.3 = call $130load_global.0($132load_global.1, $134load_global.2, func=$130load_global.0, args=[Var($132load_global.1, numbers.py:1082), Var($134load_global.2, numbers.py:1082)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:46:36,136 on stmt: $138return_value.4 = cast(value=$136call_function.3)
DEBUG 2022-02-14 16:46:36,136 on stmt: return $138return_value.4
DEBUG 2022-02-14 16:46:36,136 ==== SSA block rewrite pass on 140
DEBUG 2022-02-14 16:46:36,136 Running <numba.core.ssa._FixSSAVars object at 0x7f72033b2ac0>
DEBUG 2022-02-14 16:46:36,136 on stmt: ratio.1 = breal / bimag
DEBUG 2022-02-14 16:46:36,136 on stmt: $152binary_multiply.5 = breal * ratio
DEBUG 2022-02-14 16:46:36,136 find_def var='ratio' stmt=$152binary_multiply.5 = breal * ratio
DEBUG 2022-02-14 16:46:36,136 replaced with: $152binary_multiply.5 = breal * ratio.1
DEBUG 2022-02-14 16:46:36,137 on stmt: denom = $152binary_multiply.5 + bimag
DEBUG 2022-02-14 16:46:36,137 on stmt: $160load_global.8 = global(complex: <class 'complex'>)
DEBUG 2022-02-14 16:46:36,137 on stmt: $164load_attr.10 = getattr(value=a, attr=real)
DEBUG 2022-02-14 16:46:36,137 on stmt: $168binary_multiply.12 = $164load_attr.10 * ratio
DEBUG 2022-02-14 16:46:36,137 find_def var='ratio' stmt=$168binary_multiply.12 = $164load_attr.10 * ratio
DEBUG 2022-02-14 16:46:36,137 replaced with: $168binary_multiply.12 = $164load_attr.10 * ratio.1
DEBUG 2022-02-14 16:46:36,137 on stmt: $172load_attr.14 = getattr(value=a, attr=imag)
DEBUG 2022-02-14 16:46:36,137 on stmt: $174binary_add.15 = $168binary_multiply.12 + $172load_attr.14
DEBUG 2022-02-14 16:46:36,137 on stmt: $178binary_true_divide.17 = $174binary_add.15 / denom
DEBUG 2022-02-14 16:46:36,137 on stmt: $182load_attr.19 = getattr(value=a, attr=imag)
DEBUG 2022-02-14 16:46:36,137 on stmt: $186binary_multiply.21 = $182load_attr.19 * ratio
DEBUG 2022-02-14 16:46:36,137 find_def var='ratio' stmt=$186binary_multiply.21 = $182load_attr.19 * ratio
DEBUG 2022-02-14 16:46:36,137 replaced with: $186binary_multiply.21 = $182load_attr.19 * ratio.1
DEBUG 2022-02-14 16:46:36,137 on stmt: $190load_attr.23 = getattr(value=a, attr=real)
DEBUG 2022-02-14 16:46:36,137 on stmt: $192binary_subtract.24 = $186binary_multiply.21 - $190load_attr.23
DEBUG 2022-02-14 16:46:36,137 on stmt: $196binary_true_divide.26 = $192binary_subtract.24 / denom
DEBUG 2022-02-14 16:46:36,137 on stmt: $198call_function.27 = call $160load_global.8($178binary_true_divide.17, $196binary_true_divide.26, func=$160load_global.8, args=[Var($178binary_true_divide.17, numbers.py:1086), Var($196binary_true_divide.26, numbers.py:1087)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:46:36,138 on stmt: $200return_value.28 = cast(value=$198call_function.27)
DEBUG 2022-02-14 16:46:36,138 on stmt: return $200return_value.28
DEBUG 2022-02-14 16:46:36,138 Fix SSA violator on var denom
DEBUG 2022-02-14 16:46:36,138 ==== SSA block rewrite pass on 0
DEBUG 2022-02-14 16:46:36,138 Running <numba.core.ssa._FreshVarHandler object at 0x7f720397ed30>
DEBUG 2022-02-14 16:46:36,138 on stmt: a = arg(0, name=a)
DEBUG 2022-02-14 16:46:36,138 on stmt: b = arg(1, name=b)
DEBUG 2022-02-14 16:46:36,138 on stmt: areal = getattr(value=a, attr=real)
DEBUG 2022-02-14 16:46:36,138 on stmt: aimag = getattr(value=a, attr=imag)
DEBUG 2022-02-14 16:46:36,138 on stmt: breal = getattr(value=b, attr=real)
DEBUG 2022-02-14 16:46:36,138 on stmt: bimag = getattr(value=b, attr=imag)
DEBUG 2022-02-14 16:46:36,138 on stmt: bool28 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:46:36,138 on stmt: $28pred = call bool28(breal, func=bool28, args=(Var(breal, numbers.py:1066),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:46:36,138 on stmt: branch $28pred, 42, 30
DEBUG 2022-02-14 16:46:36,138 ==== SSA block rewrite pass on 30
DEBUG 2022-02-14 16:46:36,138 Running <numba.core.ssa._FreshVarHandler object at 0x7f720397ed30>
DEBUG 2022-02-14 16:46:36,138 on stmt: bool32 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:46:36,138 on stmt: $32pred = call bool32(bimag, func=bool32, args=(Var(bimag, numbers.py:1067),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:46:36,138 on stmt: branch $32pred, 42, 34
DEBUG 2022-02-14 16:46:36,138 ==== SSA block rewrite pass on 34
DEBUG 2022-02-14 16:46:36,139 Running <numba.core.ssa._FreshVarHandler object at 0x7f720397ed30>
DEBUG 2022-02-14 16:46:36,139 on stmt: $34load_global.0 = global(ZeroDivisionError: <class 'ZeroDivisionError'>)
DEBUG 2022-02-14 16:46:36,139 on stmt: $const36.1 = const(str, complex division by zero)
DEBUG 2022-02-14 16:46:36,139 on stmt: $38call_function.2 = call $34load_global.0($const36.1, func=$34load_global.0, args=[Var($const36.1, numbers.py:1069)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:46:36,139 on stmt: <static> raise <class 'ZeroDivisionError'>('complex division by zero')
DEBUG 2022-02-14 16:46:36,139 ==== SSA block rewrite pass on 42
DEBUG 2022-02-14 16:46:36,139 Running <numba.core.ssa._FreshVarHandler object at 0x7f720397ed30>
DEBUG 2022-02-14 16:46:36,139 on stmt: $42load_global.0 = global(abs: <built-in function abs>)
DEBUG 2022-02-14 16:46:36,139 on stmt: $46call_function.2 = call $42load_global.0(breal, func=$42load_global.0, args=[Var(breal, numbers.py:1066)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:46:36,139 on stmt: $48load_global.3 = global(abs: <built-in function abs>)
DEBUG 2022-02-14 16:46:36,139 on stmt: $52call_function.5 = call $48load_global.3(bimag, func=$48load_global.3, args=[Var(bimag, numbers.py:1067)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:46:36,139 on stmt: $54compare_op.6 = $46call_function.2 >= $52call_function.5
DEBUG 2022-02-14 16:46:36,139 on stmt: bool56 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:46:36,139 on stmt: $56pred = call bool56($54compare_op.6, func=bool56, args=(Var($54compare_op.6, numbers.py:1070),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:46:36,139 on stmt: branch $56pred, 58, 126
DEBUG 2022-02-14 16:46:36,139 ==== SSA block rewrite pass on 58
DEBUG 2022-02-14 16:46:36,139 Running <numba.core.ssa._FreshVarHandler object at 0x7f720397ed30>
DEBUG 2022-02-14 16:46:36,139 on stmt: bool60 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:46:36,139 on stmt: $60pred = call bool60(breal, func=bool60, args=(Var(breal, numbers.py:1066),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:46:36,140 on stmt: branch $60pred, 72, 62
DEBUG 2022-02-14 16:46:36,140 ==== SSA block rewrite pass on 62
DEBUG 2022-02-14 16:46:36,140 Running <numba.core.ssa._FreshVarHandler object at 0x7f720397ed30>
DEBUG 2022-02-14 16:46:36,140 on stmt: $62load_global.0 = global(complex: <class 'complex'>)
DEBUG 2022-02-14 16:46:36,140 on stmt: $64load_global.1 = global(NAN: nan)
DEBUG 2022-02-14 16:46:36,140 on stmt: $66load_global.2 = global(NAN: nan)
DEBUG 2022-02-14 16:46:36,140 on stmt: $68call_function.3 = call $62load_global.0($64load_global.1, $66load_global.2, func=$62load_global.0, args=[Var($64load_global.1, numbers.py:1073), Var($66load_global.2, numbers.py:1073)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:46:36,140 on stmt: $70return_value.4 = cast(value=$68call_function.3)
DEBUG 2022-02-14 16:46:36,140 on stmt: return $70return_value.4
DEBUG 2022-02-14 16:46:36,140 ==== SSA block rewrite pass on 72
DEBUG 2022-02-14 16:46:36,140 Running <numba.core.ssa._FreshVarHandler object at 0x7f720397ed30>
DEBUG 2022-02-14 16:46:36,140 on stmt: ratio = bimag / breal
DEBUG 2022-02-14 16:46:36,140 on stmt: $86binary_multiply.6 = bimag * ratio
DEBUG 2022-02-14 16:46:36,140 on stmt: denom = breal + $86binary_multiply.6
DEBUG 2022-02-14 16:46:36,140 first assign: denom
DEBUG 2022-02-14 16:46:36,140 replaced with: denom = breal + $86binary_multiply.6
DEBUG 2022-02-14 16:46:36,140 on stmt: $92load_global.8 = global(complex: <class 'complex'>)
DEBUG 2022-02-14 16:46:36,140 on stmt: $100binary_multiply.12 = aimag * ratio
DEBUG 2022-02-14 16:46:36,140 on stmt: $102binary_add.13 = areal + $100binary_multiply.12
DEBUG 2022-02-14 16:46:36,140 on stmt: $106binary_true_divide.15 = $102binary_add.13 / denom
DEBUG 2022-02-14 16:46:36,140 on stmt: $114binary_multiply.19 = areal * ratio
DEBUG 2022-02-14 16:46:36,141 on stmt: $116binary_subtract.20 = aimag - $114binary_multiply.19
DEBUG 2022-02-14 16:46:36,141 on stmt: $120binary_true_divide.22 = $116binary_subtract.20 / denom
DEBUG 2022-02-14 16:46:36,141 on stmt: $122call_function.23 = call $92load_global.8($106binary_true_divide.15, $120binary_true_divide.22, func=$92load_global.8, args=[Var($106binary_true_divide.15, numbers.py:1077), Var($120binary_true_divide.22, numbers.py:1078)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:46:36,141 on stmt: $124return_value.24 = cast(value=$122call_function.23)
DEBUG 2022-02-14 16:46:36,141 on stmt: return $124return_value.24
DEBUG 2022-02-14 16:46:36,141 ==== SSA block rewrite pass on 126
DEBUG 2022-02-14 16:46:36,141 Running <numba.core.ssa._FreshVarHandler object at 0x7f720397ed30>
DEBUG 2022-02-14 16:46:36,141 on stmt: bool128 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:46:36,141 on stmt: $128pred = call bool128(bimag, func=bool128, args=(Var(bimag, numbers.py:1067),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:46:36,141 on stmt: branch $128pred, 140, 130
DEBUG 2022-02-14 16:46:36,141 ==== SSA block rewrite pass on 130
DEBUG 2022-02-14 16:46:36,141 Running <numba.core.ssa._FreshVarHandler object at 0x7f720397ed30>
DEBUG 2022-02-14 16:46:36,141 on stmt: $130load_global.0 = global(complex: <class 'complex'>)
DEBUG 2022-02-14 16:46:36,141 on stmt: $132load_global.1 = global(NAN: nan)
DEBUG 2022-02-14 16:46:36,141 on stmt: $134load_global.2 = global(NAN: nan)
DEBUG 2022-02-14 16:46:36,141 on stmt: $136call_function.3 = call $130load_global.0($132load_global.1, $134load_global.2, func=$130load_global.0, args=[Var($132load_global.1, numbers.py:1082), Var($134load_global.2, numbers.py:1082)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:46:36,141 on stmt: $138return_value.4 = cast(value=$136call_function.3)
DEBUG 2022-02-14 16:46:36,141 on stmt: return $138return_value.4
DEBUG 2022-02-14 16:46:36,141 ==== SSA block rewrite pass on 140
DEBUG 2022-02-14 16:46:36,141 Running <numba.core.ssa._FreshVarHandler object at 0x7f720397ed30>
DEBUG 2022-02-14 16:46:36,141 on stmt: ratio.1 = breal / bimag
DEBUG 2022-02-14 16:46:36,142 on stmt: $152binary_multiply.5 = breal * ratio.1
DEBUG 2022-02-14 16:46:36,142 on stmt: denom = $152binary_multiply.5 + bimag
DEBUG 2022-02-14 16:46:36,142 replaced with: denom.1 = $152binary_multiply.5 + bimag
DEBUG 2022-02-14 16:46:36,142 on stmt: $160load_global.8 = global(complex: <class 'complex'>)
DEBUG 2022-02-14 16:46:36,142 on stmt: $164load_attr.10 = getattr(value=a, attr=real)
DEBUG 2022-02-14 16:46:36,142 on stmt: $168binary_multiply.12 = $164load_attr.10 * ratio.1
DEBUG 2022-02-14 16:46:36,142 on stmt: $172load_attr.14 = getattr(value=a, attr=imag)
DEBUG 2022-02-14 16:46:36,142 on stmt: $174binary_add.15 = $168binary_multiply.12 + $172load_attr.14
DEBUG 2022-02-14 16:46:36,142 on stmt: $178binary_true_divide.17 = $174binary_add.15 / denom
DEBUG 2022-02-14 16:46:36,142 on stmt: $182load_attr.19 = getattr(value=a, attr=imag)
DEBUG 2022-02-14 16:46:36,142 on stmt: $186binary_multiply.21 = $182load_attr.19 * ratio.1
DEBUG 2022-02-14 16:46:36,142 on stmt: $190load_attr.23 = getattr(value=a, attr=real)
DEBUG 2022-02-14 16:46:36,142 on stmt: $192binary_subtract.24 = $186binary_multiply.21 - $190load_attr.23
DEBUG 2022-02-14 16:46:36,142 on stmt: $196binary_true_divide.26 = $192binary_subtract.24 / denom
DEBUG 2022-02-14 16:46:36,142 on stmt: $198call_function.27 = call $160load_global.8($178binary_true_divide.17, $196binary_true_divide.26, func=$160load_global.8, args=[Var($178binary_true_divide.17, numbers.py:1086), Var($196binary_true_divide.26, numbers.py:1087)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:46:36,142 on stmt: $200return_value.28 = cast(value=$198call_function.27)
DEBUG 2022-02-14 16:46:36,142 on stmt: return $200return_value.28
DEBUG 2022-02-14 16:46:36,142 Replaced assignments: defaultdict(<class 'list'>,
            {72: [<numba.core.ir.Assign object at 0x7f72033b2b80>],
             140: [<numba.core.ir.Assign object at 0x7f72033eeb50>]})
DEBUG 2022-02-14 16:46:36,143 ==== SSA block rewrite pass on 0
DEBUG 2022-02-14 16:46:36,143 Running <numba.core.ssa._FixSSAVars object at 0x7f7203407520>
DEBUG 2022-02-14 16:46:36,143 on stmt: a = arg(0, name=a)
DEBUG 2022-02-14 16:46:36,143 on stmt: b = arg(1, name=b)
DEBUG 2022-02-14 16:46:36,143 on stmt: areal = getattr(value=a, attr=real)
DEBUG 2022-02-14 16:46:36,143 on stmt: aimag = getattr(value=a, attr=imag)
DEBUG 2022-02-14 16:46:36,143 on stmt: breal = getattr(value=b, attr=real)
DEBUG 2022-02-14 16:46:36,143 on stmt: bimag = getattr(value=b, attr=imag)
DEBUG 2022-02-14 16:46:36,143 on stmt: bool28 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:46:36,143 on stmt: $28pred = call bool28(breal, func=bool28, args=(Var(breal, numbers.py:1066),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:46:36,143 on stmt: branch $28pred, 42, 30
DEBUG 2022-02-14 16:46:36,143 ==== SSA block rewrite pass on 30
DEBUG 2022-02-14 16:46:36,143 Running <numba.core.ssa._FixSSAVars object at 0x7f7203407520>
DEBUG 2022-02-14 16:46:36,143 on stmt: bool32 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:46:36,143 on stmt: $32pred = call bool32(bimag, func=bool32, args=(Var(bimag, numbers.py:1067),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:46:36,143 on stmt: branch $32pred, 42, 34
DEBUG 2022-02-14 16:46:36,143 ==== SSA block rewrite pass on 34
DEBUG 2022-02-14 16:46:36,143 Running <numba.core.ssa._FixSSAVars object at 0x7f7203407520>
DEBUG 2022-02-14 16:46:36,143 on stmt: $34load_global.0 = global(ZeroDivisionError: <class 'ZeroDivisionError'>)
DEBUG 2022-02-14 16:46:36,143 on stmt: $const36.1 = const(str, complex division by zero)
DEBUG 2022-02-14 16:46:36,143 on stmt: $38call_function.2 = call $34load_global.0($const36.1, func=$34load_global.0, args=[Var($const36.1, numbers.py:1069)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:46:36,144 on stmt: <static> raise <class 'ZeroDivisionError'>('complex division by zero')
DEBUG 2022-02-14 16:46:36,144 ==== SSA block rewrite pass on 42
DEBUG 2022-02-14 16:46:36,144 Running <numba.core.ssa._FixSSAVars object at 0x7f7203407520>
DEBUG 2022-02-14 16:46:36,144 on stmt: $42load_global.0 = global(abs: <built-in function abs>)
DEBUG 2022-02-14 16:46:36,144 on stmt: $46call_function.2 = call $42load_global.0(breal, func=$42load_global.0, args=[Var(breal, numbers.py:1066)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:46:36,144 on stmt: $48load_global.3 = global(abs: <built-in function abs>)
DEBUG 2022-02-14 16:46:36,144 on stmt: $52call_function.5 = call $48load_global.3(bimag, func=$48load_global.3, args=[Var(bimag, numbers.py:1067)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:46:36,144 on stmt: $54compare_op.6 = $46call_function.2 >= $52call_function.5
DEBUG 2022-02-14 16:46:36,144 on stmt: bool56 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:46:36,144 on stmt: $56pred = call bool56($54compare_op.6, func=bool56, args=(Var($54compare_op.6, numbers.py:1070),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:46:36,144 on stmt: branch $56pred, 58, 126
DEBUG 2022-02-14 16:46:36,144 ==== SSA block rewrite pass on 58
DEBUG 2022-02-14 16:46:36,144 Running <numba.core.ssa._FixSSAVars object at 0x7f7203407520>
DEBUG 2022-02-14 16:46:36,144 on stmt: bool60 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:46:36,144 on stmt: $60pred = call bool60(breal, func=bool60, args=(Var(breal, numbers.py:1066),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:46:36,144 on stmt: branch $60pred, 72, 62
DEBUG 2022-02-14 16:46:36,144 ==== SSA block rewrite pass on 62
DEBUG 2022-02-14 16:46:36,144 Running <numba.core.ssa._FixSSAVars object at 0x7f7203407520>
DEBUG 2022-02-14 16:46:36,144 on stmt: $62load_global.0 = global(complex: <class 'complex'>)
DEBUG 2022-02-14 16:46:36,145 on stmt: $64load_global.1 = global(NAN: nan)
DEBUG 2022-02-14 16:46:36,145 on stmt: $66load_global.2 = global(NAN: nan)
DEBUG 2022-02-14 16:46:36,145 on stmt: $68call_function.3 = call $62load_global.0($64load_global.1, $66load_global.2, func=$62load_global.0, args=[Var($64load_global.1, numbers.py:1073), Var($66load_global.2, numbers.py:1073)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:46:36,145 on stmt: $70return_value.4 = cast(value=$68call_function.3)
DEBUG 2022-02-14 16:46:36,145 on stmt: return $70return_value.4
DEBUG 2022-02-14 16:46:36,145 ==== SSA block rewrite pass on 72
DEBUG 2022-02-14 16:46:36,145 Running <numba.core.ssa._FixSSAVars object at 0x7f7203407520>
DEBUG 2022-02-14 16:46:36,145 on stmt: ratio = bimag / breal
DEBUG 2022-02-14 16:46:36,145 on stmt: $86binary_multiply.6 = bimag * ratio
DEBUG 2022-02-14 16:46:36,145 on stmt: denom = breal + $86binary_multiply.6
DEBUG 2022-02-14 16:46:36,145 on stmt: $92load_global.8 = global(complex: <class 'complex'>)
DEBUG 2022-02-14 16:46:36,145 on stmt: $100binary_multiply.12 = aimag * ratio
DEBUG 2022-02-14 16:46:36,145 on stmt: $102binary_add.13 = areal + $100binary_multiply.12
DEBUG 2022-02-14 16:46:36,145 on stmt: $106binary_true_divide.15 = $102binary_add.13 / denom
DEBUG 2022-02-14 16:46:36,145 find_def var='denom' stmt=$106binary_true_divide.15 = $102binary_add.13 / denom
DEBUG 2022-02-14 16:46:36,145 on stmt: $114binary_multiply.19 = areal * ratio
DEBUG 2022-02-14 16:46:36,145 on stmt: $116binary_subtract.20 = aimag - $114binary_multiply.19
DEBUG 2022-02-14 16:46:36,145 on stmt: $120binary_true_divide.22 = $116binary_subtract.20 / denom
DEBUG 2022-02-14 16:46:36,145 find_def var='denom' stmt=$120binary_true_divide.22 = $116binary_subtract.20 / denom
DEBUG 2022-02-14 16:46:36,145 on stmt: $122call_function.23 = call $92load_global.8($106binary_true_divide.15, $120binary_true_divide.22, func=$92load_global.8, args=[Var($106binary_true_divide.15, numbers.py:1077), Var($120binary_true_divide.22, numbers.py:1078)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:46:36,146 on stmt: $124return_value.24 = cast(value=$122call_function.23)
DEBUG 2022-02-14 16:46:36,146 on stmt: return $124return_value.24
DEBUG 2022-02-14 16:46:36,146 ==== SSA block rewrite pass on 126
DEBUG 2022-02-14 16:46:36,146 Running <numba.core.ssa._FixSSAVars object at 0x7f7203407520>
DEBUG 2022-02-14 16:46:36,146 on stmt: bool128 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:46:36,146 on stmt: $128pred = call bool128(bimag, func=bool128, args=(Var(bimag, numbers.py:1067),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:46:36,146 on stmt: branch $128pred, 140, 130
DEBUG 2022-02-14 16:46:36,146 ==== SSA block rewrite pass on 130
DEBUG 2022-02-14 16:46:36,146 Running <numba.core.ssa._FixSSAVars object at 0x7f7203407520>
DEBUG 2022-02-14 16:46:36,146 on stmt: $130load_global.0 = global(complex: <class 'complex'>)
DEBUG 2022-02-14 16:46:36,146 on stmt: $132load_global.1 = global(NAN: nan)
DEBUG 2022-02-14 16:46:36,146 on stmt: $134load_global.2 = global(NAN: nan)
DEBUG 2022-02-14 16:46:36,146 on stmt: $136call_function.3 = call $130load_global.0($132load_global.1, $134load_global.2, func=$130load_global.0, args=[Var($132load_global.1, numbers.py:1082), Var($134load_global.2, numbers.py:1082)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:46:36,146 on stmt: $138return_value.4 = cast(value=$136call_function.3)
DEBUG 2022-02-14 16:46:36,146 on stmt: return $138return_value.4
DEBUG 2022-02-14 16:46:36,146 ==== SSA block rewrite pass on 140
DEBUG 2022-02-14 16:46:36,146 Running <numba.core.ssa._FixSSAVars object at 0x7f7203407520>
DEBUG 2022-02-14 16:46:36,146 on stmt: ratio.1 = breal / bimag
DEBUG 2022-02-14 16:46:36,146 on stmt: $152binary_multiply.5 = breal * ratio.1
DEBUG 2022-02-14 16:46:36,146 on stmt: denom.1 = $152binary_multiply.5 + bimag
DEBUG 2022-02-14 16:46:36,147 on stmt: $160load_global.8 = global(complex: <class 'complex'>)
DEBUG 2022-02-14 16:46:36,147 on stmt: $164load_attr.10 = getattr(value=a, attr=real)
DEBUG 2022-02-14 16:46:36,147 on stmt: $168binary_multiply.12 = $164load_attr.10 * ratio.1
DEBUG 2022-02-14 16:46:36,147 on stmt: $172load_attr.14 = getattr(value=a, attr=imag)
DEBUG 2022-02-14 16:46:36,147 on stmt: $174binary_add.15 = $168binary_multiply.12 + $172load_attr.14
DEBUG 2022-02-14 16:46:36,147 on stmt: $178binary_true_divide.17 = $174binary_add.15 / denom
DEBUG 2022-02-14 16:46:36,147 find_def var='denom' stmt=$178binary_true_divide.17 = $174binary_add.15 / denom
DEBUG 2022-02-14 16:46:36,147 replaced with: $178binary_true_divide.17 = $174binary_add.15 / denom.1
DEBUG 2022-02-14 16:46:36,147 on stmt: $182load_attr.19 = getattr(value=a, attr=imag)
DEBUG 2022-02-14 16:46:36,147 on stmt: $186binary_multiply.21 = $182load_attr.19 * ratio.1
DEBUG 2022-02-14 16:46:36,147 on stmt: $190load_attr.23 = getattr(value=a, attr=real)
DEBUG 2022-02-14 16:46:36,147 on stmt: $192binary_subtract.24 = $186binary_multiply.21 - $190load_attr.23
DEBUG 2022-02-14 16:46:36,147 on stmt: $196binary_true_divide.26 = $192binary_subtract.24 / denom
DEBUG 2022-02-14 16:46:36,147 find_def var='denom' stmt=$196binary_true_divide.26 = $192binary_subtract.24 / denom
DEBUG 2022-02-14 16:46:36,147 replaced with: $196binary_true_divide.26 = $192binary_subtract.24 / denom.1
DEBUG 2022-02-14 16:46:36,147 on stmt: $198call_function.27 = call $160load_global.8($178binary_true_divide.17, $196binary_true_divide.26, func=$160load_global.8, args=[Var($178binary_true_divide.17, numbers.py:1086), Var($196binary_true_divide.26, numbers.py:1087)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:46:36,147 on stmt: $200return_value.28 = cast(value=$198call_function.27)
DEBUG 2022-02-14 16:46:36,148 on stmt: return $200return_value.28
DEBUG 2022-02-14 16:46:36,205 bytecode dump:
>          0	NOP(arg=None, lineno=509)
           2	LOAD_FAST(arg=0, lineno=509)
           4	LOAD_ATTR(arg=0, lineno=509)
           6	UNPACK_SEQUENCE(arg=1, lineno=509)
           8	STORE_FAST(arg=2, lineno=509)
          10	LOAD_FAST(arg=1, lineno=510)
          12	LOAD_ATTR(arg=0, lineno=510)
          14	UNPACK_SEQUENCE(arg=1, lineno=510)
          16	STORE_FAST(arg=3, lineno=510)
          18	LOAD_FAST(arg=2, lineno=511)
          20	LOAD_FAST(arg=3, lineno=511)
          22	COMPARE_OP(arg=3, lineno=511)
          24	POP_JUMP_IF_FALSE(arg=34, lineno=511)
          26	LOAD_GLOBAL(arg=1, lineno=512)
          28	LOAD_CONST(arg=1, lineno=512)
          30	CALL_FUNCTION(arg=1, lineno=512)
          32	RAISE_VARARGS(arg=1, lineno=512)
>         34	LOAD_CONST(arg=0, lineno=512)
          36	RETURN_VALUE(arg=None, lineno=512)
DEBUG 2022-02-14 16:46:36,205 pending: deque([State(pc_initial=0 nstack_initial=0)])
DEBUG 2022-02-14 16:46:36,205 stack: []
DEBUG 2022-02-14 16:46:36,206 dispatch pc=0, inst=NOP(arg=None, lineno=509)
DEBUG 2022-02-14 16:46:36,206 stack []
DEBUG 2022-02-14 16:46:36,206 dispatch pc=2, inst=LOAD_FAST(arg=0, lineno=509)
DEBUG 2022-02-14 16:46:36,206 stack []
DEBUG 2022-02-14 16:46:36,206 dispatch pc=4, inst=LOAD_ATTR(arg=0, lineno=509)
DEBUG 2022-02-14 16:46:36,206 stack ['$a2.0']
DEBUG 2022-02-14 16:46:36,206 dispatch pc=6, inst=UNPACK_SEQUENCE(arg=1, lineno=509)
DEBUG 2022-02-14 16:46:36,206 stack ['$4load_attr.1']
DEBUG 2022-02-14 16:46:36,206 dispatch pc=8, inst=STORE_FAST(arg=2, lineno=509)
DEBUG 2022-02-14 16:46:36,206 stack ['$6unpack_sequence.2']
DEBUG 2022-02-14 16:46:36,206 dispatch pc=10, inst=LOAD_FAST(arg=1, lineno=510)
DEBUG 2022-02-14 16:46:36,206 stack []
DEBUG 2022-02-14 16:46:36,206 dispatch pc=12, inst=LOAD_ATTR(arg=0, lineno=510)
DEBUG 2022-02-14 16:46:36,206 stack ['$b10.4']
DEBUG 2022-02-14 16:46:36,206 dispatch pc=14, inst=UNPACK_SEQUENCE(arg=1, lineno=510)
DEBUG 2022-02-14 16:46:36,206 stack ['$12load_attr.5']
DEBUG 2022-02-14 16:46:36,206 dispatch pc=16, inst=STORE_FAST(arg=3, lineno=510)
DEBUG 2022-02-14 16:46:36,206 stack ['$14unpack_sequence.6']
DEBUG 2022-02-14 16:46:36,206 dispatch pc=18, inst=LOAD_FAST(arg=2, lineno=511)
DEBUG 2022-02-14 16:46:36,206 stack []
DEBUG 2022-02-14 16:46:36,207 dispatch pc=20, inst=LOAD_FAST(arg=3, lineno=511)
DEBUG 2022-02-14 16:46:36,207 stack ['$m18.8']
DEBUG 2022-02-14 16:46:36,207 dispatch pc=22, inst=COMPARE_OP(arg=3, lineno=511)
DEBUG 2022-02-14 16:46:36,207 stack ['$m18.8', '$n20.9']
DEBUG 2022-02-14 16:46:36,207 dispatch pc=24, inst=POP_JUMP_IF_FALSE(arg=34, lineno=511)
DEBUG 2022-02-14 16:46:36,207 stack ['$22compare_op.10']
DEBUG 2022-02-14 16:46:36,207 end state. edges=[Edge(pc=26, stack=(), blockstack=(), npush=0), Edge(pc=34, stack=(), blockstack=(), npush=0)]
DEBUG 2022-02-14 16:46:36,207 pending: deque([State(pc_initial=26 nstack_initial=0), State(pc_initial=34 nstack_initial=0)])
DEBUG 2022-02-14 16:46:36,207 stack: []
DEBUG 2022-02-14 16:46:36,207 dispatch pc=26, inst=LOAD_GLOBAL(arg=1, lineno=512)
DEBUG 2022-02-14 16:46:36,207 stack []
DEBUG 2022-02-14 16:46:36,207 dispatch pc=28, inst=LOAD_CONST(arg=1, lineno=512)
DEBUG 2022-02-14 16:46:36,207 stack ['$26load_global.0']
DEBUG 2022-02-14 16:46:36,207 dispatch pc=30, inst=CALL_FUNCTION(arg=1, lineno=512)
DEBUG 2022-02-14 16:46:36,207 stack ['$26load_global.0', '$const28.1']
DEBUG 2022-02-14 16:46:36,207 dispatch pc=32, inst=RAISE_VARARGS(arg=1, lineno=512)
DEBUG 2022-02-14 16:46:36,207 stack ['$30call_function.2']
DEBUG 2022-02-14 16:46:36,207 end state. edges=[]
DEBUG 2022-02-14 16:46:36,207 pending: deque([State(pc_initial=34 nstack_initial=0)])
DEBUG 2022-02-14 16:46:36,207 stack: []
DEBUG 2022-02-14 16:46:36,207 dispatch pc=34, inst=LOAD_CONST(arg=0, lineno=512)
DEBUG 2022-02-14 16:46:36,207 stack []
DEBUG 2022-02-14 16:46:36,208 dispatch pc=36, inst=RETURN_VALUE(arg=None, lineno=512)
DEBUG 2022-02-14 16:46:36,208 stack ['$const34.0']
DEBUG 2022-02-14 16:46:36,208 end state. edges=[]
DEBUG 2022-02-14 16:46:36,208 -------------------------Prune PHIs-------------------------
DEBUG 2022-02-14 16:46:36,208 Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=26 nstack_initial=0): set(),
             State(pc_initial=34 nstack_initial=0): set()})
DEBUG 2022-02-14 16:46:36,208 defmap: {}
DEBUG 2022-02-14 16:46:36,208 phismap: defaultdict(<class 'set'>, {})
DEBUG 2022-02-14 16:46:36,208 changing phismap: defaultdict(<class 'set'>, {})
DEBUG 2022-02-14 16:46:36,208 keep phismap: {}
DEBUG 2022-02-14 16:46:36,208 new_out: defaultdict(<class 'dict'>, {})
DEBUG 2022-02-14 16:46:36,208 ----------------------DONE Prune PHIs-----------------------
DEBUG 2022-02-14 16:46:36,208 block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$a2.0'}), (4, {'item': '$a2.0', 'res': '$4load_attr.1'}), (6, {'iterable': '$4load_attr.1', 'stores': ['$6unpack_sequence.2'], 'tupleobj': '$6unpack_sequence.3'}), (8, {'value': '$6unpack_sequence.2'}), (10, {'res': '$b10.4'}), (12, {'item': '$b10.4', 'res': '$12load_attr.5'}), (14, {'iterable': '$12load_attr.5', 'stores': ['$14unpack_sequence.6'], 'tupleobj': '$14unpack_sequence.7'}), (16, {'value': '$14unpack_sequence.6'}), (18, {'res': '$m18.8'}), (20, {'res': '$n20.9'}), (22, {'lhs': '$m18.8', 'rhs': '$n20.9', 'res': '$22compare_op.10'}), (24, {'pred': '$22compare_op.10'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={26: (), 34: ()})
DEBUG 2022-02-14 16:46:36,208 block_infos State(pc_initial=26 nstack_initial=0):
AdaptBlockInfo(insts=((26, {'res': '$26load_global.0'}), (28, {'res': '$const28.1'}), (30, {'func': '$26load_global.0', 'args': ['$const28.1'], 'res': '$30call_function.2'}), (32, {'exc': '$30call_function.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG 2022-02-14 16:46:36,208 block_infos State(pc_initial=34 nstack_initial=0):
AdaptBlockInfo(insts=((34, {'res': '$const34.0'}), (36, {'retval': '$const34.0', 'castval': '$36return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG 2022-02-14 16:46:36,209 label 0:
    a = arg(0, name=a)                       ['a']
    b = arg(1, name=b)                       ['b']
    $4load_attr.1 = getattr(value=a, attr=shape) ['$4load_attr.1', 'a']
    $6unpack_sequence.3 = exhaust_iter(value=$4load_attr.1, count=1) ['$4load_attr.1', '$6unpack_sequence.3']
    m = static_getitem(value=$6unpack_sequence.3, index=0, index_var=None, fn=<built-in function getitem>) ['$6unpack_sequence.3', 'm']
    $12load_attr.5 = getattr(value=b, attr=shape) ['$12load_attr.5', 'b']
    $14unpack_sequence.7 = exhaust_iter(value=$12load_attr.5, count=1) ['$12load_attr.5', '$14unpack_sequence.7']
    n = static_getitem(value=$14unpack_sequence.7, index=0, index_var=None, fn=<built-in function getitem>) ['$14unpack_sequence.7', 'n']
    $22compare_op.10 = m != n                ['$22compare_op.10', 'm', 'n']
    bool24 = global(bool: <class 'bool'>)    ['bool24']
    $24pred = call bool24($22compare_op.10, func=bool24, args=(Var($22compare_op.10, linalg.py:511),), kws=(), vararg=None, target=None) ['$22compare_op.10', '$24pred', 'bool24']
    branch $24pred, 26, 34                   ['$24pred']
label 26:
    $26load_global.0 = global(ValueError: <class 'ValueError'>) ['$26load_global.0']
    $const28.1 = const(str, incompatible array sizes for np.dot(a, b) (vector * vector)) ['$const28.1']
    $30call_function.2 = call $26load_global.0($const28.1, func=$26load_global.0, args=[Var($const28.1, linalg.py:512)], kws=(), vararg=None, target=None) ['$26load_global.0', '$30call_function.2', '$const28.1']
    raise $30call_function.2                 ['$30call_function.2']
label 34:
    $const34.0 = const(NoneType, None)       ['$const34.0']
    $36return_value.1 = cast(value=$const34.0) ['$36return_value.1', '$const34.0']
    return $36return_value.1                 ['$36return_value.1']

DEBUG 2022-02-14 16:46:36,212 ==== SSA block analysis pass on 0
DEBUG 2022-02-14 16:46:36,212 Running <numba.core.ssa._GatherDefsHandler object at 0x7f72033c3fa0>
DEBUG 2022-02-14 16:46:36,212 on stmt: a = arg(0, name=a)
DEBUG 2022-02-14 16:46:36,212 on stmt: b = arg(1, name=b)
DEBUG 2022-02-14 16:46:36,212 on stmt: $4load_attr.1 = getattr(value=a, attr=shape)
DEBUG 2022-02-14 16:46:36,212 on stmt: $6unpack_sequence.3 = exhaust_iter(value=$4load_attr.1, count=1)
DEBUG 2022-02-14 16:46:36,212 on stmt: m = static_getitem(value=$6unpack_sequence.3, index=0, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:46:36,212 on stmt: $12load_attr.5 = getattr(value=b, attr=shape)
DEBUG 2022-02-14 16:46:36,212 on stmt: $14unpack_sequence.7 = exhaust_iter(value=$12load_attr.5, count=1)
DEBUG 2022-02-14 16:46:36,212 on stmt: n = static_getitem(value=$14unpack_sequence.7, index=0, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:46:36,212 on stmt: $22compare_op.10 = m != n
DEBUG 2022-02-14 16:46:36,212 on stmt: bool24 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:46:36,212 on stmt: $24pred = call bool24($22compare_op.10, func=bool24, args=(Var($22compare_op.10, linalg.py:511),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:46:36,212 on stmt: branch $24pred, 26, 34
DEBUG 2022-02-14 16:46:36,212 ==== SSA block analysis pass on 26
DEBUG 2022-02-14 16:46:36,212 Running <numba.core.ssa._GatherDefsHandler object at 0x7f72033c3fa0>
DEBUG 2022-02-14 16:46:36,212 on stmt: $26load_global.0 = global(ValueError: <class 'ValueError'>)
DEBUG 2022-02-14 16:46:36,212 on stmt: $const28.1 = const(str, incompatible array sizes for np.dot(a, b) (vector * vector))
DEBUG 2022-02-14 16:46:36,212 on stmt: $30call_function.2 = call $26load_global.0($const28.1, func=$26load_global.0, args=[Var($const28.1, linalg.py:512)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:46:36,213 on stmt: <static> raise <class 'ValueError'>('incompatible array sizes for np.dot(a, b) (vector * vector)')
DEBUG 2022-02-14 16:46:36,213 ==== SSA block analysis pass on 34
DEBUG 2022-02-14 16:46:36,213 Running <numba.core.ssa._GatherDefsHandler object at 0x7f72033c3fa0>
DEBUG 2022-02-14 16:46:36,213 on stmt: $const34.0 = const(NoneType, None)
DEBUG 2022-02-14 16:46:36,213 on stmt: $36return_value.1 = cast(value=$const34.0)
DEBUG 2022-02-14 16:46:36,213 on stmt: return $36return_value.1
DEBUG 2022-02-14 16:46:36,213 defs defaultdict(<class 'list'>,
            {'$12load_attr.5': [<numba.core.ir.Assign object at 0x7f72033c3820>],
             '$14unpack_sequence.7': [<numba.core.ir.Assign object at 0x7f72033c3070>],
             '$22compare_op.10': [<numba.core.ir.Assign object at 0x7f720337e8e0>],
             '$24pred': [<numba.core.ir.Assign object at 0x7f720337eb50>],
             '$26load_global.0': [<numba.core.ir.Assign object at 0x7f720337e3a0>],
             '$30call_function.2': [<numba.core.ir.Assign object at 0x7f720337ef10>],
             '$36return_value.1': [<numba.core.ir.Assign object at 0x7f720338a370>],
             '$4load_attr.1': [<numba.core.ir.Assign object at 0x7f720337e550>],
             '$6unpack_sequence.3': [<numba.core.ir.Assign object at 0x7f720337e700>],
             '$const28.1': [<numba.core.ir.Assign object at 0x7f720337ed30>],
             '$const34.0': [<numba.core.ir.Assign object at 0x7f720338a1f0>],
             'a': [<numba.core.ir.Assign object at 0x7f7203444a30>],
             'b': [<numba.core.ir.Assign object at 0x7f720337e280>],
             'bool24': [<numba.core.ir.Assign object at 0x7f720337ea30>],
             'm': [<numba.core.ir.Assign object at 0x7f72033cf070>],
             'n': [<numba.core.ir.Assign object at 0x7f72033c3a60>]})
DEBUG 2022-02-14 16:46:36,213 SSA violators set()
DEBUG 2022-02-14 16:46:36,231 bytecode dump:
>          0	NOP(arg=None, lineno=309)
           2	LOAD_FAST(arg=0, lineno=309)
           4	LOAD_DEREF(arg=0, lineno=309)
           6	COMPARE_OP(arg=4, lineno=309)
           8	POP_JUMP_IF_FALSE(arg=18, lineno=309)
          10	LOAD_GLOBAL(arg=0, lineno=310)
          12	LOAD_CONST(arg=1, lineno=310)
          14	CALL_FUNCTION(arg=1, lineno=310)
          16	RAISE_VARARGS(arg=1, lineno=310)
>         18	LOAD_CONST(arg=0, lineno=310)
          20	RETURN_VALUE(arg=None, lineno=310)
DEBUG 2022-02-14 16:46:36,232 pending: deque([State(pc_initial=0 nstack_initial=0)])
DEBUG 2022-02-14 16:46:36,232 stack: []
DEBUG 2022-02-14 16:46:36,232 dispatch pc=0, inst=NOP(arg=None, lineno=309)
DEBUG 2022-02-14 16:46:36,232 stack []
DEBUG 2022-02-14 16:46:36,232 dispatch pc=2, inst=LOAD_FAST(arg=0, lineno=309)
DEBUG 2022-02-14 16:46:36,232 stack []
DEBUG 2022-02-14 16:46:36,232 dispatch pc=4, inst=LOAD_DEREF(arg=0, lineno=309)
DEBUG 2022-02-14 16:46:36,232 stack ['$n2.0']
DEBUG 2022-02-14 16:46:36,232 dispatch pc=6, inst=COMPARE_OP(arg=4, lineno=309)
DEBUG 2022-02-14 16:46:36,232 stack ['$n2.0', '$4load_deref.1']
DEBUG 2022-02-14 16:46:36,232 dispatch pc=8, inst=POP_JUMP_IF_FALSE(arg=18, lineno=309)
DEBUG 2022-02-14 16:46:36,232 stack ['$6compare_op.2']
DEBUG 2022-02-14 16:46:36,232 end state. edges=[Edge(pc=10, stack=(), blockstack=(), npush=0), Edge(pc=18, stack=(), blockstack=(), npush=0)]
DEBUG 2022-02-14 16:46:36,232 pending: deque([State(pc_initial=10 nstack_initial=0), State(pc_initial=18 nstack_initial=0)])
DEBUG 2022-02-14 16:46:36,232 stack: []
DEBUG 2022-02-14 16:46:36,232 dispatch pc=10, inst=LOAD_GLOBAL(arg=0, lineno=310)
DEBUG 2022-02-14 16:46:36,232 stack []
DEBUG 2022-02-14 16:46:36,233 dispatch pc=12, inst=LOAD_CONST(arg=1, lineno=310)
DEBUG 2022-02-14 16:46:36,233 stack ['$10load_global.0']
DEBUG 2022-02-14 16:46:36,233 dispatch pc=14, inst=CALL_FUNCTION(arg=1, lineno=310)
DEBUG 2022-02-14 16:46:36,233 stack ['$10load_global.0', '$const12.1']
DEBUG 2022-02-14 16:46:36,233 dispatch pc=16, inst=RAISE_VARARGS(arg=1, lineno=310)
DEBUG 2022-02-14 16:46:36,233 stack ['$14call_function.2']
DEBUG 2022-02-14 16:46:36,233 end state. edges=[]
DEBUG 2022-02-14 16:46:36,233 pending: deque([State(pc_initial=18 nstack_initial=0)])
DEBUG 2022-02-14 16:46:36,233 stack: []
DEBUG 2022-02-14 16:46:36,233 dispatch pc=18, inst=LOAD_CONST(arg=0, lineno=310)
DEBUG 2022-02-14 16:46:36,233 stack []
DEBUG 2022-02-14 16:46:36,233 dispatch pc=20, inst=RETURN_VALUE(arg=None, lineno=310)
DEBUG 2022-02-14 16:46:36,233 stack ['$const18.0']
DEBUG 2022-02-14 16:46:36,233 end state. edges=[]
DEBUG 2022-02-14 16:46:36,233 -------------------------Prune PHIs-------------------------
DEBUG 2022-02-14 16:46:36,233 Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=10 nstack_initial=0): set(),
             State(pc_initial=18 nstack_initial=0): set()})
DEBUG 2022-02-14 16:46:36,233 defmap: {}
DEBUG 2022-02-14 16:46:36,233 phismap: defaultdict(<class 'set'>, {})
DEBUG 2022-02-14 16:46:36,233 changing phismap: defaultdict(<class 'set'>, {})
DEBUG 2022-02-14 16:46:36,233 keep phismap: {}
DEBUG 2022-02-14 16:46:36,233 new_out: defaultdict(<class 'dict'>, {})
DEBUG 2022-02-14 16:46:36,234 ----------------------DONE Prune PHIs-----------------------
DEBUG 2022-02-14 16:46:36,234 block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$n2.0'}), (4, {'res': '$4load_deref.1'}), (6, {'lhs': '$n2.0', 'rhs': '$4load_deref.1', 'res': '$6compare_op.2'}), (8, {'pred': '$6compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={10: (), 18: ()})
DEBUG 2022-02-14 16:46:36,234 block_infos State(pc_initial=10 nstack_initial=0):
AdaptBlockInfo(insts=((10, {'res': '$10load_global.0'}), (12, {'res': '$const12.1'}), (14, {'func': '$10load_global.0', 'args': ['$const12.1'], 'res': '$14call_function.2'}), (16, {'exc': '$14call_function.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG 2022-02-14 16:46:36,234 block_infos State(pc_initial=18 nstack_initial=0):
AdaptBlockInfo(insts=((18, {'res': '$const18.0'}), (20, {'retval': '$const18.0', 'castval': '$20return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG 2022-02-14 16:46:36,234 label 0:
    n = arg(0, name=n)                       ['n']
    $4load_deref.1 = freevar(_maxint: 2147483647) ['$4load_deref.1']
    $6compare_op.2 = n > $4load_deref.1      ['$4load_deref.1', '$6compare_op.2', 'n']
    bool8 = global(bool: <class 'bool'>)     ['bool8']
    $8pred = call bool8($6compare_op.2, func=bool8, args=(Var($6compare_op.2, linalg.py:309),), kws=(), vararg=None, target=None) ['$6compare_op.2', '$8pred', 'bool8']
    branch $8pred, 10, 18                    ['$8pred']
label 10:
    $10load_global.0 = global(OverflowError: <class 'OverflowError'>) ['$10load_global.0']
    $const12.1 = const(str, array size too large to fit in C int) ['$const12.1']
    $14call_function.2 = call $10load_global.0($const12.1, func=$10load_global.0, args=[Var($const12.1, linalg.py:310)], kws=(), vararg=None, target=None) ['$10load_global.0', '$14call_function.2', '$const12.1']
    raise $14call_function.2                 ['$14call_function.2']
label 18:
    $const18.0 = const(NoneType, None)       ['$const18.0']
    $20return_value.1 = cast(value=$const18.0) ['$20return_value.1', '$const18.0']
    return $20return_value.1                 ['$20return_value.1']

DEBUG 2022-02-14 16:46:36,236 ==== SSA block analysis pass on 0
DEBUG 2022-02-14 16:46:36,236 Running <numba.core.ssa._GatherDefsHandler object at 0x7f72033e1970>
DEBUG 2022-02-14 16:46:36,236 on stmt: n = arg(0, name=n)
DEBUG 2022-02-14 16:46:36,236 on stmt: $4load_deref.1 = freevar(_maxint: 2147483647)
DEBUG 2022-02-14 16:46:36,236 on stmt: $6compare_op.2 = n > $4load_deref.1
DEBUG 2022-02-14 16:46:36,236 on stmt: bool8 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:46:36,236 on stmt: $8pred = call bool8($6compare_op.2, func=bool8, args=(Var($6compare_op.2, linalg.py:309),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:46:36,237 on stmt: branch $8pred, 10, 18
DEBUG 2022-02-14 16:46:36,237 ==== SSA block analysis pass on 10
DEBUG 2022-02-14 16:46:36,237 Running <numba.core.ssa._GatherDefsHandler object at 0x7f72033e1970>
DEBUG 2022-02-14 16:46:36,237 on stmt: $10load_global.0 = global(OverflowError: <class 'OverflowError'>)
DEBUG 2022-02-14 16:46:36,237 on stmt: $const12.1 = const(str, array size too large to fit in C int)
DEBUG 2022-02-14 16:46:36,237 on stmt: $14call_function.2 = call $10load_global.0($const12.1, func=$10load_global.0, args=[Var($const12.1, linalg.py:310)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:46:36,237 on stmt: <static> raise <class 'OverflowError'>('array size too large to fit in C int')
DEBUG 2022-02-14 16:46:36,237 ==== SSA block analysis pass on 18
DEBUG 2022-02-14 16:46:36,237 Running <numba.core.ssa._GatherDefsHandler object at 0x7f72033e1970>
DEBUG 2022-02-14 16:46:36,237 on stmt: $const18.0 = const(NoneType, None)
DEBUG 2022-02-14 16:46:36,237 on stmt: $20return_value.1 = cast(value=$const18.0)
DEBUG 2022-02-14 16:46:36,237 on stmt: return $20return_value.1
DEBUG 2022-02-14 16:46:36,237 defs defaultdict(<class 'list'>,
            {'$10load_global.0': [<numba.core.ir.Assign object at 0x7f72033e6970>],
             '$14call_function.2': [<numba.core.ir.Assign object at 0x7f72033e6220>],
             '$20return_value.1': [<numba.core.ir.Assign object at 0x7f720336d4c0>],
             '$4load_deref.1': [<numba.core.ir.Assign object at 0x7f72033e6d30>],
             '$6compare_op.2': [<numba.core.ir.Assign object at 0x7f72033e64c0>],
             '$8pred': [<numba.core.ir.Assign object at 0x7f72033e6e80>],
             '$const12.1': [<numba.core.ir.Assign object at 0x7f72033e6430>],
             '$const18.0': [<numba.core.ir.Assign object at 0x7f72033e6dc0>],
             'bool8': [<numba.core.ir.Assign object at 0x7f72033e6ca0>],
             'n': [<numba.core.ir.Assign object at 0x7f72033c5b80>]})
DEBUG 2022-02-14 16:46:36,237 SSA violators set()
DEBUG 2022-02-14 16:46:36,261 bytecode dump:
>          0	NOP(arg=None, lineno=486)
           2	LOAD_FAST(arg=0, lineno=486)
           4	LOAD_ATTR(arg=0, lineno=486)
           6	UNPACK_SEQUENCE(arg=2, lineno=486)
           8	STORE_FAST(arg=2, lineno=486)
          10	STORE_FAST(arg=3, lineno=486)
          12	LOAD_FAST(arg=1, lineno=487)
          14	LOAD_ATTR(arg=0, lineno=487)
          16	UNPACK_SEQUENCE(arg=1, lineno=487)
          18	STORE_FAST(arg=4, lineno=487)
          20	LOAD_FAST(arg=3, lineno=488)
          22	LOAD_CONST(arg=1, lineno=488)
          24	COMPARE_OP(arg=2, lineno=488)
          26	POP_JUMP_IF_FALSE(arg=44, lineno=488)
          28	LOAD_GLOBAL(arg=1, lineno=489)
          30	LOAD_METHOD(arg=2, lineno=489)
          32	LOAD_FAST(arg=2, lineno=489)
          34	BUILD_TUPLE(arg=1, lineno=489)
          36	LOAD_FAST(arg=0, lineno=489)
          38	LOAD_ATTR(arg=3, lineno=489)
          40	CALL_METHOD(arg=2, lineno=489)
          42	RETURN_VALUE(arg=None, lineno=489)
>         44	LOAD_GLOBAL(arg=1, lineno=490)
          46	LOAD_METHOD(arg=4, lineno=490)
          48	LOAD_FAST(arg=2, lineno=490)
          50	BUILD_TUPLE(arg=1, lineno=490)
          52	LOAD_FAST(arg=0, lineno=490)
          54	LOAD_ATTR(arg=3, lineno=490)
          56	CALL_METHOD(arg=2, lineno=490)
          58	STORE_FAST(arg=5, lineno=490)
          60	LOAD_GLOBAL(arg=1, lineno=491)
          62	LOAD_METHOD(arg=5, lineno=491)
          64	LOAD_FAST(arg=0, lineno=491)
          66	LOAD_FAST(arg=1, lineno=491)
          68	LOAD_FAST(arg=5, lineno=491)
          70	CALL_METHOD(arg=3, lineno=491)
          72	RETURN_VALUE(arg=None, lineno=491)
DEBUG 2022-02-14 16:46:36,261 pending: deque([State(pc_initial=0 nstack_initial=0)])
DEBUG 2022-02-14 16:46:36,261 stack: []
DEBUG 2022-02-14 16:46:36,261 dispatch pc=0, inst=NOP(arg=None, lineno=486)
DEBUG 2022-02-14 16:46:36,261 stack []
DEBUG 2022-02-14 16:46:36,261 dispatch pc=2, inst=LOAD_FAST(arg=0, lineno=486)
DEBUG 2022-02-14 16:46:36,261 stack []
DEBUG 2022-02-14 16:46:36,261 dispatch pc=4, inst=LOAD_ATTR(arg=0, lineno=486)
DEBUG 2022-02-14 16:46:36,261 stack ['$a2.0']
DEBUG 2022-02-14 16:46:36,261 dispatch pc=6, inst=UNPACK_SEQUENCE(arg=2, lineno=486)
DEBUG 2022-02-14 16:46:36,261 stack ['$4load_attr.1']
DEBUG 2022-02-14 16:46:36,261 dispatch pc=8, inst=STORE_FAST(arg=2, lineno=486)
DEBUG 2022-02-14 16:46:36,261 stack ['$6unpack_sequence.3', '$6unpack_sequence.2']
DEBUG 2022-02-14 16:46:36,261 dispatch pc=10, inst=STORE_FAST(arg=3, lineno=486)
DEBUG 2022-02-14 16:46:36,261 stack ['$6unpack_sequence.3']
DEBUG 2022-02-14 16:46:36,261 dispatch pc=12, inst=LOAD_FAST(arg=1, lineno=487)
DEBUG 2022-02-14 16:46:36,261 stack []
DEBUG 2022-02-14 16:46:36,261 dispatch pc=14, inst=LOAD_ATTR(arg=0, lineno=487)
DEBUG 2022-02-14 16:46:36,261 stack ['$b12.5']
DEBUG 2022-02-14 16:46:36,262 dispatch pc=16, inst=UNPACK_SEQUENCE(arg=1, lineno=487)
DEBUG 2022-02-14 16:46:36,262 stack ['$14load_attr.6']
DEBUG 2022-02-14 16:46:36,262 dispatch pc=18, inst=STORE_FAST(arg=4, lineno=487)
DEBUG 2022-02-14 16:46:36,262 stack ['$16unpack_sequence.7']
DEBUG 2022-02-14 16:46:36,262 dispatch pc=20, inst=LOAD_FAST(arg=3, lineno=488)
DEBUG 2022-02-14 16:46:36,262 stack []
DEBUG 2022-02-14 16:46:36,262 dispatch pc=22, inst=LOAD_CONST(arg=1, lineno=488)
DEBUG 2022-02-14 16:46:36,262 stack ['$n20.9']
DEBUG 2022-02-14 16:46:36,262 dispatch pc=24, inst=COMPARE_OP(arg=2, lineno=488)
DEBUG 2022-02-14 16:46:36,262 stack ['$n20.9', '$const22.10']
DEBUG 2022-02-14 16:46:36,262 dispatch pc=26, inst=POP_JUMP_IF_FALSE(arg=44, lineno=488)
DEBUG 2022-02-14 16:46:36,262 stack ['$24compare_op.11']
DEBUG 2022-02-14 16:46:36,262 end state. edges=[Edge(pc=28, stack=(), blockstack=(), npush=0), Edge(pc=44, stack=(), blockstack=(), npush=0)]
DEBUG 2022-02-14 16:46:36,262 pending: deque([State(pc_initial=28 nstack_initial=0), State(pc_initial=44 nstack_initial=0)])
DEBUG 2022-02-14 16:46:36,262 stack: []
DEBUG 2022-02-14 16:46:36,262 dispatch pc=28, inst=LOAD_GLOBAL(arg=1, lineno=489)
DEBUG 2022-02-14 16:46:36,262 stack []
DEBUG 2022-02-14 16:46:36,262 dispatch pc=30, inst=LOAD_METHOD(arg=2, lineno=489)
DEBUG 2022-02-14 16:46:36,262 stack ['$28load_global.0']
DEBUG 2022-02-14 16:46:36,262 dispatch pc=32, inst=LOAD_FAST(arg=2, lineno=489)
DEBUG 2022-02-14 16:46:36,263 stack ['$30load_method.1']
DEBUG 2022-02-14 16:46:36,263 dispatch pc=34, inst=BUILD_TUPLE(arg=1, lineno=489)
DEBUG 2022-02-14 16:46:36,263 stack ['$30load_method.1', '$m32.2']
DEBUG 2022-02-14 16:46:36,263 dispatch pc=36, inst=LOAD_FAST(arg=0, lineno=489)
DEBUG 2022-02-14 16:46:36,263 stack ['$30load_method.1', '$34build_tuple.3']
DEBUG 2022-02-14 16:46:36,263 dispatch pc=38, inst=LOAD_ATTR(arg=3, lineno=489)
DEBUG 2022-02-14 16:46:36,263 stack ['$30load_method.1', '$34build_tuple.3', '$a36.4']
DEBUG 2022-02-14 16:46:36,263 dispatch pc=40, inst=CALL_METHOD(arg=2, lineno=489)
DEBUG 2022-02-14 16:46:36,263 stack ['$30load_method.1', '$34build_tuple.3', '$38load_attr.5']
DEBUG 2022-02-14 16:46:36,263 dispatch pc=42, inst=RETURN_VALUE(arg=None, lineno=489)
DEBUG 2022-02-14 16:46:36,263 stack ['$40call_method.6']
DEBUG 2022-02-14 16:46:36,263 end state. edges=[]
DEBUG 2022-02-14 16:46:36,263 pending: deque([State(pc_initial=44 nstack_initial=0)])
DEBUG 2022-02-14 16:46:36,263 stack: []
DEBUG 2022-02-14 16:46:36,263 dispatch pc=44, inst=LOAD_GLOBAL(arg=1, lineno=490)
DEBUG 2022-02-14 16:46:36,263 stack []
DEBUG 2022-02-14 16:46:36,263 dispatch pc=46, inst=LOAD_METHOD(arg=4, lineno=490)
DEBUG 2022-02-14 16:46:36,263 stack ['$44load_global.0']
DEBUG 2022-02-14 16:46:36,263 dispatch pc=48, inst=LOAD_FAST(arg=2, lineno=490)
DEBUG 2022-02-14 16:46:36,263 stack ['$46load_method.1']
DEBUG 2022-02-14 16:46:36,263 dispatch pc=50, inst=BUILD_TUPLE(arg=1, lineno=490)
DEBUG 2022-02-14 16:46:36,264 stack ['$46load_method.1', '$m48.2']
DEBUG 2022-02-14 16:46:36,264 dispatch pc=52, inst=LOAD_FAST(arg=0, lineno=490)
DEBUG 2022-02-14 16:46:36,264 stack ['$46load_method.1', '$50build_tuple.3']
DEBUG 2022-02-14 16:46:36,264 dispatch pc=54, inst=LOAD_ATTR(arg=3, lineno=490)
DEBUG 2022-02-14 16:46:36,264 stack ['$46load_method.1', '$50build_tuple.3', '$a52.4']
DEBUG 2022-02-14 16:46:36,264 dispatch pc=56, inst=CALL_METHOD(arg=2, lineno=490)
DEBUG 2022-02-14 16:46:36,264 stack ['$46load_method.1', '$50build_tuple.3', '$54load_attr.5']
DEBUG 2022-02-14 16:46:36,264 dispatch pc=58, inst=STORE_FAST(arg=5, lineno=490)
DEBUG 2022-02-14 16:46:36,264 stack ['$56call_method.6']
DEBUG 2022-02-14 16:46:36,264 dispatch pc=60, inst=LOAD_GLOBAL(arg=1, lineno=491)
DEBUG 2022-02-14 16:46:36,264 stack []
DEBUG 2022-02-14 16:46:36,264 dispatch pc=62, inst=LOAD_METHOD(arg=5, lineno=491)
DEBUG 2022-02-14 16:46:36,264 stack ['$60load_global.7']
DEBUG 2022-02-14 16:46:36,264 dispatch pc=64, inst=LOAD_FAST(arg=0, lineno=491)
DEBUG 2022-02-14 16:46:36,264 stack ['$62load_method.8']
DEBUG 2022-02-14 16:46:36,264 dispatch pc=66, inst=LOAD_FAST(arg=1, lineno=491)
DEBUG 2022-02-14 16:46:36,264 stack ['$62load_method.8', '$a64.9']
DEBUG 2022-02-14 16:46:36,264 dispatch pc=68, inst=LOAD_FAST(arg=5, lineno=491)
DEBUG 2022-02-14 16:46:36,264 stack ['$62load_method.8', '$a64.9', '$b66.10']
DEBUG 2022-02-14 16:46:36,264 dispatch pc=70, inst=CALL_METHOD(arg=3, lineno=491)
DEBUG 2022-02-14 16:46:36,264 stack ['$62load_method.8', '$a64.9', '$b66.10', '$out68.11']
DEBUG 2022-02-14 16:46:36,265 dispatch pc=72, inst=RETURN_VALUE(arg=None, lineno=491)
DEBUG 2022-02-14 16:46:36,265 stack ['$70call_method.12']
DEBUG 2022-02-14 16:46:36,265 end state. edges=[]
DEBUG 2022-02-14 16:46:36,265 -------------------------Prune PHIs-------------------------
DEBUG 2022-02-14 16:46:36,265 Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=28 nstack_initial=0): set(),
             State(pc_initial=44 nstack_initial=0): set()})
DEBUG 2022-02-14 16:46:36,265 defmap: {}
DEBUG 2022-02-14 16:46:36,265 phismap: defaultdict(<class 'set'>, {})
DEBUG 2022-02-14 16:46:36,265 changing phismap: defaultdict(<class 'set'>, {})
DEBUG 2022-02-14 16:46:36,265 keep phismap: {}
DEBUG 2022-02-14 16:46:36,265 new_out: defaultdict(<class 'dict'>, {})
DEBUG 2022-02-14 16:46:36,265 ----------------------DONE Prune PHIs-----------------------
DEBUG 2022-02-14 16:46:36,265 block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$a2.0'}), (4, {'item': '$a2.0', 'res': '$4load_attr.1'}), (6, {'iterable': '$4load_attr.1', 'stores': ['$6unpack_sequence.2', '$6unpack_sequence.3'], 'tupleobj': '$6unpack_sequence.4'}), (8, {'value': '$6unpack_sequence.2'}), (10, {'value': '$6unpack_sequence.3'}), (12, {'res': '$b12.5'}), (14, {'item': '$b12.5', 'res': '$14load_attr.6'}), (16, {'iterable': '$14load_attr.6', 'stores': ['$16unpack_sequence.7'], 'tupleobj': '$16unpack_sequence.8'}), (18, {'value': '$16unpack_sequence.7'}), (20, {'res': '$n20.9'}), (22, {'res': '$const22.10'}), (24, {'lhs': '$n20.9', 'rhs': '$const22.10', 'res': '$24compare_op.11'}), (26, {'pred': '$24compare_op.11'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={28: (), 44: ()})
DEBUG 2022-02-14 16:46:36,265 block_infos State(pc_initial=28 nstack_initial=0):
AdaptBlockInfo(insts=((28, {'res': '$28load_global.0'}), (30, {'item': '$28load_global.0', 'res': '$30load_method.1'}), (32, {'res': '$m32.2'}), (34, {'items': ['$m32.2'], 'res': '$34build_tuple.3'}), (36, {'res': '$a36.4'}), (38, {'item': '$a36.4', 'res': '$38load_attr.5'}), (40, {'func': '$30load_method.1', 'args': ['$34build_tuple.3', '$38load_attr.5'], 'res': '$40call_method.6'}), (42, {'retval': '$40call_method.6', 'castval': '$42return_value.7'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG 2022-02-14 16:46:36,265 block_infos State(pc_initial=44 nstack_initial=0):
AdaptBlockInfo(insts=((44, {'res': '$44load_global.0'}), (46, {'item': '$44load_global.0', 'res': '$46load_method.1'}), (48, {'res': '$m48.2'}), (50, {'items': ['$m48.2'], 'res': '$50build_tuple.3'}), (52, {'res': '$a52.4'}), (54, {'item': '$a52.4', 'res': '$54load_attr.5'}), (56, {'func': '$46load_method.1', 'args': ['$50build_tuple.3', '$54load_attr.5'], 'res': '$56call_method.6'}), (58, {'value': '$56call_method.6'}), (60, {'res': '$60load_global.7'}), (62, {'item': '$60load_global.7', 'res': '$62load_method.8'}), (64, {'res': '$a64.9'}), (66, {'res': '$b66.10'}), (68, {'res': '$out68.11'}), (70, {'func': '$62load_method.8', 'args': ['$a64.9', '$b66.10', '$out68.11'], 'res': '$70call_method.12'}), (72, {'retval': '$70call_method.12', 'castval': '$72return_value.13'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG 2022-02-14 16:46:36,266 label 0:
    a = arg(0, name=a)                       ['a']
    b = arg(1, name=b)                       ['b']
    $4load_attr.1 = getattr(value=a, attr=shape) ['$4load_attr.1', 'a']
    $6unpack_sequence.4 = exhaust_iter(value=$4load_attr.1, count=2) ['$4load_attr.1', '$6unpack_sequence.4']
    $6unpack_sequence.2 = static_getitem(value=$6unpack_sequence.4, index=0, index_var=None, fn=<built-in function getitem>) ['$6unpack_sequence.2', '$6unpack_sequence.4']
    $6unpack_sequence.3 = static_getitem(value=$6unpack_sequence.4, index=1, index_var=None, fn=<built-in function getitem>) ['$6unpack_sequence.3', '$6unpack_sequence.4']
    m = $6unpack_sequence.2                  ['$6unpack_sequence.2', 'm']
    n = $6unpack_sequence.3                  ['$6unpack_sequence.3', 'n']
    $14load_attr.6 = getattr(value=b, attr=shape) ['$14load_attr.6', 'b']
    $16unpack_sequence.8 = exhaust_iter(value=$14load_attr.6, count=1) ['$14load_attr.6', '$16unpack_sequence.8']
    _n = static_getitem(value=$16unpack_sequence.8, index=0, index_var=None, fn=<built-in function getitem>) ['$16unpack_sequence.8', '_n']
    $const22.10 = const(int, 0)              ['$const22.10']
    $24compare_op.11 = n == $const22.10      ['$24compare_op.11', '$const22.10', 'n']
    bool26 = global(bool: <class 'bool'>)    ['bool26']
    $26pred = call bool26($24compare_op.11, func=bool26, args=(Var($24compare_op.11, linalg.py:488),), kws=(), vararg=None, target=None) ['$24compare_op.11', '$26pred', 'bool26']
    branch $26pred, 28, 44                   ['$26pred']
label 28:
    $28load_global.0 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>) ['$28load_global.0']
    $30load_method.1 = getattr(value=$28load_global.0, attr=zeros) ['$28load_global.0', '$30load_method.1']
    $34build_tuple.3 = build_tuple(items=[Var(m, linalg.py:486)]) ['$34build_tuple.3', 'm']
    $38load_attr.5 = getattr(value=a, attr=dtype) ['$38load_attr.5', 'a']
    $40call_method.6 = call $30load_method.1($34build_tuple.3, $38load_attr.5, func=$30load_method.1, args=[Var($34build_tuple.3, linalg.py:489), Var($38load_attr.5, linalg.py:489)], kws=(), vararg=None, target=None) ['$30load_method.1', '$34build_tuple.3', '$38load_attr.5', '$40call_method.6']
    $42return_value.7 = cast(value=$40call_method.6) ['$40call_method.6', '$42return_value.7']
    return $42return_value.7                 ['$42return_value.7']
label 44:
    $44load_global.0 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>) ['$44load_global.0']
    $46load_method.1 = getattr(value=$44load_global.0, attr=empty) ['$44load_global.0', '$46load_method.1']
    $50build_tuple.3 = build_tuple(items=[Var(m, linalg.py:486)]) ['$50build_tuple.3', 'm']
    $54load_attr.5 = getattr(value=a, attr=dtype) ['$54load_attr.5', 'a']
    out = call $46load_method.1($50build_tuple.3, $54load_attr.5, func=$46load_method.1, args=[Var($50build_tuple.3, linalg.py:490), Var($54load_attr.5, linalg.py:490)], kws=(), vararg=None, target=None) ['$46load_method.1', '$50build_tuple.3', '$54load_attr.5', 'out']
    $60load_global.7 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>) ['$60load_global.7']
    $62load_method.8 = getattr(value=$60load_global.7, attr=dot) ['$60load_global.7', '$62load_method.8']
    $70call_method.12 = call $62load_method.8(a, b, out, func=$62load_method.8, args=[Var(a, linalg.py:486), Var(b, linalg.py:486), Var(out, linalg.py:490)], kws=(), vararg=None, target=None) ['$62load_method.8', '$70call_method.12', 'a', 'b', 'out']
    $72return_value.13 = cast(value=$70call_method.12) ['$70call_method.12', '$72return_value.13']
    return $72return_value.13                ['$72return_value.13']

DEBUG 2022-02-14 16:46:36,269 ==== SSA block analysis pass on 0
DEBUG 2022-02-14 16:46:36,270 Running <numba.core.ssa._GatherDefsHandler object at 0x7f720330bee0>
DEBUG 2022-02-14 16:46:36,270 on stmt: a = arg(0, name=a)
DEBUG 2022-02-14 16:46:36,270 on stmt: b = arg(1, name=b)
DEBUG 2022-02-14 16:46:36,270 on stmt: $4load_attr.1 = getattr(value=a, attr=shape)
DEBUG 2022-02-14 16:46:36,270 on stmt: $6unpack_sequence.4 = exhaust_iter(value=$4load_attr.1, count=2)
DEBUG 2022-02-14 16:46:36,270 on stmt: $6unpack_sequence.2 = static_getitem(value=$6unpack_sequence.4, index=0, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:46:36,270 on stmt: $6unpack_sequence.3 = static_getitem(value=$6unpack_sequence.4, index=1, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:46:36,270 on stmt: m = $6unpack_sequence.2
DEBUG 2022-02-14 16:46:36,270 on stmt: n = $6unpack_sequence.3
DEBUG 2022-02-14 16:46:36,270 on stmt: $14load_attr.6 = getattr(value=b, attr=shape)
DEBUG 2022-02-14 16:46:36,270 on stmt: $16unpack_sequence.8 = exhaust_iter(value=$14load_attr.6, count=1)
DEBUG 2022-02-14 16:46:36,270 on stmt: _n = static_getitem(value=$16unpack_sequence.8, index=0, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:46:36,270 on stmt: $const22.10 = const(int, 0)
DEBUG 2022-02-14 16:46:36,270 on stmt: $24compare_op.11 = n == $const22.10
DEBUG 2022-02-14 16:46:36,270 on stmt: bool26 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:46:36,270 on stmt: $26pred = call bool26($24compare_op.11, func=bool26, args=(Var($24compare_op.11, linalg.py:488),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:46:36,270 on stmt: branch $26pred, 28, 44
DEBUG 2022-02-14 16:46:36,270 ==== SSA block analysis pass on 28
DEBUG 2022-02-14 16:46:36,270 Running <numba.core.ssa._GatherDefsHandler object at 0x7f720330bee0>
DEBUG 2022-02-14 16:46:36,270 on stmt: $28load_global.0 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:46:36,271 on stmt: $30load_method.1 = getattr(value=$28load_global.0, attr=zeros)
DEBUG 2022-02-14 16:46:36,271 on stmt: $34build_tuple.3 = build_tuple(items=[Var(m, linalg.py:486)])
DEBUG 2022-02-14 16:46:36,271 on stmt: $38load_attr.5 = getattr(value=a, attr=dtype)
DEBUG 2022-02-14 16:46:36,271 on stmt: $40call_method.6 = call $30load_method.1($34build_tuple.3, $38load_attr.5, func=$30load_method.1, args=[Var($34build_tuple.3, linalg.py:489), Var($38load_attr.5, linalg.py:489)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:46:36,271 on stmt: $42return_value.7 = cast(value=$40call_method.6)
DEBUG 2022-02-14 16:46:36,271 on stmt: return $42return_value.7
DEBUG 2022-02-14 16:46:36,271 ==== SSA block analysis pass on 44
DEBUG 2022-02-14 16:46:36,271 Running <numba.core.ssa._GatherDefsHandler object at 0x7f720330bee0>
DEBUG 2022-02-14 16:46:36,271 on stmt: $44load_global.0 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:46:36,271 on stmt: $46load_method.1 = getattr(value=$44load_global.0, attr=empty)
DEBUG 2022-02-14 16:46:36,271 on stmt: $50build_tuple.3 = build_tuple(items=[Var(m, linalg.py:486)])
DEBUG 2022-02-14 16:46:36,271 on stmt: $54load_attr.5 = getattr(value=a, attr=dtype)
DEBUG 2022-02-14 16:46:36,271 on stmt: out = call $46load_method.1($50build_tuple.3, $54load_attr.5, func=$46load_method.1, args=[Var($50build_tuple.3, linalg.py:490), Var($54load_attr.5, linalg.py:490)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:46:36,271 on stmt: $60load_global.7 = global(np: <module 'numpy' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numpy/__init__.py'>)
DEBUG 2022-02-14 16:46:36,271 on stmt: $62load_method.8 = getattr(value=$60load_global.7, attr=dot)
DEBUG 2022-02-14 16:46:36,271 on stmt: $70call_method.12 = call $62load_method.8(a, b, out, func=$62load_method.8, args=[Var(a, linalg.py:486), Var(b, linalg.py:486), Var(out, linalg.py:490)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:46:36,271 on stmt: $72return_value.13 = cast(value=$70call_method.12)
DEBUG 2022-02-14 16:46:36,271 on stmt: return $72return_value.13
DEBUG 2022-02-14 16:46:36,272 defs defaultdict(<class 'list'>,
            {'$14load_attr.6': [<numba.core.ir.Assign object at 0x7f7203306a60>],
             '$16unpack_sequence.8': [<numba.core.ir.Assign object at 0x7f7203306c10>],
             '$24compare_op.11': [<numba.core.ir.Assign object at 0x7f7203300b80>],
             '$26pred': [<numba.core.ir.Assign object at 0x7f72033003a0>],
             '$28load_global.0': [<numba.core.ir.Assign object at 0x7f72032fbd30>],
             '$30load_method.1': [<numba.core.ir.Assign object at 0x7f7203306970>],
             '$34build_tuple.3': [<numba.core.ir.Assign object at 0x7f72033091f0>],
             '$38load_attr.5': [<numba.core.ir.Assign object at 0x7f7203309460>],
             '$40call_method.6': [<numba.core.ir.Assign object at 0x7f7203309670>],
             '$42return_value.7': [<numba.core.ir.Assign object at 0x7f7203309760>],
             '$44load_global.0': [<numba.core.ir.Assign object at 0x7f7203309940>],
             '$46load_method.1': [<numba.core.ir.Assign object at 0x7f7203309ac0>],
             '$4load_attr.1': [<numba.core.ir.Assign object at 0x7f72033061c0>],
             '$50build_tuple.3': [<numba.core.ir.Assign object at 0x7f7203309d90>],
             '$54load_attr.5': [<numba.core.ir.Assign object at 0x7f720330b040>],
             '$60load_global.7': [<numba.core.ir.Assign object at 0x7f720330b460>],
             '$62load_method.8': [<numba.core.ir.Assign object at 0x7f720330b5e0>],
             '$6unpack_sequence.2': [<numba.core.ir.Assign object at 0x7f72033064c0>],
             '$6unpack_sequence.3': [<numba.core.ir.Assign object at 0x7f72033065e0>],
             '$6unpack_sequence.4': [<numba.core.ir.Assign object at 0x7f7203306370>],
             '$70call_method.12': [<numba.core.ir.Assign object at 0x7f720330bb50>],
             '$72return_value.13': [<numba.core.ir.Assign object at 0x7f720330bc40>],
             '$const22.10': [<numba.core.ir.Assign object at 0x7f7203300d30>],
             '_n': [<numba.core.ir.Assign object at 0x7f7203306d60>],
             'a': [<numba.core.ir.Assign object at 0x7f7203300070>],
             'b': [<numba.core.ir.Assign object at 0x7f7203300ee0>],
             'bool26': [<numba.core.ir.Assign object at 0x7f7203300a30>],
             'm': [<numba.core.ir.Assign object at 0x7f72033066a0>],
             'n': [<numba.core.ir.Assign object at 0x7f72033067c0>],
             'out': [<numba.core.ir.Assign object at 0x7f720330b250>]})
DEBUG 2022-02-14 16:46:36,272 SSA violators set()
DEBUG 2022-02-14 16:46:36,276 bytecode dump:
>          0	NOP(arg=None, lineno=3)
           2	LOAD_GLOBAL(arg=0, lineno=3)
           4	LOAD_FAST(arg=0, lineno=3)
           6	LOAD_FAST(arg=1, lineno=3)
           8	CALL_FUNCTION(arg=2, lineno=3)
          10	RETURN_VALUE(arg=None, lineno=3)
DEBUG 2022-02-14 16:46:36,276 pending: deque([State(pc_initial=0 nstack_initial=0)])
DEBUG 2022-02-14 16:46:36,276 stack: []
DEBUG 2022-02-14 16:46:36,276 dispatch pc=0, inst=NOP(arg=None, lineno=3)
DEBUG 2022-02-14 16:46:36,276 stack []
DEBUG 2022-02-14 16:46:36,276 dispatch pc=2, inst=LOAD_GLOBAL(arg=0, lineno=3)
DEBUG 2022-02-14 16:46:36,276 stack []
DEBUG 2022-02-14 16:46:36,276 dispatch pc=4, inst=LOAD_FAST(arg=0, lineno=3)
DEBUG 2022-02-14 16:46:36,276 stack ['$2load_global.0']
DEBUG 2022-02-14 16:46:36,276 dispatch pc=6, inst=LOAD_FAST(arg=1, lineno=3)
DEBUG 2022-02-14 16:46:36,276 stack ['$2load_global.0', '$tmp04.1']
DEBUG 2022-02-14 16:46:36,276 dispatch pc=8, inst=CALL_FUNCTION(arg=2, lineno=3)
DEBUG 2022-02-14 16:46:36,276 stack ['$2load_global.0', '$tmp04.1', '$tmp16.2']
DEBUG 2022-02-14 16:46:36,276 dispatch pc=10, inst=RETURN_VALUE(arg=None, lineno=3)
DEBUG 2022-02-14 16:46:36,276 stack ['$8call_function.3']
DEBUG 2022-02-14 16:46:36,276 end state. edges=[]
DEBUG 2022-02-14 16:46:36,276 -------------------------Prune PHIs-------------------------
DEBUG 2022-02-14 16:46:36,277 Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
DEBUG 2022-02-14 16:46:36,277 defmap: {}
DEBUG 2022-02-14 16:46:36,277 phismap: defaultdict(<class 'set'>, {})
DEBUG 2022-02-14 16:46:36,277 changing phismap: defaultdict(<class 'set'>, {})
DEBUG 2022-02-14 16:46:36,277 keep phismap: {}
DEBUG 2022-02-14 16:46:36,277 new_out: defaultdict(<class 'dict'>, {})
DEBUG 2022-02-14 16:46:36,277 ----------------------DONE Prune PHIs-----------------------
DEBUG 2022-02-14 16:46:36,277 block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$2load_global.0'}), (4, {'res': '$tmp04.1'}), (6, {'res': '$tmp16.2'}), (8, {'func': '$2load_global.0', 'args': ['$tmp04.1', '$tmp16.2'], 'res': '$8call_function.3'}), (10, {'retval': '$8call_function.3', 'castval': '$10return_value.4'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG 2022-02-14 16:46:36,277 label 0:
    tmp0 = arg(0, name=tmp0)                 ['tmp0']
    tmp1 = arg(1, name=tmp1)                 ['tmp1']
    $2load_global.0 = global(intrin: <intrinsic stub>) ['$2load_global.0']
    $8call_function.3 = call $2load_global.0(tmp0, tmp1, func=$2load_global.0, args=[Var(tmp0, <string>:3), Var(tmp1, <string>:3)], kws=(), vararg=None, target=None) ['$2load_global.0', '$8call_function.3', 'tmp0', 'tmp1']
    $10return_value.4 = cast(value=$8call_function.3) ['$10return_value.4', '$8call_function.3']
    return $10return_value.4                 ['$10return_value.4']

DEBUG 2022-02-14 16:46:36,278 ==== SSA block analysis pass on 0
DEBUG 2022-02-14 16:46:36,278 Running <numba.core.ssa._GatherDefsHandler object at 0x7f7203316fa0>
DEBUG 2022-02-14 16:46:36,279 on stmt: tmp0 = arg(0, name=tmp0)
DEBUG 2022-02-14 16:46:36,279 on stmt: tmp1 = arg(1, name=tmp1)
DEBUG 2022-02-14 16:46:36,279 on stmt: $2load_global.0 = global(intrin: <intrinsic stub>)
DEBUG 2022-02-14 16:46:36,279 on stmt: $8call_function.3 = call $2load_global.0(tmp0, tmp1, func=$2load_global.0, args=[Var(tmp0, <string>:3), Var(tmp1, <string>:3)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:46:36,279 on stmt: $10return_value.4 = cast(value=$8call_function.3)
DEBUG 2022-02-14 16:46:36,279 on stmt: return $10return_value.4
DEBUG 2022-02-14 16:46:36,279 defs defaultdict(<class 'list'>,
            {'$10return_value.4': [<numba.core.ir.Assign object at 0x7f720331f2b0>],
             '$2load_global.0': [<numba.core.ir.Assign object at 0x7f720331ad30>],
             '$8call_function.3': [<numba.core.ir.Assign object at 0x7f720331f190>],
             'tmp0': [<numba.core.ir.Assign object at 0x7f720331a0a0>],
             'tmp1': [<numba.core.ir.Assign object at 0x7f720331abb0>]})
DEBUG 2022-02-14 16:46:36,279 SSA violators set()
DEBUG 2022-02-14 16:46:36,309 bytecode dump:
>          0	NOP(arg=None, lineno=3)
           2	LOAD_GLOBAL(arg=0, lineno=3)
           4	LOAD_FAST(arg=0, lineno=3)
           6	LOAD_FAST(arg=1, lineno=3)
           8	CALL_FUNCTION(arg=2, lineno=3)
          10	RETURN_VALUE(arg=None, lineno=3)
DEBUG 2022-02-14 16:46:36,309 pending: deque([State(pc_initial=0 nstack_initial=0)])
DEBUG 2022-02-14 16:46:36,309 stack: []
DEBUG 2022-02-14 16:46:36,309 dispatch pc=0, inst=NOP(arg=None, lineno=3)
DEBUG 2022-02-14 16:46:36,309 stack []
DEBUG 2022-02-14 16:46:36,309 dispatch pc=2, inst=LOAD_GLOBAL(arg=0, lineno=3)
DEBUG 2022-02-14 16:46:36,309 stack []
DEBUG 2022-02-14 16:46:36,309 dispatch pc=4, inst=LOAD_FAST(arg=0, lineno=3)
DEBUG 2022-02-14 16:46:36,309 stack ['$2load_global.0']
DEBUG 2022-02-14 16:46:36,309 dispatch pc=6, inst=LOAD_FAST(arg=1, lineno=3)
DEBUG 2022-02-14 16:46:36,309 stack ['$2load_global.0', '$tmp04.1']
DEBUG 2022-02-14 16:46:36,309 dispatch pc=8, inst=CALL_FUNCTION(arg=2, lineno=3)
DEBUG 2022-02-14 16:46:36,309 stack ['$2load_global.0', '$tmp04.1', '$tmp16.2']
DEBUG 2022-02-14 16:46:36,310 dispatch pc=10, inst=RETURN_VALUE(arg=None, lineno=3)
DEBUG 2022-02-14 16:46:36,310 stack ['$8call_function.3']
DEBUG 2022-02-14 16:46:36,310 end state. edges=[]
DEBUG 2022-02-14 16:46:36,310 -------------------------Prune PHIs-------------------------
DEBUG 2022-02-14 16:46:36,310 Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
DEBUG 2022-02-14 16:46:36,310 defmap: {}
DEBUG 2022-02-14 16:46:36,310 phismap: defaultdict(<class 'set'>, {})
DEBUG 2022-02-14 16:46:36,310 changing phismap: defaultdict(<class 'set'>, {})
DEBUG 2022-02-14 16:46:36,310 keep phismap: {}
DEBUG 2022-02-14 16:46:36,310 new_out: defaultdict(<class 'dict'>, {})
DEBUG 2022-02-14 16:46:36,310 ----------------------DONE Prune PHIs-----------------------
DEBUG 2022-02-14 16:46:36,310 block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$2load_global.0'}), (4, {'res': '$tmp04.1'}), (6, {'res': '$tmp16.2'}), (8, {'func': '$2load_global.0', 'args': ['$tmp04.1', '$tmp16.2'], 'res': '$8call_function.3'}), (10, {'retval': '$8call_function.3', 'castval': '$10return_value.4'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG 2022-02-14 16:46:36,310 label 0:
    tmp0 = arg(0, name=tmp0)                 ['tmp0']
    tmp1 = arg(1, name=tmp1)                 ['tmp1']
    $2load_global.0 = global(intrin: <intrinsic stub>) ['$2load_global.0']
    $8call_function.3 = call $2load_global.0(tmp0, tmp1, func=$2load_global.0, args=[Var(tmp0, <string>:3), Var(tmp1, <string>:3)], kws=(), vararg=None, target=None) ['$2load_global.0', '$8call_function.3', 'tmp0', 'tmp1']
    $10return_value.4 = cast(value=$8call_function.3) ['$10return_value.4', '$8call_function.3']
    return $10return_value.4                 ['$10return_value.4']

DEBUG 2022-02-14 16:46:36,312 ==== SSA block analysis pass on 0
DEBUG 2022-02-14 16:46:36,312 Running <numba.core.ssa._GatherDefsHandler object at 0x7f72032dfa60>
DEBUG 2022-02-14 16:46:36,312 on stmt: tmp0 = arg(0, name=tmp0)
DEBUG 2022-02-14 16:46:36,312 on stmt: tmp1 = arg(1, name=tmp1)
DEBUG 2022-02-14 16:46:36,312 on stmt: $2load_global.0 = global(intrin: <intrinsic stub>)
DEBUG 2022-02-14 16:46:36,312 on stmt: $8call_function.3 = call $2load_global.0(tmp0, tmp1, func=$2load_global.0, args=[Var(tmp0, <string>:3), Var(tmp1, <string>:3)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:46:36,312 on stmt: $10return_value.4 = cast(value=$8call_function.3)
DEBUG 2022-02-14 16:46:36,312 on stmt: return $10return_value.4
DEBUG 2022-02-14 16:46:36,312 defs defaultdict(<class 'list'>,
            {'$10return_value.4': [<numba.core.ir.Assign object at 0x7f7203266eb0>],
             '$2load_global.0': [<numba.core.ir.Assign object at 0x7f7203266970>],
             '$8call_function.3': [<numba.core.ir.Assign object at 0x7f7203266d90>],
             'tmp0': [<numba.core.ir.Assign object at 0x7f72032661f0>],
             'tmp1': [<numba.core.ir.Assign object at 0x7f72032660d0>]})
DEBUG 2022-02-14 16:46:36,312 SSA violators set()
DEBUG 2022-02-14 16:46:36,339 bytecode dump:
>          0	NOP(arg=None, lineno=3)
           2	LOAD_GLOBAL(arg=0, lineno=3)
           4	LOAD_FAST(arg=0, lineno=3)
           6	LOAD_FAST(arg=1, lineno=3)
           8	LOAD_FAST(arg=2, lineno=3)
          10	CALL_FUNCTION(arg=3, lineno=3)
          12	RETURN_VALUE(arg=None, lineno=3)
DEBUG 2022-02-14 16:46:36,339 pending: deque([State(pc_initial=0 nstack_initial=0)])
DEBUG 2022-02-14 16:46:36,339 stack: []
DEBUG 2022-02-14 16:46:36,339 dispatch pc=0, inst=NOP(arg=None, lineno=3)
DEBUG 2022-02-14 16:46:36,339 stack []
DEBUG 2022-02-14 16:46:36,339 dispatch pc=2, inst=LOAD_GLOBAL(arg=0, lineno=3)
DEBUG 2022-02-14 16:46:36,339 stack []
DEBUG 2022-02-14 16:46:36,340 dispatch pc=4, inst=LOAD_FAST(arg=0, lineno=3)
DEBUG 2022-02-14 16:46:36,340 stack ['$2load_global.0']
DEBUG 2022-02-14 16:46:36,340 dispatch pc=6, inst=LOAD_FAST(arg=1, lineno=3)
DEBUG 2022-02-14 16:46:36,340 stack ['$2load_global.0', '$tmp04.1']
DEBUG 2022-02-14 16:46:36,340 dispatch pc=8, inst=LOAD_FAST(arg=2, lineno=3)
DEBUG 2022-02-14 16:46:36,340 stack ['$2load_global.0', '$tmp04.1', '$tmp16.2']
DEBUG 2022-02-14 16:46:36,340 dispatch pc=10, inst=CALL_FUNCTION(arg=3, lineno=3)
DEBUG 2022-02-14 16:46:36,340 stack ['$2load_global.0', '$tmp04.1', '$tmp16.2', '$tmp28.3']
DEBUG 2022-02-14 16:46:36,340 dispatch pc=12, inst=RETURN_VALUE(arg=None, lineno=3)
DEBUG 2022-02-14 16:46:36,340 stack ['$10call_function.4']
DEBUG 2022-02-14 16:46:36,340 end state. edges=[]
DEBUG 2022-02-14 16:46:36,340 -------------------------Prune PHIs-------------------------
DEBUG 2022-02-14 16:46:36,340 Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
DEBUG 2022-02-14 16:46:36,340 defmap: {}
DEBUG 2022-02-14 16:46:36,340 phismap: defaultdict(<class 'set'>, {})
DEBUG 2022-02-14 16:46:36,340 changing phismap: defaultdict(<class 'set'>, {})
DEBUG 2022-02-14 16:46:36,340 keep phismap: {}
DEBUG 2022-02-14 16:46:36,340 new_out: defaultdict(<class 'dict'>, {})
DEBUG 2022-02-14 16:46:36,341 ----------------------DONE Prune PHIs-----------------------
DEBUG 2022-02-14 16:46:36,341 block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$2load_global.0'}), (4, {'res': '$tmp04.1'}), (6, {'res': '$tmp16.2'}), (8, {'res': '$tmp28.3'}), (10, {'func': '$2load_global.0', 'args': ['$tmp04.1', '$tmp16.2', '$tmp28.3'], 'res': '$10call_function.4'}), (12, {'retval': '$10call_function.4', 'castval': '$12return_value.5'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG 2022-02-14 16:46:36,341 label 0:
    tmp0 = arg(0, name=tmp0)                 ['tmp0']
    tmp1 = arg(1, name=tmp1)                 ['tmp1']
    tmp2 = arg(2, name=tmp2)                 ['tmp2']
    $2load_global.0 = global(intrin: <intrinsic stub>) ['$2load_global.0']
    $10call_function.4 = call $2load_global.0(tmp0, tmp1, tmp2, func=$2load_global.0, args=[Var(tmp0, <string>:3), Var(tmp1, <string>:3), Var(tmp2, <string>:3)], kws=(), vararg=None, target=None) ['$10call_function.4', '$2load_global.0', 'tmp0', 'tmp1', 'tmp2']
    $12return_value.5 = cast(value=$10call_function.4) ['$10call_function.4', '$12return_value.5']
    return $12return_value.5                 ['$12return_value.5']

DEBUG 2022-02-14 16:46:36,342 ==== SSA block analysis pass on 0
DEBUG 2022-02-14 16:46:36,342 Running <numba.core.ssa._GatherDefsHandler object at 0x7f720322c1c0>
DEBUG 2022-02-14 16:46:36,342 on stmt: tmp0 = arg(0, name=tmp0)
DEBUG 2022-02-14 16:46:36,342 on stmt: tmp1 = arg(1, name=tmp1)
DEBUG 2022-02-14 16:46:36,342 on stmt: tmp2 = arg(2, name=tmp2)
DEBUG 2022-02-14 16:46:36,342 on stmt: $2load_global.0 = global(intrin: <intrinsic stub>)
DEBUG 2022-02-14 16:46:36,343 on stmt: $10call_function.4 = call $2load_global.0(tmp0, tmp1, tmp2, func=$2load_global.0, args=[Var(tmp0, <string>:3), Var(tmp1, <string>:3), Var(tmp2, <string>:3)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:46:36,343 on stmt: $12return_value.5 = cast(value=$10call_function.4)
DEBUG 2022-02-14 16:46:36,343 on stmt: return $12return_value.5
DEBUG 2022-02-14 16:46:36,343 defs defaultdict(<class 'list'>,
            {'$10call_function.4': [<numba.core.ir.Assign object at 0x7f720322cb50>],
             '$12return_value.5': [<numba.core.ir.Assign object at 0x7f720322ca30>],
             '$2load_global.0': [<numba.core.ir.Assign object at 0x7f720322cf10>],
             'tmp0': [<numba.core.ir.Assign object at 0x7f720322c2b0>],
             'tmp1': [<numba.core.ir.Assign object at 0x7f720322c310>],
             'tmp2': [<numba.core.ir.Assign object at 0x7f720322cd90>]})
DEBUG 2022-02-14 16:46:36,343 SSA violators set()
DEBUG 2022-02-14 16:46:36,349 bytecode dump:
>          0	NOP(arg=None, lineno=571)
           2	LOAD_FAST(arg=0, lineno=571)
           4	LOAD_ATTR(arg=0, lineno=571)
           6	UNPACK_SEQUENCE(arg=2, lineno=571)
           8	STORE_FAST(arg=3, lineno=571)
          10	STORE_FAST(arg=4, lineno=571)
          12	LOAD_FAST(arg=1, lineno=572)
          14	LOAD_ATTR(arg=0, lineno=572)
          16	UNPACK_SEQUENCE(arg=1, lineno=572)
          18	STORE_FAST(arg=5, lineno=572)
          20	LOAD_FAST(arg=5, lineno=573)
          22	LOAD_FAST(arg=4, lineno=573)
          24	COMPARE_OP(arg=3, lineno=573)
          26	POP_JUMP_IF_FALSE(arg=36, lineno=573)
          28	LOAD_GLOBAL(arg=1, lineno=574)
          30	LOAD_CONST(arg=1, lineno=574)
          32	CALL_FUNCTION(arg=1, lineno=574)
          34	RAISE_VARARGS(arg=1, lineno=574)
>         36	LOAD_FAST(arg=2, lineno=576)
          38	LOAD_ATTR(arg=0, lineno=576)
          40	LOAD_FAST(arg=3, lineno=576)
          42	BUILD_TUPLE(arg=1, lineno=576)
          44	COMPARE_OP(arg=3, lineno=576)
          46	POP_JUMP_IF_FALSE(arg=56, lineno=576)
          48	LOAD_GLOBAL(arg=1, lineno=577)
          50	LOAD_CONST(arg=2, lineno=577)
          52	CALL_FUNCTION(arg=1, lineno=577)
          54	RAISE_VARARGS(arg=1, lineno=577)
>         56	LOAD_CONST(arg=0, lineno=577)
          58	RETURN_VALUE(arg=None, lineno=577)
DEBUG 2022-02-14 16:46:36,349 pending: deque([State(pc_initial=0 nstack_initial=0)])
DEBUG 2022-02-14 16:46:36,349 stack: []
DEBUG 2022-02-14 16:46:36,349 dispatch pc=0, inst=NOP(arg=None, lineno=571)
DEBUG 2022-02-14 16:46:36,349 stack []
DEBUG 2022-02-14 16:46:36,349 dispatch pc=2, inst=LOAD_FAST(arg=0, lineno=571)
DEBUG 2022-02-14 16:46:36,349 stack []
DEBUG 2022-02-14 16:46:36,349 dispatch pc=4, inst=LOAD_ATTR(arg=0, lineno=571)
DEBUG 2022-02-14 16:46:36,349 stack ['$a2.0']
DEBUG 2022-02-14 16:46:36,349 dispatch pc=6, inst=UNPACK_SEQUENCE(arg=2, lineno=571)
DEBUG 2022-02-14 16:46:36,349 stack ['$4load_attr.1']
DEBUG 2022-02-14 16:46:36,349 dispatch pc=8, inst=STORE_FAST(arg=3, lineno=571)
DEBUG 2022-02-14 16:46:36,349 stack ['$6unpack_sequence.3', '$6unpack_sequence.2']
DEBUG 2022-02-14 16:46:36,349 dispatch pc=10, inst=STORE_FAST(arg=4, lineno=571)
DEBUG 2022-02-14 16:46:36,349 stack ['$6unpack_sequence.3']
DEBUG 2022-02-14 16:46:36,349 dispatch pc=12, inst=LOAD_FAST(arg=1, lineno=572)
DEBUG 2022-02-14 16:46:36,349 stack []
DEBUG 2022-02-14 16:46:36,349 dispatch pc=14, inst=LOAD_ATTR(arg=0, lineno=572)
DEBUG 2022-02-14 16:46:36,349 stack ['$b12.5']
DEBUG 2022-02-14 16:46:36,350 dispatch pc=16, inst=UNPACK_SEQUENCE(arg=1, lineno=572)
DEBUG 2022-02-14 16:46:36,350 stack ['$14load_attr.6']
DEBUG 2022-02-14 16:46:36,350 dispatch pc=18, inst=STORE_FAST(arg=5, lineno=572)
DEBUG 2022-02-14 16:46:36,350 stack ['$16unpack_sequence.7']
DEBUG 2022-02-14 16:46:36,350 dispatch pc=20, inst=LOAD_FAST(arg=5, lineno=573)
DEBUG 2022-02-14 16:46:36,350 stack []
DEBUG 2022-02-14 16:46:36,350 dispatch pc=22, inst=LOAD_FAST(arg=4, lineno=573)
DEBUG 2022-02-14 16:46:36,350 stack ['$n20.9']
DEBUG 2022-02-14 16:46:36,350 dispatch pc=24, inst=COMPARE_OP(arg=3, lineno=573)
DEBUG 2022-02-14 16:46:36,350 stack ['$n20.9', '$_n22.10']
DEBUG 2022-02-14 16:46:36,350 dispatch pc=26, inst=POP_JUMP_IF_FALSE(arg=36, lineno=573)
DEBUG 2022-02-14 16:46:36,350 stack ['$24compare_op.11']
DEBUG 2022-02-14 16:46:36,350 end state. edges=[Edge(pc=28, stack=(), blockstack=(), npush=0), Edge(pc=36, stack=(), blockstack=(), npush=0)]
DEBUG 2022-02-14 16:46:36,350 pending: deque([State(pc_initial=28 nstack_initial=0), State(pc_initial=36 nstack_initial=0)])
DEBUG 2022-02-14 16:46:36,350 stack: []
DEBUG 2022-02-14 16:46:36,350 dispatch pc=28, inst=LOAD_GLOBAL(arg=1, lineno=574)
DEBUG 2022-02-14 16:46:36,350 stack []
DEBUG 2022-02-14 16:46:36,350 dispatch pc=30, inst=LOAD_CONST(arg=1, lineno=574)
DEBUG 2022-02-14 16:46:36,350 stack ['$28load_global.0']
DEBUG 2022-02-14 16:46:36,350 dispatch pc=32, inst=CALL_FUNCTION(arg=1, lineno=574)
DEBUG 2022-02-14 16:46:36,350 stack ['$28load_global.0', '$const30.1']
DEBUG 2022-02-14 16:46:36,351 dispatch pc=34, inst=RAISE_VARARGS(arg=1, lineno=574)
DEBUG 2022-02-14 16:46:36,351 stack ['$32call_function.2']
DEBUG 2022-02-14 16:46:36,351 end state. edges=[]
DEBUG 2022-02-14 16:46:36,351 pending: deque([State(pc_initial=36 nstack_initial=0)])
DEBUG 2022-02-14 16:46:36,351 stack: []
DEBUG 2022-02-14 16:46:36,351 dispatch pc=36, inst=LOAD_FAST(arg=2, lineno=576)
DEBUG 2022-02-14 16:46:36,351 stack []
DEBUG 2022-02-14 16:46:36,351 dispatch pc=38, inst=LOAD_ATTR(arg=0, lineno=576)
DEBUG 2022-02-14 16:46:36,351 stack ['$out36.0']
DEBUG 2022-02-14 16:46:36,351 dispatch pc=40, inst=LOAD_FAST(arg=3, lineno=576)
DEBUG 2022-02-14 16:46:36,351 stack ['$38load_attr.1']
DEBUG 2022-02-14 16:46:36,351 dispatch pc=42, inst=BUILD_TUPLE(arg=1, lineno=576)
DEBUG 2022-02-14 16:46:36,351 stack ['$38load_attr.1', '$m40.2']
DEBUG 2022-02-14 16:46:36,351 dispatch pc=44, inst=COMPARE_OP(arg=3, lineno=576)
DEBUG 2022-02-14 16:46:36,351 stack ['$38load_attr.1', '$42build_tuple.3']
DEBUG 2022-02-14 16:46:36,351 dispatch pc=46, inst=POP_JUMP_IF_FALSE(arg=56, lineno=576)
DEBUG 2022-02-14 16:46:36,351 stack ['$44compare_op.4']
DEBUG 2022-02-14 16:46:36,351 end state. edges=[Edge(pc=48, stack=(), blockstack=(), npush=0), Edge(pc=56, stack=(), blockstack=(), npush=0)]
DEBUG 2022-02-14 16:46:36,351 pending: deque([State(pc_initial=48 nstack_initial=0), State(pc_initial=56 nstack_initial=0)])
DEBUG 2022-02-14 16:46:36,351 stack: []
DEBUG 2022-02-14 16:46:36,352 dispatch pc=48, inst=LOAD_GLOBAL(arg=1, lineno=577)
DEBUG 2022-02-14 16:46:36,352 stack []
DEBUG 2022-02-14 16:46:36,352 dispatch pc=50, inst=LOAD_CONST(arg=2, lineno=577)
DEBUG 2022-02-14 16:46:36,352 stack ['$48load_global.0']
DEBUG 2022-02-14 16:46:36,352 dispatch pc=52, inst=CALL_FUNCTION(arg=1, lineno=577)
DEBUG 2022-02-14 16:46:36,352 stack ['$48load_global.0', '$const50.1']
DEBUG 2022-02-14 16:46:36,352 dispatch pc=54, inst=RAISE_VARARGS(arg=1, lineno=577)
DEBUG 2022-02-14 16:46:36,352 stack ['$52call_function.2']
DEBUG 2022-02-14 16:46:36,352 end state. edges=[]
DEBUG 2022-02-14 16:46:36,352 pending: deque([State(pc_initial=56 nstack_initial=0)])
DEBUG 2022-02-14 16:46:36,352 stack: []
DEBUG 2022-02-14 16:46:36,352 dispatch pc=56, inst=LOAD_CONST(arg=0, lineno=577)
DEBUG 2022-02-14 16:46:36,352 stack []
DEBUG 2022-02-14 16:46:36,352 dispatch pc=58, inst=RETURN_VALUE(arg=None, lineno=577)
DEBUG 2022-02-14 16:46:36,352 stack ['$const56.0']
DEBUG 2022-02-14 16:46:36,352 end state. edges=[]
DEBUG 2022-02-14 16:46:36,352 -------------------------Prune PHIs-------------------------
DEBUG 2022-02-14 16:46:36,352 Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=28 nstack_initial=0): set(),
             State(pc_initial=36 nstack_initial=0): set(),
             State(pc_initial=48 nstack_initial=0): set(),
             State(pc_initial=56 nstack_initial=0): set()})
DEBUG 2022-02-14 16:46:36,353 defmap: {}
DEBUG 2022-02-14 16:46:36,353 phismap: defaultdict(<class 'set'>, {})
DEBUG 2022-02-14 16:46:36,353 changing phismap: defaultdict(<class 'set'>, {})
DEBUG 2022-02-14 16:46:36,353 keep phismap: {}
DEBUG 2022-02-14 16:46:36,353 new_out: defaultdict(<class 'dict'>, {})
DEBUG 2022-02-14 16:46:36,353 ----------------------DONE Prune PHIs-----------------------
DEBUG 2022-02-14 16:46:36,353 block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$a2.0'}), (4, {'item': '$a2.0', 'res': '$4load_attr.1'}), (6, {'iterable': '$4load_attr.1', 'stores': ['$6unpack_sequence.2', '$6unpack_sequence.3'], 'tupleobj': '$6unpack_sequence.4'}), (8, {'value': '$6unpack_sequence.2'}), (10, {'value': '$6unpack_sequence.3'}), (12, {'res': '$b12.5'}), (14, {'item': '$b12.5', 'res': '$14load_attr.6'}), (16, {'iterable': '$14load_attr.6', 'stores': ['$16unpack_sequence.7'], 'tupleobj': '$16unpack_sequence.8'}), (18, {'value': '$16unpack_sequence.7'}), (20, {'res': '$n20.9'}), (22, {'res': '$_n22.10'}), (24, {'lhs': '$n20.9', 'rhs': '$_n22.10', 'res': '$24compare_op.11'}), (26, {'pred': '$24compare_op.11'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={28: (), 36: ()})
DEBUG 2022-02-14 16:46:36,353 block_infos State(pc_initial=28 nstack_initial=0):
AdaptBlockInfo(insts=((28, {'res': '$28load_global.0'}), (30, {'res': '$const30.1'}), (32, {'func': '$28load_global.0', 'args': ['$const30.1'], 'res': '$32call_function.2'}), (34, {'exc': '$32call_function.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG 2022-02-14 16:46:36,353 block_infos State(pc_initial=36 nstack_initial=0):
AdaptBlockInfo(insts=((36, {'res': '$out36.0'}), (38, {'item': '$out36.0', 'res': '$38load_attr.1'}), (40, {'res': '$m40.2'}), (42, {'items': ['$m40.2'], 'res': '$42build_tuple.3'}), (44, {'lhs': '$38load_attr.1', 'rhs': '$42build_tuple.3', 'res': '$44compare_op.4'}), (46, {'pred': '$44compare_op.4'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={48: (), 56: ()})
DEBUG 2022-02-14 16:46:36,353 block_infos State(pc_initial=48 nstack_initial=0):
AdaptBlockInfo(insts=((48, {'res': '$48load_global.0'}), (50, {'res': '$const50.1'}), (52, {'func': '$48load_global.0', 'args': ['$const50.1'], 'res': '$52call_function.2'}), (54, {'exc': '$52call_function.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG 2022-02-14 16:46:36,353 block_infos State(pc_initial=56 nstack_initial=0):
AdaptBlockInfo(insts=((56, {'res': '$const56.0'}), (58, {'retval': '$const56.0', 'castval': '$58return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG 2022-02-14 16:46:36,354 label 0:
    a = arg(0, name=a)                       ['a']
    b = arg(1, name=b)                       ['b']
    out = arg(2, name=out)                   ['out']
    $4load_attr.1 = getattr(value=a, attr=shape) ['$4load_attr.1', 'a']
    $6unpack_sequence.4 = exhaust_iter(value=$4load_attr.1, count=2) ['$4load_attr.1', '$6unpack_sequence.4']
    $6unpack_sequence.2 = static_getitem(value=$6unpack_sequence.4, index=0, index_var=None, fn=<built-in function getitem>) ['$6unpack_sequence.2', '$6unpack_sequence.4']
    $6unpack_sequence.3 = static_getitem(value=$6unpack_sequence.4, index=1, index_var=None, fn=<built-in function getitem>) ['$6unpack_sequence.3', '$6unpack_sequence.4']
    m = $6unpack_sequence.2                  ['$6unpack_sequence.2', 'm']
    _n = $6unpack_sequence.3                 ['$6unpack_sequence.3', '_n']
    $14load_attr.6 = getattr(value=b, attr=shape) ['$14load_attr.6', 'b']
    $16unpack_sequence.8 = exhaust_iter(value=$14load_attr.6, count=1) ['$14load_attr.6', '$16unpack_sequence.8']
    n = static_getitem(value=$16unpack_sequence.8, index=0, index_var=None, fn=<built-in function getitem>) ['$16unpack_sequence.8', 'n']
    $24compare_op.11 = n != _n               ['$24compare_op.11', '_n', 'n']
    bool26 = global(bool: <class 'bool'>)    ['bool26']
    $26pred = call bool26($24compare_op.11, func=bool26, args=(Var($24compare_op.11, linalg.py:573),), kws=(), vararg=None, target=None) ['$24compare_op.11', '$26pred', 'bool26']
    branch $26pred, 28, 36                   ['$26pred']
label 28:
    $28load_global.0 = global(ValueError: <class 'ValueError'>) ['$28load_global.0']
    $const30.1 = const(str, incompatible array sizes for np.dot(a, b) (matrix * vector)) ['$const30.1']
    $32call_function.2 = call $28load_global.0($const30.1, func=$28load_global.0, args=[Var($const30.1, linalg.py:574)], kws=(), vararg=None, target=None) ['$28load_global.0', '$32call_function.2', '$const30.1']
    raise $32call_function.2                 ['$32call_function.2']
label 36:
    $38load_attr.1 = getattr(value=out, attr=shape) ['$38load_attr.1', 'out']
    $42build_tuple.3 = build_tuple(items=[Var(m, linalg.py:571)]) ['$42build_tuple.3', 'm']
    $44compare_op.4 = $38load_attr.1 != $42build_tuple.3 ['$38load_attr.1', '$42build_tuple.3', '$44compare_op.4']
    bool46 = global(bool: <class 'bool'>)    ['bool46']
    $46pred = call bool46($44compare_op.4, func=bool46, args=(Var($44compare_op.4, linalg.py:576),), kws=(), vararg=None, target=None) ['$44compare_op.4', '$46pred', 'bool46']
    branch $46pred, 48, 56                   ['$46pred']
label 48:
    $48load_global.0 = global(ValueError: <class 'ValueError'>) ['$48load_global.0']
    $const50.1 = const(str, incompatible output array size for np.dot(a, b, out) (matrix * vector)) ['$const50.1']
    $52call_function.2 = call $48load_global.0($const50.1, func=$48load_global.0, args=[Var($const50.1, linalg.py:577)], kws=(), vararg=None, target=None) ['$48load_global.0', '$52call_function.2', '$const50.1']
    raise $52call_function.2                 ['$52call_function.2']
label 56:
    $const56.0 = const(NoneType, None)       ['$const56.0']
    $58return_value.1 = cast(value=$const56.0) ['$58return_value.1', '$const56.0']
    return $58return_value.1                 ['$58return_value.1']

DEBUG 2022-02-14 16:46:36,358 ==== SSA block analysis pass on 0
DEBUG 2022-02-14 16:46:36,358 Running <numba.core.ssa._GatherDefsHandler object at 0x7f720324cd60>
DEBUG 2022-02-14 16:46:36,358 on stmt: a = arg(0, name=a)
DEBUG 2022-02-14 16:46:36,358 on stmt: b = arg(1, name=b)
DEBUG 2022-02-14 16:46:36,358 on stmt: out = arg(2, name=out)
DEBUG 2022-02-14 16:46:36,358 on stmt: $4load_attr.1 = getattr(value=a, attr=shape)
DEBUG 2022-02-14 16:46:36,358 on stmt: $6unpack_sequence.4 = exhaust_iter(value=$4load_attr.1, count=2)
DEBUG 2022-02-14 16:46:36,358 on stmt: $6unpack_sequence.2 = static_getitem(value=$6unpack_sequence.4, index=0, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:46:36,358 on stmt: $6unpack_sequence.3 = static_getitem(value=$6unpack_sequence.4, index=1, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:46:36,358 on stmt: m = $6unpack_sequence.2
DEBUG 2022-02-14 16:46:36,358 on stmt: _n = $6unpack_sequence.3
DEBUG 2022-02-14 16:46:36,358 on stmt: $14load_attr.6 = getattr(value=b, attr=shape)
DEBUG 2022-02-14 16:46:36,358 on stmt: $16unpack_sequence.8 = exhaust_iter(value=$14load_attr.6, count=1)
DEBUG 2022-02-14 16:46:36,359 on stmt: n = static_getitem(value=$16unpack_sequence.8, index=0, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-02-14 16:46:36,359 on stmt: $24compare_op.11 = n != _n
DEBUG 2022-02-14 16:46:36,359 on stmt: bool26 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:46:36,359 on stmt: $26pred = call bool26($24compare_op.11, func=bool26, args=(Var($24compare_op.11, linalg.py:573),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:46:36,359 on stmt: branch $26pred, 28, 36
DEBUG 2022-02-14 16:46:36,359 ==== SSA block analysis pass on 28
DEBUG 2022-02-14 16:46:36,359 Running <numba.core.ssa._GatherDefsHandler object at 0x7f720324cd60>
DEBUG 2022-02-14 16:46:36,359 on stmt: $28load_global.0 = global(ValueError: <class 'ValueError'>)
DEBUG 2022-02-14 16:46:36,359 on stmt: $const30.1 = const(str, incompatible array sizes for np.dot(a, b) (matrix * vector))
DEBUG 2022-02-14 16:46:36,359 on stmt: $32call_function.2 = call $28load_global.0($const30.1, func=$28load_global.0, args=[Var($const30.1, linalg.py:574)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:46:36,359 on stmt: <static> raise <class 'ValueError'>('incompatible array sizes for np.dot(a, b) (matrix * vector)')
DEBUG 2022-02-14 16:46:36,359 ==== SSA block analysis pass on 36
DEBUG 2022-02-14 16:46:36,359 Running <numba.core.ssa._GatherDefsHandler object at 0x7f720324cd60>
DEBUG 2022-02-14 16:46:36,359 on stmt: $38load_attr.1 = getattr(value=out, attr=shape)
DEBUG 2022-02-14 16:46:36,359 on stmt: $42build_tuple.3 = build_tuple(items=[Var(m, linalg.py:571)])
DEBUG 2022-02-14 16:46:36,359 on stmt: $44compare_op.4 = $38load_attr.1 != $42build_tuple.3
DEBUG 2022-02-14 16:46:36,359 on stmt: bool46 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:46:36,359 on stmt: $46pred = call bool46($44compare_op.4, func=bool46, args=(Var($44compare_op.4, linalg.py:576),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:46:36,359 on stmt: branch $46pred, 48, 56
DEBUG 2022-02-14 16:46:36,359 ==== SSA block analysis pass on 48
DEBUG 2022-02-14 16:46:36,360 Running <numba.core.ssa._GatherDefsHandler object at 0x7f720324cd60>
DEBUG 2022-02-14 16:46:36,360 on stmt: $48load_global.0 = global(ValueError: <class 'ValueError'>)
DEBUG 2022-02-14 16:46:36,360 on stmt: $const50.1 = const(str, incompatible output array size for np.dot(a, b, out) (matrix * vector))
DEBUG 2022-02-14 16:46:36,360 on stmt: $52call_function.2 = call $48load_global.0($const50.1, func=$48load_global.0, args=[Var($const50.1, linalg.py:577)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:46:36,360 on stmt: <static> raise <class 'ValueError'>('incompatible output array size for np.dot(a, b, out) (matrix * vector)')
DEBUG 2022-02-14 16:46:36,360 ==== SSA block analysis pass on 56
DEBUG 2022-02-14 16:46:36,360 Running <numba.core.ssa._GatherDefsHandler object at 0x7f720324cd60>
DEBUG 2022-02-14 16:46:36,360 on stmt: $const56.0 = const(NoneType, None)
DEBUG 2022-02-14 16:46:36,360 on stmt: $58return_value.1 = cast(value=$const56.0)
DEBUG 2022-02-14 16:46:36,360 on stmt: return $58return_value.1
DEBUG 2022-02-14 16:46:36,360 defs defaultdict(<class 'list'>,
            {'$14load_attr.6': [<numba.core.ir.Assign object at 0x7f720325e4c0>],
             '$16unpack_sequence.8': [<numba.core.ir.Assign object at 0x7f720325e670>],
             '$24compare_op.11': [<numba.core.ir.Assign object at 0x7f720325ec70>],
             '$26pred': [<numba.core.ir.Assign object at 0x7f720325eee0>],
             '$28load_global.0': [<numba.core.ir.Assign object at 0x7f720325eb50>],
             '$32call_function.2': [<numba.core.ir.Assign object at 0x7f7203260340>],
             '$38load_attr.1': [<numba.core.ir.Assign object at 0x7f7203260700>],
             '$42build_tuple.3': [<numba.core.ir.Assign object at 0x7f72032609d0>],
             '$44compare_op.4': [<numba.core.ir.Assign object at 0x7f7203260b50>],
             '$46pred': [<numba.core.ir.Assign object at 0x7f7203260dc0>],
             '$48load_global.0': [<numba.core.ir.Assign object at 0x7f7203260fa0>],
             '$4load_attr.1': [<numba.core.ir.Assign object at 0x7f7203252be0>],
             '$52call_function.2': [<numba.core.ir.Assign object at 0x7f72031e0340>],
             '$58return_value.1': [<numba.core.ir.Assign object at 0x7f72031e0760>],
             '$6unpack_sequence.2': [<numba.core.ir.Assign object at 0x7f7203252ee0>],
             '$6unpack_sequence.3': [<numba.core.ir.Assign object at 0x7f720325e040>],
             '$6unpack_sequence.4': [<numba.core.ir.Assign object at 0x7f7203252d90>],
             '$const30.1': [<numba.core.ir.Assign object at 0x7f7203260160>],
             '$const50.1': [<numba.core.ir.Assign object at 0x7f72031e0160>],
             '$const56.0': [<numba.core.ir.Assign object at 0x7f72031e05e0>],
             '_n': [<numba.core.ir.Assign object at 0x7f720325e220>],
             'a': [<numba.core.ir.Assign object at 0x7f7203252130>],
             'b': [<numba.core.ir.Assign object at 0x7f7203252820>],
             'bool26': [<numba.core.ir.Assign object at 0x7f720325edc0>],
             'bool46': [<numba.core.ir.Assign object at 0x7f7203260ca0>],
             'm': [<numba.core.ir.Assign object at 0x7f720325e100>],
             'n': [<numba.core.ir.Assign object at 0x7f720325e7c0>],
             'out': [<numba.core.ir.Assign object at 0x7f7203252940>]})
DEBUG 2022-02-14 16:46:36,360 SSA violators set()
DEBUG 2022-02-14 16:46:36,852 bytecode dump:
>          0	NOP(arg=None, lineno=254)
           2	LOAD_GLOBAL(arg=0, lineno=254)
           4	LOAD_ATTR(arg=1, lineno=254)
           6	LOAD_ATTR(arg=2, lineno=254)
           8	LOAD_METHOD(arg=3, lineno=254)
          10	CALL_METHOD(arg=0, lineno=254)
          12	POP_TOP(arg=None, lineno=254)
          14	LOAD_DEREF(arg=0, lineno=255)
          16	STORE_FAST(arg=1, lineno=255)
          18	LOAD_GLOBAL(arg=0, lineno=256)
          20	LOAD_ATTR(arg=1, lineno=256)
          22	LOAD_ATTR(arg=2, lineno=256)
          24	LOAD_METHOD(arg=4, lineno=256)
          26	LOAD_GLOBAL(arg=5, lineno=256)
          28	LOAD_FAST(arg=0, lineno=256)
          30	CALL_FUNCTION(arg=1, lineno=256)
          32	CALL_METHOD(arg=1, lineno=256)
          34	GET_ITER(arg=None, lineno=256)
>         36	FOR_ITER(arg=16, lineno=256)
          38	STORE_FAST(arg=2, lineno=256)
          40	LOAD_FAST(arg=1, lineno=257)
          42	LOAD_FAST(arg=0, lineno=257)
          44	LOAD_FAST(arg=2, lineno=257)
          46	BINARY_SUBSCR(arg=None, lineno=257)
          48	INPLACE_ADD(arg=None, lineno=257)
          50	STORE_FAST(arg=1, lineno=257)
          52	JUMP_ABSOLUTE(arg=36, lineno=257)
>         54	LOAD_FAST(arg=1, lineno=258)
          56	RETURN_VALUE(arg=None, lineno=258)
DEBUG 2022-02-14 16:46:36,852 pending: deque([State(pc_initial=0 nstack_initial=0)])
DEBUG 2022-02-14 16:46:36,852 stack: []
DEBUG 2022-02-14 16:46:36,853 dispatch pc=0, inst=NOP(arg=None, lineno=254)
DEBUG 2022-02-14 16:46:36,853 stack []
DEBUG 2022-02-14 16:46:36,853 dispatch pc=2, inst=LOAD_GLOBAL(arg=0, lineno=254)
DEBUG 2022-02-14 16:46:36,853 stack []
DEBUG 2022-02-14 16:46:36,853 dispatch pc=4, inst=LOAD_ATTR(arg=1, lineno=254)
DEBUG 2022-02-14 16:46:36,853 stack ['$2load_global.0']
DEBUG 2022-02-14 16:46:36,853 dispatch pc=6, inst=LOAD_ATTR(arg=2, lineno=254)
DEBUG 2022-02-14 16:46:36,853 stack ['$4load_attr.1']
DEBUG 2022-02-14 16:46:36,853 dispatch pc=8, inst=LOAD_METHOD(arg=3, lineno=254)
DEBUG 2022-02-14 16:46:36,853 stack ['$6load_attr.2']
DEBUG 2022-02-14 16:46:36,853 dispatch pc=10, inst=CALL_METHOD(arg=0, lineno=254)
DEBUG 2022-02-14 16:46:36,853 stack ['$8load_method.3']
DEBUG 2022-02-14 16:46:36,853 dispatch pc=12, inst=POP_TOP(arg=None, lineno=254)
DEBUG 2022-02-14 16:46:36,853 stack ['$10call_method.4']
DEBUG 2022-02-14 16:46:36,853 dispatch pc=14, inst=LOAD_DEREF(arg=0, lineno=255)
DEBUG 2022-02-14 16:46:36,853 stack []
DEBUG 2022-02-14 16:46:36,853 dispatch pc=16, inst=STORE_FAST(arg=1, lineno=255)
DEBUG 2022-02-14 16:46:36,853 stack ['$14load_deref.5']
DEBUG 2022-02-14 16:46:36,853 dispatch pc=18, inst=LOAD_GLOBAL(arg=0, lineno=256)
DEBUG 2022-02-14 16:46:36,853 stack []
DEBUG 2022-02-14 16:46:36,853 dispatch pc=20, inst=LOAD_ATTR(arg=1, lineno=256)
DEBUG 2022-02-14 16:46:36,853 stack ['$18load_global.6']
DEBUG 2022-02-14 16:46:36,854 dispatch pc=22, inst=LOAD_ATTR(arg=2, lineno=256)
DEBUG 2022-02-14 16:46:36,854 stack ['$20load_attr.7']
DEBUG 2022-02-14 16:46:36,854 dispatch pc=24, inst=LOAD_METHOD(arg=4, lineno=256)
DEBUG 2022-02-14 16:46:36,854 stack ['$22load_attr.8']
DEBUG 2022-02-14 16:46:36,854 dispatch pc=26, inst=LOAD_GLOBAL(arg=5, lineno=256)
DEBUG 2022-02-14 16:46:36,854 stack ['$24load_method.9']
DEBUG 2022-02-14 16:46:36,854 dispatch pc=28, inst=LOAD_FAST(arg=0, lineno=256)
DEBUG 2022-02-14 16:46:36,854 stack ['$24load_method.9', '$26load_global.10']
DEBUG 2022-02-14 16:46:36,854 dispatch pc=30, inst=CALL_FUNCTION(arg=1, lineno=256)
DEBUG 2022-02-14 16:46:36,854 stack ['$24load_method.9', '$26load_global.10', '$in_arr28.11']
DEBUG 2022-02-14 16:46:36,854 dispatch pc=32, inst=CALL_METHOD(arg=1, lineno=256)
DEBUG 2022-02-14 16:46:36,854 stack ['$24load_method.9', '$30call_function.12']
DEBUG 2022-02-14 16:46:36,854 dispatch pc=34, inst=GET_ITER(arg=None, lineno=256)
DEBUG 2022-02-14 16:46:36,854 stack ['$32call_method.13']
DEBUG 2022-02-14 16:46:36,854 end state. edges=[Edge(pc=36, stack=('$34get_iter.14',), blockstack=(), npush=0)]
DEBUG 2022-02-14 16:46:36,854 pending: deque([State(pc_initial=36 nstack_initial=1)])
DEBUG 2022-02-14 16:46:36,854 stack: ['$phi36.0']
DEBUG 2022-02-14 16:46:36,854 dispatch pc=36, inst=FOR_ITER(arg=16, lineno=256)
DEBUG 2022-02-14 16:46:36,854 stack ['$phi36.0']
DEBUG 2022-02-14 16:46:36,855 end state. edges=[Edge(pc=54, stack=(), blockstack=(), npush=0), Edge(pc=38, stack=('$phi36.0', '$36for_iter.2'), blockstack=(), npush=0)]
DEBUG 2022-02-14 16:46:36,855 pending: deque([State(pc_initial=54 nstack_initial=0), State(pc_initial=38 nstack_initial=2)])
DEBUG 2022-02-14 16:46:36,855 stack: []
DEBUG 2022-02-14 16:46:36,855 dispatch pc=54, inst=LOAD_FAST(arg=1, lineno=258)
DEBUG 2022-02-14 16:46:36,855 stack []
DEBUG 2022-02-14 16:46:36,855 dispatch pc=56, inst=RETURN_VALUE(arg=None, lineno=258)
DEBUG 2022-02-14 16:46:36,855 stack ['$val54.0']
DEBUG 2022-02-14 16:46:36,855 end state. edges=[]
DEBUG 2022-02-14 16:46:36,855 pending: deque([State(pc_initial=38 nstack_initial=2)])
DEBUG 2022-02-14 16:46:36,855 stack: ['$phi38.0', '$phi38.1']
DEBUG 2022-02-14 16:46:36,855 dispatch pc=38, inst=STORE_FAST(arg=2, lineno=256)
DEBUG 2022-02-14 16:46:36,855 stack ['$phi38.0', '$phi38.1']
DEBUG 2022-02-14 16:46:36,855 dispatch pc=40, inst=LOAD_FAST(arg=1, lineno=257)
DEBUG 2022-02-14 16:46:36,855 stack ['$phi38.0']
DEBUG 2022-02-14 16:46:36,855 dispatch pc=42, inst=LOAD_FAST(arg=0, lineno=257)
DEBUG 2022-02-14 16:46:36,855 stack ['$phi38.0', '$val40.2']
DEBUG 2022-02-14 16:46:36,855 dispatch pc=44, inst=LOAD_FAST(arg=2, lineno=257)
DEBUG 2022-02-14 16:46:36,855 stack ['$phi38.0', '$val40.2', '$in_arr42.3']
DEBUG 2022-02-14 16:46:36,855 dispatch pc=46, inst=BINARY_SUBSCR(arg=None, lineno=257)
DEBUG 2022-02-14 16:46:36,856 stack ['$phi38.0', '$val40.2', '$in_arr42.3', '$i44.4']
DEBUG 2022-02-14 16:46:36,856 dispatch pc=48, inst=INPLACE_ADD(arg=None, lineno=257)
DEBUG 2022-02-14 16:46:36,856 stack ['$phi38.0', '$val40.2', '$46binary_subscr.5']
DEBUG 2022-02-14 16:46:36,856 dispatch pc=50, inst=STORE_FAST(arg=1, lineno=257)
DEBUG 2022-02-14 16:46:36,856 stack ['$phi38.0', '$48inplace_add.6']
DEBUG 2022-02-14 16:46:36,856 dispatch pc=52, inst=JUMP_ABSOLUTE(arg=36, lineno=257)
DEBUG 2022-02-14 16:46:36,856 stack ['$phi38.0']
DEBUG 2022-02-14 16:46:36,856 end state. edges=[Edge(pc=36, stack=('$phi38.0',), blockstack=(), npush=0)]
DEBUG 2022-02-14 16:46:36,856 pending: deque([State(pc_initial=36 nstack_initial=1)])
DEBUG 2022-02-14 16:46:36,856 -------------------------Prune PHIs-------------------------
DEBUG 2022-02-14 16:46:36,856 Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=36 nstack_initial=1): {'$phi36.0'},
             State(pc_initial=38 nstack_initial=2): {'$phi38.1'},
             State(pc_initial=54 nstack_initial=0): set()})
DEBUG 2022-02-14 16:46:36,857 defmap: {'$phi36.0': State(pc_initial=0 nstack_initial=0),
 '$phi38.1': State(pc_initial=36 nstack_initial=1)}
DEBUG 2022-02-14 16:46:36,857 phismap: defaultdict(<class 'set'>,
            {'$phi36.0': {('$34get_iter.14',
                           State(pc_initial=0 nstack_initial=0)),
                          ('$phi38.0', State(pc_initial=38 nstack_initial=2))},
             '$phi38.0': {('$phi36.0', State(pc_initial=36 nstack_initial=1))},
             '$phi38.1': {('$36for_iter.2',
                           State(pc_initial=36 nstack_initial=1))}})
DEBUG 2022-02-14 16:46:36,857 changing phismap: defaultdict(<class 'set'>,
            {'$phi36.0': {('$34get_iter.14',
                           State(pc_initial=0 nstack_initial=0)),
                          ('$phi36.0', State(pc_initial=36 nstack_initial=1))},
             '$phi38.0': {('$34get_iter.14',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi38.1': {('$36for_iter.2',
                           State(pc_initial=36 nstack_initial=1))}})
DEBUG 2022-02-14 16:46:36,857 changing phismap: defaultdict(<class 'set'>,
            {'$phi36.0': {('$34get_iter.14',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi38.0': {('$34get_iter.14',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi38.1': {('$36for_iter.2',
                           State(pc_initial=36 nstack_initial=1))}})
DEBUG 2022-02-14 16:46:36,857 changing phismap: defaultdict(<class 'set'>,
            {'$phi36.0': {('$34get_iter.14',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi38.0': {('$34get_iter.14',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi38.1': {('$36for_iter.2',
                           State(pc_initial=36 nstack_initial=1))}})
DEBUG 2022-02-14 16:46:36,857 keep phismap: {'$phi36.0': {('$34get_iter.14', State(pc_initial=0 nstack_initial=0))},
 '$phi38.1': {('$36for_iter.2', State(pc_initial=36 nstack_initial=1))}}
DEBUG 2022-02-14 16:46:36,858 new_out: defaultdict(<class 'dict'>,
            {State(pc_initial=0 nstack_initial=0): {'$phi36.0': '$34get_iter.14'},
             State(pc_initial=36 nstack_initial=1): {'$phi38.1': '$36for_iter.2'}})
DEBUG 2022-02-14 16:46:36,858 ----------------------DONE Prune PHIs-----------------------
DEBUG 2022-02-14 16:46:36,858 block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$2load_global.0'}), (4, {'item': '$2load_global.0', 'res': '$4load_attr.1'}), (6, {'item': '$4load_attr.1', 'res': '$6load_attr.2'}), (8, {'item': '$6load_attr.2', 'res': '$8load_method.3'}), (10, {'func': '$8load_method.3', 'args': [], 'res': '$10call_method.4'}), (14, {'res': '$14load_deref.5'}), (16, {'value': '$14load_deref.5'}), (18, {'res': '$18load_global.6'}), (20, {'item': '$18load_global.6', 'res': '$20load_attr.7'}), (22, {'item': '$20load_attr.7', 'res': '$22load_attr.8'}), (24, {'item': '$22load_attr.8', 'res': '$24load_method.9'}), (26, {'res': '$26load_global.10'}), (28, {'res': '$in_arr28.11'}), (30, {'func': '$26load_global.10', 'args': ['$in_arr28.11'], 'res': '$30call_function.12'}), (32, {'func': '$24load_method.9', 'args': ['$30call_function.12'], 'res': '$32call_method.13'}), (34, {'value': '$32call_method.13', 'res': '$34get_iter.14'})), outgoing_phis={'$phi36.0': '$34get_iter.14'}, blockstack=(), active_try_block=None, outgoing_edgepushed={36: ('$34get_iter.14',)})
DEBUG 2022-02-14 16:46:36,858 block_infos State(pc_initial=36 nstack_initial=1):
AdaptBlockInfo(insts=((36, {'iterator': '$phi36.0', 'pair': '$36for_iter.1', 'indval': '$36for_iter.2', 'pred': '$36for_iter.3'}),), outgoing_phis={'$phi38.1': '$36for_iter.2'}, blockstack=(), active_try_block=None, outgoing_edgepushed={54: (), 38: ('$phi36.0', '$36for_iter.2')})
DEBUG 2022-02-14 16:46:36,858 block_infos State(pc_initial=38 nstack_initial=2):
AdaptBlockInfo(insts=((38, {'value': '$phi38.1'}), (40, {'res': '$val40.2'}), (42, {'res': '$in_arr42.3'}), (44, {'res': '$i44.4'}), (46, {'index': '$i44.4', 'target': '$in_arr42.3', 'res': '$46binary_subscr.5'}), (48, {'lhs': '$val40.2', 'rhs': '$46binary_subscr.5', 'res': '$48inplace_add.6'}), (50, {'value': '$48inplace_add.6'}), (52, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={36: ('$phi38.0',)})
DEBUG 2022-02-14 16:46:36,858 block_infos State(pc_initial=54 nstack_initial=0):
AdaptBlockInfo(insts=((54, {'res': '$val54.0'}), (56, {'retval': '$val54.0', 'castval': '$56return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG 2022-02-14 16:46:36,859 label 0:
    in_arr = arg(0, name=in_arr)             ['in_arr']
    $2load_global.0 = global(numba: <module 'numba' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numba/__init__.py'>) ['$2load_global.0']
    $4load_attr.1 = getattr(value=$2load_global.0, attr=parfors) ['$2load_global.0', '$4load_attr.1']
    $6load_attr.2 = getattr(value=$4load_attr.1, attr=parfor) ['$4load_attr.1', '$6load_attr.2']
    $8load_method.3 = getattr(value=$6load_attr.2, attr=init_prange) ['$6load_attr.2', '$8load_method.3']
    $10call_method.4 = call $8load_method.3(func=$8load_method.3, args=[], kws=(), vararg=None, target=None) ['$10call_method.4', '$8load_method.3']
    val = freevar(zero: 0)                   ['val']
    $18load_global.6 = global(numba: <module 'numba' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numba/__init__.py'>) ['$18load_global.6']
    $20load_attr.7 = getattr(value=$18load_global.6, attr=parfors) ['$18load_global.6', '$20load_attr.7']
    $22load_attr.8 = getattr(value=$20load_attr.7, attr=parfor) ['$20load_attr.7', '$22load_attr.8']
    $24load_method.9 = getattr(value=$22load_attr.8, attr=internal_prange) ['$22load_attr.8', '$24load_method.9']
    $26load_global.10 = global(len: <built-in function len>) ['$26load_global.10']
    $30call_function.12 = call $26load_global.10(in_arr, func=$26load_global.10, args=[Var(in_arr, parfor.py:254)], kws=(), vararg=None, target=None) ['$26load_global.10', '$30call_function.12', 'in_arr']
    $32call_method.13 = call $24load_method.9($30call_function.12, func=$24load_method.9, args=[Var($30call_function.12, parfor.py:256)], kws=(), vararg=None, target=None) ['$24load_method.9', '$30call_function.12', '$32call_method.13']
    $34get_iter.14 = getiter(value=$32call_method.13) ['$32call_method.13', '$34get_iter.14']
    $phi36.0 = $34get_iter.14                ['$34get_iter.14', '$phi36.0']
    jump 36                                  []
label 36:
    $36for_iter.1 = iternext(value=$phi36.0) ['$36for_iter.1', '$phi36.0']
    $36for_iter.2 = pair_first(value=$36for_iter.1) ['$36for_iter.1', '$36for_iter.2']
    $36for_iter.3 = pair_second(value=$36for_iter.1) ['$36for_iter.1', '$36for_iter.3']
    $phi38.1 = $36for_iter.2                 ['$36for_iter.2', '$phi38.1']
    branch $36for_iter.3, 38, 54             ['$36for_iter.3']
label 38:
    i = $phi38.1                             ['$phi38.1', 'i']
    $46binary_subscr.5 = getitem(value=in_arr, index=i, fn=<built-in function getitem>) ['$46binary_subscr.5', 'i', 'in_arr']
    $48inplace_add.6 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=val, rhs=$46binary_subscr.5, static_lhs=Undefined, static_rhs=Undefined) ['$46binary_subscr.5', '$48inplace_add.6', 'val']
    val = $48inplace_add.6                   ['$48inplace_add.6', 'val']
    jump 36                                  []
label 54:
    $56return_value.1 = cast(value=val)      ['$56return_value.1', 'val']
    return $56return_value.1                 ['$56return_value.1']

DEBUG 2022-02-14 16:46:36,863 bytecode dump:
>          0	NOP(arg=None, lineno=116)
           2	LOAD_CONST(arg=0, lineno=116)
           4	RETURN_VALUE(arg=None, lineno=116)
DEBUG 2022-02-14 16:46:36,863 pending: deque([State(pc_initial=0 nstack_initial=0)])
DEBUG 2022-02-14 16:46:36,863 stack: []
DEBUG 2022-02-14 16:46:36,863 dispatch pc=0, inst=NOP(arg=None, lineno=116)
DEBUG 2022-02-14 16:46:36,863 stack []
DEBUG 2022-02-14 16:46:36,863 dispatch pc=2, inst=LOAD_CONST(arg=0, lineno=116)
DEBUG 2022-02-14 16:46:36,863 stack []
DEBUG 2022-02-14 16:46:36,863 dispatch pc=4, inst=RETURN_VALUE(arg=None, lineno=116)
DEBUG 2022-02-14 16:46:36,863 stack ['$const2.0']
DEBUG 2022-02-14 16:46:36,863 end state. edges=[]
DEBUG 2022-02-14 16:46:36,863 -------------------------Prune PHIs-------------------------
DEBUG 2022-02-14 16:46:36,863 Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
DEBUG 2022-02-14 16:46:36,863 defmap: {}
DEBUG 2022-02-14 16:46:36,863 phismap: defaultdict(<class 'set'>, {})
DEBUG 2022-02-14 16:46:36,863 changing phismap: defaultdict(<class 'set'>, {})
DEBUG 2022-02-14 16:46:36,863 keep phismap: {}
DEBUG 2022-02-14 16:46:36,863 new_out: defaultdict(<class 'dict'>, {})
DEBUG 2022-02-14 16:46:36,863 ----------------------DONE Prune PHIs-----------------------
DEBUG 2022-02-14 16:46:36,863 block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$const2.0'}), (4, {'retval': '$const2.0', 'castval': '$4return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG 2022-02-14 16:46:36,864 label 0:
    $const2.0 = const(NoneType, None)        ['$const2.0']
    $4return_value.1 = cast(value=$const2.0) ['$4return_value.1', '$const2.0']
    return $4return_value.1                  ['$4return_value.1']

DEBUG 2022-02-14 16:46:36,865 ==== SSA block analysis pass on 0
DEBUG 2022-02-14 16:46:36,865 Running <numba.core.ssa._GatherDefsHandler object at 0x7f7203030190>
DEBUG 2022-02-14 16:46:36,865 on stmt: $const2.0 = const(NoneType, None)
DEBUG 2022-02-14 16:46:36,865 on stmt: $4return_value.1 = cast(value=$const2.0)
DEBUG 2022-02-14 16:46:36,865 on stmt: return $4return_value.1
DEBUG 2022-02-14 16:46:36,865 defs defaultdict(<class 'list'>,
            {'$4return_value.1': [<numba.core.ir.Assign object at 0x7f7202f36cd0>],
             '$const2.0': [<numba.core.ir.Assign object at 0x7f7202f81130>]})
DEBUG 2022-02-14 16:46:36,865 SSA violators set()
DEBUG 2022-02-14 16:46:36,880 bytecode dump:
>          0	NOP(arg=None, lineno=254)
           2	LOAD_GLOBAL(arg=0, lineno=254)
           4	LOAD_ATTR(arg=1, lineno=254)
           6	LOAD_ATTR(arg=2, lineno=254)
           8	LOAD_METHOD(arg=3, lineno=254)
          10	CALL_METHOD(arg=0, lineno=254)
          12	POP_TOP(arg=None, lineno=254)
          14	LOAD_DEREF(arg=0, lineno=255)
          16	STORE_FAST(arg=1, lineno=255)
          18	LOAD_GLOBAL(arg=0, lineno=256)
          20	LOAD_ATTR(arg=1, lineno=256)
          22	LOAD_ATTR(arg=2, lineno=256)
          24	LOAD_METHOD(arg=4, lineno=256)
          26	LOAD_GLOBAL(arg=5, lineno=256)
          28	LOAD_FAST(arg=0, lineno=256)
          30	CALL_FUNCTION(arg=1, lineno=256)
          32	CALL_METHOD(arg=1, lineno=256)
          34	GET_ITER(arg=None, lineno=256)
>         36	FOR_ITER(arg=16, lineno=256)
          38	STORE_FAST(arg=2, lineno=256)
          40	LOAD_FAST(arg=1, lineno=257)
          42	LOAD_FAST(arg=0, lineno=257)
          44	LOAD_FAST(arg=2, lineno=257)
          46	BINARY_SUBSCR(arg=None, lineno=257)
          48	INPLACE_ADD(arg=None, lineno=257)
          50	STORE_FAST(arg=1, lineno=257)
          52	JUMP_ABSOLUTE(arg=36, lineno=257)
>         54	LOAD_FAST(arg=1, lineno=258)
          56	RETURN_VALUE(arg=None, lineno=258)
DEBUG 2022-02-14 16:46:36,880 pending: deque([State(pc_initial=0 nstack_initial=0)])
DEBUG 2022-02-14 16:46:36,880 stack: []
DEBUG 2022-02-14 16:46:36,880 dispatch pc=0, inst=NOP(arg=None, lineno=254)
DEBUG 2022-02-14 16:46:36,880 stack []
DEBUG 2022-02-14 16:46:36,880 dispatch pc=2, inst=LOAD_GLOBAL(arg=0, lineno=254)
DEBUG 2022-02-14 16:46:36,880 stack []
DEBUG 2022-02-14 16:46:36,880 dispatch pc=4, inst=LOAD_ATTR(arg=1, lineno=254)
DEBUG 2022-02-14 16:46:36,880 stack ['$2load_global.0']
DEBUG 2022-02-14 16:46:36,880 dispatch pc=6, inst=LOAD_ATTR(arg=2, lineno=254)
DEBUG 2022-02-14 16:46:36,880 stack ['$4load_attr.1']
DEBUG 2022-02-14 16:46:36,880 dispatch pc=8, inst=LOAD_METHOD(arg=3, lineno=254)
DEBUG 2022-02-14 16:46:36,880 stack ['$6load_attr.2']
DEBUG 2022-02-14 16:46:36,880 dispatch pc=10, inst=CALL_METHOD(arg=0, lineno=254)
DEBUG 2022-02-14 16:46:36,881 stack ['$8load_method.3']
DEBUG 2022-02-14 16:46:36,881 dispatch pc=12, inst=POP_TOP(arg=None, lineno=254)
DEBUG 2022-02-14 16:46:36,881 stack ['$10call_method.4']
DEBUG 2022-02-14 16:46:36,881 dispatch pc=14, inst=LOAD_DEREF(arg=0, lineno=255)
DEBUG 2022-02-14 16:46:36,881 stack []
DEBUG 2022-02-14 16:46:36,881 dispatch pc=16, inst=STORE_FAST(arg=1, lineno=255)
DEBUG 2022-02-14 16:46:36,881 stack ['$14load_deref.5']
DEBUG 2022-02-14 16:46:36,881 dispatch pc=18, inst=LOAD_GLOBAL(arg=0, lineno=256)
DEBUG 2022-02-14 16:46:36,881 stack []
DEBUG 2022-02-14 16:46:36,881 dispatch pc=20, inst=LOAD_ATTR(arg=1, lineno=256)
DEBUG 2022-02-14 16:46:36,881 stack ['$18load_global.6']
DEBUG 2022-02-14 16:46:36,881 dispatch pc=22, inst=LOAD_ATTR(arg=2, lineno=256)
DEBUG 2022-02-14 16:46:36,881 stack ['$20load_attr.7']
DEBUG 2022-02-14 16:46:36,881 dispatch pc=24, inst=LOAD_METHOD(arg=4, lineno=256)
DEBUG 2022-02-14 16:46:36,881 stack ['$22load_attr.8']
DEBUG 2022-02-14 16:46:36,881 dispatch pc=26, inst=LOAD_GLOBAL(arg=5, lineno=256)
DEBUG 2022-02-14 16:46:36,881 stack ['$24load_method.9']
DEBUG 2022-02-14 16:46:36,881 dispatch pc=28, inst=LOAD_FAST(arg=0, lineno=256)
DEBUG 2022-02-14 16:46:36,881 stack ['$24load_method.9', '$26load_global.10']
DEBUG 2022-02-14 16:46:36,881 dispatch pc=30, inst=CALL_FUNCTION(arg=1, lineno=256)
DEBUG 2022-02-14 16:46:36,881 stack ['$24load_method.9', '$26load_global.10', '$in_arr28.11']
DEBUG 2022-02-14 16:46:36,881 dispatch pc=32, inst=CALL_METHOD(arg=1, lineno=256)
DEBUG 2022-02-14 16:46:36,882 stack ['$24load_method.9', '$30call_function.12']
DEBUG 2022-02-14 16:46:36,882 dispatch pc=34, inst=GET_ITER(arg=None, lineno=256)
DEBUG 2022-02-14 16:46:36,882 stack ['$32call_method.13']
DEBUG 2022-02-14 16:46:36,882 end state. edges=[Edge(pc=36, stack=('$34get_iter.14',), blockstack=(), npush=0)]
DEBUG 2022-02-14 16:46:36,882 pending: deque([State(pc_initial=36 nstack_initial=1)])
DEBUG 2022-02-14 16:46:36,882 stack: ['$phi36.0']
DEBUG 2022-02-14 16:46:36,882 dispatch pc=36, inst=FOR_ITER(arg=16, lineno=256)
DEBUG 2022-02-14 16:46:36,882 stack ['$phi36.0']
DEBUG 2022-02-14 16:46:36,882 end state. edges=[Edge(pc=54, stack=(), blockstack=(), npush=0), Edge(pc=38, stack=('$phi36.0', '$36for_iter.2'), blockstack=(), npush=0)]
DEBUG 2022-02-14 16:46:36,882 pending: deque([State(pc_initial=54 nstack_initial=0), State(pc_initial=38 nstack_initial=2)])
DEBUG 2022-02-14 16:46:36,882 stack: []
DEBUG 2022-02-14 16:46:36,882 dispatch pc=54, inst=LOAD_FAST(arg=1, lineno=258)
DEBUG 2022-02-14 16:46:36,882 stack []
DEBUG 2022-02-14 16:46:36,882 dispatch pc=56, inst=RETURN_VALUE(arg=None, lineno=258)
DEBUG 2022-02-14 16:46:36,882 stack ['$val54.0']
DEBUG 2022-02-14 16:46:36,882 end state. edges=[]
DEBUG 2022-02-14 16:46:36,882 pending: deque([State(pc_initial=38 nstack_initial=2)])
DEBUG 2022-02-14 16:46:36,882 stack: ['$phi38.0', '$phi38.1']
DEBUG 2022-02-14 16:46:36,882 dispatch pc=38, inst=STORE_FAST(arg=2, lineno=256)
DEBUG 2022-02-14 16:46:36,882 stack ['$phi38.0', '$phi38.1']
DEBUG 2022-02-14 16:46:36,883 dispatch pc=40, inst=LOAD_FAST(arg=1, lineno=257)
DEBUG 2022-02-14 16:46:36,883 stack ['$phi38.0']
DEBUG 2022-02-14 16:46:36,883 dispatch pc=42, inst=LOAD_FAST(arg=0, lineno=257)
DEBUG 2022-02-14 16:46:36,883 stack ['$phi38.0', '$val40.2']
DEBUG 2022-02-14 16:46:36,883 dispatch pc=44, inst=LOAD_FAST(arg=2, lineno=257)
DEBUG 2022-02-14 16:46:36,883 stack ['$phi38.0', '$val40.2', '$in_arr42.3']
DEBUG 2022-02-14 16:46:36,883 dispatch pc=46, inst=BINARY_SUBSCR(arg=None, lineno=257)
DEBUG 2022-02-14 16:46:36,883 stack ['$phi38.0', '$val40.2', '$in_arr42.3', '$i44.4']
DEBUG 2022-02-14 16:46:36,883 dispatch pc=48, inst=INPLACE_ADD(arg=None, lineno=257)
DEBUG 2022-02-14 16:46:36,883 stack ['$phi38.0', '$val40.2', '$46binary_subscr.5']
DEBUG 2022-02-14 16:46:36,883 dispatch pc=50, inst=STORE_FAST(arg=1, lineno=257)
DEBUG 2022-02-14 16:46:36,883 stack ['$phi38.0', '$48inplace_add.6']
DEBUG 2022-02-14 16:46:36,883 dispatch pc=52, inst=JUMP_ABSOLUTE(arg=36, lineno=257)
DEBUG 2022-02-14 16:46:36,883 stack ['$phi38.0']
DEBUG 2022-02-14 16:46:36,883 end state. edges=[Edge(pc=36, stack=('$phi38.0',), blockstack=(), npush=0)]
DEBUG 2022-02-14 16:46:36,883 pending: deque([State(pc_initial=36 nstack_initial=1)])
DEBUG 2022-02-14 16:46:36,883 -------------------------Prune PHIs-------------------------
DEBUG 2022-02-14 16:46:36,883 Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=36 nstack_initial=1): {'$phi36.0'},
             State(pc_initial=38 nstack_initial=2): {'$phi38.1'},
             State(pc_initial=54 nstack_initial=0): set()})
DEBUG 2022-02-14 16:46:36,884 defmap: {'$phi36.0': State(pc_initial=0 nstack_initial=0),
 '$phi38.1': State(pc_initial=36 nstack_initial=1)}
DEBUG 2022-02-14 16:46:36,884 phismap: defaultdict(<class 'set'>,
            {'$phi36.0': {('$34get_iter.14',
                           State(pc_initial=0 nstack_initial=0)),
                          ('$phi38.0', State(pc_initial=38 nstack_initial=2))},
             '$phi38.0': {('$phi36.0', State(pc_initial=36 nstack_initial=1))},
             '$phi38.1': {('$36for_iter.2',
                           State(pc_initial=36 nstack_initial=1))}})
DEBUG 2022-02-14 16:46:36,884 changing phismap: defaultdict(<class 'set'>,
            {'$phi36.0': {('$34get_iter.14',
                           State(pc_initial=0 nstack_initial=0)),
                          ('$phi36.0', State(pc_initial=36 nstack_initial=1))},
             '$phi38.0': {('$34get_iter.14',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi38.1': {('$36for_iter.2',
                           State(pc_initial=36 nstack_initial=1))}})
DEBUG 2022-02-14 16:46:36,884 changing phismap: defaultdict(<class 'set'>,
            {'$phi36.0': {('$34get_iter.14',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi38.0': {('$34get_iter.14',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi38.1': {('$36for_iter.2',
                           State(pc_initial=36 nstack_initial=1))}})
DEBUG 2022-02-14 16:46:36,884 changing phismap: defaultdict(<class 'set'>,
            {'$phi36.0': {('$34get_iter.14',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi38.0': {('$34get_iter.14',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi38.1': {('$36for_iter.2',
                           State(pc_initial=36 nstack_initial=1))}})
DEBUG 2022-02-14 16:46:36,884 keep phismap: {'$phi36.0': {('$34get_iter.14', State(pc_initial=0 nstack_initial=0))},
 '$phi38.1': {('$36for_iter.2', State(pc_initial=36 nstack_initial=1))}}
DEBUG 2022-02-14 16:46:36,885 new_out: defaultdict(<class 'dict'>,
            {State(pc_initial=0 nstack_initial=0): {'$phi36.0': '$34get_iter.14'},
             State(pc_initial=36 nstack_initial=1): {'$phi38.1': '$36for_iter.2'}})
DEBUG 2022-02-14 16:46:36,885 ----------------------DONE Prune PHIs-----------------------
DEBUG 2022-02-14 16:46:36,885 block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$2load_global.0'}), (4, {'item': '$2load_global.0', 'res': '$4load_attr.1'}), (6, {'item': '$4load_attr.1', 'res': '$6load_attr.2'}), (8, {'item': '$6load_attr.2', 'res': '$8load_method.3'}), (10, {'func': '$8load_method.3', 'args': [], 'res': '$10call_method.4'}), (14, {'res': '$14load_deref.5'}), (16, {'value': '$14load_deref.5'}), (18, {'res': '$18load_global.6'}), (20, {'item': '$18load_global.6', 'res': '$20load_attr.7'}), (22, {'item': '$20load_attr.7', 'res': '$22load_attr.8'}), (24, {'item': '$22load_attr.8', 'res': '$24load_method.9'}), (26, {'res': '$26load_global.10'}), (28, {'res': '$in_arr28.11'}), (30, {'func': '$26load_global.10', 'args': ['$in_arr28.11'], 'res': '$30call_function.12'}), (32, {'func': '$24load_method.9', 'args': ['$30call_function.12'], 'res': '$32call_method.13'}), (34, {'value': '$32call_method.13', 'res': '$34get_iter.14'})), outgoing_phis={'$phi36.0': '$34get_iter.14'}, blockstack=(), active_try_block=None, outgoing_edgepushed={36: ('$34get_iter.14',)})
DEBUG 2022-02-14 16:46:36,885 block_infos State(pc_initial=36 nstack_initial=1):
AdaptBlockInfo(insts=((36, {'iterator': '$phi36.0', 'pair': '$36for_iter.1', 'indval': '$36for_iter.2', 'pred': '$36for_iter.3'}),), outgoing_phis={'$phi38.1': '$36for_iter.2'}, blockstack=(), active_try_block=None, outgoing_edgepushed={54: (), 38: ('$phi36.0', '$36for_iter.2')})
DEBUG 2022-02-14 16:46:36,885 block_infos State(pc_initial=38 nstack_initial=2):
AdaptBlockInfo(insts=((38, {'value': '$phi38.1'}), (40, {'res': '$val40.2'}), (42, {'res': '$in_arr42.3'}), (44, {'res': '$i44.4'}), (46, {'index': '$i44.4', 'target': '$in_arr42.3', 'res': '$46binary_subscr.5'}), (48, {'lhs': '$val40.2', 'rhs': '$46binary_subscr.5', 'res': '$48inplace_add.6'}), (50, {'value': '$48inplace_add.6'}), (52, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={36: ('$phi38.0',)})
DEBUG 2022-02-14 16:46:36,885 block_infos State(pc_initial=54 nstack_initial=0):
AdaptBlockInfo(insts=((54, {'res': '$val54.0'}), (56, {'retval': '$val54.0', 'castval': '$56return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG 2022-02-14 16:46:36,886 label 0:
    in_arr = arg(0, name=in_arr)             ['in_arr']
    $2load_global.0 = global(numba: <module 'numba' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numba/__init__.py'>) ['$2load_global.0']
    $4load_attr.1 = getattr(value=$2load_global.0, attr=parfors) ['$2load_global.0', '$4load_attr.1']
    $6load_attr.2 = getattr(value=$4load_attr.1, attr=parfor) ['$4load_attr.1', '$6load_attr.2']
    $8load_method.3 = getattr(value=$6load_attr.2, attr=init_prange) ['$6load_attr.2', '$8load_method.3']
    $10call_method.4 = call $8load_method.3(func=$8load_method.3, args=[], kws=(), vararg=None, target=None) ['$10call_method.4', '$8load_method.3']
    val = freevar(zero: 0)                   ['val']
    $18load_global.6 = global(numba: <module 'numba' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numba/__init__.py'>) ['$18load_global.6']
    $20load_attr.7 = getattr(value=$18load_global.6, attr=parfors) ['$18load_global.6', '$20load_attr.7']
    $22load_attr.8 = getattr(value=$20load_attr.7, attr=parfor) ['$20load_attr.7', '$22load_attr.8']
    $24load_method.9 = getattr(value=$22load_attr.8, attr=internal_prange) ['$22load_attr.8', '$24load_method.9']
    $26load_global.10 = global(len: <built-in function len>) ['$26load_global.10']
    $30call_function.12 = call $26load_global.10(in_arr, func=$26load_global.10, args=[Var(in_arr, parfor.py:254)], kws=(), vararg=None, target=None) ['$26load_global.10', '$30call_function.12', 'in_arr']
    $32call_method.13 = call $24load_method.9($30call_function.12, func=$24load_method.9, args=[Var($30call_function.12, parfor.py:256)], kws=(), vararg=None, target=None) ['$24load_method.9', '$30call_function.12', '$32call_method.13']
    $34get_iter.14 = getiter(value=$32call_method.13) ['$32call_method.13', '$34get_iter.14']
    $phi36.0 = $34get_iter.14                ['$34get_iter.14', '$phi36.0']
    jump 36                                  []
label 36:
    $36for_iter.1 = iternext(value=$phi36.0) ['$36for_iter.1', '$phi36.0']
    $36for_iter.2 = pair_first(value=$36for_iter.1) ['$36for_iter.1', '$36for_iter.2']
    $36for_iter.3 = pair_second(value=$36for_iter.1) ['$36for_iter.1', '$36for_iter.3']
    $phi38.1 = $36for_iter.2                 ['$36for_iter.2', '$phi38.1']
    branch $36for_iter.3, 38, 54             ['$36for_iter.3']
label 38:
    i = $phi38.1                             ['$phi38.1', 'i']
    $46binary_subscr.5 = getitem(value=in_arr, index=i, fn=<built-in function getitem>) ['$46binary_subscr.5', 'i', 'in_arr']
    $48inplace_add.6 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=val, rhs=$46binary_subscr.5, static_lhs=Undefined, static_rhs=Undefined) ['$46binary_subscr.5', '$48inplace_add.6', 'val']
    val = $48inplace_add.6                   ['$48inplace_add.6', 'val']
    jump 36                                  []
label 54:
    $56return_value.1 = cast(value=val)      ['$56return_value.1', 'val']
    return $56return_value.1                 ['$56return_value.1']

DEBUG 2022-02-14 16:46:36,891 bytecode dump:
>          0	NOP(arg=None, lineno=276)
           2	LOAD_GLOBAL(arg=0, lineno=276)
           4	LOAD_ATTR(arg=1, lineno=276)
           6	LOAD_ATTR(arg=2, lineno=276)
           8	LOAD_METHOD(arg=3, lineno=276)
          10	CALL_METHOD(arg=0, lineno=276)
          12	POP_TOP(arg=None, lineno=276)
          14	LOAD_DEREF(arg=0, lineno=277)
          16	STORE_FAST(arg=1, lineno=277)
          18	LOAD_GLOBAL(arg=0, lineno=278)
          20	LOAD_ATTR(arg=1, lineno=278)
          22	LOAD_ATTR(arg=2, lineno=278)
          24	LOAD_METHOD(arg=4, lineno=278)
          26	LOAD_GLOBAL(arg=5, lineno=278)
          28	LOAD_FAST(arg=0, lineno=278)
          30	CALL_FUNCTION(arg=1, lineno=278)
          32	CALL_METHOD(arg=1, lineno=278)
          34	GET_ITER(arg=None, lineno=278)
>         36	FOR_ITER(arg=16, lineno=278)
          38	STORE_FAST(arg=2, lineno=278)
          40	LOAD_FAST(arg=1, lineno=279)
          42	LOAD_FAST(arg=0, lineno=279)
          44	LOAD_FAST(arg=2, lineno=279)
          46	BINARY_SUBSCR(arg=None, lineno=279)
          48	INPLACE_MULTIPLY(arg=None, lineno=279)
          50	STORE_FAST(arg=1, lineno=279)
          52	JUMP_ABSOLUTE(arg=36, lineno=279)
>         54	LOAD_FAST(arg=1, lineno=280)
          56	RETURN_VALUE(arg=None, lineno=280)
DEBUG 2022-02-14 16:46:36,891 pending: deque([State(pc_initial=0 nstack_initial=0)])
DEBUG 2022-02-14 16:46:36,891 stack: []
DEBUG 2022-02-14 16:46:36,892 dispatch pc=0, inst=NOP(arg=None, lineno=276)
DEBUG 2022-02-14 16:46:36,892 stack []
DEBUG 2022-02-14 16:46:36,892 dispatch pc=2, inst=LOAD_GLOBAL(arg=0, lineno=276)
DEBUG 2022-02-14 16:46:36,892 stack []
DEBUG 2022-02-14 16:46:36,892 dispatch pc=4, inst=LOAD_ATTR(arg=1, lineno=276)
DEBUG 2022-02-14 16:46:36,892 stack ['$2load_global.0']
DEBUG 2022-02-14 16:46:36,892 dispatch pc=6, inst=LOAD_ATTR(arg=2, lineno=276)
DEBUG 2022-02-14 16:46:36,892 stack ['$4load_attr.1']
DEBUG 2022-02-14 16:46:36,892 dispatch pc=8, inst=LOAD_METHOD(arg=3, lineno=276)
DEBUG 2022-02-14 16:46:36,892 stack ['$6load_attr.2']
DEBUG 2022-02-14 16:46:36,892 dispatch pc=10, inst=CALL_METHOD(arg=0, lineno=276)
DEBUG 2022-02-14 16:46:36,892 stack ['$8load_method.3']
DEBUG 2022-02-14 16:46:36,892 dispatch pc=12, inst=POP_TOP(arg=None, lineno=276)
DEBUG 2022-02-14 16:46:36,892 stack ['$10call_method.4']
DEBUG 2022-02-14 16:46:36,892 dispatch pc=14, inst=LOAD_DEREF(arg=0, lineno=277)
DEBUG 2022-02-14 16:46:36,892 stack []
DEBUG 2022-02-14 16:46:36,892 dispatch pc=16, inst=STORE_FAST(arg=1, lineno=277)
DEBUG 2022-02-14 16:46:36,892 stack ['$14load_deref.5']
DEBUG 2022-02-14 16:46:36,892 dispatch pc=18, inst=LOAD_GLOBAL(arg=0, lineno=278)
DEBUG 2022-02-14 16:46:36,892 stack []
DEBUG 2022-02-14 16:46:36,892 dispatch pc=20, inst=LOAD_ATTR(arg=1, lineno=278)
DEBUG 2022-02-14 16:46:36,892 stack ['$18load_global.6']
DEBUG 2022-02-14 16:46:36,893 dispatch pc=22, inst=LOAD_ATTR(arg=2, lineno=278)
DEBUG 2022-02-14 16:46:36,893 stack ['$20load_attr.7']
DEBUG 2022-02-14 16:46:36,893 dispatch pc=24, inst=LOAD_METHOD(arg=4, lineno=278)
DEBUG 2022-02-14 16:46:36,893 stack ['$22load_attr.8']
DEBUG 2022-02-14 16:46:36,893 dispatch pc=26, inst=LOAD_GLOBAL(arg=5, lineno=278)
DEBUG 2022-02-14 16:46:36,893 stack ['$24load_method.9']
DEBUG 2022-02-14 16:46:36,893 dispatch pc=28, inst=LOAD_FAST(arg=0, lineno=278)
DEBUG 2022-02-14 16:46:36,893 stack ['$24load_method.9', '$26load_global.10']
DEBUG 2022-02-14 16:46:36,893 dispatch pc=30, inst=CALL_FUNCTION(arg=1, lineno=278)
DEBUG 2022-02-14 16:46:36,893 stack ['$24load_method.9', '$26load_global.10', '$in_arr28.11']
DEBUG 2022-02-14 16:46:36,893 dispatch pc=32, inst=CALL_METHOD(arg=1, lineno=278)
DEBUG 2022-02-14 16:46:36,893 stack ['$24load_method.9', '$30call_function.12']
DEBUG 2022-02-14 16:46:36,893 dispatch pc=34, inst=GET_ITER(arg=None, lineno=278)
DEBUG 2022-02-14 16:46:36,893 stack ['$32call_method.13']
DEBUG 2022-02-14 16:46:36,893 end state. edges=[Edge(pc=36, stack=('$34get_iter.14',), blockstack=(), npush=0)]
DEBUG 2022-02-14 16:46:36,893 pending: deque([State(pc_initial=36 nstack_initial=1)])
DEBUG 2022-02-14 16:46:36,893 stack: ['$phi36.0']
DEBUG 2022-02-14 16:46:36,893 dispatch pc=36, inst=FOR_ITER(arg=16, lineno=278)
DEBUG 2022-02-14 16:46:36,893 stack ['$phi36.0']
DEBUG 2022-02-14 16:46:36,894 end state. edges=[Edge(pc=54, stack=(), blockstack=(), npush=0), Edge(pc=38, stack=('$phi36.0', '$36for_iter.2'), blockstack=(), npush=0)]
DEBUG 2022-02-14 16:46:36,894 pending: deque([State(pc_initial=54 nstack_initial=0), State(pc_initial=38 nstack_initial=2)])
DEBUG 2022-02-14 16:46:36,894 stack: []
DEBUG 2022-02-14 16:46:36,894 dispatch pc=54, inst=LOAD_FAST(arg=1, lineno=280)
DEBUG 2022-02-14 16:46:36,894 stack []
DEBUG 2022-02-14 16:46:36,894 dispatch pc=56, inst=RETURN_VALUE(arg=None, lineno=280)
DEBUG 2022-02-14 16:46:36,894 stack ['$val54.0']
DEBUG 2022-02-14 16:46:36,894 end state. edges=[]
DEBUG 2022-02-14 16:46:36,894 pending: deque([State(pc_initial=38 nstack_initial=2)])
DEBUG 2022-02-14 16:46:36,894 stack: ['$phi38.0', '$phi38.1']
DEBUG 2022-02-14 16:46:36,894 dispatch pc=38, inst=STORE_FAST(arg=2, lineno=278)
DEBUG 2022-02-14 16:46:36,894 stack ['$phi38.0', '$phi38.1']
DEBUG 2022-02-14 16:46:36,894 dispatch pc=40, inst=LOAD_FAST(arg=1, lineno=279)
DEBUG 2022-02-14 16:46:36,894 stack ['$phi38.0']
DEBUG 2022-02-14 16:46:36,894 dispatch pc=42, inst=LOAD_FAST(arg=0, lineno=279)
DEBUG 2022-02-14 16:46:36,894 stack ['$phi38.0', '$val40.2']
DEBUG 2022-02-14 16:46:36,894 dispatch pc=44, inst=LOAD_FAST(arg=2, lineno=279)
DEBUG 2022-02-14 16:46:36,894 stack ['$phi38.0', '$val40.2', '$in_arr42.3']
DEBUG 2022-02-14 16:46:36,894 dispatch pc=46, inst=BINARY_SUBSCR(arg=None, lineno=279)
DEBUG 2022-02-14 16:46:36,894 stack ['$phi38.0', '$val40.2', '$in_arr42.3', '$i44.4']
DEBUG 2022-02-14 16:46:36,894 dispatch pc=48, inst=INPLACE_MULTIPLY(arg=None, lineno=279)
DEBUG 2022-02-14 16:46:36,895 stack ['$phi38.0', '$val40.2', '$46binary_subscr.5']
DEBUG 2022-02-14 16:46:36,895 dispatch pc=50, inst=STORE_FAST(arg=1, lineno=279)
DEBUG 2022-02-14 16:46:36,895 stack ['$phi38.0', '$48inplace_multiply.6']
DEBUG 2022-02-14 16:46:36,895 dispatch pc=52, inst=JUMP_ABSOLUTE(arg=36, lineno=279)
DEBUG 2022-02-14 16:46:36,895 stack ['$phi38.0']
DEBUG 2022-02-14 16:46:36,895 end state. edges=[Edge(pc=36, stack=('$phi38.0',), blockstack=(), npush=0)]
DEBUG 2022-02-14 16:46:36,895 pending: deque([State(pc_initial=36 nstack_initial=1)])
DEBUG 2022-02-14 16:46:36,895 -------------------------Prune PHIs-------------------------
DEBUG 2022-02-14 16:46:36,895 Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=36 nstack_initial=1): {'$phi36.0'},
             State(pc_initial=38 nstack_initial=2): {'$phi38.1'},
             State(pc_initial=54 nstack_initial=0): set()})
DEBUG 2022-02-14 16:46:36,895 defmap: {'$phi36.0': State(pc_initial=0 nstack_initial=0),
 '$phi38.1': State(pc_initial=36 nstack_initial=1)}
DEBUG 2022-02-14 16:46:36,895 phismap: defaultdict(<class 'set'>,
            {'$phi36.0': {('$34get_iter.14',
                           State(pc_initial=0 nstack_initial=0)),
                          ('$phi38.0', State(pc_initial=38 nstack_initial=2))},
             '$phi38.0': {('$phi36.0', State(pc_initial=36 nstack_initial=1))},
             '$phi38.1': {('$36for_iter.2',
                           State(pc_initial=36 nstack_initial=1))}})
DEBUG 2022-02-14 16:46:36,895 changing phismap: defaultdict(<class 'set'>,
            {'$phi36.0': {('$34get_iter.14',
                           State(pc_initial=0 nstack_initial=0)),
                          ('$phi36.0', State(pc_initial=36 nstack_initial=1))},
             '$phi38.0': {('$34get_iter.14',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi38.1': {('$36for_iter.2',
                           State(pc_initial=36 nstack_initial=1))}})
DEBUG 2022-02-14 16:46:36,896 changing phismap: defaultdict(<class 'set'>,
            {'$phi36.0': {('$34get_iter.14',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi38.0': {('$34get_iter.14',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi38.1': {('$36for_iter.2',
                           State(pc_initial=36 nstack_initial=1))}})
DEBUG 2022-02-14 16:46:36,896 changing phismap: defaultdict(<class 'set'>,
            {'$phi36.0': {('$34get_iter.14',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi38.0': {('$34get_iter.14',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi38.1': {('$36for_iter.2',
                           State(pc_initial=36 nstack_initial=1))}})
DEBUG 2022-02-14 16:46:36,896 keep phismap: {'$phi36.0': {('$34get_iter.14', State(pc_initial=0 nstack_initial=0))},
 '$phi38.1': {('$36for_iter.2', State(pc_initial=36 nstack_initial=1))}}
DEBUG 2022-02-14 16:46:36,896 new_out: defaultdict(<class 'dict'>,
            {State(pc_initial=0 nstack_initial=0): {'$phi36.0': '$34get_iter.14'},
             State(pc_initial=36 nstack_initial=1): {'$phi38.1': '$36for_iter.2'}})
DEBUG 2022-02-14 16:46:36,896 ----------------------DONE Prune PHIs-----------------------
DEBUG 2022-02-14 16:46:36,896 block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$2load_global.0'}), (4, {'item': '$2load_global.0', 'res': '$4load_attr.1'}), (6, {'item': '$4load_attr.1', 'res': '$6load_attr.2'}), (8, {'item': '$6load_attr.2', 'res': '$8load_method.3'}), (10, {'func': '$8load_method.3', 'args': [], 'res': '$10call_method.4'}), (14, {'res': '$14load_deref.5'}), (16, {'value': '$14load_deref.5'}), (18, {'res': '$18load_global.6'}), (20, {'item': '$18load_global.6', 'res': '$20load_attr.7'}), (22, {'item': '$20load_attr.7', 'res': '$22load_attr.8'}), (24, {'item': '$22load_attr.8', 'res': '$24load_method.9'}), (26, {'res': '$26load_global.10'}), (28, {'res': '$in_arr28.11'}), (30, {'func': '$26load_global.10', 'args': ['$in_arr28.11'], 'res': '$30call_function.12'}), (32, {'func': '$24load_method.9', 'args': ['$30call_function.12'], 'res': '$32call_method.13'}), (34, {'value': '$32call_method.13', 'res': '$34get_iter.14'})), outgoing_phis={'$phi36.0': '$34get_iter.14'}, blockstack=(), active_try_block=None, outgoing_edgepushed={36: ('$34get_iter.14',)})
DEBUG 2022-02-14 16:46:36,896 block_infos State(pc_initial=36 nstack_initial=1):
AdaptBlockInfo(insts=((36, {'iterator': '$phi36.0', 'pair': '$36for_iter.1', 'indval': '$36for_iter.2', 'pred': '$36for_iter.3'}),), outgoing_phis={'$phi38.1': '$36for_iter.2'}, blockstack=(), active_try_block=None, outgoing_edgepushed={54: (), 38: ('$phi36.0', '$36for_iter.2')})
DEBUG 2022-02-14 16:46:36,896 block_infos State(pc_initial=38 nstack_initial=2):
AdaptBlockInfo(insts=((38, {'value': '$phi38.1'}), (40, {'res': '$val40.2'}), (42, {'res': '$in_arr42.3'}), (44, {'res': '$i44.4'}), (46, {'index': '$i44.4', 'target': '$in_arr42.3', 'res': '$46binary_subscr.5'}), (48, {'lhs': '$val40.2', 'rhs': '$46binary_subscr.5', 'res': '$48inplace_multiply.6'}), (50, {'value': '$48inplace_multiply.6'}), (52, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={36: ('$phi38.0',)})
DEBUG 2022-02-14 16:46:36,897 block_infos State(pc_initial=54 nstack_initial=0):
AdaptBlockInfo(insts=((54, {'res': '$val54.0'}), (56, {'retval': '$val54.0', 'castval': '$56return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG 2022-02-14 16:46:36,897 label 0:
    in_arr = arg(0, name=in_arr)             ['in_arr']
    $2load_global.0 = global(numba: <module 'numba' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numba/__init__.py'>) ['$2load_global.0']
    $4load_attr.1 = getattr(value=$2load_global.0, attr=parfors) ['$2load_global.0', '$4load_attr.1']
    $6load_attr.2 = getattr(value=$4load_attr.1, attr=parfor) ['$4load_attr.1', '$6load_attr.2']
    $8load_method.3 = getattr(value=$6load_attr.2, attr=init_prange) ['$6load_attr.2', '$8load_method.3']
    $10call_method.4 = call $8load_method.3(func=$8load_method.3, args=[], kws=(), vararg=None, target=None) ['$10call_method.4', '$8load_method.3']
    val = freevar(one: 1)                    ['val']
    $18load_global.6 = global(numba: <module 'numba' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numba/__init__.py'>) ['$18load_global.6']
    $20load_attr.7 = getattr(value=$18load_global.6, attr=parfors) ['$18load_global.6', '$20load_attr.7']
    $22load_attr.8 = getattr(value=$20load_attr.7, attr=parfor) ['$20load_attr.7', '$22load_attr.8']
    $24load_method.9 = getattr(value=$22load_attr.8, attr=internal_prange) ['$22load_attr.8', '$24load_method.9']
    $26load_global.10 = global(len: <built-in function len>) ['$26load_global.10']
    $30call_function.12 = call $26load_global.10(in_arr, func=$26load_global.10, args=[Var(in_arr, parfor.py:276)], kws=(), vararg=None, target=None) ['$26load_global.10', '$30call_function.12', 'in_arr']
    $32call_method.13 = call $24load_method.9($30call_function.12, func=$24load_method.9, args=[Var($30call_function.12, parfor.py:278)], kws=(), vararg=None, target=None) ['$24load_method.9', '$30call_function.12', '$32call_method.13']
    $34get_iter.14 = getiter(value=$32call_method.13) ['$32call_method.13', '$34get_iter.14']
    $phi36.0 = $34get_iter.14                ['$34get_iter.14', '$phi36.0']
    jump 36                                  []
label 36:
    $36for_iter.1 = iternext(value=$phi36.0) ['$36for_iter.1', '$phi36.0']
    $36for_iter.2 = pair_first(value=$36for_iter.1) ['$36for_iter.1', '$36for_iter.2']
    $36for_iter.3 = pair_second(value=$36for_iter.1) ['$36for_iter.1', '$36for_iter.3']
    $phi38.1 = $36for_iter.2                 ['$36for_iter.2', '$phi38.1']
    branch $36for_iter.3, 38, 54             ['$36for_iter.3']
label 38:
    i = $phi38.1                             ['$phi38.1', 'i']
    $46binary_subscr.5 = getitem(value=in_arr, index=i, fn=<built-in function getitem>) ['$46binary_subscr.5', 'i', 'in_arr']
    $48inplace_multiply.6 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=val, rhs=$46binary_subscr.5, static_lhs=Undefined, static_rhs=Undefined) ['$46binary_subscr.5', '$48inplace_multiply.6', 'val']
    val = $48inplace_multiply.6              ['$48inplace_multiply.6', 'val']
    jump 36                                  []
label 54:
    $56return_value.1 = cast(value=val)      ['$56return_value.1', 'val']
    return $56return_value.1                 ['$56return_value.1']

DEBUG 2022-02-14 16:46:36,903 bytecode dump:
>          0	NOP(arg=None, lineno=154)
           2	LOAD_GLOBAL(arg=0, lineno=154)
           4	LOAD_ATTR(arg=1, lineno=154)
           6	LOAD_ATTR(arg=2, lineno=154)
           8	LOAD_METHOD(arg=3, lineno=154)
          10	CALL_METHOD(arg=0, lineno=154)
          12	POP_TOP(arg=None, lineno=154)
          14	LOAD_GLOBAL(arg=4, lineno=155)
          16	LOAD_GLOBAL(arg=5, lineno=155)
          18	LOAD_FAST(arg=0, lineno=155)
          20	CALL_FUNCTION(arg=1, lineno=155)
          22	CALL_FUNCTION(arg=1, lineno=155)
          24	POP_TOP(arg=None, lineno=155)
          26	LOAD_GLOBAL(arg=0, lineno=156)
          28	LOAD_ATTR(arg=6, lineno=156)
          30	LOAD_ATTR(arg=7, lineno=156)
          32	LOAD_METHOD(arg=8, lineno=156)
          34	LOAD_FAST(arg=0, lineno=156)
          36	LOAD_ATTR(arg=9, lineno=156)
          38	CALL_METHOD(arg=1, lineno=156)
          40	STORE_FAST(arg=1, lineno=156)
          42	LOAD_GLOBAL(arg=0, lineno=157)
          44	LOAD_ATTR(arg=1, lineno=157)
          46	LOAD_ATTR(arg=2, lineno=157)
          48	LOAD_METHOD(arg=10, lineno=157)
          50	LOAD_GLOBAL(arg=5, lineno=157)
          52	LOAD_FAST(arg=0, lineno=157)
          54	CALL_FUNCTION(arg=1, lineno=157)
          56	CALL_METHOD(arg=1, lineno=157)
          58	GET_ITER(arg=None, lineno=157)
>         60	FOR_ITER(arg=18, lineno=157)
          62	STORE_FAST(arg=2, lineno=157)
          64	LOAD_GLOBAL(arg=11, lineno=158)
          66	LOAD_FAST(arg=1, lineno=158)
          68	LOAD_FAST(arg=0, lineno=158)
          70	LOAD_FAST(arg=2, lineno=158)
          72	BINARY_SUBSCR(arg=None, lineno=158)
          74	CALL_FUNCTION(arg=2, lineno=158)
          76	STORE_FAST(arg=1, lineno=158)
          78	JUMP_ABSOLUTE(arg=60, lineno=158)
>         80	LOAD_FAST(arg=1, lineno=159)
          82	RETURN_VALUE(arg=None, lineno=159)
DEBUG 2022-02-14 16:46:36,903 pending: deque([State(pc_initial=0 nstack_initial=0)])
DEBUG 2022-02-14 16:46:36,903 stack: []
DEBUG 2022-02-14 16:46:36,903 dispatch pc=0, inst=NOP(arg=None, lineno=154)
DEBUG 2022-02-14 16:46:36,903 stack []
DEBUG 2022-02-14 16:46:36,903 dispatch pc=2, inst=LOAD_GLOBAL(arg=0, lineno=154)
DEBUG 2022-02-14 16:46:36,903 stack []
DEBUG 2022-02-14 16:46:36,903 dispatch pc=4, inst=LOAD_ATTR(arg=1, lineno=154)
DEBUG 2022-02-14 16:46:36,903 stack ['$2load_global.0']
DEBUG 2022-02-14 16:46:36,903 dispatch pc=6, inst=LOAD_ATTR(arg=2, lineno=154)
DEBUG 2022-02-14 16:46:36,903 stack ['$4load_attr.1']
DEBUG 2022-02-14 16:46:36,903 dispatch pc=8, inst=LOAD_METHOD(arg=3, lineno=154)
DEBUG 2022-02-14 16:46:36,903 stack ['$6load_attr.2']
DEBUG 2022-02-14 16:46:36,903 dispatch pc=10, inst=CALL_METHOD(arg=0, lineno=154)
DEBUG 2022-02-14 16:46:36,903 stack ['$8load_method.3']
DEBUG 2022-02-14 16:46:36,903 dispatch pc=12, inst=POP_TOP(arg=None, lineno=154)
DEBUG 2022-02-14 16:46:36,903 stack ['$10call_method.4']
DEBUG 2022-02-14 16:46:36,904 dispatch pc=14, inst=LOAD_GLOBAL(arg=4, lineno=155)
DEBUG 2022-02-14 16:46:36,904 stack []
DEBUG 2022-02-14 16:46:36,904 dispatch pc=16, inst=LOAD_GLOBAL(arg=5, lineno=155)
DEBUG 2022-02-14 16:46:36,904 stack ['$14load_global.5']
DEBUG 2022-02-14 16:46:36,904 dispatch pc=18, inst=LOAD_FAST(arg=0, lineno=155)
DEBUG 2022-02-14 16:46:36,904 stack ['$14load_global.5', '$16load_global.6']
DEBUG 2022-02-14 16:46:36,904 dispatch pc=20, inst=CALL_FUNCTION(arg=1, lineno=155)
DEBUG 2022-02-14 16:46:36,904 stack ['$14load_global.5', '$16load_global.6', '$in_arr18.7']
DEBUG 2022-02-14 16:46:36,904 dispatch pc=22, inst=CALL_FUNCTION(arg=1, lineno=155)
DEBUG 2022-02-14 16:46:36,904 stack ['$14load_global.5', '$20call_function.8']
DEBUG 2022-02-14 16:46:36,904 dispatch pc=24, inst=POP_TOP(arg=None, lineno=155)
DEBUG 2022-02-14 16:46:36,904 stack ['$22call_function.9']
DEBUG 2022-02-14 16:46:36,904 dispatch pc=26, inst=LOAD_GLOBAL(arg=0, lineno=156)
DEBUG 2022-02-14 16:46:36,904 stack []
DEBUG 2022-02-14 16:46:36,904 dispatch pc=28, inst=LOAD_ATTR(arg=6, lineno=156)
DEBUG 2022-02-14 16:46:36,904 stack ['$26load_global.10']
DEBUG 2022-02-14 16:46:36,904 dispatch pc=30, inst=LOAD_ATTR(arg=7, lineno=156)
DEBUG 2022-02-14 16:46:36,904 stack ['$28load_attr.11']
DEBUG 2022-02-14 16:46:36,904 dispatch pc=32, inst=LOAD_METHOD(arg=8, lineno=156)
DEBUG 2022-02-14 16:46:36,904 stack ['$30load_attr.12']
DEBUG 2022-02-14 16:46:36,904 dispatch pc=34, inst=LOAD_FAST(arg=0, lineno=156)
DEBUG 2022-02-14 16:46:36,904 stack ['$32load_method.13']
DEBUG 2022-02-14 16:46:36,905 dispatch pc=36, inst=LOAD_ATTR(arg=9, lineno=156)
DEBUG 2022-02-14 16:46:36,905 stack ['$32load_method.13', '$in_arr34.14']
DEBUG 2022-02-14 16:46:36,905 dispatch pc=38, inst=CALL_METHOD(arg=1, lineno=156)
DEBUG 2022-02-14 16:46:36,905 stack ['$32load_method.13', '$36load_attr.15']
DEBUG 2022-02-14 16:46:36,905 dispatch pc=40, inst=STORE_FAST(arg=1, lineno=156)
DEBUG 2022-02-14 16:46:36,905 stack ['$38call_method.16']
DEBUG 2022-02-14 16:46:36,905 dispatch pc=42, inst=LOAD_GLOBAL(arg=0, lineno=157)
DEBUG 2022-02-14 16:46:36,905 stack []
DEBUG 2022-02-14 16:46:36,905 dispatch pc=44, inst=LOAD_ATTR(arg=1, lineno=157)
DEBUG 2022-02-14 16:46:36,905 stack ['$42load_global.17']
DEBUG 2022-02-14 16:46:36,905 dispatch pc=46, inst=LOAD_ATTR(arg=2, lineno=157)
DEBUG 2022-02-14 16:46:36,905 stack ['$44load_attr.18']
DEBUG 2022-02-14 16:46:36,905 dispatch pc=48, inst=LOAD_METHOD(arg=10, lineno=157)
DEBUG 2022-02-14 16:46:36,905 stack ['$46load_attr.19']
DEBUG 2022-02-14 16:46:36,905 dispatch pc=50, inst=LOAD_GLOBAL(arg=5, lineno=157)
DEBUG 2022-02-14 16:46:36,905 stack ['$48load_method.20']
DEBUG 2022-02-14 16:46:36,905 dispatch pc=52, inst=LOAD_FAST(arg=0, lineno=157)
DEBUG 2022-02-14 16:46:36,905 stack ['$48load_method.20', '$50load_global.21']
DEBUG 2022-02-14 16:46:36,905 dispatch pc=54, inst=CALL_FUNCTION(arg=1, lineno=157)
DEBUG 2022-02-14 16:46:36,905 stack ['$48load_method.20', '$50load_global.21', '$in_arr52.22']
DEBUG 2022-02-14 16:46:36,905 dispatch pc=56, inst=CALL_METHOD(arg=1, lineno=157)
DEBUG 2022-02-14 16:46:36,905 stack ['$48load_method.20', '$54call_function.23']
DEBUG 2022-02-14 16:46:36,906 dispatch pc=58, inst=GET_ITER(arg=None, lineno=157)
DEBUG 2022-02-14 16:46:36,906 stack ['$56call_method.24']
DEBUG 2022-02-14 16:46:36,906 end state. edges=[Edge(pc=60, stack=('$58get_iter.25',), blockstack=(), npush=0)]
DEBUG 2022-02-14 16:46:36,906 pending: deque([State(pc_initial=60 nstack_initial=1)])
DEBUG 2022-02-14 16:46:36,906 stack: ['$phi60.0']
DEBUG 2022-02-14 16:46:36,906 dispatch pc=60, inst=FOR_ITER(arg=18, lineno=157)
DEBUG 2022-02-14 16:46:36,906 stack ['$phi60.0']
DEBUG 2022-02-14 16:46:36,906 end state. edges=[Edge(pc=80, stack=(), blockstack=(), npush=0), Edge(pc=62, stack=('$phi60.0', '$60for_iter.2'), blockstack=(), npush=0)]
DEBUG 2022-02-14 16:46:36,906 pending: deque([State(pc_initial=80 nstack_initial=0), State(pc_initial=62 nstack_initial=2)])
DEBUG 2022-02-14 16:46:36,906 stack: []
DEBUG 2022-02-14 16:46:36,906 dispatch pc=80, inst=LOAD_FAST(arg=1, lineno=159)
DEBUG 2022-02-14 16:46:36,906 stack []
DEBUG 2022-02-14 16:46:36,906 dispatch pc=82, inst=RETURN_VALUE(arg=None, lineno=159)
DEBUG 2022-02-14 16:46:36,906 stack ['$val80.0']
DEBUG 2022-02-14 16:46:36,906 end state. edges=[]
DEBUG 2022-02-14 16:46:36,906 pending: deque([State(pc_initial=62 nstack_initial=2)])
DEBUG 2022-02-14 16:46:36,906 stack: ['$phi62.0', '$phi62.1']
DEBUG 2022-02-14 16:46:36,906 dispatch pc=62, inst=STORE_FAST(arg=2, lineno=157)
DEBUG 2022-02-14 16:46:36,906 stack ['$phi62.0', '$phi62.1']
DEBUG 2022-02-14 16:46:36,906 dispatch pc=64, inst=LOAD_GLOBAL(arg=11, lineno=158)
DEBUG 2022-02-14 16:46:36,907 stack ['$phi62.0']
DEBUG 2022-02-14 16:46:36,907 dispatch pc=66, inst=LOAD_FAST(arg=1, lineno=158)
DEBUG 2022-02-14 16:46:36,907 stack ['$phi62.0', '$64load_global.2']
DEBUG 2022-02-14 16:46:36,907 dispatch pc=68, inst=LOAD_FAST(arg=0, lineno=158)
DEBUG 2022-02-14 16:46:36,907 stack ['$phi62.0', '$64load_global.2', '$val66.3']
DEBUG 2022-02-14 16:46:36,907 dispatch pc=70, inst=LOAD_FAST(arg=2, lineno=158)
DEBUG 2022-02-14 16:46:36,907 stack ['$phi62.0', '$64load_global.2', '$val66.3', '$in_arr68.4']
DEBUG 2022-02-14 16:46:36,907 dispatch pc=72, inst=BINARY_SUBSCR(arg=None, lineno=158)
DEBUG 2022-02-14 16:46:36,907 stack ['$phi62.0', '$64load_global.2', '$val66.3', '$in_arr68.4', '$i70.5']
DEBUG 2022-02-14 16:46:36,907 dispatch pc=74, inst=CALL_FUNCTION(arg=2, lineno=158)
DEBUG 2022-02-14 16:46:36,907 stack ['$phi62.0', '$64load_global.2', '$val66.3', '$72binary_subscr.6']
DEBUG 2022-02-14 16:46:36,907 dispatch pc=76, inst=STORE_FAST(arg=1, lineno=158)
DEBUG 2022-02-14 16:46:36,907 stack ['$phi62.0', '$74call_function.7']
DEBUG 2022-02-14 16:46:36,907 dispatch pc=78, inst=JUMP_ABSOLUTE(arg=60, lineno=158)
DEBUG 2022-02-14 16:46:36,907 stack ['$phi62.0']
DEBUG 2022-02-14 16:46:36,907 end state. edges=[Edge(pc=60, stack=('$phi62.0',), blockstack=(), npush=0)]
DEBUG 2022-02-14 16:46:36,907 pending: deque([State(pc_initial=60 nstack_initial=1)])
DEBUG 2022-02-14 16:46:36,908 -------------------------Prune PHIs-------------------------
DEBUG 2022-02-14 16:46:36,908 Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=60 nstack_initial=1): {'$phi60.0'},
             State(pc_initial=62 nstack_initial=2): {'$phi62.1'},
             State(pc_initial=80 nstack_initial=0): set()})
DEBUG 2022-02-14 16:46:36,908 defmap: {'$phi60.0': State(pc_initial=0 nstack_initial=0),
 '$phi62.1': State(pc_initial=60 nstack_initial=1)}
DEBUG 2022-02-14 16:46:36,908 phismap: defaultdict(<class 'set'>,
            {'$phi60.0': {('$58get_iter.25',
                           State(pc_initial=0 nstack_initial=0)),
                          ('$phi62.0', State(pc_initial=62 nstack_initial=2))},
             '$phi62.0': {('$phi60.0', State(pc_initial=60 nstack_initial=1))},
             '$phi62.1': {('$60for_iter.2',
                           State(pc_initial=60 nstack_initial=1))}})
DEBUG 2022-02-14 16:46:36,909 changing phismap: defaultdict(<class 'set'>,
            {'$phi60.0': {('$58get_iter.25',
                           State(pc_initial=0 nstack_initial=0)),
                          ('$phi60.0', State(pc_initial=60 nstack_initial=1))},
             '$phi62.0': {('$58get_iter.25',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi62.1': {('$60for_iter.2',
                           State(pc_initial=60 nstack_initial=1))}})
DEBUG 2022-02-14 16:46:36,909 changing phismap: defaultdict(<class 'set'>,
            {'$phi60.0': {('$58get_iter.25',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi62.0': {('$58get_iter.25',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi62.1': {('$60for_iter.2',
                           State(pc_initial=60 nstack_initial=1))}})
DEBUG 2022-02-14 16:46:36,909 changing phismap: defaultdict(<class 'set'>,
            {'$phi60.0': {('$58get_iter.25',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi62.0': {('$58get_iter.25',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi62.1': {('$60for_iter.2',
                           State(pc_initial=60 nstack_initial=1))}})
DEBUG 2022-02-14 16:46:36,909 keep phismap: {'$phi60.0': {('$58get_iter.25', State(pc_initial=0 nstack_initial=0))},
 '$phi62.1': {('$60for_iter.2', State(pc_initial=60 nstack_initial=1))}}
DEBUG 2022-02-14 16:46:36,909 new_out: defaultdict(<class 'dict'>,
            {State(pc_initial=0 nstack_initial=0): {'$phi60.0': '$58get_iter.25'},
             State(pc_initial=60 nstack_initial=1): {'$phi62.1': '$60for_iter.2'}})
DEBUG 2022-02-14 16:46:36,909 ----------------------DONE Prune PHIs-----------------------
DEBUG 2022-02-14 16:46:36,910 block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$2load_global.0'}), (4, {'item': '$2load_global.0', 'res': '$4load_attr.1'}), (6, {'item': '$4load_attr.1', 'res': '$6load_attr.2'}), (8, {'item': '$6load_attr.2', 'res': '$8load_method.3'}), (10, {'func': '$8load_method.3', 'args': [], 'res': '$10call_method.4'}), (14, {'res': '$14load_global.5'}), (16, {'res': '$16load_global.6'}), (18, {'res': '$in_arr18.7'}), (20, {'func': '$16load_global.6', 'args': ['$in_arr18.7'], 'res': '$20call_function.8'}), (22, {'func': '$14load_global.5', 'args': ['$20call_function.8'], 'res': '$22call_function.9'}), (26, {'res': '$26load_global.10'}), (28, {'item': '$26load_global.10', 'res': '$28load_attr.11'}), (30, {'item': '$28load_attr.11', 'res': '$30load_attr.12'}), (32, {'item': '$30load_attr.12', 'res': '$32load_method.13'}), (34, {'res': '$in_arr34.14'}), (36, {'item': '$in_arr34.14', 'res': '$36load_attr.15'}), (38, {'func': '$32load_method.13', 'args': ['$36load_attr.15'], 'res': '$38call_method.16'}), (40, {'value': '$38call_method.16'}), (42, {'res': '$42load_global.17'}), (44, {'item': '$42load_global.17', 'res': '$44load_attr.18'}), (46, {'item': '$44load_attr.18', 'res': '$46load_attr.19'}), (48, {'item': '$46load_attr.19', 'res': '$48load_method.20'}), (50, {'res': '$50load_global.21'}), (52, {'res': '$in_arr52.22'}), (54, {'func': '$50load_global.21', 'args': ['$in_arr52.22'], 'res': '$54call_function.23'}), (56, {'func': '$48load_method.20', 'args': ['$54call_function.23'], 'res': '$56call_method.24'}), (58, {'value': '$56call_method.24', 'res': '$58get_iter.25'})), outgoing_phis={'$phi60.0': '$58get_iter.25'}, blockstack=(), active_try_block=None, outgoing_edgepushed={60: ('$58get_iter.25',)})
DEBUG 2022-02-14 16:46:36,910 block_infos State(pc_initial=60 nstack_initial=1):
AdaptBlockInfo(insts=((60, {'iterator': '$phi60.0', 'pair': '$60for_iter.1', 'indval': '$60for_iter.2', 'pred': '$60for_iter.3'}),), outgoing_phis={'$phi62.1': '$60for_iter.2'}, blockstack=(), active_try_block=None, outgoing_edgepushed={80: (), 62: ('$phi60.0', '$60for_iter.2')})
DEBUG 2022-02-14 16:46:36,910 block_infos State(pc_initial=62 nstack_initial=2):
AdaptBlockInfo(insts=((62, {'value': '$phi62.1'}), (64, {'res': '$64load_global.2'}), (66, {'res': '$val66.3'}), (68, {'res': '$in_arr68.4'}), (70, {'res': '$i70.5'}), (72, {'index': '$i70.5', 'target': '$in_arr68.4', 'res': '$72binary_subscr.6'}), (74, {'func': '$64load_global.2', 'args': ['$val66.3', '$72binary_subscr.6'], 'res': '$74call_function.7'}), (76, {'value': '$74call_function.7'}), (78, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={60: ('$phi62.0',)})
DEBUG 2022-02-14 16:46:36,910 block_infos State(pc_initial=80 nstack_initial=0):
AdaptBlockInfo(insts=((80, {'res': '$val80.0'}), (82, {'retval': '$val80.0', 'castval': '$82return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG 2022-02-14 16:46:36,911 label 0:
    in_arr = arg(0, name=in_arr)             ['in_arr']
    $2load_global.0 = global(numba: <module 'numba' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numba/__init__.py'>) ['$2load_global.0']
    $4load_attr.1 = getattr(value=$2load_global.0, attr=parfors) ['$2load_global.0', '$4load_attr.1']
    $6load_attr.2 = getattr(value=$4load_attr.1, attr=parfor) ['$4load_attr.1', '$6load_attr.2']
    $8load_method.3 = getattr(value=$6load_attr.2, attr=init_prange) ['$6load_attr.2', '$8load_method.3']
    $10call_method.4 = call $8load_method.3(func=$8load_method.3, args=[], kws=(), vararg=None, target=None) ['$10call_method.4', '$8load_method.3']
    $14load_global.5 = global(max_checker: <function max_checker at 0x7f720a758ee0>) ['$14load_global.5']
    $16load_global.6 = global(len: <built-in function len>) ['$16load_global.6']
    $20call_function.8 = call $16load_global.6(in_arr, func=$16load_global.6, args=[Var(in_arr, parfor.py:154)], kws=(), vararg=None, target=None) ['$16load_global.6', '$20call_function.8', 'in_arr']
    $22call_function.9 = call $14load_global.5($20call_function.8, func=$14load_global.5, args=[Var($20call_function.8, parfor.py:155)], kws=(), vararg=None, target=None) ['$14load_global.5', '$20call_function.8', '$22call_function.9']
    $26load_global.10 = global(numba: <module 'numba' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numba/__init__.py'>) ['$26load_global.10']
    $28load_attr.11 = getattr(value=$26load_global.10, attr=cpython) ['$26load_global.10', '$28load_attr.11']
    $30load_attr.12 = getattr(value=$28load_attr.11, attr=builtins) ['$28load_attr.11', '$30load_attr.12']
    $32load_method.13 = getattr(value=$30load_attr.12, attr=get_type_min_value) ['$30load_attr.12', '$32load_method.13']
    $36load_attr.15 = getattr(value=in_arr, attr=dtype) ['$36load_attr.15', 'in_arr']
    val = call $32load_method.13($36load_attr.15, func=$32load_method.13, args=[Var($36load_attr.15, parfor.py:156)], kws=(), vararg=None, target=None) ['$32load_method.13', '$36load_attr.15', 'val']
    $42load_global.17 = global(numba: <module 'numba' from '/home/adi/anaconda3/envs/gbs/lib/python3.9/site-packages/numba/__init__.py'>) ['$42load_global.17']
    $44load_attr.18 = getattr(value=$42load_global.17, attr=parfors) ['$42load_global.17', '$44load_attr.18']
    $46load_attr.19 = getattr(value=$44load_attr.18, attr=parfor) ['$44load_attr.18', '$46load_attr.19']
    $48load_method.20 = getattr(value=$46load_attr.19, attr=internal_prange) ['$46load_attr.19', '$48load_method.20']
    $50load_global.21 = global(len: <built-in function len>) ['$50load_global.21']
    $54call_function.23 = call $50load_global.21(in_arr, func=$50load_global.21, args=[Var(in_arr, parfor.py:154)], kws=(), vararg=None, target=None) ['$50load_global.21', '$54call_function.23', 'in_arr']
    $56call_method.24 = call $48load_method.20($54call_function.23, func=$48load_method.20, args=[Var($54call_function.23, parfor.py:157)], kws=(), vararg=None, target=None) ['$48load_method.20', '$54call_function.23', '$56call_method.24']
    $58get_iter.25 = getiter(value=$56call_method.24) ['$56call_method.24', '$58get_iter.25']
    $phi60.0 = $58get_iter.25                ['$58get_iter.25', '$phi60.0']
    jump 60                                  []
label 60:
    $60for_iter.1 = iternext(value=$phi60.0) ['$60for_iter.1', '$phi60.0']
    $60for_iter.2 = pair_first(value=$60for_iter.1) ['$60for_iter.1', '$60for_iter.2']
    $60for_iter.3 = pair_second(value=$60for_iter.1) ['$60for_iter.1', '$60for_iter.3']
    $phi62.1 = $60for_iter.2                 ['$60for_iter.2', '$phi62.1']
    branch $60for_iter.3, 62, 80             ['$60for_iter.3']
label 62:
    i = $phi62.1                             ['$phi62.1', 'i']
    $64load_global.2 = global(max: <built-in function max>) ['$64load_global.2']
    $72binary_subscr.6 = getitem(value=in_arr, index=i, fn=<built-in function getitem>) ['$72binary_subscr.6', 'i', 'in_arr']
    val = call $64load_global.2(val, $72binary_subscr.6, func=$64load_global.2, args=[Var(val, parfor.py:156), Var($72binary_subscr.6, parfor.py:158)], kws=(), vararg=None, target=None) ['$64load_global.2', '$72binary_subscr.6', 'val', 'val']
    jump 60                                  []
label 80:
    $82return_value.1 = cast(value=val)      ['$82return_value.1', 'val']
    return $82return_value.1                 ['$82return_value.1']

DEBUG 2022-02-14 16:46:36,915 bytecode dump:
>          0	NOP(arg=None, lineno=457)
           2	LOAD_FAST(arg=0, lineno=457)
           4	LOAD_CONST(arg=1, lineno=457)
           6	COMPARE_OP(arg=2, lineno=457)
           8	POP_JUMP_IF_FALSE(arg=18, lineno=457)
          10	LOAD_GLOBAL(arg=0, lineno=458)
          12	LOAD_CONST(arg=2, lineno=458)
          14	CALL_FUNCTION(arg=1, lineno=458)
          16	RAISE_VARARGS(arg=1, lineno=458)
>         18	LOAD_CONST(arg=0, lineno=458)
          20	RETURN_VALUE(arg=None, lineno=458)
DEBUG 2022-02-14 16:46:36,915 pending: deque([State(pc_initial=0 nstack_initial=0)])
DEBUG 2022-02-14 16:46:36,915 stack: []
DEBUG 2022-02-14 16:46:36,915 dispatch pc=0, inst=NOP(arg=None, lineno=457)
DEBUG 2022-02-14 16:46:36,915 stack []
DEBUG 2022-02-14 16:46:36,916 dispatch pc=2, inst=LOAD_FAST(arg=0, lineno=457)
DEBUG 2022-02-14 16:46:36,916 stack []
DEBUG 2022-02-14 16:46:36,916 dispatch pc=4, inst=LOAD_CONST(arg=1, lineno=457)
DEBUG 2022-02-14 16:46:36,916 stack ['$arr_size2.0']
DEBUG 2022-02-14 16:46:36,916 dispatch pc=6, inst=COMPARE_OP(arg=2, lineno=457)
DEBUG 2022-02-14 16:46:36,916 stack ['$arr_size2.0', '$const4.1']
DEBUG 2022-02-14 16:46:36,916 dispatch pc=8, inst=POP_JUMP_IF_FALSE(arg=18, lineno=457)
DEBUG 2022-02-14 16:46:36,916 stack ['$6compare_op.2']
DEBUG 2022-02-14 16:46:36,916 end state. edges=[Edge(pc=10, stack=(), blockstack=(), npush=0), Edge(pc=18, stack=(), blockstack=(), npush=0)]
DEBUG 2022-02-14 16:46:36,916 pending: deque([State(pc_initial=10 nstack_initial=0), State(pc_initial=18 nstack_initial=0)])
DEBUG 2022-02-14 16:46:36,916 stack: []
DEBUG 2022-02-14 16:46:36,916 dispatch pc=10, inst=LOAD_GLOBAL(arg=0, lineno=458)
DEBUG 2022-02-14 16:46:36,916 stack []
DEBUG 2022-02-14 16:46:36,916 dispatch pc=12, inst=LOAD_CONST(arg=2, lineno=458)
DEBUG 2022-02-14 16:46:36,916 stack ['$10load_global.0']
DEBUG 2022-02-14 16:46:36,916 dispatch pc=14, inst=CALL_FUNCTION(arg=1, lineno=458)
DEBUG 2022-02-14 16:46:36,916 stack ['$10load_global.0', '$const12.1']
DEBUG 2022-02-14 16:46:36,916 dispatch pc=16, inst=RAISE_VARARGS(arg=1, lineno=458)
DEBUG 2022-02-14 16:46:36,916 stack ['$14call_function.2']
DEBUG 2022-02-14 16:46:36,916 end state. edges=[]
DEBUG 2022-02-14 16:46:36,916 pending: deque([State(pc_initial=18 nstack_initial=0)])
DEBUG 2022-02-14 16:46:36,917 stack: []
DEBUG 2022-02-14 16:46:36,917 dispatch pc=18, inst=LOAD_CONST(arg=0, lineno=458)
DEBUG 2022-02-14 16:46:36,917 stack []
DEBUG 2022-02-14 16:46:36,917 dispatch pc=20, inst=RETURN_VALUE(arg=None, lineno=458)
DEBUG 2022-02-14 16:46:36,917 stack ['$const18.0']
DEBUG 2022-02-14 16:46:36,917 end state. edges=[]
DEBUG 2022-02-14 16:46:36,917 -------------------------Prune PHIs-------------------------
DEBUG 2022-02-14 16:46:36,917 Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=10 nstack_initial=0): set(),
             State(pc_initial=18 nstack_initial=0): set()})
DEBUG 2022-02-14 16:46:36,917 defmap: {}
DEBUG 2022-02-14 16:46:36,917 phismap: defaultdict(<class 'set'>, {})
DEBUG 2022-02-14 16:46:36,917 changing phismap: defaultdict(<class 'set'>, {})
DEBUG 2022-02-14 16:46:36,917 keep phismap: {}
DEBUG 2022-02-14 16:46:36,917 new_out: defaultdict(<class 'dict'>, {})
DEBUG 2022-02-14 16:46:36,917 ----------------------DONE Prune PHIs-----------------------
DEBUG 2022-02-14 16:46:36,917 block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$arr_size2.0'}), (4, {'res': '$const4.1'}), (6, {'lhs': '$arr_size2.0', 'rhs': '$const4.1', 'res': '$6compare_op.2'}), (8, {'pred': '$6compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={10: (), 18: ()})
DEBUG 2022-02-14 16:46:36,917 block_infos State(pc_initial=10 nstack_initial=0):
AdaptBlockInfo(insts=((10, {'res': '$10load_global.0'}), (12, {'res': '$const12.1'}), (14, {'func': '$10load_global.0', 'args': ['$const12.1'], 'res': '$14call_function.2'}), (16, {'exc': '$14call_function.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG 2022-02-14 16:46:36,917 block_infos State(pc_initial=18 nstack_initial=0):
AdaptBlockInfo(insts=((18, {'res': '$const18.0'}), (20, {'retval': '$const18.0', 'castval': '$20return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG 2022-02-14 16:46:36,918 label 0:
    arr_size = arg(0, name=arr_size)         ['arr_size']
    $const4.1 = const(int, 0)                ['$const4.1']
    $6compare_op.2 = arr_size == $const4.1   ['$6compare_op.2', '$const4.1', 'arr_size']
    bool8 = global(bool: <class 'bool'>)     ['bool8']
    $8pred = call bool8($6compare_op.2, func=bool8, args=(Var($6compare_op.2, parfor.py:457),), kws=(), vararg=None, target=None) ['$6compare_op.2', '$8pred', 'bool8']
    branch $8pred, 10, 18                    ['$8pred']
label 10:
    $10load_global.0 = global(ValueError: <class 'ValueError'>) ['$10load_global.0']
    $const12.1 = const(str, zero-size array to reduction operation maximum which has no identity) ['$const12.1']
    $14call_function.2 = call $10load_global.0($const12.1, func=$10load_global.0, args=[Var($const12.1, parfor.py:458)], kws=(), vararg=None, target=None) ['$10load_global.0', '$14call_function.2', '$const12.1']
    raise $14call_function.2                 ['$14call_function.2']
label 18:
    $const18.0 = const(NoneType, None)       ['$const18.0']
    $20return_value.1 = cast(value=$const18.0) ['$20return_value.1', '$const18.0']
    return $20return_value.1                 ['$20return_value.1']

DEBUG 2022-02-14 16:46:36,920 ==== SSA block analysis pass on 0
DEBUG 2022-02-14 16:46:36,920 Running <numba.core.ssa._GatherDefsHandler object at 0x7f7202f5ba00>
DEBUG 2022-02-14 16:46:36,921 on stmt: arr_size = arg(0, name=arr_size)
DEBUG 2022-02-14 16:46:36,921 on stmt: $const4.1 = const(int, 0)
DEBUG 2022-02-14 16:46:36,921 on stmt: $6compare_op.2 = arr_size == $const4.1
DEBUG 2022-02-14 16:46:36,921 on stmt: bool8 = global(bool: <class 'bool'>)
DEBUG 2022-02-14 16:46:36,921 on stmt: $8pred = call bool8($6compare_op.2, func=bool8, args=(Var($6compare_op.2, parfor.py:457),), kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:46:36,921 on stmt: branch $8pred, 10, 18
DEBUG 2022-02-14 16:46:36,921 ==== SSA block analysis pass on 10
DEBUG 2022-02-14 16:46:36,921 Running <numba.core.ssa._GatherDefsHandler object at 0x7f7202f5ba00>
DEBUG 2022-02-14 16:46:36,921 on stmt: $10load_global.0 = global(ValueError: <class 'ValueError'>)
DEBUG 2022-02-14 16:46:36,921 on stmt: $const12.1 = const(str, zero-size array to reduction operation maximum which has no identity)
DEBUG 2022-02-14 16:46:36,921 on stmt: $14call_function.2 = call $10load_global.0($const12.1, func=$10load_global.0, args=[Var($const12.1, parfor.py:458)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:46:36,921 on stmt: <static> raise <class 'ValueError'>('zero-size array to reduction operation maximum which has no identity')
DEBUG 2022-02-14 16:46:36,921 ==== SSA block analysis pass on 18
DEBUG 2022-02-14 16:46:36,921 Running <numba.core.ssa._GatherDefsHandler object at 0x7f7202f5ba00>
DEBUG 2022-02-14 16:46:36,921 on stmt: $const18.0 = const(NoneType, None)
DEBUG 2022-02-14 16:46:36,921 on stmt: $20return_value.1 = cast(value=$const18.0)
DEBUG 2022-02-14 16:46:36,921 on stmt: return $20return_value.1
DEBUG 2022-02-14 16:46:36,921 defs defaultdict(<class 'list'>,
            {'$10load_global.0': [<numba.core.ir.Assign object at 0x7f7202f69700>],
             '$14call_function.2': [<numba.core.ir.Assign object at 0x7f7202f69a60>],
             '$20return_value.1': [<numba.core.ir.Assign object at 0x7f7202f69e80>],
             '$6compare_op.2': [<numba.core.ir.Assign object at 0x7f7202f69250>],
             '$8pred': [<numba.core.ir.Assign object at 0x7f7202f694c0>],
             '$const12.1': [<numba.core.ir.Assign object at 0x7f7202f69880>],
             '$const18.0': [<numba.core.ir.Assign object at 0x7f7202f69d00>],
             '$const4.1': [<numba.core.ir.Assign object at 0x7f7202f690a0>],
             'arr_size': [<numba.core.ir.Assign object at 0x7f7202f5b370>],
             'bool8': [<numba.core.ir.Assign object at 0x7f7202f693a0>]})
DEBUG 2022-02-14 16:46:36,922 SSA violators set()
DEBUG 2022-02-14 16:46:36,947 bytecode dump:
>          0	NOP(arg=None, lineno=610)
           2	LOAD_GLOBAL(arg=0, lineno=610)
           4	LOAD_FAST(arg=0, lineno=610)
           6	CALL_FUNCTION(arg=1, lineno=610)
           8	RETURN_VALUE(arg=None, lineno=610)
DEBUG 2022-02-14 16:46:36,948 pending: deque([State(pc_initial=0 nstack_initial=0)])
DEBUG 2022-02-14 16:46:36,948 stack: []
DEBUG 2022-02-14 16:46:36,948 dispatch pc=0, inst=NOP(arg=None, lineno=610)
DEBUG 2022-02-14 16:46:36,948 stack []
DEBUG 2022-02-14 16:46:36,948 dispatch pc=2, inst=LOAD_GLOBAL(arg=0, lineno=610)
DEBUG 2022-02-14 16:46:36,948 stack []
DEBUG 2022-02-14 16:46:36,948 dispatch pc=4, inst=LOAD_FAST(arg=0, lineno=610)
DEBUG 2022-02-14 16:46:36,948 stack ['$2load_global.0']
DEBUG 2022-02-14 16:46:36,948 dispatch pc=6, inst=CALL_FUNCTION(arg=1, lineno=610)
DEBUG 2022-02-14 16:46:36,948 stack ['$2load_global.0', '$desc4.1']
DEBUG 2022-02-14 16:46:36,948 dispatch pc=8, inst=RETURN_VALUE(arg=None, lineno=610)
DEBUG 2022-02-14 16:46:36,948 stack ['$6call_function.2']
DEBUG 2022-02-14 16:46:36,948 end state. edges=[]
DEBUG 2022-02-14 16:46:36,948 -------------------------Prune PHIs-------------------------
DEBUG 2022-02-14 16:46:36,948 Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
DEBUG 2022-02-14 16:46:36,948 defmap: {}
DEBUG 2022-02-14 16:46:36,948 phismap: defaultdict(<class 'set'>, {})
DEBUG 2022-02-14 16:46:36,948 changing phismap: defaultdict(<class 'set'>, {})
DEBUG 2022-02-14 16:46:36,948 keep phismap: {}
DEBUG 2022-02-14 16:46:36,949 new_out: defaultdict(<class 'dict'>, {})
DEBUG 2022-02-14 16:46:36,949 ----------------------DONE Prune PHIs-----------------------
DEBUG 2022-02-14 16:46:36,949 block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$2load_global.0'}), (4, {'res': '$desc4.1'}), (6, {'func': '$2load_global.0', 'args': ['$desc4.1'], 'res': '$6call_function.2'}), (8, {'retval': '$6call_function.2', 'castval': '$8return_value.3'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG 2022-02-14 16:46:36,949 label 0:
    desc = arg(0, name=desc)                 ['desc']
    $2load_global.0 = global(_make_dtype_object: <intrinsic _make_dtype_object>) ['$2load_global.0']
    $6call_function.2 = call $2load_global.0(desc, func=$2load_global.0, args=[Var(desc, npyimpl.py:610)], kws=(), vararg=None, target=None) ['$2load_global.0', '$6call_function.2', 'desc']
    $8return_value.3 = cast(value=$6call_function.2) ['$6call_function.2', '$8return_value.3']
    return $8return_value.3                  ['$8return_value.3']

DEBUG 2022-02-14 16:46:36,950 ==== SSA block analysis pass on 0
DEBUG 2022-02-14 16:46:36,950 Running <numba.core.ssa._GatherDefsHandler object at 0x7f7202f008b0>
DEBUG 2022-02-14 16:46:36,950 on stmt: desc = arg(0, name=desc)
DEBUG 2022-02-14 16:46:36,950 on stmt: $2load_global.0 = global(_make_dtype_object: <intrinsic _make_dtype_object>)
DEBUG 2022-02-14 16:46:36,950 on stmt: $6call_function.2 = call $2load_global.0(desc, func=$2load_global.0, args=[Var(desc, npyimpl.py:610)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:46:36,950 on stmt: $8return_value.3 = cast(value=$6call_function.2)
DEBUG 2022-02-14 16:46:36,950 on stmt: return $8return_value.3
DEBUG 2022-02-14 16:46:36,950 defs defaultdict(<class 'list'>,
            {'$2load_global.0': [<numba.core.ir.Assign object at 0x7f7202f0a190>],
             '$6call_function.2': [<numba.core.ir.Assign object at 0x7f7202f0ad30>],
             '$8return_value.3': [<numba.core.ir.Assign object at 0x7f7202f0ae50>],
             'desc': [<numba.core.ir.Assign object at 0x7f7202f0a1f0>]})
DEBUG 2022-02-14 16:46:36,951 SSA violators set()
DEBUG 2022-02-14 16:46:36,976 bytecode dump:
>          0	NOP(arg=None, lineno=3)
           2	LOAD_GLOBAL(arg=0, lineno=3)
           4	LOAD_FAST(arg=0, lineno=3)
           6	LOAD_FAST(arg=1, lineno=3)
           8	CALL_FUNCTION(arg=2, lineno=3)
          10	RETURN_VALUE(arg=None, lineno=3)
DEBUG 2022-02-14 16:46:36,976 pending: deque([State(pc_initial=0 nstack_initial=0)])
DEBUG 2022-02-14 16:46:36,976 stack: []
DEBUG 2022-02-14 16:46:36,976 dispatch pc=0, inst=NOP(arg=None, lineno=3)
DEBUG 2022-02-14 16:46:36,976 stack []
DEBUG 2022-02-14 16:46:36,976 dispatch pc=2, inst=LOAD_GLOBAL(arg=0, lineno=3)
DEBUG 2022-02-14 16:46:36,976 stack []
DEBUG 2022-02-14 16:46:36,976 dispatch pc=4, inst=LOAD_FAST(arg=0, lineno=3)
DEBUG 2022-02-14 16:46:36,976 stack ['$2load_global.0']
DEBUG 2022-02-14 16:46:36,976 dispatch pc=6, inst=LOAD_FAST(arg=1, lineno=3)
DEBUG 2022-02-14 16:46:36,976 stack ['$2load_global.0', '$tmp04.1']
DEBUG 2022-02-14 16:46:36,976 dispatch pc=8, inst=CALL_FUNCTION(arg=2, lineno=3)
DEBUG 2022-02-14 16:46:36,976 stack ['$2load_global.0', '$tmp04.1', '$dtype6.2']
DEBUG 2022-02-14 16:46:36,976 dispatch pc=10, inst=RETURN_VALUE(arg=None, lineno=3)
DEBUG 2022-02-14 16:46:36,976 stack ['$8call_function.3']
DEBUG 2022-02-14 16:46:36,976 end state. edges=[]
DEBUG 2022-02-14 16:46:36,977 -------------------------Prune PHIs-------------------------
DEBUG 2022-02-14 16:46:36,977 Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
DEBUG 2022-02-14 16:46:36,977 defmap: {}
DEBUG 2022-02-14 16:46:36,977 phismap: defaultdict(<class 'set'>, {})
DEBUG 2022-02-14 16:46:36,977 changing phismap: defaultdict(<class 'set'>, {})
DEBUG 2022-02-14 16:46:36,977 keep phismap: {}
DEBUG 2022-02-14 16:46:36,977 new_out: defaultdict(<class 'dict'>, {})
DEBUG 2022-02-14 16:46:36,977 ----------------------DONE Prune PHIs-----------------------
DEBUG 2022-02-14 16:46:36,977 block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$2load_global.0'}), (4, {'res': '$tmp04.1'}), (6, {'res': '$dtype6.2'}), (8, {'func': '$2load_global.0', 'args': ['$tmp04.1', '$dtype6.2'], 'res': '$8call_function.3'}), (10, {'retval': '$8call_function.3', 'castval': '$10return_value.4'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG 2022-02-14 16:46:36,977 label 0:
    tmp0 = arg(0, name=tmp0)                 ['tmp0']
    dtype = arg(1, name=dtype)               ['dtype']
    $2load_global.0 = global(intrin: <intrinsic stub>) ['$2load_global.0']
    $8call_function.3 = call $2load_global.0(tmp0, dtype, func=$2load_global.0, args=[Var(tmp0, <string>:3), Var(dtype, <string>:3)], kws=(), vararg=None, target=None) ['$2load_global.0', '$8call_function.3', 'dtype', 'tmp0']
    $10return_value.4 = cast(value=$8call_function.3) ['$10return_value.4', '$8call_function.3']
    return $10return_value.4                 ['$10return_value.4']

DEBUG 2022-02-14 16:46:36,978 ==== SSA block analysis pass on 0
DEBUG 2022-02-14 16:46:36,978 Running <numba.core.ssa._GatherDefsHandler object at 0x7f7202eeed30>
DEBUG 2022-02-14 16:46:36,978 on stmt: tmp0 = arg(0, name=tmp0)
DEBUG 2022-02-14 16:46:36,979 on stmt: dtype = arg(1, name=dtype)
DEBUG 2022-02-14 16:46:36,979 on stmt: $2load_global.0 = global(intrin: <intrinsic stub>)
DEBUG 2022-02-14 16:46:36,979 on stmt: $8call_function.3 = call $2load_global.0(tmp0, dtype, func=$2load_global.0, args=[Var(tmp0, <string>:3), Var(dtype, <string>:3)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:46:36,979 on stmt: $10return_value.4 = cast(value=$8call_function.3)
DEBUG 2022-02-14 16:46:36,979 on stmt: return $10return_value.4
DEBUG 2022-02-14 16:46:36,979 defs defaultdict(<class 'list'>,
            {'$10return_value.4': [<numba.core.ir.Assign object at 0x7f7202efa8e0>],
             '$2load_global.0': [<numba.core.ir.Assign object at 0x7f7202efa3a0>],
             '$8call_function.3': [<numba.core.ir.Assign object at 0x7f7202efa7c0>],
             'dtype': [<numba.core.ir.Assign object at 0x7f7202eee790>],
             'tmp0': [<numba.core.ir.Assign object at 0x7f7202eee5b0>]})
DEBUG 2022-02-14 16:46:36,979 SSA violators set()
DEBUG 2022-02-14 16:46:37,096 bytecode dump:
>          0	NOP(arg=None, lineno=3)
           2	LOAD_GLOBAL(arg=0, lineno=3)
           4	LOAD_FAST(arg=0, lineno=3)
           6	LOAD_FAST(arg=1, lineno=3)
           8	CALL_FUNCTION(arg=2, lineno=3)
          10	RETURN_VALUE(arg=None, lineno=3)
DEBUG 2022-02-14 16:46:37,096 pending: deque([State(pc_initial=0 nstack_initial=0)])
DEBUG 2022-02-14 16:46:37,096 stack: []
DEBUG 2022-02-14 16:46:37,096 dispatch pc=0, inst=NOP(arg=None, lineno=3)
DEBUG 2022-02-14 16:46:37,096 stack []
DEBUG 2022-02-14 16:46:37,096 dispatch pc=2, inst=LOAD_GLOBAL(arg=0, lineno=3)
DEBUG 2022-02-14 16:46:37,096 stack []
DEBUG 2022-02-14 16:46:37,097 dispatch pc=4, inst=LOAD_FAST(arg=0, lineno=3)
DEBUG 2022-02-14 16:46:37,097 stack ['$2load_global.0']
DEBUG 2022-02-14 16:46:37,097 dispatch pc=6, inst=LOAD_FAST(arg=1, lineno=3)
DEBUG 2022-02-14 16:46:37,097 stack ['$2load_global.0', '$tmp04.1']
DEBUG 2022-02-14 16:46:37,097 dispatch pc=8, inst=CALL_FUNCTION(arg=2, lineno=3)
DEBUG 2022-02-14 16:46:37,097 stack ['$2load_global.0', '$tmp04.1', '$tmp16.2']
DEBUG 2022-02-14 16:46:37,097 dispatch pc=10, inst=RETURN_VALUE(arg=None, lineno=3)
DEBUG 2022-02-14 16:46:37,097 stack ['$8call_function.3']
DEBUG 2022-02-14 16:46:37,097 end state. edges=[]
DEBUG 2022-02-14 16:46:37,097 -------------------------Prune PHIs-------------------------
DEBUG 2022-02-14 16:46:37,097 Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
DEBUG 2022-02-14 16:46:37,097 defmap: {}
DEBUG 2022-02-14 16:46:37,097 phismap: defaultdict(<class 'set'>, {})
DEBUG 2022-02-14 16:46:37,097 changing phismap: defaultdict(<class 'set'>, {})
DEBUG 2022-02-14 16:46:37,097 keep phismap: {}
DEBUG 2022-02-14 16:46:37,097 new_out: defaultdict(<class 'dict'>, {})
DEBUG 2022-02-14 16:46:37,097 ----------------------DONE Prune PHIs-----------------------
DEBUG 2022-02-14 16:46:37,097 block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$2load_global.0'}), (4, {'res': '$tmp04.1'}), (6, {'res': '$tmp16.2'}), (8, {'func': '$2load_global.0', 'args': ['$tmp04.1', '$tmp16.2'], 'res': '$8call_function.3'}), (10, {'retval': '$8call_function.3', 'castval': '$10return_value.4'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG 2022-02-14 16:46:37,098 label 0:
    tmp0 = arg(0, name=tmp0)                 ['tmp0']
    tmp1 = arg(1, name=tmp1)                 ['tmp1']
    $2load_global.0 = global(intrin: <intrinsic stub>) ['$2load_global.0']
    $8call_function.3 = call $2load_global.0(tmp0, tmp1, func=$2load_global.0, args=[Var(tmp0, <string>:3), Var(tmp1, <string>:3)], kws=(), vararg=None, target=None) ['$2load_global.0', '$8call_function.3', 'tmp0', 'tmp1']
    $10return_value.4 = cast(value=$8call_function.3) ['$10return_value.4', '$8call_function.3']
    return $10return_value.4                 ['$10return_value.4']

DEBUG 2022-02-14 16:46:37,099 ==== SSA block analysis pass on 0
DEBUG 2022-02-14 16:46:37,099 Running <numba.core.ssa._GatherDefsHandler object at 0x7f7202dfeaf0>
DEBUG 2022-02-14 16:46:37,099 on stmt: tmp0 = arg(0, name=tmp0)
DEBUG 2022-02-14 16:46:37,099 on stmt: tmp1 = arg(1, name=tmp1)
DEBUG 2022-02-14 16:46:37,099 on stmt: $2load_global.0 = global(intrin: <intrinsic stub>)
DEBUG 2022-02-14 16:46:37,099 on stmt: $8call_function.3 = call $2load_global.0(tmp0, tmp1, func=$2load_global.0, args=[Var(tmp0, <string>:3), Var(tmp1, <string>:3)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:46:37,099 on stmt: $10return_value.4 = cast(value=$8call_function.3)
DEBUG 2022-02-14 16:46:37,099 on stmt: return $10return_value.4
DEBUG 2022-02-14 16:46:37,099 defs defaultdict(<class 'list'>,
            {'$10return_value.4': [<numba.core.ir.Assign object at 0x7f7202dda190>],
             '$2load_global.0': [<numba.core.ir.Assign object at 0x7f7202dfe760>],
             '$8call_function.3': [<numba.core.ir.Assign object at 0x7f7202dda070>],
             'tmp0': [<numba.core.ir.Assign object at 0x7f7202dfe2e0>],
             'tmp1': [<numba.core.ir.Assign object at 0x7f7202dfe4c0>]})
DEBUG 2022-02-14 16:46:37,099 SSA violators set()
DEBUG 2022-02-14 16:46:37,127 bytecode dump:
>          0	NOP(arg=None, lineno=3)
           2	LOAD_GLOBAL(arg=0, lineno=3)
           4	LOAD_FAST(arg=0, lineno=3)
           6	LOAD_FAST(arg=1, lineno=3)
           8	CALL_FUNCTION(arg=2, lineno=3)
          10	RETURN_VALUE(arg=None, lineno=3)
DEBUG 2022-02-14 16:46:37,127 pending: deque([State(pc_initial=0 nstack_initial=0)])
DEBUG 2022-02-14 16:46:37,127 stack: []
DEBUG 2022-02-14 16:46:37,127 dispatch pc=0, inst=NOP(arg=None, lineno=3)
DEBUG 2022-02-14 16:46:37,127 stack []
DEBUG 2022-02-14 16:46:37,127 dispatch pc=2, inst=LOAD_GLOBAL(arg=0, lineno=3)
DEBUG 2022-02-14 16:46:37,127 stack []
DEBUG 2022-02-14 16:46:37,127 dispatch pc=4, inst=LOAD_FAST(arg=0, lineno=3)
DEBUG 2022-02-14 16:46:37,127 stack ['$2load_global.0']
DEBUG 2022-02-14 16:46:37,127 dispatch pc=6, inst=LOAD_FAST(arg=1, lineno=3)
DEBUG 2022-02-14 16:46:37,127 stack ['$2load_global.0', '$tmp04.1']
DEBUG 2022-02-14 16:46:37,128 dispatch pc=8, inst=CALL_FUNCTION(arg=2, lineno=3)
DEBUG 2022-02-14 16:46:37,128 stack ['$2load_global.0', '$tmp04.1', '$tmp16.2']
DEBUG 2022-02-14 16:46:37,128 dispatch pc=10, inst=RETURN_VALUE(arg=None, lineno=3)
DEBUG 2022-02-14 16:46:37,128 stack ['$8call_function.3']
DEBUG 2022-02-14 16:46:37,128 end state. edges=[]
DEBUG 2022-02-14 16:46:37,128 -------------------------Prune PHIs-------------------------
DEBUG 2022-02-14 16:46:37,128 Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
DEBUG 2022-02-14 16:46:37,128 defmap: {}
DEBUG 2022-02-14 16:46:37,128 phismap: defaultdict(<class 'set'>, {})
DEBUG 2022-02-14 16:46:37,128 changing phismap: defaultdict(<class 'set'>, {})
DEBUG 2022-02-14 16:46:37,128 keep phismap: {}
DEBUG 2022-02-14 16:46:37,128 new_out: defaultdict(<class 'dict'>, {})
DEBUG 2022-02-14 16:46:37,128 ----------------------DONE Prune PHIs-----------------------
DEBUG 2022-02-14 16:46:37,128 block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$2load_global.0'}), (4, {'res': '$tmp04.1'}), (6, {'res': '$tmp16.2'}), (8, {'func': '$2load_global.0', 'args': ['$tmp04.1', '$tmp16.2'], 'res': '$8call_function.3'}), (10, {'retval': '$8call_function.3', 'castval': '$10return_value.4'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG 2022-02-14 16:46:37,128 label 0:
    tmp0 = arg(0, name=tmp0)                 ['tmp0']
    tmp1 = arg(1, name=tmp1)                 ['tmp1']
    $2load_global.0 = global(intrin: <intrinsic stub>) ['$2load_global.0']
    $8call_function.3 = call $2load_global.0(tmp0, tmp1, func=$2load_global.0, args=[Var(tmp0, <string>:3), Var(tmp1, <string>:3)], kws=(), vararg=None, target=None) ['$2load_global.0', '$8call_function.3', 'tmp0', 'tmp1']
    $10return_value.4 = cast(value=$8call_function.3) ['$10return_value.4', '$8call_function.3']
    return $10return_value.4                 ['$10return_value.4']

DEBUG 2022-02-14 16:46:37,130 ==== SSA block analysis pass on 0
DEBUG 2022-02-14 16:46:37,130 Running <numba.core.ssa._GatherDefsHandler object at 0x7f7202d7a700>
DEBUG 2022-02-14 16:46:37,130 on stmt: tmp0 = arg(0, name=tmp0)
DEBUG 2022-02-14 16:46:37,130 on stmt: tmp1 = arg(1, name=tmp1)
DEBUG 2022-02-14 16:46:37,130 on stmt: $2load_global.0 = global(intrin: <intrinsic stub>)
DEBUG 2022-02-14 16:46:37,130 on stmt: $8call_function.3 = call $2load_global.0(tmp0, tmp1, func=$2load_global.0, args=[Var(tmp0, <string>:3), Var(tmp1, <string>:3)], kws=(), vararg=None, target=None)
DEBUG 2022-02-14 16:46:37,130 on stmt: $10return_value.4 = cast(value=$8call_function.3)
DEBUG 2022-02-14 16:46:37,130 on stmt: return $10return_value.4
DEBUG 2022-02-14 16:46:37,130 defs defaultdict(<class 'list'>,
            {'$10return_value.4': [<numba.core.ir.Assign object at 0x7f7202d7ad60>],
             '$2load_global.0': [<numba.core.ir.Assign object at 0x7f7202d7a820>],
             '$8call_function.3': [<numba.core.ir.Assign object at 0x7f7202d7ac40>],
             'tmp0': [<numba.core.ir.Assign object at 0x7f7202d7a190>],
             'tmp1': [<numba.core.ir.Assign object at 0x7f7202d7a070>]})
DEBUG 2022-02-14 16:46:37,130 SSA violators set()
