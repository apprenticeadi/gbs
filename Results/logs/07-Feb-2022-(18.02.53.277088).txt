INFO 2022-02-07 18:02:55,930 NumExpr defaulting to 8 threads.
DEBUG 2022-02-07 18:03:04,942 bytecode dump:
>          0	NOP(arg=None, lineno=20)
           2	LOAD_FAST(arg=1, lineno=20)
           4	LOAD_CONST(arg=1, lineno=20)
           6	BINARY_SUBSCR(arg=None, lineno=20)
           8	STORE_FAST(arg=6, lineno=20)
          10	LOAD_FAST(arg=0, lineno=21)
          12	LOAD_CONST(arg=1, lineno=21)
          14	LOAD_CONST(arg=0, lineno=21)
          16	LOAD_CONST(arg=0, lineno=21)
          18	BUILD_SLICE(arg=2, lineno=21)
          20	BUILD_TUPLE(arg=2, lineno=21)
          22	BINARY_SUBSCR(arg=None, lineno=21)
          24	STORE_FAST(arg=7, lineno=21)
          26	LOAD_FAST(arg=0, lineno=23)
          28	LOAD_ATTR(arg=0, lineno=23)
          30	LOAD_CONST(arg=1, lineno=23)
          32	BINARY_SUBSCR(arg=None, lineno=23)
          34	STORE_FAST(arg=8, lineno=23)
          36	LOAD_CONST(arg=2, lineno=24)
          38	LOAD_FAST(arg=2, lineno=24)
          40	LOAD_METHOD(arg=1, lineno=24)
          42	CALL_METHOD(arg=0, lineno=24)
          44	BINARY_MULTIPLY(arg=None, lineno=24)
          46	STORE_FAST(arg=9, lineno=24)
          48	LOAD_FAST(arg=9, lineno=26)
          50	LOAD_CONST(arg=2, lineno=26)
          52	LOAD_FAST(arg=3, lineno=26)
          54	BINARY_MULTIPLY(arg=None, lineno=26)
          56	BINARY_ADD(arg=None, lineno=26)
          58	LOAD_FAST(arg=4, lineno=26)
          60	BINARY_ADD(arg=None, lineno=26)
          62	STORE_FAST(arg=10, lineno=26)
          64	LOAD_GLOBAL(arg=2, lineno=28)
          66	LOAD_METHOD(arg=3, lineno=28)
          68	LOAD_GLOBAL(arg=2, lineno=28)
          70	LOAD_METHOD(arg=4, lineno=28)
          72	LOAD_FAST(arg=3, lineno=28)
          74	BUILD_LIST(arg=1, lineno=28)
          76	CALL_METHOD(arg=1, lineno=28)
          78	LOAD_FAST(arg=2, lineno=28)
          80	BUILD_TUPLE(arg=2, lineno=28)
          82	CALL_METHOD(arg=1, lineno=28)
          84	STORE_FAST(arg=11, lineno=28)
          86	LOAD_GLOBAL(arg=2, lineno=29)
          88	LOAD_METHOD(arg=5, lineno=29)
          90	LOAD_FAST(arg=11, lineno=29)
          92	LOAD_CONST(arg=3, lineno=29)
          94	BINARY_ADD(arg=None, lineno=29)
          96	CALL_METHOD(arg=1, lineno=29)
          98	STORE_FAST(arg=12, lineno=29)
         100	LOAD_FAST(arg=11, lineno=31)
         102	LOAD_METHOD(arg=6, lineno=31)
         104	CALL_METHOD(arg=0, lineno=31)
         106	LOAD_FAST(arg=4, lineno=31)
         108	BINARY_ADD(arg=None, lineno=31)
         110	STORE_FAST(arg=13, lineno=31)
         112	LOAD_GLOBAL(arg=7, lineno=32)
         114	LOAD_FAST(arg=13, lineno=32)
         116	CALL_FUNCTION(arg=1, lineno=32)
         118	STORE_FAST(arg=14, lineno=32)
         120	LOAD_GLOBAL(arg=2, lineno=34)
         122	LOAD_ATTR(arg=8, lineno=34)
         124	LOAD_CONST(arg=2, lineno=34)
         126	LOAD_FAST(arg=3, lineno=34)
         128	BINARY_MULTIPLY(arg=None, lineno=34)
         130	LOAD_FAST(arg=4, lineno=34)
         132	BINARY_ADD(arg=None, lineno=34)
         134	LOAD_CONST(arg=3, lineno=34)
         136	BINARY_ADD(arg=None, lineno=34)
         138	LOAD_GLOBAL(arg=2, lineno=34)
         140	LOAD_ATTR(arg=9, lineno=34)
         142	LOAD_CONST(arg=4, lineno=34)
         144	CALL_FUNCTION_KW(arg=2, lineno=34)
         146	STORE_FAST(arg=15, lineno=34)
         148	LOAD_GLOBAL(arg=10, lineno=35)
         150	LOAD_METHOD(arg=11, lineno=35)
         152	LOAD_FAST(arg=12, lineno=35)
         154	CALL_METHOD(arg=1, lineno=35)
         156	GET_ITER(arg=None, lineno=35)
>        158	FOR_ITER(arg=358, lineno=35)
         162	STORE_FAST(arg=16, lineno=35)
         164	LOAD_GLOBAL(arg=2, lineno=37)
         166	LOAD_ATTR(arg=8, lineno=37)
         168	LOAD_CONST(arg=2, lineno=37)
         170	LOAD_FAST(arg=3, lineno=37)
         172	BINARY_MULTIPLY(arg=None, lineno=37)
         174	LOAD_FAST(arg=4, lineno=37)
         176	BINARY_ADD(arg=None, lineno=37)
         178	LOAD_CONST(arg=3, lineno=37)
         180	BINARY_ADD(arg=None, lineno=37)
         182	LOAD_GLOBAL(arg=2, lineno=37)
         184	LOAD_ATTR(arg=9, lineno=37)
         186	LOAD_CONST(arg=4, lineno=37)
         188	CALL_FUNCTION_KW(arg=2, lineno=37)
         190	STORE_FAST(arg=17, lineno=37)
         192	LOAD_GLOBAL(arg=12, lineno=39)
         194	LOAD_FAST(arg=16, lineno=39)
         196	LOAD_FAST(arg=11, lineno=39)
         198	CALL_FUNCTION(arg=2, lineno=39)
         200	STORE_FAST(arg=18, lineno=39)
         202	LOAD_FAST(arg=18, lineno=40)
         204	LOAD_METHOD(arg=1, lineno=40)
         206	CALL_METHOD(arg=0, lineno=40)
         208	STORE_FAST(arg=19, lineno=40)
         210	LOAD_CONST(arg=5, lineno=42)
         212	STORE_FAST(arg=20, lineno=42)
         214	LOAD_GLOBAL(arg=13, lineno=43)
         216	LOAD_CONST(arg=3, lineno=43)
         218	LOAD_FAST(arg=8, lineno=43)
         220	LOAD_CONST(arg=2, lineno=43)
         222	BINARY_FLOOR_DIVIDE(arg=None, lineno=43)
         224	CALL_FUNCTION(arg=2, lineno=43)
         226	GET_ITER(arg=None, lineno=43)
>        228	FOR_ITER(arg=28, lineno=43)
         230	STORE_FAST(arg=21, lineno=43)
         232	LOAD_FAST(arg=20, lineno=44)
         234	LOAD_FAST(arg=14, lineno=44)
         236	LOAD_FAST(arg=11, lineno=44)
         238	LOAD_FAST(arg=21, lineno=44)
         240	BINARY_SUBSCR(arg=None, lineno=44)
         242	LOAD_FAST(arg=18, lineno=44)
         244	LOAD_FAST(arg=21, lineno=44)
         246	BINARY_SUBSCR(arg=None, lineno=44)
         248	BUILD_TUPLE(arg=2, lineno=44)
         250	BINARY_SUBSCR(arg=None, lineno=44)
         252	INPLACE_MULTIPLY(arg=None, lineno=44)
         254	STORE_FAST(arg=20, lineno=44)
         256	JUMP_ABSOLUTE(arg=228, lineno=44)
>        258	LOAD_FAST(arg=5, lineno=46)
         260	POP_JUMP_IF_FALSE(arg=278, lineno=46)
         264	LOAD_CONST(arg=2, lineno=47)
         266	LOAD_FAST(arg=18, lineno=47)
         268	BINARY_MULTIPLY(arg=None, lineno=47)
         270	LOAD_FAST(arg=11, lineno=47)
         272	BINARY_SUBTRACT(arg=None, lineno=47)
         274	STORE_FAST(arg=22, lineno=47)
         276	JUMP_FORWARD(arg=4, lineno=47)
>        278	LOAD_FAST(arg=18, lineno=49)
         280	STORE_FAST(arg=22, lineno=49)
>        282	LOAD_GLOBAL(arg=14, lineno=51)
         284	LOAD_FAST(arg=22, lineno=51)
         286	LOAD_FAST(arg=0, lineno=51)
         288	LOAD_FAST(arg=1, lineno=51)
         290	LOAD_FAST(arg=7, lineno=51)
         292	CALL_FUNCTION(arg=4, lineno=51)
         294	UNPACK_SEQUENCE(arg=4, lineno=51)
         296	STORE_FAST(arg=23, lineno=51)
         298	STORE_FAST(arg=24, lineno=51)
         300	STORE_FAST(arg=25, lineno=51)
         302	STORE_FAST(arg=26, lineno=51)
         304	LOAD_GLOBAL(arg=15, lineno=53)
         306	LOAD_FAST(arg=23, lineno=53)
         308	CALL_FUNCTION(arg=1, lineno=53)
         310	STORE_FAST(arg=27, lineno=53)
         312	LOAD_GLOBAL(arg=16, lineno=55)
         314	LOAD_FAST(arg=27, lineno=55)
         316	LOAD_FAST(arg=23, lineno=55)
         318	LOAD_FAST(arg=24, lineno=55)
         320	LOAD_FAST(arg=25, lineno=55)
         322	LOAD_FAST(arg=10, lineno=55)
         324	CALL_FUNCTION(arg=5, lineno=55)
         326	STORE_FAST(arg=28, lineno=55)
         328	LOAD_GLOBAL(arg=17, lineno=56)
         330	LOAD_FAST(arg=27, lineno=56)
         332	LOAD_FAST(arg=23, lineno=56)
         334	LOAD_FAST(arg=24, lineno=56)
         336	LOAD_FAST(arg=25, lineno=56)
         338	LOAD_FAST(arg=10, lineno=56)
         340	LOAD_FAST(arg=6, lineno=56)
         342	LOAD_FAST(arg=26, lineno=56)
         344	CALL_FUNCTION(arg=7, lineno=56)
         346	STORE_FAST(arg=29, lineno=56)
         348	LOAD_GLOBAL(arg=13, lineno=58)
         350	LOAD_CONST(arg=2, lineno=58)
         352	LOAD_FAST(arg=18, lineno=58)
         354	LOAD_CONST(arg=1, lineno=58)
         356	BINARY_SUBSCR(arg=None, lineno=58)
         358	BINARY_MULTIPLY(arg=None, lineno=58)
         360	LOAD_CONST(arg=2, lineno=58)
         362	LOAD_FAST(arg=3, lineno=58)
         364	BINARY_MULTIPLY(arg=None, lineno=58)
         366	LOAD_FAST(arg=4, lineno=58)
         368	BINARY_ADD(arg=None, lineno=58)
         370	LOAD_CONST(arg=3, lineno=58)
         372	BINARY_ADD(arg=None, lineno=58)
         374	CALL_FUNCTION(arg=2, lineno=58)
         376	GET_ITER(arg=None, lineno=58)
>        378	FOR_ITER(arg=130, lineno=58)
         380	STORE_FAST(arg=30, lineno=58)
         382	LOAD_FAST(arg=9, lineno=59)
         384	LOAD_FAST(arg=30, lineno=59)
         386	BINARY_ADD(arg=None, lineno=59)
         388	STORE_FAST(arg=31, lineno=59)
         390	LOAD_CONST(arg=6, lineno=60)
         392	LOAD_FAST(arg=31, lineno=60)
         394	LOAD_CONST(arg=2, lineno=60)
         396	BINARY_FLOOR_DIVIDE(arg=None, lineno=60)
         398	LOAD_FAST(arg=19, lineno=60)
         400	BINARY_SUBTRACT(arg=None, lineno=60)
         402	BINARY_POWER(arg=None, lineno=60)
         404	STORE_FAST(arg=32, lineno=60)
         406	LOAD_FAST(arg=14, lineno=62)
         408	LOAD_FAST(arg=30, lineno=62)
         410	LOAD_CONST(arg=2, lineno=62)
         412	BINARY_FLOOR_DIVIDE(arg=None, lineno=62)
         414	LOAD_FAST(arg=18, lineno=62)
         416	LOAD_CONST(arg=1, lineno=62)
         418	BINARY_SUBSCR(arg=None, lineno=62)
         420	BUILD_TUPLE(arg=2, lineno=62)
         422	BINARY_SUBSCR(arg=None, lineno=62)
         424	LOAD_FAST(arg=20, lineno=62)
         426	BINARY_MULTIPLY(arg=None, lineno=62)
         428	STORE_FAST(arg=33, lineno=62)
         430	LOAD_FAST(arg=30, lineno=64)
         432	LOAD_CONST(arg=2, lineno=64)
         434	BINARY_MODULO(arg=None, lineno=64)
         436	LOAD_CONST(arg=1, lineno=64)
         438	COMPARE_OP(arg=2, lineno=64)
         440	POP_JUMP_IF_FALSE(arg=478, lineno=64)
         444	LOAD_FAST(arg=17, lineno=65)
         446	LOAD_FAST(arg=30, lineno=65)
         448	DUP_TOP_TWO(arg=None, lineno=65)
         450	BINARY_SUBSCR(arg=None, lineno=65)
         452	LOAD_FAST(arg=33, lineno=65)
         454	LOAD_FAST(arg=32, lineno=65)
         456	BINARY_MULTIPLY(arg=None, lineno=65)
         458	LOAD_FAST(arg=28, lineno=65)
         460	LOAD_FAST(arg=31, lineno=65)
         462	LOAD_CONST(arg=2, lineno=65)
         464	BINARY_FLOOR_DIVIDE(arg=None, lineno=65)
         466	BINARY_SUBSCR(arg=None, lineno=65)
         468	BINARY_MULTIPLY(arg=None, lineno=65)
         470	INPLACE_ADD(arg=None, lineno=65)
         472	ROT_THREE(arg=None, lineno=65)
         474	STORE_SUBSCR(arg=None, lineno=65)
         476	JUMP_FORWARD(arg=28, lineno=65)
>        478	LOAD_FAST(arg=17, lineno=67)
         480	LOAD_FAST(arg=30, lineno=67)
         482	DUP_TOP_TWO(arg=None, lineno=67)
         484	BINARY_SUBSCR(arg=None, lineno=67)
         486	LOAD_FAST(arg=33, lineno=67)
         488	LOAD_FAST(arg=32, lineno=67)
         490	BINARY_MULTIPLY(arg=None, lineno=67)
         492	LOAD_FAST(arg=29, lineno=67)
         494	LOAD_FAST(arg=31, lineno=67)
         496	BINARY_SUBSCR(arg=None, lineno=67)
         498	BINARY_MULTIPLY(arg=None, lineno=67)
         500	INPLACE_ADD(arg=None, lineno=67)
         502	ROT_THREE(arg=None, lineno=67)
         504	STORE_SUBSCR(arg=None, lineno=67)
>        506	JUMP_ABSOLUTE(arg=378, lineno=67)
>        510	LOAD_FAST(arg=15, lineno=69)
         512	LOAD_FAST(arg=17, lineno=69)
         514	INPLACE_ADD(arg=None, lineno=69)
         516	STORE_FAST(arg=15, lineno=69)
         518	JUMP_ABSOLUTE(arg=158, lineno=69)
>        520	LOAD_FAST(arg=5, lineno=71)
         522	POP_JUMP_IF_FALSE(arg=580, lineno=71)
         526	LOAD_GLOBAL(arg=13, lineno=72)
         528	LOAD_FAST(arg=15, lineno=72)
         530	LOAD_ATTR(arg=0, lineno=72)
         532	LOAD_CONST(arg=1, lineno=72)
         534	BINARY_SUBSCR(arg=None, lineno=72)
         536	CALL_FUNCTION(arg=1, lineno=72)
         538	GET_ITER(arg=None, lineno=72)
>        540	FOR_ITER(arg=38, lineno=72)
         542	STORE_FAST(arg=16, lineno=72)
         544	LOAD_FAST(arg=9, lineno=73)
         546	LOAD_FAST(arg=16, lineno=73)
         548	BINARY_ADD(arg=None, lineno=73)
         550	STORE_FAST(arg=34, lineno=73)
         552	LOAD_FAST(arg=15, lineno=74)
         554	LOAD_FAST(arg=16, lineno=74)
         556	DUP_TOP_TWO(arg=None, lineno=74)
         558	BINARY_SUBSCR(arg=None, lineno=74)
         560	LOAD_CONST(arg=7, lineno=74)
         562	LOAD_FAST(arg=34, lineno=74)
         564	LOAD_CONST(arg=2, lineno=74)
         566	BINARY_FLOOR_DIVIDE(arg=None, lineno=74)
         568	BINARY_POWER(arg=None, lineno=74)
         570	INPLACE_MULTIPLY(arg=None, lineno=74)
         572	ROT_THREE(arg=None, lineno=74)
         574	STORE_SUBSCR(arg=None, lineno=74)
         576	JUMP_ABSOLUTE(arg=540, lineno=74)
>        580	LOAD_FAST(arg=15, lineno=76)
         582	RETURN_VALUE(arg=None, lineno=76)
DEBUG 2022-02-07 18:03:04,942 pending: deque([State(pc_initial=0 nstack_initial=0)])
DEBUG 2022-02-07 18:03:04,942 stack: []
DEBUG 2022-02-07 18:03:04,942 dispatch pc=0, inst=NOP(arg=None, lineno=20)
DEBUG 2022-02-07 18:03:04,942 stack []
DEBUG 2022-02-07 18:03:04,942 dispatch pc=2, inst=LOAD_FAST(arg=1, lineno=20)
DEBUG 2022-02-07 18:03:04,942 stack []
DEBUG 2022-02-07 18:03:04,942 dispatch pc=4, inst=LOAD_CONST(arg=1, lineno=20)
DEBUG 2022-02-07 18:03:04,942 stack ['$D2.0']
DEBUG 2022-02-07 18:03:04,942 dispatch pc=6, inst=BINARY_SUBSCR(arg=None, lineno=20)
DEBUG 2022-02-07 18:03:04,942 stack ['$D2.0', '$const4.1']
DEBUG 2022-02-07 18:03:04,942 dispatch pc=8, inst=STORE_FAST(arg=6, lineno=20)
DEBUG 2022-02-07 18:03:04,942 stack ['$6binary_subscr.2']
DEBUG 2022-02-07 18:03:04,942 dispatch pc=10, inst=LOAD_FAST(arg=0, lineno=21)
DEBUG 2022-02-07 18:03:04,942 stack []
DEBUG 2022-02-07 18:03:04,942 dispatch pc=12, inst=LOAD_CONST(arg=1, lineno=21)
DEBUG 2022-02-07 18:03:04,942 stack ['$A10.3']
DEBUG 2022-02-07 18:03:04,942 dispatch pc=14, inst=LOAD_CONST(arg=0, lineno=21)
DEBUG 2022-02-07 18:03:04,942 stack ['$A10.3', '$const12.4']
DEBUG 2022-02-07 18:03:04,957 dispatch pc=16, inst=LOAD_CONST(arg=0, lineno=21)
DEBUG 2022-02-07 18:03:04,957 stack ['$A10.3', '$const12.4', '$const14.5']
DEBUG 2022-02-07 18:03:04,957 dispatch pc=18, inst=BUILD_SLICE(arg=2, lineno=21)
DEBUG 2022-02-07 18:03:04,957 stack ['$A10.3', '$const12.4', '$const14.5', '$const16.6']
DEBUG 2022-02-07 18:03:04,957 dispatch pc=20, inst=BUILD_TUPLE(arg=2, lineno=21)
DEBUG 2022-02-07 18:03:04,957 stack ['$A10.3', '$const12.4', '$18build_slice.8']
DEBUG 2022-02-07 18:03:04,957 dispatch pc=22, inst=BINARY_SUBSCR(arg=None, lineno=21)
DEBUG 2022-02-07 18:03:04,957 stack ['$A10.3', '$20build_tuple.9']
DEBUG 2022-02-07 18:03:04,957 dispatch pc=24, inst=STORE_FAST(arg=7, lineno=21)
DEBUG 2022-02-07 18:03:04,957 stack ['$22binary_subscr.10']
DEBUG 2022-02-07 18:03:04,957 dispatch pc=26, inst=LOAD_FAST(arg=0, lineno=23)
DEBUG 2022-02-07 18:03:04,957 stack []
DEBUG 2022-02-07 18:03:04,957 dispatch pc=28, inst=LOAD_ATTR(arg=0, lineno=23)
DEBUG 2022-02-07 18:03:04,957 stack ['$A26.11']
DEBUG 2022-02-07 18:03:04,957 dispatch pc=30, inst=LOAD_CONST(arg=1, lineno=23)
DEBUG 2022-02-07 18:03:04,957 stack ['$28load_attr.12']
DEBUG 2022-02-07 18:03:04,957 dispatch pc=32, inst=BINARY_SUBSCR(arg=None, lineno=23)
DEBUG 2022-02-07 18:03:04,957 stack ['$28load_attr.12', '$const30.13']
DEBUG 2022-02-07 18:03:04,957 dispatch pc=34, inst=STORE_FAST(arg=8, lineno=23)
DEBUG 2022-02-07 18:03:04,957 stack ['$32binary_subscr.14']
DEBUG 2022-02-07 18:03:04,957 dispatch pc=36, inst=LOAD_CONST(arg=2, lineno=24)
DEBUG 2022-02-07 18:03:04,957 stack []
DEBUG 2022-02-07 18:03:04,957 dispatch pc=38, inst=LOAD_FAST(arg=2, lineno=24)
DEBUG 2022-02-07 18:03:04,957 stack ['$const36.15']
DEBUG 2022-02-07 18:03:04,957 dispatch pc=40, inst=LOAD_METHOD(arg=1, lineno=24)
DEBUG 2022-02-07 18:03:04,957 stack ['$const36.15', '$fixed_edge_reps38.16']
DEBUG 2022-02-07 18:03:04,957 dispatch pc=42, inst=CALL_METHOD(arg=0, lineno=24)
DEBUG 2022-02-07 18:03:04,957 stack ['$const36.15', '$40load_method.17']
DEBUG 2022-02-07 18:03:04,957 dispatch pc=44, inst=BINARY_MULTIPLY(arg=None, lineno=24)
DEBUG 2022-02-07 18:03:04,957 stack ['$const36.15', '$42call_method.18']
DEBUG 2022-02-07 18:03:04,957 dispatch pc=46, inst=STORE_FAST(arg=9, lineno=24)
DEBUG 2022-02-07 18:03:04,964 stack ['$44binary_multiply.19']
DEBUG 2022-02-07 18:03:04,964 dispatch pc=48, inst=LOAD_FAST(arg=9, lineno=26)
DEBUG 2022-02-07 18:03:04,964 stack []
DEBUG 2022-02-07 18:03:04,964 dispatch pc=50, inst=LOAD_CONST(arg=2, lineno=26)
DEBUG 2022-02-07 18:03:04,964 stack ['$N_fixed48.20']
DEBUG 2022-02-07 18:03:04,964 dispatch pc=52, inst=LOAD_FAST(arg=3, lineno=26)
DEBUG 2022-02-07 18:03:04,964 stack ['$N_fixed48.20', '$const50.21']
DEBUG 2022-02-07 18:03:04,964 dispatch pc=54, inst=BINARY_MULTIPLY(arg=None, lineno=26)
DEBUG 2022-02-07 18:03:04,964 stack ['$N_fixed48.20', '$const50.21', '$batch_max52.22']
DEBUG 2022-02-07 18:03:04,964 dispatch pc=56, inst=BINARY_ADD(arg=None, lineno=26)
DEBUG 2022-02-07 18:03:04,964 stack ['$N_fixed48.20', '$54binary_multiply.23']
DEBUG 2022-02-07 18:03:04,964 dispatch pc=58, inst=LOAD_FAST(arg=4, lineno=26)
DEBUG 2022-02-07 18:03:04,964 stack ['$56binary_add.24']
DEBUG 2022-02-07 18:03:04,964 dispatch pc=60, inst=BINARY_ADD(arg=None, lineno=26)
DEBUG 2022-02-07 18:03:04,964 stack ['$56binary_add.24', '$odd_cutoff58.25']
DEBUG 2022-02-07 18:03:04,964 dispatch pc=62, inst=STORE_FAST(arg=10, lineno=26)
DEBUG 2022-02-07 18:03:04,964 stack ['$60binary_add.26']
DEBUG 2022-02-07 18:03:04,964 dispatch pc=64, inst=LOAD_GLOBAL(arg=2, lineno=28)
DEBUG 2022-02-07 18:03:04,964 stack []
DEBUG 2022-02-07 18:03:04,964 dispatch pc=66, inst=LOAD_METHOD(arg=3, lineno=28)
DEBUG 2022-02-07 18:03:04,964 stack ['$64load_global.27']
DEBUG 2022-02-07 18:03:04,964 dispatch pc=68, inst=LOAD_GLOBAL(arg=2, lineno=28)
DEBUG 2022-02-07 18:03:04,964 stack ['$66load_method.28']
DEBUG 2022-02-07 18:03:04,964 dispatch pc=70, inst=LOAD_METHOD(arg=4, lineno=28)
DEBUG 2022-02-07 18:03:04,964 stack ['$66load_method.28', '$68load_global.29']
DEBUG 2022-02-07 18:03:04,964 dispatch pc=72, inst=LOAD_FAST(arg=3, lineno=28)
DEBUG 2022-02-07 18:03:04,964 stack ['$66load_method.28', '$70load_method.30']
DEBUG 2022-02-07 18:03:04,964 dispatch pc=74, inst=BUILD_LIST(arg=1, lineno=28)
DEBUG 2022-02-07 18:03:04,964 stack ['$66load_method.28', '$70load_method.30', '$batch_max72.31']
DEBUG 2022-02-07 18:03:04,964 dispatch pc=76, inst=CALL_METHOD(arg=1, lineno=28)
DEBUG 2022-02-07 18:03:04,964 stack ['$66load_method.28', '$70load_method.30', '$74build_list.32']
DEBUG 2022-02-07 18:03:04,964 dispatch pc=78, inst=LOAD_FAST(arg=2, lineno=28)
DEBUG 2022-02-07 18:03:04,964 stack ['$66load_method.28', '$76call_method.33']
DEBUG 2022-02-07 18:03:04,964 dispatch pc=80, inst=BUILD_TUPLE(arg=2, lineno=28)
DEBUG 2022-02-07 18:03:04,964 stack ['$66load_method.28', '$76call_method.33', '$fixed_edge_reps78.34']
DEBUG 2022-02-07 18:03:04,964 dispatch pc=82, inst=CALL_METHOD(arg=1, lineno=28)
DEBUG 2022-02-07 18:03:04,964 stack ['$66load_method.28', '$80build_tuple.35']
DEBUG 2022-02-07 18:03:04,964 dispatch pc=84, inst=STORE_FAST(arg=11, lineno=28)
DEBUG 2022-02-07 18:03:04,964 stack ['$82call_method.36']
DEBUG 2022-02-07 18:03:04,964 dispatch pc=86, inst=LOAD_GLOBAL(arg=2, lineno=29)
DEBUG 2022-02-07 18:03:04,964 stack []
DEBUG 2022-02-07 18:03:04,964 dispatch pc=88, inst=LOAD_METHOD(arg=5, lineno=29)
DEBUG 2022-02-07 18:03:04,964 stack ['$86load_global.37']
DEBUG 2022-02-07 18:03:04,964 dispatch pc=90, inst=LOAD_FAST(arg=11, lineno=29)
DEBUG 2022-02-07 18:03:04,964 stack ['$88load_method.38']
DEBUG 2022-02-07 18:03:04,964 dispatch pc=92, inst=LOAD_CONST(arg=3, lineno=29)
DEBUG 2022-02-07 18:03:04,964 stack ['$88load_method.38', '$edge_reps90.39']
DEBUG 2022-02-07 18:03:04,964 dispatch pc=94, inst=BINARY_ADD(arg=None, lineno=29)
DEBUG 2022-02-07 18:03:04,964 stack ['$88load_method.38', '$edge_reps90.39', '$const92.40']
DEBUG 2022-02-07 18:03:04,964 dispatch pc=96, inst=CALL_METHOD(arg=1, lineno=29)
DEBUG 2022-02-07 18:03:04,964 stack ['$88load_method.38', '$94binary_add.41']
DEBUG 2022-02-07 18:03:04,964 dispatch pc=98, inst=STORE_FAST(arg=12, lineno=29)
DEBUG 2022-02-07 18:03:04,964 stack ['$96call_method.42']
DEBUG 2022-02-07 18:03:04,964 dispatch pc=100, inst=LOAD_FAST(arg=11, lineno=31)
DEBUG 2022-02-07 18:03:04,964 stack []
DEBUG 2022-02-07 18:03:04,964 dispatch pc=102, inst=LOAD_METHOD(arg=6, lineno=31)
DEBUG 2022-02-07 18:03:04,964 stack ['$edge_reps100.43']
DEBUG 2022-02-07 18:03:04,964 dispatch pc=104, inst=CALL_METHOD(arg=0, lineno=31)
DEBUG 2022-02-07 18:03:04,964 stack ['$102load_method.44']
DEBUG 2022-02-07 18:03:04,964 dispatch pc=106, inst=LOAD_FAST(arg=4, lineno=31)
DEBUG 2022-02-07 18:03:04,964 stack ['$104call_method.45']
DEBUG 2022-02-07 18:03:04,964 dispatch pc=108, inst=BINARY_ADD(arg=None, lineno=31)
DEBUG 2022-02-07 18:03:04,964 stack ['$104call_method.45', '$odd_cutoff106.46']
DEBUG 2022-02-07 18:03:04,964 dispatch pc=110, inst=STORE_FAST(arg=13, lineno=31)
DEBUG 2022-02-07 18:03:04,964 stack ['$108binary_add.47']
DEBUG 2022-02-07 18:03:04,964 dispatch pc=112, inst=LOAD_GLOBAL(arg=7, lineno=32)
DEBUG 2022-02-07 18:03:04,964 stack []
DEBUG 2022-02-07 18:03:04,964 dispatch pc=114, inst=LOAD_FAST(arg=13, lineno=32)
DEBUG 2022-02-07 18:03:04,964 stack ['$112load_global.48']
DEBUG 2022-02-07 18:03:04,964 dispatch pc=116, inst=CALL_FUNCTION(arg=1, lineno=32)
DEBUG 2022-02-07 18:03:04,964 stack ['$112load_global.48', '$max_binom114.49']
DEBUG 2022-02-07 18:03:04,964 dispatch pc=118, inst=STORE_FAST(arg=14, lineno=32)
DEBUG 2022-02-07 18:03:04,964 stack ['$116call_function.50']
DEBUG 2022-02-07 18:03:04,964 dispatch pc=120, inst=LOAD_GLOBAL(arg=2, lineno=34)
DEBUG 2022-02-07 18:03:04,964 stack []
DEBUG 2022-02-07 18:03:04,964 dispatch pc=122, inst=LOAD_ATTR(arg=8, lineno=34)
DEBUG 2022-02-07 18:03:04,964 stack ['$120load_global.51']
DEBUG 2022-02-07 18:03:04,964 dispatch pc=124, inst=LOAD_CONST(arg=2, lineno=34)
DEBUG 2022-02-07 18:03:04,964 stack ['$122load_attr.52']
DEBUG 2022-02-07 18:03:04,964 dispatch pc=126, inst=LOAD_FAST(arg=3, lineno=34)
DEBUG 2022-02-07 18:03:04,964 stack ['$122load_attr.52', '$const124.53']
DEBUG 2022-02-07 18:03:04,964 dispatch pc=128, inst=BINARY_MULTIPLY(arg=None, lineno=34)
DEBUG 2022-02-07 18:03:04,964 stack ['$122load_attr.52', '$const124.53', '$batch_max126.54']
DEBUG 2022-02-07 18:03:04,964 dispatch pc=130, inst=LOAD_FAST(arg=4, lineno=34)
DEBUG 2022-02-07 18:03:04,964 stack ['$122load_attr.52', '$128binary_multiply.55']
DEBUG 2022-02-07 18:03:04,964 dispatch pc=132, inst=BINARY_ADD(arg=None, lineno=34)
DEBUG 2022-02-07 18:03:04,964 stack ['$122load_attr.52', '$128binary_multiply.55', '$odd_cutoff130.56']
DEBUG 2022-02-07 18:03:04,964 dispatch pc=134, inst=LOAD_CONST(arg=3, lineno=34)
DEBUG 2022-02-07 18:03:04,964 stack ['$122load_attr.52', '$132binary_add.57']
DEBUG 2022-02-07 18:03:04,964 dispatch pc=136, inst=BINARY_ADD(arg=None, lineno=34)
DEBUG 2022-02-07 18:03:04,979 stack ['$122load_attr.52', '$132binary_add.57', '$const134.58']
DEBUG 2022-02-07 18:03:04,979 dispatch pc=138, inst=LOAD_GLOBAL(arg=2, lineno=34)
DEBUG 2022-02-07 18:03:04,979 stack ['$122load_attr.52', '$136binary_add.59']
DEBUG 2022-02-07 18:03:04,979 dispatch pc=140, inst=LOAD_ATTR(arg=9, lineno=34)
DEBUG 2022-02-07 18:03:04,979 stack ['$122load_attr.52', '$136binary_add.59', '$138load_global.60']
DEBUG 2022-02-07 18:03:04,979 dispatch pc=142, inst=LOAD_CONST(arg=4, lineno=34)
DEBUG 2022-02-07 18:03:04,979 stack ['$122load_attr.52', '$136binary_add.59', '$140load_attr.61']
DEBUG 2022-02-07 18:03:04,979 dispatch pc=144, inst=CALL_FUNCTION_KW(arg=2, lineno=34)
DEBUG 2022-02-07 18:03:04,979 stack ['$122load_attr.52', '$136binary_add.59', '$140load_attr.61', '$const142.62']
DEBUG 2022-02-07 18:03:04,979 dispatch pc=146, inst=STORE_FAST(arg=15, lineno=34)
DEBUG 2022-02-07 18:03:04,979 stack ['$144call_function_kw.63']
DEBUG 2022-02-07 18:03:04,979 dispatch pc=148, inst=LOAD_GLOBAL(arg=10, lineno=35)
DEBUG 2022-02-07 18:03:04,979 stack []
DEBUG 2022-02-07 18:03:04,979 dispatch pc=150, inst=LOAD_METHOD(arg=11, lineno=35)
DEBUG 2022-02-07 18:03:04,979 stack ['$148load_global.64']
DEBUG 2022-02-07 18:03:04,979 dispatch pc=152, inst=LOAD_FAST(arg=12, lineno=35)
DEBUG 2022-02-07 18:03:04,979 stack ['$150load_method.65']
DEBUG 2022-02-07 18:03:04,979 dispatch pc=154, inst=CALL_METHOD(arg=1, lineno=35)
DEBUG 2022-02-07 18:03:04,979 stack ['$150load_method.65', '$steps152.66']
DEBUG 2022-02-07 18:03:04,979 dispatch pc=156, inst=GET_ITER(arg=None, lineno=35)
DEBUG 2022-02-07 18:03:04,979 stack ['$154call_method.67']
DEBUG 2022-02-07 18:03:04,979 end state. edges=[Edge(pc=158, stack=('$156get_iter.68',), blockstack=(), npush=0)]
DEBUG 2022-02-07 18:03:04,979 pending: deque([State(pc_initial=158 nstack_initial=1)])
DEBUG 2022-02-07 18:03:04,979 stack: ['$phi158.0']
DEBUG 2022-02-07 18:03:04,979 dispatch pc=158, inst=FOR_ITER(arg=358, lineno=35)
DEBUG 2022-02-07 18:03:04,979 stack ['$phi158.0']
DEBUG 2022-02-07 18:03:04,979 end state. edges=[Edge(pc=520, stack=(), blockstack=(), npush=0), Edge(pc=162, stack=('$phi158.0', '$158for_iter.2'), blockstack=(), npush=0)]
DEBUG 2022-02-07 18:03:04,979 pending: deque([State(pc_initial=520 nstack_initial=0), State(pc_initial=162 nstack_initial=2)])
DEBUG 2022-02-07 18:03:04,979 stack: []
DEBUG 2022-02-07 18:03:04,979 dispatch pc=520, inst=LOAD_FAST(arg=5, lineno=71)
DEBUG 2022-02-07 18:03:04,979 stack []
DEBUG 2022-02-07 18:03:04,979 dispatch pc=522, inst=POP_JUMP_IF_FALSE(arg=580, lineno=71)
DEBUG 2022-02-07 18:03:04,979 stack ['$glynn520.0']
DEBUG 2022-02-07 18:03:04,979 end state. edges=[Edge(pc=526, stack=(), blockstack=(), npush=0), Edge(pc=580, stack=(), blockstack=(), npush=0)]
DEBUG 2022-02-07 18:03:04,979 pending: deque([State(pc_initial=162 nstack_initial=2), State(pc_initial=526 nstack_initial=0), State(pc_initial=580 nstack_initial=0)])
DEBUG 2022-02-07 18:03:04,979 stack: ['$phi162.0', '$phi162.1']
DEBUG 2022-02-07 18:03:04,979 dispatch pc=162, inst=STORE_FAST(arg=16, lineno=35)
DEBUG 2022-02-07 18:03:04,979 stack ['$phi162.0', '$phi162.1']
DEBUG 2022-02-07 18:03:04,979 dispatch pc=164, inst=LOAD_GLOBAL(arg=2, lineno=37)
DEBUG 2022-02-07 18:03:04,979 stack ['$phi162.0']
DEBUG 2022-02-07 18:03:04,979 dispatch pc=166, inst=LOAD_ATTR(arg=8, lineno=37)
DEBUG 2022-02-07 18:03:04,979 stack ['$phi162.0', '$164load_global.2']
DEBUG 2022-02-07 18:03:04,979 dispatch pc=168, inst=LOAD_CONST(arg=2, lineno=37)
DEBUG 2022-02-07 18:03:04,979 stack ['$phi162.0', '$166load_attr.3']
DEBUG 2022-02-07 18:03:04,979 dispatch pc=170, inst=LOAD_FAST(arg=3, lineno=37)
DEBUG 2022-02-07 18:03:04,979 stack ['$phi162.0', '$166load_attr.3', '$const168.4']
DEBUG 2022-02-07 18:03:04,979 dispatch pc=172, inst=BINARY_MULTIPLY(arg=None, lineno=37)
DEBUG 2022-02-07 18:03:04,979 stack ['$phi162.0', '$166load_attr.3', '$const168.4', '$batch_max170.5']
DEBUG 2022-02-07 18:03:04,979 dispatch pc=174, inst=LOAD_FAST(arg=4, lineno=37)
DEBUG 2022-02-07 18:03:04,979 stack ['$phi162.0', '$166load_attr.3', '$172binary_multiply.6']
DEBUG 2022-02-07 18:03:04,979 dispatch pc=176, inst=BINARY_ADD(arg=None, lineno=37)
DEBUG 2022-02-07 18:03:04,979 stack ['$phi162.0', '$166load_attr.3', '$172binary_multiply.6', '$odd_cutoff174.7']
DEBUG 2022-02-07 18:03:04,979 dispatch pc=178, inst=LOAD_CONST(arg=3, lineno=37)
DEBUG 2022-02-07 18:03:04,979 stack ['$phi162.0', '$166load_attr.3', '$176binary_add.8']
DEBUG 2022-02-07 18:03:04,979 dispatch pc=180, inst=BINARY_ADD(arg=None, lineno=37)
DEBUG 2022-02-07 18:03:04,979 stack ['$phi162.0', '$166load_attr.3', '$176binary_add.8', '$const178.9']
DEBUG 2022-02-07 18:03:04,979 dispatch pc=182, inst=LOAD_GLOBAL(arg=2, lineno=37)
DEBUG 2022-02-07 18:03:04,979 stack ['$phi162.0', '$166load_attr.3', '$180binary_add.10']
DEBUG 2022-02-07 18:03:04,979 dispatch pc=184, inst=LOAD_ATTR(arg=9, lineno=37)
DEBUG 2022-02-07 18:03:04,979 stack ['$phi162.0', '$166load_attr.3', '$180binary_add.10', '$182load_global.11']
DEBUG 2022-02-07 18:03:04,979 dispatch pc=186, inst=LOAD_CONST(arg=4, lineno=37)
DEBUG 2022-02-07 18:03:04,979 stack ['$phi162.0', '$166load_attr.3', '$180binary_add.10', '$184load_attr.12']
DEBUG 2022-02-07 18:03:04,979 dispatch pc=188, inst=CALL_FUNCTION_KW(arg=2, lineno=37)
DEBUG 2022-02-07 18:03:04,979 stack ['$phi162.0', '$166load_attr.3', '$180binary_add.10', '$184load_attr.12', '$const186.13']
DEBUG 2022-02-07 18:03:04,979 dispatch pc=190, inst=STORE_FAST(arg=17, lineno=37)
DEBUG 2022-02-07 18:03:04,979 stack ['$phi162.0', '$188call_function_kw.14']
DEBUG 2022-02-07 18:03:04,979 dispatch pc=192, inst=LOAD_GLOBAL(arg=12, lineno=39)
DEBUG 2022-02-07 18:03:04,979 stack ['$phi162.0']
DEBUG 2022-02-07 18:03:04,979 dispatch pc=194, inst=LOAD_FAST(arg=16, lineno=39)
DEBUG 2022-02-07 18:03:04,979 stack ['$phi162.0', '$192load_global.15']
DEBUG 2022-02-07 18:03:04,979 dispatch pc=196, inst=LOAD_FAST(arg=11, lineno=39)
DEBUG 2022-02-07 18:03:04,979 stack ['$phi162.0', '$192load_global.15', '$j194.16']
DEBUG 2022-02-07 18:03:04,979 dispatch pc=198, inst=CALL_FUNCTION(arg=2, lineno=39)
DEBUG 2022-02-07 18:03:04,979 stack ['$phi162.0', '$192load_global.15', '$j194.16', '$edge_reps196.17']
DEBUG 2022-02-07 18:03:04,979 dispatch pc=200, inst=STORE_FAST(arg=18, lineno=39)
DEBUG 2022-02-07 18:03:04,979 stack ['$phi162.0', '$198call_function.18']
DEBUG 2022-02-07 18:03:04,979 dispatch pc=202, inst=LOAD_FAST(arg=18, lineno=40)
DEBUG 2022-02-07 18:03:04,979 stack ['$phi162.0']
DEBUG 2022-02-07 18:03:04,979 dispatch pc=204, inst=LOAD_METHOD(arg=1, lineno=40)
DEBUG 2022-02-07 18:03:04,979 stack ['$phi162.0', '$kept_edges202.19']
DEBUG 2022-02-07 18:03:04,979 dispatch pc=206, inst=CALL_METHOD(arg=0, lineno=40)
DEBUG 2022-02-07 18:03:04,979 stack ['$phi162.0', '$204load_method.20']
DEBUG 2022-02-07 18:03:04,979 dispatch pc=208, inst=STORE_FAST(arg=19, lineno=40)
DEBUG 2022-02-07 18:03:04,979 stack ['$phi162.0', '$206call_method.21']
DEBUG 2022-02-07 18:03:04,979 dispatch pc=210, inst=LOAD_CONST(arg=5, lineno=42)
DEBUG 2022-02-07 18:03:04,995 stack ['$phi162.0']
DEBUG 2022-02-07 18:03:04,995 dispatch pc=212, inst=STORE_FAST(arg=20, lineno=42)
DEBUG 2022-02-07 18:03:04,995 stack ['$phi162.0', '$const210.22']
DEBUG 2022-02-07 18:03:04,995 dispatch pc=214, inst=LOAD_GLOBAL(arg=13, lineno=43)
DEBUG 2022-02-07 18:03:04,995 stack ['$phi162.0']
DEBUG 2022-02-07 18:03:04,995 dispatch pc=216, inst=LOAD_CONST(arg=3, lineno=43)
DEBUG 2022-02-07 18:03:04,995 stack ['$phi162.0', '$214load_global.23']
DEBUG 2022-02-07 18:03:04,995 dispatch pc=218, inst=LOAD_FAST(arg=8, lineno=43)
DEBUG 2022-02-07 18:03:04,995 stack ['$phi162.0', '$214load_global.23', '$const216.24']
DEBUG 2022-02-07 18:03:04,995 dispatch pc=220, inst=LOAD_CONST(arg=2, lineno=43)
DEBUG 2022-02-07 18:03:04,995 stack ['$phi162.0', '$214load_global.23', '$const216.24', '$n218.25']
DEBUG 2022-02-07 18:03:04,995 dispatch pc=222, inst=BINARY_FLOOR_DIVIDE(arg=None, lineno=43)
DEBUG 2022-02-07 18:03:04,995 stack ['$phi162.0', '$214load_global.23', '$const216.24', '$n218.25', '$const220.26']
DEBUG 2022-02-07 18:03:04,995 dispatch pc=224, inst=CALL_FUNCTION(arg=2, lineno=43)
DEBUG 2022-02-07 18:03:04,995 stack ['$phi162.0', '$214load_global.23', '$const216.24', '$222binary_floor_divide.27']
DEBUG 2022-02-07 18:03:04,995 dispatch pc=226, inst=GET_ITER(arg=None, lineno=43)
DEBUG 2022-02-07 18:03:04,995 stack ['$phi162.0', '$224call_function.28']
DEBUG 2022-02-07 18:03:04,995 end state. edges=[Edge(pc=228, stack=('$phi162.0', '$226get_iter.29'), blockstack=(), npush=0)]
DEBUG 2022-02-07 18:03:04,995 pending: deque([State(pc_initial=526 nstack_initial=0), State(pc_initial=580 nstack_initial=0), State(pc_initial=228 nstack_initial=2)])
DEBUG 2022-02-07 18:03:04,995 stack: []
DEBUG 2022-02-07 18:03:04,995 dispatch pc=526, inst=LOAD_GLOBAL(arg=13, lineno=72)
DEBUG 2022-02-07 18:03:04,995 stack []
DEBUG 2022-02-07 18:03:04,995 dispatch pc=528, inst=LOAD_FAST(arg=15, lineno=72)
DEBUG 2022-02-07 18:03:04,995 stack ['$526load_global.0']
DEBUG 2022-02-07 18:03:04,995 dispatch pc=530, inst=LOAD_ATTR(arg=0, lineno=72)
DEBUG 2022-02-07 18:03:04,995 stack ['$526load_global.0', '$H_batch528.1']
DEBUG 2022-02-07 18:03:04,995 dispatch pc=532, inst=LOAD_CONST(arg=1, lineno=72)
DEBUG 2022-02-07 18:03:04,995 stack ['$526load_global.0', '$530load_attr.2']
DEBUG 2022-02-07 18:03:04,995 dispatch pc=534, inst=BINARY_SUBSCR(arg=None, lineno=72)
DEBUG 2022-02-07 18:03:04,995 stack ['$526load_global.0', '$530load_attr.2', '$const532.3']
DEBUG 2022-02-07 18:03:04,995 dispatch pc=536, inst=CALL_FUNCTION(arg=1, lineno=72)
DEBUG 2022-02-07 18:03:04,995 stack ['$526load_global.0', '$534binary_subscr.4']
DEBUG 2022-02-07 18:03:04,995 dispatch pc=538, inst=GET_ITER(arg=None, lineno=72)
DEBUG 2022-02-07 18:03:04,995 stack ['$536call_function.5']
DEBUG 2022-02-07 18:03:04,995 end state. edges=[Edge(pc=540, stack=('$538get_iter.6',), blockstack=(), npush=0)]
DEBUG 2022-02-07 18:03:04,995 pending: deque([State(pc_initial=580 nstack_initial=0), State(pc_initial=228 nstack_initial=2), State(pc_initial=540 nstack_initial=1)])
DEBUG 2022-02-07 18:03:04,995 stack: []
DEBUG 2022-02-07 18:03:04,995 dispatch pc=580, inst=LOAD_FAST(arg=15, lineno=76)
DEBUG 2022-02-07 18:03:04,995 stack []
DEBUG 2022-02-07 18:03:04,995 dispatch pc=582, inst=RETURN_VALUE(arg=None, lineno=76)
DEBUG 2022-02-07 18:03:04,995 stack ['$H_batch580.0']
DEBUG 2022-02-07 18:03:04,995 end state. edges=[]
DEBUG 2022-02-07 18:03:04,995 pending: deque([State(pc_initial=228 nstack_initial=2), State(pc_initial=540 nstack_initial=1)])
DEBUG 2022-02-07 18:03:04,995 stack: ['$phi228.0', '$phi228.1']
DEBUG 2022-02-07 18:03:04,995 dispatch pc=228, inst=FOR_ITER(arg=28, lineno=43)
DEBUG 2022-02-07 18:03:04,995 stack ['$phi228.0', '$phi228.1']
DEBUG 2022-02-07 18:03:04,995 end state. edges=[Edge(pc=258, stack=('$phi228.0',), blockstack=(), npush=0), Edge(pc=230, stack=('$phi228.0', '$phi228.1', '$228for_iter.3'), blockstack=(), npush=0)]
DEBUG 2022-02-07 18:03:04,995 pending: deque([State(pc_initial=540 nstack_initial=1), State(pc_initial=258 nstack_initial=1), State(pc_initial=230 nstack_initial=3)])
DEBUG 2022-02-07 18:03:04,995 stack: ['$phi540.0']
DEBUG 2022-02-07 18:03:04,995 dispatch pc=540, inst=FOR_ITER(arg=38, lineno=72)
DEBUG 2022-02-07 18:03:04,995 stack ['$phi540.0']
DEBUG 2022-02-07 18:03:04,995 end state. edges=[Edge(pc=580, stack=(), blockstack=(), npush=0), Edge(pc=542, stack=('$phi540.0', '$540for_iter.2'), blockstack=(), npush=0)]
DEBUG 2022-02-07 18:03:04,995 pending: deque([State(pc_initial=258 nstack_initial=1), State(pc_initial=230 nstack_initial=3), State(pc_initial=580 nstack_initial=0), State(pc_initial=542 nstack_initial=2)])
DEBUG 2022-02-07 18:03:04,995 stack: ['$phi258.0']
DEBUG 2022-02-07 18:03:04,995 dispatch pc=258, inst=LOAD_FAST(arg=5, lineno=46)
DEBUG 2022-02-07 18:03:04,995 stack ['$phi258.0']
DEBUG 2022-02-07 18:03:04,995 dispatch pc=260, inst=POP_JUMP_IF_FALSE(arg=278, lineno=46)
DEBUG 2022-02-07 18:03:04,995 stack ['$phi258.0', '$glynn258.1']
DEBUG 2022-02-07 18:03:04,995 end state. edges=[Edge(pc=264, stack=('$phi258.0',), blockstack=(), npush=0), Edge(pc=278, stack=('$phi258.0',), blockstack=(), npush=0)]
DEBUG 2022-02-07 18:03:04,995 pending: deque([State(pc_initial=230 nstack_initial=3), State(pc_initial=580 nstack_initial=0), State(pc_initial=542 nstack_initial=2), State(pc_initial=264 nstack_initial=1), State(pc_initial=278 nstack_initial=1)])
DEBUG 2022-02-07 18:03:04,995 stack: ['$phi230.0', '$phi230.1', '$phi230.2']
DEBUG 2022-02-07 18:03:04,995 dispatch pc=230, inst=STORE_FAST(arg=21, lineno=43)
DEBUG 2022-02-07 18:03:04,995 stack ['$phi230.0', '$phi230.1', '$phi230.2']
DEBUG 2022-02-07 18:03:04,995 dispatch pc=232, inst=LOAD_FAST(arg=20, lineno=44)
DEBUG 2022-02-07 18:03:04,995 stack ['$phi230.0', '$phi230.1']
DEBUG 2022-02-07 18:03:04,995 dispatch pc=234, inst=LOAD_FAST(arg=14, lineno=44)
DEBUG 2022-02-07 18:03:04,995 stack ['$phi230.0', '$phi230.1', '$binom_prod232.3']
DEBUG 2022-02-07 18:03:04,995 dispatch pc=236, inst=LOAD_FAST(arg=11, lineno=44)
DEBUG 2022-02-07 18:03:04,995 stack ['$phi230.0', '$phi230.1', '$binom_prod232.3', '$binoms234.4']
DEBUG 2022-02-07 18:03:04,995 dispatch pc=238, inst=LOAD_FAST(arg=21, lineno=44)
DEBUG 2022-02-07 18:03:04,995 stack ['$phi230.0', '$phi230.1', '$binom_prod232.3', '$binoms234.4', '$edge_reps236.5']
DEBUG 2022-02-07 18:03:04,995 dispatch pc=240, inst=BINARY_SUBSCR(arg=None, lineno=44)
DEBUG 2022-02-07 18:03:04,995 stack ['$phi230.0', '$phi230.1', '$binom_prod232.3', '$binoms234.4', '$edge_reps236.5', '$i238.6']
DEBUG 2022-02-07 18:03:04,995 dispatch pc=242, inst=LOAD_FAST(arg=18, lineno=44)
DEBUG 2022-02-07 18:03:04,995 stack ['$phi230.0', '$phi230.1', '$binom_prod232.3', '$binoms234.4', '$240binary_subscr.7']
DEBUG 2022-02-07 18:03:04,995 dispatch pc=244, inst=LOAD_FAST(arg=21, lineno=44)
DEBUG 2022-02-07 18:03:04,995 stack ['$phi230.0', '$phi230.1', '$binom_prod232.3', '$binoms234.4', '$240binary_subscr.7', '$kept_edges242.8']
DEBUG 2022-02-07 18:03:04,995 dispatch pc=246, inst=BINARY_SUBSCR(arg=None, lineno=44)
DEBUG 2022-02-07 18:03:04,995 stack ['$phi230.0', '$phi230.1', '$binom_prod232.3', '$binoms234.4', '$240binary_subscr.7', '$kept_edges242.8', '$i244.9']
DEBUG 2022-02-07 18:03:04,995 dispatch pc=248, inst=BUILD_TUPLE(arg=2, lineno=44)
DEBUG 2022-02-07 18:03:04,995 stack ['$phi230.0', '$phi230.1', '$binom_prod232.3', '$binoms234.4', '$240binary_subscr.7', '$246binary_subscr.10']
DEBUG 2022-02-07 18:03:04,995 dispatch pc=250, inst=BINARY_SUBSCR(arg=None, lineno=44)
DEBUG 2022-02-07 18:03:04,995 stack ['$phi230.0', '$phi230.1', '$binom_prod232.3', '$binoms234.4', '$248build_tuple.11']
DEBUG 2022-02-07 18:03:04,995 dispatch pc=252, inst=INPLACE_MULTIPLY(arg=None, lineno=44)
DEBUG 2022-02-07 18:03:04,995 stack ['$phi230.0', '$phi230.1', '$binom_prod232.3', '$250binary_subscr.12']
DEBUG 2022-02-07 18:03:04,995 dispatch pc=254, inst=STORE_FAST(arg=20, lineno=44)
DEBUG 2022-02-07 18:03:05,011 stack ['$phi230.0', '$phi230.1', '$252inplace_multiply.13']
DEBUG 2022-02-07 18:03:05,011 dispatch pc=256, inst=JUMP_ABSOLUTE(arg=228, lineno=44)
DEBUG 2022-02-07 18:03:05,011 stack ['$phi230.0', '$phi230.1']
DEBUG 2022-02-07 18:03:05,011 end state. edges=[Edge(pc=228, stack=('$phi230.0', '$phi230.1'), blockstack=(), npush=0)]
DEBUG 2022-02-07 18:03:05,011 pending: deque([State(pc_initial=580 nstack_initial=0), State(pc_initial=542 nstack_initial=2), State(pc_initial=264 nstack_initial=1), State(pc_initial=278 nstack_initial=1), State(pc_initial=228 nstack_initial=2)])
DEBUG 2022-02-07 18:03:05,011 pending: deque([State(pc_initial=542 nstack_initial=2), State(pc_initial=264 nstack_initial=1), State(pc_initial=278 nstack_initial=1), State(pc_initial=228 nstack_initial=2)])
DEBUG 2022-02-07 18:03:05,011 stack: ['$phi542.0', '$phi542.1']
DEBUG 2022-02-07 18:03:05,011 dispatch pc=542, inst=STORE_FAST(arg=16, lineno=72)
DEBUG 2022-02-07 18:03:05,011 stack ['$phi542.0', '$phi542.1']
DEBUG 2022-02-07 18:03:05,011 dispatch pc=544, inst=LOAD_FAST(arg=9, lineno=73)
DEBUG 2022-02-07 18:03:05,011 stack ['$phi542.0']
DEBUG 2022-02-07 18:03:05,011 dispatch pc=546, inst=LOAD_FAST(arg=16, lineno=73)
DEBUG 2022-02-07 18:03:05,011 stack ['$phi542.0', '$N_fixed544.2']
DEBUG 2022-02-07 18:03:05,011 dispatch pc=548, inst=BINARY_ADD(arg=None, lineno=73)
DEBUG 2022-02-07 18:03:05,011 stack ['$phi542.0', '$N_fixed544.2', '$j546.3']
DEBUG 2022-02-07 18:03:05,011 dispatch pc=550, inst=STORE_FAST(arg=34, lineno=73)
DEBUG 2022-02-07 18:03:05,011 stack ['$phi542.0', '$548binary_add.4']
DEBUG 2022-02-07 18:03:05,011 dispatch pc=552, inst=LOAD_FAST(arg=15, lineno=74)
DEBUG 2022-02-07 18:03:05,011 stack ['$phi542.0']
DEBUG 2022-02-07 18:03:05,011 dispatch pc=554, inst=LOAD_FAST(arg=16, lineno=74)
DEBUG 2022-02-07 18:03:05,011 stack ['$phi542.0', '$H_batch552.5']
DEBUG 2022-02-07 18:03:05,011 dispatch pc=556, inst=DUP_TOP_TWO(arg=None, lineno=74)
DEBUG 2022-02-07 18:03:05,011 stack ['$phi542.0', '$H_batch552.5', '$j554.6']
DEBUG 2022-02-07 18:03:05,011 dispatch pc=558, inst=BINARY_SUBSCR(arg=None, lineno=74)
DEBUG 2022-02-07 18:03:05,011 stack ['$phi542.0', '$H_batch552.5', '$j554.6', '$556dup_top_two.7', '$556dup_top_two.8']
DEBUG 2022-02-07 18:03:05,011 dispatch pc=560, inst=LOAD_CONST(arg=7, lineno=74)
DEBUG 2022-02-07 18:03:05,011 stack ['$phi542.0', '$H_batch552.5', '$j554.6', '$558binary_subscr.9']
DEBUG 2022-02-07 18:03:05,011 dispatch pc=562, inst=LOAD_FAST(arg=34, lineno=74)
DEBUG 2022-02-07 18:03:05,011 stack ['$phi542.0', '$H_batch552.5', '$j554.6', '$558binary_subscr.9', '$const560.10']
DEBUG 2022-02-07 18:03:05,011 dispatch pc=564, inst=LOAD_CONST(arg=2, lineno=74)
DEBUG 2022-02-07 18:03:05,011 stack ['$phi542.0', '$H_batch552.5', '$j554.6', '$558binary_subscr.9', '$const560.10', '$x562.11']
DEBUG 2022-02-07 18:03:05,011 dispatch pc=566, inst=BINARY_FLOOR_DIVIDE(arg=None, lineno=74)
DEBUG 2022-02-07 18:03:05,011 stack ['$phi542.0', '$H_batch552.5', '$j554.6', '$558binary_subscr.9', '$const560.10', '$x562.11', '$const564.12']
DEBUG 2022-02-07 18:03:05,011 dispatch pc=568, inst=BINARY_POWER(arg=None, lineno=74)
DEBUG 2022-02-07 18:03:05,011 stack ['$phi542.0', '$H_batch552.5', '$j554.6', '$558binary_subscr.9', '$const560.10', '$566binary_floor_divide.13']
DEBUG 2022-02-07 18:03:05,011 dispatch pc=570, inst=INPLACE_MULTIPLY(arg=None, lineno=74)
DEBUG 2022-02-07 18:03:05,011 stack ['$phi542.0', '$H_batch552.5', '$j554.6', '$558binary_subscr.9', '$568binary_power.14']
DEBUG 2022-02-07 18:03:05,011 dispatch pc=572, inst=ROT_THREE(arg=None, lineno=74)
DEBUG 2022-02-07 18:03:05,011 stack ['$phi542.0', '$H_batch552.5', '$j554.6', '$570inplace_multiply.15']
DEBUG 2022-02-07 18:03:05,011 dispatch pc=574, inst=STORE_SUBSCR(arg=None, lineno=74)
DEBUG 2022-02-07 18:03:05,011 stack ['$phi542.0', '$570inplace_multiply.15', '$H_batch552.5', '$j554.6']
DEBUG 2022-02-07 18:03:05,011 dispatch pc=576, inst=JUMP_ABSOLUTE(arg=540, lineno=74)
DEBUG 2022-02-07 18:03:05,011 stack ['$phi542.0']
DEBUG 2022-02-07 18:03:05,011 end state. edges=[Edge(pc=540, stack=('$phi542.0',), blockstack=(), npush=0)]
DEBUG 2022-02-07 18:03:05,011 pending: deque([State(pc_initial=264 nstack_initial=1), State(pc_initial=278 nstack_initial=1), State(pc_initial=228 nstack_initial=2), State(pc_initial=540 nstack_initial=1)])
DEBUG 2022-02-07 18:03:05,011 stack: ['$phi264.0']
DEBUG 2022-02-07 18:03:05,011 dispatch pc=264, inst=LOAD_CONST(arg=2, lineno=47)
DEBUG 2022-02-07 18:03:05,011 stack ['$phi264.0']
DEBUG 2022-02-07 18:03:05,011 dispatch pc=266, inst=LOAD_FAST(arg=18, lineno=47)
DEBUG 2022-02-07 18:03:05,011 stack ['$phi264.0', '$const264.1']
DEBUG 2022-02-07 18:03:05,011 dispatch pc=268, inst=BINARY_MULTIPLY(arg=None, lineno=47)
DEBUG 2022-02-07 18:03:05,011 stack ['$phi264.0', '$const264.1', '$kept_edges266.2']
DEBUG 2022-02-07 18:03:05,011 dispatch pc=270, inst=LOAD_FAST(arg=11, lineno=47)
DEBUG 2022-02-07 18:03:05,011 stack ['$phi264.0', '$268binary_multiply.3']
DEBUG 2022-02-07 18:03:05,011 dispatch pc=272, inst=BINARY_SUBTRACT(arg=None, lineno=47)
DEBUG 2022-02-07 18:03:05,011 stack ['$phi264.0', '$268binary_multiply.3', '$edge_reps270.4']
DEBUG 2022-02-07 18:03:05,011 dispatch pc=274, inst=STORE_FAST(arg=22, lineno=47)
DEBUG 2022-02-07 18:03:05,011 stack ['$phi264.0', '$272binary_subtract.5']
DEBUG 2022-02-07 18:03:05,011 dispatch pc=276, inst=JUMP_FORWARD(arg=4, lineno=47)
DEBUG 2022-02-07 18:03:05,011 stack ['$phi264.0']
DEBUG 2022-02-07 18:03:05,011 end state. edges=[Edge(pc=282, stack=('$phi264.0',), blockstack=(), npush=0)]
DEBUG 2022-02-07 18:03:05,011 pending: deque([State(pc_initial=278 nstack_initial=1), State(pc_initial=228 nstack_initial=2), State(pc_initial=540 nstack_initial=1), State(pc_initial=282 nstack_initial=1)])
DEBUG 2022-02-07 18:03:05,011 stack: ['$phi278.0']
DEBUG 2022-02-07 18:03:05,011 dispatch pc=278, inst=LOAD_FAST(arg=18, lineno=49)
DEBUG 2022-02-07 18:03:05,011 stack ['$phi278.0']
DEBUG 2022-02-07 18:03:05,011 dispatch pc=280, inst=STORE_FAST(arg=22, lineno=49)
DEBUG 2022-02-07 18:03:05,011 stack ['$phi278.0', '$kept_edges278.1']
DEBUG 2022-02-07 18:03:05,011 end state. edges=[Edge(pc=282, stack=('$phi278.0',), blockstack=(), npush=0)]
DEBUG 2022-02-07 18:03:05,011 pending: deque([State(pc_initial=228 nstack_initial=2), State(pc_initial=540 nstack_initial=1), State(pc_initial=282 nstack_initial=1), State(pc_initial=282 nstack_initial=1)])
DEBUG 2022-02-07 18:03:05,011 pending: deque([State(pc_initial=540 nstack_initial=1), State(pc_initial=282 nstack_initial=1), State(pc_initial=282 nstack_initial=1)])
DEBUG 2022-02-07 18:03:05,011 pending: deque([State(pc_initial=282 nstack_initial=1), State(pc_initial=282 nstack_initial=1)])
DEBUG 2022-02-07 18:03:05,011 stack: ['$phi282.0']
DEBUG 2022-02-07 18:03:05,011 dispatch pc=282, inst=LOAD_GLOBAL(arg=14, lineno=51)
DEBUG 2022-02-07 18:03:05,011 stack ['$phi282.0']
DEBUG 2022-02-07 18:03:05,011 dispatch pc=284, inst=LOAD_FAST(arg=22, lineno=51)
DEBUG 2022-02-07 18:03:05,011 stack ['$phi282.0', '$282load_global.1']
DEBUG 2022-02-07 18:03:05,011 dispatch pc=286, inst=LOAD_FAST(arg=0, lineno=51)
DEBUG 2022-02-07 18:03:05,011 stack ['$phi282.0', '$282load_global.1', '$delta284.2']
DEBUG 2022-02-07 18:03:05,011 dispatch pc=288, inst=LOAD_FAST(arg=1, lineno=51)
DEBUG 2022-02-07 18:03:05,011 stack ['$phi282.0', '$282load_global.1', '$delta284.2', '$A286.3']
DEBUG 2022-02-07 18:03:05,011 dispatch pc=290, inst=LOAD_FAST(arg=7, lineno=51)
DEBUG 2022-02-07 18:03:05,011 stack ['$phi282.0', '$282load_global.1', '$delta284.2', '$A286.3', '$D288.4']
DEBUG 2022-02-07 18:03:05,011 dispatch pc=292, inst=CALL_FUNCTION(arg=4, lineno=51)
DEBUG 2022-02-07 18:03:05,011 stack ['$phi282.0', '$282load_global.1', '$delta284.2', '$A286.3', '$D288.4', '$oddV290.5']
DEBUG 2022-02-07 18:03:05,011 dispatch pc=294, inst=UNPACK_SEQUENCE(arg=4, lineno=51)
DEBUG 2022-02-07 18:03:05,011 stack ['$phi282.0', '$292call_function.6']
DEBUG 2022-02-07 18:03:05,011 dispatch pc=296, inst=STORE_FAST(arg=23, lineno=51)
DEBUG 2022-02-07 18:03:05,011 stack ['$phi282.0', '$294unpack_sequence.10', '$294unpack_sequence.9', '$294unpack_sequence.8', '$294unpack_sequence.7']
DEBUG 2022-02-07 18:03:05,026 dispatch pc=298, inst=STORE_FAST(arg=24, lineno=51)
DEBUG 2022-02-07 18:03:05,026 stack ['$phi282.0', '$294unpack_sequence.10', '$294unpack_sequence.9', '$294unpack_sequence.8']
DEBUG 2022-02-07 18:03:05,026 dispatch pc=300, inst=STORE_FAST(arg=25, lineno=51)
DEBUG 2022-02-07 18:03:05,026 stack ['$phi282.0', '$294unpack_sequence.10', '$294unpack_sequence.9']
DEBUG 2022-02-07 18:03:05,026 dispatch pc=302, inst=STORE_FAST(arg=26, lineno=51)
DEBUG 2022-02-07 18:03:05,026 stack ['$phi282.0', '$294unpack_sequence.10']
DEBUG 2022-02-07 18:03:05,026 dispatch pc=304, inst=LOAD_GLOBAL(arg=15, lineno=53)
DEBUG 2022-02-07 18:03:05,026 stack ['$phi282.0']
DEBUG 2022-02-07 18:03:05,026 dispatch pc=306, inst=LOAD_FAST(arg=23, lineno=53)
DEBUG 2022-02-07 18:03:05,026 stack ['$phi282.0', '$304load_global.12']
DEBUG 2022-02-07 18:03:05,026 dispatch pc=308, inst=CALL_FUNCTION(arg=1, lineno=53)
DEBUG 2022-02-07 18:03:05,026 stack ['$phi282.0', '$304load_global.12', '$AX_S306.13']
DEBUG 2022-02-07 18:03:05,026 dispatch pc=310, inst=STORE_FAST(arg=27, lineno=53)
DEBUG 2022-02-07 18:03:05,026 stack ['$phi282.0', '$308call_function.14']
DEBUG 2022-02-07 18:03:05,026 dispatch pc=312, inst=LOAD_GLOBAL(arg=16, lineno=55)
DEBUG 2022-02-07 18:03:05,026 stack ['$phi282.0']
DEBUG 2022-02-07 18:03:05,026 dispatch pc=314, inst=LOAD_FAST(arg=27, lineno=55)
DEBUG 2022-02-07 18:03:05,026 stack ['$phi282.0', '$312load_global.15']
DEBUG 2022-02-07 18:03:05,026 dispatch pc=316, inst=LOAD_FAST(arg=23, lineno=55)
DEBUG 2022-02-07 18:03:05,026 stack ['$phi282.0', '$312load_global.15', '$E314.16']
DEBUG 2022-02-07 18:03:05,026 dispatch pc=318, inst=LOAD_FAST(arg=24, lineno=55)
DEBUG 2022-02-07 18:03:05,026 stack ['$phi282.0', '$312load_global.15', '$E314.16', '$AX_S316.17']
DEBUG 2022-02-07 18:03:05,026 dispatch pc=320, inst=LOAD_FAST(arg=25, lineno=55)
DEBUG 2022-02-07 18:03:05,026 stack ['$phi282.0', '$312load_global.15', '$E314.16', '$AX_S316.17', '$XD_S318.18']
DEBUG 2022-02-07 18:03:05,026 dispatch pc=322, inst=LOAD_FAST(arg=10, lineno=55)
DEBUG 2022-02-07 18:03:05,026 stack ['$phi282.0', '$312load_global.15', '$E314.16', '$AX_S316.17', '$XD_S318.18', '$D_S320.19']
DEBUG 2022-02-07 18:03:05,026 dispatch pc=324, inst=CALL_FUNCTION(arg=5, lineno=55)
DEBUG 2022-02-07 18:03:05,026 stack ['$phi282.0', '$312load_global.15', '$E314.16', '$AX_S316.17', '$XD_S318.18', '$D_S320.19', '$N_max322.20']
DEBUG 2022-02-07 18:03:05,026 dispatch pc=326, inst=STORE_FAST(arg=28, lineno=55)
DEBUG 2022-02-07 18:03:05,026 stack ['$phi282.0', '$324call_function.21']
DEBUG 2022-02-07 18:03:05,026 dispatch pc=328, inst=LOAD_GLOBAL(arg=17, lineno=56)
DEBUG 2022-02-07 18:03:05,026 stack ['$phi282.0']
DEBUG 2022-02-07 18:03:05,026 dispatch pc=330, inst=LOAD_FAST(arg=27, lineno=56)
DEBUG 2022-02-07 18:03:05,026 stack ['$phi282.0', '$328load_global.22']
DEBUG 2022-02-07 18:03:05,026 dispatch pc=332, inst=LOAD_FAST(arg=23, lineno=56)
DEBUG 2022-02-07 18:03:05,026 stack ['$phi282.0', '$328load_global.22', '$E330.23']
DEBUG 2022-02-07 18:03:05,026 dispatch pc=334, inst=LOAD_FAST(arg=24, lineno=56)
DEBUG 2022-02-07 18:03:05,026 stack ['$phi282.0', '$328load_global.22', '$E330.23', '$AX_S332.24']
DEBUG 2022-02-07 18:03:05,026 dispatch pc=336, inst=LOAD_FAST(arg=25, lineno=56)
DEBUG 2022-02-07 18:03:05,026 stack ['$phi282.0', '$328load_global.22', '$E330.23', '$AX_S332.24', '$XD_S334.25']
DEBUG 2022-02-07 18:03:05,026 dispatch pc=338, inst=LOAD_FAST(arg=10, lineno=56)
DEBUG 2022-02-07 18:03:05,026 stack ['$phi282.0', '$328load_global.22', '$E330.23', '$AX_S332.24', '$XD_S334.25', '$D_S336.26']
DEBUG 2022-02-07 18:03:05,026 dispatch pc=340, inst=LOAD_FAST(arg=6, lineno=56)
DEBUG 2022-02-07 18:03:05,026 stack ['$phi282.0', '$328load_global.22', '$E330.23', '$AX_S332.24', '$XD_S334.25', '$D_S336.26', '$N_max338.27']
DEBUG 2022-02-07 18:03:05,026 dispatch pc=342, inst=LOAD_FAST(arg=26, lineno=56)
DEBUG 2022-02-07 18:03:05,026 stack ['$phi282.0', '$328load_global.22', '$E330.23', '$AX_S332.24', '$XD_S334.25', '$D_S336.26', '$N_max338.27', '$oddloop340.28']
DEBUG 2022-02-07 18:03:05,026 dispatch pc=344, inst=CALL_FUNCTION(arg=7, lineno=56)
DEBUG 2022-02-07 18:03:05,026 stack ['$phi282.0', '$328load_global.22', '$E330.23', '$AX_S332.24', '$XD_S334.25', '$D_S336.26', '$N_max338.27', '$oddloop340.28', '$oddVX_S342.29']
DEBUG 2022-02-07 18:03:05,026 dispatch pc=346, inst=STORE_FAST(arg=29, lineno=56)
DEBUG 2022-02-07 18:03:05,026 stack ['$phi282.0', '$344call_function.30']
DEBUG 2022-02-07 18:03:05,026 dispatch pc=348, inst=LOAD_GLOBAL(arg=13, lineno=58)
DEBUG 2022-02-07 18:03:05,026 stack ['$phi282.0']
DEBUG 2022-02-07 18:03:05,026 dispatch pc=350, inst=LOAD_CONST(arg=2, lineno=58)
DEBUG 2022-02-07 18:03:05,026 stack ['$phi282.0', '$348load_global.31']
DEBUG 2022-02-07 18:03:05,026 dispatch pc=352, inst=LOAD_FAST(arg=18, lineno=58)
DEBUG 2022-02-07 18:03:05,026 stack ['$phi282.0', '$348load_global.31', '$const350.32']
DEBUG 2022-02-07 18:03:05,026 dispatch pc=354, inst=LOAD_CONST(arg=1, lineno=58)
DEBUG 2022-02-07 18:03:05,026 stack ['$phi282.0', '$348load_global.31', '$const350.32', '$kept_edges352.33']
DEBUG 2022-02-07 18:03:05,026 dispatch pc=356, inst=BINARY_SUBSCR(arg=None, lineno=58)
DEBUG 2022-02-07 18:03:05,026 stack ['$phi282.0', '$348load_global.31', '$const350.32', '$kept_edges352.33', '$const354.34']
DEBUG 2022-02-07 18:03:05,026 dispatch pc=358, inst=BINARY_MULTIPLY(arg=None, lineno=58)
DEBUG 2022-02-07 18:03:05,026 stack ['$phi282.0', '$348load_global.31', '$const350.32', '$356binary_subscr.35']
DEBUG 2022-02-07 18:03:05,026 dispatch pc=360, inst=LOAD_CONST(arg=2, lineno=58)
DEBUG 2022-02-07 18:03:05,026 stack ['$phi282.0', '$348load_global.31', '$358binary_multiply.36']
DEBUG 2022-02-07 18:03:05,026 dispatch pc=362, inst=LOAD_FAST(arg=3, lineno=58)
DEBUG 2022-02-07 18:03:05,026 stack ['$phi282.0', '$348load_global.31', '$358binary_multiply.36', '$const360.37']
DEBUG 2022-02-07 18:03:05,026 dispatch pc=364, inst=BINARY_MULTIPLY(arg=None, lineno=58)
DEBUG 2022-02-07 18:03:05,026 stack ['$phi282.0', '$348load_global.31', '$358binary_multiply.36', '$const360.37', '$batch_max362.38']
DEBUG 2022-02-07 18:03:05,026 dispatch pc=366, inst=LOAD_FAST(arg=4, lineno=58)
DEBUG 2022-02-07 18:03:05,026 stack ['$phi282.0', '$348load_global.31', '$358binary_multiply.36', '$364binary_multiply.39']
DEBUG 2022-02-07 18:03:05,026 dispatch pc=368, inst=BINARY_ADD(arg=None, lineno=58)
DEBUG 2022-02-07 18:03:05,026 stack ['$phi282.0', '$348load_global.31', '$358binary_multiply.36', '$364binary_multiply.39', '$odd_cutoff366.40']
DEBUG 2022-02-07 18:03:05,026 dispatch pc=370, inst=LOAD_CONST(arg=3, lineno=58)
DEBUG 2022-02-07 18:03:05,026 stack ['$phi282.0', '$348load_global.31', '$358binary_multiply.36', '$368binary_add.41']
DEBUG 2022-02-07 18:03:05,026 dispatch pc=372, inst=BINARY_ADD(arg=None, lineno=58)
DEBUG 2022-02-07 18:03:05,026 stack ['$phi282.0', '$348load_global.31', '$358binary_multiply.36', '$368binary_add.41', '$const370.42']
DEBUG 2022-02-07 18:03:05,026 dispatch pc=374, inst=CALL_FUNCTION(arg=2, lineno=58)
DEBUG 2022-02-07 18:03:05,026 stack ['$phi282.0', '$348load_global.31', '$358binary_multiply.36', '$372binary_add.43']
DEBUG 2022-02-07 18:03:05,026 dispatch pc=376, inst=GET_ITER(arg=None, lineno=58)
DEBUG 2022-02-07 18:03:05,026 stack ['$phi282.0', '$374call_function.44']
DEBUG 2022-02-07 18:03:05,026 end state. edges=[Edge(pc=378, stack=('$phi282.0', '$376get_iter.45'), blockstack=(), npush=0)]
DEBUG 2022-02-07 18:03:05,026 pending: deque([State(pc_initial=282 nstack_initial=1), State(pc_initial=378 nstack_initial=2)])
DEBUG 2022-02-07 18:03:05,026 pending: deque([State(pc_initial=378 nstack_initial=2)])
DEBUG 2022-02-07 18:03:05,026 stack: ['$phi378.0', '$phi378.1']
DEBUG 2022-02-07 18:03:05,026 dispatch pc=378, inst=FOR_ITER(arg=130, lineno=58)
DEBUG 2022-02-07 18:03:05,026 stack ['$phi378.0', '$phi378.1']
DEBUG 2022-02-07 18:03:05,026 end state. edges=[Edge(pc=510, stack=('$phi378.0',), blockstack=(), npush=0), Edge(pc=380, stack=('$phi378.0', '$phi378.1', '$378for_iter.3'), blockstack=(), npush=0)]
DEBUG 2022-02-07 18:03:05,026 pending: deque([State(pc_initial=510 nstack_initial=1), State(pc_initial=380 nstack_initial=3)])
DEBUG 2022-02-07 18:03:05,042 stack: ['$phi510.0']
DEBUG 2022-02-07 18:03:05,042 dispatch pc=510, inst=LOAD_FAST(arg=15, lineno=69)
DEBUG 2022-02-07 18:03:05,042 stack ['$phi510.0']
DEBUG 2022-02-07 18:03:05,042 dispatch pc=512, inst=LOAD_FAST(arg=17, lineno=69)
DEBUG 2022-02-07 18:03:05,042 stack ['$phi510.0', '$H_batch510.1']
DEBUG 2022-02-07 18:03:05,042 dispatch pc=514, inst=INPLACE_ADD(arg=None, lineno=69)
DEBUG 2022-02-07 18:03:05,042 stack ['$phi510.0', '$H_batch510.1', '$Hnew512.2']
DEBUG 2022-02-07 18:03:05,042 dispatch pc=516, inst=STORE_FAST(arg=15, lineno=69)
DEBUG 2022-02-07 18:03:05,042 stack ['$phi510.0', '$514inplace_add.3']
DEBUG 2022-02-07 18:03:05,042 dispatch pc=518, inst=JUMP_ABSOLUTE(arg=158, lineno=69)
DEBUG 2022-02-07 18:03:05,042 stack ['$phi510.0']
DEBUG 2022-02-07 18:03:05,042 end state. edges=[Edge(pc=158, stack=('$phi510.0',), blockstack=(), npush=0)]
DEBUG 2022-02-07 18:03:05,042 pending: deque([State(pc_initial=380 nstack_initial=3), State(pc_initial=158 nstack_initial=1)])
DEBUG 2022-02-07 18:03:05,042 stack: ['$phi380.0', '$phi380.1', '$phi380.2']
DEBUG 2022-02-07 18:03:05,042 dispatch pc=380, inst=STORE_FAST(arg=30, lineno=58)
DEBUG 2022-02-07 18:03:05,042 stack ['$phi380.0', '$phi380.1', '$phi380.2']
DEBUG 2022-02-07 18:03:05,042 dispatch pc=382, inst=LOAD_FAST(arg=9, lineno=59)
DEBUG 2022-02-07 18:03:05,042 stack ['$phi380.0', '$phi380.1']
DEBUG 2022-02-07 18:03:05,042 dispatch pc=384, inst=LOAD_FAST(arg=30, lineno=59)
DEBUG 2022-02-07 18:03:05,042 stack ['$phi380.0', '$phi380.1', '$N_fixed382.3']
DEBUG 2022-02-07 18:03:05,042 dispatch pc=386, inst=BINARY_ADD(arg=None, lineno=59)
DEBUG 2022-02-07 18:03:05,042 stack ['$phi380.0', '$phi380.1', '$N_fixed382.3', '$N_det384.4']
DEBUG 2022-02-07 18:03:05,042 dispatch pc=388, inst=STORE_FAST(arg=31, lineno=59)
DEBUG 2022-02-07 18:03:05,042 stack ['$phi380.0', '$phi380.1', '$386binary_add.5']
DEBUG 2022-02-07 18:03:05,042 dispatch pc=390, inst=LOAD_CONST(arg=6, lineno=60)
DEBUG 2022-02-07 18:03:05,042 stack ['$phi380.0', '$phi380.1']
DEBUG 2022-02-07 18:03:05,042 dispatch pc=392, inst=LOAD_FAST(arg=31, lineno=60)
DEBUG 2022-02-07 18:03:05,042 stack ['$phi380.0', '$phi380.1', '$const390.6']
DEBUG 2022-02-07 18:03:05,042 dispatch pc=394, inst=LOAD_CONST(arg=2, lineno=60)
DEBUG 2022-02-07 18:03:05,042 stack ['$phi380.0', '$phi380.1', '$const390.6', '$N392.7']
DEBUG 2022-02-07 18:03:05,042 dispatch pc=396, inst=BINARY_FLOOR_DIVIDE(arg=None, lineno=60)
DEBUG 2022-02-07 18:03:05,042 stack ['$phi380.0', '$phi380.1', '$const390.6', '$N392.7', '$const394.8']
DEBUG 2022-02-07 18:03:05,042 dispatch pc=398, inst=LOAD_FAST(arg=19, lineno=60)
DEBUG 2022-02-07 18:03:05,042 stack ['$phi380.0', '$phi380.1', '$const390.6', '$396binary_floor_divide.9']
DEBUG 2022-02-07 18:03:05,042 dispatch pc=400, inst=BINARY_SUBTRACT(arg=None, lineno=60)
DEBUG 2022-02-07 18:03:05,042 stack ['$phi380.0', '$phi380.1', '$const390.6', '$396binary_floor_divide.9', '$edges_sum398.10']
DEBUG 2022-02-07 18:03:05,042 dispatch pc=402, inst=BINARY_POWER(arg=None, lineno=60)
DEBUG 2022-02-07 18:03:05,042 stack ['$phi380.0', '$phi380.1', '$const390.6', '$400binary_subtract.11']
DEBUG 2022-02-07 18:03:05,042 dispatch pc=404, inst=STORE_FAST(arg=32, lineno=60)
DEBUG 2022-02-07 18:03:05,042 stack ['$phi380.0', '$phi380.1', '$402binary_power.12']
DEBUG 2022-02-07 18:03:05,042 dispatch pc=406, inst=LOAD_FAST(arg=14, lineno=62)
DEBUG 2022-02-07 18:03:05,042 stack ['$phi380.0', '$phi380.1']
DEBUG 2022-02-07 18:03:05,042 dispatch pc=408, inst=LOAD_FAST(arg=30, lineno=62)
DEBUG 2022-02-07 18:03:05,042 stack ['$phi380.0', '$phi380.1', '$binoms406.13']
DEBUG 2022-02-07 18:03:05,042 dispatch pc=410, inst=LOAD_CONST(arg=2, lineno=62)
DEBUG 2022-02-07 18:03:05,042 stack ['$phi380.0', '$phi380.1', '$binoms406.13', '$N_det408.14']
DEBUG 2022-02-07 18:03:05,042 dispatch pc=412, inst=BINARY_FLOOR_DIVIDE(arg=None, lineno=62)
DEBUG 2022-02-07 18:03:05,042 stack ['$phi380.0', '$phi380.1', '$binoms406.13', '$N_det408.14', '$const410.15']
DEBUG 2022-02-07 18:03:05,042 dispatch pc=414, inst=LOAD_FAST(arg=18, lineno=62)
DEBUG 2022-02-07 18:03:05,042 stack ['$phi380.0', '$phi380.1', '$binoms406.13', '$412binary_floor_divide.16']
DEBUG 2022-02-07 18:03:05,042 dispatch pc=416, inst=LOAD_CONST(arg=1, lineno=62)
DEBUG 2022-02-07 18:03:05,042 stack ['$phi380.0', '$phi380.1', '$binoms406.13', '$412binary_floor_divide.16', '$kept_edges414.17']
DEBUG 2022-02-07 18:03:05,042 dispatch pc=418, inst=BINARY_SUBSCR(arg=None, lineno=62)
DEBUG 2022-02-07 18:03:05,042 stack ['$phi380.0', '$phi380.1', '$binoms406.13', '$412binary_floor_divide.16', '$kept_edges414.17', '$const416.18']
DEBUG 2022-02-07 18:03:05,042 dispatch pc=420, inst=BUILD_TUPLE(arg=2, lineno=62)
DEBUG 2022-02-07 18:03:05,042 stack ['$phi380.0', '$phi380.1', '$binoms406.13', '$412binary_floor_divide.16', '$418binary_subscr.19']
DEBUG 2022-02-07 18:03:05,042 dispatch pc=422, inst=BINARY_SUBSCR(arg=None, lineno=62)
DEBUG 2022-02-07 18:03:05,042 stack ['$phi380.0', '$phi380.1', '$binoms406.13', '$420build_tuple.20']
DEBUG 2022-02-07 18:03:05,042 dispatch pc=424, inst=LOAD_FAST(arg=20, lineno=62)
DEBUG 2022-02-07 18:03:05,042 stack ['$phi380.0', '$phi380.1', '$422binary_subscr.21']
DEBUG 2022-02-07 18:03:05,042 dispatch pc=426, inst=BINARY_MULTIPLY(arg=None, lineno=62)
DEBUG 2022-02-07 18:03:05,042 stack ['$phi380.0', '$phi380.1', '$422binary_subscr.21', '$binom_prod424.22']
DEBUG 2022-02-07 18:03:05,042 dispatch pc=428, inst=STORE_FAST(arg=33, lineno=62)
DEBUG 2022-02-07 18:03:05,042 stack ['$phi380.0', '$phi380.1', '$426binary_multiply.23']
DEBUG 2022-02-07 18:03:05,042 dispatch pc=430, inst=LOAD_FAST(arg=30, lineno=64)
DEBUG 2022-02-07 18:03:05,042 stack ['$phi380.0', '$phi380.1']
DEBUG 2022-02-07 18:03:05,042 dispatch pc=432, inst=LOAD_CONST(arg=2, lineno=64)
DEBUG 2022-02-07 18:03:05,042 stack ['$phi380.0', '$phi380.1', '$N_det430.24']
DEBUG 2022-02-07 18:03:05,042 dispatch pc=434, inst=BINARY_MODULO(arg=None, lineno=64)
DEBUG 2022-02-07 18:03:05,042 stack ['$phi380.0', '$phi380.1', '$N_det430.24', '$const432.25']
DEBUG 2022-02-07 18:03:05,042 dispatch pc=436, inst=LOAD_CONST(arg=1, lineno=64)
DEBUG 2022-02-07 18:03:05,042 stack ['$phi380.0', '$phi380.1', '$434binary_modulo.26']
DEBUG 2022-02-07 18:03:05,042 dispatch pc=438, inst=COMPARE_OP(arg=2, lineno=64)
DEBUG 2022-02-07 18:03:05,042 stack ['$phi380.0', '$phi380.1', '$434binary_modulo.26', '$const436.27']
DEBUG 2022-02-07 18:03:05,042 dispatch pc=440, inst=POP_JUMP_IF_FALSE(arg=478, lineno=64)
DEBUG 2022-02-07 18:03:05,042 stack ['$phi380.0', '$phi380.1', '$438compare_op.28']
DEBUG 2022-02-07 18:03:05,042 end state. edges=[Edge(pc=444, stack=('$phi380.0', '$phi380.1'), blockstack=(), npush=0), Edge(pc=478, stack=('$phi380.0', '$phi380.1'), blockstack=(), npush=0)]
DEBUG 2022-02-07 18:03:05,042 pending: deque([State(pc_initial=158 nstack_initial=1), State(pc_initial=444 nstack_initial=2), State(pc_initial=478 nstack_initial=2)])
DEBUG 2022-02-07 18:03:05,042 pending: deque([State(pc_initial=444 nstack_initial=2), State(pc_initial=478 nstack_initial=2)])
DEBUG 2022-02-07 18:03:05,042 stack: ['$phi444.0', '$phi444.1']
DEBUG 2022-02-07 18:03:05,042 dispatch pc=444, inst=LOAD_FAST(arg=17, lineno=65)
DEBUG 2022-02-07 18:03:05,042 stack ['$phi444.0', '$phi444.1']
DEBUG 2022-02-07 18:03:05,042 dispatch pc=446, inst=LOAD_FAST(arg=30, lineno=65)
DEBUG 2022-02-07 18:03:05,058 stack ['$phi444.0', '$phi444.1', '$Hnew444.2']
DEBUG 2022-02-07 18:03:05,058 dispatch pc=448, inst=DUP_TOP_TWO(arg=None, lineno=65)
DEBUG 2022-02-07 18:03:05,058 stack ['$phi444.0', '$phi444.1', '$Hnew444.2', '$N_det446.3']
DEBUG 2022-02-07 18:03:05,058 dispatch pc=450, inst=BINARY_SUBSCR(arg=None, lineno=65)
DEBUG 2022-02-07 18:03:05,058 stack ['$phi444.0', '$phi444.1', '$Hnew444.2', '$N_det446.3', '$448dup_top_two.4', '$448dup_top_two.5']
DEBUG 2022-02-07 18:03:05,058 dispatch pc=452, inst=LOAD_FAST(arg=33, lineno=65)
DEBUG 2022-02-07 18:03:05,058 stack ['$phi444.0', '$phi444.1', '$Hnew444.2', '$N_det446.3', '$450binary_subscr.6']
DEBUG 2022-02-07 18:03:05,058 dispatch pc=454, inst=LOAD_FAST(arg=32, lineno=65)
DEBUG 2022-02-07 18:03:05,058 stack ['$phi444.0', '$phi444.1', '$Hnew444.2', '$N_det446.3', '$450binary_subscr.6', '$n_det_binom_prod452.7']
DEBUG 2022-02-07 18:03:05,058 dispatch pc=456, inst=BINARY_MULTIPLY(arg=None, lineno=65)
DEBUG 2022-02-07 18:03:05,058 stack ['$phi444.0', '$phi444.1', '$Hnew444.2', '$N_det446.3', '$450binary_subscr.6', '$n_det_binom_prod452.7', '$plus_minus454.8']
DEBUG 2022-02-07 18:03:05,058 dispatch pc=458, inst=LOAD_FAST(arg=28, lineno=65)
DEBUG 2022-02-07 18:03:05,058 stack ['$phi444.0', '$phi444.1', '$Hnew444.2', '$N_det446.3', '$450binary_subscr.6', '$456binary_multiply.9']
DEBUG 2022-02-07 18:03:05,058 dispatch pc=460, inst=LOAD_FAST(arg=31, lineno=65)
DEBUG 2022-02-07 18:03:05,058 stack ['$phi444.0', '$phi444.1', '$Hnew444.2', '$N_det446.3', '$450binary_subscr.6', '$456binary_multiply.9', '$f_even458.10']
DEBUG 2022-02-07 18:03:05,058 dispatch pc=462, inst=LOAD_CONST(arg=2, lineno=65)
DEBUG 2022-02-07 18:03:05,058 stack ['$phi444.0', '$phi444.1', '$Hnew444.2', '$N_det446.3', '$450binary_subscr.6', '$456binary_multiply.9', '$f_even458.10', '$N460.11']
DEBUG 2022-02-07 18:03:05,058 dispatch pc=464, inst=BINARY_FLOOR_DIVIDE(arg=None, lineno=65)
DEBUG 2022-02-07 18:03:05,058 stack ['$phi444.0', '$phi444.1', '$Hnew444.2', '$N_det446.3', '$450binary_subscr.6', '$456binary_multiply.9', '$f_even458.10', '$N460.11', '$const462.12']
DEBUG 2022-02-07 18:03:05,058 dispatch pc=466, inst=BINARY_SUBSCR(arg=None, lineno=65)
DEBUG 2022-02-07 18:03:05,058 stack ['$phi444.0', '$phi444.1', '$Hnew444.2', '$N_det446.3', '$450binary_subscr.6', '$456binary_multiply.9', '$f_even458.10', '$464binary_floor_divide.13']
DEBUG 2022-02-07 18:03:05,058 dispatch pc=468, inst=BINARY_MULTIPLY(arg=None, lineno=65)
DEBUG 2022-02-07 18:03:05,058 stack ['$phi444.0', '$phi444.1', '$Hnew444.2', '$N_det446.3', '$450binary_subscr.6', '$456binary_multiply.9', '$466binary_subscr.14']
DEBUG 2022-02-07 18:03:05,058 dispatch pc=470, inst=INPLACE_ADD(arg=None, lineno=65)
DEBUG 2022-02-07 18:03:05,058 stack ['$phi444.0', '$phi444.1', '$Hnew444.2', '$N_det446.3', '$450binary_subscr.6', '$468binary_multiply.15']
DEBUG 2022-02-07 18:03:05,058 dispatch pc=472, inst=ROT_THREE(arg=None, lineno=65)
DEBUG 2022-02-07 18:03:05,058 stack ['$phi444.0', '$phi444.1', '$Hnew444.2', '$N_det446.3', '$470inplace_add.16']
DEBUG 2022-02-07 18:03:05,058 dispatch pc=474, inst=STORE_SUBSCR(arg=None, lineno=65)
DEBUG 2022-02-07 18:03:05,058 stack ['$phi444.0', '$phi444.1', '$470inplace_add.16', '$Hnew444.2', '$N_det446.3']
DEBUG 2022-02-07 18:03:05,058 dispatch pc=476, inst=JUMP_FORWARD(arg=28, lineno=65)
DEBUG 2022-02-07 18:03:05,058 stack ['$phi444.0', '$phi444.1']
DEBUG 2022-02-07 18:03:05,058 end state. edges=[Edge(pc=506, stack=('$phi444.0', '$phi444.1'), blockstack=(), npush=0)]
DEBUG 2022-02-07 18:03:05,058 pending: deque([State(pc_initial=478 nstack_initial=2), State(pc_initial=506 nstack_initial=2)])
DEBUG 2022-02-07 18:03:05,064 stack: ['$phi478.0', '$phi478.1']
DEBUG 2022-02-07 18:03:05,064 dispatch pc=478, inst=LOAD_FAST(arg=17, lineno=67)
DEBUG 2022-02-07 18:03:05,064 stack ['$phi478.0', '$phi478.1']
DEBUG 2022-02-07 18:03:05,064 dispatch pc=480, inst=LOAD_FAST(arg=30, lineno=67)
DEBUG 2022-02-07 18:03:05,064 stack ['$phi478.0', '$phi478.1', '$Hnew478.2']
DEBUG 2022-02-07 18:03:05,064 dispatch pc=482, inst=DUP_TOP_TWO(arg=None, lineno=67)
DEBUG 2022-02-07 18:03:05,064 stack ['$phi478.0', '$phi478.1', '$Hnew478.2', '$N_det480.3']
DEBUG 2022-02-07 18:03:05,064 dispatch pc=484, inst=BINARY_SUBSCR(arg=None, lineno=67)
DEBUG 2022-02-07 18:03:05,064 stack ['$phi478.0', '$phi478.1', '$Hnew478.2', '$N_det480.3', '$482dup_top_two.4', '$482dup_top_two.5']
DEBUG 2022-02-07 18:03:05,064 dispatch pc=486, inst=LOAD_FAST(arg=33, lineno=67)
DEBUG 2022-02-07 18:03:05,064 stack ['$phi478.0', '$phi478.1', '$Hnew478.2', '$N_det480.3', '$484binary_subscr.6']
DEBUG 2022-02-07 18:03:05,064 dispatch pc=488, inst=LOAD_FAST(arg=32, lineno=67)
DEBUG 2022-02-07 18:03:05,064 stack ['$phi478.0', '$phi478.1', '$Hnew478.2', '$N_det480.3', '$484binary_subscr.6', '$n_det_binom_prod486.7']
DEBUG 2022-02-07 18:03:05,064 dispatch pc=490, inst=BINARY_MULTIPLY(arg=None, lineno=67)
DEBUG 2022-02-07 18:03:05,064 stack ['$phi478.0', '$phi478.1', '$Hnew478.2', '$N_det480.3', '$484binary_subscr.6', '$n_det_binom_prod486.7', '$plus_minus488.8']
DEBUG 2022-02-07 18:03:05,064 dispatch pc=492, inst=LOAD_FAST(arg=29, lineno=67)
DEBUG 2022-02-07 18:03:05,064 stack ['$phi478.0', '$phi478.1', '$Hnew478.2', '$N_det480.3', '$484binary_subscr.6', '$490binary_multiply.9']
DEBUG 2022-02-07 18:03:05,064 dispatch pc=494, inst=LOAD_FAST(arg=31, lineno=67)
DEBUG 2022-02-07 18:03:05,064 stack ['$phi478.0', '$phi478.1', '$Hnew478.2', '$N_det480.3', '$484binary_subscr.6', '$490binary_multiply.9', '$f_odd492.10']
DEBUG 2022-02-07 18:03:05,064 dispatch pc=496, inst=BINARY_SUBSCR(arg=None, lineno=67)
DEBUG 2022-02-07 18:03:05,064 stack ['$phi478.0', '$phi478.1', '$Hnew478.2', '$N_det480.3', '$484binary_subscr.6', '$490binary_multiply.9', '$f_odd492.10', '$N494.11']
DEBUG 2022-02-07 18:03:05,064 dispatch pc=498, inst=BINARY_MULTIPLY(arg=None, lineno=67)
DEBUG 2022-02-07 18:03:05,064 stack ['$phi478.0', '$phi478.1', '$Hnew478.2', '$N_det480.3', '$484binary_subscr.6', '$490binary_multiply.9', '$496binary_subscr.12']
DEBUG 2022-02-07 18:03:05,064 dispatch pc=500, inst=INPLACE_ADD(arg=None, lineno=67)
DEBUG 2022-02-07 18:03:05,064 stack ['$phi478.0', '$phi478.1', '$Hnew478.2', '$N_det480.3', '$484binary_subscr.6', '$498binary_multiply.13']
DEBUG 2022-02-07 18:03:05,064 dispatch pc=502, inst=ROT_THREE(arg=None, lineno=67)
DEBUG 2022-02-07 18:03:05,064 stack ['$phi478.0', '$phi478.1', '$Hnew478.2', '$N_det480.3', '$500inplace_add.14']
DEBUG 2022-02-07 18:03:05,064 dispatch pc=504, inst=STORE_SUBSCR(arg=None, lineno=67)
DEBUG 2022-02-07 18:03:05,064 stack ['$phi478.0', '$phi478.1', '$500inplace_add.14', '$Hnew478.2', '$N_det480.3']
DEBUG 2022-02-07 18:03:05,064 end state. edges=[Edge(pc=506, stack=('$phi478.0', '$phi478.1'), blockstack=(), npush=0)]
DEBUG 2022-02-07 18:03:05,064 pending: deque([State(pc_initial=506 nstack_initial=2), State(pc_initial=506 nstack_initial=2)])
DEBUG 2022-02-07 18:03:05,064 stack: ['$phi506.0', '$phi506.1']
DEBUG 2022-02-07 18:03:05,064 dispatch pc=506, inst=JUMP_ABSOLUTE(arg=378, lineno=67)
DEBUG 2022-02-07 18:03:05,064 stack ['$phi506.0', '$phi506.1']
DEBUG 2022-02-07 18:03:05,064 end state. edges=[Edge(pc=378, stack=('$phi506.0', '$phi506.1'), blockstack=(), npush=0)]
DEBUG 2022-02-07 18:03:05,064 pending: deque([State(pc_initial=506 nstack_initial=2), State(pc_initial=378 nstack_initial=2)])
DEBUG 2022-02-07 18:03:05,064 pending: deque([State(pc_initial=378 nstack_initial=2)])
DEBUG 2022-02-07 18:03:05,064 -------------------------Prune PHIs-------------------------
DEBUG 2022-02-07 18:03:05,064 Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=158 nstack_initial=1): {'$phi158.0'},
             State(pc_initial=162 nstack_initial=2): {'$phi162.1'},
             State(pc_initial=228 nstack_initial=2): {'$phi228.1'},
             State(pc_initial=230 nstack_initial=3): {'$phi230.2'},
             State(pc_initial=258 nstack_initial=1): set(),
             State(pc_initial=264 nstack_initial=1): set(),
             State(pc_initial=278 nstack_initial=1): set(),
             State(pc_initial=282 nstack_initial=1): set(),
             State(pc_initial=378 nstack_initial=2): {'$phi378.1'},
             State(pc_initial=380 nstack_initial=3): {'$phi380.2'},
             State(pc_initial=444 nstack_initial=2): set(),
             State(pc_initial=478 nstack_initial=2): set(),
             State(pc_initial=506 nstack_initial=2): set(),
             State(pc_initial=510 nstack_initial=1): set(),
             State(pc_initial=520 nstack_initial=0): set(),
             State(pc_initial=526 nstack_initial=0): set(),
             State(pc_initial=540 nstack_initial=1): {'$phi540.0'},
             State(pc_initial=542 nstack_initial=2): {'$phi542.1'},
             State(pc_initial=580 nstack_initial=0): set()})
DEBUG 2022-02-07 18:03:05,064 defmap: {'$phi158.0': State(pc_initial=0 nstack_initial=0),
 '$phi162.1': State(pc_initial=158 nstack_initial=1),
 '$phi228.1': State(pc_initial=162 nstack_initial=2),
 '$phi230.2': State(pc_initial=228 nstack_initial=2),
 '$phi378.1': State(pc_initial=282 nstack_initial=1),
 '$phi380.2': State(pc_initial=378 nstack_initial=2),
 '$phi540.0': State(pc_initial=526 nstack_initial=0),
 '$phi542.1': State(pc_initial=540 nstack_initial=1)}
DEBUG 2022-02-07 18:03:05,064 phismap: defaultdict(<class 'set'>,
            {'$phi158.0': {('$156get_iter.68',
                            State(pc_initial=0 nstack_initial=0)),
                           ('$phi510.0',
                            State(pc_initial=510 nstack_initial=1))},
             '$phi162.0': {('$phi158.0',
                            State(pc_initial=158 nstack_initial=1))},
             '$phi162.1': {('$158for_iter.2',
                            State(pc_initial=158 nstack_initial=1))},
             '$phi228.0': {('$phi162.0',
                            State(pc_initial=162 nstack_initial=2)),
                           ('$phi230.0',
                            State(pc_initial=230 nstack_initial=3))},
             '$phi228.1': {('$226get_iter.29',
                            State(pc_initial=162 nstack_initial=2)),
                           ('$phi230.1',
                            State(pc_initial=230 nstack_initial=3))},
             '$phi230.0': {('$phi228.0',
                            State(pc_initial=228 nstack_initial=2))},
             '$phi230.1': {('$phi228.1',
                            State(pc_initial=228 nstack_initial=2))},
             '$phi230.2': {('$228for_iter.3',
                            State(pc_initial=228 nstack_initial=2))},
             '$phi258.0': {('$phi228.0',
                            State(pc_initial=228 nstack_initial=2))},
             '$phi264.0': {('$phi258.0',
                            State(pc_initial=258 nstack_initial=1))},
             '$phi278.0': {('$phi258.0',
                            State(pc_initial=258 nstack_initial=1))},
             '$phi282.0': {('$phi264.0',
                            State(pc_initial=264 nstack_initial=1)),
                           ('$phi278.0',
                            State(pc_initial=278 nstack_initial=1))},
             '$phi378.0': {('$phi282.0',
                            State(pc_initial=282 nstack_initial=1)),
                           ('$phi506.0',
                            State(pc_initial=506 nstack_initial=2))},
             '$phi378.1': {('$376get_iter.45',
                            State(pc_initial=282 nstack_initial=1)),
                           ('$phi506.1',
                            State(pc_initial=506 nstack_initial=2))},
             '$phi380.0': {('$phi378.0',
                            State(pc_initial=378 nstack_initial=2))},
             '$phi380.1': {('$phi378.1',
                            State(pc_initial=378 nstack_initial=2))},
             '$phi380.2': {('$378for_iter.3',
                            State(pc_initial=378 nstack_initial=2))},
             '$phi444.0': {('$phi380.0',
                            State(pc_initial=380 nstack_initial=3))},
             '$phi444.1': {('$phi380.1',
                            State(pc_initial=380 nstack_initial=3))},
             '$phi478.0': {('$phi380.0',
                            State(pc_initial=380 nstack_initial=3))},
             '$phi478.1': {('$phi380.1',
                            State(pc_initial=380 nstack_initial=3))},
             '$phi506.0': {('$phi444.0',
                            State(pc_initial=444 nstack_initial=2)),
                           ('$phi478.0',
                            State(pc_initial=478 nstack_initial=2))},
             '$phi506.1': {('$phi444.1',
                            State(pc_initial=444 nstack_initial=2)),
                           ('$phi478.1',
                            State(pc_initial=478 nstack_initial=2))},
             '$phi510.0': {('$phi378.0',
                            State(pc_initial=378 nstack_initial=2))},
             '$phi540.0': {('$538get_iter.6',
                            State(pc_initial=526 nstack_initial=0)),
                           ('$phi542.0',
                            State(pc_initial=542 nstack_initial=2))},
             '$phi542.0': {('$phi540.0',
                            State(pc_initial=540 nstack_initial=1))},
             '$phi542.1': {('$540for_iter.2',
                            State(pc_initial=540 nstack_initial=1))}})
DEBUG 2022-02-07 18:03:05,080 changing phismap: defaultdict(<class 'set'>,
            {'$phi158.0': {('$156get_iter.68',
                            State(pc_initial=0 nstack_initial=0)),
                           ('$phi378.0',
                            State(pc_initial=378 nstack_initial=2))},
             '$phi162.0': {('$156get_iter.68',
                            State(pc_initial=0 nstack_initial=0)),
                           ('$phi378.0',
                            State(pc_initial=378 nstack_initial=2))},
             '$phi162.1': {('$158for_iter.2',
                            State(pc_initial=158 nstack_initial=1))},
             '$phi228.0': {('$156get_iter.68',
                            State(pc_initial=0 nstack_initial=0)),
                           ('$phi228.0',
                            State(pc_initial=228 nstack_initial=2)),
                           ('$phi378.0',
                            State(pc_initial=378 nstack_initial=2))},
             '$phi228.1': {('$226get_iter.29',
                            State(pc_initial=162 nstack_initial=2)),
                           ('$phi228.1',
                            State(pc_initial=228 nstack_initial=2))},
             '$phi230.0': {('$156get_iter.68',
                            State(pc_initial=0 nstack_initial=0)),
                           ('$phi378.0',
                            State(pc_initial=378 nstack_initial=2))},
             '$phi230.1': {('$226get_iter.29',
                            State(pc_initial=162 nstack_initial=2))},
             '$phi230.2': {('$228for_iter.3',
                            State(pc_initial=228 nstack_initial=2))},
             '$phi258.0': {('$156get_iter.68',
                            State(pc_initial=0 nstack_initial=0)),
                           ('$phi378.0',
                            State(pc_initial=378 nstack_initial=2))},
             '$phi264.0': {('$156get_iter.68',
                            State(pc_initial=0 nstack_initial=0)),
                           ('$phi378.0',
                            State(pc_initial=378 nstack_initial=2))},
             '$phi278.0': {('$156get_iter.68',
                            State(pc_initial=0 nstack_initial=0)),
                           ('$phi378.0',
                            State(pc_initial=378 nstack_initial=2))},
             '$phi282.0': {('$156get_iter.68',
                            State(pc_initial=0 nstack_initial=0)),
                           ('$phi378.0',
                            State(pc_initial=378 nstack_initial=2))},
             '$phi378.0': {('$156get_iter.68',
                            State(pc_initial=0 nstack_initial=0)),
                           ('$phi378.0',
                            State(pc_initial=378 nstack_initial=2)),
                           ('$phi444.0',
                            State(pc_initial=444 nstack_initial=2)),
                           ('$phi478.0',
                            State(pc_initial=478 nstack_initial=2))},
             '$phi378.1': {('$376get_iter.45',
                            State(pc_initial=282 nstack_initial=1)),
                           ('$phi444.1',
                            State(pc_initial=444 nstack_initial=2)),
                           ('$phi478.1',
                            State(pc_initial=478 nstack_initial=2))},
             '$phi380.0': {('$156get_iter.68',
                            State(pc_initial=0 nstack_initial=0)),
                           ('$phi444.0',
                            State(pc_initial=444 nstack_initial=2)),
                           ('$phi478.0',
                            State(pc_initial=478 nstack_initial=2))},
             '$phi380.1': {('$376get_iter.45',
                            State(pc_initial=282 nstack_initial=1)),
                           ('$phi444.1',
                            State(pc_initial=444 nstack_initial=2)),
                           ('$phi478.1',
                            State(pc_initial=478 nstack_initial=2))},
             '$phi380.2': {('$378for_iter.3',
                            State(pc_initial=378 nstack_initial=2))},
             '$phi444.0': {('$156get_iter.68',
                            State(pc_initial=0 nstack_initial=0)),
                           ('$phi444.0',
                            State(pc_initial=444 nstack_initial=2)),
                           ('$phi478.0',
                            State(pc_initial=478 nstack_initial=2))},
             '$phi444.1': {('$376get_iter.45',
                            State(pc_initial=282 nstack_initial=1)),
                           ('$phi444.1',
                            State(pc_initial=444 nstack_initial=2)),
                           ('$phi478.1',
                            State(pc_initial=478 nstack_initial=2))},
             '$phi478.0': {('$156get_iter.68',
                            State(pc_initial=0 nstack_initial=0)),
                           ('$phi444.0',
                            State(pc_initial=444 nstack_initial=2)),
                           ('$phi478.0',
                            State(pc_initial=478 nstack_initial=2))},
             '$phi478.1': {('$376get_iter.45',
                            State(pc_initial=282 nstack_initial=1)),
                           ('$phi444.1',
                            State(pc_initial=444 nstack_initial=2)),
                           ('$phi478.1',
                            State(pc_initial=478 nstack_initial=2))},
             '$phi506.0': {('$156get_iter.68',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi506.1': {('$376get_iter.45',
                            State(pc_initial=282 nstack_initial=1))},
             '$phi510.0': {('$156get_iter.68',
                            State(pc_initial=0 nstack_initial=0)),
                           ('$phi444.0',
                            State(pc_initial=444 nstack_initial=2)),
                           ('$phi478.0',
                            State(pc_initial=478 nstack_initial=2))},
             '$phi540.0': {('$538get_iter.6',
                            State(pc_initial=526 nstack_initial=0)),
                           ('$phi540.0',
                            State(pc_initial=540 nstack_initial=1))},
             '$phi542.0': {('$538get_iter.6',
                            State(pc_initial=526 nstack_initial=0))},
             '$phi542.1': {('$540for_iter.2',
                            State(pc_initial=540 nstack_initial=1))}})
DEBUG 2022-02-07 18:03:05,080 changing phismap: defaultdict(<class 'set'>,
            {'$phi158.0': {('$156get_iter.68',
                            State(pc_initial=0 nstack_initial=0)),
                           ('$phi444.0',
                            State(pc_initial=444 nstack_initial=2)),
                           ('$phi478.0',
                            State(pc_initial=478 nstack_initial=2))},
             '$phi162.0': {('$156get_iter.68',
                            State(pc_initial=0 nstack_initial=0)),
                           ('$phi444.0',
                            State(pc_initial=444 nstack_initial=2)),
                           ('$phi478.0',
                            State(pc_initial=478 nstack_initial=2))},
             '$phi162.1': {('$158for_iter.2',
                            State(pc_initial=158 nstack_initial=1))},
             '$phi228.0': {('$156get_iter.68',
                            State(pc_initial=0 nstack_initial=0)),
                           ('$phi444.0',
                            State(pc_initial=444 nstack_initial=2)),
                           ('$phi478.0',
                            State(pc_initial=478 nstack_initial=2))},
             '$phi228.1': {('$226get_iter.29',
                            State(pc_initial=162 nstack_initial=2))},
             '$phi230.0': {('$156get_iter.68',
                            State(pc_initial=0 nstack_initial=0)),
                           ('$phi444.0',
                            State(pc_initial=444 nstack_initial=2)),
                           ('$phi478.0',
                            State(pc_initial=478 nstack_initial=2))},
             '$phi230.1': {('$226get_iter.29',
                            State(pc_initial=162 nstack_initial=2))},
             '$phi230.2': {('$228for_iter.3',
                            State(pc_initial=228 nstack_initial=2))},
             '$phi258.0': {('$156get_iter.68',
                            State(pc_initial=0 nstack_initial=0)),
                           ('$phi444.0',
                            State(pc_initial=444 nstack_initial=2)),
                           ('$phi478.0',
                            State(pc_initial=478 nstack_initial=2))},
             '$phi264.0': {('$156get_iter.68',
                            State(pc_initial=0 nstack_initial=0)),
                           ('$phi444.0',
                            State(pc_initial=444 nstack_initial=2)),
                           ('$phi478.0',
                            State(pc_initial=478 nstack_initial=2))},
             '$phi278.0': {('$156get_iter.68',
                            State(pc_initial=0 nstack_initial=0)),
                           ('$phi444.0',
                            State(pc_initial=444 nstack_initial=2)),
                           ('$phi478.0',
                            State(pc_initial=478 nstack_initial=2))},
             '$phi282.0': {('$156get_iter.68',
                            State(pc_initial=0 nstack_initial=0)),
                           ('$phi444.0',
                            State(pc_initial=444 nstack_initial=2)),
                           ('$phi478.0',
                            State(pc_initial=478 nstack_initial=2))},
             '$phi378.0': {('$156get_iter.68',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi378.1': {('$376get_iter.45',
                            State(pc_initial=282 nstack_initial=1))},
             '$phi380.0': {('$156get_iter.68',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi380.1': {('$376get_iter.45',
                            State(pc_initial=282 nstack_initial=1))},
             '$phi380.2': {('$378for_iter.3',
                            State(pc_initial=378 nstack_initial=2))},
             '$phi444.0': {('$156get_iter.68',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi444.1': {('$376get_iter.45',
                            State(pc_initial=282 nstack_initial=1))},
             '$phi478.0': {('$156get_iter.68',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi478.1': {('$376get_iter.45',
                            State(pc_initial=282 nstack_initial=1))},
             '$phi506.0': {('$156get_iter.68',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi506.1': {('$376get_iter.45',
                            State(pc_initial=282 nstack_initial=1))},
             '$phi510.0': {('$156get_iter.68',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi540.0': {('$538get_iter.6',
                            State(pc_initial=526 nstack_initial=0))},
             '$phi542.0': {('$538get_iter.6',
                            State(pc_initial=526 nstack_initial=0))},
             '$phi542.1': {('$540for_iter.2',
                            State(pc_initial=540 nstack_initial=1))}})
DEBUG 2022-02-07 18:03:05,095 changing phismap: defaultdict(<class 'set'>,
            {'$phi158.0': {('$156get_iter.68',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi162.0': {('$156get_iter.68',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi162.1': {('$158for_iter.2',
                            State(pc_initial=158 nstack_initial=1))},
             '$phi228.0': {('$156get_iter.68',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi228.1': {('$226get_iter.29',
                            State(pc_initial=162 nstack_initial=2))},
             '$phi230.0': {('$156get_iter.68',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi230.1': {('$226get_iter.29',
                            State(pc_initial=162 nstack_initial=2))},
             '$phi230.2': {('$228for_iter.3',
                            State(pc_initial=228 nstack_initial=2))},
             '$phi258.0': {('$156get_iter.68',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi264.0': {('$156get_iter.68',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi278.0': {('$156get_iter.68',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi282.0': {('$156get_iter.68',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi378.0': {('$156get_iter.68',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi378.1': {('$376get_iter.45',
                            State(pc_initial=282 nstack_initial=1))},
             '$phi380.0': {('$156get_iter.68',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi380.1': {('$376get_iter.45',
                            State(pc_initial=282 nstack_initial=1))},
             '$phi380.2': {('$378for_iter.3',
                            State(pc_initial=378 nstack_initial=2))},
             '$phi444.0': {('$156get_iter.68',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi444.1': {('$376get_iter.45',
                            State(pc_initial=282 nstack_initial=1))},
             '$phi478.0': {('$156get_iter.68',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi478.1': {('$376get_iter.45',
                            State(pc_initial=282 nstack_initial=1))},
             '$phi506.0': {('$156get_iter.68',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi506.1': {('$376get_iter.45',
                            State(pc_initial=282 nstack_initial=1))},
             '$phi510.0': {('$156get_iter.68',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi540.0': {('$538get_iter.6',
                            State(pc_initial=526 nstack_initial=0))},
             '$phi542.0': {('$538get_iter.6',
                            State(pc_initial=526 nstack_initial=0))},
             '$phi542.1': {('$540for_iter.2',
                            State(pc_initial=540 nstack_initial=1))}})
DEBUG 2022-02-07 18:03:05,095 changing phismap: defaultdict(<class 'set'>,
            {'$phi158.0': {('$156get_iter.68',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi162.0': {('$156get_iter.68',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi162.1': {('$158for_iter.2',
                            State(pc_initial=158 nstack_initial=1))},
             '$phi228.0': {('$156get_iter.68',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi228.1': {('$226get_iter.29',
                            State(pc_initial=162 nstack_initial=2))},
             '$phi230.0': {('$156get_iter.68',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi230.1': {('$226get_iter.29',
                            State(pc_initial=162 nstack_initial=2))},
             '$phi230.2': {('$228for_iter.3',
                            State(pc_initial=228 nstack_initial=2))},
             '$phi258.0': {('$156get_iter.68',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi264.0': {('$156get_iter.68',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi278.0': {('$156get_iter.68',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi282.0': {('$156get_iter.68',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi378.0': {('$156get_iter.68',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi378.1': {('$376get_iter.45',
                            State(pc_initial=282 nstack_initial=1))},
             '$phi380.0': {('$156get_iter.68',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi380.1': {('$376get_iter.45',
                            State(pc_initial=282 nstack_initial=1))},
             '$phi380.2': {('$378for_iter.3',
                            State(pc_initial=378 nstack_initial=2))},
             '$phi444.0': {('$156get_iter.68',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi444.1': {('$376get_iter.45',
                            State(pc_initial=282 nstack_initial=1))},
             '$phi478.0': {('$156get_iter.68',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi478.1': {('$376get_iter.45',
                            State(pc_initial=282 nstack_initial=1))},
             '$phi506.0': {('$156get_iter.68',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi506.1': {('$376get_iter.45',
                            State(pc_initial=282 nstack_initial=1))},
             '$phi510.0': {('$156get_iter.68',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi540.0': {('$538get_iter.6',
                            State(pc_initial=526 nstack_initial=0))},
             '$phi542.0': {('$538get_iter.6',
                            State(pc_initial=526 nstack_initial=0))},
             '$phi542.1': {('$540for_iter.2',
                            State(pc_initial=540 nstack_initial=1))}})
DEBUG 2022-02-07 18:03:05,095 keep phismap: {'$phi158.0': {('$156get_iter.68', State(pc_initial=0 nstack_initial=0))},
 '$phi162.1': {('$158for_iter.2', State(pc_initial=158 nstack_initial=1))},
 '$phi228.1': {('$226get_iter.29', State(pc_initial=162 nstack_initial=2))},
 '$phi230.2': {('$228for_iter.3', State(pc_initial=228 nstack_initial=2))},
 '$phi378.1': {('$376get_iter.45', State(pc_initial=282 nstack_initial=1))},
 '$phi380.2': {('$378for_iter.3', State(pc_initial=378 nstack_initial=2))},
 '$phi540.0': {('$538get_iter.6', State(pc_initial=526 nstack_initial=0))},
 '$phi542.1': {('$540for_iter.2', State(pc_initial=540 nstack_initial=1))}}
DEBUG 2022-02-07 18:03:05,111 new_out: defaultdict(<class 'dict'>,
            {State(pc_initial=0 nstack_initial=0): {'$phi158.0': '$156get_iter.68'},
             State(pc_initial=158 nstack_initial=1): {'$phi162.1': '$158for_iter.2'},
             State(pc_initial=162 nstack_initial=2): {'$phi228.1': '$226get_iter.29'},
             State(pc_initial=228 nstack_initial=2): {'$phi230.2': '$228for_iter.3'},
             State(pc_initial=282 nstack_initial=1): {'$phi378.1': '$376get_iter.45'},
             State(pc_initial=378 nstack_initial=2): {'$phi380.2': '$378for_iter.3'},
             State(pc_initial=526 nstack_initial=0): {'$phi540.0': '$538get_iter.6'},
             State(pc_initial=540 nstack_initial=1): {'$phi542.1': '$540for_iter.2'}})
DEBUG 2022-02-07 18:03:05,111 ----------------------DONE Prune PHIs-----------------------
DEBUG 2022-02-07 18:03:05,111 block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$D2.0'}), (4, {'res': '$const4.1'}), (6, {'index': '$const4.1', 'target': '$D2.0', 'res': '$6binary_subscr.2'}), (8, {'value': '$6binary_subscr.2'}), (10, {'res': '$A10.3'}), (12, {'res': '$const12.4'}), (14, {'res': '$const14.5'}), (16, {'res': '$const16.6'}), (18, {'start': '$const14.5', 'stop': '$const16.6', 'step': None, 'res': '$18build_slice.8', 'slicevar': '$18build_slice.7'}), (20, {'items': ['$const12.4', '$18build_slice.8'], 'res': '$20build_tuple.9'}), (22, {'index': '$20build_tuple.9', 'target': '$A10.3', 'res': '$22binary_subscr.10'}), (24, {'value': '$22binary_subscr.10'}), (26, {'res': '$A26.11'}), (28, {'item': '$A26.11', 'res': '$28load_attr.12'}), (30, {'res': '$const30.13'}), (32, {'index': '$const30.13', 'target': '$28load_attr.12', 'res': '$32binary_subscr.14'}), (34, {'value': '$32binary_subscr.14'}), (36, {'res': '$const36.15'}), (38, {'res': '$fixed_edge_reps38.16'}), (40, {'item': '$fixed_edge_reps38.16', 'res': '$40load_method.17'}), (42, {'func': '$40load_method.17', 'args': [], 'res': '$42call_method.18'}), (44, {'lhs': '$const36.15', 'rhs': '$42call_method.18', 'res': '$44binary_multiply.19'}), (46, {'value': '$44binary_multiply.19'}), (48, {'res': '$N_fixed48.20'}), (50, {'res': '$const50.21'}), (52, {'res': '$batch_max52.22'}), (54, {'lhs': '$const50.21', 'rhs': '$batch_max52.22', 'res': '$54binary_multiply.23'}), (56, {'lhs': '$N_fixed48.20', 'rhs': '$54binary_multiply.23', 'res': '$56binary_add.24'}), (58, {'res': '$odd_cutoff58.25'}), (60, {'lhs': '$56binary_add.24', 'rhs': '$odd_cutoff58.25', 'res': '$60binary_add.26'}), (62, {'value': '$60binary_add.26'}), (64, {'res': '$64load_global.27'}), (66, {'item': '$64load_global.27', 'res': '$66load_method.28'}), (68, {'res': '$68load_global.29'}), (70, {'item': '$68load_global.29', 'res': '$70load_method.30'}), (72, {'res': '$batch_max72.31'}), (74, {'items': ['$batch_max72.31'], 'res': '$74build_list.32'}), (76, {'func': '$70load_method.30', 'args': ['$74build_list.32'], 'res': '$76call_method.33'}), (78, {'res': '$fixed_edge_reps78.34'}), (80, {'items': ['$76call_method.33', '$fixed_edge_reps78.34'], 'res': '$80build_tuple.35'}), (82, {'func': '$66load_method.28', 'args': ['$80build_tuple.35'], 'res': '$82call_method.36'}), (84, {'value': '$82call_method.36'}), (86, {'res': '$86load_global.37'}), (88, {'item': '$86load_global.37', 'res': '$88load_method.38'}), (90, {'res': '$edge_reps90.39'}), (92, {'res': '$const92.40'}), (94, {'lhs': '$edge_reps90.39', 'rhs': '$const92.40', 'res': '$94binary_add.41'}), (96, {'func': '$88load_method.38', 'args': ['$94binary_add.41'], 'res': '$96call_method.42'}), (98, {'value': '$96call_method.42'}), (100, {'res': '$edge_reps100.43'}), (102, {'item': '$edge_reps100.43', 'res': '$102load_method.44'}), (104, {'func': '$102load_method.44', 'args': [], 'res': '$104call_method.45'}), (106, {'res': '$odd_cutoff106.46'}), (108, {'lhs': '$104call_method.45', 'rhs': '$odd_cutoff106.46', 'res': '$108binary_add.47'}), (110, {'value': '$108binary_add.47'}), (112, {'res': '$112load_global.48'}), (114, {'res': '$max_binom114.49'}), (116, {'func': '$112load_global.48', 'args': ['$max_binom114.49'], 'res': '$116call_function.50'}), (118, {'value': '$116call_function.50'}), (120, {'res': '$120load_global.51'}), (122, {'item': '$120load_global.51', 'res': '$122load_attr.52'}), (124, {'res': '$const124.53'}), (126, {'res': '$batch_max126.54'}), (128, {'lhs': '$const124.53', 'rhs': '$batch_max126.54', 'res': '$128binary_multiply.55'}), (130, {'res': '$odd_cutoff130.56'}), (132, {'lhs': '$128binary_multiply.55', 'rhs': '$odd_cutoff130.56', 'res': '$132binary_add.57'}), (134, {'res': '$const134.58'}), (136, {'lhs': '$132binary_add.57', 'rhs': '$const134.58', 'res': '$136binary_add.59'}), (138, {'res': '$138load_global.60'}), (140, {'item': '$138load_global.60', 'res': '$140load_attr.61'}), (142, {'res': '$const142.62'}), (144, {'func': '$122load_attr.52', 'args': ['$136binary_add.59', '$140load_attr.61'], 'names': '$const142.62', 'res': '$144call_function_kw.63'}), (146, {'value': '$144call_function_kw.63'}), (148, {'res': '$148load_global.64'}), (150, {'item': '$148load_global.64', 'res': '$150load_method.65'}), (152, {'res': '$steps152.66'}), (154, {'func': '$150load_method.65', 'args': ['$steps152.66'], 'res': '$154call_method.67'}), (156, {'value': '$154call_method.67', 'res': '$156get_iter.68'})), outgoing_phis={'$phi158.0': '$156get_iter.68'}, blockstack=(), active_try_block=None, outgoing_edgepushed={158: ('$156get_iter.68',)})
DEBUG 2022-02-07 18:03:05,111 block_infos State(pc_initial=158 nstack_initial=1):
AdaptBlockInfo(insts=((158, {'iterator': '$phi158.0', 'pair': '$158for_iter.1', 'indval': '$158for_iter.2', 'pred': '$158for_iter.3'}),), outgoing_phis={'$phi162.1': '$158for_iter.2'}, blockstack=(), active_try_block=None, outgoing_edgepushed={520: (), 162: ('$phi158.0', '$158for_iter.2')})
DEBUG 2022-02-07 18:03:05,111 block_infos State(pc_initial=162 nstack_initial=2):
AdaptBlockInfo(insts=((162, {'value': '$phi162.1'}), (164, {'res': '$164load_global.2'}), (166, {'item': '$164load_global.2', 'res': '$166load_attr.3'}), (168, {'res': '$const168.4'}), (170, {'res': '$batch_max170.5'}), (172, {'lhs': '$const168.4', 'rhs': '$batch_max170.5', 'res': '$172binary_multiply.6'}), (174, {'res': '$odd_cutoff174.7'}), (176, {'lhs': '$172binary_multiply.6', 'rhs': '$odd_cutoff174.7', 'res': '$176binary_add.8'}), (178, {'res': '$const178.9'}), (180, {'lhs': '$176binary_add.8', 'rhs': '$const178.9', 'res': '$180binary_add.10'}), (182, {'res': '$182load_global.11'}), (184, {'item': '$182load_global.11', 'res': '$184load_attr.12'}), (186, {'res': '$const186.13'}), (188, {'func': '$166load_attr.3', 'args': ['$180binary_add.10', '$184load_attr.12'], 'names': '$const186.13', 'res': '$188call_function_kw.14'}), (190, {'value': '$188call_function_kw.14'}), (192, {'res': '$192load_global.15'}), (194, {'res': '$j194.16'}), (196, {'res': '$edge_reps196.17'}), (198, {'func': '$192load_global.15', 'args': ['$j194.16', '$edge_reps196.17'], 'res': '$198call_function.18'}), (200, {'value': '$198call_function.18'}), (202, {'res': '$kept_edges202.19'}), (204, {'item': '$kept_edges202.19', 'res': '$204load_method.20'}), (206, {'func': '$204load_method.20', 'args': [], 'res': '$206call_method.21'}), (208, {'value': '$206call_method.21'}), (210, {'res': '$const210.22'}), (212, {'value': '$const210.22'}), (214, {'res': '$214load_global.23'}), (216, {'res': '$const216.24'}), (218, {'res': '$n218.25'}), (220, {'res': '$const220.26'}), (222, {'lhs': '$n218.25', 'rhs': '$const220.26', 'res': '$222binary_floor_divide.27'}), (224, {'func': '$214load_global.23', 'args': ['$const216.24', '$222binary_floor_divide.27'], 'res': '$224call_function.28'}), (226, {'value': '$224call_function.28', 'res': '$226get_iter.29'})), outgoing_phis={'$phi228.1': '$226get_iter.29'}, blockstack=(), active_try_block=None, outgoing_edgepushed={228: ('$phi162.0', '$226get_iter.29')})
DEBUG 2022-02-07 18:03:05,111 block_infos State(pc_initial=228 nstack_initial=2):
AdaptBlockInfo(insts=((228, {'iterator': '$phi228.1', 'pair': '$228for_iter.2', 'indval': '$228for_iter.3', 'pred': '$228for_iter.4'}),), outgoing_phis={'$phi230.2': '$228for_iter.3'}, blockstack=(), active_try_block=None, outgoing_edgepushed={258: ('$phi228.0',), 230: ('$phi228.0', '$phi228.1', '$228for_iter.3')})
DEBUG 2022-02-07 18:03:05,111 block_infos State(pc_initial=230 nstack_initial=3):
AdaptBlockInfo(insts=((230, {'value': '$phi230.2'}), (232, {'res': '$binom_prod232.3'}), (234, {'res': '$binoms234.4'}), (236, {'res': '$edge_reps236.5'}), (238, {'res': '$i238.6'}), (240, {'index': '$i238.6', 'target': '$edge_reps236.5', 'res': '$240binary_subscr.7'}), (242, {'res': '$kept_edges242.8'}), (244, {'res': '$i244.9'}), (246, {'index': '$i244.9', 'target': '$kept_edges242.8', 'res': '$246binary_subscr.10'}), (248, {'items': ['$240binary_subscr.7', '$246binary_subscr.10'], 'res': '$248build_tuple.11'}), (250, {'index': '$248build_tuple.11', 'target': '$binoms234.4', 'res': '$250binary_subscr.12'}), (252, {'lhs': '$binom_prod232.3', 'rhs': '$250binary_subscr.12', 'res': '$252inplace_multiply.13'}), (254, {'value': '$252inplace_multiply.13'}), (256, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={228: ('$phi230.0', '$phi230.1')})
DEBUG 2022-02-07 18:03:05,111 block_infos State(pc_initial=258 nstack_initial=1):
AdaptBlockInfo(insts=((258, {'res': '$glynn258.1'}), (260, {'pred': '$glynn258.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={264: ('$phi258.0',), 278: ('$phi258.0',)})
DEBUG 2022-02-07 18:03:05,111 block_infos State(pc_initial=264 nstack_initial=1):
AdaptBlockInfo(insts=((264, {'res': '$const264.1'}), (266, {'res': '$kept_edges266.2'}), (268, {'lhs': '$const264.1', 'rhs': '$kept_edges266.2', 'res': '$268binary_multiply.3'}), (270, {'res': '$edge_reps270.4'}), (272, {'lhs': '$268binary_multiply.3', 'rhs': '$edge_reps270.4', 'res': '$272binary_subtract.5'}), (274, {'value': '$272binary_subtract.5'}), (276, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={282: ('$phi264.0',)})
DEBUG 2022-02-07 18:03:05,111 block_infos State(pc_initial=278 nstack_initial=1):
AdaptBlockInfo(insts=((278, {'res': '$kept_edges278.1'}), (280, {'value': '$kept_edges278.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={282: ('$phi278.0',)})
DEBUG 2022-02-07 18:03:05,111 block_infos State(pc_initial=282 nstack_initial=1):
AdaptBlockInfo(insts=((282, {'res': '$282load_global.1'}), (284, {'res': '$delta284.2'}), (286, {'res': '$A286.3'}), (288, {'res': '$D288.4'}), (290, {'res': '$oddV290.5'}), (292, {'func': '$282load_global.1', 'args': ['$delta284.2', '$A286.3', '$D288.4', '$oddV290.5'], 'res': '$292call_function.6'}), (294, {'iterable': '$292call_function.6', 'stores': ['$294unpack_sequence.7', '$294unpack_sequence.8', '$294unpack_sequence.9', '$294unpack_sequence.10'], 'tupleobj': '$294unpack_sequence.11'}), (296, {'value': '$294unpack_sequence.7'}), (298, {'value': '$294unpack_sequence.8'}), (300, {'value': '$294unpack_sequence.9'}), (302, {'value': '$294unpack_sequence.10'}), (304, {'res': '$304load_global.12'}), (306, {'res': '$AX_S306.13'}), (308, {'func': '$304load_global.12', 'args': ['$AX_S306.13'], 'res': '$308call_function.14'}), (310, {'value': '$308call_function.14'}), (312, {'res': '$312load_global.15'}), (314, {'res': '$E314.16'}), (316, {'res': '$AX_S316.17'}), (318, {'res': '$XD_S318.18'}), (320, {'res': '$D_S320.19'}), (322, {'res': '$N_max322.20'}), (324, {'func': '$312load_global.15', 'args': ['$E314.16', '$AX_S316.17', '$XD_S318.18', '$D_S320.19', '$N_max322.20'], 'res': '$324call_function.21'}), (326, {'value': '$324call_function.21'}), (328, {'res': '$328load_global.22'}), (330, {'res': '$E330.23'}), (332, {'res': '$AX_S332.24'}), (334, {'res': '$XD_S334.25'}), (336, {'res': '$D_S336.26'}), (338, {'res': '$N_max338.27'}), (340, {'res': '$oddloop340.28'}), (342, {'res': '$oddVX_S342.29'}), (344, {'func': '$328load_global.22', 'args': ['$E330.23', '$AX_S332.24', '$XD_S334.25', '$D_S336.26', '$N_max338.27', '$oddloop340.28', '$oddVX_S342.29'], 'res': '$344call_function.30'}), (346, {'value': '$344call_function.30'}), (348, {'res': '$348load_global.31'}), (350, {'res': '$const350.32'}), (352, {'res': '$kept_edges352.33'}), (354, {'res': '$const354.34'}), (356, {'index': '$const354.34', 'target': '$kept_edges352.33', 'res': '$356binary_subscr.35'}), (358, {'lhs': '$const350.32', 'rhs': '$356binary_subscr.35', 'res': '$358binary_multiply.36'}), (360, {'res': '$const360.37'}), (362, {'res': '$batch_max362.38'}), (364, {'lhs': '$const360.37', 'rhs': '$batch_max362.38', 'res': '$364binary_multiply.39'}), (366, {'res': '$odd_cutoff366.40'}), (368, {'lhs': '$364binary_multiply.39', 'rhs': '$odd_cutoff366.40', 'res': '$368binary_add.41'}), (370, {'res': '$const370.42'}), (372, {'lhs': '$368binary_add.41', 'rhs': '$const370.42', 'res': '$372binary_add.43'}), (374, {'func': '$348load_global.31', 'args': ['$358binary_multiply.36', '$372binary_add.43'], 'res': '$374call_function.44'}), (376, {'value': '$374call_function.44', 'res': '$376get_iter.45'})), outgoing_phis={'$phi378.1': '$376get_iter.45'}, blockstack=(), active_try_block=None, outgoing_edgepushed={378: ('$phi282.0', '$376get_iter.45')})
DEBUG 2022-02-07 18:03:05,111 block_infos State(pc_initial=378 nstack_initial=2):
AdaptBlockInfo(insts=((378, {'iterator': '$phi378.1', 'pair': '$378for_iter.2', 'indval': '$378for_iter.3', 'pred': '$378for_iter.4'}),), outgoing_phis={'$phi380.2': '$378for_iter.3'}, blockstack=(), active_try_block=None, outgoing_edgepushed={510: ('$phi378.0',), 380: ('$phi378.0', '$phi378.1', '$378for_iter.3')})
DEBUG 2022-02-07 18:03:05,111 block_infos State(pc_initial=380 nstack_initial=3):
AdaptBlockInfo(insts=((380, {'value': '$phi380.2'}), (382, {'res': '$N_fixed382.3'}), (384, {'res': '$N_det384.4'}), (386, {'lhs': '$N_fixed382.3', 'rhs': '$N_det384.4', 'res': '$386binary_add.5'}), (388, {'value': '$386binary_add.5'}), (390, {'res': '$const390.6'}), (392, {'res': '$N392.7'}), (394, {'res': '$const394.8'}), (396, {'lhs': '$N392.7', 'rhs': '$const394.8', 'res': '$396binary_floor_divide.9'}), (398, {'res': '$edges_sum398.10'}), (400, {'lhs': '$396binary_floor_divide.9', 'rhs': '$edges_sum398.10', 'res': '$400binary_subtract.11'}), (402, {'lhs': '$const390.6', 'rhs': '$400binary_subtract.11', 'res': '$402binary_power.12'}), (404, {'value': '$402binary_power.12'}), (406, {'res': '$binoms406.13'}), (408, {'res': '$N_det408.14'}), (410, {'res': '$const410.15'}), (412, {'lhs': '$N_det408.14', 'rhs': '$const410.15', 'res': '$412binary_floor_divide.16'}), (414, {'res': '$kept_edges414.17'}), (416, {'res': '$const416.18'}), (418, {'index': '$const416.18', 'target': '$kept_edges414.17', 'res': '$418binary_subscr.19'}), (420, {'items': ['$412binary_floor_divide.16', '$418binary_subscr.19'], 'res': '$420build_tuple.20'}), (422, {'index': '$420build_tuple.20', 'target': '$binoms406.13', 'res': '$422binary_subscr.21'}), (424, {'res': '$binom_prod424.22'}), (426, {'lhs': '$422binary_subscr.21', 'rhs': '$binom_prod424.22', 'res': '$426binary_multiply.23'}), (428, {'value': '$426binary_multiply.23'}), (430, {'res': '$N_det430.24'}), (432, {'res': '$const432.25'}), (434, {'lhs': '$N_det430.24', 'rhs': '$const432.25', 'res': '$434binary_modulo.26'}), (436, {'res': '$const436.27'}), (438, {'lhs': '$434binary_modulo.26', 'rhs': '$const436.27', 'res': '$438compare_op.28'}), (440, {'pred': '$438compare_op.28'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={444: ('$phi380.0', '$phi380.1'), 478: ('$phi380.0', '$phi380.1')})
DEBUG 2022-02-07 18:03:05,111 block_infos State(pc_initial=444 nstack_initial=2):
AdaptBlockInfo(insts=((444, {'res': '$Hnew444.2'}), (446, {'res': '$N_det446.3'}), (448, {'orig': ['$Hnew444.2', '$N_det446.3'], 'duped': ['$448dup_top_two.4', '$448dup_top_two.5']}), (450, {'index': '$448dup_top_two.5', 'target': '$448dup_top_two.4', 'res': '$450binary_subscr.6'}), (452, {'res': '$n_det_binom_prod452.7'}), (454, {'res': '$plus_minus454.8'}), (456, {'lhs': '$n_det_binom_prod452.7', 'rhs': '$plus_minus454.8', 'res': '$456binary_multiply.9'}), (458, {'res': '$f_even458.10'}), (460, {'res': '$N460.11'}), (462, {'res': '$const462.12'}), (464, {'lhs': '$N460.11', 'rhs': '$const462.12', 'res': '$464binary_floor_divide.13'}), (466, {'index': '$464binary_floor_divide.13', 'target': '$f_even458.10', 'res': '$466binary_subscr.14'}), (468, {'lhs': '$456binary_multiply.9', 'rhs': '$466binary_subscr.14', 'res': '$468binary_multiply.15'}), (470, {'lhs': '$450binary_subscr.6', 'rhs': '$468binary_multiply.15', 'res': '$470inplace_add.16'}), (474, {'target': '$Hnew444.2', 'index': '$N_det446.3', 'value': '$470inplace_add.16'}), (476, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={506: ('$phi444.0', '$phi444.1')})
DEBUG 2022-02-07 18:03:05,111 block_infos State(pc_initial=478 nstack_initial=2):
AdaptBlockInfo(insts=((478, {'res': '$Hnew478.2'}), (480, {'res': '$N_det480.3'}), (482, {'orig': ['$Hnew478.2', '$N_det480.3'], 'duped': ['$482dup_top_two.4', '$482dup_top_two.5']}), (484, {'index': '$482dup_top_two.5', 'target': '$482dup_top_two.4', 'res': '$484binary_subscr.6'}), (486, {'res': '$n_det_binom_prod486.7'}), (488, {'res': '$plus_minus488.8'}), (490, {'lhs': '$n_det_binom_prod486.7', 'rhs': '$plus_minus488.8', 'res': '$490binary_multiply.9'}), (492, {'res': '$f_odd492.10'}), (494, {'res': '$N494.11'}), (496, {'index': '$N494.11', 'target': '$f_odd492.10', 'res': '$496binary_subscr.12'}), (498, {'lhs': '$490binary_multiply.9', 'rhs': '$496binary_subscr.12', 'res': '$498binary_multiply.13'}), (500, {'lhs': '$484binary_subscr.6', 'rhs': '$498binary_multiply.13', 'res': '$500inplace_add.14'}), (504, {'target': '$Hnew478.2', 'index': '$N_det480.3', 'value': '$500inplace_add.14'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={506: ('$phi478.0', '$phi478.1')})
DEBUG 2022-02-07 18:03:05,111 block_infos State(pc_initial=506 nstack_initial=2):
AdaptBlockInfo(insts=((506, {}),), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={378: ('$phi506.0', '$phi506.1')})
DEBUG 2022-02-07 18:03:05,111 block_infos State(pc_initial=510 nstack_initial=1):
AdaptBlockInfo(insts=((510, {'res': '$H_batch510.1'}), (512, {'res': '$Hnew512.2'}), (514, {'lhs': '$H_batch510.1', 'rhs': '$Hnew512.2', 'res': '$514inplace_add.3'}), (516, {'value': '$514inplace_add.3'}), (518, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={158: ('$phi510.0',)})
DEBUG 2022-02-07 18:03:05,111 block_infos State(pc_initial=520 nstack_initial=0):
AdaptBlockInfo(insts=((520, {'res': '$glynn520.0'}), (522, {'pred': '$glynn520.0'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={526: (), 580: ()})
DEBUG 2022-02-07 18:03:05,111 block_infos State(pc_initial=526 nstack_initial=0):
AdaptBlockInfo(insts=((526, {'res': '$526load_global.0'}), (528, {'res': '$H_batch528.1'}), (530, {'item': '$H_batch528.1', 'res': '$530load_attr.2'}), (532, {'res': '$const532.3'}), (534, {'index': '$const532.3', 'target': '$530load_attr.2', 'res': '$534binary_subscr.4'}), (536, {'func': '$526load_global.0', 'args': ['$534binary_subscr.4'], 'res': '$536call_function.5'}), (538, {'value': '$536call_function.5', 'res': '$538get_iter.6'})), outgoing_phis={'$phi540.0': '$538get_iter.6'}, blockstack=(), active_try_block=None, outgoing_edgepushed={540: ('$538get_iter.6',)})
DEBUG 2022-02-07 18:03:05,111 block_infos State(pc_initial=540 nstack_initial=1):
AdaptBlockInfo(insts=((540, {'iterator': '$phi540.0', 'pair': '$540for_iter.1', 'indval': '$540for_iter.2', 'pred': '$540for_iter.3'}),), outgoing_phis={'$phi542.1': '$540for_iter.2'}, blockstack=(), active_try_block=None, outgoing_edgepushed={580: (), 542: ('$phi540.0', '$540for_iter.2')})
DEBUG 2022-02-07 18:03:05,111 block_infos State(pc_initial=542 nstack_initial=2):
AdaptBlockInfo(insts=((542, {'value': '$phi542.1'}), (544, {'res': '$N_fixed544.2'}), (546, {'res': '$j546.3'}), (548, {'lhs': '$N_fixed544.2', 'rhs': '$j546.3', 'res': '$548binary_add.4'}), (550, {'value': '$548binary_add.4'}), (552, {'res': '$H_batch552.5'}), (554, {'res': '$j554.6'}), (556, {'orig': ['$H_batch552.5', '$j554.6'], 'duped': ['$556dup_top_two.7', '$556dup_top_two.8']}), (558, {'index': '$556dup_top_two.8', 'target': '$556dup_top_two.7', 'res': '$558binary_subscr.9'}), (560, {'res': '$const560.10'}), (562, {'res': '$x562.11'}), (564, {'res': '$const564.12'}), (566, {'lhs': '$x562.11', 'rhs': '$const564.12', 'res': '$566binary_floor_divide.13'}), (568, {'lhs': '$const560.10', 'rhs': '$566binary_floor_divide.13', 'res': '$568binary_power.14'}), (570, {'lhs': '$558binary_subscr.9', 'rhs': '$568binary_power.14', 'res': '$570inplace_multiply.15'}), (574, {'target': '$H_batch552.5', 'index': '$j554.6', 'value': '$570inplace_multiply.15'}), (576, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={540: ('$phi542.0',)})
DEBUG 2022-02-07 18:03:05,111 block_infos State(pc_initial=580 nstack_initial=0):
AdaptBlockInfo(insts=((580, {'res': '$H_batch580.0'}), (582, {'retval': '$H_batch580.0', 'castval': '$582return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG 2022-02-07 18:03:05,127 label 0:
    A = arg(0, name=A)                       ['A']
    D = arg(1, name=D)                       ['D']
    fixed_edge_reps = arg(2, name=fixed_edge_reps) ['fixed_edge_reps']
    batch_max = arg(3, name=batch_max)       ['batch_max']
    odd_cutoff = arg(4, name=odd_cutoff)     ['odd_cutoff']
    glynn = arg(5, name=glynn)               ['glynn']
    $const4.1 = const(int, 0)                ['$const4.1']
    oddloop = getitem(value=D, index=$const4.1, fn=<built-in function getitem>) ['$const4.1', 'D', 'oddloop']
    $const12.4 = const(int, 0)               ['$const12.4']
    $const14.5 = const(NoneType, None)       ['$const14.5']
    $const16.6 = const(NoneType, None)       ['$const16.6']
    $18build_slice.7 = global(slice: <class 'slice'>) ['$18build_slice.7']
    $18build_slice.8 = call $18build_slice.7($const14.5, $const16.6, func=$18build_slice.7, args=(Var($const14.5, loop_hafnian_batch.py:21), Var($const16.6, loop_hafnian_batch.py:21)), kws=(), vararg=None, target=None) ['$18build_slice.7', '$18build_slice.8', '$const14.5', '$const16.6']
    $20build_tuple.9 = build_tuple(items=[Var($const12.4, loop_hafnian_batch.py:21), Var($18build_slice.8, loop_hafnian_batch.py:21)]) ['$18build_slice.8', '$20build_tuple.9', '$const12.4']
    oddV = getitem(value=A, index=$20build_tuple.9, fn=<built-in function getitem>) ['$20build_tuple.9', 'A', 'oddV']
    $28load_attr.12 = getattr(value=A, attr=shape) ['$28load_attr.12', 'A']
    $const30.13 = const(int, 0)              ['$const30.13']
    n = getitem(value=$28load_attr.12, index=$const30.13, fn=<built-in function getitem>) ['$28load_attr.12', '$const30.13', 'n']
    $const36.15 = const(int, 2)              ['$const36.15']
    $40load_method.17 = getattr(value=fixed_edge_reps, attr=sum) ['$40load_method.17', 'fixed_edge_reps']
    $42call_method.18 = call $40load_method.17(func=$40load_method.17, args=[], kws=(), vararg=None, target=None) ['$40load_method.17', '$42call_method.18']
    N_fixed = $const36.15 * $42call_method.18 ['$42call_method.18', '$const36.15', 'N_fixed']
    $const50.21 = const(int, 2)              ['$const50.21']
    $54binary_multiply.23 = $const50.21 * batch_max ['$54binary_multiply.23', '$const50.21', 'batch_max']
    $56binary_add.24 = N_fixed + $54binary_multiply.23 ['$54binary_multiply.23', '$56binary_add.24', 'N_fixed']
    N_max = $56binary_add.24 + odd_cutoff    ['$56binary_add.24', 'N_max', 'odd_cutoff']
    $64load_global.27 = global(np: <module 'numpy' from 'C:\\Users\\zl4821\\Anaconda3\\envs\\GBS\\lib\\site-packages\\numpy\\__init__.py'>) ['$64load_global.27']
    $66load_method.28 = getattr(value=$64load_global.27, attr=concatenate) ['$64load_global.27', '$66load_method.28']
    $68load_global.29 = global(np: <module 'numpy' from 'C:\\Users\\zl4821\\Anaconda3\\envs\\GBS\\lib\\site-packages\\numpy\\__init__.py'>) ['$68load_global.29']
    $70load_method.30 = getattr(value=$68load_global.29, attr=array) ['$68load_global.29', '$70load_method.30']
    $74build_list.32 = build_list(items=[Var(batch_max, loop_hafnian_batch.py:20)]) ['$74build_list.32', 'batch_max']
    $76call_method.33 = call $70load_method.30($74build_list.32, func=$70load_method.30, args=[Var($74build_list.32, loop_hafnian_batch.py:28)], kws=(), vararg=None, target=None) ['$70load_method.30', '$74build_list.32', '$76call_method.33']
    $80build_tuple.35 = build_tuple(items=[Var($76call_method.33, loop_hafnian_batch.py:28), Var(fixed_edge_reps, loop_hafnian_batch.py:20)]) ['$76call_method.33', '$80build_tuple.35', 'fixed_edge_reps']
    edge_reps = call $66load_method.28($80build_tuple.35, func=$66load_method.28, args=[Var($80build_tuple.35, loop_hafnian_batch.py:28)], kws=(), vararg=None, target=None) ['$66load_method.28', '$80build_tuple.35', 'edge_reps']
    $86load_global.37 = global(np: <module 'numpy' from 'C:\\Users\\zl4821\\Anaconda3\\envs\\GBS\\lib\\site-packages\\numpy\\__init__.py'>) ['$86load_global.37']
    $88load_method.38 = getattr(value=$86load_global.37, attr=prod) ['$86load_global.37', '$88load_method.38']
    $const92.40 = const(int, 1)              ['$const92.40']
    $94binary_add.41 = edge_reps + $const92.40 ['$94binary_add.41', '$const92.40', 'edge_reps']
    steps = call $88load_method.38($94binary_add.41, func=$88load_method.38, args=[Var($94binary_add.41, loop_hafnian_batch.py:29)], kws=(), vararg=None, target=None) ['$88load_method.38', '$94binary_add.41', 'steps']
    $102load_method.44 = getattr(value=edge_reps, attr=max) ['$102load_method.44', 'edge_reps']
    $104call_method.45 = call $102load_method.44(func=$102load_method.44, args=[], kws=(), vararg=None, target=None) ['$102load_method.44', '$104call_method.45']
    max_binom = $104call_method.45 + odd_cutoff ['$104call_method.45', 'max_binom', 'odd_cutoff']
    $112load_global.48 = global(precompute_binoms: CPUDispatcher(<function precompute_binoms at 0x00000196AE6F6CA0>)) ['$112load_global.48']
    binoms = call $112load_global.48(max_binom, func=$112load_global.48, args=[Var(max_binom, loop_hafnian_batch.py:31)], kws=(), vararg=None, target=None) ['$112load_global.48', 'binoms', 'max_binom']
    $120load_global.51 = global(np: <module 'numpy' from 'C:\\Users\\zl4821\\Anaconda3\\envs\\GBS\\lib\\site-packages\\numpy\\__init__.py'>) ['$120load_global.51']
    $122load_attr.52 = getattr(value=$120load_global.51, attr=zeros) ['$120load_global.51', '$122load_attr.52']
    $const124.53 = const(int, 2)             ['$const124.53']
    $128binary_multiply.55 = $const124.53 * batch_max ['$128binary_multiply.55', '$const124.53', 'batch_max']
    $132binary_add.57 = $128binary_multiply.55 + odd_cutoff ['$128binary_multiply.55', '$132binary_add.57', 'odd_cutoff']
    $const134.58 = const(int, 1)             ['$const134.58']
    $136binary_add.59 = $132binary_add.57 + $const134.58 ['$132binary_add.57', '$136binary_add.59', '$const134.58']
    $138load_global.60 = global(np: <module 'numpy' from 'C:\\Users\\zl4821\\Anaconda3\\envs\\GBS\\lib\\site-packages\\numpy\\__init__.py'>) ['$138load_global.60']
    $140load_attr.61 = getattr(value=$138load_global.60, attr=complex128) ['$138load_global.60', '$140load_attr.61']
    H_batch = call $122load_attr.52($136binary_add.59, func=$122load_attr.52, args=[Var($136binary_add.59, loop_hafnian_batch.py:34)], kws=[('dtype', Var($140load_attr.61, loop_hafnian_batch.py:34))], vararg=None, target=None) ['$122load_attr.52', '$136binary_add.59', '$140load_attr.61', 'H_batch']
    $148load_global.64 = global(numba: <module 'numba' from 'C:\\Users\\zl4821\\Anaconda3\\envs\\GBS\\lib\\site-packages\\numba\\__init__.py'>) ['$148load_global.64']
    $150load_method.65 = getattr(value=$148load_global.64, attr=prange) ['$148load_global.64', '$150load_method.65']
    $154call_method.67 = call $150load_method.65(steps, func=$150load_method.65, args=[Var(steps, loop_hafnian_batch.py:29)], kws=(), vararg=None, target=None) ['$150load_method.65', '$154call_method.67', 'steps']
    $156get_iter.68 = getiter(value=$154call_method.67) ['$154call_method.67', '$156get_iter.68']
    $phi158.0 = $156get_iter.68              ['$156get_iter.68', '$phi158.0']
    jump 158                                 []
label 158:
    $158for_iter.1 = iternext(value=$phi158.0) ['$158for_iter.1', '$phi158.0']
    $158for_iter.2 = pair_first(value=$158for_iter.1) ['$158for_iter.1', '$158for_iter.2']
    $158for_iter.3 = pair_second(value=$158for_iter.1) ['$158for_iter.1', '$158for_iter.3']
    $phi162.1 = $158for_iter.2               ['$158for_iter.2', '$phi162.1']
    branch $158for_iter.3, 162, 520          ['$158for_iter.3']
label 162:
    j = $phi162.1                            ['$phi162.1', 'j']
    $164load_global.2 = global(np: <module 'numpy' from 'C:\\Users\\zl4821\\Anaconda3\\envs\\GBS\\lib\\site-packages\\numpy\\__init__.py'>) ['$164load_global.2']
    $166load_attr.3 = getattr(value=$164load_global.2, attr=zeros) ['$164load_global.2', '$166load_attr.3']
    $const168.4 = const(int, 2)              ['$const168.4']
    $172binary_multiply.6 = $const168.4 * batch_max ['$172binary_multiply.6', '$const168.4', 'batch_max']
    $176binary_add.8 = $172binary_multiply.6 + odd_cutoff ['$172binary_multiply.6', '$176binary_add.8', 'odd_cutoff']
    $const178.9 = const(int, 1)              ['$const178.9']
    $180binary_add.10 = $176binary_add.8 + $const178.9 ['$176binary_add.8', '$180binary_add.10', '$const178.9']
    $182load_global.11 = global(np: <module 'numpy' from 'C:\\Users\\zl4821\\Anaconda3\\envs\\GBS\\lib\\site-packages\\numpy\\__init__.py'>) ['$182load_global.11']
    $184load_attr.12 = getattr(value=$182load_global.11, attr=complex128) ['$182load_global.11', '$184load_attr.12']
    Hnew = call $166load_attr.3($180binary_add.10, func=$166load_attr.3, args=[Var($180binary_add.10, loop_hafnian_batch.py:37)], kws=[('dtype', Var($184load_attr.12, loop_hafnian_batch.py:37))], vararg=None, target=None) ['$166load_attr.3', '$180binary_add.10', '$184load_attr.12', 'Hnew']
    $192load_global.15 = global(find_kept_edges: CPUDispatcher(<function find_kept_edges at 0x00000196AE71E160>)) ['$192load_global.15']
    kept_edges = call $192load_global.15(j, edge_reps, func=$192load_global.15, args=[Var(j, loop_hafnian_batch.py:35), Var(edge_reps, loop_hafnian_batch.py:28)], kws=(), vararg=None, target=None) ['$192load_global.15', 'edge_reps', 'j', 'kept_edges']
    $204load_method.20 = getattr(value=kept_edges, attr=sum) ['$204load_method.20', 'kept_edges']
    edges_sum = call $204load_method.20(func=$204load_method.20, args=[], kws=(), vararg=None, target=None) ['$204load_method.20', 'edges_sum']
    binom_prod = const(float, 1.0)           ['binom_prod']
    $214load_global.23 = global(range: <class 'range'>) ['$214load_global.23']
    $const216.24 = const(int, 1)             ['$const216.24']
    $const220.26 = const(int, 2)             ['$const220.26']
    $222binary_floor_divide.27 = n // $const220.26 ['$222binary_floor_divide.27', '$const220.26', 'n']
    $224call_function.28 = call $214load_global.23($const216.24, $222binary_floor_divide.27, func=$214load_global.23, args=[Var($const216.24, loop_hafnian_batch.py:43), Var($222binary_floor_divide.27, loop_hafnian_batch.py:43)], kws=(), vararg=None, target=None) ['$214load_global.23', '$222binary_floor_divide.27', '$224call_function.28', '$const216.24']
    $226get_iter.29 = getiter(value=$224call_function.28) ['$224call_function.28', '$226get_iter.29']
    $phi228.1 = $226get_iter.29              ['$226get_iter.29', '$phi228.1']
    jump 228                                 []
label 228:
    $228for_iter.2 = iternext(value=$phi228.1) ['$228for_iter.2', '$phi228.1']
    $228for_iter.3 = pair_first(value=$228for_iter.2) ['$228for_iter.2', '$228for_iter.3']
    $228for_iter.4 = pair_second(value=$228for_iter.2) ['$228for_iter.2', '$228for_iter.4']
    $phi230.2 = $228for_iter.3               ['$228for_iter.3', '$phi230.2']
    branch $228for_iter.4, 230, 258          ['$228for_iter.4']
label 230:
    i = $phi230.2                            ['$phi230.2', 'i']
    $240binary_subscr.7 = getitem(value=edge_reps, index=i, fn=<built-in function getitem>) ['$240binary_subscr.7', 'edge_reps', 'i']
    $246binary_subscr.10 = getitem(value=kept_edges, index=i, fn=<built-in function getitem>) ['$246binary_subscr.10', 'i', 'kept_edges']
    $248build_tuple.11 = build_tuple(items=[Var($240binary_subscr.7, loop_hafnian_batch.py:44), Var($246binary_subscr.10, loop_hafnian_batch.py:44)]) ['$240binary_subscr.7', '$246binary_subscr.10', '$248build_tuple.11']
    $250binary_subscr.12 = getitem(value=binoms, index=$248build_tuple.11, fn=<built-in function getitem>) ['$248build_tuple.11', '$250binary_subscr.12', 'binoms']
    $252inplace_multiply.13 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=binom_prod, rhs=$250binary_subscr.12, static_lhs=Undefined, static_rhs=Undefined) ['$250binary_subscr.12', '$252inplace_multiply.13', 'binom_prod']
    binom_prod = $252inplace_multiply.13     ['$252inplace_multiply.13', 'binom_prod']
    jump 228                                 []
label 258:
    bool260 = global(bool: <class 'bool'>)   ['bool260']
    $260pred = call bool260(glynn, func=bool260, args=(Var(glynn, loop_hafnian_batch.py:20),), kws=(), vararg=None, target=None) ['$260pred', 'bool260', 'glynn']
    branch $260pred, 264, 278                ['$260pred']
label 264:
    $const264.1 = const(int, 2)              ['$const264.1']
    $268binary_multiply.3 = $const264.1 * kept_edges ['$268binary_multiply.3', '$const264.1', 'kept_edges']
    delta = $268binary_multiply.3 - edge_reps ['$268binary_multiply.3', 'delta', 'edge_reps']
    jump 282                                 []
label 278:
    delta = kept_edges                       ['delta', 'kept_edges']
    jump 282                                 []
label 282:
    $282load_global.1 = global(get_submatrices: CPUDispatcher(<function get_submatrices at 0x00000196AE71E670>)) ['$282load_global.1']
    $292call_function.6 = call $282load_global.1(delta, A, D, oddV, func=$282load_global.1, args=[Var(delta, loop_hafnian_batch.py:47), Var(A, loop_hafnian_batch.py:20), Var(D, loop_hafnian_batch.py:20), Var(oddV, loop_hafnian_batch.py:21)], kws=(), vararg=None, target=None) ['$282load_global.1', '$292call_function.6', 'A', 'D', 'delta', 'oddV']
    $294unpack_sequence.11 = exhaust_iter(value=$292call_function.6, count=4) ['$292call_function.6', '$294unpack_sequence.11']
    $294unpack_sequence.7 = static_getitem(value=$294unpack_sequence.11, index=0, index_var=None, fn=<built-in function getitem>) ['$294unpack_sequence.11', '$294unpack_sequence.7']
    $294unpack_sequence.8 = static_getitem(value=$294unpack_sequence.11, index=1, index_var=None, fn=<built-in function getitem>) ['$294unpack_sequence.11', '$294unpack_sequence.8']
    $294unpack_sequence.9 = static_getitem(value=$294unpack_sequence.11, index=2, index_var=None, fn=<built-in function getitem>) ['$294unpack_sequence.11', '$294unpack_sequence.9']
    $294unpack_sequence.10 = static_getitem(value=$294unpack_sequence.11, index=3, index_var=None, fn=<built-in function getitem>) ['$294unpack_sequence.10', '$294unpack_sequence.11']
    AX_S = $294unpack_sequence.7             ['$294unpack_sequence.7', 'AX_S']
    XD_S = $294unpack_sequence.8             ['$294unpack_sequence.8', 'XD_S']
    D_S = $294unpack_sequence.9              ['$294unpack_sequence.9', 'D_S']
    oddVX_S = $294unpack_sequence.10         ['$294unpack_sequence.10', 'oddVX_S']
    $304load_global.12 = global(eigvals: CPUDispatcher(<function eigvals at 0x00000196AE71EB80>)) ['$304load_global.12']
    E = call $304load_global.12(AX_S, func=$304load_global.12, args=[Var(AX_S, loop_hafnian_batch.py:51)], kws=(), vararg=None, target=None) ['$304load_global.12', 'AX_S', 'E']
    $312load_global.15 = global(f_loop: CPUDispatcher(<function f_loop at 0x00000196AE71E310>)) ['$312load_global.15']
    f_even = call $312load_global.15(E, AX_S, XD_S, D_S, N_max, func=$312load_global.15, args=[Var(E, loop_hafnian_batch.py:53), Var(AX_S, loop_hafnian_batch.py:51), Var(XD_S, loop_hafnian_batch.py:51), Var(D_S, loop_hafnian_batch.py:51), Var(N_max, loop_hafnian_batch.py:26)], kws=(), vararg=None, target=None) ['$312load_global.15', 'AX_S', 'D_S', 'E', 'N_max', 'XD_S', 'f_even']
    $328load_global.22 = global(f_loop_odd: CPUDispatcher(<function f_loop_odd at 0x00000196AE71E4C0>)) ['$328load_global.22']
    f_odd = call $328load_global.22(E, AX_S, XD_S, D_S, N_max, oddloop, oddVX_S, func=$328load_global.22, args=[Var(E, loop_hafnian_batch.py:53), Var(AX_S, loop_hafnian_batch.py:51), Var(XD_S, loop_hafnian_batch.py:51), Var(D_S, loop_hafnian_batch.py:51), Var(N_max, loop_hafnian_batch.py:26), Var(oddloop, loop_hafnian_batch.py:20), Var(oddVX_S, loop_hafnian_batch.py:51)], kws=(), vararg=None, target=None) ['$328load_global.22', 'AX_S', 'D_S', 'E', 'N_max', 'XD_S', 'f_odd', 'oddVX_S', 'oddloop']
    $348load_global.31 = global(range: <class 'range'>) ['$348load_global.31']
    $const350.32 = const(int, 2)             ['$const350.32']
    $const354.34 = const(int, 0)             ['$const354.34']
    $356binary_subscr.35 = getitem(value=kept_edges, index=$const354.34, fn=<built-in function getitem>) ['$356binary_subscr.35', '$const354.34', 'kept_edges']
    $358binary_multiply.36 = $const350.32 * $356binary_subscr.35 ['$356binary_subscr.35', '$358binary_multiply.36', '$const350.32']
    $const360.37 = const(int, 2)             ['$const360.37']
    $364binary_multiply.39 = $const360.37 * batch_max ['$364binary_multiply.39', '$const360.37', 'batch_max']
    $368binary_add.41 = $364binary_multiply.39 + odd_cutoff ['$364binary_multiply.39', '$368binary_add.41', 'odd_cutoff']
    $const370.42 = const(int, 1)             ['$const370.42']
    $372binary_add.43 = $368binary_add.41 + $const370.42 ['$368binary_add.41', '$372binary_add.43', '$const370.42']
    $374call_function.44 = call $348load_global.31($358binary_multiply.36, $372binary_add.43, func=$348load_global.31, args=[Var($358binary_multiply.36, loop_hafnian_batch.py:58), Var($372binary_add.43, loop_hafnian_batch.py:58)], kws=(), vararg=None, target=None) ['$348load_global.31', '$358binary_multiply.36', '$372binary_add.43', '$374call_function.44']
    $376get_iter.45 = getiter(value=$374call_function.44) ['$374call_function.44', '$376get_iter.45']
    $phi378.1 = $376get_iter.45              ['$376get_iter.45', '$phi378.1']
    jump 378                                 []
label 378:
    $378for_iter.2 = iternext(value=$phi378.1) ['$378for_iter.2', '$phi378.1']
    $378for_iter.3 = pair_first(value=$378for_iter.2) ['$378for_iter.2', '$378for_iter.3']
    $378for_iter.4 = pair_second(value=$378for_iter.2) ['$378for_iter.2', '$378for_iter.4']
    $phi380.2 = $378for_iter.3               ['$378for_iter.3', '$phi380.2']
    branch $378for_iter.4, 380, 510          ['$378for_iter.4']
label 380:
    N_det = $phi380.2                        ['$phi380.2', 'N_det']
    N = N_fixed + N_det                      ['N', 'N_det', 'N_fixed']
    $const390.6 = const(float, -1.0)         ['$const390.6']
    $const394.8 = const(int, 2)              ['$const394.8']
    $396binary_floor_divide.9 = N // $const394.8 ['$396binary_floor_divide.9', '$const394.8', 'N']
    $400binary_subtract.11 = $396binary_floor_divide.9 - edges_sum ['$396binary_floor_divide.9', '$400binary_subtract.11', 'edges_sum']
    plus_minus = $const390.6 ** $400binary_subtract.11 ['$400binary_subtract.11', '$const390.6', 'plus_minus']
    $const410.15 = const(int, 2)             ['$const410.15']
    $412binary_floor_divide.16 = N_det // $const410.15 ['$412binary_floor_divide.16', '$const410.15', 'N_det']
    $const416.18 = const(int, 0)             ['$const416.18']
    $418binary_subscr.19 = getitem(value=kept_edges, index=$const416.18, fn=<built-in function getitem>) ['$418binary_subscr.19', '$const416.18', 'kept_edges']
    $420build_tuple.20 = build_tuple(items=[Var($412binary_floor_divide.16, loop_hafnian_batch.py:62), Var($418binary_subscr.19, loop_hafnian_batch.py:62)]) ['$412binary_floor_divide.16', '$418binary_subscr.19', '$420build_tuple.20']
    $422binary_subscr.21 = getitem(value=binoms, index=$420build_tuple.20, fn=<built-in function getitem>) ['$420build_tuple.20', '$422binary_subscr.21', 'binoms']
    n_det_binom_prod = $422binary_subscr.21 * binom_prod ['$422binary_subscr.21', 'binom_prod', 'n_det_binom_prod']
    $const432.25 = const(int, 2)             ['$const432.25']
    $434binary_modulo.26 = N_det % $const432.25 ['$434binary_modulo.26', '$const432.25', 'N_det']
    $const436.27 = const(int, 0)             ['$const436.27']
    $438compare_op.28 = $434binary_modulo.26 == $const436.27 ['$434binary_modulo.26', '$438compare_op.28', '$const436.27']
    bool440 = global(bool: <class 'bool'>)   ['bool440']
    $440pred = call bool440($438compare_op.28, func=bool440, args=(Var($438compare_op.28, loop_hafnian_batch.py:64),), kws=(), vararg=None, target=None) ['$438compare_op.28', '$440pred', 'bool440']
    branch $440pred, 444, 478                ['$440pred']
label 444:
    $450binary_subscr.6 = getitem(value=Hnew, index=N_det, fn=<built-in function getitem>) ['$450binary_subscr.6', 'Hnew', 'N_det']
    $456binary_multiply.9 = n_det_binom_prod * plus_minus ['$456binary_multiply.9', 'n_det_binom_prod', 'plus_minus']
    $const462.12 = const(int, 2)             ['$const462.12']
    $464binary_floor_divide.13 = N // $const462.12 ['$464binary_floor_divide.13', '$const462.12', 'N']
    $466binary_subscr.14 = getitem(value=f_even, index=$464binary_floor_divide.13, fn=<built-in function getitem>) ['$464binary_floor_divide.13', '$466binary_subscr.14', 'f_even']
    $468binary_multiply.15 = $456binary_multiply.9 * $466binary_subscr.14 ['$456binary_multiply.9', '$466binary_subscr.14', '$468binary_multiply.15']
    $470inplace_add.16 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$450binary_subscr.6, rhs=$468binary_multiply.15, static_lhs=Undefined, static_rhs=Undefined) ['$450binary_subscr.6', '$468binary_multiply.15', '$470inplace_add.16']
    Hnew[N_det] = $470inplace_add.16         ['$470inplace_add.16', 'Hnew', 'N_det']
    jump 506                                 []
label 478:
    $484binary_subscr.6 = getitem(value=Hnew, index=N_det, fn=<built-in function getitem>) ['$484binary_subscr.6', 'Hnew', 'N_det']
    $490binary_multiply.9 = n_det_binom_prod * plus_minus ['$490binary_multiply.9', 'n_det_binom_prod', 'plus_minus']
    $496binary_subscr.12 = getitem(value=f_odd, index=N, fn=<built-in function getitem>) ['$496binary_subscr.12', 'N', 'f_odd']
    $498binary_multiply.13 = $490binary_multiply.9 * $496binary_subscr.12 ['$490binary_multiply.9', '$496binary_subscr.12', '$498binary_multiply.13']
    $500inplace_add.14 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$484binary_subscr.6, rhs=$498binary_multiply.13, static_lhs=Undefined, static_rhs=Undefined) ['$484binary_subscr.6', '$498binary_multiply.13', '$500inplace_add.14']
    Hnew[N_det] = $500inplace_add.14         ['$500inplace_add.14', 'Hnew', 'N_det']
    jump 506                                 []
label 506:
    jump 378                                 []
label 510:
    $514inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=H_batch, rhs=Hnew, static_lhs=Undefined, static_rhs=Undefined) ['$514inplace_add.3', 'H_batch', 'Hnew']
    H_batch = $514inplace_add.3              ['$514inplace_add.3', 'H_batch']
    jump 158                                 []
label 520:
    bool522 = global(bool: <class 'bool'>)   ['bool522']
    $522pred = call bool522(glynn, func=bool522, args=(Var(glynn, loop_hafnian_batch.py:20),), kws=(), vararg=None, target=None) ['$522pred', 'bool522', 'glynn']
    branch $522pred, 526, 580                ['$522pred']
label 526:
    $526load_global.0 = global(range: <class 'range'>) ['$526load_global.0']
    $530load_attr.2 = getattr(value=H_batch, attr=shape) ['$530load_attr.2', 'H_batch']
    $const532.3 = const(int, 0)              ['$const532.3']
    $534binary_subscr.4 = getitem(value=$530load_attr.2, index=$const532.3, fn=<built-in function getitem>) ['$530load_attr.2', '$534binary_subscr.4', '$const532.3']
    $536call_function.5 = call $526load_global.0($534binary_subscr.4, func=$526load_global.0, args=[Var($534binary_subscr.4, loop_hafnian_batch.py:72)], kws=(), vararg=None, target=None) ['$526load_global.0', '$534binary_subscr.4', '$536call_function.5']
    $538get_iter.6 = getiter(value=$536call_function.5) ['$536call_function.5', '$538get_iter.6']
    $phi540.0 = $538get_iter.6               ['$538get_iter.6', '$phi540.0']
    jump 540                                 []
label 540:
    $540for_iter.1 = iternext(value=$phi540.0) ['$540for_iter.1', '$phi540.0']
    $540for_iter.2 = pair_first(value=$540for_iter.1) ['$540for_iter.1', '$540for_iter.2']
    $540for_iter.3 = pair_second(value=$540for_iter.1) ['$540for_iter.1', '$540for_iter.3']
    $phi542.1 = $540for_iter.2               ['$540for_iter.2', '$phi542.1']
    branch $540for_iter.3, 542, 580          ['$540for_iter.3']
label 542:
    j = $phi542.1                            ['$phi542.1', 'j']
    x = N_fixed + j                          ['N_fixed', 'j', 'x']
    $558binary_subscr.9 = getitem(value=H_batch, index=j, fn=<built-in function getitem>) ['$558binary_subscr.9', 'H_batch', 'j']
    $const560.10 = const(float, 0.5)         ['$const560.10']
    $const564.12 = const(int, 2)             ['$const564.12']
    $566binary_floor_divide.13 = x // $const564.12 ['$566binary_floor_divide.13', '$const564.12', 'x']
    $568binary_power.14 = $const560.10 ** $566binary_floor_divide.13 ['$566binary_floor_divide.13', '$568binary_power.14', '$const560.10']
    $570inplace_multiply.15 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=$558binary_subscr.9, rhs=$568binary_power.14, static_lhs=Undefined, static_rhs=Undefined) ['$558binary_subscr.9', '$568binary_power.14', '$570inplace_multiply.15']
    H_batch[j] = $570inplace_multiply.15     ['$570inplace_multiply.15', 'H_batch', 'j']
    jump 540                                 []
label 580:
    $582return_value.1 = cast(value=H_batch) ['$582return_value.1', 'H_batch']
    return $582return_value.1                ['$582return_value.1']

DEBUG 2022-02-07 18:03:05,227 ==== SSA block analysis pass on 0
DEBUG 2022-02-07 18:03:05,227 Running <numba.core.ssa._GatherDefsHandler object at 0x00000196AEF27EE0>
DEBUG 2022-02-07 18:03:05,242 on stmt: A = arg(0, name=A)
DEBUG 2022-02-07 18:03:05,242 on stmt: D = arg(1, name=D)
DEBUG 2022-02-07 18:03:05,242 on stmt: fixed_edge_reps = arg(2, name=fixed_edge_reps)
DEBUG 2022-02-07 18:03:05,242 on stmt: batch_max = arg(3, name=batch_max)
DEBUG 2022-02-07 18:03:05,242 on stmt: odd_cutoff = arg(4, name=odd_cutoff)
DEBUG 2022-02-07 18:03:05,242 on stmt: glynn = arg(5, name=glynn)
DEBUG 2022-02-07 18:03:05,242 on stmt: $const4.1 = const(int, 0)
DEBUG 2022-02-07 18:03:05,242 on stmt: oddloop = static_getitem(value=D, index=0, index_var=$const4.1, fn=<built-in function getitem>)
DEBUG 2022-02-07 18:03:05,242 on stmt: $const12.4 = const(int, 0)
DEBUG 2022-02-07 18:03:05,242 on stmt: $const14.5 = const(NoneType, None)
DEBUG 2022-02-07 18:03:05,242 on stmt: $const16.6 = const(NoneType, None)
DEBUG 2022-02-07 18:03:05,242 on stmt: $18build_slice.7 = global(slice: <class 'slice'>)
DEBUG 2022-02-07 18:03:05,242 on stmt: $18build_slice.8 = call $18build_slice.7($const14.5, $const16.6, func=$18build_slice.7, args=(Var($const14.5, loop_hafnian_batch.py:21), Var($const16.6, loop_hafnian_batch.py:21)), kws=(), vararg=None, target=None)
DEBUG 2022-02-07 18:03:05,242 on stmt: $20build_tuple.9 = build_tuple(items=[Var($const12.4, loop_hafnian_batch.py:21), Var($18build_slice.8, loop_hafnian_batch.py:21)])
DEBUG 2022-02-07 18:03:05,242 on stmt: oddV = static_getitem(value=A, index=(0, slice(None, None, None)), index_var=$20build_tuple.9, fn=<built-in function getitem>)
DEBUG 2022-02-07 18:03:05,242 on stmt: $28load_attr.12 = getattr(value=A, attr=shape)
DEBUG 2022-02-07 18:03:05,242 on stmt: $const30.13 = const(int, 0)
DEBUG 2022-02-07 18:03:05,242 on stmt: n = static_getitem(value=$28load_attr.12, index=0, index_var=$const30.13, fn=<built-in function getitem>)
DEBUG 2022-02-07 18:03:05,242 on stmt: $const36.15 = const(int, 2)
DEBUG 2022-02-07 18:03:05,242 on stmt: $40load_method.17 = getattr(value=fixed_edge_reps, attr=sum)
DEBUG 2022-02-07 18:03:05,242 on stmt: $42call_method.18 = call $40load_method.17(func=$40load_method.17, args=[], kws=(), vararg=None, target=None)
DEBUG 2022-02-07 18:03:05,242 on stmt: N_fixed = $const36.15 * $42call_method.18
DEBUG 2022-02-07 18:03:05,242 on stmt: $const50.21 = const(int, 2)
DEBUG 2022-02-07 18:03:05,242 on stmt: $54binary_multiply.23 = $const50.21 * batch_max
DEBUG 2022-02-07 18:03:05,242 on stmt: $56binary_add.24 = N_fixed + $54binary_multiply.23
DEBUG 2022-02-07 18:03:05,242 on stmt: N_max = $56binary_add.24 + odd_cutoff
DEBUG 2022-02-07 18:03:05,242 on stmt: $64load_global.27 = global(np: <module 'numpy' from 'C:\\Users\\zl4821\\Anaconda3\\envs\\GBS\\lib\\site-packages\\numpy\\__init__.py'>)
DEBUG 2022-02-07 18:03:05,242 on stmt: $66load_method.28 = getattr(value=$64load_global.27, attr=concatenate)
DEBUG 2022-02-07 18:03:05,242 on stmt: $68load_global.29 = global(np: <module 'numpy' from 'C:\\Users\\zl4821\\Anaconda3\\envs\\GBS\\lib\\site-packages\\numpy\\__init__.py'>)
DEBUG 2022-02-07 18:03:05,242 on stmt: $70load_method.30 = getattr(value=$68load_global.29, attr=array)
DEBUG 2022-02-07 18:03:05,242 on stmt: $74build_list.32 = build_list(items=[Var(batch_max, loop_hafnian_batch.py:20)])
DEBUG 2022-02-07 18:03:05,242 on stmt: $76call_method.33 = call $70load_method.30($74build_list.32, func=$70load_method.30, args=[Var($74build_list.32, loop_hafnian_batch.py:28)], kws=(), vararg=None, target=None)
DEBUG 2022-02-07 18:03:05,242 on stmt: $80build_tuple.35 = build_tuple(items=[Var($76call_method.33, loop_hafnian_batch.py:28), Var(fixed_edge_reps, loop_hafnian_batch.py:20)])
DEBUG 2022-02-07 18:03:05,242 on stmt: edge_reps = call $66load_method.28($80build_tuple.35, func=$66load_method.28, args=[Var($80build_tuple.35, loop_hafnian_batch.py:28)], kws=(), vararg=None, target=None)
DEBUG 2022-02-07 18:03:05,242 on stmt: $86load_global.37 = global(np: <module 'numpy' from 'C:\\Users\\zl4821\\Anaconda3\\envs\\GBS\\lib\\site-packages\\numpy\\__init__.py'>)
DEBUG 2022-02-07 18:03:05,242 on stmt: $88load_method.38 = getattr(value=$86load_global.37, attr=prod)
DEBUG 2022-02-07 18:03:05,242 on stmt: $const92.40 = const(int, 1)
DEBUG 2022-02-07 18:03:05,242 on stmt: $94binary_add.41 = edge_reps + $const92.40
DEBUG 2022-02-07 18:03:05,242 on stmt: steps = call $88load_method.38($94binary_add.41, func=$88load_method.38, args=[Var($94binary_add.41, loop_hafnian_batch.py:29)], kws=(), vararg=None, target=None)
DEBUG 2022-02-07 18:03:05,242 on stmt: $102load_method.44 = getattr(value=edge_reps, attr=max)
DEBUG 2022-02-07 18:03:05,242 on stmt: $104call_method.45 = call $102load_method.44(func=$102load_method.44, args=[], kws=(), vararg=None, target=None)
DEBUG 2022-02-07 18:03:05,242 on stmt: max_binom = $104call_method.45 + odd_cutoff
DEBUG 2022-02-07 18:03:05,242 on stmt: $112load_global.48 = global(precompute_binoms: CPUDispatcher(<function precompute_binoms at 0x00000196AE6F6CA0>))
DEBUG 2022-02-07 18:03:05,242 on stmt: binoms = call $112load_global.48(max_binom, func=$112load_global.48, args=[Var(max_binom, loop_hafnian_batch.py:31)], kws=(), vararg=None, target=None)
DEBUG 2022-02-07 18:03:05,242 on stmt: $120load_global.51 = global(np: <module 'numpy' from 'C:\\Users\\zl4821\\Anaconda3\\envs\\GBS\\lib\\site-packages\\numpy\\__init__.py'>)
DEBUG 2022-02-07 18:03:05,242 on stmt: $122load_attr.52 = getattr(value=$120load_global.51, attr=zeros)
DEBUG 2022-02-07 18:03:05,242 on stmt: $const124.53 = const(int, 2)
DEBUG 2022-02-07 18:03:05,242 on stmt: $128binary_multiply.55 = $const124.53 * batch_max
DEBUG 2022-02-07 18:03:05,258 on stmt: $132binary_add.57 = $128binary_multiply.55 + odd_cutoff
DEBUG 2022-02-07 18:03:05,258 on stmt: $const134.58 = const(int, 1)
DEBUG 2022-02-07 18:03:05,258 on stmt: $136binary_add.59 = $132binary_add.57 + $const134.58
DEBUG 2022-02-07 18:03:05,258 on stmt: $138load_global.60 = global(np: <module 'numpy' from 'C:\\Users\\zl4821\\Anaconda3\\envs\\GBS\\lib\\site-packages\\numpy\\__init__.py'>)
DEBUG 2022-02-07 18:03:05,258 on stmt: $140load_attr.61 = getattr(value=$138load_global.60, attr=complex128)
DEBUG 2022-02-07 18:03:05,258 on stmt: H_batch = call $122load_attr.52($136binary_add.59, func=$122load_attr.52, args=[Var($136binary_add.59, loop_hafnian_batch.py:34)], kws=[('dtype', Var($140load_attr.61, loop_hafnian_batch.py:34))], vararg=None, target=None)
DEBUG 2022-02-07 18:03:05,258 on stmt: $148load_global.64 = global(numba: <module 'numba' from 'C:\\Users\\zl4821\\Anaconda3\\envs\\GBS\\lib\\site-packages\\numba\\__init__.py'>)
DEBUG 2022-02-07 18:03:05,258 on stmt: $150load_method.65 = getattr(value=$148load_global.64, attr=prange)
DEBUG 2022-02-07 18:03:05,258 on stmt: $154call_method.67 = call $150load_method.65(steps, func=$150load_method.65, args=[Var(steps, loop_hafnian_batch.py:29)], kws=(), vararg=None, target=None)
DEBUG 2022-02-07 18:03:05,258 on stmt: $156get_iter.68 = getiter(value=$154call_method.67)
DEBUG 2022-02-07 18:03:05,258 on stmt: $phi158.0 = $156get_iter.68
DEBUG 2022-02-07 18:03:05,258 on stmt: jump 158
DEBUG 2022-02-07 18:03:05,258 ==== SSA block analysis pass on 158
DEBUG 2022-02-07 18:03:05,258 Running <numba.core.ssa._GatherDefsHandler object at 0x00000196AEF27EE0>
DEBUG 2022-02-07 18:03:05,258 on stmt: $158for_iter.1 = iternext(value=$phi158.0)
DEBUG 2022-02-07 18:03:05,258 on stmt: $158for_iter.2 = pair_first(value=$158for_iter.1)
DEBUG 2022-02-07 18:03:05,258 on stmt: $158for_iter.3 = pair_second(value=$158for_iter.1)
DEBUG 2022-02-07 18:03:05,265 on stmt: $phi162.1 = $158for_iter.2
DEBUG 2022-02-07 18:03:05,265 on stmt: branch $158for_iter.3, 162, 520
DEBUG 2022-02-07 18:03:05,265 ==== SSA block analysis pass on 162
DEBUG 2022-02-07 18:03:05,265 Running <numba.core.ssa._GatherDefsHandler object at 0x00000196AEF27EE0>
DEBUG 2022-02-07 18:03:05,265 on stmt: j = $phi162.1
DEBUG 2022-02-07 18:03:05,265 on stmt: $164load_global.2 = global(np: <module 'numpy' from 'C:\\Users\\zl4821\\Anaconda3\\envs\\GBS\\lib\\site-packages\\numpy\\__init__.py'>)
DEBUG 2022-02-07 18:03:05,265 on stmt: $166load_attr.3 = getattr(value=$164load_global.2, attr=zeros)
DEBUG 2022-02-07 18:03:05,265 on stmt: $const168.4 = const(int, 2)
DEBUG 2022-02-07 18:03:05,265 on stmt: $172binary_multiply.6 = $const168.4 * batch_max
DEBUG 2022-02-07 18:03:05,265 on stmt: $176binary_add.8 = $172binary_multiply.6 + odd_cutoff
DEBUG 2022-02-07 18:03:05,265 on stmt: $const178.9 = const(int, 1)
DEBUG 2022-02-07 18:03:05,265 on stmt: $180binary_add.10 = $176binary_add.8 + $const178.9
DEBUG 2022-02-07 18:03:05,265 on stmt: $182load_global.11 = global(np: <module 'numpy' from 'C:\\Users\\zl4821\\Anaconda3\\envs\\GBS\\lib\\site-packages\\numpy\\__init__.py'>)
DEBUG 2022-02-07 18:03:05,265 on stmt: $184load_attr.12 = getattr(value=$182load_global.11, attr=complex128)
DEBUG 2022-02-07 18:03:05,265 on stmt: Hnew = call $166load_attr.3($180binary_add.10, func=$166load_attr.3, args=[Var($180binary_add.10, loop_hafnian_batch.py:37)], kws=[('dtype', Var($184load_attr.12, loop_hafnian_batch.py:37))], vararg=None, target=None)
DEBUG 2022-02-07 18:03:05,265 on stmt: $192load_global.15 = global(find_kept_edges: CPUDispatcher(<function find_kept_edges at 0x00000196AE71E160>))
DEBUG 2022-02-07 18:03:05,265 on stmt: kept_edges = call $192load_global.15(j, edge_reps, func=$192load_global.15, args=[Var(j, loop_hafnian_batch.py:35), Var(edge_reps, loop_hafnian_batch.py:28)], kws=(), vararg=None, target=None)
DEBUG 2022-02-07 18:03:05,265 on stmt: $204load_method.20 = getattr(value=kept_edges, attr=sum)
DEBUG 2022-02-07 18:03:05,265 on stmt: edges_sum = call $204load_method.20(func=$204load_method.20, args=[], kws=(), vararg=None, target=None)
DEBUG 2022-02-07 18:03:05,265 on stmt: binom_prod = const(float, 1.0)
DEBUG 2022-02-07 18:03:05,265 on stmt: $214load_global.23 = global(range: <class 'range'>)
DEBUG 2022-02-07 18:03:05,265 on stmt: $const216.24 = const(int, 1)
DEBUG 2022-02-07 18:03:05,265 on stmt: $const220.26 = const(int, 2)
DEBUG 2022-02-07 18:03:05,265 on stmt: $222binary_floor_divide.27 = n // $const220.26
DEBUG 2022-02-07 18:03:05,265 on stmt: $224call_function.28 = call $214load_global.23($const216.24, $222binary_floor_divide.27, func=$214load_global.23, args=[Var($const216.24, loop_hafnian_batch.py:43), Var($222binary_floor_divide.27, loop_hafnian_batch.py:43)], kws=(), vararg=None, target=None)
DEBUG 2022-02-07 18:03:05,265 on stmt: $226get_iter.29 = getiter(value=$224call_function.28)
DEBUG 2022-02-07 18:03:05,265 on stmt: $phi228.1 = $226get_iter.29
DEBUG 2022-02-07 18:03:05,265 on stmt: jump 228
DEBUG 2022-02-07 18:03:05,265 ==== SSA block analysis pass on 228
DEBUG 2022-02-07 18:03:05,265 Running <numba.core.ssa._GatherDefsHandler object at 0x00000196AEF27EE0>
DEBUG 2022-02-07 18:03:05,265 on stmt: $228for_iter.2 = iternext(value=$phi228.1)
DEBUG 2022-02-07 18:03:05,265 on stmt: $228for_iter.3 = pair_first(value=$228for_iter.2)
DEBUG 2022-02-07 18:03:05,265 on stmt: $228for_iter.4 = pair_second(value=$228for_iter.2)
DEBUG 2022-02-07 18:03:05,265 on stmt: $phi230.2 = $228for_iter.3
DEBUG 2022-02-07 18:03:05,265 on stmt: branch $228for_iter.4, 230, 258
DEBUG 2022-02-07 18:03:05,265 ==== SSA block analysis pass on 230
DEBUG 2022-02-07 18:03:05,265 Running <numba.core.ssa._GatherDefsHandler object at 0x00000196AEF27EE0>
DEBUG 2022-02-07 18:03:05,265 on stmt: i = $phi230.2
DEBUG 2022-02-07 18:03:05,265 on stmt: $240binary_subscr.7 = getitem(value=edge_reps, index=i, fn=<built-in function getitem>)
DEBUG 2022-02-07 18:03:05,265 on stmt: $246binary_subscr.10 = getitem(value=kept_edges, index=i, fn=<built-in function getitem>)
DEBUG 2022-02-07 18:03:05,265 on stmt: $248build_tuple.11 = build_tuple(items=[Var($240binary_subscr.7, loop_hafnian_batch.py:44), Var($246binary_subscr.10, loop_hafnian_batch.py:44)])
DEBUG 2022-02-07 18:03:05,265 on stmt: $250binary_subscr.12 = getitem(value=binoms, index=$248build_tuple.11, fn=<built-in function getitem>)
DEBUG 2022-02-07 18:03:05,265 on stmt: $252inplace_multiply.13 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=binom_prod, rhs=$250binary_subscr.12, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-07 18:03:05,265 on stmt: binom_prod = $252inplace_multiply.13
DEBUG 2022-02-07 18:03:05,265 on stmt: jump 228
DEBUG 2022-02-07 18:03:05,265 ==== SSA block analysis pass on 258
DEBUG 2022-02-07 18:03:05,265 Running <numba.core.ssa._GatherDefsHandler object at 0x00000196AEF27EE0>
DEBUG 2022-02-07 18:03:05,265 on stmt: bool260 = global(bool: <class 'bool'>)
DEBUG 2022-02-07 18:03:05,265 on stmt: $260pred = call bool260(glynn, func=bool260, args=(Var(glynn, loop_hafnian_batch.py:20),), kws=(), vararg=None, target=None)
DEBUG 2022-02-07 18:03:05,265 on stmt: branch $260pred, 264, 278
DEBUG 2022-02-07 18:03:05,280 ==== SSA block analysis pass on 264
DEBUG 2022-02-07 18:03:05,280 Running <numba.core.ssa._GatherDefsHandler object at 0x00000196AEF27EE0>
DEBUG 2022-02-07 18:03:05,280 on stmt: $const264.1 = const(int, 2)
DEBUG 2022-02-07 18:03:05,280 on stmt: $268binary_multiply.3 = $const264.1 * kept_edges
DEBUG 2022-02-07 18:03:05,280 on stmt: delta = $268binary_multiply.3 - edge_reps
DEBUG 2022-02-07 18:03:05,280 on stmt: jump 282
DEBUG 2022-02-07 18:03:05,280 ==== SSA block analysis pass on 278
DEBUG 2022-02-07 18:03:05,280 Running <numba.core.ssa._GatherDefsHandler object at 0x00000196AEF27EE0>
DEBUG 2022-02-07 18:03:05,280 on stmt: delta = kept_edges
DEBUG 2022-02-07 18:03:05,280 on stmt: jump 282
DEBUG 2022-02-07 18:03:05,280 ==== SSA block analysis pass on 282
DEBUG 2022-02-07 18:03:05,280 Running <numba.core.ssa._GatherDefsHandler object at 0x00000196AEF27EE0>
DEBUG 2022-02-07 18:03:05,280 on stmt: $282load_global.1 = global(get_submatrices: CPUDispatcher(<function get_submatrices at 0x00000196AE71E670>))
DEBUG 2022-02-07 18:03:05,280 on stmt: $292call_function.6 = call $282load_global.1(delta, A, D, oddV, func=$282load_global.1, args=[Var(delta, loop_hafnian_batch.py:47), Var(A, loop_hafnian_batch.py:20), Var(D, loop_hafnian_batch.py:20), Var(oddV, loop_hafnian_batch.py:21)], kws=(), vararg=None, target=None)
DEBUG 2022-02-07 18:03:05,280 on stmt: $294unpack_sequence.11 = exhaust_iter(value=$292call_function.6, count=4)
DEBUG 2022-02-07 18:03:05,280 on stmt: $294unpack_sequence.7 = static_getitem(value=$294unpack_sequence.11, index=0, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-02-07 18:03:05,280 on stmt: $294unpack_sequence.8 = static_getitem(value=$294unpack_sequence.11, index=1, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-02-07 18:03:05,280 on stmt: $294unpack_sequence.9 = static_getitem(value=$294unpack_sequence.11, index=2, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-02-07 18:03:05,280 on stmt: $294unpack_sequence.10 = static_getitem(value=$294unpack_sequence.11, index=3, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-02-07 18:03:05,280 on stmt: AX_S = $294unpack_sequence.7
DEBUG 2022-02-07 18:03:05,280 on stmt: XD_S = $294unpack_sequence.8
DEBUG 2022-02-07 18:03:05,280 on stmt: D_S = $294unpack_sequence.9
DEBUG 2022-02-07 18:03:05,280 on stmt: oddVX_S = $294unpack_sequence.10
DEBUG 2022-02-07 18:03:05,280 on stmt: $304load_global.12 = global(eigvals: CPUDispatcher(<function eigvals at 0x00000196AE71EB80>))
DEBUG 2022-02-07 18:03:05,280 on stmt: E = call $304load_global.12(AX_S, func=$304load_global.12, args=[Var(AX_S, loop_hafnian_batch.py:51)], kws=(), vararg=None, target=None)
DEBUG 2022-02-07 18:03:05,280 on stmt: $312load_global.15 = global(f_loop: CPUDispatcher(<function f_loop at 0x00000196AE71E310>))
DEBUG 2022-02-07 18:03:05,280 on stmt: f_even = call $312load_global.15(E, AX_S, XD_S, D_S, N_max, func=$312load_global.15, args=[Var(E, loop_hafnian_batch.py:53), Var(AX_S, loop_hafnian_batch.py:51), Var(XD_S, loop_hafnian_batch.py:51), Var(D_S, loop_hafnian_batch.py:51), Var(N_max, loop_hafnian_batch.py:26)], kws=(), vararg=None, target=None)
DEBUG 2022-02-07 18:03:05,280 on stmt: $328load_global.22 = global(f_loop_odd: CPUDispatcher(<function f_loop_odd at 0x00000196AE71E4C0>))
DEBUG 2022-02-07 18:03:05,280 on stmt: f_odd = call $328load_global.22(E, AX_S, XD_S, D_S, N_max, oddloop, oddVX_S, func=$328load_global.22, args=[Var(E, loop_hafnian_batch.py:53), Var(AX_S, loop_hafnian_batch.py:51), Var(XD_S, loop_hafnian_batch.py:51), Var(D_S, loop_hafnian_batch.py:51), Var(N_max, loop_hafnian_batch.py:26), Var(oddloop, loop_hafnian_batch.py:20), Var(oddVX_S, loop_hafnian_batch.py:51)], kws=(), vararg=None, target=None)
DEBUG 2022-02-07 18:03:05,280 on stmt: $348load_global.31 = global(range: <class 'range'>)
DEBUG 2022-02-07 18:03:05,280 on stmt: $const350.32 = const(int, 2)
DEBUG 2022-02-07 18:03:05,280 on stmt: $const354.34 = const(int, 0)
DEBUG 2022-02-07 18:03:05,280 on stmt: $356binary_subscr.35 = static_getitem(value=kept_edges, index=0, index_var=$const354.34, fn=<built-in function getitem>)
DEBUG 2022-02-07 18:03:05,280 on stmt: $358binary_multiply.36 = $const350.32 * $356binary_subscr.35
DEBUG 2022-02-07 18:03:05,280 on stmt: $const360.37 = const(int, 2)
DEBUG 2022-02-07 18:03:05,280 on stmt: $364binary_multiply.39 = $const360.37 * batch_max
DEBUG 2022-02-07 18:03:05,280 on stmt: $368binary_add.41 = $364binary_multiply.39 + odd_cutoff
DEBUG 2022-02-07 18:03:05,280 on stmt: $const370.42 = const(int, 1)
DEBUG 2022-02-07 18:03:05,280 on stmt: $372binary_add.43 = $368binary_add.41 + $const370.42
DEBUG 2022-02-07 18:03:05,280 on stmt: $374call_function.44 = call $348load_global.31($358binary_multiply.36, $372binary_add.43, func=$348load_global.31, args=[Var($358binary_multiply.36, loop_hafnian_batch.py:58), Var($372binary_add.43, loop_hafnian_batch.py:58)], kws=(), vararg=None, target=None)
DEBUG 2022-02-07 18:03:05,280 on stmt: $376get_iter.45 = getiter(value=$374call_function.44)
DEBUG 2022-02-07 18:03:05,280 on stmt: $phi378.1 = $376get_iter.45
DEBUG 2022-02-07 18:03:05,280 on stmt: jump 378
DEBUG 2022-02-07 18:03:05,280 ==== SSA block analysis pass on 378
DEBUG 2022-02-07 18:03:05,280 Running <numba.core.ssa._GatherDefsHandler object at 0x00000196AEF27EE0>
DEBUG 2022-02-07 18:03:05,280 on stmt: $378for_iter.2 = iternext(value=$phi378.1)
DEBUG 2022-02-07 18:03:05,280 on stmt: $378for_iter.3 = pair_first(value=$378for_iter.2)
DEBUG 2022-02-07 18:03:05,280 on stmt: $378for_iter.4 = pair_second(value=$378for_iter.2)
DEBUG 2022-02-07 18:03:05,280 on stmt: $phi380.2 = $378for_iter.3
DEBUG 2022-02-07 18:03:05,280 on stmt: branch $378for_iter.4, 380, 510
DEBUG 2022-02-07 18:03:05,296 ==== SSA block analysis pass on 380
DEBUG 2022-02-07 18:03:05,296 Running <numba.core.ssa._GatherDefsHandler object at 0x00000196AEF27EE0>
DEBUG 2022-02-07 18:03:05,296 on stmt: N_det = $phi380.2
DEBUG 2022-02-07 18:03:05,296 on stmt: N = N_fixed + N_det
DEBUG 2022-02-07 18:03:05,296 on stmt: $const390.6 = const(float, -1.0)
DEBUG 2022-02-07 18:03:05,296 on stmt: $const394.8 = const(int, 2)
DEBUG 2022-02-07 18:03:05,296 on stmt: $396binary_floor_divide.9 = N // $const394.8
DEBUG 2022-02-07 18:03:05,296 on stmt: $400binary_subtract.11 = $396binary_floor_divide.9 - edges_sum
DEBUG 2022-02-07 18:03:05,296 on stmt: plus_minus = $const390.6 ** $400binary_subtract.11
DEBUG 2022-02-07 18:03:05,296 on stmt: $const410.15 = const(int, 2)
DEBUG 2022-02-07 18:03:05,296 on stmt: $412binary_floor_divide.16 = N_det // $const410.15
DEBUG 2022-02-07 18:03:05,296 on stmt: $const416.18 = const(int, 0)
DEBUG 2022-02-07 18:03:05,296 on stmt: $418binary_subscr.19 = static_getitem(value=kept_edges, index=0, index_var=$const416.18, fn=<built-in function getitem>)
DEBUG 2022-02-07 18:03:05,296 on stmt: $420build_tuple.20 = build_tuple(items=[Var($412binary_floor_divide.16, loop_hafnian_batch.py:62), Var($418binary_subscr.19, loop_hafnian_batch.py:62)])
DEBUG 2022-02-07 18:03:05,296 on stmt: $422binary_subscr.21 = getitem(value=binoms, index=$420build_tuple.20, fn=<built-in function getitem>)
DEBUG 2022-02-07 18:03:05,296 on stmt: n_det_binom_prod = $422binary_subscr.21 * binom_prod
DEBUG 2022-02-07 18:03:05,296 on stmt: $const432.25 = const(int, 2)
DEBUG 2022-02-07 18:03:05,296 on stmt: $434binary_modulo.26 = N_det % $const432.25
DEBUG 2022-02-07 18:03:05,296 on stmt: $const436.27 = const(int, 0)
DEBUG 2022-02-07 18:03:05,296 on stmt: $438compare_op.28 = $434binary_modulo.26 == $const436.27
DEBUG 2022-02-07 18:03:05,296 on stmt: bool440 = global(bool: <class 'bool'>)
DEBUG 2022-02-07 18:03:05,296 on stmt: $440pred = call bool440($438compare_op.28, func=bool440, args=(Var($438compare_op.28, loop_hafnian_batch.py:64),), kws=(), vararg=None, target=None)
DEBUG 2022-02-07 18:03:05,296 on stmt: branch $440pred, 444, 478
DEBUG 2022-02-07 18:03:05,296 ==== SSA block analysis pass on 444
DEBUG 2022-02-07 18:03:05,296 Running <numba.core.ssa._GatherDefsHandler object at 0x00000196AEF27EE0>
DEBUG 2022-02-07 18:03:05,296 on stmt: $450binary_subscr.6 = getitem(value=Hnew, index=N_det, fn=<built-in function getitem>)
DEBUG 2022-02-07 18:03:05,296 on stmt: $456binary_multiply.9 = n_det_binom_prod * plus_minus
DEBUG 2022-02-07 18:03:05,296 on stmt: $const462.12 = const(int, 2)
DEBUG 2022-02-07 18:03:05,296 on stmt: $464binary_floor_divide.13 = N // $const462.12
DEBUG 2022-02-07 18:03:05,296 on stmt: $466binary_subscr.14 = getitem(value=f_even, index=$464binary_floor_divide.13, fn=<built-in function getitem>)
DEBUG 2022-02-07 18:03:05,296 on stmt: $468binary_multiply.15 = $456binary_multiply.9 * $466binary_subscr.14
DEBUG 2022-02-07 18:03:05,296 on stmt: $470inplace_add.16 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$450binary_subscr.6, rhs=$468binary_multiply.15, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-07 18:03:05,296 on stmt: Hnew[N_det] = $470inplace_add.16
DEBUG 2022-02-07 18:03:05,296 on stmt: jump 506
DEBUG 2022-02-07 18:03:05,296 ==== SSA block analysis pass on 478
DEBUG 2022-02-07 18:03:05,296 Running <numba.core.ssa._GatherDefsHandler object at 0x00000196AEF27EE0>
DEBUG 2022-02-07 18:03:05,296 on stmt: $484binary_subscr.6 = getitem(value=Hnew, index=N_det, fn=<built-in function getitem>)
DEBUG 2022-02-07 18:03:05,296 on stmt: $490binary_multiply.9 = n_det_binom_prod * plus_minus
DEBUG 2022-02-07 18:03:05,296 on stmt: $496binary_subscr.12 = getitem(value=f_odd, index=N, fn=<built-in function getitem>)
DEBUG 2022-02-07 18:03:05,296 on stmt: $498binary_multiply.13 = $490binary_multiply.9 * $496binary_subscr.12
DEBUG 2022-02-07 18:03:05,296 on stmt: $500inplace_add.14 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$484binary_subscr.6, rhs=$498binary_multiply.13, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-07 18:03:05,296 on stmt: Hnew[N_det] = $500inplace_add.14
DEBUG 2022-02-07 18:03:05,296 on stmt: jump 506
DEBUG 2022-02-07 18:03:05,296 ==== SSA block analysis pass on 506
DEBUG 2022-02-07 18:03:05,296 Running <numba.core.ssa._GatherDefsHandler object at 0x00000196AEF27EE0>
DEBUG 2022-02-07 18:03:05,296 on stmt: jump 378
DEBUG 2022-02-07 18:03:05,296 ==== SSA block analysis pass on 510
DEBUG 2022-02-07 18:03:05,296 Running <numba.core.ssa._GatherDefsHandler object at 0x00000196AEF27EE0>
DEBUG 2022-02-07 18:03:05,296 on stmt: $514inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=H_batch, rhs=Hnew, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-07 18:03:05,296 on stmt: H_batch = $514inplace_add.3
DEBUG 2022-02-07 18:03:05,296 on stmt: jump 158
DEBUG 2022-02-07 18:03:05,296 ==== SSA block analysis pass on 520
DEBUG 2022-02-07 18:03:05,296 Running <numba.core.ssa._GatherDefsHandler object at 0x00000196AEF27EE0>
DEBUG 2022-02-07 18:03:05,296 on stmt: bool522 = global(bool: <class 'bool'>)
DEBUG 2022-02-07 18:03:05,296 on stmt: $522pred = call bool522(glynn, func=bool522, args=(Var(glynn, loop_hafnian_batch.py:20),), kws=(), vararg=None, target=None)
DEBUG 2022-02-07 18:03:05,296 on stmt: branch $522pred, 526, 580
DEBUG 2022-02-07 18:03:05,296 ==== SSA block analysis pass on 526
DEBUG 2022-02-07 18:03:05,296 Running <numba.core.ssa._GatherDefsHandler object at 0x00000196AEF27EE0>
DEBUG 2022-02-07 18:03:05,296 on stmt: $526load_global.0 = global(range: <class 'range'>)
DEBUG 2022-02-07 18:03:05,296 on stmt: $530load_attr.2 = getattr(value=H_batch, attr=shape)
DEBUG 2022-02-07 18:03:05,296 on stmt: $const532.3 = const(int, 0)
DEBUG 2022-02-07 18:03:05,311 on stmt: $534binary_subscr.4 = static_getitem(value=$530load_attr.2, index=0, index_var=$const532.3, fn=<built-in function getitem>)
DEBUG 2022-02-07 18:03:05,311 on stmt: $536call_function.5 = call $526load_global.0($534binary_subscr.4, func=$526load_global.0, args=[Var($534binary_subscr.4, loop_hafnian_batch.py:72)], kws=(), vararg=None, target=None)
DEBUG 2022-02-07 18:03:05,311 on stmt: $538get_iter.6 = getiter(value=$536call_function.5)
DEBUG 2022-02-07 18:03:05,311 on stmt: $phi540.0 = $538get_iter.6
DEBUG 2022-02-07 18:03:05,311 on stmt: jump 540
DEBUG 2022-02-07 18:03:05,311 ==== SSA block analysis pass on 540
DEBUG 2022-02-07 18:03:05,311 Running <numba.core.ssa._GatherDefsHandler object at 0x00000196AEF27EE0>
DEBUG 2022-02-07 18:03:05,311 on stmt: $540for_iter.1 = iternext(value=$phi540.0)
DEBUG 2022-02-07 18:03:05,311 on stmt: $540for_iter.2 = pair_first(value=$540for_iter.1)
DEBUG 2022-02-07 18:03:05,311 on stmt: $540for_iter.3 = pair_second(value=$540for_iter.1)
DEBUG 2022-02-07 18:03:05,311 on stmt: $phi542.1 = $540for_iter.2
DEBUG 2022-02-07 18:03:05,311 on stmt: branch $540for_iter.3, 542, 580
DEBUG 2022-02-07 18:03:05,311 ==== SSA block analysis pass on 542
DEBUG 2022-02-07 18:03:05,311 Running <numba.core.ssa._GatherDefsHandler object at 0x00000196AEF27EE0>
DEBUG 2022-02-07 18:03:05,311 on stmt: j = $phi542.1
DEBUG 2022-02-07 18:03:05,311 on stmt: x = N_fixed + j
DEBUG 2022-02-07 18:03:05,311 on stmt: $558binary_subscr.9 = getitem(value=H_batch, index=j, fn=<built-in function getitem>)
DEBUG 2022-02-07 18:03:05,311 on stmt: $const560.10 = const(float, 0.5)
DEBUG 2022-02-07 18:03:05,311 on stmt: $const564.12 = const(int, 2)
DEBUG 2022-02-07 18:03:05,311 on stmt: $566binary_floor_divide.13 = x // $const564.12
DEBUG 2022-02-07 18:03:05,311 on stmt: $568binary_power.14 = $const560.10 ** $566binary_floor_divide.13
DEBUG 2022-02-07 18:03:05,311 on stmt: $570inplace_multiply.15 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=$558binary_subscr.9, rhs=$568binary_power.14, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-07 18:03:05,311 on stmt: H_batch[j] = $570inplace_multiply.15
DEBUG 2022-02-07 18:03:05,311 on stmt: jump 540
DEBUG 2022-02-07 18:03:05,311 ==== SSA block analysis pass on 580
DEBUG 2022-02-07 18:03:05,311 Running <numba.core.ssa._GatherDefsHandler object at 0x00000196AEF27EE0>
DEBUG 2022-02-07 18:03:05,311 on stmt: $582return_value.1 = cast(value=H_batch)
DEBUG 2022-02-07 18:03:05,311 on stmt: return $582return_value.1
DEBUG 2022-02-07 18:03:05,327 defs defaultdict(<class 'list'>,
            {'$102load_method.44': [<numba.core.ir.Assign object at 0x00000196AEEC55E0>],
             '$104call_method.45': [<numba.core.ir.Assign object at 0x00000196AEEC57F0>],
             '$112load_global.48': [<numba.core.ir.Assign object at 0x00000196AEEC5CA0>],
             '$120load_global.51': [<numba.core.ir.Assign object at 0x00000196AEEC7220>],
             '$122load_attr.52': [<numba.core.ir.Assign object at 0x00000196AEEC73A0>],
             '$128binary_multiply.55': [<numba.core.ir.Assign object at 0x00000196AEEC77F0>],
             '$132binary_add.57': [<numba.core.ir.Assign object at 0x00000196AEEC7A90>],
             '$136binary_add.59': [<numba.core.ir.Assign object at 0x00000196AEEC7D90>],
             '$138load_global.60': [<numba.core.ir.Assign object at 0x00000196AEEC7EE0>],
             '$140load_attr.61': [<numba.core.ir.Assign object at 0x00000196AEEC90A0>],
             '$148load_global.64': [<numba.core.ir.Assign object at 0x00000196AEEC96A0>],
             '$150load_method.65': [<numba.core.ir.Assign object at 0x00000196AEEC9820>],
             '$154call_method.67': [<numba.core.ir.Assign object at 0x00000196AEEC9B50>],
             '$156get_iter.68': [<numba.core.ir.Assign object at 0x00000196AEEC9C40>],
             '$158for_iter.1': [<numba.core.ir.Assign object at 0x00000196AEEC1790>],
             '$158for_iter.2': [<numba.core.ir.Assign object at 0x00000196AEEC35B0>],
             '$158for_iter.3': [<numba.core.ir.Assign object at 0x00000196AEEC53D0>],
             '$164load_global.2': [<numba.core.ir.Assign object at 0x00000196AEEC99D0>],
             '$166load_attr.3': [<numba.core.ir.Assign object at 0x00000196AEEC9E20>],
             '$172binary_multiply.6': [<numba.core.ir.Assign object at 0x00000196AEED12B0>],
             '$176binary_add.8': [<numba.core.ir.Assign object at 0x00000196AEED1550>],
             '$180binary_add.10': [<numba.core.ir.Assign object at 0x00000196AEED1850>],
             '$182load_global.11': [<numba.core.ir.Assign object at 0x00000196AEED19A0>],
             '$184load_attr.12': [<numba.core.ir.Assign object at 0x00000196AEED1B20>],
             '$18build_slice.7': [<numba.core.ir.Assign object at 0x00000196AEEBBA60>],
             '$18build_slice.8': [<numba.core.ir.Assign object at 0x00000196AEEBBB80>],
             '$192load_global.15': [<numba.core.ir.Assign object at 0x00000196AEED4160>],
             '$204load_method.20': [<numba.core.ir.Assign object at 0x00000196AEED48E0>],
             '$20build_tuple.9': [<numba.core.ir.Assign object at 0x00000196AEEBBD30>],
             '$214load_global.23': [<numba.core.ir.Assign object at 0x00000196AEED4FA0>],
             '$222binary_floor_divide.27': [<numba.core.ir.Assign object at 0x00000196AEED55B0>],
             '$224call_function.28': [<numba.core.ir.Assign object at 0x00000196AEED5760>],
             '$226get_iter.29': [<numba.core.ir.Assign object at 0x00000196AEED5880>],
             '$228for_iter.2': [<numba.core.ir.Assign object at 0x00000196AEED4EB0>],
             '$228for_iter.3': [<numba.core.ir.Assign object at 0x00000196AEED5970>],
             '$228for_iter.4': [<numba.core.ir.Assign object at 0x00000196AEED5A90>],
             '$240binary_subscr.7': [<numba.core.ir.Assign object at 0x00000196AEED73D0>],
             '$246binary_subscr.10': [<numba.core.ir.Assign object at 0x00000196AEED7790>],
             '$248build_tuple.11': [<numba.core.ir.Assign object at 0x00000196AEED7910>],
             '$250binary_subscr.12': [<numba.core.ir.Assign object at 0x00000196AEED7A90>],
             '$252inplace_multiply.13': [<numba.core.ir.Assign object at 0x00000196AEED7C10>],
             '$260pred': [<numba.core.ir.Assign object at 0x00000196AEED7FA0>],
             '$268binary_multiply.3': [<numba.core.ir.Assign object at 0x00000196AEEDB4F0>],
             '$282load_global.1': [<numba.core.ir.Assign object at 0x00000196AEEDBD00>],
             '$28load_attr.12': [<numba.core.ir.Assign object at 0x00000196AEEBE280>],
             '$292call_function.6': [<numba.core.ir.Assign object at 0x00000196AEEDD3A0>],
             '$294unpack_sequence.10': [<numba.core.ir.Assign object at 0x00000196AEEDD9A0>],
             '$294unpack_sequence.11': [<numba.core.ir.Assign object at 0x00000196AEEDD4F0>],
             '$294unpack_sequence.7': [<numba.core.ir.Assign object at 0x00000196AEEDD640>],
             '$294unpack_sequence.8': [<numba.core.ir.Assign object at 0x00000196AEEDD760>],
             '$294unpack_sequence.9': [<numba.core.ir.Assign object at 0x00000196AEEDD880>],
             '$304load_global.12': [<numba.core.ir.Assign object at 0x00000196AEEDDF40>],
             '$312load_global.15': [<numba.core.ir.Assign object at 0x00000196AEEDF4C0>],
             '$328load_global.22': [<numba.core.ir.Assign object at 0x00000196AEEDFE80>],
             '$348load_global.31': [<numba.core.ir.Assign object at 0x00000196AEEE1AC0>],
             '$356binary_subscr.35': [<numba.core.ir.Assign object at 0x00000196AEF270A0>],
             '$358binary_multiply.36': [<numba.core.ir.Assign object at 0x00000196AEEE3250>],
             '$364binary_multiply.39': [<numba.core.ir.Assign object at 0x00000196AEEE3670>],
             '$368binary_add.41': [<numba.core.ir.Assign object at 0x00000196AEEE3910>],
             '$372binary_add.43': [<numba.core.ir.Assign object at 0x00000196AEEE3C10>],
             '$374call_function.44': [<numba.core.ir.Assign object at 0x00000196AEEE3DC0>],
             '$376get_iter.45': [<numba.core.ir.Assign object at 0x00000196AEEE3EE0>],
             '$378for_iter.2': [<numba.core.ir.Assign object at 0x00000196AEEDFD90>],
             '$378for_iter.3': [<numba.core.ir.Assign object at 0x00000196AEEE12B0>],
             '$378for_iter.4': [<numba.core.ir.Assign object at 0x00000196AEEE1610>],
             '$396binary_floor_divide.9': [<numba.core.ir.Assign object at 0x00000196AEEE59D0>],
             '$400binary_subtract.11': [<numba.core.ir.Assign object at 0x00000196AEEE5C70>],
             '$40load_method.17': [<numba.core.ir.Assign object at 0x00000196AEEBEAC0>],
             '$412binary_floor_divide.16': [<numba.core.ir.Assign object at 0x00000196AEEE7490>],
             '$418binary_subscr.19': [<numba.core.ir.Assign object at 0x00000196AEEF6E50>],
             '$420build_tuple.20': [<numba.core.ir.Assign object at 0x00000196AEEE7A30>],
             '$422binary_subscr.21': [<numba.core.ir.Assign object at 0x00000196AEEE7BB0>],
             '$42call_method.18': [<numba.core.ir.Assign object at 0x00000196AEEBECD0>],
             '$434binary_modulo.26': [<numba.core.ir.Assign object at 0x00000196AEEE93D0>],
             '$438compare_op.28': [<numba.core.ir.Assign object at 0x00000196AEEE96D0>],
             '$440pred': [<numba.core.ir.Assign object at 0x00000196AEEE9940>],
             '$450binary_subscr.6': [<numba.core.ir.Assign object at 0x00000196AEEE9BB0>],
             '$456binary_multiply.9': [<numba.core.ir.Assign object at 0x00000196AEEE9F70>],
             '$464binary_floor_divide.13': [<numba.core.ir.Assign object at 0x00000196AEEEC4F0>],
             '$466binary_subscr.14': [<numba.core.ir.Assign object at 0x00000196AEEEC670>],
             '$468binary_multiply.15': [<numba.core.ir.Assign object at 0x00000196AEEEC7F0>],
             '$470inplace_add.16': [<numba.core.ir.Assign object at 0x00000196AEEEC970>],
             '$484binary_subscr.6': [<numba.core.ir.Assign object at 0x00000196AEEECE50>],
             '$490binary_multiply.9': [<numba.core.ir.Assign object at 0x00000196AEEEF250>],
             '$496binary_subscr.12': [<numba.core.ir.Assign object at 0x00000196AEEEF610>],
             '$498binary_multiply.13': [<numba.core.ir.Assign object at 0x00000196AEEEF790>],
             '$500inplace_add.14': [<numba.core.ir.Assign object at 0x00000196AEEEF910>],
             '$514inplace_add.3': [<numba.core.ir.Assign object at 0x00000196AEEEFD30>],
             '$522pred': [<numba.core.ir.Assign object at 0x00000196AEEF2280>],
             '$526load_global.0': [<numba.core.ir.Assign object at 0x00000196AEEF24C0>],
             '$530load_attr.2': [<numba.core.ir.Assign object at 0x00000196AEEF2760>],
             '$534binary_subscr.4': [<numba.core.ir.Assign object at 0x00000196AEEF6C40>],
             '$536call_function.5': [<numba.core.ir.Assign object at 0x00000196AEEF2C40>],
             '$538get_iter.6': [<numba.core.ir.Assign object at 0x00000196AEEF2D60>],
             '$540for_iter.1': [<numba.core.ir.Assign object at 0x00000196AEEF40D0>],
             '$540for_iter.2': [<numba.core.ir.Assign object at 0x00000196AEEF41F0>],
             '$540for_iter.3': [<numba.core.ir.Assign object at 0x00000196AEEF4310>],
             '$54binary_multiply.23': [<numba.core.ir.Assign object at 0x00000196AEEC1490>],
             '$558binary_subscr.9': [<numba.core.ir.Assign object at 0x00000196AEEF6070>],
             '$566binary_floor_divide.13': [<numba.core.ir.Assign object at 0x00000196AEEF6610>],
             '$568binary_power.14': [<numba.core.ir.Assign object at 0x00000196AEEF6790>],
             '$56binary_add.24': [<numba.core.ir.Assign object at 0x00000196AEEC1610>],
             '$570inplace_multiply.15': [<numba.core.ir.Assign object at 0x00000196AEEF6910>],
             '$582return_value.1': [<numba.core.ir.Assign object at 0x00000196AEEF6370>],
             '$64load_global.27': [<numba.core.ir.Assign object at 0x00000196AEEC1B20>],
             '$66load_method.28': [<numba.core.ir.Assign object at 0x00000196AEEC1CA0>],
             '$68load_global.29': [<numba.core.ir.Assign object at 0x00000196AEEC1E20>],
             '$70load_method.30': [<numba.core.ir.Assign object at 0x00000196AEEC1FA0>],
             '$74build_list.32': [<numba.core.ir.Assign object at 0x00000196AEEC32B0>],
             '$76call_method.33': [<numba.core.ir.Assign object at 0x00000196AEEC3490>],
             '$80build_tuple.35': [<numba.core.ir.Assign object at 0x00000196AEEC36D0>],
             '$86load_global.37': [<numba.core.ir.Assign object at 0x00000196AEEC3AC0>],
             '$88load_method.38': [<numba.core.ir.Assign object at 0x00000196AEEC3C40>],
             '$94binary_add.41': [<numba.core.ir.Assign object at 0x00000196AEEC50D0>],
             '$const12.4': [<numba.core.ir.Assign object at 0x00000196AEEBB5E0>],
             '$const124.53': [<numba.core.ir.Assign object at 0x00000196AEEC7520>],
             '$const134.58': [<numba.core.ir.Assign object at 0x00000196AEEC7BE0>],
             '$const14.5': [<numba.core.ir.Assign object at 0x00000196AEEBB760>],
             '$const16.6': [<numba.core.ir.Assign object at 0x00000196AEEBB8E0>],
             '$const168.4': [<numba.core.ir.Assign object at 0x00000196AEEC9FA0>],
             '$const178.9': [<numba.core.ir.Assign object at 0x00000196AEED16A0>],
             '$const216.24': [<numba.core.ir.Assign object at 0x00000196AEED5160>],
             '$const220.26': [<numba.core.ir.Assign object at 0x00000196AEED5400>],
             '$const264.1': [<numba.core.ir.Assign object at 0x00000196AEEDB220>],
             '$const30.13': [<numba.core.ir.Assign object at 0x00000196AEEBE400>],
             '$const350.32': [<numba.core.ir.Assign object at 0x00000196AEEE1C40>],
             '$const354.34': [<numba.core.ir.Assign object at 0x00000196AEEE1EE0>],
             '$const36.15': [<numba.core.ir.Assign object at 0x00000196AEEBE820>],
             '$const360.37': [<numba.core.ir.Assign object at 0x00000196AEEE33A0>],
             '$const370.42': [<numba.core.ir.Assign object at 0x00000196AEEE3A60>],
             '$const390.6': [<numba.core.ir.Assign object at 0x00000196AEEE5580>],
             '$const394.8': [<numba.core.ir.Assign object at 0x00000196AEEE5820>],
             '$const4.1': [<numba.core.ir.Assign object at 0x00000196AEEBB0A0>],
             '$const410.15': [<numba.core.ir.Assign object at 0x00000196AEEE72E0>],
             '$const416.18': [<numba.core.ir.Assign object at 0x00000196AEEE7700>],
             '$const432.25': [<numba.core.ir.Assign object at 0x00000196AEEE9220>],
             '$const436.27': [<numba.core.ir.Assign object at 0x00000196AEEE9520>],
             '$const462.12': [<numba.core.ir.Assign object at 0x00000196AEEEC340>],
             '$const50.21': [<numba.core.ir.Assign object at 0x00000196AEEC11C0>],
             '$const532.3': [<numba.core.ir.Assign object at 0x00000196AEEF28E0>],
             '$const560.10': [<numba.core.ir.Assign object at 0x00000196AEEF61C0>],
             '$const564.12': [<numba.core.ir.Assign object at 0x00000196AEEF6460>],
             '$const92.40': [<numba.core.ir.Assign object at 0x00000196AEEC3EE0>],
             '$phi158.0': [<numba.core.ir.Assign object at 0x00000196AEEBB3D0>],
             '$phi162.1': [<numba.core.ir.Assign object at 0x00000196AEEC10D0>],
             '$phi228.1': [<numba.core.ir.Assign object at 0x00000196AEED1190>],
             '$phi230.2': [<numba.core.ir.Assign object at 0x00000196AEED47F0>],
             '$phi378.1': [<numba.core.ir.Assign object at 0x00000196AEEDD130>],
             '$phi380.2': [<numba.core.ir.Assign object at 0x00000196AEEDF9D0>],
             '$phi540.0': [<numba.core.ir.Assign object at 0x00000196AEEF25E0>],
             '$phi542.1': [<numba.core.ir.Assign object at 0x00000196AEEF2FD0>],
             'A': [<numba.core.ir.Assign object at 0x00000196AEE971F0>],
             'AX_S': [<numba.core.ir.Assign object at 0x00000196AEEDDA60>],
             'D': [<numba.core.ir.Assign object at 0x00000196AEE973D0>],
             'D_S': [<numba.core.ir.Assign object at 0x00000196AEEDDCA0>],
             'E': [<numba.core.ir.Assign object at 0x00000196AEEDF280>],
             'H_batch': [<numba.core.ir.Assign object at 0x00000196AEEC9520>,
                         <numba.core.ir.Assign object at 0x00000196AEEEFDF0>],
             'Hnew': [<numba.core.ir.Assign object at 0x00000196AEED1FA0>],
             'N': [<numba.core.ir.Assign object at 0x00000196AEEE5310>],
             'N_det': [<numba.core.ir.Assign object at 0x00000196AEEE3550>],
             'N_fixed': [<numba.core.ir.Assign object at 0x00000196AEEBEDF0>],
             'N_max': [<numba.core.ir.Assign object at 0x00000196AEEC18B0>],
             'XD_S': [<numba.core.ir.Assign object at 0x00000196AEEDDB80>],
             'batch_max': [<numba.core.ir.Assign object at 0x00000196AEE97A30>],
             'binom_prod': [<numba.core.ir.Assign object at 0x00000196AEED4D00>,
                            <numba.core.ir.Assign object at 0x00000196AEED7CD0>],
             'binoms': [<numba.core.ir.Assign object at 0x00000196AEEC5FA0>],
             'bool260': [<numba.core.ir.Assign object at 0x00000196AEED7E80>],
             'bool440': [<numba.core.ir.Assign object at 0x00000196AEEE9820>],
             'bool522': [<numba.core.ir.Assign object at 0x00000196AEEF2160>],
             'delta': [<numba.core.ir.Assign object at 0x00000196AEEDB790>,
                       <numba.core.ir.Assign object at 0x00000196AEEDBAF0>],
             'edge_reps': [<numba.core.ir.Assign object at 0x00000196AEEC38B0>],
             'edges_sum': [<numba.core.ir.Assign object at 0x00000196AEED4AF0>],
             'f_even': [<numba.core.ir.Assign object at 0x00000196AEEDFC40>],
             'f_odd': [<numba.core.ir.Assign object at 0x00000196AEEE1880>],
             'fixed_edge_reps': [<numba.core.ir.Assign object at 0x00000196AEE97BB0>],
             'glynn': [<numba.core.ir.Assign object at 0x00000196AEE97DC0>],
             'i': [<numba.core.ir.Assign object at 0x00000196AEED5D60>],
             'j': [<numba.core.ir.Assign object at 0x00000196AEE97850>,
                   <numba.core.ir.Assign object at 0x00000196AEEF45B0>],
             'kept_edges': [<numba.core.ir.Assign object at 0x00000196AEED4580>],
             'max_binom': [<numba.core.ir.Assign object at 0x00000196AEEC5A30>],
             'n': [<numba.core.ir.Assign object at 0x00000196AEF27430>],
             'n_det_binom_prod': [<numba.core.ir.Assign object at 0x00000196AEEE7E50>],
             'oddV': [<numba.core.ir.Assign object at 0x00000196AEF27340>],
             'oddVX_S': [<numba.core.ir.Assign object at 0x00000196AEEDDDC0>],
             'odd_cutoff': [<numba.core.ir.Assign object at 0x00000196AEE97CA0>],
             'oddloop': [<numba.core.ir.Assign object at 0x00000196AEF27250>],
             'plus_minus': [<numba.core.ir.Assign object at 0x00000196AEEE5DF0>],
             'steps': [<numba.core.ir.Assign object at 0x00000196AEEC52B0>],
             'x': [<numba.core.ir.Assign object at 0x00000196AEEF4970>]})
DEBUG 2022-02-07 18:03:05,327 SSA violators {'delta', 'binom_prod', 'H_batch', 'j'}
DEBUG 2022-02-07 18:03:05,327 Fix SSA violator on var delta
DEBUG 2022-02-07 18:03:05,327 ==== SSA block rewrite pass on 0
DEBUG 2022-02-07 18:03:05,327 Running <numba.core.ssa._FreshVarHandler object at 0x00000196AEE975E0>
DEBUG 2022-02-07 18:03:05,327 on stmt: A = arg(0, name=A)
DEBUG 2022-02-07 18:03:05,327 on stmt: D = arg(1, name=D)
DEBUG 2022-02-07 18:03:05,327 on stmt: fixed_edge_reps = arg(2, name=fixed_edge_reps)
DEBUG 2022-02-07 18:03:05,327 on stmt: batch_max = arg(3, name=batch_max)
DEBUG 2022-02-07 18:03:05,327 on stmt: odd_cutoff = arg(4, name=odd_cutoff)
DEBUG 2022-02-07 18:03:05,327 on stmt: glynn = arg(5, name=glynn)
DEBUG 2022-02-07 18:03:05,327 on stmt: $const4.1 = const(int, 0)
DEBUG 2022-02-07 18:03:05,327 on stmt: oddloop = static_getitem(value=D, index=0, index_var=$const4.1, fn=<built-in function getitem>)
DEBUG 2022-02-07 18:03:05,327 on stmt: $const12.4 = const(int, 0)
DEBUG 2022-02-07 18:03:05,327 on stmt: $const14.5 = const(NoneType, None)
DEBUG 2022-02-07 18:03:05,327 on stmt: $const16.6 = const(NoneType, None)
DEBUG 2022-02-07 18:03:05,327 on stmt: $18build_slice.7 = global(slice: <class 'slice'>)
DEBUG 2022-02-07 18:03:05,327 on stmt: $18build_slice.8 = call $18build_slice.7($const14.5, $const16.6, func=$18build_slice.7, args=(Var($const14.5, loop_hafnian_batch.py:21), Var($const16.6, loop_hafnian_batch.py:21)), kws=(), vararg=None, target=None)
DEBUG 2022-02-07 18:03:05,327 on stmt: $20build_tuple.9 = build_tuple(items=[Var($const12.4, loop_hafnian_batch.py:21), Var($18build_slice.8, loop_hafnian_batch.py:21)])
DEBUG 2022-02-07 18:03:05,327 on stmt: oddV = static_getitem(value=A, index=(0, slice(None, None, None)), index_var=$20build_tuple.9, fn=<built-in function getitem>)
DEBUG 2022-02-07 18:03:05,327 on stmt: $28load_attr.12 = getattr(value=A, attr=shape)
DEBUG 2022-02-07 18:03:05,327 on stmt: $const30.13 = const(int, 0)
DEBUG 2022-02-07 18:03:05,327 on stmt: n = static_getitem(value=$28load_attr.12, index=0, index_var=$const30.13, fn=<built-in function getitem>)
DEBUG 2022-02-07 18:03:05,327 on stmt: $const36.15 = const(int, 2)
DEBUG 2022-02-07 18:03:05,327 on stmt: $40load_method.17 = getattr(value=fixed_edge_reps, attr=sum)
DEBUG 2022-02-07 18:03:05,327 on stmt: $42call_method.18 = call $40load_method.17(func=$40load_method.17, args=[], kws=(), vararg=None, target=None)
DEBUG 2022-02-07 18:03:05,327 on stmt: N_fixed = $const36.15 * $42call_method.18
DEBUG 2022-02-07 18:03:05,327 on stmt: $const50.21 = const(int, 2)
DEBUG 2022-02-07 18:03:05,327 on stmt: $54binary_multiply.23 = $const50.21 * batch_max
DEBUG 2022-02-07 18:03:05,327 on stmt: $56binary_add.24 = N_fixed + $54binary_multiply.23
DEBUG 2022-02-07 18:03:05,327 on stmt: N_max = $56binary_add.24 + odd_cutoff
DEBUG 2022-02-07 18:03:05,327 on stmt: $64load_global.27 = global(np: <module 'numpy' from 'C:\\Users\\zl4821\\Anaconda3\\envs\\GBS\\lib\\site-packages\\numpy\\__init__.py'>)
DEBUG 2022-02-07 18:03:05,327 on stmt: $66load_method.28 = getattr(value=$64load_global.27, attr=concatenate)
DEBUG 2022-02-07 18:03:05,327 on stmt: $68load_global.29 = global(np: <module 'numpy' from 'C:\\Users\\zl4821\\Anaconda3\\envs\\GBS\\lib\\site-packages\\numpy\\__init__.py'>)
DEBUG 2022-02-07 18:03:05,327 on stmt: $70load_method.30 = getattr(value=$68load_global.29, attr=array)
DEBUG 2022-02-07 18:03:05,327 on stmt: $74build_list.32 = build_list(items=[Var(batch_max, loop_hafnian_batch.py:20)])
DEBUG 2022-02-07 18:03:05,327 on stmt: $76call_method.33 = call $70load_method.30($74build_list.32, func=$70load_method.30, args=[Var($74build_list.32, loop_hafnian_batch.py:28)], kws=(), vararg=None, target=None)
DEBUG 2022-02-07 18:03:05,327 on stmt: $80build_tuple.35 = build_tuple(items=[Var($76call_method.33, loop_hafnian_batch.py:28), Var(fixed_edge_reps, loop_hafnian_batch.py:20)])
DEBUG 2022-02-07 18:03:05,327 on stmt: edge_reps = call $66load_method.28($80build_tuple.35, func=$66load_method.28, args=[Var($80build_tuple.35, loop_hafnian_batch.py:28)], kws=(), vararg=None, target=None)
DEBUG 2022-02-07 18:03:05,327 on stmt: $86load_global.37 = global(np: <module 'numpy' from 'C:\\Users\\zl4821\\Anaconda3\\envs\\GBS\\lib\\site-packages\\numpy\\__init__.py'>)
DEBUG 2022-02-07 18:03:05,327 on stmt: $88load_method.38 = getattr(value=$86load_global.37, attr=prod)
DEBUG 2022-02-07 18:03:05,327 on stmt: $const92.40 = const(int, 1)
DEBUG 2022-02-07 18:03:05,327 on stmt: $94binary_add.41 = edge_reps + $const92.40
DEBUG 2022-02-07 18:03:05,327 on stmt: steps = call $88load_method.38($94binary_add.41, func=$88load_method.38, args=[Var($94binary_add.41, loop_hafnian_batch.py:29)], kws=(), vararg=None, target=None)
DEBUG 2022-02-07 18:03:05,327 on stmt: $102load_method.44 = getattr(value=edge_reps, attr=max)
DEBUG 2022-02-07 18:03:05,327 on stmt: $104call_method.45 = call $102load_method.44(func=$102load_method.44, args=[], kws=(), vararg=None, target=None)
DEBUG 2022-02-07 18:03:05,327 on stmt: max_binom = $104call_method.45 + odd_cutoff
DEBUG 2022-02-07 18:03:05,327 on stmt: $112load_global.48 = global(precompute_binoms: CPUDispatcher(<function precompute_binoms at 0x00000196AE6F6CA0>))
DEBUG 2022-02-07 18:03:05,343 on stmt: binoms = call $112load_global.48(max_binom, func=$112load_global.48, args=[Var(max_binom, loop_hafnian_batch.py:31)], kws=(), vararg=None, target=None)
DEBUG 2022-02-07 18:03:05,343 on stmt: $120load_global.51 = global(np: <module 'numpy' from 'C:\\Users\\zl4821\\Anaconda3\\envs\\GBS\\lib\\site-packages\\numpy\\__init__.py'>)
DEBUG 2022-02-07 18:03:05,343 on stmt: $122load_attr.52 = getattr(value=$120load_global.51, attr=zeros)
DEBUG 2022-02-07 18:03:05,343 on stmt: $const124.53 = const(int, 2)
DEBUG 2022-02-07 18:03:05,343 on stmt: $128binary_multiply.55 = $const124.53 * batch_max
DEBUG 2022-02-07 18:03:05,343 on stmt: $132binary_add.57 = $128binary_multiply.55 + odd_cutoff
DEBUG 2022-02-07 18:03:05,343 on stmt: $const134.58 = const(int, 1)
DEBUG 2022-02-07 18:03:05,343 on stmt: $136binary_add.59 = $132binary_add.57 + $const134.58
DEBUG 2022-02-07 18:03:05,343 on stmt: $138load_global.60 = global(np: <module 'numpy' from 'C:\\Users\\zl4821\\Anaconda3\\envs\\GBS\\lib\\site-packages\\numpy\\__init__.py'>)
DEBUG 2022-02-07 18:03:05,343 on stmt: $140load_attr.61 = getattr(value=$138load_global.60, attr=complex128)
DEBUG 2022-02-07 18:03:05,343 on stmt: H_batch = call $122load_attr.52($136binary_add.59, func=$122load_attr.52, args=[Var($136binary_add.59, loop_hafnian_batch.py:34)], kws=[('dtype', Var($140load_attr.61, loop_hafnian_batch.py:34))], vararg=None, target=None)
DEBUG 2022-02-07 18:03:05,343 on stmt: $148load_global.64 = global(numba: <module 'numba' from 'C:\\Users\\zl4821\\Anaconda3\\envs\\GBS\\lib\\site-packages\\numba\\__init__.py'>)
DEBUG 2022-02-07 18:03:05,343 on stmt: $150load_method.65 = getattr(value=$148load_global.64, attr=prange)
DEBUG 2022-02-07 18:03:05,343 on stmt: $154call_method.67 = call $150load_method.65(steps, func=$150load_method.65, args=[Var(steps, loop_hafnian_batch.py:29)], kws=(), vararg=None, target=None)
DEBUG 2022-02-07 18:03:05,343 on stmt: $156get_iter.68 = getiter(value=$154call_method.67)
DEBUG 2022-02-07 18:03:05,343 on stmt: $phi158.0 = $156get_iter.68
DEBUG 2022-02-07 18:03:05,343 on stmt: jump 158
DEBUG 2022-02-07 18:03:05,343 ==== SSA block rewrite pass on 158
DEBUG 2022-02-07 18:03:05,343 Running <numba.core.ssa._FreshVarHandler object at 0x00000196AEE975E0>
DEBUG 2022-02-07 18:03:05,343 on stmt: $158for_iter.1 = iternext(value=$phi158.0)
DEBUG 2022-02-07 18:03:05,343 on stmt: $158for_iter.2 = pair_first(value=$158for_iter.1)
DEBUG 2022-02-07 18:03:05,343 on stmt: $158for_iter.3 = pair_second(value=$158for_iter.1)
DEBUG 2022-02-07 18:03:05,343 on stmt: $phi162.1 = $158for_iter.2
DEBUG 2022-02-07 18:03:05,343 on stmt: branch $158for_iter.3, 162, 520
DEBUG 2022-02-07 18:03:05,343 ==== SSA block rewrite pass on 162
DEBUG 2022-02-07 18:03:05,343 Running <numba.core.ssa._FreshVarHandler object at 0x00000196AEE975E0>
DEBUG 2022-02-07 18:03:05,343 on stmt: j = $phi162.1
DEBUG 2022-02-07 18:03:05,343 on stmt: $164load_global.2 = global(np: <module 'numpy' from 'C:\\Users\\zl4821\\Anaconda3\\envs\\GBS\\lib\\site-packages\\numpy\\__init__.py'>)
DEBUG 2022-02-07 18:03:05,343 on stmt: $166load_attr.3 = getattr(value=$164load_global.2, attr=zeros)
DEBUG 2022-02-07 18:03:05,343 on stmt: $const168.4 = const(int, 2)
DEBUG 2022-02-07 18:03:05,343 on stmt: $172binary_multiply.6 = $const168.4 * batch_max
DEBUG 2022-02-07 18:03:05,343 on stmt: $176binary_add.8 = $172binary_multiply.6 + odd_cutoff
DEBUG 2022-02-07 18:03:05,343 on stmt: $const178.9 = const(int, 1)
DEBUG 2022-02-07 18:03:05,343 on stmt: $180binary_add.10 = $176binary_add.8 + $const178.9
DEBUG 2022-02-07 18:03:05,343 on stmt: $182load_global.11 = global(np: <module 'numpy' from 'C:\\Users\\zl4821\\Anaconda3\\envs\\GBS\\lib\\site-packages\\numpy\\__init__.py'>)
DEBUG 2022-02-07 18:03:05,343 on stmt: $184load_attr.12 = getattr(value=$182load_global.11, attr=complex128)
DEBUG 2022-02-07 18:03:05,343 on stmt: Hnew = call $166load_attr.3($180binary_add.10, func=$166load_attr.3, args=[Var($180binary_add.10, loop_hafnian_batch.py:37)], kws=[('dtype', Var($184load_attr.12, loop_hafnian_batch.py:37))], vararg=None, target=None)
DEBUG 2022-02-07 18:03:05,343 on stmt: $192load_global.15 = global(find_kept_edges: CPUDispatcher(<function find_kept_edges at 0x00000196AE71E160>))
DEBUG 2022-02-07 18:03:05,343 on stmt: kept_edges = call $192load_global.15(j, edge_reps, func=$192load_global.15, args=[Var(j, loop_hafnian_batch.py:35), Var(edge_reps, loop_hafnian_batch.py:28)], kws=(), vararg=None, target=None)
DEBUG 2022-02-07 18:03:05,343 on stmt: $204load_method.20 = getattr(value=kept_edges, attr=sum)
DEBUG 2022-02-07 18:03:05,343 on stmt: edges_sum = call $204load_method.20(func=$204load_method.20, args=[], kws=(), vararg=None, target=None)
DEBUG 2022-02-07 18:03:05,343 on stmt: binom_prod = const(float, 1.0)
DEBUG 2022-02-07 18:03:05,343 on stmt: $214load_global.23 = global(range: <class 'range'>)
DEBUG 2022-02-07 18:03:05,343 on stmt: $const216.24 = const(int, 1)
DEBUG 2022-02-07 18:03:05,343 on stmt: $const220.26 = const(int, 2)
DEBUG 2022-02-07 18:03:05,343 on stmt: $222binary_floor_divide.27 = n // $const220.26
DEBUG 2022-02-07 18:03:05,343 on stmt: $224call_function.28 = call $214load_global.23($const216.24, $222binary_floor_divide.27, func=$214load_global.23, args=[Var($const216.24, loop_hafnian_batch.py:43), Var($222binary_floor_divide.27, loop_hafnian_batch.py:43)], kws=(), vararg=None, target=None)
DEBUG 2022-02-07 18:03:05,343 on stmt: $226get_iter.29 = getiter(value=$224call_function.28)
DEBUG 2022-02-07 18:03:05,343 on stmt: $phi228.1 = $226get_iter.29
DEBUG 2022-02-07 18:03:05,343 on stmt: jump 228
DEBUG 2022-02-07 18:03:05,343 ==== SSA block rewrite pass on 228
DEBUG 2022-02-07 18:03:05,343 Running <numba.core.ssa._FreshVarHandler object at 0x00000196AEE975E0>
DEBUG 2022-02-07 18:03:05,343 on stmt: $228for_iter.2 = iternext(value=$phi228.1)
DEBUG 2022-02-07 18:03:05,343 on stmt: $228for_iter.3 = pair_first(value=$228for_iter.2)
DEBUG 2022-02-07 18:03:05,343 on stmt: $228for_iter.4 = pair_second(value=$228for_iter.2)
DEBUG 2022-02-07 18:03:05,343 on stmt: $phi230.2 = $228for_iter.3
DEBUG 2022-02-07 18:03:05,343 on stmt: branch $228for_iter.4, 230, 258
DEBUG 2022-02-07 18:03:05,343 ==== SSA block rewrite pass on 230
DEBUG 2022-02-07 18:03:05,343 Running <numba.core.ssa._FreshVarHandler object at 0x00000196AEE975E0>
DEBUG 2022-02-07 18:03:05,343 on stmt: i = $phi230.2
DEBUG 2022-02-07 18:03:05,343 on stmt: $240binary_subscr.7 = getitem(value=edge_reps, index=i, fn=<built-in function getitem>)
DEBUG 2022-02-07 18:03:05,343 on stmt: $246binary_subscr.10 = getitem(value=kept_edges, index=i, fn=<built-in function getitem>)
DEBUG 2022-02-07 18:03:05,343 on stmt: $248build_tuple.11 = build_tuple(items=[Var($240binary_subscr.7, loop_hafnian_batch.py:44), Var($246binary_subscr.10, loop_hafnian_batch.py:44)])
DEBUG 2022-02-07 18:03:05,343 on stmt: $250binary_subscr.12 = getitem(value=binoms, index=$248build_tuple.11, fn=<built-in function getitem>)
DEBUG 2022-02-07 18:03:05,343 on stmt: $252inplace_multiply.13 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=binom_prod, rhs=$250binary_subscr.12, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-07 18:03:05,343 on stmt: binom_prod = $252inplace_multiply.13
DEBUG 2022-02-07 18:03:05,343 on stmt: jump 228
DEBUG 2022-02-07 18:03:05,343 ==== SSA block rewrite pass on 258
DEBUG 2022-02-07 18:03:05,343 Running <numba.core.ssa._FreshVarHandler object at 0x00000196AEE975E0>
DEBUG 2022-02-07 18:03:05,343 on stmt: bool260 = global(bool: <class 'bool'>)
DEBUG 2022-02-07 18:03:05,343 on stmt: $260pred = call bool260(glynn, func=bool260, args=(Var(glynn, loop_hafnian_batch.py:20),), kws=(), vararg=None, target=None)
DEBUG 2022-02-07 18:03:05,343 on stmt: branch $260pred, 264, 278
DEBUG 2022-02-07 18:03:05,343 ==== SSA block rewrite pass on 264
DEBUG 2022-02-07 18:03:05,343 Running <numba.core.ssa._FreshVarHandler object at 0x00000196AEE975E0>
DEBUG 2022-02-07 18:03:05,343 on stmt: $const264.1 = const(int, 2)
DEBUG 2022-02-07 18:03:05,343 on stmt: $268binary_multiply.3 = $const264.1 * kept_edges
DEBUG 2022-02-07 18:03:05,343 on stmt: delta = $268binary_multiply.3 - edge_reps
DEBUG 2022-02-07 18:03:05,343 first assign: delta
DEBUG 2022-02-07 18:03:05,343 replaced with: delta = $268binary_multiply.3 - edge_reps
DEBUG 2022-02-07 18:03:05,343 on stmt: jump 282
DEBUG 2022-02-07 18:03:05,343 ==== SSA block rewrite pass on 278
DEBUG 2022-02-07 18:03:05,343 Running <numba.core.ssa._FreshVarHandler object at 0x00000196AEE975E0>
DEBUG 2022-02-07 18:03:05,358 on stmt: delta = kept_edges
DEBUG 2022-02-07 18:03:05,358 replaced with: delta.1 = kept_edges
DEBUG 2022-02-07 18:03:05,358 on stmt: jump 282
DEBUG 2022-02-07 18:03:05,358 ==== SSA block rewrite pass on 282
DEBUG 2022-02-07 18:03:05,358 Running <numba.core.ssa._FreshVarHandler object at 0x00000196AEE975E0>
DEBUG 2022-02-07 18:03:05,358 on stmt: $282load_global.1 = global(get_submatrices: CPUDispatcher(<function get_submatrices at 0x00000196AE71E670>))
DEBUG 2022-02-07 18:03:05,358 on stmt: $292call_function.6 = call $282load_global.1(delta, A, D, oddV, func=$282load_global.1, args=[Var(delta, loop_hafnian_batch.py:47), Var(A, loop_hafnian_batch.py:20), Var(D, loop_hafnian_batch.py:20), Var(oddV, loop_hafnian_batch.py:21)], kws=(), vararg=None, target=None)
DEBUG 2022-02-07 18:03:05,358 on stmt: $294unpack_sequence.11 = exhaust_iter(value=$292call_function.6, count=4)
DEBUG 2022-02-07 18:03:05,358 on stmt: $294unpack_sequence.7 = static_getitem(value=$294unpack_sequence.11, index=0, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-02-07 18:03:05,358 on stmt: $294unpack_sequence.8 = static_getitem(value=$294unpack_sequence.11, index=1, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-02-07 18:03:05,358 on stmt: $294unpack_sequence.9 = static_getitem(value=$294unpack_sequence.11, index=2, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-02-07 18:03:05,358 on stmt: $294unpack_sequence.10 = static_getitem(value=$294unpack_sequence.11, index=3, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-02-07 18:03:05,358 on stmt: AX_S = $294unpack_sequence.7
DEBUG 2022-02-07 18:03:05,358 on stmt: XD_S = $294unpack_sequence.8
DEBUG 2022-02-07 18:03:05,358 on stmt: D_S = $294unpack_sequence.9
DEBUG 2022-02-07 18:03:05,358 on stmt: oddVX_S = $294unpack_sequence.10
DEBUG 2022-02-07 18:03:05,358 on stmt: $304load_global.12 = global(eigvals: CPUDispatcher(<function eigvals at 0x00000196AE71EB80>))
DEBUG 2022-02-07 18:03:05,358 on stmt: E = call $304load_global.12(AX_S, func=$304load_global.12, args=[Var(AX_S, loop_hafnian_batch.py:51)], kws=(), vararg=None, target=None)
DEBUG 2022-02-07 18:03:05,358 on stmt: $312load_global.15 = global(f_loop: CPUDispatcher(<function f_loop at 0x00000196AE71E310>))
DEBUG 2022-02-07 18:03:05,358 on stmt: f_even = call $312load_global.15(E, AX_S, XD_S, D_S, N_max, func=$312load_global.15, args=[Var(E, loop_hafnian_batch.py:53), Var(AX_S, loop_hafnian_batch.py:51), Var(XD_S, loop_hafnian_batch.py:51), Var(D_S, loop_hafnian_batch.py:51), Var(N_max, loop_hafnian_batch.py:26)], kws=(), vararg=None, target=None)
DEBUG 2022-02-07 18:03:05,358 on stmt: $328load_global.22 = global(f_loop_odd: CPUDispatcher(<function f_loop_odd at 0x00000196AE71E4C0>))
DEBUG 2022-02-07 18:03:05,358 on stmt: f_odd = call $328load_global.22(E, AX_S, XD_S, D_S, N_max, oddloop, oddVX_S, func=$328load_global.22, args=[Var(E, loop_hafnian_batch.py:53), Var(AX_S, loop_hafnian_batch.py:51), Var(XD_S, loop_hafnian_batch.py:51), Var(D_S, loop_hafnian_batch.py:51), Var(N_max, loop_hafnian_batch.py:26), Var(oddloop, loop_hafnian_batch.py:20), Var(oddVX_S, loop_hafnian_batch.py:51)], kws=(), vararg=None, target=None)
DEBUG 2022-02-07 18:03:05,358 on stmt: $348load_global.31 = global(range: <class 'range'>)
DEBUG 2022-02-07 18:03:05,358 on stmt: $const350.32 = const(int, 2)
DEBUG 2022-02-07 18:03:05,358 on stmt: $const354.34 = const(int, 0)
DEBUG 2022-02-07 18:03:05,358 on stmt: $356binary_subscr.35 = static_getitem(value=kept_edges, index=0, index_var=$const354.34, fn=<built-in function getitem>)
DEBUG 2022-02-07 18:03:05,358 on stmt: $358binary_multiply.36 = $const350.32 * $356binary_subscr.35
DEBUG 2022-02-07 18:03:05,358 on stmt: $const360.37 = const(int, 2)
DEBUG 2022-02-07 18:03:05,358 on stmt: $364binary_multiply.39 = $const360.37 * batch_max
DEBUG 2022-02-07 18:03:05,358 on stmt: $368binary_add.41 = $364binary_multiply.39 + odd_cutoff
DEBUG 2022-02-07 18:03:05,358 on stmt: $const370.42 = const(int, 1)
DEBUG 2022-02-07 18:03:05,365 on stmt: $372binary_add.43 = $368binary_add.41 + $const370.42
DEBUG 2022-02-07 18:03:05,365 on stmt: $374call_function.44 = call $348load_global.31($358binary_multiply.36, $372binary_add.43, func=$348load_global.31, args=[Var($358binary_multiply.36, loop_hafnian_batch.py:58), Var($372binary_add.43, loop_hafnian_batch.py:58)], kws=(), vararg=None, target=None)
DEBUG 2022-02-07 18:03:05,365 on stmt: $376get_iter.45 = getiter(value=$374call_function.44)
DEBUG 2022-02-07 18:03:05,365 on stmt: $phi378.1 = $376get_iter.45
DEBUG 2022-02-07 18:03:05,365 on stmt: jump 378
DEBUG 2022-02-07 18:03:05,365 ==== SSA block rewrite pass on 378
DEBUG 2022-02-07 18:03:05,365 Running <numba.core.ssa._FreshVarHandler object at 0x00000196AEE975E0>
DEBUG 2022-02-07 18:03:05,365 on stmt: $378for_iter.2 = iternext(value=$phi378.1)
DEBUG 2022-02-07 18:03:05,365 on stmt: $378for_iter.3 = pair_first(value=$378for_iter.2)
DEBUG 2022-02-07 18:03:05,365 on stmt: $378for_iter.4 = pair_second(value=$378for_iter.2)
DEBUG 2022-02-07 18:03:05,365 on stmt: $phi380.2 = $378for_iter.3
DEBUG 2022-02-07 18:03:05,365 on stmt: branch $378for_iter.4, 380, 510
DEBUG 2022-02-07 18:03:05,365 ==== SSA block rewrite pass on 380
DEBUG 2022-02-07 18:03:05,365 Running <numba.core.ssa._FreshVarHandler object at 0x00000196AEE975E0>
DEBUG 2022-02-07 18:03:05,365 on stmt: N_det = $phi380.2
DEBUG 2022-02-07 18:03:05,365 on stmt: N = N_fixed + N_det
DEBUG 2022-02-07 18:03:05,365 on stmt: $const390.6 = const(float, -1.0)
DEBUG 2022-02-07 18:03:05,365 on stmt: $const394.8 = const(int, 2)
DEBUG 2022-02-07 18:03:05,365 on stmt: $396binary_floor_divide.9 = N // $const394.8
DEBUG 2022-02-07 18:03:05,365 on stmt: $400binary_subtract.11 = $396binary_floor_divide.9 - edges_sum
DEBUG 2022-02-07 18:03:05,365 on stmt: plus_minus = $const390.6 ** $400binary_subtract.11
DEBUG 2022-02-07 18:03:05,365 on stmt: $const410.15 = const(int, 2)
DEBUG 2022-02-07 18:03:05,365 on stmt: $412binary_floor_divide.16 = N_det // $const410.15
DEBUG 2022-02-07 18:03:05,365 on stmt: $const416.18 = const(int, 0)
DEBUG 2022-02-07 18:03:05,365 on stmt: $418binary_subscr.19 = static_getitem(value=kept_edges, index=0, index_var=$const416.18, fn=<built-in function getitem>)
DEBUG 2022-02-07 18:03:05,365 on stmt: $420build_tuple.20 = build_tuple(items=[Var($412binary_floor_divide.16, loop_hafnian_batch.py:62), Var($418binary_subscr.19, loop_hafnian_batch.py:62)])
DEBUG 2022-02-07 18:03:05,365 on stmt: $422binary_subscr.21 = getitem(value=binoms, index=$420build_tuple.20, fn=<built-in function getitem>)
DEBUG 2022-02-07 18:03:05,365 on stmt: n_det_binom_prod = $422binary_subscr.21 * binom_prod
DEBUG 2022-02-07 18:03:05,365 on stmt: $const432.25 = const(int, 2)
DEBUG 2022-02-07 18:03:05,365 on stmt: $434binary_modulo.26 = N_det % $const432.25
DEBUG 2022-02-07 18:03:05,365 on stmt: $const436.27 = const(int, 0)
DEBUG 2022-02-07 18:03:05,365 on stmt: $438compare_op.28 = $434binary_modulo.26 == $const436.27
DEBUG 2022-02-07 18:03:05,365 on stmt: bool440 = global(bool: <class 'bool'>)
DEBUG 2022-02-07 18:03:05,365 on stmt: $440pred = call bool440($438compare_op.28, func=bool440, args=(Var($438compare_op.28, loop_hafnian_batch.py:64),), kws=(), vararg=None, target=None)
DEBUG 2022-02-07 18:03:05,365 on stmt: branch $440pred, 444, 478
DEBUG 2022-02-07 18:03:05,365 ==== SSA block rewrite pass on 444
DEBUG 2022-02-07 18:03:05,365 Running <numba.core.ssa._FreshVarHandler object at 0x00000196AEE975E0>
DEBUG 2022-02-07 18:03:05,365 on stmt: $450binary_subscr.6 = getitem(value=Hnew, index=N_det, fn=<built-in function getitem>)
DEBUG 2022-02-07 18:03:05,365 on stmt: $456binary_multiply.9 = n_det_binom_prod * plus_minus
DEBUG 2022-02-07 18:03:05,365 on stmt: $const462.12 = const(int, 2)
DEBUG 2022-02-07 18:03:05,365 on stmt: $464binary_floor_divide.13 = N // $const462.12
DEBUG 2022-02-07 18:03:05,365 on stmt: $466binary_subscr.14 = getitem(value=f_even, index=$464binary_floor_divide.13, fn=<built-in function getitem>)
DEBUG 2022-02-07 18:03:05,365 on stmt: $468binary_multiply.15 = $456binary_multiply.9 * $466binary_subscr.14
DEBUG 2022-02-07 18:03:05,365 on stmt: $470inplace_add.16 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$450binary_subscr.6, rhs=$468binary_multiply.15, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-07 18:03:05,365 on stmt: Hnew[N_det] = $470inplace_add.16
DEBUG 2022-02-07 18:03:05,365 on stmt: jump 506
DEBUG 2022-02-07 18:03:05,365 ==== SSA block rewrite pass on 478
DEBUG 2022-02-07 18:03:05,365 Running <numba.core.ssa._FreshVarHandler object at 0x00000196AEE975E0>
DEBUG 2022-02-07 18:03:05,365 on stmt: $484binary_subscr.6 = getitem(value=Hnew, index=N_det, fn=<built-in function getitem>)
DEBUG 2022-02-07 18:03:05,365 on stmt: $490binary_multiply.9 = n_det_binom_prod * plus_minus
DEBUG 2022-02-07 18:03:05,365 on stmt: $496binary_subscr.12 = getitem(value=f_odd, index=N, fn=<built-in function getitem>)
DEBUG 2022-02-07 18:03:05,365 on stmt: $498binary_multiply.13 = $490binary_multiply.9 * $496binary_subscr.12
DEBUG 2022-02-07 18:03:05,365 on stmt: $500inplace_add.14 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$484binary_subscr.6, rhs=$498binary_multiply.13, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-07 18:03:05,365 on stmt: Hnew[N_det] = $500inplace_add.14
DEBUG 2022-02-07 18:03:05,365 on stmt: jump 506
DEBUG 2022-02-07 18:03:05,365 ==== SSA block rewrite pass on 506
DEBUG 2022-02-07 18:03:05,365 Running <numba.core.ssa._FreshVarHandler object at 0x00000196AEE975E0>
DEBUG 2022-02-07 18:03:05,365 on stmt: jump 378
DEBUG 2022-02-07 18:03:05,365 ==== SSA block rewrite pass on 510
DEBUG 2022-02-07 18:03:05,365 Running <numba.core.ssa._FreshVarHandler object at 0x00000196AEE975E0>
DEBUG 2022-02-07 18:03:05,365 on stmt: $514inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=H_batch, rhs=Hnew, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-07 18:03:05,365 on stmt: H_batch = $514inplace_add.3
DEBUG 2022-02-07 18:03:05,365 on stmt: jump 158
DEBUG 2022-02-07 18:03:05,365 ==== SSA block rewrite pass on 520
DEBUG 2022-02-07 18:03:05,365 Running <numba.core.ssa._FreshVarHandler object at 0x00000196AEE975E0>
DEBUG 2022-02-07 18:03:05,365 on stmt: bool522 = global(bool: <class 'bool'>)
DEBUG 2022-02-07 18:03:05,365 on stmt: $522pred = call bool522(glynn, func=bool522, args=(Var(glynn, loop_hafnian_batch.py:20),), kws=(), vararg=None, target=None)
DEBUG 2022-02-07 18:03:05,365 on stmt: branch $522pred, 526, 580
DEBUG 2022-02-07 18:03:05,365 ==== SSA block rewrite pass on 526
DEBUG 2022-02-07 18:03:05,365 Running <numba.core.ssa._FreshVarHandler object at 0x00000196AEE975E0>
DEBUG 2022-02-07 18:03:05,365 on stmt: $526load_global.0 = global(range: <class 'range'>)
DEBUG 2022-02-07 18:03:05,365 on stmt: $530load_attr.2 = getattr(value=H_batch, attr=shape)
DEBUG 2022-02-07 18:03:05,365 on stmt: $const532.3 = const(int, 0)
DEBUG 2022-02-07 18:03:05,365 on stmt: $534binary_subscr.4 = static_getitem(value=$530load_attr.2, index=0, index_var=$const532.3, fn=<built-in function getitem>)
DEBUG 2022-02-07 18:03:05,365 on stmt: $536call_function.5 = call $526load_global.0($534binary_subscr.4, func=$526load_global.0, args=[Var($534binary_subscr.4, loop_hafnian_batch.py:72)], kws=(), vararg=None, target=None)
DEBUG 2022-02-07 18:03:05,365 on stmt: $538get_iter.6 = getiter(value=$536call_function.5)
DEBUG 2022-02-07 18:03:05,365 on stmt: $phi540.0 = $538get_iter.6
DEBUG 2022-02-07 18:03:05,365 on stmt: jump 540
DEBUG 2022-02-07 18:03:05,365 ==== SSA block rewrite pass on 540
DEBUG 2022-02-07 18:03:05,365 Running <numba.core.ssa._FreshVarHandler object at 0x00000196AEE975E0>
DEBUG 2022-02-07 18:03:05,365 on stmt: $540for_iter.1 = iternext(value=$phi540.0)
DEBUG 2022-02-07 18:03:05,365 on stmt: $540for_iter.2 = pair_first(value=$540for_iter.1)
DEBUG 2022-02-07 18:03:05,365 on stmt: $540for_iter.3 = pair_second(value=$540for_iter.1)
DEBUG 2022-02-07 18:03:05,365 on stmt: $phi542.1 = $540for_iter.2
DEBUG 2022-02-07 18:03:05,365 on stmt: branch $540for_iter.3, 542, 580
DEBUG 2022-02-07 18:03:05,380 ==== SSA block rewrite pass on 542
DEBUG 2022-02-07 18:03:05,380 Running <numba.core.ssa._FreshVarHandler object at 0x00000196AEE975E0>
DEBUG 2022-02-07 18:03:05,380 on stmt: j = $phi542.1
DEBUG 2022-02-07 18:03:05,380 on stmt: x = N_fixed + j
DEBUG 2022-02-07 18:03:05,380 on stmt: $558binary_subscr.9 = getitem(value=H_batch, index=j, fn=<built-in function getitem>)
DEBUG 2022-02-07 18:03:05,380 on stmt: $const560.10 = const(float, 0.5)
DEBUG 2022-02-07 18:03:05,380 on stmt: $const564.12 = const(int, 2)
DEBUG 2022-02-07 18:03:05,380 on stmt: $566binary_floor_divide.13 = x // $const564.12
DEBUG 2022-02-07 18:03:05,380 on stmt: $568binary_power.14 = $const560.10 ** $566binary_floor_divide.13
DEBUG 2022-02-07 18:03:05,380 on stmt: $570inplace_multiply.15 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=$558binary_subscr.9, rhs=$568binary_power.14, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-07 18:03:05,380 on stmt: H_batch[j] = $570inplace_multiply.15
DEBUG 2022-02-07 18:03:05,380 on stmt: jump 540
DEBUG 2022-02-07 18:03:05,380 ==== SSA block rewrite pass on 580
DEBUG 2022-02-07 18:03:05,380 Running <numba.core.ssa._FreshVarHandler object at 0x00000196AEE975E0>
DEBUG 2022-02-07 18:03:05,380 on stmt: $582return_value.1 = cast(value=H_batch)
DEBUG 2022-02-07 18:03:05,380 on stmt: return $582return_value.1
DEBUG 2022-02-07 18:03:05,380 Replaced assignments: defaultdict(<class 'list'>,
            {264: [<numba.core.ir.Assign object at 0x00000196AEF27610>],
             278: [<numba.core.ir.Assign object at 0x00000196AEF27760>]})
DEBUG 2022-02-07 18:03:05,380 ==== SSA block rewrite pass on 0
DEBUG 2022-02-07 18:03:05,380 Running <numba.core.ssa._FixSSAVars object at 0x00000196AEE975E0>
DEBUG 2022-02-07 18:03:05,380 on stmt: A = arg(0, name=A)
DEBUG 2022-02-07 18:03:05,380 on stmt: D = arg(1, name=D)
DEBUG 2022-02-07 18:03:05,380 on stmt: fixed_edge_reps = arg(2, name=fixed_edge_reps)
DEBUG 2022-02-07 18:03:05,380 on stmt: batch_max = arg(3, name=batch_max)
DEBUG 2022-02-07 18:03:05,380 on stmt: odd_cutoff = arg(4, name=odd_cutoff)
DEBUG 2022-02-07 18:03:05,380 on stmt: glynn = arg(5, name=glynn)
DEBUG 2022-02-07 18:03:05,380 on stmt: $const4.1 = const(int, 0)
DEBUG 2022-02-07 18:03:05,380 on stmt: oddloop = static_getitem(value=D, index=0, index_var=$const4.1, fn=<built-in function getitem>)
DEBUG 2022-02-07 18:03:05,380 on stmt: $const12.4 = const(int, 0)
DEBUG 2022-02-07 18:03:05,380 on stmt: $const14.5 = const(NoneType, None)
DEBUG 2022-02-07 18:03:05,380 on stmt: $const16.6 = const(NoneType, None)
DEBUG 2022-02-07 18:03:05,380 on stmt: $18build_slice.7 = global(slice: <class 'slice'>)
DEBUG 2022-02-07 18:03:05,380 on stmt: $18build_slice.8 = call $18build_slice.7($const14.5, $const16.6, func=$18build_slice.7, args=(Var($const14.5, loop_hafnian_batch.py:21), Var($const16.6, loop_hafnian_batch.py:21)), kws=(), vararg=None, target=None)
DEBUG 2022-02-07 18:03:05,380 on stmt: $20build_tuple.9 = build_tuple(items=[Var($const12.4, loop_hafnian_batch.py:21), Var($18build_slice.8, loop_hafnian_batch.py:21)])
DEBUG 2022-02-07 18:03:05,380 on stmt: oddV = static_getitem(value=A, index=(0, slice(None, None, None)), index_var=$20build_tuple.9, fn=<built-in function getitem>)
DEBUG 2022-02-07 18:03:05,380 on stmt: $28load_attr.12 = getattr(value=A, attr=shape)
DEBUG 2022-02-07 18:03:05,380 on stmt: $const30.13 = const(int, 0)
DEBUG 2022-02-07 18:03:05,380 on stmt: n = static_getitem(value=$28load_attr.12, index=0, index_var=$const30.13, fn=<built-in function getitem>)
DEBUG 2022-02-07 18:03:05,380 on stmt: $const36.15 = const(int, 2)
DEBUG 2022-02-07 18:03:05,380 on stmt: $40load_method.17 = getattr(value=fixed_edge_reps, attr=sum)
DEBUG 2022-02-07 18:03:05,380 on stmt: $42call_method.18 = call $40load_method.17(func=$40load_method.17, args=[], kws=(), vararg=None, target=None)
DEBUG 2022-02-07 18:03:05,380 on stmt: N_fixed = $const36.15 * $42call_method.18
DEBUG 2022-02-07 18:03:05,380 on stmt: $const50.21 = const(int, 2)
DEBUG 2022-02-07 18:03:05,380 on stmt: $54binary_multiply.23 = $const50.21 * batch_max
DEBUG 2022-02-07 18:03:05,380 on stmt: $56binary_add.24 = N_fixed + $54binary_multiply.23
DEBUG 2022-02-07 18:03:05,380 on stmt: N_max = $56binary_add.24 + odd_cutoff
DEBUG 2022-02-07 18:03:05,380 on stmt: $64load_global.27 = global(np: <module 'numpy' from 'C:\\Users\\zl4821\\Anaconda3\\envs\\GBS\\lib\\site-packages\\numpy\\__init__.py'>)
DEBUG 2022-02-07 18:03:05,380 on stmt: $66load_method.28 = getattr(value=$64load_global.27, attr=concatenate)
DEBUG 2022-02-07 18:03:05,380 on stmt: $68load_global.29 = global(np: <module 'numpy' from 'C:\\Users\\zl4821\\Anaconda3\\envs\\GBS\\lib\\site-packages\\numpy\\__init__.py'>)
DEBUG 2022-02-07 18:03:05,380 on stmt: $70load_method.30 = getattr(value=$68load_global.29, attr=array)
DEBUG 2022-02-07 18:03:05,380 on stmt: $74build_list.32 = build_list(items=[Var(batch_max, loop_hafnian_batch.py:20)])
DEBUG 2022-02-07 18:03:05,380 on stmt: $76call_method.33 = call $70load_method.30($74build_list.32, func=$70load_method.30, args=[Var($74build_list.32, loop_hafnian_batch.py:28)], kws=(), vararg=None, target=None)
DEBUG 2022-02-07 18:03:05,380 on stmt: $80build_tuple.35 = build_tuple(items=[Var($76call_method.33, loop_hafnian_batch.py:28), Var(fixed_edge_reps, loop_hafnian_batch.py:20)])
DEBUG 2022-02-07 18:03:05,380 on stmt: edge_reps = call $66load_method.28($80build_tuple.35, func=$66load_method.28, args=[Var($80build_tuple.35, loop_hafnian_batch.py:28)], kws=(), vararg=None, target=None)
DEBUG 2022-02-07 18:03:05,380 on stmt: $86load_global.37 = global(np: <module 'numpy' from 'C:\\Users\\zl4821\\Anaconda3\\envs\\GBS\\lib\\site-packages\\numpy\\__init__.py'>)
DEBUG 2022-02-07 18:03:05,380 on stmt: $88load_method.38 = getattr(value=$86load_global.37, attr=prod)
DEBUG 2022-02-07 18:03:05,380 on stmt: $const92.40 = const(int, 1)
DEBUG 2022-02-07 18:03:05,380 on stmt: $94binary_add.41 = edge_reps + $const92.40
DEBUG 2022-02-07 18:03:05,380 on stmt: steps = call $88load_method.38($94binary_add.41, func=$88load_method.38, args=[Var($94binary_add.41, loop_hafnian_batch.py:29)], kws=(), vararg=None, target=None)
DEBUG 2022-02-07 18:03:05,380 on stmt: $102load_method.44 = getattr(value=edge_reps, attr=max)
DEBUG 2022-02-07 18:03:05,380 on stmt: $104call_method.45 = call $102load_method.44(func=$102load_method.44, args=[], kws=(), vararg=None, target=None)
DEBUG 2022-02-07 18:03:05,380 on stmt: max_binom = $104call_method.45 + odd_cutoff
DEBUG 2022-02-07 18:03:05,380 on stmt: $112load_global.48 = global(precompute_binoms: CPUDispatcher(<function precompute_binoms at 0x00000196AE6F6CA0>))
DEBUG 2022-02-07 18:03:05,380 on stmt: binoms = call $112load_global.48(max_binom, func=$112load_global.48, args=[Var(max_binom, loop_hafnian_batch.py:31)], kws=(), vararg=None, target=None)
DEBUG 2022-02-07 18:03:05,380 on stmt: $120load_global.51 = global(np: <module 'numpy' from 'C:\\Users\\zl4821\\Anaconda3\\envs\\GBS\\lib\\site-packages\\numpy\\__init__.py'>)
DEBUG 2022-02-07 18:03:05,380 on stmt: $122load_attr.52 = getattr(value=$120load_global.51, attr=zeros)
DEBUG 2022-02-07 18:03:05,380 on stmt: $const124.53 = const(int, 2)
DEBUG 2022-02-07 18:03:05,380 on stmt: $128binary_multiply.55 = $const124.53 * batch_max
DEBUG 2022-02-07 18:03:05,380 on stmt: $132binary_add.57 = $128binary_multiply.55 + odd_cutoff
DEBUG 2022-02-07 18:03:05,380 on stmt: $const134.58 = const(int, 1)
DEBUG 2022-02-07 18:03:05,380 on stmt: $136binary_add.59 = $132binary_add.57 + $const134.58
DEBUG 2022-02-07 18:03:05,380 on stmt: $138load_global.60 = global(np: <module 'numpy' from 'C:\\Users\\zl4821\\Anaconda3\\envs\\GBS\\lib\\site-packages\\numpy\\__init__.py'>)
DEBUG 2022-02-07 18:03:05,380 on stmt: $140load_attr.61 = getattr(value=$138load_global.60, attr=complex128)
DEBUG 2022-02-07 18:03:05,380 on stmt: H_batch = call $122load_attr.52($136binary_add.59, func=$122load_attr.52, args=[Var($136binary_add.59, loop_hafnian_batch.py:34)], kws=[('dtype', Var($140load_attr.61, loop_hafnian_batch.py:34))], vararg=None, target=None)
DEBUG 2022-02-07 18:03:05,380 on stmt: $148load_global.64 = global(numba: <module 'numba' from 'C:\\Users\\zl4821\\Anaconda3\\envs\\GBS\\lib\\site-packages\\numba\\__init__.py'>)
DEBUG 2022-02-07 18:03:05,396 on stmt: $150load_method.65 = getattr(value=$148load_global.64, attr=prange)
DEBUG 2022-02-07 18:03:05,396 on stmt: $154call_method.67 = call $150load_method.65(steps, func=$150load_method.65, args=[Var(steps, loop_hafnian_batch.py:29)], kws=(), vararg=None, target=None)
DEBUG 2022-02-07 18:03:05,396 on stmt: $156get_iter.68 = getiter(value=$154call_method.67)
DEBUG 2022-02-07 18:03:05,396 on stmt: $phi158.0 = $156get_iter.68
DEBUG 2022-02-07 18:03:05,396 on stmt: jump 158
DEBUG 2022-02-07 18:03:05,396 ==== SSA block rewrite pass on 158
DEBUG 2022-02-07 18:03:05,396 Running <numba.core.ssa._FixSSAVars object at 0x00000196AEE975E0>
DEBUG 2022-02-07 18:03:05,396 on stmt: $158for_iter.1 = iternext(value=$phi158.0)
DEBUG 2022-02-07 18:03:05,396 on stmt: $158for_iter.2 = pair_first(value=$158for_iter.1)
DEBUG 2022-02-07 18:03:05,396 on stmt: $158for_iter.3 = pair_second(value=$158for_iter.1)
DEBUG 2022-02-07 18:03:05,396 on stmt: $phi162.1 = $158for_iter.2
DEBUG 2022-02-07 18:03:05,396 on stmt: branch $158for_iter.3, 162, 520
DEBUG 2022-02-07 18:03:05,396 ==== SSA block rewrite pass on 162
DEBUG 2022-02-07 18:03:05,396 Running <numba.core.ssa._FixSSAVars object at 0x00000196AEE975E0>
DEBUG 2022-02-07 18:03:05,396 on stmt: j = $phi162.1
DEBUG 2022-02-07 18:03:05,396 on stmt: $164load_global.2 = global(np: <module 'numpy' from 'C:\\Users\\zl4821\\Anaconda3\\envs\\GBS\\lib\\site-packages\\numpy\\__init__.py'>)
DEBUG 2022-02-07 18:03:05,396 on stmt: $166load_attr.3 = getattr(value=$164load_global.2, attr=zeros)
DEBUG 2022-02-07 18:03:05,396 on stmt: $const168.4 = const(int, 2)
DEBUG 2022-02-07 18:03:05,396 on stmt: $172binary_multiply.6 = $const168.4 * batch_max
DEBUG 2022-02-07 18:03:05,396 on stmt: $176binary_add.8 = $172binary_multiply.6 + odd_cutoff
DEBUG 2022-02-07 18:03:05,396 on stmt: $const178.9 = const(int, 1)
DEBUG 2022-02-07 18:03:05,396 on stmt: $180binary_add.10 = $176binary_add.8 + $const178.9
DEBUG 2022-02-07 18:03:05,396 on stmt: $182load_global.11 = global(np: <module 'numpy' from 'C:\\Users\\zl4821\\Anaconda3\\envs\\GBS\\lib\\site-packages\\numpy\\__init__.py'>)
DEBUG 2022-02-07 18:03:05,396 on stmt: $184load_attr.12 = getattr(value=$182load_global.11, attr=complex128)
DEBUG 2022-02-07 18:03:05,396 on stmt: Hnew = call $166load_attr.3($180binary_add.10, func=$166load_attr.3, args=[Var($180binary_add.10, loop_hafnian_batch.py:37)], kws=[('dtype', Var($184load_attr.12, loop_hafnian_batch.py:37))], vararg=None, target=None)
DEBUG 2022-02-07 18:03:05,396 on stmt: $192load_global.15 = global(find_kept_edges: CPUDispatcher(<function find_kept_edges at 0x00000196AE71E160>))
DEBUG 2022-02-07 18:03:05,396 on stmt: kept_edges = call $192load_global.15(j, edge_reps, func=$192load_global.15, args=[Var(j, loop_hafnian_batch.py:35), Var(edge_reps, loop_hafnian_batch.py:28)], kws=(), vararg=None, target=None)
DEBUG 2022-02-07 18:03:05,396 on stmt: $204load_method.20 = getattr(value=kept_edges, attr=sum)
DEBUG 2022-02-07 18:03:05,396 on stmt: edges_sum = call $204load_method.20(func=$204load_method.20, args=[], kws=(), vararg=None, target=None)
DEBUG 2022-02-07 18:03:05,396 on stmt: binom_prod = const(float, 1.0)
DEBUG 2022-02-07 18:03:05,396 on stmt: $214load_global.23 = global(range: <class 'range'>)
DEBUG 2022-02-07 18:03:05,396 on stmt: $const216.24 = const(int, 1)
DEBUG 2022-02-07 18:03:05,396 on stmt: $const220.26 = const(int, 2)
DEBUG 2022-02-07 18:03:05,396 on stmt: $222binary_floor_divide.27 = n // $const220.26
DEBUG 2022-02-07 18:03:05,396 on stmt: $224call_function.28 = call $214load_global.23($const216.24, $222binary_floor_divide.27, func=$214load_global.23, args=[Var($const216.24, loop_hafnian_batch.py:43), Var($222binary_floor_divide.27, loop_hafnian_batch.py:43)], kws=(), vararg=None, target=None)
DEBUG 2022-02-07 18:03:05,396 on stmt: $226get_iter.29 = getiter(value=$224call_function.28)
DEBUG 2022-02-07 18:03:05,396 on stmt: $phi228.1 = $226get_iter.29
DEBUG 2022-02-07 18:03:05,396 on stmt: jump 228
DEBUG 2022-02-07 18:03:05,396 ==== SSA block rewrite pass on 228
DEBUG 2022-02-07 18:03:05,396 Running <numba.core.ssa._FixSSAVars object at 0x00000196AEE975E0>
DEBUG 2022-02-07 18:03:05,396 on stmt: $228for_iter.2 = iternext(value=$phi228.1)
DEBUG 2022-02-07 18:03:05,396 on stmt: $228for_iter.3 = pair_first(value=$228for_iter.2)
DEBUG 2022-02-07 18:03:05,396 on stmt: $228for_iter.4 = pair_second(value=$228for_iter.2)
DEBUG 2022-02-07 18:03:05,396 on stmt: $phi230.2 = $228for_iter.3
DEBUG 2022-02-07 18:03:05,396 on stmt: branch $228for_iter.4, 230, 258
DEBUG 2022-02-07 18:03:05,396 ==== SSA block rewrite pass on 230
DEBUG 2022-02-07 18:03:05,396 Running <numba.core.ssa._FixSSAVars object at 0x00000196AEE975E0>
DEBUG 2022-02-07 18:03:05,396 on stmt: i = $phi230.2
DEBUG 2022-02-07 18:03:05,396 on stmt: $240binary_subscr.7 = getitem(value=edge_reps, index=i, fn=<built-in function getitem>)
DEBUG 2022-02-07 18:03:05,396 on stmt: $246binary_subscr.10 = getitem(value=kept_edges, index=i, fn=<built-in function getitem>)
DEBUG 2022-02-07 18:03:05,396 on stmt: $248build_tuple.11 = build_tuple(items=[Var($240binary_subscr.7, loop_hafnian_batch.py:44), Var($246binary_subscr.10, loop_hafnian_batch.py:44)])
DEBUG 2022-02-07 18:03:05,396 on stmt: $250binary_subscr.12 = getitem(value=binoms, index=$248build_tuple.11, fn=<built-in function getitem>)
DEBUG 2022-02-07 18:03:05,396 on stmt: $252inplace_multiply.13 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=binom_prod, rhs=$250binary_subscr.12, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-07 18:03:05,396 on stmt: binom_prod = $252inplace_multiply.13
DEBUG 2022-02-07 18:03:05,396 on stmt: jump 228
DEBUG 2022-02-07 18:03:05,396 ==== SSA block rewrite pass on 258
DEBUG 2022-02-07 18:03:05,396 Running <numba.core.ssa._FixSSAVars object at 0x00000196AEE975E0>
DEBUG 2022-02-07 18:03:05,396 on stmt: bool260 = global(bool: <class 'bool'>)
DEBUG 2022-02-07 18:03:05,396 on stmt: $260pred = call bool260(glynn, func=bool260, args=(Var(glynn, loop_hafnian_batch.py:20),), kws=(), vararg=None, target=None)
DEBUG 2022-02-07 18:03:05,396 on stmt: branch $260pred, 264, 278
DEBUG 2022-02-07 18:03:05,396 ==== SSA block rewrite pass on 264
DEBUG 2022-02-07 18:03:05,396 Running <numba.core.ssa._FixSSAVars object at 0x00000196AEE975E0>
DEBUG 2022-02-07 18:03:05,396 on stmt: $const264.1 = const(int, 2)
DEBUG 2022-02-07 18:03:05,396 on stmt: $268binary_multiply.3 = $const264.1 * kept_edges
DEBUG 2022-02-07 18:03:05,396 on stmt: delta = $268binary_multiply.3 - edge_reps
DEBUG 2022-02-07 18:03:05,396 on stmt: jump 282
DEBUG 2022-02-07 18:03:05,396 ==== SSA block rewrite pass on 278
DEBUG 2022-02-07 18:03:05,396 Running <numba.core.ssa._FixSSAVars object at 0x00000196AEE975E0>
DEBUG 2022-02-07 18:03:05,396 on stmt: delta.1 = kept_edges
DEBUG 2022-02-07 18:03:05,396 on stmt: jump 282
DEBUG 2022-02-07 18:03:05,396 ==== SSA block rewrite pass on 282
DEBUG 2022-02-07 18:03:05,396 Running <numba.core.ssa._FixSSAVars object at 0x00000196AEE975E0>
DEBUG 2022-02-07 18:03:05,396 on stmt: $282load_global.1 = global(get_submatrices: CPUDispatcher(<function get_submatrices at 0x00000196AE71E670>))
DEBUG 2022-02-07 18:03:05,396 on stmt: $292call_function.6 = call $282load_global.1(delta, A, D, oddV, func=$282load_global.1, args=[Var(delta, loop_hafnian_batch.py:47), Var(A, loop_hafnian_batch.py:20), Var(D, loop_hafnian_batch.py:20), Var(oddV, loop_hafnian_batch.py:21)], kws=(), vararg=None, target=None)
DEBUG 2022-02-07 18:03:05,396 find_def var='delta' stmt=$292call_function.6 = call $282load_global.1(delta, A, D, oddV, func=$282load_global.1, args=[Var(delta, loop_hafnian_batch.py:47), Var(A, loop_hafnian_batch.py:20), Var(D, loop_hafnian_batch.py:20), Var(oddV, loop_hafnian_batch.py:21)], kws=(), vararg=None, target=None)
DEBUG 2022-02-07 18:03:05,396 find_def_from_top label 282
DEBUG 2022-02-07 18:03:05,396 insert phi node delta.2 = phi(incoming_values=[], incoming_blocks=[]) at 282
DEBUG 2022-02-07 18:03:05,396 find_def_from_bottom label 264
DEBUG 2022-02-07 18:03:05,396 incoming_def delta = $268binary_multiply.3 - edge_reps
DEBUG 2022-02-07 18:03:05,412 find_def_from_bottom label 278
DEBUG 2022-02-07 18:03:05,412 incoming_def delta.1 = kept_edges
DEBUG 2022-02-07 18:03:05,412 replaced with: $292call_function.6 = call $282load_global.1(delta.2, A, D, oddV, func=$282load_global.1, args=[Var(delta.2, loop_hafnian_batch.py:51), Var(A, loop_hafnian_batch.py:20), Var(D, loop_hafnian_batch.py:20), Var(oddV, loop_hafnian_batch.py:21)], kws=(), vararg=None, target=None)
DEBUG 2022-02-07 18:03:05,412 on stmt: $294unpack_sequence.11 = exhaust_iter(value=$292call_function.6, count=4)
DEBUG 2022-02-07 18:03:05,412 on stmt: $294unpack_sequence.7 = static_getitem(value=$294unpack_sequence.11, index=0, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-02-07 18:03:05,412 on stmt: $294unpack_sequence.8 = static_getitem(value=$294unpack_sequence.11, index=1, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-02-07 18:03:05,412 on stmt: $294unpack_sequence.9 = static_getitem(value=$294unpack_sequence.11, index=2, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-02-07 18:03:05,412 on stmt: $294unpack_sequence.10 = static_getitem(value=$294unpack_sequence.11, index=3, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-02-07 18:03:05,412 on stmt: AX_S = $294unpack_sequence.7
DEBUG 2022-02-07 18:03:05,412 on stmt: XD_S = $294unpack_sequence.8
DEBUG 2022-02-07 18:03:05,412 on stmt: D_S = $294unpack_sequence.9
DEBUG 2022-02-07 18:03:05,412 on stmt: oddVX_S = $294unpack_sequence.10
DEBUG 2022-02-07 18:03:05,412 on stmt: $304load_global.12 = global(eigvals: CPUDispatcher(<function eigvals at 0x00000196AE71EB80>))
DEBUG 2022-02-07 18:03:05,412 on stmt: E = call $304load_global.12(AX_S, func=$304load_global.12, args=[Var(AX_S, loop_hafnian_batch.py:51)], kws=(), vararg=None, target=None)
DEBUG 2022-02-07 18:03:05,412 on stmt: $312load_global.15 = global(f_loop: CPUDispatcher(<function f_loop at 0x00000196AE71E310>))
DEBUG 2022-02-07 18:03:05,412 on stmt: f_even = call $312load_global.15(E, AX_S, XD_S, D_S, N_max, func=$312load_global.15, args=[Var(E, loop_hafnian_batch.py:53), Var(AX_S, loop_hafnian_batch.py:51), Var(XD_S, loop_hafnian_batch.py:51), Var(D_S, loop_hafnian_batch.py:51), Var(N_max, loop_hafnian_batch.py:26)], kws=(), vararg=None, target=None)
DEBUG 2022-02-07 18:03:05,412 on stmt: $328load_global.22 = global(f_loop_odd: CPUDispatcher(<function f_loop_odd at 0x00000196AE71E4C0>))
DEBUG 2022-02-07 18:03:05,412 on stmt: f_odd = call $328load_global.22(E, AX_S, XD_S, D_S, N_max, oddloop, oddVX_S, func=$328load_global.22, args=[Var(E, loop_hafnian_batch.py:53), Var(AX_S, loop_hafnian_batch.py:51), Var(XD_S, loop_hafnian_batch.py:51), Var(D_S, loop_hafnian_batch.py:51), Var(N_max, loop_hafnian_batch.py:26), Var(oddloop, loop_hafnian_batch.py:20), Var(oddVX_S, loop_hafnian_batch.py:51)], kws=(), vararg=None, target=None)
DEBUG 2022-02-07 18:03:05,412 on stmt: $348load_global.31 = global(range: <class 'range'>)
DEBUG 2022-02-07 18:03:05,412 on stmt: $const350.32 = const(int, 2)
DEBUG 2022-02-07 18:03:05,412 on stmt: $const354.34 = const(int, 0)
DEBUG 2022-02-07 18:03:05,412 on stmt: $356binary_subscr.35 = static_getitem(value=kept_edges, index=0, index_var=$const354.34, fn=<built-in function getitem>)
DEBUG 2022-02-07 18:03:05,412 on stmt: $358binary_multiply.36 = $const350.32 * $356binary_subscr.35
DEBUG 2022-02-07 18:03:05,412 on stmt: $const360.37 = const(int, 2)
DEBUG 2022-02-07 18:03:05,412 on stmt: $364binary_multiply.39 = $const360.37 * batch_max
DEBUG 2022-02-07 18:03:05,412 on stmt: $368binary_add.41 = $364binary_multiply.39 + odd_cutoff
DEBUG 2022-02-07 18:03:05,412 on stmt: $const370.42 = const(int, 1)
DEBUG 2022-02-07 18:03:05,412 on stmt: $372binary_add.43 = $368binary_add.41 + $const370.42
DEBUG 2022-02-07 18:03:05,412 on stmt: $374call_function.44 = call $348load_global.31($358binary_multiply.36, $372binary_add.43, func=$348load_global.31, args=[Var($358binary_multiply.36, loop_hafnian_batch.py:58), Var($372binary_add.43, loop_hafnian_batch.py:58)], kws=(), vararg=None, target=None)
DEBUG 2022-02-07 18:03:05,412 on stmt: $376get_iter.45 = getiter(value=$374call_function.44)
DEBUG 2022-02-07 18:03:05,412 on stmt: $phi378.1 = $376get_iter.45
DEBUG 2022-02-07 18:03:05,412 on stmt: jump 378
DEBUG 2022-02-07 18:03:05,412 ==== SSA block rewrite pass on 378
DEBUG 2022-02-07 18:03:05,412 Running <numba.core.ssa._FixSSAVars object at 0x00000196AEE975E0>
DEBUG 2022-02-07 18:03:05,412 on stmt: $378for_iter.2 = iternext(value=$phi378.1)
DEBUG 2022-02-07 18:03:05,412 on stmt: $378for_iter.3 = pair_first(value=$378for_iter.2)
DEBUG 2022-02-07 18:03:05,412 on stmt: $378for_iter.4 = pair_second(value=$378for_iter.2)
DEBUG 2022-02-07 18:03:05,412 on stmt: $phi380.2 = $378for_iter.3
DEBUG 2022-02-07 18:03:05,412 on stmt: branch $378for_iter.4, 380, 510
DEBUG 2022-02-07 18:03:05,412 ==== SSA block rewrite pass on 380
DEBUG 2022-02-07 18:03:05,412 Running <numba.core.ssa._FixSSAVars object at 0x00000196AEE975E0>
DEBUG 2022-02-07 18:03:05,412 on stmt: N_det = $phi380.2
DEBUG 2022-02-07 18:03:05,412 on stmt: N = N_fixed + N_det
DEBUG 2022-02-07 18:03:05,412 on stmt: $const390.6 = const(float, -1.0)
DEBUG 2022-02-07 18:03:05,412 on stmt: $const394.8 = const(int, 2)
DEBUG 2022-02-07 18:03:05,412 on stmt: $396binary_floor_divide.9 = N // $const394.8
DEBUG 2022-02-07 18:03:05,412 on stmt: $400binary_subtract.11 = $396binary_floor_divide.9 - edges_sum
DEBUG 2022-02-07 18:03:05,412 on stmt: plus_minus = $const390.6 ** $400binary_subtract.11
DEBUG 2022-02-07 18:03:05,412 on stmt: $const410.15 = const(int, 2)
DEBUG 2022-02-07 18:03:05,412 on stmt: $412binary_floor_divide.16 = N_det // $const410.15
DEBUG 2022-02-07 18:03:05,412 on stmt: $const416.18 = const(int, 0)
DEBUG 2022-02-07 18:03:05,412 on stmt: $418binary_subscr.19 = static_getitem(value=kept_edges, index=0, index_var=$const416.18, fn=<built-in function getitem>)
DEBUG 2022-02-07 18:03:05,412 on stmt: $420build_tuple.20 = build_tuple(items=[Var($412binary_floor_divide.16, loop_hafnian_batch.py:62), Var($418binary_subscr.19, loop_hafnian_batch.py:62)])
DEBUG 2022-02-07 18:03:05,412 on stmt: $422binary_subscr.21 = getitem(value=binoms, index=$420build_tuple.20, fn=<built-in function getitem>)
DEBUG 2022-02-07 18:03:05,412 on stmt: n_det_binom_prod = $422binary_subscr.21 * binom_prod
DEBUG 2022-02-07 18:03:05,412 on stmt: $const432.25 = const(int, 2)
DEBUG 2022-02-07 18:03:05,412 on stmt: $434binary_modulo.26 = N_det % $const432.25
DEBUG 2022-02-07 18:03:05,412 on stmt: $const436.27 = const(int, 0)
DEBUG 2022-02-07 18:03:05,412 on stmt: $438compare_op.28 = $434binary_modulo.26 == $const436.27
DEBUG 2022-02-07 18:03:05,427 on stmt: bool440 = global(bool: <class 'bool'>)
DEBUG 2022-02-07 18:03:05,427 on stmt: $440pred = call bool440($438compare_op.28, func=bool440, args=(Var($438compare_op.28, loop_hafnian_batch.py:64),), kws=(), vararg=None, target=None)
DEBUG 2022-02-07 18:03:05,427 on stmt: branch $440pred, 444, 478
DEBUG 2022-02-07 18:03:05,427 ==== SSA block rewrite pass on 444
DEBUG 2022-02-07 18:03:05,427 Running <numba.core.ssa._FixSSAVars object at 0x00000196AEE975E0>
DEBUG 2022-02-07 18:03:05,427 on stmt: $450binary_subscr.6 = getitem(value=Hnew, index=N_det, fn=<built-in function getitem>)
DEBUG 2022-02-07 18:03:05,427 on stmt: $456binary_multiply.9 = n_det_binom_prod * plus_minus
DEBUG 2022-02-07 18:03:05,427 on stmt: $const462.12 = const(int, 2)
DEBUG 2022-02-07 18:03:05,427 on stmt: $464binary_floor_divide.13 = N // $const462.12
DEBUG 2022-02-07 18:03:05,427 on stmt: $466binary_subscr.14 = getitem(value=f_even, index=$464binary_floor_divide.13, fn=<built-in function getitem>)
DEBUG 2022-02-07 18:03:05,427 on stmt: $468binary_multiply.15 = $456binary_multiply.9 * $466binary_subscr.14
DEBUG 2022-02-07 18:03:05,427 on stmt: $470inplace_add.16 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$450binary_subscr.6, rhs=$468binary_multiply.15, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-07 18:03:05,427 on stmt: Hnew[N_det] = $470inplace_add.16
DEBUG 2022-02-07 18:03:05,427 on stmt: jump 506
DEBUG 2022-02-07 18:03:05,427 ==== SSA block rewrite pass on 478
DEBUG 2022-02-07 18:03:05,427 Running <numba.core.ssa._FixSSAVars object at 0x00000196AEE975E0>
DEBUG 2022-02-07 18:03:05,427 on stmt: $484binary_subscr.6 = getitem(value=Hnew, index=N_det, fn=<built-in function getitem>)
DEBUG 2022-02-07 18:03:05,427 on stmt: $490binary_multiply.9 = n_det_binom_prod * plus_minus
DEBUG 2022-02-07 18:03:05,427 on stmt: $496binary_subscr.12 = getitem(value=f_odd, index=N, fn=<built-in function getitem>)
DEBUG 2022-02-07 18:03:05,427 on stmt: $498binary_multiply.13 = $490binary_multiply.9 * $496binary_subscr.12
DEBUG 2022-02-07 18:03:05,427 on stmt: $500inplace_add.14 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$484binary_subscr.6, rhs=$498binary_multiply.13, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-07 18:03:05,427 on stmt: Hnew[N_det] = $500inplace_add.14
DEBUG 2022-02-07 18:03:05,427 on stmt: jump 506
DEBUG 2022-02-07 18:03:05,427 ==== SSA block rewrite pass on 506
DEBUG 2022-02-07 18:03:05,427 Running <numba.core.ssa._FixSSAVars object at 0x00000196AEE975E0>
DEBUG 2022-02-07 18:03:05,427 on stmt: jump 378
DEBUG 2022-02-07 18:03:05,427 ==== SSA block rewrite pass on 510
DEBUG 2022-02-07 18:03:05,427 Running <numba.core.ssa._FixSSAVars object at 0x00000196AEE975E0>
DEBUG 2022-02-07 18:03:05,427 on stmt: $514inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=H_batch, rhs=Hnew, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-07 18:03:05,427 on stmt: H_batch = $514inplace_add.3
DEBUG 2022-02-07 18:03:05,427 on stmt: jump 158
DEBUG 2022-02-07 18:03:05,427 ==== SSA block rewrite pass on 520
DEBUG 2022-02-07 18:03:05,427 Running <numba.core.ssa._FixSSAVars object at 0x00000196AEE975E0>
DEBUG 2022-02-07 18:03:05,427 on stmt: bool522 = global(bool: <class 'bool'>)
DEBUG 2022-02-07 18:03:05,427 on stmt: $522pred = call bool522(glynn, func=bool522, args=(Var(glynn, loop_hafnian_batch.py:20),), kws=(), vararg=None, target=None)
DEBUG 2022-02-07 18:03:05,427 on stmt: branch $522pred, 526, 580
DEBUG 2022-02-07 18:03:05,427 ==== SSA block rewrite pass on 526
DEBUG 2022-02-07 18:03:05,427 Running <numba.core.ssa._FixSSAVars object at 0x00000196AEE975E0>
DEBUG 2022-02-07 18:03:05,427 on stmt: $526load_global.0 = global(range: <class 'range'>)
DEBUG 2022-02-07 18:03:05,427 on stmt: $530load_attr.2 = getattr(value=H_batch, attr=shape)
DEBUG 2022-02-07 18:03:05,427 on stmt: $const532.3 = const(int, 0)
DEBUG 2022-02-07 18:03:05,427 on stmt: $534binary_subscr.4 = static_getitem(value=$530load_attr.2, index=0, index_var=$const532.3, fn=<built-in function getitem>)
DEBUG 2022-02-07 18:03:05,427 on stmt: $536call_function.5 = call $526load_global.0($534binary_subscr.4, func=$526load_global.0, args=[Var($534binary_subscr.4, loop_hafnian_batch.py:72)], kws=(), vararg=None, target=None)
DEBUG 2022-02-07 18:03:05,427 on stmt: $538get_iter.6 = getiter(value=$536call_function.5)
DEBUG 2022-02-07 18:03:05,427 on stmt: $phi540.0 = $538get_iter.6
DEBUG 2022-02-07 18:03:05,427 on stmt: jump 540
DEBUG 2022-02-07 18:03:05,427 ==== SSA block rewrite pass on 540
DEBUG 2022-02-07 18:03:05,427 Running <numba.core.ssa._FixSSAVars object at 0x00000196AEE975E0>
DEBUG 2022-02-07 18:03:05,427 on stmt: $540for_iter.1 = iternext(value=$phi540.0)
DEBUG 2022-02-07 18:03:05,427 on stmt: $540for_iter.2 = pair_first(value=$540for_iter.1)
DEBUG 2022-02-07 18:03:05,427 on stmt: $540for_iter.3 = pair_second(value=$540for_iter.1)
DEBUG 2022-02-07 18:03:05,427 on stmt: $phi542.1 = $540for_iter.2
DEBUG 2022-02-07 18:03:05,427 on stmt: branch $540for_iter.3, 542, 580
DEBUG 2022-02-07 18:03:05,427 ==== SSA block rewrite pass on 542
DEBUG 2022-02-07 18:03:05,427 Running <numba.core.ssa._FixSSAVars object at 0x00000196AEE975E0>
DEBUG 2022-02-07 18:03:05,427 on stmt: j = $phi542.1
DEBUG 2022-02-07 18:03:05,427 on stmt: x = N_fixed + j
DEBUG 2022-02-07 18:03:05,427 on stmt: $558binary_subscr.9 = getitem(value=H_batch, index=j, fn=<built-in function getitem>)
DEBUG 2022-02-07 18:03:05,427 on stmt: $const560.10 = const(float, 0.5)
DEBUG 2022-02-07 18:03:05,427 on stmt: $const564.12 = const(int, 2)
DEBUG 2022-02-07 18:03:05,427 on stmt: $566binary_floor_divide.13 = x // $const564.12
DEBUG 2022-02-07 18:03:05,427 on stmt: $568binary_power.14 = $const560.10 ** $566binary_floor_divide.13
DEBUG 2022-02-07 18:03:05,427 on stmt: $570inplace_multiply.15 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=$558binary_subscr.9, rhs=$568binary_power.14, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-07 18:03:05,427 on stmt: H_batch[j] = $570inplace_multiply.15
DEBUG 2022-02-07 18:03:05,427 on stmt: jump 540
DEBUG 2022-02-07 18:03:05,427 ==== SSA block rewrite pass on 580
DEBUG 2022-02-07 18:03:05,427 Running <numba.core.ssa._FixSSAVars object at 0x00000196AEE975E0>
DEBUG 2022-02-07 18:03:05,427 on stmt: $582return_value.1 = cast(value=H_batch)
DEBUG 2022-02-07 18:03:05,427 on stmt: return $582return_value.1
DEBUG 2022-02-07 18:03:05,427 Fix SSA violator on var binom_prod
DEBUG 2022-02-07 18:03:05,427 ==== SSA block rewrite pass on 0
DEBUG 2022-02-07 18:03:05,427 Running <numba.core.ssa._FreshVarHandler object at 0x00000196AEE97490>
DEBUG 2022-02-07 18:03:05,427 on stmt: A = arg(0, name=A)
DEBUG 2022-02-07 18:03:05,427 on stmt: D = arg(1, name=D)
DEBUG 2022-02-07 18:03:05,427 on stmt: fixed_edge_reps = arg(2, name=fixed_edge_reps)
DEBUG 2022-02-07 18:03:05,427 on stmt: batch_max = arg(3, name=batch_max)
DEBUG 2022-02-07 18:03:05,427 on stmt: odd_cutoff = arg(4, name=odd_cutoff)
DEBUG 2022-02-07 18:03:05,427 on stmt: glynn = arg(5, name=glynn)
DEBUG 2022-02-07 18:03:05,427 on stmt: $const4.1 = const(int, 0)
DEBUG 2022-02-07 18:03:05,427 on stmt: oddloop = static_getitem(value=D, index=0, index_var=$const4.1, fn=<built-in function getitem>)
DEBUG 2022-02-07 18:03:05,427 on stmt: $const12.4 = const(int, 0)
DEBUG 2022-02-07 18:03:05,427 on stmt: $const14.5 = const(NoneType, None)
DEBUG 2022-02-07 18:03:05,427 on stmt: $const16.6 = const(NoneType, None)
DEBUG 2022-02-07 18:03:05,427 on stmt: $18build_slice.7 = global(slice: <class 'slice'>)
DEBUG 2022-02-07 18:03:05,443 on stmt: $18build_slice.8 = call $18build_slice.7($const14.5, $const16.6, func=$18build_slice.7, args=(Var($const14.5, loop_hafnian_batch.py:21), Var($const16.6, loop_hafnian_batch.py:21)), kws=(), vararg=None, target=None)
DEBUG 2022-02-07 18:03:05,443 on stmt: $20build_tuple.9 = build_tuple(items=[Var($const12.4, loop_hafnian_batch.py:21), Var($18build_slice.8, loop_hafnian_batch.py:21)])
DEBUG 2022-02-07 18:03:05,443 on stmt: oddV = static_getitem(value=A, index=(0, slice(None, None, None)), index_var=$20build_tuple.9, fn=<built-in function getitem>)
DEBUG 2022-02-07 18:03:05,443 on stmt: $28load_attr.12 = getattr(value=A, attr=shape)
DEBUG 2022-02-07 18:03:05,443 on stmt: $const30.13 = const(int, 0)
DEBUG 2022-02-07 18:03:05,443 on stmt: n = static_getitem(value=$28load_attr.12, index=0, index_var=$const30.13, fn=<built-in function getitem>)
DEBUG 2022-02-07 18:03:05,443 on stmt: $const36.15 = const(int, 2)
DEBUG 2022-02-07 18:03:05,443 on stmt: $40load_method.17 = getattr(value=fixed_edge_reps, attr=sum)
DEBUG 2022-02-07 18:03:05,443 on stmt: $42call_method.18 = call $40load_method.17(func=$40load_method.17, args=[], kws=(), vararg=None, target=None)
DEBUG 2022-02-07 18:03:05,443 on stmt: N_fixed = $const36.15 * $42call_method.18
DEBUG 2022-02-07 18:03:05,443 on stmt: $const50.21 = const(int, 2)
DEBUG 2022-02-07 18:03:05,443 on stmt: $54binary_multiply.23 = $const50.21 * batch_max
DEBUG 2022-02-07 18:03:05,443 on stmt: $56binary_add.24 = N_fixed + $54binary_multiply.23
DEBUG 2022-02-07 18:03:05,443 on stmt: N_max = $56binary_add.24 + odd_cutoff
DEBUG 2022-02-07 18:03:05,443 on stmt: $64load_global.27 = global(np: <module 'numpy' from 'C:\\Users\\zl4821\\Anaconda3\\envs\\GBS\\lib\\site-packages\\numpy\\__init__.py'>)
DEBUG 2022-02-07 18:03:05,443 on stmt: $66load_method.28 = getattr(value=$64load_global.27, attr=concatenate)
DEBUG 2022-02-07 18:03:05,443 on stmt: $68load_global.29 = global(np: <module 'numpy' from 'C:\\Users\\zl4821\\Anaconda3\\envs\\GBS\\lib\\site-packages\\numpy\\__init__.py'>)
DEBUG 2022-02-07 18:03:05,443 on stmt: $70load_method.30 = getattr(value=$68load_global.29, attr=array)
DEBUG 2022-02-07 18:03:05,443 on stmt: $74build_list.32 = build_list(items=[Var(batch_max, loop_hafnian_batch.py:20)])
DEBUG 2022-02-07 18:03:05,443 on stmt: $76call_method.33 = call $70load_method.30($74build_list.32, func=$70load_method.30, args=[Var($74build_list.32, loop_hafnian_batch.py:28)], kws=(), vararg=None, target=None)
DEBUG 2022-02-07 18:03:05,443 on stmt: $80build_tuple.35 = build_tuple(items=[Var($76call_method.33, loop_hafnian_batch.py:28), Var(fixed_edge_reps, loop_hafnian_batch.py:20)])
DEBUG 2022-02-07 18:03:05,443 on stmt: edge_reps = call $66load_method.28($80build_tuple.35, func=$66load_method.28, args=[Var($80build_tuple.35, loop_hafnian_batch.py:28)], kws=(), vararg=None, target=None)
DEBUG 2022-02-07 18:03:05,443 on stmt: $86load_global.37 = global(np: <module 'numpy' from 'C:\\Users\\zl4821\\Anaconda3\\envs\\GBS\\lib\\site-packages\\numpy\\__init__.py'>)
DEBUG 2022-02-07 18:03:05,443 on stmt: $88load_method.38 = getattr(value=$86load_global.37, attr=prod)
DEBUG 2022-02-07 18:03:05,443 on stmt: $const92.40 = const(int, 1)
DEBUG 2022-02-07 18:03:05,443 on stmt: $94binary_add.41 = edge_reps + $const92.40
DEBUG 2022-02-07 18:03:05,443 on stmt: steps = call $88load_method.38($94binary_add.41, func=$88load_method.38, args=[Var($94binary_add.41, loop_hafnian_batch.py:29)], kws=(), vararg=None, target=None)
DEBUG 2022-02-07 18:03:05,443 on stmt: $102load_method.44 = getattr(value=edge_reps, attr=max)
DEBUG 2022-02-07 18:03:05,443 on stmt: $104call_method.45 = call $102load_method.44(func=$102load_method.44, args=[], kws=(), vararg=None, target=None)
DEBUG 2022-02-07 18:03:05,443 on stmt: max_binom = $104call_method.45 + odd_cutoff
DEBUG 2022-02-07 18:03:05,443 on stmt: $112load_global.48 = global(precompute_binoms: CPUDispatcher(<function precompute_binoms at 0x00000196AE6F6CA0>))
DEBUG 2022-02-07 18:03:05,443 on stmt: binoms = call $112load_global.48(max_binom, func=$112load_global.48, args=[Var(max_binom, loop_hafnian_batch.py:31)], kws=(), vararg=None, target=None)
DEBUG 2022-02-07 18:03:05,443 on stmt: $120load_global.51 = global(np: <module 'numpy' from 'C:\\Users\\zl4821\\Anaconda3\\envs\\GBS\\lib\\site-packages\\numpy\\__init__.py'>)
DEBUG 2022-02-07 18:03:05,443 on stmt: $122load_attr.52 = getattr(value=$120load_global.51, attr=zeros)
DEBUG 2022-02-07 18:03:05,443 on stmt: $const124.53 = const(int, 2)
DEBUG 2022-02-07 18:03:05,443 on stmt: $128binary_multiply.55 = $const124.53 * batch_max
DEBUG 2022-02-07 18:03:05,443 on stmt: $132binary_add.57 = $128binary_multiply.55 + odd_cutoff
DEBUG 2022-02-07 18:03:05,443 on stmt: $const134.58 = const(int, 1)
DEBUG 2022-02-07 18:03:05,443 on stmt: $136binary_add.59 = $132binary_add.57 + $const134.58
DEBUG 2022-02-07 18:03:05,443 on stmt: $138load_global.60 = global(np: <module 'numpy' from 'C:\\Users\\zl4821\\Anaconda3\\envs\\GBS\\lib\\site-packages\\numpy\\__init__.py'>)
DEBUG 2022-02-07 18:03:05,443 on stmt: $140load_attr.61 = getattr(value=$138load_global.60, attr=complex128)
DEBUG 2022-02-07 18:03:05,443 on stmt: H_batch = call $122load_attr.52($136binary_add.59, func=$122load_attr.52, args=[Var($136binary_add.59, loop_hafnian_batch.py:34)], kws=[('dtype', Var($140load_attr.61, loop_hafnian_batch.py:34))], vararg=None, target=None)
DEBUG 2022-02-07 18:03:05,443 on stmt: $148load_global.64 = global(numba: <module 'numba' from 'C:\\Users\\zl4821\\Anaconda3\\envs\\GBS\\lib\\site-packages\\numba\\__init__.py'>)
DEBUG 2022-02-07 18:03:05,443 on stmt: $150load_method.65 = getattr(value=$148load_global.64, attr=prange)
DEBUG 2022-02-07 18:03:05,443 on stmt: $154call_method.67 = call $150load_method.65(steps, func=$150load_method.65, args=[Var(steps, loop_hafnian_batch.py:29)], kws=(), vararg=None, target=None)
DEBUG 2022-02-07 18:03:05,443 on stmt: $156get_iter.68 = getiter(value=$154call_method.67)
DEBUG 2022-02-07 18:03:05,443 on stmt: $phi158.0 = $156get_iter.68
DEBUG 2022-02-07 18:03:05,443 on stmt: jump 158
DEBUG 2022-02-07 18:03:05,443 ==== SSA block rewrite pass on 158
DEBUG 2022-02-07 18:03:05,443 Running <numba.core.ssa._FreshVarHandler object at 0x00000196AEE97490>
DEBUG 2022-02-07 18:03:05,443 on stmt: $158for_iter.1 = iternext(value=$phi158.0)
DEBUG 2022-02-07 18:03:05,443 on stmt: $158for_iter.2 = pair_first(value=$158for_iter.1)
DEBUG 2022-02-07 18:03:05,443 on stmt: $158for_iter.3 = pair_second(value=$158for_iter.1)
DEBUG 2022-02-07 18:03:05,443 on stmt: $phi162.1 = $158for_iter.2
DEBUG 2022-02-07 18:03:05,443 on stmt: branch $158for_iter.3, 162, 520
DEBUG 2022-02-07 18:03:05,443 ==== SSA block rewrite pass on 162
DEBUG 2022-02-07 18:03:05,443 Running <numba.core.ssa._FreshVarHandler object at 0x00000196AEE97490>
DEBUG 2022-02-07 18:03:05,443 on stmt: j = $phi162.1
DEBUG 2022-02-07 18:03:05,443 on stmt: $164load_global.2 = global(np: <module 'numpy' from 'C:\\Users\\zl4821\\Anaconda3\\envs\\GBS\\lib\\site-packages\\numpy\\__init__.py'>)
DEBUG 2022-02-07 18:03:05,443 on stmt: $166load_attr.3 = getattr(value=$164load_global.2, attr=zeros)
DEBUG 2022-02-07 18:03:05,443 on stmt: $const168.4 = const(int, 2)
DEBUG 2022-02-07 18:03:05,443 on stmt: $172binary_multiply.6 = $const168.4 * batch_max
DEBUG 2022-02-07 18:03:05,443 on stmt: $176binary_add.8 = $172binary_multiply.6 + odd_cutoff
DEBUG 2022-02-07 18:03:05,443 on stmt: $const178.9 = const(int, 1)
DEBUG 2022-02-07 18:03:05,443 on stmt: $180binary_add.10 = $176binary_add.8 + $const178.9
DEBUG 2022-02-07 18:03:05,443 on stmt: $182load_global.11 = global(np: <module 'numpy' from 'C:\\Users\\zl4821\\Anaconda3\\envs\\GBS\\lib\\site-packages\\numpy\\__init__.py'>)
DEBUG 2022-02-07 18:03:05,443 on stmt: $184load_attr.12 = getattr(value=$182load_global.11, attr=complex128)
DEBUG 2022-02-07 18:03:05,443 on stmt: Hnew = call $166load_attr.3($180binary_add.10, func=$166load_attr.3, args=[Var($180binary_add.10, loop_hafnian_batch.py:37)], kws=[('dtype', Var($184load_attr.12, loop_hafnian_batch.py:37))], vararg=None, target=None)
DEBUG 2022-02-07 18:03:05,443 on stmt: $192load_global.15 = global(find_kept_edges: CPUDispatcher(<function find_kept_edges at 0x00000196AE71E160>))
DEBUG 2022-02-07 18:03:05,443 on stmt: kept_edges = call $192load_global.15(j, edge_reps, func=$192load_global.15, args=[Var(j, loop_hafnian_batch.py:35), Var(edge_reps, loop_hafnian_batch.py:28)], kws=(), vararg=None, target=None)
DEBUG 2022-02-07 18:03:05,443 on stmt: $204load_method.20 = getattr(value=kept_edges, attr=sum)
DEBUG 2022-02-07 18:03:05,443 on stmt: edges_sum = call $204load_method.20(func=$204load_method.20, args=[], kws=(), vararg=None, target=None)
DEBUG 2022-02-07 18:03:05,443 on stmt: binom_prod = const(float, 1.0)
DEBUG 2022-02-07 18:03:05,443 first assign: binom_prod
DEBUG 2022-02-07 18:03:05,443 replaced with: binom_prod = const(float, 1.0)
DEBUG 2022-02-07 18:03:05,443 on stmt: $214load_global.23 = global(range: <class 'range'>)
DEBUG 2022-02-07 18:03:05,443 on stmt: $const216.24 = const(int, 1)
DEBUG 2022-02-07 18:03:05,443 on stmt: $const220.26 = const(int, 2)
DEBUG 2022-02-07 18:03:05,443 on stmt: $222binary_floor_divide.27 = n // $const220.26
DEBUG 2022-02-07 18:03:05,443 on stmt: $224call_function.28 = call $214load_global.23($const216.24, $222binary_floor_divide.27, func=$214load_global.23, args=[Var($const216.24, loop_hafnian_batch.py:43), Var($222binary_floor_divide.27, loop_hafnian_batch.py:43)], kws=(), vararg=None, target=None)
DEBUG 2022-02-07 18:03:05,458 on stmt: $226get_iter.29 = getiter(value=$224call_function.28)
DEBUG 2022-02-07 18:03:05,458 on stmt: $phi228.1 = $226get_iter.29
DEBUG 2022-02-07 18:03:05,458 on stmt: jump 228
DEBUG 2022-02-07 18:03:05,458 ==== SSA block rewrite pass on 228
DEBUG 2022-02-07 18:03:05,458 Running <numba.core.ssa._FreshVarHandler object at 0x00000196AEE97490>
DEBUG 2022-02-07 18:03:05,458 on stmt: $228for_iter.2 = iternext(value=$phi228.1)
DEBUG 2022-02-07 18:03:05,458 on stmt: $228for_iter.3 = pair_first(value=$228for_iter.2)
DEBUG 2022-02-07 18:03:05,458 on stmt: $228for_iter.4 = pair_second(value=$228for_iter.2)
DEBUG 2022-02-07 18:03:05,458 on stmt: $phi230.2 = $228for_iter.3
DEBUG 2022-02-07 18:03:05,458 on stmt: branch $228for_iter.4, 230, 258
DEBUG 2022-02-07 18:03:05,458 ==== SSA block rewrite pass on 230
DEBUG 2022-02-07 18:03:05,458 Running <numba.core.ssa._FreshVarHandler object at 0x00000196AEE97490>
DEBUG 2022-02-07 18:03:05,458 on stmt: i = $phi230.2
DEBUG 2022-02-07 18:03:05,458 on stmt: $240binary_subscr.7 = getitem(value=edge_reps, index=i, fn=<built-in function getitem>)
DEBUG 2022-02-07 18:03:05,458 on stmt: $246binary_subscr.10 = getitem(value=kept_edges, index=i, fn=<built-in function getitem>)
DEBUG 2022-02-07 18:03:05,458 on stmt: $248build_tuple.11 = build_tuple(items=[Var($240binary_subscr.7, loop_hafnian_batch.py:44), Var($246binary_subscr.10, loop_hafnian_batch.py:44)])
DEBUG 2022-02-07 18:03:05,458 on stmt: $250binary_subscr.12 = getitem(value=binoms, index=$248build_tuple.11, fn=<built-in function getitem>)
DEBUG 2022-02-07 18:03:05,458 on stmt: $252inplace_multiply.13 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=binom_prod, rhs=$250binary_subscr.12, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-07 18:03:05,458 on stmt: binom_prod = $252inplace_multiply.13
DEBUG 2022-02-07 18:03:05,458 replaced with: binom_prod.1 = $252inplace_multiply.13
DEBUG 2022-02-07 18:03:05,458 on stmt: jump 228
DEBUG 2022-02-07 18:03:05,458 ==== SSA block rewrite pass on 258
DEBUG 2022-02-07 18:03:05,458 Running <numba.core.ssa._FreshVarHandler object at 0x00000196AEE97490>
DEBUG 2022-02-07 18:03:05,458 on stmt: bool260 = global(bool: <class 'bool'>)
DEBUG 2022-02-07 18:03:05,458 on stmt: $260pred = call bool260(glynn, func=bool260, args=(Var(glynn, loop_hafnian_batch.py:20),), kws=(), vararg=None, target=None)
DEBUG 2022-02-07 18:03:05,458 on stmt: branch $260pred, 264, 278
DEBUG 2022-02-07 18:03:05,458 ==== SSA block rewrite pass on 264
DEBUG 2022-02-07 18:03:05,458 Running <numba.core.ssa._FreshVarHandler object at 0x00000196AEE97490>
DEBUG 2022-02-07 18:03:05,458 on stmt: $const264.1 = const(int, 2)
DEBUG 2022-02-07 18:03:05,458 on stmt: $268binary_multiply.3 = $const264.1 * kept_edges
DEBUG 2022-02-07 18:03:05,458 on stmt: delta = $268binary_multiply.3 - edge_reps
DEBUG 2022-02-07 18:03:05,458 on stmt: jump 282
DEBUG 2022-02-07 18:03:05,458 ==== SSA block rewrite pass on 278
DEBUG 2022-02-07 18:03:05,458 Running <numba.core.ssa._FreshVarHandler object at 0x00000196AEE97490>
DEBUG 2022-02-07 18:03:05,458 on stmt: delta.1 = kept_edges
DEBUG 2022-02-07 18:03:05,465 on stmt: jump 282
DEBUG 2022-02-07 18:03:05,465 ==== SSA block rewrite pass on 282
DEBUG 2022-02-07 18:03:05,465 Running <numba.core.ssa._FreshVarHandler object at 0x00000196AEE97490>
DEBUG 2022-02-07 18:03:05,465 on stmt: delta.2 = phi(incoming_values=[Var(delta, loop_hafnian_batch.py:47), Var(delta.1, loop_hafnian_batch.py:49)], incoming_blocks=[264, 278])
DEBUG 2022-02-07 18:03:05,465 on stmt: $282load_global.1 = global(get_submatrices: CPUDispatcher(<function get_submatrices at 0x00000196AE71E670>))
DEBUG 2022-02-07 18:03:05,465 on stmt: $292call_function.6 = call $282load_global.1(delta.2, A, D, oddV, func=$282load_global.1, args=[Var(delta.2, loop_hafnian_batch.py:51), Var(A, loop_hafnian_batch.py:20), Var(D, loop_hafnian_batch.py:20), Var(oddV, loop_hafnian_batch.py:21)], kws=(), vararg=None, target=None)
DEBUG 2022-02-07 18:03:05,465 on stmt: $294unpack_sequence.11 = exhaust_iter(value=$292call_function.6, count=4)
DEBUG 2022-02-07 18:03:05,465 on stmt: $294unpack_sequence.7 = static_getitem(value=$294unpack_sequence.11, index=0, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-02-07 18:03:05,465 on stmt: $294unpack_sequence.8 = static_getitem(value=$294unpack_sequence.11, index=1, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-02-07 18:03:05,465 on stmt: $294unpack_sequence.9 = static_getitem(value=$294unpack_sequence.11, index=2, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-02-07 18:03:05,465 on stmt: $294unpack_sequence.10 = static_getitem(value=$294unpack_sequence.11, index=3, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-02-07 18:03:05,465 on stmt: AX_S = $294unpack_sequence.7
DEBUG 2022-02-07 18:03:05,465 on stmt: XD_S = $294unpack_sequence.8
DEBUG 2022-02-07 18:03:05,465 on stmt: D_S = $294unpack_sequence.9
DEBUG 2022-02-07 18:03:05,465 on stmt: oddVX_S = $294unpack_sequence.10
DEBUG 2022-02-07 18:03:05,465 on stmt: $304load_global.12 = global(eigvals: CPUDispatcher(<function eigvals at 0x00000196AE71EB80>))
DEBUG 2022-02-07 18:03:05,465 on stmt: E = call $304load_global.12(AX_S, func=$304load_global.12, args=[Var(AX_S, loop_hafnian_batch.py:51)], kws=(), vararg=None, target=None)
DEBUG 2022-02-07 18:03:05,465 on stmt: $312load_global.15 = global(f_loop: CPUDispatcher(<function f_loop at 0x00000196AE71E310>))
DEBUG 2022-02-07 18:03:05,465 on stmt: f_even = call $312load_global.15(E, AX_S, XD_S, D_S, N_max, func=$312load_global.15, args=[Var(E, loop_hafnian_batch.py:53), Var(AX_S, loop_hafnian_batch.py:51), Var(XD_S, loop_hafnian_batch.py:51), Var(D_S, loop_hafnian_batch.py:51), Var(N_max, loop_hafnian_batch.py:26)], kws=(), vararg=None, target=None)
DEBUG 2022-02-07 18:03:05,465 on stmt: $328load_global.22 = global(f_loop_odd: CPUDispatcher(<function f_loop_odd at 0x00000196AE71E4C0>))
DEBUG 2022-02-07 18:03:05,465 on stmt: f_odd = call $328load_global.22(E, AX_S, XD_S, D_S, N_max, oddloop, oddVX_S, func=$328load_global.22, args=[Var(E, loop_hafnian_batch.py:53), Var(AX_S, loop_hafnian_batch.py:51), Var(XD_S, loop_hafnian_batch.py:51), Var(D_S, loop_hafnian_batch.py:51), Var(N_max, loop_hafnian_batch.py:26), Var(oddloop, loop_hafnian_batch.py:20), Var(oddVX_S, loop_hafnian_batch.py:51)], kws=(), vararg=None, target=None)
DEBUG 2022-02-07 18:03:05,465 on stmt: $348load_global.31 = global(range: <class 'range'>)
DEBUG 2022-02-07 18:03:05,465 on stmt: $const350.32 = const(int, 2)
DEBUG 2022-02-07 18:03:05,465 on stmt: $const354.34 = const(int, 0)
DEBUG 2022-02-07 18:03:05,465 on stmt: $356binary_subscr.35 = static_getitem(value=kept_edges, index=0, index_var=$const354.34, fn=<built-in function getitem>)
DEBUG 2022-02-07 18:03:05,465 on stmt: $358binary_multiply.36 = $const350.32 * $356binary_subscr.35
DEBUG 2022-02-07 18:03:05,465 on stmt: $const360.37 = const(int, 2)
DEBUG 2022-02-07 18:03:05,465 on stmt: $364binary_multiply.39 = $const360.37 * batch_max
DEBUG 2022-02-07 18:03:05,465 on stmt: $368binary_add.41 = $364binary_multiply.39 + odd_cutoff
DEBUG 2022-02-07 18:03:05,465 on stmt: $const370.42 = const(int, 1)
DEBUG 2022-02-07 18:03:05,465 on stmt: $372binary_add.43 = $368binary_add.41 + $const370.42
DEBUG 2022-02-07 18:03:05,465 on stmt: $374call_function.44 = call $348load_global.31($358binary_multiply.36, $372binary_add.43, func=$348load_global.31, args=[Var($358binary_multiply.36, loop_hafnian_batch.py:58), Var($372binary_add.43, loop_hafnian_batch.py:58)], kws=(), vararg=None, target=None)
DEBUG 2022-02-07 18:03:05,465 on stmt: $376get_iter.45 = getiter(value=$374call_function.44)
DEBUG 2022-02-07 18:03:05,465 on stmt: $phi378.1 = $376get_iter.45
DEBUG 2022-02-07 18:03:05,465 on stmt: jump 378
DEBUG 2022-02-07 18:03:05,465 ==== SSA block rewrite pass on 378
DEBUG 2022-02-07 18:03:05,465 Running <numba.core.ssa._FreshVarHandler object at 0x00000196AEE97490>
DEBUG 2022-02-07 18:03:05,465 on stmt: $378for_iter.2 = iternext(value=$phi378.1)
DEBUG 2022-02-07 18:03:05,465 on stmt: $378for_iter.3 = pair_first(value=$378for_iter.2)
DEBUG 2022-02-07 18:03:05,465 on stmt: $378for_iter.4 = pair_second(value=$378for_iter.2)
DEBUG 2022-02-07 18:03:05,465 on stmt: $phi380.2 = $378for_iter.3
DEBUG 2022-02-07 18:03:05,465 on stmt: branch $378for_iter.4, 380, 510
DEBUG 2022-02-07 18:03:05,465 ==== SSA block rewrite pass on 380
DEBUG 2022-02-07 18:03:05,465 Running <numba.core.ssa._FreshVarHandler object at 0x00000196AEE97490>
DEBUG 2022-02-07 18:03:05,465 on stmt: N_det = $phi380.2
DEBUG 2022-02-07 18:03:05,465 on stmt: N = N_fixed + N_det
DEBUG 2022-02-07 18:03:05,465 on stmt: $const390.6 = const(float, -1.0)
DEBUG 2022-02-07 18:03:05,465 on stmt: $const394.8 = const(int, 2)
DEBUG 2022-02-07 18:03:05,465 on stmt: $396binary_floor_divide.9 = N // $const394.8
DEBUG 2022-02-07 18:03:05,465 on stmt: $400binary_subtract.11 = $396binary_floor_divide.9 - edges_sum
DEBUG 2022-02-07 18:03:05,465 on stmt: plus_minus = $const390.6 ** $400binary_subtract.11
DEBUG 2022-02-07 18:03:05,465 on stmt: $const410.15 = const(int, 2)
DEBUG 2022-02-07 18:03:05,465 on stmt: $412binary_floor_divide.16 = N_det // $const410.15
DEBUG 2022-02-07 18:03:05,465 on stmt: $const416.18 = const(int, 0)
DEBUG 2022-02-07 18:03:05,465 on stmt: $418binary_subscr.19 = static_getitem(value=kept_edges, index=0, index_var=$const416.18, fn=<built-in function getitem>)
DEBUG 2022-02-07 18:03:05,465 on stmt: $420build_tuple.20 = build_tuple(items=[Var($412binary_floor_divide.16, loop_hafnian_batch.py:62), Var($418binary_subscr.19, loop_hafnian_batch.py:62)])
DEBUG 2022-02-07 18:03:05,465 on stmt: $422binary_subscr.21 = getitem(value=binoms, index=$420build_tuple.20, fn=<built-in function getitem>)
DEBUG 2022-02-07 18:03:05,465 on stmt: n_det_binom_prod = $422binary_subscr.21 * binom_prod
DEBUG 2022-02-07 18:03:05,465 on stmt: $const432.25 = const(int, 2)
DEBUG 2022-02-07 18:03:05,465 on stmt: $434binary_modulo.26 = N_det % $const432.25
DEBUG 2022-02-07 18:03:05,465 on stmt: $const436.27 = const(int, 0)
DEBUG 2022-02-07 18:03:05,465 on stmt: $438compare_op.28 = $434binary_modulo.26 == $const436.27
DEBUG 2022-02-07 18:03:05,465 on stmt: bool440 = global(bool: <class 'bool'>)
DEBUG 2022-02-07 18:03:05,465 on stmt: $440pred = call bool440($438compare_op.28, func=bool440, args=(Var($438compare_op.28, loop_hafnian_batch.py:64),), kws=(), vararg=None, target=None)
DEBUG 2022-02-07 18:03:05,465 on stmt: branch $440pred, 444, 478
DEBUG 2022-02-07 18:03:05,465 ==== SSA block rewrite pass on 444
DEBUG 2022-02-07 18:03:05,465 Running <numba.core.ssa._FreshVarHandler object at 0x00000196AEE97490>
DEBUG 2022-02-07 18:03:05,465 on stmt: $450binary_subscr.6 = getitem(value=Hnew, index=N_det, fn=<built-in function getitem>)
DEBUG 2022-02-07 18:03:05,465 on stmt: $456binary_multiply.9 = n_det_binom_prod * plus_minus
DEBUG 2022-02-07 18:03:05,465 on stmt: $const462.12 = const(int, 2)
DEBUG 2022-02-07 18:03:05,465 on stmt: $464binary_floor_divide.13 = N // $const462.12
DEBUG 2022-02-07 18:03:05,465 on stmt: $466binary_subscr.14 = getitem(value=f_even, index=$464binary_floor_divide.13, fn=<built-in function getitem>)
DEBUG 2022-02-07 18:03:05,465 on stmt: $468binary_multiply.15 = $456binary_multiply.9 * $466binary_subscr.14
DEBUG 2022-02-07 18:03:05,481 on stmt: $470inplace_add.16 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$450binary_subscr.6, rhs=$468binary_multiply.15, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-07 18:03:05,481 on stmt: Hnew[N_det] = $470inplace_add.16
DEBUG 2022-02-07 18:03:05,481 on stmt: jump 506
DEBUG 2022-02-07 18:03:05,481 ==== SSA block rewrite pass on 478
DEBUG 2022-02-07 18:03:05,481 Running <numba.core.ssa._FreshVarHandler object at 0x00000196AEE97490>
DEBUG 2022-02-07 18:03:05,481 on stmt: $484binary_subscr.6 = getitem(value=Hnew, index=N_det, fn=<built-in function getitem>)
DEBUG 2022-02-07 18:03:05,481 on stmt: $490binary_multiply.9 = n_det_binom_prod * plus_minus
DEBUG 2022-02-07 18:03:05,481 on stmt: $496binary_subscr.12 = getitem(value=f_odd, index=N, fn=<built-in function getitem>)
DEBUG 2022-02-07 18:03:05,481 on stmt: $498binary_multiply.13 = $490binary_multiply.9 * $496binary_subscr.12
DEBUG 2022-02-07 18:03:05,481 on stmt: $500inplace_add.14 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$484binary_subscr.6, rhs=$498binary_multiply.13, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-07 18:03:05,481 on stmt: Hnew[N_det] = $500inplace_add.14
DEBUG 2022-02-07 18:03:05,481 on stmt: jump 506
DEBUG 2022-02-07 18:03:05,481 ==== SSA block rewrite pass on 506
DEBUG 2022-02-07 18:03:05,481 Running <numba.core.ssa._FreshVarHandler object at 0x00000196AEE97490>
DEBUG 2022-02-07 18:03:05,481 on stmt: jump 378
DEBUG 2022-02-07 18:03:05,481 ==== SSA block rewrite pass on 510
DEBUG 2022-02-07 18:03:05,481 Running <numba.core.ssa._FreshVarHandler object at 0x00000196AEE97490>
DEBUG 2022-02-07 18:03:05,481 on stmt: $514inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=H_batch, rhs=Hnew, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-07 18:03:05,481 on stmt: H_batch = $514inplace_add.3
DEBUG 2022-02-07 18:03:05,481 on stmt: jump 158
DEBUG 2022-02-07 18:03:05,481 ==== SSA block rewrite pass on 520
DEBUG 2022-02-07 18:03:05,481 Running <numba.core.ssa._FreshVarHandler object at 0x00000196AEE97490>
DEBUG 2022-02-07 18:03:05,481 on stmt: bool522 = global(bool: <class 'bool'>)
DEBUG 2022-02-07 18:03:05,481 on stmt: $522pred = call bool522(glynn, func=bool522, args=(Var(glynn, loop_hafnian_batch.py:20),), kws=(), vararg=None, target=None)
DEBUG 2022-02-07 18:03:05,481 on stmt: branch $522pred, 526, 580
DEBUG 2022-02-07 18:03:05,481 ==== SSA block rewrite pass on 526
DEBUG 2022-02-07 18:03:05,481 Running <numba.core.ssa._FreshVarHandler object at 0x00000196AEE97490>
DEBUG 2022-02-07 18:03:05,481 on stmt: $526load_global.0 = global(range: <class 'range'>)
DEBUG 2022-02-07 18:03:05,481 on stmt: $530load_attr.2 = getattr(value=H_batch, attr=shape)
DEBUG 2022-02-07 18:03:05,481 on stmt: $const532.3 = const(int, 0)
DEBUG 2022-02-07 18:03:05,481 on stmt: $534binary_subscr.4 = static_getitem(value=$530load_attr.2, index=0, index_var=$const532.3, fn=<built-in function getitem>)
DEBUG 2022-02-07 18:03:05,481 on stmt: $536call_function.5 = call $526load_global.0($534binary_subscr.4, func=$526load_global.0, args=[Var($534binary_subscr.4, loop_hafnian_batch.py:72)], kws=(), vararg=None, target=None)
DEBUG 2022-02-07 18:03:05,481 on stmt: $538get_iter.6 = getiter(value=$536call_function.5)
DEBUG 2022-02-07 18:03:05,481 on stmt: $phi540.0 = $538get_iter.6
DEBUG 2022-02-07 18:03:05,481 on stmt: jump 540
DEBUG 2022-02-07 18:03:05,481 ==== SSA block rewrite pass on 540
DEBUG 2022-02-07 18:03:05,481 Running <numba.core.ssa._FreshVarHandler object at 0x00000196AEE97490>
DEBUG 2022-02-07 18:03:05,481 on stmt: $540for_iter.1 = iternext(value=$phi540.0)
DEBUG 2022-02-07 18:03:05,481 on stmt: $540for_iter.2 = pair_first(value=$540for_iter.1)
DEBUG 2022-02-07 18:03:05,481 on stmt: $540for_iter.3 = pair_second(value=$540for_iter.1)
DEBUG 2022-02-07 18:03:05,481 on stmt: $phi542.1 = $540for_iter.2
DEBUG 2022-02-07 18:03:05,481 on stmt: branch $540for_iter.3, 542, 580
DEBUG 2022-02-07 18:03:05,481 ==== SSA block rewrite pass on 542
DEBUG 2022-02-07 18:03:05,481 Running <numba.core.ssa._FreshVarHandler object at 0x00000196AEE97490>
DEBUG 2022-02-07 18:03:05,481 on stmt: j = $phi542.1
DEBUG 2022-02-07 18:03:05,481 on stmt: x = N_fixed + j
DEBUG 2022-02-07 18:03:05,481 on stmt: $558binary_subscr.9 = getitem(value=H_batch, index=j, fn=<built-in function getitem>)
DEBUG 2022-02-07 18:03:05,481 on stmt: $const560.10 = const(float, 0.5)
DEBUG 2022-02-07 18:03:05,481 on stmt: $const564.12 = const(int, 2)
DEBUG 2022-02-07 18:03:05,481 on stmt: $566binary_floor_divide.13 = x // $const564.12
DEBUG 2022-02-07 18:03:05,481 on stmt: $568binary_power.14 = $const560.10 ** $566binary_floor_divide.13
DEBUG 2022-02-07 18:03:05,481 on stmt: $570inplace_multiply.15 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=$558binary_subscr.9, rhs=$568binary_power.14, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-07 18:03:05,481 on stmt: H_batch[j] = $570inplace_multiply.15
DEBUG 2022-02-07 18:03:05,481 on stmt: jump 540
DEBUG 2022-02-07 18:03:05,481 ==== SSA block rewrite pass on 580
DEBUG 2022-02-07 18:03:05,481 Running <numba.core.ssa._FreshVarHandler object at 0x00000196AEE97490>
DEBUG 2022-02-07 18:03:05,481 on stmt: $582return_value.1 = cast(value=H_batch)
DEBUG 2022-02-07 18:03:05,481 on stmt: return $582return_value.1
DEBUG 2022-02-07 18:03:05,481 Replaced assignments: defaultdict(<class 'list'>,
            {162: [<numba.core.ir.Assign object at 0x00000196AEF27790>],
             230: [<numba.core.ir.Assign object at 0x00000196AEF27CA0>]})
DEBUG 2022-02-07 18:03:05,481 ==== SSA block rewrite pass on 0
DEBUG 2022-02-07 18:03:05,481 Running <numba.core.ssa._FixSSAVars object at 0x00000196AEF27BE0>
DEBUG 2022-02-07 18:03:05,481 on stmt: A = arg(0, name=A)
DEBUG 2022-02-07 18:03:05,481 on stmt: D = arg(1, name=D)
DEBUG 2022-02-07 18:03:05,481 on stmt: fixed_edge_reps = arg(2, name=fixed_edge_reps)
DEBUG 2022-02-07 18:03:05,481 on stmt: batch_max = arg(3, name=batch_max)
DEBUG 2022-02-07 18:03:05,481 on stmt: odd_cutoff = arg(4, name=odd_cutoff)
DEBUG 2022-02-07 18:03:05,481 on stmt: glynn = arg(5, name=glynn)
DEBUG 2022-02-07 18:03:05,481 on stmt: $const4.1 = const(int, 0)
DEBUG 2022-02-07 18:03:05,481 on stmt: oddloop = static_getitem(value=D, index=0, index_var=$const4.1, fn=<built-in function getitem>)
DEBUG 2022-02-07 18:03:05,481 on stmt: $const12.4 = const(int, 0)
DEBUG 2022-02-07 18:03:05,481 on stmt: $const14.5 = const(NoneType, None)
DEBUG 2022-02-07 18:03:05,481 on stmt: $const16.6 = const(NoneType, None)
DEBUG 2022-02-07 18:03:05,481 on stmt: $18build_slice.7 = global(slice: <class 'slice'>)
DEBUG 2022-02-07 18:03:05,481 on stmt: $18build_slice.8 = call $18build_slice.7($const14.5, $const16.6, func=$18build_slice.7, args=(Var($const14.5, loop_hafnian_batch.py:21), Var($const16.6, loop_hafnian_batch.py:21)), kws=(), vararg=None, target=None)
DEBUG 2022-02-07 18:03:05,481 on stmt: $20build_tuple.9 = build_tuple(items=[Var($const12.4, loop_hafnian_batch.py:21), Var($18build_slice.8, loop_hafnian_batch.py:21)])
DEBUG 2022-02-07 18:03:05,481 on stmt: oddV = static_getitem(value=A, index=(0, slice(None, None, None)), index_var=$20build_tuple.9, fn=<built-in function getitem>)
DEBUG 2022-02-07 18:03:05,481 on stmt: $28load_attr.12 = getattr(value=A, attr=shape)
DEBUG 2022-02-07 18:03:05,496 on stmt: $const30.13 = const(int, 0)
DEBUG 2022-02-07 18:03:05,496 on stmt: n = static_getitem(value=$28load_attr.12, index=0, index_var=$const30.13, fn=<built-in function getitem>)
DEBUG 2022-02-07 18:03:05,496 on stmt: $const36.15 = const(int, 2)
DEBUG 2022-02-07 18:03:05,496 on stmt: $40load_method.17 = getattr(value=fixed_edge_reps, attr=sum)
DEBUG 2022-02-07 18:03:05,496 on stmt: $42call_method.18 = call $40load_method.17(func=$40load_method.17, args=[], kws=(), vararg=None, target=None)
DEBUG 2022-02-07 18:03:05,496 on stmt: N_fixed = $const36.15 * $42call_method.18
DEBUG 2022-02-07 18:03:05,496 on stmt: $const50.21 = const(int, 2)
DEBUG 2022-02-07 18:03:05,496 on stmt: $54binary_multiply.23 = $const50.21 * batch_max
DEBUG 2022-02-07 18:03:05,496 on stmt: $56binary_add.24 = N_fixed + $54binary_multiply.23
DEBUG 2022-02-07 18:03:05,496 on stmt: N_max = $56binary_add.24 + odd_cutoff
DEBUG 2022-02-07 18:03:05,496 on stmt: $64load_global.27 = global(np: <module 'numpy' from 'C:\\Users\\zl4821\\Anaconda3\\envs\\GBS\\lib\\site-packages\\numpy\\__init__.py'>)
DEBUG 2022-02-07 18:03:05,496 on stmt: $66load_method.28 = getattr(value=$64load_global.27, attr=concatenate)
DEBUG 2022-02-07 18:03:05,496 on stmt: $68load_global.29 = global(np: <module 'numpy' from 'C:\\Users\\zl4821\\Anaconda3\\envs\\GBS\\lib\\site-packages\\numpy\\__init__.py'>)
DEBUG 2022-02-07 18:03:05,496 on stmt: $70load_method.30 = getattr(value=$68load_global.29, attr=array)
DEBUG 2022-02-07 18:03:05,496 on stmt: $74build_list.32 = build_list(items=[Var(batch_max, loop_hafnian_batch.py:20)])
DEBUG 2022-02-07 18:03:05,496 on stmt: $76call_method.33 = call $70load_method.30($74build_list.32, func=$70load_method.30, args=[Var($74build_list.32, loop_hafnian_batch.py:28)], kws=(), vararg=None, target=None)
DEBUG 2022-02-07 18:03:05,496 on stmt: $80build_tuple.35 = build_tuple(items=[Var($76call_method.33, loop_hafnian_batch.py:28), Var(fixed_edge_reps, loop_hafnian_batch.py:20)])
DEBUG 2022-02-07 18:03:05,496 on stmt: edge_reps = call $66load_method.28($80build_tuple.35, func=$66load_method.28, args=[Var($80build_tuple.35, loop_hafnian_batch.py:28)], kws=(), vararg=None, target=None)
DEBUG 2022-02-07 18:03:05,496 on stmt: $86load_global.37 = global(np: <module 'numpy' from 'C:\\Users\\zl4821\\Anaconda3\\envs\\GBS\\lib\\site-packages\\numpy\\__init__.py'>)
DEBUG 2022-02-07 18:03:05,496 on stmt: $88load_method.38 = getattr(value=$86load_global.37, attr=prod)
DEBUG 2022-02-07 18:03:05,496 on stmt: $const92.40 = const(int, 1)
DEBUG 2022-02-07 18:03:05,496 on stmt: $94binary_add.41 = edge_reps + $const92.40
DEBUG 2022-02-07 18:03:05,496 on stmt: steps = call $88load_method.38($94binary_add.41, func=$88load_method.38, args=[Var($94binary_add.41, loop_hafnian_batch.py:29)], kws=(), vararg=None, target=None)
DEBUG 2022-02-07 18:03:05,496 on stmt: $102load_method.44 = getattr(value=edge_reps, attr=max)
DEBUG 2022-02-07 18:03:05,496 on stmt: $104call_method.45 = call $102load_method.44(func=$102load_method.44, args=[], kws=(), vararg=None, target=None)
DEBUG 2022-02-07 18:03:05,496 on stmt: max_binom = $104call_method.45 + odd_cutoff
DEBUG 2022-02-07 18:03:05,496 on stmt: $112load_global.48 = global(precompute_binoms: CPUDispatcher(<function precompute_binoms at 0x00000196AE6F6CA0>))
DEBUG 2022-02-07 18:03:05,496 on stmt: binoms = call $112load_global.48(max_binom, func=$112load_global.48, args=[Var(max_binom, loop_hafnian_batch.py:31)], kws=(), vararg=None, target=None)
DEBUG 2022-02-07 18:03:05,496 on stmt: $120load_global.51 = global(np: <module 'numpy' from 'C:\\Users\\zl4821\\Anaconda3\\envs\\GBS\\lib\\site-packages\\numpy\\__init__.py'>)
DEBUG 2022-02-07 18:03:05,496 on stmt: $122load_attr.52 = getattr(value=$120load_global.51, attr=zeros)
DEBUG 2022-02-07 18:03:05,496 on stmt: $const124.53 = const(int, 2)
DEBUG 2022-02-07 18:03:05,496 on stmt: $128binary_multiply.55 = $const124.53 * batch_max
DEBUG 2022-02-07 18:03:05,496 on stmt: $132binary_add.57 = $128binary_multiply.55 + odd_cutoff
DEBUG 2022-02-07 18:03:05,496 on stmt: $const134.58 = const(int, 1)
DEBUG 2022-02-07 18:03:05,496 on stmt: $136binary_add.59 = $132binary_add.57 + $const134.58
DEBUG 2022-02-07 18:03:05,496 on stmt: $138load_global.60 = global(np: <module 'numpy' from 'C:\\Users\\zl4821\\Anaconda3\\envs\\GBS\\lib\\site-packages\\numpy\\__init__.py'>)
DEBUG 2022-02-07 18:03:05,496 on stmt: $140load_attr.61 = getattr(value=$138load_global.60, attr=complex128)
DEBUG 2022-02-07 18:03:05,496 on stmt: H_batch = call $122load_attr.52($136binary_add.59, func=$122load_attr.52, args=[Var($136binary_add.59, loop_hafnian_batch.py:34)], kws=[('dtype', Var($140load_attr.61, loop_hafnian_batch.py:34))], vararg=None, target=None)
DEBUG 2022-02-07 18:03:05,496 on stmt: $148load_global.64 = global(numba: <module 'numba' from 'C:\\Users\\zl4821\\Anaconda3\\envs\\GBS\\lib\\site-packages\\numba\\__init__.py'>)
DEBUG 2022-02-07 18:03:05,496 on stmt: $150load_method.65 = getattr(value=$148load_global.64, attr=prange)
DEBUG 2022-02-07 18:03:05,496 on stmt: $154call_method.67 = call $150load_method.65(steps, func=$150load_method.65, args=[Var(steps, loop_hafnian_batch.py:29)], kws=(), vararg=None, target=None)
DEBUG 2022-02-07 18:03:05,496 on stmt: $156get_iter.68 = getiter(value=$154call_method.67)
DEBUG 2022-02-07 18:03:05,496 on stmt: $phi158.0 = $156get_iter.68
DEBUG 2022-02-07 18:03:05,496 on stmt: jump 158
DEBUG 2022-02-07 18:03:05,496 ==== SSA block rewrite pass on 158
DEBUG 2022-02-07 18:03:05,496 Running <numba.core.ssa._FixSSAVars object at 0x00000196AEF27BE0>
DEBUG 2022-02-07 18:03:05,496 on stmt: $158for_iter.1 = iternext(value=$phi158.0)
DEBUG 2022-02-07 18:03:05,496 on stmt: $158for_iter.2 = pair_first(value=$158for_iter.1)
DEBUG 2022-02-07 18:03:05,496 on stmt: $158for_iter.3 = pair_second(value=$158for_iter.1)
DEBUG 2022-02-07 18:03:05,496 on stmt: $phi162.1 = $158for_iter.2
DEBUG 2022-02-07 18:03:05,496 on stmt: branch $158for_iter.3, 162, 520
DEBUG 2022-02-07 18:03:05,496 ==== SSA block rewrite pass on 162
DEBUG 2022-02-07 18:03:05,496 Running <numba.core.ssa._FixSSAVars object at 0x00000196AEF27BE0>
DEBUG 2022-02-07 18:03:05,496 on stmt: j = $phi162.1
DEBUG 2022-02-07 18:03:05,496 on stmt: $164load_global.2 = global(np: <module 'numpy' from 'C:\\Users\\zl4821\\Anaconda3\\envs\\GBS\\lib\\site-packages\\numpy\\__init__.py'>)
DEBUG 2022-02-07 18:03:05,496 on stmt: $166load_attr.3 = getattr(value=$164load_global.2, attr=zeros)
DEBUG 2022-02-07 18:03:05,496 on stmt: $const168.4 = const(int, 2)
DEBUG 2022-02-07 18:03:05,496 on stmt: $172binary_multiply.6 = $const168.4 * batch_max
DEBUG 2022-02-07 18:03:05,496 on stmt: $176binary_add.8 = $172binary_multiply.6 + odd_cutoff
DEBUG 2022-02-07 18:03:05,496 on stmt: $const178.9 = const(int, 1)
DEBUG 2022-02-07 18:03:05,496 on stmt: $180binary_add.10 = $176binary_add.8 + $const178.9
DEBUG 2022-02-07 18:03:05,496 on stmt: $182load_global.11 = global(np: <module 'numpy' from 'C:\\Users\\zl4821\\Anaconda3\\envs\\GBS\\lib\\site-packages\\numpy\\__init__.py'>)
DEBUG 2022-02-07 18:03:05,496 on stmt: $184load_attr.12 = getattr(value=$182load_global.11, attr=complex128)
DEBUG 2022-02-07 18:03:05,496 on stmt: Hnew = call $166load_attr.3($180binary_add.10, func=$166load_attr.3, args=[Var($180binary_add.10, loop_hafnian_batch.py:37)], kws=[('dtype', Var($184load_attr.12, loop_hafnian_batch.py:37))], vararg=None, target=None)
DEBUG 2022-02-07 18:03:05,496 on stmt: $192load_global.15 = global(find_kept_edges: CPUDispatcher(<function find_kept_edges at 0x00000196AE71E160>))
DEBUG 2022-02-07 18:03:05,496 on stmt: kept_edges = call $192load_global.15(j, edge_reps, func=$192load_global.15, args=[Var(j, loop_hafnian_batch.py:35), Var(edge_reps, loop_hafnian_batch.py:28)], kws=(), vararg=None, target=None)
DEBUG 2022-02-07 18:03:05,496 on stmt: $204load_method.20 = getattr(value=kept_edges, attr=sum)
DEBUG 2022-02-07 18:03:05,496 on stmt: edges_sum = call $204load_method.20(func=$204load_method.20, args=[], kws=(), vararg=None, target=None)
DEBUG 2022-02-07 18:03:05,496 on stmt: binom_prod = const(float, 1.0)
DEBUG 2022-02-07 18:03:05,496 on stmt: $214load_global.23 = global(range: <class 'range'>)
DEBUG 2022-02-07 18:03:05,496 on stmt: $const216.24 = const(int, 1)
DEBUG 2022-02-07 18:03:05,496 on stmt: $const220.26 = const(int, 2)
DEBUG 2022-02-07 18:03:05,496 on stmt: $222binary_floor_divide.27 = n // $const220.26
DEBUG 2022-02-07 18:03:05,496 on stmt: $224call_function.28 = call $214load_global.23($const216.24, $222binary_floor_divide.27, func=$214load_global.23, args=[Var($const216.24, loop_hafnian_batch.py:43), Var($222binary_floor_divide.27, loop_hafnian_batch.py:43)], kws=(), vararg=None, target=None)
DEBUG 2022-02-07 18:03:05,496 on stmt: $226get_iter.29 = getiter(value=$224call_function.28)
DEBUG 2022-02-07 18:03:05,512 on stmt: $phi228.1 = $226get_iter.29
DEBUG 2022-02-07 18:03:05,512 on stmt: jump 228
DEBUG 2022-02-07 18:03:05,512 ==== SSA block rewrite pass on 228
DEBUG 2022-02-07 18:03:05,512 Running <numba.core.ssa._FixSSAVars object at 0x00000196AEF27BE0>
DEBUG 2022-02-07 18:03:05,512 on stmt: $228for_iter.2 = iternext(value=$phi228.1)
DEBUG 2022-02-07 18:03:05,512 on stmt: $228for_iter.3 = pair_first(value=$228for_iter.2)
DEBUG 2022-02-07 18:03:05,512 on stmt: $228for_iter.4 = pair_second(value=$228for_iter.2)
DEBUG 2022-02-07 18:03:05,512 on stmt: $phi230.2 = $228for_iter.3
DEBUG 2022-02-07 18:03:05,512 on stmt: branch $228for_iter.4, 230, 258
DEBUG 2022-02-07 18:03:05,512 ==== SSA block rewrite pass on 230
DEBUG 2022-02-07 18:03:05,512 Running <numba.core.ssa._FixSSAVars object at 0x00000196AEF27BE0>
DEBUG 2022-02-07 18:03:05,512 on stmt: i = $phi230.2
DEBUG 2022-02-07 18:03:05,512 on stmt: $240binary_subscr.7 = getitem(value=edge_reps, index=i, fn=<built-in function getitem>)
DEBUG 2022-02-07 18:03:05,512 on stmt: $246binary_subscr.10 = getitem(value=kept_edges, index=i, fn=<built-in function getitem>)
DEBUG 2022-02-07 18:03:05,512 on stmt: $248build_tuple.11 = build_tuple(items=[Var($240binary_subscr.7, loop_hafnian_batch.py:44), Var($246binary_subscr.10, loop_hafnian_batch.py:44)])
DEBUG 2022-02-07 18:03:05,512 on stmt: $250binary_subscr.12 = getitem(value=binoms, index=$248build_tuple.11, fn=<built-in function getitem>)
DEBUG 2022-02-07 18:03:05,512 on stmt: $252inplace_multiply.13 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=binom_prod, rhs=$250binary_subscr.12, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-07 18:03:05,512 find_def var='binom_prod' stmt=$252inplace_multiply.13 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=binom_prod, rhs=$250binary_subscr.12, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-07 18:03:05,512 find_def_from_top label 230
DEBUG 2022-02-07 18:03:05,512 idom 228 from label 230
DEBUG 2022-02-07 18:03:05,512 find_def_from_bottom label 228
DEBUG 2022-02-07 18:03:05,512 find_def_from_top label 228
DEBUG 2022-02-07 18:03:05,512 insert phi node binom_prod.2 = phi(incoming_values=[], incoming_blocks=[]) at 228
DEBUG 2022-02-07 18:03:05,512 find_def_from_bottom label 162
DEBUG 2022-02-07 18:03:05,512 incoming_def binom_prod = const(float, 1.0)
DEBUG 2022-02-07 18:03:05,512 find_def_from_bottom label 230
DEBUG 2022-02-07 18:03:05,512 incoming_def binom_prod.1 = $252inplace_multiply.13
DEBUG 2022-02-07 18:03:05,512 replaced with: $252inplace_multiply.13 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=binom_prod.2, rhs=$250binary_subscr.12, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-07 18:03:05,512 on stmt: binom_prod.1 = $252inplace_multiply.13
DEBUG 2022-02-07 18:03:05,512 on stmt: jump 228
DEBUG 2022-02-07 18:03:05,512 ==== SSA block rewrite pass on 258
DEBUG 2022-02-07 18:03:05,512 Running <numba.core.ssa._FixSSAVars object at 0x00000196AEF27BE0>
DEBUG 2022-02-07 18:03:05,512 on stmt: bool260 = global(bool: <class 'bool'>)
DEBUG 2022-02-07 18:03:05,512 on stmt: $260pred = call bool260(glynn, func=bool260, args=(Var(glynn, loop_hafnian_batch.py:20),), kws=(), vararg=None, target=None)
DEBUG 2022-02-07 18:03:05,512 on stmt: branch $260pred, 264, 278
DEBUG 2022-02-07 18:03:05,512 ==== SSA block rewrite pass on 264
DEBUG 2022-02-07 18:03:05,512 Running <numba.core.ssa._FixSSAVars object at 0x00000196AEF27BE0>
DEBUG 2022-02-07 18:03:05,512 on stmt: $const264.1 = const(int, 2)
DEBUG 2022-02-07 18:03:05,512 on stmt: $268binary_multiply.3 = $const264.1 * kept_edges
DEBUG 2022-02-07 18:03:05,512 on stmt: delta = $268binary_multiply.3 - edge_reps
DEBUG 2022-02-07 18:03:05,512 on stmt: jump 282
DEBUG 2022-02-07 18:03:05,512 ==== SSA block rewrite pass on 278
DEBUG 2022-02-07 18:03:05,512 Running <numba.core.ssa._FixSSAVars object at 0x00000196AEF27BE0>
DEBUG 2022-02-07 18:03:05,512 on stmt: delta.1 = kept_edges
DEBUG 2022-02-07 18:03:05,512 on stmt: jump 282
DEBUG 2022-02-07 18:03:05,512 ==== SSA block rewrite pass on 282
DEBUG 2022-02-07 18:03:05,512 Running <numba.core.ssa._FixSSAVars object at 0x00000196AEF27BE0>
DEBUG 2022-02-07 18:03:05,512 on stmt: delta.2 = phi(incoming_values=[Var(delta, loop_hafnian_batch.py:47), Var(delta.1, loop_hafnian_batch.py:49)], incoming_blocks=[264, 278])
DEBUG 2022-02-07 18:03:05,512 on stmt: $282load_global.1 = global(get_submatrices: CPUDispatcher(<function get_submatrices at 0x00000196AE71E670>))
DEBUG 2022-02-07 18:03:05,512 on stmt: $292call_function.6 = call $282load_global.1(delta.2, A, D, oddV, func=$282load_global.1, args=[Var(delta.2, loop_hafnian_batch.py:51), Var(A, loop_hafnian_batch.py:20), Var(D, loop_hafnian_batch.py:20), Var(oddV, loop_hafnian_batch.py:21)], kws=(), vararg=None, target=None)
DEBUG 2022-02-07 18:03:05,512 on stmt: $294unpack_sequence.11 = exhaust_iter(value=$292call_function.6, count=4)
DEBUG 2022-02-07 18:03:05,512 on stmt: $294unpack_sequence.7 = static_getitem(value=$294unpack_sequence.11, index=0, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-02-07 18:03:05,512 on stmt: $294unpack_sequence.8 = static_getitem(value=$294unpack_sequence.11, index=1, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-02-07 18:03:05,512 on stmt: $294unpack_sequence.9 = static_getitem(value=$294unpack_sequence.11, index=2, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-02-07 18:03:05,512 on stmt: $294unpack_sequence.10 = static_getitem(value=$294unpack_sequence.11, index=3, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-02-07 18:03:05,512 on stmt: AX_S = $294unpack_sequence.7
DEBUG 2022-02-07 18:03:05,512 on stmt: XD_S = $294unpack_sequence.8
DEBUG 2022-02-07 18:03:05,512 on stmt: D_S = $294unpack_sequence.9
DEBUG 2022-02-07 18:03:05,512 on stmt: oddVX_S = $294unpack_sequence.10
DEBUG 2022-02-07 18:03:05,512 on stmt: $304load_global.12 = global(eigvals: CPUDispatcher(<function eigvals at 0x00000196AE71EB80>))
DEBUG 2022-02-07 18:03:05,512 on stmt: E = call $304load_global.12(AX_S, func=$304load_global.12, args=[Var(AX_S, loop_hafnian_batch.py:51)], kws=(), vararg=None, target=None)
DEBUG 2022-02-07 18:03:05,512 on stmt: $312load_global.15 = global(f_loop: CPUDispatcher(<function f_loop at 0x00000196AE71E310>))
DEBUG 2022-02-07 18:03:05,512 on stmt: f_even = call $312load_global.15(E, AX_S, XD_S, D_S, N_max, func=$312load_global.15, args=[Var(E, loop_hafnian_batch.py:53), Var(AX_S, loop_hafnian_batch.py:51), Var(XD_S, loop_hafnian_batch.py:51), Var(D_S, loop_hafnian_batch.py:51), Var(N_max, loop_hafnian_batch.py:26)], kws=(), vararg=None, target=None)
DEBUG 2022-02-07 18:03:05,512 on stmt: $328load_global.22 = global(f_loop_odd: CPUDispatcher(<function f_loop_odd at 0x00000196AE71E4C0>))
DEBUG 2022-02-07 18:03:05,512 on stmt: f_odd = call $328load_global.22(E, AX_S, XD_S, D_S, N_max, oddloop, oddVX_S, func=$328load_global.22, args=[Var(E, loop_hafnian_batch.py:53), Var(AX_S, loop_hafnian_batch.py:51), Var(XD_S, loop_hafnian_batch.py:51), Var(D_S, loop_hafnian_batch.py:51), Var(N_max, loop_hafnian_batch.py:26), Var(oddloop, loop_hafnian_batch.py:20), Var(oddVX_S, loop_hafnian_batch.py:51)], kws=(), vararg=None, target=None)
DEBUG 2022-02-07 18:03:05,512 on stmt: $348load_global.31 = global(range: <class 'range'>)
DEBUG 2022-02-07 18:03:05,512 on stmt: $const350.32 = const(int, 2)
DEBUG 2022-02-07 18:03:05,512 on stmt: $const354.34 = const(int, 0)
DEBUG 2022-02-07 18:03:05,512 on stmt: $356binary_subscr.35 = static_getitem(value=kept_edges, index=0, index_var=$const354.34, fn=<built-in function getitem>)
DEBUG 2022-02-07 18:03:05,512 on stmt: $358binary_multiply.36 = $const350.32 * $356binary_subscr.35
DEBUG 2022-02-07 18:03:05,512 on stmt: $const360.37 = const(int, 2)
DEBUG 2022-02-07 18:03:05,512 on stmt: $364binary_multiply.39 = $const360.37 * batch_max
DEBUG 2022-02-07 18:03:05,512 on stmt: $368binary_add.41 = $364binary_multiply.39 + odd_cutoff
DEBUG 2022-02-07 18:03:05,512 on stmt: $const370.42 = const(int, 1)
DEBUG 2022-02-07 18:03:05,512 on stmt: $372binary_add.43 = $368binary_add.41 + $const370.42
DEBUG 2022-02-07 18:03:05,512 on stmt: $374call_function.44 = call $348load_global.31($358binary_multiply.36, $372binary_add.43, func=$348load_global.31, args=[Var($358binary_multiply.36, loop_hafnian_batch.py:58), Var($372binary_add.43, loop_hafnian_batch.py:58)], kws=(), vararg=None, target=None)
DEBUG 2022-02-07 18:03:05,512 on stmt: $376get_iter.45 = getiter(value=$374call_function.44)
DEBUG 2022-02-07 18:03:05,512 on stmt: $phi378.1 = $376get_iter.45
DEBUG 2022-02-07 18:03:05,527 on stmt: jump 378
DEBUG 2022-02-07 18:03:05,527 ==== SSA block rewrite pass on 378
DEBUG 2022-02-07 18:03:05,527 Running <numba.core.ssa._FixSSAVars object at 0x00000196AEF27BE0>
DEBUG 2022-02-07 18:03:05,527 on stmt: $378for_iter.2 = iternext(value=$phi378.1)
DEBUG 2022-02-07 18:03:05,527 on stmt: $378for_iter.3 = pair_first(value=$378for_iter.2)
DEBUG 2022-02-07 18:03:05,527 on stmt: $378for_iter.4 = pair_second(value=$378for_iter.2)
DEBUG 2022-02-07 18:03:05,527 on stmt: $phi380.2 = $378for_iter.3
DEBUG 2022-02-07 18:03:05,527 on stmt: branch $378for_iter.4, 380, 510
DEBUG 2022-02-07 18:03:05,527 ==== SSA block rewrite pass on 380
DEBUG 2022-02-07 18:03:05,527 Running <numba.core.ssa._FixSSAVars object at 0x00000196AEF27BE0>
DEBUG 2022-02-07 18:03:05,527 on stmt: N_det = $phi380.2
DEBUG 2022-02-07 18:03:05,527 on stmt: N = N_fixed + N_det
DEBUG 2022-02-07 18:03:05,527 on stmt: $const390.6 = const(float, -1.0)
DEBUG 2022-02-07 18:03:05,527 on stmt: $const394.8 = const(int, 2)
DEBUG 2022-02-07 18:03:05,527 on stmt: $396binary_floor_divide.9 = N // $const394.8
DEBUG 2022-02-07 18:03:05,527 on stmt: $400binary_subtract.11 = $396binary_floor_divide.9 - edges_sum
DEBUG 2022-02-07 18:03:05,527 on stmt: plus_minus = $const390.6 ** $400binary_subtract.11
DEBUG 2022-02-07 18:03:05,527 on stmt: $const410.15 = const(int, 2)
DEBUG 2022-02-07 18:03:05,527 on stmt: $412binary_floor_divide.16 = N_det // $const410.15
DEBUG 2022-02-07 18:03:05,527 on stmt: $const416.18 = const(int, 0)
DEBUG 2022-02-07 18:03:05,527 on stmt: $418binary_subscr.19 = static_getitem(value=kept_edges, index=0, index_var=$const416.18, fn=<built-in function getitem>)
DEBUG 2022-02-07 18:03:05,527 on stmt: $420build_tuple.20 = build_tuple(items=[Var($412binary_floor_divide.16, loop_hafnian_batch.py:62), Var($418binary_subscr.19, loop_hafnian_batch.py:62)])
DEBUG 2022-02-07 18:03:05,527 on stmt: $422binary_subscr.21 = getitem(value=binoms, index=$420build_tuple.20, fn=<built-in function getitem>)
DEBUG 2022-02-07 18:03:05,527 on stmt: n_det_binom_prod = $422binary_subscr.21 * binom_prod
DEBUG 2022-02-07 18:03:05,527 find_def var='binom_prod' stmt=n_det_binom_prod = $422binary_subscr.21 * binom_prod
DEBUG 2022-02-07 18:03:05,527 find_def_from_top label 380
DEBUG 2022-02-07 18:03:05,527 idom 378 from label 380
DEBUG 2022-02-07 18:03:05,527 find_def_from_bottom label 378
DEBUG 2022-02-07 18:03:05,527 find_def_from_top label 378
DEBUG 2022-02-07 18:03:05,527 idom 282 from label 378
DEBUG 2022-02-07 18:03:05,527 find_def_from_bottom label 282
DEBUG 2022-02-07 18:03:05,527 find_def_from_top label 282
DEBUG 2022-02-07 18:03:05,527 idom 258 from label 282
DEBUG 2022-02-07 18:03:05,527 find_def_from_bottom label 258
DEBUG 2022-02-07 18:03:05,527 find_def_from_top label 258
DEBUG 2022-02-07 18:03:05,527 idom 228 from label 258
DEBUG 2022-02-07 18:03:05,527 find_def_from_bottom label 228
DEBUG 2022-02-07 18:03:05,527 replaced with: n_det_binom_prod = $422binary_subscr.21 * binom_prod.2
DEBUG 2022-02-07 18:03:05,527 on stmt: $const432.25 = const(int, 2)
DEBUG 2022-02-07 18:03:05,527 on stmt: $434binary_modulo.26 = N_det % $const432.25
DEBUG 2022-02-07 18:03:05,527 on stmt: $const436.27 = const(int, 0)
DEBUG 2022-02-07 18:03:05,527 on stmt: $438compare_op.28 = $434binary_modulo.26 == $const436.27
DEBUG 2022-02-07 18:03:05,527 on stmt: bool440 = global(bool: <class 'bool'>)
DEBUG 2022-02-07 18:03:05,527 on stmt: $440pred = call bool440($438compare_op.28, func=bool440, args=(Var($438compare_op.28, loop_hafnian_batch.py:64),), kws=(), vararg=None, target=None)
DEBUG 2022-02-07 18:03:05,527 on stmt: branch $440pred, 444, 478
DEBUG 2022-02-07 18:03:05,527 ==== SSA block rewrite pass on 444
DEBUG 2022-02-07 18:03:05,527 Running <numba.core.ssa._FixSSAVars object at 0x00000196AEF27BE0>
DEBUG 2022-02-07 18:03:05,527 on stmt: $450binary_subscr.6 = getitem(value=Hnew, index=N_det, fn=<built-in function getitem>)
DEBUG 2022-02-07 18:03:05,527 on stmt: $456binary_multiply.9 = n_det_binom_prod * plus_minus
DEBUG 2022-02-07 18:03:05,527 on stmt: $const462.12 = const(int, 2)
DEBUG 2022-02-07 18:03:05,527 on stmt: $464binary_floor_divide.13 = N // $const462.12
DEBUG 2022-02-07 18:03:05,527 on stmt: $466binary_subscr.14 = getitem(value=f_even, index=$464binary_floor_divide.13, fn=<built-in function getitem>)
DEBUG 2022-02-07 18:03:05,527 on stmt: $468binary_multiply.15 = $456binary_multiply.9 * $466binary_subscr.14
DEBUG 2022-02-07 18:03:05,527 on stmt: $470inplace_add.16 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$450binary_subscr.6, rhs=$468binary_multiply.15, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-07 18:03:05,527 on stmt: Hnew[N_det] = $470inplace_add.16
DEBUG 2022-02-07 18:03:05,527 on stmt: jump 506
DEBUG 2022-02-07 18:03:05,527 ==== SSA block rewrite pass on 478
DEBUG 2022-02-07 18:03:05,527 Running <numba.core.ssa._FixSSAVars object at 0x00000196AEF27BE0>
DEBUG 2022-02-07 18:03:05,527 on stmt: $484binary_subscr.6 = getitem(value=Hnew, index=N_det, fn=<built-in function getitem>)
DEBUG 2022-02-07 18:03:05,527 on stmt: $490binary_multiply.9 = n_det_binom_prod * plus_minus
DEBUG 2022-02-07 18:03:05,527 on stmt: $496binary_subscr.12 = getitem(value=f_odd, index=N, fn=<built-in function getitem>)
DEBUG 2022-02-07 18:03:05,527 on stmt: $498binary_multiply.13 = $490binary_multiply.9 * $496binary_subscr.12
DEBUG 2022-02-07 18:03:05,527 on stmt: $500inplace_add.14 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$484binary_subscr.6, rhs=$498binary_multiply.13, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-07 18:03:05,527 on stmt: Hnew[N_det] = $500inplace_add.14
DEBUG 2022-02-07 18:03:05,527 on stmt: jump 506
DEBUG 2022-02-07 18:03:05,527 ==== SSA block rewrite pass on 506
DEBUG 2022-02-07 18:03:05,527 Running <numba.core.ssa._FixSSAVars object at 0x00000196AEF27BE0>
DEBUG 2022-02-07 18:03:05,527 on stmt: jump 378
DEBUG 2022-02-07 18:03:05,527 ==== SSA block rewrite pass on 510
DEBUG 2022-02-07 18:03:05,527 Running <numba.core.ssa._FixSSAVars object at 0x00000196AEF27BE0>
DEBUG 2022-02-07 18:03:05,527 on stmt: $514inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=H_batch, rhs=Hnew, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-07 18:03:05,527 on stmt: H_batch = $514inplace_add.3
DEBUG 2022-02-07 18:03:05,527 on stmt: jump 158
DEBUG 2022-02-07 18:03:05,527 ==== SSA block rewrite pass on 520
DEBUG 2022-02-07 18:03:05,527 Running <numba.core.ssa._FixSSAVars object at 0x00000196AEF27BE0>
DEBUG 2022-02-07 18:03:05,527 on stmt: bool522 = global(bool: <class 'bool'>)
DEBUG 2022-02-07 18:03:05,527 on stmt: $522pred = call bool522(glynn, func=bool522, args=(Var(glynn, loop_hafnian_batch.py:20),), kws=(), vararg=None, target=None)
DEBUG 2022-02-07 18:03:05,527 on stmt: branch $522pred, 526, 580
DEBUG 2022-02-07 18:03:05,527 ==== SSA block rewrite pass on 526
DEBUG 2022-02-07 18:03:05,527 Running <numba.core.ssa._FixSSAVars object at 0x00000196AEF27BE0>
DEBUG 2022-02-07 18:03:05,527 on stmt: $526load_global.0 = global(range: <class 'range'>)
DEBUG 2022-02-07 18:03:05,527 on stmt: $530load_attr.2 = getattr(value=H_batch, attr=shape)
DEBUG 2022-02-07 18:03:05,527 on stmt: $const532.3 = const(int, 0)
DEBUG 2022-02-07 18:03:05,543 on stmt: $534binary_subscr.4 = static_getitem(value=$530load_attr.2, index=0, index_var=$const532.3, fn=<built-in function getitem>)
DEBUG 2022-02-07 18:03:05,543 on stmt: $536call_function.5 = call $526load_global.0($534binary_subscr.4, func=$526load_global.0, args=[Var($534binary_subscr.4, loop_hafnian_batch.py:72)], kws=(), vararg=None, target=None)
DEBUG 2022-02-07 18:03:05,543 on stmt: $538get_iter.6 = getiter(value=$536call_function.5)
DEBUG 2022-02-07 18:03:05,543 on stmt: $phi540.0 = $538get_iter.6
DEBUG 2022-02-07 18:03:05,543 on stmt: jump 540
DEBUG 2022-02-07 18:03:05,543 ==== SSA block rewrite pass on 540
DEBUG 2022-02-07 18:03:05,543 Running <numba.core.ssa._FixSSAVars object at 0x00000196AEF27BE0>
DEBUG 2022-02-07 18:03:05,543 on stmt: $540for_iter.1 = iternext(value=$phi540.0)
DEBUG 2022-02-07 18:03:05,543 on stmt: $540for_iter.2 = pair_first(value=$540for_iter.1)
DEBUG 2022-02-07 18:03:05,543 on stmt: $540for_iter.3 = pair_second(value=$540for_iter.1)
DEBUG 2022-02-07 18:03:05,543 on stmt: $phi542.1 = $540for_iter.2
DEBUG 2022-02-07 18:03:05,543 on stmt: branch $540for_iter.3, 542, 580
DEBUG 2022-02-07 18:03:05,543 ==== SSA block rewrite pass on 542
DEBUG 2022-02-07 18:03:05,543 Running <numba.core.ssa._FixSSAVars object at 0x00000196AEF27BE0>
DEBUG 2022-02-07 18:03:05,543 on stmt: j = $phi542.1
DEBUG 2022-02-07 18:03:05,543 on stmt: x = N_fixed + j
DEBUG 2022-02-07 18:03:05,543 on stmt: $558binary_subscr.9 = getitem(value=H_batch, index=j, fn=<built-in function getitem>)
DEBUG 2022-02-07 18:03:05,543 on stmt: $const560.10 = const(float, 0.5)
DEBUG 2022-02-07 18:03:05,543 on stmt: $const564.12 = const(int, 2)
DEBUG 2022-02-07 18:03:05,543 on stmt: $566binary_floor_divide.13 = x // $const564.12
DEBUG 2022-02-07 18:03:05,543 on stmt: $568binary_power.14 = $const560.10 ** $566binary_floor_divide.13
DEBUG 2022-02-07 18:03:05,543 on stmt: $570inplace_multiply.15 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=$558binary_subscr.9, rhs=$568binary_power.14, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-07 18:03:05,543 on stmt: H_batch[j] = $570inplace_multiply.15
DEBUG 2022-02-07 18:03:05,543 on stmt: jump 540
DEBUG 2022-02-07 18:03:05,543 ==== SSA block rewrite pass on 580
DEBUG 2022-02-07 18:03:05,543 Running <numba.core.ssa._FixSSAVars object at 0x00000196AEF27BE0>
DEBUG 2022-02-07 18:03:05,543 on stmt: $582return_value.1 = cast(value=H_batch)
DEBUG 2022-02-07 18:03:05,543 on stmt: return $582return_value.1
DEBUG 2022-02-07 18:03:05,543 Fix SSA violator on var H_batch
DEBUG 2022-02-07 18:03:05,543 ==== SSA block rewrite pass on 0
DEBUG 2022-02-07 18:03:05,543 Running <numba.core.ssa._FreshVarHandler object at 0x00000196AEE97A90>
DEBUG 2022-02-07 18:03:05,543 on stmt: A = arg(0, name=A)
DEBUG 2022-02-07 18:03:05,543 on stmt: D = arg(1, name=D)
DEBUG 2022-02-07 18:03:05,543 on stmt: fixed_edge_reps = arg(2, name=fixed_edge_reps)
DEBUG 2022-02-07 18:03:05,543 on stmt: batch_max = arg(3, name=batch_max)
DEBUG 2022-02-07 18:03:05,543 on stmt: odd_cutoff = arg(4, name=odd_cutoff)
DEBUG 2022-02-07 18:03:05,543 on stmt: glynn = arg(5, name=glynn)
DEBUG 2022-02-07 18:03:05,543 on stmt: $const4.1 = const(int, 0)
DEBUG 2022-02-07 18:03:05,543 on stmt: oddloop = static_getitem(value=D, index=0, index_var=$const4.1, fn=<built-in function getitem>)
DEBUG 2022-02-07 18:03:05,543 on stmt: $const12.4 = const(int, 0)
DEBUG 2022-02-07 18:03:05,543 on stmt: $const14.5 = const(NoneType, None)
DEBUG 2022-02-07 18:03:05,543 on stmt: $const16.6 = const(NoneType, None)
DEBUG 2022-02-07 18:03:05,543 on stmt: $18build_slice.7 = global(slice: <class 'slice'>)
DEBUG 2022-02-07 18:03:05,543 on stmt: $18build_slice.8 = call $18build_slice.7($const14.5, $const16.6, func=$18build_slice.7, args=(Var($const14.5, loop_hafnian_batch.py:21), Var($const16.6, loop_hafnian_batch.py:21)), kws=(), vararg=None, target=None)
DEBUG 2022-02-07 18:03:05,543 on stmt: $20build_tuple.9 = build_tuple(items=[Var($const12.4, loop_hafnian_batch.py:21), Var($18build_slice.8, loop_hafnian_batch.py:21)])
DEBUG 2022-02-07 18:03:05,543 on stmt: oddV = static_getitem(value=A, index=(0, slice(None, None, None)), index_var=$20build_tuple.9, fn=<built-in function getitem>)
DEBUG 2022-02-07 18:03:05,543 on stmt: $28load_attr.12 = getattr(value=A, attr=shape)
DEBUG 2022-02-07 18:03:05,543 on stmt: $const30.13 = const(int, 0)
DEBUG 2022-02-07 18:03:05,543 on stmt: n = static_getitem(value=$28load_attr.12, index=0, index_var=$const30.13, fn=<built-in function getitem>)
DEBUG 2022-02-07 18:03:05,543 on stmt: $const36.15 = const(int, 2)
DEBUG 2022-02-07 18:03:05,543 on stmt: $40load_method.17 = getattr(value=fixed_edge_reps, attr=sum)
DEBUG 2022-02-07 18:03:05,543 on stmt: $42call_method.18 = call $40load_method.17(func=$40load_method.17, args=[], kws=(), vararg=None, target=None)
DEBUG 2022-02-07 18:03:05,543 on stmt: N_fixed = $const36.15 * $42call_method.18
DEBUG 2022-02-07 18:03:05,543 on stmt: $const50.21 = const(int, 2)
DEBUG 2022-02-07 18:03:05,543 on stmt: $54binary_multiply.23 = $const50.21 * batch_max
DEBUG 2022-02-07 18:03:05,543 on stmt: $56binary_add.24 = N_fixed + $54binary_multiply.23
DEBUG 2022-02-07 18:03:05,543 on stmt: N_max = $56binary_add.24 + odd_cutoff
DEBUG 2022-02-07 18:03:05,543 on stmt: $64load_global.27 = global(np: <module 'numpy' from 'C:\\Users\\zl4821\\Anaconda3\\envs\\GBS\\lib\\site-packages\\numpy\\__init__.py'>)
DEBUG 2022-02-07 18:03:05,543 on stmt: $66load_method.28 = getattr(value=$64load_global.27, attr=concatenate)
DEBUG 2022-02-07 18:03:05,543 on stmt: $68load_global.29 = global(np: <module 'numpy' from 'C:\\Users\\zl4821\\Anaconda3\\envs\\GBS\\lib\\site-packages\\numpy\\__init__.py'>)
DEBUG 2022-02-07 18:03:05,543 on stmt: $70load_method.30 = getattr(value=$68load_global.29, attr=array)
DEBUG 2022-02-07 18:03:05,543 on stmt: $74build_list.32 = build_list(items=[Var(batch_max, loop_hafnian_batch.py:20)])
DEBUG 2022-02-07 18:03:05,543 on stmt: $76call_method.33 = call $70load_method.30($74build_list.32, func=$70load_method.30, args=[Var($74build_list.32, loop_hafnian_batch.py:28)], kws=(), vararg=None, target=None)
DEBUG 2022-02-07 18:03:05,543 on stmt: $80build_tuple.35 = build_tuple(items=[Var($76call_method.33, loop_hafnian_batch.py:28), Var(fixed_edge_reps, loop_hafnian_batch.py:20)])
DEBUG 2022-02-07 18:03:05,543 on stmt: edge_reps = call $66load_method.28($80build_tuple.35, func=$66load_method.28, args=[Var($80build_tuple.35, loop_hafnian_batch.py:28)], kws=(), vararg=None, target=None)
DEBUG 2022-02-07 18:03:05,543 on stmt: $86load_global.37 = global(np: <module 'numpy' from 'C:\\Users\\zl4821\\Anaconda3\\envs\\GBS\\lib\\site-packages\\numpy\\__init__.py'>)
DEBUG 2022-02-07 18:03:05,543 on stmt: $88load_method.38 = getattr(value=$86load_global.37, attr=prod)
DEBUG 2022-02-07 18:03:05,543 on stmt: $const92.40 = const(int, 1)
DEBUG 2022-02-07 18:03:05,543 on stmt: $94binary_add.41 = edge_reps + $const92.40
DEBUG 2022-02-07 18:03:05,543 on stmt: steps = call $88load_method.38($94binary_add.41, func=$88load_method.38, args=[Var($94binary_add.41, loop_hafnian_batch.py:29)], kws=(), vararg=None, target=None)
DEBUG 2022-02-07 18:03:05,543 on stmt: $102load_method.44 = getattr(value=edge_reps, attr=max)
DEBUG 2022-02-07 18:03:05,543 on stmt: $104call_method.45 = call $102load_method.44(func=$102load_method.44, args=[], kws=(), vararg=None, target=None)
DEBUG 2022-02-07 18:03:05,543 on stmt: max_binom = $104call_method.45 + odd_cutoff
DEBUG 2022-02-07 18:03:05,543 on stmt: $112load_global.48 = global(precompute_binoms: CPUDispatcher(<function precompute_binoms at 0x00000196AE6F6CA0>))
DEBUG 2022-02-07 18:03:05,543 on stmt: binoms = call $112load_global.48(max_binom, func=$112load_global.48, args=[Var(max_binom, loop_hafnian_batch.py:31)], kws=(), vararg=None, target=None)
DEBUG 2022-02-07 18:03:05,543 on stmt: $120load_global.51 = global(np: <module 'numpy' from 'C:\\Users\\zl4821\\Anaconda3\\envs\\GBS\\lib\\site-packages\\numpy\\__init__.py'>)
DEBUG 2022-02-07 18:03:05,543 on stmt: $122load_attr.52 = getattr(value=$120load_global.51, attr=zeros)
DEBUG 2022-02-07 18:03:05,543 on stmt: $const124.53 = const(int, 2)
DEBUG 2022-02-07 18:03:05,543 on stmt: $128binary_multiply.55 = $const124.53 * batch_max
DEBUG 2022-02-07 18:03:05,543 on stmt: $132binary_add.57 = $128binary_multiply.55 + odd_cutoff
DEBUG 2022-02-07 18:03:05,543 on stmt: $const134.58 = const(int, 1)
DEBUG 2022-02-07 18:03:05,543 on stmt: $136binary_add.59 = $132binary_add.57 + $const134.58
DEBUG 2022-02-07 18:03:05,559 on stmt: $138load_global.60 = global(np: <module 'numpy' from 'C:\\Users\\zl4821\\Anaconda3\\envs\\GBS\\lib\\site-packages\\numpy\\__init__.py'>)
DEBUG 2022-02-07 18:03:05,559 on stmt: $140load_attr.61 = getattr(value=$138load_global.60, attr=complex128)
DEBUG 2022-02-07 18:03:05,559 on stmt: H_batch = call $122load_attr.52($136binary_add.59, func=$122load_attr.52, args=[Var($136binary_add.59, loop_hafnian_batch.py:34)], kws=[('dtype', Var($140load_attr.61, loop_hafnian_batch.py:34))], vararg=None, target=None)
DEBUG 2022-02-07 18:03:05,559 first assign: H_batch
DEBUG 2022-02-07 18:03:05,559 replaced with: H_batch = call $122load_attr.52($136binary_add.59, func=$122load_attr.52, args=[Var($136binary_add.59, loop_hafnian_batch.py:34)], kws=[('dtype', Var($140load_attr.61, loop_hafnian_batch.py:34))], vararg=None, target=None)
DEBUG 2022-02-07 18:03:05,559 on stmt: $148load_global.64 = global(numba: <module 'numba' from 'C:\\Users\\zl4821\\Anaconda3\\envs\\GBS\\lib\\site-packages\\numba\\__init__.py'>)
DEBUG 2022-02-07 18:03:05,559 on stmt: $150load_method.65 = getattr(value=$148load_global.64, attr=prange)
DEBUG 2022-02-07 18:03:05,559 on stmt: $154call_method.67 = call $150load_method.65(steps, func=$150load_method.65, args=[Var(steps, loop_hafnian_batch.py:29)], kws=(), vararg=None, target=None)
DEBUG 2022-02-07 18:03:05,559 on stmt: $156get_iter.68 = getiter(value=$154call_method.67)
DEBUG 2022-02-07 18:03:05,559 on stmt: $phi158.0 = $156get_iter.68
DEBUG 2022-02-07 18:03:05,559 on stmt: jump 158
DEBUG 2022-02-07 18:03:05,559 ==== SSA block rewrite pass on 158
DEBUG 2022-02-07 18:03:05,559 Running <numba.core.ssa._FreshVarHandler object at 0x00000196AEE97A90>
DEBUG 2022-02-07 18:03:05,559 on stmt: $158for_iter.1 = iternext(value=$phi158.0)
DEBUG 2022-02-07 18:03:05,559 on stmt: $158for_iter.2 = pair_first(value=$158for_iter.1)
DEBUG 2022-02-07 18:03:05,559 on stmt: $158for_iter.3 = pair_second(value=$158for_iter.1)
DEBUG 2022-02-07 18:03:05,559 on stmt: $phi162.1 = $158for_iter.2
DEBUG 2022-02-07 18:03:05,559 on stmt: branch $158for_iter.3, 162, 520
DEBUG 2022-02-07 18:03:05,559 ==== SSA block rewrite pass on 162
DEBUG 2022-02-07 18:03:05,559 Running <numba.core.ssa._FreshVarHandler object at 0x00000196AEE97A90>
DEBUG 2022-02-07 18:03:05,559 on stmt: j = $phi162.1
DEBUG 2022-02-07 18:03:05,559 on stmt: $164load_global.2 = global(np: <module 'numpy' from 'C:\\Users\\zl4821\\Anaconda3\\envs\\GBS\\lib\\site-packages\\numpy\\__init__.py'>)
DEBUG 2022-02-07 18:03:05,559 on stmt: $166load_attr.3 = getattr(value=$164load_global.2, attr=zeros)
DEBUG 2022-02-07 18:03:05,559 on stmt: $const168.4 = const(int, 2)
DEBUG 2022-02-07 18:03:05,559 on stmt: $172binary_multiply.6 = $const168.4 * batch_max
DEBUG 2022-02-07 18:03:05,559 on stmt: $176binary_add.8 = $172binary_multiply.6 + odd_cutoff
DEBUG 2022-02-07 18:03:05,559 on stmt: $const178.9 = const(int, 1)
DEBUG 2022-02-07 18:03:05,559 on stmt: $180binary_add.10 = $176binary_add.8 + $const178.9
DEBUG 2022-02-07 18:03:05,559 on stmt: $182load_global.11 = global(np: <module 'numpy' from 'C:\\Users\\zl4821\\Anaconda3\\envs\\GBS\\lib\\site-packages\\numpy\\__init__.py'>)
DEBUG 2022-02-07 18:03:05,559 on stmt: $184load_attr.12 = getattr(value=$182load_global.11, attr=complex128)
DEBUG 2022-02-07 18:03:05,559 on stmt: Hnew = call $166load_attr.3($180binary_add.10, func=$166load_attr.3, args=[Var($180binary_add.10, loop_hafnian_batch.py:37)], kws=[('dtype', Var($184load_attr.12, loop_hafnian_batch.py:37))], vararg=None, target=None)
DEBUG 2022-02-07 18:03:05,565 on stmt: $192load_global.15 = global(find_kept_edges: CPUDispatcher(<function find_kept_edges at 0x00000196AE71E160>))
DEBUG 2022-02-07 18:03:05,565 on stmt: kept_edges = call $192load_global.15(j, edge_reps, func=$192load_global.15, args=[Var(j, loop_hafnian_batch.py:35), Var(edge_reps, loop_hafnian_batch.py:28)], kws=(), vararg=None, target=None)
DEBUG 2022-02-07 18:03:05,565 on stmt: $204load_method.20 = getattr(value=kept_edges, attr=sum)
DEBUG 2022-02-07 18:03:05,565 on stmt: edges_sum = call $204load_method.20(func=$204load_method.20, args=[], kws=(), vararg=None, target=None)
DEBUG 2022-02-07 18:03:05,565 on stmt: binom_prod = const(float, 1.0)
DEBUG 2022-02-07 18:03:05,565 on stmt: $214load_global.23 = global(range: <class 'range'>)
DEBUG 2022-02-07 18:03:05,565 on stmt: $const216.24 = const(int, 1)
DEBUG 2022-02-07 18:03:05,565 on stmt: $const220.26 = const(int, 2)
DEBUG 2022-02-07 18:03:05,567 on stmt: $222binary_floor_divide.27 = n // $const220.26
DEBUG 2022-02-07 18:03:05,567 on stmt: $224call_function.28 = call $214load_global.23($const216.24, $222binary_floor_divide.27, func=$214load_global.23, args=[Var($const216.24, loop_hafnian_batch.py:43), Var($222binary_floor_divide.27, loop_hafnian_batch.py:43)], kws=(), vararg=None, target=None)
DEBUG 2022-02-07 18:03:05,567 on stmt: $226get_iter.29 = getiter(value=$224call_function.28)
DEBUG 2022-02-07 18:03:05,567 on stmt: $phi228.1 = $226get_iter.29
DEBUG 2022-02-07 18:03:05,567 on stmt: jump 228
DEBUG 2022-02-07 18:03:05,567 ==== SSA block rewrite pass on 228
DEBUG 2022-02-07 18:03:05,567 Running <numba.core.ssa._FreshVarHandler object at 0x00000196AEE97A90>
DEBUG 2022-02-07 18:03:05,567 on stmt: binom_prod.2 = phi(incoming_values=[Var(binom_prod, loop_hafnian_batch.py:42), Var(binom_prod.1, loop_hafnian_batch.py:44)], incoming_blocks=[162, 230])
DEBUG 2022-02-07 18:03:05,567 on stmt: $228for_iter.2 = iternext(value=$phi228.1)
DEBUG 2022-02-07 18:03:05,567 on stmt: $228for_iter.3 = pair_first(value=$228for_iter.2)
DEBUG 2022-02-07 18:03:05,567 on stmt: $228for_iter.4 = pair_second(value=$228for_iter.2)
DEBUG 2022-02-07 18:03:05,567 on stmt: $phi230.2 = $228for_iter.3
DEBUG 2022-02-07 18:03:05,567 on stmt: branch $228for_iter.4, 230, 258
DEBUG 2022-02-07 18:03:05,567 ==== SSA block rewrite pass on 230
DEBUG 2022-02-07 18:03:05,567 Running <numba.core.ssa._FreshVarHandler object at 0x00000196AEE97A90>
DEBUG 2022-02-07 18:03:05,567 on stmt: i = $phi230.2
DEBUG 2022-02-07 18:03:05,567 on stmt: $240binary_subscr.7 = getitem(value=edge_reps, index=i, fn=<built-in function getitem>)
DEBUG 2022-02-07 18:03:05,567 on stmt: $246binary_subscr.10 = getitem(value=kept_edges, index=i, fn=<built-in function getitem>)
DEBUG 2022-02-07 18:03:05,567 on stmt: $248build_tuple.11 = build_tuple(items=[Var($240binary_subscr.7, loop_hafnian_batch.py:44), Var($246binary_subscr.10, loop_hafnian_batch.py:44)])
DEBUG 2022-02-07 18:03:05,567 on stmt: $250binary_subscr.12 = getitem(value=binoms, index=$248build_tuple.11, fn=<built-in function getitem>)
DEBUG 2022-02-07 18:03:05,567 on stmt: $252inplace_multiply.13 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=binom_prod.2, rhs=$250binary_subscr.12, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-07 18:03:05,567 on stmt: binom_prod.1 = $252inplace_multiply.13
DEBUG 2022-02-07 18:03:05,567 on stmt: jump 228
DEBUG 2022-02-07 18:03:05,567 ==== SSA block rewrite pass on 258
DEBUG 2022-02-07 18:03:05,567 Running <numba.core.ssa._FreshVarHandler object at 0x00000196AEE97A90>
DEBUG 2022-02-07 18:03:05,567 on stmt: bool260 = global(bool: <class 'bool'>)
DEBUG 2022-02-07 18:03:05,567 on stmt: $260pred = call bool260(glynn, func=bool260, args=(Var(glynn, loop_hafnian_batch.py:20),), kws=(), vararg=None, target=None)
DEBUG 2022-02-07 18:03:05,567 on stmt: branch $260pred, 264, 278
DEBUG 2022-02-07 18:03:05,567 ==== SSA block rewrite pass on 264
DEBUG 2022-02-07 18:03:05,567 Running <numba.core.ssa._FreshVarHandler object at 0x00000196AEE97A90>
DEBUG 2022-02-07 18:03:05,567 on stmt: $const264.1 = const(int, 2)
DEBUG 2022-02-07 18:03:05,567 on stmt: $268binary_multiply.3 = $const264.1 * kept_edges
DEBUG 2022-02-07 18:03:05,567 on stmt: delta = $268binary_multiply.3 - edge_reps
DEBUG 2022-02-07 18:03:05,567 on stmt: jump 282
DEBUG 2022-02-07 18:03:05,567 ==== SSA block rewrite pass on 278
DEBUG 2022-02-07 18:03:05,567 Running <numba.core.ssa._FreshVarHandler object at 0x00000196AEE97A90>
DEBUG 2022-02-07 18:03:05,567 on stmt: delta.1 = kept_edges
DEBUG 2022-02-07 18:03:05,567 on stmt: jump 282
DEBUG 2022-02-07 18:03:05,567 ==== SSA block rewrite pass on 282
DEBUG 2022-02-07 18:03:05,575 Running <numba.core.ssa._FreshVarHandler object at 0x00000196AEE97A90>
DEBUG 2022-02-07 18:03:05,575 on stmt: delta.2 = phi(incoming_values=[Var(delta, loop_hafnian_batch.py:47), Var(delta.1, loop_hafnian_batch.py:49)], incoming_blocks=[264, 278])
DEBUG 2022-02-07 18:03:05,575 on stmt: $282load_global.1 = global(get_submatrices: CPUDispatcher(<function get_submatrices at 0x00000196AE71E670>))
DEBUG 2022-02-07 18:03:05,575 on stmt: $292call_function.6 = call $282load_global.1(delta.2, A, D, oddV, func=$282load_global.1, args=[Var(delta.2, loop_hafnian_batch.py:51), Var(A, loop_hafnian_batch.py:20), Var(D, loop_hafnian_batch.py:20), Var(oddV, loop_hafnian_batch.py:21)], kws=(), vararg=None, target=None)
DEBUG 2022-02-07 18:03:05,575 on stmt: $294unpack_sequence.11 = exhaust_iter(value=$292call_function.6, count=4)
DEBUG 2022-02-07 18:03:05,575 on stmt: $294unpack_sequence.7 = static_getitem(value=$294unpack_sequence.11, index=0, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-02-07 18:03:05,577 on stmt: $294unpack_sequence.8 = static_getitem(value=$294unpack_sequence.11, index=1, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-02-07 18:03:05,577 on stmt: $294unpack_sequence.9 = static_getitem(value=$294unpack_sequence.11, index=2, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-02-07 18:03:05,577 on stmt: $294unpack_sequence.10 = static_getitem(value=$294unpack_sequence.11, index=3, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-02-07 18:03:05,577 on stmt: AX_S = $294unpack_sequence.7
DEBUG 2022-02-07 18:03:05,577 on stmt: XD_S = $294unpack_sequence.8
DEBUG 2022-02-07 18:03:05,577 on stmt: D_S = $294unpack_sequence.9
DEBUG 2022-02-07 18:03:05,577 on stmt: oddVX_S = $294unpack_sequence.10
DEBUG 2022-02-07 18:03:05,577 on stmt: $304load_global.12 = global(eigvals: CPUDispatcher(<function eigvals at 0x00000196AE71EB80>))
DEBUG 2022-02-07 18:03:05,577 on stmt: E = call $304load_global.12(AX_S, func=$304load_global.12, args=[Var(AX_S, loop_hafnian_batch.py:51)], kws=(), vararg=None, target=None)
DEBUG 2022-02-07 18:03:05,577 on stmt: $312load_global.15 = global(f_loop: CPUDispatcher(<function f_loop at 0x00000196AE71E310>))
DEBUG 2022-02-07 18:03:05,577 on stmt: f_even = call $312load_global.15(E, AX_S, XD_S, D_S, N_max, func=$312load_global.15, args=[Var(E, loop_hafnian_batch.py:53), Var(AX_S, loop_hafnian_batch.py:51), Var(XD_S, loop_hafnian_batch.py:51), Var(D_S, loop_hafnian_batch.py:51), Var(N_max, loop_hafnian_batch.py:26)], kws=(), vararg=None, target=None)
DEBUG 2022-02-07 18:03:05,577 on stmt: $328load_global.22 = global(f_loop_odd: CPUDispatcher(<function f_loop_odd at 0x00000196AE71E4C0>))
DEBUG 2022-02-07 18:03:05,577 on stmt: f_odd = call $328load_global.22(E, AX_S, XD_S, D_S, N_max, oddloop, oddVX_S, func=$328load_global.22, args=[Var(E, loop_hafnian_batch.py:53), Var(AX_S, loop_hafnian_batch.py:51), Var(XD_S, loop_hafnian_batch.py:51), Var(D_S, loop_hafnian_batch.py:51), Var(N_max, loop_hafnian_batch.py:26), Var(oddloop, loop_hafnian_batch.py:20), Var(oddVX_S, loop_hafnian_batch.py:51)], kws=(), vararg=None, target=None)
DEBUG 2022-02-07 18:03:05,577 on stmt: $348load_global.31 = global(range: <class 'range'>)
DEBUG 2022-02-07 18:03:05,577 on stmt: $const350.32 = const(int, 2)
DEBUG 2022-02-07 18:03:05,577 on stmt: $const354.34 = const(int, 0)
DEBUG 2022-02-07 18:03:05,577 on stmt: $356binary_subscr.35 = static_getitem(value=kept_edges, index=0, index_var=$const354.34, fn=<built-in function getitem>)
DEBUG 2022-02-07 18:03:05,577 on stmt: $358binary_multiply.36 = $const350.32 * $356binary_subscr.35
DEBUG 2022-02-07 18:03:05,577 on stmt: $const360.37 = const(int, 2)
DEBUG 2022-02-07 18:03:05,577 on stmt: $364binary_multiply.39 = $const360.37 * batch_max
DEBUG 2022-02-07 18:03:05,577 on stmt: $368binary_add.41 = $364binary_multiply.39 + odd_cutoff
DEBUG 2022-02-07 18:03:05,577 on stmt: $const370.42 = const(int, 1)
DEBUG 2022-02-07 18:03:05,577 on stmt: $372binary_add.43 = $368binary_add.41 + $const370.42
DEBUG 2022-02-07 18:03:05,577 on stmt: $374call_function.44 = call $348load_global.31($358binary_multiply.36, $372binary_add.43, func=$348load_global.31, args=[Var($358binary_multiply.36, loop_hafnian_batch.py:58), Var($372binary_add.43, loop_hafnian_batch.py:58)], kws=(), vararg=None, target=None)
DEBUG 2022-02-07 18:03:05,577 on stmt: $376get_iter.45 = getiter(value=$374call_function.44)
DEBUG 2022-02-07 18:03:05,577 on stmt: $phi378.1 = $376get_iter.45
DEBUG 2022-02-07 18:03:05,577 on stmt: jump 378
DEBUG 2022-02-07 18:03:05,577 ==== SSA block rewrite pass on 378
DEBUG 2022-02-07 18:03:05,577 Running <numba.core.ssa._FreshVarHandler object at 0x00000196AEE97A90>
DEBUG 2022-02-07 18:03:05,577 on stmt: $378for_iter.2 = iternext(value=$phi378.1)
DEBUG 2022-02-07 18:03:05,577 on stmt: $378for_iter.3 = pair_first(value=$378for_iter.2)
DEBUG 2022-02-07 18:03:05,577 on stmt: $378for_iter.4 = pair_second(value=$378for_iter.2)
DEBUG 2022-02-07 18:03:05,577 on stmt: $phi380.2 = $378for_iter.3
DEBUG 2022-02-07 18:03:05,577 on stmt: branch $378for_iter.4, 380, 510
DEBUG 2022-02-07 18:03:05,577 ==== SSA block rewrite pass on 380
DEBUG 2022-02-07 18:03:05,577 Running <numba.core.ssa._FreshVarHandler object at 0x00000196AEE97A90>
DEBUG 2022-02-07 18:03:05,577 on stmt: N_det = $phi380.2
DEBUG 2022-02-07 18:03:05,577 on stmt: N = N_fixed + N_det
DEBUG 2022-02-07 18:03:05,585 on stmt: $const390.6 = const(float, -1.0)
DEBUG 2022-02-07 18:03:05,585 on stmt: $const394.8 = const(int, 2)
DEBUG 2022-02-07 18:03:05,585 on stmt: $396binary_floor_divide.9 = N // $const394.8
DEBUG 2022-02-07 18:03:05,585 on stmt: $400binary_subtract.11 = $396binary_floor_divide.9 - edges_sum
DEBUG 2022-02-07 18:03:05,585 on stmt: plus_minus = $const390.6 ** $400binary_subtract.11
DEBUG 2022-02-07 18:03:05,585 on stmt: $const410.15 = const(int, 2)
DEBUG 2022-02-07 18:03:05,585 on stmt: $412binary_floor_divide.16 = N_det // $const410.15
DEBUG 2022-02-07 18:03:05,585 on stmt: $const416.18 = const(int, 0)
DEBUG 2022-02-07 18:03:05,585 on stmt: $418binary_subscr.19 = static_getitem(value=kept_edges, index=0, index_var=$const416.18, fn=<built-in function getitem>)
DEBUG 2022-02-07 18:03:05,585 on stmt: $420build_tuple.20 = build_tuple(items=[Var($412binary_floor_divide.16, loop_hafnian_batch.py:62), Var($418binary_subscr.19, loop_hafnian_batch.py:62)])
DEBUG 2022-02-07 18:03:05,587 on stmt: $422binary_subscr.21 = getitem(value=binoms, index=$420build_tuple.20, fn=<built-in function getitem>)
DEBUG 2022-02-07 18:03:05,587 on stmt: n_det_binom_prod = $422binary_subscr.21 * binom_prod.2
DEBUG 2022-02-07 18:03:05,587 on stmt: $const432.25 = const(int, 2)
DEBUG 2022-02-07 18:03:05,587 on stmt: $434binary_modulo.26 = N_det % $const432.25
DEBUG 2022-02-07 18:03:05,587 on stmt: $const436.27 = const(int, 0)
DEBUG 2022-02-07 18:03:05,587 on stmt: $438compare_op.28 = $434binary_modulo.26 == $const436.27
DEBUG 2022-02-07 18:03:05,587 on stmt: bool440 = global(bool: <class 'bool'>)
DEBUG 2022-02-07 18:03:05,587 on stmt: $440pred = call bool440($438compare_op.28, func=bool440, args=(Var($438compare_op.28, loop_hafnian_batch.py:64),), kws=(), vararg=None, target=None)
DEBUG 2022-02-07 18:03:05,587 on stmt: branch $440pred, 444, 478
DEBUG 2022-02-07 18:03:05,587 ==== SSA block rewrite pass on 444
DEBUG 2022-02-07 18:03:05,587 Running <numba.core.ssa._FreshVarHandler object at 0x00000196AEE97A90>
DEBUG 2022-02-07 18:03:05,587 on stmt: $450binary_subscr.6 = getitem(value=Hnew, index=N_det, fn=<built-in function getitem>)
DEBUG 2022-02-07 18:03:05,587 on stmt: $456binary_multiply.9 = n_det_binom_prod * plus_minus
DEBUG 2022-02-07 18:03:05,587 on stmt: $const462.12 = const(int, 2)
DEBUG 2022-02-07 18:03:05,587 on stmt: $464binary_floor_divide.13 = N // $const462.12
DEBUG 2022-02-07 18:03:05,587 on stmt: $466binary_subscr.14 = getitem(value=f_even, index=$464binary_floor_divide.13, fn=<built-in function getitem>)
DEBUG 2022-02-07 18:03:05,587 on stmt: $468binary_multiply.15 = $456binary_multiply.9 * $466binary_subscr.14
DEBUG 2022-02-07 18:03:05,587 on stmt: $470inplace_add.16 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$450binary_subscr.6, rhs=$468binary_multiply.15, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-07 18:03:05,587 on stmt: Hnew[N_det] = $470inplace_add.16
DEBUG 2022-02-07 18:03:05,587 on stmt: jump 506
DEBUG 2022-02-07 18:03:05,587 ==== SSA block rewrite pass on 478
DEBUG 2022-02-07 18:03:05,587 Running <numba.core.ssa._FreshVarHandler object at 0x00000196AEE97A90>
DEBUG 2022-02-07 18:03:05,587 on stmt: $484binary_subscr.6 = getitem(value=Hnew, index=N_det, fn=<built-in function getitem>)
DEBUG 2022-02-07 18:03:05,587 on stmt: $490binary_multiply.9 = n_det_binom_prod * plus_minus
DEBUG 2022-02-07 18:03:05,587 on stmt: $496binary_subscr.12 = getitem(value=f_odd, index=N, fn=<built-in function getitem>)
DEBUG 2022-02-07 18:03:05,587 on stmt: $498binary_multiply.13 = $490binary_multiply.9 * $496binary_subscr.12
DEBUG 2022-02-07 18:03:05,587 on stmt: $500inplace_add.14 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$484binary_subscr.6, rhs=$498binary_multiply.13, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-07 18:03:05,587 on stmt: Hnew[N_det] = $500inplace_add.14
DEBUG 2022-02-07 18:03:05,587 on stmt: jump 506
DEBUG 2022-02-07 18:03:05,587 ==== SSA block rewrite pass on 506
DEBUG 2022-02-07 18:03:05,587 Running <numba.core.ssa._FreshVarHandler object at 0x00000196AEE97A90>
DEBUG 2022-02-07 18:03:05,587 on stmt: jump 378
DEBUG 2022-02-07 18:03:05,587 ==== SSA block rewrite pass on 510
DEBUG 2022-02-07 18:03:05,587 Running <numba.core.ssa._FreshVarHandler object at 0x00000196AEE97A90>
DEBUG 2022-02-07 18:03:05,587 on stmt: $514inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=H_batch, rhs=Hnew, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-07 18:03:05,587 on stmt: H_batch = $514inplace_add.3
DEBUG 2022-02-07 18:03:05,587 replaced with: H_batch.1 = $514inplace_add.3
DEBUG 2022-02-07 18:03:05,587 on stmt: jump 158
DEBUG 2022-02-07 18:03:05,587 ==== SSA block rewrite pass on 520
DEBUG 2022-02-07 18:03:05,587 Running <numba.core.ssa._FreshVarHandler object at 0x00000196AEE97A90>
DEBUG 2022-02-07 18:03:05,596 on stmt: bool522 = global(bool: <class 'bool'>)
DEBUG 2022-02-07 18:03:05,596 on stmt: $522pred = call bool522(glynn, func=bool522, args=(Var(glynn, loop_hafnian_batch.py:20),), kws=(), vararg=None, target=None)
DEBUG 2022-02-07 18:03:05,596 on stmt: branch $522pred, 526, 580
DEBUG 2022-02-07 18:03:05,596 ==== SSA block rewrite pass on 526
DEBUG 2022-02-07 18:03:05,596 Running <numba.core.ssa._FreshVarHandler object at 0x00000196AEE97A90>
DEBUG 2022-02-07 18:03:05,596 on stmt: $526load_global.0 = global(range: <class 'range'>)
DEBUG 2022-02-07 18:03:05,598 on stmt: $530load_attr.2 = getattr(value=H_batch, attr=shape)
DEBUG 2022-02-07 18:03:05,598 on stmt: $const532.3 = const(int, 0)
DEBUG 2022-02-07 18:03:05,598 on stmt: $534binary_subscr.4 = static_getitem(value=$530load_attr.2, index=0, index_var=$const532.3, fn=<built-in function getitem>)
DEBUG 2022-02-07 18:03:05,598 on stmt: $536call_function.5 = call $526load_global.0($534binary_subscr.4, func=$526load_global.0, args=[Var($534binary_subscr.4, loop_hafnian_batch.py:72)], kws=(), vararg=None, target=None)
DEBUG 2022-02-07 18:03:05,598 on stmt: $538get_iter.6 = getiter(value=$536call_function.5)
DEBUG 2022-02-07 18:03:05,598 on stmt: $phi540.0 = $538get_iter.6
DEBUG 2022-02-07 18:03:05,598 on stmt: jump 540
DEBUG 2022-02-07 18:03:05,598 ==== SSA block rewrite pass on 540
DEBUG 2022-02-07 18:03:05,598 Running <numba.core.ssa._FreshVarHandler object at 0x00000196AEE97A90>
DEBUG 2022-02-07 18:03:05,598 on stmt: $540for_iter.1 = iternext(value=$phi540.0)
DEBUG 2022-02-07 18:03:05,598 on stmt: $540for_iter.2 = pair_first(value=$540for_iter.1)
DEBUG 2022-02-07 18:03:05,598 on stmt: $540for_iter.3 = pair_second(value=$540for_iter.1)
DEBUG 2022-02-07 18:03:05,598 on stmt: $phi542.1 = $540for_iter.2
DEBUG 2022-02-07 18:03:05,598 on stmt: branch $540for_iter.3, 542, 580
DEBUG 2022-02-07 18:03:05,598 ==== SSA block rewrite pass on 542
DEBUG 2022-02-07 18:03:05,598 Running <numba.core.ssa._FreshVarHandler object at 0x00000196AEE97A90>
DEBUG 2022-02-07 18:03:05,598 on stmt: j = $phi542.1
DEBUG 2022-02-07 18:03:05,598 on stmt: x = N_fixed + j
DEBUG 2022-02-07 18:03:05,598 on stmt: $558binary_subscr.9 = getitem(value=H_batch, index=j, fn=<built-in function getitem>)
DEBUG 2022-02-07 18:03:05,598 on stmt: $const560.10 = const(float, 0.5)
DEBUG 2022-02-07 18:03:05,598 on stmt: $const564.12 = const(int, 2)
DEBUG 2022-02-07 18:03:05,598 on stmt: $566binary_floor_divide.13 = x // $const564.12
DEBUG 2022-02-07 18:03:05,598 on stmt: $568binary_power.14 = $const560.10 ** $566binary_floor_divide.13
DEBUG 2022-02-07 18:03:05,598 on stmt: $570inplace_multiply.15 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=$558binary_subscr.9, rhs=$568binary_power.14, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-07 18:03:05,598 on stmt: H_batch[j] = $570inplace_multiply.15
DEBUG 2022-02-07 18:03:05,598 on stmt: jump 540
DEBUG 2022-02-07 18:03:05,598 ==== SSA block rewrite pass on 580
DEBUG 2022-02-07 18:03:05,598 Running <numba.core.ssa._FreshVarHandler object at 0x00000196AEE97A90>
DEBUG 2022-02-07 18:03:05,598 on stmt: $582return_value.1 = cast(value=H_batch)
DEBUG 2022-02-07 18:03:05,598 on stmt: return $582return_value.1
DEBUG 2022-02-07 18:03:05,598 Replaced assignments: defaultdict(<class 'list'>,
            {0: [<numba.core.ir.Assign object at 0x00000196AEF27D60>],
             510: [<numba.core.ir.Assign object at 0x00000196AEF27B50>]})
DEBUG 2022-02-07 18:03:05,598 ==== SSA block rewrite pass on 0
DEBUG 2022-02-07 18:03:05,598 Running <numba.core.ssa._FixSSAVars object at 0x00000196AEF27BE0>
DEBUG 2022-02-07 18:03:05,598 on stmt: A = arg(0, name=A)
DEBUG 2022-02-07 18:03:05,598 on stmt: D = arg(1, name=D)
DEBUG 2022-02-07 18:03:05,598 on stmt: fixed_edge_reps = arg(2, name=fixed_edge_reps)
DEBUG 2022-02-07 18:03:05,606 on stmt: batch_max = arg(3, name=batch_max)
DEBUG 2022-02-07 18:03:05,606 on stmt: odd_cutoff = arg(4, name=odd_cutoff)
DEBUG 2022-02-07 18:03:05,606 on stmt: glynn = arg(5, name=glynn)
DEBUG 2022-02-07 18:03:05,606 on stmt: $const4.1 = const(int, 0)
DEBUG 2022-02-07 18:03:05,606 on stmt: oddloop = static_getitem(value=D, index=0, index_var=$const4.1, fn=<built-in function getitem>)
DEBUG 2022-02-07 18:03:05,606 on stmt: $const12.4 = const(int, 0)
DEBUG 2022-02-07 18:03:05,606 on stmt: $const14.5 = const(NoneType, None)
DEBUG 2022-02-07 18:03:05,608 on stmt: $const16.6 = const(NoneType, None)
DEBUG 2022-02-07 18:03:05,608 on stmt: $18build_slice.7 = global(slice: <class 'slice'>)
DEBUG 2022-02-07 18:03:05,608 on stmt: $18build_slice.8 = call $18build_slice.7($const14.5, $const16.6, func=$18build_slice.7, args=(Var($const14.5, loop_hafnian_batch.py:21), Var($const16.6, loop_hafnian_batch.py:21)), kws=(), vararg=None, target=None)
DEBUG 2022-02-07 18:03:05,608 on stmt: $20build_tuple.9 = build_tuple(items=[Var($const12.4, loop_hafnian_batch.py:21), Var($18build_slice.8, loop_hafnian_batch.py:21)])
DEBUG 2022-02-07 18:03:05,608 on stmt: oddV = static_getitem(value=A, index=(0, slice(None, None, None)), index_var=$20build_tuple.9, fn=<built-in function getitem>)
DEBUG 2022-02-07 18:03:05,608 on stmt: $28load_attr.12 = getattr(value=A, attr=shape)
DEBUG 2022-02-07 18:03:05,608 on stmt: $const30.13 = const(int, 0)
DEBUG 2022-02-07 18:03:05,608 on stmt: n = static_getitem(value=$28load_attr.12, index=0, index_var=$const30.13, fn=<built-in function getitem>)
DEBUG 2022-02-07 18:03:05,608 on stmt: $const36.15 = const(int, 2)
DEBUG 2022-02-07 18:03:05,608 on stmt: $40load_method.17 = getattr(value=fixed_edge_reps, attr=sum)
DEBUG 2022-02-07 18:03:05,608 on stmt: $42call_method.18 = call $40load_method.17(func=$40load_method.17, args=[], kws=(), vararg=None, target=None)
DEBUG 2022-02-07 18:03:05,608 on stmt: N_fixed = $const36.15 * $42call_method.18
DEBUG 2022-02-07 18:03:05,608 on stmt: $const50.21 = const(int, 2)
DEBUG 2022-02-07 18:03:05,608 on stmt: $54binary_multiply.23 = $const50.21 * batch_max
DEBUG 2022-02-07 18:03:05,608 on stmt: $56binary_add.24 = N_fixed + $54binary_multiply.23
DEBUG 2022-02-07 18:03:05,608 on stmt: N_max = $56binary_add.24 + odd_cutoff
DEBUG 2022-02-07 18:03:05,608 on stmt: $64load_global.27 = global(np: <module 'numpy' from 'C:\\Users\\zl4821\\Anaconda3\\envs\\GBS\\lib\\site-packages\\numpy\\__init__.py'>)
DEBUG 2022-02-07 18:03:05,608 on stmt: $66load_method.28 = getattr(value=$64load_global.27, attr=concatenate)
DEBUG 2022-02-07 18:03:05,608 on stmt: $68load_global.29 = global(np: <module 'numpy' from 'C:\\Users\\zl4821\\Anaconda3\\envs\\GBS\\lib\\site-packages\\numpy\\__init__.py'>)
DEBUG 2022-02-07 18:03:05,608 on stmt: $70load_method.30 = getattr(value=$68load_global.29, attr=array)
DEBUG 2022-02-07 18:03:05,608 on stmt: $74build_list.32 = build_list(items=[Var(batch_max, loop_hafnian_batch.py:20)])
DEBUG 2022-02-07 18:03:05,608 on stmt: $76call_method.33 = call $70load_method.30($74build_list.32, func=$70load_method.30, args=[Var($74build_list.32, loop_hafnian_batch.py:28)], kws=(), vararg=None, target=None)
DEBUG 2022-02-07 18:03:05,608 on stmt: $80build_tuple.35 = build_tuple(items=[Var($76call_method.33, loop_hafnian_batch.py:28), Var(fixed_edge_reps, loop_hafnian_batch.py:20)])
DEBUG 2022-02-07 18:03:05,608 on stmt: edge_reps = call $66load_method.28($80build_tuple.35, func=$66load_method.28, args=[Var($80build_tuple.35, loop_hafnian_batch.py:28)], kws=(), vararg=None, target=None)
DEBUG 2022-02-07 18:03:05,608 on stmt: $86load_global.37 = global(np: <module 'numpy' from 'C:\\Users\\zl4821\\Anaconda3\\envs\\GBS\\lib\\site-packages\\numpy\\__init__.py'>)
DEBUG 2022-02-07 18:03:05,608 on stmt: $88load_method.38 = getattr(value=$86load_global.37, attr=prod)
DEBUG 2022-02-07 18:03:05,608 on stmt: $const92.40 = const(int, 1)
DEBUG 2022-02-07 18:03:05,608 on stmt: $94binary_add.41 = edge_reps + $const92.40
DEBUG 2022-02-07 18:03:05,608 on stmt: steps = call $88load_method.38($94binary_add.41, func=$88load_method.38, args=[Var($94binary_add.41, loop_hafnian_batch.py:29)], kws=(), vararg=None, target=None)
DEBUG 2022-02-07 18:03:05,608 on stmt: $102load_method.44 = getattr(value=edge_reps, attr=max)
DEBUG 2022-02-07 18:03:05,616 on stmt: $104call_method.45 = call $102load_method.44(func=$102load_method.44, args=[], kws=(), vararg=None, target=None)
DEBUG 2022-02-07 18:03:05,616 on stmt: max_binom = $104call_method.45 + odd_cutoff
DEBUG 2022-02-07 18:03:05,616 on stmt: $112load_global.48 = global(precompute_binoms: CPUDispatcher(<function precompute_binoms at 0x00000196AE6F6CA0>))
DEBUG 2022-02-07 18:03:05,616 on stmt: binoms = call $112load_global.48(max_binom, func=$112load_global.48, args=[Var(max_binom, loop_hafnian_batch.py:31)], kws=(), vararg=None, target=None)
DEBUG 2022-02-07 18:03:05,616 on stmt: $120load_global.51 = global(np: <module 'numpy' from 'C:\\Users\\zl4821\\Anaconda3\\envs\\GBS\\lib\\site-packages\\numpy\\__init__.py'>)
DEBUG 2022-02-07 18:03:05,616 on stmt: $122load_attr.52 = getattr(value=$120load_global.51, attr=zeros)
DEBUG 2022-02-07 18:03:05,616 on stmt: $const124.53 = const(int, 2)
DEBUG 2022-02-07 18:03:05,616 on stmt: $128binary_multiply.55 = $const124.53 * batch_max
DEBUG 2022-02-07 18:03:05,616 on stmt: $132binary_add.57 = $128binary_multiply.55 + odd_cutoff
DEBUG 2022-02-07 18:03:05,618 on stmt: $const134.58 = const(int, 1)
DEBUG 2022-02-07 18:03:05,618 on stmt: $136binary_add.59 = $132binary_add.57 + $const134.58
DEBUG 2022-02-07 18:03:05,618 on stmt: $138load_global.60 = global(np: <module 'numpy' from 'C:\\Users\\zl4821\\Anaconda3\\envs\\GBS\\lib\\site-packages\\numpy\\__init__.py'>)
DEBUG 2022-02-07 18:03:05,618 on stmt: $140load_attr.61 = getattr(value=$138load_global.60, attr=complex128)
DEBUG 2022-02-07 18:03:05,618 on stmt: H_batch = call $122load_attr.52($136binary_add.59, func=$122load_attr.52, args=[Var($136binary_add.59, loop_hafnian_batch.py:34)], kws=[('dtype', Var($140load_attr.61, loop_hafnian_batch.py:34))], vararg=None, target=None)
DEBUG 2022-02-07 18:03:05,618 on stmt: $148load_global.64 = global(numba: <module 'numba' from 'C:\\Users\\zl4821\\Anaconda3\\envs\\GBS\\lib\\site-packages\\numba\\__init__.py'>)
DEBUG 2022-02-07 18:03:05,618 on stmt: $150load_method.65 = getattr(value=$148load_global.64, attr=prange)
DEBUG 2022-02-07 18:03:05,618 on stmt: $154call_method.67 = call $150load_method.65(steps, func=$150load_method.65, args=[Var(steps, loop_hafnian_batch.py:29)], kws=(), vararg=None, target=None)
DEBUG 2022-02-07 18:03:05,618 on stmt: $156get_iter.68 = getiter(value=$154call_method.67)
DEBUG 2022-02-07 18:03:05,618 on stmt: $phi158.0 = $156get_iter.68
DEBUG 2022-02-07 18:03:05,618 on stmt: jump 158
DEBUG 2022-02-07 18:03:05,618 ==== SSA block rewrite pass on 158
DEBUG 2022-02-07 18:03:05,618 Running <numba.core.ssa._FixSSAVars object at 0x00000196AEF27BE0>
DEBUG 2022-02-07 18:03:05,618 on stmt: $158for_iter.1 = iternext(value=$phi158.0)
DEBUG 2022-02-07 18:03:05,618 on stmt: $158for_iter.2 = pair_first(value=$158for_iter.1)
DEBUG 2022-02-07 18:03:05,618 on stmt: $158for_iter.3 = pair_second(value=$158for_iter.1)
DEBUG 2022-02-07 18:03:05,618 on stmt: $phi162.1 = $158for_iter.2
DEBUG 2022-02-07 18:03:05,618 on stmt: branch $158for_iter.3, 162, 520
DEBUG 2022-02-07 18:03:05,618 ==== SSA block rewrite pass on 162
DEBUG 2022-02-07 18:03:05,618 Running <numba.core.ssa._FixSSAVars object at 0x00000196AEF27BE0>
DEBUG 2022-02-07 18:03:05,618 on stmt: j = $phi162.1
DEBUG 2022-02-07 18:03:05,618 on stmt: $164load_global.2 = global(np: <module 'numpy' from 'C:\\Users\\zl4821\\Anaconda3\\envs\\GBS\\lib\\site-packages\\numpy\\__init__.py'>)
DEBUG 2022-02-07 18:03:05,618 on stmt: $166load_attr.3 = getattr(value=$164load_global.2, attr=zeros)
DEBUG 2022-02-07 18:03:05,618 on stmt: $const168.4 = const(int, 2)
DEBUG 2022-02-07 18:03:05,618 on stmt: $172binary_multiply.6 = $const168.4 * batch_max
DEBUG 2022-02-07 18:03:05,618 on stmt: $176binary_add.8 = $172binary_multiply.6 + odd_cutoff
DEBUG 2022-02-07 18:03:05,618 on stmt: $const178.9 = const(int, 1)
DEBUG 2022-02-07 18:03:05,618 on stmt: $180binary_add.10 = $176binary_add.8 + $const178.9
DEBUG 2022-02-07 18:03:05,618 on stmt: $182load_global.11 = global(np: <module 'numpy' from 'C:\\Users\\zl4821\\Anaconda3\\envs\\GBS\\lib\\site-packages\\numpy\\__init__.py'>)
DEBUG 2022-02-07 18:03:05,618 on stmt: $184load_attr.12 = getattr(value=$182load_global.11, attr=complex128)
DEBUG 2022-02-07 18:03:05,618 on stmt: Hnew = call $166load_attr.3($180binary_add.10, func=$166load_attr.3, args=[Var($180binary_add.10, loop_hafnian_batch.py:37)], kws=[('dtype', Var($184load_attr.12, loop_hafnian_batch.py:37))], vararg=None, target=None)
DEBUG 2022-02-07 18:03:05,618 on stmt: $192load_global.15 = global(find_kept_edges: CPUDispatcher(<function find_kept_edges at 0x00000196AE71E160>))
DEBUG 2022-02-07 18:03:05,618 on stmt: kept_edges = call $192load_global.15(j, edge_reps, func=$192load_global.15, args=[Var(j, loop_hafnian_batch.py:35), Var(edge_reps, loop_hafnian_batch.py:28)], kws=(), vararg=None, target=None)
DEBUG 2022-02-07 18:03:05,618 on stmt: $204load_method.20 = getattr(value=kept_edges, attr=sum)
DEBUG 2022-02-07 18:03:05,618 on stmt: edges_sum = call $204load_method.20(func=$204load_method.20, args=[], kws=(), vararg=None, target=None)
DEBUG 2022-02-07 18:03:05,618 on stmt: binom_prod = const(float, 1.0)
DEBUG 2022-02-07 18:03:05,618 on stmt: $214load_global.23 = global(range: <class 'range'>)
DEBUG 2022-02-07 18:03:05,618 on stmt: $const216.24 = const(int, 1)
DEBUG 2022-02-07 18:03:05,618 on stmt: $const220.26 = const(int, 2)
DEBUG 2022-02-07 18:03:05,618 on stmt: $222binary_floor_divide.27 = n // $const220.26
DEBUG 2022-02-07 18:03:05,618 on stmt: $224call_function.28 = call $214load_global.23($const216.24, $222binary_floor_divide.27, func=$214load_global.23, args=[Var($const216.24, loop_hafnian_batch.py:43), Var($222binary_floor_divide.27, loop_hafnian_batch.py:43)], kws=(), vararg=None, target=None)
DEBUG 2022-02-07 18:03:05,626 on stmt: $226get_iter.29 = getiter(value=$224call_function.28)
DEBUG 2022-02-07 18:03:05,626 on stmt: $phi228.1 = $226get_iter.29
DEBUG 2022-02-07 18:03:05,626 on stmt: jump 228
DEBUG 2022-02-07 18:03:05,626 ==== SSA block rewrite pass on 228
DEBUG 2022-02-07 18:03:05,626 Running <numba.core.ssa._FixSSAVars object at 0x00000196AEF27BE0>
DEBUG 2022-02-07 18:03:05,626 on stmt: binom_prod.2 = phi(incoming_values=[Var(binom_prod, loop_hafnian_batch.py:42), Var(binom_prod.1, loop_hafnian_batch.py:44)], incoming_blocks=[162, 230])
DEBUG 2022-02-07 18:03:05,626 on stmt: $228for_iter.2 = iternext(value=$phi228.1)
DEBUG 2022-02-07 18:03:05,626 on stmt: $228for_iter.3 = pair_first(value=$228for_iter.2)
DEBUG 2022-02-07 18:03:05,626 on stmt: $228for_iter.4 = pair_second(value=$228for_iter.2)
DEBUG 2022-02-07 18:03:05,628 on stmt: $phi230.2 = $228for_iter.3
DEBUG 2022-02-07 18:03:05,628 on stmt: branch $228for_iter.4, 230, 258
DEBUG 2022-02-07 18:03:05,628 ==== SSA block rewrite pass on 230
DEBUG 2022-02-07 18:03:05,628 Running <numba.core.ssa._FixSSAVars object at 0x00000196AEF27BE0>
DEBUG 2022-02-07 18:03:05,628 on stmt: i = $phi230.2
DEBUG 2022-02-07 18:03:05,628 on stmt: $240binary_subscr.7 = getitem(value=edge_reps, index=i, fn=<built-in function getitem>)
DEBUG 2022-02-07 18:03:05,628 on stmt: $246binary_subscr.10 = getitem(value=kept_edges, index=i, fn=<built-in function getitem>)
DEBUG 2022-02-07 18:03:05,628 on stmt: $248build_tuple.11 = build_tuple(items=[Var($240binary_subscr.7, loop_hafnian_batch.py:44), Var($246binary_subscr.10, loop_hafnian_batch.py:44)])
DEBUG 2022-02-07 18:03:05,628 on stmt: $250binary_subscr.12 = getitem(value=binoms, index=$248build_tuple.11, fn=<built-in function getitem>)
DEBUG 2022-02-07 18:03:05,628 on stmt: $252inplace_multiply.13 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=binom_prod.2, rhs=$250binary_subscr.12, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-07 18:03:05,628 on stmt: binom_prod.1 = $252inplace_multiply.13
DEBUG 2022-02-07 18:03:05,628 on stmt: jump 228
DEBUG 2022-02-07 18:03:05,628 ==== SSA block rewrite pass on 258
DEBUG 2022-02-07 18:03:05,628 Running <numba.core.ssa._FixSSAVars object at 0x00000196AEF27BE0>
DEBUG 2022-02-07 18:03:05,628 on stmt: bool260 = global(bool: <class 'bool'>)
DEBUG 2022-02-07 18:03:05,628 on stmt: $260pred = call bool260(glynn, func=bool260, args=(Var(glynn, loop_hafnian_batch.py:20),), kws=(), vararg=None, target=None)
DEBUG 2022-02-07 18:03:05,628 on stmt: branch $260pred, 264, 278
DEBUG 2022-02-07 18:03:05,628 ==== SSA block rewrite pass on 264
DEBUG 2022-02-07 18:03:05,628 Running <numba.core.ssa._FixSSAVars object at 0x00000196AEF27BE0>
DEBUG 2022-02-07 18:03:05,628 on stmt: $const264.1 = const(int, 2)
DEBUG 2022-02-07 18:03:05,628 on stmt: $268binary_multiply.3 = $const264.1 * kept_edges
DEBUG 2022-02-07 18:03:05,628 on stmt: delta = $268binary_multiply.3 - edge_reps
DEBUG 2022-02-07 18:03:05,628 on stmt: jump 282
DEBUG 2022-02-07 18:03:05,628 ==== SSA block rewrite pass on 278
DEBUG 2022-02-07 18:03:05,628 Running <numba.core.ssa._FixSSAVars object at 0x00000196AEF27BE0>
DEBUG 2022-02-07 18:03:05,628 on stmt: delta.1 = kept_edges
DEBUG 2022-02-07 18:03:05,628 on stmt: jump 282
DEBUG 2022-02-07 18:03:05,628 ==== SSA block rewrite pass on 282
DEBUG 2022-02-07 18:03:05,628 Running <numba.core.ssa._FixSSAVars object at 0x00000196AEF27BE0>
DEBUG 2022-02-07 18:03:05,628 on stmt: delta.2 = phi(incoming_values=[Var(delta, loop_hafnian_batch.py:47), Var(delta.1, loop_hafnian_batch.py:49)], incoming_blocks=[264, 278])
DEBUG 2022-02-07 18:03:05,628 on stmt: $282load_global.1 = global(get_submatrices: CPUDispatcher(<function get_submatrices at 0x00000196AE71E670>))
DEBUG 2022-02-07 18:03:05,628 on stmt: $292call_function.6 = call $282load_global.1(delta.2, A, D, oddV, func=$282load_global.1, args=[Var(delta.2, loop_hafnian_batch.py:51), Var(A, loop_hafnian_batch.py:20), Var(D, loop_hafnian_batch.py:20), Var(oddV, loop_hafnian_batch.py:21)], kws=(), vararg=None, target=None)
DEBUG 2022-02-07 18:03:05,628 on stmt: $294unpack_sequence.11 = exhaust_iter(value=$292call_function.6, count=4)
DEBUG 2022-02-07 18:03:05,628 on stmt: $294unpack_sequence.7 = static_getitem(value=$294unpack_sequence.11, index=0, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-02-07 18:03:05,628 on stmt: $294unpack_sequence.8 = static_getitem(value=$294unpack_sequence.11, index=1, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-02-07 18:03:05,628 on stmt: $294unpack_sequence.9 = static_getitem(value=$294unpack_sequence.11, index=2, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-02-07 18:03:05,636 on stmt: $294unpack_sequence.10 = static_getitem(value=$294unpack_sequence.11, index=3, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-02-07 18:03:05,636 on stmt: AX_S = $294unpack_sequence.7
DEBUG 2022-02-07 18:03:05,636 on stmt: XD_S = $294unpack_sequence.8
DEBUG 2022-02-07 18:03:05,636 on stmt: D_S = $294unpack_sequence.9
DEBUG 2022-02-07 18:03:05,636 on stmt: oddVX_S = $294unpack_sequence.10
DEBUG 2022-02-07 18:03:05,636 on stmt: $304load_global.12 = global(eigvals: CPUDispatcher(<function eigvals at 0x00000196AE71EB80>))
DEBUG 2022-02-07 18:03:05,636 on stmt: E = call $304load_global.12(AX_S, func=$304load_global.12, args=[Var(AX_S, loop_hafnian_batch.py:51)], kws=(), vararg=None, target=None)
DEBUG 2022-02-07 18:03:05,638 on stmt: $312load_global.15 = global(f_loop: CPUDispatcher(<function f_loop at 0x00000196AE71E310>))
DEBUG 2022-02-07 18:03:05,638 on stmt: f_even = call $312load_global.15(E, AX_S, XD_S, D_S, N_max, func=$312load_global.15, args=[Var(E, loop_hafnian_batch.py:53), Var(AX_S, loop_hafnian_batch.py:51), Var(XD_S, loop_hafnian_batch.py:51), Var(D_S, loop_hafnian_batch.py:51), Var(N_max, loop_hafnian_batch.py:26)], kws=(), vararg=None, target=None)
DEBUG 2022-02-07 18:03:05,638 on stmt: $328load_global.22 = global(f_loop_odd: CPUDispatcher(<function f_loop_odd at 0x00000196AE71E4C0>))
DEBUG 2022-02-07 18:03:05,638 on stmt: f_odd = call $328load_global.22(E, AX_S, XD_S, D_S, N_max, oddloop, oddVX_S, func=$328load_global.22, args=[Var(E, loop_hafnian_batch.py:53), Var(AX_S, loop_hafnian_batch.py:51), Var(XD_S, loop_hafnian_batch.py:51), Var(D_S, loop_hafnian_batch.py:51), Var(N_max, loop_hafnian_batch.py:26), Var(oddloop, loop_hafnian_batch.py:20), Var(oddVX_S, loop_hafnian_batch.py:51)], kws=(), vararg=None, target=None)
DEBUG 2022-02-07 18:03:05,638 on stmt: $348load_global.31 = global(range: <class 'range'>)
DEBUG 2022-02-07 18:03:05,638 on stmt: $const350.32 = const(int, 2)
DEBUG 2022-02-07 18:03:05,638 on stmt: $const354.34 = const(int, 0)
DEBUG 2022-02-07 18:03:05,638 on stmt: $356binary_subscr.35 = static_getitem(value=kept_edges, index=0, index_var=$const354.34, fn=<built-in function getitem>)
DEBUG 2022-02-07 18:03:05,638 on stmt: $358binary_multiply.36 = $const350.32 * $356binary_subscr.35
DEBUG 2022-02-07 18:03:05,638 on stmt: $const360.37 = const(int, 2)
DEBUG 2022-02-07 18:03:05,638 on stmt: $364binary_multiply.39 = $const360.37 * batch_max
DEBUG 2022-02-07 18:03:05,638 on stmt: $368binary_add.41 = $364binary_multiply.39 + odd_cutoff
DEBUG 2022-02-07 18:03:05,638 on stmt: $const370.42 = const(int, 1)
DEBUG 2022-02-07 18:03:05,638 on stmt: $372binary_add.43 = $368binary_add.41 + $const370.42
DEBUG 2022-02-07 18:03:05,638 on stmt: $374call_function.44 = call $348load_global.31($358binary_multiply.36, $372binary_add.43, func=$348load_global.31, args=[Var($358binary_multiply.36, loop_hafnian_batch.py:58), Var($372binary_add.43, loop_hafnian_batch.py:58)], kws=(), vararg=None, target=None)
DEBUG 2022-02-07 18:03:05,638 on stmt: $376get_iter.45 = getiter(value=$374call_function.44)
DEBUG 2022-02-07 18:03:05,638 on stmt: $phi378.1 = $376get_iter.45
DEBUG 2022-02-07 18:03:05,638 on stmt: jump 378
DEBUG 2022-02-07 18:03:05,638 ==== SSA block rewrite pass on 378
DEBUG 2022-02-07 18:03:05,638 Running <numba.core.ssa._FixSSAVars object at 0x00000196AEF27BE0>
DEBUG 2022-02-07 18:03:05,638 on stmt: $378for_iter.2 = iternext(value=$phi378.1)
DEBUG 2022-02-07 18:03:05,638 on stmt: $378for_iter.3 = pair_first(value=$378for_iter.2)
DEBUG 2022-02-07 18:03:05,638 on stmt: $378for_iter.4 = pair_second(value=$378for_iter.2)
DEBUG 2022-02-07 18:03:05,638 on stmt: $phi380.2 = $378for_iter.3
DEBUG 2022-02-07 18:03:05,638 on stmt: branch $378for_iter.4, 380, 510
DEBUG 2022-02-07 18:03:05,638 ==== SSA block rewrite pass on 380
DEBUG 2022-02-07 18:03:05,638 Running <numba.core.ssa._FixSSAVars object at 0x00000196AEF27BE0>
DEBUG 2022-02-07 18:03:05,638 on stmt: N_det = $phi380.2
DEBUG 2022-02-07 18:03:05,638 on stmt: N = N_fixed + N_det
DEBUG 2022-02-07 18:03:05,638 on stmt: $const390.6 = const(float, -1.0)
DEBUG 2022-02-07 18:03:05,638 on stmt: $const394.8 = const(int, 2)
DEBUG 2022-02-07 18:03:05,638 on stmt: $396binary_floor_divide.9 = N // $const394.8
DEBUG 2022-02-07 18:03:05,646 on stmt: $400binary_subtract.11 = $396binary_floor_divide.9 - edges_sum
DEBUG 2022-02-07 18:03:05,646 on stmt: plus_minus = $const390.6 ** $400binary_subtract.11
DEBUG 2022-02-07 18:03:05,646 on stmt: $const410.15 = const(int, 2)
DEBUG 2022-02-07 18:03:05,646 on stmt: $412binary_floor_divide.16 = N_det // $const410.15
DEBUG 2022-02-07 18:03:05,646 on stmt: $const416.18 = const(int, 0)
DEBUG 2022-02-07 18:03:05,646 on stmt: $418binary_subscr.19 = static_getitem(value=kept_edges, index=0, index_var=$const416.18, fn=<built-in function getitem>)
DEBUG 2022-02-07 18:03:05,646 on stmt: $420build_tuple.20 = build_tuple(items=[Var($412binary_floor_divide.16, loop_hafnian_batch.py:62), Var($418binary_subscr.19, loop_hafnian_batch.py:62)])
DEBUG 2022-02-07 18:03:05,646 on stmt: $422binary_subscr.21 = getitem(value=binoms, index=$420build_tuple.20, fn=<built-in function getitem>)
DEBUG 2022-02-07 18:03:05,646 on stmt: n_det_binom_prod = $422binary_subscr.21 * binom_prod.2
DEBUG 2022-02-07 18:03:05,646 on stmt: $const432.25 = const(int, 2)
DEBUG 2022-02-07 18:03:05,648 on stmt: $434binary_modulo.26 = N_det % $const432.25
DEBUG 2022-02-07 18:03:05,648 on stmt: $const436.27 = const(int, 0)
DEBUG 2022-02-07 18:03:05,648 on stmt: $438compare_op.28 = $434binary_modulo.26 == $const436.27
DEBUG 2022-02-07 18:03:05,648 on stmt: bool440 = global(bool: <class 'bool'>)
DEBUG 2022-02-07 18:03:05,648 on stmt: $440pred = call bool440($438compare_op.28, func=bool440, args=(Var($438compare_op.28, loop_hafnian_batch.py:64),), kws=(), vararg=None, target=None)
DEBUG 2022-02-07 18:03:05,648 on stmt: branch $440pred, 444, 478
DEBUG 2022-02-07 18:03:05,648 ==== SSA block rewrite pass on 444
DEBUG 2022-02-07 18:03:05,648 Running <numba.core.ssa._FixSSAVars object at 0x00000196AEF27BE0>
DEBUG 2022-02-07 18:03:05,648 on stmt: $450binary_subscr.6 = getitem(value=Hnew, index=N_det, fn=<built-in function getitem>)
DEBUG 2022-02-07 18:03:05,648 on stmt: $456binary_multiply.9 = n_det_binom_prod * plus_minus
DEBUG 2022-02-07 18:03:05,648 on stmt: $const462.12 = const(int, 2)
DEBUG 2022-02-07 18:03:05,648 on stmt: $464binary_floor_divide.13 = N // $const462.12
DEBUG 2022-02-07 18:03:05,648 on stmt: $466binary_subscr.14 = getitem(value=f_even, index=$464binary_floor_divide.13, fn=<built-in function getitem>)
DEBUG 2022-02-07 18:03:05,648 on stmt: $468binary_multiply.15 = $456binary_multiply.9 * $466binary_subscr.14
DEBUG 2022-02-07 18:03:05,648 on stmt: $470inplace_add.16 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$450binary_subscr.6, rhs=$468binary_multiply.15, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-07 18:03:05,648 on stmt: Hnew[N_det] = $470inplace_add.16
DEBUG 2022-02-07 18:03:05,648 on stmt: jump 506
DEBUG 2022-02-07 18:03:05,648 ==== SSA block rewrite pass on 478
DEBUG 2022-02-07 18:03:05,648 Running <numba.core.ssa._FixSSAVars object at 0x00000196AEF27BE0>
DEBUG 2022-02-07 18:03:05,648 on stmt: $484binary_subscr.6 = getitem(value=Hnew, index=N_det, fn=<built-in function getitem>)
DEBUG 2022-02-07 18:03:05,648 on stmt: $490binary_multiply.9 = n_det_binom_prod * plus_minus
DEBUG 2022-02-07 18:03:05,648 on stmt: $496binary_subscr.12 = getitem(value=f_odd, index=N, fn=<built-in function getitem>)
DEBUG 2022-02-07 18:03:05,648 on stmt: $498binary_multiply.13 = $490binary_multiply.9 * $496binary_subscr.12
DEBUG 2022-02-07 18:03:05,648 on stmt: $500inplace_add.14 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$484binary_subscr.6, rhs=$498binary_multiply.13, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-07 18:03:05,648 on stmt: Hnew[N_det] = $500inplace_add.14
DEBUG 2022-02-07 18:03:05,648 on stmt: jump 506
DEBUG 2022-02-07 18:03:05,648 ==== SSA block rewrite pass on 506
DEBUG 2022-02-07 18:03:05,648 Running <numba.core.ssa._FixSSAVars object at 0x00000196AEF27BE0>
DEBUG 2022-02-07 18:03:05,648 on stmt: jump 378
DEBUG 2022-02-07 18:03:05,648 ==== SSA block rewrite pass on 510
DEBUG 2022-02-07 18:03:05,648 Running <numba.core.ssa._FixSSAVars object at 0x00000196AEF27BE0>
DEBUG 2022-02-07 18:03:05,648 on stmt: $514inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=H_batch, rhs=Hnew, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-07 18:03:05,648 find_def var='H_batch' stmt=$514inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=H_batch, rhs=Hnew, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-07 18:03:05,648 find_def_from_top label 510
DEBUG 2022-02-07 18:03:05,648 idom 378 from label 510
DEBUG 2022-02-07 18:03:05,648 find_def_from_bottom label 378
DEBUG 2022-02-07 18:03:05,648 find_def_from_top label 378
DEBUG 2022-02-07 18:03:05,648 idom 282 from label 378
DEBUG 2022-02-07 18:03:05,648 find_def_from_bottom label 282
DEBUG 2022-02-07 18:03:05,648 find_def_from_top label 282
DEBUG 2022-02-07 18:03:05,656 idom 258 from label 282
DEBUG 2022-02-07 18:03:05,656 find_def_from_bottom label 258
DEBUG 2022-02-07 18:03:05,656 find_def_from_top label 258
DEBUG 2022-02-07 18:03:05,656 idom 228 from label 258
DEBUG 2022-02-07 18:03:05,656 find_def_from_bottom label 228
DEBUG 2022-02-07 18:03:05,656 find_def_from_top label 228
DEBUG 2022-02-07 18:03:05,656 idom 162 from label 228
DEBUG 2022-02-07 18:03:05,656 find_def_from_bottom label 162
DEBUG 2022-02-07 18:03:05,656 find_def_from_top label 162
DEBUG 2022-02-07 18:03:05,656 idom 158 from label 162
DEBUG 2022-02-07 18:03:05,656 find_def_from_bottom label 158
DEBUG 2022-02-07 18:03:05,656 find_def_from_top label 158
DEBUG 2022-02-07 18:03:05,656 insert phi node H_batch.2 = phi(incoming_values=[], incoming_blocks=[]) at 158
DEBUG 2022-02-07 18:03:05,658 find_def_from_bottom label 0
DEBUG 2022-02-07 18:03:05,658 incoming_def H_batch = call $122load_attr.52($136binary_add.59, func=$122load_attr.52, args=[Var($136binary_add.59, loop_hafnian_batch.py:34)], kws=[('dtype', Var($140load_attr.61, loop_hafnian_batch.py:34))], vararg=None, target=None)
DEBUG 2022-02-07 18:03:05,658 find_def_from_bottom label 510
DEBUG 2022-02-07 18:03:05,658 incoming_def H_batch.1 = $514inplace_add.3
DEBUG 2022-02-07 18:03:05,658 replaced with: $514inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=H_batch.2, rhs=Hnew, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-07 18:03:05,658 on stmt: H_batch.1 = $514inplace_add.3
DEBUG 2022-02-07 18:03:05,658 on stmt: jump 158
DEBUG 2022-02-07 18:03:05,658 ==== SSA block rewrite pass on 520
DEBUG 2022-02-07 18:03:05,658 Running <numba.core.ssa._FixSSAVars object at 0x00000196AEF27BE0>
DEBUG 2022-02-07 18:03:05,658 on stmt: bool522 = global(bool: <class 'bool'>)
DEBUG 2022-02-07 18:03:05,658 on stmt: $522pred = call bool522(glynn, func=bool522, args=(Var(glynn, loop_hafnian_batch.py:20),), kws=(), vararg=None, target=None)
DEBUG 2022-02-07 18:03:05,658 on stmt: branch $522pred, 526, 580
DEBUG 2022-02-07 18:03:05,658 ==== SSA block rewrite pass on 526
DEBUG 2022-02-07 18:03:05,658 Running <numba.core.ssa._FixSSAVars object at 0x00000196AEF27BE0>
DEBUG 2022-02-07 18:03:05,658 on stmt: $526load_global.0 = global(range: <class 'range'>)
DEBUG 2022-02-07 18:03:05,658 on stmt: $530load_attr.2 = getattr(value=H_batch, attr=shape)
DEBUG 2022-02-07 18:03:05,658 find_def var='H_batch' stmt=$530load_attr.2 = getattr(value=H_batch, attr=shape)
DEBUG 2022-02-07 18:03:05,658 find_def_from_top label 526
DEBUG 2022-02-07 18:03:05,658 idom 520 from label 526
DEBUG 2022-02-07 18:03:05,658 find_def_from_bottom label 520
DEBUG 2022-02-07 18:03:05,658 find_def_from_top label 520
DEBUG 2022-02-07 18:03:05,658 idom 158 from label 520
DEBUG 2022-02-07 18:03:05,658 find_def_from_bottom label 158
DEBUG 2022-02-07 18:03:05,658 replaced with: $530load_attr.2 = getattr(value=H_batch.2, attr=shape)
DEBUG 2022-02-07 18:03:05,658 on stmt: $const532.3 = const(int, 0)
DEBUG 2022-02-07 18:03:05,658 on stmt: $534binary_subscr.4 = static_getitem(value=$530load_attr.2, index=0, index_var=$const532.3, fn=<built-in function getitem>)
DEBUG 2022-02-07 18:03:05,658 on stmt: $536call_function.5 = call $526load_global.0($534binary_subscr.4, func=$526load_global.0, args=[Var($534binary_subscr.4, loop_hafnian_batch.py:72)], kws=(), vararg=None, target=None)
DEBUG 2022-02-07 18:03:05,658 on stmt: $538get_iter.6 = getiter(value=$536call_function.5)
DEBUG 2022-02-07 18:03:05,658 on stmt: $phi540.0 = $538get_iter.6
DEBUG 2022-02-07 18:03:05,658 on stmt: jump 540
DEBUG 2022-02-07 18:03:05,658 ==== SSA block rewrite pass on 540
DEBUG 2022-02-07 18:03:05,658 Running <numba.core.ssa._FixSSAVars object at 0x00000196AEF27BE0>
DEBUG 2022-02-07 18:03:05,658 on stmt: $540for_iter.1 = iternext(value=$phi540.0)
DEBUG 2022-02-07 18:03:05,658 on stmt: $540for_iter.2 = pair_first(value=$540for_iter.1)
DEBUG 2022-02-07 18:03:05,658 on stmt: $540for_iter.3 = pair_second(value=$540for_iter.1)
DEBUG 2022-02-07 18:03:05,658 on stmt: $phi542.1 = $540for_iter.2
DEBUG 2022-02-07 18:03:05,658 on stmt: branch $540for_iter.3, 542, 580
DEBUG 2022-02-07 18:03:05,658 ==== SSA block rewrite pass on 542
DEBUG 2022-02-07 18:03:05,658 Running <numba.core.ssa._FixSSAVars object at 0x00000196AEF27BE0>
DEBUG 2022-02-07 18:03:05,658 on stmt: j = $phi542.1
DEBUG 2022-02-07 18:03:05,666 on stmt: x = N_fixed + j
DEBUG 2022-02-07 18:03:05,666 on stmt: $558binary_subscr.9 = getitem(value=H_batch, index=j, fn=<built-in function getitem>)
DEBUG 2022-02-07 18:03:05,666 find_def var='H_batch' stmt=$558binary_subscr.9 = getitem(value=H_batch, index=j, fn=<built-in function getitem>)
DEBUG 2022-02-07 18:03:05,666 find_def_from_top label 542
DEBUG 2022-02-07 18:03:05,666 idom 540 from label 542
DEBUG 2022-02-07 18:03:05,666 find_def_from_bottom label 540
DEBUG 2022-02-07 18:03:05,666 find_def_from_top label 540
DEBUG 2022-02-07 18:03:05,666 idom 526 from label 540
DEBUG 2022-02-07 18:03:05,666 find_def_from_bottom label 526
DEBUG 2022-02-07 18:03:05,666 find_def_from_top label 526
DEBUG 2022-02-07 18:03:05,668 idom 520 from label 526
DEBUG 2022-02-07 18:03:05,668 find_def_from_bottom label 520
DEBUG 2022-02-07 18:03:05,668 find_def_from_top label 520
DEBUG 2022-02-07 18:03:05,668 idom 158 from label 520
DEBUG 2022-02-07 18:03:05,668 find_def_from_bottom label 158
DEBUG 2022-02-07 18:03:05,668 replaced with: $558binary_subscr.9 = getitem(value=H_batch.2, index=j, fn=<built-in function getitem>)
DEBUG 2022-02-07 18:03:05,668 on stmt: $const560.10 = const(float, 0.5)
DEBUG 2022-02-07 18:03:05,668 on stmt: $const564.12 = const(int, 2)
DEBUG 2022-02-07 18:03:05,668 on stmt: $566binary_floor_divide.13 = x // $const564.12
DEBUG 2022-02-07 18:03:05,668 on stmt: $568binary_power.14 = $const560.10 ** $566binary_floor_divide.13
DEBUG 2022-02-07 18:03:05,668 on stmt: $570inplace_multiply.15 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=$558binary_subscr.9, rhs=$568binary_power.14, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-07 18:03:05,668 on stmt: H_batch[j] = $570inplace_multiply.15
DEBUG 2022-02-07 18:03:05,668 find_def var='H_batch' stmt=H_batch[j] = $570inplace_multiply.15
DEBUG 2022-02-07 18:03:05,668 find_def_from_top label 542
DEBUG 2022-02-07 18:03:05,668 idom 540 from label 542
DEBUG 2022-02-07 18:03:05,668 find_def_from_bottom label 540
DEBUG 2022-02-07 18:03:05,668 find_def_from_top label 540
DEBUG 2022-02-07 18:03:05,668 idom 526 from label 540
DEBUG 2022-02-07 18:03:05,668 find_def_from_bottom label 526
DEBUG 2022-02-07 18:03:05,668 find_def_from_top label 526
DEBUG 2022-02-07 18:03:05,668 idom 520 from label 526
DEBUG 2022-02-07 18:03:05,668 find_def_from_bottom label 520
DEBUG 2022-02-07 18:03:05,668 find_def_from_top label 520
DEBUG 2022-02-07 18:03:05,668 idom 158 from label 520
DEBUG 2022-02-07 18:03:05,668 find_def_from_bottom label 158
DEBUG 2022-02-07 18:03:05,668 replaced with: H_batch.2[j] = $570inplace_multiply.15
DEBUG 2022-02-07 18:03:05,668 on stmt: jump 540
DEBUG 2022-02-07 18:03:05,668 ==== SSA block rewrite pass on 580
DEBUG 2022-02-07 18:03:05,668 Running <numba.core.ssa._FixSSAVars object at 0x00000196AEF27BE0>
DEBUG 2022-02-07 18:03:05,668 on stmt: $582return_value.1 = cast(value=H_batch)
DEBUG 2022-02-07 18:03:05,668 find_def var='H_batch' stmt=$582return_value.1 = cast(value=H_batch)
DEBUG 2022-02-07 18:03:05,668 find_def_from_top label 580
DEBUG 2022-02-07 18:03:05,668 idom 520 from label 580
DEBUG 2022-02-07 18:03:05,668 find_def_from_bottom label 520
DEBUG 2022-02-07 18:03:05,668 find_def_from_top label 520
DEBUG 2022-02-07 18:03:05,668 idom 158 from label 520
DEBUG 2022-02-07 18:03:05,676 find_def_from_bottom label 158
DEBUG 2022-02-07 18:03:05,676 replaced with: $582return_value.1 = cast(value=H_batch.2)
DEBUG 2022-02-07 18:03:05,676 on stmt: return $582return_value.1
DEBUG 2022-02-07 18:03:05,676 Fix SSA violator on var j
DEBUG 2022-02-07 18:03:05,676 ==== SSA block rewrite pass on 0
DEBUG 2022-02-07 18:03:05,676 Running <numba.core.ssa._FreshVarHandler object at 0x00000196AEF57DC0>
DEBUG 2022-02-07 18:03:05,676 on stmt: A = arg(0, name=A)
DEBUG 2022-02-07 18:03:05,676 on stmt: D = arg(1, name=D)
DEBUG 2022-02-07 18:03:05,678 on stmt: fixed_edge_reps = arg(2, name=fixed_edge_reps)
DEBUG 2022-02-07 18:03:05,678 on stmt: batch_max = arg(3, name=batch_max)
DEBUG 2022-02-07 18:03:05,678 on stmt: odd_cutoff = arg(4, name=odd_cutoff)
DEBUG 2022-02-07 18:03:05,678 on stmt: glynn = arg(5, name=glynn)
DEBUG 2022-02-07 18:03:05,678 on stmt: $const4.1 = const(int, 0)
DEBUG 2022-02-07 18:03:05,678 on stmt: oddloop = static_getitem(value=D, index=0, index_var=$const4.1, fn=<built-in function getitem>)
DEBUG 2022-02-07 18:03:05,678 on stmt: $const12.4 = const(int, 0)
DEBUG 2022-02-07 18:03:05,678 on stmt: $const14.5 = const(NoneType, None)
DEBUG 2022-02-07 18:03:05,678 on stmt: $const16.6 = const(NoneType, None)
DEBUG 2022-02-07 18:03:05,678 on stmt: $18build_slice.7 = global(slice: <class 'slice'>)
DEBUG 2022-02-07 18:03:05,678 on stmt: $18build_slice.8 = call $18build_slice.7($const14.5, $const16.6, func=$18build_slice.7, args=(Var($const14.5, loop_hafnian_batch.py:21), Var($const16.6, loop_hafnian_batch.py:21)), kws=(), vararg=None, target=None)
DEBUG 2022-02-07 18:03:05,678 on stmt: $20build_tuple.9 = build_tuple(items=[Var($const12.4, loop_hafnian_batch.py:21), Var($18build_slice.8, loop_hafnian_batch.py:21)])
DEBUG 2022-02-07 18:03:05,678 on stmt: oddV = static_getitem(value=A, index=(0, slice(None, None, None)), index_var=$20build_tuple.9, fn=<built-in function getitem>)
DEBUG 2022-02-07 18:03:05,678 on stmt: $28load_attr.12 = getattr(value=A, attr=shape)
DEBUG 2022-02-07 18:03:05,678 on stmt: $const30.13 = const(int, 0)
DEBUG 2022-02-07 18:03:05,678 on stmt: n = static_getitem(value=$28load_attr.12, index=0, index_var=$const30.13, fn=<built-in function getitem>)
DEBUG 2022-02-07 18:03:05,678 on stmt: $const36.15 = const(int, 2)
DEBUG 2022-02-07 18:03:05,678 on stmt: $40load_method.17 = getattr(value=fixed_edge_reps, attr=sum)
DEBUG 2022-02-07 18:03:05,678 on stmt: $42call_method.18 = call $40load_method.17(func=$40load_method.17, args=[], kws=(), vararg=None, target=None)
DEBUG 2022-02-07 18:03:05,678 on stmt: N_fixed = $const36.15 * $42call_method.18
DEBUG 2022-02-07 18:03:05,678 on stmt: $const50.21 = const(int, 2)
DEBUG 2022-02-07 18:03:05,678 on stmt: $54binary_multiply.23 = $const50.21 * batch_max
DEBUG 2022-02-07 18:03:05,678 on stmt: $56binary_add.24 = N_fixed + $54binary_multiply.23
DEBUG 2022-02-07 18:03:05,678 on stmt: N_max = $56binary_add.24 + odd_cutoff
DEBUG 2022-02-07 18:03:05,678 on stmt: $64load_global.27 = global(np: <module 'numpy' from 'C:\\Users\\zl4821\\Anaconda3\\envs\\GBS\\lib\\site-packages\\numpy\\__init__.py'>)
DEBUG 2022-02-07 18:03:05,678 on stmt: $66load_method.28 = getattr(value=$64load_global.27, attr=concatenate)
DEBUG 2022-02-07 18:03:05,678 on stmt: $68load_global.29 = global(np: <module 'numpy' from 'C:\\Users\\zl4821\\Anaconda3\\envs\\GBS\\lib\\site-packages\\numpy\\__init__.py'>)
DEBUG 2022-02-07 18:03:05,678 on stmt: $70load_method.30 = getattr(value=$68load_global.29, attr=array)
DEBUG 2022-02-07 18:03:05,678 on stmt: $74build_list.32 = build_list(items=[Var(batch_max, loop_hafnian_batch.py:20)])
DEBUG 2022-02-07 18:03:05,678 on stmt: $76call_method.33 = call $70load_method.30($74build_list.32, func=$70load_method.30, args=[Var($74build_list.32, loop_hafnian_batch.py:28)], kws=(), vararg=None, target=None)
DEBUG 2022-02-07 18:03:05,678 on stmt: $80build_tuple.35 = build_tuple(items=[Var($76call_method.33, loop_hafnian_batch.py:28), Var(fixed_edge_reps, loop_hafnian_batch.py:20)])
DEBUG 2022-02-07 18:03:05,686 on stmt: edge_reps = call $66load_method.28($80build_tuple.35, func=$66load_method.28, args=[Var($80build_tuple.35, loop_hafnian_batch.py:28)], kws=(), vararg=None, target=None)
DEBUG 2022-02-07 18:03:05,686 on stmt: $86load_global.37 = global(np: <module 'numpy' from 'C:\\Users\\zl4821\\Anaconda3\\envs\\GBS\\lib\\site-packages\\numpy\\__init__.py'>)
DEBUG 2022-02-07 18:03:05,686 on stmt: $88load_method.38 = getattr(value=$86load_global.37, attr=prod)
DEBUG 2022-02-07 18:03:05,686 on stmt: $const92.40 = const(int, 1)
DEBUG 2022-02-07 18:03:05,686 on stmt: $94binary_add.41 = edge_reps + $const92.40
DEBUG 2022-02-07 18:03:05,686 on stmt: steps = call $88load_method.38($94binary_add.41, func=$88load_method.38, args=[Var($94binary_add.41, loop_hafnian_batch.py:29)], kws=(), vararg=None, target=None)
DEBUG 2022-02-07 18:03:05,686 on stmt: $102load_method.44 = getattr(value=edge_reps, attr=max)
DEBUG 2022-02-07 18:03:05,686 on stmt: $104call_method.45 = call $102load_method.44(func=$102load_method.44, args=[], kws=(), vararg=None, target=None)
DEBUG 2022-02-07 18:03:05,686 on stmt: max_binom = $104call_method.45 + odd_cutoff
DEBUG 2022-02-07 18:03:05,688 on stmt: $112load_global.48 = global(precompute_binoms: CPUDispatcher(<function precompute_binoms at 0x00000196AE6F6CA0>))
DEBUG 2022-02-07 18:03:05,688 on stmt: binoms = call $112load_global.48(max_binom, func=$112load_global.48, args=[Var(max_binom, loop_hafnian_batch.py:31)], kws=(), vararg=None, target=None)
DEBUG 2022-02-07 18:03:05,688 on stmt: $120load_global.51 = global(np: <module 'numpy' from 'C:\\Users\\zl4821\\Anaconda3\\envs\\GBS\\lib\\site-packages\\numpy\\__init__.py'>)
DEBUG 2022-02-07 18:03:05,688 on stmt: $122load_attr.52 = getattr(value=$120load_global.51, attr=zeros)
DEBUG 2022-02-07 18:03:05,688 on stmt: $const124.53 = const(int, 2)
DEBUG 2022-02-07 18:03:05,688 on stmt: $128binary_multiply.55 = $const124.53 * batch_max
DEBUG 2022-02-07 18:03:05,688 on stmt: $132binary_add.57 = $128binary_multiply.55 + odd_cutoff
DEBUG 2022-02-07 18:03:05,688 on stmt: $const134.58 = const(int, 1)
DEBUG 2022-02-07 18:03:05,688 on stmt: $136binary_add.59 = $132binary_add.57 + $const134.58
DEBUG 2022-02-07 18:03:05,688 on stmt: $138load_global.60 = global(np: <module 'numpy' from 'C:\\Users\\zl4821\\Anaconda3\\envs\\GBS\\lib\\site-packages\\numpy\\__init__.py'>)
DEBUG 2022-02-07 18:03:05,688 on stmt: $140load_attr.61 = getattr(value=$138load_global.60, attr=complex128)
DEBUG 2022-02-07 18:03:05,688 on stmt: H_batch = call $122load_attr.52($136binary_add.59, func=$122load_attr.52, args=[Var($136binary_add.59, loop_hafnian_batch.py:34)], kws=[('dtype', Var($140load_attr.61, loop_hafnian_batch.py:34))], vararg=None, target=None)
DEBUG 2022-02-07 18:03:05,688 on stmt: $148load_global.64 = global(numba: <module 'numba' from 'C:\\Users\\zl4821\\Anaconda3\\envs\\GBS\\lib\\site-packages\\numba\\__init__.py'>)
DEBUG 2022-02-07 18:03:05,688 on stmt: $150load_method.65 = getattr(value=$148load_global.64, attr=prange)
DEBUG 2022-02-07 18:03:05,688 on stmt: $154call_method.67 = call $150load_method.65(steps, func=$150load_method.65, args=[Var(steps, loop_hafnian_batch.py:29)], kws=(), vararg=None, target=None)
DEBUG 2022-02-07 18:03:05,688 on stmt: $156get_iter.68 = getiter(value=$154call_method.67)
DEBUG 2022-02-07 18:03:05,688 on stmt: $phi158.0 = $156get_iter.68
DEBUG 2022-02-07 18:03:05,688 on stmt: jump 158
DEBUG 2022-02-07 18:03:05,688 ==== SSA block rewrite pass on 158
DEBUG 2022-02-07 18:03:05,688 Running <numba.core.ssa._FreshVarHandler object at 0x00000196AEF57DC0>
DEBUG 2022-02-07 18:03:05,688 on stmt: H_batch.2 = phi(incoming_values=[Var(H_batch, loop_hafnian_batch.py:34), Var(H_batch.1, loop_hafnian_batch.py:69)], incoming_blocks=[0, 510])
DEBUG 2022-02-07 18:03:05,688 on stmt: $158for_iter.1 = iternext(value=$phi158.0)
DEBUG 2022-02-07 18:03:05,688 on stmt: $158for_iter.2 = pair_first(value=$158for_iter.1)
DEBUG 2022-02-07 18:03:05,688 on stmt: $158for_iter.3 = pair_second(value=$158for_iter.1)
DEBUG 2022-02-07 18:03:05,688 on stmt: $phi162.1 = $158for_iter.2
DEBUG 2022-02-07 18:03:05,688 on stmt: branch $158for_iter.3, 162, 520
DEBUG 2022-02-07 18:03:05,688 ==== SSA block rewrite pass on 162
DEBUG 2022-02-07 18:03:05,688 Running <numba.core.ssa._FreshVarHandler object at 0x00000196AEF57DC0>
DEBUG 2022-02-07 18:03:05,688 on stmt: j = $phi162.1
DEBUG 2022-02-07 18:03:05,688 first assign: j
DEBUG 2022-02-07 18:03:05,688 replaced with: j = $phi162.1
DEBUG 2022-02-07 18:03:05,688 on stmt: $164load_global.2 = global(np: <module 'numpy' from 'C:\\Users\\zl4821\\Anaconda3\\envs\\GBS\\lib\\site-packages\\numpy\\__init__.py'>)
DEBUG 2022-02-07 18:03:05,688 on stmt: $166load_attr.3 = getattr(value=$164load_global.2, attr=zeros)
DEBUG 2022-02-07 18:03:05,688 on stmt: $const168.4 = const(int, 2)
DEBUG 2022-02-07 18:03:05,688 on stmt: $172binary_multiply.6 = $const168.4 * batch_max
DEBUG 2022-02-07 18:03:05,688 on stmt: $176binary_add.8 = $172binary_multiply.6 + odd_cutoff
DEBUG 2022-02-07 18:03:05,696 on stmt: $const178.9 = const(int, 1)
DEBUG 2022-02-07 18:03:05,696 on stmt: $180binary_add.10 = $176binary_add.8 + $const178.9
DEBUG 2022-02-07 18:03:05,696 on stmt: $182load_global.11 = global(np: <module 'numpy' from 'C:\\Users\\zl4821\\Anaconda3\\envs\\GBS\\lib\\site-packages\\numpy\\__init__.py'>)
DEBUG 2022-02-07 18:03:05,696 on stmt: $184load_attr.12 = getattr(value=$182load_global.11, attr=complex128)
DEBUG 2022-02-07 18:03:05,696 on stmt: Hnew = call $166load_attr.3($180binary_add.10, func=$166load_attr.3, args=[Var($180binary_add.10, loop_hafnian_batch.py:37)], kws=[('dtype', Var($184load_attr.12, loop_hafnian_batch.py:37))], vararg=None, target=None)
DEBUG 2022-02-07 18:03:05,696 on stmt: $192load_global.15 = global(find_kept_edges: CPUDispatcher(<function find_kept_edges at 0x00000196AE71E160>))
DEBUG 2022-02-07 18:03:05,696 on stmt: kept_edges = call $192load_global.15(j, edge_reps, func=$192load_global.15, args=[Var(j, loop_hafnian_batch.py:35), Var(edge_reps, loop_hafnian_batch.py:28)], kws=(), vararg=None, target=None)
DEBUG 2022-02-07 18:03:05,698 on stmt: $204load_method.20 = getattr(value=kept_edges, attr=sum)
DEBUG 2022-02-07 18:03:05,698 on stmt: edges_sum = call $204load_method.20(func=$204load_method.20, args=[], kws=(), vararg=None, target=None)
DEBUG 2022-02-07 18:03:05,698 on stmt: binom_prod = const(float, 1.0)
DEBUG 2022-02-07 18:03:05,698 on stmt: $214load_global.23 = global(range: <class 'range'>)
DEBUG 2022-02-07 18:03:05,698 on stmt: $const216.24 = const(int, 1)
DEBUG 2022-02-07 18:03:05,698 on stmt: $const220.26 = const(int, 2)
DEBUG 2022-02-07 18:03:05,698 on stmt: $222binary_floor_divide.27 = n // $const220.26
DEBUG 2022-02-07 18:03:05,698 on stmt: $224call_function.28 = call $214load_global.23($const216.24, $222binary_floor_divide.27, func=$214load_global.23, args=[Var($const216.24, loop_hafnian_batch.py:43), Var($222binary_floor_divide.27, loop_hafnian_batch.py:43)], kws=(), vararg=None, target=None)
DEBUG 2022-02-07 18:03:05,698 on stmt: $226get_iter.29 = getiter(value=$224call_function.28)
DEBUG 2022-02-07 18:03:05,698 on stmt: $phi228.1 = $226get_iter.29
DEBUG 2022-02-07 18:03:05,698 on stmt: jump 228
DEBUG 2022-02-07 18:03:05,698 ==== SSA block rewrite pass on 228
DEBUG 2022-02-07 18:03:05,698 Running <numba.core.ssa._FreshVarHandler object at 0x00000196AEF57DC0>
DEBUG 2022-02-07 18:03:05,698 on stmt: binom_prod.2 = phi(incoming_values=[Var(binom_prod, loop_hafnian_batch.py:42), Var(binom_prod.1, loop_hafnian_batch.py:44)], incoming_blocks=[162, 230])
DEBUG 2022-02-07 18:03:05,698 on stmt: $228for_iter.2 = iternext(value=$phi228.1)
DEBUG 2022-02-07 18:03:05,698 on stmt: $228for_iter.3 = pair_first(value=$228for_iter.2)
DEBUG 2022-02-07 18:03:05,698 on stmt: $228for_iter.4 = pair_second(value=$228for_iter.2)
DEBUG 2022-02-07 18:03:05,698 on stmt: $phi230.2 = $228for_iter.3
DEBUG 2022-02-07 18:03:05,698 on stmt: branch $228for_iter.4, 230, 258
DEBUG 2022-02-07 18:03:05,698 ==== SSA block rewrite pass on 230
DEBUG 2022-02-07 18:03:05,698 Running <numba.core.ssa._FreshVarHandler object at 0x00000196AEF57DC0>
DEBUG 2022-02-07 18:03:05,698 on stmt: i = $phi230.2
DEBUG 2022-02-07 18:03:05,698 on stmt: $240binary_subscr.7 = getitem(value=edge_reps, index=i, fn=<built-in function getitem>)
DEBUG 2022-02-07 18:03:05,698 on stmt: $246binary_subscr.10 = getitem(value=kept_edges, index=i, fn=<built-in function getitem>)
DEBUG 2022-02-07 18:03:05,698 on stmt: $248build_tuple.11 = build_tuple(items=[Var($240binary_subscr.7, loop_hafnian_batch.py:44), Var($246binary_subscr.10, loop_hafnian_batch.py:44)])
DEBUG 2022-02-07 18:03:05,698 on stmt: $250binary_subscr.12 = getitem(value=binoms, index=$248build_tuple.11, fn=<built-in function getitem>)
DEBUG 2022-02-07 18:03:05,698 on stmt: $252inplace_multiply.13 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=binom_prod.2, rhs=$250binary_subscr.12, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-07 18:03:05,698 on stmt: binom_prod.1 = $252inplace_multiply.13
DEBUG 2022-02-07 18:03:05,698 on stmt: jump 228
DEBUG 2022-02-07 18:03:05,698 ==== SSA block rewrite pass on 258
DEBUG 2022-02-07 18:03:05,698 Running <numba.core.ssa._FreshVarHandler object at 0x00000196AEF57DC0>
DEBUG 2022-02-07 18:03:05,698 on stmt: bool260 = global(bool: <class 'bool'>)
DEBUG 2022-02-07 18:03:05,698 on stmt: $260pred = call bool260(glynn, func=bool260, args=(Var(glynn, loop_hafnian_batch.py:20),), kws=(), vararg=None, target=None)
DEBUG 2022-02-07 18:03:05,698 on stmt: branch $260pred, 264, 278
DEBUG 2022-02-07 18:03:05,698 ==== SSA block rewrite pass on 264
DEBUG 2022-02-07 18:03:05,698 Running <numba.core.ssa._FreshVarHandler object at 0x00000196AEF57DC0>
DEBUG 2022-02-07 18:03:05,698 on stmt: $const264.1 = const(int, 2)
DEBUG 2022-02-07 18:03:05,698 on stmt: $268binary_multiply.3 = $const264.1 * kept_edges
DEBUG 2022-02-07 18:03:05,698 on stmt: delta = $268binary_multiply.3 - edge_reps
DEBUG 2022-02-07 18:03:05,706 on stmt: jump 282
DEBUG 2022-02-07 18:03:05,706 ==== SSA block rewrite pass on 278
DEBUG 2022-02-07 18:03:05,706 Running <numba.core.ssa._FreshVarHandler object at 0x00000196AEF57DC0>
DEBUG 2022-02-07 18:03:05,706 on stmt: delta.1 = kept_edges
DEBUG 2022-02-07 18:03:05,706 on stmt: jump 282
DEBUG 2022-02-07 18:03:05,706 ==== SSA block rewrite pass on 282
DEBUG 2022-02-07 18:03:05,706 Running <numba.core.ssa._FreshVarHandler object at 0x00000196AEF57DC0>
DEBUG 2022-02-07 18:03:05,708 on stmt: delta.2 = phi(incoming_values=[Var(delta, loop_hafnian_batch.py:47), Var(delta.1, loop_hafnian_batch.py:49)], incoming_blocks=[264, 278])
DEBUG 2022-02-07 18:03:05,708 on stmt: $282load_global.1 = global(get_submatrices: CPUDispatcher(<function get_submatrices at 0x00000196AE71E670>))
DEBUG 2022-02-07 18:03:05,708 on stmt: $292call_function.6 = call $282load_global.1(delta.2, A, D, oddV, func=$282load_global.1, args=[Var(delta.2, loop_hafnian_batch.py:51), Var(A, loop_hafnian_batch.py:20), Var(D, loop_hafnian_batch.py:20), Var(oddV, loop_hafnian_batch.py:21)], kws=(), vararg=None, target=None)
DEBUG 2022-02-07 18:03:05,708 on stmt: $294unpack_sequence.11 = exhaust_iter(value=$292call_function.6, count=4)
DEBUG 2022-02-07 18:03:05,708 on stmt: $294unpack_sequence.7 = static_getitem(value=$294unpack_sequence.11, index=0, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-02-07 18:03:05,708 on stmt: $294unpack_sequence.8 = static_getitem(value=$294unpack_sequence.11, index=1, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-02-07 18:03:05,708 on stmt: $294unpack_sequence.9 = static_getitem(value=$294unpack_sequence.11, index=2, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-02-07 18:03:05,708 on stmt: $294unpack_sequence.10 = static_getitem(value=$294unpack_sequence.11, index=3, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-02-07 18:03:05,708 on stmt: AX_S = $294unpack_sequence.7
DEBUG 2022-02-07 18:03:05,708 on stmt: XD_S = $294unpack_sequence.8
DEBUG 2022-02-07 18:03:05,708 on stmt: D_S = $294unpack_sequence.9
DEBUG 2022-02-07 18:03:05,708 on stmt: oddVX_S = $294unpack_sequence.10
DEBUG 2022-02-07 18:03:05,708 on stmt: $304load_global.12 = global(eigvals: CPUDispatcher(<function eigvals at 0x00000196AE71EB80>))
DEBUG 2022-02-07 18:03:05,708 on stmt: E = call $304load_global.12(AX_S, func=$304load_global.12, args=[Var(AX_S, loop_hafnian_batch.py:51)], kws=(), vararg=None, target=None)
DEBUG 2022-02-07 18:03:05,708 on stmt: $312load_global.15 = global(f_loop: CPUDispatcher(<function f_loop at 0x00000196AE71E310>))
DEBUG 2022-02-07 18:03:05,708 on stmt: f_even = call $312load_global.15(E, AX_S, XD_S, D_S, N_max, func=$312load_global.15, args=[Var(E, loop_hafnian_batch.py:53), Var(AX_S, loop_hafnian_batch.py:51), Var(XD_S, loop_hafnian_batch.py:51), Var(D_S, loop_hafnian_batch.py:51), Var(N_max, loop_hafnian_batch.py:26)], kws=(), vararg=None, target=None)
DEBUG 2022-02-07 18:03:05,708 on stmt: $328load_global.22 = global(f_loop_odd: CPUDispatcher(<function f_loop_odd at 0x00000196AE71E4C0>))
DEBUG 2022-02-07 18:03:05,708 on stmt: f_odd = call $328load_global.22(E, AX_S, XD_S, D_S, N_max, oddloop, oddVX_S, func=$328load_global.22, args=[Var(E, loop_hafnian_batch.py:53), Var(AX_S, loop_hafnian_batch.py:51), Var(XD_S, loop_hafnian_batch.py:51), Var(D_S, loop_hafnian_batch.py:51), Var(N_max, loop_hafnian_batch.py:26), Var(oddloop, loop_hafnian_batch.py:20), Var(oddVX_S, loop_hafnian_batch.py:51)], kws=(), vararg=None, target=None)
DEBUG 2022-02-07 18:03:05,708 on stmt: $348load_global.31 = global(range: <class 'range'>)
DEBUG 2022-02-07 18:03:05,708 on stmt: $const350.32 = const(int, 2)
DEBUG 2022-02-07 18:03:05,708 on stmt: $const354.34 = const(int, 0)
DEBUG 2022-02-07 18:03:05,708 on stmt: $356binary_subscr.35 = static_getitem(value=kept_edges, index=0, index_var=$const354.34, fn=<built-in function getitem>)
DEBUG 2022-02-07 18:03:05,708 on stmt: $358binary_multiply.36 = $const350.32 * $356binary_subscr.35
DEBUG 2022-02-07 18:03:05,708 on stmt: $const360.37 = const(int, 2)
DEBUG 2022-02-07 18:03:05,708 on stmt: $364binary_multiply.39 = $const360.37 * batch_max
DEBUG 2022-02-07 18:03:05,708 on stmt: $368binary_add.41 = $364binary_multiply.39 + odd_cutoff
DEBUG 2022-02-07 18:03:05,708 on stmt: $const370.42 = const(int, 1)
DEBUG 2022-02-07 18:03:05,708 on stmt: $372binary_add.43 = $368binary_add.41 + $const370.42
DEBUG 2022-02-07 18:03:05,708 on stmt: $374call_function.44 = call $348load_global.31($358binary_multiply.36, $372binary_add.43, func=$348load_global.31, args=[Var($358binary_multiply.36, loop_hafnian_batch.py:58), Var($372binary_add.43, loop_hafnian_batch.py:58)], kws=(), vararg=None, target=None)
DEBUG 2022-02-07 18:03:05,708 on stmt: $376get_iter.45 = getiter(value=$374call_function.44)
DEBUG 2022-02-07 18:03:05,708 on stmt: $phi378.1 = $376get_iter.45
DEBUG 2022-02-07 18:03:05,708 on stmt: jump 378
DEBUG 2022-02-07 18:03:05,708 ==== SSA block rewrite pass on 378
DEBUG 2022-02-07 18:03:05,708 Running <numba.core.ssa._FreshVarHandler object at 0x00000196AEF57DC0>
DEBUG 2022-02-07 18:03:05,708 on stmt: $378for_iter.2 = iternext(value=$phi378.1)
DEBUG 2022-02-07 18:03:05,708 on stmt: $378for_iter.3 = pair_first(value=$378for_iter.2)
DEBUG 2022-02-07 18:03:05,708 on stmt: $378for_iter.4 = pair_second(value=$378for_iter.2)
DEBUG 2022-02-07 18:03:05,708 on stmt: $phi380.2 = $378for_iter.3
DEBUG 2022-02-07 18:03:05,716 on stmt: branch $378for_iter.4, 380, 510
DEBUG 2022-02-07 18:03:05,716 ==== SSA block rewrite pass on 380
DEBUG 2022-02-07 18:03:05,716 Running <numba.core.ssa._FreshVarHandler object at 0x00000196AEF57DC0>
DEBUG 2022-02-07 18:03:05,716 on stmt: N_det = $phi380.2
DEBUG 2022-02-07 18:03:05,716 on stmt: N = N_fixed + N_det
DEBUG 2022-02-07 18:03:05,716 on stmt: $const390.6 = const(float, -1.0)
DEBUG 2022-02-07 18:03:05,716 on stmt: $const394.8 = const(int, 2)
DEBUG 2022-02-07 18:03:05,716 on stmt: $396binary_floor_divide.9 = N // $const394.8
DEBUG 2022-02-07 18:03:05,716 on stmt: $400binary_subtract.11 = $396binary_floor_divide.9 - edges_sum
DEBUG 2022-02-07 18:03:05,716 on stmt: plus_minus = $const390.6 ** $400binary_subtract.11
DEBUG 2022-02-07 18:03:05,716 on stmt: $const410.15 = const(int, 2)
DEBUG 2022-02-07 18:03:05,716 on stmt: $412binary_floor_divide.16 = N_det // $const410.15
DEBUG 2022-02-07 18:03:05,716 on stmt: $const416.18 = const(int, 0)
DEBUG 2022-02-07 18:03:05,716 on stmt: $418binary_subscr.19 = static_getitem(value=kept_edges, index=0, index_var=$const416.18, fn=<built-in function getitem>)
DEBUG 2022-02-07 18:03:05,716 on stmt: $420build_tuple.20 = build_tuple(items=[Var($412binary_floor_divide.16, loop_hafnian_batch.py:62), Var($418binary_subscr.19, loop_hafnian_batch.py:62)])
DEBUG 2022-02-07 18:03:05,716 on stmt: $422binary_subscr.21 = getitem(value=binoms, index=$420build_tuple.20, fn=<built-in function getitem>)
DEBUG 2022-02-07 18:03:05,716 on stmt: n_det_binom_prod = $422binary_subscr.21 * binom_prod.2
DEBUG 2022-02-07 18:03:05,716 on stmt: $const432.25 = const(int, 2)
DEBUG 2022-02-07 18:03:05,716 on stmt: $434binary_modulo.26 = N_det % $const432.25
DEBUG 2022-02-07 18:03:05,716 on stmt: $const436.27 = const(int, 0)
DEBUG 2022-02-07 18:03:05,716 on stmt: $438compare_op.28 = $434binary_modulo.26 == $const436.27
DEBUG 2022-02-07 18:03:05,716 on stmt: bool440 = global(bool: <class 'bool'>)
DEBUG 2022-02-07 18:03:05,716 on stmt: $440pred = call bool440($438compare_op.28, func=bool440, args=(Var($438compare_op.28, loop_hafnian_batch.py:64),), kws=(), vararg=None, target=None)
DEBUG 2022-02-07 18:03:05,716 on stmt: branch $440pred, 444, 478
DEBUG 2022-02-07 18:03:05,716 ==== SSA block rewrite pass on 444
DEBUG 2022-02-07 18:03:05,716 Running <numba.core.ssa._FreshVarHandler object at 0x00000196AEF57DC0>
DEBUG 2022-02-07 18:03:05,716 on stmt: $450binary_subscr.6 = getitem(value=Hnew, index=N_det, fn=<built-in function getitem>)
DEBUG 2022-02-07 18:03:05,716 on stmt: $456binary_multiply.9 = n_det_binom_prod * plus_minus
DEBUG 2022-02-07 18:03:05,716 on stmt: $const462.12 = const(int, 2)
DEBUG 2022-02-07 18:03:05,716 on stmt: $464binary_floor_divide.13 = N // $const462.12
DEBUG 2022-02-07 18:03:05,716 on stmt: $466binary_subscr.14 = getitem(value=f_even, index=$464binary_floor_divide.13, fn=<built-in function getitem>)
DEBUG 2022-02-07 18:03:05,716 on stmt: $468binary_multiply.15 = $456binary_multiply.9 * $466binary_subscr.14
DEBUG 2022-02-07 18:03:05,716 on stmt: $470inplace_add.16 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$450binary_subscr.6, rhs=$468binary_multiply.15, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-07 18:03:05,716 on stmt: Hnew[N_det] = $470inplace_add.16
DEBUG 2022-02-07 18:03:05,716 on stmt: jump 506
DEBUG 2022-02-07 18:03:05,716 ==== SSA block rewrite pass on 478
DEBUG 2022-02-07 18:03:05,716 Running <numba.core.ssa._FreshVarHandler object at 0x00000196AEF57DC0>
DEBUG 2022-02-07 18:03:05,716 on stmt: $484binary_subscr.6 = getitem(value=Hnew, index=N_det, fn=<built-in function getitem>)
DEBUG 2022-02-07 18:03:05,716 on stmt: $490binary_multiply.9 = n_det_binom_prod * plus_minus
DEBUG 2022-02-07 18:03:05,716 on stmt: $496binary_subscr.12 = getitem(value=f_odd, index=N, fn=<built-in function getitem>)
DEBUG 2022-02-07 18:03:05,716 on stmt: $498binary_multiply.13 = $490binary_multiply.9 * $496binary_subscr.12
DEBUG 2022-02-07 18:03:05,716 on stmt: $500inplace_add.14 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$484binary_subscr.6, rhs=$498binary_multiply.13, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-07 18:03:05,716 on stmt: Hnew[N_det] = $500inplace_add.14
DEBUG 2022-02-07 18:03:05,716 on stmt: jump 506
DEBUG 2022-02-07 18:03:05,716 ==== SSA block rewrite pass on 506
DEBUG 2022-02-07 18:03:05,716 Running <numba.core.ssa._FreshVarHandler object at 0x00000196AEF57DC0>
DEBUG 2022-02-07 18:03:05,716 on stmt: jump 378
DEBUG 2022-02-07 18:03:05,726 ==== SSA block rewrite pass on 510
DEBUG 2022-02-07 18:03:05,726 Running <numba.core.ssa._FreshVarHandler object at 0x00000196AEF57DC0>
DEBUG 2022-02-07 18:03:05,726 on stmt: $514inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=H_batch.2, rhs=Hnew, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-07 18:03:05,726 on stmt: H_batch.1 = $514inplace_add.3
DEBUG 2022-02-07 18:03:05,726 on stmt: jump 158
DEBUG 2022-02-07 18:03:05,726 ==== SSA block rewrite pass on 520
DEBUG 2022-02-07 18:03:05,726 Running <numba.core.ssa._FreshVarHandler object at 0x00000196AEF57DC0>
DEBUG 2022-02-07 18:03:05,726 on stmt: bool522 = global(bool: <class 'bool'>)
DEBUG 2022-02-07 18:03:05,726 on stmt: $522pred = call bool522(glynn, func=bool522, args=(Var(glynn, loop_hafnian_batch.py:20),), kws=(), vararg=None, target=None)
DEBUG 2022-02-07 18:03:05,726 on stmt: branch $522pred, 526, 580
DEBUG 2022-02-07 18:03:05,726 ==== SSA block rewrite pass on 526
DEBUG 2022-02-07 18:03:05,726 Running <numba.core.ssa._FreshVarHandler object at 0x00000196AEF57DC0>
DEBUG 2022-02-07 18:03:05,728 on stmt: $526load_global.0 = global(range: <class 'range'>)
DEBUG 2022-02-07 18:03:05,728 on stmt: $530load_attr.2 = getattr(value=H_batch.2, attr=shape)
DEBUG 2022-02-07 18:03:05,728 on stmt: $const532.3 = const(int, 0)
DEBUG 2022-02-07 18:03:05,728 on stmt: $534binary_subscr.4 = static_getitem(value=$530load_attr.2, index=0, index_var=$const532.3, fn=<built-in function getitem>)
DEBUG 2022-02-07 18:03:05,728 on stmt: $536call_function.5 = call $526load_global.0($534binary_subscr.4, func=$526load_global.0, args=[Var($534binary_subscr.4, loop_hafnian_batch.py:72)], kws=(), vararg=None, target=None)
DEBUG 2022-02-07 18:03:05,728 on stmt: $538get_iter.6 = getiter(value=$536call_function.5)
DEBUG 2022-02-07 18:03:05,728 on stmt: $phi540.0 = $538get_iter.6
DEBUG 2022-02-07 18:03:05,728 on stmt: jump 540
DEBUG 2022-02-07 18:03:05,728 ==== SSA block rewrite pass on 540
DEBUG 2022-02-07 18:03:05,728 Running <numba.core.ssa._FreshVarHandler object at 0x00000196AEF57DC0>
DEBUG 2022-02-07 18:03:05,728 on stmt: $540for_iter.1 = iternext(value=$phi540.0)
DEBUG 2022-02-07 18:03:05,728 on stmt: $540for_iter.2 = pair_first(value=$540for_iter.1)
DEBUG 2022-02-07 18:03:05,728 on stmt: $540for_iter.3 = pair_second(value=$540for_iter.1)
DEBUG 2022-02-07 18:03:05,728 on stmt: $phi542.1 = $540for_iter.2
DEBUG 2022-02-07 18:03:05,728 on stmt: branch $540for_iter.3, 542, 580
DEBUG 2022-02-07 18:03:05,728 ==== SSA block rewrite pass on 542
DEBUG 2022-02-07 18:03:05,728 Running <numba.core.ssa._FreshVarHandler object at 0x00000196AEF57DC0>
DEBUG 2022-02-07 18:03:05,728 on stmt: j = $phi542.1
DEBUG 2022-02-07 18:03:05,728 replaced with: j.1 = $phi542.1
DEBUG 2022-02-07 18:03:05,728 on stmt: x = N_fixed + j
DEBUG 2022-02-07 18:03:05,728 on stmt: $558binary_subscr.9 = getitem(value=H_batch.2, index=j, fn=<built-in function getitem>)
DEBUG 2022-02-07 18:03:05,728 on stmt: $const560.10 = const(float, 0.5)
DEBUG 2022-02-07 18:03:05,728 on stmt: $const564.12 = const(int, 2)
DEBUG 2022-02-07 18:03:05,728 on stmt: $566binary_floor_divide.13 = x // $const564.12
DEBUG 2022-02-07 18:03:05,728 on stmt: $568binary_power.14 = $const560.10 ** $566binary_floor_divide.13
DEBUG 2022-02-07 18:03:05,728 on stmt: $570inplace_multiply.15 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=$558binary_subscr.9, rhs=$568binary_power.14, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-07 18:03:05,728 on stmt: H_batch.2[j] = $570inplace_multiply.15
DEBUG 2022-02-07 18:03:05,728 on stmt: jump 540
DEBUG 2022-02-07 18:03:05,728 ==== SSA block rewrite pass on 580
DEBUG 2022-02-07 18:03:05,728 Running <numba.core.ssa._FreshVarHandler object at 0x00000196AEF57DC0>
DEBUG 2022-02-07 18:03:05,728 on stmt: $582return_value.1 = cast(value=H_batch.2)
DEBUG 2022-02-07 18:03:05,728 on stmt: return $582return_value.1
DEBUG 2022-02-07 18:03:05,728 Replaced assignments: defaultdict(<class 'list'>,
            {162: [<numba.core.ir.Assign object at 0x00000196AEF57940>],
             542: [<numba.core.ir.Assign object at 0x00000196AEF4E490>]})
DEBUG 2022-02-07 18:03:05,728 ==== SSA block rewrite pass on 0
DEBUG 2022-02-07 18:03:05,728 Running <numba.core.ssa._FixSSAVars object at 0x00000196AEE97A90>
DEBUG 2022-02-07 18:03:05,728 on stmt: A = arg(0, name=A)
DEBUG 2022-02-07 18:03:05,728 on stmt: D = arg(1, name=D)
DEBUG 2022-02-07 18:03:05,728 on stmt: fixed_edge_reps = arg(2, name=fixed_edge_reps)
DEBUG 2022-02-07 18:03:05,728 on stmt: batch_max = arg(3, name=batch_max)
DEBUG 2022-02-07 18:03:05,728 on stmt: odd_cutoff = arg(4, name=odd_cutoff)
DEBUG 2022-02-07 18:03:05,728 on stmt: glynn = arg(5, name=glynn)
DEBUG 2022-02-07 18:03:05,728 on stmt: $const4.1 = const(int, 0)
DEBUG 2022-02-07 18:03:05,736 on stmt: oddloop = static_getitem(value=D, index=0, index_var=$const4.1, fn=<built-in function getitem>)
DEBUG 2022-02-07 18:03:05,736 on stmt: $const12.4 = const(int, 0)
DEBUG 2022-02-07 18:03:05,736 on stmt: $const14.5 = const(NoneType, None)
DEBUG 2022-02-07 18:03:05,736 on stmt: $const16.6 = const(NoneType, None)
DEBUG 2022-02-07 18:03:05,736 on stmt: $18build_slice.7 = global(slice: <class 'slice'>)
DEBUG 2022-02-07 18:03:05,736 on stmt: $18build_slice.8 = call $18build_slice.7($const14.5, $const16.6, func=$18build_slice.7, args=(Var($const14.5, loop_hafnian_batch.py:21), Var($const16.6, loop_hafnian_batch.py:21)), kws=(), vararg=None, target=None)
DEBUG 2022-02-07 18:03:05,736 on stmt: $20build_tuple.9 = build_tuple(items=[Var($const12.4, loop_hafnian_batch.py:21), Var($18build_slice.8, loop_hafnian_batch.py:21)])
DEBUG 2022-02-07 18:03:05,736 on stmt: oddV = static_getitem(value=A, index=(0, slice(None, None, None)), index_var=$20build_tuple.9, fn=<built-in function getitem>)
DEBUG 2022-02-07 18:03:05,738 on stmt: $28load_attr.12 = getattr(value=A, attr=shape)
DEBUG 2022-02-07 18:03:05,738 on stmt: $const30.13 = const(int, 0)
DEBUG 2022-02-07 18:03:05,738 on stmt: n = static_getitem(value=$28load_attr.12, index=0, index_var=$const30.13, fn=<built-in function getitem>)
DEBUG 2022-02-07 18:03:05,738 on stmt: $const36.15 = const(int, 2)
DEBUG 2022-02-07 18:03:05,738 on stmt: $40load_method.17 = getattr(value=fixed_edge_reps, attr=sum)
DEBUG 2022-02-07 18:03:05,738 on stmt: $42call_method.18 = call $40load_method.17(func=$40load_method.17, args=[], kws=(), vararg=None, target=None)
DEBUG 2022-02-07 18:03:05,738 on stmt: N_fixed = $const36.15 * $42call_method.18
DEBUG 2022-02-07 18:03:05,738 on stmt: $const50.21 = const(int, 2)
DEBUG 2022-02-07 18:03:05,738 on stmt: $54binary_multiply.23 = $const50.21 * batch_max
DEBUG 2022-02-07 18:03:05,738 on stmt: $56binary_add.24 = N_fixed + $54binary_multiply.23
DEBUG 2022-02-07 18:03:05,738 on stmt: N_max = $56binary_add.24 + odd_cutoff
DEBUG 2022-02-07 18:03:05,738 on stmt: $64load_global.27 = global(np: <module 'numpy' from 'C:\\Users\\zl4821\\Anaconda3\\envs\\GBS\\lib\\site-packages\\numpy\\__init__.py'>)
DEBUG 2022-02-07 18:03:05,738 on stmt: $66load_method.28 = getattr(value=$64load_global.27, attr=concatenate)
DEBUG 2022-02-07 18:03:05,738 on stmt: $68load_global.29 = global(np: <module 'numpy' from 'C:\\Users\\zl4821\\Anaconda3\\envs\\GBS\\lib\\site-packages\\numpy\\__init__.py'>)
DEBUG 2022-02-07 18:03:05,738 on stmt: $70load_method.30 = getattr(value=$68load_global.29, attr=array)
DEBUG 2022-02-07 18:03:05,738 on stmt: $74build_list.32 = build_list(items=[Var(batch_max, loop_hafnian_batch.py:20)])
DEBUG 2022-02-07 18:03:05,738 on stmt: $76call_method.33 = call $70load_method.30($74build_list.32, func=$70load_method.30, args=[Var($74build_list.32, loop_hafnian_batch.py:28)], kws=(), vararg=None, target=None)
DEBUG 2022-02-07 18:03:05,738 on stmt: $80build_tuple.35 = build_tuple(items=[Var($76call_method.33, loop_hafnian_batch.py:28), Var(fixed_edge_reps, loop_hafnian_batch.py:20)])
DEBUG 2022-02-07 18:03:05,738 on stmt: edge_reps = call $66load_method.28($80build_tuple.35, func=$66load_method.28, args=[Var($80build_tuple.35, loop_hafnian_batch.py:28)], kws=(), vararg=None, target=None)
DEBUG 2022-02-07 18:03:05,738 on stmt: $86load_global.37 = global(np: <module 'numpy' from 'C:\\Users\\zl4821\\Anaconda3\\envs\\GBS\\lib\\site-packages\\numpy\\__init__.py'>)
DEBUG 2022-02-07 18:03:05,738 on stmt: $88load_method.38 = getattr(value=$86load_global.37, attr=prod)
DEBUG 2022-02-07 18:03:05,738 on stmt: $const92.40 = const(int, 1)
DEBUG 2022-02-07 18:03:05,738 on stmt: $94binary_add.41 = edge_reps + $const92.40
DEBUG 2022-02-07 18:03:05,738 on stmt: steps = call $88load_method.38($94binary_add.41, func=$88load_method.38, args=[Var($94binary_add.41, loop_hafnian_batch.py:29)], kws=(), vararg=None, target=None)
DEBUG 2022-02-07 18:03:05,738 on stmt: $102load_method.44 = getattr(value=edge_reps, attr=max)
DEBUG 2022-02-07 18:03:05,738 on stmt: $104call_method.45 = call $102load_method.44(func=$102load_method.44, args=[], kws=(), vararg=None, target=None)
DEBUG 2022-02-07 18:03:05,738 on stmt: max_binom = $104call_method.45 + odd_cutoff
DEBUG 2022-02-07 18:03:05,738 on stmt: $112load_global.48 = global(precompute_binoms: CPUDispatcher(<function precompute_binoms at 0x00000196AE6F6CA0>))
DEBUG 2022-02-07 18:03:05,738 on stmt: binoms = call $112load_global.48(max_binom, func=$112load_global.48, args=[Var(max_binom, loop_hafnian_batch.py:31)], kws=(), vararg=None, target=None)
DEBUG 2022-02-07 18:03:05,738 on stmt: $120load_global.51 = global(np: <module 'numpy' from 'C:\\Users\\zl4821\\Anaconda3\\envs\\GBS\\lib\\site-packages\\numpy\\__init__.py'>)
DEBUG 2022-02-07 18:03:05,738 on stmt: $122load_attr.52 = getattr(value=$120load_global.51, attr=zeros)
DEBUG 2022-02-07 18:03:05,738 on stmt: $const124.53 = const(int, 2)
DEBUG 2022-02-07 18:03:05,738 on stmt: $128binary_multiply.55 = $const124.53 * batch_max
DEBUG 2022-02-07 18:03:05,738 on stmt: $132binary_add.57 = $128binary_multiply.55 + odd_cutoff
DEBUG 2022-02-07 18:03:05,746 on stmt: $const134.58 = const(int, 1)
DEBUG 2022-02-07 18:03:05,746 on stmt: $136binary_add.59 = $132binary_add.57 + $const134.58
DEBUG 2022-02-07 18:03:05,746 on stmt: $138load_global.60 = global(np: <module 'numpy' from 'C:\\Users\\zl4821\\Anaconda3\\envs\\GBS\\lib\\site-packages\\numpy\\__init__.py'>)
DEBUG 2022-02-07 18:03:05,746 on stmt: $140load_attr.61 = getattr(value=$138load_global.60, attr=complex128)
DEBUG 2022-02-07 18:03:05,746 on stmt: H_batch = call $122load_attr.52($136binary_add.59, func=$122load_attr.52, args=[Var($136binary_add.59, loop_hafnian_batch.py:34)], kws=[('dtype', Var($140load_attr.61, loop_hafnian_batch.py:34))], vararg=None, target=None)
DEBUG 2022-02-07 18:03:05,746 on stmt: $148load_global.64 = global(numba: <module 'numba' from 'C:\\Users\\zl4821\\Anaconda3\\envs\\GBS\\lib\\site-packages\\numba\\__init__.py'>)
DEBUG 2022-02-07 18:03:05,746 on stmt: $150load_method.65 = getattr(value=$148load_global.64, attr=prange)
DEBUG 2022-02-07 18:03:05,746 on stmt: $154call_method.67 = call $150load_method.65(steps, func=$150load_method.65, args=[Var(steps, loop_hafnian_batch.py:29)], kws=(), vararg=None, target=None)
DEBUG 2022-02-07 18:03:05,746 on stmt: $156get_iter.68 = getiter(value=$154call_method.67)
DEBUG 2022-02-07 18:03:05,746 on stmt: $phi158.0 = $156get_iter.68
DEBUG 2022-02-07 18:03:05,748 on stmt: jump 158
DEBUG 2022-02-07 18:03:05,748 ==== SSA block rewrite pass on 158
DEBUG 2022-02-07 18:03:05,748 Running <numba.core.ssa._FixSSAVars object at 0x00000196AEE97A90>
DEBUG 2022-02-07 18:03:05,748 on stmt: H_batch.2 = phi(incoming_values=[Var(H_batch, loop_hafnian_batch.py:34), Var(H_batch.1, loop_hafnian_batch.py:69)], incoming_blocks=[0, 510])
DEBUG 2022-02-07 18:03:05,748 on stmt: $158for_iter.1 = iternext(value=$phi158.0)
DEBUG 2022-02-07 18:03:05,748 on stmt: $158for_iter.2 = pair_first(value=$158for_iter.1)
DEBUG 2022-02-07 18:03:05,748 on stmt: $158for_iter.3 = pair_second(value=$158for_iter.1)
DEBUG 2022-02-07 18:03:05,748 on stmt: $phi162.1 = $158for_iter.2
DEBUG 2022-02-07 18:03:05,748 on stmt: branch $158for_iter.3, 162, 520
DEBUG 2022-02-07 18:03:05,748 ==== SSA block rewrite pass on 162
DEBUG 2022-02-07 18:03:05,748 Running <numba.core.ssa._FixSSAVars object at 0x00000196AEE97A90>
DEBUG 2022-02-07 18:03:05,748 on stmt: j = $phi162.1
DEBUG 2022-02-07 18:03:05,748 on stmt: $164load_global.2 = global(np: <module 'numpy' from 'C:\\Users\\zl4821\\Anaconda3\\envs\\GBS\\lib\\site-packages\\numpy\\__init__.py'>)
DEBUG 2022-02-07 18:03:05,748 on stmt: $166load_attr.3 = getattr(value=$164load_global.2, attr=zeros)
DEBUG 2022-02-07 18:03:05,748 on stmt: $const168.4 = const(int, 2)
DEBUG 2022-02-07 18:03:05,748 on stmt: $172binary_multiply.6 = $const168.4 * batch_max
DEBUG 2022-02-07 18:03:05,748 on stmt: $176binary_add.8 = $172binary_multiply.6 + odd_cutoff
DEBUG 2022-02-07 18:03:05,748 on stmt: $const178.9 = const(int, 1)
DEBUG 2022-02-07 18:03:05,748 on stmt: $180binary_add.10 = $176binary_add.8 + $const178.9
DEBUG 2022-02-07 18:03:05,748 on stmt: $182load_global.11 = global(np: <module 'numpy' from 'C:\\Users\\zl4821\\Anaconda3\\envs\\GBS\\lib\\site-packages\\numpy\\__init__.py'>)
DEBUG 2022-02-07 18:03:05,748 on stmt: $184load_attr.12 = getattr(value=$182load_global.11, attr=complex128)
DEBUG 2022-02-07 18:03:05,748 on stmt: Hnew = call $166load_attr.3($180binary_add.10, func=$166load_attr.3, args=[Var($180binary_add.10, loop_hafnian_batch.py:37)], kws=[('dtype', Var($184load_attr.12, loop_hafnian_batch.py:37))], vararg=None, target=None)
DEBUG 2022-02-07 18:03:05,748 on stmt: $192load_global.15 = global(find_kept_edges: CPUDispatcher(<function find_kept_edges at 0x00000196AE71E160>))
DEBUG 2022-02-07 18:03:05,748 on stmt: kept_edges = call $192load_global.15(j, edge_reps, func=$192load_global.15, args=[Var(j, loop_hafnian_batch.py:35), Var(edge_reps, loop_hafnian_batch.py:28)], kws=(), vararg=None, target=None)
DEBUG 2022-02-07 18:03:05,748 find_def var='j' stmt=kept_edges = call $192load_global.15(j, edge_reps, func=$192load_global.15, args=[Var(j, loop_hafnian_batch.py:35), Var(edge_reps, loop_hafnian_batch.py:28)], kws=(), vararg=None, target=None)
DEBUG 2022-02-07 18:03:05,748 on stmt: $204load_method.20 = getattr(value=kept_edges, attr=sum)
DEBUG 2022-02-07 18:03:05,748 on stmt: edges_sum = call $204load_method.20(func=$204load_method.20, args=[], kws=(), vararg=None, target=None)
DEBUG 2022-02-07 18:03:05,748 on stmt: binom_prod = const(float, 1.0)
DEBUG 2022-02-07 18:03:05,748 on stmt: $214load_global.23 = global(range: <class 'range'>)
DEBUG 2022-02-07 18:03:05,748 on stmt: $const216.24 = const(int, 1)
DEBUG 2022-02-07 18:03:05,748 on stmt: $const220.26 = const(int, 2)
DEBUG 2022-02-07 18:03:05,748 on stmt: $222binary_floor_divide.27 = n // $const220.26
DEBUG 2022-02-07 18:03:05,748 on stmt: $224call_function.28 = call $214load_global.23($const216.24, $222binary_floor_divide.27, func=$214load_global.23, args=[Var($const216.24, loop_hafnian_batch.py:43), Var($222binary_floor_divide.27, loop_hafnian_batch.py:43)], kws=(), vararg=None, target=None)
DEBUG 2022-02-07 18:03:05,748 on stmt: $226get_iter.29 = getiter(value=$224call_function.28)
DEBUG 2022-02-07 18:03:05,748 on stmt: $phi228.1 = $226get_iter.29
DEBUG 2022-02-07 18:03:05,748 on stmt: jump 228
DEBUG 2022-02-07 18:03:05,748 ==== SSA block rewrite pass on 228
DEBUG 2022-02-07 18:03:05,748 Running <numba.core.ssa._FixSSAVars object at 0x00000196AEE97A90>
DEBUG 2022-02-07 18:03:05,748 on stmt: binom_prod.2 = phi(incoming_values=[Var(binom_prod, loop_hafnian_batch.py:42), Var(binom_prod.1, loop_hafnian_batch.py:44)], incoming_blocks=[162, 230])
DEBUG 2022-02-07 18:03:05,748 on stmt: $228for_iter.2 = iternext(value=$phi228.1)
DEBUG 2022-02-07 18:03:05,748 on stmt: $228for_iter.3 = pair_first(value=$228for_iter.2)
DEBUG 2022-02-07 18:03:05,748 on stmt: $228for_iter.4 = pair_second(value=$228for_iter.2)
DEBUG 2022-02-07 18:03:05,748 on stmt: $phi230.2 = $228for_iter.3
DEBUG 2022-02-07 18:03:05,757 on stmt: branch $228for_iter.4, 230, 258
DEBUG 2022-02-07 18:03:05,757 ==== SSA block rewrite pass on 230
DEBUG 2022-02-07 18:03:05,757 Running <numba.core.ssa._FixSSAVars object at 0x00000196AEE97A90>
DEBUG 2022-02-07 18:03:05,757 on stmt: i = $phi230.2
DEBUG 2022-02-07 18:03:05,757 on stmt: $240binary_subscr.7 = getitem(value=edge_reps, index=i, fn=<built-in function getitem>)
DEBUG 2022-02-07 18:03:05,757 on stmt: $246binary_subscr.10 = getitem(value=kept_edges, index=i, fn=<built-in function getitem>)
DEBUG 2022-02-07 18:03:05,757 on stmt: $248build_tuple.11 = build_tuple(items=[Var($240binary_subscr.7, loop_hafnian_batch.py:44), Var($246binary_subscr.10, loop_hafnian_batch.py:44)])
DEBUG 2022-02-07 18:03:05,759 on stmt: $250binary_subscr.12 = getitem(value=binoms, index=$248build_tuple.11, fn=<built-in function getitem>)
DEBUG 2022-02-07 18:03:05,759 on stmt: $252inplace_multiply.13 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=binom_prod.2, rhs=$250binary_subscr.12, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-07 18:03:05,759 on stmt: binom_prod.1 = $252inplace_multiply.13
DEBUG 2022-02-07 18:03:05,759 on stmt: jump 228
DEBUG 2022-02-07 18:03:05,759 ==== SSA block rewrite pass on 258
DEBUG 2022-02-07 18:03:05,759 Running <numba.core.ssa._FixSSAVars object at 0x00000196AEE97A90>
DEBUG 2022-02-07 18:03:05,759 on stmt: bool260 = global(bool: <class 'bool'>)
DEBUG 2022-02-07 18:03:05,759 on stmt: $260pred = call bool260(glynn, func=bool260, args=(Var(glynn, loop_hafnian_batch.py:20),), kws=(), vararg=None, target=None)
DEBUG 2022-02-07 18:03:05,759 on stmt: branch $260pred, 264, 278
DEBUG 2022-02-07 18:03:05,759 ==== SSA block rewrite pass on 264
DEBUG 2022-02-07 18:03:05,759 Running <numba.core.ssa._FixSSAVars object at 0x00000196AEE97A90>
DEBUG 2022-02-07 18:03:05,759 on stmt: $const264.1 = const(int, 2)
DEBUG 2022-02-07 18:03:05,759 on stmt: $268binary_multiply.3 = $const264.1 * kept_edges
DEBUG 2022-02-07 18:03:05,759 on stmt: delta = $268binary_multiply.3 - edge_reps
DEBUG 2022-02-07 18:03:05,759 on stmt: jump 282
DEBUG 2022-02-07 18:03:05,759 ==== SSA block rewrite pass on 278
DEBUG 2022-02-07 18:03:05,759 Running <numba.core.ssa._FixSSAVars object at 0x00000196AEE97A90>
DEBUG 2022-02-07 18:03:05,759 on stmt: delta.1 = kept_edges
DEBUG 2022-02-07 18:03:05,759 on stmt: jump 282
DEBUG 2022-02-07 18:03:05,759 ==== SSA block rewrite pass on 282
DEBUG 2022-02-07 18:03:05,759 Running <numba.core.ssa._FixSSAVars object at 0x00000196AEE97A90>
DEBUG 2022-02-07 18:03:05,759 on stmt: delta.2 = phi(incoming_values=[Var(delta, loop_hafnian_batch.py:47), Var(delta.1, loop_hafnian_batch.py:49)], incoming_blocks=[264, 278])
DEBUG 2022-02-07 18:03:05,759 on stmt: $282load_global.1 = global(get_submatrices: CPUDispatcher(<function get_submatrices at 0x00000196AE71E670>))
DEBUG 2022-02-07 18:03:05,759 on stmt: $292call_function.6 = call $282load_global.1(delta.2, A, D, oddV, func=$282load_global.1, args=[Var(delta.2, loop_hafnian_batch.py:51), Var(A, loop_hafnian_batch.py:20), Var(D, loop_hafnian_batch.py:20), Var(oddV, loop_hafnian_batch.py:21)], kws=(), vararg=None, target=None)
DEBUG 2022-02-07 18:03:05,759 on stmt: $294unpack_sequence.11 = exhaust_iter(value=$292call_function.6, count=4)
DEBUG 2022-02-07 18:03:05,759 on stmt: $294unpack_sequence.7 = static_getitem(value=$294unpack_sequence.11, index=0, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-02-07 18:03:05,759 on stmt: $294unpack_sequence.8 = static_getitem(value=$294unpack_sequence.11, index=1, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-02-07 18:03:05,759 on stmt: $294unpack_sequence.9 = static_getitem(value=$294unpack_sequence.11, index=2, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-02-07 18:03:05,759 on stmt: $294unpack_sequence.10 = static_getitem(value=$294unpack_sequence.11, index=3, index_var=None, fn=<built-in function getitem>)
DEBUG 2022-02-07 18:03:05,759 on stmt: AX_S = $294unpack_sequence.7
DEBUG 2022-02-07 18:03:05,759 on stmt: XD_S = $294unpack_sequence.8
DEBUG 2022-02-07 18:03:05,759 on stmt: D_S = $294unpack_sequence.9
DEBUG 2022-02-07 18:03:05,759 on stmt: oddVX_S = $294unpack_sequence.10
DEBUG 2022-02-07 18:03:05,759 on stmt: $304load_global.12 = global(eigvals: CPUDispatcher(<function eigvals at 0x00000196AE71EB80>))
DEBUG 2022-02-07 18:03:05,759 on stmt: E = call $304load_global.12(AX_S, func=$304load_global.12, args=[Var(AX_S, loop_hafnian_batch.py:51)], kws=(), vararg=None, target=None)
DEBUG 2022-02-07 18:03:05,759 on stmt: $312load_global.15 = global(f_loop: CPUDispatcher(<function f_loop at 0x00000196AE71E310>))
DEBUG 2022-02-07 18:03:05,759 on stmt: f_even = call $312load_global.15(E, AX_S, XD_S, D_S, N_max, func=$312load_global.15, args=[Var(E, loop_hafnian_batch.py:53), Var(AX_S, loop_hafnian_batch.py:51), Var(XD_S, loop_hafnian_batch.py:51), Var(D_S, loop_hafnian_batch.py:51), Var(N_max, loop_hafnian_batch.py:26)], kws=(), vararg=None, target=None)
DEBUG 2022-02-07 18:03:05,759 on stmt: $328load_global.22 = global(f_loop_odd: CPUDispatcher(<function f_loop_odd at 0x00000196AE71E4C0>))
DEBUG 2022-02-07 18:03:05,767 on stmt: f_odd = call $328load_global.22(E, AX_S, XD_S, D_S, N_max, oddloop, oddVX_S, func=$328load_global.22, args=[Var(E, loop_hafnian_batch.py:53), Var(AX_S, loop_hafnian_batch.py:51), Var(XD_S, loop_hafnian_batch.py:51), Var(D_S, loop_hafnian_batch.py:51), Var(N_max, loop_hafnian_batch.py:26), Var(oddloop, loop_hafnian_batch.py:20), Var(oddVX_S, loop_hafnian_batch.py:51)], kws=(), vararg=None, target=None)
DEBUG 2022-02-07 18:03:05,767 on stmt: $348load_global.31 = global(range: <class 'range'>)
DEBUG 2022-02-07 18:03:05,767 on stmt: $const350.32 = const(int, 2)
DEBUG 2022-02-07 18:03:05,767 on stmt: $const354.34 = const(int, 0)
DEBUG 2022-02-07 18:03:05,767 on stmt: $356binary_subscr.35 = static_getitem(value=kept_edges, index=0, index_var=$const354.34, fn=<built-in function getitem>)
DEBUG 2022-02-07 18:03:05,767 on stmt: $358binary_multiply.36 = $const350.32 * $356binary_subscr.35
DEBUG 2022-02-07 18:03:05,767 on stmt: $const360.37 = const(int, 2)
DEBUG 2022-02-07 18:03:05,767 on stmt: $364binary_multiply.39 = $const360.37 * batch_max
DEBUG 2022-02-07 18:03:05,767 on stmt: $368binary_add.41 = $364binary_multiply.39 + odd_cutoff
DEBUG 2022-02-07 18:03:05,767 on stmt: $const370.42 = const(int, 1)
DEBUG 2022-02-07 18:03:05,767 on stmt: $372binary_add.43 = $368binary_add.41 + $const370.42
DEBUG 2022-02-07 18:03:05,767 on stmt: $374call_function.44 = call $348load_global.31($358binary_multiply.36, $372binary_add.43, func=$348load_global.31, args=[Var($358binary_multiply.36, loop_hafnian_batch.py:58), Var($372binary_add.43, loop_hafnian_batch.py:58)], kws=(), vararg=None, target=None)
DEBUG 2022-02-07 18:03:05,767 on stmt: $376get_iter.45 = getiter(value=$374call_function.44)
DEBUG 2022-02-07 18:03:05,767 on stmt: $phi378.1 = $376get_iter.45
DEBUG 2022-02-07 18:03:05,767 on stmt: jump 378
DEBUG 2022-02-07 18:03:05,767 ==== SSA block rewrite pass on 378
DEBUG 2022-02-07 18:03:05,767 Running <numba.core.ssa._FixSSAVars object at 0x00000196AEE97A90>
DEBUG 2022-02-07 18:03:05,767 on stmt: $378for_iter.2 = iternext(value=$phi378.1)
DEBUG 2022-02-07 18:03:05,767 on stmt: $378for_iter.3 = pair_first(value=$378for_iter.2)
DEBUG 2022-02-07 18:03:05,767 on stmt: $378for_iter.4 = pair_second(value=$378for_iter.2)
DEBUG 2022-02-07 18:03:05,767 on stmt: $phi380.2 = $378for_iter.3
DEBUG 2022-02-07 18:03:05,767 on stmt: branch $378for_iter.4, 380, 510
DEBUG 2022-02-07 18:03:05,767 ==== SSA block rewrite pass on 380
DEBUG 2022-02-07 18:03:05,767 Running <numba.core.ssa._FixSSAVars object at 0x00000196AEE97A90>
DEBUG 2022-02-07 18:03:05,767 on stmt: N_det = $phi380.2
DEBUG 2022-02-07 18:03:05,767 on stmt: N = N_fixed + N_det
DEBUG 2022-02-07 18:03:05,767 on stmt: $const390.6 = const(float, -1.0)
DEBUG 2022-02-07 18:03:05,767 on stmt: $const394.8 = const(int, 2)
DEBUG 2022-02-07 18:03:05,767 on stmt: $396binary_floor_divide.9 = N // $const394.8
DEBUG 2022-02-07 18:03:05,767 on stmt: $400binary_subtract.11 = $396binary_floor_divide.9 - edges_sum
DEBUG 2022-02-07 18:03:05,767 on stmt: plus_minus = $const390.6 ** $400binary_subtract.11
DEBUG 2022-02-07 18:03:05,767 on stmt: $const410.15 = const(int, 2)
DEBUG 2022-02-07 18:03:05,767 on stmt: $412binary_floor_divide.16 = N_det // $const410.15
DEBUG 2022-02-07 18:03:05,767 on stmt: $const416.18 = const(int, 0)
DEBUG 2022-02-07 18:03:05,767 on stmt: $418binary_subscr.19 = static_getitem(value=kept_edges, index=0, index_var=$const416.18, fn=<built-in function getitem>)
DEBUG 2022-02-07 18:03:05,767 on stmt: $420build_tuple.20 = build_tuple(items=[Var($412binary_floor_divide.16, loop_hafnian_batch.py:62), Var($418binary_subscr.19, loop_hafnian_batch.py:62)])
DEBUG 2022-02-07 18:03:05,767 on stmt: $422binary_subscr.21 = getitem(value=binoms, index=$420build_tuple.20, fn=<built-in function getitem>)
DEBUG 2022-02-07 18:03:05,767 on stmt: n_det_binom_prod = $422binary_subscr.21 * binom_prod.2
DEBUG 2022-02-07 18:03:05,767 on stmt: $const432.25 = const(int, 2)
DEBUG 2022-02-07 18:03:05,767 on stmt: $434binary_modulo.26 = N_det % $const432.25
DEBUG 2022-02-07 18:03:05,767 on stmt: $const436.27 = const(int, 0)
DEBUG 2022-02-07 18:03:05,767 on stmt: $438compare_op.28 = $434binary_modulo.26 == $const436.27
DEBUG 2022-02-07 18:03:05,767 on stmt: bool440 = global(bool: <class 'bool'>)
DEBUG 2022-02-07 18:03:05,767 on stmt: $440pred = call bool440($438compare_op.28, func=bool440, args=(Var($438compare_op.28, loop_hafnian_batch.py:64),), kws=(), vararg=None, target=None)
DEBUG 2022-02-07 18:03:05,767 on stmt: branch $440pred, 444, 478
DEBUG 2022-02-07 18:03:05,767 ==== SSA block rewrite pass on 444
DEBUG 2022-02-07 18:03:05,767 Running <numba.core.ssa._FixSSAVars object at 0x00000196AEE97A90>
DEBUG 2022-02-07 18:03:05,767 on stmt: $450binary_subscr.6 = getitem(value=Hnew, index=N_det, fn=<built-in function getitem>)
DEBUG 2022-02-07 18:03:05,767 on stmt: $456binary_multiply.9 = n_det_binom_prod * plus_minus
DEBUG 2022-02-07 18:03:05,767 on stmt: $const462.12 = const(int, 2)
DEBUG 2022-02-07 18:03:05,767 on stmt: $464binary_floor_divide.13 = N // $const462.12
DEBUG 2022-02-07 18:03:05,767 on stmt: $466binary_subscr.14 = getitem(value=f_even, index=$464binary_floor_divide.13, fn=<built-in function getitem>)
DEBUG 2022-02-07 18:03:05,767 on stmt: $468binary_multiply.15 = $456binary_multiply.9 * $466binary_subscr.14
DEBUG 2022-02-07 18:03:05,767 on stmt: $470inplace_add.16 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$450binary_subscr.6, rhs=$468binary_multiply.15, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-07 18:03:05,767 on stmt: Hnew[N_det] = $470inplace_add.16
DEBUG 2022-02-07 18:03:05,777 on stmt: jump 506
DEBUG 2022-02-07 18:03:05,777 ==== SSA block rewrite pass on 478
DEBUG 2022-02-07 18:03:05,777 Running <numba.core.ssa._FixSSAVars object at 0x00000196AEE97A90>
DEBUG 2022-02-07 18:03:05,777 on stmt: $484binary_subscr.6 = getitem(value=Hnew, index=N_det, fn=<built-in function getitem>)
DEBUG 2022-02-07 18:03:05,777 on stmt: $490binary_multiply.9 = n_det_binom_prod * plus_minus
DEBUG 2022-02-07 18:03:05,777 on stmt: $496binary_subscr.12 = getitem(value=f_odd, index=N, fn=<built-in function getitem>)
DEBUG 2022-02-07 18:03:05,779 on stmt: $498binary_multiply.13 = $490binary_multiply.9 * $496binary_subscr.12
DEBUG 2022-02-07 18:03:05,779 on stmt: $500inplace_add.14 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$484binary_subscr.6, rhs=$498binary_multiply.13, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-07 18:03:05,779 on stmt: Hnew[N_det] = $500inplace_add.14
DEBUG 2022-02-07 18:03:05,779 on stmt: jump 506
DEBUG 2022-02-07 18:03:05,779 ==== SSA block rewrite pass on 506
DEBUG 2022-02-07 18:03:05,779 Running <numba.core.ssa._FixSSAVars object at 0x00000196AEE97A90>
DEBUG 2022-02-07 18:03:05,779 on stmt: jump 378
DEBUG 2022-02-07 18:03:05,779 ==== SSA block rewrite pass on 510
DEBUG 2022-02-07 18:03:05,779 Running <numba.core.ssa._FixSSAVars object at 0x00000196AEE97A90>
DEBUG 2022-02-07 18:03:05,779 on stmt: $514inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=H_batch.2, rhs=Hnew, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-07 18:03:05,779 on stmt: H_batch.1 = $514inplace_add.3
DEBUG 2022-02-07 18:03:05,779 on stmt: jump 158
DEBUG 2022-02-07 18:03:05,779 ==== SSA block rewrite pass on 520
DEBUG 2022-02-07 18:03:05,779 Running <numba.core.ssa._FixSSAVars object at 0x00000196AEE97A90>
DEBUG 2022-02-07 18:03:05,779 on stmt: bool522 = global(bool: <class 'bool'>)
DEBUG 2022-02-07 18:03:05,779 on stmt: $522pred = call bool522(glynn, func=bool522, args=(Var(glynn, loop_hafnian_batch.py:20),), kws=(), vararg=None, target=None)
DEBUG 2022-02-07 18:03:05,779 on stmt: branch $522pred, 526, 580
DEBUG 2022-02-07 18:03:05,779 ==== SSA block rewrite pass on 526
DEBUG 2022-02-07 18:03:05,779 Running <numba.core.ssa._FixSSAVars object at 0x00000196AEE97A90>
DEBUG 2022-02-07 18:03:05,779 on stmt: $526load_global.0 = global(range: <class 'range'>)
DEBUG 2022-02-07 18:03:05,779 on stmt: $530load_attr.2 = getattr(value=H_batch.2, attr=shape)
DEBUG 2022-02-07 18:03:05,779 on stmt: $const532.3 = const(int, 0)
DEBUG 2022-02-07 18:03:05,779 on stmt: $534binary_subscr.4 = static_getitem(value=$530load_attr.2, index=0, index_var=$const532.3, fn=<built-in function getitem>)
DEBUG 2022-02-07 18:03:05,779 on stmt: $536call_function.5 = call $526load_global.0($534binary_subscr.4, func=$526load_global.0, args=[Var($534binary_subscr.4, loop_hafnian_batch.py:72)], kws=(), vararg=None, target=None)
DEBUG 2022-02-07 18:03:05,779 on stmt: $538get_iter.6 = getiter(value=$536call_function.5)
DEBUG 2022-02-07 18:03:05,787 on stmt: $phi540.0 = $538get_iter.6
DEBUG 2022-02-07 18:03:05,787 on stmt: jump 540
DEBUG 2022-02-07 18:03:05,787 ==== SSA block rewrite pass on 540
DEBUG 2022-02-07 18:03:05,787 Running <numba.core.ssa._FixSSAVars object at 0x00000196AEE97A90>
DEBUG 2022-02-07 18:03:05,787 on stmt: $540for_iter.1 = iternext(value=$phi540.0)
DEBUG 2022-02-07 18:03:05,787 on stmt: $540for_iter.2 = pair_first(value=$540for_iter.1)
DEBUG 2022-02-07 18:03:05,787 on stmt: $540for_iter.3 = pair_second(value=$540for_iter.1)
DEBUG 2022-02-07 18:03:05,787 on stmt: $phi542.1 = $540for_iter.2
DEBUG 2022-02-07 18:03:05,787 on stmt: branch $540for_iter.3, 542, 580
DEBUG 2022-02-07 18:03:05,787 ==== SSA block rewrite pass on 542
DEBUG 2022-02-07 18:03:05,787 Running <numba.core.ssa._FixSSAVars object at 0x00000196AEE97A90>
DEBUG 2022-02-07 18:03:05,787 on stmt: j.1 = $phi542.1
DEBUG 2022-02-07 18:03:05,787 on stmt: x = N_fixed + j
DEBUG 2022-02-07 18:03:05,787 find_def var='j' stmt=x = N_fixed + j
DEBUG 2022-02-07 18:03:05,787 replaced with: x = N_fixed + j.1
DEBUG 2022-02-07 18:03:05,787 on stmt: $558binary_subscr.9 = getitem(value=H_batch.2, index=j, fn=<built-in function getitem>)
DEBUG 2022-02-07 18:03:05,787 find_def var='j' stmt=$558binary_subscr.9 = getitem(value=H_batch.2, index=j, fn=<built-in function getitem>)
DEBUG 2022-02-07 18:03:05,787 replaced with: $558binary_subscr.9 = getitem(value=H_batch.2, index=j.1, fn=<built-in function getitem>)
DEBUG 2022-02-07 18:03:05,787 on stmt: $const560.10 = const(float, 0.5)
DEBUG 2022-02-07 18:03:05,787 on stmt: $const564.12 = const(int, 2)
DEBUG 2022-02-07 18:03:05,787 on stmt: $566binary_floor_divide.13 = x // $const564.12
DEBUG 2022-02-07 18:03:05,787 on stmt: $568binary_power.14 = $const560.10 ** $566binary_floor_divide.13
DEBUG 2022-02-07 18:03:05,787 on stmt: $570inplace_multiply.15 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=$558binary_subscr.9, rhs=$568binary_power.14, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-07 18:03:05,787 on stmt: H_batch.2[j] = $570inplace_multiply.15
DEBUG 2022-02-07 18:03:05,787 find_def var='j' stmt=H_batch.2[j] = $570inplace_multiply.15
DEBUG 2022-02-07 18:03:05,787 replaced with: H_batch.2[j.1] = $570inplace_multiply.15
DEBUG 2022-02-07 18:03:05,787 on stmt: jump 540
DEBUG 2022-02-07 18:03:05,787 ==== SSA block rewrite pass on 580
DEBUG 2022-02-07 18:03:05,787 Running <numba.core.ssa._FixSSAVars object at 0x00000196AEE97A90>
DEBUG 2022-02-07 18:03:05,787 on stmt: $582return_value.1 = cast(value=H_batch.2)
DEBUG 2022-02-07 18:03:05,787 on stmt: return $582return_value.1
DEBUG 2022-02-07 18:03:05,829 bytecode dump:
>          0	NOP(arg=None, lineno=3)
           2	LOAD_GLOBAL(arg=0, lineno=3)
           4	LOAD_FAST(arg=0, lineno=3)
           6	CALL_FUNCTION(arg=1, lineno=3)
           8	RETURN_VALUE(arg=None, lineno=3)
DEBUG 2022-02-07 18:03:05,829 pending: deque([State(pc_initial=0 nstack_initial=0)])
DEBUG 2022-02-07 18:03:05,829 stack: []
DEBUG 2022-02-07 18:03:05,829 dispatch pc=0, inst=NOP(arg=None, lineno=3)
DEBUG 2022-02-07 18:03:05,829 stack []
DEBUG 2022-02-07 18:03:05,829 dispatch pc=2, inst=LOAD_GLOBAL(arg=0, lineno=3)
DEBUG 2022-02-07 18:03:05,829 stack []
DEBUG 2022-02-07 18:03:05,829 dispatch pc=4, inst=LOAD_FAST(arg=0, lineno=3)
DEBUG 2022-02-07 18:03:05,829 stack ['$2load_global.0']
DEBUG 2022-02-07 18:03:05,829 dispatch pc=6, inst=CALL_FUNCTION(arg=1, lineno=3)
DEBUG 2022-02-07 18:03:05,829 stack ['$2load_global.0', '$tmp04.1']
DEBUG 2022-02-07 18:03:05,829 dispatch pc=8, inst=RETURN_VALUE(arg=None, lineno=3)
DEBUG 2022-02-07 18:03:05,829 stack ['$6call_function.2']
DEBUG 2022-02-07 18:03:05,829 end state. edges=[]
DEBUG 2022-02-07 18:03:05,829 -------------------------Prune PHIs-------------------------
DEBUG 2022-02-07 18:03:05,829 Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
DEBUG 2022-02-07 18:03:05,829 defmap: {}
DEBUG 2022-02-07 18:03:05,829 phismap: defaultdict(<class 'set'>, {})
DEBUG 2022-02-07 18:03:05,829 changing phismap: defaultdict(<class 'set'>, {})
DEBUG 2022-02-07 18:03:05,829 keep phismap: {}
DEBUG 2022-02-07 18:03:05,829 new_out: defaultdict(<class 'dict'>, {})
DEBUG 2022-02-07 18:03:05,829 ----------------------DONE Prune PHIs-----------------------
DEBUG 2022-02-07 18:03:05,829 block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$2load_global.0'}), (4, {'res': '$tmp04.1'}), (6, {'func': '$2load_global.0', 'args': ['$tmp04.1'], 'res': '$6call_function.2'}), (8, {'retval': '$6call_function.2', 'castval': '$8return_value.3'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG 2022-02-07 18:03:05,829 label 0:
    tmp0 = arg(0, name=tmp0)                 ['tmp0']
    $2load_global.0 = global(intrin: <intrinsic stub>) ['$2load_global.0']
    $6call_function.2 = call $2load_global.0(tmp0, func=$2load_global.0, args=[Var(tmp0, <string>:3)], kws=(), vararg=None, target=None) ['$2load_global.0', '$6call_function.2', 'tmp0']
    $8return_value.3 = cast(value=$6call_function.2) ['$6call_function.2', '$8return_value.3']
    return $8return_value.3                  ['$8return_value.3']

DEBUG 2022-02-07 18:03:05,839 ==== SSA block analysis pass on 0
DEBUG 2022-02-07 18:03:05,839 Running <numba.core.ssa._GatherDefsHandler object at 0x00000196AEFE4D00>
DEBUG 2022-02-07 18:03:05,839 on stmt: tmp0 = arg(0, name=tmp0)
DEBUG 2022-02-07 18:03:05,839 on stmt: $2load_global.0 = global(intrin: <intrinsic stub>)
DEBUG 2022-02-07 18:03:05,839 on stmt: $6call_function.2 = call $2load_global.0(tmp0, func=$2load_global.0, args=[Var(tmp0, <string>:3)], kws=(), vararg=None, target=None)
DEBUG 2022-02-07 18:03:05,839 on stmt: $8return_value.3 = cast(value=$6call_function.2)
DEBUG 2022-02-07 18:03:05,839 on stmt: return $8return_value.3
DEBUG 2022-02-07 18:03:05,839 defs defaultdict(<class 'list'>,
            {'$2load_global.0': [<numba.core.ir.Assign object at 0x00000196AEFE93D0>],
             '$6call_function.2': [<numba.core.ir.Assign object at 0x00000196AEFE96D0>],
             '$8return_value.3': [<numba.core.ir.Assign object at 0x00000196AEFE97F0>],
             'tmp0': [<numba.core.ir.Assign object at 0x00000196AEFE90A0>]})
DEBUG 2022-02-07 18:03:05,839 SSA violators set()
DEBUG 2022-02-07 18:03:05,868 bytecode dump:
>          0	NOP(arg=None, lineno=3543)
           2	LOAD_FAST(arg=0, lineno=3543)
           4	LOAD_METHOD(arg=0, lineno=3543)
           6	LOAD_FAST(arg=1, lineno=3543)
           8	LOAD_FAST(arg=2, lineno=3543)
          10	CALL_METHOD(arg=2, lineno=3543)
          12	RETURN_VALUE(arg=None, lineno=3543)
DEBUG 2022-02-07 18:03:05,868 pending: deque([State(pc_initial=0 nstack_initial=0)])
DEBUG 2022-02-07 18:03:05,868 stack: []
DEBUG 2022-02-07 18:03:05,868 dispatch pc=0, inst=NOP(arg=None, lineno=3543)
DEBUG 2022-02-07 18:03:05,870 stack []
DEBUG 2022-02-07 18:03:05,870 dispatch pc=2, inst=LOAD_FAST(arg=0, lineno=3543)
DEBUG 2022-02-07 18:03:05,870 stack []
DEBUG 2022-02-07 18:03:05,870 dispatch pc=4, inst=LOAD_METHOD(arg=0, lineno=3543)
DEBUG 2022-02-07 18:03:05,870 stack ['$arrtype2.0']
DEBUG 2022-02-07 18:03:05,870 dispatch pc=6, inst=LOAD_FAST(arg=1, lineno=3543)
DEBUG 2022-02-07 18:03:05,870 stack ['$4load_method.1']
DEBUG 2022-02-07 18:03:05,870 dispatch pc=8, inst=LOAD_FAST(arg=2, lineno=3543)
DEBUG 2022-02-07 18:03:05,870 stack ['$4load_method.1', '$size6.2']
DEBUG 2022-02-07 18:03:05,870 dispatch pc=10, inst=CALL_METHOD(arg=2, lineno=3543)
DEBUG 2022-02-07 18:03:05,870 stack ['$4load_method.1', '$size6.2', '$align8.3']
DEBUG 2022-02-07 18:03:05,870 dispatch pc=12, inst=RETURN_VALUE(arg=None, lineno=3543)
DEBUG 2022-02-07 18:03:05,870 stack ['$10call_method.4']
DEBUG 2022-02-07 18:03:05,870 end state. edges=[]
DEBUG 2022-02-07 18:03:05,870 -------------------------Prune PHIs-------------------------
DEBUG 2022-02-07 18:03:05,870 Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
DEBUG 2022-02-07 18:03:05,870 defmap: {}
DEBUG 2022-02-07 18:03:05,870 phismap: defaultdict(<class 'set'>, {})
DEBUG 2022-02-07 18:03:05,870 changing phismap: defaultdict(<class 'set'>, {})
DEBUG 2022-02-07 18:03:05,870 keep phismap: {}
DEBUG 2022-02-07 18:03:05,870 new_out: defaultdict(<class 'dict'>, {})
DEBUG 2022-02-07 18:03:05,870 ----------------------DONE Prune PHIs-----------------------
DEBUG 2022-02-07 18:03:05,870 block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$arrtype2.0'}), (4, {'item': '$arrtype2.0', 'res': '$4load_method.1'}), (6, {'res': '$size6.2'}), (8, {'res': '$align8.3'}), (10, {'func': '$4load_method.1', 'args': ['$size6.2', '$align8.3'], 'res': '$10call_method.4'}), (12, {'retval': '$10call_method.4', 'castval': '$12return_value.5'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG 2022-02-07 18:03:05,870 label 0:
    arrtype = arg(0, name=arrtype)           ['arrtype']
    size = arg(1, name=size)                 ['size']
    align = arg(2, name=align)               ['align']
    $4load_method.1 = getattr(value=arrtype, attr=_allocate) ['$4load_method.1', 'arrtype']
    $10call_method.4 = call $4load_method.1(size, align, func=$4load_method.1, args=[Var(size, arrayobj.py:3543), Var(align, arrayobj.py:3543)], kws=(), vararg=None, target=None) ['$10call_method.4', '$4load_method.1', 'align', 'size']
    $12return_value.5 = cast(value=$10call_method.4) ['$10call_method.4', '$12return_value.5']
    return $12return_value.5                 ['$12return_value.5']

DEBUG 2022-02-07 18:03:05,880 ==== SSA block analysis pass on 0
DEBUG 2022-02-07 18:03:05,880 Running <numba.core.ssa._GatherDefsHandler object at 0x00000196AF057280>
DEBUG 2022-02-07 18:03:05,880 on stmt: arrtype = arg(0, name=arrtype)
DEBUG 2022-02-07 18:03:05,880 on stmt: size = arg(1, name=size)
DEBUG 2022-02-07 18:03:05,880 on stmt: align = arg(2, name=align)
DEBUG 2022-02-07 18:03:05,880 on stmt: $4load_method.1 = getattr(value=arrtype, attr=_allocate)
DEBUG 2022-02-07 18:03:05,880 on stmt: $10call_method.4 = call $4load_method.1(size, align, func=$4load_method.1, args=[Var(size, arrayobj.py:3543), Var(align, arrayobj.py:3543)], kws=(), vararg=None, target=None)
DEBUG 2022-02-07 18:03:05,880 on stmt: $12return_value.5 = cast(value=$10call_method.4)
DEBUG 2022-02-07 18:03:05,880 on stmt: return $12return_value.5
DEBUG 2022-02-07 18:03:05,880 defs defaultdict(<class 'list'>,
            {'$10call_method.4': [<numba.core.ir.Assign object at 0x00000196AF052CD0>],
             '$12return_value.5': [<numba.core.ir.Assign object at 0x00000196AF052DC0>],
             '$4load_method.1': [<numba.core.ir.Assign object at 0x00000196AF052880>],
             'align': [<numba.core.ir.Assign object at 0x00000196AF0525E0>],
             'arrtype': [<numba.core.ir.Assign object at 0x00000196AF04A7F0>],
             'size': [<numba.core.ir.Assign object at 0x00000196AF052070>]})
DEBUG 2022-02-07 18:03:05,880 SSA violators set()
DEBUG 2022-02-07 18:03:05,890 bytecode dump:
>          0	NOP(arg=None, lineno=3536)
           2	LOAD_GLOBAL(arg=0, lineno=3536)
           4	LOAD_FAST(arg=1, lineno=3536)
           6	LOAD_FAST(arg=2, lineno=3536)
           8	CALL_FUNCTION(arg=2, lineno=3536)
          10	RETURN_VALUE(arg=None, lineno=3536)
DEBUG 2022-02-07 18:03:05,890 pending: deque([State(pc_initial=0 nstack_initial=0)])
DEBUG 2022-02-07 18:03:05,890 stack: []
DEBUG 2022-02-07 18:03:05,890 dispatch pc=0, inst=NOP(arg=None, lineno=3536)
DEBUG 2022-02-07 18:03:05,890 stack []
DEBUG 2022-02-07 18:03:05,890 dispatch pc=2, inst=LOAD_GLOBAL(arg=0, lineno=3536)
DEBUG 2022-02-07 18:03:05,890 stack []
DEBUG 2022-02-07 18:03:05,890 dispatch pc=4, inst=LOAD_FAST(arg=1, lineno=3536)
DEBUG 2022-02-07 18:03:05,890 stack ['$2load_global.0']
DEBUG 2022-02-07 18:03:05,890 dispatch pc=6, inst=LOAD_FAST(arg=2, lineno=3536)
DEBUG 2022-02-07 18:03:05,890 stack ['$2load_global.0', '$allocsize4.1']
DEBUG 2022-02-07 18:03:05,890 dispatch pc=8, inst=CALL_FUNCTION(arg=2, lineno=3536)
DEBUG 2022-02-07 18:03:05,890 stack ['$2load_global.0', '$allocsize4.1', '$align6.2']
DEBUG 2022-02-07 18:03:05,890 dispatch pc=10, inst=RETURN_VALUE(arg=None, lineno=3536)
DEBUG 2022-02-07 18:03:05,890 stack ['$8call_function.3']
DEBUG 2022-02-07 18:03:05,890 end state. edges=[]
DEBUG 2022-02-07 18:03:05,890 -------------------------Prune PHIs-------------------------
DEBUG 2022-02-07 18:03:05,890 Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
DEBUG 2022-02-07 18:03:05,890 defmap: {}
DEBUG 2022-02-07 18:03:05,890 phismap: defaultdict(<class 'set'>, {})
DEBUG 2022-02-07 18:03:05,890 changing phismap: defaultdict(<class 'set'>, {})
DEBUG 2022-02-07 18:03:05,890 keep phismap: {}
DEBUG 2022-02-07 18:03:05,890 new_out: defaultdict(<class 'dict'>, {})
DEBUG 2022-02-07 18:03:05,890 ----------------------DONE Prune PHIs-----------------------
DEBUG 2022-02-07 18:03:05,890 block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$2load_global.0'}), (4, {'res': '$allocsize4.1'}), (6, {'res': '$align6.2'}), (8, {'func': '$2load_global.0', 'args': ['$allocsize4.1', '$align6.2'], 'res': '$8call_function.3'}), (10, {'retval': '$8call_function.3', 'castval': '$10return_value.4'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG 2022-02-07 18:03:05,890 label 0:
    cls = arg(0, name=cls)                   ['cls']
    allocsize = arg(1, name=allocsize)       ['allocsize']
    align = arg(2, name=align)               ['align']
    $2load_global.0 = global(intrin_alloc: <intrinsic intrin_alloc>) ['$2load_global.0']
    $8call_function.3 = call $2load_global.0(allocsize, align, func=$2load_global.0, args=[Var(allocsize, arrayobj.py:3536), Var(align, arrayobj.py:3536)], kws=(), vararg=None, target=None) ['$2load_global.0', '$8call_function.3', 'align', 'allocsize']
    $10return_value.4 = cast(value=$8call_function.3) ['$10return_value.4', '$8call_function.3']
    return $10return_value.4                 ['$10return_value.4']

DEBUG 2022-02-07 18:03:05,900 ==== SSA block analysis pass on 0
DEBUG 2022-02-07 18:03:05,900 Running <numba.core.ssa._GatherDefsHandler object at 0x00000196AF0CF910>
DEBUG 2022-02-07 18:03:05,900 on stmt: cls = arg(0, name=cls)
DEBUG 2022-02-07 18:03:05,900 on stmt: allocsize = arg(1, name=allocsize)
DEBUG 2022-02-07 18:03:05,900 on stmt: align = arg(2, name=align)
DEBUG 2022-02-07 18:03:05,900 on stmt: $2load_global.0 = global(intrin_alloc: <intrinsic intrin_alloc>)
DEBUG 2022-02-07 18:03:05,900 on stmt: $8call_function.3 = call $2load_global.0(allocsize, align, func=$2load_global.0, args=[Var(allocsize, arrayobj.py:3536), Var(align, arrayobj.py:3536)], kws=(), vararg=None, target=None)
DEBUG 2022-02-07 18:03:05,900 on stmt: $10return_value.4 = cast(value=$8call_function.3)
DEBUG 2022-02-07 18:03:05,900 on stmt: return $10return_value.4
DEBUG 2022-02-07 18:03:05,900 defs defaultdict(<class 'list'>,
            {'$10return_value.4': [<numba.core.ir.Assign object at 0x00000196AF0D9760>],
             '$2load_global.0': [<numba.core.ir.Assign object at 0x00000196AF0D9220>],
             '$8call_function.3': [<numba.core.ir.Assign object at 0x00000196AF0D9640>],
             'align': [<numba.core.ir.Assign object at 0x00000196AF0D90A0>],
             'allocsize': [<numba.core.ir.Assign object at 0x00000196AF0CF280>],
             'cls': [<numba.core.ir.Assign object at 0x00000196AF0CF610>]})
DEBUG 2022-02-07 18:03:05,900 SSA violators set()
DEBUG 2022-02-07 18:03:06,064 bytecode dump:
>          0	NOP(arg=None, lineno=3)
           2	LOAD_GLOBAL(arg=0, lineno=3)
           4	LOAD_FAST(arg=0, lineno=3)
           6	CALL_FUNCTION(arg=1, lineno=3)
           8	RETURN_VALUE(arg=None, lineno=3)
DEBUG 2022-02-07 18:03:06,064 pending: deque([State(pc_initial=0 nstack_initial=0)])
DEBUG 2022-02-07 18:03:06,064 stack: []
DEBUG 2022-02-07 18:03:06,064 dispatch pc=0, inst=NOP(arg=None, lineno=3)
DEBUG 2022-02-07 18:03:06,064 stack []
DEBUG 2022-02-07 18:03:06,064 dispatch pc=2, inst=LOAD_GLOBAL(arg=0, lineno=3)
DEBUG 2022-02-07 18:03:06,064 stack []
DEBUG 2022-02-07 18:03:06,064 dispatch pc=4, inst=LOAD_FAST(arg=0, lineno=3)
DEBUG 2022-02-07 18:03:06,064 stack ['$2load_global.0']
DEBUG 2022-02-07 18:03:06,064 dispatch pc=6, inst=CALL_FUNCTION(arg=1, lineno=3)
DEBUG 2022-02-07 18:03:06,080 stack ['$2load_global.0', '$tmp04.1']
DEBUG 2022-02-07 18:03:06,080 dispatch pc=8, inst=RETURN_VALUE(arg=None, lineno=3)
DEBUG 2022-02-07 18:03:06,080 stack ['$6call_function.2']
DEBUG 2022-02-07 18:03:06,080 end state. edges=[]
DEBUG 2022-02-07 18:03:06,080 -------------------------Prune PHIs-------------------------
DEBUG 2022-02-07 18:03:06,080 Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
DEBUG 2022-02-07 18:03:06,080 defmap: {}
DEBUG 2022-02-07 18:03:06,080 phismap: defaultdict(<class 'set'>, {})
DEBUG 2022-02-07 18:03:06,080 changing phismap: defaultdict(<class 'set'>, {})
DEBUG 2022-02-07 18:03:06,080 keep phismap: {}
DEBUG 2022-02-07 18:03:06,080 new_out: defaultdict(<class 'dict'>, {})
DEBUG 2022-02-07 18:03:06,080 ----------------------DONE Prune PHIs-----------------------
DEBUG 2022-02-07 18:03:06,080 block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$2load_global.0'}), (4, {'res': '$tmp04.1'}), (6, {'func': '$2load_global.0', 'args': ['$tmp04.1'], 'res': '$6call_function.2'}), (8, {'retval': '$6call_function.2', 'castval': '$8return_value.3'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG 2022-02-07 18:03:06,080 label 0:
    tmp0 = arg(0, name=tmp0)                 ['tmp0']
    $2load_global.0 = global(intrin: <intrinsic stub>) ['$2load_global.0']
    $6call_function.2 = call $2load_global.0(tmp0, func=$2load_global.0, args=[Var(tmp0, <string>:3)], kws=(), vararg=None, target=None) ['$2load_global.0', '$6call_function.2', 'tmp0']
    $8return_value.3 = cast(value=$6call_function.2) ['$6call_function.2', '$8return_value.3']
    return $8return_value.3                  ['$8return_value.3']

DEBUG 2022-02-07 18:03:06,080 ==== SSA block analysis pass on 0
DEBUG 2022-02-07 18:03:06,080 Running <numba.core.ssa._GatherDefsHandler object at 0x00000196AF1746A0>
DEBUG 2022-02-07 18:03:06,080 on stmt: tmp0 = arg(0, name=tmp0)
DEBUG 2022-02-07 18:03:06,080 on stmt: $2load_global.0 = global(intrin: <intrinsic stub>)
DEBUG 2022-02-07 18:03:06,080 on stmt: $6call_function.2 = call $2load_global.0(tmp0, func=$2load_global.0, args=[Var(tmp0, <string>:3)], kws=(), vararg=None, target=None)
DEBUG 2022-02-07 18:03:06,080 on stmt: $8return_value.3 = cast(value=$6call_function.2)
DEBUG 2022-02-07 18:03:06,080 on stmt: return $8return_value.3
DEBUG 2022-02-07 18:03:06,080 defs defaultdict(<class 'list'>,
            {'$2load_global.0': [<numba.core.ir.Assign object at 0x00000196AF174190>],
             '$6call_function.2': [<numba.core.ir.Assign object at 0x00000196AF174D30>],
             '$8return_value.3': [<numba.core.ir.Assign object at 0x00000196AF174E50>],
             'tmp0': [<numba.core.ir.Assign object at 0x00000196AF1741F0>]})
DEBUG 2022-02-07 18:03:06,080 SSA violators set()
DEBUG 2022-02-07 18:03:06,327 bytecode dump:
>          0	NOP(arg=None, lineno=3)
           2	LOAD_GLOBAL(arg=0, lineno=3)
           4	LOAD_FAST(arg=0, lineno=3)
           6	LOAD_FAST(arg=1, lineno=3)
           8	CALL_FUNCTION(arg=2, lineno=3)
          10	RETURN_VALUE(arg=None, lineno=3)
DEBUG 2022-02-07 18:03:06,327 pending: deque([State(pc_initial=0 nstack_initial=0)])
DEBUG 2022-02-07 18:03:06,327 stack: []
DEBUG 2022-02-07 18:03:06,327 dispatch pc=0, inst=NOP(arg=None, lineno=3)
DEBUG 2022-02-07 18:03:06,327 stack []
DEBUG 2022-02-07 18:03:06,327 dispatch pc=2, inst=LOAD_GLOBAL(arg=0, lineno=3)
DEBUG 2022-02-07 18:03:06,327 stack []
DEBUG 2022-02-07 18:03:06,327 dispatch pc=4, inst=LOAD_FAST(arg=0, lineno=3)
DEBUG 2022-02-07 18:03:06,327 stack ['$2load_global.0']
DEBUG 2022-02-07 18:03:06,327 dispatch pc=6, inst=LOAD_FAST(arg=1, lineno=3)
DEBUG 2022-02-07 18:03:06,327 stack ['$2load_global.0', '$tmp04.1']
DEBUG 2022-02-07 18:03:06,327 dispatch pc=8, inst=CALL_FUNCTION(arg=2, lineno=3)
DEBUG 2022-02-07 18:03:06,327 stack ['$2load_global.0', '$tmp04.1', '$dtype6.2']
DEBUG 2022-02-07 18:03:06,327 dispatch pc=10, inst=RETURN_VALUE(arg=None, lineno=3)
DEBUG 2022-02-07 18:03:06,327 stack ['$8call_function.3']
DEBUG 2022-02-07 18:03:06,327 end state. edges=[]
DEBUG 2022-02-07 18:03:06,327 -------------------------Prune PHIs-------------------------
DEBUG 2022-02-07 18:03:06,327 Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
DEBUG 2022-02-07 18:03:06,327 defmap: {}
DEBUG 2022-02-07 18:03:06,327 phismap: defaultdict(<class 'set'>, {})
DEBUG 2022-02-07 18:03:06,327 changing phismap: defaultdict(<class 'set'>, {})
DEBUG 2022-02-07 18:03:06,327 keep phismap: {}
DEBUG 2022-02-07 18:03:06,327 new_out: defaultdict(<class 'dict'>, {})
DEBUG 2022-02-07 18:03:06,327 ----------------------DONE Prune PHIs-----------------------
DEBUG 2022-02-07 18:03:06,327 block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$2load_global.0'}), (4, {'res': '$tmp04.1'}), (6, {'res': '$dtype6.2'}), (8, {'func': '$2load_global.0', 'args': ['$tmp04.1', '$dtype6.2'], 'res': '$8call_function.3'}), (10, {'retval': '$8call_function.3', 'castval': '$10return_value.4'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG 2022-02-07 18:03:06,327 label 0:
    tmp0 = arg(0, name=tmp0)                 ['tmp0']
    dtype = arg(1, name=dtype)               ['dtype']
    $2load_global.0 = global(intrin: <intrinsic stub>) ['$2load_global.0']
    $8call_function.3 = call $2load_global.0(tmp0, dtype, func=$2load_global.0, args=[Var(tmp0, <string>:3), Var(dtype, <string>:3)], kws=(), vararg=None, target=None) ['$2load_global.0', '$8call_function.3', 'dtype', 'tmp0']
    $10return_value.4 = cast(value=$8call_function.3) ['$10return_value.4', '$8call_function.3']
    return $10return_value.4                 ['$10return_value.4']

DEBUG 2022-02-07 18:03:06,327 ==== SSA block analysis pass on 0
DEBUG 2022-02-07 18:03:06,327 Running <numba.core.ssa._GatherDefsHandler object at 0x00000196AF157880>
DEBUG 2022-02-07 18:03:06,327 on stmt: tmp0 = arg(0, name=tmp0)
DEBUG 2022-02-07 18:03:06,327 on stmt: dtype = arg(1, name=dtype)
DEBUG 2022-02-07 18:03:06,327 on stmt: $2load_global.0 = global(intrin: <intrinsic stub>)
DEBUG 2022-02-07 18:03:06,327 on stmt: $8call_function.3 = call $2load_global.0(tmp0, dtype, func=$2load_global.0, args=[Var(tmp0, <string>:3), Var(dtype, <string>:3)], kws=(), vararg=None, target=None)
DEBUG 2022-02-07 18:03:06,327 on stmt: $10return_value.4 = cast(value=$8call_function.3)
DEBUG 2022-02-07 18:03:06,327 on stmt: return $10return_value.4
DEBUG 2022-02-07 18:03:06,327 defs defaultdict(<class 'list'>,
            {'$10return_value.4': [<numba.core.ir.Assign object at 0x00000196AF12AFD0>],
             '$2load_global.0': [<numba.core.ir.Assign object at 0x00000196AF1572B0>],
             '$8call_function.3': [<numba.core.ir.Assign object at 0x00000196AF12AF10>],
             'dtype': [<numba.core.ir.Assign object at 0x00000196AF157C10>],
             'tmp0': [<numba.core.ir.Assign object at 0x00000196AF157D00>]})
DEBUG 2022-02-07 18:03:06,327 SSA violators set()
DEBUG 2022-02-07 18:03:06,728 bytecode dump:
>          0	NOP(arg=None, lineno=159)
           2	LOAD_FAST(arg=0, lineno=159)
           4	LOAD_METHOD(arg=0, lineno=159)
           6	CALL_METHOD(arg=0, lineno=159)
           8	STORE_FAST(arg=7, lineno=159)
          10	LOAD_CONST(arg=1, lineno=161)
          12	STORE_FAST(arg=8, lineno=161)
          14	LOAD_GLOBAL(arg=1, lineno=162)
          16	LOAD_ATTR(arg=2, lineno=162)
          18	LOAD_CONST(arg=2, lineno=162)
          20	LOAD_FAST(arg=4, lineno=162)
          22	LOAD_CONST(arg=3, lineno=162)
          24	BINARY_ADD(arg=None, lineno=162)
          26	BUILD_TUPLE(arg=2, lineno=162)
          28	LOAD_GLOBAL(arg=1, lineno=162)
          30	LOAD_ATTR(arg=3, lineno=162)
          32	LOAD_CONST(arg=4, lineno=162)
          34	CALL_FUNCTION_KW(arg=2, lineno=162)
          36	STORE_FAST(arg=9, lineno=162)
          38	LOAD_CONST(arg=3, lineno=163)
          40	LOAD_FAST(arg=9, lineno=163)
          42	LOAD_CONST(arg=5, lineno=163)
          44	STORE_SUBSCR(arg=None, lineno=163)
          46	LOAD_GLOBAL(arg=4, lineno=164)
          48	LOAD_CONST(arg=3, lineno=164)
          50	LOAD_FAST(arg=4, lineno=164)
          52	LOAD_CONST(arg=3, lineno=164)
          54	BINARY_ADD(arg=None, lineno=164)
          56	CALL_FUNCTION(arg=2, lineno=164)
          58	GET_ITER(arg=None, lineno=164)
>         60	FOR_ITER(arg=240, lineno=164)
          62	STORE_FAST(arg=10, lineno=164)
          64	LOAD_FAST(arg=10, lineno=165)
          66	LOAD_CONST(arg=3, lineno=165)
          68	COMPARE_OP(arg=2, lineno=165)
          70	POP_JUMP_IF_FALSE(arg=78, lineno=165)
          72	LOAD_FAST(arg=5, lineno=166)
          74	STORE_FAST(arg=11, lineno=166)
          76	JUMP_FORWARD(arg=62, lineno=166)
>         78	LOAD_FAST(arg=10, lineno=167)
          80	LOAD_CONST(arg=2, lineno=167)
          82	BINARY_MODULO(arg=None, lineno=167)
          84	LOAD_CONST(arg=1, lineno=167)
          86	COMPARE_OP(arg=2, lineno=167)
          88	POP_JUMP_IF_FALSE(arg=124, lineno=167)
          90	LOAD_FAST(arg=7, lineno=168)
          92	LOAD_METHOD(arg=5, lineno=168)
          94	CALL_METHOD(arg=0, lineno=168)
          96	LOAD_FAST(arg=10, lineno=168)
          98	BINARY_TRUE_DIVIDE(arg=None, lineno=168)
         100	LOAD_FAST(arg=2, lineno=168)
         102	LOAD_FAST(arg=3, lineno=168)
         104	BINARY_MATRIX_MULTIPLY(arg=None, lineno=168)
         106	LOAD_CONST(arg=2, lineno=168)
         108	BINARY_TRUE_DIVIDE(arg=None, lineno=168)
         110	BINARY_ADD(arg=None, lineno=168)
         112	STORE_FAST(arg=11, lineno=168)
         114	LOAD_FAST(arg=7, lineno=169)
         116	LOAD_FAST(arg=0, lineno=169)
         118	INPLACE_MULTIPLY(arg=None, lineno=169)
         120	STORE_FAST(arg=7, lineno=169)
         122	JUMP_FORWARD(arg=16, lineno=169)
>        124	LOAD_FAST(arg=6, lineno=171)
         126	LOAD_FAST(arg=3, lineno=171)
         128	BINARY_MATRIX_MULTIPLY(arg=None, lineno=171)
         130	STORE_FAST(arg=11, lineno=171)
         132	LOAD_FAST(arg=1, lineno=172)
         134	LOAD_FAST(arg=3, lineno=172)
         136	BINARY_MATRIX_MULTIPLY(arg=None, lineno=172)
         138	STORE_FAST(arg=3, lineno=172)
>        140	LOAD_CONST(arg=3, lineno=174)
         142	STORE_FAST(arg=12, lineno=174)
         144	LOAD_CONST(arg=3, lineno=175)
         146	LOAD_FAST(arg=8, lineno=175)
         148	BINARY_SUBTRACT(arg=None, lineno=175)
         150	STORE_FAST(arg=8, lineno=175)
         152	LOAD_FAST(arg=9, lineno=176)
         154	LOAD_CONST(arg=3, lineno=176)
         156	LOAD_FAST(arg=8, lineno=176)
         158	BINARY_SUBTRACT(arg=None, lineno=176)
         160	LOAD_CONST(arg=0, lineno=176)
         162	LOAD_CONST(arg=0, lineno=176)
         164	BUILD_SLICE(arg=2, lineno=176)
         166	BUILD_TUPLE(arg=2, lineno=176)
         168	BINARY_SUBSCR(arg=None, lineno=176)
         170	LOAD_FAST(arg=9, lineno=176)
         172	LOAD_FAST(arg=8, lineno=176)
         174	LOAD_CONST(arg=0, lineno=176)
         176	LOAD_CONST(arg=0, lineno=176)
         178	BUILD_SLICE(arg=2, lineno=176)
         180	BUILD_TUPLE(arg=2, lineno=176)
         182	STORE_SUBSCR(arg=None, lineno=176)
         184	LOAD_GLOBAL(arg=4, lineno=177)
         186	LOAD_CONST(arg=3, lineno=177)
         188	LOAD_FAST(arg=4, lineno=177)
         190	LOAD_FAST(arg=10, lineno=177)
         192	BINARY_FLOOR_DIVIDE(arg=None, lineno=177)
         194	LOAD_CONST(arg=3, lineno=177)
         196	BINARY_ADD(arg=None, lineno=177)
         198	CALL_FUNCTION(arg=2, lineno=177)
         200	GET_ITER(arg=None, lineno=177)
>        202	FOR_ITER(arg=96, lineno=177)
         204	STORE_FAST(arg=13, lineno=177)
         206	LOAD_FAST(arg=12, lineno=178)
         208	LOAD_FAST(arg=11, lineno=178)
         210	LOAD_FAST(arg=13, lineno=178)
         212	BINARY_TRUE_DIVIDE(arg=None, lineno=178)
         214	INPLACE_MULTIPLY(arg=None, lineno=178)
         216	STORE_FAST(arg=12, lineno=178)
         218	LOAD_GLOBAL(arg=4, lineno=179)
         220	LOAD_FAST(arg=10, lineno=179)
         222	LOAD_FAST(arg=13, lineno=179)
         224	BINARY_MULTIPLY(arg=None, lineno=179)
         226	LOAD_CONST(arg=3, lineno=179)
         228	BINARY_ADD(arg=None, lineno=179)
         230	LOAD_FAST(arg=4, lineno=179)
         232	LOAD_CONST(arg=2, lineno=179)
         234	BINARY_ADD(arg=None, lineno=179)
         236	CALL_FUNCTION(arg=2, lineno=179)
         238	GET_ITER(arg=None, lineno=179)
>        240	FOR_ITER(arg=56, lineno=179)
         242	STORE_FAST(arg=14, lineno=179)
         244	LOAD_FAST(arg=9, lineno=180)
         246	LOAD_FAST(arg=8, lineno=180)
         248	LOAD_FAST(arg=14, lineno=180)
         250	LOAD_CONST(arg=3, lineno=180)
         252	BINARY_SUBTRACT(arg=None, lineno=180)
         254	BUILD_TUPLE(arg=2, lineno=180)
         256	DUP_TOP_TWO(arg=None, lineno=180)
         258	BINARY_SUBSCR(arg=None, lineno=180)
         260	LOAD_FAST(arg=9, lineno=180)
         262	LOAD_CONST(arg=3, lineno=180)
         264	LOAD_FAST(arg=8, lineno=180)
         266	BINARY_SUBTRACT(arg=None, lineno=180)
         268	LOAD_FAST(arg=14, lineno=180)
         270	LOAD_FAST(arg=10, lineno=180)
         272	LOAD_FAST(arg=13, lineno=180)
         274	BINARY_MULTIPLY(arg=None, lineno=180)
         276	BINARY_SUBTRACT(arg=None, lineno=180)
         278	LOAD_CONST(arg=3, lineno=180)
         280	BINARY_SUBTRACT(arg=None, lineno=180)
         282	BUILD_TUPLE(arg=2, lineno=180)
         284	BINARY_SUBSCR(arg=None, lineno=180)
         286	LOAD_FAST(arg=12, lineno=180)
         288	BINARY_MULTIPLY(arg=None, lineno=180)
         290	INPLACE_ADD(arg=None, lineno=180)
         292	ROT_THREE(arg=None, lineno=180)
         294	STORE_SUBSCR(arg=None, lineno=180)
         296	JUMP_ABSOLUTE(arg=240, lineno=180)
>        298	JUMP_ABSOLUTE(arg=202, lineno=180)
>        300	JUMP_ABSOLUTE(arg=60, lineno=180)
>        302	LOAD_FAST(arg=9, lineno=182)
         304	LOAD_FAST(arg=8, lineno=182)
         306	LOAD_CONST(arg=0, lineno=182)
         308	LOAD_CONST(arg=0, lineno=182)
         310	BUILD_SLICE(arg=2, lineno=182)
         312	BUILD_TUPLE(arg=2, lineno=182)
         314	BINARY_SUBSCR(arg=None, lineno=182)
         316	RETURN_VALUE(arg=None, lineno=182)
DEBUG 2022-02-07 18:03:06,728 pending: deque([State(pc_initial=0 nstack_initial=0)])
DEBUG 2022-02-07 18:03:06,728 stack: []
DEBUG 2022-02-07 18:03:06,728 dispatch pc=0, inst=NOP(arg=None, lineno=159)
DEBUG 2022-02-07 18:03:06,728 stack []
DEBUG 2022-02-07 18:03:06,728 dispatch pc=2, inst=LOAD_FAST(arg=0, lineno=159)
DEBUG 2022-02-07 18:03:06,728 stack []
DEBUG 2022-02-07 18:03:06,728 dispatch pc=4, inst=LOAD_METHOD(arg=0, lineno=159)
DEBUG 2022-02-07 18:03:06,728 stack ['$E2.0']
DEBUG 2022-02-07 18:03:06,728 dispatch pc=6, inst=CALL_METHOD(arg=0, lineno=159)
DEBUG 2022-02-07 18:03:06,728 stack ['$4load_method.1']
DEBUG 2022-02-07 18:03:06,728 dispatch pc=8, inst=STORE_FAST(arg=7, lineno=159)
DEBUG 2022-02-07 18:03:06,728 stack ['$6call_method.2']
DEBUG 2022-02-07 18:03:06,728 dispatch pc=10, inst=LOAD_CONST(arg=1, lineno=161)
DEBUG 2022-02-07 18:03:06,728 stack []
DEBUG 2022-02-07 18:03:06,728 dispatch pc=12, inst=STORE_FAST(arg=8, lineno=161)
DEBUG 2022-02-07 18:03:06,728 stack ['$const10.3']
DEBUG 2022-02-07 18:03:06,728 dispatch pc=14, inst=LOAD_GLOBAL(arg=1, lineno=162)
DEBUG 2022-02-07 18:03:06,728 stack []
DEBUG 2022-02-07 18:03:06,728 dispatch pc=16, inst=LOAD_ATTR(arg=2, lineno=162)
DEBUG 2022-02-07 18:03:06,728 stack ['$14load_global.4']
DEBUG 2022-02-07 18:03:06,728 dispatch pc=18, inst=LOAD_CONST(arg=2, lineno=162)
DEBUG 2022-02-07 18:03:06,728 stack ['$16load_attr.5']
DEBUG 2022-02-07 18:03:06,728 dispatch pc=20, inst=LOAD_FAST(arg=4, lineno=162)
DEBUG 2022-02-07 18:03:06,728 stack ['$16load_attr.5', '$const18.6']
DEBUG 2022-02-07 18:03:06,728 dispatch pc=22, inst=LOAD_CONST(arg=3, lineno=162)
DEBUG 2022-02-07 18:03:06,728 stack ['$16load_attr.5', '$const18.6', '$n20.7']
DEBUG 2022-02-07 18:03:06,728 dispatch pc=24, inst=BINARY_ADD(arg=None, lineno=162)
DEBUG 2022-02-07 18:03:06,728 stack ['$16load_attr.5', '$const18.6', '$n20.7', '$const22.8']
DEBUG 2022-02-07 18:03:06,728 dispatch pc=26, inst=BUILD_TUPLE(arg=2, lineno=162)
DEBUG 2022-02-07 18:03:06,728 stack ['$16load_attr.5', '$const18.6', '$24binary_add.9']
DEBUG 2022-02-07 18:03:06,728 dispatch pc=28, inst=LOAD_GLOBAL(arg=1, lineno=162)
DEBUG 2022-02-07 18:03:06,728 stack ['$16load_attr.5', '$26build_tuple.10']
DEBUG 2022-02-07 18:03:06,728 dispatch pc=30, inst=LOAD_ATTR(arg=3, lineno=162)
DEBUG 2022-02-07 18:03:06,728 stack ['$16load_attr.5', '$26build_tuple.10', '$28load_global.11']
DEBUG 2022-02-07 18:03:06,728 dispatch pc=32, inst=LOAD_CONST(arg=4, lineno=162)
DEBUG 2022-02-07 18:03:06,743 stack ['$16load_attr.5', '$26build_tuple.10', '$30load_attr.12']
DEBUG 2022-02-07 18:03:06,743 dispatch pc=34, inst=CALL_FUNCTION_KW(arg=2, lineno=162)
DEBUG 2022-02-07 18:03:06,743 stack ['$16load_attr.5', '$26build_tuple.10', '$30load_attr.12', '$const32.13']
DEBUG 2022-02-07 18:03:06,743 dispatch pc=36, inst=STORE_FAST(arg=9, lineno=162)
DEBUG 2022-02-07 18:03:06,743 stack ['$34call_function_kw.14']
DEBUG 2022-02-07 18:03:06,743 dispatch pc=38, inst=LOAD_CONST(arg=3, lineno=163)
DEBUG 2022-02-07 18:03:06,743 stack []
DEBUG 2022-02-07 18:03:06,743 dispatch pc=40, inst=LOAD_FAST(arg=9, lineno=163)
DEBUG 2022-02-07 18:03:06,743 stack ['$const38.15']
DEBUG 2022-02-07 18:03:06,743 dispatch pc=42, inst=LOAD_CONST(arg=5, lineno=163)
DEBUG 2022-02-07 18:03:06,743 stack ['$const38.15', '$comb40.16']
DEBUG 2022-02-07 18:03:06,743 dispatch pc=44, inst=STORE_SUBSCR(arg=None, lineno=163)
DEBUG 2022-02-07 18:03:06,743 stack ['$const38.15', '$comb40.16', '$const42.17']
DEBUG 2022-02-07 18:03:06,743 dispatch pc=46, inst=LOAD_GLOBAL(arg=4, lineno=164)
DEBUG 2022-02-07 18:03:06,743 stack []
DEBUG 2022-02-07 18:03:06,743 dispatch pc=48, inst=LOAD_CONST(arg=3, lineno=164)
DEBUG 2022-02-07 18:03:06,743 stack ['$46load_global.18']
DEBUG 2022-02-07 18:03:06,743 dispatch pc=50, inst=LOAD_FAST(arg=4, lineno=164)
DEBUG 2022-02-07 18:03:06,743 stack ['$46load_global.18', '$const48.19']
DEBUG 2022-02-07 18:03:06,743 dispatch pc=52, inst=LOAD_CONST(arg=3, lineno=164)
DEBUG 2022-02-07 18:03:06,743 stack ['$46load_global.18', '$const48.19', '$n50.20']
DEBUG 2022-02-07 18:03:06,743 dispatch pc=54, inst=BINARY_ADD(arg=None, lineno=164)
DEBUG 2022-02-07 18:03:06,743 stack ['$46load_global.18', '$const48.19', '$n50.20', '$const52.21']
DEBUG 2022-02-07 18:03:06,743 dispatch pc=56, inst=CALL_FUNCTION(arg=2, lineno=164)
DEBUG 2022-02-07 18:03:06,743 stack ['$46load_global.18', '$const48.19', '$54binary_add.22']
DEBUG 2022-02-07 18:03:06,743 dispatch pc=58, inst=GET_ITER(arg=None, lineno=164)
DEBUG 2022-02-07 18:03:06,743 stack ['$56call_function.23']
DEBUG 2022-02-07 18:03:06,743 end state. edges=[Edge(pc=60, stack=('$58get_iter.24',), blockstack=(), npush=0)]
DEBUG 2022-02-07 18:03:06,743 pending: deque([State(pc_initial=60 nstack_initial=1)])
DEBUG 2022-02-07 18:03:06,743 stack: ['$phi60.0']
DEBUG 2022-02-07 18:03:06,743 dispatch pc=60, inst=FOR_ITER(arg=240, lineno=164)
DEBUG 2022-02-07 18:03:06,743 stack ['$phi60.0']
DEBUG 2022-02-07 18:03:06,743 end state. edges=[Edge(pc=302, stack=(), blockstack=(), npush=0), Edge(pc=62, stack=('$phi60.0', '$60for_iter.2'), blockstack=(), npush=0)]
DEBUG 2022-02-07 18:03:06,743 pending: deque([State(pc_initial=302 nstack_initial=0), State(pc_initial=62 nstack_initial=2)])
DEBUG 2022-02-07 18:03:06,743 stack: []
DEBUG 2022-02-07 18:03:06,750 dispatch pc=302, inst=LOAD_FAST(arg=9, lineno=182)
DEBUG 2022-02-07 18:03:06,750 stack []
DEBUG 2022-02-07 18:03:06,750 dispatch pc=304, inst=LOAD_FAST(arg=8, lineno=182)
DEBUG 2022-02-07 18:03:06,750 stack ['$comb302.0']
DEBUG 2022-02-07 18:03:06,750 dispatch pc=306, inst=LOAD_CONST(arg=0, lineno=182)
DEBUG 2022-02-07 18:03:06,750 stack ['$comb302.0', '$count304.1']
DEBUG 2022-02-07 18:03:06,750 dispatch pc=308, inst=LOAD_CONST(arg=0, lineno=182)
DEBUG 2022-02-07 18:03:06,750 stack ['$comb302.0', '$count304.1', '$const306.2']
DEBUG 2022-02-07 18:03:06,750 dispatch pc=310, inst=BUILD_SLICE(arg=2, lineno=182)
DEBUG 2022-02-07 18:03:06,750 stack ['$comb302.0', '$count304.1', '$const306.2', '$const308.3']
DEBUG 2022-02-07 18:03:06,750 dispatch pc=312, inst=BUILD_TUPLE(arg=2, lineno=182)
DEBUG 2022-02-07 18:03:06,750 stack ['$comb302.0', '$count304.1', '$310build_slice.5']
DEBUG 2022-02-07 18:03:06,750 dispatch pc=314, inst=BINARY_SUBSCR(arg=None, lineno=182)
DEBUG 2022-02-07 18:03:06,750 stack ['$comb302.0', '$312build_tuple.6']
DEBUG 2022-02-07 18:03:06,750 dispatch pc=316, inst=RETURN_VALUE(arg=None, lineno=182)
DEBUG 2022-02-07 18:03:06,750 stack ['$314binary_subscr.7']
DEBUG 2022-02-07 18:03:06,750 end state. edges=[]
DEBUG 2022-02-07 18:03:06,750 pending: deque([State(pc_initial=62 nstack_initial=2)])
DEBUG 2022-02-07 18:03:06,750 stack: ['$phi62.0', '$phi62.1']
DEBUG 2022-02-07 18:03:06,750 dispatch pc=62, inst=STORE_FAST(arg=10, lineno=164)
DEBUG 2022-02-07 18:03:06,750 stack ['$phi62.0', '$phi62.1']
DEBUG 2022-02-07 18:03:06,750 dispatch pc=64, inst=LOAD_FAST(arg=10, lineno=165)
DEBUG 2022-02-07 18:03:06,750 stack ['$phi62.0']
DEBUG 2022-02-07 18:03:06,750 dispatch pc=66, inst=LOAD_CONST(arg=3, lineno=165)
DEBUG 2022-02-07 18:03:06,750 stack ['$phi62.0', '$i64.2']
DEBUG 2022-02-07 18:03:06,750 dispatch pc=68, inst=COMPARE_OP(arg=2, lineno=165)
DEBUG 2022-02-07 18:03:06,750 stack ['$phi62.0', '$i64.2', '$const66.3']
DEBUG 2022-02-07 18:03:06,750 dispatch pc=70, inst=POP_JUMP_IF_FALSE(arg=78, lineno=165)
DEBUG 2022-02-07 18:03:06,750 stack ['$phi62.0', '$68compare_op.4']
DEBUG 2022-02-07 18:03:06,750 end state. edges=[Edge(pc=72, stack=('$phi62.0',), blockstack=(), npush=0), Edge(pc=78, stack=('$phi62.0',), blockstack=(), npush=0)]
DEBUG 2022-02-07 18:03:06,750 pending: deque([State(pc_initial=72 nstack_initial=1), State(pc_initial=78 nstack_initial=1)])
DEBUG 2022-02-07 18:03:06,750 stack: ['$phi72.0']
DEBUG 2022-02-07 18:03:06,750 dispatch pc=72, inst=LOAD_FAST(arg=5, lineno=166)
DEBUG 2022-02-07 18:03:06,750 stack ['$phi72.0']
DEBUG 2022-02-07 18:03:06,750 dispatch pc=74, inst=STORE_FAST(arg=11, lineno=166)
DEBUG 2022-02-07 18:03:06,750 stack ['$phi72.0', '$oddloop72.1']
DEBUG 2022-02-07 18:03:06,750 dispatch pc=76, inst=JUMP_FORWARD(arg=62, lineno=166)
DEBUG 2022-02-07 18:03:06,750 stack ['$phi72.0']
DEBUG 2022-02-07 18:03:06,750 end state. edges=[Edge(pc=140, stack=('$phi72.0',), blockstack=(), npush=0)]
DEBUG 2022-02-07 18:03:06,750 pending: deque([State(pc_initial=78 nstack_initial=1), State(pc_initial=140 nstack_initial=1)])
DEBUG 2022-02-07 18:03:06,750 stack: ['$phi78.0']
DEBUG 2022-02-07 18:03:06,750 dispatch pc=78, inst=LOAD_FAST(arg=10, lineno=167)
DEBUG 2022-02-07 18:03:06,750 stack ['$phi78.0']
DEBUG 2022-02-07 18:03:06,750 dispatch pc=80, inst=LOAD_CONST(arg=2, lineno=167)
DEBUG 2022-02-07 18:03:06,750 stack ['$phi78.0', '$i78.1']
DEBUG 2022-02-07 18:03:06,750 dispatch pc=82, inst=BINARY_MODULO(arg=None, lineno=167)
DEBUG 2022-02-07 18:03:06,750 stack ['$phi78.0', '$i78.1', '$const80.2']
DEBUG 2022-02-07 18:03:06,750 dispatch pc=84, inst=LOAD_CONST(arg=1, lineno=167)
DEBUG 2022-02-07 18:03:06,750 stack ['$phi78.0', '$82binary_modulo.3']
DEBUG 2022-02-07 18:03:06,750 dispatch pc=86, inst=COMPARE_OP(arg=2, lineno=167)
DEBUG 2022-02-07 18:03:06,750 stack ['$phi78.0', '$82binary_modulo.3', '$const84.4']
DEBUG 2022-02-07 18:03:06,750 dispatch pc=88, inst=POP_JUMP_IF_FALSE(arg=124, lineno=167)
DEBUG 2022-02-07 18:03:06,750 stack ['$phi78.0', '$86compare_op.5']
DEBUG 2022-02-07 18:03:06,750 end state. edges=[Edge(pc=90, stack=('$phi78.0',), blockstack=(), npush=0), Edge(pc=124, stack=('$phi78.0',), blockstack=(), npush=0)]
DEBUG 2022-02-07 18:03:06,750 pending: deque([State(pc_initial=140 nstack_initial=1), State(pc_initial=90 nstack_initial=1), State(pc_initial=124 nstack_initial=1)])
DEBUG 2022-02-07 18:03:06,750 stack: ['$phi140.0']
DEBUG 2022-02-07 18:03:06,750 dispatch pc=140, inst=LOAD_CONST(arg=3, lineno=174)
DEBUG 2022-02-07 18:03:06,750 stack ['$phi140.0']
DEBUG 2022-02-07 18:03:06,750 dispatch pc=142, inst=STORE_FAST(arg=12, lineno=174)
DEBUG 2022-02-07 18:03:06,750 stack ['$phi140.0', '$const140.1']
DEBUG 2022-02-07 18:03:06,750 dispatch pc=144, inst=LOAD_CONST(arg=3, lineno=175)
DEBUG 2022-02-07 18:03:06,750 stack ['$phi140.0']
DEBUG 2022-02-07 18:03:06,750 dispatch pc=146, inst=LOAD_FAST(arg=8, lineno=175)
DEBUG 2022-02-07 18:03:06,750 stack ['$phi140.0', '$const144.2']
DEBUG 2022-02-07 18:03:06,750 dispatch pc=148, inst=BINARY_SUBTRACT(arg=None, lineno=175)
DEBUG 2022-02-07 18:03:06,750 stack ['$phi140.0', '$const144.2', '$count146.3']
DEBUG 2022-02-07 18:03:06,750 dispatch pc=150, inst=STORE_FAST(arg=8, lineno=175)
DEBUG 2022-02-07 18:03:06,750 stack ['$phi140.0', '$148binary_subtract.4']
DEBUG 2022-02-07 18:03:06,750 dispatch pc=152, inst=LOAD_FAST(arg=9, lineno=176)
DEBUG 2022-02-07 18:03:06,750 stack ['$phi140.0']
DEBUG 2022-02-07 18:03:06,750 dispatch pc=154, inst=LOAD_CONST(arg=3, lineno=176)
DEBUG 2022-02-07 18:03:06,750 stack ['$phi140.0', '$comb152.5']
DEBUG 2022-02-07 18:03:06,750 dispatch pc=156, inst=LOAD_FAST(arg=8, lineno=176)
DEBUG 2022-02-07 18:03:06,750 stack ['$phi140.0', '$comb152.5', '$const154.6']
DEBUG 2022-02-07 18:03:06,750 dispatch pc=158, inst=BINARY_SUBTRACT(arg=None, lineno=176)
DEBUG 2022-02-07 18:03:06,750 stack ['$phi140.0', '$comb152.5', '$const154.6', '$count156.7']
DEBUG 2022-02-07 18:03:06,750 dispatch pc=160, inst=LOAD_CONST(arg=0, lineno=176)
DEBUG 2022-02-07 18:03:06,750 stack ['$phi140.0', '$comb152.5', '$158binary_subtract.8']
DEBUG 2022-02-07 18:03:06,750 dispatch pc=162, inst=LOAD_CONST(arg=0, lineno=176)
DEBUG 2022-02-07 18:03:06,750 stack ['$phi140.0', '$comb152.5', '$158binary_subtract.8', '$const160.9']
DEBUG 2022-02-07 18:03:06,750 dispatch pc=164, inst=BUILD_SLICE(arg=2, lineno=176)
DEBUG 2022-02-07 18:03:06,750 stack ['$phi140.0', '$comb152.5', '$158binary_subtract.8', '$const160.9', '$const162.10']
DEBUG 2022-02-07 18:03:06,750 dispatch pc=166, inst=BUILD_TUPLE(arg=2, lineno=176)
DEBUG 2022-02-07 18:03:06,750 stack ['$phi140.0', '$comb152.5', '$158binary_subtract.8', '$164build_slice.12']
DEBUG 2022-02-07 18:03:06,750 dispatch pc=168, inst=BINARY_SUBSCR(arg=None, lineno=176)
DEBUG 2022-02-07 18:03:06,750 stack ['$phi140.0', '$comb152.5', '$166build_tuple.13']
DEBUG 2022-02-07 18:03:06,765 dispatch pc=170, inst=LOAD_FAST(arg=9, lineno=176)
DEBUG 2022-02-07 18:03:06,765 stack ['$phi140.0', '$168binary_subscr.14']
DEBUG 2022-02-07 18:03:06,765 dispatch pc=172, inst=LOAD_FAST(arg=8, lineno=176)
DEBUG 2022-02-07 18:03:06,765 stack ['$phi140.0', '$168binary_subscr.14', '$comb170.15']
DEBUG 2022-02-07 18:03:06,765 dispatch pc=174, inst=LOAD_CONST(arg=0, lineno=176)
DEBUG 2022-02-07 18:03:06,765 stack ['$phi140.0', '$168binary_subscr.14', '$comb170.15', '$count172.16']
DEBUG 2022-02-07 18:03:06,765 dispatch pc=176, inst=LOAD_CONST(arg=0, lineno=176)
DEBUG 2022-02-07 18:03:06,765 stack ['$phi140.0', '$168binary_subscr.14', '$comb170.15', '$count172.16', '$const174.17']
DEBUG 2022-02-07 18:03:06,765 dispatch pc=178, inst=BUILD_SLICE(arg=2, lineno=176)
DEBUG 2022-02-07 18:03:06,765 stack ['$phi140.0', '$168binary_subscr.14', '$comb170.15', '$count172.16', '$const174.17', '$const176.18']
DEBUG 2022-02-07 18:03:06,765 dispatch pc=180, inst=BUILD_TUPLE(arg=2, lineno=176)
DEBUG 2022-02-07 18:03:06,765 stack ['$phi140.0', '$168binary_subscr.14', '$comb170.15', '$count172.16', '$178build_slice.20']
DEBUG 2022-02-07 18:03:06,765 dispatch pc=182, inst=STORE_SUBSCR(arg=None, lineno=176)
DEBUG 2022-02-07 18:03:06,765 stack ['$phi140.0', '$168binary_subscr.14', '$comb170.15', '$180build_tuple.21']
DEBUG 2022-02-07 18:03:06,765 dispatch pc=184, inst=LOAD_GLOBAL(arg=4, lineno=177)
DEBUG 2022-02-07 18:03:06,765 stack ['$phi140.0']
DEBUG 2022-02-07 18:03:06,765 dispatch pc=186, inst=LOAD_CONST(arg=3, lineno=177)
DEBUG 2022-02-07 18:03:06,765 stack ['$phi140.0', '$184load_global.22']
DEBUG 2022-02-07 18:03:06,765 dispatch pc=188, inst=LOAD_FAST(arg=4, lineno=177)
DEBUG 2022-02-07 18:03:06,765 stack ['$phi140.0', '$184load_global.22', '$const186.23']
DEBUG 2022-02-07 18:03:06,765 dispatch pc=190, inst=LOAD_FAST(arg=10, lineno=177)
DEBUG 2022-02-07 18:03:06,765 stack ['$phi140.0', '$184load_global.22', '$const186.23', '$n188.24']
DEBUG 2022-02-07 18:03:06,765 dispatch pc=192, inst=BINARY_FLOOR_DIVIDE(arg=None, lineno=177)
DEBUG 2022-02-07 18:03:06,765 stack ['$phi140.0', '$184load_global.22', '$const186.23', '$n188.24', '$i190.25']
DEBUG 2022-02-07 18:03:06,765 dispatch pc=194, inst=LOAD_CONST(arg=3, lineno=177)
DEBUG 2022-02-07 18:03:06,765 stack ['$phi140.0', '$184load_global.22', '$const186.23', '$192binary_floor_divide.26']
DEBUG 2022-02-07 18:03:06,765 dispatch pc=196, inst=BINARY_ADD(arg=None, lineno=177)
DEBUG 2022-02-07 18:03:06,765 stack ['$phi140.0', '$184load_global.22', '$const186.23', '$192binary_floor_divide.26', '$const194.27']
DEBUG 2022-02-07 18:03:06,765 dispatch pc=198, inst=CALL_FUNCTION(arg=2, lineno=177)
DEBUG 2022-02-07 18:03:06,765 stack ['$phi140.0', '$184load_global.22', '$const186.23', '$196binary_add.28']
DEBUG 2022-02-07 18:03:06,765 dispatch pc=200, inst=GET_ITER(arg=None, lineno=177)
DEBUG 2022-02-07 18:03:06,765 stack ['$phi140.0', '$198call_function.29']
DEBUG 2022-02-07 18:03:06,765 end state. edges=[Edge(pc=202, stack=('$phi140.0', '$200get_iter.30'), blockstack=(), npush=0)]
DEBUG 2022-02-07 18:03:06,765 pending: deque([State(pc_initial=90 nstack_initial=1), State(pc_initial=124 nstack_initial=1), State(pc_initial=202 nstack_initial=2)])
DEBUG 2022-02-07 18:03:06,765 stack: ['$phi90.0']
DEBUG 2022-02-07 18:03:06,765 dispatch pc=90, inst=LOAD_FAST(arg=7, lineno=168)
DEBUG 2022-02-07 18:03:06,765 stack ['$phi90.0']
DEBUG 2022-02-07 18:03:06,765 dispatch pc=92, inst=LOAD_METHOD(arg=5, lineno=168)
DEBUG 2022-02-07 18:03:06,765 stack ['$phi90.0', '$E_k90.1']
DEBUG 2022-02-07 18:03:06,765 dispatch pc=94, inst=CALL_METHOD(arg=0, lineno=168)
DEBUG 2022-02-07 18:03:06,765 stack ['$phi90.0', '$92load_method.2']
DEBUG 2022-02-07 18:03:06,765 dispatch pc=96, inst=LOAD_FAST(arg=10, lineno=168)
DEBUG 2022-02-07 18:03:06,765 stack ['$phi90.0', '$94call_method.3']
DEBUG 2022-02-07 18:03:06,765 dispatch pc=98, inst=BINARY_TRUE_DIVIDE(arg=None, lineno=168)
DEBUG 2022-02-07 18:03:06,765 stack ['$phi90.0', '$94call_method.3', '$i96.4']
DEBUG 2022-02-07 18:03:06,765 dispatch pc=100, inst=LOAD_FAST(arg=2, lineno=168)
DEBUG 2022-02-07 18:03:06,765 stack ['$phi90.0', '$98binary_true_divide.5']
DEBUG 2022-02-07 18:03:06,765 dispatch pc=102, inst=LOAD_FAST(arg=3, lineno=168)
DEBUG 2022-02-07 18:03:06,765 stack ['$phi90.0', '$98binary_true_divide.5', '$XD_S100.6']
DEBUG 2022-02-07 18:03:06,765 dispatch pc=104, inst=BINARY_MATRIX_MULTIPLY(arg=None, lineno=168)
DEBUG 2022-02-07 18:03:06,765 stack ['$phi90.0', '$98binary_true_divide.5', '$XD_S100.6', '$D_S102.7']
DEBUG 2022-02-07 18:03:06,765 dispatch pc=106, inst=LOAD_CONST(arg=2, lineno=168)
DEBUG 2022-02-07 18:03:06,765 stack ['$phi90.0', '$98binary_true_divide.5', '$104binary_matrix_multiply.8']
DEBUG 2022-02-07 18:03:06,765 dispatch pc=108, inst=BINARY_TRUE_DIVIDE(arg=None, lineno=168)
DEBUG 2022-02-07 18:03:06,765 stack ['$phi90.0', '$98binary_true_divide.5', '$104binary_matrix_multiply.8', '$const106.9']
DEBUG 2022-02-07 18:03:06,765 dispatch pc=110, inst=BINARY_ADD(arg=None, lineno=168)
DEBUG 2022-02-07 18:03:06,765 stack ['$phi90.0', '$98binary_true_divide.5', '$108binary_true_divide.10']
DEBUG 2022-02-07 18:03:06,765 dispatch pc=112, inst=STORE_FAST(arg=11, lineno=168)
DEBUG 2022-02-07 18:03:06,765 stack ['$phi90.0', '$110binary_add.11']
DEBUG 2022-02-07 18:03:06,765 dispatch pc=114, inst=LOAD_FAST(arg=7, lineno=169)
DEBUG 2022-02-07 18:03:06,765 stack ['$phi90.0']
DEBUG 2022-02-07 18:03:06,765 dispatch pc=116, inst=LOAD_FAST(arg=0, lineno=169)
DEBUG 2022-02-07 18:03:06,765 stack ['$phi90.0', '$E_k114.12']
DEBUG 2022-02-07 18:03:06,765 dispatch pc=118, inst=INPLACE_MULTIPLY(arg=None, lineno=169)
DEBUG 2022-02-07 18:03:06,765 stack ['$phi90.0', '$E_k114.12', '$E116.13']
DEBUG 2022-02-07 18:03:06,765 dispatch pc=120, inst=STORE_FAST(arg=7, lineno=169)
DEBUG 2022-02-07 18:03:06,765 stack ['$phi90.0', '$118inplace_multiply.14']
DEBUG 2022-02-07 18:03:06,765 dispatch pc=122, inst=JUMP_FORWARD(arg=16, lineno=169)
DEBUG 2022-02-07 18:03:06,765 stack ['$phi90.0']
DEBUG 2022-02-07 18:03:06,765 end state. edges=[Edge(pc=140, stack=('$phi90.0',), blockstack=(), npush=0)]
DEBUG 2022-02-07 18:03:06,765 pending: deque([State(pc_initial=124 nstack_initial=1), State(pc_initial=202 nstack_initial=2), State(pc_initial=140 nstack_initial=1)])
DEBUG 2022-02-07 18:03:06,765 stack: ['$phi124.0']
DEBUG 2022-02-07 18:03:06,765 dispatch pc=124, inst=LOAD_FAST(arg=6, lineno=171)
DEBUG 2022-02-07 18:03:06,765 stack ['$phi124.0']
DEBUG 2022-02-07 18:03:06,765 dispatch pc=126, inst=LOAD_FAST(arg=3, lineno=171)
DEBUG 2022-02-07 18:03:06,765 stack ['$phi124.0', '$oddVX_S124.1']
DEBUG 2022-02-07 18:03:06,765 dispatch pc=128, inst=BINARY_MATRIX_MULTIPLY(arg=None, lineno=171)
DEBUG 2022-02-07 18:03:06,765 stack ['$phi124.0', '$oddVX_S124.1', '$D_S126.2']
DEBUG 2022-02-07 18:03:06,765 dispatch pc=130, inst=STORE_FAST(arg=11, lineno=171)
DEBUG 2022-02-07 18:03:06,781 stack ['$phi124.0', '$128binary_matrix_multiply.3']
DEBUG 2022-02-07 18:03:06,781 dispatch pc=132, inst=LOAD_FAST(arg=1, lineno=172)
DEBUG 2022-02-07 18:03:06,781 stack ['$phi124.0']
DEBUG 2022-02-07 18:03:06,781 dispatch pc=134, inst=LOAD_FAST(arg=3, lineno=172)
DEBUG 2022-02-07 18:03:06,781 stack ['$phi124.0', '$AX_S132.4']
DEBUG 2022-02-07 18:03:06,781 dispatch pc=136, inst=BINARY_MATRIX_MULTIPLY(arg=None, lineno=172)
DEBUG 2022-02-07 18:03:06,781 stack ['$phi124.0', '$AX_S132.4', '$D_S134.5']
DEBUG 2022-02-07 18:03:06,781 dispatch pc=138, inst=STORE_FAST(arg=3, lineno=172)
DEBUG 2022-02-07 18:03:06,781 stack ['$phi124.0', '$136binary_matrix_multiply.6']
DEBUG 2022-02-07 18:03:06,781 end state. edges=[Edge(pc=140, stack=('$phi124.0',), blockstack=(), npush=0)]
DEBUG 2022-02-07 18:03:06,781 pending: deque([State(pc_initial=202 nstack_initial=2), State(pc_initial=140 nstack_initial=1), State(pc_initial=140 nstack_initial=1)])
DEBUG 2022-02-07 18:03:06,781 stack: ['$phi202.0', '$phi202.1']
DEBUG 2022-02-07 18:03:06,781 dispatch pc=202, inst=FOR_ITER(arg=96, lineno=177)
DEBUG 2022-02-07 18:03:06,781 stack ['$phi202.0', '$phi202.1']
DEBUG 2022-02-07 18:03:06,781 end state. edges=[Edge(pc=300, stack=('$phi202.0',), blockstack=(), npush=0), Edge(pc=204, stack=('$phi202.0', '$phi202.1', '$202for_iter.3'), blockstack=(), npush=0)]
DEBUG 2022-02-07 18:03:06,781 pending: deque([State(pc_initial=140 nstack_initial=1), State(pc_initial=140 nstack_initial=1), State(pc_initial=300 nstack_initial=1), State(pc_initial=204 nstack_initial=3)])
DEBUG 2022-02-07 18:03:06,781 pending: deque([State(pc_initial=140 nstack_initial=1), State(pc_initial=300 nstack_initial=1), State(pc_initial=204 nstack_initial=3)])
DEBUG 2022-02-07 18:03:06,781 pending: deque([State(pc_initial=300 nstack_initial=1), State(pc_initial=204 nstack_initial=3)])
DEBUG 2022-02-07 18:03:06,781 stack: ['$phi300.0']
DEBUG 2022-02-07 18:03:06,781 dispatch pc=300, inst=JUMP_ABSOLUTE(arg=60, lineno=180)
DEBUG 2022-02-07 18:03:06,781 stack ['$phi300.0']
DEBUG 2022-02-07 18:03:06,781 end state. edges=[Edge(pc=60, stack=('$phi300.0',), blockstack=(), npush=0)]
DEBUG 2022-02-07 18:03:06,781 pending: deque([State(pc_initial=204 nstack_initial=3), State(pc_initial=60 nstack_initial=1)])
DEBUG 2022-02-07 18:03:06,781 stack: ['$phi204.0', '$phi204.1', '$phi204.2']
DEBUG 2022-02-07 18:03:06,781 dispatch pc=204, inst=STORE_FAST(arg=13, lineno=177)
DEBUG 2022-02-07 18:03:06,781 stack ['$phi204.0', '$phi204.1', '$phi204.2']
DEBUG 2022-02-07 18:03:06,781 dispatch pc=206, inst=LOAD_FAST(arg=12, lineno=178)
DEBUG 2022-02-07 18:03:06,781 stack ['$phi204.0', '$phi204.1']
DEBUG 2022-02-07 18:03:06,781 dispatch pc=208, inst=LOAD_FAST(arg=11, lineno=178)
DEBUG 2022-02-07 18:03:06,781 stack ['$phi204.0', '$phi204.1', '$powfactor206.3']
DEBUG 2022-02-07 18:03:06,781 dispatch pc=210, inst=LOAD_FAST(arg=13, lineno=178)
DEBUG 2022-02-07 18:03:06,781 stack ['$phi204.0', '$phi204.1', '$powfactor206.3', '$factor208.4']
DEBUG 2022-02-07 18:03:06,781 dispatch pc=212, inst=BINARY_TRUE_DIVIDE(arg=None, lineno=178)
DEBUG 2022-02-07 18:03:06,781 stack ['$phi204.0', '$phi204.1', '$powfactor206.3', '$factor208.4', '$j210.5']
DEBUG 2022-02-07 18:03:06,781 dispatch pc=214, inst=INPLACE_MULTIPLY(arg=None, lineno=178)
DEBUG 2022-02-07 18:03:06,781 stack ['$phi204.0', '$phi204.1', '$powfactor206.3', '$212binary_true_divide.6']
DEBUG 2022-02-07 18:03:06,781 dispatch pc=216, inst=STORE_FAST(arg=12, lineno=178)
DEBUG 2022-02-07 18:03:06,781 stack ['$phi204.0', '$phi204.1', '$214inplace_multiply.7']
DEBUG 2022-02-07 18:03:06,781 dispatch pc=218, inst=LOAD_GLOBAL(arg=4, lineno=179)
DEBUG 2022-02-07 18:03:06,781 stack ['$phi204.0', '$phi204.1']
DEBUG 2022-02-07 18:03:06,781 dispatch pc=220, inst=LOAD_FAST(arg=10, lineno=179)
DEBUG 2022-02-07 18:03:06,781 stack ['$phi204.0', '$phi204.1', '$218load_global.8']
DEBUG 2022-02-07 18:03:06,781 dispatch pc=222, inst=LOAD_FAST(arg=13, lineno=179)
DEBUG 2022-02-07 18:03:06,781 stack ['$phi204.0', '$phi204.1', '$218load_global.8', '$i220.9']
DEBUG 2022-02-07 18:03:06,781 dispatch pc=224, inst=BINARY_MULTIPLY(arg=None, lineno=179)
DEBUG 2022-02-07 18:03:06,781 stack ['$phi204.0', '$phi204.1', '$218load_global.8', '$i220.9', '$j222.10']
DEBUG 2022-02-07 18:03:06,781 dispatch pc=226, inst=LOAD_CONST(arg=3, lineno=179)
DEBUG 2022-02-07 18:03:06,781 stack ['$phi204.0', '$phi204.1', '$218load_global.8', '$224binary_multiply.11']
DEBUG 2022-02-07 18:03:06,781 dispatch pc=228, inst=BINARY_ADD(arg=None, lineno=179)
DEBUG 2022-02-07 18:03:06,781 stack ['$phi204.0', '$phi204.1', '$218load_global.8', '$224binary_multiply.11', '$const226.12']
DEBUG 2022-02-07 18:03:06,781 dispatch pc=230, inst=LOAD_FAST(arg=4, lineno=179)
DEBUG 2022-02-07 18:03:06,781 stack ['$phi204.0', '$phi204.1', '$218load_global.8', '$228binary_add.13']
DEBUG 2022-02-07 18:03:06,781 dispatch pc=232, inst=LOAD_CONST(arg=2, lineno=179)
DEBUG 2022-02-07 18:03:06,781 stack ['$phi204.0', '$phi204.1', '$218load_global.8', '$228binary_add.13', '$n230.14']
DEBUG 2022-02-07 18:03:06,781 dispatch pc=234, inst=BINARY_ADD(arg=None, lineno=179)
DEBUG 2022-02-07 18:03:06,781 stack ['$phi204.0', '$phi204.1', '$218load_global.8', '$228binary_add.13', '$n230.14', '$const232.15']
DEBUG 2022-02-07 18:03:06,781 dispatch pc=236, inst=CALL_FUNCTION(arg=2, lineno=179)
DEBUG 2022-02-07 18:03:06,781 stack ['$phi204.0', '$phi204.1', '$218load_global.8', '$228binary_add.13', '$234binary_add.16']
DEBUG 2022-02-07 18:03:06,781 dispatch pc=238, inst=GET_ITER(arg=None, lineno=179)
DEBUG 2022-02-07 18:03:06,781 stack ['$phi204.0', '$phi204.1', '$236call_function.17']
DEBUG 2022-02-07 18:03:06,781 end state. edges=[Edge(pc=240, stack=('$phi204.0', '$phi204.1', '$238get_iter.18'), blockstack=(), npush=0)]
DEBUG 2022-02-07 18:03:06,781 pending: deque([State(pc_initial=60 nstack_initial=1), State(pc_initial=240 nstack_initial=3)])
DEBUG 2022-02-07 18:03:06,781 pending: deque([State(pc_initial=240 nstack_initial=3)])
DEBUG 2022-02-07 18:03:06,781 stack: ['$phi240.0', '$phi240.1', '$phi240.2']
DEBUG 2022-02-07 18:03:06,781 dispatch pc=240, inst=FOR_ITER(arg=56, lineno=179)
DEBUG 2022-02-07 18:03:06,781 stack ['$phi240.0', '$phi240.1', '$phi240.2']
DEBUG 2022-02-07 18:03:06,781 end state. edges=[Edge(pc=298, stack=('$phi240.0', '$phi240.1'), blockstack=(), npush=0), Edge(pc=242, stack=('$phi240.0', '$phi240.1', '$phi240.2', '$240for_iter.4'), blockstack=(), npush=0)]
DEBUG 2022-02-07 18:03:06,781 pending: deque([State(pc_initial=298 nstack_initial=2), State(pc_initial=242 nstack_initial=4)])
DEBUG 2022-02-07 18:03:06,781 stack: ['$phi298.0', '$phi298.1']
DEBUG 2022-02-07 18:03:06,781 dispatch pc=298, inst=JUMP_ABSOLUTE(arg=202, lineno=180)
DEBUG 2022-02-07 18:03:06,781 stack ['$phi298.0', '$phi298.1']
DEBUG 2022-02-07 18:03:06,781 end state. edges=[Edge(pc=202, stack=('$phi298.0', '$phi298.1'), blockstack=(), npush=0)]
DEBUG 2022-02-07 18:03:06,781 pending: deque([State(pc_initial=242 nstack_initial=4), State(pc_initial=202 nstack_initial=2)])
DEBUG 2022-02-07 18:03:06,781 stack: ['$phi242.0', '$phi242.1', '$phi242.2', '$phi242.3']
DEBUG 2022-02-07 18:03:06,781 dispatch pc=242, inst=STORE_FAST(arg=14, lineno=179)
DEBUG 2022-02-07 18:03:06,781 stack ['$phi242.0', '$phi242.1', '$phi242.2', '$phi242.3']
DEBUG 2022-02-07 18:03:06,781 dispatch pc=244, inst=LOAD_FAST(arg=9, lineno=180)
DEBUG 2022-02-07 18:03:06,781 stack ['$phi242.0', '$phi242.1', '$phi242.2']
DEBUG 2022-02-07 18:03:06,781 dispatch pc=246, inst=LOAD_FAST(arg=8, lineno=180)
DEBUG 2022-02-07 18:03:06,781 stack ['$phi242.0', '$phi242.1', '$phi242.2', '$comb244.4']
DEBUG 2022-02-07 18:03:06,781 dispatch pc=248, inst=LOAD_FAST(arg=14, lineno=180)
DEBUG 2022-02-07 18:03:06,781 stack ['$phi242.0', '$phi242.1', '$phi242.2', '$comb244.4', '$count246.5']
DEBUG 2022-02-07 18:03:06,781 dispatch pc=250, inst=LOAD_CONST(arg=3, lineno=180)
DEBUG 2022-02-07 18:03:06,797 stack ['$phi242.0', '$phi242.1', '$phi242.2', '$comb244.4', '$count246.5', '$k248.6']
DEBUG 2022-02-07 18:03:06,797 dispatch pc=252, inst=BINARY_SUBTRACT(arg=None, lineno=180)
DEBUG 2022-02-07 18:03:06,797 stack ['$phi242.0', '$phi242.1', '$phi242.2', '$comb244.4', '$count246.5', '$k248.6', '$const250.7']
DEBUG 2022-02-07 18:03:06,797 dispatch pc=254, inst=BUILD_TUPLE(arg=2, lineno=180)
DEBUG 2022-02-07 18:03:06,797 stack ['$phi242.0', '$phi242.1', '$phi242.2', '$comb244.4', '$count246.5', '$252binary_subtract.8']
DEBUG 2022-02-07 18:03:06,797 dispatch pc=256, inst=DUP_TOP_TWO(arg=None, lineno=180)
DEBUG 2022-02-07 18:03:06,797 stack ['$phi242.0', '$phi242.1', '$phi242.2', '$comb244.4', '$254build_tuple.9']
DEBUG 2022-02-07 18:03:06,797 dispatch pc=258, inst=BINARY_SUBSCR(arg=None, lineno=180)
DEBUG 2022-02-07 18:03:06,797 stack ['$phi242.0', '$phi242.1', '$phi242.2', '$comb244.4', '$254build_tuple.9', '$256dup_top_two.10', '$256dup_top_two.11']
DEBUG 2022-02-07 18:03:06,797 dispatch pc=260, inst=LOAD_FAST(arg=9, lineno=180)
DEBUG 2022-02-07 18:03:06,797 stack ['$phi242.0', '$phi242.1', '$phi242.2', '$comb244.4', '$254build_tuple.9', '$258binary_subscr.12']
DEBUG 2022-02-07 18:03:06,797 dispatch pc=262, inst=LOAD_CONST(arg=3, lineno=180)
DEBUG 2022-02-07 18:03:06,797 stack ['$phi242.0', '$phi242.1', '$phi242.2', '$comb244.4', '$254build_tuple.9', '$258binary_subscr.12', '$comb260.13']
DEBUG 2022-02-07 18:03:06,797 dispatch pc=264, inst=LOAD_FAST(arg=8, lineno=180)
DEBUG 2022-02-07 18:03:06,797 stack ['$phi242.0', '$phi242.1', '$phi242.2', '$comb244.4', '$254build_tuple.9', '$258binary_subscr.12', '$comb260.13', '$const262.14']
DEBUG 2022-02-07 18:03:06,797 dispatch pc=266, inst=BINARY_SUBTRACT(arg=None, lineno=180)
DEBUG 2022-02-07 18:03:06,797 stack ['$phi242.0', '$phi242.1', '$phi242.2', '$comb244.4', '$254build_tuple.9', '$258binary_subscr.12', '$comb260.13', '$const262.14', '$count264.15']
DEBUG 2022-02-07 18:03:06,797 dispatch pc=268, inst=LOAD_FAST(arg=14, lineno=180)
DEBUG 2022-02-07 18:03:06,797 stack ['$phi242.0', '$phi242.1', '$phi242.2', '$comb244.4', '$254build_tuple.9', '$258binary_subscr.12', '$comb260.13', '$266binary_subtract.16']
DEBUG 2022-02-07 18:03:06,797 dispatch pc=270, inst=LOAD_FAST(arg=10, lineno=180)
DEBUG 2022-02-07 18:03:06,797 stack ['$phi242.0', '$phi242.1', '$phi242.2', '$comb244.4', '$254build_tuple.9', '$258binary_subscr.12', '$comb260.13', '$266binary_subtract.16', '$k268.17']
DEBUG 2022-02-07 18:03:06,797 dispatch pc=272, inst=LOAD_FAST(arg=13, lineno=180)
DEBUG 2022-02-07 18:03:06,797 stack ['$phi242.0', '$phi242.1', '$phi242.2', '$comb244.4', '$254build_tuple.9', '$258binary_subscr.12', '$comb260.13', '$266binary_subtract.16', '$k268.17', '$i270.18']
DEBUG 2022-02-07 18:03:06,797 dispatch pc=274, inst=BINARY_MULTIPLY(arg=None, lineno=180)
DEBUG 2022-02-07 18:03:06,797 stack ['$phi242.0', '$phi242.1', '$phi242.2', '$comb244.4', '$254build_tuple.9', '$258binary_subscr.12', '$comb260.13', '$266binary_subtract.16', '$k268.17', '$i270.18', '$j272.19']
DEBUG 2022-02-07 18:03:06,797 dispatch pc=276, inst=BINARY_SUBTRACT(arg=None, lineno=180)
DEBUG 2022-02-07 18:03:06,797 stack ['$phi242.0', '$phi242.1', '$phi242.2', '$comb244.4', '$254build_tuple.9', '$258binary_subscr.12', '$comb260.13', '$266binary_subtract.16', '$k268.17', '$274binary_multiply.20']
DEBUG 2022-02-07 18:03:06,797 dispatch pc=278, inst=LOAD_CONST(arg=3, lineno=180)
DEBUG 2022-02-07 18:03:06,797 stack ['$phi242.0', '$phi242.1', '$phi242.2', '$comb244.4', '$254build_tuple.9', '$258binary_subscr.12', '$comb260.13', '$266binary_subtract.16', '$276binary_subtract.21']
DEBUG 2022-02-07 18:03:06,797 dispatch pc=280, inst=BINARY_SUBTRACT(arg=None, lineno=180)
DEBUG 2022-02-07 18:03:06,797 stack ['$phi242.0', '$phi242.1', '$phi242.2', '$comb244.4', '$254build_tuple.9', '$258binary_subscr.12', '$comb260.13', '$266binary_subtract.16', '$276binary_subtract.21', '$const278.22']
DEBUG 2022-02-07 18:03:06,797 dispatch pc=282, inst=BUILD_TUPLE(arg=2, lineno=180)
DEBUG 2022-02-07 18:03:06,797 stack ['$phi242.0', '$phi242.1', '$phi242.2', '$comb244.4', '$254build_tuple.9', '$258binary_subscr.12', '$comb260.13', '$266binary_subtract.16', '$280binary_subtract.23']
DEBUG 2022-02-07 18:03:06,797 dispatch pc=284, inst=BINARY_SUBSCR(arg=None, lineno=180)
DEBUG 2022-02-07 18:03:06,797 stack ['$phi242.0', '$phi242.1', '$phi242.2', '$comb244.4', '$254build_tuple.9', '$258binary_subscr.12', '$comb260.13', '$282build_tuple.24']
DEBUG 2022-02-07 18:03:06,797 dispatch pc=286, inst=LOAD_FAST(arg=12, lineno=180)
DEBUG 2022-02-07 18:03:06,797 stack ['$phi242.0', '$phi242.1', '$phi242.2', '$comb244.4', '$254build_tuple.9', '$258binary_subscr.12', '$284binary_subscr.25']
DEBUG 2022-02-07 18:03:06,797 dispatch pc=288, inst=BINARY_MULTIPLY(arg=None, lineno=180)
DEBUG 2022-02-07 18:03:06,797 stack ['$phi242.0', '$phi242.1', '$phi242.2', '$comb244.4', '$254build_tuple.9', '$258binary_subscr.12', '$284binary_subscr.25', '$powfactor286.26']
DEBUG 2022-02-07 18:03:06,797 dispatch pc=290, inst=INPLACE_ADD(arg=None, lineno=180)
DEBUG 2022-02-07 18:03:06,797 stack ['$phi242.0', '$phi242.1', '$phi242.2', '$comb244.4', '$254build_tuple.9', '$258binary_subscr.12', '$288binary_multiply.27']
DEBUG 2022-02-07 18:03:06,797 dispatch pc=292, inst=ROT_THREE(arg=None, lineno=180)
DEBUG 2022-02-07 18:03:06,797 stack ['$phi242.0', '$phi242.1', '$phi242.2', '$comb244.4', '$254build_tuple.9', '$290inplace_add.28']
DEBUG 2022-02-07 18:03:06,797 dispatch pc=294, inst=STORE_SUBSCR(arg=None, lineno=180)
DEBUG 2022-02-07 18:03:06,797 stack ['$phi242.0', '$phi242.1', '$phi242.2', '$290inplace_add.28', '$comb244.4', '$254build_tuple.9']
DEBUG 2022-02-07 18:03:06,797 dispatch pc=296, inst=JUMP_ABSOLUTE(arg=240, lineno=180)
DEBUG 2022-02-07 18:03:06,797 stack ['$phi242.0', '$phi242.1', '$phi242.2']
DEBUG 2022-02-07 18:03:06,797 end state. edges=[Edge(pc=240, stack=('$phi242.0', '$phi242.1', '$phi242.2'), blockstack=(), npush=0)]
DEBUG 2022-02-07 18:03:06,797 pending: deque([State(pc_initial=202 nstack_initial=2), State(pc_initial=240 nstack_initial=3)])
DEBUG 2022-02-07 18:03:06,797 pending: deque([State(pc_initial=240 nstack_initial=3)])
DEBUG 2022-02-07 18:03:06,797 -------------------------Prune PHIs-------------------------
DEBUG 2022-02-07 18:03:06,797 Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=60 nstack_initial=1): {'$phi60.0'},
             State(pc_initial=62 nstack_initial=2): {'$phi62.1'},
             State(pc_initial=72 nstack_initial=1): set(),
             State(pc_initial=78 nstack_initial=1): set(),
             State(pc_initial=90 nstack_initial=1): set(),
             State(pc_initial=124 nstack_initial=1): set(),
             State(pc_initial=140 nstack_initial=1): set(),
             State(pc_initial=202 nstack_initial=2): {'$phi202.1'},
             State(pc_initial=204 nstack_initial=3): {'$phi204.2'},
             State(pc_initial=240 nstack_initial=3): {'$phi240.2'},
             State(pc_initial=242 nstack_initial=4): {'$phi242.3'},
             State(pc_initial=298 nstack_initial=2): set(),
             State(pc_initial=300 nstack_initial=1): set(),
             State(pc_initial=302 nstack_initial=0): set()})
DEBUG 2022-02-07 18:03:06,797 defmap: {'$phi202.1': State(pc_initial=140 nstack_initial=1),
 '$phi204.2': State(pc_initial=202 nstack_initial=2),
 '$phi240.2': State(pc_initial=204 nstack_initial=3),
 '$phi242.3': State(pc_initial=240 nstack_initial=3),
 '$phi60.0': State(pc_initial=0 nstack_initial=0),
 '$phi62.1': State(pc_initial=60 nstack_initial=1)}
DEBUG 2022-02-07 18:03:06,797 phismap: defaultdict(<class 'set'>,
            {'$phi124.0': {('$phi78.0', State(pc_initial=78 nstack_initial=1))},
             '$phi140.0': {('$phi124.0',
                            State(pc_initial=124 nstack_initial=1)),
                           ('$phi72.0', State(pc_initial=72 nstack_initial=1)),
                           ('$phi90.0', State(pc_initial=90 nstack_initial=1))},
             '$phi202.0': {('$phi140.0',
                            State(pc_initial=140 nstack_initial=1)),
                           ('$phi298.0',
                            State(pc_initial=298 nstack_initial=2))},
             '$phi202.1': {('$200get_iter.30',
                            State(pc_initial=140 nstack_initial=1)),
                           ('$phi298.1',
                            State(pc_initial=298 nstack_initial=2))},
             '$phi204.0': {('$phi202.0',
                            State(pc_initial=202 nstack_initial=2))},
             '$phi204.1': {('$phi202.1',
                            State(pc_initial=202 nstack_initial=2))},
             '$phi204.2': {('$202for_iter.3',
                            State(pc_initial=202 nstack_initial=2))},
             '$phi240.0': {('$phi204.0',
                            State(pc_initial=204 nstack_initial=3)),
                           ('$phi242.0',
                            State(pc_initial=242 nstack_initial=4))},
             '$phi240.1': {('$phi204.1',
                            State(pc_initial=204 nstack_initial=3)),
                           ('$phi242.1',
                            State(pc_initial=242 nstack_initial=4))},
             '$phi240.2': {('$238get_iter.18',
                            State(pc_initial=204 nstack_initial=3)),
                           ('$phi242.2',
                            State(pc_initial=242 nstack_initial=4))},
             '$phi242.0': {('$phi240.0',
                            State(pc_initial=240 nstack_initial=3))},
             '$phi242.1': {('$phi240.1',
                            State(pc_initial=240 nstack_initial=3))},
             '$phi242.2': {('$phi240.2',
                            State(pc_initial=240 nstack_initial=3))},
             '$phi242.3': {('$240for_iter.4',
                            State(pc_initial=240 nstack_initial=3))},
             '$phi298.0': {('$phi240.0',
                            State(pc_initial=240 nstack_initial=3))},
             '$phi298.1': {('$phi240.1',
                            State(pc_initial=240 nstack_initial=3))},
             '$phi300.0': {('$phi202.0',
                            State(pc_initial=202 nstack_initial=2))},
             '$phi60.0': {('$58get_iter.24',
                           State(pc_initial=0 nstack_initial=0)),
                          ('$phi300.0',
                           State(pc_initial=300 nstack_initial=1))},
             '$phi62.0': {('$phi60.0', State(pc_initial=60 nstack_initial=1))},
             '$phi62.1': {('$60for_iter.2',
                           State(pc_initial=60 nstack_initial=1))},
             '$phi72.0': {('$phi62.0', State(pc_initial=62 nstack_initial=2))},
             '$phi78.0': {('$phi62.0', State(pc_initial=62 nstack_initial=2))},
             '$phi90.0': {('$phi78.0', State(pc_initial=78 nstack_initial=1))}})
DEBUG 2022-02-07 18:03:06,812 changing phismap: defaultdict(<class 'set'>,
            {'$phi124.0': {('$phi62.0', State(pc_initial=62 nstack_initial=2))},
             '$phi140.0': {('$phi62.0', State(pc_initial=62 nstack_initial=2)),
                           ('$phi78.0', State(pc_initial=78 nstack_initial=1))},
             '$phi202.0': {('$phi240.0',
                            State(pc_initial=240 nstack_initial=3)),
                           ('$phi62.0', State(pc_initial=62 nstack_initial=2)),
                           ('$phi78.0', State(pc_initial=78 nstack_initial=1))},
             '$phi202.1': {('$200get_iter.30',
                            State(pc_initial=140 nstack_initial=1)),
                           ('$phi240.1',
                            State(pc_initial=240 nstack_initial=3))},
             '$phi204.0': {('$phi240.0',
                            State(pc_initial=240 nstack_initial=3)),
                           ('$phi62.0', State(pc_initial=62 nstack_initial=2)),
                           ('$phi78.0', State(pc_initial=78 nstack_initial=1))},
             '$phi204.1': {('$200get_iter.30',
                            State(pc_initial=140 nstack_initial=1)),
                           ('$phi240.1',
                            State(pc_initial=240 nstack_initial=3))},
             '$phi204.2': {('$202for_iter.3',
                            State(pc_initial=202 nstack_initial=2))},
             '$phi240.0': {('$phi240.0',
                            State(pc_initial=240 nstack_initial=3)),
                           ('$phi62.0', State(pc_initial=62 nstack_initial=2)),
                           ('$phi78.0', State(pc_initial=78 nstack_initial=1))},
             '$phi240.1': {('$200get_iter.30',
                            State(pc_initial=140 nstack_initial=1)),
                           ('$phi240.1',
                            State(pc_initial=240 nstack_initial=3))},
             '$phi240.2': {('$238get_iter.18',
                            State(pc_initial=204 nstack_initial=3)),
                           ('$phi240.2',
                            State(pc_initial=240 nstack_initial=3))},
             '$phi242.0': {('$phi62.0', State(pc_initial=62 nstack_initial=2)),
                           ('$phi78.0', State(pc_initial=78 nstack_initial=1))},
             '$phi242.1': {('$200get_iter.30',
                            State(pc_initial=140 nstack_initial=1))},
             '$phi242.2': {('$238get_iter.18',
                            State(pc_initial=204 nstack_initial=3))},
             '$phi242.3': {('$240for_iter.4',
                            State(pc_initial=240 nstack_initial=3))},
             '$phi298.0': {('$phi62.0', State(pc_initial=62 nstack_initial=2)),
                           ('$phi78.0', State(pc_initial=78 nstack_initial=1))},
             '$phi298.1': {('$200get_iter.30',
                            State(pc_initial=140 nstack_initial=1))},
             '$phi300.0': {('$phi240.0',
                            State(pc_initial=240 nstack_initial=3)),
                           ('$phi62.0', State(pc_initial=62 nstack_initial=2)),
                           ('$phi78.0', State(pc_initial=78 nstack_initial=1))},
             '$phi60.0': {('$58get_iter.24',
                           State(pc_initial=0 nstack_initial=0)),
                          ('$phi240.0', State(pc_initial=240 nstack_initial=3)),
                          ('$phi62.0', State(pc_initial=62 nstack_initial=2)),
                          ('$phi78.0', State(pc_initial=78 nstack_initial=1))},
             '$phi62.0': {('$58get_iter.24',
                           State(pc_initial=0 nstack_initial=0)),
                          ('$phi240.0', State(pc_initial=240 nstack_initial=3)),
                          ('$phi62.0', State(pc_initial=62 nstack_initial=2)),
                          ('$phi78.0', State(pc_initial=78 nstack_initial=1))},
             '$phi62.1': {('$60for_iter.2',
                           State(pc_initial=60 nstack_initial=1))},
             '$phi72.0': {('$58get_iter.24',
                           State(pc_initial=0 nstack_initial=0)),
                          ('$phi240.0', State(pc_initial=240 nstack_initial=3)),
                          ('$phi78.0', State(pc_initial=78 nstack_initial=1))},
             '$phi78.0': {('$58get_iter.24',
                           State(pc_initial=0 nstack_initial=0)),
                          ('$phi240.0', State(pc_initial=240 nstack_initial=3)),
                          ('$phi78.0', State(pc_initial=78 nstack_initial=1))},
             '$phi90.0': {('$58get_iter.24',
                           State(pc_initial=0 nstack_initial=0)),
                          ('$phi240.0',
                           State(pc_initial=240 nstack_initial=3))}})
DEBUG 2022-02-07 18:03:06,812 changing phismap: defaultdict(<class 'set'>,
            {'$phi124.0': {('$58get_iter.24',
                            State(pc_initial=0 nstack_initial=0)),
                           ('$phi240.0',
                            State(pc_initial=240 nstack_initial=3))},
             '$phi140.0': {('$58get_iter.24',
                            State(pc_initial=0 nstack_initial=0)),
                           ('$phi240.0',
                            State(pc_initial=240 nstack_initial=3))},
             '$phi202.0': {('$58get_iter.24',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi202.1': {('$200get_iter.30',
                            State(pc_initial=140 nstack_initial=1))},
             '$phi204.0': {('$58get_iter.24',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi204.1': {('$200get_iter.30',
                            State(pc_initial=140 nstack_initial=1))},
             '$phi204.2': {('$202for_iter.3',
                            State(pc_initial=202 nstack_initial=2))},
             '$phi240.0': {('$58get_iter.24',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi240.1': {('$200get_iter.30',
                            State(pc_initial=140 nstack_initial=1))},
             '$phi240.2': {('$238get_iter.18',
                            State(pc_initial=204 nstack_initial=3))},
             '$phi242.0': {('$58get_iter.24',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi242.1': {('$200get_iter.30',
                            State(pc_initial=140 nstack_initial=1))},
             '$phi242.2': {('$238get_iter.18',
                            State(pc_initial=204 nstack_initial=3))},
             '$phi242.3': {('$240for_iter.4',
                            State(pc_initial=240 nstack_initial=3))},
             '$phi298.0': {('$58get_iter.24',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi298.1': {('$200get_iter.30',
                            State(pc_initial=140 nstack_initial=1))},
             '$phi300.0': {('$58get_iter.24',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi60.0': {('$58get_iter.24',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi62.0': {('$58get_iter.24',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi62.1': {('$60for_iter.2',
                           State(pc_initial=60 nstack_initial=1))},
             '$phi72.0': {('$58get_iter.24',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi78.0': {('$58get_iter.24',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi90.0': {('$58get_iter.24',
                           State(pc_initial=0 nstack_initial=0))}})
DEBUG 2022-02-07 18:03:06,812 changing phismap: defaultdict(<class 'set'>,
            {'$phi124.0': {('$58get_iter.24',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi140.0': {('$58get_iter.24',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi202.0': {('$58get_iter.24',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi202.1': {('$200get_iter.30',
                            State(pc_initial=140 nstack_initial=1))},
             '$phi204.0': {('$58get_iter.24',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi204.1': {('$200get_iter.30',
                            State(pc_initial=140 nstack_initial=1))},
             '$phi204.2': {('$202for_iter.3',
                            State(pc_initial=202 nstack_initial=2))},
             '$phi240.0': {('$58get_iter.24',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi240.1': {('$200get_iter.30',
                            State(pc_initial=140 nstack_initial=1))},
             '$phi240.2': {('$238get_iter.18',
                            State(pc_initial=204 nstack_initial=3))},
             '$phi242.0': {('$58get_iter.24',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi242.1': {('$200get_iter.30',
                            State(pc_initial=140 nstack_initial=1))},
             '$phi242.2': {('$238get_iter.18',
                            State(pc_initial=204 nstack_initial=3))},
             '$phi242.3': {('$240for_iter.4',
                            State(pc_initial=240 nstack_initial=3))},
             '$phi298.0': {('$58get_iter.24',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi298.1': {('$200get_iter.30',
                            State(pc_initial=140 nstack_initial=1))},
             '$phi300.0': {('$58get_iter.24',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi60.0': {('$58get_iter.24',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi62.0': {('$58get_iter.24',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi62.1': {('$60for_iter.2',
                           State(pc_initial=60 nstack_initial=1))},
             '$phi72.0': {('$58get_iter.24',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi78.0': {('$58get_iter.24',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi90.0': {('$58get_iter.24',
                           State(pc_initial=0 nstack_initial=0))}})
DEBUG 2022-02-07 18:03:06,828 changing phismap: defaultdict(<class 'set'>,
            {'$phi124.0': {('$58get_iter.24',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi140.0': {('$58get_iter.24',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi202.0': {('$58get_iter.24',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi202.1': {('$200get_iter.30',
                            State(pc_initial=140 nstack_initial=1))},
             '$phi204.0': {('$58get_iter.24',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi204.1': {('$200get_iter.30',
                            State(pc_initial=140 nstack_initial=1))},
             '$phi204.2': {('$202for_iter.3',
                            State(pc_initial=202 nstack_initial=2))},
             '$phi240.0': {('$58get_iter.24',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi240.1': {('$200get_iter.30',
                            State(pc_initial=140 nstack_initial=1))},
             '$phi240.2': {('$238get_iter.18',
                            State(pc_initial=204 nstack_initial=3))},
             '$phi242.0': {('$58get_iter.24',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi242.1': {('$200get_iter.30',
                            State(pc_initial=140 nstack_initial=1))},
             '$phi242.2': {('$238get_iter.18',
                            State(pc_initial=204 nstack_initial=3))},
             '$phi242.3': {('$240for_iter.4',
                            State(pc_initial=240 nstack_initial=3))},
             '$phi298.0': {('$58get_iter.24',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi298.1': {('$200get_iter.30',
                            State(pc_initial=140 nstack_initial=1))},
             '$phi300.0': {('$58get_iter.24',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi60.0': {('$58get_iter.24',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi62.0': {('$58get_iter.24',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi62.1': {('$60for_iter.2',
                           State(pc_initial=60 nstack_initial=1))},
             '$phi72.0': {('$58get_iter.24',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi78.0': {('$58get_iter.24',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi90.0': {('$58get_iter.24',
                           State(pc_initial=0 nstack_initial=0))}})
DEBUG 2022-02-07 18:03:06,828 keep phismap: {'$phi202.1': {('$200get_iter.30', State(pc_initial=140 nstack_initial=1))},
 '$phi204.2': {('$202for_iter.3', State(pc_initial=202 nstack_initial=2))},
 '$phi240.2': {('$238get_iter.18', State(pc_initial=204 nstack_initial=3))},
 '$phi242.3': {('$240for_iter.4', State(pc_initial=240 nstack_initial=3))},
 '$phi60.0': {('$58get_iter.24', State(pc_initial=0 nstack_initial=0))},
 '$phi62.1': {('$60for_iter.2', State(pc_initial=60 nstack_initial=1))}}
DEBUG 2022-02-07 18:03:06,828 new_out: defaultdict(<class 'dict'>,
            {State(pc_initial=0 nstack_initial=0): {'$phi60.0': '$58get_iter.24'},
             State(pc_initial=60 nstack_initial=1): {'$phi62.1': '$60for_iter.2'},
             State(pc_initial=140 nstack_initial=1): {'$phi202.1': '$200get_iter.30'},
             State(pc_initial=202 nstack_initial=2): {'$phi204.2': '$202for_iter.3'},
             State(pc_initial=204 nstack_initial=3): {'$phi240.2': '$238get_iter.18'},
             State(pc_initial=240 nstack_initial=3): {'$phi242.3': '$240for_iter.4'}})
DEBUG 2022-02-07 18:03:06,828 ----------------------DONE Prune PHIs-----------------------
DEBUG 2022-02-07 18:03:06,828 block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$E2.0'}), (4, {'item': '$E2.0', 'res': '$4load_method.1'}), (6, {'func': '$4load_method.1', 'args': [], 'res': '$6call_method.2'}), (8, {'value': '$6call_method.2'}), (10, {'res': '$const10.3'}), (12, {'value': '$const10.3'}), (14, {'res': '$14load_global.4'}), (16, {'item': '$14load_global.4', 'res': '$16load_attr.5'}), (18, {'res': '$const18.6'}), (20, {'res': '$n20.7'}), (22, {'res': '$const22.8'}), (24, {'lhs': '$n20.7', 'rhs': '$const22.8', 'res': '$24binary_add.9'}), (26, {'items': ['$const18.6', '$24binary_add.9'], 'res': '$26build_tuple.10'}), (28, {'res': '$28load_global.11'}), (30, {'item': '$28load_global.11', 'res': '$30load_attr.12'}), (32, {'res': '$const32.13'}), (34, {'func': '$16load_attr.5', 'args': ['$26build_tuple.10', '$30load_attr.12'], 'names': '$const32.13', 'res': '$34call_function_kw.14'}), (36, {'value': '$34call_function_kw.14'}), (38, {'res': '$const38.15'}), (40, {'res': '$comb40.16'}), (42, {'res': '$const42.17'}), (44, {'target': '$comb40.16', 'index': '$const42.17', 'value': '$const38.15'}), (46, {'res': '$46load_global.18'}), (48, {'res': '$const48.19'}), (50, {'res': '$n50.20'}), (52, {'res': '$const52.21'}), (54, {'lhs': '$n50.20', 'rhs': '$const52.21', 'res': '$54binary_add.22'}), (56, {'func': '$46load_global.18', 'args': ['$const48.19', '$54binary_add.22'], 'res': '$56call_function.23'}), (58, {'value': '$56call_function.23', 'res': '$58get_iter.24'})), outgoing_phis={'$phi60.0': '$58get_iter.24'}, blockstack=(), active_try_block=None, outgoing_edgepushed={60: ('$58get_iter.24',)})
DEBUG 2022-02-07 18:03:06,828 block_infos State(pc_initial=60 nstack_initial=1):
AdaptBlockInfo(insts=((60, {'iterator': '$phi60.0', 'pair': '$60for_iter.1', 'indval': '$60for_iter.2', 'pred': '$60for_iter.3'}),), outgoing_phis={'$phi62.1': '$60for_iter.2'}, blockstack=(), active_try_block=None, outgoing_edgepushed={302: (), 62: ('$phi60.0', '$60for_iter.2')})
DEBUG 2022-02-07 18:03:06,828 block_infos State(pc_initial=62 nstack_initial=2):
AdaptBlockInfo(insts=((62, {'value': '$phi62.1'}), (64, {'res': '$i64.2'}), (66, {'res': '$const66.3'}), (68, {'lhs': '$i64.2', 'rhs': '$const66.3', 'res': '$68compare_op.4'}), (70, {'pred': '$68compare_op.4'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={72: ('$phi62.0',), 78: ('$phi62.0',)})
DEBUG 2022-02-07 18:03:06,828 block_infos State(pc_initial=72 nstack_initial=1):
AdaptBlockInfo(insts=((72, {'res': '$oddloop72.1'}), (74, {'value': '$oddloop72.1'}), (76, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={140: ('$phi72.0',)})
DEBUG 2022-02-07 18:03:06,828 block_infos State(pc_initial=78 nstack_initial=1):
AdaptBlockInfo(insts=((78, {'res': '$i78.1'}), (80, {'res': '$const80.2'}), (82, {'lhs': '$i78.1', 'rhs': '$const80.2', 'res': '$82binary_modulo.3'}), (84, {'res': '$const84.4'}), (86, {'lhs': '$82binary_modulo.3', 'rhs': '$const84.4', 'res': '$86compare_op.5'}), (88, {'pred': '$86compare_op.5'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={90: ('$phi78.0',), 124: ('$phi78.0',)})
DEBUG 2022-02-07 18:03:06,828 block_infos State(pc_initial=90 nstack_initial=1):
AdaptBlockInfo(insts=((90, {'res': '$E_k90.1'}), (92, {'item': '$E_k90.1', 'res': '$92load_method.2'}), (94, {'func': '$92load_method.2', 'args': [], 'res': '$94call_method.3'}), (96, {'res': '$i96.4'}), (98, {'lhs': '$94call_method.3', 'rhs': '$i96.4', 'res': '$98binary_true_divide.5'}), (100, {'res': '$XD_S100.6'}), (102, {'res': '$D_S102.7'}), (104, {'lhs': '$XD_S100.6', 'rhs': '$D_S102.7', 'res': '$104binary_matrix_multiply.8'}), (106, {'res': '$const106.9'}), (108, {'lhs': '$104binary_matrix_multiply.8', 'rhs': '$const106.9', 'res': '$108binary_true_divide.10'}), (110, {'lhs': '$98binary_true_divide.5', 'rhs': '$108binary_true_divide.10', 'res': '$110binary_add.11'}), (112, {'value': '$110binary_add.11'}), (114, {'res': '$E_k114.12'}), (116, {'res': '$E116.13'}), (118, {'lhs': '$E_k114.12', 'rhs': '$E116.13', 'res': '$118inplace_multiply.14'}), (120, {'value': '$118inplace_multiply.14'}), (122, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={140: ('$phi90.0',)})
DEBUG 2022-02-07 18:03:06,828 block_infos State(pc_initial=124 nstack_initial=1):
AdaptBlockInfo(insts=((124, {'res': '$oddVX_S124.1'}), (126, {'res': '$D_S126.2'}), (128, {'lhs': '$oddVX_S124.1', 'rhs': '$D_S126.2', 'res': '$128binary_matrix_multiply.3'}), (130, {'value': '$128binary_matrix_multiply.3'}), (132, {'res': '$AX_S132.4'}), (134, {'res': '$D_S134.5'}), (136, {'lhs': '$AX_S132.4', 'rhs': '$D_S134.5', 'res': '$136binary_matrix_multiply.6'}), (138, {'value': '$136binary_matrix_multiply.6'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={140: ('$phi124.0',)})
DEBUG 2022-02-07 18:03:06,828 block_infos State(pc_initial=140 nstack_initial=1):
AdaptBlockInfo(insts=((140, {'res': '$const140.1'}), (142, {'value': '$const140.1'}), (144, {'res': '$const144.2'}), (146, {'res': '$count146.3'}), (148, {'lhs': '$const144.2', 'rhs': '$count146.3', 'res': '$148binary_subtract.4'}), (150, {'value': '$148binary_subtract.4'}), (152, {'res': '$comb152.5'}), (154, {'res': '$const154.6'}), (156, {'res': '$count156.7'}), (158, {'lhs': '$const154.6', 'rhs': '$count156.7', 'res': '$158binary_subtract.8'}), (160, {'res': '$const160.9'}), (162, {'res': '$const162.10'}), (164, {'start': '$const160.9', 'stop': '$const162.10', 'step': None, 'res': '$164build_slice.12', 'slicevar': '$164build_slice.11'}), (166, {'items': ['$158binary_subtract.8', '$164build_slice.12'], 'res': '$166build_tuple.13'}), (168, {'index': '$166build_tuple.13', 'target': '$comb152.5', 'res': '$168binary_subscr.14'}), (170, {'res': '$comb170.15'}), (172, {'res': '$count172.16'}), (174, {'res': '$const174.17'}), (176, {'res': '$const176.18'}), (178, {'start': '$const174.17', 'stop': '$const176.18', 'step': None, 'res': '$178build_slice.20', 'slicevar': '$178build_slice.19'}), (180, {'items': ['$count172.16', '$178build_slice.20'], 'res': '$180build_tuple.21'}), (182, {'target': '$comb170.15', 'index': '$180build_tuple.21', 'value': '$168binary_subscr.14'}), (184, {'res': '$184load_global.22'}), (186, {'res': '$const186.23'}), (188, {'res': '$n188.24'}), (190, {'res': '$i190.25'}), (192, {'lhs': '$n188.24', 'rhs': '$i190.25', 'res': '$192binary_floor_divide.26'}), (194, {'res': '$const194.27'}), (196, {'lhs': '$192binary_floor_divide.26', 'rhs': '$const194.27', 'res': '$196binary_add.28'}), (198, {'func': '$184load_global.22', 'args': ['$const186.23', '$196binary_add.28'], 'res': '$198call_function.29'}), (200, {'value': '$198call_function.29', 'res': '$200get_iter.30'})), outgoing_phis={'$phi202.1': '$200get_iter.30'}, blockstack=(), active_try_block=None, outgoing_edgepushed={202: ('$phi140.0', '$200get_iter.30')})
DEBUG 2022-02-07 18:03:06,828 block_infos State(pc_initial=202 nstack_initial=2):
AdaptBlockInfo(insts=((202, {'iterator': '$phi202.1', 'pair': '$202for_iter.2', 'indval': '$202for_iter.3', 'pred': '$202for_iter.4'}),), outgoing_phis={'$phi204.2': '$202for_iter.3'}, blockstack=(), active_try_block=None, outgoing_edgepushed={300: ('$phi202.0',), 204: ('$phi202.0', '$phi202.1', '$202for_iter.3')})
DEBUG 2022-02-07 18:03:06,828 block_infos State(pc_initial=204 nstack_initial=3):
AdaptBlockInfo(insts=((204, {'value': '$phi204.2'}), (206, {'res': '$powfactor206.3'}), (208, {'res': '$factor208.4'}), (210, {'res': '$j210.5'}), (212, {'lhs': '$factor208.4', 'rhs': '$j210.5', 'res': '$212binary_true_divide.6'}), (214, {'lhs': '$powfactor206.3', 'rhs': '$212binary_true_divide.6', 'res': '$214inplace_multiply.7'}), (216, {'value': '$214inplace_multiply.7'}), (218, {'res': '$218load_global.8'}), (220, {'res': '$i220.9'}), (222, {'res': '$j222.10'}), (224, {'lhs': '$i220.9', 'rhs': '$j222.10', 'res': '$224binary_multiply.11'}), (226, {'res': '$const226.12'}), (228, {'lhs': '$224binary_multiply.11', 'rhs': '$const226.12', 'res': '$228binary_add.13'}), (230, {'res': '$n230.14'}), (232, {'res': '$const232.15'}), (234, {'lhs': '$n230.14', 'rhs': '$const232.15', 'res': '$234binary_add.16'}), (236, {'func': '$218load_global.8', 'args': ['$228binary_add.13', '$234binary_add.16'], 'res': '$236call_function.17'}), (238, {'value': '$236call_function.17', 'res': '$238get_iter.18'})), outgoing_phis={'$phi240.2': '$238get_iter.18'}, blockstack=(), active_try_block=None, outgoing_edgepushed={240: ('$phi204.0', '$phi204.1', '$238get_iter.18')})
DEBUG 2022-02-07 18:03:06,828 block_infos State(pc_initial=240 nstack_initial=3):
AdaptBlockInfo(insts=((240, {'iterator': '$phi240.2', 'pair': '$240for_iter.3', 'indval': '$240for_iter.4', 'pred': '$240for_iter.5'}),), outgoing_phis={'$phi242.3': '$240for_iter.4'}, blockstack=(), active_try_block=None, outgoing_edgepushed={298: ('$phi240.0', '$phi240.1'), 242: ('$phi240.0', '$phi240.1', '$phi240.2', '$240for_iter.4')})
DEBUG 2022-02-07 18:03:06,828 block_infos State(pc_initial=242 nstack_initial=4):
AdaptBlockInfo(insts=((242, {'value': '$phi242.3'}), (244, {'res': '$comb244.4'}), (246, {'res': '$count246.5'}), (248, {'res': '$k248.6'}), (250, {'res': '$const250.7'}), (252, {'lhs': '$k248.6', 'rhs': '$const250.7', 'res': '$252binary_subtract.8'}), (254, {'items': ['$count246.5', '$252binary_subtract.8'], 'res': '$254build_tuple.9'}), (256, {'orig': ['$comb244.4', '$254build_tuple.9'], 'duped': ['$256dup_top_two.10', '$256dup_top_two.11']}), (258, {'index': '$256dup_top_two.11', 'target': '$256dup_top_two.10', 'res': '$258binary_subscr.12'}), (260, {'res': '$comb260.13'}), (262, {'res': '$const262.14'}), (264, {'res': '$count264.15'}), (266, {'lhs': '$const262.14', 'rhs': '$count264.15', 'res': '$266binary_subtract.16'}), (268, {'res': '$k268.17'}), (270, {'res': '$i270.18'}), (272, {'res': '$j272.19'}), (274, {'lhs': '$i270.18', 'rhs': '$j272.19', 'res': '$274binary_multiply.20'}), (276, {'lhs': '$k268.17', 'rhs': '$274binary_multiply.20', 'res': '$276binary_subtract.21'}), (278, {'res': '$const278.22'}), (280, {'lhs': '$276binary_subtract.21', 'rhs': '$const278.22', 'res': '$280binary_subtract.23'}), (282, {'items': ['$266binary_subtract.16', '$280binary_subtract.23'], 'res': '$282build_tuple.24'}), (284, {'index': '$282build_tuple.24', 'target': '$comb260.13', 'res': '$284binary_subscr.25'}), (286, {'res': '$powfactor286.26'}), (288, {'lhs': '$284binary_subscr.25', 'rhs': '$powfactor286.26', 'res': '$288binary_multiply.27'}), (290, {'lhs': '$258binary_subscr.12', 'rhs': '$288binary_multiply.27', 'res': '$290inplace_add.28'}), (294, {'target': '$comb244.4', 'index': '$254build_tuple.9', 'value': '$290inplace_add.28'}), (296, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={240: ('$phi242.0', '$phi242.1', '$phi242.2')})
DEBUG 2022-02-07 18:03:06,828 block_infos State(pc_initial=298 nstack_initial=2):
AdaptBlockInfo(insts=((298, {}),), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={202: ('$phi298.0', '$phi298.1')})
DEBUG 2022-02-07 18:03:06,828 block_infos State(pc_initial=300 nstack_initial=1):
AdaptBlockInfo(insts=((300, {}),), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={60: ('$phi300.0',)})
DEBUG 2022-02-07 18:03:06,828 block_infos State(pc_initial=302 nstack_initial=0):
AdaptBlockInfo(insts=((302, {'res': '$comb302.0'}), (304, {'res': '$count304.1'}), (306, {'res': '$const306.2'}), (308, {'res': '$const308.3'}), (310, {'start': '$const306.2', 'stop': '$const308.3', 'step': None, 'res': '$310build_slice.5', 'slicevar': '$310build_slice.4'}), (312, {'items': ['$count304.1', '$310build_slice.5'], 'res': '$312build_tuple.6'}), (314, {'index': '$312build_tuple.6', 'target': '$comb302.0', 'res': '$314binary_subscr.7'}), (316, {'retval': '$314binary_subscr.7', 'castval': '$316return_value.8'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG 2022-02-07 18:03:06,850 label 0:
    E = arg(0, name=E)                       ['E']
    AX_S = arg(1, name=AX_S)                 ['AX_S']
    XD_S = arg(2, name=XD_S)                 ['XD_S']
    D_S = arg(3, name=D_S)                   ['D_S']
    n = arg(4, name=n)                       ['n']
    oddloop = arg(5, name=oddloop)           ['oddloop']
    oddVX_S = arg(6, name=oddVX_S)           ['oddVX_S']
    $4load_method.1 = getattr(value=E, attr=copy) ['$4load_method.1', 'E']
    E_k = call $4load_method.1(func=$4load_method.1, args=[], kws=(), vararg=None, target=None) ['$4load_method.1', 'E_k']
    count = const(int, 0)                    ['count']
    $14load_global.4 = global(np: <module 'numpy' from 'C:\\Users\\zl4821\\Anaconda3\\envs\\GBS\\lib\\site-packages\\numpy\\__init__.py'>) ['$14load_global.4']
    $16load_attr.5 = getattr(value=$14load_global.4, attr=zeros) ['$14load_global.4', '$16load_attr.5']
    $const18.6 = const(int, 2)               ['$const18.6']
    $const22.8 = const(int, 1)               ['$const22.8']
    $24binary_add.9 = n + $const22.8         ['$24binary_add.9', '$const22.8', 'n']
    $26build_tuple.10 = build_tuple(items=[Var($const18.6, _loop_hafnian_subroutines.py:162), Var($24binary_add.9, _loop_hafnian_subroutines.py:162)]) ['$24binary_add.9', '$26build_tuple.10', '$const18.6']
    $28load_global.11 = global(np: <module 'numpy' from 'C:\\Users\\zl4821\\Anaconda3\\envs\\GBS\\lib\\site-packages\\numpy\\__init__.py'>) ['$28load_global.11']
    $30load_attr.12 = getattr(value=$28load_global.11, attr=complex128) ['$28load_global.11', '$30load_attr.12']
    comb = call $16load_attr.5($26build_tuple.10, func=$16load_attr.5, args=[Var($26build_tuple.10, _loop_hafnian_subroutines.py:162)], kws=[('dtype', Var($30load_attr.12, _loop_hafnian_subroutines.py:162))], vararg=None, target=None) ['$16load_attr.5', '$26build_tuple.10', '$30load_attr.12', 'comb']
    $const38.15 = const(int, 1)              ['$const38.15']
    $const_0 = const(int, 0)                 ['$const_0']
    $const_0.1 = const(int, 0)               ['$const_0.1']
    $const42.17 = build_tuple(items=[Var($const_0, _loop_hafnian_subroutines.py:163), Var($const_0.1, _loop_hafnian_subroutines.py:163)]) ['$const42.17', '$const_0', '$const_0.1']
    comb[$const42.17] = $const38.15          ['$const38.15', '$const42.17', 'comb']
    $46load_global.18 = global(range: <class 'range'>) ['$46load_global.18']
    $const48.19 = const(int, 1)              ['$const48.19']
    $const52.21 = const(int, 1)              ['$const52.21']
    $54binary_add.22 = n + $const52.21       ['$54binary_add.22', '$const52.21', 'n']
    $56call_function.23 = call $46load_global.18($const48.19, $54binary_add.22, func=$46load_global.18, args=[Var($const48.19, _loop_hafnian_subroutines.py:164), Var($54binary_add.22, _loop_hafnian_subroutines.py:164)], kws=(), vararg=None, target=None) ['$46load_global.18', '$54binary_add.22', '$56call_function.23', '$const48.19']
    $58get_iter.24 = getiter(value=$56call_function.23) ['$56call_function.23', '$58get_iter.24']
    $phi60.0 = $58get_iter.24                ['$58get_iter.24', '$phi60.0']
    jump 60                                  []
label 60:
    $60for_iter.1 = iternext(value=$phi60.0) ['$60for_iter.1', '$phi60.0']
    $60for_iter.2 = pair_first(value=$60for_iter.1) ['$60for_iter.1', '$60for_iter.2']
    $60for_iter.3 = pair_second(value=$60for_iter.1) ['$60for_iter.1', '$60for_iter.3']
    $phi62.1 = $60for_iter.2                 ['$60for_iter.2', '$phi62.1']
    branch $60for_iter.3, 62, 302            ['$60for_iter.3']
label 62:
    i = $phi62.1                             ['$phi62.1', 'i']
    $const66.3 = const(int, 1)               ['$const66.3']
    $68compare_op.4 = i == $const66.3        ['$68compare_op.4', '$const66.3', 'i']
    bool70 = global(bool: <class 'bool'>)    ['bool70']
    $70pred = call bool70($68compare_op.4, func=bool70, args=(Var($68compare_op.4, _loop_hafnian_subroutines.py:165),), kws=(), vararg=None, target=None) ['$68compare_op.4', '$70pred', 'bool70']
    branch $70pred, 72, 78                   ['$70pred']
label 72:
    factor = oddloop                         ['factor', 'oddloop']
    jump 140                                 []
label 78:
    $const80.2 = const(int, 2)               ['$const80.2']
    $82binary_modulo.3 = i % $const80.2      ['$82binary_modulo.3', '$const80.2', 'i']
    $const84.4 = const(int, 0)               ['$const84.4']
    $86compare_op.5 = $82binary_modulo.3 == $const84.4 ['$82binary_modulo.3', '$86compare_op.5', '$const84.4']
    bool88 = global(bool: <class 'bool'>)    ['bool88']
    $88pred = call bool88($86compare_op.5, func=bool88, args=(Var($86compare_op.5, _loop_hafnian_subroutines.py:167),), kws=(), vararg=None, target=None) ['$86compare_op.5', '$88pred', 'bool88']
    branch $88pred, 90, 124                  ['$88pred']
label 90:
    $92load_method.2 = getattr(value=E_k, attr=sum) ['$92load_method.2', 'E_k']
    $94call_method.3 = call $92load_method.2(func=$92load_method.2, args=[], kws=(), vararg=None, target=None) ['$92load_method.2', '$94call_method.3']
    $98binary_true_divide.5 = $94call_method.3 / i ['$94call_method.3', '$98binary_true_divide.5', 'i']
    $104binary_matrix_multiply.8 = XD_S <built-in function matmul> D_S ['$104binary_matrix_multiply.8', 'D_S', 'XD_S']
    $const106.9 = const(int, 2)              ['$const106.9']
    $108binary_true_divide.10 = $104binary_matrix_multiply.8 / $const106.9 ['$104binary_matrix_multiply.8', '$108binary_true_divide.10', '$const106.9']
    factor = $98binary_true_divide.5 + $108binary_true_divide.10 ['$108binary_true_divide.10', '$98binary_true_divide.5', 'factor']
    $118inplace_multiply.14 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=E_k, rhs=E, static_lhs=Undefined, static_rhs=Undefined) ['$118inplace_multiply.14', 'E', 'E_k']
    E_k = $118inplace_multiply.14            ['$118inplace_multiply.14', 'E_k']
    jump 140                                 []
label 124:
    factor = oddVX_S <built-in function matmul> D_S ['D_S', 'factor', 'oddVX_S']
    $136binary_matrix_multiply.6 = AX_S <built-in function matmul> D_S ['$136binary_matrix_multiply.6', 'AX_S', 'D_S']
    D_S = $136binary_matrix_multiply.6       ['$136binary_matrix_multiply.6', 'D_S']
    jump 140                                 []
label 140:
    powfactor = const(int, 1)                ['powfactor']
    $const144.2 = const(int, 1)              ['$const144.2']
    $148binary_subtract.4 = $const144.2 - count ['$148binary_subtract.4', '$const144.2', 'count']
    count = $148binary_subtract.4            ['$148binary_subtract.4', 'count']
    $const154.6 = const(int, 1)              ['$const154.6']
    $158binary_subtract.8 = $const154.6 - count ['$158binary_subtract.8', '$const154.6', 'count']
    $const160.9 = const(NoneType, None)      ['$const160.9']
    $const162.10 = const(NoneType, None)     ['$const162.10']
    $164build_slice.11 = global(slice: <class 'slice'>) ['$164build_slice.11']
    $164build_slice.12 = call $164build_slice.11($const160.9, $const162.10, func=$164build_slice.11, args=(Var($const160.9, _loop_hafnian_subroutines.py:176), Var($const162.10, _loop_hafnian_subroutines.py:176)), kws=(), vararg=None, target=None) ['$164build_slice.11', '$164build_slice.12', '$const160.9', '$const162.10']
    $166build_tuple.13 = build_tuple(items=[Var($158binary_subtract.8, _loop_hafnian_subroutines.py:176), Var($164build_slice.12, _loop_hafnian_subroutines.py:176)]) ['$158binary_subtract.8', '$164build_slice.12', '$166build_tuple.13']
    $168binary_subscr.14 = getitem(value=comb, index=$166build_tuple.13, fn=<built-in function getitem>) ['$166build_tuple.13', '$168binary_subscr.14', 'comb']
    $const174.17 = const(NoneType, None)     ['$const174.17']
    $const176.18 = const(NoneType, None)     ['$const176.18']
    $178build_slice.19 = global(slice: <class 'slice'>) ['$178build_slice.19']
    $178build_slice.20 = call $178build_slice.19($const174.17, $const176.18, func=$178build_slice.19, args=(Var($const174.17, _loop_hafnian_subroutines.py:176), Var($const176.18, _loop_hafnian_subroutines.py:176)), kws=(), vararg=None, target=None) ['$178build_slice.19', '$178build_slice.20', '$const174.17', '$const176.18']
    $180build_tuple.21 = build_tuple(items=[Var(count, _loop_hafnian_subroutines.py:161), Var($178build_slice.20, _loop_hafnian_subroutines.py:176)]) ['$178build_slice.20', '$180build_tuple.21', 'count']
    comb[$180build_tuple.21] = $168binary_subscr.14 ['$168binary_subscr.14', '$180build_tuple.21', 'comb']
    $184load_global.22 = global(range: <class 'range'>) ['$184load_global.22']
    $const186.23 = const(int, 1)             ['$const186.23']
    $192binary_floor_divide.26 = n // i      ['$192binary_floor_divide.26', 'i', 'n']
    $const194.27 = const(int, 1)             ['$const194.27']
    $196binary_add.28 = $192binary_floor_divide.26 + $const194.27 ['$192binary_floor_divide.26', '$196binary_add.28', '$const194.27']
    $198call_function.29 = call $184load_global.22($const186.23, $196binary_add.28, func=$184load_global.22, args=[Var($const186.23, _loop_hafnian_subroutines.py:177), Var($196binary_add.28, _loop_hafnian_subroutines.py:177)], kws=(), vararg=None, target=None) ['$184load_global.22', '$196binary_add.28', '$198call_function.29', '$const186.23']
    $200get_iter.30 = getiter(value=$198call_function.29) ['$198call_function.29', '$200get_iter.30']
    $phi202.1 = $200get_iter.30              ['$200get_iter.30', '$phi202.1']
    jump 202                                 []
label 202:
    $202for_iter.2 = iternext(value=$phi202.1) ['$202for_iter.2', '$phi202.1']
    $202for_iter.3 = pair_first(value=$202for_iter.2) ['$202for_iter.2', '$202for_iter.3']
    $202for_iter.4 = pair_second(value=$202for_iter.2) ['$202for_iter.2', '$202for_iter.4']
    $phi204.2 = $202for_iter.3               ['$202for_iter.3', '$phi204.2']
    branch $202for_iter.4, 204, 300          ['$202for_iter.4']
label 204:
    j = $phi204.2                            ['$phi204.2', 'j']
    $212binary_true_divide.6 = factor / j    ['$212binary_true_divide.6', 'factor', 'j']
    $214inplace_multiply.7 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=powfactor, rhs=$212binary_true_divide.6, static_lhs=Undefined, static_rhs=Undefined) ['$212binary_true_divide.6', '$214inplace_multiply.7', 'powfactor']
    powfactor = $214inplace_multiply.7       ['$214inplace_multiply.7', 'powfactor']
    $218load_global.8 = global(range: <class 'range'>) ['$218load_global.8']
    $224binary_multiply.11 = i * j           ['$224binary_multiply.11', 'i', 'j']
    $const226.12 = const(int, 1)             ['$const226.12']
    $228binary_add.13 = $224binary_multiply.11 + $const226.12 ['$224binary_multiply.11', '$228binary_add.13', '$const226.12']
    $const232.15 = const(int, 2)             ['$const232.15']
    $234binary_add.16 = n + $const232.15     ['$234binary_add.16', '$const232.15', 'n']
    $236call_function.17 = call $218load_global.8($228binary_add.13, $234binary_add.16, func=$218load_global.8, args=[Var($228binary_add.13, _loop_hafnian_subroutines.py:179), Var($234binary_add.16, _loop_hafnian_subroutines.py:179)], kws=(), vararg=None, target=None) ['$218load_global.8', '$228binary_add.13', '$234binary_add.16', '$236call_function.17']
    $238get_iter.18 = getiter(value=$236call_function.17) ['$236call_function.17', '$238get_iter.18']
    $phi240.2 = $238get_iter.18              ['$238get_iter.18', '$phi240.2']
    jump 240                                 []
label 240:
    $240for_iter.3 = iternext(value=$phi240.2) ['$240for_iter.3', '$phi240.2']
    $240for_iter.4 = pair_first(value=$240for_iter.3) ['$240for_iter.3', '$240for_iter.4']
    $240for_iter.5 = pair_second(value=$240for_iter.3) ['$240for_iter.3', '$240for_iter.5']
    $phi242.3 = $240for_iter.4               ['$240for_iter.4', '$phi242.3']
    branch $240for_iter.5, 242, 298          ['$240for_iter.5']
label 242:
    k = $phi242.3                            ['$phi242.3', 'k']
    $const250.7 = const(int, 1)              ['$const250.7']
    $252binary_subtract.8 = k - $const250.7  ['$252binary_subtract.8', '$const250.7', 'k']
    $254build_tuple.9 = build_tuple(items=[Var(count, _loop_hafnian_subroutines.py:161), Var($252binary_subtract.8, _loop_hafnian_subroutines.py:180)]) ['$252binary_subtract.8', '$254build_tuple.9', 'count']
    $258binary_subscr.12 = getitem(value=comb, index=$254build_tuple.9, fn=<built-in function getitem>) ['$254build_tuple.9', '$258binary_subscr.12', 'comb']
    $const262.14 = const(int, 1)             ['$const262.14']
    $266binary_subtract.16 = $const262.14 - count ['$266binary_subtract.16', '$const262.14', 'count']
    $274binary_multiply.20 = i * j           ['$274binary_multiply.20', 'i', 'j']
    $276binary_subtract.21 = k - $274binary_multiply.20 ['$274binary_multiply.20', '$276binary_subtract.21', 'k']
    $const278.22 = const(int, 1)             ['$const278.22']
    $280binary_subtract.23 = $276binary_subtract.21 - $const278.22 ['$276binary_subtract.21', '$280binary_subtract.23', '$const278.22']
    $282build_tuple.24 = build_tuple(items=[Var($266binary_subtract.16, _loop_hafnian_subroutines.py:180), Var($280binary_subtract.23, _loop_hafnian_subroutines.py:180)]) ['$266binary_subtract.16', '$280binary_subtract.23', '$282build_tuple.24']
    $284binary_subscr.25 = getitem(value=comb, index=$282build_tuple.24, fn=<built-in function getitem>) ['$282build_tuple.24', '$284binary_subscr.25', 'comb']
    $288binary_multiply.27 = $284binary_subscr.25 * powfactor ['$284binary_subscr.25', '$288binary_multiply.27', 'powfactor']
    $290inplace_add.28 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$258binary_subscr.12, rhs=$288binary_multiply.27, static_lhs=Undefined, static_rhs=Undefined) ['$258binary_subscr.12', '$288binary_multiply.27', '$290inplace_add.28']
    comb[$254build_tuple.9] = $290inplace_add.28 ['$254build_tuple.9', '$290inplace_add.28', 'comb']
    jump 240                                 []
label 298:
    jump 202                                 []
label 300:
    jump 60                                  []
label 302:
    $const306.2 = const(NoneType, None)      ['$const306.2']
    $const308.3 = const(NoneType, None)      ['$const308.3']
    $310build_slice.4 = global(slice: <class 'slice'>) ['$310build_slice.4']
    $310build_slice.5 = call $310build_slice.4($const306.2, $const308.3, func=$310build_slice.4, args=(Var($const306.2, _loop_hafnian_subroutines.py:182), Var($const308.3, _loop_hafnian_subroutines.py:182)), kws=(), vararg=None, target=None) ['$310build_slice.4', '$310build_slice.5', '$const306.2', '$const308.3']
    $312build_tuple.6 = build_tuple(items=[Var(count, _loop_hafnian_subroutines.py:161), Var($310build_slice.5, _loop_hafnian_subroutines.py:182)]) ['$310build_slice.5', '$312build_tuple.6', 'count']
    $314binary_subscr.7 = getitem(value=comb, index=$312build_tuple.6, fn=<built-in function getitem>) ['$312build_tuple.6', '$314binary_subscr.7', 'comb']
    $316return_value.8 = cast(value=$314binary_subscr.7) ['$314binary_subscr.7', '$316return_value.8']
    return $316return_value.8                ['$316return_value.8']

DEBUG 2022-02-07 18:03:06,897 ==== SSA block analysis pass on 0
DEBUG 2022-02-07 18:03:06,897 Running <numba.core.ssa._GatherDefsHandler object at 0x00000196AF20FBB0>
DEBUG 2022-02-07 18:03:06,897 on stmt: E = arg(0, name=E)
DEBUG 2022-02-07 18:03:06,897 on stmt: AX_S = arg(1, name=AX_S)
DEBUG 2022-02-07 18:03:06,897 on stmt: XD_S = arg(2, name=XD_S)
DEBUG 2022-02-07 18:03:06,897 on stmt: D_S = arg(3, name=D_S)
DEBUG 2022-02-07 18:03:06,897 on stmt: n = arg(4, name=n)
DEBUG 2022-02-07 18:03:06,897 on stmt: oddloop = arg(5, name=oddloop)
DEBUG 2022-02-07 18:03:06,897 on stmt: oddVX_S = arg(6, name=oddVX_S)
DEBUG 2022-02-07 18:03:06,897 on stmt: $4load_method.1 = getattr(value=E, attr=copy)
DEBUG 2022-02-07 18:03:06,897 on stmt: E_k = call $4load_method.1(func=$4load_method.1, args=[], kws=(), vararg=None, target=None)
DEBUG 2022-02-07 18:03:06,897 on stmt: count = const(int, 0)
DEBUG 2022-02-07 18:03:06,897 on stmt: $14load_global.4 = global(np: <module 'numpy' from 'C:\\Users\\zl4821\\Anaconda3\\envs\\GBS\\lib\\site-packages\\numpy\\__init__.py'>)
DEBUG 2022-02-07 18:03:06,897 on stmt: $16load_attr.5 = getattr(value=$14load_global.4, attr=zeros)
DEBUG 2022-02-07 18:03:06,897 on stmt: $const18.6 = const(int, 2)
DEBUG 2022-02-07 18:03:06,897 on stmt: $const22.8 = const(int, 1)
DEBUG 2022-02-07 18:03:06,897 on stmt: $24binary_add.9 = n + $const22.8
DEBUG 2022-02-07 18:03:06,897 on stmt: $26build_tuple.10 = build_tuple(items=[Var($const18.6, _loop_hafnian_subroutines.py:162), Var($24binary_add.9, _loop_hafnian_subroutines.py:162)])
DEBUG 2022-02-07 18:03:06,897 on stmt: $28load_global.11 = global(np: <module 'numpy' from 'C:\\Users\\zl4821\\Anaconda3\\envs\\GBS\\lib\\site-packages\\numpy\\__init__.py'>)
DEBUG 2022-02-07 18:03:06,897 on stmt: $30load_attr.12 = getattr(value=$28load_global.11, attr=complex128)
DEBUG 2022-02-07 18:03:06,897 on stmt: comb = call $16load_attr.5($26build_tuple.10, func=$16load_attr.5, args=[Var($26build_tuple.10, _loop_hafnian_subroutines.py:162)], kws=[('dtype', Var($30load_attr.12, _loop_hafnian_subroutines.py:162))], vararg=None, target=None)
DEBUG 2022-02-07 18:03:06,897 on stmt: $const38.15 = const(int, 1)
DEBUG 2022-02-07 18:03:06,897 on stmt: $const_0 = const(int, 0)
DEBUG 2022-02-07 18:03:06,897 on stmt: $const_0.1 = const(int, 0)
DEBUG 2022-02-07 18:03:06,897 on stmt: $const42.17 = build_tuple(items=[Var($const_0, _loop_hafnian_subroutines.py:163), Var($const_0.1, _loop_hafnian_subroutines.py:163)])
DEBUG 2022-02-07 18:03:06,897 on stmt: comb[(0, 0)] = $const38.15
DEBUG 2022-02-07 18:03:06,897 on stmt: $46load_global.18 = global(range: <class 'range'>)
DEBUG 2022-02-07 18:03:06,897 on stmt: $const48.19 = const(int, 1)
DEBUG 2022-02-07 18:03:06,913 on stmt: $const52.21 = const(int, 1)
DEBUG 2022-02-07 18:03:06,913 on stmt: $54binary_add.22 = n + $const52.21
DEBUG 2022-02-07 18:03:06,913 on stmt: $56call_function.23 = call $46load_global.18($const48.19, $54binary_add.22, func=$46load_global.18, args=[Var($const48.19, _loop_hafnian_subroutines.py:164), Var($54binary_add.22, _loop_hafnian_subroutines.py:164)], kws=(), vararg=None, target=None)
DEBUG 2022-02-07 18:03:06,913 on stmt: $58get_iter.24 = getiter(value=$56call_function.23)
DEBUG 2022-02-07 18:03:06,913 on stmt: $phi60.0 = $58get_iter.24
DEBUG 2022-02-07 18:03:06,913 on stmt: jump 60
DEBUG 2022-02-07 18:03:06,913 ==== SSA block analysis pass on 60
DEBUG 2022-02-07 18:03:06,913 Running <numba.core.ssa._GatherDefsHandler object at 0x00000196AF20FBB0>
DEBUG 2022-02-07 18:03:06,913 on stmt: $60for_iter.1 = iternext(value=$phi60.0)
DEBUG 2022-02-07 18:03:06,913 on stmt: $60for_iter.2 = pair_first(value=$60for_iter.1)
DEBUG 2022-02-07 18:03:06,913 on stmt: $60for_iter.3 = pair_second(value=$60for_iter.1)
DEBUG 2022-02-07 18:03:06,913 on stmt: $phi62.1 = $60for_iter.2
DEBUG 2022-02-07 18:03:06,913 on stmt: branch $60for_iter.3, 62, 302
DEBUG 2022-02-07 18:03:06,913 ==== SSA block analysis pass on 62
DEBUG 2022-02-07 18:03:06,913 Running <numba.core.ssa._GatherDefsHandler object at 0x00000196AF20FBB0>
DEBUG 2022-02-07 18:03:06,913 on stmt: i = $phi62.1
DEBUG 2022-02-07 18:03:06,913 on stmt: $const66.3 = const(int, 1)
DEBUG 2022-02-07 18:03:06,913 on stmt: $68compare_op.4 = i == $const66.3
DEBUG 2022-02-07 18:03:06,913 on stmt: bool70 = global(bool: <class 'bool'>)
DEBUG 2022-02-07 18:03:06,913 on stmt: $70pred = call bool70($68compare_op.4, func=bool70, args=(Var($68compare_op.4, _loop_hafnian_subroutines.py:165),), kws=(), vararg=None, target=None)
DEBUG 2022-02-07 18:03:06,913 on stmt: branch $70pred, 72, 78
DEBUG 2022-02-07 18:03:06,913 ==== SSA block analysis pass on 72
DEBUG 2022-02-07 18:03:06,913 Running <numba.core.ssa._GatherDefsHandler object at 0x00000196AF20FBB0>
DEBUG 2022-02-07 18:03:06,913 on stmt: factor = oddloop
DEBUG 2022-02-07 18:03:06,913 on stmt: jump 140
DEBUG 2022-02-07 18:03:06,913 ==== SSA block analysis pass on 78
DEBUG 2022-02-07 18:03:06,913 Running <numba.core.ssa._GatherDefsHandler object at 0x00000196AF20FBB0>
DEBUG 2022-02-07 18:03:06,913 on stmt: $const80.2 = const(int, 2)
DEBUG 2022-02-07 18:03:06,913 on stmt: $82binary_modulo.3 = i % $const80.2
DEBUG 2022-02-07 18:03:06,913 on stmt: $const84.4 = const(int, 0)
DEBUG 2022-02-07 18:03:06,913 on stmt: $86compare_op.5 = $82binary_modulo.3 == $const84.4
DEBUG 2022-02-07 18:03:06,913 on stmt: bool88 = global(bool: <class 'bool'>)
DEBUG 2022-02-07 18:03:06,913 on stmt: $88pred = call bool88($86compare_op.5, func=bool88, args=(Var($86compare_op.5, _loop_hafnian_subroutines.py:167),), kws=(), vararg=None, target=None)
DEBUG 2022-02-07 18:03:06,913 on stmt: branch $88pred, 90, 124
DEBUG 2022-02-07 18:03:06,913 ==== SSA block analysis pass on 90
DEBUG 2022-02-07 18:03:06,913 Running <numba.core.ssa._GatherDefsHandler object at 0x00000196AF20FBB0>
DEBUG 2022-02-07 18:03:06,913 on stmt: $92load_method.2 = getattr(value=E_k, attr=sum)
DEBUG 2022-02-07 18:03:06,913 on stmt: $94call_method.3 = call $92load_method.2(func=$92load_method.2, args=[], kws=(), vararg=None, target=None)
DEBUG 2022-02-07 18:03:06,913 on stmt: $98binary_true_divide.5 = $94call_method.3 / i
DEBUG 2022-02-07 18:03:06,913 on stmt: $104binary_matrix_multiply.8 = XD_S <built-in function matmul> D_S
DEBUG 2022-02-07 18:03:06,913 on stmt: $const106.9 = const(int, 2)
DEBUG 2022-02-07 18:03:06,913 on stmt: $108binary_true_divide.10 = $104binary_matrix_multiply.8 / $const106.9
DEBUG 2022-02-07 18:03:06,913 on stmt: factor = $98binary_true_divide.5 + $108binary_true_divide.10
DEBUG 2022-02-07 18:03:06,913 on stmt: $118inplace_multiply.14 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=E_k, rhs=E, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-07 18:03:06,913 on stmt: E_k = $118inplace_multiply.14
DEBUG 2022-02-07 18:03:06,913 on stmt: jump 140
DEBUG 2022-02-07 18:03:06,913 ==== SSA block analysis pass on 124
DEBUG 2022-02-07 18:03:06,913 Running <numba.core.ssa._GatherDefsHandler object at 0x00000196AF20FBB0>
DEBUG 2022-02-07 18:03:06,913 on stmt: factor = oddVX_S <built-in function matmul> D_S
DEBUG 2022-02-07 18:03:06,913 on stmt: $136binary_matrix_multiply.6 = AX_S <built-in function matmul> D_S
DEBUG 2022-02-07 18:03:06,913 on stmt: D_S = $136binary_matrix_multiply.6
DEBUG 2022-02-07 18:03:06,913 on stmt: jump 140
DEBUG 2022-02-07 18:03:06,913 ==== SSA block analysis pass on 140
DEBUG 2022-02-07 18:03:06,913 Running <numba.core.ssa._GatherDefsHandler object at 0x00000196AF20FBB0>
DEBUG 2022-02-07 18:03:06,913 on stmt: powfactor = const(int, 1)
DEBUG 2022-02-07 18:03:06,913 on stmt: $const144.2 = const(int, 1)
DEBUG 2022-02-07 18:03:06,913 on stmt: $148binary_subtract.4 = $const144.2 - count
DEBUG 2022-02-07 18:03:06,913 on stmt: count = $148binary_subtract.4
DEBUG 2022-02-07 18:03:06,913 on stmt: $const154.6 = const(int, 1)
DEBUG 2022-02-07 18:03:06,913 on stmt: $158binary_subtract.8 = $const154.6 - count
DEBUG 2022-02-07 18:03:06,913 on stmt: $const160.9 = const(NoneType, None)
DEBUG 2022-02-07 18:03:06,913 on stmt: $const162.10 = const(NoneType, None)
DEBUG 2022-02-07 18:03:06,913 on stmt: $164build_slice.11 = global(slice: <class 'slice'>)
DEBUG 2022-02-07 18:03:06,913 on stmt: $164build_slice.12 = call $164build_slice.11($const160.9, $const162.10, func=$164build_slice.11, args=(Var($const160.9, _loop_hafnian_subroutines.py:176), Var($const162.10, _loop_hafnian_subroutines.py:176)), kws=(), vararg=None, target=None)
DEBUG 2022-02-07 18:03:06,913 on stmt: $166build_tuple.13 = build_tuple(items=[Var($158binary_subtract.8, _loop_hafnian_subroutines.py:176), Var($164build_slice.12, _loop_hafnian_subroutines.py:176)])
DEBUG 2022-02-07 18:03:06,913 on stmt: $168binary_subscr.14 = getitem(value=comb, index=$166build_tuple.13, fn=<built-in function getitem>)
DEBUG 2022-02-07 18:03:06,913 on stmt: $const174.17 = const(NoneType, None)
DEBUG 2022-02-07 18:03:06,913 on stmt: $const176.18 = const(NoneType, None)
DEBUG 2022-02-07 18:03:06,913 on stmt: $178build_slice.19 = global(slice: <class 'slice'>)
DEBUG 2022-02-07 18:03:06,913 on stmt: $178build_slice.20 = call $178build_slice.19($const174.17, $const176.18, func=$178build_slice.19, args=(Var($const174.17, _loop_hafnian_subroutines.py:176), Var($const176.18, _loop_hafnian_subroutines.py:176)), kws=(), vararg=None, target=None)
DEBUG 2022-02-07 18:03:06,913 on stmt: $180build_tuple.21 = build_tuple(items=[Var(count, _loop_hafnian_subroutines.py:161), Var($178build_slice.20, _loop_hafnian_subroutines.py:176)])
DEBUG 2022-02-07 18:03:06,913 on stmt: comb[$180build_tuple.21] = $168binary_subscr.14
DEBUG 2022-02-07 18:03:06,913 on stmt: $184load_global.22 = global(range: <class 'range'>)
DEBUG 2022-02-07 18:03:06,913 on stmt: $const186.23 = const(int, 1)
DEBUG 2022-02-07 18:03:06,913 on stmt: $192binary_floor_divide.26 = n // i
DEBUG 2022-02-07 18:03:06,913 on stmt: $const194.27 = const(int, 1)
DEBUG 2022-02-07 18:03:06,913 on stmt: $196binary_add.28 = $192binary_floor_divide.26 + $const194.27
DEBUG 2022-02-07 18:03:06,913 on stmt: $198call_function.29 = call $184load_global.22($const186.23, $196binary_add.28, func=$184load_global.22, args=[Var($const186.23, _loop_hafnian_subroutines.py:177), Var($196binary_add.28, _loop_hafnian_subroutines.py:177)], kws=(), vararg=None, target=None)
DEBUG 2022-02-07 18:03:06,913 on stmt: $200get_iter.30 = getiter(value=$198call_function.29)
DEBUG 2022-02-07 18:03:06,913 on stmt: $phi202.1 = $200get_iter.30
DEBUG 2022-02-07 18:03:06,913 on stmt: jump 202
DEBUG 2022-02-07 18:03:06,913 ==== SSA block analysis pass on 202
DEBUG 2022-02-07 18:03:06,913 Running <numba.core.ssa._GatherDefsHandler object at 0x00000196AF20FBB0>
DEBUG 2022-02-07 18:03:06,913 on stmt: $202for_iter.2 = iternext(value=$phi202.1)
DEBUG 2022-02-07 18:03:06,913 on stmt: $202for_iter.3 = pair_first(value=$202for_iter.2)
DEBUG 2022-02-07 18:03:06,913 on stmt: $202for_iter.4 = pair_second(value=$202for_iter.2)
DEBUG 2022-02-07 18:03:06,913 on stmt: $phi204.2 = $202for_iter.3
DEBUG 2022-02-07 18:03:06,913 on stmt: branch $202for_iter.4, 204, 300
DEBUG 2022-02-07 18:03:06,913 ==== SSA block analysis pass on 204
DEBUG 2022-02-07 18:03:06,913 Running <numba.core.ssa._GatherDefsHandler object at 0x00000196AF20FBB0>
DEBUG 2022-02-07 18:03:06,913 on stmt: j = $phi204.2
DEBUG 2022-02-07 18:03:06,928 on stmt: $212binary_true_divide.6 = factor / j
DEBUG 2022-02-07 18:03:06,928 on stmt: $214inplace_multiply.7 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=powfactor, rhs=$212binary_true_divide.6, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-07 18:03:06,928 on stmt: powfactor = $214inplace_multiply.7
DEBUG 2022-02-07 18:03:06,928 on stmt: $218load_global.8 = global(range: <class 'range'>)
DEBUG 2022-02-07 18:03:06,928 on stmt: $224binary_multiply.11 = i * j
DEBUG 2022-02-07 18:03:06,928 on stmt: $const226.12 = const(int, 1)
DEBUG 2022-02-07 18:03:06,928 on stmt: $228binary_add.13 = $224binary_multiply.11 + $const226.12
DEBUG 2022-02-07 18:03:06,928 on stmt: $const232.15 = const(int, 2)
DEBUG 2022-02-07 18:03:06,928 on stmt: $234binary_add.16 = n + $const232.15
DEBUG 2022-02-07 18:03:06,928 on stmt: $236call_function.17 = call $218load_global.8($228binary_add.13, $234binary_add.16, func=$218load_global.8, args=[Var($228binary_add.13, _loop_hafnian_subroutines.py:179), Var($234binary_add.16, _loop_hafnian_subroutines.py:179)], kws=(), vararg=None, target=None)
DEBUG 2022-02-07 18:03:06,928 on stmt: $238get_iter.18 = getiter(value=$236call_function.17)
DEBUG 2022-02-07 18:03:06,928 on stmt: $phi240.2 = $238get_iter.18
DEBUG 2022-02-07 18:03:06,928 on stmt: jump 240
DEBUG 2022-02-07 18:03:06,928 ==== SSA block analysis pass on 240
DEBUG 2022-02-07 18:03:06,928 Running <numba.core.ssa._GatherDefsHandler object at 0x00000196AF20FBB0>
DEBUG 2022-02-07 18:03:06,928 on stmt: $240for_iter.3 = iternext(value=$phi240.2)
DEBUG 2022-02-07 18:03:06,928 on stmt: $240for_iter.4 = pair_first(value=$240for_iter.3)
DEBUG 2022-02-07 18:03:06,928 on stmt: $240for_iter.5 = pair_second(value=$240for_iter.3)
DEBUG 2022-02-07 18:03:06,928 on stmt: $phi242.3 = $240for_iter.4
DEBUG 2022-02-07 18:03:06,928 on stmt: branch $240for_iter.5, 242, 298
DEBUG 2022-02-07 18:03:06,928 ==== SSA block analysis pass on 242
DEBUG 2022-02-07 18:03:06,928 Running <numba.core.ssa._GatherDefsHandler object at 0x00000196AF20FBB0>
DEBUG 2022-02-07 18:03:06,928 on stmt: k = $phi242.3
DEBUG 2022-02-07 18:03:06,928 on stmt: $const250.7 = const(int, 1)
DEBUG 2022-02-07 18:03:06,928 on stmt: $252binary_subtract.8 = k - $const250.7
DEBUG 2022-02-07 18:03:06,928 on stmt: $254build_tuple.9 = build_tuple(items=[Var(count, _loop_hafnian_subroutines.py:161), Var($252binary_subtract.8, _loop_hafnian_subroutines.py:180)])
DEBUG 2022-02-07 18:03:06,928 on stmt: $258binary_subscr.12 = getitem(value=comb, index=$254build_tuple.9, fn=<built-in function getitem>)
DEBUG 2022-02-07 18:03:06,928 on stmt: $const262.14 = const(int, 1)
DEBUG 2022-02-07 18:03:06,928 on stmt: $266binary_subtract.16 = $const262.14 - count
DEBUG 2022-02-07 18:03:06,928 on stmt: $274binary_multiply.20 = i * j
DEBUG 2022-02-07 18:03:06,928 on stmt: $276binary_subtract.21 = k - $274binary_multiply.20
DEBUG 2022-02-07 18:03:06,928 on stmt: $const278.22 = const(int, 1)
DEBUG 2022-02-07 18:03:06,928 on stmt: $280binary_subtract.23 = $276binary_subtract.21 - $const278.22
DEBUG 2022-02-07 18:03:06,928 on stmt: $282build_tuple.24 = build_tuple(items=[Var($266binary_subtract.16, _loop_hafnian_subroutines.py:180), Var($280binary_subtract.23, _loop_hafnian_subroutines.py:180)])
DEBUG 2022-02-07 18:03:06,928 on stmt: $284binary_subscr.25 = getitem(value=comb, index=$282build_tuple.24, fn=<built-in function getitem>)
DEBUG 2022-02-07 18:03:06,928 on stmt: $288binary_multiply.27 = $284binary_subscr.25 * powfactor
DEBUG 2022-02-07 18:03:06,928 on stmt: $290inplace_add.28 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$258binary_subscr.12, rhs=$288binary_multiply.27, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-07 18:03:06,928 on stmt: comb[$254build_tuple.9] = $290inplace_add.28
DEBUG 2022-02-07 18:03:06,928 on stmt: jump 240
DEBUG 2022-02-07 18:03:06,928 ==== SSA block analysis pass on 298
DEBUG 2022-02-07 18:03:06,928 Running <numba.core.ssa._GatherDefsHandler object at 0x00000196AF20FBB0>
DEBUG 2022-02-07 18:03:06,928 on stmt: jump 202
DEBUG 2022-02-07 18:03:06,928 ==== SSA block analysis pass on 300
DEBUG 2022-02-07 18:03:06,928 Running <numba.core.ssa._GatherDefsHandler object at 0x00000196AF20FBB0>
DEBUG 2022-02-07 18:03:06,928 on stmt: jump 60
DEBUG 2022-02-07 18:03:06,928 ==== SSA block analysis pass on 302
DEBUG 2022-02-07 18:03:06,928 Running <numba.core.ssa._GatherDefsHandler object at 0x00000196AF20FBB0>
DEBUG 2022-02-07 18:03:06,928 on stmt: $const306.2 = const(NoneType, None)
DEBUG 2022-02-07 18:03:06,928 on stmt: $const308.3 = const(NoneType, None)
DEBUG 2022-02-07 18:03:06,928 on stmt: $310build_slice.4 = global(slice: <class 'slice'>)
DEBUG 2022-02-07 18:03:06,928 on stmt: $310build_slice.5 = call $310build_slice.4($const306.2, $const308.3, func=$310build_slice.4, args=(Var($const306.2, _loop_hafnian_subroutines.py:182), Var($const308.3, _loop_hafnian_subroutines.py:182)), kws=(), vararg=None, target=None)
DEBUG 2022-02-07 18:03:06,928 on stmt: $312build_tuple.6 = build_tuple(items=[Var(count, _loop_hafnian_subroutines.py:161), Var($310build_slice.5, _loop_hafnian_subroutines.py:182)])
DEBUG 2022-02-07 18:03:06,928 on stmt: $314binary_subscr.7 = getitem(value=comb, index=$312build_tuple.6, fn=<built-in function getitem>)
DEBUG 2022-02-07 18:03:06,928 on stmt: $316return_value.8 = cast(value=$314binary_subscr.7)
DEBUG 2022-02-07 18:03:06,928 on stmt: return $316return_value.8
DEBUG 2022-02-07 18:03:06,944 defs defaultdict(<class 'list'>,
            {'$104binary_matrix_multiply.8': [<numba.core.ir.Assign object at 0x00000196AF25A310>],
             '$108binary_true_divide.10': [<numba.core.ir.Assign object at 0x00000196AF25A610>],
             '$118inplace_multiply.14': [<numba.core.ir.Assign object at 0x00000196AF25AC10>],
             '$136binary_matrix_multiply.6': [<numba.core.ir.Assign object at 0x00000196AF25C3D0>],
             '$148binary_subtract.4': [<numba.core.ir.Assign object at 0x00000196AF25CA30>],
             '$14load_global.4': [<numba.core.ir.Assign object at 0x00000196AF24FA60>],
             '$158binary_subtract.8': [<numba.core.ir.Assign object at 0x00000196AF25E070>],
             '$164build_slice.11': [<numba.core.ir.Assign object at 0x00000196AF25E4C0>],
             '$164build_slice.12': [<numba.core.ir.Assign object at 0x00000196AF25E5E0>],
             '$166build_tuple.13': [<numba.core.ir.Assign object at 0x00000196AF25E790>],
             '$168binary_subscr.14': [<numba.core.ir.Assign object at 0x00000196AF25E910>],
             '$16load_attr.5': [<numba.core.ir.Assign object at 0x00000196AF24FBE0>],
             '$178build_slice.19': [<numba.core.ir.Assign object at 0x00000196AF25EFA0>],
             '$178build_slice.20': [<numba.core.ir.Assign object at 0x00000196B0230100>],
             '$180build_tuple.21': [<numba.core.ir.Assign object at 0x00000196B02302B0>],
             '$184load_global.22': [<numba.core.ir.Assign object at 0x00000196B02304C0>],
             '$192binary_floor_divide.26': [<numba.core.ir.Assign object at 0x00000196B0230A30>],
             '$196binary_add.28': [<numba.core.ir.Assign object at 0x00000196B0230D30>],
             '$198call_function.29': [<numba.core.ir.Assign object at 0x00000196B0230EE0>],
             '$200get_iter.30': [<numba.core.ir.Assign object at 0x00000196B0232040>],
             '$202for_iter.2': [<numba.core.ir.Assign object at 0x00000196B02320A0>],
             '$202for_iter.3': [<numba.core.ir.Assign object at 0x00000196B02321F0>],
             '$202for_iter.4': [<numba.core.ir.Assign object at 0x00000196B0232310>],
             '$212binary_true_divide.6': [<numba.core.ir.Assign object at 0x00000196B0232AF0>],
             '$214inplace_multiply.7': [<numba.core.ir.Assign object at 0x00000196B0232C70>],
             '$218load_global.8': [<numba.core.ir.Assign object at 0x00000196B0232E80>],
             '$224binary_multiply.11': [<numba.core.ir.Assign object at 0x00000196B02342B0>],
             '$228binary_add.13': [<numba.core.ir.Assign object at 0x00000196B02345B0>],
             '$234binary_add.16': [<numba.core.ir.Assign object at 0x00000196B02349D0>],
             '$236call_function.17': [<numba.core.ir.Assign object at 0x00000196B0234B80>],
             '$238get_iter.18': [<numba.core.ir.Assign object at 0x00000196B0234CA0>],
             '$240for_iter.3': [<numba.core.ir.Assign object at 0x00000196B0234DF0>],
             '$240for_iter.4': [<numba.core.ir.Assign object at 0x00000196B0234F10>],
             '$240for_iter.5': [<numba.core.ir.Assign object at 0x00000196B0236070>],
             '$24binary_add.9': [<numba.core.ir.Assign object at 0x00000196AF2501F0>],
             '$252binary_subtract.8': [<numba.core.ir.Assign object at 0x00000196B02369D0>],
             '$254build_tuple.9': [<numba.core.ir.Assign object at 0x00000196B0236B50>],
             '$258binary_subscr.12': [<numba.core.ir.Assign object at 0x00000196B0236EB0>],
             '$266binary_subtract.16': [<numba.core.ir.Assign object at 0x00000196B0238430>],
             '$26build_tuple.10': [<numba.core.ir.Assign object at 0x00000196AF250370>],
             '$274binary_multiply.20': [<numba.core.ir.Assign object at 0x00000196B0238910>],
             '$276binary_subtract.21': [<numba.core.ir.Assign object at 0x00000196B0238A90>],
             '$280binary_subtract.23': [<numba.core.ir.Assign object at 0x00000196B0238D90>],
             '$282build_tuple.24': [<numba.core.ir.Assign object at 0x00000196B0238F10>],
             '$284binary_subscr.25': [<numba.core.ir.Assign object at 0x00000196B023A0D0>],
             '$288binary_multiply.27': [<numba.core.ir.Assign object at 0x00000196B023A370>],
             '$28load_global.11': [<numba.core.ir.Assign object at 0x00000196AF2504C0>],
             '$290inplace_add.28': [<numba.core.ir.Assign object at 0x00000196B023A4F0>],
             '$30load_attr.12': [<numba.core.ir.Assign object at 0x00000196AF250640>],
             '$310build_slice.4': [<numba.core.ir.Assign object at 0x00000196B023ACA0>],
             '$310build_slice.5': [<numba.core.ir.Assign object at 0x00000196B023ADC0>],
             '$312build_tuple.6': [<numba.core.ir.Assign object at 0x00000196B023AF70>],
             '$314binary_subscr.7': [<numba.core.ir.Assign object at 0x00000196B023D130>],
             '$316return_value.8': [<numba.core.ir.Assign object at 0x00000196B023D280>],
             '$46load_global.18': [<numba.core.ir.Assign object at 0x00000196AF2533A0>],
             '$4load_method.1': [<numba.core.ir.Assign object at 0x00000196AF24F3A0>],
             '$54binary_add.22': [<numba.core.ir.Assign object at 0x00000196AF253970>],
             '$56call_function.23': [<numba.core.ir.Assign object at 0x00000196AF253B20>],
             '$58get_iter.24': [<numba.core.ir.Assign object at 0x00000196AF253C40>],
             '$60for_iter.1': [<numba.core.ir.Assign object at 0x00000196AF253D30>],
             '$60for_iter.2': [<numba.core.ir.Assign object at 0x00000196AF253E50>],
             '$60for_iter.3': [<numba.core.ir.Assign object at 0x00000196AF253F70>],
             '$68compare_op.4': [<numba.core.ir.Assign object at 0x00000196AF2566D0>],
             '$70pred': [<numba.core.ir.Assign object at 0x00000196AF256940>],
             '$82binary_modulo.3': [<numba.core.ir.Assign object at 0x00000196AF2581F0>],
             '$86compare_op.5': [<numba.core.ir.Assign object at 0x00000196AF2584F0>],
             '$88pred': [<numba.core.ir.Assign object at 0x00000196AF258760>],
             '$92load_method.2': [<numba.core.ir.Assign object at 0x00000196AF258AC0>],
             '$94call_method.3': [<numba.core.ir.Assign object at 0x00000196AF258CD0>],
             '$98binary_true_divide.5': [<numba.core.ir.Assign object at 0x00000196AF258F10>],
             '$const106.9': [<numba.core.ir.Assign object at 0x00000196AF25A460>],
             '$const144.2': [<numba.core.ir.Assign object at 0x00000196AF25C760>],
             '$const154.6': [<numba.core.ir.Assign object at 0x00000196AF25CD60>],
             '$const160.9': [<numba.core.ir.Assign object at 0x00000196AF25E1C0>],
             '$const162.10': [<numba.core.ir.Assign object at 0x00000196AF25E340>],
             '$const174.17': [<numba.core.ir.Assign object at 0x00000196AF25ECA0>],
             '$const176.18': [<numba.core.ir.Assign object at 0x00000196AF25EE20>],
             '$const18.6': [<numba.core.ir.Assign object at 0x00000196AF24FD60>],
             '$const186.23': [<numba.core.ir.Assign object at 0x00000196B0230640>],
             '$const194.27': [<numba.core.ir.Assign object at 0x00000196B0230B80>],
             '$const22.8': [<numba.core.ir.Assign object at 0x00000196AF250040>],
             '$const226.12': [<numba.core.ir.Assign object at 0x00000196B0234400>],
             '$const232.15': [<numba.core.ir.Assign object at 0x00000196B0234820>],
             '$const250.7': [<numba.core.ir.Assign object at 0x00000196B0236820>],
             '$const262.14': [<numba.core.ir.Assign object at 0x00000196B0238160>],
             '$const278.22': [<numba.core.ir.Assign object at 0x00000196B0238BE0>],
             '$const306.2': [<numba.core.ir.Assign object at 0x00000196B023A9A0>],
             '$const308.3': [<numba.core.ir.Assign object at 0x00000196B023AB20>],
             '$const38.15': [<numba.core.ir.Assign object at 0x00000196AF250C40>],
             '$const42.17': [<numba.core.ir.Assign object at 0x00000196AF253160>],
             '$const48.19': [<numba.core.ir.Assign object at 0x00000196AF253520>],
             '$const52.21': [<numba.core.ir.Assign object at 0x00000196AF2537C0>],
             '$const66.3': [<numba.core.ir.Assign object at 0x00000196AF256520>],
             '$const80.2': [<numba.core.ir.Assign object at 0x00000196AF258040>],
             '$const84.4': [<numba.core.ir.Assign object at 0x00000196AF258340>],
             '$const_0': [<numba.core.ir.Assign object at 0x00000196AF250F10>],
             '$const_0.1': [<numba.core.ir.Assign object at 0x00000196AF253070>],
             '$phi202.1': [<numba.core.ir.Assign object at 0x00000196AF25C670>],
             '$phi204.2': [<numba.core.ir.Assign object at 0x00000196B02307F0>],
             '$phi240.2': [<numba.core.ir.Assign object at 0x00000196B0232790>],
             '$phi242.3': [<numba.core.ir.Assign object at 0x00000196B0234D00>],
             '$phi60.0': [<numba.core.ir.Assign object at 0x00000196AF24F2B0>],
             '$phi62.1': [<numba.core.ir.Assign object at 0x00000196AF253640>],
             'AX_S': [<numba.core.ir.Assign object at 0x00000196AF22D9A0>],
             'D_S': [<numba.core.ir.Assign object at 0x00000196AF22DA00>,
                     <numba.core.ir.Assign object at 0x00000196AF25C490>],
             'E': [<numba.core.ir.Assign object at 0x00000196AF22DA30>],
             'E_k': [<numba.core.ir.Assign object at 0x00000196AF24F5B0>,
                     <numba.core.ir.Assign object at 0x00000196AF25ACD0>],
             'XD_S': [<numba.core.ir.Assign object at 0x00000196AF22DDF0>],
             'bool70': [<numba.core.ir.Assign object at 0x00000196AF256820>],
             'bool88': [<numba.core.ir.Assign object at 0x00000196AF258640>],
             'comb': [<numba.core.ir.Assign object at 0x00000196AF250AC0>],
             'count': [<numba.core.ir.Assign object at 0x00000196AF24F7C0>,
                       <numba.core.ir.Assign object at 0x00000196AF25CAF0>],
             'factor': [<numba.core.ir.Assign object at 0x00000196AF256C40>,
                        <numba.core.ir.Assign object at 0x00000196AF25A790>,
                        <numba.core.ir.Assign object at 0x00000196AF25AF10>],
             'i': [<numba.core.ir.Assign object at 0x00000196AF256280>],
             'j': [<numba.core.ir.Assign object at 0x00000196B02325E0>],
             'k': [<numba.core.ir.Assign object at 0x00000196B0236340>],
             'n': [<numba.core.ir.Assign object at 0x00000196AF22DD00>],
             'oddVX_S': [<numba.core.ir.Assign object at 0x00000196AF24F100>],
             'oddloop': [<numba.core.ir.Assign object at 0x00000196AF22DFA0>],
             'powfactor': [<numba.core.ir.Assign object at 0x00000196AF25C2B0>,
                           <numba.core.ir.Assign object at 0x00000196B0232D30>]})
DEBUG 2022-02-07 18:03:06,944 SSA violators {'D_S', 'powfactor', 'E_k', 'factor', 'count'}
DEBUG 2022-02-07 18:03:06,944 Fix SSA violator on var D_S
DEBUG 2022-02-07 18:03:06,944 ==== SSA block rewrite pass on 0
DEBUG 2022-02-07 18:03:06,944 Running <numba.core.ssa._FreshVarHandler object at 0x00000196B023A1C0>
DEBUG 2022-02-07 18:03:06,944 on stmt: E = arg(0, name=E)
DEBUG 2022-02-07 18:03:06,944 on stmt: AX_S = arg(1, name=AX_S)
DEBUG 2022-02-07 18:03:06,944 on stmt: XD_S = arg(2, name=XD_S)
DEBUG 2022-02-07 18:03:06,944 on stmt: D_S = arg(3, name=D_S)
DEBUG 2022-02-07 18:03:06,944 first assign: D_S
DEBUG 2022-02-07 18:03:06,944 replaced with: D_S = arg(3, name=D_S)
DEBUG 2022-02-07 18:03:06,944 on stmt: n = arg(4, name=n)
DEBUG 2022-02-07 18:03:06,944 on stmt: oddloop = arg(5, name=oddloop)
DEBUG 2022-02-07 18:03:06,944 on stmt: oddVX_S = arg(6, name=oddVX_S)
DEBUG 2022-02-07 18:03:06,944 on stmt: $4load_method.1 = getattr(value=E, attr=copy)
DEBUG 2022-02-07 18:03:06,944 on stmt: E_k = call $4load_method.1(func=$4load_method.1, args=[], kws=(), vararg=None, target=None)
DEBUG 2022-02-07 18:03:06,944 on stmt: count = const(int, 0)
DEBUG 2022-02-07 18:03:06,944 on stmt: $14load_global.4 = global(np: <module 'numpy' from 'C:\\Users\\zl4821\\Anaconda3\\envs\\GBS\\lib\\site-packages\\numpy\\__init__.py'>)
DEBUG 2022-02-07 18:03:06,944 on stmt: $16load_attr.5 = getattr(value=$14load_global.4, attr=zeros)
DEBUG 2022-02-07 18:03:06,944 on stmt: $const18.6 = const(int, 2)
DEBUG 2022-02-07 18:03:06,944 on stmt: $const22.8 = const(int, 1)
DEBUG 2022-02-07 18:03:06,944 on stmt: $24binary_add.9 = n + $const22.8
DEBUG 2022-02-07 18:03:06,950 on stmt: $26build_tuple.10 = build_tuple(items=[Var($const18.6, _loop_hafnian_subroutines.py:162), Var($24binary_add.9, _loop_hafnian_subroutines.py:162)])
DEBUG 2022-02-07 18:03:06,950 on stmt: $28load_global.11 = global(np: <module 'numpy' from 'C:\\Users\\zl4821\\Anaconda3\\envs\\GBS\\lib\\site-packages\\numpy\\__init__.py'>)
DEBUG 2022-02-07 18:03:06,950 on stmt: $30load_attr.12 = getattr(value=$28load_global.11, attr=complex128)
DEBUG 2022-02-07 18:03:06,950 on stmt: comb = call $16load_attr.5($26build_tuple.10, func=$16load_attr.5, args=[Var($26build_tuple.10, _loop_hafnian_subroutines.py:162)], kws=[('dtype', Var($30load_attr.12, _loop_hafnian_subroutines.py:162))], vararg=None, target=None)
DEBUG 2022-02-07 18:03:06,950 on stmt: $const38.15 = const(int, 1)
DEBUG 2022-02-07 18:03:06,950 on stmt: $const_0 = const(int, 0)
DEBUG 2022-02-07 18:03:06,950 on stmt: $const_0.1 = const(int, 0)
DEBUG 2022-02-07 18:03:06,950 on stmt: $const42.17 = build_tuple(items=[Var($const_0, _loop_hafnian_subroutines.py:163), Var($const_0.1, _loop_hafnian_subroutines.py:163)])
DEBUG 2022-02-07 18:03:06,950 on stmt: comb[(0, 0)] = $const38.15
DEBUG 2022-02-07 18:03:06,950 on stmt: $46load_global.18 = global(range: <class 'range'>)
DEBUG 2022-02-07 18:03:06,950 on stmt: $const48.19 = const(int, 1)
DEBUG 2022-02-07 18:03:06,950 on stmt: $const52.21 = const(int, 1)
DEBUG 2022-02-07 18:03:06,950 on stmt: $54binary_add.22 = n + $const52.21
DEBUG 2022-02-07 18:03:06,950 on stmt: $56call_function.23 = call $46load_global.18($const48.19, $54binary_add.22, func=$46load_global.18, args=[Var($const48.19, _loop_hafnian_subroutines.py:164), Var($54binary_add.22, _loop_hafnian_subroutines.py:164)], kws=(), vararg=None, target=None)
DEBUG 2022-02-07 18:03:06,950 on stmt: $58get_iter.24 = getiter(value=$56call_function.23)
DEBUG 2022-02-07 18:03:06,950 on stmt: $phi60.0 = $58get_iter.24
DEBUG 2022-02-07 18:03:06,950 on stmt: jump 60
DEBUG 2022-02-07 18:03:06,950 ==== SSA block rewrite pass on 60
DEBUG 2022-02-07 18:03:06,950 Running <numba.core.ssa._FreshVarHandler object at 0x00000196B023A1C0>
DEBUG 2022-02-07 18:03:06,950 on stmt: $60for_iter.1 = iternext(value=$phi60.0)
DEBUG 2022-02-07 18:03:06,950 on stmt: $60for_iter.2 = pair_first(value=$60for_iter.1)
DEBUG 2022-02-07 18:03:06,950 on stmt: $60for_iter.3 = pair_second(value=$60for_iter.1)
DEBUG 2022-02-07 18:03:06,950 on stmt: $phi62.1 = $60for_iter.2
DEBUG 2022-02-07 18:03:06,950 on stmt: branch $60for_iter.3, 62, 302
DEBUG 2022-02-07 18:03:06,950 ==== SSA block rewrite pass on 62
DEBUG 2022-02-07 18:03:06,950 Running <numba.core.ssa._FreshVarHandler object at 0x00000196B023A1C0>
DEBUG 2022-02-07 18:03:06,950 on stmt: i = $phi62.1
DEBUG 2022-02-07 18:03:06,950 on stmt: $const66.3 = const(int, 1)
DEBUG 2022-02-07 18:03:06,950 on stmt: $68compare_op.4 = i == $const66.3
DEBUG 2022-02-07 18:03:06,950 on stmt: bool70 = global(bool: <class 'bool'>)
DEBUG 2022-02-07 18:03:06,950 on stmt: $70pred = call bool70($68compare_op.4, func=bool70, args=(Var($68compare_op.4, _loop_hafnian_subroutines.py:165),), kws=(), vararg=None, target=None)
DEBUG 2022-02-07 18:03:06,950 on stmt: branch $70pred, 72, 78
DEBUG 2022-02-07 18:03:06,950 ==== SSA block rewrite pass on 72
DEBUG 2022-02-07 18:03:06,950 Running <numba.core.ssa._FreshVarHandler object at 0x00000196B023A1C0>
DEBUG 2022-02-07 18:03:06,950 on stmt: factor = oddloop
DEBUG 2022-02-07 18:03:06,950 on stmt: jump 140
DEBUG 2022-02-07 18:03:06,950 ==== SSA block rewrite pass on 78
DEBUG 2022-02-07 18:03:06,950 Running <numba.core.ssa._FreshVarHandler object at 0x00000196B023A1C0>
DEBUG 2022-02-07 18:03:06,950 on stmt: $const80.2 = const(int, 2)
DEBUG 2022-02-07 18:03:06,950 on stmt: $82binary_modulo.3 = i % $const80.2
DEBUG 2022-02-07 18:03:06,950 on stmt: $const84.4 = const(int, 0)
DEBUG 2022-02-07 18:03:06,950 on stmt: $86compare_op.5 = $82binary_modulo.3 == $const84.4
DEBUG 2022-02-07 18:03:06,950 on stmt: bool88 = global(bool: <class 'bool'>)
DEBUG 2022-02-07 18:03:06,950 on stmt: $88pred = call bool88($86compare_op.5, func=bool88, args=(Var($86compare_op.5, _loop_hafnian_subroutines.py:167),), kws=(), vararg=None, target=None)
DEBUG 2022-02-07 18:03:06,950 on stmt: branch $88pred, 90, 124
DEBUG 2022-02-07 18:03:06,950 ==== SSA block rewrite pass on 90
DEBUG 2022-02-07 18:03:06,950 Running <numba.core.ssa._FreshVarHandler object at 0x00000196B023A1C0>
DEBUG 2022-02-07 18:03:06,950 on stmt: $92load_method.2 = getattr(value=E_k, attr=sum)
DEBUG 2022-02-07 18:03:06,950 on stmt: $94call_method.3 = call $92load_method.2(func=$92load_method.2, args=[], kws=(), vararg=None, target=None)
DEBUG 2022-02-07 18:03:06,950 on stmt: $98binary_true_divide.5 = $94call_method.3 / i
DEBUG 2022-02-07 18:03:06,950 on stmt: $104binary_matrix_multiply.8 = XD_S <built-in function matmul> D_S
DEBUG 2022-02-07 18:03:06,950 on stmt: $const106.9 = const(int, 2)
DEBUG 2022-02-07 18:03:06,950 on stmt: $108binary_true_divide.10 = $104binary_matrix_multiply.8 / $const106.9
DEBUG 2022-02-07 18:03:06,950 on stmt: factor = $98binary_true_divide.5 + $108binary_true_divide.10
DEBUG 2022-02-07 18:03:06,950 on stmt: $118inplace_multiply.14 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=E_k, rhs=E, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-07 18:03:06,950 on stmt: E_k = $118inplace_multiply.14
DEBUG 2022-02-07 18:03:06,950 on stmt: jump 140
DEBUG 2022-02-07 18:03:06,950 ==== SSA block rewrite pass on 124
DEBUG 2022-02-07 18:03:06,950 Running <numba.core.ssa._FreshVarHandler object at 0x00000196B023A1C0>
DEBUG 2022-02-07 18:03:06,950 on stmt: factor = oddVX_S <built-in function matmul> D_S
DEBUG 2022-02-07 18:03:06,950 on stmt: $136binary_matrix_multiply.6 = AX_S <built-in function matmul> D_S
DEBUG 2022-02-07 18:03:06,950 on stmt: D_S = $136binary_matrix_multiply.6
DEBUG 2022-02-07 18:03:06,950 replaced with: D_S.1 = $136binary_matrix_multiply.6
DEBUG 2022-02-07 18:03:06,950 on stmt: jump 140
DEBUG 2022-02-07 18:03:06,950 ==== SSA block rewrite pass on 140
DEBUG 2022-02-07 18:03:06,950 Running <numba.core.ssa._FreshVarHandler object at 0x00000196B023A1C0>
DEBUG 2022-02-07 18:03:06,950 on stmt: powfactor = const(int, 1)
DEBUG 2022-02-07 18:03:06,950 on stmt: $const144.2 = const(int, 1)
DEBUG 2022-02-07 18:03:06,950 on stmt: $148binary_subtract.4 = $const144.2 - count
DEBUG 2022-02-07 18:03:06,950 on stmt: count = $148binary_subtract.4
DEBUG 2022-02-07 18:03:06,950 on stmt: $const154.6 = const(int, 1)
DEBUG 2022-02-07 18:03:06,950 on stmt: $158binary_subtract.8 = $const154.6 - count
DEBUG 2022-02-07 18:03:06,950 on stmt: $const160.9 = const(NoneType, None)
DEBUG 2022-02-07 18:03:06,950 on stmt: $const162.10 = const(NoneType, None)
DEBUG 2022-02-07 18:03:06,950 on stmt: $164build_slice.11 = global(slice: <class 'slice'>)
DEBUG 2022-02-07 18:03:06,950 on stmt: $164build_slice.12 = call $164build_slice.11($const160.9, $const162.10, func=$164build_slice.11, args=(Var($const160.9, _loop_hafnian_subroutines.py:176), Var($const162.10, _loop_hafnian_subroutines.py:176)), kws=(), vararg=None, target=None)
DEBUG 2022-02-07 18:03:06,950 on stmt: $166build_tuple.13 = build_tuple(items=[Var($158binary_subtract.8, _loop_hafnian_subroutines.py:176), Var($164build_slice.12, _loop_hafnian_subroutines.py:176)])
DEBUG 2022-02-07 18:03:06,950 on stmt: $168binary_subscr.14 = getitem(value=comb, index=$166build_tuple.13, fn=<built-in function getitem>)
DEBUG 2022-02-07 18:03:06,966 on stmt: $const174.17 = const(NoneType, None)
DEBUG 2022-02-07 18:03:06,966 on stmt: $const176.18 = const(NoneType, None)
DEBUG 2022-02-07 18:03:06,966 on stmt: $178build_slice.19 = global(slice: <class 'slice'>)
DEBUG 2022-02-07 18:03:06,966 on stmt: $178build_slice.20 = call $178build_slice.19($const174.17, $const176.18, func=$178build_slice.19, args=(Var($const174.17, _loop_hafnian_subroutines.py:176), Var($const176.18, _loop_hafnian_subroutines.py:176)), kws=(), vararg=None, target=None)
DEBUG 2022-02-07 18:03:06,966 on stmt: $180build_tuple.21 = build_tuple(items=[Var(count, _loop_hafnian_subroutines.py:161), Var($178build_slice.20, _loop_hafnian_subroutines.py:176)])
DEBUG 2022-02-07 18:03:06,966 on stmt: comb[$180build_tuple.21] = $168binary_subscr.14
DEBUG 2022-02-07 18:03:06,966 on stmt: $184load_global.22 = global(range: <class 'range'>)
DEBUG 2022-02-07 18:03:06,966 on stmt: $const186.23 = const(int, 1)
DEBUG 2022-02-07 18:03:06,966 on stmt: $192binary_floor_divide.26 = n // i
DEBUG 2022-02-07 18:03:06,966 on stmt: $const194.27 = const(int, 1)
DEBUG 2022-02-07 18:03:06,966 on stmt: $196binary_add.28 = $192binary_floor_divide.26 + $const194.27
DEBUG 2022-02-07 18:03:06,966 on stmt: $198call_function.29 = call $184load_global.22($const186.23, $196binary_add.28, func=$184load_global.22, args=[Var($const186.23, _loop_hafnian_subroutines.py:177), Var($196binary_add.28, _loop_hafnian_subroutines.py:177)], kws=(), vararg=None, target=None)
DEBUG 2022-02-07 18:03:06,966 on stmt: $200get_iter.30 = getiter(value=$198call_function.29)
DEBUG 2022-02-07 18:03:06,966 on stmt: $phi202.1 = $200get_iter.30
DEBUG 2022-02-07 18:03:06,966 on stmt: jump 202
DEBUG 2022-02-07 18:03:06,966 ==== SSA block rewrite pass on 202
DEBUG 2022-02-07 18:03:06,966 Running <numba.core.ssa._FreshVarHandler object at 0x00000196B023A1C0>
DEBUG 2022-02-07 18:03:06,966 on stmt: $202for_iter.2 = iternext(value=$phi202.1)
DEBUG 2022-02-07 18:03:06,966 on stmt: $202for_iter.3 = pair_first(value=$202for_iter.2)
DEBUG 2022-02-07 18:03:06,966 on stmt: $202for_iter.4 = pair_second(value=$202for_iter.2)
DEBUG 2022-02-07 18:03:06,966 on stmt: $phi204.2 = $202for_iter.3
DEBUG 2022-02-07 18:03:06,966 on stmt: branch $202for_iter.4, 204, 300
DEBUG 2022-02-07 18:03:06,966 ==== SSA block rewrite pass on 204
DEBUG 2022-02-07 18:03:06,966 Running <numba.core.ssa._FreshVarHandler object at 0x00000196B023A1C0>
DEBUG 2022-02-07 18:03:06,966 on stmt: j = $phi204.2
DEBUG 2022-02-07 18:03:06,966 on stmt: $212binary_true_divide.6 = factor / j
DEBUG 2022-02-07 18:03:06,966 on stmt: $214inplace_multiply.7 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=powfactor, rhs=$212binary_true_divide.6, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-07 18:03:06,966 on stmt: powfactor = $214inplace_multiply.7
DEBUG 2022-02-07 18:03:06,966 on stmt: $218load_global.8 = global(range: <class 'range'>)
DEBUG 2022-02-07 18:03:06,966 on stmt: $224binary_multiply.11 = i * j
DEBUG 2022-02-07 18:03:06,966 on stmt: $const226.12 = const(int, 1)
DEBUG 2022-02-07 18:03:06,966 on stmt: $228binary_add.13 = $224binary_multiply.11 + $const226.12
DEBUG 2022-02-07 18:03:06,966 on stmt: $const232.15 = const(int, 2)
DEBUG 2022-02-07 18:03:06,966 on stmt: $234binary_add.16 = n + $const232.15
DEBUG 2022-02-07 18:03:06,966 on stmt: $236call_function.17 = call $218load_global.8($228binary_add.13, $234binary_add.16, func=$218load_global.8, args=[Var($228binary_add.13, _loop_hafnian_subroutines.py:179), Var($234binary_add.16, _loop_hafnian_subroutines.py:179)], kws=(), vararg=None, target=None)
DEBUG 2022-02-07 18:03:06,966 on stmt: $238get_iter.18 = getiter(value=$236call_function.17)
DEBUG 2022-02-07 18:03:06,966 on stmt: $phi240.2 = $238get_iter.18
DEBUG 2022-02-07 18:03:06,966 on stmt: jump 240
DEBUG 2022-02-07 18:03:06,966 ==== SSA block rewrite pass on 240
DEBUG 2022-02-07 18:03:06,966 Running <numba.core.ssa._FreshVarHandler object at 0x00000196B023A1C0>
DEBUG 2022-02-07 18:03:06,966 on stmt: $240for_iter.3 = iternext(value=$phi240.2)
DEBUG 2022-02-07 18:03:06,966 on stmt: $240for_iter.4 = pair_first(value=$240for_iter.3)
DEBUG 2022-02-07 18:03:06,966 on stmt: $240for_iter.5 = pair_second(value=$240for_iter.3)
DEBUG 2022-02-07 18:03:06,966 on stmt: $phi242.3 = $240for_iter.4
DEBUG 2022-02-07 18:03:06,966 on stmt: branch $240for_iter.5, 242, 298
DEBUG 2022-02-07 18:03:06,966 ==== SSA block rewrite pass on 242
DEBUG 2022-02-07 18:03:06,966 Running <numba.core.ssa._FreshVarHandler object at 0x00000196B023A1C0>
DEBUG 2022-02-07 18:03:06,966 on stmt: k = $phi242.3
DEBUG 2022-02-07 18:03:06,966 on stmt: $const250.7 = const(int, 1)
DEBUG 2022-02-07 18:03:06,966 on stmt: $252binary_subtract.8 = k - $const250.7
DEBUG 2022-02-07 18:03:06,966 on stmt: $254build_tuple.9 = build_tuple(items=[Var(count, _loop_hafnian_subroutines.py:161), Var($252binary_subtract.8, _loop_hafnian_subroutines.py:180)])
DEBUG 2022-02-07 18:03:06,966 on stmt: $258binary_subscr.12 = getitem(value=comb, index=$254build_tuple.9, fn=<built-in function getitem>)
DEBUG 2022-02-07 18:03:06,966 on stmt: $const262.14 = const(int, 1)
DEBUG 2022-02-07 18:03:06,966 on stmt: $266binary_subtract.16 = $const262.14 - count
DEBUG 2022-02-07 18:03:06,966 on stmt: $274binary_multiply.20 = i * j
DEBUG 2022-02-07 18:03:06,966 on stmt: $276binary_subtract.21 = k - $274binary_multiply.20
DEBUG 2022-02-07 18:03:06,966 on stmt: $const278.22 = const(int, 1)
DEBUG 2022-02-07 18:03:06,966 on stmt: $280binary_subtract.23 = $276binary_subtract.21 - $const278.22
DEBUG 2022-02-07 18:03:06,966 on stmt: $282build_tuple.24 = build_tuple(items=[Var($266binary_subtract.16, _loop_hafnian_subroutines.py:180), Var($280binary_subtract.23, _loop_hafnian_subroutines.py:180)])
DEBUG 2022-02-07 18:03:06,966 on stmt: $284binary_subscr.25 = getitem(value=comb, index=$282build_tuple.24, fn=<built-in function getitem>)
DEBUG 2022-02-07 18:03:06,966 on stmt: $288binary_multiply.27 = $284binary_subscr.25 * powfactor
DEBUG 2022-02-07 18:03:06,966 on stmt: $290inplace_add.28 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$258binary_subscr.12, rhs=$288binary_multiply.27, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-07 18:03:06,966 on stmt: comb[$254build_tuple.9] = $290inplace_add.28
DEBUG 2022-02-07 18:03:06,966 on stmt: jump 240
DEBUG 2022-02-07 18:03:06,966 ==== SSA block rewrite pass on 298
DEBUG 2022-02-07 18:03:06,966 Running <numba.core.ssa._FreshVarHandler object at 0x00000196B023A1C0>
DEBUG 2022-02-07 18:03:06,966 on stmt: jump 202
DEBUG 2022-02-07 18:03:06,966 ==== SSA block rewrite pass on 300
DEBUG 2022-02-07 18:03:06,966 Running <numba.core.ssa._FreshVarHandler object at 0x00000196B023A1C0>
DEBUG 2022-02-07 18:03:06,966 on stmt: jump 60
DEBUG 2022-02-07 18:03:06,966 ==== SSA block rewrite pass on 302
DEBUG 2022-02-07 18:03:06,966 Running <numba.core.ssa._FreshVarHandler object at 0x00000196B023A1C0>
DEBUG 2022-02-07 18:03:06,966 on stmt: $const306.2 = const(NoneType, None)
DEBUG 2022-02-07 18:03:06,966 on stmt: $const308.3 = const(NoneType, None)
DEBUG 2022-02-07 18:03:06,966 on stmt: $310build_slice.4 = global(slice: <class 'slice'>)
DEBUG 2022-02-07 18:03:06,966 on stmt: $310build_slice.5 = call $310build_slice.4($const306.2, $const308.3, func=$310build_slice.4, args=(Var($const306.2, _loop_hafnian_subroutines.py:182), Var($const308.3, _loop_hafnian_subroutines.py:182)), kws=(), vararg=None, target=None)
DEBUG 2022-02-07 18:03:06,966 on stmt: $312build_tuple.6 = build_tuple(items=[Var(count, _loop_hafnian_subroutines.py:161), Var($310build_slice.5, _loop_hafnian_subroutines.py:182)])
DEBUG 2022-02-07 18:03:06,966 on stmt: $314binary_subscr.7 = getitem(value=comb, index=$312build_tuple.6, fn=<built-in function getitem>)
DEBUG 2022-02-07 18:03:06,966 on stmt: $316return_value.8 = cast(value=$314binary_subscr.7)
DEBUG 2022-02-07 18:03:06,982 on stmt: return $316return_value.8
DEBUG 2022-02-07 18:03:06,982 Replaced assignments: defaultdict(<class 'list'>,
            {0: [<numba.core.ir.Assign object at 0x00000196AF22D490>],
             124: [<numba.core.ir.Assign object at 0x00000196AF20FD60>]})
DEBUG 2022-02-07 18:03:06,982 ==== SSA block rewrite pass on 0
DEBUG 2022-02-07 18:03:06,982 Running <numba.core.ssa._FixSSAVars object at 0x00000196B023A1C0>
DEBUG 2022-02-07 18:03:06,982 on stmt: E = arg(0, name=E)
DEBUG 2022-02-07 18:03:06,982 on stmt: AX_S = arg(1, name=AX_S)
DEBUG 2022-02-07 18:03:06,982 on stmt: XD_S = arg(2, name=XD_S)
DEBUG 2022-02-07 18:03:06,982 on stmt: D_S = arg(3, name=D_S)
DEBUG 2022-02-07 18:03:06,982 on stmt: n = arg(4, name=n)
DEBUG 2022-02-07 18:03:06,982 on stmt: oddloop = arg(5, name=oddloop)
DEBUG 2022-02-07 18:03:06,982 on stmt: oddVX_S = arg(6, name=oddVX_S)
DEBUG 2022-02-07 18:03:06,982 on stmt: $4load_method.1 = getattr(value=E, attr=copy)
DEBUG 2022-02-07 18:03:06,982 on stmt: E_k = call $4load_method.1(func=$4load_method.1, args=[], kws=(), vararg=None, target=None)
DEBUG 2022-02-07 18:03:06,982 on stmt: count = const(int, 0)
DEBUG 2022-02-07 18:03:06,982 on stmt: $14load_global.4 = global(np: <module 'numpy' from 'C:\\Users\\zl4821\\Anaconda3\\envs\\GBS\\lib\\site-packages\\numpy\\__init__.py'>)
DEBUG 2022-02-07 18:03:06,982 on stmt: $16load_attr.5 = getattr(value=$14load_global.4, attr=zeros)
DEBUG 2022-02-07 18:03:06,982 on stmt: $const18.6 = const(int, 2)
DEBUG 2022-02-07 18:03:06,982 on stmt: $const22.8 = const(int, 1)
DEBUG 2022-02-07 18:03:06,982 on stmt: $24binary_add.9 = n + $const22.8
DEBUG 2022-02-07 18:03:06,982 on stmt: $26build_tuple.10 = build_tuple(items=[Var($const18.6, _loop_hafnian_subroutines.py:162), Var($24binary_add.9, _loop_hafnian_subroutines.py:162)])
DEBUG 2022-02-07 18:03:06,982 on stmt: $28load_global.11 = global(np: <module 'numpy' from 'C:\\Users\\zl4821\\Anaconda3\\envs\\GBS\\lib\\site-packages\\numpy\\__init__.py'>)
DEBUG 2022-02-07 18:03:06,982 on stmt: $30load_attr.12 = getattr(value=$28load_global.11, attr=complex128)
DEBUG 2022-02-07 18:03:06,982 on stmt: comb = call $16load_attr.5($26build_tuple.10, func=$16load_attr.5, args=[Var($26build_tuple.10, _loop_hafnian_subroutines.py:162)], kws=[('dtype', Var($30load_attr.12, _loop_hafnian_subroutines.py:162))], vararg=None, target=None)
DEBUG 2022-02-07 18:03:06,982 on stmt: $const38.15 = const(int, 1)
DEBUG 2022-02-07 18:03:06,982 on stmt: $const_0 = const(int, 0)
DEBUG 2022-02-07 18:03:06,982 on stmt: $const_0.1 = const(int, 0)
DEBUG 2022-02-07 18:03:06,982 on stmt: $const42.17 = build_tuple(items=[Var($const_0, _loop_hafnian_subroutines.py:163), Var($const_0.1, _loop_hafnian_subroutines.py:163)])
DEBUG 2022-02-07 18:03:06,982 on stmt: comb[(0, 0)] = $const38.15
DEBUG 2022-02-07 18:03:06,982 on stmt: $46load_global.18 = global(range: <class 'range'>)
DEBUG 2022-02-07 18:03:06,982 on stmt: $const48.19 = const(int, 1)
DEBUG 2022-02-07 18:03:06,982 on stmt: $const52.21 = const(int, 1)
DEBUG 2022-02-07 18:03:06,982 on stmt: $54binary_add.22 = n + $const52.21
DEBUG 2022-02-07 18:03:06,982 on stmt: $56call_function.23 = call $46load_global.18($const48.19, $54binary_add.22, func=$46load_global.18, args=[Var($const48.19, _loop_hafnian_subroutines.py:164), Var($54binary_add.22, _loop_hafnian_subroutines.py:164)], kws=(), vararg=None, target=None)
DEBUG 2022-02-07 18:03:06,982 on stmt: $58get_iter.24 = getiter(value=$56call_function.23)
DEBUG 2022-02-07 18:03:06,982 on stmt: $phi60.0 = $58get_iter.24
DEBUG 2022-02-07 18:03:06,982 on stmt: jump 60
DEBUG 2022-02-07 18:03:06,982 ==== SSA block rewrite pass on 60
DEBUG 2022-02-07 18:03:06,982 Running <numba.core.ssa._FixSSAVars object at 0x00000196B023A1C0>
DEBUG 2022-02-07 18:03:06,982 on stmt: $60for_iter.1 = iternext(value=$phi60.0)
DEBUG 2022-02-07 18:03:06,982 on stmt: $60for_iter.2 = pair_first(value=$60for_iter.1)
DEBUG 2022-02-07 18:03:06,982 on stmt: $60for_iter.3 = pair_second(value=$60for_iter.1)
DEBUG 2022-02-07 18:03:06,982 on stmt: $phi62.1 = $60for_iter.2
DEBUG 2022-02-07 18:03:06,982 on stmt: branch $60for_iter.3, 62, 302
DEBUG 2022-02-07 18:03:06,982 ==== SSA block rewrite pass on 62
DEBUG 2022-02-07 18:03:06,982 Running <numba.core.ssa._FixSSAVars object at 0x00000196B023A1C0>
DEBUG 2022-02-07 18:03:06,982 on stmt: i = $phi62.1
DEBUG 2022-02-07 18:03:06,982 on stmt: $const66.3 = const(int, 1)
DEBUG 2022-02-07 18:03:06,982 on stmt: $68compare_op.4 = i == $const66.3
DEBUG 2022-02-07 18:03:06,982 on stmt: bool70 = global(bool: <class 'bool'>)
DEBUG 2022-02-07 18:03:06,982 on stmt: $70pred = call bool70($68compare_op.4, func=bool70, args=(Var($68compare_op.4, _loop_hafnian_subroutines.py:165),), kws=(), vararg=None, target=None)
DEBUG 2022-02-07 18:03:06,982 on stmt: branch $70pred, 72, 78
DEBUG 2022-02-07 18:03:06,982 ==== SSA block rewrite pass on 72
DEBUG 2022-02-07 18:03:06,982 Running <numba.core.ssa._FixSSAVars object at 0x00000196B023A1C0>
DEBUG 2022-02-07 18:03:06,982 on stmt: factor = oddloop
DEBUG 2022-02-07 18:03:06,982 on stmt: jump 140
DEBUG 2022-02-07 18:03:06,982 ==== SSA block rewrite pass on 78
DEBUG 2022-02-07 18:03:06,982 Running <numba.core.ssa._FixSSAVars object at 0x00000196B023A1C0>
DEBUG 2022-02-07 18:03:06,982 on stmt: $const80.2 = const(int, 2)
DEBUG 2022-02-07 18:03:06,982 on stmt: $82binary_modulo.3 = i % $const80.2
DEBUG 2022-02-07 18:03:06,982 on stmt: $const84.4 = const(int, 0)
DEBUG 2022-02-07 18:03:06,982 on stmt: $86compare_op.5 = $82binary_modulo.3 == $const84.4
DEBUG 2022-02-07 18:03:06,982 on stmt: bool88 = global(bool: <class 'bool'>)
DEBUG 2022-02-07 18:03:06,982 on stmt: $88pred = call bool88($86compare_op.5, func=bool88, args=(Var($86compare_op.5, _loop_hafnian_subroutines.py:167),), kws=(), vararg=None, target=None)
DEBUG 2022-02-07 18:03:06,982 on stmt: branch $88pred, 90, 124
DEBUG 2022-02-07 18:03:06,982 ==== SSA block rewrite pass on 90
DEBUG 2022-02-07 18:03:06,982 Running <numba.core.ssa._FixSSAVars object at 0x00000196B023A1C0>
DEBUG 2022-02-07 18:03:06,982 on stmt: $92load_method.2 = getattr(value=E_k, attr=sum)
DEBUG 2022-02-07 18:03:06,982 on stmt: $94call_method.3 = call $92load_method.2(func=$92load_method.2, args=[], kws=(), vararg=None, target=None)
DEBUG 2022-02-07 18:03:06,982 on stmt: $98binary_true_divide.5 = $94call_method.3 / i
DEBUG 2022-02-07 18:03:06,982 on stmt: $104binary_matrix_multiply.8 = XD_S <built-in function matmul> D_S
DEBUG 2022-02-07 18:03:06,997 find_def var='D_S' stmt=$104binary_matrix_multiply.8 = XD_S <built-in function matmul> D_S
DEBUG 2022-02-07 18:03:06,997 find_def_from_top label 90
DEBUG 2022-02-07 18:03:06,997 idom 78 from label 90
DEBUG 2022-02-07 18:03:06,997 find_def_from_bottom label 78
DEBUG 2022-02-07 18:03:06,997 find_def_from_top label 78
DEBUG 2022-02-07 18:03:06,997 idom 62 from label 78
DEBUG 2022-02-07 18:03:06,997 find_def_from_bottom label 62
DEBUG 2022-02-07 18:03:06,997 find_def_from_top label 62
DEBUG 2022-02-07 18:03:06,997 idom 60 from label 62
DEBUG 2022-02-07 18:03:06,997 find_def_from_bottom label 60
DEBUG 2022-02-07 18:03:06,997 find_def_from_top label 60
DEBUG 2022-02-07 18:03:06,997 insert phi node D_S.2 = phi(incoming_values=[], incoming_blocks=[]) at 60
DEBUG 2022-02-07 18:03:06,997 find_def_from_bottom label 0
DEBUG 2022-02-07 18:03:06,997 incoming_def D_S = arg(3, name=D_S)
DEBUG 2022-02-07 18:03:06,997 find_def_from_bottom label 300
DEBUG 2022-02-07 18:03:06,997 find_def_from_top label 300
DEBUG 2022-02-07 18:03:06,997 idom 202 from label 300
DEBUG 2022-02-07 18:03:06,997 find_def_from_bottom label 202
DEBUG 2022-02-07 18:03:06,997 find_def_from_top label 202
DEBUG 2022-02-07 18:03:06,997 idom 140 from label 202
DEBUG 2022-02-07 18:03:06,997 find_def_from_bottom label 140
DEBUG 2022-02-07 18:03:06,997 find_def_from_top label 140
DEBUG 2022-02-07 18:03:06,997 insert phi node D_S.3 = phi(incoming_values=[], incoming_blocks=[]) at 140
DEBUG 2022-02-07 18:03:06,997 find_def_from_bottom label 72
DEBUG 2022-02-07 18:03:06,997 find_def_from_top label 72
DEBUG 2022-02-07 18:03:06,997 idom 62 from label 72
DEBUG 2022-02-07 18:03:06,997 find_def_from_bottom label 62
DEBUG 2022-02-07 18:03:06,997 find_def_from_top label 62
DEBUG 2022-02-07 18:03:06,997 idom 60 from label 62
DEBUG 2022-02-07 18:03:06,997 find_def_from_bottom label 60
DEBUG 2022-02-07 18:03:06,997 incoming_def D_S.2 = phi(incoming_values=[Var(D_S, _loop_hafnian_subroutines.py:159)], incoming_blocks=[0])
DEBUG 2022-02-07 18:03:06,997 find_def_from_bottom label 90
DEBUG 2022-02-07 18:03:06,997 find_def_from_top label 90
DEBUG 2022-02-07 18:03:06,997 idom 78 from label 90
DEBUG 2022-02-07 18:03:06,997 find_def_from_bottom label 78
DEBUG 2022-02-07 18:03:06,997 find_def_from_top label 78
DEBUG 2022-02-07 18:03:06,997 idom 62 from label 78
DEBUG 2022-02-07 18:03:06,997 find_def_from_bottom label 62
DEBUG 2022-02-07 18:03:06,997 find_def_from_top label 62
DEBUG 2022-02-07 18:03:06,997 idom 60 from label 62
DEBUG 2022-02-07 18:03:06,997 find_def_from_bottom label 60
DEBUG 2022-02-07 18:03:06,997 incoming_def D_S.2 = phi(incoming_values=[Var(D_S, _loop_hafnian_subroutines.py:159)], incoming_blocks=[0])
DEBUG 2022-02-07 18:03:06,997 find_def_from_bottom label 124
DEBUG 2022-02-07 18:03:06,997 incoming_def D_S.1 = $136binary_matrix_multiply.6
DEBUG 2022-02-07 18:03:06,997 incoming_def D_S.3 = phi(incoming_values=[Var(D_S.2, _loop_hafnian_subroutines.py:168), Var(D_S.2, _loop_hafnian_subroutines.py:168), Var(D_S.1, _loop_hafnian_subroutines.py:172)], incoming_blocks=[72, 90, 124])
DEBUG 2022-02-07 18:03:06,997 replaced with: $104binary_matrix_multiply.8 = XD_S <built-in function matmul> D_S.2
DEBUG 2022-02-07 18:03:06,997 on stmt: $const106.9 = const(int, 2)
DEBUG 2022-02-07 18:03:06,997 on stmt: $108binary_true_divide.10 = $104binary_matrix_multiply.8 / $const106.9
DEBUG 2022-02-07 18:03:06,997 on stmt: factor = $98binary_true_divide.5 + $108binary_true_divide.10
DEBUG 2022-02-07 18:03:06,997 on stmt: $118inplace_multiply.14 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=E_k, rhs=E, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-07 18:03:06,997 on stmt: E_k = $118inplace_multiply.14
DEBUG 2022-02-07 18:03:06,997 on stmt: jump 140
DEBUG 2022-02-07 18:03:06,997 ==== SSA block rewrite pass on 124
DEBUG 2022-02-07 18:03:06,997 Running <numba.core.ssa._FixSSAVars object at 0x00000196B023A1C0>
DEBUG 2022-02-07 18:03:06,997 on stmt: factor = oddVX_S <built-in function matmul> D_S
DEBUG 2022-02-07 18:03:06,997 find_def var='D_S' stmt=factor = oddVX_S <built-in function matmul> D_S
DEBUG 2022-02-07 18:03:06,997 find_def_from_top label 124
DEBUG 2022-02-07 18:03:06,997 idom 78 from label 124
DEBUG 2022-02-07 18:03:06,997 find_def_from_bottom label 78
DEBUG 2022-02-07 18:03:06,997 find_def_from_top label 78
DEBUG 2022-02-07 18:03:06,997 idom 62 from label 78
DEBUG 2022-02-07 18:03:06,997 find_def_from_bottom label 62
DEBUG 2022-02-07 18:03:06,997 find_def_from_top label 62
DEBUG 2022-02-07 18:03:06,997 idom 60 from label 62
DEBUG 2022-02-07 18:03:06,997 find_def_from_bottom label 60
DEBUG 2022-02-07 18:03:06,997 replaced with: factor = oddVX_S <built-in function matmul> D_S.2
DEBUG 2022-02-07 18:03:06,997 on stmt: $136binary_matrix_multiply.6 = AX_S <built-in function matmul> D_S
DEBUG 2022-02-07 18:03:06,997 find_def var='D_S' stmt=$136binary_matrix_multiply.6 = AX_S <built-in function matmul> D_S
DEBUG 2022-02-07 18:03:06,997 find_def_from_top label 124
DEBUG 2022-02-07 18:03:06,997 idom 78 from label 124
DEBUG 2022-02-07 18:03:06,997 find_def_from_bottom label 78
DEBUG 2022-02-07 18:03:06,997 find_def_from_top label 78
DEBUG 2022-02-07 18:03:06,997 idom 62 from label 78
DEBUG 2022-02-07 18:03:06,997 find_def_from_bottom label 62
DEBUG 2022-02-07 18:03:06,997 find_def_from_top label 62
DEBUG 2022-02-07 18:03:06,997 idom 60 from label 62
DEBUG 2022-02-07 18:03:06,997 find_def_from_bottom label 60
DEBUG 2022-02-07 18:03:06,997 replaced with: $136binary_matrix_multiply.6 = AX_S <built-in function matmul> D_S.2
DEBUG 2022-02-07 18:03:06,997 on stmt: D_S.1 = $136binary_matrix_multiply.6
DEBUG 2022-02-07 18:03:06,997 on stmt: jump 140
DEBUG 2022-02-07 18:03:06,997 ==== SSA block rewrite pass on 140
DEBUG 2022-02-07 18:03:06,997 Running <numba.core.ssa._FixSSAVars object at 0x00000196B023A1C0>
DEBUG 2022-02-07 18:03:06,997 on stmt: powfactor = const(int, 1)
DEBUG 2022-02-07 18:03:06,997 on stmt: $const144.2 = const(int, 1)
DEBUG 2022-02-07 18:03:06,997 on stmt: $148binary_subtract.4 = $const144.2 - count
DEBUG 2022-02-07 18:03:06,997 on stmt: count = $148binary_subtract.4
DEBUG 2022-02-07 18:03:06,997 on stmt: $const154.6 = const(int, 1)
DEBUG 2022-02-07 18:03:06,997 on stmt: $158binary_subtract.8 = $const154.6 - count
DEBUG 2022-02-07 18:03:06,997 on stmt: $const160.9 = const(NoneType, None)
DEBUG 2022-02-07 18:03:06,997 on stmt: $const162.10 = const(NoneType, None)
DEBUG 2022-02-07 18:03:06,997 on stmt: $164build_slice.11 = global(slice: <class 'slice'>)
DEBUG 2022-02-07 18:03:06,997 on stmt: $164build_slice.12 = call $164build_slice.11($const160.9, $const162.10, func=$164build_slice.11, args=(Var($const160.9, _loop_hafnian_subroutines.py:176), Var($const162.10, _loop_hafnian_subroutines.py:176)), kws=(), vararg=None, target=None)
DEBUG 2022-02-07 18:03:07,013 on stmt: $166build_tuple.13 = build_tuple(items=[Var($158binary_subtract.8, _loop_hafnian_subroutines.py:176), Var($164build_slice.12, _loop_hafnian_subroutines.py:176)])
DEBUG 2022-02-07 18:03:07,013 on stmt: $168binary_subscr.14 = getitem(value=comb, index=$166build_tuple.13, fn=<built-in function getitem>)
DEBUG 2022-02-07 18:03:07,013 on stmt: $const174.17 = const(NoneType, None)
DEBUG 2022-02-07 18:03:07,013 on stmt: $const176.18 = const(NoneType, None)
DEBUG 2022-02-07 18:03:07,013 on stmt: $178build_slice.19 = global(slice: <class 'slice'>)
DEBUG 2022-02-07 18:03:07,013 on stmt: $178build_slice.20 = call $178build_slice.19($const174.17, $const176.18, func=$178build_slice.19, args=(Var($const174.17, _loop_hafnian_subroutines.py:176), Var($const176.18, _loop_hafnian_subroutines.py:176)), kws=(), vararg=None, target=None)
DEBUG 2022-02-07 18:03:07,013 on stmt: $180build_tuple.21 = build_tuple(items=[Var(count, _loop_hafnian_subroutines.py:161), Var($178build_slice.20, _loop_hafnian_subroutines.py:176)])
DEBUG 2022-02-07 18:03:07,013 on stmt: comb[$180build_tuple.21] = $168binary_subscr.14
DEBUG 2022-02-07 18:03:07,013 on stmt: $184load_global.22 = global(range: <class 'range'>)
DEBUG 2022-02-07 18:03:07,013 on stmt: $const186.23 = const(int, 1)
DEBUG 2022-02-07 18:03:07,013 on stmt: $192binary_floor_divide.26 = n // i
DEBUG 2022-02-07 18:03:07,013 on stmt: $const194.27 = const(int, 1)
DEBUG 2022-02-07 18:03:07,013 on stmt: $196binary_add.28 = $192binary_floor_divide.26 + $const194.27
DEBUG 2022-02-07 18:03:07,013 on stmt: $198call_function.29 = call $184load_global.22($const186.23, $196binary_add.28, func=$184load_global.22, args=[Var($const186.23, _loop_hafnian_subroutines.py:177), Var($196binary_add.28, _loop_hafnian_subroutines.py:177)], kws=(), vararg=None, target=None)
DEBUG 2022-02-07 18:03:07,013 on stmt: $200get_iter.30 = getiter(value=$198call_function.29)
DEBUG 2022-02-07 18:03:07,013 on stmt: $phi202.1 = $200get_iter.30
DEBUG 2022-02-07 18:03:07,013 on stmt: jump 202
DEBUG 2022-02-07 18:03:07,013 ==== SSA block rewrite pass on 202
DEBUG 2022-02-07 18:03:07,013 Running <numba.core.ssa._FixSSAVars object at 0x00000196B023A1C0>
DEBUG 2022-02-07 18:03:07,013 on stmt: $202for_iter.2 = iternext(value=$phi202.1)
DEBUG 2022-02-07 18:03:07,013 on stmt: $202for_iter.3 = pair_first(value=$202for_iter.2)
DEBUG 2022-02-07 18:03:07,013 on stmt: $202for_iter.4 = pair_second(value=$202for_iter.2)
DEBUG 2022-02-07 18:03:07,013 on stmt: $phi204.2 = $202for_iter.3
DEBUG 2022-02-07 18:03:07,013 on stmt: branch $202for_iter.4, 204, 300
DEBUG 2022-02-07 18:03:07,013 ==== SSA block rewrite pass on 204
DEBUG 2022-02-07 18:03:07,013 Running <numba.core.ssa._FixSSAVars object at 0x00000196B023A1C0>
DEBUG 2022-02-07 18:03:07,013 on stmt: j = $phi204.2
DEBUG 2022-02-07 18:03:07,013 on stmt: $212binary_true_divide.6 = factor / j
DEBUG 2022-02-07 18:03:07,013 on stmt: $214inplace_multiply.7 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=powfactor, rhs=$212binary_true_divide.6, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-07 18:03:07,013 on stmt: powfactor = $214inplace_multiply.7
DEBUG 2022-02-07 18:03:07,013 on stmt: $218load_global.8 = global(range: <class 'range'>)
DEBUG 2022-02-07 18:03:07,013 on stmt: $224binary_multiply.11 = i * j
DEBUG 2022-02-07 18:03:07,013 on stmt: $const226.12 = const(int, 1)
DEBUG 2022-02-07 18:03:07,013 on stmt: $228binary_add.13 = $224binary_multiply.11 + $const226.12
DEBUG 2022-02-07 18:03:07,013 on stmt: $const232.15 = const(int, 2)
DEBUG 2022-02-07 18:03:07,013 on stmt: $234binary_add.16 = n + $const232.15
DEBUG 2022-02-07 18:03:07,013 on stmt: $236call_function.17 = call $218load_global.8($228binary_add.13, $234binary_add.16, func=$218load_global.8, args=[Var($228binary_add.13, _loop_hafnian_subroutines.py:179), Var($234binary_add.16, _loop_hafnian_subroutines.py:179)], kws=(), vararg=None, target=None)
DEBUG 2022-02-07 18:03:07,013 on stmt: $238get_iter.18 = getiter(value=$236call_function.17)
DEBUG 2022-02-07 18:03:07,013 on stmt: $phi240.2 = $238get_iter.18
DEBUG 2022-02-07 18:03:07,013 on stmt: jump 240
DEBUG 2022-02-07 18:03:07,013 ==== SSA block rewrite pass on 240
DEBUG 2022-02-07 18:03:07,013 Running <numba.core.ssa._FixSSAVars object at 0x00000196B023A1C0>
DEBUG 2022-02-07 18:03:07,013 on stmt: $240for_iter.3 = iternext(value=$phi240.2)
DEBUG 2022-02-07 18:03:07,013 on stmt: $240for_iter.4 = pair_first(value=$240for_iter.3)
DEBUG 2022-02-07 18:03:07,013 on stmt: $240for_iter.5 = pair_second(value=$240for_iter.3)
DEBUG 2022-02-07 18:03:07,013 on stmt: $phi242.3 = $240for_iter.4
DEBUG 2022-02-07 18:03:07,013 on stmt: branch $240for_iter.5, 242, 298
DEBUG 2022-02-07 18:03:07,013 ==== SSA block rewrite pass on 242
DEBUG 2022-02-07 18:03:07,013 Running <numba.core.ssa._FixSSAVars object at 0x00000196B023A1C0>
DEBUG 2022-02-07 18:03:07,013 on stmt: k = $phi242.3
DEBUG 2022-02-07 18:03:07,013 on stmt: $const250.7 = const(int, 1)
DEBUG 2022-02-07 18:03:07,013 on stmt: $252binary_subtract.8 = k - $const250.7
DEBUG 2022-02-07 18:03:07,013 on stmt: $254build_tuple.9 = build_tuple(items=[Var(count, _loop_hafnian_subroutines.py:161), Var($252binary_subtract.8, _loop_hafnian_subroutines.py:180)])
DEBUG 2022-02-07 18:03:07,013 on stmt: $258binary_subscr.12 = getitem(value=comb, index=$254build_tuple.9, fn=<built-in function getitem>)
DEBUG 2022-02-07 18:03:07,013 on stmt: $const262.14 = const(int, 1)
DEBUG 2022-02-07 18:03:07,013 on stmt: $266binary_subtract.16 = $const262.14 - count
DEBUG 2022-02-07 18:03:07,013 on stmt: $274binary_multiply.20 = i * j
DEBUG 2022-02-07 18:03:07,013 on stmt: $276binary_subtract.21 = k - $274binary_multiply.20
DEBUG 2022-02-07 18:03:07,013 on stmt: $const278.22 = const(int, 1)
DEBUG 2022-02-07 18:03:07,013 on stmt: $280binary_subtract.23 = $276binary_subtract.21 - $const278.22
DEBUG 2022-02-07 18:03:07,013 on stmt: $282build_tuple.24 = build_tuple(items=[Var($266binary_subtract.16, _loop_hafnian_subroutines.py:180), Var($280binary_subtract.23, _loop_hafnian_subroutines.py:180)])
DEBUG 2022-02-07 18:03:07,013 on stmt: $284binary_subscr.25 = getitem(value=comb, index=$282build_tuple.24, fn=<built-in function getitem>)
DEBUG 2022-02-07 18:03:07,013 on stmt: $288binary_multiply.27 = $284binary_subscr.25 * powfactor
DEBUG 2022-02-07 18:03:07,013 on stmt: $290inplace_add.28 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$258binary_subscr.12, rhs=$288binary_multiply.27, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-07 18:03:07,013 on stmt: comb[$254build_tuple.9] = $290inplace_add.28
DEBUG 2022-02-07 18:03:07,013 on stmt: jump 240
DEBUG 2022-02-07 18:03:07,013 ==== SSA block rewrite pass on 298
DEBUG 2022-02-07 18:03:07,013 Running <numba.core.ssa._FixSSAVars object at 0x00000196B023A1C0>
DEBUG 2022-02-07 18:03:07,013 on stmt: jump 202
DEBUG 2022-02-07 18:03:07,013 ==== SSA block rewrite pass on 300
DEBUG 2022-02-07 18:03:07,028 Running <numba.core.ssa._FixSSAVars object at 0x00000196B023A1C0>
DEBUG 2022-02-07 18:03:07,028 on stmt: jump 60
DEBUG 2022-02-07 18:03:07,028 ==== SSA block rewrite pass on 302
DEBUG 2022-02-07 18:03:07,028 Running <numba.core.ssa._FixSSAVars object at 0x00000196B023A1C0>
DEBUG 2022-02-07 18:03:07,028 on stmt: $const306.2 = const(NoneType, None)
DEBUG 2022-02-07 18:03:07,028 on stmt: $const308.3 = const(NoneType, None)
DEBUG 2022-02-07 18:03:07,028 on stmt: $310build_slice.4 = global(slice: <class 'slice'>)
DEBUG 2022-02-07 18:03:07,028 on stmt: $310build_slice.5 = call $310build_slice.4($const306.2, $const308.3, func=$310build_slice.4, args=(Var($const306.2, _loop_hafnian_subroutines.py:182), Var($const308.3, _loop_hafnian_subroutines.py:182)), kws=(), vararg=None, target=None)
DEBUG 2022-02-07 18:03:07,028 on stmt: $312build_tuple.6 = build_tuple(items=[Var(count, _loop_hafnian_subroutines.py:161), Var($310build_slice.5, _loop_hafnian_subroutines.py:182)])
DEBUG 2022-02-07 18:03:07,028 on stmt: $314binary_subscr.7 = getitem(value=comb, index=$312build_tuple.6, fn=<built-in function getitem>)
DEBUG 2022-02-07 18:03:07,028 on stmt: $316return_value.8 = cast(value=$314binary_subscr.7)
DEBUG 2022-02-07 18:03:07,028 on stmt: return $316return_value.8
DEBUG 2022-02-07 18:03:07,028 Fix SSA violator on var powfactor
DEBUG 2022-02-07 18:03:07,028 ==== SSA block rewrite pass on 0
DEBUG 2022-02-07 18:03:07,028 Running <numba.core.ssa._FreshVarHandler object at 0x00000196AF20FD30>
DEBUG 2022-02-07 18:03:07,028 on stmt: E = arg(0, name=E)
DEBUG 2022-02-07 18:03:07,028 on stmt: AX_S = arg(1, name=AX_S)
DEBUG 2022-02-07 18:03:07,028 on stmt: XD_S = arg(2, name=XD_S)
DEBUG 2022-02-07 18:03:07,028 on stmt: D_S = arg(3, name=D_S)
DEBUG 2022-02-07 18:03:07,028 on stmt: n = arg(4, name=n)
DEBUG 2022-02-07 18:03:07,028 on stmt: oddloop = arg(5, name=oddloop)
DEBUG 2022-02-07 18:03:07,028 on stmt: oddVX_S = arg(6, name=oddVX_S)
DEBUG 2022-02-07 18:03:07,028 on stmt: $4load_method.1 = getattr(value=E, attr=copy)
DEBUG 2022-02-07 18:03:07,028 on stmt: E_k = call $4load_method.1(func=$4load_method.1, args=[], kws=(), vararg=None, target=None)
DEBUG 2022-02-07 18:03:07,028 on stmt: count = const(int, 0)
DEBUG 2022-02-07 18:03:07,028 on stmt: $14load_global.4 = global(np: <module 'numpy' from 'C:\\Users\\zl4821\\Anaconda3\\envs\\GBS\\lib\\site-packages\\numpy\\__init__.py'>)
DEBUG 2022-02-07 18:03:07,028 on stmt: $16load_attr.5 = getattr(value=$14load_global.4, attr=zeros)
DEBUG 2022-02-07 18:03:07,028 on stmt: $const18.6 = const(int, 2)
DEBUG 2022-02-07 18:03:07,028 on stmt: $const22.8 = const(int, 1)
DEBUG 2022-02-07 18:03:07,028 on stmt: $24binary_add.9 = n + $const22.8
DEBUG 2022-02-07 18:03:07,028 on stmt: $26build_tuple.10 = build_tuple(items=[Var($const18.6, _loop_hafnian_subroutines.py:162), Var($24binary_add.9, _loop_hafnian_subroutines.py:162)])
DEBUG 2022-02-07 18:03:07,028 on stmt: $28load_global.11 = global(np: <module 'numpy' from 'C:\\Users\\zl4821\\Anaconda3\\envs\\GBS\\lib\\site-packages\\numpy\\__init__.py'>)
DEBUG 2022-02-07 18:03:07,028 on stmt: $30load_attr.12 = getattr(value=$28load_global.11, attr=complex128)
DEBUG 2022-02-07 18:03:07,028 on stmt: comb = call $16load_attr.5($26build_tuple.10, func=$16load_attr.5, args=[Var($26build_tuple.10, _loop_hafnian_subroutines.py:162)], kws=[('dtype', Var($30load_attr.12, _loop_hafnian_subroutines.py:162))], vararg=None, target=None)
DEBUG 2022-02-07 18:03:07,028 on stmt: $const38.15 = const(int, 1)
DEBUG 2022-02-07 18:03:07,028 on stmt: $const_0 = const(int, 0)
DEBUG 2022-02-07 18:03:07,028 on stmt: $const_0.1 = const(int, 0)
DEBUG 2022-02-07 18:03:07,028 on stmt: $const42.17 = build_tuple(items=[Var($const_0, _loop_hafnian_subroutines.py:163), Var($const_0.1, _loop_hafnian_subroutines.py:163)])
DEBUG 2022-02-07 18:03:07,028 on stmt: comb[(0, 0)] = $const38.15
DEBUG 2022-02-07 18:03:07,028 on stmt: $46load_global.18 = global(range: <class 'range'>)
DEBUG 2022-02-07 18:03:07,028 on stmt: $const48.19 = const(int, 1)
DEBUG 2022-02-07 18:03:07,028 on stmt: $const52.21 = const(int, 1)
DEBUG 2022-02-07 18:03:07,028 on stmt: $54binary_add.22 = n + $const52.21
DEBUG 2022-02-07 18:03:07,028 on stmt: $56call_function.23 = call $46load_global.18($const48.19, $54binary_add.22, func=$46load_global.18, args=[Var($const48.19, _loop_hafnian_subroutines.py:164), Var($54binary_add.22, _loop_hafnian_subroutines.py:164)], kws=(), vararg=None, target=None)
DEBUG 2022-02-07 18:03:07,028 on stmt: $58get_iter.24 = getiter(value=$56call_function.23)
DEBUG 2022-02-07 18:03:07,028 on stmt: $phi60.0 = $58get_iter.24
DEBUG 2022-02-07 18:03:07,028 on stmt: jump 60
DEBUG 2022-02-07 18:03:07,028 ==== SSA block rewrite pass on 60
DEBUG 2022-02-07 18:03:07,028 Running <numba.core.ssa._FreshVarHandler object at 0x00000196AF20FD30>
DEBUG 2022-02-07 18:03:07,028 on stmt: D_S.2 = phi(incoming_values=[Var(D_S, _loop_hafnian_subroutines.py:159), Var(D_S.3, _loop_hafnian_subroutines.py:168)], incoming_blocks=[0, 300])
DEBUG 2022-02-07 18:03:07,028 on stmt: $60for_iter.1 = iternext(value=$phi60.0)
DEBUG 2022-02-07 18:03:07,028 on stmt: $60for_iter.2 = pair_first(value=$60for_iter.1)
DEBUG 2022-02-07 18:03:07,028 on stmt: $60for_iter.3 = pair_second(value=$60for_iter.1)
DEBUG 2022-02-07 18:03:07,028 on stmt: $phi62.1 = $60for_iter.2
DEBUG 2022-02-07 18:03:07,028 on stmt: branch $60for_iter.3, 62, 302
DEBUG 2022-02-07 18:03:07,028 ==== SSA block rewrite pass on 62
DEBUG 2022-02-07 18:03:07,028 Running <numba.core.ssa._FreshVarHandler object at 0x00000196AF20FD30>
DEBUG 2022-02-07 18:03:07,028 on stmt: i = $phi62.1
DEBUG 2022-02-07 18:03:07,028 on stmt: $const66.3 = const(int, 1)
DEBUG 2022-02-07 18:03:07,028 on stmt: $68compare_op.4 = i == $const66.3
DEBUG 2022-02-07 18:03:07,028 on stmt: bool70 = global(bool: <class 'bool'>)
DEBUG 2022-02-07 18:03:07,028 on stmt: $70pred = call bool70($68compare_op.4, func=bool70, args=(Var($68compare_op.4, _loop_hafnian_subroutines.py:165),), kws=(), vararg=None, target=None)
DEBUG 2022-02-07 18:03:07,028 on stmt: branch $70pred, 72, 78
DEBUG 2022-02-07 18:03:07,028 ==== SSA block rewrite pass on 72
DEBUG 2022-02-07 18:03:07,028 Running <numba.core.ssa._FreshVarHandler object at 0x00000196AF20FD30>
DEBUG 2022-02-07 18:03:07,028 on stmt: factor = oddloop
DEBUG 2022-02-07 18:03:07,028 on stmt: jump 140
DEBUG 2022-02-07 18:03:07,028 ==== SSA block rewrite pass on 78
DEBUG 2022-02-07 18:03:07,028 Running <numba.core.ssa._FreshVarHandler object at 0x00000196AF20FD30>
DEBUG 2022-02-07 18:03:07,028 on stmt: $const80.2 = const(int, 2)
DEBUG 2022-02-07 18:03:07,028 on stmt: $82binary_modulo.3 = i % $const80.2
DEBUG 2022-02-07 18:03:07,028 on stmt: $const84.4 = const(int, 0)
DEBUG 2022-02-07 18:03:07,028 on stmt: $86compare_op.5 = $82binary_modulo.3 == $const84.4
DEBUG 2022-02-07 18:03:07,028 on stmt: bool88 = global(bool: <class 'bool'>)
DEBUG 2022-02-07 18:03:07,028 on stmt: $88pred = call bool88($86compare_op.5, func=bool88, args=(Var($86compare_op.5, _loop_hafnian_subroutines.py:167),), kws=(), vararg=None, target=None)
DEBUG 2022-02-07 18:03:07,044 on stmt: branch $88pred, 90, 124
DEBUG 2022-02-07 18:03:07,044 ==== SSA block rewrite pass on 90
DEBUG 2022-02-07 18:03:07,044 Running <numba.core.ssa._FreshVarHandler object at 0x00000196AF20FD30>
DEBUG 2022-02-07 18:03:07,044 on stmt: $92load_method.2 = getattr(value=E_k, attr=sum)
DEBUG 2022-02-07 18:03:07,044 on stmt: $94call_method.3 = call $92load_method.2(func=$92load_method.2, args=[], kws=(), vararg=None, target=None)
DEBUG 2022-02-07 18:03:07,044 on stmt: $98binary_true_divide.5 = $94call_method.3 / i
DEBUG 2022-02-07 18:03:07,044 on stmt: $104binary_matrix_multiply.8 = XD_S <built-in function matmul> D_S.2
DEBUG 2022-02-07 18:03:07,044 on stmt: $const106.9 = const(int, 2)
DEBUG 2022-02-07 18:03:07,044 on stmt: $108binary_true_divide.10 = $104binary_matrix_multiply.8 / $const106.9
DEBUG 2022-02-07 18:03:07,044 on stmt: factor = $98binary_true_divide.5 + $108binary_true_divide.10
DEBUG 2022-02-07 18:03:07,044 on stmt: $118inplace_multiply.14 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=E_k, rhs=E, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-07 18:03:07,044 on stmt: E_k = $118inplace_multiply.14
DEBUG 2022-02-07 18:03:07,044 on stmt: jump 140
DEBUG 2022-02-07 18:03:07,044 ==== SSA block rewrite pass on 124
DEBUG 2022-02-07 18:03:07,044 Running <numba.core.ssa._FreshVarHandler object at 0x00000196AF20FD30>
DEBUG 2022-02-07 18:03:07,044 on stmt: factor = oddVX_S <built-in function matmul> D_S.2
DEBUG 2022-02-07 18:03:07,044 on stmt: $136binary_matrix_multiply.6 = AX_S <built-in function matmul> D_S.2
DEBUG 2022-02-07 18:03:07,044 on stmt: D_S.1 = $136binary_matrix_multiply.6
DEBUG 2022-02-07 18:03:07,044 on stmt: jump 140
DEBUG 2022-02-07 18:03:07,044 ==== SSA block rewrite pass on 140
DEBUG 2022-02-07 18:03:07,044 Running <numba.core.ssa._FreshVarHandler object at 0x00000196AF20FD30>
DEBUG 2022-02-07 18:03:07,044 on stmt: D_S.3 = phi(incoming_values=[Var(D_S.2, _loop_hafnian_subroutines.py:168), Var(D_S.2, _loop_hafnian_subroutines.py:168), Var(D_S.1, _loop_hafnian_subroutines.py:172)], incoming_blocks=[72, 90, 124])
DEBUG 2022-02-07 18:03:07,044 on stmt: powfactor = const(int, 1)
DEBUG 2022-02-07 18:03:07,044 first assign: powfactor
DEBUG 2022-02-07 18:03:07,044 replaced with: powfactor = const(int, 1)
DEBUG 2022-02-07 18:03:07,044 on stmt: $const144.2 = const(int, 1)
DEBUG 2022-02-07 18:03:07,044 on stmt: $148binary_subtract.4 = $const144.2 - count
DEBUG 2022-02-07 18:03:07,044 on stmt: count = $148binary_subtract.4
DEBUG 2022-02-07 18:03:07,044 on stmt: $const154.6 = const(int, 1)
DEBUG 2022-02-07 18:03:07,044 on stmt: $158binary_subtract.8 = $const154.6 - count
DEBUG 2022-02-07 18:03:07,044 on stmt: $const160.9 = const(NoneType, None)
DEBUG 2022-02-07 18:03:07,044 on stmt: $const162.10 = const(NoneType, None)
DEBUG 2022-02-07 18:03:07,044 on stmt: $164build_slice.11 = global(slice: <class 'slice'>)
DEBUG 2022-02-07 18:03:07,051 on stmt: $164build_slice.12 = call $164build_slice.11($const160.9, $const162.10, func=$164build_slice.11, args=(Var($const160.9, _loop_hafnian_subroutines.py:176), Var($const162.10, _loop_hafnian_subroutines.py:176)), kws=(), vararg=None, target=None)
DEBUG 2022-02-07 18:03:07,051 on stmt: $166build_tuple.13 = build_tuple(items=[Var($158binary_subtract.8, _loop_hafnian_subroutines.py:176), Var($164build_slice.12, _loop_hafnian_subroutines.py:176)])
DEBUG 2022-02-07 18:03:07,051 on stmt: $168binary_subscr.14 = getitem(value=comb, index=$166build_tuple.13, fn=<built-in function getitem>)
DEBUG 2022-02-07 18:03:07,051 on stmt: $const174.17 = const(NoneType, None)
DEBUG 2022-02-07 18:03:07,051 on stmt: $const176.18 = const(NoneType, None)
DEBUG 2022-02-07 18:03:07,051 on stmt: $178build_slice.19 = global(slice: <class 'slice'>)
DEBUG 2022-02-07 18:03:07,051 on stmt: $178build_slice.20 = call $178build_slice.19($const174.17, $const176.18, func=$178build_slice.19, args=(Var($const174.17, _loop_hafnian_subroutines.py:176), Var($const176.18, _loop_hafnian_subroutines.py:176)), kws=(), vararg=None, target=None)
DEBUG 2022-02-07 18:03:07,051 on stmt: $180build_tuple.21 = build_tuple(items=[Var(count, _loop_hafnian_subroutines.py:161), Var($178build_slice.20, _loop_hafnian_subroutines.py:176)])
DEBUG 2022-02-07 18:03:07,051 on stmt: comb[$180build_tuple.21] = $168binary_subscr.14
DEBUG 2022-02-07 18:03:07,051 on stmt: $184load_global.22 = global(range: <class 'range'>)
DEBUG 2022-02-07 18:03:07,051 on stmt: $const186.23 = const(int, 1)
DEBUG 2022-02-07 18:03:07,051 on stmt: $192binary_floor_divide.26 = n // i
DEBUG 2022-02-07 18:03:07,051 on stmt: $const194.27 = const(int, 1)
DEBUG 2022-02-07 18:03:07,051 on stmt: $196binary_add.28 = $192binary_floor_divide.26 + $const194.27
DEBUG 2022-02-07 18:03:07,051 on stmt: $198call_function.29 = call $184load_global.22($const186.23, $196binary_add.28, func=$184load_global.22, args=[Var($const186.23, _loop_hafnian_subroutines.py:177), Var($196binary_add.28, _loop_hafnian_subroutines.py:177)], kws=(), vararg=None, target=None)
DEBUG 2022-02-07 18:03:07,051 on stmt: $200get_iter.30 = getiter(value=$198call_function.29)
DEBUG 2022-02-07 18:03:07,051 on stmt: $phi202.1 = $200get_iter.30
DEBUG 2022-02-07 18:03:07,051 on stmt: jump 202
DEBUG 2022-02-07 18:03:07,051 ==== SSA block rewrite pass on 202
DEBUG 2022-02-07 18:03:07,051 Running <numba.core.ssa._FreshVarHandler object at 0x00000196AF20FD30>
DEBUG 2022-02-07 18:03:07,051 on stmt: $202for_iter.2 = iternext(value=$phi202.1)
DEBUG 2022-02-07 18:03:07,051 on stmt: $202for_iter.3 = pair_first(value=$202for_iter.2)
DEBUG 2022-02-07 18:03:07,051 on stmt: $202for_iter.4 = pair_second(value=$202for_iter.2)
DEBUG 2022-02-07 18:03:07,051 on stmt: $phi204.2 = $202for_iter.3
DEBUG 2022-02-07 18:03:07,051 on stmt: branch $202for_iter.4, 204, 300
DEBUG 2022-02-07 18:03:07,051 ==== SSA block rewrite pass on 204
DEBUG 2022-02-07 18:03:07,051 Running <numba.core.ssa._FreshVarHandler object at 0x00000196AF20FD30>
DEBUG 2022-02-07 18:03:07,051 on stmt: j = $phi204.2
DEBUG 2022-02-07 18:03:07,051 on stmt: $212binary_true_divide.6 = factor / j
DEBUG 2022-02-07 18:03:07,051 on stmt: $214inplace_multiply.7 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=powfactor, rhs=$212binary_true_divide.6, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-07 18:03:07,051 on stmt: powfactor = $214inplace_multiply.7
DEBUG 2022-02-07 18:03:07,051 replaced with: powfactor.1 = $214inplace_multiply.7
DEBUG 2022-02-07 18:03:07,051 on stmt: $218load_global.8 = global(range: <class 'range'>)
DEBUG 2022-02-07 18:03:07,051 on stmt: $224binary_multiply.11 = i * j
DEBUG 2022-02-07 18:03:07,051 on stmt: $const226.12 = const(int, 1)
DEBUG 2022-02-07 18:03:07,051 on stmt: $228binary_add.13 = $224binary_multiply.11 + $const226.12
DEBUG 2022-02-07 18:03:07,051 on stmt: $const232.15 = const(int, 2)
DEBUG 2022-02-07 18:03:07,051 on stmt: $234binary_add.16 = n + $const232.15
DEBUG 2022-02-07 18:03:07,051 on stmt: $236call_function.17 = call $218load_global.8($228binary_add.13, $234binary_add.16, func=$218load_global.8, args=[Var($228binary_add.13, _loop_hafnian_subroutines.py:179), Var($234binary_add.16, _loop_hafnian_subroutines.py:179)], kws=(), vararg=None, target=None)
DEBUG 2022-02-07 18:03:07,051 on stmt: $238get_iter.18 = getiter(value=$236call_function.17)
DEBUG 2022-02-07 18:03:07,051 on stmt: $phi240.2 = $238get_iter.18
DEBUG 2022-02-07 18:03:07,051 on stmt: jump 240
DEBUG 2022-02-07 18:03:07,051 ==== SSA block rewrite pass on 240
DEBUG 2022-02-07 18:03:07,051 Running <numba.core.ssa._FreshVarHandler object at 0x00000196AF20FD30>
DEBUG 2022-02-07 18:03:07,051 on stmt: $240for_iter.3 = iternext(value=$phi240.2)
DEBUG 2022-02-07 18:03:07,051 on stmt: $240for_iter.4 = pair_first(value=$240for_iter.3)
DEBUG 2022-02-07 18:03:07,051 on stmt: $240for_iter.5 = pair_second(value=$240for_iter.3)
DEBUG 2022-02-07 18:03:07,051 on stmt: $phi242.3 = $240for_iter.4
DEBUG 2022-02-07 18:03:07,051 on stmt: branch $240for_iter.5, 242, 298
DEBUG 2022-02-07 18:03:07,051 ==== SSA block rewrite pass on 242
DEBUG 2022-02-07 18:03:07,051 Running <numba.core.ssa._FreshVarHandler object at 0x00000196AF20FD30>
DEBUG 2022-02-07 18:03:07,051 on stmt: k = $phi242.3
DEBUG 2022-02-07 18:03:07,051 on stmt: $const250.7 = const(int, 1)
DEBUG 2022-02-07 18:03:07,051 on stmt: $252binary_subtract.8 = k - $const250.7
DEBUG 2022-02-07 18:03:07,051 on stmt: $254build_tuple.9 = build_tuple(items=[Var(count, _loop_hafnian_subroutines.py:161), Var($252binary_subtract.8, _loop_hafnian_subroutines.py:180)])
DEBUG 2022-02-07 18:03:07,051 on stmt: $258binary_subscr.12 = getitem(value=comb, index=$254build_tuple.9, fn=<built-in function getitem>)
DEBUG 2022-02-07 18:03:07,051 on stmt: $const262.14 = const(int, 1)
DEBUG 2022-02-07 18:03:07,051 on stmt: $266binary_subtract.16 = $const262.14 - count
DEBUG 2022-02-07 18:03:07,051 on stmt: $274binary_multiply.20 = i * j
DEBUG 2022-02-07 18:03:07,051 on stmt: $276binary_subtract.21 = k - $274binary_multiply.20
DEBUG 2022-02-07 18:03:07,051 on stmt: $const278.22 = const(int, 1)
DEBUG 2022-02-07 18:03:07,051 on stmt: $280binary_subtract.23 = $276binary_subtract.21 - $const278.22
DEBUG 2022-02-07 18:03:07,051 on stmt: $282build_tuple.24 = build_tuple(items=[Var($266binary_subtract.16, _loop_hafnian_subroutines.py:180), Var($280binary_subtract.23, _loop_hafnian_subroutines.py:180)])
DEBUG 2022-02-07 18:03:07,051 on stmt: $284binary_subscr.25 = getitem(value=comb, index=$282build_tuple.24, fn=<built-in function getitem>)
DEBUG 2022-02-07 18:03:07,051 on stmt: $288binary_multiply.27 = $284binary_subscr.25 * powfactor
DEBUG 2022-02-07 18:03:07,051 on stmt: $290inplace_add.28 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$258binary_subscr.12, rhs=$288binary_multiply.27, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-07 18:03:07,051 on stmt: comb[$254build_tuple.9] = $290inplace_add.28
DEBUG 2022-02-07 18:03:07,051 on stmt: jump 240
DEBUG 2022-02-07 18:03:07,051 ==== SSA block rewrite pass on 298
DEBUG 2022-02-07 18:03:07,051 Running <numba.core.ssa._FreshVarHandler object at 0x00000196AF20FD30>
DEBUG 2022-02-07 18:03:07,051 on stmt: jump 202
DEBUG 2022-02-07 18:03:07,051 ==== SSA block rewrite pass on 300
DEBUG 2022-02-07 18:03:07,051 Running <numba.core.ssa._FreshVarHandler object at 0x00000196AF20FD30>
DEBUG 2022-02-07 18:03:07,051 on stmt: jump 60
DEBUG 2022-02-07 18:03:07,051 ==== SSA block rewrite pass on 302
DEBUG 2022-02-07 18:03:07,051 Running <numba.core.ssa._FreshVarHandler object at 0x00000196AF20FD30>
DEBUG 2022-02-07 18:03:07,051 on stmt: $const306.2 = const(NoneType, None)
DEBUG 2022-02-07 18:03:07,051 on stmt: $const308.3 = const(NoneType, None)
DEBUG 2022-02-07 18:03:07,051 on stmt: $310build_slice.4 = global(slice: <class 'slice'>)
DEBUG 2022-02-07 18:03:07,051 on stmt: $310build_slice.5 = call $310build_slice.4($const306.2, $const308.3, func=$310build_slice.4, args=(Var($const306.2, _loop_hafnian_subroutines.py:182), Var($const308.3, _loop_hafnian_subroutines.py:182)), kws=(), vararg=None, target=None)
DEBUG 2022-02-07 18:03:07,051 on stmt: $312build_tuple.6 = build_tuple(items=[Var(count, _loop_hafnian_subroutines.py:161), Var($310build_slice.5, _loop_hafnian_subroutines.py:182)])
DEBUG 2022-02-07 18:03:07,051 on stmt: $314binary_subscr.7 = getitem(value=comb, index=$312build_tuple.6, fn=<built-in function getitem>)
DEBUG 2022-02-07 18:03:07,066 on stmt: $316return_value.8 = cast(value=$314binary_subscr.7)
DEBUG 2022-02-07 18:03:07,066 on stmt: return $316return_value.8
DEBUG 2022-02-07 18:03:07,066 Replaced assignments: defaultdict(<class 'list'>,
            {140: [<numba.core.ir.Assign object at 0x00000196AF22D100>],
             204: [<numba.core.ir.Assign object at 0x00000196AF22D3A0>]})
DEBUG 2022-02-07 18:03:07,066 ==== SSA block rewrite pass on 0
DEBUG 2022-02-07 18:03:07,066 Running <numba.core.ssa._FixSSAVars object at 0x00000196B023A1C0>
DEBUG 2022-02-07 18:03:07,066 on stmt: E = arg(0, name=E)
DEBUG 2022-02-07 18:03:07,066 on stmt: AX_S = arg(1, name=AX_S)
DEBUG 2022-02-07 18:03:07,066 on stmt: XD_S = arg(2, name=XD_S)
DEBUG 2022-02-07 18:03:07,066 on stmt: D_S = arg(3, name=D_S)
DEBUG 2022-02-07 18:03:07,066 on stmt: n = arg(4, name=n)
DEBUG 2022-02-07 18:03:07,066 on stmt: oddloop = arg(5, name=oddloop)
DEBUG 2022-02-07 18:03:07,066 on stmt: oddVX_S = arg(6, name=oddVX_S)
DEBUG 2022-02-07 18:03:07,066 on stmt: $4load_method.1 = getattr(value=E, attr=copy)
DEBUG 2022-02-07 18:03:07,066 on stmt: E_k = call $4load_method.1(func=$4load_method.1, args=[], kws=(), vararg=None, target=None)
DEBUG 2022-02-07 18:03:07,066 on stmt: count = const(int, 0)
DEBUG 2022-02-07 18:03:07,066 on stmt: $14load_global.4 = global(np: <module 'numpy' from 'C:\\Users\\zl4821\\Anaconda3\\envs\\GBS\\lib\\site-packages\\numpy\\__init__.py'>)
DEBUG 2022-02-07 18:03:07,066 on stmt: $16load_attr.5 = getattr(value=$14load_global.4, attr=zeros)
DEBUG 2022-02-07 18:03:07,066 on stmt: $const18.6 = const(int, 2)
DEBUG 2022-02-07 18:03:07,066 on stmt: $const22.8 = const(int, 1)
DEBUG 2022-02-07 18:03:07,066 on stmt: $24binary_add.9 = n + $const22.8
DEBUG 2022-02-07 18:03:07,066 on stmt: $26build_tuple.10 = build_tuple(items=[Var($const18.6, _loop_hafnian_subroutines.py:162), Var($24binary_add.9, _loop_hafnian_subroutines.py:162)])
DEBUG 2022-02-07 18:03:07,066 on stmt: $28load_global.11 = global(np: <module 'numpy' from 'C:\\Users\\zl4821\\Anaconda3\\envs\\GBS\\lib\\site-packages\\numpy\\__init__.py'>)
DEBUG 2022-02-07 18:03:07,066 on stmt: $30load_attr.12 = getattr(value=$28load_global.11, attr=complex128)
DEBUG 2022-02-07 18:03:07,066 on stmt: comb = call $16load_attr.5($26build_tuple.10, func=$16load_attr.5, args=[Var($26build_tuple.10, _loop_hafnian_subroutines.py:162)], kws=[('dtype', Var($30load_attr.12, _loop_hafnian_subroutines.py:162))], vararg=None, target=None)
DEBUG 2022-02-07 18:03:07,066 on stmt: $const38.15 = const(int, 1)
DEBUG 2022-02-07 18:03:07,066 on stmt: $const_0 = const(int, 0)
DEBUG 2022-02-07 18:03:07,066 on stmt: $const_0.1 = const(int, 0)
DEBUG 2022-02-07 18:03:07,066 on stmt: $const42.17 = build_tuple(items=[Var($const_0, _loop_hafnian_subroutines.py:163), Var($const_0.1, _loop_hafnian_subroutines.py:163)])
DEBUG 2022-02-07 18:03:07,066 on stmt: comb[(0, 0)] = $const38.15
DEBUG 2022-02-07 18:03:07,066 on stmt: $46load_global.18 = global(range: <class 'range'>)
DEBUG 2022-02-07 18:03:07,066 on stmt: $const48.19 = const(int, 1)
DEBUG 2022-02-07 18:03:07,066 on stmt: $const52.21 = const(int, 1)
DEBUG 2022-02-07 18:03:07,066 on stmt: $54binary_add.22 = n + $const52.21
DEBUG 2022-02-07 18:03:07,066 on stmt: $56call_function.23 = call $46load_global.18($const48.19, $54binary_add.22, func=$46load_global.18, args=[Var($const48.19, _loop_hafnian_subroutines.py:164), Var($54binary_add.22, _loop_hafnian_subroutines.py:164)], kws=(), vararg=None, target=None)
DEBUG 2022-02-07 18:03:07,066 on stmt: $58get_iter.24 = getiter(value=$56call_function.23)
DEBUG 2022-02-07 18:03:07,066 on stmt: $phi60.0 = $58get_iter.24
DEBUG 2022-02-07 18:03:07,066 on stmt: jump 60
DEBUG 2022-02-07 18:03:07,066 ==== SSA block rewrite pass on 60
DEBUG 2022-02-07 18:03:07,066 Running <numba.core.ssa._FixSSAVars object at 0x00000196B023A1C0>
DEBUG 2022-02-07 18:03:07,066 on stmt: D_S.2 = phi(incoming_values=[Var(D_S, _loop_hafnian_subroutines.py:159), Var(D_S.3, _loop_hafnian_subroutines.py:168)], incoming_blocks=[0, 300])
DEBUG 2022-02-07 18:03:07,066 on stmt: $60for_iter.1 = iternext(value=$phi60.0)
DEBUG 2022-02-07 18:03:07,066 on stmt: $60for_iter.2 = pair_first(value=$60for_iter.1)
DEBUG 2022-02-07 18:03:07,066 on stmt: $60for_iter.3 = pair_second(value=$60for_iter.1)
DEBUG 2022-02-07 18:03:07,066 on stmt: $phi62.1 = $60for_iter.2
DEBUG 2022-02-07 18:03:07,066 on stmt: branch $60for_iter.3, 62, 302
DEBUG 2022-02-07 18:03:07,066 ==== SSA block rewrite pass on 62
DEBUG 2022-02-07 18:03:07,066 Running <numba.core.ssa._FixSSAVars object at 0x00000196B023A1C0>
DEBUG 2022-02-07 18:03:07,066 on stmt: i = $phi62.1
DEBUG 2022-02-07 18:03:07,066 on stmt: $const66.3 = const(int, 1)
DEBUG 2022-02-07 18:03:07,066 on stmt: $68compare_op.4 = i == $const66.3
DEBUG 2022-02-07 18:03:07,066 on stmt: bool70 = global(bool: <class 'bool'>)
DEBUG 2022-02-07 18:03:07,066 on stmt: $70pred = call bool70($68compare_op.4, func=bool70, args=(Var($68compare_op.4, _loop_hafnian_subroutines.py:165),), kws=(), vararg=None, target=None)
DEBUG 2022-02-07 18:03:07,066 on stmt: branch $70pred, 72, 78
DEBUG 2022-02-07 18:03:07,066 ==== SSA block rewrite pass on 72
DEBUG 2022-02-07 18:03:07,066 Running <numba.core.ssa._FixSSAVars object at 0x00000196B023A1C0>
DEBUG 2022-02-07 18:03:07,066 on stmt: factor = oddloop
DEBUG 2022-02-07 18:03:07,066 on stmt: jump 140
DEBUG 2022-02-07 18:03:07,066 ==== SSA block rewrite pass on 78
DEBUG 2022-02-07 18:03:07,066 Running <numba.core.ssa._FixSSAVars object at 0x00000196B023A1C0>
DEBUG 2022-02-07 18:03:07,066 on stmt: $const80.2 = const(int, 2)
DEBUG 2022-02-07 18:03:07,066 on stmt: $82binary_modulo.3 = i % $const80.2
DEBUG 2022-02-07 18:03:07,066 on stmt: $const84.4 = const(int, 0)
DEBUG 2022-02-07 18:03:07,066 on stmt: $86compare_op.5 = $82binary_modulo.3 == $const84.4
DEBUG 2022-02-07 18:03:07,066 on stmt: bool88 = global(bool: <class 'bool'>)
DEBUG 2022-02-07 18:03:07,066 on stmt: $88pred = call bool88($86compare_op.5, func=bool88, args=(Var($86compare_op.5, _loop_hafnian_subroutines.py:167),), kws=(), vararg=None, target=None)
DEBUG 2022-02-07 18:03:07,066 on stmt: branch $88pred, 90, 124
DEBUG 2022-02-07 18:03:07,066 ==== SSA block rewrite pass on 90
DEBUG 2022-02-07 18:03:07,066 Running <numba.core.ssa._FixSSAVars object at 0x00000196B023A1C0>
DEBUG 2022-02-07 18:03:07,066 on stmt: $92load_method.2 = getattr(value=E_k, attr=sum)
DEBUG 2022-02-07 18:03:07,066 on stmt: $94call_method.3 = call $92load_method.2(func=$92load_method.2, args=[], kws=(), vararg=None, target=None)
DEBUG 2022-02-07 18:03:07,066 on stmt: $98binary_true_divide.5 = $94call_method.3 / i
DEBUG 2022-02-07 18:03:07,066 on stmt: $104binary_matrix_multiply.8 = XD_S <built-in function matmul> D_S.2
DEBUG 2022-02-07 18:03:07,082 on stmt: $const106.9 = const(int, 2)
DEBUG 2022-02-07 18:03:07,082 on stmt: $108binary_true_divide.10 = $104binary_matrix_multiply.8 / $const106.9
DEBUG 2022-02-07 18:03:07,082 on stmt: factor = $98binary_true_divide.5 + $108binary_true_divide.10
DEBUG 2022-02-07 18:03:07,082 on stmt: $118inplace_multiply.14 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=E_k, rhs=E, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-07 18:03:07,082 on stmt: E_k = $118inplace_multiply.14
DEBUG 2022-02-07 18:03:07,082 on stmt: jump 140
DEBUG 2022-02-07 18:03:07,082 ==== SSA block rewrite pass on 124
DEBUG 2022-02-07 18:03:07,082 Running <numba.core.ssa._FixSSAVars object at 0x00000196B023A1C0>
DEBUG 2022-02-07 18:03:07,082 on stmt: factor = oddVX_S <built-in function matmul> D_S.2
DEBUG 2022-02-07 18:03:07,082 on stmt: $136binary_matrix_multiply.6 = AX_S <built-in function matmul> D_S.2
DEBUG 2022-02-07 18:03:07,082 on stmt: D_S.1 = $136binary_matrix_multiply.6
DEBUG 2022-02-07 18:03:07,082 on stmt: jump 140
DEBUG 2022-02-07 18:03:07,082 ==== SSA block rewrite pass on 140
DEBUG 2022-02-07 18:03:07,082 Running <numba.core.ssa._FixSSAVars object at 0x00000196B023A1C0>
DEBUG 2022-02-07 18:03:07,082 on stmt: D_S.3 = phi(incoming_values=[Var(D_S.2, _loop_hafnian_subroutines.py:168), Var(D_S.2, _loop_hafnian_subroutines.py:168), Var(D_S.1, _loop_hafnian_subroutines.py:172)], incoming_blocks=[72, 90, 124])
DEBUG 2022-02-07 18:03:07,082 on stmt: powfactor = const(int, 1)
DEBUG 2022-02-07 18:03:07,082 on stmt: $const144.2 = const(int, 1)
DEBUG 2022-02-07 18:03:07,082 on stmt: $148binary_subtract.4 = $const144.2 - count
DEBUG 2022-02-07 18:03:07,082 on stmt: count = $148binary_subtract.4
DEBUG 2022-02-07 18:03:07,082 on stmt: $const154.6 = const(int, 1)
DEBUG 2022-02-07 18:03:07,082 on stmt: $158binary_subtract.8 = $const154.6 - count
DEBUG 2022-02-07 18:03:07,082 on stmt: $const160.9 = const(NoneType, None)
DEBUG 2022-02-07 18:03:07,082 on stmt: $const162.10 = const(NoneType, None)
DEBUG 2022-02-07 18:03:07,082 on stmt: $164build_slice.11 = global(slice: <class 'slice'>)
DEBUG 2022-02-07 18:03:07,082 on stmt: $164build_slice.12 = call $164build_slice.11($const160.9, $const162.10, func=$164build_slice.11, args=(Var($const160.9, _loop_hafnian_subroutines.py:176), Var($const162.10, _loop_hafnian_subroutines.py:176)), kws=(), vararg=None, target=None)
DEBUG 2022-02-07 18:03:07,082 on stmt: $166build_tuple.13 = build_tuple(items=[Var($158binary_subtract.8, _loop_hafnian_subroutines.py:176), Var($164build_slice.12, _loop_hafnian_subroutines.py:176)])
DEBUG 2022-02-07 18:03:07,082 on stmt: $168binary_subscr.14 = getitem(value=comb, index=$166build_tuple.13, fn=<built-in function getitem>)
DEBUG 2022-02-07 18:03:07,082 on stmt: $const174.17 = const(NoneType, None)
DEBUG 2022-02-07 18:03:07,082 on stmt: $const176.18 = const(NoneType, None)
DEBUG 2022-02-07 18:03:07,082 on stmt: $178build_slice.19 = global(slice: <class 'slice'>)
DEBUG 2022-02-07 18:03:07,082 on stmt: $178build_slice.20 = call $178build_slice.19($const174.17, $const176.18, func=$178build_slice.19, args=(Var($const174.17, _loop_hafnian_subroutines.py:176), Var($const176.18, _loop_hafnian_subroutines.py:176)), kws=(), vararg=None, target=None)
DEBUG 2022-02-07 18:03:07,082 on stmt: $180build_tuple.21 = build_tuple(items=[Var(count, _loop_hafnian_subroutines.py:161), Var($178build_slice.20, _loop_hafnian_subroutines.py:176)])
DEBUG 2022-02-07 18:03:07,082 on stmt: comb[$180build_tuple.21] = $168binary_subscr.14
DEBUG 2022-02-07 18:03:07,082 on stmt: $184load_global.22 = global(range: <class 'range'>)
DEBUG 2022-02-07 18:03:07,082 on stmt: $const186.23 = const(int, 1)
DEBUG 2022-02-07 18:03:07,082 on stmt: $192binary_floor_divide.26 = n // i
DEBUG 2022-02-07 18:03:07,082 on stmt: $const194.27 = const(int, 1)
DEBUG 2022-02-07 18:03:07,082 on stmt: $196binary_add.28 = $192binary_floor_divide.26 + $const194.27
DEBUG 2022-02-07 18:03:07,082 on stmt: $198call_function.29 = call $184load_global.22($const186.23, $196binary_add.28, func=$184load_global.22, args=[Var($const186.23, _loop_hafnian_subroutines.py:177), Var($196binary_add.28, _loop_hafnian_subroutines.py:177)], kws=(), vararg=None, target=None)
DEBUG 2022-02-07 18:03:07,082 on stmt: $200get_iter.30 = getiter(value=$198call_function.29)
DEBUG 2022-02-07 18:03:07,082 on stmt: $phi202.1 = $200get_iter.30
DEBUG 2022-02-07 18:03:07,082 on stmt: jump 202
DEBUG 2022-02-07 18:03:07,082 ==== SSA block rewrite pass on 202
DEBUG 2022-02-07 18:03:07,082 Running <numba.core.ssa._FixSSAVars object at 0x00000196B023A1C0>
DEBUG 2022-02-07 18:03:07,082 on stmt: $202for_iter.2 = iternext(value=$phi202.1)
DEBUG 2022-02-07 18:03:07,082 on stmt: $202for_iter.3 = pair_first(value=$202for_iter.2)
DEBUG 2022-02-07 18:03:07,082 on stmt: $202for_iter.4 = pair_second(value=$202for_iter.2)
DEBUG 2022-02-07 18:03:07,082 on stmt: $phi204.2 = $202for_iter.3
DEBUG 2022-02-07 18:03:07,082 on stmt: branch $202for_iter.4, 204, 300
DEBUG 2022-02-07 18:03:07,082 ==== SSA block rewrite pass on 204
DEBUG 2022-02-07 18:03:07,082 Running <numba.core.ssa._FixSSAVars object at 0x00000196B023A1C0>
DEBUG 2022-02-07 18:03:07,082 on stmt: j = $phi204.2
DEBUG 2022-02-07 18:03:07,082 on stmt: $212binary_true_divide.6 = factor / j
DEBUG 2022-02-07 18:03:07,082 on stmt: $214inplace_multiply.7 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=powfactor, rhs=$212binary_true_divide.6, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-07 18:03:07,082 find_def var='powfactor' stmt=$214inplace_multiply.7 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=powfactor, rhs=$212binary_true_divide.6, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-07 18:03:07,082 find_def_from_top label 204
DEBUG 2022-02-07 18:03:07,082 idom 202 from label 204
DEBUG 2022-02-07 18:03:07,082 find_def_from_bottom label 202
DEBUG 2022-02-07 18:03:07,082 find_def_from_top label 202
DEBUG 2022-02-07 18:03:07,082 insert phi node powfactor.2 = phi(incoming_values=[], incoming_blocks=[]) at 202
DEBUG 2022-02-07 18:03:07,082 find_def_from_bottom label 298
DEBUG 2022-02-07 18:03:07,082 find_def_from_top label 298
DEBUG 2022-02-07 18:03:07,082 idom 240 from label 298
DEBUG 2022-02-07 18:03:07,082 find_def_from_bottom label 240
DEBUG 2022-02-07 18:03:07,082 find_def_from_top label 240
DEBUG 2022-02-07 18:03:07,082 idom 204 from label 240
DEBUG 2022-02-07 18:03:07,082 find_def_from_bottom label 204
DEBUG 2022-02-07 18:03:07,082 incoming_def powfactor.1 = $214inplace_multiply.7
DEBUG 2022-02-07 18:03:07,097 find_def_from_bottom label 140
DEBUG 2022-02-07 18:03:07,097 incoming_def powfactor = const(int, 1)
DEBUG 2022-02-07 18:03:07,097 replaced with: $214inplace_multiply.7 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=powfactor.2, rhs=$212binary_true_divide.6, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-07 18:03:07,097 on stmt: powfactor.1 = $214inplace_multiply.7
DEBUG 2022-02-07 18:03:07,097 on stmt: $218load_global.8 = global(range: <class 'range'>)
DEBUG 2022-02-07 18:03:07,097 on stmt: $224binary_multiply.11 = i * j
DEBUG 2022-02-07 18:03:07,097 on stmt: $const226.12 = const(int, 1)
DEBUG 2022-02-07 18:03:07,097 on stmt: $228binary_add.13 = $224binary_multiply.11 + $const226.12
DEBUG 2022-02-07 18:03:07,097 on stmt: $const232.15 = const(int, 2)
DEBUG 2022-02-07 18:03:07,097 on stmt: $234binary_add.16 = n + $const232.15
DEBUG 2022-02-07 18:03:07,097 on stmt: $236call_function.17 = call $218load_global.8($228binary_add.13, $234binary_add.16, func=$218load_global.8, args=[Var($228binary_add.13, _loop_hafnian_subroutines.py:179), Var($234binary_add.16, _loop_hafnian_subroutines.py:179)], kws=(), vararg=None, target=None)
DEBUG 2022-02-07 18:03:07,097 on stmt: $238get_iter.18 = getiter(value=$236call_function.17)
DEBUG 2022-02-07 18:03:07,097 on stmt: $phi240.2 = $238get_iter.18
DEBUG 2022-02-07 18:03:07,097 on stmt: jump 240
DEBUG 2022-02-07 18:03:07,097 ==== SSA block rewrite pass on 240
DEBUG 2022-02-07 18:03:07,097 Running <numba.core.ssa._FixSSAVars object at 0x00000196B023A1C0>
DEBUG 2022-02-07 18:03:07,097 on stmt: $240for_iter.3 = iternext(value=$phi240.2)
DEBUG 2022-02-07 18:03:07,097 on stmt: $240for_iter.4 = pair_first(value=$240for_iter.3)
DEBUG 2022-02-07 18:03:07,097 on stmt: $240for_iter.5 = pair_second(value=$240for_iter.3)
DEBUG 2022-02-07 18:03:07,097 on stmt: $phi242.3 = $240for_iter.4
DEBUG 2022-02-07 18:03:07,097 on stmt: branch $240for_iter.5, 242, 298
DEBUG 2022-02-07 18:03:07,097 ==== SSA block rewrite pass on 242
DEBUG 2022-02-07 18:03:07,097 Running <numba.core.ssa._FixSSAVars object at 0x00000196B023A1C0>
DEBUG 2022-02-07 18:03:07,097 on stmt: k = $phi242.3
DEBUG 2022-02-07 18:03:07,097 on stmt: $const250.7 = const(int, 1)
DEBUG 2022-02-07 18:03:07,097 on stmt: $252binary_subtract.8 = k - $const250.7
DEBUG 2022-02-07 18:03:07,097 on stmt: $254build_tuple.9 = build_tuple(items=[Var(count, _loop_hafnian_subroutines.py:161), Var($252binary_subtract.8, _loop_hafnian_subroutines.py:180)])
DEBUG 2022-02-07 18:03:07,097 on stmt: $258binary_subscr.12 = getitem(value=comb, index=$254build_tuple.9, fn=<built-in function getitem>)
DEBUG 2022-02-07 18:03:07,097 on stmt: $const262.14 = const(int, 1)
DEBUG 2022-02-07 18:03:07,097 on stmt: $266binary_subtract.16 = $const262.14 - count
DEBUG 2022-02-07 18:03:07,097 on stmt: $274binary_multiply.20 = i * j
DEBUG 2022-02-07 18:03:07,097 on stmt: $276binary_subtract.21 = k - $274binary_multiply.20
DEBUG 2022-02-07 18:03:07,097 on stmt: $const278.22 = const(int, 1)
DEBUG 2022-02-07 18:03:07,097 on stmt: $280binary_subtract.23 = $276binary_subtract.21 - $const278.22
DEBUG 2022-02-07 18:03:07,097 on stmt: $282build_tuple.24 = build_tuple(items=[Var($266binary_subtract.16, _loop_hafnian_subroutines.py:180), Var($280binary_subtract.23, _loop_hafnian_subroutines.py:180)])
DEBUG 2022-02-07 18:03:07,097 on stmt: $284binary_subscr.25 = getitem(value=comb, index=$282build_tuple.24, fn=<built-in function getitem>)
DEBUG 2022-02-07 18:03:07,097 on stmt: $288binary_multiply.27 = $284binary_subscr.25 * powfactor
DEBUG 2022-02-07 18:03:07,097 find_def var='powfactor' stmt=$288binary_multiply.27 = $284binary_subscr.25 * powfactor
DEBUG 2022-02-07 18:03:07,097 find_def_from_top label 242
DEBUG 2022-02-07 18:03:07,097 idom 240 from label 242
DEBUG 2022-02-07 18:03:07,097 find_def_from_bottom label 240
DEBUG 2022-02-07 18:03:07,097 find_def_from_top label 240
DEBUG 2022-02-07 18:03:07,097 idom 204 from label 240
DEBUG 2022-02-07 18:03:07,097 find_def_from_bottom label 204
DEBUG 2022-02-07 18:03:07,097 replaced with: $288binary_multiply.27 = $284binary_subscr.25 * powfactor.1
DEBUG 2022-02-07 18:03:07,097 on stmt: $290inplace_add.28 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$258binary_subscr.12, rhs=$288binary_multiply.27, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-07 18:03:07,097 on stmt: comb[$254build_tuple.9] = $290inplace_add.28
DEBUG 2022-02-07 18:03:07,097 on stmt: jump 240
DEBUG 2022-02-07 18:03:07,097 ==== SSA block rewrite pass on 298
DEBUG 2022-02-07 18:03:07,097 Running <numba.core.ssa._FixSSAVars object at 0x00000196B023A1C0>
DEBUG 2022-02-07 18:03:07,097 on stmt: jump 202
DEBUG 2022-02-07 18:03:07,097 ==== SSA block rewrite pass on 300
DEBUG 2022-02-07 18:03:07,097 Running <numba.core.ssa._FixSSAVars object at 0x00000196B023A1C0>
DEBUG 2022-02-07 18:03:07,097 on stmt: jump 60
DEBUG 2022-02-07 18:03:07,097 ==== SSA block rewrite pass on 302
DEBUG 2022-02-07 18:03:07,097 Running <numba.core.ssa._FixSSAVars object at 0x00000196B023A1C0>
DEBUG 2022-02-07 18:03:07,097 on stmt: $const306.2 = const(NoneType, None)
DEBUG 2022-02-07 18:03:07,097 on stmt: $const308.3 = const(NoneType, None)
DEBUG 2022-02-07 18:03:07,097 on stmt: $310build_slice.4 = global(slice: <class 'slice'>)
DEBUG 2022-02-07 18:03:07,097 on stmt: $310build_slice.5 = call $310build_slice.4($const306.2, $const308.3, func=$310build_slice.4, args=(Var($const306.2, _loop_hafnian_subroutines.py:182), Var($const308.3, _loop_hafnian_subroutines.py:182)), kws=(), vararg=None, target=None)
DEBUG 2022-02-07 18:03:07,097 on stmt: $312build_tuple.6 = build_tuple(items=[Var(count, _loop_hafnian_subroutines.py:161), Var($310build_slice.5, _loop_hafnian_subroutines.py:182)])
DEBUG 2022-02-07 18:03:07,097 on stmt: $314binary_subscr.7 = getitem(value=comb, index=$312build_tuple.6, fn=<built-in function getitem>)
DEBUG 2022-02-07 18:03:07,097 on stmt: $316return_value.8 = cast(value=$314binary_subscr.7)
DEBUG 2022-02-07 18:03:07,097 on stmt: return $316return_value.8
DEBUG 2022-02-07 18:03:07,097 Fix SSA violator on var E_k
DEBUG 2022-02-07 18:03:07,097 ==== SSA block rewrite pass on 0
DEBUG 2022-02-07 18:03:07,097 Running <numba.core.ssa._FreshVarHandler object at 0x00000196B023A820>
DEBUG 2022-02-07 18:03:07,097 on stmt: E = arg(0, name=E)
DEBUG 2022-02-07 18:03:07,097 on stmt: AX_S = arg(1, name=AX_S)
DEBUG 2022-02-07 18:03:07,097 on stmt: XD_S = arg(2, name=XD_S)
DEBUG 2022-02-07 18:03:07,097 on stmt: D_S = arg(3, name=D_S)
DEBUG 2022-02-07 18:03:07,097 on stmt: n = arg(4, name=n)
DEBUG 2022-02-07 18:03:07,097 on stmt: oddloop = arg(5, name=oddloop)
DEBUG 2022-02-07 18:03:07,097 on stmt: oddVX_S = arg(6, name=oddVX_S)
DEBUG 2022-02-07 18:03:07,097 on stmt: $4load_method.1 = getattr(value=E, attr=copy)
DEBUG 2022-02-07 18:03:07,097 on stmt: E_k = call $4load_method.1(func=$4load_method.1, args=[], kws=(), vararg=None, target=None)
DEBUG 2022-02-07 18:03:07,097 first assign: E_k
DEBUG 2022-02-07 18:03:07,113 replaced with: E_k = call $4load_method.1(func=$4load_method.1, args=[], kws=(), vararg=None, target=None)
DEBUG 2022-02-07 18:03:07,113 on stmt: count = const(int, 0)
DEBUG 2022-02-07 18:03:07,113 on stmt: $14load_global.4 = global(np: <module 'numpy' from 'C:\\Users\\zl4821\\Anaconda3\\envs\\GBS\\lib\\site-packages\\numpy\\__init__.py'>)
DEBUG 2022-02-07 18:03:07,113 on stmt: $16load_attr.5 = getattr(value=$14load_global.4, attr=zeros)
DEBUG 2022-02-07 18:03:07,113 on stmt: $const18.6 = const(int, 2)
DEBUG 2022-02-07 18:03:07,113 on stmt: $const22.8 = const(int, 1)
DEBUG 2022-02-07 18:03:07,113 on stmt: $24binary_add.9 = n + $const22.8
DEBUG 2022-02-07 18:03:07,113 on stmt: $26build_tuple.10 = build_tuple(items=[Var($const18.6, _loop_hafnian_subroutines.py:162), Var($24binary_add.9, _loop_hafnian_subroutines.py:162)])
DEBUG 2022-02-07 18:03:07,113 on stmt: $28load_global.11 = global(np: <module 'numpy' from 'C:\\Users\\zl4821\\Anaconda3\\envs\\GBS\\lib\\site-packages\\numpy\\__init__.py'>)
DEBUG 2022-02-07 18:03:07,113 on stmt: $30load_attr.12 = getattr(value=$28load_global.11, attr=complex128)
DEBUG 2022-02-07 18:03:07,113 on stmt: comb = call $16load_attr.5($26build_tuple.10, func=$16load_attr.5, args=[Var($26build_tuple.10, _loop_hafnian_subroutines.py:162)], kws=[('dtype', Var($30load_attr.12, _loop_hafnian_subroutines.py:162))], vararg=None, target=None)
DEBUG 2022-02-07 18:03:07,113 on stmt: $const38.15 = const(int, 1)
DEBUG 2022-02-07 18:03:07,113 on stmt: $const_0 = const(int, 0)
DEBUG 2022-02-07 18:03:07,113 on stmt: $const_0.1 = const(int, 0)
DEBUG 2022-02-07 18:03:07,113 on stmt: $const42.17 = build_tuple(items=[Var($const_0, _loop_hafnian_subroutines.py:163), Var($const_0.1, _loop_hafnian_subroutines.py:163)])
DEBUG 2022-02-07 18:03:07,113 on stmt: comb[(0, 0)] = $const38.15
DEBUG 2022-02-07 18:03:07,113 on stmt: $46load_global.18 = global(range: <class 'range'>)
DEBUG 2022-02-07 18:03:07,113 on stmt: $const48.19 = const(int, 1)
DEBUG 2022-02-07 18:03:07,113 on stmt: $const52.21 = const(int, 1)
DEBUG 2022-02-07 18:03:07,113 on stmt: $54binary_add.22 = n + $const52.21
DEBUG 2022-02-07 18:03:07,113 on stmt: $56call_function.23 = call $46load_global.18($const48.19, $54binary_add.22, func=$46load_global.18, args=[Var($const48.19, _loop_hafnian_subroutines.py:164), Var($54binary_add.22, _loop_hafnian_subroutines.py:164)], kws=(), vararg=None, target=None)
DEBUG 2022-02-07 18:03:07,113 on stmt: $58get_iter.24 = getiter(value=$56call_function.23)
DEBUG 2022-02-07 18:03:07,113 on stmt: $phi60.0 = $58get_iter.24
DEBUG 2022-02-07 18:03:07,113 on stmt: jump 60
DEBUG 2022-02-07 18:03:07,113 ==== SSA block rewrite pass on 60
DEBUG 2022-02-07 18:03:07,113 Running <numba.core.ssa._FreshVarHandler object at 0x00000196B023A820>
DEBUG 2022-02-07 18:03:07,113 on stmt: D_S.2 = phi(incoming_values=[Var(D_S, _loop_hafnian_subroutines.py:159), Var(D_S.3, _loop_hafnian_subroutines.py:168)], incoming_blocks=[0, 300])
DEBUG 2022-02-07 18:03:07,113 on stmt: $60for_iter.1 = iternext(value=$phi60.0)
DEBUG 2022-02-07 18:03:07,113 on stmt: $60for_iter.2 = pair_first(value=$60for_iter.1)
DEBUG 2022-02-07 18:03:07,113 on stmt: $60for_iter.3 = pair_second(value=$60for_iter.1)
DEBUG 2022-02-07 18:03:07,113 on stmt: $phi62.1 = $60for_iter.2
DEBUG 2022-02-07 18:03:07,113 on stmt: branch $60for_iter.3, 62, 302
DEBUG 2022-02-07 18:03:07,113 ==== SSA block rewrite pass on 62
DEBUG 2022-02-07 18:03:07,113 Running <numba.core.ssa._FreshVarHandler object at 0x00000196B023A820>
DEBUG 2022-02-07 18:03:07,113 on stmt: i = $phi62.1
DEBUG 2022-02-07 18:03:07,113 on stmt: $const66.3 = const(int, 1)
DEBUG 2022-02-07 18:03:07,113 on stmt: $68compare_op.4 = i == $const66.3
DEBUG 2022-02-07 18:03:07,113 on stmt: bool70 = global(bool: <class 'bool'>)
DEBUG 2022-02-07 18:03:07,113 on stmt: $70pred = call bool70($68compare_op.4, func=bool70, args=(Var($68compare_op.4, _loop_hafnian_subroutines.py:165),), kws=(), vararg=None, target=None)
DEBUG 2022-02-07 18:03:07,113 on stmt: branch $70pred, 72, 78
DEBUG 2022-02-07 18:03:07,113 ==== SSA block rewrite pass on 72
DEBUG 2022-02-07 18:03:07,113 Running <numba.core.ssa._FreshVarHandler object at 0x00000196B023A820>
DEBUG 2022-02-07 18:03:07,113 on stmt: factor = oddloop
DEBUG 2022-02-07 18:03:07,113 on stmt: jump 140
DEBUG 2022-02-07 18:03:07,113 ==== SSA block rewrite pass on 78
DEBUG 2022-02-07 18:03:07,113 Running <numba.core.ssa._FreshVarHandler object at 0x00000196B023A820>
DEBUG 2022-02-07 18:03:07,113 on stmt: $const80.2 = const(int, 2)
DEBUG 2022-02-07 18:03:07,113 on stmt: $82binary_modulo.3 = i % $const80.2
DEBUG 2022-02-07 18:03:07,113 on stmt: $const84.4 = const(int, 0)
DEBUG 2022-02-07 18:03:07,113 on stmt: $86compare_op.5 = $82binary_modulo.3 == $const84.4
DEBUG 2022-02-07 18:03:07,113 on stmt: bool88 = global(bool: <class 'bool'>)
DEBUG 2022-02-07 18:03:07,113 on stmt: $88pred = call bool88($86compare_op.5, func=bool88, args=(Var($86compare_op.5, _loop_hafnian_subroutines.py:167),), kws=(), vararg=None, target=None)
DEBUG 2022-02-07 18:03:07,113 on stmt: branch $88pred, 90, 124
DEBUG 2022-02-07 18:03:07,113 ==== SSA block rewrite pass on 90
DEBUG 2022-02-07 18:03:07,113 Running <numba.core.ssa._FreshVarHandler object at 0x00000196B023A820>
DEBUG 2022-02-07 18:03:07,113 on stmt: $92load_method.2 = getattr(value=E_k, attr=sum)
DEBUG 2022-02-07 18:03:07,113 on stmt: $94call_method.3 = call $92load_method.2(func=$92load_method.2, args=[], kws=(), vararg=None, target=None)
DEBUG 2022-02-07 18:03:07,113 on stmt: $98binary_true_divide.5 = $94call_method.3 / i
DEBUG 2022-02-07 18:03:07,113 on stmt: $104binary_matrix_multiply.8 = XD_S <built-in function matmul> D_S.2
DEBUG 2022-02-07 18:03:07,113 on stmt: $const106.9 = const(int, 2)
DEBUG 2022-02-07 18:03:07,113 on stmt: $108binary_true_divide.10 = $104binary_matrix_multiply.8 / $const106.9
DEBUG 2022-02-07 18:03:07,113 on stmt: factor = $98binary_true_divide.5 + $108binary_true_divide.10
DEBUG 2022-02-07 18:03:07,113 on stmt: $118inplace_multiply.14 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=E_k, rhs=E, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-07 18:03:07,113 on stmt: E_k = $118inplace_multiply.14
DEBUG 2022-02-07 18:03:07,113 replaced with: E_k.1 = $118inplace_multiply.14
DEBUG 2022-02-07 18:03:07,113 on stmt: jump 140
DEBUG 2022-02-07 18:03:07,113 ==== SSA block rewrite pass on 124
DEBUG 2022-02-07 18:03:07,113 Running <numba.core.ssa._FreshVarHandler object at 0x00000196B023A820>
DEBUG 2022-02-07 18:03:07,113 on stmt: factor = oddVX_S <built-in function matmul> D_S.2
DEBUG 2022-02-07 18:03:07,113 on stmt: $136binary_matrix_multiply.6 = AX_S <built-in function matmul> D_S.2
DEBUG 2022-02-07 18:03:07,113 on stmt: D_S.1 = $136binary_matrix_multiply.6
DEBUG 2022-02-07 18:03:07,113 on stmt: jump 140
DEBUG 2022-02-07 18:03:07,113 ==== SSA block rewrite pass on 140
DEBUG 2022-02-07 18:03:07,113 Running <numba.core.ssa._FreshVarHandler object at 0x00000196B023A820>
DEBUG 2022-02-07 18:03:07,113 on stmt: D_S.3 = phi(incoming_values=[Var(D_S.2, _loop_hafnian_subroutines.py:168), Var(D_S.2, _loop_hafnian_subroutines.py:168), Var(D_S.1, _loop_hafnian_subroutines.py:172)], incoming_blocks=[72, 90, 124])
DEBUG 2022-02-07 18:03:07,113 on stmt: powfactor = const(int, 1)
DEBUG 2022-02-07 18:03:07,113 on stmt: $const144.2 = const(int, 1)
DEBUG 2022-02-07 18:03:07,113 on stmt: $148binary_subtract.4 = $const144.2 - count
DEBUG 2022-02-07 18:03:07,113 on stmt: count = $148binary_subtract.4
DEBUG 2022-02-07 18:03:07,113 on stmt: $const154.6 = const(int, 1)
DEBUG 2022-02-07 18:03:07,113 on stmt: $158binary_subtract.8 = $const154.6 - count
DEBUG 2022-02-07 18:03:07,113 on stmt: $const160.9 = const(NoneType, None)
DEBUG 2022-02-07 18:03:07,113 on stmt: $const162.10 = const(NoneType, None)
DEBUG 2022-02-07 18:03:07,129 on stmt: $164build_slice.11 = global(slice: <class 'slice'>)
DEBUG 2022-02-07 18:03:07,129 on stmt: $164build_slice.12 = call $164build_slice.11($const160.9, $const162.10, func=$164build_slice.11, args=(Var($const160.9, _loop_hafnian_subroutines.py:176), Var($const162.10, _loop_hafnian_subroutines.py:176)), kws=(), vararg=None, target=None)
DEBUG 2022-02-07 18:03:07,129 on stmt: $166build_tuple.13 = build_tuple(items=[Var($158binary_subtract.8, _loop_hafnian_subroutines.py:176), Var($164build_slice.12, _loop_hafnian_subroutines.py:176)])
DEBUG 2022-02-07 18:03:07,129 on stmt: $168binary_subscr.14 = getitem(value=comb, index=$166build_tuple.13, fn=<built-in function getitem>)
DEBUG 2022-02-07 18:03:07,129 on stmt: $const174.17 = const(NoneType, None)
DEBUG 2022-02-07 18:03:07,129 on stmt: $const176.18 = const(NoneType, None)
DEBUG 2022-02-07 18:03:07,129 on stmt: $178build_slice.19 = global(slice: <class 'slice'>)
DEBUG 2022-02-07 18:03:07,129 on stmt: $178build_slice.20 = call $178build_slice.19($const174.17, $const176.18, func=$178build_slice.19, args=(Var($const174.17, _loop_hafnian_subroutines.py:176), Var($const176.18, _loop_hafnian_subroutines.py:176)), kws=(), vararg=None, target=None)
DEBUG 2022-02-07 18:03:07,129 on stmt: $180build_tuple.21 = build_tuple(items=[Var(count, _loop_hafnian_subroutines.py:161), Var($178build_slice.20, _loop_hafnian_subroutines.py:176)])
DEBUG 2022-02-07 18:03:07,129 on stmt: comb[$180build_tuple.21] = $168binary_subscr.14
DEBUG 2022-02-07 18:03:07,129 on stmt: $184load_global.22 = global(range: <class 'range'>)
DEBUG 2022-02-07 18:03:07,129 on stmt: $const186.23 = const(int, 1)
DEBUG 2022-02-07 18:03:07,129 on stmt: $192binary_floor_divide.26 = n // i
DEBUG 2022-02-07 18:03:07,129 on stmt: $const194.27 = const(int, 1)
DEBUG 2022-02-07 18:03:07,129 on stmt: $196binary_add.28 = $192binary_floor_divide.26 + $const194.27
DEBUG 2022-02-07 18:03:07,129 on stmt: $198call_function.29 = call $184load_global.22($const186.23, $196binary_add.28, func=$184load_global.22, args=[Var($const186.23, _loop_hafnian_subroutines.py:177), Var($196binary_add.28, _loop_hafnian_subroutines.py:177)], kws=(), vararg=None, target=None)
DEBUG 2022-02-07 18:03:07,129 on stmt: $200get_iter.30 = getiter(value=$198call_function.29)
DEBUG 2022-02-07 18:03:07,129 on stmt: $phi202.1 = $200get_iter.30
DEBUG 2022-02-07 18:03:07,129 on stmt: jump 202
DEBUG 2022-02-07 18:03:07,129 ==== SSA block rewrite pass on 202
DEBUG 2022-02-07 18:03:07,129 Running <numba.core.ssa._FreshVarHandler object at 0x00000196B023A820>
DEBUG 2022-02-07 18:03:07,129 on stmt: powfactor.2 = phi(incoming_values=[Var(powfactor.1, _loop_hafnian_subroutines.py:178), Var(powfactor, _loop_hafnian_subroutines.py:174)], incoming_blocks=[298, 140])
DEBUG 2022-02-07 18:03:07,129 on stmt: $202for_iter.2 = iternext(value=$phi202.1)
DEBUG 2022-02-07 18:03:07,129 on stmt: $202for_iter.3 = pair_first(value=$202for_iter.2)
DEBUG 2022-02-07 18:03:07,129 on stmt: $202for_iter.4 = pair_second(value=$202for_iter.2)
DEBUG 2022-02-07 18:03:07,129 on stmt: $phi204.2 = $202for_iter.3
DEBUG 2022-02-07 18:03:07,129 on stmt: branch $202for_iter.4, 204, 300
DEBUG 2022-02-07 18:03:07,129 ==== SSA block rewrite pass on 204
DEBUG 2022-02-07 18:03:07,129 Running <numba.core.ssa._FreshVarHandler object at 0x00000196B023A820>
DEBUG 2022-02-07 18:03:07,129 on stmt: j = $phi204.2
DEBUG 2022-02-07 18:03:07,129 on stmt: $212binary_true_divide.6 = factor / j
DEBUG 2022-02-07 18:03:07,129 on stmt: $214inplace_multiply.7 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=powfactor.2, rhs=$212binary_true_divide.6, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-07 18:03:07,129 on stmt: powfactor.1 = $214inplace_multiply.7
DEBUG 2022-02-07 18:03:07,129 on stmt: $218load_global.8 = global(range: <class 'range'>)
DEBUG 2022-02-07 18:03:07,129 on stmt: $224binary_multiply.11 = i * j
DEBUG 2022-02-07 18:03:07,129 on stmt: $const226.12 = const(int, 1)
DEBUG 2022-02-07 18:03:07,129 on stmt: $228binary_add.13 = $224binary_multiply.11 + $const226.12
DEBUG 2022-02-07 18:03:07,129 on stmt: $const232.15 = const(int, 2)
DEBUG 2022-02-07 18:03:07,129 on stmt: $234binary_add.16 = n + $const232.15
DEBUG 2022-02-07 18:03:07,129 on stmt: $236call_function.17 = call $218load_global.8($228binary_add.13, $234binary_add.16, func=$218load_global.8, args=[Var($228binary_add.13, _loop_hafnian_subroutines.py:179), Var($234binary_add.16, _loop_hafnian_subroutines.py:179)], kws=(), vararg=None, target=None)
DEBUG 2022-02-07 18:03:07,129 on stmt: $238get_iter.18 = getiter(value=$236call_function.17)
DEBUG 2022-02-07 18:03:07,129 on stmt: $phi240.2 = $238get_iter.18
DEBUG 2022-02-07 18:03:07,129 on stmt: jump 240
DEBUG 2022-02-07 18:03:07,129 ==== SSA block rewrite pass on 240
DEBUG 2022-02-07 18:03:07,129 Running <numba.core.ssa._FreshVarHandler object at 0x00000196B023A820>
DEBUG 2022-02-07 18:03:07,129 on stmt: $240for_iter.3 = iternext(value=$phi240.2)
DEBUG 2022-02-07 18:03:07,129 on stmt: $240for_iter.4 = pair_first(value=$240for_iter.3)
DEBUG 2022-02-07 18:03:07,129 on stmt: $240for_iter.5 = pair_second(value=$240for_iter.3)
DEBUG 2022-02-07 18:03:07,129 on stmt: $phi242.3 = $240for_iter.4
DEBUG 2022-02-07 18:03:07,129 on stmt: branch $240for_iter.5, 242, 298
DEBUG 2022-02-07 18:03:07,129 ==== SSA block rewrite pass on 242
DEBUG 2022-02-07 18:03:07,129 Running <numba.core.ssa._FreshVarHandler object at 0x00000196B023A820>
DEBUG 2022-02-07 18:03:07,129 on stmt: k = $phi242.3
DEBUG 2022-02-07 18:03:07,129 on stmt: $const250.7 = const(int, 1)
DEBUG 2022-02-07 18:03:07,129 on stmt: $252binary_subtract.8 = k - $const250.7
DEBUG 2022-02-07 18:03:07,129 on stmt: $254build_tuple.9 = build_tuple(items=[Var(count, _loop_hafnian_subroutines.py:161), Var($252binary_subtract.8, _loop_hafnian_subroutines.py:180)])
DEBUG 2022-02-07 18:03:07,129 on stmt: $258binary_subscr.12 = getitem(value=comb, index=$254build_tuple.9, fn=<built-in function getitem>)
DEBUG 2022-02-07 18:03:07,129 on stmt: $const262.14 = const(int, 1)
DEBUG 2022-02-07 18:03:07,129 on stmt: $266binary_subtract.16 = $const262.14 - count
DEBUG 2022-02-07 18:03:07,129 on stmt: $274binary_multiply.20 = i * j
DEBUG 2022-02-07 18:03:07,129 on stmt: $276binary_subtract.21 = k - $274binary_multiply.20
DEBUG 2022-02-07 18:03:07,129 on stmt: $const278.22 = const(int, 1)
DEBUG 2022-02-07 18:03:07,129 on stmt: $280binary_subtract.23 = $276binary_subtract.21 - $const278.22
DEBUG 2022-02-07 18:03:07,129 on stmt: $282build_tuple.24 = build_tuple(items=[Var($266binary_subtract.16, _loop_hafnian_subroutines.py:180), Var($280binary_subtract.23, _loop_hafnian_subroutines.py:180)])
DEBUG 2022-02-07 18:03:07,129 on stmt: $284binary_subscr.25 = getitem(value=comb, index=$282build_tuple.24, fn=<built-in function getitem>)
DEBUG 2022-02-07 18:03:07,129 on stmt: $288binary_multiply.27 = $284binary_subscr.25 * powfactor.1
DEBUG 2022-02-07 18:03:07,129 on stmt: $290inplace_add.28 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$258binary_subscr.12, rhs=$288binary_multiply.27, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-07 18:03:07,129 on stmt: comb[$254build_tuple.9] = $290inplace_add.28
DEBUG 2022-02-07 18:03:07,129 on stmt: jump 240
DEBUG 2022-02-07 18:03:07,129 ==== SSA block rewrite pass on 298
DEBUG 2022-02-07 18:03:07,129 Running <numba.core.ssa._FreshVarHandler object at 0x00000196B023A820>
DEBUG 2022-02-07 18:03:07,129 on stmt: jump 202
DEBUG 2022-02-07 18:03:07,129 ==== SSA block rewrite pass on 300
DEBUG 2022-02-07 18:03:07,129 Running <numba.core.ssa._FreshVarHandler object at 0x00000196B023A820>
DEBUG 2022-02-07 18:03:07,129 on stmt: jump 60
DEBUG 2022-02-07 18:03:07,129 ==== SSA block rewrite pass on 302
DEBUG 2022-02-07 18:03:07,129 Running <numba.core.ssa._FreshVarHandler object at 0x00000196B023A820>
DEBUG 2022-02-07 18:03:07,129 on stmt: $const306.2 = const(NoneType, None)
DEBUG 2022-02-07 18:03:07,129 on stmt: $const308.3 = const(NoneType, None)
DEBUG 2022-02-07 18:03:07,144 on stmt: $310build_slice.4 = global(slice: <class 'slice'>)
DEBUG 2022-02-07 18:03:07,144 on stmt: $310build_slice.5 = call $310build_slice.4($const306.2, $const308.3, func=$310build_slice.4, args=(Var($const306.2, _loop_hafnian_subroutines.py:182), Var($const308.3, _loop_hafnian_subroutines.py:182)), kws=(), vararg=None, target=None)
DEBUG 2022-02-07 18:03:07,144 on stmt: $312build_tuple.6 = build_tuple(items=[Var(count, _loop_hafnian_subroutines.py:161), Var($310build_slice.5, _loop_hafnian_subroutines.py:182)])
DEBUG 2022-02-07 18:03:07,144 on stmt: $314binary_subscr.7 = getitem(value=comb, index=$312build_tuple.6, fn=<built-in function getitem>)
DEBUG 2022-02-07 18:03:07,144 on stmt: $316return_value.8 = cast(value=$314binary_subscr.7)
DEBUG 2022-02-07 18:03:07,144 on stmt: return $316return_value.8
DEBUG 2022-02-07 18:03:07,144 Replaced assignments: defaultdict(<class 'list'>,
            {0: [<numba.core.ir.Assign object at 0x00000196AF22D550>],
             90: [<numba.core.ir.Assign object at 0x00000196AF20FBE0>]})
DEBUG 2022-02-07 18:03:07,144 ==== SSA block rewrite pass on 0
DEBUG 2022-02-07 18:03:07,144 Running <numba.core.ssa._FixSSAVars object at 0x00000196B023DEB0>
DEBUG 2022-02-07 18:03:07,144 on stmt: E = arg(0, name=E)
DEBUG 2022-02-07 18:03:07,144 on stmt: AX_S = arg(1, name=AX_S)
DEBUG 2022-02-07 18:03:07,144 on stmt: XD_S = arg(2, name=XD_S)
DEBUG 2022-02-07 18:03:07,144 on stmt: D_S = arg(3, name=D_S)
DEBUG 2022-02-07 18:03:07,144 on stmt: n = arg(4, name=n)
DEBUG 2022-02-07 18:03:07,144 on stmt: oddloop = arg(5, name=oddloop)
DEBUG 2022-02-07 18:03:07,144 on stmt: oddVX_S = arg(6, name=oddVX_S)
DEBUG 2022-02-07 18:03:07,144 on stmt: $4load_method.1 = getattr(value=E, attr=copy)
DEBUG 2022-02-07 18:03:07,144 on stmt: E_k = call $4load_method.1(func=$4load_method.1, args=[], kws=(), vararg=None, target=None)
DEBUG 2022-02-07 18:03:07,144 on stmt: count = const(int, 0)
DEBUG 2022-02-07 18:03:07,144 on stmt: $14load_global.4 = global(np: <module 'numpy' from 'C:\\Users\\zl4821\\Anaconda3\\envs\\GBS\\lib\\site-packages\\numpy\\__init__.py'>)
DEBUG 2022-02-07 18:03:07,144 on stmt: $16load_attr.5 = getattr(value=$14load_global.4, attr=zeros)
DEBUG 2022-02-07 18:03:07,144 on stmt: $const18.6 = const(int, 2)
DEBUG 2022-02-07 18:03:07,144 on stmt: $const22.8 = const(int, 1)
DEBUG 2022-02-07 18:03:07,144 on stmt: $24binary_add.9 = n + $const22.8
DEBUG 2022-02-07 18:03:07,144 on stmt: $26build_tuple.10 = build_tuple(items=[Var($const18.6, _loop_hafnian_subroutines.py:162), Var($24binary_add.9, _loop_hafnian_subroutines.py:162)])
DEBUG 2022-02-07 18:03:07,144 on stmt: $28load_global.11 = global(np: <module 'numpy' from 'C:\\Users\\zl4821\\Anaconda3\\envs\\GBS\\lib\\site-packages\\numpy\\__init__.py'>)
DEBUG 2022-02-07 18:03:07,144 on stmt: $30load_attr.12 = getattr(value=$28load_global.11, attr=complex128)
DEBUG 2022-02-07 18:03:07,144 on stmt: comb = call $16load_attr.5($26build_tuple.10, func=$16load_attr.5, args=[Var($26build_tuple.10, _loop_hafnian_subroutines.py:162)], kws=[('dtype', Var($30load_attr.12, _loop_hafnian_subroutines.py:162))], vararg=None, target=None)
DEBUG 2022-02-07 18:03:07,144 on stmt: $const38.15 = const(int, 1)
DEBUG 2022-02-07 18:03:07,144 on stmt: $const_0 = const(int, 0)
DEBUG 2022-02-07 18:03:07,144 on stmt: $const_0.1 = const(int, 0)
DEBUG 2022-02-07 18:03:07,144 on stmt: $const42.17 = build_tuple(items=[Var($const_0, _loop_hafnian_subroutines.py:163), Var($const_0.1, _loop_hafnian_subroutines.py:163)])
DEBUG 2022-02-07 18:03:07,151 on stmt: comb[(0, 0)] = $const38.15
DEBUG 2022-02-07 18:03:07,151 on stmt: $46load_global.18 = global(range: <class 'range'>)
DEBUG 2022-02-07 18:03:07,151 on stmt: $const48.19 = const(int, 1)
DEBUG 2022-02-07 18:03:07,151 on stmt: $const52.21 = const(int, 1)
DEBUG 2022-02-07 18:03:07,151 on stmt: $54binary_add.22 = n + $const52.21
DEBUG 2022-02-07 18:03:07,151 on stmt: $56call_function.23 = call $46load_global.18($const48.19, $54binary_add.22, func=$46load_global.18, args=[Var($const48.19, _loop_hafnian_subroutines.py:164), Var($54binary_add.22, _loop_hafnian_subroutines.py:164)], kws=(), vararg=None, target=None)
DEBUG 2022-02-07 18:03:07,151 on stmt: $58get_iter.24 = getiter(value=$56call_function.23)
DEBUG 2022-02-07 18:03:07,151 on stmt: $phi60.0 = $58get_iter.24
DEBUG 2022-02-07 18:03:07,151 on stmt: jump 60
DEBUG 2022-02-07 18:03:07,151 ==== SSA block rewrite pass on 60
DEBUG 2022-02-07 18:03:07,151 Running <numba.core.ssa._FixSSAVars object at 0x00000196B023DEB0>
DEBUG 2022-02-07 18:03:07,151 on stmt: D_S.2 = phi(incoming_values=[Var(D_S, _loop_hafnian_subroutines.py:159), Var(D_S.3, _loop_hafnian_subroutines.py:168)], incoming_blocks=[0, 300])
DEBUG 2022-02-07 18:03:07,151 on stmt: $60for_iter.1 = iternext(value=$phi60.0)
DEBUG 2022-02-07 18:03:07,151 on stmt: $60for_iter.2 = pair_first(value=$60for_iter.1)
DEBUG 2022-02-07 18:03:07,151 on stmt: $60for_iter.3 = pair_second(value=$60for_iter.1)
DEBUG 2022-02-07 18:03:07,151 on stmt: $phi62.1 = $60for_iter.2
DEBUG 2022-02-07 18:03:07,151 on stmt: branch $60for_iter.3, 62, 302
DEBUG 2022-02-07 18:03:07,151 ==== SSA block rewrite pass on 62
DEBUG 2022-02-07 18:03:07,151 Running <numba.core.ssa._FixSSAVars object at 0x00000196B023DEB0>
DEBUG 2022-02-07 18:03:07,151 on stmt: i = $phi62.1
DEBUG 2022-02-07 18:03:07,151 on stmt: $const66.3 = const(int, 1)
DEBUG 2022-02-07 18:03:07,151 on stmt: $68compare_op.4 = i == $const66.3
DEBUG 2022-02-07 18:03:07,151 on stmt: bool70 = global(bool: <class 'bool'>)
DEBUG 2022-02-07 18:03:07,151 on stmt: $70pred = call bool70($68compare_op.4, func=bool70, args=(Var($68compare_op.4, _loop_hafnian_subroutines.py:165),), kws=(), vararg=None, target=None)
DEBUG 2022-02-07 18:03:07,151 on stmt: branch $70pred, 72, 78
DEBUG 2022-02-07 18:03:07,151 ==== SSA block rewrite pass on 72
DEBUG 2022-02-07 18:03:07,151 Running <numba.core.ssa._FixSSAVars object at 0x00000196B023DEB0>
DEBUG 2022-02-07 18:03:07,151 on stmt: factor = oddloop
DEBUG 2022-02-07 18:03:07,151 on stmt: jump 140
DEBUG 2022-02-07 18:03:07,151 ==== SSA block rewrite pass on 78
DEBUG 2022-02-07 18:03:07,151 Running <numba.core.ssa._FixSSAVars object at 0x00000196B023DEB0>
DEBUG 2022-02-07 18:03:07,151 on stmt: $const80.2 = const(int, 2)
DEBUG 2022-02-07 18:03:07,151 on stmt: $82binary_modulo.3 = i % $const80.2
DEBUG 2022-02-07 18:03:07,151 on stmt: $const84.4 = const(int, 0)
DEBUG 2022-02-07 18:03:07,151 on stmt: $86compare_op.5 = $82binary_modulo.3 == $const84.4
DEBUG 2022-02-07 18:03:07,151 on stmt: bool88 = global(bool: <class 'bool'>)
DEBUG 2022-02-07 18:03:07,151 on stmt: $88pred = call bool88($86compare_op.5, func=bool88, args=(Var($86compare_op.5, _loop_hafnian_subroutines.py:167),), kws=(), vararg=None, target=None)
DEBUG 2022-02-07 18:03:07,151 on stmt: branch $88pred, 90, 124
DEBUG 2022-02-07 18:03:07,151 ==== SSA block rewrite pass on 90
DEBUG 2022-02-07 18:03:07,151 Running <numba.core.ssa._FixSSAVars object at 0x00000196B023DEB0>
DEBUG 2022-02-07 18:03:07,151 on stmt: $92load_method.2 = getattr(value=E_k, attr=sum)
DEBUG 2022-02-07 18:03:07,151 find_def var='E_k' stmt=$92load_method.2 = getattr(value=E_k, attr=sum)
DEBUG 2022-02-07 18:03:07,151 find_def_from_top label 90
DEBUG 2022-02-07 18:03:07,151 idom 78 from label 90
DEBUG 2022-02-07 18:03:07,151 find_def_from_bottom label 78
DEBUG 2022-02-07 18:03:07,151 find_def_from_top label 78
DEBUG 2022-02-07 18:03:07,151 idom 62 from label 78
DEBUG 2022-02-07 18:03:07,151 find_def_from_bottom label 62
DEBUG 2022-02-07 18:03:07,151 find_def_from_top label 62
DEBUG 2022-02-07 18:03:07,151 idom 60 from label 62
DEBUG 2022-02-07 18:03:07,151 find_def_from_bottom label 60
DEBUG 2022-02-07 18:03:07,151 find_def_from_top label 60
DEBUG 2022-02-07 18:03:07,151 insert phi node E_k.2 = phi(incoming_values=[], incoming_blocks=[]) at 60
DEBUG 2022-02-07 18:03:07,151 find_def_from_bottom label 0
DEBUG 2022-02-07 18:03:07,151 incoming_def E_k = call $4load_method.1(func=$4load_method.1, args=[], kws=(), vararg=None, target=None)
DEBUG 2022-02-07 18:03:07,151 find_def_from_bottom label 300
DEBUG 2022-02-07 18:03:07,151 find_def_from_top label 300
DEBUG 2022-02-07 18:03:07,151 idom 202 from label 300
DEBUG 2022-02-07 18:03:07,151 find_def_from_bottom label 202
DEBUG 2022-02-07 18:03:07,151 find_def_from_top label 202
DEBUG 2022-02-07 18:03:07,151 idom 140 from label 202
DEBUG 2022-02-07 18:03:07,151 find_def_from_bottom label 140
DEBUG 2022-02-07 18:03:07,151 find_def_from_top label 140
DEBUG 2022-02-07 18:03:07,151 insert phi node E_k.3 = phi(incoming_values=[], incoming_blocks=[]) at 140
DEBUG 2022-02-07 18:03:07,151 find_def_from_bottom label 72
DEBUG 2022-02-07 18:03:07,151 find_def_from_top label 72
DEBUG 2022-02-07 18:03:07,151 idom 62 from label 72
DEBUG 2022-02-07 18:03:07,151 find_def_from_bottom label 62
DEBUG 2022-02-07 18:03:07,151 find_def_from_top label 62
DEBUG 2022-02-07 18:03:07,151 idom 60 from label 62
DEBUG 2022-02-07 18:03:07,151 find_def_from_bottom label 60
DEBUG 2022-02-07 18:03:07,151 incoming_def E_k.2 = phi(incoming_values=[Var(E_k, _loop_hafnian_subroutines.py:159)], incoming_blocks=[0])
DEBUG 2022-02-07 18:03:07,151 find_def_from_bottom label 90
DEBUG 2022-02-07 18:03:07,151 incoming_def E_k.1 = $118inplace_multiply.14
DEBUG 2022-02-07 18:03:07,151 find_def_from_bottom label 124
DEBUG 2022-02-07 18:03:07,151 find_def_from_top label 124
DEBUG 2022-02-07 18:03:07,151 idom 78 from label 124
DEBUG 2022-02-07 18:03:07,151 find_def_from_bottom label 78
DEBUG 2022-02-07 18:03:07,151 find_def_from_top label 78
DEBUG 2022-02-07 18:03:07,151 idom 62 from label 78
DEBUG 2022-02-07 18:03:07,151 find_def_from_bottom label 62
DEBUG 2022-02-07 18:03:07,151 find_def_from_top label 62
DEBUG 2022-02-07 18:03:07,151 idom 60 from label 62
DEBUG 2022-02-07 18:03:07,151 find_def_from_bottom label 60
DEBUG 2022-02-07 18:03:07,151 incoming_def E_k.2 = phi(incoming_values=[Var(E_k, _loop_hafnian_subroutines.py:159)], incoming_blocks=[0])
DEBUG 2022-02-07 18:03:07,151 incoming_def E_k.3 = phi(incoming_values=[Var(E_k.2, _loop_hafnian_subroutines.py:168), Var(E_k.1, _loop_hafnian_subroutines.py:169), Var(E_k.2, _loop_hafnian_subroutines.py:168)], incoming_blocks=[72, 90, 124])
DEBUG 2022-02-07 18:03:07,151 replaced with: $92load_method.2 = getattr(value=E_k.2, attr=sum)
DEBUG 2022-02-07 18:03:07,151 on stmt: $94call_method.3 = call $92load_method.2(func=$92load_method.2, args=[], kws=(), vararg=None, target=None)
DEBUG 2022-02-07 18:03:07,151 on stmt: $98binary_true_divide.5 = $94call_method.3 / i
DEBUG 2022-02-07 18:03:07,151 on stmt: $104binary_matrix_multiply.8 = XD_S <built-in function matmul> D_S.2
DEBUG 2022-02-07 18:03:07,151 on stmt: $const106.9 = const(int, 2)
DEBUG 2022-02-07 18:03:07,151 on stmt: $108binary_true_divide.10 = $104binary_matrix_multiply.8 / $const106.9
DEBUG 2022-02-07 18:03:07,166 on stmt: factor = $98binary_true_divide.5 + $108binary_true_divide.10
DEBUG 2022-02-07 18:03:07,166 on stmt: $118inplace_multiply.14 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=E_k, rhs=E, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-07 18:03:07,166 find_def var='E_k' stmt=$118inplace_multiply.14 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=E_k, rhs=E, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-07 18:03:07,166 find_def_from_top label 90
DEBUG 2022-02-07 18:03:07,166 idom 78 from label 90
DEBUG 2022-02-07 18:03:07,166 find_def_from_bottom label 78
DEBUG 2022-02-07 18:03:07,166 find_def_from_top label 78
DEBUG 2022-02-07 18:03:07,166 idom 62 from label 78
DEBUG 2022-02-07 18:03:07,166 find_def_from_bottom label 62
DEBUG 2022-02-07 18:03:07,166 find_def_from_top label 62
DEBUG 2022-02-07 18:03:07,166 idom 60 from label 62
DEBUG 2022-02-07 18:03:07,166 find_def_from_bottom label 60
DEBUG 2022-02-07 18:03:07,166 replaced with: $118inplace_multiply.14 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=E_k.2, rhs=E, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-07 18:03:07,166 on stmt: E_k.1 = $118inplace_multiply.14
DEBUG 2022-02-07 18:03:07,166 on stmt: jump 140
DEBUG 2022-02-07 18:03:07,166 ==== SSA block rewrite pass on 124
DEBUG 2022-02-07 18:03:07,166 Running <numba.core.ssa._FixSSAVars object at 0x00000196B023DEB0>
DEBUG 2022-02-07 18:03:07,166 on stmt: factor = oddVX_S <built-in function matmul> D_S.2
DEBUG 2022-02-07 18:03:07,166 on stmt: $136binary_matrix_multiply.6 = AX_S <built-in function matmul> D_S.2
DEBUG 2022-02-07 18:03:07,166 on stmt: D_S.1 = $136binary_matrix_multiply.6
DEBUG 2022-02-07 18:03:07,166 on stmt: jump 140
DEBUG 2022-02-07 18:03:07,166 ==== SSA block rewrite pass on 140
DEBUG 2022-02-07 18:03:07,166 Running <numba.core.ssa._FixSSAVars object at 0x00000196B023DEB0>
DEBUG 2022-02-07 18:03:07,166 on stmt: D_S.3 = phi(incoming_values=[Var(D_S.2, _loop_hafnian_subroutines.py:168), Var(D_S.2, _loop_hafnian_subroutines.py:168), Var(D_S.1, _loop_hafnian_subroutines.py:172)], incoming_blocks=[72, 90, 124])
DEBUG 2022-02-07 18:03:07,166 on stmt: powfactor = const(int, 1)
DEBUG 2022-02-07 18:03:07,166 on stmt: $const144.2 = const(int, 1)
DEBUG 2022-02-07 18:03:07,166 on stmt: $148binary_subtract.4 = $const144.2 - count
DEBUG 2022-02-07 18:03:07,166 on stmt: count = $148binary_subtract.4
DEBUG 2022-02-07 18:03:07,166 on stmt: $const154.6 = const(int, 1)
DEBUG 2022-02-07 18:03:07,166 on stmt: $158binary_subtract.8 = $const154.6 - count
DEBUG 2022-02-07 18:03:07,166 on stmt: $const160.9 = const(NoneType, None)
DEBUG 2022-02-07 18:03:07,166 on stmt: $const162.10 = const(NoneType, None)
DEBUG 2022-02-07 18:03:07,166 on stmt: $164build_slice.11 = global(slice: <class 'slice'>)
DEBUG 2022-02-07 18:03:07,166 on stmt: $164build_slice.12 = call $164build_slice.11($const160.9, $const162.10, func=$164build_slice.11, args=(Var($const160.9, _loop_hafnian_subroutines.py:176), Var($const162.10, _loop_hafnian_subroutines.py:176)), kws=(), vararg=None, target=None)
DEBUG 2022-02-07 18:03:07,166 on stmt: $166build_tuple.13 = build_tuple(items=[Var($158binary_subtract.8, _loop_hafnian_subroutines.py:176), Var($164build_slice.12, _loop_hafnian_subroutines.py:176)])
DEBUG 2022-02-07 18:03:07,166 on stmt: $168binary_subscr.14 = getitem(value=comb, index=$166build_tuple.13, fn=<built-in function getitem>)
DEBUG 2022-02-07 18:03:07,166 on stmt: $const174.17 = const(NoneType, None)
DEBUG 2022-02-07 18:03:07,166 on stmt: $const176.18 = const(NoneType, None)
DEBUG 2022-02-07 18:03:07,166 on stmt: $178build_slice.19 = global(slice: <class 'slice'>)
DEBUG 2022-02-07 18:03:07,166 on stmt: $178build_slice.20 = call $178build_slice.19($const174.17, $const176.18, func=$178build_slice.19, args=(Var($const174.17, _loop_hafnian_subroutines.py:176), Var($const176.18, _loop_hafnian_subroutines.py:176)), kws=(), vararg=None, target=None)
DEBUG 2022-02-07 18:03:07,166 on stmt: $180build_tuple.21 = build_tuple(items=[Var(count, _loop_hafnian_subroutines.py:161), Var($178build_slice.20, _loop_hafnian_subroutines.py:176)])
DEBUG 2022-02-07 18:03:07,166 on stmt: comb[$180build_tuple.21] = $168binary_subscr.14
DEBUG 2022-02-07 18:03:07,166 on stmt: $184load_global.22 = global(range: <class 'range'>)
DEBUG 2022-02-07 18:03:07,166 on stmt: $const186.23 = const(int, 1)
DEBUG 2022-02-07 18:03:07,166 on stmt: $192binary_floor_divide.26 = n // i
DEBUG 2022-02-07 18:03:07,166 on stmt: $const194.27 = const(int, 1)
DEBUG 2022-02-07 18:03:07,166 on stmt: $196binary_add.28 = $192binary_floor_divide.26 + $const194.27
DEBUG 2022-02-07 18:03:07,166 on stmt: $198call_function.29 = call $184load_global.22($const186.23, $196binary_add.28, func=$184load_global.22, args=[Var($const186.23, _loop_hafnian_subroutines.py:177), Var($196binary_add.28, _loop_hafnian_subroutines.py:177)], kws=(), vararg=None, target=None)
DEBUG 2022-02-07 18:03:07,166 on stmt: $200get_iter.30 = getiter(value=$198call_function.29)
DEBUG 2022-02-07 18:03:07,166 on stmt: $phi202.1 = $200get_iter.30
DEBUG 2022-02-07 18:03:07,166 on stmt: jump 202
DEBUG 2022-02-07 18:03:07,166 ==== SSA block rewrite pass on 202
DEBUG 2022-02-07 18:03:07,166 Running <numba.core.ssa._FixSSAVars object at 0x00000196B023DEB0>
DEBUG 2022-02-07 18:03:07,166 on stmt: powfactor.2 = phi(incoming_values=[Var(powfactor.1, _loop_hafnian_subroutines.py:178), Var(powfactor, _loop_hafnian_subroutines.py:174)], incoming_blocks=[298, 140])
DEBUG 2022-02-07 18:03:07,166 on stmt: $202for_iter.2 = iternext(value=$phi202.1)
DEBUG 2022-02-07 18:03:07,166 on stmt: $202for_iter.3 = pair_first(value=$202for_iter.2)
DEBUG 2022-02-07 18:03:07,166 on stmt: $202for_iter.4 = pair_second(value=$202for_iter.2)
DEBUG 2022-02-07 18:03:07,166 on stmt: $phi204.2 = $202for_iter.3
DEBUG 2022-02-07 18:03:07,166 on stmt: branch $202for_iter.4, 204, 300
DEBUG 2022-02-07 18:03:07,166 ==== SSA block rewrite pass on 204
DEBUG 2022-02-07 18:03:07,166 Running <numba.core.ssa._FixSSAVars object at 0x00000196B023DEB0>
DEBUG 2022-02-07 18:03:07,166 on stmt: j = $phi204.2
DEBUG 2022-02-07 18:03:07,166 on stmt: $212binary_true_divide.6 = factor / j
DEBUG 2022-02-07 18:03:07,166 on stmt: $214inplace_multiply.7 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=powfactor.2, rhs=$212binary_true_divide.6, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-07 18:03:07,166 on stmt: powfactor.1 = $214inplace_multiply.7
DEBUG 2022-02-07 18:03:07,166 on stmt: $218load_global.8 = global(range: <class 'range'>)
DEBUG 2022-02-07 18:03:07,166 on stmt: $224binary_multiply.11 = i * j
DEBUG 2022-02-07 18:03:07,166 on stmt: $const226.12 = const(int, 1)
DEBUG 2022-02-07 18:03:07,166 on stmt: $228binary_add.13 = $224binary_multiply.11 + $const226.12
DEBUG 2022-02-07 18:03:07,166 on stmt: $const232.15 = const(int, 2)
DEBUG 2022-02-07 18:03:07,166 on stmt: $234binary_add.16 = n + $const232.15
DEBUG 2022-02-07 18:03:07,166 on stmt: $236call_function.17 = call $218load_global.8($228binary_add.13, $234binary_add.16, func=$218load_global.8, args=[Var($228binary_add.13, _loop_hafnian_subroutines.py:179), Var($234binary_add.16, _loop_hafnian_subroutines.py:179)], kws=(), vararg=None, target=None)
DEBUG 2022-02-07 18:03:07,166 on stmt: $238get_iter.18 = getiter(value=$236call_function.17)
DEBUG 2022-02-07 18:03:07,166 on stmt: $phi240.2 = $238get_iter.18
DEBUG 2022-02-07 18:03:07,166 on stmt: jump 240
DEBUG 2022-02-07 18:03:07,166 ==== SSA block rewrite pass on 240
DEBUG 2022-02-07 18:03:07,166 Running <numba.core.ssa._FixSSAVars object at 0x00000196B023DEB0>
DEBUG 2022-02-07 18:03:07,182 on stmt: $240for_iter.3 = iternext(value=$phi240.2)
DEBUG 2022-02-07 18:03:07,182 on stmt: $240for_iter.4 = pair_first(value=$240for_iter.3)
DEBUG 2022-02-07 18:03:07,182 on stmt: $240for_iter.5 = pair_second(value=$240for_iter.3)
DEBUG 2022-02-07 18:03:07,182 on stmt: $phi242.3 = $240for_iter.4
DEBUG 2022-02-07 18:03:07,182 on stmt: branch $240for_iter.5, 242, 298
DEBUG 2022-02-07 18:03:07,182 ==== SSA block rewrite pass on 242
DEBUG 2022-02-07 18:03:07,182 Running <numba.core.ssa._FixSSAVars object at 0x00000196B023DEB0>
DEBUG 2022-02-07 18:03:07,182 on stmt: k = $phi242.3
DEBUG 2022-02-07 18:03:07,182 on stmt: $const250.7 = const(int, 1)
DEBUG 2022-02-07 18:03:07,182 on stmt: $252binary_subtract.8 = k - $const250.7
DEBUG 2022-02-07 18:03:07,182 on stmt: $254build_tuple.9 = build_tuple(items=[Var(count, _loop_hafnian_subroutines.py:161), Var($252binary_subtract.8, _loop_hafnian_subroutines.py:180)])
DEBUG 2022-02-07 18:03:07,182 on stmt: $258binary_subscr.12 = getitem(value=comb, index=$254build_tuple.9, fn=<built-in function getitem>)
DEBUG 2022-02-07 18:03:07,182 on stmt: $const262.14 = const(int, 1)
DEBUG 2022-02-07 18:03:07,182 on stmt: $266binary_subtract.16 = $const262.14 - count
DEBUG 2022-02-07 18:03:07,182 on stmt: $274binary_multiply.20 = i * j
DEBUG 2022-02-07 18:03:07,182 on stmt: $276binary_subtract.21 = k - $274binary_multiply.20
DEBUG 2022-02-07 18:03:07,182 on stmt: $const278.22 = const(int, 1)
DEBUG 2022-02-07 18:03:07,182 on stmt: $280binary_subtract.23 = $276binary_subtract.21 - $const278.22
DEBUG 2022-02-07 18:03:07,182 on stmt: $282build_tuple.24 = build_tuple(items=[Var($266binary_subtract.16, _loop_hafnian_subroutines.py:180), Var($280binary_subtract.23, _loop_hafnian_subroutines.py:180)])
DEBUG 2022-02-07 18:03:07,182 on stmt: $284binary_subscr.25 = getitem(value=comb, index=$282build_tuple.24, fn=<built-in function getitem>)
DEBUG 2022-02-07 18:03:07,182 on stmt: $288binary_multiply.27 = $284binary_subscr.25 * powfactor.1
DEBUG 2022-02-07 18:03:07,182 on stmt: $290inplace_add.28 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$258binary_subscr.12, rhs=$288binary_multiply.27, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-07 18:03:07,182 on stmt: comb[$254build_tuple.9] = $290inplace_add.28
DEBUG 2022-02-07 18:03:07,182 on stmt: jump 240
DEBUG 2022-02-07 18:03:07,182 ==== SSA block rewrite pass on 298
DEBUG 2022-02-07 18:03:07,182 Running <numba.core.ssa._FixSSAVars object at 0x00000196B023DEB0>
DEBUG 2022-02-07 18:03:07,182 on stmt: jump 202
DEBUG 2022-02-07 18:03:07,182 ==== SSA block rewrite pass on 300
DEBUG 2022-02-07 18:03:07,182 Running <numba.core.ssa._FixSSAVars object at 0x00000196B023DEB0>
DEBUG 2022-02-07 18:03:07,182 on stmt: jump 60
DEBUG 2022-02-07 18:03:07,182 ==== SSA block rewrite pass on 302
DEBUG 2022-02-07 18:03:07,182 Running <numba.core.ssa._FixSSAVars object at 0x00000196B023DEB0>
DEBUG 2022-02-07 18:03:07,182 on stmt: $const306.2 = const(NoneType, None)
DEBUG 2022-02-07 18:03:07,182 on stmt: $const308.3 = const(NoneType, None)
DEBUG 2022-02-07 18:03:07,182 on stmt: $310build_slice.4 = global(slice: <class 'slice'>)
DEBUG 2022-02-07 18:03:07,182 on stmt: $310build_slice.5 = call $310build_slice.4($const306.2, $const308.3, func=$310build_slice.4, args=(Var($const306.2, _loop_hafnian_subroutines.py:182), Var($const308.3, _loop_hafnian_subroutines.py:182)), kws=(), vararg=None, target=None)
DEBUG 2022-02-07 18:03:07,182 on stmt: $312build_tuple.6 = build_tuple(items=[Var(count, _loop_hafnian_subroutines.py:161), Var($310build_slice.5, _loop_hafnian_subroutines.py:182)])
DEBUG 2022-02-07 18:03:07,182 on stmt: $314binary_subscr.7 = getitem(value=comb, index=$312build_tuple.6, fn=<built-in function getitem>)
DEBUG 2022-02-07 18:03:07,182 on stmt: $316return_value.8 = cast(value=$314binary_subscr.7)
DEBUG 2022-02-07 18:03:07,182 on stmt: return $316return_value.8
DEBUG 2022-02-07 18:03:07,182 Fix SSA violator on var factor
DEBUG 2022-02-07 18:03:07,182 ==== SSA block rewrite pass on 0
DEBUG 2022-02-07 18:03:07,182 Running <numba.core.ssa._FreshVarHandler object at 0x00000196AF20FC70>
DEBUG 2022-02-07 18:03:07,182 on stmt: E = arg(0, name=E)
DEBUG 2022-02-07 18:03:07,182 on stmt: AX_S = arg(1, name=AX_S)
DEBUG 2022-02-07 18:03:07,182 on stmt: XD_S = arg(2, name=XD_S)
DEBUG 2022-02-07 18:03:07,182 on stmt: D_S = arg(3, name=D_S)
DEBUG 2022-02-07 18:03:07,182 on stmt: n = arg(4, name=n)
DEBUG 2022-02-07 18:03:07,182 on stmt: oddloop = arg(5, name=oddloop)
DEBUG 2022-02-07 18:03:07,182 on stmt: oddVX_S = arg(6, name=oddVX_S)
DEBUG 2022-02-07 18:03:07,182 on stmt: $4load_method.1 = getattr(value=E, attr=copy)
DEBUG 2022-02-07 18:03:07,182 on stmt: E_k = call $4load_method.1(func=$4load_method.1, args=[], kws=(), vararg=None, target=None)
DEBUG 2022-02-07 18:03:07,182 on stmt: count = const(int, 0)
DEBUG 2022-02-07 18:03:07,182 on stmt: $14load_global.4 = global(np: <module 'numpy' from 'C:\\Users\\zl4821\\Anaconda3\\envs\\GBS\\lib\\site-packages\\numpy\\__init__.py'>)
DEBUG 2022-02-07 18:03:07,182 on stmt: $16load_attr.5 = getattr(value=$14load_global.4, attr=zeros)
DEBUG 2022-02-07 18:03:07,182 on stmt: $const18.6 = const(int, 2)
DEBUG 2022-02-07 18:03:07,182 on stmt: $const22.8 = const(int, 1)
DEBUG 2022-02-07 18:03:07,182 on stmt: $24binary_add.9 = n + $const22.8
DEBUG 2022-02-07 18:03:07,182 on stmt: $26build_tuple.10 = build_tuple(items=[Var($const18.6, _loop_hafnian_subroutines.py:162), Var($24binary_add.9, _loop_hafnian_subroutines.py:162)])
DEBUG 2022-02-07 18:03:07,182 on stmt: $28load_global.11 = global(np: <module 'numpy' from 'C:\\Users\\zl4821\\Anaconda3\\envs\\GBS\\lib\\site-packages\\numpy\\__init__.py'>)
DEBUG 2022-02-07 18:03:07,182 on stmt: $30load_attr.12 = getattr(value=$28load_global.11, attr=complex128)
DEBUG 2022-02-07 18:03:07,182 on stmt: comb = call $16load_attr.5($26build_tuple.10, func=$16load_attr.5, args=[Var($26build_tuple.10, _loop_hafnian_subroutines.py:162)], kws=[('dtype', Var($30load_attr.12, _loop_hafnian_subroutines.py:162))], vararg=None, target=None)
DEBUG 2022-02-07 18:03:07,182 on stmt: $const38.15 = const(int, 1)
DEBUG 2022-02-07 18:03:07,182 on stmt: $const_0 = const(int, 0)
DEBUG 2022-02-07 18:03:07,182 on stmt: $const_0.1 = const(int, 0)
DEBUG 2022-02-07 18:03:07,182 on stmt: $const42.17 = build_tuple(items=[Var($const_0, _loop_hafnian_subroutines.py:163), Var($const_0.1, _loop_hafnian_subroutines.py:163)])
DEBUG 2022-02-07 18:03:07,182 on stmt: comb[(0, 0)] = $const38.15
DEBUG 2022-02-07 18:03:07,182 on stmt: $46load_global.18 = global(range: <class 'range'>)
DEBUG 2022-02-07 18:03:07,182 on stmt: $const48.19 = const(int, 1)
DEBUG 2022-02-07 18:03:07,182 on stmt: $const52.21 = const(int, 1)
DEBUG 2022-02-07 18:03:07,182 on stmt: $54binary_add.22 = n + $const52.21
DEBUG 2022-02-07 18:03:07,182 on stmt: $56call_function.23 = call $46load_global.18($const48.19, $54binary_add.22, func=$46load_global.18, args=[Var($const48.19, _loop_hafnian_subroutines.py:164), Var($54binary_add.22, _loop_hafnian_subroutines.py:164)], kws=(), vararg=None, target=None)
DEBUG 2022-02-07 18:03:07,182 on stmt: $58get_iter.24 = getiter(value=$56call_function.23)
DEBUG 2022-02-07 18:03:07,182 on stmt: $phi60.0 = $58get_iter.24
DEBUG 2022-02-07 18:03:07,182 on stmt: jump 60
DEBUG 2022-02-07 18:03:07,182 ==== SSA block rewrite pass on 60
DEBUG 2022-02-07 18:03:07,182 Running <numba.core.ssa._FreshVarHandler object at 0x00000196AF20FC70>
DEBUG 2022-02-07 18:03:07,182 on stmt: E_k.2 = phi(incoming_values=[Var(E_k, _loop_hafnian_subroutines.py:159), Var(E_k.3, _loop_hafnian_subroutines.py:168)], incoming_blocks=[0, 300])
DEBUG 2022-02-07 18:03:07,182 on stmt: D_S.2 = phi(incoming_values=[Var(D_S, _loop_hafnian_subroutines.py:159), Var(D_S.3, _loop_hafnian_subroutines.py:168)], incoming_blocks=[0, 300])
DEBUG 2022-02-07 18:03:07,198 on stmt: $60for_iter.1 = iternext(value=$phi60.0)
DEBUG 2022-02-07 18:03:07,198 on stmt: $60for_iter.2 = pair_first(value=$60for_iter.1)
DEBUG 2022-02-07 18:03:07,198 on stmt: $60for_iter.3 = pair_second(value=$60for_iter.1)
DEBUG 2022-02-07 18:03:07,198 on stmt: $phi62.1 = $60for_iter.2
DEBUG 2022-02-07 18:03:07,198 on stmt: branch $60for_iter.3, 62, 302
DEBUG 2022-02-07 18:03:07,198 ==== SSA block rewrite pass on 62
DEBUG 2022-02-07 18:03:07,198 Running <numba.core.ssa._FreshVarHandler object at 0x00000196AF20FC70>
DEBUG 2022-02-07 18:03:07,198 on stmt: i = $phi62.1
DEBUG 2022-02-07 18:03:07,198 on stmt: $const66.3 = const(int, 1)
DEBUG 2022-02-07 18:03:07,198 on stmt: $68compare_op.4 = i == $const66.3
DEBUG 2022-02-07 18:03:07,198 on stmt: bool70 = global(bool: <class 'bool'>)
DEBUG 2022-02-07 18:03:07,198 on stmt: $70pred = call bool70($68compare_op.4, func=bool70, args=(Var($68compare_op.4, _loop_hafnian_subroutines.py:165),), kws=(), vararg=None, target=None)
DEBUG 2022-02-07 18:03:07,198 on stmt: branch $70pred, 72, 78
DEBUG 2022-02-07 18:03:07,198 ==== SSA block rewrite pass on 72
DEBUG 2022-02-07 18:03:07,198 Running <numba.core.ssa._FreshVarHandler object at 0x00000196AF20FC70>
DEBUG 2022-02-07 18:03:07,198 on stmt: factor = oddloop
DEBUG 2022-02-07 18:03:07,198 first assign: factor
DEBUG 2022-02-07 18:03:07,198 replaced with: factor = oddloop
DEBUG 2022-02-07 18:03:07,198 on stmt: jump 140
DEBUG 2022-02-07 18:03:07,198 ==== SSA block rewrite pass on 78
DEBUG 2022-02-07 18:03:07,198 Running <numba.core.ssa._FreshVarHandler object at 0x00000196AF20FC70>
DEBUG 2022-02-07 18:03:07,198 on stmt: $const80.2 = const(int, 2)
DEBUG 2022-02-07 18:03:07,198 on stmt: $82binary_modulo.3 = i % $const80.2
DEBUG 2022-02-07 18:03:07,198 on stmt: $const84.4 = const(int, 0)
DEBUG 2022-02-07 18:03:07,198 on stmt: $86compare_op.5 = $82binary_modulo.3 == $const84.4
DEBUG 2022-02-07 18:03:07,198 on stmt: bool88 = global(bool: <class 'bool'>)
DEBUG 2022-02-07 18:03:07,198 on stmt: $88pred = call bool88($86compare_op.5, func=bool88, args=(Var($86compare_op.5, _loop_hafnian_subroutines.py:167),), kws=(), vararg=None, target=None)
DEBUG 2022-02-07 18:03:07,198 on stmt: branch $88pred, 90, 124
DEBUG 2022-02-07 18:03:07,198 ==== SSA block rewrite pass on 90
DEBUG 2022-02-07 18:03:07,198 Running <numba.core.ssa._FreshVarHandler object at 0x00000196AF20FC70>
DEBUG 2022-02-07 18:03:07,198 on stmt: $92load_method.2 = getattr(value=E_k.2, attr=sum)
DEBUG 2022-02-07 18:03:07,198 on stmt: $94call_method.3 = call $92load_method.2(func=$92load_method.2, args=[], kws=(), vararg=None, target=None)
DEBUG 2022-02-07 18:03:07,198 on stmt: $98binary_true_divide.5 = $94call_method.3 / i
DEBUG 2022-02-07 18:03:07,198 on stmt: $104binary_matrix_multiply.8 = XD_S <built-in function matmul> D_S.2
DEBUG 2022-02-07 18:03:07,198 on stmt: $const106.9 = const(int, 2)
DEBUG 2022-02-07 18:03:07,198 on stmt: $108binary_true_divide.10 = $104binary_matrix_multiply.8 / $const106.9
DEBUG 2022-02-07 18:03:07,198 on stmt: factor = $98binary_true_divide.5 + $108binary_true_divide.10
DEBUG 2022-02-07 18:03:07,198 replaced with: factor.1 = $98binary_true_divide.5 + $108binary_true_divide.10
DEBUG 2022-02-07 18:03:07,198 on stmt: $118inplace_multiply.14 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=E_k.2, rhs=E, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-07 18:03:07,198 on stmt: E_k.1 = $118inplace_multiply.14
DEBUG 2022-02-07 18:03:07,198 on stmt: jump 140
DEBUG 2022-02-07 18:03:07,198 ==== SSA block rewrite pass on 124
DEBUG 2022-02-07 18:03:07,198 Running <numba.core.ssa._FreshVarHandler object at 0x00000196AF20FC70>
DEBUG 2022-02-07 18:03:07,198 on stmt: factor = oddVX_S <built-in function matmul> D_S.2
DEBUG 2022-02-07 18:03:07,198 replaced with: factor.2 = oddVX_S <built-in function matmul> D_S.2
DEBUG 2022-02-07 18:03:07,198 on stmt: $136binary_matrix_multiply.6 = AX_S <built-in function matmul> D_S.2
DEBUG 2022-02-07 18:03:07,198 on stmt: D_S.1 = $136binary_matrix_multiply.6
DEBUG 2022-02-07 18:03:07,198 on stmt: jump 140
DEBUG 2022-02-07 18:03:07,198 ==== SSA block rewrite pass on 140
DEBUG 2022-02-07 18:03:07,198 Running <numba.core.ssa._FreshVarHandler object at 0x00000196AF20FC70>
DEBUG 2022-02-07 18:03:07,198 on stmt: E_k.3 = phi(incoming_values=[Var(E_k.2, _loop_hafnian_subroutines.py:168), Var(E_k.1, _loop_hafnian_subroutines.py:169), Var(E_k.2, _loop_hafnian_subroutines.py:168)], incoming_blocks=[72, 90, 124])
DEBUG 2022-02-07 18:03:07,198 on stmt: D_S.3 = phi(incoming_values=[Var(D_S.2, _loop_hafnian_subroutines.py:168), Var(D_S.2, _loop_hafnian_subroutines.py:168), Var(D_S.1, _loop_hafnian_subroutines.py:172)], incoming_blocks=[72, 90, 124])
DEBUG 2022-02-07 18:03:07,198 on stmt: powfactor = const(int, 1)
DEBUG 2022-02-07 18:03:07,198 on stmt: $const144.2 = const(int, 1)
DEBUG 2022-02-07 18:03:07,198 on stmt: $148binary_subtract.4 = $const144.2 - count
DEBUG 2022-02-07 18:03:07,198 on stmt: count = $148binary_subtract.4
DEBUG 2022-02-07 18:03:07,198 on stmt: $const154.6 = const(int, 1)
DEBUG 2022-02-07 18:03:07,198 on stmt: $158binary_subtract.8 = $const154.6 - count
DEBUG 2022-02-07 18:03:07,198 on stmt: $const160.9 = const(NoneType, None)
DEBUG 2022-02-07 18:03:07,198 on stmt: $const162.10 = const(NoneType, None)
DEBUG 2022-02-07 18:03:07,198 on stmt: $164build_slice.11 = global(slice: <class 'slice'>)
DEBUG 2022-02-07 18:03:07,198 on stmt: $164build_slice.12 = call $164build_slice.11($const160.9, $const162.10, func=$164build_slice.11, args=(Var($const160.9, _loop_hafnian_subroutines.py:176), Var($const162.10, _loop_hafnian_subroutines.py:176)), kws=(), vararg=None, target=None)
DEBUG 2022-02-07 18:03:07,198 on stmt: $166build_tuple.13 = build_tuple(items=[Var($158binary_subtract.8, _loop_hafnian_subroutines.py:176), Var($164build_slice.12, _loop_hafnian_subroutines.py:176)])
DEBUG 2022-02-07 18:03:07,198 on stmt: $168binary_subscr.14 = getitem(value=comb, index=$166build_tuple.13, fn=<built-in function getitem>)
DEBUG 2022-02-07 18:03:07,198 on stmt: $const174.17 = const(NoneType, None)
DEBUG 2022-02-07 18:03:07,198 on stmt: $const176.18 = const(NoneType, None)
DEBUG 2022-02-07 18:03:07,198 on stmt: $178build_slice.19 = global(slice: <class 'slice'>)
DEBUG 2022-02-07 18:03:07,198 on stmt: $178build_slice.20 = call $178build_slice.19($const174.17, $const176.18, func=$178build_slice.19, args=(Var($const174.17, _loop_hafnian_subroutines.py:176), Var($const176.18, _loop_hafnian_subroutines.py:176)), kws=(), vararg=None, target=None)
DEBUG 2022-02-07 18:03:07,198 on stmt: $180build_tuple.21 = build_tuple(items=[Var(count, _loop_hafnian_subroutines.py:161), Var($178build_slice.20, _loop_hafnian_subroutines.py:176)])
DEBUG 2022-02-07 18:03:07,198 on stmt: comb[$180build_tuple.21] = $168binary_subscr.14
DEBUG 2022-02-07 18:03:07,198 on stmt: $184load_global.22 = global(range: <class 'range'>)
DEBUG 2022-02-07 18:03:07,198 on stmt: $const186.23 = const(int, 1)
DEBUG 2022-02-07 18:03:07,198 on stmt: $192binary_floor_divide.26 = n // i
DEBUG 2022-02-07 18:03:07,198 on stmt: $const194.27 = const(int, 1)
DEBUG 2022-02-07 18:03:07,198 on stmt: $196binary_add.28 = $192binary_floor_divide.26 + $const194.27
DEBUG 2022-02-07 18:03:07,198 on stmt: $198call_function.29 = call $184load_global.22($const186.23, $196binary_add.28, func=$184load_global.22, args=[Var($const186.23, _loop_hafnian_subroutines.py:177), Var($196binary_add.28, _loop_hafnian_subroutines.py:177)], kws=(), vararg=None, target=None)
DEBUG 2022-02-07 18:03:07,198 on stmt: $200get_iter.30 = getiter(value=$198call_function.29)
DEBUG 2022-02-07 18:03:07,198 on stmt: $phi202.1 = $200get_iter.30
DEBUG 2022-02-07 18:03:07,198 on stmt: jump 202
DEBUG 2022-02-07 18:03:07,198 ==== SSA block rewrite pass on 202
DEBUG 2022-02-07 18:03:07,198 Running <numba.core.ssa._FreshVarHandler object at 0x00000196AF20FC70>
DEBUG 2022-02-07 18:03:07,198 on stmt: powfactor.2 = phi(incoming_values=[Var(powfactor.1, _loop_hafnian_subroutines.py:178), Var(powfactor, _loop_hafnian_subroutines.py:174)], incoming_blocks=[298, 140])
DEBUG 2022-02-07 18:03:07,198 on stmt: $202for_iter.2 = iternext(value=$phi202.1)
DEBUG 2022-02-07 18:03:07,213 on stmt: $202for_iter.3 = pair_first(value=$202for_iter.2)
DEBUG 2022-02-07 18:03:07,213 on stmt: $202for_iter.4 = pair_second(value=$202for_iter.2)
DEBUG 2022-02-07 18:03:07,213 on stmt: $phi204.2 = $202for_iter.3
DEBUG 2022-02-07 18:03:07,213 on stmt: branch $202for_iter.4, 204, 300
DEBUG 2022-02-07 18:03:07,213 ==== SSA block rewrite pass on 204
DEBUG 2022-02-07 18:03:07,213 Running <numba.core.ssa._FreshVarHandler object at 0x00000196AF20FC70>
DEBUG 2022-02-07 18:03:07,213 on stmt: j = $phi204.2
DEBUG 2022-02-07 18:03:07,213 on stmt: $212binary_true_divide.6 = factor / j
DEBUG 2022-02-07 18:03:07,213 on stmt: $214inplace_multiply.7 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=powfactor.2, rhs=$212binary_true_divide.6, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-07 18:03:07,213 on stmt: powfactor.1 = $214inplace_multiply.7
DEBUG 2022-02-07 18:03:07,213 on stmt: $218load_global.8 = global(range: <class 'range'>)
DEBUG 2022-02-07 18:03:07,213 on stmt: $224binary_multiply.11 = i * j
DEBUG 2022-02-07 18:03:07,213 on stmt: $const226.12 = const(int, 1)
DEBUG 2022-02-07 18:03:07,213 on stmt: $228binary_add.13 = $224binary_multiply.11 + $const226.12
DEBUG 2022-02-07 18:03:07,213 on stmt: $const232.15 = const(int, 2)
DEBUG 2022-02-07 18:03:07,213 on stmt: $234binary_add.16 = n + $const232.15
DEBUG 2022-02-07 18:03:07,213 on stmt: $236call_function.17 = call $218load_global.8($228binary_add.13, $234binary_add.16, func=$218load_global.8, args=[Var($228binary_add.13, _loop_hafnian_subroutines.py:179), Var($234binary_add.16, _loop_hafnian_subroutines.py:179)], kws=(), vararg=None, target=None)
DEBUG 2022-02-07 18:03:07,213 on stmt: $238get_iter.18 = getiter(value=$236call_function.17)
DEBUG 2022-02-07 18:03:07,213 on stmt: $phi240.2 = $238get_iter.18
DEBUG 2022-02-07 18:03:07,213 on stmt: jump 240
DEBUG 2022-02-07 18:03:07,213 ==== SSA block rewrite pass on 240
DEBUG 2022-02-07 18:03:07,213 Running <numba.core.ssa._FreshVarHandler object at 0x00000196AF20FC70>
DEBUG 2022-02-07 18:03:07,213 on stmt: $240for_iter.3 = iternext(value=$phi240.2)
DEBUG 2022-02-07 18:03:07,213 on stmt: $240for_iter.4 = pair_first(value=$240for_iter.3)
DEBUG 2022-02-07 18:03:07,213 on stmt: $240for_iter.5 = pair_second(value=$240for_iter.3)
DEBUG 2022-02-07 18:03:07,213 on stmt: $phi242.3 = $240for_iter.4
DEBUG 2022-02-07 18:03:07,213 on stmt: branch $240for_iter.5, 242, 298
DEBUG 2022-02-07 18:03:07,213 ==== SSA block rewrite pass on 242
DEBUG 2022-02-07 18:03:07,213 Running <numba.core.ssa._FreshVarHandler object at 0x00000196AF20FC70>
DEBUG 2022-02-07 18:03:07,213 on stmt: k = $phi242.3
DEBUG 2022-02-07 18:03:07,213 on stmt: $const250.7 = const(int, 1)
DEBUG 2022-02-07 18:03:07,213 on stmt: $252binary_subtract.8 = k - $const250.7
DEBUG 2022-02-07 18:03:07,213 on stmt: $254build_tuple.9 = build_tuple(items=[Var(count, _loop_hafnian_subroutines.py:161), Var($252binary_subtract.8, _loop_hafnian_subroutines.py:180)])
DEBUG 2022-02-07 18:03:07,213 on stmt: $258binary_subscr.12 = getitem(value=comb, index=$254build_tuple.9, fn=<built-in function getitem>)
DEBUG 2022-02-07 18:03:07,213 on stmt: $const262.14 = const(int, 1)
DEBUG 2022-02-07 18:03:07,213 on stmt: $266binary_subtract.16 = $const262.14 - count
DEBUG 2022-02-07 18:03:07,213 on stmt: $274binary_multiply.20 = i * j
DEBUG 2022-02-07 18:03:07,213 on stmt: $276binary_subtract.21 = k - $274binary_multiply.20
DEBUG 2022-02-07 18:03:07,213 on stmt: $const278.22 = const(int, 1)
DEBUG 2022-02-07 18:03:07,213 on stmt: $280binary_subtract.23 = $276binary_subtract.21 - $const278.22
DEBUG 2022-02-07 18:03:07,213 on stmt: $282build_tuple.24 = build_tuple(items=[Var($266binary_subtract.16, _loop_hafnian_subroutines.py:180), Var($280binary_subtract.23, _loop_hafnian_subroutines.py:180)])
DEBUG 2022-02-07 18:03:07,213 on stmt: $284binary_subscr.25 = getitem(value=comb, index=$282build_tuple.24, fn=<built-in function getitem>)
DEBUG 2022-02-07 18:03:07,213 on stmt: $288binary_multiply.27 = $284binary_subscr.25 * powfactor.1
DEBUG 2022-02-07 18:03:07,213 on stmt: $290inplace_add.28 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$258binary_subscr.12, rhs=$288binary_multiply.27, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-07 18:03:07,213 on stmt: comb[$254build_tuple.9] = $290inplace_add.28
DEBUG 2022-02-07 18:03:07,213 on stmt: jump 240
DEBUG 2022-02-07 18:03:07,213 ==== SSA block rewrite pass on 298
DEBUG 2022-02-07 18:03:07,213 Running <numba.core.ssa._FreshVarHandler object at 0x00000196AF20FC70>
DEBUG 2022-02-07 18:03:07,213 on stmt: jump 202
DEBUG 2022-02-07 18:03:07,213 ==== SSA block rewrite pass on 300
DEBUG 2022-02-07 18:03:07,213 Running <numba.core.ssa._FreshVarHandler object at 0x00000196AF20FC70>
DEBUG 2022-02-07 18:03:07,213 on stmt: jump 60
DEBUG 2022-02-07 18:03:07,213 ==== SSA block rewrite pass on 302
DEBUG 2022-02-07 18:03:07,213 Running <numba.core.ssa._FreshVarHandler object at 0x00000196AF20FC70>
DEBUG 2022-02-07 18:03:07,213 on stmt: $const306.2 = const(NoneType, None)
DEBUG 2022-02-07 18:03:07,213 on stmt: $const308.3 = const(NoneType, None)
DEBUG 2022-02-07 18:03:07,213 on stmt: $310build_slice.4 = global(slice: <class 'slice'>)
DEBUG 2022-02-07 18:03:07,213 on stmt: $310build_slice.5 = call $310build_slice.4($const306.2, $const308.3, func=$310build_slice.4, args=(Var($const306.2, _loop_hafnian_subroutines.py:182), Var($const308.3, _loop_hafnian_subroutines.py:182)), kws=(), vararg=None, target=None)
DEBUG 2022-02-07 18:03:07,213 on stmt: $312build_tuple.6 = build_tuple(items=[Var(count, _loop_hafnian_subroutines.py:161), Var($310build_slice.5, _loop_hafnian_subroutines.py:182)])
DEBUG 2022-02-07 18:03:07,213 on stmt: $314binary_subscr.7 = getitem(value=comb, index=$312build_tuple.6, fn=<built-in function getitem>)
DEBUG 2022-02-07 18:03:07,213 on stmt: $316return_value.8 = cast(value=$314binary_subscr.7)
DEBUG 2022-02-07 18:03:07,213 on stmt: return $316return_value.8
DEBUG 2022-02-07 18:03:07,213 Replaced assignments: defaultdict(<class 'list'>,
            {72: [<numba.core.ir.Assign object at 0x00000196AF22D460>],
             90: [<numba.core.ir.Assign object at 0x00000196B023DD30>],
             124: [<numba.core.ir.Assign object at 0x00000196B0251550>]})
DEBUG 2022-02-07 18:03:07,213 ==== SSA block rewrite pass on 0
DEBUG 2022-02-07 18:03:07,213 Running <numba.core.ssa._FixSSAVars object at 0x00000196B023DA30>
DEBUG 2022-02-07 18:03:07,213 on stmt: E = arg(0, name=E)
DEBUG 2022-02-07 18:03:07,213 on stmt: AX_S = arg(1, name=AX_S)
DEBUG 2022-02-07 18:03:07,213 on stmt: XD_S = arg(2, name=XD_S)
DEBUG 2022-02-07 18:03:07,213 on stmt: D_S = arg(3, name=D_S)
DEBUG 2022-02-07 18:03:07,213 on stmt: n = arg(4, name=n)
DEBUG 2022-02-07 18:03:07,213 on stmt: oddloop = arg(5, name=oddloop)
DEBUG 2022-02-07 18:03:07,213 on stmt: oddVX_S = arg(6, name=oddVX_S)
DEBUG 2022-02-07 18:03:07,213 on stmt: $4load_method.1 = getattr(value=E, attr=copy)
DEBUG 2022-02-07 18:03:07,213 on stmt: E_k = call $4load_method.1(func=$4load_method.1, args=[], kws=(), vararg=None, target=None)
DEBUG 2022-02-07 18:03:07,213 on stmt: count = const(int, 0)
DEBUG 2022-02-07 18:03:07,213 on stmt: $14load_global.4 = global(np: <module 'numpy' from 'C:\\Users\\zl4821\\Anaconda3\\envs\\GBS\\lib\\site-packages\\numpy\\__init__.py'>)
DEBUG 2022-02-07 18:03:07,213 on stmt: $16load_attr.5 = getattr(value=$14load_global.4, attr=zeros)
DEBUG 2022-02-07 18:03:07,213 on stmt: $const18.6 = const(int, 2)
DEBUG 2022-02-07 18:03:07,229 on stmt: $const22.8 = const(int, 1)
DEBUG 2022-02-07 18:03:07,229 on stmt: $24binary_add.9 = n + $const22.8
DEBUG 2022-02-07 18:03:07,229 on stmt: $26build_tuple.10 = build_tuple(items=[Var($const18.6, _loop_hafnian_subroutines.py:162), Var($24binary_add.9, _loop_hafnian_subroutines.py:162)])
DEBUG 2022-02-07 18:03:07,229 on stmt: $28load_global.11 = global(np: <module 'numpy' from 'C:\\Users\\zl4821\\Anaconda3\\envs\\GBS\\lib\\site-packages\\numpy\\__init__.py'>)
DEBUG 2022-02-07 18:03:07,229 on stmt: $30load_attr.12 = getattr(value=$28load_global.11, attr=complex128)
DEBUG 2022-02-07 18:03:07,229 on stmt: comb = call $16load_attr.5($26build_tuple.10, func=$16load_attr.5, args=[Var($26build_tuple.10, _loop_hafnian_subroutines.py:162)], kws=[('dtype', Var($30load_attr.12, _loop_hafnian_subroutines.py:162))], vararg=None, target=None)
DEBUG 2022-02-07 18:03:07,229 on stmt: $const38.15 = const(int, 1)
DEBUG 2022-02-07 18:03:07,229 on stmt: $const_0 = const(int, 0)
DEBUG 2022-02-07 18:03:07,229 on stmt: $const_0.1 = const(int, 0)
DEBUG 2022-02-07 18:03:07,229 on stmt: $const42.17 = build_tuple(items=[Var($const_0, _loop_hafnian_subroutines.py:163), Var($const_0.1, _loop_hafnian_subroutines.py:163)])
DEBUG 2022-02-07 18:03:07,229 on stmt: comb[(0, 0)] = $const38.15
DEBUG 2022-02-07 18:03:07,229 on stmt: $46load_global.18 = global(range: <class 'range'>)
DEBUG 2022-02-07 18:03:07,229 on stmt: $const48.19 = const(int, 1)
DEBUG 2022-02-07 18:03:07,229 on stmt: $const52.21 = const(int, 1)
DEBUG 2022-02-07 18:03:07,229 on stmt: $54binary_add.22 = n + $const52.21
DEBUG 2022-02-07 18:03:07,229 on stmt: $56call_function.23 = call $46load_global.18($const48.19, $54binary_add.22, func=$46load_global.18, args=[Var($const48.19, _loop_hafnian_subroutines.py:164), Var($54binary_add.22, _loop_hafnian_subroutines.py:164)], kws=(), vararg=None, target=None)
DEBUG 2022-02-07 18:03:07,229 on stmt: $58get_iter.24 = getiter(value=$56call_function.23)
DEBUG 2022-02-07 18:03:07,229 on stmt: $phi60.0 = $58get_iter.24
DEBUG 2022-02-07 18:03:07,229 on stmt: jump 60
DEBUG 2022-02-07 18:03:07,229 ==== SSA block rewrite pass on 60
DEBUG 2022-02-07 18:03:07,229 Running <numba.core.ssa._FixSSAVars object at 0x00000196B023DA30>
DEBUG 2022-02-07 18:03:07,229 on stmt: E_k.2 = phi(incoming_values=[Var(E_k, _loop_hafnian_subroutines.py:159), Var(E_k.3, _loop_hafnian_subroutines.py:168)], incoming_blocks=[0, 300])
DEBUG 2022-02-07 18:03:07,229 on stmt: D_S.2 = phi(incoming_values=[Var(D_S, _loop_hafnian_subroutines.py:159), Var(D_S.3, _loop_hafnian_subroutines.py:168)], incoming_blocks=[0, 300])
DEBUG 2022-02-07 18:03:07,229 on stmt: $60for_iter.1 = iternext(value=$phi60.0)
DEBUG 2022-02-07 18:03:07,229 on stmt: $60for_iter.2 = pair_first(value=$60for_iter.1)
DEBUG 2022-02-07 18:03:07,229 on stmt: $60for_iter.3 = pair_second(value=$60for_iter.1)
DEBUG 2022-02-07 18:03:07,229 on stmt: $phi62.1 = $60for_iter.2
DEBUG 2022-02-07 18:03:07,229 on stmt: branch $60for_iter.3, 62, 302
DEBUG 2022-02-07 18:03:07,229 ==== SSA block rewrite pass on 62
DEBUG 2022-02-07 18:03:07,229 Running <numba.core.ssa._FixSSAVars object at 0x00000196B023DA30>
DEBUG 2022-02-07 18:03:07,229 on stmt: i = $phi62.1
DEBUG 2022-02-07 18:03:07,229 on stmt: $const66.3 = const(int, 1)
DEBUG 2022-02-07 18:03:07,229 on stmt: $68compare_op.4 = i == $const66.3
DEBUG 2022-02-07 18:03:07,229 on stmt: bool70 = global(bool: <class 'bool'>)
DEBUG 2022-02-07 18:03:07,229 on stmt: $70pred = call bool70($68compare_op.4, func=bool70, args=(Var($68compare_op.4, _loop_hafnian_subroutines.py:165),), kws=(), vararg=None, target=None)
DEBUG 2022-02-07 18:03:07,229 on stmt: branch $70pred, 72, 78
DEBUG 2022-02-07 18:03:07,229 ==== SSA block rewrite pass on 72
DEBUG 2022-02-07 18:03:07,229 Running <numba.core.ssa._FixSSAVars object at 0x00000196B023DA30>
DEBUG 2022-02-07 18:03:07,229 on stmt: factor = oddloop
DEBUG 2022-02-07 18:03:07,229 on stmt: jump 140
DEBUG 2022-02-07 18:03:07,229 ==== SSA block rewrite pass on 78
DEBUG 2022-02-07 18:03:07,229 Running <numba.core.ssa._FixSSAVars object at 0x00000196B023DA30>
DEBUG 2022-02-07 18:03:07,229 on stmt: $const80.2 = const(int, 2)
DEBUG 2022-02-07 18:03:07,229 on stmt: $82binary_modulo.3 = i % $const80.2
DEBUG 2022-02-07 18:03:07,229 on stmt: $const84.4 = const(int, 0)
DEBUG 2022-02-07 18:03:07,229 on stmt: $86compare_op.5 = $82binary_modulo.3 == $const84.4
DEBUG 2022-02-07 18:03:07,229 on stmt: bool88 = global(bool: <class 'bool'>)
DEBUG 2022-02-07 18:03:07,229 on stmt: $88pred = call bool88($86compare_op.5, func=bool88, args=(Var($86compare_op.5, _loop_hafnian_subroutines.py:167),), kws=(), vararg=None, target=None)
DEBUG 2022-02-07 18:03:07,229 on stmt: branch $88pred, 90, 124
DEBUG 2022-02-07 18:03:07,229 ==== SSA block rewrite pass on 90
DEBUG 2022-02-07 18:03:07,229 Running <numba.core.ssa._FixSSAVars object at 0x00000196B023DA30>
DEBUG 2022-02-07 18:03:07,229 on stmt: $92load_method.2 = getattr(value=E_k.2, attr=sum)
DEBUG 2022-02-07 18:03:07,229 on stmt: $94call_method.3 = call $92load_method.2(func=$92load_method.2, args=[], kws=(), vararg=None, target=None)
DEBUG 2022-02-07 18:03:07,229 on stmt: $98binary_true_divide.5 = $94call_method.3 / i
DEBUG 2022-02-07 18:03:07,229 on stmt: $104binary_matrix_multiply.8 = XD_S <built-in function matmul> D_S.2
DEBUG 2022-02-07 18:03:07,229 on stmt: $const106.9 = const(int, 2)
DEBUG 2022-02-07 18:03:07,229 on stmt: $108binary_true_divide.10 = $104binary_matrix_multiply.8 / $const106.9
DEBUG 2022-02-07 18:03:07,229 on stmt: factor.1 = $98binary_true_divide.5 + $108binary_true_divide.10
DEBUG 2022-02-07 18:03:07,229 on stmt: $118inplace_multiply.14 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=E_k.2, rhs=E, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-07 18:03:07,229 on stmt: E_k.1 = $118inplace_multiply.14
DEBUG 2022-02-07 18:03:07,229 on stmt: jump 140
DEBUG 2022-02-07 18:03:07,229 ==== SSA block rewrite pass on 124
DEBUG 2022-02-07 18:03:07,229 Running <numba.core.ssa._FixSSAVars object at 0x00000196B023DA30>
DEBUG 2022-02-07 18:03:07,229 on stmt: factor.2 = oddVX_S <built-in function matmul> D_S.2
DEBUG 2022-02-07 18:03:07,229 on stmt: $136binary_matrix_multiply.6 = AX_S <built-in function matmul> D_S.2
DEBUG 2022-02-07 18:03:07,229 on stmt: D_S.1 = $136binary_matrix_multiply.6
DEBUG 2022-02-07 18:03:07,229 on stmt: jump 140
DEBUG 2022-02-07 18:03:07,229 ==== SSA block rewrite pass on 140
DEBUG 2022-02-07 18:03:07,229 Running <numba.core.ssa._FixSSAVars object at 0x00000196B023DA30>
DEBUG 2022-02-07 18:03:07,229 on stmt: E_k.3 = phi(incoming_values=[Var(E_k.2, _loop_hafnian_subroutines.py:168), Var(E_k.1, _loop_hafnian_subroutines.py:169), Var(E_k.2, _loop_hafnian_subroutines.py:168)], incoming_blocks=[72, 90, 124])
DEBUG 2022-02-07 18:03:07,229 on stmt: D_S.3 = phi(incoming_values=[Var(D_S.2, _loop_hafnian_subroutines.py:168), Var(D_S.2, _loop_hafnian_subroutines.py:168), Var(D_S.1, _loop_hafnian_subroutines.py:172)], incoming_blocks=[72, 90, 124])
DEBUG 2022-02-07 18:03:07,229 on stmt: powfactor = const(int, 1)
DEBUG 2022-02-07 18:03:07,229 on stmt: $const144.2 = const(int, 1)
DEBUG 2022-02-07 18:03:07,229 on stmt: $148binary_subtract.4 = $const144.2 - count
DEBUG 2022-02-07 18:03:07,229 on stmt: count = $148binary_subtract.4
DEBUG 2022-02-07 18:03:07,229 on stmt: $const154.6 = const(int, 1)
DEBUG 2022-02-07 18:03:07,245 on stmt: $158binary_subtract.8 = $const154.6 - count
DEBUG 2022-02-07 18:03:07,245 on stmt: $const160.9 = const(NoneType, None)
DEBUG 2022-02-07 18:03:07,245 on stmt: $const162.10 = const(NoneType, None)
DEBUG 2022-02-07 18:03:07,245 on stmt: $164build_slice.11 = global(slice: <class 'slice'>)
DEBUG 2022-02-07 18:03:07,245 on stmt: $164build_slice.12 = call $164build_slice.11($const160.9, $const162.10, func=$164build_slice.11, args=(Var($const160.9, _loop_hafnian_subroutines.py:176), Var($const162.10, _loop_hafnian_subroutines.py:176)), kws=(), vararg=None, target=None)
DEBUG 2022-02-07 18:03:07,245 on stmt: $166build_tuple.13 = build_tuple(items=[Var($158binary_subtract.8, _loop_hafnian_subroutines.py:176), Var($164build_slice.12, _loop_hafnian_subroutines.py:176)])
DEBUG 2022-02-07 18:03:07,245 on stmt: $168binary_subscr.14 = getitem(value=comb, index=$166build_tuple.13, fn=<built-in function getitem>)
DEBUG 2022-02-07 18:03:07,245 on stmt: $const174.17 = const(NoneType, None)
DEBUG 2022-02-07 18:03:07,245 on stmt: $const176.18 = const(NoneType, None)
DEBUG 2022-02-07 18:03:07,245 on stmt: $178build_slice.19 = global(slice: <class 'slice'>)
DEBUG 2022-02-07 18:03:07,245 on stmt: $178build_slice.20 = call $178build_slice.19($const174.17, $const176.18, func=$178build_slice.19, args=(Var($const174.17, _loop_hafnian_subroutines.py:176), Var($const176.18, _loop_hafnian_subroutines.py:176)), kws=(), vararg=None, target=None)
DEBUG 2022-02-07 18:03:07,245 on stmt: $180build_tuple.21 = build_tuple(items=[Var(count, _loop_hafnian_subroutines.py:161), Var($178build_slice.20, _loop_hafnian_subroutines.py:176)])
DEBUG 2022-02-07 18:03:07,245 on stmt: comb[$180build_tuple.21] = $168binary_subscr.14
DEBUG 2022-02-07 18:03:07,245 on stmt: $184load_global.22 = global(range: <class 'range'>)
DEBUG 2022-02-07 18:03:07,245 on stmt: $const186.23 = const(int, 1)
DEBUG 2022-02-07 18:03:07,245 on stmt: $192binary_floor_divide.26 = n // i
DEBUG 2022-02-07 18:03:07,245 on stmt: $const194.27 = const(int, 1)
DEBUG 2022-02-07 18:03:07,245 on stmt: $196binary_add.28 = $192binary_floor_divide.26 + $const194.27
DEBUG 2022-02-07 18:03:07,245 on stmt: $198call_function.29 = call $184load_global.22($const186.23, $196binary_add.28, func=$184load_global.22, args=[Var($const186.23, _loop_hafnian_subroutines.py:177), Var($196binary_add.28, _loop_hafnian_subroutines.py:177)], kws=(), vararg=None, target=None)
DEBUG 2022-02-07 18:03:07,245 on stmt: $200get_iter.30 = getiter(value=$198call_function.29)
DEBUG 2022-02-07 18:03:07,245 on stmt: $phi202.1 = $200get_iter.30
DEBUG 2022-02-07 18:03:07,245 on stmt: jump 202
DEBUG 2022-02-07 18:03:07,245 ==== SSA block rewrite pass on 202
DEBUG 2022-02-07 18:03:07,245 Running <numba.core.ssa._FixSSAVars object at 0x00000196B023DA30>
DEBUG 2022-02-07 18:03:07,245 on stmt: powfactor.2 = phi(incoming_values=[Var(powfactor.1, _loop_hafnian_subroutines.py:178), Var(powfactor, _loop_hafnian_subroutines.py:174)], incoming_blocks=[298, 140])
DEBUG 2022-02-07 18:03:07,245 on stmt: $202for_iter.2 = iternext(value=$phi202.1)
DEBUG 2022-02-07 18:03:07,245 on stmt: $202for_iter.3 = pair_first(value=$202for_iter.2)
DEBUG 2022-02-07 18:03:07,245 on stmt: $202for_iter.4 = pair_second(value=$202for_iter.2)
DEBUG 2022-02-07 18:03:07,245 on stmt: $phi204.2 = $202for_iter.3
DEBUG 2022-02-07 18:03:07,245 on stmt: branch $202for_iter.4, 204, 300
DEBUG 2022-02-07 18:03:07,245 ==== SSA block rewrite pass on 204
DEBUG 2022-02-07 18:03:07,245 Running <numba.core.ssa._FixSSAVars object at 0x00000196B023DA30>
DEBUG 2022-02-07 18:03:07,251 on stmt: j = $phi204.2
DEBUG 2022-02-07 18:03:07,251 on stmt: $212binary_true_divide.6 = factor / j
DEBUG 2022-02-07 18:03:07,251 find_def var='factor' stmt=$212binary_true_divide.6 = factor / j
DEBUG 2022-02-07 18:03:07,251 find_def_from_top label 204
DEBUG 2022-02-07 18:03:07,251 idom 202 from label 204
DEBUG 2022-02-07 18:03:07,251 find_def_from_bottom label 202
DEBUG 2022-02-07 18:03:07,251 find_def_from_top label 202
DEBUG 2022-02-07 18:03:07,251 idom 140 from label 202
DEBUG 2022-02-07 18:03:07,251 find_def_from_bottom label 140
DEBUG 2022-02-07 18:03:07,251 find_def_from_top label 140
DEBUG 2022-02-07 18:03:07,251 insert phi node factor.3 = phi(incoming_values=[], incoming_blocks=[]) at 140
DEBUG 2022-02-07 18:03:07,251 find_def_from_bottom label 72
DEBUG 2022-02-07 18:03:07,251 incoming_def factor = oddloop
DEBUG 2022-02-07 18:03:07,251 find_def_from_bottom label 90
DEBUG 2022-02-07 18:03:07,251 incoming_def factor.1 = $98binary_true_divide.5 + $108binary_true_divide.10
DEBUG 2022-02-07 18:03:07,251 find_def_from_bottom label 124
DEBUG 2022-02-07 18:03:07,251 incoming_def factor.2 = oddVX_S <built-in function matmul> D_S.2
DEBUG 2022-02-07 18:03:07,251 replaced with: $212binary_true_divide.6 = factor.3 / j
DEBUG 2022-02-07 18:03:07,251 on stmt: $214inplace_multiply.7 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=powfactor.2, rhs=$212binary_true_divide.6, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-07 18:03:07,251 on stmt: powfactor.1 = $214inplace_multiply.7
DEBUG 2022-02-07 18:03:07,251 on stmt: $218load_global.8 = global(range: <class 'range'>)
DEBUG 2022-02-07 18:03:07,251 on stmt: $224binary_multiply.11 = i * j
DEBUG 2022-02-07 18:03:07,251 on stmt: $const226.12 = const(int, 1)
DEBUG 2022-02-07 18:03:07,251 on stmt: $228binary_add.13 = $224binary_multiply.11 + $const226.12
DEBUG 2022-02-07 18:03:07,251 on stmt: $const232.15 = const(int, 2)
DEBUG 2022-02-07 18:03:07,251 on stmt: $234binary_add.16 = n + $const232.15
DEBUG 2022-02-07 18:03:07,251 on stmt: $236call_function.17 = call $218load_global.8($228binary_add.13, $234binary_add.16, func=$218load_global.8, args=[Var($228binary_add.13, _loop_hafnian_subroutines.py:179), Var($234binary_add.16, _loop_hafnian_subroutines.py:179)], kws=(), vararg=None, target=None)
DEBUG 2022-02-07 18:03:07,251 on stmt: $238get_iter.18 = getiter(value=$236call_function.17)
DEBUG 2022-02-07 18:03:07,251 on stmt: $phi240.2 = $238get_iter.18
DEBUG 2022-02-07 18:03:07,251 on stmt: jump 240
DEBUG 2022-02-07 18:03:07,251 ==== SSA block rewrite pass on 240
DEBUG 2022-02-07 18:03:07,251 Running <numba.core.ssa._FixSSAVars object at 0x00000196B023DA30>
DEBUG 2022-02-07 18:03:07,251 on stmt: $240for_iter.3 = iternext(value=$phi240.2)
DEBUG 2022-02-07 18:03:07,251 on stmt: $240for_iter.4 = pair_first(value=$240for_iter.3)
DEBUG 2022-02-07 18:03:07,251 on stmt: $240for_iter.5 = pair_second(value=$240for_iter.3)
DEBUG 2022-02-07 18:03:07,251 on stmt: $phi242.3 = $240for_iter.4
DEBUG 2022-02-07 18:03:07,251 on stmt: branch $240for_iter.5, 242, 298
DEBUG 2022-02-07 18:03:07,251 ==== SSA block rewrite pass on 242
DEBUG 2022-02-07 18:03:07,251 Running <numba.core.ssa._FixSSAVars object at 0x00000196B023DA30>
DEBUG 2022-02-07 18:03:07,251 on stmt: k = $phi242.3
DEBUG 2022-02-07 18:03:07,251 on stmt: $const250.7 = const(int, 1)
DEBUG 2022-02-07 18:03:07,251 on stmt: $252binary_subtract.8 = k - $const250.7
DEBUG 2022-02-07 18:03:07,251 on stmt: $254build_tuple.9 = build_tuple(items=[Var(count, _loop_hafnian_subroutines.py:161), Var($252binary_subtract.8, _loop_hafnian_subroutines.py:180)])
DEBUG 2022-02-07 18:03:07,251 on stmt: $258binary_subscr.12 = getitem(value=comb, index=$254build_tuple.9, fn=<built-in function getitem>)
DEBUG 2022-02-07 18:03:07,251 on stmt: $const262.14 = const(int, 1)
DEBUG 2022-02-07 18:03:07,251 on stmt: $266binary_subtract.16 = $const262.14 - count
DEBUG 2022-02-07 18:03:07,251 on stmt: $274binary_multiply.20 = i * j
DEBUG 2022-02-07 18:03:07,251 on stmt: $276binary_subtract.21 = k - $274binary_multiply.20
DEBUG 2022-02-07 18:03:07,251 on stmt: $const278.22 = const(int, 1)
DEBUG 2022-02-07 18:03:07,251 on stmt: $280binary_subtract.23 = $276binary_subtract.21 - $const278.22
DEBUG 2022-02-07 18:03:07,251 on stmt: $282build_tuple.24 = build_tuple(items=[Var($266binary_subtract.16, _loop_hafnian_subroutines.py:180), Var($280binary_subtract.23, _loop_hafnian_subroutines.py:180)])
DEBUG 2022-02-07 18:03:07,251 on stmt: $284binary_subscr.25 = getitem(value=comb, index=$282build_tuple.24, fn=<built-in function getitem>)
DEBUG 2022-02-07 18:03:07,251 on stmt: $288binary_multiply.27 = $284binary_subscr.25 * powfactor.1
DEBUG 2022-02-07 18:03:07,251 on stmt: $290inplace_add.28 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$258binary_subscr.12, rhs=$288binary_multiply.27, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-07 18:03:07,251 on stmt: comb[$254build_tuple.9] = $290inplace_add.28
DEBUG 2022-02-07 18:03:07,251 on stmt: jump 240
DEBUG 2022-02-07 18:03:07,251 ==== SSA block rewrite pass on 298
DEBUG 2022-02-07 18:03:07,251 Running <numba.core.ssa._FixSSAVars object at 0x00000196B023DA30>
DEBUG 2022-02-07 18:03:07,251 on stmt: jump 202
DEBUG 2022-02-07 18:03:07,251 ==== SSA block rewrite pass on 300
DEBUG 2022-02-07 18:03:07,251 Running <numba.core.ssa._FixSSAVars object at 0x00000196B023DA30>
DEBUG 2022-02-07 18:03:07,251 on stmt: jump 60
DEBUG 2022-02-07 18:03:07,251 ==== SSA block rewrite pass on 302
DEBUG 2022-02-07 18:03:07,251 Running <numba.core.ssa._FixSSAVars object at 0x00000196B023DA30>
DEBUG 2022-02-07 18:03:07,251 on stmt: $const306.2 = const(NoneType, None)
DEBUG 2022-02-07 18:03:07,251 on stmt: $const308.3 = const(NoneType, None)
DEBUG 2022-02-07 18:03:07,251 on stmt: $310build_slice.4 = global(slice: <class 'slice'>)
DEBUG 2022-02-07 18:03:07,251 on stmt: $310build_slice.5 = call $310build_slice.4($const306.2, $const308.3, func=$310build_slice.4, args=(Var($const306.2, _loop_hafnian_subroutines.py:182), Var($const308.3, _loop_hafnian_subroutines.py:182)), kws=(), vararg=None, target=None)
DEBUG 2022-02-07 18:03:07,251 on stmt: $312build_tuple.6 = build_tuple(items=[Var(count, _loop_hafnian_subroutines.py:161), Var($310build_slice.5, _loop_hafnian_subroutines.py:182)])
DEBUG 2022-02-07 18:03:07,251 on stmt: $314binary_subscr.7 = getitem(value=comb, index=$312build_tuple.6, fn=<built-in function getitem>)
DEBUG 2022-02-07 18:03:07,251 on stmt: $316return_value.8 = cast(value=$314binary_subscr.7)
DEBUG 2022-02-07 18:03:07,251 on stmt: return $316return_value.8
DEBUG 2022-02-07 18:03:07,251 Fix SSA violator on var count
DEBUG 2022-02-07 18:03:07,251 ==== SSA block rewrite pass on 0
DEBUG 2022-02-07 18:03:07,251 Running <numba.core.ssa._FreshVarHandler object at 0x00000196AF22DE50>
DEBUG 2022-02-07 18:03:07,251 on stmt: E = arg(0, name=E)
DEBUG 2022-02-07 18:03:07,251 on stmt: AX_S = arg(1, name=AX_S)
DEBUG 2022-02-07 18:03:07,251 on stmt: XD_S = arg(2, name=XD_S)
DEBUG 2022-02-07 18:03:07,251 on stmt: D_S = arg(3, name=D_S)
DEBUG 2022-02-07 18:03:07,251 on stmt: n = arg(4, name=n)
DEBUG 2022-02-07 18:03:07,251 on stmt: oddloop = arg(5, name=oddloop)
DEBUG 2022-02-07 18:03:07,251 on stmt: oddVX_S = arg(6, name=oddVX_S)
DEBUG 2022-02-07 18:03:07,251 on stmt: $4load_method.1 = getattr(value=E, attr=copy)
DEBUG 2022-02-07 18:03:07,251 on stmt: E_k = call $4load_method.1(func=$4load_method.1, args=[], kws=(), vararg=None, target=None)
DEBUG 2022-02-07 18:03:07,251 on stmt: count = const(int, 0)
DEBUG 2022-02-07 18:03:07,267 first assign: count
DEBUG 2022-02-07 18:03:07,267 replaced with: count = const(int, 0)
DEBUG 2022-02-07 18:03:07,267 on stmt: $14load_global.4 = global(np: <module 'numpy' from 'C:\\Users\\zl4821\\Anaconda3\\envs\\GBS\\lib\\site-packages\\numpy\\__init__.py'>)
DEBUG 2022-02-07 18:03:07,267 on stmt: $16load_attr.5 = getattr(value=$14load_global.4, attr=zeros)
DEBUG 2022-02-07 18:03:07,267 on stmt: $const18.6 = const(int, 2)
DEBUG 2022-02-07 18:03:07,267 on stmt: $const22.8 = const(int, 1)
DEBUG 2022-02-07 18:03:07,267 on stmt: $24binary_add.9 = n + $const22.8
DEBUG 2022-02-07 18:03:07,267 on stmt: $26build_tuple.10 = build_tuple(items=[Var($const18.6, _loop_hafnian_subroutines.py:162), Var($24binary_add.9, _loop_hafnian_subroutines.py:162)])
DEBUG 2022-02-07 18:03:07,267 on stmt: $28load_global.11 = global(np: <module 'numpy' from 'C:\\Users\\zl4821\\Anaconda3\\envs\\GBS\\lib\\site-packages\\numpy\\__init__.py'>)
DEBUG 2022-02-07 18:03:07,267 on stmt: $30load_attr.12 = getattr(value=$28load_global.11, attr=complex128)
DEBUG 2022-02-07 18:03:07,267 on stmt: comb = call $16load_attr.5($26build_tuple.10, func=$16load_attr.5, args=[Var($26build_tuple.10, _loop_hafnian_subroutines.py:162)], kws=[('dtype', Var($30load_attr.12, _loop_hafnian_subroutines.py:162))], vararg=None, target=None)
DEBUG 2022-02-07 18:03:07,267 on stmt: $const38.15 = const(int, 1)
DEBUG 2022-02-07 18:03:07,267 on stmt: $const_0 = const(int, 0)
DEBUG 2022-02-07 18:03:07,267 on stmt: $const_0.1 = const(int, 0)
DEBUG 2022-02-07 18:03:07,267 on stmt: $const42.17 = build_tuple(items=[Var($const_0, _loop_hafnian_subroutines.py:163), Var($const_0.1, _loop_hafnian_subroutines.py:163)])
DEBUG 2022-02-07 18:03:07,267 on stmt: comb[(0, 0)] = $const38.15
DEBUG 2022-02-07 18:03:07,267 on stmt: $46load_global.18 = global(range: <class 'range'>)
DEBUG 2022-02-07 18:03:07,267 on stmt: $const48.19 = const(int, 1)
DEBUG 2022-02-07 18:03:07,267 on stmt: $const52.21 = const(int, 1)
DEBUG 2022-02-07 18:03:07,267 on stmt: $54binary_add.22 = n + $const52.21
DEBUG 2022-02-07 18:03:07,267 on stmt: $56call_function.23 = call $46load_global.18($const48.19, $54binary_add.22, func=$46load_global.18, args=[Var($const48.19, _loop_hafnian_subroutines.py:164), Var($54binary_add.22, _loop_hafnian_subroutines.py:164)], kws=(), vararg=None, target=None)
DEBUG 2022-02-07 18:03:07,267 on stmt: $58get_iter.24 = getiter(value=$56call_function.23)
DEBUG 2022-02-07 18:03:07,267 on stmt: $phi60.0 = $58get_iter.24
DEBUG 2022-02-07 18:03:07,267 on stmt: jump 60
DEBUG 2022-02-07 18:03:07,267 ==== SSA block rewrite pass on 60
DEBUG 2022-02-07 18:03:07,267 Running <numba.core.ssa._FreshVarHandler object at 0x00000196AF22DE50>
DEBUG 2022-02-07 18:03:07,267 on stmt: E_k.2 = phi(incoming_values=[Var(E_k, _loop_hafnian_subroutines.py:159), Var(E_k.3, _loop_hafnian_subroutines.py:168)], incoming_blocks=[0, 300])
DEBUG 2022-02-07 18:03:07,267 on stmt: D_S.2 = phi(incoming_values=[Var(D_S, _loop_hafnian_subroutines.py:159), Var(D_S.3, _loop_hafnian_subroutines.py:168)], incoming_blocks=[0, 300])
DEBUG 2022-02-07 18:03:07,267 on stmt: $60for_iter.1 = iternext(value=$phi60.0)
DEBUG 2022-02-07 18:03:07,267 on stmt: $60for_iter.2 = pair_first(value=$60for_iter.1)
DEBUG 2022-02-07 18:03:07,267 on stmt: $60for_iter.3 = pair_second(value=$60for_iter.1)
DEBUG 2022-02-07 18:03:07,267 on stmt: $phi62.1 = $60for_iter.2
DEBUG 2022-02-07 18:03:07,267 on stmt: branch $60for_iter.3, 62, 302
DEBUG 2022-02-07 18:03:07,267 ==== SSA block rewrite pass on 62
DEBUG 2022-02-07 18:03:07,267 Running <numba.core.ssa._FreshVarHandler object at 0x00000196AF22DE50>
DEBUG 2022-02-07 18:03:07,267 on stmt: i = $phi62.1
DEBUG 2022-02-07 18:03:07,267 on stmt: $const66.3 = const(int, 1)
DEBUG 2022-02-07 18:03:07,267 on stmt: $68compare_op.4 = i == $const66.3
DEBUG 2022-02-07 18:03:07,267 on stmt: bool70 = global(bool: <class 'bool'>)
DEBUG 2022-02-07 18:03:07,267 on stmt: $70pred = call bool70($68compare_op.4, func=bool70, args=(Var($68compare_op.4, _loop_hafnian_subroutines.py:165),), kws=(), vararg=None, target=None)
DEBUG 2022-02-07 18:03:07,267 on stmt: branch $70pred, 72, 78
DEBUG 2022-02-07 18:03:07,267 ==== SSA block rewrite pass on 72
DEBUG 2022-02-07 18:03:07,267 Running <numba.core.ssa._FreshVarHandler object at 0x00000196AF22DE50>
DEBUG 2022-02-07 18:03:07,267 on stmt: factor = oddloop
DEBUG 2022-02-07 18:03:07,267 on stmt: jump 140
DEBUG 2022-02-07 18:03:07,267 ==== SSA block rewrite pass on 78
DEBUG 2022-02-07 18:03:07,267 Running <numba.core.ssa._FreshVarHandler object at 0x00000196AF22DE50>
DEBUG 2022-02-07 18:03:07,267 on stmt: $const80.2 = const(int, 2)
DEBUG 2022-02-07 18:03:07,267 on stmt: $82binary_modulo.3 = i % $const80.2
DEBUG 2022-02-07 18:03:07,267 on stmt: $const84.4 = const(int, 0)
DEBUG 2022-02-07 18:03:07,267 on stmt: $86compare_op.5 = $82binary_modulo.3 == $const84.4
DEBUG 2022-02-07 18:03:07,267 on stmt: bool88 = global(bool: <class 'bool'>)
DEBUG 2022-02-07 18:03:07,267 on stmt: $88pred = call bool88($86compare_op.5, func=bool88, args=(Var($86compare_op.5, _loop_hafnian_subroutines.py:167),), kws=(), vararg=None, target=None)
DEBUG 2022-02-07 18:03:07,267 on stmt: branch $88pred, 90, 124
DEBUG 2022-02-07 18:03:07,267 ==== SSA block rewrite pass on 90
DEBUG 2022-02-07 18:03:07,267 Running <numba.core.ssa._FreshVarHandler object at 0x00000196AF22DE50>
DEBUG 2022-02-07 18:03:07,267 on stmt: $92load_method.2 = getattr(value=E_k.2, attr=sum)
DEBUG 2022-02-07 18:03:07,267 on stmt: $94call_method.3 = call $92load_method.2(func=$92load_method.2, args=[], kws=(), vararg=None, target=None)
DEBUG 2022-02-07 18:03:07,267 on stmt: $98binary_true_divide.5 = $94call_method.3 / i
DEBUG 2022-02-07 18:03:07,267 on stmt: $104binary_matrix_multiply.8 = XD_S <built-in function matmul> D_S.2
DEBUG 2022-02-07 18:03:07,267 on stmt: $const106.9 = const(int, 2)
DEBUG 2022-02-07 18:03:07,267 on stmt: $108binary_true_divide.10 = $104binary_matrix_multiply.8 / $const106.9
DEBUG 2022-02-07 18:03:07,267 on stmt: factor.1 = $98binary_true_divide.5 + $108binary_true_divide.10
DEBUG 2022-02-07 18:03:07,267 on stmt: $118inplace_multiply.14 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=E_k.2, rhs=E, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-07 18:03:07,267 on stmt: E_k.1 = $118inplace_multiply.14
DEBUG 2022-02-07 18:03:07,267 on stmt: jump 140
DEBUG 2022-02-07 18:03:07,267 ==== SSA block rewrite pass on 124
DEBUG 2022-02-07 18:03:07,267 Running <numba.core.ssa._FreshVarHandler object at 0x00000196AF22DE50>
DEBUG 2022-02-07 18:03:07,267 on stmt: factor.2 = oddVX_S <built-in function matmul> D_S.2
DEBUG 2022-02-07 18:03:07,267 on stmt: $136binary_matrix_multiply.6 = AX_S <built-in function matmul> D_S.2
DEBUG 2022-02-07 18:03:07,267 on stmt: D_S.1 = $136binary_matrix_multiply.6
DEBUG 2022-02-07 18:03:07,267 on stmt: jump 140
DEBUG 2022-02-07 18:03:07,267 ==== SSA block rewrite pass on 140
DEBUG 2022-02-07 18:03:07,267 Running <numba.core.ssa._FreshVarHandler object at 0x00000196AF22DE50>
DEBUG 2022-02-07 18:03:07,267 on stmt: factor.3 = phi(incoming_values=[Var(factor, _loop_hafnian_subroutines.py:166), Var(factor.1, _loop_hafnian_subroutines.py:168), Var(factor.2, _loop_hafnian_subroutines.py:171)], incoming_blocks=[72, 90, 124])
DEBUG 2022-02-07 18:03:07,282 on stmt: E_k.3 = phi(incoming_values=[Var(E_k.2, _loop_hafnian_subroutines.py:168), Var(E_k.1, _loop_hafnian_subroutines.py:169), Var(E_k.2, _loop_hafnian_subroutines.py:168)], incoming_blocks=[72, 90, 124])
DEBUG 2022-02-07 18:03:07,282 on stmt: D_S.3 = phi(incoming_values=[Var(D_S.2, _loop_hafnian_subroutines.py:168), Var(D_S.2, _loop_hafnian_subroutines.py:168), Var(D_S.1, _loop_hafnian_subroutines.py:172)], incoming_blocks=[72, 90, 124])
DEBUG 2022-02-07 18:03:07,282 on stmt: powfactor = const(int, 1)
DEBUG 2022-02-07 18:03:07,282 on stmt: $const144.2 = const(int, 1)
DEBUG 2022-02-07 18:03:07,282 on stmt: $148binary_subtract.4 = $const144.2 - count
DEBUG 2022-02-07 18:03:07,282 on stmt: count = $148binary_subtract.4
DEBUG 2022-02-07 18:03:07,282 replaced with: count.1 = $148binary_subtract.4
DEBUG 2022-02-07 18:03:07,282 on stmt: $const154.6 = const(int, 1)
DEBUG 2022-02-07 18:03:07,282 on stmt: $158binary_subtract.8 = $const154.6 - count
DEBUG 2022-02-07 18:03:07,282 on stmt: $const160.9 = const(NoneType, None)
DEBUG 2022-02-07 18:03:07,282 on stmt: $const162.10 = const(NoneType, None)
DEBUG 2022-02-07 18:03:07,282 on stmt: $164build_slice.11 = global(slice: <class 'slice'>)
DEBUG 2022-02-07 18:03:07,282 on stmt: $164build_slice.12 = call $164build_slice.11($const160.9, $const162.10, func=$164build_slice.11, args=(Var($const160.9, _loop_hafnian_subroutines.py:176), Var($const162.10, _loop_hafnian_subroutines.py:176)), kws=(), vararg=None, target=None)
DEBUG 2022-02-07 18:03:07,282 on stmt: $166build_tuple.13 = build_tuple(items=[Var($158binary_subtract.8, _loop_hafnian_subroutines.py:176), Var($164build_slice.12, _loop_hafnian_subroutines.py:176)])
DEBUG 2022-02-07 18:03:07,282 on stmt: $168binary_subscr.14 = getitem(value=comb, index=$166build_tuple.13, fn=<built-in function getitem>)
DEBUG 2022-02-07 18:03:07,282 on stmt: $const174.17 = const(NoneType, None)
DEBUG 2022-02-07 18:03:07,282 on stmt: $const176.18 = const(NoneType, None)
DEBUG 2022-02-07 18:03:07,282 on stmt: $178build_slice.19 = global(slice: <class 'slice'>)
DEBUG 2022-02-07 18:03:07,282 on stmt: $178build_slice.20 = call $178build_slice.19($const174.17, $const176.18, func=$178build_slice.19, args=(Var($const174.17, _loop_hafnian_subroutines.py:176), Var($const176.18, _loop_hafnian_subroutines.py:176)), kws=(), vararg=None, target=None)
DEBUG 2022-02-07 18:03:07,282 on stmt: $180build_tuple.21 = build_tuple(items=[Var(count, _loop_hafnian_subroutines.py:161), Var($178build_slice.20, _loop_hafnian_subroutines.py:176)])
DEBUG 2022-02-07 18:03:07,282 on stmt: comb[$180build_tuple.21] = $168binary_subscr.14
DEBUG 2022-02-07 18:03:07,282 on stmt: $184load_global.22 = global(range: <class 'range'>)
DEBUG 2022-02-07 18:03:07,282 on stmt: $const186.23 = const(int, 1)
DEBUG 2022-02-07 18:03:07,282 on stmt: $192binary_floor_divide.26 = n // i
DEBUG 2022-02-07 18:03:07,282 on stmt: $const194.27 = const(int, 1)
DEBUG 2022-02-07 18:03:07,282 on stmt: $196binary_add.28 = $192binary_floor_divide.26 + $const194.27
DEBUG 2022-02-07 18:03:07,282 on stmt: $198call_function.29 = call $184load_global.22($const186.23, $196binary_add.28, func=$184load_global.22, args=[Var($const186.23, _loop_hafnian_subroutines.py:177), Var($196binary_add.28, _loop_hafnian_subroutines.py:177)], kws=(), vararg=None, target=None)
DEBUG 2022-02-07 18:03:07,282 on stmt: $200get_iter.30 = getiter(value=$198call_function.29)
DEBUG 2022-02-07 18:03:07,282 on stmt: $phi202.1 = $200get_iter.30
DEBUG 2022-02-07 18:03:07,282 on stmt: jump 202
DEBUG 2022-02-07 18:03:07,282 ==== SSA block rewrite pass on 202
DEBUG 2022-02-07 18:03:07,282 Running <numba.core.ssa._FreshVarHandler object at 0x00000196AF22DE50>
DEBUG 2022-02-07 18:03:07,282 on stmt: powfactor.2 = phi(incoming_values=[Var(powfactor.1, _loop_hafnian_subroutines.py:178), Var(powfactor, _loop_hafnian_subroutines.py:174)], incoming_blocks=[298, 140])
DEBUG 2022-02-07 18:03:07,282 on stmt: $202for_iter.2 = iternext(value=$phi202.1)
DEBUG 2022-02-07 18:03:07,282 on stmt: $202for_iter.3 = pair_first(value=$202for_iter.2)
DEBUG 2022-02-07 18:03:07,282 on stmt: $202for_iter.4 = pair_second(value=$202for_iter.2)
DEBUG 2022-02-07 18:03:07,282 on stmt: $phi204.2 = $202for_iter.3
DEBUG 2022-02-07 18:03:07,282 on stmt: branch $202for_iter.4, 204, 300
DEBUG 2022-02-07 18:03:07,282 ==== SSA block rewrite pass on 204
DEBUG 2022-02-07 18:03:07,282 Running <numba.core.ssa._FreshVarHandler object at 0x00000196AF22DE50>
DEBUG 2022-02-07 18:03:07,282 on stmt: j = $phi204.2
DEBUG 2022-02-07 18:03:07,282 on stmt: $212binary_true_divide.6 = factor.3 / j
DEBUG 2022-02-07 18:03:07,282 on stmt: $214inplace_multiply.7 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=powfactor.2, rhs=$212binary_true_divide.6, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-07 18:03:07,282 on stmt: powfactor.1 = $214inplace_multiply.7
DEBUG 2022-02-07 18:03:07,282 on stmt: $218load_global.8 = global(range: <class 'range'>)
DEBUG 2022-02-07 18:03:07,282 on stmt: $224binary_multiply.11 = i * j
DEBUG 2022-02-07 18:03:07,282 on stmt: $const226.12 = const(int, 1)
DEBUG 2022-02-07 18:03:07,282 on stmt: $228binary_add.13 = $224binary_multiply.11 + $const226.12
DEBUG 2022-02-07 18:03:07,282 on stmt: $const232.15 = const(int, 2)
DEBUG 2022-02-07 18:03:07,282 on stmt: $234binary_add.16 = n + $const232.15
DEBUG 2022-02-07 18:03:07,282 on stmt: $236call_function.17 = call $218load_global.8($228binary_add.13, $234binary_add.16, func=$218load_global.8, args=[Var($228binary_add.13, _loop_hafnian_subroutines.py:179), Var($234binary_add.16, _loop_hafnian_subroutines.py:179)], kws=(), vararg=None, target=None)
DEBUG 2022-02-07 18:03:07,282 on stmt: $238get_iter.18 = getiter(value=$236call_function.17)
DEBUG 2022-02-07 18:03:07,282 on stmt: $phi240.2 = $238get_iter.18
DEBUG 2022-02-07 18:03:07,282 on stmt: jump 240
DEBUG 2022-02-07 18:03:07,282 ==== SSA block rewrite pass on 240
DEBUG 2022-02-07 18:03:07,282 Running <numba.core.ssa._FreshVarHandler object at 0x00000196AF22DE50>
DEBUG 2022-02-07 18:03:07,282 on stmt: $240for_iter.3 = iternext(value=$phi240.2)
DEBUG 2022-02-07 18:03:07,282 on stmt: $240for_iter.4 = pair_first(value=$240for_iter.3)
DEBUG 2022-02-07 18:03:07,282 on stmt: $240for_iter.5 = pair_second(value=$240for_iter.3)
DEBUG 2022-02-07 18:03:07,282 on stmt: $phi242.3 = $240for_iter.4
DEBUG 2022-02-07 18:03:07,282 on stmt: branch $240for_iter.5, 242, 298
DEBUG 2022-02-07 18:03:07,282 ==== SSA block rewrite pass on 242
DEBUG 2022-02-07 18:03:07,282 Running <numba.core.ssa._FreshVarHandler object at 0x00000196AF22DE50>
DEBUG 2022-02-07 18:03:07,282 on stmt: k = $phi242.3
DEBUG 2022-02-07 18:03:07,282 on stmt: $const250.7 = const(int, 1)
DEBUG 2022-02-07 18:03:07,282 on stmt: $252binary_subtract.8 = k - $const250.7
DEBUG 2022-02-07 18:03:07,282 on stmt: $254build_tuple.9 = build_tuple(items=[Var(count, _loop_hafnian_subroutines.py:161), Var($252binary_subtract.8, _loop_hafnian_subroutines.py:180)])
DEBUG 2022-02-07 18:03:07,282 on stmt: $258binary_subscr.12 = getitem(value=comb, index=$254build_tuple.9, fn=<built-in function getitem>)
DEBUG 2022-02-07 18:03:07,282 on stmt: $const262.14 = const(int, 1)
DEBUG 2022-02-07 18:03:07,282 on stmt: $266binary_subtract.16 = $const262.14 - count
DEBUG 2022-02-07 18:03:07,282 on stmt: $274binary_multiply.20 = i * j
DEBUG 2022-02-07 18:03:07,282 on stmt: $276binary_subtract.21 = k - $274binary_multiply.20
DEBUG 2022-02-07 18:03:07,282 on stmt: $const278.22 = const(int, 1)
DEBUG 2022-02-07 18:03:07,282 on stmt: $280binary_subtract.23 = $276binary_subtract.21 - $const278.22
DEBUG 2022-02-07 18:03:07,282 on stmt: $282build_tuple.24 = build_tuple(items=[Var($266binary_subtract.16, _loop_hafnian_subroutines.py:180), Var($280binary_subtract.23, _loop_hafnian_subroutines.py:180)])
DEBUG 2022-02-07 18:03:07,298 on stmt: $284binary_subscr.25 = getitem(value=comb, index=$282build_tuple.24, fn=<built-in function getitem>)
DEBUG 2022-02-07 18:03:07,298 on stmt: $288binary_multiply.27 = $284binary_subscr.25 * powfactor.1
DEBUG 2022-02-07 18:03:07,298 on stmt: $290inplace_add.28 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$258binary_subscr.12, rhs=$288binary_multiply.27, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-07 18:03:07,298 on stmt: comb[$254build_tuple.9] = $290inplace_add.28
DEBUG 2022-02-07 18:03:07,298 on stmt: jump 240
DEBUG 2022-02-07 18:03:07,298 ==== SSA block rewrite pass on 298
DEBUG 2022-02-07 18:03:07,298 Running <numba.core.ssa._FreshVarHandler object at 0x00000196AF22DE50>
DEBUG 2022-02-07 18:03:07,298 on stmt: jump 202
DEBUG 2022-02-07 18:03:07,298 ==== SSA block rewrite pass on 300
DEBUG 2022-02-07 18:03:07,298 Running <numba.core.ssa._FreshVarHandler object at 0x00000196AF22DE50>
DEBUG 2022-02-07 18:03:07,298 on stmt: jump 60
DEBUG 2022-02-07 18:03:07,298 ==== SSA block rewrite pass on 302
DEBUG 2022-02-07 18:03:07,298 Running <numba.core.ssa._FreshVarHandler object at 0x00000196AF22DE50>
DEBUG 2022-02-07 18:03:07,298 on stmt: $const306.2 = const(NoneType, None)
DEBUG 2022-02-07 18:03:07,298 on stmt: $const308.3 = const(NoneType, None)
DEBUG 2022-02-07 18:03:07,298 on stmt: $310build_slice.4 = global(slice: <class 'slice'>)
DEBUG 2022-02-07 18:03:07,298 on stmt: $310build_slice.5 = call $310build_slice.4($const306.2, $const308.3, func=$310build_slice.4, args=(Var($const306.2, _loop_hafnian_subroutines.py:182), Var($const308.3, _loop_hafnian_subroutines.py:182)), kws=(), vararg=None, target=None)
DEBUG 2022-02-07 18:03:07,298 on stmt: $312build_tuple.6 = build_tuple(items=[Var(count, _loop_hafnian_subroutines.py:161), Var($310build_slice.5, _loop_hafnian_subroutines.py:182)])
DEBUG 2022-02-07 18:03:07,298 on stmt: $314binary_subscr.7 = getitem(value=comb, index=$312build_tuple.6, fn=<built-in function getitem>)
DEBUG 2022-02-07 18:03:07,298 on stmt: $316return_value.8 = cast(value=$314binary_subscr.7)
DEBUG 2022-02-07 18:03:07,298 on stmt: return $316return_value.8
DEBUG 2022-02-07 18:03:07,298 Replaced assignments: defaultdict(<class 'list'>,
            {0: [<numba.core.ir.Assign object at 0x00000196AF22D130>],
             140: [<numba.core.ir.Assign object at 0x00000196B0251A90>]})
DEBUG 2022-02-07 18:03:07,298 ==== SSA block rewrite pass on 0
DEBUG 2022-02-07 18:03:07,298 Running <numba.core.ssa._FixSSAVars object at 0x00000196AF20FC70>
DEBUG 2022-02-07 18:03:07,298 on stmt: E = arg(0, name=E)
DEBUG 2022-02-07 18:03:07,298 on stmt: AX_S = arg(1, name=AX_S)
DEBUG 2022-02-07 18:03:07,298 on stmt: XD_S = arg(2, name=XD_S)
DEBUG 2022-02-07 18:03:07,298 on stmt: D_S = arg(3, name=D_S)
DEBUG 2022-02-07 18:03:07,298 on stmt: n = arg(4, name=n)
DEBUG 2022-02-07 18:03:07,298 on stmt: oddloop = arg(5, name=oddloop)
DEBUG 2022-02-07 18:03:07,298 on stmt: oddVX_S = arg(6, name=oddVX_S)
DEBUG 2022-02-07 18:03:07,298 on stmt: $4load_method.1 = getattr(value=E, attr=copy)
DEBUG 2022-02-07 18:03:07,298 on stmt: E_k = call $4load_method.1(func=$4load_method.1, args=[], kws=(), vararg=None, target=None)
DEBUG 2022-02-07 18:03:07,298 on stmt: count = const(int, 0)
DEBUG 2022-02-07 18:03:07,298 on stmt: $14load_global.4 = global(np: <module 'numpy' from 'C:\\Users\\zl4821\\Anaconda3\\envs\\GBS\\lib\\site-packages\\numpy\\__init__.py'>)
DEBUG 2022-02-07 18:03:07,298 on stmt: $16load_attr.5 = getattr(value=$14load_global.4, attr=zeros)
DEBUG 2022-02-07 18:03:07,298 on stmt: $const18.6 = const(int, 2)
DEBUG 2022-02-07 18:03:07,298 on stmt: $const22.8 = const(int, 1)
DEBUG 2022-02-07 18:03:07,298 on stmt: $24binary_add.9 = n + $const22.8
DEBUG 2022-02-07 18:03:07,298 on stmt: $26build_tuple.10 = build_tuple(items=[Var($const18.6, _loop_hafnian_subroutines.py:162), Var($24binary_add.9, _loop_hafnian_subroutines.py:162)])
DEBUG 2022-02-07 18:03:07,298 on stmt: $28load_global.11 = global(np: <module 'numpy' from 'C:\\Users\\zl4821\\Anaconda3\\envs\\GBS\\lib\\site-packages\\numpy\\__init__.py'>)
DEBUG 2022-02-07 18:03:07,298 on stmt: $30load_attr.12 = getattr(value=$28load_global.11, attr=complex128)
DEBUG 2022-02-07 18:03:07,298 on stmt: comb = call $16load_attr.5($26build_tuple.10, func=$16load_attr.5, args=[Var($26build_tuple.10, _loop_hafnian_subroutines.py:162)], kws=[('dtype', Var($30load_attr.12, _loop_hafnian_subroutines.py:162))], vararg=None, target=None)
DEBUG 2022-02-07 18:03:07,298 on stmt: $const38.15 = const(int, 1)
DEBUG 2022-02-07 18:03:07,298 on stmt: $const_0 = const(int, 0)
DEBUG 2022-02-07 18:03:07,298 on stmt: $const_0.1 = const(int, 0)
DEBUG 2022-02-07 18:03:07,298 on stmt: $const42.17 = build_tuple(items=[Var($const_0, _loop_hafnian_subroutines.py:163), Var($const_0.1, _loop_hafnian_subroutines.py:163)])
DEBUG 2022-02-07 18:03:07,298 on stmt: comb[(0, 0)] = $const38.15
DEBUG 2022-02-07 18:03:07,298 on stmt: $46load_global.18 = global(range: <class 'range'>)
DEBUG 2022-02-07 18:03:07,298 on stmt: $const48.19 = const(int, 1)
DEBUG 2022-02-07 18:03:07,298 on stmt: $const52.21 = const(int, 1)
DEBUG 2022-02-07 18:03:07,298 on stmt: $54binary_add.22 = n + $const52.21
DEBUG 2022-02-07 18:03:07,298 on stmt: $56call_function.23 = call $46load_global.18($const48.19, $54binary_add.22, func=$46load_global.18, args=[Var($const48.19, _loop_hafnian_subroutines.py:164), Var($54binary_add.22, _loop_hafnian_subroutines.py:164)], kws=(), vararg=None, target=None)
DEBUG 2022-02-07 18:03:07,298 on stmt: $58get_iter.24 = getiter(value=$56call_function.23)
DEBUG 2022-02-07 18:03:07,298 on stmt: $phi60.0 = $58get_iter.24
DEBUG 2022-02-07 18:03:07,298 on stmt: jump 60
DEBUG 2022-02-07 18:03:07,298 ==== SSA block rewrite pass on 60
DEBUG 2022-02-07 18:03:07,298 Running <numba.core.ssa._FixSSAVars object at 0x00000196AF20FC70>
DEBUG 2022-02-07 18:03:07,298 on stmt: E_k.2 = phi(incoming_values=[Var(E_k, _loop_hafnian_subroutines.py:159), Var(E_k.3, _loop_hafnian_subroutines.py:168)], incoming_blocks=[0, 300])
DEBUG 2022-02-07 18:03:07,298 on stmt: D_S.2 = phi(incoming_values=[Var(D_S, _loop_hafnian_subroutines.py:159), Var(D_S.3, _loop_hafnian_subroutines.py:168)], incoming_blocks=[0, 300])
DEBUG 2022-02-07 18:03:07,298 on stmt: $60for_iter.1 = iternext(value=$phi60.0)
DEBUG 2022-02-07 18:03:07,298 on stmt: $60for_iter.2 = pair_first(value=$60for_iter.1)
DEBUG 2022-02-07 18:03:07,298 on stmt: $60for_iter.3 = pair_second(value=$60for_iter.1)
DEBUG 2022-02-07 18:03:07,298 on stmt: $phi62.1 = $60for_iter.2
DEBUG 2022-02-07 18:03:07,298 on stmt: branch $60for_iter.3, 62, 302
DEBUG 2022-02-07 18:03:07,298 ==== SSA block rewrite pass on 62
DEBUG 2022-02-07 18:03:07,298 Running <numba.core.ssa._FixSSAVars object at 0x00000196AF20FC70>
DEBUG 2022-02-07 18:03:07,298 on stmt: i = $phi62.1
DEBUG 2022-02-07 18:03:07,298 on stmt: $const66.3 = const(int, 1)
DEBUG 2022-02-07 18:03:07,298 on stmt: $68compare_op.4 = i == $const66.3
DEBUG 2022-02-07 18:03:07,298 on stmt: bool70 = global(bool: <class 'bool'>)
DEBUG 2022-02-07 18:03:07,298 on stmt: $70pred = call bool70($68compare_op.4, func=bool70, args=(Var($68compare_op.4, _loop_hafnian_subroutines.py:165),), kws=(), vararg=None, target=None)
DEBUG 2022-02-07 18:03:07,298 on stmt: branch $70pred, 72, 78
DEBUG 2022-02-07 18:03:07,298 ==== SSA block rewrite pass on 72
DEBUG 2022-02-07 18:03:07,298 Running <numba.core.ssa._FixSSAVars object at 0x00000196AF20FC70>
DEBUG 2022-02-07 18:03:07,298 on stmt: factor = oddloop
DEBUG 2022-02-07 18:03:07,314 on stmt: jump 140
DEBUG 2022-02-07 18:03:07,314 ==== SSA block rewrite pass on 78
DEBUG 2022-02-07 18:03:07,314 Running <numba.core.ssa._FixSSAVars object at 0x00000196AF20FC70>
DEBUG 2022-02-07 18:03:07,314 on stmt: $const80.2 = const(int, 2)
DEBUG 2022-02-07 18:03:07,314 on stmt: $82binary_modulo.3 = i % $const80.2
DEBUG 2022-02-07 18:03:07,314 on stmt: $const84.4 = const(int, 0)
DEBUG 2022-02-07 18:03:07,314 on stmt: $86compare_op.5 = $82binary_modulo.3 == $const84.4
DEBUG 2022-02-07 18:03:07,314 on stmt: bool88 = global(bool: <class 'bool'>)
DEBUG 2022-02-07 18:03:07,314 on stmt: $88pred = call bool88($86compare_op.5, func=bool88, args=(Var($86compare_op.5, _loop_hafnian_subroutines.py:167),), kws=(), vararg=None, target=None)
DEBUG 2022-02-07 18:03:07,314 on stmt: branch $88pred, 90, 124
DEBUG 2022-02-07 18:03:07,314 ==== SSA block rewrite pass on 90
DEBUG 2022-02-07 18:03:07,314 Running <numba.core.ssa._FixSSAVars object at 0x00000196AF20FC70>
DEBUG 2022-02-07 18:03:07,314 on stmt: $92load_method.2 = getattr(value=E_k.2, attr=sum)
DEBUG 2022-02-07 18:03:07,314 on stmt: $94call_method.3 = call $92load_method.2(func=$92load_method.2, args=[], kws=(), vararg=None, target=None)
DEBUG 2022-02-07 18:03:07,314 on stmt: $98binary_true_divide.5 = $94call_method.3 / i
DEBUG 2022-02-07 18:03:07,314 on stmt: $104binary_matrix_multiply.8 = XD_S <built-in function matmul> D_S.2
DEBUG 2022-02-07 18:03:07,314 on stmt: $const106.9 = const(int, 2)
DEBUG 2022-02-07 18:03:07,314 on stmt: $108binary_true_divide.10 = $104binary_matrix_multiply.8 / $const106.9
DEBUG 2022-02-07 18:03:07,314 on stmt: factor.1 = $98binary_true_divide.5 + $108binary_true_divide.10
DEBUG 2022-02-07 18:03:07,314 on stmt: $118inplace_multiply.14 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=E_k.2, rhs=E, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-07 18:03:07,314 on stmt: E_k.1 = $118inplace_multiply.14
DEBUG 2022-02-07 18:03:07,314 on stmt: jump 140
DEBUG 2022-02-07 18:03:07,314 ==== SSA block rewrite pass on 124
DEBUG 2022-02-07 18:03:07,314 Running <numba.core.ssa._FixSSAVars object at 0x00000196AF20FC70>
DEBUG 2022-02-07 18:03:07,314 on stmt: factor.2 = oddVX_S <built-in function matmul> D_S.2
DEBUG 2022-02-07 18:03:07,314 on stmt: $136binary_matrix_multiply.6 = AX_S <built-in function matmul> D_S.2
DEBUG 2022-02-07 18:03:07,314 on stmt: D_S.1 = $136binary_matrix_multiply.6
DEBUG 2022-02-07 18:03:07,314 on stmt: jump 140
DEBUG 2022-02-07 18:03:07,314 ==== SSA block rewrite pass on 140
DEBUG 2022-02-07 18:03:07,314 Running <numba.core.ssa._FixSSAVars object at 0x00000196AF20FC70>
DEBUG 2022-02-07 18:03:07,314 on stmt: factor.3 = phi(incoming_values=[Var(factor, _loop_hafnian_subroutines.py:166), Var(factor.1, _loop_hafnian_subroutines.py:168), Var(factor.2, _loop_hafnian_subroutines.py:171)], incoming_blocks=[72, 90, 124])
DEBUG 2022-02-07 18:03:07,314 on stmt: E_k.3 = phi(incoming_values=[Var(E_k.2, _loop_hafnian_subroutines.py:168), Var(E_k.1, _loop_hafnian_subroutines.py:169), Var(E_k.2, _loop_hafnian_subroutines.py:168)], incoming_blocks=[72, 90, 124])
DEBUG 2022-02-07 18:03:07,314 on stmt: D_S.3 = phi(incoming_values=[Var(D_S.2, _loop_hafnian_subroutines.py:168), Var(D_S.2, _loop_hafnian_subroutines.py:168), Var(D_S.1, _loop_hafnian_subroutines.py:172)], incoming_blocks=[72, 90, 124])
DEBUG 2022-02-07 18:03:07,314 on stmt: powfactor = const(int, 1)
DEBUG 2022-02-07 18:03:07,314 on stmt: $const144.2 = const(int, 1)
DEBUG 2022-02-07 18:03:07,314 on stmt: $148binary_subtract.4 = $const144.2 - count
DEBUG 2022-02-07 18:03:07,314 find_def var='count' stmt=$148binary_subtract.4 = $const144.2 - count
DEBUG 2022-02-07 18:03:07,314 find_def_from_top label 140
DEBUG 2022-02-07 18:03:07,314 idom 62 from label 140
DEBUG 2022-02-07 18:03:07,314 find_def_from_bottom label 62
DEBUG 2022-02-07 18:03:07,314 find_def_from_top label 62
DEBUG 2022-02-07 18:03:07,314 idom 60 from label 62
DEBUG 2022-02-07 18:03:07,314 find_def_from_bottom label 60
DEBUG 2022-02-07 18:03:07,314 find_def_from_top label 60
DEBUG 2022-02-07 18:03:07,314 insert phi node count.2 = phi(incoming_values=[], incoming_blocks=[]) at 60
DEBUG 2022-02-07 18:03:07,314 find_def_from_bottom label 0
DEBUG 2022-02-07 18:03:07,314 incoming_def count = const(int, 0)
DEBUG 2022-02-07 18:03:07,314 find_def_from_bottom label 300
DEBUG 2022-02-07 18:03:07,314 find_def_from_top label 300
DEBUG 2022-02-07 18:03:07,314 idom 202 from label 300
DEBUG 2022-02-07 18:03:07,314 find_def_from_bottom label 202
DEBUG 2022-02-07 18:03:07,314 find_def_from_top label 202
DEBUG 2022-02-07 18:03:07,314 idom 140 from label 202
DEBUG 2022-02-07 18:03:07,314 find_def_from_bottom label 140
DEBUG 2022-02-07 18:03:07,314 incoming_def count.1 = $148binary_subtract.4
DEBUG 2022-02-07 18:03:07,314 replaced with: $148binary_subtract.4 = $const144.2 - count.2
DEBUG 2022-02-07 18:03:07,314 on stmt: count.1 = $148binary_subtract.4
DEBUG 2022-02-07 18:03:07,314 on stmt: $const154.6 = const(int, 1)
DEBUG 2022-02-07 18:03:07,314 on stmt: $158binary_subtract.8 = $const154.6 - count
DEBUG 2022-02-07 18:03:07,314 find_def var='count' stmt=$158binary_subtract.8 = $const154.6 - count
DEBUG 2022-02-07 18:03:07,314 replaced with: $158binary_subtract.8 = $const154.6 - count.1
DEBUG 2022-02-07 18:03:07,314 on stmt: $const160.9 = const(NoneType, None)
DEBUG 2022-02-07 18:03:07,314 on stmt: $const162.10 = const(NoneType, None)
DEBUG 2022-02-07 18:03:07,314 on stmt: $164build_slice.11 = global(slice: <class 'slice'>)
DEBUG 2022-02-07 18:03:07,314 on stmt: $164build_slice.12 = call $164build_slice.11($const160.9, $const162.10, func=$164build_slice.11, args=(Var($const160.9, _loop_hafnian_subroutines.py:176), Var($const162.10, _loop_hafnian_subroutines.py:176)), kws=(), vararg=None, target=None)
DEBUG 2022-02-07 18:03:07,314 on stmt: $166build_tuple.13 = build_tuple(items=[Var($158binary_subtract.8, _loop_hafnian_subroutines.py:176), Var($164build_slice.12, _loop_hafnian_subroutines.py:176)])
DEBUG 2022-02-07 18:03:07,314 on stmt: $168binary_subscr.14 = getitem(value=comb, index=$166build_tuple.13, fn=<built-in function getitem>)
DEBUG 2022-02-07 18:03:07,314 on stmt: $const174.17 = const(NoneType, None)
DEBUG 2022-02-07 18:03:07,314 on stmt: $const176.18 = const(NoneType, None)
DEBUG 2022-02-07 18:03:07,314 on stmt: $178build_slice.19 = global(slice: <class 'slice'>)
DEBUG 2022-02-07 18:03:07,314 on stmt: $178build_slice.20 = call $178build_slice.19($const174.17, $const176.18, func=$178build_slice.19, args=(Var($const174.17, _loop_hafnian_subroutines.py:176), Var($const176.18, _loop_hafnian_subroutines.py:176)), kws=(), vararg=None, target=None)
DEBUG 2022-02-07 18:03:07,314 on stmt: $180build_tuple.21 = build_tuple(items=[Var(count, _loop_hafnian_subroutines.py:161), Var($178build_slice.20, _loop_hafnian_subroutines.py:176)])
DEBUG 2022-02-07 18:03:07,314 find_def var='count' stmt=$180build_tuple.21 = build_tuple(items=[Var(count, _loop_hafnian_subroutines.py:161), Var($178build_slice.20, _loop_hafnian_subroutines.py:176)])
DEBUG 2022-02-07 18:03:07,314 replaced with: $180build_tuple.21 = build_tuple(items=[Var(count.1, _loop_hafnian_subroutines.py:175), Var($178build_slice.20, _loop_hafnian_subroutines.py:176)])
DEBUG 2022-02-07 18:03:07,314 on stmt: comb[$180build_tuple.21] = $168binary_subscr.14
DEBUG 2022-02-07 18:03:07,314 on stmt: $184load_global.22 = global(range: <class 'range'>)
DEBUG 2022-02-07 18:03:07,314 on stmt: $const186.23 = const(int, 1)
DEBUG 2022-02-07 18:03:07,314 on stmt: $192binary_floor_divide.26 = n // i
DEBUG 2022-02-07 18:03:07,314 on stmt: $const194.27 = const(int, 1)
DEBUG 2022-02-07 18:03:07,314 on stmt: $196binary_add.28 = $192binary_floor_divide.26 + $const194.27
DEBUG 2022-02-07 18:03:07,314 on stmt: $198call_function.29 = call $184load_global.22($const186.23, $196binary_add.28, func=$184load_global.22, args=[Var($const186.23, _loop_hafnian_subroutines.py:177), Var($196binary_add.28, _loop_hafnian_subroutines.py:177)], kws=(), vararg=None, target=None)
DEBUG 2022-02-07 18:03:07,329 on stmt: $200get_iter.30 = getiter(value=$198call_function.29)
DEBUG 2022-02-07 18:03:07,329 on stmt: $phi202.1 = $200get_iter.30
DEBUG 2022-02-07 18:03:07,329 on stmt: jump 202
DEBUG 2022-02-07 18:03:07,329 ==== SSA block rewrite pass on 202
DEBUG 2022-02-07 18:03:07,329 Running <numba.core.ssa._FixSSAVars object at 0x00000196AF20FC70>
DEBUG 2022-02-07 18:03:07,329 on stmt: powfactor.2 = phi(incoming_values=[Var(powfactor.1, _loop_hafnian_subroutines.py:178), Var(powfactor, _loop_hafnian_subroutines.py:174)], incoming_blocks=[298, 140])
DEBUG 2022-02-07 18:03:07,329 on stmt: $202for_iter.2 = iternext(value=$phi202.1)
DEBUG 2022-02-07 18:03:07,329 on stmt: $202for_iter.3 = pair_first(value=$202for_iter.2)
DEBUG 2022-02-07 18:03:07,329 on stmt: $202for_iter.4 = pair_second(value=$202for_iter.2)
DEBUG 2022-02-07 18:03:07,329 on stmt: $phi204.2 = $202for_iter.3
DEBUG 2022-02-07 18:03:07,329 on stmt: branch $202for_iter.4, 204, 300
DEBUG 2022-02-07 18:03:07,329 ==== SSA block rewrite pass on 204
DEBUG 2022-02-07 18:03:07,329 Running <numba.core.ssa._FixSSAVars object at 0x00000196AF20FC70>
DEBUG 2022-02-07 18:03:07,329 on stmt: j = $phi204.2
DEBUG 2022-02-07 18:03:07,329 on stmt: $212binary_true_divide.6 = factor.3 / j
DEBUG 2022-02-07 18:03:07,329 on stmt: $214inplace_multiply.7 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=powfactor.2, rhs=$212binary_true_divide.6, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-07 18:03:07,329 on stmt: powfactor.1 = $214inplace_multiply.7
DEBUG 2022-02-07 18:03:07,329 on stmt: $218load_global.8 = global(range: <class 'range'>)
DEBUG 2022-02-07 18:03:07,329 on stmt: $224binary_multiply.11 = i * j
DEBUG 2022-02-07 18:03:07,329 on stmt: $const226.12 = const(int, 1)
DEBUG 2022-02-07 18:03:07,329 on stmt: $228binary_add.13 = $224binary_multiply.11 + $const226.12
DEBUG 2022-02-07 18:03:07,329 on stmt: $const232.15 = const(int, 2)
DEBUG 2022-02-07 18:03:07,329 on stmt: $234binary_add.16 = n + $const232.15
DEBUG 2022-02-07 18:03:07,329 on stmt: $236call_function.17 = call $218load_global.8($228binary_add.13, $234binary_add.16, func=$218load_global.8, args=[Var($228binary_add.13, _loop_hafnian_subroutines.py:179), Var($234binary_add.16, _loop_hafnian_subroutines.py:179)], kws=(), vararg=None, target=None)
DEBUG 2022-02-07 18:03:07,329 on stmt: $238get_iter.18 = getiter(value=$236call_function.17)
DEBUG 2022-02-07 18:03:07,329 on stmt: $phi240.2 = $238get_iter.18
DEBUG 2022-02-07 18:03:07,329 on stmt: jump 240
DEBUG 2022-02-07 18:03:07,329 ==== SSA block rewrite pass on 240
DEBUG 2022-02-07 18:03:07,329 Running <numba.core.ssa._FixSSAVars object at 0x00000196AF20FC70>
DEBUG 2022-02-07 18:03:07,329 on stmt: $240for_iter.3 = iternext(value=$phi240.2)
DEBUG 2022-02-07 18:03:07,329 on stmt: $240for_iter.4 = pair_first(value=$240for_iter.3)
DEBUG 2022-02-07 18:03:07,329 on stmt: $240for_iter.5 = pair_second(value=$240for_iter.3)
DEBUG 2022-02-07 18:03:07,329 on stmt: $phi242.3 = $240for_iter.4
DEBUG 2022-02-07 18:03:07,329 on stmt: branch $240for_iter.5, 242, 298
DEBUG 2022-02-07 18:03:07,329 ==== SSA block rewrite pass on 242
DEBUG 2022-02-07 18:03:07,329 Running <numba.core.ssa._FixSSAVars object at 0x00000196AF20FC70>
DEBUG 2022-02-07 18:03:07,329 on stmt: k = $phi242.3
DEBUG 2022-02-07 18:03:07,329 on stmt: $const250.7 = const(int, 1)
DEBUG 2022-02-07 18:03:07,329 on stmt: $252binary_subtract.8 = k - $const250.7
DEBUG 2022-02-07 18:03:07,329 on stmt: $254build_tuple.9 = build_tuple(items=[Var(count, _loop_hafnian_subroutines.py:161), Var($252binary_subtract.8, _loop_hafnian_subroutines.py:180)])
DEBUG 2022-02-07 18:03:07,329 find_def var='count' stmt=$254build_tuple.9 = build_tuple(items=[Var(count, _loop_hafnian_subroutines.py:161), Var($252binary_subtract.8, _loop_hafnian_subroutines.py:180)])
DEBUG 2022-02-07 18:03:07,329 find_def_from_top label 242
DEBUG 2022-02-07 18:03:07,329 idom 240 from label 242
DEBUG 2022-02-07 18:03:07,329 find_def_from_bottom label 240
DEBUG 2022-02-07 18:03:07,329 find_def_from_top label 240
DEBUG 2022-02-07 18:03:07,329 idom 204 from label 240
DEBUG 2022-02-07 18:03:07,329 find_def_from_bottom label 204
DEBUG 2022-02-07 18:03:07,329 find_def_from_top label 204
DEBUG 2022-02-07 18:03:07,329 idom 202 from label 204
DEBUG 2022-02-07 18:03:07,329 find_def_from_bottom label 202
DEBUG 2022-02-07 18:03:07,329 find_def_from_top label 202
DEBUG 2022-02-07 18:03:07,329 idom 140 from label 202
DEBUG 2022-02-07 18:03:07,329 find_def_from_bottom label 140
DEBUG 2022-02-07 18:03:07,329 replaced with: $254build_tuple.9 = build_tuple(items=[Var(count.1, _loop_hafnian_subroutines.py:175), Var($252binary_subtract.8, _loop_hafnian_subroutines.py:180)])
DEBUG 2022-02-07 18:03:07,329 on stmt: $258binary_subscr.12 = getitem(value=comb, index=$254build_tuple.9, fn=<built-in function getitem>)
DEBUG 2022-02-07 18:03:07,329 on stmt: $const262.14 = const(int, 1)
DEBUG 2022-02-07 18:03:07,329 on stmt: $266binary_subtract.16 = $const262.14 - count
DEBUG 2022-02-07 18:03:07,329 find_def var='count' stmt=$266binary_subtract.16 = $const262.14 - count
DEBUG 2022-02-07 18:03:07,329 find_def_from_top label 242
DEBUG 2022-02-07 18:03:07,329 idom 240 from label 242
DEBUG 2022-02-07 18:03:07,329 find_def_from_bottom label 240
DEBUG 2022-02-07 18:03:07,329 find_def_from_top label 240
DEBUG 2022-02-07 18:03:07,329 idom 204 from label 240
DEBUG 2022-02-07 18:03:07,329 find_def_from_bottom label 204
DEBUG 2022-02-07 18:03:07,329 find_def_from_top label 204
DEBUG 2022-02-07 18:03:07,329 idom 202 from label 204
DEBUG 2022-02-07 18:03:07,329 find_def_from_bottom label 202
DEBUG 2022-02-07 18:03:07,329 find_def_from_top label 202
DEBUG 2022-02-07 18:03:07,329 idom 140 from label 202
DEBUG 2022-02-07 18:03:07,329 find_def_from_bottom label 140
DEBUG 2022-02-07 18:03:07,329 replaced with: $266binary_subtract.16 = $const262.14 - count.1
DEBUG 2022-02-07 18:03:07,329 on stmt: $274binary_multiply.20 = i * j
DEBUG 2022-02-07 18:03:07,329 on stmt: $276binary_subtract.21 = k - $274binary_multiply.20
DEBUG 2022-02-07 18:03:07,329 on stmt: $const278.22 = const(int, 1)
DEBUG 2022-02-07 18:03:07,329 on stmt: $280binary_subtract.23 = $276binary_subtract.21 - $const278.22
DEBUG 2022-02-07 18:03:07,329 on stmt: $282build_tuple.24 = build_tuple(items=[Var($266binary_subtract.16, _loop_hafnian_subroutines.py:180), Var($280binary_subtract.23, _loop_hafnian_subroutines.py:180)])
DEBUG 2022-02-07 18:03:07,329 on stmt: $284binary_subscr.25 = getitem(value=comb, index=$282build_tuple.24, fn=<built-in function getitem>)
DEBUG 2022-02-07 18:03:07,329 on stmt: $288binary_multiply.27 = $284binary_subscr.25 * powfactor.1
DEBUG 2022-02-07 18:03:07,329 on stmt: $290inplace_add.28 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$258binary_subscr.12, rhs=$288binary_multiply.27, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2022-02-07 18:03:07,329 on stmt: comb[$254build_tuple.9] = $290inplace_add.28
DEBUG 2022-02-07 18:03:07,329 on stmt: jump 240
DEBUG 2022-02-07 18:03:07,329 ==== SSA block rewrite pass on 298
DEBUG 2022-02-07 18:03:07,345 Running <numba.core.ssa._FixSSAVars object at 0x00000196AF20FC70>
DEBUG 2022-02-07 18:03:07,345 on stmt: jump 202
DEBUG 2022-02-07 18:03:07,345 ==== SSA block rewrite pass on 300
DEBUG 2022-02-07 18:03:07,345 Running <numba.core.ssa._FixSSAVars object at 0x00000196AF20FC70>
DEBUG 2022-02-07 18:03:07,345 on stmt: jump 60
DEBUG 2022-02-07 18:03:07,345 ==== SSA block rewrite pass on 302
DEBUG 2022-02-07 18:03:07,345 Running <numba.core.ssa._FixSSAVars object at 0x00000196AF20FC70>
DEBUG 2022-02-07 18:03:07,345 on stmt: $const306.2 = const(NoneType, None)
DEBUG 2022-02-07 18:03:07,345 on stmt: $const308.3 = const(NoneType, None)
DEBUG 2022-02-07 18:03:07,345 on stmt: $310build_slice.4 = global(slice: <class 'slice'>)
DEBUG 2022-02-07 18:03:07,345 on stmt: $310build_slice.5 = call $310build_slice.4($const306.2, $const308.3, func=$310build_slice.4, args=(Var($const306.2, _loop_hafnian_subroutines.py:182), Var($const308.3, _loop_hafnian_subroutines.py:182)), kws=(), vararg=None, target=None)
DEBUG 2022-02-07 18:03:07,345 on stmt: $312build_tuple.6 = build_tuple(items=[Var(count, _loop_hafnian_subroutines.py:161), Var($310build_slice.5, _loop_hafnian_subroutines.py:182)])
DEBUG 2022-02-07 18:03:07,345 find_def var='count' stmt=$312build_tuple.6 = build_tuple(items=[Var(count, _loop_hafnian_subroutines.py:161), Var($310build_slice.5, _loop_hafnian_subroutines.py:182)])
DEBUG 2022-02-07 18:03:07,345 find_def_from_top label 302
DEBUG 2022-02-07 18:03:07,345 idom 60 from label 302
DEBUG 2022-02-07 18:03:07,345 find_def_from_bottom label 60
DEBUG 2022-02-07 18:03:07,345 replaced with: $312build_tuple.6 = build_tuple(items=[Var(count.2, _loop_hafnian_subroutines.py:174), Var($310build_slice.5, _loop_hafnian_subroutines.py:182)])
DEBUG 2022-02-07 18:03:07,345 on stmt: $314binary_subscr.7 = getitem(value=comb, index=$312build_tuple.6, fn=<built-in function getitem>)
DEBUG 2022-02-07 18:03:07,345 on stmt: $316return_value.8 = cast(value=$314binary_subscr.7)
DEBUG 2022-02-07 18:03:07,345 on stmt: return $316return_value.8
DEBUG 2022-02-07 18:03:07,367 bytecode dump:
>          0	NOP(arg=None, lineno=3)
           2	LOAD_GLOBAL(arg=0, lineno=3)
           4	LOAD_FAST(arg=0, lineno=3)
           6	LOAD_FAST(arg=1, lineno=3)
           8	CALL_FUNCTION(arg=2, lineno=3)
          10	RETURN_VALUE(arg=None, lineno=3)
DEBUG 2022-02-07 18:03:07,367 pending: deque([State(pc_initial=0 nstack_initial=0)])
DEBUG 2022-02-07 18:03:07,367 stack: []
DEBUG 2022-02-07 18:03:07,367 dispatch pc=0, inst=NOP(arg=None, lineno=3)
DEBUG 2022-02-07 18:03:07,367 stack []
DEBUG 2022-02-07 18:03:07,367 dispatch pc=2, inst=LOAD_GLOBAL(arg=0, lineno=3)
DEBUG 2022-02-07 18:03:07,367 stack []
DEBUG 2022-02-07 18:03:07,367 dispatch pc=4, inst=LOAD_FAST(arg=0, lineno=3)
DEBUG 2022-02-07 18:03:07,367 stack ['$2load_global.0']
DEBUG 2022-02-07 18:03:07,367 dispatch pc=6, inst=LOAD_FAST(arg=1, lineno=3)
DEBUG 2022-02-07 18:03:07,367 stack ['$2load_global.0', '$tmp04.1']
DEBUG 2022-02-07 18:03:07,367 dispatch pc=8, inst=CALL_FUNCTION(arg=2, lineno=3)
DEBUG 2022-02-07 18:03:07,367 stack ['$2load_global.0', '$tmp04.1', '$dtype6.2']
DEBUG 2022-02-07 18:03:07,367 dispatch pc=10, inst=RETURN_VALUE(arg=None, lineno=3)
DEBUG 2022-02-07 18:03:07,367 stack ['$8call_function.3']
DEBUG 2022-02-07 18:03:07,367 end state. edges=[]
DEBUG 2022-02-07 18:03:07,367 -------------------------Prune PHIs-------------------------
DEBUG 2022-02-07 18:03:07,367 Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
DEBUG 2022-02-07 18:03:07,367 defmap: {}
DEBUG 2022-02-07 18:03:07,367 phismap: defaultdict(<class 'set'>, {})
DEBUG 2022-02-07 18:03:07,367 changing phismap: defaultdict(<class 'set'>, {})
DEBUG 2022-02-07 18:03:07,367 keep phismap: {}
DEBUG 2022-02-07 18:03:07,367 new_out: defaultdict(<class 'dict'>, {})
DEBUG 2022-02-07 18:03:07,367 ----------------------DONE Prune PHIs-----------------------
DEBUG 2022-02-07 18:03:07,367 block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$2load_global.0'}), (4, {'res': '$tmp04.1'}), (6, {'res': '$dtype6.2'}), (8, {'func': '$2load_global.0', 'args': ['$tmp04.1', '$dtype6.2'], 'res': '$8call_function.3'}), (10, {'retval': '$8call_function.3', 'castval': '$10return_value.4'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG 2022-02-07 18:03:07,367 label 0:
    tmp0 = arg(0, name=tmp0)                 ['tmp0']
    dtype = arg(1, name=dtype)               ['dtype']
    $2load_global.0 = global(intrin: <intrinsic stub>) ['$2load_global.0']
    $8call_function.3 = call $2load_global.0(tmp0, dtype, func=$2load_global.0, args=[Var(tmp0, <string>:3), Var(dtype, <string>:3)], kws=(), vararg=None, target=None) ['$2load_global.0', '$8call_function.3', 'dtype', 'tmp0']
    $10return_value.4 = cast(value=$8call_function.3) ['$10return_value.4', '$8call_function.3']
    return $10return_value.4                 ['$10return_value.4']

DEBUG 2022-02-07 18:03:07,367 ==== SSA block analysis pass on 0
DEBUG 2022-02-07 18:03:07,367 Running <numba.core.ssa._GatherDefsHandler object at 0x00000196B025F790>
DEBUG 2022-02-07 18:03:07,367 on stmt: tmp0 = arg(0, name=tmp0)
DEBUG 2022-02-07 18:03:07,367 on stmt: dtype = arg(1, name=dtype)
DEBUG 2022-02-07 18:03:07,367 on stmt: $2load_global.0 = global(intrin: <intrinsic stub>)
DEBUG 2022-02-07 18:03:07,367 on stmt: $8call_function.3 = call $2load_global.0(tmp0, dtype, func=$2load_global.0, args=[Var(tmp0, <string>:3), Var(dtype, <string>:3)], kws=(), vararg=None, target=None)
DEBUG 2022-02-07 18:03:07,367 on stmt: $10return_value.4 = cast(value=$8call_function.3)
DEBUG 2022-02-07 18:03:07,367 on stmt: return $10return_value.4
DEBUG 2022-02-07 18:03:07,367 defs defaultdict(<class 'list'>,
            {'$10return_value.4': [<numba.core.ir.Assign object at 0x00000196B0260520>],
             '$2load_global.0': [<numba.core.ir.Assign object at 0x00000196B025FFA0>],
             '$8call_function.3': [<numba.core.ir.Assign object at 0x00000196B0260400>],
             'dtype': [<numba.core.ir.Assign object at 0x00000196B025F1F0>],
             'tmp0': [<numba.core.ir.Assign object at 0x00000196B025F490>]})
DEBUG 2022-02-07 18:03:07,367 SSA violators set()
